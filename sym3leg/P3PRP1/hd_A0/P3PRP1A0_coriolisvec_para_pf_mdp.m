% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [11x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRP1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:42
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRP1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1),zeros(11,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRP1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRP1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRP1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3PRP1A0_coriolisvec_para_pf_mdp: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRP1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRP1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [11 1]), ...
  'P3PRP1A0_coriolisvec_para_pf_mdp: MDP has to be [11x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:42:41
% EndTime: 2019-05-03 14:42:51
% DurationCPUTime: 11.10s
% Computational Cost: add. (77995->466), mult. (157389->743), div. (2853->6), fcn. (50464->14), ass. (0->303)
t2372 = (pkin(2) ^ 2);
t2348 = 1 + t2372;
t2532 = MDP(3) + MDP(5);
t2368 = koppelP(3,1);
t2365 = koppelP(3,2);
t2501 = qJ(3,3) * t2365;
t2319 = pkin(2) * t2368 - t2501;
t2500 = qJ(3,3) * t2368;
t2320 = pkin(2) * t2365 + t2500;
t2361 = xP(3);
t2339 = sin(t2361);
t2340 = cos(t2361);
t2274 = t2319 * t2340 - t2320 * t2339;
t2349 = legFrame(3,3);
t2331 = sin(t2349);
t2334 = cos(t2349);
t2406 = t2319 * t2339 + t2320 * t2340;
t2531 = -t2274 * t2331 + t2334 * t2406;
t2369 = koppelP(2,1);
t2366 = koppelP(2,2);
t2509 = qJ(3,2) * t2366;
t2321 = pkin(2) * t2369 - t2509;
t2508 = qJ(3,2) * t2369;
t2322 = pkin(2) * t2366 + t2508;
t2275 = t2321 * t2340 - t2322 * t2339;
t2350 = legFrame(2,3);
t2332 = sin(t2350);
t2335 = cos(t2350);
t2405 = t2321 * t2339 + t2322 * t2340;
t2530 = -t2275 * t2332 + t2335 * t2405;
t2370 = koppelP(1,1);
t2367 = koppelP(1,2);
t2517 = qJ(3,1) * t2367;
t2323 = pkin(2) * t2370 - t2517;
t2516 = qJ(3,1) * t2370;
t2324 = pkin(2) * t2367 + t2516;
t2276 = t2323 * t2340 - t2324 * t2339;
t2351 = legFrame(1,3);
t2333 = sin(t2351);
t2336 = cos(t2351);
t2404 = t2323 * t2339 + t2324 * t2340;
t2529 = -t2276 * t2333 + t2336 * t2404;
t2362 = (qJ(3,3) ^ 2);
t2325 = -t2362 + t2348;
t2355 = cos(qJ(2,3));
t2344 = t2355 ^ 2;
t2352 = sin(qJ(2,3));
t2478 = t2352 * t2355;
t2445 = pkin(2) * t2478;
t2466 = t2372 + t2362;
t2286 = 0.2e1 * qJ(3,3) * t2445 + t2325 * t2344 - t2466 - 0.1e1;
t2277 = 0.1e1 / t2286;
t2363 = (qJ(3,2) ^ 2);
t2326 = -t2363 + t2348;
t2356 = cos(qJ(2,2));
t2345 = t2356 ^ 2;
t2353 = sin(qJ(2,2));
t2477 = t2353 * t2356;
t2444 = pkin(2) * t2477;
t2465 = t2372 + t2363;
t2287 = 0.2e1 * qJ(3,2) * t2444 + t2326 * t2345 - t2465 - 0.1e1;
t2280 = 0.1e1 / t2287;
t2364 = (qJ(3,1) ^ 2);
t2327 = -t2364 + t2348;
t2357 = cos(qJ(2,1));
t2346 = t2357 ^ 2;
t2354 = sin(qJ(2,1));
t2476 = t2354 * t2357;
t2443 = pkin(2) * t2476;
t2464 = t2372 + t2364;
t2288 = 0.2e1 * qJ(3,1) * t2443 + t2327 * t2346 - t2464 - 0.1e1;
t2283 = 0.1e1 / t2288;
t2278 = 0.1e1 / t2286 ^ 2;
t2281 = 0.1e1 / t2287 ^ 2;
t2284 = 0.1e1 / t2288 ^ 2;
t2358 = xDP(3);
t2359 = xDP(2);
t2360 = xDP(1);
t2298 = t2339 * t2368 + t2340 * t2365;
t2301 = -t2339 * t2365 + t2340 * t2368;
t2409 = t2298 * t2334 - t2301 * t2331;
t2337 = t2359 * pkin(2);
t2338 = pkin(2) * t2360;
t2502 = qJ(3,3) * t2360;
t2503 = qJ(3,3) * t2359;
t2412 = (t2274 * t2358 + t2337 + t2502) * t2331 - (t2358 * t2406 - t2338 + t2503) * t2334;
t2504 = qJ(3,3) * t2355;
t2458 = 0.2e1 * t2504;
t2229 = t2412 * t2352 + (-t2359 * t2331 - t2360 * t2334 + t2358 * t2409) * t2458;
t2490 = t2229 * t2277;
t2224 = pkin(2) * t2490;
t2452 = pkin(2) * t2500;
t2475 = t2362 * t2365;
t2304 = -t2365 + t2452 - t2475;
t2328 = pkin(2) * t2501;
t2305 = t2362 * t2368 + t2328 + t2368;
t2382 = (-t2304 * t2340 + t2305 * t2339) * t2334 - (t2304 * t2339 + t2305 * t2340) * t2331;
t2214 = ((-pkin(2) * t2503 - t2360 * t2362 - t2360) * t2334 - (-pkin(2) * t2502 + t2359 * t2362 + t2359) * t2331 + t2382 * t2358) * t2352 - t2412 * t2504;
t2495 = t2214 * t2277;
t2203 = t2224 - t2495;
t2217 = t2362 * t2490;
t2459 = -0.2e1 * t2504;
t2505 = qJ(3,3) * t2334;
t2268 = t2331 * t2459 + t2352 * (pkin(2) * t2331 - t2505);
t2506 = qJ(3,3) * t2331;
t2269 = t2334 * t2459 + t2352 * (pkin(2) * t2334 + t2506);
t2347 = t2358 ^ 2;
t2481 = t2277 * t2347;
t2432 = t2301 * t2481;
t2433 = t2298 * t2481;
t2279 = t2277 * t2278;
t2496 = t2214 * t2229;
t2436 = t2279 * t2496;
t2489 = t2229 * t2278;
t2187 = -t2269 * t2432 - t2268 * t2433 - (-(pkin(2) * t2203 - t2217) * t2478 + (-t2495 + (0.2e1 * t2224 - t2495) * t2344) * qJ(3,3)) * t2489 - (-qJ(3,3) * t2344 - qJ(3,3) + t2445) * t2436;
t2528 = pkin(2) * t2187;
t2299 = t2339 * t2369 + t2340 * t2366;
t2302 = -t2339 * t2366 + t2340 * t2369;
t2408 = t2299 * t2335 - t2302 * t2332;
t2510 = qJ(3,2) * t2360;
t2511 = qJ(3,2) * t2359;
t2411 = (t2275 * t2358 + t2337 + t2510) * t2332 - (t2358 * t2405 - t2338 + t2511) * t2335;
t2512 = qJ(3,2) * t2356;
t2460 = 0.2e1 * t2512;
t2230 = t2411 * t2353 + (-t2359 * t2332 - t2360 * t2335 + t2358 * t2408) * t2460;
t2488 = t2230 * t2280;
t2225 = pkin(2) * t2488;
t2454 = pkin(2) * t2508;
t2474 = t2363 * t2366;
t2306 = -t2366 + t2454 - t2474;
t2329 = pkin(2) * t2509;
t2307 = t2363 * t2369 + t2329 + t2369;
t2381 = (-t2306 * t2340 + t2307 * t2339) * t2335 - (t2306 * t2339 + t2307 * t2340) * t2332;
t2215 = ((-pkin(2) * t2511 - t2360 * t2363 - t2360) * t2335 - (-pkin(2) * t2510 + t2359 * t2363 + t2359) * t2332 + t2381 * t2358) * t2353 - t2411 * t2512;
t2493 = t2215 * t2280;
t2204 = t2225 - t2493;
t2218 = t2363 * t2488;
t2461 = -0.2e1 * t2512;
t2513 = qJ(3,2) * t2335;
t2270 = t2332 * t2461 + t2353 * (pkin(2) * t2332 - t2513);
t2514 = qJ(3,2) * t2332;
t2271 = t2335 * t2461 + t2353 * (pkin(2) * t2335 + t2514);
t2480 = t2280 * t2347;
t2430 = t2302 * t2480;
t2431 = t2299 * t2480;
t2282 = t2280 * t2281;
t2494 = t2215 * t2230;
t2435 = t2282 * t2494;
t2487 = t2230 * t2281;
t2188 = -t2271 * t2430 - t2270 * t2431 - (-(pkin(2) * t2204 - t2218) * t2477 + (-t2493 + (0.2e1 * t2225 - t2493) * t2345) * qJ(3,2)) * t2487 - (-qJ(3,2) * t2345 - qJ(3,2) + t2444) * t2435;
t2527 = pkin(2) * t2188;
t2300 = t2339 * t2370 + t2340 * t2367;
t2303 = -t2339 * t2367 + t2340 * t2370;
t2407 = t2300 * t2336 - t2303 * t2333;
t2518 = qJ(3,1) * t2360;
t2519 = qJ(3,1) * t2359;
t2410 = (t2276 * t2358 + t2337 + t2518) * t2333 - (t2358 * t2404 - t2338 + t2519) * t2336;
t2520 = qJ(3,1) * t2357;
t2462 = 0.2e1 * t2520;
t2231 = t2410 * t2354 + (-t2359 * t2333 - t2360 * t2336 + t2358 * t2407) * t2462;
t2486 = t2231 * t2283;
t2220 = pkin(2) * t2486;
t2456 = pkin(2) * t2516;
t2473 = t2364 * t2367;
t2308 = -t2367 + t2456 - t2473;
t2330 = pkin(2) * t2517;
t2309 = t2364 * t2370 + t2330 + t2370;
t2380 = (-t2308 * t2340 + t2309 * t2339) * t2336 - (t2308 * t2339 + t2309 * t2340) * t2333;
t2216 = ((-pkin(2) * t2519 - t2360 * t2364 - t2360) * t2336 - (-pkin(2) * t2518 + t2359 * t2364 + t2359) * t2333 + t2380 * t2358) * t2354 - t2410 * t2520;
t2491 = t2216 * t2283;
t2202 = t2220 - t2491;
t2219 = t2364 * t2486;
t2463 = -0.2e1 * t2520;
t2521 = qJ(3,1) * t2336;
t2272 = t2333 * t2463 + t2354 * (pkin(2) * t2333 - t2521);
t2522 = qJ(3,1) * t2333;
t2273 = t2336 * t2463 + t2354 * (pkin(2) * t2336 + t2522);
t2479 = t2283 * t2347;
t2428 = t2303 * t2479;
t2429 = t2300 * t2479;
t2285 = t2283 * t2284;
t2492 = t2216 * t2231;
t2434 = t2285 * t2492;
t2485 = t2231 * t2284;
t2189 = -t2273 * t2428 - t2272 * t2429 - (-(pkin(2) * t2202 - t2219) * t2476 + (-t2491 + (0.2e1 * t2220 - t2491) * t2346) * qJ(3,1)) * t2485 - (-qJ(3,1) * t2346 - qJ(3,1) + t2443) * t2434;
t2526 = pkin(2) * t2189;
t2524 = -MDP(4) + MDP(6);
t2523 = qJ(3,1) * t2189;
t2515 = qJ(3,2) * t2188;
t2507 = qJ(3,3) * t2187;
t2449 = pkin(2) * t2506;
t2289 = t2325 * t2334 + 0.2e1 * t2449;
t2448 = pkin(2) * t2505;
t2397 = -t2325 * t2331 + 0.2e1 * t2448;
t2244 = t2289 * t2344 - t2334 * t2372 + t2397 * t2478 - t2334 - t2449;
t2245 = -t2289 * t2478 + t2372 * t2331 + t2397 * t2344 + t2331 - t2448;
t2371 = pkin(2) * t2372;
t2453 = pkin(2) * t2504;
t2472 = t2372 * t2490 + t2217;
t2175 = (-(-t2472 * t2504 + (t2214 * t2453 + t2352 * (-t2348 * t2214 + (t2371 + (1 + t2362) * pkin(2)) * t2229)) * t2277) * t2229 - (-t2348 * t2352 + t2453) * t2490 * t2214) * t2278 + (-t2244 * t2298 - t2245 * t2301) * t2481;
t2499 = t2175 * t2352;
t2450 = pkin(2) * t2514;
t2290 = t2326 * t2335 + 0.2e1 * t2450;
t2447 = pkin(2) * t2513;
t2400 = -t2326 * t2332 + 0.2e1 * t2447;
t2246 = t2290 * t2345 - t2335 * t2372 + t2400 * t2477 - t2335 - t2450;
t2247 = -t2290 * t2477 + t2372 * t2332 + t2400 * t2345 + t2332 - t2447;
t2455 = pkin(2) * t2512;
t2471 = t2372 * t2488 + t2218;
t2176 = (-(-t2471 * t2512 + (t2215 * t2455 + t2353 * (-t2348 * t2215 + (t2371 + (1 + t2363) * pkin(2)) * t2230)) * t2280) * t2230 - (-t2348 * t2353 + t2455) * t2488 * t2215) * t2281 + (-t2246 * t2299 - t2247 * t2302) * t2480;
t2498 = t2176 * t2353;
t2451 = pkin(2) * t2522;
t2291 = t2327 * t2336 + 0.2e1 * t2451;
t2446 = pkin(2) * t2521;
t2403 = -t2327 * t2333 + 0.2e1 * t2446;
t2248 = t2291 * t2346 - t2336 * t2372 + t2403 * t2476 - t2336 - t2451;
t2249 = -t2291 * t2476 + t2372 * t2333 + t2403 * t2346 + t2333 - t2446;
t2457 = pkin(2) * t2520;
t2470 = t2372 * t2486 + t2219;
t2177 = (-(-t2470 * t2520 + (t2216 * t2457 + t2354 * (-t2348 * t2216 + (t2371 + (1 + t2364) * pkin(2)) * t2231)) * t2283) * t2231 - (-t2348 * t2354 + t2457) * t2486 * t2216) * t2284 + (-t2248 * t2300 - t2249 * t2303) * t2479;
t2497 = t2177 * t2354;
t2469 = t2348 * t2365;
t2468 = t2348 * t2366;
t2467 = t2348 * t2367;
t2442 = t2187 * t2277 * t2355;
t2441 = t2188 * t2280 * t2356;
t2440 = t2189 * t2283 * t2357;
t2439 = (0.2e1 * t2214 * t2352 + (-pkin(2) * t2352 + t2504) * t2229) * t2277 * t2489;
t2438 = (0.2e1 * t2215 * t2353 + (-pkin(2) * t2353 + t2512) * t2230) * t2280 * t2487;
t2437 = (0.2e1 * t2216 * t2354 + (-pkin(2) * t2354 + t2520) * t2231) * t2283 * t2485;
t2424 = MDP(7) * qJ(3,1) + MDP(6);
t2423 = MDP(7) * qJ(3,2) + MDP(6);
t2422 = MDP(7) * qJ(3,3) + MDP(6);
t2421 = t2353 * t2524;
t2420 = t2524 * t2352;
t2419 = t2524 * t2354;
t2395 = t2334 * t2362 - t2449;
t2396 = -t2331 * t2362 - t2448;
t2250 = t2396 * t2355 + t2352 * (-t2334 - t2395);
t2253 = t2395 * t2355 - t2352 * (t2331 - t2396);
t2418 = (t2203 * t2478 + ((-pkin(2) * t2214 - t2229 * t2344 + t2229) * t2277 + t2472) * qJ(3,3)) * t2489 + t2250 * t2432 + t2253 * t2433 - (qJ(3,3) * pkin(2) + t2478) * t2436;
t2398 = t2335 * t2363 - t2450;
t2399 = -t2332 * t2363 - t2447;
t2251 = t2399 * t2356 + t2353 * (-t2335 - t2398);
t2254 = t2398 * t2356 - t2353 * (t2332 - t2399);
t2417 = (t2204 * t2477 + ((-pkin(2) * t2215 - t2230 * t2345 + t2230) * t2280 + t2471) * qJ(3,2)) * t2487 + t2251 * t2430 + t2254 * t2431 - (pkin(2) * qJ(3,2) + t2477) * t2435;
t2401 = t2336 * t2364 - t2451;
t2402 = -t2333 * t2364 - t2446;
t2252 = t2402 * t2357 + t2354 * (-t2336 - t2401);
t2255 = t2401 * t2357 - t2354 * (t2333 - t2402);
t2416 = (t2202 * t2476 + ((-pkin(2) * t2216 - t2231 * t2346 + t2231) * t2283 + t2470) * qJ(3,1)) * t2485 + t2252 * t2428 + t2255 * t2429 - (pkin(2) * qJ(3,1) + t2476) * t2434;
t2415 = MDP(3) * t2355 - MDP(4) * t2352;
t2414 = MDP(3) * t2356 - MDP(4) * t2353;
t2413 = MDP(3) * t2357 - MDP(4) * t2354;
t2394 = t2175 * t2355 + t2418;
t2393 = t2176 * t2356 + t2417;
t2392 = t2177 * t2357 + t2416;
t2391 = 0.2e1 * t2422 * t2496;
t2390 = 0.2e1 * t2423 * t2494;
t2389 = 0.2e1 * t2424 * t2492;
t2388 = MDP(5) * (t2394 + 0.2e1 * t2528) + MDP(6) * (t2499 + 0.2e1 * t2507) + MDP(7) * (pkin(2) * t2394 + qJ(3,3) * t2499 + t2187 * t2466);
t2387 = MDP(5) * (t2393 + 0.2e1 * t2527) + MDP(6) * (t2498 + 0.2e1 * t2515) + MDP(7) * (pkin(2) * t2393 + qJ(3,2) * t2498 + t2188 * t2465);
t2386 = MDP(5) * (t2392 + 0.2e1 * t2526) + MDP(6) * (t2497 + 0.2e1 * t2523) + MDP(7) * (pkin(2) * t2392 + qJ(3,1) * t2497 + t2189 * t2464);
t2385 = -t2352 * t2532 + t2355 * t2524;
t2384 = -t2353 * t2532 + t2356 * t2524;
t2383 = -t2354 * t2532 + t2357 * t2524;
t2315 = t2456 + t2467;
t2314 = t2370 * t2372 - t2330 + t2370;
t2313 = t2454 + t2468;
t2312 = t2369 * t2372 - t2329 + t2369;
t2311 = t2452 + t2469;
t2310 = t2368 * t2372 - t2328 + t2368;
t2297 = 0.2e1 * t2456 + t2467 - t2473;
t2296 = t2327 * t2370 - 0.2e1 * t2330;
t2295 = 0.2e1 * t2454 + t2468 - t2474;
t2294 = t2326 * t2369 - 0.2e1 * t2329;
t2293 = 0.2e1 * t2452 + t2469 - t2475;
t2292 = t2325 * t2368 - 0.2e1 * t2328;
t2267 = t2296 * t2339 + t2297 * t2340;
t2266 = t2296 * t2340 - t2297 * t2339;
t2265 = t2294 * t2339 + t2295 * t2340;
t2264 = t2294 * t2340 - t2295 * t2339;
t2263 = t2292 * t2339 + t2293 * t2340;
t2262 = t2292 * t2340 - t2293 * t2339;
t2237 = -t2354 * t2529 + t2407 * t2462;
t2236 = -t2353 * t2530 + t2408 * t2460;
t2235 = -t2352 * t2531 + t2409 * t2458;
t2234 = t2380 * t2354 + t2520 * t2529;
t2233 = t2381 * t2353 + t2512 * t2530;
t2232 = t2382 * t2352 + t2504 * t2531;
t2228 = t2231 ^ 2;
t2227 = t2230 ^ 2;
t2226 = t2229 ^ 2;
t2213 = (t2266 * t2336 + t2267 * t2333) * t2346 + (-t2266 * t2333 + t2267 * t2336) * t2476 + (-t2314 * t2340 + t2315 * t2339) * t2336 - (t2314 * t2339 + t2315 * t2340) * t2333;
t2212 = (t2264 * t2335 + t2265 * t2332) * t2345 + (-t2264 * t2332 + t2265 * t2335) * t2477 + (-t2312 * t2340 + t2313 * t2339) * t2335 - (t2312 * t2339 + t2313 * t2340) * t2332;
t2211 = (t2262 * t2334 + t2263 * t2331) * t2344 + (-t2262 * t2331 + t2263 * t2334) * t2478 + (-t2310 * t2340 + t2311 * t2339) * t2334 - (t2310 * t2339 + t2311 * t2340) * t2331;
t2168 = -t2392 - t2526;
t2167 = -t2393 - t2527;
t2166 = -t2394 - t2528;
t2165 = (t2416 + t2526) * t2357 + t2354 * t2523 + t2177;
t2164 = (t2417 + t2527) * t2356 + t2353 * t2515 + t2176;
t2163 = (t2418 + t2528) * t2355 + t2352 * t2507 + t2175;
t1 = [(t2245 * t2439 + t2247 * t2438 + t2249 * t2437) * MDP(7) + (MDP(10) * t2339 - MDP(9) * t2340) * t2347 + (t2273 * t2389 + (t2249 * t2383 - t2252 * t2424) * t2228) * t2285 + (t2271 * t2390 + (t2247 * t2384 - t2251 * t2423) * t2227) * t2282 + (t2269 * t2391 + (t2245 * t2385 - t2250 * t2422) * t2226) * t2279 + ((t2165 * t2249 + t2168 * t2252) * MDP(7) + t2386 * t2273 + (t2273 * MDP(2) - t2252 * MDP(5) + t2249 * t2419) * t2189 + (t2249 * MDP(1) + t2273 * t2413) * t2177) * t2283 + ((t2164 * t2247 + t2167 * t2251) * MDP(7) + t2387 * t2271 + (t2271 * MDP(2) - t2251 * MDP(5) + t2247 * t2421) * t2188 + (t2247 * MDP(1) + t2271 * t2414) * t2176) * t2280 + ((t2163 * t2245 + t2166 * t2250) * MDP(7) + t2388 * t2269 + (t2269 * MDP(2) - t2250 * MDP(5) + t2245 * t2420) * t2187 + (t2245 * MDP(1) + t2269 * t2415) * t2175) * t2277 + t2532 * (t2245 * t2442 + t2247 * t2441 + t2249 * t2440); (t2244 * t2439 + t2246 * t2438 + t2248 * t2437) * MDP(7) + (-MDP(10) * t2340 - MDP(9) * t2339) * t2347 + (t2272 * t2389 + (t2248 * t2383 - t2255 * t2424) * t2228) * t2285 + (t2270 * t2390 + (t2246 * t2384 - t2254 * t2423) * t2227) * t2282 + (t2268 * t2391 + (t2244 * t2385 - t2253 * t2422) * t2226) * t2279 + ((t2165 * t2248 + t2168 * t2255) * MDP(7) + t2386 * t2272 + (t2272 * MDP(2) - t2255 * MDP(5) + t2248 * t2419) * t2189 + (t2248 * MDP(1) + t2272 * t2413) * t2177) * t2283 + ((t2164 * t2246 + t2167 * t2254) * MDP(7) + t2387 * t2270 + (t2270 * MDP(2) - t2254 * MDP(5) + t2246 * t2421) * t2188 + (t2246 * MDP(1) + t2270 * t2414) * t2176) * t2280 + ((t2163 * t2244 + t2166 * t2253) * MDP(7) + t2388 * t2268 + (t2268 * MDP(2) - t2253 * MDP(5) + t2244 * t2420) * t2187 + (t2244 * MDP(1) + t2268 * t2415) * t2175) * t2277 + t2532 * (t2244 * t2442 + t2246 * t2441 + t2248 * t2440); (t2211 * t2439 + t2212 * t2438 + t2213 * t2437) * MDP(7) + (t2237 * t2389 + (t2213 * t2383 - t2234 * t2424) * t2228) * t2285 + (t2236 * t2390 + (t2212 * t2384 - t2233 * t2423) * t2227) * t2282 + (t2235 * t2391 + (t2211 * t2385 - t2232 * t2422) * t2226) * t2279 + ((t2165 * t2213 + t2168 * t2234) * MDP(7) + t2386 * t2237 + (t2237 * MDP(2) - t2234 * MDP(5) + t2213 * t2419) * t2189 + (t2213 * MDP(1) + t2237 * t2413) * t2177) * t2283 + ((t2164 * t2212 + t2167 * t2233) * MDP(7) + t2387 * t2236 + (t2236 * MDP(2) - t2233 * MDP(5) + t2212 * t2421) * t2188 + (t2212 * MDP(1) + t2236 * t2414) * t2176) * t2280 + ((t2163 * t2211 + t2166 * t2232) * MDP(7) + t2388 * t2235 + (t2235 * MDP(2) - t2232 * MDP(5) + t2211 * t2420) * t2187 + (t2211 * MDP(1) + t2235 * t2415) * t2175) * t2277 + t2532 * (t2211 * t2442 + t2212 * t2441 + t2213 * t2440);];
taucX  = t1;
