% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*(3+1)/2x11]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:42
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRP1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRP1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRP1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3PRP1A0_inertia_para_pf_regmin: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRP1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRP1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:42:10
% EndTime: 2019-05-03 14:42:14
% DurationCPUTime: 4.35s
% Computational Cost: add. (11093->449), mult. (22279->758), div. (651->6), fcn. (9146->14), ass. (0->292)
t624 = (pkin(2) ^ 2);
t766 = t624 + 1;
t621 = koppelP(3,1);
t618 = koppelP(3,2);
t743 = qJ(3,3) * t618;
t579 = pkin(2) * t621 - t743;
t742 = qJ(3,3) * t621;
t580 = pkin(2) * t618 + t742;
t605 = legFrame(3,3);
t591 = sin(t605);
t594 = cos(t605);
t614 = xP(3);
t597 = sin(t614);
t598 = cos(t614);
t772 = (t597 * t579 + t580 * t598) * t594 - (t579 * t598 - t597 * t580) * t591;
t622 = koppelP(2,1);
t619 = koppelP(2,2);
t748 = qJ(3,2) * t619;
t581 = pkin(2) * t622 - t748;
t747 = qJ(3,2) * t622;
t582 = pkin(2) * t619 + t747;
t606 = legFrame(2,3);
t592 = sin(t606);
t595 = cos(t606);
t771 = (t597 * t581 + t582 * t598) * t595 - (t581 * t598 - t597 * t582) * t592;
t623 = koppelP(1,1);
t620 = koppelP(1,2);
t753 = qJ(3,1) * t620;
t583 = pkin(2) * t623 - t753;
t752 = qJ(3,1) * t623;
t584 = pkin(2) * t620 + t752;
t607 = legFrame(1,3);
t593 = sin(t607);
t596 = cos(t607);
t770 = (t597 * t583 + t584 * t598) * t596 - (t583 * t598 - t597 * t584) * t593;
t769 = 2 * qJ(3,1);
t768 = 2 * qJ(3,2);
t767 = 2 * qJ(3,3);
t608 = sin(qJ(2,3));
t611 = cos(qJ(2,3));
t744 = qJ(3,3) * t611;
t677 = -0.2e1 * t744;
t745 = qJ(3,3) * t594;
t533 = t591 * t677 + t608 * (pkin(2) * t591 - t745);
t765 = pkin(2) * t533;
t746 = qJ(3,3) * t591;
t534 = t594 * t677 + t608 * (pkin(2) * t594 + t746);
t764 = pkin(2) * t534;
t609 = sin(qJ(2,2));
t612 = cos(qJ(2,2));
t749 = qJ(3,2) * t612;
t679 = -0.2e1 * t749;
t750 = qJ(3,2) * t595;
t535 = t592 * t679 + t609 * (pkin(2) * t592 - t750);
t763 = pkin(2) * t535;
t751 = qJ(3,2) * t592;
t536 = t595 * t679 + t609 * (pkin(2) * t595 + t751);
t762 = pkin(2) * t536;
t610 = sin(qJ(2,1));
t613 = cos(qJ(2,1));
t754 = qJ(3,1) * t613;
t681 = -0.2e1 * t754;
t755 = qJ(3,1) * t596;
t537 = t593 * t681 + t610 * (pkin(2) * t593 - t755);
t761 = pkin(2) * t537;
t756 = qJ(3,1) * t593;
t538 = t596 * t681 + t610 * (pkin(2) * t596 + t756);
t760 = pkin(2) * t538;
t617 = qJ(3,1) ^ 2;
t587 = -t617 + t766;
t604 = t613 ^ 2;
t680 = 0.2e1 * t754;
t682 = t624 + t617;
t550 = pkin(2) * t610 * t680 + t587 * t604 - t682 - 0.1e1;
t546 = 0.1e1 / t550;
t562 = t597 * t623 + t598 * t620;
t565 = -t597 * t620 + t598 * t623;
t488 = (t537 * t565 - t538 * t562) * t546;
t759 = t488 * pkin(2);
t615 = qJ(3,3) ^ 2;
t585 = -t615 + t766;
t602 = t611 ^ 2;
t676 = 0.2e1 * t744;
t684 = t624 + t615;
t548 = pkin(2) * t608 * t676 + t585 * t602 - t684 - 0.1e1;
t542 = 0.1e1 / t548;
t560 = t597 * t621 + t598 * t618;
t563 = -t597 * t618 + t598 * t621;
t489 = (t533 * t563 - t534 * t560) * t542;
t758 = t489 * pkin(2);
t616 = qJ(3,2) ^ 2;
t586 = -t616 + t766;
t603 = t612 ^ 2;
t678 = 0.2e1 * t749;
t683 = t624 + t616;
t549 = pkin(2) * t609 * t678 + t586 * t603 - t683 - 0.1e1;
t544 = 0.1e1 / t549;
t561 = t597 * t622 + t598 * t619;
t564 = -t597 * t619 + t598 * t622;
t490 = (t535 * t564 - t536 * t561) * t544;
t757 = t490 * pkin(2);
t588 = pkin(2) * t743;
t554 = t585 * t621 - 0.2e1 * t588;
t673 = pkin(2) * t742;
t687 = t766 * t618;
t693 = t615 * t618;
t555 = 0.2e1 * t673 + t687 - t693;
t527 = t554 * t598 - t597 * t555;
t528 = t597 * t554 + t555 * t598;
t572 = t624 * t621 - t588 + t621;
t573 = t673 + t687;
t705 = t608 * t611;
t455 = (t527 * t594 + t528 * t591) * t602 + (-t527 * t591 + t528 * t594) * t705 + (-t572 * t598 + t597 * t573) * t594 - (t597 * t572 + t573 * t598) * t591;
t741 = t455 * t542;
t589 = pkin(2) * t748;
t556 = t586 * t622 - 0.2e1 * t589;
t674 = pkin(2) * t747;
t686 = t766 * t619;
t692 = t616 * t619;
t557 = 0.2e1 * t674 + t686 - t692;
t529 = t556 * t598 - t597 * t557;
t530 = t597 * t556 + t557 * t598;
t574 = t624 * t622 - t589 + t622;
t575 = t674 + t686;
t701 = t609 * t612;
t456 = (t529 * t595 + t530 * t592) * t603 + (-t529 * t592 + t530 * t595) * t701 + (-t574 * t598 + t597 * t575) * t595 - (t597 * t574 + t575 * t598) * t592;
t740 = t456 * t544;
t590 = pkin(2) * t753;
t558 = t587 * t623 - 0.2e1 * t590;
t675 = pkin(2) * t752;
t685 = t766 * t620;
t691 = t617 * t620;
t559 = 0.2e1 * t675 + t685 - t691;
t531 = t558 * t598 - t597 * t559;
t532 = t597 * t558 + t559 * t598;
t576 = t624 * t623 - t590 + t623;
t577 = t675 + t685;
t697 = t610 * t613;
t457 = (t531 * t596 + t532 * t593) * t604 + (-t531 * t593 + t532 * t596) * t697 + (-t576 * t598 + t597 * t577) * t596 - (t597 * t576 + t577 * t598) * t593;
t739 = t457 * t546;
t500 = -t772 * t608 + (t560 * t594 - t591 * t563) * t676;
t738 = t500 * t542;
t501 = -t771 * t609 + (t561 * t595 - t592 * t564) * t678;
t737 = t501 * t544;
t502 = -t770 * t610 + (t562 * t596 - t593 * t565) * t680;
t736 = t502 * t546;
t670 = pkin(2) * t746;
t551 = t585 * t594 + 0.2e1 * t670;
t669 = pkin(2) * t745;
t627 = -t591 * t585 + 0.2e1 * t669;
t516 = -t551 * t705 + t624 * t591 + t602 * t627 + t591 - t669;
t543 = 0.1e1 / t548 ^ 2;
t735 = t516 * t543;
t671 = pkin(2) * t751;
t552 = t586 * t595 + 0.2e1 * t671;
t668 = pkin(2) * t750;
t630 = -t592 * t586 + 0.2e1 * t668;
t518 = -t552 * t701 + t624 * t592 + t603 * t630 + t592 - t668;
t545 = 0.1e1 / t549 ^ 2;
t734 = t518 * t545;
t672 = pkin(2) * t756;
t553 = t587 * t596 + 0.2e1 * t672;
t667 = pkin(2) * t755;
t633 = -t593 * t587 + 0.2e1 * t667;
t520 = -t553 * t697 + t624 * t593 + t604 * t633 + t593 - t667;
t547 = 0.1e1 / t550 ^ 2;
t733 = t520 * t547;
t732 = t533 * t542;
t731 = t533 * t543;
t730 = t534 * t543;
t729 = t535 * t544;
t728 = t535 * t545;
t727 = t536 * t545;
t726 = t537 * t546;
t725 = t537 * t547;
t724 = t538 * t547;
t720 = t542 * t560;
t719 = t542 * t563;
t718 = t543 * t608;
t717 = t543 * t611;
t716 = t544 * t561;
t715 = t544 * t564;
t714 = t545 * t609;
t713 = t545 * t612;
t712 = t546 * t562;
t711 = t546 * t565;
t710 = t547 * t610;
t709 = t547 * t613;
t708 = t608 * qJ(3,3);
t515 = t551 * t602 - t594 * t624 + t627 * t705 - t594 - t670;
t477 = t515 * t719 - t516 * t720;
t707 = t608 * t477;
t706 = t608 * t489;
t704 = t609 * qJ(3,2);
t517 = t552 * t603 - t595 * t624 + t630 * t701 - t595 - t671;
t478 = t517 * t715 - t518 * t716;
t703 = t609 * t478;
t702 = t609 * t490;
t700 = t610 * qJ(3,1);
t519 = t553 * t604 - t596 * t624 + t633 * t697 - t596 - t672;
t476 = t519 * t711 - t520 * t712;
t699 = t610 * t476;
t698 = t610 * t488;
t696 = t611 * t477;
t695 = t612 * t478;
t694 = t613 * t476;
t625 = t594 * t615 - t670;
t626 = -t615 * t591 - t669;
t521 = t626 * t611 + t608 * (-t594 - t625);
t524 = t625 * t611 - t608 * (t591 - t626);
t690 = t521 * t720 - t524 * t719;
t628 = t595 * t616 - t671;
t629 = -t616 * t592 - t668;
t522 = t629 * t612 + t609 * (-t595 - t628);
t525 = t628 * t612 - t609 * (t592 - t629);
t689 = t522 * t716 - t525 * t715;
t631 = t596 * t617 - t672;
t632 = -t617 * t593 - t667;
t523 = t632 * t613 + t610 * (-t596 - t631);
t526 = t631 * t613 - t610 * (t593 - t632);
t688 = t523 * t712 - t526 * t711;
t666 = t500 * t717;
t665 = t501 * t713;
t664 = t502 * t709;
t663 = t533 * t718;
t662 = t533 * t717;
t661 = t534 * t718;
t660 = t534 * t717;
t659 = t535 * t714;
t658 = t535 * t713;
t657 = t536 * t714;
t656 = t536 * t713;
t655 = t537 * t710;
t654 = t537 * t709;
t653 = t538 * t710;
t652 = t538 * t709;
t651 = t613 * t488 * t739 + t611 * t489 * t741 + t612 * t490 * t740;
t650 = t455 * t662 + t456 * t658 + t457 * t654;
t649 = t455 * t660 + t456 * t656 + t457 * t652;
t648 = t515 * t660 + t517 * t656 + t519 * t652;
t647 = t515 * t662 + t517 * t658 + t519 * t654;
t646 = t516 * t660 + t518 * t656 + t520 * t652;
t645 = t515 * t611 - t524;
t644 = t516 * t611 - t521;
t643 = t517 * t612 - t525;
t642 = t518 * t612 - t522;
t641 = t519 * t613 - t526;
t640 = t520 * t613 - t523;
t639 = t688 + t694;
t638 = t690 + t696;
t637 = t689 + t695;
t578 = t597 ^ 2 + t598 ^ 2;
t571 = t617 * t623 + t590 + t623;
t570 = -t620 + t675 - t691;
t569 = t616 * t622 + t589 + t622;
t568 = -t619 + t674 - t692;
t567 = t615 * t621 + t588 + t621;
t566 = -t618 + t673 - t693;
t487 = (t520 * t610 + t538 * t769) * t546;
t486 = (t519 * t610 + t537 * t769) * t546;
t485 = (t518 * t609 + t536 * t768) * t544;
t484 = (t517 * t609 + t535 * t768) * t544;
t483 = (t516 * t608 + t534 * t767) * t542;
t482 = (t515 * t608 + t533 * t767) * t542;
t481 = ((-t570 * t598 + t597 * t571) * t596 - (t597 * t570 + t571 * t598) * t593) * t610 + t770 * t754;
t480 = ((-t568 * t598 + t597 * t569) * t595 - (t597 * t568 + t569 * t598) * t592) * t609 + t771 * t749;
t479 = ((-t566 * t598 + t597 * t567) * t594 - (t597 * t566 + t567 * t598) * t591) * t608 + t772 * t744;
t475 = (t640 + 0.2e1 * t760) * t546;
t474 = (t641 + 0.2e1 * t761) * t546;
t473 = (t642 + 0.2e1 * t762) * t544;
t472 = (t643 + 0.2e1 * t763) * t544;
t471 = (t644 + 0.2e1 * t764) * t542;
t470 = (t645 + 0.2e1 * t765) * t542;
t469 = (-t640 - t760) * t546;
t468 = (-t641 - t761) * t546;
t467 = (-t642 - t762) * t544;
t466 = (-t643 - t763) * t544;
t465 = (-t644 - t764) * t542;
t464 = (-t645 - t765) * t542;
t463 = ((-t523 + t760) * t613 + t538 * t700 + t520) * t546;
t462 = ((-t526 + t761) * t613 + t537 * t700 + t519) * t546;
t461 = ((-t522 + t762) * t612 + t536 * t704 + t518) * t544;
t460 = ((-t525 + t763) * t612 + t535 * t704 + t517) * t544;
t459 = ((-t521 + t764) * t611 + t534 * t708 + t516) * t542;
t458 = ((-t524 + t765) * t611 + t533 * t708 + t515) * t542;
t448 = (pkin(2) * t640 + t520 * t700 + t538 * t682) * t546;
t447 = (pkin(2) * t641 + t519 * t700 + t537 * t682) * t546;
t446 = (pkin(2) * t642 + t518 * t704 + t536 * t683) * t544;
t445 = (pkin(2) * t643 + t517 * t704 + t535 * t683) * t544;
t444 = (pkin(2) * t644 + t516 * t708 + t534 * t684) * t542;
t443 = (pkin(2) * t645 + t515 * t708 + t533 * t684) * t542;
t1 = [t516 ^ 2 * t543 + t518 ^ 2 * t545 + t520 ^ 2 * t547, t534 ^ 2 * t543 + t536 ^ 2 * t545 + t538 ^ 2 * t547, 0.2e1 * t646, -0.2e1 * t516 * t661 - 0.2e1 * t518 * t657 - 0.2e1 * t520 * t653, (t475 * t546 - t523 * t547) * t538 + (t473 * t544 - t522 * t545) * t536 + (t471 * t542 - t521 * t543) * t534 + t646, (t487 * t546 + t520 * t710) * t538 + (t485 * t544 + t518 * t714) * t536 + (t483 * t542 + t516 * t718) * t534, (t448 * t538 + t463 * t520 + t469 * t523) * t546 + (t446 * t536 + t461 * t518 + t467 * t522) * t544 + (t444 * t534 + t459 * t516 + t465 * t521) * t542, 0, 0, 0, t578; t515 * t735 + t517 * t734 + t519 * t733, t533 * t730 + t535 * t727 + t537 * t724, t516 * t662 + t518 * t658 + t520 * t654 + t648, (-t519 * t538 - t520 * t537) * t710 + (-t517 * t536 - t518 * t535) * t714 + (-t515 * t534 - t516 * t533) * t718, t471 * t732 + t473 * t729 + t475 * t726 - t524 * t730 - t525 * t727 - t526 * t724 + t648, t483 * t732 + t485 * t729 + t487 * t726 + t515 * t661 + t517 * t657 + t519 * t653, (t448 * t537 + t463 * t519 + t469 * t526) * t546 + (t446 * t535 + t461 * t517 + t467 * t525) * t544 + (t444 * t533 + t459 * t515 + t465 * t524) * t542, 0, 0, 0, 0; t515 ^ 2 * t543 + t517 ^ 2 * t545 + t519 ^ 2 * t547, t533 ^ 2 * t543 + t535 ^ 2 * t545 + t537 ^ 2 * t547, 0.2e1 * t647, -0.2e1 * t515 * t663 - 0.2e1 * t517 * t659 - 0.2e1 * t519 * t655, (t474 * t546 - t526 * t547) * t537 + (t472 * t544 - t525 * t545) * t535 + (t470 * t542 - t524 * t543) * t533 + t647, (t486 * t546 + t519 * t710) * t537 + (t484 * t544 + t517 * t714) * t535 + (t482 * t542 + t515 * t718) * t533, (t447 * t537 + t462 * t519 + t468 * t526) * t546 + (t445 * t535 + t460 * t517 + t466 * t525) * t544 + (t443 * t533 + t458 * t515 + t464 * t524) * t542, 0, 0, 0, t578; t455 * t735 + t456 * t734 + t457 * t733, t500 * t730 + t501 * t727 + t502 * t724, t516 * t666 + t518 * t665 + t520 * t664 + t649, (-t457 * t538 - t502 * t520) * t710 + (-t456 * t536 - t501 * t518) * t714 + (-t455 * t534 - t500 * t516) * t718, t471 * t738 + t473 * t737 + t475 * t736 - t479 * t730 - t480 * t727 - t481 * t724 + t649, t455 * t661 + t456 * t657 + t457 * t653 + t483 * t738 + t485 * t737 + t487 * t736, (t448 * t502 + t457 * t463 + t469 * t481) * t546 + (t446 * t501 + t456 * t461 + t467 * t480) * t544 + (t444 * t500 + t455 * t459 + t465 * t479) * t542, 0, -t597, -t598, 0; t455 * t543 * t515 + t456 * t545 * t517 + t457 * t547 * t519, t500 * t731 + t501 * t728 + t502 * t725, t515 * t666 + t517 * t665 + t519 * t664 + t650, (-t457 * t537 - t502 * t519) * t710 + (-t456 * t535 - t501 * t517) * t714 + (-t455 * t533 - t500 * t515) * t718, t470 * t738 + t472 * t737 + t474 * t736 - t479 * t731 - t480 * t728 - t481 * t725 + t650, t455 * t663 + t456 * t659 + t457 * t655 + t482 * t738 + t484 * t737 + t486 * t736, (t447 * t502 + t457 * t462 + t468 * t481) * t546 + (t445 * t501 + t456 * t460 + t466 * t480) * t544 + (t443 * t500 + t455 * t458 + t464 * t479) * t542, 0, t598, -t597, 0; t476 * t739 + t477 * t741 + t478 * t740, t488 * t736 + t489 * t738 + t490 * t737, t694 * t736 + t695 * t737 + t696 * t738 + t651, (-t457 * t488 - t502 * t476) * t610 * t546 + (-t456 * t490 - t501 * t478) * t609 * t544 + (-t455 * t489 - t500 * t477) * t608 * t542, (t502 * (t639 + 0.2e1 * t759) - t481 * t488) * t546 + (t501 * (t637 + 0.2e1 * t757) - t480 * t490) * t544 + (t500 * (t638 + 0.2e1 * t758) - t479 * t489) * t542 + t651, (t457 * t698 + t502 * (t488 * t769 + t699)) * t546 + (t456 * t702 + t501 * (t490 * t768 + t703)) * t544 + (t455 * t706 + t500 * (t489 * t767 + t707)) * t542, ((t688 + t759) * t613 + qJ(3,1) * t698 + t476) * t739 + (pkin(2) * t639 + qJ(3,1) * t699 + t488 * t682) * t736 + t481 * t546 * (-t639 - t759) + ((t689 + t757) * t612 + qJ(3,2) * t702 + t478) * t740 + (pkin(2) * t637 + qJ(3,2) * t703 + t490 * t683) * t737 + t480 * t544 * (-t637 - t757) + ((t690 + t758) * t611 + qJ(3,3) * t706 + t477) * t741 + (pkin(2) * t638 + qJ(3,3) * t707 + t489 * t684) * t738 + t479 * t542 * (-t638 - t758), 1, 0, 0, 0;];
tau_reg  = t1;
