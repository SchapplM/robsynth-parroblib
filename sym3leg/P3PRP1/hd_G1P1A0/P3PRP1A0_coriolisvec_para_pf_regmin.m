% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRP1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x11]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:42
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRP1G1P1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRP1G1P1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRP1G1P1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRP1G1P1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3PRP1G1P1A0_coriolisvec_para_pf_regmin: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRP1G1P1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRP1G1P1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:42:14
% EndTime: 2019-05-03 14:42:24
% DurationCPUTime: 9.98s
% Computational Cost: add. (77976->493), mult. (157364->769), div. (2853->6), fcn. (50464->14), ass. (0->336)
t985 = (pkin(2) ^ 2);
t1163 = -t985 - 1;
t974 = xP(3);
t952 = sin(t974);
t953 = cos(t974);
t980 = koppelP(1,2);
t983 = koppelP(1,1);
t913 = t952 * t983 + t953 * t980;
t916 = -t952 * t980 + t953 * t983;
t964 = legFrame(1,3);
t946 = sin(t964);
t949 = cos(t964);
t1017 = t913 * t949 - t946 * t916;
t1153 = qJ(3,1) * t980;
t936 = pkin(2) * t983 - t1153;
t1152 = qJ(3,1) * t983;
t937 = pkin(2) * t980 + t1152;
t1014 = t952 * t936 + t937 * t953;
t973 = xDP(1);
t1154 = qJ(3,1) * t973;
t972 = xDP(2);
t1155 = qJ(3,1) * t972;
t889 = t936 * t953 - t952 * t937;
t950 = t972 * pkin(2);
t951 = pkin(2) * t973;
t971 = xDP(3);
t1020 = t946 * (t889 * t971 + t1154 + t950) - (t1014 * t971 + t1155 - t951) * t949;
t970 = cos(qJ(2,1));
t1156 = qJ(3,1) * t970;
t1081 = 0.2e1 * t1156;
t967 = sin(qJ(2,1));
t844 = t1020 * t967 + (t1017 * t971 - t972 * t946 - t973 * t949) * t1081;
t841 = t844 ^ 2;
t1100 = t967 * t970;
t1059 = pkin(2) * t1100;
t977 = qJ(3,1) ^ 2;
t1083 = t985 + t977;
t1166 = 0.2e1 * qJ(3,1);
t940 = -t977 - t1163;
t959 = t970 ^ 2;
t901 = t1059 * t1166 + t940 * t959 - t1083 - 0.1e1;
t896 = 0.1e1 / t901;
t897 = 0.1e1 / t901 ^ 2;
t898 = t896 * t897;
t1118 = t841 * t898;
t960 = t971 ^ 2;
t1106 = t896 * t960;
t1035 = t916 * t1106;
t1036 = t913 * t1106;
t1072 = pkin(2) * t1152;
t1092 = t977 * t980;
t921 = t1072 - t980 - t1092;
t943 = pkin(2) * t1153;
t922 = t977 * t983 + t943 + t983;
t996 = (-t921 * t953 + t952 * t922) * t949 - (t952 * t921 + t922 * t953) * t946;
t829 = ((-pkin(2) * t1155 - t977 * t973 - t973) * t949 - (-pkin(2) * t1154 + t977 * t972 + t972) * t946 + t996 * t971) * t967 - t1020 * t1156;
t1122 = t829 * t844;
t1044 = t898 * t1122;
t1112 = t844 * t897;
t1121 = t829 * t896;
t1113 = t844 * t896;
t833 = pkin(2) * t1113;
t815 = t833 - t1121;
t832 = t977 * t1113;
t1082 = -0.2e1 * t1156;
t1157 = qJ(3,1) * t949;
t885 = t946 * t1082 + t967 * (pkin(2) * t946 - t1157);
t1158 = qJ(3,1) * t946;
t886 = t949 * t1082 + t967 * (pkin(2) * t949 + t1158);
t802 = -t886 * t1035 - t885 * t1036 - (-(pkin(2) * t815 - t832) * t1100 + (-t1121 + (0.2e1 * t833 - t1121) * t959) * qJ(3,1)) * t1112 - (-t959 * qJ(3,1) - qJ(3,1) + t1059) * t1044;
t1128 = t802 * t896;
t1172 = -t967 * t1118 + t970 * t1128;
t979 = koppelP(2,2);
t982 = koppelP(2,1);
t912 = t952 * t982 + t953 * t979;
t915 = -t952 * t979 + t953 * t982;
t963 = legFrame(2,3);
t945 = sin(t963);
t948 = cos(t963);
t1018 = t912 * t948 - t945 * t915;
t1145 = qJ(3,2) * t979;
t934 = pkin(2) * t982 - t1145;
t1144 = qJ(3,2) * t982;
t935 = pkin(2) * t979 + t1144;
t1015 = t952 * t934 + t935 * t953;
t1146 = qJ(3,2) * t973;
t1147 = qJ(3,2) * t972;
t888 = t934 * t953 - t952 * t935;
t1021 = t945 * (t888 * t971 + t1146 + t950) - (t1015 * t971 + t1147 - t951) * t948;
t969 = cos(qJ(2,2));
t1148 = qJ(3,2) * t969;
t1079 = 0.2e1 * t1148;
t966 = sin(qJ(2,2));
t843 = t1021 * t966 + (t1018 * t971 - t972 * t945 - t973 * t948) * t1079;
t840 = t843 ^ 2;
t1096 = t969 * t966;
t1060 = pkin(2) * t1096;
t976 = qJ(3,2) ^ 2;
t1084 = t985 + t976;
t1165 = 0.2e1 * qJ(3,2);
t939 = -t976 - t1163;
t958 = t969 ^ 2;
t900 = t1060 * t1165 + t939 * t958 - t1084 - 0.1e1;
t893 = 0.1e1 / t900;
t894 = 0.1e1 / t900 ^ 2;
t895 = t893 * t894;
t1119 = t840 * t895;
t1107 = t893 * t960;
t1037 = t915 * t1107;
t1038 = t912 * t1107;
t1070 = pkin(2) * t1144;
t1093 = t976 * t979;
t919 = t1070 - t979 - t1093;
t942 = pkin(2) * t1145;
t920 = t976 * t982 + t942 + t982;
t997 = (-t919 * t953 + t952 * t920) * t948 - (t952 * t919 + t920 * t953) * t945;
t828 = ((-pkin(2) * t1147 - t976 * t973 - t973) * t948 - (-pkin(2) * t1146 + t976 * t972 + t972) * t945 + t997 * t971) * t966 - t1021 * t1148;
t1124 = t828 * t843;
t1045 = t895 * t1124;
t1114 = t843 * t894;
t1123 = t828 * t893;
t1115 = t843 * t893;
t838 = pkin(2) * t1115;
t817 = t838 - t1123;
t831 = t976 * t1115;
t1080 = -0.2e1 * t1148;
t1149 = qJ(3,2) * t948;
t883 = t945 * t1080 + t966 * (pkin(2) * t945 - t1149);
t1150 = qJ(3,2) * t945;
t884 = t948 * t1080 + t966 * (pkin(2) * t948 + t1150);
t801 = -t884 * t1037 - t883 * t1038 - (-(pkin(2) * t817 - t831) * t1096 + (-t1123 + (0.2e1 * t838 - t1123) * t958) * qJ(3,2)) * t1114 - (-t958 * qJ(3,2) - qJ(3,2) + t1060) * t1045;
t1130 = t801 * t893;
t1171 = -t966 * t1119 + t969 * t1130;
t978 = koppelP(3,2);
t981 = koppelP(3,1);
t911 = t952 * t981 + t953 * t978;
t914 = -t952 * t978 + t953 * t981;
t962 = legFrame(3,3);
t944 = sin(t962);
t947 = cos(t962);
t1019 = t911 * t947 - t944 * t914;
t1137 = qJ(3,3) * t978;
t932 = pkin(2) * t981 - t1137;
t1136 = qJ(3,3) * t981;
t933 = pkin(2) * t978 + t1136;
t1016 = t952 * t932 + t933 * t953;
t1138 = qJ(3,3) * t973;
t1139 = qJ(3,3) * t972;
t887 = t932 * t953 - t952 * t933;
t1022 = t944 * (t887 * t971 + t1138 + t950) - (t1016 * t971 + t1139 - t951) * t947;
t968 = cos(qJ(2,3));
t1140 = qJ(3,3) * t968;
t1077 = 0.2e1 * t1140;
t965 = sin(qJ(2,3));
t842 = t1022 * t965 + (t1019 * t971 - t972 * t944 - t973 * t947) * t1077;
t839 = t842 ^ 2;
t1098 = t968 * t965;
t1061 = pkin(2) * t1098;
t975 = qJ(3,3) ^ 2;
t1085 = t985 + t975;
t1164 = 0.2e1 * qJ(3,3);
t938 = -t975 - t1163;
t957 = t968 ^ 2;
t899 = t1061 * t1164 + t938 * t957 - t1085 - 0.1e1;
t890 = 0.1e1 / t899;
t891 = 0.1e1 / t899 ^ 2;
t892 = t890 * t891;
t1120 = t839 * t892;
t1108 = t890 * t960;
t1039 = t914 * t1108;
t1040 = t911 * t1108;
t1069 = pkin(2) * t1136;
t1094 = t975 * t978;
t917 = t1069 - t978 - t1094;
t941 = pkin(2) * t1137;
t918 = t975 * t981 + t941 + t981;
t998 = (-t917 * t953 + t952 * t918) * t947 - (t952 * t917 + t918 * t953) * t944;
t827 = ((-pkin(2) * t1139 - t975 * t973 - t973) * t947 - (-pkin(2) * t1138 + t975 * t972 + t972) * t944 + t998 * t971) * t965 - t1022 * t1140;
t1126 = t827 * t842;
t1046 = t892 * t1126;
t1116 = t842 * t891;
t1125 = t827 * t890;
t1117 = t842 * t890;
t837 = pkin(2) * t1117;
t816 = t837 - t1125;
t830 = t975 * t1117;
t1078 = -0.2e1 * t1140;
t1141 = qJ(3,3) * t947;
t881 = t944 * t1078 + t965 * (pkin(2) * t944 - t1141);
t1142 = qJ(3,3) * t944;
t882 = t947 * t1078 + t965 * (pkin(2) * t947 + t1142);
t800 = -t882 * t1039 - t881 * t1040 - (-(pkin(2) * t816 - t830) * t1098 + (-t1125 + (0.2e1 * t837 - t1125) * t957) * qJ(3,3)) * t1116 - (-t957 * qJ(3,3) - qJ(3,3) + t1061) * t1046;
t1132 = t800 * t890;
t1170 = -t965 * t1120 + t968 * t1132;
t1169 = t1014 * t949 - t889 * t946;
t1168 = t1015 * t948 - t888 * t945;
t1167 = t1016 * t947 - t887 * t944;
t1162 = t800 * pkin(2);
t1161 = t801 * pkin(2);
t1160 = t802 * pkin(2);
t1159 = qJ(3,1) * t898;
t1151 = qJ(3,2) * t895;
t1143 = qJ(3,3) * t892;
t1065 = pkin(2) * t1140;
t1091 = t985 * t1117 + t830;
t1064 = pkin(2) * t1141;
t1007 = -t944 * t938 + 0.2e1 * t1064;
t1066 = pkin(2) * t1142;
t902 = t938 * t947 + 0.2e1 * t1066;
t857 = t1007 * t1098 + t902 * t957 - t947 * t985 - t1066 - t947;
t858 = t1007 * t957 - t902 * t1098 + t985 * t944 - t1064 + t944;
t984 = pkin(2) * t985;
t788 = (-(-t1091 * t1140 + (t827 * t1065 + t965 * (t1163 * t827 + (t984 + (0.1e1 + t975) * pkin(2)) * t842)) * t890) * t842 - (t1163 * t965 + t1065) * t1117 * t827) * t891 + (-t857 * t911 - t858 * t914) * t1108;
t1135 = t788 * t890;
t1071 = pkin(2) * t1148;
t1090 = t985 * t1115 + t831;
t1063 = pkin(2) * t1149;
t1010 = -t945 * t939 + 0.2e1 * t1063;
t1067 = pkin(2) * t1150;
t903 = t939 * t948 + 0.2e1 * t1067;
t859 = t1010 * t1096 + t903 * t958 - t948 * t985 - t1067 - t948;
t860 = t1010 * t958 - t903 * t1096 + t985 * t945 - t1063 + t945;
t789 = (-(-t1090 * t1148 + (t828 * t1071 + t966 * (t1163 * t828 + (t984 + (0.1e1 + t976) * pkin(2)) * t843)) * t893) * t843 - (t1163 * t966 + t1071) * t1115 * t828) * t894 + (-t859 * t912 - t860 * t915) * t1107;
t1134 = t789 * t893;
t1073 = pkin(2) * t1156;
t1089 = t985 * t1113 + t832;
t1062 = pkin(2) * t1157;
t1013 = -t946 * t940 + 0.2e1 * t1062;
t1068 = pkin(2) * t1158;
t904 = t940 * t949 + 0.2e1 * t1068;
t861 = t1013 * t1100 + t904 * t959 - t949 * t985 - t1068 - t949;
t862 = t1013 * t959 - t904 * t1100 + t985 * t946 - t1062 + t946;
t790 = (-(-t1089 * t1156 + (t829 * t1073 + t967 * (t1163 * t829 + (t984 + (0.1e1 + t977) * pkin(2)) * t844)) * t896) * t844 - (t1163 * t967 + t1073) * t1113 * t829) * t897 + (-t861 * t913 - t862 * t916) * t1106;
t1133 = t790 * t896;
t1131 = t800 * t965;
t1129 = t801 * t966;
t1127 = t802 * t967;
t1105 = t952 * t960;
t1104 = t953 * t960;
t1103 = t965 * t788;
t1102 = t966 * t789;
t1101 = t967 * t790;
t1099 = t968 * t788;
t1097 = t969 * t789;
t1095 = t970 * t790;
t1088 = t1163 * t978;
t1087 = t1163 * t979;
t1086 = t1163 * t980;
t1076 = 0.2e1 * t1126;
t1075 = 0.2e1 * t1124;
t1074 = 0.2e1 * t1122;
t1058 = t890 * t1103;
t1057 = t890 * t1099;
t1056 = t893 * t1102;
t1055 = t893 * t1097;
t1054 = t896 * t1101;
t1053 = t896 * t1095;
t1049 = (0.2e1 * t827 * t965 + (-t965 * pkin(2) + t1140) * t842) * t890 * t1116;
t1048 = (0.2e1 * t828 * t966 + (-t966 * pkin(2) + t1148) * t843) * t893 * t1114;
t1047 = (0.2e1 * t829 * t967 + (-t967 * pkin(2) + t1156) * t844) * t896 * t1112;
t848 = t1019 * t1077 - t1167 * t965;
t1034 = t848 * t1076;
t849 = t1018 * t1079 - t1168 * t966;
t1033 = t849 * t1075;
t850 = t1017 * t1081 - t1169 * t967;
t1032 = t850 * t1074;
t1031 = t881 * t1076;
t1030 = t882 * t1076;
t1029 = t883 * t1075;
t1028 = t884 * t1075;
t1027 = t885 * t1074;
t1026 = t886 * t1074;
t1005 = t947 * t975 - t1066;
t1006 = -t975 * t944 - t1064;
t863 = t1006 * t968 + t965 * (-t1005 - t947);
t866 = t1005 * t968 - t965 * (-t1006 + t944);
t1025 = (t816 * t1098 + ((-pkin(2) * t827 - t842 * t957 + t842) * t890 + t1091) * qJ(3,3)) * t1116 - (qJ(3,3) * pkin(2) + t1098) * t1046 + t863 * t1039 + t866 * t1040;
t1008 = t948 * t976 - t1067;
t1009 = -t976 * t945 - t1063;
t864 = t1009 * t969 + t966 * (-t1008 - t948);
t867 = t1008 * t969 - t966 * (-t1009 + t945);
t1024 = (t817 * t1096 + ((-pkin(2) * t828 - t843 * t958 + t843) * t893 + t1090) * qJ(3,2)) * t1114 - (pkin(2) * qJ(3,2) + t1096) * t1045 + t864 * t1037 + t867 * t1038;
t1011 = t949 * t977 - t1068;
t1012 = -t977 * t946 - t1062;
t865 = t1012 * t970 + t967 * (-t1011 - t949);
t868 = t1011 * t970 - t967 * (-t1012 + t946);
t1023 = (t815 * t1100 + ((-pkin(2) * t829 - t844 * t959 + t844) * t896 + t1089) * qJ(3,1)) * t1112 - (pkin(2) * qJ(3,1) + t1100) * t1044 + t865 * t1035 + t868 * t1036;
t1004 = t1025 + t1099;
t1003 = t1024 + t1097;
t1002 = t1023 + t1095;
t1001 = -t968 * t1120 - t890 * t1131;
t1000 = -t969 * t1119 - t893 * t1129;
t999 = -t970 * t1118 - t896 * t1127;
t905 = t938 * t981 - 0.2e1 * t941;
t906 = 0.2e1 * t1069 - t1088 - t1094;
t875 = t905 * t953 - t952 * t906;
t876 = t952 * t905 + t906 * t953;
t923 = t985 * t981 - t941 + t981;
t924 = t1069 - t1088;
t824 = (t875 * t947 + t876 * t944) * t957 + (-t875 * t944 + t876 * t947) * t1098 + (-t923 * t953 + t952 * t924) * t947 - (t952 * t923 + t924 * t953) * t944;
t907 = t939 * t982 - 0.2e1 * t942;
t908 = 0.2e1 * t1070 - t1087 - t1093;
t877 = t907 * t953 - t952 * t908;
t878 = t952 * t907 + t908 * t953;
t925 = t985 * t982 - t942 + t982;
t926 = t1070 - t1087;
t825 = (t877 * t948 + t878 * t945) * t958 + (-t877 * t945 + t878 * t948) * t1096 + (-t925 * t953 + t952 * t926) * t948 - (t952 * t925 + t926 * t953) * t945;
t909 = t940 * t983 - 0.2e1 * t943;
t910 = 0.2e1 * t1072 - t1086 - t1092;
t879 = t909 * t953 - t952 * t910;
t880 = t952 * t909 + t910 * t953;
t927 = t985 * t983 - t943 + t983;
t928 = t1072 - t1086;
t826 = (t879 * t949 + t880 * t946) * t959 + (-t879 * t946 + t880 * t949) * t1100 + (-t927 * t953 + t952 * t928) * t949 - (t952 * t927 + t928 * t953) * t946;
t995 = t1170 * t824 + t1171 * t825 + t1172 * t826;
t994 = t1170 * t857 + t1171 * t859 + t1172 * t861;
t993 = t1170 * t858 + t1171 * t860 + t1172 * t862;
t847 = t1156 * t1169 + t996 * t967;
t846 = t1148 * t1168 + t997 * t966;
t845 = t1140 * t1167 + t998 * t965;
t787 = t802 * t1166 + t1101;
t786 = t801 * t1165 + t1102;
t785 = t800 * t1164 + t1103;
t784 = t1002 + 0.2e1 * t1160;
t783 = t1003 + 0.2e1 * t1161;
t782 = t1004 + 0.2e1 * t1162;
t781 = -t1002 - t1160;
t780 = -t1003 - t1161;
t779 = -t1004 - t1162;
t778 = (t1023 + t1160) * t970 + qJ(3,1) * t1127 + t790;
t777 = (t1024 + t1161) * t969 + qJ(3,2) * t1129 + t789;
t776 = (t1025 + t1162) * t968 + qJ(3,3) * t1131 + t788;
t775 = t1002 * pkin(2) + qJ(3,1) * t1101 + t1083 * t802;
t774 = t1003 * pkin(2) + qJ(3,2) * t1102 + t1084 * t801;
t773 = t1004 * pkin(2) + qJ(3,3) * t1103 + t1085 * t800;
t1 = [t862 * t1133 + t860 * t1134 + t858 * t1135, t886 * t1128 + t884 * t1130 + t882 * t1132, t886 * t1053 + t884 * t1055 + t882 * t1057 + t993, t1000 * t860 + t1001 * t858 - t1054 * t886 - t1056 * t884 - t1058 * t882 + t862 * t999, (t784 * t886 - t802 * t865) * t896 + (t783 * t884 - t801 * t864) * t893 + (t782 * t882 - t800 * t863) * t890 + t993, (t862 * t1127 + t886 * t787) * t896 + (t860 * t1129 + t884 * t786) * t893 + (t858 * t1131 + t882 * t785) * t890 + (t1026 + (t862 * t970 - t865) * t841) * t898 + (t1028 + (t860 * t969 - t864) * t840) * t895 + (t1030 + (t858 * t968 - t863) * t839) * t892, t858 * t1049 + t860 * t1048 + t862 * t1047 + (-t863 * t839 + t1030) * t1143 + (-t864 * t840 + t1028) * t1151 + (-t865 * t841 + t1026) * t1159 + (t886 * t775 + t862 * t778 + t865 * t781) * t896 + (t884 * t774 + t860 * t777 + t864 * t780) * t893 + (t882 * t773 + t858 * t776 + t863 * t779) * t890, 0, -t1104, t1105, 0; t861 * t1133 + t859 * t1134 + t857 * t1135, t885 * t1128 + t883 * t1130 + t881 * t1132, t885 * t1053 + t883 * t1055 + t881 * t1057 + t994, t1000 * t859 + t1001 * t857 - t1054 * t885 - t1056 * t883 - t1058 * t881 + t861 * t999, (t784 * t885 - t802 * t868) * t896 + (t783 * t883 - t801 * t867) * t893 + (t782 * t881 - t800 * t866) * t890 + t994, (t861 * t1127 + t885 * t787) * t896 + (t859 * t1129 + t883 * t786) * t893 + (t857 * t1131 + t881 * t785) * t890 + (t1027 + (t861 * t970 - t868) * t841) * t898 + (t1029 + (t859 * t969 - t867) * t840) * t895 + (t1031 + (t857 * t968 - t866) * t839) * t892, t857 * t1049 + t859 * t1048 + t861 * t1047 + (-t866 * t839 + t1031) * t1143 + (-t867 * t840 + t1029) * t1151 + (-t868 * t841 + t1027) * t1159 + (t885 * t775 + t861 * t778 + t868 * t781) * t896 + (t883 * t774 + t859 * t777 + t867 * t780) * t893 + (t881 * t773 + t857 * t776 + t866 * t779) * t890, 0, -t1105, -t1104, 0; t826 * t1133 + t825 * t1134 + t824 * t1135, t850 * t1128 + t849 * t1130 + t848 * t1132, t850 * t1053 + t1055 * t849 + t1057 * t848 + t995, t1000 * t825 + t1001 * t824 - t1054 * t850 - t1056 * t849 - t1058 * t848 + t826 * t999, (t784 * t850 - t802 * t847) * t896 + (t783 * t849 - t801 * t846) * t893 + (t782 * t848 - t800 * t845) * t890 + t995, (t826 * t1127 + t850 * t787) * t896 + (t825 * t1129 + t849 * t786) * t893 + (t824 * t1131 + t848 * t785) * t890 + (t1032 + (t826 * t970 - t847) * t841) * t898 + (t1033 + (t825 * t969 - t846) * t840) * t895 + (t1034 + (t824 * t968 - t845) * t839) * t892, t824 * t1049 + t825 * t1048 + t826 * t1047 + (-t845 * t839 + t1034) * t1143 + (-t846 * t840 + t1033) * t1151 + (-t847 * t841 + t1032) * t1159 + (t850 * t775 + t826 * t778 + t847 * t781) * t896 + (t849 * t774 + t825 * t777 + t846 * t780) * t893 + (t848 * t773 + t824 * t776 + t845 * t779) * t890, 0, 0, 0, 0;];
tau_reg  = t1;
