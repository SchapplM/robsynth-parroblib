% Calculate minimal parameter regressor of inverse dynamics forces for
% P3PRP1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [11x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRP1G1P1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:42
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3PRP1G1P1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,1),zeros(11,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [11 1]), ...
  'P3PRP1G1P1A0_invdyn_para_pf_mdp: MDP has to be [11x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:42:25
% EndTime: 2019-05-03 14:42:35
% DurationCPUTime: 10.44s
% Computational Cost: add. (78546->491), mult. (156586->715), div. (2844->6), fcn. (50847->14), ass. (0->329)
t1638 = (pkin(2) ^ 2);
t1794 = -t1638 - 1;
t1808 = MDP(3) + MDP(5);
t1628 = (qJ(3,3) ^ 2);
t1585 = -t1628 - t1794;
t1620 = cos(qJ(2,3));
t1606 = t1620 ^ 2;
t1617 = sin(qJ(2,3));
t1735 = t1617 * t1620;
t1702 = pkin(2) * t1735;
t1530 = 0.2e1 * qJ(3,3) * t1702 + t1585 * t1606 - t1628 + t1794;
t1521 = 0.1e1 / t1530;
t1611 = legFrame(3,3);
t1594 = cos(t1611);
t1591 = sin(t1611);
t1772 = qJ(3,3) * t1591;
t1707 = pkin(2) * t1772;
t1664 = t1594 * t1628 - t1707;
t1771 = qJ(3,3) * t1594;
t1705 = pkin(2) * t1771;
t1665 = -t1591 * t1628 - t1705;
t1488 = t1665 * t1620 + t1617 * (-t1594 - t1664);
t1491 = t1664 * t1620 - t1617 * (t1591 - t1665);
t1627 = xP(3);
t1601 = sin(t1627);
t1602 = cos(t1627);
t1631 = koppelP(3,2);
t1634 = koppelP(3,1);
t1546 = t1601 * t1634 + t1602 * t1631;
t1549 = -t1601 * t1631 + t1602 * t1634;
t1623 = xDP(3);
t1609 = t1623 ^ 2;
t1614 = xDDP(3);
t1615 = xDDP(2);
t1506 = -t1546 * t1609 + t1549 * t1614 + t1615;
t1616 = xDDP(1);
t1509 = -t1546 * t1614 - t1549 * t1609 + t1616;
t1684 = t1488 * t1509 + t1491 * t1506;
t1807 = t1521 * t1684;
t1629 = (qJ(3,2) ^ 2);
t1586 = -t1629 - t1794;
t1621 = cos(qJ(2,2));
t1607 = t1621 ^ 2;
t1618 = sin(qJ(2,2));
t1734 = t1618 * t1621;
t1701 = pkin(2) * t1734;
t1531 = 0.2e1 * qJ(3,2) * t1701 + t1586 * t1607 - t1629 + t1794;
t1524 = 0.1e1 / t1531;
t1612 = legFrame(2,3);
t1595 = cos(t1612);
t1592 = sin(t1612);
t1780 = qJ(3,2) * t1592;
t1708 = pkin(2) * t1780;
t1667 = t1595 * t1629 - t1708;
t1779 = qJ(3,2) * t1595;
t1704 = pkin(2) * t1779;
t1668 = -t1592 * t1629 - t1704;
t1489 = t1668 * t1621 + t1618 * (-t1595 - t1667);
t1492 = t1667 * t1621 - t1618 * (t1592 - t1668);
t1632 = koppelP(2,2);
t1635 = koppelP(2,1);
t1547 = t1601 * t1635 + t1602 * t1632;
t1550 = -t1601 * t1632 + t1602 * t1635;
t1507 = -t1547 * t1609 + t1550 * t1614 + t1615;
t1510 = -t1547 * t1614 - t1550 * t1609 + t1616;
t1683 = t1489 * t1510 + t1492 * t1507;
t1806 = t1524 * t1683;
t1630 = (qJ(3,1) ^ 2);
t1587 = -t1630 - t1794;
t1622 = cos(qJ(2,1));
t1608 = t1622 ^ 2;
t1619 = sin(qJ(2,1));
t1733 = t1619 * t1622;
t1700 = pkin(2) * t1733;
t1532 = 0.2e1 * qJ(3,1) * t1700 + t1587 * t1608 - t1630 + t1794;
t1527 = 0.1e1 / t1532;
t1613 = legFrame(1,3);
t1596 = cos(t1613);
t1593 = sin(t1613);
t1788 = qJ(3,1) * t1593;
t1709 = pkin(2) * t1788;
t1670 = t1596 * t1630 - t1709;
t1787 = qJ(3,1) * t1596;
t1703 = pkin(2) * t1787;
t1671 = -t1593 * t1630 - t1703;
t1490 = t1671 * t1622 + t1619 * (-t1596 - t1670);
t1493 = t1670 * t1622 - t1619 * (t1593 - t1671);
t1633 = koppelP(1,2);
t1636 = koppelP(1,1);
t1548 = t1601 * t1636 + t1602 * t1633;
t1551 = -t1601 * t1633 + t1602 * t1636;
t1508 = -t1548 * t1609 + t1551 * t1614 + t1615;
t1511 = -t1548 * t1614 - t1551 * t1609 + t1616;
t1682 = t1490 * t1511 + t1493 * t1508;
t1805 = t1527 * t1682;
t1535 = t1585 * t1594 + 0.2e1 * t1707;
t1666 = -t1585 * t1591 + 0.2e1 * t1705;
t1482 = t1535 * t1606 - t1594 * t1638 + t1666 * t1735 - t1594 - t1707;
t1483 = -t1535 * t1735 + t1638 * t1591 + t1666 * t1606 + t1591 - t1705;
t1687 = t1482 * t1506 + t1483 * t1509;
t1624 = xDP(2);
t1625 = xDP(1);
t1766 = qJ(3,3) * t1634;
t1710 = pkin(2) * t1766;
t1732 = t1628 * t1631;
t1555 = -t1631 + t1710 - t1732;
t1767 = qJ(3,3) * t1631;
t1588 = pkin(2) * t1767;
t1556 = t1628 * t1634 + t1588 + t1634;
t1651 = (-t1555 * t1602 + t1556 * t1601) * t1594 - (t1555 * t1601 + t1556 * t1602) * t1591;
t1570 = pkin(2) * t1634 - t1767;
t1571 = pkin(2) * t1631 + t1766;
t1518 = t1570 * t1602 - t1571 * t1601;
t1599 = t1624 * pkin(2);
t1600 = pkin(2) * t1625;
t1675 = t1570 * t1601 + t1571 * t1602;
t1768 = qJ(3,3) * t1625;
t1769 = qJ(3,3) * t1624;
t1681 = (t1518 * t1623 + t1599 + t1768) * t1591 - (t1623 * t1675 - t1600 + t1769) * t1594;
t1770 = qJ(3,3) * t1620;
t1458 = ((-pkin(2) * t1769 - t1625 * t1628 - t1625) * t1594 - (-pkin(2) * t1768 + t1624 * t1628 + t1624) * t1591 + t1651 * t1623) * t1617 - t1681 * t1770;
t1678 = t1546 * t1594 - t1549 * t1591;
t1715 = 0.2e1 * t1770;
t1473 = t1681 * t1617 + (-t1624 * t1591 - t1625 * t1594 + t1623 * t1678) * t1715;
t1637 = pkin(2) * t1638;
t1522 = 0.1e1 / t1530 ^ 2;
t1749 = t1473 * t1522;
t1696 = t1458 * t1749;
t1706 = pkin(2) * t1770;
t1750 = t1473 * t1521;
t1461 = t1628 * t1750;
t1726 = t1638 * t1750 + t1461;
t1729 = -(-t1726 * t1770 + (t1458 * t1706 + t1617 * (t1794 * t1458 + (t1637 + (1 + t1628) * pkin(2)) * t1473)) * t1521) * t1749 - (t1617 * t1794 + t1706) * t1521 * t1696;
t1410 = t1687 * t1521 + t1729;
t1799 = t1591 * g(1) - t1594 * g(2);
t1407 = t1410 + t1799;
t1552 = g(1) * t1594 + g(2) * t1591;
t1395 = t1407 * t1620 + t1552 * t1617;
t1536 = t1586 * t1595 + 0.2e1 * t1708;
t1669 = -t1586 * t1592 + 0.2e1 * t1704;
t1484 = t1536 * t1607 - t1595 * t1638 + t1669 * t1734 - t1595 - t1708;
t1485 = -t1536 * t1734 + t1638 * t1592 + t1669 * t1607 + t1592 - t1704;
t1686 = t1484 * t1507 + t1485 * t1510;
t1774 = qJ(3,2) * t1635;
t1711 = pkin(2) * t1774;
t1731 = t1629 * t1632;
t1557 = -t1632 + t1711 - t1731;
t1775 = qJ(3,2) * t1632;
t1589 = pkin(2) * t1775;
t1558 = t1629 * t1635 + t1589 + t1635;
t1650 = (-t1557 * t1602 + t1558 * t1601) * t1595 - (t1557 * t1601 + t1558 * t1602) * t1592;
t1572 = pkin(2) * t1635 - t1775;
t1573 = pkin(2) * t1632 + t1774;
t1519 = t1572 * t1602 - t1573 * t1601;
t1674 = t1572 * t1601 + t1573 * t1602;
t1776 = qJ(3,2) * t1625;
t1777 = qJ(3,2) * t1624;
t1680 = (t1519 * t1623 + t1599 + t1776) * t1592 - (t1623 * t1674 - t1600 + t1777) * t1595;
t1778 = qJ(3,2) * t1621;
t1459 = ((-pkin(2) * t1777 - t1625 * t1629 - t1625) * t1595 - (-pkin(2) * t1776 + t1624 * t1629 + t1624) * t1592 + t1650 * t1623) * t1618 - t1680 * t1778;
t1677 = t1547 * t1595 - t1550 * t1592;
t1717 = 0.2e1 * t1778;
t1474 = t1680 * t1618 + (-t1624 * t1592 - t1625 * t1595 + t1623 * t1677) * t1717;
t1525 = 0.1e1 / t1531 ^ 2;
t1747 = t1474 * t1525;
t1695 = t1459 * t1747;
t1712 = pkin(2) * t1778;
t1748 = t1474 * t1524;
t1462 = t1629 * t1748;
t1725 = t1638 * t1748 + t1462;
t1728 = -(-t1725 * t1778 + (t1459 * t1712 + t1618 * (t1794 * t1459 + (t1637 + (1 + t1629) * pkin(2)) * t1474)) * t1524) * t1747 - (t1618 * t1794 + t1712) * t1524 * t1695;
t1411 = t1686 * t1524 + t1728;
t1800 = t1592 * g(1) - t1595 * g(2);
t1408 = t1411 + t1800;
t1553 = g(1) * t1595 + g(2) * t1592;
t1396 = t1408 * t1621 + t1553 * t1618;
t1537 = t1587 * t1596 + 0.2e1 * t1709;
t1672 = -t1587 * t1593 + 0.2e1 * t1703;
t1486 = t1537 * t1608 - t1596 * t1638 + t1672 * t1733 - t1596 - t1709;
t1487 = -t1537 * t1733 + t1638 * t1593 + t1672 * t1608 + t1593 - t1703;
t1685 = t1486 * t1508 + t1487 * t1511;
t1782 = qJ(3,1) * t1636;
t1713 = pkin(2) * t1782;
t1730 = t1630 * t1633;
t1559 = -t1633 + t1713 - t1730;
t1783 = qJ(3,1) * t1633;
t1590 = pkin(2) * t1783;
t1560 = t1630 * t1636 + t1590 + t1636;
t1649 = (-t1559 * t1602 + t1560 * t1601) * t1596 - (t1559 * t1601 + t1560 * t1602) * t1593;
t1574 = pkin(2) * t1636 - t1783;
t1575 = pkin(2) * t1633 + t1782;
t1520 = t1574 * t1602 - t1575 * t1601;
t1673 = t1574 * t1601 + t1575 * t1602;
t1784 = qJ(3,1) * t1625;
t1785 = qJ(3,1) * t1624;
t1679 = (t1520 * t1623 + t1599 + t1784) * t1593 - (t1623 * t1673 - t1600 + t1785) * t1596;
t1786 = qJ(3,1) * t1622;
t1460 = ((-pkin(2) * t1785 - t1625 * t1630 - t1625) * t1596 - (-pkin(2) * t1784 + t1624 * t1630 + t1624) * t1593 + t1649 * t1623) * t1619 - t1679 * t1786;
t1676 = t1548 * t1596 - t1551 * t1593;
t1719 = 0.2e1 * t1786;
t1475 = t1679 * t1619 + (-t1624 * t1593 - t1625 * t1596 + t1623 * t1676) * t1719;
t1528 = 0.1e1 / t1532 ^ 2;
t1745 = t1475 * t1528;
t1694 = t1460 * t1745;
t1714 = pkin(2) * t1786;
t1746 = t1475 * t1527;
t1463 = t1630 * t1746;
t1724 = t1638 * t1746 + t1463;
t1727 = -(-t1724 * t1786 + (t1460 * t1714 + t1619 * (t1794 * t1460 + (t1637 + (1 + t1630) * pkin(2)) * t1475)) * t1527) * t1745 - (t1619 * t1794 + t1714) * t1527 * t1694;
t1412 = t1685 * t1527 + t1727;
t1801 = t1593 * g(1) - t1596 * g(2);
t1409 = t1412 + t1801;
t1554 = g(1) * t1596 + g(2) * t1593;
t1397 = t1409 * t1622 + t1554 * t1619;
t1804 = -t1409 * t1619 + t1554 * t1622;
t1803 = -t1408 * t1618 + t1553 * t1621;
t1802 = -t1407 * t1617 + t1552 * t1620;
t1798 = -t1518 * t1591 + t1594 * t1675;
t1797 = -t1519 * t1592 + t1595 * t1674;
t1796 = -t1520 * t1593 + t1596 * t1673;
t1795 = pkin(2) * g(2);
t1790 = -MDP(4) + MDP(6);
t1464 = pkin(2) * t1746;
t1757 = t1460 * t1527;
t1446 = t1464 - t1757;
t1720 = -0.2e1 * t1786;
t1516 = t1593 * t1720 + t1619 * (pkin(2) * t1593 - t1787);
t1517 = t1596 * t1720 + t1619 * (pkin(2) * t1596 + t1788);
t1529 = t1527 * t1528;
t1697 = t1460 * t1475 * t1529;
t1430 = -(-(pkin(2) * t1446 - t1463) * t1733 + (-t1757 + (0.2e1 * t1464 - t1757) * t1608) * qJ(3,1)) * t1745 - (-qJ(3,1) * t1608 - qJ(3,1) + t1700) * t1697 + (t1508 * t1516 + t1511 * t1517) * t1527;
t1789 = qJ(3,1) * t1430;
t1469 = pkin(2) * t1748;
t1758 = t1459 * t1524;
t1448 = t1469 - t1758;
t1718 = -0.2e1 * t1778;
t1514 = t1592 * t1718 + t1618 * (pkin(2) * t1592 - t1779);
t1515 = t1595 * t1718 + t1618 * (pkin(2) * t1595 + t1780);
t1526 = t1524 * t1525;
t1698 = t1459 * t1474 * t1526;
t1429 = -(-(pkin(2) * t1448 - t1462) * t1734 + (-t1758 + (0.2e1 * t1469 - t1758) * t1607) * qJ(3,2)) * t1747 - (-qJ(3,2) * t1607 - qJ(3,2) + t1701) * t1698 + (t1507 * t1514 + t1510 * t1515) * t1524;
t1781 = qJ(3,2) * t1429;
t1468 = pkin(2) * t1750;
t1759 = t1458 * t1521;
t1447 = t1468 - t1759;
t1716 = -0.2e1 * t1770;
t1512 = t1591 * t1716 + t1617 * (pkin(2) * t1591 - t1771);
t1513 = t1594 * t1716 + t1617 * (pkin(2) * t1594 + t1772);
t1523 = t1521 * t1522;
t1699 = t1458 * t1473 * t1523;
t1428 = -(-(pkin(2) * t1447 - t1461) * t1735 + (-t1759 + (0.2e1 * t1468 - t1759) * t1606) * qJ(3,3)) * t1749 - (-qJ(3,3) * t1606 - qJ(3,3) + t1702) * t1699 + (t1506 * t1512 + t1509 * t1513) * t1521;
t1773 = qJ(3,3) * t1428;
t1470 = t1473 ^ 2;
t1756 = t1470 * t1522;
t1762 = (t1428 * t1620 - t1617 * t1756) * t1521;
t1471 = t1474 ^ 2;
t1754 = t1471 * t1525;
t1761 = (t1429 * t1621 - t1618 * t1754) * t1524;
t1472 = t1475 ^ 2;
t1752 = t1472 * t1528;
t1760 = (t1430 * t1622 - t1619 * t1752) * t1527;
t1755 = t1470 * t1523;
t1753 = t1471 * t1526;
t1751 = t1472 * t1529;
t1723 = t1794 * t1631;
t1722 = t1794 * t1632;
t1721 = t1794 * t1633;
t1449 = 0.2e1 * t1696;
t1450 = 0.2e1 * t1695;
t1451 = 0.2e1 * t1694;
t1425 = t1428 * pkin(2);
t1663 = -(qJ(3,3) * pkin(2) + t1735) * t1699 + (t1447 * t1735 + ((-pkin(2) * t1458 - t1473 * t1606 + t1473) * t1521 + t1726) * qJ(3,3)) * t1749;
t1655 = -qJ(3,3) * t1756 - t1425 - t1663;
t1690 = -t1428 * MDP(5) + (-t1395 + t1655 + t1807) * MDP(7);
t1426 = t1429 * pkin(2);
t1662 = -(pkin(2) * qJ(3,2) + t1734) * t1698 + (t1448 * t1734 + ((-pkin(2) * t1459 - t1474 * t1607 + t1474) * t1524 + t1725) * qJ(3,2)) * t1747;
t1656 = -qJ(3,2) * t1754 - t1426 - t1662;
t1689 = -t1429 * MDP(5) + (-t1396 + t1656 + t1806) * MDP(7);
t1427 = t1430 * pkin(2);
t1661 = -(pkin(2) * qJ(3,1) + t1733) * t1697 + (t1446 * t1733 + ((-pkin(2) * t1460 - t1475 * t1608 + t1475) * t1527 + t1724) * qJ(3,1)) * t1745;
t1657 = -qJ(3,1) * t1752 - t1427 - t1661;
t1688 = -t1430 * MDP(5) + (-t1397 + t1657 + t1805) * MDP(7);
t1660 = t1407 * MDP(1) + (-t1655 * t1620 + (-pkin(2) * t1756 + t1449 + t1773) * t1617 + (-t1620 * t1684 + t1687) * t1521 + t1729 + t1799) * MDP(7) + t1790 * (t1428 * t1617 + t1620 * t1756);
t1659 = t1408 * MDP(1) + (-t1656 * t1621 + (-pkin(2) * t1754 + t1450 + t1781) * t1618 + (-t1621 * t1683 + t1686) * t1524 + t1728 + t1800) * MDP(7) + t1790 * (t1429 * t1618 + t1621 * t1754);
t1658 = t1409 * MDP(1) + (-t1657 * t1622 + (-pkin(2) * t1752 + t1451 + t1789) * t1619 + (-t1622 * t1682 + t1685) * t1527 + t1727 + t1801) * MDP(7) + t1790 * (t1430 * t1619 + t1622 * t1752);
t1654 = t1663 - t1807;
t1653 = t1662 - t1806;
t1652 = t1661 - t1805;
t1626 = pkin(2) * g(1);
t1576 = -g(2) * qJ(3,3) + t1626;
t1577 = g(1) * qJ(3,3) + t1795;
t1648 = t1428 * MDP(2) + t1395 * MDP(3) + t1802 * MDP(4) + (t1395 + 0.2e1 * t1425 + t1654) * MDP(5) + (t1449 + 0.2e1 * t1773 - t1802) * MDP(6) + ((pkin(2) * t1410 + t1576 * t1591 - t1577 * t1594) * t1620 + (qJ(3,3) * t1410 + t1576 * t1594 + t1577 * t1591) * t1617 + t1628 * t1428 + qJ(3,3) * t1449 + pkin(2) * (t1425 + t1654)) * MDP(7);
t1578 = -g(2) * qJ(3,2) + t1626;
t1579 = g(1) * qJ(3,2) + t1795;
t1647 = t1429 * MDP(2) + t1396 * MDP(3) + t1803 * MDP(4) + (t1396 + 0.2e1 * t1426 + t1653) * MDP(5) + (t1450 + 0.2e1 * t1781 - t1803) * MDP(6) + ((pkin(2) * t1411 + t1578 * t1592 - t1579 * t1595) * t1621 + (qJ(3,2) * t1411 + t1578 * t1595 + t1579 * t1592) * t1618 + t1629 * t1429 + qJ(3,2) * t1450 + pkin(2) * (t1426 + t1653)) * MDP(7);
t1580 = -g(2) * qJ(3,1) + t1626;
t1581 = g(1) * qJ(3,1) + t1795;
t1646 = t1430 * MDP(2) + t1397 * MDP(3) + t1804 * MDP(4) + (t1397 + 0.2e1 * t1427 + t1652) * MDP(5) + (t1451 + 0.2e1 * t1789 - t1804) * MDP(6) + ((pkin(2) * t1412 + t1580 * t1593 - t1581 * t1596) * t1622 + (qJ(3,1) * t1412 + t1580 * t1596 + t1581 * t1593) * t1619 + t1630 * t1430 + qJ(3,1) * t1451 + pkin(2) * (t1427 + t1652)) * MDP(7);
t1598 = t1616 - g(1);
t1597 = t1615 - g(2);
t1566 = t1713 - t1721;
t1565 = t1636 * t1638 - t1590 + t1636;
t1564 = t1711 - t1722;
t1563 = t1635 * t1638 - t1589 + t1635;
t1562 = t1710 - t1723;
t1561 = t1634 * t1638 - t1588 + t1634;
t1545 = 0.2e1 * t1713 - t1721 - t1730;
t1544 = t1587 * t1636 - 0.2e1 * t1590;
t1543 = 0.2e1 * t1711 - t1722 - t1731;
t1542 = t1586 * t1635 - 0.2e1 * t1589;
t1541 = 0.2e1 * t1710 - t1723 - t1732;
t1540 = t1585 * t1634 - 0.2e1 * t1588;
t1539 = -t1601 * t1614 - t1602 * t1609;
t1538 = -t1601 * t1609 + t1602 * t1614;
t1534 = t1597 * t1601 + t1598 * t1602;
t1533 = t1597 * t1602 - t1598 * t1601;
t1505 = t1544 * t1601 + t1545 * t1602;
t1504 = t1544 * t1602 - t1545 * t1601;
t1503 = t1542 * t1601 + t1543 * t1602;
t1502 = t1542 * t1602 - t1543 * t1601;
t1501 = t1540 * t1601 + t1541 * t1602;
t1500 = t1540 * t1602 - t1541 * t1601;
t1478 = t1649 * t1619 + t1786 * t1796;
t1477 = t1650 * t1618 + t1778 * t1797;
t1476 = t1651 * t1617 + t1770 * t1798;
t1457 = (t1504 * t1596 + t1505 * t1593) * t1608 + (-t1504 * t1593 + t1505 * t1596) * t1733 + (-t1565 * t1602 + t1566 * t1601) * t1596 - (t1565 * t1601 + t1566 * t1602) * t1593;
t1456 = (t1502 * t1595 + t1503 * t1592) * t1607 + (-t1502 * t1592 + t1503 * t1595) * t1734 + (-t1563 * t1602 + t1564 * t1601) * t1595 - (t1563 * t1601 + t1564 * t1602) * t1592;
t1455 = (t1500 * t1594 + t1501 * t1591) * t1606 + (-t1500 * t1591 + t1501 * t1594) * t1735 + (-t1561 * t1602 + t1562 * t1601) * t1594 - (t1561 * t1601 + t1562 * t1602) * t1591;
t1 = [(-t1488 * t1755 - t1489 * t1753 - t1490 * t1751) * MDP(6) + t1539 * MDP(9) - t1538 * MDP(10) + (-t1533 * t1601 + t1534 * t1602) * MDP(11) + (t1487 * t1658 + t1490 * t1688 + t1517 * t1646) * t1527 + (t1485 * t1659 + t1489 * t1689 + t1515 * t1647) * t1524 + (t1483 * t1660 + t1488 * t1690 + t1513 * t1648) * t1521 + t1808 * (t1483 * t1762 + t1485 * t1761 + t1487 * t1760); (-t1491 * t1755 - t1492 * t1753 - t1493 * t1751) * MDP(6) + t1538 * MDP(9) + t1539 * MDP(10) + (t1533 * t1602 + t1534 * t1601) * MDP(11) + (t1486 * t1658 + t1493 * t1688 + t1516 * t1646) * t1527 + (t1484 * t1659 + t1492 * t1689 + t1514 * t1647) * t1524 + (t1482 * t1660 + t1491 * t1690 + t1512 * t1648) * t1521 + t1808 * (t1482 * t1762 + t1484 * t1761 + t1486 * t1760); (-t1476 * t1755 - t1477 * t1753 - t1478 * t1751) * MDP(6) + t1614 * MDP(8) + t1533 * MDP(9) - t1534 * MDP(10) + (t1688 * t1478 + t1658 * t1457 + t1646 * (-t1619 * t1796 + t1676 * t1719)) * t1527 + (t1689 * t1477 + t1659 * t1456 + t1647 * (-t1618 * t1797 + t1677 * t1717)) * t1524 + (t1690 * t1476 + t1660 * t1455 + t1648 * (-t1617 * t1798 + t1678 * t1715)) * t1521 + t1808 * (t1455 * t1762 + t1456 * t1761 + t1457 * t1760);];
tauX  = t1;
