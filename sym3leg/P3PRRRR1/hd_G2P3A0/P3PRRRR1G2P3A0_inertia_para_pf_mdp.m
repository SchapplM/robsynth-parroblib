% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR1G2P3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR1G2P3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:16
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3PRRRR1G2P3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR1G2P3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR1G2P3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3PRRRR1G2P3A0_inertia_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR1G2P3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR1G2P3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR1G2P3A0_inertia_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:16:40
% EndTime: 2020-03-09 21:16:43
% DurationCPUTime: 3.10s
% Computational Cost: add. (612->264), mult. (2684->551), div. (1215->17), fcn. (2760->18), ass. (0->247)
t1352 = sin(qJ(3,3));
t1318 = t1352 ^ 2;
t1358 = cos(qJ(3,3));
t1331 = 0.1e1 / t1358;
t1372 = t1358 ^ 2;
t1332 = 0.1e1 / t1372;
t1333 = t1331 * t1332;
t1353 = sin(qJ(2,3));
t1320 = 0.1e1 / t1353 ^ 2;
t1359 = cos(qJ(2,3));
t1336 = t1359 ^ 2;
t1515 = t1336 * t1320;
t1480 = t1333 * t1515;
t1399 = t1318 * t1480 - t1331;
t1518 = t1332 * t1352;
t1565 = (0.1e1 + t1515) * t1518;
t1579 = MDP(10) * t1565 - t1399 * MDP(11);
t1354 = sin(qJ(3,2));
t1323 = t1354 ^ 2;
t1360 = cos(qJ(3,2));
t1337 = 0.1e1 / t1360;
t1376 = t1360 ^ 2;
t1338 = 0.1e1 / t1376;
t1339 = t1337 * t1338;
t1355 = sin(qJ(2,2));
t1325 = 0.1e1 / t1355 ^ 2;
t1361 = cos(qJ(2,2));
t1342 = t1361 ^ 2;
t1508 = t1342 * t1325;
t1474 = t1339 * t1508;
t1396 = t1323 * t1474 - t1337;
t1511 = t1338 * t1354;
t1566 = (0.1e1 + t1508) * t1511;
t1578 = MDP(10) * t1566 - t1396 * MDP(11);
t1356 = sin(qJ(3,1));
t1328 = t1356 ^ 2;
t1362 = cos(qJ(3,1));
t1343 = 0.1e1 / t1362;
t1380 = t1362 ^ 2;
t1344 = 0.1e1 / t1380;
t1345 = t1343 * t1344;
t1357 = sin(qJ(2,1));
t1330 = 0.1e1 / t1357 ^ 2;
t1363 = cos(qJ(2,1));
t1348 = t1363 ^ 2;
t1501 = t1348 * t1330;
t1468 = t1345 * t1501;
t1393 = t1328 * t1468 - t1343;
t1504 = t1344 * t1356;
t1567 = (0.1e1 + t1501) * t1504;
t1577 = MDP(10) * t1567 - t1393 * MDP(11);
t1364 = 0.1e1 / pkin(2);
t1329 = 0.1e1 / t1357;
t1523 = t1329 * t1348;
t1576 = t1364 * (t1328 * t1344 * t1523 - t1357);
t1324 = 0.1e1 / t1355;
t1528 = t1324 * t1342;
t1575 = t1364 * (t1323 * t1338 * t1528 - t1355);
t1319 = 0.1e1 / t1353;
t1533 = t1319 * t1336;
t1574 = t1364 * (t1318 * t1332 * t1533 - t1353);
t1506 = t1343 * t1356;
t1570 = (t1357 + t1523) * t1364 * t1506;
t1513 = t1337 * t1354;
t1569 = (t1355 + t1528) * t1364 * t1513;
t1520 = t1331 * t1352;
t1568 = (t1353 + t1533) * t1364 * t1520;
t1347 = t1363 * t1348;
t1521 = t1330 * t1344;
t1471 = t1328 * t1521;
t1564 = (t1347 * t1471 - t1363) * MDP(11) - (t1330 * t1347 + t1363) * MDP(10) * t1506;
t1341 = t1361 * t1342;
t1526 = t1325 * t1338;
t1477 = t1323 * t1526;
t1563 = (t1341 * t1477 - t1361) * MDP(11) - (t1325 * t1341 + t1361) * MDP(10) * t1513;
t1335 = t1359 * t1336;
t1531 = t1320 * t1332;
t1483 = t1318 * t1531;
t1562 = (t1335 * t1483 - t1359) * MDP(11) - (t1320 * t1335 + t1359) * MDP(10) * t1520;
t1561 = 2 * MDP(3);
t1560 = 2 * MDP(4);
t1559 = 2 * MDP(6);
t1558 = 2 * MDP(7);
t1557 = 2 * MDP(8);
t1365 = 1 / (pkin(2) ^ 2);
t1556 = MDP(2) * t1365;
t1555 = MDP(3) * t1364;
t1554 = MDP(4) * t1364;
t1553 = MDP(5) * t1365;
t1552 = MDP(7) * t1365;
t1551 = MDP(8) * t1365;
t1349 = legFrame(3,2);
t1310 = sin(t1349);
t1313 = cos(t1349);
t1498 = t1353 * t1358;
t1298 = t1310 * t1498 - t1313 * t1352;
t1550 = t1298 * t1310;
t1549 = t1298 * t1313;
t1350 = legFrame(2,2);
t1311 = sin(t1350);
t1314 = cos(t1350);
t1496 = t1355 * t1360;
t1299 = t1311 * t1496 - t1314 * t1354;
t1548 = t1299 * t1311;
t1547 = t1299 * t1314;
t1351 = legFrame(1,2);
t1312 = sin(t1351);
t1315 = cos(t1351);
t1494 = t1357 * t1362;
t1300 = t1312 * t1494 - t1315 * t1356;
t1546 = t1300 * t1312;
t1545 = t1300 * t1315;
t1301 = t1310 * t1352 + t1313 * t1498;
t1544 = t1301 * t1310;
t1543 = t1301 * t1313;
t1302 = t1311 * t1354 + t1314 * t1496;
t1542 = t1302 * t1311;
t1541 = t1302 * t1314;
t1303 = t1312 * t1356 + t1315 * t1494;
t1540 = t1303 * t1312;
t1539 = t1303 * t1315;
t1538 = t1310 * t1313;
t1537 = t1311 * t1314;
t1536 = t1312 * t1315;
t1535 = t1319 * t1331;
t1534 = t1319 * t1332;
t1532 = t1319 * t1359;
t1530 = t1324 * t1337;
t1529 = t1324 * t1338;
t1527 = t1324 * t1361;
t1525 = t1329 * t1343;
t1524 = t1329 * t1344;
t1522 = t1329 * t1363;
t1519 = t1331 * t1359;
t1517 = t1333 * t1359;
t1516 = t1335 * t1352;
t1514 = t1336 * t1352;
t1512 = t1337 * t1361;
t1510 = t1339 * t1361;
t1509 = t1341 * t1354;
t1507 = t1342 * t1354;
t1505 = t1343 * t1363;
t1503 = t1345 * t1363;
t1502 = t1347 * t1356;
t1500 = t1348 * t1356;
t1499 = t1352 * t1359;
t1497 = t1354 * t1361;
t1495 = t1356 * t1363;
t1493 = t1365 * t1559;
t1489 = t1298 * t1535;
t1488 = t1299 * t1530;
t1487 = t1300 * t1525;
t1486 = t1301 * t1535;
t1485 = t1302 * t1530;
t1484 = t1303 * t1525;
t1482 = t1319 * t1518;
t1481 = t1320 * t1519;
t1479 = 0.1e1 / t1372 ^ 2 * t1515;
t1478 = t1320 * t1514;
t1476 = t1324 * t1511;
t1475 = t1325 * t1512;
t1473 = 0.1e1 / t1376 ^ 2 * t1508;
t1472 = t1325 * t1507;
t1470 = t1329 * t1504;
t1469 = t1330 * t1505;
t1467 = 0.1e1 / t1380 ^ 2 * t1501;
t1466 = t1330 * t1500;
t1464 = t1332 * t1499;
t1463 = t1333 * t1499;
t1461 = t1338 * t1497;
t1460 = t1339 * t1497;
t1458 = t1344 * t1495;
t1457 = t1345 * t1495;
t1410 = t1330 * t1364 * t1458;
t1411 = t1325 * t1364 * t1461;
t1412 = t1320 * t1364 * t1464;
t1456 = t1298 * t1412 + t1299 * t1411 + t1300 * t1410;
t1455 = t1301 * t1412 + t1302 * t1411 + t1303 * t1410;
t1316 = t1318 ^ 2;
t1445 = t1316 * t1479;
t1317 = t1352 * t1318;
t1444 = t1317 * t1480;
t1443 = t1317 * t1320 * t1517;
t1442 = t1318 * t1319 * t1517;
t1441 = t1359 * t1483;
t1440 = t1318 * t1479;
t1439 = t1319 * t1464;
t1438 = t1319 * t1463;
t1437 = t1333 * t1478;
t1436 = t1320 * t1463;
t1321 = t1323 ^ 2;
t1435 = t1321 * t1473;
t1322 = t1354 * t1323;
t1434 = t1322 * t1474;
t1433 = t1322 * t1325 * t1510;
t1432 = t1323 * t1324 * t1510;
t1431 = t1361 * t1477;
t1430 = t1323 * t1473;
t1429 = t1324 * t1461;
t1428 = t1324 * t1460;
t1427 = t1339 * t1472;
t1426 = t1325 * t1460;
t1326 = t1328 ^ 2;
t1425 = t1326 * t1467;
t1327 = t1356 * t1328;
t1424 = t1327 * t1468;
t1423 = t1327 * t1330 * t1503;
t1422 = t1328 * t1329 * t1503;
t1421 = t1363 * t1471;
t1420 = t1328 * t1467;
t1419 = t1329 * t1458;
t1418 = t1329 * t1457;
t1417 = t1345 * t1466;
t1416 = t1330 * t1457;
t1415 = t1479 * t1538;
t1414 = t1473 * t1537;
t1413 = t1467 * t1536;
t1409 = -t1543 + t1550;
t1408 = -t1541 + t1548;
t1407 = -t1539 + t1546;
t1391 = t1501 + t1508 + t1515;
t1387 = t1298 * t1481 + t1299 * t1475 + t1300 * t1469;
t1390 = ((-t1300 * t1363 + t1315 * t1502) * t1521 + (-t1299 * t1361 + t1314 * t1509) * t1526 + (-t1298 * t1359 + t1313 * t1516) * t1531) * t1555 + ((-t1315 * t1500 + t1300) * t1524 + (-t1314 * t1507 + t1299) * t1529 + (-t1313 * t1514 + t1298) * t1534) * t1554 + t1387 * MDP(1) + (-t1313 * t1441 - t1314 * t1431 - t1315 * t1421) * t1493 + (-t1313 * t1443 - t1314 * t1433 - t1315 * t1423) * t1553 + (-t1313 * t1436 - t1314 * t1426 - t1315 * t1416) * t1556 + (t1313 * t1482 + t1314 * t1476 + t1315 * t1470) * t1552 + (t1313 * t1535 + t1314 * t1530 + t1315 * t1525) * t1551;
t1386 = t1301 * t1481 + t1302 * t1475 + t1303 * t1469;
t1389 = ((-t1303 * t1363 - t1312 * t1502) * t1521 + (-t1302 * t1361 - t1311 * t1509) * t1526 + (-t1301 * t1359 - t1310 * t1516) * t1531) * t1555 + ((t1312 * t1500 + t1303) * t1524 + (t1311 * t1507 + t1302) * t1529 + (t1310 * t1514 + t1301) * t1534) * t1554 + t1386 * MDP(1) + (t1310 * t1441 + t1311 * t1431 + t1312 * t1421) * t1493 + (t1310 * t1443 + t1311 * t1433 + t1312 * t1423) * t1553 + (t1310 * t1436 + t1311 * t1426 + t1312 * t1416) * t1556 + (-t1310 * t1482 - t1311 * t1476 - t1312 * t1470) * t1552 + (-t1310 * t1535 - t1311 * t1530 - t1312 * t1525) * t1551;
t1388 = (-t1407 * t1417 - t1408 * t1427 - t1409 * t1437) * t1555 + (t1407 * t1418 + t1408 * t1428 + t1409 * t1438) * t1554 + (t1298 * t1301 * t1531 + t1299 * t1302 * t1526 + t1300 * t1303 * t1521) * MDP(1) + (-t1424 * t1536 - t1434 * t1537 - t1444 * t1538) * t1493 + 0.2e1 * (t1422 * t1536 + t1432 * t1537 + t1442 * t1538) * t1552 + 0.2e1 * (t1419 * t1536 + t1429 * t1537 + t1439 * t1538) * t1551 + (-t1316 * t1415 - t1321 * t1414 - t1326 * t1413) * t1553 + (-t1318 * t1415 - t1323 * t1414 - t1328 * t1413) * t1556 + (-t1332 * t1538 - t1338 * t1537 - t1344 * t1536) * t1365 * MDP(9);
t1385 = t1387 * MDP(10);
t1384 = t1386 * MDP(10);
t1309 = t1315 ^ 2;
t1308 = t1314 ^ 2;
t1307 = t1313 ^ 2;
t1306 = t1312 ^ 2;
t1305 = t1311 ^ 2;
t1304 = t1310 ^ 2;
t1297 = t1315 * t1576;
t1296 = t1312 * t1576;
t1295 = t1314 * t1575;
t1294 = t1311 * t1575;
t1293 = t1313 * t1574;
t1292 = t1310 * t1574;
t1285 = t1315 * t1570;
t1284 = t1312 * t1570;
t1283 = t1314 * t1569;
t1282 = t1311 * t1569;
t1281 = t1313 * t1568;
t1280 = t1310 * t1568;
t1 = [(t1298 ^ 2 * t1531 + t1299 ^ 2 * t1526 + t1300 ^ 2 * t1521) * MDP(1) + (t1281 * t1489 + t1283 * t1488 + t1285 * t1487) * MDP(10) + (-t1293 * t1489 - t1295 * t1488 - t1297 * t1487) * MDP(11) + MDP(12) + (t1577 * t1545 + t1578 * t1547 + t1579 * t1549 + (t1417 * t1545 + t1427 * t1547 + t1437 * t1549) * t1561 + (-t1418 * t1545 - t1428 * t1547 - t1438 * t1549) * t1560) * t1364 + ((t1307 * t1440 + t1308 * t1430 + t1309 * t1420) * MDP(2) + (t1307 * t1445 + t1308 * t1435 + t1309 * t1425) * MDP(5) + (t1307 * t1332 + t1308 * t1338 + t1309 * t1344) * MDP(9) + (t1307 * t1444 + t1308 * t1434 + t1309 * t1424) * t1559 + (-t1307 * t1442 - t1308 * t1432 - t1309 * t1422) * t1558 + (-t1307 * t1439 - t1308 * t1429 - t1309 * t1419) * t1557) * t1365; (-t1280 * t1489 - t1282 * t1488 - t1284 * t1487 + (t1539 * t1567 + t1541 * t1566 + t1543 * t1565) * t1364) * MDP(10) + (t1292 * t1489 + t1294 * t1488 + t1296 * t1487 + (-t1393 * t1539 - t1396 * t1541 - t1399 * t1543) * t1364) * MDP(11) + t1388; t1456 * MDP(11) + (-t1562 * t1313 - t1563 * t1314 - t1564 * t1315 - t1385) * t1364 + t1390; (t1281 * t1486 + t1283 * t1485 + t1285 * t1484 + (-t1546 * t1567 - t1548 * t1566 - t1550 * t1565) * t1364) * MDP(10) + (-t1293 * t1486 - t1295 * t1485 - t1297 * t1484 + (t1393 * t1546 + t1396 * t1548 + t1399 * t1550) * t1364) * MDP(11) + t1388; (t1301 ^ 2 * t1531 + t1302 ^ 2 * t1526 + t1303 ^ 2 * t1521) * MDP(1) + (-t1280 * t1486 - t1282 * t1485 - t1284 * t1484) * MDP(10) + (t1292 * t1486 + t1294 * t1485 + t1296 * t1484) * MDP(11) + MDP(12) + (-t1577 * t1540 - t1578 * t1542 - t1579 * t1544 + (-t1417 * t1540 - t1427 * t1542 - t1437 * t1544) * t1561 + (t1418 * t1540 + t1428 * t1542 + t1438 * t1544) * t1560) * t1364 + ((t1304 * t1440 + t1305 * t1430 + t1306 * t1420) * MDP(2) + (t1304 * t1445 + t1305 * t1435 + t1306 * t1425) * MDP(5) + (t1304 * t1332 + t1305 * t1338 + t1306 * t1344) * MDP(9) + (t1304 * t1444 + t1305 * t1434 + t1306 * t1424) * t1559 + (-t1304 * t1442 - t1305 * t1432 - t1306 * t1422) * t1558 + (-t1304 * t1439 - t1305 * t1429 - t1306 * t1419) * t1557) * t1365; t1455 * MDP(11) + (t1562 * t1310 + t1563 * t1311 + t1564 * t1312 - t1384) * t1364 + t1389; (t1281 * t1532 + t1283 * t1527 + t1285 * t1522) * MDP(10) + (-t1293 * t1532 - t1295 * t1527 - t1297 * t1522 + t1456) * MDP(11) - t1364 * t1385 + t1390; (-t1280 * t1532 - t1282 * t1527 - t1284 * t1522) * MDP(10) + (t1292 * t1532 + t1294 * t1527 + t1296 * t1522 + t1455) * MDP(11) - t1364 * t1384 + t1389; t1391 * MDP(1) + MDP(12) + ((t1521 + t1526 + t1531) * MDP(2) + (t1471 + t1477 + t1483) * MDP(5) + (t1320 * t1520 + t1325 * t1513 + t1330 * t1506) * t1559) * t1365 + 0.2e1 * ((-t1331 * t1515 - t1337 * t1508 - t1343 * t1501) * MDP(3) + (t1319 * t1519 + t1324 * t1512 + t1329 * t1505) * MDP(4) - t1391 * MDP(10) + (t1331 * t1478 + t1337 * t1472 + t1343 * t1466) * MDP(11)) * t1364;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
