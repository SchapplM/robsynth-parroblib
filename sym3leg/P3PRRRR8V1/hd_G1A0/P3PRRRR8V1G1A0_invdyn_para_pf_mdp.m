% Calculate minimal parameter regressor of inverse dynamics forces for
% P3PRRRR8V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 16:50
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3PRRRR8V1G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G1A0_invdyn_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 16:50:28
% EndTime: 2020-08-06 16:50:37
% DurationCPUTime: 8.87s
% Computational Cost: add. (33667->430), mult. (84347->861), div. (4888->18), fcn. (83977->22), ass. (0->343)
t1558 = sin(pkin(3));
t1570 = sin(qJ(2,2));
t1684 = t1558 * t1570;
t1576 = cos(qJ(2,2));
t1575 = cos(qJ(3,2));
t1728 = pkin(2) * t1575;
t1539 = pkin(5) * t1570 + t1576 * t1728;
t1557 = sin(pkin(6));
t1559 = cos(pkin(6));
t1664 = t1570 * t1575;
t1536 = pkin(2) * t1664 - pkin(5) * t1576;
t1560 = cos(pkin(3));
t1569 = sin(qJ(3,2));
t1730 = pkin(2) * t1569;
t1591 = -t1536 * t1560 + t1558 * t1730;
t1478 = t1539 * t1559 + t1591 * t1557;
t1481 = t1539 * t1557 - t1591 * t1559;
t1562 = legFrame(2,3);
t1546 = sin(t1562);
t1549 = cos(t1562);
t1460 = t1478 * t1549 - t1481 * t1546;
t1463 = t1478 * t1546 + t1481 * t1549;
t1565 = xDDP(2);
t1566 = xDDP(1);
t1579 = xDP(2);
t1580 = xDP(1);
t1527 = -t1557 * t1580 + t1559 * t1579;
t1528 = t1557 * t1579 + t1559 * t1580;
t1484 = t1527 * t1549 - t1528 * t1546;
t1487 = t1527 * t1546 + t1528 * t1549;
t1670 = t1560 * t1576;
t1674 = t1560 * t1570;
t1451 = -(t1484 * t1570 + t1487 * t1670) * t1728 - pkin(5) * (-t1484 * t1576 + t1487 * t1674);
t1553 = 0.1e1 / t1575;
t1581 = pkin(5) ^ 2;
t1582 = pkin(2) ^ 2;
t1687 = t1553 * t1569;
t1617 = t1536 * t1558 + t1560 * t1730;
t1738 = 0.1e1 / t1617;
t1630 = t1738 * t1687;
t1668 = t1560 * t1579;
t1523 = t1570 * t1668 + t1576 * t1580;
t1667 = t1560 * t1580;
t1524 = t1570 * t1667 - t1576 * t1579;
t1680 = t1558 * t1575;
t1457 = ((-t1523 * t1557 - t1524 * t1559) * t1549 - (t1523 * t1559 - t1524 * t1557) * t1546) * t1569 - t1487 * t1680;
t1708 = t1457 * t1738;
t1433 = -pkin(5) * t1451 * t1630 + (t1553 * t1581 + t1575 * t1582) * t1708;
t1660 = pkin(5) * t1708;
t1615 = t1569 * t1660;
t1715 = t1451 * t1738;
t1436 = (-t1615 + t1715) * t1553;
t1647 = t1738 * t1708;
t1493 = 0.1e1 / t1617 ^ 2;
t1714 = t1451 * t1493;
t1662 = (t1433 * t1647 + t1436 * t1714) * t1553;
t1564 = xDDP(3);
t1737 = t1564 - g(3);
t1724 = -(t1460 * t1566 + t1463 * t1565) * t1738 - t1662 - t1737;
t1742 = t1724 * t1684;
t1572 = sin(qJ(2,1));
t1683 = t1558 * t1572;
t1578 = cos(qJ(2,1));
t1577 = cos(qJ(3,1));
t1727 = pkin(2) * t1577;
t1540 = pkin(5) * t1572 + t1578 * t1727;
t1663 = t1572 * t1577;
t1537 = pkin(2) * t1663 - pkin(5) * t1578;
t1571 = sin(qJ(3,1));
t1731 = pkin(2) * t1558;
t1590 = -t1537 * t1560 + t1571 * t1731;
t1479 = t1540 * t1559 + t1590 * t1557;
t1482 = t1540 * t1557 - t1590 * t1559;
t1563 = legFrame(1,3);
t1547 = sin(t1563);
t1550 = cos(t1563);
t1461 = t1479 * t1550 - t1482 * t1547;
t1464 = t1479 * t1547 + t1482 * t1550;
t1673 = t1560 * t1571;
t1508 = pkin(2) * t1673 + t1537 * t1558;
t1504 = 0.1e1 / t1508;
t1485 = t1527 * t1550 - t1528 * t1547;
t1488 = t1527 * t1547 + t1528 * t1550;
t1669 = t1560 * t1578;
t1672 = t1560 * t1572;
t1452 = -(t1485 * t1572 + t1488 * t1669) * t1727 - pkin(5) * (-t1485 * t1578 + t1488 * t1672);
t1555 = 0.1e1 / t1577;
t1686 = t1555 * t1571;
t1624 = t1558 * t1663;
t1677 = t1558 * t1578;
t1499 = -pkin(5) * t1677 + (t1624 + t1673) * pkin(2);
t1735 = 0.1e1 / t1499;
t1627 = t1735 * t1686;
t1525 = t1572 * t1668 + t1578 * t1580;
t1526 = t1572 * t1667 - t1578 * t1579;
t1678 = t1558 * t1577;
t1458 = ((-t1525 * t1557 - t1526 * t1559) * t1550 - (t1525 * t1559 - t1526 * t1557) * t1547) * t1571 - t1488 * t1678;
t1707 = t1458 * t1504;
t1434 = -pkin(5) * t1452 * t1627 + (t1555 * t1581 + t1577 * t1582) * t1707;
t1659 = pkin(5) * t1707;
t1614 = t1571 * t1659;
t1713 = t1452 * t1735;
t1437 = (t1614 - t1713) * t1555;
t1651 = t1735 * t1713;
t1689 = t1504 * t1555;
t1588 = t1434 * t1458 * t1689 * t1735 - t1437 * t1555 * t1651;
t1725 = -(t1461 * t1566 + t1464 * t1565) * t1504 - t1588 - t1737;
t1741 = t1725 * t1683;
t1568 = sin(qJ(2,3));
t1685 = t1558 * t1568;
t1574 = cos(qJ(2,3));
t1573 = cos(qJ(3,3));
t1729 = pkin(2) * t1573;
t1538 = pkin(5) * t1568 + t1574 * t1729;
t1665 = t1568 * t1573;
t1535 = pkin(2) * t1665 - pkin(5) * t1574;
t1567 = sin(qJ(3,3));
t1592 = -t1535 * t1560 + t1567 * t1731;
t1477 = t1538 * t1559 + t1592 * t1557;
t1480 = t1538 * t1557 - t1592 * t1559;
t1561 = legFrame(3,3);
t1545 = sin(t1561);
t1548 = cos(t1561);
t1459 = t1477 * t1548 - t1480 * t1545;
t1462 = t1477 * t1545 + t1480 * t1548;
t1676 = t1560 * t1567;
t1506 = pkin(2) * t1676 + t1535 * t1558;
t1500 = 0.1e1 / t1506;
t1483 = t1527 * t1548 - t1528 * t1545;
t1486 = t1527 * t1545 + t1528 * t1548;
t1671 = t1560 * t1574;
t1675 = t1560 * t1568;
t1450 = -(t1483 * t1568 + t1486 * t1671) * t1729 - pkin(5) * (-t1483 * t1574 + t1486 * t1675);
t1551 = 0.1e1 / t1573;
t1688 = t1551 * t1567;
t1625 = t1558 * t1665;
t1681 = t1558 * t1574;
t1497 = -pkin(5) * t1681 + (t1625 + t1676) * pkin(2);
t1736 = 0.1e1 / t1497;
t1633 = t1736 * t1688;
t1521 = t1568 * t1668 + t1574 * t1580;
t1522 = t1568 * t1667 - t1574 * t1579;
t1682 = t1558 * t1573;
t1456 = ((-t1521 * t1557 - t1522 * t1559) * t1548 - (t1521 * t1559 - t1522 * t1557) * t1545) * t1567 - t1486 * t1682;
t1709 = t1456 * t1500;
t1432 = -pkin(5) * t1450 * t1633 + (t1551 * t1581 + t1573 * t1582) * t1709;
t1661 = pkin(5) * t1709;
t1616 = t1567 * t1661;
t1716 = t1450 * t1736;
t1435 = (t1616 - t1716) * t1551;
t1652 = t1736 * t1716;
t1691 = t1500 * t1551;
t1589 = t1432 * t1456 * t1691 * t1736 - t1435 * t1551 * t1652;
t1726 = -(t1459 * t1566 + t1462 * t1565) * t1500 - t1589 - t1737;
t1740 = t1726 * t1685;
t1739 = t1738 * t1553;
t1585 = t1573 ^ 2;
t1552 = 0.1e1 / t1585;
t1734 = t1552 - 0.2e1;
t1586 = t1575 ^ 2;
t1554 = 0.1e1 / t1586;
t1733 = t1554 - 0.2e1;
t1587 = t1577 ^ 2;
t1556 = 0.1e1 / t1587;
t1732 = t1556 - 0.2e1;
t1583 = 0.1e1 / pkin(2);
t1723 = MDP(9) * t1583;
t1698 = t1736 * t1583;
t1632 = t1551 * t1698;
t1606 = t1450 * t1558 * t1632;
t1512 = t1545 * t1559 + t1548 * t1557;
t1516 = t1557 * t1574 + t1559 * t1675;
t1519 = -t1557 * t1675 + t1559 * t1574;
t1474 = (-t1516 * t1545 + t1519 * t1548) * t1567 - t1512 * t1682;
t1637 = t1474 * t1691;
t1509 = -t1545 * t1557 + t1548 * t1559;
t1471 = (-t1516 * t1548 - t1519 * t1545) * t1567 - t1509 * t1682;
t1640 = t1471 * t1691;
t1666 = t1560 * t1583;
t1699 = t1736 * t1567;
t1391 = t1565 * t1637 + t1566 * t1640 + (-(t1560 * t1435 + (pkin(2) * (t1666 * t1716 + t1681 * t1709) * t1585 - (t1450 * t1699 - t1661) * t1625) * t1551) * t1736 * t1709 - (t1574 * t1606 + (-t1567 * t1685 + (-t1551 + t1573) * t1560) * t1709) * t1652) * t1552;
t1722 = t1391 * t1736;
t1721 = t1391 * t1567;
t1692 = t1735 * t1583;
t1626 = t1555 * t1692;
t1602 = t1452 * t1558 * t1626;
t1514 = t1547 * t1559 + t1550 * t1557;
t1515 = t1557 * t1672 - t1559 * t1578;
t1518 = t1557 * t1578 + t1559 * t1672;
t1476 = (-t1515 * t1550 - t1518 * t1547) * t1571 - t1514 * t1678;
t1635 = t1476 * t1689;
t1511 = -t1547 * t1557 + t1550 * t1559;
t1473 = (t1515 * t1547 - t1518 * t1550) * t1571 - t1511 * t1678;
t1638 = t1473 * t1689;
t1693 = t1735 * t1571;
t1392 = t1565 * t1635 + t1566 * t1638 + (-(t1560 * t1437 + (pkin(2) * (t1666 * t1713 + t1677 * t1707) * t1587 - (t1452 * t1693 - t1659) * t1624) * t1555) * t1735 * t1707 - (t1578 * t1602 + (-t1571 * t1683 + (-t1555 + t1577) * t1560) * t1707) * t1651) * t1556;
t1720 = t1392 * t1735;
t1719 = t1392 * t1571;
t1695 = t1738 * t1583;
t1629 = t1553 * t1695;
t1604 = t1451 * t1558 * t1629;
t1513 = t1546 * t1559 + t1549 * t1557;
t1517 = t1557 * t1576 + t1559 * t1674;
t1520 = -t1557 * t1674 + t1559 * t1576;
t1475 = (-t1517 * t1546 + t1520 * t1549) * t1569 - t1513 * t1680;
t1636 = t1475 * t1739;
t1510 = -t1546 * t1557 + t1549 * t1559;
t1472 = (-t1517 * t1549 - t1520 * t1546) * t1569 - t1510 * t1680;
t1639 = t1472 * t1739;
t1679 = t1558 * t1576;
t1696 = t1738 * t1569;
t1394 = t1565 * t1636 + t1566 * t1639 + (-(-t1560 * t1436 + (pkin(2) * (t1666 * t1715 + t1679 * t1708) * t1586 - t1558 * (t1451 * t1696 - t1660) * t1664) * t1553) * t1647 - (t1576 * t1604 + (-t1569 * t1684 + (-t1553 + t1575) * t1560) * t1708) * t1714) * t1554;
t1718 = t1394 * t1738;
t1717 = t1394 * t1569;
t1712 = t1456 ^ 2 / t1506 ^ 2;
t1711 = t1457 ^ 2 * t1493;
t1710 = t1458 ^ 2 / t1508 ^ 2;
t1706 = t1459 * t1500;
t1705 = t1460 * t1738;
t1704 = t1461 * t1504;
t1703 = t1462 * t1500;
t1702 = t1463 * t1738;
t1701 = t1464 * t1504;
t1700 = t1736 * t1551;
t1694 = t1735 * t1555;
t1541 = g(1) * t1557 - g(2) * t1559;
t1542 = g(1) * t1559 + g(2) * t1557;
t1598 = t1541 * t1548 + t1542 * t1545;
t1407 = (-t1558 * t1726 + t1598 * t1560) * t1574 + (-t1541 * t1545 + t1542 * t1548) * t1568;
t1658 = t1407 * t1688;
t1596 = t1541 * t1550 + t1542 * t1547;
t1408 = (-t1558 * t1725 + t1596 * t1560) * t1578 + (-t1541 * t1547 + t1542 * t1550) * t1572;
t1657 = t1408 * t1686;
t1597 = t1541 * t1549 + t1542 * t1546;
t1415 = (-t1558 * t1724 + t1597 * t1560) * t1576 + (-t1541 * t1546 + t1542 * t1549) * t1570;
t1656 = t1415 * t1687;
t1584 = 0.1e1 / pkin(2) ^ 2;
t1655 = t1450 ^ 2 / t1497 ^ 2 * t1584;
t1654 = t1451 ^ 2 * t1493 * t1584;
t1653 = t1452 ^ 2 / t1499 ^ 2 * t1584;
t1650 = t1552 * t1712;
t1649 = t1554 * t1711;
t1648 = t1556 * t1710;
t1465 = -(t1509 * t1671 - t1512 * t1568) * t1729 - pkin(5) * (t1509 * t1675 + t1512 * t1574);
t1646 = t1465 * t1700;
t1466 = -(t1509 * t1568 + t1512 * t1671) * t1729 - (-t1509 * t1574 + t1512 * t1675) * pkin(5);
t1645 = t1466 * t1700;
t1467 = -(t1510 * t1670 - t1513 * t1570) * t1728 - pkin(5) * (t1510 * t1674 + t1513 * t1576);
t1644 = t1467 * t1739;
t1468 = -(t1510 * t1570 + t1513 * t1670) * t1728 - (-t1510 * t1576 + t1513 * t1674) * pkin(5);
t1643 = t1468 * t1739;
t1469 = -(t1511 * t1669 - t1514 * t1572) * t1727 - pkin(5) * (t1511 * t1672 + t1514 * t1578);
t1642 = t1469 * t1694;
t1470 = -(t1511 * t1572 + t1514 * t1669) * t1727 - (-t1511 * t1578 + t1514 * t1672) * pkin(5);
t1641 = t1470 * t1694;
t1634 = t1500 * t1698;
t1631 = t1738 * t1695;
t1628 = t1504 * t1692;
t1610 = t1456 * t1634;
t1607 = t1450 * t1610;
t1623 = 0.2e1 * (t1573 * t1721 - t1734 * t1607) * t1691;
t1608 = t1458 * t1628;
t1603 = t1452 * t1608;
t1622 = 0.2e1 * (t1577 * t1719 - t1732 * t1603) * t1689;
t1609 = t1457 * t1631;
t1605 = t1451 * t1609;
t1621 = 0.2e1 * (t1575 * t1717 - t1733 * t1605) * t1739;
t1389 = t1574 * t1391;
t1620 = (t1655 + t1712) * t1552 * t1568 - t1389;
t1390 = t1578 * t1392;
t1619 = (t1653 + t1710) * t1556 * t1572 - t1390;
t1393 = t1576 * t1394;
t1618 = (t1654 + t1711) * t1554 * t1570 - t1393;
t1613 = t1391 * t1633;
t1612 = t1392 * t1627;
t1611 = t1394 * t1630;
t1601 = t1650 * t1699;
t1600 = t1649 * t1696;
t1599 = t1648 * t1693;
t1595 = 0.2e1 * t1607;
t1594 = 0.2e1 * t1605;
t1593 = 0.2e1 * t1603;
t1534 = g(1) * t1550 + g(2) * t1547;
t1533 = g(1) * t1549 + g(2) * t1546;
t1532 = g(1) * t1548 + g(2) * t1545;
t1531 = g(1) * t1547 - g(2) * t1550;
t1530 = g(1) * t1546 - g(2) * t1549;
t1529 = g(1) * t1545 - g(2) * t1548;
t1443 = t1732 * t1710;
t1442 = t1733 * t1711;
t1441 = t1734 * t1712;
t1421 = t1597 * t1558 + t1560 * t1724;
t1420 = t1596 * t1558 + t1560 * t1725;
t1419 = t1598 * t1558 + t1560 * t1726;
t1418 = t1533 * (t1557 * t1670 + t1559 * t1570) + t1530 * (-t1557 * t1570 + t1559 * t1670) - t1724 * t1679;
t1417 = -t1517 * t1530 + t1520 * t1533 + t1742;
t1416 = (-t1541 * t1674 + t1542 * t1576) * t1549 + (-t1541 * t1576 - t1542 * t1674) * t1546 + t1742;
t1414 = t1534 * (t1557 * t1669 + t1559 * t1572) + t1531 * (-t1557 * t1572 + t1559 * t1669) - t1725 * t1677;
t1413 = t1532 * (t1557 * t1671 + t1559 * t1568) + t1529 * (-t1557 * t1568 + t1559 * t1671) - t1726 * t1681;
t1412 = -t1515 * t1534 - t1518 * t1531 + t1741;
t1411 = -t1516 * t1529 + t1519 * t1532 + t1740;
t1410 = (-t1541 * t1672 + t1542 * t1578) * t1550 + (-t1541 * t1578 - t1542 * t1672) * t1547 + t1741;
t1409 = (-t1541 * t1675 + t1542 * t1574) * t1548 + (-t1541 * t1574 - t1542 * t1675) * t1545 + t1740;
t1406 = (t1469 * t1566 + t1470 * t1565) * t1626 + (-t1560 * t1434 * t1608 - (-t1571 * t1537 * t1602 + t1560 * (-t1555 * t1614 + t1577 * t1713)) * t1452 * t1628) * t1556;
t1405 = (t1467 * t1566 + t1468 * t1565) * t1629 + (-t1560 * t1433 * t1609 - (-t1569 * t1536 * t1604 + t1560 * (-t1553 * t1615 + t1575 * t1715)) * t1451 * t1631) * t1554;
t1404 = (t1465 * t1566 + t1466 * t1565) * t1632 + (-t1560 * t1432 * t1610 - (-t1567 * t1535 * t1606 + t1560 * (-t1551 * t1616 + t1573 * t1716)) * t1450 * t1634) * t1552;
t1403 = t1406 * t1571 + t1555 * t1653;
t1402 = t1405 * t1569 + t1553 * t1654;
t1401 = t1404 * t1567 + t1551 * t1655;
t1400 = -t1556 * t1571 * t1653 + t1406 * t1577;
t1399 = -t1554 * t1569 * t1654 + t1405 * t1575;
t1398 = -t1552 * t1567 * t1655 + t1404 * t1573;
t1397 = t1556 * t1578 * t1593 + t1406 * t1572;
t1396 = t1554 * t1576 * t1594 + t1405 * t1570;
t1395 = t1552 * t1574 * t1595 + t1404 * t1568;
t1388 = t1394 * t1570 + t1576 * t1649;
t1387 = -t1570 * t1649 + t1393;
t1386 = t1392 * t1572 + t1578 * t1648;
t1385 = t1391 * t1568 + t1574 * t1650;
t1384 = -t1572 * t1648 + t1390;
t1383 = -t1568 * t1650 + t1389;
t1382 = (t1553 * t1594 + t1717) * t1569;
t1381 = (t1555 * t1593 + t1719) * t1571;
t1380 = (t1551 * t1595 + t1721) * t1567;
t1376 = t1416 * t1575 + t1421 * t1569;
t1375 = t1416 * t1569 - t1421 * t1575;
t1374 = t1410 * t1577 + t1420 * t1571;
t1373 = t1410 * t1571 - t1420 * t1577;
t1372 = t1409 * t1573 + t1419 * t1567;
t1371 = t1409 * t1567 - t1419 * t1573;
t1370 = (-t1569 * t1396 - t1618 * t1575) * t1558;
t1369 = (-t1575 * t1396 + t1618 * t1569) * t1558;
t1368 = (-t1571 * t1397 - t1619 * t1577) * t1558;
t1367 = (-t1577 * t1397 + t1619 * t1571) * t1558;
t1366 = (-t1567 * t1395 - t1620 * t1573) * t1558;
t1365 = (-t1573 * t1395 + t1620 * t1567) * t1558;
t1364 = -t1402 * t1560 + t1369;
t1363 = t1399 * t1560 + t1370;
t1362 = -t1403 * t1560 + t1367;
t1361 = -t1401 * t1560 + t1365;
t1360 = t1400 * t1560 + t1368;
t1359 = t1398 * t1560 + t1366;
t1 = [(-t1704 * t1725 - t1705 * t1724 - t1706 * t1726) * MDP(1) + (t1391 * t1640 + t1392 * t1638 + t1394 * t1639) * MDP(2) + (t1413 * t1640 + t1414 * t1638 + t1418 * t1639 + (t1383 * t1706 + t1384 * t1704 + t1387 * t1705) * t1558) * MDP(3) + (t1411 * t1640 + t1412 * t1638 + t1417 * t1639 + (-t1385 * t1706 - t1386 * t1704 - t1388 * t1705) * t1558) * MDP(4) + (t1380 * t1640 + t1381 * t1638 + t1382 * t1639 + (-t1465 * t1601 - t1467 * t1600 - t1469 * t1599) * t1583) * MDP(5) + ((t1441 * t1646 + t1442 * t1644 + t1443 * t1642) * t1583 + t1471 * t1623 + t1473 * t1622 + t1472 * t1621) * MDP(6) + (t1401 * t1640 + t1402 * t1639 + t1403 * t1638 + (t1465 * t1613 + t1467 * t1611 + t1469 * t1612) * t1583) * MDP(7) + (t1398 * t1640 + t1399 * t1639 + t1400 * t1638 + (t1465 * t1722 + t1467 * t1718 + t1469 * t1720) * t1583) * MDP(8) + (t1404 * t1646 + t1405 * t1644 + t1406 * t1642) * t1723 + ((t1360 * t1461 + t1408 * t1473) * t1504 + (t1363 * t1460 + t1415 * t1472) * t1738 + (t1359 * t1459 + t1407 * t1471) * t1500 + (t1371 * t1646 + t1373 * t1642 + t1375 * t1644) * t1583) * MDP(10) + ((t1362 * t1461 - t1473 * t1657) * t1504 + (t1364 * t1460 - t1472 * t1656) * t1738 + (t1361 * t1459 - t1471 * t1658) * t1500 + (t1372 * t1646 + t1374 * t1642 + t1376 * t1644) * t1583) * MDP(11) + (t1566 - g(1)) * MDP(12); (-t1701 * t1725 - t1702 * t1724 - t1703 * t1726) * MDP(1) + (t1391 * t1637 + t1392 * t1635 + t1394 * t1636) * MDP(2) + (t1413 * t1637 + t1414 * t1635 + t1418 * t1636 + (t1383 * t1703 + t1384 * t1701 + t1387 * t1702) * t1558) * MDP(3) + (t1411 * t1637 + t1412 * t1635 + t1417 * t1636 + (-t1385 * t1703 - t1386 * t1701 - t1388 * t1702) * t1558) * MDP(4) + (t1380 * t1637 + t1381 * t1635 + t1382 * t1636 + (-t1466 * t1601 - t1468 * t1600 - t1470 * t1599) * t1583) * MDP(5) + ((t1441 * t1645 + t1442 * t1643 + t1443 * t1641) * t1583 + t1474 * t1623 + t1476 * t1622 + t1475 * t1621) * MDP(6) + (t1401 * t1637 + t1402 * t1636 + t1403 * t1635 + (t1466 * t1613 + t1468 * t1611 + t1470 * t1612) * t1583) * MDP(7) + (t1398 * t1637 + t1399 * t1636 + t1400 * t1635 + (t1466 * t1722 + t1468 * t1718 + t1470 * t1720) * t1583) * MDP(8) + (t1404 * t1645 + t1405 * t1643 + t1406 * t1641) * t1723 + ((t1360 * t1464 + t1408 * t1476) * t1504 + (t1363 * t1463 + t1415 * t1475) * t1738 + (t1359 * t1462 + t1407 * t1474) * t1500 + (t1371 * t1645 + t1373 * t1641 + t1375 * t1643) * t1583) * MDP(10) + ((t1362 * t1464 - t1476 * t1657) * t1504 + (t1364 * t1463 - t1475 * t1656) * t1738 + (t1361 * t1462 - t1474 * t1658) * t1500 + (t1372 * t1645 + t1374 * t1641 + t1376 * t1643) * t1583) * MDP(11) + (t1565 - g(2)) * MDP(12); (t1366 + t1368 + t1370) * MDP(10) + (t1365 + t1367 + t1369) * MDP(11) + t1737 * MDP(12) + ((t1398 + t1399 + t1400) * MDP(10) + (-t1401 - t1402 - t1403) * MDP(11)) * t1560 + ((t1383 + t1384 + t1387) * MDP(3) + (-t1385 - t1386 - t1388) * MDP(4)) * t1558 + (-(3 * g(3)) + (3 * t1564) + t1588 + t1589 + t1662 + (t1704 + t1705 + t1706) * t1566 + (t1701 + t1702 + t1703) * t1565) * MDP(1);];
tauX  = t1;
