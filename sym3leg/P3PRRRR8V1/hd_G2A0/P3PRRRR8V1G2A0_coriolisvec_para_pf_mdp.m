% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:03:46
% EndTime: 2020-08-06 17:03:56
% DurationCPUTime: 10.09s
% Computational Cost: add. (27478->385), mult. (71070->847), div. (4898->17), fcn. (68618->22), ass. (0->387)
t2597 = legFrame(3,2);
t2572 = sin(t2597);
t2575 = cos(t2597);
t2613 = xDP(2);
t2614 = xDP(1);
t2556 = -t2572 * t2613 + t2575 * t2614;
t2595 = cos(pkin(6));
t2593 = sin(pkin(6));
t2612 = xDP(3);
t2829 = t2593 * t2612;
t2519 = t2556 * t2595 - t2829;
t2568 = t2612 * t2595;
t2522 = t2556 * t2593 + t2568;
t2601 = sin(qJ(2,3));
t2607 = cos(qJ(2,3));
t2596 = cos(pkin(3));
t2816 = t2596 * t2607;
t2821 = t2596 * t2601;
t2606 = cos(qJ(3,3));
t2879 = pkin(2) * t2606;
t2482 = -(t2519 * t2601 + t2522 * t2816) * t2879 + (t2519 * t2607 - t2522 * t2821) * pkin(5);
t2582 = 0.1e1 / t2606;
t2615 = pkin(5) ^ 2;
t2616 = pkin(2) ^ 2;
t2600 = sin(qJ(3,3));
t2835 = t2582 * t2600;
t2809 = t2601 * t2606;
t2559 = pkin(2) * t2809 - pkin(5) * t2607;
t2594 = sin(pkin(3));
t2822 = t2596 * t2600;
t2743 = pkin(2) * t2822 + t2559 * t2594;
t2894 = 0.1e1 / t2743;
t2764 = t2894 * t2835;
t2813 = t2596 * t2612;
t2828 = t2594 * t2606;
t2491 = ((-t2556 * t2821 - t2607 * t2612) * t2593 + (t2556 * t2607 - t2601 * t2813) * t2595) * t2600 - t2522 * t2828;
t2849 = t2491 * t2894;
t2467 = -pkin(5) * t2482 * t2764 + (t2582 * t2615 + t2606 * t2616) * t2849;
t2798 = pkin(5) * t2849;
t2740 = t2600 * t2798;
t2861 = t2482 * t2894;
t2470 = (t2740 - t2861) * t2582;
t2775 = t2894 * t2849;
t2895 = 0.1e1 / t2743 ^ 2;
t2860 = t2482 * t2895;
t2458 = (t2467 * t2775 - t2470 * t2860) * t2582;
t2867 = t2458 * t2894;
t2598 = legFrame(2,2);
t2573 = sin(t2598);
t2576 = cos(t2598);
t2557 = -t2573 * t2613 + t2576 * t2614;
t2520 = t2557 * t2595 - t2829;
t2523 = t2557 * t2593 + t2568;
t2603 = sin(qJ(2,2));
t2609 = cos(qJ(2,2));
t2815 = t2596 * t2609;
t2819 = t2596 * t2603;
t2608 = cos(qJ(3,2));
t2878 = pkin(2) * t2608;
t2483 = -(t2520 * t2603 + t2523 * t2815) * t2878 + (t2520 * t2609 - t2523 * t2819) * pkin(5);
t2586 = 0.1e1 / t2608;
t2602 = sin(qJ(3,2));
t2833 = t2586 * t2602;
t2806 = t2603 * t2608;
t2560 = pkin(2) * t2806 - pkin(5) * t2609;
t2820 = t2596 * t2602;
t2742 = pkin(2) * t2820 + t2560 * t2594;
t2896 = 0.1e1 / t2742;
t2762 = t2896 * t2833;
t2826 = t2594 * t2608;
t2492 = ((-t2557 * t2819 - t2609 * t2612) * t2593 + (t2557 * t2609 - t2603 * t2813) * t2595) * t2602 - t2523 * t2826;
t2848 = t2492 * t2896;
t2468 = -pkin(5) * t2483 * t2762 + (t2586 * t2615 + t2608 * t2616) * t2848;
t2797 = pkin(5) * t2848;
t2739 = t2602 * t2797;
t2859 = t2483 * t2896;
t2471 = (t2739 - t2859) * t2586;
t2774 = t2896 * t2848;
t2897 = 0.1e1 / t2742 ^ 2;
t2858 = t2483 * t2897;
t2459 = (t2468 * t2774 - t2471 * t2858) * t2586;
t2866 = t2459 * t2896;
t2599 = legFrame(1,2);
t2574 = sin(t2599);
t2577 = cos(t2599);
t2558 = -t2574 * t2613 + t2577 * t2614;
t2521 = t2558 * t2595 - t2829;
t2524 = t2558 * t2593 + t2568;
t2605 = sin(qJ(2,1));
t2611 = cos(qJ(2,1));
t2814 = t2596 * t2611;
t2817 = t2596 * t2605;
t2610 = cos(qJ(3,1));
t2877 = pkin(2) * t2610;
t2484 = -(t2521 * t2605 + t2524 * t2814) * t2877 + (t2521 * t2611 - t2524 * t2817) * pkin(5);
t2590 = 0.1e1 / t2610;
t2604 = sin(qJ(3,1));
t2831 = t2590 * t2604;
t2803 = t2605 * t2610;
t2561 = pkin(2) * t2803 - pkin(5) * t2611;
t2818 = t2596 * t2604;
t2741 = pkin(2) * t2818 + t2561 * t2594;
t2898 = 0.1e1 / t2741;
t2759 = t2898 * t2831;
t2824 = t2594 * t2610;
t2493 = ((-t2558 * t2817 - t2611 * t2612) * t2593 + (t2558 * t2611 - t2605 * t2813) * t2595) * t2604 - t2524 * t2824;
t2847 = t2493 * t2898;
t2469 = -pkin(5) * t2484 * t2759 + (t2590 * t2615 + t2610 * t2616) * t2847;
t2796 = pkin(5) * t2847;
t2738 = t2604 * t2796;
t2857 = t2484 * t2898;
t2472 = (t2738 - t2857) * t2590;
t2773 = t2898 * t2847;
t2899 = 0.1e1 / t2741 ^ 2;
t2856 = t2484 * t2899;
t2460 = (t2469 * t2773 - t2472 * t2856) * t2590;
t2865 = t2460 * t2898;
t2855 = t2491 ^ 2 * t2895;
t2853 = t2492 ^ 2 * t2897;
t2490 = t2493 ^ 2;
t2851 = t2490 * t2899;
t2900 = t2898 * t2899;
t2581 = t2606 ^ 2;
t2583 = 0.1e1 / t2606 ^ 2;
t2617 = 0.1e1 / pkin(2);
t2842 = t2894 * t2617;
t2784 = t2482 * t2842;
t2676 = t2582 * t2594 * t2784;
t2755 = t2594 * t2809;
t2811 = t2600 * t2601;
t2756 = t2594 * t2811;
t2827 = t2594 * t2607;
t2843 = t2894 * t2600;
t2452 = (-(t2596 * t2470 + (pkin(2) * (t2596 * t2784 + t2827 * t2849) * t2581 - (t2482 * t2843 - t2798) * t2755) * t2582) * t2775 + (-t2607 * t2676 + (t2756 + (t2582 - t2606) * t2596) * t2849) * t2860) * t2583;
t2506 = -(-t2593 * t2601 + t2595 * t2816) * t2879 - pkin(5) * (t2593 * t2607 + t2595 * t2821);
t2893 = t2452 * t2506;
t2585 = t2608 ^ 2;
t2587 = 0.1e1 / t2608 ^ 2;
t2839 = t2896 * t2617;
t2783 = t2483 * t2839;
t2675 = t2586 * t2594 * t2783;
t2753 = t2594 * t2806;
t2808 = t2602 * t2603;
t2754 = t2594 * t2808;
t2825 = t2594 * t2609;
t2840 = t2896 * t2602;
t2453 = (-(t2596 * t2471 + (pkin(2) * (t2596 * t2783 + t2825 * t2848) * t2585 - (t2483 * t2840 - t2797) * t2753) * t2586) * t2774 + (-t2609 * t2675 + (t2754 + (t2586 - t2608) * t2596) * t2848) * t2858) * t2587;
t2507 = -(-t2593 * t2603 + t2595 * t2815) * t2878 - pkin(5) * (t2593 * t2609 + t2595 * t2819);
t2892 = t2453 * t2507;
t2589 = t2610 ^ 2;
t2591 = 0.1e1 / t2610 ^ 2;
t2836 = t2898 * t2617;
t2782 = t2484 * t2836;
t2674 = t2590 * t2594 * t2782;
t2751 = t2594 * t2803;
t2805 = t2604 * t2605;
t2752 = t2594 * t2805;
t2823 = t2594 * t2611;
t2454 = (-(t2596 * t2472 + (pkin(2) * (t2596 * t2782 + t2823 * t2847) * t2589 - (t2604 * t2857 - t2796) * t2751) * t2590) * t2773 + (-t2611 * t2674 + (t2752 + (t2590 - t2610) * t2596) * t2847) * t2856) * t2591;
t2508 = -(-t2593 * t2605 + t2595 * t2814) * t2877 - pkin(5) * (t2593 * t2611 + t2595 * t2817);
t2891 = t2454 * t2508;
t2890 = t2460 * t2605;
t2654 = -t2596 * t2805 - t2824;
t2804 = t2604 * t2611;
t2514 = t2654 * t2593 + t2595 * t2804;
t2889 = t2514 * t2577;
t2517 = -t2593 * t2804 + t2654 * t2595;
t2888 = t2517 * t2900;
t2485 = t2583 * t2855;
t2486 = t2587 * t2853;
t2487 = t2591 * t2851;
t2510 = (t2593 * t2815 + t2595 * t2603) * t2878 + (t2593 * t2819 - t2595 * t2609) * pkin(5);
t2655 = t2596 * t2808 + t2826;
t2807 = t2602 * t2609;
t2513 = t2655 * t2593 - t2595 * t2807;
t2695 = 0.2e1 * t2848 * t2858;
t2779 = t2896 * t2853;
t2832 = t2587 * t2602;
t2886 = (-t2510 * t2779 + t2513 * t2695) * t2832;
t2509 = (t2593 * t2816 + t2595 * t2601) * t2879 + (t2593 * t2821 - t2595 * t2607) * pkin(5);
t2656 = t2596 * t2811 + t2828;
t2810 = t2600 * t2607;
t2512 = t2656 * t2593 - t2595 * t2810;
t2696 = 0.2e1 * t2849 * t2860;
t2781 = t2894 * t2855;
t2834 = t2583 * t2600;
t2885 = (-t2509 * t2781 + t2512 * t2696) * t2834;
t2527 = t2894 * t2895;
t2765 = t2894 * t2842;
t2716 = t2491 * t2765;
t2455 = (-t2596 * t2467 * t2716 - (-t2600 * t2559 * t2676 + t2596 * (-t2582 * t2740 + t2606 * t2861)) * t2482 * t2765) * t2583;
t2699 = t2455 * t2764;
t2711 = t2509 * t2452 * t2842;
t2618 = 0.1e1 / pkin(2) ^ 2;
t2479 = t2482 ^ 2;
t2864 = t2479 * t2583;
t2788 = t2618 * t2864;
t2884 = t2512 * (t2527 * t2788 + t2699) + t2711 * t2835;
t2584 = t2582 / t2581;
t2722 = t2479 * t2527 * t2584 * t2600;
t2870 = t2455 * t2894;
t2883 = t2512 * (t2618 * t2722 - t2870) - t2711;
t2530 = t2896 * t2897;
t2763 = t2896 * t2839;
t2715 = t2492 * t2763;
t2456 = (-t2596 * t2468 * t2715 - (-t2602 * t2560 * t2675 + t2596 * (-t2586 * t2739 + t2608 * t2859)) * t2483 * t2763) * t2587;
t2698 = t2456 * t2762;
t2708 = t2510 * t2453 * t2839;
t2480 = t2483 ^ 2;
t2863 = t2480 * t2587;
t2787 = t2618 * t2863;
t2882 = t2513 * (t2530 * t2787 + t2698) + t2708 * t2833;
t2588 = t2586 / t2585;
t2720 = t2480 * t2530 * t2588 * t2602;
t2869 = t2456 * t2896;
t2881 = t2513 * (t2618 * t2720 - t2869) - t2708;
t2880 = pkin(2) * t2594;
t2876 = MDP(3) * t2594;
t2875 = MDP(4) * t2594;
t2874 = MDP(9) * t2617;
t2873 = t2452 * t2894;
t2872 = t2453 * t2896;
t2871 = t2454 * t2898;
t2761 = t2898 * t2836;
t2714 = t2493 * t2761;
t2457 = (-t2596 * t2469 * t2714 - (-t2604 * t2561 * t2674 + t2596 * (-t2590 * t2738 + t2610 * t2857)) * t2484 * t2761) * t2591;
t2868 = t2457 * t2898;
t2481 = t2484 ^ 2;
t2862 = t2481 * t2591;
t2549 = t2593 * t2817 - t2595 * t2611;
t2518 = t2549 * t2604 + t2593 * t2824;
t2846 = t2518 * t2898;
t2845 = t2518 * t2574;
t2844 = t2894 * t2582;
t2841 = t2896 * t2586;
t2838 = t2898 * t2574;
t2837 = t2898 * t2590;
t2830 = t2591 * t2604;
t2812 = t2596 * t2618;
t2451 = t2454 * t2823 + t2457 * t2596;
t2786 = t2618 * t2862;
t2719 = t2899 * t2786;
t2475 = t2487 + t2719;
t2649 = -0.2e1 * t2484 * t2611 * t2714;
t2718 = t2481 * t2899 * t2812;
t2802 = t2451 * t2610 - t2457 * t2752 + (-t2475 * t2803 + t2649 * t2830) * t2594 - t2718 * t2830;
t2801 = -t2451 * t2604 - t2457 * t2751 + (t2475 * t2805 + t2590 * t2649) * t2594 - t2590 * t2718;
t2800 = 0.2e1 * t2454 * t2604;
t2799 = 0.2e1 * t2484 * t2493;
t2795 = t2452 * t2844;
t2794 = t2452 * t2843;
t2793 = t2453 * t2841;
t2792 = t2453 * t2840;
t2791 = t2607 * t2867;
t2790 = t2609 * t2866;
t2789 = t2611 * t2865;
t2592 = t2590 / t2589;
t2785 = t2481 * t2592 * t2604;
t2780 = t2894 * t2485;
t2778 = t2896 * t2486;
t2777 = t2898 * t2851;
t2776 = t2898 * t2487;
t2772 = t2506 * t2844;
t2771 = t2507 * t2841;
t2770 = t2508 * t2837;
t2769 = t2509 * t2844;
t2768 = t2510 * t2841;
t2767 = t2517 * t2837;
t2766 = t2898 * t2845;
t2760 = t2577 * t2837;
t2758 = (t2486 - 0.2e1 * t2853) * t2841;
t2478 = t2487 - 0.2e1 * t2851;
t2757 = t2478 * t2837;
t2449 = t2452 * t2827 + t2455 * t2596;
t2473 = t2788 * t2895 + t2485;
t2653 = -0.2e1 * t2482 * t2607 * t2716;
t2723 = t2479 * t2895 * t2812;
t2750 = (t2449 * t2606 - t2455 * t2756 + (-t2473 * t2809 + t2653 * t2834) * t2594 - t2723 * t2834) * t2894;
t2749 = (-t2449 * t2600 - t2455 * t2755 + (t2473 * t2811 + t2582 * t2653) * t2594 - t2582 * t2723) * t2894;
t2450 = t2453 * t2825 + t2456 * t2596;
t2474 = t2787 * t2897 + t2486;
t2651 = -0.2e1 * t2483 * t2609 * t2715;
t2721 = t2480 * t2897 * t2812;
t2748 = (t2450 * t2608 - t2456 * t2754 + (-t2474 * t2806 + t2651 * t2832) * t2594 - t2721 * t2832) * t2896;
t2747 = (-t2450 * t2602 - t2456 * t2753 + (t2474 * t2808 + t2586 * t2651) * t2594 - t2586 * t2721) * t2896;
t2746 = t2802 * t2898;
t2745 = t2801 * t2898;
t2744 = t2898 * t2800;
t2737 = t2512 * t2795;
t2736 = t2512 * t2794;
t2735 = t2600 ^ 2 * t2795;
t2734 = t2513 * t2793;
t2733 = t2513 * t2792;
t2732 = t2602 ^ 2 * t2793;
t2731 = t2454 * t2767;
t2730 = t2458 * t2772;
t2729 = t2512 * t2791;
t2728 = t2458 * t2601 * t2844;
t2727 = t2459 * t2771;
t2726 = t2513 * t2790;
t2725 = t2459 * t2603 * t2841;
t2724 = t2460 * t2770;
t2717 = t2618 * t2785;
t2713 = t2572 * t2769;
t2712 = t2575 * t2769;
t2710 = t2573 * t2768;
t2709 = t2576 * t2768;
t2511 = (t2593 * t2814 + t2595 * t2605) * t2877 + t2549 * pkin(5);
t2707 = t2511 * t2574 * t2837;
t2706 = t2511 * t2760;
t2705 = t2511 * t2454 * t2836;
t2704 = t2514 * t2760;
t2515 = -t2593 * t2810 - t2656 * t2595;
t2703 = t2515 * t2791;
t2516 = -t2593 * t2807 - t2655 * t2595;
t2702 = t2516 * t2790;
t2701 = t2517 * t2789;
t2700 = t2590 * t2766;
t2697 = t2457 * t2759;
t2694 = t2799 * t2900;
t2693 = (0.2e1 * t2589 - 0.1e1) * t2592 * t2799;
t2692 = t2512 * t2735;
t2691 = t2513 * t2732;
t2690 = t2454 * t2704;
t2689 = t2454 * t2700;
t2688 = t2458 * t2713;
t2687 = t2458 * t2712;
t2686 = t2575 * t2729;
t2685 = t2512 * t2728;
t2684 = t2459 * t2710;
t2683 = t2459 * t2709;
t2682 = t2576 * t2726;
t2681 = t2513 * t2725;
t2680 = t2460 * t2707;
t2679 = t2460 * t2706;
t2678 = t2789 * t2889;
t2677 = t2460 * t2700;
t2673 = t2582 * t2703;
t2672 = t2586 * t2702;
t2671 = t2590 * t2701;
t2670 = t2460 * t2823 * t2845;
t2669 = t2572 * t2729;
t2668 = t2573 * t2726;
t2667 = -t2559 * t2596 + t2600 * t2880;
t2666 = -t2560 * t2596 + t2602 * t2880;
t2665 = -t2561 * t2596 + t2604 * t2880;
t2662 = t2705 * t2831;
t2661 = t2582 * t2669;
t2660 = t2586 * t2668;
t2659 = t2582 * t2686;
t2658 = t2586 * t2682;
t2657 = t2590 * t2678;
t2652 = (0.2e1 * t2581 - 0.1e1) * t2584 * t2696;
t2650 = (0.2e1 * t2585 - 0.1e1) * t2588 * t2695;
t2648 = t2693 * t2900;
t2647 = -t2601 * t2873 - t2607 * t2780;
t2646 = -t2601 * t2780 + t2607 * t2873;
t2645 = -t2603 * t2872 - t2609 * t2778;
t2644 = -t2603 * t2778 + t2609 * t2872;
t2643 = -t2605 * t2871 - t2611 * t2776;
t2642 = -t2605 * t2776 + t2611 * t2871;
t2476 = t2485 - 0.2e1 * t2855;
t2635 = t2476 * t2769 + t2512 * t2652;
t2634 = t2510 * t2758 + t2513 * t2650;
t2580 = t2604 ^ 2;
t2564 = pkin(5) * t2605 + t2611 * t2877;
t2563 = pkin(5) * t2603 + t2609 * t2878;
t2562 = pkin(5) * t2601 + t2607 * t2879;
t2555 = t2751 + t2818;
t2554 = t2596 * t2610 - t2752;
t2553 = t2753 + t2820;
t2552 = t2596 * t2608 - t2754;
t2551 = t2755 + t2822;
t2550 = t2596 * t2606 - t2756;
t2505 = t2564 * t2595 + t2665 * t2593;
t2504 = t2563 * t2595 + t2666 * t2593;
t2503 = t2562 * t2595 + t2667 * t2593;
t2502 = -t2564 * t2593 + t2665 * t2595;
t2501 = -t2563 * t2593 + t2666 * t2595;
t2500 = -t2562 * t2593 + t2667 * t2595;
t2499 = -t2502 * t2577 + t2574 * t2741;
t2498 = t2502 * t2574 + t2577 * t2741;
t2497 = -t2501 * t2576 + t2573 * t2742;
t2496 = t2501 * t2573 + t2576 * t2742;
t2495 = -t2500 * t2575 + t2572 * t2743;
t2494 = t2500 * t2572 + t2575 * t2743;
t1 = [(t2495 * t2867 + t2497 * t2866 + t2499 * t2865) * MDP(1) + (-t2575 * t2737 - t2576 * t2734 + t2690) * MDP(2) + (t2646 * t2495 + t2644 * t2497 + t2642 * t2499 + t2657 - t2658 - t2659) * t2876 + (t2647 * t2495 + t2645 * t2497 + t2643 * t2499 + t2575 * t2685 + t2576 * t2681 - t2704 * t2890) * t2875 + (-t2575 * t2692 - t2576 * t2691 + t2580 * t2690 + ((t2511 * t2777 + t2514 * t2694) * t2577 * t2830 - t2576 * t2886 - t2575 * t2885) * t2617) * MDP(5) + (-0.2e1 * t2575 * t2736 - 0.2e1 * t2576 * t2733 + t2744 * t2889 + ((-t2511 * t2757 + t2514 * t2648) * t2577 - t2634 * t2576 - t2635 * t2575) * t2617) * MDP(6) + ((-t2662 + (t2786 * t2900 + t2697) * t2514) * t2577 - t2882 * t2576 - t2884 * t2575) * MDP(7) + ((-t2705 + (-t2717 * t2900 + t2868) * t2514) * t2577 + t2881 * t2576 + t2883 * t2575) * MDP(8) + (-t2455 * t2712 - t2456 * t2709 - t2457 * t2706) * t2874 + (t2499 * t2746 + t2497 * t2748 + t2495 * t2750 + (-t2550 * t2687 - t2552 * t2683 - t2554 * t2679) * t2617 + (t2678 - t2682 - t2686) * t2594) * MDP(10) + (t2499 * t2745 + t2497 * t2747 + t2495 * t2749 + (t2551 * t2687 + t2553 * t2683 + t2555 * t2679) * t2617 + (t2600 * t2659 + t2602 * t2658 - t2604 * t2657) * t2594) * MDP(11); (t2494 * t2867 + t2496 * t2866 + t2498 * t2865) * MDP(1) + (t2572 * t2737 + t2573 * t2734 + t2689) * MDP(2) + (t2646 * t2494 + t2644 * t2496 + t2642 * t2498 + t2611 * t2677 + t2660 + t2661) * t2876 + (t2647 * t2494 + t2645 * t2496 + t2643 * t2498 - t2572 * t2685 - t2573 * t2681 - t2605 * t2677) * t2875 + (t2572 * t2692 + t2573 * t2691 + t2580 * t2689 + (t2573 * t2886 + t2572 * t2885 + (-t2490 * t2511 + t2518 * t2799) * t2899 * t2830 * t2838) * t2617) * MDP(5) + (0.2e1 * t2572 * t2736 + 0.2e1 * t2573 * t2733 + t2766 * t2800 + (t2634 * t2573 + t2635 * t2572 + (t2478 * t2511 * t2590 + t2518 * t2693 * t2899) * t2838) * t2617) * MDP(6) + ((t2662 + (t2457 * t2831 + t2719) * t2846) * t2574 + t2882 * t2573 + t2884 * t2572) * MDP(7) + ((t2705 + (-t2717 * t2899 + t2457) * t2846) * t2574 - t2881 * t2573 - t2883 * t2572) * MDP(8) + (t2455 * t2713 + t2456 * t2710 + t2457 * t2707) * t2874 + ((t2668 + t2669) * t2594 + t2496 * t2748 + t2494 * t2750 + (t2550 * t2688 + t2552 * t2684 + t2554 * t2680) * t2617 + (t2802 * t2498 + t2670) * t2898) * MDP(10) + ((-t2600 * t2661 - t2602 * t2660) * t2594 + t2496 * t2747 + t2494 * t2749 + (-t2551 * t2688 - t2553 * t2684 - t2555 * t2680) * t2617 + (t2801 * t2498 - t2670 * t2831) * t2898) * MDP(11); (t2503 * t2867 + t2504 * t2866 + t2505 * t2865) * MDP(1) + (t2515 * t2795 + t2516 * t2793 + t2731) * MDP(2) + (t2646 * t2503 + t2644 * t2504 + t2642 * t2505 + t2671 + t2672 + t2673) * t2876 + (t2647 * t2503 + t2645 * t2504 + t2643 * t2505 - t2515 * t2728 - t2516 * t2725 - t2767 * t2890) * t2875 + (t2515 * t2735 + t2516 * t2732 + t2580 * t2731 + ((-t2508 * t2777 + t2517 * t2694) * t2830 + (-t2507 * t2779 + t2516 * t2695) * t2832 + (-t2506 * t2781 + t2515 * t2696) * t2834) * t2617) * MDP(5) + (0.2e1 * t2515 * t2794 + 0.2e1 * t2516 * t2792 + t2517 * t2744 + (t2476 * t2772 + t2507 * t2758 + t2508 * t2757 + t2515 * t2652 + t2516 * t2650 + t2517 * t2648) * t2617) * MDP(6) + (t2515 * t2699 + t2516 * t2698 + t2517 * t2697 + (t2515 * t2527 * t2864 + t2516 * t2530 * t2863 + t2862 * t2888) * t2618 + (t2759 * t2891 + t2762 * t2892 + t2764 * t2893) * t2617) * MDP(7) + (t2515 * t2870 + t2516 * t2869 + t2517 * t2868 + (-t2515 * t2722 - t2516 * t2720 - t2785 * t2888) * t2618 + (t2891 * t2898 + t2892 * t2896 + t2893 * t2894) * t2617) * MDP(8) + (t2455 * t2772 + t2456 * t2771 + t2457 * t2770) * t2874 + (t2505 * t2746 + t2504 * t2748 + t2503 * t2750 + (t2550 * t2730 + t2552 * t2727 + t2554 * t2724) * t2617 + (t2701 + t2702 + t2703) * t2594) * MDP(10) + (t2505 * t2745 + t2504 * t2747 + t2503 * t2749 + (-t2551 * t2730 - t2553 * t2727 - t2555 * t2724) * t2617 + (-t2600 * t2673 - t2602 * t2672 - t2604 * t2671) * t2594) * MDP(11);];
taucX  = t1;
