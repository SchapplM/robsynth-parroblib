% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3PRRRR8V1G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G3A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G3A0_inertia_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:16:57
% EndTime: 2020-08-06 17:17:06
% DurationCPUTime: 9.19s
% Computational Cost: add. (5714->380), mult. (18558->839), div. (1596->14), fcn. (19769->22), ass. (0->357)
t2017 = sin(qJ(2,3));
t2023 = cos(qJ(2,3));
t2022 = cos(qJ(3,3));
t2265 = pkin(2) * t2022;
t1982 = pkin(5) * t2017 + t2023 * t2265;
t2009 = sin(pkin(6));
t2011 = cos(pkin(6));
t2207 = t2017 * t2022;
t1979 = pkin(2) * t2207 - pkin(5) * t2023;
t2012 = cos(pkin(3));
t2016 = sin(qJ(3,3));
t2010 = sin(pkin(3));
t2266 = pkin(2) * t2010;
t2099 = -t1979 * t2012 + t2016 * t2266;
t1927 = t1982 * t2011 + t2099 * t2009;
t2013 = legFrame(3,2);
t1994 = sin(t2013);
t1997 = cos(t2013);
t2219 = t2012 * t2016;
t2161 = pkin(2) * t2219 + t1979 * t2010;
t1921 = t1927 * t1997 + t1994 * t2161;
t2019 = sin(qJ(2,2));
t2025 = cos(qJ(2,2));
t2024 = cos(qJ(3,2));
t2264 = pkin(2) * t2024;
t1983 = pkin(5) * t2019 + t2025 * t2264;
t2204 = t2019 * t2024;
t1980 = pkin(2) * t2204 - pkin(5) * t2025;
t2018 = sin(qJ(3,2));
t2098 = -t1980 * t2012 + t2018 * t2266;
t1928 = t1983 * t2011 + t2098 * t2009;
t2014 = legFrame(2,2);
t1995 = sin(t2014);
t1998 = cos(t2014);
t2217 = t2012 * t2018;
t2160 = pkin(2) * t2217 + t1980 * t2010;
t1923 = t1928 * t1998 + t1995 * t2160;
t2021 = sin(qJ(2,1));
t2027 = cos(qJ(2,1));
t2026 = cos(qJ(3,1));
t2263 = pkin(2) * t2026;
t1984 = pkin(5) * t2021 + t2027 * t2263;
t2201 = t2021 * t2026;
t1981 = pkin(2) * t2201 - pkin(5) * t2027;
t2020 = sin(qJ(3,1));
t2097 = -t1981 * t2012 + t2020 * t2266;
t1929 = t1984 * t2011 + t2097 * t2009;
t2015 = legFrame(1,2);
t1996 = sin(t2015);
t1999 = cos(t2015);
t2215 = t2012 * t2020;
t2159 = pkin(2) * t2215 + t1981 * t2010;
t1925 = t1929 * t1999 + t1996 * t2159;
t2003 = 0.1e1 / t2022;
t2005 = 0.1e1 / t2024;
t2007 = 0.1e1 / t2026;
t2211 = t2012 * t2027;
t2214 = t2012 * t2021;
t1939 = (-t2009 * t2021 + t2011 * t2211) * t2263 + pkin(5) * (t2009 * t2027 + t2011 * t2214);
t1942 = (t2009 * t2211 + t2011 * t2021) * t2263 + (t2009 * t2214 - t2011 * t2027) * pkin(5);
t2203 = t2020 * t2021;
t2073 = t2010 * t2026 + t2012 * t2203;
t2202 = t2020 * t2027;
t1951 = t2073 * t2009 - t2011 * t2202;
t1954 = t2009 * t2202 + t2073 * t2011;
t2101 = t1939 * t1951 + t1942 * t1954;
t2291 = 0.1e1 / t2159 ^ 2;
t2232 = t2291 * t1999;
t2060 = t2101 * t2232;
t2212 = t2012 * t2025;
t2216 = t2012 * t2019;
t1938 = (-t2009 * t2019 + t2011 * t2212) * t2264 + pkin(5) * (t2009 * t2025 + t2011 * t2216);
t1941 = (t2009 * t2212 + t2011 * t2019) * t2264 + (t2009 * t2216 - t2011 * t2025) * pkin(5);
t2206 = t2018 * t2019;
t2074 = t2010 * t2024 + t2012 * t2206;
t2205 = t2018 * t2025;
t1950 = t2074 * t2009 - t2011 * t2205;
t1953 = t2009 * t2205 + t2074 * t2011;
t2102 = t1938 * t1950 + t1941 * t1953;
t2289 = 0.1e1 / t2160 ^ 2;
t2236 = t2289 * t1998;
t2062 = t2102 * t2236;
t2213 = t2012 * t2023;
t2218 = t2012 * t2017;
t1937 = pkin(5) * (t2009 * t2023 + t2011 * t2218) + (-t2009 * t2017 + t2011 * t2213) * t2265;
t1940 = (t2009 * t2213 + t2011 * t2017) * t2265 + (t2009 * t2218 - t2011 * t2023) * pkin(5);
t2209 = t2016 * t2017;
t2075 = t2010 * t2022 + t2012 * t2209;
t2208 = t2016 * t2023;
t1949 = t2075 * t2009 - t2011 * t2208;
t1952 = t2009 * t2208 + t2075 * t2011;
t2103 = t1937 * t1949 + t1940 * t1952;
t2287 = 0.1e1 / t2161 ^ 2;
t2239 = t2287 * t1997;
t2064 = t2103 * t2239;
t1932 = -t1984 * t2009 + t2097 * t2011;
t2245 = t1932 * t1954;
t2079 = -t1925 * t1951 + t1999 * t2245;
t1931 = -t1983 * t2009 + t2098 * t2011;
t2248 = t1931 * t1953;
t2081 = -t1923 * t1950 + t1998 * t2248;
t1930 = -t1982 * t2009 + t2099 * t2011;
t2251 = t1930 * t1952;
t2083 = -t1921 * t1949 + t1997 * t2251;
t2224 = t2007 * t2020;
t2169 = t2291 * t2224;
t2278 = t1951 * t1954;
t2107 = t2169 * t2278;
t2002 = t2020 ^ 2;
t2008 = 0.1e1 / t2026 ^ 2;
t2230 = t2291 * t2008;
t2144 = t2230 * t2278;
t2108 = t2002 * t2144;
t2225 = t2005 * t2018;
t2176 = t2289 * t2225;
t2279 = t1950 * t1953;
t2109 = t2176 * t2279;
t2001 = t2018 ^ 2;
t2006 = 0.1e1 / t2024 ^ 2;
t2234 = t2289 * t2006;
t2145 = t2234 * t2279;
t2110 = t2001 * t2145;
t2226 = t2003 * t2016;
t2182 = t2287 * t2226;
t2111 = t1949 * t1952 * t2182;
t2000 = t2016 ^ 2;
t2004 = 0.1e1 / t2022 ^ 2;
t2238 = t2287 * t2004;
t2195 = t1949 * t2238;
t2146 = t1952 * t2195;
t2112 = t2000 * t2146;
t2290 = 0.1e1 / t2159;
t2233 = t2290 * t2007;
t2174 = t2290 * t2233;
t2128 = t2027 * t2174;
t2129 = t2021 * t2174;
t2288 = 0.1e1 / t2160;
t2237 = t2288 * t2005;
t2181 = t2288 * t2237;
t2133 = t2025 * t2181;
t2134 = t2019 * t2181;
t2286 = 0.1e1 / t2161;
t2240 = t2286 * t2003;
t2188 = t2286 * t2240;
t2138 = t2023 * t2188;
t2139 = t2017 * t2188;
t2155 = t1939 * t1942 * t2230;
t2157 = t1938 * t1941 * t2234;
t2184 = t1997 * t2238;
t2243 = t1932 * t2291;
t2246 = t1931 * t2289;
t2249 = t1930 * t2287;
t2258 = MDP(9) / pkin(2) ^ 2;
t2028 = 0.1e1 / pkin(2);
t2259 = MDP(8) * t2028;
t2260 = MDP(7) * t2028;
t2261 = MDP(4) * t2010;
t2262 = MDP(3) * t2010;
t2267 = 2 * MDP(6);
t2270 = t2008 * t2020;
t2271 = t2006 * t2018;
t2272 = t2004 * t2016;
t2297 = t1937 * t1940;
t2298 = (t2079 * t2129 + t2081 * t2134 + t2083 * t2139) * t2261 + (-t2079 * t2128 - t2081 * t2133 - t2083 * t2138) * t2262 + (t1921 * t2249 + t1923 * t2246 + t1925 * t2243) * MDP(1) + (-t1997 * t2111 - t1998 * t2109 - t1999 * t2107) * t2267 + (-t1997 * t2112 - t1998 * t2110 - t1999 * t2108) * MDP(5) + (-t1997 * t2146 - t1998 * t2145 - t1999 * t2144) * MDP(2) + (-t1998 * t2157 - t1999 * t2155 - t2184 * t2297) * t2258 + (-t2003 * t2064 - t2005 * t2062 - t2007 * t2060) * t2259 + (-t2060 * t2270 - t2062 * t2271 - t2064 * t2272) * t2260;
t2164 = t2010 * t2208;
t2229 = (t2010 * t2207 + t2219) * t2028;
t2296 = t2240 * (t1937 * t2229 + t1952 * t2164);
t2167 = (-t2010 * t2209 + t2012 * t2022) * t2003 * t2028;
t2223 = t2010 * t2023;
t2191 = t1952 * t2223;
t2295 = t2286 * (t1937 * t2167 + t2191);
t1934 = t1937 ^ 2;
t1992 = t1998 ^ 2;
t2285 = 0.2e1 * t1992;
t1993 = t1999 ^ 2;
t2284 = 0.2e1 * t1993;
t2283 = t1938 * t1953;
t2282 = t1939 * t1954;
t2281 = t1941 * t1950;
t2280 = t1942 * t1951;
t1922 = -t1927 * t1994 + t1997 * t2161;
t2277 = t1952 * (t1921 * t1994 - t1922 * t1997);
t1924 = -t1928 * t1995 + t1998 * t2160;
t2276 = t1953 * (t1923 * t1995 - t1924 * t1998);
t1926 = -t1929 * t1996 + t1999 * t2159;
t2275 = t1954 * (t1925 * t1996 - t1926 * t1999);
t2166 = (-t2010 * t2206 + t2012 * t2024) * t2005 * t2028;
t2222 = t2010 * t2025;
t2190 = t1953 * t2222;
t2274 = t2288 * (t1938 * t2166 + t2190);
t2165 = (-t2010 * t2203 + t2012 * t2026) * t2007 * t2028;
t2221 = t2010 * t2027;
t2189 = t1954 * t2221;
t2273 = t2290 * (t1939 * t2165 + t2189);
t2162 = t2010 * t2202;
t2227 = (t2010 * t2201 + t2215) * t2028;
t2269 = (t1939 * t2227 + t1954 * t2162) * t2233;
t2163 = t2010 * t2205;
t2228 = (t2010 * t2204 + t2217) * t2028;
t2268 = (t1938 * t2228 + t1953 * t2163) * t2237;
t2257 = t1921 * t2286;
t2256 = t1922 * t2286;
t2255 = t1923 * t2288;
t2254 = t1924 * t2288;
t2253 = t1925 * t2290;
t2252 = t1926 * t2290;
t2250 = t1930 * t2286;
t2247 = t1931 * t2288;
t2244 = t1932 * t2290;
t2241 = t1952 * t2287;
t2235 = t2289 * t2005;
t2231 = t2291 * t2007;
t2220 = t2010 * t2028;
t2210 = t2012 * t2028;
t2200 = -0.2e1 * t1937;
t2199 = 0.2e1 * t2262;
t2198 = 0.2e1 * t2261;
t2197 = 0.2e1 * t2260;
t2196 = 0.2e1 * t2259;
t2194 = t1949 * t2223;
t2193 = t1950 * t2222;
t2192 = t1951 * t2221;
t1988 = t1994 ^ 2;
t2187 = t1988 * t2238;
t1991 = t1997 ^ 2;
t2186 = t1991 * t2238;
t2185 = t1994 * t2239;
t2183 = t2000 * t2238;
t1989 = t1995 ^ 2;
t2180 = t1989 * t2234;
t2179 = t1992 * t2234;
t2178 = t1995 * t2236;
t2177 = t2001 * t2234;
t2175 = t2018 * t2234;
t1990 = t1996 ^ 2;
t2173 = t1990 * t2230;
t2172 = t1993 * t2230;
t2171 = t1996 * t2232;
t2170 = t2002 * t2230;
t2168 = t2020 * t2230;
t2158 = t1937 * t1988 * t2241;
t2156 = t2235 * t2283;
t2154 = t2231 * t2282;
t1946 = t1952 ^ 2;
t2152 = t1946 * t2183;
t2151 = t1946 * t2182;
t1947 = t1953 ^ 2;
t2150 = t1947 * t2177;
t2149 = t1947 * t2176;
t1948 = t1954 ^ 2;
t2148 = t1948 * t2170;
t2147 = t1948 * t2169;
t2143 = t1952 * t2188;
t2141 = t1953 * t2181;
t2140 = t1954 * t2174;
t2137 = t2286 * t2017 * t2220;
t2136 = t2003 * t2185;
t2135 = t1994 * t2184;
t2132 = t2288 * t2019 * t2220;
t2131 = t2005 * t2178;
t2130 = t2006 * t2178;
t2127 = t2290 * t2021 * t2220;
t2126 = t2007 * t2171;
t2125 = t2008 * t2171;
t2124 = t1930 * t1949 * t2188;
t2123 = t1931 * t1950 * t2181;
t2122 = t1932 * t1951 * t2174;
t2121 = t1937 * t2137;
t2120 = t1937 * t2135;
t2119 = t2175 * t2283;
t2118 = t1938 * t2132;
t2117 = t2168 * t2282;
t2116 = t1939 * t2127;
t2115 = t1946 * t2135;
t2114 = t1947 * t2130;
t2113 = t1948 * t2125;
t2100 = t1991 * t2200 * t2241;
t2096 = t1921 * t1997 * t2143;
t2095 = t1922 * t1994 * t2143;
t2094 = t1923 * t1998 * t2141;
t2093 = t1924 * t1995 * t2141;
t2092 = t1925 * t1999 * t2140;
t2091 = t1926 * t1996 * t2140;
t2090 = t2131 * t2283;
t2089 = t2126 * t2282;
t2088 = t2137 * t2226;
t2087 = t2132 * t2225;
t2086 = t2127 * t2224;
t2085 = (-t2129 * t2275 - t2134 * t2276 - t2139 * t2277) * t2261 + (t2128 * t2275 + t2133 * t2276 + t2138 * t2277) * t2262 + (t1921 * t1922 * t2287 + t1923 * t1924 * t2289 + t1925 * t1926 * t2291) * MDP(1) + (-t1946 * t2016 * t2136 - t1947 * t2018 * t2131 - t1948 * t2020 * t2126) * t2267 + (-t2000 * t2115 - t2001 * t2114 - t2002 * t2113) * MDP(5) + (-t2113 - t2114 - t2115) * MDP(2);
t2082 = t1922 * t1949 + t1994 * t2251;
t2080 = t1924 * t1950 + t1995 * t2248;
t2078 = t1926 * t1951 + t1996 * t2245;
t2072 = t1952 * t2200 * t2185;
t2071 = t1937 * t2088;
t2070 = t1995 * t1998 * t2119;
t2069 = t1938 * t2087;
t2068 = t1996 * t1999 * t2117;
t2067 = t1939 * t2086;
t2066 = t2287 * t1994 * t2103;
t2063 = t2289 * t1995 * t2102;
t2061 = t2291 * t1996 * t2101;
t2055 = (t1922 * t2249 + t1924 * t2246 + t1926 * t2243) * MDP(1) + (t1994 * t2146 + t1995 * t2145 + t1996 * t2144) * MDP(2) + (t2078 * t2128 + t2080 * t2133 + t2082 * t2138) * t2262 + (-t2078 * t2129 - t2080 * t2134 - t2082 * t2139) * t2261 + (t1994 * t2112 + t1995 * t2110 + t1996 * t2108) * MDP(5) + (t1994 * t2111 + t1995 * t2109 + t1996 * t2107) * t2267 + (t2061 * t2270 + t2063 * t2271 + t2066 * t2272) * t2260 + (t2003 * t2066 + t2005 * t2063 + t2007 * t2061) * t2259 + (t1994 * t2238 * t2297 + t1995 * t2157 + t1996 * t2155) * t2258;
t2054 = (t1940 * t2167 + t2194) * t2286;
t2053 = (t1941 * t2166 + t2193) * t2288;
t2052 = (t1942 * t2165 + t2192) * t2290;
t2051 = (t1937 * t2210 + t2191) * t2240;
t2050 = (t1938 * t2210 + t2190) * t2237;
t2049 = (t1939 * t2210 + t2189) * t2233;
t2048 = t1997 * t2295;
t2047 = t1994 * t2295;
t2046 = t1998 * t2274;
t2045 = t1995 * t2274;
t2044 = t1999 * t2273;
t2043 = t1996 * t2273;
t2042 = (-t1940 * t2229 - t1949 * t2164) * t2240;
t2041 = (-t1941 * t2228 - t1950 * t2163) * t2237;
t2040 = (-t1942 * t2227 - t1951 * t2162) * t2233;
t1935 = t1938 ^ 2;
t1936 = t1939 ^ 2;
t2039 = -t1935 * t2130 - t1936 * t2125;
t2037 = t1997 * t2296;
t2036 = t1994 * t2296;
t2035 = t1995 * t2268;
t2034 = t1998 * t2268;
t2033 = t1996 * t2269;
t2032 = t1999 * t2269;
t1945 = t1951 ^ 2;
t1944 = t1950 ^ 2;
t1943 = t1949 ^ 2;
t1920 = (t1942 * t2210 + t2192) * t2233;
t1919 = (t1941 * t2210 + t2193) * t2237;
t1918 = (t1940 * t2210 + t2194) * t2240;
t1917 = t1999 * t2049;
t1916 = t1996 * t2049;
t1915 = t1998 * t2050;
t1914 = t1995 * t2050;
t1913 = t1997 * t2051;
t1912 = t1994 * t2051;
t1910 = -t1920 * t2020 - t1942 * t2127;
t1909 = -t1919 * t2018 - t1941 * t2132;
t1908 = -t1918 * t2016 - t1940 * t2137;
t1905 = t1920 * t2026 - t1942 * t2086;
t1904 = t1919 * t2024 - t1941 * t2087;
t1903 = t1918 * t2022 - t1940 * t2088;
t1902 = t1917 * t2020 + t1999 * t2116;
t1901 = -t1916 * t2020 - t1996 * t2116;
t1900 = t1915 * t2018 + t1998 * t2118;
t1899 = -t1914 * t2018 - t1995 * t2118;
t1898 = t1913 * t2016 + t1997 * t2121;
t1897 = -t1912 * t2016 - t1994 * t2121;
t1896 = -t1917 * t2026 + t1999 * t2067;
t1895 = t1916 * t2026 - t1996 * t2067;
t1894 = -t1915 * t2024 + t1998 * t2069;
t1893 = t1914 * t2024 - t1995 * t2069;
t1892 = -t1913 * t2022 + t1997 * t2071;
t1891 = t1912 * t2022 - t1994 * t2071;
t1 = [(t1921 ^ 2 * t2287 + t1923 ^ 2 * t2289 + t1925 ^ 2 * t2291) * MDP(1) + (t1946 * t2186 + t1947 * t2179 + t1948 * t2172) * MDP(2) + (-t2023 * t2096 - t2025 * t2094 - t2027 * t2092) * t2199 + (t2017 * t2096 + t2019 * t2094 + t2021 * t2092) * t2198 + (t1991 * t2152 + t1992 * t2150 + t1993 * t2148) * MDP(5) + (t1991 * t2151 + t1992 * t2149 + t1993 * t2147) * t2267 + (-t2100 * t2272 + t2117 * t2284 + t2119 * t2285) * t2260 + (-t2003 * t2100 + t2154 * t2284 + t2156 * t2285) * t2259 + (t1934 * t2186 + t1935 * t2179 + t1936 * t2172) * t2258 + ((t1896 - t2044) * t2253 + (t1894 - t2046) * t2255 + (t1892 - t2048) * t2257) * MDP(10) + ((t1902 + t2032) * t2253 + (t1900 + t2034) * t2255 + (t1898 + t2037) * t2257) * MDP(11) + MDP(12); (t2072 * t2272 - 0.2e1 * t2068 - 0.2e1 * t2070) * t2260 + (t2003 * t2072 - 0.2e1 * t2089 - 0.2e1 * t2090) * t2259 + (-t1937 * t2120 + t2039) * t2258 + ((t1925 * t1895 - t1926 * t2044) * t2290 + (t1923 * t1893 - t1924 * t2046) * t2288 + (t1921 * t1891 - t1922 * t2048) * t2286) * MDP(10) + ((t1925 * t1901 + t1926 * t2032) * t2290 + (t1923 * t1899 + t1924 * t2034) * t2288 + (t1921 * t1897 + t1922 * t2037) * t2286) * MDP(11) + t2085; ((t1925 * t1905 - t1932 * t2044) * t2290 + (t1923 * t1904 - t1931 * t2046) * t2288 + (t1921 * t1903 - t1930 * t2048) * t2286) * MDP(10) + ((t1925 * t1910 + t1932 * t2032) * t2290 + (t1923 * t1909 + t1931 * t2034) * t2288 + (t1921 * t1908 + t1930 * t2037) * t2286) * MDP(11) + t2298; (-t1952 * t2016 * t2120 - t2068 - t2070) * t2197 + (-t1937 * t1952 * t2136 - t2089 - t2090) * t2196 + (-t1934 * t2135 + t2039) * t2258 + ((t1926 * t1896 + t1925 * t2043) * t2290 + (t1924 * t1894 + t1923 * t2045) * t2288 + (t1922 * t1892 + t1921 * t2047) * t2286) * MDP(10) + ((t1926 * t1902 - t1925 * t2033) * t2290 + (t1924 * t1900 - t1923 * t2035) * t2288 + (t1922 * t1898 - t1921 * t2036) * t2286) * MDP(11) + t2085; (t1922 ^ 2 * t2287 + t1924 ^ 2 * t2289 + t1926 ^ 2 * t2291) * MDP(1) + (t1946 * t2187 + t1947 * t2180 + t1948 * t2173) * MDP(2) + (t2023 * t2095 + t2025 * t2093 + t2027 * t2091) * t2199 + (-t2017 * t2095 - t2019 * t2093 - t2021 * t2091) * t2198 + (t1988 * t2152 + t1989 * t2150 + t1990 * t2148) * MDP(5) + (t1988 * t2151 + t1989 * t2149 + t1990 * t2147) * t2267 + (t1989 * t2119 + t1990 * t2117 + t2158 * t2272) * t2197 + (t1989 * t2156 + t1990 * t2154 + t2003 * t2158) * t2196 + (t1934 * t2187 + t1935 * t2180 + t1936 * t2173) * t2258 + ((t1895 + t2043) * t2252 + (t1893 + t2045) * t2254 + (t1891 + t2047) * t2256) * MDP(10) + ((t1901 - t2033) * t2252 + (t1899 - t2035) * t2254 + (t1897 - t2036) * t2256) * MDP(11) + MDP(12); ((t1926 * t1905 + t1932 * t2043) * t2290 + (t1924 * t1904 + t1931 * t2045) * t2288 + (t1922 * t1903 + t1930 * t2047) * t2286) * MDP(10) + ((t1926 * t1910 - t1932 * t2033) * t2290 + (t1924 * t1909 - t1931 * t2035) * t2288 + (t1922 * t1908 - t1930 * t2036) * t2286) * MDP(11) + t2055; ((t1932 * t1896 + t1925 * t2052) * t2290 + (t1931 * t1894 + t1923 * t2053) * t2288 + (t1930 * t1892 + t1921 * t2054) * t2286) * MDP(10) + ((t1932 * t1902 + t1925 * t2040) * t2290 + (t1931 * t1900 + t1923 * t2041) * t2288 + (t1930 * t1898 + t1921 * t2042) * t2286) * MDP(11) + t2298; ((t1932 * t1895 + t1926 * t2052) * t2290 + (t1931 * t1893 + t1924 * t2053) * t2288 + (t1930 * t1891 + t1922 * t2054) * t2286) * MDP(10) + ((t1932 * t1901 + t1926 * t2040) * t2290 + (t1931 * t1899 + t1924 * t2041) * t2288 + (t1930 * t1897 + t1922 * t2042) * t2286) * MDP(11) + t2055; (t1930 ^ 2 * t2287 + t1931 ^ 2 * t2289 + t1932 ^ 2 * t2291) * MDP(1) + (t1943 * t2238 + t1944 * t2234 + t1945 * t2230) * MDP(2) + (t2023 * t2124 + t2025 * t2123 + t2027 * t2122) * t2199 + (-t2017 * t2124 - t2019 * t2123 - t2021 * t2122) * t2198 + (t1943 * t2183 + t1944 * t2177 + t1945 * t2170) * MDP(5) + (t1943 * t2182 + t1944 * t2176 + t1945 * t2169) * t2267 + (t1940 * t2016 * t2195 + t2168 * t2280 + t2175 * t2281) * t2197 + (t1940 * t1949 * t2003 * t2287 + t2231 * t2280 + t2235 * t2281) * t2196 + (t1940 ^ 2 * t2238 + t1941 ^ 2 * t2234 + t1942 ^ 2 * t2230) * t2258 + ((t1905 + t2052) * t2244 + (t1904 + t2053) * t2247 + (t1903 + t2054) * t2250) * MDP(10) + ((t1910 + t2040) * t2244 + (t1909 + t2041) * t2247 + (t1908 + t2042) * t2250) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
