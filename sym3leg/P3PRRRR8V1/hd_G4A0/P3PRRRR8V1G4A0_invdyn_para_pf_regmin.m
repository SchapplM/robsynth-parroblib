% Calculate minimal parameter regressor of inverse dynamics forces for
% P3PRRRR8V1G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [3x12]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:27
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P3PRRRR8V1G4A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:25:33
% EndTime: 2020-08-06 17:25:54
% DurationCPUTime: 20.75s
% Computational Cost: add. (102060->600), mult. (261774->1213), div. (6831->20), fcn. (264252->34), ass. (0->478)
t296 = legFrame(3,2);
t274 = sin(t296);
t277 = cos(t296);
t308 = cos(qJ(3,3));
t280 = 0.1e1 / t308;
t299 = xDDP(3);
t300 = xDDP(2);
t301 = xDDP(1);
t302 = sin(qJ(3,3));
t309 = cos(qJ(2,3));
t303 = sin(qJ(2,3));
t455 = t303 * t308;
t247 = pkin(2) * t455 - t309 * pkin(5);
t287 = sin(pkin(3));
t289 = cos(pkin(3));
t471 = t289 * t302;
t211 = pkin(2) * t471 + t247 * t287;
t205 = 0.1e1 / t211;
t293 = legFrame(3,1);
t265 = sin(t293);
t271 = cos(t293);
t314 = xDP(3);
t315 = xDP(2);
t335 = t265 * t315 - t271 * t314;
t316 = xDP(1);
t480 = t277 * t316;
t181 = t335 * t274 + t480;
t226 = t265 * t314 + t271 * t315;
t286 = sin(pkin(6));
t288 = cos(pkin(6));
t145 = t181 * t288 + t286 * t226;
t290 = legFrame(3,3);
t262 = sin(t290);
t268 = cos(t290);
t341 = t286 * t181 - t226 * t288;
t121 = t145 * t268 - t341 * t262;
t461 = t289 * t315;
t382 = t303 * t461;
t462 = t289 * t314;
t383 = t303 * t462;
t443 = t309 * t315;
t444 = t309 * t314;
t460 = t289 * t316;
t139 = (t274 * t383 + t443) * t271 + (-t274 * t382 + t444) * t265 - t303 * t277 * t460;
t142 = (-t274 * t444 + t382) * t271 + (t274 * t443 + t383) * t265 + t309 * t480;
t446 = t308 * t287;
t82 = ((t139 * t288 - t286 * t142) * t268 - (t286 * t139 + t142 * t288) * t262) * t302 - t121 * t446;
t525 = t205 * t82;
t434 = pkin(5) * t525;
t374 = t302 * t434;
t388 = t303 * t446;
t233 = t388 + t471;
t474 = t287 * t309;
t199 = t233 * pkin(2) - pkin(5) * t474;
t549 = 0.1e1 / t199;
t124 = t262 * t145 + t341 * t268;
t465 = t289 * t309;
t470 = t289 * t303;
t546 = pkin(2) * t308;
t76 = -(t121 * t465 - t303 * t124) * t546 - (t121 * t470 + t309 * t124) * pkin(5);
t530 = t549 * t76;
t326 = t374 - t530;
t431 = t549 * t530;
t214 = t262 * t288 + t268 * t286;
t217 = -t262 * t286 + t268 * t288;
t445 = t308 * t309;
t543 = pkin(5) * t303;
t250 = pkin(2) * t445 + t543;
t458 = t302 * t287;
t489 = t247 * t289;
t329 = pkin(2) * t458 - t489;
t127 = (t329 * t214 + t217 * t250) * t277 + t274 * t211;
t510 = t127 * t205;
t172 = t250 * t288 + t329 * t286;
t175 = -t286 * t250 + t329 * t288;
t112 = -t277 * t211 + (t172 * t268 + t175 * t262) * t274;
t130 = -t172 * t262 + t175 * t268;
t92 = -t112 * t271 - t265 * t130;
t523 = t205 * t92;
t91 = t112 * t265 - t271 * t130;
t524 = t205 * t91;
t492 = t205 * t280;
t550 = t82 * t492 * t549;
t553 = -g(2) * t265 + g(3) * t271;
t317 = pkin(5) ^ 2;
t318 = pkin(2) ^ 2;
t477 = t280 * t302;
t397 = t549 * t477;
t61 = -pkin(5) * t76 * t397 + (t280 * t317 + t308 * t318) * t525;
t52 = t326 * t280 ^ 2 * t431 + t274 * g(1) + t553 * t277 - t299 * t523 - t300 * t524 - t301 * t510 - t61 * t550;
t297 = legFrame(2,2);
t275 = sin(t297);
t278 = cos(t297);
t310 = cos(qJ(3,2));
t282 = 0.1e1 / t310;
t304 = sin(qJ(3,2));
t311 = cos(qJ(2,2));
t305 = sin(qJ(2,2));
t451 = t305 * t310;
t248 = pkin(2) * t451 - t311 * pkin(5);
t469 = t289 * t304;
t212 = pkin(2) * t469 + t248 * t287;
t207 = 0.1e1 / t212;
t294 = legFrame(2,1);
t266 = sin(t294);
t272 = cos(t294);
t334 = t266 * t315 - t272 * t314;
t479 = t278 * t316;
t182 = t334 * t275 + t479;
t227 = t266 * t314 + t272 * t315;
t146 = t182 * t288 + t286 * t227;
t291 = legFrame(2,3);
t263 = sin(t291);
t269 = cos(t291);
t340 = t286 * t182 - t227 * t288;
t122 = t146 * t269 - t340 * t263;
t380 = t305 * t461;
t381 = t305 * t462;
t439 = t311 * t315;
t440 = t311 * t314;
t140 = (t275 * t381 + t439) * t272 + (-t275 * t380 + t440) * t266 - t305 * t278 * t460;
t143 = (-t275 * t440 + t380) * t272 + (t275 * t439 + t381) * t266 + t311 * t479;
t442 = t310 * t287;
t83 = ((t140 * t288 - t286 * t143) * t269 - (t286 * t140 + t143 * t288) * t263) * t304 - t122 * t442;
t522 = t207 * t83;
t433 = pkin(5) * t522;
t373 = t304 * t433;
t386 = t305 * t442;
t235 = t386 + t469;
t473 = t287 * t311;
t200 = t235 * pkin(2) - pkin(5) * t473;
t548 = 0.1e1 / t200;
t125 = t263 * t146 + t340 * t269;
t464 = t289 * t311;
t468 = t289 * t305;
t545 = pkin(2) * t310;
t77 = -(t122 * t464 - t305 * t125) * t545 - (t122 * t468 + t311 * t125) * pkin(5);
t528 = t548 * t77;
t325 = t373 - t528;
t427 = t548 * t528;
t215 = t263 * t288 + t269 * t286;
t218 = -t263 * t286 + t269 * t288;
t441 = t310 * t311;
t542 = pkin(5) * t305;
t251 = pkin(2) * t441 + t542;
t454 = t304 * t287;
t488 = t248 * t289;
t328 = pkin(2) * t454 - t488;
t128 = (t328 * t215 + t218 * t251) * t278 + t275 * t212;
t509 = t128 * t207;
t173 = t251 * t288 + t328 * t286;
t176 = -t286 * t251 + t328 * t288;
t113 = -t278 * t212 + (t173 * t269 + t176 * t263) * t275;
t131 = -t173 * t263 + t176 * t269;
t94 = -t113 * t272 - t266 * t131;
t520 = t207 * t94;
t93 = t113 * t266 - t272 * t131;
t521 = t207 * t93;
t491 = t207 * t282;
t551 = t83 * t491 * t548;
t554 = -g(2) * t266 + g(3) * t272;
t476 = t282 * t304;
t394 = t548 * t476;
t62 = -pkin(5) * t77 * t394 + (t282 * t317 + t310 * t318) * t522;
t53 = t325 * t282 ^ 2 * t427 + t275 * g(1) + t554 * t278 - t299 * t520 - t300 * t521 - t301 * t509 - t62 * t551;
t298 = legFrame(1,2);
t276 = sin(t298);
t279 = cos(t298);
t312 = cos(qJ(3,1));
t284 = 0.1e1 / t312;
t306 = sin(qJ(3,1));
t313 = cos(qJ(2,1));
t307 = sin(qJ(2,1));
t447 = t307 * t312;
t249 = pkin(2) * t447 - t313 * pkin(5);
t467 = t289 * t306;
t213 = pkin(2) * t467 + t249 * t287;
t209 = 0.1e1 / t213;
t295 = legFrame(1,1);
t267 = sin(t295);
t273 = cos(t295);
t333 = t267 * t315 - t273 * t314;
t478 = t279 * t316;
t183 = t333 * t276 + t478;
t228 = t267 * t314 + t273 * t315;
t147 = t183 * t288 + t286 * t228;
t292 = legFrame(1,3);
t264 = sin(t292);
t270 = cos(t292);
t339 = t286 * t183 - t228 * t288;
t123 = t147 * t270 - t339 * t264;
t378 = t307 * t461;
t379 = t307 * t462;
t435 = t313 * t315;
t436 = t313 * t314;
t141 = (t276 * t379 + t435) * t273 + (-t276 * t378 + t436) * t267 - t307 * t279 * t460;
t144 = (-t276 * t436 + t378) * t273 + (t276 * t435 + t379) * t267 + t313 * t478;
t438 = t312 * t287;
t84 = ((t141 * t288 - t286 * t144) * t270 - (t286 * t141 + t144 * t288) * t264) * t306 - t123 * t438;
t519 = t209 * t84;
t432 = pkin(5) * t519;
t372 = t306 * t432;
t384 = t307 * t438;
t237 = t384 + t467;
t472 = t287 * t313;
t201 = t237 * pkin(2) - pkin(5) * t472;
t547 = 0.1e1 / t201;
t126 = t264 * t147 + t339 * t270;
t463 = t289 * t313;
t466 = t289 * t307;
t544 = pkin(2) * t312;
t78 = -(t123 * t463 - t307 * t126) * t544 - (t123 * t466 + t313 * t126) * pkin(5);
t526 = t547 * t78;
t324 = t372 - t526;
t424 = t547 * t526;
t216 = t264 * t288 + t270 * t286;
t219 = -t264 * t286 + t270 * t288;
t437 = t312 * t313;
t541 = pkin(5) * t307;
t252 = pkin(2) * t437 + t541;
t450 = t306 * t287;
t487 = t249 * t289;
t327 = pkin(2) * t450 - t487;
t129 = (t327 * t216 + t219 * t252) * t279 + t276 * t213;
t508 = t129 * t209;
t174 = t252 * t288 + t327 * t286;
t177 = -t286 * t252 + t327 * t288;
t114 = -t279 * t213 + (t174 * t270 + t177 * t264) * t276;
t132 = -t174 * t264 + t177 * t270;
t96 = -t114 * t273 - t267 * t132;
t517 = t209 * t96;
t95 = t114 * t267 - t273 * t132;
t518 = t209 * t95;
t490 = t209 * t284;
t552 = t84 * t490 * t547;
t555 = -g(2) * t267 + g(3) * t273;
t475 = t284 * t306;
t391 = t547 * t475;
t63 = -pkin(5) * t78 * t391 + (t284 * t317 + t312 * t318) * t519;
t54 = t324 * t284 ^ 2 * t424 + t276 * g(1) + t555 * t279 - t299 * t517 - t300 * t518 - t301 * t508 - t63 * t552;
t321 = t308 ^ 2;
t281 = 0.1e1 / t321;
t319 = 0.1e1 / pkin(2);
t499 = t549 * t319;
t396 = t280 * t499;
t346 = t287 * t76 * t396;
t221 = t286 * t309 + t288 * t470;
t224 = -t286 * t470 + t288 * t309;
t178 = t221 * t268 + t262 * t224;
t504 = (t178 * t302 + t217 * t446) * t277;
t401 = t280 * t504;
t356 = t205 * t401;
t456 = t303 * t287;
t389 = t302 * t456;
t486 = t265 * t274;
t154 = t214 * t271 + t217 * t486;
t337 = t262 * t221 - t224 * t268;
t106 = (-t178 * t486 - t337 * t271) * t302 - t154 * t446;
t407 = t106 * t492;
t483 = t271 * t274;
t149 = -t265 * t214 + t217 * t483;
t103 = (t178 * t483 - t337 * t265) * t302 + t149 * t446;
t410 = t103 * t492;
t459 = t289 * t319;
t500 = t549 * t302;
t28 = t299 * t410 + t300 * t407 - t301 * t356 + (-(pkin(2) * (t459 * t530 + t474 * t525) * t321 - (t76 * t500 - t434) * t388 + t289 * t326) * t550 - (t309 * t346 + (-t389 + (-t280 + t308) * t289) * t525) * t431) * t281;
t531 = t549 * t28;
t322 = t310 ^ 2;
t283 = 0.1e1 / t322;
t496 = t548 * t319;
t393 = t282 * t496;
t344 = t287 * t77 * t393;
t222 = t286 * t311 + t288 * t468;
t225 = -t286 * t468 + t288 * t311;
t179 = t222 * t269 + t263 * t225;
t503 = (t179 * t304 + t218 * t442) * t278;
t400 = t282 * t503;
t355 = t207 * t400;
t452 = t305 * t287;
t387 = t304 * t452;
t485 = t266 * t275;
t155 = t215 * t272 + t218 * t485;
t336 = t263 * t222 - t225 * t269;
t107 = (-t179 * t485 - t336 * t272) * t304 - t155 * t442;
t406 = t107 * t491;
t482 = t272 * t275;
t151 = -t266 * t215 + t218 * t482;
t104 = (t179 * t482 - t336 * t266) * t304 + t151 * t442;
t409 = t104 * t491;
t497 = t548 * t304;
t29 = t299 * t409 + t300 * t406 - t301 * t355 + (-(pkin(2) * (t459 * t528 + t473 * t522) * t322 - (t77 * t497 - t433) * t386 + t289 * t325) * t551 - (t311 * t344 + (-t387 + (-t282 + t310) * t289) * t522) * t427) * t283;
t529 = t548 * t29;
t323 = t312 ^ 2;
t285 = 0.1e1 / t323;
t493 = t547 * t319;
t390 = t284 * t493;
t342 = t287 * t78 * t390;
t220 = t286 * t466 - t288 * t313;
t223 = t286 * t313 + t288 * t466;
t180 = -t264 * t220 + t223 * t270;
t502 = (t180 * t306 + t219 * t438) * t279;
t399 = t284 * t502;
t354 = t209 * t399;
t448 = t307 * t287;
t385 = t306 * t448;
t484 = t267 * t276;
t156 = t216 * t273 + t219 * t484;
t338 = t220 * t270 + t264 * t223;
t108 = (-t180 * t484 - t338 * t273) * t306 - t156 * t438;
t405 = t108 * t490;
t481 = t273 * t276;
t153 = -t267 * t216 + t219 * t481;
t105 = (t180 * t481 - t338 * t267) * t306 + t153 * t438;
t408 = t105 * t490;
t494 = t547 * t306;
t30 = t299 * t408 + t300 * t405 - t301 * t354 + (-(pkin(2) * (t459 * t526 + t472 * t519) * t323 - (t78 * t494 - t432) * t384 + t289 * t324) * t552 - (t313 * t342 + (-t385 + (-t284 + t312) * t289) * t519) * t424) * t285;
t527 = t547 * t30;
t516 = t28 * t302;
t515 = t29 * t304;
t514 = t30 * t306;
t513 = t82 ^ 2 / t211 ^ 2;
t512 = t83 ^ 2 / t212 ^ 2;
t511 = t84 ^ 2 / t213 ^ 2;
t507 = ((-t303 * t214 + t217 * t465) * t546 + pkin(5) * (t309 * t214 + t217 * t470)) * t277;
t506 = ((-t305 * t215 + t218 * t464) * t545 + pkin(5) * (t311 * t215 + t218 * t468)) * t278;
t505 = ((-t307 * t216 + t219 * t463) * t544 + pkin(5) * (t313 * t216 + t219 * t466)) * t279;
t501 = t549 * t280;
t498 = t548 * t282;
t495 = t547 * t284;
t457 = t302 * t309;
t453 = t304 * t311;
t449 = t306 * t313;
t148 = t214 * t483 + t265 * t217;
t97 = (-t303 * t148 + t149 * t465) * t546 + pkin(5) * (t309 * t148 + t149 * t470);
t430 = t97 * t501;
t157 = t214 * t486 - t217 * t271;
t98 = -(t154 * t465 - t157 * t303) * t546 - pkin(5) * (t154 * t470 + t309 * t157);
t429 = t98 * t501;
t320 = 0.1e1 / pkin(2) ^ 2;
t428 = 0.1e1 / t199 ^ 2 * t320 * t76 ^ 2;
t150 = t215 * t482 + t266 * t218;
t99 = (-t305 * t150 + t151 * t464) * t545 + pkin(5) * (t311 * t150 + t151 * t468);
t426 = t99 * t498;
t425 = 0.1e1 / t200 ^ 2 * t320 * t77 ^ 2;
t423 = 0.1e1 / t201 ^ 2 * t320 * t78 ^ 2;
t241 = t271 * g(2) + t265 * g(3);
t371 = t277 * g(1) - t274 * t553;
t160 = t286 * t241 + t288 * t371;
t163 = -t241 * t288 + t286 * t371;
t43 = (-t287 * t52 + (t160 * t262 + t163 * t268) * t289) * t309 + t303 * (t160 * t268 - t163 * t262);
t419 = t43 * t477;
t242 = t272 * g(2) + t266 * g(3);
t370 = t278 * g(1) - t275 * t554;
t161 = t286 * t242 + t288 * t370;
t164 = -t242 * t288 + t286 * t370;
t44 = (-t287 * t53 + (t161 * t263 + t164 * t269) * t289) * t311 + t305 * (t161 * t269 - t164 * t263);
t418 = t44 * t476;
t243 = t273 * g(2) + t267 * g(3);
t369 = t279 * g(1) - t276 * t555;
t162 = t286 * t243 + t288 * t369;
t165 = -t243 * t288 + t286 * t369;
t45 = (-t287 * t54 + (t162 * t264 + t165 * t270) * t289) * t313 + t307 * (t162 * t270 - t165 * t264);
t417 = t45 * t475;
t416 = t281 * t513;
t415 = t283 * t512;
t414 = t285 * t511;
t158 = t215 * t485 - t218 * t272;
t100 = -(t155 * t464 - t158 * t305) * t545 - pkin(5) * (t155 * t468 + t311 * t158);
t413 = t100 * t498;
t152 = t216 * t481 + t267 * t219;
t101 = (-t307 * t152 + t153 * t463) * t544 + pkin(5) * (t313 * t152 + t153 * t466);
t412 = t101 * t495;
t159 = t216 * t484 - t219 * t273;
t102 = -(t156 * t463 - t159 * t307) * t544 - pkin(5) * (t156 * t466 + t313 * t159);
t411 = t102 * t495;
t404 = t549 * t507;
t403 = t548 * t506;
t402 = t547 * t505;
t398 = t205 * t499;
t395 = t207 * t496;
t392 = t209 * t493;
t25 = t309 * t28;
t377 = (t428 + t513) * t281 * t303 - t25;
t26 = t311 * t29;
t376 = (t425 + t512) * t283 * t305 - t26;
t27 = t313 * t30;
t375 = (t423 + t511) * t285 * t307 - t27;
t368 = t76 * t398;
t367 = t82 * t398;
t366 = t28 * t397;
t365 = t77 * t395;
t364 = t83 * t395;
t363 = t29 * t394;
t362 = t78 * t392;
t361 = t84 * t392;
t360 = t30 * t391;
t359 = t280 * t404;
t358 = t282 * t403;
t357 = t284 * t402;
t115 = t226 * t543 - t181 * t489 + (t181 * t458 + t226 * t445) * pkin(2);
t118 = t181 * t543 + t226 * t489 + (t181 * t445 - t226 * t458) * pkin(2);
t353 = ((t286 * t115 + t118 * t288) * t268 + (t115 * t288 - t286 * t118) * t262 + (t274 * t316 - t335 * t277) * t211) * t368;
t352 = t76 * t367;
t116 = t227 * t542 - t182 * t488 + (t182 * t454 + t227 * t441) * pkin(2);
t119 = t182 * t542 + t227 * t488 + (t182 * t441 - t227 * t454) * pkin(2);
t351 = ((t286 * t116 + t119 * t288) * t269 + (t116 * t288 - t286 * t119) * t263 + (t275 * t316 - t334 * t278) * t212) * t365;
t350 = t77 * t364;
t117 = t228 * t541 - t183 * t487 + (t183 * t450 + t228 * t437) * pkin(2);
t120 = t183 * t541 + t228 * t487 + (t183 * t437 - t228 * t450) * pkin(2);
t349 = ((t286 * t117 + t120 * t288) * t270 + (t117 * t288 - t286 * t120) * t264 + (t276 * t316 - t333 * t279) * t213) * t362;
t348 = t78 * t361;
t347 = t416 * t500;
t345 = t415 * t497;
t343 = t414 * t494;
t332 = 0.2e1 * t352;
t331 = 0.2e1 * t350;
t330 = 0.2e1 * t348;
t232 = t289 * t308 - t389;
t234 = t289 * t310 - t387;
t236 = t289 * t312 - t385;
t240 = t289 * t447 - t450;
t239 = t289 * t451 - t454;
t238 = t289 * t455 - t458;
t231 = t306 * t466 + t438;
t230 = t304 * t468 + t442;
t229 = t302 * t470 + t446;
t171 = t264 * t243 + t270 * t369;
t170 = -t270 * t243 + t264 * t369;
t169 = t263 * t242 + t269 * t370;
t168 = -t269 * t242 + t263 * t370;
t167 = t262 * t241 + t268 * t371;
t166 = -t268 * t241 + t262 * t371;
t69 = (t285 - 0.2e1) * t511;
t68 = (t283 - 0.2e1) * t512;
t67 = (t281 - 0.2e1) * t513;
t51 = (t286 * t463 + t288 * t307) * t171 + (-t286 * t307 + t288 * t463) * t170 - t54 * t472;
t50 = (t286 * t464 + t288 * t305) * t169 + (-t286 * t305 + t288 * t464) * t168 - t53 * t473;
t49 = (t286 * t465 + t288 * t303) * t167 + t166 * (-t286 * t303 + t288 * t465) - t52 * t474;
t48 = -t223 * t170 - t171 * t220 + t54 * t448;
t47 = -t222 * t168 + t225 * t169 + t53 * t452;
t46 = -t221 * t166 + t167 * t224 + t52 * t456;
t42 = (t101 * t299 + t102 * t300 - t301 * t505) * t390 + (-t289 * t63 * t361 - (-t306 * t249 * t342 + t289 * (-t284 * t372 + t312 * t526)) * t362) * t285;
t41 = (t100 * t300 + t299 * t99 - t301 * t506) * t393 + (-t289 * t62 * t364 - (-t304 * t248 * t344 + t289 * (-t282 * t373 + t310 * t528)) * t365) * t283;
t40 = (t299 * t97 + t300 * t98 - t301 * t507) * t396 + (-t289 * t61 * t367 - (-t302 * t247 * t346 + t289 * (-t280 * t374 + t308 * t530)) * t368) * t281;
t39 = t284 * t423 + t42 * t306;
t38 = t282 * t425 + t41 * t304;
t37 = t280 * t428 + t40 * t302;
t36 = -t285 * t306 * t423 + t42 * t312;
t35 = -t283 * t304 * t425 + t41 * t310;
t34 = -t281 * t302 * t428 + t40 * t308;
t33 = t285 * t313 * t330 + t307 * t42;
t32 = t283 * t311 * t331 + t305 * t41;
t31 = t281 * t309 * t332 + t303 * t40;
t24 = t305 * t29 + t311 * t415;
t23 = -t305 * t415 + t26;
t22 = t307 * t30 + t313 * t414;
t21 = t303 * t28 + t309 * t416;
t20 = -t307 * t414 + t27;
t19 = -t303 * t416 + t25;
t18 = (t284 * t330 + t514) * t306;
t17 = (t282 * t331 + t515) * t304;
t16 = (t280 * t332 + t516) * t302;
t15 = 0.2e1 * t312 * t514 + (-0.2e1 * t285 + 0.4e1) * t348;
t14 = 0.2e1 * t310 * t515 + (-0.2e1 * t283 + 0.4e1) * t350;
t13 = 0.2e1 * t308 * t516 + (-0.2e1 * t281 + 0.4e1) * t352;
t12 = t171 * (-t240 * t286 + t288 * t437) - (t240 * t288 + t286 * t437) * t170 + (-t289 + (t236 + t385) * t284) * t349 + t54 * t237;
t11 = (-t239 * t286 + t288 * t441) * t169 - (t239 * t288 + t286 * t441) * t168 + (-t289 + (t234 + t387) * t282) * t351 + t53 * t235;
t10 = (-t238 * t286 + t288 * t445) * t167 - (t238 * t288 + t286 * t445) * t166 + (-t289 + (t232 + t389) * t280) * t353 + t52 * t233;
t9 = t171 * (-t231 * t286 + t288 * t449) - (t231 * t288 + t286 * t449) * t170 + (-t448 + (t237 - t467) * t284) * t349 - t54 * t236;
t8 = t169 * (-t230 * t286 + t288 * t453) - t168 * (t230 * t288 + t286 * t453) + (-t452 + (t235 - t469) * t282) * t351 - t53 * t234;
t7 = t167 * (-t229 * t286 + t288 * t457) - t166 * (t229 * t288 + t286 * t457) + (-t456 + (t233 - t471) * t280) * t353 - t52 * t232;
t6 = (t375 * t306 - t312 * t33) * t287 - t289 * t39;
t5 = (t376 * t304 - t310 * t32) * t287 - t289 * t38;
t4 = (t377 * t302 - t308 * t31) * t287 - t289 * t37;
t3 = (-t306 * t33 - t375 * t312) * t287 + t289 * t36;
t2 = (-t304 * t32 - t376 * t310) * t287 + t289 * t35;
t1 = (-t302 * t31 - t377 * t308) * t287 + t289 * t34;
t55 = [-t54 * t508 - t53 * t509 - t52 * t510, -t28 * t356 - t29 * t355 - t30 * t354, -t49 * t356 - t50 * t355 - t51 * t354 + (t19 * t510 + t20 * t508 + t23 * t509) * t287, -t46 * t356 - t47 * t355 - t48 * t354 + (-t21 * t510 - t22 * t508 - t24 * t509) * t287, -t16 * t356 - t17 * t355 - t18 * t354 + (t343 * t505 + t345 * t506 + t347 * t507) * t319, -t13 * t356 - t14 * t355 - t15 * t354 + (-t357 * t69 - t358 * t68 - t359 * t67) * t319, -t37 * t356 - t38 * t355 - t39 * t354 + (-t357 * t514 - t358 * t515 - t359 * t516) * t319, -t34 * t356 - t35 * t355 - t36 * t354 + (-t28 * t404 - t29 * t403 - t30 * t402) * t319, (-t357 * t42 - t358 * t41 - t359 * t40) * t319, (t129 * t3 - t45 * t502) * t209 + (t128 * t2 - t44 * t503) * t207 + (t127 * t1 - t43 * t504) * t205 + (-t357 * t9 - t358 * t8 - t359 * t7) * t319, (t306 * t399 * t45 + t129 * t6) * t209 + (t304 * t400 * t44 + t128 * t5) * t207 + (t302 * t401 * t43 + t127 * t4) * t205 + (-t10 * t359 - t11 * t358 - t12 * t357) * t319, t301 - g(1); -t54 * t518 - t52 * t524 - t53 * t521, t28 * t407 + t29 * t406 + t30 * t405, t49 * t407 + t50 * t406 + t51 * t405 + (t19 * t524 + t20 * t518 + t23 * t521) * t287, t46 * t407 + t47 * t406 + t48 * t405 + (-t21 * t524 - t22 * t518 - t24 * t521) * t287, t16 * t407 + t17 * t406 + t18 * t405 + (-t100 * t345 - t102 * t343 - t347 * t98) * t319, t13 * t407 + t14 * t406 + t15 * t405 + (t411 * t69 + t413 * t68 + t429 * t67) * t319, t37 * t407 + t38 * t406 + t39 * t405 + (t100 * t363 + t102 * t360 + t366 * t98) * t319, t34 * t407 + t35 * t406 + t36 * t405 + (t100 * t529 + t102 * t527 + t98 * t531) * t319, (t40 * t429 + t41 * t413 + t411 * t42) * t319, (t108 * t45 + t3 * t95) * t209 + (t107 * t44 + t2 * t93) * t207 + (t1 * t91 + t106 * t43) * t205 + (t411 * t9 + t413 * t8 + t429 * t7) * t319, (-t108 * t417 + t95 * t6) * t209 + (-t107 * t418 + t93 * t5) * t207 + (-t106 * t419 + t91 * t4) * t205 + (t10 * t429 + t11 * t413 + t12 * t411) * t319, t300 - g(2); -t54 * t517 - t52 * t523 - t53 * t520, t28 * t410 + t29 * t409 + t30 * t408, t49 * t410 + t50 * t409 + t51 * t408 + (t19 * t523 + t20 * t517 + t23 * t520) * t287, t46 * t410 + t47 * t409 + t48 * t408 + (-t21 * t523 - t22 * t517 - t24 * t520) * t287, t16 * t410 + t17 * t409 + t18 * t408 + (-t101 * t343 - t345 * t99 - t347 * t97) * t319, t13 * t410 + t14 * t409 + t15 * t408 + (t412 * t69 + t426 * t68 + t430 * t67) * t319, t37 * t410 + t38 * t409 + t39 * t408 + (t101 * t360 + t363 * t99 + t366 * t97) * t319, t34 * t410 + t35 * t409 + t36 * t408 + (t101 * t527 + t99 * t529 + t97 * t531) * t319, (t40 * t430 + t41 * t426 + t412 * t42) * t319, (t105 * t45 + t3 * t96) * t209 + (t104 * t44 + t2 * t94) * t207 + (t1 * t92 + t103 * t43) * t205 + (t412 * t9 + t426 * t8 + t430 * t7) * t319, (-t105 * t417 + t96 * t6) * t209 + (-t104 * t418 + t94 * t5) * t207 + (-t103 * t419 + t92 * t4) * t205 + (t10 * t430 + t11 * t426 + t12 * t412) * t319, t299 - g(3);];
tauX_reg  = t55;
