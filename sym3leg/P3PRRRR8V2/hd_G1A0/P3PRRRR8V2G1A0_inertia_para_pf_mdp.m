% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3PRRRR8V2G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:36:17
% EndTime: 2020-08-06 17:36:21
% DurationCPUTime: 4.51s
% Computational Cost: add. (9313->374), mult. (19169->787), div. (732->14), fcn. (20766->22), ass. (0->330)
t2010 = cos(qJ(2,3));
t2004 = sin(qJ(2,3));
t2015 = pkin(7) + pkin(6);
t2105 = t2004 * t2015;
t1975 = pkin(2) * t2010 + t2105;
t1996 = sin(pkin(8));
t1998 = cos(pkin(8));
t1981 = t2015 * t2010;
t1972 = pkin(2) * t2004 - t1981;
t1999 = cos(pkin(4));
t1997 = sin(pkin(4));
t2003 = sin(qJ(3,3));
t2130 = t1997 * t2003;
t2024 = pkin(3) * t2130 - t1972 * t1999;
t1936 = t1996 * t1975 - t2024 * t1998;
t2000 = legFrame(3,3);
t1984 = sin(t2000);
t1987 = cos(t2000);
t1951 = t1998 * t1984 + t1987 * t1996;
t2116 = t1999 * t2004;
t1954 = t1996 * t2116 - t1998 * t2010;
t1957 = t1996 * t2010 + t1998 * t2116;
t2009 = cos(qJ(3,3));
t2098 = pkin(2) * t2130;
t2179 = pkin(3) * t2009 ^ 2;
t2185 = t1975 * t1998 + t2024 * t1996;
t1903 = -(t1954 * t1987 + t1984 * t1957) * t2179 + (-t1936 * t1984 + t2185 * t1987) * t2009 + t1951 * t2098;
t1948 = -t1996 * t1984 + t1987 * t1998;
t1906 = (-t1984 * t1954 + t1957 * t1987) * t2179 + (t1936 * t1987 + t2185 * t1984) * t2009 - t1948 * t2098;
t2124 = t1997 * t2009;
t1915 = -t1948 * t2124 - (t1948 * t2116 + t2010 * t1951) * t2003;
t1918 = -t1951 * t2124 - (-t2010 * t1948 + t1951 * t2116) * t2003;
t2117 = t1999 * t2003;
t2129 = t1997 * t2004;
t1933 = t2129 * t2179 + (pkin(3) * t2117 + t1972 * t1997) * t2009 + pkin(2) * t2117;
t1928 = 0.1e1 / t1933 ^ 2;
t2190 = t1928 * (t1903 * t1918 + t1906 * t1915);
t2012 = cos(qJ(2,2));
t2006 = sin(qJ(2,2));
t2102 = t2006 * t2015;
t1976 = pkin(2) * t2012 + t2102;
t1982 = t2015 * t2012;
t1973 = pkin(2) * t2006 - t1982;
t2005 = sin(qJ(3,2));
t2128 = t1997 * t2005;
t2023 = pkin(3) * t2128 - t1973 * t1999;
t1937 = t1996 * t1976 - t2023 * t1998;
t2001 = legFrame(2,3);
t1985 = sin(t2001);
t1988 = cos(t2001);
t1952 = t1998 * t1985 + t1988 * t1996;
t2114 = t1999 * t2006;
t1955 = t1996 * t2114 - t1998 * t2012;
t1958 = t1996 * t2012 + t1998 * t2114;
t2011 = cos(qJ(3,2));
t2097 = pkin(2) * t2128;
t2178 = pkin(3) * t2011 ^ 2;
t2186 = t1976 * t1998 + t2023 * t1996;
t1904 = -(t1955 * t1988 + t1985 * t1958) * t2178 + (-t1937 * t1985 + t2186 * t1988) * t2011 + t1952 * t2097;
t1949 = -t1996 * t1985 + t1988 * t1998;
t1907 = (-t1985 * t1955 + t1958 * t1988) * t2178 + (t1937 * t1988 + t2186 * t1985) * t2011 - t1949 * t2097;
t2122 = t1997 * t2011;
t1916 = -t1949 * t2122 - (t1949 * t2114 + t2012 * t1952) * t2005;
t1919 = -t1952 * t2122 - (-t2012 * t1949 + t1952 * t2114) * t2005;
t2115 = t1999 * t2005;
t2127 = t1997 * t2006;
t1934 = t2127 * t2178 + (pkin(3) * t2115 + t1973 * t1997) * t2011 + pkin(2) * t2115;
t1930 = 0.1e1 / t1934 ^ 2;
t2189 = t1930 * (t1904 * t1919 + t1907 * t1916);
t2014 = cos(qJ(2,1));
t2008 = sin(qJ(2,1));
t2099 = t2008 * t2015;
t1977 = pkin(2) * t2014 + t2099;
t1983 = t2015 * t2014;
t1974 = pkin(2) * t2008 - t1983;
t2007 = sin(qJ(3,1));
t2126 = t1997 * t2007;
t2022 = pkin(3) * t2126 - t1974 * t1999;
t1938 = t1996 * t1977 - t2022 * t1998;
t2002 = legFrame(1,3);
t1986 = sin(t2002);
t1989 = cos(t2002);
t1953 = t1998 * t1986 + t1989 * t1996;
t2112 = t1999 * t2008;
t1956 = t1996 * t2112 - t1998 * t2014;
t1959 = t1996 * t2014 + t1998 * t2112;
t2013 = cos(qJ(3,1));
t2096 = pkin(2) * t2126;
t2177 = pkin(3) * t2013 ^ 2;
t2187 = t1977 * t1998 + t2022 * t1996;
t1905 = -(t1956 * t1989 + t1986 * t1959) * t2177 + (-t1938 * t1986 + t2187 * t1989) * t2013 + t1953 * t2096;
t1950 = -t1996 * t1986 + t1989 * t1998;
t1908 = (-t1986 * t1956 + t1959 * t1989) * t2177 + (t1938 * t1989 + t2187 * t1986) * t2013 - t1950 * t2096;
t2120 = t1997 * t2013;
t1917 = -t1950 * t2120 - (t1950 * t2112 + t2014 * t1953) * t2007;
t1920 = -t1953 * t2120 - (-t2014 * t1950 + t1953 * t2112) * t2007;
t2113 = t1999 * t2007;
t2125 = t1997 * t2008;
t1935 = t2125 * t2177 + (pkin(3) * t2113 + t1974 * t1997) * t2013 + pkin(2) * t2113;
t1932 = 0.1e1 / t1935 ^ 2;
t2188 = t1932 * (t1905 * t1920 + t1908 * t1917);
t2184 = 0.2e1 * pkin(2);
t2183 = 2 * MDP(6);
t2182 = 2 * MDP(7);
t2181 = 2 * MDP(8);
t2180 = 0.2e1 * t1997;
t2016 = 0.1e1 / pkin(3);
t2176 = pkin(6) * t2016;
t2175 = MDP(3) * t1997;
t2174 = MDP(4) * t1997;
t2173 = MDP(9) / pkin(3) ^ 2;
t2172 = t1903 * t1928;
t2171 = t1904 * t1930;
t2170 = t1905 * t1932;
t2169 = t1918 * t1928;
t2168 = t1919 * t1930;
t2167 = t1920 * t1932;
t1978 = t2009 * pkin(3) + pkin(2);
t1969 = t2004 * t1978 - t1981;
t2136 = (t1978 * t2010 + t2105) * t1999;
t1921 = -t1969 * t1948 - t1951 * t2136;
t1945 = t1969 * t2124 + t1978 * t2117;
t1939 = 0.1e1 / t1945;
t2166 = t1921 * t1939;
t1979 = t2011 * pkin(3) + pkin(2);
t1970 = t2006 * t1979 - t1982;
t2135 = (t1979 * t2012 + t2102) * t1999;
t1922 = -t1970 * t1949 - t1952 * t2135;
t1946 = t1970 * t2122 + t1979 * t2115;
t1941 = 0.1e1 / t1946;
t2165 = t1922 * t1941;
t1980 = t2013 * pkin(3) + pkin(2);
t1971 = t2008 * t1980 - t1983;
t2134 = (t1980 * t2014 + t2099) * t1999;
t1923 = -t1971 * t1950 - t1953 * t2134;
t1947 = t1971 * t2120 + t1980 * t2113;
t1943 = 0.1e1 / t1947;
t2164 = t1923 * t1943;
t1924 = -t1948 * t2136 + t1969 * t1951;
t2163 = t1924 * t1939;
t1925 = -t1949 * t2135 + t1970 * t1952;
t2162 = t1925 * t1941;
t1926 = -t1950 * t2134 + t1971 * t1953;
t2161 = t1926 * t1943;
t1927 = 0.1e1 / t1933;
t2160 = t1927 * t1939;
t2159 = t1927 * t2003;
t2158 = t1927 * t2004;
t2157 = t1927 * t2009;
t2156 = t1927 * t2010;
t1990 = t2003 ^ 2;
t2155 = t1928 * t1990;
t1929 = 0.1e1 / t1934;
t2154 = t1929 * t1941;
t2153 = t1929 * t2005;
t2152 = t1929 * t2006;
t2151 = t1929 * t2011;
t2150 = t1929 * t2012;
t1991 = t2005 ^ 2;
t2149 = t1930 * t1991;
t1931 = 0.1e1 / t1935;
t2148 = t1931 * t1943;
t2147 = t1931 * t2007;
t2146 = t1931 * t2008;
t2145 = t1931 * t2013;
t2144 = t1931 * t2014;
t1992 = t2007 ^ 2;
t2143 = t1932 * t1992;
t2107 = t2003 * t2004;
t2111 = t1999 * t2009;
t2142 = t1939 * (-t1997 * t2107 + t2111);
t2106 = t2004 * t2009;
t2141 = t1939 * (-t1997 * t2106 - t2117);
t2104 = t2005 * t2006;
t2110 = t1999 * t2011;
t2140 = t1941 * (-t1997 * t2104 + t2110);
t2103 = t2006 * t2011;
t2139 = t1941 * (-t1997 * t2103 - t2115);
t2101 = t2007 * t2008;
t2109 = t1999 * t2013;
t2138 = t1943 * (-t1997 * t2101 + t2109);
t2100 = t2008 * t2013;
t2137 = t1943 * (-t1997 * t2100 - t2113);
t2123 = t1997 * t2010;
t2121 = t1997 * t2012;
t2119 = t1997 * t2014;
t2118 = t1997 * t2016;
t2108 = t1999 * t2016;
t2095 = t1939 * t2176;
t2094 = t1941 * t2176;
t2093 = t1943 * t2176;
t2092 = t1915 * t2172;
t2091 = t1916 * t2171;
t2090 = t1917 * t2170;
t2089 = t1906 * t2169;
t2088 = t1907 * t2168;
t2087 = t1908 * t2167;
t2086 = t1915 * t2169;
t2085 = t1916 * t2168;
t2084 = t1917 * t2167;
t2083 = t1927 * t2123;
t2082 = t1927 * t2117;
t2081 = t1927 * t2111;
t2080 = t2003 * t2156;
t2079 = t2009 * t2156;
t2078 = t1928 * t2003 * t2009;
t2077 = t1929 * t2121;
t2076 = t1929 * t2115;
t2075 = t1929 * t2110;
t2074 = t2005 * t2150;
t2073 = t2011 * t2150;
t2072 = t1930 * t2005 * t2011;
t2071 = t1931 * t2119;
t2070 = t1931 * t2113;
t2069 = t1931 * t2109;
t2068 = t2007 * t2144;
t2067 = t2013 * t2144;
t2066 = t1932 * t2007 * t2013;
t2065 = t1939 * t2108;
t2064 = t1939 * t2107;
t2063 = t1939 * t2106;
t2062 = t1941 * t2108;
t2061 = t1941 * t2104;
t2060 = t1941 * t2103;
t2059 = t1943 * t2108;
t2058 = t1943 * t2101;
t2057 = t1943 * t2100;
t2056 = (t1903 * t1927 + t1904 * t1929 + t1905 * t1931) * MDP(1) + (t1915 * t2156 + t1916 * t2150 + t1917 * t2144) * t2175 + (-t1915 * t2158 - t1916 * t2152 - t1917 * t2146) * t2174;
t2055 = (t1906 * t1927 + t1907 * t1929 + t1908 * t1931) * MDP(1) + (t1918 * t2156 + t1919 * t2150 + t1920 * t2144) * t2175 + (-t1918 * t2158 - t1919 * t2152 - t1920 * t2146) * t2174;
t2054 = t2003 * t2095;
t2053 = t2009 * t2095;
t2052 = t2005 * t2094;
t2051 = t2011 * t2094;
t2050 = t2007 * t2093;
t2049 = t2013 * t2093;
t2048 = t1915 * t1924 * t2160;
t2047 = t1916 * t1925 * t2154;
t2046 = t1917 * t1926 * t2148;
t2045 = t1918 * t1921 * t2160;
t2044 = t1919 * t1922 * t2154;
t2043 = t1920 * t1923 * t2148;
t2042 = t1939 * t2004 * t2118;
t2041 = t1941 * t2006 * t2118;
t2040 = t1943 * t2008 * t2118;
t2039 = t2003 * t2042;
t2038 = t2009 * t2042;
t2037 = t2005 * t2041;
t2036 = t2011 * t2041;
t2035 = t2007 * t2040;
t2034 = t2013 * t2040;
t2030 = t1903 * t2123 + t1915 * t2184;
t2029 = t1904 * t2121 + t1916 * t2184;
t2028 = t1905 * t2119 + t1917 * t2184;
t2027 = t1906 * t2123 + t1918 * t2184;
t2026 = t1907 * t2121 + t1919 * t2184;
t2025 = t1908 * t2119 + t1920 * t2184;
t2021 = (t1915 * t1921 + t1918 * t1924) * t2160;
t2020 = (t1916 * t1922 + t1919 * t1925) * t2154;
t2019 = (t1917 * t1923 + t1920 * t1926) * t2148;
t1940 = 0.1e1 / t1945 ^ 2;
t1942 = 0.1e1 / t1946 ^ 2;
t1944 = 0.1e1 / t1947 ^ 2;
t2018 = (t1906 * t2172 + t1907 * t2171 + t1908 * t2170) * MDP(1) + (t2084 + t2085 + t2086) * MDP(2) + (t2010 * t2190 + t2012 * t2189 + t2014 * t2188) * t2175 + (-t2004 * t2190 - t2006 * t2189 - t2008 * t2188) * t2174 + (t1990 * t2086 + t1991 * t2085 + t1992 * t2084) * MDP(5) + (t1915 * t1918 * t2078 + t1916 * t1919 * t2072 + t1917 * t1920 * t2066) * t2183 + (t1921 * t1924 * t1940 + t1922 * t1925 * t1942 + t1923 * t1926 * t1944) * t2173 + ((t2003 * t2021 + t2005 * t2020 + t2007 * t2019) * MDP(7) + (t2009 * t2021 + t2011 * t2020 + t2013 * t2019) * MDP(8)) * t2016;
t1914 = t1920 ^ 2;
t1913 = t1919 ^ 2;
t1912 = t1918 ^ 2;
t1911 = t1917 ^ 2;
t1910 = t1916 ^ 2;
t1909 = t1915 ^ 2;
t1902 = t1920 * t2071 + t1923 * t2059;
t1901 = t1917 * t2071 + t1926 * t2059;
t1900 = t1919 * t2077 + t1922 * t2062;
t1899 = t1916 * t2077 + t1925 * t2062;
t1898 = t1918 * t2083 + t1921 * t2065;
t1897 = t1915 * t2083 + t1924 * t2065;
t1896 = t1902 * t2007;
t1895 = t1902 * t2013;
t1894 = t1901 * t2007;
t1893 = t1901 * t2013;
t1892 = t1900 * t2005;
t1891 = t1900 * t2011;
t1890 = t1899 * t2005;
t1889 = t1899 * t2011;
t1888 = t1898 * t2003;
t1887 = t1898 * t2009;
t1886 = t1897 * t2003;
t1885 = t1897 * t2009;
t1884 = (pkin(6) * t1920 + t1908 * t2125) * t1931;
t1883 = (pkin(6) * t1917 + t1905 * t2125) * t1931;
t1882 = (pkin(6) * t1919 + t1907 * t2127) * t1929;
t1881 = (pkin(6) * t1916 + t1904 * t2127) * t1929;
t1880 = (pkin(6) * t1918 + t1906 * t2129) * t1927;
t1879 = (pkin(6) * t1915 + t1903 * t2129) * t1927;
t1878 = -t1923 * t2034 - t1896;
t1877 = -t1923 * t2035 + t1895;
t1876 = -t1926 * t2034 - t1894;
t1875 = -t1926 * t2035 + t1893;
t1874 = -t1922 * t2036 - t1892;
t1873 = -t1922 * t2037 + t1891;
t1872 = -t1925 * t2036 - t1890;
t1871 = -t1925 * t2037 + t1889;
t1870 = -t1921 * t2038 - t1888;
t1869 = -t1921 * t2039 + t1887;
t1868 = -t1924 * t2038 - t1886;
t1867 = -t1924 * t2039 + t1885;
t1862 = -t1923 * t2049 - t2025 * t2147;
t1861 = -t1926 * t2049 - t2028 * t2147;
t1860 = -t1923 * t2050 + t2025 * t2145;
t1859 = -t1926 * t2050 + t2028 * t2145;
t1858 = -t1922 * t2051 - t2026 * t2153;
t1857 = -t1925 * t2051 - t2029 * t2153;
t1856 = -t1922 * t2052 + t2026 * t2151;
t1855 = -t1925 * t2052 + t2029 * t2151;
t1854 = -t1921 * t2053 - t2027 * t2159;
t1853 = -t1924 * t2053 - t2030 * t2159;
t1852 = -t1921 * t2054 + t2027 * t2157;
t1851 = -t1924 * t2054 + t2030 * t2157;
t1848 = -t2013 * t1884 - t1908 * t2070;
t1847 = -t2013 * t1883 - t1905 * t2070;
t1846 = -t2011 * t1882 - t1907 * t2076;
t1845 = -t2011 * t1881 - t1904 * t2076;
t1844 = -t2009 * t1880 - t1906 * t2082;
t1843 = -t2009 * t1879 - t1903 * t2082;
t1842 = -t2007 * t1884 + t1908 * t2069;
t1841 = -t2007 * t1883 + t1905 * t2069;
t1840 = -t2005 * t1882 + t1907 * t2075;
t1839 = -t2005 * t1881 + t1904 * t2075;
t1838 = -t2003 * t1880 + t1906 * t2081;
t1837 = -t2003 * t1879 + t1903 * t2081;
t1 = [(t1903 ^ 2 * t1928 + t1904 ^ 2 * t1930 + t1905 ^ 2 * t1932) * MDP(1) + (t1909 * t1928 + t1910 * t1930 + t1911 * t1932) * MDP(2) + (t1909 * t2155 + t1910 * t2149 + t1911 * t2143) * MDP(5) + (t1909 * t2078 + t1910 * t2072 + t1911 * t2066) * t2183 + MDP(12) + ((t1859 * t1917 + t1875 * t1905) * MDP(10) + (t1861 * t1917 + t1876 * t1905) * MDP(11)) * t1931 + ((t1855 * t1916 + t1871 * t1904) * MDP(10) + (t1857 * t1916 + t1872 * t1904) * MDP(11)) * t1929 + ((t1851 * t1915 + t1867 * t1903) * MDP(10) + (t1853 * t1915 + t1868 * t1903) * MDP(11)) * t1927 + (t1924 ^ 2 * t1940 + t1925 ^ 2 * t1942 + t1926 ^ 2 * t1944) * t2173 + ((t2010 * t2092 + t2012 * t2091 + t2014 * t2090) * MDP(3) + (-t2004 * t2092 - t2006 * t2091 - t2008 * t2090) * MDP(4)) * t2180 + ((t1837 * t2163 + t1839 * t2162 + t1841 * t2161) * MDP(10) + (t1843 * t2163 + t1845 * t2162 + t1847 * t2161) * MDP(11) + (t2003 * t2048 + t2005 * t2047 + t2007 * t2046) * t2182 + (t2009 * t2048 + t2011 * t2047 + t2013 * t2046) * t2181) * t2016; ((t1860 * t1917 + t1877 * t1905) * MDP(10) + (t1862 * t1917 + t1878 * t1905) * MDP(11)) * t1931 + ((t1856 * t1916 + t1873 * t1904) * MDP(10) + (t1858 * t1916 + t1874 * t1904) * MDP(11)) * t1929 + ((t1852 * t1915 + t1869 * t1903) * MDP(10) + (t1854 * t1915 + t1870 * t1903) * MDP(11)) * t1927 + ((t1838 * t2163 + t1840 * t2162 + t1842 * t2161) * MDP(10) + (t1844 * t2163 + t1846 * t2162 + t1848 * t2161) * MDP(11)) * t2016 + t2018; ((t1924 * t2142 + t1925 * t2140 + t1926 * t2138) * MDP(10) + (t1924 * t2141 + t1925 * t2139 + t1926 * t2137) * MDP(11)) * t2016 + ((t1915 * t2079 + t1916 * t2073 + t1917 * t2067) * MDP(10) + (-t1915 * t2080 - t1916 * t2074 - t1917 * t2068) * MDP(11)) * t1997 + t2056; ((t1859 * t1920 + t1875 * t1908) * MDP(10) + (t1861 * t1920 + t1876 * t1908) * MDP(11)) * t1931 + ((t1855 * t1919 + t1871 * t1907) * MDP(10) + (t1857 * t1919 + t1872 * t1907) * MDP(11)) * t1929 + ((t1851 * t1918 + t1867 * t1906) * MDP(10) + (t1853 * t1918 + t1868 * t1906) * MDP(11)) * t1927 + ((t1837 * t2166 + t1839 * t2165 + t1841 * t2164) * MDP(10) + (t1843 * t2166 + t1845 * t2165 + t1847 * t2164) * MDP(11)) * t2016 + t2018; (t1906 ^ 2 * t1928 + t1907 ^ 2 * t1930 + t1908 ^ 2 * t1932) * MDP(1) + (t1912 * t1928 + t1913 * t1930 + t1914 * t1932) * MDP(2) + (t1912 * t2155 + t1913 * t2149 + t1914 * t2143) * MDP(5) + (t1912 * t2078 + t1913 * t2072 + t1914 * t2066) * t2183 + MDP(12) + ((t1860 * t1920 + t1877 * t1908) * MDP(10) + (t1862 * t1920 + t1878 * t1908) * MDP(11)) * t1931 + ((t1856 * t1919 + t1873 * t1907) * MDP(10) + (t1858 * t1919 + t1874 * t1907) * MDP(11)) * t1929 + ((t1852 * t1918 + t1869 * t1906) * MDP(10) + (t1854 * t1918 + t1870 * t1906) * MDP(11)) * t1927 + (t1921 ^ 2 * t1940 + t1922 ^ 2 * t1942 + t1923 ^ 2 * t1944) * t2173 + ((t2010 * t2089 + t2012 * t2088 + t2014 * t2087) * MDP(3) + (-t2004 * t2089 - t2006 * t2088 - t2008 * t2087) * MDP(4)) * t2180 + ((t1838 * t2166 + t1840 * t2165 + t1842 * t2164) * MDP(10) + (t1844 * t2166 + t1846 * t2165 + t1848 * t2164) * MDP(11) + (t2003 * t2045 + t2005 * t2044 + t2007 * t2043) * t2182 + (t2009 * t2045 + t2011 * t2044 + t2013 * t2043) * t2181) * t2016; ((t1921 * t2142 + t1922 * t2140 + t1923 * t2138) * MDP(10) + (t1921 * t2141 + t1922 * t2139 + t1923 * t2137) * MDP(11)) * t2016 + ((t1918 * t2079 + t1919 * t2073 + t1920 * t2067) * MDP(10) + (-t1918 * t2080 - t1919 * t2074 - t1920 * t2068) * MDP(11)) * t1997 + t2055; (t1885 + t1889 + t1893) * MDP(10) + (-t1886 - t1890 - t1894) * MDP(11) + ((-t1924 * t2064 - t1925 * t2061 - t1926 * t2058) * MDP(10) + (-t1924 * t2063 - t1925 * t2060 - t1926 * t2057) * MDP(11)) * t2118 + t2056; (t1887 + t1891 + t1895) * MDP(10) + (-t1888 - t1892 - t1896) * MDP(11) + ((-t1921 * t2064 - t1922 * t2061 - t1923 * t2058) * MDP(10) + (-t1921 * t2063 - t1922 * t2060 - t1923 * t2057) * MDP(11)) * t2118 + t2055; 0.3e1 * MDP(1) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
