% Calculate minimal parameter regressor of inverse dynamics forces for
% P3PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3PRRRR8V2G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G1A0_invdyn_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:36:07
% EndTime: 2020-08-06 17:36:17
% DurationCPUTime: 9.51s
% Computational Cost: add. (57446->437), mult. (111020->801), div. (4326->17), fcn. (106566->22), ass. (0->317)
t1644 = sin(pkin(4));
t1658 = sin(qJ(2,1));
t1768 = t1644 * t1658;
t1657 = sin(qJ(3,1));
t1667 = pkin(7) + pkin(6);
t1643 = sin(pkin(8));
t1645 = cos(pkin(8));
t1665 = xDP(2);
t1666 = xDP(1);
t1596 = t1643 * t1665 + t1645 * t1666;
t1597 = -t1643 * t1666 + t1645 * t1665;
t1649 = legFrame(1,3);
t1633 = sin(t1649);
t1636 = cos(t1649);
t1556 = t1596 * t1636 + t1633 * t1597;
t1664 = cos(qJ(2,1));
t1646 = cos(pkin(4));
t1755 = t1646 * t1658;
t1663 = cos(qJ(3,1));
t1763 = t1644 * t1663;
t1529 = ((-t1596 * t1755 + t1664 * t1597) * t1636 - (t1664 * t1596 + t1597 * t1755) * t1633) * t1657 - t1556 * t1763;
t1629 = t1664 * t1667;
t1609 = pkin(2) * t1658 - t1629;
t1741 = t1658 * t1663;
t1577 = pkin(3) * t1741 + t1609;
t1626 = t1663 * pkin(3) + pkin(2);
t1756 = t1646 * t1657;
t1606 = t1626 * t1756;
t1565 = t1577 * t1763 + t1606;
t1561 = 0.1e1 / t1565;
t1792 = t1529 * t1561;
t1722 = t1667 * t1792;
t1701 = t1657 * t1722;
t1595 = t1658 * t1626 - t1629;
t1740 = t1658 * t1667;
t1777 = (t1626 * t1664 + t1740) * t1646;
t1535 = -t1556 * t1777 - (-t1633 * t1596 + t1597 * t1636) * t1595;
t1574 = t1595 * t1763 + t1606;
t1570 = 0.1e1 / t1574;
t1789 = t1535 * t1570;
t1505 = t1701 - t1789;
t1612 = pkin(2) * t1664 + t1740;
t1769 = t1644 * t1657;
t1680 = pkin(3) * t1769 - t1609 * t1646;
t1553 = t1643 * t1612 - t1680 * t1645;
t1583 = t1645 * t1633 + t1636 * t1643;
t1586 = t1643 * t1755 - t1645 * t1664;
t1589 = t1643 * t1664 + t1645 * t1755;
t1734 = pkin(2) * t1769;
t1642 = t1663 ^ 2;
t1802 = pkin(3) * t1642;
t1820 = t1612 * t1645 + t1680 * t1643;
t1517 = -(t1586 * t1636 + t1633 * t1589) * t1802 + (-t1553 * t1633 + t1636 * t1820) * t1663 + t1583 * t1734;
t1580 = -t1643 * t1633 + t1636 * t1645;
t1520 = (-t1633 * t1586 + t1589 * t1636) * t1802 + (t1553 * t1636 + t1633 * t1820) * t1663 - t1580 * t1734;
t1550 = 0.1e1 / ((pkin(3) * t1756 + t1609 * t1644) * t1663 + pkin(2) * t1756 + t1768 * t1802);
t1651 = xDDP(2);
t1652 = xDDP(1);
t1630 = pkin(2) ^ 2 + t1667 ^ 2;
t1668 = pkin(3) ^ 2;
t1780 = t1570 * t1657;
t1713 = t1535 * t1780;
t1814 = 0.2e1 * pkin(2);
t1798 = pkin(3) * t1814;
t1707 = (-t1667 * t1713 + (t1642 * t1668 + t1663 * t1798 + t1630) * t1792) * t1550 * t1792;
t1669 = 0.1e1 / pkin(3);
t1716 = t1669 * t1789;
t1698 = t1663 * t1707 + ((pkin(2) * t1716 - t1505 * t1663) * t1789 + t1517 * t1652 + t1520 * t1651) * t1550;
t1650 = xDDP(3);
t1824 = t1650 - g(3);
t1799 = -t1698 - t1824;
t1827 = t1799 * t1768;
t1656 = sin(qJ(2,2));
t1770 = t1644 * t1656;
t1655 = sin(qJ(3,2));
t1648 = legFrame(2,3);
t1632 = sin(t1648);
t1635 = cos(t1648);
t1555 = t1596 * t1635 + t1632 * t1597;
t1662 = cos(qJ(2,2));
t1757 = t1646 * t1656;
t1661 = cos(qJ(3,2));
t1765 = t1644 * t1661;
t1528 = ((-t1596 * t1757 + t1662 * t1597) * t1635 - (t1662 * t1596 + t1597 * t1757) * t1632) * t1655 - t1555 * t1765;
t1628 = t1662 * t1667;
t1608 = pkin(2) * t1656 - t1628;
t1744 = t1656 * t1661;
t1576 = pkin(3) * t1744 + t1608;
t1625 = t1661 * pkin(3) + pkin(2);
t1758 = t1646 * t1655;
t1605 = t1625 * t1758;
t1564 = t1576 * t1765 + t1605;
t1559 = 0.1e1 / t1564;
t1793 = t1528 * t1559;
t1724 = t1667 * t1793;
t1702 = t1655 * t1724;
t1594 = t1656 * t1625 - t1628;
t1743 = t1656 * t1667;
t1778 = (t1625 * t1662 + t1743) * t1646;
t1534 = -t1555 * t1778 - (-t1632 * t1596 + t1597 * t1635) * t1594;
t1573 = t1594 * t1765 + t1605;
t1568 = 0.1e1 / t1573;
t1790 = t1534 * t1568;
t1504 = t1702 - t1790;
t1611 = pkin(2) * t1662 + t1743;
t1771 = t1644 * t1655;
t1681 = pkin(3) * t1771 - t1608 * t1646;
t1552 = t1643 * t1611 - t1681 * t1645;
t1582 = t1645 * t1632 + t1635 * t1643;
t1585 = t1643 * t1757 - t1645 * t1662;
t1588 = t1643 * t1662 + t1645 * t1757;
t1735 = pkin(2) * t1771;
t1641 = t1661 ^ 2;
t1803 = pkin(3) * t1641;
t1819 = t1611 * t1645 + t1681 * t1643;
t1516 = -(t1585 * t1635 + t1632 * t1588) * t1803 + (-t1552 * t1632 + t1635 * t1819) * t1661 + t1582 * t1735;
t1579 = -t1643 * t1632 + t1635 * t1645;
t1519 = (-t1632 * t1585 + t1588 * t1635) * t1803 + (t1552 * t1635 + t1632 * t1819) * t1661 - t1579 * t1735;
t1549 = 0.1e1 / ((pkin(3) * t1758 + t1608 * t1644) * t1661 + pkin(2) * t1758 + t1770 * t1803);
t1781 = t1568 * t1655;
t1714 = t1534 * t1781;
t1708 = (-t1667 * t1714 + (t1641 * t1668 + t1661 * t1798 + t1630) * t1793) * t1549 * t1793;
t1717 = t1669 * t1790;
t1699 = t1661 * t1708 + ((pkin(2) * t1717 - t1504 * t1661) * t1790 + t1516 * t1652 + t1519 * t1651) * t1549;
t1800 = -t1699 - t1824;
t1826 = t1800 * t1770;
t1654 = sin(qJ(2,3));
t1772 = t1644 * t1654;
t1653 = sin(qJ(3,3));
t1647 = legFrame(3,3);
t1631 = sin(t1647);
t1634 = cos(t1647);
t1554 = t1596 * t1634 + t1631 * t1597;
t1660 = cos(qJ(2,3));
t1759 = t1646 * t1654;
t1659 = cos(qJ(3,3));
t1767 = t1644 * t1659;
t1527 = ((-t1596 * t1759 + t1660 * t1597) * t1634 - (t1660 * t1596 + t1597 * t1759) * t1631) * t1653 - t1554 * t1767;
t1627 = t1660 * t1667;
t1607 = pkin(2) * t1654 - t1627;
t1747 = t1654 * t1659;
t1575 = pkin(3) * t1747 + t1607;
t1624 = t1659 * pkin(3) + pkin(2);
t1760 = t1646 * t1653;
t1604 = t1624 * t1760;
t1563 = t1575 * t1767 + t1604;
t1557 = 0.1e1 / t1563;
t1794 = t1527 * t1557;
t1726 = t1667 * t1794;
t1703 = t1653 * t1726;
t1593 = t1654 * t1624 - t1627;
t1746 = t1654 * t1667;
t1779 = (t1624 * t1660 + t1746) * t1646;
t1533 = -t1554 * t1779 - (-t1631 * t1596 + t1597 * t1634) * t1593;
t1572 = t1593 * t1767 + t1604;
t1566 = 0.1e1 / t1572;
t1791 = t1533 * t1566;
t1503 = t1703 - t1791;
t1610 = pkin(2) * t1660 + t1746;
t1773 = t1644 * t1653;
t1682 = pkin(3) * t1773 - t1607 * t1646;
t1551 = t1643 * t1610 - t1682 * t1645;
t1581 = t1645 * t1631 + t1634 * t1643;
t1584 = t1643 * t1759 - t1645 * t1660;
t1587 = t1643 * t1660 + t1645 * t1759;
t1736 = pkin(2) * t1773;
t1640 = t1659 ^ 2;
t1804 = pkin(3) * t1640;
t1818 = t1610 * t1645 + t1682 * t1643;
t1515 = -(t1584 * t1634 + t1631 * t1587) * t1804 + (-t1551 * t1631 + t1634 * t1818) * t1659 + t1581 * t1736;
t1578 = -t1643 * t1631 + t1634 * t1645;
t1518 = (-t1631 * t1584 + t1587 * t1634) * t1804 + (t1551 * t1634 + t1631 * t1818) * t1659 - t1578 * t1736;
t1548 = 0.1e1 / ((pkin(3) * t1760 + t1607 * t1644) * t1659 + pkin(2) * t1760 + t1772 * t1804);
t1782 = t1566 * t1653;
t1715 = t1533 * t1782;
t1709 = (-t1667 * t1715 + (t1640 * t1668 + t1659 * t1798 + t1630) * t1794) * t1548 * t1794;
t1718 = t1669 * t1791;
t1700 = t1659 * t1709 + ((pkin(2) * t1718 - t1503 * t1659) * t1791 + t1515 * t1652 + t1518 * t1651) * t1548;
t1801 = -t1700 - t1824;
t1825 = t1801 * t1772;
t1536 = -t1578 * t1767 - (t1578 * t1759 + t1660 * t1581) * t1653;
t1539 = -t1581 * t1767 - (-t1660 * t1578 + t1581 * t1759) * t1653;
t1727 = t1660 * t1794;
t1766 = t1644 * t1660;
t1455 = (-((t1644 * t1727 + t1646 * t1718) * t1804 + ((-t1715 + t1726) * t1654 + pkin(2) * t1727) * t1767 + t1503 * t1646) * t1794 + t1536 * t1652 + t1539 * t1651 - (t1718 * t1766 + (t1640 * t1646 - t1747 * t1773 - t1646) * t1794) * t1791) * t1548;
t1613 = -t1643 * g(1) + t1645 * g(2);
t1614 = t1645 * g(1) + t1643 * g(2);
t1691 = t1613 * t1634 - t1614 * t1631;
t1670 = 0.1e1 / pkin(3) ^ 2;
t1721 = t1533 ^ 2 / t1572 ^ 2 * t1670;
t1817 = (t1613 * t1631 + t1614 * t1634) * t1654 - pkin(6) * t1721 + t1455 * t1814 - (t1644 * t1801 + t1691 * t1646) * t1660;
t1537 = -t1579 * t1765 - (t1579 * t1757 + t1662 * t1582) * t1655;
t1540 = -t1582 * t1765 - (-t1662 * t1579 + t1582 * t1757) * t1655;
t1725 = t1662 * t1793;
t1764 = t1644 * t1662;
t1456 = (-((t1644 * t1725 + t1646 * t1717) * t1803 + ((-t1714 + t1724) * t1656 + pkin(2) * t1725) * t1765 + t1504 * t1646) * t1793 + t1537 * t1652 + t1540 * t1651 - (t1717 * t1764 + (t1641 * t1646 - t1744 * t1771 - t1646) * t1793) * t1790) * t1549;
t1689 = t1613 * t1635 - t1614 * t1632;
t1720 = t1534 ^ 2 / t1573 ^ 2 * t1670;
t1816 = (t1613 * t1632 + t1614 * t1635) * t1656 - pkin(6) * t1720 + t1456 * t1814 - (t1644 * t1800 + t1689 * t1646) * t1662;
t1538 = -t1580 * t1763 - (t1580 * t1755 + t1664 * t1583) * t1657;
t1541 = -t1583 * t1763 - (-t1664 * t1580 + t1583 * t1755) * t1657;
t1723 = t1664 * t1792;
t1762 = t1644 * t1664;
t1457 = (-((t1644 * t1723 + t1646 * t1716) * t1802 + ((-t1713 + t1722) * t1658 + pkin(2) * t1723) * t1763 + t1505 * t1646) * t1792 + t1538 * t1652 + t1541 * t1651 - (t1716 * t1762 + (t1642 * t1646 - t1741 * t1769 - t1646) * t1792) * t1789) * t1550;
t1687 = t1613 * t1636 - t1614 * t1633;
t1719 = t1535 ^ 2 / t1574 ^ 2 * t1670;
t1815 = (t1613 * t1633 + t1614 * t1636) * t1658 - pkin(6) * t1719 + t1457 * t1814 - (t1644 * t1799 + t1687 * t1646) * t1664;
t1813 = 2 * MDP(6);
t1706 = t1557 * t1718;
t1749 = t1652 * t1669;
t1750 = t1651 * t1669;
t1751 = t1646 * t1669;
t1761 = t1644 * t1669;
t1545 = -t1578 * t1779 + t1593 * t1581;
t1785 = t1545 * t1566;
t1542 = -t1593 * t1578 - t1581 * t1779;
t1788 = t1542 * t1566;
t1805 = pkin(2) * t1669;
t1488 = t1749 * t1785 + t1750 * t1788 - t1709 * t1751 - (-t1646 * t1703 + (-t1575 * t1653 * t1761 + (t1659 * t1805 + t1640) * t1646) * t1791) * t1706;
t1694 = t1527 * t1706;
t1809 = pkin(6) / 0.2e1;
t1812 = -0.2e1 * pkin(2) * t1694 - 0.2e1 * t1488 * t1809;
t1705 = t1559 * t1717;
t1546 = -t1579 * t1778 + t1594 * t1582;
t1784 = t1546 * t1568;
t1543 = -t1594 * t1579 - t1582 * t1778;
t1787 = t1543 * t1568;
t1489 = t1749 * t1784 + t1750 * t1787 - t1708 * t1751 - (-t1646 * t1702 + (-t1576 * t1655 * t1761 + (t1661 * t1805 + t1641) * t1646) * t1790) * t1705;
t1693 = t1528 * t1705;
t1811 = -0.2e1 * pkin(2) * t1693 - 0.2e1 * t1489 * t1809;
t1704 = t1561 * t1716;
t1547 = -t1580 * t1777 + t1595 * t1583;
t1783 = t1547 * t1570;
t1544 = -t1595 * t1580 - t1583 * t1777;
t1786 = t1544 * t1570;
t1490 = t1749 * t1783 + t1750 * t1786 - t1707 * t1751 - (-t1646 * t1701 + (-t1577 * t1657 * t1761 + (t1663 * t1805 + t1642) * t1646) * t1789) * t1704;
t1692 = t1529 * t1704;
t1810 = -0.2e1 * pkin(2) * t1692 - 0.2e1 * t1490 * t1809;
t1808 = 0.2e1 * t1640 - 0.1e1;
t1807 = 0.2e1 * t1641 - 0.1e1;
t1806 = 0.2e1 * t1642 - 0.1e1;
t1797 = t1527 ^ 2 / t1563 ^ 2;
t1796 = t1528 ^ 2 / t1564 ^ 2;
t1795 = t1529 ^ 2 / t1565 ^ 2;
t1754 = t1646 * t1660;
t1753 = t1646 * t1662;
t1752 = t1646 * t1664;
t1748 = t1653 * t1659;
t1745 = t1655 * t1661;
t1742 = t1657 * t1663;
t1733 = t1455 * t1782;
t1732 = t1455 * t1566 * t1659;
t1731 = t1456 * t1781;
t1730 = t1456 * t1568 * t1661;
t1729 = t1457 * t1780;
t1728 = t1457 * t1570 * t1663;
t1452 = t1660 * t1455;
t1712 = (t1721 + t1797) * t1654 - t1452;
t1453 = t1662 * t1456;
t1711 = (t1720 + t1796) * t1656 - t1453;
t1454 = t1664 * t1457;
t1710 = (t1719 + t1795) * t1658 - t1454;
t1697 = t1566 * t1748 * t1797;
t1696 = t1568 * t1745 * t1796;
t1695 = t1570 * t1742 * t1795;
t1685 = 0.2e1 * t1694;
t1684 = 0.2e1 * t1693;
t1683 = 0.2e1 * t1692;
t1458 = t1654 * t1488 + t1660 * t1685;
t1431 = (-t1659 * t1458 + t1712 * t1653) * t1644;
t1432 = (-t1653 * t1458 - t1712 * t1659) * t1644;
t1446 = -t1654 * t1797 + t1452;
t1448 = t1654 * t1455 + t1660 * t1797;
t1464 = t1488 * t1653 + t1659 * t1721;
t1465 = t1488 * t1659 - t1653 * t1721;
t1676 = -t1801 * MDP(1) + (t1646 * t1465 + t1432) * MDP(10) + (-t1646 * t1464 + t1431) * MDP(11) + (MDP(3) * t1446 - MDP(4) * t1448) * t1644;
t1459 = t1656 * t1489 + t1662 * t1684;
t1433 = (-t1661 * t1459 + t1711 * t1655) * t1644;
t1434 = (-t1655 * t1459 - t1711 * t1661) * t1644;
t1450 = -t1656 * t1796 + t1453;
t1451 = t1656 * t1456 + t1662 * t1796;
t1466 = t1489 * t1655 + t1661 * t1720;
t1467 = t1489 * t1661 - t1655 * t1720;
t1675 = -t1800 * MDP(1) + (t1646 * t1467 + t1434) * MDP(10) + (-t1646 * t1466 + t1433) * MDP(11) + (MDP(3) * t1450 - MDP(4) * t1451) * t1644;
t1460 = t1658 * t1490 + t1664 * t1683;
t1435 = (-t1663 * t1460 + t1710 * t1657) * t1644;
t1436 = (-t1657 * t1460 - t1710 * t1663) * t1644;
t1447 = -t1658 * t1795 + t1454;
t1449 = t1658 * t1457 + t1664 * t1795;
t1468 = t1490 * t1657 + t1663 * t1719;
t1469 = t1490 * t1663 - t1657 * t1719;
t1674 = -t1799 * MDP(1) + (t1646 * t1469 + t1436) * MDP(10) + (-t1646 * t1468 + t1435) * MDP(11) + (MDP(3) * t1447 - MDP(4) * t1449) * t1644;
t1598 = t1631 * g(1) - t1634 * g(2);
t1601 = t1634 * g(1) + t1631 * g(2);
t1673 = (t1653 * t1812 + t1659 * t1817) * MDP(10) + (-t1653 * t1817 + t1659 * t1812) * MDP(11) + t1455 * MDP(2) + (t1601 * (t1643 * t1754 + t1645 * t1654) + t1598 * (-t1643 * t1654 + t1645 * t1754) - t1801 * t1766) * MDP(3) + (-t1601 * t1584 - t1598 * t1587 + t1825) * MDP(4) + (t1455 * t1653 + t1659 * t1685) * t1653 * MDP(5) + t1464 * MDP(7) + t1465 * MDP(8) + (t1455 * t1748 + t1808 * t1694) * t1813;
t1599 = t1632 * g(1) - t1635 * g(2);
t1602 = t1635 * g(1) + t1632 * g(2);
t1672 = (t1655 * t1811 + t1661 * t1816) * MDP(10) + (-t1655 * t1816 + t1661 * t1811) * MDP(11) + t1456 * MDP(2) + (t1602 * (t1643 * t1753 + t1645 * t1656) + t1599 * (-t1643 * t1656 + t1645 * t1753) - t1800 * t1764) * MDP(3) + (-t1602 * t1585 - t1599 * t1588 + t1826) * MDP(4) + (t1456 * t1655 + t1661 * t1684) * t1655 * MDP(5) + t1466 * MDP(7) + t1467 * MDP(8) + (t1456 * t1745 + t1807 * t1693) * t1813;
t1600 = t1633 * g(1) - t1636 * g(2);
t1603 = t1636 * g(1) + t1633 * g(2);
t1671 = (t1657 * t1810 + t1663 * t1815) * MDP(10) + (-t1657 * t1815 + t1663 * t1810) * MDP(11) + t1457 * MDP(2) + (t1603 * (t1643 * t1752 + t1645 * t1658) + t1600 * (-t1643 * t1658 + t1645 * t1752) - t1799 * t1762) * MDP(3) + (-t1603 * t1586 - t1600 * t1589 + t1827) * MDP(4) + (t1457 * t1657 + t1663 * t1683) * t1657 * MDP(5) + t1468 * MDP(7) + t1469 * MDP(8) + (t1457 * t1742 + t1806 * t1692) * t1813;
t1502 = t1806 * t1795;
t1501 = t1807 * t1796;
t1500 = t1808 * t1797;
t1478 = t1687 * t1644 - t1646 * t1799;
t1477 = t1689 * t1644 - t1646 * t1800;
t1476 = t1691 * t1644 - t1646 * t1801;
t1439 = (t1613 * t1755 + t1664 * t1614) * t1636 + (t1664 * t1613 - t1614 * t1755) * t1633 + t1827 + pkin(2) * t1795 - t1457 * pkin(6);
t1438 = (t1613 * t1757 + t1662 * t1614) * t1635 + (t1662 * t1613 - t1614 * t1757) * t1632 + t1826 + pkin(2) * t1796 - t1456 * pkin(6);
t1437 = (t1613 * t1759 + t1660 * t1614) * t1634 + (t1660 * t1613 - t1614 * t1759) * t1631 + t1825 + pkin(2) * t1797 - t1455 * pkin(6);
t1430 = t1439 * t1663 - t1478 * t1657;
t1429 = t1439 * t1657 + t1478 * t1663;
t1428 = t1438 * t1661 - t1477 * t1655;
t1427 = t1438 * t1655 + t1477 * t1661;
t1426 = t1437 * t1659 - t1476 * t1653;
t1425 = t1437 * t1653 + t1476 * t1659;
t1 = [(t1652 - g(1)) * MDP(12) + (t1674 * t1517 + t1671 * t1538) * t1550 + (t1675 * t1516 + t1672 * t1537) * t1549 + (t1676 * t1515 + t1673 * t1536) * t1548 + ((-t1545 * t1697 - t1546 * t1696 - t1547 * t1695) * MDP(5) + (-t1500 * t1785 - t1501 * t1784 - t1502 * t1783) * MDP(6) + (t1545 * t1733 + t1546 * t1731 + t1547 * t1729) * MDP(7) + (t1545 * t1732 + t1546 * t1730 + t1547 * t1728) * MDP(8) + (t1488 * t1785 + t1489 * t1784 + t1490 * t1783) * MDP(9) + (t1425 * t1785 + t1427 * t1784 + t1429 * t1783) * MDP(10) + (t1426 * t1785 + t1428 * t1784 + t1430 * t1783) * MDP(11)) * t1669; (t1651 - g(2)) * MDP(12) + (t1674 * t1520 + t1671 * t1541) * t1550 + (t1675 * t1519 + t1672 * t1540) * t1549 + (t1676 * t1518 + t1673 * t1539) * t1548 + ((-t1542 * t1697 - t1543 * t1696 - t1544 * t1695) * MDP(5) + (-t1500 * t1788 - t1501 * t1787 - t1502 * t1786) * MDP(6) + (t1542 * t1733 + t1543 * t1731 + t1544 * t1729) * MDP(7) + (t1542 * t1732 + t1543 * t1730 + t1544 * t1728) * MDP(8) + (t1488 * t1788 + t1489 * t1787 + t1490 * t1786) * MDP(9) + (t1425 * t1788 + t1427 * t1787 + t1429 * t1786) * MDP(10) + (t1426 * t1788 + t1428 * t1787 + t1430 * t1786) * MDP(11)) * t1669; ((3 * t1650) - (3 * g(3)) + t1698 + t1699 + t1700) * MDP(1) + (t1432 + t1434 + t1436) * MDP(10) + (t1431 + t1433 + t1435) * MDP(11) + t1824 * MDP(12) + ((t1465 + t1467 + t1469) * MDP(10) + (-t1464 - t1466 - t1468) * MDP(11)) * t1646 + ((t1446 + t1447 + t1450) * MDP(3) + (-t1448 - t1449 - t1451) * MDP(4)) * t1644;];
tauX  = t1;
