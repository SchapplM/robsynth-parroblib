% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:50
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:50:38
% EndTime: 2020-08-06 17:50:52
% DurationCPUTime: 14.34s
% Computational Cost: add. (56373->476), mult. (113181->990), div. (4797->17), fcn. (103914->22), ass. (0->426)
t2711 = cos(qJ(2,3));
t2719 = pkin(7) + pkin(6);
t2675 = t2711 * t2719;
t2705 = sin(qJ(2,3));
t2653 = pkin(2) * t2705 - t2675;
t2698 = sin(pkin(4));
t2700 = cos(pkin(4));
t2704 = sin(qJ(3,3));
t2906 = t2700 * t2704;
t2632 = pkin(3) * t2906 + t2653 * t2698;
t2710 = cos(qJ(3,3));
t2922 = t2698 * t2705;
t2694 = t2710 ^ 2;
t2983 = pkin(3) * t2694;
t2605 = pkin(2) * t2906 + t2632 * t2710 + t2922 * t2983;
t2596 = 0.1e1 / t2605;
t2713 = cos(qJ(2,2));
t2676 = t2713 * t2719;
t2707 = sin(qJ(2,2));
t2654 = pkin(2) * t2707 - t2676;
t2706 = sin(qJ(3,2));
t2904 = t2700 * t2706;
t2633 = pkin(3) * t2904 + t2654 * t2698;
t2712 = cos(qJ(3,2));
t2920 = t2698 * t2707;
t2695 = t2712 ^ 2;
t2982 = pkin(3) * t2695;
t2606 = pkin(2) * t2904 + t2633 * t2712 + t2920 * t2982;
t2599 = 0.1e1 / t2606;
t2715 = cos(qJ(2,1));
t2677 = t2715 * t2719;
t2709 = sin(qJ(2,1));
t2655 = pkin(2) * t2709 - t2677;
t2708 = sin(qJ(3,1));
t2902 = t2700 * t2708;
t2634 = pkin(3) * t2902 + t2655 * t2698;
t2714 = cos(qJ(3,1));
t2918 = t2698 * t2709;
t2696 = t2714 ^ 2;
t2981 = pkin(3) * t2696;
t2607 = pkin(2) * t2902 + t2634 * t2714 + t2918 * t2981;
t2602 = 0.1e1 / t2607;
t3002 = 0.2e1 * t2694 - 0.1e1;
t3001 = 0.2e1 * t2695 - 0.1e1;
t3000 = 0.2e1 * t2696 - 0.1e1;
t2701 = legFrame(3,2);
t2682 = sin(t2701);
t2685 = cos(t2701);
t2717 = xDP(2);
t2718 = xDP(1);
t2644 = t2682 * t2717 - t2685 * t2718;
t2697 = sin(pkin(8));
t2716 = xDP(3);
t2668 = t2716 * t2697;
t2699 = cos(pkin(8));
t2626 = t2644 * t2699 + t2668;
t2907 = t2699 * t2716;
t2629 = t2644 * t2697 - t2907;
t2905 = t2700 * t2705;
t2917 = t2698 * t2710;
t2578 = t2629 * t2917 - (t2626 * t2711 - t2629 * t2905) * t2704;
t2597 = 0.1e1 / t2605 ^ 2;
t2566 = t2578 ^ 2 * t2597;
t2702 = legFrame(2,2);
t2683 = sin(t2702);
t2686 = cos(t2702);
t2645 = t2683 * t2717 - t2686 * t2718;
t2627 = t2645 * t2699 + t2668;
t2630 = t2645 * t2697 - t2907;
t2903 = t2700 * t2707;
t2915 = t2698 * t2712;
t2579 = t2630 * t2915 - (t2627 * t2713 - t2630 * t2903) * t2706;
t2600 = 0.1e1 / t2606 ^ 2;
t2567 = t2579 ^ 2 * t2600;
t2703 = legFrame(1,2);
t2684 = sin(t2703);
t2687 = cos(t2703);
t2646 = t2684 * t2717 - t2687 * t2718;
t2628 = t2646 * t2699 + t2668;
t2631 = t2646 * t2697 - t2907;
t2901 = t2700 * t2709;
t2913 = t2698 * t2714;
t2580 = t2631 * t2913 - (t2628 * t2715 - t2631 * t2901) * t2708;
t2603 = 0.1e1 / t2607 ^ 2;
t2568 = t2580 ^ 2 * t2603;
t2674 = t2709 * t2719;
t2658 = pkin(2) * t2715 + t2674;
t2898 = t2700 * t2715;
t2925 = t2697 * t2700;
t2978 = pkin(3) * t2714;
t2595 = (t2697 * t2898 + t2699 * t2709) * t2978 + t2658 * t2925 + t2655 * t2699;
t2640 = t2697 * t2901 - t2699 * t2715;
t2622 = t2640 * t2708 + t2697 * t2913;
t2671 = pkin(2) + t2978;
t2649 = t2671 * t2709 - t2677;
t2586 = t2631 * (t2671 * t2715 + t2674) * t2700 + t2628 * t2649;
t2652 = t2671 * t2902;
t2619 = t2649 * t2913 + t2652;
t2950 = t2586 / t2619;
t2870 = 0.2e1 * t2950;
t2953 = t2580 * t2603;
t2768 = t2870 * t2953;
t2887 = t2708 * t2714;
t2959 = t2602 * t2568;
t2996 = (-t2595 * t2959 + t2622 * t2768) * t2887;
t2673 = t2707 * t2719;
t2657 = pkin(2) * t2713 + t2673;
t2899 = t2700 * t2713;
t2979 = pkin(3) * t2712;
t2594 = (t2697 * t2899 + t2699 * t2707) * t2979 + t2657 * t2925 + t2654 * t2699;
t2639 = t2697 * t2903 - t2699 * t2713;
t2621 = t2639 * t2706 + t2697 * t2915;
t2670 = pkin(2) + t2979;
t2648 = t2670 * t2707 - t2676;
t2585 = t2630 * (t2670 * t2713 + t2673) * t2700 + t2627 * t2648;
t2651 = t2670 * t2904;
t2618 = t2648 * t2915 + t2651;
t2951 = t2585 / t2618;
t2871 = 0.2e1 * t2951;
t2955 = t2579 * t2600;
t2769 = t2871 * t2955;
t2891 = t2706 * t2712;
t2960 = t2599 * t2567;
t2995 = (-t2594 * t2960 + t2621 * t2769) * t2891;
t2672 = t2705 * t2719;
t2656 = pkin(2) * t2711 + t2672;
t2900 = t2700 * t2711;
t2980 = pkin(3) * t2710;
t2593 = (t2697 * t2900 + t2699 * t2705) * t2980 + t2656 * t2925 + t2653 * t2699;
t2638 = t2697 * t2905 - t2699 * t2711;
t2620 = t2638 * t2704 + t2697 * t2917;
t2669 = pkin(2) + t2980;
t2647 = t2669 * t2705 - t2675;
t2584 = t2629 * (t2669 * t2711 + t2672) * t2700 + t2626 * t2647;
t2650 = t2669 * t2906;
t2617 = t2647 * t2917 + t2650;
t2952 = t2584 / t2617;
t2872 = 0.2e1 * t2952;
t2957 = t2578 * t2597;
t2770 = t2872 * t2957;
t2895 = t2704 * t2710;
t2961 = t2596 * t2566;
t2994 = (-t2593 * t2961 + t2620 * t2770) * t2895;
t2722 = 0.1e1 / pkin(3) ^ 2;
t2830 = t2584 ^ 2 / t2617 ^ 2 * t2722;
t2779 = t2704 * t2830;
t2893 = t2705 * t2710;
t2635 = pkin(3) * t2893 + t2653;
t2958 = t2578 * t2596;
t2835 = t2719 * t2958;
t2782 = t2704 * t2835;
t2721 = 0.1e1 / pkin(3);
t2825 = t2721 * t2952;
t2678 = pkin(2) ^ 2 + t2719 ^ 2;
t2720 = pkin(3) ^ 2;
t2826 = t2704 * t2952;
t2987 = 0.2e1 * pkin(2);
t2977 = pkin(3) * t2987;
t2845 = (-t2719 * t2826 + (t2694 * t2720 + t2710 * t2977 + t2678) * t2958) * t2957;
t2884 = t2710 * t2721;
t2894 = t2704 * t2721;
t2897 = t2700 * t2721;
t2536 = -t2845 * t2897 - (-t2700 * t2782 + (-t2635 * t2698 * t2894 + t2700 * (pkin(2) * t2884 + t2694)) * t2952) / (t2635 * t2917 + t2650) * t2825;
t2969 = t2536 * t2710;
t2739 = t2779 - t2969;
t2560 = t2782 - t2952;
t2773 = t2711 * t2825;
t2818 = t2698 * t2893;
t2827 = t2596 * t2952;
t2940 = t2596 * t2711;
t2836 = t2578 * t2940;
t2533 = -((t2698 * t2836 + t2700 * t2825) * t2983 + ((-t2826 + t2835) * t2705 + pkin(2) * t2836) * t2917 + t2700 * t2560) * t2596 * t2958 - (t2698 * t2773 + (t2694 * t2700 - t2704 * t2818 - t2700) * t2958) * t2827;
t2863 = t2533 * t2884;
t2993 = -t2593 * t2863 + t2739 * t2620;
t2778 = t2710 * t2830;
t2970 = t2536 * t2704;
t2740 = t2778 + t2970;
t2864 = t2533 * t2894;
t2992 = t2593 * t2864 + t2740 * t2620;
t2829 = t2585 ^ 2 / t2618 ^ 2 * t2722;
t2777 = t2706 * t2829;
t2889 = t2707 * t2712;
t2636 = pkin(3) * t2889 + t2654;
t2956 = t2579 * t2599;
t2833 = t2719 * t2956;
t2781 = t2706 * t2833;
t2822 = t2721 * t2951;
t2823 = t2706 * t2951;
t2844 = (-t2719 * t2823 + (t2695 * t2720 + t2712 * t2977 + t2678) * t2956) * t2955;
t2883 = t2712 * t2721;
t2890 = t2706 * t2721;
t2537 = -t2844 * t2897 - (-t2700 * t2781 + (-t2636 * t2698 * t2890 + t2700 * (pkin(2) * t2883 + t2695)) * t2951) / (t2636 * t2915 + t2651) * t2822;
t2967 = t2537 * t2712;
t2737 = t2777 - t2967;
t2561 = t2781 - t2951;
t2772 = t2713 * t2822;
t2817 = t2698 * t2889;
t2824 = t2599 * t2951;
t2936 = t2599 * t2713;
t2834 = t2579 * t2936;
t2534 = -((t2698 * t2834 + t2700 * t2822) * t2982 + ((-t2823 + t2833) * t2707 + pkin(2) * t2834) * t2915 + t2700 * t2561) * t2599 * t2956 - (t2698 * t2772 + (t2695 * t2700 - t2706 * t2817 - t2700) * t2956) * t2824;
t2859 = t2534 * t2883;
t2991 = -t2594 * t2859 + t2737 * t2621;
t2776 = t2712 * t2829;
t2968 = t2537 * t2706;
t2738 = t2776 + t2968;
t2860 = t2534 * t2890;
t2990 = t2594 * t2860 + t2738 * t2621;
t2828 = t2586 ^ 2 / t2619 ^ 2 * t2722;
t2775 = t2708 * t2828;
t2885 = t2709 * t2714;
t2637 = pkin(3) * t2885 + t2655;
t2954 = t2580 * t2602;
t2831 = t2719 * t2954;
t2780 = t2708 * t2831;
t2819 = t2721 * t2950;
t2820 = t2708 * t2950;
t2843 = (-t2719 * t2820 + (t2696 * t2720 + t2714 * t2977 + t2678) * t2954) * t2953;
t2882 = t2714 * t2721;
t2886 = t2708 * t2721;
t2538 = -t2843 * t2897 - (-t2700 * t2780 + (-t2637 * t2698 * t2886 + t2700 * (pkin(2) * t2882 + t2696)) * t2950) / (t2637 * t2913 + t2652) * t2819;
t2965 = t2538 * t2714;
t2735 = t2775 - t2965;
t2562 = t2780 - t2950;
t2771 = t2715 * t2819;
t2816 = t2698 * t2885;
t2821 = t2602 * t2950;
t2932 = t2602 * t2715;
t2832 = t2580 * t2932;
t2535 = -((t2698 * t2832 + t2700 * t2819) * t2981 + ((-t2820 + t2831) * t2709 + pkin(2) * t2832) * t2913 + t2700 * t2562) * t2602 * t2954 - (t2698 * t2771 + (t2696 * t2700 - t2708 * t2816 - t2700) * t2954) * t2821;
t2855 = t2535 * t2882;
t2989 = -t2595 * t2855 + t2735 * t2622;
t2774 = t2714 * t2828;
t2966 = t2538 * t2708;
t2736 = t2774 + t2966;
t2856 = t2535 * t2886;
t2988 = t2595 * t2856 + t2736 * t2622;
t2986 = pkin(2) * t2704;
t2985 = pkin(2) * t2706;
t2984 = pkin(2) * t2708;
t2976 = MDP(3) * t2698;
t2975 = MDP(4) * t2698;
t2974 = MDP(9) * t2721;
t2973 = t2533 * t2596;
t2972 = t2534 * t2599;
t2971 = t2535 * t2602;
t2539 = t2710 * t2845 + (pkin(2) * t2825 - t2560 * t2710) * t2827;
t2964 = t2539 * t2596;
t2540 = t2712 * t2844 + (pkin(2) * t2822 - t2561 * t2712) * t2824;
t2963 = t2540 * t2599;
t2541 = t2714 * t2843 + (pkin(2) * t2819 - t2562 * t2714) * t2821;
t2962 = t2541 * t2602;
t2911 = t2699 * t2700;
t2590 = (t2697 * t2705 - t2699 * t2900) * t2980 - t2656 * t2911 + t2697 * t2653;
t2949 = t2590 * t2596;
t2591 = (t2697 * t2707 - t2699 * t2899) * t2979 - t2657 * t2911 + t2697 * t2654;
t2948 = t2591 * t2599;
t2592 = (t2697 * t2709 - t2699 * t2898) * t2978 - t2658 * t2911 + t2697 * t2655;
t2947 = t2592 * t2602;
t2946 = t2593 * t2596;
t2945 = t2594 * t2599;
t2944 = t2595 * t2602;
t2943 = t2596 * t2682;
t2942 = t2596 * t2685;
t2941 = t2596 * t2705;
t2939 = t2599 * t2683;
t2938 = t2599 * t2686;
t2937 = t2599 * t2707;
t2935 = t2602 * t2684;
t2934 = t2602 * t2687;
t2933 = t2602 * t2709;
t2931 = t2620 * t2682;
t2930 = t2620 * t2685;
t2929 = t2621 * t2683;
t2928 = t2621 * t2686;
t2927 = t2622 * t2684;
t2926 = t2622 * t2687;
t2924 = t2698 * t2699;
t2923 = t2698 * t2704;
t2921 = t2698 * t2706;
t2919 = t2698 * t2708;
t2916 = t2698 * t2711;
t2914 = t2698 * t2713;
t2912 = t2698 * t2715;
t2910 = t2699 * t2710;
t2909 = t2699 * t2712;
t2908 = t2699 * t2714;
t2896 = t2704 * t2705;
t2892 = t2706 * t2707;
t2888 = t2708 * t2709;
t2527 = t2533 * t2916 + t2536 * t2700;
t2563 = t2566 + t2830;
t2755 = -0.2e1 * t2773 * t2958;
t2881 = t2527 * t2710 - t2700 * t2779 + (-t2536 * t2896 - t2563 * t2893 + t2704 * t2755) * t2698;
t2880 = -t2527 * t2704 - t2536 * t2818 + (t2563 * t2896 + t2710 * t2755) * t2698 - t2700 * t2778;
t2528 = t2534 * t2914 + t2537 * t2700;
t2564 = t2567 + t2829;
t2754 = -0.2e1 * t2772 * t2956;
t2879 = t2528 * t2712 - t2700 * t2777 + (-t2537 * t2892 - t2564 * t2889 + t2706 * t2754) * t2698;
t2878 = -t2528 * t2706 - t2537 * t2817 + (t2564 * t2892 + t2712 * t2754) * t2698 - t2700 * t2776;
t2529 = t2535 * t2912 + t2538 * t2700;
t2565 = t2568 + t2828;
t2753 = -0.2e1 * t2771 * t2954;
t2877 = t2529 * t2714 - t2700 * t2775 + (-t2538 * t2888 - t2565 * t2885 + t2708 * t2753) * t2698;
t2876 = -t2529 * t2708 - t2538 * t2816 + (t2565 * t2888 + t2714 * t2753) * t2698 - t2700 * t2774;
t2869 = pkin(2) * t2958;
t2868 = pkin(2) * t2956;
t2867 = pkin(2) * t2954;
t2866 = t2620 * t2973;
t2865 = t2704 ^ 2 * t2973;
t2862 = t2621 * t2972;
t2861 = t2706 ^ 2 * t2972;
t2858 = t2622 * t2971;
t2857 = t2708 ^ 2 * t2971;
t2854 = t2536 * t2946;
t2853 = t2537 * t2945;
t2852 = t2538 * t2944;
t2851 = t2539 * t2941;
t2850 = t2539 * t2940;
t2849 = t2540 * t2937;
t2848 = t2540 * t2936;
t2847 = t2541 * t2933;
t2846 = t2541 * t2932;
t2842 = t2704 * t2961;
t2841 = t2710 * t2961;
t2840 = t2706 * t2960;
t2839 = t2712 * t2960;
t2838 = t2708 * t2959;
t2837 = t2714 * t2959;
t2815 = t2620 * t2872;
t2641 = t2697 * t2711 + t2699 * t2905;
t2623 = -t2641 * t2704 - t2698 * t2910;
t2814 = -0.2e1 * t2623 * t2952;
t2813 = t2621 * t2871;
t2642 = t2697 * t2713 + t2699 * t2903;
t2624 = -t2642 * t2706 - t2698 * t2909;
t2812 = -0.2e1 * t2624 * t2951;
t2811 = t2622 * t2870;
t2643 = t2697 * t2715 + t2699 * t2901;
t2625 = -t2643 * t2708 - t2698 * t2908;
t2810 = -0.2e1 * t2625 * t2950;
t2809 = pkin(6) * t2825;
t2808 = pkin(6) * t2822;
t2807 = pkin(6) * t2819;
t2804 = t2620 * t2865;
t2803 = t2895 * t2973;
t2800 = t2621 * t2861;
t2799 = t2891 * t2972;
t2796 = t2622 * t2857;
t2795 = t2887 * t2971;
t2794 = t2620 * t2851;
t2793 = t2620 * t2850;
t2792 = t2621 * t2849;
t2791 = t2621 * t2848;
t2790 = t2622 * t2847;
t2789 = t2622 * t2846;
t2788 = t2593 * t2842;
t2787 = t2593 * t2841;
t2786 = t2594 * t2840;
t2785 = t2594 * t2839;
t2784 = t2595 * t2838;
t2783 = t2595 * t2837;
t2767 = t2620 * t2803;
t2766 = t2621 * t2799;
t2765 = t2622 * t2795;
t2764 = t3002 * t2770;
t2763 = t3001 * t2769;
t2762 = t3000 * t2768;
t2761 = t2533 * t2987 + t2539 * t2916;
t2760 = t2534 * t2987 + t2540 * t2914;
t2759 = t2535 * t2987 + t2541 * t2912;
t2758 = pkin(3) * t2923 - t2653 * t2700;
t2757 = pkin(3) * t2921 - t2654 * t2700;
t2756 = pkin(3) * t2919 - t2655 * t2700;
t2530 = pkin(6) * t2533 + t2539 * t2922;
t2521 = t2539 * t2700 * t2710 - t2530 * t2704;
t2554 = t2704 * t2869 + t2710 * t2809 / 0.2e1;
t2752 = -t2521 * t2593 + t2554 * t2815;
t2531 = pkin(6) * t2534 + t2540 * t2920;
t2522 = t2540 * t2700 * t2712 - t2531 * t2706;
t2555 = t2706 * t2868 + t2712 * t2808 / 0.2e1;
t2751 = -t2522 * t2594 + t2555 * t2813;
t2532 = pkin(6) * t2535 + t2541 * t2918;
t2523 = t2541 * t2700 * t2714 - t2532 * t2708;
t2556 = t2708 * t2867 + t2714 * t2807 / 0.2e1;
t2750 = -t2523 * t2595 + t2556 * t2811;
t2524 = -t2530 * t2710 - t2539 * t2906;
t2557 = t2710 * t2869 - t2704 * t2809 / 0.2e1;
t2749 = -t2524 * t2593 + t2557 * t2815;
t2525 = -t2531 * t2712 - t2540 * t2904;
t2558 = t2712 * t2868 - t2706 * t2808 / 0.2e1;
t2748 = -t2525 * t2594 + t2558 * t2813;
t2526 = -t2532 * t2714 - t2541 * t2902;
t2559 = t2714 * t2867 - t2708 * t2807 / 0.2e1;
t2747 = -t2526 * t2595 + t2559 * t2811;
t2746 = t2533 * t2940 - t2705 * t2961;
t2745 = -t2533 * t2941 - t2711 * t2961;
t2744 = t2534 * t2936 - t2707 * t2960;
t2743 = -t2534 * t2937 - t2713 * t2960;
t2742 = t2535 * t2932 - t2709 * t2959;
t2741 = -t2535 * t2933 - t2715 * t2959;
t2551 = t3002 * t2566;
t2731 = -t2551 * t2946 + t2620 * t2764;
t2552 = t3001 * t2567;
t2730 = -t2552 * t2945 + t2621 * t2763;
t2553 = t3000 * t2568;
t2729 = -t2553 * t2944 + t2622 * t2762;
t2610 = -t2658 * t2697 + t2756 * t2699;
t2609 = -t2657 * t2697 + t2757 * t2699;
t2608 = -t2656 * t2697 + t2758 * t2699;
t2589 = -t2640 * t2981 + t2658 * t2908 + (pkin(2) * t2919 + t2756 * t2714) * t2697;
t2588 = -t2639 * t2982 + t2657 * t2909 + (pkin(2) * t2921 + t2757 * t2712) * t2697;
t2587 = -t2638 * t2983 + t2656 * t2910 + (pkin(2) * t2923 + t2758 * t2710) * t2697;
t2574 = (t2643 * t2687 + t2684 * t2918) * t2981 + (-t2610 * t2687 + t2634 * t2684) * t2714 + (t2684 * t2700 - t2687 * t2924) * t2984;
t2573 = -(t2643 * t2684 - t2687 * t2918) * t2981 + (t2610 * t2684 + t2634 * t2687) * t2714 + (t2684 * t2924 + t2687 * t2700) * t2984;
t2572 = (t2642 * t2686 + t2683 * t2920) * t2982 + (-t2609 * t2686 + t2633 * t2683) * t2712 + (t2683 * t2700 - t2686 * t2924) * t2985;
t2571 = -(t2642 * t2683 - t2686 * t2920) * t2982 + (t2609 * t2683 + t2633 * t2686) * t2712 + (t2683 * t2924 + t2686 * t2700) * t2985;
t2570 = (t2641 * t2685 + t2682 * t2922) * t2983 + (-t2608 * t2685 + t2632 * t2682) * t2710 + (t2682 * t2700 - t2685 * t2924) * t2986;
t2569 = -(t2641 * t2682 - t2685 * t2922) * t2983 + (t2608 * t2682 + t2632 * t2685) * t2710 + (t2682 * t2924 + t2685 * t2700) * t2986;
t2520 = -pkin(6) * t2966 + t2759 * t2714;
t2519 = -pkin(6) * t2965 - t2759 * t2708;
t2518 = -pkin(6) * t2968 + t2760 * t2712;
t2517 = -pkin(6) * t2967 - t2760 * t2706;
t2516 = -pkin(6) * t2970 + t2761 * t2710;
t2515 = -pkin(6) * t2969 - t2761 * t2704;
t1 = [(t2570 * t2964 + t2572 * t2963 + t2574 * t2962) * MDP(1) + (-t2685 * t2866 - t2686 * t2862 - t2687 * t2858) * MDP(2) + (t2746 * t2570 + t2744 * t2572 + t2742 * t2574 - t2685 * t2793 - t2686 * t2791 - t2687 * t2789) * t2976 + (t2745 * t2570 + t2743 * t2572 + t2741 * t2574 + t2685 * t2794 + t2686 * t2792 + t2687 * t2790) * t2975 + (-t2685 * t2804 - t2686 * t2800 - t2687 * t2796 + (-t2685 * t2994 - t2686 * t2995 - t2687 * t2996) * t2721) * MDP(5) + (-0.2e1 * t2685 * t2767 - 0.2e1 * t2686 * t2766 - 0.2e1 * t2687 * t2765 + (-t2731 * t2685 - t2730 * t2686 - t2729 * t2687) * t2721) * MDP(6) + (-t2934 * t2988 - t2938 * t2990 - t2942 * t2992) * MDP(7) + (t2934 * t2989 + t2938 * t2991 + t2942 * t2993) * MDP(8) + (-t2685 * t2854 - t2686 * t2853 - t2687 * t2852) * t2974 + ((-t2520 * t2926 + t2877 * t2574) * t2602 + (-t2518 * t2928 + t2879 * t2572) * t2599 + (-t2516 * t2930 + t2881 * t2570) * t2596 + (t2750 * t2934 + t2751 * t2938 + t2752 * t2942 + (-t2685 * t2788 - t2686 * t2786 - t2687 * t2784) * pkin(2)) * t2721) * MDP(10) + ((-t2519 * t2926 + t2876 * t2574) * t2602 + (-t2517 * t2928 + t2878 * t2572) * t2599 + (-t2515 * t2930 + t2880 * t2570) * t2596 + (t2747 * t2934 + t2748 * t2938 + t2749 * t2942 + (-t2685 * t2787 - t2686 * t2785 - t2687 * t2783) * pkin(2)) * t2721) * MDP(11); (t2569 * t2964 + t2571 * t2963 + t2573 * t2962) * MDP(1) + (t2682 * t2866 + t2683 * t2862 + t2684 * t2858) * MDP(2) + (t2569 * t2746 + t2571 * t2744 + t2573 * t2742 + t2682 * t2793 + t2683 * t2791 + t2684 * t2789) * t2976 + (t2569 * t2745 + t2571 * t2743 + t2573 * t2741 - t2682 * t2794 - t2683 * t2792 - t2684 * t2790) * t2975 + (t2682 * t2804 + t2683 * t2800 + t2684 * t2796 + (t2682 * t2994 + t2683 * t2995 + t2684 * t2996) * t2721) * MDP(5) + (0.2e1 * t2682 * t2767 + 0.2e1 * t2683 * t2766 + 0.2e1 * t2684 * t2765 + (t2682 * t2731 + t2683 * t2730 + t2684 * t2729) * t2721) * MDP(6) + (t2935 * t2988 + t2939 * t2990 + t2943 * t2992) * MDP(7) + (-t2935 * t2989 - t2939 * t2991 - t2943 * t2993) * MDP(8) + (t2682 * t2854 + t2683 * t2853 + t2684 * t2852) * t2974 + ((t2520 * t2927 + t2877 * t2573) * t2602 + (t2518 * t2929 + t2879 * t2571) * t2599 + (t2516 * t2931 + t2881 * t2569) * t2596 + (-t2750 * t2935 - t2751 * t2939 - t2752 * t2943 + (t2682 * t2788 + t2683 * t2786 + t2684 * t2784) * pkin(2)) * t2721) * MDP(10) + ((t2519 * t2927 + t2876 * t2573) * t2602 + (t2517 * t2929 + t2878 * t2571) * t2599 + (t2515 * t2931 + t2880 * t2569) * t2596 + (-t2747 * t2935 - t2748 * t2939 - t2749 * t2943 + (t2682 * t2787 + t2683 * t2785 + t2684 * t2783) * pkin(2)) * t2721) * MDP(11); (t2587 * t2964 + t2588 * t2963 + t2589 * t2962) * MDP(1) + (t2623 * t2973 + t2624 * t2972 + t2625 * t2971) * MDP(2) + (t2587 * t2746 + t2588 * t2744 + t2589 * t2742 + t2623 * t2850 + t2624 * t2848 + t2625 * t2846) * t2976 + (t2587 * t2745 + t2588 * t2743 + t2589 * t2741 - t2623 * t2851 - t2624 * t2849 - t2625 * t2847) * t2975 + (t2623 * t2865 + t2624 * t2861 + t2625 * t2857 + ((-t2592 * t2959 + t2625 * t2768) * t2887 + (-t2591 * t2960 + t2624 * t2769) * t2891 + (-t2590 * t2961 + t2623 * t2770) * t2895) * t2721) * MDP(5) + (0.2e1 * t2623 * t2803 + 0.2e1 * t2624 * t2799 + 0.2e1 * t2625 * t2795 + (-t2551 * t2949 - t2552 * t2948 - t2553 * t2947 + t2623 * t2764 + t2624 * t2763 + t2625 * t2762) * t2721) * MDP(6) + ((t2592 * t2856 + t2625 * t2736) * t2602 + (t2591 * t2860 + t2624 * t2738) * t2599 + (t2590 * t2864 + t2623 * t2740) * t2596) * MDP(7) + ((t2592 * t2855 - t2625 * t2735) * t2602 + (t2591 * t2859 - t2624 * t2737) * t2599 + (t2590 * t2863 - t2623 * t2739) * t2596) * MDP(8) + (t2536 * t2949 + t2537 * t2948 + t2538 * t2947) * t2974 + ((t2625 * t2520 + t2877 * t2589) * t2602 + (t2624 * t2518 + t2879 * t2588) * t2599 + (t2623 * t2516 + t2881 * t2587) * t2596 + ((t2592 * t2523 + t2556 * t2810) * t2602 + (t2591 * t2522 + t2555 * t2812) * t2599 + (t2590 * t2521 + t2554 * t2814) * t2596 + (t2590 * t2842 + t2591 * t2840 + t2592 * t2838) * pkin(2)) * t2721) * MDP(10) + ((t2625 * t2519 + t2876 * t2589) * t2602 + (t2624 * t2517 + t2878 * t2588) * t2599 + (t2623 * t2515 + t2880 * t2587) * t2596 + ((t2592 * t2526 + t2559 * t2810) * t2602 + (t2591 * t2525 + t2558 * t2812) * t2599 + (t2590 * t2524 + t2557 * t2814) * t2596 + (t2590 * t2841 + t2591 * t2839 + t2592 * t2837) * pkin(2)) * t2721) * MDP(11);];
taucX  = t1;
