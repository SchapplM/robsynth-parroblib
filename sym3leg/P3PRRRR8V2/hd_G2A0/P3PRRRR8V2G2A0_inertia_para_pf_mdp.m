% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:50
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3PRRRR8V2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:50:30
% EndTime: 2020-08-06 17:50:38
% DurationCPUTime: 8.24s
% Computational Cost: add. (13434->490), mult. (31299->1094), div. (1272->8), fcn. (31404->22), ass. (0->397)
t2247 = sin(pkin(8));
t2249 = cos(pkin(8));
t2261 = cos(qJ(2,3));
t2250 = cos(pkin(4));
t2255 = sin(qJ(2,3));
t2415 = t2250 * t2255;
t2217 = t2247 * t2415 - t2249 * t2261;
t2254 = sin(qJ(3,3));
t2260 = cos(qJ(3,3));
t2248 = sin(pkin(4));
t2433 = t2247 * t2248;
t2208 = t2217 * t2254 + t2260 * t2433;
t2220 = t2247 * t2261 + t2249 * t2415;
t2419 = t2249 * t2260;
t2211 = -t2220 * t2254 - t2248 * t2419;
t2508 = t2208 * t2211;
t2266 = pkin(7) + pkin(6);
t2226 = pkin(2) * t2261 + t2255 * t2266;
t2223 = pkin(2) * t2255 - t2261 * t2266;
t2430 = t2248 * t2254;
t2307 = pkin(3) * t2430 - t2223 * t2250;
t2199 = -t2226 * t2247 + t2307 * t2249;
t2416 = t2250 * t2254;
t2214 = pkin(3) * t2416 + t2223 * t2248;
t2251 = legFrame(3,2);
t2235 = sin(t2251);
t2238 = cos(t2251);
t2429 = t2248 * t2255;
t2431 = t2248 * t2249;
t2490 = pkin(3) * t2260 ^ 2;
t2493 = pkin(2) * t2254;
t2172 = -(t2220 * t2235 - t2238 * t2429) * t2490 + (t2199 * t2235 + t2214 * t2238) * t2260 + (t2235 * t2431 + t2238 * t2250) * t2493;
t2173 = (t2220 * t2238 + t2235 * t2429) * t2490 + (-t2199 * t2238 + t2214 * t2235) * t2260 + (t2235 * t2250 - t2238 * t2431) * t2493;
t2507 = t2208 * (t2172 * t2238 - t2173 * t2235);
t2263 = cos(qJ(2,2));
t2257 = sin(qJ(2,2));
t2413 = t2250 * t2257;
t2218 = t2247 * t2413 - t2249 * t2263;
t2256 = sin(qJ(3,2));
t2262 = cos(qJ(3,2));
t2209 = t2218 * t2256 + t2262 * t2433;
t2221 = t2247 * t2263 + t2249 * t2413;
t2418 = t2249 * t2262;
t2212 = -t2221 * t2256 - t2248 * t2418;
t2506 = t2209 * t2212;
t2227 = pkin(2) * t2263 + t2257 * t2266;
t2224 = pkin(2) * t2257 - t2263 * t2266;
t2428 = t2248 * t2256;
t2306 = pkin(3) * t2428 - t2224 * t2250;
t2200 = -t2227 * t2247 + t2306 * t2249;
t2414 = t2250 * t2256;
t2215 = pkin(3) * t2414 + t2224 * t2248;
t2252 = legFrame(2,2);
t2236 = sin(t2252);
t2239 = cos(t2252);
t2427 = t2248 * t2257;
t2489 = pkin(3) * t2262 ^ 2;
t2492 = pkin(2) * t2256;
t2174 = -(t2221 * t2236 - t2239 * t2427) * t2489 + (t2200 * t2236 + t2215 * t2239) * t2262 + (t2236 * t2431 + t2239 * t2250) * t2492;
t2175 = (t2221 * t2239 + t2236 * t2427) * t2489 + (-t2200 * t2239 + t2215 * t2236) * t2262 + (t2236 * t2250 - t2239 * t2431) * t2492;
t2505 = t2209 * (t2174 * t2239 - t2175 * t2236);
t2265 = cos(qJ(2,1));
t2259 = sin(qJ(2,1));
t2411 = t2250 * t2259;
t2219 = t2247 * t2411 - t2249 * t2265;
t2258 = sin(qJ(3,1));
t2264 = cos(qJ(3,1));
t2210 = t2219 * t2258 + t2264 * t2433;
t2222 = t2247 * t2265 + t2249 * t2411;
t2417 = t2249 * t2264;
t2213 = -t2222 * t2258 - t2248 * t2417;
t2504 = t2210 * t2213;
t2228 = pkin(2) * t2265 + t2259 * t2266;
t2225 = pkin(2) * t2259 - t2265 * t2266;
t2426 = t2248 * t2258;
t2305 = pkin(3) * t2426 - t2225 * t2250;
t2201 = -t2228 * t2247 + t2305 * t2249;
t2412 = t2250 * t2258;
t2216 = pkin(3) * t2412 + t2225 * t2248;
t2253 = legFrame(1,2);
t2237 = sin(t2253);
t2240 = cos(t2253);
t2425 = t2248 * t2259;
t2488 = pkin(3) * t2264 ^ 2;
t2491 = pkin(2) * t2258;
t2176 = -(t2222 * t2237 - t2240 * t2425) * t2488 + (t2201 * t2237 + t2216 * t2240) * t2264 + (t2237 * t2431 + t2240 * t2250) * t2491;
t2177 = (t2222 * t2240 + t2237 * t2425) * t2488 + (-t2201 * t2240 + t2216 * t2237) * t2264 + (t2237 * t2250 - t2240 * t2431) * t2491;
t2503 = t2210 * (t2176 * t2240 - t2177 * t2237);
t2180 = -t2219 * t2488 + t2228 * t2417 + (pkin(2) * t2426 + t2305 * t2264) * t2247;
t2198 = pkin(2) * t2412 + t2216 * t2264 + t2425 * t2488;
t2194 = 0.1e1 / t2198;
t2162 = (pkin(6) * t2213 + t2180 * t2425) * t2194;
t2367 = t2194 * t2250 * t2264;
t2118 = -t2162 * t2258 + t2180 * t2367;
t2368 = t2194 * t2412;
t2121 = -t2162 * t2264 - t2180 * t2368;
t2408 = t2250 * t2265;
t2420 = t2249 * t2250;
t2485 = pkin(3) * t2264;
t2186 = (t2247 * t2259 - t2249 * t2408) * t2485 - t2228 * t2420 + t2247 * t2225;
t2422 = t2248 * t2265;
t2498 = 0.2e1 * pkin(2);
t2308 = t2180 * t2422 + t2213 * t2498;
t2267 = 0.1e1 / pkin(3);
t2484 = pkin(6) * t2267;
t2401 = t2264 * t2484;
t2131 = (-t2186 * t2401 - t2308 * t2258) * t2194;
t2404 = t2258 * t2484;
t2132 = (-t2186 * t2404 + t2308 * t2264) * t2194;
t2432 = t2247 * t2250;
t2189 = (t2247 * t2408 + t2249 * t2259) * t2485 + t2228 * t2432 + t2225 * t2249;
t2461 = t2189 * t2267;
t2502 = MDP(10) * (t2118 * t2461 + t2132 * t2210) + MDP(11) * (t2121 * t2461 + t2131 * t2210);
t2179 = -t2218 * t2489 + t2227 * t2418 + (pkin(2) * t2428 + t2306 * t2262) * t2247;
t2197 = pkin(2) * t2414 + t2215 * t2262 + t2427 * t2489;
t2192 = 0.1e1 / t2197;
t2161 = (pkin(6) * t2212 + t2179 * t2427) * t2192;
t2374 = t2192 * t2250 * t2262;
t2117 = -t2161 * t2256 + t2179 * t2374;
t2375 = t2192 * t2414;
t2120 = -t2161 * t2262 - t2179 * t2375;
t2409 = t2250 * t2263;
t2486 = pkin(3) * t2262;
t2185 = (t2247 * t2257 - t2249 * t2409) * t2486 - t2227 * t2420 + t2247 * t2224;
t2423 = t2248 * t2263;
t2309 = t2179 * t2423 + t2212 * t2498;
t2402 = t2262 * t2484;
t2129 = (-t2185 * t2402 - t2309 * t2256) * t2192;
t2405 = t2256 * t2484;
t2130 = (-t2185 * t2405 + t2309 * t2262) * t2192;
t2188 = (t2247 * t2409 + t2249 * t2257) * t2486 + t2227 * t2432 + t2224 * t2249;
t2464 = t2188 * t2267;
t2501 = MDP(10) * (t2117 * t2464 + t2130 * t2209) + MDP(11) * (t2120 * t2464 + t2129 * t2209);
t2178 = -t2217 * t2490 + t2226 * t2419 + (pkin(2) * t2430 + t2307 * t2260) * t2247;
t2196 = pkin(2) * t2416 + t2214 * t2260 + t2429 * t2490;
t2190 = 0.1e1 / t2196;
t2160 = (pkin(6) * t2211 + t2178 * t2429) * t2190;
t2381 = t2190 * t2250 * t2260;
t2116 = -t2160 * t2254 + t2178 * t2381;
t2382 = t2190 * t2416;
t2119 = -t2160 * t2260 - t2178 * t2382;
t2410 = t2250 * t2261;
t2487 = pkin(3) * t2260;
t2184 = (t2247 * t2255 - t2249 * t2410) * t2487 - t2226 * t2420 + t2247 * t2223;
t2424 = t2248 * t2261;
t2310 = t2178 * t2424 + t2211 * t2498;
t2403 = t2260 * t2484;
t2127 = (-t2184 * t2403 - t2310 * t2254) * t2190;
t2406 = t2254 * t2484;
t2128 = (-t2184 * t2406 + t2310 * t2260) * t2190;
t2187 = (t2247 * t2410 + t2249 * t2255) * t2487 + t2226 * t2432 + t2223 * t2249;
t2467 = t2187 * t2267;
t2500 = MDP(10) * (t2116 * t2467 + t2128 * t2208) + MDP(11) * (t2119 * t2467 + t2127 * t2208);
t2499 = -0.2e1 * pkin(2);
t2497 = 2 * MDP(6);
t2496 = 2 * MDP(7);
t2495 = 2 * MDP(8);
t2494 = 0.2e1 * t2248;
t2483 = MDP(3) * t2248;
t2482 = MDP(4) * t2248;
t2481 = MDP(7) * t2267;
t2480 = MDP(8) * t2267;
t2479 = MDP(9) / pkin(3) ^ 2;
t2191 = 0.1e1 / t2196 ^ 2;
t2478 = t2178 * t2191;
t2193 = 0.1e1 / t2197 ^ 2;
t2477 = t2179 * t2193;
t2195 = 0.1e1 / t2198 ^ 2;
t2476 = t2180 * t2195;
t2475 = t2184 * t2190;
t2474 = t2184 * t2267;
t2473 = t2185 * t2192;
t2472 = t2185 * t2267;
t2471 = t2186 * t2194;
t2470 = t2186 * t2267;
t2469 = t2187 * t2190;
t2468 = t2187 * t2191;
t2466 = t2188 * t2192;
t2465 = t2188 * t2193;
t2463 = t2189 * t2194;
t2462 = t2189 * t2195;
t2460 = t2191 * t2211;
t2229 = t2235 ^ 2;
t2459 = t2191 * t2229;
t2232 = t2238 ^ 2;
t2458 = t2191 * t2232;
t2457 = t2191 * t2238;
t2241 = t2254 ^ 2;
t2456 = t2191 * t2241;
t2455 = t2191 * t2255;
t2454 = t2191 * t2261;
t2453 = t2193 * t2212;
t2230 = t2236 ^ 2;
t2452 = t2193 * t2230;
t2233 = t2239 ^ 2;
t2451 = t2193 * t2233;
t2450 = t2193 * t2239;
t2242 = t2256 ^ 2;
t2449 = t2193 * t2242;
t2448 = t2193 * t2257;
t2447 = t2193 * t2263;
t2446 = t2195 * t2213;
t2231 = t2237 ^ 2;
t2445 = t2195 * t2231;
t2234 = t2240 ^ 2;
t2444 = t2195 * t2234;
t2443 = t2195 * t2240;
t2243 = t2258 ^ 2;
t2442 = t2195 * t2243;
t2441 = t2195 * t2259;
t2440 = t2195 * t2265;
t2439 = t2208 * t2235;
t2438 = t2208 * t2238;
t2437 = t2209 * t2236;
t2436 = t2209 * t2239;
t2435 = t2210 * t2237;
t2434 = t2210 * t2240;
t2421 = t2248 * t2267;
t2407 = t2250 * t2267;
t2400 = t2178 * t2460;
t2399 = t2179 * t2453;
t2398 = t2180 * t2446;
t2397 = t2184 * t2468;
t2396 = t2184 * t2460;
t2395 = t2185 * t2465;
t2394 = t2185 * t2453;
t2393 = t2186 * t2462;
t2392 = t2186 * t2446;
t2391 = t2235 * t2469;
t2390 = t2238 * t2469;
t2389 = t2208 * t2468;
t2388 = t2236 * t2466;
t2387 = t2239 * t2466;
t2386 = t2209 * t2465;
t2385 = t2237 * t2463;
t2384 = t2240 * t2463;
t2383 = t2210 * t2462;
t2202 = t2208 ^ 2;
t2380 = t2202 * t2456;
t2379 = t2191 * t2439;
t2378 = t2191 * t2438;
t2377 = t2235 * t2457;
t2376 = t2191 * t2254 * t2260;
t2203 = t2209 ^ 2;
t2373 = t2203 * t2449;
t2372 = t2193 * t2437;
t2371 = t2193 * t2436;
t2370 = t2236 * t2450;
t2369 = t2193 * t2256 * t2262;
t2204 = t2210 ^ 2;
t2366 = t2204 * t2442;
t2365 = t2195 * t2435;
t2364 = t2195 * t2434;
t2363 = t2237 * t2443;
t2362 = t2195 * t2258 * t2264;
t2361 = t2254 * t2424;
t2360 = t2256 * t2423;
t2359 = t2258 * t2422;
t2358 = t2260 * t2424;
t2357 = t2262 * t2423;
t2356 = t2264 * t2422;
t2355 = t2172 * t2379;
t2354 = t2173 * t2378;
t2353 = t2174 * t2372;
t2352 = t2175 * t2371;
t2351 = t2176 * t2365;
t2350 = t2177 * t2364;
t2349 = t2254 * t2389;
t2348 = t2260 * t2389;
t2347 = t2256 * t2386;
t2346 = t2262 * t2386;
t2345 = t2258 * t2383;
t2344 = t2264 * t2383;
t2343 = t2190 * t2255 * t2421;
t2342 = t2202 * t2377;
t2341 = t2202 * t2376;
t2340 = t2456 * t2508;
t2339 = t2192 * t2257 * t2421;
t2338 = t2203 * t2370;
t2337 = t2203 * t2369;
t2336 = t2449 * t2506;
t2335 = t2194 * t2259 * t2421;
t2334 = t2204 * t2363;
t2333 = t2204 * t2362;
t2332 = t2442 * t2504;
t2331 = t2187 * t2208 * t2377;
t2330 = t2188 * t2209 * t2370;
t2329 = t2189 * t2210 * t2363;
t2328 = t2254 * t2343;
t2327 = t2260 * t2343;
t2326 = t2376 * t2508;
t2325 = t2256 * t2339;
t2324 = t2262 * t2339;
t2323 = t2369 * t2506;
t2322 = t2258 * t2335;
t2321 = t2264 * t2335;
t2320 = t2362 * t2504;
t2169 = (t2184 * t2407 + t2211 * t2424) * t2190;
t2145 = t2169 * t2260 - t2184 * t2328;
t2146 = -t2169 * t2254 - t2184 * t2327;
t2319 = t2145 * MDP(10) + t2146 * MDP(11);
t2170 = (t2185 * t2407 + t2212 * t2423) * t2192;
t2147 = t2170 * t2262 - t2185 * t2325;
t2148 = -t2170 * t2256 - t2185 * t2324;
t2318 = t2147 * MDP(10) + t2148 * MDP(11);
t2171 = (t2186 * t2407 + t2213 * t2422) * t2194;
t2149 = t2171 * t2264 - t2186 * t2322;
t2150 = -t2171 * t2258 - t2186 * t2321;
t2317 = t2149 * MDP(10) + t2150 * MDP(11);
t2313 = t2184 * t2208 + t2187 * t2211;
t2312 = t2185 * t2209 + t2188 * t2212;
t2311 = t2186 * t2210 + t2189 * t2213;
t2304 = t2187 * t2328;
t2303 = t2187 * t2327;
t2302 = t2188 * t2325;
t2301 = t2188 * t2324;
t2300 = t2189 * t2322;
t2299 = t2189 * t2321;
t2292 = t2172 * t2211 + t2178 * t2439;
t2291 = -t2173 * t2211 + t2178 * t2438;
t2290 = t2174 * t2212 + t2179 * t2437;
t2289 = -t2175 * t2212 + t2179 * t2436;
t2288 = t2176 * t2213 + t2180 * t2435;
t2287 = -t2177 * t2213 + t2180 * t2434;
t2286 = t2187 * t2403 + 0.2e1 * t2208 * t2493;
t2285 = t2208 * t2260 * t2499 + t2187 * t2406;
t2284 = t2188 * t2402 + 0.2e1 * t2209 * t2492;
t2283 = t2209 * t2262 * t2499 + t2188 * t2405;
t2282 = t2189 * t2401 + 0.2e1 * t2210 * t2491;
t2281 = t2210 * t2264 * t2499 + t2189 * t2404;
t2280 = t2191 * t2235 * t2313;
t2279 = t2313 * t2457;
t2278 = t2193 * t2236 * t2312;
t2277 = t2312 * t2450;
t2276 = t2195 * t2237 * t2311;
t2275 = t2311 * t2443;
t2274 = t2190 * (t2187 * t2407 + t2208 * t2424);
t2273 = t2192 * (t2188 * t2407 + t2209 * t2423);
t2272 = t2194 * (t2189 * t2407 + t2210 * t2422);
t2181 = t2187 ^ 2;
t2182 = t2188 ^ 2;
t2183 = t2189 ^ 2;
t2271 = (t2441 * t2503 + t2448 * t2505 + t2455 * t2507) * t2482 + (-t2440 * t2503 - t2447 * t2505 - t2454 * t2507) * t2483 + (t2172 * t2173 * t2191 + t2174 * t2175 * t2193 + t2176 * t2177 * t2195) * MDP(1) + 0.2e1 * (-t2254 * t2331 - t2256 * t2330 - t2258 * t2329) * t2481 + 0.2e1 * (-t2260 * t2331 - t2262 * t2330 - t2264 * t2329) * t2480 + (-t2181 * t2377 - t2182 * t2370 - t2183 * t2363) * t2479 + (-t2235 * t2238 * t2341 - t2236 * t2239 * t2337 - t2237 * t2240 * t2333) * t2497 + (-t2241 * t2342 - t2242 * t2338 - t2243 * t2334) * MDP(5) + (-t2334 - t2338 - t2342) * MDP(2);
t2270 = (-t2288 * t2441 - t2290 * t2448 - t2292 * t2455) * t2482 + (t2288 * t2440 + t2290 * t2447 + t2292 * t2454) * t2483 + (t2254 * t2280 + t2256 * t2278 + t2258 * t2276) * t2481 + (t2260 * t2280 + t2262 * t2278 + t2264 * t2276) * t2480 + (t2172 * t2478 + t2174 * t2477 + t2176 * t2476) * MDP(1) + (t2235 * t2397 + t2236 * t2395 + t2237 * t2393) * t2479 + (t2235 * t2326 + t2236 * t2323 + t2237 * t2320) * t2497 + (t2235 * t2340 + t2236 * t2336 + t2237 * t2332) * MDP(5) + (t2211 * t2379 + t2212 * t2372 + t2213 * t2365) * MDP(2);
t2269 = (t2287 * t2441 + t2289 * t2448 + t2291 * t2455) * t2482 + (-t2287 * t2440 - t2289 * t2447 - t2291 * t2454) * t2483 + (-t2254 * t2279 - t2256 * t2277 - t2258 * t2275) * t2481 + (-t2260 * t2279 - t2262 * t2277 - t2264 * t2275) * t2480 + (t2173 * t2478 + t2175 * t2477 + t2177 * t2476) * MDP(1) + (-t2238 * t2397 - t2239 * t2395 - t2240 * t2393) * t2479 + (-t2238 * t2326 - t2239 * t2323 - t2240 * t2320) * t2497 + (-t2238 * t2340 - t2239 * t2336 - t2240 * t2332) * MDP(5) + (-t2211 * t2378 - t2212 * t2371 - t2213 * t2364) * MDP(2);
t2207 = t2213 ^ 2;
t2206 = t2212 ^ 2;
t2205 = t2211 ^ 2;
t2168 = t2240 * t2272;
t2167 = t2237 * t2272;
t2166 = t2239 * t2273;
t2165 = t2236 * t2273;
t2164 = t2238 * t2274;
t2163 = t2235 * t2274;
t2156 = (-pkin(6) * t2434 + t2177 * t2425) * t2194;
t2155 = (pkin(6) * t2435 + t2176 * t2425) * t2194;
t2154 = (-pkin(6) * t2436 + t2175 * t2427) * t2192;
t2153 = (pkin(6) * t2437 + t2174 * t2427) * t2192;
t2152 = (-pkin(6) * t2438 + t2173 * t2429) * t2190;
t2151 = (pkin(6) * t2439 + t2172 * t2429) * t2190;
t2144 = -t2168 * t2264 + t2240 * t2300;
t2143 = t2168 * t2258 + t2240 * t2299;
t2142 = -t2167 * t2258 - t2237 * t2299;
t2141 = t2167 * t2264 - t2237 * t2300;
t2140 = -t2166 * t2262 + t2239 * t2302;
t2139 = t2166 * t2256 + t2239 * t2301;
t2138 = -t2165 * t2256 - t2236 * t2301;
t2137 = t2165 * t2262 - t2236 * t2302;
t2136 = -t2164 * t2260 + t2238 * t2304;
t2135 = t2164 * t2254 + t2238 * t2303;
t2134 = -t2163 * t2254 - t2235 * t2303;
t2133 = t2163 * t2260 - t2235 * t2304;
t2113 = (t2177 * t2356 + t2281 * t2240) * t2194;
t2112 = (t2176 * t2356 - t2281 * t2237) * t2194;
t2111 = (-t2177 * t2359 + t2282 * t2240) * t2194;
t2110 = (-t2176 * t2359 - t2282 * t2237) * t2194;
t2109 = (t2175 * t2357 + t2283 * t2239) * t2192;
t2108 = (t2174 * t2357 - t2283 * t2236) * t2192;
t2107 = (-t2175 * t2360 + t2284 * t2239) * t2192;
t2106 = (-t2174 * t2360 - t2284 * t2236) * t2192;
t2105 = (t2173 * t2358 + t2285 * t2238) * t2190;
t2104 = (t2172 * t2358 - t2285 * t2235) * t2190;
t2103 = (-t2173 * t2361 + t2286 * t2238) * t2190;
t2102 = (-t2172 * t2361 - t2286 * t2235) * t2190;
t2099 = -t2156 * t2264 - t2177 * t2368;
t2098 = -t2155 * t2264 - t2176 * t2368;
t2097 = -t2154 * t2262 - t2175 * t2375;
t2096 = -t2153 * t2262 - t2174 * t2375;
t2095 = -t2152 * t2260 - t2173 * t2382;
t2094 = -t2151 * t2260 - t2172 * t2382;
t2093 = -t2156 * t2258 + t2177 * t2367;
t2092 = -t2155 * t2258 + t2176 * t2367;
t2091 = -t2154 * t2256 + t2175 * t2374;
t2090 = -t2153 * t2256 + t2174 * t2374;
t2089 = -t2152 * t2254 + t2173 * t2381;
t2088 = -t2151 * t2254 + t2172 * t2381;
t1 = [(t2173 ^ 2 * t2191 + t2175 ^ 2 * t2193 + t2177 ^ 2 * t2195) * MDP(1) + (t2202 * t2458 + t2203 * t2451 + t2204 * t2444) * MDP(2) + (t2232 * t2380 + t2233 * t2373 + t2234 * t2366) * MDP(5) + (t2232 * t2341 + t2233 * t2337 + t2234 * t2333) * t2497 + MDP(12) + ((-t2113 * t2434 + t2144 * t2177) * MDP(10) + (-t2111 * t2434 + t2143 * t2177) * MDP(11)) * t2194 + ((-t2109 * t2436 + t2140 * t2175) * MDP(10) + (-t2107 * t2436 + t2139 * t2175) * MDP(11)) * t2192 + ((-t2105 * t2438 + t2136 * t2173) * MDP(10) + (-t2103 * t2438 + t2135 * t2173) * MDP(11)) * t2190 + (t2181 * t2458 + t2182 * t2451 + t2183 * t2444) * t2479 + ((-t2261 * t2354 - t2263 * t2352 - t2265 * t2350) * MDP(3) + (t2255 * t2354 + t2257 * t2352 + t2259 * t2350) * MDP(4)) * t2494 + ((-t2089 * t2390 - t2091 * t2387 - t2093 * t2384) * MDP(10) + (-t2095 * t2390 - t2097 * t2387 - t2099 * t2384) * MDP(11) + (t2232 * t2349 + t2233 * t2347 + t2234 * t2345) * t2496 + (t2232 * t2348 + t2233 * t2346 + t2234 * t2344) * t2495) * t2267; ((MDP(10) * t2141 + MDP(11) * t2142) * t2177 + ((-t2092 * t2461 - t2112 * t2210) * MDP(10) + (-t2098 * t2461 - t2110 * t2210) * MDP(11)) * t2240) * t2194 + ((MDP(10) * t2137 + MDP(11) * t2138) * t2175 + ((-t2090 * t2464 - t2108 * t2209) * MDP(10) + (-t2096 * t2464 - t2106 * t2209) * MDP(11)) * t2239) * t2192 + ((MDP(10) * t2133 + MDP(11) * t2134) * t2173 + ((-t2088 * t2467 - t2104 * t2208) * MDP(10) + (-t2094 * t2467 - t2102 * t2208) * MDP(11)) * t2238) * t2190 + t2271; (t2317 * t2177 - t2502 * t2240) * t2194 + (t2318 * t2175 - t2501 * t2239) * t2192 + (t2319 * t2173 - t2500 * t2238) * t2190 + t2269; ((MDP(10) * t2144 + MDP(11) * t2143) * t2176 + ((t2093 * t2461 + t2113 * t2210) * MDP(10) + (t2099 * t2461 + t2111 * t2210) * MDP(11)) * t2237) * t2194 + ((MDP(10) * t2140 + MDP(11) * t2139) * t2174 + ((t2091 * t2464 + t2109 * t2209) * MDP(10) + (t2097 * t2464 + t2107 * t2209) * MDP(11)) * t2236) * t2192 + ((MDP(10) * t2136 + MDP(11) * t2135) * t2172 + ((t2089 * t2467 + t2105 * t2208) * MDP(10) + (t2095 * t2467 + t2103 * t2208) * MDP(11)) * t2235) * t2190 + t2271; (t2172 ^ 2 * t2191 + t2174 ^ 2 * t2193 + t2176 ^ 2 * t2195) * MDP(1) + (t2202 * t2459 + t2203 * t2452 + t2204 * t2445) * MDP(2) + (t2229 * t2380 + t2230 * t2373 + t2231 * t2366) * MDP(5) + (t2229 * t2341 + t2230 * t2337 + t2231 * t2333) * t2497 + MDP(12) + ((t2112 * t2435 + t2141 * t2176) * MDP(10) + (t2110 * t2435 + t2142 * t2176) * MDP(11)) * t2194 + ((t2108 * t2437 + t2137 * t2174) * MDP(10) + (t2106 * t2437 + t2138 * t2174) * MDP(11)) * t2192 + ((t2104 * t2439 + t2133 * t2172) * MDP(10) + (t2102 * t2439 + t2134 * t2172) * MDP(11)) * t2190 + (t2181 * t2459 + t2182 * t2452 + t2183 * t2445) * t2479 + ((t2261 * t2355 + t2263 * t2353 + t2265 * t2351) * MDP(3) + (-t2255 * t2355 - t2257 * t2353 - t2259 * t2351) * MDP(4)) * t2494 + ((t2088 * t2391 + t2090 * t2388 + t2092 * t2385) * MDP(10) + (t2094 * t2391 + t2096 * t2388 + t2098 * t2385) * MDP(11) + (t2229 * t2349 + t2230 * t2347 + t2231 * t2345) * t2496 + (t2229 * t2348 + t2230 * t2346 + t2231 * t2344) * t2495) * t2267; (t2317 * t2176 + t2502 * t2237) * t2194 + (t2318 * t2174 + t2501 * t2236) * t2192 + (t2319 * t2172 + t2500 * t2235) * t2190 + t2270; ((t2093 * t2470 + t2113 * t2213 + t2144 * t2180) * MDP(10) + (t2099 * t2470 + t2111 * t2213 + t2143 * t2180) * MDP(11)) * t2194 + ((t2091 * t2472 + t2109 * t2212 + t2140 * t2179) * MDP(10) + (t2097 * t2472 + t2107 * t2212 + t2139 * t2179) * MDP(11)) * t2192 + ((t2089 * t2474 + t2105 * t2211 + t2136 * t2178) * MDP(10) + (t2095 * t2474 + t2103 * t2211 + t2135 * t2178) * MDP(11)) * t2190 + t2269; ((t2092 * t2470 + t2112 * t2213 + t2141 * t2180) * MDP(10) + (t2098 * t2470 + t2110 * t2213 + t2142 * t2180) * MDP(11)) * t2194 + ((t2090 * t2472 + t2108 * t2212 + t2137 * t2179) * MDP(10) + (t2096 * t2472 + t2106 * t2212 + t2138 * t2179) * MDP(11)) * t2192 + ((t2088 * t2474 + t2104 * t2211 + t2133 * t2178) * MDP(10) + (t2094 * t2474 + t2102 * t2211 + t2134 * t2178) * MDP(11)) * t2190 + t2270; (t2178 ^ 2 * t2191 + t2179 ^ 2 * t2193 + t2180 ^ 2 * t2195) * MDP(1) + (t2191 * t2205 + t2193 * t2206 + t2195 * t2207) * MDP(2) + (t2205 * t2456 + t2206 * t2449 + t2207 * t2442) * MDP(5) + (t2205 * t2376 + t2206 * t2369 + t2207 * t2362) * t2497 + MDP(12) + ((t2132 * t2213 + t2149 * t2180) * MDP(10) + (t2131 * t2213 + t2150 * t2180) * MDP(11)) * t2194 + ((t2130 * t2212 + t2147 * t2179) * MDP(10) + (t2129 * t2212 + t2148 * t2179) * MDP(11)) * t2192 + ((t2128 * t2211 + t2145 * t2178) * MDP(10) + (t2127 * t2211 + t2146 * t2178) * MDP(11)) * t2190 + (t2184 ^ 2 * t2191 + t2185 ^ 2 * t2193 + t2186 ^ 2 * t2195) * t2479 + ((t2261 * t2400 + t2263 * t2399 + t2265 * t2398) * MDP(3) + (-t2255 * t2400 - t2257 * t2399 - t2259 * t2398) * MDP(4)) * t2494 + ((t2116 * t2475 + t2117 * t2473 + t2118 * t2471) * MDP(10) + (t2119 * t2475 + t2120 * t2473 + t2121 * t2471) * MDP(11) + (t2254 * t2396 + t2256 * t2394 + t2258 * t2392) * t2496 + (t2260 * t2396 + t2262 * t2394 + t2264 * t2392) * t2495) * t2267;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
