% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:05
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G3A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:05:43
% EndTime: 2020-08-06 18:05:57
% DurationCPUTime: 14.22s
% Computational Cost: add. (56373->476), mult. (113181->990), div. (4797->17), fcn. (103914->22), ass. (0->423)
t2669 = cos(qJ(2,3));
t2677 = pkin(7) + pkin(6);
t2633 = t2669 * t2677;
t2663 = sin(qJ(2,3));
t2611 = pkin(2) * t2663 - t2633;
t2656 = sin(pkin(4));
t2658 = cos(pkin(4));
t2662 = sin(qJ(3,3));
t2864 = t2658 * t2662;
t2590 = pkin(3) * t2864 + t2611 * t2656;
t2668 = cos(qJ(3,3));
t2877 = t2656 * t2663;
t2652 = t2668 ^ 2;
t2938 = pkin(3) * t2652;
t2563 = pkin(2) * t2864 + t2590 * t2668 + t2877 * t2938;
t2554 = 0.1e1 / t2563;
t2671 = cos(qJ(2,2));
t2634 = t2671 * t2677;
t2665 = sin(qJ(2,2));
t2612 = pkin(2) * t2665 - t2634;
t2664 = sin(qJ(3,2));
t2862 = t2658 * t2664;
t2591 = pkin(3) * t2862 + t2612 * t2656;
t2670 = cos(qJ(3,2));
t2875 = t2656 * t2665;
t2653 = t2670 ^ 2;
t2937 = pkin(3) * t2653;
t2564 = pkin(2) * t2862 + t2591 * t2670 + t2875 * t2937;
t2557 = 0.1e1 / t2564;
t2673 = cos(qJ(2,1));
t2635 = t2673 * t2677;
t2667 = sin(qJ(2,1));
t2613 = pkin(2) * t2667 - t2635;
t2666 = sin(qJ(3,1));
t2860 = t2658 * t2666;
t2592 = pkin(3) * t2860 + t2613 * t2656;
t2672 = cos(qJ(3,1));
t2873 = t2656 * t2667;
t2654 = t2672 ^ 2;
t2936 = pkin(3) * t2654;
t2565 = pkin(2) * t2860 + t2592 * t2672 + t2873 * t2936;
t2560 = 0.1e1 / t2565;
t2957 = 0.2e1 * t2652 - 0.1e1;
t2956 = 0.2e1 * t2653 - 0.1e1;
t2955 = 0.2e1 * t2654 - 0.1e1;
t2659 = legFrame(3,2);
t2640 = sin(t2659);
t2643 = cos(t2659);
t2675 = xDP(2);
t2676 = xDP(1);
t2602 = t2640 * t2675 - t2643 * t2676;
t2655 = sin(pkin(8));
t2674 = xDP(3);
t2626 = t2674 * t2655;
t2657 = cos(pkin(8));
t2584 = t2602 * t2657 + t2626;
t2865 = t2657 * t2674;
t2587 = t2602 * t2655 - t2865;
t2863 = t2658 * t2663;
t2872 = t2656 * t2668;
t2536 = t2584 * t2872 + (t2584 * t2863 + t2587 * t2669) * t2662;
t2555 = 0.1e1 / t2563 ^ 2;
t2524 = t2536 ^ 2 * t2555;
t2660 = legFrame(2,2);
t2641 = sin(t2660);
t2644 = cos(t2660);
t2603 = t2641 * t2675 - t2644 * t2676;
t2585 = t2603 * t2657 + t2626;
t2588 = t2603 * t2655 - t2865;
t2861 = t2658 * t2665;
t2870 = t2656 * t2670;
t2537 = t2585 * t2870 + (t2585 * t2861 + t2588 * t2671) * t2664;
t2558 = 0.1e1 / t2564 ^ 2;
t2525 = t2537 ^ 2 * t2558;
t2661 = legFrame(1,2);
t2642 = sin(t2661);
t2645 = cos(t2661);
t2604 = t2642 * t2675 - t2645 * t2676;
t2586 = t2604 * t2657 + t2626;
t2589 = t2604 * t2655 - t2865;
t2859 = t2658 * t2667;
t2868 = t2656 * t2672;
t2538 = t2586 * t2868 + (t2586 * t2859 + t2589 * t2673) * t2666;
t2561 = 0.1e1 / t2565 ^ 2;
t2526 = t2538 ^ 2 * t2561;
t2632 = t2667 * t2677;
t2616 = pkin(2) * t2673 + t2632;
t2856 = t2658 * t2673;
t2866 = t2657 * t2658;
t2933 = pkin(3) * t2672;
t2550 = (t2655 * t2667 - t2657 * t2856) * t2933 - t2616 * t2866 + t2613 * t2655;
t2601 = t2655 * t2673 + t2657 * t2859;
t2583 = t2601 * t2666 + t2657 * t2868;
t2629 = pkin(2) + t2933;
t2607 = t2629 * t2667 - t2635;
t2544 = (t2629 * t2673 + t2632) * t2586 * t2658 - t2589 * t2607;
t2610 = t2629 * t2860;
t2577 = t2607 * t2868 + t2610;
t2905 = t2544 / t2577;
t2828 = 0.2e1 * t2905;
t2908 = t2538 * t2561;
t2726 = t2828 * t2908;
t2845 = t2666 * t2672;
t2914 = t2560 * t2526;
t2951 = (t2550 * t2914 + t2583 * t2726) * t2845;
t2631 = t2665 * t2677;
t2615 = pkin(2) * t2671 + t2631;
t2857 = t2658 * t2671;
t2934 = pkin(3) * t2670;
t2549 = (t2655 * t2665 - t2657 * t2857) * t2934 - t2615 * t2866 + t2612 * t2655;
t2600 = t2655 * t2671 + t2657 * t2861;
t2582 = t2600 * t2664 + t2657 * t2870;
t2628 = pkin(2) + t2934;
t2606 = t2628 * t2665 - t2634;
t2543 = (t2628 * t2671 + t2631) * t2585 * t2658 - t2588 * t2606;
t2609 = t2628 * t2862;
t2576 = t2606 * t2870 + t2609;
t2906 = t2543 / t2576;
t2829 = 0.2e1 * t2906;
t2910 = t2537 * t2558;
t2727 = t2829 * t2910;
t2849 = t2664 * t2670;
t2915 = t2557 * t2525;
t2950 = (t2549 * t2915 + t2582 * t2727) * t2849;
t2630 = t2663 * t2677;
t2614 = pkin(2) * t2669 + t2630;
t2858 = t2658 * t2669;
t2935 = pkin(3) * t2668;
t2548 = (t2655 * t2663 - t2657 * t2858) * t2935 - t2614 * t2866 + t2611 * t2655;
t2599 = t2655 * t2669 + t2657 * t2863;
t2581 = t2599 * t2662 + t2657 * t2872;
t2627 = pkin(2) + t2935;
t2605 = t2627 * t2663 - t2633;
t2542 = (t2627 * t2669 + t2630) * t2584 * t2658 - t2587 * t2605;
t2608 = t2627 * t2864;
t2575 = t2605 * t2872 + t2608;
t2907 = t2542 / t2575;
t2830 = 0.2e1 * t2907;
t2912 = t2536 * t2555;
t2728 = t2830 * t2912;
t2853 = t2662 * t2668;
t2916 = t2554 * t2524;
t2949 = (t2548 * t2916 + t2581 * t2728) * t2853;
t2680 = 0.1e1 / pkin(3) ^ 2;
t2788 = t2542 ^ 2 / t2575 ^ 2 * t2680;
t2737 = t2662 * t2788;
t2851 = t2663 * t2668;
t2593 = pkin(3) * t2851 + t2611;
t2913 = t2536 * t2554;
t2793 = t2677 * t2913;
t2740 = t2662 * t2793;
t2679 = 0.1e1 / pkin(3);
t2783 = t2679 * t2907;
t2636 = pkin(2) ^ 2 + t2677 ^ 2;
t2678 = pkin(3) ^ 2;
t2784 = t2662 * t2907;
t2942 = 0.2e1 * pkin(2);
t2932 = pkin(3) * t2942;
t2803 = (-t2677 * t2784 + (t2652 * t2678 + t2668 * t2932 + t2636) * t2913) * t2912;
t2842 = t2668 * t2679;
t2852 = t2662 * t2679;
t2855 = t2658 * t2679;
t2494 = -t2803 * t2855 - (-t2658 * t2740 + (-t2593 * t2656 * t2852 + t2658 * (pkin(2) * t2842 + t2652)) * t2907) / (t2593 * t2872 + t2608) * t2783;
t2924 = t2494 * t2668;
t2697 = t2737 - t2924;
t2518 = t2740 - t2907;
t2731 = t2669 * t2783;
t2776 = t2656 * t2851;
t2785 = t2554 * t2907;
t2895 = t2554 * t2669;
t2794 = t2536 * t2895;
t2491 = -((t2656 * t2794 + t2658 * t2783) * t2938 + ((-t2784 + t2793) * t2663 + pkin(2) * t2794) * t2872 + t2658 * t2518) * t2554 * t2913 - (t2656 * t2731 + (t2652 * t2658 - t2662 * t2776 - t2658) * t2913) * t2785;
t2821 = t2491 * t2842;
t2948 = t2548 * t2821 + t2697 * t2581;
t2736 = t2668 * t2788;
t2925 = t2494 * t2662;
t2698 = t2736 + t2925;
t2822 = t2491 * t2852;
t2947 = -t2548 * t2822 + t2698 * t2581;
t2787 = t2543 ^ 2 / t2576 ^ 2 * t2680;
t2735 = t2664 * t2787;
t2847 = t2665 * t2670;
t2594 = pkin(3) * t2847 + t2612;
t2911 = t2537 * t2557;
t2791 = t2677 * t2911;
t2739 = t2664 * t2791;
t2780 = t2679 * t2906;
t2781 = t2664 * t2906;
t2802 = (-t2677 * t2781 + (t2653 * t2678 + t2670 * t2932 + t2636) * t2911) * t2910;
t2841 = t2670 * t2679;
t2848 = t2664 * t2679;
t2495 = -t2802 * t2855 - (-t2658 * t2739 + (-t2594 * t2656 * t2848 + t2658 * (pkin(2) * t2841 + t2653)) * t2906) / (t2594 * t2870 + t2609) * t2780;
t2922 = t2495 * t2670;
t2695 = t2735 - t2922;
t2519 = t2739 - t2906;
t2730 = t2671 * t2780;
t2775 = t2656 * t2847;
t2782 = t2557 * t2906;
t2891 = t2557 * t2671;
t2792 = t2537 * t2891;
t2492 = -((t2656 * t2792 + t2658 * t2780) * t2937 + ((-t2781 + t2791) * t2665 + pkin(2) * t2792) * t2870 + t2658 * t2519) * t2557 * t2911 - (t2656 * t2730 + (t2653 * t2658 - t2664 * t2775 - t2658) * t2911) * t2782;
t2817 = t2492 * t2841;
t2946 = t2549 * t2817 + t2695 * t2582;
t2734 = t2670 * t2787;
t2923 = t2495 * t2664;
t2696 = t2734 + t2923;
t2818 = t2492 * t2848;
t2945 = -t2549 * t2818 + t2696 * t2582;
t2786 = t2544 ^ 2 / t2577 ^ 2 * t2680;
t2733 = t2666 * t2786;
t2843 = t2667 * t2672;
t2595 = pkin(3) * t2843 + t2613;
t2909 = t2538 * t2560;
t2789 = t2677 * t2909;
t2738 = t2666 * t2789;
t2777 = t2679 * t2905;
t2778 = t2666 * t2905;
t2801 = (-t2677 * t2778 + (t2654 * t2678 + t2672 * t2932 + t2636) * t2909) * t2908;
t2840 = t2672 * t2679;
t2844 = t2666 * t2679;
t2496 = -t2801 * t2855 - (-t2658 * t2738 + (-t2595 * t2656 * t2844 + t2658 * (pkin(2) * t2840 + t2654)) * t2905) / (t2595 * t2868 + t2610) * t2777;
t2920 = t2496 * t2672;
t2693 = t2733 - t2920;
t2520 = t2738 - t2905;
t2729 = t2673 * t2777;
t2774 = t2656 * t2843;
t2779 = t2560 * t2905;
t2887 = t2560 * t2673;
t2790 = t2538 * t2887;
t2493 = -((t2656 * t2790 + t2658 * t2777) * t2936 + ((-t2778 + t2789) * t2667 + pkin(2) * t2790) * t2868 + t2658 * t2520) * t2560 * t2909 - (t2656 * t2729 + (t2654 * t2658 - t2666 * t2774 - t2658) * t2909) * t2779;
t2813 = t2493 * t2840;
t2944 = t2550 * t2813 + t2693 * t2583;
t2732 = t2672 * t2786;
t2921 = t2496 * t2666;
t2694 = t2732 + t2921;
t2814 = t2493 * t2844;
t2943 = -t2550 * t2814 + t2694 * t2583;
t2941 = pkin(2) * t2662;
t2940 = pkin(2) * t2664;
t2939 = pkin(2) * t2666;
t2931 = MDP(3) * t2656;
t2930 = MDP(4) * t2656;
t2929 = MDP(9) * t2679;
t2928 = t2491 * t2554;
t2927 = t2492 * t2557;
t2926 = t2493 * t2560;
t2497 = t2668 * t2803 + (pkin(2) * t2783 - t2518 * t2668) * t2785;
t2919 = t2497 * t2554;
t2498 = t2670 * t2802 + (pkin(2) * t2780 - t2519 * t2670) * t2782;
t2918 = t2498 * t2557;
t2499 = t2672 * t2801 + (pkin(2) * t2777 - t2520 * t2672) * t2779;
t2917 = t2499 * t2560;
t2904 = t2548 * t2554;
t2903 = t2549 * t2557;
t2902 = t2550 * t2560;
t2879 = t2655 * t2658;
t2551 = (t2655 * t2858 + t2657 * t2663) * t2935 + t2614 * t2879 + t2611 * t2657;
t2901 = t2551 * t2554;
t2552 = (t2655 * t2857 + t2657 * t2665) * t2934 + t2615 * t2879 + t2612 * t2657;
t2900 = t2552 * t2557;
t2553 = (t2655 * t2856 + t2657 * t2667) * t2933 + t2616 * t2879 + t2613 * t2657;
t2899 = t2553 * t2560;
t2898 = t2554 * t2640;
t2897 = t2554 * t2643;
t2896 = t2554 * t2663;
t2894 = t2557 * t2641;
t2893 = t2557 * t2644;
t2892 = t2557 * t2665;
t2890 = t2560 * t2642;
t2889 = t2560 * t2645;
t2888 = t2560 * t2667;
t2886 = t2581 * t2640;
t2885 = t2581 * t2643;
t2884 = t2582 * t2641;
t2883 = t2582 * t2644;
t2882 = t2583 * t2642;
t2881 = t2583 * t2645;
t2880 = t2655 * t2656;
t2878 = t2656 * t2662;
t2876 = t2656 * t2664;
t2874 = t2656 * t2666;
t2871 = t2656 * t2669;
t2869 = t2656 * t2671;
t2867 = t2656 * t2673;
t2854 = t2662 * t2663;
t2850 = t2664 * t2665;
t2846 = t2666 * t2667;
t2485 = t2491 * t2871 + t2494 * t2658;
t2521 = t2524 + t2788;
t2713 = -0.2e1 * t2731 * t2913;
t2839 = t2485 * t2668 - t2658 * t2737 + (-t2494 * t2854 - t2521 * t2851 + t2662 * t2713) * t2656;
t2838 = -t2485 * t2662 - t2494 * t2776 + (t2521 * t2854 + t2668 * t2713) * t2656 - t2658 * t2736;
t2486 = t2492 * t2869 + t2495 * t2658;
t2522 = t2525 + t2787;
t2712 = -0.2e1 * t2730 * t2911;
t2837 = t2486 * t2670 - t2658 * t2735 + (-t2495 * t2850 - t2522 * t2847 + t2664 * t2712) * t2656;
t2836 = -t2486 * t2664 - t2495 * t2775 + (t2522 * t2850 + t2670 * t2712) * t2656 - t2658 * t2734;
t2487 = t2493 * t2867 + t2496 * t2658;
t2523 = t2526 + t2786;
t2711 = -0.2e1 * t2729 * t2909;
t2835 = t2487 * t2672 - t2658 * t2733 + (-t2496 * t2846 - t2523 * t2843 + t2666 * t2711) * t2656;
t2834 = -t2487 * t2666 - t2496 * t2774 + (t2523 * t2846 + t2672 * t2711) * t2656 - t2658 * t2732;
t2827 = pkin(2) * t2913;
t2826 = pkin(2) * t2911;
t2825 = pkin(2) * t2909;
t2824 = t2581 * t2928;
t2823 = t2662 ^ 2 * t2928;
t2820 = t2582 * t2927;
t2819 = t2664 ^ 2 * t2927;
t2816 = t2583 * t2926;
t2815 = t2666 ^ 2 * t2926;
t2812 = t2494 * t2904;
t2811 = t2495 * t2903;
t2810 = t2496 * t2902;
t2809 = t2497 * t2896;
t2808 = t2497 * t2895;
t2807 = t2498 * t2892;
t2806 = t2498 * t2891;
t2805 = t2499 * t2888;
t2804 = t2499 * t2887;
t2800 = t2662 * t2916;
t2799 = t2668 * t2916;
t2798 = t2664 * t2915;
t2797 = t2670 * t2915;
t2796 = t2666 * t2914;
t2795 = t2672 * t2914;
t2596 = t2655 * t2863 - t2657 * t2669;
t2579 = t2596 * t2662 + t2655 * t2872;
t2773 = -0.2e1 * t2579 * t2907;
t2772 = t2581 * t2830;
t2597 = t2655 * t2861 - t2657 * t2671;
t2580 = t2597 * t2664 + t2655 * t2870;
t2771 = -0.2e1 * t2580 * t2906;
t2770 = t2582 * t2829;
t2598 = t2655 * t2859 - t2657 * t2673;
t2578 = t2598 * t2666 + t2655 * t2868;
t2769 = -0.2e1 * t2578 * t2905;
t2768 = t2583 * t2828;
t2767 = pkin(6) * t2783;
t2766 = pkin(6) * t2780;
t2765 = pkin(6) * t2777;
t2762 = t2581 * t2823;
t2761 = t2853 * t2928;
t2758 = t2582 * t2819;
t2757 = t2849 * t2927;
t2754 = t2583 * t2815;
t2753 = t2845 * t2926;
t2752 = t2581 * t2809;
t2751 = t2581 * t2808;
t2750 = t2582 * t2807;
t2749 = t2582 * t2806;
t2748 = t2583 * t2805;
t2747 = t2583 * t2804;
t2746 = t2548 * t2800;
t2745 = t2548 * t2799;
t2744 = t2549 * t2798;
t2743 = t2549 * t2797;
t2742 = t2550 * t2796;
t2741 = t2550 * t2795;
t2725 = t2581 * t2761;
t2724 = t2582 * t2757;
t2723 = t2583 * t2753;
t2722 = t2957 * t2728;
t2721 = t2956 * t2727;
t2720 = t2955 * t2726;
t2719 = t2491 * t2942 + t2497 * t2871;
t2718 = t2492 * t2942 + t2498 * t2869;
t2717 = t2493 * t2942 + t2499 * t2867;
t2716 = pkin(3) * t2878 - t2611 * t2658;
t2715 = pkin(3) * t2876 - t2612 * t2658;
t2714 = pkin(3) * t2874 - t2613 * t2658;
t2488 = pkin(6) * t2491 + t2497 * t2877;
t2479 = t2497 * t2658 * t2668 - t2488 * t2662;
t2512 = t2662 * t2827 + t2668 * t2767 / 0.2e1;
t2710 = t2479 * t2548 + t2512 * t2772;
t2489 = pkin(6) * t2492 + t2498 * t2875;
t2480 = t2498 * t2658 * t2670 - t2489 * t2664;
t2513 = t2664 * t2826 + t2670 * t2766 / 0.2e1;
t2709 = t2480 * t2549 + t2513 * t2770;
t2490 = pkin(6) * t2493 + t2499 * t2873;
t2481 = t2499 * t2658 * t2672 - t2490 * t2666;
t2514 = t2666 * t2825 + t2672 * t2765 / 0.2e1;
t2708 = t2481 * t2550 + t2514 * t2768;
t2482 = -t2488 * t2668 - t2497 * t2864;
t2515 = t2668 * t2827 - t2662 * t2767 / 0.2e1;
t2707 = t2482 * t2548 + t2515 * t2772;
t2483 = -t2489 * t2670 - t2498 * t2862;
t2516 = t2670 * t2826 - t2664 * t2766 / 0.2e1;
t2706 = t2483 * t2549 + t2516 * t2770;
t2484 = -t2490 * t2672 - t2499 * t2860;
t2517 = t2672 * t2825 - t2666 * t2765 / 0.2e1;
t2705 = t2484 * t2550 + t2517 * t2768;
t2704 = t2491 * t2895 - t2663 * t2916;
t2703 = -t2491 * t2896 - t2669 * t2916;
t2702 = t2492 * t2891 - t2665 * t2915;
t2701 = -t2492 * t2892 - t2671 * t2915;
t2700 = t2493 * t2887 - t2667 * t2914;
t2699 = -t2493 * t2888 - t2673 * t2914;
t2509 = t2957 * t2524;
t2689 = t2509 * t2904 + t2581 * t2722;
t2510 = t2956 * t2525;
t2688 = t2510 * t2903 + t2582 * t2721;
t2511 = t2955 * t2526;
t2687 = t2511 * t2902 + t2583 * t2720;
t2568 = t2616 * t2657 + t2714 * t2655;
t2567 = t2615 * t2657 + t2715 * t2655;
t2566 = t2614 * t2657 + t2716 * t2655;
t2547 = -t2601 * t2936 - t2616 * t2655 * t2672 + (pkin(2) * t2874 + t2714 * t2672) * t2657;
t2546 = -t2600 * t2937 - t2615 * t2655 * t2670 + (pkin(2) * t2876 + t2715 * t2670) * t2657;
t2545 = -t2599 * t2938 - t2614 * t2655 * t2668 + (pkin(2) * t2878 + t2716 * t2668) * t2657;
t2532 = (t2598 * t2642 + t2645 * t2873) * t2936 + (-t2568 * t2642 + t2592 * t2645) * t2672 + (-t2642 * t2880 + t2645 * t2658) * t2939;
t2531 = (t2597 * t2641 + t2644 * t2875) * t2937 + (-t2567 * t2641 + t2591 * t2644) * t2670 + (-t2641 * t2880 + t2644 * t2658) * t2940;
t2530 = (t2596 * t2640 + t2643 * t2877) * t2938 + (-t2566 * t2640 + t2590 * t2643) * t2668 + (-t2640 * t2880 + t2643 * t2658) * t2941;
t2529 = -(t2598 * t2645 - t2642 * t2873) * t2936 + (t2568 * t2645 + t2592 * t2642) * t2672 + (t2642 * t2658 + t2645 * t2880) * t2939;
t2528 = -(t2597 * t2644 - t2641 * t2875) * t2937 + (t2567 * t2644 + t2591 * t2641) * t2670 + (t2641 * t2658 + t2644 * t2880) * t2940;
t2527 = -(t2596 * t2643 - t2640 * t2877) * t2938 + (t2566 * t2643 + t2590 * t2640) * t2668 + (t2640 * t2658 + t2643 * t2880) * t2941;
t2478 = -pkin(6) * t2921 + t2717 * t2672;
t2477 = -pkin(6) * t2920 - t2717 * t2666;
t2476 = -pkin(6) * t2923 + t2718 * t2670;
t2475 = -pkin(6) * t2922 - t2718 * t2664;
t2474 = -pkin(6) * t2925 + t2719 * t2668;
t2473 = -pkin(6) * t2924 - t2719 * t2662;
t1 = [(t2527 * t2919 + t2528 * t2918 + t2529 * t2917) * MDP(1) + (-t2643 * t2824 - t2644 * t2820 - t2645 * t2816) * MDP(2) + (t2704 * t2527 + t2702 * t2528 + t2700 * t2529 - t2643 * t2751 - t2644 * t2749 - t2645 * t2747) * t2931 + (t2703 * t2527 + t2701 * t2528 + t2699 * t2529 + t2643 * t2752 + t2644 * t2750 + t2645 * t2748) * t2930 + (-t2643 * t2762 - t2644 * t2758 - t2645 * t2754 + (-t2643 * t2949 - t2644 * t2950 - t2645 * t2951) * t2679) * MDP(5) + (-0.2e1 * t2643 * t2725 - 0.2e1 * t2644 * t2724 - 0.2e1 * t2645 * t2723 + (-t2689 * t2643 - t2688 * t2644 - t2687 * t2645) * t2679) * MDP(6) + (-t2943 * t2889 - t2945 * t2893 - t2947 * t2897) * MDP(7) + (t2944 * t2889 + t2946 * t2893 + t2948 * t2897) * MDP(8) + (t2643 * t2812 + t2644 * t2811 + t2645 * t2810) * t2929 + ((-t2478 * t2881 + t2835 * t2529) * t2560 + (-t2476 * t2883 + t2837 * t2528) * t2557 + (-t2474 * t2885 + t2839 * t2527) * t2554 + (t2708 * t2889 + t2709 * t2893 + t2710 * t2897 + (t2643 * t2746 + t2644 * t2744 + t2645 * t2742) * pkin(2)) * t2679) * MDP(10) + ((-t2477 * t2881 + t2834 * t2529) * t2560 + (-t2475 * t2883 + t2836 * t2528) * t2557 + (-t2473 * t2885 + t2838 * t2527) * t2554 + (t2705 * t2889 + t2706 * t2893 + t2707 * t2897 + (t2643 * t2745 + t2644 * t2743 + t2645 * t2741) * pkin(2)) * t2679) * MDP(11); (t2530 * t2919 + t2531 * t2918 + t2532 * t2917) * MDP(1) + (t2640 * t2824 + t2641 * t2820 + t2642 * t2816) * MDP(2) + (t2704 * t2530 + t2702 * t2531 + t2700 * t2532 + t2640 * t2751 + t2641 * t2749 + t2642 * t2747) * t2931 + (t2703 * t2530 + t2701 * t2531 + t2699 * t2532 - t2640 * t2752 - t2641 * t2750 - t2642 * t2748) * t2930 + (t2640 * t2762 + t2641 * t2758 + t2642 * t2754 + (t2640 * t2949 + t2641 * t2950 + t2642 * t2951) * t2679) * MDP(5) + (0.2e1 * t2640 * t2725 + 0.2e1 * t2641 * t2724 + 0.2e1 * t2642 * t2723 + (t2689 * t2640 + t2688 * t2641 + t2687 * t2642) * t2679) * MDP(6) + (t2890 * t2943 + t2894 * t2945 + t2898 * t2947) * MDP(7) + (-t2890 * t2944 - t2894 * t2946 - t2898 * t2948) * MDP(8) + (-t2640 * t2812 - t2641 * t2811 - t2642 * t2810) * t2929 + ((t2478 * t2882 + t2835 * t2532) * t2560 + (t2476 * t2884 + t2837 * t2531) * t2557 + (t2474 * t2886 + t2839 * t2530) * t2554 + (-t2708 * t2890 - t2709 * t2894 - t2710 * t2898 + (-t2640 * t2746 - t2641 * t2744 - t2642 * t2742) * pkin(2)) * t2679) * MDP(10) + ((t2477 * t2882 + t2834 * t2532) * t2560 + (t2475 * t2884 + t2836 * t2531) * t2557 + (t2473 * t2886 + t2838 * t2530) * t2554 + (-t2705 * t2890 - t2706 * t2894 - t2707 * t2898 + (-t2640 * t2745 - t2641 * t2743 - t2642 * t2741) * pkin(2)) * t2679) * MDP(11); (t2545 * t2919 + t2546 * t2918 + t2547 * t2917) * MDP(1) + (t2578 * t2926 + t2579 * t2928 + t2580 * t2927) * MDP(2) + (t2545 * t2704 + t2546 * t2702 + t2547 * t2700 + t2578 * t2804 + t2579 * t2808 + t2580 * t2806) * t2931 + (t2545 * t2703 + t2546 * t2701 + t2547 * t2699 - t2578 * t2805 - t2579 * t2809 - t2580 * t2807) * t2930 + (t2579 * t2823 + t2580 * t2819 + t2578 * t2815 + ((-t2553 * t2914 + t2578 * t2726) * t2845 + (-t2552 * t2915 + t2580 * t2727) * t2849 + (-t2551 * t2916 + t2579 * t2728) * t2853) * t2679) * MDP(5) + (0.2e1 * t2579 * t2761 + 0.2e1 * t2580 * t2757 + 0.2e1 * t2578 * t2753 + (-t2509 * t2901 - t2510 * t2900 - t2511 * t2899 + t2578 * t2720 + t2579 * t2722 + t2580 * t2721) * t2679) * MDP(6) + ((t2553 * t2814 + t2578 * t2694) * t2560 + (t2552 * t2818 + t2580 * t2696) * t2557 + (t2551 * t2822 + t2579 * t2698) * t2554) * MDP(7) + ((t2553 * t2813 - t2578 * t2693) * t2560 + (t2552 * t2817 - t2580 * t2695) * t2557 + (t2551 * t2821 - t2579 * t2697) * t2554) * MDP(8) + (t2494 * t2901 + t2495 * t2900 + t2496 * t2899) * t2929 + ((t2578 * t2478 + t2835 * t2547) * t2560 + (t2580 * t2476 + t2837 * t2546) * t2557 + (t2579 * t2474 + t2839 * t2545) * t2554 + ((t2553 * t2481 + t2514 * t2769) * t2560 + (t2552 * t2480 + t2513 * t2771) * t2557 + (t2551 * t2479 + t2512 * t2773) * t2554 + (t2551 * t2800 + t2552 * t2798 + t2553 * t2796) * pkin(2)) * t2679) * MDP(10) + ((t2578 * t2477 + t2834 * t2547) * t2560 + (t2580 * t2475 + t2836 * t2546) * t2557 + (t2579 * t2473 + t2838 * t2545) * t2554 + ((t2553 * t2484 + t2517 * t2769) * t2560 + (t2552 * t2483 + t2516 * t2771) * t2557 + (t2551 * t2482 + t2515 * t2773) * t2554 + (t2551 * t2799 + t2552 * t2797 + t2553 * t2795) * pkin(2)) * t2679) * MDP(11);];
taucX  = t1;
