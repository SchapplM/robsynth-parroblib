% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3PRRRR8V2G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G4A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:16:21
% EndTime: 2020-08-06 18:16:24
% DurationCPUTime: 3.79s
% Computational Cost: add. (2205->307), mult. (4833->618), div. (81->10), fcn. (5409->34), ass. (0->265)
t1909 = legFrame(3,2);
t1887 = sin(t1909);
t1890 = cos(t1909);
t1906 = legFrame(3,1);
t1878 = sin(t1906);
t1884 = cos(t1906);
t2043 = -g(2) * t1878 + g(3) * t1884;
t1809 = t1887 * g(1) + t2043 * t1890;
t1910 = legFrame(2,2);
t1888 = sin(t1910);
t1891 = cos(t1910);
t1907 = legFrame(2,1);
t1879 = sin(t1907);
t1885 = cos(t1907);
t2044 = -g(2) * t1879 + g(3) * t1885;
t1810 = t1888 * g(1) + t2044 * t1891;
t1911 = legFrame(1,2);
t1889 = sin(t1911);
t1892 = cos(t1911);
t1908 = legFrame(1,1);
t1880 = sin(t1908);
t1886 = cos(t1908);
t2045 = -g(2) * t1880 + g(3) * t1886;
t1811 = t1889 * g(1) + t2045 * t1892;
t1903 = legFrame(3,3);
t1875 = sin(t1903);
t1881 = cos(t1903);
t1899 = sin(pkin(8));
t1901 = cos(pkin(8));
t1824 = t1901 * t1875 + t1899 * t1881;
t1900 = sin(pkin(4));
t2048 = t1824 * t1900;
t1904 = legFrame(2,3);
t1876 = sin(t1904);
t1882 = cos(t1904);
t1825 = t1901 * t1876 + t1899 * t1882;
t2047 = t1825 * t1900;
t1905 = legFrame(1,3);
t1877 = sin(t1905);
t1883 = cos(t1905);
t1826 = t1901 * t1877 + t1899 * t1883;
t2046 = t1826 * t1900;
t1845 = t1884 * g(2) + t1878 * g(3);
t1937 = t1890 * g(1) - t1887 * t2043;
t2042 = t1875 * t1845 + t1881 * t1937;
t1846 = t1885 * g(2) + t1879 * g(3);
t1936 = t1891 * g(1) - t1888 * t2044;
t2041 = t1876 * t1846 + t1882 * t1936;
t1847 = t1886 * g(2) + t1880 * g(3);
t1935 = t1892 * g(1) - t1889 * t2045;
t2040 = t1877 * t1847 + t1883 * t1935;
t2039 = -t1881 * t1845 + t1875 * t1937;
t2038 = -t1882 * t1846 + t1876 * t1936;
t2037 = -t1883 * t1847 + t1877 * t1935;
t1918 = cos(qJ(3,3));
t2036 = pkin(3) * t1918 ^ 2;
t1920 = cos(qJ(3,2));
t2035 = pkin(3) * t1920 ^ 2;
t1922 = cos(qJ(3,1));
t2034 = pkin(3) * t1922 ^ 2;
t1912 = sin(qJ(3,3));
t2024 = t1912 * pkin(2);
t1914 = sin(qJ(3,2));
t2023 = t1914 * pkin(2);
t1916 = sin(qJ(3,1));
t2022 = t1916 * pkin(2);
t1775 = t1899 * t1847 + t1901 * t1935;
t1778 = -t1847 * t1901 + t1899 * t1935;
t1902 = cos(pkin(4));
t1917 = sin(qJ(2,1));
t1923 = cos(qJ(2,1));
t1983 = t1900 * t1811;
t1719 = (-t1983 + (t1775 * t1877 + t1778 * t1883) * t1902) * t1923 + t1917 * (t1775 * t1883 - t1877 * t1778);
t1868 = t1922 * pkin(3) + pkin(2);
t1974 = t1902 * t1916;
t1853 = t1868 * t1974;
t1924 = pkin(7) + pkin(6);
t1874 = t1924 * t1923;
t1856 = pkin(2) * t1917 - t1874;
t1951 = t1922 * t1900;
t1956 = t1917 * t1922;
t1802 = 0.1e1 / (t1853 + (pkin(3) * t1956 + t1856) * t1951);
t2021 = t1719 * t1802;
t1773 = t1899 * t1845 + t1901 * t1937;
t1776 = -t1845 * t1901 + t1899 * t1937;
t1913 = sin(qJ(2,3));
t1919 = cos(qJ(2,3));
t1985 = t1900 * t1809;
t1720 = (-t1985 + (t1773 * t1875 + t1776 * t1881) * t1902) * t1919 + (t1773 * t1881 - t1875 * t1776) * t1913;
t1866 = t1918 * pkin(3) + pkin(2);
t1978 = t1902 * t1912;
t1851 = t1866 * t1978;
t1872 = t1924 * t1919;
t1854 = pkin(2) * t1913 - t1872;
t1954 = t1918 * t1900;
t1966 = t1913 * t1918;
t1800 = 0.1e1 / (t1851 + (pkin(3) * t1966 + t1854) * t1954);
t2020 = t1720 * t1800;
t1774 = t1899 * t1846 + t1901 * t1936;
t1777 = -t1846 * t1901 + t1899 * t1936;
t1915 = sin(qJ(2,2));
t1921 = cos(qJ(2,2));
t1984 = t1900 * t1810;
t1721 = (-t1984 + (t1774 * t1876 + t1777 * t1882) * t1902) * t1921 + t1915 * (t1774 * t1882 - t1777 * t1876);
t1867 = t1920 * pkin(3) + pkin(2);
t1976 = t1902 * t1914;
t1852 = t1867 * t1976;
t1873 = t1924 * t1921;
t1855 = pkin(2) * t1915 - t1873;
t1961 = t1915 * t1920;
t1979 = t1900 * t1920;
t1801 = 0.1e1 / (t1852 + (pkin(3) * t1961 + t1855) * t1979);
t2019 = t1721 * t1801;
t1821 = -t1899 * t1875 + t1881 * t1901;
t1988 = t1884 * t1887;
t1767 = t1821 * t1988 - t1878 * t1824;
t1977 = t1902 * t1913;
t1827 = t1899 * t1977 - t1901 * t1919;
t1830 = t1899 * t1919 + t1901 * t1977;
t1788 = -t1875 * t1827 + t1830 * t1881;
t1931 = t1827 * t1881 + t1875 * t1830;
t1734 = (t1788 * t1988 - t1878 * t1931) * t1912 + t1767 * t1954;
t2018 = t1734 * t1800;
t1822 = -t1899 * t1876 + t1882 * t1901;
t1987 = t1885 * t1888;
t1768 = t1822 * t1987 - t1879 * t1825;
t1975 = t1902 * t1915;
t1828 = t1899 * t1975 - t1901 * t1921;
t1831 = t1899 * t1921 + t1901 * t1975;
t1789 = -t1876 * t1828 + t1831 * t1882;
t1930 = t1828 * t1882 + t1876 * t1831;
t1735 = (t1789 * t1987 - t1879 * t1930) * t1914 + t1768 * t1979;
t2017 = t1735 * t1801;
t1823 = -t1899 * t1877 + t1883 * t1901;
t1986 = t1886 * t1889;
t1769 = t1823 * t1986 - t1880 * t1826;
t1973 = t1902 * t1917;
t1829 = t1899 * t1973 - t1901 * t1923;
t1832 = t1899 * t1923 + t1901 * t1973;
t1790 = -t1877 * t1829 + t1832 * t1883;
t1929 = t1829 * t1883 + t1877 * t1832;
t1736 = (t1790 * t1986 - t1880 * t1929) * t1916 + t1769 * t1951;
t2016 = t1736 * t1802;
t1996 = t1878 * t1887;
t1770 = t1821 * t1996 + t1824 * t1884;
t1737 = (-t1788 * t1996 - t1931 * t1884) * t1912 - t1770 * t1954;
t2015 = t1737 * t1800;
t1994 = t1879 * t1888;
t1771 = t1822 * t1994 + t1825 * t1885;
t1738 = (-t1789 * t1994 - t1930 * t1885) * t1914 - t1771 * t1979;
t2014 = t1738 * t1801;
t1992 = t1880 * t1889;
t1772 = t1823 * t1992 + t1826 * t1886;
t1739 = (-t1790 * t1992 - t1929 * t1886) * t1916 - t1772 * t1951;
t2013 = t1739 * t1802;
t1842 = t1913 * t1866 - t1872;
t1803 = 0.1e1 / (t1842 * t1954 + t1851);
t1965 = t1913 * t1924;
t2000 = (t1866 * t1919 + t1965) * t1902;
t2003 = t1821 * t1884;
t2012 = (-t1770 * t2000 + (t1824 * t1996 - t2003) * t1842) * t1803;
t1843 = t1915 * t1867 - t1873;
t1804 = 0.1e1 / (t1843 * t1979 + t1852);
t1960 = t1915 * t1924;
t1999 = (t1867 * t1921 + t1960) * t1902;
t2002 = t1822 * t1885;
t2011 = (-t1771 * t1999 + (t1825 * t1994 - t2002) * t1843) * t1804;
t1844 = t1917 * t1868 - t1874;
t1805 = 0.1e1 / (t1844 * t1951 + t1853);
t1955 = t1917 * t1924;
t1998 = (t1868 * t1923 + t1955) * t1902;
t2001 = t1823 * t1886;
t2010 = (-t1772 * t1998 + (t1826 * t1992 - t2001) * t1844) * t1805;
t1997 = t1878 * t1821;
t2009 = (t1767 * t2000 - (t1824 * t1988 + t1997) * t1842) * t1803;
t1995 = t1879 * t1822;
t2008 = (t1768 * t1999 - (t1825 * t1987 + t1995) * t1843) * t1804;
t1993 = t1880 * t1823;
t2007 = (t1769 * t1998 - (t1826 * t1986 + t1993) * t1844) * t1805;
t1815 = pkin(3) * t1978 + t1854 * t1900;
t1982 = t1900 * t1913;
t1785 = 0.1e1 / (pkin(2) * t1978 + t1815 * t1918 + t1982 * t2036);
t2006 = t1785 * t1809;
t1816 = pkin(3) * t1976 + t1855 * t1900;
t1981 = t1900 * t1915;
t1786 = 0.1e1 / (pkin(2) * t1976 + t1816 * t1920 + t1981 * t2035);
t2005 = t1786 * t1810;
t1817 = pkin(3) * t1974 + t1856 * t1900;
t1980 = t1900 * t1917;
t1787 = 0.1e1 / (pkin(2) * t1974 + t1817 * t1922 + t1980 * t2034);
t2004 = t1787 * t1811;
t1972 = t1902 * t1919;
t1971 = t1902 * t1921;
t1970 = t1902 * t1923;
t1969 = t1912 * t1900;
t1968 = t1912 * t1913;
t1967 = t1912 * t1919;
t1964 = t1914 * t1900;
t1963 = t1914 * t1915;
t1962 = t1914 * t1921;
t1959 = t1916 * t1900;
t1958 = t1916 * t1917;
t1957 = t1916 * t1923;
t1953 = t1918 * t1919;
t1952 = t1920 * t1921;
t1950 = t1922 * t1923;
t1949 = t1916 * t2021;
t1948 = t1922 * t2021;
t1947 = t1912 * t2020;
t1946 = t1918 * t2020;
t1945 = t1914 * t2019;
t1944 = t1920 * t2019;
t1943 = (t1821 * t1954 + t1912 * (t1821 * t1977 + t1919 * t1824)) * t1785 * t1890;
t1942 = (t1822 * t1979 + t1914 * (t1822 * t1975 + t1921 * t1825)) * t1786 * t1891;
t1941 = (t1823 * t1951 + t1916 * (t1823 * t1973 + t1923 * t1826)) * t1787 * t1892;
t1940 = (-t1821 * t2000 + t1824 * t1842) * t1803 * t1890;
t1939 = (-t1822 * t1999 + t1825 * t1843) * t1804 * t1891;
t1938 = (-t1823 * t1998 + t1826 * t1844) * t1805 * t1892;
t1934 = t1719 * t1941;
t1933 = t1720 * t1943;
t1932 = t1721 * t1942;
t1928 = pkin(3) * t1969 - t1854 * t1902;
t1927 = pkin(3) * t1964 - t1855 * t1902;
t1926 = pkin(3) * t1959 - t1856 * t1902;
t1925 = 0.1e1 / pkin(3);
t1859 = pkin(2) * t1923 + t1955;
t1858 = pkin(2) * t1921 + t1960;
t1857 = pkin(2) * t1919 + t1965;
t1838 = t1902 * t1956 - t1959;
t1837 = t1902 * t1961 - t1964;
t1836 = t1902 * t1966 - t1969;
t1835 = t1902 * t1958 + t1951;
t1834 = t1902 * t1963 + t1979;
t1833 = t1902 * t1968 + t1954;
t1799 = -t1889 * t2046 + t1902 * t1892;
t1798 = -t1888 * t2047 + t1902 * t1891;
t1797 = -t1887 * t2048 + t1902 * t1890;
t1796 = t1859 * t1899 - t1926 * t1901;
t1795 = t1858 * t1899 - t1927 * t1901;
t1794 = t1857 * t1899 - t1928 * t1901;
t1793 = -t1859 * t1901 - t1926 * t1899;
t1792 = -t1858 * t1901 - t1927 * t1899;
t1791 = -t1857 * t1901 - t1928 * t1899;
t1760 = t1929 * t1889 + t1892 * t1980;
t1759 = t1930 * t1888 + t1891 * t1981;
t1758 = t1931 * t1887 + t1890 * t1982;
t1751 = -t1877 * t1793 + t1796 * t1883;
t1750 = -t1876 * t1792 + t1795 * t1882;
t1749 = -t1875 * t1791 + t1794 * t1881;
t1748 = t1817 * t1892 + (t1793 * t1883 + t1796 * t1877) * t1889;
t1747 = t1816 * t1891 + (t1792 * t1882 + t1795 * t1876) * t1888;
t1746 = t1815 * t1890 + (t1791 * t1881 + t1794 * t1875) * t1887;
t1733 = t2040 * (t1899 * t1970 + t1901 * t1917) + (-t1899 * t1917 + t1901 * t1970) * t2037 - t1923 * t1983;
t1732 = t1810 * t1981 - t1828 * t2041 - t1831 * t2038;
t1731 = t2041 * (t1899 * t1971 + t1901 * t1915) + (-t1899 * t1915 + t1901 * t1971) * t2038 - t1921 * t1984;
t1730 = t1811 * t1980 - t1829 * t2040 - t1832 * t2037;
t1729 = t1809 * t1982 - t1827 * t2042 - t1830 * t2039;
t1728 = (t1899 * t1972 + t1901 * t1913) * t2042 + (-t1899 * t1913 + t1901 * t1972) * t2039 - t1919 * t1985;
t1727 = (-t1838 * t1899 + t1901 * t1950) * t2040 - (t1838 * t1901 + t1899 * t1950) * t2037 + t1811 * (t1917 * t1951 + t1974);
t1726 = (-t1837 * t1899 + t1901 * t1952) * t2041 - t2038 * (t1837 * t1901 + t1899 * t1952) + t1810 * (t1900 * t1961 + t1976);
t1725 = (-t1836 * t1899 + t1901 * t1953) * t2042 - t2039 * (t1836 * t1901 + t1899 * t1953) + t1809 * (t1913 * t1954 + t1978);
t1724 = t2041 * (-t1834 * t1899 + t1901 * t1962) - t2038 * (t1834 * t1901 + t1899 * t1962) - t1810 * (-t1900 * t1963 + t1902 * t1920);
t1723 = t2042 * (-t1833 * t1899 + t1901 * t1967) - (t1833 * t1901 + t1899 * t1967) * t2039 - t1809 * (-t1900 * t1968 + t1902 * t1918);
t1722 = (-t1835 * t1899 + t1901 * t1957) * t2040 - t2037 * (t1835 * t1901 + t1899 * t1957) - t1811 * (-t1900 * t1958 + t1902 * t1922);
t1 = [-(-((-t1923 * t1823 + t1826 * t1973) * t1892 - t1889 * t1980) * t2034 + ((t1859 * t1823 + t1926 * t1826) * t1892 + t1817 * t1889) * t1922 + (t1902 * t1889 + t1892 * t2046) * t2022) * t2004 - (-((-t1921 * t1822 + t1825 * t1975) * t1891 - t1888 * t1981) * t2035 + ((t1858 * t1822 + t1927 * t1825) * t1891 + t1816 * t1888) * t1920 + (t1902 * t1888 + t1891 * t2047) * t2023) * t2005 - (-((-t1919 * t1821 + t1824 * t1977) * t1890 - t1887 * t1982) * t2036 + ((t1857 * t1821 + t1928 * t1824) * t1890 + t1815 * t1887) * t1918 + (t1902 * t1887 + t1890 * t2048) * t2024) * t2006, 0, -t1728 * t1943 - t1731 * t1942 - t1733 * t1941, -t1729 * t1943 - t1730 * t1941 - t1732 * t1942, 0, 0, 0, 0, 0, -t1922 * t1934 - t1918 * t1933 - t1920 * t1932 + (t1722 * t1938 + t1723 * t1940 + t1724 * t1939) * t1925, t1916 * t1934 + t1912 * t1933 + t1914 * t1932 + (t1725 * t1940 + t1726 * t1939 + t1727 * t1938) * t1925, -g(1); -(-(t1760 * t1880 - t1790 * t1886) * t2034 + (-t1748 * t1880 + t1751 * t1886) * t1922 - (t1799 * t1880 + t1900 * t2001) * t2022) * t2004 - (-(t1759 * t1879 - t1789 * t1885) * t2035 + (-t1747 * t1879 + t1750 * t1885) * t1920 - (t1798 * t1879 + t1900 * t2002) * t2023) * t2005 - (-(t1758 * t1878 - t1788 * t1884) * t2036 + (-t1746 * t1878 + t1749 * t1884) * t1918 - (t1797 * t1878 + t1900 * t2003) * t2024) * t2006, 0, t1728 * t2015 + t1731 * t2014 + t1733 * t2013, t1729 * t2015 + t1730 * t2013 + t1732 * t2014, 0, 0, 0, 0, 0, t1739 * t1948 + t1737 * t1946 + t1738 * t1944 + (t1722 * t2010 + t1723 * t2012 + t1724 * t2011) * t1925, -t1739 * t1949 - t1737 * t1947 - t1738 * t1945 + (t1725 * t2012 + t1726 * t2011 + t1727 * t2010) * t1925, -g(2); -((t1760 * t1886 + t1790 * t1880) * t2034 + (t1748 * t1886 + t1880 * t1751) * t1922 + (t1799 * t1886 - t1900 * t1993) * t2022) * t2004 - ((t1759 * t1885 + t1789 * t1879) * t2035 + (t1747 * t1885 + t1879 * t1750) * t1920 + (t1798 * t1885 - t1900 * t1995) * t2023) * t2005 - ((t1758 * t1884 + t1788 * t1878) * t2036 + (t1746 * t1884 + t1878 * t1749) * t1918 + (t1797 * t1884 - t1900 * t1997) * t2024) * t2006, 0, t1728 * t2018 + t1731 * t2017 + t1733 * t2016, t1729 * t2018 + t1730 * t2016 + t1732 * t2017, 0, 0, 0, 0, 0, t1736 * t1948 + t1734 * t1946 + t1735 * t1944 + (t1722 * t2007 + t1723 * t2009 + t1724 * t2008) * t1925, -t1736 * t1949 - t1734 * t1947 - t1735 * t1945 + (t1725 * t2009 + t1726 * t2008 + t1727 * t2007) * t1925, -g(3);];
tau_reg  = t1;
