% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V2G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G4A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3PRRRR8V2G4A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:16:50
% EndTime: 2020-08-06 18:17:02
% DurationCPUTime: 11.62s
% Computational Cost: add. (28401->586), mult. (60498->1217), div. (1482->20), fcn. (69420->34), ass. (0->492)
t2913 = legFrame(3,3);
t2882 = sin(t2913);
t2888 = cos(t2913);
t2909 = sin(pkin(8));
t2911 = cos(pkin(8));
t2846 = -t2882 * t2909 + t2888 * t2911;
t2849 = t2882 * t2911 + t2888 * t2909;
t2916 = legFrame(3,1);
t2885 = sin(t2916);
t2891 = cos(t2916);
t2919 = legFrame(3,2);
t2894 = sin(t2919);
t3094 = t2891 * t2894;
t2798 = t2846 * t3094 - t2849 * t2885;
t2929 = cos(qJ(2,3));
t2912 = cos(pkin(4));
t2923 = sin(qJ(2,3));
t3080 = t2912 * t2923;
t2852 = t2909 * t3080 - t2911 * t2929;
t2855 = t2909 * t2929 + t2911 * t3080;
t2810 = -t2852 * t2882 + t2855 * t2888;
t2922 = sin(qJ(3,3));
t2975 = t2852 * t2888 + t2855 * t2882;
t2910 = sin(pkin(4));
t2928 = cos(qJ(3,3));
t3088 = t2910 * t2928;
t2768 = (t2810 * t3094 - t2885 * t2975) * t2922 + t2798 * t3088;
t3097 = t2885 * t2894;
t2801 = t2846 * t3097 + t2849 * t2891;
t2771 = (-t2810 * t3097 - t2975 * t2891) * t2922 - t2801 * t3088;
t3187 = t2768 * t2771;
t2914 = legFrame(2,3);
t2883 = sin(t2914);
t2889 = cos(t2914);
t2847 = -t2883 * t2909 + t2889 * t2911;
t2850 = t2883 * t2911 + t2889 * t2909;
t2917 = legFrame(2,1);
t2886 = sin(t2917);
t2892 = cos(t2917);
t2920 = legFrame(2,2);
t2895 = sin(t2920);
t3093 = t2892 * t2895;
t2799 = t2847 * t3093 - t2850 * t2886;
t2931 = cos(qJ(2,2));
t2925 = sin(qJ(2,2));
t3078 = t2912 * t2925;
t2853 = t2909 * t3078 - t2911 * t2931;
t2856 = t2909 * t2931 + t2911 * t3078;
t2811 = -t2853 * t2883 + t2856 * t2889;
t2924 = sin(qJ(3,2));
t2974 = t2853 * t2889 + t2856 * t2883;
t2930 = cos(qJ(3,2));
t3086 = t2910 * t2930;
t2769 = (t2811 * t3093 - t2886 * t2974) * t2924 + t2799 * t3086;
t3096 = t2886 * t2895;
t2802 = t2847 * t3096 + t2850 * t2892;
t2772 = (-t2811 * t3096 - t2974 * t2892) * t2924 - t2802 * t3086;
t3186 = t2769 * t2772;
t2915 = legFrame(1,3);
t2884 = sin(t2915);
t2890 = cos(t2915);
t2848 = -t2884 * t2909 + t2890 * t2911;
t2851 = t2884 * t2911 + t2890 * t2909;
t2918 = legFrame(1,1);
t2887 = sin(t2918);
t2893 = cos(t2918);
t2921 = legFrame(1,2);
t2896 = sin(t2921);
t3092 = t2893 * t2896;
t2800 = t2848 * t3092 - t2851 * t2887;
t2933 = cos(qJ(2,1));
t2927 = sin(qJ(2,1));
t3076 = t2912 * t2927;
t2854 = t2909 * t3076 - t2911 * t2933;
t2857 = t2909 * t2933 + t2911 * t3076;
t2812 = -t2854 * t2884 + t2857 * t2890;
t2926 = sin(qJ(3,1));
t2973 = t2854 * t2890 + t2857 * t2884;
t2932 = cos(qJ(3,1));
t3084 = t2910 * t2932;
t2770 = (t2812 * t3092 - t2887 * t2973) * t2926 + t2800 * t3084;
t3095 = t2887 * t2896;
t2803 = t2848 * t3095 + t2851 * t2893;
t2773 = (-t2812 * t3095 - t2973 * t2893) * t2926 - t2803 * t3084;
t3185 = t2770 * t2773;
t3184 = t2849 * t2910;
t3183 = t2850 * t2910;
t3182 = t2851 * t2910;
t2934 = pkin(7) + pkin(6);
t3069 = t2927 * t2934;
t2872 = pkin(2) * t2933 + t3069;
t2878 = t2934 * t2933;
t2869 = pkin(2) * t2927 - t2878;
t3167 = pkin(3) * t2910;
t2970 = -t2869 * t2912 + t2926 * t3167;
t2818 = -t2872 * t2911 - t2970 * t2909;
t2821 = t2872 * t2909 - t2970 * t2911;
t3077 = t2912 * t2926;
t2845 = pkin(3) * t3077 + t2869 * t2910;
t2899 = cos(t2921);
t2782 = t2845 * t2899 + (t2818 * t2890 + t2821 * t2884) * t2896;
t2785 = -t2818 * t2884 + t2821 * t2890;
t3089 = t2910 * t2927;
t2797 = t2973 * t2896 + t2899 * t3089;
t2824 = -t2896 * t3182 + t2912 * t2899;
t3101 = t2848 * t2910;
t3168 = pkin(3) * t2932 ^ 2;
t3171 = pkin(2) * t2926;
t2739 = -(t2797 * t2887 - t2812 * t2893) * t3168 + (-t2782 * t2887 + t2785 * t2893) * t2932 - (t2824 * t2887 + t2893 * t3101) * t3171;
t2740 = (t2797 * t2893 + t2812 * t2887) * t3168 + (t2782 * t2893 + t2785 * t2887) * t2932 + (t2824 * t2893 - t2887 * t3101) * t3171;
t2815 = pkin(2) * t3077 + t2845 * t2932 + t3089 * t3168;
t2808 = 0.1e1 / t2815;
t3164 = pkin(3) * t2932;
t2875 = pkin(2) + t3164;
t2866 = t2875 * t3077;
t2833 = t2866 + (t2927 * t3164 + t2869) * t3084;
t2829 = 0.1e1 / t2833;
t3114 = t2808 * t2829;
t3181 = (t2739 * t2770 + t2740 * t2773) * t3114;
t3071 = t2925 * t2934;
t2871 = pkin(2) * t2931 + t3071;
t2877 = t2934 * t2931;
t2868 = pkin(2) * t2925 - t2877;
t2971 = -t2868 * t2912 + t2924 * t3167;
t2817 = -t2871 * t2911 - t2971 * t2909;
t2820 = t2871 * t2909 - t2971 * t2911;
t3079 = t2912 * t2924;
t2844 = pkin(3) * t3079 + t2868 * t2910;
t2898 = cos(t2920);
t2781 = t2844 * t2898 + (t2817 * t2889 + t2820 * t2883) * t2895;
t2784 = -t2817 * t2883 + t2820 * t2889;
t3090 = t2910 * t2925;
t2796 = t2974 * t2895 + t2898 * t3090;
t2823 = -t2895 * t3183 + t2912 * t2898;
t3102 = t2847 * t2910;
t3169 = pkin(3) * t2930 ^ 2;
t3172 = pkin(2) * t2924;
t2737 = -(t2796 * t2886 - t2811 * t2892) * t3169 + (-t2781 * t2886 + t2784 * t2892) * t2930 - (t2823 * t2886 + t2892 * t3102) * t3172;
t2738 = (t2796 * t2892 + t2811 * t2886) * t3169 + (t2781 * t2892 + t2784 * t2886) * t2930 + (t2823 * t2892 - t2886 * t3102) * t3172;
t2814 = pkin(2) * t3079 + t2844 * t2930 + t3090 * t3169;
t2806 = 0.1e1 / t2814;
t3165 = pkin(3) * t2930;
t2874 = pkin(2) + t3165;
t2865 = t2874 * t3079;
t2832 = t2865 + (t2925 * t3165 + t2868) * t3086;
t2827 = 0.1e1 / t2832;
t3116 = t2806 * t2827;
t3180 = (t2737 * t2769 + t2738 * t2772) * t3116;
t3073 = t2923 * t2934;
t2870 = pkin(2) * t2929 + t3073;
t2876 = t2934 * t2929;
t2867 = pkin(2) * t2923 - t2876;
t2972 = -t2867 * t2912 + t2922 * t3167;
t2816 = -t2870 * t2911 - t2972 * t2909;
t2819 = t2870 * t2909 - t2972 * t2911;
t3081 = t2912 * t2922;
t2843 = pkin(3) * t3081 + t2867 * t2910;
t2897 = cos(t2919);
t2780 = t2843 * t2897 + (t2816 * t2888 + t2819 * t2882) * t2894;
t2783 = -t2816 * t2882 + t2819 * t2888;
t3091 = t2910 * t2923;
t2795 = t2975 * t2894 + t2897 * t3091;
t2822 = -t2894 * t3184 + t2912 * t2897;
t3103 = t2846 * t2910;
t3170 = pkin(3) * t2928 ^ 2;
t3173 = pkin(2) * t2922;
t2735 = -(t2795 * t2885 - t2810 * t2891) * t3170 + (-t2780 * t2885 + t2783 * t2891) * t2928 - (t2822 * t2885 + t2891 * t3103) * t3173;
t2736 = (t2795 * t2891 + t2810 * t2885) * t3170 + (t2780 * t2891 + t2783 * t2885) * t2928 + (t2822 * t2891 - t2885 * t3103) * t3173;
t2813 = pkin(2) * t3081 + t2843 * t2928 + t3091 * t3170;
t2804 = 0.1e1 / t2813;
t3166 = pkin(3) * t2928;
t2873 = pkin(2) + t3166;
t2864 = t2873 * t3081;
t2831 = t2864 + (t2923 * t3166 + t2867) * t3088;
t2825 = 0.1e1 / t2831;
t3118 = t2804 * t2825;
t3179 = (t2735 * t2768 + t2736 * t2771) * t3118;
t3178 = 0.2e1 * pkin(2);
t3177 = 2 * MDP(6);
t3176 = 2 * MDP(7);
t3175 = 2 * MDP(8);
t3174 = 0.2e1 * t2910;
t2935 = 0.1e1 / pkin(3);
t3163 = pkin(6) * t2935;
t3162 = MDP(3) * t2910;
t3161 = MDP(4) * t2910;
t3160 = MDP(7) * t2935;
t3159 = MDP(8) * t2935;
t3158 = MDP(9) / pkin(3) ^ 2;
t3157 = t2735 * t2804;
t3156 = t2736 * t2804;
t3155 = t2737 * t2806;
t3154 = t2738 * t2806;
t3153 = t2739 * t2808;
t3152 = t2740 * t2808;
t2789 = t2846 * t3088 + t2922 * (t2846 * t3080 + t2849 * t2929);
t2861 = t2873 * t2923 - t2876;
t3100 = (t2873 * t2929 + t3073) * t2912;
t2792 = -t2846 * t3100 + t2849 * t2861;
t2840 = t2861 * t3088 + t2864;
t2834 = 0.1e1 / t2840;
t3075 = t2912 * t2935;
t3023 = t2834 * t3075;
t3087 = t2910 * t2929;
t3040 = t2804 * t3087;
t2756 = (t2789 * t3040 - t2792 * t3023) * t2897;
t3082 = t2910 * t2935;
t2996 = t2834 * t2923 * t3082;
t3123 = t2792 * t2897;
t2966 = t2996 * t3123;
t2750 = t2756 * t2922 - t2928 * t2966;
t3151 = t2750 * t2804;
t2751 = -t2756 * t2928 - t2922 * t2966;
t3150 = t2751 * t2804;
t2790 = t2847 * t3086 + t2924 * (t2847 * t3078 + t2850 * t2931);
t2862 = t2874 * t2925 - t2877;
t3099 = (t2874 * t2931 + t3071) * t2912;
t2793 = -t2847 * t3099 + t2850 * t2862;
t2841 = t2862 * t3086 + t2865;
t2836 = 0.1e1 / t2841;
t3022 = t2836 * t3075;
t3085 = t2910 * t2931;
t3036 = t2806 * t3085;
t2757 = (t2790 * t3036 - t2793 * t3022) * t2898;
t2995 = t2836 * t2925 * t3082;
t3121 = t2793 * t2898;
t2965 = t2995 * t3121;
t2752 = t2757 * t2924 - t2930 * t2965;
t3149 = t2752 * t2806;
t2753 = -t2757 * t2930 - t2924 * t2965;
t3148 = t2753 * t2806;
t2791 = t2848 * t3084 + t2926 * (t2848 * t3076 + t2851 * t2933);
t2863 = t2875 * t2927 - t2878;
t3098 = (t2875 * t2933 + t3069) * t2912;
t2794 = -t2848 * t3098 + t2851 * t2863;
t2842 = t2863 * t3084 + t2866;
t2838 = 0.1e1 / t2842;
t3021 = t2838 * t3075;
t3083 = t2910 * t2933;
t3032 = t2808 * t3083;
t2758 = (t2791 * t3032 - t2794 * t3021) * t2899;
t2994 = t2838 * t2927 * t3082;
t3119 = t2794 * t2899;
t2964 = t2994 * t3119;
t2754 = t2758 * t2926 - t2932 * t2964;
t3147 = t2754 * t2808;
t2755 = -t2758 * t2932 - t2926 * t2964;
t3146 = t2755 * t2808;
t2759 = -((-t2846 * t2929 + t2849 * t3080) * t2897 - t2894 * t3091) * t3170 + ((t2870 * t2846 + t2972 * t2849) * t2897 + t2843 * t2894) * t2928 + (t2894 * t2912 + t2897 * t3184) * t3173;
t2805 = 0.1e1 / t2813 ^ 2;
t3145 = t2759 * t2805;
t2760 = -((-t2847 * t2931 + t2850 * t3078) * t2898 - t2895 * t3090) * t3169 + ((t2871 * t2847 + t2971 * t2850) * t2898 + t2844 * t2895) * t2930 + (t2895 * t2912 + t2898 * t3183) * t3172;
t2807 = 0.1e1 / t2814 ^ 2;
t3144 = t2760 * t2807;
t2761 = -((-t2848 * t2933 + t2851 * t3076) * t2899 - t2896 * t3089) * t3168 + ((t2872 * t2848 + t2970 * t2851) * t2899 + t2845 * t2896) * t2932 + (t2896 * t2912 + t2899 * t3182) * t3171;
t2809 = 0.1e1 / t2815 ^ 2;
t3143 = t2761 * t2809;
t3142 = t2768 * t2825;
t3141 = t2769 * t2827;
t3140 = t2770 * t2829;
t3139 = t2771 * t2825;
t3138 = t2772 * t2827;
t3137 = t2773 * t2829;
t2774 = -t2801 * t3100 + (-t2846 * t2891 + t2849 * t3097) * t2861;
t3136 = t2774 * t2834;
t2775 = -t2802 * t3099 + (-t2847 * t2892 + t2850 * t3096) * t2862;
t3135 = t2775 * t2836;
t2776 = -t2803 * t3098 + (-t2848 * t2893 + t2851 * t3095) * t2863;
t3134 = t2776 * t2838;
t2777 = t2798 * t3100 - (t2846 * t2885 + t2849 * t3094) * t2861;
t3133 = t2777 * t2834;
t2778 = t2799 * t3099 - (t2847 * t2886 + t2850 * t3093) * t2862;
t3132 = t2778 * t2836;
t2779 = t2800 * t3098 - (t2848 * t2887 + t2851 * t3092) * t2863;
t3131 = t2779 * t2838;
t3130 = t2789 * t2804;
t3129 = t2789 * t2897;
t3128 = t2790 * t2806;
t3127 = t2790 * t2898;
t3126 = t2791 * t2808;
t3125 = t2791 * t2899;
t3124 = t2792 * t2825;
t3122 = t2793 * t2827;
t3120 = t2794 * t2829;
t3117 = t2804 * t2928;
t3115 = t2806 * t2930;
t3113 = t2808 * t2932;
t3112 = t2825 * t2834;
t2826 = 0.1e1 / t2831 ^ 2;
t2903 = t2922 ^ 2;
t3111 = t2826 * t2903;
t3110 = t2827 * t2836;
t2828 = 0.1e1 / t2832 ^ 2;
t2904 = t2924 ^ 2;
t3109 = t2828 * t2904;
t3108 = t2829 * t2838;
t2830 = 0.1e1 / t2833 ^ 2;
t2905 = t2926 ^ 2;
t3107 = t2830 * t2905;
t3106 = t2834 * t2897;
t3105 = t2836 * t2898;
t3104 = t2838 * t2899;
t3074 = t2922 * t2928;
t3072 = t2924 * t2930;
t3070 = t2926 * t2932;
t3068 = t2825 * t3178;
t3067 = t2827 * t3178;
t3066 = t2829 * t3178;
t3065 = t2834 * t3163;
t3064 = t2836 * t3163;
t3063 = t2838 * t3163;
t3062 = t2826 * t3187;
t3061 = t2768 * t3118;
t3060 = t2828 * t3186;
t3059 = t2769 * t3116;
t3058 = t2830 * t3185;
t3057 = t2770 * t3114;
t3056 = t2771 * t3118;
t3055 = t2772 * t3116;
t3054 = t2773 * t3114;
t2879 = t2897 ^ 2;
t3053 = t2789 ^ 2 * t2805 * t2879;
t2880 = t2898 ^ 2;
t3052 = t2790 ^ 2 * t2807 * t2880;
t2881 = t2899 ^ 2;
t3051 = t2791 ^ 2 * t2809 * t2881;
t3050 = t2805 * t3129;
t3049 = t2807 * t3127;
t3048 = t2809 * t3125;
t3047 = t2792 * t3106;
t2835 = 0.1e1 / t2840 ^ 2;
t3046 = t2835 * t3123;
t3045 = t2793 * t3105;
t2837 = 0.1e1 / t2841 ^ 2;
t3044 = t2837 * t3121;
t3043 = t2794 * t3104;
t2839 = 0.1e1 / t2842 ^ 2;
t3042 = t2839 * t3119;
t3041 = t2804 * t3091;
t3039 = t2804 * t3081;
t3038 = t2912 * t3117;
t3037 = t2806 * t3090;
t3035 = t2806 * t3079;
t3034 = t2912 * t3115;
t3033 = t2808 * t3089;
t3031 = t2808 * t3077;
t3030 = t2912 * t3113;
t3029 = t2825 * t3087;
t3028 = t2826 * t3074;
t3027 = t2827 * t3085;
t3026 = t2828 * t3072;
t3025 = t2829 * t3083;
t3024 = t2830 * t3070;
t3020 = t2922 * t3065;
t3019 = t2928 * t3065;
t3018 = t2924 * t3064;
t3017 = t2930 * t3064;
t3016 = t2926 * t3063;
t3015 = t2932 * t3063;
t3014 = t2735 * t3056;
t3013 = t2736 * t3061;
t3012 = t2737 * t3055;
t3011 = t2738 * t3059;
t3010 = t2739 * t3054;
t3009 = t2740 * t3057;
t3008 = t2759 * t3050;
t3007 = t2760 * t3049;
t3006 = t2761 * t3048;
t3005 = t2768 * t2777 * t3112;
t3004 = t2769 * t2778 * t3110;
t3003 = t2770 * t2779 * t3108;
t3002 = t2771 * t2774 * t3112;
t3001 = t2772 * t2775 * t3110;
t3000 = t2773 * t2776 * t3108;
t2999 = t3118 * t3129;
t2998 = t3116 * t3127;
t2997 = t3114 * t3125;
t2993 = t3047 * t3163;
t2992 = t3045 * t3163;
t2991 = t3043 * t3163;
t2990 = t2792 * t2834 * t2879 * t3130;
t2989 = t2903 * t2999;
t2988 = t2793 * t2836 * t2880 * t3128;
t2987 = t2904 * t2998;
t2986 = t2794 * t2838 * t2881 * t3126;
t2985 = t2905 * t2997;
t2984 = t2922 * t2996;
t2983 = t2928 * t2996;
t2982 = t2924 * t2995;
t2981 = t2930 * t2995;
t2980 = t2926 * t2994;
t2979 = t2932 * t2994;
t2969 = t2999 * t3074;
t2968 = t2998 * t3072;
t2967 = t2997 * t3070;
t2963 = -t2759 * t3087 + t3129 * t3178;
t2962 = -t2760 * t3085 + t3127 * t3178;
t2961 = -t2761 * t3083 + t3125 * t3178;
t2960 = (t2768 * t2774 + t2771 * t2777) * t3112;
t2959 = (t2769 * t2775 + t2772 * t2778) * t3110;
t2958 = (t2770 * t2776 + t2773 * t2779) * t3108;
t2957 = t2735 * t3040 + t2771 * t3068;
t2956 = t2736 * t3040 + t2768 * t3068;
t2955 = t2737 * t3036 + t2772 * t3067;
t2954 = t2738 * t3036 + t2769 * t3067;
t2953 = t2739 * t3032 + t2773 * t3066;
t2952 = t2740 * t3032 + t2770 * t3066;
t2951 = (-t2923 * t3179 - t2925 * t3180 - t2927 * t3181) * t3161 + (t2929 * t3179 + t2931 * t3180 + t2933 * t3181) * t3162 + (t2735 * t2736 * t2805 + t2737 * t2738 * t2807 + t2739 * t2740 * t2809) * MDP(1) + (t2922 * t2960 + t2924 * t2959 + t2926 * t2958) * t3160 + (t2928 * t2960 + t2930 * t2959 + t2932 * t2958) * t3159 + (t3024 * t3185 + t3026 * t3186 + t3028 * t3187) * t3177 + (t2903 * t3062 + t2904 * t3060 + t2905 * t3058) * MDP(5) + (t3058 + t3060 + t3062) * MDP(2) + (t2774 * t2777 * t2835 + t2775 * t2778 * t2837 + t2776 * t2779 * t2839) * t3158;
t2938 = (t2770 * t3120 - t2779 * t3126) * t3104;
t2940 = (t2769 * t3122 - t2778 * t3128) * t3105;
t2942 = (t2768 * t3124 - t2777 * t3130) * t3106;
t2943 = t2740 * t3048 - t2761 * t3057;
t2945 = t2738 * t3049 - t2760 * t3059;
t2947 = t2736 * t3050 - t2759 * t3061;
t2950 = (t2947 * t2923 + t2945 * t2925 + t2943 * t2927) * t3161 + (-t2947 * t2929 - t2945 * t2931 - t2943 * t2933) * t3162 + (t2736 * t3145 + t2738 * t3144 + t2740 * t3143) * MDP(1) + (t2922 * t2942 + t2924 * t2940 + t2926 * t2938) * t3160 + (t2928 * t2942 + t2930 * t2940 + t2932 * t2938) * t3159 + (-t2768 * t2969 - t2769 * t2968 - t2770 * t2967) * t3177 + (-t2768 * t2989 - t2769 * t2987 - t2770 * t2985) * MDP(5) + (-t2768 * t2999 - t2769 * t2998 - t2770 * t2997) * MDP(2) + (t2777 * t3046 + t2778 * t3044 + t2779 * t3042) * t3158;
t2937 = (t2773 * t3120 - t2776 * t3126) * t3104;
t2939 = (t2772 * t3122 - t2775 * t3128) * t3105;
t2941 = (t2771 * t3124 - t2774 * t3130) * t3106;
t2944 = t2739 * t3048 - t2761 * t3054;
t2946 = t2737 * t3049 - t2760 * t3055;
t2948 = t2735 * t3050 - t2759 * t3056;
t2949 = (t2948 * t2923 + t2946 * t2925 + t2944 * t2927) * t3161 + (-t2948 * t2929 - t2946 * t2931 - t2944 * t2933) * t3162 + (t2735 * t3145 + t2737 * t3144 + t2739 * t3143) * MDP(1) + (t2922 * t2941 + t2924 * t2939 + t2926 * t2937) * t3160 + (t2928 * t2941 + t2930 * t2939 + t2932 * t2937) * t3159 + (-t2771 * t2969 - t2772 * t2968 - t2773 * t2967) * t3177 + (-t2771 * t2989 - t2772 * t2987 - t2773 * t2985) * MDP(5) + (-t2771 * t2999 - t2772 * t2998 - t2773 * t2997) * MDP(2) + (t2774 * t3046 + t2775 * t3044 + t2776 * t3042) * t3158;
t2767 = t2773 ^ 2;
t2766 = t2772 ^ 2;
t2765 = t2771 ^ 2;
t2764 = t2770 ^ 2;
t2763 = t2769 ^ 2;
t2762 = t2768 ^ 2;
t2749 = t2773 * t3025 + t2776 * t3021;
t2748 = t2770 * t3025 + t2779 * t3021;
t2747 = t2772 * t3027 + t2775 * t3022;
t2746 = t2769 * t3027 + t2778 * t3022;
t2745 = t2771 * t3029 + t2774 * t3023;
t2744 = t2768 * t3029 + t2777 * t3023;
t2743 = (-pkin(6) * t3125 + t2761 * t3089) * t2808;
t2742 = (-pkin(6) * t3127 + t2760 * t3090) * t2806;
t2741 = (-pkin(6) * t3129 + t2759 * t3091) * t2804;
t2734 = t2961 * t2926 * t2808 - t2932 * t2991;
t2733 = -t2926 * t2991 - t2961 * t3113;
t2732 = t2963 * t2922 * t2804 - t2928 * t2993;
t2731 = -t2922 * t2993 - t2963 * t3117;
t2730 = t2962 * t2924 * t2806 - t2930 * t2992;
t2729 = -t2924 * t2992 - t2962 * t3115;
t2728 = -t2749 * t2926 - t2776 * t2979;
t2727 = t2749 * t2932 - t2776 * t2980;
t2726 = -t2748 * t2926 - t2779 * t2979;
t2725 = t2748 * t2932 - t2779 * t2980;
t2724 = -t2747 * t2924 - t2775 * t2981;
t2723 = t2747 * t2930 - t2775 * t2982;
t2722 = -t2746 * t2924 - t2778 * t2981;
t2721 = t2746 * t2930 - t2778 * t2982;
t2720 = -t2745 * t2922 - t2774 * t2983;
t2719 = t2745 * t2928 - t2774 * t2984;
t2718 = -t2744 * t2922 - t2777 * t2983;
t2717 = t2744 * t2928 - t2777 * t2984;
t2716 = -t2743 * t2932 - t2761 * t3031;
t2715 = -t2742 * t2930 - t2760 * t3035;
t2714 = -t2741 * t2928 - t2759 * t3039;
t2713 = -t2743 * t2926 + t2761 * t3030;
t2712 = -t2742 * t2924 + t2760 * t3034;
t2711 = -t2741 * t2922 + t2759 * t3038;
t2710 = pkin(6) * t3140 + t2740 * t3033;
t2709 = pkin(6) * t3137 + t2739 * t3033;
t2708 = pkin(6) * t3141 + t2738 * t3037;
t2707 = pkin(6) * t3138 + t2737 * t3037;
t2706 = pkin(6) * t3142 + t2736 * t3041;
t2705 = pkin(6) * t3139 + t2735 * t3041;
t2702 = -t2779 * t3015 - t2952 * t2926;
t2701 = -t2776 * t3015 - t2953 * t2926;
t2700 = -t2779 * t3016 + t2952 * t2932;
t2699 = -t2776 * t3016 + t2953 * t2932;
t2698 = -t2777 * t3019 - t2956 * t2922;
t2697 = -t2774 * t3019 - t2957 * t2922;
t2696 = -t2777 * t3020 + t2956 * t2928;
t2695 = -t2774 * t3020 + t2957 * t2928;
t2694 = -t2778 * t3017 - t2954 * t2924;
t2693 = -t2775 * t3017 - t2955 * t2924;
t2692 = -t2778 * t3018 + t2954 * t2930;
t2691 = -t2775 * t3018 + t2955 * t2930;
t2680 = -t2710 * t2932 - t2740 * t3031;
t2679 = -t2709 * t2932 - t2739 * t3031;
t2678 = -t2708 * t2930 - t2738 * t3035;
t2677 = -t2707 * t2930 - t2737 * t3035;
t2676 = -t2706 * t2928 - t2736 * t3039;
t2675 = -t2705 * t2928 - t2735 * t3039;
t2674 = -t2710 * t2926 + t2740 * t3030;
t2673 = -t2709 * t2926 + t2739 * t3030;
t2672 = -t2708 * t2924 + t2738 * t3034;
t2671 = -t2707 * t2924 + t2737 * t3034;
t2670 = -t2706 * t2922 + t2736 * t3038;
t2669 = -t2705 * t2922 + t2735 * t3038;
t1 = [(t2759 ^ 2 * t2805 + t2760 ^ 2 * t2807 + t2761 ^ 2 * t2809) * MDP(1) + (t3051 + t3052 + t3053) * MDP(2) + (t2903 * t3053 + t2904 * t3052 + t2905 * t3051) * MDP(5) + (t3051 * t3070 + t3052 * t3072 + t3053 * t3074) * t3177 + MDP(12) + ((-t2733 * t3125 + t2755 * t2761) * MDP(10) + (-t2734 * t3125 + t2754 * t2761) * MDP(11)) * t2808 + ((-t2729 * t3127 + t2753 * t2760) * MDP(10) + (-t2730 * t3127 + t2752 * t2760) * MDP(11)) * t2806 + ((-t2731 * t3129 + t2751 * t2759) * MDP(10) + (-t2732 * t3129 + t2750 * t2759) * MDP(11)) * t2804 + (t2792 ^ 2 * t2835 * t2879 + t2793 ^ 2 * t2837 * t2880 + t2794 ^ 2 * t2839 * t2881) * t3158 + ((-t2929 * t3008 - t2931 * t3007 - t2933 * t3006) * MDP(3) + (t2923 * t3008 + t2925 * t3007 + t2927 * t3006) * MDP(4)) * t3174 + ((t2711 * t3047 + t2712 * t3045 + t2713 * t3043) * MDP(10) + (t2714 * t3047 + t2715 * t3045 + t2716 * t3043) * MDP(11) + (-t2922 * t2990 - t2924 * t2988 - t2926 * t2986) * t3176 + (-t2928 * t2990 - t2930 * t2988 - t2932 * t2986) * t3175) * t2935; ((-t2699 * t3125 + t2727 * t2761) * MDP(10) + (-t2701 * t3125 + t2728 * t2761) * MDP(11)) * t2808 + ((-t2691 * t3127 + t2723 * t2760) * MDP(10) + (-t2693 * t3127 + t2724 * t2760) * MDP(11)) * t2806 + ((-t2695 * t3129 + t2719 * t2759) * MDP(10) + (-t2697 * t3129 + t2720 * t2759) * MDP(11)) * t2804 + ((t2669 * t3047 + t2671 * t3045 + t2673 * t3043) * MDP(10) + (t2675 * t3047 + t2677 * t3045 + t2679 * t3043) * MDP(11)) * t2935 + t2949; ((-t2700 * t3125 + t2725 * t2761) * MDP(10) + (-t2702 * t3125 + t2726 * t2761) * MDP(11)) * t2808 + ((-t2692 * t3127 + t2721 * t2760) * MDP(10) + (-t2694 * t3127 + t2722 * t2760) * MDP(11)) * t2806 + ((-t2696 * t3129 + t2717 * t2759) * MDP(10) + (-t2698 * t3129 + t2718 * t2759) * MDP(11)) * t2804 + ((t2670 * t3047 + t2672 * t3045 + t2674 * t3043) * MDP(10) + (t2676 * t3047 + t2678 * t3045 + t2680 * t3043) * MDP(11)) * t2935 + t2950; (t2729 * t3138 + t2731 * t3139 + t2733 * t3137 + t2735 * t3150 + t2737 * t3148 + t2739 * t3146) * MDP(10) + (t2730 * t3138 + t2732 * t3139 + t2734 * t3137 + t2735 * t3151 + t2737 * t3149 + t2739 * t3147) * MDP(11) + ((t2711 * t3136 + t2712 * t3135 + t2713 * t3134) * MDP(10) + (t2714 * t3136 + t2715 * t3135 + t2716 * t3134) * MDP(11)) * t2935 + t2949; (t2735 ^ 2 * t2805 + t2737 ^ 2 * t2807 + t2739 ^ 2 * t2809) * MDP(1) + (t2765 * t2826 + t2766 * t2828 + t2767 * t2830) * MDP(2) + (t2765 * t3111 + t2766 * t3109 + t2767 * t3107) * MDP(5) + (t2765 * t3028 + t2766 * t3026 + t2767 * t3024) * t3177 + (t2691 * t3138 + t2695 * t3139 + t2699 * t3137 + t2719 * t3157 + t2723 * t3155 + t2727 * t3153) * MDP(10) + (t2693 * t3138 + t2697 * t3139 + t2701 * t3137 + t2720 * t3157 + t2724 * t3155 + t2728 * t3153) * MDP(11) + MDP(12) + (t2774 ^ 2 * t2835 + t2775 ^ 2 * t2837 + t2776 ^ 2 * t2839) * t3158 + ((t2929 * t3014 + t2931 * t3012 + t2933 * t3010) * MDP(3) + (-t2923 * t3014 - t2925 * t3012 - t2927 * t3010) * MDP(4)) * t3174 + ((t2669 * t3136 + t2671 * t3135 + t2673 * t3134) * MDP(10) + (t2675 * t3136 + t2677 * t3135 + t2679 * t3134) * MDP(11) + (t2922 * t3002 + t2924 * t3001 + t2926 * t3000) * t3176 + (t2928 * t3002 + t2930 * t3001 + t2932 * t3000) * t3175) * t2935; (t2692 * t3138 + t2696 * t3139 + t2700 * t3137 + t2717 * t3157 + t2721 * t3155 + t2725 * t3153) * MDP(10) + (t2694 * t3138 + t2698 * t3139 + t2702 * t3137 + t2718 * t3157 + t2722 * t3155 + t2726 * t3153) * MDP(11) + ((t2670 * t3136 + t2672 * t3135 + t2674 * t3134) * MDP(10) + (t2676 * t3136 + t2678 * t3135 + t2680 * t3134) * MDP(11)) * t2935 + t2951; (t2729 * t3141 + t2731 * t3142 + t2733 * t3140 + t2736 * t3150 + t2738 * t3148 + t2740 * t3146) * MDP(10) + (t2730 * t3141 + t2732 * t3142 + t2734 * t3140 + t2736 * t3151 + t2738 * t3149 + t2740 * t3147) * MDP(11) + ((t2711 * t3133 + t2712 * t3132 + t2713 * t3131) * MDP(10) + (t2714 * t3133 + t2715 * t3132 + t2716 * t3131) * MDP(11)) * t2935 + t2950; (t2691 * t3141 + t2695 * t3142 + t2699 * t3140 + t2719 * t3156 + t2723 * t3154 + t2727 * t3152) * MDP(10) + (t2693 * t3141 + t2697 * t3142 + t2701 * t3140 + t2720 * t3156 + t2724 * t3154 + t2728 * t3152) * MDP(11) + ((t2669 * t3133 + t2671 * t3132 + t2673 * t3131) * MDP(10) + (t2675 * t3133 + t2677 * t3132 + t2679 * t3131) * MDP(11)) * t2935 + t2951; (t2736 ^ 2 * t2805 + t2738 ^ 2 * t2807 + t2740 ^ 2 * t2809) * MDP(1) + (t2762 * t2826 + t2763 * t2828 + t2764 * t2830) * MDP(2) + (t2762 * t3111 + t2763 * t3109 + t2764 * t3107) * MDP(5) + (t2762 * t3028 + t2763 * t3026 + t2764 * t3024) * t3177 + (t2692 * t3141 + t2696 * t3142 + t2700 * t3140 + t2717 * t3156 + t2721 * t3154 + t2725 * t3152) * MDP(10) + (t2694 * t3141 + t2698 * t3142 + t2702 * t3140 + t2718 * t3156 + t2722 * t3154 + t2726 * t3152) * MDP(11) + MDP(12) + (t2777 ^ 2 * t2835 + t2778 ^ 2 * t2837 + t2779 ^ 2 * t2839) * t3158 + ((t2929 * t3013 + t2931 * t3011 + t2933 * t3009) * MDP(3) + (-t2923 * t3013 - t2925 * t3011 - t2927 * t3009) * MDP(4)) * t3174 + ((t2670 * t3133 + t2672 * t3132 + t2674 * t3131) * MDP(10) + (t2676 * t3133 + t2678 * t3132 + t2680 * t3131) * MDP(11) + (t2922 * t3005 + t2924 * t3004 + t2926 * t3003) * t3176 + (t2928 * t3005 + t2930 * t3004 + t2932 * t3003) * t3175) * t2935;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
