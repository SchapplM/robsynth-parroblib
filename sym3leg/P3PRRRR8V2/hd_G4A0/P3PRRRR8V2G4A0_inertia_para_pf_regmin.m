% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V2G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G4A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G4A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:15:47
% EndTime: 2020-08-06 18:15:58
% DurationCPUTime: 10.73s
% Computational Cost: add. (28308->514), mult. (60399->1168), div. (1482->20), fcn. (69420->34), ass. (0->518)
t867 = sin(pkin(4));
t885 = cos(qJ(3,3));
t1047 = t867 * t885;
t873 = legFrame(3,1);
t848 = cos(t873);
t876 = legFrame(3,2);
t851 = sin(t876);
t1050 = t848 * t851;
t870 = legFrame(3,3);
t839 = sin(t870);
t845 = cos(t870);
t866 = sin(pkin(8));
t868 = cos(pkin(8));
t803 = -t866 * t839 + t845 * t868;
t806 = t868 * t839 + t866 * t845;
t842 = sin(t873);
t755 = t803 * t1050 - t842 * t806;
t869 = cos(pkin(4));
t880 = sin(qJ(2,3));
t1040 = t869 * t880;
t886 = cos(qJ(2,3));
t809 = t866 * t1040 - t868 * t886;
t812 = t868 * t1040 + t866 * t886;
t767 = -t839 * t809 + t812 * t845;
t879 = sin(qJ(3,3));
t929 = t809 * t845 + t839 * t812;
t725 = (t767 * t1050 - t842 * t929) * t879 + t755 * t1047;
t1055 = t842 * t851;
t758 = t803 * t1055 + t806 * t848;
t728 = (-t767 * t1055 - t929 * t848) * t879 - t758 * t1047;
t1142 = t725 * t728;
t887 = cos(qJ(3,2));
t1045 = t867 * t887;
t874 = legFrame(2,1);
t849 = cos(t874);
t877 = legFrame(2,2);
t852 = sin(t877);
t1049 = t849 * t852;
t871 = legFrame(2,3);
t840 = sin(t871);
t846 = cos(t871);
t804 = -t866 * t840 + t846 * t868;
t807 = t868 * t840 + t866 * t846;
t843 = sin(t874);
t756 = t804 * t1049 - t843 * t807;
t882 = sin(qJ(2,2));
t1038 = t869 * t882;
t888 = cos(qJ(2,2));
t810 = t866 * t1038 - t868 * t888;
t813 = t868 * t1038 + t866 * t888;
t768 = -t840 * t810 + t813 * t846;
t881 = sin(qJ(3,2));
t928 = t810 * t846 + t840 * t813;
t726 = (t768 * t1049 - t843 * t928) * t881 + t756 * t1045;
t1053 = t843 * t852;
t759 = t804 * t1053 + t807 * t849;
t729 = (-t768 * t1053 - t928 * t849) * t881 - t759 * t1045;
t1141 = t726 * t729;
t889 = cos(qJ(3,1));
t1043 = t867 * t889;
t875 = legFrame(1,1);
t850 = cos(t875);
t878 = legFrame(1,2);
t853 = sin(t878);
t1048 = t850 * t853;
t872 = legFrame(1,3);
t841 = sin(t872);
t847 = cos(t872);
t805 = -t866 * t841 + t847 * t868;
t808 = t868 * t841 + t866 * t847;
t844 = sin(t875);
t757 = t805 * t1048 - t844 * t808;
t884 = sin(qJ(2,1));
t1036 = t869 * t884;
t890 = cos(qJ(2,1));
t811 = t866 * t1036 - t868 * t890;
t814 = t868 * t1036 + t866 * t890;
t769 = -t841 * t811 + t814 * t847;
t883 = sin(qJ(3,1));
t927 = t811 * t847 + t841 * t814;
t727 = (t769 * t1048 - t844 * t927) * t883 + t757 * t1043;
t1051 = t844 * t853;
t760 = t805 * t1051 + t808 * t850;
t730 = (-t769 * t1051 - t927 * t850) * t883 - t760 * t1043;
t1140 = t727 * t730;
t1139 = t806 * t867;
t1138 = t807 * t867;
t1137 = t808 * t867;
t1027 = t884 * t867;
t1037 = t869 * t883;
t1125 = pkin(3) * t889 ^ 2;
t891 = pkin(7) + pkin(6);
t835 = t891 * t890;
t826 = pkin(2) * t884 - t835;
t802 = pkin(3) * t1037 + t826 * t867;
t772 = pkin(2) * t1037 + t1027 * t1125 + t802 * t889;
t765 = 0.1e1 / t772;
t1120 = t889 * pkin(3);
t832 = pkin(2) + t1120;
t823 = t832 * t1037;
t790 = t823 + (t884 * t1120 + t826) * t1043;
t786 = 0.1e1 / t790;
t1076 = t765 * t786;
t1060 = t805 * t850;
t1128 = pkin(2) * t883;
t1026 = t884 * t891;
t829 = pkin(2) * t890 + t1026;
t1124 = pkin(3) * t867;
t924 = t883 * t1124 - t826 * t869;
t775 = -t829 * t868 - t866 * t924;
t778 = t829 * t866 - t868 * t924;
t856 = cos(t878);
t739 = t802 * t856 + (t775 * t847 + t778 * t841) * t853;
t742 = -t841 * t775 + t778 * t847;
t754 = t856 * t1027 + t927 * t853;
t781 = -t853 * t1137 + t869 * t856;
t696 = -(t754 * t844 - t769 * t850) * t1125 + (-t739 * t844 + t742 * t850) * t889 - (t867 * t1060 + t781 * t844) * t1128;
t1052 = t844 * t805;
t697 = (t754 * t850 + t769 * t844) * t1125 + (t739 * t850 + t844 * t742) * t889 + (-t867 * t1052 + t781 * t850) * t1128;
t1136 = t1076 * (t696 * t727 + t697 * t730);
t1030 = t882 * t867;
t1039 = t869 * t881;
t1126 = pkin(3) * t887 ^ 2;
t834 = t891 * t888;
t825 = pkin(2) * t882 - t834;
t801 = pkin(3) * t1039 + t825 * t867;
t771 = pkin(2) * t1039 + t1030 * t1126 + t801 * t887;
t763 = 0.1e1 / t771;
t1121 = t887 * pkin(3);
t831 = pkin(2) + t1121;
t822 = t831 * t1039;
t789 = t822 + (t882 * t1121 + t825) * t1045;
t784 = 0.1e1 / t789;
t1078 = t763 * t784;
t1061 = t804 * t849;
t1129 = pkin(2) * t881;
t1029 = t882 * t891;
t828 = pkin(2) * t888 + t1029;
t925 = t881 * t1124 - t825 * t869;
t774 = -t828 * t868 - t866 * t925;
t777 = t828 * t866 - t868 * t925;
t855 = cos(t877);
t738 = t801 * t855 + (t774 * t846 + t777 * t840) * t852;
t741 = -t840 * t774 + t777 * t846;
t753 = t855 * t1030 + t928 * t852;
t780 = -t852 * t1138 + t869 * t855;
t694 = -(t753 * t843 - t768 * t849) * t1126 + (-t738 * t843 + t741 * t849) * t887 - (t867 * t1061 + t780 * t843) * t1129;
t1054 = t843 * t804;
t695 = (t753 * t849 + t768 * t843) * t1126 + (t738 * t849 + t843 * t741) * t887 + (-t867 * t1054 + t780 * t849) * t1129;
t1135 = t1078 * (t694 * t726 + t695 * t729);
t1033 = t880 * t867;
t1041 = t869 * t879;
t1127 = pkin(3) * t885 ^ 2;
t833 = t891 * t886;
t824 = pkin(2) * t880 - t833;
t800 = pkin(3) * t1041 + t824 * t867;
t770 = pkin(2) * t1041 + t1033 * t1127 + t800 * t885;
t761 = 0.1e1 / t770;
t1122 = t885 * pkin(3);
t830 = pkin(2) + t1122;
t821 = t830 * t1041;
t788 = t821 + (t880 * t1122 + t824) * t1047;
t782 = 0.1e1 / t788;
t1080 = t761 * t782;
t1062 = t803 * t848;
t1130 = pkin(2) * t879;
t1032 = t880 * t891;
t827 = pkin(2) * t886 + t1032;
t926 = t879 * t1124 - t824 * t869;
t773 = -t827 * t868 - t866 * t926;
t776 = t827 * t866 - t868 * t926;
t854 = cos(t876);
t737 = t800 * t854 + (t773 * t845 + t776 * t839) * t851;
t740 = -t839 * t773 + t776 * t845;
t752 = t854 * t1033 + t929 * t851;
t779 = -t851 * t1139 + t869 * t854;
t692 = -(t752 * t842 - t767 * t848) * t1127 + (-t737 * t842 + t740 * t848) * t885 - (t867 * t1062 + t779 * t842) * t1130;
t1056 = t842 * t803;
t693 = (t752 * t848 + t767 * t842) * t1127 + (t737 * t848 + t842 * t740) * t885 + (-t867 * t1056 + t779 * t848) * t1130;
t1134 = t1080 * (t692 * t725 + t693 * t728);
t1133 = 0.2e1 * pkin(2);
t1132 = 0.2e1 * t867;
t892 = 0.1e1 / pkin(3);
t1131 = 0.2e1 * t892;
t1123 = pkin(6) * t892;
t1119 = t692 * t761;
t1118 = t693 * t761;
t1117 = t694 * t763;
t1116 = t695 * t763;
t1115 = t696 * t765;
t1114 = t697 * t765;
t1046 = t867 * t886;
t1000 = t761 * t1046;
t746 = t803 * t1047 + t879 * (t803 * t1040 + t886 * t806);
t1059 = (t830 * t886 + t1032) * t869;
t818 = t880 * t830 - t833;
t749 = -t803 * t1059 + t806 * t818;
t1035 = t869 * t892;
t797 = t818 * t1047 + t821;
t791 = 0.1e1 / t797;
t983 = t791 * t1035;
t713 = (t746 * t1000 - t749 * t983) * t854;
t1085 = t749 * t854;
t1067 = t791 * t892;
t953 = t1033 * t1067;
t920 = t953 * t1085;
t707 = t713 * t879 - t885 * t920;
t1113 = t707 * t761;
t708 = -t713 * t885 - t879 * t920;
t1112 = t708 * t761;
t747 = t804 * t1045 + t881 * (t804 * t1038 + t888 * t807);
t1058 = (t831 * t888 + t1029) * t869;
t819 = t882 * t831 - t834;
t750 = -t804 * t1058 + t807 * t819;
t798 = t819 * t1045 + t822;
t793 = 0.1e1 / t798;
t982 = t793 * t1035;
t1044 = t867 * t888;
t996 = t763 * t1044;
t714 = (t747 * t996 - t750 * t982) * t855;
t1083 = t750 * t855;
t1065 = t793 * t892;
t952 = t1030 * t1065;
t919 = t952 * t1083;
t709 = t714 * t881 - t887 * t919;
t1111 = t709 * t763;
t710 = -t714 * t887 - t881 * t919;
t1110 = t710 * t763;
t748 = t805 * t1043 + t883 * (t805 * t1036 + t890 * t808);
t1057 = (t832 * t890 + t1026) * t869;
t820 = t884 * t832 - t835;
t751 = -t805 * t1057 + t808 * t820;
t799 = t820 * t1043 + t823;
t795 = 0.1e1 / t799;
t981 = t795 * t1035;
t1042 = t867 * t890;
t992 = t765 * t1042;
t715 = (t748 * t992 - t751 * t981) * t856;
t1081 = t751 * t856;
t1063 = t795 * t892;
t951 = t1027 * t1063;
t918 = t951 * t1081;
t711 = t715 * t883 - t889 * t918;
t1109 = t711 * t765;
t712 = -t715 * t889 - t883 * t918;
t1108 = t712 * t765;
t716 = -((t806 * t1040 - t886 * t803) * t854 - t851 * t1033) * t1127 + ((t827 * t803 + t806 * t926) * t854 + t800 * t851) * t885 + (t854 * t1139 + t869 * t851) * t1130;
t762 = 0.1e1 / t770 ^ 2;
t1107 = t716 * t762;
t717 = -((t807 * t1038 - t888 * t804) * t855 - t852 * t1030) * t1126 + ((t828 * t804 + t807 * t925) * t855 + t801 * t852) * t887 + (t855 * t1138 + t869 * t852) * t1129;
t764 = 0.1e1 / t771 ^ 2;
t1106 = t717 * t764;
t718 = -((t808 * t1036 - t890 * t805) * t856 - t853 * t1027) * t1125 + ((t829 * t805 + t808 * t924) * t856 + t802 * t853) * t889 + (t856 * t1137 + t869 * t853) * t1128;
t766 = 0.1e1 / t772 ^ 2;
t1105 = t718 * t766;
t1104 = t725 * t782;
t1103 = t726 * t784;
t1102 = t727 * t786;
t1101 = t728 * t782;
t1100 = t729 * t784;
t1099 = t730 * t786;
t731 = -t758 * t1059 + (t806 * t1055 - t1062) * t818;
t1098 = t731 * t791;
t732 = -t759 * t1058 + (t807 * t1053 - t1061) * t819;
t1097 = t732 * t793;
t733 = -t760 * t1057 + (t808 * t1051 - t1060) * t820;
t1096 = t733 * t795;
t734 = t755 * t1059 - (t806 * t1050 + t1056) * t818;
t1095 = t734 * t791;
t735 = t756 * t1058 - (t807 * t1049 + t1054) * t819;
t1094 = t735 * t793;
t736 = t757 * t1057 - (t808 * t1048 + t1052) * t820;
t1093 = t736 * t795;
t1092 = t746 * t761;
t1091 = t746 * t854;
t1090 = t747 * t763;
t1089 = t747 * t855;
t1088 = t748 * t765;
t1087 = t748 * t856;
t1086 = t749 * t782;
t1084 = t750 * t784;
t1082 = t751 * t786;
t1079 = t761 * t885;
t1077 = t763 * t887;
t1075 = t765 * t889;
t1074 = t782 * t791;
t783 = 0.1e1 / t788 ^ 2;
t860 = t879 ^ 2;
t1073 = t783 * t860;
t1072 = t784 * t793;
t785 = 0.1e1 / t789 ^ 2;
t861 = t881 ^ 2;
t1071 = t785 * t861;
t1070 = t786 * t795;
t787 = 0.1e1 / t790 ^ 2;
t862 = t883 ^ 2;
t1069 = t787 * t862;
t1068 = t791 * t854;
t1066 = t793 * t855;
t1064 = t795 * t856;
t1034 = t879 * t885;
t1031 = t881 * t887;
t1028 = t883 * t889;
t1025 = t782 * t1133;
t1024 = t784 * t1133;
t1023 = t786 * t1133;
t1022 = pkin(6) * t1067;
t1021 = pkin(6) * t1065;
t1020 = pkin(6) * t1063;
t1019 = t725 * t1080;
t1018 = t726 * t1078;
t1017 = t727 * t1076;
t1016 = t728 * t1080;
t1015 = t783 * t1142;
t1014 = t729 * t1078;
t1013 = t785 * t1141;
t1012 = t730 * t1076;
t1011 = t787 * t1140;
t1010 = t762 * t1091;
t1009 = t764 * t1089;
t1008 = t766 * t1087;
t1007 = t749 * t1068;
t792 = 0.1e1 / t797 ^ 2;
t1006 = t792 * t1085;
t1005 = t750 * t1066;
t794 = 0.1e1 / t798 ^ 2;
t1004 = t794 * t1083;
t1003 = t751 * t1064;
t796 = 0.1e1 / t799 ^ 2;
t1002 = t796 * t1081;
t1001 = t761 * t1033;
t999 = t761 * t1041;
t998 = t869 * t1079;
t997 = t763 * t1030;
t995 = t763 * t1039;
t994 = t869 * t1077;
t993 = t765 * t1027;
t991 = t765 * t1037;
t990 = t869 * t1075;
t989 = t782 * t1046;
t988 = t783 * t1034;
t987 = t784 * t1044;
t986 = t785 * t1031;
t985 = t786 * t1042;
t984 = t787 * t1028;
t836 = t854 ^ 2;
t980 = t836 * t746 ^ 2 * t762;
t837 = t855 ^ 2;
t979 = t837 * t747 ^ 2 * t764;
t838 = t856 ^ 2;
t978 = t838 * t748 ^ 2 * t766;
t977 = t879 * t1022;
t976 = t885 * t1022;
t975 = t881 * t1021;
t974 = t887 * t1021;
t973 = t883 * t1020;
t972 = t889 * t1020;
t971 = t692 * t1016;
t970 = t693 * t1019;
t969 = t694 * t1014;
t968 = t695 * t1018;
t967 = t696 * t1012;
t966 = t697 * t1017;
t965 = t716 * t1010;
t964 = t717 * t1009;
t963 = t718 * t1008;
t962 = t725 * t734 * t1074;
t961 = t726 * t735 * t1072;
t960 = t727 * t736 * t1070;
t959 = t728 * t731 * t1074;
t958 = t729 * t732 * t1072;
t957 = t730 * t733 * t1070;
t956 = t1080 * t1091;
t955 = t1078 * t1089;
t954 = t1076 * t1087;
t950 = t1007 * t1123;
t949 = t1005 * t1123;
t948 = t1003 * t1123;
t947 = t749 * t791 * t836 * t1092;
t946 = t750 * t793 * t837 * t1090;
t945 = t751 * t795 * t838 * t1088;
t944 = t879 * t953;
t943 = t885 * t953;
t942 = t881 * t952;
t941 = t887 * t952;
t940 = t883 * t951;
t939 = t889 * t951;
t938 = t725 * t956;
t937 = t728 * t956;
t936 = t726 * t955;
t935 = t729 * t955;
t934 = t727 * t954;
t933 = t730 * t954;
t923 = t956 * t1034;
t922 = t955 * t1031;
t921 = t954 * t1028;
t917 = -t716 * t1046 + t1091 * t1133;
t916 = -t717 * t1044 + t1089 * t1133;
t915 = -t718 * t1042 + t1087 * t1133;
t914 = (t725 * t731 + t728 * t734) * t1074;
t913 = (t726 * t732 + t729 * t735) * t1072;
t912 = (t727 * t733 + t730 * t736) * t1070;
t911 = t692 * t1000 + t728 * t1025;
t910 = t693 * t1000 + t725 * t1025;
t909 = t729 * t1024 + t694 * t996;
t908 = t726 * t1024 + t695 * t996;
t907 = t730 * t1023 + t696 * t992;
t906 = t727 * t1023 + t697 * t992;
t905 = t692 * t1010 - t716 * t1016;
t904 = t693 * t1010 - t716 * t1019;
t903 = t694 * t1009 - t717 * t1014;
t902 = t695 * t1009 - t717 * t1018;
t901 = t696 * t1008 - t718 * t1012;
t900 = t697 * t1008 - t718 * t1017;
t899 = (t725 * t1086 - t734 * t1092) * t1068;
t898 = (t728 * t1086 - t731 * t1092) * t1068;
t897 = (t726 * t1084 - t735 * t1090) * t1066;
t896 = (t729 * t1084 - t732 * t1090) * t1066;
t895 = (t727 * t1082 - t736 * t1088) * t1064;
t894 = (t730 * t1082 - t733 * t1088) * t1064;
t893 = 0.1e1 / pkin(3) ^ 2;
t724 = t730 ^ 2;
t723 = t729 ^ 2;
t722 = t728 ^ 2;
t721 = t727 ^ 2;
t720 = t726 ^ 2;
t719 = t725 ^ 2;
t706 = t730 * t985 + t733 * t981;
t705 = t727 * t985 + t736 * t981;
t704 = t729 * t987 + t732 * t982;
t703 = t726 * t987 + t735 * t982;
t702 = t728 * t989 + t731 * t983;
t701 = t725 * t989 + t734 * t983;
t700 = (-pkin(6) * t1087 + t718 * t1027) * t765;
t699 = (-pkin(6) * t1089 + t717 * t1030) * t763;
t698 = (-pkin(6) * t1091 + t716 * t1033) * t761;
t691 = t765 * t883 * t915 - t889 * t948;
t690 = -t915 * t1075 - t883 * t948;
t689 = t761 * t879 * t917 - t885 * t950;
t688 = -t917 * t1079 - t879 * t950;
t687 = t763 * t881 * t916 - t887 * t949;
t686 = -t916 * t1077 - t881 * t949;
t685 = -t706 * t883 - t733 * t939;
t684 = t706 * t889 - t733 * t940;
t683 = -t705 * t883 - t736 * t939;
t682 = t705 * t889 - t736 * t940;
t681 = -t704 * t881 - t732 * t941;
t680 = t704 * t887 - t732 * t942;
t679 = -t703 * t881 - t735 * t941;
t678 = t703 * t887 - t735 * t942;
t677 = -t702 * t879 - t731 * t943;
t676 = t702 * t885 - t731 * t944;
t675 = -t701 * t879 - t734 * t943;
t674 = t701 * t885 - t734 * t944;
t673 = -t889 * t700 - t718 * t991;
t672 = -t887 * t699 - t717 * t995;
t671 = -t885 * t698 - t716 * t999;
t670 = -t883 * t700 + t718 * t990;
t669 = -t881 * t699 + t717 * t994;
t668 = -t879 * t698 + t716 * t998;
t667 = pkin(6) * t1102 + t697 * t993;
t666 = pkin(6) * t1099 + t696 * t993;
t665 = pkin(6) * t1103 + t695 * t997;
t664 = pkin(6) * t1100 + t694 * t997;
t663 = pkin(6) * t1104 + t1001 * t693;
t662 = pkin(6) * t1101 + t1001 * t692;
t661 = (t1002 * t736 + t1004 * t735 + t1006 * t734) * t893;
t660 = (t1002 * t733 + t1004 * t732 + t1006 * t731) * t893;
t659 = -t736 * t972 - t883 * t906;
t658 = -t733 * t972 - t883 * t907;
t657 = -t736 * t973 + t889 * t906;
t656 = -t733 * t973 + t889 * t907;
t655 = -t734 * t976 - t879 * t910;
t654 = -t731 * t976 - t879 * t911;
t653 = -t734 * t977 + t885 * t910;
t652 = -t731 * t977 + t885 * t911;
t651 = -t735 * t974 - t881 * t908;
t650 = -t732 * t974 - t881 * t909;
t649 = -t735 * t975 + t887 * t908;
t648 = -t732 * t975 + t887 * t909;
t647 = (t731 * t734 * t792 + t732 * t735 * t794 + t733 * t736 * t796) * t893;
t646 = -t933 - t935 - t937;
t645 = -t934 - t936 - t938;
t644 = -t860 * t937 - t861 * t935 - t862 * t933;
t643 = -t860 * t938 - t861 * t936 - t862 * t934;
t642 = -0.2e1 * t728 * t923 - 0.2e1 * t729 * t922 - 0.2e1 * t730 * t921;
t641 = -0.2e1 * t725 * t923 - 0.2e1 * t726 * t922 - 0.2e1 * t727 * t921;
t640 = t1011 + t1013 + t1015;
t639 = t1011 * t862 + t1013 * t861 + t1015 * t860;
t638 = 0.2e1 * t984 * t1140 + 0.2e1 * t986 * t1141 + 0.2e1 * t988 * t1142;
t637 = -t889 * t667 - t697 * t991;
t636 = -t889 * t666 - t696 * t991;
t635 = -t887 * t665 - t695 * t995;
t634 = -t887 * t664 - t694 * t995;
t633 = -t885 * t663 - t693 * t999;
t632 = -t885 * t662 - t692 * t999;
t631 = -t883 * t667 + t697 * t990;
t630 = -t883 * t666 + t696 * t990;
t629 = -t881 * t665 + t695 * t994;
t628 = -t881 * t664 + t694 * t994;
t627 = -t879 * t663 + t693 * t998;
t626 = -t879 * t662 + t692 * t998;
t625 = (t885 * t899 + t887 * t897 + t889 * t895) * t892;
t624 = (t879 * t899 + t881 * t897 + t883 * t895) * t892;
t623 = (t885 * t898 + t887 * t896 + t889 * t894) * t892;
t622 = (t879 * t898 + t881 * t896 + t883 * t894) * t892;
t621 = t697 * t1105 + t695 * t1106 + t693 * t1107;
t620 = t696 * t1105 + t694 * t1106 + t692 * t1107;
t619 = (t885 * t914 + t887 * t913 + t889 * t912) * t892;
t618 = (t879 * t914 + t881 * t913 + t883 * t912) * t892;
t617 = t692 * t762 * t693 + t694 * t764 * t695 + t696 * t766 * t697;
t616 = (-t886 * t905 - t888 * t903 - t890 * t901) * t867;
t615 = (-t886 * t904 - t888 * t902 - t890 * t900) * t867;
t614 = (t880 * t905 + t882 * t903 + t884 * t901) * t867;
t613 = (t880 * t904 + t882 * t902 + t884 * t900) * t867;
t612 = (t886 * t1134 + t888 * t1135 + t890 * t1136) * t867;
t611 = (-t880 * t1134 - t882 * t1135 - t884 * t1136) * t867;
t1 = [t716 ^ 2 * t762 + t717 ^ 2 * t764 + t718 ^ 2 * t766, t978 + t979 + t980, (-t886 * t965 - t888 * t964 - t890 * t963) * t1132, (t880 * t965 + t882 * t964 + t884 * t963) * t1132, t860 * t980 + t861 * t979 + t862 * t978, 0.2e1 * t978 * t1028 + 0.2e1 * t979 * t1031 + 0.2e1 * t980 * t1034, (-t879 * t947 - t881 * t946 - t883 * t945) * t1131, (-t885 * t947 - t887 * t946 - t889 * t945) * t1131, (t749 ^ 2 * t792 * t836 + t750 ^ 2 * t794 * t837 + t751 ^ 2 * t796 * t838) * t893, (-t690 * t1087 + t712 * t718) * t765 + (-t686 * t1089 + t710 * t717) * t763 + (-t688 * t1091 + t708 * t716) * t761 + (t1003 * t670 + t1005 * t669 + t1007 * t668) * t892, (-t691 * t1087 + t711 * t718) * t765 + (-t687 * t1089 + t709 * t717) * t763 + (-t689 * t1091 + t707 * t716) * t761 + (t1003 * t673 + t1005 * t672 + t1007 * t671) * t892, 1; t620, t646, t616, t614, t644, t642, t622, t623, t660, (-t656 * t1087 + t684 * t718) * t765 + (-t648 * t1089 + t680 * t717) * t763 + (-t652 * t1091 + t676 * t716) * t761 + (t1003 * t630 + t1005 * t628 + t1007 * t626) * t892, (-t658 * t1087 + t685 * t718) * t765 + (-t650 * t1089 + t681 * t717) * t763 + (-t654 * t1091 + t677 * t716) * t761 + (t1003 * t636 + t1005 * t634 + t1007 * t632) * t892, 0; t621, t645, t615, t613, t643, t641, t624, t625, t661, (-t657 * t1087 + t682 * t718) * t765 + (-t649 * t1089 + t678 * t717) * t763 + (-t653 * t1091 + t674 * t716) * t761 + (t1003 * t631 + t1005 * t629 + t1007 * t627) * t892, (-t659 * t1087 + t683 * t718) * t765 + (-t651 * t1089 + t679 * t717) * t763 + (-t655 * t1091 + t675 * t716) * t761 + (t1003 * t637 + t1005 * t635 + t1007 * t633) * t892, 0; t620, t646, t616, t614, t644, t642, t622, t623, t660, t686 * t1100 + t688 * t1101 + t690 * t1099 + t692 * t1112 + t694 * t1110 + t696 * t1108 + (t670 * t1096 + t669 * t1097 + t668 * t1098) * t892, t687 * t1100 + t689 * t1101 + t691 * t1099 + t692 * t1113 + t694 * t1111 + t696 * t1109 + (t673 * t1096 + t672 * t1097 + t671 * t1098) * t892, 0; t692 ^ 2 * t762 + t694 ^ 2 * t764 + t696 ^ 2 * t766, t722 * t783 + t723 * t785 + t724 * t787, (t886 * t971 + t888 * t969 + t890 * t967) * t1132, (-t880 * t971 - t882 * t969 - t884 * t967) * t1132, t724 * t1069 + t723 * t1071 + t722 * t1073, 0.2e1 * t722 * t988 + 0.2e1 * t723 * t986 + 0.2e1 * t724 * t984, (t879 * t959 + t881 * t958 + t883 * t957) * t1131, (t885 * t959 + t887 * t958 + t889 * t957) * t1131, (t731 ^ 2 * t792 + t732 ^ 2 * t794 + t733 ^ 2 * t796) * t893, t648 * t1100 + t652 * t1101 + t656 * t1099 + t676 * t1119 + t680 * t1117 + t684 * t1115 + (t630 * t1096 + t628 * t1097 + t626 * t1098) * t892, t650 * t1100 + t654 * t1101 + t658 * t1099 + t677 * t1119 + t681 * t1117 + t685 * t1115 + (t636 * t1096 + t634 * t1097 + t632 * t1098) * t892, 1; t617, t640, t612, t611, t639, t638, t618, t619, t647, t649 * t1100 + t653 * t1101 + t657 * t1099 + t674 * t1119 + t678 * t1117 + t682 * t1115 + (t631 * t1096 + t629 * t1097 + t627 * t1098) * t892, t651 * t1100 + t655 * t1101 + t659 * t1099 + t675 * t1119 + t679 * t1117 + t683 * t1115 + (t637 * t1096 + t635 * t1097 + t633 * t1098) * t892, 0; t621, t645, t615, t613, t643, t641, t624, t625, t661, t686 * t1103 + t688 * t1104 + t690 * t1102 + t693 * t1112 + t695 * t1110 + t697 * t1108 + (t670 * t1093 + t669 * t1094 + t668 * t1095) * t892, t687 * t1103 + t689 * t1104 + t691 * t1102 + t693 * t1113 + t695 * t1111 + t697 * t1109 + (t1093 * t673 + t1094 * t672 + t1095 * t671) * t892, 0; t617, t640, t612, t611, t639, t638, t618, t619, t647, t648 * t1103 + t652 * t1104 + t656 * t1102 + t676 * t1118 + t680 * t1116 + t684 * t1114 + (t630 * t1093 + t628 * t1094 + t626 * t1095) * t892, t650 * t1103 + t654 * t1104 + t658 * t1102 + t677 * t1118 + t681 * t1116 + t685 * t1114 + (t1093 * t636 + t1094 * t634 + t1095 * t632) * t892, 0; t693 ^ 2 * t762 + t695 ^ 2 * t764 + t697 ^ 2 * t766, t719 * t783 + t720 * t785 + t721 * t787, (t886 * t970 + t888 * t968 + t890 * t966) * t1132, (-t880 * t970 - t882 * t968 - t884 * t966) * t1132, t721 * t1069 + t720 * t1071 + t719 * t1073, 0.2e1 * t719 * t988 + 0.2e1 * t720 * t986 + 0.2e1 * t721 * t984, (t879 * t962 + t881 * t961 + t883 * t960) * t1131, (t885 * t962 + t887 * t961 + t889 * t960) * t1131, (t734 ^ 2 * t792 + t735 ^ 2 * t794 + t736 ^ 2 * t796) * t893, t649 * t1103 + t653 * t1104 + t657 * t1102 + t674 * t1118 + t678 * t1116 + t682 * t1114 + (t631 * t1093 + t629 * t1094 + t627 * t1095) * t892, t651 * t1103 + t655 * t1104 + t659 * t1102 + t675 * t1118 + t679 * t1116 + t683 * t1114 + (t1093 * t637 + t1094 * t635 + t1095 * t633) * t892, 1;];
tau_reg  = t1;
