% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPP1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:53
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RPP1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPP1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPP1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPP1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RPP1A0_coriolisvec_para_pf_mdp: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPP1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPP1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RPP1A0_coriolisvec_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:52:58
% EndTime: 2019-05-03 14:53:10
% DurationCPUTime: 12.52s
% Computational Cost: add. (118639->514), mult. (202083->804), div. (2232->6), fcn. (35302->14), ass. (0->307)
t2648 = qJ(2,3) ^ 2;
t2653 = koppelP(3,2);
t2634 = pkin(1) + qJ(3,3);
t2656 = koppelP(3,1);
t2751 = t2634 * t2656;
t2557 = qJ(2,3) * t2751 - t2648 * t2653 - t2653;
t2752 = t2634 * t2653;
t2558 = qJ(2,3) * t2752 + t2648 * t2656 + t2656;
t2644 = xDP(2);
t2607 = qJ(2,3) * t2644;
t2646 = xP(3);
t2622 = sin(t2646);
t2623 = cos(t2646);
t2643 = xDP(3);
t2645 = xDP(1);
t2491 = t2634 * t2607 + t2645 * t2648 + t2645 + (t2557 * t2623 - t2558 * t2622) * t2643;
t2608 = qJ(2,3) * t2645;
t2492 = -t2634 * t2608 + t2644 * t2648 + t2644 + (t2557 * t2622 + t2558 * t2623) * t2643;
t2631 = legFrame(3,3);
t2613 = sin(t2631);
t2616 = cos(t2631);
t2637 = sin(qJ(1,3));
t2640 = cos(qJ(1,3));
t2467 = (t2491 * t2637 - t2492 * t2640) * t2616 + (t2491 * t2640 + t2492 * t2637) * t2613;
t2799 = 0.2e1 * t2467;
t2650 = qJ(2,2) ^ 2;
t2654 = koppelP(2,2);
t2635 = pkin(1) + qJ(3,2);
t2657 = koppelP(2,1);
t2747 = t2635 * t2657;
t2559 = qJ(2,2) * t2747 - t2650 * t2654 - t2654;
t2748 = t2635 * t2654;
t2560 = qJ(2,2) * t2748 + t2650 * t2657 + t2657;
t2609 = qJ(2,2) * t2644;
t2493 = t2635 * t2609 + t2645 * t2650 + t2645 + (t2559 * t2623 - t2560 * t2622) * t2643;
t2610 = qJ(2,2) * t2645;
t2494 = -t2635 * t2610 + t2644 * t2650 + t2644 + (t2559 * t2622 + t2560 * t2623) * t2643;
t2632 = legFrame(2,3);
t2614 = sin(t2632);
t2617 = cos(t2632);
t2638 = sin(qJ(1,2));
t2641 = cos(qJ(1,2));
t2468 = (t2493 * t2638 - t2494 * t2641) * t2617 + (t2493 * t2641 + t2494 * t2638) * t2614;
t2798 = 0.2e1 * t2468;
t2652 = qJ(2,1) ^ 2;
t2655 = koppelP(1,2);
t2636 = pkin(1) + qJ(3,1);
t2658 = koppelP(1,1);
t2743 = t2636 * t2658;
t2561 = qJ(2,1) * t2743 - t2652 * t2655 - t2655;
t2744 = t2636 * t2655;
t2562 = qJ(2,1) * t2744 + t2652 * t2658 + t2658;
t2611 = qJ(2,1) * t2644;
t2495 = t2636 * t2611 + t2645 * t2652 + t2645 + (t2561 * t2623 - t2562 * t2622) * t2643;
t2612 = qJ(2,1) * t2645;
t2496 = -t2636 * t2612 + t2644 * t2652 + t2644 + (t2561 * t2622 + t2562 * t2623) * t2643;
t2633 = legFrame(1,3);
t2615 = sin(t2633);
t2618 = cos(t2633);
t2639 = sin(qJ(1,1));
t2642 = cos(qJ(1,1));
t2469 = (t2495 * t2639 - t2496 * t2642) * t2618 + (t2495 * t2642 + t2496 * t2639) * t2615;
t2797 = 0.2e1 * t2469;
t2660 = (pkin(1) ^ 2);
t2813 = t2660 + 1;
t2779 = qJ(2,1) * t2655;
t2812 = t2743 - t2779;
t2778 = qJ(2,1) * t2658;
t2811 = t2744 + t2778;
t2775 = qJ(2,2) * t2654;
t2810 = t2747 - t2775;
t2774 = qJ(2,2) * t2657;
t2809 = t2748 + t2774;
t2771 = qJ(2,3) * t2653;
t2808 = t2751 - t2771;
t2770 = qJ(2,3) * t2656;
t2807 = t2752 + t2770;
t2795 = -t2648 - 0.1e1;
t2794 = -t2650 - 0.1e1;
t2793 = -t2652 - 0.1e1;
t2806 = MDP(5) + MDP(7);
t2802 = 2 * pkin(1);
t2624 = qJ(3,3) * t2802;
t2647 = qJ(3,3) ^ 2;
t2740 = t2647 + t2660;
t2718 = t2624 + t2740;
t2703 = t2648 + t2718;
t2590 = 0.1e1 + t2703;
t2575 = 0.1e1 / t2590;
t2576 = 0.1e1 / t2590 ^ 2;
t2577 = t2575 * t2576;
t2625 = qJ(3,2) * t2802;
t2649 = qJ(3,2) ^ 2;
t2739 = t2649 + t2660;
t2717 = t2625 + t2739;
t2702 = t2650 + t2717;
t2591 = 0.1e1 + t2702;
t2578 = 0.1e1 / t2591;
t2579 = 0.1e1 / t2591 ^ 2;
t2580 = t2578 * t2579;
t2626 = qJ(3,1) * t2802;
t2651 = qJ(3,1) ^ 2;
t2738 = t2651 + t2660;
t2716 = t2626 + t2738;
t2701 = t2652 + t2716;
t2592 = 0.1e1 + t2701;
t2581 = 0.1e1 / t2592;
t2582 = 0.1e1 / t2592 ^ 2;
t2583 = t2581 * t2582;
t2733 = 1 + t2740;
t2533 = t2653 * t2733 + pkin(1) * t2770 + qJ(3,3) * (t2653 * t2802 + t2770);
t2534 = -t2634 * t2771 + (t2733 + t2624) * t2656;
t2737 = t2645 * t2802;
t2741 = t2813 * t2645;
t2805 = (t2533 * t2623 + t2534 * t2622) * t2643 + pkin(1) * t2607 - qJ(3,3) * (-t2607 + t2737) - t2645 * t2647 - t2741;
t2732 = 1 + t2739;
t2535 = t2654 * t2732 + pkin(1) * t2774 + qJ(3,2) * (t2654 * t2802 + t2774);
t2536 = -t2635 * t2775 + (t2732 + t2625) * t2657;
t2804 = t2643 * (t2535 * t2623 + t2536 * t2622) + pkin(1) * t2609 - qJ(3,2) * (-t2609 + t2737) - t2645 * t2649 - t2741;
t2731 = 1 + t2738;
t2537 = t2655 * t2731 + pkin(1) * t2778 + qJ(3,1) * (t2655 * t2802 + t2778);
t2538 = -t2636 * t2779 + (t2731 + t2626) * t2658;
t2803 = t2643 * (t2537 * t2623 + t2538 * t2622) + pkin(1) * t2611 - qJ(3,1) * (-t2611 + t2737) - t2645 * t2651 - t2741;
t2621 = pkin(1) * t2644;
t2605 = 0.2e1 * t2621;
t2742 = t2813 * t2644;
t2482 = t2647 * t2644 + (t2605 + t2608) * qJ(3,3) + pkin(1) * t2608 + (-t2533 * t2622 + t2534 * t2623) * t2643 + t2742;
t2458 = (t2482 * t2637 - t2640 * t2805) * t2616 + t2613 * (t2482 * t2640 + t2637 * t2805);
t2497 = qJ(3,3) * t2644 + t2608 + t2621 + (-t2622 * t2807 + t2623 * t2808) * t2643;
t2498 = t2607 - t2634 * t2645 + (t2622 * t2808 + t2623 * t2807) * t2643;
t2473 = (t2497 * t2640 + t2498 * t2637) * t2616 + (-t2497 * t2637 + t2498 * t2640) * t2613;
t2753 = t2634 * t2640;
t2728 = qJ(2,3) * t2753;
t2545 = -t2637 * t2795 + t2728;
t2754 = t2634 * t2637;
t2602 = qJ(2,3) * t2754;
t2548 = t2640 * t2795 + t2602;
t2509 = t2545 * t2616 - t2548 * t2613;
t2512 = t2545 * t2613 + t2548 * t2616;
t2551 = t2622 * t2656 + t2623 * t2653;
t2554 = -t2622 * t2653 + t2623 * t2656;
t2599 = 1 + t2718;
t2766 = t2458 * t2473;
t2724 = t2577 * t2766;
t2630 = t2643 ^ 2;
t2757 = t2575 * t2630;
t2425 = -t2473 * (t2795 * t2458 + (t2634 * t2799 + (-t2599 - t2648) * t2473) * qJ(2,3)) * t2577 - t2795 * t2724 - (t2509 * t2554 + t2512 * t2551) * t2757;
t2483 = t2649 * t2644 + (t2605 + t2610) * qJ(3,2) + pkin(1) * t2610 + (-t2535 * t2622 + t2536 * t2623) * t2643 + t2742;
t2459 = (t2483 * t2638 - t2641 * t2804) * t2617 + t2614 * (t2483 * t2641 + t2638 * t2804);
t2499 = qJ(3,2) * t2644 + t2610 + t2621 + (-t2622 * t2809 + t2623 * t2810) * t2643;
t2500 = t2609 - t2635 * t2645 + (t2622 * t2810 + t2623 * t2809) * t2643;
t2474 = (t2499 * t2641 + t2500 * t2638) * t2617 + (-t2499 * t2638 + t2500 * t2641) * t2614;
t2749 = t2635 * t2641;
t2729 = qJ(2,2) * t2749;
t2546 = -t2638 * t2794 + t2729;
t2750 = t2635 * t2638;
t2603 = qJ(2,2) * t2750;
t2549 = t2641 * t2794 + t2603;
t2510 = t2546 * t2617 - t2549 * t2614;
t2513 = t2546 * t2614 + t2549 * t2617;
t2552 = t2622 * t2657 + t2623 * t2654;
t2555 = -t2622 * t2654 + t2623 * t2657;
t2600 = 1 + t2717;
t2765 = t2459 * t2474;
t2723 = t2580 * t2765;
t2756 = t2578 * t2630;
t2426 = -t2474 * (t2794 * t2459 + (t2635 * t2798 + (-t2600 - t2650) * t2474) * qJ(2,2)) * t2580 - t2794 * t2723 - (t2510 * t2555 + t2513 * t2552) * t2756;
t2484 = t2651 * t2644 + (t2605 + t2612) * qJ(3,1) + pkin(1) * t2612 + (-t2537 * t2622 + t2538 * t2623) * t2643 + t2742;
t2460 = (t2484 * t2639 - t2642 * t2803) * t2618 + t2615 * (t2484 * t2642 + t2639 * t2803);
t2501 = qJ(3,1) * t2644 + t2612 + t2621 + (-t2622 * t2811 + t2623 * t2812) * t2643;
t2502 = t2611 - t2636 * t2645 + (t2622 * t2812 + t2623 * t2811) * t2643;
t2475 = (t2501 * t2642 + t2502 * t2639) * t2618 + (-t2501 * t2639 + t2502 * t2642) * t2615;
t2745 = t2636 * t2642;
t2730 = qJ(2,1) * t2745;
t2547 = -t2639 * t2793 + t2730;
t2746 = t2636 * t2639;
t2604 = qJ(2,1) * t2746;
t2550 = t2642 * t2793 + t2604;
t2511 = t2547 * t2618 - t2550 * t2615;
t2514 = t2547 * t2615 + t2550 * t2618;
t2553 = t2622 * t2658 + t2623 * t2655;
t2556 = -t2622 * t2655 + t2623 * t2658;
t2601 = 1 + t2716;
t2764 = t2460 * t2475;
t2722 = t2583 * t2764;
t2755 = t2581 * t2630;
t2427 = -t2475 * (t2793 * t2460 + (t2636 * t2797 + (-t2601 - t2652) * t2475) * qJ(2,1)) * t2583 - t2793 * t2722 - (t2511 * t2556 + t2514 * t2553) * t2755;
t2801 = 2 * MDP(5);
t2800 = 2 * MDP(8);
t2796 = -3 * t2660;
t2698 = qJ(2,3) * t2467 + t2458 * t2634;
t2437 = t2698 * t2575;
t2569 = qJ(2,3) * t2640 - t2754;
t2572 = qJ(2,3) * t2637 + t2753;
t2521 = t2569 * t2616 - t2572 * t2613;
t2524 = t2569 * t2613 + t2572 * t2616;
t2428 = (-t2521 * t2554 - t2524 * t2551) * t2757 + (-t2437 * t2576 - t2577 * t2698) * t2473;
t2792 = pkin(1) * t2428;
t2699 = qJ(2,2) * t2468 + t2459 * t2635;
t2438 = t2699 * t2578;
t2570 = qJ(2,2) * t2641 - t2750;
t2573 = qJ(2,2) * t2638 + t2749;
t2522 = t2570 * t2617 - t2573 * t2614;
t2525 = t2570 * t2614 + t2573 * t2617;
t2429 = (-t2522 * t2555 - t2525 * t2552) * t2756 + (-t2438 * t2579 - t2580 * t2699) * t2474;
t2791 = pkin(1) * t2429;
t2700 = qJ(2,1) * t2469 + t2460 * t2636;
t2439 = t2700 * t2581;
t2571 = qJ(2,1) * t2642 - t2746;
t2574 = qJ(2,1) * t2639 + t2745;
t2523 = t2571 * t2618 - t2574 * t2615;
t2526 = t2571 * t2615 + t2574 * t2618;
t2430 = (-t2523 * t2556 - t2526 * t2553) * t2755 + (-t2439 * t2582 - t2583 * t2700) * t2475;
t2790 = pkin(1) * t2430;
t2789 = MDP(6) * qJ(2,1);
t2788 = MDP(6) * qJ(2,2);
t2787 = MDP(6) * qJ(2,3);
t2786 = MDP(4) - MDP(8);
t2461 = t2467 * t2575;
t2539 = t2599 * t2637 - t2728;
t2542 = t2599 * t2640 + t2602;
t2503 = t2539 * t2616 + t2542 * t2613;
t2506 = -t2539 * t2613 + t2542 * t2616;
t2659 = pkin(1) * t2660;
t2772 = qJ(2,3) * t2458;
t2676 = qJ(2,3) * t2634 * t2724 + (-t2503 * t2551 - t2506 * t2554) * t2757 + (-t2467 * t2577 * t2599 - ((t2647 + 1) * t2461 + ((pkin(1) * t2799 - t2772) * qJ(3,3) + t2660 * t2467 - pkin(1) * t2772 + (-t2659 + (-(3 * t2647) + t2795) * pkin(1) + (-t2647 + t2796 + t2795) * qJ(3,3)) * t2473) * t2575) * t2576) * t2473;
t2773 = qJ(2,3) * t2428;
t2784 = MDP(9) * (t2676 + t2773);
t2462 = t2468 * t2578;
t2540 = t2600 * t2638 - t2729;
t2543 = t2600 * t2641 + t2603;
t2504 = t2540 * t2617 + t2543 * t2614;
t2507 = -t2540 * t2614 + t2543 * t2617;
t2776 = qJ(2,2) * t2459;
t2675 = qJ(2,2) * t2635 * t2723 + (-t2504 * t2552 - t2507 * t2555) * t2756 + (-t2468 * t2580 * t2600 - ((t2649 + 1) * t2462 + ((pkin(1) * t2798 - t2776) * qJ(3,2) + t2660 * t2468 - pkin(1) * t2776 + (-t2659 + (-(3 * t2649) + t2794) * pkin(1) + (-t2649 + t2796 + t2794) * qJ(3,2)) * t2474) * t2578) * t2579) * t2474;
t2777 = qJ(2,2) * t2429;
t2783 = MDP(9) * (t2675 + t2777);
t2463 = t2469 * t2581;
t2541 = t2601 * t2639 - t2730;
t2544 = t2601 * t2642 + t2604;
t2505 = t2541 * t2618 + t2544 * t2615;
t2508 = -t2541 * t2615 + t2544 * t2618;
t2780 = qJ(2,1) * t2460;
t2674 = qJ(2,1) * t2636 * t2722 + (-t2505 * t2553 - t2508 * t2556) * t2755 + (-t2469 * t2583 * t2601 - ((t2651 + 1) * t2463 + ((pkin(1) * t2797 - t2780) * qJ(3,1) + t2660 * t2469 - pkin(1) * t2780 + (-t2659 + (-(3 * t2651) + t2793) * pkin(1) + (-t2651 + t2796 + t2793) * qJ(3,1)) * t2475) * t2581) * t2582) * t2475;
t2781 = qJ(2,1) * t2430;
t2782 = MDP(9) * (t2674 + t2781);
t2769 = t2428 * t2634;
t2768 = t2429 * t2635;
t2767 = t2430 * t2636;
t2760 = t2473 * t2576;
t2759 = t2474 * t2579;
t2758 = t2475 * t2582;
t2736 = t2473 * t2799;
t2735 = t2474 * t2798;
t2734 = t2475 * t2797;
t2727 = (t2473 * t2575 * t2634 - 0.2e1 * t2461) * t2760;
t2726 = (t2474 * t2578 * t2635 - 0.2e1 * t2462) * t2759;
t2725 = (t2475 * t2581 * t2636 - 0.2e1 * t2463) * t2758;
t2715 = qJ(2,1) * t2801 + MDP(1);
t2714 = qJ(2,2) * t2801 + MDP(1);
t2713 = qJ(2,3) * t2801 + MDP(1);
t2712 = t2766 * t2800;
t2711 = t2765 * t2800;
t2710 = t2764 * t2800;
t2709 = 0.2e1 * t2437 * t2760;
t2708 = 0.2e1 * t2438 * t2759;
t2707 = 0.2e1 * t2439 * t2758;
t2706 = t2577 * t2736;
t2705 = t2580 * t2735;
t2704 = t2583 * t2734;
t2470 = t2473 ^ 2;
t2688 = (t2425 - t2792) * MDP(6) + (t2425 - t2769 + (-qJ(2,3) * t2470 - 0.2e1 * t2766) * t2576) * MDP(9);
t2471 = t2474 ^ 2;
t2687 = (t2426 - t2791) * MDP(6) + (t2426 - t2768 + (-qJ(2,2) * t2471 - 0.2e1 * t2765) * t2579) * MDP(9);
t2472 = t2475 ^ 2;
t2686 = (t2427 - t2790) * MDP(6) + (t2427 - t2767 + (-qJ(2,1) * t2472 - 0.2e1 * t2764) * t2582) * MDP(9);
t2679 = MDP(4) * (t2425 - 0.2e1 * t2792) + MDP(6) * ((t2648 + t2660) * t2428 - pkin(1) * t2425) + MDP(7) * (t2676 + 0.2e1 * t2773) + MDP(8) * (-t2425 + 0.2e1 * t2769) + MDP(9) * (qJ(2,3) * t2676 - t2425 * t2634 + t2428 * t2703);
t2678 = MDP(4) * (t2426 - 0.2e1 * t2791) + MDP(6) * ((t2650 + t2660) * t2429 - pkin(1) * t2426) + MDP(7) * (t2675 + 0.2e1 * t2777) + MDP(8) * (-t2426 + 0.2e1 * t2768) + MDP(9) * (qJ(2,2) * t2675 - t2426 * t2635 + t2429 * t2702);
t2677 = MDP(4) * (t2427 - 0.2e1 * t2790) + MDP(6) * ((t2652 + t2660) * t2430 - pkin(1) * t2427) + MDP(7) * (t2674 + 0.2e1 * t2781) + MDP(8) * (-t2427 + 0.2e1 * t2767) + MDP(9) * (qJ(2,1) * t2674 - t2427 * t2636 + t2430 * t2701);
t2532 = t2639 * t2812 - t2642 * t2811;
t2531 = t2638 * t2810 - t2641 * t2809;
t2530 = t2637 * t2808 - t2640 * t2807;
t2529 = t2639 * t2811 + t2642 * t2812;
t2528 = t2638 * t2809 + t2641 * t2810;
t2527 = t2637 * t2807 + t2640 * t2808;
t2520 = t2561 * t2639 - t2562 * t2642;
t2519 = t2561 * t2642 + t2562 * t2639;
t2518 = t2559 * t2638 - t2560 * t2641;
t2517 = t2559 * t2641 + t2560 * t2638;
t2516 = t2557 * t2637 - t2558 * t2640;
t2515 = t2557 * t2640 + t2558 * t2637;
t2490 = t2537 * t2639 + t2538 * t2642;
t2489 = -t2537 * t2642 + t2538 * t2639;
t2488 = t2535 * t2638 + t2536 * t2641;
t2487 = -t2535 * t2641 + t2536 * t2638;
t2486 = t2533 * t2637 + t2534 * t2640;
t2485 = -t2533 * t2640 + t2534 * t2637;
t2481 = (t2529 * t2623 + t2532 * t2622) * t2618 - (-t2529 * t2622 + t2532 * t2623) * t2615;
t2480 = (t2528 * t2623 + t2531 * t2622) * t2617 - (-t2528 * t2622 + t2531 * t2623) * t2614;
t2479 = (t2527 * t2623 + t2530 * t2622) * t2616 - (-t2527 * t2622 + t2530 * t2623) * t2613;
t2478 = (-t2519 * t2622 + t2520 * t2623) * t2618 + (t2519 * t2623 + t2520 * t2622) * t2615;
t2477 = (-t2517 * t2622 + t2518 * t2623) * t2617 + (t2517 * t2623 + t2518 * t2622) * t2614;
t2476 = (-t2515 * t2622 + t2516 * t2623) * t2616 + (t2515 * t2623 + t2516 * t2622) * t2613;
t2466 = (t2489 * t2623 - t2490 * t2622) * t2618 + (t2489 * t2622 + t2490 * t2623) * t2615;
t2465 = (t2487 * t2623 - t2488 * t2622) * t2617 + (t2487 * t2622 + t2488 * t2623) * t2614;
t2464 = (t2485 * t2623 - t2486 * t2622) * t2616 + (t2485 * t2622 + t2486 * t2623) * t2613;
t1 = [(-t2506 * t2727 - t2507 * t2726 - t2508 * t2725 + t2521 * t2709 + t2522 * t2708 + t2523 * t2707) * MDP(9) + (-MDP(11) * t2623 + MDP(12) * t2622) * t2630 + (t2523 * t2710 + (-t2508 * MDP(8) - t2511 * t2806) * t2472 + (-t2472 * t2511 + t2523 * t2734) * t2789) * t2583 + (t2522 * t2711 + (-t2507 * MDP(8) - t2510 * t2806) * t2471 + (-t2471 * t2510 + t2522 * t2735) * t2788) * t2580 + (t2521 * t2712 + (-t2506 * MDP(8) - t2509 * t2806) * t2470 + (-t2470 * t2509 + t2521 * t2736) * t2787) * t2577 + (t2508 * t2782 + t2686 * t2511 + t2677 * t2523 + (t2508 * MDP(7) + t2511 * t2786 + t2523 * t2715) * t2430) * t2581 + (t2507 * t2783 + t2687 * t2510 + t2678 * t2522 + (t2507 * MDP(7) + t2510 * t2786 + t2522 * t2714) * t2429) * t2578 + (t2506 * t2784 + t2688 * t2509 + t2679 * t2521 + (t2506 * MDP(7) + t2509 * t2786 + t2521 * t2713) * t2428) * t2575 + t2806 * (t2521 * t2706 + t2522 * t2705 + t2523 * t2704); (-t2503 * t2727 - t2504 * t2726 - t2505 * t2725 + t2524 * t2709 + t2525 * t2708 + t2526 * t2707) * MDP(9) + (-MDP(11) * t2622 - MDP(12) * t2623) * t2630 + (t2526 * t2710 + (-t2505 * MDP(8) - t2514 * t2806) * t2472 + (-t2472 * t2514 + t2526 * t2734) * t2789) * t2583 + (t2525 * t2711 + (-t2504 * MDP(8) - t2513 * t2806) * t2471 + (-t2471 * t2513 + t2525 * t2735) * t2788) * t2580 + (t2524 * t2712 + (-t2503 * MDP(8) - t2512 * t2806) * t2470 + (-t2470 * t2512 + t2524 * t2736) * t2787) * t2577 + (t2505 * t2782 + t2686 * t2514 + t2677 * t2526 + (t2505 * MDP(7) + t2514 * t2786 + t2526 * t2715) * t2430) * t2581 + (t2504 * t2783 + t2687 * t2513 + t2678 * t2525 + (t2504 * MDP(7) + t2513 * t2786 + t2525 * t2714) * t2429) * t2578 + (t2503 * t2784 + t2688 * t2512 + t2679 * t2524 + (t2503 * MDP(7) + t2512 * t2786 + t2524 * t2713) * t2428) * t2575 + t2806 * (t2524 * t2706 + t2525 * t2705 + t2526 * t2704); (-t2464 * t2727 - t2465 * t2726 - t2466 * t2725 + t2479 * t2709 + t2480 * t2708 + t2481 * t2707) * MDP(9) + (t2481 * t2710 + (-t2466 * MDP(8) - t2478 * t2806) * t2472 + (-t2472 * t2478 + t2481 * t2734) * t2789) * t2583 + (t2480 * t2711 + (-t2465 * MDP(8) - t2477 * t2806) * t2471 + (-t2471 * t2477 + t2480 * t2735) * t2788) * t2580 + (t2479 * t2712 + (-t2464 * MDP(8) - t2476 * t2806) * t2470 + (-t2470 * t2476 + t2479 * t2736) * t2787) * t2577 + (t2466 * t2782 + t2686 * t2478 + t2677 * t2481 + (t2466 * MDP(7) + t2478 * t2786 + t2481 * t2715) * t2430) * t2581 + (t2465 * t2783 + t2687 * t2477 + t2678 * t2480 + (t2465 * MDP(7) + t2477 * t2786 + t2480 * t2714) * t2429) * t2578 + (t2464 * t2784 + t2688 * t2476 + t2679 * t2479 + (t2464 * MDP(7) + t2476 * t2786 + t2479 * t2713) * t2428) * t2575 + t2806 * (t2479 * t2706 + t2480 * t2705 + t2481 * t2704);];
taucX  = t1;
