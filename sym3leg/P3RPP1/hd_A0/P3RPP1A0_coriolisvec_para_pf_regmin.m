% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x13]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:53
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPP1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPP1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPP1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPP1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RPP1A0_coriolisvec_para_pf_regmin: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPP1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPP1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:52:31
% EndTime: 2019-05-03 14:52:42
% DurationCPUTime: 11.38s
% Computational Cost: add. (118620->550), mult. (202058->870), div. (2232->6), fcn. (35302->14), ass. (0->359)
t1143 = (pkin(1) ^ 2);
t1314 = 1 + t1143;
t1129 = xP(3);
t1105 = sin(t1129);
t1106 = cos(t1129);
t1138 = koppelP(1,2);
t1141 = koppelP(1,1);
t1036 = t1105 * t1141 + t1106 * t1138;
t1039 = -t1105 * t1138 + t1106 * t1141;
t1135 = (qJ(2,1) ^ 2);
t1301 = 2 * pkin(1);
t1109 = qJ(3,1) * t1301;
t1134 = qJ(3,1) ^ 2;
t1227 = t1134 + t1143;
t1196 = t1109 + t1227;
t1184 = t1135 + t1196;
t1075 = 1 + t1184;
t1064 = 1 / t1075;
t1065 = 1 / t1075 ^ 2;
t1066 = t1064 * t1065;
t1116 = legFrame(1,3);
t1098 = sin(t1116);
t1101 = cos(t1116);
t1122 = sin(qJ(1,1));
t1125 = cos(qJ(1,1));
t1128 = xDP(1);
t1095 = qJ(2,1) * t1128;
t1127 = xDP(2);
t1104 = pkin(1) * t1127;
t1126 = xDP(3);
t1119 = pkin(1) + qJ(3,1);
t1233 = t1119 * t1138;
t1267 = qJ(2,1) * t1141;
t1309 = t1233 + t1267;
t1232 = t1119 * t1141;
t1268 = qJ(2,1) * t1138;
t1310 = t1232 - t1268;
t984 = (qJ(3,1) * t1127) + t1095 + t1104 + (-t1105 * t1309 + t1106 * t1310) * t1126;
t1094 = qJ(2,1) * t1127;
t985 = t1094 - (t1119 * t1128) + (t1105 * t1310 + t1106 * t1309) * t1126;
t958 = (t1122 * t985 + t1125 * t984) * t1101 + (-t1122 * t984 + t1125 * t985) * t1098;
t1249 = t1066 * t958;
t1214 = 1 + t1227;
t1020 = t1138 * t1214 + pkin(1) * t1267 + (t1138 * t1301 + t1267) * qJ(3,1);
t1021 = -t1119 * t1268 + (t1214 + t1109) * t1141;
t1226 = t1128 * t1301;
t1230 = t1314 * t1128;
t1302 = (t1020 * t1106 + t1021 * t1105) * t1126 + pkin(1) * t1094 - (-t1094 + t1226) * qJ(3,1) - (t1134 * t1128) - t1230;
t1088 = 2 * t1104;
t1231 = t1314 * t1127;
t967 = (t1134 * t1127) + (t1088 + t1095) * qJ(3,1) + pkin(1) * t1095 + (-t1020 * t1105 + t1021 * t1106) * t1126 + t1231;
t943 = (t967 * t1122 - t1125 * t1302) * t1101 + t1098 * (t1122 * t1302 + t967 * t1125);
t1209 = t943 * t1249;
t1113 = t1126 ^ 2;
t1246 = t1064 * t1113;
t1285 = -t1135 - 1;
t1234 = t1119 * t1125;
t1203 = qJ(2,1) * t1234;
t1030 = -t1122 * t1285 + t1203;
t1235 = t1119 * t1122;
t1087 = qJ(2,1) * t1235;
t1033 = t1125 * t1285 + t1087;
t994 = t1030 * t1101 - t1033 * t1098;
t997 = t1030 * t1098 + t1033 * t1101;
t1166 = -t1285 * t1209 - (t1036 * t997 + t1039 * t994) * t1246;
t1251 = t1065 * t958;
t1084 = 1 + t1196;
t1044 = qJ(2,1) * t1232 - t1135 * t1138 - t1138;
t1045 = qJ(2,1) * t1233 + t1135 * t1141 + t1141;
t978 = t1119 * t1094 + (t1135 * t1128) + t1128 + (t1044 * t1106 - t1045 * t1105) * t1126;
t979 = -t1119 * t1095 + (t1135 * t1127) + t1127 + (t1044 * t1105 + t1045 * t1106) * t1126;
t952 = (t1122 * t978 - t1125 * t979) * t1101 + (t1122 * t979 + t1125 * t978) * t1098;
t916 = (t1285 * t943 + (t1119 * t952 + (-t1084 - t1135) * t958) * qJ(2,1)) * t1064;
t1313 = t916 * t1251 - t1166;
t1137 = koppelP(2,2);
t1140 = koppelP(2,1);
t1035 = t1105 * t1140 + t1106 * t1137;
t1038 = -t1105 * t1137 + t1106 * t1140;
t1133 = (qJ(2,2) ^ 2);
t1108 = qJ(3,2) * t1301;
t1132 = qJ(3,2) ^ 2;
t1228 = t1132 + t1143;
t1197 = t1108 + t1228;
t1185 = t1133 + t1197;
t1074 = 1 + t1185;
t1061 = 1 / t1074;
t1062 = 1 / t1074 ^ 2;
t1063 = t1061 * t1062;
t1115 = legFrame(2,3);
t1097 = sin(t1115);
t1100 = cos(t1115);
t1121 = sin(qJ(1,2));
t1124 = cos(qJ(1,2));
t1093 = qJ(2,2) * t1128;
t1118 = pkin(1) + qJ(3,2);
t1237 = t1118 * t1137;
t1264 = qJ(2,2) * t1140;
t1307 = t1237 + t1264;
t1236 = t1118 * t1140;
t1265 = qJ(2,2) * t1137;
t1308 = t1236 - t1265;
t982 = (qJ(3,2) * t1127) + t1093 + t1104 + (-t1105 * t1307 + t1106 * t1308) * t1126;
t1092 = qJ(2,2) * t1127;
t983 = t1092 - (t1118 * t1128) + (t1105 * t1308 + t1106 * t1307) * t1126;
t957 = (t1121 * t983 + t1124 * t982) * t1100 + (-t1121 * t982 + t1124 * t983) * t1097;
t1253 = t1063 * t957;
t1215 = 1 + t1228;
t1018 = t1137 * t1215 + pkin(1) * t1264 + (t1137 * t1301 + t1264) * qJ(3,2);
t1019 = -t1118 * t1265 + (t1215 + t1108) * t1140;
t1303 = (t1018 * t1106 + t1019 * t1105) * t1126 + (pkin(1) * t1092) - ((-t1092 + t1226) * qJ(3,2)) - (t1132 * t1128) - t1230;
t966 = (t1132 * t1127) + ((t1088 + t1093) * qJ(3,2)) + (pkin(1) * t1093) + (-t1018 * t1105 + t1019 * t1106) * t1126 + t1231;
t942 = (t966 * t1121 - t1124 * t1303) * t1100 + t1097 * (t1121 * t1303 + t966 * t1124);
t1211 = t942 * t1253;
t1247 = t1061 * t1113;
t1286 = -t1133 - 1;
t1238 = t1118 * t1124;
t1201 = qJ(2,2) * t1238;
t1029 = -t1121 * t1286 + t1201;
t1239 = t1118 * t1121;
t1086 = qJ(2,2) * t1239;
t1032 = t1124 * t1286 + t1086;
t993 = t1029 * t1100 - t1032 * t1097;
t996 = t1029 * t1097 + t1032 * t1100;
t1167 = -t1286 * t1211 - (t1035 * t996 + t1038 * t993) * t1247;
t1255 = t1062 * t957;
t1083 = 1 + t1197;
t1042 = qJ(2,2) * t1236 - t1133 * t1137 - t1137;
t1043 = qJ(2,2) * t1237 + t1133 * t1140 + t1140;
t976 = (t1118 * t1092) + (t1133 * t1128) + t1128 + (t1042 * t1106 - t1043 * t1105) * t1126;
t977 = -(t1118 * t1093) + (t1133 * t1127) + t1127 + (t1042 * t1105 + t1043 * t1106) * t1126;
t951 = (t1121 * t976 - t1124 * t977) * t1100 + (t1121 * t977 + t1124 * t976) * t1097;
t915 = (t1286 * t942 + (t1118 * t951 + (-t1083 - t1133) * t957) * qJ(2,2)) * t1061;
t1312 = t915 * t1255 - t1167;
t1136 = koppelP(3,2);
t1139 = koppelP(3,1);
t1034 = t1105 * t1139 + t1106 * t1136;
t1037 = -t1105 * t1136 + t1106 * t1139;
t1131 = (qJ(2,3) ^ 2);
t1107 = qJ(3,3) * t1301;
t1130 = qJ(3,3) ^ 2;
t1229 = t1130 + t1143;
t1198 = t1107 + t1229;
t1186 = t1131 + t1198;
t1073 = 1 + t1186;
t1058 = 1 / t1073;
t1059 = 1 / t1073 ^ 2;
t1060 = t1058 * t1059;
t1114 = legFrame(3,3);
t1096 = sin(t1114);
t1099 = cos(t1114);
t1120 = sin(qJ(1,3));
t1123 = cos(qJ(1,3));
t1091 = qJ(2,3) * t1128;
t1117 = pkin(1) + qJ(3,3);
t1241 = t1117 * t1136;
t1261 = qJ(2,3) * t1139;
t1305 = t1241 + t1261;
t1240 = t1117 * t1139;
t1262 = qJ(2,3) * t1136;
t1306 = t1240 - t1262;
t980 = (qJ(3,3) * t1127) + t1091 + t1104 + (-t1105 * t1305 + t1106 * t1306) * t1126;
t1090 = qJ(2,3) * t1127;
t981 = t1090 - (t1117 * t1128) + (t1105 * t1306 + t1106 * t1305) * t1126;
t956 = (t1120 * t981 + t1123 * t980) * t1099 + (-t1120 * t980 + t1123 * t981) * t1096;
t1257 = t1060 * t956;
t1216 = 1 + t1229;
t1016 = t1136 * t1216 + pkin(1) * t1261 + (t1136 * t1301 + t1261) * qJ(3,3);
t1017 = -t1117 * t1262 + (t1216 + t1107) * t1139;
t1304 = (t1016 * t1106 + t1017 * t1105) * t1126 + (pkin(1) * t1090) - ((-t1090 + t1226) * qJ(3,3)) - (t1130 * t1128) - t1230;
t965 = (t1130 * t1127) + ((t1088 + t1091) * qJ(3,3)) + (pkin(1) * t1091) + (-t1016 * t1105 + t1017 * t1106) * t1126 + t1231;
t941 = (t965 * t1120 - t1123 * t1304) * t1099 + t1096 * (t1120 * t1304 + t965 * t1123);
t1213 = t941 * t1257;
t1248 = t1058 * t1113;
t1287 = -t1131 - 1;
t1242 = t1117 * t1123;
t1199 = qJ(2,3) * t1242;
t1028 = -t1120 * t1287 + t1199;
t1243 = t1117 * t1120;
t1085 = qJ(2,3) * t1243;
t1031 = t1123 * t1287 + t1085;
t992 = t1028 * t1099 - t1031 * t1096;
t995 = t1028 * t1096 + t1031 * t1099;
t1168 = -t1287 * t1213 - (t1034 * t995 + t1037 * t992) * t1248;
t1259 = t1059 * t956;
t1082 = 1 + t1198;
t1040 = qJ(2,3) * t1240 - t1131 * t1136 - t1136;
t1041 = qJ(2,3) * t1241 + t1131 * t1139 + t1139;
t974 = (t1117 * t1090) + (t1131 * t1128) + t1128 + (t1040 * t1106 - t1041 * t1105) * t1126;
t975 = -(t1117 * t1091) + (t1131 * t1127) + t1127 + (t1040 * t1105 + t1041 * t1106) * t1126;
t950 = (t1120 * t974 - t1123 * t975) * t1099 + (t1120 * t975 + t1123 * t974) * t1096;
t914 = (t1287 * t941 + (t1117 * t950 + (-t1082 - t1131) * t956) * qJ(2,3)) * t1058;
t1311 = t914 * t1259 - t1168;
t1181 = qJ(2,3) * t950 + t1117 * t941;
t920 = t1181 * t1058;
t1300 = 0.2e1 * t920;
t1182 = qJ(2,2) * t951 + t1118 * t942;
t921 = t1182 * t1061;
t1299 = 0.2e1 * t921;
t1183 = qJ(2,1) * t952 + t1119 * t943;
t922 = t1183 * t1064;
t1298 = 0.2e1 * t922;
t1297 = 0.2e1 * t950;
t1296 = 0.2e1 * t951;
t1295 = 0.2e1 * t952;
t1010 = t1120 * t1305 + t1123 * t1306;
t1013 = t1120 * t1306 - t1123 * t1305;
t962 = (t1010 * t1106 + t1013 * t1105) * t1099 - (-t1010 * t1105 + t1013 * t1106) * t1096;
t1294 = 0.2e1 * t962;
t1011 = t1121 * t1307 + t1124 * t1308;
t1014 = t1121 * t1308 - t1124 * t1307;
t963 = (t1011 * t1106 + t1014 * t1105) * t1100 - (-t1011 * t1105 + t1014 * t1106) * t1097;
t1293 = 0.2e1 * t963;
t1012 = t1122 * t1309 + t1125 * t1310;
t1015 = t1122 * t1310 - t1125 * t1309;
t964 = (t1012 * t1106 + t1015 * t1105) * t1101 - (-t1012 * t1105 + t1015 * t1106) * t1098;
t1292 = 0.2e1 * t964;
t1291 = -3 * t1143;
t1052 = qJ(2,3) * t1123 - t1243;
t1055 = qJ(2,3) * t1120 + t1242;
t1004 = t1052 * t1099 - t1055 * t1096;
t1007 = t1052 * t1096 + t1055 * t1099;
t911 = (-t1004 * t1037 - t1007 * t1034) * t1248 + (-t1059 * t920 - t1060 * t1181) * t956;
t1290 = t911 * pkin(1);
t1053 = qJ(2,2) * t1124 - t1239;
t1056 = qJ(2,2) * t1121 + t1238;
t1005 = t1053 * t1100 - t1056 * t1097;
t1008 = t1053 * t1097 + t1056 * t1100;
t912 = (-t1005 * t1038 - t1008 * t1035) * t1247 + (-t1062 * t921 - t1063 * t1182) * t957;
t1289 = t912 * pkin(1);
t1054 = qJ(2,1) * t1125 - t1235;
t1057 = qJ(2,1) * t1122 + t1234;
t1006 = t1054 * t1101 - t1057 * t1098;
t1009 = t1054 * t1098 + t1057 * t1101;
t913 = (-t1006 * t1039 - t1009 * t1036) * t1246 + (-t1065 * t922 - t1066 * t1183) * t958;
t1288 = t913 * pkin(1);
t1284 = qJ(2,1) * t913;
t1283 = qJ(2,1) * t943;
t1282 = qJ(2,2) * t912;
t1281 = qJ(2,2) * t942;
t1280 = qJ(2,3) * t911;
t1279 = qJ(2,3) * t941;
t998 = t1040 * t1123 + t1041 * t1120;
t999 = t1040 * t1120 - t1041 * t1123;
t959 = (-t1105 * t998 + t1106 * t999) * t1099 + (t1105 * t999 + t1106 * t998) * t1096;
t1278 = t911 * t959;
t1000 = t1042 * t1124 + t1043 * t1121;
t1001 = t1042 * t1121 - t1043 * t1124;
t960 = (-t1000 * t1105 + t1001 * t1106) * t1100 + (t1000 * t1106 + t1001 * t1105) * t1097;
t1277 = t912 * t960;
t1002 = t1044 * t1125 + t1045 * t1122;
t1003 = t1044 * t1122 - t1045 * t1125;
t961 = (-t1002 * t1105 + t1003 * t1106) * t1101 + (t1002 * t1106 + t1003 * t1105) * t1098;
t1276 = t913 * t961;
t1275 = t941 * t956;
t1274 = t942 * t957;
t1273 = t943 * t958;
t1212 = t950 * t1257;
t1189 = qJ(2,3) * t1212;
t953 = t956 ^ 2;
t1272 = (-t911 - t1189) * t1117 + (-qJ(2,3) * t953 - 0.2e1 * t1275) * t1059 - t1311;
t1210 = t951 * t1253;
t1188 = qJ(2,2) * t1210;
t954 = t957 ^ 2;
t1271 = (-t912 - t1188) * t1118 + (-qJ(2,2) * t954 - 0.2e1 * t1274) * t1062 - t1312;
t1208 = t952 * t1249;
t1187 = qJ(2,1) * t1208;
t955 = t958 ^ 2;
t1270 = (-t913 - t1187) * t1119 + (-qJ(2,1) * t955 - 0.2e1 * t1273) * t1065 - t1313;
t1269 = qJ(2,1) * t1066;
t1266 = qJ(2,2) * t1063;
t1263 = qJ(2,3) * t1060;
t1260 = t1058 * t911;
t1258 = t1060 * t953;
t1256 = t1061 * t912;
t1254 = t1063 * t954;
t1252 = t1064 * t913;
t1250 = t1066 * t955;
t1245 = t1105 * t1113;
t1244 = t1106 * t1113;
t1225 = 0.2e1 * t1284;
t1224 = 0.2e1 * t1282;
t1223 = 0.2e1 * t1280;
t1222 = t956 * t1297;
t1221 = t957 * t1296;
t1220 = t958 * t1295;
t1219 = t956 * t1294;
t1218 = t957 * t1293;
t1217 = t958 * t1292;
t1204 = t1119 * t1269;
t1202 = t1118 * t1266;
t1200 = t1117 * t1263;
t1195 = t1064 * t1225;
t1194 = t1061 * t1224;
t1193 = t1058 * t1223;
t1192 = 0.2e1 * t1212;
t1191 = 0.2e1 * t1210;
t1190 = 0.2e1 * t1208;
t893 = (0.2e1 * t911 + t1189) * t1117 + t1311;
t1171 = t1058 * t893 + 0.2e1 * t1213;
t894 = (0.2e1 * t912 + t1188) * t1118 + t1312;
t1170 = t1061 * t894 + 0.2e1 * t1211;
t895 = (0.2e1 * t913 + t1187) * t1119 + t1313;
t1169 = t1064 * t895 + 0.2e1 * t1209;
t1162 = t964 * t1190 + t963 * t1191 + t962 * t1192 - t1250 * t961 - t1254 * t960 - t1258 * t959;
t1161 = t1004 * t1192 + t1005 * t1191 + t1006 * t1190 - t1250 * t994 - t1254 * t993 - t1258 * t992;
t1160 = t1007 * t1192 + t1008 * t1191 + t1009 * t1190 - t1250 * t997 - t1254 * t996 - t1258 * t995;
t1142 = pkin(1) * t1143;
t944 = t950 * t1058;
t1022 = t1082 * t1120 - t1199;
t1025 = t1082 * t1123 + t1085;
t986 = t1022 * t1099 + t1025 * t1096;
t989 = -t1022 * t1096 + t1025 * t1099;
t1159 = t1200 * t1275 + (-t1060 * t1082 * t950 - t1059 * ((t1130 + 1) * t944 + ((pkin(1) * t1297 - t1279) * qJ(3,3) + t1143 * t950 - pkin(1) * t1279 + (-t1142 + (-3 * t1130 + t1287) * pkin(1) + (-t1130 + t1291 + t1287) * qJ(3,3)) * t956) * t1058)) * t956 + (-t1034 * t986 - t1037 * t989) * t1248;
t945 = t951 * t1061;
t1023 = t1083 * t1121 - t1201;
t1026 = t1083 * t1124 + t1086;
t987 = t1023 * t1100 + t1026 * t1097;
t990 = -t1023 * t1097 + t1026 * t1100;
t1158 = t1202 * t1274 + (-t1063 * t1083 * t951 - t1062 * ((t1132 + 1) * t945 + ((pkin(1) * t1296 - t1281) * qJ(3,2) + t1143 * t951 - pkin(1) * t1281 + (-t1142 + (-3 * t1132 + t1286) * pkin(1) + (-t1132 + t1291 + t1286) * qJ(3,2)) * t957) * t1061)) * t957 + (-t1035 * t987 - t1038 * t990) * t1247;
t946 = t952 * t1064;
t1024 = t1084 * t1122 - t1203;
t1027 = t1084 * t1125 + t1087;
t988 = t1024 * t1101 + t1027 * t1098;
t991 = -t1024 * t1098 + t1027 * t1101;
t1157 = t1204 * t1273 + (-t1066 * t1084 * t952 - t1065 * ((t1134 + 1) * t946 + ((pkin(1) * t1295 - t1283) * qJ(3,1) + t1143 * t952 - pkin(1) * t1283 + (-t1142 + (-3 * t1134 + t1285) * pkin(1) + (-t1134 + t1291 + t1285) * qJ(3,1)) * t958) * t1064)) * t958 + (-t1036 * t988 - t1039 * t991) * t1246;
t908 = (-t1059 * t914 - t1200 * t950) * t956 + t1168;
t909 = (-t1062 * t915 - t1202 * t951) * t957 + t1167;
t910 = (-t1065 * t916 - t1204 * t952) * t958 + t1166;
t973 = t1020 * t1122 + t1021 * t1125;
t972 = -t1020 * t1125 + t1021 * t1122;
t971 = t1018 * t1121 + t1019 * t1124;
t970 = -t1018 * t1124 + t1019 * t1121;
t969 = t1016 * t1120 + t1017 * t1123;
t968 = -t1016 * t1123 + t1017 * t1120;
t949 = (-t1105 * t973 + t1106 * t972) * t1101 + (t1105 * t972 + t1106 * t973) * t1098;
t948 = (-t1105 * t971 + t1106 * t970) * t1100 + (t1105 * t970 + t1106 * t971) * t1097;
t947 = (-t1105 * t969 + t1106 * t968) * t1099 + (t1105 * t968 + t1106 * t969) * t1096;
t940 = t1064 * t1119 * t958 - 0.2e1 * t946;
t939 = t1061 * t1118 * t957 - 0.2e1 * t945;
t938 = t1058 * t1117 * t956 - 0.2e1 * t944;
t904 = t910 - 0.2e1 * t1288;
t903 = t910 - t1288;
t902 = t909 - 0.2e1 * t1289;
t901 = t909 - t1289;
t900 = t908 - 0.2e1 * t1290;
t899 = t908 - t1290;
t892 = (t1135 + t1143) * t913 - pkin(1) * t910;
t891 = (t1133 + t1143) * t912 - pkin(1) * t909;
t890 = (t1131 + t1143) * t911 - pkin(1) * t908;
t889 = t1157 + t1284;
t888 = t1157 + t1225;
t887 = t1158 + t1282;
t886 = t1158 + t1224;
t885 = t1159 + t1280;
t884 = t1159 + t1223;
t883 = qJ(2,1) * t1157 - t1119 * t910 + t1184 * t913;
t882 = qJ(2,2) * t1158 - t1118 * t909 + t1185 * t912;
t881 = qJ(2,3) * t1159 - t1117 * t908 + t1186 * t911;
t1 = [t1004 * t1260 + t1005 * t1256 + t1006 * t1252, 0, 0, (t1006 * t904 + t913 * t994) * t1064 + (t1005 * t902 + t912 * t993) * t1061 + (t1004 * t900 + t911 * t992) * t1058, t1004 * t1193 + t1005 * t1194 + t1006 * t1195 + t1161, (t1006 * t892 + t903 * t994) * t1064 + (t1005 * t891 + t901 * t993) * t1061 + (t1004 * t890 + t899 * t992) * t1058 + (t1004 * t1222 - t953 * t992) * t1263 + (t1005 * t1221 - t954 * t993) * t1266 + (t1006 * t1220 - t955 * t994) * t1269, (t1006 * t888 + t913 * t991) * t1064 + (t1005 * t886 + t912 * t990) * t1061 + (t1004 * t884 + t911 * t989) * t1058 + t1161, t1004 * t1171 + t1005 * t1170 + t1006 * t1169 - t1250 * t991 - t1252 * t994 - t1254 * t990 - t1256 * t993 - t1258 * t989 - t1260 * t992, (t1006 * t1298 - t940 * t991) * t1251 + (t1005 * t1299 - t939 * t990) * t1255 + (t1004 * t1300 - t938 * t989) * t1259 + (t1006 * t883 + t1270 * t994 + t991 * t889) * t1064 + (t1005 * t882 + t1271 * t993 + t990 * t887) * t1061 + (t1004 * t881 + t1272 * t992 + t989 * t885) * t1058, 0, -t1244, t1245, 0; t1007 * t1260 + t1008 * t1256 + t1009 * t1252, 0, 0, (t1009 * t904 + t913 * t997) * t1064 + (t1008 * t902 + t912 * t996) * t1061 + (t1007 * t900 + t911 * t995) * t1058, t1007 * t1193 + t1008 * t1194 + t1009 * t1195 + t1160, (t1009 * t892 + t903 * t997) * t1064 + (t1008 * t891 + t901 * t996) * t1061 + (t1007 * t890 + t899 * t995) * t1058 + (t1007 * t1222 - t953 * t995) * t1263 + (t1008 * t1221 - t954 * t996) * t1266 + (t1009 * t1220 - t955 * t997) * t1269, (t1009 * t888 + t913 * t988) * t1064 + (t1008 * t886 + t912 * t987) * t1061 + (t1007 * t884 + t911 * t986) * t1058 + t1160, t1007 * t1171 + t1008 * t1170 + t1009 * t1169 - t1250 * t988 - t1252 * t997 - t1254 * t987 - t1256 * t996 - t1258 * t986 - t1260 * t995, (t1009 * t1298 - t940 * t988) * t1251 + (t1008 * t1299 - t939 * t987) * t1255 + (t1007 * t1300 - t938 * t986) * t1259 + (t1009 * t883 + t1270 * t997 + t988 * t889) * t1064 + (t1008 * t882 + t1271 * t996 + t987 * t887) * t1061 + (t1007 * t881 + t1272 * t995 + t986 * t885) * t1058, 0, -t1245, -t1244, 0; t1252 * t964 + t1256 * t963 + t1260 * t962, 0, 0, (t904 * t964 + t1276) * t1064 + (t902 * t963 + t1277) * t1061 + (t900 * t962 + t1278) * t1058, t1193 * t962 + t1194 * t963 + t1195 * t964 + t1162, (t892 * t964 + t903 * t961) * t1064 + (t891 * t963 + t901 * t960) * t1061 + (t890 * t962 + t899 * t959) * t1058 + (t1219 * t950 - t953 * t959) * t1263 + (t1218 * t951 - t954 * t960) * t1266 + (t1217 * t952 - t955 * t961) * t1269, (t888 * t964 + t913 * t949) * t1064 + (t886 * t963 + t912 * t948) * t1061 + (t884 * t962 + t911 * t947) * t1058 + t1162, (t1217 * t943 - t949 * t955) * t1066 + (t895 * t964 - t1276) * t1064 + (t1218 * t942 - t948 * t954) * t1063 + (t894 * t963 - t1277) * t1061 + (t1219 * t941 - t947 * t953) * t1060 + (t893 * t962 - t1278) * t1058, (t1292 * t922 - t940 * t949) * t1251 + (t1293 * t921 - t939 * t948) * t1255 + (t1294 * t920 - t938 * t947) * t1259 + (t1270 * t961 + t964 * t883 + t949 * t889) * t1064 + (t1271 * t960 + t963 * t882 + t948 * t887) * t1061 + (t1272 * t959 + t962 * t881 + t947 * t885) * t1058, 0, 0, 0, 0;];
tau_reg  = t1;
