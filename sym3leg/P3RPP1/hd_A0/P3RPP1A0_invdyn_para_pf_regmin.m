% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RPP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [3x13]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:53
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P3RPP1A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPP1A0_invdyn_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:52:18
% EndTime: 2019-05-03 14:52:28
% DurationCPUTime: 10.33s
% Computational Cost: add. (135060->615), mult. (229492->912), div. (2484->6), fcn. (40938->14), ass. (0->407)
t330 = (pkin(1) ^ 2);
t508 = 1 + t330;
t321 = (qJ(2,1) ^ 2);
t480 = -t321 - 1;
t298 = legFrame(1,3);
t279 = sin(t298);
t282 = cos(t298);
t307 = sin(qJ(1,1));
t310 = cos(qJ(1,1));
t324 = koppelP(1,2);
t328 = 2 * pkin(1);
t320 = (qJ(3,1) ^ 2);
t399 = t320 + t330;
t392 = 1 + t399;
t327 = koppelP(1,1);
t441 = (qJ(2,1) * t327);
t164 = t392 * t324 + pkin(1) * t441 + qJ(3,1) * (t324 * t328 + t441);
t489 = 2 * qJ(3,1);
t376 = pkin(1) * t489 + t399;
t259 = t376 + 1;
t301 = pkin(1) + qJ(3,1);
t442 = qJ(2,1) * t324;
t165 = t259 * t327 - t301 * t442;
t312 = xDP(2);
t275 = qJ(2,1) * t312;
t315 = xP(3);
t290 = sin(t315);
t291 = cos(t315);
t311 = xDP(3);
t313 = xDP(1);
t398 = t313 * t328;
t402 = t508 * t313;
t490 = (t164 * t291 + t165 * t290) * t311 + (pkin(1) * t275) - (qJ(3,1) * (-t275 + t398)) - (t313 * t320) - t402;
t289 = pkin(1) * t312;
t269 = 2 * t289;
t276 = qJ(2,1) * t313;
t403 = t508 * t312;
t93 = (t320 * t312) + ((t269 + t276) * qJ(3,1)) + (pkin(1) * t276) + (-t164 * t290 + t165 * t291) * t311 + t403;
t63 = (t93 * t307 - t310 * t490) * t282 + t279 * (t307 * t490 + t93 * t310);
t507 = t480 * t63;
t319 = (qJ(2,2) ^ 2);
t481 = -t319 - 1;
t297 = legFrame(2,3);
t278 = sin(t297);
t281 = cos(t297);
t306 = sin(qJ(1,2));
t309 = cos(qJ(1,2));
t323 = koppelP(2,2);
t318 = (qJ(3,2) ^ 2);
t400 = t318 + t330;
t393 = 1 + t400;
t326 = koppelP(2,1);
t439 = (qJ(2,2) * t326);
t162 = t393 * t323 + pkin(1) * t439 + qJ(3,2) * (t323 * t328 + t439);
t488 = 2 * qJ(3,2);
t375 = pkin(1) * t488 + t400;
t258 = t375 + 1;
t300 = pkin(1) + qJ(3,2);
t440 = qJ(2,2) * t323;
t163 = t258 * t326 - t300 * t440;
t273 = qJ(2,2) * t312;
t491 = (t162 * t291 + t163 * t290) * t311 + (pkin(1) * t273) - (qJ(3,2) * (-t273 + t398)) - (t313 * t318) - t402;
t274 = qJ(2,2) * t313;
t92 = (t318 * t312) + ((t269 + t274) * qJ(3,2)) + (pkin(1) * t274) + (-t162 * t290 + t163 * t291) * t311 + t403;
t62 = (t92 * t306 - t309 * t491) * t281 + t278 * (t306 * t491 + t92 * t309);
t506 = t481 * t62;
t317 = (qJ(2,3) ^ 2);
t482 = -t317 - 1;
t296 = legFrame(3,3);
t277 = sin(t296);
t280 = cos(t296);
t305 = sin(qJ(1,3));
t308 = cos(qJ(1,3));
t322 = koppelP(3,2);
t316 = (qJ(3,3) ^ 2);
t401 = t316 + t330;
t394 = 1 + t401;
t325 = koppelP(3,1);
t437 = (qJ(2,3) * t325);
t160 = t394 * t322 + pkin(1) * t437 + qJ(3,3) * (t322 * t328 + t437);
t487 = 2 * qJ(3,3);
t374 = pkin(1) * t487 + t401;
t257 = t374 + 1;
t299 = pkin(1) + qJ(3,3);
t438 = qJ(2,3) * t322;
t161 = t257 * t325 - t299 * t438;
t271 = qJ(2,3) * t312;
t492 = (t160 * t291 + t161 * t290) * t311 + (pkin(1) * t271) - (qJ(3,3) * (-t271 + t398)) - (t313 * t316) - t402;
t272 = qJ(2,3) * t313;
t91 = (t316 * t312) + ((t269 + t272) * qJ(3,3)) + (pkin(1) * t272) + (-t160 * t290 + t161 * t291) * t311 + t403;
t61 = (t91 * t305 - t308 * t492) * t280 + t277 * (t305 * t492 + t91 * t308);
t505 = t482 * t61;
t404 = t301 * t327;
t504 = t404 - t442;
t405 = t301 * t324;
t503 = t405 + t441;
t408 = t300 * t326;
t502 = t408 - t440;
t409 = t300 * t323;
t501 = t409 + t439;
t412 = t299 * t325;
t500 = t412 - t438;
t413 = t299 * t322;
t499 = t413 + t437;
t202 = g(1) * t279 - g(2) * t282;
t205 = g(1) * t282 + g(2) * t279;
t498 = -t202 * t307 + t205 * t310;
t201 = g(1) * t278 - g(2) * t281;
t204 = g(1) * t281 + g(2) * t278;
t497 = -t201 * t306 + t204 * t309;
t200 = g(1) * t277 - g(2) * t280;
t203 = g(1) * t280 + g(2) * t277;
t496 = -t200 * t305 + t203 * t308;
t233 = t257 + t317;
t234 = t258 + t319;
t235 = t259 + t321;
t188 = t290 * t325 + t291 * t322;
t191 = -t290 * t322 + t291 * t325;
t295 = t311 ^ 2;
t302 = xDDP(3);
t303 = xDDP(2);
t130 = -t188 * t295 + t191 * t302 + t303;
t304 = xDDP(1);
t133 = -t188 * t302 - t191 * t295 + t304;
t415 = t299 * t305;
t212 = qJ(2,3) * t308 - t415;
t414 = t299 * t308;
t215 = qJ(2,3) * t305 + t414;
t142 = t212 * t280 - t215 * t277;
t145 = t212 * t277 + t215 * t280;
t218 = 1 / t233;
t194 = qJ(2,3) * t412 - t317 * t322 - t322;
t195 = qJ(2,3) * t413 + t317 * t325 + t325;
t106 = (t299 * t271) + (t313 * t317) + t313 + (t194 * t291 - t195 * t290) * t311;
t107 = -(t299 * t272) + (t312 * t317) + t312 + (t194 * t290 + t195 * t291) * t311;
t70 = (t106 * t305 - t107 * t308) * t280 + (t106 * t308 + t107 * t305) * t277;
t371 = qJ(2,3) * t70 + t299 * t61;
t219 = 1 / t233 ^ 2;
t220 = t218 * t219;
t112 = (qJ(3,3) * t312) + t272 + t289 + (-t290 * t499 + t291 * t500) * t311;
t113 = t271 - (t299 * t313) + (t290 * t500 + t291 * t499) * t311;
t76 = (t112 * t308 + t113 * t305) * t280 + (-t112 * t305 + t113 * t308) * t277;
t451 = t220 * t76;
t453 = t219 * t76;
t37 = -t371 * t451 + (t145 * t130 + t142 * t133 - t371 * t453) * t218;
t34 = qJ(2,3) * t37;
t495 = 0.2e1 * t34 - t496;
t189 = t290 * t326 + t291 * t323;
t192 = -t290 * t323 + t291 * t326;
t131 = -t189 * t295 + t192 * t302 + t303;
t134 = -t189 * t302 - t192 * t295 + t304;
t411 = t300 * t306;
t213 = qJ(2,2) * t309 - t411;
t410 = t300 * t309;
t216 = qJ(2,2) * t306 + t410;
t143 = t213 * t281 - t216 * t278;
t146 = t213 * t278 + t216 * t281;
t221 = 1 / t234;
t196 = qJ(2,2) * t408 - t319 * t323 - t323;
t197 = qJ(2,2) * t409 + t319 * t326 + t326;
t108 = (t300 * t273) + (t313 * t319) + t313 + (t196 * t291 - t197 * t290) * t311;
t109 = -(t300 * t274) + (t312 * t319) + t312 + (t196 * t290 + t197 * t291) * t311;
t71 = (t108 * t306 - t109 * t309) * t281 + (t108 * t309 + t109 * t306) * t278;
t372 = qJ(2,2) * t71 + t300 * t62;
t222 = 1 / t234 ^ 2;
t223 = t221 * t222;
t114 = (qJ(3,2) * t312) + t274 + t289 + (-t290 * t501 + t291 * t502) * t311;
t115 = t273 - (t300 * t313) + (t290 * t502 + t291 * t501) * t311;
t77 = (t114 * t309 + t115 * t306) * t281 + (-t114 * t306 + t115 * t309) * t278;
t447 = t223 * t77;
t449 = t222 * t77;
t38 = -t372 * t447 + (t146 * t131 + t143 * t134 - t372 * t449) * t221;
t35 = qJ(2,2) * t38;
t494 = 0.2e1 * t35 - t497;
t190 = t290 * t327 + t291 * t324;
t193 = -t290 * t324 + t291 * t327;
t132 = -t190 * t295 + t193 * t302 + t303;
t135 = -t190 * t302 - t193 * t295 + t304;
t407 = t301 * t307;
t214 = qJ(2,1) * t310 - t407;
t406 = t301 * t310;
t217 = qJ(2,1) * t307 + t406;
t144 = t214 * t282 - t217 * t279;
t147 = t214 * t279 + t217 * t282;
t224 = 1 / t235;
t198 = qJ(2,1) * t404 - t321 * t324 - t324;
t199 = qJ(2,1) * t405 + t321 * t327 + t327;
t110 = (t301 * t275) + (t313 * t321) + t313 + (t198 * t291 - t199 * t290) * t311;
t111 = -(t301 * t276) + (t312 * t321) + t312 + (t198 * t290 + t199 * t291) * t311;
t72 = (t110 * t307 - t111 * t310) * t282 + (t110 * t310 + t111 * t307) * t279;
t373 = qJ(2,1) * t72 + t301 * t63;
t225 = 1 / t235 ^ 2;
t226 = t224 * t225;
t116 = (qJ(3,1) * t312) + t276 + t289 + (-t290 * t503 + t291 * t504) * t311;
t117 = t275 - (t301 * t313) + (t290 * t504 + t291 * t503) * t311;
t78 = (t116 * t310 + t117 * t307) * t282 + (-t116 * t307 + t117 * t310) * t279;
t443 = t226 * t78;
t445 = t225 * t78;
t39 = -t373 * t443 + (t147 * t132 + t144 * t135 - t373 * t445) * t224;
t36 = qJ(2,1) * t39;
t493 = 0.2e1 * t36 - t498;
t486 = pkin(1) * g(2);
t485 = pkin(1) * t37;
t484 = pkin(1) * t38;
t483 = pkin(1) * t39;
t479 = -3 * t330 - 1;
t478 = g(1) * qJ(2,1);
t477 = g(1) * qJ(2,2);
t476 = g(1) * qJ(2,3);
t475 = g(1) * t308;
t474 = g(1) * t309;
t473 = g(1) * t310;
t472 = g(2) * t308;
t471 = g(2) * t309;
t470 = g(2) * t310;
t136 = t194 * t308 + t195 * t305;
t137 = t194 * t305 - t195 * t308;
t79 = (-t136 * t290 + t137 * t291) * t280 + (t136 * t291 + t137 * t290) * t277;
t469 = t37 * t79;
t138 = t196 * t309 + t197 * t306;
t139 = t196 * t306 - t197 * t309;
t80 = (-t138 * t290 + t139 * t291) * t281 + (t138 * t291 + t139 * t290) * t278;
t468 = t38 * t80;
t140 = t198 * t310 + t199 * t307;
t141 = t198 * t307 - t199 * t310;
t81 = (-t140 * t290 + t141 * t291) * t282 + (t140 * t291 + t141 * t290) * t279;
t467 = t39 * t81;
t466 = qJ(2,1) * t63;
t75 = t78 ^ 2;
t465 = qJ(2,1) * t75;
t464 = qJ(2,2) * t62;
t74 = t77 ^ 2;
t463 = qJ(2,2) * t74;
t462 = qJ(2,3) * t61;
t73 = t76 ^ 2;
t461 = qJ(2,3) * t73;
t386 = qJ(2,3) * t414;
t182 = -t305 * t482 + t386;
t260 = qJ(2,3) * t415;
t185 = t308 * t482 + t260;
t124 = t182 * t280 - t185 * t277;
t460 = t124 * t37;
t387 = qJ(2,2) * t410;
t183 = -t306 * t481 + t387;
t261 = qJ(2,2) * t411;
t186 = t309 * t481 + t261;
t125 = t183 * t281 - t186 * t278;
t459 = t125 * t38;
t388 = qJ(2,1) * t406;
t184 = -t307 * t480 + t388;
t262 = qJ(2,1) * t407;
t187 = t310 * t480 + t262;
t126 = t184 * t282 - t187 * t279;
t458 = t126 * t39;
t127 = t182 * t277 + t185 * t280;
t457 = t127 * t37;
t128 = t183 * t278 + t186 * t281;
t456 = t128 * t38;
t129 = t184 * t279 + t187 * t282;
t455 = t129 * t39;
t154 = t305 * t499 + t308 * t500;
t157 = t305 * t500 - t308 * t499;
t82 = (t154 * t291 + t157 * t290) * t280 - (-t154 * t290 + t157 * t291) * t277;
t454 = t218 * t82;
t452 = t220 * t73;
t155 = t306 * t501 + t309 * t502;
t158 = t306 * t502 - t309 * t501;
t83 = (t155 * t291 + t158 * t290) * t281 - (-t155 * t290 + t158 * t291) * t278;
t450 = t221 * t83;
t448 = t223 * t74;
t156 = t307 * t503 + t310 * t504;
t159 = t307 * t504 - t310 * t503;
t84 = (t156 * t291 + t159 * t290) * t282 - (-t156 * t290 + t159 * t291) * t279;
t446 = t224 * t84;
t444 = t226 * t75;
t436 = t130 * t218;
t435 = t131 * t221;
t434 = t132 * t224;
t433 = t133 * t218;
t432 = t134 * t221;
t431 = t135 * t224;
t430 = t142 * t218;
t429 = t143 * t221;
t428 = t144 * t224;
t427 = t145 * t218;
t426 = t146 * t221;
t425 = t147 * t224;
t177 = t203 * t305;
t424 = (t200 * t308 + t177) * t218;
t178 = t204 * t306;
t423 = (t201 * t309 + t178) * t221;
t179 = t205 * t307;
t422 = (t202 * t310 + t179) * t224;
t421 = t496 * t218;
t420 = t497 * t221;
t419 = t498 * t224;
t397 = 0.2e1 * t453;
t396 = 0.2e1 * t449;
t395 = 0.2e1 * t445;
t391 = t220 * t257 * t70;
t390 = t223 * t258 * t71;
t389 = t226 * t259 * t72;
t58 = t70 * t397;
t59 = t71 * t396;
t60 = t72 * t395;
t314 = pkin(1) * g(1);
t267 = -g(2) * qJ(2,1) + t314;
t265 = -g(2) * qJ(2,2) + t314;
t263 = -g(2) * qJ(2,3) + t314;
t166 = t257 * t305 - t386;
t169 = t257 * t308 + t260;
t118 = t166 * t280 + t169 * t277;
t121 = -t166 * t277 + t169 * t280;
t380 = qJ(2,3) * t299 * t451;
t385 = t118 * t436 + t121 * t433 + t61 * t380 + t58;
t167 = t258 * t306 - t387;
t170 = t258 * t309 + t261;
t119 = t167 * t281 + t170 * t278;
t122 = -t167 * t278 + t170 * t281;
t381 = qJ(2,2) * t300 * t447;
t384 = t119 * t435 + t122 * t432 + t62 * t381 + t59;
t168 = t259 * t307 - t388;
t171 = t259 * t310 + t262;
t120 = t168 * t282 + t171 * t279;
t123 = -t168 * t279 + t171 * t282;
t382 = qJ(2,1) * t301 * t443;
t383 = t120 * t434 + t123 * t431 + t63 * t382 + t60;
t379 = -t451 * t505 + t124 * t433 + t127 * t436 - (t505 + (-t233 * t76 + t299 * t70) * qJ(2,3)) * t218 * t453 - t70 * t380;
t378 = -t447 * t506 + t125 * t432 + t128 * t435 - (t506 + (-t234 * t77 + t300 * t71) * qJ(2,2)) * t221 * t449 - t71 * t381;
t377 = -t443 * t507 + t126 * t431 + t129 * t434 - (t507 + (-t235 * t78 + t301 * t72) * qJ(2,1)) * t224 * t445 - t72 * t382;
t239 = -t305 * g(1) + t472;
t240 = g(2) * t305 + t475;
t358 = -t239 * t280 + t240 * t277 - t379;
t241 = -t306 * g(1) + t471;
t242 = g(2) * t306 + t474;
t357 = -t241 * t281 + t242 * t278 - t378;
t243 = g(1) * t307 - t470;
t244 = g(2) * t307 + t473;
t356 = -t243 * t282 - t244 * t279 + t377;
t355 = -t277 * t475 + t280 * t472 - t177 + t379;
t354 = -t278 * t474 + t281 * t471 - t178 + t378;
t353 = -t279 * t473 + t282 * t470 - t179 + t377;
t352 = -t81 * t444 - t80 * t448 - t79 * t452;
t351 = -t124 * t452 - t125 * t448 - t126 * t444;
t350 = -t127 * t452 - t128 * t448 - t129 * t444;
t329 = pkin(1) * t330;
t25 = (-pkin(1) * t462 + (-t329 + (-3 * t316 + t482) * pkin(1)) * t76 + t394 * t70 + (t70 * t328 - t462 + (-t316 - t317 + t479) * t76) * qJ(3,3)) * t218;
t346 = (-t219 * t25 - t391) * t76 + t385;
t26 = (-pkin(1) * t464 + (-t329 + (-3 * t318 + t481) * pkin(1)) * t77 + t393 * t71 + (t71 * t328 - t464 + (-t318 - t319 + t479) * t77) * qJ(3,2)) * t221;
t345 = (-t222 * t26 - t390) * t77 + t384;
t27 = (-pkin(1) * t466 + (-t329 + (-3 * t320 + t480) * pkin(1)) * t78 + t392 * t72 + (t72 * t328 - t466 + (-t320 - t321 + t479) * t78) * qJ(3,1)) * t224;
t344 = (-t225 * t27 - t389) * t78 + t383;
t284 = t304 - g(1);
t283 = t303 - g(2);
t268 = t478 + t486;
t266 = t477 + t486;
t264 = t476 + t486;
t250 = g(2) * t301 + t478;
t249 = g(1) * qJ(3,1) + t267;
t248 = g(2) * t300 + t477;
t247 = g(1) * qJ(3,2) + t265;
t246 = g(2) * t299 + t476;
t245 = g(1) * qJ(3,3) + t263;
t181 = -t290 * t302 - t291 * t295;
t180 = -t290 * t295 + t291 * t302;
t173 = t283 * t290 + t284 * t291;
t172 = t283 * t291 - t284 * t290;
t105 = t164 * t307 + t165 * t310;
t104 = -t164 * t310 + t165 * t307;
t103 = t162 * t306 + t163 * t309;
t102 = -t162 * t309 + t163 * t306;
t101 = t160 * t305 + t161 * t308;
t100 = -t160 * t308 + t161 * t305;
t69 = (t104 * t291 - t105 * t290) * t282 + (t104 * t290 + t105 * t291) * t279;
t68 = (t102 * t291 - t103 * t290) * t281 + (t102 * t290 + t103 * t291) * t278;
t67 = (t100 * t291 - t101 * t290) * t280 + (t100 * t290 + t101 * t291) * t277;
t54 = t63 * t395;
t53 = t62 * t396;
t52 = t61 * t397;
t30 = t60 + t493;
t29 = t59 + t494;
t28 = t58 + t495;
t24 = t353 - 0.2e1 * t483;
t23 = t354 - 0.2e1 * t484;
t22 = t355 - 0.2e1 * t485;
t21 = -t225 * t465 + t353 - t483;
t20 = -t222 * t463 + t354 - t484;
t19 = -t219 * t461 + t355 - t485;
t18 = (t328 + t489) * t39 + t54 - t356;
t17 = (t328 + t488) * t38 + t53 + t357;
t16 = (t328 + t487) * t37 + t52 + t358;
t15 = -t301 * t39 + (-0.2e1 * t63 * t78 - t465) * t225 + t356;
t14 = -t300 * t38 + (-0.2e1 * t62 * t77 - t463) * t222 - t357;
t13 = -t299 * t37 + (-0.2e1 * t61 * t76 - t461) * t219 - t358;
t12 = (t267 * t307 - t268 * t310) * t282 + (t267 * t310 + t268 * t307) * t279 + t39 * t321 + qJ(2,1) * t60 + (-t377 + t483) * pkin(1);
t11 = (t265 * t306 - t266 * t309) * t281 + (t265 * t309 + t266 * t306) * t278 + t38 * t319 + qJ(2,2) * t59 + (-t378 + t484) * pkin(1);
t10 = (t263 * t305 - t264 * t308) * t280 + (t263 * t308 + t264 * t305) * t277 + t37 * t317 + qJ(2,3) * t58 + (-t379 + t485) * pkin(1);
t9 = t344 + t493;
t8 = t345 + t494;
t7 = t346 + t495;
t6 = -t78 * t389 + t243 * t279 - t244 * t282 + t36 + (-t27 * t78 - t301 * t75) * t225 + t383;
t5 = -t77 * t390 - t241 * t278 - t242 * t281 + t35 + (-t26 * t77 - t300 * t74) * t222 + t384;
t4 = -t76 * t391 - t239 * t277 - t240 * t280 + t34 + (-t25 * t76 - t299 * t73) * t219 + t385;
t3 = (t249 * t307 - t250 * t310) * t282 + (t249 * t310 + t250 * t307) * t279 + qJ(2,1) * (t36 + t344) + t376 * t39 + t301 * (t54 - t377);
t2 = (t247 * t306 - t248 * t309) * t281 + (t247 * t309 + t248 * t306) * t278 + qJ(2,2) * (t35 + t345) + t375 * t38 + t300 * (t53 - t378);
t1 = (t245 * t305 - t246 * t308) * t280 + (t245 * t308 + t246 * t305) * t277 + qJ(2,3) * (t34 + t346) + t374 * t37 + t299 * (t52 - t379);
t31 = [t37 * t430 + t38 * t429 + t39 * t428, t142 * t424 + t143 * t423 + t144 * t422, t142 * t421 + t143 * t420 + t144 * t419, (t144 * t24 + t458) * t224 + (t143 * t23 + t459) * t221 + (t142 * t22 + t460) * t218, t28 * t430 + t29 * t429 + t30 * t428 + t351, (t12 * t144 + t126 * t21) * t224 + (t11 * t143 + t125 * t20) * t221 + (t10 * t142 + t124 * t19) * t218, (t123 * t39 + t144 * t9) * t224 + (t122 * t38 + t143 * t8) * t221 + (t121 * t37 + t142 * t7) * t218 + t351, -t121 * t452 - t122 * t448 - t123 * t444 + (t144 * t18 - t458) * t224 + (t143 * t17 - t459) * t221 + (t142 * t16 - t460) * t218, (t123 * t6 + t126 * t15 + t144 * t3) * t224 + (t122 * t5 + t125 * t14 + t143 * t2) * t221 + (t1 * t142 + t121 * t4 + t124 * t13) * t218, 0, t181, -t180, -t172 * t290 + t173 * t291; t37 * t427 + t38 * t426 + t39 * t425, t145 * t424 + t146 * t423 + t147 * t422, t145 * t421 + t146 * t420 + t147 * t419, (t147 * t24 + t455) * t224 + (t146 * t23 + t456) * t221 + (t145 * t22 + t457) * t218, t28 * t427 + t29 * t426 + t30 * t425 + t350, (t12 * t147 + t129 * t21) * t224 + (t11 * t146 + t128 * t20) * t221 + (t10 * t145 + t127 * t19) * t218, (t120 * t39 + t147 * t9) * t224 + (t119 * t38 + t146 * t8) * t221 + (t118 * t37 + t145 * t7) * t218 + t350, -t118 * t452 - t119 * t448 - t120 * t444 + (t147 * t18 - t455) * t224 + (t146 * t17 - t456) * t221 + (t145 * t16 - t457) * t218, (t120 * t6 + t129 * t15 + t147 * t3) * t224 + (t119 * t5 + t128 * t14 + t146 * t2) * t221 + (t1 * t145 + t118 * t4 + t127 * t13) * t218, 0, t180, t181, t172 * t291 + t173 * t290; t37 * t454 + t38 * t450 + t39 * t446, t422 * t84 + t423 * t83 + t424 * t82, t419 * t84 + t420 * t83 + t421 * t82, (t24 * t84 + t467) * t224 + (t23 * t83 + t468) * t221 + (t22 * t82 + t469) * t218, t28 * t454 + t29 * t450 + t30 * t446 + t352, (t12 * t84 + t21 * t81) * t224 + (t11 * t83 + t20 * t80) * t221 + (t10 * t82 + t19 * t79) * t218, (t39 * t69 + t84 * t9) * t224 + (t38 * t68 + t8 * t83) * t221 + (t37 * t67 + t7 * t82) * t218 + t352, -t67 * t452 - t68 * t448 - t69 * t444 + (t18 * t84 - t467) * t224 + (t17 * t83 - t468) * t221 + (t16 * t82 - t469) * t218, (t15 * t81 + t3 * t84 + t6 * t69) * t224 + (t14 * t80 + t2 * t83 + t5 * t68) * t221 + (t1 * t82 + t13 * t79 + t4 * t67) * t218, t302, t172, -t173, 0;];
tauX_reg  = t31;
