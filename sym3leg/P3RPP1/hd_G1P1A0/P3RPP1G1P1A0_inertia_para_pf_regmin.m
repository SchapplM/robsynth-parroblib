% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPP1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*(3+1)/2x13]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 14:53
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPP1G1P1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPP1G1P1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPP1G1P1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RPP1G1P1A0_inertia_para_pf_regmin: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPP1G1P1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPP1G1P1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 14:52:28
% EndTime: 2019-05-03 14:52:31
% DurationCPUTime: 3.31s
% Computational Cost: add. (10463->427), mult. (14695->691), div. (642->6), fcn. (5450->14), ass. (0->337)
t735 = koppelP(3,2);
t741 = pkin(1) ^ 2;
t789 = (qJ(3,3) ^ 2 + t741);
t786 = 1 + t789;
t738 = koppelP(3,1);
t865 = (qJ(2,3) * t738);
t877 = 2 * pkin(1);
t880 = t735 * t786 + pkin(1) * t865 + (t735 * t877 + t865) * qJ(3,3);
t736 = koppelP(2,2);
t788 = (qJ(3,2) ^ 2 + t741);
t785 = 1 + t788;
t739 = koppelP(2,1);
t868 = (qJ(2,2) * t739);
t879 = t736 * t785 + pkin(1) * t868 + (t736 * t877 + t868) * qJ(3,2);
t737 = koppelP(1,2);
t787 = (qJ(3,1) ^ 2 + t741);
t784 = 1 + t787;
t740 = koppelP(1,1);
t871 = (qJ(2,1) * t740);
t878 = t737 * t784 + pkin(1) * t871 + (t737 * t877 + t871) * qJ(3,1);
t725 = cos(qJ(1,3));
t795 = t725 * qJ(2,3);
t719 = pkin(1) + qJ(3,3);
t722 = sin(qJ(1,3));
t798 = t722 * t719;
t665 = t795 - t798;
t668 = t722 * qJ(2,3) + t719 * t725;
t716 = legFrame(3,3);
t699 = sin(t716);
t702 = cos(t716);
t626 = t665 * t702 - t699 * t668;
t629 = t699 * t665 + t668 * t702;
t728 = xP(3);
t708 = sin(t728);
t709 = cos(t728);
t653 = -t708 * t738 - t709 * t735;
t656 = -t708 * t735 + t709 * t738;
t730 = qJ(2,3) ^ 2;
t710 = qJ(3,3) * t877;
t750 = t710 + t789;
t687 = t730 + t750;
t684 = 0.1e1 + t687;
t671 = 0.1e1 / t684;
t527 = (t626 * t653 + t629 * t656) * t671;
t876 = t527 * pkin(1);
t726 = cos(qJ(1,2));
t794 = t726 * qJ(2,2);
t720 = pkin(1) + qJ(3,2);
t723 = sin(qJ(1,2));
t797 = t723 * t720;
t666 = t794 - t797;
t669 = t723 * qJ(2,2) + t720 * t726;
t717 = legFrame(2,3);
t700 = sin(t717);
t703 = cos(t717);
t627 = t666 * t703 - t700 * t669;
t630 = t700 * t666 + t669 * t703;
t654 = -t708 * t739 - t709 * t736;
t657 = -t708 * t736 + t709 * t739;
t732 = qJ(2,2) ^ 2;
t711 = qJ(3,2) * t877;
t749 = t711 + t788;
t688 = t732 + t749;
t685 = 0.1e1 + t688;
t673 = 0.1e1 / t685;
t528 = (t627 * t654 + t630 * t657) * t673;
t875 = t528 * pkin(1);
t727 = cos(qJ(1,1));
t793 = t727 * qJ(2,1);
t721 = pkin(1) + qJ(3,1);
t724 = sin(qJ(1,1));
t796 = t724 * t721;
t667 = t793 - t796;
t670 = t724 * qJ(2,1) + t721 * t727;
t718 = legFrame(1,3);
t701 = sin(t718);
t704 = cos(t718);
t628 = t667 * t704 - t701 * t670;
t631 = t701 * t667 + t670 * t704;
t655 = -t708 * t740 - t709 * t737;
t658 = -t708 * t737 + t709 * t740;
t734 = qJ(2,1) ^ 2;
t712 = qJ(3,1) * t877;
t748 = t712 + t787;
t689 = t734 + t748;
t686 = 0.1e1 + t689;
t675 = 0.1e1 / t686;
t529 = (t628 * t655 + t631 * t658) * t675;
t874 = t529 * pkin(1);
t873 = qJ(2,1) * t529;
t872 = qJ(2,1) * t737;
t870 = qJ(2,2) * t528;
t869 = qJ(2,2) * t736;
t867 = qJ(2,3) * t527;
t866 = qJ(2,3) * t735;
t805 = t719 * t738;
t659 = qJ(2,3) * t805 - t730 * t735 - t735;
t806 = t719 * t735;
t660 = qJ(2,3) * t806 + t730 * t738 + t738;
t620 = t659 * t725 + t660 * t722;
t621 = t659 * t722 - t660 * t725;
t518 = (-t620 * t708 + t621 * t709) * t702 + (t620 * t709 + t708 * t621) * t699;
t864 = t518 * t527;
t802 = t720 * t739;
t661 = qJ(2,2) * t802 - t732 * t736 - t736;
t803 = t720 * t736;
t662 = qJ(2,2) * t803 + t732 * t739 + t739;
t622 = t661 * t726 + t662 * t723;
t623 = t661 * t723 - t662 * t726;
t519 = (-t622 * t708 + t623 * t709) * t703 + (t622 * t709 + t708 * t623) * t700;
t863 = t519 * t528;
t799 = t721 * t740;
t663 = qJ(2,1) * t799 - t734 * t737 - t737;
t800 = t721 * t737;
t664 = qJ(2,1) * t800 + t734 * t740 + t740;
t624 = t663 * t727 + t664 * t724;
t625 = t663 * t724 - t664 * t727;
t520 = (-t624 * t708 + t625 * t709) * t704 + (t624 * t709 + t708 * t625) * t701;
t862 = t520 * t529;
t677 = t805 - t866;
t680 = t806 + t865;
t632 = t677 * t725 + t722 * t680;
t635 = t722 * t677 - t680 * t725;
t521 = (t632 * t709 + t708 * t635) * t702 - (-t708 * t632 + t635 * t709) * t699;
t861 = t521 * t671;
t678 = t802 - t869;
t681 = t803 + t868;
t633 = t678 * t726 + t723 * t681;
t636 = t723 * t678 - t681 * t726;
t522 = (t633 * t709 + t708 * t636) * t703 - (-t708 * t633 + t636 * t709) * t700;
t860 = t522 * t673;
t679 = t799 - t872;
t682 = t800 + t871;
t634 = t679 * t727 + t724 * t682;
t637 = t724 * t679 - t682 * t727;
t523 = (t634 * t709 + t708 * t637) * t704 - (-t708 * t634 + t637 * t709) * t701;
t859 = t523 * t675;
t693 = 1 + t750;
t769 = t719 * t795;
t641 = t722 * t693 - t769;
t696 = qJ(2,3) * t798;
t644 = t693 * t725 + t696;
t605 = -t699 * t641 + t644 * t702;
t587 = t605 * t671;
t828 = t626 * t671;
t771 = qJ(2,3) * t828;
t530 = t587 + 0.2e1 * t771;
t858 = t530 * t671;
t602 = t641 * t702 + t699 * t644;
t584 = t602 * t671;
t822 = t629 * t671;
t770 = qJ(2,3) * t822;
t857 = (t584 + 0.2e1 * t770) * t671;
t694 = 1 + t749;
t772 = t720 * t794;
t642 = t723 * t694 - t772;
t697 = qJ(2,2) * t797;
t645 = t694 * t726 + t697;
t606 = -t700 * t642 + t645 * t703;
t588 = t606 * t673;
t826 = t627 * t673;
t774 = qJ(2,2) * t826;
t534 = t588 + 0.2e1 * t774;
t856 = t534 * t673;
t603 = t642 * t703 + t700 * t645;
t585 = t603 * t673;
t820 = t630 * t673;
t773 = qJ(2,2) * t820;
t855 = (t585 + 0.2e1 * t773) * t673;
t695 = 1 + t748;
t775 = t721 * t793;
t643 = t724 * t695 - t775;
t698 = qJ(2,1) * t796;
t646 = t695 * t727 + t698;
t607 = -t701 * t643 + t646 * t704;
t589 = t607 * t675;
t824 = t628 * t675;
t777 = qJ(2,1) * t824;
t538 = t589 + 0.2e1 * t777;
t854 = t538 * t675;
t604 = t643 * t704 + t701 * t646;
t586 = t604 * t675;
t818 = t631 * t675;
t776 = qJ(2,1) * t818;
t853 = (t586 + 0.2e1 * t776) * t675;
t713 = 0.1e1 + t730;
t647 = t722 * t713 + t769;
t650 = -t713 * t725 + t696;
t608 = t647 * t702 - t699 * t650;
t596 = t608 * t671;
t810 = t671 * t719;
t756 = t626 * t810;
t548 = -t596 + 0.2e1 * t756;
t852 = t548 * t671;
t611 = t699 * t647 + t650 * t702;
t599 = t611 * t671;
t755 = t629 * t810;
t851 = (-t599 + 0.2e1 * t755) * t671;
t714 = 0.1e1 + t732;
t648 = t723 * t714 + t772;
t651 = -t714 * t726 + t697;
t609 = t648 * t703 - t700 * t651;
t597 = t609 * t673;
t809 = t673 * t720;
t754 = t627 * t809;
t550 = -t597 + 0.2e1 * t754;
t850 = t550 * t673;
t612 = t700 * t648 + t651 * t703;
t600 = t612 * t673;
t753 = t630 * t809;
t849 = (-t600 + 0.2e1 * t753) * t673;
t715 = 0.1e1 + t734;
t649 = t724 * t715 + t775;
t652 = -t715 * t727 + t698;
t610 = t649 * t704 - t701 * t652;
t598 = t610 * t675;
t808 = t675 * t721;
t752 = t628 * t808;
t552 = -t598 + 0.2e1 * t752;
t848 = t552 * t675;
t613 = t701 * t649 + t652 * t704;
t601 = t613 * t675;
t751 = t631 * t808;
t847 = (-t601 + 0.2e1 * t751) * t675;
t783 = pkin(1) * t828;
t561 = t596 - 0.2e1 * t783;
t846 = t561 * t671;
t782 = pkin(1) * t826;
t563 = t597 - 0.2e1 * t782;
t845 = t563 * t673;
t781 = pkin(1) * t824;
t565 = t598 - 0.2e1 * t781;
t844 = t565 * t675;
t780 = pkin(1) * t822;
t843 = (t599 - 0.2e1 * t780) * t671;
t779 = pkin(1) * t820;
t842 = (t600 - 0.2e1 * t779) * t673;
t778 = pkin(1) * t818;
t841 = (t601 - 0.2e1 * t778) * t675;
t672 = 0.1e1 / t684 ^ 2;
t840 = t608 * t672;
t674 = 0.1e1 / t685 ^ 2;
t839 = t609 * t674;
t676 = 0.1e1 / t686 ^ 2;
t838 = t610 * t676;
t837 = t611 * t672;
t836 = t612 * t674;
t835 = t613 * t676;
t834 = t626 ^ 2 * t672;
t833 = t627 ^ 2 * t674;
t832 = t628 ^ 2 * t676;
t831 = t629 ^ 2 * t672;
t830 = t630 ^ 2 * t674;
t829 = t631 ^ 2 * t676;
t827 = t626 * t672;
t825 = t627 * t674;
t823 = t628 * t676;
t821 = t629 * t672;
t819 = t630 * t674;
t817 = t631 * t676;
t816 = t653 * t671;
t815 = t654 * t673;
t814 = t655 * t675;
t813 = t656 * t671;
t812 = t657 * t673;
t811 = t658 * t675;
t807 = t719 * t527;
t804 = t720 * t528;
t801 = t721 * t529;
t792 = t602 * t813 + t605 * t816;
t791 = t603 * t812 + t606 * t815;
t790 = t604 * t811 + t607 * t814;
t524 = t608 * t816 + t611 * t813;
t525 = t609 * t815 + t612 * t812;
t526 = t610 * t814 + t613 * t811;
t768 = t527 * t861;
t767 = t521 * t827;
t766 = t521 * t821;
t765 = t528 * t860;
t764 = t522 * t825;
t763 = t522 * t819;
t762 = t529 * t859;
t761 = t523 * t823;
t760 = t523 * t817;
t759 = t626 * t821;
t758 = t627 * t819;
t757 = t628 * t817;
t744 = -t518 * t827 - t519 * t825 - t520 * t823;
t743 = -t518 * t821 - t519 * t819 - t520 * t817;
t742 = -t611 * t827 - t612 * t825 - t613 * t823;
t707 = t734 + t741;
t706 = t732 + t741;
t705 = t730 + t741;
t683 = t708 ^ 2 + t709 ^ 2;
t640 = -t721 * t872 + (t784 + t712) * t740;
t639 = -t720 * t869 + (t785 + t711) * t739;
t638 = -t719 * t866 + (t786 + t710) * t738;
t595 = t640 * t727 + t724 * t878;
t594 = t640 * t724 - t727 * t878;
t593 = t639 * t726 + t723 * t879;
t592 = t639 * t723 - t726 * t879;
t591 = t638 * t725 + t722 * t880;
t590 = t638 * t722 - t725 * t880;
t570 = t601 - t778;
t568 = t600 - t779;
t566 = t599 - t780;
t564 = t598 - t781;
t562 = t597 - t782;
t560 = t596 - t783;
t559 = t601 - t751;
t558 = t598 - t752;
t557 = t600 - t753;
t556 = t597 - t754;
t555 = t599 - t755;
t554 = t596 - t756;
t547 = (-pkin(1) * t613 + t631 * t707) * t675;
t546 = (-pkin(1) * t610 + t628 * t707) * t675;
t545 = (-pkin(1) * t612 + t630 * t706) * t673;
t544 = (-pkin(1) * t609 + t627 * t706) * t673;
t543 = (-pkin(1) * t611 + t629 * t705) * t671;
t542 = (-pkin(1) * t608 + t626 * t705) * t671;
t541 = t586 + t776;
t539 = t589 + t777;
t537 = t585 + t773;
t535 = t588 + t774;
t533 = t584 + t770;
t531 = t587 + t771;
t517 = (qJ(2,1) * t604 - t613 * t721 + t631 * t689) * t675;
t516 = (qJ(2,1) * t607 - t610 * t721 + t628 * t689) * t675;
t515 = (qJ(2,2) * t603 - t612 * t720 + t630 * t688) * t673;
t514 = (qJ(2,2) * t606 - t609 * t720 + t627 * t688) * t673;
t513 = (qJ(2,3) * t602 - t611 * t719 + t629 * t687) * t671;
t512 = (qJ(2,3) * t605 - t608 * t719 + t626 * t687) * t671;
t511 = (t594 * t709 - t708 * t595) * t704 + (t708 * t594 + t595 * t709) * t701;
t510 = (t592 * t709 - t708 * t593) * t703 + (t708 * t592 + t593 * t709) * t700;
t509 = (t590 * t709 - t708 * t591) * t702 + (t708 * t590 + t591 * t709) * t699;
t1 = [t832 + t833 + t834, 0, 0, (t838 + t844) * t628 + (t839 + t845) * t627 + (t840 + t846) * t626, 0.2e1 * qJ(2,1) * t832 + 0.2e1 * qJ(2,2) * t833 + 0.2e1 * qJ(2,3) * t834, (t546 * t628 + t564 * t610) * t675 + (t544 * t627 + t562 * t609) * t673 + (t542 * t626 + t560 * t608) * t671, (t607 * t676 + t854) * t628 + (t606 * t674 + t856) * t627 + (t605 * t672 + t858) * t626, (-t838 + t848) * t628 + (-t839 + t850) * t627 + (-t840 + t852) * t626, (t516 * t628 + t539 * t607 + t558 * t610) * t675 + (t514 * t627 + t535 * t606 + t556 * t609) * t673 + (t512 * t626 + t531 * t605 + t554 * t608) * t671, 0, 0, 0, t683; t757 + t758 + t759, 0, 0, t561 * t822 + t563 * t820 + t565 * t818 - t742, 0.2e1 * qJ(2,1) * t757 + 0.2e1 * qJ(2,2) * t758 + 0.2e1 * qJ(2,3) * t759, (t546 * t631 + t564 * t613) * t675 + (t544 * t630 + t562 * t612) * t673 + (t542 * t629 + t560 * t611) * t671, t530 * t822 + t534 * t820 + t538 * t818 + t602 * t827 + t603 * t825 + t604 * t823, t548 * t822 + t550 * t820 + t552 * t818 + t742, (t516 * t631 + t539 * t604 + t558 * t613) * t675 + (t514 * t630 + t535 * t603 + t556 * t612) * t673 + (t512 * t629 + t531 * t602 + t554 * t611) * t671, 0, 0, 0, 0; t829 + t830 + t831, 0, 0, (t835 + t841) * t631 + (t836 + t842) * t630 + (t837 + t843) * t629, 0.2e1 * qJ(2,1) * t829 + 0.2e1 * qJ(2,2) * t830 + 0.2e1 * qJ(2,3) * t831, (t547 * t631 + t570 * t613) * t675 + (t545 * t630 + t568 * t612) * t673 + (t543 * t629 + t566 * t611) * t671, (t604 * t676 + t853) * t631 + (t603 * t674 + t855) * t630 + (t602 * t672 + t857) * t629, (-t835 + t847) * t631 + (-t836 + t849) * t630 + (-t837 + t851) * t629, (t517 * t631 + t541 * t604 + t559 * t613) * t675 + (t515 * t630 + t537 * t603 + t557 * t612) * t673 + (t513 * t629 + t533 * t602 + t555 * t611) * t671, 0, 0, 0, t683; t761 + t764 + t767, 0, 0, t521 * t846 + t522 * t845 + t523 * t844 - t744, 0.2e1 * qJ(2,1) * t761 + 0.2e1 * qJ(2,2) * t764 + 0.2e1 * qJ(2,3) * t767, (t520 * t564 + t523 * t546) * t675 + (t519 * t562 + t522 * t544) * t673 + (t518 * t560 + t521 * t542) * t671, t509 * t827 + t510 * t825 + t511 * t823 + t521 * t858 + t522 * t856 + t523 * t854, t521 * t852 + t522 * t850 + t523 * t848 + t744, (t511 * t539 + t516 * t523 + t520 * t558) * t675 + (t510 * t535 + t514 * t522 + t519 * t556) * t673 + (t509 * t531 + t512 * t521 + t518 * t554) * t671, 0, -t708, -t709, 0; t760 + t763 + t766, 0, 0, t521 * t843 + t522 * t842 + t523 * t841 - t743, 0.2e1 * qJ(2,1) * t760 + 0.2e1 * qJ(2,2) * t763 + 0.2e1 * qJ(2,3) * t766, (t520 * t570 + t523 * t547) * t675 + (t519 * t568 + t522 * t545) * t673 + (t518 * t566 + t521 * t543) * t671, t509 * t821 + t510 * t819 + t511 * t817 + t521 * t857 + t522 * t855 + t523 * t853, t521 * t851 + t522 * t849 + t523 * t847 + t743, (t511 * t541 + t517 * t523 + t520 * t559) * t675 + (t510 * t537 + t515 * t522 + t519 * t557) * t673 + (t509 * t533 + t513 * t521 + t518 * t555) * t671, 0, t709, -t708, 0; t762 + t765 + t768, 0, 0, (t523 * (t526 - 0.2e1 * t874) + t862) * t675 + (t522 * (t525 - 0.2e1 * t875) + t863) * t673 + (t521 * (t524 - 0.2e1 * t876) + t864) * t671, 0.2e1 * qJ(2,1) * t762 + 0.2e1 * qJ(2,2) * t765 + 0.2e1 * qJ(2,3) * t768, (t523 * (-pkin(1) * t526 + t707 * t529) + t520 * (t526 - t874)) * t675 + (t522 * (-pkin(1) * t525 + t706 * t528) + t519 * (t525 - t875)) * t673 + (t521 * (-pkin(1) * t524 + t705 * t527) + t518 * (t524 - t876)) * t671, (t523 * (t790 + 0.2e1 * t873) + t511 * t529) * t675 + (t522 * (t791 + 0.2e1 * t870) + t510 * t528) * t673 + (t521 * (t792 + 0.2e1 * t867) + t509 * t527) * t671, (t523 * (-t526 + 0.2e1 * t801) - t862) * t675 + (t522 * (-t525 + 0.2e1 * t804) - t863) * t673 + (t521 * (-t524 + 0.2e1 * t807) - t864) * t671, (qJ(2,1) * t790 - t526 * t721 + t689 * t529) * t859 + (qJ(2,2) * t791 - t525 * t720 + t688 * t528) * t860 + (qJ(2,3) * t792 - t524 * t719 + t687 * t527) * t861 + (t520 * (t526 - t801) + t511 * (t790 + t873)) * t675 + (t519 * (t525 - t804) + t510 * (t791 + t870)) * t673 + (t518 * (t524 - t807) + t509 * (t792 + t867)) * t671, 1, 0, 0, 0;];
tau_reg  = t1;
