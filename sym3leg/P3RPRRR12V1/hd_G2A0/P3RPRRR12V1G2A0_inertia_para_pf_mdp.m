% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR12V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR12V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RPRRR12V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:24:59
% EndTime: 2020-08-06 18:25:04
% DurationCPUTime: 4.55s
% Computational Cost: add. (2607->429), mult. (4286->784), div. (1038->14), fcn. (3909->18), ass. (0->327)
t1720 = 0.1e1 / pkin(3);
t1916 = MDP(9) * t1720;
t1915 = MDP(10) * t1720;
t1707 = sin(qJ(3,3));
t1713 = cos(qJ(3,3));
t1921 = t1707 * t1713;
t1709 = sin(qJ(3,2));
t1715 = cos(qJ(3,2));
t1920 = t1709 * t1715;
t1711 = sin(qJ(3,1));
t1717 = cos(qJ(3,1));
t1919 = t1711 * t1717;
t1918 = 2 * MDP(5);
t1917 = 2 * MDP(8);
t1719 = pkin(1) + pkin(5);
t1914 = MDP(11) / pkin(3) ^ 2;
t1688 = pkin(6) + t1719;
t1708 = sin(qJ(1,3));
t1714 = cos(qJ(1,3));
t1662 = qJ(2,3) * t1714 - t1688 * t1708;
t1704 = legFrame(3,2);
t1682 = cos(t1704);
t1851 = t1682 * t1714;
t1679 = sin(t1704);
t1863 = t1679 * t1713;
t1621 = (pkin(3) * t1863 - t1662 * t1682) * t1707 + pkin(3) * (t1713 - 0.1e1) * (t1713 + 0.1e1) * t1851 + qJ(2,3) * t1863;
t1670 = pkin(3) * t1707 + qJ(2,3);
t1664 = 0.1e1 / t1670;
t1689 = 0.1e1 / t1707;
t1893 = t1664 * t1689;
t1605 = t1621 * t1893;
t1890 = t1664 * t1719;
t1807 = t1708 * t1890;
t1579 = t1682 * t1807 - t1605;
t1913 = t1579 * t1689;
t1710 = sin(qJ(1,2));
t1716 = cos(qJ(1,2));
t1663 = qJ(2,2) * t1716 - t1688 * t1710;
t1705 = legFrame(2,2);
t1683 = cos(t1705);
t1848 = t1683 * t1716;
t1680 = sin(t1705);
t1859 = t1680 * t1715;
t1622 = (pkin(3) * t1859 - t1663 * t1683) * t1709 + pkin(3) * (t1715 - 0.1e1) * (t1715 + 0.1e1) * t1848 + qJ(2,2) * t1859;
t1671 = pkin(3) * t1709 + qJ(2,2);
t1666 = 0.1e1 / t1671;
t1692 = 0.1e1 / t1709;
t1883 = t1666 * t1692;
t1606 = t1622 * t1883;
t1880 = t1666 * t1719;
t1797 = t1710 * t1880;
t1580 = t1683 * t1797 - t1606;
t1912 = t1580 * t1692;
t1712 = sin(qJ(1,1));
t1718 = cos(qJ(1,1));
t1661 = qJ(2,1) * t1718 - t1688 * t1712;
t1706 = legFrame(1,2);
t1684 = cos(t1706);
t1845 = t1684 * t1718;
t1681 = sin(t1706);
t1855 = t1681 * t1717;
t1620 = (pkin(3) * t1855 - t1661 * t1684) * t1711 + pkin(3) * (t1717 - 0.1e1) * (t1717 + 0.1e1) * t1845 + qJ(2,1) * t1855;
t1672 = pkin(3) * t1711 + qJ(2,1);
t1668 = 0.1e1 / t1672;
t1695 = 0.1e1 / t1711;
t1873 = t1668 * t1695;
t1604 = t1620 * t1873;
t1870 = t1668 * t1719;
t1787 = t1712 * t1870;
t1581 = t1684 * t1787 - t1604;
t1911 = t1581 * t1695;
t1698 = t1713 ^ 2;
t1852 = t1682 * t1713;
t1862 = t1679 * t1714;
t1624 = (pkin(3) * t1852 + t1662 * t1679) * t1707 + (-t1698 + 0.1e1) * pkin(3) * t1862 + qJ(2,3) * t1852;
t1612 = t1624 * t1893;
t1591 = -t1679 * t1807 - t1612;
t1910 = t1591 * t1689;
t1700 = t1715 ^ 2;
t1849 = t1683 * t1715;
t1858 = t1680 * t1716;
t1625 = (pkin(3) * t1849 + t1663 * t1680) * t1709 + (-t1700 + 0.1e1) * pkin(3) * t1858 + qJ(2,2) * t1849;
t1613 = t1625 * t1883;
t1592 = -t1680 * t1797 - t1613;
t1909 = t1592 * t1692;
t1702 = t1717 ^ 2;
t1846 = t1684 * t1717;
t1854 = t1681 * t1718;
t1623 = (pkin(3) * t1846 + t1661 * t1681) * t1711 + (-t1702 + 0.1e1) * pkin(3) * t1854 + qJ(2,1) * t1846;
t1611 = t1623 * t1873;
t1593 = -t1681 * t1787 - t1611;
t1908 = t1593 * t1695;
t1907 = t1620 * t1695;
t1906 = t1621 * t1689;
t1905 = t1622 * t1692;
t1904 = t1623 * t1695;
t1903 = t1624 * t1689;
t1902 = t1625 * t1692;
t1658 = t1670 * t1708 + t1688 * t1714;
t1655 = t1658 * t1664;
t1891 = t1664 * t1714;
t1834 = pkin(1) * t1891;
t1637 = t1655 - t1834;
t1901 = t1637 * t1689;
t1659 = t1671 * t1710 + t1688 * t1716;
t1656 = t1659 * t1666;
t1881 = t1666 * t1716;
t1833 = pkin(1) * t1881;
t1639 = t1656 - t1833;
t1900 = t1639 * t1692;
t1660 = t1672 * t1712 + t1688 * t1718;
t1657 = t1660 * t1668;
t1871 = t1668 * t1718;
t1832 = pkin(1) * t1871;
t1641 = t1657 - t1832;
t1899 = t1641 * t1695;
t1665 = 0.1e1 / t1670 ^ 2;
t1898 = t1658 * t1665;
t1667 = 0.1e1 / t1671 ^ 2;
t1897 = t1659 * t1667;
t1669 = 0.1e1 / t1672 ^ 2;
t1896 = t1660 * t1669;
t1895 = t1664 * t1679;
t1894 = t1664 * t1682;
t1690 = 0.1e1 / t1707 ^ 2;
t1892 = t1664 * t1690;
t1889 = t1665 * t1689;
t1691 = t1708 ^ 2;
t1888 = t1665 * t1691;
t1699 = t1714 ^ 2;
t1887 = t1665 * t1699;
t1886 = t1665 * t1714;
t1885 = t1666 * t1680;
t1884 = t1666 * t1683;
t1693 = 0.1e1 / t1709 ^ 2;
t1882 = t1666 * t1693;
t1879 = t1667 * t1692;
t1694 = t1710 ^ 2;
t1878 = t1667 * t1694;
t1701 = t1716 ^ 2;
t1877 = t1667 * t1701;
t1876 = t1667 * t1716;
t1875 = t1668 * t1681;
t1874 = t1668 * t1684;
t1696 = 0.1e1 / t1711 ^ 2;
t1872 = t1668 * t1696;
t1869 = t1669 * t1695;
t1697 = t1712 ^ 2;
t1868 = t1669 * t1697;
t1703 = t1718 ^ 2;
t1867 = t1669 * t1703;
t1866 = t1669 * t1718;
t1865 = t1679 * t1682;
t1864 = t1679 * t1708;
t1861 = t1680 * t1683;
t1860 = t1680 * t1710;
t1857 = t1681 * t1684;
t1856 = t1681 * t1712;
t1853 = t1682 * t1708;
t1850 = t1683 * t1710;
t1847 = t1684 * t1712;
t1722 = pkin(1) ^ 2;
t1685 = qJ(2,3) ^ 2 + t1722;
t1844 = t1685 * t1708;
t1686 = qJ(2,2) ^ 2 + t1722;
t1843 = t1686 * t1710;
t1687 = qJ(2,1) ^ 2 + t1722;
t1842 = t1687 * t1712;
t1841 = t1689 * t1713;
t1840 = t1692 * t1715;
t1839 = t1695 * t1717;
t1838 = t1719 * t1720;
t1673 = t1679 ^ 2;
t1676 = t1682 ^ 2;
t1837 = t1673 - t1676;
t1674 = t1680 ^ 2;
t1677 = t1683 ^ 2;
t1836 = t1674 - t1677;
t1675 = t1681 ^ 2;
t1678 = t1684 ^ 2;
t1835 = t1675 - t1678;
t1831 = qJ(2,1) * t1867;
t1830 = qJ(2,2) * t1877;
t1829 = qJ(2,3) * t1887;
t1828 = t1620 * t1872;
t1827 = t1620 * t1869;
t1826 = t1621 * t1892;
t1825 = t1621 * t1889;
t1824 = t1622 * t1882;
t1823 = t1622 * t1879;
t1822 = t1623 * t1872;
t1821 = t1623 * t1869;
t1820 = t1624 * t1892;
t1819 = t1624 * t1889;
t1818 = t1625 * t1882;
t1817 = t1625 * t1879;
t1634 = t1714 * t1890 - t1655;
t1816 = t1634 * t1841;
t1635 = t1716 * t1880 - t1656;
t1815 = t1635 * t1840;
t1636 = t1718 * t1870 - t1657;
t1814 = t1636 * t1839;
t1813 = t1708 * t1898;
t1812 = t1710 * t1897;
t1811 = t1712 * t1896;
t1810 = t1664 * t1864;
t1809 = t1664 * t1853;
t1808 = t1664 * t1841;
t1806 = t1673 * t1888;
t1805 = t1676 * t1888;
t1804 = t1689 * t1886;
t1803 = t1698 * t1888;
t1802 = t1665 * t1921;
t1801 = t1708 * t1886;
t1800 = t1666 * t1860;
t1799 = t1666 * t1850;
t1798 = t1666 * t1840;
t1796 = t1674 * t1878;
t1795 = t1677 * t1878;
t1794 = t1692 * t1876;
t1793 = t1700 * t1878;
t1792 = t1667 * t1920;
t1791 = t1710 * t1876;
t1790 = t1668 * t1856;
t1789 = t1668 * t1847;
t1788 = t1668 * t1839;
t1786 = t1675 * t1868;
t1785 = t1678 * t1868;
t1784 = t1695 * t1866;
t1783 = t1702 * t1868;
t1782 = t1669 * t1919;
t1781 = t1712 * t1866;
t1780 = pkin(1) * t1810;
t1779 = pkin(1) * t1809;
t1778 = pkin(1) * t1800;
t1777 = pkin(1) * t1799;
t1776 = pkin(1) * t1790;
t1775 = pkin(1) * t1789;
t1774 = t1658 * t1808;
t1773 = t1659 * t1798;
t1772 = t1660 * t1788;
t1771 = t1708 * t1808;
t1770 = t1714 * t1808;
t1769 = t1865 * t1888;
t1768 = t1679 * t1801;
t1767 = t1682 * t1801;
t1766 = t1691 * t1802;
t1765 = t1698 * t1801;
t1764 = t1710 * t1798;
t1763 = t1716 * t1798;
t1762 = t1861 * t1878;
t1761 = t1680 * t1791;
t1760 = t1683 * t1791;
t1759 = t1694 * t1792;
t1758 = t1700 * t1791;
t1757 = t1712 * t1788;
t1756 = t1718 * t1788;
t1755 = t1857 * t1868;
t1754 = t1681 * t1781;
t1753 = t1684 * t1781;
t1752 = t1697 * t1782;
t1751 = t1702 * t1781;
t1750 = t1838 * t1841;
t1749 = t1838 * t1840;
t1748 = t1838 * t1839;
t1747 = -0.2e1 * qJ(2,1) * t1790;
t1746 = 0.2e1 * qJ(2,1) * t1789;
t1745 = -0.2e1 * qJ(2,2) * t1800;
t1744 = 0.2e1 * qJ(2,2) * t1799;
t1743 = -0.2e1 * qJ(2,3) * t1810;
t1742 = 0.2e1 * qJ(2,3) * t1809;
t1741 = qJ(2,1) * t1754;
t1740 = qJ(2,1) * t1753;
t1739 = qJ(2,2) * t1761;
t1738 = qJ(2,2) * t1760;
t1737 = qJ(2,3) * t1768;
t1736 = qJ(2,3) * t1767;
t1735 = -0.2e1 * (t1679 * t1809 + t1680 * t1799 + t1681 * t1789) * t1915 + 0.2e1 * (t1757 * t1857 + t1764 * t1861 + t1771 * t1865) * t1916;
t1734 = t1801 * t1921;
t1733 = t1791 * t1920;
t1732 = t1781 * t1919;
t1731 = -0.2e1 * t1741;
t1730 = 0.2e1 * t1740;
t1729 = -0.2e1 * t1739;
t1728 = 0.2e1 * t1738;
t1727 = -0.2e1 * t1737;
t1726 = 0.2e1 * t1736;
t1725 = (t1679 * t1734 + t1680 * t1733 + t1681 * t1732) * t1917 + (-t1682 * t1770 - t1683 * t1763 - t1684 * t1756) * t1916 + (-t1679 * t1765 - t1680 * t1758 - t1681 * t1751) * MDP(7) + (-t1737 - t1739 - t1741) * t1918 + (-t1754 - t1761 - t1768) * MDP(1) + (t1664 * t1851 + t1666 * t1848 + t1668 * t1845) * t1915;
t1724 = (-t1682 * t1734 - t1683 * t1733 - t1684 * t1732) * t1917 + (-t1679 * t1770 - t1680 * t1763 - t1681 * t1756) * t1916 + (t1682 * t1765 + t1683 * t1758 + t1684 * t1751) * MDP(7) + (t1736 + t1738 + t1740) * t1918 + (t1753 + t1760 + t1767) * MDP(1) + (t1664 * t1862 + t1666 * t1858 + t1668 * t1854) * t1915;
t1723 = (t1835 * t1757 + t1836 * t1764 + t1837 * t1771) * t1916 + (-t1837 * t1708 * t1664 - t1836 * t1710 * t1666 - t1835 * t1712 * t1668) * t1915 + (t1752 * t1857 + t1759 * t1861 + t1766 * t1865) * t1917 + (-t1698 * t1769 - t1700 * t1762 - t1702 * t1755) * MDP(7) + (-qJ(2,1) * t1755 - qJ(2,2) * t1762 - qJ(2,3) * t1769) * t1918 + (-t1755 - t1762 - t1769) * MDP(1) + (t1690 * t1865 + t1693 * t1861 + t1696 * t1857) * t1914;
t1654 = -t1684 * t1838 + t1717 * t1747;
t1653 = -t1683 * t1838 + t1715 * t1745;
t1652 = -t1682 * t1838 + t1713 * t1743;
t1651 = -t1681 * t1838 + t1717 * t1746;
t1650 = -t1680 * t1838 + t1715 * t1744;
t1649 = -t1679 * t1838 + t1713 * t1742;
t1648 = t1684 * t1748 + t1711 * t1747;
t1647 = t1683 * t1749 + t1709 * t1745;
t1646 = t1682 * t1750 + t1707 * t1743;
t1645 = t1681 * t1748 + t1711 * t1746;
t1644 = t1680 * t1749 + t1709 * t1744;
t1643 = t1679 * t1750 + t1707 * t1742;
t1642 = t1657 - 0.2e1 * t1832;
t1640 = t1656 - 0.2e1 * t1833;
t1638 = t1655 - 0.2e1 * t1834;
t1633 = (-pkin(1) * t1660 + t1687 * t1718) * t1668;
t1632 = (-pkin(1) * t1659 + t1686 * t1716) * t1666;
t1631 = (-pkin(1) * t1658 + t1685 * t1714) * t1664;
t1599 = t1611 + t1776;
t1598 = t1611 + 0.2e1 * t1776;
t1597 = t1613 + t1778;
t1596 = t1613 + 0.2e1 * t1778;
t1595 = t1612 + t1780;
t1594 = t1612 + 0.2e1 * t1780;
t1590 = t1604 - 0.2e1 * t1775;
t1589 = t1604 - t1775;
t1588 = t1606 - 0.2e1 * t1777;
t1587 = t1606 - t1777;
t1586 = t1605 - 0.2e1 * t1779;
t1585 = t1605 - t1779;
t1584 = (-pkin(1) * t1904 - t1681 * t1842) * t1668;
t1583 = (-pkin(1) * t1902 - t1680 * t1843) * t1666;
t1582 = (-pkin(1) * t1903 - t1679 * t1844) * t1664;
t1578 = (-pkin(1) * t1907 + t1684 * t1842) * t1668;
t1577 = (-pkin(1) * t1905 + t1683 * t1843) * t1666;
t1576 = (-pkin(1) * t1906 + t1682 * t1844) * t1664;
t1 = [(t1785 + t1795 + t1805) * MDP(1) + ((t1590 * t1668 + t1827) * t1847 + (t1588 * t1666 + t1823) * t1850 + (t1586 * t1664 + t1825) * t1853) * MDP(4) + (qJ(2,1) * t1785 + qJ(2,2) * t1795 + qJ(2,3) * t1805) * t1918 + ((t1578 * t1847 + t1589 * t1907) * t1668 + (t1577 * t1850 + t1587 * t1905) * t1666 + (t1576 * t1853 + t1585 * t1906) * t1664) * MDP(6) + (t1676 * t1803 + t1677 * t1793 + t1678 * t1783) * MDP(7) + (-t1676 * t1766 - t1677 * t1759 - t1678 * t1752) * t1917 + (t1673 * t1690 + t1674 * t1693 + t1675 * t1696) * t1914 + (t1643 * t1809 + t1644 * t1799 + t1645 * t1789 + ((-t1828 + t1911) * t1855 + (-t1824 + t1912) * t1859 + (-t1826 + t1913) * t1863) * t1720) * MDP(12) + (t1649 * t1809 + t1650 * t1799 + t1651 * t1789 + ((-t1581 + t1604) * t1681 + (-t1580 + t1606) * t1680 + (-t1579 + t1605) * t1679) * t1720) * MDP(13) + MDP(14) - t1735; ((t1598 * t1874 - t1681 * t1827) * t1712 + (t1596 * t1884 - t1680 * t1823) * t1710 + (t1594 * t1894 - t1679 * t1825) * t1708) * MDP(4) + ((t1584 * t1847 + t1599 * t1907) * t1668 + (t1583 * t1850 + t1597 * t1905) * t1666 + (t1582 * t1853 + t1595 * t1906) * t1664) * MDP(6) + (t1646 * t1809 + t1647 * t1799 + t1648 * t1789 + ((t1681 * t1908 - t1684 * t1828) * t1717 + (t1680 * t1909 - t1683 * t1824) * t1715 + (t1679 * t1910 - t1682 * t1826) * t1713) * t1720) * MDP(12) + (t1652 * t1809 + t1653 * t1799 + t1654 * t1789 + (-t1591 * t1679 - t1592 * t1680 - t1593 * t1681 + t1684 * t1604 + t1682 * t1605 + t1683 * t1606) * t1720) * MDP(13) + t1723; (t1620 * t1784 + t1621 * t1804 + t1622 * t1794 + t1638 * t1809 + t1640 * t1799 + t1642 * t1789) * MDP(4) + ((t1620 * t1899 + t1633 * t1847) * t1668 + (t1622 * t1900 + t1632 * t1850) * t1666 + (t1621 * t1901 + t1631 * t1853) * t1664) * MDP(6) + (t1711 * t1730 + t1709 * t1728 + t1707 * t1726 + (t1679 * t1816 + t1680 * t1815 + t1681 * t1814) * t1720) * MDP(12) + (t1717 * t1730 + t1715 * t1728 + t1713 * t1726 + (-t1634 * t1679 - t1635 * t1680 - t1636 * t1681) * t1720) * MDP(13) + t1724; ((-t1590 * t1875 + t1684 * t1821) * t1712 + (-t1588 * t1885 + t1683 * t1817) * t1710 + (-t1586 * t1895 + t1682 * t1819) * t1708) * MDP(4) + ((-t1578 * t1856 + t1589 * t1904) * t1668 + (-t1577 * t1860 + t1587 * t1902) * t1666 + (-t1576 * t1864 + t1585 * t1903) * t1664) * MDP(6) + (-t1643 * t1810 - t1644 * t1800 - t1645 * t1790 + ((-t1681 * t1822 + t1684 * t1911) * t1717 + (-t1680 * t1818 + t1683 * t1912) * t1715 + (-t1679 * t1820 + t1682 * t1913) * t1713) * t1720) * MDP(12) + (-t1649 * t1810 - t1650 * t1800 - t1651 * t1790 + (-t1579 * t1682 - t1580 * t1683 - t1581 * t1684 + t1681 * t1611 + t1679 * t1612 + t1680 * t1613) * t1720) * MDP(13) + t1723; (t1786 + t1796 + t1806) * MDP(1) + ((-t1598 * t1668 - t1821) * t1856 + (-t1596 * t1666 - t1817) * t1860 + (-t1594 * t1664 - t1819) * t1864) * MDP(4) + (qJ(2,1) * t1786 + qJ(2,2) * t1796 + qJ(2,3) * t1806) * t1918 + ((-t1584 * t1856 + t1599 * t1904) * t1668 + (-t1583 * t1860 + t1597 * t1902) * t1666 + (-t1582 * t1864 + t1595 * t1903) * t1664) * MDP(6) + (t1673 * t1803 + t1674 * t1793 + t1675 * t1783) * MDP(7) + (-t1673 * t1766 - t1674 * t1759 - t1675 * t1752) * t1917 + (t1676 * t1690 + t1677 * t1693 + t1678 * t1696) * t1914 + (-t1646 * t1810 - t1647 * t1800 - t1648 * t1790 + ((-t1822 + t1908) * t1846 + (-t1818 + t1909) * t1849 + (-t1820 + t1910) * t1852) * t1720) * MDP(12) + (-t1652 * t1810 - t1653 * t1800 - t1654 * t1790 + ((-t1593 + t1611) * t1684 + (-t1592 + t1613) * t1683 + (-t1591 + t1612) * t1682) * t1720) * MDP(13) + MDP(14) + t1735; (t1623 * t1784 + t1624 * t1804 + t1625 * t1794 - t1638 * t1810 - t1640 * t1800 - t1642 * t1790) * MDP(4) + ((t1623 * t1899 - t1633 * t1856) * t1668 + (t1625 * t1900 - t1632 * t1860) * t1666 + (t1624 * t1901 - t1631 * t1864) * t1664) * MDP(6) + (t1711 * t1731 + t1709 * t1729 + t1707 * t1727 + (t1682 * t1816 + t1683 * t1815 + t1684 * t1814) * t1720) * MDP(12) + (t1717 * t1731 + t1715 * t1729 + t1713 * t1727 + (-t1634 * t1682 - t1635 * t1683 - t1636 * t1684) * t1720) * MDP(13) + t1725; (t1586 * t1891 + t1588 * t1881 + t1590 * t1871 + t1682 * t1813 + t1683 * t1812 + t1684 * t1811) * MDP(4) + ((t1578 * t1718 + t1589 * t1660) * t1668 + (t1577 * t1716 + t1587 * t1659) * t1666 + (t1576 * t1714 + t1585 * t1658) * t1664) * MDP(6) + (t1643 * t1891 + t1644 * t1881 + t1645 * t1871) * MDP(12) + (t1649 * t1891 + t1650 * t1881 + t1651 * t1871) * MDP(13) + ((-t1679 * t1774 - t1680 * t1773 - t1681 * t1772) * MDP(12) + (t1658 * t1895 + t1659 * t1885 + t1660 * t1875) * MDP(13)) * t1720 + t1724; (t1594 * t1891 + t1596 * t1881 + t1598 * t1871 - t1679 * t1813 - t1680 * t1812 - t1681 * t1811) * MDP(4) + ((t1584 * t1718 + t1599 * t1660) * t1668 + (t1583 * t1716 + t1597 * t1659) * t1666 + (t1582 * t1714 + t1595 * t1658) * t1664) * MDP(6) + (t1646 * t1891 + t1647 * t1881 + t1648 * t1871) * MDP(12) + (t1652 * t1891 + t1653 * t1881 + t1654 * t1871) * MDP(13) + ((-t1682 * t1774 - t1683 * t1773 - t1684 * t1772) * MDP(12) + (t1658 * t1894 + t1659 * t1884 + t1660 * t1874) * MDP(13)) * t1720 + t1725; (t1867 + t1877 + t1887) * MDP(1) + ((t1642 * t1668 + t1896) * t1718 + (t1640 * t1666 + t1897) * t1716 + (t1638 * t1664 + t1898) * t1714) * MDP(4) + ((t1633 * t1718 + t1641 * t1660) * t1668 + (t1632 * t1716 + t1639 * t1659) * t1666 + (t1631 * t1714 + t1637 * t1658) * t1664) * MDP(6) + (t1698 * t1887 + t1700 * t1877 + t1702 * t1867) * MDP(7) + MDP(14) + (t1829 + t1830 + t1831) * t1918 + (-t1699 * t1802 - t1701 * t1792 - t1703 * t1782) * t1917 + 0.2e1 * (t1707 * t1829 + t1709 * t1830 + t1711 * t1831) * MDP(12) + 0.2e1 * (t1713 * t1829 + t1715 * t1830 + t1717 * t1831) * MDP(13);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
