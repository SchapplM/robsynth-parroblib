% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR12V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR12V1G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RPRRR12V1G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:28:33
% EndTime: 2020-08-06 18:28:38
% DurationCPUTime: 5.05s
% Computational Cost: add. (2607->429), mult. (4355->778), div. (1038->14), fcn. (3978->18), ass. (0->315)
t1688 = 0.1e1 / pkin(3);
t1878 = MDP(9) * t1688;
t1877 = MDP(10) * t1688;
t1880 = 2 * MDP(5);
t1879 = 2 * MDP(8);
t1687 = pkin(1) + pkin(5);
t1876 = MDP(11) / pkin(3) ^ 2;
t1672 = legFrame(3,2);
t1647 = sin(t1672);
t1650 = cos(t1672);
t1681 = cos(qJ(3,3));
t1666 = t1681 ^ 2;
t1675 = sin(qJ(3,3));
t1676 = sin(qJ(1,3));
t1656 = pkin(6) + t1687;
t1682 = cos(qJ(1,3));
t1703 = qJ(2,3) * t1676 + t1656 * t1682;
t1806 = t1675 * t1681;
t1831 = t1647 * t1681;
t1591 = t1703 * t1650 * t1675 + qJ(2,3) * t1831 + (t1647 * t1806 + (-t1666 + 0.1e1) * t1650 * t1676) * pkin(3);
t1638 = t1675 * pkin(3) + qJ(2,3);
t1632 = 0.1e1 / t1638;
t1657 = 0.1e1 / t1675;
t1858 = t1632 * t1657;
t1575 = t1591 * t1858;
t1855 = t1632 * t1687;
t1772 = t1682 * t1855;
t1553 = t1650 * t1772 - t1575;
t1875 = t1553 * t1657;
t1673 = legFrame(2,2);
t1648 = sin(t1673);
t1651 = cos(t1673);
t1683 = cos(qJ(3,2));
t1668 = t1683 ^ 2;
t1677 = sin(qJ(3,2));
t1678 = sin(qJ(1,2));
t1684 = cos(qJ(1,2));
t1704 = qJ(2,2) * t1678 + t1656 * t1684;
t1805 = t1677 * t1683;
t1827 = t1648 * t1683;
t1592 = t1704 * t1651 * t1677 + qJ(2,2) * t1827 + (t1648 * t1805 + (-t1668 + 0.1e1) * t1651 * t1678) * pkin(3);
t1639 = t1677 * pkin(3) + qJ(2,2);
t1634 = 0.1e1 / t1639;
t1660 = 0.1e1 / t1677;
t1849 = t1634 * t1660;
t1576 = t1592 * t1849;
t1846 = t1634 * t1687;
t1765 = t1684 * t1846;
t1554 = t1651 * t1765 - t1576;
t1874 = t1554 * t1660;
t1674 = legFrame(1,2);
t1649 = sin(t1674);
t1652 = cos(t1674);
t1685 = cos(qJ(3,1));
t1670 = t1685 ^ 2;
t1679 = sin(qJ(3,1));
t1680 = sin(qJ(1,1));
t1686 = cos(qJ(1,1));
t1705 = t1680 * qJ(2,1) + t1656 * t1686;
t1804 = t1679 * t1685;
t1823 = t1649 * t1685;
t1593 = t1705 * t1652 * t1679 + qJ(2,1) * t1823 + (t1649 * t1804 + (-t1670 + 0.1e1) * t1652 * t1680) * pkin(3);
t1640 = t1679 * pkin(3) + qJ(2,1);
t1636 = 0.1e1 / t1640;
t1663 = 0.1e1 / t1679;
t1840 = t1636 * t1663;
t1577 = t1593 * t1840;
t1837 = t1636 * t1687;
t1758 = t1686 * t1837;
t1555 = t1652 * t1758 - t1577;
t1873 = t1555 * t1663;
t1821 = t1650 * t1681;
t1832 = t1647 * t1676;
t1594 = (pkin(3) * t1821 - t1703 * t1647) * t1675 + pkin(3) * (t1681 - 0.1e1) * (t1681 + 0.1e1) * t1832 + qJ(2,3) * t1821;
t1578 = t1594 * t1858;
t1556 = -t1647 * t1772 - t1578;
t1872 = t1556 * t1657;
t1819 = t1651 * t1683;
t1828 = t1648 * t1678;
t1595 = (pkin(3) * t1819 - t1704 * t1648) * t1677 + pkin(3) * (t1683 - 0.1e1) * (t1683 + 0.1e1) * t1828 + qJ(2,2) * t1819;
t1579 = t1595 * t1849;
t1557 = -t1648 * t1765 - t1579;
t1871 = t1557 * t1660;
t1817 = t1652 * t1685;
t1824 = t1649 * t1680;
t1596 = (pkin(3) * t1817 - t1705 * t1649) * t1679 + pkin(3) * (t1685 - 0.1e1) * (t1685 + 0.1e1) * t1824 + qJ(2,1) * t1817;
t1580 = t1596 * t1840;
t1558 = -t1649 * t1758 - t1580;
t1870 = t1558 * t1663;
t1869 = t1591 * t1657;
t1868 = t1592 * t1660;
t1867 = t1593 * t1663;
t1866 = t1594 * t1657;
t1865 = t1595 * t1660;
t1864 = t1596 * t1663;
t1629 = t1638 * t1682 - t1656 * t1676;
t1626 = t1629 * t1632;
t1856 = t1632 * t1676;
t1799 = pkin(1) * t1856;
t1609 = t1626 + t1799;
t1863 = t1609 * t1657;
t1630 = t1639 * t1684 - t1656 * t1678;
t1627 = t1630 * t1634;
t1847 = t1634 * t1678;
t1798 = pkin(1) * t1847;
t1611 = t1627 + t1798;
t1862 = t1611 * t1660;
t1631 = t1640 * t1686 - t1656 * t1680;
t1628 = t1631 * t1636;
t1838 = t1636 * t1680;
t1797 = pkin(1) * t1838;
t1613 = t1628 + t1797;
t1861 = t1613 * t1663;
t1860 = t1632 * t1647;
t1859 = t1632 * t1650;
t1658 = 0.1e1 / t1675 ^ 2;
t1857 = t1632 * t1658;
t1633 = 0.1e1 / t1638 ^ 2;
t1854 = t1633 * t1657;
t1667 = t1682 ^ 2;
t1853 = t1633 * t1667;
t1852 = t1633 * t1682;
t1851 = t1634 * t1648;
t1850 = t1634 * t1651;
t1661 = 0.1e1 / t1677 ^ 2;
t1848 = t1634 * t1661;
t1635 = 0.1e1 / t1639 ^ 2;
t1845 = t1635 * t1660;
t1669 = t1684 ^ 2;
t1844 = t1635 * t1669;
t1843 = t1635 * t1684;
t1842 = t1636 * t1649;
t1841 = t1636 * t1652;
t1664 = 0.1e1 / t1679 ^ 2;
t1839 = t1636 * t1664;
t1637 = 0.1e1 / t1640 ^ 2;
t1836 = t1637 * t1663;
t1671 = t1686 ^ 2;
t1835 = t1637 * t1671;
t1834 = t1637 * t1686;
t1833 = t1647 * t1650;
t1830 = t1647 * t1682;
t1829 = t1648 * t1651;
t1826 = t1648 * t1684;
t1825 = t1649 * t1652;
t1822 = t1649 * t1686;
t1820 = t1650 * t1682;
t1818 = t1651 * t1684;
t1816 = t1652 * t1686;
t1690 = pkin(1) ^ 2;
t1653 = qJ(2,3) ^ 2 + t1690;
t1815 = t1653 * t1682;
t1654 = qJ(2,2) ^ 2 + t1690;
t1814 = t1654 * t1684;
t1655 = qJ(2,1) ^ 2 + t1690;
t1813 = t1655 * t1686;
t1812 = t1657 * t1681;
t1659 = t1676 ^ 2;
t1811 = t1659 * t1633;
t1810 = t1660 * t1683;
t1662 = t1678 ^ 2;
t1809 = t1662 * t1635;
t1808 = t1663 * t1685;
t1665 = t1680 ^ 2;
t1807 = t1665 * t1637;
t1803 = t1687 * t1688;
t1641 = t1647 ^ 2;
t1644 = t1650 ^ 2;
t1802 = t1641 - t1644;
t1642 = t1648 ^ 2;
t1645 = t1651 ^ 2;
t1801 = t1642 - t1645;
t1643 = t1649 ^ 2;
t1646 = t1652 ^ 2;
t1800 = t1643 - t1646;
t1796 = qJ(2,3) * t1811;
t1795 = qJ(2,2) * t1809;
t1794 = qJ(2,1) * t1807;
t1793 = t1591 * t1857;
t1792 = t1591 * t1854;
t1791 = t1592 * t1848;
t1790 = t1592 * t1845;
t1789 = t1593 * t1839;
t1788 = t1593 * t1836;
t1787 = t1594 * t1857;
t1786 = t1594 * t1854;
t1785 = t1595 * t1848;
t1784 = t1595 * t1845;
t1783 = t1596 * t1839;
t1782 = t1596 * t1836;
t1605 = -t1676 * t1855 - t1626;
t1781 = t1605 * t1812;
t1606 = -t1678 * t1846 - t1627;
t1780 = t1606 * t1810;
t1607 = -t1680 * t1837 - t1628;
t1779 = t1607 * t1808;
t1778 = t1629 * t1852;
t1777 = t1630 * t1843;
t1776 = t1631 * t1834;
t1775 = t1632 * t1830;
t1774 = t1632 * t1820;
t1773 = t1632 * t1812;
t1771 = t1676 * t1854;
t1770 = t1633 * t1806;
t1769 = t1676 * t1852;
t1768 = t1634 * t1826;
t1767 = t1634 * t1818;
t1766 = t1634 * t1810;
t1764 = t1678 * t1845;
t1763 = t1635 * t1805;
t1762 = t1678 * t1843;
t1761 = t1636 * t1822;
t1760 = t1636 * t1816;
t1759 = t1636 * t1808;
t1757 = t1680 * t1836;
t1756 = t1637 * t1804;
t1755 = t1680 * t1834;
t1754 = t1641 * t1853;
t1753 = t1644 * t1853;
t1752 = t1642 * t1844;
t1751 = t1645 * t1844;
t1750 = t1643 * t1835;
t1749 = t1646 * t1835;
t1748 = pkin(1) * t1775;
t1747 = pkin(1) * t1774;
t1746 = pkin(1) * t1768;
t1745 = pkin(1) * t1767;
t1744 = pkin(1) * t1761;
t1743 = pkin(1) * t1760;
t1742 = t1629 * t1773;
t1741 = t1630 * t1766;
t1740 = t1631 * t1759;
t1739 = t1676 * t1773;
t1738 = t1682 * t1773;
t1737 = t1667 * t1770;
t1736 = t1678 * t1766;
t1735 = t1684 * t1766;
t1734 = t1669 * t1763;
t1733 = t1680 * t1759;
t1732 = t1686 * t1759;
t1731 = t1671 * t1756;
t1730 = t1803 * t1812;
t1729 = t1803 * t1810;
t1728 = t1803 * t1808;
t1727 = t1833 * t1853;
t1726 = t1829 * t1844;
t1725 = t1825 * t1835;
t1724 = t1647 * t1769;
t1723 = t1650 * t1769;
t1722 = t1648 * t1762;
t1721 = t1651 * t1762;
t1720 = t1649 * t1755;
t1719 = t1652 * t1755;
t1718 = -0.2e1 * qJ(2,1) * t1761;
t1717 = 0.2e1 * qJ(2,1) * t1760;
t1716 = -0.2e1 * qJ(2,2) * t1768;
t1715 = 0.2e1 * qJ(2,2) * t1767;
t1714 = -0.2e1 * qJ(2,3) * t1775;
t1713 = 0.2e1 * qJ(2,3) * t1774;
t1712 = qJ(2,3) * t1724;
t1711 = qJ(2,3) * t1723;
t1710 = qJ(2,2) * t1722;
t1709 = qJ(2,2) * t1721;
t1708 = qJ(2,1) * t1720;
t1707 = qJ(2,1) * t1719;
t1706 = -0.2e1 * (t1647 * t1774 + t1648 * t1767 + t1649 * t1760) * t1877 + 0.2e1 * (t1732 * t1825 + t1735 * t1829 + t1738 * t1833) * t1878;
t1702 = t1769 * t1806;
t1701 = t1762 * t1805;
t1700 = t1755 * t1804;
t1699 = 0.2e1 * t1712;
t1698 = -0.2e1 * t1711;
t1697 = 0.2e1 * t1710;
t1696 = -0.2e1 * t1709;
t1695 = 0.2e1 * t1708;
t1694 = -0.2e1 * t1707;
t1693 = (-t1647 * t1702 - t1648 * t1701 - t1649 * t1700) * t1879 + (t1650 * t1739 + t1651 * t1736 + t1652 * t1733) * t1878 + (t1666 * t1724 + t1668 * t1722 + t1670 * t1720) * MDP(7) + (t1708 + t1710 + t1712) * t1880 + (t1720 + t1722 + t1724) * MDP(1) + (-t1650 * t1856 - t1651 * t1847 - t1652 * t1838) * t1877;
t1692 = (t1650 * t1702 + t1651 * t1701 + t1652 * t1700) * t1879 + (t1647 * t1739 + t1648 * t1736 + t1649 * t1733) * t1878 + (-t1666 * t1723 - t1668 * t1721 - t1670 * t1719) * MDP(7) + (-t1707 - t1709 - t1711) * t1880 + (-t1719 - t1721 - t1723) * MDP(1) + (-t1632 * t1832 - t1634 * t1828 - t1636 * t1824) * t1877;
t1691 = (t1800 * t1732 + t1801 * t1735 + t1802 * t1738) * t1878 + (-t1802 * t1682 * t1632 - t1801 * t1684 * t1634 - t1800 * t1686 * t1636) * t1877 + (t1725 * t1804 + t1726 * t1805 + t1727 * t1806) * t1879 + (-t1666 * t1727 - t1668 * t1726 - t1670 * t1725) * MDP(7) + (-qJ(2,1) * t1725 - qJ(2,2) * t1726 - qJ(2,3) * t1727) * t1880 + (-t1725 - t1726 - t1727) * MDP(1) + (t1658 * t1833 + t1661 * t1829 + t1664 * t1825) * t1876;
t1625 = -t1652 * t1803 + t1685 * t1718;
t1624 = -t1651 * t1803 + t1683 * t1716;
t1623 = -t1650 * t1803 + t1681 * t1714;
t1622 = -t1649 * t1803 + t1685 * t1717;
t1621 = -t1648 * t1803 + t1683 * t1715;
t1620 = -t1647 * t1803 + t1681 * t1713;
t1619 = t1652 * t1728 + t1679 * t1718;
t1618 = t1651 * t1729 + t1677 * t1716;
t1617 = t1650 * t1730 + t1675 * t1714;
t1616 = t1649 * t1728 + t1679 * t1717;
t1615 = t1648 * t1729 + t1677 * t1715;
t1614 = t1647 * t1730 + t1675 * t1713;
t1612 = t1628 + 0.2e1 * t1797;
t1610 = t1627 + 0.2e1 * t1798;
t1608 = t1626 + 0.2e1 * t1799;
t1604 = (-pkin(1) * t1631 - t1655 * t1680) * t1636;
t1603 = (-pkin(1) * t1630 - t1654 * t1678) * t1634;
t1602 = (-pkin(1) * t1629 - t1653 * t1676) * t1632;
t1570 = t1580 + t1744;
t1569 = t1580 + 0.2e1 * t1744;
t1568 = t1579 + t1746;
t1567 = t1579 + 0.2e1 * t1746;
t1566 = t1578 + t1748;
t1565 = t1578 + 0.2e1 * t1748;
t1564 = t1577 - 0.2e1 * t1743;
t1563 = t1577 - t1743;
t1562 = t1576 - 0.2e1 * t1745;
t1561 = t1576 - t1745;
t1560 = t1575 - 0.2e1 * t1747;
t1559 = t1575 - t1747;
t1552 = (-pkin(1) * t1864 - t1649 * t1813) * t1636;
t1551 = (-pkin(1) * t1865 - t1648 * t1814) * t1634;
t1550 = (-pkin(1) * t1866 - t1647 * t1815) * t1632;
t1549 = (-pkin(1) * t1867 + t1652 * t1813) * t1636;
t1548 = (-pkin(1) * t1868 + t1651 * t1814) * t1634;
t1547 = (-pkin(1) * t1869 + t1650 * t1815) * t1632;
t1 = [(t1749 + t1751 + t1753) * MDP(1) + ((t1564 * t1636 + t1788) * t1816 + (t1562 * t1634 + t1790) * t1818 + (t1560 * t1632 + t1792) * t1820) * MDP(4) + (qJ(2,1) * t1749 + qJ(2,2) * t1751 + qJ(2,3) * t1753) * t1880 + ((t1549 * t1816 + t1563 * t1867) * t1636 + (t1548 * t1818 + t1561 * t1868) * t1634 + (t1547 * t1820 + t1559 * t1869) * t1632) * MDP(6) + (t1666 * t1753 + t1668 * t1751 + t1670 * t1749) * MDP(7) + (-t1644 * t1737 - t1645 * t1734 - t1646 * t1731) * t1879 + (t1641 * t1658 + t1642 * t1661 + t1643 * t1664) * t1876 + (t1614 * t1774 + t1615 * t1767 + t1616 * t1760 + ((-t1789 + t1873) * t1823 + (-t1791 + t1874) * t1827 + (-t1793 + t1875) * t1831) * t1688) * MDP(12) + (t1620 * t1774 + t1621 * t1767 + t1622 * t1760 + ((-t1555 + t1577) * t1649 + (-t1554 + t1576) * t1648 + (-t1553 + t1575) * t1647) * t1688) * MDP(13) + MDP(14) - t1706; ((t1569 * t1841 - t1649 * t1788) * t1686 + (t1567 * t1850 - t1648 * t1790) * t1684 + (t1565 * t1859 - t1647 * t1792) * t1682) * MDP(4) + ((t1552 * t1816 + t1570 * t1867) * t1636 + (t1551 * t1818 + t1568 * t1868) * t1634 + (t1550 * t1820 + t1566 * t1869) * t1632) * MDP(6) + (t1617 * t1774 + t1618 * t1767 + t1619 * t1760 + ((t1649 * t1870 - t1652 * t1789) * t1685 + (t1648 * t1871 - t1651 * t1791) * t1683 + (t1647 * t1872 - t1650 * t1793) * t1681) * t1688) * MDP(12) + (t1623 * t1774 + t1624 * t1767 + t1625 * t1760 + (-t1556 * t1647 - t1557 * t1648 - t1558 * t1649 + t1650 * t1575 + t1651 * t1576 + t1652 * t1577) * t1688) * MDP(13) + t1691; (-t1591 * t1771 - t1592 * t1764 - t1593 * t1757 + t1608 * t1774 + t1610 * t1767 + t1612 * t1760) * MDP(4) + ((t1593 * t1861 + t1604 * t1816) * t1636 + (t1592 * t1862 + t1603 * t1818) * t1634 + (t1591 * t1863 + t1602 * t1820) * t1632) * MDP(6) + (t1679 * t1694 + t1677 * t1696 + t1675 * t1698 + (t1647 * t1781 + t1648 * t1780 + t1649 * t1779) * t1688) * MDP(12) + (t1685 * t1694 + t1683 * t1696 + t1681 * t1698 + (-t1605 * t1647 - t1606 * t1648 - t1607 * t1649) * t1688) * MDP(13) + t1692; ((-t1564 * t1842 + t1652 * t1782) * t1686 + (-t1562 * t1851 + t1651 * t1784) * t1684 + (-t1560 * t1860 + t1650 * t1786) * t1682) * MDP(4) + ((-t1549 * t1822 + t1563 * t1864) * t1636 + (-t1548 * t1826 + t1561 * t1865) * t1634 + (-t1547 * t1830 + t1559 * t1866) * t1632) * MDP(6) + (-t1614 * t1775 - t1615 * t1768 - t1616 * t1761 + ((-t1649 * t1783 + t1652 * t1873) * t1685 + (-t1648 * t1785 + t1651 * t1874) * t1683 + (-t1647 * t1787 + t1650 * t1875) * t1681) * t1688) * MDP(12) + (-t1620 * t1775 - t1621 * t1768 - t1622 * t1761 + (-t1553 * t1650 - t1554 * t1651 - t1555 * t1652 + t1647 * t1578 + t1648 * t1579 + t1649 * t1580) * t1688) * MDP(13) + t1691; (t1750 + t1752 + t1754) * MDP(1) + ((-t1569 * t1636 - t1782) * t1822 + (-t1567 * t1634 - t1784) * t1826 + (-t1565 * t1632 - t1786) * t1830) * MDP(4) + (qJ(2,1) * t1750 + qJ(2,2) * t1752 + qJ(2,3) * t1754) * t1880 + ((-t1552 * t1822 + t1570 * t1864) * t1636 + (-t1551 * t1826 + t1568 * t1865) * t1634 + (-t1550 * t1830 + t1566 * t1866) * t1632) * MDP(6) + (t1666 * t1754 + t1668 * t1752 + t1670 * t1750) * MDP(7) + (-t1641 * t1737 - t1642 * t1734 - t1643 * t1731) * t1879 + (t1644 * t1658 + t1645 * t1661 + t1646 * t1664) * t1876 + (-t1617 * t1775 - t1618 * t1768 - t1619 * t1761 + ((-t1783 + t1870) * t1817 + (-t1785 + t1871) * t1819 + (-t1787 + t1872) * t1821) * t1688) * MDP(12) + (-t1623 * t1775 - t1624 * t1768 - t1625 * t1761 + ((-t1558 + t1580) * t1652 + (-t1557 + t1579) * t1651 + (-t1556 + t1578) * t1650) * t1688) * MDP(13) + MDP(14) + t1706; (-t1594 * t1771 - t1595 * t1764 - t1596 * t1757 - t1608 * t1775 - t1610 * t1768 - t1612 * t1761) * MDP(4) + ((t1596 * t1861 - t1604 * t1822) * t1636 + (t1595 * t1862 - t1603 * t1826) * t1634 + (t1594 * t1863 - t1602 * t1830) * t1632) * MDP(6) + (t1679 * t1695 + t1677 * t1697 + t1675 * t1699 + (t1650 * t1781 + t1651 * t1780 + t1652 * t1779) * t1688) * MDP(12) + (t1685 * t1695 + t1683 * t1697 + t1681 * t1699 + (-t1605 * t1650 - t1606 * t1651 - t1607 * t1652) * t1688) * MDP(13) + t1693; (-t1560 * t1856 - t1562 * t1847 - t1564 * t1838 + t1650 * t1778 + t1651 * t1777 + t1652 * t1776) * MDP(4) + ((-t1549 * t1680 + t1563 * t1631) * t1636 + (-t1548 * t1678 + t1561 * t1630) * t1634 + (-t1547 * t1676 + t1559 * t1629) * t1632) * MDP(6) + (-t1614 * t1856 - t1615 * t1847 - t1616 * t1838) * MDP(12) + (-t1620 * t1856 - t1621 * t1847 - t1622 * t1838) * MDP(13) + ((-t1647 * t1742 - t1648 * t1741 - t1649 * t1740) * MDP(12) + (t1629 * t1860 + t1630 * t1851 + t1631 * t1842) * MDP(13)) * t1688 + t1692; (-t1565 * t1856 - t1567 * t1847 - t1569 * t1838 - t1647 * t1778 - t1648 * t1777 - t1649 * t1776) * MDP(4) + ((-t1552 * t1680 + t1570 * t1631) * t1636 + (-t1551 * t1678 + t1568 * t1630) * t1634 + (-t1550 * t1676 + t1566 * t1629) * t1632) * MDP(6) + (-t1617 * t1856 - t1618 * t1847 - t1619 * t1838) * MDP(12) + (-t1623 * t1856 - t1624 * t1847 - t1625 * t1838) * MDP(13) + ((-t1650 * t1742 - t1651 * t1741 - t1652 * t1740) * MDP(12) + (t1629 * t1859 + t1630 * t1850 + t1631 * t1841) * MDP(13)) * t1688 + t1693; (t1807 + t1809 + t1811) * MDP(1) + ((-t1612 * t1636 - t1631 * t1637) * t1680 + (-t1610 * t1634 - t1630 * t1635) * t1678 + (-t1608 * t1632 - t1629 * t1633) * t1676) * MDP(4) + ((-t1604 * t1680 + t1613 * t1631) * t1636 + (-t1603 * t1678 + t1611 * t1630) * t1634 + (-t1602 * t1676 + t1609 * t1629) * t1632) * MDP(6) + (t1666 * t1811 + t1668 * t1809 + t1670 * t1807) * MDP(7) + MDP(14) + (t1794 + t1795 + t1796) * t1880 + (-t1659 * t1770 - t1662 * t1763 - t1665 * t1756) * t1879 + 0.2e1 * (t1675 * t1796 + t1677 * t1795 + t1679 * t1794) * MDP(12) + 0.2e1 * (t1681 * t1796 + t1683 * t1795 + t1685 * t1794) * MDP(13);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
