% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR12V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x14]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR12V1G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR12V1G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:28:19
% EndTime: 2020-08-06 18:28:23
% DurationCPUTime: 3.78s
% Computational Cost: add. (2521->357), mult. (4263->757), div. (1038->14), fcn. (3978->18), ass. (0->328)
t521 = pkin(1) + pkin(5);
t506 = legFrame(3,2);
t481 = sin(t506);
t484 = cos(t506);
t515 = cos(qJ(3,3));
t500 = t515 ^ 2;
t509 = sin(qJ(3,3));
t510 = sin(qJ(1,3));
t490 = pkin(6) + t521;
t516 = cos(qJ(1,3));
t531 = qJ(2,3) * t510 + t490 * t516;
t636 = t515 * qJ(2,3);
t640 = t509 * t515;
t424 = t531 * t484 * t509 + t481 * t636 + (t481 * t640 + (-t500 + 0.1e1) * t484 * t510) * pkin(3);
t472 = t509 * pkin(3) + qJ(2,3);
t466 = 0.1e1 / t472;
t491 = 0.1e1 / t509;
t688 = t466 * t491;
t409 = t424 * t688;
t685 = t466 * t521;
t605 = t516 * t685;
t387 = t484 * t605 - t409;
t705 = t387 * t491;
t507 = legFrame(2,2);
t482 = sin(t507);
t485 = cos(t507);
t517 = cos(qJ(3,2));
t502 = t517 ^ 2;
t511 = sin(qJ(3,2));
t512 = sin(qJ(1,2));
t518 = cos(qJ(1,2));
t532 = qJ(2,2) * t512 + t490 * t518;
t635 = t517 * qJ(2,2);
t638 = t511 * t517;
t425 = t532 * t485 * t511 + t482 * t635 + (t482 * t638 + (-t502 + 0.1e1) * t485 * t512) * pkin(3);
t473 = t511 * pkin(3) + qJ(2,2);
t468 = 0.1e1 / t473;
t494 = 0.1e1 / t511;
t679 = t468 * t494;
t410 = t425 * t679;
t676 = t468 * t521;
t598 = t518 * t676;
t388 = t485 * t598 - t410;
t704 = t388 * t494;
t508 = legFrame(1,2);
t483 = sin(t508);
t486 = cos(t508);
t519 = cos(qJ(3,1));
t504 = t519 ^ 2;
t513 = sin(qJ(3,1));
t514 = sin(qJ(1,1));
t520 = cos(qJ(1,1));
t533 = t514 * qJ(2,1) + t490 * t520;
t634 = t519 * qJ(2,1);
t637 = t513 * t519;
t426 = t533 * t486 * t513 + t483 * t634 + (t483 * t637 + (-t504 + 0.1e1) * t486 * t514) * pkin(3);
t474 = t513 * pkin(3) + qJ(2,1);
t470 = 0.1e1 / t474;
t497 = 0.1e1 / t513;
t670 = t470 * t497;
t411 = t426 * t670;
t667 = t470 * t521;
t591 = t520 * t667;
t389 = t486 * t591 - t411;
t703 = t389 * t497;
t639 = t510 * t481;
t655 = t484 * t515;
t427 = (pkin(3) * t655 - t531 * t481) * t509 + pkin(3) * (t515 - 0.1e1) * (t515 + 0.1e1) * t639 + t484 * t636;
t412 = t427 * t688;
t390 = -t481 * t605 - t412;
t702 = t390 * t491;
t653 = t485 * t517;
t660 = t482 * t512;
t428 = (pkin(3) * t653 - t532 * t482) * t511 + pkin(3) * (t517 - 0.1e1) * (t517 + 0.1e1) * t660 + t485 * t635;
t413 = t428 * t679;
t391 = -t482 * t598 - t413;
t701 = t391 * t494;
t651 = t486 * t519;
t657 = t483 * t514;
t429 = (pkin(3) * t651 - t533 * t483) * t513 + pkin(3) * (t519 - 0.1e1) * (t519 + 0.1e1) * t657 + t486 * t634;
t414 = t429 * t670;
t392 = -t483 * t591 - t414;
t700 = t392 * t497;
t699 = t424 * t491;
t698 = t425 * t494;
t697 = t426 * t497;
t696 = t427 * t491;
t695 = t428 * t494;
t694 = t429 * t497;
t463 = t472 * t516 - t490 * t510;
t460 = t463 * t466;
t686 = t466 * t510;
t629 = pkin(1) * t686;
t443 = t460 + t629;
t693 = t443 * t491;
t464 = t473 * t518 - t490 * t512;
t461 = t464 * t468;
t677 = t468 * t512;
t628 = pkin(1) * t677;
t445 = t461 + t628;
t692 = t445 * t494;
t465 = t474 * t520 - t490 * t514;
t462 = t465 * t470;
t668 = t470 * t514;
t627 = pkin(1) * t668;
t447 = t462 + t627;
t691 = t447 * t497;
t690 = t466 * t481;
t689 = t466 * t484;
t492 = 0.1e1 / t509 ^ 2;
t687 = t466 * t492;
t467 = 0.1e1 / t472 ^ 2;
t684 = t467 * t491;
t501 = t516 ^ 2;
t683 = t467 * t501;
t682 = t467 * t516;
t681 = t468 * t482;
t680 = t468 * t485;
t495 = 0.1e1 / t511 ^ 2;
t678 = t468 * t495;
t469 = 0.1e1 / t473 ^ 2;
t675 = t469 * t494;
t503 = t518 ^ 2;
t674 = t469 * t503;
t673 = t469 * t518;
t672 = t470 * t483;
t671 = t470 * t486;
t498 = 0.1e1 / t513 ^ 2;
t669 = t470 * t498;
t471 = 0.1e1 / t474 ^ 2;
t666 = t471 * t497;
t505 = t520 ^ 2;
t665 = t471 * t505;
t664 = t471 * t520;
t663 = t481 * t484;
t662 = t481 * t516;
t661 = t482 * t485;
t659 = t482 * t518;
t658 = t483 * t486;
t656 = t483 * t520;
t654 = t484 * t516;
t652 = t485 * t518;
t650 = t486 * t520;
t524 = pkin(1) ^ 2;
t487 = qJ(2,3) ^ 2 + t524;
t649 = t487 * t516;
t488 = qJ(2,2) ^ 2 + t524;
t648 = t488 * t518;
t489 = qJ(2,1) ^ 2 + t524;
t647 = t489 * t520;
t646 = t491 * t515;
t493 = t510 ^ 2;
t645 = t493 * t467;
t644 = t494 * t517;
t496 = t512 ^ 2;
t643 = t496 * t469;
t642 = t497 * t519;
t499 = t514 ^ 2;
t641 = t499 * t471;
t522 = 0.1e1 / pkin(3);
t633 = t521 * t522;
t475 = t481 ^ 2;
t478 = t484 ^ 2;
t632 = t475 - t478;
t476 = t482 ^ 2;
t479 = t485 ^ 2;
t631 = t476 - t479;
t477 = t483 ^ 2;
t480 = t486 ^ 2;
t630 = t477 - t480;
t626 = t424 * t687;
t625 = t424 * t684;
t624 = t425 * t678;
t623 = t425 * t675;
t622 = t426 * t669;
t621 = t426 * t666;
t620 = t427 * t687;
t619 = t427 * t684;
t618 = t428 * t678;
t617 = t428 * t675;
t616 = t429 * t669;
t615 = t429 * t666;
t439 = -t510 * t685 - t460;
t614 = t439 * t646;
t440 = -t512 * t676 - t461;
t613 = t440 * t644;
t441 = -t514 * t667 - t462;
t612 = t441 * t642;
t611 = t463 * t682;
t610 = t464 * t673;
t609 = t465 * t664;
t608 = t466 * t662;
t607 = t466 * t654;
t606 = t466 * t646;
t604 = t510 * t684;
t603 = t467 * t640;
t602 = t510 * t682;
t601 = t468 * t659;
t600 = t468 * t652;
t599 = t468 * t644;
t597 = t512 * t675;
t596 = t469 * t638;
t595 = t512 * t673;
t594 = t470 * t656;
t593 = t470 * t650;
t592 = t470 * t642;
t590 = t514 * t666;
t589 = t471 * t637;
t588 = t514 * t664;
t587 = qJ(2,3) * t645;
t586 = qJ(2,2) * t643;
t585 = qJ(2,1) * t641;
t584 = t475 * t683;
t583 = t478 * t683;
t582 = t476 * t674;
t581 = t479 * t674;
t580 = t477 * t665;
t579 = t480 * t665;
t578 = pkin(1) * t608;
t577 = pkin(1) * t607;
t576 = pkin(1) * t601;
t575 = pkin(1) * t600;
t574 = pkin(1) * t594;
t573 = pkin(1) * t593;
t572 = t463 * t606;
t571 = t464 * t599;
t570 = t465 * t592;
t569 = t510 * t606;
t568 = t516 * t606;
t567 = t501 * t603;
t566 = t512 * t599;
t565 = t518 * t599;
t564 = t503 * t596;
t563 = t514 * t592;
t562 = t520 * t592;
t561 = t505 * t589;
t560 = t633 * t646;
t559 = t633 * t644;
t558 = t633 * t642;
t557 = t663 * t683;
t556 = t661 * t674;
t555 = t658 * t665;
t554 = t481 * t602;
t553 = t484 * t602;
t552 = t482 * t595;
t551 = t485 * t595;
t550 = t483 * t588;
t549 = t486 * t588;
t548 = -0.2e1 * qJ(2,1) * t594;
t547 = 0.2e1 * qJ(2,1) * t593;
t546 = -0.2e1 * qJ(2,2) * t601;
t545 = 0.2e1 * qJ(2,2) * t600;
t544 = -0.2e1 * qJ(2,3) * t608;
t543 = 0.2e1 * qJ(2,3) * t607;
t542 = t602 * t640;
t541 = t595 * t638;
t540 = t588 * t637;
t539 = qJ(2,3) * t554;
t538 = qJ(2,3) * t553;
t537 = qJ(2,2) * t552;
t536 = qJ(2,2) * t551;
t535 = qJ(2,1) * t550;
t534 = qJ(2,1) * t549;
t530 = 0.2e1 * t539;
t529 = -0.2e1 * t538;
t528 = 0.2e1 * t537;
t527 = -0.2e1 * t536;
t526 = 0.2e1 * t535;
t525 = -0.2e1 * t534;
t523 = 0.1e1 / pkin(3) ^ 2;
t459 = -t486 * t633 + t519 * t548;
t458 = -t485 * t633 + t517 * t546;
t457 = -t484 * t633 + t515 * t544;
t456 = -t483 * t633 + t519 * t547;
t455 = -t482 * t633 + t517 * t545;
t454 = -t481 * t633 + t515 * t543;
t453 = t486 * t558 + t513 * t548;
t452 = t485 * t559 + t511 * t546;
t451 = t484 * t560 + t509 * t544;
t450 = t483 * t558 + t513 * t547;
t449 = t482 * t559 + t511 * t545;
t448 = t481 * t560 + t509 * t543;
t446 = t462 + 0.2e1 * t627;
t444 = t461 + 0.2e1 * t628;
t442 = t460 + 0.2e1 * t629;
t438 = (t492 * t663 + t495 * t661 + t498 * t658) * t523;
t437 = (-pkin(1) * t465 - t489 * t514) * t470;
t436 = (-pkin(1) * t464 - t488 * t512) * t468;
t435 = (-pkin(1) * t463 - t487 * t510) * t466;
t434 = (-t484 * t686 - t485 * t677 - t486 * t668) * t522;
t433 = (-t466 * t639 - t468 * t660 - t470 * t657) * t522;
t432 = -t549 - t551 - t553;
t431 = t550 + t552 + t554;
t430 = -t555 - t556 - t557;
t423 = -0.2e1 * t534 - 0.2e1 * t536 - 0.2e1 * t538;
t422 = 0.2e1 * t535 + 0.2e1 * t537 + 0.2e1 * t539;
t421 = (t481 * t607 + t482 * t600 + t483 * t593) * t522;
t420 = -t500 * t553 - t502 * t551 - t504 * t549;
t419 = t500 * t554 + t502 * t552 + t504 * t550;
t418 = (t484 * t569 + t485 * t566 + t486 * t563) * t522;
t417 = (t481 * t569 + t482 * t566 + t483 * t563) * t522;
t416 = -0.2e1 * qJ(2,1) * t555 - 0.2e1 * qJ(2,2) * t556 - 0.2e1 * qJ(2,3) * t557;
t415 = -t500 * t557 - t502 * t556 - t504 * t555;
t408 = 0.2e1 * t484 * t542 + 0.2e1 * t485 * t541 + 0.2e1 * t486 * t540;
t407 = -0.2e1 * t481 * t542 - 0.2e1 * t482 * t541 - 0.2e1 * t483 * t540;
t406 = 0.2e1 * t555 * t637 + 0.2e1 * t556 * t638 + 0.2e1 * t557 * t640;
t405 = (t562 * t658 + t565 * t661 + t568 * t663) * t522;
t404 = t414 + t574;
t403 = t414 + 0.2e1 * t574;
t402 = t413 + t576;
t401 = t413 + 0.2e1 * t576;
t400 = t412 + t578;
t399 = t412 + 0.2e1 * t578;
t398 = t411 - 0.2e1 * t573;
t397 = t411 - t573;
t396 = t410 - 0.2e1 * t575;
t395 = t410 - t575;
t394 = t409 - 0.2e1 * t577;
t393 = t409 - t577;
t386 = (-pkin(1) * t694 - t483 * t647) * t470;
t385 = (-pkin(1) * t695 - t482 * t648) * t468;
t384 = (-pkin(1) * t696 - t481 * t649) * t466;
t383 = (-pkin(1) * t697 + t486 * t647) * t470;
t382 = (-pkin(1) * t698 + t485 * t648) * t468;
t381 = (-pkin(1) * t699 + t484 * t649) * t466;
t380 = (-t632 * t516 * t466 - t631 * t518 * t468 - t630 * t520 * t470) * t522;
t379 = (t630 * t562 + t631 * t565 + t632 * t568) * t522;
t1 = [t579 + t581 + t583, 0, 0, (t398 * t470 + t621) * t650 + (t396 * t468 + t623) * t652 + (t394 * t466 + t625) * t654, 0.2e1 * qJ(2,1) * t579 + 0.2e1 * qJ(2,2) * t581 + 0.2e1 * qJ(2,3) * t583, (t383 * t650 + t397 * t697) * t470 + (t382 * t652 + t395 * t698) * t468 + (t381 * t654 + t393 * t699) * t466, t500 * t583 + t502 * t581 + t504 * t579, -0.2e1 * t478 * t567 - 0.2e1 * t479 * t564 - 0.2e1 * t480 * t561, -0.2e1 * t405, 0.2e1 * t421, (t475 * t492 + t476 * t495 + t477 * t498) * t523, t448 * t607 + t449 * t600 + t450 * t593 + ((-t622 + t703) * t519 * t483 + (-t624 + t704) * t517 * t482 + (-t626 + t705) * t515 * t481) * t522, t454 * t607 + t455 * t600 + t456 * t593 + ((-t389 + t411) * t483 + (-t388 + t410) * t482 + (-t387 + t409) * t481) * t522, 1; t430, 0, 0, (t403 * t671 - t483 * t621) * t520 + (t401 * t680 - t482 * t623) * t518 + (t399 * t689 - t481 * t625) * t516, t416, (t386 * t650 + t404 * t697) * t470 + (t385 * t652 + t402 * t698) * t468 + (t384 * t654 + t400 * t699) * t466, t415, t406, t379, t380, t438, t451 * t607 + t452 * t600 + t453 * t593 + ((t483 * t700 - t486 * t622) * t519 + (t482 * t701 - t485 * t624) * t517 + (t481 * t702 - t484 * t626) * t515) * t522, t457 * t607 + t458 * t600 + t459 * t593 + (-t390 * t481 - t391 * t482 - t392 * t483 + t409 * t484 + t410 * t485 + t411 * t486) * t522, 0; t432, 0, 0, -t424 * t604 - t425 * t597 - t426 * t590 + t442 * t607 + t444 * t600 + t446 * t593, t423, (t426 * t691 + t437 * t650) * t470 + (t425 * t692 + t436 * t652) * t468 + (t424 * t693 + t435 * t654) * t466, t420, t408, t417, t433, 0, t513 * t525 + t511 * t527 + t509 * t529 + (t481 * t614 + t482 * t613 + t483 * t612) * t522, t519 * t525 + t517 * t527 + t515 * t529 + (-t439 * t481 - t440 * t482 - t441 * t483) * t522, 0; t430, 0, 0, (-t398 * t672 + t486 * t615) * t520 + (-t396 * t681 + t485 * t617) * t518 + (-t394 * t690 + t484 * t619) * t516, t416, (-t383 * t656 + t397 * t694) * t470 + (-t382 * t659 + t395 * t695) * t468 + (-t381 * t662 + t393 * t696) * t466, t415, t406, t379, t380, t438, -t448 * t608 - t449 * t601 - t450 * t594 + ((-t483 * t616 + t486 * t703) * t519 + (-t482 * t618 + t485 * t704) * t517 + (-t481 * t620 + t484 * t705) * t515) * t522, -t454 * t608 - t455 * t601 - t456 * t594 + (-t387 * t484 - t388 * t485 - t389 * t486 + t412 * t481 + t413 * t482 + t414 * t483) * t522, 0; t580 + t582 + t584, 0, 0, (-t403 * t470 - t615) * t656 + (-t401 * t468 - t617) * t659 + (-t399 * t466 - t619) * t662, 0.2e1 * qJ(2,1) * t580 + 0.2e1 * qJ(2,2) * t582 + 0.2e1 * qJ(2,3) * t584, (-t386 * t656 + t404 * t694) * t470 + (-t385 * t659 + t402 * t695) * t468 + (-t384 * t662 + t400 * t696) * t466, t500 * t584 + t502 * t582 + t504 * t580, -0.2e1 * t475 * t567 - 0.2e1 * t476 * t564 - 0.2e1 * t477 * t561, 0.2e1 * t405, -0.2e1 * t421, (t478 * t492 + t479 * t495 + t480 * t498) * t523, -t451 * t608 - t452 * t601 - t453 * t594 + ((-t616 + t700) * t651 + (-t618 + t701) * t653 + (-t620 + t702) * t655) * t522, -t457 * t608 - t458 * t601 - t459 * t594 + ((-t392 + t414) * t486 + (-t391 + t413) * t485 + (-t390 + t412) * t484) * t522, 1; t431, 0, 0, -t427 * t604 - t428 * t597 - t429 * t590 - t442 * t608 - t444 * t601 - t446 * t594, t422, (t429 * t691 - t437 * t656) * t470 + (t428 * t692 - t436 * t659) * t468 + (t427 * t693 - t435 * t662) * t466, t419, t407, t418, t434, 0, t513 * t526 + t511 * t528 + t509 * t530 + (t484 * t614 + t485 * t613 + t486 * t612) * t522, t519 * t526 + t517 * t528 + t515 * t530 + (-t439 * t484 - t440 * t485 - t441 * t486) * t522, 0; t432, 0, 0, -t394 * t686 - t396 * t677 - t398 * t668 + t484 * t611 + t485 * t610 + t486 * t609, t423, (-t383 * t514 + t397 * t465) * t470 + (-t382 * t512 + t395 * t464) * t468 + (-t381 * t510 + t393 * t463) * t466, t420, t408, t417, t433, 0, -t448 * t686 - t449 * t677 - t450 * t668 + (-t481 * t572 - t482 * t571 - t483 * t570) * t522, -t454 * t686 - t455 * t677 - t456 * t668 + (t463 * t690 + t464 * t681 + t465 * t672) * t522, 0; t431, 0, 0, -t399 * t686 - t401 * t677 - t403 * t668 - t481 * t611 - t482 * t610 - t483 * t609, t422, (-t386 * t514 + t404 * t465) * t470 + (-t385 * t512 + t402 * t464) * t468 + (-t384 * t510 + t400 * t463) * t466, t419, t407, t418, t434, 0, -t451 * t686 - t452 * t677 - t453 * t668 + (-t484 * t572 - t485 * t571 - t486 * t570) * t522, -t457 * t686 - t458 * t677 - t459 * t668 + (t463 * t689 + t464 * t680 + t465 * t671) * t522, 0; t641 + t643 + t645, 0, 0, (-t446 * t470 - t465 * t471) * t514 + (-t444 * t468 - t464 * t469) * t512 + (-t442 * t466 - t463 * t467) * t510, 0.2e1 * t585 + 0.2e1 * t586 + 0.2e1 * t587, (-t437 * t514 + t447 * t465) * t470 + (-t436 * t512 + t445 * t464) * t468 + (-t435 * t510 + t443 * t463) * t466, t500 * t645 + t502 * t643 + t504 * t641, -0.2e1 * t493 * t603 - 0.2e1 * t496 * t596 - 0.2e1 * t499 * t589, 0, 0, 0, 0.2e1 * t509 * t587 + 0.2e1 * t511 * t586 + 0.2e1 * t513 * t585, 0.2e1 * t515 * t587 + 0.2e1 * t517 * t586 + 0.2e1 * t519 * t585, 1;];
tau_reg  = t1;
