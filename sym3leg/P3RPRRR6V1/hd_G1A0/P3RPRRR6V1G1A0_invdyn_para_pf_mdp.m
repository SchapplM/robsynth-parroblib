% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RPRRR6V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR6V1G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:32
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RPRRR6V1G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(7,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3RPRRR6V1G1A0_invdyn_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:32:25
% EndTime: 2020-08-06 18:32:32
% DurationCPUTime: 6.72s
% Computational Cost: add. (33623->486), mult. (29562->768), div. (2391->20), fcn. (14805->86), ass. (0->357)
t1495 = xDP(2);
t1496 = xDP(1);
t1497 = (pkin(6) + pkin(5));
t1358 = -2 * pkin(2) * t1495 - 2 * t1496 * t1497;
t1371 = -pkin(2) * t1496 + t1495 * t1497;
t1476 = legFrame(3,3);
t1441 = qJ(1,3) + t1476;
t1413 = pkin(7) + t1441;
t1393 = sin(t1413);
t1416 = sin(t1441);
t1419 = cos(t1441);
t1400 = qJ(3,3) + t1413;
t1381 = cos(t1400);
t1401 = -qJ(3,3) + t1413;
t1382 = cos(t1401);
t1561 = t1381 + t1382;
t1375 = sin(t1400);
t1376 = sin(t1401);
t1564 = t1375 + t1376;
t1396 = cos(t1413);
t1646 = 0.2e1 * t1396;
t1649 = -2 * pkin(1);
t1309 = t1371 * t1646 + t1358 * t1393 + (t1416 * t1495 + t1419 * t1496) * t1649 + (-t1564 * t1495 - t1561 * t1496) * pkin(3);
t1342 = -t1393 * t1496 + t1396 * t1495;
t1475 = cos(pkin(7));
t1447 = t1475 * pkin(1);
t1488 = cos(qJ(3,3));
t1618 = t1488 * pkin(3) + pkin(2);
t1372 = t1447 + t1618;
t1365 = 0.1e1 / t1372;
t1480 = xDDP(2);
t1481 = xDDP(1);
t1366 = 0.1e1 / t1372 ^ 2;
t1460 = pkin(7) + qJ(3,3);
t1429 = sin(t1460);
t1463 = -pkin(7) + qJ(3,3);
t1432 = sin(t1463);
t1498 = 0.2e1 * qJ(3,3);
t1467 = sin(t1498);
t1444 = pkin(3) * t1467;
t1482 = sin(qJ(3,3));
t1640 = 0.2e1 * t1482;
t1345 = pkin(2) * t1640 + t1444 + (t1429 + t1432) * pkin(1);
t1336 = 0.1e1 / t1345;
t1584 = t1336 * t1482;
t1538 = t1366 * t1584;
t1333 = t1342 ^ 2;
t1587 = t1333 * t1366;
t1474 = sin(pkin(7));
t1619 = pkin(1) * t1474;
t1653 = t1497 + t1619;
t1288 = 0.2e1 * t1342 * t1309 * t1538 + (-t1393 * t1481 + t1396 * t1480 - t1587 * t1653) * t1365;
t1483 = sin(qJ(1,3));
t1489 = cos(qJ(1,3));
t1387 = -t1483 * g(1) + g(2) * t1489;
t1388 = g(1) * t1489 + g(2) * t1483;
t1448 = sin(t1476);
t1451 = cos(t1476);
t1504 = 0.1e1 / pkin(3) ^ 2;
t1605 = t1309 ^ 2 / t1345 ^ 2;
t1544 = t1504 * t1605;
t1567 = -t1387 * t1451 + t1388 * t1448;
t1622 = pkin(1) * t1288;
t1657 = 2 * pkin(2);
t1663 = (t1567 + 0.2e1 * t1622) * t1475 - (pkin(1) * t1544 - t1387 * t1448 - t1388 * t1451) * t1474 - pkin(5) * t1544 + t1288 * t1657;
t1477 = legFrame(2,3);
t1442 = qJ(1,2) + t1477;
t1414 = pkin(7) + t1442;
t1394 = sin(t1414);
t1417 = sin(t1442);
t1420 = cos(t1442);
t1404 = qJ(3,2) + t1414;
t1383 = cos(t1404);
t1405 = -qJ(3,2) + t1414;
t1384 = cos(t1405);
t1560 = t1383 + t1384;
t1377 = sin(t1404);
t1378 = sin(t1405);
t1563 = t1377 + t1378;
t1397 = cos(t1414);
t1645 = 0.2e1 * t1397;
t1310 = t1371 * t1645 + t1358 * t1394 + (t1417 * t1495 + t1420 * t1496) * t1649 + (-t1563 * t1495 - t1560 * t1496) * pkin(3);
t1343 = -t1394 * t1496 + t1397 * t1495;
t1490 = cos(qJ(3,2));
t1617 = t1490 * pkin(3) + pkin(2);
t1373 = t1447 + t1617;
t1367 = 0.1e1 / t1373;
t1368 = 0.1e1 / t1373 ^ 2;
t1461 = pkin(7) + qJ(3,2);
t1430 = sin(t1461);
t1464 = -pkin(7) + qJ(3,2);
t1433 = sin(t1464);
t1499 = 0.2e1 * qJ(3,2);
t1468 = sin(t1499);
t1445 = pkin(3) * t1468;
t1484 = sin(qJ(3,2));
t1639 = 0.2e1 * t1484;
t1346 = pkin(2) * t1639 + t1445 + (t1430 + t1433) * pkin(1);
t1338 = 0.1e1 / t1346;
t1583 = t1338 * t1484;
t1537 = t1368 * t1583;
t1334 = t1343 ^ 2;
t1586 = t1334 * t1368;
t1289 = 0.2e1 * t1343 * t1310 * t1537 + (-t1394 * t1481 + t1397 * t1480 - t1586 * t1653) * t1367;
t1485 = sin(qJ(1,2));
t1491 = cos(qJ(1,2));
t1389 = -t1485 * g(1) + g(2) * t1491;
t1390 = g(1) * t1491 + g(2) * t1485;
t1449 = sin(t1477);
t1452 = cos(t1477);
t1604 = t1310 ^ 2 / t1346 ^ 2;
t1543 = t1504 * t1604;
t1566 = -t1389 * t1452 + t1390 * t1449;
t1621 = pkin(1) * t1289;
t1662 = (t1566 + 0.2e1 * t1621) * t1475 - (pkin(1) * t1543 - t1389 * t1449 - t1390 * t1452) * t1474 - pkin(5) * t1543 + t1289 * t1657;
t1478 = legFrame(1,3);
t1443 = qJ(1,1) + t1478;
t1415 = pkin(7) + t1443;
t1395 = sin(t1415);
t1418 = sin(t1443);
t1421 = cos(t1443);
t1408 = qJ(3,1) + t1415;
t1385 = cos(t1408);
t1409 = -qJ(3,1) + t1415;
t1386 = cos(t1409);
t1559 = t1385 + t1386;
t1379 = sin(t1408);
t1380 = sin(t1409);
t1562 = t1379 + t1380;
t1398 = cos(t1415);
t1644 = 0.2e1 * t1398;
t1311 = t1371 * t1644 + t1358 * t1395 + (t1418 * t1495 + t1421 * t1496) * t1649 + (-t1562 * t1495 - t1559 * t1496) * pkin(3);
t1344 = -t1395 * t1496 + t1398 * t1495;
t1492 = cos(qJ(3,1));
t1616 = t1492 * pkin(3) + pkin(2);
t1374 = t1447 + t1616;
t1369 = 0.1e1 / t1374;
t1370 = 0.1e1 / t1374 ^ 2;
t1462 = pkin(7) + qJ(3,1);
t1431 = sin(t1462);
t1465 = -pkin(7) + qJ(3,1);
t1434 = sin(t1465);
t1500 = 0.2e1 * qJ(3,1);
t1469 = sin(t1500);
t1446 = pkin(3) * t1469;
t1486 = sin(qJ(3,1));
t1638 = 0.2e1 * t1486;
t1347 = pkin(2) * t1638 + t1446 + (t1431 + t1434) * pkin(1);
t1340 = 0.1e1 / t1347;
t1582 = t1340 * t1486;
t1536 = t1370 * t1582;
t1335 = t1344 ^ 2;
t1585 = t1335 * t1370;
t1290 = 0.2e1 * t1344 * t1311 * t1536 + (-t1395 * t1481 + t1398 * t1480 - t1585 * t1653) * t1369;
t1487 = sin(qJ(1,1));
t1493 = cos(qJ(1,1));
t1391 = -g(1) * t1487 + g(2) * t1493;
t1392 = g(1) * t1493 + g(2) * t1487;
t1450 = sin(t1478);
t1453 = cos(t1478);
t1603 = t1311 ^ 2 / t1347 ^ 2;
t1542 = t1504 * t1603;
t1565 = -t1391 * t1453 + t1392 * t1450;
t1620 = pkin(1) * t1290;
t1661 = (t1565 + 0.2e1 * t1620) * t1475 - (pkin(1) * t1542 - t1391 * t1450 - t1392 * t1453) * t1474 - pkin(5) * t1542 + t1290 * t1657;
t1656 = MDP(4) / 0.2e1;
t1655 = MDP(10) / 0.2e1;
t1654 = MDP(11) / 0.2e1;
t1479 = xDDP(3);
t1615 = (t1479 - g(3));
t1648 = -2 * pkin(2);
t1470 = t1488 ^ 2;
t1643 = -0.2e1 * t1470;
t1471 = t1490 ^ 2;
t1642 = -0.2e1 * t1471;
t1472 = t1492 ^ 2;
t1641 = -0.2e1 * t1472;
t1637 = -2 * t1497;
t1636 = 2 * t1497;
t1635 = MDP(4) * pkin(1);
t1634 = t1375 / 0.2e1;
t1633 = t1377 / 0.2e1;
t1632 = t1379 / 0.2e1;
t1631 = t1382 / 0.2e1;
t1630 = t1384 / 0.2e1;
t1629 = t1386 / 0.2e1;
t1628 = t1432 / 0.2e1;
t1627 = t1433 / 0.2e1;
t1626 = t1434 / 0.2e1;
t1625 = cos(t1460) / 0.2e1;
t1624 = cos(t1461) / 0.2e1;
t1623 = cos(t1462) / 0.2e1;
t1614 = pkin(3) * t1657;
t1613 = 2 * pkin(1);
t1321 = -t1564 * pkin(3) + t1393 * t1648 + t1396 * t1636 + t1416 * t1649;
t1324 = -t1561 * pkin(3) + t1393 * t1637 + t1396 * t1648 + t1419 * t1649;
t1428 = t1447 + pkin(2);
t1570 = t1482 * t1428;
t1349 = 0.1e1 / (t1444 + 0.2e1 * t1570);
t1502 = pkin(3) ^ 2;
t1503 = 0.1e1 / pkin(3);
t1527 = 0.1e1 / (t1444 / 0.2e1 + t1570);
t1528 = (pkin(1) ^ 2) + (pkin(2) ^ 2) + (t1497 ^ 2) + t1619 * t1636;
t1602 = t1309 * t1336;
t1541 = t1503 * t1602;
t1531 = t1372 * t1541;
t1581 = t1342 * t1365;
t1535 = t1653 * t1581;
t1557 = 0.2e1 * t1447;
t1279 = (-t1333 * t1365 ^ 2 * (t1470 * t1502 + t1488 * t1614 + t1618 * t1557 + t1528) * t1527 + (t1321 * t1480 + t1324 * t1481 + (-0.2e1 * t1488 * t1349 * t1531 + (t1349 * t1640 + t1482 * t1527) * t1535) * t1309) * t1336) * t1503;
t1611 = t1279 * t1482;
t1322 = -t1563 * pkin(3) + t1394 * t1648 + t1397 * t1636 + t1417 * t1649;
t1325 = -t1560 * pkin(3) + t1394 * t1637 + t1397 * t1648 + t1420 * t1649;
t1569 = t1484 * t1428;
t1350 = 0.1e1 / (t1445 + 0.2e1 * t1569);
t1526 = 0.1e1 / (t1445 / 0.2e1 + t1569);
t1601 = t1310 * t1338;
t1540 = t1503 * t1601;
t1530 = t1373 * t1540;
t1580 = t1343 * t1367;
t1534 = t1653 * t1580;
t1280 = (-t1334 * t1367 ^ 2 * (t1471 * t1502 + t1490 * t1614 + t1617 * t1557 + t1528) * t1526 + (t1322 * t1480 + t1325 * t1481 + (-0.2e1 * t1490 * t1350 * t1530 + (t1350 * t1639 + t1484 * t1526) * t1534) * t1310) * t1338) * t1503;
t1610 = t1280 * t1484;
t1323 = -t1562 * pkin(3) + t1395 * t1648 + t1398 * t1636 + t1418 * t1649;
t1326 = -t1559 * pkin(3) + t1395 * t1637 + t1398 * t1648 + t1421 * t1649;
t1568 = t1486 * t1428;
t1351 = 0.1e1 / (t1446 + 0.2e1 * t1568);
t1525 = 0.1e1 / (t1446 / 0.2e1 + t1568);
t1600 = t1311 * t1340;
t1539 = t1503 * t1600;
t1529 = t1374 * t1539;
t1579 = t1344 * t1369;
t1533 = t1653 * t1579;
t1281 = (-t1335 * t1369 ^ 2 * (t1472 * t1502 + t1492 * t1614 + t1616 * t1557 + t1528) * t1525 + (t1323 * t1480 + t1326 * t1481 + (-0.2e1 * t1492 * t1351 * t1529 + (t1351 * t1638 + t1486 * t1525) * t1533) * t1311) * t1340) * t1503;
t1609 = t1281 * t1486;
t1608 = t1288 * t1488;
t1607 = t1289 * t1490;
t1606 = t1290 * t1492;
t1399 = t1498 + t1413;
t1402 = -0.2e1 * qJ(3,3) + t1413;
t1422 = qJ(3,3) + t1441;
t1423 = -qJ(3,3) + t1441;
t1599 = (t1561 * t1657 + (cos(t1423) + cos(t1422)) * t1613 + t1564 * t1636 + (cos(t1402) + cos(t1399) + t1646) * pkin(3)) * t1336;
t1403 = t1499 + t1414;
t1406 = -0.2e1 * qJ(3,2) + t1414;
t1424 = qJ(3,2) + t1442;
t1425 = -qJ(3,2) + t1442;
t1598 = (t1560 * t1657 + (cos(t1425) + cos(t1424)) * t1613 + t1563 * t1636 + (cos(t1406) + cos(t1403) + t1645) * pkin(3)) * t1338;
t1407 = t1500 + t1415;
t1410 = -0.2e1 * qJ(3,1) + t1415;
t1426 = qJ(3,1) + t1443;
t1427 = -qJ(3,1) + t1443;
t1597 = (t1559 * t1657 + (cos(t1427) + cos(t1426)) * t1613 + t1562 * t1636 + (cos(t1410) + cos(t1407) + t1644) * pkin(3)) * t1340;
t1596 = (t1564 * t1657 + (sin(t1423) + sin(t1422)) * t1613 + t1561 * t1637 + (sin(t1402) + sin(t1399) + 0.2e1 * t1393) * pkin(3)) * t1336;
t1595 = (t1563 * t1657 + (sin(t1425) + sin(t1424)) * t1613 + t1560 * t1637 + (sin(t1406) + sin(t1403) + 0.2e1 * t1394) * pkin(3)) * t1338;
t1594 = (t1562 * t1657 + (sin(t1427) + sin(t1426)) * t1613 + t1559 * t1637 + (sin(t1410) + sin(t1407) + 0.2e1 * t1395) * pkin(3)) * t1340;
t1593 = t1321 * t1336;
t1592 = t1322 * t1338;
t1591 = t1323 * t1340;
t1590 = t1324 * t1336;
t1589 = t1325 * t1338;
t1588 = t1326 * t1340;
t1578 = t1365 * t1393;
t1577 = t1365 * t1396;
t1576 = t1367 * t1394;
t1575 = t1367 * t1397;
t1574 = t1369 * t1395;
t1573 = t1369 * t1398;
t1572 = t1480 / 0.2e1;
t1571 = t1481 / 0.2e1;
t1558 = 2 * t1615;
t1556 = t1288 * t1584;
t1555 = t1336 * t1608;
t1554 = t1289 * t1583;
t1553 = t1338 * t1607;
t1552 = t1290 * t1582;
t1551 = t1340 * t1606;
t1348 = pkin(2) * t1557 + t1502 / 0.2e1 + t1528;
t1550 = (0.2e1 * (t1309 * t1584 * t1653 - t1348 * t1581) * t1488 + (-cos(t1498) + (t1643 - 0.1e1) * t1428 * t1365) * t1342 * pkin(3)) * t1581;
t1549 = (0.2e1 * (t1310 * t1583 * t1653 - t1348 * t1580) * t1490 + (-cos(t1499) + (t1642 - 0.1e1) * t1428 * t1367) * t1343 * pkin(3)) * t1580;
t1548 = (0.2e1 * (t1311 * t1582 * t1653 - t1348 * t1579) * t1492 + (-cos(t1500) + (t1641 - 0.1e1) * t1428 * t1369) * t1344 * pkin(3)) * t1579;
t1547 = (-t1467 * t1535 / 0.2e1 + t1531) * t1602;
t1546 = (-t1468 * t1534 / 0.2e1 + t1530) * t1601;
t1545 = (-t1469 * t1533 / 0.2e1 + t1529) * t1600;
t1524 = t1541 * t1581;
t1523 = t1540 * t1580;
t1522 = t1539 * t1579;
t1521 = t1333 * t1488 * t1538;
t1520 = t1334 * t1490 * t1537;
t1519 = t1335 * t1492 * t1536;
t1518 = 0.2e1 * t1524;
t1517 = 0.2e1 * t1523;
t1516 = 0.2e1 * t1522;
t1300 = t1571 * t1599;
t1303 = t1572 * t1596;
t1512 = t1300 + t1303 + (0.2e1 * t1547 - t1550) * t1349;
t1301 = t1571 * t1598;
t1304 = t1572 * t1595;
t1511 = t1301 + t1304 + (0.2e1 * t1546 - t1549) * t1350;
t1302 = t1571 * t1597;
t1305 = t1572 * t1594;
t1510 = t1302 + t1305 + (0.2e1 * t1545 - t1548) * t1351;
t1440 = cos(t1465);
t1439 = cos(t1464);
t1438 = cos(t1463);
t1364 = g(1) * t1453 + g(2) * t1450;
t1363 = g(1) * t1452 + g(2) * t1449;
t1362 = g(1) * t1451 + g(2) * t1448;
t1361 = g(1) * t1450 - g(2) * t1453;
t1360 = g(1) * t1449 - g(2) * t1452;
t1359 = g(1) * t1448 - g(2) * t1451;
t1332 = -t1361 * t1487 + t1364 * t1493;
t1331 = -t1360 * t1485 + t1363 * t1491;
t1330 = -t1359 * t1483 + t1362 * t1489;
t1329 = t1361 * t1493 + t1364 * t1487;
t1328 = t1360 * t1491 + t1363 * t1485;
t1327 = t1359 * t1489 + t1362 * t1483;
t1320 = (t1641 + 0.1e1) * t1585;
t1319 = (t1642 + 0.1e1) * t1586;
t1318 = (t1643 + 0.1e1) * t1587;
t1287 = t1565 + t1620;
t1286 = t1566 + t1621;
t1285 = t1567 + t1622;
t1284 = (t1290 * t1486 + t1492 * t1516) * t1486;
t1283 = (t1289 * t1484 + t1490 * t1517) * t1484;
t1282 = (t1288 * t1482 + t1488 * t1518) * t1482;
t1278 = t1281 * t1492;
t1277 = t1280 * t1490;
t1276 = t1279 * t1488;
t1275 = t1606 * t1638 + (0.4e1 * t1472 - 0.2e1) * t1522;
t1274 = t1607 * t1639 + (0.4e1 * t1471 - 0.2e1) * t1523;
t1273 = t1608 * t1640 + (0.4e1 * t1470 - 0.2e1) * t1524;
t1272 = -t1486 * t1542 + t1278;
t1271 = t1492 * t1542 + t1609;
t1270 = -t1484 * t1543 + t1277;
t1269 = t1490 * t1543 + t1610;
t1268 = -t1482 * t1544 + t1276;
t1267 = t1488 * t1544 + t1611;
t1266 = t1510 + t1615;
t1265 = t1511 + t1615;
t1264 = t1512 + t1615;
t1263 = pkin(2) * t1516 + pkin(5) * t1281 + (t1281 * t1474 + t1475 * t1516) * pkin(1);
t1262 = pkin(2) * t1517 + pkin(5) * t1280 + (t1280 * t1474 + t1475 * t1517) * pkin(1);
t1261 = pkin(2) * t1518 + pkin(5) * t1279 + (t1279 * t1474 + t1475 * t1518) * pkin(1);
t1260 = -t1486 * t1266 + (t1380 / 0.2e1 + t1632) * g(2) + (t1629 + t1385 / 0.2e1) * g(1) + (pkin(2) * t1492 + (t1440 / 0.2e1 + t1623) * pkin(1)) * t1585 + (-pkin(5) * t1492 + (t1626 - t1431 / 0.2e1) * pkin(1)) * t1290;
t1259 = -t1484 * t1265 + (t1378 / 0.2e1 + t1633) * g(2) + (t1630 + t1383 / 0.2e1) * g(1) + (pkin(2) * t1490 + (t1439 / 0.2e1 + t1624) * pkin(1)) * t1586 + (-pkin(5) * t1490 + (t1627 - t1430 / 0.2e1) * pkin(1)) * t1289;
t1258 = -t1482 * t1264 + (t1376 / 0.2e1 + t1634) * g(2) + (t1631 + t1381 / 0.2e1) * g(1) + (pkin(2) * t1488 + (t1438 / 0.2e1 + t1625) * pkin(1)) * t1587 + (-pkin(5) * t1488 + (t1628 - t1429 / 0.2e1) * pkin(1)) * t1288;
t1257 = (0.2e1 * t1302 + 0.2e1 * t1305 + (0.4e1 * t1545 - 0.2e1 * t1548) * t1351 + t1558) * t1492 / 0.2e1 - t1486 * (-pkin(2) * t1585 + pkin(5) * t1290) + (t1629 - t1385 / 0.2e1) * g(2) + (-t1380 / 0.2e1 + t1632) * g(1) + ((t1626 + t1431 / 0.2e1) * t1585 + (-t1440 / 0.2e1 + t1623) * t1290) * pkin(1);
t1256 = (0.2e1 * t1301 + 0.2e1 * t1304 + (0.4e1 * t1546 - 0.2e1 * t1549) * t1350 + t1558) * t1490 / 0.2e1 - t1484 * (-pkin(2) * t1586 + pkin(5) * t1289) + (t1630 - t1383 / 0.2e1) * g(2) + (-t1378 / 0.2e1 + t1633) * g(1) + ((t1627 + t1430 / 0.2e1) * t1586 + (-t1439 / 0.2e1 + t1624) * t1289) * pkin(1);
t1255 = (0.2e1 * t1300 + 0.2e1 * t1303 + (0.4e1 * t1547 - 0.2e1 * t1550) * t1349 + t1558) * t1488 / 0.2e1 - t1482 * (-pkin(2) * t1587 + pkin(5) * t1288) + (t1631 - t1381 / 0.2e1) * g(2) + (-t1376 / 0.2e1 + t1634) * g(1) + ((t1628 + t1429 / 0.2e1) * t1587 + (-t1438 / 0.2e1 + t1625) * t1288) * pkin(1);
t1254 = -t1486 * t1263 + t1661 * t1492;
t1253 = -t1492 * t1263 - t1661 * t1486;
t1252 = -t1484 * t1262 + t1662 * t1490;
t1251 = -t1490 * t1262 - t1662 * t1484;
t1250 = -t1482 * t1261 + t1663 * t1488;
t1249 = -t1488 * t1261 - t1663 * t1482;
t1 = [(-t1288 * t1578 - t1289 * t1576 - t1290 * t1574) * MDP(1) + (-t1327 * t1578 - t1328 * t1576 - t1329 * t1574) * MDP(2) + (-t1330 * t1578 - t1331 * t1576 - t1332 * t1574) * MDP(3) + (-t1282 * t1578 - t1283 * t1576 - t1284 * t1574) * MDP(5) + (-t1273 * t1578 - t1274 * t1576 - t1275 * t1574) * MDP(6) + (-t1267 * t1578 - t1269 * t1576 - t1271 * t1574) * MDP(7) + (-t1268 * t1578 - t1270 * t1576 - t1272 * t1574) * MDP(8) + (-t1250 * t1578 - t1252 * t1576 - t1254 * t1574) * MDP(10) + (-t1249 * t1578 - t1251 * t1576 - t1253 * t1574) * MDP(11) + (t1481 - g(1)) * MDP(12) + (-t1285 * t1578 - t1286 * t1576 - t1287 * t1574) * t1635 + (t1264 * t1599 + t1265 * t1598 + t1266 * t1597) * t1656 + (t1268 * t1599 + t1270 * t1598 + t1272 * t1597) * t1655 + (-t1267 * t1599 - t1269 * t1598 - t1271 * t1597) * t1654 + ((-t1324 * t1521 - t1325 * t1520 - t1326 * t1519) * MDP(5) + (t1318 * t1590 + t1319 * t1589 + t1320 * t1588) * MDP(6) + (t1324 * t1556 + t1325 * t1554 + t1326 * t1552) * MDP(7) + (t1324 * t1555 + t1325 * t1553 + t1326 * t1551) * MDP(8) + (t1279 * t1590 + t1280 * t1589 + t1281 * t1588) * MDP(9) + (t1255 * t1590 + t1256 * t1589 + t1257 * t1588) * MDP(10) + (t1258 * t1590 + t1259 * t1589 + t1260 * t1588) * MDP(11)) * t1503; (t1288 * t1577 + t1289 * t1575 + t1290 * t1573) * MDP(1) + (t1327 * t1577 + t1328 * t1575 + t1329 * t1573) * MDP(2) + (t1330 * t1577 + t1331 * t1575 + t1332 * t1573) * MDP(3) + (t1282 * t1577 + t1283 * t1575 + t1284 * t1573) * MDP(5) + (t1273 * t1577 + t1274 * t1575 + t1275 * t1573) * MDP(6) + (t1267 * t1577 + t1269 * t1575 + t1271 * t1573) * MDP(7) + (t1268 * t1577 + t1270 * t1575 + t1272 * t1573) * MDP(8) + (t1250 * t1577 + t1252 * t1575 + t1254 * t1573) * MDP(10) + (t1249 * t1577 + t1251 * t1575 + t1253 * t1573) * MDP(11) + (t1480 - g(2)) * MDP(12) + (t1285 * t1577 + t1286 * t1575 + t1287 * t1573) * t1635 + (t1264 * t1596 + t1265 * t1595 + t1266 * t1594) * t1656 + (t1268 * t1596 + t1270 * t1595 + t1272 * t1594) * t1655 + (-t1267 * t1596 - t1269 * t1595 - t1271 * t1594) * t1654 + ((-t1321 * t1521 - t1322 * t1520 - t1323 * t1519) * MDP(5) + (t1318 * t1593 + t1319 * t1592 + t1320 * t1591) * MDP(6) + (t1321 * t1556 + t1322 * t1554 + t1323 * t1552) * MDP(7) + (t1321 * t1555 + t1322 * t1553 + t1323 * t1551) * MDP(8) + (t1279 * t1593 + t1280 * t1592 + t1281 * t1591) * MDP(9) + (t1255 * t1593 + t1256 * t1592 + t1257 * t1591) * MDP(10) + (t1258 * t1593 + t1259 * t1592 + t1260 * t1591) * MDP(11)) * t1503; (-(3 * g(3)) + (3 * t1479) + t1510 + t1511 + t1512) * MDP(4) + (t1276 + t1277 + t1278) * MDP(10) + (-t1609 - t1610 - t1611) * MDP(11) + t1615 * MDP(12) + ((-t1482 * t1605 - t1484 * t1604 - t1486 * t1603) * MDP(10) + (-t1488 * t1605 - t1490 * t1604 - t1492 * t1603) * MDP(11)) * t1504;];
tauX  = t1;
