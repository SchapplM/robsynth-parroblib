% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR6V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:37
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR6V1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR6V1G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR6V1G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR6V1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR6V1G2A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR6V1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR6V1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:36:59
% EndTime: 2020-08-06 18:37:13
% DurationCPUTime: 13.77s
% Computational Cost: add. (86040->560), mult. (101943->934), div. (13827->22), fcn. (72696->102), ass. (0->463)
t1243 = sin(pkin(7));
t1268 = -pkin(6) - pkin(5);
t1154 = t1268 * t1243;
t1140 = -t1154 + pkin(1);
t1252 = sin(qJ(1,3));
t1109 = t1140 * t1252;
t1244 = cos(pkin(7));
t1258 = cos(qJ(1,3));
t1474 = t1258 * t1268;
t1475 = t1258 * t1243;
t1613 = t1109 + pkin(2) * t1475 + (t1252 * pkin(2) + t1474) * t1244;
t1254 = sin(qJ(1,2));
t1110 = t1140 * t1254;
t1260 = cos(qJ(1,2));
t1472 = t1260 * t1268;
t1473 = t1260 * t1243;
t1612 = t1110 + pkin(2) * t1473 + (t1254 * pkin(2) + t1472) * t1244;
t1256 = sin(qJ(1,1));
t1111 = t1140 * t1256;
t1262 = cos(qJ(1,1));
t1470 = t1262 * t1268;
t1471 = t1262 * t1243;
t1611 = t1111 + pkin(2) * t1471 + (t1256 * pkin(2) + t1470) * t1244;
t1290 = pkin(2) ^ 2;
t1270 = 0.3e1 * t1290;
t1288 = pkin(3) ^ 2;
t1610 = t1270 + 0.3e1 / 0.4e1 * t1288;
t1257 = cos(qJ(3,3));
t1239 = t1257 ^ 2;
t1179 = 0.2e1 * t1239 - 0.1e1;
t1153 = t1268 * t1244;
t1193 = t1257 * pkin(3);
t1161 = t1193 + pkin(2);
t1248 = legFrame(3,2);
t1187 = sin(t1248);
t1190 = cos(t1248);
t1265 = xDP(3);
t1266 = xDP(2);
t1267 = xDP(1);
t1289 = 0.1e1 / pkin(3);
t1433 = pkin(2) * t1244 + t1140;
t1464 = pkin(2) * t1243 + t1153;
t1184 = t1244 * pkin(1);
t1151 = t1184 + pkin(2);
t1251 = sin(qJ(3,3));
t1481 = t1251 * t1151;
t1484 = t1243 * t1161;
t1124 = t1184 + t1161;
t1112 = 0.1e1 / t1124;
t1234 = 0.1e1 / t1251;
t1506 = t1112 * t1234;
t1279 = 0.2e1 * qJ(3,3);
t1217 = sin(t1279);
t1540 = pkin(3) * t1217;
t1051 = (-t1265 * ((t1244 * t1193 + t1433) * t1258 - t1252 * (t1243 * t1193 + t1464)) / (t1540 / 0.2e1 + t1481) + (t1187 * t1266 - t1190 * t1267) * ((t1244 * t1161 + t1140) * t1252 + t1258 * (t1153 + t1484)) * t1506) * t1289;
t1208 = qJ(1,3) + pkin(7);
t1144 = t1248 + t1208;
t1145 = -t1248 + t1208;
t1099 = -sin(t1144) + sin(t1145);
t1102 = cos(t1145) + cos(t1144);
t1170 = sin(t1208);
t1546 = -0.2e1 * t1265;
t1072 = t1099 * t1266 + t1102 * t1267 + t1170 * t1546;
t1113 = 0.1e1 / t1124 ^ 2;
t1419 = t1051 * t1072 * t1113;
t1382 = t1179 * t1419;
t1480 = t1251 * t1257;
t1183 = t1243 * pkin(1);
t1360 = -t1268 / 0.2e1 + t1183 / 0.2e1;
t1534 = t1051 * pkin(3);
t1436 = t1251 * t1534;
t1564 = t1072 * t1112;
t1035 = t1360 * t1564 - t1436;
t1515 = t1072 / 0.2e1;
t1032 = (-t1035 + t1436) * t1113 * t1515;
t1524 = t1032 * t1112;
t1385 = t1480 * t1524;
t1609 = t1382 / 0.2e1 + t1385;
t1259 = cos(qJ(3,2));
t1240 = t1259 ^ 2;
t1180 = 0.2e1 * t1240 - 0.1e1;
t1194 = t1259 * pkin(3);
t1253 = sin(qJ(3,2));
t1479 = t1253 * t1151;
t1282 = 0.2e1 * qJ(3,2);
t1220 = sin(t1282);
t1539 = pkin(3) * t1220;
t1398 = t1265 * ((t1244 * t1194 + t1433) * t1260 - t1254 * (t1243 * t1194 + t1464)) / (t1539 / 0.2e1 + t1479);
t1162 = t1194 + pkin(2);
t1483 = t1243 * t1162;
t1125 = t1184 + t1162;
t1115 = 0.1e1 / t1125;
t1236 = 0.1e1 / t1253;
t1504 = t1115 * t1236;
t1407 = ((t1244 * t1162 + t1140) * t1254 + t1260 * (t1153 + t1483)) * t1504;
t1249 = legFrame(2,2);
t1191 = cos(t1249);
t1491 = t1191 * t1267;
t1188 = sin(t1249);
t1492 = t1188 * t1266;
t1052 = (-t1398 + (-t1491 + t1492) * t1407) * t1289;
t1211 = qJ(1,2) + pkin(7);
t1146 = t1249 + t1211;
t1147 = -t1249 + t1211;
t1100 = -sin(t1146) + sin(t1147);
t1103 = cos(t1147) + cos(t1146);
t1171 = sin(t1211);
t1073 = t1100 * t1266 + t1103 * t1267 + t1171 * t1546;
t1116 = 0.1e1 / t1125 ^ 2;
t1418 = t1052 * t1073 * t1116;
t1381 = t1180 * t1418;
t1478 = t1253 * t1259;
t1533 = t1052 * pkin(3);
t1435 = t1253 * t1533;
t1563 = t1073 * t1115;
t1036 = t1360 * t1563 - t1435;
t1514 = t1073 / 0.2e1;
t1411 = t1116 * t1514;
t1033 = (-t1036 + t1435) * t1411;
t1523 = t1033 * t1115;
t1384 = t1478 * t1523;
t1608 = t1381 / 0.2e1 + t1384;
t1261 = cos(qJ(3,1));
t1241 = t1261 ^ 2;
t1181 = 0.2e1 * t1241 - 0.1e1;
t1195 = t1261 * pkin(3);
t1164 = t1195 + pkin(2);
t1482 = t1243 * t1164;
t1085 = (t1244 * t1164 + t1140) * t1256 + t1262 * (t1153 + t1482);
t1250 = legFrame(1,2);
t1189 = sin(t1250);
t1126 = t1184 + t1164;
t1118 = 0.1e1 / t1126;
t1255 = sin(qJ(3,1));
t1238 = 0.1e1 / t1255;
t1502 = t1118 * t1238;
t1404 = t1189 * t1502;
t1068 = t1266 * t1085 * t1289 * t1404;
t1192 = cos(t1250);
t1403 = t1192 * t1502;
t1477 = t1255 * t1151;
t1285 = 0.2e1 * qJ(3,1);
t1223 = sin(t1285);
t1538 = pkin(3) * t1223;
t1561 = (((t1244 * t1195 + t1433) * t1262 - t1256 * (t1243 * t1195 + t1464)) / (t1538 / 0.2e1 + t1477) * t1265 + t1085 * t1267 * t1403) * t1289;
t1053 = t1068 - t1561;
t1214 = qJ(1,1) + pkin(7);
t1148 = t1250 + t1214;
t1149 = -t1250 + t1214;
t1101 = -sin(t1148) + sin(t1149);
t1104 = cos(t1149) + cos(t1148);
t1172 = sin(t1214);
t1074 = t1101 * t1266 + t1104 * t1267 + t1172 * t1546;
t1119 = 0.1e1 / t1126 ^ 2;
t1417 = t1053 * t1074 * t1119;
t1380 = t1181 * t1417;
t1476 = t1255 * t1261;
t1532 = t1053 * pkin(3);
t1434 = t1255 * t1532;
t1562 = t1074 * t1118;
t1037 = t1360 * t1562 - t1434;
t1513 = t1074 / 0.2e1;
t1410 = t1119 * t1513;
t1034 = (-t1037 + t1434) * t1410;
t1522 = t1034 * t1118;
t1383 = t1476 * t1522;
t1607 = t1380 / 0.2e1 + t1383;
t1606 = -t1112 / 0.2e1;
t1605 = t1112 / 0.2e1;
t1604 = -t1115 / 0.2e1;
t1603 = t1115 / 0.2e1;
t1602 = -t1118 / 0.2e1;
t1601 = t1118 / 0.2e1;
t1567 = t1522 / 0.2e1;
t1566 = t1523 / 0.2e1;
t1565 = t1524 / 0.2e1;
t1597 = (t1398 / 0.6e1 + (t1491 / 0.6e1 - t1492 / 0.6e1) * t1407) * t1289;
t1596 = (t1398 / 0.4e1 + (t1491 / 0.4e1 - t1492 / 0.4e1) * t1407) * t1288 * t1289;
t1595 = (t1398 / 0.3e1 + (t1491 / 0.3e1 - t1492 / 0.3e1) * t1407) * t1289;
t1594 = (t1398 / 0.2e1 + (t1491 / 0.2e1 - t1492 / 0.2e1) * t1407) * t1289;
t1593 = -0.2e1 * t1068 + 0.2e1 * t1561;
t1233 = t1251 ^ 2;
t1350 = t1419 * t1480;
t1592 = t1233 * t1565 + t1350 / 0.2e1;
t1235 = t1253 ^ 2;
t1349 = t1418 * t1478;
t1591 = t1235 * t1566 + t1349 / 0.2e1;
t1237 = t1255 ^ 2;
t1348 = t1417 * t1476;
t1590 = t1237 * t1567 + t1348 / 0.2e1;
t1589 = 0.2e1 * pkin(2);
t1588 = 0.4e1 * pkin(2);
t1545 = 0.2e1 * t1268;
t1586 = t1289 / 0.4e1;
t1150 = t1183 + pkin(5);
t1143 = pkin(6) + t1150;
t1160 = t1193 + t1589;
t1277 = 0.4e1 * qJ(3,3);
t1215 = sin(t1277);
t1278 = 0.3e1 * qJ(3,3);
t1216 = sin(t1278);
t1225 = cos(t1278);
t1287 = pkin(3) * t1288;
t1276 = 0.2e1 * pkin(7);
t1196 = sin(t1276);
t1197 = cos(t1276);
t1291 = pkin(1) ^ 2;
t1242 = t1268 ^ 2;
t1463 = t1242 / 0.2e1 + t1291;
t1363 = 0.3e1 / 0.8e1 * t1288 + t1290 / 0.2e1 + t1463;
t1441 = pkin(1) * t1154;
t1461 = t1242 + t1291;
t1305 = -0.8e1 * (t1461 + t1610) * t1184 - 0.8e1 * (t1363 - t1441) * t1589 + 0.8e1 * (-pkin(2) * t1197 + t1196 * t1268) * t1291;
t1322 = pkin(3) * (-t1257 * pkin(2) + t1151 * t1225);
t1440 = pkin(1) * t1153;
t1465 = t1291 * t1196;
t1444 = 0.2e1 * t1465;
t1326 = -0.4e1 * t1440 + t1444;
t1165 = t1291 * t1197;
t1560 = -t1165 - t1288 / 0.2e1;
t1395 = -0.2e1 * t1290 + t1560;
t1362 = -t1291 + t1395;
t1275 = -0.2e1 * t1291;
t1364 = -0.2e1 * t1165 - 0.4e1 * t1290 + t1275 - t1288;
t1387 = -0.2e1 * t1440 + t1465;
t1397 = -t1289 / 0.4e1;
t1413 = t1112 * t1515;
t1529 = 0.2e1 * pkin(3);
t1432 = t1143 * t1529;
t1442 = t1160 * t1184;
t1544 = -0.6e1 * t1288;
t1445 = t1151 * t1544;
t1449 = -0.2e1 * t1143 * t1288;
t1141 = -0.2e1 * t1441;
t1274 = 0.2e1 * t1291;
t1452 = pkin(2) * t1184;
t1456 = -0.4e1 * pkin(3) * (0.6e1 * t1452 + t1141 + t1274 + t1270 + t1242 - t1560);
t1469 = t1288 * cos(t1277);
t1271 = 0.2e1 * t1290;
t1460 = t1271 + t1291;
t1105 = 0.4e1 * t1452 + t1165 + t1460;
t1226 = cos(t1279);
t1508 = t1105 * t1226;
t1541 = pkin(2) * t1143;
t1094 = t1387 + 0.2e1 * t1541;
t1509 = t1094 * t1226;
t1528 = 0.4e1 * pkin(3);
t1548 = -0.2e1 * t1288 - 0.2e1 * t1105;
t1022 = ((t1225 * t1449 + (t1160 * t1143 + t1387 - t1509) * t1529) * t1051 + (-t1215 * t1287 + t1216 * t1445 + t1217 * t1456 + t1305 * t1251) * t1413) / (t1508 + t1469 / 0.2e1 - 0.2e1 * t1442 + 0.2e1 * t1322 + t1362) * t1397 * t1564 - (t1035 * t1588 + (t1217 * t1548 - t1288 * t1215 + (-t1151 * t1216 - t1251 * t1184) * t1528) * t1051 + (-0.2e1 * t1509 + (-t1225 + t1257) * t1432 + t1326) * t1413) / (0.4e1 * t1322 + t1364 - 0.4e1 * t1442 + t1469 + 0.2e1 * t1508) * t1051;
t1048 = t1051 ^ 2;
t1521 = t1048 * t1257;
t1332 = t1022 * t1251 + t1521;
t1585 = t1332 * t1605;
t1067 = t1118 * t1513;
t1046 = t1067 + t1593;
t1047 = t1067 - t1593;
t1202 = pkin(7) + qJ(3,1);
t1156 = 0.2e1 * t1202;
t1207 = -pkin(7) + qJ(3,1);
t1158 = 0.2e1 * t1207;
t1163 = t1195 + t1589;
t1167 = sin(t1202);
t1169 = sin(t1207);
t1201 = pkin(7) + t1285;
t1206 = -pkin(7) + t1285;
t1284 = 0.3e1 * qJ(3,1);
t1212 = t1284 + pkin(7);
t1213 = t1284 - pkin(7);
t1283 = 0.4e1 * qJ(3,1);
t1221 = sin(t1283);
t1222 = sin(t1284);
t1231 = cos(t1284);
t1232 = cos(t1285);
t1394 = pkin(3) * (t1231 - t1261);
t1547 = -0.2e1 * t1244;
t1396 = cos(t1201) + cos(t1206) + t1547;
t1467 = t1288 * cos(t1283);
t1543 = pkin(2) * pkin(3);
t1019 = ((t1231 * t1449 + (-t1094 * t1232 + t1163 * t1143 + t1387) * t1529) * t1053 + (-t1221 * t1287 + t1222 * t1445 + t1223 * t1456 + t1305 * t1255) * t1067) / (t1105 * t1232 + t1467 / 0.2e1 - 0.2e1 * t1163 * t1184 + (-t1261 * pkin(2) + t1151 * t1231) * t1529 + t1362) * t1397 * t1562 - (t1037 * t1588 + ((t1067 - t1053) * sin(t1158) - (t1067 + t1053) * sin(t1156)) * t1291 + (-0.2e1 * (t1288 + t1460) * t1223 - 0.4e1 * t1222 * t1543 - t1288 * t1221) * t1053 + (t1444 + (t1232 * t1588 + 0.2e1 * t1394) * t1268) * t1067 + ((sin(t1206) * t1046 - sin(t1201) * t1047) * t1589 + t1396 * t1067 * t1545 + ((-sin(t1212) - t1169) * t1047 + (sin(t1213) + t1167) * t1046) * pkin(3)) * pkin(1)) / ((t1274 + 0.4e1 * t1290) * t1232 + t1467 + (cos(t1158) + cos(t1156)) * t1291 + t1394 * t1588 + (t1396 * t1588 + (cos(t1213) + cos(t1212) - cos(t1207) - cos(t1202)) * t1529) * pkin(1) + t1364) * t1053;
t1050 = t1053 ^ 2;
t1519 = t1050 * t1261;
t1334 = t1019 * t1255 + t1519;
t1584 = t1334 * t1601;
t1066 = t1115 * t1514;
t1065 = t1291 * t1066;
t1200 = pkin(7) + qJ(3,2);
t1155 = 0.2e1 * t1200;
t1205 = -pkin(7) + qJ(3,2);
t1157 = 0.2e1 * t1205;
t1166 = sin(t1200);
t1168 = sin(t1205);
t1199 = pkin(7) + t1282;
t1173 = cos(t1199);
t1174 = cos(t1200);
t1204 = -pkin(7) + t1282;
t1176 = cos(t1204);
t1177 = cos(t1205);
t1281 = 0.3e1 * qJ(3,2);
t1198 = pkin(7) + t1281;
t1203 = -pkin(7) + t1281;
t1209 = qJ(3,2) + t1276;
t1210 = qJ(3,2) - 0.2e1 * pkin(7);
t1280 = 0.4e1 * qJ(3,2);
t1218 = sin(t1280);
t1219 = sin(t1281);
t1228 = cos(t1281);
t1229 = cos(t1282);
t1361 = t1065 + (t1242 + t1610) * t1066;
t1372 = t1253 * t1066;
t1542 = pkin(1) * t1268;
t1453 = pkin(3) * t1542;
t1454 = 0.4e1 * t1533;
t1455 = pkin(3) * t1275;
t1462 = t1228 - t1259;
t1468 = t1288 * cos(t1280);
t1016 = (t1288 * t1052 * t1228 * t1545 + t1444 * t1533 + (t1541 + (-t1184 - t1194 / 0.2e1) * t1268) * t1454 + (-0.8e1 * (t1288 / 0.4e1 + 0.3e1 / 0.2e1 * t1290 + t1463) * t1539 - t1287 * t1218) * t1066 + 0.4e1 * (cos(t1210) - cos(t1209)) * t1268 * t1065 + (sin(t1155) * t1455 + 0.4e1 * t1176 * t1453) * (t1066 - t1594) + (sin(t1157) * t1455 - 0.4e1 * t1173 * t1453) * (t1066 + t1594) + (-0.4e1 * (t1361 - t1596) * t1168 - 0.4e1 * (t1361 + t1596) * t1166 - 0.3e1 * ((t1066 + t1595) * sin(t1203) + (t1066 - t1595) * sin(t1198)) * t1288 - 0.12e2 * ((t1066 + t1597) * sin(t1204) + (t1066 - t1597) * sin(t1199)) * t1543) * pkin(1) + ((t1219 * t1544 + 0.8e1 * (-t1174 + t1177) * t1542) * t1066 - 0.4e1 * (sin(t1210) + sin(t1209)) * t1065 + t1268 * t1229 * t1454 - 0.16e2 * t1363 * t1372) * pkin(2)) / (t1271 * t1229 + t1468 / 0.2e1 + (cos(t1157) / 0.2e1 + cos(t1155) / 0.2e1 + t1229 - 0.1e1) * t1291 + t1462 * pkin(2) * t1529 + ((t1173 + t1176 + t1547) * t1589 + (cos(t1203) + cos(t1198) - t1174 - t1177) * pkin(3)) * pkin(1) + t1395) * t1397 * t1563 - (t1036 * t1588 + (t1220 * t1548 - t1288 * t1218 + (-t1151 * t1219 - t1253 * t1184) * t1528) * t1052 + (-0.2e1 * t1094 * t1229 - t1462 * t1432 + t1326) * t1066) / (0.2e1 * t1105 * t1229 + t1468 - 0.4e1 * (t1194 + t1589) * t1184 + (-t1259 * pkin(2) + t1151 * t1228) * t1528 + t1364) * t1052;
t1049 = t1052 ^ 2;
t1520 = t1049 * t1259;
t1336 = t1016 * t1253 + t1520;
t1583 = t1336 * t1603;
t1526 = t1019 * t1261;
t1335 = -t1050 * t1255 + t1526;
t1582 = t1335 * t1601;
t1527 = t1016 * t1259;
t1337 = -t1049 * t1253 + t1527;
t1581 = t1337 * t1603;
t1525 = t1022 * t1257;
t1333 = -t1048 * t1251 + t1525;
t1580 = t1333 * t1605;
t1412 = t1257 * t1515;
t1498 = t1150 * t1257;
t1501 = t1150 * t1251;
t1551 = 0.2e1 * t1051;
t1389 = t1022 * t1498 + 0.2e1 * t1032 * t1481 + (t1112 * t1151 * t1412 - t1051 * t1501 / 0.2e1) * t1551;
t1576 = t1389 * t1606;
t1371 = t1255 * t1067;
t1494 = t1151 * t1261;
t1446 = 0.2e1 * t1494;
t1496 = t1150 * t1261;
t1499 = t1150 * t1255;
t1549 = 0.2e1 * t1053;
t1390 = t1019 * t1499 - t1034 * t1446 + (t1053 * t1496 / 0.2e1 + t1151 * t1371) * t1549;
t1575 = t1390 * t1602;
t1391 = t1019 * t1496 + 0.2e1 * t1034 * t1477 + (t1067 * t1494 - t1053 * t1499 / 0.2e1) * t1549;
t1574 = t1391 * t1602;
t1495 = t1151 * t1259;
t1447 = 0.2e1 * t1495;
t1497 = t1150 * t1259;
t1500 = t1150 * t1253;
t1550 = 0.2e1 * t1052;
t1392 = t1016 * t1500 - t1033 * t1447 + (t1052 * t1497 / 0.2e1 + t1151 * t1372) * t1550;
t1573 = t1392 * t1604;
t1393 = t1016 * t1497 + 0.2e1 * t1033 * t1479 + (t1066 * t1495 - t1052 * t1500 / 0.2e1) * t1550;
t1572 = t1393 * t1604;
t1373 = t1251 * t1413;
t1448 = 0.2e1 * t1151 * t1257;
t1388 = t1022 * t1501 - t1032 * t1448 + (t1051 * t1498 / 0.2e1 + t1151 * t1373) * t1551;
t1571 = t1388 * t1606;
t1518 = t1072 ^ 2 * t1113;
t1517 = t1073 ^ 2 * t1116;
t1516 = t1074 ^ 2 * t1119;
t1554 = -0.2e1 * pkin(1);
t1553 = -0.2e1 * pkin(2);
t1537 = pkin(3) * t1251;
t1536 = pkin(3) * t1253;
t1535 = pkin(3) * t1255;
t1458 = pkin(7) + qJ(3,3);
t1459 = -pkin(7) + qJ(3,3);
t1512 = (t1170 * t1545 + cos(t1208) * t1553 + t1258 * t1554 + (-cos(qJ(1,3) - t1459) - cos(qJ(1,3) + t1458)) * pkin(3)) / (t1251 * t1589 + t1540 + (sin(t1458) + sin(t1459)) * pkin(1));
t1511 = (t1171 * t1545 + cos(t1211) * t1553 + t1260 * t1554 + (-cos(qJ(1,2) - t1205) - cos(qJ(1,2) + t1200)) * pkin(3)) / (t1253 * t1589 + t1539 + (t1166 + t1168) * pkin(1));
t1510 = (t1172 * t1545 + cos(t1214) * t1553 + t1262 * t1554 + (-cos(qJ(1,1) - t1207) - cos(qJ(1,1) + t1202)) * pkin(3)) / (t1255 * t1589 + t1538 + (t1167 + t1169) * pkin(1));
t1507 = t1112 * t1170;
t1505 = t1115 * t1171;
t1503 = t1118 * t1172;
t1493 = t1151 / 0.4e1;
t1490 = t1234 * t1239;
t1489 = t1234 * t1257;
t1488 = t1236 * t1240;
t1487 = t1236 * t1259;
t1486 = t1238 * t1241;
t1485 = t1238 * t1261;
t1439 = pkin(3) * (t1252 * t1244 + t1475) * t1239;
t1438 = pkin(3) * (t1254 * t1244 + t1473) * t1240;
t1437 = pkin(3) * (t1256 * t1244 + t1471) * t1241;
t1095 = t1141 + t1290 + 0.2e1 * t1452 + t1461;
t1029 = ((-t1143 * t1436 + (pkin(3) * t1448 + t1239 * t1288 + t1095) * t1413) * t1113 * t1412 - ((t1143 * t1373 - t1534) * t1257 - t1051 * t1151) * t1112 * t1534) * t1234;
t1431 = t1029 * t1506;
t1030 = ((-t1143 * t1435 + (pkin(3) * t1447 + t1240 * t1288 + t1095) * t1066) * t1259 * t1411 - ((t1143 * t1372 - t1533) * t1259 - t1052 * t1151) * t1115 * t1533) * t1236;
t1430 = t1030 * t1504;
t1031 = ((-t1143 * t1434 + (pkin(3) * t1446 + t1241 * t1288 + t1095) * t1067) * t1261 * t1410 - ((t1143 * t1371 - t1532) * t1261 - t1053 * t1151) * t1118 * t1532) * t1238;
t1429 = t1031 * t1502;
t1077 = (t1161 * t1252 + t1474) * t1244 + t1109 + t1161 * t1475;
t1428 = t1077 * t1524;
t1427 = t1032 * t1512;
t1079 = (t1162 * t1254 + t1472) * t1244 + t1110 + t1162 * t1473;
t1425 = t1079 * t1523;
t1424 = t1033 * t1511;
t1081 = (t1164 * t1256 + t1470) * t1244 + t1111 + t1164 * t1471;
t1422 = t1081 * t1522;
t1421 = t1034 * t1510;
t1416 = t1077 * t1112 * t1518;
t1415 = t1079 * t1115 * t1517;
t1414 = t1081 * t1118 * t1516;
t1409 = t1077 * t1506;
t1408 = t1079 * t1504;
t1406 = t1112 * t1489;
t1405 = t1115 * t1487;
t1402 = t1118 * t1485;
t1401 = t1032 * t1507;
t1400 = t1033 * t1505;
t1399 = t1034 * t1503;
t1379 = t1257 * t1416;
t1378 = t1512 * t1518;
t1377 = t1259 * t1415;
t1376 = t1511 * t1517;
t1375 = t1261 * t1414;
t1374 = t1510 * t1516;
t1370 = t1187 * t1409;
t1369 = t1190 * t1409;
t1368 = t1188 * t1408;
t1367 = t1191 * t1408;
t1366 = t1081 * t1404;
t1365 = t1081 * t1403;
t1353 = t1032 * t1077 * t1406;
t1352 = t1033 * t1079 * t1405;
t1351 = t1034 * t1081 * t1402;
t1347 = t1257 * t1378;
t1346 = t1259 * t1376;
t1345 = t1261 * t1374;
t1343 = t1187 * t1379;
t1342 = t1188 * t1377;
t1341 = t1189 * t1375;
t1340 = t1190 * t1379;
t1339 = t1191 * t1377;
t1338 = t1192 * t1375;
t1321 = t1112 * (-t1048 * t1489 - t1022);
t1320 = t1112 * (t1022 * t1489 - t1048);
t1319 = t1115 * (-t1049 * t1487 - t1016);
t1318 = t1115 * (t1016 * t1487 - t1049);
t1317 = t1118 * (-t1050 * t1485 - t1019);
t1316 = t1118 * (t1019 * t1485 - t1050);
t1301 = -t1399 - t1400 - t1401;
t1300 = t1099 * t1565 + t1100 * t1566 + t1101 * t1567;
t1299 = t1102 * t1565 + t1103 * t1566 + t1104 * t1567;
t1082 = (t1164 * t1262 - t1256 * t1268) * t1244 + t1140 * t1262 - t1256 * t1482;
t1080 = (t1162 * t1260 - t1254 * t1268) * t1244 + t1140 * t1260 - t1254 * t1483;
t1078 = (t1161 * t1258 - t1252 * t1268) * t1244 + t1140 * t1258 - t1252 * t1484;
t1062 = t1192 * t1437 + (t1189 * t1535 + t1611 * t1192) * t1261 + t1189 * t1477;
t1061 = -t1189 * t1437 + (-t1611 * t1189 + t1192 * t1535) * t1261 + t1192 * t1477;
t1060 = t1191 * t1438 + (t1188 * t1536 + t1612 * t1191) * t1259 + t1188 * t1479;
t1059 = -t1188 * t1438 + (-t1612 * t1188 + t1191 * t1536) * t1259 + t1191 * t1479;
t1058 = t1190 * t1439 + (t1187 * t1537 + t1613 * t1190) * t1257 + t1187 * t1481;
t1057 = -t1187 * t1439 + (-t1613 * t1187 + t1190 * t1537) * t1257 + t1190 * t1481;
t1056 = -t1181 * t1516 / 0.4e1;
t1055 = -t1180 * t1517 / 0.4e1;
t1054 = -t1179 * t1518 / 0.4e1;
t1028 = -t1255 * t1031 - t1034 * t1496;
t1027 = t1261 * t1031 - t1034 * t1499;
t1026 = -t1253 * t1030 - t1033 * t1497;
t1025 = t1259 * t1030 - t1033 * t1500;
t1024 = -t1251 * t1029 - t1032 * t1498;
t1023 = t1257 * t1029 - t1032 * t1501;
t1 = [t1299, 0, 0, t1058 * t1431 + t1060 * t1430 + t1062 * t1429 + t1291 * t1299, (t1338 + t1339 + t1340) * t1586 + t1590 * t1104 + t1591 * t1103 + t1592 * t1102, (-t1054 * t1369 - t1055 * t1367 - t1056 * t1365) * t1289 + t1607 * t1104 + t1608 * t1103 + t1609 * t1102, (-t1190 * t1428 - t1191 * t1425 - t1192 * t1422) * t1289 + t1102 * t1585 + t1103 * t1583 + t1104 * t1584, (-t1190 * t1353 - t1191 * t1352 - t1192 * t1351) * t1289 + t1102 * t1580 + t1103 * t1581 + t1104 * t1582, (-t1016 * t1367 - t1019 * t1365 - t1022 * t1369) * t1289, t1062 * t1316 + t1060 * t1318 + t1058 * t1320 + (-t1023 * t1369 - t1025 * t1367 - t1027 * t1365 + (-t1190 * t1416 - t1191 * t1415 - t1192 * t1414) * t1493) * t1289 + t1102 * t1571 + t1103 * t1573 + t1104 * t1575, t1062 * t1317 + t1060 * t1319 + t1058 * t1321 + (-t1024 * t1369 - t1026 * t1367 - t1028 * t1365 + (-t1234 * t1340 - t1236 * t1339 - t1238 * t1338) * t1493) * t1289 + t1102 * t1576 + t1103 * t1572 + t1104 * t1574, 0; t1300, 0, 0, t1057 * t1431 + t1059 * t1430 + t1061 * t1429 + t1291 * t1300, (-t1341 - t1342 - t1343) * t1586 + t1590 * t1101 + t1591 * t1100 + t1592 * t1099, (t1054 * t1370 + t1055 * t1368 + t1056 * t1366) * t1289 + t1607 * t1101 + t1608 * t1100 + t1609 * t1099, (t1187 * t1428 + t1188 * t1425 + t1189 * t1422) * t1289 + t1099 * t1585 + t1100 * t1583 + t1101 * t1584, (t1187 * t1353 + t1188 * t1352 + t1189 * t1351) * t1289 + t1099 * t1580 + t1100 * t1581 + t1101 * t1582, (t1016 * t1368 + t1019 * t1366 + t1022 * t1370) * t1289, t1061 * t1316 + t1059 * t1318 + t1057 * t1320 + (t1023 * t1370 + t1025 * t1368 + t1027 * t1366 + (t1187 * t1416 + t1188 * t1415 + t1189 * t1414) * t1493) * t1289 + t1099 * t1571 + t1100 * t1573 + t1101 * t1575, t1061 * t1317 + t1059 * t1319 + t1057 * t1321 + (t1024 * t1370 + t1026 * t1368 + t1028 * t1366 + (t1234 * t1343 + t1236 * t1342 + t1238 * t1341) * t1493) * t1289 + t1099 * t1576 + t1100 * t1572 + t1101 * t1574, 0; t1301, 0, 0, t1029 * t1078 * t1406 + t1030 * t1080 * t1405 + t1031 * t1082 * t1402 + t1291 * t1301, -t1233 * t1401 - t1235 * t1400 - t1237 * t1399 + (-t1251 * t1347 - t1253 * t1346 - t1255 * t1345) * t1586 - t1170 * t1350 - t1171 * t1349 - t1172 * t1348, (t1054 * t1512 + t1055 * t1511 + t1056 * t1510) * t1289 + (-0.2e1 * t1383 - t1380) * t1172 + (-0.2e1 * t1384 - t1381) * t1171 + (-0.2e1 * t1385 - t1382) * t1170, -t1334 * t1503 - t1336 * t1505 - t1332 * t1507 + (t1251 * t1427 + t1253 * t1424 + t1255 * t1421) * t1289, -t1335 * t1503 - t1337 * t1505 - t1333 * t1507 + (t1257 * t1427 + t1259 * t1424 + t1261 * t1421) * t1289, (t1016 * t1511 + t1019 * t1510 + t1022 * t1512) * t1289, (t1390 * t1172 + (t1019 * t1486 - t1519) * t1082) * t1118 + (t1392 * t1171 + (t1016 * t1488 - t1520) * t1080) * t1115 + (t1388 * t1170 + (t1022 * t1490 - t1521) * t1078) * t1112 + (t1023 * t1512 + t1025 * t1511 + t1027 * t1510 + (t1251 * t1378 + t1253 * t1376 + t1255 * t1374) * t1493) * t1289, (t1391 * t1172 + (-t1050 * t1486 - t1526) * t1082) * t1118 + (t1393 * t1171 + (-t1049 * t1488 - t1527) * t1080) * t1115 + (t1389 * t1170 + (-t1048 * t1490 - t1525) * t1078) * t1112 + (t1024 * t1512 + t1026 * t1511 + t1028 * t1510 + (t1345 + t1346 + t1347) * t1493) * t1289, 0;];
tau_reg  = t1;
