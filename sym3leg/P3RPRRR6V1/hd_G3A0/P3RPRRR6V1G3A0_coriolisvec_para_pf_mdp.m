% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR6V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR6V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:43
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:42:55
% EndTime: 2020-08-06 18:43:07
% DurationCPUTime: 11.94s
% Computational Cost: add. (72645->483), mult. (84603->796), div. (11769->22), fcn. (59823->84), ass. (0->367)
t2816 = sin(pkin(7));
t2839 = -pkin(6) - pkin(5);
t2745 = t2839 * t2816;
t2731 = -t2745 + pkin(1);
t2829 = cos(qJ(1,3));
t2700 = t2731 * t2829;
t2817 = cos(pkin(7));
t2823 = sin(qJ(1,3));
t2999 = t2823 * t2839;
t3004 = t2816 * t2823;
t3088 = t2700 - pkin(2) * t3004 + (pkin(2) * t2829 - t2999) * t2817;
t2831 = cos(qJ(1,2));
t2701 = t2731 * t2831;
t2825 = sin(qJ(1,2));
t2996 = t2825 * t2839;
t3003 = t2816 * t2825;
t3087 = t2701 - pkin(2) * t3003 + (pkin(2) * t2831 - t2996) * t2817;
t2833 = cos(qJ(1,1));
t2702 = t2731 * t2833;
t2827 = sin(qJ(1,1));
t2993 = t2827 * t2839;
t3002 = t2816 * t2827;
t3086 = t2702 - pkin(2) * t3002 + (pkin(2) * t2833 - t2993) * t2817;
t2828 = cos(qJ(3,3));
t2774 = t2828 * pkin(3);
t2750 = t2774 + pkin(2);
t2682 = t2750 * t2817 + t2731;
t2744 = t2839 * t2817;
t2686 = t2750 * t2816 + t2744;
t2819 = legFrame(3,2);
t2768 = sin(t2819);
t2771 = cos(t2819);
t2836 = xDP(3);
t2837 = xDP(2);
t2838 = xDP(1);
t2860 = 0.1e1 / pkin(3);
t2767 = t2817 * pkin(1);
t2742 = t2767 + pkin(2);
t2822 = sin(qJ(3,3));
t3001 = t2822 * t2742;
t2715 = t2767 + t2750;
t2703 = 0.1e1 / t2715;
t2807 = 0.1e1 / t2822;
t3023 = t2703 * t2807;
t2850 = 0.2e1 * qJ(3,3);
t2790 = sin(t2850);
t3054 = pkin(3) * t2790;
t2641 = (t2836 * (t2682 * t2823 + t2686 * t2829) / (t3054 / 0.2e1 + t3001) + (t2768 * t2837 - t2771 * t2838) * (t2682 * t2829 - t2686 * t2823) * t3023) * t2860;
t3085 = 0.2e1 * t2641;
t2857 = 0.2e1 * pkin(2);
t3084 = 0.4e1 * pkin(2);
t3083 = 2 * MDP(6);
t3055 = 0.2e1 * t2839;
t3082 = MDP(5) / 0.4e1;
t3081 = t2742 / 0.4e1;
t2832 = cos(qJ(3,1));
t2776 = t2832 * pkin(3);
t2754 = t2776 + pkin(2);
t2717 = t2767 + t2754;
t2709 = 0.1e1 / t2717;
t2766 = t2816 * pkin(1);
t2906 = -t2839 / 0.2e1 + t2766 / 0.2e1;
t2826 = sin(qJ(3,1));
t2684 = t2754 * t2817 + t2731;
t2688 = t2754 * t2816 + t2744;
t2821 = legFrame(1,2);
t2770 = sin(t2821);
t2773 = cos(t2821);
t2995 = t2826 * t2742;
t2811 = 0.1e1 / t2826;
t3021 = t2709 * t2811;
t2856 = 0.2e1 * qJ(3,1);
t2796 = sin(t2856);
t3052 = pkin(3) * t2796;
t2643 = (t2836 * (t2684 * t2827 + t2688 * t2833) / (t3052 / 0.2e1 + t2995) + (t2770 * t2837 - t2773 * t2838) * (t2684 * t2833 - t2688 * t2827) * t3021) * t2860;
t3046 = t2643 * pkin(3);
t2966 = t2826 * t3046;
t2787 = qJ(1,1) + pkin(7);
t2739 = t2821 + t2787;
t2740 = -t2821 + t2787;
t2692 = -sin(t2739) - sin(t2740);
t2695 = cos(t2740) - cos(t2739);
t2762 = cos(t2787);
t3056 = -0.2e1 * t2836;
t2660 = t2692 * t2838 + t2695 * t2837 + t2762 * t3056;
t3074 = t2660 * t2709;
t2628 = t2906 * t3074 - t2966;
t2741 = t2766 + pkin(5);
t2734 = pkin(6) + t2741;
t2753 = t2776 + t2857;
t2854 = 0.4e1 * qJ(3,1);
t2794 = sin(t2854);
t2855 = 0.3e1 * qJ(3,1);
t2795 = sin(t2855);
t2804 = cos(t2855);
t2859 = pkin(3) ^ 2;
t2858 = pkin(3) * t2859;
t2847 = 0.2e1 * pkin(7);
t2777 = sin(t2847);
t2778 = cos(t2847);
t2815 = t2839 ^ 2;
t2861 = pkin(2) ^ 2;
t2841 = 0.3e1 * t2861;
t2862 = pkin(1) ^ 2;
t2970 = pkin(1) * t2745;
t2988 = t2815 + t2862;
t2879 = -0.8e1 * (0.3e1 / 0.4e1 * t2859 + t2841 + t2988) * t2767 - 0.8e1 * (-t2970 + 0.3e1 / 0.8e1 * t2859 + t2862 + t2861 / 0.2e1 + t2815 / 0.2e1) * t2857 + 0.8e1 * (-pkin(2) * t2778 + t2777 * t2839) * t2862;
t2882 = pkin(3) * (-pkin(2) * t2832 + t2742 * t2804);
t2969 = pkin(1) * t2744;
t2989 = t2862 * t2777;
t2973 = 0.2e1 * t2989;
t2887 = -0.4e1 * t2969 + t2973;
t2987 = 0.2e1 * t2861 + t2862;
t2755 = t2862 * t2778;
t3069 = -t2755 - t2859 / 0.2e1;
t2907 = t3069 - t2987;
t2908 = -0.2e1 * t2755 - 0.4e1 * t2861 - 0.2e1 * t2862 - t2859;
t2928 = -0.2e1 * t2969 + t2989;
t2938 = -t2860 / 0.4e1;
t3032 = t2660 / 0.2e1;
t2945 = t2709 * t3032;
t3044 = 0.2e1 * pkin(3);
t2959 = t2734 * t3044;
t2971 = t2753 * t2767;
t2974 = -0.6e1 * t2742 * t2859;
t2978 = -0.2e1 * t2734 * t2859;
t2732 = -0.2e1 * t2970;
t2845 = 0.2e1 * t2862;
t2979 = pkin(2) * t2767;
t3063 = -0.4e1 * pkin(3);
t2982 = (0.6e1 * t2979 + t2732 + t2845 + t2841 + t2815 - t3069) * t3063;
t2990 = t2859 * cos(t2854);
t2696 = 0.4e1 * t2979 + t2755 + t2987;
t2805 = cos(t2856);
t3024 = t2696 * t2805;
t2680 = t2734 * t2857 + t2928;
t3026 = t2680 * t2805;
t3043 = 0.4e1 * pkin(3);
t3058 = -0.2e1 * t2859 - 0.2e1 * t2696;
t2614 = ((t2804 * t2978 + (t2734 * t2753 + t2928 - t3026) * t3044) * t2643 + (-t2794 * t2858 + t2795 * t2974 + t2796 * t2982 + t2879 * t2826) * t2945) / (t3024 + t2990 / 0.2e1 - 0.2e1 * t2971 + 0.2e1 * t2882 + t2907) * t2938 * t3074 - (t2628 * t3084 + (t2796 * t3058 - t2859 * t2794 + (-t2742 * t2795 - t2826 * t2767) * t3043) * t2643 + (-0.2e1 * t3026 + (-t2804 + t2832) * t2959 + t2887) * t2945) / (0.4e1 * t2882 + t2908 - 0.4e1 * t2971 + t2990 + 0.2e1 * t3024) * t2643;
t2710 = 0.1e1 / t2717 ^ 2;
t2625 = (-t2628 + t2966) * t2710 * t3032;
t2640 = t2643 ^ 2;
t2917 = t2826 * t2945;
t2935 = t2862 * MDP(4) + MDP(1);
t2944 = t2832 * t3032;
t3057 = 0.2e1 * t2742;
t2975 = t2832 * t3057;
t2994 = t2826 * t2832;
t3015 = t2741 * t2832;
t3018 = t2741 * t2826;
t3037 = t2640 * t2832;
t3040 = t2614 * t2832;
t3059 = 0.2e1 * t2643;
t3067 = (t2614 * t3018 - t2625 * t2975 + (t2643 * t3015 / 0.2e1 + t2742 * t2917) * t3059) * MDP(10) + (t2614 * t3015 + 0.2e1 * t2625 * t2995 + (t2709 * t2742 * t2944 - t2643 * t3018 / 0.2e1) * t3059) * MDP(11) - (t2614 * t2826 + t3037) * MDP(7) - (-t2640 * t2826 + t3040) * MDP(8) - (MDP(5) * t2826 ^ 2 + t2994 * t3083 + t2935) * t2625;
t3080 = -t2709 * t3067 / 0.2e1;
t2830 = cos(qJ(3,2));
t2775 = t2830 * pkin(3);
t2752 = t2775 + pkin(2);
t2716 = t2767 + t2752;
t2706 = 0.1e1 / t2716;
t2824 = sin(qJ(3,2));
t2683 = t2752 * t2817 + t2731;
t2687 = t2752 * t2816 + t2744;
t2820 = legFrame(2,2);
t2769 = sin(t2820);
t2772 = cos(t2820);
t2998 = t2824 * t2742;
t2809 = 0.1e1 / t2824;
t3022 = t2706 * t2809;
t2853 = 0.2e1 * qJ(3,2);
t2793 = sin(t2853);
t3053 = pkin(3) * t2793;
t2642 = (t2836 * (t2683 * t2825 + t2687 * t2831) / (t3053 / 0.2e1 + t2998) + (t2769 * t2837 - t2772 * t2838) * (t2683 * t2831 - t2687 * t2825) * t3022) * t2860;
t3047 = t2642 * pkin(3);
t2967 = t2824 * t3047;
t2786 = qJ(1,2) + pkin(7);
t2737 = t2820 + t2786;
t2738 = -t2820 + t2786;
t2691 = -sin(t2737) - sin(t2738);
t2694 = cos(t2738) - cos(t2737);
t2761 = cos(t2786);
t2661 = t2691 * t2838 + t2694 * t2837 + t2761 * t3056;
t3073 = t2661 * t2706;
t2629 = t2906 * t3073 - t2967;
t2751 = t2775 + t2857;
t2851 = 0.4e1 * qJ(3,2);
t2791 = sin(t2851);
t2852 = 0.3e1 * qJ(3,2);
t2792 = sin(t2852);
t2801 = cos(t2852);
t2883 = pkin(3) * (-pkin(2) * t2830 + t2742 * t2801);
t3031 = t2661 / 0.2e1;
t2943 = t2706 * t3031;
t2972 = t2751 * t2767;
t2991 = t2859 * cos(t2851);
t2802 = cos(t2853);
t3025 = t2696 * t2802;
t3027 = t2680 * t2802;
t2613 = ((t2801 * t2978 + (t2734 * t2751 + t2928 - t3027) * t3044) * t2642 + (-t2791 * t2858 + t2792 * t2974 + t2793 * t2982 + t2879 * t2824) * t2943) / (t3025 + t2991 / 0.2e1 - 0.2e1 * t2972 + 0.2e1 * t2883 + t2907) * t2938 * t3073 - (t2629 * t3084 + (t2793 * t3058 - t2859 * t2791 + (-t2742 * t2792 - t2824 * t2767) * t3043) * t2642 + (-0.2e1 * t3027 + (-t2801 + t2830) * t2959 + t2887) * t2943) / (0.4e1 * t2883 + t2908 - 0.4e1 * t2972 + t2991 + 0.2e1 * t3025) * t2642;
t2707 = 0.1e1 / t2716 ^ 2;
t2626 = (-t2629 + t2967) * t2707 * t3031;
t2639 = t2642 ^ 2;
t2916 = t2824 * t2943;
t2942 = t2830 * t3031;
t2976 = t2830 * t3057;
t2997 = t2824 * t2830;
t3016 = t2741 * t2830;
t3019 = t2741 * t2824;
t3038 = t2639 * t2830;
t3041 = t2613 * t2830;
t3060 = 0.2e1 * t2642;
t3066 = (t2613 * t3019 - t2626 * t2976 + (t2642 * t3016 / 0.2e1 + t2742 * t2916) * t3060) * MDP(10) + (t2613 * t3016 + 0.2e1 * t2626 * t2998 + (t2706 * t2742 * t2942 - t2642 * t3019 / 0.2e1) * t3060) * MDP(11) - (t2613 * t2824 + t3038) * MDP(7) - (-t2639 * t2824 + t3041) * MDP(8) - (MDP(5) * t2824 ^ 2 + t2997 * t3083 + t2935) * t2626;
t3079 = -t2706 * t3066 / 0.2e1;
t3048 = t2641 * pkin(3);
t2968 = t2822 * t3048;
t2785 = qJ(1,3) + pkin(7);
t2735 = t2819 + t2785;
t2736 = -t2819 + t2785;
t2690 = -sin(t2735) - sin(t2736);
t2693 = cos(t2736) - cos(t2735);
t2760 = cos(t2785);
t2659 = t2690 * t2838 + t2693 * t2837 + t2760 * t3056;
t3075 = t2659 * t2703;
t2627 = t2906 * t3075 - t2968;
t3033 = t2659 / 0.2e1;
t2653 = t2703 * t3033;
t2636 = t2653 - t3085;
t2637 = t2653 + t3085;
t2779 = pkin(7) + qJ(3,3);
t2746 = 0.2e1 * t2779;
t2780 = -pkin(7) + qJ(3,3);
t2747 = 0.2e1 * t2780;
t2749 = t2774 + t2857;
t2756 = sin(t2779);
t2757 = sin(t2780);
t2849 = 0.3e1 * qJ(3,3);
t2781 = t2849 + pkin(7);
t2782 = t2849 - pkin(7);
t2783 = t2850 + pkin(7);
t2784 = t2850 - pkin(7);
t2848 = 0.4e1 * qJ(3,3);
t2788 = sin(t2848);
t2789 = sin(t2849);
t2798 = cos(t2849);
t2799 = cos(t2850);
t2936 = pkin(3) * (t2798 - t2828);
t2937 = cos(t2783) + cos(t2784) - 0.2e1 * t2817;
t2992 = t2859 * cos(t2848);
t2608 = ((t2798 * t2978 + (-t2680 * t2799 + t2734 * t2749 + t2928) * t3044) * t2641 + (-t2788 * t2858 + t2789 * t2974 + t2790 * t2982 + t2879 * t2822) * t2653) / (t2696 * t2799 + t2992 / 0.2e1 - 0.2e1 * t2749 * t2767 + (-pkin(2) * t2828 + t2742 * t2798) * t3044 + t2907) * t2938 * t3075 - (t2627 * t3084 + ((-t2641 + t2653) * sin(t2747) - (t2641 + t2653) * sin(t2746)) * t2862 + (-0.2e1 * (t2859 + t2987) * t2790 + pkin(2) * t2789 * t3063 - t2859 * t2788) * t2641 + (t2973 + (t2799 * t3084 + 0.2e1 * t2936) * t2839) * t2653 + (((-sin(t2781) - t2757) * t2637 + (sin(t2782) + t2756) * t2636) * pkin(3) + (-sin(t2783) * t2637 + sin(t2784) * t2636) * t2857 + t2937 * t2653 * t3055) * pkin(1)) / ((t2845 + 0.4e1 * t2861) * t2799 + t2992 + (cos(t2747) + cos(t2746)) * t2862 + t2936 * t3084 + (t2937 * t3084 + (cos(t2782) + cos(t2781) - cos(t2780) - cos(t2779)) * t3044) * pkin(1) + t2908) * t2641;
t2704 = 0.1e1 / t2715 ^ 2;
t2946 = t2704 * t3033;
t2624 = (-t2627 + t2968) * t2946;
t2638 = t2641 ^ 2;
t2918 = t2822 * t2653;
t3014 = t2742 * t2828;
t2977 = 0.2e1 * t3014;
t3000 = t2822 * t2828;
t3017 = t2741 * t2828;
t3020 = t2741 * t2822;
t3039 = t2638 * t2828;
t3042 = t2608 * t2828;
t3068 = (t2608 * t3020 - t2624 * t2977 + (t2641 * t3017 / 0.2e1 + t2742 * t2918) * t3085) * MDP(10) + (t2608 * t3017 + 0.2e1 * t2624 * t3001 + (t2653 * t3014 - t2641 * t3020 / 0.2e1) * t3085) * MDP(11) - (t2608 * t2822 + t3039) * MDP(7) - (-t2638 * t2822 + t3042) * MDP(8) - (MDP(5) * t2822 ^ 2 + t3000 * t3083 + t2935) * t2624;
t3078 = -t2703 * t3068 / 0.2e1;
t3077 = t3083 / 0.4e1;
t2981 = 0.2e1 * MDP(5);
t3076 = t2981 / 0.4e1;
t3036 = t2659 ^ 2 * t2704;
t3035 = t2660 ^ 2 * t2710;
t3034 = t2661 ^ 2 * t2707;
t3013 = t2750 * t2829;
t2663 = (-t2999 + t3013) * t2817 + t2700 - t2750 * t3004;
t3072 = t2663 * t2703;
t3012 = t2752 * t2831;
t2665 = (-t2996 + t3012) * t2817 + t2701 - t2752 * t3003;
t3071 = t2665 * t2706;
t3011 = t2754 * t2833;
t2667 = (-t2993 + t3011) * t2817 + t2702 - t2754 * t3002;
t3070 = t2667 * t2709;
t3065 = 0.2e1 * pkin(1);
t2812 = t2828 ^ 2;
t2763 = 0.2e1 * t2812 - 0.1e1;
t2813 = t2830 ^ 2;
t2764 = 0.2e1 * t2813 - 0.1e1;
t2814 = t2832 ^ 2;
t2765 = 0.2e1 * t2814 - 0.1e1;
t3051 = pkin(3) * t2822;
t3050 = pkin(3) * t2824;
t3049 = pkin(3) * t2826;
t3030 = (t2760 * t3055 + sin(t2785) * t2857 + t2823 * t3065 + (sin(qJ(1,3) - t2780) + sin(qJ(1,3) + t2779)) * pkin(3)) / (t2822 * t2857 + t3054 + (t2756 + t2757) * pkin(1));
t2983 = pkin(7) + qJ(3,2);
t2985 = -pkin(7) + qJ(3,2);
t3029 = (t2761 * t3055 + sin(t2786) * t2857 + t2825 * t3065 + (sin(qJ(1,2) - t2985) + sin(qJ(1,2) + t2983)) * pkin(3)) / (t2824 * t2857 + t3053 + (sin(t2983) + sin(t2985)) * pkin(1));
t2984 = pkin(7) + qJ(3,1);
t2986 = -pkin(7) + qJ(3,1);
t3028 = (t2762 * t3055 + sin(t2787) * t2857 + t2827 * t3065 + (sin(qJ(1,1) - t2986) + sin(qJ(1,1) + t2984)) * pkin(3)) / (t2826 * t2857 + t3052 + (sin(t2984) + sin(t2986)) * pkin(1));
t3010 = t2807 * t2812;
t3009 = t2807 * t2828;
t3008 = t2809 * t2813;
t3007 = t2809 * t2830;
t3006 = t2811 * t2814;
t3005 = t2811 * t2832;
t2965 = pkin(3) * (-t2817 * t2829 + t3004) * t2812;
t2964 = pkin(3) * (-t2817 * t2831 + t3003) * t2813;
t2963 = pkin(3) * (-t2817 * t2833 + t3002) * t2814;
t2681 = t2732 + t2861 + 0.2e1 * t2979 + t2988;
t2621 = (t2828 * (-t2734 * t2968 + (pkin(3) * t2977 + t2812 * t2859 + t2681) * t2653) * t2946 - ((t2734 * t2918 - t3048) * t2828 - t2641 * t2742) * t2703 * t3048) * t2807;
t2962 = t2621 * t2807 * MDP(4);
t2622 = ((-t2734 * t2967 + (pkin(3) * t2976 + t2813 * t2859 + t2681) * t2943) * t2707 * t2942 - ((t2734 * t2916 - t3047) * t2830 - t2642 * t2742) * t2706 * t3047) * t2809;
t2961 = t2622 * t2809 * MDP(4);
t2623 = ((-t2734 * t2966 + (pkin(3) * t2975 + t2814 * t2859 + t2681) * t2945) * t2710 * t2944 - ((t2734 * t2917 - t3046) * t2832 - t2643 * t2742) * t2709 * t3046) * t2811;
t2960 = t2623 * t2811 * MDP(4);
t2958 = t2624 * t3072;
t2957 = t2624 * t3030;
t2956 = t2625 * t3070;
t2955 = t2625 * t3028;
t2954 = t2626 * t3071;
t2953 = t2626 * t3029;
t2952 = t2641 * t2659 * t2704;
t2951 = t2642 * t2661 * t2707;
t2950 = t2643 * t2660 * t2710;
t2949 = t3072 * t3036;
t2948 = t3070 * t3035;
t2947 = t3071 * t3034;
t2941 = t2663 * t3023;
t2940 = t2665 * t3022;
t2939 = t2667 * t3021;
t2927 = t2763 * t2952;
t2926 = t2764 * t2951;
t2925 = t2765 * t2950;
t2924 = t2828 * t2949;
t2923 = t3030 * t3036;
t2922 = t2832 * t2948;
t2921 = t3028 * t3035;
t2920 = t2830 * t2947;
t2919 = t3029 * t3034;
t2915 = t2768 * t2941;
t2914 = t2771 * t2941;
t2913 = t2769 * t2940;
t2912 = t2772 * t2940;
t2911 = t2770 * t2939;
t2910 = t2773 * t2939;
t2905 = t2624 * t2828 * t2941;
t2904 = t2625 * t2832 * t2939;
t2903 = t2626 * t2830 * t2940;
t2902 = t2952 * t3000;
t2901 = t2951 * t2997;
t2900 = t2950 * t2994;
t2899 = t2807 * t2924;
t2898 = t2828 * t2923;
t2897 = t2811 * t2922;
t2896 = t2832 * t2921;
t2895 = t2809 * t2920;
t2894 = t2830 * t2919;
t2875 = t2703 * (t2962 + (t2608 * t3009 - t2638) * MDP(10) + (-t2638 * t3009 - t2608) * MDP(11));
t2874 = t2706 * (t2961 + (t2613 * t3007 - t2639) * MDP(10) + (-t2639 * t3007 - t2613) * MDP(11));
t2873 = t2709 * (t2960 + (t2614 * t3005 - t2640) * MDP(10) + (-t2640 * t3005 - t2614) * MDP(11));
t2646 = -t2765 * t3035 / 0.4e1;
t2645 = -t2764 * t3034 / 0.4e1;
t2644 = -t2763 * t3036 / 0.4e1;
t2620 = -t2622 * t2824 - t2626 * t3016;
t2619 = t2622 * t2830 - t2626 * t3019;
t2618 = -t2623 * t2826 - t2625 * t3015;
t2617 = t2623 * t2832 - t2625 * t3018;
t2616 = -t2621 * t2822 - t2624 * t3017;
t2615 = t2621 * t2828 - t2624 * t3020;
t1 = [(-t2773 * t2963 + (t2770 * t3049 + t3086 * t2773) * t2832 + t2770 * t2995) * t2873 + (-t2772 * t2964 + (t2769 * t3050 + t3087 * t2772) * t2830 + t2769 * t2998) * t2874 + (-t2771 * t2965 + (t2768 * t3051 + t3088 * t2771) * t2828 + t2768 * t3001) * t2875 + (t2690 * t2902 + t2691 * t2901 + t2692 * t2900) * t3076 + (t2690 * t2927 + t2691 * t2926 + t2692 * t2925) * t3077 + ((-t2644 * t2914 - t2645 * t2912 - t2646 * t2910) * MDP(6) + (-t2771 * t2958 - t2772 * t2954 - t2773 * t2956) * MDP(7) + (-t2771 * t2905 - t2772 * t2903 - t2773 * t2904) * MDP(8) + (-t2608 * t2914 - t2613 * t2912 - t2614 * t2910) * MDP(9) + (-t2615 * t2914 - t2617 * t2910 - t2619 * t2912) * MDP(10) + (-t2616 * t2914 - t2618 * t2910 - t2620 * t2912) * MDP(11) + (t2771 * t2924 + t2772 * t2920 + t2773 * t2922) * t3082 + ((-t2771 * t2949 - t2772 * t2947 - t2773 * t2948) * MDP(10) + (-t2771 * t2899 - t2772 * t2895 - t2773 * t2897) * MDP(11)) * t3081) * t2860 + t2690 * t3078 + t2691 * t3079 + t2692 * t3080; (t2770 * t2963 + (-t3086 * t2770 + t2773 * t3049) * t2832 + t2773 * t2995) * t2873 + (t2769 * t2964 + (-t3087 * t2769 + t2772 * t3050) * t2830 + t2772 * t2998) * t2874 + (t2768 * t2965 + (-t3088 * t2768 + t2771 * t3051) * t2828 + t2771 * t3001) * t2875 + (t2693 * t2902 + t2694 * t2901 + t2695 * t2900) * t3076 + (t2693 * t2927 + t2694 * t2926 + t2695 * t2925) * t3077 + ((t2644 * t2915 + t2645 * t2913 + t2646 * t2911) * MDP(6) + (t2768 * t2958 + t2769 * t2954 + t2770 * t2956) * MDP(7) + (t2768 * t2905 + t2769 * t2903 + t2770 * t2904) * MDP(8) + (t2608 * t2915 + t2613 * t2913 + t2614 * t2911) * MDP(9) + (t2615 * t2915 + t2617 * t2911 + t2619 * t2913) * MDP(10) + (t2616 * t2915 + t2618 * t2911 + t2620 * t2913) * MDP(11) + (-t2768 * t2924 - t2769 * t2920 - t2770 * t2922) * t3082 + ((t2768 * t2949 + t2769 * t2947 + t2770 * t2948) * MDP(10) + (t2768 * t2899 + t2769 * t2895 + t2770 * t2897) * MDP(11)) * t3081) * t2860 + t2693 * t3078 + t2694 * t3079 + t2695 * t3080; (-t2760 * t2902 - t2761 * t2901 - t2762 * t2900) * t2981 / 0.2e1 + (-t2760 * t2927 - t2761 * t2926 - t2762 * t2925) * t3083 / 0.2e1 + ((-t2832 * t2960 + (-t2614 * t3006 + t3037) * MDP(10) + (t2640 * t3006 + t3040) * MDP(11)) * ((t2754 * t2827 + t2833 * t2839) * t2817 + t2731 * t2827 + t2816 * t3011) + t3067 * t2762) * t2709 + ((-t2830 * t2961 + (-t2613 * t3008 + t3038) * MDP(10) + (t2639 * t3008 + t3041) * MDP(11)) * ((t2752 * t2825 + t2831 * t2839) * t2817 + t2731 * t2825 + t2816 * t3012) + t3066 * t2761) * t2706 + ((-t2828 * t2962 + (-t2608 * t3010 + t3039) * MDP(10) + (t2638 * t3010 + t3042) * MDP(11)) * ((t2750 * t2823 + t2829 * t2839) * t2817 + t2731 * t2823 + t2816 * t3013) + t3068 * t2760) * t2703 + ((t2644 * t3030 + t2645 * t3029 + t2646 * t3028) * MDP(6) + (t2822 * t2957 + t2824 * t2953 + t2826 * t2955) * MDP(7) + (t2828 * t2957 + t2830 * t2953 + t2832 * t2955) * MDP(8) + (t2608 * t3030 + t2613 * t3029 + t2614 * t3028) * MDP(9) + (t2615 * t3030 + t2617 * t3028 + t2619 * t3029) * MDP(10) + (t2616 * t3030 + t2618 * t3028 + t2620 * t3029) * MDP(11) + (-t2822 * t2898 - t2824 * t2894 - t2826 * t2896) * t3082 + ((t2822 * t2923 + t2824 * t2919 + t2826 * t2921) * MDP(10) + (t2894 + t2896 + t2898) * MDP(11)) * t3081) * t2860;];
taucX  = t1;
