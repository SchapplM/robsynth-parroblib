% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR6V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:43
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR6V1G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR6V1G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR6V1G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR6V1G3A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR6V1G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR6V1G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:42:14
% EndTime: 2020-08-06 18:42:21
% DurationCPUTime: 6.36s
% Computational Cost: add. (8187->389), mult. (9615->820), div. (1260->20), fcn. (8127->53), ass. (0->397)
t664 = sin(pkin(7));
t683 = -pkin(6) - pkin(5);
t620 = t683 * t664 - pkin(1);
t676 = cos(qJ(1,3));
t605 = t620 * t676;
t665 = cos(pkin(7));
t670 = sin(qJ(1,3));
t821 = t670 * t683;
t822 = t670 * t664;
t942 = t605 + pkin(2) * t822 - (pkin(2) * t676 - t821) * t665;
t678 = cos(qJ(1,2));
t606 = t620 * t678;
t672 = sin(qJ(1,2));
t819 = t672 * t683;
t820 = t672 * t664;
t941 = t606 + pkin(2) * t820 - (pkin(2) * t678 - t819) * t665;
t680 = cos(qJ(1,1));
t607 = t620 * t680;
t674 = sin(qJ(1,1));
t817 = t674 * t683;
t818 = t674 * t664;
t940 = t607 + pkin(2) * t818 - (pkin(2) * t680 - t817) * t665;
t675 = cos(qJ(3,3));
t630 = t675 * pkin(3) + pkin(2);
t639 = t665 * pkin(1);
t617 = t639 + t630;
t608 = 0.1e1 / t617;
t939 = t608 / 0.2e1;
t609 = 0.1e1 / t617 ^ 2;
t930 = t609 / 0.4e1;
t677 = cos(qJ(3,2));
t631 = t677 * pkin(3) + pkin(2);
t618 = t639 + t631;
t610 = 0.1e1 / t618;
t938 = t610 / 0.2e1;
t611 = 0.1e1 / t618 ^ 2;
t929 = t611 / 0.4e1;
t679 = cos(qJ(3,1));
t632 = t679 * pkin(3) + pkin(2);
t619 = t639 + t632;
t612 = 0.1e1 / t619;
t937 = t612 / 0.2e1;
t613 = 0.1e1 / t619 ^ 2;
t928 = t613 / 0.4e1;
t649 = qJ(1,3) + pkin(7);
t636 = cos(t649);
t936 = -t636 / 0.2e1;
t650 = qJ(1,2) + pkin(7);
t637 = cos(t650);
t935 = -t637 / 0.2e1;
t651 = qJ(1,1) + pkin(7);
t638 = cos(t651);
t934 = -t638 / 0.2e1;
t673 = sin(qJ(3,1));
t844 = t613 * t679;
t748 = t673 * t844;
t933 = t748 / 0.2e1;
t671 = sin(qJ(3,2));
t853 = t611 * t677;
t753 = t671 * t853;
t932 = t753 / 0.2e1;
t669 = sin(qJ(3,3));
t862 = t609 * t675;
t758 = t669 * t862;
t931 = t758 / 0.2e1;
t812 = pkin(7) + qJ(3,1);
t815 = -pkin(7) + qJ(3,1);
t895 = 0.2e1 * t683;
t899 = 0.2e1 * pkin(2);
t900 = 0.2e1 * pkin(1);
t583 = t638 * t895 + sin(t651) * t899 + t674 * t900 + (sin(qJ(1,1) - t815) + sin(qJ(1,1) + t812)) * pkin(3);
t896 = 0.2e1 * t673;
t589 = pkin(3) * sin(0.2e1 * qJ(3,1)) + pkin(2) * t896 + (sin(t812) + sin(t815)) * pkin(1);
t877 = t583 / t589;
t766 = t679 * t877;
t715 = t612 * t766;
t927 = t715 / 0.2e1;
t767 = t612 * t877;
t716 = t673 * t767;
t926 = t716 / 0.2e1;
t811 = pkin(7) + qJ(3,2);
t814 = -pkin(7) + qJ(3,2);
t582 = t637 * t895 + sin(t650) * t899 + t672 * t900 + (sin(qJ(1,2) - t814) + sin(qJ(1,2) + t811)) * pkin(3);
t897 = 0.2e1 * t671;
t588 = pkin(3) * sin(0.2e1 * qJ(3,2)) + pkin(2) * t897 + (sin(t811) + sin(t814)) * pkin(1);
t878 = t582 / t588;
t768 = t677 * t878;
t718 = t610 * t768;
t925 = t718 / 0.2e1;
t769 = t610 * t878;
t719 = t671 * t769;
t924 = t719 / 0.2e1;
t810 = pkin(7) + qJ(3,3);
t813 = -pkin(7) + qJ(3,3);
t581 = t636 * t895 + sin(t649) * t899 + t670 * t900 + (sin(qJ(1,3) - t813) + sin(qJ(1,3) + t810)) * pkin(3);
t898 = 0.2e1 * t669;
t587 = pkin(3) * sin(0.2e1 * qJ(3,3)) + pkin(2) * t898 + (sin(t810) + sin(t813)) * pkin(1);
t879 = t581 / t587;
t770 = t675 * t879;
t721 = t608 * t770;
t923 = t721 / 0.2e1;
t771 = t608 * t879;
t722 = t669 * t771;
t922 = t722 / 0.2e1;
t658 = t673 ^ 2;
t846 = t613 * t658;
t921 = t846 * t934;
t655 = t671 ^ 2;
t855 = t611 * t655;
t920 = t855 * t935;
t652 = t669 ^ 2;
t864 = t609 * t652;
t919 = t864 * t936;
t668 = legFrame(1,2);
t626 = t668 + t651;
t627 = -t668 + t651;
t598 = -sin(t626) - sin(t627);
t601 = cos(t627) - cos(t626);
t901 = t598 * t601;
t918 = t901 * t928;
t667 = legFrame(2,2);
t624 = t667 + t650;
t625 = -t667 + t650;
t597 = -sin(t624) - sin(t625);
t600 = cos(t625) - cos(t624);
t902 = t597 * t600;
t917 = t902 * t929;
t666 = legFrame(3,2);
t622 = t666 + t649;
t623 = -t666 + t649;
t596 = -sin(t622) - sin(t623);
t599 = cos(t623) - cos(t622);
t903 = t596 * t599;
t916 = t903 * t930;
t915 = t846 / 0.4e1;
t914 = t613 * t934;
t913 = t855 / 0.4e1;
t912 = t611 * t935;
t911 = t864 / 0.4e1;
t910 = t609 * t936;
t909 = t601 * t937;
t908 = t600 * t938;
t907 = t599 * t939;
t906 = t598 * t937;
t905 = t597 * t938;
t904 = t596 * t939;
t629 = t639 + pkin(2);
t643 = cos(t666);
t661 = t675 ^ 2;
t804 = pkin(3) * (-t676 * t665 + t822) * t661;
t640 = sin(t666);
t831 = t640 * t669;
t563 = -t643 * t804 + (pkin(3) * t831 - t942 * t643) * t675 + t629 * t831;
t628 = t664 * pkin(1) + pkin(5);
t840 = t628 / 0.2e1;
t744 = t675 * t840;
t530 = (-t596 * t744 - t563) * t608;
t894 = t530 * t608;
t644 = cos(t667);
t662 = t677 ^ 2;
t803 = pkin(3) * (-t678 * t665 + t820) * t662;
t641 = sin(t667);
t830 = t641 * t671;
t564 = -t644 * t803 + (pkin(3) * t830 - t941 * t644) * t677 + t629 * t830;
t743 = t677 * t840;
t531 = (-t597 * t743 - t564) * t610;
t893 = t531 * t610;
t645 = cos(t668);
t663 = t679 ^ 2;
t802 = pkin(3) * (-t680 * t665 + t818) * t663;
t642 = sin(t668);
t829 = t642 * t673;
t565 = -t645 * t802 + (pkin(3) * t829 - t645 * t940) * t679 + t629 * t829;
t742 = t679 * t840;
t532 = (-t598 * t742 - t565) * t612;
t892 = t532 * t612;
t828 = t643 * t669;
t560 = t640 * t804 + (pkin(3) * t828 + t942 * t640) * t675 + t629 * t828;
t533 = (-t599 * t744 - t560) * t608;
t891 = t533 * t608;
t827 = t644 * t671;
t561 = t641 * t803 + (pkin(3) * t827 + t941 * t641) * t677 + t629 * t827;
t534 = (-t600 * t743 - t561) * t610;
t890 = t534 * t610;
t826 = t645 * t673;
t562 = t642 * t802 + (pkin(3) * t826 + t642 * t940) * t679 + t629 * t826;
t535 = (-t601 * t742 - t562) * t612;
t889 = t535 * t612;
t837 = t630 * t676;
t576 = (-t821 + t837) * t665 - t605 - t630 * t822;
t888 = t576 * t640;
t887 = t576 * t643;
t653 = 0.1e1 / t669;
t886 = t576 * t653;
t836 = t631 * t678;
t578 = (-t819 + t836) * t665 - t606 - t631 * t820;
t885 = t578 * t641;
t884 = t578 * t644;
t656 = 0.1e1 / t671;
t883 = t578 * t656;
t835 = t632 * t680;
t580 = (-t817 + t835) * t665 - t607 - t632 * t818;
t882 = t580 * t642;
t881 = t580 * t645;
t659 = 0.1e1 / t673;
t880 = t580 * t659;
t870 = t608 * t636;
t869 = t608 * t653;
t868 = t608 * t675;
t866 = t609 * t640;
t865 = t609 * t643;
t654 = 0.1e1 / t669 ^ 2;
t863 = t609 * t654;
t861 = t610 * t637;
t860 = t610 * t656;
t859 = t610 * t677;
t857 = t611 * t641;
t856 = t611 * t644;
t657 = 0.1e1 / t671 ^ 2;
t854 = t611 * t657;
t852 = t612 * t638;
t851 = t612 * t659;
t850 = t612 * t679;
t848 = t613 * t642;
t847 = t613 * t645;
t660 = 0.1e1 / t673 ^ 2;
t845 = t613 * t660;
t843 = t628 * t636;
t842 = t628 * t637;
t841 = t628 * t638;
t684 = 0.1e1 / pkin(3);
t839 = t628 * t684;
t838 = t629 / 0.2e1;
t633 = t636 ^ 2;
t834 = t633 * t609;
t634 = t637 ^ 2;
t833 = t634 * t611;
t635 = t638 ^ 2;
t832 = t635 * t613;
t825 = t653 * t675;
t824 = t656 * t677;
t823 = t659 * t679;
t816 = t684 / 0.2e1;
t807 = 0.2e1 * t684;
t806 = -0.2e1 * t838;
t805 = 0.2e1 * t838;
t747 = t669 * t840;
t523 = (t563 * t825 - t596 * t747) * t608;
t801 = t523 * t869;
t746 = t671 * t840;
t524 = (t564 * t824 - t597 * t746) * t610;
t800 = t524 * t860;
t745 = t673 * t840;
t525 = (t565 * t823 - t598 * t745) * t612;
t799 = t525 * t851;
t526 = (t560 * t825 - t599 * t747) * t608;
t798 = t526 * t869;
t527 = (t561 * t824 - t600 * t746) * t610;
t797 = t527 * t860;
t528 = (t562 * t823 - t601 * t745) * t612;
t796 = t528 * t851;
t795 = t576 ^ 2 * t863;
t794 = t578 ^ 2 * t854;
t793 = t580 ^ 2 * t845;
t575 = (t630 * t670 + t676 * t683) * t665 - t620 * t670 + t664 * t837;
t792 = t575 * t653 * t661;
t791 = t576 * t866;
t790 = t576 * t865;
t789 = t576 * t839;
t788 = t640 * t886;
t787 = t643 * t886;
t786 = t576 * t825;
t577 = (t631 * t672 + t678 * t683) * t665 - t620 * t672 + t664 * t836;
t785 = t577 * t656 * t662;
t784 = t578 * t857;
t783 = t578 * t856;
t782 = t578 * t839;
t781 = t641 * t883;
t780 = t644 * t883;
t779 = t578 * t824;
t579 = (t632 * t674 + t680 * t683) * t665 - t620 * t674 + t664 * t835;
t778 = t579 * t659 * t663;
t777 = t580 * t848;
t776 = t580 * t847;
t775 = t580 * t839;
t774 = t642 * t880;
t773 = t645 * t880;
t772 = t580 * t823;
t762 = t629 * t870;
t760 = t661 * t863;
t759 = t654 * t862;
t757 = t629 * t861;
t755 = t662 * t854;
t754 = t657 * t853;
t752 = t629 * t852;
t750 = t663 * t845;
t749 = t660 * t844;
t741 = t807 / 0.2e1;
t740 = t669 * t806;
t739 = t671 * t806;
t738 = t673 * t806;
t737 = t675 * t805;
t736 = t677 * t805;
t735 = t679 * t805;
t734 = t560 * t759;
t733 = t561 * t754;
t732 = t562 * t749;
t731 = t563 * t759;
t730 = t564 * t754;
t729 = t565 * t749;
t728 = t575 * t759;
t727 = t609 * t786;
t726 = t577 * t754;
t725 = t611 * t779;
t724 = t579 * t749;
t723 = t613 * t772;
t720 = t839 * t879;
t717 = t839 * t878;
t714 = t839 * t877;
t713 = t636 * t758;
t712 = t637 * t753;
t711 = t638 * t748;
t710 = t575 * t576 * t760;
t709 = t771 * t886;
t708 = t640 * t727;
t707 = t643 * t727;
t706 = t786 * t839;
t705 = t577 * t578 * t755;
t704 = t769 * t883;
t703 = t641 * t725;
t702 = t644 * t725;
t701 = t779 * t839;
t700 = t579 * t580 * t750;
t699 = t767 * t880;
t698 = t642 * t723;
t697 = t645 * t723;
t696 = t772 * t839;
t692 = (t596 * t640 - t599 * t643) * t609 * t576;
t691 = (t597 * t641 - t600 * t644) * t611 * t578;
t690 = (t598 * t642 - t601 * t645) * t613 * t580;
t689 = t832 + t833 + t834;
t590 = t596 ^ 2;
t591 = t597 ^ 2;
t592 = t598 ^ 2;
t688 = t590 * t930 + t591 * t929 + t592 * t928;
t593 = t599 ^ 2;
t594 = t600 ^ 2;
t595 = t601 ^ 2;
t687 = t593 * t930 + t594 * t929 + t595 * t928;
t529 = t918 + t917 + t916;
t552 = t596 * t910 + t597 * t912 + t598 * t914;
t553 = t599 * t910 + t600 * t912 + t601 * t914;
t686 = pkin(1) ^ 2;
t685 = 0.1e1 / pkin(3) ^ 2;
t571 = (t579 + t841) * t850;
t570 = (t577 + t842) * t859;
t569 = (t575 + t843) * t868;
t568 = (t673 * t841 - t778) * t612;
t567 = (t671 * t842 - t785) * t610;
t566 = (t669 * t843 - t792) * t608;
t559 = -t669 * t720 - 0.2e1 * t675 * t762;
t558 = -t673 * t714 - 0.2e1 * t679 * t752;
t557 = -t671 * t717 - 0.2e1 * t677 * t757;
t556 = -t679 * t714 + t752 * t896;
t555 = -t677 * t717 + t757 * t897;
t554 = -t675 * t720 + t762 * t898;
t551 = (t599 * t737 - t640 * t789) * t608;
t550 = (t596 * t737 + t643 * t789) * t608;
t549 = (t601 * t735 - t642 * t775) * t612;
t548 = (t600 * t736 - t641 * t782) * t610;
t547 = (t598 * t735 + t645 * t775) * t612;
t546 = (t597 * t736 + t644 * t782) * t610;
t545 = (t598 * t738 + t645 * t696) * t612;
t544 = (t601 * t738 - t642 * t696) * t612;
t543 = (t597 * t739 + t644 * t701) * t610;
t542 = (t600 * t739 - t641 * t701) * t610;
t541 = (t596 * t740 + t643 * t706) * t608;
t540 = (t599 * t740 - t640 * t706) * t608;
t539 = t599 * t919 + t600 * t920 + t601 * t921;
t538 = t596 * t919 + t597 * t920 + t598 * t921;
t537 = -t599 * t713 - t600 * t712 - t601 * t711;
t536 = -t596 * t713 - t597 * t712 - t598 * t711;
t522 = t652 * t916 + t655 * t917 + t658 * t918;
t521 = t901 * t933 + t902 * t932 + t903 * t931;
t520 = (-t640 * t643 * t795 - t641 * t644 * t794 - t642 * t645 * t793) * t685;
t519 = (-t643 * t709 - t644 * t704 - t645 * t699) * t685;
t518 = (t640 * t709 + t641 * t704 + t642 * t699) * t685;
t517 = (t690 + t691 + t692) * t816;
t516 = (t599 * t922 + t600 * t924 + t601 * t926 - t636 * t791 - t637 * t784 - t638 * t777) * t684;
t515 = (t596 * t922 + t597 * t924 + t598 * t926 + t636 * t790 + t637 * t783 + t638 * t776) * t684;
t514 = (t599 * t923 + t600 * t925 + t601 * t927 - t636 * t708 - t637 * t703 - t638 * t698) * t684;
t513 = (t596 * t923 + t597 * t925 + t598 * t927 + t636 * t707 + t637 * t702 + t638 * t697) * t684;
t512 = (t690 * t823 + t691 * t824 + t692 * t825) * t816;
t511 = t686 * t553 - t560 * t728 - t561 * t726 - t562 * t724;
t510 = t686 * t552 - t563 * t728 - t564 * t726 - t565 * t724;
t509 = t563 * t560 * t863 + t564 * t561 * t854 + t565 * t562 * t845 + t686 * t529;
t1 = [t688, 0, 0, t563 ^ 2 * t863 + t564 ^ 2 * t854 + t565 ^ 2 * t845 + t686 * t688, t590 * t911 + t591 * t913 + t592 * t915, t590 * t931 + t591 * t932 + t592 * t933, (-t596 * t790 - t597 * t783 - t598 * t776) * t741, (-t596 * t707 - t597 * t702 - t598 * t697) * t741, (t643 ^ 2 * t795 + t644 ^ 2 * t794 + t645 ^ 2 * t793) * t685, t546 * t905 + t547 * t906 + t550 * t904 + ((-t729 - t799) * t881 + (-t730 - t800) * t884 + (-t731 - t801) * t887) * t684, t541 * t904 + t543 * t905 + t545 * t906 + ((t565 * t613 - t892) * t773 + (t564 * t611 - t893) * t780 + (t563 * t609 - t894) * t787) * t684, 1; t529, 0, 0, t509, t522, t521, t517, t512, t520, t548 * t905 + t549 * t906 + t551 * t904 + ((t642 * t729 - t645 * t796) * t580 + (t641 * t730 - t644 * t797) * t578 + (t640 * t731 - t643 * t798) * t576) * t684, t540 * t904 + t542 * t905 + t544 * t906 + ((-t565 * t848 - t645 * t889) * t880 + (-t564 * t857 - t644 * t890) * t883 + (-t563 * t866 - t643 * t891) * t886) * t684, 0; t552, 0, 0, t510, t538, t536, t515, t513, t519, t557 * t905 + t558 * t906 + t559 * t904 + ((t565 * t766 - t568 * t881) * t851 + (t564 * t768 - t567 * t884) * t860 + (t563 * t770 - t566 * t887) * t869) * t684, t554 * t904 + t555 * t905 + t556 * t906 + ((-t565 * t877 - t571 * t773) * t612 + (-t564 * t878 - t570 * t780) * t610 + (-t563 * t879 - t569 * t787) * t608) * t684, 0; t529, 0, 0, t509, t522, t521, t517, t512, t520, t546 * t908 + t547 * t909 + t550 * t907 + ((t642 * t799 - t645 * t732) * t580 + (t641 * t800 - t644 * t733) * t578 + (t640 * t801 - t643 * t734) * t576) * t684, t541 * t907 + t543 * t908 + t545 * t909 + ((t562 * t847 + t642 * t892) * t880 + (t561 * t856 + t641 * t893) * t883 + (t560 * t865 + t640 * t894) * t886) * t684, 0; t687, 0, 0, t560 ^ 2 * t863 + t561 ^ 2 * t854 + t562 ^ 2 * t845 + t686 * t687, t593 * t911 + t594 * t913 + t595 * t915, t593 * t931 + t594 * t932 + t595 * t933, (t599 * t791 + t600 * t784 + t601 * t777) * t741, (t599 * t708 + t600 * t703 + t601 * t698) * t741, (t640 ^ 2 * t795 + t641 ^ 2 * t794 + t642 ^ 2 * t793) * t685, t548 * t908 + t549 * t909 + t551 * t907 + ((t732 + t796) * t882 + (t733 + t797) * t885 + (t734 + t798) * t888) * t684, t540 * t907 + t542 * t908 + t544 * t909 + ((-t562 * t613 + t889) * t774 + (-t561 * t611 + t890) * t781 + (-t560 * t609 + t891) * t788) * t684, 1; t553, 0, 0, t511, t539, t537, t516, t514, t518, t557 * t908 + t558 * t909 + t559 * t907 + ((t562 * t766 + t568 * t882) * t851 + (t561 * t768 + t567 * t885) * t860 + (t560 * t770 + t566 * t888) * t869) * t684, t554 * t907 + t555 * t908 + t556 * t909 + ((-t562 * t877 + t571 * t774) * t612 + (-t561 * t878 + t570 * t781) * t610 + (-t560 * t879 + t569 * t788) * t608) * t684, 0; t552, 0, 0, t510, t538, t536, t515, t513, t519, -t546 * t861 - t547 * t852 - t550 * t870 + (t523 * t879 + t524 * t878 + t525 * t877 + t643 * t710 + t644 * t705 + t645 * t700) * t684, -t541 * t870 - t543 * t861 - t545 * t852 + (t530 * t879 + t531 * t878 + t532 * t877 - t575 * t707 - t577 * t702 - t579 * t697) * t684, 0; t553, 0, 0, t511, t539, t537, t516, t514, t518, -t548 * t861 - t549 * t852 - t551 * t870 + (t526 * t879 + t527 * t878 + t528 * t877 - t640 * t710 - t641 * t705 - t642 * t700) * t684, -t540 * t870 - t542 * t861 - t544 * t852 + (t533 * t879 + t534 * t878 + t535 * t877 + t575 * t708 + t577 * t703 + t579 * t698) * t684, 0; t689, 0, 0, t575 ^ 2 * t760 + t577 ^ 2 * t755 + t579 ^ 2 * t750 + t689 * t686, t652 * t834 + t655 * t833 + t658 * t832, 0.2e1 * t633 * t758 + 0.2e1 * t634 * t753 + 0.2e1 * t635 * t748, (-t636 * t722 - t637 * t719 - t638 * t716) * t807, (-t636 * t721 - t637 * t718 - t638 * t715) * t807, (t583 ^ 2 / t589 ^ 2 + t582 ^ 2 / t588 ^ 2 + t581 ^ 2 / t587 ^ 2) * t685, -t557 * t861 - t558 * t852 - t559 * t870 + ((-t612 * t778 + t568) * t877 + (-t610 * t785 + t567) * t878 + (-t608 * t792 + t566) * t879) * t684, -t554 * t870 - t555 * t861 - t556 * t852 + ((t579 * t850 + t571) * t877 + (t577 * t859 + t570) * t878 + (t575 * t868 + t569) * t879) * t684, 1;];
tau_reg  = t1;
