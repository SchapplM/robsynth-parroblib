% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR9V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR9V1G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:48:14
% EndTime: 2020-08-06 18:48:29
% DurationCPUTime: 14.94s
% Computational Cost: add. (102750->600), mult. (104521->1024), div. (8196->17), fcn. (47745->107), ass. (0->450)
t2862 = sin(pkin(7));
t2863 = cos(pkin(7));
t3189 = -MDP(4) * t2863 + MDP(5) * t2862;
t3188 = -2 * qJ(2,1);
t3187 = -2 * qJ(2,2);
t3186 = -2 * qJ(2,3);
t2880 = cos(qJ(3,1));
t2860 = t2880 ^ 2;
t2851 = t2863 ^ 2;
t3078 = t2851 - 0.1e1 / 0.2e1;
t2874 = sin(qJ(3,1));
t3087 = t2874 * t2880;
t3094 = t2862 * t2863;
t2728 = (t2860 - 0.1e1 / 0.2e1) * t3094 + t3078 * t3087;
t3185 = -0.4e1 * t2728;
t2876 = cos(qJ(3,3));
t2858 = t2876 ^ 2;
t2870 = sin(qJ(3,3));
t3088 = t2870 * t2876;
t2729 = (t2858 - 0.1e1 / 0.2e1) * t3094 + t3078 * t3088;
t3184 = -0.4e1 * t2729;
t2878 = cos(qJ(3,2));
t2859 = t2878 ^ 2;
t2872 = sin(qJ(3,2));
t3086 = t2878 * t2872;
t2730 = (t2859 - 0.1e1 / 0.2e1) * t3094 + t3078 * t3086;
t3183 = -0.4e1 * t2730;
t2882 = xDP(3);
t3182 = 2 * t2882;
t3075 = 4 * t2882;
t2855 = pkin(7) + qJ(3,3);
t2818 = sin(t2855);
t2821 = cos(t2855);
t2864 = legFrame(3,3);
t2828 = sin(t2864);
t2831 = cos(t2864);
t2871 = sin(qJ(1,3));
t2877 = cos(qJ(1,3));
t2883 = xDP(2);
t2884 = xDP(1);
t2725 = ((t2871 * t2883 + t2877 * t2884) * t2831 + t2828 * (-t2871 * t2884 + t2877 * t2883)) * t2821 + t2818 * t2882;
t2803 = 0.1e1 / t2821;
t2867 = pkin(5) + qJ(2,3);
t2845 = -pkin(6) - t2867;
t2835 = 1 / t2845;
t3114 = t2803 * t2835;
t3050 = t2725 * t3114;
t2856 = pkin(7) + qJ(3,2);
t2819 = sin(t2856);
t2822 = cos(t2856);
t2865 = legFrame(2,3);
t2829 = sin(t2865);
t2832 = cos(t2865);
t2873 = sin(qJ(1,2));
t2879 = cos(qJ(1,2));
t2726 = ((t2873 * t2883 + t2879 * t2884) * t2832 + t2829 * (-t2873 * t2884 + t2879 * t2883)) * t2822 + t2819 * t2882;
t2807 = 0.1e1 / t2822;
t2868 = pkin(5) + qJ(2,2);
t2846 = -pkin(6) - t2868;
t2838 = 1 / t2846;
t3109 = t2807 * t2838;
t3047 = t2726 * t3109;
t2857 = pkin(7) + qJ(3,1);
t2820 = sin(t2857);
t2823 = cos(t2857);
t2866 = legFrame(1,3);
t2830 = sin(t2866);
t2833 = cos(t2866);
t2875 = sin(qJ(1,1));
t2881 = cos(qJ(1,1));
t2727 = ((t2875 * t2883 + t2881 * t2884) * t2833 + t2830 * (-t2875 * t2884 + t2881 * t2883)) * t2823 + t2820 * t2882;
t2811 = 0.1e1 / t2823;
t2869 = pkin(5) + qJ(2,1);
t2847 = -pkin(6) - t2869;
t2841 = 1 / t2847;
t3104 = t2811 * t2841;
t3044 = t2727 * t3104;
t2861 = t2882 ^ 2;
t2891 = (pkin(3) ^ 2);
t3095 = t2861 / t2891;
t2885 = 0.2e1 * pkin(7);
t2854 = t2885 + qJ(3,1);
t3156 = cos(t2854);
t3181 = (t3156 + t2880) * pkin(2);
t2853 = t2885 + qJ(3,2);
t3157 = cos(t2853);
t3180 = (t3157 + t2878) * pkin(2);
t2852 = t2885 + qJ(3,3);
t3158 = cos(t2852);
t3179 = (t3158 + t2876) * pkin(2);
t2797 = 0.2e1 * t2855;
t2785 = sin(t2797);
t3151 = pkin(2) * t2863;
t2796 = pkin(1) + t3151;
t2887 = 1 / pkin(3);
t3085 = t2882 * t2887;
t2893 = t2821 ^ 2;
t2804 = 0.1e1 / t2893;
t3113 = t2804 * t2835;
t3149 = pkin(3) * t2821;
t2710 = (-t2725 * t2785 / 0.2e1 + (t2796 + t3149) * t3085) * t2803 * t2882 * t3113;
t2824 = t2864 + qJ(1,3);
t3063 = t2885 + t2824;
t3171 = 0.2e1 * qJ(3,3);
t2767 = t3171 + t3063;
t2768 = qJ(3,3) + t3063;
t2886 = -0.2e1 * pkin(7);
t3062 = t2886 + t2824;
t2769 = -qJ(3,3) + t3062;
t2770 = -0.2e1 * qJ(3,3) + t3062;
t2792 = qJ(3,3) + t2824;
t2773 = pkin(7) + t2792;
t2793 = -qJ(3,3) + t2824;
t2774 = -pkin(7) + t2793;
t3174 = 0.2e1 * pkin(1);
t2827 = t2883 * t3174;
t2844 = pkin(1) * t2884;
t3077 = pkin(1) * t3075;
t3081 = sin(t2852) + t2870;
t3165 = -0.2e1 * t2884;
t2701 = t2818 * t3077 + (sin(t2774) + sin(t2773)) * (t2845 * t3165 + t2827) + 0.2e1 * (cos(t2774) + cos(t2773)) * (t2845 * t2883 + t2844) + (t2785 * t3182 + (cos(t2770) + cos(t2767) + 0.2e1 * cos(t2824)) * t2884 + (0.2e1 * sin(t2824) + sin(t2770) + sin(t2767)) * t2883) * pkin(3) + (t3081 * t3182 + (cos(t2792) + cos(t2769) + cos(t2768) + cos(t2793)) * t2884 + (sin(t2792) + sin(t2769) + sin(t2768) + sin(t2793)) * t2883) * pkin(2);
t2902 = t2845 ^ 2;
t3143 = t2725 * pkin(1);
t2937 = 0.4e1 * (t3143 - t2701 / 0.8e1) * t3114;
t2931 = pkin(3) * t2937;
t3002 = pkin(3) * t3050;
t2966 = pkin(2) * t3002;
t2890 = pkin(1) ^ 2;
t3175 = pkin(2) ^ 2;
t3011 = -0.4e1 * t2890 - (3 * t2891) - 0.2e1 * t3175;
t3012 = 0.2e1 * pkin(3) * t3085;
t3029 = t2821 * t3114;
t2836 = 1 / t2902;
t3049 = t2725 * t2804 * t2836;
t3161 = cos(t2797);
t3164 = 0.3e1 * pkin(7);
t3170 = 0.4e1 * t2863;
t2908 = (-t2845 * t2803 * t2785 * t3012 + t3161 * t2931 - ((-(4 * t2902) + t3011) * t2725 + pkin(1) * t2701) * t3029 + t2966 * t3170 + t2931 + 0.2e1 * (cos(t3171 + t3164) + cos(t3171 + pkin(7))) * t2966 + t2937 * t3179 + (t2891 * cos(0.3e1 * t2855) + (cos(qJ(3,3) - pkin(7)) + cos(t3164 + qJ(3,3))) * t3175) * t3050) * t3049;
t2913 = (t3174 + ((t3161 + 0.1e1) * pkin(3) + t3179) * t2803) * t2835 * t2701 * t3049;
t3015 = -t2908 / 0.4e1 + t2913 / 0.8e1 - t2710;
t2798 = 0.2e1 * t2856;
t2786 = sin(t2798);
t2896 = t2822 ^ 2;
t2808 = 0.1e1 / t2896;
t3108 = t2808 * t2838;
t3148 = pkin(3) * t2822;
t2711 = (-t2726 * t2786 / 0.2e1 + (t2796 + t3148) * t3085) * t2807 * t2882 * t3108;
t2825 = t2865 + qJ(1,2);
t3065 = t2885 + t2825;
t3172 = 0.2e1 * qJ(3,2);
t2775 = t3172 + t3065;
t3064 = t2886 + t2825;
t2776 = -0.2e1 * qJ(3,2) + t3064;
t2794 = qJ(3,2) + t2825;
t2777 = pkin(7) + t2794;
t2795 = -qJ(3,2) + t2825;
t2778 = -pkin(7) + t2795;
t2779 = qJ(3,2) + t3065;
t2780 = -qJ(3,2) + t3064;
t3080 = sin(t2853) + t2872;
t2702 = t2819 * t3077 + (sin(t2777) + sin(t2778)) * (t2846 * t3165 + t2827) + 0.2e1 * (cos(t2777) + cos(t2778)) * (t2846 * t2883 + t2844) + (t2786 * t3182 + (cos(t2775) + 0.2e1 * cos(t2825) + cos(t2776)) * t2884 + (sin(t2776) + sin(t2775) + 0.2e1 * sin(t2825)) * t2883) * pkin(3) + (t3080 * t3182 + (cos(t2779) + cos(t2795) + cos(t2794) + cos(t2780)) * t2884 + (sin(t2780) + sin(t2779) + sin(t2795) + sin(t2794)) * t2883) * pkin(2);
t2904 = t2846 ^ 2;
t3142 = t2726 * pkin(1);
t2936 = 0.4e1 * (t3142 - t2702 / 0.8e1) * t3109;
t2930 = pkin(3) * t2936;
t3001 = pkin(3) * t3047;
t2965 = pkin(2) * t3001;
t3027 = t2822 * t3109;
t2839 = 1 / t2904;
t3046 = t2726 * t2808 * t2839;
t3160 = cos(t2798);
t2909 = (-t2846 * t2807 * t2786 * t3012 + t3160 * t2930 - ((-(4 * t2904) + t3011) * t2726 + pkin(1) * t2702) * t3027 + t2965 * t3170 + t2930 + 0.2e1 * (cos(t3172 + t3164) + cos(t3172 + pkin(7))) * t2965 + t2936 * t3180 + (t2891 * cos(0.3e1 * t2856) + (cos(qJ(3,2) - pkin(7)) + cos(t3164 + qJ(3,2))) * t3175) * t3047) * t3046;
t2912 = (t3174 + ((t3160 + 0.1e1) * pkin(3) + t3180) * t2807) * t2838 * t2702 * t3046;
t3014 = -t2909 / 0.4e1 + t2912 / 0.8e1 - t2711;
t2799 = 0.2e1 * t2857;
t2787 = sin(t2799);
t2899 = t2823 ^ 2;
t2812 = 0.1e1 / t2899;
t3103 = t2812 * t2841;
t3147 = pkin(3) * t2823;
t2712 = (-t2727 * t2787 / 0.2e1 + (t2796 + t3147) * t3085) * t2811 * t2882 * t3103;
t2826 = t2866 + qJ(1,1);
t3067 = t2885 + t2826;
t2771 = qJ(3,1) + t3067;
t3066 = t2886 + t2826;
t2772 = -qJ(3,1) + t3066;
t2790 = qJ(3,1) + t2826;
t2781 = pkin(7) + t2790;
t2791 = -qJ(3,1) + t2826;
t2782 = -pkin(7) + t2791;
t3173 = 0.2e1 * qJ(3,1);
t2783 = t3173 + t3067;
t2784 = -0.2e1 * qJ(3,1) + t3066;
t3079 = sin(t2854) + t2874;
t2703 = t2820 * t3077 + (sin(t2782) + sin(t2781)) * (t2847 * t3165 + t2827) + 0.2e1 * (cos(t2782) + cos(t2781)) * (t2847 * t2883 + t2844) + (t2787 * t3182 + (cos(t2784) + cos(t2783) + 0.2e1 * cos(t2826)) * t2884 + (sin(t2784) + sin(t2783) + 0.2e1 * sin(t2826)) * t2883) * pkin(3) + (t3079 * t3182 + (cos(t2772) + cos(t2771) + cos(t2791) + cos(t2790)) * t2884 + (sin(t2772) + sin(t2771) + sin(t2791) + sin(t2790)) * t2883) * pkin(2);
t2906 = t2847 ^ 2;
t3141 = t2727 * pkin(1);
t2935 = 0.4e1 * (t3141 - t2703 / 0.8e1) * t3104;
t2929 = pkin(3) * t2935;
t3000 = pkin(3) * t3044;
t2964 = pkin(2) * t3000;
t3025 = t2823 * t3104;
t2842 = 1 / t2906;
t3043 = t2727 * t2812 * t2842;
t3159 = cos(t2799);
t2910 = (-t2847 * t2811 * t2787 * t3012 + t3159 * t2929 - ((-(4 * t2906) + t3011) * t2727 + pkin(1) * t2703) * t3025 + t2964 * t3170 + t2929 + 0.2e1 * (cos(t3164 + t3173) + cos(pkin(7) + t3173)) * t2964 + t2935 * t3181 + (t2891 * cos(0.3e1 * t2857) + (cos(qJ(3,1) - pkin(7)) + cos(qJ(3,1) + t3164)) * t3175) * t3044) * t3043;
t2911 = (t3174 + ((t3159 + 0.1e1) * pkin(3) + t3181) * t2811) * t2841 * t2703 * t3043;
t3013 = -t2910 / 0.4e1 + t2911 / 0.8e1 - t2712;
t3169 = -0.2e1 * t2870;
t3168 = -0.2e1 * t2872;
t3167 = -0.2e1 * t2874;
t3163 = -0.1e1 + 0.2e1 * t2851;
t3162 = -0.4e1 * t2851 + 0.2e1;
t3155 = pkin(1) * t2876;
t3154 = pkin(1) * t2878;
t3153 = pkin(1) * t2880;
t3152 = pkin(2) * t2851;
t3150 = pkin(2) * t2876;
t2805 = t2803 * t2804;
t2837 = t2835 * t2836;
t3112 = t2804 * t2837;
t3126 = t2701 * t2725;
t2986 = t3112 * t3126;
t3005 = pkin(2) * t3050;
t3096 = t2861 * t2887;
t2692 = -(t3161 * t3002 + t3158 * t3005 - (-0.2e1 * t3143 + t2701 / 0.2e1) * t3029 + (pkin(3) + t3150) * t3050) * t3049 / 0.2e1 + t2986 / 0.4e1 - t2805 * t2835 * t3096;
t3146 = t2692 * pkin(1);
t2809 = t2807 * t2808;
t2840 = t2838 * t2839;
t3107 = t2808 * t2840;
t3125 = t2702 * t2726;
t2978 = t3107 * t3125;
t3004 = pkin(2) * t3047;
t2693 = -(t3160 * t3001 + t3157 * t3004 - (-0.2e1 * t3142 + t2702 / 0.2e1) * t3027 + (pkin(2) * t2878 + pkin(3)) * t3047) * t3046 / 0.2e1 + t2978 / 0.4e1 - t2809 * t2838 * t3096;
t3145 = t2693 * pkin(1);
t2813 = t2811 * t2812;
t2843 = t2841 * t2842;
t3102 = t2812 * t2843;
t3124 = t2703 * t2727;
t2970 = t3102 * t3124;
t3003 = pkin(2) * t3044;
t2694 = -(t3159 * t3000 + t3156 * t3003 - (-0.2e1 * t3141 + t2703 / 0.2e1) * t3025 + (pkin(2) * t2880 + pkin(3)) * t3044) * t3043 / 0.2e1 + t2970 / 0.4e1 - t2813 * t2841 * t3096;
t3144 = t2694 * pkin(1);
t3093 = t2862 * t2870;
t2758 = -t2876 * t2863 + t3093;
t3138 = t2692 * t2758;
t3089 = t2863 * t2870;
t3090 = t2862 * t2876;
t2761 = t3089 + t3090;
t3137 = t2692 * t2761;
t3136 = t2692 * t2803;
t3135 = t2692 * t2835;
t3092 = t2862 * t2872;
t2759 = t2863 * t2878 - t3092;
t3134 = t2693 * t2759;
t2762 = t2862 * t2878 + t2863 * t2872;
t3133 = t2693 * t2762;
t3132 = t2693 * t2807;
t3131 = t2693 * t2838;
t3091 = t2862 * t2874;
t2760 = -t2880 * t2863 + t3091;
t3130 = t2694 * t2760;
t2763 = t2862 * t2880 + t2863 * t2874;
t3129 = t2694 * t2763;
t3128 = t2694 * t2811;
t3127 = t2694 * t2841;
t3123 = t2725 * t2835;
t3122 = t2726 * t2838;
t3121 = t2727 * t2841;
t2731 = t3081 * pkin(2) + pkin(3) * t2785 + t2818 * t3174;
t3120 = t2731 * t2692;
t2732 = t3080 * pkin(2) + pkin(3) * t2786 + t2819 * t3174;
t3119 = t2732 * t2693;
t2733 = t3079 * pkin(2) + pkin(3) * t2787 + t2820 * t3174;
t3118 = t2733 * t2694;
t2806 = 0.1e1 / t2893 ^ 2;
t3117 = t2818 ^ 2 * t2806;
t2810 = 0.1e1 / t2896 ^ 2;
t3116 = t2819 ^ 2 * t2810;
t2814 = 0.1e1 / t2899 ^ 2;
t3115 = t2820 ^ 2 * t2814;
t3111 = t2805 * t2818;
t3110 = t2805 * t2836;
t3106 = t2809 * t2819;
t3105 = t2809 * t2839;
t3101 = t2813 * t2820;
t3100 = t2813 * t2842;
t3099 = t2818 * t2835;
t3098 = t2819 * t2838;
t3097 = t2820 * t2841;
t3016 = t3085 / 0.2e1;
t2969 = t2867 * t3016;
t2988 = t2870 * t3050;
t3084 = t2803 * t2876 * t2969 - pkin(1) * t2988;
t2968 = t2868 * t3016;
t2980 = t2872 * t3047;
t3083 = t2807 * t2878 * t2968 - pkin(1) * t2980;
t2967 = t2869 * t3016;
t2972 = t2874 * t3044;
t3082 = t2811 * t2880 * t2967 - pkin(1) * t2972;
t3074 = 0.4e1 * t3094;
t3073 = t2693 * t3152;
t3072 = t2694 * t3152;
t3071 = t2851 * t3150;
t3070 = qJ(2,1) * t3102;
t3069 = qJ(2,2) * t3107;
t3068 = qJ(2,3) * t3112;
t3061 = MDP(10) * t3095;
t3060 = MDP(11) * t3095;
t2752 = t2761 ^ 2;
t3059 = t2752 * t3135;
t2753 = t2762 ^ 2;
t3058 = t2753 * t3131;
t2754 = t2763 ^ 2;
t3057 = t2754 * t3127;
t2722 = t2725 ^ 2;
t3056 = t2722 * t3112;
t3055 = t2722 * t3110;
t2723 = t2726 ^ 2;
t3054 = t2723 * t3107;
t3053 = t2723 * t3105;
t2724 = t2727 ^ 2;
t3052 = t2724 * t3102;
t3051 = t2724 * t3100;
t3048 = t2725 * t3110;
t3045 = t2726 * t3105;
t3042 = t2727 * t3100;
t2743 = -t2828 * t2871 + t2831 * t2877;
t3041 = t2743 * t3114;
t2744 = -t2829 * t2873 + t2832 * t2879;
t3040 = t2744 * t3109;
t2745 = -t2830 * t2875 + t2833 * t2881;
t3039 = t2745 * t3104;
t2746 = t2828 * t2877 + t2831 * t2871;
t3038 = t2746 * t3114;
t2747 = t2829 * t2879 + t2832 * t2873;
t3037 = t2747 * t3109;
t2748 = t2830 * t2881 + t2833 * t2875;
t3036 = t2748 * t3104;
t3035 = t2758 * t3111;
t3034 = t2759 * t3106;
t3033 = t2760 * t3101;
t3032 = t2761 * t3111;
t3031 = t2762 * t3106;
t3030 = t2763 * t3101;
t3028 = t2804 * t3099;
t3026 = t2808 * t3098;
t3024 = t2812 * t3097;
t3023 = t3126 / 0.2e1;
t3022 = t3125 / 0.2e1;
t3021 = t3124 / 0.2e1;
t3020 = t3120 / 0.2e1;
t3019 = -t3119 / 0.2e1;
t3018 = t3118 / 0.2e1;
t3017 = -t3085 / 0.2e1;
t3010 = t2887 * t3182;
t3009 = t2887 * t3075;
t3008 = t3135 * t3184;
t3007 = t3131 * t3183;
t3006 = t3127 * t3185;
t2996 = t3099 * t3136;
t2995 = t3098 * t3132;
t2994 = t3097 * t3128;
t2993 = t2731 * t3048;
t2992 = t2743 * t3049;
t2991 = t2746 * t3049;
t2990 = t2758 * t3049;
t2989 = t2761 * t3049;
t2987 = t2818 * t3048;
t2985 = t2732 * t3045;
t2984 = t2744 * t3046;
t2983 = t2747 * t3046;
t2982 = t2759 * t3046;
t2981 = t2762 * t3046;
t2979 = t2819 * t3045;
t2977 = t2733 * t3042;
t2976 = t2745 * t3043;
t2975 = t2748 * t3043;
t2974 = t2760 * t3043;
t2973 = t2763 * t3043;
t2971 = t2820 * t3042;
t2963 = t2878 * t3004;
t2962 = t2880 * t3003;
t2958 = t2867 * t3095 * t3111;
t2957 = t2868 * t3095 * t3106;
t2956 = t2869 * t3095 * t3101;
t2677 = t3146 + t2908 / 0.8e1 - t2913 / 0.16e2 + t2710 / 0.2e1;
t2946 = -0.2e1 * t2692 * t3151 - 0.2e1 * t2677;
t2678 = t3145 + t2909 / 0.8e1 - t2912 / 0.16e2 + t2711 / 0.2e1;
t2945 = -0.2e1 * t2693 * t3151 - 0.2e1 * t2678;
t2679 = t3144 + t2910 / 0.8e1 - t2911 / 0.16e2 + t2712 / 0.2e1;
t2944 = -0.2e1 * t2694 * t3151 - 0.2e1 * t2679;
t2943 = t2876 * t2958;
t2942 = t2878 * t2957;
t2941 = t2880 * t2956;
t2940 = t2870 * t2958;
t2939 = t2872 * t2957;
t2938 = t2874 * t2956;
t2928 = (-t2758 * t2804 + t3032) * t2835;
t2927 = (-t2761 * t2804 - t3035) * t2835;
t2926 = (t2759 * t2808 + t3031) * t2838;
t2925 = (-t2762 * t2808 + t3034) * t2838;
t2924 = (-t2760 * t2812 + t3030) * t2841;
t2923 = (-t2763 * t2812 - t3033) * t2841;
t2922 = -(-t2701 / 0.2e1 + t2796 * t2725) * t3113 * t3050 + t2867 * t3136;
t2921 = (-t2702 / 0.2e1 + t2796 * t2726) * t3108 * t3047 - t2868 * t3132;
t2920 = -(-t2703 / 0.2e1 + t2796 * t2727) * t3103 * t3044 + t2869 * t3128;
t2919 = -t2986 / 0.2e1 + t3135 * t3186;
t2918 = -t2978 / 0.2e1 + t3131 * t3187;
t2917 = -t2970 / 0.2e1 + t3127 * t3188;
t2916 = (t2818 * t3023 - t2731 * t2722 / 0.2e1) * t2837 * t2805;
t2915 = (t2819 * t3022 - t2732 * t2723 / 0.2e1) * t2840 * t2809;
t2914 = (t2820 * t3021 - t2733 * t2724 / 0.2e1) * t2843 * t2813;
t2742 = t2796 * t2881 - t2847 * t2875;
t2741 = t2796 * t2879 - t2846 * t2873;
t2740 = t2796 * t2877 - t2845 * t2871;
t2739 = t2796 * t2875 + t2847 * t2881;
t2738 = t2796 * t2873 + t2846 * t2879;
t2737 = t2796 * t2871 + t2845 * t2877;
t2736 = -0.4e1 * t3086 * t3094 - 0.2e1 * t2859 + 0.1e1 + (0.4e1 * t2859 - 0.2e1) * t2851;
t2735 = t3162 * t2860 + t3074 * t3087 + t3163;
t2734 = t3162 * t2858 + t3074 * t3088 + t3163;
t2718 = t2739 * t2833 + t2742 * t2830 + t2748 * t3147;
t2717 = t2738 * t2832 + t2741 * t2829 + t2747 * t3148;
t2716 = t2737 * t2831 + t2740 * t2828 + t2746 * t3149;
t2715 = -t2739 * t2830 + t2742 * t2833 + t2745 * t3147;
t2714 = -t2738 * t2829 + t2741 * t2832 + t2744 * t3148;
t2713 = -t2737 * t2828 + t2740 * t2831 + t2743 * t3149;
t2709 = t2851 * t2962 + (t2874 * t2967 - (pkin(2) * t3091 - t3153) * t3121) * t2811 * t2863 + t3082 * t2862;
t2708 = t2851 * t2963 + (t2872 * t2968 - (pkin(2) * t3092 - t3154) * t3122) * t2807 * t2863 + t3083 * t2862;
t2707 = t3084 * t2862 + (t2969 * t3089 - (-t3071 + (pkin(2) * t3093 - t3155) * t2863) * t3123) * t2803;
t2706 = -t2988 * t3152 + (-t3005 * t3090 + t3084) * t2863 + (t2870 * t2867 * t3017 - t3123 * t3155) * t2803 * t2862;
t2705 = -t2972 * t3152 + (-t2862 * t2962 + t3082) * t2863 + (t2874 * t2869 * t3017 - t3121 * t3153) * t2811 * t2862;
t2704 = -t2980 * t3152 + (-t2862 * t2963 + t3083) * t2863 + (t2872 * t2868 * t3017 - t3122 * t3154) * t2807 * t2862;
t2685 = t3013 - t3144;
t2684 = 0.2e1 * t3144 - t3013;
t2683 = t3014 - t3145;
t2682 = 0.2e1 * t3145 - t3014;
t2681 = t3015 - t3146;
t2680 = 0.2e1 * t3146 - t3015;
t2676 = ((qJ(2,1) ^ 2) + t2890) * t2694 - pkin(1) * t3013;
t2675 = ((qJ(2,2) ^ 2) + t2890) * t2693 - pkin(1) * t3014;
t2674 = ((qJ(2,3) ^ 2) + t2890) * t2692 - pkin(1) * t3015;
t2673 = 0.2e1 * t2880 * t3072 + (t2684 * t2880 - t2938) * t2863 + (t2874 * t2944 - t2941) * t2862;
t2672 = 0.2e1 * t2878 * t3073 + (t2682 * t2878 - t2939) * t2863 + (t2872 * t2945 - t2942) * t2862;
t2671 = 0.2e1 * t2692 * t3071 + (t2680 * t2876 - t2940) * t2863 + (t2870 * t2946 - t2943) * t2862;
t2670 = t2692 * t3152 * t3169 + (t2677 * t3169 - t2943) * t2863 + (t2876 * t2946 + t2940) * t2862;
t2669 = t3072 * t3167 + (t2679 * t3167 - t2941) * t2863 + (t2880 * t2944 + t2938) * t2862;
t2668 = t3073 * t3168 + (t2678 * t3168 - t2942) * t2863 + (t2878 * t2945 + t2939) * t2862;
t1 = [(-t2743 * t3135 - t2744 * t3131 - t2745 * t3127) * MDP(1) + (t2713 * t3056 + t2714 * t3054 + t2715 * t3052 + t2919 * t2743 + t2918 * t2744 + t2917 * t2745) * MDP(6) + (-(t2676 * t2745 + t2685 * t2715) * t2841 - (t2675 * t2744 + t2683 * t2714) * t2838 - (t2674 * t2743 + t2681 * t2713) * t2835 - (-t2713 * t2722 + t2743 * t3023) * t3068 - (-t2714 * t2723 + t2744 * t3022) * t3069 - (-t2715 * t2724 + t2745 * t3021) * t3070) * MDP(7) + (-t2743 * t3059 - t2744 * t3058 - t2745 * t3057 + (t2728 * t2976 + t2729 * t2992 + t2730 * t2984) * t3009) * MDP(8) + (t2743 * t3008 + t2744 * t3007 + t2745 * t3006 + (-t2734 * t2992 - t2735 * t2976 + t2736 * t2984) * t3010) * MDP(9) + (-t2743 * t2928 - t2744 * t2926 - t2745 * t2924) * t3061 + (-t2743 * t2927 - t2744 * t2925 - t2745 * t2923) * t3060 + (-(t2673 * t2745 + t2715 * t3130) * t2841 - (t2672 * t2744 - t2714 * t3134) * t2838 - (t2671 * t2743 + t2713 * t3138) * t2835 + (t2704 * t3040 + t2705 * t3039 + t2706 * t3041 + t2713 * t2989 + t2714 * t2981 + t2715 * t2973) * t3010) * MDP(13) + (-(t2669 * t2745 + t2715 * t3129) * t2841 - (t2668 * t2744 + t2714 * t3133) * t2838 - (t2670 * t2743 + t2713 * t3137) * t2835 + (-t2707 * t3041 - t2708 * t3040 - t2709 * t3039 - t2713 * t2990 + t2714 * t2982 - t2715 * t2974) * t3010) * MDP(14) + t3189 * ((t2680 * t2743 - t2692 * t2713) * t2835 + (t2682 * t2744 - t2693 * t2714) * t2838 + (t2684 * t2745 - t2694 * t2715) * t2841); (-t2746 * t3135 - t2747 * t3131 - t2748 * t3127) * MDP(1) + (t2716 * t3056 + t2717 * t3054 + t2718 * t3052 + t2746 * t2919 + t2747 * t2918 + t2748 * t2917) * MDP(6) + (-(t2676 * t2748 + t2685 * t2718) * t2841 - (t2675 * t2747 + t2683 * t2717) * t2838 - (t2674 * t2746 + t2681 * t2716) * t2835 - (-t2716 * t2722 + t2746 * t3023) * t3068 - (-t2717 * t2723 + t2747 * t3022) * t3069 - (-t2718 * t2724 + t2748 * t3021) * t3070) * MDP(7) + (-t2746 * t3059 - t2747 * t3058 - t2748 * t3057 + (t2728 * t2975 + t2729 * t2991 + t2730 * t2983) * t3009) * MDP(8) + (t2746 * t3008 + t2747 * t3007 + t2748 * t3006 + (-t2734 * t2991 - t2735 * t2975 + t2736 * t2983) * t3010) * MDP(9) + (-t2746 * t2928 - t2747 * t2926 - t2748 * t2924) * t3061 + (-t2746 * t2927 - t2747 * t2925 - t2748 * t2923) * t3060 + (-(t2673 * t2748 + t2718 * t3130) * t2841 - (t2672 * t2747 - t2717 * t3134) * t2838 - (t2671 * t2746 + t2716 * t3138) * t2835 + (t2704 * t3037 + t2705 * t3036 + t2706 * t3038 + t2716 * t2989 + t2717 * t2981 + t2718 * t2973) * t3010) * MDP(13) + (-(t2669 * t2748 + t2718 * t3129) * t2841 - (t2668 * t2747 + t2717 * t3133) * t2838 - (t2670 * t2746 + t2716 * t3137) * t2835 + (-t2707 * t3038 - t2708 * t3037 - t2709 * t3036 - t2716 * t2990 + t2717 * t2982 - t2718 * t2974) * t3010) * MDP(14) + t3189 * ((t2680 * t2746 - t2692 * t2716) * t2835 + (t2682 * t2747 - t2693 * t2717) * t2838 + (t2684 * t2748 - t2694 * t2718) * t2841); (-t2994 - t2995 - t2996) * MDP(1) + (t2994 * t3188 + t2995 * t3187 + t2996 * t3186 - t2914 - t2915 - t2916) * MDP(6) + (-(t2820 * t2676 + t2733 * t2685 / 0.2e1) * t3104 - (t2819 * t2675 + t2732 * t2683 / 0.2e1) * t3109 - (t2818 * t2674 + t2731 * t2681 / 0.2e1) * t3114 - qJ(2,3) * t2916 - qJ(2,2) * t2915 - qJ(2,1) * t2914) * MDP(7) + (-t2752 * t2996 - t2753 * t2995 - t2754 * t2994 + (-0.2e1 * t2729 * t3055 - 0.2e1 * t2730 * t3053 - 0.2e1 * t2728 * t3051 + (t2728 * t2971 + t2729 * t2987 + t2730 * t2979) * t3075) * t2887) * MDP(8) + (t2996 * t3184 + t2995 * t3183 + t2994 * t3185 + (t2734 * t3055 - t2736 * t3053 + t2735 * t3051 + (-t2734 * t2987 - t2735 * t2971 + t2736 * t2979) * t3182) * t2887) * MDP(9) + ((t2761 * t3136 + t2762 * t3132 + t2763 * t3128) * t2887 + (-(t2763 * t3115 - t3033) * t2841 - (t2762 * t3116 + t3034) * t2838 - (t2761 * t3117 - t3035) * t2835) * t3095) * MDP(10) + ((-t2758 * t3136 + t2759 * t3132 - t2760 * t3128) * t2887 + (-(-t2760 * t3115 - t3030) * t2841 - (t2759 * t3116 - t3031) * t2838 - (-t2758 * t3117 - t3032) * t2835) * t3095) * MDP(11) + (t2806 * t2818 + t2810 * t2819 + t2814 * t2820) * t2887 * MDP(12) * t3095 + (-(t2820 * t2673 + t2760 * t3018) * t3104 - (t2819 * t2672 + t2759 * t3019) * t3109 - (t2818 * t2671 + t2758 * t3020) * t3114 + (-t2920 * t2763 + t2921 * t2762 - t2922 * t2761 + (0.2e1 * t2704 * t3026 + 0.2e1 * t2705 * t3024 + 0.2e1 * t2706 * t3028 + t2761 * t2993 + t2762 * t2985 + t2763 * t2977) * t2882) * t2887) * MDP(13) + (-(t2820 * t2669 + t2763 * t3018) * t3104 - (t2819 * t2668 + t2762 * t3119 / 0.2e1) * t3109 - (t2818 * t2670 + t2761 * t3020) * t3114 + (t2920 * t2760 + t2921 * t2759 + t2922 * t2758 + (-0.2e1 * t2707 * t3028 - 0.2e1 * t2708 * t3026 - 0.2e1 * t2709 * t3024 - t2758 * t2993 + t2759 * t2985 - t2760 * t2977) * t2882) * t2887) * MDP(14) + t3189 * ((t2820 * t2684 - t3118 / 0.2e1) * t3104 + (t2819 * t2682 + t3019) * t3109 + (t2818 * t2680 - t3120 / 0.2e1) * t3114);];
taucX  = t1;
