% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR9V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR9V1G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RPRRR9V1G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:48:07
% EndTime: 2020-08-06 18:48:14
% DurationCPUTime: 6.86s
% Computational Cost: add. (7806->468), mult. (7793->851), div. (1494->14), fcn. (7656->32), ass. (0->327)
t2443 = sin(pkin(7));
t2444 = cos(pkin(7));
t2666 = -t2444 * MDP(4) + t2443 * MDP(5);
t2439 = t2444 ^ 2;
t2667 = -0.2e1 * t2439;
t2660 = 2 * MDP(6);
t2659 = 4 * MDP(9);
t2440 = pkin(7) + qJ(3,3);
t2451 = sin(qJ(3,3));
t2463 = 0.2e1 * pkin(7);
t2412 = sin(t2440);
t2648 = t2412 * pkin(1);
t2584 = 0.2e1 * t2648;
t2361 = pkin(3) * sin(0.2e1 * t2440) + t2584 + (sin(t2463 + qJ(3,3)) + t2451) * pkin(2);
t2658 = -t2361 / 0.2e1;
t2657 = t2361 / 0.2e1;
t2441 = pkin(7) + qJ(3,2);
t2453 = sin(qJ(3,2));
t2413 = sin(t2441);
t2647 = t2413 * pkin(1);
t2583 = 0.2e1 * t2647;
t2362 = pkin(3) * sin(0.2e1 * t2441) + t2583 + (sin(t2463 + qJ(3,2)) + t2453) * pkin(2);
t2656 = -t2362 / 0.2e1;
t2655 = t2362 / 0.2e1;
t2442 = pkin(7) + qJ(3,1);
t2455 = sin(qJ(3,1));
t2414 = sin(t2442);
t2646 = t2414 * pkin(1);
t2582 = 0.2e1 * t2646;
t2363 = pkin(3) * sin(0.2e1 * t2442) + t2582 + (sin(t2463 + qJ(3,1)) + t2455) * pkin(2);
t2654 = -t2363 / 0.2e1;
t2653 = t2363 / 0.2e1;
t2450 = pkin(5) + qJ(2,1);
t2449 = pkin(5) + qJ(2,2);
t2448 = pkin(5) + qJ(2,3);
t2652 = pkin(2) * t2439;
t2415 = cos(t2440);
t2651 = pkin(3) * t2415;
t2416 = cos(t2441);
t2650 = pkin(3) * t2416;
t2417 = cos(t2442);
t2649 = pkin(3) * t2417;
t2433 = -pkin(6) - t2448;
t2424 = 0.1e1 / t2433;
t2645 = MDP(7) * t2424;
t2434 = -pkin(6) - t2449;
t2426 = 0.1e1 / t2434;
t2644 = MDP(7) * t2426;
t2435 = -pkin(6) - t2450;
t2428 = 0.1e1 / t2435;
t2643 = MDP(7) * t2428;
t2464 = 0.1e1 / pkin(3);
t2640 = MDP(10) * t2464;
t2639 = MDP(11) * t2464;
t2402 = pkin(2) * t2444 + pkin(1);
t2452 = sin(qJ(1,3));
t2458 = cos(qJ(1,3));
t2370 = t2402 * t2452 + t2433 * t2458;
t2373 = t2402 * t2458 - t2433 * t2452;
t2445 = legFrame(3,3);
t2418 = sin(t2445);
t2421 = cos(t2445);
t2382 = -t2418 * t2452 + t2421 * t2458;
t2337 = -t2370 * t2418 + t2373 * t2421 + t2382 * t2651;
t2638 = t2337 * t2424;
t2454 = sin(qJ(1,2));
t2460 = cos(qJ(1,2));
t2371 = t2402 * t2454 + t2434 * t2460;
t2374 = t2402 * t2460 - t2434 * t2454;
t2446 = legFrame(2,3);
t2419 = sin(t2446);
t2422 = cos(t2446);
t2383 = -t2419 * t2454 + t2422 * t2460;
t2338 = -t2371 * t2419 + t2374 * t2422 + t2383 * t2650;
t2637 = t2338 * t2426;
t2456 = sin(qJ(1,1));
t2462 = cos(qJ(1,1));
t2372 = t2402 * t2456 + t2435 * t2462;
t2375 = t2402 * t2462 - t2435 * t2456;
t2447 = legFrame(1,3);
t2420 = sin(t2447);
t2423 = cos(t2447);
t2384 = -t2420 * t2456 + t2423 * t2462;
t2339 = -t2372 * t2420 + t2375 * t2423 + t2384 * t2649;
t2636 = t2339 * t2428;
t2385 = t2418 * t2458 + t2421 * t2452;
t2340 = t2370 * t2421 + t2373 * t2418 + t2385 * t2651;
t2635 = t2340 * t2424;
t2425 = 0.1e1 / t2433 ^ 2;
t2634 = t2340 * t2425;
t2386 = t2419 * t2460 + t2422 * t2454;
t2341 = t2371 * t2422 + t2374 * t2419 + t2386 * t2650;
t2633 = t2341 * t2426;
t2427 = 0.1e1 / t2434 ^ 2;
t2632 = t2341 * t2427;
t2387 = t2420 * t2462 + t2423 * t2456;
t2342 = t2372 * t2423 + t2375 * t2420 + t2387 * t2649;
t2631 = t2342 * t2428;
t2429 = 0.1e1 / t2435 ^ 2;
t2630 = t2342 * t2429;
t2376 = t2382 ^ 2;
t2629 = t2376 * t2425;
t2377 = t2383 ^ 2;
t2628 = t2377 * t2427;
t2378 = t2384 ^ 2;
t2627 = t2378 * t2429;
t2379 = t2385 ^ 2;
t2626 = t2379 * t2425;
t2380 = t2386 ^ 2;
t2625 = t2380 * t2427;
t2381 = t2387 ^ 2;
t2624 = t2381 * t2429;
t2623 = t2382 * t2424;
t2622 = t2383 * t2426;
t2621 = t2384 * t2428;
t2620 = t2385 * t2424;
t2619 = t2385 * t2425;
t2618 = t2386 * t2426;
t2617 = t2386 * t2427;
t2616 = t2387 * t2428;
t2615 = t2387 * t2429;
t2457 = cos(qJ(3,3));
t2595 = t2443 * t2457;
t2397 = t2444 * t2451 + t2595;
t2391 = t2397 ^ 2;
t2614 = t2391 * t2425;
t2459 = cos(qJ(3,2));
t2594 = t2443 * t2459;
t2398 = t2444 * t2453 + t2594;
t2392 = t2398 ^ 2;
t2613 = t2392 * t2427;
t2461 = cos(qJ(3,1));
t2593 = t2443 * t2461;
t2399 = t2444 * t2455 + t2593;
t2393 = t2399 ^ 2;
t2612 = t2393 * t2429;
t2588 = t2457 * t2444;
t2598 = t2443 * t2451;
t2394 = -t2588 + t2598;
t2611 = t2394 * t2425;
t2592 = t2444 * t2459;
t2597 = t2443 * t2453;
t2395 = t2592 - t2597;
t2610 = t2395 * t2427;
t2587 = t2461 * t2444;
t2596 = t2443 * t2455;
t2396 = -t2587 + t2596;
t2609 = t2396 * t2429;
t2608 = t2397 * t2425;
t2607 = t2398 * t2427;
t2606 = t2399 * t2429;
t2406 = 0.1e1 / t2415;
t2605 = t2406 * t2424;
t2408 = 0.1e1 / t2416;
t2604 = t2408 * t2426;
t2410 = 0.1e1 / t2417;
t2603 = t2410 * t2428;
t2602 = t2412 * t2424;
t2601 = t2413 * t2426;
t2600 = t2414 * t2428;
t2599 = t2443 * t2444;
t2591 = t2448 * t2464;
t2590 = t2449 * t2464;
t2589 = t2450 * t2464;
t2586 = t2439 - 0.1e1 / 0.2e1;
t2585 = 0.2e1 * pkin(2) * t2443;
t2581 = -0.2e1 * t2598;
t2580 = -0.2e1 * t2597;
t2579 = -0.2e1 * t2596;
t2578 = t2424 * t2652;
t2577 = pkin(2) * t2424 * t2457;
t2576 = t2426 * t2652;
t2575 = pkin(2) * t2426 * t2459;
t2574 = t2428 * t2652;
t2573 = pkin(2) * t2428 * t2461;
t2572 = pkin(1) * t2623;
t2571 = pkin(1) * t2622;
t2570 = pkin(1) * t2621;
t2569 = pkin(1) * t2620;
t2568 = pkin(1) * t2618;
t2567 = pkin(1) * t2616;
t2566 = t2337 * t2611;
t2565 = t2337 * t2608;
t2564 = t2338 * t2610;
t2563 = t2338 * t2607;
t2562 = t2339 * t2609;
t2561 = t2339 * t2606;
t2560 = t2340 * t2611;
t2559 = t2340 * t2608;
t2558 = t2341 * t2610;
t2557 = t2341 * t2607;
t2556 = t2342 * t2609;
t2555 = t2342 * t2606;
t2554 = t2382 * t2619;
t2553 = t2383 * t2617;
t2552 = t2384 * t2615;
t2551 = t2394 * t2605;
t2550 = t2395 * t2604;
t2549 = t2396 * t2603;
t2548 = t2397 * t2605;
t2547 = t2398 * t2604;
t2546 = t2399 * t2603;
t2407 = 0.1e1 / t2415 ^ 2;
t2545 = t2412 ^ 2 * t2407 * t2425;
t2409 = 0.1e1 / t2416 ^ 2;
t2544 = t2413 ^ 2 * t2409 * t2427;
t2411 = 0.1e1 / t2417 ^ 2;
t2543 = t2414 ^ 2 * t2429 * t2411;
t2542 = t2406 * t2412 * t2425;
t2541 = t2407 * t2602;
t2540 = t2408 * t2413 * t2427;
t2539 = t2409 * t2601;
t2538 = t2410 * t2414 * t2429;
t2537 = t2411 * t2600;
t2536 = t2424 * t2591;
t2535 = t2426 * t2590;
t2534 = t2428 * t2589;
t2533 = t2425 * t2657;
t2532 = t2427 * t2655;
t2531 = t2429 * t2653;
t2530 = t2424 * t2585;
t2529 = t2426 * t2585;
t2528 = t2428 * t2585;
t2527 = t2451 * t2578;
t2526 = t2443 * t2577;
t2525 = t2453 * t2576;
t2524 = t2443 * t2575;
t2523 = t2455 * t2574;
t2522 = t2443 * t2573;
t2521 = t2382 * t2542;
t2520 = t2383 * t2540;
t2519 = t2384 * t2538;
t2518 = t2385 * t2542;
t2517 = t2386 * t2540;
t2516 = t2387 * t2538;
t2515 = t2391 * t2542;
t2514 = t2392 * t2540;
t2513 = t2393 * t2538;
t2512 = t2394 * t2542;
t2511 = t2395 * t2540;
t2510 = t2396 * t2538;
t2509 = t2397 * t2542;
t2508 = t2398 * t2540;
t2507 = t2399 * t2538;
t2358 = (t2461 ^ 2 - 0.1e1 / 0.2e1) * t2599 + t2586 * t2461 * t2455;
t2359 = (t2457 ^ 2 - 0.1e1 / 0.2e1) * t2599 + t2586 * t2457 * t2451;
t2360 = (t2459 ^ 2 - 0.1e1 / 0.2e1) * t2599 + t2586 * t2459 * t2453;
t2506 = (t2358 * t2552 + t2359 * t2554 + t2360 * t2553) * t2659 + (t2391 * t2554 + t2392 * t2553 + t2393 * t2552) * MDP(8) + (qJ(2,1) * t2552 + qJ(2,2) * t2553 + qJ(2,3) * t2554) * t2660 + (t2552 + t2553 + t2554) * MDP(1);
t2505 = t2577 * t2667;
t2504 = t2451 * t2530;
t2503 = t2575 * t2667;
t2502 = t2453 * t2529;
t2501 = t2573 * t2667;
t2500 = t2455 * t2528;
t2493 = (t2358 * t2519 + t2359 * t2521 + t2360 * t2520) * t2659 + (t2382 * t2515 + t2383 * t2514 + t2384 * t2513) * MDP(8) + (t2382 * t2551 - t2383 * t2550 + t2384 * t2549) * t2639 + (-t2382 * t2548 - t2383 * t2547 - t2384 * t2546) * t2640 + (qJ(2,1) * t2519 + qJ(2,2) * t2520 + qJ(2,3) * t2521) * t2660 + (t2519 + t2520 + t2521) * MDP(1);
t2492 = (t2358 * t2516 + t2359 * t2518 + t2360 * t2517) * t2659 + (t2385 * t2515 + t2386 * t2514 + t2387 * t2513) * MDP(8) + (t2385 * t2551 - t2386 * t2550 + t2387 * t2549) * t2639 + (-t2385 * t2548 - t2386 * t2547 - t2387 * t2546) * t2640 + (qJ(2,1) * t2516 + qJ(2,2) * t2517 + qJ(2,3) * t2518) * t2660 + (t2516 + t2517 + t2518) * MDP(1);
t2482 = 0.2e1 * t2412 * t2578 + t2443 * t2591;
t2481 = 0.2e1 * t2413 * t2576 + t2443 * t2590;
t2480 = 0.2e1 * t2414 * t2574 + t2443 * t2589;
t2479 = t2444 * (t2412 * t2530 - t2591);
t2478 = t2444 * (t2413 * t2529 - t2590);
t2477 = t2444 * (t2414 * t2528 - t2589);
t2476 = t2394 * t2533 + t2397 * t2536;
t2475 = -t2394 * t2536 + t2397 * t2533;
t2474 = t2398 * t2535 + t2610 * t2656;
t2473 = t2395 * t2535 + t2398 * t2532;
t2472 = t2396 * t2531 + t2399 * t2534;
t2471 = -t2396 * t2534 + t2399 * t2531;
t2466 = pkin(1) ^ 2;
t2432 = qJ(2,1) ^ 2 + t2466;
t2431 = qJ(2,2) ^ 2 + t2466;
t2430 = qJ(2,3) ^ 2 + t2466;
t2354 = t2410 * pkin(1) * t2600 + t2603 * t2654;
t2353 = (t2646 - t2363 / 0.4e1) * t2603;
t2352 = (t2582 + t2654) * t2603;
t2351 = t2408 * pkin(1) * t2601 + t2604 * t2656;
t2350 = (t2647 - t2362 / 0.4e1) * t2604;
t2349 = (t2583 + t2656) * t2604;
t2348 = t2406 * pkin(1) * t2602 + t2605 * t2658;
t2347 = (t2648 - t2361 / 0.4e1) * t2605;
t2346 = (t2584 + t2658) * t2605;
t2345 = (pkin(1) * t2654 + t2432 * t2414) * t2603;
t2344 = (pkin(1) * t2656 + t2431 * t2413) * t2604;
t2343 = (pkin(1) * t2658 + t2430 * t2412) * t2605;
t2328 = -t2631 + t2567;
t2327 = t2631 - 0.2e1 * t2567;
t2326 = -t2633 + t2568;
t2325 = t2633 - 0.2e1 * t2568;
t2324 = -t2635 + t2569;
t2323 = t2635 - 0.2e1 * t2569;
t2322 = -t2636 + t2570;
t2321 = t2636 - 0.2e1 * t2570;
t2320 = -t2637 + t2571;
t2319 = t2637 - 0.2e1 * t2571;
t2318 = -t2638 + t2572;
t2317 = t2638 - 0.2e1 * t2572;
t2316 = -t2567 + t2631 / 0.2e1;
t2315 = -t2568 + t2633 / 0.2e1;
t2314 = -t2569 + t2635 / 0.2e1;
t2313 = -t2570 + t2636 / 0.2e1;
t2312 = -t2571 + t2637 / 0.2e1;
t2311 = -t2572 + t2638 / 0.2e1;
t2310 = (-pkin(1) * t2342 + t2387 * t2432) * t2428;
t2309 = (-pkin(1) * t2339 + t2384 * t2432) * t2428;
t2308 = (-pkin(1) * t2341 + t2386 * t2431) * t2426;
t2307 = (-pkin(1) * t2338 + t2383 * t2431) * t2426;
t2306 = (-pkin(1) * t2340 + t2385 * t2430) * t2424;
t2305 = (-pkin(1) * t2337 + t2382 * t2430) * t2424;
t2291 = -t2352 * t2587 - t2353 * t2579 + (t2455 * t2477 - t2480 * t2461) * t2410;
t2290 = -t2349 * t2592 - t2350 * t2580 + (t2453 * t2478 - t2481 * t2459) * t2408;
t2289 = -t2346 * t2588 - t2347 * t2581 + (t2451 * t2479 - t2482 * t2457) * t2406;
t2288 = 0.2e1 * t2397 * t2347 + (t2482 * t2451 + t2457 * t2479) * t2406;
t2287 = 0.2e1 * t2399 * t2353 + (t2480 * t2455 + t2461 * t2477) * t2410;
t2286 = 0.2e1 * t2398 * t2350 + (t2481 * t2453 + t2459 * t2478) * t2408;
t2284 = t2387 * t2501 + (t2327 * t2461 + t2387 * t2500) * t2444 + t2316 * t2579;
t2283 = t2384 * t2501 + (t2321 * t2461 + t2384 * t2500) * t2444 + t2313 * t2579;
t2282 = t2386 * t2503 + (t2325 * t2459 + t2386 * t2502) * t2444 + t2315 * t2580;
t2281 = t2383 * t2503 + (t2319 * t2459 + t2383 * t2502) * t2444 + t2312 * t2580;
t2280 = t2385 * t2505 + (t2323 * t2457 + t2385 * t2504) * t2444 + t2314 * t2581;
t2279 = t2382 * t2505 + (t2317 * t2457 + t2382 * t2504) * t2444 + t2311 * t2581;
t2278 = 0.2e1 * t2385 * t2527 + 0.2e1 * (-t2314 * t2451 + t2385 * t2526) * t2444 - 0.2e1 * t2314 * t2595;
t2277 = 0.2e1 * t2382 * t2527 + 0.2e1 * (-t2311 * t2451 + t2382 * t2526) * t2444 - 0.2e1 * t2311 * t2595;
t2276 = 0.2e1 * t2387 * t2523 + 0.2e1 * (-t2316 * t2455 + t2387 * t2522) * t2444 - 0.2e1 * t2316 * t2593;
t2275 = 0.2e1 * t2384 * t2523 + 0.2e1 * (-t2313 * t2455 + t2384 * t2522) * t2444 - 0.2e1 * t2313 * t2593;
t2274 = 0.2e1 * t2386 * t2525 + 0.2e1 * (-t2315 * t2453 + t2386 * t2524) * t2444 - 0.2e1 * t2315 * t2594;
t2273 = 0.2e1 * t2383 * t2525 + 0.2e1 * (-t2312 * t2453 + t2383 * t2524) * t2444 - 0.2e1 * t2312 * t2594;
t1 = [(t2627 + t2628 + t2629) * MDP(1) + (qJ(2,1) * t2627 + qJ(2,2) * t2628 + qJ(2,3) * t2629) * t2660 + (-t2318 * t2638 - t2320 * t2637 - t2322 * t2636) * MDP(7) + (t2376 * t2614 + t2377 * t2613 + t2378 * t2612) * MDP(8) + (t2358 * t2627 + t2359 * t2629 + t2360 * t2628) * t2659 + MDP(15) + (t2309 * t2643 + (-t2283 * t2428 + t2562) * MDP(13) + (-t2275 * t2428 + t2561) * MDP(14)) * t2384 + (t2307 * t2644 + (-t2281 * t2426 - t2564) * MDP(13) + (-t2273 * t2426 + t2563) * MDP(14)) * t2383 + (t2305 * t2645 + (-t2279 * t2424 + t2566) * MDP(13) + (-t2277 * t2424 + t2565) * MDP(14)) * t2382 + t2666 * ((t2321 * t2428 + t2339 * t2429) * t2384 + (t2319 * t2426 + t2338 * t2427) * t2383 + (t2317 * t2424 + t2337 * t2425) * t2382); (-(-t2310 * t2384 + t2328 * t2339) * t2428 - (-t2308 * t2383 + t2326 * t2338) * t2426 - (-t2306 * t2382 + t2324 * t2337) * t2424) * MDP(7) + (-t2280 * t2623 - t2282 * t2622 - t2284 * t2621 + t2385 * t2566 - t2386 * t2564 + t2387 * t2562) * MDP(13) + (-t2274 * t2622 - t2276 * t2621 - t2278 * t2623 + t2385 * t2565 + t2386 * t2563 + t2387 * t2561) * MDP(14) + t2506 + t2666 * (t2323 * t2623 + t2325 * t2622 + t2327 * t2621 + t2337 * t2619 + t2338 * t2617 + t2339 * t2615); (-(t2339 * t2354 - t2345 * t2384) * t2428 - (t2338 * t2351 - t2344 * t2383) * t2426 - (t2337 * t2348 - t2343 * t2382) * t2424) * MDP(7) + (-t2289 * t2623 - t2290 * t2622 - t2291 * t2621 + t2337 * t2512 - t2338 * t2511 + t2339 * t2510) * MDP(13) + (-t2286 * t2622 - t2287 * t2621 - t2288 * t2623 + t2337 * t2509 + t2338 * t2508 + t2339 * t2507) * MDP(14) + t2493 + t2666 * (t2337 * t2542 + t2338 * t2540 + t2339 * t2538 - t2346 * t2623 - t2349 * t2622 - t2352 * t2621); (-(-t2309 * t2387 + t2322 * t2342) * t2428 - (-t2307 * t2386 + t2320 * t2341) * t2426 - (-t2305 * t2385 + t2318 * t2340) * t2424) * MDP(7) + (-t2279 * t2620 - t2281 * t2618 - t2283 * t2616 + t2382 * t2560 - t2383 * t2558 + t2384 * t2556) * MDP(13) + (-t2273 * t2618 - t2275 * t2616 - t2277 * t2620 + t2382 * t2559 + t2383 * t2557 + t2384 * t2555) * MDP(14) + t2506 + t2666 * (t2317 * t2620 + t2319 * t2618 + t2321 * t2616 + t2382 * t2634 + t2383 * t2632 + t2384 * t2630); (t2624 + t2625 + t2626) * MDP(1) + (qJ(2,1) * t2624 + qJ(2,2) * t2625 + qJ(2,3) * t2626) * t2660 + (-t2324 * t2635 - t2326 * t2633 - t2328 * t2631) * MDP(7) + (t2379 * t2614 + t2380 * t2613 + t2381 * t2612) * MDP(8) + (t2358 * t2624 + t2359 * t2626 + t2360 * t2625) * t2659 + MDP(15) + (t2310 * t2643 + (-t2284 * t2428 + t2556) * MDP(13) + (-t2276 * t2428 + t2555) * MDP(14)) * t2387 + (t2308 * t2644 + (-t2282 * t2426 - t2558) * MDP(13) + (-t2274 * t2426 + t2557) * MDP(14)) * t2386 + (t2306 * t2645 + (-t2280 * t2424 + t2560) * MDP(13) + (-t2278 * t2424 + t2559) * MDP(14)) * t2385 + t2666 * ((t2323 * t2424 + t2634) * t2385 + (t2325 * t2426 + t2632) * t2386 + (t2327 * t2428 + t2630) * t2387); (-(t2342 * t2354 - t2345 * t2387) * t2428 - (t2341 * t2351 - t2344 * t2386) * t2426 - (t2340 * t2348 - t2343 * t2385) * t2424) * MDP(7) + (-t2289 * t2620 - t2290 * t2618 - t2291 * t2616 + t2340 * t2512 - t2341 * t2511 + t2342 * t2510) * MDP(13) + (-t2286 * t2618 - t2287 * t2616 - t2288 * t2620 + t2340 * t2509 + t2341 * t2508 + t2342 * t2507) * MDP(14) + t2492 + t2666 * (t2340 * t2542 + t2341 * t2540 + t2342 * t2538 - t2346 * t2620 - t2349 * t2618 - t2352 * t2616); (-(-t2414 * t2309 + t2322 * t2653) * t2603 - (-t2413 * t2307 + t2320 * t2655) * t2604 - (-t2412 * t2305 + t2318 * t2657) * t2605) * MDP(7) + ((-t2283 * t2600 + t2472 * t2384) * t2410 + (-t2281 * t2601 + t2474 * t2383) * t2408 + (-t2279 * t2602 + t2476 * t2382) * t2406) * MDP(13) + ((-t2275 * t2600 + t2471 * t2384) * t2410 + (-t2273 * t2601 + t2473 * t2383) * t2408 + (-t2277 * t2602 + t2475 * t2382) * t2406) * MDP(14) + t2493 + t2666 * ((t2317 * t2602 + t2382 * t2533) * t2406 + (t2319 * t2601 + t2383 * t2532) * t2408 + (t2321 * t2600 + t2384 * t2531) * t2410); (-(-t2414 * t2310 + t2328 * t2653) * t2603 - (-t2413 * t2308 + t2326 * t2655) * t2604 - (-t2412 * t2306 + t2324 * t2657) * t2605) * MDP(7) + ((-t2284 * t2600 + t2472 * t2387) * t2410 + (-t2282 * t2601 + t2474 * t2386) * t2408 + (-t2280 * t2602 + t2476 * t2385) * t2406) * MDP(13) + ((-t2276 * t2600 + t2471 * t2387) * t2410 + (-t2274 * t2601 + t2473 * t2386) * t2408 + (-t2278 * t2602 + t2475 * t2385) * t2406) * MDP(14) + t2492 + t2666 * ((t2323 * t2602 + t2385 * t2533) * t2406 + (t2325 * t2601 + t2386 * t2532) * t2408 + (t2327 * t2600 + t2387 * t2531) * t2410); (t2543 + t2544 + t2545) * MDP(1) + (qJ(2,1) * t2543 + qJ(2,2) * t2544 + qJ(2,3) * t2545) * t2660 + (-(-t2414 * t2345 + t2354 * t2653) * t2603 - (-t2413 * t2344 + t2351 * t2655) * t2604 - (-t2412 * t2343 + t2348 * t2657) * t2605) * MDP(7) + (t2391 * t2545 + t2392 * t2544 + t2393 * t2543) * MDP(8) + (t2358 * t2543 + t2359 * t2545 + t2360 * t2544) * t2659 + 0.2e1 * (-t2397 * t2541 - t2398 * t2539 - t2399 * t2537) * t2640 + 0.2e1 * (t2394 * t2541 - t2395 * t2539 + t2396 * t2537) * t2639 + (t2407 + t2409 + t2411) * MDP(12) / pkin(3) ^ 2 + ((-t2291 * t2603 + t2472 * t2411) * t2414 + (-t2290 * t2604 + t2474 * t2409) * t2413 + (-t2289 * t2605 + t2476 * t2407) * t2412) * MDP(13) + ((-t2287 * t2603 + t2471 * t2411) * t2414 + (-t2286 * t2604 + t2473 * t2409) * t2413 + (-t2288 * t2605 + t2475 * t2407) * t2412) * MDP(14) + MDP(15) + t2666 * ((-t2346 * t2605 + t2407 * t2533) * t2412 + (-t2349 * t2604 + t2409 * t2532) * t2413 + (-t2352 * t2603 + t2411 * t2531) * t2414);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
