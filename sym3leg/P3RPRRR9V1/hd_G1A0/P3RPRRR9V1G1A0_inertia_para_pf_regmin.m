% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR9V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR9V1G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:47:34
% EndTime: 2020-08-06 18:47:39
% DurationCPUTime: 5.09s
% Computational Cost: add. (7720->409), mult. (7701->838), div. (1494->14), fcn. (7656->32), ass. (0->342)
t801 = cos(pkin(7));
t796 = t801 ^ 2;
t1006 = -0.2e1 * t796;
t759 = t801 * pkin(2) + pkin(1);
t805 = pkin(5) + qJ(2,3);
t790 = -pkin(6) - t805;
t809 = sin(qJ(1,3));
t815 = cos(qJ(1,3));
t727 = t809 * t759 + t815 * t790;
t730 = t759 * t815 - t809 * t790;
t802 = legFrame(3,3);
t775 = sin(t802);
t778 = cos(t802);
t739 = -t775 * t809 + t778 * t815;
t797 = pkin(7) + qJ(3,3);
t772 = cos(t797);
t992 = pkin(3) * t772;
t694 = -t727 * t775 + t730 * t778 + t739 * t992;
t781 = 0.1e1 / t790;
t688 = t694 * t781;
t977 = t739 * t781;
t926 = pkin(1) * t977;
t674 = t688 - 0.2e1 * t926;
t806 = pkin(5) + qJ(2,2);
t791 = -pkin(6) - t806;
t811 = sin(qJ(1,2));
t817 = cos(qJ(1,2));
t728 = t811 * t759 + t817 * t791;
t731 = t759 * t817 - t811 * t791;
t803 = legFrame(2,3);
t776 = sin(t803);
t779 = cos(t803);
t740 = -t776 * t811 + t779 * t817;
t798 = pkin(7) + qJ(3,2);
t773 = cos(t798);
t991 = pkin(3) * t773;
t695 = -t728 * t776 + t731 * t779 + t740 * t991;
t783 = 0.1e1 / t791;
t689 = t695 * t783;
t976 = t740 * t783;
t925 = pkin(1) * t976;
t676 = t689 - 0.2e1 * t925;
t807 = pkin(5) + qJ(2,1);
t792 = -pkin(6) - t807;
t813 = sin(qJ(1,1));
t819 = cos(qJ(1,1));
t729 = t813 * t759 + t819 * t792;
t732 = t759 * t819 - t813 * t792;
t804 = legFrame(1,3);
t777 = sin(t804);
t780 = cos(t804);
t741 = -t777 * t813 + t780 * t819;
t799 = pkin(7) + qJ(3,1);
t774 = cos(t799);
t990 = pkin(3) * t774;
t696 = -t729 * t777 + t732 * t780 + t741 * t990;
t785 = 0.1e1 / t792;
t690 = t696 * t785;
t975 = t741 * t785;
t924 = pkin(1) * t975;
t678 = t690 - 0.2e1 * t924;
t782 = 0.1e1 / t790 ^ 2;
t784 = 0.1e1 / t791 ^ 2;
t786 = 0.1e1 / t792 ^ 2;
t1005 = (t678 * t785 + t696 * t786) * t741 + (t676 * t783 + t695 * t784) * t740 + (t674 * t781 + t694 * t782) * t739;
t742 = t775 * t815 + t778 * t809;
t697 = t727 * t778 + t730 * t775 + t742 * t992;
t691 = t697 * t781;
t974 = t742 * t781;
t923 = pkin(1) * t974;
t680 = t691 - 0.2e1 * t923;
t743 = t776 * t817 + t779 * t811;
t698 = t728 * t779 + t731 * t776 + t743 * t991;
t692 = t698 * t783;
t972 = t743 * t783;
t922 = pkin(1) * t972;
t682 = t692 - 0.2e1 * t922;
t744 = t777 * t819 + t780 * t813;
t699 = t729 * t780 + t732 * t777 + t744 * t990;
t693 = t699 * t785;
t970 = t744 * t785;
t921 = pkin(1) * t970;
t684 = t693 - 0.2e1 * t921;
t984 = t699 * t786;
t985 = t698 * t784;
t986 = t697 * t782;
t1004 = t742 * (t680 * t781 + t986) + t743 * (t682 * t783 + t985) + t744 * (t684 * t785 + t984);
t763 = 0.1e1 / t772;
t765 = 0.1e1 / t773;
t767 = 0.1e1 / t774;
t812 = sin(qJ(3,1));
t820 = 0.2e1 * pkin(7);
t771 = sin(t799);
t987 = t771 * pkin(1);
t936 = 0.2e1 * t987;
t720 = pkin(3) * sin(0.2e1 * t799) + t936 + (sin(t820 + qJ(3,1)) + t812) * pkin(2);
t994 = t720 / 0.2e1;
t885 = t786 * t994;
t810 = sin(qJ(3,2));
t770 = sin(t798);
t988 = t770 * pkin(1);
t937 = 0.2e1 * t988;
t719 = pkin(3) * sin(0.2e1 * t798) + t937 + (sin(t820 + qJ(3,2)) + t810) * pkin(2);
t996 = t719 / 0.2e1;
t886 = t784 * t996;
t808 = sin(qJ(3,3));
t769 = sin(t797);
t989 = t769 * pkin(1);
t938 = 0.2e1 * t989;
t718 = pkin(3) * sin(0.2e1 * t797) + t938 + (sin(t820 + qJ(3,3)) + t808) * pkin(2);
t998 = t718 / 0.2e1;
t887 = t782 * t998;
t954 = t771 * t785;
t955 = t770 * t783;
t956 = t769 * t781;
t1003 = t763 * (t680 * t956 + t742 * t887) + t765 * (t682 * t955 + t743 * t886) + t767 * (t684 * t954 + t744 * t885);
t1002 = t763 * (t674 * t956 + t739 * t887) + t765 * (t676 * t955 + t740 * t886) + t767 * (t678 * t954 + t741 * t885);
t959 = t763 * t781;
t999 = -t718 / 0.2e1;
t703 = (t938 + t999) * t959;
t958 = t765 * t783;
t997 = -t719 / 0.2e1;
t706 = (t937 + t997) * t958;
t957 = t767 * t785;
t995 = -t720 / 0.2e1;
t709 = (t936 + t995) * t957;
t764 = 0.1e1 / t772 ^ 2;
t766 = 0.1e1 / t773 ^ 2;
t768 = 0.1e1 / t774 ^ 2;
t1001 = t769 * (-t703 * t959 + t764 * t887) + t770 * (-t706 * t958 + t766 * t886) + t771 * (-t709 * t957 + t768 * t885);
t821 = 0.1e1 / pkin(3);
t1000 = 0.2e1 * t821;
t993 = pkin(2) * t796;
t733 = t739 ^ 2;
t983 = t733 * t782;
t734 = t740 ^ 2;
t982 = t734 * t784;
t735 = t741 ^ 2;
t981 = t735 * t786;
t736 = t742 ^ 2;
t980 = t736 * t782;
t737 = t743 ^ 2;
t979 = t737 * t784;
t738 = t744 ^ 2;
t978 = t738 * t786;
t973 = t742 * t782;
t971 = t743 * t784;
t969 = t744 * t786;
t800 = sin(pkin(7));
t814 = cos(qJ(3,3));
t946 = t814 * t800;
t754 = t808 * t801 + t946;
t748 = t754 ^ 2;
t968 = t748 * t782;
t816 = cos(qJ(3,2));
t944 = t816 * t800;
t755 = t810 * t801 + t944;
t749 = t755 ^ 2;
t967 = t749 * t784;
t818 = cos(qJ(3,1));
t942 = t818 * t800;
t756 = t812 * t801 + t942;
t750 = t756 ^ 2;
t966 = t750 * t786;
t945 = t814 * t801;
t949 = t808 * t800;
t751 = -t945 + t949;
t965 = t751 * t782;
t943 = t816 * t801;
t948 = t810 * t800;
t752 = t943 - t948;
t964 = t752 * t784;
t941 = t818 * t801;
t947 = t812 * t800;
t753 = -t941 + t947;
t963 = t753 * t786;
t962 = t754 * t782;
t961 = t755 * t784;
t960 = t756 * t786;
t953 = t800 * t801;
t952 = t805 * t821;
t951 = t806 * t821;
t950 = t807 * t821;
t940 = t796 - 0.1e1 / 0.2e1;
t939 = 0.2e1 * pkin(2) * t800;
t935 = -0.2e1 * t949;
t934 = -0.2e1 * t948;
t933 = -0.2e1 * t947;
t932 = t781 * t993;
t931 = pkin(2) * t781 * t814;
t930 = t783 * t993;
t929 = pkin(2) * t783 * t816;
t928 = t785 * t993;
t927 = pkin(2) * t785 * t818;
t920 = t694 * t965;
t919 = t694 * t962;
t918 = t695 * t964;
t917 = t695 * t961;
t916 = t696 * t963;
t915 = t696 * t960;
t914 = t697 * t965;
t913 = t697 * t962;
t912 = t698 * t964;
t911 = t698 * t961;
t910 = t699 * t963;
t909 = t699 * t960;
t908 = t739 * t973;
t907 = t740 * t971;
t906 = t741 * t969;
t905 = t751 * t959;
t904 = t752 * t958;
t903 = t753 * t957;
t902 = t754 * t959;
t901 = t755 * t958;
t900 = t756 * t957;
t899 = t769 ^ 2 * t782 * t764;
t898 = t770 ^ 2 * t784 * t766;
t897 = t771 ^ 2 * t786 * t768;
t896 = t763 * t769 * t782;
t895 = t764 * t956;
t894 = t765 * t770 * t784;
t893 = t766 * t955;
t892 = t767 * t771 * t786;
t891 = t768 * t954;
t890 = t781 * t952;
t889 = t783 * t951;
t888 = t785 * t950;
t884 = t781 * t939;
t883 = t783 * t939;
t882 = t785 * t939;
t881 = t808 * t932;
t880 = t800 * t931;
t879 = t810 * t930;
t878 = t800 * t929;
t877 = t812 * t928;
t876 = t800 * t927;
t875 = t739 * t896;
t874 = t740 * t894;
t873 = t741 * t892;
t872 = t742 * t896;
t871 = t743 * t894;
t870 = t744 * t892;
t869 = t748 * t896;
t868 = t749 * t894;
t867 = t750 * t892;
t866 = t751 * t896;
t865 = t752 * t894;
t864 = t753 * t892;
t863 = t754 * t896;
t862 = t755 * t894;
t861 = t756 * t892;
t860 = t931 * t1006;
t859 = t808 * t884;
t858 = t929 * t1006;
t857 = t810 * t883;
t856 = t927 * t1006;
t855 = t812 * t882;
t839 = 0.2e1 * t769 * t932 + t800 * t952;
t838 = 0.2e1 * t770 * t930 + t800 * t951;
t837 = 0.2e1 * t771 * t928 + t800 * t950;
t836 = t801 * (t769 * t884 - t952);
t835 = t801 * (t770 * t883 - t951);
t834 = t801 * (t771 * t882 - t950);
t833 = t751 * t887 + t754 * t890;
t832 = -t751 * t890 + t754 * t887;
t831 = t755 * t889 + t964 * t997;
t830 = t752 * t889 + t755 * t886;
t829 = t753 * t885 + t756 * t888;
t828 = -t753 * t888 + t756 * t885;
t827 = t674 * t974 + t676 * t972 + t678 * t970 + t739 * t986 + t740 * t985 + t741 * t984;
t826 = t680 * t977 + t682 * t976 + t684 * t975 + t694 * t973 + t695 * t971 + t696 * t969;
t825 = t694 * t896 + t695 * t894 + t696 * t892 - t703 * t977 - t706 * t976 - t709 * t975;
t824 = t697 * t896 + t698 * t894 + t699 * t892 - t703 * t974 - t706 * t972 - t709 * t970;
t823 = pkin(1) ^ 2;
t789 = qJ(2,1) ^ 2 + t823;
t788 = qJ(2,2) ^ 2 + t823;
t787 = qJ(2,3) ^ 2 + t823;
t717 = (t816 ^ 2 - 0.1e1 / 0.2e1) * t953 + t940 * t816 * t810;
t716 = (t814 ^ 2 - 0.1e1 / 0.2e1) * t953 + t940 * t814 * t808;
t715 = (t818 ^ 2 - 0.1e1 / 0.2e1) * t953 + t940 * t818 * t812;
t711 = t767 * pkin(1) * t954 + t957 * t995;
t710 = (t987 - t720 / 0.4e1) * t957;
t708 = t765 * pkin(1) * t955 + t958 * t997;
t707 = (t988 - t719 / 0.4e1) * t958;
t705 = t763 * pkin(1) * t956 + t959 * t999;
t704 = (t989 - t718 / 0.4e1) * t959;
t702 = (pkin(1) * t995 + t789 * t771) * t957;
t701 = (pkin(1) * t997 + t788 * t770) * t958;
t700 = (pkin(1) * t999 + t787 * t769) * t959;
t687 = t870 + t871 + t872;
t686 = t873 + t874 + t875;
t685 = -t693 + t921;
t683 = -t692 + t922;
t681 = -t691 + t923;
t679 = -t690 + t924;
t677 = -t689 + t925;
t675 = -t688 + t926;
t673 = -t921 + t693 / 0.2e1;
t672 = -t922 + t692 / 0.2e1;
t671 = -t923 + t691 / 0.2e1;
t670 = -t924 + t690 / 0.2e1;
t669 = -t925 + t689 / 0.2e1;
t668 = -t926 + t688 / 0.2e1;
t667 = 0.2e1 * qJ(2,1) * t870 + 0.2e1 * qJ(2,2) * t871 + 0.2e1 * qJ(2,3) * t872;
t666 = 0.2e1 * qJ(2,1) * t873 + 0.2e1 * qJ(2,2) * t874 + 0.2e1 * qJ(2,3) * t875;
t665 = (-pkin(1) * t699 + t744 * t789) * t785;
t664 = (-pkin(1) * t696 + t741 * t789) * t785;
t663 = (-pkin(1) * t698 + t743 * t788) * t783;
t662 = (-pkin(1) * t695 + t740 * t788) * t783;
t661 = (-pkin(1) * t697 + t742 * t787) * t781;
t660 = (-pkin(1) * t694 + t739 * t787) * t781;
t659 = t906 + t907 + t908;
t658 = 0.2e1 * qJ(2,1) * t906 + 0.2e1 * qJ(2,2) * t907 + 0.2e1 * qJ(2,3) * t908;
t657 = (-t742 * t902 - t743 * t901 - t744 * t900) * t821;
t656 = (t742 * t905 - t743 * t904 + t744 * t903) * t821;
t655 = (-t739 * t902 - t740 * t901 - t741 * t900) * t821;
t654 = (t739 * t905 - t740 * t904 + t741 * t903) * t821;
t653 = t742 * t869 + t743 * t868 + t744 * t867;
t652 = t739 * t869 + t740 * t868 + t741 * t867;
t651 = t748 * t908 + t749 * t907 + t750 * t906;
t650 = 0.4e1 * t715 * t870 + 0.4e1 * t716 * t872 + 0.4e1 * t717 * t871;
t649 = 0.4e1 * t715 * t873 + 0.4e1 * t716 * t875 + 0.4e1 * t717 * t874;
t648 = -t709 * t941 - t710 * t933 + (t812 * t834 - t837 * t818) * t767;
t647 = -t706 * t943 - t707 * t934 + (t810 * t835 - t838 * t816) * t765;
t646 = -t703 * t945 - t704 * t935 + (t808 * t836 - t839 * t814) * t763;
t645 = 0.2e1 * t754 * t704 + (t839 * t808 + t814 * t836) * t763;
t644 = 0.2e1 * t756 * t710 + (t837 * t812 + t818 * t834) * t767;
t643 = 0.2e1 * t755 * t707 + (t838 * t810 + t816 * t835) * t765;
t642 = 0.4e1 * t715 * t906 + 0.4e1 * t716 * t908 + 0.4e1 * t717 * t907;
t641 = t744 * t856 + (t684 * t818 + t744 * t855) * t801 + t673 * t933;
t640 = t741 * t856 + (t678 * t818 + t741 * t855) * t801 + t670 * t933;
t639 = t743 * t858 + (t682 * t816 + t743 * t857) * t801 + t672 * t934;
t638 = t740 * t858 + (t676 * t816 + t740 * t857) * t801 + t669 * t934;
t637 = t742 * t860 + (t680 * t814 + t742 * t859) * t801 + t671 * t935;
t636 = t739 * t860 + (t674 * t814 + t739 * t859) * t801 + t668 * t935;
t635 = 0.2e1 * t742 * t881 + 0.2e1 * (-t671 * t808 + t742 * t880) * t801 - 0.2e1 * t671 * t946;
t634 = 0.2e1 * t739 * t881 + 0.2e1 * (-t668 * t808 + t739 * t880) * t801 - 0.2e1 * t668 * t946;
t633 = 0.2e1 * t744 * t877 + 0.2e1 * (-t673 * t812 + t744 * t876) * t801 - 0.2e1 * t673 * t942;
t632 = 0.2e1 * t741 * t877 + 0.2e1 * (-t670 * t812 + t741 * t876) * t801 - 0.2e1 * t670 * t942;
t631 = 0.2e1 * t743 * t879 + 0.2e1 * (-t672 * t810 + t743 * t878) * t801 - 0.2e1 * t672 * t944;
t630 = 0.2e1 * t740 * t879 + 0.2e1 * (-t669 * t810 + t740 * t878) * t801 - 0.2e1 * t669 * t944;
t1 = [t981 + t982 + t983, 0, 0, -t1005 * t801, t1005 * t800, 0.2e1 * qJ(2,1) * t981 + 0.2e1 * qJ(2,2) * t982 + 0.2e1 * qJ(2,3) * t983, -(-t664 * t741 + t679 * t696) * t785 - (-t662 * t740 + t677 * t695) * t783 - (-t660 * t739 + t675 * t694) * t781, t733 * t968 + t734 * t967 + t735 * t966, 0.4e1 * t715 * t981 + 0.4e1 * t716 * t983 + 0.4e1 * t717 * t982, 0, 0, 0, (-t640 * t785 + t916) * t741 + (-t638 * t783 - t918) * t740 + (-t636 * t781 + t920) * t739, (-t632 * t785 + t915) * t741 + (-t630 * t783 + t917) * t740 + (-t634 * t781 + t919) * t739, 1; t659, 0, 0, -t826 * t801, t826 * t800, t658, -(-t665 * t741 + t685 * t696) * t785 - (-t663 * t740 + t683 * t695) * t783 - (-t661 * t739 + t681 * t694) * t781, t651, t642, 0, 0, 0, -t637 * t977 - t639 * t976 - t641 * t975 + t742 * t920 - t743 * t918 + t744 * t916, -t631 * t976 - t633 * t975 - t635 * t977 + t742 * t919 + t743 * t917 + t744 * t915, 0; t686, 0, 0, -t825 * t801, t825 * t800, t666, -(t696 * t711 - t702 * t741) * t785 - (t695 * t708 - t701 * t740) * t783 - (t694 * t705 - t700 * t739) * t781, t652, t649, t655, t654, 0, -t646 * t977 - t647 * t976 - t648 * t975 + t694 * t866 - t695 * t865 + t696 * t864, -t643 * t976 - t644 * t975 - t645 * t977 + t694 * t863 + t695 * t862 + t696 * t861, 0; t659, 0, 0, -t827 * t801, t827 * t800, t658, -(-t664 * t744 + t679 * t699) * t785 - (-t662 * t743 + t677 * t698) * t783 - (-t660 * t742 + t675 * t697) * t781, t651, t642, 0, 0, 0, -t636 * t974 - t638 * t972 - t640 * t970 + t739 * t914 - t740 * t912 + t741 * t910, -t630 * t972 - t632 * t970 - t634 * t974 + t739 * t913 + t740 * t911 + t741 * t909, 0; t978 + t979 + t980, 0, 0, -t1004 * t801, t1004 * t800, 0.2e1 * qJ(2,1) * t978 + 0.2e1 * qJ(2,2) * t979 + 0.2e1 * qJ(2,3) * t980, -(-t665 * t744 + t685 * t699) * t785 - (-t663 * t743 + t683 * t698) * t783 - (-t661 * t742 + t681 * t697) * t781, t736 * t968 + t737 * t967 + t738 * t966, 0.4e1 * t715 * t978 + 0.4e1 * t716 * t980 + 0.4e1 * t717 * t979, 0, 0, 0, (-t641 * t785 + t910) * t744 + (-t639 * t783 - t912) * t743 + (-t637 * t781 + t914) * t742, (-t633 * t785 + t909) * t744 + (-t631 * t783 + t911) * t743 + (-t635 * t781 + t913) * t742, 1; t687, 0, 0, -t824 * t801, t824 * t800, t667, -(t699 * t711 - t702 * t744) * t785 - (t698 * t708 - t701 * t743) * t783 - (t697 * t705 - t700 * t742) * t781, t653, t650, t657, t656, 0, -t646 * t974 - t647 * t972 - t648 * t970 + t697 * t866 - t698 * t865 + t699 * t864, -t643 * t972 - t644 * t970 - t645 * t974 + t697 * t863 + t698 * t862 + t699 * t861, 0; t686, 0, 0, -t1002 * t801, t1002 * t800, t666, -(-t771 * t664 + t679 * t994) * t957 - (-t770 * t662 + t677 * t996) * t958 - (-t769 * t660 + t675 * t998) * t959, t652, t649, t655, t654, 0, (-t640 * t954 + t741 * t829) * t767 + (-t638 * t955 + t740 * t831) * t765 + (-t636 * t956 + t739 * t833) * t763, (-t632 * t954 + t741 * t828) * t767 + (-t630 * t955 + t740 * t830) * t765 + (-t634 * t956 + t739 * t832) * t763, 0; t687, 0, 0, -t1003 * t801, t1003 * t800, t667, -(-t771 * t665 + t685 * t994) * t957 - (-t770 * t663 + t683 * t996) * t958 - (-t769 * t661 + t681 * t998) * t959, t653, t650, t657, t656, 0, (-t641 * t954 + t744 * t829) * t767 + (-t639 * t955 + t743 * t831) * t765 + (-t637 * t956 + t742 * t833) * t763, (-t633 * t954 + t744 * t828) * t767 + (-t631 * t955 + t743 * t830) * t765 + (-t635 * t956 + t742 * t832) * t763, 0; t897 + t898 + t899, 0, 0, -t1001 * t801, t1001 * t800, 0.2e1 * qJ(2,1) * t897 + 0.2e1 * qJ(2,2) * t898 + 0.2e1 * qJ(2,3) * t899, -(-t771 * t702 + t711 * t994) * t957 - (-t770 * t701 + t708 * t996) * t958 - (-t769 * t700 + t705 * t998) * t959, t748 * t899 + t749 * t898 + t750 * t897, 0.4e1 * t715 * t897 + 0.4e1 * t716 * t899 + 0.4e1 * t717 * t898, (-t754 * t895 - t755 * t893 - t756 * t891) * t1000, (t751 * t895 - t752 * t893 + t753 * t891) * t1000, (t764 + t766 + t768) / pkin(3) ^ 2, (-t648 * t957 + t768 * t829) * t771 + (-t647 * t958 + t766 * t831) * t770 + (-t646 * t959 + t764 * t833) * t769, (-t644 * t957 + t768 * t828) * t771 + (-t643 * t958 + t766 * t830) * t770 + (-t645 * t959 + t764 * t832) * t769, 1;];
tau_reg  = t1;
