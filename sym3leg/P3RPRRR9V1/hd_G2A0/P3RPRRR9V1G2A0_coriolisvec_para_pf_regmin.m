% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR9V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:53
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR9V1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR9V1G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G2A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:52:14
% EndTime: 2020-08-06 18:52:28
% DurationCPUTime: 13.35s
% Computational Cost: add. (69877->567), mult. (111885->1174), div. (6438->21), fcn. (82854->36), ass. (0->509)
t1792 = 2 * pkin(3);
t1401 = legFrame(3,2);
t1374 = sin(t1401);
t1377 = cos(t1401);
t1418 = xDP(2);
t1419 = xDP(1);
t1313 = t1374 * t1419 + t1377 * t1418;
t1799 = 0.2e1 * t1313;
t1402 = legFrame(2,2);
t1375 = sin(t1402);
t1378 = cos(t1402);
t1314 = t1375 * t1419 + t1378 * t1418;
t1798 = 0.2e1 * t1314;
t1403 = legFrame(1,2);
t1376 = sin(t1403);
t1379 = cos(t1403);
t1315 = t1376 * t1419 + t1379 * t1418;
t1797 = 0.2e1 * t1315;
t1397 = cos(pkin(7));
t1362 = t1397 * pkin(2);
t1340 = t1362 + pkin(1);
t1391 = pkin(7) + qJ(3,1);
t1361 = cos(t1391);
t1775 = pkin(3) * t1361;
t1330 = t1340 + t1775;
t1390 = pkin(7) + qJ(3,2);
t1360 = cos(t1390);
t1776 = pkin(3) * t1360;
t1329 = t1340 + t1776;
t1389 = pkin(7) + qJ(3,3);
t1359 = cos(t1389);
t1777 = pkin(3) * t1359;
t1328 = t1340 + t1777;
t1405 = sin(qJ(1,3));
t1411 = cos(qJ(1,3));
t1417 = xDP(3);
t1491 = t1374 * t1418 - t1377 * t1419;
t1295 = -t1491 * t1405 + t1411 * t1417;
t1356 = sin(t1389);
t1675 = t1356 * t1313;
t1271 = t1295 * t1359 + t1675;
t1344 = 0.1e1 / t1359;
t1437 = t1359 ^ 2;
t1345 = 0.1e1 / t1437;
t1398 = pkin(5) + qJ(2,3);
t1385 = pkin(6) + t1398;
t1365 = 0.1e1 / t1385;
t1708 = t1313 * t1365;
t1560 = t1345 * t1708;
t1431 = 1 / pkin(3);
t1706 = t1313 * t1431;
t1787 = 0.2e1 * t1389;
t1259 = (-t1271 * sin(t1787) / 0.2e1 + t1328 * t1706) * t1344 * t1560;
t1366 = 0.1e1 / t1385 ^ 2;
t1367 = t1365 * t1366;
t1388 = t1397 ^ 2;
t1410 = cos(qJ(3,3));
t1392 = t1410 ^ 2;
t1396 = sin(pkin(7));
t1404 = sin(qJ(3,3));
t1383 = pkin(1) * t1417;
t1650 = (-t1491 * pkin(1) + t1385 * t1417) * t1405 + (t1491 * t1385 + t1383) * t1411;
t1656 = t1410 * t1404;
t1659 = t1396 * t1404;
t1363 = pkin(1) * t1396;
t1699 = (-pkin(3) * t1404 + t1363) * t1410;
t1707 = t1313 * t1404;
t1720 = t1295 * t1392;
t1244 = ((t1295 * t1410 + t1707) * pkin(2) + (t1656 * t1799 - t1295 + 0.2e1 * t1720) * pkin(3)) * t1388 + (t1650 * t1410 + pkin(1) * t1707 + ((-t1295 * t1404 + t1313 * t1410) * pkin(2) + (-0.2e1 * t1295 * t1656 + t1392 * t1799 - t1313) * pkin(3)) * t1396) * t1397 - pkin(3) * t1720 + t1313 * t1699 - t1650 * t1659 + pkin(3) * t1295;
t1323 = t1397 * t1410 - t1659;
t1317 = 0.1e1 / t1323;
t1747 = t1244 * t1317;
t1599 = t1367 * t1747;
t1532 = t1328 * t1599;
t1693 = t1344 * t1365;
t1591 = t1271 * t1693;
t1266 = pkin(1) * t1591;
t1424 = 0.2e1 * pkin(7);
t1427 = (qJ(2,3) ^ 2);
t1430 = pkin(3) ^ 2;
t1434 = pkin(2) ^ 2;
t1435 = pkin(1) ^ 2;
t1461 = -t1434 * cos(t1424) - (2 * pkin(6) ^ 2) - t1430 - t1434 - 0.2e1 * t1435 + ((-4 * pkin(6) - 2 * pkin(5)) * pkin(5));
t1598 = t1365 * t1747;
t1636 = pkin(2) * t1792;
t1732 = t1271 * t1365;
t1781 = -4 * pkin(5) - 4 * pkin(6);
t1793 = 0.2e1 * pkin(1);
t1626 = (t1598 * t1793 + 0.4e1 * (-t1362 - t1777) * (t1266 - t1598 / 0.2e1) + (0.2e1 * t1385 * t1675 + ((qJ(2,3) * t1781) - t1430 * cos(t1787) - (2 * t1427) + (-cos(qJ(3,3) + t1424) - t1410) * t1636 + t1461) * t1732) * t1344) * t1366 / 0.2e1;
t1734 = t1271 * t1344;
t1454 = -(t1532 + t1626) * t1734 + t1259;
t1407 = sin(qJ(1,2));
t1413 = cos(qJ(1,2));
t1490 = t1375 * t1418 - t1378 * t1419;
t1296 = -t1490 * t1407 + t1413 * t1417;
t1357 = sin(t1390);
t1674 = t1357 * t1314;
t1272 = t1296 * t1360 + t1674;
t1348 = 0.1e1 / t1360;
t1440 = t1360 ^ 2;
t1349 = 0.1e1 / t1440;
t1399 = pkin(5) + qJ(2,2);
t1386 = pkin(6) + t1399;
t1368 = 1 / t1386;
t1705 = t1314 * t1368;
t1558 = t1349 * t1705;
t1703 = t1314 * t1431;
t1786 = 0.2e1 * t1390;
t1260 = (-t1272 * sin(t1786) / 0.2e1 + t1329 * t1703) * t1348 * t1558;
t1369 = 1 / t1386 ^ 2;
t1370 = t1368 * t1369;
t1412 = cos(qJ(3,2));
t1393 = t1412 ^ 2;
t1406 = sin(qJ(3,2));
t1649 = (-t1490 * pkin(1) + t1386 * t1417) * t1407 + (t1490 * t1386 + t1383) * t1413;
t1655 = t1412 * t1406;
t1658 = t1396 * t1406;
t1698 = (-pkin(3) * t1406 + t1363) * t1412;
t1704 = t1314 * t1406;
t1719 = t1296 * t1393;
t1245 = ((t1296 * t1412 + t1704) * pkin(2) + (t1655 * t1798 - t1296 + 0.2e1 * t1719) * pkin(3)) * t1388 + (t1649 * t1412 + pkin(1) * t1704 + ((-t1296 * t1406 + t1314 * t1412) * pkin(2) + (-0.2e1 * t1296 * t1655 + t1393 * t1798 - t1314) * pkin(3)) * t1396) * t1397 - pkin(3) * t1719 + t1314 * t1698 - t1649 * t1658 + pkin(3) * t1296;
t1324 = t1397 * t1412 - t1658;
t1318 = 0.1e1 / t1324;
t1746 = t1245 * t1318;
t1597 = t1370 * t1746;
t1530 = t1329 * t1597;
t1687 = t1348 * t1368;
t1586 = t1272 * t1687;
t1267 = pkin(1) * t1586;
t1428 = qJ(2,2) ^ 2;
t1596 = t1368 * t1746;
t1727 = t1272 * t1368;
t1625 = (t1596 * t1793 + 0.4e1 * (-t1362 - t1776) * (t1267 - t1596 / 0.2e1) + (0.2e1 * t1386 * t1674 + ((qJ(2,2) * t1781) - t1430 * cos(t1786) - (2 * t1428) + (-cos(t1424 + qJ(3,2)) - t1412) * t1636 + t1461) * t1727) * t1348) * t1369 / 0.2e1;
t1729 = t1272 * t1348;
t1453 = -(t1530 + t1625) * t1729 + t1260;
t1409 = sin(qJ(1,1));
t1415 = cos(qJ(1,1));
t1489 = t1376 * t1418 - t1379 * t1419;
t1297 = -t1489 * t1409 + t1415 * t1417;
t1358 = sin(t1391);
t1673 = t1358 * t1315;
t1273 = t1297 * t1361 + t1673;
t1352 = 0.1e1 / t1361;
t1443 = t1361 ^ 2;
t1353 = 0.1e1 / t1443;
t1400 = pkin(5) + qJ(2,1);
t1387 = pkin(6) + t1400;
t1371 = 1 / t1387;
t1702 = t1315 * t1371;
t1556 = t1353 * t1702;
t1700 = t1315 * t1431;
t1785 = 0.2e1 * t1391;
t1261 = (-t1273 * sin(t1785) / 0.2e1 + t1330 * t1700) * t1352 * t1556;
t1372 = 1 / t1387 ^ 2;
t1373 = t1371 * t1372;
t1414 = cos(qJ(3,1));
t1394 = t1414 ^ 2;
t1408 = sin(qJ(3,1));
t1648 = (-t1489 * pkin(1) + t1387 * t1417) * t1409 + (t1489 * t1387 + t1383) * t1415;
t1654 = t1414 * t1408;
t1657 = t1396 * t1408;
t1697 = (-pkin(3) * t1408 + t1363) * t1414;
t1701 = t1315 * t1408;
t1718 = t1297 * t1394;
t1246 = ((t1297 * t1414 + t1701) * pkin(2) + (t1654 * t1797 - t1297 + 0.2e1 * t1718) * pkin(3)) * t1388 + (t1648 * t1414 + pkin(1) * t1701 + ((-t1297 * t1408 + t1315 * t1414) * pkin(2) + (-0.2e1 * t1297 * t1654 + t1394 * t1797 - t1315) * pkin(3)) * t1396) * t1397 - pkin(3) * t1718 + t1315 * t1697 - t1648 * t1657 + pkin(3) * t1297;
t1322 = t1397 * t1414 - t1657;
t1316 = 0.1e1 / t1322;
t1745 = t1246 * t1316;
t1595 = t1373 * t1745;
t1528 = t1330 * t1595;
t1681 = t1352 * t1371;
t1581 = t1273 * t1681;
t1265 = pkin(1) * t1581;
t1429 = qJ(2,1) ^ 2;
t1594 = t1371 * t1745;
t1722 = t1273 * t1371;
t1624 = (t1594 * t1793 + 0.4e1 * (-t1362 - t1775) * (t1265 - t1594 / 0.2e1) + (0.2e1 * t1387 * t1673 + ((qJ(2,1) * t1781) - t1430 * cos(t1785) - (2 * t1429) + (-cos(qJ(3,1) + t1424) - t1414) * t1636 + t1461) * t1722) * t1352) * t1372 / 0.2e1;
t1724 = t1273 * t1352;
t1452 = -(t1528 + t1624) * t1724 + t1261;
t1354 = t1352 * t1353;
t1529 = t1273 * t1595;
t1680 = t1352 * t1397;
t1630 = pkin(2) * t1680;
t1312 = t1315 ^ 2;
t1709 = t1312 * t1371;
t1721 = t1273 * t1372;
t1235 = t1431 * t1354 * t1709 + (-(-t1265 + (t1745 + (-pkin(3) - t1630) * t1273) * t1371) * t1721 - t1529) * t1352;
t1774 = t1235 * pkin(1);
t1223 = -t1452 + 0.2e1 * t1774;
t1346 = t1344 * t1345;
t1533 = t1271 * t1599;
t1692 = t1344 * t1397;
t1632 = pkin(2) * t1692;
t1310 = t1313 ^ 2;
t1711 = t1310 * t1365;
t1731 = t1271 * t1366;
t1236 = t1431 * t1346 * t1711 + (-(-t1266 + (t1747 + (-pkin(3) - t1632) * t1271) * t1365) * t1731 - t1533) * t1344;
t1773 = t1236 * pkin(1);
t1225 = -t1454 + 0.2e1 * t1773;
t1350 = t1348 * t1349;
t1531 = t1272 * t1597;
t1686 = t1348 * t1397;
t1631 = pkin(2) * t1686;
t1311 = t1314 ^ 2;
t1710 = t1311 * t1368;
t1726 = t1272 * t1369;
t1237 = t1431 * t1350 * t1710 + (-(-t1267 + (t1746 + (-pkin(3) - t1631) * t1272) * t1368) * t1726 - t1531) * t1348;
t1772 = t1237 * pkin(1);
t1227 = -t1453 + 0.2e1 * t1772;
t1661 = t1379 * t1409;
t1306 = t1358 * t1376 + t1361 * t1661;
t1712 = t1306 * t1352;
t1662 = t1378 * t1407;
t1304 = t1357 * t1375 + t1360 * t1662;
t1714 = t1304 * t1348;
t1663 = t1377 * t1405;
t1302 = t1356 * t1374 + t1359 * t1663;
t1716 = t1302 * t1344;
t1539 = t1409 * pkin(1) - t1387 * t1415;
t1279 = t1539 * t1657 + (t1394 - 0.1e1) * t1409 * pkin(3);
t1766 = t1414 * pkin(2);
t1769 = t1394 * pkin(3);
t1300 = pkin(1) * t1408 + (-pkin(3) + t1766 + 0.2e1 * t1769) * t1396;
t1425 = -pkin(3) / 0.2e1;
t1333 = t1769 + t1766 / 0.2e1 + t1425;
t1549 = t1409 * t1657;
t1477 = pkin(2) * t1549 + (t1549 * t1792 - t1539) * t1414;
t1426 = pkin(2) / 0.2e1;
t1694 = (pkin(3) * t1414 + t1426) * t1408;
t1788 = 0.2e1 * t1388;
t1258 = (t1333 * t1661 + t1376 * t1694) * t1788 + (t1376 * t1300 - t1477 * t1379) * t1397 - t1279 * t1379 + t1376 * t1697;
t1742 = t1258 * t1235;
t1537 = pkin(1) * t1407 - t1386 * t1413;
t1278 = t1537 * t1658 + (t1393 - 0.1e1) * t1407 * pkin(3);
t1767 = t1412 * pkin(2);
t1770 = t1393 * pkin(3);
t1299 = pkin(1) * t1406 + (-pkin(3) + t1767 + 0.2e1 * t1770) * t1396;
t1332 = t1770 + t1767 / 0.2e1 + t1425;
t1550 = t1407 * t1658;
t1478 = pkin(2) * t1550 + (t1550 * t1792 - t1537) * t1412;
t1695 = (pkin(3) * t1412 + t1426) * t1406;
t1256 = (t1332 * t1662 + t1375 * t1695) * t1788 + (t1375 * t1299 - t1478 * t1378) * t1397 - t1278 * t1378 + t1375 * t1698;
t1743 = t1256 * t1237;
t1538 = pkin(1) * t1405 - t1385 * t1411;
t1277 = t1538 * t1659 + (t1392 - 0.1e1) * t1405 * pkin(3);
t1768 = t1410 * pkin(2);
t1771 = t1392 * pkin(3);
t1298 = pkin(1) * t1404 + (-pkin(3) + t1768 + 0.2e1 * t1771) * t1396;
t1331 = t1771 + t1768 / 0.2e1 + t1425;
t1551 = t1405 * t1659;
t1479 = pkin(2) * t1551 + (t1551 * t1792 - t1538) * t1410;
t1696 = (pkin(3) * t1410 + t1426) * t1404;
t1254 = (t1331 * t1663 + t1374 * t1696) * t1788 + (t1374 * t1298 - t1479 * t1377) * t1397 - t1277 * t1377 + t1374 * t1699;
t1744 = t1254 * t1236;
t1796 = (t1225 * t1716 - t1317 * t1744) * t1365 + (t1227 * t1714 - t1318 * t1743) * t1368 + (t1223 * t1712 - t1316 * t1742) * t1371;
t1664 = t1376 * t1409;
t1305 = t1358 * t1379 - t1361 * t1664;
t1713 = t1305 * t1352;
t1665 = t1375 * t1407;
t1303 = t1357 * t1378 - t1360 * t1665;
t1715 = t1303 * t1348;
t1666 = t1374 * t1405;
t1301 = t1356 * t1377 - t1359 * t1666;
t1717 = t1301 * t1344;
t1255 = (-t1332 * t1665 + t1378 * t1695) * t1788 + (t1378 * t1299 + t1478 * t1375) * t1397 + t1278 * t1375 + t1378 * t1698;
t1754 = t1237 * t1255;
t1253 = (-t1331 * t1666 + t1377 * t1696) * t1788 + (t1377 * t1298 + t1479 * t1374) * t1397 + t1277 * t1374 + t1377 * t1699;
t1758 = t1236 * t1253;
t1257 = (-t1333 * t1664 + t1379 * t1694) * t1788 + (t1379 * t1300 + t1477 * t1376) * t1397 + t1279 * t1376 + t1379 * t1697;
t1762 = t1235 * t1257;
t1795 = (t1225 * t1717 - t1317 * t1758) * t1365 + (t1227 * t1715 - t1318 * t1754) * t1368 + (t1223 * t1713 - t1316 * t1762) * t1371;
t1293 = t1329 * t1413 + t1386 * t1407;
t1753 = t1237 * t1293;
t1292 = t1328 * t1411 + t1385 * t1405;
t1757 = t1236 * t1292;
t1294 = t1330 * t1415 + t1387 * t1409;
t1761 = t1235 * t1294;
t1794 = (t1225 * t1411 - t1757) * t1365 + (t1227 * t1413 - t1753) * t1368 + (t1223 * t1415 - t1761) * t1371;
t1784 = -0.2e1 * t1404;
t1783 = -0.2e1 * t1406;
t1782 = -0.2e1 * t1408;
t1780 = 0.1e1 - 0.2e1 * t1388;
t1779 = 0.4e1 * t1388 - 0.2e1;
t1778 = pkin(2) * t1388;
t1224 = t1452 - t1774;
t1765 = t1224 * t1371;
t1226 = t1454 - t1773;
t1764 = t1226 * t1365;
t1228 = t1453 - t1772;
t1763 = t1228 * t1368;
t1327 = t1396 * t1414 + t1397 * t1408;
t1760 = t1235 * t1327;
t1759 = t1235 * t1352;
t1325 = t1396 * t1410 + t1397 * t1404;
t1756 = t1236 * t1325;
t1755 = t1236 * t1344;
t1326 = t1396 * t1412 + t1397 * t1406;
t1752 = t1237 * t1326;
t1751 = t1237 * t1348;
t1750 = (t1266 + (t1271 * t1632 - 0.2e1 * t1747) * t1365) * t1365;
t1749 = (t1267 + (t1272 * t1631 - 0.2e1 * t1746) * t1368) * t1368;
t1748 = (t1265 + (t1273 * t1630 - 0.2e1 * t1745) * t1371) * t1371;
t1268 = t1271 ^ 2;
t1741 = t1268 * t1374;
t1740 = t1268 * t1377;
t1269 = t1272 ^ 2;
t1739 = t1269 * t1375;
t1738 = t1269 * t1378;
t1270 = t1273 ^ 2;
t1737 = t1270 * t1376;
t1736 = t1270 * t1379;
t1735 = t1271 * t1313;
t1733 = t1271 * t1345;
t1730 = t1272 * t1314;
t1728 = t1272 * t1349;
t1725 = t1273 * t1315;
t1723 = t1273 * t1353;
t1691 = t1345 * t1367;
t1690 = t1346 * t1356;
t1689 = t1346 * t1366;
t1688 = 0.1e1 / t1437 ^ 2 * t1356;
t1685 = t1349 * t1370;
t1684 = t1350 * t1357;
t1683 = t1350 * t1369;
t1682 = 0.1e1 / t1440 ^ 2 * t1357;
t1679 = t1353 * t1373;
t1678 = t1354 * t1358;
t1677 = t1354 * t1372;
t1676 = 0.1e1 / t1443 ^ 2 * t1358;
t1672 = t1365 * t1236;
t1671 = t1365 * t1411;
t1670 = t1368 * t1237;
t1669 = t1368 * t1413;
t1668 = t1371 * t1235;
t1667 = t1371 * t1415;
t1660 = t1396 * t1397;
t1559 = t1398 * t1706;
t1512 = t1559 / 0.2e1;
t1523 = t1404 * t1591;
t1653 = t1344 * t1410 * t1512 + pkin(1) * t1523;
t1557 = t1399 * t1703;
t1511 = t1557 / 0.2e1;
t1521 = t1406 * t1586;
t1652 = t1348 * t1412 * t1511 + pkin(1) * t1521;
t1555 = t1400 * t1700;
t1510 = t1555 / 0.2e1;
t1519 = t1408 * t1581;
t1651 = t1352 * t1414 * t1510 + pkin(1) * t1519;
t1647 = t1388 - 0.1e1 / 0.2e1;
t1643 = 0.2e1 * t1244 * t1271;
t1642 = 0.2e1 * t1245 * t1272;
t1641 = 0.2e1 * t1246 * t1273;
t1640 = t1366 * t1799;
t1639 = t1369 * t1798;
t1638 = t1372 * t1797;
t1637 = -0.4e1 * t1660;
t1635 = t1235 * t1778;
t1634 = t1236 * t1778;
t1633 = t1237 * t1778;
t1629 = qJ(2,1) * t1679;
t1628 = qJ(2,2) * t1685;
t1627 = qJ(2,3) * t1691;
t1623 = t1316 * t1760;
t1622 = t1352 * t1668;
t1621 = t1376 * t1759;
t1620 = t1379 * t1759;
t1619 = t1400 * t1759;
t1618 = t1235 * t1667;
t1617 = t1317 * t1756;
t1616 = t1344 * t1672;
t1615 = t1374 * t1755;
t1614 = t1377 * t1755;
t1613 = t1398 * t1755;
t1612 = t1236 * t1671;
t1611 = t1318 * t1752;
t1610 = t1348 * t1670;
t1609 = t1375 * t1751;
t1608 = t1378 * t1751;
t1607 = t1399 * t1751;
t1606 = t1237 * t1669;
t1605 = t1374 * t1750;
t1604 = t1377 * t1750;
t1603 = t1375 * t1749;
t1602 = t1378 * t1749;
t1601 = t1376 * t1748;
t1600 = t1379 * t1748;
t1593 = t1301 * t1735;
t1592 = t1302 * t1735;
t1590 = t1345 * t1731;
t1589 = t1410 * t1732;
t1588 = t1303 * t1730;
t1587 = t1304 * t1730;
t1585 = t1349 * t1726;
t1584 = t1412 * t1727;
t1583 = t1305 * t1725;
t1582 = t1306 * t1725;
t1580 = t1353 * t1721;
t1579 = t1414 * t1722;
t1283 = (t1392 - 0.1e1 / 0.2e1) * t1660 + t1647 * t1656;
t1578 = t1283 * t1689;
t1284 = (t1393 - 0.1e1 / 0.2e1) * t1660 + t1647 * t1655;
t1577 = t1284 * t1683;
t1285 = (t1394 - 0.1e1 / 0.2e1) * t1660 + t1647 * t1654;
t1576 = t1285 * t1677;
t1289 = t1779 * t1392 + t1637 * t1656 + t1780;
t1575 = t1289 * t1689;
t1290 = t1779 * t1393 + t1637 * t1655 + t1780;
t1574 = t1290 * t1683;
t1291 = t1779 * t1394 + t1637 * t1654 + t1780;
t1573 = t1291 * t1677;
t1572 = t1301 * t1693;
t1571 = t1302 * t1693;
t1570 = t1303 * t1687;
t1569 = t1304 * t1687;
t1568 = t1305 * t1681;
t1567 = t1306 * t1681;
t1566 = t1310 * t1688;
t1565 = t1310 * t1671;
t1564 = t1311 * t1682;
t1563 = t1311 * t1669;
t1562 = t1312 * t1676;
t1561 = t1312 * t1667;
t1554 = t1344 * t1671;
t1553 = t1348 * t1669;
t1552 = t1352 * t1667;
t1548 = 0.4e1 * t1285 * t1668;
t1547 = 0.4e1 * t1283 * t1672;
t1546 = 0.4e1 * t1284 * t1670;
t1503 = pkin(2) * t1344 * t1589;
t1250 = -t1388 * t1503 + (t1404 * t1512 + (-pkin(1) * t1410 + pkin(2) * t1659) * t1732) * t1692 + t1653 * t1396;
t1545 = 0.2e1 * t1250 * t1708;
t1502 = pkin(2) * t1348 * t1584;
t1251 = -t1388 * t1502 + (t1406 * t1511 + (-pkin(1) * t1412 + pkin(2) * t1658) * t1727) * t1686 + t1652 * t1396;
t1544 = 0.2e1 * t1251 * t1705;
t1501 = pkin(2) * t1352 * t1579;
t1252 = -t1388 * t1501 + (t1408 * t1510 + (-pkin(1) * t1414 + pkin(2) * t1657) * t1722) * t1680 + t1651 * t1396;
t1543 = 0.2e1 * t1252 * t1702;
t1542 = t1317 * t1640;
t1541 = t1318 * t1639;
t1540 = t1316 * t1638;
t1321 = t1327 ^ 2;
t1536 = t1321 * t1622;
t1319 = t1325 ^ 2;
t1535 = t1319 * t1616;
t1320 = t1326 ^ 2;
t1534 = t1320 * t1610;
t1527 = t1268 * t1317 * t1691;
t1526 = t1269 * t1318 * t1685;
t1525 = t1270 * t1316 * t1679;
t1524 = t1292 * t1590;
t1522 = t1293 * t1585;
t1520 = t1294 * t1580;
t1518 = t1374 * t1613;
t1517 = t1375 * t1607;
t1516 = t1376 * t1619;
t1515 = t1377 * t1613;
t1514 = t1378 * t1607;
t1513 = t1379 * t1619;
t1509 = t1352 * t1548;
t1508 = t1344 * t1547;
t1507 = t1348 * t1546;
t1247 = t1523 * t1778 + (t1396 * t1503 + t1653) * t1397 + (pkin(1) * t1589 - t1404 * t1559 / 0.2e1) * t1344 * t1396;
t1506 = -0.2e1 * t1247 * t1560;
t1248 = t1521 * t1778 + (t1396 * t1502 + t1652) * t1397 + (pkin(1) * t1584 - t1406 * t1557 / 0.2e1) * t1348 * t1396;
t1505 = -0.2e1 * t1248 * t1558;
t1249 = t1519 * t1778 + (t1396 * t1501 + t1651) * t1397 + t1396 * (pkin(1) * t1579 - t1408 * t1555 / 0.2e1) * t1352;
t1504 = -0.2e1 * t1249 * t1556;
t1500 = t1313 * t1411 * t1590;
t1499 = t1314 * t1413 * t1585;
t1498 = t1315 * t1415 * t1580;
t1432 = 1 / pkin(3) ^ 2;
t1497 = t1310 * t1398 * t1432 * t1690;
t1496 = t1311 * t1399 * t1432 * t1684;
t1495 = t1312 * t1400 * t1432 * t1678;
t1220 = t1774 - t1261 / 0.2e1 + (t1624 / 0.2e1 + t1528 / 0.2e1) * t1724;
t1488 = -0.2e1 * t1235 * t1362 - 0.2e1 * t1220;
t1221 = t1773 - t1259 / 0.2e1 + (t1626 / 0.2e1 + t1532 / 0.2e1) * t1734;
t1487 = -0.2e1 * t1236 * t1362 - 0.2e1 * t1221;
t1222 = t1772 - t1260 / 0.2e1 + (t1625 / 0.2e1 + t1530 / 0.2e1) * t1729;
t1486 = -0.2e1 * t1237 * t1362 - 0.2e1 * t1222;
t1485 = t1410 * t1497;
t1484 = t1412 * t1496;
t1483 = t1406 * t1496;
t1482 = t1414 * t1495;
t1481 = t1408 * t1495;
t1480 = t1404 * t1497;
t1467 = (t1323 * t1346 + t1325 * t1688) * t1711;
t1466 = (t1323 * t1688 - t1325 * t1346) * t1711;
t1465 = (t1324 * t1350 + t1326 * t1682) * t1710;
t1464 = (t1324 * t1682 - t1326 * t1350) * t1710;
t1463 = (t1322 * t1354 + t1327 * t1676) * t1709;
t1462 = (t1322 * t1676 - t1327 * t1354) * t1709;
t1460 = (t1317 * t1344 * t1411 * t1643 - t1268 * t1292 * t1345) * t1367;
t1459 = (t1318 * t1348 * t1413 * t1642 - t1269 * t1293 * t1349) * t1370;
t1458 = (t1316 * t1352 * t1415 * t1641 - t1270 * t1294 * t1353) * t1373;
t1457 = 0.2e1 * qJ(2,1) * t1622 + 0.2e1 * t1353 * t1529;
t1456 = 0.2e1 * qJ(2,2) * t1610 + 0.2e1 * t1349 * t1531;
t1455 = 0.2e1 * qJ(2,3) * t1616 + 0.2e1 * t1345 * t1533;
t1433 = t1431 / t1430;
t1219 = (t1429 + t1435) * t1235 - pkin(1) * t1452;
t1218 = (t1428 + t1435) * t1237 - pkin(1) * t1453;
t1217 = (t1427 + t1435) * t1236 - pkin(1) * t1454;
t1216 = 0.2e1 * t1414 * t1635 + (t1223 * t1414 - t1481) * t1397 + (t1408 * t1488 - t1482) * t1396;
t1215 = 0.2e1 * t1412 * t1633 + (t1227 * t1412 - t1483) * t1397 + (t1406 * t1486 - t1484) * t1396;
t1214 = 0.2e1 * t1410 * t1634 + (t1225 * t1410 - t1480) * t1397 + (t1404 * t1487 - t1485) * t1396;
t1213 = t1635 * t1782 + (t1220 * t1782 - t1482) * t1397 + (t1414 * t1488 + t1481) * t1396;
t1212 = t1633 * t1783 + (t1222 * t1783 - t1484) * t1397 + (t1412 * t1486 + t1483) * t1396;
t1211 = t1634 * t1784 + (t1221 * t1784 - t1485) * t1397 + (t1410 * t1487 + t1480) * t1396;
t1 = [t1235 * t1567 + t1236 * t1571 + t1237 * t1569, 0, 0, t1796 * t1397, -t1796 * t1396, -t1254 * t1527 - t1256 * t1526 - t1258 * t1525 + t1302 * t1455 + t1304 * t1456 + t1306 * t1457, t1217 * t1571 + t1218 * t1569 + t1219 * t1567 + (t1256 * t1763 + (-t1256 * t1269 + t1304 * t1642) * t1628) * t1318 + (t1254 * t1764 + (-t1254 * t1268 + t1302 * t1643) * t1627) * t1317 + (t1258 * t1765 + (-t1258 * t1270 + t1306 * t1641) * t1629) * t1316, t1306 * t1536 + t1302 * t1535 + t1304 * t1534 + ((0.4e1 * t1582 - 0.2e1 * t1737) * t1576 + (0.4e1 * t1587 - 0.2e1 * t1739) * t1577 + (0.4e1 * t1592 - 0.2e1 * t1741) * t1578) * t1431, t1306 * t1509 + t1302 * t1508 + t1304 * t1507 + ((0.2e1 * t1582 - t1737) * t1573 + (0.2e1 * t1587 - t1739) * t1574 + (0.2e1 * t1592 - t1741) * t1575) * t1431, (t1325 * t1615 + t1326 * t1609 + t1327 * t1621) * t1431 + (t1302 * t1467 + t1304 * t1465 + t1306 * t1463) * t1432, (t1322 * t1621 + t1323 * t1615 + t1324 * t1609) * t1431 + (t1302 * t1466 + t1304 * t1464 + t1306 * t1462) * t1432, (t1374 * t1566 + t1375 * t1564 + t1376 * t1562) * t1433, (t1216 * t1712 - t1742) * t1371 + (t1215 * t1714 - t1743) * t1368 + (t1214 * t1716 - t1744) * t1365 + (t1302 * t1506 + t1304 * t1505 + t1306 * t1504 + (-t1516 + (t1258 * t1540 + t1601) * t1723) * t1327 + (-t1517 + (t1256 * t1541 + t1603) * t1728) * t1326 + (-t1518 + (t1254 * t1542 + t1605) * t1733) * t1325) * t1431, (t1213 * t1712 + t1258 * t1623) * t1371 + (t1212 * t1714 + t1256 * t1611) * t1368 + (t1211 * t1716 + t1254 * t1617) * t1365 + (-t1322 * t1516 - t1323 * t1518 - t1324 * t1517 + (t1306 * t1543 + (t1258 * t1638 + t1322 * t1601) * t1273) * t1353 + (t1304 * t1544 + (t1256 * t1639 + t1324 * t1603) * t1272) * t1349 + (t1302 * t1545 + (t1254 * t1640 + t1323 * t1605) * t1271) * t1345) * t1431, 0; t1235 * t1568 + t1236 * t1572 + t1237 * t1570, 0, 0, t1795 * t1397, -t1795 * t1396, -t1253 * t1527 - t1255 * t1526 - t1257 * t1525 + t1301 * t1455 + t1303 * t1456 + t1305 * t1457, t1217 * t1572 + t1218 * t1570 + t1219 * t1568 + (t1255 * t1763 + (-t1255 * t1269 + t1303 * t1642) * t1628) * t1318 + (t1253 * t1764 + (-t1253 * t1268 + t1301 * t1643) * t1627) * t1317 + (t1257 * t1765 + (-t1257 * t1270 + t1305 * t1641) * t1629) * t1316, t1305 * t1536 + t1301 * t1535 + t1303 * t1534 + ((0.4e1 * t1583 - 0.2e1 * t1736) * t1576 + (0.4e1 * t1588 - 0.2e1 * t1738) * t1577 + (0.4e1 * t1593 - 0.2e1 * t1740) * t1578) * t1431, t1305 * t1509 + t1301 * t1508 + t1303 * t1507 + ((0.2e1 * t1583 - t1736) * t1573 + (0.2e1 * t1588 - t1738) * t1574 + (0.2e1 * t1593 - t1740) * t1575) * t1431, (t1325 * t1614 + t1326 * t1608 + t1327 * t1620) * t1431 + (t1301 * t1467 + t1303 * t1465 + t1305 * t1463) * t1432, (t1322 * t1620 + t1323 * t1614 + t1324 * t1608) * t1431 + (t1301 * t1466 + t1303 * t1464 + t1305 * t1462) * t1432, (t1377 * t1566 + t1378 * t1564 + t1379 * t1562) * t1433, (t1216 * t1713 - t1762) * t1371 + (t1215 * t1715 - t1754) * t1368 + (t1214 * t1717 - t1758) * t1365 + (t1301 * t1506 + t1303 * t1505 + t1305 * t1504 + (-t1513 + (t1257 * t1540 + t1600) * t1723) * t1327 + (-t1514 + (t1255 * t1541 + t1602) * t1728) * t1326 + (-t1515 + (t1253 * t1542 + t1604) * t1733) * t1325) * t1431, (t1213 * t1713 + t1257 * t1623) * t1371 + (t1212 * t1715 + t1255 * t1611) * t1368 + (t1211 * t1717 + t1253 * t1617) * t1365 + (-t1322 * t1513 - t1323 * t1515 - t1324 * t1514 + (t1305 * t1543 + (t1257 * t1638 + t1322 * t1600) * t1273) * t1353 + (t1303 * t1544 + (t1255 * t1639 + t1324 * t1602) * t1272) * t1349 + (t1301 * t1545 + (t1253 * t1640 + t1323 * t1604) * t1271) * t1345) * t1431, 0; t1606 + t1612 + t1618, 0, 0, t1794 * t1397, -t1794 * t1396, 0.2e1 * qJ(2,1) * t1618 + 0.2e1 * qJ(2,2) * t1606 + 0.2e1 * qJ(2,3) * t1612 + t1458 + t1459 + t1460, (t1219 * t1415 + t1224 * t1294) * t1371 + (t1218 * t1413 + t1228 * t1293) * t1368 + (t1217 * t1411 + t1226 * t1292) * t1365 + qJ(2,3) * t1460 + qJ(2,2) * t1459 + qJ(2,1) * t1458, t1321 * t1618 + t1319 * t1612 + t1320 * t1606 + 0.4e1 * (t1283 * t1500 + t1284 * t1499 + t1285 * t1498) * t1431, t1415 * t1548 + t1411 * t1547 + t1413 * t1546 + 0.2e1 * (t1289 * t1500 + t1290 * t1499 + t1291 * t1498) * t1431, ((t1322 * t1353 + t1327 * t1678) * t1561 + (t1324 * t1349 + t1326 * t1684) * t1563 + (t1323 * t1345 + t1325 * t1690) * t1565) * t1432, ((t1322 * t1678 - t1327 * t1353) * t1561 + (t1324 * t1684 - t1326 * t1349) * t1563 + (t1323 * t1690 - t1325 * t1345) * t1565) * t1432, 0, (t1216 * t1415 - t1322 * t1761) * t1371 + (t1215 * t1413 - t1324 * t1753) * t1368 + (t1214 * t1411 - t1323 * t1757) * t1365 + ((-t1249 * t1552 + t1327 * t1520) * t1797 + (-t1248 * t1553 + t1326 * t1522) * t1798 + (-t1247 * t1554 + t1325 * t1524) * t1799) * t1431, (t1213 * t1415 + t1294 * t1760) * t1371 + (t1212 * t1413 + t1293 * t1752) * t1368 + (t1211 * t1411 + t1292 * t1756) * t1365 + ((t1252 * t1552 + t1322 * t1520) * t1797 + (t1251 * t1553 + t1324 * t1522) * t1798 + (t1250 * t1554 + t1323 * t1524) * t1799) * t1431, 0;];
tau_reg  = t1;
