% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR9V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR9V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:58
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:58:01
% EndTime: 2020-08-06 18:58:19
% DurationCPUTime: 18.15s
% Computational Cost: add. (69909->594), mult. (111920->1191), div. (6438->21), fcn. (82854->36), ass. (0->507)
t3492 = sin(pkin(7));
t3493 = cos(pkin(7));
t3899 = MDP(4) * t3493 - MDP(5) * t3492;
t3891 = 2 * pkin(3);
t3497 = legFrame(3,2);
t3470 = sin(t3497);
t3473 = cos(t3497);
t3514 = xDP(2);
t3515 = xDP(1);
t3409 = t3470 * t3515 + t3473 * t3514;
t3898 = 0.2e1 * t3409;
t3498 = legFrame(2,2);
t3471 = sin(t3498);
t3474 = cos(t3498);
t3410 = t3471 * t3515 + t3474 * t3514;
t3897 = 0.2e1 * t3410;
t3499 = legFrame(1,2);
t3472 = sin(t3499);
t3475 = cos(t3499);
t3411 = t3472 * t3515 + t3475 * t3514;
t3896 = 0.2e1 * t3411;
t3458 = t3493 * pkin(2);
t3439 = t3458 + pkin(1);
t3487 = pkin(7) + qJ(3,1);
t3457 = cos(t3487);
t3874 = pkin(3) * t3457;
t3426 = t3439 + t3874;
t3486 = pkin(7) + qJ(3,2);
t3456 = cos(t3486);
t3875 = pkin(3) * t3456;
t3425 = t3439 + t3875;
t3485 = pkin(7) + qJ(3,3);
t3455 = cos(t3485);
t3876 = pkin(3) * t3455;
t3424 = t3439 + t3876;
t3501 = sin(qJ(1,3));
t3507 = cos(qJ(1,3));
t3513 = xDP(3);
t3587 = t3470 * t3514 - t3473 * t3515;
t3391 = -t3501 * t3513 - t3507 * t3587;
t3452 = sin(t3485);
t3771 = t3452 * t3409;
t3367 = t3391 * t3455 + t3771;
t3440 = 0.1e1 / t3455;
t3533 = t3455 ^ 2;
t3441 = 0.1e1 / t3533;
t3494 = pkin(5) + qJ(2,3);
t3481 = pkin(6) + t3494;
t3461 = 0.1e1 / t3481;
t3804 = t3409 * t3461;
t3656 = t3441 * t3804;
t3527 = 1 / pkin(3);
t3802 = t3409 * t3527;
t3886 = 0.2e1 * t3485;
t3355 = (-t3367 * sin(t3886) / 0.2e1 + t3424 * t3802) * t3440 * t3656;
t3462 = 0.1e1 / t3481 ^ 2;
t3463 = t3461 * t3462;
t3484 = t3493 ^ 2;
t3506 = cos(qJ(3,3));
t3488 = t3506 ^ 2;
t3500 = sin(qJ(3,3));
t3479 = pkin(1) * t3513;
t3635 = -(t3481 * t3587 + t3479) * t3501 + (-pkin(1) * t3587 + t3481 * t3513) * t3507;
t3755 = t3506 * t3500;
t3758 = t3492 * t3500;
t3459 = pkin(1) * t3492;
t3795 = (-pkin(3) * t3500 + t3459) * t3506;
t3803 = t3409 * t3500;
t3816 = t3391 * t3488;
t3340 = ((t3391 * t3506 + t3803) * pkin(2) + (t3755 * t3898 - t3391 + 0.2e1 * t3816) * pkin(3)) * t3484 + (t3635 * t3506 + pkin(1) * t3803 + ((-t3391 * t3500 + t3409 * t3506) * pkin(2) + (-0.2e1 * t3391 * t3755 + t3488 * t3898 - t3409) * pkin(3)) * t3492) * t3493 - pkin(3) * t3816 + t3409 * t3795 - t3635 * t3758 + pkin(3) * t3391;
t3419 = t3493 * t3506 - t3758;
t3413 = 0.1e1 / t3419;
t3846 = t3340 * t3413;
t3695 = t3463 * t3846;
t3628 = t3424 * t3695;
t3789 = t3440 * t3461;
t3687 = t3367 * t3789;
t3362 = pkin(1) * t3687;
t3520 = 0.2e1 * pkin(7);
t3523 = (qJ(2,3) ^ 2);
t3526 = pkin(3) ^ 2;
t3530 = pkin(2) ^ 2;
t3531 = pkin(1) ^ 2;
t3557 = -t3530 * cos(t3520) - (2 * pkin(6) ^ 2) - t3526 - t3530 - 0.2e1 * t3531 + ((-4 * pkin(6) - 2 * pkin(5)) * pkin(5));
t3694 = t3461 * t3846;
t3732 = pkin(2) * t3891;
t3828 = t3367 * t3461;
t3880 = -4 * pkin(5) - 4 * pkin(6);
t3892 = 0.2e1 * pkin(1);
t3722 = (t3694 * t3892 + 0.4e1 * (-t3458 - t3876) * (t3362 - t3694 / 0.2e1) + (0.2e1 * t3481 * t3771 + ((qJ(2,3) * t3880) - t3526 * cos(t3886) - (2 * t3523) + (-cos(qJ(3,3) + t3520) - t3506) * t3732 + t3557) * t3828) * t3440) * t3462 / 0.2e1;
t3830 = t3367 * t3440;
t3550 = -(t3628 + t3722) * t3830 + t3355;
t3503 = sin(qJ(1,2));
t3509 = cos(qJ(1,2));
t3586 = t3471 * t3514 - t3474 * t3515;
t3392 = -t3503 * t3513 - t3509 * t3586;
t3453 = sin(t3486);
t3770 = t3453 * t3410;
t3368 = t3392 * t3456 + t3770;
t3444 = 0.1e1 / t3456;
t3536 = t3456 ^ 2;
t3445 = 0.1e1 / t3536;
t3495 = pkin(5) + qJ(2,2);
t3482 = pkin(6) + t3495;
t3464 = 1 / t3482;
t3801 = t3410 * t3464;
t3654 = t3445 * t3801;
t3799 = t3410 * t3527;
t3885 = 0.2e1 * t3486;
t3356 = (-t3368 * sin(t3885) / 0.2e1 + t3425 * t3799) * t3444 * t3654;
t3465 = 1 / t3482 ^ 2;
t3466 = t3464 * t3465;
t3508 = cos(qJ(3,2));
t3489 = t3508 ^ 2;
t3502 = sin(qJ(3,2));
t3634 = -(t3482 * t3586 + t3479) * t3503 + (-pkin(1) * t3586 + t3482 * t3513) * t3509;
t3754 = t3508 * t3502;
t3757 = t3492 * t3502;
t3794 = (-pkin(3) * t3502 + t3459) * t3508;
t3800 = t3410 * t3502;
t3815 = t3392 * t3489;
t3341 = ((t3392 * t3508 + t3800) * pkin(2) + (t3754 * t3897 - t3392 + 0.2e1 * t3815) * pkin(3)) * t3484 + (t3634 * t3508 + pkin(1) * t3800 + ((-t3392 * t3502 + t3410 * t3508) * pkin(2) + (-0.2e1 * t3392 * t3754 + t3489 * t3897 - t3410) * pkin(3)) * t3492) * t3493 - pkin(3) * t3815 + t3410 * t3794 - t3634 * t3757 + pkin(3) * t3392;
t3420 = t3493 * t3508 - t3757;
t3414 = 0.1e1 / t3420;
t3845 = t3341 * t3414;
t3693 = t3466 * t3845;
t3626 = t3425 * t3693;
t3783 = t3444 * t3464;
t3682 = t3368 * t3783;
t3363 = pkin(1) * t3682;
t3524 = qJ(2,2) ^ 2;
t3692 = t3464 * t3845;
t3823 = t3368 * t3464;
t3721 = (t3692 * t3892 + 0.4e1 * (-t3458 - t3875) * (t3363 - t3692 / 0.2e1) + (0.2e1 * t3482 * t3770 + ((qJ(2,2) * t3880) - t3526 * cos(t3885) - (2 * t3524) + (-cos(qJ(3,2) + t3520) - t3508) * t3732 + t3557) * t3823) * t3444) * t3465 / 0.2e1;
t3825 = t3368 * t3444;
t3549 = -(t3626 + t3721) * t3825 + t3356;
t3505 = sin(qJ(1,1));
t3511 = cos(qJ(1,1));
t3585 = t3472 * t3514 - t3475 * t3515;
t3393 = -t3505 * t3513 - t3511 * t3585;
t3454 = sin(t3487);
t3769 = t3454 * t3411;
t3369 = t3393 * t3457 + t3769;
t3448 = 0.1e1 / t3457;
t3539 = t3457 ^ 2;
t3449 = 0.1e1 / t3539;
t3496 = pkin(5) + qJ(2,1);
t3483 = pkin(6) + t3496;
t3467 = 1 / t3483;
t3798 = t3411 * t3467;
t3652 = t3449 * t3798;
t3796 = t3411 * t3527;
t3884 = 0.2e1 * t3487;
t3357 = (-t3369 * sin(t3884) / 0.2e1 + t3426 * t3796) * t3448 * t3652;
t3468 = 1 / t3483 ^ 2;
t3469 = t3467 * t3468;
t3510 = cos(qJ(3,1));
t3490 = t3510 ^ 2;
t3504 = sin(qJ(3,1));
t3633 = -(t3483 * t3585 + t3479) * t3505 + (-pkin(1) * t3585 + t3483 * t3513) * t3511;
t3753 = t3510 * t3504;
t3756 = t3492 * t3504;
t3793 = (-pkin(3) * t3504 + t3459) * t3510;
t3797 = t3411 * t3504;
t3814 = t3393 * t3490;
t3342 = ((t3393 * t3510 + t3797) * pkin(2) + (t3753 * t3896 - t3393 + 0.2e1 * t3814) * pkin(3)) * t3484 + (t3633 * t3510 + pkin(1) * t3797 + ((-t3393 * t3504 + t3411 * t3510) * pkin(2) + (-0.2e1 * t3393 * t3753 + t3490 * t3896 - t3411) * pkin(3)) * t3492) * t3493 - pkin(3) * t3814 + t3411 * t3793 - t3633 * t3756 + pkin(3) * t3393;
t3418 = t3493 * t3510 - t3756;
t3412 = 0.1e1 / t3418;
t3844 = t3342 * t3412;
t3691 = t3469 * t3844;
t3624 = t3426 * t3691;
t3777 = t3448 * t3467;
t3677 = t3369 * t3777;
t3361 = pkin(1) * t3677;
t3525 = qJ(2,1) ^ 2;
t3690 = t3467 * t3844;
t3818 = t3369 * t3467;
t3720 = (t3690 * t3892 + 0.4e1 * (-t3458 - t3874) * (t3361 - t3690 / 0.2e1) + (0.2e1 * t3483 * t3769 + ((qJ(2,1) * t3880) - t3526 * cos(t3884) - (2 * t3525) + (-cos(t3520 + qJ(3,1)) - t3510) * t3732 + t3557) * t3818) * t3448) * t3468 / 0.2e1;
t3820 = t3369 * t3448;
t3548 = -(t3624 + t3720) * t3820 + t3357;
t3887 = 0.2e1 * t3484;
t3883 = -0.2e1 * t3500;
t3882 = -0.2e1 * t3502;
t3881 = -0.2e1 * t3504;
t3879 = 0.1e1 - 0.2e1 * t3484;
t3878 = 0.4e1 * t3484 - 0.2e1;
t3877 = pkin(2) * t3484;
t3450 = t3448 * t3449;
t3625 = t3369 * t3691;
t3776 = t3448 * t3493;
t3726 = pkin(2) * t3776;
t3408 = t3411 ^ 2;
t3805 = t3408 * t3467;
t3817 = t3369 * t3468;
t3331 = t3527 * t3450 * t3805 + (-(-t3361 + (t3844 + (-pkin(3) - t3726) * t3369) * t3467) * t3817 - t3625) * t3448;
t3873 = t3331 * pkin(1);
t3442 = t3440 * t3441;
t3629 = t3367 * t3695;
t3788 = t3440 * t3493;
t3728 = pkin(2) * t3788;
t3406 = t3409 ^ 2;
t3807 = t3406 * t3461;
t3827 = t3367 * t3462;
t3332 = t3527 * t3442 * t3807 + (-(-t3362 + (t3846 + (-pkin(3) - t3728) * t3367) * t3461) * t3827 - t3629) * t3440;
t3872 = t3332 * pkin(1);
t3446 = t3444 * t3445;
t3627 = t3368 * t3693;
t3782 = t3444 * t3493;
t3727 = pkin(2) * t3782;
t3407 = t3410 ^ 2;
t3806 = t3407 * t3464;
t3822 = t3368 * t3465;
t3333 = t3527 * t3446 * t3806 + (-(-t3363 + (t3845 + (-pkin(3) - t3727) * t3368) * t3464) * t3822 - t3627) * t3444;
t3871 = t3333 * pkin(1);
t3870 = t3488 * pkin(3);
t3869 = t3489 * pkin(3);
t3868 = t3490 * pkin(3);
t3867 = t3506 * pkin(2);
t3866 = t3508 * pkin(2);
t3865 = t3510 * pkin(2);
t3862 = MDP(12) * t3527 / t3526;
t3320 = t3548 - t3873;
t3861 = t3320 * t3467;
t3322 = t3550 - t3872;
t3860 = t3322 * t3461;
t3324 = t3549 - t3871;
t3859 = t3324 * t3464;
t3390 = -t3426 * t3505 + t3483 * t3511;
t3858 = t3331 * t3390;
t3423 = t3492 * t3510 + t3493 * t3504;
t3857 = t3331 * t3423;
t3856 = t3331 * t3448;
t3388 = -t3424 * t3501 + t3481 * t3507;
t3855 = t3332 * t3388;
t3421 = t3492 * t3506 + t3493 * t3500;
t3854 = t3332 * t3421;
t3853 = t3332 * t3440;
t3389 = -t3425 * t3503 + t3482 * t3509;
t3852 = t3333 * t3389;
t3422 = t3492 * t3508 + t3493 * t3502;
t3851 = t3333 * t3422;
t3850 = t3333 * t3444;
t3741 = -0.2e1 * t3846;
t3849 = (t3362 + (t3367 * t3728 + t3741) * t3461) * t3461;
t3739 = -0.2e1 * t3845;
t3848 = (t3363 + (t3368 * t3727 + t3739) * t3464) * t3464;
t3737 = -0.2e1 * t3844;
t3847 = (t3361 + (t3369 * t3726 + t3737) * t3467) * t3467;
t3748 = pkin(1) * t3507 + t3501 * t3481;
t3370 = t3748 * t3758 + (t3488 - 0.1e1) * t3507 * pkin(3);
t3394 = pkin(1) * t3500 + (-pkin(3) + t3867 + 0.2e1 * t3870) * t3492;
t3521 = -pkin(3) / 0.2e1;
t3427 = t3870 + t3867 / 0.2e1 + t3521;
t3647 = t3507 * t3758;
t3575 = pkin(2) * t3647 + (t3647 * t3891 - t3748) * t3506;
t3765 = t3470 * t3507;
t3522 = pkin(2) / 0.2e1;
t3792 = (pkin(3) * t3506 + t3522) * t3500;
t3349 = (-t3427 * t3765 + t3473 * t3792) * t3887 + (t3473 * t3394 + t3470 * t3575) * t3493 + t3370 * t3470 + t3473 * t3795;
t3843 = t3349 * t3332;
t3762 = t3473 * t3507;
t3350 = (t3427 * t3762 + t3470 * t3792) * t3887 + (t3470 * t3394 - t3473 * t3575) * t3493 - t3370 * t3473 + t3470 * t3795;
t3842 = t3350 * t3332;
t3747 = pkin(1) * t3509 + t3503 * t3482;
t3371 = t3747 * t3757 + (t3489 - 0.1e1) * t3509 * pkin(3);
t3395 = pkin(1) * t3502 + (-pkin(3) + t3866 + 0.2e1 * t3869) * t3492;
t3428 = t3869 + t3866 / 0.2e1 + t3521;
t3646 = t3509 * t3757;
t3574 = pkin(2) * t3646 + (t3646 * t3891 - t3747) * t3508;
t3764 = t3471 * t3509;
t3791 = (pkin(3) * t3508 + t3522) * t3502;
t3351 = (-t3428 * t3764 + t3474 * t3791) * t3887 + (t3474 * t3395 + t3471 * t3574) * t3493 + t3371 * t3471 + t3474 * t3794;
t3841 = t3351 * t3333;
t3761 = t3474 * t3509;
t3352 = (t3428 * t3761 + t3471 * t3791) * t3887 + (t3471 * t3395 - t3474 * t3574) * t3493 - t3371 * t3474 + t3471 * t3794;
t3840 = t3352 * t3333;
t3749 = t3511 * pkin(1) + t3505 * t3483;
t3372 = t3749 * t3756 + (t3490 - 0.1e1) * t3511 * pkin(3);
t3396 = pkin(1) * t3504 + (-pkin(3) + t3865 + 0.2e1 * t3868) * t3492;
t3429 = t3868 + t3865 / 0.2e1 + t3521;
t3645 = t3511 * t3756;
t3573 = pkin(2) * t3645 + (t3645 * t3891 - t3749) * t3510;
t3763 = t3472 * t3511;
t3790 = (pkin(3) * t3510 + t3522) * t3504;
t3353 = (-t3429 * t3763 + t3475 * t3790) * t3887 + (t3475 * t3396 + t3472 * t3573) * t3493 + t3372 * t3472 + t3475 * t3793;
t3839 = t3353 * t3331;
t3760 = t3475 * t3511;
t3354 = (t3429 * t3760 + t3472 * t3790) * t3887 + (t3472 * t3396 - t3475 * t3573) * t3493 - t3372 * t3475 + t3472 * t3793;
t3838 = t3354 * t3331;
t3364 = t3367 ^ 2;
t3837 = t3364 * t3470;
t3836 = t3364 * t3473;
t3365 = t3368 ^ 2;
t3835 = t3365 * t3471;
t3834 = t3365 * t3474;
t3366 = t3369 ^ 2;
t3833 = t3366 * t3472;
t3832 = t3366 * t3475;
t3831 = t3367 * t3409;
t3829 = t3367 * t3441;
t3826 = t3368 * t3410;
t3824 = t3368 * t3445;
t3821 = t3369 * t3411;
t3819 = t3369 * t3449;
t3397 = t3452 * t3473 - t3455 * t3765;
t3813 = t3397 * t3440;
t3398 = t3452 * t3470 + t3455 * t3762;
t3812 = t3398 * t3440;
t3399 = t3453 * t3474 - t3456 * t3764;
t3811 = t3399 * t3444;
t3400 = t3453 * t3471 + t3456 * t3761;
t3810 = t3400 * t3444;
t3401 = t3454 * t3475 - t3457 * t3763;
t3809 = t3401 * t3448;
t3402 = t3454 * t3472 + t3457 * t3760;
t3808 = t3402 * t3448;
t3787 = t3441 * t3463;
t3786 = t3442 * t3452;
t3785 = t3442 * t3462;
t3784 = 0.1e1 / t3533 ^ 2 * t3452;
t3781 = t3445 * t3466;
t3780 = t3446 * t3453;
t3779 = t3446 * t3465;
t3778 = 0.1e1 / t3536 ^ 2 * t3453;
t3775 = t3449 * t3469;
t3774 = t3450 * t3454;
t3773 = t3450 * t3468;
t3772 = 0.1e1 / t3539 ^ 2 * t3454;
t3768 = t3461 * t3501;
t3767 = t3464 * t3503;
t3766 = t3467 * t3505;
t3759 = t3492 * t3493;
t3655 = t3494 * t3802;
t3608 = t3655 / 0.2e1;
t3619 = t3500 * t3687;
t3752 = t3440 * t3506 * t3608 + pkin(1) * t3619;
t3653 = t3495 * t3799;
t3607 = t3653 / 0.2e1;
t3617 = t3502 * t3682;
t3751 = t3444 * t3508 * t3607 + pkin(1) * t3617;
t3651 = t3496 * t3796;
t3606 = t3651 / 0.2e1;
t3615 = t3504 * t3677;
t3750 = t3448 * t3510 * t3606 + pkin(1) * t3615;
t3746 = t3484 - 0.1e1 / 0.2e1;
t3742 = 0.2e1 * t3340 * t3367;
t3740 = 0.2e1 * t3341 * t3368;
t3738 = 0.2e1 * t3342 * t3369;
t3736 = t3462 * t3898;
t3735 = t3465 * t3897;
t3734 = t3468 * t3896;
t3733 = -0.4e1 * t3759;
t3731 = t3331 * t3877;
t3730 = t3332 * t3877;
t3729 = t3333 * t3877;
t3725 = qJ(2,1) * t3775;
t3724 = qJ(2,2) * t3781;
t3723 = qJ(2,3) * t3787;
t3719 = t3412 * t3857;
t3718 = t3331 * t3777;
t3717 = t3472 * t3856;
t3716 = t3475 * t3856;
t3715 = t3496 * t3856;
t3714 = t3331 * t3766;
t3713 = t3413 * t3854;
t3712 = t3332 * t3789;
t3711 = t3470 * t3853;
t3710 = t3473 * t3853;
t3709 = t3494 * t3853;
t3708 = t3332 * t3768;
t3707 = t3414 * t3851;
t3706 = t3333 * t3783;
t3705 = t3471 * t3850;
t3704 = t3474 * t3850;
t3703 = t3495 * t3850;
t3702 = t3333 * t3767;
t3701 = t3470 * t3849;
t3700 = t3473 * t3849;
t3699 = t3471 * t3848;
t3698 = t3474 * t3848;
t3697 = t3472 * t3847;
t3696 = t3475 * t3847;
t3689 = t3397 * t3831;
t3688 = t3398 * t3831;
t3686 = t3441 * t3827;
t3685 = t3506 * t3828;
t3684 = t3399 * t3826;
t3683 = t3400 * t3826;
t3681 = t3445 * t3822;
t3680 = t3508 * t3823;
t3679 = t3401 * t3821;
t3678 = t3402 * t3821;
t3676 = t3449 * t3817;
t3675 = t3510 * t3818;
t3376 = (t3488 - 0.1e1 / 0.2e1) * t3759 + t3746 * t3755;
t3674 = t3376 * t3785;
t3377 = (t3489 - 0.1e1 / 0.2e1) * t3759 + t3746 * t3754;
t3673 = t3377 * t3779;
t3378 = (t3490 - 0.1e1 / 0.2e1) * t3759 + t3746 * t3753;
t3672 = t3378 * t3773;
t3385 = t3488 * t3878 + t3733 * t3755 + t3879;
t3671 = t3385 * t3785;
t3386 = t3490 * t3878 + t3733 * t3753 + t3879;
t3670 = t3386 * t3773;
t3387 = t3489 * t3878 + t3733 * t3754 + t3879;
t3669 = t3387 * t3779;
t3668 = t3397 * t3789;
t3667 = t3398 * t3789;
t3666 = t3399 * t3783;
t3665 = t3400 * t3783;
t3664 = t3401 * t3777;
t3663 = t3402 * t3777;
t3662 = t3406 * t3784;
t3661 = t3406 * t3768;
t3660 = t3407 * t3778;
t3659 = t3407 * t3767;
t3658 = t3408 * t3772;
t3657 = t3408 * t3766;
t3650 = t3440 * t3768;
t3649 = t3444 * t3767;
t3648 = t3448 * t3766;
t3644 = -0.2e1 * t3714;
t3643 = -0.2e1 * t3708;
t3642 = -0.2e1 * t3702;
t3599 = pkin(2) * t3440 * t3685;
t3346 = -t3484 * t3599 + (t3500 * t3608 + (-pkin(1) * t3506 + pkin(2) * t3758) * t3828) * t3788 + t3492 * t3752;
t3641 = 0.2e1 * t3346 * t3804;
t3598 = pkin(2) * t3444 * t3680;
t3347 = -t3484 * t3598 + (t3502 * t3607 + (-pkin(1) * t3508 + pkin(2) * t3757) * t3823) * t3782 + t3751 * t3492;
t3640 = 0.2e1 * t3347 * t3801;
t3597 = pkin(2) * t3448 * t3675;
t3348 = -t3484 * t3597 + (t3504 * t3606 + (-pkin(1) * t3510 + pkin(2) * t3756) * t3818) * t3776 + t3750 * t3492;
t3639 = 0.2e1 * t3348 * t3798;
t3638 = t3413 * t3736;
t3637 = t3414 * t3735;
t3636 = t3412 * t3734;
t3417 = t3423 ^ 2;
t3632 = t3417 * t3718;
t3415 = t3421 ^ 2;
t3631 = t3415 * t3712;
t3416 = t3422 ^ 2;
t3630 = t3416 * t3706;
t3623 = t3364 * t3413 * t3787;
t3622 = t3365 * t3414 * t3781;
t3621 = t3366 * t3412 * t3775;
t3620 = t3388 * t3686;
t3618 = t3389 * t3681;
t3616 = t3390 * t3676;
t3614 = t3470 * t3709;
t3613 = t3471 * t3703;
t3612 = t3472 * t3715;
t3611 = t3473 * t3709;
t3610 = t3474 * t3703;
t3609 = t3475 * t3715;
t3605 = 0.4e1 * t3378 * t3718;
t3604 = 0.4e1 * t3376 * t3712;
t3603 = 0.4e1 * t3377 * t3706;
t3343 = t3619 * t3877 + (t3492 * t3599 + t3752) * t3493 + (pkin(1) * t3685 - t3500 * t3655 / 0.2e1) * t3440 * t3492;
t3602 = -0.2e1 * t3343 * t3656;
t3344 = t3617 * t3877 + (t3492 * t3598 + t3751) * t3493 + (pkin(1) * t3680 - t3502 * t3653 / 0.2e1) * t3444 * t3492;
t3601 = -0.2e1 * t3344 * t3654;
t3345 = t3615 * t3877 + (t3492 * t3597 + t3750) * t3493 + (pkin(1) * t3675 - t3504 * t3651 / 0.2e1) * t3448 * t3492;
t3600 = -0.2e1 * t3345 * t3652;
t3596 = t3409 * t3501 * t3686;
t3595 = t3410 * t3503 * t3681;
t3594 = t3411 * t3505 * t3676;
t3528 = 1 / pkin(3) ^ 2;
t3593 = t3406 * t3494 * t3528 * t3786;
t3592 = t3407 * t3495 * t3528 * t3780;
t3591 = t3408 * t3496 * t3528 * t3774;
t3316 = t3873 - t3357 / 0.2e1 + (t3720 / 0.2e1 + t3624 / 0.2e1) * t3820;
t3584 = -0.2e1 * t3331 * t3458 - 0.2e1 * t3316;
t3317 = t3872 - t3355 / 0.2e1 + (t3722 / 0.2e1 + t3628 / 0.2e1) * t3830;
t3583 = -0.2e1 * t3332 * t3458 - 0.2e1 * t3317;
t3318 = t3871 - t3356 / 0.2e1 + (t3721 / 0.2e1 + t3626 / 0.2e1) * t3825;
t3582 = -0.2e1 * t3333 * t3458 - 0.2e1 * t3318;
t3581 = t3506 * t3593;
t3580 = t3508 * t3592;
t3579 = t3510 * t3591;
t3578 = t3500 * t3593;
t3577 = t3502 * t3592;
t3576 = t3504 * t3591;
t3563 = (t3419 * t3442 + t3421 * t3784) * t3807;
t3562 = (t3419 * t3784 - t3421 * t3442) * t3807;
t3561 = (t3420 * t3446 + t3422 * t3778) * t3806;
t3560 = (t3420 * t3778 - t3422 * t3446) * t3806;
t3559 = (t3418 * t3450 + t3423 * t3772) * t3805;
t3558 = (t3418 * t3772 - t3423 * t3450) * t3805;
t3556 = (-t3364 * t3388 * t3441 + t3501 * t3741 * t3830) * t3463;
t3555 = (-t3365 * t3389 * t3445 + t3503 * t3739 * t3825) * t3466;
t3554 = (-t3366 * t3390 * t3449 + t3505 * t3737 * t3820) * t3469;
t3553 = 0.2e1 * qJ(2,1) * t3718 + 0.2e1 * t3449 * t3625;
t3552 = 0.2e1 * qJ(2,2) * t3706 + 0.2e1 * t3445 * t3627;
t3551 = 0.2e1 * qJ(2,3) * t3712 + 0.2e1 * t3441 * t3629;
t3323 = -t3549 + 0.2e1 * t3871;
t3321 = -t3550 + 0.2e1 * t3872;
t3319 = -t3548 + 0.2e1 * t3873;
t3315 = (t3525 + t3531) * t3331 - pkin(1) * t3548;
t3314 = (t3524 + t3531) * t3333 - pkin(1) * t3549;
t3313 = (t3523 + t3531) * t3332 - pkin(1) * t3550;
t3312 = 0.2e1 * t3510 * t3731 + (t3319 * t3510 - t3576) * t3493 + (t3504 * t3584 - t3579) * t3492;
t3311 = 0.2e1 * t3508 * t3729 + (t3323 * t3508 - t3577) * t3493 + (t3502 * t3582 - t3580) * t3492;
t3310 = 0.2e1 * t3506 * t3730 + (t3321 * t3506 - t3578) * t3493 + (t3500 * t3583 - t3581) * t3492;
t3309 = t3731 * t3881 + (t3316 * t3881 - t3579) * t3493 + (t3510 * t3584 + t3576) * t3492;
t3308 = t3729 * t3882 + (t3318 * t3882 - t3580) * t3493 + (t3508 * t3582 + t3577) * t3492;
t3307 = t3730 * t3883 + (t3317 * t3883 - t3581) * t3493 + (t3506 * t3583 + t3578) * t3492;
t1 = [(t3331 * t3663 + t3332 * t3667 + t3333 * t3665) * MDP(1) + (-t3350 * t3623 - t3352 * t3622 - t3354 * t3621 + t3398 * t3551 + t3400 * t3552 + t3402 * t3553) * MDP(6) + (t3313 * t3667 + t3314 * t3665 + t3315 * t3663 + (t3352 * t3859 + (-t3352 * t3365 + t3400 * t3740) * t3724) * t3414 + (t3350 * t3860 + (-t3350 * t3364 + t3398 * t3742) * t3723) * t3413 + (t3354 * t3861 + (-t3354 * t3366 + t3402 * t3738) * t3725) * t3412) * MDP(7) + (t3402 * t3632 + t3398 * t3631 + t3400 * t3630 + ((0.4e1 * t3678 - 0.2e1 * t3833) * t3672 + (0.4e1 * t3683 - 0.2e1 * t3835) * t3673 + (0.4e1 * t3688 - 0.2e1 * t3837) * t3674) * t3527) * MDP(8) + (t3402 * t3605 + t3398 * t3604 + t3400 * t3603 + ((0.2e1 * t3683 - t3835) * t3669 + (0.2e1 * t3678 - t3833) * t3670 + (0.2e1 * t3688 - t3837) * t3671) * t3527) * MDP(9) + ((t3421 * t3711 + t3422 * t3705 + t3423 * t3717) * t3527 + (t3398 * t3563 + t3400 * t3561 + t3402 * t3559) * t3528) * MDP(10) + ((t3418 * t3717 + t3419 * t3711 + t3420 * t3705) * t3527 + (t3398 * t3562 + t3400 * t3560 + t3402 * t3558) * t3528) * MDP(11) + (t3470 * t3662 + t3471 * t3660 + t3472 * t3658) * t3862 + ((t3312 * t3808 - t3838) * t3467 + (t3311 * t3810 - t3840) * t3464 + (t3310 * t3812 - t3842) * t3461 + (t3398 * t3602 + t3400 * t3601 + t3402 * t3600 + (-t3612 + (t3354 * t3636 + t3697) * t3819) * t3423 + (-t3613 + (t3352 * t3637 + t3699) * t3824) * t3422 + (-t3614 + (t3350 * t3638 + t3701) * t3829) * t3421) * t3527) * MDP(13) + ((t3309 * t3808 + t3354 * t3719) * t3467 + (t3308 * t3810 + t3352 * t3707) * t3464 + (t3307 * t3812 + t3350 * t3713) * t3461 + (-t3418 * t3612 - t3419 * t3614 - t3420 * t3613 + (t3402 * t3639 + (t3354 * t3734 + t3418 * t3697) * t3369) * t3449 + (t3400 * t3640 + (t3352 * t3735 + t3420 * t3699) * t3368) * t3445 + (t3398 * t3641 + (t3350 * t3736 + t3419 * t3701) * t3367) * t3441) * t3527) * MDP(14) + t3899 * (t3461 * (t3321 * t3812 - t3413 * t3842) + t3464 * (t3323 * t3810 - t3414 * t3840) + t3467 * (t3319 * t3808 - t3412 * t3838)); (t3331 * t3664 + t3332 * t3668 + t3333 * t3666) * MDP(1) + (-t3349 * t3623 - t3351 * t3622 - t3353 * t3621 + t3397 * t3551 + t3399 * t3552 + t3401 * t3553) * MDP(6) + (t3313 * t3668 + t3314 * t3666 + t3315 * t3664 + (t3351 * t3859 + (-t3351 * t3365 + t3399 * t3740) * t3724) * t3414 + (t3349 * t3860 + (-t3349 * t3364 + t3397 * t3742) * t3723) * t3413 + (t3353 * t3861 + (-t3353 * t3366 + t3401 * t3738) * t3725) * t3412) * MDP(7) + (t3401 * t3632 + t3397 * t3631 + t3399 * t3630 + ((0.4e1 * t3679 - 0.2e1 * t3832) * t3672 + (0.4e1 * t3684 - 0.2e1 * t3834) * t3673 + (0.4e1 * t3689 - 0.2e1 * t3836) * t3674) * t3527) * MDP(8) + (t3401 * t3605 + t3397 * t3604 + t3399 * t3603 + ((0.2e1 * t3684 - t3834) * t3669 + (0.2e1 * t3679 - t3832) * t3670 + (0.2e1 * t3689 - t3836) * t3671) * t3527) * MDP(9) + ((t3421 * t3710 + t3422 * t3704 + t3423 * t3716) * t3527 + (t3397 * t3563 + t3399 * t3561 + t3401 * t3559) * t3528) * MDP(10) + ((t3418 * t3716 + t3419 * t3710 + t3420 * t3704) * t3527 + (t3397 * t3562 + t3399 * t3560 + t3401 * t3558) * t3528) * MDP(11) + (t3473 * t3662 + t3474 * t3660 + t3475 * t3658) * t3862 + ((t3312 * t3809 - t3839) * t3467 + (t3311 * t3811 - t3841) * t3464 + (t3310 * t3813 - t3843) * t3461 + (t3397 * t3602 + t3399 * t3601 + t3401 * t3600 + (-t3609 + (t3353 * t3636 + t3696) * t3819) * t3423 + (-t3610 + (t3351 * t3637 + t3698) * t3824) * t3422 + (-t3611 + (t3349 * t3638 + t3700) * t3829) * t3421) * t3527) * MDP(13) + ((t3309 * t3809 + t3353 * t3719) * t3467 + (t3308 * t3811 + t3351 * t3707) * t3464 + (t3307 * t3813 + t3349 * t3713) * t3461 + (-t3418 * t3609 - t3419 * t3611 - t3420 * t3610 + (t3401 * t3639 + (t3353 * t3734 + t3418 * t3696) * t3369) * t3449 + (t3399 * t3640 + (t3351 * t3735 + t3420 * t3698) * t3368) * t3445 + (t3397 * t3641 + (t3349 * t3736 + t3419 * t3700) * t3367) * t3441) * t3527) * MDP(14) + t3899 * (t3461 * (t3321 * t3813 - t3413 * t3843) + t3464 * (t3323 * t3811 - t3414 * t3841) + t3467 * (t3319 * t3809 - t3412 * t3839)); (-t3702 - t3708 - t3714) * MDP(1) + (qJ(2,1) * t3644 + qJ(2,2) * t3642 + qJ(2,3) * t3643 + t3554 + t3555 + t3556) * MDP(6) + ((-t3505 * t3315 + t3390 * t3320) * t3467 + (-t3503 * t3314 + t3389 * t3324) * t3464 + (-t3501 * t3313 + t3388 * t3322) * t3461 + qJ(2,3) * t3556 + qJ(2,2) * t3555 + qJ(2,1) * t3554) * MDP(7) + (-t3417 * t3714 - t3415 * t3708 - t3416 * t3702 + 0.4e1 * (-t3376 * t3596 - t3377 * t3595 - t3378 * t3594) * t3527) * MDP(8) + 0.2e1 * (t3378 * t3644 + t3376 * t3643 + t3377 * t3642 + (-t3385 * t3596 - t3386 * t3594 - t3387 * t3595) * t3527) * MDP(9) + ((-t3505 * t3312 - t3418 * t3858) * t3467 + (-t3503 * t3311 - t3420 * t3852) * t3464 + (-t3501 * t3310 - t3419 * t3855) * t3461 + ((t3345 * t3648 + t3423 * t3616) * t3896 + (t3344 * t3649 + t3422 * t3618) * t3897 + (t3343 * t3650 + t3421 * t3620) * t3898) * t3527) * MDP(13) + ((-t3505 * t3309 + t3390 * t3857) * t3467 + (-t3503 * t3308 + t3389 * t3851) * t3464 + (-t3501 * t3307 + t3388 * t3854) * t3461 + ((-t3348 * t3648 + t3418 * t3616) * t3896 + (-t3347 * t3649 + t3420 * t3618) * t3897 + (-t3346 * t3650 + t3419 * t3620) * t3898) * t3527) * MDP(14) + (((-t3418 * t3449 - t3423 * t3774) * t3657 + (-t3420 * t3445 - t3422 * t3780) * t3659 + (-t3419 * t3441 - t3421 * t3786) * t3661) * MDP(10) + ((-t3418 * t3774 + t3423 * t3449) * t3657 + (-t3420 * t3780 + t3422 * t3445) * t3659 + (-t3419 * t3786 + t3421 * t3441) * t3661) * MDP(11)) * t3528 - t3899 * (t3461 * (t3321 * t3501 + t3855) + t3464 * (t3323 * t3503 + t3852) + t3467 * (t3319 * t3505 + t3858));];
taucX  = t1;
