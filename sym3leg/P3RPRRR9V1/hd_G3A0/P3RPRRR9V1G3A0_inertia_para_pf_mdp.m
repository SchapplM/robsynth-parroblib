% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR9V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR9V1G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:58
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RPRRR9V1G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:57:50
% EndTime: 2020-08-06 18:58:01
% DurationCPUTime: 11.20s
% Computational Cost: add. (11727->564), mult. (17498->1088), div. (2064->17), fcn. (15720->26), ass. (0->446)
t2979 = sin(pkin(7));
t2980 = cos(pkin(7));
t3305 = MDP(4) * t2980 - MDP(5) * t2979;
t2969 = t2980 ^ 2;
t3306 = -0.2e1 * t2969;
t3299 = 2 * pkin(3);
t3298 = 2 * MDP(6);
t3297 = 4 * MDP(9);
t3296 = 0.2e1 * t2969;
t3295 = 0.2e1 * t2979;
t2983 = (pkin(5) + qJ(2,1));
t2982 = (pkin(5) + qJ(2,2));
t2981 = (pkin(5) + qJ(2,3));
t2993 = cos(qJ(3,3));
t2976 = t2993 ^ 2;
t3294 = t2976 * pkin(3);
t2995 = cos(qJ(3,2));
t2977 = t2995 ^ 2;
t3293 = t2977 * pkin(3);
t2997 = cos(qJ(3,1));
t2978 = t2997 ^ 2;
t3292 = t2978 * pkin(3);
t2988 = sin(qJ(1,3));
t3291 = t2988 * pkin(1);
t2990 = sin(qJ(1,2));
t3290 = t2990 * pkin(1);
t2992 = sin(qJ(1,1));
t3289 = t2992 * pkin(1);
t3288 = t2993 * pkin(2);
t3287 = t2995 * pkin(2);
t3286 = t2997 * pkin(2);
t3001 = 1 / pkin(3);
t3283 = MDP(10) * t3001;
t3282 = MDP(11) * t3001;
t3281 = MDP(12) / pkin(3) ^ 2;
t2994 = cos(qJ(1,3));
t2966 = pkin(6) + t2981;
t3185 = pkin(1) * t2994 + t2988 * t2966;
t2987 = sin(qJ(3,3));
t3198 = t2979 * t2987;
t2880 = t3185 * t3198 + (t2976 - 0.1e1) * t2994 * pkin(3);
t2889 = pkin(1) * t2987 + (-pkin(3) + t3288 + 0.2e1 * t3294) * t2979;
t2999 = -pkin(3) / 0.2e1;
t2919 = t3294 + t3288 / 0.2e1 + t2999;
t2984 = legFrame(3,2);
t2954 = sin(t2984);
t2957 = cos(t2984);
t3130 = t2994 * t3198;
t3035 = pkin(2) * t3130 + (t3130 * t3299 - t3185) * t2993;
t3205 = t2954 * t2994;
t3000 = pkin(2) / 0.2e1;
t3232 = (pkin(3) * t2993 + t3000) * t2987;
t2947 = pkin(1) * t2979;
t3235 = (-pkin(3) * t2987 + t2947) * t2993;
t2839 = (-t2919 * t3205 + t2957 * t3232) * t3296 + (t2957 * t2889 + t3035 * t2954) * t2980 + t2880 * t2954 + t2957 * t3235;
t3192 = t2980 * t2993;
t2914 = t3192 - t3198;
t2908 = 0.1e1 / t2914;
t3280 = t2839 * t2908;
t2949 = 0.1e1 / t2966 ^ 2;
t3279 = t2839 * t2949;
t3202 = t2957 * t2994;
t2840 = (t2919 * t3202 + t2954 * t3232) * t3296 + (t2954 * t2889 - t3035 * t2957) * t2980 - t2880 * t2957 + t2954 * t3235;
t3278 = t2840 * t2908;
t3277 = t2840 * t2949;
t2996 = cos(qJ(1,2));
t2967 = pkin(6) + t2982;
t3184 = pkin(1) * t2996 + t2990 * t2967;
t2989 = sin(qJ(3,2));
t3197 = t2979 * t2989;
t2881 = t3184 * t3197 + (t2977 - 0.1e1) * t2996 * pkin(3);
t2890 = pkin(1) * t2989 + (-pkin(3) + t3287 + 0.2e1 * t3293) * t2979;
t2920 = t3293 + t3287 / 0.2e1 + t2999;
t2985 = legFrame(2,2);
t2955 = sin(t2985);
t2958 = cos(t2985);
t3129 = t2996 * t3197;
t3034 = pkin(2) * t3129 + (t3129 * t3299 - t3184) * t2995;
t3204 = t2955 * t2996;
t3231 = (pkin(3) * t2995 + t3000) * t2989;
t3234 = (-pkin(3) * t2989 + t2947) * t2995;
t2841 = (-t2920 * t3204 + t2958 * t3231) * t3296 + (t2958 * t2890 + t3034 * t2955) * t2980 + t2881 * t2955 + t2958 * t3234;
t3191 = t2980 * t2995;
t2915 = t3191 - t3197;
t2909 = 0.1e1 / t2915;
t3276 = t2841 * t2909;
t2951 = 0.1e1 / t2967 ^ 2;
t3275 = t2841 * t2951;
t3201 = t2958 * t2996;
t2842 = (t2920 * t3201 + t2955 * t3231) * t3296 + (t2955 * t2890 - t3034 * t2958) * t2980 - t2881 * t2958 + t2955 * t3234;
t3274 = t2842 * t2909;
t3273 = t2842 * t2951;
t2998 = cos(qJ(1,1));
t2968 = pkin(6) + t2983;
t3186 = t2998 * pkin(1) + t2992 * t2968;
t2991 = sin(qJ(3,1));
t3196 = t2979 * t2991;
t2882 = t3186 * t3196 + (t2978 - 0.1e1) * t2998 * pkin(3);
t2891 = pkin(1) * t2991 + (-pkin(3) + t3286 + 0.2e1 * t3292) * t2979;
t2921 = t3292 + t3286 / 0.2e1 + t2999;
t2986 = legFrame(1,2);
t2956 = sin(t2986);
t2959 = cos(t2986);
t3128 = t2998 * t3196;
t3033 = pkin(2) * t3128 + (t3128 * t3299 - t3186) * t2997;
t3203 = t2956 * t2998;
t3230 = (pkin(3) * t2997 + t3000) * t2991;
t3233 = (-pkin(3) * t2991 + t2947) * t2997;
t2843 = (-t2921 * t3203 + t2959 * t3230) * t3296 + (t2959 * t2891 + t3033 * t2956) * t2980 + t2882 * t2956 + t2959 * t3233;
t3190 = t2980 * t2997;
t2913 = t3190 - t3196;
t2907 = 0.1e1 / t2913;
t3272 = t2843 * t2907;
t2953 = 0.1e1 / t2968 ^ 2;
t3271 = t2843 * t2953;
t3200 = t2959 * t2998;
t2844 = (t2921 * t3200 + t2956 * t3230) * t3296 + (t2956 * t2891 - t3033 * t2959) * t2980 - t2882 * t2959 + t2956 * t3233;
t3270 = t2844 * t2907;
t3269 = t2844 * t2953;
t2934 = pkin(2) * t2980 + pkin(1);
t2970 = pkin(7) + qJ(3,3);
t2944 = cos(t2970);
t2886 = t2966 * t2994 + (-pkin(3) * t2944 - t2934) * t2988;
t2948 = 0.1e1 / t2966;
t2869 = (t2886 + t3291) * t2948;
t3268 = t2869 * t2908;
t2971 = pkin(7) + qJ(3,2);
t2945 = cos(t2971);
t2887 = t2967 * t2996 + (-pkin(3) * t2945 - t2934) * t2990;
t2950 = 0.1e1 / t2967;
t2871 = (t2887 + t3290) * t2950;
t3267 = t2871 * t2909;
t2972 = pkin(7) + qJ(3,1);
t2946 = cos(t2972);
t2888 = t2968 * t2998 + (-pkin(3) * t2946 - t2934) * t2992;
t2952 = 0.1e1 / t2968;
t2873 = (t2888 + t3289) * t2952;
t3266 = t2873 * t2907;
t3265 = t2886 * t2949;
t3264 = t2887 * t2951;
t3263 = t2888 * t2953;
t2941 = sin(t2970);
t2898 = t2941 * t2957 - t2944 * t3205;
t2935 = 0.1e1 / t2944;
t3262 = t2898 * t2935;
t3261 = t2898 * t2948;
t3260 = t2898 * t2954;
t2899 = t2941 * t2954 + t2944 * t3202;
t3259 = t2899 * t2935;
t3258 = t2899 * t2948;
t3257 = t2899 * t2957;
t2942 = sin(t2971);
t2900 = t2942 * t2958 - t2945 * t3204;
t2937 = 0.1e1 / t2945;
t3256 = t2900 * t2937;
t3255 = t2900 * t2950;
t3254 = t2900 * t2955;
t2901 = t2942 * t2955 + t2945 * t3201;
t3253 = t2901 * t2937;
t3252 = t2901 * t2950;
t3251 = t2901 * t2958;
t2943 = sin(t2972);
t2902 = t2943 * t2959 - t2946 * t3203;
t2939 = 0.1e1 / t2946;
t3250 = t2902 * t2939;
t3249 = t2902 * t2952;
t3248 = t2902 * t2956;
t2903 = t2943 * t2956 + t2946 * t3200;
t3247 = t2903 * t2939;
t3246 = t2903 * t2952;
t3245 = t2903 * t2959;
t3244 = t2907 * t2952;
t3243 = t2907 * t2953;
t3242 = t2908 * t2948;
t3241 = t2908 * t2949;
t3240 = t2909 * t2950;
t3239 = t2909 * t2951;
t3195 = t2979 * t2993;
t2916 = t2980 * t2987 + t3195;
t3238 = t2916 * t2949;
t3194 = t2979 * t2995;
t2917 = t2980 * t2989 + t3194;
t3237 = t2917 * t2951;
t3193 = t2979 * t2997;
t2918 = t2980 * t2991 + t3193;
t3236 = t2918 * t2953;
t3229 = t2935 * t2948;
t3003 = pkin(1) ^ 2;
t2960 = qJ(2,3) ^ 2 + t3003;
t3228 = t2935 * t2960;
t2936 = 0.1e1 / t2944 ^ 2;
t3227 = t2936 * t2948;
t3226 = t2936 * t2949;
t3225 = t2936 * t2957;
t3224 = t2937 * t2950;
t2961 = qJ(2,2) ^ 2 + t3003;
t3223 = t2937 * t2961;
t2938 = 0.1e1 / t2945 ^ 2;
t3222 = t2938 * t2950;
t3221 = t2938 * t2951;
t3220 = t2938 * t2958;
t3219 = t2939 * t2952;
t2962 = qJ(2,1) ^ 2 + t3003;
t3218 = t2939 * t2962;
t2940 = 0.1e1 / t2946 ^ 2;
t3217 = t2940 * t2952;
t3216 = t2940 * t2953;
t3215 = t2940 * t2959;
t3214 = t2948 * t2988;
t3213 = t2949 * t2988 ^ 2;
t3212 = t2949 * t2988;
t3211 = t2950 * t2990;
t3210 = t2951 * t2990 ^ 2;
t3209 = t2951 * t2990;
t3208 = t2952 * t2992;
t3207 = t2953 * t2992 ^ 2;
t3206 = t2953 * t2992;
t3199 = t2979 * t2980;
t3189 = t2981 * t3001;
t3188 = t2982 * t3001;
t3187 = t2983 * t3001;
t3183 = t2969 - 0.1e1 / 0.2e1;
t3182 = pkin(2) * t3296;
t3181 = -0.2e1 * pkin(2) * t2979;
t3180 = 2 * t3283;
t3179 = 2 * t3282;
t3178 = -0.2e1 * t3198;
t3177 = -0.2e1 * t3197;
t3176 = -0.2e1 * t3196;
t3175 = pkin(2) * t3214;
t3174 = pkin(2) * t3211;
t3173 = pkin(2) * t3208;
t3172 = t2839 * t3241;
t3171 = t2840 * t3241;
t3170 = t2841 * t3239;
t3169 = t2842 * t3239;
t3168 = t2843 * t3243;
t3167 = t2844 * t3243;
t3166 = t2935 * t3265;
t3165 = t2937 * t3264;
t3164 = t2939 * t3263;
t2892 = t2898 ^ 2;
t3163 = t2892 * t3226;
t2893 = t2899 ^ 2;
t3162 = t2893 * t3226;
t2894 = t2900 ^ 2;
t3161 = t2894 * t3221;
t2895 = t2901 ^ 2;
t3160 = t2895 * t3221;
t2896 = t2902 ^ 2;
t3159 = t2896 * t3216;
t2897 = t2903 ^ 2;
t3158 = t2897 * t3216;
t3157 = t2898 * t3229;
t3156 = t2899 * t3229;
t3155 = t2900 * t3224;
t3154 = t2901 * t3224;
t3153 = t2902 * t3219;
t3152 = t2903 * t3219;
t3151 = t2907 * t3236;
t3150 = t2907 * t3206;
t3149 = t2908 * t3238;
t3148 = t2908 * t3212;
t3147 = t2909 * t3237;
t3146 = t2909 * t3209;
t2910 = t2916 ^ 2;
t3145 = t2910 * t3226;
t2911 = t2917 ^ 2;
t3144 = t2911 * t3221;
t2912 = t2918 ^ 2;
t3143 = t2912 * t3216;
t3142 = t2935 * t3214;
t3141 = t2935 * t3212;
t3140 = t2981 * t3227;
t3139 = t2937 * t3211;
t3138 = t2937 * t3209;
t3137 = t2982 * t3222;
t3136 = t2939 * t3208;
t3135 = t2939 * t3206;
t3134 = t2983 * t3217;
t3133 = t2979 * t3189;
t3132 = t2979 * t3188;
t3131 = t2979 * t3187;
t3127 = t2948 * t3182;
t3126 = t2948 * t3181;
t3125 = t2950 * t3182;
t3124 = t2950 * t3181;
t3123 = t2952 * t3182;
t3122 = t2952 * t3181;
t3121 = t2987 * t3175;
t3120 = t2993 * t3175;
t3119 = t2989 * t3174;
t3118 = t2995 * t3174;
t3117 = t2991 * t3173;
t3116 = t2997 * t3173;
t3115 = pkin(1) * t3157;
t3114 = pkin(1) * t3156;
t3113 = pkin(1) * t3155;
t3112 = pkin(1) * t3154;
t3111 = pkin(1) * t3153;
t3110 = pkin(1) * t3152;
t3109 = t2839 * t3149;
t3108 = t2840 * t3149;
t3107 = t2841 * t3147;
t3106 = t2842 * t3147;
t3105 = t2843 * t3151;
t3104 = t2844 * t3151;
t3103 = t2914 * t3166;
t3102 = t2916 * t3166;
t3101 = t2915 * t3165;
t3100 = t2917 * t3165;
t3099 = t2913 * t3164;
t3098 = t2918 * t3164;
t3097 = t2898 * t2899 * t3226;
t3096 = t2898 * t3141;
t3095 = t3225 * t3261;
t3094 = t2899 * t3141;
t3093 = t2899 * t2954 * t3227;
t3092 = t2900 * t2901 * t3221;
t3091 = t2900 * t3138;
t3090 = t3220 * t3255;
t3089 = t2901 * t3138;
t3088 = t2901 * t2955 * t3222;
t3087 = t2902 * t2903 * t3216;
t3086 = t2902 * t3135;
t3085 = t3215 * t3249;
t3084 = t2903 * t3135;
t3083 = t2903 * t2956 * t3217;
t3082 = t2918 * t3150;
t3081 = t2916 * t3148;
t3080 = t2917 * t3146;
t3079 = t2910 * t3141;
t3078 = t2911 * t3138;
t3077 = t2912 * t3135;
t3076 = t2954 * t3142;
t3075 = t2957 * t3142;
t3074 = t2981 * t3142;
t3073 = t3001 * t3140;
t3072 = t2955 * t3139;
t3071 = t2958 * t3139;
t3070 = t2982 * t3139;
t3069 = t3001 * t3137;
t3068 = t2956 * t3136;
t3067 = t2959 * t3136;
t3066 = t2983 * t3136;
t3065 = t3001 * t3134;
t3064 = t3140 * t3260;
t3063 = t3140 * t3257;
t3062 = t3137 * t3254;
t3061 = t3137 * t3251;
t3060 = t3134 * t3248;
t3059 = t3134 * t3245;
t3058 = t2954 * t3074;
t3057 = t2957 * t3074;
t3056 = t2954 * t3073;
t3055 = t2957 * t3073;
t3054 = t2955 * t3070;
t3053 = t2958 * t3070;
t3052 = t2955 * t3069;
t3051 = t2958 * t3069;
t3050 = t2956 * t3066;
t3049 = t2959 * t3066;
t3048 = t2956 * t3065;
t3047 = t2959 * t3065;
t2883 = (t2976 - 0.1e1 / 0.2e1) * t3199 + t3183 * t2993 * t2987;
t2884 = (t2977 - 0.1e1 / 0.2e1) * t3199 + t3183 * t2995 * t2989;
t2885 = (t2978 - 0.1e1 / 0.2e1) * t3199 + t3183 * t2997 * t2991;
t3043 = (-t2883 * t3096 - t2884 * t3091 - t2885 * t3086) * t3297 + (-t2898 * t3079 - t2900 * t3078 - t2902 * t3077) * MDP(8) + (-qJ(2,1) * t3086 - qJ(2,2) * t3091 - qJ(2,3) * t3096) * t3298 + (-t3086 - t3091 - t3096) * MDP(1) + (-t2913 * t3067 - t2914 * t3075 - t2915 * t3071) * t3282 + (-t2916 * t3075 - t2917 * t3071 - t2918 * t3067) * t3283;
t3042 = (-t2883 * t3094 - t2884 * t3089 - t2885 * t3084) * t3297 + (-t2899 * t3079 - t2901 * t3078 - t2903 * t3077) * MDP(8) + (-qJ(2,1) * t3084 - qJ(2,2) * t3089 - qJ(2,3) * t3094) * t3298 + (-t3084 - t3089 - t3094) * MDP(1) + (-t2913 * t3068 - t2914 * t3076 - t2915 * t3072) * t3282 + (-t2916 * t3076 - t2917 * t3072 - t2918 * t3068) * t3283;
t3032 = 0.2e1 * t2916;
t3031 = 0.2e1 * t2917;
t3030 = 0.2e1 * t2918;
t3026 = (t3245 + t3248) * t3217;
t3027 = (t3251 + t3254) * t3222;
t3028 = (t3257 + t3260) * t3227;
t3029 = (t2913 * t3026 + t2914 * t3028 + t2915 * t3027) * t3282 + (t2916 * t3028 + t2917 * t3027 + t2918 * t3026) * t3283 + (t2883 * t3097 + t2884 * t3092 + t2885 * t3087) * t3297 + (t2910 * t3097 + t2911 * t3092 + t2912 * t3087) * MDP(8) + (qJ(2,1) * t3087 + qJ(2,2) * t3092 + qJ(2,3) * t3097) * t3298 + (t3087 + t3092 + t3097) * MDP(1) + (t2954 * t3225 + t2955 * t3220 + t2956 * t3215) * t3281;
t3019 = t2898 * t3127 - t2957 * t3133;
t3018 = t2899 * t3127 - t2954 * t3133;
t3017 = t2900 * t3125 - t2958 * t3132;
t3016 = t2901 * t3125 - t2955 * t3132;
t3015 = t2902 * t3123 - t2959 * t3131;
t3014 = t2903 * t3123 - t2956 * t3131;
t3013 = t2980 * (t2898 * t3126 - t2957 * t3189);
t3012 = t2980 * (t2899 * t3126 - t2954 * t3189);
t3011 = t2980 * (t2900 * t3124 - t2958 * t3188);
t3010 = t2980 * (t2901 * t3124 - t2955 * t3188);
t3009 = t2980 * (t2902 * t3122 - t2959 * t3187);
t3008 = t2980 * (t2903 * t3122 - t2956 * t3187);
t2872 = (t2888 + 0.2e1 * t3289) * t2952;
t2870 = (t2887 + 0.2e1 * t3290) * t2950;
t2868 = (t2886 + 0.2e1 * t3291) * t2948;
t2867 = (-t3289 - t2888 / 0.2e1) * t2952;
t2866 = (-t3290 - t2887 / 0.2e1) * t2950;
t2865 = (-t3291 - t2886 / 0.2e1) * t2948;
t2864 = (-pkin(1) * t2888 - t2962 * t2992) * t2952;
t2863 = (-pkin(1) * t2887 - t2961 * t2990) * t2950;
t2862 = (-pkin(1) * t2886 - t2960 * t2988) * t2948;
t2852 = t3116 * t3306 + (-t2872 * t2997 + t3117 * t3295) * t2980 + t2867 * t3176;
t2851 = t3118 * t3306 + (-t2870 * t2995 + t3119 * t3295) * t2980 + t2866 * t3177;
t2850 = t3120 * t3306 + (-t2868 * t2993 + t3121 * t3295) * t2980 + t2865 * t3178;
t2849 = 0.2e1 * t2969 * t3117 + 0.2e1 * (-t2867 * t2991 + t2979 * t3116) * t2980 - 0.2e1 * t2867 * t3193;
t2848 = 0.2e1 * t2969 * t3119 + 0.2e1 * (-t2866 * t2989 + t2979 * t3118) * t2980 - 0.2e1 * t2866 * t3194;
t2847 = 0.2e1 * t2969 * t3121 + 0.2e1 * (-t2865 * t2987 + t2979 * t3120) * t2980 - 0.2e1 * t2865 * t3195;
t2836 = t2844 * t3244;
t2835 = t2843 * t3244;
t2834 = t2842 * t3240;
t2833 = t2841 * t3240;
t2832 = t2840 * t3242;
t2831 = t2839 * t3242;
t2827 = t2836 - t3110;
t2826 = -t2836 + 0.2e1 * t3110;
t2825 = t2835 - t3111;
t2824 = -t2835 + 0.2e1 * t3111;
t2823 = t2834 - t3112;
t2822 = -t2834 + 0.2e1 * t3112;
t2821 = t2833 - t3113;
t2820 = -t2833 + 0.2e1 * t3113;
t2819 = t2832 - t3114;
t2818 = -t2832 + 0.2e1 * t3114;
t2817 = t2831 - t3115;
t2816 = -t2831 + 0.2e1 * t3115;
t2815 = t3110 - t2836 / 0.2e1;
t2814 = t3111 - t2835 / 0.2e1;
t2813 = t3112 - t2834 / 0.2e1;
t2812 = t3113 - t2833 / 0.2e1;
t2811 = t3114 - t2832 / 0.2e1;
t2810 = t3115 - t2831 / 0.2e1;
t2809 = (-pkin(1) * t3270 + t2903 * t3218) * t2952;
t2808 = (-pkin(1) * t3272 + t2902 * t3218) * t2952;
t2807 = (-pkin(1) * t3274 + t2901 * t3223) * t2950;
t2806 = (-pkin(1) * t3276 + t2900 * t3223) * t2950;
t2805 = (-pkin(1) * t3278 + t2899 * t3228) * t2948;
t2804 = (-pkin(1) * t3280 + t2898 * t3228) * t2948;
t2800 = t2815 * t3176 + t2826 * t3190 + (t2991 * t3008 + t3014 * t2997) * t2939;
t2799 = t2814 * t3176 + t2824 * t3190 + (t2991 * t3009 + t3015 * t2997) * t2939;
t2798 = t2813 * t3177 + t2822 * t3191 + (t2989 * t3010 + t3016 * t2995) * t2937;
t2797 = t2812 * t3177 + t2820 * t3191 + (t2989 * t3011 + t3017 * t2995) * t2937;
t2796 = t2811 * t3178 + t2818 * t3192 + (t2987 * t3012 + t3018 * t2993) * t2935;
t2795 = t2810 * t3178 + t2816 * t3192 + (t2987 * t3013 + t3019 * t2993) * t2935;
t2794 = -t2815 * t3030 + (-t3014 * t2991 + t2997 * t3008) * t2939;
t2793 = -t2814 * t3030 + (-t3015 * t2991 + t2997 * t3009) * t2939;
t2792 = -t2813 * t3031 + (-t3016 * t2989 + t2995 * t3010) * t2937;
t2791 = -t2812 * t3031 + (-t3017 * t2989 + t2995 * t3011) * t2937;
t2790 = -t2811 * t3032 + (-t3018 * t2987 + t2993 * t3012) * t2935;
t2789 = -t2810 * t3032 + (-t3019 * t2987 + t2993 * t3013) * t2935;
t1 = [(t3158 + t3160 + t3162) * MDP(1) + (qJ(2,1) * t3158 + qJ(2,2) * t3160 + qJ(2,3) * t3162) * t3298 + ((t2809 * t3247 + t2827 * t3270) * t2952 + (t2807 * t3253 + t2823 * t3274) * t2950 + (t2805 * t3259 + t2819 * t3278) * t2948) * MDP(7) + (t2893 * t3145 + t2895 * t3144 + t2897 * t3143) * MDP(8) + (t2883 * t3162 + t2884 * t3160 + t2885 * t3158) * t3297 + (t2916 * t3093 + t2917 * t3088 + t2918 * t3083) * t3180 + (t2913 * t3083 + t2914 * t3093 + t2915 * t3088) * t3179 + (t2936 * t2954 ^ 2 + t2938 * t2955 ^ 2 + t2940 * t2956 ^ 2) * t3281 + ((-t2918 * t3048 + (t2800 * t2952 - t3269) * t2939) * t2903 + (-t2917 * t3052 + (t2798 * t2950 - t3273) * t2937) * t2901 + (-t2916 * t3056 + (t2796 * t2948 - t3277) * t2935) * t2899) * MDP(13) + ((-t2913 * t3048 + (t2794 * t2952 + t3104) * t2939) * t2903 + (-t2915 * t3052 + (t2792 * t2950 + t3106) * t2937) * t2901 + (-t2914 * t3056 + (t2790 * t2948 + t3108) * t2935) * t2899) * MDP(14) + MDP(15) - t3305 * ((-t2826 * t2952 + t3167) * t3247 + (-t2822 * t2950 + t3169) * t3253 + (-t2818 * t2948 + t3171) * t3259); ((t2808 * t3247 + t2825 * t3270) * t2952 + (t2806 * t3253 + t2821 * t3274) * t2950 + (t2804 * t3259 + t2817 * t3278) * t2948) * MDP(7) + ((t2799 * t3246 - t2902 * t3269) * t2939 + (t2797 * t3252 - t2900 * t3273) * t2937 + (t2795 * t3258 - t2898 * t3277) * t2935 + (-t2916 * t3064 - t2917 * t3062 - t2918 * t3060) * t3001) * MDP(13) + ((t2793 * t3246 + t2902 * t3104) * t2939 + (t2791 * t3252 + t2900 * t3106) * t2937 + (t2789 * t3258 + t2898 * t3108) * t2935 + (-t2913 * t3060 - t2914 * t3064 - t2915 * t3062) * t3001) * MDP(14) + t3029 - t3305 * ((-t2816 * t3258 + t2898 * t3171) * t2935 + (-t2820 * t3252 + t2900 * t3169) * t2937 + (-t2824 * t3246 + t2902 * t3167) * t2939); ((t2844 * t3266 + t2864 * t3247) * t2952 + (t2842 * t3267 + t2863 * t3253) * t2950 + (t2840 * t3268 + t2862 * t3259) * t2948) * MDP(7) + (t2850 * t3156 + t2851 * t3154 + t2852 * t3152 + t2840 * t3212 + t2842 * t3209 + t2844 * t3206 + (t2916 * t3058 + t2917 * t3054 + t2918 * t3050) * t3001) * MDP(13) + (-t2840 * t3081 - t2842 * t3080 - t2844 * t3082 + t2847 * t3156 + t2848 * t3154 + t2849 * t3152 + (t2913 * t3050 + t2914 * t3058 + t2915 * t3054) * t3001) * MDP(14) + t3042 + t3305 * (t2840 * t3148 + t2842 * t3146 + t2844 * t3150 - t2868 * t3156 - t2870 * t3154 - t2872 * t3152); ((t2809 * t3250 + t2827 * t3272) * t2952 + (t2807 * t3256 + t2823 * t3276) * t2950 + (t2805 * t3262 + t2819 * t3280) * t2948) * MDP(7) + ((t2800 * t3249 - t2903 * t3271) * t2939 + (t2798 * t3255 - t2901 * t3275) * t2937 + (t2796 * t3261 - t2899 * t3279) * t2935 + (-t2916 * t3063 - t2917 * t3061 - t2918 * t3059) * t3001) * MDP(13) + ((t2794 * t3249 + t2903 * t3105) * t2939 + (t2792 * t3255 + t2901 * t3107) * t2937 + (t2790 * t3261 + t2899 * t3109) * t2935 + (-t2913 * t3059 - t2914 * t3063 - t2915 * t3061) * t3001) * MDP(14) + t3029 - t3305 * ((-t2818 * t3261 + t2899 * t3172) * t2935 + (-t2822 * t3255 + t2901 * t3170) * t2937 + (-t2826 * t3249 + t2903 * t3168) * t2939); (t3159 + t3161 + t3163) * MDP(1) + (qJ(2,1) * t3159 + qJ(2,2) * t3161 + qJ(2,3) * t3163) * t3298 + ((t2808 * t3250 + t2825 * t3272) * t2952 + (t2806 * t3256 + t2821 * t3276) * t2950 + (t2804 * t3262 + t2817 * t3280) * t2948) * MDP(7) + (t2892 * t3145 + t2894 * t3144 + t2896 * t3143) * MDP(8) + (t2883 * t3163 + t2884 * t3161 + t2885 * t3159) * t3297 + (t2916 * t3095 + t2917 * t3090 + t2918 * t3085) * t3180 + (t2913 * t3085 + t2914 * t3095 + t2915 * t3090) * t3179 + (t2936 * t2957 ^ 2 + t2938 * t2958 ^ 2 + t2940 * t2959 ^ 2) * t3281 + ((-t2918 * t3047 + (t2799 * t2952 - t3271) * t2939) * t2902 + (-t2917 * t3051 + (t2797 * t2950 - t3275) * t2937) * t2900 + (-t2916 * t3055 + (t2795 * t2948 - t3279) * t2935) * t2898) * MDP(13) + ((-t2913 * t3047 + (t2793 * t2952 + t3105) * t2939) * t2902 + (-t2915 * t3051 + (t2791 * t2950 + t3107) * t2937) * t2900 + (-t2914 * t3055 + (t2789 * t2948 + t3109) * t2935) * t2898) * MDP(14) + MDP(15) - t3305 * ((-t2824 * t2952 + t3168) * t3250 + (-t2820 * t2950 + t3170) * t3256 + (-t2816 * t2948 + t3172) * t3262); ((t2843 * t3266 + t2864 * t3250) * t2952 + (t2841 * t3267 + t2863 * t3256) * t2950 + (t2839 * t3268 + t2862 * t3262) * t2948) * MDP(7) + (t2850 * t3157 + t2851 * t3155 + t2852 * t3153 + t2839 * t3212 + t2841 * t3209 + t2843 * t3206 + (t2916 * t3057 + t2917 * t3053 + t2918 * t3049) * t3001) * MDP(13) + (-t2839 * t3081 - t2841 * t3080 - t2843 * t3082 + t2847 * t3157 + t2848 * t3155 + t2849 * t3153 + (t2913 * t3049 + t2914 * t3057 + t2915 * t3053) * t3001) * MDP(14) + t3043 + t3305 * (t2839 * t3148 + t2841 * t3146 + t2843 * t3150 - t2868 * t3157 - t2870 * t3155 - t2872 * t3153); ((-t2809 * t2992 + t2827 * t2888) * t2952 + (-t2807 * t2990 + t2823 * t2887) * t2950 + (-t2805 * t2988 + t2819 * t2886) * t2948) * MDP(7) + (-t2796 * t3214 - t2798 * t3211 - t2800 * t3208 - t2899 * t3103 - t2901 * t3101 - t2903 * t3099) * MDP(13) + (-t2790 * t3214 - t2792 * t3211 - t2794 * t3208 + t2899 * t3102 + t2901 * t3100 + t2903 * t3098) * MDP(14) + t3042 - t3305 * (t2818 * t3214 + t2822 * t3211 + t2826 * t3208 + t2899 * t3166 + t2901 * t3165 + t2903 * t3164); ((-t2808 * t2992 + t2825 * t2888) * t2952 + (-t2806 * t2990 + t2821 * t2887) * t2950 + (-t2804 * t2988 + t2817 * t2886) * t2948) * MDP(7) + (-t2795 * t3214 - t2797 * t3211 - t2799 * t3208 - t2898 * t3103 - t2900 * t3101 - t2902 * t3099) * MDP(13) + (-t2789 * t3214 - t2791 * t3211 - t2793 * t3208 + t2898 * t3102 + t2900 * t3100 + t2902 * t3098) * MDP(14) + t3043 - t3305 * (t2816 * t3214 + t2820 * t3211 + t2824 * t3208 + t2898 * t3166 + t2900 * t3165 + t2902 * t3164); (t3207 + t3210 + t3213) * MDP(1) + (qJ(2,1) * t3207 + qJ(2,2) * t3210 + qJ(2,3) * t3213) * t3298 + (t2869 * t2886 * t2948 + t2871 * t2887 * t2950 + t2873 * t2888 * t2952) * MDP(7) + (t2910 * t3213 + t2911 * t3210 + t2912 * t3207) * MDP(8) + (t2883 * t3213 + t2884 * t3210 + t2885 * t3207) * t3297 + MDP(15) + (-t2864 * t2952 * MDP(7) + (-t2852 * t2952 + t2913 * t3263) * MDP(13) + (-t2849 * t2952 - t2888 * t3236) * MDP(14)) * t2992 + (-t2863 * t2950 * MDP(7) + (-t2851 * t2950 + t2915 * t3264) * MDP(13) + (-t2848 * t2950 - t2887 * t3237) * MDP(14)) * t2990 + (-t2862 * t2948 * MDP(7) + (-t2850 * t2948 + t2914 * t3265) * MDP(13) + (-t2847 * t2948 - t2886 * t3238) * MDP(14)) * t2988 + t3305 * (t2988 * (t2868 * t2948 + t3265) + t2990 * (t2870 * t2950 + t3264) + t2992 * (t2872 * t2952 + t3263));];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
