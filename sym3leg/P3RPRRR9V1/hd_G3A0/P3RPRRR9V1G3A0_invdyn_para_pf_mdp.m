% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RPRRR9V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR9V1G3A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:58
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RPRRR9V1G3A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RPRRR9V1G3A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:57:31
% EndTime: 2020-08-06 18:57:50
% DurationCPUTime: 19.60s
% Computational Cost: add. (83877->693), mult. (128156->1128), div. (8889->17), fcn. (97065->87), ass. (0->519)
t2404 = sin(qJ(1,2));
t2410 = cos(qJ(1,2));
t2414 = xDP(3);
t2396 = legFrame(2,2);
t2363 = sin(t2396);
t2366 = cos(t2396);
t2415 = xDP(2);
t2416 = xDP(1);
t2507 = t2363 * t2415 - t2366 * t2416;
t2174 = -t2404 * t2414 - t2507 * t2410;
t2382 = pkin(7) + qJ(3,2);
t2340 = cos(t2382);
t2198 = t2363 * t2416 + t2366 * t2415;
t2334 = sin(t2382);
t2639 = t2334 * t2198;
t2144 = t2174 * t2340 + t2639;
t2391 = cos(pkin(7));
t2350 = t2391 * pkin(2);
t2319 = t2350 + pkin(1);
t2722 = pkin(3) * t2340;
t2210 = t2319 + t2722;
t2321 = 0.2e1 * t2382;
t2326 = 0.1e1 / t2340;
t2393 = pkin(5) + qJ(2,2);
t2377 = pkin(6) + t2393;
t2356 = 0.1e1 / t2377;
t2357 = 0.1e1 / t2377 ^ 2;
t2358 = t2356 * t2357;
t2426 = (qJ(2,2) ^ 2);
t2428 = pkin(3) ^ 2;
t2422 = 0.2e1 * pkin(7);
t2431 = pkin(2) ^ 2;
t2468 = -t2431 * cos(t2422) - 0.2e1 * pkin(1) ^ 2 - (2 * pkin(6) ^ 2) - t2428 - t2431 + ((-4 * pkin(6) - 2 * pkin(5)) * pkin(5));
t2676 = t2144 * t2326;
t2409 = cos(qJ(3,2));
t2390 = sin(pkin(7));
t2403 = sin(qJ(3,2));
t2624 = t2390 * t2403;
t2205 = t2391 * t2409 - t2624;
t2202 = 0.1e1 / t2205;
t2379 = t2391 ^ 2;
t2374 = pkin(1) * t2414;
t2546 = -(t2507 * t2377 + t2374) * t2404 + (-t2507 * pkin(1) + t2377 * t2414) * t2410;
t2619 = t2409 * t2403;
t2351 = pkin(1) * t2390;
t2620 = t2409 * (-pkin(3) * t2403 + t2351);
t2662 = t2198 * t2403;
t2387 = t2409 ^ 2;
t2670 = t2174 * t2387;
t2758 = 0.2e1 * t2387;
t2685 = (((t2174 * t2409 + t2662) * pkin(2) + (0.2e1 * t2198 * t2619 - t2174 + 0.2e1 * t2670) * pkin(3)) * t2379 + (t2546 * t2409 + pkin(1) * t2662 + ((-t2174 * t2403 + t2198 * t2409) * pkin(2) + (-0.2e1 * t2174 * t2619 + t2198 * t2758 - t2198) * pkin(3)) * t2390) * t2391 - pkin(3) * t2670 + t2198 * t2620 - t2546 * t2624 + pkin(3) * t2174) * t2202;
t2540 = t2676 * t2685;
t2762 = 0.2e1 * pkin(3);
t2595 = pkin(2) * t2762;
t2385 = qJ(3,2) + t2422;
t2343 = cos(t2385);
t2608 = t2343 + t2409;
t2724 = pkin(1) * t2356;
t2756 = -4 * pkin(5) - 4 * pkin(6);
t2615 = (0.2e1 * t2685 * t2724 + 0.4e1 * (-t2350 - t2722) * (pkin(1) * t2676 - t2685 / 0.2e1) * t2356 + (0.2e1 * t2377 * t2639 + ((qJ(2,2) * t2756) - t2428 * cos(t2321) - (2 * t2426) - t2608 * t2595 + t2468) * t2356 * t2144) * t2326) * t2357 * t2676 / 0.2e1 + t2210 * t2358 * t2540;
t2781 = -g(1) * t2366 + g(2) * t2363;
t2657 = t2404 * t2781;
t2788 = t2615 - t2657;
t2402 = sin(qJ(1,3));
t2408 = cos(qJ(1,3));
t2395 = legFrame(3,2);
t2362 = sin(t2395);
t2365 = cos(t2395);
t2508 = t2362 * t2415 - t2365 * t2416;
t2173 = -t2402 * t2414 - t2508 * t2408;
t2381 = pkin(7) + qJ(3,3);
t2339 = cos(t2381);
t2197 = t2362 * t2416 + t2365 * t2415;
t2333 = sin(t2381);
t2640 = t2333 * t2197;
t2143 = t2173 * t2339 + t2640;
t2723 = pkin(3) * t2339;
t2209 = t2319 + t2723;
t2320 = 0.2e1 * t2381;
t2323 = 0.1e1 / t2339;
t2392 = pkin(5) + qJ(2,3);
t2376 = pkin(6) + t2392;
t2353 = 1 / t2376;
t2354 = 1 / t2376 ^ 2;
t2355 = t2353 * t2354;
t2425 = qJ(2,3) ^ 2;
t2677 = t2143 * t2323;
t2407 = cos(qJ(3,3));
t2401 = sin(qJ(3,3));
t2625 = t2390 * t2401;
t2204 = t2391 * t2407 - t2625;
t2201 = 0.1e1 / t2204;
t2547 = -(t2508 * t2376 + t2374) * t2402 + (-t2508 * pkin(1) + t2376 * t2414) * t2408;
t2621 = t2407 * t2401;
t2622 = t2407 * (-pkin(3) * t2401 + t2351);
t2664 = t2197 * t2401;
t2386 = t2407 ^ 2;
t2671 = t2173 * t2386;
t2759 = 0.2e1 * t2386;
t2686 = (((t2173 * t2407 + t2664) * pkin(2) + (0.2e1 * t2197 * t2621 - t2173 + 0.2e1 * t2671) * pkin(3)) * t2379 + (t2547 * t2407 + pkin(1) * t2664 + ((-t2173 * t2401 + t2197 * t2407) * pkin(2) + (-0.2e1 * t2173 * t2621 + t2197 * t2759 - t2197) * pkin(3)) * t2390) * t2391 - pkin(3) * t2671 + t2197 * t2622 - t2547 * t2625 + pkin(3) * t2173) * t2201;
t2541 = t2677 * t2686;
t2384 = qJ(3,3) + t2422;
t2342 = cos(t2384);
t2609 = t2342 + t2407;
t2725 = pkin(1) * t2353;
t2616 = (0.2e1 * t2686 * t2725 + 0.4e1 * (-t2350 - t2723) * (pkin(1) * t2677 - t2686 / 0.2e1) * t2353 + (0.2e1 * t2376 * t2640 + ((qJ(2,3) * t2756) - t2428 * cos(t2320) - (2 * t2425) - t2609 * t2595 + t2468) * t2353 * t2143) * t2323) * t2354 * t2677 / 0.2e1 + t2209 * t2355 * t2541;
t2780 = -g(1) * t2365 + g(2) * t2362;
t2659 = t2402 * t2780;
t2787 = t2616 - t2659;
t2394 = pkin(5) + qJ(2,1);
t2378 = pkin(6) + t2394;
t2359 = 1 / t2378;
t2406 = sin(qJ(1,1));
t2412 = cos(qJ(1,1));
t2397 = legFrame(1,2);
t2364 = sin(t2397);
t2367 = cos(t2397);
t2506 = t2364 * t2415 - t2367 * t2416;
t2175 = -t2406 * t2414 - t2506 * t2412;
t2383 = pkin(7) + qJ(3,1);
t2341 = cos(t2383);
t2199 = t2364 * t2416 + t2367 * t2415;
t2335 = sin(t2383);
t2638 = t2335 * t2199;
t2145 = t2175 * t2341 + t2638;
t2721 = pkin(3) * t2341;
t2211 = t2319 + t2721;
t2169 = -t2211 * t2406 + t2378 * t2412;
t2322 = 0.2e1 * t2383;
t2329 = 0.1e1 / t2341;
t2398 = xDDP(3);
t2429 = 0.1e1 / pkin(3);
t2330 = 0.1e1 / t2341 ^ 2;
t2661 = t2199 * t2330;
t2494 = -(-t2145 * sin(t2322) / 0.2e1 + t2199 * t2429 * t2211) * t2329 * t2661 - t2169 * t2398;
t2360 = 1 / t2378 ^ 2;
t2361 = t2359 * t2360;
t2427 = qJ(2,1) ^ 2;
t2675 = t2145 * t2329;
t2411 = cos(qJ(3,1));
t2405 = sin(qJ(3,1));
t2623 = t2390 * t2405;
t2203 = t2391 * t2411 - t2623;
t2200 = 0.1e1 / t2203;
t2545 = -(t2506 * t2378 + t2374) * t2406 + (-t2506 * pkin(1) + t2378 * t2414) * t2412;
t2618 = t2411 * t2405;
t2653 = (-pkin(3) * t2405 + t2351) * t2411;
t2660 = t2199 * t2405;
t2388 = t2411 ^ 2;
t2669 = t2175 * t2388;
t2757 = 0.2e1 * t2388;
t2684 = (((t2175 * t2411 + t2660) * pkin(2) + (0.2e1 * t2199 * t2618 - t2175 + 0.2e1 * t2669) * pkin(3)) * t2379 + (t2545 * t2411 + pkin(1) * t2660 + ((-t2175 * t2405 + t2199 * t2411) * pkin(2) + (-0.2e1 * t2175 * t2618 + t2199 * t2757 - t2199) * pkin(3)) * t2390) * t2391 - pkin(3) * t2669 + t2199 * t2653 - t2545 * t2623 + pkin(3) * t2175) * t2200;
t2539 = t2675 * t2684;
t2380 = t2422 + qJ(3,1);
t2338 = cos(t2380);
t2610 = t2338 + t2411;
t2614 = (0.2e1 * t2378 * t2638 * t2329 + (0.2e1 * pkin(1) * t2684 + 0.4e1 * (-t2350 - t2721) * (pkin(1) * t2675 - t2684 / 0.2e1) + ((qJ(2,1) * t2756) - t2428 * cos(t2322) - (2 * t2427) - t2610 * t2595 + t2468) * t2675) * t2359) * t2360 * t2675 / 0.2e1 + t2211 * t2361 * t2539;
t2607 = t2412 * pkin(1) + t2406 * t2378;
t2154 = t2607 * t2623 + (t2388 - 0.1e1) * t2412 * pkin(3);
t2699 = t2411 * pkin(2);
t2702 = t2388 * pkin(3);
t2178 = pkin(1) * t2405 + (-pkin(3) + t2699 + 0.2e1 * t2702) * t2390;
t2423 = -pkin(3) / 0.2e1;
t2241 = t2702 + t2699 / 0.2e1 + t2423;
t2567 = t2412 * t2623;
t2482 = pkin(2) * t2567 + (t2567 * t2762 - t2607) * t2411;
t2633 = t2364 * t2412;
t2424 = pkin(2) / 0.2e1;
t2650 = (pkin(3) * t2411 + t2424) * t2405;
t2761 = 0.2e1 * t2379;
t2123 = (-t2241 * t2633 + t2367 * t2650) * t2761 + (t2367 * t2178 + t2482 * t2364) * t2391 + t2154 * t2364 + t2367 * t2653;
t2630 = t2367 * t2412;
t2124 = (t2241 * t2630 + t2364 * t2650) * t2761 + (t2364 * t2178 - t2482 * t2367) * t2391 - t2154 * t2367 + t2364 * t2653;
t2399 = xDDP(2);
t2400 = xDDP(1);
t2772 = (t2123 * t2399 + t2124 * t2400) * t2200;
t2786 = -(t2772 - t2494) * t2359 + t2614;
t2196 = t2199 ^ 2;
t2430 = 0.1e1 / pkin(3) ^ 2;
t2666 = t2196 * t2430;
t2570 = t2330 * t2666;
t2585 = t2361 * t2684;
t2689 = (t2684 + (-t2319 * t2329 - pkin(3)) * t2145) * t2361;
t2472 = (-t2585 - t2689) * t2329;
t2183 = t2335 * t2367 - t2341 * t2633;
t2643 = t2329 * t2359;
t2150 = t2183 * t2399 * t2643;
t2184 = t2335 * t2364 + t2341 * t2630;
t2151 = t2184 * t2400 * t2643;
t2331 = t2329 * t2330;
t2636 = t2359 * t2429;
t2172 = t2196 * t2331 * t2636;
t2564 = t2406 * t2359 * t2398;
t2485 = t2150 + t2151 + t2172 - t2564;
t2100 = t2145 * t2472 + t2485;
t2705 = t2100 * pkin(1);
t2785 = t2359 * (0.4e1 * t2772 - 0.4e1 * t2494) / 0.4e1 + t2394 * t2570 - t2614 - 0.2e1 * t2705;
t2168 = -t2210 * t2404 + t2377 * t2410;
t2327 = 0.1e1 / t2340 ^ 2;
t2663 = t2198 * t2327;
t2496 = -(-t2144 * sin(t2321) / 0.2e1 + t2198 * t2429 * t2210) * t2326 * t2663 - t2168 * t2398;
t2195 = t2198 ^ 2;
t2667 = t2195 * t2430;
t2571 = t2327 * t2667;
t2586 = t2358 * t2685;
t2687 = (t2685 + (-t2319 * t2326 - pkin(3)) * t2144) * t2358;
t2470 = (-t2586 - t2687) * t2326;
t2634 = t2363 * t2410;
t2181 = t2334 * t2366 - t2340 * t2634;
t2646 = t2326 * t2356;
t2148 = t2181 * t2399 * t2646;
t2631 = t2366 * t2410;
t2182 = t2334 * t2363 + t2340 * t2631;
t2149 = t2182 * t2400 * t2646;
t2328 = t2326 * t2327;
t2617 = t2429 * t2356;
t2171 = t2195 * t2328 * t2617;
t2565 = t2404 * t2356 * t2398;
t2486 = t2148 + t2149 + t2171 - t2565;
t2099 = t2144 * t2470 + t2486;
t2706 = t2099 * pkin(1);
t2599 = -0.2e1 * t2706;
t2605 = pkin(1) * t2410 + t2404 * t2377;
t2153 = t2605 * t2624 + (t2387 - 0.1e1) * t2410 * pkin(3);
t2700 = t2409 * pkin(2);
t2703 = t2387 * pkin(3);
t2177 = pkin(1) * t2403 + (-pkin(3) + t2700 + 0.2e1 * t2703) * t2390;
t2240 = t2703 + t2700 / 0.2e1 + t2423;
t2568 = t2410 * t2624;
t2483 = pkin(2) * t2568 + (t2568 * t2762 - t2605) * t2409;
t2651 = (pkin(3) * t2409 + t2424) * t2403;
t2121 = (-t2240 * t2634 + t2366 * t2651) * t2761 + (t2366 * t2177 + t2483 * t2363) * t2391 + t2153 * t2363 + t2366 * t2620;
t2122 = (t2240 * t2631 + t2363 * t2651) * t2761 + (t2363 * t2177 - t2483 * t2366) * t2391 - t2153 * t2366 + t2363 * t2620;
t2771 = (t2121 * t2399 + t2122 * t2400) * t2202;
t2784 = t2356 * (0.4e1 * t2771 - 0.4e1 * t2496) / 0.4e1 + t2393 * t2571 + t2599 - t2615;
t2167 = -t2209 * t2402 + t2376 * t2408;
t2324 = 0.1e1 / t2339 ^ 2;
t2665 = t2197 * t2324;
t2498 = -(-t2143 * sin(t2320) / 0.2e1 + t2197 * t2429 * t2209) * t2323 * t2665 - t2167 * t2398;
t2194 = t2197 ^ 2;
t2668 = t2194 * t2430;
t2572 = t2324 * t2668;
t2587 = t2355 * t2686;
t2688 = (t2686 + (-t2319 * t2323 - pkin(3)) * t2143) * t2355;
t2471 = (-t2587 - t2688) * t2323;
t2635 = t2362 * t2408;
t2179 = t2333 * t2365 - t2339 * t2635;
t2649 = t2323 * t2353;
t2146 = t2179 * t2399 * t2649;
t2632 = t2365 * t2408;
t2180 = t2333 * t2362 + t2339 * t2632;
t2147 = t2180 * t2400 * t2649;
t2325 = t2323 * t2324;
t2637 = t2353 * t2429;
t2170 = t2194 * t2325 * t2637;
t2566 = t2402 * t2353 * t2398;
t2487 = t2146 + t2147 + t2170 - t2566;
t2098 = t2143 * t2471 + t2487;
t2707 = t2098 * pkin(1);
t2600 = -0.2e1 * t2707;
t2606 = pkin(1) * t2408 + t2402 * t2376;
t2152 = t2606 * t2625 + (t2386 - 0.1e1) * t2408 * pkin(3);
t2701 = t2407 * pkin(2);
t2704 = t2386 * pkin(3);
t2176 = pkin(1) * t2401 + (-pkin(3) + t2701 + 0.2e1 * t2704) * t2390;
t2239 = t2704 + t2701 / 0.2e1 + t2423;
t2569 = t2408 * t2625;
t2484 = pkin(2) * t2569 + (t2569 * t2762 - t2606) * t2407;
t2652 = (pkin(3) * t2407 + t2424) * t2401;
t2119 = (-t2239 * t2635 + t2365 * t2652) * t2761 + (t2365 * t2176 + t2484 * t2362) * t2391 + t2152 * t2362 + t2365 * t2622;
t2120 = (t2239 * t2632 + t2362 * t2652) * t2761 + (t2362 * t2176 - t2484 * t2365) * t2391 - t2152 * t2365 + t2362 * t2622;
t2770 = (t2119 * t2399 + t2120 * t2400) * t2201;
t2783 = t2353 * (0.4e1 * t2770 - 0.4e1 * t2498) / 0.4e1 + t2392 * t2572 + t2600 - t2616;
t2782 = MDP(4) * t2391 - MDP(5) * t2390;
t2779 = t2770 - t2498;
t2777 = t2771 - t2496;
t2773 = -0.2e1 * pkin(1);
t2214 = g(1) * t2367 - g(2) * t2364;
t2655 = t2214 * t2406;
t2769 = t2655 + t2786;
t2768 = -g(3) * t2406 + t2214 * t2412;
t2767 = -g(3) * t2404 - t2410 * t2781;
t2766 = -g(3) * t2402 - t2408 * t2780;
t2760 = 0.4e1 * t2379;
t2755 = g(1) / 0.4e1;
t2754 = -g(2) / 0.4e1;
t2753 = -g(3) / 0.2e1;
t2752 = g(3) / 0.2e1;
t2140 = t2325 * t2333 * t2668 + (t2362 * t2400 + t2365 * t2399) * t2429 * t2323;
t2529 = t2637 * t2665;
t2522 = t2143 * t2529;
t2751 = -t2140 * t2392 + t2522 * t2773;
t2141 = t2328 * t2334 * t2667 + (t2363 * t2400 + t2366 * t2399) * t2429 * t2326;
t2528 = t2617 * t2663;
t2521 = t2144 * t2528;
t2750 = -t2141 * t2393 + t2521 * t2773;
t2142 = t2331 * t2335 * t2666 + (t2364 * t2400 + t2367 * t2399) * t2429 * t2329;
t2527 = t2636 * t2661;
t2523 = t2145 * t2527;
t2749 = -t2142 * t2394 + t2523 * t2773;
t2310 = -t2395 + t2381;
t2290 = qJ(1,3) - t2310;
t2748 = sin(t2290) / 0.4e1;
t2291 = qJ(1,3) + t2310;
t2747 = sin(t2291) / 0.4e1;
t2312 = -t2396 + t2382;
t2294 = qJ(1,2) - t2312;
t2746 = sin(t2294) / 0.4e1;
t2295 = qJ(1,2) + t2312;
t2745 = sin(t2295) / 0.4e1;
t2548 = t2397 - t2383;
t2298 = qJ(1,1) - t2548;
t2744 = sin(t2298) / 0.4e1;
t2299 = qJ(1,1) + t2548;
t2743 = sin(t2299) / 0.4e1;
t2309 = t2395 + t2381;
t2289 = qJ(1,3) + t2309;
t2742 = cos(t2289) / 0.4e1;
t2264 = cos(t2290);
t2741 = -t2264 / 0.4e1;
t2292 = qJ(1,3) - t2309;
t2266 = cos(t2292);
t2740 = -t2266 / 0.4e1;
t2311 = t2396 + t2382;
t2293 = qJ(1,2) + t2311;
t2739 = cos(t2293) / 0.4e1;
t2268 = cos(t2294);
t2738 = -t2268 / 0.4e1;
t2296 = qJ(1,2) - t2311;
t2270 = cos(t2296);
t2737 = -t2270 / 0.4e1;
t2307 = t2397 + t2383;
t2297 = qJ(1,1) + t2307;
t2736 = cos(t2297) / 0.4e1;
t2273 = cos(t2299);
t2735 = -t2273 / 0.4e1;
t2300 = qJ(1,1) - t2307;
t2274 = cos(t2300);
t2734 = -t2274 / 0.4e1;
t2733 = -sin(t2548) / 0.2e1;
t2732 = sin(t2310) / 0.2e1;
t2731 = sin(t2312) / 0.2e1;
t2727 = -0.2e1 * t2379 + 0.1e1;
t2726 = t2760 - 0.2e1;
t2347 = qJ(1,3) - t2381;
t2716 = g(3) * sin(t2347);
t2348 = qJ(1,2) - t2382;
t2715 = g(3) * sin(t2348);
t2349 = qJ(1,1) - t2383;
t2714 = g(3) * sin(t2349);
t2713 = g(3) * cos(t2347);
t2712 = g(3) * cos(t2348);
t2711 = g(3) * cos(t2349);
t2369 = g(3) * t2408;
t2451 = t2353 * t2779 - t2369 - t2787;
t2069 = t2451 + t2600;
t2695 = t2069 * t2323;
t2370 = g(3) * t2410;
t2450 = t2356 * t2777 - t2370 - t2788;
t2070 = t2450 + t2599;
t2694 = t2070 * t2326;
t2371 = g(3) * t2412;
t2071 = t2371 + 0.2e1 * t2705 + t2769;
t2693 = t2071 * t2329;
t2692 = t2098 * t2201;
t2691 = t2099 * t2202;
t2690 = t2100 * t2200;
t2137 = t2143 ^ 2;
t2683 = t2137 * t2324;
t2682 = t2137 * t2354;
t2138 = t2144 ^ 2;
t2681 = t2138 * t2327;
t2680 = t2138 * t2357;
t2139 = t2145 ^ 2;
t2679 = t2139 * t2330;
t2678 = t2139 * t2360;
t2648 = t2323 * t2362;
t2647 = t2323 * t2365;
t2645 = t2326 * t2363;
t2644 = t2326 * t2366;
t2642 = t2329 * t2364;
t2641 = t2329 * t2367;
t2629 = t2386 * t2098;
t2628 = t2387 * t2099;
t2627 = t2388 * t2100;
t2626 = t2390 * t2391;
t2332 = sin(t2380);
t2613 = -t2332 - t2405;
t2336 = sin(t2384);
t2612 = -t2336 - t2401;
t2337 = sin(t2385);
t2611 = -t2337 - t2403;
t2604 = t2379 - 0.1e1 / 0.2e1;
t2603 = t2386 - 0.1e1 / 0.2e1;
t2602 = t2387 - 0.1e1 / 0.2e1;
t2601 = t2388 - 0.1e1 / 0.2e1;
t2598 = 2 * MDP(8);
t2597 = -0.8e1 * t2626;
t2596 = 0.4e1 * t2626;
t2593 = t2098 * t2648;
t2592 = t2098 * t2647;
t2591 = t2099 * t2645;
t2590 = t2099 * t2644;
t2589 = t2100 * t2642;
t2588 = t2100 * t2641;
t2581 = t2324 * t2682;
t2580 = t2355 * t2683;
t2579 = t2325 * t2682;
t2578 = t2327 * t2680;
t2577 = t2358 * t2681;
t2576 = t2328 * t2680;
t2575 = t2330 * t2678;
t2574 = t2361 * t2679;
t2573 = t2331 * t2678;
t2563 = t2098 * t2621;
t2562 = t2099 * t2619;
t2561 = t2100 * t2618;
t2254 = sin(t2292);
t2560 = -t2254 / 0.4e1 + t2748;
t2559 = t2254 / 0.4e1 + t2748;
t2258 = sin(t2296);
t2558 = -t2258 / 0.4e1 + t2746;
t2557 = t2258 / 0.4e1 + t2746;
t2262 = sin(t2300);
t2556 = -t2262 / 0.4e1 + t2743;
t2555 = t2262 / 0.4e1 + t2743;
t2554 = t2741 - cos(t2310) / 0.2e1;
t2553 = t2266 / 0.4e1 - cos(t2309) / 0.2e1;
t2552 = t2738 - cos(t2312) / 0.2e1;
t2551 = t2270 / 0.4e1 - cos(t2311) / 0.2e1;
t2550 = t2735 - cos(t2548) / 0.2e1;
t2549 = t2274 / 0.4e1 - cos(t2307) / 0.2e1;
t2192 = t2371 + t2655;
t2544 = pkin(2) * t2581;
t2543 = pkin(2) * t2578;
t2542 = pkin(2) * t2575;
t2538 = t2201 * t2580;
t2537 = t2362 * t2579;
t2536 = t2365 * t2579;
t2535 = t2202 * t2577;
t2534 = t2363 * t2576;
t2533 = t2366 * t2576;
t2532 = t2200 * t2574;
t2531 = t2364 * t2573;
t2530 = t2367 * t2573;
t2526 = t2621 * t2626;
t2525 = t2619 * t2626;
t2524 = t2618 * t2626;
t2251 = sin(t2289);
t2265 = cos(t2291);
t2344 = qJ(1,3) + t2381;
t2520 = g(1) * t2742 + g(2) * t2747 + t2251 * t2754 + t2265 * t2755 + sin(t2344) * t2753;
t2255 = sin(t2293);
t2269 = cos(t2295);
t2345 = qJ(1,2) + t2382;
t2519 = g(1) * t2739 + g(2) * t2745 + t2255 * t2754 + t2269 * t2755 + sin(t2345) * t2753;
t2259 = sin(t2297);
t2272 = cos(t2298);
t2346 = qJ(1,1) + t2383;
t2518 = g(1) * t2736 + g(2) * t2744 + t2259 * t2754 + t2272 * t2755 + sin(t2346) * t2753;
t2517 = g(1) * t2747 + g(2) * t2742 + t2251 * t2755 + t2265 * t2754 + cos(t2344) * t2752;
t2516 = g(1) * t2745 + g(2) * t2739 + t2255 * t2755 + t2269 * t2754 + cos(t2345) * t2752;
t2515 = g(1) * t2744 + g(2) * t2736 + t2259 * t2755 + t2272 * t2754 + cos(t2346) * t2752;
t2505 = 0.2e1 * t2523;
t2504 = 0.2e1 * t2522;
t2503 = 0.2e1 * t2521;
t2502 = t2529 * t2621;
t2501 = t2528 * t2619;
t2500 = t2527 * t2618;
t2460 = -t2098 * t2391 + t2390 * t2504;
t2461 = t2098 * t2390 + t2391 * t2504;
t2475 = MDP(13) * (t2401 * t2461 + t2460 * t2407) + MDP(14) * (-t2460 * t2401 + t2461 * t2407) + MDP(7) * (-qJ(2,3) * t2581 + t2451 - t2707);
t2458 = -t2099 * t2391 + t2390 * t2503;
t2459 = t2099 * t2390 + t2391 * t2503;
t2474 = MDP(13) * (t2403 * t2459 + t2458 * t2409) + MDP(14) * (-t2458 * t2403 + t2459 * t2409) + MDP(7) * (-qJ(2,2) * t2578 + t2450 - t2706);
t2456 = -t2100 * t2391 + t2390 * t2505;
t2457 = t2100 * t2390 + t2391 * t2505;
t2473 = MDP(13) * (t2405 * t2457 + t2456 * t2411) + MDP(14) * (-t2456 * t2405 + t2457 * t2411) + MDP(7) * (-qJ(2,1) * t2575 - t2192 - t2705 - t2786);
t2464 = t2475 * t2201;
t2463 = t2474 * t2202;
t2462 = t2473 * t2200;
t2455 = 0.2e1 * t2354 * t2541 - t2766;
t2454 = 0.2e1 * t2357 * t2540 - t2767;
t2453 = 0.2e1 * t2360 * t2539 - t2768;
t2131 = -t2140 * t2391 + t2390 * t2572;
t2134 = t2140 * t2390 + t2391 * t2572;
t2418 = pkin(1) * g(3);
t2449 = MDP(1) * t2098 + MDP(10) * (-t2131 * t2401 + t2134 * t2407) + MDP(11) * (-t2131 * t2407 - t2134 * t2401) + MDP(13) * (t2713 / 0.2e1 + t2333 * t2751 + (t2740 + t2264 / 0.4e1) * g(2) + t2559 * g(1) + (t2609 * t2098 + t2612 * t2522) * pkin(2) + t2517 - t2783 * t2339) + MDP(14) * (t2716 / 0.2e1 + t2339 * t2751 + t2560 * g(2) + (t2740 + t2741) * g(1) + (t2612 * t2098 - t2609 * t2522) * pkin(2) + t2520 + t2783 * t2333) + MDP(2) * (t2369 - t2659) + MDP(3) * t2766 + MDP(6) * (0.2e1 * qJ(2,3) * t2098 + t2455) + MDP(7) * (t2098 * t2425 + t2418 * t2408 + t2455 * qJ(2,3) + (t2707 + t2787) * pkin(1) - t2779 * t2725) + MDP(8) * ((-0.2e1 * t2629 + (t2471 + 0.4e1 * t2502) * t2143 + t2487) * t2379 + (t2563 / 0.2e1 + t2603 * t2522) * t2596 - 0.2e1 * t2143 * t2502 + t2629) + MDP(9) * ((-t2629 / 0.2e1 + t2147 / 0.4e1 + t2146 / 0.4e1 - t2566 / 0.4e1 + t2170 / 0.4e1) * t2597 + t2726 * t2563 + ((-t2688 / 0.4e1 - t2587 / 0.4e1) * t2323 * t2597 + ((t2759 - 0.1e1) * t2760 - 0.8e1 * t2526 - 0.4e1 * t2386 + 0.2e1) * t2529) * t2143);
t2132 = -t2141 * t2391 + t2390 * t2571;
t2135 = t2141 * t2390 + t2391 * t2571;
t2448 = MDP(1) * t2099 + MDP(10) * (-t2132 * t2403 + t2135 * t2409) + MDP(11) * (-t2132 * t2409 - t2135 * t2403) + MDP(13) * (t2712 / 0.2e1 + t2334 * t2750 + (t2737 + t2268 / 0.4e1) * g(2) + t2557 * g(1) + (t2608 * t2099 + t2611 * t2521) * pkin(2) + t2516 - t2784 * t2340) + MDP(14) * (t2715 / 0.2e1 + t2340 * t2750 + t2558 * g(2) + (t2737 + t2738) * g(1) + (t2611 * t2099 - t2608 * t2521) * pkin(2) + t2519 + t2784 * t2334) + MDP(2) * (t2370 - t2657) + MDP(3) * t2767 + MDP(6) * (0.2e1 * qJ(2,2) * t2099 + t2454) + MDP(7) * (t2099 * t2426 + t2418 * t2410 + t2454 * qJ(2,2) + (t2706 + t2788) * pkin(1) - t2777 * t2724) + MDP(8) * ((-0.2e1 * t2628 + (t2470 + 0.4e1 * t2501) * t2144 + t2486) * t2379 + (t2562 / 0.2e1 + t2602 * t2521) * t2596 - 0.2e1 * t2144 * t2501 + t2628) + MDP(9) * ((-t2628 / 0.2e1 + t2149 / 0.4e1 + t2148 / 0.4e1 - t2565 / 0.4e1 + t2171 / 0.4e1) * t2597 + t2726 * t2562 + ((-t2687 / 0.4e1 - t2586 / 0.4e1) * t2326 * t2597 + ((t2758 - 0.1e1) * t2760 - 0.8e1 * t2525 - 0.4e1 * t2387 + 0.2e1) * t2528) * t2144);
t2133 = -t2142 * t2391 + t2390 * t2570;
t2136 = t2142 * t2390 + t2391 * t2570;
t2447 = MDP(1) * t2100 + MDP(10) * (-t2133 * t2405 + t2136 * t2411) + MDP(11) * (-t2133 * t2411 - t2136 * t2405) + MDP(13) * (t2711 / 0.2e1 + t2335 * t2749 + (t2734 + t2273 / 0.4e1) * g(2) + t2555 * g(1) + (t2610 * t2100 + t2613 * t2523) * pkin(2) + t2515 - t2785 * t2341) + MDP(14) * (t2714 / 0.2e1 + t2341 * t2749 + t2556 * g(2) + (t2734 + t2735) * g(1) + (t2613 * t2100 - t2610 * t2523) * pkin(2) + t2518 + t2785 * t2335) + MDP(2) * t2192 + MDP(3) * t2768 + MDP(6) * (0.2e1 * qJ(2,1) * t2100 + t2453) + MDP(7) * (t2453 * qJ(2,1) + t2100 * t2427 + t2418 * t2412 + (t2705 + t2769) * pkin(1)) + MDP(8) * ((-0.2e1 * t2627 + (t2472 + 0.4e1 * t2500) * t2145 + t2485) * t2379 + (t2561 / 0.2e1 + t2601 * t2523) * t2596 - 0.2e1 * t2145 * t2500 + t2627) + MDP(9) * ((-t2627 / 0.2e1 + t2151 / 0.4e1 + t2150 / 0.4e1 - t2564 / 0.4e1 + t2172 / 0.4e1) * t2597 + t2726 * t2561 + ((-t2689 / 0.4e1 - t2585 / 0.4e1) * t2329 * t2597 + ((t2757 - 0.1e1) * t2760 - 0.8e1 * t2524 - 0.4e1 * t2388 + 0.2e1) * t2527) * t2145);
t2446 = t2326 * t2448;
t2445 = t2329 * t2447;
t2444 = t2449 * t2323;
t2281 = sin(t2311);
t2279 = sin(t2309);
t2277 = sin(t2307);
t2208 = t2390 * t2411 + t2391 * t2405;
t2207 = t2390 * t2409 + t2391 * t2403;
t2206 = t2390 * t2407 + t2391 * t2401;
t2166 = t2726 * t2387 - 0.4e1 * t2525 + t2727;
t2165 = t2726 * t2388 - 0.4e1 * t2524 + t2727;
t2164 = t2726 * t2386 - 0.4e1 * t2526 + t2727;
t2157 = t2601 * t2626 + t2604 * t2618;
t2156 = t2602 * t2626 + t2604 * t2619;
t2155 = t2603 * t2626 + t2604 * t2621;
t2089 = -t2100 * t2394 + (pkin(1) * t2679 - 0.2e1 * t2539) * t2360;
t2088 = -t2099 * t2393 + (pkin(1) * t2681 - 0.2e1 * t2540) * t2357;
t2087 = -t2098 * t2392 + (pkin(1) * t2683 - 0.2e1 * t2541) * t2354;
t2083 = -t2714 / 0.2e1 + t2089 * t2341 + (t2338 / 0.2e1 + t2411 / 0.2e1) * t2542 + (t2733 + t2277 / 0.2e1 - t2556) * g(2) + (t2549 - t2550) * g(1) + t2518;
t2082 = -t2715 / 0.2e1 + t2088 * t2340 + (t2343 / 0.2e1 + t2409 / 0.2e1) * t2543 + (t2731 + t2281 / 0.2e1 - t2558) * g(2) + (t2551 - t2552) * g(1) + t2519;
t2081 = -t2716 / 0.2e1 + t2087 * t2339 + (t2342 / 0.2e1 + t2407 / 0.2e1) * t2544 + (t2732 + t2279 / 0.2e1 - t2560) * g(2) + (t2553 - t2554) * g(1) + t2520;
t2080 = -t2711 / 0.2e1 + t2089 * t2335 + (t2332 / 0.2e1 + t2405 / 0.2e1) * t2542 + (t2549 + t2550) * g(2) + (t2733 - t2277 / 0.2e1 - t2555) * g(1) + t2515;
t2079 = -t2712 / 0.2e1 + t2088 * t2334 + (t2337 / 0.2e1 + t2403 / 0.2e1) * t2543 + (t2551 + t2552) * g(2) + (t2731 - t2281 / 0.2e1 - t2557) * g(1) + t2516;
t2078 = -t2713 / 0.2e1 + t2087 * t2333 + (t2336 / 0.2e1 + t2401 / 0.2e1) * t2544 + (t2553 + t2554) * g(2) + (t2732 - t2279 / 0.2e1 - t2559) * g(1) + t2517;
t1 = [(-t2120 * t2538 - t2122 * t2535 - t2124 * t2532) * MDP(6) + (t2400 - g(1)) * MDP(15) + (t2124 * t2462 + t2184 * t2445) * t2359 + (t2122 * t2463 + t2182 * t2446) * t2356 + (t2120 * t2464 + t2180 * t2444) * t2353 + ((-t2155 * t2537 - t2156 * t2534 - t2157 * t2531) * t2598 + (-t2164 * t2537 - t2165 * t2531 - t2166 * t2534) * MDP(9) + (t2206 * t2593 + t2207 * t2591 + t2208 * t2589) * MDP(10) + (t2203 * t2589 + t2204 * t2593 + t2205 * t2591) * MDP(11) + (t2140 * t2648 + t2141 * t2645 + t2142 * t2642) * MDP(12) + (t2078 * t2648 + t2079 * t2645 + t2080 * t2642) * MDP(13) + (t2081 * t2648 + t2082 * t2645 + t2083 * t2642) * MDP(14)) * t2429 - t2782 * ((t2120 * t2692 + t2180 * t2695) * t2353 + (t2122 * t2691 + t2182 * t2694) * t2356 - (-t2124 * t2690 + t2184 * t2693) * t2359); (-t2119 * t2538 - t2121 * t2535 - t2123 * t2532) * MDP(6) + (t2399 - g(2)) * MDP(15) + (t2123 * t2462 + t2183 * t2445) * t2359 + (t2121 * t2463 + t2181 * t2446) * t2356 + (t2119 * t2464 + t2179 * t2444) * t2353 + ((-t2155 * t2536 - t2156 * t2533 - t2157 * t2530) * t2598 + (-t2164 * t2536 - t2165 * t2530 - t2166 * t2533) * MDP(9) + (t2206 * t2592 + t2207 * t2590 + t2208 * t2588) * MDP(10) + (t2203 * t2588 + t2204 * t2592 + t2205 * t2590) * MDP(11) + (t2140 * t2647 + t2141 * t2644 + t2142 * t2641) * MDP(12) + (t2078 * t2647 + t2079 * t2644 + t2080 * t2641) * MDP(13) + (t2081 * t2647 + t2082 * t2644 + t2083 * t2641) * MDP(14)) * t2429 - t2782 * ((t2119 * t2692 + t2179 * t2695) * t2353 + (t2121 * t2691 + t2181 * t2694) * t2356 - (-t2123 * t2690 + t2183 * t2693) * t2359); (-t2167 * t2580 - t2168 * t2577 - t2169 * t2574) * MDP(6) + (t2398 - g(3)) * MDP(15) + (t2473 * t2169 - t2447 * t2406) * t2359 + (t2474 * t2168 - t2448 * t2404) * t2356 + (t2475 * t2167 - t2449 * t2402) * t2353 + t2782 * ((t2069 * t2402 - t2098 * t2167) * t2353 + (t2070 * t2404 - t2099 * t2168) * t2356 - (t2071 * t2406 + t2100 * t2169) * t2359);];
tauX  = t1;
