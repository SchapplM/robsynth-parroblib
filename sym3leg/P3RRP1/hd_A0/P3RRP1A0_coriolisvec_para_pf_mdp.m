% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRP1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRP1G1P1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 15:31
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRP1G1P1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 15:25:33
% EndTime: 2019-05-03 15:31:26
% DurationCPUTime: 368.71s
% Computational Cost: add. (6283027->1470), mult. (15114495->2235), div. (39663->12), fcn. (3373084->26), ass. (0->964)
t6133 = koppelP(1,2);
t6079 = (qJ(3,1) * t6133);
t6136 = koppelP(1,1);
t6089 = (pkin(2) * t6136);
t5991 = -t6079 + t6089;
t6080 = (qJ(3,1) * t6136);
t6086 = (pkin(2) * t6133);
t5994 = t6080 + t6086;
t6127 = xP(3);
t6070 = sin(t6127);
t6071 = cos(t6127);
t5897 = t5991 * t6071 - t5994 * t6070;
t6125 = xDP(2);
t6067 = t6125 * pkin(2);
t6124 = xDP(3);
t6126 = xDP(1);
t6493 = qJ(3,1) * t6126;
t5852 = t5897 * t6124 + t6067 + t6493;
t5898 = t5991 * t6070 + t5994 * t6071;
t6050 = t6125 * qJ(3,1);
t6068 = pkin(2) * t6126;
t5853 = t5898 * t6124 + t6050 - t6068;
t6111 = legFrame(1,3);
t6056 = sin(t6111);
t6059 = cos(t6111);
t5792 = t5852 * t6059 + t5853 * t6056;
t5793 = -t5852 * t6056 + t5853 * t6059;
t5929 = t6070 * t6136 + t6071 * t6133;
t5905 = t5929 * t6124 - t6126;
t5932 = -t6070 * t6133 + t6071 * t6136;
t5908 = t5932 * t6124 + t6125;
t5830 = -t5905 * t6059 + t5908 * t6056;
t5833 = t5905 * t6056 + t5908 * t6059;
t6023 = -t6068 / 0.2e1;
t6035 = pkin(2) * t6050;
t6102 = qJ(1,1) + qJ(2,1);
t6044 = sin(t6102);
t6047 = cos(t6102);
t6117 = sin(qJ(1,1));
t6053 = qJ(3,1) * t6117;
t6139 = pkin(1) ^ 2;
t6069 = t6139 * t6125;
t6123 = cos(qJ(1,1));
t6098 = t6123 ^ 2;
t5992 = -2 * t6079 + t6089;
t5993 = 2 * t6080 + t6086;
t6186 = t5992 * t6071 - t5993 * t6070;
t6344 = pkin(2) * t6493;
t6130 = qJ(3,1) ^ 2;
t6383 = t6130 * t6126;
t6389 = t6125 * t6130;
t6392 = t6117 * t6123;
t6400 = t6070 * t5992;
t6412 = t6056 * t6126;
t6433 = t5993 * t6071;
t6451 = t5792 * t6117;
t6525 = pkin(1) * t6044;
t6038 = t6047 ^ 2;
t6528 = pkin(1) * t6038;
t6553 = 0.2e1 * t6056;
t6567 = -0.2e1 * qJ(3,1);
t6343 = pkin(2) * t6079;
t6030 = 0.2e1 * t6343;
t6078 = t6130 * t6136;
t6377 = t6136 * t6139;
t5949 = t6030 + 0.2e1 * t6078 + t6377;
t6065 = 0.2e1 * t6130 + t6139;
t6342 = pkin(2) * t6080;
t5950 = t6065 * t6133 - 0.2e1 * t6342;
t6571 = t6059 * (t5949 * t6071 - t5950 * t6070) + t6056 * (t5949 * t6070 + t5950 * t6071);
t5710 = (t5792 * t6123 - t5793 * t6117) * t6528 + ((t5793 * t6123 + t6451) * t6525 + (t6069 - 0.2e1 * t6344 + 0.2e1 * t6389) * t6059 + (-t6035 - t6383) * t6553 + (t5830 * t6392 - t5833 * t6098 - t6412) * t6139 + t6571 * t6124) * t6047 + (t5792 * t6567 + (-t5830 * t6098 - t5833 * t6392) * t6139) * t6044 - pkin(1) * (((t6124 * t6186 + t6067 + 0.2e1 * t6493) * t6059 + (t6050 + t6023 + (t6433 / 0.2e1 + t6400 / 0.2e1) * t6124) * t6553) * t6123 + t5833 * t6053);
t6138 = pkin(2) ^ 2;
t6062 = -t6130 + t6138;
t6041 = 0.1e1 + t6062;
t6304 = qJ(3,1) * t6392;
t6258 = pkin(2) * t6304;
t6170 = t6041 * t6098 - 0.2e1 * t6258;
t6274 = t6139 * t6392;
t6237 = pkin(2) * t6274;
t6479 = t6123 * qJ(3,1);
t6317 = t6044 * t6479;
t6427 = t6038 * t6139;
t6331 = 0.2e1 * t6427;
t6375 = -0.1e1 / 0.2e1 - t6138 / 0.2e1;
t6104 = 0.2e1 + t6139;
t6384 = t6130 * t6104;
t6395 = t6098 * t6139;
t6569 = -0.2e1 * pkin(1);
t6159 = -t6041 * t6395 + (t6130 / 0.2e1 + t6170 + t6375) * t6331 + t6317 * t6569 + 0.2e1 * qJ(3,1) * t6237 - t6384;
t6355 = t6098 - 0.1e1 / 0.2e1;
t6259 = t6355 * qJ(3,1);
t6275 = t6041 * t6392;
t6522 = pkin(1) * t6047;
t6349 = 0.4e1 * t6522;
t5779 = ((t6275 / 0.2e1 + pkin(2) * t6259) * t6525 + t6053 / 0.2e1) * t6349 + t6159;
t5772 = 0.1e1 / t5779;
t5701 = t5710 * t5772;
t6376 = t6138 * t6126;
t6022 = -t6376 / 0.2e1;
t6359 = t6383 / 0.2e1 + t6035;
t6031 = -0.2e1 * t6343;
t6378 = t6136 * t6138;
t6249 = -t6078 + t6378;
t5955 = t6031 + t6249;
t6403 = t6070 * t5955;
t6032 = 0.2e1 * t6342;
t6083 = t6138 * t6133;
t5956 = -t6130 * t6133 + t6032 + t6083;
t6436 = t5956 * t6071;
t5824 = t6022 + (t6436 / 0.2e1 + t6403 / 0.2e1) * t6124 + t6359;
t5874 = t5955 * t6071 - t5956 * t6070;
t6066 = t6125 * t6138;
t6252 = 0.2e1 * t6344 - t6389;
t5827 = t5874 * t6124 + t6066 + t6252;
t6537 = -t6056 / 0.2e1;
t5764 = t5824 * t6059 + t5827 * t6537;
t5767 = t5824 * t6553 + t5827 * t6059;
t5990 = t6079 + t6089;
t5995 = -t6080 + t6086;
t5896 = t5990 * t6071 - t5995 * t6070;
t5851 = t5896 * t6124 + t6067 - t6493;
t5899 = t5990 * t6070 + t5995 * t6071;
t5854 = -t5899 * t6124 + t6050 + t6068;
t5791 = t5851 * t6059 - t5854 * t6056;
t5794 = t5851 * t6056 + t5854 * t6059;
t5976 = pkin(2) * t6377 - t6079;
t6501 = pkin(2) * t6139;
t5977 = t6133 * t6501 + t6080;
t6502 = pkin(2) * t6123;
t6265 = -t6053 + t6502;
t6105 = 0.1e1 + t6139;
t6418 = t6044 * t6105;
t6318 = qJ(3,1) * t6418;
t6398 = t6071 * t6124;
t6399 = t6070 * t6124;
t6419 = t6044 * t6047;
t6534 = t6117 / 0.2e1;
t6547 = -0.2e1 * t6117;
t5692 = ((-t5976 * t6398 + t5977 * t6399 - t6493) * t6059 - t6056 * (t5976 * t6399 + t5977 * t6398 + t6050)) * t6047 - t5833 * t6318 + ((pkin(2) * t6412 + t5791 * t6098 - t5794 * t6392 - t6059 * t6067) * t6047 + (t5791 * t6392 + t5794 * t6098) * t6044) * t6139 + (-(t5764 * t6547 + t5767 * t6123) * t6038 - 0.2e1 * (t5764 * t6123 + t5767 * t6534) * t6419 + t6265 * t5792) * pkin(1);
t6593 = -t6138 - 0.1e1;
t6002 = t6126 * t6593 / 0.2e1;
t5926 = -t6136 * t6593 + t6031 - t6078;
t6406 = t6070 * t5926;
t5925 = t6032 + (-t6593 - t6130) * t6133;
t6442 = t5925 * t6071;
t5806 = t6002 + (t6442 / 0.2e1 + t6406 / 0.2e1) * t6124 + t6359;
t6407 = t6070 * t5925;
t5860 = t5926 * t6071 - t6407;
t6012 = t6125 * t6593;
t5821 = t5860 * t6124 - t6012 + t6252;
t5758 = t5806 * t6059 + t5821 * t6537;
t5761 = t5806 * t6553 + t5821 * t6059;
t6255 = -t6126 - t6376;
t6358 = t6066 + t6125;
t6496 = qJ(3,1) * t6044;
t5964 = t6136 - t6343 + t6378;
t5965 = t6083 + t6133 + t6342;
t6572 = t6059 * (t5964 * t6071 - t5965 * t6070) + (t5964 * t6070 + t5965 * t6071) * t6056;
t5722 = (t5758 * t6547 + t5761 * t6123) * t6528 + (0.2e1 * (t5758 * t6123 + t5761 * t6534) * t6525 - qJ(3,1) * t5830) * t6047 - t5833 * t6496 - (((t6344 + t6358) * t6059 + t6056 * (t6035 + t6255) + t6572 * t6124) * t6123 - qJ(3,1) * t6451) * pkin(1);
t5674 = (t5692 + t5722) * t5772;
t6497 = t5674 * pkin(2);
t5629 = t6497 - t5701;
t6608 = qJ(3,1) * t5629;
t6132 = koppelP(2,2);
t6076 = qJ(3,2) * t6132;
t6135 = koppelP(2,1);
t6088 = pkin(2) * t6135;
t5985 = -t6076 + t6088;
t6077 = qJ(3,2) * t6135;
t6085 = pkin(2) * t6132;
t5988 = t6077 + t6085;
t5893 = t5985 * t6071 - t5988 * t6070;
t6489 = qJ(3,2) * t6126;
t5848 = t5893 * t6124 + t6067 + t6489;
t5894 = t5985 * t6070 + t5988 * t6071;
t6049 = t6125 * qJ(3,2);
t5849 = t5894 * t6124 + t6049 - t6068;
t6110 = legFrame(2,3);
t6055 = sin(t6110);
t6058 = cos(t6110);
t5788 = t5848 * t6058 + t5849 * t6055;
t5789 = -t5848 * t6055 + t5849 * t6058;
t5928 = t6070 * t6135 + t6071 * t6132;
t5904 = t5928 * t6124 - t6126;
t5931 = -t6070 * t6132 + t6071 * t6135;
t5907 = t5931 * t6124 + t6125;
t5829 = -t5904 * t6058 + t5907 * t6055;
t5832 = t5904 * t6055 + t5907 * t6058;
t6034 = pkin(2) * t6049;
t6101 = qJ(1,2) + qJ(2,2);
t6043 = sin(t6101);
t6046 = cos(t6101);
t6115 = sin(qJ(1,2));
t6052 = qJ(3,2) * t6115;
t6121 = cos(qJ(1,2));
t6097 = t6121 ^ 2;
t5986 = -0.2e1 * t6076 + t6088;
t5987 = 0.2e1 * t6077 + t6085;
t6187 = t5986 * t6071 - t5987 * t6070;
t6338 = pkin(2) * t6489;
t6129 = qJ(3,2) ^ 2;
t6385 = t6129 * t6126;
t6390 = t6125 * t6129;
t6393 = t6115 * t6121;
t6401 = t6070 * t5986;
t6413 = t6055 * t6126;
t6434 = t5987 * t6071;
t6452 = t5788 * t6115;
t6526 = pkin(1) * t6043;
t6037 = t6046 ^ 2;
t6529 = pkin(1) * t6037;
t6554 = 0.2e1 * t6055;
t6566 = -0.2e1 * qJ(3,2);
t6336 = pkin(2) * t6076;
t6026 = 0.2e1 * t6336;
t6075 = t6129 * t6135;
t6379 = t6135 * t6139;
t5947 = t6026 + 0.2e1 * t6075 + t6379;
t6064 = 0.2e1 * t6129 + t6139;
t6334 = pkin(2) * t6077;
t5948 = t6064 * t6132 - 0.2e1 * t6334;
t6573 = t6058 * (t5947 * t6071 - t5948 * t6070) + t6055 * (t5947 * t6070 + t5948 * t6071);
t5709 = (t5788 * t6121 - t5789 * t6115) * t6529 + ((t5789 * t6121 + t6452) * t6526 + (t6069 - 0.2e1 * t6338 + 0.2e1 * t6390) * t6058 + (-t6034 - t6385) * t6554 + (t5829 * t6393 - t5832 * t6097 - t6413) * t6139 + t6573 * t6124) * t6046 + (t5788 * t6566 + (-t5829 * t6097 - t5832 * t6393) * t6139) * t6043 - pkin(1) * (((t6124 * t6187 + t6067 + 0.2e1 * t6489) * t6058 + (t6049 + t6023 + (t6434 / 0.2e1 + t6401 / 0.2e1) * t6124) * t6554) * t6121 + t5832 * t6052);
t6061 = -t6129 + t6138;
t6040 = 0.1e1 + t6061;
t6305 = qJ(3,2) * t6393;
t6257 = pkin(2) * t6305;
t6169 = t6040 * t6097 - 0.2e1 * t6257;
t6277 = t6139 * t6393;
t6238 = pkin(2) * t6277;
t6480 = t6121 * qJ(3,2);
t6315 = t6043 * t6480;
t6428 = t6037 * t6139;
t6332 = 0.2e1 * t6428;
t6386 = t6129 * t6104;
t6396 = t6097 * t6139;
t6160 = -t6040 * t6396 + (t6129 / 0.2e1 + t6169 + t6375) * t6332 + t6315 * t6569 + 0.2e1 * qJ(3,2) * t6238 - t6386;
t6356 = t6097 - 0.1e1 / 0.2e1;
t6260 = t6356 * qJ(3,2);
t6278 = t6040 * t6393;
t6523 = pkin(1) * t6046;
t6351 = 0.4e1 * t6523;
t5778 = ((t6278 / 0.2e1 + pkin(2) * t6260) * t6526 + t6052 / 0.2e1) * t6351 + t6160;
t5770 = 0.1e1 / t5778;
t5700 = t5709 * t5770;
t6360 = t6385 / 0.2e1 + t6034;
t6027 = -0.2e1 * t6336;
t6380 = t6135 * t6138;
t6250 = -t6075 + t6380;
t5953 = t6027 + t6250;
t6404 = t6070 * t5953;
t6029 = 0.2e1 * t6334;
t6082 = t6138 * t6132;
t5954 = -t6129 * t6132 + t6029 + t6082;
t6437 = t5954 * t6071;
t5823 = t6022 + (t6437 / 0.2e1 + t6404 / 0.2e1) * t6124 + t6360;
t5872 = t5953 * t6071 - t5954 * t6070;
t6254 = 0.2e1 * t6338 - t6390;
t5826 = t5872 * t6124 + t6066 + t6254;
t6538 = -t6055 / 0.2e1;
t5763 = t5823 * t6058 + t5826 * t6538;
t5766 = t5823 * t6554 + t5826 * t6058;
t5984 = t6076 + t6088;
t5989 = -t6077 + t6085;
t5892 = t5984 * t6071 - t5989 * t6070;
t5847 = t5892 * t6124 + t6067 - t6489;
t5895 = t5984 * t6070 + t5989 * t6071;
t5850 = -t5895 * t6124 + t6049 + t6068;
t5787 = t5847 * t6058 - t5850 * t6055;
t5790 = t5847 * t6055 + t5850 * t6058;
t5974 = pkin(2) * t6379 - t6076;
t5975 = t6132 * t6501 + t6077;
t6503 = pkin(2) * t6121;
t6266 = -t6052 + t6503;
t6420 = t6043 * t6105;
t6316 = qJ(3,2) * t6420;
t6421 = t6043 * t6046;
t6535 = t6115 / 0.2e1;
t6548 = -0.2e1 * t6115;
t5691 = ((-t5974 * t6398 + t5975 * t6399 - t6489) * t6058 - t6055 * (t5974 * t6399 + t5975 * t6398 + t6049)) * t6046 - t5832 * t6316 + ((pkin(2) * t6413 + t5787 * t6097 - t5790 * t6393 - t6058 * t6067) * t6046 + (t5787 * t6393 + t5790 * t6097) * t6043) * t6139 + (-(t5763 * t6548 + t5766 * t6121) * t6037 - 0.2e1 * (t5763 * t6121 + t5766 * t6535) * t6421 + t6266 * t5788) * pkin(1);
t5924 = -t6135 * t6593 + t6027 - t6075;
t6408 = t6070 * t5924;
t5923 = t6029 + (-t6593 - t6129) * t6132;
t6443 = t5923 * t6071;
t5805 = t6002 + (t6443 / 0.2e1 + t6408 / 0.2e1) * t6124 + t6360;
t6409 = t6070 * t5923;
t5858 = t5924 * t6071 - t6409;
t5820 = t5858 * t6124 - t6012 + t6254;
t5757 = t5805 * t6058 + t5820 * t6538;
t5760 = t5805 * t6554 + t5820 * t6058;
t6492 = qJ(3,2) * t6043;
t5962 = t6135 - t6336 + t6380;
t5963 = t6082 + t6132 + t6334;
t6574 = t6058 * (t5962 * t6071 - t5963 * t6070) + (t5962 * t6070 + t5963 * t6071) * t6055;
t5721 = (t5757 * t6548 + t5760 * t6121) * t6529 + (0.2e1 * (t5757 * t6121 + t5760 * t6535) * t6526 - qJ(3,2) * t5829) * t6046 - t5832 * t6492 - (((t6338 + t6358) * t6058 + t6055 * (t6034 + t6255) + t6574 * t6124) * t6121 - qJ(3,2) * t6452) * pkin(1);
t5672 = (t5691 + t5721) * t5770;
t6498 = t5672 * pkin(2);
t5628 = t6498 - t5700;
t6607 = qJ(3,2) * t5628;
t6131 = koppelP(3,2);
t6073 = qJ(3,3) * t6131;
t6134 = koppelP(3,1);
t6087 = pkin(2) * t6134;
t5979 = -t6073 + t6087;
t6074 = qJ(3,3) * t6134;
t6084 = pkin(2) * t6131;
t5982 = t6074 + t6084;
t5889 = t5979 * t6071 - t5982 * t6070;
t6485 = qJ(3,3) * t6126;
t5844 = t5889 * t6124 + t6067 + t6485;
t5890 = t5979 * t6070 + t5982 * t6071;
t6048 = t6125 * qJ(3,3);
t5845 = t5890 * t6124 + t6048 - t6068;
t6109 = legFrame(3,3);
t6054 = sin(t6109);
t6057 = cos(t6109);
t5784 = t5844 * t6057 + t5845 * t6054;
t5785 = -t5844 * t6054 + t5845 * t6057;
t5927 = t6070 * t6134 + t6071 * t6131;
t5903 = t5927 * t6124 - t6126;
t5930 = -t6070 * t6131 + t6071 * t6134;
t5906 = t5930 * t6124 + t6125;
t5828 = -t5903 * t6057 + t5906 * t6054;
t5831 = t5903 * t6054 + t5906 * t6057;
t6033 = pkin(2) * t6048;
t6100 = qJ(1,3) + qJ(2,3);
t6042 = sin(t6100);
t6045 = cos(t6100);
t6113 = sin(qJ(1,3));
t6051 = qJ(3,3) * t6113;
t6119 = cos(qJ(1,3));
t6096 = t6119 ^ 2;
t5980 = -0.2e1 * t6073 + t6087;
t5981 = 0.2e1 * t6074 + t6084;
t6188 = t5980 * t6071 - t5981 * t6070;
t6339 = pkin(2) * t6485;
t6128 = qJ(3,3) ^ 2;
t6387 = t6128 * t6126;
t6391 = t6125 * t6128;
t6394 = t6113 * t6119;
t6402 = t6070 * t5980;
t6414 = t6054 * t6126;
t6435 = t5981 * t6071;
t6453 = t5784 * t6113;
t6527 = pkin(1) * t6042;
t6036 = t6045 ^ 2;
t6530 = pkin(1) * t6036;
t6555 = 0.2e1 * t6054;
t6565 = -0.2e1 * qJ(3,3);
t6337 = pkin(2) * t6073;
t6024 = 0.2e1 * t6337;
t6072 = t6128 * t6134;
t6381 = t6134 * t6139;
t5945 = t6024 + 0.2e1 * t6072 + t6381;
t6063 = 0.2e1 * t6128 + t6139;
t6335 = pkin(2) * t6074;
t5946 = t6063 * t6131 - 0.2e1 * t6335;
t6575 = t6057 * (t5945 * t6071 - t5946 * t6070) + t6054 * (t5945 * t6070 + t5946 * t6071);
t5708 = (t5784 * t6119 - t5785 * t6113) * t6530 + ((t5785 * t6119 + t6453) * t6527 + (t6069 - 0.2e1 * t6339 + 0.2e1 * t6391) * t6057 + (-t6033 - t6387) * t6555 + (t5828 * t6394 - t5831 * t6096 - t6414) * t6139 + t6575 * t6124) * t6045 + (t5784 * t6565 + (-t5828 * t6096 - t5831 * t6394) * t6139) * t6042 - pkin(1) * (((t6124 * t6188 + t6067 + 0.2e1 * t6485) * t6057 + (t6048 + t6023 + (t6435 / 0.2e1 + t6402 / 0.2e1) * t6124) * t6555) * t6119 + t5831 * t6051);
t6060 = -t6128 + t6138;
t6039 = 0.1e1 + t6060;
t6306 = qJ(3,3) * t6394;
t6256 = pkin(2) * t6306;
t6168 = t6039 * t6096 - 0.2e1 * t6256;
t6280 = t6139 * t6394;
t6239 = pkin(2) * t6280;
t6481 = t6119 * qJ(3,3);
t6313 = t6042 * t6481;
t6429 = t6036 * t6139;
t6333 = 0.2e1 * t6429;
t6388 = t6128 * t6104;
t6397 = t6096 * t6139;
t6161 = -t6039 * t6397 + (t6128 / 0.2e1 + t6168 + t6375) * t6333 + t6313 * t6569 + 0.2e1 * qJ(3,3) * t6239 - t6388;
t6357 = t6096 - 0.1e1 / 0.2e1;
t6261 = t6357 * qJ(3,3);
t6281 = t6039 * t6394;
t6524 = pkin(1) * t6045;
t6353 = 0.4e1 * t6524;
t5777 = ((t6281 / 0.2e1 + pkin(2) * t6261) * t6527 + t6051 / 0.2e1) * t6353 + t6161;
t5768 = 0.1e1 / t5777;
t5699 = t5708 * t5768;
t6361 = t6387 / 0.2e1 + t6033;
t6025 = -0.2e1 * t6337;
t6382 = t6134 * t6138;
t6251 = -t6072 + t6382;
t5951 = t6025 + t6251;
t6405 = t6070 * t5951;
t6028 = 0.2e1 * t6335;
t6081 = t6138 * t6131;
t5952 = -t6128 * t6131 + t6028 + t6081;
t6438 = t5952 * t6071;
t5822 = t6022 + (t6438 / 0.2e1 + t6405 / 0.2e1) * t6124 + t6361;
t5870 = t5951 * t6071 - t5952 * t6070;
t6253 = 0.2e1 * t6339 - t6391;
t5825 = t5870 * t6124 + t6066 + t6253;
t6539 = -t6054 / 0.2e1;
t5762 = t5822 * t6057 + t5825 * t6539;
t5765 = t5822 * t6555 + t5825 * t6057;
t5978 = t6073 + t6087;
t5983 = -t6074 + t6084;
t5888 = t5978 * t6071 - t5983 * t6070;
t5843 = t5888 * t6124 + t6067 - t6485;
t5891 = t5978 * t6070 + t5983 * t6071;
t5846 = -t5891 * t6124 + t6048 + t6068;
t5783 = t5843 * t6057 - t5846 * t6054;
t5786 = t5843 * t6054 + t5846 * t6057;
t5972 = pkin(2) * t6381 - t6073;
t5973 = t6131 * t6501 + t6074;
t6504 = pkin(2) * t6119;
t6267 = -t6051 + t6504;
t6422 = t6042 * t6105;
t6314 = qJ(3,3) * t6422;
t6423 = t6042 * t6045;
t6536 = t6113 / 0.2e1;
t6549 = -0.2e1 * t6113;
t5690 = ((-t5972 * t6398 + t5973 * t6399 - t6485) * t6057 - t6054 * (t5972 * t6399 + t5973 * t6398 + t6048)) * t6045 - t5831 * t6314 + ((pkin(2) * t6414 + t5783 * t6096 - t5786 * t6394 - t6057 * t6067) * t6045 + (t5783 * t6394 + t5786 * t6096) * t6042) * t6139 + (-(t5762 * t6549 + t5765 * t6119) * t6036 - 0.2e1 * (t5762 * t6119 + t5765 * t6536) * t6423 + t6267 * t5784) * pkin(1);
t5922 = -t6134 * t6593 + t6025 - t6072;
t6410 = t6070 * t5922;
t5921 = t6028 + (-t6593 - t6128) * t6131;
t6444 = t5921 * t6071;
t5804 = t6002 + (t6444 / 0.2e1 + t6410 / 0.2e1) * t6124 + t6361;
t6411 = t6070 * t5921;
t5856 = t5922 * t6071 - t6411;
t5819 = t5856 * t6124 - t6012 + t6253;
t5756 = t5804 * t6057 + t5819 * t6539;
t5759 = t5804 * t6555 + t5819 * t6057;
t6488 = qJ(3,3) * t6042;
t5960 = t6134 - t6337 + t6382;
t5961 = t6081 + t6131 + t6335;
t6576 = t6057 * (t5960 * t6071 - t5961 * t6070) + (t5960 * t6070 + t5961 * t6071) * t6054;
t5720 = (t5756 * t6549 + t5759 * t6119) * t6530 + (0.2e1 * (t5756 * t6119 + t5759 * t6536) * t6527 - qJ(3,3) * t5828) * t6045 - t5831 * t6488 - (((t6339 + t6358) * t6057 + t6054 * (t6033 + t6255) + t6576 * t6124) * t6119 - qJ(3,3) * t6453) * pkin(1);
t5670 = (t5690 + t5720) * t5768;
t6499 = t5670 * pkin(2);
t5627 = t6499 - t5699;
t6606 = qJ(3,3) * t5627;
t5648 = t5670 * t6138;
t5645 = t6128 * t5670;
t6462 = t5720 * t5768;
t5711 = t6139 * t6462;
t6369 = t5645 + t5711;
t6513 = pkin(2) * t5708;
t5564 = t5648 + (t5720 - t6513) * t5768 + t6369;
t5612 = pkin(2) * t5627;
t5571 = t5612 + t6369;
t6542 = t5690 / 0.2e1;
t5663 = (t5720 + t6542) * t5768;
t5639 = t5663 * pkin(2);
t5693 = -t5699 / 0.4e1;
t5616 = t5639 + t5693;
t5702 = t6462 / 0.2e1;
t6468 = t5690 * t5768;
t5657 = t5702 + t6468 / 0.4e1;
t5703 = -t6462 / 0.4e1;
t5658 = t5702 + t6468 / 0.2e1;
t5694 = -t5699 / 0.2e1;
t6373 = t5658 * pkin(2) + t5694;
t5617 = t5639 + t5694;
t6500 = t5617 * pkin(2);
t6507 = pkin(2) * t6113;
t6558 = 0.4e1 * t6036;
t6564 = -0.2e1 * t5617;
t5529 = -(0.8e1 * ((t5657 * t6128 - t6500 / 0.2e1) * t6096 + t5616 * t6306 + (t5703 - t6468 / 0.8e1) * t6128 + t6500 / 0.4e1) * t6527 + t5564 * t6481 + t5571 * t6507) * t6524 - (t5564 * t6051 - t5571 * t6504) * t6527 + t6373 * t6565 + ((-0.4e1 * t6036 + 0.2e1) * (-t5663 * t6128 + t6500) * t6394 + (t6564 + (t6558 + (-0.8e1 * t6036 + 0.4e1) * t6096) * t5616) * qJ(3,3)) * t6139;
t5591 = t5645 + t5612;
t5624 = t6499 + t5694;
t6207 = t6481 + t6507;
t6282 = (t5612 - t5645) * t6394;
t6552 = 0.2e1 * t6096;
t6533 = t6552 - 0.1e1;
t6319 = t6533 * qJ(3,3);
t6486 = qJ(3,3) * t6105;
t6570 = -0.4e1 * pkin(1);
t5542 = -t5627 * t6486 + (((t5658 * t6128 - t5612 / 0.2e1) * t6096 + t5624 * t6306 + (t5703 - t6468 / 0.4e1) * t6128 + t5612 / 0.4e1) * t6423 * t6570 + (t6042 * t6267 - t6045 * t6207) * t5591) * pkin(1) + (-0.2e1 * (t5624 * t6319 + t6282) * t6036 + qJ(3,3) * t5624 * t6552 + t6282) * t6139;
t5912 = pkin(2) * t6319 + t6281;
t5882 = t5912 * t6527 + t6051;
t6354 = 0.2e1 * t6524;
t5780 = 0.1e1 / (t5882 * t6354 + t6161);
t6471 = t5670 * t5708;
t6302 = t5780 * t6471;
t6229 = t5768 * t6302;
t6309 = qJ(3,3) * t6397;
t6324 = -t6527 / 0.2e1;
t6546 = -pkin(2) / 0.2e1;
t6143 = ((pkin(2) * t6394 + t6261) * t6429 - ((pkin(2) * t6357 - t6306) * t6527 + t6207 * t6546) * t6524 + pkin(2) * t6267 * t6324 - t6309 / 0.2e1 - t6239 / 0.2e1 + t6486 / 0.2e1) * t6229;
t5603 = 0.2e1 * t6143;
t6487 = qJ(3,3) * t6057;
t6340 = pkin(2) * t6487;
t5999 = -0.2e1 * t6340;
t5918 = t6054 * t6060 + t5999;
t6009 = t6054 * qJ(3,3);
t6003 = pkin(2) * t6009;
t6107 = t6138 / 0.2e1;
t6330 = t6107 - t6128 / 0.2e1;
t5834 = t5918 * t6119 + (t6057 * t6330 + t6003) * t6549;
t5996 = 0.2e1 * t6003;
t5840 = (t6057 * t6060 + t5996) * t6119 + t5918 * t6113;
t6019 = t6054 * pkin(2);
t5936 = t6019 - t6487;
t6510 = pkin(2) * t6057;
t5934 = t6009 - t6510;
t5935 = t6019 + t6487;
t6181 = -t5934 * t6394 + t5935 * t6096;
t6182 = -t5934 * t6096 - t5935 * t6394;
t6417 = t6045 * t6057;
t5738 = (t6054 * t6422 - t6417) * qJ(3,3) + (t5834 * t6036 + t5840 * t6423 - t5936 * t6267) * pkin(1) + ((-t6181 + t6019) * t6045 + t6182 * t6042) * t6139;
t5933 = t6009 + t6510;
t6312 = t6042 * t6487;
t6432 = t6009 * t6045;
t5741 = -t6105 * t6312 - t6432 + (t5834 * t6423 - t5840 * t6036 + t5933 * t6267) * pkin(1) + ((t6182 - t6510) * t6045 + t6181 * t6042) * t6139;
t6099 = t6124 ^ 2;
t6456 = t5780 * t6099;
t6006 = 0.1e1 / 0.2e1 + t6330;
t6374 = 0.1e1 / 0.4e1 + t6138 / 0.4e1;
t5900 = -t6006 * t6096 + t6256 - t6128 / 0.4e1 + t6374;
t6478 = 0.2e1 * pkin(1);
t5774 = 0.1e1 / (t6388 + (-t5882 * t6045 + t6313) * t6478 + (t5900 * t6558 + t6168) * t6139);
t6459 = t5768 * t5774;
t5522 = t5603 + (-t5738 * t5930 - t5741 * t5927) * t6456 + (-t5529 * t5720 - t5542 * t5690) * t6459;
t6370 = t5645 + t5648;
t5576 = (-t5720 - t6513) * t5768 + t6370;
t5579 = pkin(2) * t5645 - t5627 * t6593;
t6543 = pkin(2) * qJ(3,3);
t5555 = (t5900 * t6462 * t6527 + t5576 * t6481 / 0.4e1 + t6113 * t5579 / 0.4e1) * t6353 + (t5576 * t6051 - t5579 * t6119) * t6527 - t6606 + (0.2e1 * t5912 * t6036 - t6533 * t6543 - t6281) * t5711;
t5594 = -pkin(2) * t5699 + t6370;
t6137 = pkin(2) * t6138;
t6579 = t5670 * (pkin(2) * (0.1e1 + t6128) + t6137) + t6593 * t5699;
t5558 = -t6606 + ((t5594 * t6481 + t6113 * t6579) * t6045 + (t5594 * t6051 - t6119 * t6579) * t6042) * pkin(1);
t5915 = t6039 * t6054 + t5999;
t6426 = t6039 * t6057;
t5837 = (t5996 + t6426) * t6119 + t6113 * t5915;
t5909 = t5915 * t6119;
t6441 = t5933 * t6113;
t5750 = -t6312 - t6432 + (t5837 * t6036 - (t5909 + (t6006 * t6057 + t6003) * t6549) * t6423 - (t6057 * t6138 + t6003 + t6057) * t6119 + qJ(3,3) * t6441) * pkin(1);
t6561 = -0.2e1 * t6003;
t5753 = (t6042 * t6054 - t6417) * qJ(3,3) + (-t5909 * t6036 - t5837 * t6423 + (t6054 * t6138 + t6054 - t6340) * t6119 + (-(t6561 - t6426) * t6036 - qJ(3,3) * t5936) * t6113) * pkin(1);
t6228 = (-qJ(3,3) + ((pkin(2) * t6481 - t6113 * t6593) * t6045 - (-pkin(2) * t6051 - t6119 * t6593) * t6042) * pkin(1)) * t6302;
t5537 = (-t5750 * t5927 - t5753 * t5930) * t6456 + (-t6228 + (-t5555 * t5720 - t5558 * t5690) * t5774) * t5768;
t6605 = t5522 + t5537;
t5651 = t5672 * t6138;
t5646 = t6129 * t5672;
t6461 = t5721 * t5770;
t5712 = t6139 * t6461;
t6367 = t5646 + t5712;
t6512 = pkin(2) * t5709;
t5565 = t5651 + (t5721 - t6512) * t5770 + t6367;
t5613 = pkin(2) * t5628;
t5573 = t5613 + t6367;
t6541 = t5691 / 0.2e1;
t5664 = (t5721 + t6541) * t5770;
t5640 = t5664 * pkin(2);
t5695 = -t5700 / 0.4e1;
t5619 = t5640 + t5695;
t5704 = t6461 / 0.2e1;
t6467 = t5691 * t5770;
t5659 = t5704 + t6467 / 0.4e1;
t5705 = -t6461 / 0.4e1;
t5660 = t5704 + t6467 / 0.2e1;
t5696 = -t5700 / 0.2e1;
t6372 = t5660 * pkin(2) + t5696;
t6506 = pkin(2) * t6115;
t5620 = t5640 + t5696;
t6515 = pkin(2) * t5620;
t6557 = 0.4e1 * t6037;
t6563 = -0.2e1 * t5620;
t5528 = -(0.8e1 * ((t5659 * t6129 - t6515 / 0.2e1) * t6097 + t5619 * t6305 + (t5705 - t6467 / 0.8e1) * t6129 + t6515 / 0.4e1) * t6526 + t5565 * t6480 + t5573 * t6506) * t6523 - (t5565 * t6052 - t5573 * t6503) * t6526 + t6372 * t6566 + ((-0.4e1 * t6037 + 0.2e1) * (-t5664 * t6129 + t6515) * t6393 + (t6563 + (t6557 + (-0.8e1 * t6037 + 0.4e1) * t6097) * t5619) * qJ(3,2)) * t6139;
t5592 = t5646 + t5613;
t5625 = t6498 + t5696;
t6208 = t6480 + t6506;
t6279 = (t5613 - t5646) * t6393;
t6551 = 0.2e1 * t6097;
t6532 = t6551 - 0.1e1;
t6320 = qJ(3,2) * t6532;
t6490 = qJ(3,2) * t6105;
t5540 = -t5628 * t6490 + (((t5660 * t6129 - t5613 / 0.2e1) * t6097 + t5625 * t6305 + (t5705 - t6467 / 0.4e1) * t6129 + t5613 / 0.4e1) * t6421 * t6570 + (t6043 * t6266 - t6046 * t6208) * t5592) * pkin(1) + (-0.2e1 * (t5625 * t6320 + t6279) * t6037 + qJ(3,2) * t5625 * t6551 + t6279) * t6139;
t5913 = pkin(2) * t6320 + t6278;
t5883 = t5913 * t6526 + t6052;
t6352 = 0.2e1 * t6523;
t5781 = 0.1e1 / (t5883 * t6352 + t6160);
t6470 = t5672 * t5709;
t6300 = t5781 * t6470;
t6226 = t5770 * t6300;
t6308 = qJ(3,2) * t6396;
t6323 = -t6526 / 0.2e1;
t6142 = ((pkin(2) * t6393 + t6260) * t6428 - ((pkin(2) * t6356 - t6305) * t6526 + t6208 * t6546) * t6523 + pkin(2) * t6266 * t6323 - t6308 / 0.2e1 - t6238 / 0.2e1 + t6490 / 0.2e1) * t6226;
t5604 = 0.2e1 * t6142;
t6491 = qJ(3,2) * t6058;
t6341 = pkin(2) * t6491;
t6000 = -0.2e1 * t6341;
t5919 = t6055 * t6061 + t6000;
t6010 = t6055 * qJ(3,2);
t6004 = pkin(2) * t6010;
t6329 = t6107 - t6129 / 0.2e1;
t5835 = t5919 * t6121 + (t6058 * t6329 + t6004) * t6548;
t5997 = 0.2e1 * t6004;
t5841 = (t6058 * t6061 + t5997) * t6121 + t5919 * t6115;
t6020 = t6055 * pkin(2);
t5940 = t6020 - t6491;
t6509 = pkin(2) * t6058;
t5938 = t6010 - t6509;
t5939 = t6020 + t6491;
t6179 = -t5938 * t6393 + t5939 * t6097;
t6180 = -t5938 * t6097 - t5939 * t6393;
t6416 = t6046 * t6058;
t5739 = (t6055 * t6420 - t6416) * qJ(3,2) + (t5835 * t6037 + t5841 * t6421 - t5940 * t6266) * pkin(1) + ((-t6179 + t6020) * t6046 + t6180 * t6043) * t6139;
t5937 = t6010 + t6509;
t6311 = t6043 * t6491;
t6431 = t6010 * t6046;
t5742 = -t6105 * t6311 - t6431 + (t5835 * t6421 - t5841 * t6037 + t5937 * t6266) * pkin(1) + ((t6180 - t6509) * t6046 + t6179 * t6043) * t6139;
t6455 = t5781 * t6099;
t6007 = 0.1e1 / 0.2e1 + t6329;
t5901 = -t6007 * t6097 + t6257 - t6129 / 0.4e1 + t6374;
t5775 = 0.1e1 / (t6386 + (-t5883 * t6046 + t6315) * t6478 + (t5901 * t6557 + t6169) * t6139);
t6458 = t5770 * t5775;
t5523 = t5604 + (-t5739 * t5931 - t5742 * t5928) * t6455 + (-t5528 * t5721 - t5540 * t5691) * t6458;
t6368 = t5646 + t5651;
t5577 = (-t5721 - t6512) * t5770 + t6368;
t5580 = pkin(2) * t5646 - t5628 * t6593;
t6544 = pkin(2) * qJ(3,2);
t5556 = (t5901 * t6461 * t6526 + t5577 * t6480 / 0.4e1 + t6115 * t5580 / 0.4e1) * t6351 + (t5577 * t6052 - t5580 * t6121) * t6526 - t6607 + (0.2e1 * t5913 * t6037 - t6532 * t6544 - t6278) * t5712;
t5595 = -pkin(2) * t5700 + t6368;
t6578 = t5672 * (pkin(2) * (0.1e1 + t6129) + t6137) + t6593 * t5700;
t5559 = -t6607 + ((t5595 * t6480 + t6115 * t6578) * t6046 + (t5595 * t6052 - t6121 * t6578) * t6043) * pkin(1);
t5916 = t6040 * t6055 + t6000;
t6425 = t6040 * t6058;
t5838 = (t5997 + t6425) * t6121 + t6115 * t5916;
t5910 = t5916 * t6121;
t6440 = t5937 * t6115;
t5751 = -t6311 - t6431 + (t5838 * t6037 - (t5910 + (t6007 * t6058 + t6004) * t6548) * t6421 - (t6058 * t6138 + t6004 + t6058) * t6121 + qJ(3,2) * t6440) * pkin(1);
t6560 = -0.2e1 * t6004;
t5754 = (t6043 * t6055 - t6416) * qJ(3,2) + (-t5910 * t6037 - t5838 * t6421 + (t6055 * t6138 + t6055 - t6341) * t6121 + (-(t6560 - t6425) * t6037 - qJ(3,2) * t5940) * t6115) * pkin(1);
t6225 = (-qJ(3,2) + ((pkin(2) * t6480 - t6115 * t6593) * t6046 - (-pkin(2) * t6052 - t6121 * t6593) * t6043) * pkin(1)) * t6300;
t5538 = (-t5751 * t5928 - t5754 * t5931) * t6455 + (-t6225 + (-t5556 * t5721 - t5559 * t5691) * t5775) * t5770;
t6604 = t5523 + t5538;
t5654 = t5674 * t6138;
t5647 = t6130 * t5674;
t6460 = t5722 * t5772;
t5713 = t6139 * t6460;
t6365 = t5647 + t5713;
t6511 = pkin(2) * t5710;
t5566 = t5654 + (t5722 - t6511) * t5772 + t6365;
t5614 = pkin(2) * t5629;
t5575 = t5614 + t6365;
t6540 = t5692 / 0.2e1;
t5665 = (t5722 + t6540) * t5772;
t5641 = t5665 * pkin(2);
t5697 = -t5701 / 0.4e1;
t5622 = t5641 + t5697;
t5706 = t6460 / 0.2e1;
t6466 = t5692 * t5772;
t5661 = t5706 + t6466 / 0.4e1;
t5707 = -t6460 / 0.4e1;
t5662 = t5706 + t6466 / 0.2e1;
t5698 = -t5701 / 0.2e1;
t6371 = t5662 * pkin(2) + t5698;
t6505 = pkin(2) * t6117;
t5623 = t5641 + t5698;
t6514 = pkin(2) * t5623;
t6556 = 0.4e1 * t6038;
t6562 = -0.2e1 * t5623;
t5530 = -(0.8e1 * ((t5661 * t6130 - t6514 / 0.2e1) * t6098 + t5622 * t6304 + (t5707 - t6466 / 0.8e1) * t6130 + t6514 / 0.4e1) * t6525 + t5566 * t6479 + t5575 * t6505) * t6522 - (t5566 * t6053 - t5575 * t6502) * t6525 + t6371 * t6567 + ((-0.4e1 * t6038 + 0.2e1) * (-t5665 * t6130 + t6514) * t6392 + (t6562 + (t6556 + (-0.8e1 * t6038 + 0.4e1) * t6098) * t5622) * qJ(3,1)) * t6139;
t5593 = t5647 + t5614;
t5626 = t6497 + t5698;
t6209 = t6479 + t6505;
t6276 = (t5614 - t5647) * t6392;
t6550 = 0.2e1 * t6098;
t6531 = t6550 - 0.1e1;
t6321 = qJ(3,1) * t6531;
t6494 = qJ(3,1) * t6105;
t5541 = -t5629 * t6494 + (((t5662 * t6130 - t5614 / 0.2e1) * t6098 + t5626 * t6304 + (t5707 - t6466 / 0.4e1) * t6130 + t5614 / 0.4e1) * t6419 * t6570 + (t6044 * t6265 - t6047 * t6209) * t5593) * pkin(1) + (-0.2e1 * (t5626 * t6321 + t6276) * t6038 + qJ(3,1) * t5626 * t6550 + t6276) * t6139;
t5914 = pkin(2) * t6321 + t6275;
t5884 = t5914 * t6525 + t6053;
t6350 = 0.2e1 * t6522;
t5782 = 0.1e1 / (t5884 * t6350 + t6159);
t6469 = t5674 * t5710;
t6298 = t5782 * t6469;
t6223 = t5772 * t6298;
t6307 = qJ(3,1) * t6395;
t6322 = -t6525 / 0.2e1;
t6141 = ((pkin(2) * t6392 + t6259) * t6427 - ((pkin(2) * t6355 - t6304) * t6525 + t6209 * t6546) * t6522 + pkin(2) * t6265 * t6322 - t6307 / 0.2e1 - t6237 / 0.2e1 + t6494 / 0.2e1) * t6223;
t5605 = 0.2e1 * t6141;
t6495 = qJ(3,1) * t6059;
t6345 = pkin(2) * t6495;
t6001 = -0.2e1 * t6345;
t5920 = t6056 * t6062 + t6001;
t6011 = t6056 * qJ(3,1);
t6005 = pkin(2) * t6011;
t6328 = t6107 - t6130 / 0.2e1;
t5836 = t5920 * t6123 + (t6059 * t6328 + t6005) * t6547;
t5998 = 0.2e1 * t6005;
t5842 = (t6059 * t6062 + t5998) * t6123 + t5920 * t6117;
t6021 = t6056 * pkin(2);
t5944 = t6021 - t6495;
t6508 = pkin(2) * t6059;
t5942 = t6011 - t6508;
t5943 = t6021 + t6495;
t6177 = -t5942 * t6392 + t5943 * t6098;
t6178 = -t5942 * t6098 - t5943 * t6392;
t6415 = t6047 * t6059;
t5740 = (t6056 * t6418 - t6415) * qJ(3,1) + (t5836 * t6038 + t5842 * t6419 - t5944 * t6265) * pkin(1) + ((-t6177 + t6021) * t6047 + t6178 * t6044) * t6139;
t5941 = t6011 + t6508;
t6310 = t6044 * t6495;
t6430 = t6011 * t6047;
t5743 = -t6105 * t6310 - t6430 + (t5836 * t6419 - t5842 * t6038 + t5941 * t6265) * pkin(1) + ((t6178 - t6508) * t6047 + t6177 * t6044) * t6139;
t6454 = t5782 * t6099;
t6008 = 0.1e1 / 0.2e1 + t6328;
t5902 = -t6008 * t6098 + t6258 - t6130 / 0.4e1 + t6374;
t5776 = 0.1e1 / (t6384 + (-t5884 * t6047 + t6317) * t6478 + (t5902 * t6556 + t6170) * t6139);
t6457 = t5772 * t5776;
t5524 = t5605 + (-t5740 * t5932 - t5743 * t5929) * t6454 + (-t5530 * t5722 - t5541 * t5692) * t6457;
t6366 = t5647 + t5654;
t5578 = (-t5722 - t6511) * t5772 + t6366;
t5581 = pkin(2) * t5647 - t5629 * t6593;
t6545 = pkin(2) * qJ(3,1);
t5557 = (t5902 * t6460 * t6525 + t5578 * t6479 / 0.4e1 + t6117 * t5581 / 0.4e1) * t6349 + (t5578 * t6053 - t5581 * t6123) * t6525 - t6608 + (0.2e1 * t5914 * t6038 - t6531 * t6545 - t6275) * t5713;
t5596 = -pkin(2) * t5701 + t6366;
t6577 = t5674 * (pkin(2) * (0.1e1 + t6130) + t6137) + t6593 * t5701;
t5560 = -t6608 + ((t5596 * t6479 + t6117 * t6577) * t6047 + (t5596 * t6053 - t6123 * t6577) * t6044) * pkin(1);
t5917 = t6041 * t6056 + t6001;
t6424 = t6041 * t6059;
t5839 = (t5998 + t6424) * t6123 + t6117 * t5917;
t5911 = t5917 * t6123;
t6439 = t5941 * t6117;
t5752 = -t6310 - t6430 + (t5839 * t6038 - (t5911 + (t6008 * t6059 + t6005) * t6547) * t6419 - (t6059 * t6138 + t6005 + t6059) * t6123 + qJ(3,1) * t6439) * pkin(1);
t6559 = -0.2e1 * t6005;
t5755 = (t6044 * t6056 - t6415) * qJ(3,1) + (-t5911 * t6038 - t5839 * t6419 + (t6056 * t6138 + t6056 - t6345) * t6123 + (-(t6559 - t6424) * t6038 - qJ(3,1) * t5944) * t6117) * pkin(1);
t6222 = (-qJ(3,1) + ((pkin(2) * t6479 - t6117 * t6593) * t6047 - (-pkin(2) * t6053 - t6123 * t6593) * t6044) * pkin(1)) * t6298;
t5539 = (-t5752 * t5929 - t5755 * t5932) * t6454 + (-t6222 + (-t5557 * t5722 - t5560 * t5692) * t5776) * t5772;
t6603 = t5524 + t5539;
t6116 = sin(qJ(2,1));
t6122 = cos(qJ(2,1));
t5773 = 0.1e1 / t5779 ^ 2;
t6463 = t5722 ^ 2 * t5773;
t6599 = -t5539 * t6116 + t6122 * t6463;
t6114 = sin(qJ(2,2));
t6120 = cos(qJ(2,2));
t5771 = 0.1e1 / t5778 ^ 2;
t6464 = t5721 ^ 2 * t5771;
t6598 = -t5538 * t6114 + t6120 * t6464;
t6112 = sin(qJ(2,3));
t6118 = cos(qJ(2,3));
t5769 = 0.1e1 / t5777 ^ 2;
t6465 = t5720 ^ 2 * t5769;
t6597 = -t5537 * t6112 + t6118 * t6465;
t6596 = 0.2e1 * t5768;
t6595 = 0.2e1 * t5770;
t6594 = 0.2e1 * t5772;
t6592 = MDP(5) + MDP(7);
t6287 = t5930 * t6456;
t6288 = t5927 * t6456;
t6291 = t5720 * t6459;
t6297 = t5690 * t6459;
t6146 = -t5555 * t6291 - t5558 * t6297 - t5750 * t6288 - t5753 * t6287 - t5768 * t6228;
t6218 = t5741 * t6288;
t6221 = t5738 * t6287;
t6231 = t5542 * t6297;
t6235 = t5529 * t6291;
t5510 = -0.2e1 * t6143 - t6146 + t6218 + t6221 + t6231 + t6235;
t5630 = 0.2e1 * t5670 * t5699;
t6591 = t5510 * t6565 + t5630;
t6285 = t5931 * t6455;
t6286 = t5928 * t6455;
t6290 = t5721 * t6458;
t6296 = t5691 * t6458;
t6145 = -t5556 * t6290 - t5559 * t6296 - t5751 * t6286 - t5754 * t6285 - t5770 * t6225;
t6217 = t5742 * t6286;
t6220 = t5739 * t6285;
t6233 = t5540 * t6296;
t6236 = t5528 * t6290;
t5511 = -0.2e1 * t6142 - t6145 + t6217 + t6220 + t6233 + t6236;
t5631 = 0.2e1 * t5672 * t5700;
t6590 = t5511 * t6566 + t5631;
t6283 = t5932 * t6454;
t6284 = t5929 * t6454;
t6289 = t5722 * t6457;
t6295 = t5692 * t6457;
t6144 = -t5557 * t6289 - t5560 * t6295 - t5752 * t6284 - t5755 * t6283 - t5772 * t6222;
t6216 = t5743 * t6284;
t6219 = t5740 * t6283;
t6232 = t5541 * t6295;
t6234 = t5530 * t6289;
t5512 = -0.2e1 * t6141 - t6144 + t6216 + t6219 + t6232 + t6234;
t5632 = 0.2e1 * t5674 * t5701;
t6589 = t5512 * t6567 + t5632;
t6588 = t6051 + t6504;
t6587 = t6052 + t6503;
t6586 = t6053 + t6502;
t6585 = t6063 - t6397;
t6584 = t6064 - t6396;
t6583 = t6065 - t6395;
t6200 = (-(t6357 * t6527 - t6507 / 0.2e1 + t6481 / 0.2e1) * t6524 + t6588 * t6324 - t6543 + (t6036 - 0.1e1 / 0.2e1) * t6280) * t6229;
t6568 = 0.2e1 * pkin(2);
t6582 = t6568 * t6605 + 0.2e1 * t6200;
t6199 = (-(t6356 * t6526 - t6506 / 0.2e1 + t6480 / 0.2e1) * t6523 + t6587 * t6323 - t6544 + (t6037 - 0.1e1 / 0.2e1) * t6277) * t6226;
t6581 = t6568 * t6604 + 0.2e1 * t6199;
t6198 = (-(t6355 * t6525 - t6505 / 0.2e1 + t6479 / 0.2e1) * t6522 + t6586 * t6322 - t6545 + (t6038 - 0.1e1 / 0.2e1) * t6274) * t6223;
t6580 = t6568 * t6603 + 0.2e1 * t6198;
t6521 = pkin(1) * t6112;
t6520 = pkin(1) * t6114;
t6519 = pkin(1) * t6116;
t6518 = pkin(1) * t6118;
t6517 = pkin(1) * t6120;
t6516 = pkin(1) * t6122;
t6484 = t5510 * MDP(4);
t6483 = t5511 * MDP(4);
t6482 = t5512 * MDP(4);
t6476 = t5537 * t6118;
t6474 = t5538 * t6120;
t6472 = t5539 * t6122;
t5808 = t5889 * t6057 + t5890 * t6054;
t6450 = t5808 * t6113;
t5812 = t5893 * t6058 + t5894 * t6055;
t6449 = t5812 * t6115;
t5816 = t5897 * t6059 + t5898 * t6056;
t6448 = t5816 * t6117;
t5855 = t6410 + t6444;
t6447 = t5855 * t6054;
t5857 = t6408 + t6443;
t6446 = t5857 * t6055;
t5859 = t6406 + t6442;
t6445 = t5859 * t6056;
t6348 = 0.2e1 * t6518;
t6347 = 0.2e1 * t6517;
t6346 = 0.2e1 * t6516;
t6327 = pkin(1) * t6465;
t6326 = pkin(1) * t6464;
t6325 = pkin(1) * t6463;
t5714 = 0.2e1 * t6462;
t6303 = (t5714 + t6468) * t6468;
t5715 = 0.2e1 * t6461;
t6301 = (t5715 + t6467) * t6467;
t5716 = 0.2e1 * t6460;
t6299 = (t5716 + t6466) * t6466;
t5501 = -t6221 / 0.2e1 - t6218 / 0.2e1 - t6235 / 0.2e1 - t6231 / 0.2e1 + t6143 + t6146;
t6270 = 0.2e1 * t5501 * t6521;
t5502 = -t6220 / 0.2e1 - t6217 / 0.2e1 - t6236 / 0.2e1 - t6233 / 0.2e1 + t6142 + t6145;
t6269 = 0.2e1 * t5502 * t6520;
t5503 = -t6219 / 0.2e1 - t6216 / 0.2e1 - t6234 / 0.2e1 - t6232 / 0.2e1 + t6141 + t6144;
t6268 = 0.2e1 * t5503 * t6519;
t6248 = -0.2e1 * t6128 - t6397;
t6247 = -0.2e1 * t6129 - t6396;
t6246 = -0.2e1 * t6130 - t6395;
t6245 = t5663 * t5690 * t6518;
t6244 = t5664 * t5691 * t6517;
t6243 = t5665 * t5692 * t6516;
t6242 = t6112 * t6327;
t6241 = t6114 * t6326;
t6240 = t6116 * t6325;
t6230 = t6112 * t6303;
t6227 = t6114 * t6301;
t6224 = t6116 * t6299;
t6215 = t6057 * t6280;
t6214 = t6058 * t6277;
t6213 = t6059 * t6274;
t5687 = 0.2e1 * t6468;
t5570 = t5711 + (t5687 + 0.4e1 * t6462) * t6128 + t5612;
t5615 = (t5720 + t5690 / 0.3e1) * t5768 * pkin(2) - t5699 / 0.3e1;
t5642 = (t5714 + t5687) * t6128;
t5543 = (0.4e1 * (t5617 * t6394 + t5663 * t6261) * t6429 + (0.4e1 * ((-t5639 + t5699 / 0.2e1) * t6096 + t5663 * t6306 + t5657 * pkin(2) + t5693) * t6527 - 0.3e1 * t5615 * t6481 + t6113 * t5570) * t6524 - (t5570 * t6119 + 0.3e1 * t5615 * t6051) * t6527 - 0.2e1 * t5663 * t6309 + t6280 * t6564 - qJ(3,3) * (t5711 + t5642 + 0.2e1 * t5612)) * t6291;
t5585 = t5642 + t5612;
t5549 = ((t5627 * t6394 + t5670 * t6261) * t6333 + ((-t5627 * t6096 + t5670 * t6306 + t6373) * t6527 - t5627 * t6481 / 0.2e1 + t5585 * t6536) * t6354 - (t5585 * t6119 + t5627 * t6051) * t6527 - t5670 * t6309 - t5627 * t6280 + t5591 * t6565) * t6297;
t5876 = t5933 * t6119 + t5936 * t6113;
t5877 = t5936 * t6119 - t6441;
t5957 = t6054 * t6280;
t5744 = (t6057 * t6585 + t5957 + t6561) * t6045 + (t6054 * t6248 + t5999 - t6215) * t6042 + (t5876 * t6036 - t5877 * t6423 - 0.2e1 * t6009 * t6119 - t6057 * t6588) * pkin(1);
t5732 = t5744 * t6288;
t5747 = (-t6054 * t6585 + t5999 + t6215) * t6045 + (t6057 * t6248 + t5957 + t5996) * t6042 + (-t5877 * t6036 - t5876 * t6423 + (t6019 - 0.2e1 * t6487) * t6119 + t6113 * t6009) * pkin(1);
t5735 = t5747 * t6287;
t6212 = -t5543 - t5549 - t5732 - t5735;
t5689 = 0.2e1 * t6466;
t5574 = t5713 + (t5689 + 0.4e1 * t6460) * t6130 + t5614;
t5621 = (t5722 + t5692 / 0.3e1) * t5772 * pkin(2) - t5701 / 0.3e1;
t5644 = (t5716 + t5689) * t6130;
t5544 = (0.4e1 * (t5623 * t6392 + t5665 * t6259) * t6427 + (0.4e1 * ((-t5641 + t5701 / 0.2e1) * t6098 + t5665 * t6304 + t5661 * pkin(2) + t5697) * t6525 - 0.3e1 * t5621 * t6479 + t6117 * t5574) * t6522 - (t5574 * t6123 + 0.3e1 * t5621 * t6053) * t6525 - 0.2e1 * t5665 * t6307 + t6274 * t6562 - qJ(3,1) * (t5713 + t5644 + 0.2e1 * t5614)) * t6289;
t5589 = t5644 + t5614;
t5551 = ((t5629 * t6392 + t5674 * t6259) * t6331 + ((-t5629 * t6098 + t5674 * t6304 + t6371) * t6525 - t5629 * t6479 / 0.2e1 + t5589 * t6534) * t6350 - (t5589 * t6123 + t5629 * t6053) * t6525 - t5674 * t6307 - t5629 * t6274 + t5593 * t6567) * t6295;
t5880 = t5941 * t6123 + t5944 * t6117;
t5881 = t5944 * t6123 - t6439;
t5959 = t6056 * t6274;
t5746 = (t6059 * t6583 + t5959 + t6559) * t6047 + (t6056 * t6246 + t6001 - t6213) * t6044 + (t5880 * t6038 - t5881 * t6419 - 0.2e1 * t6011 * t6123 - t6059 * t6586) * pkin(1);
t5734 = t5746 * t6284;
t5749 = (-t6056 * t6583 + t6001 + t6213) * t6047 + (t6059 * t6246 + t5959 + t5998) * t6044 + (-t5881 * t6038 - t5880 * t6419 + (t6021 - 0.2e1 * t6495) * t6123 + t6117 * t6011) * pkin(1);
t5737 = t5749 * t6283;
t6211 = -t5544 - t5551 - t5734 - t5737;
t5688 = 0.2e1 * t6467;
t5572 = t5712 + (t5688 + 0.4e1 * t6461) * t6129 + t5613;
t5618 = (t5721 + t5691 / 0.3e1) * t5770 * pkin(2) - t5700 / 0.3e1;
t5643 = (t5715 + t5688) * t6129;
t5545 = (0.4e1 * (t5620 * t6393 + t5664 * t6260) * t6428 + (0.4e1 * ((-t5640 + t5700 / 0.2e1) * t6097 + t5664 * t6305 + t5659 * pkin(2) + t5695) * t6526 - 0.3e1 * t5618 * t6480 + t6115 * t5572) * t6523 - (t5572 * t6121 + 0.3e1 * t5618 * t6052) * t6526 - 0.2e1 * t5664 * t6308 + t6277 * t6563 - qJ(3,2) * (t5712 + t5643 + 0.2e1 * t5613)) * t6290;
t5587 = t5643 + t5613;
t5550 = ((t5628 * t6393 + t5672 * t6260) * t6332 + ((-t5628 * t6097 + t5672 * t6305 + t6372) * t6526 - t5628 * t6480 / 0.2e1 + t5587 * t6535) * t6352 - (t5587 * t6121 + t5628 * t6052) * t6526 - t5672 * t6308 - t5628 * t6277 + t5592 * t6566) * t6296;
t5878 = t5937 * t6121 + t5940 * t6115;
t5879 = t5940 * t6121 - t6440;
t5958 = t6055 * t6277;
t5745 = (t6058 * t6584 + t5958 + t6560) * t6046 + (t6055 * t6247 + t6000 - t6214) * t6043 + (t5878 * t6037 - t5879 * t6421 - 0.2e1 * t6010 * t6121 - t6058 * t6587) * pkin(1);
t5733 = t5745 * t6286;
t5748 = (-t6055 * t6584 + t6000 + t6214) * t6046 + (t6058 * t6247 + t5958 + t5997) * t6043 + (-t5879 * t6037 - t5878 * t6421 + (t6020 - 0.2e1 * t6491) * t6121 + t6115 * t6010) * pkin(1);
t5736 = t5748 * t6285;
t6210 = -t5545 - t5550 - t5733 - t5736;
t6203 = t5780 * t6242;
t6202 = t5781 * t6241;
t6201 = t5782 * t6240;
t5871 = t6405 + t6438;
t6197 = t5870 * t6057 + t6054 * t5871;
t5873 = t6404 + t6437;
t6196 = t5872 * t6058 + t6055 * t5873;
t5875 = t6403 + t6436;
t6195 = t5874 * t6059 + t6056 * t5875;
t5607 = -0.2e1 * t6200;
t6185 = -pkin(2) * (t5607 + t6212) + t6605 * (t6128 + t6138);
t5609 = -0.2e1 * t6199;
t6184 = -pkin(2) * (t5609 + t6210) + t6604 * (t6129 + t6138);
t5611 = -0.2e1 * t6198;
t6183 = -pkin(2) * (t5611 + t6211) + t6603 * (t6130 + t6138);
t6167 = -pkin(1) * t6476 + t6212;
t6166 = -pkin(1) * t6474 + t6210;
t6165 = -pkin(1) * t6472 + t6211;
t5666 = t5670 ^ 2;
t6164 = t5510 * MDP(7) - t5666 * MDP(8) + (-pkin(2) * t6605 - qJ(3,3) * t5666 + t5607 + t6167 - t6242) * MDP(9);
t5667 = t5672 ^ 2;
t6163 = t5511 * MDP(7) - t5667 * MDP(8) + (-pkin(2) * t6604 - qJ(3,2) * t5667 + t5609 + t6166 - t6241) * MDP(9);
t5668 = t5674 ^ 2;
t6162 = t5512 * MDP(7) - t5668 * MDP(8) + (-pkin(2) * t6603 - qJ(3,1) * t5668 + t5611 + t6165 - t6240) * MDP(9);
t6158 = MDP(5) * t6476 + MDP(6) * t6597;
t6157 = MDP(5) * t6474 + MDP(6) * t6598;
t6156 = MDP(5) * t6472 + MDP(6) * t6599;
t6155 = -t6484 + (-t6167 + t6582) * MDP(7) + (-pkin(1) * t6597 + t6591) * MDP(8) + ((pkin(2) * t6118 + qJ(3,3) * t6112) * t5537 * pkin(1) + t6185 + qJ(3,3) * t5630 + (pkin(2) * t6112 - qJ(3,3) * t6118) * t6327) * MDP(9);
t6154 = -t6483 + (-t6166 + t6581) * MDP(7) + (-pkin(1) * t6598 + t6590) * MDP(8) + ((pkin(2) * t6120 + qJ(3,2) * t6114) * t5538 * pkin(1) + t6184 + qJ(3,2) * t5631 + (pkin(2) * t6114 - qJ(3,2) * t6120) * t6326) * MDP(9);
t6153 = -t6482 + (-t6165 + t6580) * MDP(7) + (-pkin(1) * t6599 + t6589) * MDP(8) + ((pkin(2) * t6122 + qJ(3,1) * t6116) * t5539 * pkin(1) + t6183 + qJ(3,1) * t5632 + (pkin(2) * t6116 - qJ(3,1) * t6122) * t6325) * MDP(9);
t6152 = t5537 * MDP(1) - t6484 + (t5501 * t6348 - t6212 + t6582) * MDP(7) + (t6245 * t6596 + t6270 + t6591) * MDP(8) + ((t5735 / 0.2e1 + t5732 / 0.2e1 + t5543 / 0.2e1 + t5549 / 0.2e1 + t6200 + (t5537 + t5522 / 0.2e1) * pkin(2)) * t6348 + t6139 * t5537 + t6185 - 0.2e1 * (-t5708 * t5769 * t5720 + ((pkin(2) * t6462 - t5699) * t5768 + pkin(2) * t5769 * t6542) * t5690) * t6521 + (t6270 + (t6245 + t6471) * t6596) * qJ(3,3)) * MDP(9);
t6151 = t5538 * MDP(1) - t6483 + (t5502 * t6347 - t6210 + t6581) * MDP(7) + (t6244 * t6595 + t6269 + t6590) * MDP(8) + ((t5736 / 0.2e1 + t5733 / 0.2e1 + t5545 / 0.2e1 + t5550 / 0.2e1 + t6199 + (t5538 + t5523 / 0.2e1) * pkin(2)) * t6347 + t6139 * t5538 + t6184 - 0.2e1 * (-t5709 * t5771 * t5721 + ((pkin(2) * t6461 - t5700) * t5770 + pkin(2) * t5771 * t6541) * t5691) * t6520 + (t6269 + (t6244 + t6470) * t6595) * qJ(3,2)) * MDP(9);
t6150 = t5539 * MDP(1) - t6482 + (t5503 * t6346 - t6211 + t6580) * MDP(7) + (t6243 * t6594 + t6268 + t6589) * MDP(8) + ((t5737 / 0.2e1 + t5734 / 0.2e1 + t5544 / 0.2e1 + t5551 / 0.2e1 + t6198 + (t5539 + t5524 / 0.2e1) * pkin(2)) * t6346 + t6139 * t5539 + t6183 - 0.2e1 * (-t5710 * t5773 * t5722 + ((pkin(2) * t6460 - t5701) * t5772 + pkin(2) * t5773 * t6540) * t5692) * t6519 + (t6268 + (t6243 + t6469) * t6594) * qJ(3,1)) * MDP(9);
t5507 = t5603 + ((-t5738 - 0.2e1 * t5753) * t5930 + (-t5741 - 0.2e1 * t5750) * t5927) * t6456 + (-0.2e1 * t6228 + ((-t5529 - 0.2e1 * t5555) * t5720 + (-t5542 - 0.2e1 * t5558) * t5690) * t5774) * t5768;
t6149 = (t5507 * t6118 - t6230) * MDP(5) + (-t5507 * t6112 - t6118 * t6303) * MDP(6) - MDP(7) * t6230;
t5508 = t5604 + ((-t5739 - 0.2e1 * t5754) * t5931 + (-t5742 - 0.2e1 * t5751) * t5928) * t6455 + (-0.2e1 * t6225 + ((-t5528 - 0.2e1 * t5556) * t5721 + (-t5540 - 0.2e1 * t5559) * t5691) * t5775) * t5770;
t6148 = (t5508 * t6120 - t6227) * MDP(5) + (-t5508 * t6114 - t6120 * t6301) * MDP(6) - MDP(7) * t6227;
t5509 = t5605 + ((-t5740 - 0.2e1 * t5755) * t5932 + (-t5743 - 0.2e1 * t5752) * t5929) * t6454 + (-0.2e1 * t6222 + ((-t5530 - 0.2e1 * t5557) * t5722 + (-t5541 - 0.2e1 * t5560) * t5692) * t5776) * t5772;
t6147 = (t5509 * t6122 - t6224) * MDP(5) + (-t5509 * t6116 - t6122 * t6299) * MDP(6) - MDP(7) * t6224;
t5869 = t5929 * t6056 + t5932 * t6059;
t5868 = t5928 * t6055 + t5931 * t6058;
t5867 = t5927 * t6054 + t5930 * t6057;
t5866 = t5929 * t6059 - t5932 * t6056;
t5865 = t5928 * t6058 - t5931 * t6055;
t5864 = t5927 * t6057 - t5930 * t6054;
t5818 = -t5896 * t6056 + t5899 * t6059;
t5817 = -t5897 * t6056 + t5898 * t6059;
t5815 = t5896 * t6059 + t5899 * t6056;
t5814 = -t5892 * t6055 + t5895 * t6058;
t5813 = -t5893 * t6055 + t5894 * t6058;
t5811 = t5892 * t6058 + t5895 * t6055;
t5810 = -t5888 * t6054 + t5891 * t6057;
t5809 = -t5889 * t6054 + t5890 * t6057;
t5807 = t5888 * t6057 + t5891 * t6054;
t5800 = -t5874 * t6056 + t5875 * t6059;
t5799 = -t5872 * t6055 + t5873 * t6058;
t5798 = -t5870 * t6054 + t5871 * t6057;
t5797 = t5859 * t6059 - t5860 * t6056;
t5796 = t5857 * t6058 - t5858 * t6055;
t5795 = t5855 * t6057 - t5856 * t6054;
t5731 = (-t5866 * t6047 + t5869 * t6044) * qJ(3,1) + (((((t6030 - t6136 - t6249) * t6071 + t6407) * t6059 - t6445) * t6123 + t5797 * t6117) * t6038 - (t5797 * t6123 + (t5860 * t6059 + t6445) * t6117) * t6419 + t6572 * t6123 - qJ(3,1) * t6448) * pkin(1);
t5730 = (-t5865 * t6046 + t5868 * t6043) * qJ(3,2) + (((((t6026 - t6135 - t6250) * t6071 + t6409) * t6058 - t6446) * t6121 + t5796 * t6115) * t6037 - (t5796 * t6121 + (t5858 * t6058 + t6446) * t6115) * t6421 + t6574 * t6121 - qJ(3,2) * t6449) * pkin(1);
t5729 = (-t5864 * t6045 + t5867 * t6042) * qJ(3,3) + (((((t6024 - t6134 - t6251) * t6071 + t6411) * t6057 - t6447) * t6119 + t5795 * t6113) * t6036 - (t5795 * t6119 + (t5856 * t6057 + t6447) * t6113) * t6423 + t6576 * t6119 - qJ(3,3) * t6450) * pkin(1);
t5725 = ((t5976 * t6071 - t5977 * t6070) * t6059 + (t5976 * t6070 + t5977 * t6071) * t6056) * t6047 + t5869 * t6318 + ((-t5815 * t6098 - t5818 * t6392) * t6047 + (-t5815 * t6392 + t5818 * t6098) * t6044) * t6139 + (-(t6117 * t5800 - t6123 * t6195) * t6038 + (t5800 * t6123 + t6117 * t6195) * t6419 - t5816 * t6265) * pkin(1);
t5724 = ((t5974 * t6071 - t5975 * t6070) * t6058 + (t5974 * t6070 + t5975 * t6071) * t6055) * t6046 + t5868 * t6316 + ((-t5811 * t6097 - t5814 * t6393) * t6046 + (-t5811 * t6393 + t5814 * t6097) * t6043) * t6139 + (-(t6115 * t5799 - t6121 * t6196) * t6037 + (t5799 * t6121 + t6115 * t6196) * t6421 - t5812 * t6266) * pkin(1);
t5723 = ((t5972 * t6071 - t5973 * t6070) * t6057 + (t5972 * t6070 + t5973 * t6071) * t6054) * t6045 + t5867 * t6314 + ((-t5807 * t6096 - t5810 * t6394) * t6045 + (-t5807 * t6394 + t5810 * t6096) * t6042) * t6139 + (-(t6113 * t5798 - t6119 * t6197) * t6036 + (t5798 * t6119 + t6113 * t6197) * t6423 - t5808 * t6267) * pkin(1);
t1 = [(-MDP(11) * t6071 + MDP(12) * t6070) * t6099 + (t5740 * t6153 + t5749 * t6162 + t5755 * t6150) * t5782 + (t5739 * t6154 + t5748 * t6163 + t5754 * t6151) * t5781 + (t5738 * t6155 + t5747 * t6164 + t5753 * t6152) * t5780 + ((t5740 * t6156 + t5755 * t6147) * t5782 + (t5739 * t6157 + t5754 * t6148) * t5781 + (t5738 * t6158 + t5753 * t6149) * t5780) * pkin(1) + t6592 * (t5738 * t6203 + t5739 * t6202 + t5740 * t6201); (-MDP(11) * t6070 - MDP(12) * t6071) * t6099 + (t5743 * t6153 + t5746 * t6162 + t5752 * t6150) * t5782 + (t5742 * t6154 + t5745 * t6163 + t5751 * t6151) * t5781 + (t5741 * t6155 + t5744 * t6164 + t5750 * t6152) * t5780 + ((t5743 * t6156 + t5752 * t6147) * t5782 + (t5742 * t6157 + t5751 * t6148) * t5781 + (t5741 * t6158 + t5750 * t6149) * t5780) * pkin(1) + t6592 * (t5741 * t6203 + t5742 * t6202 + t5743 * t6201); (t6162 * (-t6571 * t6047 + 0.2e1 * t5816 * t6496 + ((t5866 * t6392 + t5869 * t6098) * t6047 + (-t5866 * t6098 + t5869 * t6392) * t6044) * t6139 + ((-t5816 * t6123 + t6117 * t5817) * t6038 - (t5817 * t6123 + t6448) * t6419 + (t6186 * t6059 + t6056 * (t6400 + t6433)) * t6123 + t5869 * t6053) * pkin(1)) + t6153 * t5725 + t6150 * t5731) * t5776 + (t6163 * (-t6573 * t6046 + 0.2e1 * t5812 * t6492 + ((t5865 * t6393 + t5868 * t6097) * t6046 + (-t5865 * t6097 + t5868 * t6393) * t6043) * t6139 + ((-t5812 * t6121 + t6115 * t5813) * t6037 - (t5813 * t6121 + t6449) * t6421 + (t6187 * t6058 + t6055 * (t6401 + t6434)) * t6121 + t5868 * t6052) * pkin(1)) + t6154 * t5724 + t6151 * t5730) * t5775 + (t6164 * (-t6575 * t6045 + 0.2e1 * t5808 * t6488 + ((t5864 * t6394 + t5867 * t6096) * t6045 + (-t5864 * t6096 + t5867 * t6394) * t6042) * t6139 + ((-t5808 * t6119 + t6113 * t5809) * t6036 - (t5809 * t6119 + t6450) * t6423 + (t6188 * t6057 + (t6402 + t6435) * t6054) * t6119 + t5867 * t6051) * pkin(1)) + t6155 * t5723 + t6152 * t5729) * t5774 + ((t5725 * t6156 + t5731 * t6147) * t5776 + (t5724 * t6157 + t5730 * t6148) * t5775 + (t5723 * t6158 + t5729 * t6149) * t5774) * pkin(1) + t6592 * (t5723 * t5774 * t6242 + t5724 * t5775 * t6241 + t5725 * t5776 * t6240);];
taucX  = t1;
