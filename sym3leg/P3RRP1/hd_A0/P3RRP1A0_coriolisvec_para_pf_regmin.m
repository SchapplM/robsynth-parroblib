% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x13]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 15:31
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRP1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRP1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRP1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRP1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRP1A0_coriolisvec_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRP1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRP1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 15:12:52
% EndTime: 2019-05-03 15:18:44
% DurationCPUTime: 367.85s
% Computational Cost: add. (6283008->1519), mult. (15114470->2315), div. (39663->12), fcn. (3373084->26), ass. (0->986)
t2579 = koppelP(1,2);
t2525 = (qJ(3,1) * t2579);
t2582 = koppelP(1,1);
t2535 = (pkin(2) * t2582);
t2437 = -t2525 + t2535;
t2526 = (qJ(3,1) * t2582);
t2532 = (pkin(2) * t2579);
t2440 = t2526 + t2532;
t2573 = xP(3);
t2516 = sin(t2573);
t2517 = cos(t2573);
t2343 = t2437 * t2517 - t2440 * t2516;
t2571 = xDP(2);
t2513 = t2571 * pkin(2);
t2570 = xDP(3);
t2572 = xDP(1);
t2956 = qJ(3,1) * t2572;
t2298 = t2343 * t2570 + t2513 + t2956;
t2344 = t2437 * t2516 + t2440 * t2517;
t2496 = t2571 * qJ(3,1);
t2514 = pkin(2) * t2572;
t2299 = t2344 * t2570 + t2496 - t2514;
t2557 = legFrame(1,3);
t2502 = sin(t2557);
t2505 = cos(t2557);
t2238 = t2298 * t2505 + t2299 * t2502;
t2239 = -t2298 * t2502 + t2299 * t2505;
t2375 = t2516 * t2582 + t2517 * t2579;
t2351 = t2375 * t2570 - t2572;
t2378 = -t2516 * t2579 + t2517 * t2582;
t2354 = t2378 * t2570 + t2571;
t2276 = -t2351 * t2505 + t2354 * t2502;
t2279 = t2351 * t2502 + t2354 * t2505;
t2469 = -t2514 / 0.2e1;
t2481 = pkin(2) * t2496;
t2548 = qJ(1,1) + qJ(2,1);
t2490 = sin(t2548);
t2493 = cos(t2548);
t2563 = sin(qJ(1,1));
t2499 = qJ(3,1) * t2563;
t2585 = pkin(1) ^ 2;
t2515 = t2585 * t2571;
t2569 = cos(qJ(1,1));
t2544 = t2569 ^ 2;
t2438 = -2 * t2525 + t2535;
t2439 = 2 * t2526 + t2532;
t2629 = t2438 * t2517 - t2439 * t2516;
t2787 = pkin(2) * t2956;
t2576 = qJ(3,1) ^ 2;
t2841 = t2576 * t2572;
t2847 = t2571 * t2576;
t2850 = t2569 * t2563;
t2863 = t2502 * t2572;
t2884 = t2439 * t2517;
t2885 = t2438 * t2516;
t2911 = t2238 * t2563;
t2988 = pkin(1) * t2490;
t2484 = t2493 ^ 2;
t2991 = pkin(1) * t2484;
t3016 = 0.2e1 * t2502;
t3030 = -0.2e1 * qJ(3,1);
t2786 = pkin(2) * t2525;
t2476 = 0.2e1 * t2786;
t2524 = t2576 * t2582;
t2835 = t2582 * t2585;
t2395 = t2476 + 0.2e1 * t2524 + t2835;
t2511 = 0.2e1 * t2576 + t2585;
t2785 = pkin(2) * t2526;
t2396 = t2511 * t2579 - 0.2e1 * t2785;
t3034 = t2505 * (t2395 * t2517 - t2396 * t2516) + t2502 * (t2395 * t2516 + t2396 * t2517);
t2156 = (t2238 * t2569 - t2239 * t2563) * t2991 + ((t2239 * t2569 + t2911) * t2988 + (t2515 - 0.2e1 * t2787 + 0.2e1 * t2847) * t2505 + (-t2481 - t2841) * t3016 + (t2276 * t2850 - t2279 * t2544 - t2863) * t2585 + t3034 * t2570) * t2493 + (t2238 * t3030 + (-t2276 * t2544 - t2279 * t2850) * t2585) * t2490 - pkin(1) * (((t2570 * t2629 + t2513 + 0.2e1 * t2956) * t2505 + (t2496 + t2469 + (t2884 / 0.2e1 + t2885 / 0.2e1) * t2570) * t3016) * t2569 + t2279 * t2499);
t2584 = pkin(2) ^ 2;
t2508 = -t2576 + t2584;
t2487 = 0.1e1 + t2508;
t2747 = qJ(3,1) * t2850;
t2701 = pkin(2) * t2747;
t2607 = t2487 * t2544 - 0.2e1 * t2701;
t2717 = t2585 * t2850;
t2680 = pkin(2) * t2717;
t2945 = t2569 * qJ(3,1);
t2760 = t2490 * t2945;
t2878 = t2484 * t2585;
t2774 = 0.2e1 * t2878;
t2833 = -0.1e1 / 0.2e1 - t2584 / 0.2e1;
t2550 = 0.2e1 + t2585;
t2842 = t2576 * t2550;
t2853 = t2544 * t2585;
t3032 = -0.2e1 * pkin(1);
t2593 = -t2487 * t2853 + (t2576 / 0.2e1 + t2607 + t2833) * t2774 + t2760 * t3032 + 0.2e1 * qJ(3,1) * t2680 - t2842;
t2798 = t2544 - 0.1e1 / 0.2e1;
t2702 = t2798 * qJ(3,1);
t2718 = t2487 * t2850;
t2985 = pkin(1) * t2493;
t2792 = 0.4e1 * t2985;
t2225 = ((t2718 / 0.2e1 + pkin(2) * t2702) * t2988 + t2499 / 0.2e1) * t2792 + t2593;
t2218 = 0.1e1 / t2225;
t2147 = t2156 * t2218;
t2834 = t2584 * t2572;
t2468 = -t2834 / 0.2e1;
t2802 = t2841 / 0.2e1 + t2481;
t2478 = 0.2e1 * t2785;
t2529 = t2584 * t2579;
t2402 = -t2576 * t2579 + t2478 + t2529;
t2890 = t2402 * t2517;
t2477 = -0.2e1 * t2786;
t2836 = t2582 * t2584;
t2692 = -t2524 + t2836;
t2401 = t2477 + t2692;
t2891 = t2401 * t2516;
t2270 = t2468 + (t2890 / 0.2e1 + t2891 / 0.2e1) * t2570 + t2802;
t2320 = t2401 * t2517 - t2402 * t2516;
t2512 = t2571 * t2584;
t2695 = 0.2e1 * t2787 - t2847;
t2273 = t2320 * t2570 + t2512 + t2695;
t3000 = -t2502 / 0.2e1;
t2210 = t2270 * t2505 + t2273 * t3000;
t2213 = t2270 * t3016 + t2273 * t2505;
t2436 = t2525 + t2535;
t2441 = -t2526 + t2532;
t2342 = t2436 * t2517 - t2441 * t2516;
t2297 = t2342 * t2570 + t2513 - t2956;
t2345 = t2436 * t2516 + t2441 * t2517;
t2300 = -t2345 * t2570 + t2496 + t2514;
t2237 = t2297 * t2505 - t2300 * t2502;
t2240 = t2297 * t2502 + t2300 * t2505;
t2422 = pkin(2) * t2835 - t2525;
t2964 = pkin(2) * t2585;
t2423 = t2579 * t2964 + t2526;
t2965 = pkin(2) * t2569;
t2708 = -t2499 + t2965;
t2551 = 0.1e1 + t2585;
t2869 = t2490 * t2551;
t2761 = qJ(3,1) * t2869;
t2856 = t2517 * t2570;
t2858 = t2516 * t2570;
t2870 = t2490 * t2493;
t2997 = t2563 / 0.2e1;
t3010 = -0.2e1 * t2563;
t2138 = ((-t2422 * t2856 + t2423 * t2858 - t2956) * t2505 - t2502 * (t2422 * t2858 + t2423 * t2856 + t2496)) * t2493 - t2279 * t2761 + ((pkin(2) * t2863 + t2237 * t2544 - t2240 * t2850 - t2505 * t2513) * t2493 + (t2237 * t2850 + t2240 * t2544) * t2490) * t2585 + (-(t2210 * t3010 + t2213 * t2569) * t2484 - 0.2e1 * (t2210 * t2569 + t2213 * t2997) * t2870 + t2708 * t2238) * pkin(1);
t3055 = -t2584 - 0.1e1;
t2448 = t2572 * t3055 / 0.2e1;
t2372 = -t2582 * t3055 + t2477 - t2524;
t2899 = t2372 * t2516;
t2371 = t2478 + (-t3055 - t2576) * t2579;
t2900 = t2371 * t2517;
t2252 = t2448 + (t2900 / 0.2e1 + t2899 / 0.2e1) * t2570 + t2802;
t2860 = t2516 * t2371;
t2306 = t2372 * t2517 - t2860;
t2458 = t2571 * t3055;
t2267 = t2306 * t2570 - t2458 + t2695;
t2204 = t2252 * t2505 + t2267 * t3000;
t2207 = t2252 * t3016 + t2267 * t2505;
t2698 = -t2572 - t2834;
t2801 = t2512 + t2571;
t2959 = qJ(3,1) * t2490;
t2410 = t2582 - t2786 + t2836;
t2411 = t2529 + t2579 + t2785;
t3035 = t2505 * (t2410 * t2517 - t2411 * t2516) + (t2410 * t2516 + t2411 * t2517) * t2502;
t2168 = (t2204 * t3010 + t2207 * t2569) * t2991 + (0.2e1 * (t2204 * t2569 + t2207 * t2997) * t2988 - qJ(3,1) * t2276) * t2493 - t2279 * t2959 - (((t2787 + t2801) * t2505 + t2502 * (t2481 + t2698) + t3035 * t2570) * t2569 - qJ(3,1) * t2911) * pkin(1);
t2120 = (t2138 + t2168) * t2218;
t2960 = t2120 * pkin(2);
t2075 = t2960 - t2147;
t3067 = qJ(3,1) * t2075;
t2578 = koppelP(2,2);
t2522 = qJ(3,2) * t2578;
t2581 = koppelP(2,1);
t2534 = pkin(2) * t2581;
t2431 = -t2522 + t2534;
t2523 = qJ(3,2) * t2581;
t2531 = pkin(2) * t2578;
t2434 = t2523 + t2531;
t2339 = t2431 * t2517 - t2434 * t2516;
t2952 = qJ(3,2) * t2572;
t2294 = t2339 * t2570 + t2513 + t2952;
t2340 = t2431 * t2516 + t2434 * t2517;
t2495 = t2571 * qJ(3,2);
t2295 = t2340 * t2570 + t2495 - t2514;
t2556 = legFrame(2,3);
t2501 = sin(t2556);
t2504 = cos(t2556);
t2234 = t2294 * t2504 + t2295 * t2501;
t2235 = -t2294 * t2501 + t2295 * t2504;
t2374 = t2516 * t2581 + t2517 * t2578;
t2350 = t2374 * t2570 - t2572;
t2377 = -t2516 * t2578 + t2517 * t2581;
t2353 = t2377 * t2570 + t2571;
t2275 = -t2350 * t2504 + t2353 * t2501;
t2278 = t2350 * t2501 + t2353 * t2504;
t2480 = pkin(2) * t2495;
t2547 = qJ(1,2) + qJ(2,2);
t2489 = sin(t2547);
t2492 = cos(t2547);
t2561 = sin(qJ(1,2));
t2498 = qJ(3,2) * t2561;
t2567 = cos(qJ(1,2));
t2543 = t2567 ^ 2;
t2432 = -0.2e1 * t2522 + t2534;
t2433 = 0.2e1 * t2523 + t2531;
t2630 = t2432 * t2517 - t2433 * t2516;
t2781 = pkin(2) * t2952;
t2575 = qJ(3,2) ^ 2;
t2843 = t2575 * t2572;
t2848 = t2571 * t2575;
t2851 = t2561 * t2567;
t2864 = t2501 * t2572;
t2886 = t2433 * t2517;
t2887 = t2432 * t2516;
t2912 = t2234 * t2561;
t2989 = pkin(1) * t2489;
t2483 = t2492 ^ 2;
t2992 = pkin(1) * t2483;
t3017 = 0.2e1 * t2501;
t3029 = -0.2e1 * qJ(3,2);
t2779 = pkin(2) * t2522;
t2472 = 0.2e1 * t2779;
t2521 = t2575 * t2581;
t2837 = t2581 * t2585;
t2393 = t2472 + 0.2e1 * t2521 + t2837;
t2510 = 0.2e1 * t2575 + t2585;
t2777 = pkin(2) * t2523;
t2394 = t2510 * t2578 - 0.2e1 * t2777;
t3036 = t2504 * (t2393 * t2517 - t2394 * t2516) + t2501 * (t2393 * t2516 + t2394 * t2517);
t2155 = (t2234 * t2567 - t2235 * t2561) * t2992 + ((t2235 * t2567 + t2912) * t2989 + (t2515 - 0.2e1 * t2781 + 0.2e1 * t2848) * t2504 + (-t2480 - t2843) * t3017 + (t2275 * t2851 - t2278 * t2543 - t2864) * t2585 + t3036 * t2570) * t2492 + (t2234 * t3029 + (-t2275 * t2543 - t2278 * t2851) * t2585) * t2489 - pkin(1) * (((t2570 * t2630 + t2513 + 0.2e1 * t2952) * t2504 + (t2495 + t2469 + (t2886 / 0.2e1 + t2887 / 0.2e1) * t2570) * t3017) * t2567 + t2278 * t2498);
t2507 = -t2575 + t2584;
t2486 = 0.1e1 + t2507;
t2748 = qJ(3,2) * t2851;
t2700 = pkin(2) * t2748;
t2606 = t2486 * t2543 - 0.2e1 * t2700;
t2719 = t2585 * t2851;
t2681 = pkin(2) * t2719;
t2946 = t2567 * qJ(3,2);
t2758 = t2489 * t2946;
t2879 = t2483 * t2585;
t2775 = 0.2e1 * t2879;
t2844 = t2575 * t2550;
t2854 = t2543 * t2585;
t2594 = -t2486 * t2854 + (t2575 / 0.2e1 + t2606 + t2833) * t2775 + t2758 * t3032 + 0.2e1 * qJ(3,2) * t2681 - t2844;
t2799 = t2543 - 0.1e1 / 0.2e1;
t2703 = t2799 * qJ(3,2);
t2720 = t2486 * t2851;
t2986 = pkin(1) * t2492;
t2794 = 0.4e1 * t2986;
t2224 = ((t2720 / 0.2e1 + pkin(2) * t2703) * t2989 + t2498 / 0.2e1) * t2794 + t2594;
t2216 = 0.1e1 / t2224;
t2146 = t2155 * t2216;
t2803 = t2843 / 0.2e1 + t2480;
t2475 = 0.2e1 * t2777;
t2528 = t2584 * t2578;
t2400 = -t2575 * t2578 + t2475 + t2528;
t2892 = t2400 * t2517;
t2473 = -0.2e1 * t2779;
t2838 = t2581 * t2584;
t2693 = -t2521 + t2838;
t2399 = t2473 + t2693;
t2893 = t2399 * t2516;
t2269 = t2468 + (t2892 / 0.2e1 + t2893 / 0.2e1) * t2570 + t2803;
t2318 = t2399 * t2517 - t2400 * t2516;
t2697 = 0.2e1 * t2781 - t2848;
t2272 = t2318 * t2570 + t2512 + t2697;
t3001 = -t2501 / 0.2e1;
t2209 = t2269 * t2504 + t2272 * t3001;
t2212 = t2269 * t3017 + t2272 * t2504;
t2430 = t2522 + t2534;
t2435 = -t2523 + t2531;
t2338 = t2430 * t2517 - t2435 * t2516;
t2293 = t2338 * t2570 + t2513 - t2952;
t2341 = t2430 * t2516 + t2435 * t2517;
t2296 = -t2341 * t2570 + t2495 + t2514;
t2233 = t2293 * t2504 - t2296 * t2501;
t2236 = t2293 * t2501 + t2296 * t2504;
t2420 = pkin(2) * t2837 - t2522;
t2421 = t2578 * t2964 + t2523;
t2966 = pkin(2) * t2567;
t2709 = -t2498 + t2966;
t2871 = t2489 * t2551;
t2759 = qJ(3,2) * t2871;
t2872 = t2489 * t2492;
t2998 = t2561 / 0.2e1;
t3011 = -0.2e1 * t2561;
t2137 = ((-t2420 * t2856 + t2421 * t2858 - t2952) * t2504 - t2501 * (t2420 * t2858 + t2421 * t2856 + t2495)) * t2492 - t2278 * t2759 + ((pkin(2) * t2864 + t2233 * t2543 - t2236 * t2851 - t2504 * t2513) * t2492 + (t2233 * t2851 + t2236 * t2543) * t2489) * t2585 + (-(t2209 * t3011 + t2212 * t2567) * t2483 - 0.2e1 * (t2209 * t2567 + t2212 * t2998) * t2872 + t2709 * t2234) * pkin(1);
t2370 = -t2581 * t3055 + t2473 - t2521;
t2901 = t2370 * t2516;
t2369 = t2475 + (-t3055 - t2575) * t2578;
t2902 = t2369 * t2517;
t2251 = t2448 + (t2902 / 0.2e1 + t2901 / 0.2e1) * t2570 + t2803;
t2861 = t2516 * t2369;
t2304 = t2370 * t2517 - t2861;
t2266 = t2304 * t2570 - t2458 + t2697;
t2203 = t2251 * t2504 + t2266 * t3001;
t2206 = t2251 * t3017 + t2266 * t2504;
t2955 = qJ(3,2) * t2489;
t2408 = t2581 - t2779 + t2838;
t2409 = t2528 + t2578 + t2777;
t3037 = t2504 * (t2408 * t2517 - t2409 * t2516) + (t2408 * t2516 + t2409 * t2517) * t2501;
t2167 = (t2203 * t3011 + t2206 * t2567) * t2992 + (0.2e1 * (t2203 * t2567 + t2206 * t2998) * t2989 - qJ(3,2) * t2275) * t2492 - t2278 * t2955 - (((t2781 + t2801) * t2504 + t2501 * (t2480 + t2698) + t3037 * t2570) * t2567 - qJ(3,2) * t2912) * pkin(1);
t2118 = (t2137 + t2167) * t2216;
t2961 = t2118 * pkin(2);
t2074 = t2961 - t2146;
t3066 = qJ(3,2) * t2074;
t2577 = koppelP(3,2);
t2519 = qJ(3,3) * t2577;
t2580 = koppelP(3,1);
t2533 = pkin(2) * t2580;
t2425 = -t2519 + t2533;
t2520 = qJ(3,3) * t2580;
t2530 = pkin(2) * t2577;
t2428 = t2520 + t2530;
t2335 = t2425 * t2517 - t2428 * t2516;
t2948 = qJ(3,3) * t2572;
t2290 = t2335 * t2570 + t2513 + t2948;
t2336 = t2425 * t2516 + t2428 * t2517;
t2494 = t2571 * qJ(3,3);
t2291 = t2336 * t2570 + t2494 - t2514;
t2555 = legFrame(3,3);
t2500 = sin(t2555);
t2503 = cos(t2555);
t2230 = t2290 * t2503 + t2291 * t2500;
t2231 = -t2290 * t2500 + t2291 * t2503;
t2373 = t2516 * t2580 + t2517 * t2577;
t2349 = t2373 * t2570 - t2572;
t2376 = -t2516 * t2577 + t2517 * t2580;
t2352 = t2376 * t2570 + t2571;
t2274 = -t2349 * t2503 + t2352 * t2500;
t2277 = t2349 * t2500 + t2352 * t2503;
t2479 = pkin(2) * t2494;
t2546 = qJ(1,3) + qJ(2,3);
t2488 = sin(t2546);
t2491 = cos(t2546);
t2559 = sin(qJ(1,3));
t2497 = qJ(3,3) * t2559;
t2565 = cos(qJ(1,3));
t2542 = t2565 ^ 2;
t2426 = -0.2e1 * t2519 + t2533;
t2427 = 0.2e1 * t2520 + t2530;
t2631 = t2426 * t2517 - t2427 * t2516;
t2782 = pkin(2) * t2948;
t2574 = qJ(3,3) ^ 2;
t2845 = t2574 * t2572;
t2849 = t2571 * t2574;
t2852 = t2559 * t2565;
t2865 = t2500 * t2572;
t2888 = t2427 * t2517;
t2889 = t2426 * t2516;
t2913 = t2230 * t2559;
t2990 = pkin(1) * t2488;
t2482 = t2491 ^ 2;
t2993 = pkin(1) * t2482;
t3018 = 0.2e1 * t2500;
t3028 = -0.2e1 * qJ(3,3);
t2780 = pkin(2) * t2519;
t2470 = 0.2e1 * t2780;
t2518 = t2574 * t2580;
t2839 = t2580 * t2585;
t2391 = t2470 + 0.2e1 * t2518 + t2839;
t2509 = 0.2e1 * t2574 + t2585;
t2778 = pkin(2) * t2520;
t2392 = t2509 * t2577 - 0.2e1 * t2778;
t3038 = t2503 * (t2391 * t2517 - t2392 * t2516) + t2500 * (t2391 * t2516 + t2392 * t2517);
t2154 = (t2230 * t2565 - t2231 * t2559) * t2993 + ((t2231 * t2565 + t2913) * t2990 + (t2515 - 0.2e1 * t2782 + 0.2e1 * t2849) * t2503 + (-t2479 - t2845) * t3018 + (t2274 * t2852 - t2277 * t2542 - t2865) * t2585 + t3038 * t2570) * t2491 + (t2230 * t3028 + (-t2274 * t2542 - t2277 * t2852) * t2585) * t2488 - pkin(1) * (((t2570 * t2631 + t2513 + 0.2e1 * t2948) * t2503 + (t2494 + t2469 + (t2888 / 0.2e1 + t2889 / 0.2e1) * t2570) * t3018) * t2565 + t2277 * t2497);
t2506 = -t2574 + t2584;
t2485 = 0.1e1 + t2506;
t2749 = qJ(3,3) * t2852;
t2699 = pkin(2) * t2749;
t2605 = t2485 * t2542 - 0.2e1 * t2699;
t2721 = t2585 * t2852;
t2682 = pkin(2) * t2721;
t2947 = t2565 * qJ(3,3);
t2756 = t2488 * t2947;
t2880 = t2482 * t2585;
t2776 = 0.2e1 * t2880;
t2846 = t2574 * t2550;
t2855 = t2542 * t2585;
t2595 = -t2485 * t2855 + (t2574 / 0.2e1 + t2605 + t2833) * t2776 + t2756 * t3032 + 0.2e1 * qJ(3,3) * t2682 - t2846;
t2800 = t2542 - 0.1e1 / 0.2e1;
t2704 = t2800 * qJ(3,3);
t2722 = t2485 * t2852;
t2987 = pkin(1) * t2491;
t2796 = 0.4e1 * t2987;
t2223 = ((t2722 / 0.2e1 + pkin(2) * t2704) * t2990 + t2497 / 0.2e1) * t2796 + t2595;
t2214 = 0.1e1 / t2223;
t2145 = t2154 * t2214;
t2804 = t2845 / 0.2e1 + t2479;
t2474 = 0.2e1 * t2778;
t2527 = t2584 * t2577;
t2398 = -t2574 * t2577 + t2474 + t2527;
t2894 = t2398 * t2517;
t2471 = -0.2e1 * t2780;
t2840 = t2580 * t2584;
t2694 = -t2518 + t2840;
t2397 = t2471 + t2694;
t2895 = t2397 * t2516;
t2268 = t2468 + (t2894 / 0.2e1 + t2895 / 0.2e1) * t2570 + t2804;
t2316 = t2397 * t2517 - t2398 * t2516;
t2696 = 0.2e1 * t2782 - t2849;
t2271 = t2316 * t2570 + t2512 + t2696;
t3002 = -t2500 / 0.2e1;
t2208 = t2268 * t2503 + t2271 * t3002;
t2211 = t2268 * t3018 + t2271 * t2503;
t2424 = t2519 + t2533;
t2429 = -t2520 + t2530;
t2334 = t2424 * t2517 - t2429 * t2516;
t2289 = t2334 * t2570 + t2513 - t2948;
t2337 = t2424 * t2516 + t2429 * t2517;
t2292 = -t2337 * t2570 + t2494 + t2514;
t2229 = t2289 * t2503 - t2292 * t2500;
t2232 = t2289 * t2500 + t2292 * t2503;
t2418 = pkin(2) * t2839 - t2519;
t2419 = t2577 * t2964 + t2520;
t2967 = pkin(2) * t2565;
t2710 = -t2497 + t2967;
t2873 = t2488 * t2551;
t2757 = qJ(3,3) * t2873;
t2874 = t2488 * t2491;
t2999 = t2559 / 0.2e1;
t3012 = -0.2e1 * t2559;
t2136 = ((-t2418 * t2856 + t2419 * t2858 - t2948) * t2503 - t2500 * (t2418 * t2858 + t2419 * t2856 + t2494)) * t2491 - t2277 * t2757 + ((pkin(2) * t2865 + t2229 * t2542 - t2232 * t2852 - t2503 * t2513) * t2491 + (t2229 * t2852 + t2232 * t2542) * t2488) * t2585 + (-(t2208 * t3012 + t2211 * t2565) * t2482 - 0.2e1 * (t2208 * t2565 + t2211 * t2999) * t2874 + t2710 * t2230) * pkin(1);
t2368 = -t2580 * t3055 + t2471 - t2518;
t2903 = t2368 * t2516;
t2367 = t2474 + (-t3055 - t2574) * t2577;
t2904 = t2367 * t2517;
t2250 = t2448 + (t2904 / 0.2e1 + t2903 / 0.2e1) * t2570 + t2804;
t2862 = t2516 * t2367;
t2302 = t2368 * t2517 - t2862;
t2265 = t2302 * t2570 - t2458 + t2696;
t2202 = t2250 * t2503 + t2265 * t3002;
t2205 = t2250 * t3018 + t2265 * t2503;
t2951 = qJ(3,3) * t2488;
t2406 = t2580 - t2780 + t2840;
t2407 = t2527 + t2577 + t2778;
t3039 = t2503 * (t2406 * t2517 - t2407 * t2516) + (t2406 * t2516 + t2407 * t2517) * t2500;
t2166 = (t2202 * t3012 + t2205 * t2565) * t2993 + (0.2e1 * (t2202 * t2565 + t2205 * t2999) * t2990 - qJ(3,3) * t2274) * t2491 - t2277 * t2951 - (((t2782 + t2801) * t2503 + t2500 * (t2479 + t2698) + t3039 * t2570) * t2565 - qJ(3,3) * t2913) * pkin(1);
t2116 = (t2136 + t2166) * t2214;
t2962 = t2116 * pkin(2);
t2073 = t2962 - t2145;
t3065 = qJ(3,3) * t2073;
t2094 = t2116 * t2584;
t2091 = t2574 * t2116;
t2922 = t2166 * t2214;
t2157 = t2585 * t2922;
t2812 = t2091 + t2157;
t2976 = pkin(2) * t2154;
t2010 = t2094 + (t2166 - t2976) * t2214 + t2812;
t2058 = pkin(2) * t2073;
t2017 = t2058 + t2812;
t3005 = t2136 / 0.2e1;
t2109 = (t2166 + t3005) * t2214;
t2085 = t2109 * pkin(2);
t2139 = -t2145 / 0.4e1;
t2062 = t2085 + t2139;
t2148 = t2922 / 0.2e1;
t2928 = t2136 * t2214;
t2103 = t2148 + t2928 / 0.4e1;
t2149 = -t2922 / 0.4e1;
t2104 = t2148 + t2928 / 0.2e1;
t2140 = -t2145 / 0.2e1;
t2816 = pkin(2) * t2104 + t2140;
t2063 = t2085 + t2140;
t2963 = t2063 * pkin(2);
t2970 = pkin(2) * t2559;
t3021 = 0.4e1 * t2482;
t3027 = -0.2e1 * t2063;
t1975 = -(0.8e1 * ((t2103 * t2574 - t2963 / 0.2e1) * t2542 + t2062 * t2749 + (t2149 - t2928 / 0.8e1) * t2574 + t2963 / 0.4e1) * t2990 + t2010 * t2947 + t2017 * t2970) * t2987 - (t2010 * t2497 - t2017 * t2967) * t2990 + t2816 * t3028 + ((-0.4e1 * t2482 + 0.2e1) * (-t2109 * t2574 + t2963) * t2852 + (t3027 + (t3021 + (-0.8e1 * t2482 + 0.4e1) * t2542) * t2062) * qJ(3,3)) * t2585;
t2037 = t2091 + t2058;
t2070 = t2962 + t2140;
t2650 = t2947 + t2970;
t2746 = (t2058 - t2091) * t2852;
t3015 = 0.2e1 * t2542;
t2996 = t3015 - 0.1e1;
t2763 = t2996 * qJ(3,3);
t2949 = qJ(3,3) * t2551;
t3033 = -0.4e1 * pkin(1);
t1988 = -t2073 * t2949 + (((t2104 * t2574 - t2058 / 0.2e1) * t2542 + t2070 * t2749 + (t2149 - t2928 / 0.4e1) * t2574 + t2058 / 0.4e1) * t2874 * t3033 + (t2488 * t2710 - t2491 * t2650) * t2037) * pkin(1) + (-0.2e1 * (t2070 * t2763 + t2746) * t2482 + qJ(3,3) * t2070 * t3015 + t2746) * t2585;
t2358 = pkin(2) * t2763 + t2722;
t2328 = t2358 * t2990 + t2497;
t2797 = 0.2e1 * t2987;
t2226 = 0.1e1 / (t2328 * t2797 + t2595);
t2931 = t2116 * t2154;
t2742 = t2226 * t2931;
t2672 = t2214 * t2742;
t2752 = qJ(3,3) * t2855;
t2767 = -t2990 / 0.2e1;
t3009 = -pkin(2) / 0.2e1;
t2589 = ((pkin(2) * t2852 + t2704) * t2880 - ((pkin(2) * t2800 - t2749) * t2990 + t2650 * t3009) * t2987 + pkin(2) * t2710 * t2767 - t2752 / 0.2e1 - t2682 / 0.2e1 + t2949 / 0.2e1) * t2672;
t2049 = 0.2e1 * t2589;
t2950 = qJ(3,3) * t2503;
t2783 = pkin(2) * t2950;
t2445 = -0.2e1 * t2783;
t2364 = t2500 * t2506 + t2445;
t2455 = t2500 * qJ(3,3);
t2449 = pkin(2) * t2455;
t2553 = t2584 / 0.2e1;
t2773 = t2553 - t2574 / 0.2e1;
t2280 = t2364 * t2565 + (t2503 * t2773 + t2449) * t3012;
t2442 = 0.2e1 * t2449;
t2286 = (t2503 * t2506 + t2442) * t2565 + t2364 * t2559;
t2465 = t2500 * pkin(2);
t2382 = t2465 - t2950;
t2973 = pkin(2) * t2503;
t2380 = t2455 - t2973;
t2381 = t2465 + t2950;
t2621 = -t2380 * t2852 + t2381 * t2542;
t2622 = -t2380 * t2542 - t2381 * t2852;
t2868 = t2491 * t2503;
t2184 = (t2500 * t2873 - t2868) * qJ(3,3) + (t2280 * t2482 + t2286 * t2874 - t2382 * t2710) * pkin(1) + ((-t2621 + t2465) * t2491 + t2622 * t2488) * t2585;
t2379 = t2455 + t2973;
t2755 = t2488 * t2950;
t2883 = t2455 * t2491;
t2187 = -t2551 * t2755 - t2883 + (t2280 * t2874 - t2286 * t2482 + t2379 * t2710) * pkin(1) + ((t2622 - t2973) * t2491 + t2621 * t2488) * t2585;
t2545 = t2570 ^ 2;
t2916 = t2226 * t2545;
t2452 = 0.1e1 / 0.2e1 + t2773;
t2832 = 0.1e1 / 0.4e1 + t2584 / 0.4e1;
t2346 = -t2452 * t2542 + t2699 - t2574 / 0.4e1 + t2832;
t2944 = 0.2e1 * pkin(1);
t2220 = 0.1e1 / (t2846 + (-t2328 * t2491 + t2756) * t2944 + (t2346 * t3021 + t2605) * t2585);
t2919 = t2214 * t2220;
t1968 = t2049 + (-t2184 * t2376 - t2187 * t2373) * t2916 + (-t1975 * t2166 - t1988 * t2136) * t2919;
t2813 = t2091 + t2094;
t2022 = (-t2166 - t2976) * t2214 + t2813;
t2025 = pkin(2) * t2091 - t2073 * t3055;
t3006 = pkin(2) * qJ(3,3);
t2001 = (t2346 * t2922 * t2990 + t2022 * t2947 / 0.4e1 + t2559 * t2025 / 0.4e1) * t2796 + (t2022 * t2497 - t2025 * t2565) * t2990 - t3065 + (0.2e1 * t2358 * t2482 - t2996 * t3006 - t2722) * t2157;
t2040 = -pkin(2) * t2145 + t2813;
t2583 = pkin(2) * t2584;
t3042 = t2116 * (pkin(2) * (0.1e1 + t2574) + t2583) + t3055 * t2145;
t2004 = -t3065 + ((t2040 * t2947 + t2559 * t3042) * t2491 + (t2040 * t2497 - t2565 * t3042) * t2488) * pkin(1);
t2361 = t2485 * t2500 + t2445;
t2877 = t2485 * t2503;
t2283 = (t2442 + t2877) * t2565 + t2559 * t2361;
t2355 = t2361 * t2565;
t2898 = t2379 * t2559;
t2196 = -t2755 - t2883 + (t2283 * t2482 - (t2355 + (t2452 * t2503 + t2449) * t3012) * t2874 - (t2503 * t2584 + t2449 + t2503) * t2565 + qJ(3,3) * t2898) * pkin(1);
t3024 = -0.2e1 * t2449;
t2199 = (t2488 * t2500 - t2868) * qJ(3,3) + (-t2355 * t2482 - t2283 * t2874 + (t2500 * t2584 + t2500 - t2783) * t2565 + (-(t3024 - t2877) * t2482 - qJ(3,3) * t2382) * t2559) * pkin(1);
t2671 = (-qJ(3,3) + ((pkin(2) * t2947 - t2559 * t3055) * t2491 - (-pkin(2) * t2497 - t2565 * t3055) * t2488) * pkin(1)) * t2742;
t1983 = (-t2196 * t2373 - t2199 * t2376) * t2916 + (-t2671 + (-t2001 * t2166 - t2004 * t2136) * t2220) * t2214;
t3064 = t1968 + t1983;
t2097 = t2118 * t2584;
t2092 = t2575 * t2118;
t2921 = t2167 * t2216;
t2158 = t2585 * t2921;
t2810 = t2092 + t2158;
t2975 = pkin(2) * t2155;
t2011 = t2097 + (t2167 - t2975) * t2216 + t2810;
t2059 = pkin(2) * t2074;
t2019 = t2059 + t2810;
t3004 = t2137 / 0.2e1;
t2110 = (t2167 + t3004) * t2216;
t2086 = t2110 * pkin(2);
t2141 = -t2146 / 0.4e1;
t2065 = t2086 + t2141;
t2150 = t2921 / 0.2e1;
t2927 = t2137 * t2216;
t2105 = t2150 + t2927 / 0.4e1;
t2151 = -t2921 / 0.4e1;
t2106 = t2150 + t2927 / 0.2e1;
t2142 = -t2146 / 0.2e1;
t2815 = pkin(2) * t2106 + t2142;
t2969 = pkin(2) * t2561;
t2066 = t2086 + t2142;
t2978 = pkin(2) * t2066;
t3020 = 0.4e1 * t2483;
t3026 = -0.2e1 * t2066;
t1974 = -(0.8e1 * ((t2105 * t2575 - t2978 / 0.2e1) * t2543 + t2065 * t2748 + (t2151 - t2927 / 0.8e1) * t2575 + t2978 / 0.4e1) * t2989 + t2011 * t2946 + t2019 * t2969) * t2986 - (t2011 * t2498 - t2019 * t2966) * t2989 + t2815 * t3029 + ((-0.4e1 * t2483 + 0.2e1) * (-t2110 * t2575 + t2978) * t2851 + (t3026 + (t3020 + (-0.8e1 * t2483 + 0.4e1) * t2543) * t2065) * qJ(3,2)) * t2585;
t2038 = t2092 + t2059;
t2071 = t2961 + t2142;
t2651 = t2946 + t2969;
t2745 = (t2059 - t2092) * t2851;
t3014 = 0.2e1 * t2543;
t2995 = t3014 - 0.1e1;
t2762 = t2995 * qJ(3,2);
t2953 = qJ(3,2) * t2551;
t1986 = -t2074 * t2953 + (((t2106 * t2575 - t2059 / 0.2e1) * t2543 + t2071 * t2748 + (t2151 - t2927 / 0.4e1) * t2575 + t2059 / 0.4e1) * t2872 * t3033 + (t2489 * t2709 - t2492 * t2651) * t2038) * pkin(1) + (-0.2e1 * (t2071 * t2762 + t2745) * t2483 + qJ(3,2) * t2071 * t3014 + t2745) * t2585;
t2359 = pkin(2) * t2762 + t2720;
t2329 = t2359 * t2989 + t2498;
t2795 = 0.2e1 * t2986;
t2227 = 0.1e1 / (t2329 * t2795 + t2594);
t2930 = t2118 * t2155;
t2740 = t2227 * t2930;
t2669 = t2216 * t2740;
t2751 = qJ(3,2) * t2854;
t2766 = -t2989 / 0.2e1;
t2588 = ((pkin(2) * t2851 + t2703) * t2879 - ((pkin(2) * t2799 - t2748) * t2989 + t2651 * t3009) * t2986 + pkin(2) * t2709 * t2766 - t2751 / 0.2e1 - t2681 / 0.2e1 + t2953 / 0.2e1) * t2669;
t2050 = 0.2e1 * t2588;
t2954 = qJ(3,2) * t2504;
t2784 = pkin(2) * t2954;
t2446 = -0.2e1 * t2784;
t2365 = t2501 * t2507 + t2446;
t2456 = t2501 * qJ(3,2);
t2450 = pkin(2) * t2456;
t2772 = t2553 - t2575 / 0.2e1;
t2281 = t2365 * t2567 + (t2504 * t2772 + t2450) * t3011;
t2443 = 0.2e1 * t2450;
t2287 = (t2504 * t2507 + t2443) * t2567 + t2365 * t2561;
t2466 = t2501 * pkin(2);
t2386 = t2466 - t2954;
t2972 = pkin(2) * t2504;
t2384 = t2456 - t2972;
t2385 = t2466 + t2954;
t2619 = -t2384 * t2851 + t2385 * t2543;
t2620 = -t2384 * t2543 - t2385 * t2851;
t2867 = t2492 * t2504;
t2185 = (t2501 * t2871 - t2867) * qJ(3,2) + (t2281 * t2483 + t2287 * t2872 - t2386 * t2709) * pkin(1) + ((-t2619 + t2466) * t2492 + t2620 * t2489) * t2585;
t2383 = t2456 + t2972;
t2754 = t2489 * t2954;
t2882 = t2456 * t2492;
t2188 = -t2551 * t2754 - t2882 + (t2281 * t2872 - t2287 * t2483 + t2383 * t2709) * pkin(1) + ((t2620 - t2972) * t2492 + t2619 * t2489) * t2585;
t2915 = t2227 * t2545;
t2453 = 0.1e1 / 0.2e1 + t2772;
t2347 = -t2453 * t2543 + t2700 - t2575 / 0.4e1 + t2832;
t2221 = 0.1e1 / (t2844 + (-t2329 * t2492 + t2758) * t2944 + (t2347 * t3020 + t2606) * t2585);
t2918 = t2216 * t2221;
t1969 = t2050 + (-t2185 * t2377 - t2188 * t2374) * t2915 + (-t1974 * t2167 - t1986 * t2137) * t2918;
t2811 = t2092 + t2097;
t2023 = (-t2167 - t2975) * t2216 + t2811;
t2026 = pkin(2) * t2092 - t2074 * t3055;
t3007 = pkin(2) * qJ(3,2);
t2002 = (t2347 * t2921 * t2989 + t2023 * t2946 / 0.4e1 + t2561 * t2026 / 0.4e1) * t2794 + (t2023 * t2498 - t2026 * t2567) * t2989 - t3066 + (0.2e1 * t2359 * t2483 - t2995 * t3007 - t2720) * t2158;
t2041 = -pkin(2) * t2146 + t2811;
t3041 = t2118 * (pkin(2) * (0.1e1 + t2575) + t2583) + t3055 * t2146;
t2005 = -t3066 + ((t2041 * t2946 + t2561 * t3041) * t2492 + (t2041 * t2498 - t2567 * t3041) * t2489) * pkin(1);
t2362 = t2486 * t2501 + t2446;
t2876 = t2486 * t2504;
t2284 = (t2443 + t2876) * t2567 + t2561 * t2362;
t2356 = t2362 * t2567;
t2897 = t2383 * t2561;
t2197 = -t2754 - t2882 + (t2284 * t2483 - (t2356 + (t2453 * t2504 + t2450) * t3011) * t2872 - (t2504 * t2584 + t2450 + t2504) * t2567 + qJ(3,2) * t2897) * pkin(1);
t3023 = -0.2e1 * t2450;
t2200 = (t2489 * t2501 - t2867) * qJ(3,2) + (-t2356 * t2483 - t2284 * t2872 + (t2501 * t2584 + t2501 - t2784) * t2567 + (-(t3023 - t2876) * t2483 - qJ(3,2) * t2386) * t2561) * pkin(1);
t2668 = (-qJ(3,2) + ((pkin(2) * t2946 - t2561 * t3055) * t2492 - (-pkin(2) * t2498 - t2567 * t3055) * t2489) * pkin(1)) * t2740;
t1984 = (-t2197 * t2374 - t2200 * t2377) * t2915 + (-t2668 + (-t2002 * t2167 - t2005 * t2137) * t2221) * t2216;
t3063 = t1969 + t1984;
t2100 = t2120 * t2584;
t2093 = t2576 * t2120;
t2920 = t2168 * t2218;
t2159 = t2585 * t2920;
t2808 = t2093 + t2159;
t2974 = pkin(2) * t2156;
t2012 = t2100 + (t2168 - t2974) * t2218 + t2808;
t2060 = pkin(2) * t2075;
t2021 = t2060 + t2808;
t3003 = t2138 / 0.2e1;
t2111 = (t2168 + t3003) * t2218;
t2087 = t2111 * pkin(2);
t2143 = -t2147 / 0.4e1;
t2068 = t2087 + t2143;
t2152 = t2920 / 0.2e1;
t2926 = t2138 * t2218;
t2107 = t2152 + t2926 / 0.4e1;
t2153 = -t2920 / 0.4e1;
t2108 = t2152 + t2926 / 0.2e1;
t2144 = -t2147 / 0.2e1;
t2814 = pkin(2) * t2108 + t2144;
t2968 = pkin(2) * t2563;
t2069 = t2087 + t2144;
t2977 = pkin(2) * t2069;
t3019 = 0.4e1 * t2484;
t3025 = -0.2e1 * t2069;
t1976 = -(0.8e1 * ((t2107 * t2576 - t2977 / 0.2e1) * t2544 + t2068 * t2747 + (t2153 - t2926 / 0.8e1) * t2576 + t2977 / 0.4e1) * t2988 + t2012 * t2945 + t2021 * t2968) * t2985 - (t2012 * t2499 - t2021 * t2965) * t2988 + t2814 * t3030 + ((-0.4e1 * t2484 + 0.2e1) * (-t2111 * t2576 + t2977) * t2850 + (t3025 + (t3019 + (-0.8e1 * t2484 + 0.4e1) * t2544) * t2068) * qJ(3,1)) * t2585;
t2039 = t2093 + t2060;
t2072 = t2960 + t2144;
t2652 = t2945 + t2968;
t2744 = (t2060 - t2093) * t2850;
t3013 = 0.2e1 * t2544;
t2994 = t3013 - 0.1e1;
t2764 = qJ(3,1) * t2994;
t2957 = qJ(3,1) * t2551;
t1987 = -t2075 * t2957 + (((t2108 * t2576 - t2060 / 0.2e1) * t2544 + t2072 * t2747 + (t2153 - t2926 / 0.4e1) * t2576 + t2060 / 0.4e1) * t2870 * t3033 + (t2490 * t2708 - t2493 * t2652) * t2039) * pkin(1) + (-0.2e1 * (t2072 * t2764 + t2744) * t2484 + qJ(3,1) * t2072 * t3013 + t2744) * t2585;
t2360 = pkin(2) * t2764 + t2718;
t2330 = t2360 * t2988 + t2499;
t2793 = 0.2e1 * t2985;
t2228 = 0.1e1 / (t2330 * t2793 + t2593);
t2929 = t2120 * t2156;
t2738 = t2228 * t2929;
t2666 = t2218 * t2738;
t2750 = qJ(3,1) * t2853;
t2765 = -t2988 / 0.2e1;
t2587 = ((pkin(2) * t2850 + t2702) * t2878 - ((pkin(2) * t2798 - t2747) * t2988 + t2652 * t3009) * t2985 + pkin(2) * t2708 * t2765 - t2750 / 0.2e1 - t2680 / 0.2e1 + t2957 / 0.2e1) * t2666;
t2051 = 0.2e1 * t2587;
t2958 = qJ(3,1) * t2505;
t2788 = pkin(2) * t2958;
t2447 = -0.2e1 * t2788;
t2366 = t2502 * t2508 + t2447;
t2457 = t2502 * qJ(3,1);
t2451 = pkin(2) * t2457;
t2771 = t2553 - t2576 / 0.2e1;
t2282 = t2366 * t2569 + (t2505 * t2771 + t2451) * t3010;
t2444 = 0.2e1 * t2451;
t2288 = (t2505 * t2508 + t2444) * t2569 + t2366 * t2563;
t2467 = t2502 * pkin(2);
t2390 = t2467 - t2958;
t2971 = pkin(2) * t2505;
t2388 = t2457 - t2971;
t2389 = t2467 + t2958;
t2617 = -t2388 * t2850 + t2389 * t2544;
t2618 = -t2388 * t2544 - t2389 * t2850;
t2866 = t2493 * t2505;
t2186 = (t2502 * t2869 - t2866) * qJ(3,1) + (t2282 * t2484 + t2288 * t2870 - t2390 * t2708) * pkin(1) + ((-t2617 + t2467) * t2493 + t2618 * t2490) * t2585;
t2387 = t2457 + t2971;
t2753 = t2490 * t2958;
t2881 = t2457 * t2493;
t2189 = -t2551 * t2753 - t2881 + (t2282 * t2870 - t2288 * t2484 + t2387 * t2708) * pkin(1) + ((t2618 - t2971) * t2493 + t2617 * t2490) * t2585;
t2914 = t2228 * t2545;
t2454 = 0.1e1 / 0.2e1 + t2771;
t2348 = -t2454 * t2544 + t2701 - t2576 / 0.4e1 + t2832;
t2222 = 0.1e1 / (t2842 + (-t2330 * t2493 + t2760) * t2944 + (t2348 * t3019 + t2607) * t2585);
t2917 = t2218 * t2222;
t1970 = t2051 + (-t2186 * t2378 - t2189 * t2375) * t2914 + (-t1976 * t2168 - t1987 * t2138) * t2917;
t2809 = t2093 + t2100;
t2024 = (-t2168 - t2974) * t2218 + t2809;
t2027 = pkin(2) * t2093 - t2075 * t3055;
t3008 = pkin(2) * qJ(3,1);
t2003 = (t2348 * t2920 * t2988 + t2024 * t2945 / 0.4e1 + t2563 * t2027 / 0.4e1) * t2792 + (t2024 * t2499 - t2027 * t2569) * t2988 - t3067 + (0.2e1 * t2360 * t2484 - t2994 * t3008 - t2718) * t2159;
t2042 = -pkin(2) * t2147 + t2809;
t3040 = t2120 * (pkin(2) * (0.1e1 + t2576) + t2583) + t3055 * t2147;
t2006 = -t3067 + ((t2042 * t2945 + t2563 * t3040) * t2493 + (t2042 * t2499 - t2569 * t3040) * t2490) * pkin(1);
t2363 = t2487 * t2502 + t2447;
t2875 = t2487 * t2505;
t2285 = (t2444 + t2875) * t2569 + t2563 * t2363;
t2357 = t2363 * t2569;
t2896 = t2387 * t2563;
t2198 = -t2753 - t2881 + (t2285 * t2484 - (t2357 + (t2454 * t2505 + t2451) * t3010) * t2870 - (t2505 * t2584 + t2451 + t2505) * t2569 + qJ(3,1) * t2896) * pkin(1);
t3022 = -0.2e1 * t2451;
t2201 = (t2490 * t2502 - t2866) * qJ(3,1) + (-t2357 * t2484 - t2285 * t2870 + (t2502 * t2584 + t2502 - t2788) * t2569 + (-(t3022 - t2875) * t2484 - qJ(3,1) * t2390) * t2563) * pkin(1);
t2665 = (-qJ(3,1) + ((pkin(2) * t2945 - t2563 * t3055) * t2493 - (-pkin(2) * t2499 - t2569 * t3055) * t2490) * pkin(1)) * t2738;
t1985 = (-t2198 * t2375 - t2201 * t2378) * t2914 + (-t2665 + (-t2003 * t2168 - t2006 * t2138) * t2222) * t2218;
t3062 = t1970 + t1985;
t2562 = sin(qJ(2,1));
t2568 = cos(qJ(2,1));
t2219 = 0.1e1 / t2225 ^ 2;
t2923 = t2168 ^ 2 * t2219;
t2623 = -t1985 * t2562 + t2568 * t2923;
t2560 = sin(qJ(2,2));
t2566 = cos(qJ(2,2));
t2217 = 0.1e1 / t2224 ^ 2;
t2924 = t2167 ^ 2 * t2217;
t2624 = -t1984 * t2560 + t2566 * t2924;
t2558 = sin(qJ(2,3));
t2564 = cos(qJ(2,3));
t2215 = 0.1e1 / t2223 ^ 2;
t2925 = t2166 ^ 2 * t2215;
t2625 = -t1983 * t2558 + t2564 * t2925;
t3058 = 0.2e1 * t2214;
t3057 = 0.2e1 * t2216;
t3056 = 0.2e1 * t2218;
t2727 = t2376 * t2916;
t2728 = t2373 * t2916;
t2731 = t2166 * t2919;
t2737 = t2136 * t2919;
t2592 = -t2001 * t2731 - t2004 * t2737 - t2196 * t2728 - t2199 * t2727 - t2214 * t2671;
t2661 = t2187 * t2728;
t2664 = t2184 * t2727;
t2674 = t1988 * t2737;
t2678 = t1975 * t2731;
t1956 = -0.2e1 * t2589 - t2592 + t2661 + t2664 + t2674 + t2678;
t2076 = 0.2e1 * t2116 * t2145;
t3054 = t1956 * t3028 + t2076;
t2725 = t2377 * t2915;
t2726 = t2374 * t2915;
t2730 = t2167 * t2918;
t2736 = t2137 * t2918;
t2591 = -t2002 * t2730 - t2005 * t2736 - t2197 * t2726 - t2200 * t2725 - t2216 * t2668;
t2660 = t2188 * t2726;
t2663 = t2185 * t2725;
t2676 = t1986 * t2736;
t2679 = t1974 * t2730;
t1957 = -0.2e1 * t2588 - t2591 + t2660 + t2663 + t2676 + t2679;
t2077 = 0.2e1 * t2118 * t2146;
t3053 = t1957 * t3029 + t2077;
t2723 = t2378 * t2914;
t2724 = t2375 * t2914;
t2729 = t2168 * t2917;
t2735 = t2138 * t2917;
t2590 = -t2003 * t2729 - t2006 * t2735 - t2198 * t2724 - t2201 * t2723 - t2218 * t2665;
t2659 = t2189 * t2724;
t2662 = t2186 * t2723;
t2675 = t1987 * t2735;
t2677 = t1976 * t2729;
t1958 = -0.2e1 * t2587 - t2590 + t2659 + t2662 + t2675 + t2677;
t2078 = 0.2e1 * t2120 * t2147;
t3052 = t1958 * t3030 + t2078;
t3051 = t2497 + t2967;
t3050 = t2498 + t2966;
t3049 = t2499 + t2965;
t3048 = t2509 - t2855;
t3047 = t2510 - t2854;
t3046 = t2511 - t2853;
t2643 = (-(t2800 * t2990 - t2970 / 0.2e1 + t2947 / 0.2e1) * t2987 + t3051 * t2767 - t3006 + (t2482 - 0.1e1 / 0.2e1) * t2721) * t2672;
t3031 = 0.2e1 * pkin(2);
t3045 = t3031 * t3064 + 0.2e1 * t2643;
t2642 = (-(t2799 * t2989 - t2969 / 0.2e1 + t2946 / 0.2e1) * t2986 + t3050 * t2766 - t3007 + (t2483 - 0.1e1 / 0.2e1) * t2719) * t2669;
t3044 = t3031 * t3063 + 0.2e1 * t2642;
t2641 = (-(t2798 * t2988 - t2968 / 0.2e1 + t2945 / 0.2e1) * t2985 + t3049 * t2765 - t3008 + (t2484 - 0.1e1 / 0.2e1) * t2717) * t2666;
t3043 = t3031 * t3062 + 0.2e1 * t2641;
t2984 = pkin(1) * t2558;
t2983 = pkin(1) * t2560;
t2982 = pkin(1) * t2562;
t2981 = pkin(1) * t2564;
t2980 = pkin(1) * t2566;
t2979 = pkin(1) * t2568;
t2943 = t1956 * t2226;
t2942 = t1957 * t2227;
t2941 = t1958 * t2228;
t2940 = t1983 * t2226;
t2938 = t1983 * t2564;
t2937 = t1984 * t2227;
t2935 = t1984 * t2566;
t2934 = t1985 * t2228;
t2932 = t1985 * t2568;
t2254 = t2335 * t2503 + t2336 * t2500;
t2910 = t2254 * t2559;
t2258 = t2339 * t2504 + t2340 * t2501;
t2909 = t2258 * t2561;
t2262 = t2343 * t2505 + t2344 * t2502;
t2908 = t2262 * t2563;
t2301 = t2903 + t2904;
t2907 = t2301 * t2500;
t2303 = t2901 + t2902;
t2906 = t2303 * t2501;
t2305 = t2899 + t2900;
t2905 = t2305 * t2502;
t2859 = t2516 * t2545;
t2857 = t2517 * t2545;
t2133 = 0.2e1 * t2928;
t2016 = t2157 + (t2133 + 0.4e1 * t2922) * t2574 + t2058;
t2061 = (t2166 + t2136 / 0.3e1) * t2214 * pkin(2) - t2145 / 0.3e1;
t2160 = 0.2e1 * t2922;
t2088 = (t2160 + t2133) * t2574;
t1989 = (0.4e1 * (t2063 * t2852 + t2109 * t2704) * t2880 + (0.4e1 * ((-t2085 + t2145 / 0.2e1) * t2542 + t2109 * t2749 + t2103 * pkin(2) + t2139) * t2990 - 0.3e1 * t2061 * t2947 + t2559 * t2016) * t2987 - (t2016 * t2565 + 0.3e1 * t2061 * t2497) * t2990 - 0.2e1 * t2109 * t2752 + t2721 * t3027 - qJ(3,3) * (t2157 + t2088 + 0.2e1 * t2058)) * t2731;
t2031 = t2088 + t2058;
t1995 = ((t2073 * t2852 + t2116 * t2704) * t2776 + ((-t2073 * t2542 + t2116 * t2749 + t2816) * t2990 - t2073 * t2947 / 0.2e1 + t2031 * t2999) * t2797 - (t2031 * t2565 + t2073 * t2497) * t2990 - t2116 * t2752 - t2073 * t2721 + t2037 * t3028) * t2737;
t2322 = t2379 * t2565 + t2382 * t2559;
t2323 = t2382 * t2565 - t2898;
t2403 = t2500 * t2721;
t2658 = t2503 * t2721;
t2691 = -0.2e1 * t2574 - t2855;
t2190 = (t2503 * t3048 + t2403 + t3024) * t2491 + (t2500 * t2691 + t2445 - t2658) * t2488 + (t2322 * t2482 - t2323 * t2874 - 0.2e1 * t2455 * t2565 - t2503 * t3051) * pkin(1);
t2178 = t2190 * t2728;
t2193 = (-t2500 * t3048 + t2445 + t2658) * t2491 + (t2503 * t2691 + t2403 + t2442) * t2488 + (-t2323 * t2482 - t2322 * t2874 + (t2465 - 0.2e1 * t2950) * t2565 + t2559 * t2455) * pkin(1);
t2181 = t2193 * t2727;
t2053 = -0.2e1 * t2643;
t2655 = -t1989 - t1995 - t2178 - t2181;
t2628 = -pkin(2) * (t2053 + t2655) + t3064 * (t2574 + t2584);
t2688 = t2109 * t2136 * t2981;
t1947 = -t2664 / 0.2e1 - t2661 / 0.2e1 - t2678 / 0.2e1 - t2674 / 0.2e1 + t2589 + t2592;
t2713 = 0.2e1 * t1947 * t2984;
t2791 = 0.2e1 * t2981;
t2831 = (t2181 / 0.2e1 + t2178 / 0.2e1 + t1989 / 0.2e1 + t1995 / 0.2e1 + t2643 + (t1983 + t1968 / 0.2e1) * pkin(2)) * t2791 + t2585 * t1983 + t2628 - 0.2e1 * (-t2154 * t2215 * t2166 + ((pkin(2) * t2922 - t2145) * t2214 + pkin(2) * t2215 * t3005) * t2136) * t2984 + (t2713 + (t2688 + t2931) * t3058) * qJ(3,3);
t2134 = 0.2e1 * t2927;
t2018 = t2158 + (t2134 + 0.4e1 * t2921) * t2575 + t2059;
t2064 = (t2167 + t2137 / 0.3e1) * t2216 * pkin(2) - t2146 / 0.3e1;
t2161 = 0.2e1 * t2921;
t2089 = (t2161 + t2134) * t2575;
t1991 = (0.4e1 * (t2066 * t2851 + t2110 * t2703) * t2879 + (0.4e1 * ((-t2086 + t2146 / 0.2e1) * t2543 + t2110 * t2748 + t2105 * pkin(2) + t2141) * t2989 - 0.3e1 * t2064 * t2946 + t2561 * t2018) * t2986 - (t2018 * t2567 + 0.3e1 * t2064 * t2498) * t2989 - 0.2e1 * t2110 * t2751 + t2719 * t3026 - qJ(3,2) * (t2158 + t2089 + 0.2e1 * t2059)) * t2730;
t2033 = t2089 + t2059;
t1996 = ((t2074 * t2851 + t2118 * t2703) * t2775 + ((-t2074 * t2543 + t2118 * t2748 + t2815) * t2989 - t2074 * t2946 / 0.2e1 + t2033 * t2998) * t2795 - (t2033 * t2567 + t2074 * t2498) * t2989 - t2118 * t2751 - t2074 * t2719 + t2038 * t3029) * t2736;
t2324 = t2383 * t2567 + t2386 * t2561;
t2325 = t2386 * t2567 - t2897;
t2404 = t2501 * t2719;
t2657 = t2504 * t2719;
t2690 = -0.2e1 * t2575 - t2854;
t2191 = (t2504 * t3047 + t2404 + t3023) * t2492 + (t2501 * t2690 + t2446 - t2657) * t2489 + (t2324 * t2483 - t2325 * t2872 - 0.2e1 * t2456 * t2567 - t2504 * t3050) * pkin(1);
t2179 = t2191 * t2726;
t2194 = (-t2501 * t3047 + t2446 + t2657) * t2492 + (t2504 * t2690 + t2404 + t2443) * t2489 + (-t2325 * t2483 - t2324 * t2872 + (t2466 - 0.2e1 * t2954) * t2567 + t2561 * t2456) * pkin(1);
t2182 = t2194 * t2725;
t2055 = -0.2e1 * t2642;
t2653 = -t1991 - t1996 - t2179 - t2182;
t2627 = -pkin(2) * (t2055 + t2653) + t3063 * (t2575 + t2584);
t2687 = t2110 * t2137 * t2980;
t1948 = -t2663 / 0.2e1 - t2660 / 0.2e1 - t2679 / 0.2e1 - t2676 / 0.2e1 + t2588 + t2591;
t2712 = 0.2e1 * t1948 * t2983;
t2790 = 0.2e1 * t2980;
t2830 = (t2182 / 0.2e1 + t2179 / 0.2e1 + t1991 / 0.2e1 + t1996 / 0.2e1 + t2642 + (t1984 + t1969 / 0.2e1) * pkin(2)) * t2790 + t2585 * t1984 + t2627 - 0.2e1 * (-t2155 * t2217 * t2167 + ((pkin(2) * t2921 - t2146) * t2216 + pkin(2) * t2217 * t3004) * t2137) * t2983 + (t2712 + (t2687 + t2930) * t3057) * qJ(3,2);
t2135 = 0.2e1 * t2926;
t2020 = t2159 + (t2135 + 0.4e1 * t2920) * t2576 + t2060;
t2067 = (t2168 + t2138 / 0.3e1) * t2218 * pkin(2) - t2147 / 0.3e1;
t2162 = 0.2e1 * t2920;
t2090 = (t2162 + t2135) * t2576;
t1990 = (0.4e1 * (t2069 * t2850 + t2111 * t2702) * t2878 + (0.4e1 * ((-t2087 + t2147 / 0.2e1) * t2544 + t2111 * t2747 + t2107 * pkin(2) + t2143) * t2988 - 0.3e1 * t2067 * t2945 + t2563 * t2020) * t2985 - (t2020 * t2569 + 0.3e1 * t2067 * t2499) * t2988 - 0.2e1 * t2111 * t2750 + t2717 * t3025 - qJ(3,1) * (t2159 + t2090 + 0.2e1 * t2060)) * t2729;
t2035 = t2090 + t2060;
t1997 = ((t2075 * t2850 + t2120 * t2702) * t2774 + ((-t2075 * t2544 + t2120 * t2747 + t2814) * t2988 - t2075 * t2945 / 0.2e1 + t2035 * t2997) * t2793 - (t2035 * t2569 + t2075 * t2499) * t2988 - t2120 * t2750 - t2075 * t2717 + t2039 * t3030) * t2735;
t2326 = t2387 * t2569 + t2390 * t2563;
t2327 = t2390 * t2569 - t2896;
t2405 = t2502 * t2717;
t2656 = t2505 * t2717;
t2689 = -0.2e1 * t2576 - t2853;
t2192 = (t2505 * t3046 + t2405 + t3022) * t2493 + (t2502 * t2689 + t2447 - t2656) * t2490 + (t2326 * t2484 - t2327 * t2870 - 0.2e1 * t2457 * t2569 - t2505 * t3049) * pkin(1);
t2180 = t2192 * t2724;
t2195 = (-t2502 * t3046 + t2447 + t2656) * t2493 + (t2505 * t2689 + t2405 + t2444) * t2490 + (-t2327 * t2484 - t2326 * t2870 + (t2467 - 0.2e1 * t2958) * t2569 + t2563 * t2457) * pkin(1);
t2183 = t2195 * t2723;
t2057 = -0.2e1 * t2641;
t2654 = -t1990 - t1997 - t2180 - t2183;
t2626 = -pkin(2) * (t2057 + t2654) + t3062 * (t2576 + t2584);
t2686 = t2111 * t2138 * t2979;
t1949 = -t2662 / 0.2e1 - t2659 / 0.2e1 - t2677 / 0.2e1 - t2675 / 0.2e1 + t2587 + t2590;
t2711 = 0.2e1 * t1949 * t2982;
t2789 = 0.2e1 * t2979;
t2829 = (t2183 / 0.2e1 + t2180 / 0.2e1 + t1990 / 0.2e1 + t1997 / 0.2e1 + t2641 + (t1985 + t1970 / 0.2e1) * pkin(2)) * t2789 + t2585 * t1985 + t2626 - 0.2e1 * (-t2156 * t2219 * t2168 + ((pkin(2) * t2920 - t2147) * t2218 + pkin(2) * t2219 * t3003) * t2138) * t2982 + (t2711 + (t2686 + t2929) * t3056) * qJ(3,1);
t2770 = pkin(1) * t2925;
t2828 = (pkin(2) * t2564 + qJ(3,3) * t2558) * t1983 * pkin(1) + t2628 + qJ(3,3) * t2076 + (pkin(2) * t2558 - qJ(3,3) * t2564) * t2770;
t2769 = pkin(1) * t2924;
t2827 = (pkin(2) * t2566 + qJ(3,2) * t2560) * t1984 * pkin(1) + t2627 + qJ(3,2) * t2077 + (pkin(2) * t2560 - qJ(3,2) * t2566) * t2769;
t2768 = pkin(1) * t2923;
t2826 = (pkin(2) * t2568 + qJ(3,1) * t2562) * t1985 * pkin(1) + t2626 + qJ(3,1) * t2078 + (pkin(2) * t2562 - qJ(3,1) * t2568) * t2768;
t2825 = t2688 * t3058 + t2713 + t3054;
t2824 = t2686 * t3056 + t2711 + t3052;
t2823 = t2687 * t3057 + t2712 + t3053;
t2112 = t2116 ^ 2;
t2598 = -pkin(1) * t2938 + t2655;
t2685 = t2558 * t2770;
t2822 = -pkin(2) * t3064 - qJ(3,3) * t2112 + t2053 + t2598 - t2685;
t2113 = t2118 ^ 2;
t2597 = -pkin(1) * t2935 + t2653;
t2684 = t2560 * t2769;
t2821 = -pkin(2) * t3063 - qJ(3,2) * t2113 + t2055 + t2597 - t2684;
t2114 = t2120 ^ 2;
t2596 = -pkin(1) * t2932 + t2654;
t2683 = t2562 * t2768;
t2820 = -pkin(2) * t3062 - qJ(3,1) * t2114 + t2057 + t2596 - t2683;
t2819 = -pkin(1) * t2625 + t3054;
t2818 = -pkin(1) * t2624 + t3053;
t2817 = -pkin(1) * t2623 + t3052;
t2743 = (t2160 + t2928) * t2928;
t2741 = (t2161 + t2927) * t2927;
t2739 = (t2162 + t2926) * t2926;
t2317 = t2894 + t2895;
t2244 = -t2316 * t2500 + t2317 * t2503;
t2253 = t2334 * t2503 + t2337 * t2500;
t2256 = -t2334 * t2500 + t2337 * t2503;
t2313 = t2373 * t2500 + t2376 * t2503;
t2640 = t2316 * t2503 + t2317 * t2500;
t2169 = ((t2418 * t2517 - t2419 * t2516) * t2503 + (t2418 * t2516 + t2419 * t2517) * t2500) * t2491 + t2313 * t2757 + ((-t2253 * t2542 - t2256 * t2852) * t2491 + (-t2253 * t2852 + t2256 * t2542) * t2488) * t2585 + (-(t2244 * t2559 - t2565 * t2640) * t2482 + (t2244 * t2565 + t2559 * t2640) * t2874 - t2254 * t2710) * pkin(1);
t2319 = t2892 + t2893;
t2245 = -t2318 * t2501 + t2319 * t2504;
t2257 = t2338 * t2504 + t2341 * t2501;
t2260 = -t2338 * t2501 + t2341 * t2504;
t2314 = t2374 * t2501 + t2377 * t2504;
t2639 = t2318 * t2504 + t2319 * t2501;
t2170 = ((t2420 * t2517 - t2421 * t2516) * t2504 + (t2420 * t2516 + t2421 * t2517) * t2501) * t2492 + t2314 * t2759 + ((-t2257 * t2543 - t2260 * t2851) * t2492 + (-t2257 * t2851 + t2260 * t2543) * t2489) * t2585 + (-(t2245 * t2561 - t2567 * t2639) * t2483 + (t2245 * t2567 + t2561 * t2639) * t2872 - t2258 * t2709) * pkin(1);
t2321 = t2890 + t2891;
t2246 = -t2320 * t2502 + t2321 * t2505;
t2261 = t2342 * t2505 + t2345 * t2502;
t2264 = -t2342 * t2502 + t2345 * t2505;
t2315 = t2375 * t2502 + t2378 * t2505;
t2638 = t2320 * t2505 + t2321 * t2502;
t2171 = ((t2422 * t2517 - t2423 * t2516) * t2505 + (t2422 * t2516 + t2423 * t2517) * t2502) * t2493 + t2315 * t2761 + ((-t2261 * t2544 - t2264 * t2850) * t2493 + (-t2261 * t2850 + t2264 * t2544) * t2490) * t2585 + (-(t2246 * t2563 - t2569 * t2638) * t2484 + (t2246 * t2569 + t2563 * t2638) * t2870 - t2262 * t2708) * pkin(1);
t2716 = t2169 * t2220 * t2685 + t2170 * t2221 * t2684 + t2171 * t2222 * t2683;
t2644 = t2228 * t2683;
t2645 = t2227 * t2684;
t2646 = t2226 * t2685;
t2715 = t2184 * t2646 + t2185 * t2645 + t2186 * t2644;
t2714 = t2187 * t2646 + t2188 * t2645 + t2189 * t2644;
t2673 = t2558 * t2743;
t2670 = t2560 * t2741;
t2667 = t2562 * t2739;
t2616 = -pkin(1) * t2673 + t1947 * t2791 - t2655 + t3045;
t2615 = -pkin(1) * t2670 + t1948 * t2790 - t2653 + t3044;
t2614 = -pkin(1) * t2667 + t1949 * t2789 - t2654 + t3043;
t1953 = t2049 + ((-t2184 - 0.2e1 * t2199) * t2376 + (-t2187 - 0.2e1 * t2196) * t2373) * t2916 + (-0.2e1 * t2671 + ((-t1975 - 0.2e1 * t2001) * t2166 + (-t1988 - 0.2e1 * t2004) * t2136) * t2220) * t2214;
t2604 = -t1953 * t2558 - t2564 * t2743;
t2603 = t1953 * t2564 - t2673;
t1954 = t2050 + ((-t2185 - 0.2e1 * t2200) * t2377 + (-t2188 - 0.2e1 * t2197) * t2374) * t2915 + (-0.2e1 * t2668 + ((-t1974 - 0.2e1 * t2002) * t2167 + (-t1986 - 0.2e1 * t2005) * t2137) * t2221) * t2216;
t2602 = -t1954 * t2560 - t2566 * t2741;
t2601 = t1954 * t2566 - t2670;
t1955 = t2051 + ((-t2186 - 0.2e1 * t2201) * t2378 + (-t2189 - 0.2e1 * t2198) * t2375) * t2914 + (-0.2e1 * t2665 + ((-t1976 - 0.2e1 * t2003) * t2168 + (-t1987 - 0.2e1 * t2006) * t2138) * t2222) * t2218;
t2600 = -t1955 * t2562 - t2568 * t2739;
t2599 = t1955 * t2568 - t2667;
t2312 = t2375 * t2505 - t2378 * t2502;
t2311 = t2374 * t2504 - t2377 * t2501;
t2310 = t2373 * t2503 - t2376 * t2500;
t2263 = -t2343 * t2502 + t2344 * t2505;
t2259 = -t2339 * t2501 + t2340 * t2504;
t2255 = -t2335 * t2500 + t2336 * t2503;
t2243 = t2305 * t2505 - t2306 * t2502;
t2242 = t2303 * t2504 - t2304 * t2501;
t2241 = t2301 * t2503 - t2302 * t2500;
t2177 = (-t2312 * t2493 + t2315 * t2490) * qJ(3,1) + (((((t2476 - t2582 - t2692) * t2517 + t2860) * t2505 - t2905) * t2569 + t2243 * t2563) * t2484 - (t2243 * t2569 + (t2306 * t2505 + t2905) * t2563) * t2870 + t3035 * t2569 - qJ(3,1) * t2908) * pkin(1);
t2176 = (-t2311 * t2492 + t2314 * t2489) * qJ(3,2) + (((((t2472 - t2581 - t2693) * t2517 + t2861) * t2504 - t2906) * t2567 + t2242 * t2561) * t2483 - (t2242 * t2567 + (t2304 * t2504 + t2906) * t2561) * t2872 + t3037 * t2567 - qJ(3,2) * t2909) * pkin(1);
t2175 = (-t2310 * t2491 + t2313 * t2488) * qJ(3,3) + (((((t2470 - t2580 - t2694) * t2517 + t2862) * t2503 - t2907) * t2565 + t2241 * t2559) * t2482 - (t2241 * t2565 + (t2302 * t2503 + t2907) * t2559) * t2874 + t3039 * t2565 - qJ(3,3) * t2910) * pkin(1);
t2174 = -t3034 * t2493 + 0.2e1 * t2262 * t2959 + ((t2312 * t2850 + t2315 * t2544) * t2493 + (-t2312 * t2544 + t2315 * t2850) * t2490) * t2585 + ((-t2262 * t2569 + t2263 * t2563) * t2484 - (t2263 * t2569 + t2908) * t2870 + (t2629 * t2505 + t2502 * (t2884 + t2885)) * t2569 + t2315 * t2499) * pkin(1);
t2173 = -t3036 * t2492 + 0.2e1 * t2258 * t2955 + ((t2311 * t2851 + t2314 * t2543) * t2492 + (-t2311 * t2543 + t2314 * t2851) * t2489) * t2585 + ((-t2258 * t2567 + t2259 * t2561) * t2483 - (t2259 * t2567 + t2909) * t2872 + (t2630 * t2504 + t2501 * (t2886 + t2887)) * t2567 + t2314 * t2498) * pkin(1);
t2172 = -t3038 * t2491 + 0.2e1 * t2254 * t2951 + ((t2310 * t2852 + t2313 * t2542) * t2491 + (-t2310 * t2542 + t2313 * t2852) * t2488) * t2585 + ((-t2254 * t2565 + t2255 * t2559) * t2482 - (t2255 * t2565 + t2910) * t2874 + (t2631 * t2503 + (t2888 + t2889) * t2500) * t2565 + t2313 * t2497) * pkin(1);
t1942 = -t2596 + t3043;
t1940 = -t2597 + t3044;
t1938 = -t2598 + t3045;
t1 = [t2199 * t2940 + t2200 * t2937 + t2201 * t2934, 0, 0, (-t2186 - t2201) * t2941 + (-t2185 - t2200) * t2942 + (-t2184 - t2199) * t2943, ((t2186 * t2932 + t2201 * t2599) * t2228 + (t2185 * t2935 + t2200 * t2601) * t2227 + (t2184 * t2938 + t2199 * t2603) * t2226) * pkin(1) + t2715, ((t2186 * t2623 + t2201 * t2600) * t2228 + (t2185 * t2624 + t2200 * t2602) * t2227 + (t2184 * t2625 + t2199 * t2604) * t2226) * pkin(1), (t1942 * t2186 + t1958 * t2195 + t2201 * t2614) * t2228 + (t1940 * t2185 + t1957 * t2194 + t2200 * t2615) * t2227 + (t1938 * t2184 + t1956 * t2193 + t2199 * t2616) * t2226 + t2715, (-t2114 * t2195 + t2186 * t2817 + t2201 * t2824) * t2228 + (-t2113 * t2194 + t2185 * t2818 + t2200 * t2823) * t2227 + (-t2112 * t2193 + t2184 * t2819 + t2199 * t2825) * t2226, (t2186 * t2826 + t2195 * t2820 + t2201 * t2829) * t2228 + (t2185 * t2827 + t2194 * t2821 + t2200 * t2830) * t2227 + (t2184 * t2828 + t2193 * t2822 + t2199 * t2831) * t2226, 0, -t2857, t2859, 0; t2196 * t2940 + t2197 * t2937 + t2198 * t2934, 0, 0, (-t2189 - t2198) * t2941 + (-t2188 - t2197) * t2942 + (-t2187 - t2196) * t2943, ((t2189 * t2932 + t2198 * t2599) * t2228 + (t2188 * t2935 + t2197 * t2601) * t2227 + (t2187 * t2938 + t2196 * t2603) * t2226) * pkin(1) + t2714, ((t2189 * t2623 + t2198 * t2600) * t2228 + (t2188 * t2624 + t2197 * t2602) * t2227 + (t2187 * t2625 + t2196 * t2604) * t2226) * pkin(1), (t1942 * t2189 + t1958 * t2192 + t2198 * t2614) * t2228 + (t1940 * t2188 + t1957 * t2191 + t2197 * t2615) * t2227 + (t1938 * t2187 + t1956 * t2190 + t2196 * t2616) * t2226 + t2714, (-t2114 * t2192 + t2189 * t2817 + t2198 * t2824) * t2228 + (-t2113 * t2191 + t2188 * t2818 + t2197 * t2823) * t2227 + (-t2112 * t2190 + t2187 * t2819 + t2196 * t2825) * t2226, (t2189 * t2826 + t2192 * t2820 + t2198 * t2829) * t2228 + (t2188 * t2827 + t2191 * t2821 + t2197 * t2830) * t2227 + (t2187 * t2828 + t2190 * t2822 + t2196 * t2831) * t2226, 0, -t2859, -t2857, 0; t1983 * t2175 * t2220 + t1984 * t2176 * t2221 + t1985 * t2177 * t2222, 0, 0, (-t2171 - t2177) * t2222 * t1958 + (-t2170 - t2176) * t2221 * t1957 + (-t2169 - t2175) * t2220 * t1956, ((t2171 * t2932 + t2177 * t2599) * t2222 + (t2170 * t2935 + t2176 * t2601) * t2221 + (t2169 * t2938 + t2175 * t2603) * t2220) * pkin(1) + t2716, ((t2171 * t2623 + t2177 * t2600) * t2222 + (t2170 * t2624 + t2176 * t2602) * t2221 + (t2169 * t2625 + t2175 * t2604) * t2220) * pkin(1), (t1942 * t2171 + t1958 * t2174 + t2177 * t2614) * t2222 + (t1940 * t2170 + t1957 * t2173 + t2176 * t2615) * t2221 + (t1938 * t2169 + t1956 * t2172 + t2175 * t2616) * t2220 + t2716, (-t2114 * t2174 + t2171 * t2817 + t2177 * t2824) * t2222 + (-t2113 * t2173 + t2170 * t2818 + t2176 * t2823) * t2221 + (-t2112 * t2172 + t2169 * t2819 + t2175 * t2825) * t2220, (t2171 * t2826 + t2174 * t2820 + t2177 * t2829) * t2222 + (t2170 * t2827 + t2173 * t2821 + t2176 * t2830) * t2221 + (t2169 * t2828 + t2172 * t2822 + t2175 * t2831) * t2220, 0, 0, 0, 0;];
tau_reg  = t1;
