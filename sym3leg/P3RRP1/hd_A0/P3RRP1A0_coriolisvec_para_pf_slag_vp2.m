% Calculate vector of centrifugal and coriolis load on the joints for
% P3RRP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1,d2]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% taucX [3x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 15:31
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRP1A0_coriolisvec_para_pf_slag_vp2(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: pkin has to be [4x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRP1A0_coriolisvec_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 15:05:31
% EndTime: 2019-05-03 15:06:26
% DurationCPUTime: 56.49s
% Computational Cost: add. (797506->941), mult. (1741472->1447), div. (15201->6), fcn. (732835->26), ass. (0->567)
t1376 = legFrame(3,3);
t1332 = sin(t1376);
t1307 = t1332 * qJ(3,3);
t1335 = cos(t1376);
t1614 = pkin(2) * t1335;
t1270 = t1307 + t1614;
t1310 = t1332 * pkin(2);
t1601 = qJ(3,3) * t1335;
t1273 = t1310 - t1601;
t1383 = sin(qJ(1,3));
t1389 = cos(qJ(1,3));
t1231 = t1270 * t1389 + t1273 * t1383;
t1550 = t1270 * t1383;
t1232 = t1273 * t1389 - t1550;
t1413 = pkin(1) ^ 2;
t1523 = t1383 * t1389;
t1463 = t1413 * t1523;
t1282 = t1332 * t1463;
t1494 = pkin(2) * t1601;
t1297 = -0.2e1 * t1494;
t1367 = qJ(1,3) + qJ(2,3);
t1326 = cos(t1367);
t1317 = t1326 ^ 2;
t1323 = sin(t1367);
t1441 = t1335 * t1463;
t1402 = qJ(3,3) ^ 2;
t1363 = t1389 ^ 2;
t1526 = t1363 * t1413;
t1444 = -0.2e1 * t1402 - t1526;
t1535 = t1323 * t1326;
t1301 = pkin(2) * t1307;
t1647 = -0.2e1 * t1301;
t1348 = pkin(2) * t1389;
t1600 = qJ(3,3) * t1383;
t1670 = -t1600 - t1348;
t1673 = 0.2e1 * t1402 + t1413 - t1526;
t1198 = (t1335 * t1673 + t1282 + t1647) * t1326 + (t1332 * t1444 + t1297 - t1441) * t1323 + (t1231 * t1317 - t1232 * t1535 - 0.2e1 * t1307 * t1389 + t1335 * t1670) * pkin(1);
t1412 = pkin(2) ^ 2;
t1340 = -t1402 + t1412;
t1320 = 0.1e1 + t1340;
t1482 = qJ(3,3) * t1523;
t1445 = pkin(2) * t1482;
t1415 = -t1320 * t1363 + 0.2e1 * t1445;
t1516 = -0.1e1 / 0.2e1 - t1412 / 0.2e1;
t1644 = 0.2e1 * t1317;
t1466 = t1320 * t1523;
t1632 = 0.2e1 * t1363 - 0.1e1;
t1487 = t1632 * qJ(3,3);
t1252 = pkin(2) * t1487 + t1466;
t1371 = 0.2e1 + t1413;
t1596 = t1389 * qJ(3,3);
t1626 = pkin(1) * t1323;
t1687 = 0.2e1 * pkin(1);
t1655 = -(-(t1252 * t1626 + t1600) * t1326 + t1323 * t1596) * t1687 - t1402 * t1371;
t1213 = 0.1e1 / (((t1402 / 0.2e1 - t1415 + t1516) * t1644 + t1415) * t1413 + t1655);
t1398 = xP(3);
t1351 = sin(t1398);
t1352 = cos(t1398);
t1405 = koppelP(3,2);
t1408 = koppelP(3,1);
t1267 = -t1351 * t1405 + t1352 * t1408;
t1394 = xDP(3);
t1395 = xDP(2);
t1246 = t1267 * t1394 + t1395;
t1559 = t1213 * t1246;
t1174 = t1198 * t1559;
t1294 = 0.2e1 * t1301;
t1201 = (-t1332 * t1673 + t1297 + t1441) * t1326 + (t1335 * t1444 + t1282 + t1294) * t1323 + (-t1232 * t1317 - t1231 * t1535 + (t1310 - 0.2e1 * t1601) * t1389 + t1383 * t1307) * pkin(1);
t1264 = t1351 * t1408 + t1352 * t1405;
t1396 = xDP(1);
t1249 = -t1264 * t1394 + t1396;
t1558 = t1213 * t1249;
t1177 = t1201 * t1558;
t1132 = t1177 + t1174;
t1258 = t1332 * t1340 + t1297;
t1374 = t1412 / 0.2e1;
t1493 = t1374 - t1402 / 0.2e1;
t1641 = -0.2e1 * t1383;
t1216 = t1258 * t1389 + (t1335 * t1493 + t1301) * t1641;
t1222 = (t1335 * t1340 + t1294) * t1389 + t1258 * t1383;
t1288 = -t1348 + t1600;
t1372 = 0.1e1 + t1413;
t1271 = t1307 - t1614;
t1272 = t1310 + t1601;
t1425 = -t1271 * t1523 + t1272 * t1363;
t1426 = -t1271 * t1363 - t1272 * t1523;
t1529 = t1326 * t1335;
t1534 = t1323 * t1332;
t1192 = (t1372 * t1534 - t1529) * qJ(3,3) + (t1216 * t1317 + t1222 * t1535 + t1273 * t1288) * pkin(1) + ((-t1425 + t1310) * t1326 + t1426 * t1323) * t1413;
t1481 = t1323 * t1601;
t1547 = t1307 * t1326;
t1195 = -t1372 * t1481 - t1547 + (t1216 * t1535 - t1222 * t1317 - t1270 * t1288) * pkin(1) + ((t1426 - t1614) * t1326 + t1425 * t1323) * t1413;
t1255 = t1320 * t1332 + t1297;
t1538 = t1320 * t1335;
t1219 = (t1294 + t1538) * t1389 + t1383 * t1255;
t1243 = t1255 * t1389;
t1304 = 0.1e1 / 0.2e1 + t1493;
t1204 = -t1481 - t1547 + (t1219 * t1317 - (t1243 + (t1304 * t1335 + t1301) * t1641) * t1535 - (t1335 * t1412 + t1301 + t1335) * t1389 + qJ(3,3) * t1550) * pkin(1);
t1207 = (-t1529 + t1534) * qJ(3,3) + (-t1243 * t1317 - t1219 * t1535 + (t1332 * t1412 + t1332 - t1494) * t1389 + (-(t1647 - t1538) * t1317 - qJ(3,3) * t1273) * t1383) * pkin(1);
t1105 = ((t1192 + t1207) * t1249 + (t1195 + t1204) * t1246) * t1213;
t1611 = t1105 * pkin(2);
t1066 = t1611 - t1132;
t1599 = t1066 * qJ(3,3);
t1377 = legFrame(2,3);
t1333 = sin(t1377);
t1308 = t1333 * qJ(3,2);
t1336 = cos(t1377);
t1613 = pkin(2) * t1336;
t1274 = t1308 + t1613;
t1311 = t1333 * pkin(2);
t1603 = qJ(3,2) * t1336;
t1277 = t1311 - t1603;
t1385 = sin(qJ(1,2));
t1391 = cos(qJ(1,2));
t1233 = t1274 * t1391 + t1277 * t1385;
t1549 = t1274 * t1385;
t1234 = t1277 * t1391 - t1549;
t1522 = t1385 * t1391;
t1461 = t1413 * t1522;
t1283 = t1333 * t1461;
t1495 = pkin(2) * t1603;
t1298 = -0.2e1 * t1495;
t1368 = qJ(1,2) + qJ(2,2);
t1327 = cos(t1368);
t1318 = t1327 ^ 2;
t1324 = sin(t1368);
t1440 = t1336 * t1461;
t1403 = qJ(3,2) ^ 2;
t1364 = t1391 ^ 2;
t1525 = t1364 * t1413;
t1443 = -0.2e1 * t1403 - t1525;
t1533 = t1324 * t1327;
t1302 = pkin(2) * t1308;
t1646 = -0.2e1 * t1302;
t1349 = pkin(2) * t1391;
t1602 = qJ(3,2) * t1385;
t1669 = -t1602 - t1349;
t1672 = 0.2e1 * t1403 + t1413 - t1525;
t1199 = (t1336 * t1672 + t1283 + t1646) * t1327 + (t1333 * t1443 + t1298 - t1440) * t1324 + (t1233 * t1318 - t1234 * t1533 - 0.2e1 * t1308 * t1391 + t1336 * t1669) * pkin(1);
t1342 = -t1403 + t1412;
t1321 = 0.1e1 + t1342;
t1483 = qJ(3,2) * t1522;
t1446 = pkin(2) * t1483;
t1416 = -t1321 * t1364 + 0.2e1 * t1446;
t1643 = 0.2e1 * t1318;
t1465 = t1321 * t1522;
t1631 = 0.2e1 * t1364 - 0.1e1;
t1486 = t1631 * qJ(3,2);
t1253 = pkin(2) * t1486 + t1465;
t1595 = t1391 * qJ(3,2);
t1625 = pkin(1) * t1324;
t1654 = -(-(t1253 * t1625 + t1602) * t1327 + t1324 * t1595) * t1687 - t1403 * t1371;
t1214 = 0.1e1 / (((t1403 / 0.2e1 - t1416 + t1516) * t1643 + t1416) * t1413 + t1654);
t1406 = koppelP(2,2);
t1409 = koppelP(2,1);
t1268 = -t1351 * t1406 + t1352 * t1409;
t1247 = t1268 * t1394 + t1395;
t1556 = t1214 * t1247;
t1175 = t1199 * t1556;
t1295 = 0.2e1 * t1302;
t1202 = (-t1333 * t1672 + t1298 + t1440) * t1327 + (t1336 * t1443 + t1283 + t1295) * t1324 + (-t1234 * t1318 - t1233 * t1533 + (t1311 - 0.2e1 * t1603) * t1391 + t1385 * t1308) * pkin(1);
t1265 = t1351 * t1409 + t1352 * t1406;
t1250 = -t1265 * t1394 + t1396;
t1555 = t1214 * t1250;
t1178 = t1202 * t1555;
t1133 = t1178 + t1175;
t1259 = t1333 * t1342 + t1298;
t1492 = t1374 - t1403 / 0.2e1;
t1640 = -0.2e1 * t1385;
t1217 = t1259 * t1391 + (t1336 * t1492 + t1302) * t1640;
t1223 = (t1336 * t1342 + t1295) * t1391 + t1259 * t1385;
t1289 = -t1349 + t1602;
t1275 = t1308 - t1613;
t1276 = t1311 + t1603;
t1423 = -t1275 * t1522 + t1276 * t1364;
t1424 = -t1275 * t1364 - t1276 * t1522;
t1528 = t1327 * t1336;
t1532 = t1324 * t1333;
t1193 = (t1372 * t1532 - t1528) * qJ(3,2) + (t1217 * t1318 + t1223 * t1533 + t1277 * t1289) * pkin(1) + ((-t1423 + t1311) * t1327 + t1424 * t1324) * t1413;
t1480 = t1324 * t1603;
t1546 = t1308 * t1327;
t1196 = -t1372 * t1480 - t1546 + (t1217 * t1533 - t1223 * t1318 - t1274 * t1289) * pkin(1) + ((t1424 - t1613) * t1327 + t1423 * t1324) * t1413;
t1256 = t1321 * t1333 + t1298;
t1537 = t1321 * t1336;
t1220 = (t1295 + t1537) * t1391 + t1385 * t1256;
t1244 = t1256 * t1391;
t1305 = 0.1e1 / 0.2e1 + t1492;
t1205 = -t1480 - t1546 + (t1220 * t1318 - (t1244 + (t1305 * t1336 + t1302) * t1640) * t1533 - (t1336 * t1412 + t1302 + t1336) * t1391 + qJ(3,2) * t1549) * pkin(1);
t1208 = (-t1528 + t1532) * qJ(3,2) + (-t1244 * t1318 - t1220 * t1533 + (t1333 * t1412 + t1333 - t1495) * t1391 + (-(t1646 - t1537) * t1318 - qJ(3,2) * t1277) * t1385) * pkin(1);
t1106 = ((t1193 + t1208) * t1250 + (t1196 + t1205) * t1247) * t1214;
t1610 = t1106 * pkin(2);
t1067 = t1610 - t1133;
t1598 = t1067 * qJ(3,2);
t1378 = legFrame(1,3);
t1334 = sin(t1378);
t1309 = t1334 * qJ(3,1);
t1337 = cos(t1378);
t1612 = pkin(2) * t1337;
t1278 = t1309 + t1612;
t1312 = t1334 * pkin(2);
t1605 = qJ(3,1) * t1337;
t1281 = t1312 - t1605;
t1387 = sin(qJ(1,1));
t1393 = cos(qJ(1,1));
t1235 = t1278 * t1393 + t1281 * t1387;
t1548 = t1278 * t1387;
t1236 = t1281 * t1393 - t1548;
t1521 = t1387 * t1393;
t1462 = t1413 * t1521;
t1284 = t1334 * t1462;
t1496 = pkin(2) * t1605;
t1299 = -0.2e1 * t1496;
t1369 = qJ(1,1) + qJ(2,1);
t1328 = cos(t1369);
t1319 = t1328 ^ 2;
t1325 = sin(t1369);
t1439 = t1337 * t1462;
t1404 = qJ(3,1) ^ 2;
t1365 = t1393 ^ 2;
t1524 = t1365 * t1413;
t1442 = -0.2e1 * t1404 - t1524;
t1531 = t1325 * t1328;
t1303 = pkin(2) * t1309;
t1645 = -0.2e1 * t1303;
t1350 = pkin(2) * t1393;
t1604 = qJ(3,1) * t1387;
t1668 = -t1604 - t1350;
t1671 = 0.2e1 * t1404 + t1413 - t1524;
t1200 = (t1337 * t1671 + t1284 + t1645) * t1328 + (t1334 * t1442 + t1299 - t1439) * t1325 + (t1235 * t1319 - t1236 * t1531 - 0.2e1 * t1309 * t1393 + t1337 * t1668) * pkin(1);
t1344 = -t1404 + t1412;
t1322 = 0.1e1 + t1344;
t1484 = qJ(3,1) * t1521;
t1447 = pkin(2) * t1484;
t1417 = -t1322 * t1365 + 0.2e1 * t1447;
t1642 = 0.2e1 * t1319;
t1464 = t1322 * t1521;
t1630 = 0.2e1 * t1365 - 0.1e1;
t1485 = t1630 * qJ(3,1);
t1254 = pkin(2) * t1485 + t1464;
t1594 = t1393 * qJ(3,1);
t1624 = pkin(1) * t1325;
t1653 = -(-(t1254 * t1624 + t1604) * t1328 + t1325 * t1594) * t1687 - t1404 * t1371;
t1215 = 0.1e1 / (((t1404 / 0.2e1 - t1417 + t1516) * t1642 + t1417) * t1413 + t1653);
t1407 = koppelP(1,2);
t1410 = koppelP(1,1);
t1269 = -t1351 * t1407 + t1352 * t1410;
t1248 = t1269 * t1394 + t1395;
t1553 = t1215 * t1248;
t1176 = t1200 * t1553;
t1296 = 0.2e1 * t1303;
t1203 = (-t1334 * t1671 + t1299 + t1439) * t1328 + (t1337 * t1442 + t1284 + t1296) * t1325 + (-t1236 * t1319 - t1235 * t1531 + (t1312 - 0.2e1 * t1605) * t1393 + t1387 * t1309) * pkin(1);
t1266 = t1351 * t1410 + t1352 * t1407;
t1251 = -t1266 * t1394 + t1396;
t1552 = t1215 * t1251;
t1179 = t1203 * t1552;
t1134 = t1179 + t1176;
t1260 = t1334 * t1344 + t1299;
t1491 = t1374 - t1404 / 0.2e1;
t1639 = -0.2e1 * t1387;
t1218 = t1260 * t1393 + (t1337 * t1491 + t1303) * t1639;
t1224 = (t1337 * t1344 + t1296) * t1393 + t1260 * t1387;
t1290 = -t1350 + t1604;
t1279 = t1309 - t1612;
t1280 = t1312 + t1605;
t1421 = -t1279 * t1521 + t1280 * t1365;
t1422 = -t1279 * t1365 - t1280 * t1521;
t1527 = t1328 * t1337;
t1530 = t1325 * t1334;
t1194 = (t1372 * t1530 - t1527) * qJ(3,1) + (t1218 * t1319 + t1224 * t1531 + t1281 * t1290) * pkin(1) + ((-t1421 + t1312) * t1328 + t1422 * t1325) * t1413;
t1479 = t1325 * t1605;
t1545 = t1309 * t1328;
t1197 = -t1372 * t1479 - t1545 + (t1218 * t1531 - t1224 * t1319 - t1278 * t1290) * pkin(1) + ((t1422 - t1612) * t1328 + t1421 * t1325) * t1413;
t1257 = t1322 * t1334 + t1299;
t1536 = t1322 * t1337;
t1221 = (t1296 + t1536) * t1393 + t1387 * t1257;
t1245 = t1257 * t1393;
t1306 = 0.1e1 / 0.2e1 + t1491;
t1206 = -t1479 - t1545 + (t1221 * t1319 - (t1245 + (t1306 * t1337 + t1303) * t1639) * t1531 - (t1337 * t1412 + t1303 + t1337) * t1393 + qJ(3,1) * t1548) * pkin(1);
t1209 = (-t1527 + t1530) * qJ(3,1) + (-t1245 * t1319 - t1221 * t1531 + (t1334 * t1412 + t1334 - t1496) * t1393 + (-(t1645 - t1536) * t1319 - qJ(3,1) * t1281) * t1387) * pkin(1);
t1107 = ((t1194 + t1209) * t1251 + (t1197 + t1206) * t1248) * t1215;
t1609 = t1107 * pkin(2);
t1068 = t1609 - t1134;
t1597 = t1068 * qJ(3,1);
t1370 = 0.1e1 + t1412;
t1686 = Ifges(1,3) + (m(2) + m(3)) * t1413;
t1060 = pkin(2) * t1066;
t1144 = (t1204 * t1246 + t1207 * t1249) * t1213;
t1138 = t1413 * t1144;
t1514 = 0.2e1 * t1192 * t1558 + 0.2e1 * t1195 * t1559;
t1012 = t1138 + (0.4e1 * t1144 + t1514) * t1402 + t1060;
t1087 = (0.2e1 * t1144 + t1514) * t1402;
t1030 = t1087 + t1060;
t1088 = t1105 * t1402;
t1031 = t1088 + t1060;
t1051 = -t1177 / 0.3e1 - t1174 / 0.3e1 + ((t1207 + t1192 / 0.3e1) * t1249 + (t1204 + t1195 / 0.3e1) * t1246) * pkin(2) * t1213;
t1102 = ((t1207 + t1192 / 0.2e1) * t1249 + (t1204 + t1195 / 0.2e1) * t1246) * t1213;
t1078 = t1102 * pkin(2);
t1510 = -t1174 / 0.2e1 - t1177 / 0.2e1;
t1053 = t1078 + t1510;
t1469 = t1207 * t1558;
t1472 = t1204 * t1559;
t1505 = t1472 / 0.2e1 + t1469 / 0.2e1;
t1576 = t1195 * t1246;
t1582 = t1192 * t1249;
t1676 = t1213 * (t1582 / 0.4e1 + t1576 / 0.4e1);
t1081 = t1505 + t1676;
t1499 = t1363 - 0.1e1 / 0.2e1;
t1451 = t1499 * qJ(3,3);
t1082 = (t1582 / 0.2e1 + t1576 / 0.2e1) * t1213 + t1505;
t1460 = t1082 * pkin(2) + t1510;
t1592 = t1105 * t1132;
t1475 = t1213 * t1592;
t1478 = qJ(3,3) * t1526;
t1511 = -t1174 / 0.4e1 - t1177 / 0.4e1;
t1541 = t1317 * t1413;
t1515 = 0.1e1 / 0.4e1 + t1412 / 0.4e1;
t1240 = -t1304 * t1363 + t1445 - t1402 / 0.4e1 + t1515;
t1210 = 0.1e1 / ((0.4e1 * t1240 * t1317 - t1415) * t1413 - t1655);
t1586 = t1144 * t1210;
t1126 = (t1576 + t1582) * t1213;
t1589 = t1126 * t1210;
t1608 = t1383 * pkin(2);
t1623 = pkin(1) * t1326;
t1634 = pkin(2) * qJ(3,3);
t1648 = -0.2e1 * qJ(3,3);
t1000 = (0.4e1 * (t1053 * t1523 + t1102 * t1451) * t1541 + (0.4e1 * (t1081 * pkin(2) - t1053 * t1363 + t1102 * t1482 + t1511) * t1626 - 0.3e1 * t1051 * t1596 + t1383 * t1012) * t1623 - (t1012 * t1389 + 0.3e1 * t1051 * t1600) * t1626 - 0.2e1 * t1102 * t1478 - 0.2e1 * t1053 * t1463 - (t1138 + t1087 + 0.2e1 * t1060) * qJ(3,3)) * t1586 + (0.2e1 * (t1066 * t1523 + t1105 * t1451) * t1541 + 0.2e1 * ((-t1066 * t1363 + t1105 * t1482 + t1460) * t1626 - t1066 * t1596 / 0.2e1 + t1030 * t1383 / 0.2e1) * t1623 - (t1030 * t1389 + t1383 * t1599) * t1626 - t1105 * t1478 - t1066 * t1463 + t1031 * t1648) * t1589 + 0.2e1 * (-(t1499 * t1626 - t1608 / 0.2e1 + t1596 / 0.2e1) * t1623 + t1670 * t1626 / 0.2e1 - t1634 + (t1317 - 0.1e1 / 0.2e1) * t1463) * t1475;
t1027 = -pkin(2) * t1132 + t1105 * t1412 + t1088;
t1018 = t1027 - t1144;
t1024 = pkin(2) * t1088 + t1066 * t1370;
t1411 = pkin(2) * t1412;
t1658 = t1105 * (pkin(2) * (0.1e1 + t1402) + t1411) - t1370 * t1132;
t1003 = (0.4e1 * (t1144 * t1240 * t1626 + t1018 * t1596 / 0.4e1 + t1383 * t1024 / 0.4e1) * t1623 + (t1018 * t1600 - t1024 * t1389) * t1626 - t1599 + (t1252 * t1644 - t1632 * t1634 - t1466) * t1138) * t1586 + (-t1599 + ((t1027 * t1596 + t1383 * t1658) * t1326 + (t1027 * t1600 - t1389 * t1658) * t1323) * pkin(1)) * t1589 + (-qJ(3,3) + ((pkin(2) * t1596 + t1370 * t1383) * t1326 - (-pkin(2) * t1600 + t1370 * t1389) * t1323) * pkin(1)) * t1475;
t1329 = m(3) * qJ(3,3) + mrSges(3,3);
t1048 = 0.2e1 * t1329 * t1592;
t1448 = 0.2e1 * pkin(2) * mrSges(3,1) + Ifges(3,2) + Ifges(2,3);
t1651 = 0.2e1 * mrSges(3,3);
t1261 = m(3) * (t1402 + t1412) + qJ(3,3) * t1651 + t1448;
t1313 = -mrSges(2,2) + t1329;
t1637 = m(3) * pkin(2);
t1338 = mrSges(3,1) + t1637;
t1316 = mrSges(2,1) + t1338;
t1382 = sin(qJ(2,3));
t1388 = cos(qJ(2,3));
t1420 = (t1313 * t1382 + t1316 * t1388) * pkin(1);
t1225 = t1261 + 0.2e1 * t1420 + t1686;
t1228 = t1420 + t1261;
t1291 = mrSges(3,1) + (pkin(1) * t1388 + pkin(2)) * m(3);
t1300 = t1637 / 0.2e1 + mrSges(2,1) / 0.2e1 + mrSges(3,1) / 0.2e1;
t1544 = t1313 * t1388;
t1620 = pkin(1) * t1382;
t1629 = m(3) * t1132;
t1009 = t1027 + t1138 + t1144;
t1013 = t1138 + t1031;
t1617 = pkin(2) * t1053;
t1021 = -t1102 * t1402 + t1617;
t1032 = t1060 - t1088;
t1052 = t1078 + t1511;
t1063 = t1611 + t1510;
t1285 = t1596 + t1608;
t1399 = -pkin(2) / 0.2e1;
t1490 = t1288 * t1626;
t1502 = -t1469 / 0.4e1 - t1472 / 0.4e1;
t1633 = t1372 / 0.2e1;
t1638 = pkin(2) / 0.2e1;
t998 = (-0.4e1 * (t1021 * t1523 + t1052 * t1487) * t1541 - (0.8e1 * ((t1081 * t1402 - t1617 / 0.2e1) * t1363 + t1052 * t1482 + ((-t1582 / 0.8e1 - t1576 / 0.8e1) * t1213 + t1502) * t1402 + t1617 / 0.4e1) * t1626 + t1009 * t1596 + t1013 * t1608) * t1623 - (t1009 * t1600 - t1013 * t1348) * t1626 + 0.4e1 * t1052 * t1478 + 0.2e1 * t1021 * t1463 + (t1053 * t1413 + t1460) * t1648) * t1586 + (-0.2e1 * (t1032 * t1523 + t1063 * t1487) * t1541 - 0.4e1 * ((t1082 * t1402 - t1060 / 0.2e1) * t1363 + t1063 * t1482 + (t1502 - t1676) * t1402 + t1060 / 0.4e1) * t1626 * t1623 + 0.2e1 * t1063 * t1478 + t1032 * t1463 - t1372 * t1599 + (-t1285 * t1623 - t1490) * t1031) * t1589 - 0.2e1 * ((pkin(2) * t1523 + t1451) * t1541 - ((pkin(2) * t1363 + t1399 - t1482) * t1626 + t1285 * t1399) * t1623 + t1490 * t1638 - t1478 / 0.2e1 + t1463 * t1399 + qJ(3,3) * t1633) * t1475;
t1685 = t1000 * t1291 - t1003 * t1225 - t1228 * t998 - 0.2e1 * (-t1144 * t1629 + (t1126 * t1300 + t1144 * t1316 - t1629) * t1126) * t1620 + t1102 * t1126 * t1544 * t1687 + t1048;
t1061 = pkin(2) * t1067;
t1145 = (t1205 * t1247 + t1208 * t1250) * t1214;
t1139 = t1413 * t1145;
t1513 = 0.2e1 * t1193 * t1555 + 0.2e1 * t1196 * t1556;
t1014 = t1139 + (0.4e1 * t1145 + t1513) * t1403 + t1061;
t1089 = (0.2e1 * t1145 + t1513) * t1403;
t1033 = t1089 + t1061;
t1090 = t1106 * t1403;
t1034 = t1090 + t1061;
t1054 = -t1178 / 0.3e1 - t1175 / 0.3e1 + ((t1208 + t1193 / 0.3e1) * t1250 + (t1205 + t1196 / 0.3e1) * t1247) * pkin(2) * t1214;
t1103 = ((t1208 + t1193 / 0.2e1) * t1250 + (t1205 + t1196 / 0.2e1) * t1247) * t1214;
t1079 = t1103 * pkin(2);
t1508 = -t1175 / 0.2e1 - t1178 / 0.2e1;
t1056 = t1079 + t1508;
t1468 = t1208 * t1555;
t1471 = t1205 * t1556;
t1504 = t1471 / 0.2e1 + t1468 / 0.2e1;
t1574 = t1196 * t1247;
t1580 = t1193 * t1250;
t1675 = t1214 * (t1580 / 0.4e1 + t1574 / 0.4e1);
t1083 = t1504 + t1675;
t1498 = t1364 - 0.1e1 / 0.2e1;
t1450 = t1498 * qJ(3,2);
t1084 = (t1580 / 0.2e1 + t1574 / 0.2e1) * t1214 + t1504;
t1459 = t1084 * pkin(2) + t1508;
t1591 = t1106 * t1133;
t1474 = t1214 * t1591;
t1477 = qJ(3,2) * t1525;
t1509 = -t1175 / 0.4e1 - t1178 / 0.4e1;
t1540 = t1318 * t1413;
t1241 = -t1305 * t1364 + t1446 - t1403 / 0.4e1 + t1515;
t1211 = 0.1e1 / ((0.4e1 * t1241 * t1318 - t1416) * t1413 - t1654);
t1585 = t1145 * t1211;
t1127 = (t1574 + t1580) * t1214;
t1588 = t1127 * t1211;
t1607 = t1385 * pkin(2);
t1622 = pkin(1) * t1327;
t1635 = pkin(2) * qJ(3,2);
t1649 = -0.2e1 * qJ(3,2);
t1002 = (0.4e1 * (t1056 * t1522 + t1103 * t1450) * t1540 + (0.4e1 * (t1083 * pkin(2) - t1056 * t1364 + t1103 * t1483 + t1509) * t1625 - 0.3e1 * t1054 * t1595 + t1385 * t1014) * t1622 - (t1014 * t1391 + 0.3e1 * t1054 * t1602) * t1625 - 0.2e1 * t1103 * t1477 - 0.2e1 * t1056 * t1461 - (t1139 + t1089 + 0.2e1 * t1061) * qJ(3,2)) * t1585 + (0.2e1 * (t1067 * t1522 + t1106 * t1450) * t1540 + 0.2e1 * ((-t1067 * t1364 + t1106 * t1483 + t1459) * t1625 - t1067 * t1595 / 0.2e1 + t1033 * t1385 / 0.2e1) * t1622 - (t1033 * t1391 + t1385 * t1598) * t1625 - t1106 * t1477 - t1067 * t1461 + t1034 * t1649) * t1588 + 0.2e1 * (-(t1498 * t1625 - t1607 / 0.2e1 + t1595 / 0.2e1) * t1622 + t1669 * t1625 / 0.2e1 - t1635 + (t1318 - 0.1e1 / 0.2e1) * t1461) * t1474;
t1028 = -pkin(2) * t1133 + t1106 * t1412 + t1090;
t1019 = t1028 - t1145;
t1025 = pkin(2) * t1090 + t1067 * t1370;
t1657 = t1106 * (pkin(2) * (0.1e1 + t1403) + t1411) - t1370 * t1133;
t1004 = (0.4e1 * (t1241 * t1145 * t1625 + t1019 * t1595 / 0.4e1 + t1385 * t1025 / 0.4e1) * t1622 + (t1019 * t1602 - t1025 * t1391) * t1625 - t1598 + (t1253 * t1643 - t1631 * t1635 - t1465) * t1139) * t1585 + (-t1598 + ((t1028 * t1595 + t1385 * t1657) * t1327 + (t1028 * t1602 - t1391 * t1657) * t1324) * pkin(1)) * t1588 + (-qJ(3,2) + ((pkin(2) * t1595 + t1370 * t1385) * t1327 - (-pkin(2) * t1602 + t1370 * t1391) * t1324) * pkin(1)) * t1474;
t1330 = m(3) * qJ(3,2) + mrSges(3,3);
t1049 = 0.2e1 * t1330 * t1591;
t1262 = m(3) * (t1403 + t1412) + qJ(3,2) * t1651 + t1448;
t1314 = -mrSges(2,2) + t1330;
t1384 = sin(qJ(2,2));
t1390 = cos(qJ(2,2));
t1419 = (t1314 * t1384 + t1316 * t1390) * pkin(1);
t1226 = t1262 + 0.2e1 * t1419 + t1686;
t1229 = t1419 + t1262;
t1292 = mrSges(3,1) + (pkin(1) * t1390 + pkin(2)) * m(3);
t1543 = t1314 * t1390;
t1619 = pkin(1) * t1384;
t1628 = m(3) * t1133;
t1010 = t1028 + t1139 + t1145;
t1015 = t1139 + t1034;
t1616 = pkin(2) * t1056;
t1022 = -t1103 * t1403 + t1616;
t1035 = t1061 - t1090;
t1055 = t1079 + t1509;
t1064 = t1610 + t1508;
t1286 = t1595 + t1607;
t1489 = t1289 * t1625;
t1501 = -t1468 / 0.4e1 - t1471 / 0.4e1;
t999 = (-0.4e1 * (t1022 * t1522 + t1055 * t1486) * t1540 - (0.8e1 * ((t1083 * t1403 - t1616 / 0.2e1) * t1364 + t1055 * t1483 + ((-t1580 / 0.8e1 - t1574 / 0.8e1) * t1214 + t1501) * t1403 + t1616 / 0.4e1) * t1625 + t1010 * t1595 + t1015 * t1607) * t1622 - (t1010 * t1602 - t1015 * t1349) * t1625 + 0.4e1 * t1055 * t1477 + 0.2e1 * t1022 * t1461 + (t1056 * t1413 + t1459) * t1649) * t1585 + (-0.2e1 * (t1035 * t1522 + t1064 * t1486) * t1540 - 0.4e1 * ((t1084 * t1403 - t1061 / 0.2e1) * t1364 + t1064 * t1483 + (t1501 - t1675) * t1403 + t1061 / 0.4e1) * t1625 * t1622 + 0.2e1 * t1064 * t1477 + t1035 * t1461 - t1372 * t1598 + (-t1286 * t1622 - t1489) * t1034) * t1588 - 0.2e1 * ((pkin(2) * t1522 + t1450) * t1540 - ((pkin(2) * t1364 + t1399 - t1483) * t1625 + t1286 * t1399) * t1622 + t1489 * t1638 - t1477 / 0.2e1 + t1461 * t1399 + qJ(3,2) * t1633) * t1474;
t1684 = t1002 * t1292 - t1004 * t1226 - t1229 * t999 - 0.2e1 * (-t1145 * t1628 + (t1127 * t1300 + t1145 * t1316 - t1628) * t1127) * t1619 + t1103 * t1127 * t1543 * t1687 + t1049;
t1062 = pkin(2) * t1068;
t1146 = (t1206 * t1248 + t1209 * t1251) * t1215;
t1140 = t1413 * t1146;
t1512 = 0.2e1 * t1194 * t1552 + 0.2e1 * t1197 * t1553;
t1016 = t1140 + (0.4e1 * t1146 + t1512) * t1404 + t1062;
t1091 = (0.2e1 * t1146 + t1512) * t1404;
t1036 = t1091 + t1062;
t1092 = t1107 * t1404;
t1037 = t1092 + t1062;
t1057 = -t1179 / 0.3e1 - t1176 / 0.3e1 + ((t1209 + t1194 / 0.3e1) * t1251 + (t1206 + t1197 / 0.3e1) * t1248) * pkin(2) * t1215;
t1104 = ((t1209 + t1194 / 0.2e1) * t1251 + (t1206 + t1197 / 0.2e1) * t1248) * t1215;
t1080 = t1104 * pkin(2);
t1506 = -t1176 / 0.2e1 - t1179 / 0.2e1;
t1059 = t1080 + t1506;
t1467 = t1209 * t1552;
t1470 = t1206 * t1553;
t1503 = t1470 / 0.2e1 + t1467 / 0.2e1;
t1572 = t1197 * t1248;
t1578 = t1194 * t1251;
t1674 = t1215 * (t1578 / 0.4e1 + t1572 / 0.4e1);
t1085 = t1503 + t1674;
t1497 = t1365 - 0.1e1 / 0.2e1;
t1449 = t1497 * qJ(3,1);
t1086 = (t1578 / 0.2e1 + t1572 / 0.2e1) * t1215 + t1503;
t1458 = t1086 * pkin(2) + t1506;
t1590 = t1107 * t1134;
t1473 = t1215 * t1590;
t1476 = qJ(3,1) * t1524;
t1507 = -t1176 / 0.4e1 - t1179 / 0.4e1;
t1539 = t1319 * t1413;
t1242 = -t1306 * t1365 + t1447 - t1404 / 0.4e1 + t1515;
t1212 = 0.1e1 / ((0.4e1 * t1242 * t1319 - t1417) * t1413 - t1653);
t1584 = t1146 * t1212;
t1128 = (t1572 + t1578) * t1215;
t1587 = t1128 * t1212;
t1606 = t1387 * pkin(2);
t1621 = pkin(1) * t1328;
t1636 = pkin(2) * qJ(3,1);
t1650 = -0.2e1 * qJ(3,1);
t1001 = (0.4e1 * (t1059 * t1521 + t1104 * t1449) * t1539 + (0.4e1 * (t1085 * pkin(2) - t1059 * t1365 + t1104 * t1484 + t1507) * t1624 - 0.3e1 * t1057 * t1594 + t1387 * t1016) * t1621 - (t1016 * t1393 + 0.3e1 * t1057 * t1604) * t1624 - 0.2e1 * t1104 * t1476 - 0.2e1 * t1059 * t1462 - (t1140 + t1091 + 0.2e1 * t1062) * qJ(3,1)) * t1584 + (0.2e1 * (t1068 * t1521 + t1107 * t1449) * t1539 + 0.2e1 * ((-t1068 * t1365 + t1107 * t1484 + t1458) * t1624 - t1068 * t1594 / 0.2e1 + t1036 * t1387 / 0.2e1) * t1621 - (t1036 * t1393 + t1387 * t1597) * t1624 - t1107 * t1476 - t1068 * t1462 + t1037 * t1650) * t1587 + 0.2e1 * (-(t1497 * t1624 - t1606 / 0.2e1 + t1594 / 0.2e1) * t1621 + t1668 * t1624 / 0.2e1 - t1636 + (t1319 - 0.1e1 / 0.2e1) * t1462) * t1473;
t1029 = -pkin(2) * t1134 + t1107 * t1412 + t1092;
t1020 = t1029 - t1146;
t1026 = pkin(2) * t1092 + t1068 * t1370;
t1656 = t1107 * (pkin(2) * (0.1e1 + t1404) + t1411) - t1370 * t1134;
t1005 = (0.4e1 * (t1146 * t1242 * t1624 + t1020 * t1594 / 0.4e1 + t1387 * t1026 / 0.4e1) * t1621 + (t1020 * t1604 - t1026 * t1393) * t1624 - t1597 + (t1254 * t1642 - t1630 * t1636 - t1464) * t1140) * t1584 + (-t1597 + ((t1029 * t1594 + t1387 * t1656) * t1328 + (t1029 * t1604 - t1393 * t1656) * t1325) * pkin(1)) * t1587 + (-qJ(3,1) + ((pkin(2) * t1594 + t1370 * t1387) * t1328 - (-pkin(2) * t1604 + t1370 * t1393) * t1325) * pkin(1)) * t1473;
t1331 = m(3) * qJ(3,1) + mrSges(3,3);
t1050 = 0.2e1 * t1331 * t1590;
t1263 = m(3) * (t1404 + t1412) + qJ(3,1) * t1651 + t1448;
t1315 = -mrSges(2,2) + t1331;
t1386 = sin(qJ(2,1));
t1392 = cos(qJ(2,1));
t1418 = (t1315 * t1386 + t1316 * t1392) * pkin(1);
t1227 = t1263 + 0.2e1 * t1418 + t1686;
t1230 = t1418 + t1263;
t1293 = mrSges(3,1) + (pkin(1) * t1392 + pkin(2)) * m(3);
t1542 = t1315 * t1392;
t1618 = pkin(1) * t1386;
t1627 = m(3) * t1134;
t1011 = t1029 + t1140 + t1146;
t1017 = t1140 + t1037;
t1615 = pkin(2) * t1059;
t1023 = -t1104 * t1404 + t1615;
t1038 = t1062 - t1092;
t1058 = t1080 + t1507;
t1065 = t1609 + t1506;
t1287 = t1594 + t1606;
t1488 = t1290 * t1624;
t1500 = -t1467 / 0.4e1 - t1470 / 0.4e1;
t997 = (-0.4e1 * (t1023 * t1521 + t1058 * t1485) * t1539 - (0.8e1 * ((t1085 * t1404 - t1615 / 0.2e1) * t1365 + t1058 * t1484 + ((-t1578 / 0.8e1 - t1572 / 0.8e1) * t1215 + t1500) * t1404 + t1615 / 0.4e1) * t1624 + t1011 * t1594 + t1017 * t1606) * t1621 - (t1011 * t1604 - t1017 * t1350) * t1624 + 0.4e1 * t1058 * t1476 + 0.2e1 * t1023 * t1462 + (t1059 * t1413 + t1458) * t1650) * t1584 + (-0.2e1 * (t1038 * t1521 + t1065 * t1485) * t1539 - 0.4e1 * ((t1086 * t1404 - t1062 / 0.2e1) * t1365 + t1065 * t1484 + (t1500 - t1674) * t1404 + t1062 / 0.4e1) * t1624 * t1621 + 0.2e1 * t1065 * t1476 + t1038 * t1462 - t1372 * t1597 + (-t1287 * t1621 - t1488) * t1037) * t1587 - 0.2e1 * ((pkin(2) * t1521 + t1449) * t1539 - ((pkin(2) * t1365 + t1399 - t1484) * t1624 + t1287 * t1399) * t1621 + t1488 * t1638 - t1476 / 0.2e1 + t1462 * t1399 + qJ(3,1) * t1633) * t1473;
t1683 = t1001 * t1293 - t1005 * t1227 - t1230 * t997 - 0.2e1 * (-t1146 * t1627 + (t1128 * t1300 + t1146 * t1316 - t1627) * t1128) * t1618 + t1104 * t1128 * t1542 * t1687 + t1050;
t1141 = t1144 ^ 2;
t1682 = t1000 * t1338 - t1003 * t1228 - t1261 * t998 + t1048 + (t1316 * t1382 - t1544) * t1141 * pkin(1);
t1142 = t1145 ^ 2;
t1681 = t1002 * t1338 - t1004 * t1229 - t1262 * t999 + t1049 + (t1316 * t1384 - t1543) * t1142 * pkin(1);
t1143 = t1146 ^ 2;
t1680 = t1001 * t1338 - t1005 * t1230 - t1263 * t997 + t1050 + (t1316 * t1386 - t1542) * t1143 * pkin(1);
t1679 = -t1105 ^ 2 * t1329 + t1003 * t1291 + t1338 * t998 + (-t1141 * t1620 - t1000) * m(3);
t1678 = -t1106 ^ 2 * t1330 + t1004 * t1292 + t1338 * t999 + (-t1142 * t1619 - t1002) * m(3);
t1677 = -t1107 ^ 2 * t1331 + t1005 * t1293 + t1338 * t997 + (-t1143 * t1618 - t1001) * m(3);
t1667 = t1213 * t1685;
t1666 = t1213 * t1682;
t1665 = t1213 * t1679;
t1664 = t1214 * t1684;
t1663 = t1214 * t1681;
t1662 = t1214 * t1678;
t1661 = t1215 * t1683;
t1660 = t1215 * t1680;
t1659 = t1215 * t1677;
t1366 = t1394 ^ 2;
t1557 = t1213 * t1366;
t1554 = t1214 * t1366;
t1551 = t1215 * t1366;
t1401 = mrSges(4,1);
t1400 = mrSges(4,2);
t1149 = (t1206 * t1269 - t1209 * t1266) * t1215;
t1148 = (t1205 * t1268 - t1208 * t1265) * t1214;
t1147 = (t1204 * t1267 - t1207 * t1264) * t1213;
t1137 = (t1200 * t1269 - t1203 * t1266) * t1215;
t1136 = (t1199 * t1268 - t1202 * t1265) * t1214;
t1135 = (t1198 * t1267 - t1201 * t1264) * t1213;
t1131 = (-t1194 * t1266 + t1197 * t1269) * t1215;
t1130 = (-t1193 * t1265 + t1196 * t1268) * t1214;
t1129 = (-t1192 * t1264 + t1195 * t1267) * t1213;
t1125 = (m(3) * t1203 - t1194 * t1338 - t1209 * t1293) * t1215;
t1124 = (m(3) * t1202 - t1193 * t1338 - t1208 * t1292) * t1214;
t1123 = (m(3) * t1201 - t1192 * t1338 - t1207 * t1291) * t1213;
t1122 = (m(3) * t1200 - t1197 * t1338 - t1206 * t1293) * t1215;
t1121 = (m(3) * t1199 - t1196 * t1338 - t1205 * t1292) * t1214;
t1120 = (m(3) * t1198 - t1195 * t1338 - t1204 * t1291) * t1213;
t1119 = (t1194 * t1263 - t1203 * t1338 + t1209 * t1230) * t1215;
t1118 = (t1193 * t1262 - t1202 * t1338 + t1208 * t1229) * t1214;
t1117 = (t1192 * t1261 - t1201 * t1338 + t1207 * t1228) * t1213;
t1116 = (t1197 * t1263 - t1200 * t1338 + t1206 * t1230) * t1215;
t1115 = (t1196 * t1262 - t1199 * t1338 + t1205 * t1229) * t1214;
t1114 = (t1195 * t1261 - t1198 * t1338 + t1204 * t1228) * t1213;
t1113 = (t1194 * t1230 - t1203 * t1293 + t1209 * t1227) * t1215;
t1112 = (t1193 * t1229 - t1202 * t1292 + t1208 * t1226) * t1214;
t1111 = (t1192 * t1228 - t1201 * t1291 + t1207 * t1225) * t1213;
t1110 = (t1197 * t1230 - t1200 * t1293 + t1206 * t1227) * t1215;
t1109 = (t1196 * t1229 - t1199 * t1292 + t1205 * t1226) * t1214;
t1108 = (t1195 * t1228 - t1198 * t1291 + t1204 * t1225) * t1213;
t1071 = m(3) * t1137 - t1131 * t1338 - t1149 * t1293;
t1070 = m(3) * t1136 - t1130 * t1338 - t1148 * t1292;
t1069 = m(3) * t1135 - t1129 * t1338 - t1147 * t1291;
t1047 = t1131 * t1263 - t1137 * t1338 + t1149 * t1230;
t1046 = t1130 * t1262 - t1136 * t1338 + t1148 * t1229;
t1045 = t1129 * t1261 - t1135 * t1338 + t1147 * t1228;
t1044 = t1131 * t1230 - t1137 * t1293 + t1149 * t1227;
t1043 = t1130 * t1229 - t1136 * t1292 + t1148 * t1226;
t1042 = t1129 * t1228 - t1135 * t1291 + t1147 * t1225;
t1 = [(-(t1113 * t1209 + t1119 * t1194 + t1125 * t1203) * t1269 - (t1113 * t1206 + t1119 * t1197 + t1125 * t1200) * t1266) * t1551 + (-(t1112 * t1208 + t1118 * t1193 + t1124 * t1202) * t1268 - (t1112 * t1205 + t1118 * t1196 + t1124 * t1199) * t1265) * t1554 + (-(t1111 * t1207 + t1117 * t1192 + t1123 * t1201) * t1267 - (t1111 * t1204 + t1117 * t1195 + t1123 * t1198) * t1264) * t1557 + t1366 * (t1351 * t1400 - t1352 * t1401) + t1192 * t1666 + t1193 * t1663 + t1194 * t1660 + t1201 * t1665 + t1202 * t1662 + t1203 * t1659 + t1207 * t1667 + t1208 * t1664 + t1209 * t1661; (-(t1110 * t1209 + t1116 * t1194 + t1122 * t1203) * t1269 - (t1110 * t1206 + t1116 * t1197 + t1122 * t1200) * t1266) * t1551 + (-(t1109 * t1208 + t1115 * t1193 + t1121 * t1202) * t1268 - (t1109 * t1205 + t1115 * t1196 + t1121 * t1199) * t1265) * t1554 + (-(t1108 * t1207 + t1114 * t1192 + t1120 * t1201) * t1267 - (t1108 * t1204 + t1114 * t1195 + t1120 * t1198) * t1264) * t1557 - t1366 * (t1351 * t1401 + t1352 * t1400) + t1195 * t1666 + t1196 * t1663 + t1197 * t1660 + t1198 * t1665 + t1199 * t1662 + t1200 * t1659 + t1204 * t1667 + t1205 * t1664 + t1206 * t1661; (-(t1044 * t1209 + t1047 * t1194 + t1071 * t1203) * t1269 - (t1044 * t1206 + t1047 * t1197 + t1071 * t1200) * t1266) * t1551 + (-(t1043 * t1208 + t1046 * t1193 + t1070 * t1202) * t1268 - (t1043 * t1205 + t1046 * t1196 + t1070 * t1199) * t1265) * t1554 + (-(t1042 * t1207 + t1045 * t1192 + t1069 * t1201) * t1267 - (t1042 * t1204 + t1045 * t1195 + t1069 * t1198) * t1264) * t1557 + t1683 * t1149 + t1684 * t1148 + t1685 * t1147 + t1677 * t1137 + t1678 * t1136 + t1679 * t1135 + t1680 * t1131 + t1681 * t1130 + t1682 * t1129;];
taucX  = t1;
