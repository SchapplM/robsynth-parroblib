% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRP1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRP1A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 15:31
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRP1A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(4,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRP1A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRP1A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRP1A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRP1A0_gravload_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRP1A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRP1A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRP1A0_gravload_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 15:31:26
% EndTime: 2019-05-03 15:31:42
% DurationCPUTime: 18.06s
% Computational Cost: add. (9423->660), mult. (20474->1002), div. (117->6), fcn. (7609->20), ass. (0->449)
t7094 = MDP(6) - MDP(8);
t7090 = MDP(5) + MDP(7);
t6930 = (qJ(3,3) ^ 2);
t6940 = (pkin(1) ^ 2);
t6878 = 2 * t6930 + t6940;
t6925 = cos(qJ(1,3));
t6907 = t6925 ^ 2;
t7011 = t6907 * t6940;
t7089 = t6878 - t7011;
t6931 = (qJ(3,2) ^ 2);
t6879 = 2 * t6931 + t6940;
t6926 = cos(qJ(1,2));
t6908 = t6926 ^ 2;
t7010 = t6908 * t6940;
t7088 = t6879 - t7010;
t6932 = (qJ(3,1) ^ 2);
t6880 = 2 * t6932 + t6940;
t6927 = cos(qJ(1,1));
t6909 = t6927 ^ 2;
t7009 = t6909 * t6940;
t7087 = t6880 - t7009;
t6939 = (pkin(2) ^ 2);
t6875 = -t6930 + t6939;
t6860 = 1 + t6875;
t6910 = qJ(1,3) + qJ(2,3);
t6863 = sin(t6910);
t6866 = cos(t6910);
t6914 = 2 + t6940;
t6922 = sin(qJ(1,3));
t7008 = t6922 * t6925;
t7057 = 2 * pkin(1);
t7058 = qJ(3,3) * t6922;
t7060 = qJ(3,3) * t6863;
t7074 = pkin(2) * qJ(3,3);
t7086 = -(-(pkin(1) * (t6860 * t7008 + (0.2e1 * t6907 - 0.1e1) * t7074) * t6863 + t7058) * t6866 + t6925 * t7060) * t7057 - (t6930 * t6914);
t6876 = -t6931 + t6939;
t6861 = 1 + t6876;
t6911 = qJ(1,2) + qJ(2,2);
t6864 = sin(t6911);
t6867 = cos(t6911);
t6923 = sin(qJ(1,2));
t7007 = t6923 * t6926;
t7061 = qJ(3,2) * t6923;
t7063 = qJ(3,2) * t6864;
t7075 = pkin(2) * qJ(3,2);
t7085 = -(-(pkin(1) * (t6861 * t7007 + (0.2e1 * t6908 - 0.1e1) * t7075) * t6864 + t7061) * t6867 + t6926 * t7063) * t7057 - (t6931 * t6914);
t6877 = -t6932 + t6939;
t6862 = 1 + t6877;
t6912 = qJ(1,1) + qJ(2,1);
t6865 = sin(t6912);
t6868 = cos(t6912);
t6924 = sin(qJ(1,1));
t7006 = t6924 * t6927;
t7064 = qJ(3,1) * t6924;
t7066 = qJ(3,1) * t6865;
t7076 = pkin(2) * qJ(3,1);
t7084 = -(-(pkin(1) * (t6862 * t7006 + (0.2e1 * t6909 - 0.1e1) * t7076) * t6865 + t7064) * t6868 + t6927 * t7066) * t7057 - (t6932 * t6914);
t6919 = legFrame(3,3);
t6869 = sin(t6919);
t6833 = t6869 * qJ(3,3);
t6827 = pkin(2) * t6833;
t7083 = -0.2e1 * t6827;
t6920 = legFrame(2,3);
t6870 = sin(t6920);
t6834 = t6870 * qJ(3,2);
t6828 = pkin(2) * t6834;
t7082 = -0.2e1 * t6828;
t6921 = legFrame(1,3);
t6871 = sin(t6921);
t6835 = t6871 * qJ(3,1);
t6829 = pkin(2) * t6835;
t7081 = -0.2e1 * t6829;
t7080 = -0.2e1 * t6922;
t7079 = -0.2e1 * t6923;
t7078 = -0.2e1 * t6924;
t7077 = pkin(2) * g(2);
t6872 = cos(t6919);
t7073 = pkin(2) * t6872;
t6873 = cos(t6920);
t7072 = pkin(2) * t6873;
t6874 = cos(t6921);
t7071 = pkin(2) * t6874;
t7070 = pkin(2) * t6925;
t7069 = pkin(2) * t6926;
t7068 = pkin(2) * t6927;
t7067 = pkin(2) * t6940;
t6843 = t6869 * pkin(2);
t6845 = t6870 * pkin(2);
t6847 = t6871 * pkin(2);
t7065 = qJ(3,1) * t6874;
t6935 = koppelP(1,2);
t6893 = qJ(3,1) * t6935;
t6938 = koppelP(1,1);
t6894 = qJ(3,1) * t6938;
t7062 = qJ(3,2) * t6873;
t6934 = koppelP(2,2);
t6890 = qJ(3,2) * t6934;
t6937 = koppelP(2,1);
t6891 = qJ(3,2) * t6937;
t7059 = qJ(3,3) * t6872;
t6933 = koppelP(3,2);
t6887 = qJ(3,3) * t6933;
t6936 = koppelP(3,1);
t6888 = qJ(3,3) * t6936;
t6987 = pkin(2) * t6888;
t6852 = 0.2e1 * t6987;
t6913 = 1 + t6939;
t6741 = t6852 + (t6913 - t6930) * t6933;
t6989 = pkin(2) * t6887;
t6849 = -0.2e1 * t6989;
t6886 = t6930 * t6936;
t6742 = t6913 * t6936 + t6849 - t6886;
t6929 = xP(3);
t6884 = sin(t6929);
t6885 = cos(t6929);
t6669 = t6741 * t6885 + t6742 * t6884;
t7014 = t6884 * t6741;
t6670 = t6742 * t6885 - t7014;
t6636 = t6669 * t6872 - t6670 * t6869;
t6747 = t6884 * t6936 + t6885 * t6933;
t6750 = -t6884 * t6933 + t6885 * t6936;
t6675 = t6747 * t6872 - t6750 * t6869;
t6678 = t6747 * t6869 + t6750 * t6872;
t7002 = t6936 * t6939;
t6788 = t6936 - t6989 + t7002;
t6895 = t6939 * t6933;
t6789 = t6895 + t6933 + t6987;
t6848 = 0.2e1 * t6989;
t6857 = t6866 ^ 2;
t6964 = -t6886 + t7002;
t7023 = t6863 * t6866;
t7035 = t6669 * t6869;
t6901 = pkin(2) * t6936;
t6804 = -t6887 + t6901;
t6898 = pkin(2) * t6933;
t6807 = t6888 + t6898;
t6721 = t6804 * t6885 - t6807 * t6884;
t6722 = t6804 * t6884 + t6807 * t6885;
t6646 = t6721 * t6872 + t6722 * t6869;
t7038 = t6646 * t6922;
t6615 = (-t6675 * t6866 + t6678 * t6863) * qJ(3,3) + (((((t6848 - t6936 - t6964) * t6885 + t7014) * t6872 - t7035) * t6925 + t6636 * t6922) * t6857 - (t6636 * t6925 + (t6670 * t6872 + t7035) * t6922) * t7023 - ((-t6788 * t6885 + t6789 * t6884) * t6872 - (t6788 * t6884 + t6789 * t6885) * t6869) * t6925 - qJ(3,3) * t7038) * pkin(1);
t6917 = t6939 / 0.2e1;
t6985 = t6917 - t6930 / 0.2e1;
t6830 = 0.1e1 / 0.2e1 + t6985;
t6965 = t7008 * t7074;
t6941 = -t6860 * t6907 + 0.2e1 * t6965;
t6995 = 0.1e1 / 0.4e1 + t6939 / 0.4e1;
t6630 = 0.1e1 / ((0.4e1 * (-t6830 * t6907 + t6965 - t6930 / 0.4e1 + t6995) * t6857 - t6941) * t6940 - t7086);
t7056 = t6615 * t6630;
t6986 = pkin(2) * t6891;
t6853 = 0.2e1 * t6986;
t6743 = t6853 + (t6913 - t6931) * t6934;
t6988 = pkin(2) * t6890;
t6851 = -0.2e1 * t6988;
t6889 = t6931 * t6937;
t6744 = t6913 * t6937 + t6851 - t6889;
t6671 = t6743 * t6885 + t6744 * t6884;
t7013 = t6884 * t6743;
t6672 = t6744 * t6885 - t7013;
t6637 = t6671 * t6873 - t6672 * t6870;
t6748 = t6884 * t6937 + t6885 * t6934;
t6751 = -t6884 * t6934 + t6885 * t6937;
t6676 = t6748 * t6873 - t6751 * t6870;
t6679 = t6748 * t6870 + t6751 * t6873;
t7000 = t6937 * t6939;
t6790 = t6937 - t6988 + t7000;
t6896 = t6939 * t6934;
t6791 = t6896 + t6934 + t6986;
t6850 = 0.2e1 * t6988;
t6858 = t6867 ^ 2;
t6963 = -t6889 + t7000;
t7021 = t6864 * t6867;
t7034 = t6671 * t6870;
t6902 = pkin(2) * t6937;
t6810 = -t6890 + t6902;
t6899 = pkin(2) * t6934;
t6813 = t6891 + t6899;
t6725 = t6810 * t6885 - t6813 * t6884;
t6726 = t6810 * t6884 + t6813 * t6885;
t6650 = t6725 * t6873 + t6726 * t6870;
t7037 = t6650 * t6923;
t6616 = (-t6676 * t6867 + t6679 * t6864) * qJ(3,2) + (((((t6850 - t6937 - t6963) * t6885 + t7013) * t6873 - t7034) * t6926 + t6637 * t6923) * t6858 - (t6637 * t6926 + (t6672 * t6873 + t7034) * t6923) * t7021 - ((-t6790 * t6885 + t6791 * t6884) * t6873 - (t6790 * t6884 + t6791 * t6885) * t6870) * t6926 - qJ(3,2) * t7037) * pkin(1);
t6984 = t6917 - t6931 / 0.2e1;
t6831 = 0.1e1 / 0.2e1 + t6984;
t6966 = t7007 * t7075;
t6942 = -t6861 * t6908 + 0.2e1 * t6966;
t6631 = 0.1e1 / ((0.4e1 * (-t6831 * t6908 + t6966 - t6931 / 0.4e1 + t6995) * t6858 - t6942) * t6940 - t7085);
t7055 = t6616 * t6631;
t6992 = pkin(2) * t6894;
t6856 = 0.2e1 * t6992;
t6745 = t6856 + (t6913 - t6932) * t6935;
t6993 = pkin(2) * t6893;
t6855 = -0.2e1 * t6993;
t6892 = t6932 * t6938;
t6746 = t6913 * t6938 + t6855 - t6892;
t6673 = t6745 * t6885 + t6746 * t6884;
t7012 = t6884 * t6745;
t6674 = t6746 * t6885 - t7012;
t6638 = t6673 * t6874 - t6674 * t6871;
t6749 = t6884 * t6938 + t6885 * t6935;
t6752 = -t6884 * t6935 + t6885 * t6938;
t6677 = t6749 * t6874 - t6752 * t6871;
t6680 = t6749 * t6871 + t6752 * t6874;
t6998 = t6938 * t6939;
t6792 = t6938 - t6993 + t6998;
t6897 = t6939 * t6935;
t6793 = t6897 + t6935 + t6992;
t6854 = 0.2e1 * t6993;
t6859 = t6868 ^ 2;
t6962 = -t6892 + t6998;
t7019 = t6865 * t6868;
t7033 = t6673 * t6871;
t6903 = pkin(2) * t6938;
t6816 = -t6893 + t6903;
t6900 = pkin(2) * t6935;
t6819 = t6894 + t6900;
t6729 = t6816 * t6885 - t6819 * t6884;
t6730 = t6816 * t6884 + t6819 * t6885;
t6654 = t6729 * t6874 + t6730 * t6871;
t7036 = t6654 * t6924;
t6617 = (-t6677 * t6868 + t6680 * t6865) * qJ(3,1) + (((((t6854 - t6938 - t6962) * t6885 + t7012) * t6874 - t7033) * t6927 + t6638 * t6924) * t6859 - (t6638 * t6927 + (t6674 * t6874 + t7033) * t6924) * t7019 - ((-t6792 * t6885 + t6793 * t6884) * t6874 - (t6792 * t6884 + t6793 * t6885) * t6871) * t6927 - qJ(3,1) * t7036) * pkin(1);
t6983 = t6917 - t6932 / 0.2e1;
t6832 = 0.1e1 / 0.2e1 + t6983;
t6967 = t7006 * t7076;
t6943 = -t6862 * t6909 + 0.2e1 * t6967;
t6632 = 0.1e1 / ((0.4e1 * (-t6832 * t6909 + t6967 - t6932 / 0.4e1 + t6995) * t6859 - t6943) * t6940 - t7084);
t7054 = t6617 * t6632;
t6996 = -0.1e1 / 0.2e1 - t6939 / 0.2e1;
t6633 = 0.1e1 / ((0.2e1 * (t6930 / 0.2e1 - t6941 + t6996) * t6857 + t6941) * t6940 + t7086);
t6928 = pkin(2) * g(1);
t6836 = -g(2) * qJ(3,3) + t6928;
t6837 = g(1) * qJ(3,3) + t7077;
t6657 = (t6836 * t6869 - t6837 * t6872) * t6866 + (t6836 * t6872 + t6837 * t6869) * t6863;
t6639 = pkin(1) * ((g(1) * t6922 - g(2) * t6925) * t6872 + t6869 * (g(1) * t6925 + g(2) * t6922)) + t6657;
t7053 = t6633 * t6639;
t7052 = t6633 * t6657;
t6777 = -t6869 * g(1) + g(2) * t6872;
t6780 = g(1) * t6872 + g(2) * t6869;
t6684 = t6777 * t6866 - t6780 * t6863;
t7051 = t6633 * t6684;
t6705 = -t6777 * t6925 + t6780 * t6922;
t7050 = t6633 * t6705;
t6706 = t6777 * t6922 + t6780 * t6925;
t7049 = t6633 * t6706;
t6634 = 0.1e1 / ((0.2e1 * (t6931 / 0.2e1 - t6942 + t6996) * t6858 + t6942) * t6940 + t7085);
t6838 = -g(2) * qJ(3,2) + t6928;
t6839 = g(1) * qJ(3,2) + t7077;
t6658 = (t6838 * t6870 - t6839 * t6873) * t6867 + (t6838 * t6873 + t6839 * t6870) * t6864;
t6640 = pkin(1) * ((g(1) * t6923 - g(2) * t6926) * t6873 + t6870 * (g(1) * t6926 + g(2) * t6923)) + t6658;
t7048 = t6634 * t6640;
t7047 = t6634 * t6658;
t6778 = -t6870 * g(1) + g(2) * t6873;
t6781 = g(1) * t6873 + g(2) * t6870;
t6688 = t6778 * t6867 - t6781 * t6864;
t7046 = t6634 * t6688;
t6707 = -t6778 * t6926 + t6781 * t6923;
t7045 = t6634 * t6707;
t6708 = t6778 * t6923 + t6781 * t6926;
t7044 = t6634 * t6708;
t6635 = 0.1e1 / ((0.2e1 * (t6932 / 0.2e1 - t6943 + t6996) * t6859 + t6943) * t6940 + t7084);
t6840 = -g(2) * qJ(3,1) + t6928;
t6841 = g(1) * qJ(3,1) + t7077;
t6659 = (t6840 * t6871 - t6841 * t6874) * t6868 + (t6840 * t6874 + t6841 * t6871) * t6865;
t6641 = pkin(1) * ((g(1) * t6924 - g(2) * t6927) * t6874 + t6871 * (g(1) * t6927 + g(2) * t6924)) + t6659;
t7043 = t6635 * t6641;
t7042 = t6635 * t6659;
t6779 = -t6871 * g(1) + g(2) * t6874;
t6782 = g(1) * t6874 + g(2) * t6871;
t6692 = t6779 * t6868 - t6782 * t6865;
t7041 = t6635 * t6692;
t6709 = -t6779 * t6927 + t6782 * t6924;
t7040 = t6635 * t6709;
t6710 = t6779 * t6924 + t6782 * t6927;
t7039 = t6635 * t6710;
t6753 = t6833 + t7073;
t7032 = t6753 * t6922;
t6757 = t6834 + t7072;
t7031 = t6757 * t6923;
t6761 = t6835 + t7071;
t7030 = t6761 * t6924;
t7029 = t6833 * t6866;
t7028 = t6834 * t6867;
t7027 = t6835 * t6868;
t7026 = t6860 * t6872;
t7025 = t6861 * t6873;
t7024 = t6862 * t6874;
t6915 = 1 + t6940;
t7022 = t6863 * t6915;
t7020 = t6864 * t6915;
t7018 = t6865 * t6915;
t7017 = t6866 * t6872;
t7016 = t6867 * t6873;
t7015 = t6868 * t6874;
t7001 = t6936 * t6940;
t6999 = t6937 * t6940;
t6997 = t6938 * t6940;
t6994 = pkin(2) * t7065;
t6991 = pkin(2) * t7062;
t6990 = pkin(2) * t7059;
t6982 = t6863 * t7059;
t6981 = t6864 * t7062;
t6980 = t6865 * t7065;
t6979 = t6940 * t7008;
t6978 = t6940 * t7007;
t6977 = t6940 * t7006;
t6771 = t6849 + t6964;
t6772 = -t6930 * t6933 + t6852 + t6895;
t6693 = t6771 * t6885 - t6772 * t6884;
t6694 = t6771 * t6884 + t6772 * t6885;
t6642 = -t6693 * t6869 + t6694 * t6872;
t6803 = t6887 + t6901;
t6808 = -t6888 + t6898;
t6720 = t6803 * t6885 - t6808 * t6884;
t6723 = t6803 * t6884 + t6808 * t6885;
t6645 = t6720 * t6872 + t6723 * t6869;
t6648 = -t6720 * t6869 + t6723 * t6872;
t6794 = t7058 - t7070;
t6797 = pkin(2) * t7001 - t6887;
t6798 = t6933 * t7067 + t6888;
t6955 = t6693 * t6872 + t6869 * t6694;
t6612 = ((t6797 * t6885 - t6798 * t6884) * t6872 + (t6797 * t6884 + t6798 * t6885) * t6869) * t6866 + qJ(3,3) * t6678 * t7022 + ((-t6645 * t6907 - t6648 * t7008) * t6866 + (-t6645 * t7008 + t6648 * t6907) * t6863) * t6940 + (-(t6922 * t6642 - t6925 * t6955) * t6857 + (t6642 * t6925 + t6922 * t6955) * t7023 + t6646 * t6794) * pkin(1);
t6976 = t6630 * (t6612 + t6615);
t6773 = t6851 + t6963;
t6774 = -t6931 * t6934 + t6853 + t6896;
t6695 = t6773 * t6885 - t6774 * t6884;
t6696 = t6773 * t6884 + t6774 * t6885;
t6643 = -t6695 * t6870 + t6696 * t6873;
t6809 = t6890 + t6902;
t6814 = -t6891 + t6899;
t6724 = t6809 * t6885 - t6814 * t6884;
t6727 = t6809 * t6884 + t6814 * t6885;
t6649 = t6724 * t6873 + t6727 * t6870;
t6652 = -t6724 * t6870 + t6727 * t6873;
t6795 = t7061 - t7069;
t6799 = pkin(2) * t6999 - t6890;
t6800 = t6934 * t7067 + t6891;
t6954 = t6695 * t6873 + t6870 * t6696;
t6613 = ((t6799 * t6885 - t6800 * t6884) * t6873 + (t6799 * t6884 + t6800 * t6885) * t6870) * t6867 + qJ(3,2) * t6679 * t7020 + ((-t6649 * t6908 - t6652 * t7007) * t6867 + (-t6649 * t7007 + t6652 * t6908) * t6864) * t6940 + (-(t6923 * t6643 - t6926 * t6954) * t6858 + (t6643 * t6926 + t6923 * t6954) * t7021 + t6650 * t6795) * pkin(1);
t6975 = t6631 * (t6613 + t6616);
t6775 = t6855 + t6962;
t6776 = -t6932 * t6935 + t6856 + t6897;
t6697 = t6775 * t6885 - t6776 * t6884;
t6698 = t6775 * t6884 + t6776 * t6885;
t6644 = -t6697 * t6871 + t6698 * t6874;
t6815 = t6893 + t6903;
t6820 = -t6894 + t6900;
t6728 = t6815 * t6885 - t6820 * t6884;
t6731 = t6815 * t6884 + t6820 * t6885;
t6653 = t6728 * t6874 + t6731 * t6871;
t6656 = -t6728 * t6871 + t6731 * t6874;
t6796 = t7064 - t7068;
t6801 = pkin(2) * t6997 - t6893;
t6802 = t6935 * t7067 + t6894;
t6953 = t6697 * t6874 + t6871 * t6698;
t6614 = ((t6801 * t6885 - t6802 * t6884) * t6874 + (t6801 * t6884 + t6802 * t6885) * t6871) * t6868 + qJ(3,1) * t6680 * t7018 + ((-t6653 * t6909 - t6656 * t7006) * t6868 + (-t6653 * t7006 + t6656 * t6909) * t6865) * t6940 + (-(t6924 * t6644 - t6927 * t6953) * t6859 + (t6644 * t6927 + t6924 * t6953) * t7019 + t6654 * t6796) * pkin(1);
t6974 = t6632 * (t6614 + t6617);
t6824 = -0.2e1 * t6990;
t6738 = t6869 * t6875 + t6824;
t6660 = t6738 * t6925 + (t6872 * t6985 + t6827) * t7080;
t6821 = 0.2e1 * t6827;
t6666 = (t6872 * t6875 + t6821) * t6925 + t6738 * t6922;
t6756 = t6843 - t7059;
t6754 = t6833 - t7073;
t6755 = t6843 + t7059;
t6948 = -t6754 * t7008 + t6755 * t6907;
t6949 = -t6754 * t6907 - t6755 * t7008;
t6618 = (t6869 * t7022 - t7017) * qJ(3,3) + (t6660 * t6857 + t6666 * t7023 + t6756 * t6794) * pkin(1) + ((-t6948 + t6843) * t6866 + t6949 * t6863) * t6940;
t6735 = t6860 * t6869 + t6824;
t6663 = (t6821 + t7026) * t6925 + t6922 * t6735;
t6732 = t6735 * t6925;
t6627 = (t6863 * t6869 - t7017) * qJ(3,3) + (-t6732 * t6857 - t6663 * t7023 + (t6869 * t6939 + t6869 - t6990) * t6925 + (-(t7083 - t7026) * t6857 - qJ(3,3) * t6756) * t6922) * pkin(1);
t6973 = t6633 * (t6618 + t6627);
t6621 = -t6915 * t6982 - t7029 + (t6660 * t7023 - t6666 * t6857 - t6753 * t6794) * pkin(1) + ((t6949 - t7073) * t6866 + t6948 * t6863) * t6940;
t6624 = -t6982 - t7029 + (t6663 * t6857 - (t6732 + (t6830 * t6872 + t6827) * t7080) * t7023 - (t6872 * t6939 + t6827 + t6872) * t6925 + qJ(3,3) * t7032) * pkin(1);
t6972 = t6633 * (t6621 + t6624);
t6825 = -0.2e1 * t6991;
t6739 = t6870 * t6876 + t6825;
t6661 = t6739 * t6926 + (t6873 * t6984 + t6828) * t7079;
t6822 = 0.2e1 * t6828;
t6667 = (t6873 * t6876 + t6822) * t6926 + t6739 * t6923;
t6760 = t6845 - t7062;
t6758 = t6834 - t7072;
t6759 = t6845 + t7062;
t6946 = -t6758 * t7007 + t6759 * t6908;
t6947 = -t6758 * t6908 - t6759 * t7007;
t6619 = (t6870 * t7020 - t7016) * qJ(3,2) + (t6661 * t6858 + t6667 * t7021 + t6760 * t6795) * pkin(1) + ((-t6946 + t6845) * t6867 + t6947 * t6864) * t6940;
t6736 = t6861 * t6870 + t6825;
t6664 = (t6822 + t7025) * t6926 + t6923 * t6736;
t6733 = t6736 * t6926;
t6628 = (t6864 * t6870 - t7016) * qJ(3,2) + (-t6733 * t6858 - t6664 * t7021 + (t6870 * t6939 + t6870 - t6991) * t6926 + (-(t7082 - t7025) * t6858 - qJ(3,2) * t6760) * t6923) * pkin(1);
t6971 = t6634 * (t6619 + t6628);
t6622 = -t6915 * t6981 - t7028 + (t6661 * t7021 - t6667 * t6858 - t6757 * t6795) * pkin(1) + ((t6947 - t7072) * t6867 + t6946 * t6864) * t6940;
t6625 = -t6981 - t7028 + (t6664 * t6858 - (t6733 + (t6831 * t6873 + t6828) * t7079) * t7021 - (t6873 * t6939 + t6828 + t6873) * t6926 + qJ(3,2) * t7031) * pkin(1);
t6970 = t6634 * (t6622 + t6625);
t6826 = -0.2e1 * t6994;
t6740 = t6871 * t6877 + t6826;
t6662 = t6740 * t6927 + (t6874 * t6983 + t6829) * t7078;
t6823 = 0.2e1 * t6829;
t6668 = (t6874 * t6877 + t6823) * t6927 + t6740 * t6924;
t6764 = t6847 - t7065;
t6762 = t6835 - t7071;
t6763 = t6847 + t7065;
t6944 = -t6762 * t7006 + t6763 * t6909;
t6945 = -t6762 * t6909 - t6763 * t7006;
t6620 = (t6871 * t7018 - t7015) * qJ(3,1) + (t6662 * t6859 + t6668 * t7019 + t6764 * t6796) * pkin(1) + ((-t6944 + t6847) * t6868 + t6945 * t6865) * t6940;
t6737 = t6862 * t6871 + t6826;
t6665 = (t6823 + t7024) * t6927 + t6924 * t6737;
t6734 = t6737 * t6927;
t6629 = (t6865 * t6871 - t7015) * qJ(3,1) + (-t6734 * t6859 - t6665 * t7019 + (t6871 * t6939 + t6871 - t6994) * t6927 + (-(t7081 - t7024) * t6859 - qJ(3,1) * t6764) * t6924) * pkin(1);
t6969 = t6635 * (t6620 + t6629);
t6623 = -t6915 * t6980 - t7027 + (t6662 * t7019 - t6668 * t6859 - t6761 * t6796) * pkin(1) + ((t6945 - t7071) * t6868 + t6944 * t6865) * t6940;
t6626 = -t6980 - t7027 + (t6665 * t6859 - (t6734 + (t6832 * t6874 + t6829) * t7078) * t7019 - (t6874 * t6939 + t6829 + t6874) * t6927 + qJ(3,1) * t7030) * pkin(1);
t6968 = t6635 * (t6623 + t6626);
t6961 = -(2 * t6930) - t7011;
t6960 = -(2 * t6931) - t7010;
t6959 = -(2 * t6932) - t7009;
t6958 = t6872 * t6979;
t6957 = t6873 * t6978;
t6956 = t6874 * t6977;
t6683 = t6777 * t6863 + t6780 * t6866;
t6687 = t6778 * t6864 + t6781 * t6867;
t6691 = t6779 * t6865 + t6782 * t6868;
t6818 = 0.2e1 * t6894 + t6900;
t6817 = -0.2e1 * t6893 + t6903;
t6812 = 0.2e1 * t6891 + t6899;
t6811 = -0.2e1 * t6890 + t6902;
t6806 = 0.2e1 * t6888 + t6898;
t6805 = -0.2e1 * t6887 + t6901;
t6787 = t6871 * t6977;
t6786 = t6870 * t6978;
t6785 = t6869 * t6979;
t6784 = g(1) * t6885 + g(2) * t6884;
t6783 = g(1) * t6884 - g(2) * t6885;
t6770 = t6880 * t6935 - 0.2e1 * t6992;
t6769 = t6854 + 0.2e1 * t6892 + t6997;
t6768 = t6879 * t6934 - 0.2e1 * t6986;
t6767 = t6850 + 0.2e1 * t6889 + t6999;
t6766 = t6878 * t6933 - 0.2e1 * t6987;
t6765 = t6848 + 0.2e1 * t6886 + t7001;
t6704 = t6764 * t6927 - t7030;
t6703 = t6761 * t6927 + t6764 * t6924;
t6702 = t6760 * t6926 - t7031;
t6701 = t6757 * t6926 + t6760 * t6923;
t6700 = t6756 * t6925 - t7032;
t6699 = t6753 * t6925 + t6756 * t6922;
t6655 = -t6729 * t6871 + t6730 * t6874;
t6651 = -t6725 * t6870 + t6726 * t6873;
t6647 = -t6721 * t6869 + t6722 * t6872;
t1 = [(t6627 * t7050 + t6628 * t7045 + t6629 * t7040) * MDP(2) + (t6627 * t7049 + t6628 * t7044 + t6629 * t7039) * MDP(3) + (t6629 * t7043 + t6620 * t7042 + ((-t6871 * t7087 + t6826 + t6956) * t6868 + (t6874 * t6959 + t6787 + t6823) * t6865 + (-t6704 * t6859 - t6703 * t7019 + (t6847 - 0.2e1 * t7065) * t6927 + t6924 * t6835) * pkin(1)) * t7041 + t6628 * t7048 + t6619 * t7047 + ((-t6870 * t7088 + t6825 + t6957) * t6867 + (t6873 * t6960 + t6786 + t6822) * t6864 + (-t6702 * t6858 - t6701 * t7021 + (t6845 - 0.2e1 * t7062) * t6926 + t6923 * t6834) * pkin(1)) * t7046 + t6627 * t7053 + t6618 * t7052 + ((-t6869 * t7089 + t6824 + t6958) * t6866 + (t6872 * t6961 + t6785 + t6821) * t6863 + (-t6700 * t6857 - t6699 * t7023 + (t6843 - 0.2e1 * t7059) * t6925 + t6922 * t6833) * pkin(1)) * t7051) * MDP(9) + (-t6783 * t6884 - t6784 * t6885) * MDP(13) + t7090 * (-t6684 * t6973 - t6688 * t6971 - t6692 * t6969) + t7094 * (t6683 * t6973 + t6687 * t6971 + t6691 * t6969); (t6624 * t7050 + t6625 * t7045 + t6626 * t7040) * MDP(2) + (t6624 * t7049 + t6625 * t7044 + t6626 * t7039) * MDP(3) + (t6626 * t7043 + t6623 * t7042 + ((t6874 * t7087 + t6787 + t7081) * t6868 + (t6871 * t6959 + t6826 - t6956) * t6865 + (-t6704 * t7019 + t6703 * t6859 - 0.2e1 * t6835 * t6927 + (-t7064 - t7068) * t6874) * pkin(1)) * t7041 + t6625 * t7048 + t6622 * t7047 + ((t6873 * t7088 + t6786 + t7082) * t6867 + (t6870 * t6960 + t6825 - t6957) * t6864 + (-t6702 * t7021 + t6701 * t6858 - 0.2e1 * t6834 * t6926 + (-t7061 - t7069) * t6873) * pkin(1)) * t7046 + t6624 * t7053 + t6621 * t7052 + ((t6872 * t7089 + t6785 + t7083) * t6866 + (t6869 * t6961 + t6824 - t6958) * t6863 + (-t6700 * t7023 + t6699 * t6857 - 0.2e1 * t6833 * t6925 + (-t7058 - t7070) * t6872) * pkin(1)) * t7051) * MDP(9) + (t6783 * t6885 - t6784 * t6884) * MDP(13) + t7090 * (-t6684 * t6972 - t6688 * t6970 - t6692 * t6968) + t7094 * (t6683 * t6972 + t6687 * t6970 + t6691 * t6968); (t6705 * t7056 + t6707 * t7055 + t6709 * t7054) * MDP(2) + (t6706 * t7056 + t6708 * t7055 + t6710 * t7054) * MDP(3) + (t6639 * t7056 + t6640 * t7055 + t6641 * t7054 + (t6614 * t6659 + (((-t6769 * t6885 + t6770 * t6884) * t6874 - t6871 * (t6769 * t6884 + t6770 * t6885)) * t6868 + 0.2e1 * t6654 * t7066 + ((t6677 * t7006 + t6680 * t6909) * t6868 + (-t6677 * t6909 + t6680 * t7006) * t6865) * t6940 + ((-t6654 * t6927 + t6924 * t6655) * t6859 - (t6655 * t6927 + t7036) * t7019 + ((t6817 * t6885 - t6818 * t6884) * t6874 + t6871 * (t6817 * t6884 + t6818 * t6885)) * t6927 + t6680 * t7064) * pkin(1)) * t6692) * t6632 + (t6613 * t6658 + (((-t6767 * t6885 + t6768 * t6884) * t6873 - t6870 * (t6767 * t6884 + t6768 * t6885)) * t6867 + 0.2e1 * t6650 * t7063 + ((t6676 * t7007 + t6679 * t6908) * t6867 + (-t6676 * t6908 + t6679 * t7007) * t6864) * t6940 + ((-t6650 * t6926 + t6923 * t6651) * t6858 - (t6651 * t6926 + t7037) * t7021 + ((t6811 * t6885 - t6812 * t6884) * t6873 + t6870 * (t6811 * t6884 + t6812 * t6885)) * t6926 + t6679 * t7061) * pkin(1)) * t6688) * t6631 + (t6612 * t6657 + (((-t6765 * t6885 + t6766 * t6884) * t6872 - t6869 * (t6765 * t6884 + t6766 * t6885)) * t6866 + 0.2e1 * t6646 * t7060 + ((t6675 * t7008 + t6678 * t6907) * t6866 + (-t6675 * t6907 + t6678 * t7008) * t6863) * t6940 + ((-t6646 * t6925 + t6922 * t6647) * t6857 - (t6647 * t6925 + t7038) * t7023 + ((t6805 * t6885 - t6806 * t6884) * t6872 + (t6805 * t6884 + t6806 * t6885) * t6869) * t6925 + t6678 * t7058) * pkin(1)) * t6684) * t6630) * MDP(9) + t6783 * MDP(11) + t6784 * MDP(12) + t7090 * (-t6684 * t6976 - t6688 * t6975 - t6692 * t6974) + t7094 * (t6683 * t6976 + t6687 * t6975 + t6691 * t6974);];
taugX  = t1;
