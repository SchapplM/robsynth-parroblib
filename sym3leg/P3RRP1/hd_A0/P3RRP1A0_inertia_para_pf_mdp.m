% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRP1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRP1G1P1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 15:31
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRP1G1P1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRP1G1P1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRP1G1P1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRP1G1P1A0_inertia_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRP1G1P1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRP1G1P1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRP1G1P1A0_inertia_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 15:24:55
% EndTime: 2019-05-03 15:25:33
% DurationCPUTime: 40.82s
% Computational Cost: add. (75171->940), mult. (166345->1479), div. (1272->9), fcn. (65150->26), ass. (0->652)
t5143 = legFrame(3,3);
t5093 = cos(t5143);
t5397 = qJ(3,3) * t5093;
t5273 = pkin(2) * t5397;
t5054 = -0.2e1 * t5273;
t5090 = sin(t5143);
t5159 = qJ(3,3) ^ 2;
t5168 = pkin(2) ^ 2;
t5097 = -t5159 + t5168;
t4975 = t5090 * t5097 + t5054;
t5063 = t5090 * qJ(3,3);
t5057 = pkin(2) * t5063;
t5153 = cos(qJ(1,3));
t5141 = t5168 / 0.2e1;
t5262 = t5141 - t5159 / 0.2e1;
t5147 = sin(qJ(1,3));
t5437 = -0.2e1 * t5147;
t4921 = t4975 * t5153 + (t5093 * t5262 + t5057) * t5437;
t5051 = 0.2e1 * t5057;
t4927 = (t5093 * t5097 + t5051) * t5153 + t4975 * t5147;
t5066 = t5090 * pkin(2);
t4993 = t5066 - t5397;
t5395 = qJ(3,3) * t5147;
t5422 = pkin(2) * t5153;
t5024 = t5395 - t5422;
t5134 = qJ(1,3) + qJ(2,3);
t5087 = cos(t5134);
t5078 = t5087 ^ 2;
t5084 = sin(t5134);
t5169 = (pkin(1) ^ 2);
t5425 = pkin(2) * t5093;
t4991 = t5063 - t5425;
t4992 = t5066 + t5397;
t5131 = t5153 ^ 2;
t5315 = t5147 * t5153;
t5183 = -t4991 * t5315 + t4992 * t5131;
t5184 = -t4991 * t5131 - t4992 * t5315;
t5324 = t5087 * t5093;
t5139 = 1 + t5169;
t5329 = t5084 * t5139;
t5330 = t5084 * t5087;
t4873 = (t5090 * t5329 - t5324) * qJ(3,3) + (t4921 * t5078 + t4927 * t5330 + t4993 * t5024) * pkin(1) + ((-t5183 + t5066) * t5087 + t5184 * t5084) * t5169;
t5081 = 0.1e1 + t5097;
t4972 = t5081 * t5090 + t5054;
t5333 = t5081 * t5093;
t4924 = (t5051 + t5333) * t5153 + t5147 * t4972;
t4969 = t4972 * t5153;
t5440 = -0.2e1 * t5057;
t4888 = (t5084 * t5090 - t5324) * qJ(3,3) + (-t4969 * t5078 - t4924 * t5330 + (t5090 * t5168 + t5090 - t5273) * t5153 + (-(t5440 - t5333) * t5078 - qJ(3,3) * t4993) * t5147) * pkin(1);
t5289 = t4873 + t4888;
t5144 = legFrame(2,3);
t5094 = cos(t5144);
t5403 = qJ(3,2) * t5094;
t5274 = pkin(2) * t5403;
t5055 = -0.2e1 * t5274;
t5091 = sin(t5144);
t5160 = qJ(3,2) ^ 2;
t5099 = -t5160 + t5168;
t4976 = t5091 * t5099 + t5055;
t5064 = t5091 * qJ(3,2);
t5058 = pkin(2) * t5064;
t5155 = cos(qJ(1,2));
t5261 = t5141 - t5160 / 0.2e1;
t5149 = sin(qJ(1,2));
t5436 = -0.2e1 * t5149;
t4922 = t4976 * t5155 + (t5094 * t5261 + t5058) * t5436;
t5052 = 0.2e1 * t5058;
t4928 = (t5094 * t5099 + t5052) * t5155 + t4976 * t5149;
t5067 = t5091 * pkin(2);
t4997 = t5067 - t5403;
t5401 = qJ(3,2) * t5149;
t5421 = pkin(2) * t5155;
t5025 = t5401 - t5421;
t5135 = qJ(1,2) + qJ(2,2);
t5088 = cos(t5135);
t5079 = t5088 ^ 2;
t5085 = sin(t5135);
t5424 = pkin(2) * t5094;
t4995 = t5064 - t5424;
t4996 = t5067 + t5403;
t5132 = t5155 ^ 2;
t5314 = t5149 * t5155;
t5181 = -t4995 * t5314 + t4996 * t5132;
t5182 = -t4995 * t5132 - t4996 * t5314;
t5323 = t5088 * t5094;
t5327 = t5085 * t5139;
t5328 = t5085 * t5088;
t4874 = (t5091 * t5327 - t5323) * qJ(3,2) + (t4922 * t5079 + t4928 * t5328 + t4997 * t5025) * pkin(1) + ((-t5181 + t5067) * t5088 + t5182 * t5085) * t5169;
t5082 = 0.1e1 + t5099;
t4973 = t5082 * t5091 + t5055;
t5332 = t5082 * t5094;
t4925 = (t5052 + t5332) * t5155 + t5149 * t4973;
t4970 = t4973 * t5155;
t5439 = -0.2e1 * t5058;
t4889 = (t5085 * t5091 - t5323) * qJ(3,2) + (-t4970 * t5079 - t4925 * t5328 + (t5091 * t5168 + t5091 - t5274) * t5155 + (-(t5439 - t5332) * t5079 - qJ(3,2) * t4997) * t5149) * pkin(1);
t5288 = t4874 + t4889;
t5145 = legFrame(1,3);
t5095 = cos(t5145);
t5409 = qJ(3,1) * t5095;
t5277 = pkin(2) * t5409;
t5056 = -0.2e1 * t5277;
t5092 = sin(t5145);
t5161 = qJ(3,1) ^ 2;
t5101 = -t5161 + t5168;
t4977 = t5092 * t5101 + t5056;
t5065 = t5092 * qJ(3,1);
t5059 = pkin(2) * t5065;
t5157 = cos(qJ(1,1));
t5260 = t5141 - t5161 / 0.2e1;
t5151 = sin(qJ(1,1));
t5435 = -0.2e1 * t5151;
t4923 = t4977 * t5157 + (t5095 * t5260 + t5059) * t5435;
t5053 = 0.2e1 * t5059;
t4929 = (t5095 * t5101 + t5053) * t5157 + t4977 * t5151;
t5068 = t5092 * pkin(2);
t5001 = t5068 - t5409;
t5407 = qJ(3,1) * t5151;
t5420 = pkin(2) * t5157;
t5026 = t5407 - t5420;
t5136 = qJ(1,1) + qJ(2,1);
t5089 = cos(t5136);
t5080 = t5089 ^ 2;
t5086 = sin(t5136);
t5423 = pkin(2) * t5095;
t4999 = t5065 - t5423;
t5000 = t5068 + t5409;
t5133 = t5157 ^ 2;
t5313 = t5151 * t5157;
t5179 = -t4999 * t5313 + t5000 * t5133;
t5180 = -t4999 * t5133 - t5000 * t5313;
t5322 = t5089 * t5095;
t5325 = t5086 * t5139;
t5326 = t5086 * t5089;
t4875 = (t5092 * t5325 - t5322) * qJ(3,1) + (t4923 * t5080 + t4929 * t5326 + t5001 * t5026) * pkin(1) + ((-t5179 + t5068) * t5089 + t5180 * t5086) * t5169;
t5083 = 0.1e1 + t5101;
t4974 = t5083 * t5092 + t5056;
t5331 = t5083 * t5095;
t4926 = (t5053 + t5331) * t5157 + t5151 * t4974;
t4971 = t4974 * t5157;
t5438 = -0.2e1 * t5059;
t4890 = (t5086 * t5092 - t5322) * qJ(3,1) + (-t4971 * t5080 - t4926 * t5326 + (t5092 * t5168 + t5092 - t5277) * t5157 + (-(t5438 - t5331) * t5080 - qJ(3,1) * t5001) * t5151) * pkin(1);
t5287 = t4875 + t4890;
t4990 = t5063 + t5425;
t5256 = t5084 * t5397;
t5336 = t5063 * t5087;
t4876 = -t5139 * t5256 - t5336 + (t4921 * t5330 - t4927 * t5078 - t4990 * t5024) * pkin(1) + ((t5184 - t5425) * t5087 + t5183 * t5084) * t5169;
t5060 = 0.1e1 / 0.2e1 + t5262;
t5339 = t4990 * t5147;
t4885 = -t5256 - t5336 + (t4924 * t5078 - (t4969 + (t5060 * t5093 + t5057) * t5437) * t5330 - (t5093 * t5168 + t5057 + t5093) * t5153 + qJ(3,3) * t5339) * pkin(1);
t5286 = t4876 + t4885;
t4994 = t5064 + t5424;
t5255 = t5085 * t5403;
t5335 = t5064 * t5088;
t4877 = -t5139 * t5255 - t5335 + (t4922 * t5328 - t4928 * t5079 - t4994 * t5025) * pkin(1) + ((t5182 - t5424) * t5088 + t5181 * t5085) * t5169;
t5061 = 0.1e1 / 0.2e1 + t5261;
t5338 = t4994 * t5149;
t4886 = -t5255 - t5335 + (t4925 * t5079 - (t4970 + (t5061 * t5094 + t5058) * t5436) * t5328 - (t5094 * t5168 + t5058 + t5094) * t5155 + qJ(3,2) * t5338) * pkin(1);
t5285 = t4877 + t4886;
t4998 = t5065 + t5423;
t5254 = t5086 * t5409;
t5334 = t5065 * t5089;
t4878 = -t5139 * t5254 - t5334 + (t4923 * t5326 - t4929 * t5080 - t4998 * t5026) * pkin(1) + ((t5180 - t5423) * t5089 + t5179 * t5086) * t5169;
t5062 = 0.1e1 / 0.2e1 + t5260;
t5337 = t4998 * t5151;
t4887 = -t5254 - t5334 + (t4926 * t5080 - (t4971 + (t5062 * t5095 + t5059) * t5435) * t5326 - (t5095 * t5168 + t5059 + t5095) * t5157 + qJ(3,1) * t5337) * pkin(1);
t5284 = t4878 + t4887;
t5432 = pkin(2) * qJ(3,3);
t5230 = t5315 * t5432;
t5170 = -t5081 * t5131 + 0.2e1 * t5230;
t5303 = -0.1e1 / 0.2e1 - t5168 / 0.2e1;
t5138 = 2 + t5169;
t5398 = qJ(3,3) * t5084;
t5470 = 0.2e1 * pkin(1);
t5454 = -(-(pkin(1) * (t5081 * t5315 + (0.2e1 * t5131 - 0.1e1) * t5432) * t5084 + t5395) * t5087 + t5153 * t5398) * t5470 - t5159 * t5138;
t4900 = (0.2e1 * (t5159 / 0.2e1 - t5170 + t5303) * t5078 + t5170) * t5169 + t5454;
t4894 = 0.1e1 / t4900;
t5096 = t5159 + t5168;
t5479 = t4894 * t5096;
t5433 = pkin(2) * qJ(3,2);
t5231 = t5314 * t5433;
t5171 = -t5082 * t5132 + 0.2e1 * t5231;
t5404 = qJ(3,2) * t5085;
t5453 = -(-(pkin(1) * (t5082 * t5314 + (0.2e1 * t5132 - 0.1e1) * t5433) * t5085 + t5401) * t5088 + t5155 * t5404) * t5470 - t5160 * t5138;
t4901 = (0.2e1 * (t5160 / 0.2e1 - t5171 + t5303) * t5079 + t5171) * t5169 + t5453;
t4896 = 0.1e1 / t4901;
t5098 = t5160 + t5168;
t5478 = t4896 * t5098;
t5434 = pkin(2) * qJ(3,1);
t5232 = t5313 * t5434;
t5172 = -t5083 * t5133 + 0.2e1 * t5232;
t5410 = qJ(3,1) * t5086;
t5452 = -(-(pkin(1) * (t5083 * t5313 + (0.2e1 * t5133 - 0.1e1) * t5434) * t5086 + t5407) * t5089 + t5157 * t5410) * t5470 - t5161 * t5138;
t4902 = (0.2e1 * (t5161 / 0.2e1 - t5172 + t5303) * t5080 + t5172) * t5169 + t5452;
t4898 = 0.1e1 / t4902;
t5100 = t5161 + t5168;
t5477 = t4898 * t5100;
t5158 = xP(3);
t5108 = sin(t5158);
t5109 = cos(t5158);
t5163 = koppelP(2,2);
t5166 = koppelP(2,1);
t4985 = t5108 * t5166 + t5109 * t5163;
t5359 = t4896 * t4985;
t4825 = t4874 * t5359;
t4988 = -t5108 * t5163 + t5109 * t5166;
t5358 = t4896 * t4988;
t4827 = t4877 * t5358;
t4789 = -t4825 + t4827;
t4856 = t4886 * t5358;
t4859 = t4889 * t5359;
t4823 = -t4859 + t4856;
t5476 = t4789 + t4823;
t5164 = koppelP(1,2);
t5167 = koppelP(1,1);
t4986 = t5108 * t5167 + t5109 * t5164;
t5352 = t4898 * t4986;
t4826 = t4875 * t5352;
t4989 = -t5108 * t5164 + t5109 * t5167;
t5351 = t4898 * t4989;
t4828 = t4878 * t5351;
t4790 = -t4826 + t4828;
t4857 = t4887 * t5351;
t4860 = t4890 * t5352;
t4824 = -t4860 + t4857;
t5475 = t4790 + t4824;
t5162 = koppelP(3,2);
t5165 = koppelP(3,1);
t4984 = t5108 * t5165 + t5109 * t5162;
t5366 = t4894 * t4984;
t4829 = t4873 * t5366;
t4987 = -t5108 * t5162 + t5109 * t5165;
t5365 = t4894 * t4987;
t4830 = t4876 * t5365;
t4791 = -t4829 + t4830;
t4855 = t4885 * t5365;
t4858 = t4888 * t5366;
t4822 = -t4858 + t4855;
t5474 = t4791 + t4822;
t5111 = qJ(3,3) * t5162;
t5272 = pkin(2) * t5111;
t5070 = -0.2e1 * t5272;
t5110 = t5159 * t5165;
t5309 = t5165 * t5168;
t5229 = -t5110 + t5309;
t5008 = t5070 + t5229;
t5112 = qJ(3,3) * t5165;
t5270 = pkin(2) * t5112;
t5073 = 0.2e1 * t5270;
t5119 = t5168 * t5162;
t5009 = -t5159 * t5162 + t5073 + t5119;
t4942 = t5008 * t5109 - t5009 * t5108;
t4943 = t5008 * t5108 + t5009 * t5109;
t4906 = -t4942 * t5090 + t4943 * t5093;
t5125 = pkin(2) * t5165;
t5033 = t5111 + t5125;
t5122 = pkin(2) * t5162;
t5038 = -t5112 + t5122;
t4957 = t5033 * t5109 - t5038 * t5108;
t4960 = t5033 * t5108 + t5038 * t5109;
t4909 = t4957 * t5093 + t4960 * t5090;
t5034 = -t5111 + t5125;
t5037 = t5112 + t5122;
t4958 = t5034 * t5109 - t5037 * t5108;
t4959 = t5034 * t5108 + t5037 * t5109;
t4910 = t4958 * t5093 + t4959 * t5090;
t4912 = -t4957 * t5090 + t4960 * t5093;
t4939 = t4984 * t5090 + t4987 * t5093;
t5308 = t5165 * t5169;
t5027 = pkin(2) * t5308 - t5111;
t5419 = pkin(2) * t5169;
t5028 = t5162 * t5419 + t5112;
t5205 = t4942 * t5093 + t5090 * t4943;
t4774 = ((t5027 * t5109 - t5028 * t5108) * t5093 + (t5027 * t5108 + t5028 * t5109) * t5090) * t5087 + qJ(3,3) * t4939 * t5329 + ((-t4909 * t5131 - t4912 * t5315) * t5087 + (-t4909 * t5315 + t4912 * t5131) * t5084) * t5169 + (-(t5147 * t4906 - t5153 * t5205) * t5078 + (t4906 * t5153 + t5147 * t5205) * t5330 + t4910 * t5024) * pkin(1);
t5137 = 0.1e1 + t5168;
t4978 = t5073 + (t5137 - t5159) * t5162;
t4979 = t5137 * t5165 + t5070 - t5110;
t4930 = t4978 * t5109 + t4979 * t5108;
t5321 = t5108 * t4978;
t4931 = t4979 * t5109 - t5321;
t4903 = t4930 * t5093 - t4931 * t5090;
t4936 = t4984 * t5093 - t4987 * t5090;
t5018 = t5165 - t5272 + t5309;
t5019 = t5119 + t5162 + t5270;
t5069 = 0.2e1 * t5272;
t5342 = t4930 * t5090;
t5345 = t4910 * t5147;
t4792 = (-t4936 * t5087 + t4939 * t5084) * qJ(3,3) + (((((t5069 - t5165 - t5229) * t5109 + t5321) * t5093 - t5342) * t5153 + t4903 * t5147) * t5078 - (t4903 * t5153 + (t4931 * t5093 + t5342) * t5147) * t5330 - ((-t5018 * t5109 + t5019 * t5108) * t5093 - (t5018 * t5108 + t5019 * t5109) * t5090) * t5153 - qJ(3,3) * t5345) * pkin(1);
t5302 = 0.1e1 / 0.4e1 + t5168 / 0.4e1;
t4891 = 0.1e1 / ((0.4e1 * (-t5060 * t5131 + t5230 - t5159 / 0.4e1 + t5302) * t5078 - t5170) * t5169 - t5454);
t5469 = t4891 * ((-0.2e1 * t4858 + 0.2e1 * t4855 + t4791) * t4792 + t4774 * t4822);
t5114 = qJ(3,2) * t5163;
t5271 = pkin(2) * t5114;
t5072 = -0.2e1 * t5271;
t5113 = t5160 * t5166;
t5307 = t5166 * t5168;
t5228 = -t5113 + t5307;
t5010 = t5072 + t5228;
t5115 = qJ(3,2) * t5166;
t5269 = pkin(2) * t5115;
t5074 = 0.2e1 * t5269;
t5120 = t5168 * t5163;
t5011 = -t5160 * t5163 + t5074 + t5120;
t4944 = t5010 * t5109 - t5011 * t5108;
t4945 = t5010 * t5108 + t5011 * t5109;
t4907 = -t4944 * t5091 + t4945 * t5094;
t5126 = pkin(2) * t5166;
t5039 = t5114 + t5126;
t5123 = pkin(2) * t5163;
t5044 = -t5115 + t5123;
t4961 = t5039 * t5109 - t5044 * t5108;
t4964 = t5039 * t5108 + t5044 * t5109;
t4913 = t4961 * t5094 + t4964 * t5091;
t5040 = -t5114 + t5126;
t5043 = t5115 + t5123;
t4962 = t5040 * t5109 - t5043 * t5108;
t4963 = t5040 * t5108 + t5043 * t5109;
t4914 = t4962 * t5094 + t4963 * t5091;
t4916 = -t4961 * t5091 + t4964 * t5094;
t4940 = t4985 * t5091 + t4988 * t5094;
t5306 = t5166 * t5169;
t5029 = pkin(2) * t5306 - t5114;
t5030 = t5163 * t5419 + t5115;
t5204 = t4944 * t5094 + t5091 * t4945;
t4775 = ((t5029 * t5109 - t5030 * t5108) * t5094 + (t5029 * t5108 + t5030 * t5109) * t5091) * t5088 + qJ(3,2) * t4940 * t5327 + ((-t4913 * t5132 - t4916 * t5314) * t5088 + (-t4913 * t5314 + t4916 * t5132) * t5085) * t5169 + (-(t5149 * t4907 - t5155 * t5204) * t5079 + (t4907 * t5155 + t5149 * t5204) * t5328 + t4914 * t5025) * pkin(1);
t4980 = t5074 + (t5137 - t5160) * t5163;
t4981 = t5137 * t5166 + t5072 - t5113;
t4932 = t4980 * t5109 + t4981 * t5108;
t5320 = t5108 * t4980;
t4933 = t4981 * t5109 - t5320;
t4904 = t4932 * t5094 - t4933 * t5091;
t4937 = t4985 * t5094 - t4988 * t5091;
t5020 = t5166 - t5271 + t5307;
t5021 = t5120 + t5163 + t5269;
t5071 = 0.2e1 * t5271;
t5341 = t4932 * t5091;
t5344 = t4914 * t5149;
t4793 = (-t4937 * t5088 + t4940 * t5085) * qJ(3,2) + (((((t5071 - t5166 - t5228) * t5109 + t5320) * t5094 - t5341) * t5155 + t4904 * t5149) * t5079 - (t4904 * t5155 + (t4933 * t5094 + t5341) * t5149) * t5328 - ((-t5020 * t5109 + t5021 * t5108) * t5094 - (t5020 * t5108 + t5021 * t5109) * t5091) * t5155 - qJ(3,2) * t5344) * pkin(1);
t4892 = 0.1e1 / ((0.4e1 * (-t5061 * t5132 + t5231 - t5160 / 0.4e1 + t5302) * t5079 - t5171) * t5169 - t5453);
t5468 = t4892 * ((-0.2e1 * t4859 + 0.2e1 * t4856 + t4789) * t4793 + t4775 * t4823);
t5117 = qJ(3,1) * t5164;
t5276 = pkin(2) * t5117;
t5076 = -0.2e1 * t5276;
t5116 = t5161 * t5167;
t5305 = t5167 * t5168;
t5227 = -t5116 + t5305;
t5012 = t5076 + t5227;
t5118 = qJ(3,1) * t5167;
t5275 = pkin(2) * t5118;
t5077 = 0.2e1 * t5275;
t5121 = t5168 * t5164;
t5013 = -t5161 * t5164 + t5077 + t5121;
t4946 = t5012 * t5109 - t5013 * t5108;
t4947 = t5012 * t5108 + t5013 * t5109;
t4908 = -t4946 * t5092 + t4947 * t5095;
t5127 = pkin(2) * t5167;
t5045 = t5117 + t5127;
t5124 = pkin(2) * t5164;
t5050 = -t5118 + t5124;
t4965 = t5045 * t5109 - t5050 * t5108;
t4968 = t5045 * t5108 + t5050 * t5109;
t4917 = t4965 * t5095 + t4968 * t5092;
t5046 = -t5117 + t5127;
t5049 = t5118 + t5124;
t4966 = t5046 * t5109 - t5049 * t5108;
t4967 = t5046 * t5108 + t5049 * t5109;
t4918 = t4966 * t5095 + t4967 * t5092;
t4920 = -t4965 * t5092 + t4968 * t5095;
t4941 = t4986 * t5092 + t4989 * t5095;
t5304 = t5167 * t5169;
t5031 = pkin(2) * t5304 - t5117;
t5032 = t5164 * t5419 + t5118;
t5203 = t4946 * t5095 + t5092 * t4947;
t4776 = ((t5031 * t5109 - t5032 * t5108) * t5095 + (t5031 * t5108 + t5032 * t5109) * t5092) * t5089 + qJ(3,1) * t4941 * t5325 + ((-t4917 * t5133 - t4920 * t5313) * t5089 + (-t4917 * t5313 + t4920 * t5133) * t5086) * t5169 + (-(t5151 * t4908 - t5157 * t5203) * t5080 + (t4908 * t5157 + t5151 * t5203) * t5326 + t4918 * t5026) * pkin(1);
t4982 = t5077 + (t5137 - t5161) * t5164;
t4983 = t5137 * t5167 + t5076 - t5116;
t4934 = t4982 * t5109 + t4983 * t5108;
t5319 = t5108 * t4982;
t4935 = t4983 * t5109 - t5319;
t4905 = t4934 * t5095 - t4935 * t5092;
t4938 = t4986 * t5095 - t4989 * t5092;
t5022 = t5167 - t5276 + t5305;
t5023 = t5121 + t5164 + t5275;
t5075 = 0.2e1 * t5276;
t5340 = t4934 * t5092;
t5343 = t4918 * t5151;
t4794 = (-t4938 * t5089 + t4941 * t5086) * qJ(3,1) + (((((t5075 - t5167 - t5227) * t5109 + t5319) * t5095 - t5340) * t5157 + t4905 * t5151) * t5080 - (t4905 * t5157 + (t4935 * t5095 + t5340) * t5151) * t5326 - ((-t5022 * t5109 + t5023 * t5108) * t5095 - (t5022 * t5108 + t5023 * t5109) * t5092) * t5157 - qJ(3,1) * t5343) * pkin(1);
t4893 = 0.1e1 / ((0.4e1 * (-t5062 * t5133 + t5232 - t5161 / 0.4e1 + t5302) * t5080 - t5172) * t5169 - t5452);
t5467 = t4893 * ((-0.2e1 * t4860 + 0.2e1 * t4857 + t4790) * t4794 + t4776 * t4824);
t5450 = 0.2e1 * pkin(2);
t5466 = t5476 * t5450;
t5465 = t5475 * t5450;
t5464 = t5474 * t5450;
t5102 = 0.2e1 * t5159 + t5169;
t5318 = t5131 * t5169;
t5463 = t5102 - t5318;
t5103 = 0.2e1 * t5160 + t5169;
t5317 = t5132 * t5169;
t5462 = t5103 - t5317;
t5104 = 0.2e1 * t5161 + t5169;
t5316 = t5133 * t5169;
t5461 = t5104 - t5316;
t5150 = sin(qJ(2,1));
t5156 = cos(qJ(2,1));
t5460 = MDP(5) * t5156 - MDP(6) * t5150;
t5148 = sin(qJ(2,2));
t5154 = cos(qJ(2,2));
t5459 = MDP(5) * t5154 - MDP(6) * t5148;
t5146 = sin(qJ(2,3));
t5152 = cos(qJ(2,3));
t5458 = MDP(5) * t5152 - MDP(6) * t5146;
t5457 = t4891 * t5458;
t5456 = t4892 * t5459;
t5455 = t4893 * t5460;
t5449 = 0.2e1 * t4792;
t5448 = 0.2e1 * t4793;
t5447 = 0.2e1 * t4794;
t5446 = 0.2e1 * t4885;
t5445 = 0.2e1 * t4886;
t5444 = 0.2e1 * t4887;
t5443 = 0.2e1 * t4888;
t5442 = 0.2e1 * t4889;
t5441 = 0.2e1 * t4890;
t5431 = pkin(1) * t5146;
t5430 = pkin(1) * t5148;
t5429 = pkin(1) * t5150;
t5428 = pkin(1) * t5152;
t5427 = pkin(1) * t5154;
t5426 = pkin(1) * t5156;
t4803 = t5284 * t4898;
t5412 = qJ(3,1) * t4803;
t4815 = t5287 * t4898;
t5411 = qJ(3,1) * t4815;
t5408 = qJ(3,1) * t5150;
t4802 = t5285 * t4896;
t5406 = qJ(3,2) * t4802;
t4814 = t5288 * t4896;
t5405 = qJ(3,2) * t4814;
t5402 = qJ(3,2) * t5148;
t4801 = t5286 * t4894;
t5400 = qJ(3,3) * t4801;
t4813 = t5289 * t4894;
t5399 = qJ(3,3) * t4813;
t5396 = qJ(3,3) * t5146;
t5394 = t5474 * qJ(3,3);
t5393 = t5476 * qJ(3,2);
t5392 = t5475 * qJ(3,1);
t5390 = t4774 * t4891;
t5389 = t4774 * t4894;
t5388 = t4775 * t4892;
t5387 = t4775 * t4896;
t5386 = t4776 * t4893;
t5385 = t4776 * t4898;
t5384 = t4792 * t4891;
t5383 = t4793 * t4892;
t5382 = t4794 * t4893;
t4810 = (t4873 + t5443) * t4894;
t5381 = t4810 * t4894;
t4811 = (t4874 + t5442) * t4896;
t5380 = t4811 * t4896;
t4812 = (t4875 + t5441) * t4898;
t5379 = t4812 * t4898;
t4948 = t4990 * t5153 + t4993 * t5147;
t4949 = t4993 * t5153 - t5339;
t5247 = t5169 * t5315;
t5015 = t5090 * t5247;
t5223 = t5093 * t5247;
t5226 = -0.2e1 * t5159 - t5318;
t4879 = (t5093 * t5463 + t5015 + t5440) * t5087 + (t5090 * t5226 + t5054 - t5223) * t5084 + (-t4949 * t5330 + t4948 * t5078 - 0.2e1 * t5063 * t5153 + (-t5395 - t5422) * t5093) * pkin(1);
t5378 = t4879 * t4894;
t4950 = t4994 * t5155 + t4997 * t5149;
t4951 = t4997 * t5155 - t5338;
t5246 = t5169 * t5314;
t5016 = t5091 * t5246;
t5222 = t5094 * t5246;
t5225 = -0.2e1 * t5160 - t5317;
t4880 = (t5094 * t5462 + t5016 + t5439) * t5088 + (t5091 * t5225 + t5055 - t5222) * t5085 + (-t4951 * t5328 + t4950 * t5079 - 0.2e1 * t5064 * t5155 + (-t5401 - t5421) * t5094) * pkin(1);
t5377 = t4880 * t4896;
t4952 = t4998 * t5157 + t5001 * t5151;
t4953 = t5001 * t5157 - t5337;
t5245 = t5169 * t5313;
t5017 = t5092 * t5245;
t5221 = t5095 * t5245;
t5224 = -0.2e1 * t5161 - t5316;
t4881 = (t5095 * t5461 + t5017 + t5438) * t5089 + (t5092 * t5224 + t5056 - t5221) * t5086 + (-t4953 * t5326 + t4952 * t5080 - 0.2e1 * t5065 * t5157 + (-t5407 - t5420) * t5095) * pkin(1);
t5376 = t4881 * t4898;
t4882 = (-t5090 * t5463 + t5054 + t5223) * t5087 + (t5093 * t5226 + t5015 + t5051) * t5084 + (-t4949 * t5078 - t4948 * t5330 + (t5066 - 0.2e1 * t5397) * t5153 + t5147 * t5063) * pkin(1);
t5375 = t4882 * t4894;
t4883 = (-t5091 * t5462 + t5055 + t5222) * t5088 + (t5094 * t5225 + t5016 + t5052) * t5085 + (-t4951 * t5079 - t4950 * t5328 + (t5067 - 0.2e1 * t5403) * t5155 + t5149 * t5064) * pkin(1);
t5374 = t4883 * t4896;
t4884 = (-t5092 * t5461 + t5056 + t5221) * t5089 + (t5095 * t5224 + t5017 + t5053) * t5086 + (-t4953 * t5080 - t4952 * t5326 + (t5068 - 0.2e1 * t5409) * t5157 + t5151 * t5065) * pkin(1);
t5373 = t4884 * t4898;
t5372 = t4885 * t5152;
t5371 = t4886 * t5154;
t5370 = t4887 * t5156;
t4895 = 0.1e1 / t4900 ^ 2;
t5369 = t4888 * t4895;
t4897 = 0.1e1 / t4901 ^ 2;
t5368 = t4889 * t4897;
t4899 = 0.1e1 / t4902 ^ 2;
t5367 = t4890 * t4899;
t5363 = t4894 * t5146;
t5360 = t4894 * t5169;
t5356 = t4896 * t5148;
t5353 = t4896 * t5169;
t5349 = t4898 * t5150;
t5346 = t4898 * t5169;
t5301 = t4774 + t4792;
t5300 = t4775 + t4793;
t5299 = t4776 + t4794;
t5280 = t4894 * t5450;
t5295 = t5289 * t5280;
t5279 = t4896 * t5450;
t5294 = t5288 * t5279;
t5278 = t4898 * t5450;
t5293 = t5287 * t5278;
t5292 = t5286 * t5280;
t5291 = t5285 * t5279;
t5290 = t5284 * t5278;
t4849 = t4881 * t5351;
t4852 = t4884 * t5352;
t4795 = -t4852 + t4849;
t4850 = t4879 * t5365;
t4853 = t4882 * t5366;
t4796 = -t4853 + t4850;
t4851 = t4880 * t5358;
t4854 = t4883 * t5359;
t4797 = -t4854 + t4851;
t5283 = 0.2e1 * t5428;
t5282 = 0.2e1 * t5427;
t5281 = 0.2e1 * t5426;
t5268 = t4885 + t4876 / 0.2e1;
t5267 = t4886 + t4877 / 0.2e1;
t5266 = t4887 + t4878 / 0.2e1;
t5265 = t4888 + t4873 / 0.2e1;
t5264 = t4889 + t4874 / 0.2e1;
t5263 = t4890 + t4875 / 0.2e1;
t5259 = MDP(1) * t4792 * t4894;
t5258 = MDP(1) * t4793 * t4896;
t5257 = MDP(1) * t4794 * t4898;
t5253 = t4876 * t5369;
t5252 = t4877 * t5368;
t5251 = t4878 * t5367;
t5250 = t4885 * t5363;
t5249 = t4886 * t5356;
t5248 = t4887 * t5349;
t5244 = t5408 * t5470;
t5243 = t5402 * t5470;
t5242 = t5396 * t5470;
t5241 = t5289 * t5479;
t5240 = t5286 * t5479;
t5239 = t5288 * t5478;
t5238 = t5285 * t5478;
t5237 = t5287 * t5477;
t5236 = t5284 * t5477;
t5235 = t4894 * t5283;
t5234 = t4896 * t5282;
t5233 = t4898 * t5281;
t5220 = pkin(1) * t5372 - t4879;
t5219 = pkin(1) * t5371 - t4880;
t5218 = pkin(1) * t5370 - t4881;
t5217 = t4888 * t5428 - t4882;
t5216 = t4889 * t5427 - t4883;
t5215 = t4890 * t5426 - t4884;
t5202 = -t4822 * t5428 + t4796;
t5201 = -t4823 * t5427 + t4797;
t5200 = -t4824 * t5426 + t4795;
t5199 = -pkin(2) * t4796 + t5096 * t5474;
t5198 = -pkin(2) * t4797 + t5098 * t5476;
t5197 = -pkin(2) * t4795 + t5100 * t5475;
t5196 = pkin(1) * (pkin(2) * t5156 + t5408);
t5195 = pkin(1) * (pkin(2) * t5154 + t5402);
t5194 = pkin(1) * (pkin(2) * t5152 + t5396);
t4911 = -t4958 * t5090 + t4959 * t5093;
t5002 = t5069 + 0.2e1 * t5110 + t5308;
t5003 = t5102 * t5162 - 0.2e1 * t5270;
t5035 = -0.2e1 * t5111 + t5125;
t5036 = 0.2e1 * t5112 + t5122;
t4777 = ((-t5002 * t5109 + t5003 * t5108) * t5093 - t5090 * (t5002 * t5108 + t5003 * t5109)) * t5087 + 0.2e1 * t4910 * t5398 + ((t4936 * t5315 + t4939 * t5131) * t5087 + (-t4936 * t5131 + t4939 * t5315) * t5084) * t5169 + ((-t4910 * t5153 + t5147 * t4911) * t5078 - (t4911 * t5153 + t5345) * t5330 + ((t5035 * t5109 - t5036 * t5108) * t5093 + (t5035 * t5108 + t5036 * t5109) * t5090) * t5153 + t4939 * t5395) * pkin(1);
t5178 = MDP(4) * t5301 - t4777 * MDP(7);
t4915 = -t4962 * t5091 + t4963 * t5094;
t5004 = t5071 + 0.2e1 * t5113 + t5306;
t5005 = t5103 * t5163 - 0.2e1 * t5269;
t5041 = -0.2e1 * t5114 + t5126;
t5042 = 0.2e1 * t5115 + t5123;
t4778 = ((-t5004 * t5109 + t5005 * t5108) * t5094 - t5091 * (t5004 * t5108 + t5005 * t5109)) * t5088 + 0.2e1 * t4914 * t5404 + ((t4937 * t5314 + t4940 * t5132) * t5088 + (-t4937 * t5132 + t4940 * t5314) * t5085) * t5169 + ((-t4914 * t5155 + t5149 * t4915) * t5079 - (t4915 * t5155 + t5344) * t5328 + ((t5041 * t5109 - t5042 * t5108) * t5094 + t5091 * (t5041 * t5108 + t5042 * t5109)) * t5155 + t4940 * t5401) * pkin(1);
t5177 = MDP(4) * t5300 - t4778 * MDP(7);
t4919 = -t4966 * t5092 + t4967 * t5095;
t5006 = t5075 + 0.2e1 * t5116 + t5304;
t5007 = t5104 * t5164 - 0.2e1 * t5275;
t5047 = -0.2e1 * t5117 + t5127;
t5048 = 0.2e1 * t5118 + t5124;
t4779 = ((-t5006 * t5109 + t5007 * t5108) * t5095 - t5092 * (t5006 * t5108 + t5007 * t5109)) * t5089 + 0.2e1 * t4918 * t5410 + ((t4938 * t5313 + t4941 * t5133) * t5089 + (-t4938 * t5133 + t4941 * t5313) * t5086) * t5169 + ((-t4918 * t5157 + t5151 * t4919) * t5080 - (t4919 * t5157 + t5343) * t5326 + ((t5047 * t5109 - t5048 * t5108) * t5095 + t5092 * (t5047 * t5108 + t5048 * t5109)) * t5157 + t4941 * t5407) * pkin(1);
t5176 = MDP(4) * t5299 - t4779 * MDP(7);
t5175 = MDP(4) * t5286 - t4879 * MDP(7);
t5174 = MDP(4) * t5285 - t4880 * MDP(7);
t5173 = MDP(4) * t5284 - t4881 * MDP(7);
t5014 = (t5108 ^ 2 + t5109 ^ 2) * MDP(13);
t4809 = t5263 * t4898;
t4808 = t5264 * t4896;
t4807 = t5265 * t4894;
t4806 = (t4878 + t5444) * t4898;
t4805 = (t4877 + t5445) * t4896;
t4804 = (t4876 + t5446) * t4894;
t4800 = t5266 * t4898;
t4799 = t5267 * t4896;
t4798 = t5268 * t4894;
t4773 = pkin(1) * t4890 * t5349 + 0.2e1 * t5411;
t4772 = pkin(1) * t4889 * t5356 + 0.2e1 * t5405;
t4771 = pkin(1) * t4888 * t5363 + 0.2e1 * t5399;
t4770 = pkin(1) * t5248 + 0.2e1 * t5412;
t4769 = pkin(1) * t5249 + 0.2e1 * t5406;
t4768 = pkin(1) * t5250 + 0.2e1 * t5400;
t4767 = (-pkin(2) * t5287 - t5215) * t4898;
t4766 = t4898 * t5215 + t5293;
t4765 = (-pkin(2) * t5288 - t5216) * t4896;
t4764 = t4896 * t5216 + t5294;
t4763 = (-pkin(2) * t5289 - t5217) * t4894;
t4762 = t4894 * t5217 + t5295;
t4761 = (-pkin(2) * t5284 - t5218) * t4898;
t4760 = t4898 * t5218 + t5290;
t4759 = (-pkin(2) * t5285 - t5219) * t4896;
t4758 = t4896 * t5219 + t5291;
t4757 = (-pkin(2) * t5286 - t5220) * t4894;
t4756 = t4894 * t5220 + t5292;
t4755 = t4808 * t5430 + t5405;
t4754 = t4809 * t5429 + t5411;
t4753 = t4807 * t5431 + t5399;
t4752 = t4799 * t5430 + t5406;
t4751 = t4800 * t5429 + t5412;
t4750 = t4798 * t5431 + t5400;
t4743 = -t4826 / 0.2e1 + t4828 / 0.2e1 + t4824;
t4742 = -t4825 / 0.2e1 + t4827 / 0.2e1 + t4823;
t4741 = -t4829 / 0.2e1 + t4830 / 0.2e1 + t4822;
t4740 = t4809 * t5281 + t5293 - t5373;
t4739 = t4808 * t5282 + t5294 - t5374;
t4738 = t4807 * t5283 + t5295 - t5375;
t4737 = t4800 * t5281 + t5290 - t5376;
t4736 = t4799 * t5282 + t5291 - t5377;
t4735 = t4798 * t5283 + t5292 - t5378;
t4734 = (-pkin(2) * t4884 + t4890 * t5196) * t4898 + t5237;
t4733 = (-pkin(2) * t4883 + t4889 * t5195) * t4896 + t5239;
t4732 = (-pkin(2) * t4882 + t4888 * t5194) * t4894 + t5241;
t4731 = (-pkin(2) * t4881 + t4887 * t5196) * t4898 + t5236;
t4730 = (-pkin(2) * t4880 + t4886 * t5195) * t4896 + t5238;
t4729 = (-pkin(2) * t4879 + t4885 * t5194) * t4894 + t5240;
t4728 = (-t4884 / 0.2e1 + t5263 * pkin(2)) * t5233 + t4809 * t5244 + t4890 * t5346 - pkin(2) * t5373 + t5237;
t4727 = (-t4883 / 0.2e1 + t5264 * pkin(2)) * t5234 + t4808 * t5243 + t4889 * t5353 - pkin(2) * t5374 + t5239;
t4726 = (-t4882 / 0.2e1 + t5265 * pkin(2)) * t5235 + t4807 * t5242 + t4888 * t5360 - pkin(2) * t5375 + t5241;
t4725 = (-t4881 / 0.2e1 + t5266 * pkin(2)) * t5233 + t4800 * t5244 + t4887 * t5346 - pkin(2) * t5376 + t5236;
t4724 = (-t4880 / 0.2e1 + t5267 * pkin(2)) * t5234 + t4799 * t5243 + t4886 * t5353 - pkin(2) * t5377 + t5238;
t4723 = (-t4879 / 0.2e1 + t5268 * pkin(2)) * t5235 + t4798 * t5242 + t4885 * t5360 - pkin(2) * t5378 + t5240;
t1 = [(t4888 ^ 2 * t4895 + t4889 ^ 2 * t4897 + t4890 ^ 2 * t4899) * MDP(1) + t5014 + ((t4740 * t4890 + t4766 * t4875) * MDP(7) + (t4754 * t5441 + t4773 * t4875) * MDP(8) + (t4728 * t4890 + t4734 * t4875 + t4767 * t4884) * MDP(9) + (MDP(4) * t5287 - t4884 * MDP(7)) * t4815) * t4898 + ((t4739 * t4889 + t4764 * t4874) * MDP(7) + (t4755 * t5442 + t4772 * t4874) * MDP(8) + (t4727 * t4889 + t4733 * t4874 + t4765 * t4883) * MDP(9) + (MDP(4) * t5288 - t4883 * MDP(7)) * t4814) * t4896 + ((t4738 * t4888 + t4762 * t4873) * MDP(7) + (t4753 * t5443 + t4771 * t4873) * MDP(8) + (t4726 * t4888 + t4732 * t4873 + t4763 * t4882) * MDP(9) + (MDP(4) * t5289 - t4882 * MDP(7)) * t4813) * t4894 + (t5458 * t4888 * (t4873 * t4895 + t5381) + t5459 * t4889 * (t4874 * t4897 + t5380) + t5460 * t4890 * (t4875 * t4899 + t5379)) * pkin(1); (t4885 * t5369 + t4886 * t5368 + t4887 * t5367) * MDP(1) + ((t4740 * t4887 + t4766 * t4878) * MDP(7) + (t4754 * t5444 + t4773 * t4878) * MDP(8) + (t4728 * t4887 + t4734 * t4878 + t4767 * t4881) * MDP(9) + t5173 * t4815) * t4898 + ((t4739 * t4886 + t4764 * t4877) * MDP(7) + (t4755 * t5445 + t4772 * t4877) * MDP(8) + (t4727 * t4886 + t4733 * t4877 + t4765 * t4880) * MDP(9) + t5174 * t4814) * t4896 + ((t4738 * t4885 + t4762 * t4876) * MDP(7) + (t4753 * t5446 + t4771 * t4876) * MDP(8) + (t4726 * t4885 + t4732 * t4876 + t4763 * t4879) * MDP(9) + t5175 * t4813) * t4894 + ((t5152 * t5253 + t5154 * t5252 + t5156 * t5251 + t5370 * t5379 + t5371 * t5380 + t5372 * t5381) * MDP(5) + (-t4810 * t5250 - t4811 * t5249 - t4812 * t5248 - t5146 * t5253 - t5148 * t5252 - t5150 * t5251) * MDP(6)) * pkin(1); (t4885 ^ 2 * t4895 + t4886 ^ 2 * t4897 + t4887 ^ 2 * t4899) * MDP(1) + t5014 + ((t4737 * t4887 + t4760 * t4878) * MDP(7) + (t4751 * t5444 + t4770 * t4878) * MDP(8) + (t4725 * t4887 + t4731 * t4878 + t4761 * t4881) * MDP(9) + t5173 * t4803) * t4898 + ((t4736 * t4886 + t4758 * t4877) * MDP(7) + (t4752 * t5445 + t4769 * t4877) * MDP(8) + (t4724 * t4886 + t4730 * t4877 + t4759 * t4880) * MDP(9) + t5174 * t4802) * t4896 + ((t4735 * t4885 + t4756 * t4876) * MDP(7) + (t4750 * t5446 + t4768 * t4876) * MDP(8) + (t4723 * t4885 + t4729 * t4876 + t4757 * t4879) * MDP(9) + t5175 * t4801) * t4894 + (t5458 * t4885 * (t4804 * t4894 + t4876 * t4895) + t5459 * t4886 * (t4805 * t4896 + t4877 * t4897) + t5460 * t4887 * (t4806 * t4898 + t4878 * t4899)) * pkin(1); -t5108 * MDP(11) - t5109 * MDP(12) + (t4890 * t5257 + (t4740 * t4794 + t4766 * t4776) * MDP(7) + (t4754 * t5447 + t4773 * t4776) * MDP(8) + (t4728 * t4794 + t4734 * t4776 + t4767 * t4779) * MDP(9) + t5176 * t4815) * t4893 + (t4889 * t5258 + (t4739 * t4793 + t4764 * t4775) * MDP(7) + (t4755 * t5448 + t4772 * t4775) * MDP(8) + (t4727 * t4793 + t4733 * t4775 + t4765 * t4778) * MDP(9) + t5177 * t4814) * t4892 + (t4888 * t5259 + (t4738 * t4792 + t4762 * t4774) * MDP(7) + (t4753 * t5449 + t4771 * t4774) * MDP(8) + (t4726 * t4792 + t4732 * t4774 + t4763 * t4777) * MDP(9) + t5178 * t4813) * t4891 + ((t4792 * t4810 + t4888 * t5389) * t5457 + (t4793 * t4811 + t4889 * t5387) * t5456 + (t4794 * t4812 + t4890 * t5385) * t5455) * pkin(1); t5109 * MDP(11) - t5108 * MDP(12) + (t4887 * t5257 + (t4737 * t4794 + t4760 * t4776) * MDP(7) + (t4751 * t5447 + t4770 * t4776) * MDP(8) + (t4725 * t4794 + t4731 * t4776 + t4761 * t4779) * MDP(9) + t5176 * t4803) * t4893 + (t4886 * t5258 + (t4736 * t4793 + t4758 * t4775) * MDP(7) + (t4752 * t5448 + t4769 * t4775) * MDP(8) + (t4724 * t4793 + t4730 * t4775 + t4759 * t4778) * MDP(9) + t5177 * t4802) * t4892 + (t4885 * t5259 + (t4735 * t4792 + t4756 * t4774) * MDP(7) + (t4750 * t5449 + t4768 * t4774) * MDP(8) + (t4723 * t4792 + t4729 * t4774 + t4757 * t4777) * MDP(9) + t5178 * t4801) * t4891 + ((t4792 * t4804 + t4885 * t5389) * t5457 + (t4793 * t4805 + t4886 * t5387) * t5456 + (t4794 * t4806 + t4887 * t5385) * t5455) * pkin(1); (t4822 * t5384 + t4823 * t5383 + t4824 * t5382) * MDP(1) + (t4891 * t5301 * t5474 + t4892 * t5300 * t5476 + t4893 * t5299 * t5475) * MDP(4) + ((t4794 * (t4743 * t5281 - t4795 + t5465) + t4776 * (-t5200 + t5465) - t4779 * t5475) * t4893 + (t4793 * (t4742 * t5282 - t4797 + t5466) + t4775 * (-t5201 + t5466) - t4778 * t5476) * t4892 + (t4792 * (t4741 * t5283 - t4796 + t5464) + t4774 * (-t5202 + t5464) - t4777 * t5474) * t4891) * MDP(7) + ((t4824 * t5429 + 0.2e1 * t5392) * t5386 + (t4823 * t5430 + 0.2e1 * t5393) * t5388 + (t4822 * t5431 + 0.2e1 * t5394) * t5390 + 0.2e1 * (t4743 * t5429 + t5392) * t5382 + 0.2e1 * (t4742 * t5430 + t5393) * t5383 + 0.2e1 * (t4741 * t5431 + t5394) * t5384) * MDP(8) + (((t4852 / 0.2e1 - t4849 / 0.2e1 + (t4824 + t4790 / 0.2e1) * pkin(2)) * t5281 + t4743 * t5244 + t5169 * t4824 + t5197) * t5382 + (t4824 * t5196 + t5197) * t5386 + t4779 * t4893 * (-pkin(2) * t5475 + t5200) + ((t4854 / 0.2e1 - t4851 / 0.2e1 + (t4823 + t4789 / 0.2e1) * pkin(2)) * t5282 + t4742 * t5243 + t5169 * t4823 + t5198) * t5383 + (t4823 * t5195 + t5198) * t5388 + t4778 * t4892 * (-pkin(2) * t5476 + t5201) + ((t4853 / 0.2e1 - t4850 / 0.2e1 + (t4822 + t4791 / 0.2e1) * pkin(2)) * t5283 + t4741 * t5242 + t5169 * t4822 + t5199) * t5384 + (t4822 * t5194 + t5199) * t5390 + t4777 * t4891 * (-pkin(2) * t5474 + t5202)) * MDP(9) + MDP(10) + ((t5152 * t5469 + t5154 * t5468 + t5156 * t5467) * MDP(5) + (-t5146 * t5469 - t5148 * t5468 - t5150 * t5467) * MDP(6)) * pkin(1);];
%% Postprocessing: Reshape Output
% From vec2symmat_3_matlab.m
res = [t1(1), t1(2), t1(4); t1(2), t1(3), t1(5); t1(4), t1(5), t1(6);];
MMX  = res;
