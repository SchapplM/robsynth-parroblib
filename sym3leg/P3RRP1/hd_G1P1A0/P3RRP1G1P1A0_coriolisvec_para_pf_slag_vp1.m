% Calculate vector of centrifugal and coriolis load on the joints for
% P3RRP1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1,d2]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [3x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 15:31
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: pkin has to be [4x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRP1G1P1A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 15:03:37
% EndTime: 2019-05-03 15:04:32
% DurationCPUTime: 57.09s
% Computational Cost: add. (810331->975), mult. (1767871->1503), div. (15417->6), fcn. (743716->20), ass. (0->594)
t1411 = legFrame(3,3);
t1366 = sin(t1411);
t1348 = t1366 * qJ(3,3);
t1369 = cos(t1411);
t1649 = pkin(2) * t1369;
t1310 = t1348 + t1649;
t1351 = t1366 * pkin(2);
t1634 = qJ(3,3) * t1369;
t1313 = t1351 - t1634;
t1414 = sin(qJ(1,3));
t1417 = cos(qJ(1,3));
t1256 = t1310 * t1417 + t1313 * t1414;
t1586 = t1310 * t1414;
t1257 = t1313 * t1417 - t1586;
t1442 = pkin(1) ^ 2;
t1559 = t1414 * t1417;
t1490 = t1442 * t1559;
t1322 = t1366 * t1490;
t1531 = pkin(2) * t1634;
t1338 = -0.2e1 * t1531;
t1399 = qJ(1,3) + qJ(2,3);
t1363 = cos(t1399);
t1354 = t1363 ^ 2;
t1360 = sin(t1399);
t1469 = t1369 * t1490;
t1429 = qJ(3,3) ^ 2;
t1395 = t1417 ^ 2;
t1562 = t1395 * t1442;
t1473 = -0.2e1 * t1429 - t1562;
t1574 = t1360 * t1363;
t1342 = pkin(2) * t1348;
t1689 = -0.2e1 * t1342;
t1380 = pkin(2) * t1417;
t1633 = qJ(3,3) * t1414;
t1708 = -t1633 - t1380;
t1711 = 0.2e1 * t1429 + t1442 - t1562;
t1223 = (t1369 * t1711 + t1322 + t1689) * t1363 + (t1366 * t1473 + t1338 - t1469) * t1360 + (t1256 * t1354 - t1257 * t1574 - 0.2e1 * t1348 * t1417 + t1369 * t1708) * pkin(1);
t1441 = pkin(2) ^ 2;
t1372 = -t1429 + t1441;
t1357 = 0.1e1 + t1372;
t1513 = qJ(3,3) * t1559;
t1474 = pkin(2) * t1513;
t1445 = -t1357 * t1395 + 0.2e1 * t1474;
t1553 = -0.1e1 / 0.2e1 - t1441 / 0.2e1;
t1686 = 0.2e1 * t1354;
t1494 = t1357 * t1559;
t1674 = 0.2e1 * t1395 - 0.1e1;
t1518 = t1674 * qJ(3,3);
t1292 = pkin(2) * t1518 + t1494;
t1403 = 0.2e1 + t1442;
t1572 = t1360 * t1417;
t1626 = 0.2e1 * pkin(1);
t1658 = pkin(1) * t1360;
t1696 = -(qJ(3,3) * t1572 - (t1292 * t1658 + t1633) * t1363) * t1626 - t1429 * t1403;
t1238 = 0.1e1 / (((t1429 / 0.2e1 - t1445 + t1553) * t1686 + t1445) * t1442 + t1696);
t1425 = xP(3);
t1383 = sin(t1425);
t1384 = cos(t1425);
t1432 = koppelP(3,2);
t1435 = koppelP(3,1);
t1304 = -t1383 * t1432 + t1384 * t1435;
t1422 = xDP(3);
t1423 = xDP(2);
t1283 = t1304 * t1422 + t1423;
t1595 = t1238 * t1283;
t1199 = t1223 * t1595;
t1335 = 0.2e1 * t1342;
t1226 = (-t1366 * t1711 + t1338 + t1469) * t1363 + (t1369 * t1473 + t1322 + t1335) * t1360 + (-t1257 * t1354 - t1256 * t1574 + (t1351 - 0.2e1 * t1634) * t1417 + t1414 * t1348) * pkin(1);
t1301 = t1383 * t1435 + t1384 * t1432;
t1424 = xDP(1);
t1286 = -t1301 * t1422 + t1424;
t1594 = t1238 * t1286;
t1202 = t1226 * t1594;
t1157 = t1202 + t1199;
t1298 = t1366 * t1372 + t1338;
t1409 = t1441 / 0.2e1;
t1530 = t1409 - t1429 / 0.2e1;
t1683 = -0.2e1 * t1414;
t1247 = t1298 * t1417 + (t1369 * t1530 + t1342) * t1683;
t1253 = (t1369 * t1372 + t1335) * t1417 + t1298 * t1414;
t1329 = -t1380 + t1633;
t1404 = 0.1e1 + t1442;
t1311 = t1348 - t1649;
t1312 = t1351 + t1634;
t1452 = -t1311 * t1559 + t1312 * t1395;
t1453 = -t1311 * t1395 - t1312 * t1559;
t1565 = t1363 * t1369;
t1573 = t1360 * t1366;
t1217 = (t1404 * t1573 - t1565) * qJ(3,3) + (t1247 * t1354 + t1253 * t1574 + t1313 * t1329) * pkin(1) + ((-t1452 + t1351) * t1363 + t1453 * t1360) * t1442;
t1512 = t1360 * t1634;
t1583 = t1348 * t1363;
t1220 = -t1404 * t1512 - t1583 + (t1247 * t1574 - t1253 * t1354 - t1310 * t1329) * pkin(1) + ((t1453 - t1649) * t1363 + t1452 * t1360) * t1442;
t1295 = t1357 * t1366 + t1338;
t1577 = t1357 * t1369;
t1250 = (t1335 + t1577) * t1417 + t1414 * t1295;
t1280 = t1295 * t1417;
t1345 = 0.1e1 / 0.2e1 + t1530;
t1229 = -t1512 - t1583 + (t1250 * t1354 - (t1280 + (t1345 * t1369 + t1342) * t1683) * t1574 - (t1369 * t1441 + t1342 + t1369) * t1417 + qJ(3,3) * t1586) * pkin(1);
t1232 = (-t1565 + t1573) * qJ(3,3) + (-t1280 * t1354 - t1250 * t1574 + (t1366 * t1441 + t1366 - t1531) * t1417 + (-(t1689 - t1577) * t1354 - qJ(3,3) * t1313) * t1414) * pkin(1);
t1130 = ((t1217 + t1232) * t1286 + (t1220 + t1229) * t1283) * t1238;
t1645 = t1130 * pkin(2);
t1094 = t1645 - t1157;
t1632 = t1094 * qJ(3,3);
t1412 = legFrame(2,3);
t1367 = sin(t1412);
t1349 = t1367 * qJ(3,2);
t1370 = cos(t1412);
t1648 = pkin(2) * t1370;
t1314 = t1349 + t1648;
t1352 = t1367 * pkin(2);
t1636 = qJ(3,2) * t1370;
t1317 = t1352 - t1636;
t1415 = sin(qJ(1,2));
t1418 = cos(qJ(1,2));
t1258 = t1314 * t1418 + t1317 * t1415;
t1585 = t1314 * t1415;
t1259 = t1317 * t1418 - t1585;
t1558 = t1415 * t1418;
t1489 = t1442 * t1558;
t1323 = t1367 * t1489;
t1532 = pkin(2) * t1636;
t1339 = -0.2e1 * t1532;
t1400 = qJ(1,2) + qJ(2,2);
t1364 = cos(t1400);
t1355 = t1364 ^ 2;
t1361 = sin(t1400);
t1468 = t1370 * t1489;
t1430 = qJ(3,2) ^ 2;
t1396 = t1418 ^ 2;
t1561 = t1396 * t1442;
t1472 = -0.2e1 * t1430 - t1561;
t1571 = t1361 * t1364;
t1343 = pkin(2) * t1349;
t1688 = -0.2e1 * t1343;
t1381 = pkin(2) * t1418;
t1635 = qJ(3,2) * t1415;
t1707 = -t1635 - t1381;
t1710 = 0.2e1 * t1430 + t1442 - t1561;
t1224 = (t1370 * t1710 + t1323 + t1688) * t1364 + (t1367 * t1472 + t1339 - t1468) * t1361 + (t1258 * t1355 - t1259 * t1571 - 0.2e1 * t1349 * t1418 + t1370 * t1707) * pkin(1);
t1373 = -t1430 + t1441;
t1358 = 0.1e1 + t1373;
t1514 = qJ(3,2) * t1558;
t1475 = pkin(2) * t1514;
t1446 = -t1358 * t1396 + 0.2e1 * t1475;
t1685 = 0.2e1 * t1355;
t1493 = t1358 * t1558;
t1673 = 0.2e1 * t1396 - 0.1e1;
t1517 = t1673 * qJ(3,2);
t1293 = pkin(2) * t1517 + t1493;
t1569 = t1361 * t1418;
t1657 = pkin(1) * t1361;
t1695 = -(qJ(3,2) * t1569 - (t1293 * t1657 + t1635) * t1364) * t1626 - t1430 * t1403;
t1239 = 0.1e1 / (((t1430 / 0.2e1 - t1446 + t1553) * t1685 + t1446) * t1442 + t1695);
t1433 = koppelP(2,2);
t1436 = koppelP(2,1);
t1305 = -t1383 * t1433 + t1384 * t1436;
t1284 = t1305 * t1422 + t1423;
t1592 = t1239 * t1284;
t1200 = t1224 * t1592;
t1336 = 0.2e1 * t1343;
t1227 = (-t1367 * t1710 + t1339 + t1468) * t1364 + (t1370 * t1472 + t1323 + t1336) * t1361 + (-t1259 * t1355 - t1258 * t1571 + (t1352 - 0.2e1 * t1636) * t1418 + t1415 * t1349) * pkin(1);
t1302 = t1383 * t1436 + t1384 * t1433;
t1287 = -t1302 * t1422 + t1424;
t1591 = t1239 * t1287;
t1203 = t1227 * t1591;
t1158 = t1203 + t1200;
t1299 = t1367 * t1373 + t1339;
t1529 = t1409 - t1430 / 0.2e1;
t1682 = -0.2e1 * t1415;
t1248 = t1299 * t1418 + (t1370 * t1529 + t1343) * t1682;
t1254 = (t1370 * t1373 + t1336) * t1418 + t1299 * t1415;
t1330 = -t1381 + t1635;
t1315 = t1349 - t1648;
t1316 = t1352 + t1636;
t1450 = -t1315 * t1558 + t1316 * t1396;
t1451 = -t1315 * t1396 - t1316 * t1558;
t1564 = t1364 * t1370;
t1570 = t1361 * t1367;
t1218 = (t1404 * t1570 - t1564) * qJ(3,2) + (t1248 * t1355 + t1254 * t1571 + t1317 * t1330) * pkin(1) + ((-t1450 + t1352) * t1364 + t1451 * t1361) * t1442;
t1511 = t1361 * t1636;
t1582 = t1349 * t1364;
t1221 = -t1404 * t1511 - t1582 + (t1248 * t1571 - t1254 * t1355 - t1314 * t1330) * pkin(1) + ((t1451 - t1648) * t1364 + t1450 * t1361) * t1442;
t1296 = t1358 * t1367 + t1339;
t1576 = t1358 * t1370;
t1251 = (t1336 + t1576) * t1418 + t1415 * t1296;
t1281 = t1296 * t1418;
t1346 = 0.1e1 / 0.2e1 + t1529;
t1230 = -t1511 - t1582 + (t1251 * t1355 - (t1281 + (t1346 * t1370 + t1343) * t1682) * t1571 - (t1370 * t1441 + t1343 + t1370) * t1418 + qJ(3,2) * t1585) * pkin(1);
t1233 = (-t1564 + t1570) * qJ(3,2) + (-t1281 * t1355 - t1251 * t1571 + (t1367 * t1441 + t1367 - t1532) * t1418 + (-(t1688 - t1576) * t1355 - qJ(3,2) * t1317) * t1415) * pkin(1);
t1131 = ((t1218 + t1233) * t1287 + (t1221 + t1230) * t1284) * t1239;
t1644 = t1131 * pkin(2);
t1095 = t1644 - t1158;
t1631 = t1095 * qJ(3,2);
t1413 = legFrame(1,3);
t1368 = sin(t1413);
t1350 = t1368 * qJ(3,1);
t1371 = cos(t1413);
t1647 = pkin(2) * t1371;
t1318 = t1350 + t1647;
t1353 = t1368 * pkin(2);
t1638 = qJ(3,1) * t1371;
t1321 = t1353 - t1638;
t1416 = sin(qJ(1,1));
t1419 = cos(qJ(1,1));
t1260 = t1318 * t1419 + t1321 * t1416;
t1584 = t1318 * t1416;
t1261 = t1321 * t1419 - t1584;
t1557 = t1416 * t1419;
t1491 = t1442 * t1557;
t1324 = t1368 * t1491;
t1533 = pkin(2) * t1638;
t1340 = -0.2e1 * t1533;
t1401 = qJ(1,1) + qJ(2,1);
t1365 = cos(t1401);
t1356 = t1365 ^ 2;
t1362 = sin(t1401);
t1467 = t1371 * t1491;
t1431 = qJ(3,1) ^ 2;
t1397 = t1419 ^ 2;
t1560 = t1397 * t1442;
t1471 = -0.2e1 * t1431 - t1560;
t1568 = t1362 * t1365;
t1344 = pkin(2) * t1350;
t1687 = -0.2e1 * t1344;
t1382 = pkin(2) * t1419;
t1637 = qJ(3,1) * t1416;
t1706 = -t1637 - t1382;
t1709 = 0.2e1 * t1431 + t1442 - t1560;
t1225 = (t1371 * t1709 + t1324 + t1687) * t1365 + (t1368 * t1471 + t1340 - t1467) * t1362 + (t1260 * t1356 - t1261 * t1568 - 0.2e1 * t1350 * t1419 + t1371 * t1706) * pkin(1);
t1374 = -t1431 + t1441;
t1359 = 0.1e1 + t1374;
t1515 = qJ(3,1) * t1557;
t1476 = pkin(2) * t1515;
t1447 = -t1359 * t1397 + 0.2e1 * t1476;
t1684 = 0.2e1 * t1356;
t1492 = t1359 * t1557;
t1672 = 0.2e1 * t1397 - 0.1e1;
t1516 = t1672 * qJ(3,1);
t1294 = pkin(2) * t1516 + t1492;
t1566 = t1362 * t1419;
t1656 = pkin(1) * t1362;
t1694 = -(qJ(3,1) * t1566 - (t1294 * t1656 + t1637) * t1365) * t1626 - t1431 * t1403;
t1240 = 0.1e1 / (((t1431 / 0.2e1 - t1447 + t1553) * t1684 + t1447) * t1442 + t1694);
t1434 = koppelP(1,2);
t1437 = koppelP(1,1);
t1306 = -t1383 * t1434 + t1384 * t1437;
t1285 = t1306 * t1422 + t1423;
t1589 = t1240 * t1285;
t1201 = t1225 * t1589;
t1337 = 0.2e1 * t1344;
t1228 = (-t1368 * t1709 + t1340 + t1467) * t1365 + (t1371 * t1471 + t1324 + t1337) * t1362 + (-t1261 * t1356 - t1260 * t1568 + (t1353 - 0.2e1 * t1638) * t1419 + t1416 * t1350) * pkin(1);
t1303 = t1383 * t1437 + t1384 * t1434;
t1288 = -t1303 * t1422 + t1424;
t1588 = t1240 * t1288;
t1204 = t1228 * t1588;
t1159 = t1204 + t1201;
t1300 = t1368 * t1374 + t1340;
t1528 = t1409 - t1431 / 0.2e1;
t1681 = -0.2e1 * t1416;
t1249 = t1300 * t1419 + (t1371 * t1528 + t1344) * t1681;
t1255 = (t1371 * t1374 + t1337) * t1419 + t1300 * t1416;
t1331 = -t1382 + t1637;
t1319 = t1350 - t1647;
t1320 = t1353 + t1638;
t1448 = -t1319 * t1557 + t1320 * t1397;
t1449 = -t1319 * t1397 - t1320 * t1557;
t1563 = t1365 * t1371;
t1567 = t1362 * t1368;
t1219 = (t1404 * t1567 - t1563) * qJ(3,1) + (t1249 * t1356 + t1255 * t1568 + t1321 * t1331) * pkin(1) + ((-t1448 + t1353) * t1365 + t1449 * t1362) * t1442;
t1510 = t1362 * t1638;
t1581 = t1350 * t1365;
t1222 = -t1404 * t1510 - t1581 + (t1249 * t1568 - t1255 * t1356 - t1318 * t1331) * pkin(1) + ((t1449 - t1647) * t1365 + t1448 * t1362) * t1442;
t1297 = t1359 * t1368 + t1340;
t1575 = t1359 * t1371;
t1252 = (t1337 + t1575) * t1419 + t1416 * t1297;
t1282 = t1297 * t1419;
t1347 = 0.1e1 / 0.2e1 + t1528;
t1231 = -t1510 - t1581 + (t1252 * t1356 - (t1282 + (t1347 * t1371 + t1344) * t1681) * t1568 - (t1371 * t1441 + t1344 + t1371) * t1419 + qJ(3,1) * t1584) * pkin(1);
t1234 = (-t1563 + t1567) * qJ(3,1) + (-t1282 * t1356 - t1252 * t1568 + (t1368 * t1441 + t1368 - t1533) * t1419 + (-(t1687 - t1575) * t1356 - qJ(3,1) * t1321) * t1416) * pkin(1);
t1132 = ((t1219 + t1234) * t1288 + (t1222 + t1231) * t1285) * t1240;
t1643 = t1132 * pkin(2);
t1096 = t1643 - t1159;
t1630 = t1096 * qJ(3,1);
t1402 = 0.1e1 + t1441;
t1606 = t1220 * t1283;
t1612 = t1217 * t1286;
t1720 = t1238 * (t1612 / 0.4e1 + t1606 / 0.4e1);
t1604 = t1221 * t1284;
t1610 = t1218 * t1287;
t1719 = t1239 * (t1610 / 0.4e1 + t1604 / 0.4e1);
t1602 = t1222 * t1285;
t1608 = t1219 * t1288;
t1718 = t1240 * (t1608 / 0.4e1 + t1602 / 0.4e1);
t1171 = (t1231 * t1285 + t1234 * t1288) * t1240;
t1170 = (t1230 * t1284 + t1233 * t1287) * t1239;
t1169 = (t1229 * t1283 + t1232 * t1286) * t1238;
t1113 = t1130 * t1429;
t1052 = -pkin(2) * t1157 + t1130 * t1441 + t1113;
t1163 = t1442 * t1169;
t1034 = t1052 + t1163 + t1169;
t1088 = t1094 * pkin(2);
t1056 = t1113 + t1088;
t1038 = t1163 + t1056;
t1127 = ((t1232 + t1217 / 0.2e1) * t1286 + (t1229 + t1220 / 0.2e1) * t1283) * t1238;
t1103 = t1127 * pkin(2);
t1547 = -t1199 / 0.2e1 - t1202 / 0.2e1;
t1081 = t1103 + t1547;
t1652 = pkin(2) * t1081;
t1046 = -t1127 * t1429 + t1652;
t1057 = t1088 - t1113;
t1548 = -t1199 / 0.4e1 - t1202 / 0.4e1;
t1080 = t1103 + t1548;
t1091 = t1645 + t1547;
t1497 = t1232 * t1594;
t1500 = t1229 * t1595;
t1542 = t1500 / 0.2e1 + t1497 / 0.2e1;
t1106 = t1542 + t1720;
t1107 = (t1612 / 0.2e1 + t1606 / 0.2e1) * t1238 + t1542;
t1629 = t1417 * qJ(3,3);
t1642 = t1414 * pkin(2);
t1326 = t1629 + t1642;
t1426 = -pkin(2) / 0.2e1;
t1536 = t1395 - 0.1e1 / 0.2e1;
t1479 = t1536 * qJ(3,3);
t1488 = t1107 * pkin(2) + t1547;
t1622 = t1130 * t1157;
t1503 = t1238 * t1622;
t1509 = qJ(3,3) * t1562;
t1521 = t1329 * t1658;
t1539 = -t1497 / 0.4e1 - t1500 / 0.4e1;
t1580 = t1354 * t1442;
t1552 = 0.1e1 / 0.4e1 + t1441 / 0.4e1;
t1268 = -t1345 * t1395 + t1474 - t1429 / 0.4e1 + t1552;
t1235 = 0.1e1 / ((0.4e1 * t1268 * t1354 - t1445) * t1442 - t1696);
t1616 = t1169 * t1235;
t1151 = (t1606 + t1612) * t1238;
t1619 = t1151 * t1235;
t1655 = pkin(1) * t1363;
t1675 = t1404 / 0.2e1;
t1680 = pkin(2) / 0.2e1;
t1690 = -0.2e1 * qJ(3,3);
t1019 = (-0.4e1 * (t1046 * t1559 + t1080 * t1518) * t1580 - (0.8e1 * ((t1106 * t1429 - t1652 / 0.2e1) * t1395 + t1080 * t1513 + ((-t1612 / 0.8e1 - t1606 / 0.8e1) * t1238 + t1539) * t1429 + t1652 / 0.4e1) * t1658 + t1034 * t1629 + t1038 * t1642) * t1655 - (t1034 * t1633 - t1038 * t1380) * t1658 + 0.4e1 * t1080 * t1509 + 0.2e1 * t1046 * t1490 + (t1081 * t1442 + t1488) * t1690) * t1616 + (-0.2e1 * (t1057 * t1559 + t1091 * t1518) * t1580 - 0.4e1 * ((t1107 * t1429 - t1088 / 0.2e1) * t1395 + t1091 * t1513 + (t1539 - t1720) * t1429 + t1088 / 0.4e1) * t1658 * t1655 + 0.2e1 * t1091 * t1509 + t1057 * t1490 - t1404 * t1632 + (-t1326 * t1655 - t1521) * t1056) * t1619 - 0.2e1 * ((pkin(2) * t1559 + t1479) * t1580 - ((pkin(2) * t1395 + t1426 - t1513) * t1658 + t1326 * t1426) * t1655 + t1521 * t1680 - t1509 / 0.2e1 + t1490 * t1426 + qJ(3,3) * t1675) * t1503;
t1551 = 0.2e1 * t1217 * t1594 + 0.2e1 * t1220 * t1595;
t1037 = t1163 + (0.4e1 * t1169 + t1551) * t1429 + t1088;
t1112 = (0.2e1 * t1169 + t1551) * t1429;
t1055 = t1112 + t1088;
t1079 = -t1202 / 0.3e1 - t1199 / 0.3e1 + ((t1232 + t1217 / 0.3e1) * t1286 + (t1229 + t1220 / 0.3e1) * t1283) * pkin(2) * t1238;
t1676 = pkin(2) * qJ(3,3);
t1022 = (0.4e1 * (t1081 * t1559 + t1127 * t1479) * t1580 + (0.4e1 * (t1106 * pkin(2) - t1081 * t1395 + t1127 * t1513 + t1548) * t1658 - 0.3e1 * t1079 * t1629 + t1037 * t1414) * t1655 - (t1037 * t1417 + 0.3e1 * t1079 * t1633) * t1658 - 0.2e1 * t1127 * t1509 - 0.2e1 * t1081 * t1490 - qJ(3,3) * (t1163 + t1112 + 0.2e1 * t1088)) * t1616 + (0.2e1 * (t1094 * t1559 + t1130 * t1479) * t1580 + 0.2e1 * ((-t1094 * t1395 + t1130 * t1513 + t1488) * t1658 - t1094 * t1629 / 0.2e1 + t1055 * t1414 / 0.2e1) * t1655 - (t1055 * t1417 + t1414 * t1632) * t1658 - t1130 * t1509 - t1094 * t1490 + t1056 * t1690) * t1619 + 0.2e1 * (-(t1536 * t1658 - t1642 / 0.2e1 + t1629 / 0.2e1) * t1655 + t1708 * t1658 / 0.2e1 - t1676 + (t1354 - 0.1e1 / 0.2e1) * t1490) * t1503;
t1043 = t1052 - t1169;
t1049 = pkin(2) * t1113 + t1094 * t1402;
t1440 = pkin(2) * t1441;
t1699 = t1130 * (pkin(2) * (0.1e1 + t1429) + t1440) - t1402 * t1157;
t1025 = (0.4e1 * (t1169 * t1268 * t1658 + t1043 * t1629 / 0.4e1 + t1049 * t1414 / 0.4e1) * t1655 + (t1043 * t1633 - t1049 * t1417) * t1658 - t1632 + (t1292 * t1686 - t1674 * t1676 - t1494) * t1163) * t1616 + (-t1632 + ((t1052 * t1629 + t1414 * t1699) * t1363 + (t1052 * t1633 - t1417 * t1699) * t1360) * pkin(1)) * t1619 + (-qJ(3,3) + ((pkin(2) * t1629 + t1402 * t1414) * t1363 - (-pkin(2) * t1633 + t1402 * t1417) * t1360) * pkin(1)) * t1503;
t1679 = m(2) * rSges(2,1);
t1325 = (t1680 + rSges(3,1) / 0.2e1) * m(3) + t1679 / 0.2e1;
t1420 = pkin(2) + rSges(3,1);
t1031 = -t1169 * t1157 * m(3) + ((t1169 * t1420 - t1157) * m(3) + t1169 * t1679 + t1325 * t1151) * t1151;
t1405 = qJ(3,3) + rSges(3,3);
t1665 = m(3) * t1405;
t1076 = 0.2e1 * t1622 * t1665;
t1421 = m(2) * rSges(2,2);
t1332 = t1421 - t1665;
t1662 = m(3) * t1420;
t1341 = t1662 + t1679;
t1274 = t1332 * t1417 - t1341 * t1414;
t1265 = t1274 * t1658;
t1466 = rSges(3,3) ^ 2 + t1441 + (0.2e1 * pkin(2) + rSges(3,1)) * rSges(3,1);
t1693 = 0.2e1 * rSges(3,3);
t1307 = qJ(3,3) * t1693 + t1429 + t1466;
t1378 = rSges(2,1) ^ 2 + rSges(2,2) ^ 2;
t1639 = Icges(3,2) + Icges(2,3);
t1444 = Icges(1,3) + (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) + (t1442 + t1378) * m(2) + t1639;
t1277 = t1332 * t1414 + t1341 * t1417;
t1524 = t1277 * t1655;
t1241 = 0.2e1 * t1524 - 0.2e1 * t1265 + (t1442 + t1307) * m(3) + t1444;
t1470 = t1378 * m(2) + t1639;
t1271 = m(3) * t1307 + t1470;
t1244 = -t1265 + t1271 + t1524;
t1506 = t1127 * t1151 * t1332;
t1289 = (t1360 * t1414 + t1363 * t1417) * pkin(1) + t1420;
t1668 = m(3) * t1289;
t1717 = -t1019 * t1244 + t1022 * t1668 - t1025 * t1241 + t1076 + (-(-t1031 * t1414 + t1417 * t1506) * t1363 - (t1031 * t1417 + t1414 * t1506) * t1360) * t1626;
t1115 = t1131 * t1430;
t1053 = -pkin(2) * t1158 + t1131 * t1441 + t1115;
t1164 = t1442 * t1170;
t1035 = t1053 + t1164 + t1170;
t1089 = t1095 * pkin(2);
t1059 = t1115 + t1089;
t1040 = t1164 + t1059;
t1128 = ((t1233 + t1218 / 0.2e1) * t1287 + (t1230 + t1221 / 0.2e1) * t1284) * t1239;
t1104 = t1128 * pkin(2);
t1545 = -t1200 / 0.2e1 - t1203 / 0.2e1;
t1084 = t1104 + t1545;
t1651 = pkin(2) * t1084;
t1047 = -t1128 * t1430 + t1651;
t1060 = t1089 - t1115;
t1546 = -t1200 / 0.4e1 - t1203 / 0.4e1;
t1083 = t1104 + t1546;
t1092 = t1644 + t1545;
t1496 = t1233 * t1591;
t1499 = t1230 * t1592;
t1541 = t1499 / 0.2e1 + t1496 / 0.2e1;
t1108 = t1541 + t1719;
t1109 = (t1610 / 0.2e1 + t1604 / 0.2e1) * t1239 + t1541;
t1628 = t1418 * qJ(3,2);
t1641 = t1415 * pkin(2);
t1327 = t1628 + t1641;
t1535 = t1396 - 0.1e1 / 0.2e1;
t1478 = t1535 * qJ(3,2);
t1487 = t1109 * pkin(2) + t1545;
t1621 = t1131 * t1158;
t1502 = t1239 * t1621;
t1508 = qJ(3,2) * t1561;
t1520 = t1330 * t1657;
t1538 = -t1496 / 0.4e1 - t1499 / 0.4e1;
t1579 = t1355 * t1442;
t1269 = -t1346 * t1396 + t1475 - t1430 / 0.4e1 + t1552;
t1236 = 0.1e1 / ((0.4e1 * t1269 * t1355 - t1446) * t1442 - t1695);
t1615 = t1170 * t1236;
t1152 = (t1604 + t1610) * t1239;
t1618 = t1152 * t1236;
t1654 = pkin(1) * t1364;
t1691 = -0.2e1 * qJ(3,2);
t1021 = (-0.4e1 * (t1047 * t1558 + t1083 * t1517) * t1579 - (0.8e1 * ((t1108 * t1430 - t1651 / 0.2e1) * t1396 + t1083 * t1514 + ((-t1610 / 0.8e1 - t1604 / 0.8e1) * t1239 + t1538) * t1430 + t1651 / 0.4e1) * t1657 + t1035 * t1628 + t1040 * t1641) * t1654 - (t1035 * t1635 - t1040 * t1381) * t1657 + 0.4e1 * t1083 * t1508 + 0.2e1 * t1047 * t1489 + (t1084 * t1442 + t1487) * t1691) * t1615 + (-0.2e1 * (t1060 * t1558 + t1092 * t1517) * t1579 - 0.4e1 * ((t1109 * t1430 - t1089 / 0.2e1) * t1396 + t1092 * t1514 + (t1538 - t1719) * t1430 + t1089 / 0.4e1) * t1657 * t1654 + 0.2e1 * t1092 * t1508 + t1060 * t1489 - t1404 * t1631 + (-t1327 * t1654 - t1520) * t1059) * t1618 - 0.2e1 * ((pkin(2) * t1558 + t1478) * t1579 - ((pkin(2) * t1396 + t1426 - t1514) * t1657 + t1327 * t1426) * t1654 + t1520 * t1680 - t1508 / 0.2e1 + t1489 * t1426 + qJ(3,2) * t1675) * t1502;
t1550 = 0.2e1 * t1218 * t1591 + 0.2e1 * t1221 * t1592;
t1039 = t1164 + (0.4e1 * t1170 + t1550) * t1430 + t1089;
t1114 = (0.2e1 * t1170 + t1550) * t1430;
t1058 = t1114 + t1089;
t1082 = -t1203 / 0.3e1 - t1200 / 0.3e1 + ((t1233 + t1218 / 0.3e1) * t1287 + (t1230 + t1221 / 0.3e1) * t1284) * pkin(2) * t1239;
t1677 = pkin(2) * qJ(3,2);
t1024 = (0.4e1 * (t1084 * t1558 + t1128 * t1478) * t1579 + (0.4e1 * (t1108 * pkin(2) - t1084 * t1396 + t1128 * t1514 + t1546) * t1657 - 0.3e1 * t1082 * t1628 + t1039 * t1415) * t1654 - (t1039 * t1418 + 0.3e1 * t1082 * t1635) * t1657 - 0.2e1 * t1128 * t1508 - 0.2e1 * t1084 * t1489 - qJ(3,2) * (t1164 + t1114 + 0.2e1 * t1089)) * t1615 + (0.2e1 * (t1095 * t1558 + t1131 * t1478) * t1579 + 0.2e1 * ((-t1095 * t1396 + t1131 * t1514 + t1487) * t1657 - t1095 * t1628 / 0.2e1 + t1058 * t1415 / 0.2e1) * t1654 - (t1058 * t1418 + t1415 * t1631) * t1657 - t1131 * t1508 - t1095 * t1489 + t1059 * t1691) * t1618 + 0.2e1 * (-(t1535 * t1657 - t1641 / 0.2e1 + t1628 / 0.2e1) * t1654 + t1707 * t1657 / 0.2e1 - t1677 + (t1355 - 0.1e1 / 0.2e1) * t1489) * t1502;
t1044 = t1053 - t1170;
t1050 = pkin(2) * t1115 + t1095 * t1402;
t1698 = t1131 * (pkin(2) * (0.1e1 + t1430) + t1440) - t1402 * t1158;
t1026 = (0.4e1 * (t1170 * t1269 * t1657 + t1044 * t1628 / 0.4e1 + t1050 * t1415 / 0.4e1) * t1654 + (t1044 * t1635 - t1050 * t1418) * t1657 - t1631 + (t1293 * t1685 - t1673 * t1677 - t1493) * t1164) * t1615 + (-t1631 + ((t1053 * t1628 + t1415 * t1698) * t1364 + (t1053 * t1635 - t1418 * t1698) * t1361) * pkin(1)) * t1618 + (-qJ(3,2) + ((pkin(2) * t1628 + t1402 * t1415) * t1364 - (-pkin(2) * t1635 + t1402 * t1418) * t1361) * pkin(1)) * t1502;
t1032 = -t1170 * t1158 * m(3) + ((t1170 * t1420 - t1158) * m(3) + t1170 * t1679 + t1325 * t1152) * t1152;
t1406 = qJ(3,2) + rSges(3,3);
t1664 = m(3) * t1406;
t1077 = 0.2e1 * t1621 * t1664;
t1333 = t1421 - t1664;
t1275 = t1333 * t1418 - t1341 * t1415;
t1266 = t1275 * t1657;
t1308 = qJ(3,2) * t1693 + t1430 + t1466;
t1278 = t1333 * t1415 + t1341 * t1418;
t1523 = t1278 * t1654;
t1242 = 0.2e1 * t1523 - 0.2e1 * t1266 + (t1442 + t1308) * m(3) + t1444;
t1272 = m(3) * t1308 + t1470;
t1245 = -t1266 + t1272 + t1523;
t1505 = t1128 * t1152 * t1333;
t1290 = (t1361 * t1415 + t1364 * t1418) * pkin(1) + t1420;
t1667 = m(3) * t1290;
t1716 = -t1021 * t1245 + t1024 * t1667 - t1026 * t1242 + t1077 + (-(-t1032 * t1415 + t1418 * t1505) * t1364 - (t1032 * t1418 + t1415 * t1505) * t1361) * t1626;
t1117 = t1132 * t1431;
t1054 = -pkin(2) * t1159 + t1132 * t1441 + t1117;
t1165 = t1442 * t1171;
t1036 = t1054 + t1165 + t1171;
t1090 = t1096 * pkin(2);
t1062 = t1117 + t1090;
t1042 = t1165 + t1062;
t1129 = ((t1234 + t1219 / 0.2e1) * t1288 + (t1231 + t1222 / 0.2e1) * t1285) * t1240;
t1105 = t1129 * pkin(2);
t1543 = -t1201 / 0.2e1 - t1204 / 0.2e1;
t1087 = t1105 + t1543;
t1650 = pkin(2) * t1087;
t1048 = -t1129 * t1431 + t1650;
t1063 = t1090 - t1117;
t1544 = -t1201 / 0.4e1 - t1204 / 0.4e1;
t1086 = t1105 + t1544;
t1093 = t1643 + t1543;
t1495 = t1234 * t1588;
t1498 = t1231 * t1589;
t1540 = t1498 / 0.2e1 + t1495 / 0.2e1;
t1110 = t1540 + t1718;
t1111 = (t1608 / 0.2e1 + t1602 / 0.2e1) * t1240 + t1540;
t1627 = t1419 * qJ(3,1);
t1640 = t1416 * pkin(2);
t1328 = t1627 + t1640;
t1534 = t1397 - 0.1e1 / 0.2e1;
t1477 = t1534 * qJ(3,1);
t1486 = t1111 * pkin(2) + t1543;
t1620 = t1132 * t1159;
t1501 = t1240 * t1620;
t1507 = qJ(3,1) * t1560;
t1519 = t1331 * t1656;
t1537 = -t1495 / 0.4e1 - t1498 / 0.4e1;
t1578 = t1356 * t1442;
t1270 = -t1347 * t1397 + t1476 - t1431 / 0.4e1 + t1552;
t1237 = 0.1e1 / ((0.4e1 * t1270 * t1356 - t1447) * t1442 - t1694);
t1614 = t1171 * t1237;
t1153 = (t1602 + t1608) * t1240;
t1617 = t1153 * t1237;
t1653 = pkin(1) * t1365;
t1692 = -0.2e1 * qJ(3,1);
t1020 = (-0.4e1 * (t1048 * t1557 + t1086 * t1516) * t1578 - (0.8e1 * ((t1110 * t1431 - t1650 / 0.2e1) * t1397 + t1086 * t1515 + ((-t1608 / 0.8e1 - t1602 / 0.8e1) * t1240 + t1537) * t1431 + t1650 / 0.4e1) * t1656 + t1036 * t1627 + t1042 * t1640) * t1653 - (t1036 * t1637 - t1042 * t1382) * t1656 + 0.4e1 * t1086 * t1507 + 0.2e1 * t1048 * t1491 + (t1087 * t1442 + t1486) * t1692) * t1614 + (-0.2e1 * (t1063 * t1557 + t1093 * t1516) * t1578 - 0.4e1 * ((t1111 * t1431 - t1090 / 0.2e1) * t1397 + t1093 * t1515 + (t1537 - t1718) * t1431 + t1090 / 0.4e1) * t1656 * t1653 + 0.2e1 * t1093 * t1507 + t1063 * t1491 - t1404 * t1630 + (-t1328 * t1653 - t1519) * t1062) * t1617 - 0.2e1 * ((pkin(2) * t1557 + t1477) * t1578 - ((pkin(2) * t1397 + t1426 - t1515) * t1656 + t1328 * t1426) * t1653 + t1519 * t1680 - t1507 / 0.2e1 + t1491 * t1426 + qJ(3,1) * t1675) * t1501;
t1549 = 0.2e1 * t1219 * t1588 + 0.2e1 * t1222 * t1589;
t1041 = t1165 + (0.4e1 * t1171 + t1549) * t1431 + t1090;
t1116 = (0.2e1 * t1171 + t1549) * t1431;
t1061 = t1116 + t1090;
t1085 = -t1204 / 0.3e1 - t1201 / 0.3e1 + ((t1234 + t1219 / 0.3e1) * t1288 + (t1231 + t1222 / 0.3e1) * t1285) * pkin(2) * t1240;
t1678 = pkin(2) * qJ(3,1);
t1023 = (0.4e1 * (t1087 * t1557 + t1129 * t1477) * t1578 + (0.4e1 * (t1110 * pkin(2) - t1087 * t1397 + t1129 * t1515 + t1544) * t1656 - 0.3e1 * t1085 * t1627 + t1041 * t1416) * t1653 - (t1041 * t1419 + 0.3e1 * t1085 * t1637) * t1656 - 0.2e1 * t1129 * t1507 - 0.2e1 * t1087 * t1491 - qJ(3,1) * (t1165 + t1116 + 0.2e1 * t1090)) * t1614 + (0.2e1 * (t1096 * t1557 + t1132 * t1477) * t1578 + 0.2e1 * ((-t1096 * t1397 + t1132 * t1515 + t1486) * t1656 - t1096 * t1627 / 0.2e1 + t1061 * t1416 / 0.2e1) * t1653 - (t1061 * t1419 + t1416 * t1630) * t1656 - t1132 * t1507 - t1096 * t1491 + t1062 * t1692) * t1617 + 0.2e1 * (-(t1534 * t1656 - t1640 / 0.2e1 + t1627 / 0.2e1) * t1653 + t1706 * t1656 / 0.2e1 - t1678 + (t1356 - 0.1e1 / 0.2e1) * t1491) * t1501;
t1045 = t1054 - t1171;
t1051 = pkin(2) * t1117 + t1096 * t1402;
t1697 = t1132 * (pkin(2) * (0.1e1 + t1431) + t1440) - t1402 * t1159;
t1027 = (0.4e1 * (t1171 * t1270 * t1656 + t1045 * t1627 / 0.4e1 + t1051 * t1416 / 0.4e1) * t1653 + (t1045 * t1637 - t1051 * t1419) * t1656 - t1630 + (t1294 * t1684 - t1672 * t1678 - t1492) * t1165) * t1614 + (-t1630 + ((t1054 * t1627 + t1416 * t1697) * t1365 + (t1054 * t1637 - t1419 * t1697) * t1362) * pkin(1)) * t1617 + (-qJ(3,1) + ((pkin(2) * t1627 + t1402 * t1416) * t1365 - (-pkin(2) * t1637 + t1402 * t1419) * t1362) * pkin(1)) * t1501;
t1033 = -t1171 * t1159 * m(3) + ((t1171 * t1420 - t1159) * m(3) + t1171 * t1679 + t1325 * t1153) * t1153;
t1407 = qJ(3,1) + rSges(3,3);
t1663 = m(3) * t1407;
t1078 = 0.2e1 * t1620 * t1663;
t1334 = t1421 - t1663;
t1276 = t1334 * t1419 - t1341 * t1416;
t1267 = t1276 * t1656;
t1309 = qJ(3,1) * t1693 + t1431 + t1466;
t1279 = t1334 * t1416 + t1341 * t1419;
t1522 = t1279 * t1653;
t1243 = 0.2e1 * t1522 - 0.2e1 * t1267 + (t1442 + t1309) * m(3) + t1444;
t1273 = m(3) * t1309 + t1470;
t1246 = -t1267 + t1273 + t1522;
t1504 = t1129 * t1153 * t1334;
t1291 = (t1362 * t1416 + t1365 * t1419) * pkin(1) + t1420;
t1666 = m(3) * t1291;
t1715 = -t1020 * t1246 + t1023 * t1666 - t1027 * t1243 + t1078 + (-(-t1033 * t1416 + t1419 * t1504) * t1365 - (t1033 * t1419 + t1416 * t1504) * t1362) * t1626;
t1661 = pkin(1) * t1169 ^ 2;
t1714 = -t1019 * t1271 + t1022 * t1662 - t1025 * t1244 + t1076 + (t1274 * t1363 + t1277 * t1360) * t1661;
t1660 = pkin(1) * t1170 ^ 2;
t1713 = -t1021 * t1272 + t1024 * t1662 - t1026 * t1245 + t1077 + (t1275 * t1364 + t1278 * t1361) * t1660;
t1659 = pkin(1) * t1171 ^ 2;
t1712 = -t1020 * t1273 + t1023 * t1662 - t1027 * t1246 + t1078 + (t1276 * t1365 + t1279 * t1362) * t1659;
t1705 = t1238 * t1717;
t1704 = t1238 * t1714;
t1703 = t1239 * t1716;
t1702 = t1239 * t1713;
t1701 = t1240 * t1715;
t1700 = t1240 * t1712;
t1398 = t1422 ^ 2;
t1671 = m(3) * t1238;
t1670 = m(3) * t1239;
t1669 = m(3) * t1240;
t1646 = m(4) * t1398;
t1016 = (t1019 * t1420 + t1025 * t1289 - t1022) * m(3);
t1625 = t1016 * t1238;
t1017 = (t1021 * t1420 + t1026 * t1290 - t1024) * m(3);
t1624 = t1017 * t1239;
t1018 = (t1020 * t1420 + t1027 * t1291 - t1023) * m(3);
t1623 = t1018 * t1240;
t1593 = t1238 * t1398;
t1590 = t1239 * t1398;
t1587 = t1240 * t1398;
t1067 = -t1130 ^ 2 * t1405 + (t1363 * t1414 - t1572) * t1661;
t1527 = t1067 * t1671;
t1068 = -t1131 ^ 2 * t1406 + (t1364 * t1415 - t1569) * t1660;
t1526 = t1068 * t1670;
t1069 = -t1132 ^ 2 * t1407 + (t1365 * t1416 - t1566) * t1659;
t1525 = t1069 * t1669;
t1428 = rSges(4,1);
t1427 = rSges(4,2);
t1174 = (t1231 * t1306 - t1234 * t1303) * t1240;
t1173 = (t1230 * t1305 - t1233 * t1302) * t1239;
t1172 = (t1229 * t1304 - t1232 * t1301) * t1238;
t1162 = (t1225 * t1306 - t1228 * t1303) * t1240;
t1161 = (t1224 * t1305 - t1227 * t1302) * t1239;
t1160 = (t1223 * t1304 - t1226 * t1301) * t1238;
t1156 = (-t1219 * t1303 + t1222 * t1306) * t1240;
t1155 = (-t1218 * t1302 + t1221 * t1305) * t1239;
t1154 = (-t1217 * t1301 + t1220 * t1304) * t1238;
t1150 = (-t1219 * t1420 - t1234 * t1291 + t1228) * t1669;
t1149 = (-t1218 * t1420 - t1233 * t1290 + t1227) * t1670;
t1148 = (-t1217 * t1420 - t1232 * t1289 + t1226) * t1671;
t1147 = (-t1222 * t1420 - t1231 * t1291 + t1225) * t1669;
t1146 = (-t1221 * t1420 - t1230 * t1290 + t1224) * t1670;
t1145 = (-t1220 * t1420 - t1229 * t1289 + t1223) * t1671;
t1144 = (t1219 * t1273 - t1228 * t1662 + t1234 * t1246) * t1240;
t1143 = (t1218 * t1272 - t1227 * t1662 + t1233 * t1245) * t1239;
t1142 = (t1217 * t1271 - t1226 * t1662 + t1232 * t1244) * t1238;
t1141 = (t1222 * t1273 - t1225 * t1662 + t1231 * t1246) * t1240;
t1140 = (t1221 * t1272 - t1224 * t1662 + t1230 * t1245) * t1239;
t1139 = (t1220 * t1271 - t1223 * t1662 + t1229 * t1244) * t1238;
t1138 = (t1219 * t1246 - t1228 * t1666 + t1234 * t1243) * t1240;
t1137 = (t1218 * t1245 - t1227 * t1667 + t1233 * t1242) * t1239;
t1136 = (t1217 * t1244 - t1226 * t1668 + t1232 * t1241) * t1238;
t1135 = (t1222 * t1246 - t1225 * t1666 + t1231 * t1243) * t1240;
t1134 = (t1221 * t1245 - t1224 * t1667 + t1230 * t1242) * t1239;
t1133 = (t1220 * t1244 - t1223 * t1668 + t1229 * t1241) * t1238;
t1099 = (-t1156 * t1420 - t1174 * t1291 + t1162) * m(3);
t1098 = (-t1155 * t1420 - t1173 * t1290 + t1161) * m(3);
t1097 = (-t1154 * t1420 - t1172 * t1289 + t1160) * m(3);
t1075 = t1156 * t1273 - t1162 * t1662 + t1174 * t1246;
t1074 = t1155 * t1272 - t1161 * t1662 + t1173 * t1245;
t1073 = t1154 * t1271 - t1160 * t1662 + t1172 * t1244;
t1072 = t1156 * t1246 - t1162 * t1666 + t1174 * t1243;
t1071 = t1155 * t1245 - t1161 * t1667 + t1173 * t1242;
t1070 = t1154 * t1244 - t1160 * t1668 + t1172 * t1241;
t1 = [(-(t1138 * t1234 + t1144 * t1219 + t1150 * t1228) * t1306 - (t1138 * t1231 + t1144 * t1222 + t1150 * t1225) * t1303) * t1587 + t1228 * t1623 + t1228 * t1525 + (-(t1137 * t1233 + t1143 * t1218 + t1149 * t1227) * t1305 - (t1137 * t1230 + t1143 * t1221 + t1149 * t1224) * t1302) * t1590 + t1227 * t1624 + t1227 * t1526 + (-(t1136 * t1232 + t1142 * t1217 + t1148 * t1226) * t1304 - (t1136 * t1229 + t1142 * t1220 + t1148 * t1223) * t1301) * t1593 + t1226 * t1625 + t1226 * t1527 + (t1383 * t1427 - t1384 * t1428) * t1646 + t1217 * t1704 + t1218 * t1702 + t1219 * t1700 + t1232 * t1705 + t1233 * t1703 + t1234 * t1701; (-(t1135 * t1234 + t1141 * t1219 + t1147 * t1228) * t1306 - (t1135 * t1231 + t1141 * t1222 + t1147 * t1225) * t1303) * t1587 + t1225 * t1623 + t1225 * t1525 + (-(t1134 * t1233 + t1140 * t1218 + t1146 * t1227) * t1305 - (t1134 * t1230 + t1140 * t1221 + t1146 * t1224) * t1302) * t1590 + t1224 * t1624 + t1224 * t1526 + (-(t1133 * t1232 + t1139 * t1217 + t1145 * t1226) * t1304 - (t1133 * t1229 + t1139 * t1220 + t1145 * t1223) * t1301) * t1593 + t1223 * t1625 + t1223 * t1527 - (t1383 * t1428 + t1384 * t1427) * t1646 + t1220 * t1704 + t1221 * t1702 + t1222 * t1700 + t1229 * t1705 + t1230 * t1703 + t1231 * t1701; (-(t1072 * t1234 + t1075 * t1219 + t1099 * t1228) * t1306 - (t1072 * t1231 + t1075 * t1222 + t1099 * t1225) * t1303) * t1587 + t1162 * t1018 + (-(t1071 * t1233 + t1074 * t1218 + t1098 * t1227) * t1305 - (t1071 * t1230 + t1074 * t1221 + t1098 * t1224) * t1302) * t1590 + t1161 * t1017 + (-(t1070 * t1232 + t1073 * t1217 + t1097 * t1226) * t1304 - (t1070 * t1229 + t1073 * t1220 + t1097 * t1223) * t1301) * t1593 + t1160 * t1016 + t1715 * t1174 + t1716 * t1173 + t1717 * t1172 + t1712 * t1156 + t1713 * t1155 + t1714 * t1154 + (t1067 * t1160 + t1068 * t1161 + t1069 * t1162) * m(3);];
taucX  = t1;
