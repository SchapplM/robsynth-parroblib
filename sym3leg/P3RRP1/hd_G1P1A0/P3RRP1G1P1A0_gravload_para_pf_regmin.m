% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRP1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,d1,d2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x13]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-03 15:31
% Revision: abbb0d669c4fc7889a31e0cf750ab51a4f2eb1ce (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRP1G1P1A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRP1G1P1A0_gravload_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRP1G1P1A0_gravload_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRP1G1P1A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRP1G1P1A0_gravload_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRP1G1P1A0_gravload_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRP1G1P1A0_gravload_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-03 15:18:44
% EndTime: 2019-05-03 15:18:54
% DurationCPUTime: 10.73s
% Computational Cost: add. (9401->645), mult. (20449->983), div. (117->6), fcn. (7609->20), ass. (0->453)
t3378 = legFrame(3,3);
t3328 = sin(t3378);
t3331 = cos(t3378);
t3236 = -t3328 * g(1) + g(2) * t3331;
t3239 = g(1) * t3331 + g(2) * t3328;
t3369 = qJ(1,3) + qJ(2,3);
t3322 = sin(t3369);
t3325 = cos(t3369);
t3142 = t3236 * t3322 + t3239 * t3325;
t3379 = legFrame(2,3);
t3329 = sin(t3379);
t3332 = cos(t3379);
t3237 = -t3329 * g(1) + g(2) * t3332;
t3240 = g(1) * t3332 + g(2) * t3329;
t3370 = qJ(1,2) + qJ(2,2);
t3323 = sin(t3370);
t3326 = cos(t3370);
t3146 = t3237 * t3323 + t3240 * t3326;
t3380 = legFrame(1,3);
t3330 = sin(t3380);
t3333 = cos(t3380);
t3238 = -t3330 * g(1) + g(2) * t3333;
t3241 = g(1) * t3333 + g(2) * t3330;
t3371 = qJ(1,1) + qJ(2,1);
t3324 = sin(t3371);
t3327 = cos(t3371);
t3150 = t3238 * t3324 + t3241 * t3327;
t3524 = qJ(3,1) * t3333;
t3453 = pkin(2) * t3524;
t3285 = -0.2e1 * t3453;
t3391 = qJ(3,1) ^ 2;
t3398 = pkin(2) ^ 2;
t3336 = -t3391 + t3398;
t3199 = t3330 * t3336 + t3285;
t3294 = t3330 * qJ(3,1);
t3288 = pkin(2) * t3294;
t3386 = cos(qJ(1,1));
t3376 = t3398 / 0.2e1;
t3442 = t3376 - t3391 / 0.2e1;
t3383 = sin(qJ(1,1));
t3537 = -0.2e1 * t3383;
t3121 = t3199 * t3386 + (t3333 * t3442 + t3288) * t3537;
t3282 = 0.2e1 * t3288;
t3127 = (t3333 * t3336 + t3282) * t3386 + t3199 * t3383;
t3530 = pkin(2) * t3333;
t3220 = t3294 + t3530;
t3523 = qJ(3,1) * t3383;
t3527 = pkin(2) * t3386;
t3255 = t3523 - t3527;
t3318 = t3327 ^ 2;
t3399 = (pkin(1) ^ 2);
t3374 = 1 + t3399;
t3221 = t3294 - t3530;
t3306 = t3330 * pkin(2);
t3222 = t3306 + t3524;
t3368 = t3386 ^ 2;
t3465 = t3383 * t3386;
t3403 = -t3221 * t3465 + t3222 * t3368;
t3404 = -t3221 * t3368 - t3222 * t3465;
t3439 = t3324 * t3524;
t3478 = t3324 * t3327;
t3486 = t3294 * t3327;
t3082 = -t3374 * t3439 - t3486 + (t3121 * t3478 - t3127 * t3318 - t3220 * t3255) * pkin(1) + ((t3404 - t3530) * t3327 + t3403 * t3324) * t3399;
t3321 = 0.1e1 + t3336;
t3196 = t3321 * t3330 + t3285;
t3483 = t3321 * t3333;
t3124 = (t3282 + t3483) * t3386 + t3383 * t3196;
t3193 = t3196 * t3386;
t3291 = 0.1e1 / 0.2e1 + t3442;
t3489 = t3220 * t3383;
t3085 = -t3439 - t3486 + (t3124 * t3318 - (t3193 + (t3291 * t3333 + t3288) * t3537) * t3478 - (t3333 * t3398 + t3288 + t3333) * t3386 + qJ(3,1) * t3489) * pkin(1);
t3535 = pkin(2) * qJ(3,1);
t3426 = t3465 * t3535;
t3402 = -t3321 * t3368 + 0.2e1 * t3426;
t3455 = -0.1e1 / 0.2e1 - t3398 / 0.2e1;
t3373 = 2 + t3399;
t3516 = 0.2e1 * pkin(1);
t3525 = qJ(3,1) * t3324;
t3543 = -(-(pkin(1) * (t3321 * t3465 + (0.2e1 * t3368 - 0.1e1) * t3535) * t3324 + t3523) * t3327 + t3386 * t3525) * t3516 - t3391 * t3373;
t3094 = 0.1e1 / ((0.2e1 * (t3391 / 0.2e1 - t3402 + t3455) * t3318 + t3402) * t3399 + t3543);
t3427 = t3094 * (t3082 + t3085);
t3521 = qJ(3,2) * t3332;
t3450 = pkin(2) * t3521;
t3284 = -0.2e1 * t3450;
t3390 = qJ(3,2) ^ 2;
t3335 = -t3390 + t3398;
t3198 = t3329 * t3335 + t3284;
t3293 = t3329 * qJ(3,2);
t3287 = pkin(2) * t3293;
t3385 = cos(qJ(1,2));
t3443 = t3376 - t3390 / 0.2e1;
t3382 = sin(qJ(1,2));
t3538 = -0.2e1 * t3382;
t3120 = t3198 * t3385 + (t3332 * t3443 + t3287) * t3538;
t3281 = 0.2e1 * t3287;
t3126 = (t3332 * t3335 + t3281) * t3385 + t3198 * t3382;
t3531 = pkin(2) * t3332;
t3216 = t3293 + t3531;
t3520 = qJ(3,2) * t3382;
t3528 = pkin(2) * t3385;
t3254 = t3520 - t3528;
t3317 = t3326 ^ 2;
t3217 = t3293 - t3531;
t3304 = t3329 * pkin(2);
t3218 = t3304 + t3521;
t3367 = t3385 ^ 2;
t3466 = t3382 * t3385;
t3405 = -t3217 * t3466 + t3218 * t3367;
t3406 = -t3217 * t3367 - t3218 * t3466;
t3440 = t3323 * t3521;
t3480 = t3323 * t3326;
t3487 = t3293 * t3326;
t3081 = -t3374 * t3440 - t3487 + (t3120 * t3480 - t3126 * t3317 - t3216 * t3254) * pkin(1) + ((t3406 - t3531) * t3326 + t3405 * t3323) * t3399;
t3320 = 0.1e1 + t3335;
t3195 = t3320 * t3329 + t3284;
t3484 = t3320 * t3332;
t3123 = (t3281 + t3484) * t3385 + t3382 * t3195;
t3192 = t3195 * t3385;
t3290 = 0.1e1 / 0.2e1 + t3443;
t3490 = t3216 * t3382;
t3084 = -t3440 - t3487 + (t3123 * t3317 - (t3192 + (t3290 * t3332 + t3287) * t3538) * t3480 - (t3332 * t3398 + t3287 + t3332) * t3385 + qJ(3,2) * t3490) * pkin(1);
t3534 = pkin(2) * qJ(3,2);
t3425 = t3466 * t3534;
t3401 = -t3320 * t3367 + 0.2e1 * t3425;
t3522 = qJ(3,2) * t3323;
t3544 = -(-(pkin(1) * (t3320 * t3466 + (0.2e1 * t3367 - 0.1e1) * t3534) * t3323 + t3520) * t3326 + t3385 * t3522) * t3516 - t3390 * t3373;
t3093 = 0.1e1 / ((0.2e1 * (t3390 / 0.2e1 - t3401 + t3455) * t3317 + t3401) * t3399 + t3544);
t3429 = t3093 * (t3081 + t3084);
t3519 = qJ(3,3) * t3331;
t3449 = pkin(2) * t3519;
t3283 = -0.2e1 * t3449;
t3389 = qJ(3,3) ^ 2;
t3334 = -t3389 + t3398;
t3197 = t3328 * t3334 + t3283;
t3292 = t3328 * qJ(3,3);
t3286 = pkin(2) * t3292;
t3384 = cos(qJ(1,3));
t3444 = t3376 - t3389 / 0.2e1;
t3381 = sin(qJ(1,3));
t3539 = -0.2e1 * t3381;
t3119 = t3197 * t3384 + (t3331 * t3444 + t3286) * t3539;
t3280 = 0.2e1 * t3286;
t3125 = (t3331 * t3334 + t3280) * t3384 + t3197 * t3381;
t3532 = pkin(2) * t3331;
t3212 = t3292 + t3532;
t3518 = qJ(3,3) * t3381;
t3529 = pkin(2) * t3384;
t3253 = t3518 - t3529;
t3316 = t3325 ^ 2;
t3213 = t3292 - t3532;
t3302 = t3328 * pkin(2);
t3214 = t3302 + t3519;
t3366 = t3384 ^ 2;
t3467 = t3381 * t3384;
t3407 = -t3213 * t3467 + t3214 * t3366;
t3408 = -t3213 * t3366 - t3214 * t3467;
t3517 = t3322 * qJ(3,3);
t3441 = t3331 * t3517;
t3482 = t3322 * t3325;
t3488 = t3292 * t3325;
t3080 = -t3374 * t3441 - t3488 + (t3119 * t3482 - t3125 * t3316 - t3212 * t3253) * pkin(1) + ((t3408 - t3532) * t3325 + t3407 * t3322) * t3399;
t3319 = 0.1e1 + t3334;
t3194 = t3319 * t3328 + t3283;
t3485 = t3319 * t3331;
t3122 = (t3280 + t3485) * t3384 + t3381 * t3194;
t3191 = t3194 * t3384;
t3289 = 0.1e1 / 0.2e1 + t3444;
t3491 = t3212 * t3381;
t3083 = -t3441 - t3488 + (t3122 * t3316 - (t3191 + (t3289 * t3331 + t3286) * t3539) * t3482 - (t3331 * t3398 + t3286 + t3331) * t3384 + qJ(3,3) * t3491) * pkin(1);
t3533 = pkin(2) * qJ(3,3);
t3424 = t3467 * t3533;
t3400 = -t3319 * t3366 + 0.2e1 * t3424;
t3545 = -(-(pkin(1) * (t3319 * t3467 + (0.2e1 * t3366 - 0.1e1) * t3533) * t3322 + t3518) * t3325 + t3384 * t3517) * t3516 - t3389 * t3373;
t3092 = 0.1e1 / ((0.2e1 * (t3389 / 0.2e1 - t3400 + t3455) * t3316 + t3400) * t3399 + t3545);
t3431 = t3092 * (t3080 + t3083);
t3551 = t3142 * t3431 + t3146 * t3429 + t3150 * t3427;
t3223 = t3306 - t3524;
t3474 = t3327 * t3333;
t3477 = t3324 * t3374;
t3079 = (t3330 * t3477 - t3474) * qJ(3,1) + (t3121 * t3318 + t3127 * t3478 + t3223 * t3255) * pkin(1) + ((-t3403 + t3306) * t3327 + t3404 * t3324) * t3399;
t3540 = -0.2e1 * t3288;
t3088 = (t3324 * t3330 - t3474) * qJ(3,1) + (-t3193 * t3318 - t3124 * t3478 + (t3330 * t3398 + t3330 - t3453) * t3386 + (-(t3540 - t3483) * t3318 - qJ(3,1) * t3223) * t3383) * pkin(1);
t3428 = t3094 * (t3079 + t3088);
t3219 = t3304 - t3521;
t3475 = t3326 * t3332;
t3479 = t3323 * t3374;
t3078 = (t3329 * t3479 - t3475) * qJ(3,2) + (t3120 * t3317 + t3126 * t3480 + t3219 * t3254) * pkin(1) + ((-t3405 + t3304) * t3326 + t3406 * t3323) * t3399;
t3541 = -0.2e1 * t3287;
t3087 = (t3323 * t3329 - t3475) * qJ(3,2) + (-t3192 * t3317 - t3123 * t3480 + (t3329 * t3398 + t3329 - t3450) * t3385 + (-(t3541 - t3484) * t3317 - qJ(3,2) * t3219) * t3382) * pkin(1);
t3430 = t3093 * (t3078 + t3087);
t3215 = t3302 - t3519;
t3476 = t3325 * t3331;
t3481 = t3322 * t3374;
t3077 = (t3328 * t3481 - t3476) * qJ(3,3) + (t3119 * t3316 + t3125 * t3482 + t3215 * t3253) * pkin(1) + ((-t3407 + t3302) * t3325 + t3408 * t3322) * t3399;
t3542 = -0.2e1 * t3286;
t3086 = (t3322 * t3328 - t3476) * qJ(3,3) + (-t3191 * t3316 - t3122 * t3482 + (t3328 * t3398 + t3328 - t3449) * t3384 + (-(t3542 - t3485) * t3316 - qJ(3,3) * t3215) * t3381) * pkin(1);
t3432 = t3092 * (t3077 + t3086);
t3550 = t3142 * t3432 + t3146 * t3430 + t3150 * t3428;
t3394 = koppelP(1,2);
t3352 = qJ(3,1) * t3394;
t3452 = pkin(2) * t3352;
t3314 = -0.2e1 * t3452;
t3397 = koppelP(1,1);
t3351 = t3391 * t3397;
t3457 = t3397 * t3398;
t3421 = -t3351 + t3457;
t3234 = t3314 + t3421;
t3353 = qJ(3,1) * t3397;
t3451 = pkin(2) * t3353;
t3315 = 0.2e1 * t3451;
t3356 = t3398 * t3394;
t3235 = -t3391 * t3394 + t3315 + t3356;
t3388 = xP(3);
t3343 = sin(t3388);
t3344 = cos(t3388);
t3156 = t3234 * t3344 - t3235 * t3343;
t3157 = t3234 * t3343 + t3235 * t3344;
t3103 = -t3156 * t3330 + t3157 * t3333;
t3362 = pkin(2) * t3397;
t3274 = t3352 + t3362;
t3359 = pkin(2) * t3394;
t3279 = -t3353 + t3359;
t3187 = t3274 * t3344 - t3279 * t3343;
t3190 = t3274 * t3343 + t3279 * t3344;
t3112 = t3187 * t3333 + t3190 * t3330;
t3275 = -t3352 + t3362;
t3278 = t3353 + t3359;
t3188 = t3275 * t3344 - t3278 * t3343;
t3189 = t3275 * t3343 + t3278 * t3344;
t3113 = t3188 * t3333 + t3189 * t3330;
t3115 = -t3187 * t3330 + t3190 * t3333;
t3208 = t3343 * t3397 + t3344 * t3394;
t3211 = -t3343 * t3394 + t3344 * t3397;
t3139 = t3208 * t3330 + t3211 * t3333;
t3456 = t3397 * t3399;
t3260 = pkin(2) * t3456 - t3352;
t3526 = pkin(2) * t3399;
t3261 = t3394 * t3526 + t3353;
t3412 = t3156 * t3333 + t3330 * t3157;
t3073 = ((t3260 * t3344 - t3261 * t3343) * t3333 + (t3260 * t3343 + t3261 * t3344) * t3330) * t3327 + qJ(3,1) * t3139 * t3477 + ((-t3112 * t3368 - t3115 * t3465) * t3327 + (-t3112 * t3465 + t3115 * t3368) * t3324) * t3399 + (-(t3383 * t3103 - t3386 * t3412) * t3318 + (t3103 * t3386 + t3383 * t3412) * t3478 + t3113 * t3255) * pkin(1);
t3372 = 0.1e1 + t3398;
t3204 = t3315 + (t3372 - t3391) * t3394;
t3205 = t3372 * t3397 + t3314 - t3351;
t3132 = t3204 * t3344 + t3205 * t3343;
t3471 = t3343 * t3204;
t3133 = t3205 * t3344 - t3471;
t3097 = t3132 * t3333 - t3133 * t3330;
t3136 = t3208 * t3333 - t3211 * t3330;
t3251 = t3397 - t3452 + t3457;
t3252 = t3356 + t3394 + t3451;
t3313 = 0.2e1 * t3452;
t3492 = t3132 * t3330;
t3495 = t3113 * t3383;
t3076 = (-t3136 * t3327 + t3139 * t3324) * qJ(3,1) + (((((t3313 - t3397 - t3421) * t3344 + t3471) * t3333 - t3492) * t3386 + t3097 * t3383) * t3318 - (t3097 * t3386 + (t3133 * t3333 + t3492) * t3383) * t3478 - ((-t3251 * t3344 + t3252 * t3343) * t3333 - (t3251 * t3343 + t3252 * t3344) * t3330) * t3386 - qJ(3,1) * t3495) * pkin(1);
t3454 = 0.1e1 / 0.4e1 + t3398 / 0.4e1;
t3091 = 0.1e1 / ((0.4e1 * (-t3291 * t3368 + t3426 - t3391 / 0.4e1 + t3454) * t3318 - t3402) * t3399 - t3543);
t3433 = t3091 * (t3073 + t3076);
t3393 = koppelP(2,2);
t3349 = qJ(3,2) * t3393;
t3447 = pkin(2) * t3349;
t3310 = -0.2e1 * t3447;
t3396 = koppelP(2,1);
t3348 = t3390 * t3396;
t3459 = t3396 * t3398;
t3422 = -t3348 + t3459;
t3232 = t3310 + t3422;
t3350 = qJ(3,2) * t3396;
t3445 = pkin(2) * t3350;
t3312 = 0.2e1 * t3445;
t3355 = t3398 * t3393;
t3233 = -t3390 * t3393 + t3312 + t3355;
t3154 = t3232 * t3344 - t3233 * t3343;
t3155 = t3232 * t3343 + t3233 * t3344;
t3102 = -t3154 * t3329 + t3155 * t3332;
t3361 = pkin(2) * t3396;
t3268 = t3349 + t3361;
t3358 = pkin(2) * t3393;
t3273 = -t3350 + t3358;
t3183 = t3268 * t3344 - t3273 * t3343;
t3186 = t3268 * t3343 + t3273 * t3344;
t3108 = t3183 * t3332 + t3186 * t3329;
t3269 = -t3349 + t3361;
t3272 = t3350 + t3358;
t3184 = t3269 * t3344 - t3272 * t3343;
t3185 = t3269 * t3343 + t3272 * t3344;
t3109 = t3184 * t3332 + t3185 * t3329;
t3111 = -t3183 * t3329 + t3186 * t3332;
t3207 = t3343 * t3396 + t3344 * t3393;
t3210 = -t3343 * t3393 + t3344 * t3396;
t3138 = t3207 * t3329 + t3210 * t3332;
t3458 = t3396 * t3399;
t3258 = pkin(2) * t3458 - t3349;
t3259 = t3393 * t3526 + t3350;
t3413 = t3154 * t3332 + t3329 * t3155;
t3072 = ((t3258 * t3344 - t3259 * t3343) * t3332 + (t3258 * t3343 + t3259 * t3344) * t3329) * t3326 + qJ(3,2) * t3138 * t3479 + ((-t3108 * t3367 - t3111 * t3466) * t3326 + (-t3108 * t3466 + t3111 * t3367) * t3323) * t3399 + (-(t3382 * t3102 - t3385 * t3413) * t3317 + (t3102 * t3385 + t3382 * t3413) * t3480 + t3109 * t3254) * pkin(1);
t3202 = t3312 + (t3372 - t3390) * t3393;
t3203 = t3372 * t3396 + t3310 - t3348;
t3130 = t3202 * t3344 + t3203 * t3343;
t3472 = t3343 * t3202;
t3131 = t3203 * t3344 - t3472;
t3096 = t3130 * t3332 - t3131 * t3329;
t3135 = t3207 * t3332 - t3210 * t3329;
t3249 = t3396 - t3447 + t3459;
t3250 = t3355 + t3393 + t3445;
t3309 = 0.2e1 * t3447;
t3493 = t3130 * t3329;
t3496 = t3109 * t3382;
t3075 = (-t3135 * t3326 + t3138 * t3323) * qJ(3,2) + (((((t3309 - t3396 - t3422) * t3344 + t3472) * t3332 - t3493) * t3385 + t3096 * t3382) * t3317 - (t3096 * t3385 + (t3131 * t3332 + t3493) * t3382) * t3480 - ((-t3249 * t3344 + t3250 * t3343) * t3332 - (t3249 * t3343 + t3250 * t3344) * t3329) * t3385 - qJ(3,2) * t3496) * pkin(1);
t3090 = 0.1e1 / ((0.4e1 * (-t3290 * t3367 + t3425 - t3390 / 0.4e1 + t3454) * t3317 - t3401) * t3399 - t3544);
t3434 = t3090 * (t3072 + t3075);
t3392 = koppelP(3,2);
t3346 = qJ(3,3) * t3392;
t3448 = pkin(2) * t3346;
t3308 = -0.2e1 * t3448;
t3395 = koppelP(3,1);
t3345 = t3389 * t3395;
t3461 = t3395 * t3398;
t3423 = -t3345 + t3461;
t3230 = t3308 + t3423;
t3347 = qJ(3,3) * t3395;
t3446 = pkin(2) * t3347;
t3311 = 0.2e1 * t3446;
t3354 = t3398 * t3392;
t3231 = -t3389 * t3392 + t3311 + t3354;
t3152 = t3230 * t3344 - t3231 * t3343;
t3153 = t3230 * t3343 + t3231 * t3344;
t3101 = -t3152 * t3328 + t3153 * t3331;
t3360 = pkin(2) * t3395;
t3262 = t3346 + t3360;
t3357 = pkin(2) * t3392;
t3267 = -t3347 + t3357;
t3179 = t3262 * t3344 - t3267 * t3343;
t3182 = t3262 * t3343 + t3267 * t3344;
t3104 = t3179 * t3331 + t3182 * t3328;
t3263 = -t3346 + t3360;
t3266 = t3347 + t3357;
t3180 = t3263 * t3344 - t3266 * t3343;
t3181 = t3263 * t3343 + t3266 * t3344;
t3105 = t3180 * t3331 + t3181 * t3328;
t3107 = -t3179 * t3328 + t3182 * t3331;
t3206 = t3343 * t3395 + t3344 * t3392;
t3209 = -t3343 * t3392 + t3344 * t3395;
t3137 = t3206 * t3328 + t3209 * t3331;
t3460 = t3395 * t3399;
t3256 = pkin(2) * t3460 - t3346;
t3257 = t3392 * t3526 + t3347;
t3414 = t3152 * t3331 + t3328 * t3153;
t3071 = ((t3256 * t3344 - t3257 * t3343) * t3331 + (t3256 * t3343 + t3257 * t3344) * t3328) * t3325 + qJ(3,3) * t3137 * t3481 + ((-t3104 * t3366 - t3107 * t3467) * t3325 + (-t3104 * t3467 + t3107 * t3366) * t3322) * t3399 + (-(t3381 * t3101 - t3384 * t3414) * t3316 + (t3101 * t3384 + t3381 * t3414) * t3482 + t3105 * t3253) * pkin(1);
t3200 = t3311 + (t3372 - t3389) * t3392;
t3201 = t3372 * t3395 + t3308 - t3345;
t3128 = t3200 * t3344 + t3201 * t3343;
t3473 = t3343 * t3200;
t3129 = t3201 * t3344 - t3473;
t3095 = t3128 * t3331 - t3129 * t3328;
t3134 = t3206 * t3331 - t3209 * t3328;
t3247 = t3395 - t3448 + t3461;
t3248 = t3354 + t3392 + t3446;
t3307 = 0.2e1 * t3448;
t3494 = t3128 * t3328;
t3497 = t3105 * t3381;
t3074 = (-t3134 * t3325 + t3137 * t3322) * qJ(3,3) + (((((t3307 - t3395 - t3423) * t3344 + t3473) * t3331 - t3494) * t3384 + t3095 * t3381) * t3316 - (t3095 * t3384 + (t3129 * t3331 + t3494) * t3381) * t3482 - ((-t3247 * t3344 + t3248 * t3343) * t3331 - (t3247 * t3343 + t3248 * t3344) * t3328) * t3384 - qJ(3,3) * t3497) * pkin(1);
t3089 = 0.1e1 / ((0.4e1 * (-t3289 * t3366 + t3424 - t3389 / 0.4e1 + t3454) * t3316 - t3400) * t3399 - t3545);
t3435 = t3089 * (t3071 + t3074);
t3549 = t3142 * t3435 + t3146 * t3434 + t3150 * t3433;
t3337 = 0.2e1 * t3389 + t3399;
t3470 = t3366 * t3399;
t3548 = t3337 - t3470;
t3338 = 0.2e1 * t3390 + t3399;
t3469 = t3367 * t3399;
t3547 = t3338 - t3469;
t3339 = 0.2e1 * t3391 + t3399;
t3468 = t3368 * t3399;
t3546 = t3339 - t3468;
t3536 = pkin(2) * g(2);
t3515 = t3074 * t3089;
t3514 = t3075 * t3090;
t3513 = t3076 * t3091;
t3387 = pkin(2) * g(1);
t3295 = -g(2) * qJ(3,3) + t3387;
t3296 = g(1) * qJ(3,3) + t3536;
t3116 = (t3295 * t3328 - t3296 * t3331) * t3325 + (t3295 * t3331 + t3296 * t3328) * t3322;
t3098 = pkin(1) * ((g(1) * t3381 - g(2) * t3384) * t3331 + t3328 * (g(1) * t3384 + g(2) * t3381)) + t3116;
t3512 = t3092 * t3098;
t3511 = t3092 * t3116;
t3143 = t3236 * t3325 - t3239 * t3322;
t3510 = t3092 * t3143;
t3164 = -t3236 * t3384 + t3239 * t3381;
t3509 = t3092 * t3164;
t3165 = t3236 * t3381 + t3239 * t3384;
t3508 = t3092 * t3165;
t3297 = -g(2) * qJ(3,2) + t3387;
t3298 = g(1) * qJ(3,2) + t3536;
t3117 = (t3297 * t3329 - t3298 * t3332) * t3326 + (t3297 * t3332 + t3298 * t3329) * t3323;
t3099 = pkin(1) * ((g(1) * t3382 - g(2) * t3385) * t3332 + t3329 * (g(1) * t3385 + g(2) * t3382)) + t3117;
t3507 = t3093 * t3099;
t3506 = t3093 * t3117;
t3147 = t3237 * t3326 - t3240 * t3323;
t3505 = t3093 * t3147;
t3166 = -t3237 * t3385 + t3240 * t3382;
t3504 = t3093 * t3166;
t3167 = t3237 * t3382 + t3240 * t3385;
t3503 = t3093 * t3167;
t3299 = -g(2) * qJ(3,1) + t3387;
t3300 = g(1) * qJ(3,1) + t3536;
t3118 = (t3299 * t3330 - t3300 * t3333) * t3327 + (t3299 * t3333 + t3300 * t3330) * t3324;
t3100 = pkin(1) * ((g(1) * t3383 - g(2) * t3386) * t3333 + t3330 * (g(1) * t3386 + g(2) * t3383)) + t3118;
t3502 = t3094 * t3100;
t3501 = t3094 * t3118;
t3151 = t3238 * t3327 - t3241 * t3324;
t3500 = t3094 * t3151;
t3168 = -t3238 * t3386 + t3241 * t3383;
t3499 = t3094 * t3168;
t3169 = t3238 * t3383 + t3241 * t3386;
t3498 = t3094 * t3169;
t3438 = t3399 * t3467;
t3437 = t3399 * t3466;
t3436 = t3399 * t3465;
t3420 = -0.2e1 * t3389 - t3470;
t3419 = -0.2e1 * t3390 - t3469;
t3418 = -0.2e1 * t3391 - t3468;
t3417 = t3331 * t3438;
t3416 = t3332 * t3437;
t3415 = t3333 * t3436;
t3277 = 0.2e1 * t3353 + t3359;
t3276 = -0.2e1 * t3352 + t3362;
t3271 = 0.2e1 * t3350 + t3358;
t3270 = -0.2e1 * t3349 + t3361;
t3265 = 0.2e1 * t3347 + t3357;
t3264 = -0.2e1 * t3346 + t3360;
t3246 = t3330 * t3436;
t3245 = t3329 * t3437;
t3244 = t3328 * t3438;
t3243 = g(1) * t3344 + g(2) * t3343;
t3242 = g(1) * t3343 - g(2) * t3344;
t3229 = t3339 * t3394 - 0.2e1 * t3451;
t3228 = t3313 + 0.2e1 * t3351 + t3456;
t3227 = t3338 * t3393 - 0.2e1 * t3445;
t3226 = t3309 + 0.2e1 * t3348 + t3458;
t3225 = t3337 * t3392 - 0.2e1 * t3446;
t3224 = t3307 + 0.2e1 * t3345 + t3460;
t3163 = t3223 * t3386 - t3489;
t3162 = t3220 * t3386 + t3223 * t3383;
t3161 = t3219 * t3385 - t3490;
t3160 = t3216 * t3385 + t3219 * t3382;
t3159 = t3215 * t3384 - t3491;
t3158 = t3212 * t3384 + t3215 * t3381;
t3114 = -t3188 * t3330 + t3189 * t3333;
t3110 = -t3184 * t3329 + t3185 * t3332;
t3106 = -t3180 * t3328 + t3181 * t3331;
t3070 = -t3143 * t3432 - t3147 * t3430 - t3151 * t3428;
t3069 = -t3143 * t3431 - t3147 * t3429 - t3151 * t3427;
t3068 = -t3143 * t3435 - t3147 * t3434 - t3151 * t3433;
t1 = [0, t3086 * t3509 + t3087 * t3504 + t3088 * t3499, t3086 * t3508 + t3087 * t3503 + t3088 * t3498, 0, t3070, t3550, t3070, -t3550, t3088 * t3502 + t3079 * t3501 + ((-t3330 * t3546 + t3285 + t3415) * t3327 + (t3333 * t3418 + t3246 + t3282) * t3324 + (-t3163 * t3318 - t3162 * t3478 + (t3306 - 0.2e1 * t3524) * t3386 + t3383 * t3294) * pkin(1)) * t3500 + t3087 * t3507 + t3078 * t3506 + ((-t3329 * t3547 + t3284 + t3416) * t3326 + (t3332 * t3419 + t3245 + t3281) * t3323 + (-t3161 * t3317 - t3160 * t3480 + (t3304 - 0.2e1 * t3521) * t3385 + t3382 * t3293) * pkin(1)) * t3505 + t3086 * t3512 + t3077 * t3511 + ((-t3328 * t3548 + t3283 + t3417) * t3325 + (t3331 * t3420 + t3244 + t3280) * t3322 + (-t3159 * t3316 - t3158 * t3482 + (t3302 - 0.2e1 * t3519) * t3384 + t3381 * t3292) * pkin(1)) * t3510, 0, 0, 0, -t3242 * t3343 - t3243 * t3344; 0, t3083 * t3509 + t3084 * t3504 + t3085 * t3499, t3083 * t3508 + t3084 * t3503 + t3085 * t3498, 0, t3069, t3551, t3069, -t3551, t3085 * t3502 + t3082 * t3501 + ((t3333 * t3546 + t3246 + t3540) * t3327 + (t3330 * t3418 + t3285 - t3415) * t3324 + (-t3163 * t3478 + t3162 * t3318 - 0.2e1 * t3294 * t3386 + (-t3523 - t3527) * t3333) * pkin(1)) * t3500 + t3084 * t3507 + t3081 * t3506 + ((t3332 * t3547 + t3245 + t3541) * t3326 + (t3329 * t3419 + t3284 - t3416) * t3323 + (-t3161 * t3480 + t3160 * t3317 - 0.2e1 * t3293 * t3385 + (-t3520 - t3528) * t3332) * pkin(1)) * t3505 + t3083 * t3512 + t3080 * t3511 + ((t3331 * t3548 + t3244 + t3542) * t3325 + (t3328 * t3420 + t3283 - t3417) * t3322 + (-t3159 * t3482 + t3158 * t3316 - 0.2e1 * t3292 * t3384 + (-t3518 - t3529) * t3331) * pkin(1)) * t3510, 0, 0, 0, t3242 * t3344 - t3243 * t3343; 0, t3164 * t3515 + t3166 * t3514 + t3168 * t3513, t3165 * t3515 + t3167 * t3514 + t3169 * t3513, 0, t3068, t3549, t3068, -t3549, t3098 * t3515 + t3099 * t3514 + t3100 * t3513 + (t3073 * t3118 + (((-t3228 * t3344 + t3229 * t3343) * t3333 - t3330 * (t3228 * t3343 + t3229 * t3344)) * t3327 + 0.2e1 * t3113 * t3525 + ((t3136 * t3465 + t3139 * t3368) * t3327 + (-t3136 * t3368 + t3139 * t3465) * t3324) * t3399 + ((-t3113 * t3386 + t3383 * t3114) * t3318 - (t3114 * t3386 + t3495) * t3478 + ((t3276 * t3344 - t3277 * t3343) * t3333 + t3330 * (t3276 * t3343 + t3277 * t3344)) * t3386 + t3139 * t3523) * pkin(1)) * t3151) * t3091 + (t3072 * t3117 + (((-t3226 * t3344 + t3227 * t3343) * t3332 - t3329 * (t3226 * t3343 + t3227 * t3344)) * t3326 + 0.2e1 * t3109 * t3522 + ((t3135 * t3466 + t3138 * t3367) * t3326 + (-t3135 * t3367 + t3138 * t3466) * t3323) * t3399 + ((-t3109 * t3385 + t3382 * t3110) * t3317 - (t3110 * t3385 + t3496) * t3480 + ((t3270 * t3344 - t3271 * t3343) * t3332 + t3329 * (t3270 * t3343 + t3271 * t3344)) * t3385 + t3138 * t3520) * pkin(1)) * t3147) * t3090 + (t3071 * t3116 + (((-t3224 * t3344 + t3225 * t3343) * t3331 - t3328 * (t3224 * t3343 + t3225 * t3344)) * t3325 + 0.2e1 * t3105 * t3517 + ((t3134 * t3467 + t3137 * t3366) * t3325 + (-t3134 * t3366 + t3137 * t3467) * t3322) * t3399 + ((-t3105 * t3384 + t3381 * t3106) * t3316 - (t3106 * t3384 + t3497) * t3482 + ((t3264 * t3344 - t3265 * t3343) * t3331 + (t3264 * t3343 + t3265 * t3344) * t3328) * t3384 + t3137 * t3518) * pkin(1)) * t3143) * t3089, 0, t3242, t3243, 0;];
tau_reg  = t1;
