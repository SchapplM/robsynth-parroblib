% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V1G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:02
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR12V1G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:02:32
% EndTime: 2020-08-06 19:02:36
% DurationCPUTime: 4.32s
% Computational Cost: add. (3870->378), mult. (6894->738), div. (822->12), fcn. (6600->18), ass. (0->322)
t2315 = sin(qJ(2,1));
t2323 = pkin(1) + pkin(2);
t2321 = cos(qJ(2,1));
t2488 = qJ(3,1) * t2321;
t2277 = t2315 * t2323 - t2488;
t2492 = pkin(1) * t2315;
t2285 = t2488 - t2492;
t2511 = MDP(12) * (t2277 + t2285);
t2313 = sin(qJ(2,2));
t2319 = cos(qJ(2,2));
t2487 = qJ(3,2) * t2319;
t2276 = t2313 * t2323 - t2487;
t2493 = pkin(1) * t2313;
t2283 = t2487 - t2493;
t2510 = MDP(12) * (t2276 + t2283);
t2311 = sin(qJ(2,3));
t2317 = cos(qJ(2,3));
t2486 = qJ(3,3) * t2317;
t2275 = t2311 * t2323 - t2486;
t2494 = pkin(1) * t2311;
t2281 = t2486 - t2494;
t2509 = MDP(12) * (t2275 + t2281);
t2308 = legFrame(3,3);
t2290 = sin(t2308);
t2293 = cos(t2308);
t2312 = sin(qJ(1,3));
t2318 = cos(qJ(1,3));
t2254 = -t2290 * t2312 + t2293 * t2318;
t2287 = t2311 * qJ(3,3);
t2299 = t2318 * pkin(4);
t2263 = t2312 * t2287 + t2299;
t2491 = pkin(4) * t2312;
t2264 = t2318 * t2287 - t2491;
t2419 = t2317 * t2323;
t2212 = t2254 * t2419 - t2263 * t2290 + t2264 * t2293;
t2255 = t2290 * t2318 + t2293 * t2312;
t2213 = t2255 * t2419 + t2263 * t2293 + t2264 * t2290;
t2508 = t2212 * t2213;
t2507 = t2212 * t2255;
t2506 = t2213 * t2254;
t2309 = legFrame(2,3);
t2291 = sin(t2309);
t2294 = cos(t2309);
t2314 = sin(qJ(1,2));
t2320 = cos(qJ(1,2));
t2257 = -t2291 * t2314 + t2294 * t2320;
t2288 = t2313 * qJ(3,2);
t2300 = t2320 * pkin(4);
t2265 = t2314 * t2288 + t2300;
t2490 = pkin(4) * t2314;
t2266 = t2320 * t2288 - t2490;
t2417 = t2319 * t2323;
t2214 = t2257 * t2417 - t2265 * t2291 + t2266 * t2294;
t2258 = t2291 * t2320 + t2294 * t2314;
t2215 = t2258 * t2417 + t2265 * t2294 + t2266 * t2291;
t2505 = t2214 * t2215;
t2504 = t2214 * t2258;
t2503 = t2215 * t2257;
t2310 = legFrame(1,3);
t2292 = sin(t2310);
t2295 = cos(t2310);
t2316 = sin(qJ(1,1));
t2322 = cos(qJ(1,1));
t2260 = -t2292 * t2316 + t2295 * t2322;
t2289 = t2315 * qJ(3,1);
t2301 = t2322 * pkin(4);
t2267 = t2316 * t2289 + t2301;
t2489 = pkin(4) * t2316;
t2268 = t2322 * t2289 - t2489;
t2415 = t2321 * t2323;
t2216 = t2260 * t2415 - t2267 * t2292 + t2268 * t2295;
t2261 = t2292 * t2322 + t2295 * t2316;
t2217 = t2261 * t2415 + t2267 * t2295 + t2268 * t2292;
t2502 = t2216 * t2217;
t2501 = t2216 * t2261;
t2500 = t2217 * t2260;
t2499 = 2 * MDP(5);
t2498 = 2 * MDP(6);
t2497 = 2 * MDP(7);
t2496 = 2 * MDP(11);
t2495 = 2 * MDP(13);
t2485 = MDP(14) * t2275;
t2484 = MDP(14) * t2276;
t2483 = MDP(14) * t2277;
t2278 = t2287 + t2419;
t2233 = t2278 * t2312 + t2299;
t2236 = t2278 * t2318 - t2491;
t2221 = -t2233 * t2290 + t2236 * t2293;
t2325 = 0.1e1 / qJ(3,3);
t2324 = qJ(3,3) ^ 2;
t2333 = pkin(1) ^ 2;
t2296 = t2324 + t2333;
t2269 = 0.1e1 / t2278;
t2447 = t2269 * t2317;
t2395 = t2296 * t2447;
t2181 = (-pkin(1) * t2221 + t2212 * t2395) * t2325;
t2482 = t2181 * MDP(14);
t2224 = t2233 * t2293 + t2236 * t2290;
t2182 = (-pkin(1) * t2224 + t2213 * t2395) * t2325;
t2481 = t2182 * MDP(14);
t2279 = t2288 + t2417;
t2234 = t2279 * t2314 + t2300;
t2237 = t2279 * t2320 - t2490;
t2222 = -t2234 * t2291 + t2237 * t2294;
t2328 = 0.1e1 / qJ(3,2);
t2327 = qJ(3,2) ^ 2;
t2297 = t2327 + t2333;
t2271 = 0.1e1 / t2279;
t2443 = t2271 * t2319;
t2388 = t2297 * t2443;
t2183 = (-pkin(1) * t2222 + t2214 * t2388) * t2328;
t2480 = t2183 * MDP(14);
t2225 = t2234 * t2294 + t2237 * t2291;
t2184 = (-pkin(1) * t2225 + t2215 * t2388) * t2328;
t2479 = t2184 * MDP(14);
t2280 = t2289 + t2415;
t2235 = t2280 * t2316 + t2301;
t2238 = t2280 * t2322 - t2489;
t2223 = -t2235 * t2292 + t2238 * t2295;
t2331 = 0.1e1 / qJ(3,1);
t2330 = qJ(3,1) ^ 2;
t2298 = t2330 + t2333;
t2273 = 0.1e1 / t2280;
t2439 = t2273 * t2321;
t2381 = t2298 * t2439;
t2185 = (-pkin(1) * t2223 + t2216 * t2381) * t2331;
t2478 = t2185 * MDP(14);
t2226 = t2235 * t2295 + t2238 * t2292;
t2186 = (-pkin(1) * t2226 + t2217 * t2381) * t2331;
t2477 = t2186 * MDP(14);
t2407 = t2212 * t2447;
t2366 = pkin(1) * t2407;
t2187 = (-t2221 + 0.2e1 * t2366) * t2325;
t2476 = t2187 * t2325;
t2406 = t2213 * t2447;
t2365 = pkin(1) * t2406;
t2189 = (-t2224 + 0.2e1 * t2365) * t2325;
t2475 = t2189 * t2325;
t2405 = t2214 * t2443;
t2364 = pkin(1) * t2405;
t2191 = (-t2222 + 0.2e1 * t2364) * t2328;
t2474 = t2191 * t2328;
t2404 = t2215 * t2443;
t2363 = pkin(1) * t2404;
t2193 = (-t2225 + 0.2e1 * t2363) * t2328;
t2473 = t2193 * t2328;
t2403 = t2216 * t2439;
t2362 = pkin(1) * t2403;
t2195 = (-t2223 + 0.2e1 * t2362) * t2331;
t2472 = t2195 * t2331;
t2402 = t2217 * t2439;
t2361 = pkin(1) * t2402;
t2197 = (-t2226 + 0.2e1 * t2361) * t2331;
t2471 = t2197 * t2331;
t2326 = 0.1e1 / qJ(3,3) ^ 2;
t2470 = t2221 * t2326;
t2329 = 0.1e1 / qJ(3,2) ^ 2;
t2469 = t2222 * t2329;
t2332 = 0.1e1 / qJ(3,1) ^ 2;
t2468 = t2223 * t2332;
t2467 = t2224 * t2326;
t2466 = t2225 * t2329;
t2465 = t2226 * t2332;
t2248 = t2254 ^ 2;
t2270 = 0.1e1 / t2278 ^ 2;
t2464 = t2248 * t2270;
t2249 = t2255 ^ 2;
t2463 = t2249 * t2270;
t2250 = t2257 ^ 2;
t2272 = 0.1e1 / t2279 ^ 2;
t2462 = t2250 * t2272;
t2251 = t2258 ^ 2;
t2461 = t2251 * t2272;
t2252 = t2260 ^ 2;
t2274 = 0.1e1 / t2280 ^ 2;
t2460 = t2252 * t2274;
t2253 = t2261 ^ 2;
t2459 = t2253 * t2274;
t2458 = t2254 * t2255;
t2457 = t2254 * t2269;
t2456 = t2255 * t2269;
t2455 = t2257 * t2258;
t2454 = t2257 * t2271;
t2453 = t2258 * t2271;
t2452 = t2260 * t2261;
t2451 = t2260 * t2273;
t2450 = t2261 * t2273;
t2305 = t2317 ^ 2;
t2449 = t2269 * t2305;
t2448 = t2269 * t2311;
t2302 = t2311 ^ 2;
t2446 = t2270 * t2302;
t2306 = t2319 ^ 2;
t2445 = t2271 * t2306;
t2444 = t2271 * t2313;
t2303 = t2313 ^ 2;
t2442 = t2272 * t2303;
t2307 = t2321 ^ 2;
t2441 = t2273 * t2307;
t2440 = t2273 * t2315;
t2304 = t2315 ^ 2;
t2438 = t2274 * t2304;
t2282 = pkin(1) * t2317 + t2287;
t2437 = t2282 * t2311;
t2284 = pkin(1) * t2319 + t2288;
t2436 = t2284 * t2313;
t2286 = pkin(1) * t2321 + t2289;
t2435 = t2286 * t2315;
t2434 = t2302 * t2325;
t2433 = t2303 * t2328;
t2432 = t2304 * t2331;
t2431 = t2305 * t2325;
t2430 = t2306 * t2328;
t2429 = t2307 * t2331;
t2428 = t2311 * t2317;
t2427 = t2311 * t2325;
t2426 = t2311 * t2326;
t2425 = t2313 * t2319;
t2424 = t2313 * t2328;
t2423 = t2313 * t2329;
t2422 = t2315 * t2321;
t2421 = t2315 * t2331;
t2420 = t2315 * t2332;
t2418 = t2317 * t2325;
t2416 = t2319 * t2328;
t2414 = t2321 * t2331;
t2410 = 0.2e1 * t2494;
t2409 = 0.2e1 * t2493;
t2408 = 0.2e1 * t2492;
t2230 = (-pkin(1) * t2275 + t2296 * t2311) * t2325;
t2401 = t2230 * t2447;
t2231 = (-pkin(1) * t2276 + t2297 * t2313) * t2328;
t2400 = t2231 * t2443;
t2232 = (-pkin(1) * t2277 + t2298 * t2315) * t2331;
t2399 = t2232 * t2439;
t2398 = t2270 * t2458;
t2397 = t2272 * t2455;
t2396 = t2274 * t2452;
t2394 = t2269 * t2434;
t2393 = t2326 * t2447;
t2392 = t2270 * t2281 * t2317;
t2391 = t2270 * t2431;
t2390 = t2270 * t2305 * t2326;
t2389 = t2270 * t2428;
t2387 = t2271 * t2433;
t2386 = t2329 * t2443;
t2385 = t2272 * t2283 * t2319;
t2384 = t2272 * t2430;
t2383 = t2272 * t2306 * t2329;
t2382 = t2272 * t2425;
t2380 = t2273 * t2432;
t2379 = t2332 * t2439;
t2378 = t2274 * t2285 * t2321;
t2377 = t2274 * t2429;
t2376 = t2274 * t2307 * t2332;
t2375 = t2274 * t2422;
t2374 = t2311 * t2418;
t2373 = t2313 * t2416;
t2372 = t2315 * t2414;
t2245 = (-t2324 + t2333) * t2305 + t2410 * t2486 + t2324;
t2246 = (-t2327 + t2333) * t2306 + t2409 * t2487 + t2327;
t2247 = (-t2330 + t2333) * t2307 + t2408 * t2488 + t2330;
t2371 = -t2245 * t2398 - t2246 * t2397 - t2247 * t2396;
t2355 = t2321 * t2396;
t2356 = t2319 * t2397;
t2357 = t2317 * t2398;
t2370 = -0.2e1 * t2282 * t2357 - 0.2e1 * t2284 * t2356 - 0.2e1 * t2286 * t2355;
t2369 = t2270 * t2282 * t2496;
t2368 = t2272 * t2284 * t2496;
t2367 = t2274 * t2286 * t2496;
t2239 = (-t2275 + t2410) * t2325;
t2360 = t2239 * t2269 * t2418;
t2241 = (-t2276 + t2409) * t2328;
t2359 = t2241 * t2271 * t2416;
t2243 = (-t2277 + t2408) * t2331;
t2358 = t2243 * t2273 * t2414;
t2354 = t2275 * t2393;
t2353 = t2269 * t2374;
t2352 = t2311 * t2393;
t2351 = t2325 * t2392;
t2350 = t2270 * t2374;
t2349 = t2276 * t2386;
t2348 = t2271 * t2373;
t2347 = t2313 * t2386;
t2346 = t2328 * t2385;
t2345 = t2272 * t2373;
t2344 = t2277 * t2379;
t2343 = t2273 * t2372;
t2342 = t2315 * t2379;
t2341 = t2331 * t2378;
t2340 = t2274 * t2372;
t2339 = (t2212 * t2353 + t2214 * t2348 + t2216 * t2343) * t2495 + (t2212 * t2352 + t2214 * t2347 + t2216 * t2342) * MDP(8) + (-t2255 * t2353 - t2258 * t2348 - t2261 * t2343) * MDP(7) + (-t2255 * t2394 - t2258 * t2387 - t2261 * t2380) * MDP(6);
t2338 = (t2213 * t2353 + t2215 * t2348 + t2217 * t2343) * t2495 + (t2213 * t2352 + t2215 * t2347 + t2217 * t2342) * MDP(8) + (t2254 * t2353 + t2257 * t2348 + t2260 * t2343) * MDP(7) + (t2254 * t2394 + t2257 * t2387 + t2260 * t2380) * MDP(6);
t2334 = t2274 * t2331 * (t2216 * t2260 - t2217 * t2261);
t2335 = t2272 * t2328 * (t2214 * t2257 - t2215 * t2258);
t2336 = t2270 * t2325 * (t2212 * t2254 - t2213 * t2255);
t2337 = ((t2429 * t2502 - t2435 * t2452) * t2274 + (t2430 * t2505 - t2436 * t2455) * t2272 + (t2431 * t2508 - t2437 * t2458) * t2270) * t2495 + (t2334 * t2422 + t2335 * t2425 + t2336 * t2428) * MDP(6) + (t2305 * t2336 + t2306 * t2335 + t2307 * t2334) * MDP(7) + (t2376 * t2502 + t2383 * t2505 + t2390 * t2508) * MDP(8) + (-t2311 * t2357 - t2313 * t2356 - t2315 * t2355) * t2499 + (-t2302 * t2398 - t2303 * t2397 - t2304 * t2396) * MDP(4) + (-t2396 - t2397 - t2398) * MDP(1);
t2244 = (t2277 - t2492) * t2331;
t2242 = (t2276 - t2493) * t2328;
t2240 = (t2275 - t2494) * t2325;
t2229 = (t2242 + t2319) * t2313;
t2228 = (t2240 + t2317) * t2311;
t2227 = (t2244 + t2321) * t2315;
t2211 = t2217 ^ 2;
t2210 = t2216 ^ 2;
t2209 = t2215 ^ 2;
t2208 = t2214 ^ 2;
t2207 = t2213 ^ 2;
t2206 = t2212 ^ 2;
t2198 = (t2226 - t2361) * t2331;
t2196 = (t2223 - t2362) * t2331;
t2194 = (t2225 - t2363) * t2328;
t2192 = (t2222 - t2364) * t2328;
t2190 = (t2224 - t2365) * t2325;
t2188 = (t2221 - t2366) * t2325;
t2177 = t2198 * t2315 + t2217 * t2441;
t2176 = t2196 * t2315 + t2216 * t2441;
t2175 = t2194 * t2313 + t2215 * t2445;
t2174 = t2192 * t2313 + t2214 * t2445;
t2173 = t2190 * t2311 + t2213 * t2449;
t2172 = t2188 * t2311 + t2212 * t2449;
t1 = [(t2459 + t2461 + t2463) * MDP(1) + (t2249 * t2446 + t2251 * t2442 + t2253 * t2438) * MDP(4) + (t2206 * t2390 + t2208 * t2383 + t2210 * t2376) * MDP(8) + (t2188 * t2221 * t2325 + t2192 * t2222 * t2328 + t2196 * t2223 * t2331 + t2245 * t2463 + t2246 * t2461 + t2247 * t2459) * MDP(14) + MDP(15) + (t2253 * t2367 + ((-t2468 + t2472) * MDP(11) + t2331 * t2478) * t2273 * t2216) * t2321 + (t2251 * t2368 + ((-t2469 + t2474) * MDP(11) + t2328 * t2480) * t2271 * t2214) * t2319 + (t2249 * t2369 + ((-t2470 + t2476) * MDP(11) + t2325 * t2482) * t2269 * t2212) * t2317 + (t2249 * t2389 + t2251 * t2382 + t2253 * t2375) * t2499 + (-t2340 * t2501 - t2345 * t2504 - t2350 * t2507) * t2498 + (-t2377 * t2501 - t2384 * t2504 - t2391 * t2507) * t2497 + ((t2210 * t2429 + t2253 * t2435) * t2274 + (t2208 * t2430 + t2251 * t2436) * t2272 + (t2206 * t2431 + t2249 * t2437) * t2270) * t2495 + ((-t2216 * t2341 + (-t2223 * t2421 - t2176) * t2273) * t2261 + (-t2214 * t2346 + (-t2222 * t2424 - t2174) * t2271) * t2258 + (-t2212 * t2351 + (-t2221 * t2427 - t2172) * t2269) * t2255) * MDP(12); ((t2216 * t2471 - t2217 * t2468) * t2439 + (t2214 * t2473 - t2215 * t2469) * t2443 + (t2212 * t2475 - t2213 * t2470) * t2447 + t2370) * MDP(11) + (-t2173 * t2456 - t2175 * t2453 - t2177 * t2450 + (t2216 * t2378 + t2223 * t2440) * t2331 * t2260 + (t2214 * t2385 + t2222 * t2444) * t2328 * t2257 + (t2212 * t2392 + t2221 * t2448) * t2325 * t2254) * MDP(12) + ((t2186 * t2403 + t2198 * t2223) * t2331 + (t2184 * t2405 + t2194 * t2222) * t2328 + (t2182 * t2407 + t2190 * t2221) * t2325 + t2371) * MDP(14) + t2337; (t2212 * t2360 + t2214 * t2359 + t2216 * t2358 - t2221 * t2426 - t2222 * t2423 - t2223 * t2420) * MDP(11) + (-t2227 * t2450 - t2228 * t2456 - t2229 * t2453) * MDP(12) + ((t2216 * t2399 + t2223 * t2244) * t2331 + (t2214 * t2400 + t2222 * t2242) * t2328 + (t2212 * t2401 + t2221 * t2240) * t2325) * MDP(14) + t2339; ((-t2216 * t2465 + t2217 * t2472) * t2439 + (-t2214 * t2466 + t2215 * t2474) * t2443 + (-t2212 * t2467 + t2213 * t2476) * t2447 + t2370) * MDP(11) + (t2172 * t2457 + t2174 * t2454 + t2176 * t2451 + (-t2217 * t2378 - t2226 * t2440) * t2331 * t2261 + (-t2215 * t2385 - t2225 * t2444) * t2328 * t2258 + (-t2213 * t2392 - t2224 * t2448) * t2325 * t2255) * MDP(12) + ((t2185 * t2402 + t2196 * t2226) * t2331 + (t2183 * t2404 + t2192 * t2225) * t2328 + (t2181 * t2406 + t2188 * t2224) * t2325 + t2371) * MDP(14) + t2337; (t2460 + t2462 + t2464) * MDP(1) + (t2248 * t2446 + t2250 * t2442 + t2252 * t2438) * MDP(4) + (t2207 * t2390 + t2209 * t2383 + t2211 * t2376) * MDP(8) + (t2190 * t2224 * t2325 + t2194 * t2225 * t2328 + t2198 * t2226 * t2331 + t2245 * t2464 + t2246 * t2462 + t2247 * t2460) * MDP(14) + MDP(15) + (t2252 * t2367 + ((-t2465 + t2471) * MDP(11) + t2331 * t2477) * t2273 * t2217) * t2321 + (t2250 * t2368 + ((-t2466 + t2473) * MDP(11) + t2328 * t2479) * t2271 * t2215) * t2319 + (t2248 * t2369 + ((-t2467 + t2475) * MDP(11) + t2325 * t2481) * t2269 * t2213) * t2317 + (t2248 * t2389 + t2250 * t2382 + t2252 * t2375) * t2499 + (t2340 * t2500 + t2345 * t2503 + t2350 * t2506) * t2498 + (t2377 * t2500 + t2384 * t2503 + t2391 * t2506) * t2497 + ((t2211 * t2429 + t2252 * t2435) * t2274 + (t2209 * t2430 + t2250 * t2436) * t2272 + (t2207 * t2431 + t2248 * t2437) * t2270) * t2495 + ((t2217 * t2341 + (t2226 * t2421 + t2177) * t2273) * t2260 + (t2215 * t2346 + (t2225 * t2424 + t2175) * t2271) * t2257 + (t2213 * t2351 + (t2224 * t2427 + t2173) * t2269) * t2254) * MDP(12); (t2213 * t2360 + t2215 * t2359 + t2217 * t2358 - t2224 * t2426 - t2225 * t2423 - t2226 * t2420) * MDP(11) + (t2227 * t2451 + t2228 * t2457 + t2229 * t2454) * MDP(12) + ((t2217 * t2399 + t2226 * t2244) * t2331 + (t2215 * t2400 + t2225 * t2242) * t2328 + (t2213 * t2401 + t2224 * t2240) * t2325) * MDP(14) + t2338; (-t2212 * t2354 - t2214 * t2349 - t2216 * t2344) * MDP(11) + (t2196 * t2483 + (t2195 * MDP(11) - t2450 * t2511 + t2478) * t2315) * t2331 + (t2192 * t2484 + (t2191 * MDP(11) - t2453 * t2510 + t2480) * t2313) * t2328 + (t2188 * t2485 + (t2187 * MDP(11) - t2456 * t2509 + t2482) * t2311) * t2325 + t2339; (-t2213 * t2354 - t2215 * t2349 - t2217 * t2344) * MDP(11) + (t2198 * t2483 + (t2197 * MDP(11) + t2451 * t2511 + t2477) * t2315) * t2331 + (t2194 * t2484 + (t2193 * MDP(11) + t2454 * t2510 + t2479) * t2313) * t2328 + (t2190 * t2485 + (t2189 * MDP(11) + t2457 * t2509 + t2481) * t2311) * t2325 + t2338; (t2302 * t2326 + t2303 * t2329 + t2304 * t2332) * MDP(8) + ((t2243 * t2331 - t2277 * t2332) * t2315 + (t2241 * t2328 - t2276 * t2329) * t2313 + (t2239 * t2325 - t2275 * t2326) * t2311) * MDP(11) + (t2432 + t2433 + t2434) * t2495 + ((t2232 * t2315 + t2244 * t2277) * t2331 + (t2231 * t2313 + t2242 * t2276) * t2328 + (t2230 * t2311 + t2240 * t2275) * t2325) * MDP(14) + MDP(15);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
