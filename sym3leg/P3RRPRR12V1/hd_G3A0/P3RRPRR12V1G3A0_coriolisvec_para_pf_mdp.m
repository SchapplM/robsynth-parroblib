% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR12V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:11
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:11:14
% EndTime: 2020-08-06 19:11:28
% DurationCPUTime: 14.07s
% Computational Cost: add. (56949->564), mult. (98889->1096), div. (5508->12), fcn. (61458->18), ass. (0->475)
t2952 = sin(qJ(2,3));
t2930 = t2952 * qJ(3,3);
t2958 = cos(qJ(2,3));
t2967 = pkin(1) + pkin(2);
t3164 = t2958 * t2967;
t2907 = t2930 + t3164;
t2959 = cos(qJ(1,3));
t2953 = sin(qJ(1,3));
t3277 = pkin(4) * t2953;
t3313 = t2907 * t2959 - t3277;
t2954 = sin(qJ(2,2));
t2931 = t2954 * qJ(3,2);
t2960 = cos(qJ(2,2));
t3161 = t2960 * t2967;
t2908 = t2931 + t3161;
t2961 = cos(qJ(1,2));
t2955 = sin(qJ(1,2));
t3276 = pkin(4) * t2955;
t3312 = t2908 * t2961 - t3276;
t2956 = sin(qJ(2,1));
t2932 = t2956 * qJ(3,1);
t2962 = cos(qJ(2,1));
t3158 = t2962 * t2967;
t2909 = t2932 + t3158;
t2963 = cos(qJ(1,1));
t2957 = sin(qJ(1,1));
t3275 = pkin(4) * t2957;
t3311 = t2909 * t2963 - t3275;
t2949 = legFrame(3,2);
t2933 = sin(t2949);
t3310 = 0.2e1 * t2933;
t2950 = legFrame(2,2);
t2934 = sin(t2950);
t3309 = 0.2e1 * t2934;
t2951 = legFrame(1,2);
t2935 = sin(t2951);
t3308 = 0.2e1 * t2935;
t2936 = cos(t2949);
t3307 = -0.2e1 * t2936;
t2937 = cos(t2950);
t3306 = -0.2e1 * t2937;
t2938 = cos(t2951);
t3305 = -0.2e1 * t2938;
t2965 = xDP(2);
t2925 = t2965 * t2967;
t2966 = xDP(1);
t2926 = t2966 * t2967;
t2964 = xDP(3);
t3152 = t2964 * t2967;
t3270 = qJ(3,1) * t2966;
t3271 = qJ(3,1) * t2965;
t2858 = (t2963 * t2926 - t3271) * t2938 + (-t2963 * t2925 - t3270) * t2935 - t2957 * t3152;
t3274 = pkin(4) * t2965;
t2924 = t2957 * t3274;
t2947 = t2962 ^ 2;
t3273 = pkin(4) * t2966;
t3125 = t2957 * t3273;
t2941 = t2963 * pkin(4);
t3168 = t2956 * t2957;
t2893 = qJ(3,1) * t3168 + t2941;
t3153 = t2964 * t2893;
t3293 = -t2963 * t3271 + t2926;
t3296 = t2963 * t3270 + t2925;
t2840 = t2858 * t2947 + ((t3296 * t2956 - t3125) * t2938 + (t3293 * t2956 + t2924) * t2935 - t3153) * t2962 + qJ(3,1) * (t2935 * t2966 + t2938 * t2965);
t2901 = 0.1e1 / t2909;
t3235 = t2840 * t2901;
t3304 = 0.2e1 * t3235;
t3267 = qJ(3,2) * t2966;
t3268 = qJ(3,2) * t2965;
t2857 = (t2961 * t2926 - t3268) * t2937 + (-t2961 * t2925 - t3267) * t2934 - t2955 * t3152;
t2923 = t2955 * t3274;
t2946 = t2960 ^ 2;
t3126 = t2955 * t3273;
t2940 = t2961 * pkin(4);
t3172 = t2954 * t2955;
t2891 = qJ(3,2) * t3172 + t2940;
t3154 = t2964 * t2891;
t3294 = -t2961 * t3268 + t2926;
t3297 = t2961 * t3267 + t2925;
t2839 = t2857 * t2946 + ((t3297 * t2954 - t3126) * t2937 + (t3294 * t2954 + t2923) * t2934 - t3154) * t2960 + qJ(3,2) * (t2934 * t2966 + t2937 * t2965);
t2898 = 0.1e1 / t2908;
t3238 = t2839 * t2898;
t3303 = 0.2e1 * t3238;
t3264 = qJ(3,3) * t2966;
t3265 = qJ(3,3) * t2965;
t2856 = (t2959 * t2926 - t3265) * t2936 + (-t2959 * t2925 - t3264) * t2933 - t2953 * t3152;
t2922 = t2953 * t3274;
t2945 = t2958 ^ 2;
t3127 = t2953 * t3273;
t2939 = t2959 * pkin(4);
t3176 = t2952 * t2953;
t2889 = qJ(3,3) * t3176 + t2939;
t3155 = t2964 * t2889;
t3295 = -t2959 * t3265 + t2926;
t3298 = t2959 * t3264 + t2925;
t2838 = t2856 * t2945 + ((t3298 * t2952 - t3127) * t2936 + (t3295 * t2952 + t2922) * t2933 - t3155) * t2958 + qJ(3,3) * (t2933 * t2966 + t2936 * t2965);
t2895 = 0.1e1 / t2907;
t3241 = t2838 * t2895;
t3302 = 0.2e1 * t3241;
t2846 = -t2938 * t3125 + t2858 * t2962 - t3153 + t2924 * t2935 + (t3293 * t2935 + t3296 * t2938) * t2956;
t2975 = 0.1e1 / qJ(3,1);
t2843 = t2846 * t2975;
t3165 = t2956 * t2967;
t3272 = qJ(3,1) * t2962;
t3024 = -t3165 + t3272;
t2876 = (t2935 * t2965 - t2938 * t2966) * t2957 - t2963 * t2964;
t2902 = 0.1e1 / t2909 ^ 2;
t2903 = t2901 * t2902;
t3186 = t2903 * t2975;
t3037 = t2840 * t2876 * t3186;
t3209 = t2876 * t2975;
t3087 = t2902 * t3209;
t3149 = t2967 * t2975;
t3211 = t2876 * t2902;
t3278 = pkin(4) * t2876;
t2786 = -(t2843 * t2956 + (-t3278 + (-t2956 * t3149 + t2962) * t2840) * t2901) * t3211 - t3024 * t3037 - t2956 * t2846 * t3087;
t2929 = 0.2e1 * t2947 - 0.1e1;
t3157 = t2962 * t2975;
t3074 = t2956 * t3157;
t3292 = -2 * pkin(1);
t2795 = t2846 * t3074 + (t3074 * t3292 + t2929) * t3235;
t2918 = pkin(1) * t2962 + t2932;
t3188 = t2901 * t2962;
t3301 = 0.2e1 * (t2786 * t2918 * t3188 + t2795 * t3211) * t2957;
t2845 = -t2937 * t3126 + t2857 * t2960 - t3154 + t2923 * t2934 + (t3294 * t2934 + t3297 * t2937) * t2954;
t2972 = 0.1e1 / qJ(3,2);
t2842 = t2845 * t2972;
t3169 = t2954 * t2967;
t3269 = qJ(3,2) * t2960;
t3023 = -t3169 + t3269;
t2875 = (t2934 * t2965 - t2937 * t2966) * t2955 - t2961 * t2964;
t2899 = 0.1e1 / t2908 ^ 2;
t2900 = t2898 * t2899;
t3191 = t2900 * t2972;
t3038 = t2839 * t2875 * t3191;
t3213 = t2875 * t2972;
t3089 = t2899 * t3213;
t3150 = t2967 * t2972;
t3215 = t2875 * t2899;
t3279 = pkin(4) * t2875;
t2785 = -(t2842 * t2954 + (-t3279 + (-t2954 * t3150 + t2960) * t2839) * t2898) * t3215 - t3023 * t3038 - t2954 * t2845 * t3089;
t2928 = 0.2e1 * t2946 - 0.1e1;
t3160 = t2960 * t2972;
t3076 = t2954 * t3160;
t2794 = t2845 * t3076 + (t3076 * t3292 + t2928) * t3238;
t2916 = pkin(1) * t2960 + t2931;
t3193 = t2898 * t2960;
t3300 = 0.2e1 * (t2785 * t2916 * t3193 + t2794 * t3215) * t2955;
t2844 = -t2936 * t3127 + t2856 * t2958 - t3155 + t2922 * t2933 + (t3295 * t2933 + t3298 * t2936) * t2952;
t2969 = 0.1e1 / qJ(3,3);
t2841 = t2844 * t2969;
t3173 = t2952 * t2967;
t3266 = qJ(3,3) * t2958;
t3022 = -t3173 + t3266;
t2874 = (t2933 * t2965 - t2936 * t2966) * t2953 - t2959 * t2964;
t2896 = 0.1e1 / t2907 ^ 2;
t2897 = t2895 * t2896;
t3197 = t2897 * t2969;
t3039 = t2838 * t2874 * t3197;
t3217 = t2874 * t2969;
t3091 = t2896 * t3217;
t3151 = t2967 * t2969;
t3219 = t2874 * t2896;
t3280 = pkin(4) * t2874;
t2784 = -(t2841 * t2952 + (-t3280 + (-t2952 * t3151 + t2958) * t2838) * t2895) * t3219 - t3022 * t3039 - t2952 * t2844 * t3091;
t2927 = 0.2e1 * t2945 - 0.1e1;
t3163 = t2958 * t2969;
t3078 = t2952 * t3163;
t2793 = t2844 * t3078 + (t3078 * t3292 + t2927) * t3241;
t2914 = pkin(1) * t2958 + t2930;
t3199 = t2895 * t2958;
t3299 = 0.2e1 * (t2784 * t2914 * t3199 + t2793 * t3219) * t2953;
t2968 = qJ(3,3) ^ 2;
t2977 = pkin(4) ^ 2;
t3220 = t2874 * t2895;
t3092 = t2945 * t3220;
t3240 = t2838 * t2969;
t3097 = t2895 * t3240;
t2830 = pkin(1) * t3097;
t2811 = t2830 - t2841;
t2802 = pkin(2) * t3097 + t2811;
t3250 = t2802 * t2952;
t3284 = -pkin(4) / 0.2e1;
t2787 = (qJ(3,3) + t2967) * (-qJ(3,3) + t2967) * t3092 + 0.2e1 * (t2874 * t3173 + t3240 * t3284) * qJ(3,3) * t3199 + pkin(4) * t3250 + (t2968 + t2977) * t3220;
t3201 = t2895 * t2952;
t2859 = t3201 * t3280;
t2823 = t2967 * t3097 + t2859;
t2979 = pkin(1) ^ 2;
t3073 = -t2979 + (t3292 - pkin(2)) * pkin(2);
t2970 = 0.1e1 / qJ(3,3) ^ 2;
t3232 = t2844 * t2970;
t3239 = t2838 * t2970;
t2988 = (t2787 * t3217 - (t2844 * t3151 + ((-t2968 + t3073) * t3240 + t3022 * t3280) * t2895) * t3239) * t2895 - t2823 * t3232;
t2971 = qJ(3,2) ^ 2;
t3216 = t2875 * t2898;
t3090 = t2946 * t3216;
t3237 = t2839 * t2972;
t3095 = t2898 * t3237;
t2832 = pkin(1) * t3095;
t2812 = t2832 - t2842;
t2803 = pkin(2) * t3095 + t2812;
t3249 = t2803 * t2954;
t2788 = (qJ(3,2) + t2967) * (-qJ(3,2) + t2967) * t3090 + 0.2e1 * (t2875 * t3169 + t3237 * t3284) * qJ(3,2) * t3193 + pkin(4) * t3249 + (t2971 + t2977) * t3216;
t3195 = t2898 * t2954;
t2860 = t3195 * t3279;
t2824 = t2967 * t3095 + t2860;
t2973 = 0.1e1 / qJ(3,2) ^ 2;
t3231 = t2845 * t2973;
t3236 = t2839 * t2973;
t2987 = (t2788 * t3213 - (t2845 * t3150 + ((-t2971 + t3073) * t3237 + t3023 * t3279) * t2898) * t3236) * t2898 - t2824 * t3231;
t2974 = qJ(3,1) ^ 2;
t3212 = t2876 * t2901;
t3088 = t2947 * t3212;
t3234 = t2840 * t2975;
t3093 = t2901 * t3234;
t2834 = pkin(1) * t3093;
t2813 = t2834 - t2843;
t2804 = pkin(2) * t3093 + t2813;
t3248 = t2804 * t2956;
t2789 = (qJ(3,1) + t2967) * (-qJ(3,1) + t2967) * t3088 + 0.2e1 * (t2876 * t3165 + t3234 * t3284) * qJ(3,1) * t3188 + pkin(4) * t3248 + (t2974 + t2977) * t3212;
t3189 = t2901 * t2956;
t2861 = t3189 * t3278;
t2825 = t2967 * t3093 + t2861;
t2976 = 0.1e1 / qJ(3,1) ^ 2;
t3230 = t2846 * t2976;
t3233 = t2840 * t2976;
t2986 = (t2789 * t3209 - (t2846 * t3149 + ((-t2974 + t3073) * t3234 + t3024 * t3278) * t2901) * t3233) * t2901 - t2825 * t3230;
t3291 = 2 * pkin(1);
t3290 = -0.2e1 * t2945;
t3289 = -0.2e1 * t2946;
t3288 = -0.2e1 * t2947;
t3287 = -0.2e1 * t2959;
t3286 = -0.2e1 * t2961;
t3285 = -0.2e1 * t2963;
t2826 = t2838 * t3201;
t2778 = t2958 * t2787 * t3091 - (-(t2859 + t2802) * t3164 + (pkin(4) * t3092 - t3250) * qJ(3,3)) * t2896 * t3239 - (t2823 * t2958 + t2826) * t2895 * t3232;
t3283 = pkin(1) * t2778;
t2827 = t2839 * t3195;
t2779 = t2960 * t2788 * t3089 - (-(t2860 + t2803) * t3161 + (pkin(4) * t3090 - t3249) * qJ(3,2)) * t2899 * t3236 - (t2824 * t2960 + t2827) * t2898 * t3231;
t3282 = pkin(1) * t2779;
t2828 = t2840 * t3189;
t2780 = t2962 * t2789 * t3087 - (-(t2861 + t2804) * t3158 + (pkin(4) * t3088 - t3248) * qJ(3,1)) * t2902 * t3233 - (t2825 * t2962 + t2828) * t2901 * t3230;
t3281 = pkin(1) * t2780;
t3263 = t2933 * qJ(3,3);
t3262 = t2934 * qJ(3,2);
t3261 = t2935 * qJ(3,1);
t3260 = t2936 * qJ(3,3);
t3259 = t2937 * qJ(3,2);
t3258 = t2938 * qJ(3,1);
t3257 = (-t2988 + 0.2e1 * t3283) * t2895;
t3256 = (-t2987 + 0.2e1 * t3282) * t2898;
t3255 = (-t2986 + 0.2e1 * t3281) * t2901;
t3254 = t2778 * t2959;
t3253 = t2779 * t2961;
t3252 = t2780 * t2963;
t3251 = t2786 * t2901;
t2871 = t2874 ^ 2;
t2868 = t2871 * t2896;
t3223 = t2871 * t2945;
t3244 = t2838 ^ 2 * t2970;
t2817 = -t2868 + (t3223 - t3244) * t2896;
t3247 = t2817 * t2969;
t2872 = t2875 ^ 2;
t2869 = t2872 * t2899;
t3222 = t2872 * t2946;
t3243 = t2839 ^ 2 * t2973;
t2818 = -t2869 + (t3222 - t3243) * t2899;
t3246 = t2818 * t2972;
t2873 = t2876 ^ 2;
t2870 = t2873 * t2902;
t3221 = t2873 * t2947;
t3242 = t2840 ^ 2 * t2976;
t2819 = -t2870 + (t3221 - t3242) * t2902;
t3245 = t2819 * t2975;
t3174 = t2952 * t2959;
t2890 = qJ(3,3) * t3174 - t3277;
t3162 = t2959 * t2967;
t2850 = (t2936 * t3162 - t3263) * t2945 + (t2890 * t2936 + t2933 * t3173) * t2958 + t3263;
t3229 = t2850 * t2969;
t3170 = t2954 * t2961;
t2892 = qJ(3,2) * t3170 - t3276;
t3159 = t2961 * t2967;
t2851 = (t2937 * t3159 - t3262) * t2946 + (t2892 * t2937 + t2934 * t3169) * t2960 + t3262;
t3228 = t2851 * t2972;
t3166 = t2956 * t2963;
t2894 = qJ(3,1) * t3166 - t3275;
t3156 = t2963 * t2967;
t2852 = (t2938 * t3156 - t3261) * t2947 + (t2894 * t2938 + t2935 * t3165) * t2962 + t3261;
t3227 = t2852 * t2975;
t2853 = (-t2933 * t3162 - t3260) * t2945 + (-t2890 * t2933 + t2936 * t3173) * t2958 + t3260;
t3226 = t2853 * t2969;
t2854 = (-t2934 * t3159 - t3259) * t2946 + (-t2892 * t2934 + t2937 * t3169) * t2960 + t3259;
t3225 = t2854 * t2972;
t2855 = (-t2935 * t3156 - t3258) * t2947 + (-t2894 * t2935 + t2938 * t3165) * t2962 + t3258;
t3224 = t2855 * t2975;
t3218 = t2874 * t2953;
t3214 = t2875 * t2955;
t3210 = t2876 * t2957;
t2880 = -t2907 * t2953 - t2939;
t3208 = t2880 * t2952;
t2881 = -t2908 * t2955 - t2940;
t3207 = t2881 * t2954;
t2882 = -t2909 * t2957 - t2941;
t3206 = t2882 * t2956;
t3175 = t2952 * t2958;
t3072 = t3175 * t3291;
t3131 = qJ(3,3) * t3290;
t3205 = (qJ(3,3) + t3072 + t3131) * t2897;
t3171 = t2954 * t2960;
t3071 = t3171 * t3291;
t3132 = qJ(3,2) * t3289;
t3204 = (qJ(3,2) + t3071 + t3132) * t2900;
t3167 = t2956 * t2962;
t3070 = t3167 * t3291;
t3133 = qJ(3,1) * t3288;
t3203 = (qJ(3,1) + t3070 + t3133) * t2903;
t2913 = -pkin(1) * t2952 + t3266;
t3202 = t2895 * t2913;
t3200 = t2895 * t2953;
t3198 = t2895 * t2959;
t2915 = -pkin(1) * t2954 + t3269;
t3196 = t2898 * t2915;
t3194 = t2898 * t2955;
t3192 = t2898 * t2961;
t2917 = -pkin(1) * t2956 + t3272;
t3190 = t2901 * t2917;
t3187 = t2901 * t2963;
t3185 = t2933 * t2953;
t3184 = t2934 * t2955;
t3183 = t2935 * t2957;
t3182 = t2936 * t2953;
t3181 = t2937 * t2955;
t3180 = t2938 * t2957;
t3179 = t2945 * t2969;
t3178 = t2946 * t2972;
t3177 = t2947 * t2975;
t3148 = t2969 * t2778;
t3147 = t2972 * t2779;
t3146 = t2975 * t2780;
t3063 = t2844 * t3302;
t3139 = -t2968 + t2979;
t3145 = (t2968 + t2979) * t2778 - pkin(1) * t2988 + t2969 * t3063 + (-t2927 * qJ(3,3) * pkin(1) + t3139 * t3175) * t2868;
t3062 = t2845 * t3303;
t3138 = -t2971 + t2979;
t3144 = (t2971 + t2979) * t2779 - pkin(1) * t2987 + t2972 * t3062 + (-t2928 * qJ(3,2) * pkin(1) + t3138 * t3171) * t2869;
t3061 = t2846 * t3304;
t3137 = -t2974 + t2979;
t3143 = (t2974 + t2979) * t2780 - pkin(1) * t2986 + t2975 * t3061 + (-t2929 * qJ(3,1) * pkin(1) + t3137 * t3167) * t2870;
t2773 = t2988 - t3283;
t3036 = t3175 * t2868;
t3142 = -pkin(1) * t3036 + t2817 * qJ(3,3) + t2773;
t2775 = t2987 - t3282;
t3035 = t3171 * t2869;
t3141 = -pkin(1) * t3035 + t2818 * qJ(3,2) + t2775;
t2777 = t2986 - t3281;
t3034 = t3167 * t2870;
t3140 = -pkin(1) * t3034 + t2819 * qJ(3,1) + t2777;
t3130 = t2874 * t3287;
t3129 = t2875 * t3286;
t3128 = t2876 * t3285;
t3118 = t2895 * t3148;
t3117 = t2898 * t3147;
t3116 = t2901 * t3146;
t3115 = t2784 * t3200;
t3114 = t2784 * t3198;
t3113 = t2784 * t3176;
t3112 = t2785 * t3194;
t3111 = t2785 * t3192;
t3110 = t2785 * t3172;
t3109 = t2786 * t3187;
t3108 = t2786 * t3168;
t3107 = (t2826 + (t2830 - 0.2e1 * t2841) * t2958) * t2838 * t2896;
t3106 = (t2827 + (t2832 - 0.2e1 * t2842) * t2960) * t2839 * t2899;
t3105 = (t2828 + (t2834 - 0.2e1 * t2843) * t2962) * t2840 * t2902;
t3101 = t2897 * t3244;
t3100 = t2900 * t3243;
t3099 = t2903 * t3242;
t3098 = t2838 * t3218;
t3096 = t2839 * t3214;
t3094 = t2840 * t3210;
t2877 = t2953 * t3164 + t2889;
t3086 = t2877 * t3199;
t3085 = t2877 * t3163;
t2878 = t2955 * t3161 + t2891;
t3084 = t2878 * t3193;
t3083 = t2878 * t3160;
t2879 = t2957 * t3158 + t2893;
t3082 = t2879 * t3188;
t3081 = t2879 * t3157;
t3080 = t2901 * t3183;
t3079 = t2901 * t3180;
t2766 = t2773 * t2952 + t2778 * t3266;
t3077 = t2766 * t3200;
t2767 = t2775 * t2954 + t2779 * t3269;
t3075 = t2767 * t3194;
t3069 = t3145 * t2895;
t3068 = t3144 * t2898;
t3067 = t3143 * t2901;
t3066 = -0.2e1 * t2784 * t3174;
t3065 = -0.2e1 * t2785 * t3170;
t3064 = -0.2e1 * t2786 * t3166;
t3060 = t2896 * t3130;
t3059 = t2899 * t3129;
t3058 = t2902 * t3128;
t3057 = (t2970 * t3063 + (pkin(1) * t3290 - 0.2e1 * qJ(3,3) * t3175 + pkin(1)) * t2868) * t2969 + 0.2e1 * t2778;
t3056 = (t2973 * t3062 + (pkin(1) * t3289 - 0.2e1 * qJ(3,2) * t3171 + pkin(1)) * t2869) * t2972 + 0.2e1 * t2779;
t3055 = (t2976 * t3061 + (pkin(1) * t3288 - 0.2e1 * qJ(3,1) * t3167 + pkin(1)) * t2870) * t2975 + 0.2e1 * t2780;
t2942 = t2952 ^ 2;
t3054 = t2942 * t3115;
t2943 = t2954 ^ 2;
t3053 = t2943 * t3112;
t2944 = t2956 ^ 2;
t3052 = t2944 * t2957 * t3251;
t2790 = -t2844 * t3179 + (pkin(1) * t3179 + t3175) * t3302 - t2811;
t3051 = t2790 * t2896 * t3218;
t2791 = -t2845 * t3178 + (pkin(1) * t3178 + t3171) * t3303 - t2812;
t3050 = t2791 * t2899 * t3214;
t2792 = -t2846 * t3177 + (pkin(1) * t3177 + t3167) * t3304 - t2813;
t3049 = t2792 * t2902 * t3210;
t3048 = t2953 * t3107;
t3047 = t2955 * t3106;
t3046 = t2957 * t3105;
t3045 = t2953 * t3101;
t3044 = t2959 * t3101;
t3043 = t2955 * t3100;
t3042 = t2961 * t3100;
t3041 = t2957 * t3099;
t3040 = t2963 * t3099;
t3033 = t2897 * t3078;
t3032 = t2900 * t3076;
t3031 = t2903 * t3074;
t3030 = t3113 * t3310;
t3029 = t3113 * t3307;
t3028 = t3110 * t3309;
t3027 = t3110 * t3306;
t3026 = t3108 * t3308;
t3025 = t3108 * t3305;
t3021 = t2952 * t3045;
t3020 = t2958 * t3045;
t3019 = t2954 * t3043;
t3018 = t2960 * t3043;
t3017 = t2956 * t3041;
t3016 = t2962 * t3041;
t3015 = t2927 * t3039;
t3014 = t2928 * t3038;
t3013 = t2929 * t3037;
t3012 = -t2778 - t3036;
t3011 = -t2779 - t3035;
t3010 = -t2780 - t3034;
t3009 = t2953 * t3015;
t3008 = t2955 * t3014;
t3007 = t2957 * t3013;
t3006 = t2871 * t3205 + t3257;
t3005 = t2872 * t3204 + t3256;
t3004 = t2873 * t3203 + t3255;
t3003 = -t2784 * (qJ(3,3) * t3072 + t3139 * t2945 + t2968) * t2895 + 0.2e1 * ((t2830 - t2841 / 0.2e1) * t3131 + (pkin(1) * t2811 - qJ(3,3) * t3241) * t3175 + qJ(3,3) * t2811) * t3219;
t3002 = -t2785 * (qJ(3,2) * t3071 + t3138 * t2946 + t2971) * t2898 + 0.2e1 * ((t2832 - t2842 / 0.2e1) * t3132 + (pkin(1) * t2812 - qJ(3,2) * t3238) * t3171 + qJ(3,2) * t2812) * t3215;
t3001 = 0.2e1 * ((t2834 - t2843 / 0.2e1) * t3133 + (pkin(1) * t2813 - qJ(3,1) * t3235) * t3167 + qJ(3,1) * t2813) * t3211 - (qJ(3,1) * t3070 + t3137 * t2947 + t2974) * t3251;
t2994 = t2895 * (-t2778 * t3182 + t2784 * t3229);
t2993 = t2895 * (t2778 * t3185 + t2784 * t3226);
t2992 = t2898 * (-t2779 * t3181 + t2785 * t3228);
t2991 = t2898 * (t2779 * t3184 + t2785 * t3225);
t2990 = t2901 * (-t2780 * t3180 + t2786 * t3227);
t2989 = t2901 * (t2780 * t3183 + t2786 * t3224);
t2867 = -t3311 * t2935 - t3024 * t2938;
t2866 = -t3312 * t2934 - t3023 * t2937;
t2865 = -t3313 * t2933 - t3022 * t2936;
t2864 = -t3024 * t2935 + t3311 * t2938;
t2863 = -t3023 * t2934 + t3312 * t2937;
t2862 = -t3022 * t2933 + t3313 * t2936;
t2849 = -0.2e1 * t2902 * t3221 + t2870;
t2848 = -0.2e1 * t2899 * t3222 + t2869;
t2847 = -0.2e1 * t2896 * t3223 + t2868;
t2768 = t2777 * t2956 + t2780 * t3272;
t1 = [(-t2786 * t3079 - t2936 * t3115 - t2937 * t3112) * MDP(1) + (-t2936 * t3054 - t2937 * t3053 - t2938 * t3052 + (-t2852 * t2873 + t3094 * t3305) * t3031 + (-t2851 * t2872 + t3096 * t3306) * t3032 + (-t2850 * t2871 + t3098 * t3307) * t3033) * MDP(4) + (t3009 * t3307 + t3008 * t3306 + t3007 * t3305 + (t2849 * t3227 + t2962 * t3025) * t2901 + (t2848 * t3228 + t2960 * t3027) * t2898 + (t2847 * t3229 + t2958 * t3029) * t2895) * MDP(5) + (-t2936 * t3020 - t2937 * t3018 - t2938 * t3016 + t2952 * t2994 + t2954 * t2992 + t2956 * t2990) * MDP(6) + (t2936 * t3021 + t2937 * t3019 + t2938 * t3017 + t2958 * t2994 + t2960 * t2992 + t2962 * t2990) * MDP(7) + (t2850 * t3118 + t2851 * t3117 + t2852 * t3116) * MDP(8) + (-t2938 * t3301 - t2937 * t3300 - t2936 * t3299 + (t3004 * t2852 + t3010 * t2864) * t2975 + (t3005 * t2851 + t3011 * t2863) * t2972 + (t3006 * t2850 + t3012 * t2862) * t2969) * MDP(11) + (-t2936 * t3077 - t2937 * t3075 - t2768 * t3079 + (t2938 * t3046 + (t2852 * t3190 + t2864 * t2956) * t2786) * t2975 + (t2937 * t3047 + (t2851 * t3196 + t2863 * t2954) * t2785) * t2972 + (t2936 * t3048 + (t2850 * t3202 + t2862 * t2952) * t2784) * t2969) * MDP(12) + (t3051 * t3307 + t3050 * t3306 + t3049 * t3305 + t2862 * t3247 + t2863 * t3246 + t2864 * t3245 + (t3055 * t2852 + t2918 * t3025) * t2901 + (t3056 * t2851 + t2916 * t3027) * t2898 + (t3057 * t2850 + t2914 * t3029) * t2895) * MDP(13) + (t3001 * t3180 + t3002 * t3181 + t3003 * t3182 + (t2852 * t3067 + t3140 * t2864) * t2975 + (t2851 * t3068 + t3141 * t2863) * t2972 + (t2850 * t3069 + t3142 * t2862) * t2969) * MDP(14); (t2786 * t3080 + t2933 * t3115 + t2934 * t3112) * MDP(1) + (t2933 * t3054 + t2934 * t3053 + t2935 * t3052 + (-t2855 * t2873 + t3094 * t3308) * t3031 + (-t2854 * t2872 + t3096 * t3309) * t3032 + (-t2853 * t2871 + t3098 * t3310) * t3033) * MDP(4) + (t3009 * t3310 + t3008 * t3309 + t3007 * t3308 + (t2849 * t3224 + t2962 * t3026) * t2901 + (t2848 * t3225 + t2960 * t3028) * t2898 + (t2847 * t3226 + t2958 * t3030) * t2895) * MDP(5) + (t2933 * t3020 + t2934 * t3018 + t2935 * t3016 + t2952 * t2993 + t2954 * t2991 + t2956 * t2989) * MDP(6) + (-t2933 * t3021 - t2934 * t3019 - t2935 * t3017 + t2958 * t2993 + t2960 * t2991 + t2962 * t2989) * MDP(7) + (t2853 * t3118 + t2854 * t3117 + t2855 * t3116) * MDP(8) + (t2935 * t3301 + t2934 * t3300 + t2933 * t3299 + (t3004 * t2855 + t3010 * t2867) * t2975 + (t3005 * t2854 + t3011 * t2866) * t2972 + (t3006 * t2853 + t3012 * t2865) * t2969) * MDP(11) + (t2933 * t3077 + t2934 * t3075 + t2768 * t3080 + (-t2935 * t3046 + (t2855 * t3190 + t2867 * t2956) * t2786) * t2975 + (-t2934 * t3047 + (t2854 * t3196 + t2866 * t2954) * t2785) * t2972 + (-t2933 * t3048 + (t2853 * t3202 + t2865 * t2952) * t2784) * t2969) * MDP(12) + (t3051 * t3310 + t3050 * t3309 + t3049 * t3308 + t2865 * t3247 + t2866 * t3246 + t2867 * t3245 + (t3055 * t2855 + t2918 * t3026) * t2901 + (t3056 * t2854 + t2916 * t3028) * t2898 + (t3057 * t2853 + t2914 * t3030) * t2895) * MDP(13) + (-t3001 * t3183 - t3002 * t3184 - t3003 * t3185 + (t2855 * t3067 + t3140 * t2867) * t2975 + (t2854 * t3068 + t3141 * t2866) * t2972 + (t2853 * t3069 + t3142 * t2865) * t2969) * MDP(14); (-t3109 - t3111 - t3114) * MDP(1) + (-t2942 * t3114 - t2943 * t3111 - t2944 * t3109 + (t2840 * t2962 * t3128 + t2879 * t3221) * t2956 * t3186 + (t2839 * t2960 * t3129 + t2878 * t3222) * t2954 * t3191 + (t2838 * t2958 * t3130 + t2877 * t3223) * t2952 * t3197) * MDP(4) + (t3015 * t3287 + t3014 * t3286 + t3013 * t3285 + (-t2849 * t2879 * t2975 + t3064) * t3188 + (-t2848 * t2878 * t2972 + t3065) * t3193 + (-t2847 * t2877 * t2969 + t3066) * t3199) * MDP(5) + (-t2958 * t3044 - t2960 * t3042 - t2962 * t3040 + (-t2786 * t3081 - t3252) * t3189 + (-t2785 * t3083 - t3253) * t3195 + (-t2784 * t3085 - t3254) * t3201) * MDP(6) + (t2952 * t3044 + t2954 * t3042 + t2956 * t3040 + (-t2786 * t2879 * t3177 - t2962 * t3252) * t2901 + (-t2785 * t2878 * t3178 - t2960 * t3253) * t2898 + (-t2784 * t2877 * t3179 - t2958 * t3254) * t2895) * MDP(7) + (-t2778 * t2895 * t3085 - t2779 * t2898 * t3083 - t2780 * t2901 * t3081) * MDP(8) + (t2793 * t3060 + t2794 * t3059 + t2795 * t3058 - t2880 * t3148 - t2881 * t3147 - t2882 * t3146 + (-0.2e1 * t2918 * t3109 + (-t2879 * t3255 + (-t2879 * t3203 - t2902 * t3206) * t2873) * t2975) * t2962 + (-0.2e1 * t2916 * t3111 + (-t2878 * t3256 + (-t2878 * t3204 - t2899 * t3207) * t2872) * t2972) * t2960 + (-0.2e1 * t2914 * t3114 + (-t2877 * t3257 + (-t2877 * t3205 - t2896 * t3208) * t2871) * t2969) * t2958) * MDP(11) + (-t2766 * t3198 - t2767 * t3192 - t2768 * t3187 + (t2963 * t3105 + (-t2917 * t3082 + t3206) * t2786) * t2975 + (t2961 * t3106 + (-t2915 * t3084 + t3207) * t2785) * t2972 + (t2959 * t3107 + (-t2913 * t3086 + t3208) * t2784) * t2969) * MDP(12) + (t2790 * t3060 + t2791 * t3059 + t2792 * t3058 + t2880 * t3247 + t2881 * t3246 + t2882 * t3245 + (-t3055 * t2962 * t2879 + t2918 * t3064) * t2901 + (-t3056 * t2960 * t2878 + t2916 * t3065) * t2898 + (-t3057 * t2958 * t2877 + t2914 * t3066) * t2895) * MDP(13) + (t3001 * t2963 + t3002 * t2961 + t3003 * t2959 + (t3140 * t2882 - t3143 * t3082) * t2975 + (t3141 * t2881 - t3144 * t3084) * t2972 + (t3142 * t2880 - t3145 * t3086) * t2969) * MDP(14);];
taucX  = t1;
