% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V1G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:11
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR12V1G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:11:04
% EndTime: 2020-08-06 19:11:14
% DurationCPUTime: 9.42s
% Computational Cost: add. (5361->487), mult. (9474->967), div. (1125->12), fcn. (7920->18), ass. (0->383)
t2492 = sin(qJ(2,3));
t2465 = t2492 * qJ(3,3);
t2498 = cos(qJ(2,3));
t2504 = pkin(1) + pkin(2);
t2447 = t2498 * t2504 + t2465;
t2493 = sin(qJ(1,3));
t2499 = cos(qJ(1,3));
t2426 = pkin(4) * t2499 + t2447 * t2493;
t2757 = pkin(4) * t2493;
t2765 = t2447 * t2499 - t2757;
t2494 = sin(qJ(2,2));
t2466 = t2494 * qJ(3,2);
t2500 = cos(qJ(2,2));
t2448 = t2500 * t2504 + t2466;
t2495 = sin(qJ(1,2));
t2501 = cos(qJ(1,2));
t2427 = pkin(4) * t2501 + t2448 * t2495;
t2756 = pkin(4) * t2495;
t2764 = t2448 * t2501 - t2756;
t2496 = sin(qJ(2,1));
t2467 = t2496 * qJ(3,1);
t2502 = cos(qJ(2,1));
t2449 = t2502 * t2504 + t2467;
t2497 = sin(qJ(1,1));
t2503 = cos(qJ(1,1));
t2428 = pkin(4) * t2503 + t2449 * t2497;
t2755 = pkin(4) * t2497;
t2763 = t2449 * t2503 - t2755;
t2762 = 2 * pkin(1);
t2761 = 2 * MDP(5);
t2760 = 2 * MDP(6);
t2759 = 2 * MDP(7);
t2758 = 2 * MDP(13);
t2751 = qJ(3,1) * t2502;
t2750 = qJ(3,2) * t2500;
t2749 = qJ(3,3) * t2498;
t2489 = legFrame(3,2);
t2468 = sin(t2489);
t2748 = t2468 * qJ(3,3);
t2490 = legFrame(2,2);
t2469 = sin(t2490);
t2747 = t2469 * qJ(3,2);
t2491 = legFrame(1,2);
t2470 = sin(t2491);
t2746 = t2470 * qJ(3,1);
t2471 = cos(t2489);
t2745 = t2471 * qJ(3,3);
t2472 = cos(t2490);
t2744 = t2472 * qJ(3,2);
t2473 = cos(t2491);
t2743 = t2473 * qJ(3,1);
t2435 = t2499 * t2465 - t2757;
t2483 = t2498 ^ 2;
t2671 = t2499 * t2504;
t2684 = t2492 * t2504;
t2399 = (t2471 * t2671 - t2748) * t2483 + (t2435 * t2471 + t2468 * t2684) * t2498 + t2748;
t2438 = 0.1e1 / t2447;
t2742 = t2399 * t2438;
t2506 = 0.1e1 / qJ(3,3);
t2741 = t2399 * t2506;
t2436 = t2501 * t2466 - t2756;
t2485 = t2500 ^ 2;
t2667 = t2501 * t2504;
t2680 = t2494 * t2504;
t2400 = (t2472 * t2667 - t2747) * t2485 + (t2436 * t2472 + t2469 * t2680) * t2500 + t2747;
t2440 = 0.1e1 / t2448;
t2740 = t2400 * t2440;
t2509 = 0.1e1 / qJ(3,2);
t2739 = t2400 * t2509;
t2437 = t2503 * t2467 - t2755;
t2487 = t2502 ^ 2;
t2663 = t2503 * t2504;
t2676 = t2496 * t2504;
t2401 = (t2473 * t2663 - t2746) * t2487 + (t2437 * t2473 + t2470 * t2676) * t2502 + t2746;
t2442 = 0.1e1 / t2449;
t2738 = t2401 * t2442;
t2512 = 0.1e1 / qJ(3,1);
t2737 = t2401 * t2512;
t2402 = (-t2468 * t2671 - t2745) * t2483 + (-t2435 * t2468 + t2471 * t2684) * t2498 + t2745;
t2736 = t2402 * t2438;
t2735 = t2402 * t2506;
t2403 = (-t2469 * t2667 - t2744) * t2485 + (-t2436 * t2469 + t2472 * t2680) * t2500 + t2744;
t2734 = t2403 * t2440;
t2733 = t2403 * t2509;
t2404 = (-t2470 * t2663 - t2743) * t2487 + (-t2437 * t2470 + t2473 * t2676) * t2502 + t2743;
t2732 = t2404 * t2442;
t2731 = t2404 * t2512;
t2444 = t2684 - t2749;
t2405 = t2444 * t2468 + t2765 * t2471;
t2507 = 0.1e1 / qJ(3,3) ^ 2;
t2730 = t2405 * t2507;
t2445 = t2680 - t2750;
t2406 = t2445 * t2469 + t2764 * t2472;
t2510 = 0.1e1 / qJ(3,2) ^ 2;
t2729 = t2406 * t2510;
t2446 = t2676 - t2751;
t2407 = t2446 * t2470 + t2763 * t2473;
t2513 = 0.1e1 / qJ(3,1) ^ 2;
t2728 = t2407 * t2513;
t2408 = t2444 * t2471 - t2765 * t2468;
t2727 = t2408 * t2507;
t2409 = t2445 * t2472 - t2764 * t2469;
t2726 = t2409 * t2510;
t2410 = t2446 * t2473 - t2763 * t2470;
t2725 = t2410 * t2513;
t2724 = t2426 ^ 2 * t2483;
t2723 = t2427 ^ 2 * t2485;
t2722 = t2428 ^ 2 * t2487;
t2721 = t2426 * t2483;
t2720 = t2426 * t2498;
t2719 = t2427 * t2485;
t2718 = t2427 * t2500;
t2717 = t2428 * t2487;
t2716 = t2428 * t2502;
t2715 = t2426 * t2507;
t2714 = t2427 * t2510;
t2713 = t2428 * t2513;
t2505 = qJ(3,3) ^ 2;
t2514 = pkin(1) ^ 2;
t2474 = t2505 + t2514;
t2712 = t2438 * t2474;
t2711 = t2438 * t2498;
t2439 = 0.1e1 / t2447 ^ 2;
t2478 = t2493 ^ 2;
t2710 = t2439 * t2478;
t2484 = t2499 ^ 2;
t2709 = t2439 * t2484;
t2708 = t2439 * t2506;
t2707 = t2439 * t2507;
t2508 = qJ(3,2) ^ 2;
t2475 = t2508 + t2514;
t2706 = t2440 * t2475;
t2705 = t2440 * t2500;
t2441 = 0.1e1 / t2448 ^ 2;
t2480 = t2495 ^ 2;
t2704 = t2441 * t2480;
t2486 = t2501 ^ 2;
t2703 = t2441 * t2486;
t2702 = t2441 * t2509;
t2701 = t2441 * t2510;
t2511 = qJ(3,1) ^ 2;
t2476 = t2511 + t2514;
t2700 = t2442 * t2476;
t2699 = t2442 * t2502;
t2443 = 0.1e1 / t2449 ^ 2;
t2482 = t2497 ^ 2;
t2698 = t2443 * t2482;
t2488 = t2503 ^ 2;
t2697 = t2443 * t2488;
t2696 = t2443 * t2512;
t2695 = t2443 * t2513;
t2454 = pkin(1) * t2498 + t2465;
t2694 = t2454 * t2492;
t2456 = pkin(1) * t2500 + t2466;
t2693 = t2456 * t2494;
t2458 = pkin(1) * t2502 + t2467;
t2692 = t2458 * t2496;
t2691 = t2468 * t2493;
t2690 = t2469 * t2495;
t2689 = t2470 * t2497;
t2688 = t2471 * t2493;
t2687 = t2472 * t2495;
t2686 = t2473 * t2497;
t2685 = t2492 * t2498;
t2683 = t2492 * t2506;
t2682 = t2493 * t2499;
t2681 = t2494 * t2500;
t2679 = t2494 * t2509;
t2678 = t2495 * t2501;
t2677 = t2496 * t2502;
t2675 = t2496 * t2512;
t2674 = t2497 * t2503;
t2673 = t2498 * t2499;
t2670 = t2499 * t2506;
t2669 = t2500 * t2501;
t2666 = t2501 * t2509;
t2665 = t2502 * t2503;
t2662 = t2503 * t2512;
t2661 = pkin(1) * t2742;
t2660 = pkin(1) * t2740;
t2659 = pkin(1) * t2738;
t2658 = pkin(1) * t2736;
t2657 = pkin(1) * t2734;
t2656 = pkin(1) * t2732;
t2655 = t2405 * t2683;
t2654 = t2406 * t2679;
t2653 = t2407 * t2675;
t2652 = t2408 * t2683;
t2651 = t2409 * t2679;
t2650 = t2410 * t2675;
t2649 = t2426 * t2711;
t2648 = t2493 * t2721;
t2647 = t2493 * t2720;
t2646 = t2506 * t2720;
t2645 = t2507 * t2720;
t2644 = t2427 * t2705;
t2643 = t2495 * t2719;
t2642 = t2495 * t2718;
t2641 = t2509 * t2718;
t2640 = t2510 * t2718;
t2639 = t2428 * t2699;
t2638 = t2497 * t2717;
t2637 = t2497 * t2716;
t2636 = t2512 * t2716;
t2635 = t2513 * t2716;
t2634 = t2426 * t2683;
t2633 = t2427 * t2679;
t2632 = t2428 * t2675;
t2453 = -pkin(1) * t2492 + t2749;
t2631 = t2453 * t2708;
t2630 = t2439 * t2454 * t2498;
t2459 = t2468 ^ 2;
t2629 = t2459 * t2710;
t2462 = t2471 ^ 2;
t2628 = t2462 * t2710;
t2477 = t2492 ^ 2;
t2627 = t2477 * t2710;
t2626 = t2439 * t2685;
t2625 = t2439 * t2683;
t2624 = t2439 * t2682;
t2623 = t2493 * t2708;
t2622 = t2439 * t2670;
t2455 = -pkin(1) * t2494 + t2750;
t2621 = t2455 * t2702;
t2620 = t2441 * t2456 * t2500;
t2460 = t2469 ^ 2;
t2619 = t2460 * t2704;
t2463 = t2472 ^ 2;
t2618 = t2463 * t2704;
t2479 = t2494 ^ 2;
t2617 = t2479 * t2704;
t2616 = t2441 * t2681;
t2615 = t2441 * t2679;
t2614 = t2441 * t2678;
t2613 = t2495 * t2702;
t2612 = t2441 * t2666;
t2457 = -pkin(1) * t2496 + t2751;
t2611 = t2457 * t2696;
t2610 = t2443 * t2458 * t2502;
t2461 = t2470 ^ 2;
t2609 = t2461 * t2698;
t2464 = t2473 ^ 2;
t2608 = t2464 * t2698;
t2481 = t2496 ^ 2;
t2607 = t2481 * t2698;
t2606 = t2443 * t2677;
t2605 = t2443 * t2675;
t2604 = t2443 * t2674;
t2603 = t2497 * t2696;
t2602 = t2443 * t2662;
t2601 = t2478 * t2694;
t2600 = t2480 * t2693;
t2599 = t2482 * t2692;
t2598 = t2468 * t2471 * t2478;
t2597 = t2469 * t2472 * t2480;
t2596 = t2470 * t2473 * t2482;
t2595 = t2492 * t2670;
t2594 = t2494 * t2666;
t2593 = t2496 * t2662;
t2432 = (-t2505 + t2514) * t2483 + qJ(3,3) * t2685 * t2762 + t2505;
t2433 = (-t2508 + t2514) * t2485 + qJ(3,2) * t2681 * t2762 + t2508;
t2434 = (-t2511 + t2514) * t2487 + qJ(3,1) * t2677 * t2762 + t2511;
t2553 = t2473 * t2604;
t2560 = t2472 * t2614;
t2567 = t2471 * t2624;
t2592 = t2432 * t2567 + t2433 * t2560 + t2434 * t2553;
t2555 = t2443 * t2596;
t2527 = t2502 * t2555;
t2562 = t2441 * t2597;
t2530 = t2500 * t2562;
t2569 = t2439 * t2598;
t2533 = t2498 * t2569;
t2591 = -0.2e1 * t2454 * t2533 - 0.2e1 * t2456 * t2530 - 0.2e1 * t2458 * t2527;
t2550 = t2502 * t2604;
t2528 = t2458 * t2550;
t2557 = t2500 * t2614;
t2531 = t2456 * t2557;
t2564 = t2498 * t2624;
t2534 = t2454 * t2564;
t2590 = -0.2e1 * t2468 * t2534 - 0.2e1 * t2469 * t2531 - 0.2e1 * t2470 * t2528;
t2589 = 0.2e1 * t2471 * t2534 + 0.2e1 * t2472 * t2531 + 0.2e1 * t2473 * t2528;
t2588 = pkin(1) * t2649;
t2587 = pkin(1) * t2644;
t2586 = pkin(1) * t2639;
t2585 = t2399 * t2631;
t2584 = t2400 * t2621;
t2583 = t2401 * t2611;
t2582 = t2402 * t2631;
t2581 = t2403 * t2621;
t2580 = t2404 * t2611;
t2579 = t2439 * t2645;
t2578 = t2426 * t2622;
t2577 = t2441 * t2640;
t2576 = t2427 * t2612;
t2575 = t2443 * t2635;
t2574 = t2428 * t2602;
t2573 = t2493 * t2634;
t2572 = t2495 * t2633;
t2571 = t2497 * t2632;
t2570 = t2453 * t2622;
t2568 = t2468 * t2624;
t2566 = t2477 * t2624;
t2565 = t2478 * t2626;
t2563 = t2455 * t2612;
t2561 = t2469 * t2614;
t2559 = t2479 * t2614;
t2558 = t2480 * t2616;
t2556 = t2457 * t2602;
t2554 = t2470 * t2604;
t2552 = t2481 * t2604;
t2551 = t2482 * t2606;
t2549 = t2682 * t2694;
t2548 = t2678 * t2693;
t2547 = t2674 * t2692;
t2546 = 0.2e1 * t2478 * t2630;
t2545 = 0.2e1 * t2480 * t2620;
t2544 = 0.2e1 * t2482 * t2610;
t2543 = t2399 * t2471 * t2623;
t2542 = t2400 * t2472 * t2613;
t2541 = t2401 * t2473 * t2603;
t2540 = t2402 * t2468 * t2623;
t2539 = t2403 * t2469 * t2613;
t2538 = t2404 * t2470 * t2603;
t2537 = t2498 * t2578;
t2536 = t2500 * t2576;
t2535 = t2502 * t2574;
t2532 = t2492 * t2564;
t2529 = t2494 * t2557;
t2526 = t2496 * t2550;
t2525 = t2453 * t2623 * t2720;
t2524 = t2455 * t2613 * t2718;
t2523 = t2457 * t2603 * t2716;
t2517 = (t2401 * t2470 - t2404 * t2473) * t2603;
t2518 = (t2400 * t2469 - t2403 * t2472) * t2613;
t2519 = (t2399 * t2468 - t2402 * t2471) * t2623;
t2522 = ((t2401 * t2731 - t2596 * t2692) * t2443 + (t2400 * t2733 - t2597 * t2693) * t2441 + (t2399 * t2735 - t2598 * t2694) * t2439) * t2758 + (t2492 * t2519 + t2494 * t2518 + t2496 * t2517) * MDP(6) + (t2498 * t2519 + t2500 * t2518 + t2502 * t2517) * MDP(7) + (t2399 * t2402 * t2707 + t2400 * t2403 * t2701 + t2401 * t2404 * t2695) * MDP(8) + (-t2492 * t2533 - t2494 * t2530 - t2496 * t2527) * t2761 + (-t2477 * t2569 - t2479 * t2562 - t2481 * t2555) * MDP(4) + (-t2555 - t2562 - t2569) * MDP(1);
t2521 = ((-t2404 * t2636 - t2470 * t2547) * t2443 + (-t2403 * t2641 - t2469 * t2548) * t2441 + (-t2402 * t2646 - t2468 * t2549) * t2439) * t2758 + ((-t2404 * t2503 - t2470 * t2637) * t2605 + (-t2403 * t2501 - t2469 * t2642) * t2615 + (-t2402 * t2499 - t2468 * t2647) * t2625) * MDP(6) + ((-t2404 * t2665 - t2470 * t2638) * t2696 + (-t2403 * t2669 - t2469 * t2643) * t2702 + (-t2402 * t2673 - t2468 * t2648) * t2708) * MDP(7) + (-t2402 * t2579 - t2403 * t2577 - t2404 * t2575) * MDP(8) + (-t2468 * t2532 - t2469 * t2529 - t2470 * t2526) * t2761 + (-t2468 * t2566 - t2469 * t2559 - t2470 * t2552) * MDP(4) + (-t2554 - t2561 - t2568) * MDP(1);
t2520 = ((-t2401 * t2636 + t2473 * t2547) * t2443 + (-t2400 * t2641 + t2472 * t2548) * t2441 + (-t2399 * t2646 + t2471 * t2549) * t2439) * t2758 + ((-t2401 * t2503 + t2473 * t2637) * t2605 + (-t2400 * t2501 + t2472 * t2642) * t2615 + (-t2399 * t2499 + t2471 * t2647) * t2625) * MDP(6) + ((-t2401 * t2665 + t2473 * t2638) * t2696 + (-t2400 * t2669 + t2472 * t2643) * t2702 + (-t2399 * t2673 + t2471 * t2648) * t2708) * MDP(7) + (-t2399 * t2579 - t2400 * t2577 - t2401 * t2575) * MDP(8) + (t2471 * t2532 + t2472 * t2529 + t2473 * t2526) * t2761 + (t2471 * t2566 + t2472 * t2559 + t2473 * t2552) * MDP(4) + (t2553 + t2560 + t2567) * MDP(1);
t2516 = -t2432 * t2569 - t2433 * t2562 - t2434 * t2555;
t2515 = -t2432 * t2568 - t2433 * t2561 - t2434 * t2554;
t2398 = t2404 ^ 2;
t2397 = t2403 ^ 2;
t2396 = t2402 ^ 2;
t2395 = t2401 ^ 2;
t2394 = t2400 ^ 2;
t2393 = t2399 ^ 2;
t2392 = (t2428 - 0.2e1 * t2586) * t2512;
t2391 = (-t2428 + t2586) * t2512;
t2390 = (t2427 - 0.2e1 * t2587) * t2509;
t2389 = (-t2427 + t2587) * t2509;
t2388 = (t2426 - 0.2e1 * t2588) * t2506;
t2387 = (-t2426 + t2588) * t2506;
t2386 = (pkin(1) * t2428 - t2476 * t2639) * t2512;
t2385 = (pkin(1) * t2427 - t2475 * t2644) * t2509;
t2384 = (pkin(1) * t2426 - t2474 * t2649) * t2506;
t2374 = t2391 * t2496 - t2442 * t2717;
t2373 = t2389 * t2494 - t2440 * t2719;
t2372 = t2387 * t2492 - t2438 * t2721;
t2371 = (t2410 - t2656) * t2512;
t2370 = (-t2410 + 0.2e1 * t2656) * t2512;
t2369 = (t2409 - t2657) * t2509;
t2368 = (-t2409 + 0.2e1 * t2657) * t2509;
t2367 = (t2408 - t2658) * t2506;
t2366 = (-t2408 + 0.2e1 * t2658) * t2506;
t2365 = (t2407 - t2659) * t2512;
t2364 = (-t2407 + 0.2e1 * t2659) * t2512;
t2363 = (t2406 - t2660) * t2509;
t2362 = (-t2406 + 0.2e1 * t2660) * t2509;
t2361 = (t2405 - t2661) * t2506;
t2360 = (-t2405 + 0.2e1 * t2661) * t2506;
t2359 = (-pkin(1) * t2410 + t2404 * t2700) * t2512;
t2358 = (-pkin(1) * t2407 + t2401 * t2700) * t2512;
t2357 = (-pkin(1) * t2409 + t2403 * t2706) * t2509;
t2356 = (-pkin(1) * t2406 + t2400 * t2706) * t2509;
t2355 = (-pkin(1) * t2408 + t2402 * t2712) * t2506;
t2354 = (-pkin(1) * t2405 + t2399 * t2712) * t2506;
t2353 = t2371 * t2496 + t2404 * t2699;
t2352 = t2369 * t2494 + t2403 * t2705;
t2351 = t2367 * t2492 + t2402 * t2711;
t2350 = t2365 * t2496 + t2401 * t2699;
t2349 = t2363 * t2494 + t2400 * t2705;
t2348 = t2361 * t2492 + t2399 * t2711;
t1 = [(t2608 + t2618 + t2628) * MDP(1) + (t2462 * t2627 + t2463 * t2617 + t2464 * t2607) * MDP(4) + (t2462 * t2565 + t2463 * t2558 + t2464 * t2551) * t2761 + (-t2492 * t2543 - t2494 * t2542 - t2496 * t2541) * t2760 + (-t2498 * t2543 - t2500 * t2542 - t2502 * t2541) * t2759 + (t2393 * t2707 + t2394 * t2701 + t2395 * t2695) * MDP(8) + (t2462 * t2546 + t2463 * t2545 + t2464 * t2544 + (t2364 * t2512 - t2728) * t2738 + (t2362 * t2509 - t2729) * t2740 + (t2360 * t2506 - t2730) * t2742) * MDP(11) + ((-t2583 + (-t2350 - t2653) * t2442) * t2686 + (-t2584 + (-t2349 - t2654) * t2440) * t2687 + (-t2585 + (-t2348 - t2655) * t2438) * t2688) * MDP(12) + ((t2395 * t2512 + t2464 * t2599) * t2443 + (t2394 * t2509 + t2463 * t2600) * t2441 + (t2393 * t2506 + t2462 * t2601) * t2439) * t2758 + (t2432 * t2628 + t2433 * t2618 + t2434 * t2608 + (t2358 * t2738 + t2365 * t2407) * t2512 + (t2356 * t2740 + t2363 * t2406) * t2509 + (t2354 * t2742 + t2361 * t2405) * t2506) * MDP(14) + MDP(15); ((t2370 * t2737 - t2404 * t2728) * t2442 + (t2368 * t2739 - t2403 * t2729) * t2440 + (t2366 * t2741 - t2402 * t2730) * t2438 + t2591) * MDP(11) + ((t2470 * t2583 + (-t2353 * t2473 + t2470 * t2653) * t2442) * t2497 + (t2469 * t2584 + (-t2352 * t2472 + t2469 * t2654) * t2440) * t2495 + (t2468 * t2585 + (-t2351 * t2471 + t2468 * t2655) * t2438) * t2493) * MDP(12) + ((t2359 * t2738 + t2371 * t2407) * t2512 + (t2357 * t2740 + t2369 * t2406) * t2509 + (t2355 * t2742 + t2367 * t2405) * t2506 + t2516) * MDP(14) + t2522; ((t2392 * t2737 + t2407 * t2635) * t2442 + (t2390 * t2739 + t2406 * t2640) * t2440 + (t2388 * t2741 + t2405 * t2645) * t2438 + t2589) * MDP(11) + (-t2399 * t2570 - t2400 * t2563 - t2401 * t2556 + (-t2374 * t2686 - t2407 * t2593) * t2442 + (-t2373 * t2687 - t2406 * t2594) * t2440 + (-t2372 * t2688 - t2405 * t2595) * t2438) * MDP(12) + ((t2386 * t2738 + t2391 * t2407) * t2512 + (t2385 * t2740 + t2389 * t2406) * t2509 + (t2384 * t2742 + t2387 * t2405) * t2506 + t2592) * MDP(14) + t2520; ((t2364 * t2731 - t2401 * t2725) * t2442 + (t2362 * t2733 - t2400 * t2726) * t2440 + (t2360 * t2735 - t2399 * t2727) * t2438 + t2591) * MDP(11) + ((-t2473 * t2580 + (t2350 * t2470 - t2473 * t2650) * t2442) * t2497 + (-t2472 * t2581 + (t2349 * t2469 - t2472 * t2651) * t2440) * t2495 + (-t2471 * t2582 + (t2348 * t2468 - t2471 * t2652) * t2438) * t2493) * MDP(12) + ((t2358 * t2732 + t2365 * t2410) * t2512 + (t2356 * t2734 + t2363 * t2409) * t2509 + (t2354 * t2736 + t2361 * t2408) * t2506 + t2516) * MDP(14) + t2522; (t2609 + t2619 + t2629) * MDP(1) + (t2459 * t2627 + t2460 * t2617 + t2461 * t2607) * MDP(4) + (t2459 * t2565 + t2460 * t2558 + t2461 * t2551) * t2761 + (t2492 * t2540 + t2494 * t2539 + t2496 * t2538) * t2760 + (t2498 * t2540 + t2500 * t2539 + t2502 * t2538) * t2759 + (t2396 * t2707 + t2397 * t2701 + t2398 * t2695) * MDP(8) + (t2459 * t2546 + t2460 * t2545 + t2461 * t2544 + (t2370 * t2512 - t2725) * t2732 + (t2368 * t2509 - t2726) * t2734 + (t2366 * t2506 - t2727) * t2736) * MDP(11) + ((t2580 + (t2353 + t2650) * t2442) * t2689 + (t2581 + (t2352 + t2651) * t2440) * t2690 + (t2582 + (t2351 + t2652) * t2438) * t2691) * MDP(12) + ((t2398 * t2512 + t2461 * t2599) * t2443 + (t2397 * t2509 + t2460 * t2600) * t2441 + (t2396 * t2506 + t2459 * t2601) * t2439) * t2758 + (t2432 * t2629 + t2433 * t2619 + t2434 * t2609 + (t2359 * t2732 + t2371 * t2410) * t2512 + (t2357 * t2734 + t2369 * t2409) * t2509 + (t2355 * t2736 + t2367 * t2408) * t2506) * MDP(14) + MDP(15); ((t2392 * t2731 + t2410 * t2635) * t2442 + (t2390 * t2733 + t2409 * t2640) * t2440 + (t2388 * t2735 + t2408 * t2645) * t2438 + t2590) * MDP(11) + (-t2402 * t2570 - t2403 * t2563 - t2404 * t2556 + (t2374 * t2689 - t2410 * t2593) * t2442 + (t2373 * t2690 - t2409 * t2594) * t2440 + (t2372 * t2691 - t2408 * t2595) * t2438) * MDP(12) + ((t2386 * t2732 + t2391 * t2410) * t2512 + (t2385 * t2734 + t2389 * t2409) * t2509 + (t2384 * t2736 + t2387 * t2408) * t2506 + t2515) * MDP(14) + t2521; ((-t2364 * t2636 + t2401 * t2713) * t2442 + (-t2362 * t2641 + t2400 * t2714) * t2440 + (-t2360 * t2646 + t2399 * t2715) * t2438 + t2589) * MDP(11) + (t2471 * t2525 + t2472 * t2524 + t2473 * t2523 + (-t2350 * t2503 + t2473 * t2571) * t2442 + (-t2349 * t2501 + t2472 * t2572) * t2440 + (-t2348 * t2499 + t2471 * t2573) * t2438) * MDP(12) + ((-t2358 * t2639 - t2365 * t2428) * t2512 + (-t2356 * t2644 - t2363 * t2427) * t2509 + (-t2354 * t2649 - t2361 * t2426) * t2506 + t2592) * MDP(14) + t2520; ((-t2370 * t2636 + t2404 * t2713) * t2442 + (-t2368 * t2641 + t2403 * t2714) * t2440 + (-t2366 * t2646 + t2402 * t2715) * t2438 + t2590) * MDP(11) + (-t2468 * t2525 - t2469 * t2524 - t2470 * t2523 + (-t2353 * t2503 - t2470 * t2571) * t2442 + (-t2352 * t2501 - t2469 * t2572) * t2440 + (-t2351 * t2499 - t2468 * t2573) * t2438) * MDP(12) + ((-t2359 * t2639 - t2371 * t2428) * t2512 + (-t2357 * t2644 - t2369 * t2427) * t2509 + (-t2355 * t2649 - t2367 * t2426) * t2506 + t2515) * MDP(14) + t2521; (t2697 + t2703 + t2709) * MDP(1) + (t2477 * t2709 + t2479 * t2703 + t2481 * t2697) * MDP(4) + (t2695 * t2722 + t2701 * t2723 + t2707 * t2724) * MDP(8) + 0.2e1 * (t2484 * t2630 + t2486 * t2620 + t2488 * t2610) * MDP(11) + (t2453 * t2537 + t2455 * t2536 + t2457 * t2535) * MDP(12) + (-t2387 * t2426 * t2506 - t2389 * t2427 * t2509 - t2391 * t2428 * t2512 + t2432 * t2709 + t2433 * t2703 + t2434 * t2697) * MDP(14) + MDP(15) + ((-t2374 + t2632) * MDP(12) * t2503 + ((-t2392 * t2512 - t2713) * MDP(11) - t2386 * t2512 * MDP(14)) * t2716) * t2442 + ((-t2373 + t2633) * MDP(12) * t2501 + ((-t2390 * t2509 - t2714) * MDP(11) - t2385 * t2509 * MDP(14)) * t2718) * t2440 + ((-t2372 + t2634) * MDP(12) * t2499 + ((-t2388 * t2506 - t2715) * MDP(11) - t2384 * t2506 * MDP(14)) * t2720) * t2438 + (t2484 * t2626 + t2486 * t2616 + t2488 * t2606) * t2761 + (t2492 * t2537 + t2494 * t2536 + t2496 * t2535) * t2760 + (t2483 * t2578 + t2485 * t2576 + t2487 * t2574) * t2759 + ((t2488 * t2692 + t2512 * t2722) * t2443 + (t2486 * t2693 + t2509 * t2723) * t2441 + (t2484 * t2694 + t2506 * t2724) * t2439) * t2758;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
