% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR12V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G1A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:16:55
% EndTime: 2020-08-06 19:17:20
% DurationCPUTime: 25.74s
% Computational Cost: add. (191400->773), mult. (262100->1392), div. (11064->12), fcn. (135963->18), ass. (0->555)
t3593 = xDP(2);
t3594 = xDP(1);
t3595 = pkin(5) - pkin(6);
t3527 = pkin(1) * t3593 + t3594 * t3595;
t3583 = sin(qJ(2,3));
t3921 = qJ(3,3) * t3593;
t3470 = t3527 * t3583 + t3921;
t3528 = pkin(1) * t3594 - t3593 * t3595;
t3920 = qJ(3,3) * t3594;
t3473 = t3528 * t3583 + t3920;
t3763 = t3583 * t3920;
t3479 = t3528 + 0.2e1 * t3763;
t3764 = t3583 * t3921;
t3485 = 0.2e1 * t3764 + t3527;
t3949 = pkin(1) * t3583;
t3542 = qJ(3,3) + t3949;
t3950 = legFrame(3,3);
t3555 = sin(t3950);
t3589 = cos(qJ(2,3));
t3573 = t3589 ^ 2;
t3580 = pkin(1) * qJ(3,3);
t3584 = sin(qJ(1,3));
t3592 = xDP(3);
t3596 = pkin(2) + pkin(3);
t3953 = cos(qJ(1,3));
t3507 = t3593 * t3584 + t3594 * t3953;
t3510 = -t3584 * t3594 + t3593 * t3953;
t3777 = cos(t3950);
t3643 = t3777 * t3507 + t3510 * t3555;
t3839 = (qJ(3,3) + t3596) * (-qJ(3,3) + t3596);
t3723 = t3573 * t3839;
t3824 = t3592 * t3596;
t3789 = -0.2e1 * t3824;
t3416 = t3643 * t3723 + (-t3592 * (-t3583 * t3839 + t3580) + ((t3479 * t3953 + t3485 * t3584) * t3777 + (-t3479 * t3584 + t3485 * t3953) * t3555) * t3596) * t3589 + t3542 * t3824 + (t3789 * t3573 + (t3470 * t3584 + t3473 * t3953) * t3777 + (t3470 * t3953 - t3473 * t3584) * t3555) * qJ(3,3);
t3923 = qJ(3,3) * t3583;
t3537 = pkin(1) + t3923;
t3830 = t3589 * t3596;
t3521 = t3537 + t3830;
t3512 = 0.1e1 / t3521;
t3598 = 0.1e1 / qJ(3,3);
t3861 = t3512 * t3598;
t3413 = t3416 * t3861;
t3480 = t3528 + t3763;
t3486 = t3764 + t3527;
t3437 = (-qJ(3,3) * t3592 + t3643 * t3596) * t3573 + ((t3480 * t3953 + t3486 * t3584) * t3777 + (-t3480 * t3584 + t3486 * t3953) * t3555 + t3583 * t3824) * t3589 + t3592 * t3542;
t3753 = t3437 * t3861;
t3431 = pkin(2) * t3753;
t3389 = t3431 - t3413;
t3380 = -pkin(3) * t3753 - t3389;
t3468 = -t3555 * t3507 + t3510 * t3777;
t3833 = t3583 * t3595;
t3734 = t3468 * t3833;
t3822 = t3596 * t3598;
t3429 = (-t3437 * t3822 + t3734) * t3512;
t3572 = t3589 * t3573;
t3597 = qJ(3,3) ^ 2;
t3871 = t3468 * t3512;
t3682 = t3839 * t3871;
t3765 = qJ(3,3) * t3871;
t3708 = t3573 * t3765;
t3893 = t3437 * t3598;
t3750 = t3583 * t3893;
t3513 = 0.1e1 / t3521 ^ 2;
t3599 = 0.1e1 / qJ(3,3) ^ 2;
t3859 = t3513 * t3599;
t3751 = t3437 * t3859;
t3796 = 0.2e1 * t3596;
t3608 = pkin(1) ^ 2;
t3798 = t3595 ^ 2 + t3608;
t3860 = t3513 * t3598;
t3979 = t3595 * t3596;
t3410 = t3595 * t3413;
t3455 = pkin(1) * t3765;
t3989 = -t3410 - 0.2e1 * t3455;
t3351 = -(-t3572 * t3682 + (-t3537 * t3468 * t3796 - t3437 * t3595) * t3512 * t3573 + (t3989 * t3583 + (-t3468 * (t3597 + t3798) + t3750 * t3979) * t3512) * t3589) * t3468 * t3860 - (-t3595 * t3708 + ((-pkin(3) * t3893 + t3734) * t3512 - t3389) * t3830 + t3380 * t3537) * t3751 - (-t3429 * t3589 + t3537 * t3753) * t3416 * t3859;
t3942 = pkin(2) * t3351;
t3899 = t3380 * t3596;
t3368 = -qJ(3,3) * t3437 * t3512 + t3899;
t3797 = pkin(5) ^ 2 + t3608;
t3532 = (-0.2e1 * pkin(5) + pkin(6)) * pkin(6) + t3797;
t3552 = 0.2e1 * t3573 - 0.1e1;
t3670 = 0.2e1 * t3979;
t3736 = t3596 * t3871;
t3863 = t3512 * t3583;
t3737 = t3468 * t3863;
t3868 = t3468 * t3598;
t3869 = t3468 * t3595;
t3960 = -0.3e1 * t3597;
t3967 = t3596 ^ 2;
t3975 = t3597 - t3967;
t3986 = 0.2e1 * pkin(1);
t3957 = -pkin(5) / 0.2e1;
t3993 = -0.2e1 * t3596 * (t3957 + pkin(6) / 0.2e1);
t3990 = ((((t3368 * t3596 + t3682 * t3833) * t3589 + pkin(1) * t3899 + (t3368 * t3583 + (-t3468 * t3552 * t3979 - pkin(1) * t3437) * t3512) * qJ(3,3)) * t3437 + (-t3429 * t3830 + ((pkin(1) * t3598 + t3583) * t3596 * t3437 + (t3573 - 0.1e1) * qJ(3,3) * t3869) * t3512) * t3416) * t3599 + (-(t3967 + t3960) * t3572 * t3736 + (-0.3e1 * (-t3597 / 0.3e1 + t3967) * t3923 + t3975 * t3986) * t3871 * t3573 + (((-t3410 - 0.4e1 * t3455) * t3596 - t3975 * t3595 * t3753) * t3583 + (t3960 - t3532) * t3736) * t3589 + ((-t3670 * t3753 + t3410) * t3573 + (-t3532 - t3597) * t3737 + t3753 * t3993 + t3989) * qJ(3,3)) * t3868) * t3513;
t3996 = t3990 + t3942;
t3585 = sin(qJ(2,2));
t3925 = qJ(3,2) * t3593;
t3471 = t3527 * t3585 + t3925;
t3924 = qJ(3,2) * t3594;
t3474 = t3528 * t3585 + t3924;
t3766 = t3585 * t3924;
t3481 = t3528 + 0.2e1 * t3766;
t3767 = t3585 * t3925;
t3487 = 0.2e1 * t3767 + t3527;
t3948 = pkin(1) * t3585;
t3543 = qJ(3,2) + t3948;
t3951 = legFrame(2,3);
t3556 = sin(t3951);
t3590 = cos(qJ(2,2));
t3575 = t3590 ^ 2;
t3581 = pkin(1) * qJ(3,2);
t3586 = sin(qJ(1,2));
t3954 = cos(qJ(1,2));
t3506 = -t3586 * t3594 + t3954 * t3593;
t3508 = t3593 * t3586 + t3594 * t3954;
t3778 = cos(t3951);
t3644 = t3506 * t3556 + t3778 * t3508;
t3838 = (qJ(3,2) + t3596) * (-qJ(3,2) + t3596);
t3722 = t3575 * t3838;
t3417 = t3644 * t3722 + (-t3592 * (-t3585 * t3838 + t3581) + ((t3481 * t3954 + t3487 * t3586) * t3778 + (-t3481 * t3586 + t3487 * t3954) * t3556) * t3596) * t3590 + t3543 * t3824 + (t3789 * t3575 + (t3471 * t3586 + t3474 * t3954) * t3778 + (t3471 * t3954 - t3474 * t3586) * t3556) * qJ(3,2);
t3927 = qJ(3,2) * t3585;
t3539 = pkin(1) + t3927;
t3828 = t3590 * t3596;
t3522 = t3539 + t3828;
t3515 = 0.1e1 / t3522;
t3601 = 0.1e1 / qJ(3,2);
t3856 = t3515 * t3601;
t3414 = t3417 * t3856;
t3482 = t3528 + t3766;
t3488 = t3767 + t3527;
t3438 = (-qJ(3,2) * t3592 + t3644 * t3596) * t3575 + ((t3482 * t3954 + t3488 * t3586) * t3778 + (-t3482 * t3586 + t3488 * t3954) * t3556 + t3585 * t3824) * t3590 + t3592 * t3543;
t3749 = t3438 * t3856;
t3432 = pkin(2) * t3749;
t3391 = t3432 - t3414;
t3381 = -pkin(3) * t3749 - t3391;
t3467 = t3506 * t3778 - t3556 * t3508;
t3832 = t3585 * t3595;
t3738 = t3467 * t3832;
t3821 = t3596 * t3601;
t3428 = (-t3438 * t3821 + t3738) * t3515;
t3574 = t3590 * t3575;
t3600 = qJ(3,2) ^ 2;
t3875 = t3467 * t3515;
t3683 = t3838 * t3875;
t3768 = qJ(3,2) * t3875;
t3709 = t3575 * t3768;
t3892 = t3438 * t3601;
t3746 = t3585 * t3892;
t3516 = 0.1e1 / t3522 ^ 2;
t3602 = 0.1e1 / qJ(3,2) ^ 2;
t3854 = t3516 * t3602;
t3747 = t3438 * t3854;
t3855 = t3516 * t3601;
t3411 = t3595 * t3414;
t3456 = pkin(1) * t3768;
t3988 = -t3411 - 0.2e1 * t3456;
t3350 = -(-t3574 * t3683 + (-t3539 * t3467 * t3796 - t3438 * t3595) * t3515 * t3575 + (t3988 * t3585 + (-t3467 * (t3600 + t3798) + t3746 * t3979) * t3515) * t3590) * t3467 * t3855 - (-t3595 * t3709 + ((-pkin(3) * t3892 + t3738) * t3515 - t3391) * t3828 + t3381 * t3539) * t3747 - (-t3428 * t3590 + t3539 * t3749) * t3417 * t3854;
t3943 = pkin(2) * t3350;
t3898 = t3381 * t3596;
t3369 = -qJ(3,2) * t3438 * t3515 + t3898;
t3553 = 0.2e1 * t3575 - 0.1e1;
t3740 = t3596 * t3875;
t3858 = t3515 * t3585;
t3741 = t3467 * t3858;
t3872 = t3467 * t3601;
t3873 = t3467 * t3595;
t3959 = -0.3e1 * t3600;
t3974 = t3600 - t3967;
t3991 = ((((t3369 * t3596 + t3683 * t3832) * t3590 + pkin(1) * t3898 + (t3369 * t3585 + (-t3467 * t3553 * t3979 - pkin(1) * t3438) * t3515) * qJ(3,2)) * t3438 + (-t3428 * t3828 + ((pkin(1) * t3601 + t3585) * t3596 * t3438 + (t3575 - 0.1e1) * qJ(3,2) * t3873) * t3515) * t3417) * t3602 + (-(t3967 + t3959) * t3574 * t3740 + (-0.3e1 * (-t3600 / 0.3e1 + t3967) * t3927 + t3974 * t3986) * t3875 * t3575 + (((-t3411 - 0.4e1 * t3456) * t3596 - t3974 * t3595 * t3749) * t3585 + (t3959 - t3532) * t3740) * t3590 + ((-t3670 * t3749 + t3411) * t3575 + (-t3532 - t3600) * t3741 + t3749 * t3993 + t3988) * qJ(3,2)) * t3872) * t3516;
t3995 = t3991 + t3943;
t3587 = sin(qJ(2,1));
t3929 = qJ(3,1) * t3593;
t3472 = t3527 * t3587 + t3929;
t3928 = qJ(3,1) * t3594;
t3475 = t3528 * t3587 + t3928;
t3769 = t3587 * t3928;
t3483 = t3528 + 0.2e1 * t3769;
t3770 = t3587 * t3929;
t3489 = 0.2e1 * t3770 + t3527;
t3947 = pkin(1) * t3587;
t3544 = qJ(3,1) + t3947;
t3952 = legFrame(1,3);
t3557 = sin(t3952);
t3591 = cos(qJ(2,1));
t3577 = t3591 ^ 2;
t3582 = pkin(1) * qJ(3,1);
t3588 = sin(qJ(1,1));
t3955 = cos(qJ(1,1));
t3509 = t3593 * t3588 + t3955 * t3594;
t3511 = -t3588 * t3594 + t3593 * t3955;
t3779 = cos(t3952);
t3645 = t3779 * t3509 + t3511 * t3557;
t3837 = (qJ(3,1) + t3596) * (-qJ(3,1) + t3596);
t3721 = t3577 * t3837;
t3418 = t3645 * t3721 + (-t3592 * (-t3587 * t3837 + t3582) + ((t3483 * t3955 + t3489 * t3588) * t3779 + (-t3483 * t3588 + t3489 * t3955) * t3557) * t3596) * t3591 + t3544 * t3824 + (t3789 * t3577 + (t3472 * t3588 + t3475 * t3955) * t3779 + (t3472 * t3955 - t3475 * t3588) * t3557) * qJ(3,1);
t3931 = qJ(3,1) * t3587;
t3541 = pkin(1) + t3931;
t3826 = t3591 * t3596;
t3523 = t3541 + t3826;
t3518 = 0.1e1 / t3523;
t3604 = 0.1e1 / qJ(3,1);
t3851 = t3518 * t3604;
t3415 = t3418 * t3851;
t3484 = t3528 + t3769;
t3490 = t3770 + t3527;
t3439 = (-qJ(3,1) * t3592 + t3645 * t3596) * t3577 + ((t3484 * t3955 + t3490 * t3588) * t3779 + (-t3484 * t3588 + t3490 * t3955) * t3557 + t3587 * t3824) * t3591 + t3592 * t3544;
t3745 = t3439 * t3851;
t3433 = pkin(2) * t3745;
t3393 = t3433 - t3415;
t3382 = -pkin(3) * t3745 - t3393;
t3469 = -t3557 * t3509 + t3511 * t3779;
t3831 = t3587 * t3595;
t3730 = t3469 * t3831;
t3820 = t3596 * t3604;
t3430 = (-t3439 * t3820 + t3730) * t3518;
t3576 = t3591 * t3577;
t3603 = qJ(3,1) ^ 2;
t3867 = t3469 * t3518;
t3681 = t3837 * t3867;
t3771 = qJ(3,1) * t3867;
t3710 = t3577 * t3771;
t3891 = t3439 * t3604;
t3742 = t3587 * t3891;
t3519 = 0.1e1 / t3523 ^ 2;
t3605 = 0.1e1 / qJ(3,1) ^ 2;
t3849 = t3519 * t3605;
t3743 = t3439 * t3849;
t3850 = t3519 * t3604;
t3412 = t3595 * t3415;
t3457 = pkin(1) * t3771;
t3987 = -t3412 - 0.2e1 * t3457;
t3352 = -(-t3576 * t3681 + (-t3541 * t3469 * t3796 - t3439 * t3595) * t3518 * t3577 + (t3987 * t3587 + (-t3469 * (t3603 + t3798) + t3742 * t3979) * t3518) * t3591) * t3469 * t3850 - (-t3595 * t3710 + ((-pkin(3) * t3891 + t3730) * t3518 - t3393) * t3826 + t3382 * t3541) * t3743 - (-t3430 * t3591 + t3541 * t3745) * t3418 * t3849;
t3941 = pkin(2) * t3352;
t3897 = t3382 * t3596;
t3370 = -qJ(3,1) * t3439 * t3518 + t3897;
t3554 = 0.2e1 * t3577 - 0.1e1;
t3732 = t3596 * t3867;
t3853 = t3518 * t3587;
t3733 = t3469 * t3853;
t3864 = t3469 * t3604;
t3865 = t3469 * t3595;
t3958 = -0.3e1 * t3603;
t3973 = t3603 - t3967;
t3992 = ((((t3370 * t3596 + t3681 * t3831) * t3591 + pkin(1) * t3897 + (t3370 * t3587 + (-t3469 * t3554 * t3979 - pkin(1) * t3439) * t3518) * qJ(3,1)) * t3439 + (-t3430 * t3826 + ((pkin(1) * t3604 + t3587) * t3596 * t3439 + (t3577 - 0.1e1) * qJ(3,1) * t3865) * t3518) * t3418) * t3605 + (-(t3967 + t3958) * t3576 * t3732 + (-0.3e1 * (-t3603 / 0.3e1 + t3967) * t3931 + t3973 * t3986) * t3867 * t3577 + (((-t3412 - 0.4e1 * t3457) * t3596 - t3973 * t3595 * t3745) * t3587 + (t3958 - t3532) * t3732) * t3591 + ((-t3670 * t3745 + t3412) * t3577 + (-t3532 - t3603) * t3733 + t3745 * t3993 + t3987) * qJ(3,1)) * t3864) * t3519;
t3994 = t3992 + t3941;
t3386 = t3431 - t3413 / 0.2e1;
t3985 = -0.4e1 * t3386;
t3387 = t3432 - t3414 / 0.2e1;
t3984 = -0.4e1 * t3387;
t3388 = t3433 - t3415 / 0.2e1;
t3983 = -0.4e1 * t3388;
t3752 = t3437 * t3860;
t3716 = 0.2e1 * t3752;
t3982 = t3512 * t3716;
t3748 = t3438 * t3855;
t3715 = 0.2e1 * t3748;
t3981 = t3515 * t3715;
t3744 = t3439 * t3850;
t3714 = 0.2e1 * t3744;
t3980 = t3518 * t3714;
t3935 = pkin(2) * t3591;
t3978 = (pkin(1) + t3935) * t3587;
t3936 = pkin(2) * t3590;
t3977 = (pkin(1) + t3936) * t3585;
t3937 = pkin(2) * t3589;
t3976 = (pkin(1) + t3937) * t3583;
t3969 = -0.2e1 * pkin(1);
t3966 = -0.2e1 * t3389;
t3965 = -0.2e1 * t3391;
t3964 = -0.2e1 * t3393;
t3963 = 0.4e1 * t3573;
t3962 = 0.4e1 * t3575;
t3961 = 0.4e1 * t3577;
t3956 = pkin(5) / 0.2e1;
t3946 = pkin(1) * t3589;
t3945 = pkin(1) * t3590;
t3944 = pkin(1) * t3591;
t3940 = pkin(2) * t3573;
t3939 = pkin(2) * t3575;
t3938 = pkin(2) * t3577;
t3922 = qJ(3,3) * t3589;
t3524 = t3583 * t3596 - t3922;
t3514 = t3512 * t3513;
t3735 = t3514 * t3868;
t3698 = t3437 * t3735;
t3870 = t3468 * t3513;
t3362 = -(t3413 * t3583 + (t3869 + (-t3583 * t3822 + t3589) * t3437) * t3512) * t3870 + t3524 * t3698 - t3583 * t3416 * t3735;
t3934 = pkin(5) * t3362;
t3926 = qJ(3,2) * t3590;
t3525 = t3585 * t3596 - t3926;
t3517 = t3515 * t3516;
t3739 = t3517 * t3872;
t3697 = t3438 * t3739;
t3874 = t3467 * t3516;
t3363 = -(t3414 * t3585 + (t3873 + (-t3585 * t3821 + t3590) * t3438) * t3515) * t3874 + t3525 * t3697 - t3585 * t3417 * t3739;
t3933 = pkin(5) * t3363;
t3930 = qJ(3,1) * t3591;
t3526 = t3587 * t3596 - t3930;
t3520 = t3518 * t3519;
t3731 = t3520 * t3864;
t3696 = t3439 * t3731;
t3866 = t3469 * t3519;
t3364 = -(t3415 * t3587 + (t3865 + (-t3587 * t3820 + t3591) * t3439) * t3518) * t3866 + t3526 * t3696 - t3587 * t3418 * t3731;
t3932 = pkin(5) * t3364;
t3919 = t3573 * qJ(3,3);
t3918 = t3575 * qJ(3,2);
t3917 = t3577 * qJ(3,1);
t3915 = 0.2e1 * pkin(2);
t3914 = t3350 * t3590;
t3913 = t3351 * t3589;
t3912 = t3352 * t3591;
t3911 = t3362 * t3512;
t3910 = t3362 * t3583;
t3909 = t3362 * t3589;
t3908 = t3362 * t3598;
t3907 = t3363 * t3515;
t3906 = t3363 * t3585;
t3905 = t3363 * t3590;
t3904 = t3363 * t3601;
t3903 = t3364 * t3518;
t3902 = t3364 * t3587;
t3901 = t3364 * t3591;
t3900 = t3364 * t3604;
t3434 = t3437 ^ 2;
t3896 = t3434 * t3599;
t3435 = t3438 ^ 2;
t3895 = t3435 * t3602;
t3436 = t3439 ^ 2;
t3894 = t3436 * t3605;
t3548 = t3595 * t3953;
t3476 = t3584 * t3542 - t3583 * t3548;
t3491 = t3555 * t3584 - t3777 * t3953;
t3793 = 0.2e1 * t3923;
t3536 = pkin(1) + t3793;
t3497 = t3536 * t3584 - t3548;
t3545 = t3584 * t3595;
t3654 = t3542 * t3953 + t3583 * t3545;
t3677 = t3536 * t3953 + t3545;
t3440 = -t3491 * t3723 - (t3555 * t3497 - t3677 * t3777) * t3830 - (t3555 * t3476 - t3654 * t3777) * qJ(3,3);
t3890 = t3440 * t3583;
t3492 = t3555 * t3953 + t3777 * t3584;
t3441 = t3492 * t3723 + (t3497 * t3777 + t3677 * t3555) * t3830 + (t3476 * t3777 + t3654 * t3555) * qJ(3,3);
t3889 = t3441 * t3583;
t3549 = t3595 * t3954;
t3477 = t3586 * t3543 - t3585 * t3549;
t3493 = t3556 * t3586 - t3778 * t3954;
t3794 = 0.2e1 * t3927;
t3538 = pkin(1) + t3794;
t3499 = t3538 * t3586 - t3549;
t3546 = t3586 * t3595;
t3653 = t3543 * t3954 + t3585 * t3546;
t3675 = t3538 * t3954 + t3546;
t3442 = -t3493 * t3722 - (t3556 * t3499 - t3675 * t3778) * t3828 - (t3556 * t3477 - t3653 * t3778) * qJ(3,2);
t3888 = t3442 * t3585;
t3494 = t3556 * t3954 + t3778 * t3586;
t3443 = t3494 * t3722 + (t3499 * t3778 + t3675 * t3556) * t3828 + (t3477 * t3778 + t3653 * t3556) * qJ(3,2);
t3887 = t3443 * t3585;
t3550 = t3595 * t3955;
t3478 = t3588 * t3544 - t3587 * t3550;
t3495 = t3557 * t3588 - t3779 * t3955;
t3795 = 0.2e1 * t3931;
t3540 = pkin(1) + t3795;
t3501 = t3540 * t3588 - t3550;
t3547 = t3588 * t3595;
t3652 = t3544 * t3955 + t3587 * t3547;
t3673 = t3540 * t3955 + t3547;
t3444 = -t3495 * t3721 - (t3557 * t3501 - t3673 * t3779) * t3826 - (t3557 * t3478 - t3652 * t3779) * qJ(3,1);
t3886 = t3444 * t3587;
t3496 = t3557 * t3955 + t3779 * t3588;
t3445 = t3496 * t3721 + (t3501 * t3779 + t3673 * t3557) * t3826 + (t3478 * t3779 + t3652 * t3557) * qJ(3,1);
t3885 = t3445 * t3587;
t3498 = t3537 * t3584 - t3548;
t3676 = t3537 * t3953 + t3545;
t3449 = t3491 * t3830 + t3498 * t3555 - t3676 * t3777;
t3884 = t3449 * t3589;
t3450 = t3492 * t3830 + t3498 * t3777 + t3555 * t3676;
t3883 = t3450 * t3589;
t3500 = t3539 * t3586 - t3549;
t3674 = t3539 * t3954 + t3546;
t3451 = t3493 * t3828 + t3500 * t3556 - t3674 * t3778;
t3882 = t3451 * t3590;
t3452 = t3494 * t3828 + t3500 * t3778 + t3556 * t3674;
t3881 = t3452 * t3590;
t3502 = t3541 * t3588 - t3550;
t3672 = t3541 * t3955 + t3547;
t3453 = t3495 * t3826 + t3502 * t3557 - t3672 * t3779;
t3880 = t3453 * t3591;
t3454 = t3496 * t3826 + t3502 * t3779 + t3557 * t3672;
t3879 = t3454 * t3591;
t3464 = t3467 ^ 2;
t3461 = t3464 * t3516;
t3878 = t3464 * t3575;
t3465 = t3468 ^ 2;
t3462 = t3465 * t3513;
t3877 = t3465 * t3573;
t3466 = t3469 ^ 2;
t3463 = t3466 * t3519;
t3876 = t3466 * t3577;
t3862 = t3512 * t3589;
t3857 = t3515 * t3590;
t3852 = t3518 * t3591;
t3529 = -pkin(2) * t3583 + t3922;
t3848 = t3529 * t3589;
t3530 = -pkin(2) * t3585 + t3926;
t3847 = t3530 * t3590;
t3531 = -pkin(2) * t3587 + t3930;
t3846 = t3531 * t3591;
t3845 = t3536 * t3589;
t3844 = t3537 * t3589;
t3843 = t3538 * t3590;
t3842 = t3539 * t3590;
t3841 = t3540 * t3591;
t3840 = t3541 * t3591;
t3836 = t3573 * t3598;
t3835 = t3575 * t3601;
t3834 = t3577 * t3604;
t3829 = t3589 * t3598;
t3827 = t3590 * t3601;
t3825 = t3591 * t3604;
t3390 = t3431 - 0.2e1 * t3413;
t3607 = pkin(2) ^ 2;
t3558 = -t3597 + t3607;
t3655 = qJ(3,3) * t3913 - t3996 * t3583;
t3719 = t3871 * t3966;
t3729 = t3512 * t3829;
t3819 = -t3655 * pkin(5) - (pkin(1) * t3793 + t3558 * t3573 + t3844 * t3915 + t3597 + t3797) * t3362 + t3708 * t3985 - 0.2e1 * ((t3390 * t3957 + t3455) * t3437 - (-pkin(2) * t3416 + t3437 * t3558) * t3737) * t3729 - (-pkin(5) * t3434 * t3860 + pkin(1) * t3719) * t3583 - qJ(3,3) * t3719;
t3392 = t3432 - 0.2e1 * t3414;
t3559 = -t3600 + t3607;
t3656 = qJ(3,2) * t3914 - t3995 * t3585;
t3718 = t3875 * t3965;
t3727 = t3515 * t3827;
t3818 = -t3656 * pkin(5) - (pkin(1) * t3794 + t3559 * t3575 + t3842 * t3915 + t3600 + t3797) * t3363 + t3709 * t3984 - 0.2e1 * ((t3392 * t3957 + t3456) * t3438 - (-pkin(2) * t3417 + t3438 * t3559) * t3741) * t3727 - (-pkin(5) * t3435 * t3855 + pkin(1) * t3718) * t3585 - qJ(3,2) * t3718;
t3394 = t3433 - 0.2e1 * t3415;
t3560 = -t3603 + t3607;
t3657 = qJ(3,1) * t3912 - t3994 * t3587;
t3717 = t3867 * t3964;
t3725 = t3518 * t3825;
t3817 = -t3657 * pkin(5) - (pkin(1) * t3795 + t3560 * t3577 + t3840 * t3915 + t3603 + t3797) * t3364 + t3710 * t3983 - 0.2e1 * (t3439 * (t3394 * t3957 + t3457) - (-pkin(2) * t3418 + t3439 * t3560) * t3733) * t3725 - (-pkin(5) * t3436 * t3850 + pkin(1) * t3717) * t3587 - qJ(3,1) * t3717;
t3792 = -0.2e1 * t3919;
t3800 = pkin(2) * t3462 + 0.2e1 * t3416 * t3751;
t3816 = (t3607 + t3597) * t3351 + t3529 * t3934 + pkin(2) * t3990 + t3800 * qJ(3,3) + (-(-t3558 * t3583 + t3580) * t3589 + (t3792 + t3949) * pkin(2)) * t3462;
t3791 = -0.2e1 * t3918;
t3801 = pkin(2) * t3461 + 0.2e1 * t3417 * t3747;
t3815 = (t3607 + t3600) * t3350 + t3530 * t3933 + pkin(2) * t3991 + t3801 * qJ(3,2) + (-(-t3559 * t3585 + t3581) * t3590 + (t3791 + t3948) * pkin(2)) * t3461;
t3790 = -0.2e1 * t3917;
t3799 = pkin(2) * t3463 + 0.2e1 * t3418 * t3743;
t3814 = (t3607 + t3603) * t3352 + t3531 * t3932 + pkin(2) * t3992 + t3799 * qJ(3,1) + (-(-t3560 * t3587 + t3582) * t3591 + (t3790 + t3947) * pkin(2)) * t3463;
t3759 = t3434 * t3859;
t3782 = pkin(5) * t3910;
t3813 = t3782 - qJ(3,3) * (t3462 + t3759) + (t3919 - t3976) * t3462 - t3996;
t3757 = t3435 * t3854;
t3781 = pkin(5) * t3906;
t3812 = t3781 - qJ(3,2) * (t3461 + t3757) + (t3918 - t3977) * t3461 - t3995;
t3755 = t3436 * t3849;
t3780 = pkin(5) * t3902;
t3811 = t3780 - qJ(3,1) * (t3463 + t3755) + (t3917 - t3978) * t3463 - t3994;
t3713 = pkin(5) * t3759;
t3785 = pkin(5) * t3913;
t3810 = -t3785 - (0.2e1 * t3976 + (-0.2e1 * t3573 + 0.2e1) * qJ(3,3)) * t3362 + t3583 * t3713 - (t3716 * t3845 + (t3386 * t3963 + t3966) * t3512) * t3468;
t3712 = pkin(5) * t3757;
t3787 = pkin(5) * t3914;
t3809 = -t3787 - (0.2e1 * t3977 + (-0.2e1 * t3575 + 0.2e1) * qJ(3,2)) * t3363 + t3585 * t3712 - (t3715 * t3843 + (t3387 * t3962 + t3965) * t3515) * t3467;
t3711 = pkin(5) * t3755;
t3783 = pkin(5) * t3912;
t3808 = -t3783 - (0.2e1 * t3978 + (-0.2e1 * t3577 + 0.2e1) * qJ(3,1)) * t3364 + t3587 * t3711 - (t3714 * t3841 + (t3388 * t3961 + t3964) * t3518) * t3469;
t3786 = pkin(5) * t3351 * t3583;
t3807 = t3786 - 0.2e1 * (t3844 + t3940) * t3362 - (t3737 * t3985 - t3713) * t3589 - (-0.2e1 * t3542 * t3598 + t3963) * t3437 * t3870;
t3788 = pkin(5) * t3350 * t3585;
t3806 = t3788 - 0.2e1 * (t3842 + t3939) * t3363 - (t3741 * t3984 - t3712) * t3590 - (-0.2e1 * t3543 * t3601 + t3962) * t3438 * t3874;
t3784 = pkin(5) * t3352 * t3587;
t3805 = t3784 - 0.2e1 * (t3840 + t3938) * t3364 - (t3733 * t3983 - t3711) * t3591 - (-0.2e1 * t3544 * t3604 + t3961) * t3439 * t3866;
t3804 = pkin(5) * t3905 + 0.2e1 * qJ(3,2) * t3350 + (-t3843 - 0.2e1 * t3939) * t3461 + t3801;
t3803 = pkin(5) * t3909 + 0.2e1 * qJ(3,3) * t3351 + (-t3845 - 0.2e1 * t3940) * t3462 + t3800;
t3802 = pkin(5) * t3901 + 0.2e1 * qJ(3,1) * t3352 + (-t3841 - 0.2e1 * t3938) * t3463 + t3799;
t3758 = t3514 * t3896;
t3756 = t3517 * t3895;
t3754 = t3520 * t3894;
t3728 = t3514 * t3829;
t3726 = t3517 * t3827;
t3724 = t3520 * t3825;
t3720 = -MDP(10) * pkin(5) + MDP(7);
t3707 = t3836 * t3911;
t3706 = t3862 * t3910;
t3705 = t3835 * t3907;
t3704 = t3857 * t3906;
t3703 = t3834 * t3903;
t3702 = t3852 * t3902;
t3701 = (t3390 * t3589 + t3437 * t3863) * t3752;
t3700 = (t3392 * t3590 + t3438 * t3858) * t3748;
t3699 = (t3394 * t3591 + t3439 * t3853) * t3744;
t3695 = t3449 * t3729;
t3694 = t3450 * t3729;
t3693 = t3451 * t3727;
t3692 = t3452 * t3727;
t3691 = t3453 * t3725;
t3690 = t3454 * t3725;
t3689 = t3464 * t3517 * t3835;
t3688 = t3464 * t3726;
t3687 = t3465 * t3514 * t3836;
t3686 = t3465 * t3728;
t3685 = t3466 * t3520 * t3834;
t3684 = t3466 * t3724;
t3680 = t3583 * t3728;
t3679 = t3585 * t3726;
t3678 = t3587 * t3724;
t3669 = t3598 * t3706;
t3668 = t3601 * t3704;
t3667 = t3604 * t3702;
t3666 = t3585 * t3689;
t3665 = t3464 * t3679;
t3664 = t3583 * t3687;
t3663 = t3465 * t3680;
t3662 = t3587 * t3685;
t3661 = t3466 * t3678;
t3651 = -(t3909 * t3986 - t3786) * t3512 + (t3437 * t3829 * t3956 + t3468 * t3949) * t3982;
t3650 = -(t3905 * t3986 - t3788) * t3515 + (t3438 * t3827 * t3956 + t3467 * t3948) * t3981;
t3649 = -(t3901 * t3986 - t3784) * t3518 + (t3439 * t3825 * t3956 + t3469 * t3947) * t3980;
t3648 = -(t3910 * t3969 - t3785) * t3512 + (t3468 * t3946 + t3750 * t3957) * t3982;
t3647 = -(t3906 * t3969 - t3787) * t3515 + (t3467 * t3945 + t3746 * t3957) * t3981;
t3646 = -(t3902 * t3969 - t3783) * t3518 + (t3469 * t3944 + t3742 * t3957) * t3980;
t3642 = -t3350 * t3858 - t3590 * t3756;
t3641 = -t3350 * t3857 + t3585 * t3756;
t3640 = -t3351 * t3863 - t3589 * t3758;
t3639 = -t3351 * t3862 + t3583 * t3758;
t3638 = -t3352 * t3853 - t3591 * t3754;
t3637 = -t3352 * t3852 + t3587 * t3754;
t3569 = t3583 ^ 2;
t3636 = -0.2e1 * t3437 * t3468 * t3680 - t3569 * t3911;
t3570 = t3585 ^ 2;
t3635 = -0.2e1 * t3438 * t3467 * t3679 - t3570 * t3907;
t3571 = t3587 ^ 2;
t3634 = -0.2e1 * t3439 * t3469 * t3678 - t3571 * t3903;
t3633 = -0.2e1 * t3552 * t3698 - 0.2e1 * t3706;
t3632 = -0.2e1 * t3553 * t3697 - 0.2e1 * t3704;
t3631 = -0.2e1 * t3554 * t3696 - 0.2e1 * t3702;
t3624 = t3449 * t3707 + t3451 * t3705 + t3453 * t3703;
t3623 = t3450 * t3707 + t3452 * t3705 + t3454 * t3703;
t3622 = t3449 * t3669 + t3451 * t3668 + t3453 * t3667;
t3621 = t3450 * t3669 + t3452 * t3668 + t3454 * t3667;
t3505 = (pkin(1) + 0.2e1 * t3935) * t3587 + t3790 + qJ(3,1);
t3504 = (pkin(1) + 0.2e1 * t3936) * t3585 + t3791 + qJ(3,2);
t3503 = (pkin(1) + 0.2e1 * t3937) * t3583 + t3792 + qJ(3,3);
t3448 = -0.2e1 * t3519 * t3876 + t3463;
t3447 = -0.2e1 * t3516 * t3878 + t3461;
t3446 = -0.2e1 * t3513 * t3877 + t3462;
t3421 = -t3463 + (t3876 - t3894) * t3519;
t3420 = -t3461 + (t3878 - t3895) * t3516;
t3419 = -t3462 + (t3877 - t3896) * t3513;
t3328 = t3992 - t3780 + 0.2e1 * t3941;
t3327 = t3990 - t3782 + 0.2e1 * t3942;
t3326 = t3991 - t3781 + 0.2e1 * t3943;
t3322 = t3657 + 0.2e1 * t3932;
t3321 = t3655 + 0.2e1 * t3934;
t3320 = t3656 + 0.2e1 * t3933;
t1 = [(-t3492 * t3911 - t3494 * t3907 - t3496 * t3903) * MDP(1) + (t3449 * t3664 + t3451 * t3666 + t3453 * t3662 + t3636 * t3492 + t3635 * t3494 + t3634 * t3496) * MDP(4) + (-t3446 * t3695 - t3447 * t3693 - t3448 * t3691 + t3492 * t3633 + t3494 * t3632 + t3496 * t3631) * MDP(5) + (t3640 * t3492 + t3642 * t3494 + t3638 * t3496 - t3622) * MDP(6) + (t3639 * t3492 + t3641 * t3494 + t3637 * t3496 - t3624) * MDP(7) + (-t3350 * t3693 - t3351 * t3695 - t3352 * t3691) * MDP(8) + (t3649 * t3496 + t3650 * t3494 + t3651 * t3492 + t3622 * pkin(5) + (-t3449 * t3663 - t3451 * t3665 - t3453 * t3661) * pkin(1)) * MDP(9) + (t3646 * t3496 + t3647 * t3494 + t3648 * t3492 + t3624 * pkin(5) + (-t3449 * t3687 - t3451 * t3689 - t3453 * t3685) * pkin(1)) * MDP(10) + ((-t3453 * t3505 - t3886) * t3684 + (-t3449 * t3503 - t3890) * t3686 + (-t3451 * t3504 - t3888) * t3688 + ((-t3328 * t3880 - t3352 * t3444) * t3604 + t3805 * t3496) * t3518 + ((-t3326 * t3882 - t3350 * t3442) * t3601 + t3806 * t3494) * t3515 + ((-t3327 * t3884 - t3351 * t3440) * t3598 + t3807 * t3492) * t3512) * MDP(11) + (t3492 * t3701 + t3494 * t3700 + t3496 * t3699 + (-t3496 * t3322 + (-t3453 * t3846 + t3886) * t3900) * t3518 + (-t3494 * t3320 + (-t3451 * t3847 + t3888) * t3904) * t3515 + (-t3492 * t3321 + (-t3449 * t3848 + t3890) * t3908) * t3512) * MDP(12) + ((t3808 * t3496 + (t3421 * t3444 - t3802 * t3880) * t3604) * t3518 + (t3809 * t3494 + (t3420 * t3442 - t3804 * t3882) * t3601) * t3515 + (t3810 * t3492 + (t3419 * t3440 - t3803 * t3884) * t3598) * t3512) * MDP(13) + ((t3817 * t3496 + (t3811 * t3444 - t3814 * t3880) * t3604) * t3518 + (t3818 * t3494 + (t3812 * t3442 - t3815 * t3882) * t3601) * t3515 + (t3819 * t3492 + (t3813 * t3440 - t3816 * t3884) * t3598) * t3512) * MDP(14); (-t3491 * t3911 - t3493 * t3907 - t3495 * t3903) * MDP(1) + (-t3450 * t3664 - t3452 * t3666 - t3454 * t3662 + t3636 * t3491 + t3635 * t3493 + t3634 * t3495) * MDP(4) + (t3446 * t3694 + t3447 * t3692 + t3448 * t3690 + t3491 * t3633 + t3493 * t3632 + t3495 * t3631) * MDP(5) + (t3640 * t3491 + t3642 * t3493 + t3638 * t3495 + t3621) * MDP(6) + (t3639 * t3491 + t3641 * t3493 + t3637 * t3495 + t3623) * MDP(7) + (t3350 * t3692 + t3351 * t3694 + t3352 * t3690) * MDP(8) + (t3649 * t3495 + t3650 * t3493 + t3651 * t3491 - t3621 * pkin(5) + (t3450 * t3663 + t3452 * t3665 + t3454 * t3661) * pkin(1)) * MDP(9) + (t3646 * t3495 + t3647 * t3493 + t3648 * t3491 - t3623 * pkin(5) + (t3450 * t3687 + t3452 * t3689 + t3454 * t3685) * pkin(1)) * MDP(10) + ((t3454 * t3505 - t3885) * t3684 + (t3450 * t3503 - t3889) * t3686 + (t3452 * t3504 - t3887) * t3688 + ((t3328 * t3879 - t3352 * t3445) * t3604 + t3805 * t3495) * t3518 + ((t3326 * t3881 - t3350 * t3443) * t3601 + t3806 * t3493) * t3515 + ((t3327 * t3883 - t3351 * t3441) * t3598 + t3807 * t3491) * t3512) * MDP(11) + (t3491 * t3701 + t3493 * t3700 + t3495 * t3699 + (-t3322 * t3495 + (t3454 * t3846 + t3885) * t3900) * t3518 + (-t3320 * t3493 + (t3452 * t3847 + t3887) * t3904) * t3515 + (-t3321 * t3491 + (t3450 * t3848 + t3889) * t3908) * t3512) * MDP(12) + ((t3808 * t3495 + (t3421 * t3445 + t3802 * t3879) * t3604) * t3518 + (t3809 * t3493 + (t3420 * t3443 + t3804 * t3881) * t3601) * t3515 + (t3810 * t3491 + (t3419 * t3441 + t3803 * t3883) * t3598) * t3512) * MDP(13) + ((t3817 * t3495 + (t3811 * t3445 + t3814 * t3879) * t3604) * t3518 + (t3818 * t3493 + (t3812 * t3443 + t3815 * t3881) * t3601) * t3515 + (t3819 * t3491 + (t3813 * t3441 + t3816 * t3883) * t3598) * t3512) * MDP(14); ((-t3591 * MDP(4) * t3463 + t3364 * MDP(6) + (pkin(1) * t3463 - t3932) * MDP(9)) * t3571 + (-t3352 * MDP(11) + t3421 * MDP(13) + t3811 * MDP(14)) * t3526 + (t3448 * MDP(5) + t3352 * MDP(8) + t3328 * MDP(11) + t3802 * MDP(13) + t3814 * MDP(14) + (MDP(10) * t3944 + (-t3526 * t3591 + t3505) * MDP(11)) * t3463 + ((t3526 + t3531) * MDP(12) + t3720 * t3591) * t3364) * t3587) * t3604 + ((-t3590 * MDP(4) * t3461 + t3363 * MDP(6) + (pkin(1) * t3461 - t3933) * MDP(9)) * t3570 + (-t3350 * MDP(11) + t3420 * MDP(13) + t3812 * MDP(14)) * t3525 + (t3447 * MDP(5) + t3350 * MDP(8) + t3326 * MDP(11) + t3804 * MDP(13) + t3815 * MDP(14) + (MDP(10) * t3945 + (-t3525 * t3590 + t3504) * MDP(11)) * t3461 + ((t3525 + t3530) * MDP(12) + t3720 * t3590) * t3363) * t3585) * t3601 + ((-t3589 * MDP(4) * t3462 + t3362 * MDP(6) + (pkin(1) * t3462 - t3934) * MDP(9)) * t3569 + (-t3351 * MDP(11) + t3419 * MDP(13) + t3813 * MDP(14)) * t3524 + (t3446 * MDP(5) + t3351 * MDP(8) + t3327 * MDP(11) + t3803 * MDP(13) + t3816 * MDP(14) + (MDP(10) * t3946 + (-t3524 * t3589 + t3503) * MDP(11)) * t3462 + ((t3524 + t3529) * MDP(12) + t3720 * t3589) * t3362) * t3583) * t3598;];
taucX  = t1;
