% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V2G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:15:46
% EndTime: 2020-08-06 19:15:54
% DurationCPUTime: 8.51s
% Computational Cost: add. (10658->517), mult. (13614->1023), div. (1518->12), fcn. (12867->18), ass. (0->432)
t945 = cos(qJ(2,1));
t955 = 0.1e1 / qJ(3,1);
t1103 = t945 * t955;
t941 = sin(qJ(2,1));
t1043 = t941 * t1103;
t947 = pkin(2) + pkin(3);
t1104 = t945 * t947;
t918 = t941 * qJ(3,1);
t903 = t918 + pkin(1);
t888 = t1104 + t903;
t884 = 0.1e1 / t888;
t1012 = t884 * t1043;
t944 = cos(qJ(2,2));
t952 = 0.1e1 / qJ(3,2);
t1106 = t944 * t952;
t939 = sin(qJ(2,2));
t1044 = t939 * t1106;
t1107 = t944 * t947;
t917 = t939 * qJ(3,2);
t901 = t917 + pkin(1);
t887 = t1107 + t901;
t882 = 0.1e1 / t887;
t1016 = t882 * t1044;
t943 = cos(qJ(2,3));
t949 = 0.1e1 / qJ(3,3);
t1109 = t943 * t949;
t937 = sin(qJ(2,3));
t1045 = t937 * t1109;
t1110 = t943 * t947;
t916 = t937 * qJ(3,3);
t899 = t916 + pkin(1);
t886 = t1110 + t899;
t880 = 0.1e1 / t886;
t1020 = t880 * t1045;
t1168 = legFrame(3,3);
t1040 = cos(t1168);
t1186 = cos(qJ(1,3));
t919 = sin(t1168);
t938 = sin(qJ(1,3));
t861 = t1040 * t938 + t919 * t1186;
t1169 = legFrame(2,3);
t1041 = cos(t1169);
t1187 = cos(qJ(1,2));
t920 = sin(t1169);
t940 = sin(qJ(1,2));
t865 = t1041 * t940 + t920 * t1187;
t1170 = legFrame(1,3);
t1042 = cos(t1170);
t1188 = cos(qJ(1,1));
t921 = sin(t1170);
t942 = sin(qJ(1,1));
t869 = t1042 * t942 + t921 * t1188;
t962 = t869 * t1012 + t865 * t1016 + t861 * t1020;
t819 = t962 * pkin(5);
t859 = -t1040 * t1186 + t919 * t938;
t863 = -t1041 * t1187 + t920 * t940;
t867 = -t1042 * t1188 + t921 * t942;
t963 = t867 * t1012 + t863 * t1016 + t859 * t1020;
t818 = t963 * pkin(5);
t1198 = t859 * t861;
t1197 = t863 * t865;
t1196 = t867 * t869;
t1195 = t899 * t943;
t1194 = t901 * t944;
t1193 = t903 * t945;
t1192 = -0.2e1 * pkin(1);
t934 = t943 ^ 2;
t935 = t944 ^ 2;
t936 = t945 ^ 2;
t946 = pkin(5) - pkin(6);
t910 = t938 * t946;
t1008 = t899 * t1186 + t910;
t913 = t946 * t1186;
t872 = t899 * t938 - t913;
t830 = t919 * t1008 + t872 * t1040 + t861 * t1110;
t1191 = 0.2e1 * t830;
t911 = t940 * t946;
t1006 = t901 * t1187 + t911;
t914 = t946 * t1187;
t874 = t901 * t940 - t914;
t832 = t920 * t1006 + t874 * t1041 + t865 * t1107;
t1190 = 0.2e1 * t832;
t912 = t942 * t946;
t1004 = t903 * t1188 + t912;
t915 = t946 * t1188;
t876 = t903 * t942 - t915;
t834 = t921 * t1004 + t876 * t1042 + t869 * t1104;
t1189 = 0.2e1 * t834;
t1185 = pkin(1) * t937;
t1184 = pkin(1) * t939;
t1183 = pkin(1) * t941;
t1182 = pkin(5) * t859;
t1181 = pkin(5) * t861;
t1180 = pkin(5) * t863;
t1179 = pkin(5) * t865;
t1178 = pkin(5) * t867;
t1177 = pkin(5) * t869;
t1176 = pkin(5) * t937;
t1175 = pkin(5) * t939;
t1174 = pkin(5) * t941;
t1173 = pkin(5) * t934;
t1172 = pkin(5) * t935;
t1171 = pkin(5) * t936;
t1167 = qJ(3,1) * t945;
t1166 = qJ(3,2) * t944;
t1165 = qJ(3,3) * t943;
t829 = -t1008 * t1040 + t859 * t1110 + t872 * t919;
t1158 = t829 * t943;
t1093 = pkin(2) * t1158;
t898 = 0.2e1 * t916 + pkin(1);
t1009 = t898 * t1186 + t910;
t1048 = (qJ(3,3) + t947) * (-qJ(3,3) + t947) * t934;
t904 = qJ(3,3) + t1185;
t850 = t938 * t904 - t937 * t913;
t871 = t898 * t938 - t913;
t985 = t904 * t1186 + t937 * t910;
t794 = -t859 * t1048 - (-t1009 * t1040 + t919 * t871) * t1110 - (-t985 * t1040 + t919 * t850) * qJ(3,3);
t991 = (t794 + t1093) * t949;
t1164 = t880 * t991 * t937;
t1077 = t830 * t1109;
t1039 = pkin(2) * t1077;
t1142 = t880 * t949;
t795 = t861 * t1048 + (t1009 * t919 + t871 * t1040) * t1110 + (t850 * t1040 + t985 * t919) * qJ(3,3);
t790 = t795 * t1142;
t1163 = (t880 * t1039 - t790) * t937;
t831 = -t1006 * t1041 + t863 * t1107 + t874 * t920;
t1156 = t831 * t944;
t1092 = pkin(2) * t1156;
t900 = 0.2e1 * t917 + pkin(1);
t1007 = t900 * t1187 + t911;
t1047 = (qJ(3,2) + t947) * (-qJ(3,2) + t947) * t935;
t905 = qJ(3,2) + t1184;
t851 = t940 * t905 - t939 * t914;
t873 = t900 * t940 - t914;
t984 = t905 * t1187 + t939 * t911;
t796 = -t863 * t1047 - (-t1007 * t1041 + t920 * t873) * t1107 - (-t984 * t1041 + t920 * t851) * qJ(3,2);
t990 = (t796 + t1092) * t952;
t1162 = t882 * t990 * t939;
t1075 = t832 * t1106;
t1038 = pkin(2) * t1075;
t1137 = t882 * t952;
t797 = t865 * t1047 + (t1007 * t920 + t873 * t1041) * t1107 + (t851 * t1041 + t984 * t920) * qJ(3,2);
t791 = t797 * t1137;
t1161 = (t882 * t1038 - t791) * t939;
t833 = -t1004 * t1042 + t867 * t1104 + t876 * t921;
t1154 = t833 * t945;
t1091 = pkin(2) * t1154;
t902 = 0.2e1 * t918 + pkin(1);
t1005 = t902 * t1188 + t912;
t1046 = (qJ(3,1) + t947) * (-qJ(3,1) + t947) * t936;
t906 = qJ(3,1) + t1183;
t852 = t942 * t906 - t941 * t915;
t875 = t902 * t942 - t915;
t983 = t906 * t1188 + t941 * t912;
t798 = -t867 * t1046 - (-t1005 * t1042 + t921 * t875) * t1104 - (-t983 * t1042 + t921 * t852) * qJ(3,1);
t989 = (t798 + t1091) * t955;
t1160 = t884 * t989 * t941;
t1073 = t834 * t1103;
t1037 = pkin(2) * t1073;
t1132 = t884 * t955;
t799 = t869 * t1046 + (t1005 * t921 + t875 * t1042) * t1104 + (t852 * t1042 + t983 * t921) * qJ(3,1);
t792 = t799 * t1132;
t1159 = (t884 * t1037 - t792) * t941;
t1157 = t830 * t943;
t1155 = t832 * t944;
t1153 = t834 * t945;
t889 = t937 * t947 - t1165;
t958 = pkin(2) ^ 2;
t841 = t916 + (-pkin(2) * t889 + t937 * t958) * t949;
t1152 = t841 * t943;
t890 = t939 * t947 - t1166;
t842 = t917 + (-pkin(2) * t890 + t939 * t958) * t952;
t1151 = t842 * t944;
t891 = t941 * t947 - t1167;
t843 = t918 + (-pkin(2) * t891 + t941 * t958) * t955;
t1150 = t843 * t945;
t1149 = t859 * t880;
t1148 = t861 * t880;
t1147 = t863 * t882;
t1146 = t865 * t882;
t1145 = t867 * t884;
t1144 = t869 * t884;
t1143 = t880 * t943;
t881 = 0.1e1 / t886 ^ 2;
t931 = t937 ^ 2;
t1141 = t881 * t931;
t1140 = t881 * t949;
t950 = 0.1e1 / qJ(3,3) ^ 2;
t1139 = t881 * t950;
t1138 = t882 * t944;
t883 = 0.1e1 / t887 ^ 2;
t932 = t939 ^ 2;
t1136 = t883 * t932;
t1135 = t883 * t952;
t953 = 0.1e1 / qJ(3,2) ^ 2;
t1134 = t883 * t953;
t1133 = t884 * t945;
t885 = 0.1e1 / t888 ^ 2;
t933 = t941 ^ 2;
t1131 = t885 * t933;
t1130 = t885 * t955;
t956 = 0.1e1 / qJ(3,1) ^ 2;
t1129 = t885 * t956;
t892 = -pkin(2) * t937 + t1165;
t1128 = t892 * t943;
t893 = -pkin(2) * t939 + t1166;
t1127 = t893 * t944;
t894 = -pkin(2) * t941 + t1167;
t1126 = t894 * t945;
t1125 = t931 * t949;
t1124 = t932 * t952;
t1123 = t933 * t955;
t1122 = t934 * t949;
t1121 = t935 * t952;
t1120 = t936 * t955;
t1119 = t937 * t943;
t1118 = t937 * t949;
t1117 = t937 * t950;
t1116 = t939 * t944;
t1115 = t939 * t952;
t1114 = t939 * t953;
t1113 = t941 * t945;
t1112 = t941 * t955;
t1111 = t941 * t956;
t1108 = t943 * t950;
t1105 = t944 * t953;
t1102 = t945 * t956;
t1101 = t949 * t958;
t1100 = t952 * t958;
t1099 = t955 * t958;
t1098 = pkin(1) ^ 2 + pkin(5) ^ 2;
t1097 = 0.2e1 * pkin(2);
t1096 = 0.2e1 * t1185;
t1095 = 0.2e1 * t1184;
t1094 = 0.2e1 * t1183;
t1090 = pkin(2) * t1118;
t1089 = pkin(2) * t1115;
t1088 = pkin(2) * t1112;
t1087 = t859 * t1176;
t1086 = t861 * t1176;
t1085 = t863 * t1175;
t1084 = t865 * t1175;
t1083 = t867 * t1174;
t1082 = t869 * t1174;
t1081 = pkin(5) * t1122;
t1080 = pkin(5) * t1121;
t1079 = pkin(5) * t1120;
t1078 = t829 * t1109;
t1076 = t831 * t1106;
t1074 = t833 * t1103;
t877 = t889 * t949;
t844 = -t877 + 0.2e1 * t1090;
t1072 = t844 * t1109;
t878 = t890 * t952;
t846 = -t878 + 0.2e1 * t1089;
t1071 = t846 * t1106;
t879 = t891 * t955;
t848 = -t879 + 0.2e1 * t1088;
t1070 = t848 * t1103;
t1069 = t881 * t1198;
t1068 = t883 * t1197;
t1067 = t885 * t1196;
t1066 = t880 * t1125;
t1065 = t880 * t1108;
t1064 = t881 * t1122;
t1063 = t934 * t1139;
t1062 = t881 * t1119;
t1061 = t881 * t1108;
t1060 = t882 * t1124;
t1059 = t882 * t1105;
t1058 = t883 * t1121;
t1057 = t935 * t1134;
t1056 = t883 * t1116;
t1055 = t883 * t1105;
t1054 = t884 * t1123;
t1053 = t884 * t1102;
t1052 = t885 * t1120;
t1051 = t936 * t1129;
t1050 = t885 * t1113;
t1049 = t885 * t1102;
t845 = -t877 + t1090;
t838 = (-t845 + t943) * t937;
t847 = -t878 + t1089;
t839 = (-t847 + t944) * t939;
t849 = -t879 + t1088;
t840 = (-t849 + t945) * t941;
t1036 = t829 * t1081;
t1035 = t830 * t1081;
t1034 = pkin(5) * t830 * t1118;
t1033 = t831 * t1080;
t1032 = t832 * t1080;
t1031 = pkin(5) * t832 * t1115;
t1030 = t833 * t1079;
t1029 = t834 * t1079;
t1028 = pkin(5) * t834 * t1112;
t1027 = t859 * t1064;
t1026 = t861 * t1064;
t1025 = t863 * t1058;
t1024 = t865 * t1058;
t1023 = t867 * t1052;
t1022 = t869 * t1052;
t1021 = t889 * t1065;
t1019 = t937 * t1065;
t1018 = t881 * t1045;
t1017 = t890 * t1059;
t1015 = t939 * t1059;
t1014 = t883 * t1044;
t1013 = t891 * t1053;
t1011 = t941 * t1053;
t1010 = t885 * t1043;
t1003 = t829 * t1020;
t1002 = t831 * t1016;
t1001 = t833 * t1012;
t1000 = t859 * t1018;
t999 = t861 * t1018;
t998 = t863 * t1014;
t997 = t865 * t1014;
t996 = t867 * t1010;
t995 = t869 * t1010;
t994 = t880 * (-t889 - t892) * t1118;
t993 = t882 * (-t890 - t893) * t1115;
t992 = t884 * (-t891 - t894) * t1112;
t988 = -0.2e1 * pkin(2) * t934 - 0.2e1 * t1195;
t987 = -0.2e1 * pkin(2) * t935 - 0.2e1 * t1194;
t986 = -0.2e1 * pkin(2) * t936 - 0.2e1 * t1193;
t982 = (t829 * t859 - t830 * t861) * t1140;
t981 = (t831 * t863 - t832 * t865) * t1135;
t980 = (t833 * t867 - t834 * t869) * t1130;
t979 = (t829 * t1128 - t794 * t937) * t1140;
t978 = (-t830 * t1128 - t795 * t937) * t1140;
t977 = (t831 * t1127 - t796 * t939) * t1135;
t976 = (-t832 * t1127 - t797 * t939) * t1135;
t975 = (t833 * t1126 - t798 * t941) * t1130;
t974 = (-t834 * t1126 - t799 * t941) * t1130;
t973 = 0.2e1 * (-pkin(2) * t943 - pkin(1)) * t937 + (0.2e1 * t934 - 0.2e1) * qJ(3,3);
t972 = 0.2e1 * (-pkin(2) * t944 - pkin(1)) * t939 + (0.2e1 * t935 - 0.2e1) * qJ(3,2);
t971 = 0.2e1 * (-pkin(2) * t945 - pkin(1)) * t941 + (0.2e1 * t936 - 0.2e1) * qJ(3,1);
t970 = t867 * t1054 + t863 * t1060 + t859 * t1066;
t969 = t869 * t1054 + t865 * t1060 + t861 * t1066;
t954 = qJ(3,1) ^ 2;
t968 = -t1097 * t1193 + t918 * t1192 - (-t954 + t958) * t936 - t1098 - t954;
t951 = qJ(3,2) ^ 2;
t967 = -t1097 * t1194 + t917 * t1192 - (-t951 + t958) * t935 - t1098 - t951;
t948 = qJ(3,3) ^ 2;
t966 = -t1097 * t1195 + t916 * t1192 - (-t948 + t958) * t934 - t1098 - t948;
t822 = t970 * pkin(5);
t823 = t969 * pkin(5);
t965 = t833 * t1022 + t831 * t1024 + t829 * t1026;
t964 = t834 * t1023 + t832 * t1025 + t830 * t1027;
t961 = t829 * t999 + t831 * t997 + t833 * t995;
t960 = t830 * t1000 + t832 * t998 + t834 * t996;
t858 = t869 ^ 2;
t857 = t867 ^ 2;
t856 = t865 ^ 2;
t855 = t863 ^ 2;
t854 = t861 ^ 2;
t853 = t859 ^ 2;
t837 = pkin(5) * t840;
t836 = pkin(5) * t839;
t835 = pkin(5) * t838;
t828 = pkin(5) * t1001;
t827 = pkin(5) * t1002;
t826 = pkin(5) * t1003;
t817 = (t1189 - t1178) * t1133;
t816 = (-0.2e1 * t833 - t1177) * t1133;
t815 = (t1190 - t1180) * t1138;
t814 = (-0.2e1 * t831 - t1179) * t1138;
t813 = (t1191 - t1182) * t1143;
t812 = (-0.2e1 * t829 - t1181) * t1143;
t811 = (t867 * t1094 - t1029) * t884;
t810 = (t869 * t1094 + t1030) * t884;
t809 = (t863 * t1095 - t1032) * t882;
t808 = (t865 * t1095 + t1033) * t882;
t807 = (t859 * t1096 - t1035) * t880;
t806 = (t861 * t1096 + t1036) * t880;
t805 = (t867 * t1192 - t1028) * t1133;
t804 = t869 * t1133 * t1192 + t828;
t803 = (t863 * t1192 - t1031) * t1138;
t802 = t865 * t1138 * t1192 + t827;
t801 = (t859 * t1192 - t1034) * t1143;
t800 = t861 * t1143 * t1192 + t826;
t793 = t1067 + t1068 + t1069;
t789 = t933 * t1067 + t932 * t1068 + t931 * t1069;
t788 = 0.2e1 * t1050 * t1196 + 0.2e1 * t1056 * t1197 + 0.2e1 * t1062 * t1198;
t787 = t986 * t1144 + t828;
t786 = (-t945 * t1028 + t867 * t986) * t884;
t785 = t987 * t1146 + t827;
t784 = (-t944 * t1031 + t863 * t987) * t882;
t783 = t988 * t1148 + t826;
t782 = (-t943 * t1034 + t859 * t988) * t880;
t781 = (t971 * t869 - t1030) * t884;
t780 = (t971 * t867 + t1029) * t884;
t779 = (t972 * t865 - t1033) * t882;
t778 = (t972 * t863 + t1032) * t882;
t777 = (t973 * t861 - t1036) * t880;
t776 = (t973 * t859 + t1035) * t880;
t769 = t834 * t1011 + t832 * t1015 + t830 * t1019;
t768 = -t833 * t1011 - t831 * t1015 - t829 * t1019;
t767 = (t989 - t1082) * t884;
t766 = t792 + (-t1037 - t1083) * t884;
t765 = (t990 - t1084) * t882;
t764 = t791 + (-t1038 - t1085) * t882;
t763 = (t991 - t1086) * t880;
t762 = t790 + (-t1039 - t1087) * t880;
t761 = -t792 + (0.2e1 * t1037 + t1083) * t884;
t760 = (t1082 + (-t798 - 0.2e1 * t1091) * t955) * t884;
t759 = -t791 + (0.2e1 * t1038 + t1085) * t882;
t758 = (t1084 + (-t796 - 0.2e1 * t1092) * t952) * t882;
t757 = -t790 + (0.2e1 * t1039 + t1087) * t880;
t756 = (t1086 + (-t794 - 0.2e1 * t1093) * t949) * t880;
t755 = -t1159 + (t834 * t936 - 0.2e1 * t1178) * t884;
t754 = t1160 + (-t833 * t936 - 0.2e1 * t1177) * t884;
t753 = -t1161 + (t832 * t935 - 0.2e1 * t1180) * t882;
t752 = t1162 + (-t831 * t935 - 0.2e1 * t1179) * t882;
t751 = -t1163 + (t830 * t934 - 0.2e1 * t1182) * t880;
t750 = t1164 + (-t829 * t934 - 0.2e1 * t1181) * t880;
t749 = ((-t798 * t955 + t1082) * pkin(2) + (-t833 * t1099 + (-t833 - t1177) * qJ(3,1)) * t945) * t884;
t748 = ((-t799 * t955 + t1083) * pkin(2) + (t834 * t1099 + (t834 - t1178) * qJ(3,1)) * t945) * t884;
t747 = ((-t796 * t952 + t1084) * pkin(2) + (-t831 * t1100 + (-t831 - t1179) * qJ(3,2)) * t944) * t882;
t746 = ((-t797 * t952 + t1085) * pkin(2) + (t832 * t1100 + (t832 - t1180) * qJ(3,2)) * t944) * t882;
t745 = ((-t794 * t949 + t1086) * pkin(2) + (-t829 * t1101 + (-t829 - t1181) * qJ(3,3)) * t943) * t880;
t744 = ((-t795 * t949 + t1087) * pkin(2) + (t830 * t1101 + (t830 - t1182) * qJ(3,3)) * t943) * t880;
t743 = -t1051 * t833 * t834 - t1057 * t831 * t832 - t1063 * t829 * t830;
t742 = pkin(5) * t1160 + (-t833 * t1171 + t869 * t968) * t884;
t741 = -pkin(5) * t1159 + (t834 * t1171 + t867 * t968) * t884;
t740 = pkin(5) * t1162 + (-t831 * t1172 + t865 * t967) * t882;
t739 = -pkin(5) * t1161 + (t832 * t1172 + t863 * t967) * t882;
t738 = pkin(5) * t1164 + (-t829 * t1173 + t861 * t966) * t880;
t737 = -pkin(5) * t1163 + (t830 * t1173 + t859 * t966) * t880;
t736 = t934 * t982 + t935 * t981 + t936 * t980;
t735 = t1113 * t980 + t1116 * t981 + t1119 * t982;
t1 = [t854 * t881 + t856 * t883 + t858 * t885, 0, 0, t858 * t1131 + t1136 * t856 + t1141 * t854, 0.2e1 * t1050 * t858 + 0.2e1 * t1056 * t856 + 0.2e1 * t1062 * t854, 0.2e1 * t961, 0.2e1 * t965, t1051 * t833 ^ 2 + t1057 * t831 ^ 2 + t1063 * t829 ^ 2, -pkin(5) * t961 - t1144 * t804 - t1146 * t802 - t1148 * t800, -pkin(5) * t965 - t1144 * t810 - t1146 * t808 - t1148 * t806, -t783 * t1148 - t785 * t1146 - t787 * t1144 + (t1129 * t798 - t1132 * t760) * t1154 + (t1134 * t796 - t1137 * t758) * t1156 + (t1139 * t794 - t1142 * t756) * t1158, (-t754 * t884 + t975) * t869 + (-t752 * t882 + t977) * t865 + (-t750 * t880 + t979) * t861, (-t1074 * t816 - t781 * t869) * t884 + (-t1076 * t814 - t779 * t865) * t882 + (-t1078 * t812 - t777 * t861) * t880, (-t742 * t869 + (-t1154 * t749 + t767 * t798) * t955) * t884 + (-t740 * t865 + (-t1156 * t747 + t765 * t796) * t952) * t882 + (-t738 * t861 + (-t1158 * t745 + t763 * t794) * t949) * t880, 1; t793, 0, 0, t789, t788, t735, t736, t743, -t801 * t1148 - t803 * t1146 - t805 * t1144 + (-t1000 * t829 - t831 * t998 - t833 * t996) * pkin(5), -t807 * t1148 - t809 * t1146 - t811 * t1144 + (-t1023 * t833 - t1025 * t831 - t1027 * t829) * pkin(5), -t794 * t830 * t1061 - t796 * t832 * t1055 - t798 * t834 * t1049 + (-t1074 * t761 - t869 * t786) * t884 + (-t1076 * t759 - t865 * t784) * t882 + (-t1078 * t757 - t861 * t782) * t880, -t1144 * t755 - t1146 * t753 - t1148 * t751 + t859 * t979 + t863 * t977 + t867 * t975, (-t1074 * t817 - t780 * t869) * t884 + (-t1076 * t815 - t778 * t865) * t882 + (-t1078 * t813 - t776 * t861) * t880, (-t741 * t869 + (-t1154 * t748 + t766 * t798) * t955) * t884 + (-t739 * t865 + (-t1156 * t746 + t764 * t796) * t952) * t882 + (-t737 * t861 + (-t1158 * t744 + t762 * t794) * t949) * t880, 0; 0, 0, 0, 0, 0, -t969, -t962, t768, t823, t819, (-t1070 * t833 - t1111 * t798) * t884 + (-t1071 * t831 - t1114 * t796) * t882 + (-t1072 * t829 - t1117 * t794) * t880 + t823, -t1144 * t840 - t1146 * t839 - t1148 * t838, -0.2e1 * t1001 - 0.2e1 * t1002 - 0.2e1 * t1003 - t819, (-t837 * t869 + (-t1150 * t833 - t798 * t849) * t955) * t884 + (-t836 * t865 + (-t1151 * t831 - t796 * t847) * t952) * t882 + (-t835 * t861 + (-t1152 * t829 - t794 * t845) * t949) * t880, 0; t793, 0, 0, t789, t788, t735, t736, t743, -t800 * t1149 - t802 * t1147 - t804 * t1145 + (t830 * t999 + t832 * t997 + t834 * t995) * pkin(5), -t806 * t1149 - t808 * t1147 - t810 * t1145 + (t1022 * t834 + t1024 * t832 + t1026 * t830) * pkin(5), t795 * t829 * t1061 + t797 * t831 * t1055 + t799 * t833 * t1049 + (t1073 * t760 - t867 * t787) * t884 + (t1075 * t758 - t863 * t785) * t882 + (t1077 * t756 - t859 * t783) * t880, -t1145 * t754 - t1147 * t752 - t1149 * t750 + t861 * t978 + t865 * t976 + t869 * t974, (t1073 * t816 - t781 * t867) * t884 + (t1075 * t814 - t779 * t863) * t882 + (t1077 * t812 - t777 * t859) * t880, (-t742 * t867 + (t1153 * t749 + t767 * t799) * t955) * t884 + (-t740 * t863 + (t1155 * t747 + t765 * t797) * t952) * t882 + (-t738 * t859 + (t1157 * t745 + t763 * t795) * t949) * t880, 0; t853 * t881 + t855 * t883 + t857 * t885, 0, 0, t1131 * t857 + t1136 * t855 + t1141 * t853, 0.2e1 * t1050 * t857 + 0.2e1 * t1056 * t855 + 0.2e1 * t1062 * t853, -0.2e1 * t960, -0.2e1 * t964, t1051 * t834 ^ 2 + t1057 * t832 ^ 2 + t1063 * t830 ^ 2, pkin(5) * t960 - t1145 * t805 - t1147 * t803 - t1149 * t801, pkin(5) * t964 - t1145 * t811 - t1147 * t809 - t1149 * t807, -t782 * t1149 - t784 * t1147 - t786 * t1145 + (-t1129 * t799 + t1132 * t761) * t1153 + (-t1134 * t797 + t1137 * t759) * t1155 + (-t1139 * t795 + t1142 * t757) * t1157, (-t755 * t884 + t974) * t867 + (-t753 * t882 + t976) * t863 + (-t751 * t880 + t978) * t859, (t1073 * t817 - t780 * t867) * t884 + (t1075 * t815 - t778 * t863) * t882 + (t1077 * t813 - t776 * t859) * t880, (-t741 * t867 + (t1153 * t748 + t766 * t799) * t955) * t884 + (-t739 * t863 + (t1155 * t746 + t764 * t797) * t952) * t882 + (-t737 * t859 + (t1157 * t744 + t762 * t795) * t949) * t880, 1; 0, 0, 0, 0, 0, -t970, -t963, t769, t822, t818, (t1070 * t834 - t1111 * t799) * t884 + (t1071 * t832 - t1114 * t797) * t882 + (t1072 * t830 - t1117 * t795) * t880 + t822, -t1145 * t840 - t1147 * t839 - t1149 * t838, t1012 * t1189 + t1016 * t1190 + t1020 * t1191 - t818, (-t837 * t867 + (t1150 * t834 - t799 * t849) * t955) * t884 + (-t836 * t863 + (t1151 * t832 - t797 * t847) * t952) * t882 + (-t835 * t859 + (t1152 * t830 - t795 * t845) * t949) * t880, 0; 0, 0, 0, 0, 0, -t969, -t962, t768, t823, t819, t1013 * t833 + t1017 * t831 + t1021 * t829 + t1112 * t760 + t1115 * t758 + t1118 * t756, t861 * t994 + t865 * t993 + t869 * t992, t1112 * t816 + t1115 * t814 + t1118 * t812, (t749 * t941 + t767 * t891) * t955 + (t747 * t939 + t765 * t890) * t952 + (t745 * t937 + t763 * t889) * t949, 0; 0, 0, 0, 0, 0, -t970, -t963, t769, t822, t818, -t1013 * t834 - t1017 * t832 - t1021 * t830 + t1112 * t761 + t1115 * t759 + t1118 * t757, t859 * t994 + t863 * t993 + t867 * t992, t1112 * t817 + t1115 * t815 + t1118 * t813, (t748 * t941 + t766 * t891) * t955 + (t746 * t939 + t764 * t890) * t952 + (t744 * t937 + t762 * t889) * t949, 0; 0, 0, 0, 0, 0, 0, 0, t931 * t950 + t932 * t953 + t933 * t956, 0, 0, (t848 * t955 - t891 * t956) * t941 + (t846 * t952 - t890 * t953) * t939 + (t844 * t949 - t889 * t950) * t937, 0, 0.2e1 * t1123 + 0.2e1 * t1124 + 0.2e1 * t1125, (t843 * t941 - t849 * t891) * t955 + (t842 * t939 - t847 * t890) * t952 + (t841 * t937 - t845 * t889) * t949, 1;];
tau_reg  = t1;
