% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR12V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:23
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:23:21
% EndTime: 2020-08-06 19:23:53
% DurationCPUTime: 33.24s
% Computational Cost: add. (242964->863), mult. (327555->1640), div. (12789->12), fcn. (169938->18), ass. (0->591)
t3854 = xDP(2);
t3857 = pkin(2) + pkin(3);
t4121 = (t3854 * t3857);
t3789 = pkin(1) * t4121;
t3855 = xDP(1);
t4120 = (t3855 * t3857);
t3790 = pkin(1) * t4120;
t3838 = legFrame(3,2);
t3809 = sin(t3838);
t3812 = cos(t3838);
t3847 = cos(qJ(2,3));
t3830 = t3847 ^ 2;
t3841 = sin(qJ(2,3));
t3842 = sin(qJ(1,3));
t3853 = xDP(3);
t3856 = pkin(5) - pkin(6);
t3800 = t3842 * t3856;
t3848 = cos(qJ(1,3));
t3914 = -t3809 * t3854 + t3812 * t3855;
t4132 = t3848 * t3856;
t3988 = pkin(1) * t3842 - t4132;
t3882 = (pkin(1) * t3848 + t3800) * t3853 + t3914 * t3988;
t3915 = t3809 * t3855 + t3812 * t3854;
t4152 = (qJ(3,3) + t3857) * (-qJ(3,3) + t3857);
t4001 = t3848 * t4152;
t4002 = t3842 * t4152;
t4073 = -2 * t4120;
t4074 = -2 * t4121;
t4125 = t3853 * t3848;
t4252 = t3842 * qJ(3,3);
t3835 = pkin(1) * qJ(3,3);
t4003 = t3841 * t4152;
t4297 = t4003 - t3835;
t3806 = t3841 * qJ(3,3);
t4318 = 0.2e1 * t3806;
t3690 = ((qJ(3,3) * t4074 + t3855 * t4002) * t3812 + (qJ(3,3) * t4073 - t3854 * t4002) * t3809 + t3853 * t4001) * t3830 + (((t3842 * t3914 + t4125) * t4318 + t3882) * t3857 + t4297 * t3915) * t3847 + (t3882 * qJ(3,3) + t3789 * t3812 + t3790 * t3809) * t3841 - qJ(3,3) * ((-t3855 * t4252 - t4121) * t3812 + (t3854 * t4252 - t4120) * t3809 - qJ(3,3) * t4125);
t3792 = t3806 + pkin(1);
t4134 = t3847 * t3857;
t3774 = t4134 + t3792;
t3765 = 0.1e1 / t3774;
t3859 = 0.1e1 / qJ(3,3);
t4187 = t3765 * t3859;
t3684 = t3690 * t4187;
t4282 = pkin(1) * t3841;
t3797 = qJ(3,3) + t4282;
t3918 = t3792 * t3842 - t4132;
t4088 = t3792 * t3848 + t3800;
t4122 = t3853 * t3857;
t3711 = ((-qJ(3,3) * t3854 + t3842 * t4120) * t3812 + (-qJ(3,3) * t3855 - t3842 * t4121) * t3809 + t3848 * t4122) * t3830 + ((t3841 * t4121 + t3918 * t3855) * t3812 + (t3841 * t4120 - t3918 * t3854) * t3809 + t4088 * t3853) * t3847 + t3915 * t3797;
t4035 = t3711 * t4187;
t3705 = pkin(2) * t4035;
t3675 = t3705 - t3684;
t3985 = pkin(3) * t4035;
t3660 = -t3985 - t3675;
t3744 = -t3842 * t3853 + t3914 * t3848;
t4201 = t3744 * t3856;
t4022 = t3841 * t4201;
t4118 = t3857 * t3859;
t3702 = (-t3711 * t4118 + t4022) * t3765;
t3766 = 0.1e1 / t3774 ^ 2;
t3858 = qJ(3,3) ^ 2;
t4085 = pkin(1) ^ 2 + pkin(5) ^ 2;
t3937 = t4085 + (-0.2e1 * pkin(5) + pkin(6)) * pkin(6);
t3780 = t3858 + t3937;
t3860 = 0.1e1 / qJ(3,3) ^ 2;
t4305 = t3792 * t3847;
t3909 = 0.2e1 * t4305;
t4203 = t3744 * t3765;
t4024 = t3830 * t4203;
t3977 = qJ(3,3) * t4024;
t4113 = 0.2e1 * t3835;
t4094 = t3856 * t3660 + t4113 * t4203;
t4133 = t3847 * t3859;
t4222 = t3711 * t3859;
t4223 = t3711 * t3856;
t3630 = ((t4094 * t3841 + (t3847 * t4223 + (t3830 * t4152 + t3857 * t3909 + t3780) * t3744) * t3765) * t3744 * t4133 + (-(-t3856 * t3977 + ((-pkin(3) * t4222 + t4022) * t3765 - t3675) * t4134 + t3660 * t3792) * t3711 - (-t3702 * t3847 + t3792 * t4035) * t3690) * t3860) * t3766;
t4279 = pkin(2) * t3630;
t4230 = t3660 * t3857;
t4259 = qJ(3,3) * t3711;
t3651 = -t3765 * t4259 + t4230;
t3803 = 0.2e1 * t3830 - 0.1e1;
t3834 = t3857 ^ 2;
t4188 = t3765 * t3841;
t4023 = t3744 * t4188;
t4084 = -0.4e1 * pkin(1) * t3857;
t4119 = t3856 * t3857;
t4312 = 0.2e1 * pkin(1);
t4313 = ((((t3765 * t4003 * t4201 + t3651 * t3857) * t3847 + pkin(1) * t4230 + (t3651 * t3841 + (-t3803 * t3744 * t4119 - pkin(1) * t3711) * t3765) * qJ(3,3)) * t3711 + (-t3702 * t4134 + ((pkin(1) * t3859 + t3841) * t3857 * t3711 + (t3830 - 0.1e1) * qJ(3,3) * t4201) * t3765) * t3690) * t3860 + (-(t3834 - 0.3e1 * t3858) * t4024 * t4134 + (t3856 * (t3684 - 0.2e1 * t3705 - 0.2e1 * t3985) * qJ(3,3) + (-0.3e1 * (-t3858 / 0.3e1 + t3834) * t3806 + (t3858 - t3834) * t4312) * t4203) * t3830 + (-t3660 * t3841 * t4119 + (-t3744 * (0.3e1 * t3858 + t3937) * t3857 + (t3744 * t4084 - t4223) * t3806) * t3765) * t3847 - (t3780 * t4023 + t4094) * qJ(3,3)) * t3744 * t3859) * t3766;
t4321 = t4313 + t4279;
t3839 = legFrame(2,2);
t3810 = sin(t3839);
t3813 = cos(t3839);
t3849 = cos(qJ(2,2));
t3831 = t3849 ^ 2;
t3843 = sin(qJ(2,2));
t3844 = sin(qJ(1,2));
t3801 = t3844 * t3856;
t3850 = cos(qJ(1,2));
t3912 = -t3810 * t3854 + t3813 * t3855;
t4129 = t3850 * t3856;
t3987 = pkin(1) * t3844 - t4129;
t3881 = (pkin(1) * t3850 + t3801) * t3853 + t3912 * t3987;
t3913 = t3810 * t3855 + t3813 * t3854;
t4151 = (qJ(3,2) + t3857) * (-qJ(3,2) + t3857);
t3998 = t3850 * t4151;
t3999 = t3844 * t4151;
t4124 = t3853 * t3850;
t4251 = t3844 * qJ(3,2);
t3836 = pkin(1) * qJ(3,2);
t4000 = t3843 * t4151;
t4298 = t4000 - t3836;
t3807 = t3843 * qJ(3,2);
t4317 = 0.2e1 * t3807;
t3691 = ((qJ(3,2) * t4074 + t3855 * t3999) * t3813 + (qJ(3,2) * t4073 - t3854 * t3999) * t3810 + t3853 * t3998) * t3831 + (((t3844 * t3912 + t4124) * t4317 + t3881) * t3857 + t4298 * t3913) * t3849 + (t3881 * qJ(3,2) + t3789 * t3813 + t3790 * t3810) * t3843 - qJ(3,2) * ((-t3855 * t4251 - t4121) * t3813 + (t3854 * t4251 - t4120) * t3810 - qJ(3,2) * t4124);
t3794 = t3807 + pkin(1);
t4131 = t3849 * t3857;
t3775 = t4131 + t3794;
t3768 = 0.1e1 / t3775;
t3862 = 0.1e1 / qJ(3,2);
t4182 = t3768 * t3862;
t3685 = t3691 * t4182;
t4281 = pkin(1) * t3843;
t3798 = qJ(3,2) + t4281;
t3917 = t3794 * t3844 - t4129;
t4087 = t3794 * t3850 + t3801;
t3712 = ((-qJ(3,2) * t3854 + t3844 * t4120) * t3813 + (-qJ(3,2) * t3855 - t3844 * t4121) * t3810 + t3850 * t4122) * t3831 + ((t3843 * t4121 + t3917 * t3855) * t3813 + (t3843 * t4120 - t3917 * t3854) * t3810 + t4087 * t3853) * t3849 + t3913 * t3798;
t4032 = t3712 * t4182;
t3706 = pkin(2) * t4032;
t3677 = t3706 - t3685;
t3984 = pkin(3) * t4032;
t3661 = -t3984 - t3677;
t3745 = -t3844 * t3853 + t3912 * t3850;
t4198 = t3745 * t3856;
t4019 = t3843 * t4198;
t4117 = t3857 * t3862;
t3703 = (-t3712 * t4117 + t4019) * t3768;
t3769 = 0.1e1 / t3775 ^ 2;
t3861 = qJ(3,2) ^ 2;
t3781 = t3861 + t3937;
t3863 = 0.1e1 / qJ(3,2) ^ 2;
t4304 = t3794 * t3849;
t3908 = 0.2e1 * t4304;
t4200 = t3745 * t3768;
t4021 = t3831 * t4200;
t3978 = qJ(3,2) * t4021;
t4114 = 0.2e1 * t3836;
t4093 = t3856 * t3661 + t4114 * t4200;
t4130 = t3849 * t3862;
t4219 = t3712 * t3862;
t4220 = t3712 * t3856;
t3631 = ((t4093 * t3843 + (t3849 * t4220 + (t3831 * t4151 + t3857 * t3908 + t3781) * t3745) * t3768) * t3745 * t4130 + (-(-t3856 * t3978 + ((-pkin(3) * t4219 + t4019) * t3768 - t3677) * t4131 + t3661 * t3794) * t3712 - (-t3703 * t3849 + t3794 * t4032) * t3691) * t3863) * t3769;
t4278 = pkin(2) * t3631;
t4229 = t3661 * t3857;
t4263 = qJ(3,2) * t3712;
t3652 = -t3768 * t4263 + t4229;
t3804 = 0.2e1 * t3831 - 0.1e1;
t4183 = t3768 * t3843;
t4020 = t3745 * t4183;
t4314 = ((((t3768 * t4000 * t4198 + t3652 * t3857) * t3849 + pkin(1) * t4229 + (t3652 * t3843 + (-t3804 * t3745 * t4119 - pkin(1) * t3712) * t3768) * qJ(3,2)) * t3712 + (-t3703 * t4131 + ((pkin(1) * t3862 + t3843) * t3857 * t3712 + (t3831 - 0.1e1) * qJ(3,2) * t4198) * t3768) * t3691) * t3863 + (-(t3834 - 0.3e1 * t3861) * t4021 * t4131 + (t3856 * (t3685 - 0.2e1 * t3706 - 0.2e1 * t3984) * qJ(3,2) + (-0.3e1 * (-t3861 / 0.3e1 + t3834) * t3807 + (t3861 - t3834) * t4312) * t4200) * t3831 + (-t3661 * t3843 * t4119 + (-t3745 * (0.3e1 * t3861 + t3937) * t3857 + (t3745 * t4084 - t4220) * t3807) * t3768) * t3849 - (t3781 * t4020 + t4093) * qJ(3,2)) * t3745 * t3862) * t3769;
t4320 = t4314 + t4278;
t3840 = legFrame(1,2);
t3811 = sin(t3840);
t3814 = cos(t3840);
t3851 = cos(qJ(2,1));
t3832 = t3851 ^ 2;
t3845 = sin(qJ(2,1));
t3846 = sin(qJ(1,1));
t3802 = t3846 * t3856;
t3852 = cos(qJ(1,1));
t3910 = -t3811 * t3854 + t3814 * t3855;
t4126 = t3852 * t3856;
t3986 = pkin(1) * t3846 - t4126;
t3880 = (pkin(1) * t3852 + t3802) * t3853 + t3910 * t3986;
t3911 = t3811 * t3855 + t3814 * t3854;
t4150 = (qJ(3,1) + t3857) * (-qJ(3,1) + t3857);
t3995 = t3852 * t4150;
t3996 = t3846 * t4150;
t4123 = t3853 * t3852;
t4250 = t3846 * qJ(3,1);
t3837 = pkin(1) * qJ(3,1);
t3997 = t3845 * t4150;
t4299 = t3997 - t3837;
t3808 = t3845 * qJ(3,1);
t4316 = 0.2e1 * t3808;
t3692 = ((qJ(3,1) * t4074 + t3855 * t3996) * t3814 + (qJ(3,1) * t4073 - t3854 * t3996) * t3811 + t3853 * t3995) * t3832 + (((t3846 * t3910 + t4123) * t4316 + t3880) * t3857 + t4299 * t3911) * t3851 + (t3880 * qJ(3,1) + t3789 * t3814 + t3790 * t3811) * t3845 - qJ(3,1) * ((-t3855 * t4250 - t4121) * t3814 + (t3854 * t4250 - t4120) * t3811 - qJ(3,1) * t4123);
t3796 = t3808 + pkin(1);
t4128 = t3851 * t3857;
t3776 = t4128 + t3796;
t3771 = 0.1e1 / t3776;
t3865 = 0.1e1 / qJ(3,1);
t4177 = t3771 * t3865;
t3686 = t3692 * t4177;
t4280 = pkin(1) * t3845;
t3799 = qJ(3,1) + t4280;
t3916 = t3796 * t3846 - t4126;
t4086 = t3796 * t3852 + t3802;
t3713 = ((-qJ(3,1) * t3854 + t3846 * t4120) * t3814 + (-qJ(3,1) * t3855 - t3846 * t4121) * t3811 + t3852 * t4122) * t3832 + ((t3845 * t4121 + t3916 * t3855) * t3814 + (t3845 * t4120 - t3916 * t3854) * t3811 + t4086 * t3853) * t3851 + t3911 * t3799;
t4029 = t3713 * t4177;
t3707 = pkin(2) * t4029;
t3679 = t3707 - t3686;
t3983 = pkin(3) * t4029;
t3662 = -t3983 - t3679;
t3746 = -t3846 * t3853 + t3910 * t3852;
t4195 = t3746 * t3856;
t4016 = t3845 * t4195;
t4116 = t3857 * t3865;
t3704 = (-t3713 * t4116 + t4016) * t3771;
t3772 = 0.1e1 / t3776 ^ 2;
t3864 = qJ(3,1) ^ 2;
t3782 = t3864 + t3937;
t3866 = 0.1e1 / qJ(3,1) ^ 2;
t4303 = t3796 * t3851;
t3907 = 0.2e1 * t4303;
t4197 = t3746 * t3771;
t4018 = t3832 * t4197;
t3979 = qJ(3,1) * t4018;
t4115 = 0.2e1 * t3837;
t4092 = t3856 * t3662 + t4115 * t4197;
t4127 = t3851 * t3865;
t4216 = t3713 * t3865;
t4217 = t3713 * t3856;
t3632 = ((t4092 * t3845 + (t3851 * t4217 + (t3832 * t4150 + t3857 * t3907 + t3782) * t3746) * t3771) * t3746 * t4127 + (-(-t3856 * t3979 + ((-pkin(3) * t4216 + t4016) * t3771 - t3679) * t4128 + t3662 * t3796) * t3713 - (-t3704 * t3851 + t3796 * t4029) * t3692) * t3866) * t3772;
t4277 = pkin(2) * t3632;
t4228 = t3662 * t3857;
t4267 = qJ(3,1) * t3713;
t3653 = -t3771 * t4267 + t4228;
t3805 = 0.2e1 * t3832 - 0.1e1;
t4178 = t3771 * t3845;
t4017 = t3746 * t4178;
t4315 = ((((t3771 * t3997 * t4195 + t3653 * t3857) * t3851 + pkin(1) * t4228 + (t3653 * t3845 + (-t3805 * t3746 * t4119 - pkin(1) * t3713) * t3771) * qJ(3,1)) * t3713 + (-t3704 * t4128 + ((pkin(1) * t3865 + t3845) * t3857 * t3713 + (t3832 - 0.1e1) * qJ(3,1) * t4195) * t3771) * t3692) * t3866 + (-(t3834 - 0.3e1 * t3864) * t4018 * t4128 + (t3856 * (t3686 - 0.2e1 * t3707 - 0.2e1 * t3983) * qJ(3,1) + (-0.3e1 * (-t3864 / 0.3e1 + t3834) * t3808 + (t3864 - t3834) * t4312) * t4197) * t3832 + (-t3662 * t3845 * t4119 + (-t3746 * (0.3e1 * t3864 + t3937) * t3857 + (t3746 * t4084 - t4217) * t3808) * t3771) * t3851 - (t3782 * t4017 + t4092) * qJ(3,1)) * t3746 * t3865) * t3772;
t4319 = t4315 + t4277;
t4311 = 0.2e1 * t3812;
t4310 = 0.2e1 * t3813;
t4309 = 0.2e1 * t3814;
t4186 = t3766 * t3859;
t4034 = t3711 * t4186;
t3991 = 0.2e1 * t4034;
t4308 = t3765 * t3991;
t4181 = t3769 * t3862;
t4031 = t3712 * t4181;
t3990 = 0.2e1 * t4031;
t4307 = t3768 * t3990;
t4176 = t3772 * t3865;
t4028 = t3713 * t4176;
t3989 = 0.2e1 * t4028;
t4306 = t3771 * t3989;
t4271 = pkin(2) * t3851;
t4302 = (pkin(1) + t4271) * t3845;
t4272 = pkin(2) * t3849;
t4301 = (pkin(1) + t4272) * t3843;
t4273 = pkin(2) * t3847;
t4300 = (pkin(1) + t4273) * t3841;
t4292 = -0.2e1 * t3675;
t4291 = -0.2e1 * t3677;
t4290 = -0.2e1 * t3679;
t4289 = -0.2e1 * t3809;
t4288 = -0.2e1 * t3810;
t4287 = -0.2e1 * t3811;
t4286 = 0.4e1 * t3830;
t4285 = 0.4e1 * t3831;
t4284 = 0.4e1 * t3832;
t4283 = -0.2e1 * t3857;
t4276 = pkin(2) * t3830;
t4275 = pkin(2) * t3831;
t4274 = pkin(2) * t3832;
t3767 = t3765 * t3766;
t4184 = t3767 * t3859;
t4224 = t3711 * t3744;
t3952 = t4184 * t4224;
t4147 = t3841 * t3859;
t4011 = t3767 * t4147;
t4148 = t3841 * t3857;
t4202 = t3744 * t3766;
t4256 = qJ(3,3) * t3847;
t3645 = -(t3684 * t3841 + (t4201 + (-t3841 * t4118 + t3847) * t3711) * t3765) * t4202 + (t4148 - t4256) * t3952 - t3744 * t3690 * t4011;
t4270 = pkin(5) * t3645;
t3770 = t3768 * t3769;
t4179 = t3770 * t3862;
t4221 = t3712 * t3745;
t3951 = t4179 * t4221;
t4142 = t3843 * t3862;
t4008 = t3770 * t4142;
t4143 = t3843 * t3857;
t4199 = t3745 * t3769;
t4260 = qJ(3,2) * t3849;
t3646 = -(t3685 * t3843 + (t4198 + (-t3843 * t4117 + t3849) * t3712) * t3768) * t4199 + (t4143 - t4260) * t3951 - t3745 * t3691 * t4008;
t4269 = pkin(5) * t3646;
t3773 = t3771 * t3772;
t4174 = t3773 * t3865;
t4218 = t3713 * t3746;
t3950 = t4174 * t4218;
t4137 = t3845 * t3865;
t4005 = t3773 * t4137;
t4138 = t3845 * t3857;
t4196 = t3746 * t3772;
t4264 = qJ(3,1) * t3851;
t3647 = -(t3686 * t3845 + (t4195 + (-t3845 * t4116 + t3851) * t3713) * t3771) * t4196 + (t4138 - t4264) * t3950 - t3746 * t3692 * t4005;
t4268 = pkin(5) * t3647;
t4266 = qJ(3,1) * t3811;
t4265 = qJ(3,1) * t3814;
t4262 = qJ(3,2) * t3810;
t4261 = qJ(3,2) * t3813;
t4258 = qJ(3,3) * t3809;
t4257 = qJ(3,3) * t3812;
t4255 = t3830 * qJ(3,3);
t4254 = t3831 * qJ(3,2);
t4253 = t3832 * qJ(3,1);
t4248 = t3630 * t3847;
t4247 = t3631 * t3849;
t4246 = t3632 * t3851;
t4245 = t3645 * t3765;
t4244 = t3645 * t3841;
t4243 = t3645 * t3847;
t4242 = t3645 * t3848;
t4241 = t3645 * t3859;
t4240 = t3646 * t3768;
t4239 = t3646 * t3843;
t4238 = t3646 * t3849;
t4237 = t3646 * t3850;
t4236 = t3646 * t3862;
t4235 = t3647 * t3771;
t4234 = t3647 * t3845;
t4233 = t3647 * t3851;
t4232 = t3647 * t3852;
t4231 = t3647 * t3865;
t3708 = t3711 ^ 2;
t4227 = t3708 * t3860;
t3709 = t3712 ^ 2;
t4226 = t3709 * t3863;
t3710 = t3713 ^ 2;
t4225 = t3710 * t3866;
t4055 = t3841 * t4252;
t3754 = t3988 + t4055;
t4145 = t3842 * t3857;
t3723 = (-t3809 * t4145 - t4257) * t3830 + (-t3754 * t3809 + t3812 * t4148) * t3847 + t3812 * t3797;
t4215 = t3723 * t3859;
t3724 = (t3812 * t4145 - t4258) * t3830 + (t3754 * t3812 + t3809 * t4148) * t3847 + t3809 * t3797;
t4214 = t3724 * t3859;
t4056 = t3843 * t4251;
t3756 = t3987 + t4056;
t4140 = t3844 * t3857;
t3725 = (-t3810 * t4140 - t4261) * t3831 + (-t3756 * t3810 + t3813 * t4143) * t3849 + t3813 * t3798;
t4213 = t3725 * t3862;
t3726 = (t3813 * t4140 - t4262) * t3831 + (t3756 * t3813 + t3810 * t4143) * t3849 + t3810 * t3798;
t4212 = t3726 * t3862;
t4057 = t3845 * t4250;
t3758 = t3986 + t4057;
t4135 = t3846 * t3857;
t3727 = (-t3811 * t4135 - t4265) * t3832 + (-t3758 * t3811 + t3814 * t4138) * t3851 + t3814 * t3799;
t4211 = t3727 * t3865;
t3728 = (t3814 * t4135 - t4266) * t3832 + (t3758 * t3814 + t3811 * t4138) * t3851 + t3811 * t3799;
t4210 = t3728 * t3865;
t3791 = t4318 + pkin(1);
t3729 = t3830 * t4001 + (t3791 * t3848 + t3800) * t4134 + qJ(3,3) * (t3797 * t3848 + t3841 * t3800);
t4209 = t3729 * t3841;
t3793 = t4317 + pkin(1);
t3730 = t3831 * t3998 + (t3793 * t3850 + t3801) * t4131 + qJ(3,2) * (t3798 * t3850 + t3843 * t3801);
t4208 = t3730 * t3843;
t3795 = t4316 + pkin(1);
t3731 = t3832 * t3995 + (t3795 * t3852 + t3802) * t4128 + qJ(3,1) * (t3799 * t3852 + t3845 * t3802);
t4207 = t3731 * t3845;
t3741 = t3744 ^ 2;
t3738 = t3741 * t3766;
t4206 = t3741 * t3830;
t3742 = t3745 ^ 2;
t3739 = t3742 * t3769;
t4205 = t3742 * t3831;
t3743 = t3746 ^ 2;
t3740 = t3743 * t3772;
t4204 = t3743 * t3832;
t3747 = t3848 * t4134 + t4088;
t4194 = t3747 * t3847;
t4193 = t3747 * t3859;
t3748 = t3850 * t4131 + t4087;
t4192 = t3748 * t3849;
t4191 = t3748 * t3862;
t3749 = t3852 * t4128 + t4086;
t4190 = t3749 * t3851;
t4189 = t3749 * t3865;
t4185 = t3766 * t3860;
t4180 = t3769 * t3863;
t4175 = t3772 * t3866;
t4173 = t3791 * t3847;
t4172 = t3793 * t3849;
t4171 = t3795 * t3851;
t4170 = t3809 * t3848;
t4168 = t3809 * t3857;
t4167 = t3810 * t3850;
t4165 = t3810 * t3857;
t4164 = t3811 * t3852;
t4162 = t3811 * t3857;
t4161 = t3812 * t3848;
t4159 = t3812 * t3857;
t4158 = t3813 * t3850;
t4156 = t3813 * t3857;
t4155 = t3814 * t3852;
t4153 = t3814 * t3857;
t4149 = t3841 * t3847;
t4146 = t3842 * t3847;
t4144 = t3843 * t3849;
t4141 = t3844 * t3849;
t4139 = t3845 * t3851;
t4136 = t3846 * t3851;
t3672 = t3705 - t3684 / 0.2e1;
t3676 = t3705 - 0.2e1 * t3684;
t3869 = pkin(2) ^ 2;
t3815 = -t3858 + t3869;
t3904 = qJ(3,3) * t4248 - t4321 * t3841;
t3994 = t4203 * t4292;
t4012 = t3765 * t4133;
t4112 = t3904 * pkin(5) + (pkin(2) * t3909 + t3815 * t3830 + t3841 * t4113 + t3858 + t4085) * t3645 + 0.4e1 * t3672 * t3977 + (-pkin(5) * t3676 * t3711 + 0.2e1 * (-(-pkin(2) * t3690 + t3711 * t3815) * t3841 + pkin(1) * t4259) * t4203) * t4012 + (-pkin(5) * t3708 * t4186 + pkin(1) * t3994) * t3841 + qJ(3,3) * t3994;
t3673 = t3706 - t3685 / 0.2e1;
t3678 = t3706 - 0.2e1 * t3685;
t3816 = -t3861 + t3869;
t3905 = qJ(3,2) * t4247 - t4320 * t3843;
t3993 = t4200 * t4291;
t4009 = t3768 * t4130;
t4111 = t3905 * pkin(5) + (pkin(2) * t3908 + t3816 * t3831 + t3843 * t4114 + t3861 + t4085) * t3646 + 0.4e1 * t3673 * t3978 + (-t3712 * pkin(5) * t3678 + 0.2e1 * (-(-pkin(2) * t3691 + t3712 * t3816) * t3843 + pkin(1) * t4263) * t4200) * t4009 + (-pkin(5) * t3709 * t4181 + pkin(1) * t3993) * t3843 + qJ(3,2) * t3993;
t3674 = t3707 - t3686 / 0.2e1;
t3680 = t3707 - 0.2e1 * t3686;
t3817 = -t3864 + t3869;
t3906 = qJ(3,1) * t4246 - t4319 * t3845;
t3992 = t4197 * t4290;
t4006 = t3771 * t4127;
t4110 = t3906 * pkin(5) + (pkin(2) * t3907 + t3817 * t3832 + t3845 * t4115 + t3864 + t4085) * t3647 + 0.4e1 * t3674 * t3979 + (-pkin(5) * t3680 * t3713 + 0.2e1 * (-(-pkin(2) * t3692 + t3713 * t3817) * t3845 + pkin(1) * t4267) * t4197) * t4006 + (-pkin(5) * t3710 * t4176 + pkin(1) * t3992) * t3845 + qJ(3,1) * t3992;
t3783 = -pkin(2) * t3841 + t4256;
t4080 = -0.2e1 * t4255;
t4091 = 0.2e1 * t3711 * t3690 * t4185 + pkin(2) * t3738;
t4109 = (t3869 + t3858) * t3630 + t3783 * t4270 + pkin(2) * t4313 + t4091 * qJ(3,3) + (-(-t3815 * t3841 + t3835) * t3847 + (t4080 + t4282) * pkin(2)) * t3738;
t3784 = -pkin(2) * t3843 + t4260;
t4079 = -0.2e1 * t4254;
t4090 = 0.2e1 * t3712 * t3691 * t4180 + pkin(2) * t3739;
t4108 = (t3869 + t3861) * t3631 + t3784 * t4269 + pkin(2) * t4314 + t4090 * qJ(3,2) + (-(-t3816 * t3843 + t3836) * t3849 + (t4079 + t4281) * pkin(2)) * t3739;
t3785 = -pkin(2) * t3845 + t4264;
t4078 = -0.2e1 * t4253;
t4089 = 0.2e1 * t3713 * t3692 * t4175 + pkin(2) * t3740;
t4107 = (t3869 + t3864) * t3632 + t3785 * t4268 + pkin(2) * t4315 + t4089 * qJ(3,1) + (-(-t3817 * t3845 + t3837) * t3851 + (t4078 + t4280) * pkin(2)) * t3740;
t4042 = t3708 * t4185;
t4066 = pkin(5) * t4244;
t4106 = t4066 - qJ(3,3) * (t3738 + t4042) + (t4255 - t4300) * t3738 - t4321;
t4040 = t3709 * t4180;
t4065 = pkin(5) * t4239;
t4105 = t4065 - qJ(3,2) * (t3739 + t4040) + (t4254 - t4301) * t3739 - t4320;
t4038 = t3710 * t4175;
t4064 = pkin(5) * t4234;
t4104 = t4064 - qJ(3,1) * (t3740 + t4038) + (t4253 - t4302) * t3740 - t4319;
t3982 = pkin(5) * t4042;
t4071 = pkin(5) * t4248;
t4103 = t4071 + (0.2e1 * t4300 + (-0.2e1 * t3830 + 0.2e1) * qJ(3,3)) * t3645 - t3841 * t3982 + (t3991 * t4173 + (t3672 * t4286 + t4292) * t3765) * t3744;
t3981 = pkin(5) * t4040;
t4069 = pkin(5) * t4247;
t4102 = t4069 + (0.2e1 * t4301 + (-0.2e1 * t3831 + 0.2e1) * qJ(3,2)) * t3646 - t3843 * t3981 + (t3990 * t4172 + (t3673 * t4285 + t4291) * t3768) * t3745;
t3980 = pkin(5) * t4038;
t4067 = pkin(5) * t4246;
t4101 = t4067 + (0.2e1 * t4302 + (-0.2e1 * t3832 + 0.2e1) * qJ(3,1)) * t3647 - t3845 * t3980 + (t3989 * t4171 + (t3674 * t4284 + t4290) * t3771) * t3746;
t4072 = pkin(5) * t3630 * t3841;
t4100 = -t4072 + 0.2e1 * (t4276 + t4305) * t3645 + (-0.4e1 * t3672 * t4023 - t3982) * t3847 + (-0.2e1 * t3797 * t3859 + t4286) * t3711 * t4202;
t4070 = pkin(5) * t3631 * t3843;
t4099 = -t4070 + 0.2e1 * (t4275 + t4304) * t3646 + (-0.4e1 * t3673 * t4020 - t3981) * t3849 + (-0.2e1 * t3798 * t3862 + t4285) * t3712 * t4199;
t4068 = pkin(5) * t3632 * t3845;
t4098 = -t4068 + 0.2e1 * (t4274 + t4303) * t3647 + (-0.4e1 * t3674 * t4017 - t3980) * t3851 + (-0.2e1 * t3799 * t3865 + t4284) * t3713 * t4196;
t4097 = pkin(5) * t4243 + 0.2e1 * qJ(3,3) * t3630 + (-t4173 - 0.2e1 * t4276) * t3738 + t4091;
t4096 = pkin(5) * t4238 + 0.2e1 * qJ(3,2) * t3631 + (-t4172 - 0.2e1 * t4275) * t3739 + t4090;
t4095 = pkin(5) * t4233 + 0.2e1 * qJ(3,1) * t3632 + (-t4171 - 0.2e1 * t4274) * t3740 + t4089;
t4083 = qJ(3,1) * t4283;
t4082 = qJ(3,2) * t4283;
t4081 = qJ(3,3) * t4283;
t4077 = -0.2e1 * t4244;
t4076 = -0.2e1 * t4239;
t4075 = -0.2e1 * t4234;
t4063 = pkin(5) * t4222;
t4062 = pkin(5) * t4219;
t4061 = pkin(5) * t4216;
t4054 = t3630 * t4187;
t4053 = t3631 * t4182;
t4052 = t3632 * t4177;
t4048 = t3842 * t4245;
t4047 = t3765 * t4242;
t4046 = t3844 * t4240;
t4045 = t3768 * t4237;
t4044 = t3846 * t4235;
t4043 = t3771 * t4232;
t4041 = t3767 * t4227;
t4039 = t3770 * t4226;
t4037 = t3773 * t4225;
t4036 = t3848 * t4224;
t4033 = t3850 * t4221;
t4030 = t3852 * t4218;
t4027 = t3741 * t4184;
t4026 = t3742 * t4179;
t4025 = t3743 * t4174;
t4015 = t3830 * t4193;
t4014 = t3831 * t4191;
t4013 = t3832 * t4189;
t4010 = t3767 * t4133;
t4007 = t3770 * t4130;
t4004 = t3773 * t4127;
t3976 = t3645 * t4015;
t3827 = t3841 ^ 2;
t3975 = t3827 * t4047;
t3974 = t4147 * t4245;
t3973 = t3645 * t4012;
t3972 = t4149 * t4242;
t3971 = t3646 * t4014;
t3828 = t3843 ^ 2;
t3970 = t3828 * t4045;
t3969 = t4142 * t4240;
t3968 = t3646 * t4009;
t3967 = t4144 * t4237;
t3966 = t3647 * t4013;
t3829 = t3845 ^ 2;
t3965 = t3829 * t4043;
t3964 = t4137 * t4235;
t3963 = t3647 * t4006;
t3962 = t4139 * t4232;
t3961 = (t3676 * t3847 + t3711 * t4188) * t4034;
t3960 = (t3678 * t3849 + t3712 * t4183) * t4031;
t3959 = (t3680 * t3851 + t3713 * t4178) * t4028;
t3958 = t3842 * t4041;
t3957 = t3848 * t4041;
t3956 = t3844 * t4039;
t3955 = t3850 * t4039;
t3954 = t3846 * t4037;
t3953 = t3852 * t4037;
t3949 = t3741 * t4011;
t3948 = t3741 * t4010;
t3947 = t3742 * t4008;
t3946 = t3742 * t4007;
t3945 = t3743 * t4005;
t3944 = t3743 * t4004;
t3943 = t3747 * t4012;
t3942 = t3748 * t4009;
t3941 = t3749 * t4006;
t3940 = t3841 * t4010;
t3939 = t3843 * t4007;
t3938 = t3845 * t4004;
t3933 = t3848 * t3961;
t3932 = t3850 * t3960;
t3931 = t3852 * t3959;
t3930 = t3841 * t3957;
t3929 = t3847 * t3957;
t3928 = t3843 * t3955;
t3927 = t3849 * t3955;
t3926 = t3845 * t3953;
t3925 = t3851 * t3953;
t3924 = t3803 * t3952;
t3923 = t3804 * t3951;
t3922 = t3805 * t3950;
t3903 = t3848 * t3924;
t3902 = t3850 * t3923;
t3901 = t3852 * t3922;
t3900 = -(t4243 * t4312 - t4072) * t3765 + (t3744 * t4282 + t3847 * t4063 / 0.2e1) * t4308;
t3899 = -(t4238 * t4312 - t4070) * t3768 + (t3745 * t4281 + t3849 * t4062 / 0.2e1) * t4307;
t3898 = -(t4233 * t4312 - t4068) * t3771 + (t3746 * t4280 + t3851 * t4061 / 0.2e1) * t4306;
t3897 = -(pkin(1) * t4077 - t4071) * t3765 + (t3847 * pkin(1) * t3744 - t3841 * t4063 / 0.2e1) * t4308;
t3896 = -(pkin(1) * t4076 - t4069) * t3768 + (t3849 * pkin(1) * t3745 - t3843 * t4062 / 0.2e1) * t4307;
t3895 = -(pkin(1) * t4075 - t4067) * t3771 + (t3851 * pkin(1) * t3746 - t3845 * t4061 / 0.2e1) * t4306;
t3894 = t3765 * (-t3630 * t4170 + t3645 * t4215);
t3893 = t3765 * (t3630 * t4161 + t3645 * t4214);
t3892 = t3768 * (-t3631 * t4167 + t3646 * t4213);
t3891 = t3768 * (t3631 * t4158 + t3646 * t4212);
t3890 = t3771 * (-t3632 * t4164 + t3647 * t4211);
t3889 = t3771 * (t3632 * t4155 + t3647 * t4210);
t3761 = (pkin(1) + 0.2e1 * t4271) * t3845 + t4078 + qJ(3,1);
t3760 = (pkin(1) + 0.2e1 * t4272) * t3843 + t4079 + qJ(3,2);
t3759 = (pkin(1) + 0.2e1 * t4273) * t3841 + t4080 + qJ(3,3);
t3757 = t3986 + 0.2e1 * t4057;
t3755 = t3987 + 0.2e1 * t4056;
t3753 = t3988 + 0.2e1 * t4055;
t3752 = t3986 * t3845 + t4250;
t3751 = t3987 * t3843 + t4251;
t3750 = t3988 * t3841 + t4252;
t3722 = -0.2e1 * t3772 * t4204 + t3740;
t3721 = -0.2e1 * t3769 * t4205 + t3739;
t3720 = -0.2e1 * t3766 * t4206 + t3738;
t3719 = (t3811 * t4083 + t3814 * t3996) * t3832 + (t3757 * t4153 + t3811 * t4299) * t3851 + t3752 * t4265 + t3799 * t4162;
t3718 = (-t3811 * t3996 + t3814 * t4083) * t3832 + (-t3757 * t4162 + t3814 * t4299) * t3851 - t3752 * t4266 + t3799 * t4153;
t3717 = (t3810 * t4082 + t3813 * t3999) * t3831 + (t3755 * t4156 + t3810 * t4298) * t3849 + t3751 * t4261 + t3798 * t4165;
t3716 = (-t3810 * t3999 + t3813 * t4082) * t3831 + (-t3755 * t4165 + t3813 * t4298) * t3849 - t3751 * t4262 + t3798 * t4156;
t3715 = (t3809 * t4081 + t3812 * t4002) * t3830 + (t3753 * t4159 + t3809 * t4297) * t3847 + t3750 * t4257 + t3797 * t4168;
t3714 = (-t3809 * t4002 + t3812 * t4081) * t3830 + (-t3753 * t4168 + t3812 * t4297) * t3847 - t3750 * t4258 + t3797 * t4159;
t3695 = -t3740 + (t4204 - t4225) * t3772;
t3694 = -t3739 + (t4205 - t4226) * t3769;
t3693 = -t3738 + (t4206 - t4227) * t3766;
t3611 = t4315 - t4064 + 0.2e1 * t4277;
t3610 = t4314 - t4065 + 0.2e1 * t4278;
t3609 = t4313 - t4066 + 0.2e1 * t4279;
t3605 = t3906 + 0.2e1 * t4268;
t3604 = t3905 + 0.2e1 * t4269;
t3603 = t3904 + 0.2e1 * t4270;
t1 = [(t3812 * t4047 + t3813 * t4045 + t3814 * t4043) * MDP(1) + (t3812 * t3975 + t3813 * t3970 + t3814 * t3965 + (-t3728 * t3743 + t4030 * t4309) * t3938 + (-t3726 * t3742 + t4033 * t4310) * t3939 + (-t3724 * t3741 + t4036 * t4311) * t3940) * MDP(4) + (t3903 * t4311 + t3902 * t4310 + t3901 * t4309 + (t3722 * t4210 + t3962 * t4309) * t3771 + (t3721 * t4212 + t3967 * t4310) * t3768 + (t3720 * t4214 + t3972 * t4311) * t3765) * MDP(5) + (t3812 * t3929 + t3813 * t3927 + t3814 * t3925 + t3841 * t3893 + t3843 * t3891 + t3845 * t3889) * MDP(6) + (-t3812 * t3930 - t3813 * t3928 - t3814 * t3926 + t3847 * t3893 + t3849 * t3891 + t3851 * t3889) * MDP(7) + (t3724 * t4054 + t3726 * t4053 + t3728 * t4052) * MDP(8) + (-t3898 * t4155 - t3899 * t4158 - t3900 * t4161 + (-t3724 * t3974 - t3726 * t3969 - t3728 * t3964) * pkin(5) + (t3724 * t3949 + t3726 * t3947 + t3728 * t3945) * pkin(1)) * MDP(9) + (-t3895 * t4155 - t3896 * t4158 - t3897 * t4161 + (-t3724 * t3973 - t3726 * t3968 - t3728 * t3963) * pkin(5) + (t3724 * t3948 + t3726 * t3946 + t3728 * t3944) * pkin(1)) * MDP(10) + ((-t3719 * t4139 + t3728 * t3761) * t4025 + (-t3717 * t4144 + t3726 * t3760) * t4026 + (-t3715 * t4149 + t3724 * t3759) * t4027 + ((t3611 * t3728 - t3632 * t3719) * t3865 + t4098 * t4155) * t3771 + ((t3610 * t3726 - t3631 * t3717) * t3862 + t4099 * t4158) * t3768 + ((t3609 * t3724 - t3630 * t3715) * t3859 + t4100 * t4161) * t3765) * MDP(11) + (-t3812 * t3933 - t3813 * t3932 - t3814 * t3931 + (t3605 * t4155 + (t3719 * t3845 + t3728 * t3785) * t4231) * t3771 + (t3604 * t4158 + (t3717 * t3843 + t3726 * t3784) * t4236) * t3768 + (t3603 * t4161 + (t3715 * t3841 + t3724 * t3783) * t4241) * t3765) * MDP(12) + ((t4101 * t4155 + (t3695 * t3719 + t4095 * t3728) * t3865) * t3771 + (t4102 * t4158 + (t3694 * t3717 + t4096 * t3726) * t3862) * t3768 + (t4103 * t4161 + (t3693 * t3715 + t4097 * t3724) * t3859) * t3765) * MDP(13) + ((t4110 * t4155 + (t4104 * t3719 + t4107 * t3728) * t3865) * t3771 + (t4111 * t4158 + (t4105 * t3717 + t4108 * t3726) * t3862) * t3768 + (t4112 * t4161 + (t4106 * t3715 + t4109 * t3724) * t3859) * t3765) * MDP(14); (-t3809 * t4047 - t3810 * t4045 - t3811 * t4043) * MDP(1) + (-t3809 * t3975 - t3810 * t3970 - t3811 * t3965 + (-t3727 * t3743 + t4030 * t4287) * t3938 + (-t3725 * t3742 + t4033 * t4288) * t3939 + (-t3723 * t3741 + t4036 * t4289) * t3940) * MDP(4) + (t3903 * t4289 + t3902 * t4288 + t3901 * t4287 + (t3722 * t4211 + t3962 * t4287) * t3771 + (t3721 * t4213 + t3967 * t4288) * t3768 + (t3720 * t4215 + t3972 * t4289) * t3765) * MDP(5) + (-t3809 * t3929 - t3810 * t3927 - t3811 * t3925 + t3841 * t3894 + t3843 * t3892 + t3845 * t3890) * MDP(6) + (t3809 * t3930 + t3810 * t3928 + t3811 * t3926 + t3847 * t3894 + t3849 * t3892 + t3851 * t3890) * MDP(7) + (t3723 * t4054 + t3725 * t4053 + t3727 * t4052) * MDP(8) + (t3898 * t4164 + t3899 * t4167 + t3900 * t4170 + (-t3723 * t3974 - t3725 * t3969 - t3727 * t3964) * pkin(5) + (t3723 * t3949 + t3725 * t3947 + t3727 * t3945) * pkin(1)) * MDP(9) + (t3895 * t4164 + t3896 * t4167 + t3897 * t4170 + (-t3723 * t3973 - t3725 * t3968 - t3727 * t3963) * pkin(5) + (t3723 * t3948 + t3725 * t3946 + t3727 * t3944) * pkin(1)) * MDP(10) + ((-t3718 * t4139 + t3727 * t3761) * t4025 + (-t3716 * t4144 + t3725 * t3760) * t4026 + (-t3714 * t4149 + t3723 * t3759) * t4027 + ((t3611 * t3727 - t3632 * t3718) * t3865 - t4098 * t4164) * t3771 + ((t3610 * t3725 - t3631 * t3716) * t3862 - t4099 * t4167) * t3768 + ((t3609 * t3723 - t3630 * t3714) * t3859 - t4100 * t4170) * t3765) * MDP(11) + (t3809 * t3933 + t3810 * t3932 + t3811 * t3931 + (-t3605 * t4164 + (t3718 * t3845 + t3727 * t3785) * t4231) * t3771 + (-t3604 * t4167 + (t3716 * t3843 + t3725 * t3784) * t4236) * t3768 + (-t3603 * t4170 + (t3714 * t3841 + t3723 * t3783) * t4241) * t3765) * MDP(12) + ((-t4101 * t4164 + (t3695 * t3718 + t3727 * t4095) * t3865) * t3771 + (-t4102 * t4167 + (t3694 * t3716 + t3725 * t4096) * t3862) * t3768 + (-t4103 * t4170 + (t3693 * t3714 + t3723 * t4097) * t3859) * t3765) * MDP(13) + ((-t4110 * t4164 + (t3718 * t4104 + t3727 * t4107) * t3865) * t3771 + (-t4111 * t4167 + (t3716 * t4105 + t3725 * t4108) * t3862) * t3768 + (-t4112 * t4170 + (t3714 * t4106 + t3723 * t4109) * t3859) * t3765) * MDP(14); (-t4044 - t4046 - t4048) * MDP(1) + (-t3827 * t4048 - t3828 * t4046 - t3829 * t4044 + (-t3749 * t4204 - 0.2e1 * t4136 * t4218) * t4005 + (-t3748 * t4205 - 0.2e1 * t4141 * t4221) * t4008 + (-t3747 * t4206 - 0.2e1 * t4146 * t4224) * t4011) * MDP(4) + (-0.2e1 * t3842 * t3924 - 0.2e1 * t3844 * t3923 - 0.2e1 * t3846 * t3922 + (t3722 * t4189 + t3846 * t4075) * t3851 * t3771 + (t3721 * t4191 + t3844 * t4076) * t3849 * t3768 + (t3720 * t4193 + t3842 * t4077) * t3847 * t3765) * MDP(5) + (-t3847 * t3958 - t3849 * t3956 - t3851 * t3954 + (t3647 * t3749 * t4127 - t3632 * t3846) * t4178 + (t3646 * t3748 * t4130 - t3631 * t3844) * t4183 + (t3645 * t3747 * t4133 - t3630 * t3842) * t4188) * MDP(6) + (t3841 * t3958 + t3843 * t3956 + t3845 * t3954 + (-t3632 * t4136 + t3966) * t3771 + (-t3631 * t4141 + t3971) * t3768 + (-t3630 * t4146 + t3976) * t3765) * MDP(7) + (t3630 * t3943 + t3631 * t3942 + t3632 * t3941) * MDP(8) + (t3898 * t3846 + t3899 * t3844 + t3900 * t3842 + (-t3941 * t4234 - t3942 * t4239 - t3943 * t4244) * pkin(5) + (t3741 * t3747 * t3940 + t3742 * t3748 * t3939 + t3743 * t3749 * t3938) * pkin(1)) * MDP(9) + (t3895 * t3846 + t3896 * t3844 + t3897 * t3842 + (-t3765 * t3976 - t3768 * t3971 - t3771 * t3966) * pkin(5) + (t3741 * t3767 * t4015 + t3742 * t3770 * t4014 + t3743 * t3773 * t4013) * pkin(1)) * MDP(10) + ((t3749 * t3761 - t4207) * t3944 + (t3748 * t3760 - t4208) * t3946 + (t3747 * t3759 - t4209) * t3948 + ((t3611 * t4190 - t3632 * t3731) * t3865 - t4098 * t3846) * t3771 + ((t3610 * t4192 - t3631 * t3730) * t3862 - t4099 * t3844) * t3768 + ((t3609 * t4194 - t3630 * t3729) * t3859 - t4100 * t3842) * t3765) * MDP(11) + (t3842 * t3961 + t3844 * t3960 + t3846 * t3959 + (-t3846 * t3605 + (t3785 * t4190 + t4207) * t4231) * t3771 + (-t3844 * t3604 + (t3784 * t4192 + t4208) * t4236) * t3768 + (-t3842 * t3603 + (t3783 * t4194 + t4209) * t4241) * t3765) * MDP(12) + ((-t4101 * t3846 + (t3695 * t3731 + t4095 * t4190) * t3865) * t3771 + (-t4102 * t3844 + (t3694 * t3730 + t4096 * t4192) * t3862) * t3768 + (-t4103 * t3842 + (t3693 * t3729 + t4097 * t4194) * t3859) * t3765) * MDP(13) + ((-t4110 * t3846 + (t3731 * t4104 + t4107 * t4190) * t3865) * t3771 + (-t4111 * t3844 + (t3730 * t4105 + t4108 * t4192) * t3862) * t3768 + (-t4112 * t3842 + (t3729 * t4106 + t4109 * t4194) * t3859) * t3765) * MDP(14);];
taucX  = t1;
