% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:23
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR12V2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:23:01
% EndTime: 2020-08-06 19:23:21
% DurationCPUTime: 20.13s
% Computational Cost: add. (16284->801), mult. (21078->1511), div. (2340->12), fcn. (16875->18), ass. (0->542)
t3213 = cos(qJ(2,3));
t3207 = sin(qJ(2,3));
t3171 = t3207 * qJ(3,3);
t3573 = t3171 + pkin(1);
t3596 = t3213 * t3573;
t3215 = cos(qJ(2,2));
t3209 = sin(qJ(2,2));
t3172 = t3209 * qJ(3,2);
t3572 = t3172 + pkin(1);
t3595 = t3215 * t3572;
t3217 = cos(qJ(2,1));
t3211 = sin(qJ(2,1));
t3173 = t3211 * qJ(3,1);
t3571 = t3173 + pkin(1);
t3594 = t3217 * t3571;
t3593 = -2 * MDP(6);
t3592 = -2 * MDP(7);
t3202 = t3217 ^ 2;
t3254 = 0.2e1 * pkin(2) * t3202 + 0.2e1 * t3594;
t3200 = t3215 ^ 2;
t3255 = 0.2e1 * pkin(2) * t3200 + 0.2e1 * t3595;
t3198 = t3213 ^ 2;
t3256 = 0.2e1 * pkin(2) * t3198 + 0.2e1 * t3596;
t3220 = pkin(2) + pkin(3);
t3466 = t3213 * t3220;
t3147 = t3466 + t3573;
t3208 = sin(qJ(1,3));
t3219 = pkin(5) - pkin(6);
t3162 = t3208 * t3219;
t3214 = cos(qJ(1,3));
t3126 = t3147 * t3214 + t3162;
t3533 = t3126 * t3198;
t3463 = t3215 * t3220;
t3148 = t3463 + t3572;
t3210 = sin(qJ(1,2));
t3163 = t3210 * t3219;
t3216 = cos(qJ(1,2));
t3127 = t3148 * t3216 + t3163;
t3531 = t3127 * t3200;
t3460 = t3217 * t3220;
t3149 = t3460 + t3571;
t3212 = sin(qJ(1,1));
t3164 = t3212 * t3219;
t3218 = cos(qJ(1,1));
t3128 = t3149 * t3218 + t3164;
t3529 = t3128 * t3202;
t3204 = legFrame(3,2);
t3174 = sin(t3204);
t3177 = cos(t3204);
t3591 = t3174 * t3177;
t3205 = legFrame(2,2);
t3175 = sin(t3205);
t3178 = cos(t3205);
t3590 = t3175 * t3178;
t3206 = legFrame(1,2);
t3176 = sin(t3206);
t3179 = cos(t3206);
t3589 = t3176 * t3179;
t3221 = qJ(3,3) ^ 2;
t3231 = pkin(2) ^ 2;
t3455 = pkin(1) ^ 2 + pkin(5) ^ 2;
t3564 = 0.2e1 * pkin(2);
t3585 = -0.2e1 * pkin(1);
t3588 = t3564 * t3596 - t3171 * t3585 + (-t3221 + t3231) * t3198 + t3221 + t3455;
t3224 = qJ(3,2) ^ 2;
t3587 = t3564 * t3595 - t3172 * t3585 + (-t3224 + t3231) * t3200 + t3224 + t3455;
t3227 = qJ(3,1) ^ 2;
t3586 = t3564 * t3594 - t3173 * t3585 + (-t3227 + t3231) * t3202 + t3227 + t3455;
t3242 = (0.2e1 * t3202 - 0.2e1) * qJ(3,1) - 0.2e1 * (pkin(2) * t3217 + pkin(1)) * t3211;
t3243 = (0.2e1 * t3200 - 0.2e1) * qJ(3,2) - 0.2e1 * (pkin(2) * t3215 + pkin(1)) * t3209;
t3244 = (0.2e1 * t3198 - 0.2e1) * qJ(3,3) - 0.2e1 * (pkin(2) * t3213 + pkin(1)) * t3207;
t3584 = 0.2e1 * pkin(1);
t3583 = -0.2e1 * pkin(5);
t3582 = 0.2e1 * pkin(5);
t3581 = 2 * MDP(5);
t3580 = -0.2e1 * t3220;
t3183 = pkin(1) * t3208;
t3184 = pkin(1) * t3210;
t3185 = pkin(1) * t3212;
t3576 = pkin(5) * t3208;
t3575 = pkin(5) * t3210;
t3574 = pkin(5) * t3212;
t3570 = qJ(3,1) * t3176;
t3569 = qJ(3,1) * t3179;
t3568 = qJ(3,2) * t3175;
t3567 = qJ(3,2) * t3178;
t3566 = qJ(3,3) * t3174;
t3565 = qJ(3,3) * t3177;
t3361 = -t3214 * t3219 + t3183;
t3129 = t3208 * qJ(3,3) + t3361 * t3207;
t3488 = t3207 * t3208;
t3425 = qJ(3,3) * t3488;
t3132 = t3361 + 0.2e1 * t3425;
t3494 = (qJ(3,3) + t3220) * (-qJ(3,3) + t3220);
t3138 = pkin(1) * qJ(3,3) - t3207 * t3494;
t3156 = pkin(1) * t3207 + qJ(3,3);
t3367 = t3208 * t3494;
t3449 = qJ(3,3) * t3580;
t3499 = t3177 * t3220;
t3505 = t3174 * t3220;
t3066 = (-t3174 * t3367 + t3177 * t3449) * t3198 + (-t3132 * t3505 - t3138 * t3177) * t3213 - t3129 * t3566 + t3156 * t3499;
t3141 = 0.1e1 / t3147;
t3222 = 0.1e1 / qJ(3,3);
t3525 = t3141 * t3222;
t3057 = t3066 * t3525;
t3133 = t3361 + t3425;
t3482 = t3208 * t3220;
t3485 = t3207 * t3220;
t3108 = (-t3174 * t3482 - t3565) * t3198 + (-t3133 * t3174 + t3177 * t3485) * t3213 + t3177 * t3156;
t3442 = pkin(2) * t3525;
t3563 = (t3108 * t3442 - t3057) * t3207;
t3067 = (t3174 * t3449 + t3177 * t3367) * t3198 + (t3132 * t3499 - t3138 * t3174) * t3213 + t3129 * t3565 + t3156 * t3505;
t3058 = t3067 * t3525;
t3109 = (t3177 * t3482 - t3566) * t3198 + (t3133 * t3177 + t3174 * t3485) * t3213 + t3174 * t3156;
t3562 = (t3109 * t3442 - t3058) * t3207;
t3360 = -t3216 * t3219 + t3184;
t3130 = t3210 * qJ(3,2) + t3360 * t3209;
t3481 = t3209 * t3210;
t3426 = qJ(3,2) * t3481;
t3134 = t3360 + 0.2e1 * t3426;
t3493 = (qJ(3,2) + t3220) * (-qJ(3,2) + t3220);
t3139 = pkin(1) * qJ(3,2) - t3209 * t3493;
t3157 = pkin(1) * t3209 + qJ(3,2);
t3366 = t3210 * t3493;
t3450 = qJ(3,2) * t3580;
t3497 = t3178 * t3220;
t3503 = t3175 * t3220;
t3068 = (-t3175 * t3366 + t3178 * t3450) * t3200 + (-t3134 * t3503 - t3139 * t3178) * t3215 - t3130 * t3568 + t3157 * t3497;
t3143 = 0.1e1 / t3148;
t3225 = 0.1e1 / qJ(3,2);
t3518 = t3143 * t3225;
t3059 = t3068 * t3518;
t3135 = t3360 + t3426;
t3475 = t3210 * t3220;
t3478 = t3209 * t3220;
t3110 = (-t3175 * t3475 - t3567) * t3200 + (-t3135 * t3175 + t3178 * t3478) * t3215 + t3178 * t3157;
t3441 = pkin(2) * t3518;
t3561 = (t3110 * t3441 - t3059) * t3209;
t3069 = (t3175 * t3450 + t3178 * t3366) * t3200 + (t3134 * t3497 - t3139 * t3175) * t3215 + t3130 * t3567 + t3157 * t3503;
t3060 = t3069 * t3518;
t3111 = (t3178 * t3475 - t3568) * t3200 + (t3135 * t3178 + t3175 * t3478) * t3215 + t3175 * t3157;
t3560 = (t3111 * t3441 - t3060) * t3209;
t3359 = -t3218 * t3219 + t3185;
t3131 = t3212 * qJ(3,1) + t3359 * t3211;
t3474 = t3211 * t3212;
t3427 = qJ(3,1) * t3474;
t3136 = t3359 + 0.2e1 * t3427;
t3492 = (qJ(3,1) + t3220) * (-qJ(3,1) + t3220);
t3140 = pkin(1) * qJ(3,1) - t3211 * t3492;
t3158 = pkin(1) * t3211 + qJ(3,1);
t3365 = t3212 * t3492;
t3451 = qJ(3,1) * t3580;
t3495 = t3179 * t3220;
t3501 = t3176 * t3220;
t3070 = (-t3176 * t3365 + t3179 * t3451) * t3202 + (-t3136 * t3501 - t3140 * t3179) * t3217 - t3131 * t3570 + t3158 * t3495;
t3145 = 0.1e1 / t3149;
t3228 = 0.1e1 / qJ(3,1);
t3511 = t3145 * t3228;
t3061 = t3070 * t3511;
t3137 = t3359 + t3427;
t3468 = t3212 * t3220;
t3471 = t3211 * t3220;
t3112 = (-t3176 * t3468 - t3569) * t3202 + (-t3137 * t3176 + t3179 * t3471) * t3217 + t3179 * t3158;
t3440 = pkin(2) * t3511;
t3559 = (t3112 * t3440 - t3061) * t3211;
t3071 = (t3176 * t3451 + t3179 * t3365) * t3202 + (t3136 * t3495 - t3140 * t3176) * t3217 + t3131 * t3569 + t3158 * t3501;
t3062 = t3071 * t3511;
t3113 = (t3179 * t3468 - t3570) * t3202 + (t3137 * t3179 + t3176 * t3471) * t3217 + t3176 * t3158;
t3558 = (t3113 * t3440 - t3062) * t3211;
t3491 = t3198 * t3214;
t3123 = t3491 * t3494 + ((0.2e1 * t3171 + pkin(1)) * t3214 + t3162) * t3466 + qJ(3,3) * (t3156 * t3214 + t3207 * t3162);
t3103 = t3123 * t3525;
t3465 = t3213 * t3222;
t3410 = t3126 * t3465;
t3358 = pkin(2) * t3410;
t3557 = (t3141 * t3358 - t3103) * t3207;
t3490 = t3200 * t3216;
t3124 = t3490 * t3493 + ((0.2e1 * t3172 + pkin(1)) * t3216 + t3163) * t3463 + qJ(3,2) * (t3157 * t3216 + t3209 * t3163);
t3104 = t3124 * t3518;
t3462 = t3215 * t3225;
t3407 = t3127 * t3462;
t3357 = pkin(2) * t3407;
t3556 = (t3143 * t3357 - t3104) * t3209;
t3489 = t3202 * t3218;
t3125 = t3489 * t3492 + ((0.2e1 * t3173 + pkin(1)) * t3218 + t3164) * t3460 + qJ(3,1) * (t3158 * t3218 + t3211 * t3164);
t3105 = t3125 * t3511;
t3459 = t3217 * t3228;
t3404 = t3128 * t3459;
t3356 = pkin(2) * t3404;
t3555 = (t3145 * t3356 - t3105) * t3211;
t3150 = -pkin(2) * t3207 + qJ(3,3) * t3213;
t3554 = t3108 * t3150;
t3553 = t3108 * t3213;
t3552 = t3108 * t3222;
t3551 = t3109 * t3150;
t3550 = t3109 * t3213;
t3549 = t3109 * t3222;
t3151 = -pkin(2) * t3209 + qJ(3,2) * t3215;
t3548 = t3110 * t3151;
t3547 = t3110 * t3215;
t3546 = t3110 * t3225;
t3545 = t3111 * t3151;
t3544 = t3111 * t3215;
t3543 = t3111 * t3225;
t3152 = -pkin(2) * t3211 + qJ(3,1) * t3217;
t3542 = t3112 * t3152;
t3541 = t3112 * t3217;
t3540 = t3112 * t3228;
t3539 = t3113 * t3152;
t3538 = t3113 * t3217;
t3537 = t3113 * t3228;
t3526 = t3141 * t3213;
t3120 = (0.2e1 * t3126 - t3576) * t3526;
t3536 = t3120 * t3222;
t3519 = t3143 * t3215;
t3121 = (0.2e1 * t3127 - t3575) * t3519;
t3535 = t3121 * t3225;
t3512 = t3145 * t3217;
t3122 = (0.2e1 * t3128 - t3574) * t3512;
t3534 = t3122 * t3228;
t3532 = t3126 * t3213;
t3530 = t3127 * t3215;
t3528 = t3128 * t3217;
t3527 = t3141 * t3208;
t3142 = 0.1e1 / t3147 ^ 2;
t3193 = t3208 ^ 2;
t3524 = t3142 * t3193;
t3199 = t3214 ^ 2;
t3523 = t3142 * t3199;
t3522 = t3142 * t3222;
t3521 = t3142 / qJ(3,3) ^ 2;
t3520 = t3143 * t3210;
t3144 = 0.1e1 / t3148 ^ 2;
t3195 = t3210 ^ 2;
t3517 = t3144 * t3195;
t3201 = t3216 ^ 2;
t3516 = t3144 * t3201;
t3515 = t3144 * t3225;
t3514 = t3144 / qJ(3,2) ^ 2;
t3513 = t3145 * t3212;
t3146 = 0.1e1 / t3149 ^ 2;
t3197 = t3212 ^ 2;
t3510 = t3146 * t3197;
t3203 = t3218 ^ 2;
t3509 = t3146 * t3203;
t3508 = t3146 * t3228;
t3507 = t3146 / qJ(3,1) ^ 2;
t3506 = t3174 * t3214;
t3504 = t3175 * t3216;
t3502 = t3176 * t3218;
t3500 = t3177 * t3214;
t3498 = t3178 * t3216;
t3496 = t3179 * t3218;
t3487 = t3207 * t3213;
t3486 = t3207 * t3214;
t3484 = t3207 * t3222;
t3483 = t3208 * t3213;
t3480 = t3209 * t3215;
t3479 = t3209 * t3216;
t3477 = t3209 * t3225;
t3476 = t3210 * t3215;
t3473 = t3211 * t3217;
t3472 = t3211 * t3218;
t3470 = t3211 * t3228;
t3469 = t3212 * t3217;
t3467 = t3213 * t3214;
t3464 = t3215 * t3216;
t3461 = t3217 * t3218;
t3458 = t3222 * t3231;
t3457 = t3225 * t3231;
t3456 = t3228 * t3231;
t3448 = pkin(2) * t3552;
t3447 = pkin(2) * t3549;
t3446 = pkin(2) * t3546;
t3445 = pkin(2) * t3543;
t3444 = pkin(2) * t3540;
t3443 = pkin(2) * t3537;
t3439 = pkin(5) * t3488;
t3438 = pkin(5) * t3484;
t3437 = pkin(5) * t3481;
t3436 = pkin(5) * t3477;
t3435 = pkin(5) * t3474;
t3434 = pkin(5) * t3470;
t3433 = pkin(5) * t3465;
t3432 = pkin(5) * t3462;
t3431 = pkin(5) * t3459;
t3421 = t3108 * t3521;
t3420 = t3109 * t3521;
t3419 = t3110 * t3514;
t3418 = t3111 * t3514;
t3417 = t3112 * t3507;
t3416 = t3113 * t3507;
t3415 = t3123 * t3521;
t3414 = t3124 * t3514;
t3413 = t3125 * t3507;
t3412 = t3126 * t3491;
t3411 = t3222 * t3533;
t3409 = t3127 * t3490;
t3408 = t3225 * t3531;
t3406 = t3128 * t3489;
t3405 = t3228 * t3529;
t3403 = t3141 * t3506;
t3402 = t3141 * t3500;
t3192 = t3207 ^ 2;
t3401 = t3192 * t3523;
t3400 = t3142 * t3487;
t3399 = t3142 * t3484;
t3398 = t3142 * t3208 * t3214;
t3397 = t3208 * t3522;
t3396 = t3214 * t3522;
t3395 = t3143 * t3504;
t3394 = t3143 * t3498;
t3194 = t3209 ^ 2;
t3393 = t3194 * t3516;
t3392 = t3144 * t3480;
t3391 = t3144 * t3477;
t3390 = t3144 * t3210 * t3216;
t3389 = t3210 * t3515;
t3388 = t3216 * t3515;
t3387 = t3145 * t3502;
t3386 = t3145 * t3496;
t3196 = t3211 ^ 2;
t3385 = t3196 * t3509;
t3384 = t3146 * t3473;
t3383 = t3146 * t3470;
t3382 = t3146 * t3212 * t3218;
t3381 = t3212 * t3508;
t3380 = t3218 * t3508;
t3379 = t3174 * t3486;
t3378 = t3174 * t3467;
t3377 = t3175 * t3479;
t3376 = t3175 * t3464;
t3375 = t3176 * t3472;
t3374 = t3176 * t3461;
t3373 = t3177 * t3486;
t3372 = t3177 * t3467;
t3371 = t3178 * t3479;
t3370 = t3178 * t3464;
t3369 = t3179 * t3472;
t3368 = t3179 * t3461;
t3355 = t3108 * t3438;
t3354 = t3108 * t3433;
t3353 = t3109 * t3438;
t3352 = t3109 * t3433;
t3351 = t3110 * t3436;
t3350 = t3110 * t3432;
t3349 = t3111 * t3436;
t3348 = t3111 * t3432;
t3347 = t3112 * t3434;
t3346 = t3112 * t3431;
t3345 = t3113 * t3434;
t3344 = t3113 * t3431;
t3343 = pkin(5) * t3411;
t3342 = t3126 * t3438;
t3341 = pkin(5) * t3408;
t3340 = t3127 * t3436;
t3339 = pkin(5) * t3405;
t3338 = t3128 * t3434;
t3337 = pkin(5) * t3379;
t3336 = pkin(5) * t3378;
t3335 = pkin(5) * t3377;
t3334 = pkin(5) * t3376;
t3333 = pkin(5) * t3375;
t3332 = pkin(5) * t3374;
t3331 = pkin(5) * t3373;
t3330 = pkin(5) * t3372;
t3329 = pkin(5) * t3371;
t3328 = pkin(5) * t3370;
t3327 = pkin(5) * t3369;
t3326 = pkin(5) * t3368;
t3325 = t3142 * t3411;
t3324 = t3521 * t3532;
t3323 = t3144 * t3408;
t3322 = t3514 * t3530;
t3321 = t3146 * t3405;
t3320 = t3507 * t3528;
t3319 = t3523 * t3591;
t3318 = t3174 * t3396;
t3317 = t3177 * t3396;
t3316 = t3192 * t3398;
t3315 = t3199 * t3400;
t3314 = t3207 * t3397;
t3313 = t3207 * t3396;
t3312 = t3213 * t3397;
t3311 = t3213 * t3396;
t3310 = t3516 * t3590;
t3309 = t3175 * t3388;
t3308 = t3178 * t3388;
t3307 = t3194 * t3390;
t3306 = t3201 * t3392;
t3305 = t3209 * t3389;
t3304 = t3209 * t3388;
t3303 = t3215 * t3389;
t3302 = t3215 * t3388;
t3301 = t3509 * t3589;
t3300 = t3176 * t3380;
t3299 = t3179 * t3380;
t3298 = t3196 * t3382;
t3297 = t3203 * t3384;
t3296 = t3211 * t3381;
t3295 = t3211 * t3380;
t3294 = t3217 * t3381;
t3293 = t3217 * t3380;
t3289 = t3214 * t3325;
t3288 = t3126 * t3312;
t3287 = t3216 * t3323;
t3286 = t3127 * t3303;
t3285 = t3218 * t3321;
t3284 = t3128 * t3294;
t3283 = t3174 * t3313;
t3282 = t3174 * t3311;
t3281 = t3177 * t3313;
t3280 = t3177 * t3311;
t3279 = t3398 * t3487;
t3278 = t3175 * t3304;
t3277 = t3175 * t3302;
t3276 = t3178 * t3304;
t3275 = t3178 * t3302;
t3274 = t3390 * t3480;
t3273 = t3176 * t3295;
t3272 = t3176 * t3293;
t3271 = t3179 * t3295;
t3270 = t3179 * t3293;
t3269 = t3382 * t3473;
t3268 = t3066 * t3207 + t3554;
t3267 = t3068 * t3209 + t3548;
t3266 = t3070 * t3211 + t3542;
t3265 = t3126 * t3207 * t3311;
t3264 = t3127 * t3209 * t3302;
t3263 = t3128 * t3211 * t3293;
t3245 = (t3112 * t3179 - t3113 * t3176) * t3380;
t3246 = (t3110 * t3178 - t3111 * t3175) * t3388;
t3247 = (t3108 * t3177 - t3109 * t3174) * t3396;
t3262 = (t3207 * t3247 + t3209 * t3246 + t3211 * t3245) * MDP(6) + (t3213 * t3247 + t3215 * t3246 + t3217 * t3245) * MDP(7) + (t3108 * t3420 + t3110 * t3418 + t3112 * t3416) * MDP(8) + (-t3297 * t3589 - t3306 * t3590 - t3315 * t3591) * t3581 + (-t3192 * t3319 - t3194 * t3310 - t3196 * t3301) * MDP(4) + (-t3301 - t3310 - t3319) * MDP(1);
t3261 = ((-t3112 * t3212 - t3128 * t3374) * t3383 + (-t3110 * t3210 - t3127 * t3376) * t3391 + (-t3108 * t3208 - t3126 * t3378) * t3399) * MDP(6) + ((-t3112 * t3469 - t3176 * t3406) * t3508 + (-t3110 * t3476 - t3175 * t3409) * t3515 + (-t3108 * t3483 - t3174 * t3412) * t3522) * MDP(7) + (t3108 * t3324 + t3110 * t3322 + t3112 * t3320) * MDP(8) + (t3174 * t3279 + t3175 * t3274 + t3176 * t3269) * t3581 + (t3174 * t3316 + t3175 * t3307 + t3176 * t3298) * MDP(4) + (t3174 * t3398 + t3175 * t3390 + t3176 * t3382) * MDP(1);
t3260 = ((-t3113 * t3212 + t3128 * t3368) * t3383 + (-t3111 * t3210 + t3127 * t3370) * t3391 + (-t3109 * t3208 + t3126 * t3372) * t3399) * MDP(6) + ((-t3113 * t3469 + t3179 * t3406) * t3508 + (-t3111 * t3476 + t3178 * t3409) * t3515 + (-t3109 * t3483 + t3177 * t3412) * t3522) * MDP(7) + (t3109 * t3324 + t3111 * t3322 + t3113 * t3320) * MDP(8) + (-t3177 * t3279 - t3178 * t3274 - t3179 * t3269) * t3581 + (-t3177 * t3316 - t3178 * t3307 - t3179 * t3298) * MDP(4) + (-t3177 * t3398 - t3178 * t3390 - t3179 * t3382) * MDP(1);
t3259 = t3123 * t3207 + t3150 * t3532;
t3258 = t3124 * t3209 + t3151 * t3530;
t3257 = t3125 * t3211 + t3152 * t3528;
t3250 = (-t3067 * t3207 - t3551) * t3522;
t3249 = (-t3069 * t3209 - t3545) * t3515;
t3248 = (-t3071 * t3211 - t3539) * t3508;
t3238 = t3208 * t3325 + t3210 * t3323 + t3212 * t3321;
t3237 = t3108 * t3283 + t3110 * t3278 + t3112 * t3273;
t3236 = t3108 * t3282 + t3110 * t3277 + t3112 * t3272;
t3235 = t3109 * t3281 + t3111 * t3276 + t3113 * t3271;
t3234 = t3109 * t3280 + t3111 * t3275 + t3113 * t3270;
t3233 = t3207 * t3288 + t3209 * t3286 + t3211 * t3284;
t3170 = t3179 ^ 2;
t3169 = t3178 ^ 2;
t3168 = t3177 ^ 2;
t3167 = t3176 ^ 2;
t3166 = t3175 ^ 2;
t3165 = t3174 ^ 2;
t3119 = (t3474 * t3584 - t3339) * t3145;
t3118 = (t3481 * t3584 - t3341) * t3143;
t3117 = (t3488 * t3584 - t3343) * t3141;
t3116 = (-t3338 - 0.2e1 * t3185) * t3512;
t3115 = (-t3340 - 0.2e1 * t3184) * t3519;
t3114 = (-t3342 - 0.2e1 * t3183) * t3526;
t3096 = (-t3212 * t3254 - t3217 * t3338) * t3145;
t3095 = (-t3210 * t3255 - t3215 * t3340) * t3143;
t3094 = (-t3208 * t3256 - t3213 * t3342) * t3141;
t3092 = (0.2e1 * t3113 + t3326) * t3145;
t3091 = (0.2e1 * t3112 - t3332) * t3145;
t3090 = (0.2e1 * t3111 + t3328) * t3143;
t3089 = (0.2e1 * t3110 - t3334) * t3143;
t3088 = (0.2e1 * t3109 + t3330) * t3141;
t3087 = (0.2e1 * t3108 - t3336) * t3141;
t3086 = (t3369 * t3585 - t3344) * t3145;
t3085 = (t3375 * t3584 - t3346) * t3145;
t3084 = (t3371 * t3585 - t3348) * t3143;
t3083 = (t3377 * t3584 - t3350) * t3143;
t3082 = (t3373 * t3585 - t3352) * t3141;
t3081 = (t3379 * t3584 - t3354) * t3141;
t3080 = (t3368 * t3584 - t3345) * t3145;
t3079 = (t3374 * t3585 - t3347) * t3145;
t3078 = (t3370 * t3584 - t3349) * t3143;
t3077 = (t3376 * t3585 - t3351) * t3143;
t3076 = (t3372 * t3584 - t3353) * t3141;
t3075 = (t3378 * t3585 - t3355) * t3141;
t3065 = (t3242 * t3212 + t3339) * t3145;
t3064 = (t3243 * t3210 + t3341) * t3143;
t3063 = (t3244 * t3208 + t3343) * t3141;
t3056 = t3105 + (-t3356 - t3435) * t3145;
t3055 = t3104 + (-t3357 - t3437) * t3143;
t3054 = t3103 + (-t3358 - t3439) * t3141;
t3053 = -t3105 + (0.2e1 * t3356 + t3435) * t3145;
t3052 = -t3104 + (0.2e1 * t3357 + t3437) * t3143;
t3051 = -t3103 + (0.2e1 * t3358 + t3439) * t3141;
t3050 = (t3496 * t3254 - t3345) * t3145;
t3049 = (-t3254 * t3502 - t3347) * t3145;
t3048 = (t3498 * t3255 - t3349) * t3143;
t3047 = (-t3255 * t3504 - t3351) * t3143;
t3046 = (t3500 * t3256 - t3353) * t3141;
t3045 = (-t3256 * t3506 - t3355) * t3141;
t3044 = -t3555 + (t3529 - 0.2e1 * t3574) * t3145;
t3043 = -t3556 + (t3531 - 0.2e1 * t3575) * t3143;
t3042 = -t3557 + (t3533 - 0.2e1 * t3576) * t3141;
t3041 = (-t3242 * t3496 + t3344) * t3145;
t3040 = (t3242 * t3502 + t3346) * t3145;
t3039 = (-t3243 * t3498 + t3348) * t3143;
t3038 = (t3243 * t3504 + t3350) * t3143;
t3037 = (-t3244 * t3500 + t3352) * t3141;
t3036 = (t3244 * t3506 + t3354) * t3141;
t3035 = ((-t3125 * t3228 + t3435) * pkin(2) + (t3128 * t3456 + (t3128 - t3574) * qJ(3,1)) * t3217) * t3145;
t3034 = ((-t3124 * t3225 + t3437) * pkin(2) + (t3127 * t3457 + (t3127 - t3575) * qJ(3,2)) * t3215) * t3143;
t3033 = ((-t3123 * t3222 + t3439) * pkin(2) + (t3126 * t3458 + (t3126 - t3576) * qJ(3,3)) * t3213) * t3141;
t3026 = -t3062 + (-t3327 + 0.2e1 * t3443) * t3145;
t3025 = -t3061 + (t3333 + 0.2e1 * t3444) * t3145;
t3024 = -t3060 + (-t3329 + 0.2e1 * t3445) * t3143;
t3023 = -t3059 + (t3335 + 0.2e1 * t3446) * t3143;
t3022 = -t3058 + (-t3331 + 0.2e1 * t3447) * t3141;
t3021 = -t3057 + (t3337 + 0.2e1 * t3448) * t3141;
t3020 = t3062 + (t3327 - t3443) * t3145;
t3019 = t3061 + (-t3333 - t3444) * t3145;
t3018 = t3060 + (t3329 - t3445) * t3143;
t3017 = t3059 + (-t3335 - t3446) * t3143;
t3016 = t3058 + (t3331 - t3447) * t3141;
t3015 = t3057 + (-t3337 - t3448) * t3141;
t3014 = -pkin(5) * t3555 + (pkin(5) * t3529 - t3212 * t3586) * t3145;
t3013 = -pkin(5) * t3556 + (pkin(5) * t3531 - t3210 * t3587) * t3143;
t3012 = -pkin(5) * t3557 + (pkin(5) * t3533 - t3208 * t3588) * t3141;
t3011 = -t3558 + (t3496 * t3582 + t3538) * t3145;
t3010 = -t3559 + (t3502 * t3583 + t3541) * t3145;
t3009 = -t3560 + (t3498 * t3582 + t3544) * t3143;
t3008 = -t3561 + (t3504 * t3583 + t3547) * t3143;
t3007 = -t3562 + (t3500 * t3582 + t3550) * t3141;
t3006 = -t3563 + (t3506 * t3583 + t3553) * t3141;
t3003 = (t3113 * t3456 + (t3113 + t3326) * qJ(3,1) + (-t3071 * t3228 - t3327) * pkin(2)) * t3145;
t3002 = (t3112 * t3456 + (t3112 - t3332) * qJ(3,1) + (-t3070 * t3228 + t3333) * pkin(2)) * t3145;
t3001 = (t3111 * t3457 + (t3111 + t3328) * qJ(3,2) + (-t3069 * t3225 - t3329) * pkin(2)) * t3143;
t3000 = (t3110 * t3457 + (t3110 - t3334) * qJ(3,2) + (-t3068 * t3225 + t3335) * pkin(2)) * t3143;
t2999 = (t3109 * t3458 + (t3109 + t3330) * qJ(3,3) + (-t3067 * t3222 - t3331) * pkin(2)) * t3141;
t2998 = (t3108 * t3458 + (t3108 - t3336) * qJ(3,3) + (-t3066 * t3222 + t3337) * pkin(2)) * t3141;
t2993 = -pkin(5) * t3558 + (pkin(5) * t3538 + t3586 * t3496) * t3145;
t2992 = -pkin(5) * t3560 + (pkin(5) * t3544 + t3587 * t3498) * t3143;
t2991 = -pkin(5) * t3562 + (pkin(5) * t3550 + t3588 * t3500) * t3141;
t2990 = -pkin(5) * t3559 + (pkin(5) * t3541 - t3502 * t3586) * t3145;
t2989 = -pkin(5) * t3561 + (pkin(5) * t3547 - t3504 * t3587) * t3143;
t2988 = -pkin(5) * t3563 + (pkin(5) * t3553 - t3506 * t3588) * t3141;
t1 = [(t3168 * t3523 + t3169 * t3516 + t3170 * t3509) * MDP(1) + (t3168 * t3401 + t3169 * t3393 + t3170 * t3385) * MDP(4) + (t3109 ^ 2 * t3521 + t3111 ^ 2 * t3514 + t3113 ^ 2 * t3507) * MDP(8) + (-t3067 * t3420 - t3069 * t3418 - t3071 * t3416) * MDP(11) + (t3067 * t3281 + t3069 * t3276 + t3071 * t3271 + t3299 * t3539 + t3308 * t3545 + t3317 * t3551) * MDP(12) + MDP(15) + (t3168 * t3315 + t3169 * t3306 + t3170 * t3297) * t3581 + 0.2e1 * t3235 * MDP(6) + 0.2e1 * t3234 * MDP(7) + ((t3020 * t3071 * MDP(14) + (MDP(11) * t3026 + MDP(13) * t3092 + MDP(14) * t3003) * t3113) * t3228 + (MDP(10) * t3086 + MDP(11) * t3050 + MDP(12) * t3011 + MDP(13) * t3041 + MDP(14) * t2993 + MDP(9) * t3080) * t3496) * t3145 + ((t3018 * t3069 * MDP(14) + (MDP(11) * t3024 + MDP(13) * t3090 + MDP(14) * t3001) * t3111) * t3225 + (MDP(10) * t3084 + MDP(11) * t3048 + MDP(12) * t3009 + MDP(13) * t3039 + MDP(14) * t2992 + MDP(9) * t3078) * t3498) * t3143 + ((t3016 * t3067 * MDP(14) + (MDP(11) * t3022 + MDP(13) * t3088 + MDP(14) * t2999) * t3109) * t3222 + (MDP(10) * t3082 + MDP(11) * t3046 + MDP(12) * t3007 + MDP(13) * t3037 + MDP(14) * t2991 + MDP(9) * t3076) * t3500) * t3141 + (-t3234 * MDP(10) - t3235 * MDP(9)) * pkin(5); (t3075 * t3402 + t3077 * t3394 + t3079 * t3386 + (t3109 * t3283 + t3111 * t3278 + t3113 * t3273) * pkin(5)) * MDP(9) + (t3081 * t3402 + t3083 * t3394 + t3085 * t3386 + (t3109 * t3282 + t3111 * t3277 + t3113 * t3272) * pkin(5)) * MDP(10) + (-t3067 * t3421 - t3069 * t3419 - t3071 * t3417 + (t3025 * t3537 + t3049 * t3496) * t3145 + (t3023 * t3543 + t3047 * t3498) * t3143 + (t3021 * t3549 + t3045 * t3500) * t3141) * MDP(11) + ((t3179 * t3145 * t3010 + t3176 * t3248) * t3218 + (t3178 * t3143 * t3008 + t3175 * t3249) * t3216 + (t3177 * t3141 * t3006 + t3174 * t3250) * t3214) * MDP(12) + ((t3040 * t3496 + t3091 * t3537) * t3145 + (t3038 * t3498 + t3089 * t3543) * t3143 + (t3036 * t3500 + t3087 * t3549) * t3141) * MDP(13) + ((t2990 * t3496 + (t3002 * t3113 + t3019 * t3071) * t3228) * t3145 + (t2989 * t3498 + (t3000 * t3111 + t3017 * t3069) * t3225) * t3143 + (t2988 * t3500 + (t2998 * t3109 + t3015 * t3067) * t3222) * t3141) * MDP(14) + t3262; (t3114 * t3402 + t3115 * t3394 + t3116 * t3386 + (t3109 * t3314 + t3111 * t3305 + t3113 * t3296) * pkin(5)) * MDP(9) + (t3117 * t3402 + t3118 * t3394 + t3119 * t3386 + (t3109 * t3312 + t3111 * t3303 + t3113 * t3294) * pkin(5)) * MDP(10) + (-t3067 * t3324 - t3069 * t3322 - t3071 * t3320 + (t3053 * t3537 + t3096 * t3496) * t3145 + (t3052 * t3543 + t3095 * t3498) * t3143 + (t3051 * t3549 + t3094 * t3500) * t3141) * MDP(11) + (t3042 * t3402 + t3043 * t3394 + t3044 * t3386 + t3208 * t3250 + t3210 * t3249 + t3212 * t3248) * MDP(12) + ((t3065 * t3496 + t3113 * t3534) * t3145 + (t3064 * t3498 + t3111 * t3535) * t3143 + (t3063 * t3500 + t3109 * t3536) * t3141) * MDP(13) + ((t3014 * t3496 + (t3035 * t3113 + t3056 * t3071) * t3228) * t3145 + (t3013 * t3498 + (t3034 * t3111 + t3055 * t3069) * t3225) * t3143 + (t3012 * t3500 + (t3033 * t3109 + t3054 * t3067) * t3222) * t3141) * MDP(14) + t3260; (-t3076 * t3403 - t3078 * t3395 - t3080 * t3387 + (-t3108 * t3281 - t3110 * t3276 - t3112 * t3271) * pkin(5)) * MDP(9) + (-t3082 * t3403 - t3084 * t3395 - t3086 * t3387 + (-t3108 * t3280 - t3110 * t3275 - t3112 * t3270) * pkin(5)) * MDP(10) + (-t3066 * t3420 - t3068 * t3418 - t3070 * t3416 + (t3026 * t3540 - t3050 * t3502) * t3145 + (t3024 * t3546 - t3048 * t3504) * t3143 + (t3022 * t3552 - t3046 * t3506) * t3141) * MDP(11) + ((-t3176 * t3145 * t3011 + t3266 * t3179 * t3508) * t3218 + (-t3175 * t3143 * t3009 + t3267 * t3178 * t3515) * t3216 + (-t3174 * t3141 * t3007 + t3268 * t3177 * t3522) * t3214) * MDP(12) + ((-t3041 * t3502 + t3092 * t3540) * t3145 + (-t3039 * t3504 + t3090 * t3546) * t3143 + (-t3037 * t3506 + t3088 * t3552) * t3141) * MDP(13) + ((-t2993 * t3502 + (t3003 * t3112 + t3020 * t3070) * t3228) * t3145 + (-t2992 * t3504 + (t3001 * t3110 + t3018 * t3068) * t3225) * t3143 + (-t2991 * t3506 + (t2999 * t3108 + t3016 * t3066) * t3222) * t3141) * MDP(14) + t3262; (t3165 * t3523 + t3166 * t3516 + t3167 * t3509) * MDP(1) + (t3165 * t3401 + t3166 * t3393 + t3167 * t3385) * MDP(4) + (t3108 ^ 2 * t3521 + t3110 ^ 2 * t3514 + t3112 ^ 2 * t3507) * MDP(8) + (-t3066 * t3421 - t3068 * t3419 - t3070 * t3417) * MDP(11) + (-t3066 * t3283 - t3068 * t3278 - t3070 * t3273 - t3300 * t3542 - t3309 * t3548 - t3318 * t3554) * MDP(12) + MDP(15) + (t3165 * t3315 + t3166 * t3306 + t3167 * t3297) * t3581 + t3237 * t3593 + t3236 * t3592 + ((t3019 * t3070 * MDP(14) + (MDP(11) * t3025 + MDP(13) * t3091 + MDP(14) * t3002) * t3112) * t3228 + (-MDP(10) * t3085 - MDP(11) * t3049 - MDP(12) * t3010 - MDP(13) * t3040 - MDP(14) * t2990 - MDP(9) * t3079) * t3502) * t3145 + ((t3017 * t3068 * MDP(14) + (MDP(11) * t3023 + MDP(13) * t3089 + MDP(14) * t3000) * t3110) * t3225 + (-MDP(10) * t3083 - MDP(11) * t3047 - MDP(12) * t3008 - MDP(13) * t3038 - MDP(14) * t2989 - MDP(9) * t3077) * t3504) * t3143 + ((t3015 * t3066 * MDP(14) + (MDP(11) * t3021 + MDP(13) * t3087 + MDP(14) * t2998) * t3108) * t3222 + (-MDP(10) * t3081 - MDP(11) * t3045 - MDP(12) * t3006 - MDP(13) * t3036 - MDP(14) * t2988 - MDP(9) * t3075) * t3506) * t3141 + (MDP(10) * t3236 + MDP(9) * t3237) * pkin(5); (-t3114 * t3403 - t3115 * t3395 - t3116 * t3387 + (t3108 * t3314 + t3110 * t3305 + t3112 * t3296) * pkin(5)) * MDP(9) + (-t3117 * t3403 - t3118 * t3395 - t3119 * t3387 + (t3108 * t3312 + t3110 * t3303 + t3112 * t3294) * pkin(5)) * MDP(10) + (-t3066 * t3324 - t3068 * t3322 - t3070 * t3320 + (t3053 * t3540 - t3096 * t3502) * t3145 + (t3052 * t3546 - t3095 * t3504) * t3143 + (t3051 * t3552 - t3094 * t3506) * t3141) * MDP(11) + (-t3042 * t3403 - t3043 * t3395 - t3044 * t3387 - t3266 * t3381 - t3267 * t3389 - t3268 * t3397) * MDP(12) + ((-t3065 * t3502 + t3112 * t3534) * t3145 + (-t3064 * t3504 + t3110 * t3535) * t3143 + (-t3063 * t3506 + t3108 * t3536) * t3141) * MDP(13) + ((-t3014 * t3502 + (t3035 * t3112 + t3056 * t3070) * t3228) * t3145 + (-t3013 * t3504 + (t3034 * t3110 + t3055 * t3068) * t3225) * t3143 + (-t3012 * t3506 + (t3033 * t3108 + t3054 * t3066) * t3222) * t3141) * MDP(14) + t3261; (-t3076 * t3527 - t3078 * t3520 - t3080 * t3513 + (-t3177 * t3265 - t3178 * t3264 - t3179 * t3263) * pkin(5)) * MDP(9) + (-t3082 * t3527 - t3084 * t3520 - t3086 * t3513 + (-t3177 * t3289 - t3178 * t3287 - t3179 * t3285) * pkin(5)) * MDP(10) + (-t3109 * t3415 - t3111 * t3414 - t3113 * t3413 + (t3026 * t3404 - t3050 * t3212) * t3145 + (t3024 * t3407 - t3048 * t3210) * t3143 + (t3022 * t3410 - t3046 * t3208) * t3141) * MDP(11) + (-t3007 * t3527 - t3009 * t3520 - t3011 * t3513 + t3257 * t3299 + t3258 * t3308 + t3259 * t3317) * MDP(12) + ((-t3041 * t3212 + t3092 * t3404) * t3145 + (-t3039 * t3210 + t3090 * t3407) * t3143 + (-t3037 * t3208 + t3088 * t3410) * t3141) * MDP(13) + ((-t2993 * t3212 + (t3003 * t3528 + t3020 * t3125) * t3228) * t3145 + (-t2992 * t3210 + (t3001 * t3530 + t3018 * t3124) * t3225) * t3143 + (-t2991 * t3208 + (t2999 * t3532 + t3016 * t3123) * t3222) * t3141) * MDP(14) + t3260; (-t3075 * t3527 - t3077 * t3520 - t3079 * t3513 + (t3174 * t3265 + t3175 * t3264 + t3176 * t3263) * pkin(5)) * MDP(9) + (-t3081 * t3527 - t3083 * t3520 - t3085 * t3513 + (t3174 * t3289 + t3175 * t3287 + t3176 * t3285) * pkin(5)) * MDP(10) + (-t3108 * t3415 - t3110 * t3414 - t3112 * t3413 + (t3025 * t3404 - t3049 * t3212) * t3145 + (t3023 * t3407 - t3047 * t3210) * t3143 + (t3021 * t3410 - t3045 * t3208) * t3141) * MDP(11) + (-t3006 * t3527 - t3008 * t3520 - t3010 * t3513 - t3257 * t3300 - t3258 * t3309 - t3259 * t3318) * MDP(12) + ((-t3040 * t3212 + t3091 * t3404) * t3145 + (-t3038 * t3210 + t3089 * t3407) * t3143 + (-t3036 * t3208 + t3087 * t3410) * t3141) * MDP(13) + ((-t2990 * t3212 + (t3002 * t3528 + t3019 * t3125) * t3228) * t3145 + (-t2989 * t3210 + (t3000 * t3530 + t3017 * t3124) * t3225) * t3143 + (-t2988 * t3208 + (t2998 * t3532 + t3015 * t3123) * t3222) * t3141) * MDP(14) + t3261; (t3510 + t3517 + t3524) * MDP(1) + (t3192 * t3524 + t3194 * t3517 + t3196 * t3510) * MDP(4) + (t3126 ^ 2 * t3198 * t3521 + t3127 ^ 2 * t3200 * t3514 + t3128 ^ 2 * t3202 * t3507) * MDP(8) + (-t3123 * t3324 - t3124 * t3322 - t3125 * t3320) * MDP(11) + (-t3123 * t3314 - t3124 * t3305 - t3125 * t3296 - t3150 * t3288 - t3151 * t3286 - t3152 * t3284) * MDP(12) + MDP(15) + (t3193 * t3400 + t3195 * t3392 + t3197 * t3384) * t3581 + t3233 * t3593 + t3238 * t3592 + ((t3056 * t3125 * MDP(14) + (MDP(11) * t3053 + MDP(13) * t3122 + MDP(14) * t3035) * t3528) * t3228 + (-MDP(10) * t3119 - MDP(11) * t3096 - MDP(12) * t3044 - MDP(13) * t3065 - MDP(14) * t3014 - MDP(9) * t3116) * t3212) * t3145 + ((t3055 * t3124 * MDP(14) + (MDP(11) * t3052 + MDP(13) * t3121 + MDP(14) * t3034) * t3530) * t3225 + (-MDP(10) * t3118 - MDP(11) * t3095 - MDP(12) * t3043 - MDP(13) * t3064 - MDP(14) * t3013 - MDP(9) * t3115) * t3210) * t3143 + ((t3054 * t3123 * MDP(14) + (MDP(11) * t3051 + MDP(13) * t3120 + MDP(14) * t3033) * t3532) * t3222 + (-MDP(10) * t3117 - MDP(11) * t3094 - MDP(12) * t3042 - MDP(13) * t3063 - MDP(14) * t3012 - MDP(9) * t3114) * t3208) * t3141 + (MDP(10) * t3238 + MDP(9) * t3233) * pkin(5);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
