% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:23
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V2G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:21:43
% EndTime: 2020-08-06 19:22:00
% DurationCPUTime: 18.40s
% Computational Cost: add. (16182->704), mult. (20970->1422), div. (2340->12), fcn. (16875->18), ass. (0->554)
t934 = sin(qJ(2,1));
t896 = t934 * qJ(3,1);
t1297 = t896 + pkin(1);
t940 = cos(qJ(2,1));
t1319 = t1297 * t940;
t932 = sin(qJ(2,2));
t895 = t932 * qJ(3,2);
t1298 = t895 + pkin(1);
t938 = cos(qJ(2,2));
t1318 = t1298 * t938;
t930 = sin(qJ(2,3));
t894 = t930 * qJ(3,3);
t1299 = t894 + pkin(1);
t936 = cos(qJ(2,3));
t1317 = t1299 * t936;
t925 = t940 ^ 2;
t980 = 0.2e1 * pkin(2) * t925 + 0.2e1 * t1319;
t923 = t938 ^ 2;
t981 = 0.2e1 * pkin(2) * t923 + 0.2e1 * t1318;
t921 = t936 ^ 2;
t982 = 0.2e1 * pkin(2) * t921 + 0.2e1 * t1317;
t943 = pkin(2) + pkin(3);
t1190 = t936 * t943;
t870 = t1190 + t1299;
t931 = sin(qJ(1,3));
t942 = pkin(5) - pkin(6);
t885 = t931 * t942;
t937 = cos(qJ(1,3));
t849 = t870 * t937 + t885;
t1260 = t849 * t921;
t1187 = t938 * t943;
t871 = t1187 + t1298;
t933 = sin(qJ(1,2));
t886 = t933 * t942;
t939 = cos(qJ(1,2));
t850 = t871 * t939 + t886;
t1258 = t850 * t923;
t1184 = t940 * t943;
t872 = t1184 + t1297;
t935 = sin(qJ(1,1));
t887 = t935 * t942;
t941 = cos(qJ(1,1));
t851 = t872 * t941 + t887;
t1256 = t851 * t925;
t927 = legFrame(3,2);
t897 = sin(t927);
t900 = cos(t927);
t1316 = t897 * t900;
t928 = legFrame(2,2);
t898 = sin(t928);
t901 = cos(t928);
t1315 = t898 * t901;
t929 = legFrame(1,2);
t899 = sin(t929);
t902 = cos(t929);
t1314 = t899 * t902;
t869 = 0.1e1 / t872 ^ 2;
t951 = 0.1e1 / qJ(3,1);
t1235 = t869 * t951;
t1219 = (qJ(3,1) + t943) * (-qJ(3,1) + t943);
t1094 = t935 * t1219;
t1306 = -0.2e1 * t943;
t1174 = qJ(3,1) * t1306;
t1222 = t902 * t943;
t1228 = t899 * t943;
t1295 = qJ(3,1) * t902;
t908 = pkin(1) * t935;
t1082 = -t941 * t942 + t908;
t1194 = t935 * qJ(3,1);
t854 = t1082 * t934 + t1194;
t1153 = t934 * t1194;
t859 = t1082 + 0.2e1 * t1153;
t863 = pkin(1) * qJ(3,1) - t934 * t1219;
t881 = pkin(1) * t934 + qJ(3,1);
t794 = (t902 * t1094 + t899 * t1174) * t925 + (t859 * t1222 - t863 * t899) * t940 + t854 * t1295 + t881 * t1228;
t1192 = t935 * t943;
t1196 = t934 * t943;
t1296 = qJ(3,1) * t899;
t860 = t1082 + t1153;
t834 = (t902 * t1192 - t1296) * t925 + (t899 * t1196 + t860 * t902) * t940 + t899 * t881;
t875 = -pkin(2) * t934 + qJ(3,1) * t940;
t977 = (t794 * t934 + t834 * t875) * t1235;
t793 = (-t899 * t1094 + t902 * t1174) * t925 + (-t859 * t1228 - t863 * t902) * t940 - t854 * t1296 + t881 * t1222;
t833 = (-t899 * t1192 - t1295) * t925 + (t902 * t1196 - t860 * t899) * t940 + t902 * t881;
t974 = (t793 * t934 + t833 * t875) * t1235;
t867 = 0.1e1 / t871 ^ 2;
t948 = 0.1e1 / qJ(3,2);
t1242 = t867 * t948;
t1220 = (qJ(3,2) + t943) * (-qJ(3,2) + t943);
t1095 = t933 * t1220;
t1173 = qJ(3,2) * t1306;
t1224 = t901 * t943;
t1230 = t898 * t943;
t1293 = qJ(3,2) * t901;
t907 = pkin(1) * t933;
t1083 = -t939 * t942 + t907;
t1202 = t933 * qJ(3,2);
t853 = t1083 * t932 + t1202;
t1152 = t932 * t1202;
t857 = t1083 + 0.2e1 * t1152;
t862 = pkin(1) * qJ(3,2) - t932 * t1220;
t880 = pkin(1) * t932 + qJ(3,2);
t792 = (t901 * t1095 + t898 * t1173) * t923 + (t857 * t1224 - t862 * t898) * t938 + t853 * t1293 + t880 * t1230;
t1200 = t933 * t943;
t1204 = t932 * t943;
t1294 = qJ(3,2) * t898;
t858 = t1083 + t1152;
t832 = (t901 * t1200 - t1294) * t923 + (t898 * t1204 + t858 * t901) * t938 + t898 * t880;
t874 = -pkin(2) * t932 + qJ(3,2) * t938;
t978 = (t792 * t932 + t832 * t874) * t1242;
t791 = (-t898 * t1095 + t901 * t1173) * t923 + (-t857 * t1230 - t862 * t901) * t938 - t853 * t1294 + t880 * t1224;
t831 = (-t898 * t1200 - t1293) * t923 + (t901 * t1204 - t858 * t898) * t938 + t901 * t880;
t975 = (t791 * t932 + t831 * t874) * t1242;
t865 = 0.1e1 / t870 ^ 2;
t945 = 0.1e1 / qJ(3,3);
t1249 = t865 * t945;
t1221 = (qJ(3,3) + t943) * (-qJ(3,3) + t943);
t1096 = t931 * t1221;
t1172 = qJ(3,3) * t1306;
t1226 = t900 * t943;
t1232 = t897 * t943;
t1291 = qJ(3,3) * t900;
t906 = pkin(1) * t931;
t1084 = -t937 * t942 + t906;
t1210 = t931 * qJ(3,3);
t852 = t1084 * t930 + t1210;
t1151 = t930 * t1210;
t855 = t1084 + 0.2e1 * t1151;
t861 = pkin(1) * qJ(3,3) - t930 * t1221;
t879 = pkin(1) * t930 + qJ(3,3);
t790 = (t900 * t1096 + t897 * t1172) * t921 + (t855 * t1226 - t861 * t897) * t936 + t852 * t1291 + t879 * t1232;
t1208 = t931 * t943;
t1212 = t930 * t943;
t1292 = qJ(3,3) * t897;
t856 = t1084 + t1151;
t830 = (t900 * t1208 - t1292) * t921 + (t897 * t1212 + t856 * t900) * t936 + t897 * t879;
t873 = -pkin(2) * t930 + qJ(3,3) * t936;
t979 = (t790 * t930 + t830 * t873) * t1249;
t789 = (-t897 * t1096 + t900 * t1172) * t921 + (-t855 * t1232 - t861 * t900) * t936 - t852 * t1292 + t879 * t1226;
t829 = (-t897 * t1208 - t1291) * t921 + (t900 * t1212 - t856 * t897) * t936 + t900 * t879;
t976 = (t789 * t930 + t829 * t873) * t1249;
t1178 = 0.2e1 * pkin(2);
t1179 = pkin(1) ^ 2 + pkin(5) ^ 2;
t1310 = -0.2e1 * pkin(1);
t950 = qJ(3,1) ^ 2;
t954 = pkin(2) ^ 2;
t1313 = t1178 * t1319 - t896 * t1310 + (-t950 + t954) * t925 + t1179 + t950;
t947 = qJ(3,2) ^ 2;
t1312 = t1178 * t1318 - t895 * t1310 + (-t947 + t954) * t923 + t1179 + t947;
t944 = qJ(3,3) ^ 2;
t1311 = t1178 * t1317 - t894 * t1310 + (-t944 + t954) * t921 + t1179 + t944;
t965 = (0.2e1 * t925 - 0.2e1) * qJ(3,1) - 0.2e1 * (pkin(2) * t940 + pkin(1)) * t934;
t966 = (0.2e1 * t923 - 0.2e1) * qJ(3,2) - 0.2e1 * (pkin(2) * t938 + pkin(1)) * t932;
t967 = (0.2e1 * t921 - 0.2e1) * qJ(3,3) - 0.2e1 * (pkin(2) * t936 + pkin(1)) * t930;
t1309 = 0.2e1 * pkin(1);
t1308 = -0.2e1 * pkin(5);
t1307 = 0.2e1 * pkin(5);
t1302 = pkin(5) * t931;
t1301 = pkin(5) * t933;
t1300 = pkin(5) * t935;
t1233 = t897 * t937;
t1275 = t829 * t936;
t864 = 0.1e1 / t870;
t1252 = t864 * t945;
t1165 = pkin(2) * t1252;
t780 = t789 * t1252;
t1284 = (t829 * t1165 - t780) * t930;
t729 = -t1284 + (t1233 * t1308 + t1275) * t864;
t1290 = t729 * t864;
t1227 = t900 * t937;
t1273 = t830 * t936;
t781 = t790 * t1252;
t1283 = (t830 * t1165 - t781) * t930;
t730 = -t1283 + (t1227 * t1307 + t1273) * t864;
t1289 = t730 * t864;
t1231 = t898 * t939;
t1271 = t831 * t938;
t866 = 0.1e1 / t871;
t1245 = t866 * t948;
t1164 = pkin(2) * t1245;
t782 = t791 * t1245;
t1282 = (t831 * t1164 - t782) * t932;
t731 = -t1282 + (t1231 * t1308 + t1271) * t866;
t1288 = t731 * t866;
t1225 = t901 * t939;
t1269 = t832 * t938;
t783 = t792 * t1245;
t1281 = (t832 * t1164 - t783) * t932;
t732 = -t1281 + (t1225 * t1307 + t1269) * t866;
t1287 = t732 * t866;
t1229 = t899 * t941;
t1267 = t833 * t940;
t868 = 0.1e1 / t872;
t1238 = t868 * t951;
t1163 = pkin(2) * t1238;
t784 = t793 * t1238;
t1280 = (t833 * t1163 - t784) * t934;
t733 = -t1280 + (t1229 * t1308 + t1267) * t868;
t1286 = t733 * t868;
t1223 = t902 * t941;
t1265 = t834 * t940;
t785 = t794 * t1238;
t1279 = (t834 * t1163 - t785) * t934;
t734 = -t1279 + (t1223 * t1307 + t1265) * t868;
t1285 = t734 * t868;
t1189 = t936 * t945;
t1139 = t849 * t1189;
t1081 = pkin(2) * t1139;
t1218 = t921 * t937;
t846 = t1218 * t1221 + ((0.2e1 * t894 + pkin(1)) * t937 + t885) * t1190 + qJ(3,3) * (t879 * t937 + t930 * t885);
t826 = t846 * t1252;
t1278 = (t1081 * t864 - t826) * t930;
t1186 = t938 * t948;
t1136 = t850 * t1186;
t1080 = pkin(2) * t1136;
t1217 = t923 * t939;
t847 = t1217 * t1220 + ((0.2e1 * t895 + pkin(1)) * t939 + t886) * t1187 + qJ(3,2) * (t880 * t939 + t932 * t886);
t827 = t847 * t1245;
t1277 = (t1080 * t866 - t827) * t932;
t1183 = t940 * t951;
t1133 = t851 * t1183;
t1079 = pkin(2) * t1133;
t1216 = t925 * t941;
t848 = t1216 * t1219 + ((0.2e1 * t896 + pkin(1)) * t941 + t887) * t1184 + qJ(3,1) * (t881 * t941 + t934 * t887);
t828 = t848 * t1238;
t1276 = (t1079 * t868 - t828) * t934;
t1274 = t829 * t945;
t1272 = t830 * t945;
t1270 = t831 * t948;
t1268 = t832 * t948;
t1266 = t833 * t951;
t1264 = t834 * t951;
t1253 = t864 * t936;
t843 = (0.2e1 * t849 - t1302) * t1253;
t1263 = t843 * t945;
t1246 = t866 * t938;
t844 = (0.2e1 * t850 - t1301) * t1246;
t1262 = t844 * t948;
t1239 = t868 * t940;
t845 = (0.2e1 * t851 - t1300) * t1239;
t1261 = t845 * t951;
t1259 = t849 * t936;
t1257 = t850 * t938;
t1255 = t851 * t940;
t1254 = t864 * t931;
t916 = t931 ^ 2;
t1251 = t865 * t916;
t922 = t937 ^ 2;
t1250 = t865 * t922;
t1248 = t865 / qJ(3,3) ^ 2;
t1247 = t866 * t933;
t918 = t933 ^ 2;
t1244 = t867 * t918;
t924 = t939 ^ 2;
t1243 = t867 * t924;
t1241 = t867 / qJ(3,2) ^ 2;
t1240 = t868 * t935;
t920 = t935 ^ 2;
t1237 = t869 * t920;
t926 = t941 ^ 2;
t1236 = t869 * t926;
t1234 = t869 / qJ(3,1) ^ 2;
t1215 = t930 * t931;
t1214 = t930 * t936;
t1213 = t930 * t937;
t1211 = t930 * t945;
t1209 = t931 * t936;
t1207 = t932 * t933;
t1206 = t932 * t938;
t1205 = t932 * t939;
t1203 = t932 * t948;
t1201 = t933 * t938;
t1199 = t934 * t935;
t1198 = t934 * t940;
t1197 = t934 * t941;
t1195 = t934 * t951;
t1193 = t935 * t940;
t1191 = t936 * t937;
t1188 = t938 * t939;
t1185 = t940 * t941;
t1182 = t945 * t954;
t1181 = t948 * t954;
t1180 = t951 * t954;
t1171 = pkin(2) * t1274;
t1170 = pkin(2) * t1272;
t1169 = pkin(2) * t1270;
t1168 = pkin(2) * t1268;
t1167 = pkin(2) * t1266;
t1166 = pkin(2) * t1264;
t1162 = pkin(5) * t1215;
t1161 = pkin(5) * t1211;
t1160 = pkin(5) * t1207;
t1159 = pkin(5) * t1203;
t1158 = pkin(5) * t1199;
t1157 = pkin(5) * t1195;
t1156 = pkin(5) * t1189;
t1155 = pkin(5) * t1186;
t1154 = pkin(5) * t1183;
t1150 = t790 * t1248;
t1149 = t792 * t1241;
t1148 = t794 * t1234;
t1147 = t830 * t1248;
t1146 = t832 * t1241;
t1145 = t834 * t1234;
t1144 = t846 * t1248;
t1143 = t847 * t1241;
t1142 = t848 * t1234;
t1141 = t849 * t1218;
t1140 = t945 * t1260;
t1138 = t850 * t1217;
t1137 = t948 * t1258;
t1135 = t851 * t1216;
t1134 = t951 * t1256;
t1132 = t864 * t1233;
t1131 = t864 * t1227;
t915 = t930 ^ 2;
t1130 = t915 * t1250;
t1129 = t865 * t1214;
t1128 = t865 * t1211;
t1127 = t865 * t931 * t937;
t1126 = t931 * t1249;
t1125 = t937 * t1249;
t1124 = t866 * t1231;
t1123 = t866 * t1225;
t917 = t932 ^ 2;
t1122 = t917 * t1243;
t1121 = t867 * t1206;
t1120 = t867 * t1203;
t1119 = t867 * t933 * t939;
t1118 = t933 * t1242;
t1117 = t939 * t1242;
t1116 = t868 * t1229;
t1115 = t868 * t1223;
t919 = t934 ^ 2;
t1114 = t919 * t1236;
t1113 = t869 * t1198;
t1112 = t869 * t1195;
t1111 = t869 * t935 * t941;
t1110 = t935 * t1235;
t1109 = t941 * t1235;
t1108 = t897 * t1213;
t1107 = t897 * t1191;
t1106 = t898 * t1205;
t1105 = t898 * t1188;
t1104 = t899 * t1197;
t1103 = t899 * t1185;
t1102 = t900 * t1213;
t1101 = t900 * t1191;
t1100 = t901 * t1205;
t1099 = t901 * t1188;
t1098 = t902 * t1197;
t1097 = t902 * t1185;
t1078 = t829 * t1161;
t1077 = t829 * t1156;
t1076 = t830 * t1161;
t1075 = t830 * t1156;
t1074 = t831 * t1159;
t1073 = t831 * t1155;
t1072 = t832 * t1159;
t1071 = t832 * t1155;
t1070 = t833 * t1157;
t1069 = t833 * t1154;
t1068 = t834 * t1157;
t1067 = t834 * t1154;
t1066 = pkin(5) * t1140;
t1065 = pkin(5) * t1137;
t1064 = pkin(5) * t1134;
t1063 = pkin(5) * t1108;
t1062 = pkin(5) * t1107;
t1061 = pkin(5) * t1106;
t1060 = pkin(5) * t1105;
t1059 = pkin(5) * t1104;
t1058 = pkin(5) * t1103;
t1057 = pkin(5) * t1102;
t1056 = pkin(5) * t1101;
t1055 = pkin(5) * t1100;
t1054 = pkin(5) * t1099;
t1053 = pkin(5) * t1098;
t1052 = pkin(5) * t1097;
t1051 = t865 * t1140;
t1050 = t1248 * t1259;
t1049 = t930 * t1139;
t1048 = t867 * t1137;
t1047 = t1241 * t1257;
t1046 = t932 * t1136;
t1045 = t869 * t1134;
t1044 = t1234 * t1255;
t1043 = t934 * t1133;
t1042 = t1250 * t1316;
t1041 = t915 * t1127;
t1040 = t922 * t1129;
t1039 = t930 * t1126;
t1038 = t930 * t1125;
t1037 = t936 * t1126;
t1036 = t936 * t1125;
t1035 = t1243 * t1315;
t1034 = t917 * t1119;
t1033 = t924 * t1121;
t1032 = t932 * t1118;
t1031 = t932 * t1117;
t1030 = t938 * t1118;
t1029 = t938 * t1117;
t1028 = t1236 * t1314;
t1027 = t919 * t1111;
t1026 = t926 * t1113;
t1025 = t934 * t1110;
t1024 = t934 * t1109;
t1023 = t940 * t1110;
t1022 = t940 * t1109;
t1018 = t937 * t1051;
t1017 = t865 * t1049;
t1016 = t939 * t1048;
t1015 = t867 * t1046;
t1014 = t941 * t1045;
t1013 = t869 * t1043;
t1012 = t897 * t1038;
t1011 = t897 * t1036;
t1010 = t900 * t1038;
t1009 = t900 * t1036;
t1008 = t1127 * t1214;
t1007 = t898 * t1031;
t1006 = t898 * t1029;
t1005 = t901 * t1031;
t1004 = t901 * t1029;
t1003 = t1119 * t1206;
t1002 = t899 * t1024;
t1001 = t899 * t1022;
t1000 = t902 * t1024;
t999 = t902 * t1022;
t998 = t1111 * t1198;
t991 = t937 * t1017;
t990 = t939 * t1015;
t989 = t941 * t1013;
t988 = t873 * t1259 + t846 * t930;
t987 = t874 * t1257 + t847 * t932;
t986 = t875 * t1255 + t848 * t934;
t973 = t988 * t1249;
t972 = t987 * t1242;
t971 = t986 * t1235;
t970 = (t829 * t900 - t830 * t897) * t1125;
t969 = (t831 * t901 - t832 * t898) * t1117;
t968 = (t833 * t902 - t834 * t899) * t1109;
t961 = t1045 * t935 + t1048 * t933 + t1051 * t931;
t960 = t1002 * t833 + t1007 * t831 + t1012 * t829;
t959 = t1001 * t833 + t1006 * t831 + t1011 * t829;
t958 = t1000 * t834 + t1005 * t832 + t1010 * t830;
t957 = t1004 * t832 + t1009 * t830 + t834 * t999;
t956 = t1013 * t935 + t1015 * t933 + t1017 * t931;
t893 = t902 ^ 2;
t892 = t901 ^ 2;
t891 = t900 ^ 2;
t890 = t899 ^ 2;
t889 = t898 ^ 2;
t888 = t897 ^ 2;
t842 = (t1199 * t1309 - t1064) * t868;
t841 = (t1207 * t1309 - t1065) * t866;
t840 = (t1215 * t1309 - t1066) * t864;
t839 = (-t851 * t1157 - 0.2e1 * t908) * t1239;
t838 = (-t850 * t1159 - 0.2e1 * t907) * t1246;
t837 = (-t849 * t1161 - 0.2e1 * t906) * t1253;
t836 = -t902 * t1111 - t901 * t1119 - t900 * t1127;
t835 = t899 * t1111 + t898 * t1119 + t897 * t1127;
t825 = -t1028 - t1035 - t1042;
t824 = -t1027 * t902 - t1034 * t901 - t1041 * t900;
t823 = t1027 * t899 + t1034 * t898 + t1041 * t897;
t822 = -t1028 * t919 - t1035 * t917 - t1042 * t915;
t821 = -0.2e1 * t1003 * t901 - 0.2e1 * t1008 * t900 - 0.2e1 * t902 * t998;
t820 = 0.2e1 * t1003 * t898 + 0.2e1 * t1008 * t897 + 0.2e1 * t899 * t998;
t819 = (-pkin(5) * t1043 - t935 * t980) * t868;
t818 = (-pkin(5) * t1046 - t933 * t981) * t866;
t817 = (-pkin(5) * t1049 - t931 * t982) * t864;
t816 = -0.2e1 * t1026 * t1314 - 0.2e1 * t1033 * t1315 - 0.2e1 * t1040 * t1316;
t815 = (0.2e1 * t834 + t1052) * t868;
t814 = (0.2e1 * t833 - t1058) * t868;
t813 = (0.2e1 * t832 + t1054) * t866;
t812 = (0.2e1 * t831 - t1060) * t866;
t811 = (0.2e1 * t830 + t1056) * t864;
t810 = (0.2e1 * t829 - t1062) * t864;
t809 = (t1098 * t1310 - t1067) * t868;
t808 = (t1104 * t1309 - t1069) * t868;
t807 = (t1100 * t1310 - t1071) * t866;
t806 = (t1106 * t1309 - t1073) * t866;
t805 = (t1102 * t1310 - t1075) * t864;
t804 = (t1108 * t1309 - t1077) * t864;
t803 = (t1097 * t1309 - t1068) * t868;
t802 = (t1103 * t1310 - t1070) * t868;
t801 = (t1099 * t1309 - t1072) * t866;
t800 = (t1105 * t1310 - t1074) * t866;
t799 = (t1101 * t1309 - t1076) * t864;
t798 = (t1107 * t1310 - t1078) * t864;
t788 = (t935 * t965 + t1064) * t868;
t787 = (t933 * t966 + t1065) * t866;
t786 = (t931 * t967 + t1066) * t864;
t779 = t828 + (-t1079 - t1158) * t868;
t778 = t827 + (-t1080 - t1160) * t866;
t777 = t826 + (-t1081 - t1162) * t864;
t776 = -t828 + (0.2e1 * t1079 + t1158) * t868;
t775 = -t827 + (0.2e1 * t1080 + t1160) * t866;
t774 = -t826 + (0.2e1 * t1081 + t1162) * t864;
t773 = (t1223 * t980 - t1068) * t868;
t772 = (-t980 * t1229 - t1070) * t868;
t771 = (t1225 * t981 - t1072) * t866;
t770 = (-t981 * t1231 - t1074) * t866;
t769 = (t1227 * t982 - t1076) * t864;
t768 = (-t982 * t1233 - t1078) * t864;
t767 = -t1276 + (t1256 - 0.2e1 * t1300) * t868;
t766 = -t1277 + (t1258 - 0.2e1 * t1301) * t866;
t765 = -t1278 + (t1260 - 0.2e1 * t1302) * t864;
t764 = (-t965 * t1223 + t1067) * t868;
t763 = (t965 * t1229 + t1069) * t868;
t762 = (-t966 * t1225 + t1071) * t866;
t761 = (t966 * t1231 + t1073) * t866;
t760 = (-t967 * t1227 + t1075) * t864;
t759 = (t967 * t1233 + t1077) * t864;
t758 = ((-t848 * t951 + t1158) * pkin(2) + (t851 * t1180 + (t851 - t1300) * qJ(3,1)) * t940) * t868;
t757 = ((-t847 * t948 + t1160) * pkin(2) + (t850 * t1181 + (t850 - t1301) * qJ(3,2)) * t938) * t866;
t756 = ((-t846 * t945 + t1162) * pkin(2) + (t849 * t1182 + (t849 - t1302) * qJ(3,3)) * t936) * t864;
t749 = -t785 + (-t1053 + 0.2e1 * t1166) * t868;
t748 = -t784 + (t1059 + 0.2e1 * t1167) * t868;
t747 = -t783 + (-t1055 + 0.2e1 * t1168) * t866;
t746 = -t782 + (t1061 + 0.2e1 * t1169) * t866;
t745 = -t781 + (-t1057 + 0.2e1 * t1170) * t864;
t744 = -t780 + (t1063 + 0.2e1 * t1171) * t864;
t743 = t785 + (t1053 - t1166) * t868;
t742 = t784 + (-t1059 - t1167) * t868;
t741 = t783 + (t1055 - t1168) * t866;
t740 = t782 + (-t1061 - t1169) * t866;
t739 = t781 + (t1057 - t1170) * t864;
t738 = t780 + (-t1063 - t1171) * t864;
t737 = -pkin(5) * t1276 + (pkin(5) * t1256 - t1313 * t935) * t868;
t736 = -pkin(5) * t1277 + (pkin(5) * t1258 - t1312 * t933) * t866;
t735 = -pkin(5) * t1278 + (pkin(5) * t1260 - t1311 * t931) * t864;
t728 = t1044 * t834 + t1047 * t832 + t1050 * t830;
t727 = t1044 * t833 + t1047 * t831 + t1050 * t829;
t726 = (t834 * t1180 + (t834 + t1052) * qJ(3,1) + (-t794 * t951 - t1053) * pkin(2)) * t868;
t725 = (t833 * t1180 + (t833 - t1058) * qJ(3,1) + (-t793 * t951 + t1059) * pkin(2)) * t868;
t724 = (t832 * t1181 + (t832 + t1054) * qJ(3,2) + (-t792 * t948 - t1055) * pkin(2)) * t866;
t723 = (t831 * t1181 + (t831 - t1060) * qJ(3,2) + (-t791 * t948 + t1061) * pkin(2)) * t866;
t722 = (t830 * t1182 + (t830 + t1056) * qJ(3,3) + (-t790 * t945 - t1057) * pkin(2)) * t864;
t721 = (t829 * t1182 + (t829 - t1062) * qJ(3,3) + (-t789 * t945 + t1063) * pkin(2)) * t864;
t720 = (t902 * t1135 - t834 * t1193) * t1235 + (t901 * t1138 - t832 * t1201) * t1242 + (t900 * t1141 - t830 * t1209) * t1249;
t719 = (-t899 * t1135 - t833 * t1193) * t1235 + (-t898 * t1138 - t831 * t1201) * t1242 + (-t897 * t1141 - t829 * t1209) * t1249;
t718 = (t851 * t1097 - t834 * t935) * t1112 + (t850 * t1099 - t832 * t933) * t1120 + (t849 * t1101 - t830 * t931) * t1128;
t717 = (-t851 * t1103 - t833 * t935) * t1112 + (-t850 * t1105 - t831 * t933) * t1120 + (-t849 * t1107 - t829 * t931) * t1128;
t716 = -pkin(5) * t1279 + (pkin(5) * t1265 + t1313 * t1223) * t868;
t715 = -pkin(5) * t1281 + (pkin(5) * t1269 + t1312 * t1225) * t866;
t714 = -pkin(5) * t1283 + (pkin(5) * t1273 + t1311 * t1227) * t864;
t713 = -pkin(5) * t1280 + (pkin(5) * t1267 - t1229 * t1313) * t868;
t712 = -pkin(5) * t1282 + (pkin(5) * t1271 - t1231 * t1312) * t866;
t711 = -pkin(5) * t1284 + (pkin(5) * t1275 - t1233 * t1311) * t864;
t710 = t833 * t1145 + t831 * t1146 + t829 * t1147;
t709 = t936 * t970 + t938 * t969 + t940 * t968;
t708 = t930 * t970 + t932 * t969 + t934 * t968;
t1 = [t893 * t1236 + t892 * t1243 + t891 * t1250, 0, 0, t1114 * t893 + t1122 * t892 + t1130 * t891, 0.2e1 * t1026 * t893 + 0.2e1 * t1033 * t892 + 0.2e1 * t1040 * t891, 0.2e1 * t958, 0.2e1 * t957, t1234 * t834 ^ 2 + t1241 * t832 ^ 2 + t1248 * t830 ^ 2, -pkin(5) * t958 + t1115 * t803 + t1123 * t801 + t1131 * t799, -pkin(5) * t957 + t1115 * t809 + t1123 * t807 + t1131 * t805, t769 * t1131 + t771 * t1123 + t773 * t1115 + (t1238 * t749 - t1148) * t834 + (t1245 * t747 - t1149) * t832 + (t1252 * t745 - t1150) * t830, (t1285 + t977) * t1223 + (t1287 + t978) * t1225 + (t1289 + t979) * t1227, (t1223 * t764 + t1264 * t815) * t868 + (t1225 * t762 + t1268 * t813) * t866 + (t1227 * t760 + t1272 * t811) * t864, (t716 * t1223 + (t726 * t834 + t743 * t794) * t951) * t868 + (t715 * t1225 + (t724 * t832 + t741 * t792) * t948) * t866 + (t714 * t1227 + (t722 * t830 + t739 * t790) * t945) * t864, 1; t825, 0, 0, t822, t816, t708, t709, t710, t798 * t1131 + t800 * t1123 + t802 * t1115 + (t1002 * t834 + t1007 * t832 + t1012 * t830) * pkin(5), t804 * t1131 + t806 * t1123 + t808 * t1115 + (t1001 * t834 + t1006 * t832 + t1011 * t830) * pkin(5), -t829 * t1150 - t831 * t1149 - t833 * t1148 + (t1223 * t772 + t1264 * t748) * t868 + (t1225 * t770 + t1268 * t746) * t866 + (t1227 * t768 + t1272 * t744) * t864, (t1286 * t902 - t899 * t977) * t941 + (t1288 * t901 - t898 * t978) * t939 + (t1290 * t900 - t897 * t979) * t937, (t1223 * t763 + t1264 * t814) * t868 + (t1225 * t761 + t1268 * t812) * t866 + (t1227 * t759 + t1272 * t810) * t864, (t713 * t1223 + (t725 * t834 + t742 * t794) * t951) * t868 + (t712 * t1225 + (t723 * t832 + t740 * t792) * t948) * t866 + (t711 * t1227 + (t721 * t830 + t738 * t790) * t945) * t864, 0; t836, 0, 0, t824, t821, t718, t720, t728, t837 * t1131 + t838 * t1123 + t839 * t1115 + (t1025 * t834 + t1032 * t832 + t1039 * t830) * pkin(5), t840 * t1131 + t841 * t1123 + t842 * t1115 + (t1023 * t834 + t1030 * t832 + t1037 * t830) * pkin(5), -t790 * t1050 - t792 * t1047 - t794 * t1044 + (t1223 * t819 + t1264 * t776) * t868 + (t1225 * t818 + t1268 * t775) * t866 + (t1227 * t817 + t1272 * t774) * t864, t1115 * t767 + t1123 * t766 + t1131 * t765 - t931 * t979 - t933 * t978 - t935 * t977, (t1223 * t788 + t1261 * t834) * t868 + (t1225 * t787 + t1262 * t832) * t866 + (t1227 * t786 + t1263 * t830) * t864, (t737 * t1223 + (t758 * t834 + t779 * t794) * t951) * t868 + (t736 * t1225 + (t757 * t832 + t778 * t792) * t948) * t866 + (t735 * t1227 + (t756 * t830 + t777 * t790) * t945) * t864, 0; t825, 0, 0, t822, t816, t708, t709, t710, -t799 * t1132 - t801 * t1124 - t803 * t1116 + (-t1000 * t833 - t1005 * t831 - t1010 * t829) * pkin(5), -t805 * t1132 - t807 * t1124 - t809 * t1116 + (-t1004 * t831 - t1009 * t829 - t833 * t999) * pkin(5), -t789 * t1147 - t791 * t1146 - t793 * t1145 + (-t1229 * t773 + t1266 * t749) * t868 + (-t1231 * t771 + t1270 * t747) * t866 + (-t1233 * t769 + t1274 * t745) * t864, (-t1285 * t899 + t902 * t974) * t941 + (-t1287 * t898 + t901 * t975) * t939 + (-t1289 * t897 + t900 * t976) * t937, (-t1229 * t764 + t1266 * t815) * t868 + (-t1231 * t762 + t1270 * t813) * t866 + (-t1233 * t760 + t1274 * t811) * t864, (-t716 * t1229 + (t726 * t833 + t743 * t793) * t951) * t868 + (-t715 * t1231 + (t724 * t831 + t741 * t791) * t948) * t866 + (-t714 * t1233 + (t722 * t829 + t739 * t789) * t945) * t864, 0; t890 * t1236 + t889 * t1243 + t888 * t1250, 0, 0, t1114 * t890 + t1122 * t889 + t1130 * t888, 0.2e1 * t1026 * t890 + 0.2e1 * t1033 * t889 + 0.2e1 * t1040 * t888, -0.2e1 * t960, -0.2e1 * t959, t1234 * t833 ^ 2 + t1241 * t831 ^ 2 + t1248 * t829 ^ 2, pkin(5) * t960 - t1116 * t802 - t1124 * t800 - t1132 * t798, pkin(5) * t959 - t1116 * t808 - t1124 * t806 - t1132 * t804, -t768 * t1132 - t770 * t1124 - t772 * t1116 + (-t1234 * t793 + t1238 * t748) * t833 + (-t1241 * t791 + t1245 * t746) * t831 + (-t1248 * t789 + t1252 * t744) * t829, (-t974 - t1286) * t1229 + (-t975 - t1288) * t1231 + (-t976 - t1290) * t1233, (-t1229 * t763 + t1266 * t814) * t868 + (-t1231 * t761 + t1270 * t812) * t866 + (-t1233 * t759 + t1274 * t810) * t864, (-t713 * t1229 + (t725 * t833 + t742 * t793) * t951) * t868 + (-t712 * t1231 + (t723 * t831 + t740 * t791) * t948) * t866 + (-t711 * t1233 + (t721 * t829 + t738 * t789) * t945) * t864, 1; t835, 0, 0, t823, t820, t717, t719, t727, -t837 * t1132 - t838 * t1124 - t839 * t1116 + (t1025 * t833 + t1032 * t831 + t1039 * t829) * pkin(5), -t840 * t1132 - t841 * t1124 - t842 * t1116 + (t1023 * t833 + t1030 * t831 + t1037 * t829) * pkin(5), -t789 * t1050 - t791 * t1047 - t793 * t1044 + (-t1229 * t819 + t1266 * t776) * t868 + (-t1231 * t818 + t1270 * t775) * t866 + (-t1233 * t817 + t1274 * t774) * t864, -t1116 * t767 - t1124 * t766 - t1132 * t765 - t931 * t976 - t933 * t975 - t935 * t974, (-t1229 * t788 + t1261 * t833) * t868 + (-t1231 * t787 + t1262 * t831) * t866 + (-t1233 * t786 + t1263 * t829) * t864, (-t737 * t1229 + (t758 * t833 + t779 * t793) * t951) * t868 + (-t736 * t1231 + (t757 * t831 + t778 * t791) * t948) * t866 + (-t735 * t1233 + (t756 * t829 + t777 * t789) * t945) * t864, 0; t836, 0, 0, t824, t821, t718, t720, t728, -t799 * t1254 - t801 * t1247 - t803 * t1240 + (-t900 * t991 - t901 * t990 - t902 * t989) * pkin(5), -t805 * t1254 - t807 * t1247 - t809 * t1240 + (-t1014 * t902 - t1016 * t901 - t1018 * t900) * pkin(5), -t830 * t1144 - t832 * t1143 - t834 * t1142 + (t1133 * t749 - t773 * t935) * t868 + (t1136 * t747 - t771 * t933) * t866 + (t1139 * t745 - t769 * t931) * t864, t1109 * t902 * t986 + t1117 * t901 * t987 + t1125 * t900 * t988 - t1240 * t734 - t1247 * t732 - t1254 * t730, (t1133 * t815 - t764 * t935) * t868 + (t1136 * t813 - t762 * t933) * t866 + (t1139 * t811 - t760 * t931) * t864, (-t716 * t935 + (t1255 * t726 + t743 * t848) * t951) * t868 + (-t715 * t933 + (t1257 * t724 + t741 * t847) * t948) * t866 + (-t714 * t931 + (t1259 * t722 + t739 * t846) * t945) * t864, 0; t835, 0, 0, t823, t820, t717, t719, t727, -t798 * t1254 - t800 * t1247 - t802 * t1240 + (t897 * t991 + t898 * t990 + t899 * t989) * pkin(5), -t804 * t1254 - t806 * t1247 - t808 * t1240 + (t1014 * t899 + t1016 * t898 + t1018 * t897) * pkin(5), -t829 * t1144 - t831 * t1143 - t833 * t1142 + (t1133 * t748 - t772 * t935) * t868 + (t1136 * t746 - t770 * t933) * t866 + (t1139 * t744 - t768 * t931) * t864, -t1229 * t971 - t1231 * t972 - t1233 * t973 - t1240 * t733 - t1247 * t731 - t1254 * t729, (t1133 * t814 - t763 * t935) * t868 + (t1136 * t812 - t761 * t933) * t866 + (t1139 * t810 - t759 * t931) * t864, (-t713 * t935 + (t1255 * t725 + t742 * t848) * t951) * t868 + (-t712 * t933 + (t1257 * t723 + t740 * t847) * t948) * t866 + (-t711 * t931 + (t1259 * t721 + t738 * t846) * t945) * t864, 0; t1237 + t1244 + t1251, 0, 0, t919 * t1237 + t917 * t1244 + t915 * t1251, 0.2e1 * t1113 * t920 + 0.2e1 * t1121 * t918 + 0.2e1 * t1129 * t916, -0.2e1 * t956, -0.2e1 * t961, t1234 * t851 ^ 2 * t925 + t1241 * t850 ^ 2 * t923 + t1248 * t849 ^ 2 * t921, pkin(5) * t956 - t1240 * t839 - t1247 * t838 - t1254 * t837, pkin(5) * t961 - t1240 * t842 - t1247 * t841 - t1254 * t840, -t817 * t1254 - t818 * t1247 - t819 * t1240 + (t1238 * t776 - t1142) * t1255 + (t1245 * t775 - t1143) * t1257 + (t1252 * t774 - t1144) * t1259, (-t767 * t868 - t971) * t935 + (-t766 * t866 - t972) * t933 + (-t765 * t864 - t973) * t931, (t1133 * t845 - t788 * t935) * t868 + (t1136 * t844 - t787 * t933) * t866 + (t1139 * t843 - t786 * t931) * t864, (-t737 * t935 + (t1255 * t758 + t779 * t848) * t951) * t868 + (-t736 * t933 + (t1257 * t757 + t778 * t847) * t948) * t866 + (-t735 * t931 + (t1259 * t756 + t777 * t846) * t945) * t864, 1;];
tau_reg  = t1;
