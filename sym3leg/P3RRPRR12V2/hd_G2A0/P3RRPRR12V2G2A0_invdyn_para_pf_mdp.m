% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR12V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:23
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR12V2G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G2A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:22:34
% EndTime: 2020-08-06 19:23:01
% DurationCPUTime: 27.71s
% Computational Cost: add. (263442->794), mult. (352602->1303), div. (15066->12), fcn. (187377->18), ass. (0->470)
t2633 = xDP(2);
t2636 = pkin(2) + pkin(3);
t2809 = (t2633 * t2636);
t2570 = pkin(1) * t2809;
t2634 = xDP(1);
t2808 = (t2634 * t2636);
t2571 = pkin(1) * t2808;
t2614 = legFrame(3,2);
t2587 = sin(t2614);
t2590 = cos(t2614);
t2626 = cos(qJ(2,3));
t2609 = t2626 ^ 2;
t2620 = sin(qJ(2,3));
t2621 = sin(qJ(1,3));
t2632 = xDP(3);
t2635 = pkin(5) - pkin(6);
t2581 = t2621 * t2635;
t2627 = cos(qJ(1,3));
t2697 = -t2587 * t2633 + t2590 * t2634;
t2817 = t2627 * t2635;
t2735 = pkin(1) * t2621 - t2817;
t2668 = (pkin(1) * t2627 + t2581) * t2632 + t2697 * t2735;
t2698 = t2587 * t2634 + t2590 * t2633;
t2830 = (qJ(3,3) + t2636) * (-qJ(3,3) + t2636);
t2742 = t2627 * t2830;
t2743 = t2621 * t2830;
t2784 = -2 * t2808;
t2785 = -2 * t2809;
t2813 = t2632 * t2627;
t2897 = t2621 * qJ(3,3);
t2744 = t2620 * t2830;
t2957 = -pkin(1) * qJ(3,3) + t2744;
t2584 = t2620 * qJ(3,3);
t2975 = 0.2e1 * t2584;
t2444 = ((qJ(3,3) * t2785 + t2634 * t2743) * t2590 + (qJ(3,3) * t2784 - t2633 * t2743) * t2587 + t2632 * t2742) * t2609 + (((t2621 * t2697 + t2813) * t2975 + t2668) * t2636 + t2957 * t2698) * t2626 + (t2668 * qJ(3,3) + t2570 * t2590 + t2571 * t2587) * t2620 - qJ(3,3) * ((-t2634 * t2897 - t2809) * t2590 + (t2633 * t2897 - t2808) * t2587 - qJ(3,3) * t2813);
t2572 = t2584 + pkin(1);
t2818 = t2626 * t2636;
t2549 = t2818 + t2572;
t2534 = 0.1e1 / t2549;
t2639 = 0.1e1 / qJ(3,3);
t2866 = t2534 * t2639;
t2441 = t2444 * t2866;
t2575 = pkin(1) * t2620 + qJ(3,3);
t2701 = t2572 * t2621 - t2817;
t2796 = t2572 * t2627 + t2581;
t2810 = t2632 * t2636;
t2465 = ((-qJ(3,3) * t2633 + t2621 * t2808) * t2590 + (-qJ(3,3) * t2634 - t2621 * t2809) * t2587 + t2627 * t2810) * t2609 + ((t2620 * t2809 + t2701 * t2634) * t2590 + (t2620 * t2808 - t2701 * t2633) * t2587 + t2796 * t2632) * t2626 + t2698 * t2575;
t2507 = -t2621 * t2632 + t2697 * t2627;
t2617 = xDDP(3);
t2618 = xDDP(2);
t2619 = xDDP(1);
t2535 = 0.1e1 / t2549 ^ 2;
t2865 = t2535 * t2639;
t2863 = t2534 * t2865;
t2747 = t2620 * t2863;
t2805 = t2636 * t2639;
t2826 = t2620 * t2636;
t2839 = t2590 * t2627;
t2848 = t2587 * t2627;
t2873 = t2507 * t2635;
t2874 = t2507 * t2535;
t2901 = qJ(3,3) * t2626;
t2405 = -t2441 * t2620 * t2874 + ((t2826 - t2901) * t2465 * t2863 - t2444 * t2747) * t2507 + (t2619 * t2839 - t2618 * t2848 - t2621 * t2617 - (t2873 + (-t2620 * t2805 + t2626) * t2465) * t2874) * t2534;
t2949 = 0.2e1 * t2405;
t2615 = legFrame(2,2);
t2588 = sin(t2615);
t2591 = cos(t2615);
t2628 = cos(qJ(2,2));
t2610 = t2628 ^ 2;
t2622 = sin(qJ(2,2));
t2623 = sin(qJ(1,2));
t2582 = t2623 * t2635;
t2629 = cos(qJ(1,2));
t2695 = -t2588 * t2633 + t2591 * t2634;
t2815 = t2629 * t2635;
t2734 = pkin(1) * t2623 - t2815;
t2667 = (pkin(1) * t2629 + t2582) * t2632 + t2695 * t2734;
t2696 = t2588 * t2634 + t2591 * t2633;
t2829 = (qJ(3,2) + t2636) * (-qJ(3,2) + t2636);
t2739 = t2629 * t2829;
t2740 = t2623 * t2829;
t2812 = t2632 * t2629;
t2896 = t2623 * qJ(3,2);
t2741 = t2622 * t2829;
t2958 = -pkin(1) * qJ(3,2) + t2741;
t2585 = t2622 * qJ(3,2);
t2974 = 0.2e1 * t2585;
t2445 = ((qJ(3,2) * t2785 + t2634 * t2740) * t2591 + (qJ(3,2) * t2784 - t2633 * t2740) * t2588 + t2632 * t2739) * t2610 + (((t2623 * t2695 + t2812) * t2974 + t2667) * t2636 + t2958 * t2696) * t2628 + (t2667 * qJ(3,2) + t2570 * t2591 + t2571 * t2588) * t2622 - qJ(3,2) * ((-t2634 * t2896 - t2809) * t2591 + (t2633 * t2896 - t2808) * t2588 - qJ(3,2) * t2812);
t2573 = t2585 + pkin(1);
t2816 = t2628 * t2636;
t2550 = t2816 + t2573;
t2537 = 0.1e1 / t2550;
t2642 = 0.1e1 / qJ(3,2);
t2862 = t2537 * t2642;
t2442 = t2445 * t2862;
t2576 = pkin(1) * t2622 + qJ(3,2);
t2700 = t2573 * t2623 - t2815;
t2795 = t2573 * t2629 + t2582;
t2466 = ((-qJ(3,2) * t2633 + t2623 * t2808) * t2591 + (-qJ(3,2) * t2634 - t2623 * t2809) * t2588 + t2629 * t2810) * t2610 + ((t2622 * t2809 + t2700 * t2634) * t2591 + (t2622 * t2808 - t2700 * t2633) * t2588 + t2795 * t2632) * t2628 + t2696 * t2576;
t2508 = -t2623 * t2632 + t2695 * t2629;
t2538 = 0.1e1 / t2550 ^ 2;
t2861 = t2538 * t2642;
t2859 = t2537 * t2861;
t2746 = t2622 * t2859;
t2804 = t2636 * t2642;
t2823 = t2622 * t2636;
t2836 = t2591 * t2629;
t2845 = t2588 * t2629;
t2870 = t2508 * t2635;
t2871 = t2508 * t2538;
t2906 = qJ(3,2) * t2628;
t2406 = -t2442 * t2622 * t2871 + ((t2823 - t2906) * t2466 * t2859 - t2445 * t2746) * t2508 + (t2619 * t2836 - t2618 * t2845 - t2623 * t2617 - (t2870 + (-t2622 * t2804 + t2628) * t2466) * t2871) * t2537;
t2948 = 0.2e1 * t2406;
t2616 = legFrame(1,2);
t2589 = sin(t2616);
t2592 = cos(t2616);
t2630 = cos(qJ(2,1));
t2611 = t2630 ^ 2;
t2624 = sin(qJ(2,1));
t2625 = sin(qJ(1,1));
t2583 = t2625 * t2635;
t2631 = cos(qJ(1,1));
t2693 = -t2589 * t2633 + t2592 * t2634;
t2814 = t2631 * t2635;
t2733 = pkin(1) * t2625 - t2814;
t2666 = (pkin(1) * t2631 + t2583) * t2632 + t2693 * t2733;
t2694 = t2589 * t2634 + t2592 * t2633;
t2828 = (qJ(3,1) + t2636) * (-qJ(3,1) + t2636);
t2736 = t2631 * t2828;
t2737 = t2625 * t2828;
t2811 = t2632 * t2631;
t2895 = t2625 * qJ(3,1);
t2738 = t2624 * t2828;
t2959 = -pkin(1) * qJ(3,1) + t2738;
t2586 = t2624 * qJ(3,1);
t2973 = 0.2e1 * t2586;
t2446 = ((qJ(3,1) * t2785 + t2634 * t2737) * t2592 + (qJ(3,1) * t2784 - t2633 * t2737) * t2589 + t2632 * t2736) * t2611 + (((t2625 * t2693 + t2811) * t2973 + t2666) * t2636 + t2959 * t2694) * t2630 + (t2666 * qJ(3,1) + t2570 * t2592 + t2571 * t2589) * t2624 - qJ(3,1) * ((-t2634 * t2895 - t2809) * t2592 + (t2633 * t2895 - t2808) * t2589 - qJ(3,1) * t2811);
t2574 = t2586 + pkin(1);
t2806 = t2636 * t2630;
t2551 = t2806 + t2574;
t2540 = 0.1e1 / t2551;
t2645 = 0.1e1 / qJ(3,1);
t2858 = t2540 * t2645;
t2443 = t2446 * t2858;
t2577 = pkin(1) * t2624 + qJ(3,1);
t2699 = t2574 * t2625 - t2814;
t2794 = t2574 * t2631 + t2583;
t2467 = ((-qJ(3,1) * t2633 + t2625 * t2808) * t2592 + (-qJ(3,1) * t2634 - t2625 * t2809) * t2589 + t2631 * t2810) * t2611 + ((t2624 * t2809 + t2699 * t2634) * t2592 + (t2624 * t2808 - t2699 * t2633) * t2589 + t2794 * t2632) * t2630 + t2694 * t2577;
t2509 = -t2625 * t2632 + t2693 * t2631;
t2541 = 0.1e1 / t2551 ^ 2;
t2857 = t2541 * t2645;
t2855 = t2540 * t2857;
t2745 = t2624 * t2855;
t2803 = t2636 * t2645;
t2820 = t2624 * t2636;
t2833 = t2592 * t2631;
t2842 = t2589 * t2631;
t2867 = t2509 * t2635;
t2868 = t2509 * t2541;
t2911 = qJ(3,1) * t2630;
t2407 = -t2443 * t2624 * t2868 + ((t2820 - t2911) * t2467 * t2855 - t2446 * t2745) * t2509 + (t2619 * t2833 - t2618 * t2842 - t2625 * t2617 - (t2867 + (-t2624 * t2803 + t2630) * t2467) * t2868) * t2540;
t2947 = 0.2e1 * t2407;
t2638 = qJ(3,3) ^ 2;
t2602 = pkin(1) ^ 2 + pkin(5) ^ 2;
t2720 = t2602 + (-0.2e1 * pkin(5) + pkin(6)) * pkin(6);
t2555 = t2638 + t2720;
t2789 = 0.2e1 * t2636;
t2768 = t2465 * t2866;
t2459 = pkin(2) * t2768;
t2427 = t2459 - t2441;
t2732 = pkin(3) * t2768;
t2420 = -t2732 - t2427;
t2875 = t2507 * t2534;
t2779 = qJ(3,3) * t2875;
t2969 = 0.2e1 * pkin(1);
t2802 = t2635 * t2420 + t2779 * t2969;
t2884 = t2465 * t2635;
t2408 = t2802 * t2620 + (t2626 * t2884 + (t2572 * t2626 * t2789 + t2609 * t2830 + t2555) * t2507) * t2534;
t2778 = t2620 * t2897;
t2523 = t2735 + t2778;
t2825 = t2621 * t2636;
t2903 = qJ(3,3) * t2590;
t2486 = (-t2587 * t2825 - t2903) * t2609 + (-t2523 * t2587 + t2590 * t2826) * t2626 + t2590 * t2575;
t2904 = qJ(3,3) * t2587;
t2487 = (t2590 * t2825 - t2904) * t2609 + (t2523 * t2590 + t2587 * t2826) * t2626 + t2587 * t2575;
t2510 = t2627 * t2818 + t2796;
t2680 = t2510 * t2617 * t2626 + t2486 * t2618 + t2487 * t2619;
t2756 = t2620 * t2873;
t2450 = (-t2465 * t2805 + t2756) * t2534;
t2759 = t2534 * t2873;
t2902 = qJ(3,3) * t2609;
t2704 = (-t2759 * t2902 + ((-pkin(3) * t2465 * t2639 + t2756) * t2534 - t2427) * t2818 + t2420 * t2572) * t2465 + (-t2450 * t2626 + t2572 * t2768) * t2444;
t2640 = 0.1e1 / qJ(3,3) ^ 2;
t2864 = t2535 * t2640;
t2351 = -t2704 * t2864 + (t2408 * t2626 * t2874 + t2680 * t2534) * t2639;
t2757 = t2507 * t2865;
t2726 = t2465 * t2757;
t2339 = pkin(5) * t2351 + t2726 * t2969;
t2984 = t2339 * t2620;
t2641 = qJ(3,2) ^ 2;
t2556 = t2641 + t2720;
t2766 = t2466 * t2862;
t2460 = pkin(2) * t2766;
t2429 = t2460 - t2442;
t2731 = pkin(3) * t2766;
t2421 = -t2731 - t2429;
t2872 = t2508 * t2537;
t2781 = qJ(3,2) * t2872;
t2801 = t2635 * t2421 + t2781 * t2969;
t2883 = t2466 * t2635;
t2409 = t2801 * t2622 + (t2628 * t2883 + (t2573 * t2628 * t2789 + t2610 * t2829 + t2556) * t2508) * t2537;
t2780 = t2622 * t2896;
t2525 = t2734 + t2780;
t2822 = t2623 * t2636;
t2908 = qJ(3,2) * t2591;
t2488 = (-t2588 * t2822 - t2908) * t2610 + (-t2525 * t2588 + t2591 * t2823) * t2628 + t2591 * t2576;
t2909 = qJ(3,2) * t2588;
t2489 = (t2591 * t2822 - t2909) * t2610 + (t2525 * t2591 + t2588 * t2823) * t2628 + t2588 * t2576;
t2511 = t2629 * t2816 + t2795;
t2679 = t2511 * t2617 * t2628 + t2488 * t2618 + t2489 * t2619;
t2752 = t2622 * t2870;
t2451 = (-t2466 * t2804 + t2752) * t2537;
t2755 = t2537 * t2870;
t2907 = qJ(3,2) * t2610;
t2703 = (-t2755 * t2907 + ((-pkin(3) * t2466 * t2642 + t2752) * t2537 - t2429) * t2816 + t2421 * t2573) * t2466 + (-t2451 * t2628 + t2573 * t2766) * t2445;
t2643 = 0.1e1 / qJ(3,2) ^ 2;
t2860 = t2538 * t2643;
t2352 = -t2703 * t2860 + (t2409 * t2628 * t2871 + t2679 * t2537) * t2642;
t2753 = t2508 * t2861;
t2725 = t2466 * t2753;
t2340 = t2352 * pkin(5) + t2725 * t2969;
t2983 = t2340 * t2622;
t2644 = qJ(3,1) ^ 2;
t2557 = t2644 + t2720;
t2764 = t2467 * t2858;
t2461 = pkin(2) * t2764;
t2431 = t2461 - t2443;
t2730 = pkin(3) * t2764;
t2422 = -t2730 - t2431;
t2869 = t2509 * t2540;
t2783 = qJ(3,1) * t2869;
t2800 = t2635 * t2422 + t2783 * t2969;
t2882 = t2467 * t2635;
t2410 = t2800 * t2624 + (t2630 * t2882 + (t2574 * t2630 * t2789 + t2611 * t2828 + t2557) * t2509) * t2540;
t2782 = t2624 * t2895;
t2527 = t2733 + t2782;
t2819 = t2625 * t2636;
t2913 = qJ(3,1) * t2592;
t2490 = (-t2589 * t2819 - t2913) * t2611 + (-t2527 * t2589 + t2592 * t2820) * t2630 + t2592 * t2577;
t2914 = qJ(3,1) * t2589;
t2491 = (t2592 * t2819 - t2914) * t2611 + (t2527 * t2592 + t2589 * t2820) * t2630 + t2589 * t2577;
t2512 = t2631 * t2806 + t2794;
t2678 = t2512 * t2617 * t2630 + t2490 * t2618 + t2491 * t2619;
t2748 = t2624 * t2867;
t2452 = (-t2467 * t2803 + t2748) * t2540;
t2751 = t2540 * t2867;
t2912 = qJ(3,1) * t2611;
t2702 = (-t2751 * t2912 + ((-pkin(3) * t2467 * t2645 + t2748) * t2540 - t2431) * t2806 + t2422 * t2574) * t2467 + (-t2452 * t2630 + t2574 * t2764) * t2446;
t2646 = 0.1e1 / qJ(3,1) ^ 2;
t2856 = t2541 * t2646;
t2353 = -t2702 * t2856 + (t2410 * t2630 * t2868 + t2678 * t2540) * t2645;
t2749 = t2509 * t2857;
t2724 = t2467 * t2749;
t2341 = t2353 * pkin(5) + t2724 * t2969;
t2982 = t2341 * t2624;
t2464 = t2467 ^ 2;
t2769 = t2464 * t2856;
t2916 = t2589 * g(2);
t2548 = g(1) * t2592 - t2916;
t2976 = g(3) * t2625 - t2548 * t2631;
t2970 = pkin(1) * t2947 - pkin(5) * t2769 + t2976;
t2981 = t2970 * t2624;
t2463 = t2466 ^ 2;
t2770 = t2463 * t2860;
t2917 = t2588 * g(2);
t2547 = g(1) * t2591 - t2917;
t2977 = g(3) * t2623 - t2547 * t2629;
t2971 = pkin(1) * t2948 - pkin(5) * t2770 + t2977;
t2980 = t2971 * t2622;
t2462 = t2465 ^ 2;
t2771 = t2462 * t2864;
t2918 = t2587 * g(2);
t2546 = g(1) * t2590 - t2918;
t2978 = g(3) * t2621 - t2546 * t2627;
t2972 = pkin(1) * t2949 - pkin(5) * t2771 + t2978;
t2979 = t2972 * t2620;
t2968 = 0.4e1 * t2609;
t2967 = 0.4e1 * t2610;
t2966 = 0.4e1 * t2611;
t2965 = 0.2e1 * t2620;
t2964 = 0.2e1 * t2622;
t2963 = 0.2e1 * t2624;
t2955 = -0.2e1 * qJ(3,1);
t2954 = -0.2e1 * qJ(3,2);
t2953 = -0.2e1 * qJ(3,3);
t2946 = -0.2e1 * t2609;
t2945 = -0.2e1 * t2610;
t2944 = -0.2e1 * t2611;
t2943 = 0.2e1 * t2626;
t2942 = 0.2e1 * t2628;
t2941 = 0.2e1 * t2630;
t2940 = -0.2e1 * t2636;
t2939 = pkin(2) * g(1);
t2938 = pkin(2) * g(2);
t2937 = pkin(5) * g(3);
t2933 = t2946 + 0.1e1;
t2932 = t2945 + 0.1e1;
t2931 = t2944 + 0.1e1;
t2929 = g(1) * t2621;
t2928 = g(1) * t2623;
t2927 = g(1) * t2625;
t2926 = t2351 * pkin(2);
t2925 = t2352 * pkin(2);
t2923 = t2353 * pkin(2);
t2915 = qJ(3,1) * t2407;
t2910 = qJ(3,2) * t2406;
t2905 = qJ(3,3) * t2405;
t2900 = t2351 * qJ(3,3);
t2899 = t2352 * qJ(3,2);
t2898 = t2353 * qJ(3,1);
t2402 = pkin(5) * t2405;
t2596 = g(3) * t2627;
t2504 = t2507 ^ 2;
t2881 = t2504 * t2535;
t2393 = pkin(1) * t2881 - t2402 + t2596;
t2390 = t2590 * t2929 - t2621 * t2918 + t2393;
t2893 = t2390 * t2620;
t2403 = pkin(5) * t2406;
t2597 = g(3) * t2629;
t2505 = t2508 ^ 2;
t2879 = t2505 * t2538;
t2394 = pkin(1) * t2879 - t2403 + t2597;
t2391 = t2591 * t2928 - t2623 * t2917 + t2394;
t2892 = t2391 * t2622;
t2404 = pkin(5) * t2407;
t2598 = g(3) * t2631;
t2506 = t2509 ^ 2;
t2877 = t2506 * t2541;
t2395 = pkin(1) * t2877 - t2404 + t2598;
t2392 = t2592 * t2927 - t2625 * t2916 + t2395;
t2891 = t2392 * t2624;
t2890 = t2405 * t2620;
t2889 = t2406 * t2622;
t2888 = t2407 * t2624;
t2887 = t2420 * t2636;
t2886 = t2421 * t2636;
t2885 = t2422 * t2636;
t2880 = t2504 * t2620;
t2878 = t2505 * t2622;
t2876 = t2506 * t2624;
t2543 = g(1) * t2587 + g(2) * t2590;
t2854 = t2543 * t2620;
t2853 = t2543 * t2626;
t2544 = g(1) * t2588 + g(2) * t2591;
t2852 = t2544 * t2622;
t2851 = t2544 * t2628;
t2545 = g(1) * t2589 + g(2) * t2592;
t2850 = t2545 * t2624;
t2849 = t2545 * t2630;
t2846 = t2587 * t2636;
t2843 = t2588 * t2636;
t2840 = t2589 * t2636;
t2837 = t2590 * t2636;
t2834 = t2591 * t2636;
t2831 = t2592 * t2636;
t2827 = t2620 * t2626;
t2824 = t2622 * t2628;
t2821 = t2624 * t2630;
t2807 = t2635 * t2636;
t2767 = t2465 * t2864;
t2432 = 0.2e1 * t2444 * t2767;
t2498 = pkin(2) * t2881;
t2799 = t2498 + t2432;
t2765 = t2466 * t2860;
t2433 = 0.2e1 * t2445 * t2765;
t2499 = pkin(2) * t2879;
t2798 = t2499 + t2433;
t2763 = t2467 * t2856;
t2434 = 0.2e1 * t2446 * t2763;
t2500 = pkin(2) * t2877;
t2797 = t2500 + t2434;
t2649 = pkin(2) ^ 2;
t2793 = -t2638 + t2649;
t2792 = -t2641 + t2649;
t2791 = -t2644 + t2649;
t2790 = -0.4e1 * pkin(1) * t2636;
t2788 = qJ(3,1) * t2940;
t2787 = qJ(3,2) * t2940;
t2786 = qJ(3,3) * t2940;
t2777 = (0.4e1 * t2459 - 0.2e1 * t2441) * t2875;
t2776 = t2427 * t2875;
t2775 = (0.4e1 * t2460 - 0.2e1 * t2442) * t2872;
t2774 = t2429 * t2872;
t2773 = (0.4e1 * t2461 - 0.2e1 * t2443) * t2869;
t2772 = t2431 * t2869;
t2762 = t2535 * t2880;
t2761 = t2538 * t2878;
t2760 = t2541 * t2876;
t2758 = t2465 * t2874;
t2754 = t2466 * t2871;
t2750 = t2467 * t2868;
t2516 = t2546 * t2621 + t2596;
t2517 = t2547 * t2623 + t2597;
t2518 = t2548 * t2625 + t2598;
t2480 = t2933 * t2881;
t2481 = t2932 * t2879;
t2482 = t2931 * t2877;
t2723 = t2504 * t2747;
t2722 = t2505 * t2746;
t2721 = t2506 * t2745;
t2719 = t2498 * t2946;
t2718 = t2499 * t2945;
t2717 = t2500 * t2944;
t2710 = MDP(12) * (-pkin(2) * t2620 + t2901) + MDP(6) * t2620;
t2709 = MDP(12) * (-pkin(2) * t2622 + t2906) + MDP(6) * t2622;
t2708 = MDP(12) * (-pkin(2) * t2624 + t2911) + MDP(6) * t2624;
t2707 = t2626 * t2723;
t2706 = t2628 * t2722;
t2705 = t2630 * t2721;
t2414 = -qJ(3,3) * t2465 * t2534 + t2887;
t2456 = -0.2e1 * t2459;
t2519 = t2735 * t2620 + t2897;
t2522 = t2735 + 0.2e1 * t2778;
t2474 = (-t2587 * t2743 + t2590 * t2786) * t2609 + (-t2522 * t2846 + t2590 * t2957) * t2626 - t2519 * t2904 + t2575 * t2837;
t2475 = (t2587 * t2786 + t2590 * t2743) * t2609 + (t2522 * t2837 + t2587 * t2957) * t2626 + t2519 * t2903 + t2575 * t2846;
t2492 = t2609 * t2742 + ((t2975 + pkin(1)) * t2627 + t2581) * t2818 + qJ(3,3) * (t2575 * t2627 + t2620 * t2581);
t2613 = t2636 ^ 2;
t2686 = -((-t2420 * t2620 * t2807 + (-t2507 * (0.3e1 * t2638 + t2720) * t2636 + (t2507 * t2790 - t2884) * t2584) * t2534) * t2626 - (t2555 * t2620 * t2875 + t2802) * qJ(3,3) + (t2635 * (t2441 + t2456 - 0.2e1 * t2732) * qJ(3,3) + (-(t2613 - 0.3e1 * t2638) * t2818 - 0.3e1 * (-t2638 / 0.3e1 + t2613) * t2584 + (t2638 - t2613) * t2969) * t2875) * t2609) * t2757 - ((t2414 * t2636 + t2744 * t2759) * t2626 + pkin(1) * t2887 + (t2414 * t2620 + (t2933 * t2507 * t2807 - pkin(1) * t2465) * t2534) * qJ(3,3)) * t2767 - (-t2450 * t2818 + ((pkin(1) * t2639 + t2620) * t2636 * t2465 + (t2609 - 0.1e1) * qJ(3,3) * t2873) * t2534) * t2444 * t2864 + (t2474 * t2618 + t2475 * t2619 + t2492 * t2617) * t2866;
t2415 = -qJ(3,2) * t2466 * t2537 + t2886;
t2457 = -0.2e1 * t2460;
t2520 = t2734 * t2622 + t2896;
t2524 = t2734 + 0.2e1 * t2780;
t2476 = (-t2588 * t2740 + t2591 * t2787) * t2610 + (-t2524 * t2843 + t2591 * t2958) * t2628 - t2520 * t2909 + t2576 * t2834;
t2477 = (t2588 * t2787 + t2591 * t2740) * t2610 + (t2524 * t2834 + t2588 * t2958) * t2628 + t2520 * t2908 + t2576 * t2843;
t2493 = t2610 * t2739 + ((t2974 + pkin(1)) * t2629 + t2582) * t2816 + qJ(3,2) * (t2576 * t2629 + t2622 * t2582);
t2685 = -((-t2421 * t2622 * t2807 + (-t2508 * (0.3e1 * t2641 + t2720) * t2636 + (t2508 * t2790 - t2883) * t2585) * t2537) * t2628 - (t2556 * t2622 * t2872 + t2801) * qJ(3,2) + (t2635 * (t2442 + t2457 - 0.2e1 * t2731) * qJ(3,2) + (-(t2613 - 0.3e1 * t2641) * t2816 - 0.3e1 * (-t2641 / 0.3e1 + t2613) * t2585 + (t2641 - t2613) * t2969) * t2872) * t2610) * t2753 - ((t2415 * t2636 + t2741 * t2755) * t2628 + pkin(1) * t2886 + (t2415 * t2622 + (t2932 * t2508 * t2807 - pkin(1) * t2466) * t2537) * qJ(3,2)) * t2765 - (-t2451 * t2816 + ((pkin(1) * t2642 + t2622) * t2636 * t2466 + (t2610 - 0.1e1) * qJ(3,2) * t2870) * t2537) * t2445 * t2860 + (t2476 * t2618 + t2477 * t2619 + t2493 * t2617) * t2862;
t2416 = -qJ(3,1) * t2467 * t2540 + t2885;
t2458 = -0.2e1 * t2461;
t2521 = t2733 * t2624 + t2895;
t2526 = t2733 + 0.2e1 * t2782;
t2478 = (-t2589 * t2737 + t2592 * t2788) * t2611 + (-t2526 * t2840 + t2592 * t2959) * t2630 - t2521 * t2914 + t2577 * t2831;
t2479 = (t2589 * t2788 + t2592 * t2737) * t2611 + (t2526 * t2831 + t2589 * t2959) * t2630 + t2521 * t2913 + t2577 * t2840;
t2494 = t2611 * t2736 + ((t2973 + pkin(1)) * t2631 + t2583) * t2806 + qJ(3,1) * (t2577 * t2631 + t2624 * t2583);
t2684 = -((-t2422 * t2624 * t2807 + (-t2509 * (0.3e1 * t2644 + t2720) * t2636 + (t2509 * t2790 - t2882) * t2586) * t2540) * t2630 - (t2557 * t2624 * t2869 + t2800) * qJ(3,1) + (t2635 * (t2443 + t2458 - 0.2e1 * t2730) * qJ(3,1) + (-(t2613 - 0.3e1 * t2644) * t2806 - 0.3e1 * (-t2644 / 0.3e1 + t2613) * t2586 + (t2644 - t2613) * t2969) * t2869) * t2611) * t2749 - ((t2416 * t2636 + t2738 * t2751) * t2630 + pkin(1) * t2885 + (t2416 * t2624 + (t2931 * t2509 * t2807 - pkin(1) * t2467) * t2540) * qJ(3,1)) * t2763 - (-t2452 * t2806 + ((pkin(1) * t2645 + t2624) * t2636 * t2467 + (t2611 - 0.1e1) * qJ(3,1) * t2867) * t2540) * t2446 * t2856 + (t2478 * t2618 + t2479 * t2619 + t2494 * t2617) * t2858;
t2683 = -t2686 + t2926;
t2682 = -t2685 + t2925;
t2681 = -t2684 + t2923;
t2677 = t2686 + t2853;
t2676 = t2685 + t2851;
t2675 = t2684 + t2849;
t2674 = (-t2680 * t2866 + (t2704 * t2640 + (-t2408 * t2507 * t2639 - t2880) * t2626) * t2535) * MDP(11) + MDP(12) * t2890 + (-t2462 * t2640 + t2504 * t2609 - t2504) * t2535 * MDP(13) + (-t2893 - t2926 + (-t2462 * t2639 + (-pkin(2) * t2827 - qJ(3,3) + t2902) * t2504) * t2535 + t2677) * MDP(14);
t2673 = (-t2679 * t2862 + (t2703 * t2643 + (-t2409 * t2508 * t2642 - t2878) * t2628) * t2538) * MDP(11) + MDP(12) * t2889 + (-t2463 * t2643 + t2505 * t2610 - t2505) * t2538 * MDP(13) + (-t2892 - t2925 + (-t2463 * t2642 + (-pkin(2) * t2824 - qJ(3,2) + t2907) * t2505) * t2538 + t2676) * MDP(14);
t2672 = (-t2678 * t2858 + (t2702 * t2646 + (-t2410 * t2509 * t2645 - t2876) * t2630) * t2541) * MDP(11) + MDP(12) * t2888 + (-t2464 * t2646 + t2506 * t2611 - t2506) * t2541 * MDP(13) + (-t2891 - t2923 + (-t2464 * t2645 + (-pkin(2) * t2821 - qJ(3,1) + t2912) * t2506) * t2541 + t2675) * MDP(14);
t2671 = MDP(10) * (t2390 * t2626 + t2854) + MDP(11) * ((t2498 * t2943 + t2390) * t2620 + 0.2e1 * t2926 + qJ(3,3) * t2480 - t2677) + MDP(13) * (t2719 + (t2762 * t2953 - t2390) * t2626 - t2854 + 0.2e1 * t2900 + t2799) + MDP(14) * (qJ(3,3) * t2719 + ((-g(1) * t2897 - t2938) * t2590 + (g(2) * t2897 - t2939) * t2587 - qJ(3,3) * t2393 + t2793 * t2762) * t2626 + ((pkin(2) * t2929 - g(2) * qJ(3,3)) * t2590 + (-g(1) * qJ(3,3) - t2621 * t2938) * t2587 + pkin(2) * t2393) * t2620 + t2638 * t2351 + t2799 * qJ(3,3) + pkin(2) * t2683) + MDP(5) * t2480 + MDP(8) * t2351 + MDP(9) * (-t2853 + t2893);
t2670 = MDP(10) * (t2391 * t2628 + t2852) + MDP(11) * ((t2499 * t2942 + t2391) * t2622 + 0.2e1 * t2925 + qJ(3,2) * t2481 - t2676) + MDP(13) * (t2718 + (t2761 * t2954 - t2391) * t2628 - t2852 + 0.2e1 * t2899 + t2798) + MDP(14) * (qJ(3,2) * t2718 + ((-g(1) * t2896 - t2938) * t2591 + (g(2) * t2896 - t2939) * t2588 - qJ(3,2) * t2394 + t2792 * t2761) * t2628 + ((pkin(2) * t2928 - g(2) * qJ(3,2)) * t2591 + (-g(1) * qJ(3,2) - t2623 * t2938) * t2588 + pkin(2) * t2394) * t2622 + t2641 * t2352 + t2798 * qJ(3,2) + pkin(2) * t2682) + MDP(5) * t2481 + MDP(8) * t2352 + MDP(9) * (-t2851 + t2892);
t2669 = MDP(10) * (t2392 * t2630 + t2850) + MDP(11) * ((t2500 * t2941 + t2392) * t2624 + 0.2e1 * t2923 + qJ(3,1) * t2482 - t2675) + MDP(13) * (t2717 + (t2760 * t2955 - t2392) * t2630 - t2850 + 0.2e1 * t2898 + t2797) + MDP(14) * (qJ(3,1) * t2717 + ((-g(1) * t2895 - t2938) * t2592 + (g(2) * t2895 - t2939) * t2589 - qJ(3,1) * t2395 + t2791 * t2760) * t2630 + ((pkin(2) * t2927 - g(2) * qJ(3,1)) * t2592 + (-g(1) * qJ(3,1) - t2625 * t2938) * t2589 + pkin(2) * t2395) * t2624 + t2644 * t2353 + t2797 * qJ(3,1) + pkin(2) * t2681) + MDP(5) * t2482 + MDP(8) * t2353 + MDP(9) * (-t2849 + t2891);
t2665 = (MDP(7) * t2626 + t2710) * t2405 + t2671;
t2664 = (MDP(7) * t2628 + t2709) * t2406 + t2670;
t2663 = (MDP(7) * t2630 + t2708) * t2407 + t2669;
t2372 = pkin(2) * t2949 + 0.4e1 * t2758;
t2396 = 0.2e1 * t2905;
t2637 = pkin(1) * g(3);
t2662 = MDP(1) * t2405 + MDP(10) * (-t2339 * t2626 - t2979) + MDP(11) * (t2372 * t2609 + ((t2396 - t2777) * t2620 + t2972) * t2626 - t2984 - 0.2e1 * t2758) + MDP(12) * ((-pkin(2) * t2771 + t2432 + t2900) * t2626 + (-t2462 * t2865 - t2683) * t2620 + 0.2e1 * t2402 - t2516) + MDP(13) * ((t2777 - 0.2e1 * t2905) * t2609 + (t2372 * t2620 + t2339) * t2626 + t2979 + (t2456 + 0.2e1 * t2441) * t2875 + t2396) + MDP(14) * ((t2459 - t2441 / 0.2e1) * t2779 * t2968 + (pkin(5) * t2432 + (t2758 * t2965 + t2339) * qJ(3,3) + ((-t2776 + t2905) * t2965 + t2972) * pkin(2)) * t2626 + (t2444 * t2757 * t2969 - t2339 * pkin(2) + pkin(5) * t2686 + qJ(3,3) * t2972) * t2620 + (-pkin(1) * t2546 - t2937) * t2627 + (-pkin(5) * t2546 + t2637) * t2621 + t2776 * t2953 + (t2793 * t2609 + t2602 + t2638) * t2405) + MDP(2) * t2978 + MDP(3) * t2516 + MDP(4) * (t2726 * t2943 + t2890) * t2620 + MDP(5) * (t2827 * t2949 + (t2968 - 0.2e1) * t2726) + MDP(6) * (t2351 * t2620 + t2626 * t2771) + MDP(7) * (t2351 * t2626 - t2620 * t2771) + MDP(9) * (t2626 * t2972 - t2984);
t2373 = pkin(2) * t2948 + 0.4e1 * t2754;
t2397 = 0.2e1 * t2910;
t2661 = MDP(1) * t2406 + MDP(10) * (-t2340 * t2628 - t2980) + MDP(11) * (t2373 * t2610 + ((t2397 - t2775) * t2622 + t2971) * t2628 - t2983 - 0.2e1 * t2754) + MDP(12) * ((-pkin(2) * t2770 + t2433 + t2899) * t2628 + (-t2463 * t2861 - t2682) * t2622 + 0.2e1 * t2403 - t2517) + MDP(13) * ((t2775 - 0.2e1 * t2910) * t2610 + (t2373 * t2622 + t2340) * t2628 + t2980 + (t2457 + 0.2e1 * t2442) * t2872 + t2397) + MDP(14) * ((t2460 - t2442 / 0.2e1) * t2781 * t2967 + (pkin(5) * t2433 + (t2754 * t2964 + t2340) * qJ(3,2) + ((-t2774 + t2910) * t2964 + t2971) * pkin(2)) * t2628 + (t2445 * t2753 * t2969 - t2340 * pkin(2) + pkin(5) * t2685 + qJ(3,2) * t2971) * t2622 + (-pkin(1) * t2547 - t2937) * t2629 + (-pkin(5) * t2547 + t2637) * t2623 + t2774 * t2954 + (t2792 * t2610 + t2602 + t2641) * t2406) + MDP(2) * t2977 + MDP(3) * t2517 + MDP(4) * (t2725 * t2942 + t2889) * t2622 + MDP(5) * (t2824 * t2948 + (t2967 - 0.2e1) * t2725) + MDP(6) * (t2352 * t2622 + t2628 * t2770) + MDP(7) * (t2352 * t2628 - t2622 * t2770) + MDP(9) * (t2628 * t2971 - t2983);
t2374 = pkin(2) * t2947 + 0.4e1 * t2750;
t2398 = 0.2e1 * t2915;
t2660 = MDP(1) * t2407 + MDP(10) * (-t2341 * t2630 - t2981) + MDP(11) * (t2374 * t2611 + ((t2398 - t2773) * t2624 + t2970) * t2630 - t2982 - 0.2e1 * t2750) + MDP(12) * ((-pkin(2) * t2769 + t2434 + t2898) * t2630 + (-t2464 * t2857 - t2681) * t2624 + 0.2e1 * t2404 - t2518) + MDP(13) * ((t2773 - 0.2e1 * t2915) * t2611 + (t2374 * t2624 + t2341) * t2630 + t2981 + (t2458 + 0.2e1 * t2443) * t2869 + t2398) + MDP(14) * ((t2461 - t2443 / 0.2e1) * t2783 * t2966 + (pkin(5) * t2434 + (t2750 * t2963 + t2341) * qJ(3,1) + ((-t2772 + t2915) * t2963 + t2970) * pkin(2)) * t2630 + (t2446 * t2749 * t2969 - t2341 * pkin(2) + pkin(5) * t2684 + qJ(3,1) * t2970) * t2624 + (-pkin(1) * t2548 - t2937) * t2631 + (-pkin(5) * t2548 + t2637) * t2625 + t2772 * t2955 + (t2791 * t2611 + t2602 + t2644) * t2407) + MDP(2) * t2976 + MDP(3) * t2518 + MDP(4) * (t2724 * t2941 + t2888) * t2624 + MDP(5) * (t2821 * t2947 + (t2966 - 0.2e1) * t2724) + MDP(6) * (t2353 * t2624 + t2630 * t2769) + MDP(7) * (t2353 * t2630 - t2624 * t2769) + MDP(9) * (t2630 * t2970 - t2982);
t1 = [(-t2487 * t2707 - t2489 * t2706 - t2491 * t2705) * MDP(4) + (t2619 - g(1)) * MDP(15) + (t2660 * t2833 + (t2479 * t2672 + t2491 * t2663) * t2645) * t2540 + (t2661 * t2836 + (t2477 * t2673 + t2489 * t2664) * t2642) * t2537 + (t2662 * t2839 + (t2475 * t2674 + t2487 * t2665) * t2639) * t2534; (-t2486 * t2707 - t2488 * t2706 - t2490 * t2705) * MDP(4) + (t2618 - g(2)) * MDP(15) + (-t2660 * t2842 + (t2478 * t2672 + t2490 * t2663) * t2645) * t2540 + (-t2661 * t2845 + (t2476 * t2673 + t2488 * t2664) * t2642) * t2537 + (-t2662 * t2848 + (t2474 * t2674 + t2486 * t2665) * t2639) * t2534; (-t2510 * t2609 * t2723 - t2511 * t2610 * t2722 - t2512 * t2611 * t2721) * MDP(4) + (t2617 - g(3)) * MDP(15) + (-t2660 * t2625 + (t2672 * t2494 + (t2407 * t2611 * MDP(7) + (t2407 * t2708 + t2669) * t2630) * t2512) * t2645) * t2540 + (-t2661 * t2623 + (t2673 * t2493 + (t2406 * t2610 * MDP(7) + (t2406 * t2709 + t2670) * t2628) * t2511) * t2642) * t2537 + (-t2662 * t2621 + (t2674 * t2492 + (t2405 * t2609 * MDP(7) + (t2405 * t2710 + t2671) * t2626) * t2510) * t2639) * t2534;];
tauX  = t1;
