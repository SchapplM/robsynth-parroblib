% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR12V2G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:29:38
% EndTime: 2020-08-06 19:30:00
% DurationCPUTime: 21.88s
% Computational Cost: add. (16284->798), mult. (21078->1508), div. (2340->12), fcn. (16875->18), ass. (0->539)
t3239 = cos(qJ(2,3));
t3233 = sin(qJ(2,3));
t3197 = t3233 * qJ(3,3);
t3599 = t3197 + pkin(1);
t3625 = t3239 * t3599;
t3241 = cos(qJ(2,2));
t3235 = sin(qJ(2,2));
t3198 = t3235 * qJ(3,2);
t3598 = t3198 + pkin(1);
t3624 = t3241 * t3598;
t3243 = cos(qJ(2,1));
t3237 = sin(qJ(2,1));
t3199 = t3237 * qJ(3,1);
t3597 = t3199 + pkin(1);
t3623 = t3243 * t3597;
t3228 = t3243 ^ 2;
t3280 = 0.2e1 * pkin(2) * t3228 + 0.2e1 * t3623;
t3226 = t3241 ^ 2;
t3281 = 0.2e1 * pkin(2) * t3226 + 0.2e1 * t3624;
t3224 = t3239 ^ 2;
t3282 = 0.2e1 * pkin(2) * t3224 + 0.2e1 * t3625;
t3246 = pkin(2) + pkin(3);
t3498 = t3239 * t3246;
t3173 = t3498 + t3599;
t3234 = sin(qJ(1,3));
t3240 = cos(qJ(1,3));
t3245 = pkin(5) - pkin(6);
t3487 = t3245 * t3240;
t3152 = t3173 * t3234 - t3487;
t3559 = t3152 * t3224;
t3494 = t3241 * t3246;
t3174 = t3494 + t3598;
t3236 = sin(qJ(1,2));
t3242 = cos(qJ(1,2));
t3486 = t3245 * t3242;
t3153 = t3174 * t3236 - t3486;
t3557 = t3153 * t3226;
t3490 = t3243 * t3246;
t3175 = t3490 + t3597;
t3238 = sin(qJ(1,1));
t3244 = cos(qJ(1,1));
t3485 = t3245 * t3244;
t3154 = t3175 * t3238 - t3485;
t3555 = t3154 * t3228;
t3167 = 0.1e1 / t3173;
t3622 = t3167 * t3233;
t3169 = 0.1e1 / t3174;
t3621 = t3169 * t3235;
t3171 = 0.1e1 / t3175;
t3620 = t3171 * t3237;
t3230 = legFrame(3,2);
t3200 = sin(t3230);
t3203 = cos(t3230);
t3619 = t3200 * t3203;
t3231 = legFrame(2,2);
t3201 = sin(t3231);
t3204 = cos(t3231);
t3618 = t3201 * t3204;
t3232 = legFrame(1,2);
t3202 = sin(t3232);
t3205 = cos(t3232);
t3617 = t3202 * t3205;
t3247 = qJ(3,3) ^ 2;
t3257 = pkin(2) ^ 2;
t3478 = pkin(1) ^ 2 + pkin(5) ^ 2;
t3590 = 0.2e1 * pkin(2);
t3613 = -0.2e1 * pkin(1);
t3616 = t3590 * t3625 - t3197 * t3613 + (-t3247 + t3257) * t3224 + t3247 + t3478;
t3250 = qJ(3,2) ^ 2;
t3615 = t3590 * t3624 - t3198 * t3613 + (-t3250 + t3257) * t3226 + t3250 + t3478;
t3253 = qJ(3,1) ^ 2;
t3614 = t3590 * t3623 - t3199 * t3613 + (-t3253 + t3257) * t3228 + t3253 + t3478;
t3268 = (0.2e1 * t3228 - 0.2e1) * qJ(3,1) - 0.2e1 * (pkin(2) * t3243 + pkin(1)) * t3237;
t3269 = (0.2e1 * t3226 - 0.2e1) * qJ(3,2) - 0.2e1 * (pkin(2) * t3241 + pkin(1)) * t3235;
t3270 = (0.2e1 * t3224 - 0.2e1) * qJ(3,3) - 0.2e1 * (pkin(2) * t3239 + pkin(1)) * t3233;
t3612 = 0.2e1 * pkin(1);
t3611 = -0.2e1 * pkin(5);
t3610 = 0.2e1 * pkin(5);
t3609 = 2 * MDP(5);
t3608 = 2 * MDP(6);
t3607 = 2 * MDP(7);
t3606 = -0.2e1 * t3246;
t3602 = pkin(5) * t3240;
t3601 = pkin(5) * t3242;
t3600 = pkin(5) * t3244;
t3596 = qJ(3,1) * t3202;
t3595 = qJ(3,1) * t3205;
t3594 = qJ(3,2) * t3201;
t3593 = qJ(3,2) * t3204;
t3592 = qJ(3,3) * t3200;
t3591 = qJ(3,3) * t3203;
t3481 = pkin(1) * t3240 + t3234 * t3245;
t3155 = qJ(3,3) * t3240 + t3481 * t3233;
t3515 = t3233 * t3240;
t3445 = qJ(3,3) * t3515;
t3158 = 0.2e1 * t3445 + t3481;
t3523 = (qJ(3,3) + t3246) * (-qJ(3,3) + t3246);
t3164 = pkin(1) * qJ(3,3) - t3233 * t3523;
t3182 = pkin(1) * t3233 + qJ(3,3);
t3387 = t3240 * t3523;
t3472 = qJ(3,3) * t3606;
t3528 = t3203 * t3246;
t3534 = t3200 * t3246;
t3092 = (-t3200 * t3387 + t3203 * t3472) * t3224 + (-t3158 * t3534 - t3164 * t3203) * t3239 - t3155 * t3592 + t3182 * t3528;
t3248 = 0.1e1 / qJ(3,3);
t3552 = t3167 * t3248;
t3083 = t3092 * t3552;
t3159 = t3445 + t3481;
t3496 = t3240 * t3246;
t3514 = t3233 * t3246;
t3131 = (-t3200 * t3496 - t3591) * t3224 + (-t3159 * t3200 + t3203 * t3514) * t3239 + t3203 * t3182;
t3462 = pkin(2) * t3552;
t3589 = (t3131 * t3462 - t3083) * t3233;
t3093 = (t3200 * t3472 + t3203 * t3387) * t3224 + (t3158 * t3528 - t3164 * t3200) * t3239 + t3155 * t3591 + t3182 * t3534;
t3084 = t3093 * t3552;
t3132 = (t3203 * t3496 - t3592) * t3224 + (t3159 * t3203 + t3200 * t3514) * t3239 + t3200 * t3182;
t3588 = (t3132 * t3462 - t3084) * t3233;
t3480 = pkin(1) * t3242 + t3236 * t3245;
t3156 = qJ(3,2) * t3242 + t3480 * t3235;
t3509 = t3235 * t3242;
t3446 = qJ(3,2) * t3509;
t3160 = 0.2e1 * t3446 + t3480;
t3522 = (qJ(3,2) + t3246) * (-qJ(3,2) + t3246);
t3165 = pkin(1) * qJ(3,2) - t3235 * t3522;
t3183 = pkin(1) * t3235 + qJ(3,2);
t3386 = t3242 * t3522;
t3473 = qJ(3,2) * t3606;
t3526 = t3204 * t3246;
t3532 = t3201 * t3246;
t3094 = (-t3201 * t3386 + t3204 * t3473) * t3226 + (-t3160 * t3532 - t3165 * t3204) * t3241 - t3156 * t3594 + t3183 * t3526;
t3251 = 0.1e1 / qJ(3,2);
t3546 = t3169 * t3251;
t3085 = t3094 * t3546;
t3161 = t3446 + t3480;
t3492 = t3242 * t3246;
t3508 = t3235 * t3246;
t3133 = (-t3201 * t3492 - t3593) * t3226 + (-t3161 * t3201 + t3204 * t3508) * t3241 + t3204 * t3183;
t3461 = pkin(2) * t3546;
t3587 = (t3133 * t3461 - t3085) * t3235;
t3095 = (t3201 * t3473 + t3204 * t3386) * t3226 + (t3160 * t3526 - t3165 * t3201) * t3241 + t3156 * t3593 + t3183 * t3532;
t3086 = t3095 * t3546;
t3134 = (t3204 * t3492 - t3594) * t3226 + (t3161 * t3204 + t3201 * t3508) * t3241 + t3201 * t3183;
t3586 = (t3134 * t3461 - t3086) * t3235;
t3479 = pkin(1) * t3244 + t3238 * t3245;
t3157 = qJ(3,1) * t3244 + t3479 * t3237;
t3503 = t3237 * t3244;
t3447 = qJ(3,1) * t3503;
t3162 = 0.2e1 * t3447 + t3479;
t3521 = (qJ(3,1) + t3246) * (-qJ(3,1) + t3246);
t3166 = pkin(1) * qJ(3,1) - t3237 * t3521;
t3184 = pkin(1) * t3237 + qJ(3,1);
t3385 = t3244 * t3521;
t3474 = qJ(3,1) * t3606;
t3524 = t3205 * t3246;
t3530 = t3202 * t3246;
t3096 = (-t3202 * t3385 + t3205 * t3474) * t3228 + (-t3162 * t3530 - t3166 * t3205) * t3243 - t3157 * t3596 + t3184 * t3524;
t3254 = 0.1e1 / qJ(3,1);
t3540 = t3171 * t3254;
t3087 = t3096 * t3540;
t3163 = t3447 + t3479;
t3488 = t3244 * t3246;
t3502 = t3237 * t3246;
t3135 = (-t3202 * t3488 - t3595) * t3228 + (-t3163 * t3202 + t3205 * t3502) * t3243 + t3205 * t3184;
t3460 = pkin(2) * t3540;
t3585 = (t3135 * t3460 - t3087) * t3237;
t3097 = (t3202 * t3474 + t3205 * t3385) * t3228 + (t3162 * t3524 - t3166 * t3202) * t3243 + t3157 * t3595 + t3184 * t3530;
t3088 = t3097 * t3540;
t3136 = (t3205 * t3488 - t3596) * t3228 + (t3163 * t3205 + t3202 * t3502) * t3243 + t3202 * t3184;
t3584 = (t3136 * t3460 - t3088) * t3237;
t3520 = t3224 * t3234;
t3146 = -t3520 * t3523 - ((0.2e1 * t3197 + pkin(1)) * t3234 - t3487) * t3498 - qJ(3,3) * (t3182 * t3234 - t3233 * t3487);
t3558 = t3152 * t3239;
t3465 = pkin(2) * t3558;
t3294 = (t3146 + t3465) * t3248;
t3583 = t3294 * t3622;
t3519 = t3226 * t3236;
t3147 = -t3519 * t3522 - ((0.2e1 * t3198 + pkin(1)) * t3236 - t3486) * t3494 - qJ(3,2) * (t3183 * t3236 - t3235 * t3486);
t3556 = t3153 * t3241;
t3464 = pkin(2) * t3556;
t3293 = (t3147 + t3464) * t3251;
t3582 = t3293 * t3621;
t3518 = t3228 * t3238;
t3148 = -t3518 * t3521 - ((0.2e1 * t3199 + pkin(1)) * t3238 - t3485) * t3490 - qJ(3,1) * (t3184 * t3238 - t3237 * t3485);
t3554 = t3154 * t3243;
t3463 = pkin(2) * t3554;
t3292 = (t3148 + t3463) * t3254;
t3581 = t3292 * t3620;
t3176 = -pkin(2) * t3233 + qJ(3,3) * t3239;
t3580 = t3131 * t3176;
t3579 = t3131 * t3239;
t3578 = t3131 * t3248;
t3577 = t3132 * t3176;
t3576 = t3132 * t3239;
t3575 = t3132 * t3248;
t3177 = -pkin(2) * t3235 + qJ(3,2) * t3241;
t3574 = t3133 * t3177;
t3573 = t3133 * t3241;
t3572 = t3133 * t3251;
t3571 = t3134 * t3177;
t3570 = t3134 * t3241;
t3569 = t3134 * t3251;
t3178 = -pkin(2) * t3237 + qJ(3,1) * t3243;
t3568 = t3135 * t3178;
t3567 = t3135 * t3243;
t3566 = t3135 * t3254;
t3565 = t3136 * t3178;
t3564 = t3136 * t3243;
t3563 = t3136 * t3254;
t3143 = (-0.2e1 * t3152 - t3602) * t3239 * t3167;
t3562 = t3143 * t3248;
t3144 = (-0.2e1 * t3153 - t3601) * t3241 * t3169;
t3561 = t3144 * t3251;
t3145 = (-0.2e1 * t3154 - t3600) * t3243 * t3171;
t3560 = t3145 * t3254;
t3553 = t3167 * t3240;
t3168 = 0.1e1 / t3173 ^ 2;
t3219 = t3234 ^ 2;
t3551 = t3168 * t3219;
t3225 = t3240 ^ 2;
t3550 = t3168 * t3225;
t3549 = t3168 * t3248;
t3548 = t3168 / qJ(3,3) ^ 2;
t3547 = t3169 * t3242;
t3170 = 0.1e1 / t3174 ^ 2;
t3221 = t3236 ^ 2;
t3545 = t3170 * t3221;
t3227 = t3242 ^ 2;
t3544 = t3170 * t3227;
t3543 = t3170 * t3251;
t3542 = t3170 / qJ(3,2) ^ 2;
t3541 = t3171 * t3244;
t3172 = 0.1e1 / t3175 ^ 2;
t3223 = t3238 ^ 2;
t3539 = t3172 * t3223;
t3229 = t3244 ^ 2;
t3538 = t3172 * t3229;
t3537 = t3172 * t3254;
t3536 = t3172 / qJ(3,1) ^ 2;
t3535 = t3200 * t3234;
t3533 = t3201 * t3236;
t3531 = t3202 * t3238;
t3529 = t3203 * t3234;
t3527 = t3204 * t3236;
t3525 = t3205 * t3238;
t3517 = t3233 * t3234;
t3516 = t3233 * t3239;
t3513 = t3233 * t3248;
t3512 = t3234 * t3239;
t3511 = t3235 * t3236;
t3510 = t3235 * t3241;
t3507 = t3235 * t3251;
t3506 = t3236 * t3241;
t3505 = t3237 * t3238;
t3504 = t3237 * t3243;
t3501 = t3237 * t3254;
t3500 = t3238 * t3243;
t3499 = t3239 * t3240;
t3497 = t3239 * t3248;
t3495 = t3241 * t3242;
t3493 = t3241 * t3251;
t3491 = t3243 * t3244;
t3489 = t3243 * t3254;
t3484 = t3248 * t3257;
t3483 = t3251 * t3257;
t3482 = t3254 * t3257;
t3471 = pkin(2) * t3578;
t3470 = pkin(2) * t3575;
t3469 = pkin(2) * t3572;
t3468 = pkin(2) * t3569;
t3467 = pkin(2) * t3566;
t3466 = pkin(2) * t3563;
t3459 = pkin(5) * t3515;
t3458 = pkin(5) * t3513;
t3457 = pkin(5) * t3509;
t3456 = pkin(5) * t3507;
t3455 = pkin(5) * t3503;
t3454 = pkin(5) * t3501;
t3453 = pkin(5) * t3497;
t3452 = pkin(5) * t3493;
t3451 = pkin(5) * t3489;
t3441 = t3131 * t3548;
t3440 = t3132 * t3548;
t3439 = t3133 * t3542;
t3438 = t3134 * t3542;
t3437 = t3135 * t3536;
t3436 = t3136 * t3536;
t3435 = t3146 * t3548;
t3434 = t3147 * t3542;
t3433 = t3148 * t3536;
t3432 = t3152 * t3520;
t3431 = t3248 * t3559;
t3430 = t3152 * t3497;
t3429 = t3153 * t3519;
t3428 = t3251 * t3557;
t3427 = t3153 * t3493;
t3426 = t3154 * t3518;
t3425 = t3254 * t3555;
t3424 = t3154 * t3489;
t3423 = t3167 * t3535;
t3422 = t3167 * t3529;
t3218 = t3233 ^ 2;
t3421 = t3218 * t3551;
t3420 = t3168 * t3516;
t3419 = t3168 * t3513;
t3418 = t3168 * t3234 * t3240;
t3417 = t3234 * t3549;
t3416 = t3240 * t3549;
t3415 = t3169 * t3533;
t3414 = t3169 * t3527;
t3220 = t3235 ^ 2;
t3413 = t3220 * t3545;
t3412 = t3170 * t3510;
t3411 = t3170 * t3507;
t3410 = t3170 * t3236 * t3242;
t3409 = t3236 * t3543;
t3408 = t3242 * t3543;
t3407 = t3171 * t3531;
t3406 = t3171 * t3525;
t3222 = t3237 ^ 2;
t3405 = t3222 * t3539;
t3404 = t3172 * t3504;
t3403 = t3172 * t3501;
t3402 = t3172 * t3238 * t3244;
t3401 = t3238 * t3537;
t3400 = t3244 * t3537;
t3399 = t3200 * t3517;
t3398 = t3200 * t3512;
t3397 = t3201 * t3511;
t3396 = t3201 * t3506;
t3395 = t3202 * t3505;
t3394 = t3202 * t3500;
t3393 = t3203 * t3517;
t3392 = t3203 * t3512;
t3391 = t3204 * t3511;
t3390 = t3204 * t3506;
t3389 = t3205 * t3505;
t3388 = t3205 * t3500;
t3381 = t3131 * t3458;
t3380 = t3131 * t3453;
t3379 = t3132 * t3458;
t3378 = t3132 * t3453;
t3377 = t3133 * t3456;
t3376 = t3133 * t3452;
t3375 = t3134 * t3456;
t3374 = t3134 * t3452;
t3373 = t3135 * t3454;
t3372 = t3135 * t3451;
t3371 = t3136 * t3454;
t3370 = t3136 * t3451;
t3369 = pkin(5) * t3431;
t3368 = pkin(5) * t3428;
t3367 = pkin(5) * t3425;
t3366 = pkin(5) * t3399;
t3365 = pkin(5) * t3398;
t3364 = pkin(5) * t3397;
t3363 = pkin(5) * t3396;
t3362 = pkin(5) * t3395;
t3361 = pkin(5) * t3394;
t3360 = pkin(5) * t3393;
t3359 = pkin(5) * t3392;
t3358 = pkin(5) * t3391;
t3357 = pkin(5) * t3390;
t3356 = pkin(5) * t3389;
t3355 = pkin(5) * t3388;
t3354 = t3168 * t3431;
t3353 = t3548 * t3558;
t3352 = t3170 * t3428;
t3351 = t3542 * t3556;
t3350 = t3172 * t3425;
t3349 = t3536 * t3554;
t3348 = t3551 * t3619;
t3347 = t3200 * t3417;
t3346 = t3203 * t3417;
t3345 = t3218 * t3418;
t3344 = t3219 * t3420;
t3343 = t3233 * t3417;
t3342 = t3233 * t3416;
t3341 = t3239 * t3417;
t3340 = t3239 * t3416;
t3339 = t3545 * t3618;
t3338 = t3201 * t3409;
t3337 = t3204 * t3409;
t3336 = t3220 * t3410;
t3335 = t3221 * t3412;
t3334 = t3235 * t3409;
t3333 = t3235 * t3408;
t3332 = t3241 * t3409;
t3331 = t3241 * t3408;
t3330 = t3539 * t3617;
t3329 = t3202 * t3401;
t3328 = t3205 * t3401;
t3327 = t3222 * t3402;
t3326 = t3223 * t3404;
t3325 = t3237 * t3401;
t3324 = t3237 * t3400;
t3323 = t3243 * t3401;
t3322 = t3243 * t3400;
t3318 = t3234 * t3354;
t3317 = t3152 * t3340;
t3316 = t3236 * t3352;
t3315 = t3153 * t3331;
t3314 = t3238 * t3350;
t3313 = t3154 * t3322;
t3312 = t3200 * t3343;
t3311 = t3200 * t3341;
t3310 = t3203 * t3343;
t3309 = t3203 * t3341;
t3308 = t3418 * t3516;
t3307 = t3201 * t3334;
t3306 = t3201 * t3332;
t3305 = t3204 * t3334;
t3304 = t3204 * t3332;
t3303 = t3410 * t3510;
t3302 = t3202 * t3325;
t3301 = t3202 * t3323;
t3300 = t3205 * t3325;
t3299 = t3205 * t3323;
t3298 = t3402 * t3504;
t3297 = t3093 * t3233 + t3577;
t3296 = t3095 * t3235 + t3571;
t3295 = t3097 * t3237 + t3565;
t3291 = t3152 * t3233 * t3341;
t3290 = t3153 * t3235 * t3332;
t3289 = t3154 * t3237 * t3323;
t3271 = (-t3135 * t3205 + t3136 * t3202) * t3401;
t3272 = (-t3133 * t3204 + t3134 * t3201) * t3409;
t3273 = (-t3131 * t3203 + t3132 * t3200) * t3417;
t3288 = (t3233 * t3273 + t3235 * t3272 + t3237 * t3271) * MDP(6) + (t3239 * t3273 + t3241 * t3272 + t3243 * t3271) * MDP(7) + (t3131 * t3440 + t3133 * t3438 + t3135 * t3436) * MDP(8) + (-t3326 * t3617 - t3335 * t3618 - t3344 * t3619) * t3609 + (-t3218 * t3348 - t3220 * t3339 - t3222 * t3330) * MDP(4) + (-t3330 - t3339 - t3348) * MDP(1);
t3287 = ((-t3135 * t3244 - t3154 * t3394) * t3403 + (-t3133 * t3242 - t3153 * t3396) * t3411 + (-t3131 * t3240 - t3152 * t3398) * t3419) * MDP(6) + ((-t3135 * t3491 - t3202 * t3426) * t3537 + (-t3133 * t3495 - t3201 * t3429) * t3543 + (-t3131 * t3499 - t3200 * t3432) * t3549) * MDP(7) + (-t3131 * t3353 - t3133 * t3351 - t3135 * t3349) * MDP(8) + (-t3200 * t3308 - t3201 * t3303 - t3202 * t3298) * t3609 + (-t3200 * t3345 - t3201 * t3336 - t3202 * t3327) * MDP(4) + (-t3200 * t3418 - t3201 * t3410 - t3202 * t3402) * MDP(1);
t3286 = ((-t3136 * t3244 + t3154 * t3388) * t3403 + (-t3134 * t3242 + t3153 * t3390) * t3411 + (-t3132 * t3240 + t3152 * t3392) * t3419) * MDP(6) + ((-t3136 * t3491 + t3205 * t3426) * t3537 + (-t3134 * t3495 + t3204 * t3429) * t3543 + (-t3132 * t3499 + t3203 * t3432) * t3549) * MDP(7) + (-t3132 * t3353 - t3134 * t3351 - t3136 * t3349) * MDP(8) + (t3203 * t3308 + t3204 * t3303 + t3205 * t3298) * t3609 + (t3203 * t3345 + t3204 * t3336 + t3205 * t3327) * MDP(4) + (t3203 * t3418 + t3204 * t3410 + t3205 * t3402) * MDP(1);
t3285 = -t3146 * t3233 + t3176 * t3558;
t3284 = -t3147 * t3235 + t3177 * t3556;
t3283 = -t3148 * t3237 + t3178 * t3554;
t3276 = (-t3092 * t3233 - t3580) * t3549;
t3275 = (-t3094 * t3235 - t3574) * t3543;
t3274 = (-t3096 * t3237 - t3568) * t3537;
t3264 = t3240 * t3354 + t3242 * t3352 + t3244 * t3350;
t3263 = t3131 * t3312 + t3133 * t3307 + t3135 * t3302;
t3262 = t3131 * t3311 + t3133 * t3306 + t3135 * t3301;
t3261 = t3132 * t3310 + t3134 * t3305 + t3136 * t3300;
t3260 = t3132 * t3309 + t3134 * t3304 + t3136 * t3299;
t3259 = t3233 * t3317 + t3235 * t3315 + t3237 * t3313;
t3196 = t3205 ^ 2;
t3195 = t3204 ^ 2;
t3194 = t3203 ^ 2;
t3193 = t3202 ^ 2;
t3192 = t3201 ^ 2;
t3191 = t3200 ^ 2;
t3151 = pkin(5) * t3424 * t3620;
t3150 = pkin(5) * t3427 * t3621;
t3149 = pkin(5) * t3430 * t3622;
t3142 = (t3503 * t3612 + t3367) * t3171;
t3141 = (t3509 * t3612 + t3368) * t3169;
t3140 = (t3515 * t3612 + t3369) * t3167;
t3139 = t3171 * t3491 * t3613 + t3151;
t3138 = t3169 * t3495 * t3613 + t3150;
t3137 = t3167 * t3499 * t3613 + t3149;
t3122 = -t3280 * t3541 + t3151;
t3121 = -t3281 * t3547 + t3150;
t3120 = -t3282 * t3553 + t3149;
t3118 = (0.2e1 * t3136 - t3355) * t3171;
t3117 = (0.2e1 * t3135 + t3361) * t3171;
t3116 = (0.2e1 * t3134 - t3357) * t3169;
t3115 = (0.2e1 * t3133 + t3363) * t3169;
t3114 = (0.2e1 * t3132 - t3359) * t3167;
t3113 = (0.2e1 * t3131 + t3365) * t3167;
t3112 = (t3389 * t3612 - t3370) * t3171;
t3111 = (t3395 * t3613 - t3372) * t3171;
t3110 = (t3391 * t3612 - t3374) * t3169;
t3109 = (t3397 * t3613 - t3376) * t3169;
t3108 = (t3393 * t3612 - t3378) * t3167;
t3107 = (t3399 * t3613 - t3380) * t3167;
t3106 = (t3388 * t3613 - t3371) * t3171;
t3105 = (t3394 * t3612 - t3373) * t3171;
t3104 = (t3390 * t3613 - t3375) * t3169;
t3103 = (t3396 * t3612 - t3377) * t3169;
t3102 = (t3392 * t3613 - t3379) * t3167;
t3101 = (t3398 * t3612 - t3381) * t3167;
t3091 = (t3244 * t3268 - t3367) * t3171;
t3090 = (t3242 * t3269 - t3368) * t3169;
t3089 = (t3240 * t3270 - t3369) * t3167;
t3082 = (t3292 - t3455) * t3171;
t3081 = (t3293 - t3457) * t3169;
t3080 = (t3294 - t3459) * t3167;
t3079 = (t3455 + (-t3148 - 0.2e1 * t3463) * t3254) * t3171;
t3078 = (t3457 + (-t3147 - 0.2e1 * t3464) * t3251) * t3169;
t3077 = (t3459 + (-t3146 - 0.2e1 * t3465) * t3248) * t3167;
t3076 = (-t3280 * t3525 - t3371) * t3171;
t3075 = (t3531 * t3280 - t3373) * t3171;
t3074 = (-t3281 * t3527 - t3375) * t3169;
t3073 = (t3533 * t3281 - t3377) * t3169;
t3072 = (-t3282 * t3529 - t3379) * t3167;
t3071 = (t3535 * t3282 - t3381) * t3167;
t3070 = t3581 + (-t3555 - 0.2e1 * t3600) * t3171;
t3069 = t3582 + (-t3557 - 0.2e1 * t3601) * t3169;
t3068 = t3583 + (-t3559 - 0.2e1 * t3602) * t3167;
t3067 = (t3268 * t3525 + t3370) * t3171;
t3066 = (-t3268 * t3531 + t3372) * t3171;
t3065 = (t3269 * t3527 + t3374) * t3169;
t3064 = (-t3269 * t3533 + t3376) * t3169;
t3063 = (t3270 * t3529 + t3378) * t3167;
t3062 = (-t3270 * t3535 + t3380) * t3167;
t3061 = ((-t3148 * t3254 + t3455) * pkin(2) + (-t3154 * t3482 + (-t3154 - t3600) * qJ(3,1)) * t3243) * t3171;
t3060 = ((-t3147 * t3251 + t3457) * pkin(2) + (-t3153 * t3483 + (-t3153 - t3601) * qJ(3,2)) * t3241) * t3169;
t3059 = ((-t3146 * t3248 + t3459) * pkin(2) + (-t3152 * t3484 + (-t3152 - t3602) * qJ(3,3)) * t3239) * t3167;
t3052 = -t3088 + (t3356 + 0.2e1 * t3466) * t3171;
t3051 = -t3087 + (-t3362 + 0.2e1 * t3467) * t3171;
t3050 = -t3086 + (t3358 + 0.2e1 * t3468) * t3169;
t3049 = -t3085 + (-t3364 + 0.2e1 * t3469) * t3169;
t3048 = -t3084 + (t3360 + 0.2e1 * t3470) * t3167;
t3047 = -t3083 + (-t3366 + 0.2e1 * t3471) * t3167;
t3046 = t3088 + (-t3356 - t3466) * t3171;
t3045 = t3087 + (t3362 - t3467) * t3171;
t3044 = t3086 + (-t3358 - t3468) * t3169;
t3043 = t3085 + (t3364 - t3469) * t3169;
t3042 = t3084 + (-t3360 - t3470) * t3167;
t3041 = t3083 + (t3366 - t3471) * t3167;
t3040 = pkin(5) * t3581 + (-pkin(5) * t3555 - t3244 * t3614) * t3171;
t3039 = pkin(5) * t3582 + (-pkin(5) * t3557 - t3242 * t3615) * t3169;
t3038 = pkin(5) * t3583 + (-pkin(5) * t3559 - t3240 * t3616) * t3167;
t3037 = -t3584 + (t3525 * t3611 + t3564) * t3171;
t3036 = -t3585 + (t3531 * t3610 + t3567) * t3171;
t3035 = -t3586 + (t3527 * t3611 + t3570) * t3169;
t3034 = -t3587 + (t3533 * t3610 + t3573) * t3169;
t3033 = -t3588 + (t3529 * t3611 + t3576) * t3167;
t3032 = -t3589 + (t3535 * t3610 + t3579) * t3167;
t3029 = (t3136 * t3482 + (t3136 - t3355) * qJ(3,1) + (-t3097 * t3254 + t3356) * pkin(2)) * t3171;
t3028 = (t3135 * t3482 + (t3135 + t3361) * qJ(3,1) + (-t3096 * t3254 - t3362) * pkin(2)) * t3171;
t3027 = (t3134 * t3483 + (t3134 - t3357) * qJ(3,2) + (-t3095 * t3251 + t3358) * pkin(2)) * t3169;
t3026 = (t3133 * t3483 + (t3133 + t3363) * qJ(3,2) + (-t3094 * t3251 - t3364) * pkin(2)) * t3169;
t3025 = (t3132 * t3484 + (t3132 - t3359) * qJ(3,3) + (-t3093 * t3248 + t3360) * pkin(2)) * t3167;
t3024 = (t3131 * t3484 + (t3131 + t3365) * qJ(3,3) + (-t3092 * t3248 - t3366) * pkin(2)) * t3167;
t3019 = -pkin(5) * t3584 + (pkin(5) * t3564 - t3525 * t3614) * t3171;
t3018 = -pkin(5) * t3586 + (pkin(5) * t3570 - t3527 * t3615) * t3169;
t3017 = -pkin(5) * t3588 + (pkin(5) * t3576 - t3529 * t3616) * t3167;
t3016 = -pkin(5) * t3585 + (pkin(5) * t3567 + t3614 * t3531) * t3171;
t3015 = -pkin(5) * t3587 + (pkin(5) * t3573 + t3615 * t3533) * t3169;
t3014 = -pkin(5) * t3589 + (pkin(5) * t3579 + t3616 * t3535) * t3167;
t1 = [(t3194 * t3551 + t3195 * t3545 + t3196 * t3539) * MDP(1) + (t3194 * t3421 + t3195 * t3413 + t3196 * t3405) * MDP(4) + (t3132 ^ 2 * t3548 + t3134 ^ 2 * t3542 + t3136 ^ 2 * t3536) * MDP(8) + (-t3093 * t3440 - t3095 * t3438 - t3097 * t3436) * MDP(11) + (-t3093 * t3310 - t3095 * t3305 - t3097 * t3300 - t3328 * t3565 - t3337 * t3571 - t3346 * t3577) * MDP(12) + MDP(15) + (t3194 * t3344 + t3195 * t3335 + t3196 * t3326) * t3609 - 0.2e1 * t3261 * MDP(6) - 0.2e1 * t3260 * MDP(7) + ((t3046 * t3097 * MDP(14) + (t3052 * MDP(11) + t3118 * MDP(13) + t3029 * MDP(14)) * t3136) * t3254 + (-MDP(10) * t3112 - MDP(11) * t3076 - MDP(12) * t3037 - MDP(13) * t3067 - MDP(14) * t3019 - MDP(9) * t3106) * t3525) * t3171 + ((t3044 * t3095 * MDP(14) + (t3050 * MDP(11) + t3116 * MDP(13) + t3027 * MDP(14)) * t3134) * t3251 + (-MDP(10) * t3110 - MDP(11) * t3074 - MDP(12) * t3035 - MDP(13) * t3065 - MDP(14) * t3018 - MDP(9) * t3104) * t3527) * t3169 + ((t3042 * t3093 * MDP(14) + (t3048 * MDP(11) + t3114 * MDP(13) + t3025 * MDP(14)) * t3132) * t3248 + (-MDP(10) * t3108 - MDP(11) * t3072 - MDP(12) * t3033 - MDP(13) * t3063 - MDP(14) * t3017 - MDP(9) * t3102) * t3529) * t3167 + (MDP(10) * t3260 + MDP(9) * t3261) * pkin(5); (-t3101 * t3422 - t3103 * t3414 - t3105 * t3406 + (-t3132 * t3312 - t3134 * t3307 - t3136 * t3302) * pkin(5)) * MDP(9) + (-t3107 * t3422 - t3109 * t3414 - t3111 * t3406 + (-t3132 * t3311 - t3134 * t3306 - t3136 * t3301) * pkin(5)) * MDP(10) + (-t3093 * t3441 - t3095 * t3439 - t3097 * t3437 + (t3051 * t3563 - t3075 * t3525) * t3171 + (t3049 * t3569 - t3073 * t3527) * t3169 + (t3047 * t3575 - t3071 * t3529) * t3167) * MDP(11) + ((-t3205 * t3171 * t3036 + t3202 * t3295 * t3537) * t3238 + (-t3204 * t3169 * t3034 + t3201 * t3296 * t3543) * t3236 + (-t3203 * t3167 * t3032 + t3200 * t3297 * t3549) * t3234) * MDP(12) + ((-t3066 * t3525 + t3117 * t3563) * t3171 + (-t3064 * t3527 + t3115 * t3569) * t3169 + (-t3062 * t3529 + t3113 * t3575) * t3167) * MDP(13) + ((-t3016 * t3525 + (t3028 * t3136 + t3045 * t3097) * t3254) * t3171 + (-t3015 * t3527 + (t3026 * t3134 + t3043 * t3095) * t3251) * t3169 + (-t3014 * t3529 + (t3024 * t3132 + t3041 * t3093) * t3248) * t3167) * MDP(14) + t3288; (-t3137 * t3422 - t3138 * t3414 - t3139 * t3406 + (t3132 * t3342 + t3134 * t3333 + t3136 * t3324) * pkin(5)) * MDP(9) + (-t3140 * t3422 - t3141 * t3414 - t3142 * t3406 + (t3132 * t3340 + t3134 * t3331 + t3136 * t3322) * pkin(5)) * MDP(10) + (t3093 * t3353 + t3095 * t3351 + t3097 * t3349 + (t3079 * t3563 - t3122 * t3525) * t3171 + (t3078 * t3569 - t3121 * t3527) * t3169 + (t3077 * t3575 - t3120 * t3529) * t3167) * MDP(11) + (-t3068 * t3422 - t3069 * t3414 - t3070 * t3406 - t3295 * t3400 - t3296 * t3408 - t3297 * t3416) * MDP(12) + ((-t3091 * t3525 + t3136 * t3560) * t3171 + (-t3090 * t3527 + t3134 * t3561) * t3169 + (-t3089 * t3529 + t3132 * t3562) * t3167) * MDP(13) + ((-t3040 * t3525 + (t3061 * t3136 + t3082 * t3097) * t3254) * t3171 + (-t3039 * t3527 + (t3060 * t3134 + t3081 * t3095) * t3251) * t3169 + (-t3038 * t3529 + (t3059 * t3132 + t3080 * t3093) * t3248) * t3167) * MDP(14) + t3286; (t3102 * t3423 + t3104 * t3415 + t3106 * t3407 + (t3131 * t3310 + t3133 * t3305 + t3135 * t3300) * pkin(5)) * MDP(9) + (t3108 * t3423 + t3110 * t3415 + t3112 * t3407 + (t3131 * t3309 + t3133 * t3304 + t3135 * t3299) * pkin(5)) * MDP(10) + (-t3092 * t3440 - t3094 * t3438 - t3096 * t3436 + (t3052 * t3566 + t3076 * t3531) * t3171 + (t3050 * t3572 + t3074 * t3533) * t3169 + (t3048 * t3578 + t3072 * t3535) * t3167) * MDP(11) + ((t3202 * t3171 * t3037 + t3205 * t3274) * t3238 + (t3201 * t3169 * t3035 + t3204 * t3275) * t3236 + (t3200 * t3167 * t3033 + t3203 * t3276) * t3234) * MDP(12) + ((t3067 * t3531 + t3118 * t3566) * t3171 + (t3065 * t3533 + t3116 * t3572) * t3169 + (t3063 * t3535 + t3114 * t3578) * t3167) * MDP(13) + ((t3019 * t3531 + (t3029 * t3135 + t3046 * t3096) * t3254) * t3171 + (t3018 * t3533 + (t3027 * t3133 + t3044 * t3094) * t3251) * t3169 + (t3017 * t3535 + (t3025 * t3131 + t3042 * t3092) * t3248) * t3167) * MDP(14) + t3288; (t3191 * t3551 + t3192 * t3545 + t3193 * t3539) * MDP(1) + (t3191 * t3421 + t3192 * t3413 + t3193 * t3405) * MDP(4) + (t3131 ^ 2 * t3548 + t3133 ^ 2 * t3542 + t3135 ^ 2 * t3536) * MDP(8) + (-t3092 * t3441 - t3094 * t3439 - t3096 * t3437) * MDP(11) + (t3092 * t3312 + t3094 * t3307 + t3096 * t3302 + t3329 * t3568 + t3338 * t3574 + t3347 * t3580) * MDP(12) + MDP(15) + (t3191 * t3344 + t3192 * t3335 + t3193 * t3326) * t3609 + t3263 * t3608 + t3262 * t3607 + ((t3045 * t3096 * MDP(14) + (t3051 * MDP(11) + t3117 * MDP(13) + t3028 * MDP(14)) * t3135) * t3254 + (MDP(10) * t3111 + MDP(11) * t3075 + MDP(12) * t3036 + MDP(13) * t3066 + MDP(14) * t3016 + MDP(9) * t3105) * t3531) * t3171 + ((t3043 * t3094 * MDP(14) + (t3049 * MDP(11) + t3115 * MDP(13) + t3026 * MDP(14)) * t3133) * t3251 + (MDP(10) * t3109 + MDP(11) * t3073 + MDP(12) * t3034 + MDP(13) * t3064 + MDP(14) * t3015 + MDP(9) * t3103) * t3533) * t3169 + ((t3041 * t3092 * MDP(14) + (t3047 * MDP(11) + t3113 * MDP(13) + t3024 * MDP(14)) * t3131) * t3248 + (MDP(10) * t3107 + MDP(11) * t3071 + MDP(12) * t3032 + MDP(13) * t3062 + MDP(14) * t3014 + MDP(9) * t3101) * t3535) * t3167 + (-MDP(10) * t3262 - MDP(9) * t3263) * pkin(5); (t3137 * t3423 + t3138 * t3415 + t3139 * t3407 + (t3131 * t3342 + t3133 * t3333 + t3135 * t3324) * pkin(5)) * MDP(9) + (t3140 * t3423 + t3141 * t3415 + t3142 * t3407 + (t3131 * t3340 + t3133 * t3331 + t3135 * t3322) * pkin(5)) * MDP(10) + (t3092 * t3353 + t3094 * t3351 + t3096 * t3349 + (t3079 * t3566 + t3122 * t3531) * t3171 + (t3078 * t3572 + t3121 * t3533) * t3169 + (t3077 * t3578 + t3120 * t3535) * t3167) * MDP(11) + (t3068 * t3423 + t3069 * t3415 + t3070 * t3407 + t3240 * t3276 + t3242 * t3275 + t3244 * t3274) * MDP(12) + ((t3091 * t3531 + t3135 * t3560) * t3171 + (t3090 * t3533 + t3133 * t3561) * t3169 + (t3089 * t3535 + t3131 * t3562) * t3167) * MDP(13) + ((t3040 * t3531 + (t3061 * t3135 + t3082 * t3096) * t3254) * t3171 + (t3039 * t3533 + (t3060 * t3133 + t3081 * t3094) * t3251) * t3169 + (t3038 * t3535 + (t3059 * t3131 + t3080 * t3092) * t3248) * t3167) * MDP(14) + t3287; (-t3102 * t3553 - t3104 * t3547 - t3106 * t3541 + (-t3203 * t3291 - t3204 * t3290 - t3205 * t3289) * pkin(5)) * MDP(9) + (-t3108 * t3553 - t3110 * t3547 - t3112 * t3541 + (-t3203 * t3318 - t3204 * t3316 - t3205 * t3314) * pkin(5)) * MDP(10) + (-t3132 * t3435 - t3134 * t3434 - t3136 * t3433 + (-t3052 * t3424 - t3076 * t3244) * t3171 + (-t3050 * t3427 - t3074 * t3242) * t3169 + (-t3048 * t3430 - t3072 * t3240) * t3167) * MDP(11) + (-t3033 * t3553 - t3035 * t3547 - t3037 * t3541 + t3283 * t3328 + t3284 * t3337 + t3285 * t3346) * MDP(12) + ((-t3067 * t3244 - t3118 * t3424) * t3171 + (-t3065 * t3242 - t3116 * t3427) * t3169 + (-t3063 * t3240 - t3114 * t3430) * t3167) * MDP(13) + ((-t3019 * t3244 + (-t3029 * t3554 + t3046 * t3148) * t3254) * t3171 + (-t3018 * t3242 + (-t3027 * t3556 + t3044 * t3147) * t3251) * t3169 + (-t3017 * t3240 + (-t3025 * t3558 + t3042 * t3146) * t3248) * t3167) * MDP(14) + t3286; (-t3101 * t3553 - t3103 * t3547 - t3105 * t3541 + (t3200 * t3291 + t3201 * t3290 + t3202 * t3289) * pkin(5)) * MDP(9) + (-t3107 * t3553 - t3109 * t3547 - t3111 * t3541 + (t3200 * t3318 + t3201 * t3316 + t3202 * t3314) * pkin(5)) * MDP(10) + (-t3131 * t3435 - t3133 * t3434 - t3135 * t3433 + (-t3051 * t3424 - t3075 * t3244) * t3171 + (-t3049 * t3427 - t3073 * t3242) * t3169 + (-t3047 * t3430 - t3071 * t3240) * t3167) * MDP(11) + (-t3032 * t3553 - t3034 * t3547 - t3036 * t3541 - t3283 * t3329 - t3284 * t3338 - t3285 * t3347) * MDP(12) + ((-t3066 * t3244 - t3117 * t3424) * t3171 + (-t3064 * t3242 - t3115 * t3427) * t3169 + (-t3062 * t3240 - t3113 * t3430) * t3167) * MDP(13) + ((-t3016 * t3244 + (-t3028 * t3554 + t3045 * t3148) * t3254) * t3171 + (-t3015 * t3242 + (-t3026 * t3556 + t3043 * t3147) * t3251) * t3169 + (-t3014 * t3240 + (-t3024 * t3558 + t3041 * t3146) * t3248) * t3167) * MDP(14) + t3287; (t3538 + t3544 + t3550) * MDP(1) + (t3218 * t3550 + t3220 * t3544 + t3222 * t3538) * MDP(4) + (t3152 ^ 2 * t3224 * t3548 + t3153 ^ 2 * t3226 * t3542 + t3154 ^ 2 * t3228 * t3536) * MDP(8) + (t3146 * t3353 + t3147 * t3351 + t3148 * t3349) * MDP(11) + (-t3146 * t3342 - t3147 * t3333 - t3148 * t3324 + t3176 * t3317 + t3177 * t3315 + t3178 * t3313) * MDP(12) + MDP(15) + (t3225 * t3420 + t3227 * t3412 + t3229 * t3404) * t3609 + t3259 * t3608 + t3264 * t3607 + ((t3082 * t3148 * MDP(14) + (-MDP(11) * t3079 - MDP(13) * t3145 - MDP(14) * t3061) * t3554) * t3254 + (-MDP(10) * t3142 - MDP(11) * t3122 - MDP(12) * t3070 - MDP(13) * t3091 - MDP(14) * t3040 - MDP(9) * t3139) * t3244) * t3171 + ((t3081 * t3147 * MDP(14) + (-MDP(11) * t3078 - MDP(13) * t3144 - MDP(14) * t3060) * t3556) * t3251 + (-MDP(10) * t3141 - MDP(11) * t3121 - MDP(12) * t3069 - MDP(13) * t3090 - MDP(14) * t3039 - MDP(9) * t3138) * t3242) * t3169 + ((t3080 * t3146 * MDP(14) + (-MDP(11) * t3077 - MDP(13) * t3143 - MDP(14) * t3059) * t3558) * t3248 + (-MDP(10) * t3140 - MDP(11) * t3120 - MDP(12) * t3068 - MDP(13) * t3089 - MDP(14) * t3038 - MDP(9) * t3137) * t3240) * t3167 + (-MDP(10) * t3264 - MDP(9) * t3259) * pkin(5);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
