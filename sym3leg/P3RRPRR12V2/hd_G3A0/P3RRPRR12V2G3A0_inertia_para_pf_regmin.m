% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V2G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:28:14
% EndTime: 2020-08-06 19:28:34
% DurationCPUTime: 20.38s
% Computational Cost: add. (16182->701), mult. (20970->1416), div. (2340->12), fcn. (16875->18), ass. (0->548)
t943 = sin(qJ(2,1));
t905 = t943 * qJ(3,1);
t1306 = t905 + pkin(1);
t949 = cos(qJ(2,1));
t1328 = t1306 * t949;
t941 = sin(qJ(2,2));
t904 = t941 * qJ(3,2);
t1307 = t904 + pkin(1);
t947 = cos(qJ(2,2));
t1327 = t1307 * t947;
t939 = sin(qJ(2,3));
t903 = t939 * qJ(3,3);
t1308 = t903 + pkin(1);
t945 = cos(qJ(2,3));
t1326 = t1308 * t945;
t934 = t949 ^ 2;
t989 = 0.2e1 * pkin(2) * t934 + 0.2e1 * t1328;
t932 = t947 ^ 2;
t990 = 0.2e1 * pkin(2) * t932 + 0.2e1 * t1327;
t930 = t945 ^ 2;
t991 = 0.2e1 * pkin(2) * t930 + 0.2e1 * t1326;
t946 = cos(qJ(1,3));
t951 = pkin(5) - pkin(6);
t1197 = t951 * t946;
t952 = pkin(2) + pkin(3);
t1208 = t945 * t952;
t879 = t1208 + t1308;
t940 = sin(qJ(1,3));
t858 = t879 * t940 - t1197;
t1269 = t858 * t930;
t948 = cos(qJ(1,2));
t1196 = t951 * t948;
t1204 = t947 * t952;
t880 = t1204 + t1307;
t942 = sin(qJ(1,2));
t859 = t880 * t942 - t1196;
t1267 = t859 * t932;
t950 = cos(qJ(1,1));
t1195 = t951 * t950;
t1200 = t949 * t952;
t881 = t1200 + t1306;
t944 = sin(qJ(1,1));
t860 = t881 * t944 - t1195;
t1265 = t860 * t934;
t936 = legFrame(3,2);
t906 = sin(t936);
t909 = cos(t936);
t1325 = t906 * t909;
t937 = legFrame(2,2);
t907 = sin(t937);
t910 = cos(t937);
t1324 = t907 * t910;
t938 = legFrame(1,2);
t908 = sin(t938);
t911 = cos(t938);
t1323 = t908 * t911;
t878 = 0.1e1 / t881 ^ 2;
t960 = 0.1e1 / qJ(3,1);
t1247 = t878 * t960;
t1231 = (qJ(3,1) + t952) * (-qJ(3,1) + t952);
t1100 = t950 * t1231;
t1315 = -0.2e1 * t952;
t1183 = qJ(3,1) * t1315;
t1234 = t911 * t952;
t1240 = t908 * t952;
t1304 = qJ(3,1) * t911;
t1189 = pkin(1) * t950 + t944 * t951;
t863 = qJ(3,1) * t950 + t1189 * t943;
t1213 = t943 * t950;
t1159 = qJ(3,1) * t1213;
t868 = 0.2e1 * t1159 + t1189;
t872 = pkin(1) * qJ(3,1) - t943 * t1231;
t890 = pkin(1) * t943 + qJ(3,1);
t803 = (t911 * t1100 + t908 * t1183) * t934 + (t868 * t1234 - t872 * t908) * t949 + t863 * t1304 + t890 * t1240;
t1198 = t950 * t952;
t1212 = t943 * t952;
t1305 = qJ(3,1) * t908;
t869 = t1159 + t1189;
t840 = (t911 * t1198 - t1305) * t934 + (t908 * t1212 + t869 * t911) * t949 + t908 * t890;
t884 = -pkin(2) * t943 + qJ(3,1) * t949;
t983 = (t803 * t943 + t840 * t884) * t1247;
t802 = (-t908 * t1100 + t911 * t1183) * t934 + (-t868 * t1240 - t872 * t911) * t949 - t863 * t1305 + t890 * t1234;
t839 = (-t908 * t1198 - t1304) * t934 + (t911 * t1212 - t869 * t908) * t949 + t911 * t890;
t986 = (t802 * t943 + t839 * t884) * t1247;
t876 = 0.1e1 / t880 ^ 2;
t957 = 0.1e1 / qJ(3,2);
t1253 = t876 * t957;
t1232 = (qJ(3,2) + t952) * (-qJ(3,2) + t952);
t1101 = t948 * t1232;
t1182 = qJ(3,2) * t1315;
t1236 = t910 * t952;
t1242 = t907 * t952;
t1302 = qJ(3,2) * t910;
t1190 = pkin(1) * t948 + t942 * t951;
t862 = qJ(3,2) * t948 + t1190 * t941;
t1219 = t941 * t948;
t1158 = qJ(3,2) * t1219;
t866 = 0.2e1 * t1158 + t1190;
t871 = pkin(1) * qJ(3,2) - t941 * t1232;
t889 = pkin(1) * t941 + qJ(3,2);
t801 = (t910 * t1101 + t907 * t1182) * t932 + (t866 * t1236 - t871 * t907) * t947 + t862 * t1302 + t889 * t1242;
t1202 = t948 * t952;
t1218 = t941 * t952;
t1303 = qJ(3,2) * t907;
t867 = t1158 + t1190;
t838 = (t910 * t1202 - t1303) * t932 + (t907 * t1218 + t867 * t910) * t947 + t907 * t889;
t883 = -pkin(2) * t941 + qJ(3,2) * t947;
t984 = (t801 * t941 + t838 * t883) * t1253;
t800 = (-t907 * t1101 + t910 * t1182) * t932 + (-t866 * t1242 - t871 * t910) * t947 - t862 * t1303 + t889 * t1236;
t837 = (-t907 * t1202 - t1302) * t932 + (t910 * t1218 - t867 * t907) * t947 + t910 * t889;
t987 = (t800 * t941 + t837 * t883) * t1253;
t874 = 0.1e1 / t879 ^ 2;
t954 = 0.1e1 / qJ(3,3);
t1259 = t874 * t954;
t1233 = (qJ(3,3) + t952) * (-qJ(3,3) + t952);
t1102 = t946 * t1233;
t1181 = qJ(3,3) * t1315;
t1238 = t909 * t952;
t1244 = t906 * t952;
t1300 = qJ(3,3) * t909;
t1191 = pkin(1) * t946 + t940 * t951;
t861 = qJ(3,3) * t946 + t1191 * t939;
t1225 = t939 * t946;
t1157 = qJ(3,3) * t1225;
t864 = 0.2e1 * t1157 + t1191;
t870 = pkin(1) * qJ(3,3) - t939 * t1233;
t888 = pkin(1) * t939 + qJ(3,3);
t799 = (t909 * t1102 + t906 * t1181) * t930 + (t864 * t1238 - t870 * t906) * t945 + t861 * t1300 + t888 * t1244;
t1206 = t946 * t952;
t1224 = t939 * t952;
t1301 = qJ(3,3) * t906;
t865 = t1157 + t1191;
t836 = (t909 * t1206 - t1301) * t930 + (t906 * t1224 + t865 * t909) * t945 + t906 * t888;
t882 = -pkin(2) * t939 + qJ(3,3) * t945;
t985 = (t799 * t939 + t836 * t882) * t1259;
t798 = (-t906 * t1102 + t909 * t1181) * t930 + (-t864 * t1244 - t870 * t909) * t945 - t861 * t1301 + t888 * t1238;
t835 = (-t906 * t1206 - t1300) * t930 + (t909 * t1224 - t865 * t906) * t945 + t909 * t888;
t988 = (t798 * t939 + t835 * t882) * t1259;
t1187 = 0.2e1 * pkin(2);
t1188 = pkin(1) ^ 2 + pkin(5) ^ 2;
t1319 = -0.2e1 * pkin(1);
t959 = qJ(3,1) ^ 2;
t963 = pkin(2) ^ 2;
t1322 = t1187 * t1328 - t905 * t1319 + (-t959 + t963) * t934 + t1188 + t959;
t956 = qJ(3,2) ^ 2;
t1321 = t1187 * t1327 - t904 * t1319 + (-t956 + t963) * t932 + t1188 + t956;
t953 = qJ(3,3) ^ 2;
t1320 = t1187 * t1326 - t903 * t1319 + (-t953 + t963) * t930 + t1188 + t953;
t974 = (0.2e1 * t934 - 0.2e1) * qJ(3,1) - 0.2e1 * (pkin(2) * t949 + pkin(1)) * t943;
t975 = (0.2e1 * t932 - 0.2e1) * qJ(3,2) - 0.2e1 * (pkin(2) * t947 + pkin(1)) * t941;
t976 = (0.2e1 * t930 - 0.2e1) * qJ(3,3) - 0.2e1 * (pkin(2) * t945 + pkin(1)) * t939;
t1318 = 0.2e1 * pkin(1);
t1317 = -0.2e1 * pkin(5);
t1316 = 0.2e1 * pkin(5);
t1311 = pkin(5) * t946;
t1310 = pkin(5) * t948;
t1309 = pkin(5) * t950;
t1245 = t906 * t940;
t1284 = t835 * t945;
t873 = 0.1e1 / t879;
t1262 = t873 * t954;
t1171 = pkin(2) * t1262;
t789 = t798 * t1262;
t1293 = (t835 * t1171 - t789) * t939;
t738 = -t1293 + (t1245 * t1316 + t1284) * t873;
t1299 = t738 * t873;
t1239 = t909 * t940;
t1282 = t836 * t945;
t790 = t799 * t1262;
t1292 = (t836 * t1171 - t790) * t939;
t739 = -t1292 + (t1239 * t1317 + t1282) * t873;
t1298 = t739 * t873;
t1243 = t907 * t942;
t1280 = t837 * t947;
t875 = 0.1e1 / t880;
t1256 = t875 * t957;
t1170 = pkin(2) * t1256;
t791 = t800 * t1256;
t1291 = (t837 * t1170 - t791) * t941;
t740 = -t1291 + (t1243 * t1316 + t1280) * t875;
t1297 = t740 * t875;
t1237 = t910 * t942;
t1278 = t838 * t947;
t792 = t801 * t1256;
t1290 = (t838 * t1170 - t792) * t941;
t741 = -t1290 + (t1237 * t1317 + t1278) * t875;
t1296 = t741 * t875;
t1241 = t908 * t944;
t1276 = t839 * t949;
t877 = 0.1e1 / t881;
t1250 = t877 * t960;
t1169 = pkin(2) * t1250;
t793 = t802 * t1250;
t1289 = (t839 * t1169 - t793) * t943;
t742 = -t1289 + (t1241 * t1316 + t1276) * t877;
t1295 = t742 * t877;
t1235 = t911 * t944;
t1274 = t840 * t949;
t794 = t803 * t1250;
t1288 = (t840 * t1169 - t794) * t943;
t743 = -t1288 + (t1235 * t1317 + t1274) * t877;
t1294 = t743 * t877;
t1268 = t858 * t945;
t1174 = pkin(2) * t1268;
t1230 = t930 * t940;
t852 = -t1230 * t1233 - ((0.2e1 * t903 + pkin(1)) * t940 - t1197) * t1208 - qJ(3,3) * (-t939 * t1197 + t888 * t940);
t1003 = (t852 + t1174) * t954;
t1287 = t873 * t1003 * t939;
t1266 = t859 * t947;
t1173 = pkin(2) * t1266;
t1229 = t932 * t942;
t853 = -t1229 * t1232 - ((0.2e1 * t904 + pkin(1)) * t942 - t1196) * t1204 - qJ(3,2) * (-t941 * t1196 + t889 * t942);
t1002 = (t853 + t1173) * t957;
t1286 = t875 * t1002 * t941;
t1264 = t860 * t949;
t1172 = pkin(2) * t1264;
t1228 = t934 * t944;
t854 = -t1228 * t1231 - ((0.2e1 * t905 + pkin(1)) * t944 - t1195) * t1200 - qJ(3,1) * (-t943 * t1195 + t890 * t944);
t1001 = (t854 + t1172) * t960;
t1285 = t877 * t1001 * t943;
t1283 = t835 * t954;
t1281 = t836 * t954;
t1279 = t837 * t957;
t1277 = t838 * t957;
t1275 = t839 * t960;
t1273 = t840 * t960;
t849 = (-0.2e1 * t858 - t1311) * t945 * t873;
t1272 = t849 * t954;
t850 = (-0.2e1 * t859 - t1310) * t947 * t875;
t1271 = t850 * t957;
t851 = (-0.2e1 * t860 - t1309) * t949 * t877;
t1270 = t851 * t960;
t1263 = t873 * t946;
t925 = t940 ^ 2;
t1261 = t874 * t925;
t931 = t946 ^ 2;
t1260 = t874 * t931;
t1258 = t874 / qJ(3,3) ^ 2;
t1257 = t875 * t948;
t927 = t942 ^ 2;
t1255 = t876 * t927;
t933 = t948 ^ 2;
t1254 = t876 * t933;
t1252 = t876 / qJ(3,2) ^ 2;
t1251 = t877 * t950;
t929 = t944 ^ 2;
t1249 = t878 * t929;
t935 = t950 ^ 2;
t1248 = t878 * t935;
t1246 = t878 / qJ(3,1) ^ 2;
t1227 = t939 * t940;
t1226 = t939 * t945;
t1223 = t939 * t954;
t1222 = t940 * t945;
t1221 = t941 * t942;
t1220 = t941 * t947;
t1217 = t941 * t957;
t1216 = t942 * t947;
t1215 = t943 * t944;
t1214 = t943 * t949;
t1211 = t943 * t960;
t1210 = t944 * t949;
t1209 = t945 * t946;
t1207 = t945 * t954;
t1205 = t947 * t948;
t1203 = t947 * t957;
t1201 = t949 * t950;
t1199 = t949 * t960;
t1194 = t954 * t963;
t1193 = t957 * t963;
t1192 = t960 * t963;
t1180 = pkin(2) * t1283;
t1179 = pkin(2) * t1281;
t1178 = pkin(2) * t1279;
t1177 = pkin(2) * t1277;
t1176 = pkin(2) * t1275;
t1175 = pkin(2) * t1273;
t1168 = pkin(5) * t1225;
t1167 = pkin(5) * t1223;
t1166 = pkin(5) * t1219;
t1165 = pkin(5) * t1217;
t1164 = pkin(5) * t1213;
t1163 = pkin(5) * t1211;
t1162 = pkin(5) * t1207;
t1161 = pkin(5) * t1203;
t1160 = pkin(5) * t1199;
t1156 = t799 * t1258;
t1155 = t801 * t1252;
t1154 = t803 * t1246;
t1153 = t836 * t1258;
t1152 = t838 * t1252;
t1151 = t840 * t1246;
t1150 = t852 * t1258;
t1149 = t853 * t1252;
t1148 = t854 * t1246;
t1147 = t858 * t1230;
t1146 = t954 * t1269;
t1145 = t858 * t1207;
t1144 = t859 * t1229;
t1143 = t957 * t1267;
t1142 = t859 * t1203;
t1141 = t860 * t1228;
t1140 = t960 * t1265;
t1139 = t860 * t1199;
t1138 = t873 * t1245;
t1137 = t873 * t1239;
t924 = t939 ^ 2;
t1136 = t924 * t1261;
t1135 = t874 * t1226;
t1134 = t874 * t1223;
t1133 = t874 * t940 * t946;
t1132 = t940 * t1259;
t1131 = t946 * t1259;
t1130 = t875 * t1243;
t1129 = t875 * t1237;
t926 = t941 ^ 2;
t1128 = t926 * t1255;
t1127 = t876 * t1220;
t1126 = t876 * t1217;
t1125 = t876 * t942 * t948;
t1124 = t942 * t1253;
t1123 = t948 * t1253;
t1122 = t877 * t1241;
t1121 = t877 * t1235;
t928 = t943 ^ 2;
t1120 = t928 * t1249;
t1119 = t878 * t1214;
t1118 = t878 * t1211;
t1117 = t878 * t944 * t950;
t1116 = t944 * t1247;
t1115 = t950 * t1247;
t1114 = t906 * t1227;
t1113 = t906 * t1222;
t1112 = t907 * t1221;
t1111 = t907 * t1216;
t1110 = t908 * t1215;
t1109 = t908 * t1210;
t1108 = t909 * t1227;
t1107 = t909 * t1222;
t1106 = t910 * t1221;
t1105 = t910 * t1216;
t1104 = t911 * t1215;
t1103 = t911 * t1210;
t1090 = t835 * t1167;
t1089 = t835 * t1162;
t1088 = t836 * t1167;
t1087 = t836 * t1162;
t1086 = t837 * t1165;
t1085 = t837 * t1161;
t1084 = t838 * t1165;
t1083 = t838 * t1161;
t1082 = t839 * t1163;
t1081 = t839 * t1160;
t1080 = t840 * t1163;
t1079 = t840 * t1160;
t1078 = pkin(5) * t1146;
t1077 = pkin(5) * t1143;
t1076 = pkin(5) * t1140;
t1075 = pkin(5) * t1114;
t1074 = pkin(5) * t1113;
t1073 = pkin(5) * t1112;
t1072 = pkin(5) * t1111;
t1071 = pkin(5) * t1110;
t1070 = pkin(5) * t1109;
t1069 = pkin(5) * t1108;
t1068 = pkin(5) * t1107;
t1067 = pkin(5) * t1106;
t1066 = pkin(5) * t1105;
t1065 = pkin(5) * t1104;
t1064 = pkin(5) * t1103;
t1063 = t874 * t1146;
t1062 = t1258 * t1268;
t1061 = t939 * t1145;
t1060 = t876 * t1143;
t1059 = t1252 * t1266;
t1058 = t941 * t1142;
t1057 = t878 * t1140;
t1056 = t1246 * t1264;
t1055 = t943 * t1139;
t1054 = t1261 * t1325;
t1053 = t924 * t1133;
t1052 = t925 * t1135;
t1051 = t939 * t1132;
t1050 = t939 * t1131;
t1049 = t945 * t1132;
t1048 = t945 * t1131;
t1047 = t1255 * t1324;
t1046 = t926 * t1125;
t1045 = t927 * t1127;
t1044 = t941 * t1124;
t1043 = t941 * t1123;
t1042 = t947 * t1124;
t1041 = t947 * t1123;
t1040 = t1249 * t1323;
t1039 = t928 * t1117;
t1038 = t929 * t1119;
t1037 = t943 * t1116;
t1036 = t943 * t1115;
t1035 = t949 * t1116;
t1034 = t949 * t1115;
t1030 = t940 * t1063;
t1029 = t874 * t1061;
t1028 = t942 * t1060;
t1027 = t876 * t1058;
t1026 = t944 * t1057;
t1025 = t878 * t1055;
t1024 = t906 * t1051;
t1023 = t906 * t1049;
t1022 = t909 * t1051;
t1021 = t909 * t1049;
t1020 = t1133 * t1226;
t1019 = t907 * t1044;
t1018 = t907 * t1042;
t1017 = t910 * t1044;
t1016 = t910 * t1042;
t1015 = t1125 * t1220;
t1014 = t908 * t1037;
t1013 = t908 * t1035;
t1012 = t911 * t1037;
t1011 = t911 * t1035;
t1010 = t1117 * t1214;
t1000 = t940 * t1029;
t999 = t942 * t1027;
t998 = t944 * t1025;
t997 = t882 * t1268 - t852 * t939;
t996 = t883 * t1266 - t853 * t941;
t995 = t884 * t1264 - t854 * t943;
t982 = t997 * t1259;
t981 = t996 * t1253;
t980 = t995 * t1247;
t979 = (-t835 * t909 + t836 * t906) * t1132;
t978 = (-t837 * t910 + t838 * t907) * t1124;
t977 = (-t839 * t911 + t840 * t908) * t1116;
t970 = t950 * t1057 + t948 * t1060 + t946 * t1063;
t969 = t839 * t1014 + t837 * t1019 + t835 * t1024;
t968 = t839 * t1013 + t837 * t1018 + t835 * t1023;
t967 = t840 * t1012 + t838 * t1017 + t836 * t1022;
t966 = t840 * t1011 + t838 * t1016 + t836 * t1021;
t965 = t950 * t1025 + t948 * t1027 + t946 * t1029;
t902 = t911 ^ 2;
t901 = t910 ^ 2;
t900 = t909 ^ 2;
t899 = t908 ^ 2;
t898 = t907 ^ 2;
t897 = t906 ^ 2;
t857 = pkin(5) * t877 * t1055;
t856 = pkin(5) * t875 * t1058;
t855 = pkin(5) * t873 * t1061;
t848 = (t1213 * t1318 + t1076) * t877;
t847 = (t1219 * t1318 + t1077) * t875;
t846 = (t1225 * t1318 + t1078) * t873;
t845 = t877 * t1201 * t1319 + t857;
t844 = t875 * t1205 * t1319 + t856;
t843 = t873 * t1209 * t1319 + t855;
t842 = t911 * t1117 + t910 * t1125 + t909 * t1133;
t841 = -t908 * t1117 - t907 * t1125 - t906 * t1133;
t834 = -t1040 - t1047 - t1054;
t833 = t911 * t1039 + t910 * t1046 + t909 * t1053;
t832 = -t908 * t1039 - t907 * t1046 - t906 * t1053;
t831 = -t928 * t1040 - t926 * t1047 - t924 * t1054;
t830 = 0.2e1 * t911 * t1010 + 0.2e1 * t910 * t1015 + 0.2e1 * t909 * t1020;
t829 = -0.2e1 * t908 * t1010 - 0.2e1 * t907 * t1015 - 0.2e1 * t906 * t1020;
t828 = -t989 * t1251 + t857;
t827 = -t990 * t1257 + t856;
t826 = -t991 * t1263 + t855;
t825 = -0.2e1 * t1038 * t1323 - 0.2e1 * t1045 * t1324 - 0.2e1 * t1052 * t1325;
t824 = (0.2e1 * t840 - t1064) * t877;
t823 = (0.2e1 * t839 + t1070) * t877;
t822 = (0.2e1 * t838 - t1066) * t875;
t821 = (0.2e1 * t837 + t1072) * t875;
t820 = (0.2e1 * t836 - t1068) * t873;
t819 = (0.2e1 * t835 + t1074) * t873;
t818 = (t1104 * t1318 - t1079) * t877;
t817 = (t1110 * t1319 - t1081) * t877;
t816 = (t1106 * t1318 - t1083) * t875;
t815 = (t1112 * t1319 - t1085) * t875;
t814 = (t1108 * t1318 - t1087) * t873;
t813 = (t1114 * t1319 - t1089) * t873;
t812 = (t1103 * t1319 - t1080) * t877;
t811 = (t1109 * t1318 - t1082) * t877;
t810 = (t1105 * t1319 - t1084) * t875;
t809 = (t1111 * t1318 - t1086) * t875;
t808 = (t1107 * t1319 - t1088) * t873;
t807 = (t1113 * t1318 - t1090) * t873;
t797 = (t950 * t974 - t1076) * t877;
t796 = (t975 * t948 - t1077) * t875;
t795 = (t976 * t946 - t1078) * t873;
t788 = (t1001 - t1164) * t877;
t787 = (t1002 - t1166) * t875;
t786 = (t1003 - t1168) * t873;
t785 = (t1164 + (-t854 - 0.2e1 * t1172) * t960) * t877;
t784 = (t1166 + (-t853 - 0.2e1 * t1173) * t957) * t875;
t783 = (t1168 + (-t852 - 0.2e1 * t1174) * t954) * t873;
t782 = (-t989 * t1235 - t1080) * t877;
t781 = (t1241 * t989 - t1082) * t877;
t780 = (-t990 * t1237 - t1084) * t875;
t779 = (t1243 * t990 - t1086) * t875;
t778 = (-t991 * t1239 - t1088) * t873;
t777 = (t1245 * t991 - t1090) * t873;
t776 = t1285 + (-t1265 - 0.2e1 * t1309) * t877;
t775 = t1286 + (-t1267 - 0.2e1 * t1310) * t875;
t774 = t1287 + (-t1269 - 0.2e1 * t1311) * t873;
t773 = (t974 * t1235 + t1079) * t877;
t772 = (-t1241 * t974 + t1081) * t877;
t771 = (t975 * t1237 + t1083) * t875;
t770 = (-t1243 * t975 + t1085) * t875;
t769 = (t976 * t1239 + t1087) * t873;
t768 = (-t1245 * t976 + t1089) * t873;
t767 = ((-t854 * t960 + t1164) * pkin(2) + (-t860 * t1192 + (-t860 - t1309) * qJ(3,1)) * t949) * t877;
t766 = ((-t853 * t957 + t1166) * pkin(2) + (-t859 * t1193 + (-t859 - t1310) * qJ(3,2)) * t947) * t875;
t765 = ((-t852 * t954 + t1168) * pkin(2) + (-t858 * t1194 + (-t858 - t1311) * qJ(3,3)) * t945) * t873;
t758 = -t794 + (t1065 + 0.2e1 * t1175) * t877;
t757 = -t793 + (-t1071 + 0.2e1 * t1176) * t877;
t756 = -t792 + (t1067 + 0.2e1 * t1177) * t875;
t755 = -t791 + (-t1073 + 0.2e1 * t1178) * t875;
t754 = -t790 + (t1069 + 0.2e1 * t1179) * t873;
t753 = -t789 + (-t1075 + 0.2e1 * t1180) * t873;
t752 = t794 + (-t1065 - t1175) * t877;
t751 = t793 + (t1071 - t1176) * t877;
t750 = t792 + (-t1067 - t1177) * t875;
t749 = t791 + (t1073 - t1178) * t875;
t748 = t790 + (-t1069 - t1179) * t873;
t747 = t789 + (t1075 - t1180) * t873;
t746 = pkin(5) * t1285 + (-pkin(5) * t1265 - t1322 * t950) * t877;
t745 = pkin(5) * t1286 + (-pkin(5) * t1267 - t1321 * t948) * t875;
t744 = pkin(5) * t1287 + (-pkin(5) * t1269 - t1320 * t946) * t873;
t737 = -t840 * t1056 - t838 * t1059 - t836 * t1062;
t736 = -t839 * t1056 - t837 * t1059 - t835 * t1062;
t735 = (t840 * t1192 + (t840 - t1064) * qJ(3,1) + (-t803 * t960 + t1065) * pkin(2)) * t877;
t734 = (t839 * t1192 + (t839 + t1070) * qJ(3,1) + (-t802 * t960 - t1071) * pkin(2)) * t877;
t733 = (t838 * t1193 + (t838 - t1066) * qJ(3,2) + (-t801 * t957 + t1067) * pkin(2)) * t875;
t732 = (t837 * t1193 + (t837 + t1072) * qJ(3,2) + (-t800 * t957 - t1073) * pkin(2)) * t875;
t731 = (t836 * t1194 + (t836 - t1068) * qJ(3,3) + (-t799 * t954 + t1069) * pkin(2)) * t873;
t730 = (t835 * t1194 + (t835 + t1074) * qJ(3,3) + (-t798 * t954 - t1075) * pkin(2)) * t873;
t729 = (t911 * t1141 - t840 * t1201) * t1247 + (t910 * t1144 - t838 * t1205) * t1253 + (t909 * t1147 - t836 * t1209) * t1259;
t728 = (-t908 * t1141 - t839 * t1201) * t1247 + (-t907 * t1144 - t837 * t1205) * t1253 + (-t906 * t1147 - t835 * t1209) * t1259;
t727 = (t860 * t1103 - t840 * t950) * t1118 + (t859 * t1105 - t838 * t948) * t1126 + (t858 * t1107 - t836 * t946) * t1134;
t726 = (-t860 * t1109 - t839 * t950) * t1118 + (-t859 * t1111 - t837 * t948) * t1126 + (-t858 * t1113 - t835 * t946) * t1134;
t725 = -pkin(5) * t1288 + (pkin(5) * t1274 - t1235 * t1322) * t877;
t724 = -pkin(5) * t1290 + (pkin(5) * t1278 - t1237 * t1321) * t875;
t723 = -pkin(5) * t1292 + (pkin(5) * t1282 - t1239 * t1320) * t873;
t722 = -pkin(5) * t1289 + (pkin(5) * t1276 + t1241 * t1322) * t877;
t721 = -pkin(5) * t1291 + (pkin(5) * t1280 + t1243 * t1321) * t875;
t720 = -pkin(5) * t1293 + (pkin(5) * t1284 + t1245 * t1320) * t873;
t719 = t839 * t1151 + t837 * t1152 + t835 * t1153;
t718 = t945 * t979 + t947 * t978 + t949 * t977;
t717 = t939 * t979 + t941 * t978 + t943 * t977;
t1 = [t902 * t1249 + t901 * t1255 + t900 * t1261, 0, 0, t1120 * t902 + t1128 * t901 + t1136 * t900, 0.2e1 * t1038 * t902 + 0.2e1 * t1045 * t901 + 0.2e1 * t1052 * t900, -0.2e1 * t967, -0.2e1 * t966, t840 ^ 2 * t1246 + t838 ^ 2 * t1252 + t836 ^ 2 * t1258, pkin(5) * t967 - t1121 * t812 - t1129 * t810 - t1137 * t808, pkin(5) * t966 - t1121 * t818 - t1129 * t816 - t1137 * t814, -t778 * t1137 - t780 * t1129 - t782 * t1121 + (t758 * t1250 - t1154) * t840 + (t756 * t1256 - t1155) * t838 + (t754 * t1262 - t1156) * t836, (-t983 - t1294) * t1235 + (-t984 - t1296) * t1237 + (-t985 - t1298) * t1239, (-t1235 * t773 + t1273 * t824) * t877 + (-t1237 * t771 + t1277 * t822) * t875 + (-t1239 * t769 + t1281 * t820) * t873, (-t725 * t1235 + (t735 * t840 + t752 * t803) * t960) * t877 + (-t724 * t1237 + (t733 * t838 + t750 * t801) * t957) * t875 + (-t723 * t1239 + (t731 * t836 + t748 * t799) * t954) * t873, 1; t834, 0, 0, t831, t825, t717, t718, t719, -t807 * t1137 - t809 * t1129 - t811 * t1121 + (-t1014 * t840 - t1019 * t838 - t1024 * t836) * pkin(5), -t813 * t1137 - t815 * t1129 - t817 * t1121 + (-t1013 * t840 - t1018 * t838 - t1023 * t836) * pkin(5), -t835 * t1156 - t837 * t1155 - t839 * t1154 + (-t1235 * t781 + t757 * t1273) * t877 + (-t1237 * t779 + t755 * t1277) * t875 + (-t1239 * t777 + t753 * t1281) * t873, (-t1295 * t911 + t908 * t983) * t944 + (-t1297 * t910 + t907 * t984) * t942 + (-t1299 * t909 + t906 * t985) * t940, (-t1235 * t772 + t1273 * t823) * t877 + (-t1237 * t770 + t1277 * t821) * t875 + (-t1239 * t768 + t1281 * t819) * t873, (-t722 * t1235 + (t734 * t840 + t751 * t803) * t960) * t877 + (-t721 * t1237 + (t732 * t838 + t749 * t801) * t957) * t875 + (-t720 * t1239 + (t730 * t836 + t747 * t799) * t954) * t873, 0; t842, 0, 0, t833, t830, t727, t729, t737, -t843 * t1137 - t844 * t1129 - t845 * t1121 + (t1036 * t840 + t1043 * t838 + t1050 * t836) * pkin(5), -t846 * t1137 - t847 * t1129 - t848 * t1121 + (t1034 * t840 + t1041 * t838 + t1048 * t836) * pkin(5), t799 * t1062 + t801 * t1059 + t803 * t1056 + (-t1235 * t828 + t785 * t1273) * t877 + (-t1237 * t827 + t784 * t1277) * t875 + (-t1239 * t826 + t783 * t1281) * t873, -t1121 * t776 - t1129 * t775 - t1137 * t774 - t946 * t985 - t948 * t984 - t950 * t983, (-t1235 * t797 + t1270 * t840) * t877 + (-t1237 * t796 + t1271 * t838) * t875 + (-t1239 * t795 + t1272 * t836) * t873, (-t746 * t1235 + (t767 * t840 + t788 * t803) * t960) * t877 + (-t745 * t1237 + (t766 * t838 + t787 * t801) * t957) * t875 + (-t744 * t1239 + (t765 * t836 + t786 * t799) * t954) * t873, 0; t834, 0, 0, t831, t825, t717, t718, t719, t808 * t1138 + t810 * t1130 + t812 * t1122 + (t1012 * t839 + t1017 * t837 + t1022 * t835) * pkin(5), t814 * t1138 + t816 * t1130 + t818 * t1122 + (t1011 * t839 + t1016 * t837 + t1021 * t835) * pkin(5), -t798 * t1153 - t800 * t1152 - t802 * t1151 + (t1241 * t782 + t758 * t1275) * t877 + (t1243 * t780 + t756 * t1279) * t875 + (t1245 * t778 + t754 * t1283) * t873, (t1294 * t908 - t911 * t986) * t944 + (t1296 * t907 - t910 * t987) * t942 + (t1298 * t906 - t909 * t988) * t940, (t1241 * t773 + t1275 * t824) * t877 + (t1243 * t771 + t1279 * t822) * t875 + (t1245 * t769 + t1283 * t820) * t873, (t725 * t1241 + (t735 * t839 + t752 * t802) * t960) * t877 + (t724 * t1243 + (t733 * t837 + t750 * t800) * t957) * t875 + (t723 * t1245 + (t731 * t835 + t748 * t798) * t954) * t873, 0; t899 * t1249 + t898 * t1255 + t897 * t1261, 0, 0, t1120 * t899 + t1128 * t898 + t1136 * t897, 0.2e1 * t1038 * t899 + 0.2e1 * t1045 * t898 + 0.2e1 * t1052 * t897, 0.2e1 * t969, 0.2e1 * t968, t839 ^ 2 * t1246 + t837 ^ 2 * t1252 + t835 ^ 2 * t1258, -pkin(5) * t969 + t1122 * t811 + t1130 * t809 + t1138 * t807, -pkin(5) * t968 + t1122 * t817 + t1130 * t815 + t1138 * t813, t777 * t1138 + t779 * t1130 + t781 * t1122 + (-t1246 * t802 + t1250 * t757) * t839 + (-t1252 * t800 + t1256 * t755) * t837 + (-t1258 * t798 + t1262 * t753) * t835, (t1295 + t986) * t1241 + (t1297 + t987) * t1243 + (t1299 + t988) * t1245, (t1241 * t772 + t1275 * t823) * t877 + (t1243 * t770 + t1279 * t821) * t875 + (t1245 * t768 + t1283 * t819) * t873, (t722 * t1241 + (t734 * t839 + t751 * t802) * t960) * t877 + (t721 * t1243 + (t732 * t837 + t749 * t800) * t957) * t875 + (t720 * t1245 + (t730 * t835 + t747 * t798) * t954) * t873, 1; t841, 0, 0, t832, t829, t726, t728, t736, t843 * t1138 + t844 * t1130 + t845 * t1122 + (t1036 * t839 + t1043 * t837 + t1050 * t835) * pkin(5), t846 * t1138 + t847 * t1130 + t848 * t1122 + (t1034 * t839 + t1041 * t837 + t1048 * t835) * pkin(5), t798 * t1062 + t800 * t1059 + t802 * t1056 + (t1241 * t828 + t1275 * t785) * t877 + (t1243 * t827 + t1279 * t784) * t875 + (t1245 * t826 + t1283 * t783) * t873, t1122 * t776 + t1130 * t775 + t1138 * t774 - t946 * t988 - t948 * t987 - t950 * t986, (t1241 * t797 + t1270 * t839) * t877 + (t1243 * t796 + t1271 * t837) * t875 + (t1245 * t795 + t1272 * t835) * t873, (t746 * t1241 + (t767 * t839 + t788 * t802) * t960) * t877 + (t745 * t1243 + (t766 * t837 + t787 * t800) * t957) * t875 + (t744 * t1245 + (t765 * t835 + t786 * t798) * t954) * t873, 0; t842, 0, 0, t833, t830, t727, t729, t737, -t808 * t1263 - t810 * t1257 - t812 * t1251 + (-t1000 * t909 - t910 * t999 - t911 * t998) * pkin(5), -t814 * t1263 - t816 * t1257 - t818 * t1251 + (-t1026 * t911 - t1028 * t910 - t1030 * t909) * pkin(5), -t836 * t1150 - t838 * t1149 - t840 * t1148 + (-t1139 * t758 - t950 * t782) * t877 + (-t1142 * t756 - t948 * t780) * t875 + (-t1145 * t754 - t946 * t778) * t873, t1235 * t980 + t1237 * t981 + t1239 * t982 - t1251 * t743 - t1257 * t741 - t1263 * t739, (-t1139 * t824 - t773 * t950) * t877 + (-t1142 * t822 - t771 * t948) * t875 + (-t1145 * t820 - t769 * t946) * t873, (-t725 * t950 + (-t1264 * t735 + t752 * t854) * t960) * t877 + (-t724 * t948 + (-t1266 * t733 + t750 * t853) * t957) * t875 + (-t723 * t946 + (-t1268 * t731 + t748 * t852) * t954) * t873, 0; t841, 0, 0, t832, t829, t726, t728, t736, -t807 * t1263 - t809 * t1257 - t811 * t1251 + (t1000 * t906 + t907 * t999 + t908 * t998) * pkin(5), -t813 * t1263 - t815 * t1257 - t817 * t1251 + (t1026 * t908 + t1028 * t907 + t1030 * t906) * pkin(5), -t835 * t1150 - t837 * t1149 - t839 * t1148 + (-t1139 * t757 - t950 * t781) * t877 + (-t1142 * t755 - t948 * t779) * t875 + (-t1145 * t753 - t946 * t777) * t873, -t1116 * t908 * t995 - t1124 * t907 * t996 - t1132 * t906 * t997 - t1251 * t742 - t1257 * t740 - t1263 * t738, (-t1139 * t823 - t772 * t950) * t877 + (-t1142 * t821 - t770 * t948) * t875 + (-t1145 * t819 - t768 * t946) * t873, (-t722 * t950 + (-t1264 * t734 + t751 * t854) * t960) * t877 + (-t721 * t948 + (-t1266 * t732 + t749 * t853) * t957) * t875 + (-t720 * t946 + (-t1268 * t730 + t747 * t852) * t954) * t873, 0; t1248 + t1254 + t1260, 0, 0, t928 * t1248 + t926 * t1254 + t924 * t1260, 0.2e1 * t1119 * t935 + 0.2e1 * t1127 * t933 + 0.2e1 * t1135 * t931, 0.2e1 * t965, 0.2e1 * t970, t860 ^ 2 * t934 * t1246 + t859 ^ 2 * t932 * t1252 + t858 ^ 2 * t930 * t1258, -pkin(5) * t965 - t845 * t1251 - t844 * t1257 - t843 * t1263, -pkin(5) * t970 - t848 * t1251 - t847 * t1257 - t846 * t1263, -t826 * t1263 - t827 * t1257 - t828 * t1251 + (-t1250 * t785 + t1148) * t1264 + (-t1256 * t784 + t1149) * t1266 + (-t1262 * t783 + t1150) * t1268, (-t776 * t877 + t980) * t950 + (-t775 * t875 + t981) * t948 + (-t774 * t873 + t982) * t946, (-t1139 * t851 - t797 * t950) * t877 + (-t1142 * t850 - t796 * t948) * t875 + (-t1145 * t849 - t795 * t946) * t873, (-t746 * t950 + (-t1264 * t767 + t788 * t854) * t960) * t877 + (-t745 * t948 + (-t1266 * t766 + t787 * t853) * t957) * t875 + (-t744 * t946 + (-t1268 * t765 + t786 * t852) * t954) * t873, 1;];
tau_reg  = t1;
