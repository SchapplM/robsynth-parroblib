% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:59
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR8V1G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(5,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:59:39
% EndTime: 2020-08-06 19:59:47
% DurationCPUTime: 7.46s
% Computational Cost: add. (21873->478), mult. (47591->809), div. (2640->21), fcn. (32901->35), ass. (0->354)
t1409 = sin(pkin(5));
t1434 = xDP(2);
t1639 = pkin(2) * t1434;
t1366 = t1409 * t1639;
t1435 = xDP(1);
t1638 = pkin(2) * t1435;
t1367 = t1409 * t1638;
t1411 = pkin(4) + qJ(3,3);
t1421 = sin(qJ(1,3));
t1371 = t1421 * t1411;
t1414 = legFrame(3,2);
t1380 = sin(t1414);
t1383 = cos(t1414);
t1420 = sin(qJ(2,3));
t1426 = cos(qJ(2,3));
t1427 = cos(qJ(1,3));
t1433 = xDP(3);
t1410 = cos(pkin(5));
t1640 = pkin(2) * t1410;
t1370 = pkin(1) + t1640;
t1476 = t1370 * t1435;
t1641 = pkin(2) * t1409;
t1544 = t1433 * t1641;
t1495 = t1427 * t1544;
t1500 = t1421 * t1367;
t1501 = t1421 * t1366;
t1557 = t1411 * t1427;
t1570 = t1370 * t1434;
t1574 = t1370 * t1426;
t1272 = ((t1421 * t1476 + t1366) * t1426 - t1435 * t1557) * t1383 + ((-t1421 * t1570 + t1367) * t1426 + t1434 * t1557) * t1380 + t1433 * (t1427 * t1574 + t1371) + ((-t1500 + t1570) * t1383 + (t1501 + t1476) * t1380 - t1495) * t1420;
t1394 = qJ(2,3) + pkin(5);
t1397 = 0.1e1 / t1411;
t1436 = 0.2e1 * qJ(2,3);
t1439 = pkin(2) ^ 2;
t1440 = pkin(1) ^ 2;
t1447 = t1411 ^ 2;
t1647 = pkin(1) * t1420;
t1475 = pkin(2) * sin(t1394) + t1647;
t1658 = 0.2e1 * pkin(1);
t1548 = pkin(2) * t1658;
t1552 = -t1439 - t1440;
t1341 = t1380 * t1435 + t1383 * t1434;
t1386 = t1426 * pkin(1);
t1654 = t1386 + pkin(2) * cos(t1394);
t1353 = 0.1e1 / t1654;
t1589 = t1341 * t1353;
t1553 = pkin(1) * t1435 + t1410 * t1638;
t1554 = pkin(1) * t1434 + t1410 * t1639;
t1571 = t1370 * t1433;
t1278 = (t1427 * t1571 + t1366 * t1383 + t1367 * t1380 + (-t1380 * t1570 + t1383 * t1476) * t1421) * t1426 + t1420 * ((-t1500 + t1554) * t1383 + (t1501 + t1553) * t1380 - t1495);
t1560 = t1409 * t1420;
t1460 = pkin(2) * t1560 - t1574;
t1326 = 0.1e1 / t1460;
t1613 = t1278 * t1326;
t1661 = -t1475 * t1411 * t1589 - (-(-t1439 * cos(0.2e1 * t1394) - cos(t1436) * t1440 - 0.2e1 * t1447 + (-cos(t1436 + pkin(5)) - t1410) * t1548 + t1552) * t1613 + 0.2e1 * t1654 * t1272) * t1397 / 0.2e1;
t1412 = pkin(4) + qJ(3,2);
t1423 = sin(qJ(1,2));
t1372 = t1423 * t1412;
t1415 = legFrame(2,2);
t1381 = sin(t1415);
t1384 = cos(t1415);
t1422 = sin(qJ(2,2));
t1428 = cos(qJ(2,2));
t1429 = cos(qJ(1,2));
t1494 = t1429 * t1544;
t1498 = t1423 * t1367;
t1499 = t1423 * t1366;
t1556 = t1412 * t1429;
t1573 = t1370 * t1428;
t1273 = ((t1423 * t1476 + t1366) * t1428 - t1435 * t1556) * t1384 + ((-t1423 * t1570 + t1367) * t1428 + t1434 * t1556) * t1381 + t1433 * (t1429 * t1573 + t1372) + ((-t1498 + t1570) * t1384 + (t1499 + t1476) * t1381 - t1494) * t1422;
t1395 = qJ(2,2) + pkin(5);
t1400 = 0.1e1 / t1412;
t1437 = 0.2e1 * qJ(2,2);
t1449 = t1412 ^ 2;
t1646 = pkin(1) * t1422;
t1474 = pkin(2) * sin(t1395) + t1646;
t1342 = t1381 * t1435 + t1384 * t1434;
t1387 = t1428 * pkin(1);
t1653 = t1387 + pkin(2) * cos(t1395);
t1355 = 0.1e1 / t1653;
t1588 = t1342 * t1355;
t1279 = (t1429 * t1571 + t1366 * t1384 + t1367 * t1381 + (-t1381 * t1570 + t1384 * t1476) * t1423) * t1428 + t1422 * ((-t1498 + t1554) * t1384 + (t1499 + t1553) * t1381 - t1494);
t1559 = t1409 * t1422;
t1459 = pkin(2) * t1559 - t1573;
t1328 = 0.1e1 / t1459;
t1611 = t1279 * t1328;
t1660 = -t1474 * t1412 * t1588 - (-(-t1439 * cos(0.2e1 * t1395) - cos(t1437) * t1440 - 0.2e1 * t1449 + (-cos(pkin(5) + t1437) - t1410) * t1548 + t1552) * t1611 + 0.2e1 * t1653 * t1273) * t1400 / 0.2e1;
t1413 = pkin(4) + qJ(3,1);
t1425 = sin(qJ(1,1));
t1373 = t1425 * t1413;
t1416 = legFrame(1,2);
t1382 = sin(t1416);
t1385 = cos(t1416);
t1424 = sin(qJ(2,1));
t1430 = cos(qJ(2,1));
t1431 = cos(qJ(1,1));
t1493 = t1431 * t1544;
t1496 = t1425 * t1367;
t1497 = t1425 * t1366;
t1555 = t1413 * t1431;
t1572 = t1370 * t1430;
t1274 = ((t1425 * t1476 + t1366) * t1430 - t1435 * t1555) * t1385 + ((-t1425 * t1570 + t1367) * t1430 + t1434 * t1555) * t1382 + t1433 * (t1431 * t1572 + t1373) + ((-t1496 + t1570) * t1385 + (t1497 + t1476) * t1382 - t1493) * t1424;
t1396 = qJ(2,1) + pkin(5);
t1403 = 0.1e1 / t1413;
t1438 = 0.2e1 * qJ(2,1);
t1451 = t1413 ^ 2;
t1645 = pkin(1) * t1424;
t1473 = pkin(2) * sin(t1396) + t1645;
t1343 = t1382 * t1435 + t1385 * t1434;
t1388 = t1430 * pkin(1);
t1652 = t1388 + pkin(2) * cos(t1396);
t1357 = 0.1e1 / t1652;
t1587 = t1343 * t1357;
t1280 = (t1431 * t1571 + t1366 * t1385 + t1367 * t1382 + (-t1382 * t1570 + t1385 * t1476) * t1425) * t1430 + t1424 * ((-t1496 + t1554) * t1385 + (t1497 + t1553) * t1382 - t1493);
t1558 = t1409 * t1424;
t1458 = pkin(2) * t1558 - t1572;
t1330 = 0.1e1 / t1458;
t1609 = t1280 * t1330;
t1659 = -t1473 * t1413 * t1587 - (-(-t1439 * cos(0.2e1 * t1396) - cos(t1438) * t1440 - 0.2e1 * t1451 + (-cos(pkin(5) + t1438) - t1410) * t1548 + t1552) * t1609 + 0.2e1 * t1652 * t1274) * t1403 / 0.2e1;
t1592 = t1341 ^ 2 / t1654 ^ 2;
t1591 = t1342 ^ 2 / t1653 ^ 2;
t1590 = t1343 ^ 2 / t1652 ^ 2;
t1398 = 0.1e1 / t1447;
t1612 = t1278 * t1398;
t1531 = t1326 * t1612;
t1489 = t1272 * t1531;
t1547 = t1421 * t1641;
t1569 = t1380 * t1421;
t1296 = (-t1370 * t1569 + t1383 * t1641) * t1426 + t1420 * (t1370 * t1383 + t1380 * t1547);
t1566 = t1383 * t1421;
t1299 = (t1370 * t1566 + t1380 * t1641) * t1426 + (t1370 * t1380 - t1383 * t1547) * t1420;
t1362 = t1640 * t1658 - t1552;
t1417 = xDDP(3);
t1418 = xDDP(2);
t1419 = xDDP(1);
t1399 = t1397 * t1398;
t1619 = t1272 * t1399;
t1488 = t1613 * t1619;
t1260 = t1488 + (t1427 * t1417 + t1362 / (t1386 + (t1410 * t1426 - t1560) * pkin(2)) * t1592 - (t1296 * t1418 + t1299 * t1419 + (t1460 * t1613 - t1272) * t1612) * t1326) * t1397;
t1626 = qJ(3,3) * t1260;
t1657 = 0.2e1 * t1489 - t1626;
t1401 = 0.1e1 / t1449;
t1610 = t1279 * t1401;
t1530 = t1328 * t1610;
t1487 = t1273 * t1530;
t1546 = t1423 * t1641;
t1568 = t1381 * t1423;
t1297 = (-t1370 * t1568 + t1384 * t1641) * t1428 + t1422 * (t1370 * t1384 + t1381 * t1546);
t1565 = t1384 * t1423;
t1300 = (t1370 * t1565 + t1381 * t1641) * t1428 + (t1370 * t1381 - t1384 * t1546) * t1422;
t1402 = t1400 * t1401;
t1618 = t1273 * t1402;
t1486 = t1611 * t1618;
t1261 = t1486 + (t1429 * t1417 + t1362 / (t1387 + (t1410 * t1428 - t1559) * pkin(2)) * t1591 - (t1297 * t1418 + t1300 * t1419 + (t1459 * t1611 - t1273) * t1610) * t1328) * t1400;
t1627 = qJ(3,2) * t1261;
t1656 = 0.2e1 * t1487 - t1627;
t1404 = 0.1e1 / t1451;
t1608 = t1280 * t1404;
t1529 = t1330 * t1608;
t1485 = t1274 * t1529;
t1545 = t1425 * t1641;
t1567 = t1382 * t1425;
t1298 = (-t1370 * t1567 + t1385 * t1641) * t1430 + t1424 * (t1370 * t1385 + t1382 * t1545);
t1564 = t1385 * t1425;
t1301 = (t1370 * t1564 + t1382 * t1641) * t1430 + (t1370 * t1382 - t1385 * t1545) * t1424;
t1405 = t1403 * t1404;
t1617 = t1274 * t1405;
t1484 = t1609 * t1617;
t1262 = t1484 + (t1431 * t1417 + t1362 / (t1388 + (t1410 * t1430 - t1558) * pkin(2)) * t1590 - (t1298 * t1418 + t1301 * t1419 + (t1458 * t1609 - t1274) * t1608) * t1330) * t1403;
t1628 = qJ(3,1) * t1262;
t1655 = 0.2e1 * t1485 - t1628;
t1631 = t1383 * g(1);
t1634 = t1380 * g(2);
t1469 = t1631 - t1634;
t1637 = g(3) * t1421;
t1320 = -t1469 * t1427 + t1637;
t1630 = t1384 * g(1);
t1633 = t1381 * g(2);
t1468 = t1630 - t1633;
t1636 = g(3) * t1423;
t1321 = -t1468 * t1429 + t1636;
t1629 = t1385 * g(1);
t1632 = t1382 * g(2);
t1467 = t1629 - t1632;
t1635 = g(3) * t1425;
t1322 = -t1467 * t1431 + t1635;
t1406 = t1426 ^ 2;
t1650 = 0.2e1 * t1406 - 0.1e1;
t1407 = t1428 ^ 2;
t1649 = 0.2e1 * t1407 - 0.1e1;
t1408 = t1430 ^ 2;
t1648 = 0.2e1 * t1408 - 0.1e1;
t1263 = -t1362 * t1589 - t1475 * t1613;
t1389 = g(3) * t1427;
t1323 = t1469 * t1421 + t1389;
t1504 = t1613 * t1647;
t1311 = t1427 * t1654 + t1371;
t1598 = t1311 * t1417;
t1308 = -t1460 * t1421 - t1557;
t1332 = t1370 * t1420 + t1426 * t1641;
t1291 = -t1308 * t1380 + t1332 * t1383;
t1603 = t1291 * t1418;
t1290 = t1308 * t1383 + t1332 * t1380;
t1604 = t1290 * t1419;
t1287 = (t1380 * t1419 + t1383 * t1418 + t1475 * t1592) * t1353;
t1607 = t1287 * t1420;
t1239 = t1406 * t1440 * t1260 + (-pkin(1) * t1607 - t1323 - t1657) * qJ(3,3) + (-0.2e1 * (t1631 / 0.2e1 - t1634 / 0.2e1) * t1427 + t1637 + t1531 * t1661 - t1654 * t1488 - 0.2e1 * (t1604 / 0.2e1 + t1603 / 0.2e1 + t1598 / 0.2e1 + (-t1504 - t1263 / 0.2e1) * t1589) * t1397 - qJ(3,3) * t1592) * t1386;
t1625 = t1239 * t1326;
t1264 = -t1362 * t1588 - t1474 * t1611;
t1390 = g(3) * t1429;
t1324 = t1468 * t1423 + t1390;
t1503 = t1611 * t1646;
t1312 = t1429 * t1653 + t1372;
t1597 = t1312 * t1417;
t1309 = -t1459 * t1423 - t1556;
t1333 = t1370 * t1422 + t1428 * t1641;
t1293 = -t1309 * t1381 + t1333 * t1384;
t1601 = t1293 * t1418;
t1292 = t1309 * t1384 + t1333 * t1381;
t1602 = t1292 * t1419;
t1288 = (t1381 * t1419 + t1384 * t1418 + t1474 * t1591) * t1355;
t1606 = t1288 * t1422;
t1240 = t1407 * t1440 * t1261 + (-pkin(1) * t1606 - t1324 - t1656) * qJ(3,2) + (-0.2e1 * (t1630 / 0.2e1 - t1633 / 0.2e1) * t1429 + t1636 + t1530 * t1660 - t1653 * t1486 - 0.2e1 * (t1602 / 0.2e1 + t1601 / 0.2e1 + t1597 / 0.2e1 + (-t1503 - t1264 / 0.2e1) * t1588) * t1400 - qJ(3,2) * t1591) * t1387;
t1624 = t1240 * t1328;
t1265 = -t1362 * t1587 - t1473 * t1609;
t1391 = g(3) * t1431;
t1325 = t1467 * t1425 + t1391;
t1502 = t1609 * t1645;
t1313 = t1431 * t1652 + t1373;
t1596 = t1313 * t1417;
t1310 = -t1458 * t1425 - t1555;
t1334 = t1370 * t1424 + t1430 * t1641;
t1295 = -t1310 * t1382 + t1334 * t1385;
t1599 = t1295 * t1418;
t1294 = t1310 * t1385 + t1334 * t1382;
t1600 = t1294 * t1419;
t1289 = (t1382 * t1419 + t1385 * t1418 + t1473 * t1590) * t1357;
t1605 = t1289 * t1424;
t1241 = t1408 * t1440 * t1262 + (-pkin(1) * t1605 - t1325 - t1655) * qJ(3,1) + (-0.2e1 * (t1629 / 0.2e1 - t1632 / 0.2e1) * t1431 + t1635 + t1529 * t1659 - t1652 * t1484 - 0.2e1 * (t1600 / 0.2e1 + t1599 / 0.2e1 + t1596 / 0.2e1 + (-t1502 - t1265 / 0.2e1) * t1587) * t1403 - qJ(3,1) * t1590) * t1388;
t1623 = t1241 * t1330;
t1622 = t1260 * t1426;
t1621 = t1261 * t1428;
t1620 = t1262 * t1430;
t1616 = t1278 ^ 2 / t1460 ^ 2;
t1615 = t1279 ^ 2 / t1459 ^ 2;
t1614 = t1280 ^ 2 / t1458 ^ 2;
t1595 = t1326 * t1397;
t1594 = t1328 * t1400;
t1593 = t1330 * t1403;
t1350 = g(1) * t1380 + g(2) * t1383;
t1586 = t1350 * t1426;
t1351 = g(1) * t1381 + g(2) * t1384;
t1585 = t1351 * t1428;
t1352 = g(1) * t1382 + g(2) * t1385;
t1584 = t1352 * t1430;
t1583 = t1353 * t1380;
t1582 = t1353 * t1383;
t1581 = t1353 * t1420;
t1580 = t1355 * t1381;
t1579 = t1355 * t1384;
t1578 = t1355 * t1422;
t1577 = t1357 * t1382;
t1576 = t1357 * t1385;
t1575 = t1357 * t1424;
t1563 = t1397 * t1427;
t1562 = t1400 * t1429;
t1561 = t1403 * t1431;
t1543 = t1260 * t1581;
t1542 = t1353 * t1622;
t1541 = t1261 * t1578;
t1540 = t1355 * t1621;
t1539 = t1262 * t1575;
t1538 = t1357 * t1620;
t1537 = t1398 * t1616;
t1536 = t1399 * t1616;
t1535 = t1401 * t1615;
t1534 = t1402 * t1615;
t1533 = t1404 * t1614;
t1532 = t1405 * t1614;
t1528 = t1296 * t1595;
t1527 = t1297 * t1594;
t1526 = t1298 * t1593;
t1525 = t1299 * t1595;
t1524 = t1300 * t1594;
t1523 = t1301 * t1593;
t1522 = t1320 * t1397 * t1426;
t1521 = t1321 * t1400 * t1428;
t1520 = t1322 * t1403 * t1430;
t1519 = t1320 * t1595;
t1518 = t1320 * t1563;
t1517 = t1321 * t1594;
t1516 = t1321 * t1562;
t1515 = t1322 * t1593;
t1514 = t1322 * t1561;
t1513 = t1323 * t1595;
t1512 = t1324 * t1594;
t1511 = t1325 * t1593;
t1466 = t1278 * t1589 * t1595;
t1254 = (t1260 * t1420 - 0.2e1 * t1426 * t1466) * t1420;
t1510 = t1254 * t1595;
t1465 = t1279 * t1588 * t1594;
t1255 = (t1261 * t1422 - 0.2e1 * t1428 * t1465) * t1422;
t1509 = t1255 * t1594;
t1464 = t1280 * t1587 * t1593;
t1256 = (t1262 * t1424 - 0.2e1 * t1430 * t1464) * t1424;
t1508 = t1256 * t1593;
t1251 = t1420 * t1622 - t1650 * t1466;
t1507 = -0.2e1 * t1251 * t1595;
t1252 = t1422 * t1621 - t1649 * t1465;
t1506 = -0.2e1 * t1252 * t1594;
t1253 = t1424 * t1620 - t1648 * t1464;
t1505 = -0.2e1 * t1253 * t1593;
t1492 = t1426 * t1537;
t1491 = t1428 * t1535;
t1490 = t1430 * t1533;
t1483 = t1326 * t1522;
t1482 = t1328 * t1521;
t1481 = t1330 * t1520;
t1480 = t1420 * t1519;
t1479 = t1422 * t1517;
t1478 = t1424 * t1515;
t1463 = -g(1) * t1566 + g(2) * t1569 - t1389;
t1462 = -g(1) * t1565 + g(2) * t1568 - t1390;
t1461 = -g(1) * t1564 + g(2) * t1567 - t1391;
t1457 = t1492 * t1581;
t1456 = t1491 * t1578;
t1455 = t1490 * t1575;
t1281 = t1426 * t1592 + t1607;
t1283 = t1428 * t1591 + t1606;
t1285 = t1430 * t1590 + t1605;
t1454 = -t1380 * t1543 - t1381 * t1541 - t1382 * t1539;
t1453 = -t1383 * t1543 - t1384 * t1541 - t1385 * t1539;
t1307 = t1352 * t1424 - t1430 * t1461;
t1306 = -t1424 * t1461 - t1584;
t1305 = t1351 * t1422 - t1428 * t1462;
t1304 = -t1422 * t1462 - t1585;
t1303 = t1350 * t1420 - t1426 * t1463;
t1302 = -t1420 * t1463 - t1586;
t1286 = t1289 * t1430 - t1424 * t1590;
t1284 = t1288 * t1428 - t1422 * t1591;
t1282 = t1287 * t1426 - t1420 * t1592;
t1268 = t1648 * t1533;
t1267 = t1649 * t1535;
t1266 = t1650 * t1537;
t1250 = -t1285 * pkin(1) + t1461 - 0.2e1 * t1485 + 0.2e1 * t1628;
t1249 = -t1283 * pkin(1) + t1462 - 0.2e1 * t1487 + 0.2e1 * t1627;
t1248 = -t1281 * pkin(1) + t1463 - 0.2e1 * t1489 + 0.2e1 * t1626;
t1247 = (pkin(1) * t1490 - t1461 + t1655) * t1424 - t1584 + t1289 * pkin(1);
t1246 = (pkin(1) * t1491 - t1462 + t1656) * t1422 - t1585 + t1288 * pkin(1);
t1245 = (pkin(1) * t1492 - t1463 + t1657) * t1420 - t1586 + t1287 * pkin(1);
t1244 = -qJ(3,1) * t1533 - pkin(1) * t1620 - (t1404 * t1659 - t1652 * t1617) * t1609 + (t1600 + t1599 + t1596 + (-t1265 - 0.2e1 * t1502) * t1587) * t1403 - t1322;
t1243 = -qJ(3,2) * t1535 - pkin(1) * t1621 - (t1401 * t1660 - t1653 * t1618) * t1611 + (t1602 + t1601 + t1597 + (-t1264 - 0.2e1 * t1503) * t1588) * t1400 - t1321;
t1242 = -qJ(3,3) * t1537 - pkin(1) * t1622 - (t1398 * t1661 - t1654 * t1619) * t1613 + (t1604 + t1603 + t1598 + (-t1263 - 0.2e1 * t1504) * t1589) * t1397 - t1320;
t1 = [(-t1260 * t1525 - t1261 * t1524 - t1262 * t1523) * MDP(1) + (-t1299 * t1519 - t1300 * t1517 - t1301 * t1515) * MDP(2) + (-t1299 * t1513 - t1300 * t1512 - t1301 * t1511) * MDP(3) + (-t1299 * t1510 - t1300 * t1509 - t1301 * t1508 - t1380 * t1457 - t1381 * t1456 - t1382 * t1455) * MDP(4) + (-t1266 * t1583 - t1267 * t1580 - t1268 * t1577 + t1299 * t1507 + t1300 * t1506 + t1301 * t1505) * MDP(5) + (-t1281 * t1525 - t1283 * t1524 - t1285 * t1523 - t1454) * MDP(6) + (-t1282 * t1525 - t1284 * t1524 - t1286 * t1523 + t1380 * t1542 + t1381 * t1540 + t1382 * t1538) * MDP(7) + (t1287 * t1583 + t1288 * t1580 + t1289 * t1577) * MDP(8) + (-t1299 * t1483 - t1300 * t1482 - t1301 * t1481 + t1302 * t1583 + t1304 * t1580 + t1306 * t1577) * MDP(9) + (t1299 * t1480 + t1300 * t1479 + t1301 * t1478 + t1303 * t1583 + t1305 * t1580 + t1307 * t1577) * MDP(10) + (t1454 * pkin(1) - t1248 * t1525 - t1249 * t1524 - t1250 * t1523 - t1290 * t1536 - t1292 * t1534 - t1294 * t1532) * MDP(11) + ((t1244 * t1294 - t1301 * t1623) * t1403 + (t1243 * t1292 - t1300 * t1624) * t1400 + (t1242 * t1290 - t1299 * t1625) * t1397 + (t1245 * t1583 + t1246 * t1580 + t1247 * t1577) * pkin(1)) * MDP(12) + (t1419 - g(1)) * MDP(13); (-t1260 * t1528 - t1261 * t1527 - t1262 * t1526) * MDP(1) + (-t1296 * t1519 - t1297 * t1517 - t1298 * t1515) * MDP(2) + (-t1296 * t1513 - t1297 * t1512 - t1298 * t1511) * MDP(3) + (-t1296 * t1510 - t1297 * t1509 - t1298 * t1508 - t1383 * t1457 - t1384 * t1456 - t1385 * t1455) * MDP(4) + (-t1266 * t1582 - t1267 * t1579 - t1268 * t1576 + t1296 * t1507 + t1297 * t1506 + t1298 * t1505) * MDP(5) + (-t1281 * t1528 - t1283 * t1527 - t1285 * t1526 - t1453) * MDP(6) + (-t1282 * t1528 - t1284 * t1527 - t1286 * t1526 + t1383 * t1542 + t1384 * t1540 + t1385 * t1538) * MDP(7) + (t1287 * t1582 + t1288 * t1579 + t1289 * t1576) * MDP(8) + (-t1296 * t1483 - t1297 * t1482 - t1298 * t1481 + t1302 * t1582 + t1304 * t1579 + t1306 * t1576) * MDP(9) + (t1296 * t1480 + t1297 * t1479 + t1298 * t1478 + t1303 * t1582 + t1305 * t1579 + t1307 * t1576) * MDP(10) + (t1453 * pkin(1) - t1248 * t1528 - t1249 * t1527 - t1250 * t1526 - t1291 * t1536 - t1293 * t1534 - t1295 * t1532) * MDP(11) + ((t1244 * t1295 - t1298 * t1623) * t1403 + (t1243 * t1293 - t1297 * t1624) * t1400 + (t1242 * t1291 - t1296 * t1625) * t1397 + (t1245 * t1582 + t1246 * t1579 + t1247 * t1576) * pkin(1)) * MDP(12) + (t1418 - g(2)) * MDP(13); (t1260 * t1563 + t1261 * t1562 + t1262 * t1561) * MDP(1) + (t1514 + t1516 + t1518) * MDP(2) + (t1323 * t1563 + t1324 * t1562 + t1325 * t1561) * MDP(3) + (t1254 * t1563 + t1255 * t1562 + t1256 * t1561) * MDP(4) + (t1281 * t1563 + t1283 * t1562 + t1285 * t1561) * MDP(6) + (t1282 * t1563 + t1284 * t1562 + t1286 * t1561) * MDP(7) + (t1427 * t1522 + t1429 * t1521 + t1431 * t1520) * MDP(9) + (-t1420 * t1518 - t1422 * t1516 - t1424 * t1514) * MDP(10) + (t1248 * t1563 + t1249 * t1562 + t1250 * t1561 - t1311 * t1536 - t1312 * t1534 - t1313 * t1532) * MDP(11) + ((t1241 * t1431 + t1244 * t1313) * t1403 + (t1240 * t1429 + t1243 * t1312) * t1400 + (t1239 * t1427 + t1242 * t1311) * t1397) * MDP(12) + (t1417 - g(3)) * MDP(13) + 0.2e1 * (t1251 * t1563 + t1252 * t1562 + t1253 * t1561) * MDP(5);];
tauX  = t1;
