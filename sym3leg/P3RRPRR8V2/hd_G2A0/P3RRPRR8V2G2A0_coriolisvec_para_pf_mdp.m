% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 21:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 21:13:19
% EndTime: 2020-08-06 21:13:36
% DurationCPUTime: 16.84s
% Computational Cost: add. (60687->622), mult. (137843->1156), div. (3819->24), fcn. (77922->50), ass. (0->513)
t3044 = sin(pkin(7));
t3067 = xDP(2);
t3417 = pkin(3) * t3067;
t2971 = t3044 * t3417;
t3068 = xDP(1);
t3416 = pkin(3) * t3068;
t2972 = t3044 * t3416;
t3045 = cos(pkin(7));
t2974 = t3045 * t3416;
t3419 = pkin(3) * t3045;
t2984 = pkin(2) + t3419;
t3050 = legFrame(3,2);
t3011 = sin(t3050);
t3014 = cos(t3050);
t3053 = sin(qJ(2,3));
t3054 = sin(qJ(1,3));
t3059 = cos(qJ(2,3));
t3060 = cos(qJ(1,3));
t3191 = t3067 * t2984;
t3066 = xDP(3);
t3418 = pkin(3) * t3066;
t3294 = t3044 * t3418;
t3338 = t3054 * t3068;
t3326 = pkin(2) * t3338 + t2971;
t3022 = pkin(2) * t3068;
t3327 = t2974 + t3022;
t3021 = pkin(2) * t3067;
t3328 = t3045 * t3417 + t3021;
t3331 = t3060 * t3066;
t2887 = ((t3054 * t2974 + t3326) * t3014 + (-t3054 * t3191 + t2972) * t3011 + t2984 * t3331) * t3059 + t3053 * ((-t3054 * t2972 + t3328) * t3014 + (t3054 * t2971 + t3327) * t3011 - t3060 * t3294);
t2884 = t2887 ^ 2;
t3047 = pkin(5) + qJ(3,3);
t3027 = pkin(6) + t3047;
t3002 = 0.1e1 / t3027;
t3343 = t3044 * t3053;
t3300 = pkin(3) * t3343;
t3172 = -t2984 * t3059 + t3300;
t2915 = 0.1e1 / t3172 ^ 2;
t3003 = 0.1e1 / t3027 ^ 2;
t3399 = t2915 * t3003;
t3398 = t3002 * t3399;
t3448 = t2884 * t3398;
t3051 = legFrame(2,2);
t3012 = sin(t3051);
t3015 = cos(t3051);
t3055 = sin(qJ(2,2));
t3056 = sin(qJ(1,2));
t3061 = cos(qJ(2,2));
t3062 = cos(qJ(1,2));
t3335 = t3056 * t3068;
t3325 = pkin(2) * t3335 + t2971;
t3330 = t3062 * t3066;
t2888 = ((t3056 * t2974 + t3325) * t3015 + (-t3056 * t3191 + t2972) * t3012 + t2984 * t3330) * t3061 + t3055 * ((-t3056 * t2972 + t3328) * t3015 + (t3056 * t2971 + t3327) * t3012 - t3062 * t3294);
t2885 = t2888 ^ 2;
t3048 = pkin(5) + qJ(3,2);
t3028 = pkin(6) + t3048;
t3005 = 0.1e1 / t3028;
t3342 = t3044 * t3055;
t3298 = pkin(3) * t3342;
t3171 = -t2984 * t3061 + t3298;
t2918 = 0.1e1 / t3171 ^ 2;
t3006 = 0.1e1 / t3028 ^ 2;
t3395 = t2918 * t3006;
t3394 = t3005 * t3395;
t3447 = t2885 * t3394;
t3052 = legFrame(1,2);
t3013 = sin(t3052);
t3016 = cos(t3052);
t3057 = sin(qJ(2,1));
t3058 = sin(qJ(1,1));
t3063 = cos(qJ(2,1));
t3064 = cos(qJ(1,1));
t3332 = t3058 * t3068;
t3324 = pkin(2) * t3332 + t2971;
t3329 = t3066 * t3064;
t2889 = ((t3058 * t2974 + t3324) * t3016 + (-t3058 * t3191 + t2972) * t3013 + t2984 * t3329) * t3063 + t3057 * ((-t3058 * t2972 + t3328) * t3016 + (t3058 * t2971 + t3327) * t3013 - t3064 * t3294);
t2886 = t2889 ^ 2;
t3049 = pkin(5) + qJ(3,1);
t3029 = pkin(6) + t3049;
t3008 = 0.1e1 / t3029;
t3341 = t3044 * t3057;
t3296 = pkin(3) * t3341;
t3170 = -t2984 * t3063 + t3296;
t2921 = 0.1e1 / t3170 ^ 2;
t3009 = 0.1e1 / t3029 ^ 2;
t3391 = t2921 * t3009;
t3390 = t3008 * t3391;
t3446 = t2886 * t3390;
t3445 = 0.2e1 * pkin(2) * pkin(3);
t3034 = qJ(2,3) + pkin(7);
t2996 = cos(t3034);
t3017 = t3059 * pkin(2);
t2952 = pkin(3) * t2996 + t3017;
t3444 = pkin(1) + t2952;
t3035 = qJ(2,2) + pkin(7);
t2997 = cos(t3035);
t3018 = t3061 * pkin(2);
t2953 = pkin(3) * t2997 + t3018;
t3443 = pkin(1) + t2953;
t3036 = qJ(2,1) + pkin(7);
t2998 = cos(t3036);
t3019 = t3063 * pkin(2);
t2954 = pkin(3) * t2998 + t3019;
t3442 = pkin(1) + t2954;
t2937 = 0.1e1 / t2952;
t3206 = t2937 * t2884 * t3399;
t2941 = 0.1e1 / t2953;
t3205 = t2941 * t2885 * t3395;
t2945 = 0.1e1 / t2954;
t3204 = t2945 * t2886 * t3391;
t3084 = pkin(3) ^ 2;
t3085 = pkin(2) ^ 2;
t3026 = -t3084 + t3085;
t3441 = -0.2e1 * pkin(1);
t3440 = 0.2e1 * pkin(1);
t3439 = 2 * pkin(5);
t2914 = 0.1e1 / t3172;
t2917 = 0.1e1 / t3171;
t2920 = 0.1e1 / t3170;
t3095 = t2952 ^ 2;
t2938 = 0.1e1 / t3095;
t3098 = t2953 ^ 2;
t2942 = 0.1e1 / t3098;
t3101 = t2954 ^ 2;
t2946 = 0.1e1 / t3101;
t2989 = pkin(2) * t3419;
t3046 = t3085 / 0.2e1;
t3323 = t2989 + t3046;
t3438 = -0.4e1 * pkin(1) * (t3084 / 0.2e1 + t3323);
t3437 = 0.2e1 * t2989;
t3040 = t3059 ^ 2;
t3436 = 0.2e1 * t3040;
t3041 = t3061 ^ 2;
t3435 = 0.2e1 * t3041;
t3042 = t3063 ^ 2;
t3434 = 0.2e1 * t3042;
t3433 = -0.4e1 * t3059;
t3432 = -0.4e1 * t3061;
t3431 = -0.4e1 * t3063;
t3430 = -4 * pkin(5) - 4 * pkin(6);
t3429 = -pkin(5) / 0.2e1;
t2999 = t3436 - 0.1e1;
t3000 = t3435 - 0.1e1;
t3001 = t3434 - 0.1e1;
t2929 = t3011 * t3068 + t3014 * t3067;
t2926 = t2929 ^ 2;
t3427 = pkin(2) * t2926;
t2930 = t3012 * t3068 + t3015 * t3067;
t2927 = t2930 ^ 2;
t3426 = pkin(2) * t2927;
t2931 = t3013 * t3068 + t3016 * t3067;
t2928 = t2931 ^ 2;
t3425 = pkin(2) * t2928;
t3424 = pkin(2) * t3084;
t3347 = t3027 * t3060;
t3221 = pkin(1) * t3054 - t3347;
t3030 = t3045 ^ 2;
t3308 = pkin(3) * (t3030 - 0.1e1);
t3423 = pkin(3) * (t3054 * t3308 + t3221 * t3343);
t3346 = t3028 * t3062;
t3220 = pkin(1) * t3056 - t3346;
t3422 = pkin(3) * (t3056 * t3308 + t3220 * t3342);
t3345 = t3029 * t3064;
t3219 = pkin(1) * t3058 - t3345;
t3421 = pkin(3) * (t3058 * t3308 + t3219 * t3341);
t3420 = pkin(3) * t3044;
t3415 = pkin(3) * t3085;
t2955 = pkin(1) * t3053 - t3420;
t2959 = t3026 * t3067;
t2960 = t3026 * t3068;
t2964 = pkin(1) * t3343 - pkin(3);
t3293 = t3044 * t3445;
t2967 = t3067 * t3293;
t2968 = t3068 * t3293;
t2969 = pkin(1) * t2971;
t2970 = pkin(1) * t2972;
t2975 = t3054 * t3027;
t2991 = pkin(1) * t3021;
t2992 = pkin(1) * t3022;
t3237 = -0.2e1 * t3300;
t2961 = pkin(1) + t3237;
t3175 = t2961 * t3054 - t3347;
t3154 = t3175 * t3068;
t3155 = t3175 * t3067;
t3344 = t3030 * t3084;
t3246 = (t3331 + (-t3011 * t3067 + t3014 * t3068) * t3054) * t3344;
t3247 = t3066 * (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t3250 = t3053 * t3347;
t3309 = 0.2e1 * t3344;
t3317 = 0.2e1 * t3419;
t3319 = 0.2e1 * t3022;
t3320 = 0.2e1 * t3021;
t3339 = t3054 * t3067;
t3404 = (t2961 * t3060 + t2975) * t3066;
t2860 = (0.2e1 * t3246 + (t3326 * t3014 + (-pkin(2) * t3339 + t2972) * t3011 + pkin(2) * t3331) * t3317 + (t2960 * t3054 + t2967) * t3014 + (-t2959 * t3054 + t2968) * t3011 + t3060 * t3247) * t3040 + (t3053 * t2929 * t3309 + ((t3053 * t3320 + t3154) * t3014 + (t3053 * t3319 - t3155) * t3011 + t3404) * t3419 + (pkin(2) * t3154 + t2959 * t3053 + t2969) * t3014 + (-pkin(2) * t3155 + t2960 * t3053 + t2970) * t3011 + pkin(2) * t3404) * t3059 - t3246 + t2929 * t2955 * t3419 + (t2991 * t3053 + (-t2964 * t3338 + (t3068 * t3250 - t3021) * t3044) * pkin(3)) * t3014 + (t2992 * t3053 + (t2964 * t3339 + (-t3067 * t3250 - t3022) * t3044) * pkin(3)) * t3011 - (t2964 * t3060 + t2975 * t3343) * t3418;
t3401 = t2914 * t3002;
t3274 = t2887 * t3401;
t2882 = pkin(1) * t3274;
t3321 = t3084 + t3085;
t2958 = t3437 + t3321;
t3400 = t2914 * t3003;
t3273 = t2887 * t3400;
t3283 = t2860 * t3398;
t3380 = t2938 * t3002;
t2839 = (t2882 - (t3172 * t2887 + t2860) * t3401) * t3273 + t2926 * t2958 / (t3017 + (t3045 * t3059 - t3343) * pkin(3)) * t3380 - t2887 * t3283;
t3414 = t2839 * pkin(1);
t2956 = pkin(1) * t3055 - t3420;
t2965 = pkin(1) * t3342 - pkin(3);
t2976 = t3056 * t3028;
t3236 = -0.2e1 * t3298;
t2962 = pkin(1) + t3236;
t3174 = t2962 * t3056 - t3346;
t3152 = t3174 * t3068;
t3153 = t3174 * t3067;
t3245 = (t3330 + (-t3012 * t3067 + t3015 * t3068) * t3056) * t3344;
t3249 = t3055 * t3346;
t3336 = t3056 * t3067;
t3403 = (t2962 * t3062 + t2976) * t3066;
t2861 = (0.2e1 * t3245 + (t3325 * t3015 + (-pkin(2) * t3336 + t2972) * t3012 + pkin(2) * t3330) * t3317 + (t2960 * t3056 + t2967) * t3015 + (-t2959 * t3056 + t2968) * t3012 + t3062 * t3247) * t3041 + (t3055 * t2930 * t3309 + ((t3055 * t3320 + t3152) * t3015 + (t3055 * t3319 - t3153) * t3012 + t3403) * t3419 + (pkin(2) * t3152 + t2959 * t3055 + t2969) * t3015 + (-pkin(2) * t3153 + t2960 * t3055 + t2970) * t3012 + pkin(2) * t3403) * t3061 - t3245 + t2930 * t2956 * t3419 + (t2991 * t3055 + (-t2965 * t3335 + (t3068 * t3249 - t3021) * t3044) * pkin(3)) * t3015 + (t2992 * t3055 + (t2965 * t3336 + (-t3067 * t3249 - t3022) * t3044) * pkin(3)) * t3012 - (t2965 * t3062 + t2976 * t3342) * t3418;
t3397 = t2917 * t3005;
t3272 = t2888 * t3397;
t2883 = pkin(1) * t3272;
t3396 = t2917 * t3006;
t3271 = t2888 * t3396;
t3282 = t2861 * t3394;
t3374 = t2942 * t3005;
t2840 = (t2883 - (t3171 * t2888 + t2861) * t3397) * t3271 + t2927 * t2958 / (t3018 + (t3045 * t3061 - t3342) * pkin(3)) * t3374 - t2888 * t3282;
t3413 = t2840 * pkin(1);
t2957 = pkin(1) * t3057 - t3420;
t2966 = pkin(1) * t3341 - pkin(3);
t2977 = t3058 * t3029;
t3235 = -0.2e1 * t3296;
t2963 = pkin(1) + t3235;
t3173 = t2963 * t3058 - t3345;
t3150 = t3173 * t3068;
t3151 = t3173 * t3067;
t3244 = (t3329 + (-t3013 * t3067 + t3016 * t3068) * t3058) * t3344;
t3248 = t3057 * t3345;
t3333 = t3058 * t3067;
t3402 = (t2963 * t3064 + t2977) * t3066;
t2862 = (0.2e1 * t3244 + (t3324 * t3016 + (-pkin(2) * t3333 + t2972) * t3013 + pkin(2) * t3329) * t3317 + (t2960 * t3058 + t2967) * t3016 + (-t2959 * t3058 + t2968) * t3013 + t3064 * t3247) * t3042 + (t3057 * t2931 * t3309 + ((t3057 * t3320 + t3150) * t3016 + (t3057 * t3319 - t3151) * t3013 + t3402) * t3419 + (pkin(2) * t3150 + t2959 * t3057 + t2969) * t3016 + (-pkin(2) * t3151 + t2960 * t3057 + t2970) * t3013 + pkin(2) * t3402) * t3063 - t3244 + t2931 * t2957 * t3419 + (t2991 * t3057 + (-t2966 * t3332 + (t3068 * t3248 - t3021) * t3044) * pkin(3)) * t3016 + (t2992 * t3057 + (t2966 * t3333 + (-t3067 * t3248 - t3022) * t3044) * pkin(3)) * t3013 - (t2966 * t3064 + t2977 * t3341) * t3418;
t3393 = t2920 * t3008;
t3270 = t2889 * t3393;
t2881 = pkin(1) * t3270;
t3392 = t2920 * t3009;
t3269 = t2889 * t3392;
t3281 = t2862 * t3390;
t3368 = t2946 * t3008;
t2841 = (t2881 - (t3170 * t2889 + t2862) * t3393) * t3269 + t2928 * t2958 / (t3019 + (t3045 * t3063 - t3341) * pkin(3)) * t3368 - t2889 * t3281;
t3412 = t2841 * pkin(1);
t3410 = t2839 * t3002;
t3409 = t2839 * t3053;
t3408 = t2840 * t3005;
t3407 = t2840 * t3055;
t3406 = t2841 * t3008;
t3405 = t2841 * t3057;
t3389 = t2926 * t3002;
t3388 = t2927 * t3005;
t3387 = t2928 * t3008;
t3386 = t2929 * t2937;
t3385 = t2930 * t2941;
t3384 = t2931 * t2945;
t3383 = t2999 * t3206;
t3382 = t2937 * t3053;
t3381 = t2937 * t3059;
t3379 = t2938 * t3059;
t2993 = sin(t3034);
t2949 = pkin(2) * t3053 + pkin(3) * t2993;
t3378 = t2937 * t2938 * t2949;
t3377 = t3000 * t3205;
t3376 = t2941 * t3055;
t3375 = t2941 * t3061;
t3373 = t2942 * t3061;
t2994 = sin(t3035);
t2950 = pkin(2) * t3055 + pkin(3) * t2994;
t3372 = t2941 * t2942 * t2950;
t3371 = t3001 * t3204;
t3370 = t2945 * t3057;
t3369 = t2945 * t3063;
t3367 = t2946 * t3063;
t2995 = sin(t3036);
t2951 = pkin(2) * t3057 + pkin(3) * t2995;
t3366 = t2945 * t2946 * t2951;
t3365 = t2984 * t3011;
t3364 = t2984 * t3012;
t3363 = t2984 * t3013;
t3362 = t2984 * t3014;
t3361 = t2984 * t3015;
t3360 = t2984 * t3016;
t3194 = t3444 * t3283;
t2985 = 0.2e1 * t3034;
t2988 = pkin(2) * t3046 + t3424;
t3076 = 0.2e1 * qJ(2,3);
t3031 = pkin(7) + t3076;
t3075 = 0.2e1 * pkin(7);
t3234 = -0.2e1 * pkin(3) * t3084 - 0.4e1 * t3415;
t3316 = -0.2e1 * t3415;
t3318 = -0.2e1 * t3424;
t3209 = (-(sin(t3031) * t3445 + sin(t2985) * t3084 + sin(t3076) * t3085) * t2914 * t2887 + (cos(qJ(2,3) + t3075) * t3318 + cos(-pkin(7) + qJ(2,3)) * t3316 + t3234 * t2996 + t2988 * t3433 + t3438) * t3386) * t2929 * t3380;
t3243 = t3401 / 0.2e1;
t2852 = t2860 * t3243 - t2882;
t3079 = (qJ(3,3) ^ 2);
t3082 = pkin(5) ^ 2;
t3086 = pkin(1) ^ 2;
t3157 = -(2 * t3082) - 0.2e1 * t3086 - t3321 + ((-4 * pkin(5) - 2 * pkin(6)) * pkin(6));
t3224 = 0.2e1 * t3027 * t3386;
t3215 = -((-0.4e1 * t2852 * t2996 + t2993 * t3224) * pkin(3) + (t2852 * t3433 + t3053 * t3224) * pkin(2) - (t2860 * t3440 + ((qJ(3,3) * t3430) - cos(t2985) * t3084 - cos(t3076) * t3085 - (2 * t3079) + (-cos(t3031) - t3045) * t3445 + t3157) * t2887) * t3401) * t3400 / 0.2e1;
t3122 = -t3209 / 0.2e1 + (-t3194 - t3215) * t2887;
t3359 = t3002 * ((-t3017 - pkin(1)) * t2839 + t3122);
t3358 = t3002 * t3060;
t3193 = t3443 * t3282;
t2986 = 0.2e1 * t3035;
t3077 = 0.2e1 * qJ(2,2);
t3032 = pkin(7) + t3077;
t3208 = (-(sin(t3032) * t3445 + sin(t2986) * t3084 + sin(t3077) * t3085) * t2917 * t2888 + (cos(qJ(2,2) + t3075) * t3318 + cos(-pkin(7) + qJ(2,2)) * t3316 + t3234 * t2997 + t2988 * t3432 + t3438) * t3385) * t2930 * t3374;
t3242 = t3397 / 0.2e1;
t2853 = t2861 * t3242 - t2883;
t3080 = (qJ(3,2) ^ 2);
t3223 = 0.2e1 * t3028 * t3385;
t3214 = -((-0.4e1 * t2853 * t2997 + t2994 * t3223) * pkin(3) + (t2853 * t3432 + t3055 * t3223) * pkin(2) - (t2861 * t3440 + ((qJ(3,2) * t3430) - cos(t2986) * t3084 - cos(t3077) * t3085 - (2 * t3080) + (-cos(t3032) - t3045) * t3445 + t3157) * t2888) * t3397) * t3396 / 0.2e1;
t3121 = -t3208 / 0.2e1 + (-t3193 - t3214) * t2888;
t3357 = t3005 * ((-t3018 - pkin(1)) * t2840 + t3121);
t3356 = t3005 * t3062;
t3192 = t3442 * t3281;
t2987 = 0.2e1 * t3036;
t3078 = 0.2e1 * qJ(2,1);
t3033 = pkin(7) + t3078;
t3207 = (-(sin(t3033) * t3445 + sin(t2987) * t3084 + sin(t3078) * t3085) * t2920 * t2889 + (cos(qJ(2,1) + t3075) * t3318 + cos(-pkin(7) + qJ(2,1)) * t3316 + t3234 * t2998 + t2988 * t3431 + t3438) * t3384) * t2931 * t3368;
t3241 = t3393 / 0.2e1;
t2851 = t2862 * t3241 - t2881;
t3081 = (qJ(3,1) ^ 2);
t3222 = 0.2e1 * t3029 * t3384;
t3213 = -((-0.4e1 * t2851 * t2998 + t2995 * t3222) * pkin(3) + (t2851 * t3431 + t3057 * t3222) * pkin(2) - (t2862 * t3440 + ((qJ(3,1) * t3430) - cos(t2987) * t3084 - cos(t3078) * t3085 - (2 * t3081) + (-cos(t3033) - t3045) * t3445 + t3157) * t2889) * t3393) * t3392 / 0.2e1;
t3120 = -t3207 / 0.2e1 + (-t3192 - t3213) * t2889;
t3355 = t3008 * ((-t3019 - pkin(1)) * t2841 + t3120);
t3354 = t3008 * t3064;
t3353 = t3011 * t3054;
t3352 = t3012 * t3056;
t3351 = t3013 * t3058;
t3350 = t3014 * t3054;
t3349 = t3015 * t3056;
t3348 = t3016 * t3058;
t3340 = t3053 * t3059;
t3337 = t3055 * t3061;
t3334 = t3057 * t3063;
t3322 = t3082 + t3086;
t3203 = t3053 * t3274;
t3259 = t2929 * t3382;
t3218 = pkin(2) * t3259;
t3240 = t3386 / 0.2e1;
t3315 = 0.2e1 * (-(-pkin(2) * t3203 + t3047 * t3240) * pkin(2) * t2929 * t3381 + (t2860 * t3047 * t3401 + pkin(1) * t3218) * t3274) * t3002;
t3201 = t3055 * t3272;
t3258 = t2930 * t3376;
t3217 = pkin(2) * t3258;
t3239 = t3385 / 0.2e1;
t3314 = 0.2e1 * (-pkin(2) * (-pkin(2) * t3201 + t3048 * t3239) * t2930 * t3375 + (t2861 * t3048 * t3397 + pkin(1) * t3217) * t3272) * t3005;
t3199 = t3057 * t3270;
t3257 = t2931 * t3370;
t3216 = pkin(2) * t3257;
t3238 = t3384 / 0.2e1;
t3313 = 0.2e1 * (-pkin(2) * t2931 * (-pkin(2) * t3199 + t3049 * t3238) * t3369 + (t2862 * t3049 * t3393 + pkin(1) * t3216) * t3270) * t3008;
t3312 = -0.2e1 * t3386;
t3311 = -0.2e1 * t3385;
t3310 = -0.2e1 * t3384;
t3306 = t3011 * t3420;
t3305 = t3012 * t3420;
t3304 = t3013 * t3420;
t3303 = t3014 * t3420;
t3302 = t3015 * t3420;
t3301 = t3016 * t3420;
t3299 = t3054 * t3420;
t3297 = t3056 * t3420;
t3295 = t3058 * t3420;
t3292 = t2839 * t3382;
t3291 = t2839 * t3381;
t3290 = t3053 ^ 2 * t3410;
t3289 = t2840 * t3376;
t3288 = t2840 * t3375;
t3287 = t3055 ^ 2 * t3408;
t3286 = t2841 * t3370;
t3285 = t2841 * t3369;
t3284 = t3057 ^ 2 * t3406;
t3279 = t2914 * t3448;
t3277 = t2917 * t3447;
t3275 = t2920 * t3446;
t2890 = (-t2984 * t3353 + t3303) * t3059 + (t3011 * t3299 + t3362) * t3053;
t3268 = t2890 * t3401;
t2891 = (-t2984 * t3352 + t3302) * t3061 + (t3012 * t3297 + t3361) * t3055;
t3267 = t2891 * t3397;
t2892 = (-t2984 * t3351 + t3301) * t3063 + (t3013 * t3295 + t3360) * t3057;
t3266 = t2892 * t3393;
t2893 = (t2984 * t3350 + t3306) * t3059 + t3053 * (-t3014 * t3299 + t3365);
t3265 = t2893 * t3401;
t2894 = (t2984 * t3349 + t3305) * t3061 + t3055 * (-t3015 * t3297 + t3364);
t3264 = t2894 * t3397;
t2895 = (t2984 * t3348 + t3304) * t3063 + t3057 * (-t3016 * t3295 + t3363);
t3263 = t2895 * t3393;
t3262 = t2926 / t3095 ^ 2 * t2949;
t3261 = t2927 / t3098 ^ 2 * t2950;
t3260 = t2928 / t3101 ^ 2 * t2951;
t3256 = t3053 * t3378;
t3255 = t3059 * t3378;
t3254 = t3055 * t3372;
t3253 = t3061 * t3372;
t3252 = t3057 * t3366;
t3251 = t3063 * t3366;
t3196 = t2927 * t3254;
t3186 = pkin(2) * t3196;
t3226 = 0.2e1 * t2888 * t3395;
t3233 = t3005 * (0.2e1 * t2840 * t3048 + t2861 * t3226 - t3373 * t3426 - t3186);
t3195 = t2928 * t3252;
t3185 = pkin(2) * t3195;
t3225 = 0.2e1 * t2889 * t3391;
t3232 = t3008 * (0.2e1 * t2841 * t3049 + t2862 * t3225 - t3367 * t3425 - t3185);
t3197 = t2926 * t3256;
t3187 = pkin(2) * t3197;
t3227 = 0.2e1 * t2887 * t3399;
t3231 = (0.2e1 * t2839 * t3047 + t2860 * t3227 - t3379 * t3427 - t3187) * t3002;
t3230 = t2914 * t3315;
t3229 = t2917 * t3314;
t3228 = t2920 * t3313;
t3212 = t3340 * t3410;
t3211 = t3337 * t3408;
t3210 = t3334 * t3406;
t3202 = t2887 * t3003 * t3386;
t3200 = t2888 * t3006 * t3385;
t3198 = t2889 * t3009 * t3384;
t3190 = t2914 * t3231;
t3189 = t2917 * t3233;
t3188 = t2920 * t3232;
t3184 = t3053 * t3206;
t3183 = t3059 * t3206;
t3182 = t3055 * t3205;
t3181 = t3061 * t3205;
t3180 = t3057 * t3204;
t3179 = t3063 * t3204;
t3178 = t2999 * t3202;
t3177 = t3000 * t3200;
t3176 = t3001 * t3198;
t3169 = t3002 * (-pkin(5) * t3197 + (t3059 * pkin(5) * t3240 - pkin(1) * t3203) * t3312 + 0.2e1 * t3059 * t3414);
t3168 = t3002 * (-pkin(5) * t2926 * t3255 + (-t3059 * t2882 + t3259 * t3429) * t3312 + t3409 * t3441);
t3167 = t3005 * (-pkin(5) * t2927 * t3253 + (-t3061 * t2883 + t3258 * t3429) * t3311 + t3407 * t3441);
t3166 = (-pkin(5) * t3196 + (t3061 * pkin(5) * t3239 - pkin(1) * t3201) * t3311 + 0.2e1 * t3061 * t3413) * t3005;
t3165 = (-pkin(5) * t3195 + (t3063 * pkin(5) * t3238 - pkin(1) * t3199) * t3310 + 0.2e1 * t3063 * t3412) * t3008;
t3164 = (-pkin(5) * t2928 * t3251 + (-t3063 * t2881 + t3257 * t3429) * t3310 + t3405 * t3441) * t3008;
t3163 = t3011 * t3184;
t3162 = t3012 * t3182;
t3161 = t3013 * t3180;
t3160 = t3014 * t3183;
t3159 = t3015 * t3181;
t3158 = t3016 * t3179;
t3156 = t3026 + t3309 + t3437;
t3149 = 0.2e1 * t3202 * t3340;
t3148 = 0.2e1 * t3200 * t3337;
t3147 = 0.2e1 * t3198 * t3334;
t3146 = t2914 * t3169;
t3145 = t2914 * t3168;
t3144 = t2917 * t3166;
t3143 = t2917 * t3167;
t3142 = t2920 * t3165;
t3141 = t2920 * t3164;
t3140 = t2937 * (-(-t2882 - (t2887 * t3017 - 0.2e1 * t2860) * t3401) * t3203 - t3047 * t3409 + t3378 * t3427);
t3139 = t2941 * (-(-t2883 - (t2888 * t3018 - 0.2e1 * t2861) * t3397) * t3201 - t3048 * t3407 + t3372 * t3426);
t3138 = t2945 * (-(-t2881 - (t2889 * t3019 - 0.2e1 * t2862) * t3393) * t3199 - t3049 * t3405 + t3366 * t3425);
t2872 = t2887 * t3047 * t3243 + t3218;
t3137 = t2872 * t3227 - t2914 * t3359;
t2873 = t2888 * t3048 * t3242 + t3217;
t3136 = t2873 * t3226 - t2917 * t3357;
t2874 = t2889 * t3049 * t3241 + t3216;
t3135 = t2874 * t3225 - t2920 * t3355;
t3134 = (-t2938 * t3053 + t3255) * t3389;
t3133 = (t3256 + t3379) * t3389;
t3132 = (-t2942 * t3055 + t3253) * t3388;
t3131 = (t3254 + t3373) * t3388;
t3130 = (-t2946 * t3057 + t3251) * t3387;
t3129 = (t3252 + t3367) * t3387;
t3128 = t2914 * t3134;
t3127 = t2914 * t3133;
t3126 = t2917 * t3132;
t3125 = t2917 * t3131;
t3124 = t2920 * t3130;
t3123 = t2920 * t3129;
t3119 = -t2914 * t3290 + t2915 * t3149;
t3118 = -t2917 * t3287 + t2918 * t3148;
t3117 = -t2920 * t3284 + t2921 * t3147;
t3116 = t3011 * t3292 + t3012 * t3289 + t3013 * t3286;
t3115 = t3011 * t3291 + t3012 * t3288 + t3013 * t3285;
t3114 = t3014 * t3292 + t3015 * t3289 + t3016 * t3286;
t3113 = t3014 * t3291 + t3015 * t3288 + t3016 * t3285;
t3112 = -0.2e1 * t2914 * t3212 + 0.2e1 * t2915 * t3178;
t3111 = -0.2e1 * t2917 * t3211 + 0.2e1 * t2918 * t3177;
t3110 = -0.2e1 * t2920 * t3210 + 0.2e1 * t2921 * t3176;
t2990 = pkin(1) * t3420;
t2932 = (t3030 - 0.1e1 / 0.2e1) * t3084 + t3323;
t2910 = t3058 * t3235 + t3219;
t2909 = t3056 * t3236 + t3220;
t2908 = t3054 * t3237 + t3221;
t2907 = t3442 * t3064 + t2977;
t2906 = t3443 * t3062 + t2976;
t2905 = t3444 * t3060 + t2975;
t2901 = t3156 * t3057 + t2990;
t2900 = t3156 * t3055 + t2990;
t2899 = t3156 * t3053 + t2990;
t2880 = (t2932 * t3348 + t2984 * t3304) * t3434 + (t2901 * t3013 + t2910 * t3360) * t3063 - t3016 * t3421 + t2957 * t3363;
t2879 = (-t2932 * t3351 + t2984 * t3301) * t3434 + (t2901 * t3016 - t2910 * t3363) * t3063 + t3013 * t3421 + t2957 * t3360;
t2878 = (t2932 * t3349 + t2984 * t3305) * t3435 + (t2900 * t3012 + t2909 * t3361) * t3061 - t3015 * t3422 + t2956 * t3364;
t2877 = (-t2932 * t3352 + t2984 * t3302) * t3435 + (t2900 * t3015 - t2909 * t3364) * t3061 + t3012 * t3422 + t2956 * t3361;
t2876 = (t2932 * t3350 + t2984 * t3306) * t3436 + (t2899 * t3011 + t2908 * t3362) * t3059 - t3014 * t3423 + t2955 * t3365;
t2875 = (-t2932 * t3353 + t2984 * t3303) * t3436 + (t2899 * t3014 - t2908 * t3365) * t3059 + t3011 * t3423 + t2955 * t3362;
t2820 = 0.2e1 * (t3412 + t3207 / 0.4e1 + (t3213 / 0.2e1 + t3192 / 0.2e1) * t2889) * t3019 - t3049 * t3185 - pkin(1) * t3120 + ((qJ(3,1) * t3439) + t3042 * t3085 + t3081 + t3322) * t2841;
t2819 = 0.2e1 * (t3413 + t3208 / 0.4e1 + (t3214 / 0.2e1 + t3193 / 0.2e1) * t2888) * t3018 - t3048 * t3186 - pkin(1) * t3121 + ((qJ(3,2) * t3439) + t3041 * t3085 + t3080 + t3322) * t2840;
t2818 = 0.2e1 * (t3414 + t3209 / 0.4e1 + (t3215 / 0.2e1 + t3194 / 0.2e1) * t2887) * t3017 - t3047 * t3187 - pkin(1) * t3122 + ((qJ(3,3) * t3439) + t3040 * t3085 + t3079 + t3322) * t2839;
t1 = [(-t2839 * t3265 - t2840 * t3264 - t2841 * t3263) * MDP(1) + (t3119 * t2893 + t3118 * t2894 + t3117 * t2895 - t3059 * t3163 - t3061 * t3162 - t3063 * t3161) * MDP(4) + (t2893 * t3112 + t2894 * t3111 + t2895 * t3110 - t3011 * t3383 - t3012 * t3377 - t3013 * t3371) * MDP(5) + (-t2893 * t3127 - t2894 * t3125 - t2895 * t3123 + t3116) * MDP(6) + (-t2893 * t3128 - t2894 * t3126 - t2895 * t3124 + t3115) * MDP(7) + (t3011 * t3262 + t3012 * t3261 + t3013 * t3260) * MDP(8) + (-t2895 * t3142 - t2894 * t3144 - t2893 * t3146 - t3116 * pkin(5) + (t3161 + t3162 + t3163) * pkin(1)) * MDP(9) + (-t2895 * t3141 - t2894 * t3143 - t2893 * t3145 - t3115 * pkin(5) + (t3011 * t3183 + t3012 * t3181 + t3013 * t3179) * pkin(1)) * MDP(10) + (-t3116 * pkin(2) + t2876 * t3279 + t2878 * t3277 + t2880 * t3275 - t2893 * t3190 - t2894 * t3189 - t2895 * t3188) * MDP(11) + (-t2818 * t3265 - t2819 * t3264 - t2820 * t3263 + t3135 * t2880 + t3136 * t2878 + t3137 * t2876 - t2893 * t3230 - t2894 * t3229 - t2895 * t3228 + (t3011 * t3140 + t3012 * t3139 + t3013 * t3138) * pkin(2)) * MDP(12); (-t2839 * t3268 - t2840 * t3267 - t2841 * t3266) * MDP(1) + (t3119 * t2890 + t3118 * t2891 + t3117 * t2892 - t3053 * t3160 - t3055 * t3159 - t3057 * t3158) * MDP(4) + (t2890 * t3112 + t2891 * t3111 + t2892 * t3110 - t3014 * t3383 - t3015 * t3377 - t3016 * t3371) * MDP(5) + (-t2890 * t3127 - t2891 * t3125 - t2892 * t3123 + t3114) * MDP(6) + (-t2890 * t3128 - t2891 * t3126 - t2892 * t3124 + t3113) * MDP(7) + (t3014 * t3262 + t3015 * t3261 + t3016 * t3260) * MDP(8) + (-t2892 * t3142 - t2891 * t3144 - t2890 * t3146 - t3114 * pkin(5) + (t3014 * t3184 + t3015 * t3182 + t3016 * t3180) * pkin(1)) * MDP(9) + (-t2892 * t3141 - t2891 * t3143 - t2890 * t3145 - t3113 * pkin(5) + (t3158 + t3159 + t3160) * pkin(1)) * MDP(10) + (-t3114 * pkin(2) + t2875 * t3279 + t2877 * t3277 + t2879 * t3275 - t2890 * t3190 - t2891 * t3189 - t2892 * t3188) * MDP(11) + (-t2818 * t3268 - t2819 * t3267 - t2820 * t3266 + t3135 * t2879 + t3136 * t2877 + t3137 * t2875 - t2890 * t3230 - t2891 * t3229 - t2892 * t3228 + (t3014 * t3140 + t3015 * t3139 + t3016 * t3138) * pkin(2)) * MDP(12); (t2839 * t3358 + t2840 * t3356 + t2841 * t3354) * MDP(1) + ((-t2920 * t3147 + t3284) * t3064 + (-t2917 * t3148 + t3287) * t3062 + (-t2914 * t3149 + t3290) * t3060) * MDP(4) + 0.2e1 * ((-t2920 * t3176 + t3210) * t3064 + (-t2917 * t3177 + t3211) * t3062 + (-t2914 * t3178 + t3212) * t3060) * MDP(5) + (t3060 * t3133 + t3062 * t3131 + t3064 * t3129) * MDP(6) + (t3060 * t3134 + t3062 * t3132 + t3064 * t3130) * MDP(7) + (t3060 * t3169 + t3062 * t3166 + t3064 * t3165) * MDP(9) + (t3060 * t3168 + t3062 * t3167 + t3064 * t3164) * MDP(10) + (-t2905 * t3448 - t2906 * t3447 - t2907 * t3446 + t3060 * t3231 + t3062 * t3233 + t3064 * t3232) * MDP(11) + (t2818 * t3358 + t2819 * t3356 + t2820 * t3354 + (-0.2e1 * t2874 * t3269 + t3355) * t2907 + (-0.2e1 * t2873 * t3271 + t3357) * t2906 + (-0.2e1 * t2872 * t3273 + t3359) * t2905 + t3060 * t3315 + t3062 * t3314 + t3064 * t3313) * MDP(12);];
taucX  = t1;
