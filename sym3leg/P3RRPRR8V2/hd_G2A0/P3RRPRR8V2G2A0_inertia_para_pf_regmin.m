% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x13]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 21:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR8V2G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 21:12:33
% EndTime: 2020-08-06 21:12:39
% DurationCPUTime: 5.04s
% Computational Cost: add. (7213->373), mult. (13128->794), div. (1290->18), fcn. (10458->23), ass. (0->365)
t985 = 2 * pkin(1);
t751 = (pkin(5) + qJ(3,3));
t984 = 2 * t751;
t752 = (pkin(5) + qJ(3,2));
t983 = 2 * t752;
t753 = (pkin(5) + qJ(3,1));
t982 = 2 * t753;
t750 = cos(pkin(7));
t961 = t750 * pkin(3);
t712 = pkin(2) + t961;
t757 = sin(qJ(2,3));
t758 = sin(qJ(1,3));
t763 = cos(qJ(2,3));
t754 = legFrame(3,2);
t723 = sin(t754);
t749 = sin(pkin(7));
t962 = t749 * pkin(3);
t909 = t723 * t962;
t726 = cos(t754);
t912 = t726 * t962;
t935 = t723 * t758;
t945 = t712 * t726;
t666 = (-t712 * t935 + t912) * t763 + (t758 * t909 + t945) * t757;
t930 = t726 * t758;
t936 = t723 * t712;
t669 = (t712 * t930 + t909) * t763 + t757 * (-t758 * t912 + t936);
t981 = t666 * t669;
t759 = sin(qJ(2,2));
t760 = sin(qJ(1,2));
t765 = cos(qJ(2,2));
t755 = legFrame(2,2);
t724 = sin(t755);
t908 = t724 * t962;
t727 = cos(t755);
t911 = t727 * t962;
t933 = t724 * t760;
t944 = t712 * t727;
t667 = (-t712 * t933 + t911) * t765 + (t760 * t908 + t944) * t759;
t929 = t727 * t760;
t934 = t724 * t712;
t670 = (t712 * t929 + t908) * t765 + t759 * (-t760 * t911 + t934);
t980 = t667 * t670;
t761 = sin(qJ(2,1));
t762 = sin(qJ(1,1));
t767 = cos(qJ(2,1));
t756 = legFrame(1,2);
t725 = sin(t756);
t907 = t725 * t962;
t728 = cos(t756);
t910 = t728 * t962;
t931 = t725 * t762;
t943 = t712 * t728;
t668 = (-t712 * t931 + t910) * t767 + (t762 * t907 + t943) * t761;
t928 = t728 * t762;
t932 = t725 * t712;
t671 = (t712 * t928 + t907) * t767 + t761 * (-t762 * t910 + t932);
t979 = t668 * t671;
t922 = t749 * t761;
t904 = pkin(3) * t922;
t695 = t712 * t767 - t904;
t691 = 0.1e1 / t695;
t738 = pkin(6) + t753;
t721 = 1 / t738;
t938 = t721 * t767;
t884 = t691 * t938;
t858 = 0.2e1 * t884;
t807 = pkin(2) * t858;
t956 = t691 * t721;
t978 = -t807 / 0.2e1 - pkin(1) * t956;
t923 = t749 * t759;
t905 = pkin(3) * t923;
t694 = t712 * t765 - t905;
t689 = 0.1e1 / t694;
t737 = pkin(6) + t752;
t719 = 1 / t737;
t940 = t719 * t765;
t889 = t689 * t940;
t860 = 0.2e1 * t889;
t808 = pkin(2) * t860;
t958 = t689 * t719;
t977 = -t808 / 0.2e1 - pkin(1) * t958;
t924 = t749 * t757;
t906 = pkin(3) * t924;
t693 = t712 * t763 - t906;
t687 = 0.1e1 / t693;
t736 = pkin(6) + t751;
t717 = 1 / t736;
t942 = t717 * t763;
t894 = t687 * t942;
t862 = 0.2e1 * t894;
t809 = pkin(2) * t862;
t960 = t687 * t717;
t976 = -t809 / 0.2e1 - pkin(1) * t960;
t921 = pkin(1) ^ 2 + pkin(5) ^ 2;
t969 = 2 * pkin(5);
t711 = (t969 + qJ(3,1)) * qJ(3,1) + t921;
t747 = t767 ^ 2;
t771 = pkin(2) ^ 2;
t868 = t721 * t747 * t771;
t975 = pkin(1) * t807 + t691 * t868 + t711 * t956;
t710 = (t969 + qJ(3,2)) * qJ(3,2) + t921;
t745 = t765 ^ 2;
t870 = t719 * t745 * t771;
t974 = pkin(1) * t808 + t689 * t870 + t710 * t958;
t709 = (t969 + qJ(3,3)) * qJ(3,3) + t921;
t743 = t763 ^ 2;
t872 = t717 * t743 * t771;
t973 = pkin(1) * t809 + t687 * t872 + t709 * t960;
t972 = -2 * pkin(1);
t970 = 0.2e1 * pkin(2);
t968 = 0.2e1 * t743;
t967 = 0.2e1 * t745;
t966 = 0.2e1 * t747;
t764 = cos(qJ(1,3));
t857 = pkin(1) * t758 - t764 * t736;
t739 = t750 ^ 2;
t903 = pkin(3) * (t739 - 0.1e1);
t965 = pkin(3) * (t758 * t903 + t857 * t924);
t766 = cos(qJ(1,2));
t856 = pkin(1) * t760 - t766 * t737;
t964 = pkin(3) * (t760 * t903 + t856 * t923);
t768 = cos(qJ(1,1));
t855 = pkin(1) * t762 - t768 * t738;
t963 = pkin(3) * (t762 * t903 + t855 * t922);
t729 = t763 * pkin(2);
t730 = t765 * pkin(2);
t731 = t767 * pkin(2);
t688 = 0.1e1 / t693 ^ 2;
t718 = 1 / t736 ^ 2;
t959 = t688 * t718;
t690 = 0.1e1 / t694 ^ 2;
t720 = 1 / t737 ^ 2;
t957 = t690 * t720;
t692 = 0.1e1 / t695 ^ 2;
t722 = 1 / t738 ^ 2;
t955 = t692 * t722;
t703 = pkin(3) * cos(qJ(2,3) + pkin(7)) + t729;
t697 = 0.1e1 / t703;
t954 = t697 * t723;
t953 = t697 * t726;
t952 = t697 * t757;
t704 = pkin(3) * cos(qJ(2,2) + pkin(7)) + t730;
t699 = 0.1e1 / t704;
t951 = t699 * t724;
t950 = t699 * t727;
t949 = t699 * t759;
t705 = pkin(3) * cos(qJ(2,1) + pkin(7)) + t731;
t701 = 0.1e1 / t705;
t948 = t701 * t725;
t947 = t701 * t728;
t946 = t701 * t761;
t941 = t717 * t764;
t939 = t719 * t766;
t937 = t721 * t768;
t744 = t764 ^ 2;
t927 = t744 * t718;
t746 = t766 ^ 2;
t926 = t746 * t720;
t748 = t768 ^ 2;
t925 = t748 * t722;
t919 = pkin(2) * t961;
t915 = pkin(5) * t697 * t763;
t914 = pkin(5) * t699 * t765;
t913 = pkin(5) * t701 * t767;
t902 = t666 * t960;
t901 = t667 * t958;
t900 = t668 * t956;
t899 = t669 * t960;
t898 = t670 * t958;
t897 = t671 * t956;
t895 = t757 * t960;
t893 = t687 * t718 * t764;
t740 = t757 ^ 2;
t892 = t740 * t959;
t890 = t759 * t958;
t888 = t689 * t720 * t766;
t741 = t759 ^ 2;
t887 = t741 * t957;
t885 = t761 * t956;
t883 = t691 * t722 * t768;
t742 = t761 ^ 2;
t882 = t742 * t955;
t881 = t697 * t941;
t880 = t723 * t952;
t879 = t726 * t952;
t878 = t699 * t939;
t877 = t724 * t949;
t876 = t727 * t949;
t875 = t701 * t937;
t874 = t725 * t946;
t873 = t728 * t946;
t871 = t718 * t757 * t763;
t869 = t720 * t759 * t765;
t867 = t722 * t761 * t767;
t866 = -pkin(1) - t729;
t865 = -pkin(1) - t730;
t864 = -pkin(1) - t731;
t863 = t960 * t984;
t861 = t958 * t983;
t859 = t956 * t982;
t854 = pkin(2) * t880;
t853 = pkin(2) * t879;
t852 = pkin(2) * t877;
t851 = pkin(2) * t876;
t850 = pkin(2) * t874;
t849 = pkin(2) * t873;
t848 = t959 * t981;
t847 = t957 * t980;
t846 = t955 * t979;
t845 = t697 * t895;
t844 = t697 * t894;
t842 = t751 * t895;
t841 = t740 * t893;
t840 = t757 * t893;
t839 = t763 * t893;
t838 = t688 * t871;
t837 = t699 * t890;
t836 = t699 * t889;
t834 = t752 * t890;
t833 = t741 * t888;
t832 = t759 * t888;
t831 = t765 * t888;
t830 = t690 * t869;
t829 = t701 * t885;
t828 = t701 * t884;
t826 = t753 * t885;
t825 = t742 * t883;
t824 = t761 * t883;
t823 = t767 * t883;
t822 = t692 * t867;
t821 = t757 * t881;
t820 = t763 * t881;
t819 = t759 * t878;
t818 = t765 * t878;
t817 = t761 * t875;
t816 = t767 * t875;
t815 = t895 * t972;
t814 = pkin(1) * t862;
t813 = t890 * t972;
t812 = pkin(1) * t860;
t811 = t885 * t972;
t810 = pkin(1) * t858;
t806 = t893 * t984;
t805 = t888 * t983;
t804 = t883 * t982;
t803 = t723 * t845;
t802 = t723 * t844;
t801 = t726 * t845;
t800 = t726 * t844;
t799 = t757 * t839;
t798 = t724 * t837;
t797 = t724 * t836;
t796 = t727 * t837;
t795 = t727 * t836;
t794 = t759 * t831;
t793 = t725 * t829;
t792 = t725 * t828;
t791 = t728 * t829;
t790 = t728 * t828;
t789 = t761 * t823;
t788 = t723 * t821;
t787 = t724 * t819;
t786 = t725 * t817;
t785 = t726 * t821;
t784 = t727 * t819;
t783 = t728 * t817;
t770 = pkin(3) ^ 2;
t782 = 0.2e1 * t739 * t770 - t770 + t771 + 0.2e1 * t919;
t781 = t697 * (t666 * t723 + t669 * t726) * t960;
t780 = t699 * (t667 * t724 + t670 * t727) * t958;
t779 = t701 * (t668 * t725 + t671 * t728) * t956;
t655 = t786 + t787 + t788;
t656 = t723 * t820 + t724 * t818 + t725 * t816;
t657 = t783 + t784 + t785;
t658 = t726 * t820 + t727 * t818 + t728 * t816;
t778 = -t666 * t803 - t667 * t798 - t668 * t793;
t777 = t666 * t801 + t667 * t796 + t668 * t791;
t776 = t666 * t800 + t667 * t795 + t668 * t790;
t775 = t669 * t803 + t670 * t798 + t671 * t793;
t774 = t669 * t802 + t670 * t797 + t671 * t792;
t773 = -t669 * t801 - t670 * t796 - t671 * t791;
t713 = pkin(1) * t962;
t708 = pkin(1) * t761 - t962;
t707 = pkin(1) * t759 - t962;
t706 = pkin(1) * t757 - t962;
t702 = 0.1e1 / t705 ^ 2;
t700 = 0.1e1 / t704 ^ 2;
t698 = 0.1e1 / t703 ^ 2;
t696 = t919 + t771 / 0.2e1 + (t739 - 0.1e1 / 0.2e1) * t770;
t686 = -0.2e1 * t762 * t904 + t855;
t685 = -0.2e1 * t760 * t905 + t856;
t684 = -0.2e1 * t758 * t906 + t857;
t683 = t762 * t738 + (pkin(1) + t705) * t768;
t682 = t760 * t737 + (pkin(1) + t704) * t766;
t681 = t758 * t736 + (pkin(1) + t703) * t764;
t680 = t782 * t761 + t713;
t679 = t782 * t759 + t713;
t678 = t782 * t757 + t713;
t674 = (t864 * t768 + t683) * t721;
t673 = (t865 * t766 + t682) * t719;
t672 = (t866 * t764 + t681) * t717;
t665 = t671 ^ 2;
t664 = t670 ^ 2;
t663 = t669 ^ 2;
t662 = t668 ^ 2;
t661 = t667 ^ 2;
t660 = t666 ^ 2;
t659 = t723 * t698 * t726 + t724 * t700 * t727 + t725 * t702 * t728;
t654 = t668 * t859 - t849;
t653 = t671 * t859 - t850;
t652 = t667 * t861 - t851;
t651 = t670 * t861 - t852;
t650 = t666 * t863 - t853;
t649 = t669 * t863 - t854;
t648 = pkin(2) * t948 - t671 * t826;
t647 = pkin(2) * t951 - t670 * t834;
t646 = pkin(2) * t954 - t669 * t842;
t645 = pkin(2) * t947 - t668 * t826;
t644 = pkin(2) * t950 - t667 * t834;
t643 = pkin(2) * t953 - t666 * t842;
t642 = t668 * t811 - t728 * t913;
t641 = t671 * t811 - t725 * t913;
t640 = t667 * t813 - t727 * t914;
t639 = t670 * t813 - t724 * t914;
t638 = t666 * t815 - t726 * t915;
t637 = t669 * t815 - t723 * t915;
t636 = -pkin(5) * t873 + t668 * t810;
t635 = -pkin(5) * t874 + t671 * t810;
t634 = -pkin(5) * t876 + t667 * t812;
t633 = -pkin(5) * t877 + t670 * t812;
t632 = -pkin(5) * t879 + t666 * t814;
t631 = -pkin(5) * t880 + t669 * t814;
t630 = t768 * t868 + (t768 * pkin(1) - t683 / 0.2e1) * t938 * t970 + t711 * t937 - pkin(1) * t683 * t721;
t629 = t766 * t870 + (t766 * pkin(1) - t682 / 0.2e1) * t940 * t970 + t710 * t939 - pkin(1) * t682 * t719;
t628 = t764 * t872 + (t764 * pkin(1) - t681 / 0.2e1) * t942 * t970 + t709 * t941 - pkin(1) * t681 * t717;
t627 = (t696 * t928 + t712 * t907) * t966 + (t725 * t680 + t686 * t943) * t767 - t728 * t963 + t708 * t932;
t626 = (-t696 * t931 + t712 * t910) * t966 + (t680 * t728 - t686 * t932) * t767 + t725 * t963 + t708 * t943;
t625 = (t696 * t929 + t712 * t908) * t967 + (t724 * t679 + t685 * t944) * t765 - t727 * t964 + t707 * t934;
t624 = (-t696 * t933 + t712 * t911) * t967 + (t679 * t727 - t685 * t934) * t765 + t724 * t964 + t707 * t944;
t623 = (t696 * t930 + t712 * t909) * t968 + (t723 * t678 + t684 * t945) * t763 - t726 * t965 + t706 * t936;
t622 = (-t696 * t935 + t712 * t912) * t968 + (t678 * t726 - t684 * t936) * t763 + t723 * t965 + t706 * t945;
t621 = t669 * t893 + t670 * t888 + t671 * t883;
t620 = t666 * t893 + t667 * t888 + t668 * t883;
t619 = t669 * t841 + t670 * t833 + t671 * t825;
t618 = t666 * t841 + t667 * t833 + t668 * t825;
t617 = 0.2e1 * t669 * t799 + 0.2e1 * t670 * t794 + 0.2e1 * t671 * t789;
t616 = 0.2e1 * t666 * t799 + 0.2e1 * t667 * t794 + 0.2e1 * t668 * t789;
t615 = (t864 * t671 + t627) * t956;
t614 = (t865 * t670 + t625) * t958;
t613 = (t866 * t669 + t623) * t960;
t612 = (t864 * t668 + t626) * t956;
t611 = (t865 * t667 + t624) * t958;
t610 = (t866 * t666 + t622) * t960;
t609 = t846 + t847 + t848;
t608 = t740 * t848 + t741 * t847 + t742 * t846;
t607 = 0.2e1 * t822 * t979 + 0.2e1 * t830 * t980 + 0.2e1 * t838 * t981;
t606 = t763 * t781 + t765 * t780 + t767 * t779;
t605 = t757 * t781 + t759 * t780 + t761 * t779;
t604 = t978 * t627 + t975 * t671 - t753 * t850;
t603 = t978 * t626 + t975 * t668 - t753 * t849;
t602 = t977 * t625 + t974 * t670 - t752 * t852;
t601 = t977 * t624 + t974 * t667 - t752 * t851;
t600 = t976 * t623 + t973 * t669 - t751 * t854;
t599 = t976 * t622 + t973 * t666 - t751 * t853;
t1 = [t663 * t959 + t664 * t957 + t665 * t955, 0, 0, t663 * t892 + t664 * t887 + t665 * t882, 0.2e1 * t663 * t838 + 0.2e1 * t664 * t830 + 0.2e1 * t665 * t822, 0.2e1 * t775, 0.2e1 * t774, t723 ^ 2 * t698 + t724 ^ 2 * t700 + t725 ^ 2 * t702, -pkin(5) * t775 + t631 * t899 + t633 * t898 + t635 * t897, -pkin(5) * t774 + t637 * t899 + t639 * t898 + t641 * t897, -pkin(2) * t775 + t649 * t899 + t651 * t898 + t653 * t897, (t604 * t671 + t615 * t627) * t956 + (t602 * t670 + t614 * t625) * t958 + (t600 * t669 + t613 * t623) * t960 + (t646 * t954 + t647 * t951 + t648 * t948) * pkin(2), 1; t609, 0, 0, t608, t607, t605, t606, t659, pkin(5) * t778 + t632 * t899 + t634 * t898 + t636 * t897, t638 * t899 + t640 * t898 + t642 * t897 + (-t666 * t802 - t667 * t797 - t668 * t792) * pkin(5), pkin(2) * t778 + t650 * t899 + t652 * t898 + t654 * t897, (t603 * t671 + t612 * t627) * t956 + (t601 * t670 + t611 * t625) * t958 + (t599 * t669 + t610 * t623) * t960 + (t643 * t954 + t644 * t951 + t645 * t948) * pkin(2), 0; t621, 0, 0, t619, t617, t655, t656, 0, -t655 * pkin(5) + (t669 * t839 + t670 * t831 + t671 * t823) * t985, -t656 * pkin(5) + (-t669 * t840 - t670 * t832 - t671 * t824) * t985, -pkin(2) * t655 + t669 * t806 + t670 * t805 + t671 * t804, (t627 * t674 + t630 * t671) * t956 + (t625 * t673 + t629 * t670) * t958 + (t623 * t672 + t628 * t669) * t960 + (-t751 * t788 - t752 * t787 - t753 * t786) * pkin(2), 0; t609, 0, 0, t608, t607, t605, t606, t659, pkin(5) * t773 + t631 * t902 + t633 * t901 + t635 * t900, t637 * t902 + t639 * t901 + t641 * t900 + (-t669 * t800 - t670 * t795 - t671 * t790) * pkin(5), pkin(2) * t773 + t649 * t902 + t651 * t901 + t653 * t900, (t604 * t668 + t615 * t626) * t956 + (t602 * t667 + t614 * t624) * t958 + (t600 * t666 + t613 * t622) * t960 + (t646 * t953 + t647 * t950 + t648 * t947) * pkin(2), 0; t660 * t959 + t661 * t957 + t662 * t955, 0, 0, t660 * t892 + t661 * t887 + t662 * t882, 0.2e1 * t660 * t838 + 0.2e1 * t661 * t830 + 0.2e1 * t662 * t822, 0.2e1 * t777, 0.2e1 * t776, t726 ^ 2 * t698 + t727 ^ 2 * t700 + t728 ^ 2 * t702, -pkin(5) * t777 + t632 * t902 + t634 * t901 + t636 * t900, -pkin(5) * t776 + t638 * t902 + t640 * t901 + t642 * t900, -pkin(2) * t777 + t650 * t902 + t652 * t901 + t654 * t900, (t603 * t668 + t612 * t626) * t956 + (t601 * t667 + t611 * t624) * t958 + (t599 * t666 + t610 * t622) * t960 + (t643 * t953 + t644 * t950 + t645 * t947) * pkin(2), 1; t620, 0, 0, t618, t616, t657, t658, 0, -t657 * pkin(5) + (t666 * t839 + t667 * t831 + t668 * t823) * t985, -t658 * pkin(5) + (-t666 * t840 - t667 * t832 - t668 * t824) * t985, -pkin(2) * t657 + t666 * t806 + t667 * t805 + t668 * t804, (t626 * t674 + t630 * t668) * t956 + (t624 * t673 + t629 * t667) * t958 + (t622 * t672 + t628 * t666) * t960 + (-t751 * t785 - t752 * t784 - t753 * t783) * pkin(2), 0; t621, 0, 0, t619, t617, t655, t656, 0, t631 * t941 + t633 * t939 + t635 * t937, t637 * t941 + t639 * t939 + t641 * t937, t649 * t941 + t651 * t939 + t653 * t937, (t604 * t768 + t615 * t683) * t721 + (t602 * t766 + t614 * t682) * t719 + (t600 * t764 + t613 * t681) * t717, 0; t620, 0, 0, t618, t616, t657, t658, 0, t632 * t941 + t634 * t939 + t636 * t937, t638 * t941 + t640 * t939 + t642 * t937, t650 * t941 + t652 * t939 + t654 * t937, (t603 * t768 + t612 * t683) * t721 + (t601 * t766 + t611 * t682) * t719 + (t599 * t764 + t610 * t681) * t717, 0; t925 + t926 + t927, 0, 0, t740 * t927 + t741 * t926 + t742 * t925, 0.2e1 * t744 * t871 + 0.2e1 * t746 * t869 + 0.2e1 * t748 * t867, 0, 0, 0, (t763 * t927 + t765 * t926 + t767 * t925) * t985, (-t757 * t927 - t759 * t926 - t761 * t925) * t985, 0.2e1 * t751 * t927 + 0.2e1 * t752 * t926 + 0.2e1 * t753 * t925, (t630 * t768 + t674 * t683) * t721 + (t629 * t766 + t673 * t682) * t719 + (t628 * t764 + t672 * t681) * t717, 1;];
tau_reg  = t1;
