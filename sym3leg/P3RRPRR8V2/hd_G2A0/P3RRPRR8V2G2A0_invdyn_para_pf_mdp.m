% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 21:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR8V2G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(7,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 21:12:55
% EndTime: 2020-08-06 21:13:13
% DurationCPUTime: 16.84s
% Computational Cost: add. (75171->725), mult. (166949->1177), div. (5298->21), fcn. (96597->50), ass. (0->496)
t2069 = sin(pkin(7));
t2095 = xDP(2);
t2365 = pkin(3) * t2095;
t1993 = t2069 * t2365;
t2096 = xDP(1);
t2364 = pkin(3) * t2096;
t1994 = t2069 * t2364;
t2070 = cos(pkin(7));
t1996 = t2070 * t2364;
t2367 = pkin(3) * t2070;
t2006 = pkin(2) + t2367;
t2075 = legFrame(3,2);
t2033 = sin(t2075);
t2036 = cos(t2075);
t2081 = sin(qJ(2,3));
t2082 = sin(qJ(1,3));
t2087 = cos(qJ(2,3));
t2088 = cos(qJ(1,3));
t2178 = t2006 * t2095;
t2094 = xDP(3);
t2366 = pkin(3) * t2094;
t2242 = t2069 * t2366;
t2280 = t2082 * t2096;
t2267 = pkin(2) * t2280 + t1993;
t2050 = pkin(2) * t2096;
t2268 = t1996 + t2050;
t2049 = pkin(2) * t2095;
t2269 = t2070 * t2365 + t2049;
t2274 = t2088 * t2094;
t1888 = ((t2082 * t1996 + t2267) * t2036 + (-t2082 * t2178 + t1994) * t2033 + t2006 * t2274) * t2087 + t2081 * ((-t2082 * t1994 + t2269) * t2036 + (t2082 * t1993 + t2268) * t2033 - t2088 * t2242);
t1885 = t1888 ^ 2;
t2072 = -qJ(3,3) - pkin(5);
t2055 = pkin(6) - t2072;
t2024 = 0.1e1 / t2055;
t2025 = 0.1e1 / t2055 ^ 2;
t2284 = t2069 * t2081;
t2248 = pkin(3) * t2284;
t2402 = -t2006 * t2087 + t2248;
t2334 = 0.1e1 / t2402 ^ 2 * t2025;
t2333 = t2024 * t2334;
t2417 = t1885 * t2333;
t2076 = legFrame(2,2);
t2034 = sin(t2076);
t2037 = cos(t2076);
t2083 = sin(qJ(2,2));
t2084 = sin(qJ(1,2));
t2089 = cos(qJ(2,2));
t2090 = cos(qJ(1,2));
t2278 = t2084 * t2096;
t2266 = pkin(2) * t2278 + t1993;
t2272 = t2090 * t2094;
t1889 = ((t2084 * t1996 + t2266) * t2037 + (-t2084 * t2178 + t1994) * t2034 + t2006 * t2272) * t2089 + t2083 * ((-t2084 * t1994 + t2269) * t2037 + (t2084 * t1993 + t2268) * t2034 - t2090 * t2242);
t1886 = t1889 ^ 2;
t2073 = -qJ(3,2) - pkin(5);
t2056 = pkin(6) - t2073;
t2027 = 0.1e1 / t2056;
t2028 = 0.1e1 / t2056 ^ 2;
t2283 = t2069 * t2083;
t2246 = pkin(3) * t2283;
t2403 = -t2006 * t2089 + t2246;
t2330 = 0.1e1 / t2403 ^ 2 * t2028;
t2329 = t2027 * t2330;
t2416 = t1886 * t2329;
t2077 = legFrame(1,2);
t2035 = sin(t2077);
t2038 = cos(t2077);
t2085 = sin(qJ(2,1));
t2086 = sin(qJ(1,1));
t2091 = cos(qJ(2,1));
t2092 = cos(qJ(1,1));
t2276 = t2086 * t2096;
t2265 = pkin(2) * t2276 + t1993;
t2270 = t2092 * t2094;
t1890 = ((t2086 * t1996 + t2265) * t2038 + (-t2086 * t2178 + t1994) * t2035 + t2006 * t2270) * t2091 + t2085 * ((-t2086 * t1994 + t2269) * t2038 + (t2086 * t1993 + t2268) * t2035 - t2092 * t2242);
t1887 = t1890 ^ 2;
t2074 = -qJ(3,1) - pkin(5);
t2057 = pkin(6) - t2074;
t2030 = 0.1e1 / t2057;
t2031 = 0.1e1 / t2057 ^ 2;
t2282 = t2069 * t2085;
t2244 = pkin(3) * t2282;
t2404 = -t2006 * t2091 + t2244;
t2326 = 0.1e1 / t2404 ^ 2 * t2031;
t2325 = t2030 * t2326;
t2415 = t1887 * t2325;
t2042 = g(3) * t2082;
t2010 = t2033 * g(2);
t2358 = t2036 * g(1);
t2410 = -t2010 + t2358;
t1924 = -t2410 * t2088 + t2042;
t2043 = g(3) * t2084;
t2011 = t2034 * g(2);
t2357 = t2037 * g(1);
t2409 = -t2011 + t2357;
t1925 = -t2409 * t2090 + t2043;
t2044 = g(3) * t2086;
t2012 = t2035 * g(2);
t2356 = t2038 * g(1);
t2408 = -t2012 + t2356;
t1926 = -t2408 * t2092 + t2044;
t2414 = 0.2e1 * pkin(2) * pkin(3);
t2062 = qJ(2,3) + pkin(7);
t2021 = cos(t2062);
t2039 = t2087 * pkin(2);
t1971 = pkin(3) * t2021 + t2039;
t2413 = pkin(1) + t1971;
t2063 = qJ(2,2) + pkin(7);
t2022 = cos(t2063);
t2040 = t2089 * pkin(2);
t1972 = pkin(3) * t2022 + t2040;
t2412 = pkin(1) + t1972;
t2064 = qJ(2,1) + pkin(7);
t2023 = cos(t2064);
t2041 = t2091 * pkin(2);
t1973 = pkin(3) * t2023 + t2041;
t2411 = pkin(1) + t1973;
t1948 = t2033 * t2096 + t2036 * t2095;
t1966 = 0.1e1 / t1971 ^ 2;
t2324 = t1948 ^ 2 * t1966;
t1949 = t2034 * t2096 + t2037 * t2095;
t1968 = 0.1e1 / t1972 ^ 2;
t2323 = t1949 ^ 2 * t1968;
t1950 = t2035 * t2096 + t2038 * t2095;
t1970 = 0.1e1 / t1973 ^ 2;
t2322 = t1950 ^ 2 * t1970;
t2113 = pkin(3) ^ 2;
t2114 = pkin(2) ^ 2;
t2054 = -t2113 + t2114;
t2368 = pkin(3) * t2069;
t1976 = pkin(1) * t2085 - t2368;
t1978 = t2054 * t2095;
t1979 = t2054 * t2096;
t1985 = pkin(1) * t2282 - pkin(3);
t2241 = t2069 * t2414;
t1986 = t2095 * t2241;
t1987 = t2096 * t2241;
t1991 = pkin(1) * t1993;
t1992 = pkin(1) * t1994;
t1999 = t2086 * t2057;
t2016 = pkin(1) * t2049;
t2017 = pkin(1) * t2050;
t2067 = t2091 ^ 2;
t2198 = -0.2e1 * t2244;
t1982 = pkin(1) + t2198;
t2286 = t2057 * t2092;
t2160 = t1982 * t2086 - t2286;
t2143 = t2160 * t2096;
t2144 = t2160 * t2095;
t2058 = t2070 ^ 2;
t2285 = t2058 * t2113;
t2201 = (t2270 + (-t2035 * t2095 + t2038 * t2096) * t2086) * t2285;
t2204 = t2094 * (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t2205 = t2085 * t2286;
t2257 = 0.2e1 * t2285;
t2259 = 0.2e1 * t2367;
t2261 = 0.2e1 * t2050;
t2262 = 0.2e1 * t2049;
t2277 = t2086 * t2095;
t2337 = (t1982 * t2092 + t1999) * t2094;
t1866 = (0.2e1 * t2201 + (t2265 * t2038 + (-pkin(2) * t2277 + t1994) * t2035 + pkin(2) * t2270) * t2259 + (t1979 * t2086 + t1986) * t2038 + (-t1978 * t2086 + t1987) * t2035 + t2092 * t2204) * t2067 + (t2085 * t1950 * t2257 + ((t2085 * t2262 + t2143) * t2038 + (t2085 * t2261 - t2144) * t2035 + t2337) * t2367 + (pkin(2) * t2143 + t1978 * t2085 + t1991) * t2038 + (-pkin(2) * t2144 + t1979 * t2085 + t1992) * t2035 + pkin(2) * t2337) * t2091 - t2201 + t1950 * t1976 * t2367 + (t2016 * t2085 + (-t1985 * t2276 + (t2096 * t2205 - t2049) * t2069) * pkin(3)) * t2038 + (t2017 * t2085 + (t1985 * t2277 + (-t2095 * t2205 - t2050) * t2069) * pkin(3)) * t2035 - (t1985 * t2092 + t1999 * t2282) * t2366;
t2243 = t2086 * t2368;
t2249 = t2038 * t2368;
t2292 = t2035 * t2086;
t2301 = t2006 * t2038;
t1905 = (-t2006 * t2292 + t2249) * t2091 + (t2035 * t2243 + t2301) * t2085;
t2252 = t2035 * t2368;
t2289 = t2038 * t2086;
t2304 = t2006 * t2035;
t1908 = (t2006 * t2289 + t2252) * t2091 + t2085 * (-t2038 * t2243 + t2304);
t1939 = 0.1e1 / t2404;
t2263 = t2113 + t2114;
t2014 = pkin(2) * t2367;
t2393 = 0.2e1 * t2014;
t1977 = t2393 + t2263;
t2078 = xDDP(3);
t2079 = xDDP(2);
t2080 = xDDP(1);
t2229 = t1866 * t2325;
t2327 = t1939 * t2031;
t2359 = t1890 * pkin(1);
t1857 = -t1890 * t2229 + (t2092 * t2078 + t1977 / (t2041 + (t2070 * t2091 - t2282) * pkin(3)) * t2322 - (t1905 * t2079 + t1908 * t2080 + (t2404 * t1890 + t1866 - t2359) * t1890 * t2327) * t1939) * t2030;
t1854 = t1857 * pkin(1);
t2407 = -pkin(5) * t2322 + 0.2e1 * t1854 + t1926;
t1975 = pkin(1) * t2083 - t2368;
t1984 = pkin(1) * t2283 - pkin(3);
t1998 = t2084 * t2056;
t2066 = t2089 ^ 2;
t2199 = -0.2e1 * t2246;
t1981 = pkin(1) + t2199;
t2287 = t2056 * t2090;
t2161 = t1981 * t2084 - t2287;
t2145 = t2161 * t2096;
t2146 = t2161 * t2095;
t2202 = (t2272 + (-t2034 * t2095 + t2037 * t2096) * t2084) * t2285;
t2206 = t2083 * t2287;
t2279 = t2084 * t2095;
t2338 = (t1981 * t2090 + t1998) * t2094;
t1865 = (0.2e1 * t2202 + (t2266 * t2037 + (-pkin(2) * t2279 + t1994) * t2034 + pkin(2) * t2272) * t2259 + (t1979 * t2084 + t1986) * t2037 + (-t1978 * t2084 + t1987) * t2034 + t2090 * t2204) * t2066 + (t2083 * t1949 * t2257 + ((t2083 * t2262 + t2145) * t2037 + (t2083 * t2261 - t2146) * t2034 + t2338) * t2367 + (pkin(2) * t2145 + t1978 * t2083 + t1991) * t2037 + (-pkin(2) * t2146 + t1979 * t2083 + t1992) * t2034 + pkin(2) * t2338) * t2089 - t2202 + t1949 * t1975 * t2367 + (t2016 * t2083 + (-t1984 * t2278 + (t2096 * t2206 - t2049) * t2069) * pkin(3)) * t2037 + (t2017 * t2083 + (t1984 * t2279 + (-t2095 * t2206 - t2050) * t2069) * pkin(3)) * t2034 - (t1984 * t2090 + t1998 * t2283) * t2366;
t2245 = t2084 * t2368;
t2250 = t2037 * t2368;
t2293 = t2034 * t2084;
t2302 = t2006 * t2037;
t1904 = (-t2006 * t2293 + t2250) * t2089 + (t2034 * t2245 + t2302) * t2083;
t2253 = t2034 * t2368;
t2290 = t2037 * t2084;
t2305 = t2006 * t2034;
t1907 = (t2006 * t2290 + t2253) * t2089 + t2083 * (-t2037 * t2245 + t2305);
t1936 = 0.1e1 / t2403;
t2230 = t1865 * t2329;
t2331 = t1936 * t2028;
t2376 = pkin(1) * t1889;
t1856 = -t1889 * t2230 + (t2090 * t2078 + t1977 / (t2040 + (t2070 * t2089 - t2283) * pkin(3)) * t2323 - (t1904 * t2079 + t1907 * t2080 + (t2403 * t1889 + t1865 - t2376) * t1889 * t2331) * t1936) * t2027;
t1853 = t1856 * pkin(1);
t2406 = -pkin(5) * t2323 + 0.2e1 * t1853 + t1925;
t1974 = pkin(1) * t2081 - t2368;
t1983 = pkin(1) * t2284 - pkin(3);
t1997 = t2082 * t2055;
t2065 = t2087 ^ 2;
t2200 = -0.2e1 * t2248;
t1980 = pkin(1) + t2200;
t2288 = t2055 * t2088;
t2162 = t1980 * t2082 - t2288;
t2147 = t2162 * t2096;
t2148 = t2162 * t2095;
t2203 = (t2274 + (-t2033 * t2095 + t2036 * t2096) * t2082) * t2285;
t2207 = t2081 * t2288;
t2281 = t2082 * t2095;
t2339 = (t1980 * t2088 + t1997) * t2094;
t1864 = (0.2e1 * t2203 + (t2267 * t2036 + (-pkin(2) * t2281 + t1994) * t2033 + pkin(2) * t2274) * t2259 + (t1979 * t2082 + t1986) * t2036 + (-t1978 * t2082 + t1987) * t2033 + t2088 * t2204) * t2065 + (t2081 * t1948 * t2257 + ((t2081 * t2262 + t2147) * t2036 + (t2081 * t2261 - t2148) * t2033 + t2339) * t2367 + (pkin(2) * t2147 + t1978 * t2081 + t1991) * t2036 + (-pkin(2) * t2148 + t1979 * t2081 + t1992) * t2033 + pkin(2) * t2339) * t2087 - t2203 + t1948 * t1974 * t2367 + (t2016 * t2081 + (-t1983 * t2280 + (t2096 * t2207 - t2049) * t2069) * pkin(3)) * t2036 + (t2017 * t2081 + (t1983 * t2281 + (-t2095 * t2207 - t2050) * t2069) * pkin(3)) * t2033 - (t1983 * t2088 + t1997 * t2284) * t2366;
t2247 = t2082 * t2368;
t2251 = t2036 * t2368;
t2294 = t2033 * t2082;
t2303 = t2006 * t2036;
t1903 = (-t2006 * t2294 + t2251) * t2087 + (t2033 * t2247 + t2303) * t2081;
t2254 = t2033 * t2368;
t2291 = t2036 * t2082;
t2306 = t2006 * t2033;
t1906 = (t2006 * t2291 + t2254) * t2087 + t2081 * (-t2036 * t2247 + t2306);
t1933 = 0.1e1 / t2402;
t2231 = t1864 * t2333;
t2335 = t1933 * t2025;
t2377 = pkin(1) * t1888;
t1855 = -t1888 * t2231 + (t2088 * t2078 + t1977 / (t2039 + (t2070 * t2087 - t2284) * pkin(3)) * t2324 - (t1903 * t2079 + t1906 * t2080 + (t2402 * t1888 + t1864 - t2377) * t1888 * t2335) * t1933) * t2024;
t1852 = t1855 * pkin(1);
t2405 = -pkin(5) * t2324 + 0.2e1 * t1852 + t1924;
t2181 = t2413 * t2231;
t2336 = t1933 * t2024;
t1859 = (t2377 - t1864 / 0.2e1) * t2336;
t2007 = 0.2e1 * t2062;
t2018 = sin(t2062);
t2105 = 0.2e1 * qJ(2,3);
t2059 = pkin(7) + t2105;
t2108 = (qJ(3,3) ^ 2);
t2111 = pkin(5) ^ 2;
t2153 = -0.2e1 * pkin(1) ^ 2 - 0.2e1 * t2111 - t2263 + (-0.4e1 * pkin(5) - (2 * pkin(6))) * pkin(6);
t1965 = 0.1e1 / t1971;
t2321 = t1948 * t1965;
t2193 = 0.2e1 * t2055 * t2321;
t2386 = -0.4e1 * pkin(5) - (4 * pkin(6));
t2389 = -0.4e1 * t2087;
t2398 = 0.2e1 * pkin(1);
t2187 = -((0.4e1 * t1859 * t2021 + t2018 * t2193) * pkin(3) + (-t1859 * t2389 + t2081 * t2193) * pkin(2) - (t1864 * t2398 + (qJ(3,3) * t2386 - cos(t2007) * t2113 - cos(t2105) * t2114 - (2 * t2108) + (-cos(t2059) - t2070) * t2414 + t2153) * t1888) * t2336) * t2335 / 0.2e1;
t2401 = (t2181 + t2187) * t1888 + t1852;
t2180 = t2412 * t2230;
t2332 = t1936 * t2027;
t1860 = (t2376 - t1865 / 0.2e1) * t2332;
t2008 = 0.2e1 * t2063;
t2019 = sin(t2063);
t2106 = 0.2e1 * qJ(2,2);
t2060 = pkin(7) + t2106;
t2109 = (qJ(3,2) ^ 2);
t1967 = 0.1e1 / t1972;
t2320 = t1949 * t1967;
t2192 = 0.2e1 * t2056 * t2320;
t2388 = -0.4e1 * t2089;
t2186 = -((0.4e1 * t1860 * t2022 + t2019 * t2192) * pkin(3) + (-t1860 * t2388 + t2083 * t2192) * pkin(2) - (t1865 * t2398 + (qJ(3,2) * t2386 - cos(t2008) * t2113 - cos(t2106) * t2114 - (2 * t2109) + (-cos(t2060) - t2070) * t2414 + t2153) * t1889) * t2332) * t2331 / 0.2e1;
t2400 = (t2180 + t2186) * t1889 + t1853;
t2179 = t2411 * t2229;
t2328 = t1939 * t2030;
t1858 = (t2359 - t1866 / 0.2e1) * t2328;
t2009 = 0.2e1 * t2064;
t2020 = sin(t2064);
t2107 = 0.2e1 * qJ(2,1);
t2061 = pkin(7) + t2107;
t2110 = (qJ(3,1) ^ 2);
t1969 = 0.1e1 / t1973;
t2319 = t1950 * t1969;
t2191 = 0.2e1 * t2057 * t2319;
t2387 = -0.4e1 * t2091;
t2185 = -((0.4e1 * t1858 * t2023 + t2020 * t2191) * pkin(3) + (-t1858 * t2387 + t2085 * t2191) * pkin(2) - (t1866 * t2398 + (qJ(3,1) * t2386 - cos(t2009) * t2113 - cos(t2107) * t2114 - (2 * t2110) + (-cos(t2061) - t2070) * t2414 + t2153) * t1890) * t2328) * t2327 / 0.2e1;
t2399 = (t2179 + t2185) * t1890 + t1854;
t2222 = t1888 * t2321;
t2168 = t2222 * t2336;
t2375 = pkin(2) * t2081;
t1900 = ((pkin(3) * t2018 + t2375) * t2324 + t2033 * t2080 + t2036 * t2079) * t1965;
t2383 = t1900 / 0.2e1;
t1870 = -pkin(1) * t2168 + pkin(5) * t2383;
t2397 = -0.2e1 * t1870;
t2221 = t1889 * t2320;
t2167 = t2221 * t2332;
t2374 = pkin(2) * t2083;
t1901 = ((pkin(3) * t2019 + t2374) * t2323 + t2034 * t2080 + t2037 * t2079) * t1967;
t2382 = t1901 / 0.2e1;
t1871 = -pkin(1) * t2167 + pkin(5) * t2382;
t2396 = -0.2e1 * t1871;
t2220 = t1890 * t2319;
t2166 = t2220 * t2328;
t2373 = pkin(2) * t2085;
t1902 = ((pkin(3) * t2020 + t2373) * t2322 + t2035 * t2080 + t2038 * t2079) * t1969;
t2381 = t1902 / 0.2e1;
t1872 = -pkin(1) * t2166 + pkin(5) * t2381;
t2395 = -0.2e1 * t1872;
t2071 = t2114 / 0.2e1;
t2264 = t2014 + t2071;
t2394 = -0.4e1 * pkin(1) * (t2113 / 0.2e1 + t2264);
t2392 = 0.2e1 * t2065;
t2391 = 0.2e1 * t2066;
t2390 = 0.2e1 * t2067;
t2385 = -pkin(5) / 0.2e1;
t2380 = t2392 - 0.1e1;
t2379 = t2391 - 0.1e1;
t2378 = t2390 - 0.1e1;
t2372 = pkin(2) * t2113;
t2190 = pkin(1) * t2082 - t2288;
t2256 = pkin(3) * (t2058 - 0.1e1);
t2371 = pkin(3) * (t2082 * t2256 + t2190 * t2284);
t2189 = pkin(1) * t2084 - t2287;
t2370 = pkin(3) * (t2084 * t2256 + t2189 * t2283);
t2188 = pkin(1) * t2086 - t2286;
t2369 = pkin(3) * (t2086 * t2256 + t2188 * t2282);
t2363 = pkin(3) * t2114;
t2362 = pkin(5) * t1855;
t2361 = pkin(5) * t1856;
t2360 = pkin(5) * t1857;
t2354 = t1855 * t2072;
t2353 = t1856 * t2073;
t2352 = t1857 * t2074;
t2351 = t1864 * t1888;
t2350 = t1865 * t1889;
t2349 = t1866 * t1890;
t2015 = pkin(1) * t2368;
t2149 = t2054 + t2257 + t2393;
t1912 = t2149 * t2081 + t2015;
t1921 = t2082 * t2200 + t2190;
t1954 = (t2058 - 0.1e1 / 0.2e1) * t2113 + t2264;
t1876 = (-t1954 * t2294 + t2006 * t2251) * t2392 + (t1912 * t2036 - t1921 * t2306) * t2087 + t2033 * t2371 + t1974 * t2303;
t2348 = t1876 * t2079;
t1877 = (t1954 * t2291 + t2006 * t2254) * t2392 + (t1912 * t2033 + t1921 * t2303) * t2087 - t2036 * t2371 + t1974 * t2306;
t2347 = t1877 * t2080;
t1913 = t2149 * t2083 + t2015;
t1922 = t2084 * t2199 + t2189;
t1878 = (-t1954 * t2293 + t2006 * t2250) * t2391 + (t1913 * t2037 - t1922 * t2305) * t2089 + t2034 * t2370 + t1975 * t2302;
t2346 = t1878 * t2079;
t1879 = (t1954 * t2290 + t2006 * t2253) * t2391 + (t1913 * t2034 + t1922 * t2302) * t2089 - t2037 * t2370 + t1975 * t2305;
t2345 = t1879 * t2080;
t1914 = t2149 * t2085 + t2015;
t1923 = t2086 * t2198 + t2188;
t1880 = (-t1954 * t2292 + t2006 * t2249) * t2390 + (t1914 * t2038 - t1923 * t2304) * t2091 + t2035 * t2369 + t1976 * t2301;
t2344 = t1880 * t2079;
t1881 = (t1954 * t2289 + t2006 * t2252) * t2390 + (t1914 * t2035 + t1923 * t2301) * t2091 - t2038 * t2369 + t1976 * t2304;
t2343 = t1881 * t2080;
t1918 = t2413 * t2088 + t1997;
t2342 = t1918 * t2078;
t1919 = t2412 * t2090 + t1998;
t2341 = t1919 * t2078;
t1920 = t2411 * t2092 + t1999;
t2340 = t1920 * t2078;
t1958 = g(1) * t2033 + g(2) * t2036;
t2318 = t1958 * t2087;
t1959 = g(1) * t2034 + g(2) * t2037;
t2317 = t1959 * t2089;
t1960 = g(1) * t2035 + g(2) * t2038;
t2316 = t1960 * t2091;
t2315 = t1965 * t2033;
t2314 = t1965 * t2036;
t2313 = t1965 * t2081;
t2312 = t1967 * t2034;
t2311 = t1967 * t2037;
t2310 = t1967 * t2083;
t2309 = t1969 * t2035;
t2308 = t1969 * t2038;
t2307 = t1969 * t2085;
t2297 = t2024 * t2088;
t2296 = t2027 * t2090;
t2295 = t2030 * t2092;
t2275 = t2087 * t1855;
t2273 = t2089 * t1856;
t2271 = t2091 * t1857;
t2260 = -0.2e1 * t2372;
t2258 = -0.2e1 * t2363;
t2240 = t1855 * t2313;
t2239 = t1965 * t2275;
t2238 = t1856 * t2310;
t2237 = t1967 * t2273;
t2236 = t1857 * t2307;
t2235 = t1969 * t2271;
t2013 = pkin(2) * t2071 + t2372;
t2104 = 0.2e1 * pkin(7);
t2197 = -0.2e1 * pkin(3) * t2113 - 0.4e1 * t2363;
t2234 = (-(sin(t2059) * t2414 + sin(t2007) * t2113 + sin(t2105) * t2114) * t1933 * t1888 + (cos(qJ(2,3) + t2104) * t2260 + cos(-pkin(7) + qJ(2,3)) * t2258 + t2197 * t2021 + t2013 * t2389 + t2394) * t2321) * t1966 * t1948;
t2233 = (-(sin(t2060) * t2414 + sin(t2008) * t2113 + sin(t2106) * t2114) * t1936 * t1889 + (cos(qJ(2,2) + t2104) * t2260 + cos(-pkin(7) + qJ(2,2)) * t2258 + t2197 * t2022 + t2013 * t2388 + t2394) * t2320) * t1968 * t1949;
t2232 = (-(sin(t2061) * t2414 + sin(t2009) * t2113 + sin(t2107) * t2114) * t1939 * t1890 + (cos(qJ(2,1) + t2104) * t2260 + cos(-pkin(7) + qJ(2,1)) * t2258 + t2197 * t2023 + t2013 * t2387 + t2394) * t2319) * t1970 * t1950;
t2228 = t1885 * t2334;
t2227 = t1933 * t2417;
t2226 = t1886 * t2330;
t2225 = t1936 * t2416;
t2224 = t1887 * t2326;
t2223 = t1939 * t2415;
t2219 = t1903 * t2336;
t2218 = t1904 * t2332;
t2217 = t1905 * t2328;
t2216 = t1906 * t2336;
t2215 = t1907 * t2332;
t2214 = t1908 * t2328;
t2213 = t1924 * t2336;
t2212 = t1925 * t2332;
t2211 = t1926 * t2328;
t2045 = g(3) * t2088;
t1927 = t2082 * t2410 + t2045;
t2210 = t1927 * t2336;
t2046 = g(3) * t2090;
t1928 = t2084 * t2409 + t2046;
t2209 = t1928 * t2332;
t2047 = g(3) * t2092;
t1929 = t2086 * t2408 + t2047;
t2208 = t1929 * t2328;
t1831 = t2081 * t2275 - t2380 * t2168;
t2196 = -0.2e1 * t1831 * t2336;
t1832 = t2083 * t2273 - t2379 * t2167;
t2195 = -0.2e1 * t1832 * t2332;
t1833 = t2085 * t2271 - t2378 * t2166;
t2194 = -0.2e1 * t1833 * t2328;
t2184 = t2334 * t2351;
t2183 = t2330 * t2350;
t2182 = t2326 * t2349;
t2174 = 0.2e1 * t2184;
t2173 = 0.2e1 * t2183;
t2172 = 0.2e1 * t2182;
t2171 = t2222 * t2375;
t2170 = t2221 * t2374;
t2169 = t2220 * t2373;
t2165 = -t2347 - t2348;
t2164 = -t2345 - t2346;
t2163 = -t2343 - t2344;
t2156 = t2087 * t2228 * t2313;
t2155 = t2089 * t2226 * t2310;
t2154 = t2091 * t2224 * t2307;
t1891 = t1900 * t2081 + t2087 * t2324;
t1893 = t1901 * t2083 + t2089 * t2323;
t1895 = t1902 * t2085 + t2091 * t2322;
t2152 = pkin(1) * t2228 + g(1) * t2291 - g(2) * t2294 + t2045;
t2151 = pkin(1) * t2226 + g(1) * t2290 - g(2) * t2293 + t2046;
t2150 = pkin(1) * t2224 + g(1) * t2289 - g(2) * t2292 + t2047;
t2142 = -t2342 + t2234 / 0.2e1;
t2141 = -t2341 + t2233 / 0.2e1;
t2140 = -t2340 + t2232 / 0.2e1;
t2136 = -t2033 * t2240 - t2034 * t2238 - t2035 * t2236;
t2135 = -t2036 * t2240 - t2037 * t2238 - t2038 * t2236;
t2100 = pkin(1) * g(3);
t1896 = t1902 * t2091 - t2085 * t2322;
t1894 = t1901 * t2089 - t2083 * t2323;
t1892 = t1900 * t2087 - t2081 * t2324;
t1869 = t2378 * t2224;
t1868 = t2379 * t2226;
t1867 = t2380 * t2228;
t1851 = t2150 - t2360;
t1850 = t2151 - t2361;
t1849 = t2152 - t2362;
t1848 = (t1857 * t2085 - 0.2e1 * t2091 * t2166) * t2085;
t1847 = (t1856 * t2083 - 0.2e1 * t2089 * t2167) * t2083;
t1846 = (t1855 * t2081 - 0.2e1 * t2087 * t2168) * t2081;
t1845 = t1851 * t2091 + t1960 * t2085;
t1844 = t1851 * t2085 - t2316;
t1843 = t1850 * t2089 + t1959 * t2083;
t1842 = t1850 * t2083 - t2317;
t1841 = t1849 * t2087 + t1958 * t2081;
t1840 = t1849 * t2081 - t2318;
t1839 = t2085 * t2395 + t2407 * t2091;
t1838 = -t2407 * t2085 + t2091 * t2395;
t1837 = t2083 * t2396 + t2406 * t2089;
t1836 = -t2406 * t2083 + t2089 * t2396;
t1835 = t2081 * t2397 + t2405 * t2087;
t1834 = -t2405 * t2081 + t2087 * t2397;
t1827 = -t1895 * pkin(2) - t1929 + t2172 - 0.2e1 * t2352;
t1826 = -t1893 * pkin(2) - t1928 + t2173 - 0.2e1 * t2353;
t1825 = -t1891 * pkin(2) - t1927 + t2174 - 0.2e1 * t2354;
t1824 = (t2352 + (t1887 * t2041 - 0.2e1 * t2349) * t2326 + t2150) * t2085 - t2316 + t1902 * pkin(2);
t1823 = (t2353 + (t1886 * t2040 - 0.2e1 * t2350) * t2330 + t2151) * t2083 - t2317 + t1901 * pkin(2);
t1822 = (t2354 + (t1885 * t2039 - 0.2e1 * t2351) * t2334 + t2152) * t2081 - t2318 + t1900 * pkin(2);
t1821 = t2074 * t2224 - pkin(2) * t2271 + (-(-t2163 + 0.2e1 * t2169) * t1939 - t2140) * t2030 - t1926 - t2399;
t1820 = t2073 * t2226 - pkin(2) * t2273 + (-(-t2164 + 0.2e1 * t2170) * t1936 - t2141) * t2027 - t1925 - t2400;
t1819 = t2072 * t2228 - pkin(2) * t2275 + (-(-t2165 + 0.2e1 * t2171) * t1933 - t2142) * t2024 - t1924 - t2401;
t1818 = 0.2e1 * ((-t2356 / 0.2e1 + t2012 / 0.2e1) * t2092 + t1854 + t2044 / 0.2e1 + (t2385 - qJ(3,1) / 0.2e1) * t2322 + (t2185 / 0.2e1 + t2179 / 0.2e1) * t1890 + (-t2340 / 0.2e1 + t2232 / 0.4e1 - (-t2169 - t2343 / 0.2e1 - t2344 / 0.2e1) * t1939) * t2030) * t2041 + (-pkin(1) * t2408 + g(3) * t2074) * t2092 + (t2074 * t2408 + t2100) * t2086 - 0.2e1 * (qJ(3,1) * t2381 + t1872) * t2373 + 0.2e1 * (t2182 + t2360) * qJ(3,1) + pkin(5) * t2172 + pkin(1) * ((-t2163 * t1939 + t2140) * t2030 + t2399) + (t2067 * t2114 + t2110 + t2111) * t1857;
t1817 = 0.2e1 * ((-t2357 / 0.2e1 + t2011 / 0.2e1) * t2090 + t1853 + t2043 / 0.2e1 + (t2385 - qJ(3,2) / 0.2e1) * t2323 + (t2186 / 0.2e1 + t2180 / 0.2e1) * t1889 + (-t2341 / 0.2e1 + t2233 / 0.4e1 - (-t2170 - t2345 / 0.2e1 - t2346 / 0.2e1) * t1936) * t2027) * t2040 + (-pkin(1) * t2409 + g(3) * t2073) * t2090 + (t2073 * t2409 + t2100) * t2084 - 0.2e1 * (qJ(3,2) * t2382 + t1871) * t2374 + 0.2e1 * (t2183 + t2361) * qJ(3,2) + pkin(5) * t2173 + pkin(1) * ((-t2164 * t1936 + t2141) * t2027 + t2400) + (t2066 * t2114 + t2109 + t2111) * t1856;
t1816 = 0.2e1 * ((-t2358 / 0.2e1 + t2010 / 0.2e1) * t2088 + t1852 + t2042 / 0.2e1 + (t2385 - qJ(3,3) / 0.2e1) * t2324 + (t2187 / 0.2e1 + t2181 / 0.2e1) * t1888 + (-t2342 / 0.2e1 + t2234 / 0.4e1 - (-t2171 - t2347 / 0.2e1 - t2348 / 0.2e1) * t1933) * t2024) * t2039 + (-pkin(1) * t2410 + g(3) * t2072) * t2088 + (t2072 * t2410 + t2100) * t2082 - 0.2e1 * (qJ(3,3) * t2383 + t1870) * t2375 + 0.2e1 * (t2184 + t2362) * qJ(3,3) + pkin(5) * t2174 + pkin(1) * ((-t2165 * t1933 + t2142) * t2024 + t2401) + (t2065 * t2114 + t2108 + t2111) * t1855;
t1 = [(-t1855 * t2216 - t1856 * t2215 - t1857 * t2214) * MDP(1) + (-t1906 * t2213 - t1907 * t2212 - t1908 * t2211) * MDP(2) + (-t1906 * t2210 - t1907 * t2209 - t1908 * t2208) * MDP(3) + (-t1846 * t2216 - t1847 * t2215 - t1848 * t2214 - t2033 * t2156 - t2034 * t2155 - t2035 * t2154) * MDP(4) + (-t1867 * t2315 - t1868 * t2312 - t1869 * t2309 + t1906 * t2196 + t1907 * t2195 + t1908 * t2194) * MDP(5) + (-t1891 * t2216 - t1893 * t2215 - t1895 * t2214 - t2136) * MDP(6) + (-t1892 * t2216 - t1894 * t2215 - t1896 * t2214 + t2033 * t2239 + t2034 * t2237 + t2035 * t2235) * MDP(7) + (t1900 * t2315 + t1901 * t2312 + t1902 * t2309) * MDP(8) + (-t1835 * t2216 - t1837 * t2215 - t1839 * t2214 + t1840 * t2315 + t1842 * t2312 + t1844 * t2309) * MDP(9) + (-t1834 * t2216 - t1836 * t2215 - t1838 * t2214 + t1841 * t2315 + t1843 * t2312 + t1845 * t2309) * MDP(10) + (t2136 * pkin(2) - t1825 * t2216 - t1826 * t2215 - t1827 * t2214 + t1877 * t2227 + t1879 * t2225 + t1881 * t2223) * MDP(11) + (-(t1818 * t1908 + t1821 * t1881) * t2328 - (t1817 * t1907 + t1820 * t1879) * t2332 - (t1816 * t1906 + t1819 * t1877) * t2336 + (t1822 * t2315 + t1823 * t2312 + t1824 * t2309) * pkin(2)) * MDP(12) + (t2080 - g(1)) * MDP(13); (-t1855 * t2219 - t1856 * t2218 - t1857 * t2217) * MDP(1) + (-t1903 * t2213 - t1904 * t2212 - t1905 * t2211) * MDP(2) + (-t1903 * t2210 - t1904 * t2209 - t1905 * t2208) * MDP(3) + (-t1846 * t2219 - t1847 * t2218 - t1848 * t2217 - t2036 * t2156 - t2037 * t2155 - t2038 * t2154) * MDP(4) + (-t1867 * t2314 - t1868 * t2311 - t1869 * t2308 + t1903 * t2196 + t1904 * t2195 + t1905 * t2194) * MDP(5) + (-t1891 * t2219 - t1893 * t2218 - t1895 * t2217 - t2135) * MDP(6) + (-t1892 * t2219 - t1894 * t2218 - t1896 * t2217 + t2036 * t2239 + t2037 * t2237 + t2038 * t2235) * MDP(7) + (t1900 * t2314 + t1901 * t2311 + t1902 * t2308) * MDP(8) + (-t1835 * t2219 - t1837 * t2218 - t1839 * t2217 + t1840 * t2314 + t1842 * t2311 + t1844 * t2308) * MDP(9) + (-t1834 * t2219 - t1836 * t2218 - t1838 * t2217 + t1841 * t2314 + t1843 * t2311 + t1845 * t2308) * MDP(10) + (t2135 * pkin(2) - t1825 * t2219 - t1826 * t2218 - t1827 * t2217 + t1876 * t2227 + t1878 * t2225 + t1880 * t2223) * MDP(11) + (-(t1818 * t1905 + t1821 * t1880) * t2328 - (t1817 * t1904 + t1820 * t1878) * t2332 - (t1816 * t1903 + t1819 * t1876) * t2336 + (t1822 * t2314 + t1823 * t2311 + t1824 * t2308) * pkin(2)) * MDP(12) + (t2079 - g(2)) * MDP(13); (t1855 * t2297 + t1856 * t2296 + t1857 * t2295) * MDP(1) + (t1924 * t2297 + t1925 * t2296 + t1926 * t2295) * MDP(2) + (t1927 * t2297 + t1928 * t2296 + t1929 * t2295) * MDP(3) + (t1846 * t2297 + t1847 * t2296 + t1848 * t2295) * MDP(4) + (t1891 * t2297 + t1893 * t2296 + t1895 * t2295) * MDP(6) + (t1892 * t2297 + t1894 * t2296 + t1896 * t2295) * MDP(7) + (t1835 * t2297 + t1837 * t2296 + t1839 * t2295) * MDP(9) + (t1834 * t2297 + t1836 * t2296 + t1838 * t2295) * MDP(10) + (t1825 * t2297 + t1826 * t2296 + t1827 * t2295 - t1918 * t2417 - t1919 * t2416 - t1920 * t2415) * MDP(11) + ((t1818 * t2092 + t1821 * t1920) * t2030 + (t1817 * t2090 + t1820 * t1919) * t2027 + (t1816 * t2088 + t1819 * t1918) * t2024) * MDP(12) + (t2078 - g(3)) * MDP(13) + 0.2e1 * (t1831 * t2297 + t1832 * t2296 + t1833 * t2295) * MDP(5);];
tauX  = t1;
