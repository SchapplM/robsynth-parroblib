% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:09
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V1G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 21:50:02
% EndTime: 2020-08-06 21:55:52
% DurationCPUTime: 352.73s
% Computational Cost: add. (2872368->1831), mult. (6777351->3319), div. (89226->23), fcn. (5260020->26), ass. (0->1282)
t3121 = sin(qJ(3,1));
t3059 = t3121 * pkin(2);
t3037 = pkin(1) * t3059;
t3122 = sin(qJ(2,1));
t3060 = t3122 * pkin(6);
t3104 = sin(pkin(3));
t3130 = cos(qJ(3,1));
t3131 = cos(qJ(2,1));
t3777 = t3130 * t3131;
t3784 = t3122 * t3130;
t3976 = t3131 * pkin(6);
t2989 = pkin(2) * t3784 - t3976;
t3105 = cos(pkin(3));
t3864 = t2989 * t3105;
t3262 = pkin(1) * t3864 + (-t3037 + (pkin(2) * t3777 + t3060) * pkin(5)) * t3104;
t2912 = 0.1e1 / t3262;
t3118 = sin(qJ(3,2));
t3057 = t3118 * pkin(2);
t3035 = pkin(1) * t3057;
t3119 = sin(qJ(2,2));
t3058 = t3119 * pkin(6);
t3127 = cos(qJ(3,2));
t3128 = cos(qJ(2,2));
t3779 = t3127 * t3128;
t3789 = t3119 * t3127;
t3977 = t3128 * pkin(6);
t2988 = pkin(2) * t3789 - t3977;
t3865 = t2988 * t3105;
t3263 = pkin(1) * t3865 + (-t3035 + (pkin(2) * t3779 + t3058) * pkin(5)) * t3104;
t2909 = 0.1e1 / t3263;
t3115 = sin(qJ(3,3));
t3055 = t3115 * pkin(2);
t3033 = pkin(1) * t3055;
t3116 = sin(qJ(2,3));
t3056 = t3116 * pkin(6);
t3124 = cos(qJ(3,3));
t3125 = cos(qJ(2,3));
t3781 = t3124 * t3125;
t3794 = t3116 * t3124;
t3978 = t3125 * pkin(6);
t2987 = pkin(2) * t3794 - t3978;
t3866 = t2987 * t3105;
t3264 = pkin(1) * t3866 + (-t3033 + (pkin(2) * t3781 + t3056) * pkin(5)) * t3104;
t2906 = 0.1e1 / t3264;
t3089 = t3125 ^ 2;
t3068 = pkin(1) * t3089;
t4058 = t3056 + pkin(1);
t2993 = t3068 - t4058;
t3339 = t2993 * t3105;
t3095 = t3128 ^ 2;
t3069 = pkin(1) * t3095;
t4057 = t3058 + pkin(1);
t2994 = t3069 - t4057;
t3338 = t2994 * t3105;
t3101 = t3131 ^ 2;
t3070 = pkin(1) * t3101;
t4056 = t3060 + pkin(1);
t2995 = t3070 - t4056;
t3337 = t2995 * t3105;
t3828 = t3104 * t3105;
t3098 = 0.1e1 / t3130;
t3123 = sin(qJ(1,1));
t3132 = cos(qJ(1,1));
t3134 = xDP(2);
t3135 = xDP(1);
t2983 = t3123 * t3134 + t3132 * t3135;
t2986 = -t3123 * t3135 + t3132 * t3134;
t3114 = legFrame(1,3);
t3049 = sin(t3114);
t3052 = cos(t3114);
t3274 = t2983 * t3049 - t2986 * t3052;
t3133 = xDP(3);
t3776 = t3131 * t3133;
t2887 = -pkin(5) * t3274 + pkin(6) * t3776;
t2923 = pkin(2) * t3274;
t2926 = t2983 * t3052 + t2986 * t3049;
t3080 = t3105 ^ 2;
t3783 = t3122 * t3131;
t3508 = t3121 * t3783;
t3990 = pkin(2) * t3104;
t3334 = t3508 * t3990;
t3851 = (t3131 + 0.1e1) * (t3131 - 0.1e1);
t3982 = pkin(6) * t3104;
t3454 = t3851 * t3982;
t3998 = t3101 - 0.1e1;
t3492 = t3998 * t3059 - pkin(5);
t3097 = t3130 ^ 2;
t3833 = t3097 * t3122;
t3699 = pkin(2) * t3833;
t3046 = t3101 - 0.2e1;
t3704 = t3046 * t3059;
t3815 = t3104 * t3133;
t3713 = 0.2e1 * t3815;
t3822 = t3104 * t3122;
t3870 = t2926 * t3104;
t3983 = pkin(2) * t3133;
t3991 = pkin(2) * t3097;
t3064 = pkin(5) * t3133;
t4040 = -t3274 * t3976 - t3064;
t4061 = -0.2e1 * t3991;
t2809 = ((-t3133 * t3704 - t4040) * t3130 + (-t2887 * t3121 + t3274 * t4061 + t2923) * t3122) * t3080 + ((t2926 * t3131 + t3122 * t3713) * t3991 + ((-t3274 * t3704 - t2887) * t3104 + t4056 * t2926) * t3130 + (t3121 * t4040 - t3983) * t3822) * t3105 + t3274 * t3699 + (-t2926 * t3334 + t3133 * t3492) * t3130 + ((-pkin(1) * t3870 + t2887) * t3121 - t2923) * t3122 + (pkin(1) * t3776 + t2926 * t3454) * t3121;
t3880 = t2912 * t3121;
t3630 = t2809 * t3880;
t3407 = t3098 * t3630;
t2767 = pkin(2) * t3407;
t3882 = t2912 * t3098;
t2803 = t2809 * t3882;
t2785 = pkin(5) * t2803;
t4008 = t3080 - 0.1e1;
t3472 = t4008 * t3133;
t3554 = t3274 * t3828;
t2884 = -t3472 - t3554;
t3680 = t3080 * t3060;
t2980 = -t3680 + t4056;
t3017 = 0.2e1 * t3060 + pkin(1);
t3067 = pkin(1) * t3122;
t3024 = t3067 + pkin(6);
t3016 = t3059 + pkin(5);
t3854 = (t3105 + 0.1e1) * (t3105 - 0.1e1);
t3364 = t3016 * t3274 * t3854;
t3671 = t4008 * pkin(6);
t3436 = t3067 - t3671;
t3442 = pkin(6) * t3554;
t3142 = pkin(6) ^ 2;
t3145 = pkin(2) ^ 2;
t3832 = t3097 * t3145;
t3460 = -t3142 + t3832;
t3798 = t3105 * t3133;
t3536 = t3016 * t3798;
t4029 = 0.2e1 * pkin(6);
t3975 = pkin(2) * t4029;
t3672 = t3130 * t3975;
t3985 = pkin(2) * t3130;
t2830 = (t2884 * t3672 - t3460 * t3870) * t3101 + (-t2884 * t3122 * t3832 - ((t2926 * t3017 + t3536) * t3104 - t3364) * t3985 + (t2980 * t3133 - t3122 * t3442) * pkin(6)) * t3131 - (t3133 * t3436 - t3442) * t3985 - pkin(6) * ((t2926 * t3024 + t3122 * t3536) * t3104 - t3122 * t3364);
t2977 = t3104 * (-pkin(5) * t3060 + t3037);
t3997 = pkin(1) * t3105;
t3031 = pkin(6) * t3997;
t3805 = t3105 * t3122;
t3709 = pkin(1) * t3805;
t3439 = t3130 * t3709;
t3817 = t3104 * t3130;
t3695 = pkin(2) * t3817;
t2896 = (-pkin(5) * t3695 + t3031) * t3131 - pkin(2) * t3439 + t2977;
t2892 = 0.1e1 / t2896;
t3146 = 0.1e1 / pkin(2);
t3903 = t2892 * t3146;
t3618 = t2830 * t3903;
t3396 = t3098 * t3618;
t2818 = pkin(6) * t3396;
t3743 = -t2785 + t2818;
t2683 = -t2767 + t3743;
t2792 = pkin(6) * t2803;
t3904 = t2892 * t3098;
t3619 = t2830 * t3904;
t2815 = t3121 * t3619;
t2704 = t2815 + t2792;
t3331 = pkin(5) * t3396;
t2707 = t2792 + t3331;
t3831 = t3098 * t3105;
t3628 = t2809 * t3831;
t2760 = -t2912 * t3628 / 0.2e1;
t2997 = pkin(6) * t3815;
t3799 = t3105 * t3131;
t2869 = t2997 * t3131 + (-t2926 * t3122 - t3274 * t3799) * pkin(6) + ((-t3121 * t3133 + t3274 * t3784) * t3105 - t2926 * t3777 + (-t3121 * t3274 - t3133 * t3784) * t3104) * pkin(2);
t2857 = t2869 * t2912;
t3883 = t2912 * t3080;
t3529 = t2869 * t3883;
t2725 = -t3529 + t2760 + t2857 / 0.2e1;
t2851 = t3105 * t2857;
t2746 = -t2851 - t2803;
t2779 = pkin(6) * t2785;
t2782 = 0.2e1 * t2792;
t2786 = pkin(1) * t2803;
t3361 = t3122 * t3619;
t3299 = t3146 * t3361;
t2812 = pkin(1) * t3299;
t4020 = -0.2e1 * t2851;
t3340 = t3016 * t4020;
t2842 = pkin(6) * t3340;
t3143 = pkin(5) ^ 2;
t3731 = pkin(1) ^ 2 + t3143;
t3500 = t3145 + t3731;
t2998 = t3142 + t3500;
t3004 = t3060 / 0.2e1 + pkin(1);
t3015 = pkin(5) * t3121 + pkin(2);
t3036 = pkin(5) * t3059;
t3027 = 0.2e1 * t3036;
t3030 = t3101 - 0.1e1 / 0.2e1;
t3040 = pkin(1) * t3060;
t3096 = t3130 * t3097;
t3100 = t3131 * t3101;
t4009 = pkin(1) * pkin(6);
t3103 = 0.2e1 * t4009;
t3137 = -0.3e1 * t3142;
t3144 = pkin(2) * t3145;
t2789 = t3142 * t2803;
t3214 = -pkin(6) * t2815 - t2789;
t3394 = t3131 * t3618;
t3298 = t3098 * t3394;
t3250 = t3121 * t3298;
t3395 = t3104 * t3618;
t3300 = t3098 * t3395;
t3271 = pkin(1) * t3300;
t3079 = t3105 * t3080;
t3352 = (-t3079 + t3105) * t4029;
t3357 = 0.3e1 * t3142 + t3500;
t3358 = -t3619 / 0.2e1;
t3532 = t3145 * t3854;
t3367 = t3097 * t3532;
t3859 = t3016 * t3104;
t3370 = t3783 * t3859;
t3380 = t3854 * t2857;
t3099 = 0.1e1 / t3130 ^ 2;
t3940 = t2809 * t2912;
t3631 = t3099 * t3940;
t3816 = t3104 * t3131;
t3683 = pkin(5) * t3816;
t2972 = t3683 + t3709;
t3676 = pkin(1) * t3799;
t4028 = 0.1e1 / (-pkin(6) * t3676 + t2972 * t3985 - t2977);
t3409 = t4028 * t3631;
t3433 = t4008 * t3783;
t3491 = t3104 * t3031;
t3498 = 0.2e1 * t3145 * t3982;
t3499 = -0.2e1 * pkin(2) * t3854;
t3733 = t3143 / 0.2e1 + t3145 / 0.2e1;
t3501 = t3142 + t3733;
t3730 = t3145 - t3142;
t3502 = t3036 + t3730;
t3740 = t2812 + t2818;
t3505 = t2785 - t3740;
t3583 = t3079 * t2857;
t3617 = t2830 * t4028 * t3099;
t3936 = t2809 * t3145;
t3626 = t3098 * t3936;
t3712 = 0.2e1 * t3104 * t3144;
t2821 = pkin(1) * t3396;
t3752 = t2683 * t3122 + t2821;
t3782 = t3122 * t3142;
t3806 = t3105 * t3121;
t3823 = t3104 * t3121;
t3858 = t4056 * t3131;
t3881 = t2912 * t3104;
t3957 = t2707 * t3122;
t4010 = pkin(6) / 0.2e1;
t4019 = -0.2e1 * t3080;
t4030 = -0.2e1 * pkin(6);
t4031 = 0.2e1 * pkin(1);
t2587 = (t2892 * (-((t3137 + t3832) * t3100 * t3380 * t3695 + ((t2842 + pkin(6) * (-t2785 + t2818 / 0.2e1) + (-(t2782 + t3331) * t3121 / 0.2e1 + t3358) * pkin(2)) * t3130 * t3499 + t2704 * t3491 - (t3097 * t3626 * t3997 + ((t4031 + 0.3e1 * t3060 - 0.3e1 * t3680) * t3832 + pkin(6) * (t3004 * t4030 + t3080 * t3782)) * t2869) * t3881) * t3101 + (t2725 * t3096 * t3712 + (t3122 * t3340 + t3752) * t3367 + ((-(t2815 + t2782) * t3067 + t3214) * t3105 - ((t3036 + t3501) * t4019 + t3027 + 0.4e1 * t3040 + t3357) * t2857) * t3695 + (-t4008 * (-t2779 + (-t2707 * t3121 - t3619) * pkin(2)) - t3016 * t3352 * t2857) * t3060) * t3131 + t2725 * t3498 * t3833 - (t2842 + (0.2e1 * t3016 * t3583 - (-t2767 - t3505) * t3080 + t2812 + t2683) * pkin(6)) * t3985 + ((-pkin(1) * t2704 + t3122 * t3214) * t3105 - (t3103 + ((t3036 + t3733) * t4019 + t3027 + t2998) * t3122) * t2857) * t3982) * t2869 * t3882 - ((-t3380 * t3858 + t3271) * t3991 + (-t3502 * t3101 * t3380 - (-t3619 + (-t2851 * t3024 - t2707) * t3121) * pkin(2) * t3816 + pkin(1) * t3361 * t3806) * t3130 + (-t3250 * t3997 - ((-t2786 - t3957) * t3121 - t3361) * t3104 - (t4008 * t3130 * t3024 + t3015 * t3433 + t3337 * t3823) * t2857) * pkin(6)) * t3617) + (t3131 * t3144 * t2746 * t3096 + (t2746 * t3060 - t2786 - (t3101 * t3997 - t3370) * t2857) * t3832 + ((-t2815 / 0.2e1 - t2792 / 0.2e1) * t3131 - ((t3067 + t4010) * t3799 + t3030 * t3859) * t2857) * t3672 - (t2704 * t4056 - (t3337 - t3370) * pkin(6) * t2857) * pkin(6)) * t3104 * t3409) * t3146;
t3092 = 0.1e1 / t3127;
t3120 = sin(qJ(1,2));
t3129 = cos(qJ(1,2));
t2982 = t3120 * t3134 + t3129 * t3135;
t2985 = -t3120 * t3135 + t3129 * t3134;
t3113 = legFrame(2,3);
t3048 = sin(t3113);
t3051 = cos(t3113);
t3275 = t2982 * t3048 - t2985 * t3051;
t3778 = t3128 * t3133;
t2886 = -pkin(5) * t3275 + pkin(6) * t3778;
t2922 = pkin(2) * t3275;
t2925 = t2982 * t3051 + t2985 * t3048;
t3788 = t3119 * t3128;
t3509 = t3118 * t3788;
t3335 = t3509 * t3990;
t3852 = (t3128 + 0.1e1) * (t3128 - 0.1e1);
t3455 = t3852 * t3982;
t4001 = t3095 - 0.1e1;
t3493 = t4001 * t3057 - pkin(5);
t3091 = t3127 ^ 2;
t3839 = t3091 * t3119;
t3701 = pkin(2) * t3839;
t3045 = t3095 - 0.2e1;
t3705 = t3045 * t3057;
t3824 = t3104 * t3119;
t3871 = t2925 * t3104;
t3992 = pkin(2) * t3091;
t4039 = -t3275 * t3977 - t3064;
t4060 = -0.2e1 * t3992;
t2808 = ((-t3133 * t3705 - t4039) * t3127 + (-t2886 * t3118 + t3275 * t4060 + t2922) * t3119) * t3080 + ((t2925 * t3128 + t3119 * t3713) * t3992 + ((-t3275 * t3705 - t2886) * t3104 + t4057 * t2925) * t3127 + (t3118 * t4039 - t3983) * t3824) * t3105 + t3275 * t3701 + (-t2925 * t3335 + t3133 * t3493) * t3127 + ((-pkin(1) * t3871 + t2886) * t3118 - t2922) * t3119 + (pkin(1) * t3778 + t2925 * t3455) * t3118;
t3888 = t2909 * t3118;
t3636 = t2808 * t3888;
t3412 = t3092 * t3636;
t2766 = pkin(2) * t3412;
t3890 = t2909 * t3092;
t2801 = t2808 * t3890;
t2784 = pkin(5) * t2801;
t3555 = t3275 * t3828;
t2883 = -t3472 - t3555;
t3681 = t3080 * t3058;
t2979 = -t3681 + t4057;
t3013 = 0.2e1 * t3058 + pkin(1);
t3066 = pkin(1) * t3119;
t3023 = t3066 + pkin(6);
t3012 = t3057 + pkin(5);
t3365 = t3012 * t3275 * t3854;
t3437 = t3066 - t3671;
t3443 = pkin(6) * t3555;
t3838 = t3091 * t3145;
t3461 = -t3142 + t3838;
t3539 = t3012 * t3798;
t3673 = t3127 * t3975;
t3987 = pkin(2) * t3127;
t2829 = (t2883 * t3673 - t3461 * t3871) * t3095 + (-t2883 * t3119 * t3838 - ((t2925 * t3013 + t3539) * t3104 - t3365) * t3987 + (t2979 * t3133 - t3119 * t3443) * pkin(6)) * t3128 - (t3133 * t3437 - t3443) * t3987 - pkin(6) * ((t2925 * t3023 + t3119 * t3539) * t3104 - t3119 * t3365);
t2976 = t3104 * (-pkin(5) * t3058 + t3035);
t3807 = t3105 * t3119;
t3710 = pkin(1) * t3807;
t3440 = t3127 * t3710;
t3819 = t3104 * t3127;
t3696 = pkin(2) * t3819;
t2895 = (-pkin(5) * t3696 + t3031) * t3128 - pkin(2) * t3440 + t2976;
t2890 = 0.1e1 / t2895;
t3905 = t2890 * t3146;
t3621 = t2829 * t3905;
t3400 = t3092 * t3621;
t2817 = pkin(6) * t3400;
t3744 = -t2784 + t2817;
t2682 = -t2766 + t3744;
t2791 = pkin(6) * t2801;
t3906 = t2890 * t3092;
t3622 = t2829 * t3906;
t2814 = t3118 * t3622;
t2703 = t2814 + t2791;
t3332 = pkin(5) * t3400;
t2706 = t2791 + t3332;
t3837 = t3092 * t3105;
t3634 = t2808 * t3837;
t2761 = -t2909 * t3634 / 0.2e1;
t3801 = t3105 * t3128;
t2868 = t2997 * t3128 + (-t2925 * t3119 - t3275 * t3801) * pkin(6) + ((-t3118 * t3133 + t3275 * t3789) * t3105 - t2925 * t3779 + (-t3118 * t3275 - t3133 * t3789) * t3104) * pkin(2);
t2855 = t2868 * t2909;
t3891 = t2909 * t3080;
t3530 = t2868 * t3891;
t2724 = -t3530 + t2761 + t2855 / 0.2e1;
t2850 = t3105 * t2855;
t2743 = -t2850 - t2801;
t2778 = pkin(6) * t2784;
t2781 = 0.2e1 * t2791;
t2797 = pkin(1) * t2801;
t3362 = t3119 * t3622;
t3302 = t3146 * t3362;
t2811 = pkin(1) * t3302;
t4021 = -0.2e1 * t2850;
t3341 = t3012 * t4021;
t2841 = pkin(6) * t3341;
t3002 = t3058 / 0.2e1 + pkin(1);
t3011 = pkin(5) * t3118 + pkin(2);
t3034 = pkin(5) * t3057;
t3026 = 0.2e1 * t3034;
t3029 = t3095 - 0.1e1 / 0.2e1;
t3039 = pkin(1) * t3058;
t3090 = t3127 * t3091;
t3094 = t3128 * t3095;
t2788 = t3142 * t2801;
t3215 = -pkin(6) * t2814 - t2788;
t3398 = t3128 * t3621;
t3301 = t3092 * t3398;
t3251 = t3118 * t3301;
t3399 = t3104 * t3621;
t3303 = t3092 * t3399;
t3272 = pkin(1) * t3303;
t3359 = -t3622 / 0.2e1;
t3368 = t3091 * t3532;
t3861 = t3012 * t3104;
t3371 = t3788 * t3861;
t3385 = t3854 * t2855;
t3093 = 0.1e1 / t3127 ^ 2;
t3946 = t2808 * t2909;
t3637 = t3093 * t3946;
t3818 = t3104 * t3128;
t3684 = pkin(5) * t3818;
t2974 = t3684 + t3710;
t3707 = pkin(1) * t3801;
t4026 = 0.1e1 / (-pkin(6) * t3707 + t2974 * t3987 - t2976);
t3414 = t4026 * t3637;
t3434 = t4008 * t3788;
t3503 = t3034 + t3730;
t3741 = t2811 + t2817;
t3506 = t2784 - t3741;
t3589 = t3079 * t2855;
t3620 = t2829 * t4026 * t3093;
t3942 = t2808 * t3145;
t3632 = t3092 * t3942;
t2820 = pkin(1) * t3400;
t3753 = t2682 * t3119 + t2820;
t3787 = t3119 * t3142;
t3808 = t3105 * t3118;
t3825 = t3104 * t3118;
t3860 = t4057 * t3128;
t3889 = t2909 * t3104;
t3958 = t2706 * t3119;
t2586 = (t2890 * (-((t3137 + t3838) * t3094 * t3385 * t3696 + ((t2841 + pkin(6) * (-t2784 + t2817 / 0.2e1) + (-(t2781 + t3332) * t3118 / 0.2e1 + t3359) * pkin(2)) * t3127 * t3499 + t2703 * t3491 - (t3091 * t3632 * t3997 + ((t4031 + 0.3e1 * t3058 - 0.3e1 * t3681) * t3838 + pkin(6) * (t3002 * t4030 + t3080 * t3787)) * t2868) * t3889) * t3095 + (t2724 * t3090 * t3712 + (t3119 * t3341 + t3753) * t3368 + ((-(t2814 + t2781) * t3066 + t3215) * t3105 - ((t3034 + t3501) * t4019 + t3026 + 0.4e1 * t3039 + t3357) * t2855) * t3696 + (-t4008 * (-t2778 + (-t2706 * t3118 - t3622) * pkin(2)) - t3012 * t3352 * t2855) * t3058) * t3128 + t2724 * t3498 * t3839 - (t2841 + (0.2e1 * t3012 * t3589 - (-t2766 - t3506) * t3080 + t2811 + t2682) * pkin(6)) * t3987 + ((-pkin(1) * t2703 + t3119 * t3215) * t3105 - (t3103 + ((t3034 + t3733) * t4019 + t3026 + t2998) * t3119) * t2855) * t3982) * t2868 * t3890 - ((-t3385 * t3860 + t3272) * t3992 + (-t3503 * t3095 * t3385 - (-t3622 + (-t2850 * t3023 - t2706) * t3118) * pkin(2) * t3818 + pkin(1) * t3362 * t3808) * t3127 + (-t3251 * t3997 - ((-t2797 - t3958) * t3118 - t3362) * t3104 - (t4008 * t3127 * t3023 + t3011 * t3434 + t3338 * t3825) * t2855) * pkin(6)) * t3620) + (t3128 * t3144 * t2743 * t3090 + (t2743 * t3058 - t2797 - (t3095 * t3997 - t3371) * t2855) * t3838 + ((-t2814 / 0.2e1 - t2791 / 0.2e1) * t3128 - ((t3066 + t4010) * t3801 + t3029 * t3861) * t2855) * t3673 - (t2703 * t4057 - (t3338 - t3371) * pkin(6) * t2855) * pkin(6)) * t3104 * t3414) * t3146;
t3086 = 0.1e1 / t3124;
t3117 = sin(qJ(1,3));
t3126 = cos(qJ(1,3));
t2981 = t3117 * t3134 + t3126 * t3135;
t2984 = -t3117 * t3135 + t3126 * t3134;
t3112 = legFrame(3,3);
t3047 = sin(t3112);
t3050 = cos(t3112);
t3276 = t2981 * t3047 - t2984 * t3050;
t3780 = t3125 * t3133;
t2885 = -pkin(5) * t3276 + pkin(6) * t3780;
t2921 = pkin(2) * t3276;
t2924 = t2981 * t3050 + t2984 * t3047;
t3793 = t3116 * t3125;
t3510 = t3115 * t3793;
t3336 = t3510 * t3990;
t3853 = (t3125 + 0.1e1) * (t3125 - 0.1e1);
t3456 = t3853 * t3982;
t4004 = t3089 - 0.1e1;
t3494 = t4004 * t3055 - pkin(5);
t3085 = t3124 ^ 2;
t3845 = t3085 * t3116;
t3703 = pkin(2) * t3845;
t3044 = t3089 - 0.2e1;
t3706 = t3044 * t3055;
t3826 = t3104 * t3116;
t3872 = t2924 * t3104;
t3993 = pkin(2) * t3085;
t4038 = -t3276 * t3978 - t3064;
t4059 = -0.2e1 * t3993;
t2807 = ((-t3133 * t3706 - t4038) * t3124 + (-t2885 * t3115 + t3276 * t4059 + t2921) * t3116) * t3080 + ((t2924 * t3125 + t3116 * t3713) * t3993 + ((-t3276 * t3706 - t2885) * t3104 + t4058 * t2924) * t3124 + (t3115 * t4038 - t3983) * t3826) * t3105 + t3276 * t3703 + (-t2924 * t3336 + t3133 * t3494) * t3124 + ((-pkin(1) * t3872 + t2885) * t3115 - t2921) * t3116 + (pkin(1) * t3780 + t2924 * t3456) * t3115;
t3896 = t2906 * t3115;
t3642 = t2807 * t3896;
t3417 = t3086 * t3642;
t2765 = pkin(2) * t3417;
t3898 = t2906 * t3086;
t2799 = t2807 * t3898;
t2783 = pkin(5) * t2799;
t3556 = t3276 * t3828;
t2882 = -t3472 - t3556;
t3682 = t3080 * t3056;
t2978 = -t3682 + t4058;
t3009 = 0.2e1 * t3056 + pkin(1);
t3065 = pkin(1) * t3116;
t3022 = t3065 + pkin(6);
t3008 = t3055 + pkin(5);
t3366 = t3008 * t3276 * t3854;
t3438 = t3065 - t3671;
t3444 = pkin(6) * t3556;
t3844 = t3085 * t3145;
t3462 = -t3142 + t3844;
t3542 = t3008 * t3798;
t3674 = t3124 * t3975;
t3989 = pkin(2) * t3124;
t2828 = (t2882 * t3674 - t3462 * t3872) * t3089 + (-t2882 * t3116 * t3844 - ((t2924 * t3009 + t3542) * t3104 - t3366) * t3989 + (t2978 * t3133 - t3116 * t3444) * pkin(6)) * t3125 - (t3133 * t3438 - t3444) * t3989 - pkin(6) * ((t2924 * t3022 + t3116 * t3542) * t3104 - t3116 * t3366);
t2975 = t3104 * (-pkin(5) * t3056 + t3033);
t3809 = t3105 * t3116;
t3711 = pkin(1) * t3809;
t3441 = t3124 * t3711;
t3821 = t3104 * t3124;
t3697 = pkin(2) * t3821;
t2894 = (-pkin(5) * t3697 + t3031) * t3125 - pkin(2) * t3441 + t2975;
t2888 = 0.1e1 / t2894;
t3907 = t2888 * t3146;
t3624 = t2828 * t3907;
t3404 = t3086 * t3624;
t2816 = pkin(6) * t3404;
t3745 = -t2783 + t2816;
t2681 = -t2765 + t3745;
t2790 = pkin(6) * t2799;
t3908 = t2888 * t3086;
t3625 = t2828 * t3908;
t2813 = t3115 * t3625;
t2702 = t2813 + t2790;
t3333 = pkin(5) * t3404;
t2705 = t2790 + t3333;
t3843 = t3086 * t3105;
t3640 = t2807 * t3843;
t2759 = -t2906 * t3640 / 0.2e1;
t3803 = t3105 * t3125;
t2867 = t2997 * t3125 + (-t2924 * t3116 - t3276 * t3803) * pkin(6) + ((-t3115 * t3133 + t3276 * t3794) * t3105 - t2924 * t3781 + (-t3115 * t3276 - t3133 * t3794) * t3104) * pkin(2);
t2853 = t2867 * t2906;
t3899 = t2906 * t3080;
t3531 = t2867 * t3899;
t2723 = -t3531 + t2759 + t2853 / 0.2e1;
t2849 = t3105 * t2853;
t2740 = -t2849 - t2799;
t2777 = pkin(6) * t2783;
t2780 = 0.2e1 * t2790;
t2796 = pkin(1) * t2799;
t3363 = t3116 * t3625;
t3305 = t3146 * t3363;
t2810 = pkin(1) * t3305;
t4022 = -0.2e1 * t2849;
t3342 = t3008 * t4022;
t2840 = pkin(6) * t3342;
t3000 = t3056 / 0.2e1 + pkin(1);
t3007 = pkin(5) * t3115 + pkin(2);
t3032 = pkin(5) * t3055;
t3025 = 0.2e1 * t3032;
t3028 = t3089 - 0.1e1 / 0.2e1;
t3038 = pkin(1) * t3056;
t3084 = t3124 * t3085;
t3088 = t3125 * t3089;
t2787 = t3142 * t2799;
t3216 = -pkin(6) * t2813 - t2787;
t3402 = t3125 * t3624;
t3304 = t3086 * t3402;
t3252 = t3115 * t3304;
t3403 = t3104 * t3624;
t3306 = t3086 * t3403;
t3273 = pkin(1) * t3306;
t3360 = -t3625 / 0.2e1;
t3369 = t3085 * t3532;
t3863 = t3008 * t3104;
t3372 = t3793 * t3863;
t3390 = t3854 * t2853;
t3087 = 0.1e1 / t3124 ^ 2;
t3952 = t2807 * t2906;
t3643 = t3087 * t3952;
t3820 = t3104 * t3125;
t3685 = pkin(5) * t3820;
t2973 = t3685 + t3711;
t3708 = pkin(1) * t3803;
t4027 = 0.1e1 / (-pkin(6) * t3708 + t2973 * t3989 - t2975);
t3419 = t4027 * t3643;
t3435 = t4008 * t3793;
t3504 = t3032 + t3730;
t3742 = t2810 + t2816;
t3507 = t2783 - t3742;
t3595 = t3079 * t2853;
t3623 = t2828 * t4027 * t3087;
t3948 = t2807 * t3145;
t3638 = t3086 * t3948;
t2819 = pkin(1) * t3404;
t3754 = t2681 * t3116 + t2819;
t3792 = t3116 * t3142;
t3810 = t3105 * t3115;
t3827 = t3104 * t3115;
t3862 = t4058 * t3125;
t3897 = t2906 * t3104;
t3959 = t2705 * t3116;
t2585 = (t2888 * (-((t3137 + t3844) * t3088 * t3390 * t3697 + ((t2840 + pkin(6) * (-t2783 + t2816 / 0.2e1) + (-(t2780 + t3333) * t3115 / 0.2e1 + t3360) * pkin(2)) * t3124 * t3499 + t2702 * t3491 - (t3085 * t3638 * t3997 + ((t4031 + 0.3e1 * t3056 - 0.3e1 * t3682) * t3844 + pkin(6) * (t3000 * t4030 + t3080 * t3792)) * t2867) * t3897) * t3089 + (t2723 * t3084 * t3712 + (t3116 * t3342 + t3754) * t3369 + ((-(t2813 + t2780) * t3065 + t3216) * t3105 - ((t3032 + t3501) * t4019 + t3025 + 0.4e1 * t3038 + t3357) * t2853) * t3697 + (-t4008 * (-t2777 + (-t2705 * t3115 - t3625) * pkin(2)) - t3008 * t3352 * t2853) * t3056) * t3125 + t2723 * t3498 * t3845 - (t2840 + (0.2e1 * t3008 * t3595 - (-t2765 - t3507) * t3080 + t2810 + t2681) * pkin(6)) * t3989 + ((-pkin(1) * t2702 + t3116 * t3216) * t3105 - (t3103 + ((t3032 + t3733) * t4019 + t3025 + t2998) * t3116) * t2853) * t3982) * t2867 * t3898 - ((-t3390 * t3862 + t3273) * t3993 + (-t3504 * t3089 * t3390 - (-t3625 + (-t2849 * t3022 - t2705) * t3115) * pkin(2) * t3820 + pkin(1) * t3363 * t3810) * t3124 + (-t3252 * t3997 - ((-t2796 - t3959) * t3115 - t3363) * t3104 - (t4008 * t3124 * t3022 + t3007 * t3435 + t3339 * t3827) * t2853) * pkin(6)) * t3623) + (t3125 * t3144 * t2740 * t3084 + (t2740 * t3056 - t2796 - (t3089 * t3997 - t3372) * t2853) * t3844 + ((-t2813 / 0.2e1 - t2790 / 0.2e1) * t3125 - ((t3065 + t4010) * t3803 + t3028 * t3863) * t2853) * t3674 - (t2702 * t4058 - (t3339 - t3372) * pkin(6) * t2853) * pkin(6)) * t3104 * t3419) * t3146;
t2699 = -pkin(6) * t3417 - t3625;
t3141 = -0.2e1 * pkin(1);
t3894 = t2906 * t3125;
t3592 = t2867 * t3894;
t3386 = t3116 * t3592;
t3280 = t3008 * t3386;
t3950 = t2807 * t3086;
t3641 = t3104 * t3950;
t3324 = t3125 * pkin(5) * t3641;
t3949 = t2807 * t3116;
t3639 = t3086 * t3949;
t3459 = pkin(1) * t3639;
t3590 = t2867 * t3820;
t3594 = t2867 * t3897;
t3981 = t3089 * pkin(6);
t4013 = -0.2e1 * t3115;
t2606 = (-(-t4058 * t3641 + ((t3068 - 0.2e1 * t3056 + t3141) * t3828 + pkin(5) * t3435) * t2867) * t2906 * t3085 + (-(-t3981 / 0.2e1 + t3022) * t3531 * t4013 + (-(-t3007 * t3590 - t3115 * t3459) * t2906 - t2699) * t3105 - (-t3324 + t2867 * (t3022 - t3981)) * t3896) * t3124 + t3080 * t3280 + (pkin(1) * t3304 + t2993 * t3594) * t3105 + ((-t2705 - t2813) * t3116 - t2796) * t3104 - t3280) * t2888 * t3623;
t2769 = t3125 * t2796;
t3267 = pkin(6) * t3007 * t3386;
t3330 = pkin(6) * t3115 * t3594;
t3857 = t3044 * t3080;
t3465 = -t3089 + t3857;
t3519 = t3104 * t3803;
t3139 = pkin(5) / 0.2e1;
t2999 = t3055 + t3139;
t3547 = t2999 * t3828;
t3846 = t3084 * t3145;
t3849 = t3080 * t3125;
t3962 = t2699 * t3104;
t3312 = ((-t2853 - (t2867 * t3465 - t3640) * t2906) * t3846 - (-t2769 * t3105 - t3104 * t3754 - ((-t3056 + pkin(1)) * t3849 + (-0.2e1 * t3547 + t3978) * t3116) * t2853) * t3993 + ((t3022 * t3105 + t3685) * t2702 - (-(t3038 - t3504) * t3080 + (-pkin(6) * t3008 + t3033 * t3116) * t3519 + (-t3080 * t3089 + t4004) * pkin(2) * t3007) * t2853) * t3124 + t3080 * t3267 + t3330 * t3339 - t3267 + t4058 * t3962) * t3419;
t3416 = t2906 * t3639;
t2768 = pkin(1) * t3416;
t2774 = -t2783 / 0.2e1;
t2793 = t2906 * t3638;
t3077 = t3143 + t3145;
t3140 = 0.2e1 * pkin(5);
t3102 = pkin(2) * t3140;
t3219 = (-pkin(2) * t2705 + (-pkin(2) * t3625 - t2777) * t3115) * t3125;
t3356 = 0.3e1 * t3145 + t3142 + t3731;
t3895 = t2906 * t3116;
t3593 = t2867 * t3895;
t3388 = t3104 * t3593;
t3535 = t3044 * t3844;
t3702 = t3089 * t3055;
t3734 = t3143 / 0.3e1 + t3145;
t3735 = -t3142 / 0.3e1 - 0.2e1 / 0.3e1 * t3145;
t3736 = t3142 / 0.2e1 + t3145;
t3748 = -t2765 + t2816;
t3841 = t3089 * t3142;
t2907 = 0.1e1 / t3264 ^ 2;
t3926 = t2867 * t2907;
t3965 = (-pkin(2) * t2799 + t3115 * t3745) * t3089;
t4014 = -0.2e1 * t3104;
t4017 = -0.2e1 * t3089;
t3430 = (-0.3e1 * ((t3089 - 0.4e1 / 0.3e1) * t3846 + ((-0.2e1 / 0.3e1 * t3032 + t3735) * t3089 + 0.4e1 / 0.3e1 * t3032 + t3734) * t3124 + (0.4e1 / 0.3e1 * t3993 - 0.2e1 / 0.3e1 * t3007) * pkin(6) * t3793) * t3595 + (-t3535 * t3952 - ((-t2796 + t3959) * t3125 - (-0.4e1 * t3008 + t3702) * t3388) * t3993 + (t2787 - t2793 - (-0.4e1 * t2999 * t3590 - t3459) * t2906 * pkin(6) + (-0.2e1 * t3088 * t3330 - t3965 + 0.2e1 * (t2774 + t3742) * t3115) * pkin(2)) * t3124 - t3116 * (t3219 - (t3102 + (t3077 - t3841) * t3115) * t3594)) * t3080 + (-(-0.3e1 * t3089 + 0.3e1) * t3846 * t2853 - (t3089 * t3273 - 0.2e1 * t3009 * t3592 + (t2819 + (t2774 + t3748) * t3116) * t4014) * t3993 + ((t2777 + ((t2705 - t2768) * t3115 + t3625) * pkin(2)) * t3820 - (0.2e1 * (t3032 + t3736) * t3089 - 0.4e1 * t3032 - 0.2e1 * t3038 - t3356) * t2853) * t3124 - t3962 * t3068 - 0.2e1 * t3267 + (-(pkin(6) * t3305 + t2819) * pkin(2) - (t3792 + t4009) * t3417) * t3104) * t3105 + t4004 * t2793 * t3084 + (t2705 * t3125 - (-t3055 - t3140 + t3702) * t3594) * t3703 + (t2793 + (t3965 + (-0.2e1 * (-pkin(6) * t3088 + t3022 * t3125) * t3594 + t3507) * t3115) * pkin(2)) * t3124 - t3000 * t3330 * t4017 + t3116 * t3219 - ((t2998 * t3116 + t3103) * t3115 + t3116 * t3102) * t3594) * t3086 * t3926;
t2584 = -t2606 - t3312 - t3430;
t2804 = t2807 ^ 2;
t3893 = t2907 * t3087;
t2798 = t2804 * t3893;
t3147 = 0.1e1 / pkin(2) ^ 2;
t2822 = t2828 ^ 2 / t2894 ^ 2 * t3087 * t3147;
t2711 = t2798 + t2822;
t3242 = t3404 * t2853;
t3213 = -0.2e1 * t3242;
t3988 = pkin(2) * t3125;
t2666 = (-((pkin(6) * t3794 + t3988) * t3104 + pkin(6) * t3810) * t2853 + t2699) * t2906 * t3625;
t3453 = pkin(6) * t3519;
t3679 = pkin(6) * t3849;
t3732 = t3142 + t3145;
t3797 = t3105 * t3142;
t4055 = t2907 * (((-t2906 * t3124 * t3948 + t3216) * t3105 + (-t3748 * t3794 + (-pkin(6) * t3642 - t2828 * t2888) * t3125 * t3086) * t3990 - (-(t3535 - t3841) * t3080 + 0.2e1 * t2999 * t3453 + t3844 * t3853 - t3841 + t3032 + t3038 + (-t3007 * t3080 + (t3009 * t3125 + 0.2e1 * (-t3547 - t3679) * t3116) * t3124) * pkin(2) + t3732) * t2853) * t2867 + (t2740 * t3844 - (-pkin(2) * t2987 * t3827 + t3797) * t2853 + t3216) * t3950);
t2600 = -t2666 - t4055;
t3654 = t2600 * t3826;
t3972 = t2600 * t3125;
t3729 = 0.2e1 * t3972;
t3996 = pkin(1) * t3125;
t4067 = pkin(1) * t3729 - (pkin(5) * t2584 * t3116 - pkin(1) * t2585) * t3104 - pkin(5) * (t2711 * t3820 + t3080 * t3213) + 0.2e1 * (-t2768 - t3333) * t2853 + (t2584 * t3996 - t2711 * t3065 - t3654 * t3140 - 0.2e1 * t3324 * t3926) * t3105;
t2701 = -pkin(6) * t3407 - t3619;
t3878 = t2912 * t3131;
t3580 = t2869 * t3878;
t3376 = t3122 * t3580;
t3277 = t3016 * t3376;
t3938 = t2809 * t3098;
t3629 = t3104 * t3938;
t3322 = t3131 * pkin(5) * t3629;
t3937 = t2809 * t3122;
t3627 = t3098 * t3937;
t3457 = pkin(1) * t3627;
t3578 = t2869 * t3816;
t3582 = t2869 * t3881;
t3979 = t3101 * pkin(6);
t4011 = -0.2e1 * t3121;
t2608 = (-(-t4056 * t3629 + ((t3070 - 0.2e1 * t3060 + t3141) * t3828 + pkin(5) * t3433) * t2869) * t2912 * t3097 + (-(-t3979 / 0.2e1 + t3024) * t3529 * t4011 + (-(-t3015 * t3578 - t3121 * t3457) * t2912 - t2701) * t3105 - (-t3322 + t2869 * (t3024 - t3979)) * t3880) * t3130 + t3080 * t3277 + (pkin(1) * t3298 + t2995 * t3582) * t3105 + ((-t2707 - t2815) * t3122 - t2786) * t3104 - t3277) * t2892 * t3617;
t2773 = t3131 * t2786;
t3265 = pkin(6) * t3015 * t3376;
t3328 = pkin(6) * t3121 * t3582;
t3855 = t3046 * t3080;
t3463 = -t3101 + t3855;
t3517 = t3104 * t3799;
t3003 = t3059 + t3139;
t3545 = t3003 * t3828;
t3834 = t3096 * t3145;
t3847 = t3080 * t3131;
t3960 = t2701 * t3104;
t3310 = ((-t2857 - (t2869 * t3463 - t3628) * t2912) * t3834 - (-t2773 * t3105 - t3104 * t3752 - ((-t3060 + pkin(1)) * t3847 + (-0.2e1 * t3545 + t3976) * t3122) * t2857) * t3991 + ((t3024 * t3105 + t3683) * t2704 - (-(t3040 - t3502) * t3080 + (-pkin(6) * t3016 + t3037 * t3122) * t3517 + (-t3080 * t3101 + t3998) * pkin(2) * t3015) * t2857) * t3130 + t3080 * t3265 + t3328 * t3337 - t3265 + t4056 * t3960) * t3409;
t3406 = t2912 * t3627;
t2772 = pkin(1) * t3406;
t2776 = -t2785 / 0.2e1;
t2795 = t2912 * t3626;
t3217 = (-pkin(2) * t2707 + (-pkin(2) * t3619 - t2779) * t3121) * t3131;
t3879 = t2912 * t3122;
t3581 = t2869 * t3879;
t3378 = t3104 * t3581;
t3533 = t3046 * t3832;
t3698 = t3101 * t3059;
t3746 = -t2767 + t2818;
t3829 = t3101 * t3142;
t2913 = 0.1e1 / t3262 ^ 2;
t3924 = t2869 * t2913;
t3963 = (-pkin(2) * t2803 + t3121 * t3743) * t3101;
t4015 = -0.2e1 * t3101;
t3431 = (-0.3e1 * ((t3101 - 0.4e1 / 0.3e1) * t3834 + ((-0.2e1 / 0.3e1 * t3036 + t3735) * t3101 + 0.4e1 / 0.3e1 * t3036 + t3734) * t3130 + (0.4e1 / 0.3e1 * t3991 - 0.2e1 / 0.3e1 * t3015) * pkin(6) * t3783) * t3583 + (-t3533 * t3940 - ((-t2786 + t3957) * t3131 - (-0.4e1 * t3016 + t3698) * t3378) * t3991 + (t2789 - t2795 - (-0.4e1 * t3003 * t3578 - t3457) * t2912 * pkin(6) + (-0.2e1 * t3100 * t3328 - t3963 + 0.2e1 * (t2776 + t3740) * t3121) * pkin(2)) * t3130 - t3122 * (t3217 - (t3102 + (t3077 - t3829) * t3121) * t3582)) * t3080 + (-(-0.3e1 * t3101 + 0.3e1) * t3834 * t2857 - (t3101 * t3271 - 0.2e1 * t3017 * t3580 + (t2821 + (t2776 + t3746) * t3122) * t4014) * t3991 + ((t2779 + ((t2707 - t2772) * t3121 + t3619) * pkin(2)) * t3816 - (0.2e1 * (t3036 + t3736) * t3101 - 0.4e1 * t3036 - 0.2e1 * t3040 - t3356) * t2857) * t3130 - t3960 * t3070 - 0.2e1 * t3265 + (-(pkin(6) * t3299 + t2821) * pkin(2) - (t3782 + t4009) * t3407) * t3104) * t3105 + t3998 * t2795 * t3096 + (t2707 * t3131 - (-t3059 - t3140 + t3698) * t3582) * t3699 + (t2795 + (t3963 + (-0.2e1 * (-pkin(6) * t3100 + t3024 * t3131) * t3582 + t3505) * t3121) * pkin(2)) * t3130 - t3004 * t3328 * t4015 + t3122 * t3217 - ((t2998 * t3122 + t3103) * t3121 + t3122 * t3102) * t3582) * t3098 * t3924;
t2583 = -t2608 - t3310 - t3431;
t2806 = t2809 ^ 2;
t3877 = t2913 * t3099;
t2802 = t2806 * t3877;
t2824 = t2830 ^ 2 / t2896 ^ 2 * t3099 * t3147;
t2713 = t2802 + t2824;
t3238 = t3396 * t2857;
t3211 = -0.2e1 * t3238;
t3984 = pkin(2) * t3131;
t2668 = (-((pkin(6) * t3784 + t3984) * t3104 + pkin(6) * t3806) * t2857 + t2701) * t2912 * t3619;
t3451 = pkin(6) * t3517;
t3677 = pkin(6) * t3847;
t4053 = t2913 * (((-t2912 * t3130 * t3936 + t3214) * t3105 + (-t3746 * t3784 + (-pkin(6) * t3630 - t2830 * t2892) * t3131 * t3098) * t3990 - (-(t3533 - t3829) * t3080 + 0.2e1 * t3003 * t3451 + t3832 * t3851 - t3829 + t3036 + t3040 + (-t3015 * t3080 + (t3017 * t3131 + 0.2e1 * (-t3545 - t3677) * t3122) * t3130) * pkin(2) + t3732) * t2857) * t2869 + (t2746 * t3832 - (-pkin(2) * t2989 * t3823 + t3797) * t2857 + t3214) * t3938);
t2602 = -t2668 - t4053;
t3650 = t2602 * t3822;
t3966 = t2602 * t3131;
t3727 = 0.2e1 * t3966;
t3994 = pkin(1) * t3131;
t4066 = pkin(1) * t3727 - (pkin(5) * t2583 * t3122 - pkin(1) * t2587) * t3104 - pkin(5) * (t2713 * t3816 + t3080 * t3211) + 0.2e1 * (-t2772 - t3331) * t2857 + (t2583 * t3994 - t2713 * t3067 - t3650 * t3140 - 0.2e1 * t3322 * t3924) * t3105;
t2700 = -pkin(6) * t3412 - t3622;
t3886 = t2909 * t3128;
t3586 = t2868 * t3886;
t3381 = t3119 * t3586;
t3278 = t3012 * t3381;
t3944 = t2808 * t3092;
t3635 = t3104 * t3944;
t3323 = t3128 * pkin(5) * t3635;
t3943 = t2808 * t3119;
t3633 = t3092 * t3943;
t3458 = pkin(1) * t3633;
t3584 = t2868 * t3818;
t3588 = t2868 * t3889;
t3980 = t3095 * pkin(6);
t4012 = -0.2e1 * t3118;
t2607 = (-(-t4057 * t3635 + ((t3069 - 0.2e1 * t3058 + t3141) * t3828 + pkin(5) * t3434) * t2868) * t2909 * t3091 + (-(-t3980 / 0.2e1 + t3023) * t3530 * t4012 + (-(-t3011 * t3584 - t3118 * t3458) * t2909 - t2700) * t3105 - (-t3323 + t2868 * (t3023 - t3980)) * t3888) * t3127 + t3080 * t3278 + (pkin(1) * t3301 + t2994 * t3588) * t3105 + ((-t2706 - t2814) * t3119 - t2797) * t3104 - t3278) * t2890 * t3620;
t2771 = t3128 * t2797;
t3266 = pkin(6) * t3011 * t3381;
t3329 = pkin(6) * t3118 * t3588;
t3856 = t3045 * t3080;
t3464 = -t3095 + t3856;
t3518 = t3104 * t3801;
t3001 = t3057 + t3139;
t3546 = t3001 * t3828;
t3840 = t3090 * t3145;
t3848 = t3080 * t3128;
t3961 = t2700 * t3104;
t3311 = ((-t2855 - (t2868 * t3464 - t3634) * t2909) * t3840 - (-t2771 * t3105 - t3104 * t3753 - ((-t3058 + pkin(1)) * t3848 + (-0.2e1 * t3546 + t3977) * t3119) * t2855) * t3992 + ((t3023 * t3105 + t3684) * t2703 - (-(t3039 - t3503) * t3080 + (-pkin(6) * t3012 + t3035 * t3119) * t3518 + (-t3080 * t3095 + t4001) * pkin(2) * t3011) * t2855) * t3127 + t3080 * t3266 + t3329 * t3338 - t3266 + t4057 * t3961) * t3414;
t3411 = t2909 * t3633;
t2770 = pkin(1) * t3411;
t2775 = -t2784 / 0.2e1;
t2794 = t2909 * t3632;
t3218 = (-pkin(2) * t2706 + (-pkin(2) * t3622 - t2778) * t3118) * t3128;
t3887 = t2909 * t3119;
t3587 = t2868 * t3887;
t3383 = t3104 * t3587;
t3534 = t3045 * t3838;
t3700 = t3095 * t3057;
t3747 = -t2766 + t2817;
t3835 = t3095 * t3142;
t2910 = 0.1e1 / t3263 ^ 2;
t3925 = t2868 * t2910;
t3964 = (-pkin(2) * t2801 + t3118 * t3744) * t3095;
t4016 = -0.2e1 * t3095;
t3432 = (-0.3e1 * ((t3095 - 0.4e1 / 0.3e1) * t3840 + ((-0.2e1 / 0.3e1 * t3034 + t3735) * t3095 + 0.4e1 / 0.3e1 * t3034 + t3734) * t3127 + (0.4e1 / 0.3e1 * t3992 - 0.2e1 / 0.3e1 * t3011) * pkin(6) * t3788) * t3589 + (-t3534 * t3946 - ((-t2797 + t3958) * t3128 - (-0.4e1 * t3012 + t3700) * t3383) * t3992 + (t2788 - t2794 - (-0.4e1 * t3001 * t3584 - t3458) * t2909 * pkin(6) + (-0.2e1 * t3094 * t3329 - t3964 + 0.2e1 * (t2775 + t3741) * t3118) * pkin(2)) * t3127 - t3119 * (t3218 - (t3102 + (t3077 - t3835) * t3118) * t3588)) * t3080 + (-(-0.3e1 * t3095 + 0.3e1) * t3840 * t2855 - (t3095 * t3272 - 0.2e1 * t3013 * t3586 + (t2820 + (t2775 + t3747) * t3119) * t4014) * t3992 + ((t2778 + ((t2706 - t2770) * t3118 + t3622) * pkin(2)) * t3818 - (0.2e1 * (t3034 + t3736) * t3095 - 0.4e1 * t3034 - 0.2e1 * t3039 - t3356) * t2855) * t3127 - t3961 * t3069 - 0.2e1 * t3266 + (-(pkin(6) * t3302 + t2820) * pkin(2) - (t3787 + t4009) * t3412) * t3104) * t3105 + t4001 * t2794 * t3090 + (t2706 * t3128 - (-t3057 - t3140 + t3700) * t3588) * t3701 + (t2794 + (t3964 + (-0.2e1 * (-pkin(6) * t3094 + t3023 * t3128) * t3588 + t3506) * t3118) * pkin(2)) * t3127 - t3002 * t3329 * t4016 + t3119 * t3218 - ((t2998 * t3119 + t3103) * t3118 + t3119 * t3102) * t3588) * t3092 * t3925;
t2582 = -t2607 - t3311 - t3432;
t2805 = t2808 ^ 2;
t3885 = t2910 * t3093;
t2800 = t2805 * t3885;
t2823 = t2829 ^ 2 / t2895 ^ 2 * t3093 * t3147;
t2712 = t2800 + t2823;
t3240 = t3400 * t2855;
t3212 = -0.2e1 * t3240;
t3986 = pkin(2) * t3128;
t2667 = (-((pkin(6) * t3789 + t3986) * t3104 + pkin(6) * t3808) * t2855 + t2700) * t2909 * t3622;
t3452 = pkin(6) * t3518;
t3678 = pkin(6) * t3848;
t4054 = t2910 * (((-t2909 * t3127 * t3942 + t3215) * t3105 + (-t3747 * t3789 + (-pkin(6) * t3636 - t2829 * t2890) * t3128 * t3092) * t3990 - (-(t3534 - t3835) * t3080 + 0.2e1 * t3001 * t3452 + t3838 * t3852 - t3835 + t3034 + t3039 + (-t3011 * t3080 + (t3013 * t3128 + 0.2e1 * (-t3546 - t3678) * t3119) * t3127) * pkin(2) + t3732) * t2855) * t2868 + (t2743 * t3838 - (-pkin(2) * t2988 * t3825 + t3797) * t2855 + t3215) * t3944);
t2601 = -t2667 - t4054;
t3652 = t2601 * t3824;
t3969 = t2601 * t3128;
t3728 = 0.2e1 * t3969;
t3995 = pkin(1) * t3128;
t4065 = pkin(1) * t3728 - (pkin(5) * t2582 * t3119 - pkin(1) * t2586) * t3104 - pkin(5) * (t2712 * t3818 + t3080 * t3212) + 0.2e1 * (-t2770 - t3332) * t2855 + (t2582 * t3995 - t2712 * t3066 - t3652 * t3140 - 0.2e1 * t3323 * t3925) * t3105;
t4064 = t3105 * (t3097 * t3984 + t3130 * t4056) + t3121 * t3454 - t3130 * t3334;
t4063 = t3105 * (t3091 * t3986 + t3127 * t4057) + t3118 * t3455 - t3127 * t3335;
t4062 = t3105 * (t3085 * t3988 + t3124 * t4058) + t3115 * t3456 - t3124 * t3336;
t2957 = t3047 * t3117 - t3050 * t3126;
t4052 = t2957 * t3462;
t2958 = t3048 * t3120 - t3051 * t3129;
t4051 = t2958 * t3461;
t2959 = t3049 * t3123 - t3052 * t3132;
t4050 = t2959 * t3460;
t2990 = -pkin(5) + t3706;
t3497 = t3007 + t4059;
t4034 = -t3007 * t3116 + (-pkin(6) * t3510 - t2990 * t3124) * t3828 + t3703 + (pkin(6) * t3781 + t3116 * t3497) * t3080;
t2991 = -pkin(5) + t3705;
t3496 = t3011 + t4060;
t4033 = -t3011 * t3119 + (-pkin(6) * t3509 - t2991 * t3127) * t3828 + t3701 + (pkin(6) * t3779 + t3119 * t3496) * t3080;
t2992 = -pkin(5) + t3704;
t3495 = t3015 + t4061;
t4032 = -t3015 * t3122 + (-pkin(6) * t3508 - t2992 * t3130) * t3828 + t3699 + (pkin(6) * t3777 + t3122 * t3495) * t3080;
t2843 = t2906 * t3590;
t4025 = -0.2e1 * t3146 * t3360 + 0.2e1 * t2843;
t2844 = t2909 * t3584;
t4024 = -0.2e1 * t3146 * t3359 + 0.2e1 * t2844;
t2845 = t2912 * t3578;
t4023 = -0.2e1 * t3146 * t3358 + 0.2e1 * t2845;
t4018 = 0.2e1 * t3080;
t4007 = t4018 - 0.2e1;
t4006 = 0.2e1 * t3085 - 0.1e1;
t4005 = 0.4e1 * t3085 - 0.2e1;
t4003 = 0.2e1 * t3091 - 0.1e1;
t4002 = 0.4e1 * t3091 - 0.2e1;
t4000 = 0.2e1 * t3097 - 0.1e1;
t3999 = 0.4e1 * t3097 - 0.2e1;
t3688 = pkin(5) * t3826;
t3974 = t2600 * (-t3688 + t3708);
t3973 = t2600 * t2973;
t3687 = pkin(5) * t3824;
t3971 = t2601 * (-t3687 + t3707);
t3970 = t2601 * t2974;
t3686 = pkin(5) * t3822;
t3968 = t2602 * (-t3676 + t3686);
t3967 = t2602 * t2972;
t2751 = -t2843 - t3404;
t3956 = t2751 * t2867;
t2753 = -t2844 - t3400;
t3955 = t2753 * t2868;
t2755 = -t2845 - t3396;
t3954 = t2755 * t2869;
t3953 = t2807 * t2867;
t3951 = t2807 * t2907;
t3947 = t2808 * t2868;
t3945 = t2808 * t2910;
t3941 = t2809 * t2869;
t3939 = t2809 * t2913;
t3543 = t3126 * t3863;
t2942 = t3022 * t3117 - t3116 * t3543;
t2951 = t3009 * t3117 - t3543;
t3544 = t3117 * t3863;
t3204 = t3022 * t3126 + t3116 * t3544;
t3222 = t3009 * t3126 + t3544;
t2960 = t3047 * t3126 + t3050 * t3117;
t3315 = t3462 * t2960;
t3804 = t3105 * t3124;
t3694 = pkin(2) * t3804;
t3447 = t2960 * t3694;
t2858 = (t3447 * t4030 + t4052) * t3089 + ((t3047 * t2951 - t3050 * t3222) * t3989 + t3315 * t3809) * t3125 + (t3047 * t2942 - t3050 * t3204 + t3447) * pkin(6);
t3935 = t2858 * t2888;
t3540 = t3129 * t3861;
t2943 = t3023 * t3120 - t3119 * t3540;
t2952 = t3013 * t3120 - t3540;
t3541 = t3120 * t3861;
t3203 = t3023 * t3129 + t3119 * t3541;
t3221 = t3013 * t3129 + t3541;
t2961 = t3048 * t3129 + t3051 * t3120;
t3314 = t3461 * t2961;
t3802 = t3105 * t3127;
t3693 = pkin(2) * t3802;
t3446 = t2961 * t3693;
t2859 = (t3446 * t4030 + t4051) * t3095 + ((t3048 * t2952 - t3051 * t3221) * t3987 + t3314 * t3807) * t3128 + (t3048 * t2943 - t3051 * t3203 + t3446) * pkin(6);
t3934 = t2859 * t2890;
t3537 = t3132 * t3859;
t2944 = t3024 * t3123 - t3122 * t3537;
t2953 = t3017 * t3123 - t3537;
t3538 = t3123 * t3859;
t3202 = t3024 * t3132 + t3122 * t3538;
t3220 = t3017 * t3132 + t3538;
t2962 = t3049 * t3132 + t3052 * t3123;
t3313 = t3460 * t2962;
t3800 = t3105 * t3130;
t3692 = pkin(2) * t3800;
t3445 = t2962 * t3692;
t2860 = (t3445 * t4030 + t4050) * t3101 + ((t3049 * t2953 - t3052 * t3220) * t3985 + t3313 * t3805) * t3131 + (t3049 * t2944 - t3052 * t3202 + t3445) * pkin(6);
t3933 = t2860 * t2892;
t2864 = t2867 ^ 2;
t2852 = t2864 * t2907;
t3522 = t3104 * t3809;
t2963 = -pkin(5) * t3522 + t3996;
t3932 = t2864 * t2963;
t3931 = t2864 * (pkin(5) * t3519 + t3065);
t2865 = t2868 ^ 2;
t2854 = t2865 * t2910;
t3521 = t3104 * t3807;
t2964 = -pkin(5) * t3521 + t3995;
t3930 = t2865 * t2964;
t3929 = t2865 * (pkin(5) * t3518 + t3066);
t2866 = t2869 ^ 2;
t2856 = t2866 * t2913;
t3520 = t3104 * t3805;
t2965 = -pkin(5) * t3520 + t3994;
t3928 = t2866 * t2965;
t3927 = t2866 * (pkin(5) * t3517 + t3067);
t3553 = t2957 * t3827;
t2870 = -t2960 * t3056 + t2957 * t3866 + (-t2960 * t3781 - t3553) * pkin(2);
t3923 = t2870 * t2906;
t3552 = t2958 * t3825;
t2871 = -t2961 * t3058 + t2958 * t3865 + (-t2961 * t3779 - t3552) * pkin(2);
t3922 = t2871 * t2909;
t3551 = t2959 * t3823;
t2872 = -t2962 * t3060 + t2959 * t3864 + (-t2962 * t3777 - t3551) * pkin(2);
t3921 = t2872 * t2912;
t3550 = t2960 * t3827;
t2873 = t2957 * t3056 + t2960 * t3866 + (t2957 * t3781 - t3550) * pkin(2);
t3920 = t2873 * t2906;
t3549 = t2961 * t3825;
t2874 = t2958 * t3058 + t2961 * t3865 + (t2958 * t3779 - t3549) * pkin(2);
t3919 = t2874 * t2909;
t3548 = t2962 * t3823;
t2875 = t2959 * t3060 + t2962 * t3864 + (t2959 * t3777 - t3548) * pkin(2);
t3918 = t2875 * t2912;
t3005 = t4007 * pkin(6);
t2876 = -t3369 * t3793 + (t3005 * t3089 + t3008 * t3519 + t3438) * t3989 - (t2978 * t3125 - t3008 * t3522) * pkin(6);
t3917 = t2876 * t4027;
t3916 = t2876 * t3146;
t2877 = -t3368 * t3788 + (t3005 * t3095 + t3012 * t3518 + t3437) * t3987 - (t2979 * t3128 - t3012 * t3521) * pkin(6);
t3915 = t2877 * t4026;
t3914 = t2877 * t3146;
t2878 = -t3367 * t3783 + (t3005 * t3101 + t3016 * t3517 + t3436) * t3985 - (t2980 * t3131 - t3016 * t3520) * pkin(6);
t3913 = t2878 * t4028;
t3912 = t2878 * t3146;
t2879 = (t2990 * t3080 + t3453 - t3494) * t3124 - t3115 * t3862 + (t3115 * t3679 + t3497 * t3828) * t3116;
t3911 = t2879 * t4027;
t2880 = (t2991 * t3080 + t3452 - t3493) * t3127 - t3118 * t3860 + (t3118 * t3678 + t3496 * t3828) * t3119;
t3910 = t2880 * t4026;
t2881 = (t2992 * t3080 + t3451 - t3492) * t3130 - t3121 * t3858 + (t3121 * t3677 + t3495 * t3828) * t3122;
t3909 = t2881 * t4028;
t3902 = t4028 * t3098;
t3901 = t4027 * t3086;
t3900 = t4026 * t3092;
t3892 = t2907 * t3116;
t3884 = t2910 * t3119;
t3876 = t2913 * t3122;
t3875 = t2906 * (pkin(2) * t3810 + t2987 * t3104);
t3874 = t2909 * (pkin(2) * t3808 + t2988 * t3104);
t3873 = t2912 * (pkin(2) * t3806 + t2989 * t3104);
t3078 = t3104 ^ 2;
t3850 = t3078 * t3146;
t3842 = t3086 * t3115;
t3836 = t3092 * t3118;
t3830 = t3098 * t3121;
t3814 = t3104 * t3146;
t3813 = t3105 * t2582;
t3812 = t3105 * t2583;
t3811 = t3105 * t2584;
t3796 = t3115 * t3116;
t3795 = t3115 * t3124;
t3791 = t3118 * t3119;
t3790 = t3118 * t3127;
t3786 = t3121 * t3122;
t3785 = t3121 * t3130;
t2546 = -t2585 * t3711 + (-t2585 * t3820 + t2600 * t4018 + 0.2e1 * t2666 + 0.2e1 * t4055) * pkin(5);
t3345 = -0.2e1 * ((pkin(5) * t3388 - t2769) * t3105 + (pkin(5) * t3416 - t2819 / 0.2e1) * t3104 - pkin(1) * t3592) * t3624;
t3775 = -t3124 * t2546 - t3115 * t4067 + t3345;
t3774 = -t3115 * t2546 + t3124 * t4067 + t3345 * t3842;
t2547 = -t2586 * t3710 + (-t2586 * t3818 + t2601 * t4018 + 0.2e1 * t2667 + 0.2e1 * t4054) * pkin(5);
t3344 = -0.2e1 * ((pkin(5) * t3383 - t2771) * t3105 + (pkin(5) * t3411 - t2820 / 0.2e1) * t3104 - pkin(1) * t3586) * t3621;
t3773 = -t3127 * t2547 - t3118 * t4065 + t3344;
t3772 = -t3118 * t2547 + t3127 * t4065 + t3344 * t3836;
t2548 = -t2587 * t3709 + (-t2587 * t3816 + t2602 * t4018 + 0.2e1 * t2668 + 0.2e1 * t4053) * pkin(5);
t2665 = (pkin(5) * t3378 - t2773) * t3105 + (pkin(5) * t3406 - t2821 / 0.2e1) * t3104 - pkin(1) * t3580;
t3771 = -t3130 * t2548 - 0.2e1 * t2665 * t3618 - t3121 * t4066;
t3343 = -0.2e1 * t3396;
t3770 = t4066 * t3130 + (t2665 * t3343 - t2548) * t3121;
t2556 = t2601 * t3464 + t2601 - t3813;
t3714 = -0.2e1 * t3828;
t2649 = -t3240 * t3714 + (t2909 * t3303 + (-t2909 ^ 2 + t2910 * t3080) * t3128 * t2868) * t3944;
t3562 = t2910 * t3818;
t3279 = t2805 * t3093 * t3562;
t3354 = t3464 + 0.1e1;
t3401 = t2868 * t3621;
t3645 = (-t2844 + t3400) * t2808 * t3105;
t2598 = t3105 * t2601;
t2568 = t2598 - t3432 / 0.2e1 - t3311 / 0.2e1 - t2607 / 0.2e1;
t3666 = t2568 * t3824;
t3769 = -0.2e1 * t2556 * t3790 + t4002 * t3666 + 0.4e1 * t3118 * t2649 * t3789 + t4003 * t3279 - (t4002 * t3645 + (-0.4e1 * t3091 * t3354 + 0.2e1 * t3856 + t4016 + 0.2e1) * t3401) * t3890;
t2557 = t2602 * t3463 + t2602 - t3812;
t2650 = -t3238 * t3714 + (t2912 * t3300 + (-t2912 ^ 2 + t2913 * t3080) * t3131 * t2869) * t3938;
t3560 = t2913 * t3816;
t3282 = t2806 * t3099 * t3560;
t3353 = t3463 + 0.1e1;
t3397 = t2869 * t3618;
t3644 = (-t2845 + t3396) * t2809 * t3105;
t2599 = t3105 * t2602;
t2569 = t2599 - t3431 / 0.2e1 - t3310 / 0.2e1 - t2608 / 0.2e1;
t3665 = t2569 * t3822;
t3768 = -0.2e1 * t2557 * t3785 + t3999 * t3665 + 0.4e1 * t3121 * t2650 * t3784 + t4000 * t3282 - (t3999 * t3644 + (-0.4e1 * t3097 * t3353 + 0.2e1 * t3855 + t4015 + 0.2e1) * t3397) * t3882;
t2555 = t2600 * t3465 + t2600 - t3811;
t2648 = -t3242 * t3714 + (t2906 * t3306 + (-t2906 ^ 2 + t2907 * t3080) * t3125 * t2867) * t3950;
t3564 = t2907 * t3820;
t3281 = t2804 * t3087 * t3564;
t3355 = t3465 + 0.1e1;
t3405 = t2867 * t3624;
t3646 = (-t2843 + t3404) * t2807 * t3105;
t2597 = t3105 * t2600;
t2567 = t2597 - t3430 / 0.2e1 - t3312 / 0.2e1 - t2606 / 0.2e1;
t3667 = t2567 * t3826;
t3767 = -0.2e1 * t2555 * t3795 + t4005 * t3667 + 0.4e1 * t3115 * t2648 * t3794 + t4006 * t3281 - (t4005 * t3646 + (-0.4e1 * t3085 * t3355 + 0.2e1 * t3857 + t4017 + 0.2e1) * t3405) * t3898;
t2574 = t2584 + t2597;
t2735 = -t2849 - t2799 / 0.2e1;
t3516 = t3104 * t3796;
t3475 = 0.2e1 * t3516;
t3766 = t2567 * t3124 * t3475 + t2555 * t3085 + t2574 * t3105 + t3281 * t3795 - 0.2e1 * t2648 * t3845 + 0.2e1 * (-t2735 * t3116 * t3403 + (t3355 * t3405 - t3646) * t2906 * t3795) * t3086;
t2576 = t2582 + t2598;
t2736 = -t2850 - t2801 / 0.2e1;
t3514 = t3104 * t3791;
t3474 = 0.2e1 * t3514;
t3765 = t2568 * t3127 * t3474 + t2556 * t3091 + t2576 * t3105 + t3279 * t3790 - 0.2e1 * t2649 * t3839 + 0.2e1 * (-t3119 * t2736 * t3399 + (t3354 * t3401 - t3645) * t2909 * t3790) * t3092;
t2578 = t2583 + t2599;
t2737 = -t2851 - t2803 / 0.2e1;
t3512 = t3104 * t3786;
t3473 = 0.2e1 * t3512;
t3764 = t2569 * t3130 * t3473 + t2557 * t3097 + t2578 * t3105 + t3282 * t3785 - 0.2e1 * t2650 * t3833 + 0.2e1 * (-t2737 * t3122 * t3395 + (t3353 * t3397 - t3644) * t2912 * t3785) * t3098;
t3195 = t3125 * t3213;
t2673 = t3195 + t3104 * (t2798 - t2822);
t2693 = t3104 * t3195 - t2822;
t3656 = t2584 * t3820;
t3717 = 0.4e1 * t3028 * t3086;
t3763 = -t3124 * t3656 + t2585 * (t3516 - t3804) + (t3124 * t3714 - t4007 * t3796) * t3972 + t2673 * t3794 + t2693 * t3810 + (0.4e1 * (-t3028 * t3417 + t3116 * t3402 / 0.2e1) * t3899 + (t3115 * t3717 + 0.2e1 * t3522) * t3951) * t2867;
t3194 = t3128 * t3212;
t2674 = t3194 + t3104 * (t2800 - t2823);
t2694 = t3104 * t3194 - t2823;
t3658 = t2582 * t3818;
t3716 = 0.4e1 * t3029 * t3092;
t3762 = -t3127 * t3658 + t2586 * (t3514 - t3802) + (t3127 * t3714 - t4007 * t3791) * t3969 + t2674 * t3789 + t2694 * t3808 + (0.4e1 * (-t3029 * t3412 + t3119 * t3398 / 0.2e1) * t3891 + (t3118 * t3716 + 0.2e1 * t3521) * t3945) * t2868;
t3193 = t3131 * t3211;
t2672 = t3193 + t3104 * (t2802 - t2824);
t2695 = t3104 * t3193 - t2824;
t3657 = t2583 * t3816;
t3715 = 0.4e1 * t3030 * t3098;
t3761 = -t3130 * t3657 + t2587 * (t3512 - t3800) + (t3130 * t3714 - t4007 * t3786) * t3966 + t2672 * t3784 + t2695 * t3806 + (0.4e1 * (-t3030 * t3407 + t3122 * t3394 / 0.2e1) * t3883 + (t3121 * t3715 + 0.2e1 * t3520) * t3939) * t2869;
t3515 = t3104 * t3794;
t3760 = -t3115 * t3656 - t2585 * (t3515 + t3810) + (t3115 * t3714 + t4007 * t3794) * t3972 + t2673 * t3796 - t2693 * t3804 + (0.2e1 * (t3116 * t3252 - (t4017 + 0.1e1) * t3124 * t2799) * t3899 + (t3475 * t3843 - 0.4e1 * t3028) * t3951) * t2867;
t3513 = t3104 * t3789;
t3759 = -t3118 * t3658 - t2586 * (t3513 + t3808) + (t3118 * t3714 + t4007 * t3789) * t3969 + t2674 * t3791 - t2694 * t3802 + (0.2e1 * (t3119 * t3251 - (t4016 + 0.1e1) * t3127 * t2801) * t3891 + (t3474 * t3837 - 0.4e1 * t3029) * t3945) * t2868;
t3511 = t3104 * t3784;
t3758 = -t3121 * t3657 - t2587 * (t3511 + t3806) + (t3121 * t3714 + t4007 * t3784) * t3966 + t2672 * t3786 - t2695 * t3800 + (0.2e1 * (t3122 * t3250 - (t4015 + 0.1e1) * t3130 * t2803) * t3883 + (t3473 * t3831 - 0.4e1 * t3030) * t3939) * t2869;
t2728 = -t4008 * t3580 + 0.2e1 * t3300;
t3253 = t3618 * t3631;
t3377 = t3130 * t3581;
t3749 = -(-t2845 + t3343) * t2851 + 0.2e1 * t3253;
t3757 = 0.2e1 * t2578 * t3785 + t4000 * t3650 + ((-0.2e1 * t2866 * t3560 - 0.4e1 * t3238) * t3105 - 0.4e1 * t3253) * t3097 - t2728 * t3377 * t4011 + t3749;
t2726 = -t4008 * t3592 + 0.2e1 * t3306;
t3257 = t3624 * t3643;
t3387 = t3124 * t3593;
t3751 = -(-t2843 - 0.2e1 * t3404) * t2849 + 0.2e1 * t3257;
t3756 = 0.2e1 * t2574 * t3795 + t4006 * t3654 + ((-0.2e1 * t2864 * t3564 - 0.4e1 * t3242) * t3105 - 0.4e1 * t3257) * t3085 - t2726 * t3387 * t4013 + t3751;
t2727 = -t4008 * t3586 + 0.2e1 * t3303;
t3255 = t3621 * t3637;
t3382 = t3127 * t3587;
t3750 = -(-t2844 - 0.2e1 * t3400) * t2850 + 0.2e1 * t3255;
t3755 = 0.2e1 * t2576 * t3790 + t4003 * t3652 + ((-0.2e1 * t2865 * t3562 - 0.4e1 * t3240) * t3105 - 0.4e1 * t3255) * t3091 - t2727 * t3382 * t4012 + t3750;
t3739 = t2852 - t2798;
t3738 = t2854 - t2800;
t3737 = t2856 - t2802;
t3726 = t2807 * t4025;
t3725 = t2808 * t4024;
t3724 = t2809 * t4023;
t3723 = 0.2e1 * t3953;
t3722 = -0.2e1 * t3951;
t3721 = 0.2e1 * t3947;
t3720 = -0.2e1 * t3945;
t3719 = 0.2e1 * t3941;
t3718 = -0.2e1 * t3939;
t3689 = pkin(5) * t3854;
t2573 = t2584 + 0.2e1 * t2597;
t3664 = t2573 * t3895;
t2575 = t2582 + 0.2e1 * t2598;
t3663 = t2575 * t3887;
t2577 = t2583 + 0.2e1 * t2599;
t3662 = t2577 * t3879;
t2579 = t2600 * t3820 + t2585;
t3661 = t2579 * t3907;
t2580 = t2601 * t3818 + t2586;
t3660 = t2580 * t3905;
t2581 = t2602 * t3816 + t2587;
t3659 = t2581 * t3903;
t3655 = t2600 * t3875;
t3653 = t2601 * t3874;
t3651 = t2602 * t3873;
t2738 = t4022 - t2799;
t3649 = t2738 * t3951;
t2741 = t4021 - t2801;
t3648 = t2741 * t3945;
t2744 = t4020 - t2803;
t3647 = t2744 * t3939;
t2834 = t4034 * t2957 + t2960 * t4062 - t3550 * t3065;
t3616 = t2834 * t3898;
t2835 = t4033 * t2958 + t2961 * t4063 - t3549 * t3066;
t3615 = t2835 * t3890;
t2836 = t4032 * t2959 + t2962 * t4064 - t3548 * t3067;
t3614 = t2836 * t3882;
t2837 = -t2957 * t4062 + t4034 * t2960 + t3553 * t3065;
t3613 = t2837 * t3898;
t2838 = -t2958 * t4063 + t4033 * t2961 + t3552 * t3066;
t3612 = t2838 * t3890;
t2839 = -t2959 * t4064 + t4032 * t2962 + t3551 * t3067;
t3611 = t2839 * t3882;
t3610 = t2858 * t3908;
t3609 = t2859 * t3906;
t3608 = t2860 * t3904;
t3450 = t2957 * t3694;
t2861 = (t3450 * t4029 + t3315) * t3089 + ((t2951 * t3050 + t3047 * t3222) * t3989 - t3809 * t4052) * t3125 + (t2942 * t3050 + t3047 * t3204 - t3450) * pkin(6);
t3607 = t2861 * t3908;
t3449 = t2958 * t3693;
t2862 = (t3449 * t4029 + t3314) * t3095 + ((t2952 * t3051 + t3048 * t3221) * t3987 - t3807 * t4051) * t3128 + (t2943 * t3051 + t3048 * t3203 - t3449) * pkin(6);
t3606 = t2862 * t3906;
t3448 = t2959 * t3692;
t2863 = (t3448 * t4029 + t3313) * t3101 + ((t2953 * t3052 + t3049 * t3220) * t3985 - t3805 * t4050) * t3131 + (t2944 * t3052 + t3049 * t3202 - t3448) * pkin(6);
t3605 = t2863 * t3904;
t2908 = t2906 * t2907;
t3604 = t2908 * t3931;
t3603 = t2864 * t3809;
t3602 = t2864 * t3803;
t2911 = t2909 * t2910;
t3601 = t2911 * t3929;
t3600 = t2865 * t3807;
t3599 = t2865 * t3801;
t2914 = t2912 * t2913;
t3598 = t2914 * t3927;
t3597 = t2866 * t3805;
t3596 = t2866 * t3799;
t3591 = t2867 * t3893;
t3585 = t2868 * t3885;
t3579 = t2869 * t3877;
t3577 = t2870 * t3894;
t3576 = t2871 * t3886;
t3575 = t2872 * t3878;
t3574 = t2873 * t3894;
t3573 = t2874 * t3886;
t3572 = t2875 * t3878;
t3571 = t2876 * t3901;
t3570 = t2877 * t3900;
t3569 = t2878 * t3902;
t3568 = t2879 * t3901;
t3567 = t2880 * t3900;
t3566 = t2881 * t3902;
t3565 = t2906 * t3875;
t3563 = t2909 * t3874;
t3561 = t2912 * t3873;
t3559 = t3125 * t3875;
t3558 = t3128 * t3874;
t3557 = t3131 * t3873;
t3528 = t3086 * t3793;
t3527 = t3089 * t2852;
t3526 = t3092 * t3788;
t3525 = t3095 * t2854;
t3524 = t3098 * t3783;
t3523 = t3101 * t2856;
t3490 = t3086 * t3756;
t3489 = t3092 * t3755;
t3488 = t3098 * t3757;
t3487 = t3116 * t3729;
t3486 = t3119 * t3728;
t3485 = t3122 * t3727;
t3484 = t2870 * t3722;
t3483 = t2873 * t3722;
t3482 = t2871 * t3720;
t3481 = t2874 * t3720;
t3480 = t2872 * t3718;
t3479 = t2875 * t3718;
t3478 = 0.2e1 * t3527;
t3477 = 0.2e1 * t3525;
t3476 = 0.2e1 * t3523;
t2561 = t2574 * t3115 + t2600 * t3515;
t3471 = t2561 * t3115 - t3751 * t3795 - (t2726 * t3085 - t3306) * t3593;
t2562 = t2576 * t3118 + t2601 * t3513;
t3470 = t2562 * t3118 - t3750 * t3790 - (t2727 * t3091 - t3303) * t3587;
t2563 = t2578 * t3121 + t2602 * t3511;
t3469 = t2563 * t3121 - t3749 * t3785 - (t2728 * t3097 - t3300) * t3581;
t2846 = -0.2e1 * t3527;
t2831 = -t2852 + t3478;
t3165 = t2831 * t3080 + t2693 + t2852;
t3393 = t2907 * t3603;
t3297 = t3104 * t3393;
t3468 = ((t2846 + t3165) * t3115 - t3124 * t3297) * t3086 - t2579;
t2847 = -0.2e1 * t3525;
t2832 = -t2854 + t3477;
t3164 = t2832 * t3080 + t2694 + t2854;
t3392 = t2910 * t3600;
t3294 = t3104 * t3392;
t3467 = ((t2847 + t3164) * t3118 - t3127 * t3294) * t3092 - t2580;
t2848 = -0.2e1 * t3523;
t2833 = -t2856 + t3476;
t3163 = t2833 * t3080 + t2695 + t2856;
t3391 = t2913 * t3597;
t3291 = t3104 * t3391;
t3466 = ((t2848 + t3163) * t3121 - t3130 * t3291) * t3098 - t2581;
t3429 = t3842 * t3974;
t3428 = t3836 * t3971;
t3427 = t3830 * t3968;
t3426 = t3116 * t3649;
t3425 = t3125 * t3649;
t3424 = t3119 * t3648;
t3423 = t3128 * t3648;
t3422 = t3122 * t3647;
t3421 = t3131 * t3647;
t3420 = t2867 * t3640;
t3418 = t2807 * t3565;
t3415 = t2868 * t3634;
t3413 = t2808 * t3563;
t3410 = t2869 * t3628;
t3408 = t2809 * t3561;
t3389 = t3086 * t3592;
t3384 = t3092 * t3586;
t3379 = t3098 * t3580;
t3375 = t2908 * t3528;
t3374 = t2911 * t3526;
t3373 = t2914 * t3524;
t3351 = t3717 * t3953;
t3350 = 0.2e1 * t3418;
t3349 = t3716 * t3947;
t3348 = 0.2e1 * t3413;
t3347 = t3715 * t3941;
t3346 = 0.2e1 * t3408;
t3321 = t3086 * t3471;
t3320 = t3086 * ((-t3165 + t3478) * t3124 + (-t2579 - t3297) * t3115);
t3319 = t3092 * t3470;
t3318 = t3092 * ((-t3164 + t3477) * t3127 + (-t2580 - t3294) * t3118);
t3317 = t3098 * t3469;
t3316 = t3098 * ((-t3163 + t3476) * t3130 + (-t2581 - t3291) * t3121);
t3309 = t2738 * t3418;
t3308 = t2741 * t3413;
t3307 = t2744 * t3408;
t3296 = t3604 * t3842;
t3295 = t2864 * t3375;
t3293 = t3601 * t3836;
t3292 = t2865 * t3374;
t3290 = t3598 * t3830;
t3289 = t2866 * t3373;
t3288 = t2888 * t3389;
t3287 = t2890 * t3384;
t3286 = t2892 * t3379;
t3285 = t2740 * t3388;
t3284 = t2743 * t3383;
t3283 = t2746 * t3378;
t3258 = t2888 * t3591 * t3949;
t3256 = t2890 * t3585 * t3943;
t3254 = t2892 * t3579 * t3937;
t3249 = t2858 * t3288;
t3248 = t2859 * t3287;
t3247 = t2860 * t3286;
t3246 = t2861 * t3288;
t3245 = t2862 * t3287;
t3244 = t2863 * t3286;
t3243 = t3389 * t3917;
t3241 = t3384 * t3915;
t3239 = t3379 * t3913;
t3237 = -t2600 * (pkin(1) * t3821 + t2973 * t3115) + t2852 * (t2963 * t3115 + t3124 * t3689);
t3006 = t4008 * pkin(5);
t3236 = t2600 * ((pkin(1) * t3115 - pkin(5) * t3781) * t3104 - t3441) + t2852 * (t2963 * t3124 - t3006 * t3115);
t3235 = t2907 * t3931 + t3974;
t3234 = -t2601 * (pkin(1) * t3819 + t2974 * t3118) + t2854 * (t2964 * t3118 + t3127 * t3689);
t3233 = t2601 * ((pkin(1) * t3118 - pkin(5) * t3779) * t3104 - t3440) + t2854 * (t2964 * t3127 - t3006 * t3118);
t3232 = t2910 * t3929 + t3971;
t3231 = -t2602 * (pkin(1) * t3817 + t2972 * t3121) + t2856 * (t2965 * t3121 + t3130 * t3689);
t3230 = t2602 * ((pkin(1) * t3121 - pkin(5) * t3777) * t3104 - t3439) + t2856 * (t2965 * t3130 - t3006 * t3121);
t3229 = t2913 * t3927 - t3968;
t3210 = t2906 * t3973 - t2908 * t3932;
t3209 = -t2906 * t3974 - t3604;
t3208 = t2909 * t3970 - t2911 * t3930;
t3207 = -t2909 * t3971 - t3601;
t3206 = t2912 * t3967 - t2914 * t3928;
t3205 = t2912 * t3968 - t3598;
t3201 = t3086 * t3237;
t3200 = t3086 * t3236;
t3199 = t3092 * t3234;
t3198 = t3092 * t3233;
t3197 = t3098 * t3231;
t3196 = t3098 * t3230;
t3192 = -t2600 * t3895 + t2908 * t3602;
t3191 = -t2600 * t3894 - t2908 * t3603;
t3190 = -t2601 * t3887 + t2911 * t3599;
t3189 = -t2601 * t3886 - t2911 * t3600;
t3188 = -t2602 * t3879 + t2914 * t3596;
t3187 = -t2602 * t3878 - t2914 * t3597;
t3180 = t3235 * t3911;
t3179 = t3232 * t3910;
t3178 = t3229 * t3909;
t3174 = -t2906 * t3487 - t2908 * t3351;
t3081 = t3116 ^ 2;
t3173 = -t2600 * t2906 * t3081 - t3375 * t3723;
t3172 = -t2909 * t3486 - t2911 * t3349;
t3082 = t3119 ^ 2;
t3171 = -t2601 * t2909 * t3082 - t3374 * t3721;
t3170 = -t2912 * t3485 - t2914 * t3347;
t3083 = t3122 ^ 2;
t3169 = -t2602 * t2912 * t3083 - t3373 * t3719;
t2745 = -t2851 - 0.2e1 * t2803;
t2742 = -t2850 - 0.2e1 * t2801;
t2739 = -t2849 - 0.2e1 * t2799;
t2734 = t2761 - t2855;
t2733 = t2760 - t2857;
t2732 = t2759 - t2853;
t2722 = t2745 * t3121 - t3104 * t3377;
t2721 = t2742 * t3118 - t3104 * t3382;
t2720 = t2739 * t3115 - t3104 * t3387;
t2719 = t2745 * t3130 + t3121 * t3378;
t2718 = t2742 * t3127 + t3118 * t3383;
t2717 = t2739 * t3124 + t3115 * t3388;
t2689 = t2733 * t3067 + t2737 * t3683;
t2688 = t2734 * t3066 + t2736 * t3684;
t2687 = t2732 * t3065 + t2735 * t3685;
t2686 = t2733 * t3994 - t2737 * t3686;
t2685 = t2734 * t3995 - t2736 * t3687;
t2684 = t2732 * t3996 - t2735 * t3688;
t2644 = ((t2866 * t3463 - 0.2e1 * t3410) * t2913 + t3737) * t3785 + t4000 * t3283;
t2643 = ((t2865 * t3464 - 0.2e1 * t3415) * t2910 + t3738) * t3790 + t4003 * t3284;
t2642 = ((t2864 * t3465 - 0.2e1 * t3420) * t2907 + t3739) * t3795 + t4006 * t3285;
t2638 = (-0.2e1 * t2802 + t2848 + 0.2e1 * t2856) * t3097 - 0.4e1 * t3283 * t3785 + (-t3999 * t3410 + (t4000 * t3855 + t3101) * t2866) * t2913 - t3737;
t2637 = (-0.2e1 * t2800 + t2847 + 0.2e1 * t2854) * t3091 - 0.4e1 * t3284 * t3790 + (-t4002 * t3415 + (t4003 * t3856 + t3095) * t2865) * t2910 - t3738;
t2636 = (-0.2e1 * t2798 + t2846 + 0.2e1 * t2852) * t3085 - 0.4e1 * t3285 * t3795 + (-t4005 * t3420 + (t4006 * t3857 + t3089) * t2864) * t2907 - t3739;
t2572 = t3811 / 0.2e1 + t2600;
t2571 = t3812 / 0.2e1 + t2602;
t2570 = t3813 / 0.2e1 + t2601;
t2560 = t2578 * t3130 - t2602 * t3512;
t2559 = t2576 * t3127 - t2601 * t3514;
t2558 = t2574 * t3124 - t2600 * t3516;
t2545 = -0.2e1 * pkin(5) * t3665 + 0.2e1 * t2571 * t3994;
t2544 = -0.2e1 * pkin(5) * t3667 + 0.2e1 * t2572 * t3996;
t2543 = -0.2e1 * pkin(5) * t3666 + 0.2e1 * t2570 * t3995;
t2542 = -0.2e1 * t2568 * t3684 - 0.2e1 * t2570 * t3066;
t2541 = -0.2e1 * t2569 * t3683 - 0.2e1 * t2571 * t3067;
t2540 = -0.2e1 * t2567 * t3685 - 0.2e1 * t2572 * t3065;
t1 = [-t2600 * t3920 - t2601 * t3919 - t2602 * t3918, 0, 0, (t2837 * t3295 + t2838 * t3292 + t2839 * t3289 + t2873 * t3173 + t2874 * t3171 + t2875 * t3169) * t3078, (t2831 * t3613 + t2832 * t3612 + t2833 * t3611 + t2873 * t3174 + t2874 * t3172 + t2875 * t3170) * t3078, (-t2873 * t3664 - t2874 * t3663 - t2875 * t3662 + (t2839 * t3188 + t2875 * t3421) * t3098 + (t2838 * t3190 + t2874 * t3423) * t3092 + (t2837 * t3192 + t2873 * t3425) * t3086) * t3104, (-t2573 * t3574 - t2575 * t3573 - t2577 * t3572 + (t2839 * t3187 - t2875 * t3422) * t3098 + (t2838 * t3189 - t2874 * t3424) * t3092 + (t2837 * t3191 - t2873 * t3426) * t3086) * t3104, -t2574 * t3613 - t2576 * t3612 - t2578 * t3611 + (-t2574 * t3920 - t2576 * t3919 - t2578 * t3918) * t3105, -t2543 * t3919 - t2544 * t3920 - t2545 * t3918 + (t2689 * t3479 + t2839 * t3205) * t3098 + (t2688 * t3481 + t2838 * t3207) * t3092 + (t2687 * t3483 + t2837 * t3209) * t3086, -t2540 * t3920 - t2541 * t3918 - t2542 * t3919 + (t2686 * t3479 + t2839 * t3206) * t3098 + (t2685 * t3481 + t2838 * t3208) * t3092 + (t2684 * t3483 + t2837 * t3210) * t3086, (t2642 * t3610 + t2643 * t3609 + t2644 * t3608) * t3814 - (t2839 * t3317 + t2875 * t3764) * t2912 - (t2838 * t3319 + t2874 * t3765) * t2909 - (t2837 * t3321 + t2873 * t3766) * t2906, (t2636 * t3610 + t2637 * t3609 + t2638 * t3608) * t3814 - (t2839 * t3488 + t2875 * t3768) * t2912 - (t2838 * t3489 + t2874 * t3769) * t2909 - (t2837 * t3490 + t2873 * t3767) * t2906, -(t2839 * t3316 + t2875 * t3758) * t2912 - (t2838 * t3318 + t2874 * t3759) * t2909 - (t2837 * t3320 + t2873 * t3760) * t2906 + ((t2561 * t3610 + t2562 * t3609 + t2563 * t3608) * t3104 + (-t2717 * t3249 - t2718 * t3248 - t2719 * t3247) * t3078) * t3146, -(t2839 * t3466 + t2875 * t3761) * t2912 - (t2838 * t3467 + t2874 * t3762) * t2909 - (t2837 * t3468 + t2873 * t3763) * t2906 + ((t2558 * t3610 + t2559 * t3609 + t2560 * t3608) * t3104 + (t2720 * t3249 + t2721 * t3248 + t2722 * t3247) * t3078) * t3146, (t2858 * t3258 + t2859 * t3256 + t2860 * t3254) * t3850 + (-t2579 * t3574 - t2580 * t3573 - t2581 * t3572 + (-t2860 * t3659 + (t2839 * t3954 + t2875 * t3724) * t3876) * t3098 + (-t2859 * t3660 + (t2838 * t3955 + t2874 * t3725) * t3884) * t3092 + (-t2858 * t3661 + (t2837 * t3956 + t2873 * t3726) * t3892) * t3086) * t3104, -t2837 * t3604 - t2838 * t3601 - t2839 * t3598 - (-t2839 * t3968 + t2875 * t3770) * t2912 - (t2838 * t3971 + t2874 * t3772) * t2909 - (t2837 * t3974 + t2873 * t3774) * t2906 + (t3197 * t3933 + t3199 * t3934 + t3201 * t3935) * t3814, t2837 * t3296 + t2838 * t3293 + t2839 * t3290 - (t2839 * t3427 + t2875 * t3771) * t2912 - (-t2838 * t3428 + t2874 * t3773) * t2909 - (-t2837 * t3429 + t2873 * t3775) * t2906 + (t3196 * t3933 + t3198 * t3934 + t3200 * t3935) * t3814, 0; -t2600 * t3923 - t2601 * t3922 - t2602 * t3921, 0, 0, (t2834 * t3295 + t2835 * t3292 + t2836 * t3289 + t2870 * t3173 + t2871 * t3171 + t2872 * t3169) * t3078, (t2831 * t3616 + t2832 * t3615 + t2833 * t3614 + t2870 * t3174 + t2871 * t3172 + t2872 * t3170) * t3078, (-t2870 * t3664 - t2871 * t3663 - t2872 * t3662 + (t2836 * t3188 + t2872 * t3421) * t3098 + (t2835 * t3190 + t2871 * t3423) * t3092 + (t2834 * t3192 + t2870 * t3425) * t3086) * t3104, (-t2573 * t3577 - t2575 * t3576 - t2577 * t3575 + (t2836 * t3187 - t2872 * t3422) * t3098 + (t2835 * t3189 - t2871 * t3424) * t3092 + (t2834 * t3191 - t2870 * t3426) * t3086) * t3104, -t2574 * t3616 - t2576 * t3615 - t2578 * t3614 + (-t2574 * t3923 - t2576 * t3922 - t2578 * t3921) * t3105, -t2543 * t3922 - t2544 * t3923 - t2545 * t3921 + (t2689 * t3480 + t2836 * t3205) * t3098 + (t2688 * t3482 + t2835 * t3207) * t3092 + (t2687 * t3484 + t2834 * t3209) * t3086, -t2540 * t3923 - t2541 * t3921 - t2542 * t3922 + (t2686 * t3480 + t2836 * t3206) * t3098 + (t2685 * t3482 + t2835 * t3208) * t3092 + (t2684 * t3484 + t2834 * t3210) * t3086, (-t2642 * t3607 - t2643 * t3606 - t2644 * t3605) * t3814 - (t2836 * t3317 + t2872 * t3764) * t2912 - (t2835 * t3319 + t2871 * t3765) * t2909 - (t2834 * t3321 + t2870 * t3766) * t2906, (-t2636 * t3607 - t2637 * t3606 - t2638 * t3605) * t3814 - (t2836 * t3488 + t2872 * t3768) * t2912 - (t2835 * t3489 + t2871 * t3769) * t2909 - (t2834 * t3490 + t2870 * t3767) * t2906, -(t2836 * t3316 + t2872 * t3758) * t2912 - (t2835 * t3318 + t2871 * t3759) * t2909 - (t2834 * t3320 + t2870 * t3760) * t2906 + ((-t2561 * t3607 - t2562 * t3606 - t2563 * t3605) * t3104 + (t2717 * t3246 + t2718 * t3245 + t2719 * t3244) * t3078) * t3146, -(t2836 * t3466 + t2872 * t3761) * t2912 - (t2835 * t3467 + t2871 * t3762) * t2909 - (t2834 * t3468 + t2870 * t3763) * t2906 + ((-t2558 * t3607 - t2559 * t3606 - t2560 * t3605) * t3104 + (-t2720 * t3246 - t2721 * t3245 - t2722 * t3244) * t3078) * t3146, (-t2861 * t3258 - t2862 * t3256 - t2863 * t3254) * t3850 + (-t2579 * t3577 - t2580 * t3576 - t2581 * t3575 + (t2863 * t3659 + (t2836 * t3954 + t2872 * t3724) * t3876) * t3098 + (t2862 * t3660 + (t2835 * t3955 + t2871 * t3725) * t3884) * t3092 + (t2861 * t3661 + (t2834 * t3956 + t2870 * t3726) * t3892) * t3086) * t3104, -t2834 * t3604 - t2835 * t3601 - t2836 * t3598 - (-t2836 * t3968 + t2872 * t3770) * t2912 - (t2835 * t3971 + t2871 * t3772) * t2909 - (t2834 * t3974 + t2870 * t3774) * t2906 + (-t3231 * t3605 - t3234 * t3606 - t3237 * t3607) * t3814, t2834 * t3296 + t2835 * t3293 + t2836 * t3290 - (t2836 * t3427 + t2872 * t3771) * t2912 - (-t2835 * t3428 + t2871 * t3773) * t2909 - (-t2834 * t3429 + t2870 * t3775) * t2906 + (-t3230 * t3605 - t3233 * t3606 - t3236 * t3607) * t3814, 0; t3651 + t3653 + t3655, 0, 0, (t3081 * t3655 + t3082 * t3653 + t3083 * t3651 + (-t2866 * t3909 + t3719 * t3873) * t2913 * t3524 + (-t2865 * t3910 + t3721 * t3874) * t2910 * t3526 + (-t2864 * t3911 + t3723 * t3875) * t2907 * t3528) * t3078, (-t2831 * t3568 - t2832 * t3567 - t2833 * t3566 + (t2913 * t3347 + t3485) * t3873 + (t2910 * t3349 + t3486) * t3874 + (t2907 * t3351 + t3487) * t3875) * t3078, (t3116 * t2573 * t3875 + t3119 * t2575 * t3874 + t3122 * t2577 * t3873 + (-t3131 * t3307 + (t2602 * t3122 - t2913 * t3596) * t3909) * t3098 + (-t3128 * t3308 + (t2601 * t3119 - t2910 * t3599) * t3910) * t3092 + (-t3125 * t3309 + (t2600 * t3116 - t2907 * t3602) * t3911) * t3086) * t3104, (t2573 * t3559 + t2575 * t3558 + t2577 * t3557 + (t3122 * t3307 + (t3391 + t3966) * t3909) * t3098 + (t3119 * t3308 + (t3392 + t3969) * t3910) * t3092 + (t3116 * t3309 + (t3393 + t3972) * t3911) * t3086) * t3104, t2574 * t3568 + t2576 * t3567 + t2578 * t3566 + (t2574 * t3875 + t2576 * t3874 + t2578 * t3873) * t3105, t2543 * t3874 + t2544 * t3875 + t2545 * t3873 + (t2689 * t3346 + t3178) * t3098 + (t2688 * t3348 + t3179) * t3092 + (t2687 * t3350 + t3180) * t3086, t2540 * t3875 + t2541 * t3873 + t2542 * t3874 + (t2686 * t3346 + (t2913 * t3928 - t3967) * t3909) * t3098 + (t2685 * t3348 + (t2910 * t3930 - t3970) * t3910) * t3092 + (t2684 * t3350 + (t2907 * t3932 - t3973) * t3911) * t3086, t3764 * t3873 + t3765 * t3874 + t3766 * t3875 + (t2643 * t3914 + t2880 * t3470) * t3900 + (t2642 * t3916 + t2879 * t3471) * t3901 + (t2644 * t3912 + t2881 * t3469) * t3902, t3768 * t3873 + t3769 * t3874 + t3767 * t3875 + (t2637 * t3914 + t2880 * t3755) * t3900 + (t2636 * t3916 + t2879 * t3756) * t3901 + (t2638 * t3912 + t2881 * t3757) * t3902, t3758 * t3873 + t3759 * t3874 + t3760 * t3875 + t3316 * t3909 + t3318 * t3910 + t3320 * t3911 + (t2561 * t3571 + t2562 * t3570 + t2563 * t3569 + (-t2717 * t3243 - t2718 * t3241 - t2719 * t3239) * t3104) * t3146, t3761 * t3873 + t3762 * t3874 + t3763 * t3875 + t3466 * t3909 + t3467 * t3910 + t3468 * t3911 + (t2558 * t3571 + t2559 * t3570 + t2560 * t3569 + (t2720 * t3243 + t2721 * t3241 + t2722 * t3239) * t3104) * t3146, (-t2579 * t3571 - t2580 * t3570 - t2581 * t3569) * t3146 + (t2579 * t3559 + t2580 * t3558 + t2581 * t3557 + (-t2755 * t3566 * t2857 + (-t3098 * t3561 * t4023 + t3579 * t3912 * t4028) * t2809) * t3122 + (-t2753 * t3567 * t2855 + (-t3092 * t3563 * t4024 + t3585 * t3914 * t4026) * t2808) * t3119 + (-t2751 * t3568 * t2853 + (-t3086 * t3565 * t4025 + t3591 * t3916 * t4027) * t2807) * t3116) * t3104, t3770 * t3873 + t3772 * t3874 + t3774 * t3875 + t3178 + t3179 + t3180 + (t3197 * t3913 + t3199 * t3915 + t3201 * t3917) * t3146, t3771 * t3873 + t3773 * t3874 + t3775 * t3875 - t3229 * t3121 * t3566 - t3232 * t3118 * t3567 - t3235 * t3115 * t3568 + (t3196 * t3913 + t3198 * t3915 + t3200 * t3917) * t3146, 0;];
tau_reg  = t1;
