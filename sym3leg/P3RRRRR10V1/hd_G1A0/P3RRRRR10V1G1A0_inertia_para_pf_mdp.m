% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:09
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR10V1G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:02:01
% EndTime: 2020-08-06 22:03:20
% DurationCPUTime: 82.78s
% Computational Cost: add. (59412->1291), mult. (162927->2285), div. (4986->16), fcn. (150633->26), ass. (0->861)
t6455 = cos(pkin(3));
t6441 = t6455 ^ 2;
t6974 = pkin(6) * t6441;
t6459 = sin(qJ(3,3));
t6983 = pkin(2) * t6459;
t6414 = pkin(1) * t6983;
t6460 = sin(qJ(2,3));
t6428 = t6460 * pkin(6);
t6454 = sin(pkin(3));
t6468 = cos(qJ(3,3));
t6469 = cos(qJ(2,3));
t6868 = t6468 * t6469;
t6880 = t6460 * t6468;
t6390 = pkin(2) * t6880 - t6469 * pkin(6);
t6924 = t6390 * t6455;
t6345 = pkin(1) * t6924 + (-t6414 + (pkin(2) * t6868 + t6428) * pkin(5)) * t6454;
t6331 = 0.1e1 / t6345 ^ 2;
t6330 = 0.1e1 / t6345;
t6462 = sin(qJ(3,2));
t6982 = pkin(2) * t6462;
t6415 = pkin(1) * t6982;
t6463 = sin(qJ(2,2));
t6429 = t6463 * pkin(6);
t6471 = cos(qJ(3,2));
t6472 = cos(qJ(2,2));
t6867 = t6471 * t6472;
t6875 = t6463 * t6471;
t6391 = pkin(2) * t6875 - t6472 * pkin(6);
t6923 = t6391 * t6455;
t6346 = pkin(1) * t6923 + (-t6415 + (pkin(2) * t6867 + t6429) * pkin(5)) * t6454;
t6333 = 0.1e1 / t6346 ^ 2;
t6332 = 0.1e1 / t6346;
t6465 = sin(qJ(3,1));
t6981 = pkin(2) * t6465;
t6416 = pkin(1) * t6981;
t6466 = sin(qJ(2,1));
t6430 = t6466 * pkin(6);
t6474 = cos(qJ(3,1));
t6475 = cos(qJ(2,1));
t6866 = t6474 * t6475;
t6870 = t6466 * t6474;
t6392 = pkin(2) * t6870 - t6475 * pkin(6);
t6922 = t6392 * t6455;
t6347 = pkin(1) * t6922 + (-t6416 + (pkin(2) * t6866 + t6430) * pkin(5)) * t6454;
t6335 = 0.1e1 / t6347 ^ 2;
t6334 = 0.1e1 / t6347;
t6906 = t6454 * t6455;
t6451 = t6474 ^ 2;
t6702 = t6454 * t6870;
t6615 = t6465 * t6702;
t6901 = t6454 * t6465;
t6975 = pkin(2) * t6475;
t7020 = t6430 + pkin(1);
t7028 = (t6451 * t6975 + t6474 * t7020) * t6455 - t6615 * t6975 + pkin(6) * (t6475 + 0.1e1) * (t6475 - 0.1e1) * t6901;
t6448 = t6471 ^ 2;
t6704 = t6454 * t6875;
t6616 = t6462 * t6704;
t6903 = t6454 * t6462;
t6977 = pkin(2) * t6472;
t7021 = t6429 + pkin(1);
t7027 = (t6448 * t6977 + t6471 * t7021) * t6455 - t6616 * t6977 + pkin(6) * (t6472 + 0.1e1) * (t6472 - 0.1e1) * t6903;
t6445 = t6468 ^ 2;
t6706 = t6454 * t6880;
t6617 = t6459 * t6706;
t6905 = t6454 * t6459;
t6979 = pkin(2) * t6469;
t7022 = t6428 + pkin(1);
t7026 = (t6445 * t6979 + t6468 * t7022) * t6455 - t6617 * t6979 + pkin(6) * (t6469 + 0.1e1) * (t6469 - 0.1e1) * t6905;
t7025 = 0.2e1 * pkin(5);
t7024 = -0.2e1 * pkin(6);
t7023 = 0.2e1 * pkin(6);
t6992 = pkin(1) * t6460;
t6991 = pkin(1) * t6463;
t6990 = pkin(1) * t6466;
t6456 = legFrame(3,3);
t6420 = sin(t6456);
t6423 = cos(t6456);
t6461 = sin(qJ(1,3));
t6470 = cos(qJ(1,3));
t6372 = t6420 * t6461 - t6423 * t6470;
t6375 = t6420 * t6470 + t6423 * t6461;
t6726 = t6372 * t6905;
t6306 = -t6375 * t6428 + t6372 * t6924 + (-t6375 * t6868 - t6726) * pkin(2);
t6723 = t6375 * t6905;
t6309 = t6372 * t6428 + t6375 * t6924 + (t6372 * t6868 - t6723) * pkin(2);
t7019 = t6306 * t6309;
t6457 = legFrame(2,3);
t6421 = sin(t6457);
t6424 = cos(t6457);
t6464 = sin(qJ(1,2));
t6473 = cos(qJ(1,2));
t6373 = t6421 * t6464 - t6424 * t6473;
t6376 = t6421 * t6473 + t6424 * t6464;
t6725 = t6373 * t6903;
t6307 = -t6376 * t6429 + t6373 * t6923 + (-t6376 * t6867 - t6725) * pkin(2);
t6722 = t6376 * t6903;
t6310 = t6373 * t6429 + t6376 * t6923 + (t6373 * t6867 - t6722) * pkin(2);
t7018 = t6307 * t6310;
t6458 = legFrame(1,3);
t6422 = sin(t6458);
t6425 = cos(t6458);
t6467 = sin(qJ(1,1));
t6476 = cos(qJ(1,1));
t6374 = t6422 * t6467 - t6425 * t6476;
t6377 = t6422 * t6476 + t6425 * t6467;
t6724 = t6374 * t6901;
t6308 = -t6377 * t6430 + t6374 * t6922 + (-t6377 * t6866 - t6724) * pkin(2);
t6721 = t6377 * t6901;
t6311 = t6374 * t6430 + t6377 * t6922 + (t6374 * t6866 - t6721) * pkin(2);
t7017 = t6308 * t6311;
t6950 = t6330 * t6455;
t6943 = t6332 * t6455;
t6936 = t6334 * t6455;
t6446 = 0.1e1 / t6468;
t7016 = t6446 * t6454;
t6449 = 0.1e1 / t6471;
t7015 = t6449 * t6454;
t6452 = 0.1e1 / t6474;
t7014 = t6452 * t6454;
t6477 = pkin(6) ^ 2;
t6478 = pkin(2) ^ 2;
t6684 = t6451 * t6478 - t6477;
t7013 = t6684 * t6374;
t6685 = t6448 * t6478 - t6477;
t7012 = t6685 * t6373;
t6686 = t6445 * t6478 - t6477;
t7011 = t6686 * t6372;
t6447 = t6469 ^ 2;
t6417 = t6447 - 0.2e1;
t6396 = t6417 * t6983 - pkin(5);
t6401 = pkin(5) * t6459 + pkin(2);
t6986 = pkin(2) * t6445;
t6692 = t6401 - 0.2e1 * t6986;
t6881 = t6459 * t6469;
t6820 = pkin(6) * t6881;
t7004 = t6868 * t6974 - t6396 * t6468 * t6906 + (t6692 * t6441 - t6820 * t6906 - t6401 + t6986) * t6460;
t6450 = t6472 ^ 2;
t6418 = t6450 - 0.2e1;
t6397 = t6418 * t6982 - pkin(5);
t6404 = pkin(5) * t6462 + pkin(2);
t6985 = pkin(2) * t6448;
t6691 = t6404 - 0.2e1 * t6985;
t6876 = t6462 * t6472;
t6819 = pkin(6) * t6876;
t7003 = t6867 * t6974 - t6397 * t6471 * t6906 + (t6691 * t6441 - t6819 * t6906 - t6404 + t6985) * t6463;
t6453 = t6475 ^ 2;
t6419 = t6453 - 0.2e1;
t6398 = t6419 * t6981 - pkin(5);
t6407 = pkin(5) * t6465 + pkin(2);
t6984 = pkin(2) * t6451;
t6690 = t6407 - 0.2e1 * t6984;
t6871 = t6465 * t6475;
t6818 = pkin(6) * t6871;
t7002 = t6866 * t6974 - t6398 * t6474 * t6906 + (t6690 * t6441 - t6818 * t6906 - t6407 + t6984) * t6466;
t7001 = 0.2e1 * pkin(1);
t7000 = (t6441 - 0.1e1) * t7023;
t6999 = 0.2e1 * t6441;
t6998 = t6999 - 0.2e1;
t6997 = 0.2e1 * t6445 - 0.1e1;
t6996 = 0.2e1 * t6448 - 0.1e1;
t6995 = 0.2e1 * t6451 - 0.1e1;
t6994 = pkin(1) * t6454;
t6993 = pkin(1) * t6455;
t6989 = pkin(1) * t6469;
t6988 = pkin(1) * t6472;
t6987 = pkin(1) * t6475;
t6980 = pkin(2) * t6468;
t6978 = pkin(2) * t6471;
t6976 = pkin(2) * t6474;
t6440 = t6454 ^ 2;
t6970 = MDP(4) * t6440;
t6969 = MDP(6) * t6454;
t6968 = MDP(7) * t6454;
t6967 = MDP(15) * t6454;
t6291 = t6306 * t6330;
t6292 = t6307 * t6332;
t6293 = t6308 * t6334;
t6294 = t6309 * t6330;
t6295 = t6310 * t6332;
t6296 = t6311 * t6334;
t6402 = pkin(5) + t6983;
t6410 = pkin(6) + t6992;
t6888 = t6455 * t6469;
t6710 = t6454 * t6888;
t6714 = (t6455 + 0.1e1) * (t6455 - 0.1e1) * t6478;
t6879 = t6460 * t6469;
t6894 = t6455 * t6460;
t6921 = t6402 * t6454;
t6312 = -t6445 * t6714 * t6879 + (t6402 * t6710 + t6447 * t7000 + t6410 - t6974) * t6980 - ((-t6441 * t6428 + t7022) * t6469 - t6894 * t6921) * pkin(6);
t6479 = 0.1e1 / pkin(2);
t6966 = t6312 * t6479;
t6405 = pkin(5) + t6982;
t6411 = pkin(6) + t6991;
t6886 = t6455 * t6472;
t6709 = t6454 * t6886;
t6874 = t6463 * t6472;
t6892 = t6455 * t6463;
t6920 = t6405 * t6454;
t6313 = -t6448 * t6714 * t6874 + (t6405 * t6709 + t6450 * t7000 + t6411 - t6974) * t6978 - ((-t6441 * t6429 + t7021) * t6472 - t6892 * t6920) * pkin(6);
t6965 = t6313 * t6479;
t6408 = pkin(5) + t6981;
t6412 = pkin(6) + t6990;
t6884 = t6455 * t6475;
t6708 = t6454 * t6884;
t6869 = t6466 * t6475;
t6890 = t6455 * t6466;
t6919 = t6408 * t6454;
t6314 = -t6451 * t6714 * t6869 + (t6408 * t6708 + t6453 * t7000 + t6412 - t6974) * t6976 - ((-t6441 * t6430 + t7020) * t6475 - t6890 * t6919) * pkin(6);
t6964 = t6314 * t6479;
t6315 = (t6396 * t6441 + pkin(6) * t6710 + (-t6447 + 0.1e1) * t6983 + pkin(5)) * t6468 - t7022 * t6881 + (t6441 * t6820 + t6692 * t6906) * t6460;
t6899 = t6454 * t6469;
t6823 = pkin(5) * t6899;
t6844 = pkin(1) * t6894;
t6388 = t6823 + t6844;
t6841 = pkin(1) * t6888;
t6909 = t6454 * (-pkin(5) * t6428 + t6414);
t6328 = 0.1e1 / (-pkin(6) * t6841 + t6388 * t6980 - t6909);
t6963 = t6315 * t6328;
t6904 = t6454 * t6460;
t6826 = pkin(5) * t6904;
t6384 = -t6826 + t6841;
t6962 = t6315 * t6384;
t6316 = (t6397 * t6441 + pkin(6) * t6709 + (-t6450 + 0.1e1) * t6982 + pkin(5)) * t6471 - t7021 * t6876 + (t6441 * t6819 + t6691 * t6906) * t6463;
t6898 = t6454 * t6472;
t6822 = pkin(5) * t6898;
t6843 = pkin(1) * t6892;
t6389 = t6822 + t6843;
t6840 = pkin(1) * t6886;
t6908 = t6454 * (-pkin(5) * t6429 + t6415);
t6329 = 0.1e1 / (-pkin(6) * t6840 + t6389 * t6978 - t6908);
t6961 = t6316 * t6329;
t6902 = t6454 * t6463;
t6825 = pkin(5) * t6902;
t6385 = -t6825 + t6840;
t6960 = t6316 * t6385;
t6317 = (t6398 * t6441 + pkin(6) * t6708 + (-t6453 + 0.1e1) * t6981 + pkin(5)) * t6474 - t7020 * t6871 + (t6441 * t6818 + t6690 * t6906) * t6466;
t6897 = t6454 * t6475;
t6821 = pkin(5) * t6897;
t6842 = pkin(1) * t6890;
t6387 = t6821 + t6842;
t6817 = pkin(1) * t6884;
t6907 = t6454 * (-pkin(5) * t6430 + t6416);
t6327 = 0.1e1 / (-pkin(6) * t6817 + t6387 * t6976 - t6907);
t6959 = t6317 * t6327;
t6900 = t6454 * t6466;
t6824 = pkin(5) * t6900;
t6386 = -t6817 + t6824;
t6958 = t6317 * t6386;
t6413 = pkin(6) * t6993;
t6674 = t6468 * t6844;
t6865 = pkin(2) * pkin(5) * t6454;
t6324 = 0.1e1 / ((-t6468 * t6865 + t6413) * t6469 - pkin(2) * t6674 + t6909);
t6957 = t6324 * t6446;
t6673 = t6471 * t6843;
t6325 = 0.1e1 / ((-t6471 * t6865 + t6413) * t6472 - pkin(2) * t6673 + t6908);
t6956 = t6325 * t6449;
t6672 = t6474 * t6842;
t6326 = 0.1e1 / ((-t6474 * t6865 + t6413) * t6475 - pkin(2) * t6672 + t6907);
t6955 = t6326 * t6452;
t6954 = t6327 * t6452;
t6953 = t6328 * t6446;
t6952 = t6329 * t6449;
t6951 = t6330 * t6446;
t6949 = t6330 * t6460;
t6948 = t6330 * t6469;
t6947 = t6331 * t6384;
t6442 = t6460 ^ 2;
t6946 = t6331 * t6442;
t6945 = t6331 * t6446;
t6944 = t6332 * t6449;
t6942 = t6332 * t6463;
t6941 = t6332 * t6472;
t6940 = t6333 * t6385;
t6443 = t6463 ^ 2;
t6939 = t6333 * t6443;
t6938 = t6333 * t6449;
t6937 = t6334 * t6452;
t6935 = t6334 * t6466;
t6934 = t6334 * t6475;
t6933 = t6335 * t6386;
t6444 = t6466 ^ 2;
t6932 = t6335 * t6444;
t6931 = t6335 * t6452;
t6895 = t6455 * t6459;
t6363 = pkin(2) * t6895 + t6390 * t6454;
t6930 = t6331 * t6363 ^ 2;
t6893 = t6455 * t6462;
t6364 = pkin(2) * t6893 + t6391 * t6454;
t6929 = t6333 * t6364 ^ 2;
t6891 = t6455 * t6465;
t6365 = pkin(2) * t6891 + t6392 * t6454;
t6928 = t6335 * t6365 ^ 2;
t6321 = t6363 * t6330;
t6322 = t6364 * t6332;
t6323 = t6365 * t6334;
t6918 = t6446 * t6455;
t6917 = t6446 * t6459;
t6916 = t6446 * t6479;
t6915 = t6449 * t6455;
t6914 = t6449 * t6462;
t6913 = t6449 * t6479;
t6912 = t6452 * t6455;
t6911 = t6452 * t6465;
t6910 = t6452 * t6479;
t6896 = t6454 * t6479;
t6889 = t6455 * t6468;
t6887 = t6455 * t6471;
t6885 = t6455 * t6474;
t6883 = t6459 * t6460;
t6882 = t6459 * t6468;
t6878 = t6462 * t6463;
t6877 = t6462 * t6471;
t6873 = t6465 * t6466;
t6872 = t6465 * t6474;
t6864 = 0.2e1 * MDP(5) * t6440;
t6863 = -0.2e1 * t6291;
t6862 = -0.2e1 * t6292;
t6861 = -0.2e1 * t6293;
t6860 = -0.2e1 * t6294;
t6859 = -0.2e1 * t6295;
t6858 = -0.2e1 * t6296;
t6857 = t6330 * t6999;
t6856 = t6332 * t6999;
t6855 = t6334 * t6999;
t6854 = 0.2e1 * t6321;
t6853 = 0.2e1 * t6322;
t6852 = 0.2e1 * t6323;
t6851 = -0.2e1 * t6906;
t6850 = 0.2e1 * t6882;
t6849 = 0.2e1 * t6877;
t6848 = 0.2e1 * t6872;
t6847 = t6446 * t6989;
t6846 = t6449 * t6988;
t6845 = t6452 * t6987;
t6839 = t6479 * t6993;
t6835 = pkin(2) * t6889;
t6834 = pkin(2) * t6887;
t6833 = pkin(2) * t6885;
t6829 = pkin(5) * t6949;
t6828 = pkin(5) * t6942;
t6827 = pkin(5) * t6935;
t6243 = t7004 * t6372 + t7026 * t6375 - t6723 * t6992;
t6231 = t6243 * t6951;
t6813 = t6243 * t6947;
t6812 = t6243 * t6945;
t6811 = t6243 * t6917;
t6244 = t7003 * t6373 + t7027 * t6376 - t6722 * t6991;
t6232 = t6244 * t6944;
t6810 = t6244 * t6940;
t6809 = t6244 * t6938;
t6808 = t6244 * t6914;
t6245 = t7002 * t6374 + t7028 * t6377 - t6721 * t6990;
t6233 = t6245 * t6937;
t6807 = t6245 * t6933;
t6806 = t6245 * t6931;
t6805 = t6245 * t6911;
t6246 = -t7026 * t6372 + t7004 * t6375 + t6726 * t6992;
t6234 = t6246 * t6951;
t6804 = t6246 * t6947;
t6803 = t6246 * t6945;
t6802 = t6246 * t6917;
t6247 = -t7027 * t6373 + t7003 * t6376 + t6725 * t6991;
t6235 = t6247 * t6944;
t6801 = t6247 * t6940;
t6800 = t6247 * t6938;
t6799 = t6247 * t6914;
t6248 = -t7028 * t6374 + t7002 * t6377 + t6724 * t6990;
t6236 = t6248 * t6937;
t6798 = t6248 * t6933;
t6797 = t6248 * t6931;
t6796 = t6248 * t6911;
t6297 = t6315 * t6953;
t6318 = t6455 * t6321;
t6277 = t6318 + t6297;
t6622 = t6904 * t6321;
t6255 = t6277 * t6459 + t6468 * t6622;
t6795 = t6255 * t6917;
t6298 = t6316 * t6952;
t6319 = t6455 * t6322;
t6279 = t6319 + t6298;
t6620 = t6902 * t6322;
t6256 = t6279 * t6462 + t6471 * t6620;
t6794 = t6256 * t6914;
t6299 = t6317 * t6954;
t6320 = t6455 * t6323;
t6281 = t6320 + t6299;
t6618 = t6900 * t6323;
t6257 = t6281 * t6465 + t6474 * t6618;
t6793 = t6257 * t6911;
t6719 = t6470 * t6921;
t6354 = t6410 * t6461 - t6460 * t6719;
t6403 = 0.2e1 * t6428 + pkin(1);
t6366 = t6403 * t6461 - t6719;
t6720 = t6461 * t6921;
t6524 = t6410 * t6470 + t6460 * t6720;
t6533 = t6403 * t6470 + t6720;
t6599 = t6686 * t6375;
t6677 = t6375 * t6835;
t6258 = (t6677 * t7024 + t7011) * t6447 + ((t6420 * t6366 - t6533 * t6423) * t6980 + t6599 * t6894) * t6469 + (t6420 * t6354 - t6524 * t6423 + t6677) * pkin(6);
t6792 = t6258 * t6957;
t6717 = t6473 * t6920;
t6355 = t6411 * t6464 - t6463 * t6717;
t6406 = 0.2e1 * t6429 + pkin(1);
t6367 = t6406 * t6464 - t6717;
t6718 = t6464 * t6920;
t6523 = t6411 * t6473 + t6463 * t6718;
t6532 = t6406 * t6473 + t6718;
t6598 = t6685 * t6376;
t6676 = t6376 * t6834;
t6259 = (t6676 * t7024 + t7012) * t6450 + ((t6421 * t6367 - t6532 * t6424) * t6978 + t6598 * t6892) * t6472 + (t6421 * t6355 - t6523 * t6424 + t6676) * pkin(6);
t6791 = t6259 * t6956;
t6715 = t6476 * t6919;
t6356 = t6412 * t6467 - t6466 * t6715;
t6409 = 0.2e1 * t6430 + pkin(1);
t6368 = t6409 * t6467 - t6715;
t6716 = t6467 * t6919;
t6522 = t6412 * t6476 + t6466 * t6716;
t6531 = t6409 * t6476 + t6716;
t6597 = t6684 * t6377;
t6675 = t6377 * t6833;
t6260 = (t6675 * t7024 + t7013) * t6453 + ((t6422 * t6368 - t6531 * t6425) * t6976 + t6597 * t6890) * t6475 + (t6422 * t6356 - t6522 * t6425 + t6675) * pkin(6);
t6790 = t6260 * t6955;
t6680 = t6372 * t6835;
t6261 = (t6680 * t7023 + t6599) * t6447 + ((t6366 * t6423 + t6420 * t6533) * t6980 - t6894 * t7011) * t6469 + (t6354 * t6423 + t6420 * t6524 - t6680) * pkin(6);
t6789 = t6261 * t6957;
t6679 = t6373 * t6834;
t6262 = (t6679 * t7023 + t6598) * t6450 + ((t6367 * t6424 + t6421 * t6532) * t6978 - t6892 * t7012) * t6472 + (t6355 * t6424 + t6421 * t6523 - t6679) * pkin(6);
t6788 = t6262 * t6956;
t6678 = t6374 * t6833;
t6263 = (t6678 * t7023 + t6597) * t6453 + ((t6368 * t6425 + t6422 * t6531) * t6976 - t6890 * t7013) * t6475 + (t6356 * t6425 + t6422 * t6522 - t6678) * pkin(6);
t6787 = t6263 * t6955;
t6767 = t6312 * t6916;
t6655 = t6328 * t6767;
t6733 = t6469 * t6321;
t6267 = t6454 * t6733 - t6655;
t6786 = t6267 * t6957;
t6785 = t6267 * t6917;
t6765 = t6313 * t6913;
t6653 = t6329 * t6765;
t6730 = t6472 * t6322;
t6268 = t6454 * t6730 - t6653;
t6784 = t6268 * t6956;
t6783 = t6268 * t6914;
t6763 = t6314 * t6910;
t6651 = t6327 * t6763;
t6727 = t6475 * t6323;
t6269 = t6454 * t6727 - t6651;
t6782 = t6269 * t6955;
t6781 = t6269 * t6911;
t6780 = t6277 * t6951;
t6779 = t6279 * t6944;
t6778 = t6281 * t6937;
t6777 = t6331 * t7019;
t6776 = t6306 * t6948;
t6775 = t6333 * t7018;
t6774 = t6307 * t6941;
t6773 = t6335 * t7017;
t6772 = t6308 * t6934;
t6771 = t6309 * t6948;
t6770 = t6310 * t6941;
t6769 = t6311 * t6934;
t6768 = t6312 * t6953;
t6766 = t6313 * t6952;
t6764 = t6314 * t6954;
t6762 = t6315 * t6899;
t6761 = t6316 * t6898;
t6760 = t6317 * t6897;
t6759 = t6324 * t6951;
t6758 = t6324 * t6916;
t6757 = t6324 * t6896;
t6756 = t6325 * t6944;
t6755 = t6325 * t6913;
t6754 = t6325 * t6896;
t6753 = t6326 * t6937;
t6752 = t6326 * t6910;
t6751 = t6326 * t6896;
t6750 = t6327 * t6937;
t6749 = t6328 * t6951;
t6748 = t6329 * t6944;
t6747 = t6330 * t6321;
t6746 = t6384 * t6945;
t6745 = t6388 * t6945;
t6744 = t6331 * t6879;
t6743 = t6332 * t6322;
t6742 = t6385 * t6938;
t6741 = t6389 * t6938;
t6740 = t6333 * t6874;
t6739 = t6334 * t6323;
t6738 = t6386 * t6931;
t6737 = t6387 * t6931;
t6736 = t6335 * t6869;
t6735 = t6384 * t6321;
t6734 = t6446 * t6321;
t6732 = t6385 * t6322;
t6731 = t6449 * t6322;
t6729 = t6386 * t6323;
t6728 = t6452 * t6323;
t6713 = t6446 * t6905;
t6712 = t6449 * t6903;
t6711 = t6452 * t6901;
t6707 = t6454 * t6883;
t6705 = t6454 * t6878;
t6703 = t6454 * t6873;
t6701 = (t6736 * t7017 + t6740 * t7018 + t6744 * t7019) * t6864 + (t6442 * t6777 + t6443 * t6775 + t6444 * t6773) * t6970 + (t6773 + t6775 + t6777) * MDP(1);
t6546 = t6727 * t6935;
t6549 = t6730 * t6942;
t6552 = t6733 * t6949;
t6627 = t6444 * t6739;
t6631 = t6443 * t6743;
t6635 = t6442 * t6747;
t6700 = (-t6306 * t6552 - t6307 * t6549 - t6308 * t6546) * t6864 + (-t6306 * t6635 - t6307 * t6631 - t6308 * t6627) * t6970 + (-t6306 * t6747 - t6307 * t6743 - t6308 * t6739) * MDP(1);
t6699 = (-t6309 * t6552 - t6310 * t6549 - t6311 * t6546) * t6864 + (-t6309 * t6635 - t6310 * t6631 - t6311 * t6627) * t6970 + (-t6309 * t6747 - t6310 * t6743 - t6311 * t6739) * MDP(1);
t6698 = t6948 * t7001;
t6697 = t6941 * t7001;
t6696 = t6934 * t7001;
t6695 = 0.2e1 * t6826;
t6694 = 0.2e1 * t6825;
t6693 = 0.2e1 * t6824;
t6689 = t6417 * t6441 - t6447;
t6688 = t6418 * t6441 - t6450;
t6687 = t6419 * t6441 - t6453;
t6683 = pkin(1) * t6757;
t6682 = pkin(1) * t6754;
t6681 = pkin(1) * t6751;
t6671 = t6997 * t6904;
t6670 = t6996 * t6902;
t6669 = t6995 * t6900;
t6668 = t6306 * t6746;
t6667 = t6306 * t6745;
t6666 = t6307 * t6742;
t6665 = t6307 * t6741;
t6664 = t6308 * t6738;
t6663 = t6308 * t6737;
t6662 = t6309 * t6746;
t6661 = t6309 * t6745;
t6660 = t6310 * t6742;
t6659 = t6310 * t6741;
t6658 = t6311 * t6738;
t6657 = t6311 * t6737;
t6656 = t6312 * t6749;
t6654 = t6313 * t6748;
t6652 = t6314 * t6750;
t6650 = t6328 * t6330 * t6962;
t6649 = t6315 * t6749;
t6648 = t6459 * t6297;
t6647 = t6329 * t6332 * t6960;
t6646 = t6316 * t6748;
t6645 = t6462 * t6298;
t6644 = t6327 * t6334 * t6958;
t6643 = t6317 * t6750;
t6642 = t6465 * t6299;
t6641 = t6324 * t6734;
t6640 = t6446 * t6757;
t6639 = t6325 * t6731;
t6638 = t6449 * t6754;
t6637 = t6326 * t6728;
t6636 = t6452 * t6751;
t6634 = t6330 * t6707;
t6633 = t6330 * t6706;
t6632 = t6459 * t6746;
t6630 = t6332 * t6705;
t6629 = t6332 * t6704;
t6628 = t6462 * t6742;
t6626 = t6334 * t6703;
t6625 = t6334 * t6702;
t6624 = t6465 * t6738;
t6623 = t6384 * t6734;
t6621 = t6385 * t6731;
t6619 = t6386 * t6728;
t6614 = t6455 * t6297;
t6613 = t6455 * t6298;
t6612 = t6455 * t6299;
t6611 = -t6330 * t6918 / 0.2e1;
t6610 = -t6332 * t6915 / 0.2e1;
t6609 = -t6334 * t6912 / 0.2e1;
t6608 = 0.2e1 * t6617;
t6607 = 0.2e1 * t6616;
t6606 = 0.2e1 * t6615;
t6605 = t6446 * t6460 * t6839;
t6604 = t6449 * t6463 * t6839;
t6603 = t6452 * t6466 * t6839;
t6596 = t6330 * t6671;
t6595 = t6332 * t6670;
t6594 = t6334 * t6669;
t6593 = t6243 * t6632;
t6592 = t6244 * t6628;
t6591 = t6245 * t6624;
t6590 = t6246 * t6632;
t6589 = t6247 * t6628;
t6588 = t6248 * t6624;
t6587 = t6258 * t6306 * t6759;
t6586 = t6259 * t6307 * t6756;
t6585 = t6260 * t6308 * t6753;
t6584 = t6261 * t6309 * t6759;
t6583 = t6261 * t6640;
t6582 = t6262 * t6310 * t6756;
t6581 = t6262 * t6638;
t6580 = t6263 * t6311 * t6753;
t6579 = t6263 * t6636;
t6348 = t6388 * t6459 + t6468 * t6994;
t6578 = t6348 * t6656;
t6351 = (pkin(1) * t6459 - pkin(5) * t6868) * t6454 - t6674;
t6577 = t6351 * t6656;
t6349 = t6389 * t6462 + t6471 * t6994;
t6576 = t6349 * t6654;
t6352 = (pkin(1) * t6462 - pkin(5) * t6867) * t6454 - t6673;
t6575 = t6352 * t6654;
t6350 = t6387 * t6465 + t6474 * t6994;
t6574 = t6350 * t6652;
t6353 = (pkin(1) * t6465 - pkin(5) * t6866) * t6454 - t6672;
t6573 = t6353 * t6652;
t6572 = t6384 * t6649;
t6571 = t6388 * t6649;
t6570 = t6734 * t6963;
t6569 = t6385 * t6646;
t6568 = t6389 * t6646;
t6567 = t6731 * t6961;
t6566 = t6386 * t6643;
t6565 = t6387 * t6643;
t6564 = t6728 * t6959;
t6563 = t6348 * t6641;
t6562 = t6351 * t6641;
t6561 = t6440 * t6469 * t6758;
t6560 = t6349 * t6639;
t6559 = t6352 * t6639;
t6558 = t6440 * t6472 * t6755;
t6557 = t6350 * t6637;
t6556 = t6353 * t6637;
t6555 = t6440 * t6475 * t6752;
t6554 = t6330 * t6623;
t6553 = t6330 * t6388 * t6734;
t6551 = t6332 * t6621;
t6550 = t6332 * t6389 * t6731;
t6548 = t6334 * t6619;
t6547 = t6334 * t6387 * t6728;
t6545 = t6459 * t6623;
t6544 = t6462 * t6621;
t6543 = t6465 * t6619;
t6542 = t6258 * t6640;
t6541 = t6259 * t6638;
t6540 = t6260 * t6636;
t6536 = t6459 * t6572;
t6535 = t6462 * t6569;
t6534 = t6465 * t6566;
t6530 = t6324 * t6454 * t6605;
t6529 = t6325 * t6454 * t6604;
t6528 = t6326 * t6454 * t6603;
t6276 = 0.2e1 * t6318 + t6297;
t6527 = (t6276 + t6297) * t6321;
t6278 = 0.2e1 * t6319 + t6298;
t6526 = (t6278 + t6298) * t6322;
t6280 = 0.2e1 * t6320 + t6299;
t6525 = (t6280 + t6299) * t6323;
t6282 = t6306 * t6950;
t6201 = -0.2e1 * t6282 - t6231;
t6521 = t6306 * (-t6201 * t6330 + t6812);
t6283 = t6307 * t6943;
t6203 = -0.2e1 * t6283 - t6232;
t6520 = t6307 * (-t6203 * t6332 + t6809);
t6284 = t6308 * t6936;
t6205 = -0.2e1 * t6284 - t6233;
t6519 = t6308 * (-t6205 * t6334 + t6806);
t6285 = t6309 * t6950;
t6207 = -0.2e1 * t6285 - t6234;
t6518 = t6309 * (-t6207 * t6330 + t6803);
t6286 = t6310 * t6943;
t6209 = -0.2e1 * t6286 - t6235;
t6517 = t6310 * (-t6209 * t6332 + t6800);
t6287 = t6311 * t6936;
t6211 = -0.2e1 * t6287 - t6236;
t6516 = t6311 * (-t6211 * t6334 + t6797);
t6515 = t6459 * t6851 + t6998 * t6880;
t6514 = t6462 * t6851 + t6998 * t6875;
t6513 = t6465 * t6851 + t6998 * t6870;
t6512 = t6468 * t6851 - t6998 * t6883;
t6511 = t6471 * t6851 - t6998 * t6878;
t6510 = t6474 * t6851 - t6998 * t6873;
t6509 = -t6201 * t6294 + t6306 * t6803;
t6508 = -t6203 * t6295 + t6307 * t6800;
t6507 = -t6205 * t6296 + t6308 * t6797;
t6506 = -t6207 * t6291 + t6309 * t6812;
t6505 = -t6209 * t6292 + t6310 * t6809;
t6504 = -t6211 * t6293 + t6311 * t6806;
t6500 = t6330 * (t6243 * t6734 + t6276 * t6306);
t6499 = t6330 * (t6246 * t6734 + t6276 * t6309);
t6498 = t6332 * (t6244 * t6731 + t6278 * t6307);
t6497 = t6332 * (t6247 * t6731 + t6278 * t6310);
t6496 = t6334 * (t6245 * t6728 + t6280 * t6308);
t6495 = t6334 * (t6248 * t6728 + t6280 * t6311);
t6494 = t6201 * t6321 - t6306 * t6649;
t6493 = t6203 * t6322 - t6307 * t6646;
t6492 = t6205 * t6323 - t6308 * t6643;
t6491 = t6207 * t6321 - t6309 * t6649;
t6490 = t6209 * t6322 - t6310 * t6646;
t6489 = t6211 * t6323 - t6311 * t6643;
t6488 = -(-t6243 * t6829 - t6261 * t6683) * t7016 + (-t6243 * t6847 + t6306 * t6695) * t6950 - t6306 * t6698;
t6487 = -(-t6244 * t6828 - t6262 * t6682) * t7015 + (-t6244 * t6846 + t6307 * t6694) * t6943 - t6307 * t6697;
t6486 = -(-t6245 * t6827 - t6263 * t6681) * t7014 + (-t6245 * t6845 + t6308 * t6693) * t6936 - t6308 * t6696;
t6485 = -(-t6246 * t6829 + t6258 * t6683) * t7016 + (-t6246 * t6847 + t6309 * t6695) * t6950 - t6309 * t6698;
t6484 = -(-t6247 * t6828 + t6259 * t6682) * t7015 + (-t6247 * t6846 + t6310 * t6694) * t6943 - t6310 * t6697;
t6483 = -(-t6248 * t6827 + t6260 * t6681) * t7014 + (-t6248 * t6845 + t6311 * t6693) * t6936 - t6311 * t6696;
t6482 = -(pkin(5) * t6315 * t6460 + pkin(1) * t6966) * t6953 * t6454 - (-t6297 * t6989 + t6622 * t7025) * t6455 + t6733 * t7001;
t6481 = -(pkin(5) * t6316 * t6463 + pkin(1) * t6965) * t6952 * t6454 - (-t6298 * t6988 + t6620 * t7025) * t6455 + t6730 * t7001;
t6480 = -(pkin(5) * t6317 * t6466 + pkin(1) * t6964) * t6954 * t6454 - (-t6299 * t6987 + t6618 * t7025) * t6455 + t6727 * t7001;
t6383 = t6702 + t6891;
t6382 = t6703 - t6885;
t6381 = t6704 + t6893;
t6380 = t6706 + t6895;
t6379 = t6705 - t6887;
t6378 = t6707 - t6889;
t6305 = t6311 ^ 2;
t6304 = t6310 ^ 2;
t6303 = t6309 ^ 2;
t6302 = t6308 ^ 2;
t6301 = t6307 ^ 2;
t6300 = t6306 ^ 2;
t6275 = t6320 + t6299 / 0.2e1;
t6274 = t6319 + t6298 / 0.2e1;
t6273 = t6318 + t6297 / 0.2e1;
t6272 = t6612 / 0.2e1 + t6323;
t6271 = t6613 / 0.2e1 + t6322;
t6270 = t6614 / 0.2e1 + t6321;
t6254 = t6281 * t6474 - t6465 * t6618;
t6253 = t6279 * t6471 - t6462 * t6620;
t6252 = t6277 * t6468 - t6459 * t6622;
t6239 = t6687 * t6323 + t6323 - t6612;
t6238 = t6688 * t6322 + t6322 - t6613;
t6237 = t6689 * t6321 + t6321 - t6614;
t6230 = t6279 * t6849 + t6996 * t6620;
t6229 = t6277 * t6850 + t6997 * t6622;
t6228 = t6281 * t6848 + t6995 * t6618;
t6227 = t6272 * t6987 - t6275 * t6824;
t6226 = t6270 * t6989 - t6273 * t6826;
t6225 = t6271 * t6988 - t6274 * t6825;
t6224 = -t6271 * t6991 - t6274 * t6822;
t6223 = -t6272 * t6990 - t6275 * t6821;
t6222 = -t6270 * t6992 - t6273 * t6823;
t6221 = t6314 * t6327 * t6603 + (t6441 * t6852 + t6651 * t6897 - 0.2e1 * t6323) * pkin(5);
t6220 = t6313 * t6329 * t6604 + (t6441 * t6853 + t6653 * t6898 - 0.2e1 * t6322) * pkin(5);
t6219 = t6312 * t6328 * t6605 + (t6441 * t6854 + t6655 * t6899 - 0.2e1 * t6321) * pkin(5);
t6218 = -t6454 * t6769 - t6540;
t6217 = (t6263 * t6752 - t6772) * t6454;
t6216 = -t6454 * t6770 - t6541;
t6215 = (t6262 * t6755 - t6774) * t6454;
t6214 = -t6454 * t6771 - t6542;
t6213 = (t6261 * t6758 - t6776) * t6454;
t6212 = -t6287 - t6236;
t6210 = -t6286 - t6235;
t6208 = -t6285 - t6234;
t6206 = -t6284 - t6233;
t6204 = -t6283 - t6232;
t6202 = -t6282 - t6231;
t6200 = -t6287 - t6236 / 0.2e1;
t6199 = -t6286 - t6235 / 0.2e1;
t6198 = -t6285 - t6234 / 0.2e1;
t6197 = -t6284 - t6233 / 0.2e1;
t6196 = -t6283 - t6232 / 0.2e1;
t6195 = -t6282 - t6231 / 0.2e1;
t6194 = t6248 * t6609 - t6296;
t6193 = t6247 * t6610 - t6295;
t6192 = t6246 * t6611 - t6294;
t6191 = t6245 * t6609 - t6293;
t6190 = t6244 * t6610 - t6292;
t6189 = t6243 * t6611 - t6291;
t6182 = (-t6382 * t6763 - t6760) * t6327 + t6510 * t6727;
t6181 = (-t6379 * t6765 - t6761) * t6329 + t6511 * t6730;
t6180 = (-t6378 * t6767 - t6762) * t6328 + t6512 * t6733;
t6179 = (t6383 * t6964 - t6465 * t6760) * t6954 + t6513 * t6727;
t6178 = (t6381 * t6965 - t6462 * t6761) * t6952 + t6514 * t6730;
t6177 = (t6380 * t6966 - t6459 * t6762) * t6953 + t6515 * t6733;
t6170 = t6212 * t6465 - t6311 * t6625;
t6169 = t6206 * t6465 - t6308 * t6625;
t6168 = t6210 * t6462 - t6310 * t6629;
t6167 = t6204 * t6462 - t6307 * t6629;
t6166 = t6208 * t6459 - t6309 * t6633;
t6165 = t6202 * t6459 - t6306 * t6633;
t6164 = t6212 * t6474 + t6311 * t6626;
t6163 = t6206 * t6474 + t6308 * t6626;
t6162 = t6210 * t6471 + t6310 * t6630;
t6161 = t6204 * t6471 + t6307 * t6630;
t6160 = t6208 * t6468 + t6309 * t6634;
t6159 = t6202 * t6468 + t6306 * t6634;
t6149 = t6239 * t6451 + t6275 * t6606 + t6281 * t6455;
t6148 = t6238 * t6448 + t6274 * t6607 + t6279 * t6455;
t6147 = t6237 * t6445 + t6273 * t6608 + t6277 * t6455;
t6146 = -t6237 * t6882 + t6273 * t6671;
t6145 = -t6239 * t6872 + t6275 * t6669;
t6144 = -t6238 * t6877 + t6274 * t6670;
t6143 = -t6296 - (-t6248 * t6912 + t6687 * t6311) * t6334;
t6142 = -t6295 - (-t6247 * t6915 + t6688 * t6310) * t6332;
t6141 = -t6294 - (-t6246 * t6918 + t6689 * t6309) * t6330;
t6140 = -t6293 - (-t6245 * t6912 + t6687 * t6308) * t6334;
t6139 = -t6292 - (-t6244 * t6915 + t6688 * t6307) * t6332;
t6138 = -t6291 - (-t6243 * t6918 + t6689 * t6306) * t6330;
t6137 = t6210 * t6849 - t6310 * t6595;
t6136 = t6204 * t6849 - t6307 * t6595;
t6135 = t6208 * t6850 - t6309 * t6596;
t6134 = t6202 * t6850 - t6306 * t6596;
t6133 = t6212 * t6848 - t6311 * t6594;
t6132 = t6206 * t6848 - t6308 * t6594;
t6131 = t6260 * t6528 + (t6260 * t6555 - t6311 * t6855 + 0.2e1 * t6296) * pkin(5);
t6130 = t6259 * t6529 + (t6259 * t6558 - t6310 * t6856 + 0.2e1 * t6295) * pkin(5);
t6129 = t6258 * t6530 + (t6258 * t6561 - t6309 * t6857 + 0.2e1 * t6294) * pkin(5);
t6128 = -t6263 * t6528 + (-t6263 * t6555 - t6308 * t6855 + 0.2e1 * t6293) * pkin(5);
t6127 = -t6262 * t6529 + (-t6262 * t6558 - t6307 * t6856 + 0.2e1 * t6292) * pkin(5);
t6126 = -t6261 * t6530 + (-t6261 * t6561 - t6306 * t6857 + 0.2e1 * t6291) * pkin(5);
t6125 = t6194 * t6987 - t6200 * t6824;
t6124 = t6192 * t6989 - t6198 * t6826;
t6123 = t6191 * t6987 - t6197 * t6824;
t6122 = t6189 * t6989 - t6195 * t6826;
t6121 = t6193 * t6988 - t6199 * t6825;
t6120 = -t6193 * t6991 - t6199 * t6822;
t6119 = t6190 * t6988 - t6196 * t6825;
t6118 = -t6190 * t6991 - t6196 * t6822;
t6117 = -t6194 * t6990 - t6200 * t6821;
t6116 = -t6191 * t6990 - t6197 * t6821;
t6115 = -t6192 * t6992 - t6198 * t6823;
t6114 = -t6189 * t6992 - t6195 * t6823;
t6113 = -t6465 * t6221 + t6480 * t6474;
t6112 = -t6474 * t6221 - t6480 * t6465;
t6111 = -t6462 * t6220 + t6481 * t6471;
t6110 = -t6471 * t6220 - t6481 * t6462;
t6109 = -t6459 * t6219 + t6482 * t6468;
t6108 = -t6468 * t6219 - t6482 * t6459;
t6107 = -t6382 * t6540 - (-t6248 * t6454 + t6510 * t6311) * t6934;
t6106 = t6382 * t6579 - (-t6245 * t6454 + t6510 * t6308) * t6934;
t6105 = -t6379 * t6541 - (-t6247 * t6454 + t6511 * t6310) * t6941;
t6104 = t6379 * t6581 - (-t6244 * t6454 + t6511 * t6307) * t6941;
t6103 = -t6378 * t6542 - (-t6246 * t6454 + t6512 * t6309) * t6948;
t6102 = t6378 * t6583 - (-t6243 * t6454 + t6512 * t6306) * t6948;
t6101 = t6383 * t6540 - (-t6248 * t6711 + t6513 * t6311) * t6934;
t6100 = t6381 * t6541 - (-t6247 * t6712 + t6514 * t6310) * t6941;
t6099 = t6380 * t6542 - (-t6246 * t6713 + t6515 * t6309) * t6948;
t6098 = -t6383 * t6579 - (-t6245 * t6711 + t6513 * t6308) * t6934;
t6097 = -t6381 * t6581 - (-t6244 * t6712 + t6514 * t6307) * t6941;
t6096 = -t6380 * t6583 - (-t6243 * t6713 + t6515 * t6306) * t6948;
t6095 = t6143 * t6451 + t6200 * t6606 + t6212 * t6455;
t6094 = t6142 * t6448 + t6199 * t6607 + t6210 * t6455;
t6093 = t6141 * t6445 + t6198 * t6608 + t6208 * t6455;
t6092 = t6140 * t6451 + t6197 * t6606 + t6206 * t6455;
t6091 = t6139 * t6448 + t6196 * t6607 + t6204 * t6455;
t6090 = t6138 * t6445 + t6195 * t6608 + t6202 * t6455;
t6089 = -t6141 * t6882 + t6198 * t6671;
t6088 = -t6138 * t6882 + t6195 * t6671;
t6087 = -t6143 * t6872 + t6200 * t6669;
t6086 = -t6142 * t6877 + t6199 * t6670;
t6085 = -t6140 * t6872 + t6197 * t6669;
t6084 = -t6139 * t6877 + t6196 * t6670;
t6083 = -t6465 * t6131 + t6483 * t6474;
t6082 = -t6474 * t6131 - t6483 * t6465;
t6081 = -t6465 * t6128 + t6486 * t6474;
t6080 = -t6474 * t6128 - t6486 * t6465;
t6079 = -t6462 * t6130 + t6484 * t6471;
t6078 = -t6471 * t6130 - t6484 * t6462;
t6077 = -t6462 * t6127 + t6487 * t6471;
t6076 = -t6471 * t6127 - t6487 * t6462;
t6075 = -t6459 * t6129 + t6485 * t6468;
t6074 = -t6468 * t6129 - t6485 * t6459;
t6073 = -t6459 * t6126 + t6488 * t6468;
t6072 = -t6468 * t6126 - t6488 * t6459;
t1 = [(t6303 * t6331 + t6304 * t6333 + t6305 * t6335) * MDP(1) + (t6303 * t6946 + t6304 * t6939 + t6305 * t6932) * t6970 + (t6303 * t6744 + t6304 * t6740 + t6305 * t6736) * t6864 + (t6460 * t6518 + t6463 * t6517 + t6466 * t6516) * t6969 + (t6469 * t6518 + t6472 * t6517 + t6475 * t6516) * t6968 + (-t6208 * t6234 - t6210 * t6235 - t6212 * t6236 + (-t6208 * t6294 - t6210 * t6295 - t6212 * t6296) * t6455) * MDP(8) + (t6121 * t6859 + t6124 * t6860 + t6125 * t6858 + t6246 * t6662 + t6247 * t6660 - t6248 * t6658) * MDP(9) + (t6115 * t6860 + t6117 * t6858 + t6120 * t6859 - t6246 * t6661 - t6247 * t6659 - t6248 * t6657) * MDP(10) + (-(t6095 * t6311 + t6170 * t6796) * t6334 - (t6094 * t6310 + t6168 * t6799) * t6332 - (t6093 * t6309 + t6166 * t6802) * t6330) * MDP(11) + (t6086 * t6859 + t6087 * t6858 + t6089 * t6860 - t6133 * t6236 - t6135 * t6234 - t6137 * t6235) * MDP(12) + (-(t6101 * t6311 - t6218 * t6796) * t6334 - (t6100 * t6310 - t6216 * t6799) * t6332 - (t6099 * t6309 - t6214 * t6802) * t6330 + (t6166 * t6792 + t6168 * t6791 + t6170 * t6790) * t6896) * MDP(13) + (-(t6107 * t6311 - t6218 * t6248) * t6334 - (t6105 * t6310 - t6216 * t6247) * t6332 - (t6103 * t6309 - t6214 * t6246) * t6330 + (t6160 * t6792 + t6162 * t6791 + t6164 * t6790) * t6896) * MDP(14) + (-t6214 * t6771 - t6216 * t6770 - t6218 * t6769 + (-t6214 * t6792 - t6216 * t6791 - t6218 * t6790) * t6479) * t6967 + ((-t6798 - (-t6350 * t6540 + t6083) * t6334) * t6311 + (t6801 - (-t6349 * t6541 + t6079) * t6332) * t6310 + (t6804 - (-t6348 * t6542 + t6075) * t6330) * t6309) * MDP(16) + ((t6588 - (t6353 * t6540 + t6082) * t6334) * t6311 + (-t6589 - (t6352 * t6541 + t6078) * t6332) * t6310 + (-t6590 - (t6351 * t6542 + t6074) * t6330) * t6309) * MDP(17) + MDP(18); (t6460 * t6509 + t6463 * t6508 + t6466 * t6507) * t6969 + (t6469 * t6509 + t6472 * t6508 + t6475 * t6507) * t6968 + (-t6202 * t6234 - t6204 * t6235 - t6206 * t6236 + (-t6202 * t6294 - t6204 * t6295 - t6206 * t6296) * t6455) * MDP(8) + (t6119 * t6859 + t6122 * t6860 + t6123 * t6858 + t6246 * t6668 + t6247 * t6666 - t6248 * t6664) * MDP(9) + (t6114 * t6860 + t6116 * t6858 + t6118 * t6859 - t6246 * t6667 - t6247 * t6665 - t6248 * t6663) * MDP(10) + (-(t6092 * t6311 + t6169 * t6796) * t6334 - (t6091 * t6310 + t6167 * t6799) * t6332 - (t6090 * t6309 + t6165 * t6802) * t6330) * MDP(11) + (t6084 * t6859 + t6085 * t6858 + t6088 * t6860 - t6132 * t6236 - t6134 * t6234 - t6136 * t6235) * MDP(12) + (-(t6098 * t6311 - t6217 * t6796) * t6334 - (t6097 * t6310 - t6215 * t6799) * t6332 - (t6096 * t6309 - t6213 * t6802) * t6330 + (t6165 * t6792 + t6167 * t6791 + t6169 * t6790) * t6896) * MDP(13) + (-(t6106 * t6311 - t6217 * t6248) * t6334 - (t6104 * t6310 - t6215 * t6247) * t6332 - (t6102 * t6309 - t6213 * t6246) * t6330 + (t6159 * t6792 + t6161 * t6791 + t6163 * t6790) * t6896) * MDP(14) + (-t6213 * t6771 - t6215 * t6770 - t6217 * t6769 + (-t6213 * t6792 - t6215 * t6791 - t6217 * t6790) * t6479) * t6967 + (t6306 * t6804 + t6307 * t6801 - t6308 * t6798 - t6073 * t6294 - t6077 * t6295 - t6081 * t6296 + (t6348 * t6587 + t6349 * t6586 + t6350 * t6585) * t6896) * MDP(16) + (-t6306 * t6590 - t6307 * t6589 + t6308 * t6588 - t6072 * t6294 - t6076 * t6295 - t6080 * t6296 + (-t6351 * t6587 - t6352 * t6586 - t6353 * t6585) * t6896) * MDP(17) + t6701; (-t6460 * t6499 - t6463 * t6497 - t6466 * t6495) * t6969 + (-t6469 * t6499 - t6472 * t6497 - t6475 * t6495) * t6968 + (-t6246 * t6780 - t6247 * t6779 - t6248 * t6778 + (-t6277 * t6294 - t6279 * t6295 - t6281 * t6296) * t6455) * MDP(8) + (t6225 * t6859 + t6226 * t6860 + t6227 * t6858 - t6246 * t6554 - t6247 * t6551 + t6248 * t6548) * MDP(9) + (t6222 * t6860 + t6223 * t6858 + t6224 * t6859 + t6246 * t6553 + t6247 * t6550 + t6248 * t6547) * MDP(10) + (-(t6149 * t6311 + t6248 * t6793) * t6334 - (t6148 * t6310 + t6247 * t6794) * t6332 - (t6147 * t6309 + t6246 * t6795) * t6330) * MDP(11) + (t6144 * t6859 + t6145 * t6858 + t6146 * t6860 - t6228 * t6236 - t6229 * t6234 - t6230 * t6235) * MDP(12) + (-(t6179 * t6311 - t6248 * t6781) * t6334 - (t6178 * t6310 - t6247 * t6783) * t6332 - (t6177 * t6309 - t6246 * t6785) * t6330 + (t6255 * t6792 + t6256 * t6791 + t6257 * t6790) * t6896) * MDP(13) + (-(t6182 * t6311 - t6248 * t6269) * t6334 - (t6181 * t6310 - t6247 * t6268) * t6332 - (t6180 * t6309 - t6246 * t6267) * t6330 + (t6252 * t6792 + t6253 * t6791 + t6254 * t6790) * t6896) * MDP(14) + (-t6267 * t6771 - t6268 * t6770 - t6269 * t6769 + (-t6258 * t6786 - t6259 * t6784 - t6260 * t6782) * t6479) * t6967 + (-(t6113 * t6311 - t6248 * t6729) * t6334 - (t6111 * t6310 + t6247 * t6732) * t6332 - (t6109 * t6309 + t6246 * t6735) * t6330 + (-t6258 * t6563 - t6259 * t6560 - t6260 * t6557) * t6896) * MDP(16) + (-(t6112 * t6311 + t6248 * t6543) * t6334 - (t6110 * t6310 - t6247 * t6544) * t6332 - (t6108 * t6309 - t6246 * t6545) * t6330 + (t6258 * t6562 + t6259 * t6559 + t6260 * t6556) * t6896) * MDP(17) + t6699; (t6460 * t6506 + t6463 * t6505 + t6466 * t6504) * t6969 + (t6469 * t6506 + t6472 * t6505 + t6475 * t6504) * t6968 + (-t6208 * t6231 - t6210 * t6232 - t6212 * t6233 + (-t6208 * t6291 - t6210 * t6292 - t6212 * t6293) * t6455) * MDP(8) + (t6121 * t6862 + t6124 * t6863 + t6125 * t6861 + t6243 * t6662 + t6244 * t6660 - t6245 * t6658) * MDP(9) + (t6115 * t6863 + t6117 * t6861 + t6120 * t6862 - t6243 * t6661 - t6244 * t6659 - t6245 * t6657) * MDP(10) + (-(t6095 * t6308 + t6170 * t6805) * t6334 - (t6094 * t6307 + t6168 * t6808) * t6332 - (t6093 * t6306 + t6166 * t6811) * t6330) * MDP(11) + (t6086 * t6862 + t6087 * t6861 + t6089 * t6863 - t6133 * t6233 - t6135 * t6231 - t6137 * t6232) * MDP(12) + (-(t6101 * t6308 - t6218 * t6805) * t6334 - (t6100 * t6307 - t6216 * t6808) * t6332 - (t6099 * t6306 - t6214 * t6811) * t6330 + (-t6166 * t6789 - t6168 * t6788 - t6170 * t6787) * t6896) * MDP(13) + (-(t6107 * t6308 - t6218 * t6245) * t6334 - (t6105 * t6307 - t6216 * t6244) * t6332 - (t6103 * t6306 - t6214 * t6243) * t6330 + (-t6160 * t6789 - t6162 * t6788 - t6164 * t6787) * t6896) * MDP(14) + (-t6214 * t6776 - t6216 * t6774 - t6218 * t6772 + (t6214 * t6789 + t6216 * t6788 + t6218 * t6787) * t6479) * t6967 + (t6309 * t6813 + t6310 * t6810 - t6311 * t6807 - t6075 * t6291 - t6079 * t6292 - t6083 * t6293 + (-t6348 * t6584 - t6349 * t6582 - t6350 * t6580) * t6896) * MDP(16) + (-t6309 * t6593 - t6310 * t6592 + t6311 * t6591 - t6074 * t6291 - t6078 * t6292 - t6082 * t6293 + (t6351 * t6584 + t6352 * t6582 + t6353 * t6580) * t6896) * MDP(17) + t6701; (t6300 * t6331 + t6301 * t6333 + t6302 * t6335) * MDP(1) + (t6300 * t6946 + t6301 * t6939 + t6302 * t6932) * t6970 + (t6300 * t6744 + t6301 * t6740 + t6302 * t6736) * t6864 + (t6460 * t6521 + t6463 * t6520 + t6466 * t6519) * t6969 + (t6469 * t6521 + t6472 * t6520 + t6475 * t6519) * t6968 + (-t6202 * t6231 - t6204 * t6232 - t6206 * t6233 + (-t6202 * t6291 - t6204 * t6292 - t6206 * t6293) * t6455) * MDP(8) + (t6119 * t6862 + t6122 * t6863 + t6123 * t6861 + t6243 * t6668 + t6244 * t6666 - t6245 * t6664) * MDP(9) + (t6114 * t6863 + t6116 * t6861 + t6118 * t6862 - t6243 * t6667 - t6244 * t6665 - t6245 * t6663) * MDP(10) + (-(t6092 * t6308 + t6169 * t6805) * t6334 - (t6091 * t6307 + t6167 * t6808) * t6332 - (t6090 * t6306 + t6165 * t6811) * t6330) * MDP(11) + (t6084 * t6862 + t6085 * t6861 + t6088 * t6863 - t6132 * t6233 - t6134 * t6231 - t6136 * t6232) * MDP(12) + (-(t6098 * t6308 - t6217 * t6805) * t6334 - (t6097 * t6307 - t6215 * t6808) * t6332 - (t6096 * t6306 - t6213 * t6811) * t6330 + (-t6165 * t6789 - t6167 * t6788 - t6169 * t6787) * t6896) * MDP(13) + (-(t6106 * t6308 - t6217 * t6245) * t6334 - (t6104 * t6307 - t6215 * t6244) * t6332 - (t6102 * t6306 - t6213 * t6243) * t6330 + (-t6159 * t6789 - t6161 * t6788 - t6163 * t6787) * t6896) * MDP(14) + (-t6213 * t6776 - t6215 * t6774 - t6217 * t6772 + (t6213 * t6789 + t6215 * t6788 + t6217 * t6787) * t6479) * t6967 + ((-t6807 - (t6350 * t6579 + t6081) * t6334) * t6308 + (t6810 - (t6349 * t6581 + t6077) * t6332) * t6307 + (t6813 - (t6348 * t6583 + t6073) * t6330) * t6306) * MDP(16) + ((t6591 - (-t6353 * t6579 + t6080) * t6334) * t6308 + (-t6592 - (-t6352 * t6581 + t6076) * t6332) * t6307 + (-t6593 - (-t6351 * t6583 + t6072) * t6330) * t6306) * MDP(17) + MDP(18); (-t6460 * t6500 - t6463 * t6498 - t6466 * t6496) * t6969 + (-t6469 * t6500 - t6472 * t6498 - t6475 * t6496) * t6968 + (-t6243 * t6780 - t6244 * t6779 - t6245 * t6778 + (-t6277 * t6291 - t6279 * t6292 - t6281 * t6293) * t6455) * MDP(8) + (t6225 * t6862 + t6226 * t6863 + t6227 * t6861 - t6243 * t6554 - t6244 * t6551 + t6245 * t6548) * MDP(9) + (t6222 * t6863 + t6223 * t6861 + t6224 * t6862 + t6243 * t6553 + t6244 * t6550 + t6245 * t6547) * MDP(10) + (-(t6149 * t6308 + t6245 * t6793) * t6334 - (t6148 * t6307 + t6244 * t6794) * t6332 - (t6147 * t6306 + t6243 * t6795) * t6330) * MDP(11) + (t6144 * t6862 + t6145 * t6861 + t6146 * t6863 - t6228 * t6233 - t6229 * t6231 - t6230 * t6232) * MDP(12) + (-(t6179 * t6308 - t6245 * t6781) * t6334 - (t6178 * t6307 - t6244 * t6783) * t6332 - (t6177 * t6306 - t6243 * t6785) * t6330 + (-t6255 * t6789 - t6256 * t6788 - t6257 * t6787) * t6896) * MDP(13) + (-(t6182 * t6308 - t6245 * t6269) * t6334 - (t6181 * t6307 - t6244 * t6268) * t6332 - (t6180 * t6306 - t6243 * t6267) * t6330 + (-t6252 * t6789 - t6253 * t6788 - t6254 * t6787) * t6896) * MDP(14) + (-t6267 * t6776 - t6268 * t6774 - t6269 * t6772 + (t6261 * t6786 + t6262 * t6784 + t6263 * t6782) * t6479) * t6967 + (-(t6113 * t6308 - t6245 * t6729) * t6334 - (t6111 * t6307 + t6244 * t6732) * t6332 - (t6109 * t6306 + t6243 * t6735) * t6330 + (t6261 * t6563 + t6262 * t6560 + t6263 * t6557) * t6896) * MDP(16) + (-(t6112 * t6308 + t6245 * t6543) * t6334 - (t6110 * t6307 - t6244 * t6544) * t6332 - (t6108 * t6306 - t6243 * t6545) * t6330 + (-t6261 * t6562 - t6262 * t6559 - t6263 * t6556) * t6896) * MDP(17) + t6700; (t6460 * t6491 + t6463 * t6490 + t6466 * t6489) * t6969 + (t6469 * t6491 + t6472 * t6490 + t6475 * t6489) * t6968 + (t6208 * t6297 + t6210 * t6298 + t6212 * t6299 + (t6208 * t6321 + t6210 * t6322 + t6212 * t6323) * t6455) * MDP(8) + (t6121 * t6853 + t6124 * t6854 + t6125 * t6852 - t6309 * t6572 - t6310 * t6569 + t6311 * t6566) * MDP(9) + (t6115 * t6854 + t6117 * t6852 + t6120 * t6853 + t6309 * t6571 + t6310 * t6568 + t6311 * t6565) * MDP(10) + (t6093 * t6321 + t6094 * t6322 + t6095 * t6323 + t6166 * t6648 + t6168 * t6645 + t6170 * t6642) * MDP(11) + (t6086 * t6853 + t6087 * t6852 + t6089 * t6854 + t6133 * t6299 + t6135 * t6297 + t6137 * t6298) * MDP(12) + (-t6214 * t6648 - t6216 * t6645 - t6218 * t6642 + t6099 * t6321 + t6100 * t6322 + t6101 * t6323 + (t6166 * t6768 + t6168 * t6766 + t6170 * t6764) * t6479) * MDP(13) + (t6103 * t6321 + t6105 * t6322 + t6107 * t6323 - t6214 * t6963 - t6216 * t6961 - t6218 * t6959 + (t6160 * t6768 + t6162 * t6766 + t6164 * t6764) * t6479) * MDP(14) + ((-t6214 * t6768 - t6216 * t6766 - t6218 * t6764) * t6479 + (t6214 * t6733 + t6216 * t6730 + t6218 * t6727) * t6454) * MDP(15) + (-t6309 * t6650 - t6310 * t6647 + t6311 * t6644 + t6075 * t6321 + t6079 * t6322 + t6083 * t6323 + (t6309 * t6578 + t6310 * t6576 + t6311 * t6574) * t6479) * MDP(16) + (t6309 * t6536 + t6310 * t6535 - t6311 * t6534 + t6074 * t6321 + t6078 * t6322 + t6082 * t6323 + (-t6309 * t6577 - t6310 * t6575 - t6311 * t6573) * t6479) * MDP(17) + t6699; (t6460 * t6494 + t6463 * t6493 + t6466 * t6492) * t6969 + (t6469 * t6494 + t6472 * t6493 + t6475 * t6492) * t6968 + (t6202 * t6297 + t6204 * t6298 + t6206 * t6299 + (t6202 * t6321 + t6204 * t6322 + t6206 * t6323) * t6455) * MDP(8) + (t6119 * t6853 + t6122 * t6854 + t6123 * t6852 - t6306 * t6572 - t6307 * t6569 + t6308 * t6566) * MDP(9) + (t6114 * t6854 + t6116 * t6852 + t6118 * t6853 + t6306 * t6571 + t6307 * t6568 + t6308 * t6565) * MDP(10) + (t6090 * t6321 + t6091 * t6322 + t6092 * t6323 + t6165 * t6648 + t6167 * t6645 + t6169 * t6642) * MDP(11) + (t6084 * t6853 + t6085 * t6852 + t6088 * t6854 + t6132 * t6299 + t6134 * t6297 + t6136 * t6298) * MDP(12) + (-t6213 * t6648 - t6215 * t6645 - t6217 * t6642 + t6096 * t6321 + t6097 * t6322 + t6098 * t6323 + (t6165 * t6768 + t6167 * t6766 + t6169 * t6764) * t6479) * MDP(13) + (t6102 * t6321 + t6104 * t6322 + t6106 * t6323 - t6213 * t6963 - t6215 * t6961 - t6217 * t6959 + (t6159 * t6768 + t6161 * t6766 + t6163 * t6764) * t6479) * MDP(14) + ((-t6213 * t6768 - t6215 * t6766 - t6217 * t6764) * t6479 + (t6213 * t6733 + t6215 * t6730 + t6217 * t6727) * t6454) * MDP(15) + (-t6306 * t6650 - t6307 * t6647 + t6308 * t6644 + t6073 * t6321 + t6077 * t6322 + t6081 * t6323 + (t6306 * t6578 + t6307 * t6576 + t6308 * t6574) * t6479) * MDP(16) + (t6306 * t6536 + t6307 * t6535 - t6308 * t6534 + t6072 * t6321 + t6076 * t6322 + t6080 * t6323 + (-t6306 * t6577 - t6307 * t6575 - t6308 * t6573) * t6479) * MDP(17) + t6700; (t6928 + t6929 + t6930) * MDP(1) + (t6442 * t6930 + t6443 * t6929 + t6444 * t6928) * t6970 + (t6869 * t6928 + t6874 * t6929 + t6879 * t6930) * t6864 + (t6460 * t6527 + t6463 * t6526 + t6466 * t6525) * t6969 + (t6469 * t6527 + t6472 * t6526 + t6475 * t6525) * t6968 + (t6277 * t6297 + t6279 * t6298 + t6281 * t6299 + (t6277 * t6321 + t6279 * t6322 + t6281 * t6323) * t6455) * MDP(8) + (t6225 * t6853 + t6226 * t6854 + t6227 * t6852 + t6384 * t6570 + t6385 * t6567 - t6386 * t6564) * MDP(9) + (t6222 * t6854 + t6223 * t6852 + t6224 * t6853 - t6387 * t6564 - t6388 * t6570 - t6389 * t6567) * MDP(10) + (t6147 * t6321 + t6148 * t6322 + t6149 * t6323 + t6255 * t6648 + t6256 * t6645 + t6257 * t6642) * MDP(11) + (t6144 * t6853 + t6145 * t6852 + t6146 * t6854 + t6228 * t6299 + t6229 * t6297 + t6230 * t6298) * MDP(12) + (-t6267 * t6648 - t6268 * t6645 - t6269 * t6642 + t6177 * t6321 + t6178 * t6322 + t6179 * t6323 + (t6255 * t6768 + t6256 * t6766 + t6257 * t6764) * t6479) * MDP(13) + (t6180 * t6321 + t6181 * t6322 + t6182 * t6323 - t6267 * t6963 - t6268 * t6961 - t6269 * t6959 + (t6252 * t6768 + t6253 * t6766 + t6254 * t6764) * t6479) * MDP(14) + ((-t6267 * t6768 - t6268 * t6766 - t6269 * t6764) * t6479 + (t6267 * t6733 + t6268 * t6730 + t6269 * t6727) * t6454) * MDP(15) + ((t6113 + (-t6350 * t6763 - t6958) * t6327) * t6323 + (t6111 + (-t6349 * t6765 + t6960) * t6329) * t6322 + (t6109 + (-t6348 * t6767 + t6962) * t6328) * t6321) * MDP(16) + ((t6112 + (t6353 * t6964 + t6465 * t6958) * t6954) * t6323 + (t6110 + (t6352 * t6965 - t6462 * t6960) * t6952) * t6322 + (t6108 + (t6351 * t6966 - t6459 * t6962) * t6953) * t6321) * MDP(17) + MDP(18);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
