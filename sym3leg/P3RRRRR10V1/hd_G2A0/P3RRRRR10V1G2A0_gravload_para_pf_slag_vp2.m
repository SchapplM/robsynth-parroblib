% Calculate Gravitation load for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [3x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:23:37
% EndTime: 2020-08-06 22:23:44
% DurationCPUTime: 7.76s
% Computational Cost: add. (1509->431), mult. (3333->812), div. (54->10), fcn. (2634->26), ass. (0->297)
t3171 = m(2) + m(3);
t2946 = legFrame(1,2);
t2915 = sin(t2946);
t2918 = cos(t2946);
t2864 = g(1) * t2918 - g(2) * t2915;
t2955 = sin(qJ(1,1));
t2964 = cos(qJ(1,1));
t2849 = g(3) * t2964 + t2864 * t2955;
t2954 = sin(qJ(2,1));
t2963 = cos(qJ(2,1));
t2861 = g(1) * t2915 + g(2) * t2918;
t2941 = sin(pkin(3));
t2942 = cos(pkin(3));
t2992 = g(3) * t2955 - t2864 * t2964;
t2983 = t2861 * t2941 - t2992 * t2942;
t2971 = t2963 * t2849 + t2983 * t2954;
t2945 = legFrame(2,2);
t2914 = sin(t2945);
t2917 = cos(t2945);
t2863 = g(1) * t2917 - g(2) * t2914;
t2952 = sin(qJ(1,2));
t2961 = cos(qJ(1,2));
t2848 = g(3) * t2961 + t2863 * t2952;
t2951 = sin(qJ(2,2));
t2960 = cos(qJ(2,2));
t2860 = g(1) * t2914 + g(2) * t2917;
t2993 = g(3) * t2952 - t2863 * t2961;
t2984 = t2860 * t2941 - t2993 * t2942;
t2972 = t2960 * t2848 + t2984 * t2951;
t2944 = legFrame(3,2);
t2913 = sin(t2944);
t2916 = cos(t2944);
t2862 = g(1) * t2916 - g(2) * t2913;
t2949 = sin(qJ(1,3));
t2958 = cos(qJ(1,3));
t2847 = g(3) * t2958 + t2862 * t2949;
t2948 = sin(qJ(2,3));
t2957 = cos(qJ(2,3));
t2859 = g(1) * t2913 + g(2) * t2916;
t2994 = g(3) * t2949 - t2862 * t2958;
t2985 = t2859 * t2941 - t2994 * t2942;
t2973 = t2957 * t2847 + t2985 * t2948;
t2931 = t2942 ^ 2;
t3152 = t2931 - 0.1e1;
t2919 = t2948 * pkin(6);
t3170 = t2919 + pkin(1);
t2920 = t2951 * pkin(6);
t3169 = t2920 + pkin(1);
t2921 = t2954 * pkin(6);
t3168 = t2921 + pkin(1);
t2947 = sin(qJ(3,3));
t2888 = pkin(5) * t2947 + pkin(2);
t2956 = cos(qJ(3,3));
t2932 = t2956 ^ 2;
t3149 = pkin(2) * t2932;
t3033 = -t2888 + 0.2e1 * t3149;
t3167 = t2958 * t3033;
t2950 = sin(qJ(3,2));
t2892 = pkin(5) * t2950 + pkin(2);
t2959 = cos(qJ(3,2));
t2935 = t2959 ^ 2;
t3148 = pkin(2) * t2935;
t3032 = -t2892 + 0.2e1 * t3148;
t3166 = t2961 * t3032;
t2953 = sin(qJ(3,1));
t2896 = pkin(5) * t2953 + pkin(2);
t2962 = cos(qJ(3,1));
t2938 = t2962 ^ 2;
t3147 = pkin(2) * t2938;
t3031 = -t2896 + 0.2e1 * t3147;
t3165 = t2964 * t3031;
t3090 = t2962 * t2963;
t3161 = -pkin(2) * t3090 - t2921;
t3092 = t2959 * t2960;
t3160 = -pkin(2) * t3092 - t2920;
t3094 = t2956 * t2957;
t3159 = -pkin(2) * t3094 - t2919;
t3158 = t2861 * t2942 + t2992 * t2941;
t3157 = t2860 * t2942 + t2993 * t2941;
t3156 = t2859 * t2942 + t2994 * t2941;
t3140 = pkin(6) * t2941;
t3027 = (t2957 + 0.1e1) * (t2957 - 0.1e1) * t3140;
t3132 = t2958 * pkin(2);
t3066 = t2948 * t3132;
t3111 = t2941 * t2949;
t3155 = t2947 * (-(pkin(1) * t3111 - pkin(5) * t2958) * t2948 + t2949 * t3027) + t3066;
t3026 = (t2960 + 0.1e1) * (t2960 - 0.1e1) * t3140;
t3131 = t2961 * pkin(2);
t3065 = t2951 * t3131;
t3109 = t2941 * t2952;
t3154 = t2950 * (-(pkin(1) * t3109 - pkin(5) * t2961) * t2951 + t2952 * t3026) + t3065;
t3025 = (t2963 + 0.1e1) * (t2963 - 0.1e1) * t3140;
t3130 = t2964 * pkin(2);
t3064 = t2954 * t3130;
t3107 = t2941 * t2955;
t3153 = t2953 * (-(pkin(1) * t3107 - pkin(5) * t2964) * t2954 + t2955 * t3025) + t3064;
t3151 = pkin(1) * t2941;
t3150 = pkin(1) * t2942;
t3146 = pkin(2) * t2947;
t3145 = pkin(2) * t2950;
t3144 = pkin(2) * t2953;
t3143 = pkin(2) * t2956;
t3142 = pkin(2) * t2959;
t3141 = pkin(2) * t2962;
t3139 = pkin(6) * t2942;
t3138 = pkin(6) * t2957;
t3137 = pkin(6) * t2960;
t3136 = pkin(6) * t2963;
t3135 = t2948 * pkin(2);
t3134 = t2951 * pkin(2);
t3133 = t2954 * pkin(2);
t3129 = -0.2e1 * pkin(2) * pkin(6);
t2904 = pkin(1) * t3146;
t3083 = t2956 * t3135;
t2868 = -t3083 + t3138;
t3119 = t2868 * t2942;
t2823 = 0.1e1 / (pkin(1) * t3119 + (t3159 * pkin(5) + t2904) * t2941);
t2887 = t3171 * pkin(1) + mrSges(1,1);
t2886 = t2887 * g(3);
t2965 = mrSges(1,2) * g(3);
t2877 = -t2956 * mrSges(3,1) + mrSges(3,2) * t2947 - mrSges(2,1);
t2943 = mrSges(3,3) - mrSges(2,2);
t2982 = -t2877 * t2957 + t2943 * t2948;
t3059 = t3171 * pkin(5) + mrSges(2,3);
t2988 = -(t2877 * t2948 + t2943 * t2957) * t2942 - (mrSges(3,1) * t2947 + mrSges(3,2) * t2956 + t3059) * t2941;
t3128 = (t2886 * t2949 + t2965 * t2958 + (t2982 * t2949 + t2988 * t2958) * g(3) + ((-t2887 - t2982) * t2958 + (mrSges(1,2) + t2988) * t2949) * t2862) * t2823;
t2905 = pkin(1) * t3145;
t3081 = t2959 * t3134;
t2869 = -t3081 + t3137;
t3118 = t2869 * t2942;
t2824 = 0.1e1 / (pkin(1) * t3118 + (t3160 * pkin(5) + t2905) * t2941);
t2878 = -t2959 * mrSges(3,1) + mrSges(3,2) * t2950 - mrSges(2,1);
t2981 = -t2878 * t2960 + t2943 * t2951;
t2987 = -(t2878 * t2951 + t2943 * t2960) * t2942 - (mrSges(3,1) * t2950 + mrSges(3,2) * t2959 + t3059) * t2941;
t3127 = (t2886 * t2952 + t2965 * t2961 + (t2981 * t2952 + t2987 * t2961) * g(3) + ((-t2887 - t2981) * t2961 + (mrSges(1,2) + t2987) * t2952) * t2863) * t2824;
t2906 = pkin(1) * t3144;
t3079 = t2962 * t3133;
t2870 = -t3079 + t3136;
t3117 = t2870 * t2942;
t2825 = 0.1e1 / (pkin(1) * t3117 + (t3161 * pkin(5) + t2906) * t2941);
t2879 = -t2962 * mrSges(3,1) + mrSges(3,2) * t2953 - mrSges(2,1);
t2980 = -t2879 * t2963 + t2943 * t2954;
t2986 = -(t2879 * t2954 + t2943 * t2963) * t2942 - (mrSges(3,1) * t2953 + mrSges(3,2) * t2962 + t3059) * t2941;
t3126 = (t2886 * t2955 + t2965 * t2964 + (t2980 * t2955 + t2986 * t2964) * g(3) + ((-t2887 - t2980) * t2964 + (mrSges(1,2) + t2986) * t2955) * t2864) * t2825;
t2969 = pkin(2) ^ 2;
t3116 = t2932 * t2969;
t3115 = t2935 * t2969;
t3114 = t2938 * t2969;
t3113 = t2941 * t2942;
t3112 = t2941 * t2948;
t3110 = t2941 * t2951;
t3108 = t2941 * t2954;
t3106 = t2942 * t2958;
t3105 = t2942 * t2961;
t3104 = t2942 * t2964;
t3103 = t2947 * t2957;
t3102 = t2947 * t2958;
t3101 = t2949 * t2957;
t3100 = t2950 * t2960;
t3099 = t2950 * t2961;
t3098 = t2952 * t2960;
t3097 = t2953 * t2963;
t3096 = t2953 * t2964;
t3095 = t2955 * t2963;
t3088 = pkin(2) * pkin(5) * t2941;
t3087 = t2942 * t3146;
t3086 = t2942 * t3145;
t3085 = t2942 * t3144;
t3084 = pkin(2) * t3102;
t3082 = pkin(2) * t3099;
t3080 = pkin(2) * t3096;
t3075 = t2941 * t3138;
t3074 = t2941 * t3137;
t3073 = t2941 * t3136;
t3072 = pkin(6) * t3103;
t3071 = pkin(6) * t3100;
t3070 = pkin(6) * t3097;
t3069 = t2958 * t3138;
t3068 = t2961 * t3137;
t3067 = t2964 * t3136;
t3063 = 0.2e1 * pkin(2) * t3139;
t3062 = t2956 * t3129;
t3061 = t2959 * t3129;
t3060 = t2962 * t3129;
t3058 = t3152 * pkin(6);
t2933 = 0.1e1 / t2956;
t3054 = (-t2973 * t2943 + (-t2847 * t2948 + t2985 * t2957) * t2877) * t2823 * t2933;
t2936 = 0.1e1 / t2959;
t3053 = (-t2972 * t2943 + (-t2848 * t2951 + t2984 * t2960) * t2878) * t2824 * t2936;
t2939 = 0.1e1 / t2962;
t3052 = (-t2971 * t2943 + (-t2849 * t2954 + t2983 * t2963) * t2879) * t2825 * t2939;
t2889 = pkin(5) + t3146;
t3051 = t2889 * t3113;
t3050 = t2889 * t3112;
t2893 = pkin(5) + t3145;
t3049 = t2893 * t3113;
t3048 = t2893 * t3110;
t2897 = pkin(5) + t3144;
t3047 = t2897 * t3113;
t3046 = t2897 * t3108;
t3045 = t2948 * t3116;
t3044 = t2951 * t3115;
t3043 = t2954 * t3114;
t3042 = t2941 * t3106;
t3041 = t2941 * t3105;
t3040 = t2941 * t3104;
t3039 = t2947 * t3112;
t3038 = t2950 * t3110;
t3037 = t2953 * t3108;
t3036 = t3170 * t3103;
t3035 = t3169 * t3100;
t3034 = t3168 * t3097;
t2968 = pkin(6) ^ 2;
t3030 = -t2968 + t3116;
t3029 = -t2968 + t3115;
t3028 = -t2968 + t3114;
t3024 = t2932 * t3066;
t3023 = t2935 * t3065;
t3022 = t2938 * t3064;
t3021 = t2913 * t3072;
t3020 = t2916 * t3072;
t3019 = t2914 * t3071;
t3018 = t2917 * t3071;
t3017 = t2915 * t3070;
t3016 = t2918 * t3070;
t2934 = t2957 ^ 2;
t2880 = (t2934 - 0.2e1) * t3146 - pkin(5);
t2937 = t2960 ^ 2;
t2881 = (t2937 - 0.2e1) * t3145 - pkin(5);
t2940 = t2963 ^ 2;
t2882 = (t2940 - 0.2e1) * t3144 - pkin(5);
t3015 = t3152 * t2958 * t2889;
t3014 = t3152 * t2961 * t2893;
t3013 = t3152 * t2964 * t2897;
t2903 = pkin(1) * t3139;
t2970 = 0.1e1 / pkin(2);
t3012 = ((-t3156 * mrSges(3,1) + t2973 * mrSges(3,2)) * t2956 + (t2973 * mrSges(3,1) + t3156 * mrSges(3,2)) * t2947) / ((-t2956 * t3088 + t2903) * t2957 - t3083 * t3150 + t2941 * (-pkin(5) * t2919 + t2904)) * t2933 * t2970;
t3011 = ((-t3157 * mrSges(3,1) + t2972 * mrSges(3,2)) * t2959 + (t2972 * mrSges(3,1) + t3157 * mrSges(3,2)) * t2950) / ((-t2959 * t3088 + t2903) * t2960 - t3081 * t3150 + t2941 * (-pkin(5) * t2920 + t2905)) * t2936 * t2970;
t3010 = ((-t3158 * mrSges(3,1) + t2971 * mrSges(3,2)) * t2962 + (t2971 * mrSges(3,1) + t3158 * mrSges(3,2)) * t2953) / ((-t2962 * t3088 + t2903) * t2963 - t3079 * t3150 + t2941 * (-pkin(5) * t2921 + t2906)) * t2939 * t2970;
t3009 = t2942 * t3050;
t3008 = t2942 * t3048;
t3007 = t2942 * t3046;
t3006 = t2913 * t3042;
t3005 = t2914 * t3041;
t3004 = t2915 * t3040;
t3003 = t2916 * t3042;
t3002 = t2917 * t3041;
t3001 = t2918 * t3040;
t3000 = pkin(2) * t2957 * t3039;
t2999 = pkin(2) * t2960 * t3038;
t2998 = pkin(2) * t2963 * t3037;
t2997 = t3042 * t2919;
t2996 = t3041 * t2920;
t2995 = t3040 * t2921;
t2991 = t2949 * t3030;
t2990 = t2952 * t3029;
t2989 = t3028 * t2955;
t2979 = t2949 * t3000;
t2978 = t2952 * t2999;
t2977 = t2955 * t2998;
t2924 = pkin(1) * t2954;
t2923 = pkin(1) * t2951;
t2922 = pkin(1) * t2948;
t2902 = t2924 + pkin(6);
t2901 = t2923 + pkin(6);
t2900 = t2922 + pkin(6);
t2898 = 0.2e1 * t2921 + pkin(1);
t2894 = 0.2e1 * t2920 + pkin(1);
t2890 = 0.2e1 * t2919 + pkin(1);
t2885 = t2924 - t3058;
t2884 = t2923 - t3058;
t2883 = t2922 - t3058;
t2876 = (t2940 - 0.1e1) * t3144 - pkin(5);
t2875 = (t2937 - 0.1e1) * t3145 - pkin(5);
t2874 = (t2934 - 0.1e1) * t3146 - pkin(5);
t2858 = -t2931 * t2921 + t3168;
t2857 = -t2931 * t2920 + t3169;
t2856 = -t2931 * t2919 + t3170;
t2843 = t2915 * t2931 - t2915 - t3001;
t2842 = t2918 * t2931 - t2918 + t3004;
t2841 = t2914 * t2931 - t2914 - t3002;
t2840 = t2917 * t2931 - t2917 + t3005;
t2839 = t2913 * t2931 - t2913 - t3003;
t2838 = t2916 * t2931 - t2916 + t3006;
t2837 = t2882 * t2964 * t2941 + t2955 * t3168;
t2836 = t2881 * t2961 * t2941 + t2952 * t3169;
t2835 = t2880 * t2958 * t2941 + t2949 * t3170;
t2834 = t2870 * t3104 + t2955 * t3161;
t2833 = t2869 * t3105 + t2952 * t3160;
t2832 = t2868 * t3106 + t2949 * t3159;
t2831 = t2898 * t3107 + t3013;
t2830 = t2894 * t3109 + t3014;
t2829 = t2890 * t3111 + t3015;
t2828 = t2902 * t3107 + t2954 * t3013;
t2827 = t2901 * t3109 + t2951 * t3014;
t2826 = t2900 * t3111 + t2948 * t3015;
t1 = [((t2870 * t2915 + t2918 * t3080) * t2941 + t2834 * t2918 - t2915 * t3085) * t3126 + (((-t2882 * t2915 - t2918 * t3067) * t2962 + (t2918 * t3165 - t3017) * t2954) * t2931 + ((0.2e1 * t2915 * t3108 + t2918 * t3095) * t3147 + (t2837 * t2918 - t2915 * t3073) * t2962 + (-t2896 * t2915 + t2964 * t3016) * t3108) * t2942 - t2918 * t3022 + (t2876 * t2915 - t2918 * t2977) * t2962 + t3153 * t2918 + t2915 * t3034) * t3052 + ((-t2941 * t2918 * t2989 + t2843 * t3060) * t2940 + (t2843 * t3043 - (t2831 * t2918 + t2915 * t3047) * t3141 + pkin(6) * (t2858 * t2915 + t2918 * t2995)) * t2963 - (pkin(6) * t3001 + t2885 * t2915) * t3141 - pkin(6) * (t2828 * t2918 + t2915 * t3007)) * t3010 + ((t2869 * t2914 + t2917 * t3082) * t2941 + t2833 * t2917 - t2914 * t3086) * t3127 + (((-t2881 * t2914 - t2917 * t3068) * t2959 + (t2917 * t3166 - t3019) * t2951) * t2931 + ((0.2e1 * t2914 * t3110 + t2917 * t3098) * t3148 + (t2836 * t2917 - t2914 * t3074) * t2959 + (-t2892 * t2914 + t2961 * t3018) * t3110) * t2942 - t2917 * t3023 + (t2875 * t2914 - t2917 * t2978) * t2959 + t3154 * t2917 + t2914 * t3035) * t3053 + ((-t2941 * t2917 * t2990 + t2841 * t3061) * t2937 + (t2841 * t3044 - (t2830 * t2917 + t2914 * t3049) * t3142 + pkin(6) * (t2857 * t2914 + t2917 * t2996)) * t2960 - (pkin(6) * t3002 + t2884 * t2914) * t3142 - pkin(6) * (t2827 * t2917 + t2914 * t3008)) * t3011 + ((t2868 * t2913 + t2916 * t3084) * t2941 + t2832 * t2916 - t2913 * t3087) * t3128 + (((-t2880 * t2913 - t2916 * t3069) * t2956 + (t2916 * t3167 - t3021) * t2948) * t2931 + ((0.2e1 * t2913 * t3112 + t2916 * t3101) * t3149 + (t2835 * t2916 - t2913 * t3075) * t2956 + (-t2888 * t2913 + t2958 * t3020) * t3112) * t2942 - t2916 * t3024 + (t2874 * t2913 - t2916 * t2979) * t2956 + t3155 * t2916 + t2913 * t3036) * t3054 + ((-t2941 * t2916 * t2991 + t2839 * t3062) * t2934 + (t2839 * t3045 - (t2829 * t2916 + t2913 * t3051) * t3143 + pkin(6) * (t2856 * t2913 + t2916 * t2997)) * t2957 - (pkin(6) * t3003 + t2883 * t2913) * t3143 - pkin(6) * (t2826 * t2916 + t2913 * t3009)) * t3012 - g(1) * m(4); ((t2870 * t2918 - t2915 * t3080) * t2941 - t2834 * t2915 - t2918 * t3085) * t3126 + (((-t2882 * t2918 + t2915 * t3067) * t2962 + (-t2915 * t3165 - t3016) * t2954) * t2931 + (-(t2915 * t3095 - 0.2e1 * t2918 * t3108) * t3147 + (-t2837 * t2915 - t2918 * t3073) * t2962 - (t2896 * t2918 + t2964 * t3017) * t3108) * t2942 + t2915 * t3022 + (t2876 * t2918 + t2915 * t2977) * t2962 - t3153 * t2915 + t2918 * t3034) * t3052 + ((t3028 * t2915 * t3107 + t2842 * t3060) * t2940 + (t2842 * t3043 + (t2831 * t2915 - t2918 * t3047) * t3141 + (t2858 * t2918 - t2915 * t2995) * pkin(6)) * t2963 - (-pkin(6) * t3004 + t2885 * t2918) * t3141 + pkin(6) * (t2828 * t2915 - t2918 * t3007)) * t3010 + ((t2869 * t2917 - t2914 * t3082) * t2941 - t2833 * t2914 - t2917 * t3086) * t3127 + (((-t2881 * t2917 + t2914 * t3068) * t2959 + (-t2914 * t3166 - t3018) * t2951) * t2931 + (-(t2914 * t3098 - 0.2e1 * t2917 * t3110) * t3148 + (-t2836 * t2914 - t2917 * t3074) * t2959 - (t2892 * t2917 + t2961 * t3019) * t3110) * t2942 + t2914 * t3023 + (t2875 * t2917 + t2914 * t2978) * t2959 - t3154 * t2914 + t2917 * t3035) * t3053 + ((t3029 * t2914 * t3109 + t2840 * t3061) * t2937 + (t2840 * t3044 + (t2830 * t2914 - t2917 * t3049) * t3142 + (t2857 * t2917 - t2914 * t2996) * pkin(6)) * t2960 - (-pkin(6) * t3005 + t2884 * t2917) * t3142 + pkin(6) * (t2827 * t2914 - t2917 * t3008)) * t3011 + ((t2868 * t2916 - t2913 * t3084) * t2941 - t2832 * t2913 - t2916 * t3087) * t3128 + (((-t2880 * t2916 + t2913 * t3069) * t2956 + (-t2913 * t3167 - t3020) * t2948) * t2931 + (-(t2913 * t3101 - 0.2e1 * t2916 * t3112) * t3149 + (-t2835 * t2913 - t2916 * t3075) * t2956 - (t2888 * t2916 + t2958 * t3021) * t3112) * t2942 + t2913 * t3024 + (t2874 * t2916 + t2913 * t2979) * t2956 - t3155 * t2913 + t2916 * t3036) * t3054 + ((t3030 * t2913 * t3111 + t2838 * t3062) * t2934 + (t2838 * t3045 + (t2829 * t2913 - t2916 * t3051) * t3143 + (t2856 * t2916 - t2913 * t2997) * pkin(6)) * t2957 - (-pkin(6) * t3006 + t2883 * t2916) * t3143 + pkin(6) * (t2826 * t2913 - t2916 * t3009)) * t3012 - g(2) * m(4); (t3161 * t2964 + (-t2941 * t3144 - t3117) * t2955) * t3126 + (t2955 * (pkin(6) * t3090 - t3031 * t2954) * t2931 + ((-t2882 * t3107 + t2964 * t3168) * t2962 + (-t2955 * pkin(6) * t3037 + t2938 * t3130) * t2963) * t2942 + t2938 * t2955 * t3133 - t2962 * t2964 * t2998 + (-t2955 * t2896 - t3096 * t3151) * t2954 + t3025 * t3096) * t3052 - ((t2955 * t2962 * t3063 + t3028 * t2964) * t2940 + ((t2897 * t3107 + t2898 * t2964) * t3141 - t2954 * t2942 * t2989) * t2963 + (t2902 * t2964 + (-t2942 * t3141 + t3046) * t2955) * pkin(6)) * t2941 * t3010 + (t3160 * t2961 + (-t2941 * t3145 - t3118) * t2952) * t3127 + (t2952 * (pkin(6) * t3092 - t3032 * t2951) * t2931 + ((-t2881 * t3109 + t2961 * t3169) * t2959 + (-t2952 * pkin(6) * t3038 + t2935 * t3131) * t2960) * t2942 + t2935 * t2952 * t3134 - t2959 * t2961 * t2999 + (-t2952 * t2892 - t3099 * t3151) * t2951 + t3026 * t3099) * t3053 - ((t2952 * t2959 * t3063 + t3029 * t2961) * t2937 + ((t2893 * t3109 + t2894 * t2961) * t3142 - t2951 * t2942 * t2990) * t2960 + (t2901 * t2961 + (-t2942 * t3142 + t3048) * t2952) * pkin(6)) * t2941 * t3011 + (t3159 * t2958 + (-t2941 * t3146 - t3119) * t2949) * t3128 + (t2949 * (pkin(6) * t3094 - t3033 * t2948) * t2931 + ((-t2880 * t3111 + t2958 * t3170) * t2956 + (-t2949 * pkin(6) * t3039 + t2932 * t3132) * t2957) * t2942 + t2932 * t2949 * t3135 - t2956 * t2958 * t3000 + (-t2949 * t2888 - t3102 * t3151) * t2948 + t3027 * t3102) * t3054 - ((t2949 * t2956 * t3063 + t3030 * t2958) * t2934 + ((t2889 * t3111 + t2890 * t2958) * t3143 - t2948 * t2942 * t2991) * t2957 + (t2900 * t2958 + (-t2942 * t3143 + t3050) * t2949) * pkin(6)) * t2941 * t3012 - g(3) * m(4);];
taugX  = t1;
