% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V1G3A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:10:56
% EndTime: 2020-08-06 23:16:11
% DurationCPUTime: 333.16s
% Computational Cost: add. (2646468->1902), mult. (6657444->3485), div. (84645->23), fcn. (5270355->26), ass. (0->1263)
t3026 = cos(qJ(3,3));
t2988 = 0.1e1 / t3026;
t3931 = 0.2e1 * t2988;
t3029 = cos(qJ(3,2));
t2994 = 0.1e1 / t3029;
t3930 = 0.2e1 * t2994;
t3032 = cos(qJ(3,1));
t3000 = 0.1e1 / t3032;
t3929 = 0.2e1 * t3000;
t3025 = sin(qJ(1,1));
t3034 = cos(qJ(1,1));
t3035 = xDP(3);
t3016 = legFrame(1,2);
t2957 = sin(t3016);
t2960 = cos(t3016);
t3036 = xDP(2);
t3037 = xDP(1);
t3162 = t2957 * t3036 - t2960 * t3037;
t2848 = t3025 * t3162 - t3034 * t3035;
t2869 = t2957 * t3037 + t2960 * t3036;
t3033 = cos(qJ(2,1));
t3761 = t2869 * t3033;
t2866 = pkin(6) * t3761;
t2797 = pkin(5) * t2848 + t2866;
t3842 = pkin(6) * t3033;
t2842 = t2848 * t3842;
t2851 = t3025 * t3035 + t3034 * t3162;
t3003 = t3033 ^ 2;
t2952 = t3003 - 0.2e1;
t3023 = sin(qJ(3,1));
t2965 = t3023 * pkin(2);
t3602 = t2952 * t2965;
t2902 = -pkin(5) + t3602;
t3024 = sin(qJ(2,1));
t2966 = t3024 * pkin(6);
t2930 = t2966 + pkin(1);
t3007 = cos(pkin(3));
t2982 = t3007 ^ 2;
t2999 = t3032 ^ 2;
t3006 = sin(pkin(3));
t3751 = (t3033 + 0.1e1) * (t3033 - 0.1e1);
t3845 = pkin(6) * t3006;
t3332 = t3751 * t3845;
t3855 = pkin(2) * t3024;
t3552 = t2848 * t3855;
t3725 = t3006 * t3024;
t3609 = -0.2e1 * t3725;
t3676 = t3024 * t3033;
t3764 = t2851 * t3006;
t3846 = pkin(5) * t2869;
t3859 = pkin(2) * t2999;
t3872 = 0.2e1 * t2999 - 0.1e1;
t2716 = ((-t2869 * t2902 - t2842) * t3032 + (t3872 * t2848 * pkin(2) - t2797 * t3023) * t3024) * t2982 + (-(t2851 * t3033 + t2869 * t3609) * t3859 + ((t2848 * t3602 - t2797) * t3006 - t2930 * t2851) * t3032 + ((t2842 - t3846) * t3023 - t2869 * pkin(2)) * t3725) * t3007 - t2999 * t3552 + ((t2869 * t3751 + t3676 * t3764) * t2965 - t3846) * t3032 + ((pkin(1) * t3764 + t2797) * t3024 - t2851 * t3332 + pkin(1) * t3761) * t3023 + t3552;
t2946 = pkin(1) * t2965;
t3677 = t3024 * t3032;
t2893 = -pkin(2) * t3677 + t3842;
t3758 = t2893 * t3007;
t3671 = t3032 * t3033;
t3915 = -pkin(2) * t3671 - t2966;
t2827 = pkin(1) * t3758 + (pkin(5) * t3915 + t2946) * t3006;
t2819 = 0.1e1 / t2827;
t3771 = t2819 * t3000;
t2710 = t2716 * t3771;
t2701 = pkin(6) * t2710;
t3728 = t3006 * t3007;
t3120 = t2848 * t3728 - t2869 * t2982;
t2794 = t2869 + t3120;
t2929 = 0.2e1 * t2966 + pkin(1);
t2969 = pkin(1) * t3024;
t2933 = t2969 + pkin(6);
t2928 = t2965 + pkin(5);
t3087 = (-t2848 * t2982 - t2869 * t3728 + t2848) * t2928;
t3105 = t3120 * pkin(6);
t3045 = pkin(6) ^ 2;
t3048 = pkin(2) ^ 2;
t3733 = t2999 * t3048;
t3344 = -t3045 + t3733;
t3406 = t3024 * t3733;
t3850 = pkin(2) * t3032;
t3622 = pkin(6) * t3850;
t3545 = 0.2e1 * t3622;
t2740 = (t2794 * t3545 + t3344 * t3764) * t3003 + (-t2794 * t3406 + (t2929 * t3764 + t3087) * t3850 + (t2869 * t2930 + t3024 * t3105) * pkin(6)) * t3033 - (t2869 * t2933 + t3105) * t3850 + (t2933 * t3764 + t3024 * t3087) * pkin(6);
t2884 = t3006 * (-pkin(5) * t2966 + t2946);
t3868 = pkin(1) * t3007;
t2940 = pkin(6) * t3868;
t3703 = t3007 * t3024;
t3606 = pkin(1) * t3703;
t3326 = t3032 * t3606;
t3718 = t3006 * t3032;
t3588 = pkin(2) * t3718;
t2809 = (-pkin(5) * t3588 + t2940) * t3033 - pkin(2) * t3326 + t2884;
t2802 = 0.1e1 / t2809;
t3498 = t2740 * t2802 * t3023;
t2722 = t3000 * t3498;
t2617 = t2722 - t2701;
t3049 = 0.1e1 / pkin(2);
t3791 = t2802 * t3049;
t3497 = t2740 * t3791;
t3284 = t3000 * t3497;
t3219 = pkin(5) * t3284;
t2620 = -t2701 + t3219;
t2779 = (t2842 - pkin(2) * (t2848 * t3677 + t2869 * t3023)) * t3007 + (t2866 - pkin(2) * (-t2848 * t3023 + t2869 * t3677)) * t3006 - t3915 * t2851;
t2773 = t2779 * t2819;
t2767 = t3007 * t2773;
t2656 = t2767 + t2710;
t2689 = -0.2e1 * t2701;
t2695 = pkin(1) * t2710;
t3792 = t2802 * t3000;
t3499 = t2740 * t3792;
t2734 = pkin(2) * t3499;
t2972 = pkin(1) * t3003;
t2908 = t2972 - t2930;
t3046 = pkin(5) ^ 2;
t2979 = t3046 + t3048;
t3051 = pkin(1) ^ 2;
t3376 = t3051 + t2979;
t2911 = t3045 + t3376;
t2917 = t2966 / 0.2e1 + pkin(1);
t2927 = pkin(5) * t3023 + pkin(2);
t2945 = pkin(5) * t2965;
t2936 = 0.2e1 * t2945;
t2939 = t3003 - 0.1e1 / 0.2e1;
t2949 = pkin(1) * t2966;
t3900 = 0.2e1 * pkin(6);
t3005 = pkin(1) * t3900;
t3039 = -0.3e1 * t3045;
t3041 = pkin(6) / 0.2e1;
t2698 = t3045 * t2710;
t3117 = -pkin(6) * t2722 + t2698;
t3189 = t3033 * t3284;
t3141 = t3023 * t3189;
t2728 = pkin(1) * t3284;
t3156 = t3024 * t2728;
t3190 = t3006 * t3284;
t3157 = pkin(1) * t3190;
t3434 = t2819 * t3676;
t3257 = t2779 * t3434;
t3165 = t2928 * t3257;
t3263 = t2928 * t2767;
t3225 = 0.2e1 * t3263;
t3238 = 0.3e1 * t3045 + t3376;
t3239 = t3024 * t3499;
t3810 = t2716 * t3000;
t3511 = t3006 * t3810;
t3242 = t2930 * t3511;
t3002 = t3033 * t3003;
t3770 = t2819 * t3006;
t3467 = t2779 * t3770;
t3260 = t3002 * t3467;
t3754 = (t3007 + 0.1e1) * (t3007 - 0.1e1);
t3261 = t3754 * t2773;
t3717 = t3006 * t3033;
t3572 = pkin(5) * t3717;
t2881 = t3572 + t3606;
t3001 = 0.1e1 / t3032 ^ 2;
t3695 = t3007 * t3033;
t3557 = pkin(1) * t3695;
t3785 = 0.1e1 / (pkin(6) * t3557 - t2881 * t3850 + t2884) * t3001;
t3812 = t2716 * t2819;
t3296 = t3785 * t3812;
t3880 = t2982 - 0.1e1;
t3323 = t3880 * t3676;
t3335 = pkin(6) * t2767;
t3371 = t3006 * t2940;
t3571 = pkin(6) * t3754;
t3375 = -0.2e1 * t3571;
t3627 = t3046 / 0.2e1 + t3048 / 0.2e1;
t3377 = t3045 + t3627;
t3625 = t3048 - t3045;
t3378 = t2945 + t3625;
t3294 = t3023 * t2710;
t2677 = pkin(2) * t3294;
t2694 = pkin(5) * t2710;
t2725 = pkin(6) * t3284;
t3634 = t2694 + t2725;
t3381 = t2677 + t3634;
t3704 = t3007 * t3023;
t3398 = t3006 * t3704;
t2998 = t3032 * t2999;
t3858 = pkin(2) * t3006;
t3715 = t3048 * t3858;
t3407 = t2998 * t3715;
t3423 = t3048 * t3754;
t3424 = t3032 * t3754;
t3435 = t2819 * t3733;
t3496 = t2740 * t3785;
t3809 = t2716 * t3048;
t3508 = t3000 * t3809;
t3568 = t2982 * t2966;
t3587 = pkin(2) * t3717;
t3637 = t2701 / 0.2e1 - t2722 / 0.2e1;
t3231 = pkin(6) * t2694;
t3640 = t3231 / 0.2e1 + pkin(6) * t3263;
t3649 = t3381 * t3024 + t2728;
t3750 = t2982 * t3045;
t3824 = t2620 * t3024;
t3892 = -0.2e1 * t2982;
t3732 = t3000 * t3007;
t3510 = t2716 * t3732;
t2669 = t2819 * t3510 / 0.2e1;
t3772 = t2819 * t2982;
t3414 = t2779 * t3772;
t3897 = 0.2e1 * t3414 + 0.2e1 * t2669 - t2773;
t3901 = -0.2e1 * pkin(6);
t3903 = 0.2e1 * pkin(1);
t2500 = (t2802 * (((t2617 * t3371 + (t2999 * t3508 * t3868 + ((t3903 + 0.3e1 * t2966 - 0.3e1 * t3568) * t3733 + (t2917 * t3901 + t3024 * t3750) * pkin(6)) * t2779) * t3770) * t3003 + (t3407 * t3897 + (t3024 * t3225 + t3649) * t2999 * t3423 + ((-(t2722 + t2689) * t2969 + t3117) * t3007 + ((t2945 + t3377) * t3892 + t2936 + 0.4e1 * t2949 + t3238) * t2773) * t3588 + (-t2620 * t2965 / 0.2e1 - t2734 / 0.2e1 + t3640) * t3024 * t3375) * t3033 + (t3406 * t3897 - t2617 * t2930 * t3007 + (t3005 + ((t2945 + t3627) * t3892 + t2936 + t2911) * t3024) * t2773) * t3845 + (-(t3039 + t3733) * t3260 + ((t2689 + t3219) * t2965 + t2734 - t3045 * t3284 - 0.4e1 * t3640) * t3003 + (t3156 + t3225 + t3381) * pkin(6)) * pkin(2) * t3424) * t2779 * t3771 + ((t2930 * t3033 * t3261 + t3157) * t3859 + (t3378 * t3003 * t3261 - (-t3499 + (t2767 * t2933 - t2620) * t3023) * t3587 + pkin(1) * t3239 * t3704) * t3032 + (-t3141 * t3868 - t3006 * ((t2695 - t3824) * t3023 - t3239) + (t3880 * t3032 * t2933 + t2908 * t3398 + t2927 * t3323) * t2773) * pkin(6)) * t3496) + (t3033 * t2656 * t3407 + (t3242 + (t2928 * t3676 * t3754 + (t2966 + t2972) * t3728) * t2779) * t3435 + (((t2969 + t3041) * t2767 + t3637) * t3717 - t2939 * t2928 * t3261) * t3545 - (t3165 * t3571 + (t3335 * t2972 + (-t3335 + t2617) * t2930) * t3006) * pkin(6)) * t3296) * t3049;
t3022 = sin(qJ(1,2));
t3031 = cos(qJ(1,2));
t3015 = legFrame(2,2);
t2956 = sin(t3015);
t2959 = cos(t3015);
t3163 = t2956 * t3036 - t2959 * t3037;
t2847 = t3022 * t3163 - t3031 * t3035;
t2868 = t2956 * t3037 + t2959 * t3036;
t3030 = cos(qJ(2,2));
t3762 = t2868 * t3030;
t2865 = pkin(6) * t3762;
t2796 = pkin(5) * t2847 + t2865;
t3843 = pkin(6) * t3030;
t2841 = t2847 * t3843;
t2850 = t3022 * t3035 + t3031 * t3163;
t2997 = t3030 ^ 2;
t2951 = t2997 - 0.2e1;
t3020 = sin(qJ(3,2));
t2963 = t3020 * pkin(2);
t3603 = t2951 * t2963;
t2901 = -pkin(5) + t3603;
t3021 = sin(qJ(2,2));
t2964 = t3021 * pkin(6);
t2926 = t2964 + pkin(1);
t2993 = t3029 ^ 2;
t3752 = (t3030 + 0.1e1) * (t3030 - 0.1e1);
t3333 = t3752 * t3845;
t3856 = pkin(2) * t3021;
t3554 = t2847 * t3856;
t3726 = t3006 * t3021;
t3610 = -0.2e1 * t3726;
t3682 = t3021 * t3030;
t3765 = t2850 * t3006;
t3847 = pkin(5) * t2868;
t3860 = pkin(2) * t2993;
t3875 = 0.2e1 * t2993 - 0.1e1;
t2715 = ((-t2868 * t2901 - t2841) * t3029 + (t3875 * t2847 * pkin(2) - t2796 * t3020) * t3021) * t2982 + (-(t2850 * t3030 + t2868 * t3610) * t3860 + ((t2847 * t3603 - t2796) * t3006 - t2926 * t2850) * t3029 + ((t2841 - t3847) * t3020 - t2868 * pkin(2)) * t3726) * t3007 - t2993 * t3554 + ((t2868 * t3752 + t3682 * t3765) * t2963 - t3847) * t3029 + ((pkin(1) * t3765 + t2796) * t3021 - t2850 * t3333 + pkin(1) * t3762) * t3020 + t3554;
t2944 = pkin(1) * t2963;
t3683 = t3021 * t3029;
t2892 = -pkin(2) * t3683 + t3843;
t3759 = t2892 * t3007;
t3673 = t3029 * t3030;
t3914 = -pkin(2) * t3673 - t2964;
t2826 = pkin(1) * t3759 + (pkin(5) * t3914 + t2944) * t3006;
t2816 = 0.1e1 / t2826;
t3777 = t2816 * t2994;
t2708 = t2715 * t3777;
t2700 = pkin(6) * t2708;
t3121 = t2847 * t3728 - t2868 * t2982;
t2793 = t2868 + t3121;
t2925 = 0.2e1 * t2964 + pkin(1);
t2968 = pkin(1) * t3021;
t2932 = t2968 + pkin(6);
t2924 = t2963 + pkin(5);
t3088 = (-t2847 * t2982 - t2868 * t3728 + t2847) * t2924;
t3106 = t3121 * pkin(6);
t3740 = t2993 * t3048;
t3345 = -t3045 + t3740;
t3409 = t3021 * t3740;
t3852 = pkin(2) * t3029;
t3623 = pkin(6) * t3852;
t3547 = 0.2e1 * t3623;
t2739 = (t2793 * t3547 + t3345 * t3765) * t2997 + (-t2793 * t3409 + (t2925 * t3765 + t3088) * t3852 + (t2868 * t2926 + t3021 * t3106) * pkin(6)) * t3030 - (t2868 * t2932 + t3106) * t3852 + (t2932 * t3765 + t3021 * t3088) * pkin(6);
t2883 = t3006 * (-pkin(5) * t2964 + t2944);
t3706 = t3007 * t3021;
t3607 = pkin(1) * t3706;
t3328 = t3029 * t3607;
t3721 = t3006 * t3029;
t3590 = pkin(2) * t3721;
t2808 = (-pkin(5) * t3590 + t2940) * t3030 - pkin(2) * t3328 + t2883;
t2800 = 0.1e1 / t2808;
t3502 = t2739 * t2800 * t3020;
t2721 = t2994 * t3502;
t2616 = t2721 - t2700;
t3793 = t2800 * t3049;
t3501 = t2739 * t3793;
t3287 = t2994 * t3501;
t3220 = pkin(5) * t3287;
t2619 = -t2700 + t3220;
t2778 = (t2841 - pkin(2) * (t2847 * t3683 + t2868 * t3020)) * t3007 + (t2865 - pkin(2) * (-t2847 * t3020 + t2868 * t3683)) * t3006 - t3914 * t2850;
t2771 = t2778 * t2816;
t2766 = t3007 * t2771;
t2653 = t2766 + t2708;
t2688 = -0.2e1 * t2700;
t2693 = pkin(1) * t2708;
t3794 = t2800 * t2994;
t3503 = t2739 * t3794;
t2733 = pkin(2) * t3503;
t2971 = pkin(1) * t2997;
t2907 = t2971 - t2926;
t2915 = t2964 / 0.2e1 + pkin(1);
t2923 = pkin(5) * t3020 + pkin(2);
t2943 = pkin(5) * t2963;
t2935 = 0.2e1 * t2943;
t2938 = t2997 - 0.1e1 / 0.2e1;
t2948 = pkin(1) * t2964;
t2697 = t3045 * t2708;
t3118 = -pkin(6) * t2721 + t2697;
t3191 = t3030 * t3287;
t3142 = t3020 * t3191;
t2727 = pkin(1) * t3287;
t3158 = t3021 * t2727;
t3192 = t3006 * t3287;
t3159 = pkin(1) * t3192;
t3437 = t2816 * t3682;
t3266 = t2778 * t3437;
t3166 = t2924 * t3266;
t3272 = t2924 * t2766;
t3226 = 0.2e1 * t3272;
t3240 = t3021 * t3503;
t3815 = t2715 * t2994;
t3516 = t3006 * t3815;
t3243 = t2926 * t3516;
t2996 = t3030 * t2997;
t3776 = t2816 * t3006;
t3472 = t2778 * t3776;
t3269 = t2996 * t3472;
t3270 = t3754 * t2771;
t3720 = t3006 * t3030;
t3573 = pkin(5) * t3720;
t2880 = t3573 + t3607;
t2995 = 0.1e1 / t3029 ^ 2;
t3697 = t3007 * t3030;
t3558 = pkin(1) * t3697;
t3786 = 0.1e1 / (pkin(6) * t3558 - t2880 * t3852 + t2883) * t2995;
t3817 = t2715 * t2816;
t3301 = t3786 * t3817;
t3324 = t3880 * t3682;
t3336 = pkin(6) * t2766;
t3379 = t2943 + t3625;
t3299 = t3020 * t2708;
t2676 = pkin(2) * t3299;
t2692 = pkin(5) * t2708;
t2724 = pkin(6) * t3287;
t3635 = t2692 + t2724;
t3382 = t2676 + t3635;
t3707 = t3007 * t3020;
t3401 = t3006 * t3707;
t2992 = t3029 * t2993;
t3410 = t2992 * t3715;
t3425 = t3029 * t3754;
t3438 = t2816 * t3740;
t3500 = t2739 * t3786;
t3814 = t2715 * t3048;
t3513 = t2994 * t3814;
t3569 = t2982 * t2964;
t3589 = pkin(2) * t3720;
t3638 = t2700 / 0.2e1 - t2721 / 0.2e1;
t3232 = pkin(6) * t2692;
t3641 = t3232 / 0.2e1 + pkin(6) * t3272;
t3650 = t3382 * t3021 + t2727;
t3825 = t2619 * t3021;
t3739 = t2994 * t3007;
t3515 = t2715 * t3739;
t2671 = t2816 * t3515 / 0.2e1;
t3778 = t2816 * t2982;
t3415 = t2778 * t3778;
t3898 = 0.2e1 * t3415 + 0.2e1 * t2671 - t2771;
t2499 = (t2800 * (((t2616 * t3371 + (t2993 * t3513 * t3868 + ((t3903 + 0.3e1 * t2964 - 0.3e1 * t3569) * t3740 + (t2915 * t3901 + t3021 * t3750) * pkin(6)) * t2778) * t3776) * t2997 + (t3410 * t3898 + (t3021 * t3226 + t3650) * t2993 * t3423 + ((-(t2721 + t2688) * t2968 + t3118) * t3007 + ((t2943 + t3377) * t3892 + t2935 + 0.4e1 * t2948 + t3238) * t2771) * t3590 + (-t2619 * t2963 / 0.2e1 - t2733 / 0.2e1 + t3641) * t3021 * t3375) * t3030 + (t3409 * t3898 - t2616 * t2926 * t3007 + (t3005 + ((t2943 + t3627) * t3892 + t2935 + t2911) * t3021) * t2771) * t3845 + (-(t3039 + t3740) * t3269 + ((t2688 + t3220) * t2963 + t2733 - t3045 * t3287 - 0.4e1 * t3641) * t2997 + (t3158 + t3226 + t3382) * pkin(6)) * pkin(2) * t3425) * t2778 * t3777 + ((t2926 * t3030 * t3270 + t3159) * t3860 + (t3379 * t2997 * t3270 - (-t3503 + (t2766 * t2932 - t2619) * t3020) * t3589 + pkin(1) * t3240 * t3707) * t3029 + (-t3142 * t3868 - t3006 * ((t2693 - t3825) * t3020 - t3240) + (t3880 * t3029 * t2932 + t2907 * t3401 + t2923 * t3324) * t2771) * pkin(6)) * t3500) + (t3030 * t2653 * t3410 + (t3243 + (t2924 * t3682 * t3754 + (t2964 + t2971) * t3728) * t2778) * t3438 + (((t2968 + t3041) * t2766 + t3638) * t3720 - t2938 * t2924 * t3270) * t3547 - (t3166 * t3571 + (t3336 * t2971 + (-t3336 + t2616) * t2926) * t3006) * pkin(6)) * t3301) * t3049;
t3019 = sin(qJ(1,3));
t3028 = cos(qJ(1,3));
t3014 = legFrame(3,2);
t2955 = sin(t3014);
t2958 = cos(t3014);
t3164 = t2955 * t3036 - t2958 * t3037;
t2846 = t3019 * t3164 - t3028 * t3035;
t2867 = t2955 * t3037 + t2958 * t3036;
t3027 = cos(qJ(2,3));
t3763 = t2867 * t3027;
t2864 = pkin(6) * t3763;
t2795 = pkin(5) * t2846 + t2864;
t3844 = pkin(6) * t3027;
t2840 = t2846 * t3844;
t2849 = t3019 * t3035 + t3028 * t3164;
t2991 = t3027 ^ 2;
t2950 = t2991 - 0.2e1;
t3017 = sin(qJ(3,3));
t2961 = t3017 * pkin(2);
t3604 = t2950 * t2961;
t2900 = -pkin(5) + t3604;
t3018 = sin(qJ(2,3));
t2962 = t3018 * pkin(6);
t2922 = t2962 + pkin(1);
t2987 = t3026 ^ 2;
t3753 = (t3027 + 0.1e1) * (t3027 - 0.1e1);
t3334 = t3753 * t3845;
t3857 = pkin(2) * t3018;
t3556 = t2846 * t3857;
t3727 = t3006 * t3018;
t3611 = -0.2e1 * t3727;
t3688 = t3018 * t3027;
t3766 = t2849 * t3006;
t3848 = pkin(5) * t2867;
t3861 = pkin(2) * t2987;
t3878 = 0.2e1 * t2987 - 0.1e1;
t2714 = ((-t2867 * t2900 - t2840) * t3026 + (t3878 * t2846 * pkin(2) - t2795 * t3017) * t3018) * t2982 + (-(t2849 * t3027 + t2867 * t3611) * t3861 + ((t2846 * t3604 - t2795) * t3006 - t2922 * t2849) * t3026 + ((t2840 - t3848) * t3017 - t2867 * pkin(2)) * t3727) * t3007 - t2987 * t3556 + ((t2867 * t3753 + t3688 * t3766) * t2961 - t3848) * t3026 + ((pkin(1) * t3766 + t2795) * t3018 - t2849 * t3334 + pkin(1) * t3763) * t3017 + t3556;
t2942 = pkin(1) * t2961;
t3689 = t3018 * t3026;
t2891 = -pkin(2) * t3689 + t3844;
t3760 = t2891 * t3007;
t3675 = t3026 * t3027;
t3913 = -pkin(2) * t3675 - t2962;
t2825 = pkin(1) * t3760 + (pkin(5) * t3913 + t2942) * t3006;
t2813 = 0.1e1 / t2825;
t3783 = t2813 * t2988;
t2706 = t2714 * t3783;
t2699 = pkin(6) * t2706;
t3122 = t2846 * t3728 - t2867 * t2982;
t2792 = t2867 + t3122;
t2921 = 0.2e1 * t2962 + pkin(1);
t2967 = pkin(1) * t3018;
t2931 = t2967 + pkin(6);
t2920 = t2961 + pkin(5);
t3089 = (-t2846 * t2982 - t2867 * t3728 + t2846) * t2920;
t3107 = t3122 * pkin(6);
t3747 = t2987 * t3048;
t3346 = -t3045 + t3747;
t3202 = t3346 * t3006;
t3412 = t3018 * t3747;
t3854 = pkin(2) * t3026;
t3624 = pkin(6) * t3854;
t3549 = 0.2e1 * t3624;
t2738 = (t2792 * t3549 + t2849 * t3202) * t2991 + (-t2792 * t3412 + (t2921 * t3766 + t3089) * t3854 + (t2867 * t2922 + t3018 * t3107) * pkin(6)) * t3027 - (t2867 * t2931 + t3107) * t3854 + (t2931 * t3766 + t3018 * t3089) * pkin(6);
t2882 = t3006 * (-pkin(5) * t2962 + t2942);
t3709 = t3007 * t3018;
t3608 = pkin(1) * t3709;
t3327 = t3026 * t3608;
t3724 = t3006 * t3026;
t3592 = pkin(2) * t3724;
t2807 = (-pkin(5) * t3592 + t2940) * t3027 - pkin(2) * t3327 + t2882;
t2798 = 0.1e1 / t2807;
t3506 = t2738 * t2798 * t3017;
t2720 = t2988 * t3506;
t2615 = t2720 - t2699;
t3795 = t2798 * t3049;
t3505 = t2738 * t3795;
t3290 = t2988 * t3505;
t3221 = pkin(5) * t3290;
t2618 = -t2699 + t3221;
t2777 = (t2840 - pkin(2) * (t2846 * t3689 + t2867 * t3017)) * t3007 + (t2864 - pkin(2) * (-t2846 * t3017 + t2867 * t3689)) * t3006 - t3913 * t2849;
t2769 = t2777 * t2813;
t2765 = t3007 * t2769;
t2650 = t2765 + t2706;
t2687 = -0.2e1 * t2699;
t2691 = pkin(1) * t2706;
t3796 = t2798 * t2988;
t3507 = t2738 * t3796;
t2732 = pkin(2) * t3507;
t2970 = pkin(1) * t2991;
t2906 = t2970 - t2922;
t2913 = t2962 / 0.2e1 + pkin(1);
t2919 = pkin(5) * t3017 + pkin(2);
t2941 = pkin(5) * t2961;
t2934 = 0.2e1 * t2941;
t2937 = t2991 - 0.1e1 / 0.2e1;
t2947 = pkin(1) * t2962;
t2696 = t3045 * t2706;
t3119 = -pkin(6) * t2720 + t2696;
t3193 = t3027 * t3290;
t3143 = t3017 * t3193;
t2726 = pkin(1) * t3290;
t3160 = t3018 * t2726;
t3194 = t3006 * t3290;
t3161 = pkin(1) * t3194;
t3440 = t2813 * t3688;
t3275 = t2777 * t3440;
t3167 = t2920 * t3275;
t3281 = t2920 * t2765;
t3227 = 0.2e1 * t3281;
t3241 = t3018 * t3507;
t3820 = t2714 * t2988;
t3521 = t3006 * t3820;
t3244 = t2922 * t3521;
t2990 = t3027 * t2991;
t3782 = t2813 * t3006;
t3477 = t2777 * t3782;
t3278 = t2990 * t3477;
t3279 = t3754 * t2769;
t3723 = t3006 * t3027;
t3574 = pkin(5) * t3723;
t2879 = t3574 + t3608;
t2989 = 0.1e1 / t3026 ^ 2;
t3700 = t3007 * t3027;
t3605 = pkin(1) * t3700;
t3787 = 0.1e1 / (pkin(6) * t3605 - t2879 * t3854 + t2882) * t2989;
t3822 = t2714 * t2813;
t3306 = t3787 * t3822;
t3325 = t3880 * t3688;
t3337 = pkin(6) * t2765;
t3380 = t2941 + t3625;
t3304 = t3017 * t2706;
t2675 = pkin(2) * t3304;
t2690 = pkin(5) * t2706;
t2723 = pkin(6) * t3290;
t3636 = t2690 + t2723;
t3383 = t2675 + t3636;
t3710 = t3007 * t3017;
t3404 = t3006 * t3710;
t2986 = t3026 * t2987;
t3413 = t2986 * t3715;
t3426 = t3026 * t3754;
t3441 = t2813 * t3747;
t3504 = t2738 * t3787;
t3819 = t2714 * t3048;
t3518 = t2988 * t3819;
t3570 = t2982 * t2962;
t3591 = pkin(2) * t3723;
t3639 = t2699 / 0.2e1 - t2720 / 0.2e1;
t3233 = pkin(6) * t2690;
t3642 = t3233 / 0.2e1 + pkin(6) * t3281;
t3651 = t3383 * t3018 + t2726;
t3826 = t2618 * t3018;
t3746 = t2988 * t3007;
t3520 = t2714 * t3746;
t2670 = t2813 * t3520 / 0.2e1;
t3784 = t2813 * t2982;
t3416 = t2777 * t3784;
t3899 = 0.2e1 * t3416 + 0.2e1 * t2670 - t2769;
t2498 = (t2798 * (((t2615 * t3371 + (t2987 * t3518 * t3868 + ((t3903 + 0.3e1 * t2962 - 0.3e1 * t3570) * t3747 + (t2913 * t3901 + t3018 * t3750) * pkin(6)) * t2777) * t3782) * t2991 + (t3413 * t3899 + (t3018 * t3227 + t3651) * t2987 * t3423 + ((-(t2720 + t2687) * t2967 + t3119) * t3007 + ((t2941 + t3377) * t3892 + t2934 + 0.4e1 * t2947 + t3238) * t2769) * t3592 + (-t2618 * t2961 / 0.2e1 - t2732 / 0.2e1 + t3642) * t3018 * t3375) * t3027 + (t3412 * t3899 - t2615 * t2922 * t3007 + (t3005 + ((t2941 + t3627) * t3892 + t2934 + t2911) * t3018) * t2769) * t3845 + (-(t3039 + t3747) * t3278 + ((t2687 + t3221) * t2961 + t2732 - t3045 * t3290 - 0.4e1 * t3642) * t2991 + (t3160 + t3227 + t3383) * pkin(6)) * pkin(2) * t3426) * t2777 * t3783 + ((t2922 * t3027 * t3279 + t3161) * t3861 + (t3380 * t2991 * t3279 - (-t3507 + (t2765 * t2931 - t2618) * t3017) * t3591 + pkin(1) * t3241 * t3710) * t3026 + (-t3143 * t3868 - t3006 * ((t2691 - t3826) * t3017 - t3241) + (t3880 * t3026 * t2931 + t2906 * t3404 + t2919 * t3325) * t2769) * pkin(6)) * t3504) + (t3027 * t2650 * t3413 + (t3244 + (t2920 * t3688 * t3754 + (t2962 + t2970) * t3728) * t2777) * t3441 + (((t2967 + t3041) * t2765 + t3639) * t3723 - t2937 * t2920 * t3279) * t3549 - (t3167 * t3571 + (t3337 * t2970 + (-t3337 + t2615) * t2922) * t3006) * pkin(6)) * t3306) * t3049;
t2614 = pkin(6) * t3294 - t3499;
t3044 = -0.2e1 * pkin(1);
t3210 = t3033 * pkin(5) * t3511;
t3463 = t2779 * t3717;
t3730 = t3000 * t3024;
t3509 = t2716 * t3730;
t3839 = t3003 * pkin(6);
t3865 = pkin(1) * t3023;
t3884 = -0.2e1 * t3023;
t2524 = ((-t3242 + ((t2972 - 0.2e1 * t2966 + t3044) * t3728 + pkin(5) * t3323) * t2779) * t2819 * t2999 + ((-t3839 / 0.2e1 + t2933) * t3414 * t3884 + ((-t2927 * t3463 - t3509 * t3865) * t2819 - t2614) * t3007 + (-t3210 + t2779 * (t2933 - t3839)) * t2819 * t3023) * t3032 - t2982 * t3165 + (pkin(1) * t3189 - t2908 * t3467) * t3007 + ((-t2620 - t2722) * t3024 + t2695) * t3006 + t3165) * t2802 * t3496;
t3827 = t2614 * t3006;
t2605 = t2930 * t3827;
t2680 = t3033 * t2695;
t3042 = pkin(5) / 0.2e1;
t2916 = t2965 + t3042;
t3150 = pkin(6) * t2927 * t3257;
t3216 = pkin(6) * t3023 * t3467;
t3755 = t2952 * t2982;
t3347 = -t3003 + t3755;
t3393 = t3006 * t3695;
t3612 = -0.2e1 * t3728;
t3735 = t2998 * t3048;
t3870 = t3003 - 0.1e1;
t3198 = ((t2773 + (t2779 * t3347 - t3510) * t2819) * t3735 - (t2680 * t3007 - t3006 * t3649 + (t3033 * (-t2966 + pkin(1)) * t2982 + (t2916 * t3612 + t3842) * t3024) * t2773) * t3859 + ((t2933 * t3007 + t3572) * t2617 + (-(t2949 - t3378) * t2982 + (-pkin(6) * t2928 + t2946 * t3024) * t3393 + (-t2982 * t3003 + t3870) * pkin(2) * t2927) * t2773) * t3032 - t2982 * t3150 - t2908 * t3007 * t3216 + t3150 + t2605) * t3296;
t3147 = t2734 - t3231;
t2569 = pkin(2) * t2620 + t3023 * t3147;
t3881 = t2694 / 0.2e1;
t2611 = t3881 + t2725 / 0.2e1;
t2704 = t2819 * t3508;
t2820 = 0.1e1 / t2827 ^ 2;
t3043 = 0.2e1 * pkin(5);
t3004 = pkin(2) * t3043;
t2761 = t2819 * t3463;
t3174 = t2916 * t2761;
t3237 = -0.3e1 * t3048 - t3045 - t3046 - t3051;
t3464 = t2779 * t3725;
t3259 = t2819 * t3464;
t3768 = t2819 * t3033;
t3465 = t2779 * t3768;
t3262 = t2929 * t3465;
t3293 = t2819 * t3509;
t3295 = t3003 * t2710;
t3427 = t2952 * t3733;
t3596 = t3003 * t2965;
t3734 = t2999 * t3024;
t3597 = pkin(2) * t3734;
t3628 = t3046 / 0.3e1 + t3048;
t3629 = -t3045 / 0.3e1 - 0.2e1 / 0.3e1 * t3048;
t3630 = t3045 / 0.2e1 + t3048;
t3643 = t2677 + t2725;
t3729 = t3003 * t3045;
t3803 = t2779 * t3000;
t3887 = -0.2e1 * t3006;
t3888 = -0.2e1 * t3003;
t3893 = 0.3e1 * t3007 * t2982;
t3925 = -0.4e1 * pkin(6);
t3317 = (((t3003 - 0.4e1 / 0.3e1) * t3735 + ((-0.2e1 / 0.3e1 * t2945 + t3629) * t3003 + 0.4e1 / 0.3e1 * t2945 + t3628) * t3032 + (0.4e1 / 0.3e1 * t3859 - 0.2e1 / 0.3e1 * t2927) * pkin(6) * t3676) * t2773 * t3893 + (t3427 * t3812 - ((t2695 + t3824) * t3033 + (-0.4e1 * t2928 + t3596) * t3259) * t3859 + (t3174 * t3925 - t2698 + t2704 + (-pkin(2) * t3295 + (-t3003 * t3634 + t3260 * t3900 + t2694 + 0.2e1 * t2725) * t3023) * pkin(2) + (-pkin(6) * t3812 + 0.2e1 * t3498) * pkin(1) * t3730) * t3032 + (t2569 * t3033 + (-t3004 + (-t2979 + t3729) * t3023) * t3467) * t3024) * t2982 + ((-0.3e1 * t3003 + 0.3e1) * t3735 * t2773 - (t3003 * t3157 + 0.2e1 * t3262 + ((t3881 + t3643) * t3024 + t2728) * t3887) * t3859 + (((pkin(1) * t3293 + t2620) * t2965 + t3147) * t3717 + (0.2e1 * (t2945 + t3630) * t3003 - 0.4e1 * t2945 - 0.2e1 * t2949 + t3237) * t2773) * t3032 - t3827 * t2972 + 0.2e1 * t3150 + t2605) * t3007 - t3870 * t2704 * t2998 + (t2620 * t3033 + (-t2965 - t3043 + t3596) * t3467) * t3597 + 0.2e1 * ((t3003 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t2710 + (t2611 * t3003 - t3156 / 0.2e1 - t2611 + (-pkin(6) * t3002 + t2933 * t3033) * t3467) * t3023) * t3850 + t2917 * t3216 * t3888 - t2569 * t3676 + ((t2911 * t3023 + t3004) * t3024 + t3023 * t3005) * t3467) * t2820 * t3803;
t2494 = t2524 - t3198 - t3317;
t3922 = t2716 ^ 2 * t3001;
t2709 = t2820 * t3922;
t3050 = 0.1e1 / pkin(2) ^ 2;
t2731 = t2740 ^ 2 / t2809 ^ 2 * t3050 * t3001;
t2623 = t2709 + t2731;
t3446 = t2802 * t3771;
t3265 = t2779 * t3446;
t3129 = t2740 * t3049 * t3265;
t3114 = 0.2e1 * t3129;
t3849 = pkin(2) * t3033;
t2581 = (((pkin(6) * t3677 + t3849) * t3006 + pkin(6) * t3704) * t2773 + t2614) * t2740 * t3446;
t3559 = pkin(6) * t3671;
t3593 = t3006 * t2965;
t3626 = t3045 + t3048;
t3694 = t3007 * t3045;
t3902 = -0.2e1 * pkin(2);
t3919 = t2820 * ((-(t3427 - t3729 + (0.2e1 * t3024 * t3559 + t2927) * pkin(2)) * t3414 + ((t3174 + t3637) * t3900 + (t2916 * t3464 * t3902 + t3809) * t2819 * t3032) * t3007 + t2779 * t3435 * t3751 + (-t3643 * t3725 + t3262) * t3850 + t2614 * t3587 + (-t3729 + t2945 + t2949 + t3626) * t2773) * t2779 + (t2656 * t3733 + (t2893 * t3593 + t3694) * t2773 + t3117) * t3810);
t2515 = t2581 - t3919;
t3529 = t2515 * t3725;
t3769 = t2819 * t3024;
t3830 = t2515 * t3033;
t3862 = pkin(1) * t3033;
t3928 = -(pkin(5) * t2494 * t3024 - pkin(1) * t2500) * t3006 + t3830 * t3903 - pkin(5) * (t2623 * t3717 + t2982 * t3114) - (pkin(1) * t2716 * t3769 - pkin(5) * t3497) * t2773 * t3929 + (-0.2e1 * t2779 * t2820 * t3210 + t2494 * t3862 - t2623 * t2969 - t3529 * t3043) * t3007;
t2613 = pkin(6) * t3299 - t3503;
t3211 = t3030 * pkin(5) * t3516;
t3468 = t2778 * t3720;
t3737 = t2994 * t3021;
t3514 = t2715 * t3737;
t3840 = t2997 * pkin(6);
t3866 = pkin(1) * t3020;
t3885 = -0.2e1 * t3020;
t2523 = ((-t3243 + ((t2971 - 0.2e1 * t2964 + t3044) * t3728 + pkin(5) * t3324) * t2778) * t2816 * t2993 + ((-t3840 / 0.2e1 + t2932) * t3415 * t3885 + ((-t2923 * t3468 - t3514 * t3866) * t2816 - t2613) * t3007 + (-t3211 + t2778 * (t2932 - t3840)) * t2816 * t3020) * t3029 - t2982 * t3166 + (pkin(1) * t3191 - t2907 * t3472) * t3007 + ((-t2619 - t2721) * t3021 + t2693) * t3006 + t3166) * t2800 * t3500;
t3828 = t2613 * t3006;
t2604 = t2926 * t3828;
t2679 = t3030 * t2693;
t2914 = t2963 + t3042;
t3151 = pkin(6) * t2923 * t3266;
t3217 = pkin(6) * t3020 * t3472;
t3756 = t2951 * t2982;
t3348 = -t2997 + t3756;
t3394 = t3006 * t3697;
t3742 = t2992 * t3048;
t3873 = t2997 - 0.1e1;
t3199 = ((t2771 + (t2778 * t3348 - t3515) * t2816) * t3742 - (t2679 * t3007 - t3006 * t3650 + (t3030 * (-t2964 + pkin(1)) * t2982 + (t2914 * t3612 + t3843) * t3021) * t2771) * t3860 + ((t2932 * t3007 + t3573) * t2616 + (-(t2948 - t3379) * t2982 + (-pkin(6) * t2924 + t2944 * t3021) * t3394 + (-t2982 * t2997 + t3873) * pkin(2) * t2923) * t2771) * t3029 - t2982 * t3151 - t2907 * t3007 * t3217 + t3151 + t2604) * t3301;
t3148 = t2733 - t3232;
t2568 = pkin(2) * t2619 + t3020 * t3148;
t3882 = t2692 / 0.2e1;
t2610 = t3882 + t2724 / 0.2e1;
t2703 = t2816 * t3513;
t2817 = 0.1e1 / t2826 ^ 2;
t2760 = t2816 * t3468;
t3176 = t2914 * t2760;
t3469 = t2778 * t3726;
t3268 = t2816 * t3469;
t3774 = t2816 * t3030;
t3470 = t2778 * t3774;
t3271 = t2925 * t3470;
t3298 = t2816 * t3514;
t3300 = t2997 * t2708;
t3428 = t2951 * t3740;
t3598 = t2997 * t2963;
t3741 = t2993 * t3021;
t3599 = pkin(2) * t3741;
t3644 = t2676 + t2724;
t3736 = t2997 * t3045;
t3804 = t2778 * t2994;
t3889 = -0.2e1 * t2997;
t3318 = (((t2997 - 0.4e1 / 0.3e1) * t3742 + ((-0.2e1 / 0.3e1 * t2943 + t3629) * t2997 + 0.4e1 / 0.3e1 * t2943 + t3628) * t3029 + (0.4e1 / 0.3e1 * t3860 - 0.2e1 / 0.3e1 * t2923) * pkin(6) * t3682) * t2771 * t3893 + (t3428 * t3817 - ((t2693 + t3825) * t3030 + (-0.4e1 * t2924 + t3598) * t3268) * t3860 + (t3176 * t3925 - t2697 + t2703 + (-pkin(2) * t3300 + (-t2997 * t3635 + t3269 * t3900 + t2692 + 0.2e1 * t2724) * t3020) * pkin(2) + (-pkin(6) * t3817 + 0.2e1 * t3502) * pkin(1) * t3737) * t3029 + (t2568 * t3030 + (-t3004 + (-t2979 + t3736) * t3020) * t3472) * t3021) * t2982 + ((-0.3e1 * t2997 + 0.3e1) * t3742 * t2771 - (t2997 * t3159 + 0.2e1 * t3271 + ((t3882 + t3644) * t3021 + t2727) * t3887) * t3860 + (((pkin(1) * t3298 + t2619) * t2963 + t3148) * t3720 + (0.2e1 * (t2943 + t3630) * t2997 - 0.4e1 * t2943 - 0.2e1 * t2948 + t3237) * t2771) * t3029 - t3828 * t2971 + 0.2e1 * t3151 + t2604) * t3007 - t3873 * t2703 * t2992 + (t2619 * t3030 + (-t2963 - t3043 + t3598) * t3472) * t3599 + 0.2e1 * ((t2997 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t2708 + (t2610 * t2997 - t3158 / 0.2e1 - t2610 + (-pkin(6) * t2996 + t2932 * t3030) * t3472) * t3020) * t3852 + t2915 * t3217 * t3889 - t2568 * t3682 + ((t2911 * t3020 + t3004) * t3021 + t3020 * t3005) * t3472) * t2817 * t3804;
t2493 = t2523 - t3199 - t3318;
t3923 = t2715 ^ 2 * t2995;
t2707 = t2817 * t3923;
t2730 = t2739 ^ 2 / t2808 ^ 2 * t3050 * t2995;
t2622 = t2707 + t2730;
t3448 = t2800 * t3777;
t3274 = t2778 * t3448;
t3131 = t2739 * t3049 * t3274;
t3115 = 0.2e1 * t3131;
t3851 = pkin(2) * t3030;
t2580 = (((pkin(6) * t3683 + t3851) * t3006 + pkin(6) * t3707) * t2771 + t2613) * t2739 * t3448;
t3560 = pkin(6) * t3673;
t3594 = t3006 * t2963;
t3920 = t2817 * ((-(t3428 - t3736 + (0.2e1 * t3021 * t3560 + t2923) * pkin(2)) * t3415 + ((t3176 + t3638) * t3900 + (t2914 * t3469 * t3902 + t3814) * t2816 * t3029) * t3007 + t2778 * t3438 * t3752 + (-t3644 * t3726 + t3271) * t3852 + t2613 * t3589 + (-t3736 + t2943 + t2948 + t3626) * t2771) * t2778 + (t2653 * t3740 + (t2892 * t3594 + t3694) * t2771 + t3118) * t3815);
t2514 = t2580 - t3920;
t3530 = t2514 * t3726;
t3775 = t2816 * t3021;
t3833 = t2514 * t3030;
t3863 = pkin(1) * t3030;
t3927 = -(pkin(5) * t2493 * t3021 - pkin(1) * t2499) * t3006 + t3833 * t3903 - pkin(5) * (t2622 * t3720 + t2982 * t3115) - (pkin(1) * t2715 * t3775 - pkin(5) * t3501) * t2771 * t3930 + (-0.2e1 * t2778 * t2817 * t3211 + t2493 * t3863 - t2622 * t2968 - t3530 * t3043) * t3007;
t2612 = pkin(6) * t3304 - t3507;
t3212 = t3027 * pkin(5) * t3521;
t3473 = t2777 * t3723;
t3744 = t2988 * t3018;
t3519 = t2714 * t3744;
t3841 = t2991 * pkin(6);
t3867 = pkin(1) * t3017;
t3886 = -0.2e1 * t3017;
t2522 = ((-t3244 + ((t2970 - 0.2e1 * t2962 + t3044) * t3728 + pkin(5) * t3325) * t2777) * t2813 * t2987 + ((-t3841 / 0.2e1 + t2931) * t3416 * t3886 + ((-t2919 * t3473 - t3519 * t3867) * t2813 - t2612) * t3007 + (-t3212 + t2777 * (t2931 - t3841)) * t2813 * t3017) * t3026 - t2982 * t3167 + (pkin(1) * t3193 - t2906 * t3477) * t3007 + ((-t2618 - t2720) * t3018 + t2691) * t3006 + t3167) * t2798 * t3504;
t3829 = t2612 * t3006;
t2603 = t2922 * t3829;
t2678 = t3027 * t2691;
t2912 = t2961 + t3042;
t3152 = pkin(6) * t2919 * t3275;
t3218 = pkin(6) * t3017 * t3477;
t3757 = t2950 * t2982;
t3349 = -t2991 + t3757;
t3395 = t3006 * t3700;
t3749 = t2986 * t3048;
t3876 = t2991 - 0.1e1;
t3200 = ((t2769 + (t2777 * t3349 - t3520) * t2813) * t3749 - (t2678 * t3007 - t3006 * t3651 + (t3027 * (-t2962 + pkin(1)) * t2982 + (t2912 * t3612 + t3844) * t3018) * t2769) * t3861 + ((t2931 * t3007 + t3574) * t2615 + (-(t2947 - t3380) * t2982 + (-pkin(6) * t2920 + t2942 * t3018) * t3395 + (-t2982 * t2991 + t3876) * pkin(2) * t2919) * t2769) * t3026 - t2982 * t3152 - t2906 * t3007 * t3218 + t3152 + t2603) * t3306;
t3149 = t2732 - t3233;
t2567 = pkin(2) * t2618 + t3017 * t3149;
t3883 = t2690 / 0.2e1;
t2609 = t3883 + t2723 / 0.2e1;
t2702 = t2813 * t3518;
t2814 = 0.1e1 / t2825 ^ 2;
t2759 = t2813 * t3473;
t3178 = t2912 * t2759;
t3474 = t2777 * t3727;
t3277 = t2813 * t3474;
t3780 = t2813 * t3027;
t3475 = t2777 * t3780;
t3280 = t2921 * t3475;
t3303 = t2813 * t3519;
t3305 = t2991 * t2706;
t3429 = t2950 * t3747;
t3600 = t2991 * t2961;
t3748 = t2987 * t3018;
t3601 = pkin(2) * t3748;
t3645 = t2675 + t2723;
t3743 = t2991 * t3045;
t3805 = t2777 * t2988;
t3890 = -0.2e1 * t2991;
t3319 = (((t2991 - 0.4e1 / 0.3e1) * t3749 + ((-0.2e1 / 0.3e1 * t2941 + t3629) * t2991 + 0.4e1 / 0.3e1 * t2941 + t3628) * t3026 + (0.4e1 / 0.3e1 * t3861 - 0.2e1 / 0.3e1 * t2919) * pkin(6) * t3688) * t2769 * t3893 + (t3429 * t3822 - ((t2691 + t3826) * t3027 + (-0.4e1 * t2920 + t3600) * t3277) * t3861 + (t3178 * t3925 - t2696 + t2702 + (-pkin(2) * t3305 + (-t2991 * t3636 + t3278 * t3900 + t2690 + 0.2e1 * t2723) * t3017) * pkin(2) + (-pkin(6) * t3822 + 0.2e1 * t3506) * pkin(1) * t3744) * t3026 + (t2567 * t3027 + (-t3004 + (-t2979 + t3743) * t3017) * t3477) * t3018) * t2982 + ((-0.3e1 * t2991 + 0.3e1) * t3749 * t2769 - (t2991 * t3161 + 0.2e1 * t3280 + ((t3883 + t3645) * t3018 + t2726) * t3887) * t3861 + (((pkin(1) * t3303 + t2618) * t2961 + t3149) * t3723 + (0.2e1 * (t2941 + t3630) * t2991 - 0.4e1 * t2941 - 0.2e1 * t2947 + t3237) * t2769) * t3026 - t3829 * t2970 + 0.2e1 * t3152 + t2603) * t3007 - t3876 * t2702 * t2986 + (t2618 * t3027 + (-t2961 - t3043 + t3600) * t3477) * t3601 + 0.2e1 * ((t2991 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t2706 + (t2609 * t2991 - t3160 / 0.2e1 - t2609 + (-pkin(6) * t2990 + t2931 * t3027) * t3477) * t3017) * t3854 + t2913 * t3218 * t3890 - t2567 * t3688 + ((t2911 * t3017 + t3004) * t3018 + t3017 * t3005) * t3477) * t2814 * t3805;
t2492 = t2522 - t3200 - t3319;
t3924 = t2714 ^ 2 * t2989;
t2705 = t2814 * t3924;
t2729 = t2738 ^ 2 / t2807 ^ 2 * t3050 * t2989;
t2621 = t2705 + t2729;
t3450 = t2798 * t3783;
t3283 = t2777 * t3450;
t3133 = t2738 * t3049 * t3283;
t3116 = 0.2e1 * t3133;
t3853 = pkin(2) * t3027;
t2579 = (((pkin(6) * t3689 + t3853) * t3006 + pkin(6) * t3710) * t2769 + t2612) * t2738 * t3450;
t3561 = pkin(6) * t3675;
t3595 = t3006 * t2961;
t3921 = t2814 * ((-(t3429 - t3743 + (0.2e1 * t3018 * t3561 + t2919) * pkin(2)) * t3416 + ((t3178 + t3639) * t3900 + (t2912 * t3474 * t3902 + t3819) * t2813 * t3026) * t3007 + t2777 * t3441 * t3753 + (-t3645 * t3727 + t3280) * t3854 + t2612 * t3591 + (-t3743 + t2941 + t2947 + t3626) * t2769) * t2777 + (t2650 * t3747 + (t2891 * t3595 + t3694) * t2769 + t3119) * t3820);
t2513 = t2579 - t3921;
t3531 = t2513 * t3727;
t3781 = t2813 * t3018;
t3836 = t2513 * t3027;
t3864 = pkin(1) * t3027;
t3926 = -(pkin(5) * t2492 * t3018 - pkin(1) * t2498) * t3006 + t3836 * t3903 - pkin(5) * (t2621 * t3723 + t2982 * t3116) - (pkin(1) * t2714 * t3781 - pkin(5) * t3505) * t2769 * t3931 + (-0.2e1 * t2777 * t2814 * t3212 + t2492 * t3864 - t2621 * t2967 - t3531 * t3043) * t3007;
t3374 = -t2919 + 0.2e1 * t3861;
t3918 = t3019 * t3374;
t3373 = -t2923 + 0.2e1 * t3860;
t3917 = t3022 * t3373;
t3372 = -t2927 + 0.2e1 * t3859;
t3916 = t3025 * t3372;
t3555 = t3019 * t3857;
t3722 = t3006 * t3028;
t3906 = t3017 * (-(pkin(1) * t3722 + pkin(5) * t3019) * t3018 + t3028 * t3334) - t3555;
t3553 = t3022 * t3856;
t3719 = t3006 * t3031;
t3905 = t3020 * (-(pkin(1) * t3719 + pkin(5) * t3022) * t3021 + t3031 * t3333) - t3553;
t3551 = t3025 * t3855;
t3716 = t3006 * t3034;
t3904 = t3023 * (-(pkin(1) * t3716 + pkin(5) * t3025) * t3024 + t3034 * t3332) - t3551;
t3896 = -0.2e1 * t2759 + t3290;
t3895 = -0.2e1 * t2760 + t3287;
t3894 = -0.2e1 * t2761 + t3284;
t3891 = 0.2e1 * t2982;
t3879 = t3891 - 0.2e1;
t3877 = 0.4e1 * t2987 - 0.2e1;
t3874 = 0.4e1 * t2993 - 0.2e1;
t3871 = 0.4e1 * t2999 - 0.2e1;
t3869 = pkin(1) * t3006;
t3838 = t2513 * t2813;
t3577 = pkin(5) * t3727;
t3837 = t2513 * (-t3577 + t3605);
t3835 = t2514 * t2816;
t3576 = pkin(5) * t3726;
t3834 = t2514 * (-t3558 + t3576);
t3832 = t2515 * t2819;
t3575 = pkin(5) * t3725;
t3831 = t2515 * (-t3557 + t3575);
t3823 = t2714 * t2777;
t3821 = t2714 * t2814;
t3818 = t2715 * t2778;
t3816 = t2715 * t2817;
t3813 = t2716 * t2779;
t3811 = t2716 * t2820;
t2774 = t2777 ^ 2;
t2768 = t2774 * t2814;
t2815 = t2813 * t2814;
t3808 = t2774 * t2815;
t2775 = t2778 ^ 2;
t2770 = t2775 * t2817;
t2818 = t2816 * t2817;
t3807 = t2775 * t2818;
t2776 = t2779 ^ 2;
t2772 = t2776 * t2820;
t2821 = t2819 * t2820;
t3806 = t2776 * t2821;
t3708 = t3007 * t3019;
t2831 = t2891 * t3708 - t3028 * t3913;
t3692 = t3017 * t3019;
t3583 = pkin(2) * t3692;
t3586 = pkin(2) * t3710;
t2786 = (t2891 * t2958 + t2955 * t3583) * t3006 + t2831 * t2955 - t2958 * t3586;
t3802 = t2786 * t2813;
t2787 = (t2891 * t2955 - t2958 * t3583) * t3006 - t2831 * t2958 - t2955 * t3586;
t3801 = t2787 * t2813;
t3705 = t3007 * t3022;
t2832 = t2892 * t3705 - t3031 * t3914;
t3686 = t3020 * t3022;
t3582 = pkin(2) * t3686;
t3585 = pkin(2) * t3707;
t2788 = (t2892 * t2959 + t2956 * t3582) * t3006 + t2832 * t2956 - t2959 * t3585;
t3800 = t2788 * t2816;
t2789 = (t2892 * t2956 - t2959 * t3582) * t3006 - t2832 * t2959 - t2956 * t3585;
t3799 = t2789 * t2816;
t3702 = t3007 * t3025;
t2833 = t2893 * t3702 - t3034 * t3915;
t3680 = t3023 * t3025;
t3581 = pkin(2) * t3680;
t3584 = pkin(2) * t3704;
t2790 = (t2893 * t2960 + t2957 * t3581) * t3006 + t2833 * t2957 - t2960 * t3584;
t3798 = t2790 * t2819;
t2791 = (t2893 * t2957 - t2960 * t3581) * t3006 - t2833 * t2960 - t2957 * t3584;
t3797 = t2791 * t2819;
t2804 = -t3913 * t3019 + (-t3595 - t3760) * t3028;
t3790 = t2804 * t2813;
t2805 = -t3914 * t3022 + (-t3594 - t3759) * t3031;
t3789 = t2805 * t2816;
t2806 = -t3915 * t3025 + (-t3593 - t3758) * t3034;
t3788 = t2806 * t2819;
t3779 = t2814 * t3018;
t3773 = t2817 * t3021;
t3767 = t2820 * t3024;
t3745 = t2988 * t3017;
t3738 = t2994 * t3020;
t3731 = t3000 * t3023;
t3714 = t3006 * t3049;
t3713 = t3007 * t2492;
t3712 = t3007 * t2493;
t3711 = t3007 * t2494;
t3701 = t3007 * t3026;
t3699 = t3007 * t3028;
t3698 = t3007 * t3029;
t3696 = t3007 * t3032;
t3693 = t3017 * t3018;
t3691 = t3017 * t3026;
t3690 = t3017 * t3027;
t3687 = t3020 * t3021;
t3685 = t3020 * t3029;
t3684 = t3020 * t3030;
t3681 = t3023 * t3024;
t3679 = t3023 * t3032;
t3678 = t3023 * t3033;
t3674 = t3027 * t3028;
t3672 = t3030 * t3031;
t3670 = t3033 * t3034;
t2459 = -t2498 * t3608 + (-t2498 * t3723 + t2513 * t3891 - 0.2e1 * t2579 + 0.2e1 * t3921) * pkin(5);
t2576 = (-pkin(5) * t3277 + t2678) * t3007 + (-pkin(5) * t3303 - t2726 / 0.2e1) * t3006 + pkin(1) * t3475;
t3669 = -t3026 * t2459 - 0.2e1 * t2576 * t3505 - t3017 * t3926;
t3230 = -0.2e1 * t3290;
t3668 = t3926 * t3026 + (t2576 * t3230 - t2459) * t3017;
t2460 = -t2499 * t3607 + (-t2499 * t3720 + t2514 * t3891 - 0.2e1 * t2580 + 0.2e1 * t3920) * pkin(5);
t2577 = (-pkin(5) * t3268 + t2679) * t3007 + (-pkin(5) * t3298 - t2727 / 0.2e1) * t3006 + pkin(1) * t3470;
t3667 = -t3029 * t2460 - 0.2e1 * t2577 * t3501 - t3020 * t3927;
t3229 = -0.2e1 * t3287;
t3666 = t3927 * t3029 + (t2577 * t3229 - t2460) * t3020;
t2461 = -t2500 * t3606 + (-t2500 * t3717 + t2515 * t3891 - 0.2e1 * t2581 + 0.2e1 * t3919) * pkin(5);
t2578 = (-pkin(5) * t3259 + t2680) * t3007 + (-pkin(5) * t3293 - t2728 / 0.2e1) * t3006 + pkin(1) * t3465;
t3665 = -t3032 * t2461 - 0.2e1 * t2578 * t3497 - t3023 * t3928;
t3228 = -0.2e1 * t3284;
t3664 = t3928 * t3032 + (t2578 * t3228 - t2461) * t3023;
t2470 = t2515 * t3347 + t2515 - t3711;
t2563 = t3129 * t3612 + (-t2819 * t3190 + (-t2819 ^ 2 + t2820 * t2982) * t3033 * t2779) * t3810;
t3433 = t2820 * t3717;
t3169 = t3433 * t3922;
t3234 = t3347 + 0.1e1;
t3286 = t2779 * t3497;
t3524 = (t2761 + t3284) * t2716 * t3007;
t2512 = t3007 * t2515;
t2482 = t2512 - t3317 / 0.2e1 - t3198 / 0.2e1 + t2524 / 0.2e1;
t3538 = t2482 * t3725;
t3663 = -0.2e1 * t2470 * t3679 + t3871 * t3538 + 0.4e1 * t3023 * t2563 * t3677 + t3872 * t3169 + (t3871 * t3524 + (-0.4e1 * t2999 * t3234 + 0.2e1 * t3755 + t3888 + 0.2e1) * t3286) * t3771;
t2468 = t2513 * t3349 + t2513 - t3713;
t2561 = t3133 * t3612 + (-t2813 * t3194 + (-t2813 ^ 2 + t2814 * t2982) * t3027 * t2777) * t3820;
t3439 = t2814 * t3723;
t3168 = t3439 * t3924;
t3236 = t3349 + 0.1e1;
t3292 = t2777 * t3505;
t3528 = (t2759 + t3290) * t2714 * t3007;
t2510 = t3007 * t2513;
t2480 = t2510 - t3319 / 0.2e1 - t3200 / 0.2e1 + t2522 / 0.2e1;
t3540 = t2480 * t3727;
t3662 = -0.2e1 * t2468 * t3691 + t3877 * t3540 + 0.4e1 * t2561 * t3017 * t3689 + t3878 * t3168 + (t3877 * t3528 + (-0.4e1 * t2987 * t3236 + 0.2e1 * t3757 + t3890 + 0.2e1) * t3292) * t3783;
t2469 = t2514 * t3348 + t2514 - t3712;
t2562 = t3131 * t3612 + (-t2816 * t3192 + (-t2816 ^ 2 + t2817 * t2982) * t3030 * t2778) * t3815;
t3436 = t2817 * t3720;
t3170 = t3436 * t3923;
t3235 = t3348 + 0.1e1;
t3289 = t2778 * t3501;
t3526 = (t2760 + t3287) * t2715 * t3007;
t2511 = t3007 * t2514;
t2481 = t2511 - t3318 / 0.2e1 - t3199 / 0.2e1 + t2523 / 0.2e1;
t3539 = t2481 * t3726;
t3661 = -0.2e1 * t2469 * t3685 + t3874 * t3539 + 0.4e1 * t3020 * t2562 * t3683 + t3875 * t3170 + (t3874 * t3526 + (-0.4e1 * t2993 * t3235 + 0.2e1 * t3756 + t3889 + 0.2e1) * t3289) * t3777;
t2487 = t2492 + t2510;
t2645 = t2765 + t2706 / 0.2e1;
t3291 = t3018 * t3505;
t3392 = t3006 * t3693;
t3355 = 0.2e1 * t3392;
t3660 = t2480 * t3026 * t3355 + t2468 * t2987 + t2487 * t3007 + t3168 * t3691 - 0.2e1 * t2561 * t3748 + (-t3006 * t2645 * t3291 - (t3236 * t3292 - t3528) * t2813 * t3691) * t3931;
t2489 = t2493 + t2511;
t2646 = t2766 + t2708 / 0.2e1;
t3288 = t3021 * t3501;
t3390 = t3006 * t3687;
t3354 = 0.2e1 * t3390;
t3659 = t2481 * t3029 * t3354 + t2469 * t2993 + t2489 * t3007 + t3170 * t3685 - 0.2e1 * t2562 * t3741 + (-t3006 * t2646 * t3288 - (t3235 * t3289 - t3526) * t2816 * t3685) * t3930;
t2491 = t2494 + t2512;
t2647 = t2767 + t2710 / 0.2e1;
t3285 = t3024 * t3497;
t3388 = t3006 * t3681;
t3353 = 0.2e1 * t3388;
t3658 = t2482 * t3032 * t3353 + t2470 * t2999 + t2491 * t3007 + t3169 * t3679 - 0.2e1 * t2563 * t3734 + (-t3006 * t2647 * t3285 - (t3234 * t3286 - t3524) * t2819 * t3679) * t3929;
t3104 = t3027 * t3116;
t2586 = t3104 + t3006 * (t2705 - t2729);
t2600 = t3006 * t3104 - t2729;
t3403 = t3006 * t3709;
t3534 = t2492 * t3723;
t3615 = 0.4e1 * t2937 * t2988;
t3657 = -t3026 * t3534 + t2498 * (t3392 - t3701) + (t3026 * t3612 - t3879 * t3693) * t3836 + t2586 * t3689 + t2600 * t3710 + (-0.4e1 * (t2937 * t3304 + t3027 * t3291 / 0.2e1) * t3784 + (t3017 * t3615 + 0.2e1 * t3403) * t3821) * t2777;
t3102 = t3030 * t3115;
t2585 = t3102 + t3006 * (t2707 - t2730);
t2601 = t3006 * t3102 - t2730;
t3400 = t3006 * t3706;
t3533 = t2493 * t3720;
t3614 = 0.4e1 * t2938 * t2994;
t3656 = -t3029 * t3533 + t2499 * (t3390 - t3698) + (t3029 * t3612 - t3879 * t3687) * t3833 + t2585 * t3683 + t2601 * t3707 + (-0.4e1 * (t2938 * t3299 + t3030 * t3288 / 0.2e1) * t3778 + (t3020 * t3614 + 0.2e1 * t3400) * t3816) * t2778;
t3103 = t3033 * t3114;
t2587 = t3103 + t3006 * (t2709 - t2731);
t2602 = t3006 * t3103 - t2731;
t3397 = t3006 * t3703;
t3532 = t2494 * t3717;
t3613 = 0.4e1 * t2939 * t3000;
t3655 = -t3032 * t3532 + t2500 * (t3388 - t3696) + (t3032 * t3612 - t3879 * t3681) * t3830 + t2587 * t3677 + t2602 * t3704 + (-0.4e1 * (t2939 * t3294 + t3033 * t3285 / 0.2e1) * t3772 + (t3023 * t3613 + 0.2e1 * t3397) * t3811) * t2779;
t3391 = t3006 * t3689;
t3654 = -t3017 * t3534 - t2498 * (t3391 + t3710) + (t3879 * t3689 - 0.2e1 * t3404) * t3836 + t2586 * t3693 - t2600 * t3701 + (-0.2e1 * ((t2706 - 0.2e1 * t3305) * t3026 + t3018 * t3143) * t3784 + (t3355 * t3746 - 0.4e1 * t2937) * t3821) * t2777;
t3389 = t3006 * t3683;
t3653 = -t3020 * t3533 - t2499 * (t3389 + t3707) + (t3879 * t3683 - 0.2e1 * t3401) * t3833 + t2585 * t3687 - t2601 * t3698 + (-0.2e1 * ((t2708 - 0.2e1 * t3300) * t3029 + t3021 * t3142) * t3778 + (t3354 * t3739 - 0.4e1 * t2938) * t3816) * t2778;
t3387 = t3006 * t3677;
t3652 = -t3023 * t3532 - t2500 * (t3387 + t3704) + (t3879 * t3677 - 0.2e1 * t3398) * t3830 + t2587 * t3681 - t2602 * t3696 + (-0.2e1 * ((t2710 - 0.2e1 * t3295) * t3032 + t3024 * t3141) * t3772 + (t3353 * t3732 - 0.4e1 * t2939) * t3811) * t2779;
t3449 = t2989 * t3795;
t3146 = t2738 * t3449 * t3822;
t3648 = (t2759 + t3230) * t2765 - 0.2e1 * t3146;
t3447 = t2995 * t3793;
t3145 = t2739 * t3447 * t3817;
t3647 = (t2760 + t3229) * t2766 - 0.2e1 * t3145;
t3445 = t3001 * t3791;
t3144 = t2740 * t3445 * t3812;
t3646 = (t2761 + t3228) * t2767 - 0.2e1 * t3144;
t3633 = t2768 - t2705;
t3632 = t2770 - t2707;
t3631 = t2772 - t2709;
t3621 = t2988 * t3896;
t3620 = t2994 * t3895;
t3619 = t3000 * t3894;
t3618 = -0.2e1 * t3821;
t3617 = -0.2e1 * t3816;
t3616 = -0.2e1 * t3811;
t3567 = pkin(6) * t3723;
t3566 = pkin(6) * t3720;
t3565 = pkin(6) * t3717;
t3564 = t3019 * t3844;
t3563 = t3022 * t3843;
t3562 = t3025 * t3842;
t3550 = -0.2e1 * t3624;
t3548 = -0.2e1 * t3623;
t3546 = -0.2e1 * t3622;
t3544 = t3880 * pkin(6);
t2486 = t2492 + 0.2e1 * t2510;
t3537 = t2486 * t3781;
t2488 = t2493 + 0.2e1 * t2511;
t3536 = t2488 * t3775;
t2490 = t2494 + 0.2e1 * t2512;
t3535 = t2490 * t3769;
t2661 = t2759 - t3290;
t3527 = t2661 * t3805;
t2663 = t2760 - t3287;
t3525 = t2663 * t3804;
t2665 = t2761 - t3284;
t3523 = t2665 * t3803;
t3522 = t2714 * t3779;
t3517 = t2715 * t3773;
t3512 = t2716 * t3767;
t2834 = t2900 * t3006 * t3019 - t2922 * t3028;
t2897 = t3876 * t2961 - pkin(5);
t3386 = t3017 * t3688;
t3224 = t3386 * t3858;
t3155 = t3028 * t3224;
t3331 = t3017 * t3564;
t3340 = t2987 * t3555;
t3419 = t2958 * t3690;
t2744 = ((-t2900 * t2958 - t2955 * t3564) * t3026 + (-pkin(6) * t3419 + t2955 * t3918) * t3018) * t2982 + (-(t2955 * t3674 + t2958 * t3611) * t3861 + (t2834 * t2955 - t2958 * t3567) * t3026 + (-t2919 * t2958 + t2955 * t3331) * t3727) * t3007 - t2955 * t3340 + (t2897 * t2958 + t2955 * t3155) * t3026 - t3906 * t2955 + t2922 * t3419;
t3495 = t2744 * t3783;
t2835 = t2901 * t3006 * t3022 - t2926 * t3031;
t2898 = t3873 * t2963 - pkin(5);
t3385 = t3020 * t3682;
t3223 = t3385 * t3858;
t3154 = t3031 * t3223;
t3330 = t3020 * t3563;
t3339 = t2993 * t3553;
t3418 = t2959 * t3684;
t2745 = ((-t2901 * t2959 - t2956 * t3563) * t3029 + (-pkin(6) * t3418 + t2956 * t3917) * t3021) * t2982 + (-(t2956 * t3672 + t2959 * t3610) * t3860 + (t2835 * t2956 - t2959 * t3566) * t3029 + (-t2923 * t2959 + t2956 * t3330) * t3726) * t3007 - t2956 * t3339 + (t2898 * t2959 + t2956 * t3154) * t3029 - t3905 * t2956 + t2926 * t3418;
t3494 = t2745 * t3777;
t2836 = t2902 * t3006 * t3025 - t2930 * t3034;
t2899 = t3870 * t2965 - pkin(5);
t3384 = t3023 * t3676;
t3222 = t3384 * t3858;
t3153 = t3034 * t3222;
t3329 = t3023 * t3562;
t3338 = t2999 * t3551;
t3417 = t2960 * t3678;
t2746 = ((-t2902 * t2960 - t2957 * t3562) * t3032 + (-pkin(6) * t3417 + t2957 * t3916) * t3024) * t2982 + (-(t2957 * t3670 + t2960 * t3609) * t3859 + (t2836 * t2957 - t2960 * t3565) * t3032 + (-t2927 * t2960 + t2957 * t3329) * t3725) * t3007 - t2957 * t3338 + (t2899 * t2960 + t2957 * t3153) * t3032 - t3904 * t2957 + t2930 * t3417;
t3493 = t2746 * t3771;
t3422 = t2955 * t3690;
t2747 = ((-t2900 * t2955 + t2958 * t3564) * t3026 + (-pkin(6) * t3422 - t2958 * t3918) * t3018) * t2982 + ((0.2e1 * t2955 * t3727 + t2958 * t3674) * t3861 + (-t2834 * t2958 - t2955 * t3567) * t3026 - (t2919 * t2955 + t2958 * t3331) * t3727) * t3007 + t2958 * t3340 + (t2897 * t2955 - t2958 * t3155) * t3026 + t3906 * t2958 + t2922 * t3422;
t3492 = t2747 * t3783;
t3421 = t2956 * t3684;
t2748 = ((-t2901 * t2956 + t2959 * t3563) * t3029 + (-pkin(6) * t3421 - t2959 * t3917) * t3021) * t2982 + ((0.2e1 * t2956 * t3726 + t2959 * t3672) * t3860 + (-t2835 * t2959 - t2956 * t3566) * t3029 - (t2923 * t2956 + t2959 * t3330) * t3726) * t3007 + t2959 * t3339 + (t2898 * t2956 - t2959 * t3154) * t3029 + t3905 * t2959 + t2926 * t3421;
t3491 = t2748 * t3777;
t3420 = t2957 * t3678;
t2749 = ((-t2902 * t2957 + t2960 * t3562) * t3032 + (-pkin(6) * t3420 - t2960 * t3916) * t3024) * t2982 + ((0.2e1 * t2957 * t3725 + t2960 * t3670) * t3859 + (-t2836 * t2960 - t2957 * t3565) * t3032 - (t2927 * t2957 + t2960 * t3329) * t3725) * t3007 + t2960 * t3338 + (t2899 * t2957 - t2960 * t3153) * t3032 + t3904 * t2960 + t2930 * t3420;
t3490 = t2749 * t3771;
t3322 = t3880 * t3019 * t2920;
t2822 = t2931 * t3722 - t3018 * t3322;
t2828 = t2921 * t3722 - t3322;
t3402 = t3006 * t3708;
t3250 = t2955 * t3402;
t2852 = -t2958 * t2982 + t2958 + t3250;
t2885 = -t3570 + t2922;
t2903 = t2967 - t3544;
t3215 = t3402 * t2962;
t3253 = t2920 * t3403;
t3432 = t2920 * t3728;
t2750 = (t2955 * t3028 * t3202 + t2852 * t3549) * t2991 + (-t2852 * t3412 + (t2828 * t2955 - t2958 * t3432) * t3854 + (t2885 * t2958 + t2955 * t3215) * pkin(6)) * t3027 - (pkin(6) * t3250 + t2903 * t2958) * t3854 + pkin(6) * (t2822 * t2955 - t2958 * t3253);
t3489 = t2750 * t3796;
t3247 = t2958 * t3402;
t2853 = t2955 * t2982 - t2955 + t3247;
t2751 = (-t2958 * t3346 * t3722 + t2853 * t3550) * t2991 + (t2853 * t3412 - (t2828 * t2958 + t2955 * t3432) * t3854 + pkin(6) * (t2885 * t2955 - t2958 * t3215)) * t3027 - (-pkin(6) * t3247 + t2903 * t2955) * t3854 - (t2822 * t2958 + t2955 * t3253) * pkin(6);
t3488 = t2751 * t3796;
t3321 = t3880 * t3022 * t2924;
t2823 = t2932 * t3719 - t3021 * t3321;
t2829 = t2925 * t3719 - t3321;
t3399 = t3006 * t3705;
t3249 = t2956 * t3399;
t2854 = -t2959 * t2982 + t2959 + t3249;
t2886 = -t3569 + t2926;
t2904 = t2968 - t3544;
t3203 = t3031 * t3345;
t3214 = t3399 * t2964;
t3252 = t2924 * t3400;
t3431 = t2924 * t3728;
t2752 = (t2956 * t3006 * t3203 + t2854 * t3547) * t2997 + (-t2854 * t3409 + (t2829 * t2956 - t2959 * t3431) * t3852 + (t2886 * t2959 + t2956 * t3214) * pkin(6)) * t3030 - (pkin(6) * t3249 + t2904 * t2959) * t3852 + pkin(6) * (t2823 * t2956 - t2959 * t3252);
t3487 = t2752 * t3794;
t3246 = t2959 * t3399;
t2855 = t2956 * t2982 - t2956 + t3246;
t2753 = (-t2959 * t3345 * t3719 + t2855 * t3548) * t2997 + (t2855 * t3409 - (t2829 * t2959 + t2956 * t3431) * t3852 + pkin(6) * (t2886 * t2956 - t2959 * t3214)) * t3030 - (-pkin(6) * t3246 + t2904 * t2956) * t3852 - (t2823 * t2959 + t2956 * t3252) * pkin(6);
t3486 = t2753 * t3794;
t3320 = t3880 * t3025 * t2928;
t2824 = t2933 * t3716 - t3024 * t3320;
t2830 = t2929 * t3716 - t3320;
t3396 = t3006 * t3702;
t3248 = t2957 * t3396;
t2856 = -t2960 * t2982 + t2960 + t3248;
t2887 = -t3568 + t2930;
t2905 = t2969 - t3544;
t3201 = t3344 * t3034;
t3213 = t3396 * t2966;
t3251 = t2928 * t3397;
t3430 = t2928 * t3728;
t2754 = (t2957 * t3006 * t3201 + t2856 * t3545) * t3003 + (-t2856 * t3406 + (t2830 * t2957 - t2960 * t3430) * t3850 + (t2887 * t2960 + t2957 * t3213) * pkin(6)) * t3033 - (pkin(6) * t3248 + t2905 * t2960) * t3850 + pkin(6) * (t2824 * t2957 - t2960 * t3251);
t3485 = t2754 * t3792;
t3245 = t2960 * t3396;
t2857 = t2957 * t2982 - t2957 + t3245;
t2755 = (-t2960 * t3344 * t3716 + t2857 * t3546) * t3003 + (t2857 * t3406 - (t2830 * t2960 + t2957 * t3430) * t3850 + pkin(6) * (t2887 * t2957 - t2960 * t3213)) * t3033 - (-pkin(6) * t3245 + t2905 * t2957) * t3850 - (t2824 * t2960 + t2957 * t3251) * pkin(6);
t3484 = t2755 * t3792;
t3483 = (pkin(5) * t3395 + t2967) * t3808;
t3482 = t3007 * t3808;
t3481 = (pkin(5) * t3394 + t2968) * t3807;
t3480 = t3007 * t3807;
t3479 = (pkin(5) * t3393 + t2969) * t3806;
t3478 = t3007 * t3806;
t3476 = t2777 * t3781;
t3471 = t2778 * t3775;
t3466 = t2779 * t3769;
t2780 = ((-pkin(6) * t3386 - t2900 * t3026) * t3722 + (-t2922 * t3026 - t2987 * t3853) * t3019) * t3007 + t3026 * t3019 * t3224 + (t3869 * t3018 - t3334) * t3692 + ((-t3018 * t3374 + t3561) * t2982 + t3601 - t2919 * t3018) * t3028;
t3462 = t2780 * t3783;
t2781 = ((-pkin(6) * t3385 - t2901 * t3029) * t3719 + (-t2926 * t3029 - t2993 * t3851) * t3022) * t3007 + t3029 * t3022 * t3223 + (t3869 * t3021 - t3333) * t3686 + ((-t3021 * t3373 + t3560) * t2982 + t3599 - t2923 * t3021) * t3031;
t3461 = t2781 * t3777;
t2782 = ((-pkin(6) * t3384 - t2902 * t3032) * t3716 + (-t2930 * t3032 - t2999 * t3849) * t3025) * t3007 + t3032 * t3025 * t3222 + (t3869 * t3024 - t3332) * t3680 + ((-t3024 * t3372 + t3559) * t2982 + t3597 - t2927 * t3024) * t3034;
t3460 = t2782 * t3771;
t2783 = (t3019 * t3346 + t3550 * t3699) * t2991 + ((-t2920 * t3722 + t2921 * t3019) * t3854 + t3346 * t3018 * t3699) * t3027 + pkin(6) * (t2931 * t3019 + (pkin(2) * t3701 - t2920 * t3727) * t3028);
t3459 = t2783 * t3796;
t2784 = (t3007 * t3031 * t3548 + t3022 * t3345) * t2997 + ((-t2924 * t3719 + t2925 * t3022) * t3852 + t3203 * t3706) * t3030 + pkin(6) * (t2932 * t3022 + (pkin(2) * t3698 - t2924 * t3726) * t3031);
t3458 = t2784 * t3794;
t2785 = (t3007 * t3034 * t3546 + t3025 * t3344) * t3003 + ((-t2928 * t3716 + t2929 * t3025) * t3850 + t3201 * t3703) * t3033 + pkin(6) * (t2933 * t3025 + (pkin(2) * t3696 - t2928 * t3725) * t3034);
t3457 = t2785 * t3792;
t3456 = t2786 * t3780;
t3455 = t2787 * t3780;
t3454 = t2788 * t3774;
t3453 = t2789 * t3774;
t3452 = t2790 * t3768;
t3451 = t2791 * t3768;
t3444 = t2804 * t3780;
t3443 = t2805 * t3774;
t3442 = t2806 * t3768;
t3411 = t2991 * t2768;
t3408 = t2997 * t2770;
t3405 = t3003 * t2772;
t2636 = t3880 * t3475 + 0.2e1 * t3194;
t3276 = t3026 * t3476;
t3370 = t2988 * (0.2e1 * t2487 * t3691 + t3878 * t3531 + ((-0.2e1 * t2774 * t3439 + 0.4e1 * t3133) * t3007 + 0.4e1 * t3146) * t2987 + t2636 * t3276 * t3886 + t3648);
t2637 = t3880 * t3470 + 0.2e1 * t3192;
t3267 = t3029 * t3471;
t3369 = t2994 * (0.2e1 * t2489 * t3685 + t3875 * t3530 + ((-0.2e1 * t2775 * t3436 + 0.4e1 * t3131) * t3007 + 0.4e1 * t3145) * t2993 + t2637 * t3267 * t3885 + t3647);
t2638 = t3880 * t3465 + 0.2e1 * t3190;
t3258 = t3032 * t3466;
t3368 = t3000 * (0.2e1 * t2491 * t3679 + t3872 * t3529 + ((-0.2e1 * t2776 * t3433 + 0.4e1 * t3129) * t3007 + 0.4e1 * t3144) * t2999 + t2638 * t3258 * t3884 + t3646);
t3367 = t2786 * t3618;
t3366 = t2787 * t3618;
t3365 = t2804 * t3618;
t3364 = t2788 * t3617;
t3363 = t2789 * t3617;
t3362 = t2805 * t3617;
t3361 = t2790 * t3616;
t3360 = t2791 * t3616;
t3359 = t2806 * t3616;
t3358 = 0.2e1 * t3411;
t3357 = 0.2e1 * t3408;
t3356 = 0.2e1 * t3405;
t2495 = t2513 * t3723 + t2498;
t2762 = -0.2e1 * t3411;
t2741 = -t2768 + t3358;
t3068 = t2741 * t2982 + t2600 + t2768;
t3188 = t3403 * t2768;
t3352 = ((t2762 + t3068) * t3017 - t3026 * t3188) * t2988 - t2495;
t2496 = t2514 * t3720 + t2499;
t2763 = -0.2e1 * t3408;
t2742 = -t2770 + t3357;
t3067 = t2742 * t2982 + t2601 + t2770;
t3185 = t3400 * t2770;
t3351 = ((t2763 + t3067) * t3020 - t3029 * t3185) * t2994 - t2496;
t2497 = t2515 * t3717 + t2500;
t2764 = -0.2e1 * t3405;
t2743 = -t2772 + t3356;
t3066 = t2743 * t2982 + t2602 + t2772;
t3182 = t3397 * t2772;
t3350 = ((t2764 + t3066) * t3023 - t3032 * t3182) * t3000 - t2497;
t3316 = t3745 * t3837;
t3315 = t3738 * t3834;
t3314 = t3731 * t3831;
t2648 = 0.2e1 * t2765 + t2706;
t3313 = t2648 * t3522;
t3312 = t2648 * t3027 * t3821;
t2651 = 0.2e1 * t2766 + t2708;
t3311 = t2651 * t3517;
t3310 = t2651 * t3030 * t3816;
t2654 = 0.2e1 * t2767 + t2710;
t3309 = t2654 * t3512;
t3308 = t2654 * t3033 * t3811;
t3307 = t2777 * t3520;
t3302 = t2778 * t3515;
t3297 = t2779 * t3510;
t3282 = t2777 * t3449;
t3273 = t2778 * t3447;
t3264 = t2779 * t3445;
t3256 = t2815 * t2988 * t3688;
t3255 = t2818 * t2994 * t3682;
t3254 = t2821 * t3000 * t3676;
t2474 = t2487 * t3017 + t2513 * t3391;
t3209 = t2988 * (t2474 * t3017 - t3648 * t3691 + (t2636 * t2987 - t3194) * t3476);
t3208 = t2988 * ((-t3068 + t3358) * t3026 + (-t2495 - t3188) * t3017);
t2475 = t2489 * t3020 + t2514 * t3389;
t3207 = t2994 * (t2475 * t3020 - t3647 * t3685 + (t2637 * t2993 - t3192) * t3471);
t3206 = t2994 * ((-t3067 + t3357) * t3029 + (-t2496 - t3185) * t3020);
t2476 = t2491 * t3023 + t2515 * t3387;
t3205 = t3000 * (t2476 * t3023 - t3646 * t3679 + (t2638 * t2999 - t3190) * t3466);
t3204 = t3000 * ((-t3066 + t3356) * t3032 + (-t2497 - t3182) * t3023);
t3187 = t3483 * t3745;
t3186 = t2774 * t3256;
t3184 = t3481 * t3738;
t3183 = t2775 * t3255;
t3181 = t3479 * t3731;
t3180 = t2776 * t3254;
t3179 = t3027 * t3283;
t3177 = t3030 * t3274;
t3175 = t3033 * t3265;
t3173 = t2650 * t3277;
t3172 = t2653 * t3268;
t3171 = t2656 * t3259;
t3140 = t2750 * t3179;
t3139 = t2751 * t3179;
t3138 = t2752 * t3177;
t3137 = t2753 * t3177;
t3136 = t2754 * t3175;
t3135 = t2755 * t3175;
t3134 = t2783 * t3179;
t3132 = t2784 * t3177;
t3130 = t2785 * t3175;
t2870 = -pkin(5) * t3403 + t3864;
t3113 = t2870 * t3808 - t2879 * t3838;
t3112 = t2813 * t3837 + t3483;
t2871 = -pkin(5) * t3400 + t3863;
t3111 = t2871 * t3807 - t2880 * t3835;
t3110 = -t2816 * t3834 + t3481;
t2872 = -pkin(5) * t3397 + t3862;
t3109 = t2872 * t3806 - t2881 * t3832;
t3108 = -t2819 * t3831 + t3479;
t3098 = t2513 * t3781 - t3027 * t3482;
t3097 = t2513 * t3780 + t3018 * t3482;
t3096 = t2514 * t3775 - t3030 * t3480;
t3095 = t2514 * t3774 + t3021 * t3480;
t3094 = t2515 * t3769 - t3033 * t3478;
t3093 = t2515 * t3768 + t3024 * t3478;
t3086 = (-t2513 * (pkin(1) * t3724 + t2879 * t3017) + t2768 * (pkin(5) * t3426 + t2870 * t3017)) * t3796;
t2918 = t3880 * pkin(5);
t3085 = (t2513 * ((-pkin(5) * t3675 + t3867) * t3006 - t3327) + t2768 * (t2870 * t3026 - t2918 * t3017)) * t3796;
t3084 = (-t2514 * (pkin(1) * t3721 + t2880 * t3020) + t2770 * (pkin(5) * t3425 + t2871 * t3020)) * t3794;
t3083 = (t2514 * ((-pkin(5) * t3673 + t3866) * t3006 - t3328) + t2770 * (t2871 * t3029 - t2918 * t3020)) * t3794;
t3082 = (-t2515 * (pkin(1) * t3718 + t2881 * t3023) + t2772 * (pkin(5) * t3424 + t2872 * t3023)) * t3792;
t3081 = (t2515 * ((-pkin(5) * t3671 + t3865) * t3006 - t3326) + t2772 * (t2872 * t3032 - t2918 * t3023)) * t3792;
t3077 = t2815 * t3615 * t3823 + 0.2e1 * t2513 * t3440;
t3076 = t3018 ^ 2 * t3838 + 0.2e1 * t3256 * t3823;
t3075 = t2818 * t3614 * t3818 + 0.2e1 * t2514 * t3437;
t3074 = t3021 ^ 2 * t3835 + 0.2e1 * t3255 * t3818;
t3073 = t2821 * t3613 * t3813 + 0.2e1 * t2515 * t3434;
t3072 = t3024 ^ 2 * t3832 + 0.2e1 * t3254 * t3813;
t2980 = t3006 ^ 2;
t2655 = t2767 + 0.2e1 * t2710;
t2652 = t2766 + 0.2e1 * t2708;
t2649 = t2765 + 0.2e1 * t2706;
t2644 = t2671 + t2771;
t2643 = t2670 + t2769;
t2642 = t2669 + t2773;
t2632 = t2655 * t3023 + t3006 * t3258;
t2631 = t2652 * t3020 + t3006 * t3267;
t2630 = t2649 * t3017 + t3006 * t3276;
t2629 = t2655 * t3032 - t3023 * t3259;
t2628 = t2652 * t3029 - t3020 * t3268;
t2627 = t2649 * t3026 - t3017 * t3277;
t2596 = t2644 * t3863 - t2646 * t3576;
t2595 = t2643 * t3864 - t2645 * t3577;
t2594 = t2642 * t2969 + t2647 * t3572;
t2593 = t2644 * t2968 + t2646 * t3573;
t2592 = t2643 * t2967 + t2645 * t3574;
t2591 = t2642 * t3862 - t2647 * t3575;
t2557 = ((t2776 * t3347 - 0.2e1 * t3297) * t2820 + t3631) * t3679 - t3872 * t3171;
t2556 = ((t2775 * t3348 - 0.2e1 * t3302) * t2817 + t3632) * t3685 - t3875 * t3172;
t2555 = ((t2774 * t3349 - 0.2e1 * t3307) * t2814 + t3633) * t3691 - t3878 * t3173;
t2554 = (-0.2e1 * t2709 + t2764 + 0.2e1 * t2772) * t2999 + 0.4e1 * t3171 * t3679 + (-t3871 * t3297 + (t3872 * t3755 + t3003) * t2776) * t2820 - t3631;
t2553 = (-0.2e1 * t2707 + t2763 + 0.2e1 * t2770) * t2993 + 0.4e1 * t3172 * t3685 + (-t3874 * t3302 + (t3875 * t3756 + t2997) * t2775) * t2817 - t3632;
t2552 = (-0.2e1 * t2705 + t2762 + 0.2e1 * t2768) * t2987 + 0.4e1 * t3173 * t3691 + (-t3877 * t3307 + (t3878 * t3757 + t2991) * t2774) * t2814 - t3633;
t2485 = t3711 / 0.2e1 + t2515;
t2484 = t3712 / 0.2e1 + t2514;
t2483 = t3713 / 0.2e1 + t2513;
t2473 = t2491 * t3032 - t2515 * t3388;
t2472 = t2489 * t3029 - t2514 * t3390;
t2471 = t2487 * t3026 - t2513 * t3392;
t2452 = -0.2e1 * t2482 * t3572 - 0.2e1 * t2485 * t2969;
t2451 = -0.2e1 * pkin(5) * t3538 + 0.2e1 * t2485 * t3862;
t2450 = -0.2e1 * pkin(5) * t3540 + 0.2e1 * t2483 * t3864;
t2449 = -0.2e1 * t2481 * t3573 - 0.2e1 * t2484 * t2968;
t2448 = -0.2e1 * t2480 * t3574 - 0.2e1 * t2483 * t2967;
t2447 = -0.2e1 * pkin(5) * t3539 + 0.2e1 * t2484 * t3863;
t1 = [t2513 * t3801 + t2514 * t3799 + t2515 * t3797, 0, 0, (-t2747 * t3186 - t2748 * t3183 - t2749 * t3180 + t2787 * t3076 + t2789 * t3074 + t2791 * t3072) * t2980, (-t2741 * t3492 - t2742 * t3491 - t2743 * t3490 + t2787 * t3077 + t2789 * t3075 + t2791 * t3073) * t2980, (t2787 * t3537 + t2789 * t3536 + t2791 * t3535 + (t2749 * t3094 + t2791 * t3308) * t3000 + (t2748 * t3096 + t2789 * t3310) * t2994 + (t2747 * t3098 + t2787 * t3312) * t2988) * t3006, (t2486 * t3455 + t2488 * t3453 + t2490 * t3451 + (t2749 * t3093 - t2791 * t3309) * t3000 + (t2748 * t3095 - t2789 * t3311) * t2994 + (t2747 * t3097 - t2787 * t3313) * t2988) * t3006, t2487 * t3492 + t2489 * t3491 + t2491 * t3490 + (t2487 * t3801 + t2489 * t3799 + t2491 * t3797) * t3007, t2447 * t3799 + t2450 * t3801 + t2451 * t3797 + (t2594 * t3360 + t2749 * t3108) * t3000 + (t2593 * t3363 + t2748 * t3110) * t2994 + (t2592 * t3366 + t2747 * t3112) * t2988, t2448 * t3801 + t2449 * t3799 + t2452 * t3797 + (t2591 * t3360 + t2749 * t3109) * t3000 + (t2596 * t3363 + t2748 * t3111) * t2994 + (t2595 * t3366 + t2747 * t3113) * t2988, (t2555 * t3488 + t2556 * t3486 + t2557 * t3484) * t3049 + (t2749 * t3205 + t2791 * t3658) * t2819 + (t2748 * t3207 + t2789 * t3659) * t2816 + (t2747 * t3209 + t2787 * t3660) * t2813, (t2552 * t3488 + t2553 * t3486 + t2554 * t3484) * t3049 + (t2749 * t3368 + t2791 * t3663) * t2819 + (t2748 * t3369 + t2789 * t3661) * t2816 + (t2747 * t3370 + t2787 * t3662) * t2813, (t2749 * t3204 + t2791 * t3652) * t2819 + (t2748 * t3206 + t2789 * t3653) * t2816 + (t2747 * t3208 + t2787 * t3654) * t2813 + (t2474 * t3488 + t2475 * t3486 + t2476 * t3484 + (t2627 * t3139 + t2628 * t3137 + t2629 * t3135) * t3006) * t3049, (t2749 * t3350 + t2791 * t3655) * t2819 + (t2748 * t3351 + t2789 * t3656) * t2816 + (t2747 * t3352 + t2787 * t3657) * t2813 + (t2471 * t3488 + t2472 * t3486 + t2473 * t3484 + (-t2630 * t3139 - t2631 * t3137 - t2632 * t3135) * t3006) * t3049, (-t2495 * t3488 - t2496 * t3486 - t2497 * t3484) * t3049 + (t2495 * t3455 + t2496 * t3453 + t2497 * t3451 + (t2749 * t3523 + (t2755 * t3264 + t2791 * t3619) * t2716) * t3767 + (t2748 * t3525 + (t2753 * t3273 + t2789 * t3620) * t2715) * t3773 + (t2747 * t3527 + (t2751 * t3282 + t2787 * t3621) * t2714) * t3779) * t3006, t2747 * t3483 + t2748 * t3481 + t2749 * t3479 + (-t2749 * t3831 + t2791 * t3664) * t2819 + (-t2748 * t3834 + t2789 * t3666) * t2816 + (t2747 * t3837 + t2787 * t3668) * t2813 + (t2751 * t3086 + t2753 * t3084 + t2755 * t3082) * t3049, -t2747 * t3187 - t2748 * t3184 - t2749 * t3181 + (t2749 * t3314 + t2791 * t3665) * t2819 + (t2748 * t3315 + t2789 * t3667) * t2816 + (-t2747 * t3316 + t2787 * t3669) * t2813 + (t2751 * t3085 + t2753 * t3083 + t2755 * t3081) * t3049, 0; t2513 * t3802 + t2514 * t3800 + t2515 * t3798, 0, 0, (-t2744 * t3186 - t2745 * t3183 - t2746 * t3180 + t2786 * t3076 + t2788 * t3074 + t2790 * t3072) * t2980, (-t2741 * t3495 - t2742 * t3494 - t2743 * t3493 + t2786 * t3077 + t2788 * t3075 + t2790 * t3073) * t2980, (t2786 * t3537 + t2788 * t3536 + t2790 * t3535 + (t2746 * t3094 + t2790 * t3308) * t3000 + (t2745 * t3096 + t2788 * t3310) * t2994 + (t2744 * t3098 + t2786 * t3312) * t2988) * t3006, (t2486 * t3456 + t2488 * t3454 + t2490 * t3452 + (t2746 * t3093 - t2790 * t3309) * t3000 + (t2745 * t3095 - t2788 * t3311) * t2994 + (t2744 * t3097 - t2786 * t3313) * t2988) * t3006, t2487 * t3495 + t2489 * t3494 + t2491 * t3493 + (t2487 * t3802 + t2489 * t3800 + t2491 * t3798) * t3007, t2447 * t3800 + t2450 * t3802 + t2451 * t3798 + (t2594 * t3361 + t2746 * t3108) * t3000 + (t2593 * t3364 + t2745 * t3110) * t2994 + (t2592 * t3367 + t2744 * t3112) * t2988, t2448 * t3802 + t2449 * t3800 + t2452 * t3798 + (t2591 * t3361 + t2746 * t3109) * t3000 + (t2596 * t3364 + t2745 * t3111) * t2994 + (t2595 * t3367 + t2744 * t3113) * t2988, (t2555 * t3489 + t2556 * t3487 + t2557 * t3485) * t3049 + (t2746 * t3205 + t2790 * t3658) * t2819 + (t2745 * t3207 + t2788 * t3659) * t2816 + (t2744 * t3209 + t2786 * t3660) * t2813, (t2552 * t3489 + t2553 * t3487 + t2554 * t3485) * t3049 + (t2746 * t3368 + t2790 * t3663) * t2819 + (t2745 * t3369 + t2788 * t3661) * t2816 + (t2744 * t3370 + t2786 * t3662) * t2813, (t2746 * t3204 + t2790 * t3652) * t2819 + (t2745 * t3206 + t2788 * t3653) * t2816 + (t2744 * t3208 + t2786 * t3654) * t2813 + (t2474 * t3489 + t2475 * t3487 + t2476 * t3485 + (t2627 * t3140 + t2628 * t3138 + t2629 * t3136) * t3006) * t3049, (t2746 * t3350 + t2790 * t3655) * t2819 + (t2745 * t3351 + t2788 * t3656) * t2816 + (t2744 * t3352 + t2786 * t3657) * t2813 + (t2471 * t3489 + t2472 * t3487 + t2473 * t3485 + (-t2630 * t3140 - t2631 * t3138 - t2632 * t3136) * t3006) * t3049, (-t2495 * t3489 - t2496 * t3487 - t2497 * t3485) * t3049 + (t2495 * t3456 + t2496 * t3454 + t2497 * t3452 + (t2746 * t3523 + (t2754 * t3264 + t2790 * t3619) * t2716) * t3767 + (t2745 * t3525 + (t2752 * t3273 + t2788 * t3620) * t2715) * t3773 + (t2744 * t3527 + (t2750 * t3282 + t2786 * t3621) * t2714) * t3779) * t3006, t2744 * t3483 + t2745 * t3481 + t2746 * t3479 + (-t2746 * t3831 + t2790 * t3664) * t2819 + (-t2745 * t3834 + t2788 * t3666) * t2816 + (t2744 * t3837 + t2786 * t3668) * t2813 + (t2750 * t3086 + t2752 * t3084 + t2754 * t3082) * t3049, -t2744 * t3187 - t2745 * t3184 - t2746 * t3181 + (t2746 * t3314 + t2790 * t3665) * t2819 + (t2745 * t3315 + t2788 * t3667) * t2816 + (-t2744 * t3316 + t2786 * t3669) * t2813 + (t2750 * t3085 + t2752 * t3083 + t2754 * t3081) * t3049, 0; t2513 * t3790 + t2514 * t3789 + t2515 * t3788, 0, 0, (-t2780 * t3186 - t2781 * t3183 - t2782 * t3180 + t2804 * t3076 + t2805 * t3074 + t2806 * t3072) * t2980, (-t2741 * t3462 - t2742 * t3461 - t2743 * t3460 + t2804 * t3077 + t2805 * t3075 + t2806 * t3073) * t2980, (t2804 * t3537 + t2805 * t3536 + t2806 * t3535 + (t2782 * t3094 + t2806 * t3308) * t3000 + (t2781 * t3096 + t2805 * t3310) * t2994 + (t2780 * t3098 + t2804 * t3312) * t2988) * t3006, (t2486 * t3444 + t2488 * t3443 + t2490 * t3442 + (t2782 * t3093 - t2806 * t3309) * t3000 + (t2781 * t3095 - t2805 * t3311) * t2994 + (t2780 * t3097 - t2804 * t3313) * t2988) * t3006, t2487 * t3462 + t2489 * t3461 + t2491 * t3460 + (t2487 * t3790 + t2489 * t3789 + t2491 * t3788) * t3007, t2447 * t3789 + t2450 * t3790 + t2451 * t3788 + (t2594 * t3359 + t2782 * t3108) * t3000 + (t2593 * t3362 + t2781 * t3110) * t2994 + (t2592 * t3365 + t2780 * t3112) * t2988, t2448 * t3790 + t2449 * t3789 + t2452 * t3788 + (t2591 * t3359 + t2782 * t3109) * t3000 + (t2596 * t3362 + t2781 * t3111) * t2994 + (t2595 * t3365 + t2780 * t3113) * t2988, (t2555 * t3459 + t2556 * t3458 + t2557 * t3457) * t3714 + (t2782 * t3205 + t2806 * t3658) * t2819 + (t2781 * t3207 + t2805 * t3659) * t2816 + (t2780 * t3209 + t2804 * t3660) * t2813, (t2552 * t3459 + t2553 * t3458 + t2554 * t3457) * t3714 + (t2782 * t3368 + t2806 * t3663) * t2819 + (t2781 * t3369 + t2805 * t3661) * t2816 + (t2780 * t3370 + t2804 * t3662) * t2813, (t2782 * t3204 + t2806 * t3652) * t2819 + (t2781 * t3206 + t2805 * t3653) * t2816 + (t2780 * t3208 + t2804 * t3654) * t2813 + ((t2474 * t3459 + t2475 * t3458 + t2476 * t3457) * t3006 + (t2627 * t3134 + t2628 * t3132 + t2629 * t3130) * t2980) * t3049, (t2782 * t3350 + t2806 * t3655) * t2819 + (t2781 * t3351 + t2805 * t3656) * t2816 + (t2780 * t3352 + t2804 * t3657) * t2813 + ((t2471 * t3459 + t2472 * t3458 + t2473 * t3457) * t3006 + (-t2630 * t3134 - t2631 * t3132 - t2632 * t3130) * t2980) * t3049, (t2777 * t2783 * t2798 * t2989 * t3522 + t2778 * t2784 * t2800 * t2995 * t3517 + t2779 * t2785 * t2802 * t3001 * t3512) * t3049 * t2980 + (t2495 * t3444 + t2496 * t3443 + t2497 * t3442 + (-t2785 * t2497 * t3791 + (t2665 * t2779 * t2782 + t2716 * t2806 * t3894) * t3767) * t3000 + (-t2784 * t2496 * t3793 + (t2663 * t2778 * t2781 + t2715 * t2805 * t3895) * t3773) * t2994 + (-t2783 * t2495 * t3795 + (t2661 * t2777 * t2780 + t2714 * t2804 * t3896) * t3779) * t2988) * t3006, t2780 * t3483 + t2781 * t3481 + t2782 * t3479 + (-t2782 * t3831 + t2806 * t3664) * t2819 + (-t2781 * t3834 + t2805 * t3666) * t2816 + (t2780 * t3837 + t2804 * t3668) * t2813 + (t2783 * t3086 + t2784 * t3084 + t2785 * t3082) * t3714, -t2780 * t3187 - t2781 * t3184 - t2782 * t3181 + (t2782 * t3314 + t2806 * t3665) * t2819 + (t2781 * t3315 + t2805 * t3667) * t2816 + (-t2780 * t3316 + t2804 * t3669) * t2813 + (t2783 * t3085 + t2784 * t3083 + t2785 * t3081) * t3714, 0;];
tau_reg  = t1;
