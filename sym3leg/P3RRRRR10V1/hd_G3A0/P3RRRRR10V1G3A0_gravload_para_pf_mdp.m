% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V1G3A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:28:09
% EndTime: 2020-08-06 23:28:19
% DurationCPUTime: 10.54s
% Computational Cost: add. (2904->487), mult. (8076->917), div. (171->10), fcn. (7224->26), ass. (0->336)
t8490 = cos(pkin(3));
t8479 = t8490 ^ 2;
t8721 = -t8479 + 0.1e1;
t8495 = sin(qJ(2,3));
t8467 = t8495 * pkin(6);
t8442 = t8467 + pkin(1);
t8498 = sin(qJ(2,2));
t8468 = t8498 * pkin(6);
t8446 = t8468 + pkin(1);
t8501 = sin(qJ(2,1));
t8469 = t8501 * pkin(6);
t8450 = t8469 + pkin(1);
t8496 = sin(qJ(1,3));
t8494 = sin(qJ(3,3));
t8439 = t8494 * pkin(5) + pkin(2);
t8503 = cos(qJ(3,3));
t8480 = t8503 ^ 2;
t8720 = pkin(2) * t8480;
t8577 = -t8439 + 0.2e1 * t8720;
t8731 = t8496 * t8577;
t8499 = sin(qJ(1,2));
t8497 = sin(qJ(3,2));
t8443 = t8497 * pkin(5) + pkin(2);
t8506 = cos(qJ(3,2));
t8483 = t8506 ^ 2;
t8719 = pkin(2) * t8483;
t8576 = -t8443 + 0.2e1 * t8719;
t8730 = t8499 * t8576;
t8502 = sin(qJ(1,1));
t8500 = sin(qJ(3,1));
t8447 = t8500 * pkin(5) + pkin(2);
t8509 = cos(qJ(3,1));
t8486 = t8509 ^ 2;
t8718 = pkin(2) * t8486;
t8575 = -t8447 + 0.2e1 * t8718;
t8729 = t8502 * t8575;
t8510 = cos(qJ(2,1));
t8640 = t8509 * t8510;
t8728 = -pkin(2) * t8640 - t8469;
t8507 = cos(qJ(2,2));
t8645 = t8506 * t8507;
t8727 = -pkin(2) * t8645 - t8468;
t8504 = cos(qJ(2,3));
t8651 = t8503 * t8504;
t8726 = -pkin(2) * t8651 - t8467;
t8493 = legFrame(1,2);
t8463 = sin(t8493);
t8466 = cos(t8493);
t8411 = t8466 * g(1) - t8463 * g(2);
t8511 = cos(qJ(1,1));
t8396 = -g(3) * t8502 + t8411 * t8511;
t8492 = legFrame(2,2);
t8462 = sin(t8492);
t8465 = cos(t8492);
t8410 = t8465 * g(1) - t8462 * g(2);
t8508 = cos(qJ(1,2));
t8394 = -g(3) * t8499 + t8410 * t8508;
t8491 = legFrame(3,2);
t8461 = sin(t8491);
t8464 = cos(t8491);
t8409 = t8464 * g(1) - t8461 * g(2);
t8505 = cos(qJ(1,3));
t8392 = -g(3) * t8496 + t8409 * t8505;
t8489 = sin(pkin(3));
t8713 = pkin(6) * t8489;
t8568 = (t8504 + 0.1e1) * (t8504 - 0.1e1) * t8713;
t8666 = t8496 * t8495;
t8617 = pkin(2) * t8666;
t8687 = t8489 * t8505;
t8725 = (-(pkin(1) * t8687 + t8496 * pkin(5)) * t8495 + t8505 * t8568) * t8494 - t8617;
t8567 = (t8507 + 0.1e1) * (t8507 - 0.1e1) * t8713;
t8661 = t8499 * t8498;
t8616 = pkin(2) * t8661;
t8685 = t8489 * t8508;
t8724 = (-(pkin(1) * t8685 + t8499 * pkin(5)) * t8498 + t8508 * t8567) * t8497 - t8616;
t8566 = (t8510 + 0.1e1) * (t8510 - 0.1e1) * t8713;
t8655 = t8502 * t8501;
t8615 = pkin(2) * t8655;
t8683 = t8489 * t8511;
t8723 = (-(pkin(1) * t8683 + t8502 * pkin(5)) * t8501 + t8511 * t8566) * t8500 - t8615;
t8722 = pkin(1) * pkin(2);
t8717 = pkin(2) * t8489;
t8716 = pkin(2) * t8503;
t8715 = pkin(2) * t8506;
t8714 = pkin(2) * t8509;
t8712 = g(1) * t8489;
t8708 = t8489 * g(2);
t8707 = t8494 * pkin(2);
t8706 = t8497 * pkin(2);
t8705 = t8500 * pkin(2);
t8454 = pkin(1) * t8490 * pkin(6);
t8455 = pkin(1) * t8707;
t8481 = 0.1e1 / t8503;
t8652 = t8503 * t8490;
t8583 = t8495 * t8652;
t8636 = pkin(5) * t8717;
t8704 = 0.1e1 / ((-t8503 * t8636 + t8454) * t8504 - t8583 * t8722 + t8489 * (-pkin(5) * t8467 + t8455)) * t8481;
t8456 = pkin(1) * t8706;
t8484 = 0.1e1 / t8506;
t8646 = t8506 * t8490;
t8581 = t8498 * t8646;
t8703 = 0.1e1 / ((-t8506 * t8636 + t8454) * t8507 - t8581 * t8722 + t8489 * (-pkin(5) * t8468 + t8456)) * t8484;
t8457 = pkin(1) * t8705;
t8487 = 0.1e1 / t8509;
t8656 = t8501 * t8509;
t8579 = t8490 * t8656;
t8702 = 0.1e1 / ((-t8509 * t8636 + t8454) * t8510 - t8579 * t8722 + t8489 * (-pkin(5) * t8469 + t8457)) * t8487;
t8415 = t8504 * pkin(6) - t8495 * t8716;
t8698 = t8415 * t8490;
t8416 = t8507 * pkin(6) - t8498 * t8715;
t8697 = t8416 * t8490;
t8417 = -pkin(2) * t8656 + t8510 * pkin(6);
t8696 = t8417 * t8490;
t8513 = pkin(2) ^ 2;
t8695 = t8480 * t8513;
t8694 = t8483 * t8513;
t8693 = t8486 * t8513;
t8692 = t8489 * t8490;
t8691 = t8489 * t8495;
t8690 = t8489 * t8498;
t8689 = t8489 * t8501;
t8688 = t8489 * t8504;
t8686 = t8489 * t8507;
t8684 = t8489 * t8510;
t8682 = t8490 * t8494;
t8681 = t8490 * t8495;
t8680 = t8490 * t8496;
t8679 = t8490 * t8497;
t8678 = t8490 * t8498;
t8677 = t8490 * t8499;
t8676 = t8490 * t8500;
t8675 = t8490 * t8501;
t8674 = t8490 * t8502;
t8673 = t8490 * t8505;
t8672 = t8490 * t8508;
t8671 = t8490 * t8509;
t8670 = t8490 * t8511;
t8669 = t8494 * t8489;
t8668 = t8494 * t8495;
t8667 = t8494 * t8496;
t8665 = t8496 * t8504;
t8664 = t8497 * t8489;
t8663 = t8497 * t8498;
t8662 = t8497 * t8499;
t8660 = t8499 * t8507;
t8659 = t8500 * t8489;
t8658 = t8500 * t8501;
t8657 = t8500 * t8502;
t8654 = t8502 * t8510;
t8653 = t8503 * t8489;
t8650 = t8504 * t8494;
t8649 = t8505 * t8495;
t8648 = t8505 * t8504;
t8647 = t8506 * t8489;
t8644 = t8507 * t8497;
t8643 = t8508 * t8498;
t8642 = t8508 * t8507;
t8641 = t8509 * t8489;
t8639 = t8510 * t8500;
t8638 = t8511 * t8501;
t8637 = t8511 * t8510;
t8635 = pkin(6) * t8716;
t8634 = pkin(6) * t8715;
t8633 = pkin(6) * t8714;
t8632 = pkin(2) * t8682;
t8631 = pkin(2) * t8679;
t8630 = pkin(2) * t8676;
t8629 = pkin(2) * t8667;
t8628 = pkin(2) * t8662;
t8627 = pkin(2) * t8657;
t8626 = pkin(6) * t8688;
t8625 = pkin(6) * t8686;
t8624 = pkin(6) * t8684;
t8623 = pkin(6) * t8650;
t8622 = pkin(6) * t8665;
t8621 = pkin(6) * t8644;
t8620 = pkin(6) * t8660;
t8619 = pkin(6) * t8639;
t8618 = pkin(6) * t8654;
t8611 = -0.2e1 * t8635;
t8610 = -0.2e1 * t8634;
t8609 = -0.2e1 * t8633;
t8608 = t8721 * pkin(6);
t8406 = t8461 * g(1) + t8464 * g(2);
t8400 = -t8490 * t8649 - t8665;
t8526 = t8400 * t8503 + t8505 * t8669;
t8604 = (t8409 * ((-t8583 + t8669) * t8496 + t8503 * t8648) + g(3) * t8526 + t8406 * (t8495 * t8653 + t8682)) * t8704;
t8407 = t8462 * g(1) + t8465 * g(2);
t8401 = -t8490 * t8643 - t8660;
t8525 = t8401 * t8506 + t8508 * t8664;
t8603 = (t8410 * ((-t8581 + t8664) * t8499 + t8506 * t8642) + g(3) * t8525 + t8407 * (t8498 * t8647 + t8679)) * t8703;
t8398 = t8490 * t8661 - t8642;
t8528 = t8398 * t8497 + t8499 * t8647;
t8602 = (-t8410 * t8528 - ((t8490 * t8663 + t8647) * t8508 + t8499 * t8644) * g(3) - t8407 * (-t8489 * t8663 + t8646)) * t8703;
t8408 = t8463 * g(1) + t8466 * g(2);
t8402 = -t8490 * t8638 - t8654;
t8524 = t8402 * t8509 + t8511 * t8659;
t8601 = (t8411 * ((-t8579 + t8659) * t8502 + t8509 * t8637) + g(3) * t8524 + t8408 * (t8501 * t8641 + t8676)) * t8702;
t8399 = t8490 * t8655 - t8637;
t8527 = t8399 * t8500 + t8502 * t8641;
t8600 = (-t8411 * t8527 - ((t8490 * t8658 + t8641) * t8511 + t8502 * t8639) * g(3) - t8408 * (-t8489 * t8658 + t8671)) * t8702;
t8397 = t8490 * t8666 - t8648;
t8529 = t8397 * t8494 + t8496 * t8653;
t8599 = (-t8529 * t8409 - ((t8490 * t8668 + t8653) * t8505 + t8496 * t8650) * g(3) - t8406 * (-t8489 * t8668 + t8652)) * t8704;
t8440 = pkin(5) + t8707;
t8598 = t8440 * t8692;
t8444 = pkin(5) + t8706;
t8597 = t8444 * t8692;
t8448 = pkin(5) + t8705;
t8596 = t8448 * t8692;
t8595 = t8495 * t8695;
t8594 = t8498 * t8694;
t8593 = t8501 * t8693;
t8592 = t8489 * t8680;
t8591 = t8489 * t8677;
t8590 = t8489 * t8674;
t8589 = t8495 * t8650;
t8588 = t8489 * t8667;
t8587 = t8498 * t8644;
t8586 = t8489 * t8662;
t8585 = t8501 * t8639;
t8584 = t8489 * t8657;
t8582 = t8442 * t8650;
t8580 = t8446 * t8644;
t8578 = t8450 * t8639;
t8512 = pkin(6) ^ 2;
t8574 = -t8512 + t8695;
t8573 = -t8512 + t8694;
t8572 = -t8512 + t8693;
t8571 = t8480 * t8617;
t8570 = t8483 * t8616;
t8569 = t8486 * t8615;
t8565 = t8461 * t8622;
t8564 = t8464 * t8622;
t8563 = t8462 * t8620;
t8562 = t8465 * t8620;
t8561 = t8463 * t8618;
t8560 = t8466 * t8618;
t8482 = t8504 ^ 2;
t8424 = (t8482 - 0.2e1) * t8707 - pkin(5);
t8485 = t8507 ^ 2;
t8425 = (t8485 - 0.2e1) * t8706 - pkin(5);
t8488 = t8510 ^ 2;
t8426 = (t8488 - 0.2e1) * t8705 - pkin(5);
t8559 = t8721 * t8496 * t8440;
t8558 = t8721 * t8499 * t8444;
t8557 = t8721 * t8502 * t8448;
t8556 = t8461 * t8598;
t8555 = t8462 * t8597;
t8554 = t8463 * t8596;
t8553 = t8464 * t8598;
t8552 = t8465 * t8597;
t8551 = t8466 * t8596;
t8550 = t8461 * t8592;
t8549 = t8464 * t8592;
t8548 = t8462 * t8591;
t8547 = t8465 * t8591;
t8546 = t8463 * t8590;
t8545 = t8466 * t8590;
t8544 = t8589 * t8717;
t8543 = t8587 * t8717;
t8542 = t8585 * t8717;
t8541 = pkin(6) * t8550;
t8540 = pkin(6) * t8549;
t8539 = pkin(6) * t8548;
t8538 = pkin(6) * t8547;
t8537 = pkin(6) * t8546;
t8536 = pkin(6) * t8545;
t8535 = t8505 * t8574;
t8534 = t8511 * t8572;
t8533 = t8573 * t8508;
t8532 = t8505 * t8544;
t8531 = t8508 * t8543;
t8530 = t8511 * t8542;
t8349 = ((g(1) * t8680 - t8708) * t8464 + (-g(2) * t8680 - t8712) * t8461 + g(3) * t8673) * t8504 + t8495 * t8392;
t8520 = t8349 * MDP(16) + (-MDP(17) * t8349 * t8494 + MDP(10) * (g(3) * t8400 - t8409 * t8397 + t8406 * t8691) + MDP(9) * (t8409 * (t8490 * t8665 + t8649) + g(3) * (t8490 * t8648 - t8666) - t8406 * t8688)) * t8481;
t8350 = ((g(1) * t8677 - t8708) * t8465 + (-g(2) * t8677 - t8712) * t8462 + g(3) * t8672) * t8507 + t8498 * t8394;
t8519 = t8350 * MDP(16) + (-MDP(17) * t8350 * t8497 + MDP(10) * (g(3) * t8401 - t8410 * t8398 + t8407 * t8690) + MDP(9) * (t8410 * (t8490 * t8660 + t8643) + g(3) * (t8490 * t8642 - t8661) - t8407 * t8686)) * t8484;
t8351 = ((g(1) * t8674 - t8708) * t8466 + (-g(2) * t8674 - t8712) * t8463 + g(3) * t8670) * t8510 + t8501 * t8396;
t8518 = t8351 * MDP(16) + (-MDP(17) * t8351 * t8500 + MDP(10) * (g(3) * t8402 - t8411 * t8399 + t8408 * t8689) + MDP(9) * (t8411 * (t8490 * t8654 + t8638) + g(3) * (t8490 * t8637 - t8655) - t8408 * t8684)) * t8487;
t8391 = g(3) * t8505 + t8409 * t8496;
t8517 = (t8392 * t8504 * t8490 - t8391 * t8495) * MDP(10) + (-t8526 * t8409 + g(3) * (-t8397 * t8503 + t8588)) * MDP(16) + (-t8409 * (-t8400 * t8494 + t8505 * t8653) + g(3) * t8529) * MDP(17) + t8391 * MDP(2) + t8392 * MDP(3) + (t8391 * t8504 + t8392 * t8681) * MDP(9);
t8393 = g(3) * t8508 + t8410 * t8499;
t8516 = (t8394 * t8507 * t8490 - t8393 * t8498) * MDP(10) + (-t8410 * t8525 + g(3) * (-t8398 * t8506 + t8586)) * MDP(16) + (-t8410 * (-t8401 * t8497 + t8508 * t8647) + g(3) * t8528) * MDP(17) + t8393 * MDP(2) + t8394 * MDP(3) + (t8393 * t8507 + t8394 * t8678) * MDP(9);
t8395 = g(3) * t8511 + t8411 * t8502;
t8515 = (t8396 * t8510 * t8490 - t8501 * t8395) * MDP(10) + (-t8411 * t8524 + g(3) * (-t8399 * t8509 + t8584)) * MDP(16) + (-t8411 * (-t8402 * t8500 + t8511 * t8641) + g(3) * t8527) * MDP(17) + t8395 * MDP(2) + t8396 * MDP(3) + (t8510 * t8395 + t8396 * t8675) * MDP(9);
t8514 = 0.1e1 / pkin(2);
t8472 = pkin(1) * t8501;
t8471 = pkin(1) * t8498;
t8470 = pkin(1) * t8495;
t8453 = t8472 + pkin(6);
t8452 = t8471 + pkin(6);
t8451 = t8470 + pkin(6);
t8449 = 0.2e1 * t8469 + pkin(1);
t8445 = 0.2e1 * t8468 + pkin(1);
t8441 = 0.2e1 * t8467 + pkin(1);
t8429 = t8472 + t8608;
t8428 = t8471 + t8608;
t8427 = t8470 + t8608;
t8423 = -pkin(5) + (t8488 - 0.1e1) * t8705;
t8422 = -pkin(5) + (t8485 - 0.1e1) * t8706;
t8421 = -pkin(5) + (t8482 - 0.1e1) * t8707;
t8405 = -t8479 * t8469 + t8450;
t8404 = -t8479 * t8468 + t8446;
t8403 = -t8479 * t8467 + t8442;
t8390 = t8479 * t8463 - t8463 + t8545;
t8389 = -t8479 * t8466 + t8466 + t8546;
t8388 = t8479 * t8462 - t8462 + t8547;
t8387 = -t8479 * t8465 + t8465 + t8548;
t8386 = t8479 * t8461 - t8461 + t8549;
t8385 = -t8479 * t8464 + t8464 + t8550;
t8384 = t8426 * t8502 * t8489 - t8450 * t8511;
t8383 = t8425 * t8499 * t8489 - t8446 * t8508;
t8382 = t8424 * t8496 * t8489 - t8442 * t8505;
t8381 = t8417 * t8674 - t8511 * t8728;
t8380 = t8416 * t8677 - t8508 * t8727;
t8379 = t8415 * t8680 - t8505 * t8726;
t8378 = t8449 * t8683 + t8557;
t8377 = t8445 * t8685 + t8558;
t8376 = t8441 * t8687 + t8559;
t8375 = t8453 * t8683 + t8501 * t8557;
t8374 = t8452 * t8685 + t8498 * t8558;
t8373 = t8451 * t8687 + t8495 * t8559;
t8372 = 0.1e1 / (pkin(1) * t8696 + (t8728 * pkin(5) + t8457) * t8489);
t8371 = 0.1e1 / (pkin(1) * t8697 + (t8727 * pkin(5) + t8456) * t8489);
t8370 = 0.1e1 / (pkin(1) * t8698 + (t8726 * pkin(5) + t8455) * t8489);
t8330 = (t8572 * t8502 + t8609 * t8670) * t8488 + ((-t8448 * t8683 + t8502 * t8449) * t8714 + t8534 * t8675) * t8510 + pkin(6) * (t8502 * t8453 + (pkin(2) * t8671 - t8448 * t8689) * t8511);
t8329 = (t8573 * t8499 + t8610 * t8672) * t8485 + ((-t8444 * t8685 + t8499 * t8445) * t8715 + t8533 * t8678) * t8507 + pkin(6) * (t8499 * t8452 + (pkin(2) * t8646 - t8444 * t8690) * t8508);
t8328 = (t8574 * t8496 + t8611 * t8673) * t8482 + ((-t8440 * t8687 + t8496 * t8441) * t8716 + t8535 * t8681) * t8504 + pkin(6) * (t8496 * t8451 + (pkin(2) * t8652 - t8440 * t8691) * t8505);
t8324 = (-t8572 * t8466 * t8683 + t8390 * t8609) * t8488 + (t8390 * t8593 - (t8378 * t8466 + t8554) * t8714 + pkin(6) * (t8463 * t8405 - t8501 * t8536)) * t8510 - (t8463 * t8429 - t8536) * t8714 - (t8375 * t8466 + t8501 * t8554) * pkin(6);
t8323 = (t8489 * t8463 * t8534 + 0.2e1 * t8389 * t8633) * t8488 + (-t8389 * t8593 + (t8378 * t8463 - t8551) * t8714 + (t8466 * t8405 + t8501 * t8537) * pkin(6)) * t8510 - (t8466 * t8429 + t8537) * t8714 + pkin(6) * (t8375 * t8463 - t8501 * t8551);
t8322 = (-t8573 * t8465 * t8685 + t8388 * t8610) * t8485 + (t8388 * t8594 - (t8377 * t8465 + t8555) * t8715 + pkin(6) * (t8462 * t8404 - t8498 * t8538)) * t8507 - (t8462 * t8428 - t8538) * t8715 - (t8374 * t8465 + t8498 * t8555) * pkin(6);
t8321 = (t8489 * t8462 * t8533 + 0.2e1 * t8387 * t8634) * t8485 + (-t8387 * t8594 + (t8377 * t8462 - t8552) * t8715 + (t8465 * t8404 + t8498 * t8539) * pkin(6)) * t8507 - (t8465 * t8428 + t8539) * t8715 + pkin(6) * (t8374 * t8462 - t8498 * t8552);
t8320 = (-t8574 * t8464 * t8687 + t8386 * t8611) * t8482 + (t8386 * t8595 - (t8376 * t8464 + t8556) * t8716 + pkin(6) * (t8461 * t8403 - t8495 * t8540)) * t8504 - (t8461 * t8427 - t8540) * t8716 - (t8373 * t8464 + t8495 * t8556) * pkin(6);
t8319 = (t8489 * t8461 * t8535 + 0.2e1 * t8385 * t8635) * t8482 + (-t8385 * t8595 + (t8376 * t8461 - t8553) * t8716 + (t8464 * t8403 + t8495 * t8541) * pkin(6)) * t8504 - (t8464 * t8427 + t8541) * t8716 + pkin(6) * (t8373 * t8461 - t8495 * t8553);
t1 = [-g(1) * MDP(18) + ((t8320 * t8599 + t8322 * t8602 + t8324 * t8600) * MDP(16) + (t8320 * t8604 + t8322 * t8603 + t8324 * t8601) * MDP(17)) * t8514 + (t8518 * (((-t8426 * t8463 + t8560) * t8509 + (-t8463 * t8619 - t8466 * t8729) * t8501) * t8479 + ((0.2e1 * t8463 * t8689 + t8466 * t8637) * t8718 + (-t8384 * t8466 - t8463 * t8624) * t8509 - (t8463 * t8447 + t8500 * t8560) * t8689) * t8490 + t8466 * t8569 + (t8463 * t8423 - t8466 * t8530) * t8509 + t8723 * t8466 + t8463 * t8578) + t8515 * ((t8463 * t8417 - t8466 * t8627) * t8489 - t8381 * t8466 - t8463 * t8630)) * t8372 + (t8519 * (((-t8425 * t8462 + t8562) * t8506 + (-t8462 * t8621 - t8465 * t8730) * t8498) * t8479 + ((0.2e1 * t8462 * t8690 + t8465 * t8642) * t8719 + (-t8383 * t8465 - t8462 * t8625) * t8506 - (t8462 * t8443 + t8497 * t8562) * t8690) * t8490 + t8465 * t8570 + (t8462 * t8422 - t8465 * t8531) * t8506 + t8724 * t8465 + t8462 * t8580) + t8516 * ((t8462 * t8416 - t8465 * t8628) * t8489 - t8380 * t8465 - t8462 * t8631)) * t8371 + (t8520 * (((-t8424 * t8461 + t8564) * t8503 + (-t8461 * t8623 - t8464 * t8731) * t8495) * t8479 + ((0.2e1 * t8461 * t8691 + t8464 * t8648) * t8720 + (-t8382 * t8464 - t8461 * t8626) * t8503 - (t8461 * t8439 + t8494 * t8564) * t8691) * t8490 + t8464 * t8571 + (t8461 * t8421 - t8464 * t8532) * t8503 + t8725 * t8464 + t8461 * t8582) + t8517 * ((t8461 * t8415 - t8464 * t8629) * t8489 - t8379 * t8464 - t8461 * t8632)) * t8370; -g(2) * MDP(18) + ((t8319 * t8599 + t8321 * t8602 + t8323 * t8600) * MDP(16) + (t8319 * t8604 + t8321 * t8603 + t8323 * t8601) * MDP(17)) * t8514 + (t8518 * (((-t8426 * t8466 - t8561) * t8509 + (t8463 * t8729 - t8466 * t8619) * t8501) * t8479 + (-(t8463 * t8637 - 0.2e1 * t8466 * t8689) * t8718 + (t8384 * t8463 - t8466 * t8624) * t8509 + (-t8466 * t8447 + t8500 * t8561) * t8689) * t8490 - t8463 * t8569 + (t8466 * t8423 + t8463 * t8530) * t8509 - t8723 * t8463 + t8466 * t8578) + t8515 * ((t8466 * t8417 + t8463 * t8627) * t8489 + t8381 * t8463 - t8466 * t8630)) * t8372 + (t8519 * (((-t8425 * t8465 - t8563) * t8506 + (t8462 * t8730 - t8465 * t8621) * t8498) * t8479 + (-(t8462 * t8642 - 0.2e1 * t8465 * t8690) * t8719 + (t8383 * t8462 - t8465 * t8625) * t8506 + (-t8465 * t8443 + t8497 * t8563) * t8690) * t8490 - t8462 * t8570 + (t8465 * t8422 + t8462 * t8531) * t8506 - t8724 * t8462 + t8465 * t8580) + t8516 * ((t8465 * t8416 + t8462 * t8628) * t8489 + t8380 * t8462 - t8465 * t8631)) * t8371 + (t8520 * (((-t8424 * t8464 - t8565) * t8503 + (t8461 * t8731 - t8464 * t8623) * t8495) * t8479 + (-(t8461 * t8648 - 0.2e1 * t8464 * t8691) * t8720 + (t8382 * t8461 - t8464 * t8626) * t8503 + (-t8464 * t8439 + t8494 * t8565) * t8691) * t8490 - t8461 * t8571 + (t8464 * t8421 + t8461 * t8532) * t8503 - t8725 * t8461 + t8464 * t8582) + t8517 * ((t8464 * t8415 + t8461 * t8629) * t8489 + t8379 * t8461 - t8464 * t8632)) * t8370; -g(3) * MDP(18) + ((t8328 * t8599 + t8329 * t8602 + t8330 * t8600) * MDP(16) + (t8328 * t8604 + t8329 * t8603 + t8330 * t8601) * MDP(17)) * t8514 * t8489 + (t8518 * (t8511 * (pkin(6) * t8640 - t8575 * t8501) * t8479 + ((-pkin(6) * t8585 - t8426 * t8509) * t8683 + (-t8450 * t8509 - t8510 * t8718) * t8502) * t8490 + t8638 * t8718 + t8509 * t8502 * t8542 + (pkin(1) * t8584 - t8511 * t8447) * t8501 - t8566 * t8657) + t8515 * (-t8502 * t8728 + (-pkin(2) * t8659 - t8696) * t8511)) * t8372 + (t8519 * (t8508 * (pkin(6) * t8645 - t8576 * t8498) * t8479 + ((-pkin(6) * t8587 - t8425 * t8506) * t8685 + (-t8446 * t8506 - t8507 * t8719) * t8499) * t8490 + t8643 * t8719 + t8506 * t8499 * t8543 + (pkin(1) * t8586 - t8508 * t8443) * t8498 - t8567 * t8662) + t8516 * (-t8499 * t8727 + (-pkin(2) * t8664 - t8697) * t8508)) * t8371 + (t8520 * (t8505 * (pkin(6) * t8651 - t8577 * t8495) * t8479 + ((-pkin(6) * t8589 - t8424 * t8503) * t8687 + (-t8442 * t8503 - t8504 * t8720) * t8496) * t8490 + t8649 * t8720 + t8503 * t8496 * t8544 + (pkin(1) * t8588 - t8505 * t8439) * t8495 - t8568 * t8667) + t8517 * (-t8496 * t8726 + (-pkin(2) * t8669 - t8698) * t8505)) * t8370;];
taugX  = t1;
