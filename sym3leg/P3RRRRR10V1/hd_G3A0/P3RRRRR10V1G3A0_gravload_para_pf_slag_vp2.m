% Calculate Gravitation load for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [3x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:03:57
% EndTime: 2020-08-06 23:04:05
% DurationCPUTime: 8.54s
% Computational Cost: add. (1509->428), mult. (3333->800), div. (54->10), fcn. (2634->26), ass. (0->294)
t3161 = m(2) + m(3);
t2938 = sin(qJ(2,3));
t2947 = cos(qJ(2,3));
t2934 = legFrame(3,2);
t2903 = sin(t2934);
t2906 = cos(t2934);
t2849 = g(1) * t2903 + g(2) * t2906;
t2931 = sin(pkin(3));
t2932 = cos(pkin(3));
t2852 = g(1) * t2906 - g(2) * t2903;
t2939 = sin(qJ(1,3));
t2948 = cos(qJ(1,3));
t2986 = g(3) * t2948 + t2852 * t2939;
t2977 = t2849 * t2931 - t2986 * t2932;
t2985 = g(3) * t2939 - t2852 * t2948;
t3160 = -t2977 * t2938 + t2985 * t2947;
t2941 = sin(qJ(2,2));
t2950 = cos(qJ(2,2));
t2935 = legFrame(2,2);
t2904 = sin(t2935);
t2907 = cos(t2935);
t2850 = g(1) * t2904 + g(2) * t2907;
t2853 = g(1) * t2907 - g(2) * t2904;
t2942 = sin(qJ(1,2));
t2951 = cos(qJ(1,2));
t2984 = g(3) * t2951 + t2853 * t2942;
t2976 = t2850 * t2931 - t2984 * t2932;
t2983 = g(3) * t2942 - t2853 * t2951;
t3159 = -t2976 * t2941 + t2983 * t2950;
t2944 = sin(qJ(2,1));
t2953 = cos(qJ(2,1));
t2936 = legFrame(1,2);
t2905 = sin(t2936);
t2908 = cos(t2936);
t2851 = g(1) * t2905 + g(2) * t2908;
t2854 = g(1) * t2908 - g(2) * t2905;
t2945 = sin(qJ(1,1));
t2954 = cos(qJ(1,1));
t2982 = g(3) * t2954 + t2854 * t2945;
t2975 = t2851 * t2931 - t2982 * t2932;
t2981 = g(3) * t2945 - t2854 * t2954;
t3158 = -t2975 * t2944 + t2981 * t2953;
t2921 = t2932 ^ 2;
t3139 = -t2921 + 0.1e1;
t2909 = t2938 * pkin(6);
t2881 = t2909 + pkin(1);
t2910 = t2941 * pkin(6);
t2885 = t2910 + pkin(1);
t2911 = t2944 * pkin(6);
t2889 = t2911 + pkin(1);
t2937 = sin(qJ(3,3));
t2878 = pkin(5) * t2937 + pkin(2);
t2946 = cos(qJ(3,3));
t2922 = t2946 ^ 2;
t3136 = pkin(2) * t2922;
t3025 = -t2878 + 0.2e1 * t3136;
t3157 = t2939 * t3025;
t2940 = sin(qJ(3,2));
t2882 = pkin(5) * t2940 + pkin(2);
t2949 = cos(qJ(3,2));
t2925 = t2949 ^ 2;
t3135 = pkin(2) * t2925;
t3024 = -t2882 + 0.2e1 * t3135;
t3156 = t2942 * t3024;
t2943 = sin(qJ(3,1));
t2886 = pkin(5) * t2943 + pkin(2);
t2952 = cos(qJ(3,1));
t2928 = t2952 ^ 2;
t3134 = pkin(2) * t2928;
t3023 = -t2886 + 0.2e1 * t3134;
t3155 = t2945 * t3023;
t3084 = t2952 * t2953;
t3148 = -pkin(2) * t3084 - t2911;
t3086 = t2949 * t2950;
t3147 = -pkin(2) * t3086 - t2910;
t3088 = t2946 * t2947;
t3146 = -pkin(2) * t3088 - t2909;
t3145 = t2851 * t2932 + t2982 * t2931;
t3144 = t2850 * t2932 + t2984 * t2931;
t3143 = t2849 * t2932 + t2986 * t2931;
t3123 = pkin(6) * t2931;
t3019 = (t2947 + 0.1e1) * (t2947 - 0.1e1) * t3123;
t3131 = pkin(2) * t2938;
t3057 = t2939 * t3131;
t3100 = t2931 * t2948;
t3142 = (-(pkin(1) * t3100 + pkin(5) * t2939) * t2938 + t2948 * t3019) * t2937 - t3057;
t3018 = (t2950 + 0.1e1) * (t2950 - 0.1e1) * t3123;
t3129 = pkin(2) * t2941;
t3056 = t2942 * t3129;
t3099 = t2931 * t2951;
t3141 = (-(pkin(1) * t3099 + pkin(5) * t2942) * t2941 + t2951 * t3018) * t2940 - t3056;
t3017 = (t2953 + 0.1e1) * (t2953 - 0.1e1) * t3123;
t3127 = pkin(2) * t2944;
t3055 = t2945 * t3127;
t3098 = t2931 * t2954;
t3140 = (-(pkin(1) * t3098 + pkin(5) * t2945) * t2944 + t2954 * t3017) * t2943 - t3055;
t3138 = pkin(1) * t2931;
t3137 = pkin(1) * t2932;
t3133 = pkin(2) * t2931;
t3132 = pkin(2) * t2937;
t3130 = pkin(2) * t2940;
t3128 = pkin(2) * t2943;
t3126 = pkin(2) * t2946;
t3125 = pkin(2) * t2949;
t3124 = pkin(2) * t2952;
t3122 = pkin(6) * t2947;
t3121 = pkin(6) * t2950;
t3120 = pkin(6) * t2953;
t2894 = pkin(1) * t3132;
t3074 = t2938 * t3126;
t2858 = -t3074 + t3122;
t3110 = t2858 * t2932;
t2813 = 0.1e1 / (pkin(1) * t3110 + (t3146 * pkin(5) + t2894) * t2931);
t2877 = t3161 * pkin(1) + mrSges(1,1);
t2876 = g(3) * t2877;
t2867 = -t2946 * mrSges(3,1) + mrSges(3,2) * t2937 - mrSges(2,1);
t2933 = mrSges(3,3) - mrSges(2,2);
t3051 = t3161 * pkin(5) + mrSges(2,3);
t2968 = (t2867 * t2938 + t2933 * t2947) * t2932 + (mrSges(3,1) * t2937 + mrSges(3,2) * t2946 + t3051) * t2931 - mrSges(1,2);
t2974 = -t2867 * t2947 + t2933 * t2938;
t3119 = (t2876 * t2948 + (t2939 * t2968 + t2974 * t2948) * g(3) + (-t2968 * t2948 + t2939 * (t2877 + t2974)) * t2852) * t2813;
t2895 = pkin(1) * t3130;
t3072 = t2941 * t3125;
t2859 = -t3072 + t3121;
t3109 = t2859 * t2932;
t2814 = 0.1e1 / (pkin(1) * t3109 + (t3147 * pkin(5) + t2895) * t2931);
t2868 = -t2949 * mrSges(3,1) + mrSges(3,2) * t2940 - mrSges(2,1);
t2967 = (t2868 * t2941 + t2933 * t2950) * t2932 + (mrSges(3,1) * t2940 + mrSges(3,2) * t2949 + t3051) * t2931 - mrSges(1,2);
t2973 = -t2868 * t2950 + t2933 * t2941;
t3118 = (t2876 * t2951 + (t2942 * t2967 + t2973 * t2951) * g(3) + (-t2967 * t2951 + t2942 * (t2877 + t2973)) * t2853) * t2814;
t2896 = pkin(1) * t3128;
t3070 = t2944 * t3124;
t2860 = -t3070 + t3120;
t3108 = t2860 * t2932;
t2815 = 0.1e1 / (pkin(1) * t3108 + (t3148 * pkin(5) + t2896) * t2931);
t2869 = -t2952 * mrSges(3,1) + mrSges(3,2) * t2943 - mrSges(2,1);
t2966 = (t2869 * t2944 + t2933 * t2953) * t2932 + (mrSges(3,1) * t2943 + mrSges(3,2) * t2952 + t3051) * t2931 - mrSges(1,2);
t2972 = -t2869 * t2953 + t2933 * t2944;
t3117 = (t2876 * t2954 + (t2945 * t2966 + t2972 * t2954) * g(3) + (-t2966 * t2954 + t2945 * (t2877 + t2972)) * t2854) * t2815;
t2958 = pkin(2) ^ 2;
t3107 = t2922 * t2958;
t3106 = t2925 * t2958;
t3105 = t2928 * t2958;
t3104 = t2931 * t2932;
t3103 = t2931 * t2938;
t3102 = t2931 * t2941;
t3101 = t2931 * t2944;
t3097 = t2932 * t2939;
t3096 = t2932 * t2942;
t3095 = t2932 * t2945;
t3094 = t2937 * t2939;
t3093 = t2937 * t2947;
t3092 = t2940 * t2942;
t3091 = t2940 * t2950;
t3090 = t2943 * t2945;
t3089 = t2943 * t2953;
t3087 = t2947 * t2948;
t3085 = t2950 * t2951;
t3083 = t2953 * t2954;
t3082 = pkin(5) * t3133;
t3081 = pkin(6) * t3126;
t3080 = pkin(6) * t3125;
t3079 = pkin(6) * t3124;
t3078 = t2932 * t3132;
t3077 = t2932 * t3130;
t3076 = t2932 * t3128;
t3075 = pkin(2) * t3094;
t3073 = pkin(2) * t3092;
t3071 = pkin(2) * t3090;
t3066 = t2931 * t3122;
t3065 = t2931 * t3121;
t3064 = t2931 * t3120;
t3063 = pkin(6) * t3093;
t3062 = t2939 * t3122;
t3061 = pkin(6) * t3091;
t3060 = t2942 * t3121;
t3059 = pkin(6) * t3089;
t3058 = t2945 * t3120;
t3054 = -0.2e1 * t3081;
t3053 = -0.2e1 * t3080;
t3052 = -0.2e1 * t3079;
t3050 = t3139 * pkin(6);
t2923 = 0.1e1 / t2946;
t3046 = (t3160 * t2933 + (t2985 * t2938 + t2977 * t2947) * t2867) * t2813 * t2923;
t2926 = 0.1e1 / t2949;
t3045 = (t3159 * t2933 + (t2983 * t2941 + t2976 * t2950) * t2868) * t2814 * t2926;
t2929 = 0.1e1 / t2952;
t3044 = (t3158 * t2933 + (t2981 * t2944 + t2975 * t2953) * t2869) * t2815 * t2929;
t2879 = pkin(5) + t3132;
t3043 = t2879 * t3104;
t3042 = t2879 * t3103;
t2883 = pkin(5) + t3130;
t3041 = t2883 * t3104;
t3040 = t2883 * t3102;
t2887 = pkin(5) + t3128;
t3039 = t2887 * t3104;
t3038 = t2887 * t3101;
t3037 = t2938 * t3107;
t3036 = t2941 * t3106;
t3035 = t2944 * t3105;
t3034 = t2931 * t3097;
t3033 = t2931 * t3096;
t3032 = t2931 * t3095;
t3031 = t2938 * t3093;
t3030 = t2941 * t3091;
t3029 = t2944 * t3089;
t3028 = t2881 * t3093;
t3027 = t2885 * t3091;
t3026 = t2889 * t3089;
t2957 = pkin(6) ^ 2;
t3022 = -t2957 + t3107;
t3021 = -t2957 + t3106;
t3020 = -t2957 + t3105;
t3016 = t2922 * t3057;
t3015 = t2925 * t3056;
t3014 = t2928 * t3055;
t3013 = t2903 * t3063;
t3012 = t2906 * t3063;
t3011 = t2904 * t3061;
t3010 = t2907 * t3061;
t3009 = t2905 * t3059;
t3008 = t2908 * t3059;
t2924 = t2947 ^ 2;
t2870 = (t2924 - 0.2e1) * t3132 - pkin(5);
t2927 = t2950 ^ 2;
t2871 = (t2927 - 0.2e1) * t3130 - pkin(5);
t2930 = t2953 ^ 2;
t2872 = (t2930 - 0.2e1) * t3128 - pkin(5);
t3007 = t3139 * t2939 * t2879;
t3006 = t3139 * t2942 * t2883;
t3005 = t3139 * t2945 * t2887;
t2893 = pkin(6) * t3137;
t2959 = 0.1e1 / pkin(2);
t3004 = ((-t3143 * mrSges(3,1) - mrSges(3,2) * t3160) * t2946 + t2937 * (-mrSges(3,1) * t3160 + t3143 * mrSges(3,2))) / ((-t2946 * t3082 + t2893) * t2947 - t3074 * t3137 + t2931 * (-pkin(5) * t2909 + t2894)) * t2923 * t2959;
t3003 = ((-t3144 * mrSges(3,1) - mrSges(3,2) * t3159) * t2949 + t2940 * (-mrSges(3,1) * t3159 + t3144 * mrSges(3,2))) / ((-t2949 * t3082 + t2893) * t2950 - t3072 * t3137 + t2931 * (-pkin(5) * t2910 + t2895)) * t2926 * t2959;
t3002 = ((-t3145 * mrSges(3,1) - mrSges(3,2) * t3158) * t2952 + t2943 * (-mrSges(3,1) * t3158 + t3145 * mrSges(3,2))) / ((-t2952 * t3082 + t2893) * t2953 - t3070 * t3137 + t2931 * (-pkin(5) * t2911 + t2896)) * t2929 * t2959;
t3001 = t2932 * t3042;
t3000 = t2932 * t3040;
t2999 = t2932 * t3038;
t2998 = t2903 * t3034;
t2997 = t2904 * t3033;
t2996 = t2905 * t3032;
t2995 = t2906 * t3034;
t2994 = t2907 * t3033;
t2993 = t2908 * t3032;
t2992 = t3031 * t3133;
t2991 = t3030 * t3133;
t2990 = t3029 * t3133;
t2989 = t3034 * t2909;
t2988 = t3033 * t2910;
t2987 = t3032 * t2911;
t2980 = t3022 * t2948;
t2979 = t3021 * t2951;
t2978 = t3020 * t2954;
t2971 = t2948 * t2992;
t2970 = t2951 * t2991;
t2969 = t2954 * t2990;
t2914 = pkin(1) * t2944;
t2913 = pkin(1) * t2941;
t2912 = pkin(1) * t2938;
t2892 = t2914 + pkin(6);
t2891 = t2913 + pkin(6);
t2890 = t2912 + pkin(6);
t2888 = 0.2e1 * t2911 + pkin(1);
t2884 = 0.2e1 * t2910 + pkin(1);
t2880 = 0.2e1 * t2909 + pkin(1);
t2875 = t2914 + t3050;
t2874 = t2913 + t3050;
t2873 = t2912 + t3050;
t2866 = (t2930 - 0.1e1) * t3128 - pkin(5);
t2865 = -pkin(5) + (t2927 - 0.1e1) * t3130;
t2864 = (t2924 - 0.1e1) * t3132 - pkin(5);
t2848 = -t2921 * t2911 + t2889;
t2847 = -t2921 * t2910 + t2885;
t2846 = -t2921 * t2909 + t2881;
t2833 = t2905 * t2921 - t2905 + t2993;
t2832 = -t2908 * t2921 + t2908 + t2996;
t2831 = t2904 * t2921 - t2904 + t2994;
t2830 = -t2907 * t2921 + t2907 + t2997;
t2829 = t2903 * t2921 - t2903 + t2995;
t2828 = -t2906 * t2921 + t2906 + t2998;
t2827 = t2872 * t2945 * t2931 - t2889 * t2954;
t2826 = t2871 * t2942 * t2931 - t2885 * t2951;
t2825 = t2870 * t2939 * t2931 - t2881 * t2948;
t2824 = t2860 * t3095 - t2954 * t3148;
t2823 = t2859 * t3096 - t2951 * t3147;
t2822 = t2858 * t3097 - t2948 * t3146;
t2821 = t2888 * t3098 + t3005;
t2820 = t2884 * t3099 + t3006;
t2819 = t2880 * t3100 + t3007;
t2818 = t2892 * t3098 + t2944 * t3005;
t2817 = t2891 * t3099 + t2941 * t3006;
t2816 = t2890 * t3100 + t2938 * t3007;
t1 = [((t2860 * t2905 - t2908 * t3071) * t2931 - t2824 * t2908 - t2905 * t3076) * t3117 + (((-t2872 * t2905 + t2908 * t3058) * t2952 + (-t2908 * t3155 - t3009) * t2944) * t2921 + ((0.2e1 * t2905 * t3101 + t2908 * t3083) * t3134 + (-t2827 * t2908 - t2905 * t3064) * t2952 - (t2886 * t2905 + t2945 * t3008) * t3101) * t2932 + t2908 * t3014 + (t2905 * t2866 - t2908 * t2969) * t2952 + t3140 * t2908 + t2905 * t3026) * t3044 + ((-t3020 * t2908 * t3098 + t2833 * t3052) * t2930 + (t2833 * t3035 - (t2821 * t2908 + t2905 * t3039) * t3124 + pkin(6) * (t2848 * t2905 - t2908 * t2987)) * t2953 - (-pkin(6) * t2993 + t2875 * t2905) * t3124 - (t2818 * t2908 + t2905 * t2999) * pkin(6)) * t3002 + ((t2859 * t2904 - t2907 * t3073) * t2931 - t2823 * t2907 - t2904 * t3077) * t3118 + (((-t2871 * t2904 + t2907 * t3060) * t2949 + (-t2907 * t3156 - t3011) * t2941) * t2921 + ((0.2e1 * t2904 * t3102 + t2907 * t3085) * t3135 + (-t2826 * t2907 - t2904 * t3065) * t2949 - (t2882 * t2904 + t2942 * t3010) * t3102) * t2932 + t2907 * t3015 + (t2904 * t2865 - t2907 * t2970) * t2949 + t3141 * t2907 + t2904 * t3027) * t3045 + ((-t3021 * t2907 * t3099 + t2831 * t3053) * t2927 + (t2831 * t3036 - (t2820 * t2907 + t2904 * t3041) * t3125 + pkin(6) * (t2847 * t2904 - t2907 * t2988)) * t2950 - (-pkin(6) * t2994 + t2874 * t2904) * t3125 - (t2817 * t2907 + t2904 * t3000) * pkin(6)) * t3003 + ((t2858 * t2903 - t2906 * t3075) * t2931 - t2822 * t2906 - t2903 * t3078) * t3119 + (((-t2870 * t2903 + t2906 * t3062) * t2946 + (-t2906 * t3157 - t3013) * t2938) * t2921 + ((0.2e1 * t2903 * t3103 + t2906 * t3087) * t3136 + (-t2825 * t2906 - t2903 * t3066) * t2946 - (t2878 * t2903 + t2939 * t3012) * t3103) * t2932 + t2906 * t3016 + (t2903 * t2864 - t2906 * t2971) * t2946 + t3142 * t2906 + t2903 * t3028) * t3046 + ((-t3022 * t2906 * t3100 + t2829 * t3054) * t2924 + (t2829 * t3037 - (t2819 * t2906 + t2903 * t3043) * t3126 + pkin(6) * (t2846 * t2903 - t2906 * t2989)) * t2947 - (-pkin(6) * t2995 + t2873 * t2903) * t3126 - (t2816 * t2906 + t2903 * t3001) * pkin(6)) * t3004 - g(1) * m(4); ((t2860 * t2908 + t2905 * t3071) * t2931 + t2824 * t2905 - t2908 * t3076) * t3117 + (((-t2872 * t2908 - t2905 * t3058) * t2952 + (t2905 * t3155 - t3008) * t2944) * t2921 + (-(t2905 * t3083 - 0.2e1 * t2908 * t3101) * t3134 + (t2827 * t2905 - t2908 * t3064) * t2952 + (-t2886 * t2908 + t2945 * t3009) * t3101) * t2932 - t2905 * t3014 + (t2908 * t2866 + t2905 * t2969) * t2952 - t3140 * t2905 + t2908 * t3026) * t3044 + ((t2931 * t2905 * t2978 + 0.2e1 * t2832 * t3079) * t2930 + (-t2832 * t3035 + (t2821 * t2905 - t2908 * t3039) * t3124 + (t2848 * t2908 + t2905 * t2987) * pkin(6)) * t2953 - (pkin(6) * t2996 + t2875 * t2908) * t3124 + pkin(6) * (t2818 * t2905 - t2908 * t2999)) * t3002 + ((t2859 * t2907 + t2904 * t3073) * t2931 + t2823 * t2904 - t2907 * t3077) * t3118 + (((-t2871 * t2907 - t2904 * t3060) * t2949 + (t2904 * t3156 - t3010) * t2941) * t2921 + (-(t2904 * t3085 - 0.2e1 * t2907 * t3102) * t3135 + (t2826 * t2904 - t2907 * t3065) * t2949 + (-t2882 * t2907 + t2942 * t3011) * t3102) * t2932 - t2904 * t3015 + (t2865 * t2907 + t2904 * t2970) * t2949 - t3141 * t2904 + t2907 * t3027) * t3045 + ((t2931 * t2904 * t2979 + 0.2e1 * t2830 * t3080) * t2927 + (-t2830 * t3036 + (t2820 * t2904 - t2907 * t3041) * t3125 + (t2847 * t2907 + t2904 * t2988) * pkin(6)) * t2950 - (pkin(6) * t2997 + t2874 * t2907) * t3125 + pkin(6) * (t2817 * t2904 - t2907 * t3000)) * t3003 + ((t2858 * t2906 + t2903 * t3075) * t2931 + t2822 * t2903 - t2906 * t3078) * t3119 + (((-t2870 * t2906 - t2903 * t3062) * t2946 + (t2903 * t3157 - t3012) * t2938) * t2921 + (-(t2903 * t3087 - 0.2e1 * t2906 * t3103) * t3136 + (t2825 * t2903 - t2906 * t3066) * t2946 + (-t2878 * t2906 + t2939 * t3013) * t3103) * t2932 - t2903 * t3016 + (t2906 * t2864 + t2903 * t2971) * t2946 - t3142 * t2903 + t2906 * t3028) * t3046 + ((t2931 * t2903 * t2980 + 0.2e1 * t2828 * t3081) * t2924 + (-t2828 * t3037 + (t2819 * t2903 - t2906 * t3043) * t3126 + (t2846 * t2906 + t2903 * t2989) * pkin(6)) * t2947 - (pkin(6) * t2998 + t2873 * t2906) * t3126 + pkin(6) * (t2816 * t2903 - t2906 * t3001)) * t3004 - g(2) * m(4); (-t3148 * t2945 + (-t2931 * t3128 - t3108) * t2954) * t3117 + (((-pkin(6) * t3029 - t2872 * t2952) * t3098 + (-t2889 * t2952 - t2953 * t3134) * t2945) * t2932 + t2952 * t2945 * t2990 + (t3138 * t2944 - t3017) * t3090 + ((pkin(6) * t3084 - t3023 * t2944) * t2921 + t2928 * t3127 - t2944 * t2886) * t2954) * t3044 + ((t2932 * t2954 * t3052 + t3020 * t2945) * t2930 + ((-t2887 * t3098 + t2888 * t2945) * t3124 + t2944 * t2932 * t2978) * t2953 + pkin(6) * (t2892 * t2945 + (t2932 * t3124 - t3038) * t2954)) * t2931 * t3002 + (-t3147 * t2942 + (-t2931 * t3130 - t3109) * t2951) * t3118 + (((-pkin(6) * t3030 - t2871 * t2949) * t3099 + (-t2885 * t2949 - t2950 * t3135) * t2942) * t2932 + t2949 * t2942 * t2991 + (t3138 * t2941 - t3018) * t3092 + ((pkin(6) * t3086 - t3024 * t2941) * t2921 + t2925 * t3129 - t2941 * t2882) * t2951) * t3045 + ((t2932 * t2951 * t3053 + t3021 * t2942) * t2927 + ((-t2883 * t3099 + t2884 * t2942) * t3125 + t2941 * t2932 * t2979) * t2950 + pkin(6) * (t2891 * t2942 + (t2932 * t3125 - t3040) * t2951)) * t2931 * t3003 + (-t3146 * t2939 + (-t2931 * t3132 - t3110) * t2948) * t3119 + (((-pkin(6) * t3031 - t2870 * t2946) * t3100 + (-t2881 * t2946 - t2947 * t3136) * t2939) * t2932 + t2946 * t2939 * t2992 + (t3138 * t2938 - t3019) * t3094 + ((pkin(6) * t3088 - t3025 * t2938) * t2921 + t2922 * t3131 - t2938 * t2878) * t2948) * t3046 + ((t2932 * t2948 * t3054 + t3022 * t2939) * t2924 + ((-t2879 * t3100 + t2880 * t2939) * t3126 + t2938 * t2932 * t2980) * t2947 + pkin(6) * (t2890 * t2939 + (t2932 * t3126 - t3042) * t2948)) * t2931 * t3004 - g(3) * m(4);];
taugX  = t1;
