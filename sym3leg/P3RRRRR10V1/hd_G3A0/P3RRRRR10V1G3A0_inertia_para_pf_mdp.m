% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR10V1G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:21:44
% EndTime: 2020-08-06 23:22:45
% DurationCPUTime: 65.59s
% Computational Cost: add. (63129->1388), mult. (187353->2531), div. (4860->13), fcn. (159318->26), ass. (0->863)
t6278 = cos(pkin(3));
t6264 = t6278 ^ 2;
t6794 = -t6264 + 0.1e1;
t6283 = sin(qJ(2,3));
t6251 = t6283 * pkin(6);
t6226 = t6251 + pkin(1);
t6286 = sin(qJ(2,2));
t6252 = t6286 * pkin(6);
t6230 = t6252 + pkin(1);
t6289 = sin(qJ(2,1));
t6253 = t6289 * pkin(6);
t6234 = t6253 + pkin(1);
t6291 = cos(qJ(3,3));
t6698 = t6283 * t6291;
t6292 = cos(qJ(2,3));
t6774 = pkin(6) * t6292;
t6206 = -pkin(2) * t6698 + t6774;
t6293 = cos(qJ(1,3));
t6284 = sin(qJ(1,3));
t6712 = t6278 * t6284;
t6684 = t6291 * t6292;
t6800 = -pkin(2) * t6684 - t6251;
t6170 = t6206 * t6712 - t6293 * t6800;
t6279 = legFrame(3,2);
t6245 = sin(t6279);
t6248 = cos(t6279);
t6277 = sin(pkin(3));
t6282 = sin(qJ(3,3));
t6701 = t6282 * t6284;
t6645 = pkin(2) * t6701;
t6714 = t6278 * t6282;
t6648 = pkin(2) * t6714;
t6140 = (t6206 * t6248 + t6245 * t6645) * t6277 + t6170 * t6245 - t6248 * t6648;
t6141 = (t6206 * t6245 - t6248 * t6645) * t6277 - t6170 * t6248 - t6245 * t6648;
t6811 = t6140 * t6141;
t6294 = cos(qJ(3,2));
t6692 = t6286 * t6294;
t6295 = cos(qJ(2,2));
t6773 = pkin(6) * t6295;
t6207 = -pkin(2) * t6692 + t6773;
t6296 = cos(qJ(1,2));
t6287 = sin(qJ(1,2));
t6709 = t6278 * t6287;
t6682 = t6294 * t6295;
t6801 = -pkin(2) * t6682 - t6252;
t6171 = t6207 * t6709 - t6296 * t6801;
t6280 = legFrame(2,2);
t6246 = sin(t6280);
t6249 = cos(t6280);
t6285 = sin(qJ(3,2));
t6695 = t6285 * t6287;
t6644 = pkin(2) * t6695;
t6711 = t6278 * t6285;
t6647 = pkin(2) * t6711;
t6142 = (t6207 * t6249 + t6246 * t6644) * t6277 + t6171 * t6246 - t6249 * t6647;
t6143 = (t6207 * t6246 - t6249 * t6644) * t6277 - t6171 * t6249 - t6246 * t6647;
t6810 = t6142 * t6143;
t6297 = cos(qJ(3,1));
t6686 = t6289 * t6297;
t6298 = cos(qJ(2,1));
t6772 = pkin(6) * t6298;
t6208 = -pkin(2) * t6686 + t6772;
t6299 = cos(qJ(1,1));
t6290 = sin(qJ(1,1));
t6706 = t6278 * t6290;
t6680 = t6297 * t6298;
t6802 = -pkin(2) * t6680 - t6253;
t6172 = t6208 * t6706 - t6299 * t6802;
t6281 = legFrame(1,2);
t6247 = sin(t6281);
t6250 = cos(t6281);
t6288 = sin(qJ(3,1));
t6689 = t6288 * t6290;
t6643 = pkin(2) * t6689;
t6708 = t6278 * t6288;
t6646 = pkin(2) * t6708;
t6144 = (t6208 * t6250 + t6247 * t6643) * t6277 + t6172 * t6247 - t6250 * t6646;
t6145 = (t6208 * t6247 - t6250 * t6643) * t6277 - t6172 * t6250 - t6247 * t6646;
t6809 = t6144 * t6145;
t6784 = pkin(2) * t6282;
t6239 = pkin(1) * t6784;
t6740 = t6206 * t6278;
t6164 = pkin(1) * t6740 + (t6800 * pkin(5) + t6239) * t6277;
t6155 = 0.1e1 / t6164;
t6757 = t6155 * t6278;
t6782 = pkin(2) * t6285;
t6240 = pkin(1) * t6782;
t6739 = t6207 * t6278;
t6165 = pkin(1) * t6739 + (t6801 * pkin(5) + t6240) * t6277;
t6157 = 0.1e1 / t6165;
t6751 = t6157 * t6278;
t6780 = pkin(2) * t6288;
t6241 = pkin(1) * t6780;
t6738 = t6208 * t6278;
t6166 = pkin(1) * t6738 + (t6802 * pkin(5) + t6241) * t6277;
t6159 = 0.1e1 / t6166;
t6745 = t6159 * t6278;
t6269 = 0.1e1 / t6291;
t6808 = t6269 * t6277;
t6272 = 0.1e1 / t6294;
t6807 = t6272 * t6277;
t6275 = 0.1e1 / t6297;
t6806 = t6275 * t6277;
t6223 = pkin(5) * t6282 + pkin(2);
t6268 = t6291 ^ 2;
t6788 = pkin(2) * t6268;
t6497 = -t6223 + 0.2e1 * t6788;
t6805 = t6284 * t6497;
t6227 = pkin(5) * t6285 + pkin(2);
t6271 = t6294 ^ 2;
t6787 = pkin(2) * t6271;
t6496 = -t6227 + 0.2e1 * t6787;
t6804 = t6287 * t6496;
t6231 = pkin(5) * t6288 + pkin(2);
t6274 = t6297 ^ 2;
t6786 = pkin(2) * t6274;
t6495 = -t6231 + 0.2e1 * t6786;
t6803 = t6290 * t6495;
t6775 = pkin(6) * t6277;
t6485 = (t6292 + 0.1e1) * (t6292 - 0.1e1) * t6775;
t6783 = pkin(2) * t6283;
t6624 = t6284 * t6783;
t6720 = t6277 * t6293;
t6799 = t6282 * (-(pkin(1) * t6720 + pkin(5) * t6284) * t6283 + t6293 * t6485) - t6624;
t6484 = (t6295 + 0.1e1) * (t6295 - 0.1e1) * t6775;
t6781 = pkin(2) * t6286;
t6623 = t6287 * t6781;
t6718 = t6277 * t6296;
t6798 = t6285 * (-(pkin(1) * t6718 + pkin(5) * t6287) * t6286 + t6296 * t6484) - t6623;
t6483 = (t6298 + 0.1e1) * (t6298 - 0.1e1) * t6775;
t6779 = pkin(2) * t6289;
t6622 = t6290 * t6779;
t6716 = t6277 * t6299;
t6797 = t6288 * (-(pkin(1) * t6716 + pkin(5) * t6290) * t6289 + t6299 * t6483) - t6622;
t6796 = 0.2e1 * pkin(1);
t6795 = 0.2e1 * t6264;
t6793 = t6795 - 0.2e1;
t6792 = pkin(1) * t6277;
t6254 = pkin(1) * t6283;
t6255 = pkin(1) * t6286;
t6256 = pkin(1) * t6289;
t6791 = pkin(1) * t6292;
t6790 = pkin(1) * t6295;
t6789 = pkin(1) * t6298;
t6785 = pkin(2) * t6277;
t6778 = pkin(2) * t6291;
t6777 = pkin(2) * t6294;
t6776 = pkin(2) * t6297;
t6263 = t6277 ^ 2;
t6771 = MDP(4) * t6263;
t6770 = MDP(6) * t6277;
t6769 = MDP(7) * t6277;
t6768 = MDP(15) * t6277;
t6119 = t6140 * t6155;
t6120 = t6141 * t6155;
t6121 = t6142 * t6157;
t6122 = t6143 * t6157;
t6123 = t6144 * t6159;
t6124 = t6145 * t6159;
t6238 = pkin(1) * t6278 * pkin(6);
t6713 = t6278 * t6283;
t6651 = pkin(1) * t6713;
t6481 = t6291 * t6651;
t6678 = pkin(5) * t6785;
t6149 = 0.1e1 / ((-t6291 * t6678 + t6238) * t6292 - pkin(2) * t6481 + t6277 * (-pkin(5) * t6251 + t6239));
t6767 = t6149 * t6269;
t6302 = 0.1e1 / pkin(2);
t6766 = t6149 * t6302;
t6710 = t6278 * t6286;
t6650 = pkin(1) * t6710;
t6482 = t6294 * t6650;
t6150 = 0.1e1 / ((-t6294 * t6678 + t6238) * t6295 - pkin(2) * t6482 + t6277 * (-pkin(5) * t6252 + t6240));
t6765 = t6150 * t6272;
t6764 = t6150 * t6302;
t6707 = t6278 * t6289;
t6649 = pkin(1) * t6707;
t6476 = t6297 * t6649;
t6151 = 0.1e1 / ((-t6297 * t6678 + t6238) * t6298 - pkin(2) * t6476 + t6277 * (-pkin(5) * t6253 + t6241));
t6763 = t6151 * t6275;
t6762 = t6151 * t6302;
t6727 = t6277 * t6282;
t6152 = -t6800 * t6284 + (-pkin(2) * t6727 - t6740) * t6293;
t6131 = t6152 * t6155;
t6156 = 0.1e1 / t6164 ^ 2;
t6761 = t6152 * t6156;
t6725 = t6277 * t6285;
t6153 = -t6801 * t6287 + (-pkin(2) * t6725 - t6739) * t6296;
t6132 = t6153 * t6157;
t6158 = 0.1e1 / t6165 ^ 2;
t6760 = t6153 * t6158;
t6723 = t6277 * t6288;
t6154 = -t6802 * t6290 + (-pkin(2) * t6723 - t6738) * t6299;
t6133 = t6154 * t6159;
t6160 = 0.1e1 / t6166 ^ 2;
t6759 = t6154 * t6160;
t6758 = t6155 * t6269;
t6756 = t6155 * t6292;
t6726 = t6277 * t6283;
t6636 = pkin(5) * t6726;
t6194 = t6278 * t6791 - t6636;
t6755 = t6156 * t6194;
t6265 = t6283 ^ 2;
t6754 = t6156 * t6265;
t6753 = t6156 * t6269;
t6752 = t6157 * t6272;
t6750 = t6157 * t6295;
t6724 = t6277 * t6286;
t6635 = pkin(5) * t6724;
t6195 = -t6278 * t6790 + t6635;
t6749 = t6158 * t6195;
t6266 = t6286 ^ 2;
t6748 = t6158 * t6266;
t6747 = t6158 * t6272;
t6746 = t6159 * t6275;
t6744 = t6159 * t6298;
t6722 = t6277 * t6289;
t6634 = pkin(5) * t6722;
t6196 = -t6278 * t6789 + t6634;
t6743 = t6160 * t6196;
t6267 = t6289 ^ 2;
t6742 = t6160 * t6267;
t6741 = t6160 * t6275;
t6301 = pkin(2) ^ 2;
t6737 = t6268 * t6301;
t6736 = t6269 * t6278;
t6735 = t6269 * t6282;
t6734 = t6271 * t6301;
t6733 = t6272 * t6278;
t6732 = t6272 * t6285;
t6731 = t6274 * t6301;
t6730 = t6275 * t6278;
t6729 = t6275 * t6288;
t6728 = t6277 * t6278;
t6721 = t6277 * t6292;
t6719 = t6277 * t6295;
t6717 = t6277 * t6298;
t6715 = t6277 * t6302;
t6705 = t6278 * t6291;
t6704 = t6278 * t6294;
t6703 = t6278 * t6297;
t6702 = t6282 * t6283;
t6700 = t6282 * t6291;
t6699 = t6282 * t6292;
t6697 = t6283 * t6292;
t6696 = t6285 * t6286;
t6694 = t6285 * t6294;
t6693 = t6285 * t6295;
t6691 = t6286 * t6295;
t6690 = t6288 * t6289;
t6688 = t6288 * t6297;
t6687 = t6288 * t6298;
t6685 = t6289 * t6298;
t6683 = t6292 * t6293;
t6681 = t6295 * t6296;
t6679 = t6298 * t6299;
t6677 = pkin(6) * t6778;
t6676 = pkin(6) * t6777;
t6675 = pkin(6) * t6776;
t6674 = 0.2e1 * MDP(5) * t6263;
t6673 = 0.2e1 * t6119;
t6672 = 0.2e1 * t6120;
t6671 = 0.2e1 * t6121;
t6670 = 0.2e1 * t6122;
t6669 = 0.2e1 * t6123;
t6668 = 0.2e1 * t6124;
t6667 = 0.2e1 * t6131;
t6666 = 0.2e1 * t6132;
t6665 = 0.2e1 * t6133;
t6664 = t6155 * t6795;
t6663 = t6157 * t6795;
t6662 = t6159 * t6795;
t6661 = -0.2e1 * t6728;
t6660 = 0.2e1 * t6700;
t6659 = 0.2e1 * t6694;
t6658 = 0.2e1 * t6688;
t6657 = pkin(1) * t6766;
t6656 = pkin(1) * t6764;
t6655 = pkin(1) * t6762;
t6654 = t6269 * t6791;
t6653 = t6272 * t6790;
t6652 = t6275 * t6789;
t6639 = pkin(5) * t6155 * t6283;
t6638 = pkin(5) * t6157 * t6286;
t6637 = pkin(5) * t6159 * t6289;
t6633 = pkin(5) * t6721;
t6632 = pkin(5) * t6719;
t6631 = pkin(5) * t6717;
t6630 = pkin(6) * t6721;
t6629 = pkin(6) * t6719;
t6628 = pkin(6) * t6717;
t6627 = t6284 * t6774;
t6626 = t6287 * t6773;
t6625 = t6290 * t6772;
t6621 = -0.2e1 * t6677;
t6620 = -0.2e1 * t6676;
t6619 = -0.2e1 * t6675;
t6618 = t6794 * pkin(6);
t6270 = t6292 ^ 2;
t6242 = t6270 - 0.2e1;
t6215 = t6242 * t6784 - pkin(5);
t6173 = t6215 * t6277 * t6284 - t6226 * t6293;
t6212 = (t6270 - 0.1e1) * t6784 - pkin(5);
t6509 = t6282 * t6697;
t6398 = t6509 * t6785;
t6350 = t6293 * t6398;
t6527 = t6248 * t6699;
t6479 = pkin(6) * t6527;
t6530 = t6245 * t6699;
t6480 = pkin(6) * t6530;
t6488 = t6268 * t6624;
t6074 = ((-t6215 * t6248 - t6245 * t6627) * t6291 + (t6245 * t6805 - t6479) * t6283) * t6264 + (-(t6245 * t6683 - 0.2e1 * t6248 * t6726) * t6788 + (t6173 * t6245 - t6248 * t6630) * t6291 + (-t6223 * t6248 + t6284 * t6480) * t6726) * t6278 - t6245 * t6488 + (t6212 * t6248 + t6245 * t6350) * t6291 - t6799 * t6245 + t6226 * t6527;
t6062 = t6074 * t6758;
t6614 = t6074 * t6735;
t6273 = t6295 ^ 2;
t6243 = t6273 - 0.2e1;
t6216 = t6243 * t6782 - pkin(5);
t6174 = t6216 * t6277 * t6287 - t6230 * t6296;
t6213 = (t6273 - 0.1e1) * t6782 - pkin(5);
t6508 = t6285 * t6691;
t6397 = t6508 * t6785;
t6349 = t6296 * t6397;
t6526 = t6249 * t6693;
t6477 = pkin(6) * t6526;
t6529 = t6246 * t6693;
t6478 = pkin(6) * t6529;
t6487 = t6271 * t6623;
t6075 = ((-t6216 * t6249 - t6246 * t6626) * t6294 + (t6246 * t6804 - t6477) * t6286) * t6264 + (-(t6246 * t6681 - 0.2e1 * t6249 * t6724) * t6787 + (t6174 * t6246 - t6249 * t6629) * t6294 + (-t6227 * t6249 + t6287 * t6478) * t6724) * t6278 - t6246 * t6487 + (t6213 * t6249 + t6246 * t6349) * t6294 - t6798 * t6246 + t6230 * t6526;
t6063 = t6075 * t6752;
t6613 = t6075 * t6732;
t6276 = t6298 ^ 2;
t6244 = t6276 - 0.2e1;
t6217 = t6244 * t6780 - pkin(5);
t6175 = t6217 * t6277 * t6290 - t6234 * t6299;
t6214 = (t6276 - 0.1e1) * t6780 - pkin(5);
t6507 = t6288 * t6685;
t6396 = t6507 * t6785;
t6348 = t6299 * t6396;
t6525 = t6250 * t6687;
t6474 = pkin(6) * t6525;
t6528 = t6247 * t6687;
t6475 = pkin(6) * t6528;
t6486 = t6274 * t6622;
t6076 = ((-t6217 * t6250 - t6247 * t6625) * t6297 + (t6247 * t6803 - t6474) * t6289) * t6264 + (-(t6247 * t6679 - 0.2e1 * t6250 * t6722) * t6786 + (t6175 * t6247 - t6250 * t6628) * t6297 + (-t6231 * t6250 + t6290 * t6475) * t6722) * t6278 - t6247 * t6486 + (t6214 * t6250 + t6247 * t6348) * t6297 - t6797 * t6247 + t6234 * t6525;
t6064 = t6076 * t6746;
t6612 = t6076 * t6729;
t6077 = ((-t6215 * t6245 + t6248 * t6627) * t6291 + (-t6248 * t6805 - t6480) * t6283) * t6264 + ((0.2e1 * t6245 * t6726 + t6248 * t6683) * t6788 + (-t6173 * t6248 - t6245 * t6630) * t6291 - (t6223 * t6245 + t6284 * t6479) * t6726) * t6278 + t6248 * t6488 + (t6212 * t6245 - t6248 * t6350) * t6291 + t6799 * t6248 + t6226 * t6530;
t6065 = t6077 * t6758;
t6611 = t6077 * t6735;
t6078 = ((-t6216 * t6246 + t6249 * t6626) * t6294 + (-t6249 * t6804 - t6478) * t6286) * t6264 + ((0.2e1 * t6246 * t6724 + t6249 * t6681) * t6787 + (-t6174 * t6249 - t6246 * t6629) * t6294 - (t6227 * t6246 + t6287 * t6477) * t6724) * t6278 + t6249 * t6487 + (t6213 * t6246 - t6249 * t6349) * t6294 + t6798 * t6249 + t6230 * t6529;
t6066 = t6078 * t6752;
t6610 = t6078 * t6732;
t6079 = ((-t6217 * t6247 + t6250 * t6625) * t6297 + (-t6250 * t6803 - t6475) * t6289) * t6264 + ((0.2e1 * t6247 * t6722 + t6250 * t6679) * t6786 + (-t6175 * t6250 - t6247 * t6628) * t6297 - (t6231 * t6247 + t6290 * t6474) * t6722) * t6278 + t6250 * t6486 + (t6214 * t6247 - t6250 * t6348) * t6297 + t6797 * t6250 + t6234 * t6528;
t6067 = t6079 * t6746;
t6609 = t6079 * t6729;
t6235 = t6254 + pkin(6);
t6224 = pkin(5) + t6784;
t6470 = t6794 * t6284 * t6224;
t6161 = t6235 * t6720 + t6283 * t6470;
t6225 = 0.2e1 * t6251 + pkin(1);
t6167 = t6225 * t6720 + t6470;
t6518 = t6277 * t6712;
t6410 = t6245 * t6518;
t6176 = -t6248 * t6264 + t6248 + t6410;
t6200 = -t6264 * t6251 + t6226;
t6218 = t6254 + t6618;
t6300 = pkin(6) ^ 2;
t6491 = -t6300 + t6737;
t6392 = t6293 * t6491;
t6395 = t6518 * t6251;
t6535 = t6224 * t6726;
t6413 = t6278 * t6535;
t6524 = t6283 * t6737;
t6536 = t6224 * t6728;
t6080 = (t6245 * t6277 * t6392 + 0.2e1 * t6176 * t6677) * t6270 + (-t6176 * t6524 + (t6167 * t6245 - t6248 * t6536) * t6778 + (t6200 * t6248 + t6245 * t6395) * pkin(6)) * t6292 - (pkin(6) * t6410 + t6218 * t6248) * t6778 + pkin(6) * (t6161 * t6245 - t6248 * t6413);
t6608 = t6080 * t6767;
t6407 = t6248 * t6518;
t6177 = t6245 * t6264 - t6245 + t6407;
t6081 = (-t6248 * t6491 * t6720 + t6177 * t6621) * t6270 + (t6177 * t6524 - (t6167 * t6248 + t6245 * t6536) * t6778 + pkin(6) * (t6200 * t6245 - t6248 * t6395)) * t6292 - (-pkin(6) * t6407 + t6218 * t6245) * t6778 - (t6161 * t6248 + t6245 * t6413) * pkin(6);
t6607 = t6081 * t6767;
t6236 = t6255 + pkin(6);
t6228 = pkin(5) + t6782;
t6469 = t6794 * t6287 * t6228;
t6162 = t6236 * t6718 + t6286 * t6469;
t6229 = 0.2e1 * t6252 + pkin(1);
t6168 = t6229 * t6718 + t6469;
t6517 = t6277 * t6709;
t6409 = t6246 * t6517;
t6178 = -t6249 * t6264 + t6249 + t6409;
t6201 = -t6264 * t6252 + t6230;
t6219 = t6255 + t6618;
t6490 = -t6300 + t6734;
t6391 = t6296 * t6490;
t6394 = t6517 * t6252;
t6533 = t6228 * t6724;
t6412 = t6278 * t6533;
t6522 = t6286 * t6734;
t6534 = t6228 * t6728;
t6082 = (t6246 * t6277 * t6391 + 0.2e1 * t6178 * t6676) * t6273 + (-t6178 * t6522 + (t6168 * t6246 - t6249 * t6534) * t6777 + (t6201 * t6249 + t6246 * t6394) * pkin(6)) * t6295 - (pkin(6) * t6409 + t6219 * t6249) * t6777 + pkin(6) * (t6162 * t6246 - t6249 * t6412);
t6606 = t6082 * t6765;
t6406 = t6249 * t6517;
t6179 = t6246 * t6264 - t6246 + t6406;
t6083 = (-t6249 * t6490 * t6718 + t6179 * t6620) * t6273 + (t6179 * t6522 - (t6168 * t6249 + t6246 * t6534) * t6777 + pkin(6) * (t6201 * t6246 - t6249 * t6394)) * t6295 - (-pkin(6) * t6406 + t6219 * t6246) * t6777 - (t6162 * t6249 + t6246 * t6412) * pkin(6);
t6605 = t6083 * t6765;
t6237 = t6256 + pkin(6);
t6232 = pkin(5) + t6780;
t6468 = t6794 * t6290 * t6232;
t6163 = t6237 * t6716 + t6289 * t6468;
t6233 = 0.2e1 * t6253 + pkin(1);
t6169 = t6233 * t6716 + t6468;
t6516 = t6277 * t6706;
t6408 = t6247 * t6516;
t6180 = -t6250 * t6264 + t6250 + t6408;
t6202 = -t6264 * t6253 + t6234;
t6220 = t6256 + t6618;
t6489 = -t6300 + t6731;
t6390 = t6299 * t6489;
t6393 = t6516 * t6253;
t6531 = t6232 * t6722;
t6411 = t6278 * t6531;
t6520 = t6289 * t6731;
t6532 = t6232 * t6728;
t6084 = (t6247 * t6277 * t6390 + 0.2e1 * t6180 * t6675) * t6276 + (-t6180 * t6520 + (t6169 * t6247 - t6250 * t6532) * t6776 + (t6202 * t6250 + t6247 * t6393) * pkin(6)) * t6298 - (pkin(6) * t6408 + t6220 * t6250) * t6776 + pkin(6) * (t6163 * t6247 - t6250 * t6411);
t6604 = t6084 * t6763;
t6405 = t6250 * t6516;
t6181 = t6247 * t6264 - t6247 + t6405;
t6085 = (-t6250 * t6489 * t6716 + t6181 * t6619) * t6276 + (t6181 * t6520 - (t6169 * t6250 + t6247 * t6532) * t6776 + pkin(6) * (t6202 * t6247 - t6250 * t6393)) * t6298 - (-pkin(6) * t6405 + t6220 * t6247) * t6776 - (t6163 * t6250 + t6247 * t6411) * pkin(6);
t6603 = t6085 * t6763;
t6110 = ((-pkin(6) * t6509 - t6215 * t6291) * t6720 + (-t6226 * t6291 - t6292 * t6788) * t6284) * t6278 + t6291 * t6284 * t6398 + (t6792 * t6283 - t6485) * t6701 + ((pkin(6) * t6684 - t6283 * t6497) * t6264 + t6268 * t6783 - t6223 * t6283) * t6293;
t6104 = t6110 * t6758;
t6128 = t6152 * t6757;
t6096 = t6128 + t6104;
t6602 = t6096 * t6758;
t6111 = ((-pkin(6) * t6508 - t6216 * t6294) * t6718 + (-t6230 * t6294 - t6295 * t6787) * t6287) * t6278 + t6294 * t6287 * t6397 + (t6792 * t6286 - t6484) * t6695 + ((pkin(6) * t6682 - t6286 * t6496) * t6264 + t6271 * t6781 - t6227 * t6286) * t6296;
t6105 = t6111 * t6752;
t6129 = t6153 * t6751;
t6098 = t6129 + t6105;
t6601 = t6098 * t6752;
t6112 = ((-pkin(6) * t6507 - t6217 * t6297) * t6716 + (-t6234 * t6297 - t6298 * t6786) * t6290) * t6278 + t6297 * t6290 * t6396 + (t6792 * t6289 - t6483) * t6689 + ((pkin(6) * t6680 - t6289 * t6495) * t6264 + t6274 * t6779 - t6231 * t6289) * t6299;
t6106 = t6112 * t6746;
t6130 = t6154 * t6745;
t6100 = t6130 + t6106;
t6600 = t6100 * t6746;
t6125 = (t6278 * t6293 * t6621 + t6284 * t6491) * t6270 + ((-t6224 * t6720 + t6225 * t6284) * t6778 + t6392 * t6713) * t6292 + pkin(6) * (t6235 * t6284 + (pkin(2) * t6705 - t6535) * t6293);
t6467 = t6125 * t6149 * t6715;
t6386 = t6269 * t6467;
t6548 = t6155 * t6721;
t6101 = t6152 * t6548 - t6386;
t6599 = t6101 * t6767;
t6598 = t6101 * t6735;
t6126 = (t6278 * t6296 * t6620 + t6287 * t6490) * t6273 + ((-t6228 * t6718 + t6229 * t6287) * t6777 + t6391 * t6710) * t6295 + pkin(6) * (t6236 * t6287 + (pkin(2) * t6704 - t6533) * t6296);
t6466 = t6126 * t6150 * t6715;
t6385 = t6272 * t6466;
t6544 = t6157 * t6719;
t6102 = t6153 * t6544 - t6385;
t6597 = t6102 * t6765;
t6596 = t6102 * t6732;
t6127 = (t6278 * t6299 * t6619 + t6290 * t6489) * t6276 + ((-t6232 * t6716 + t6233 * t6290) * t6776 + t6390 * t6707) * t6298 + pkin(6) * (t6237 * t6290 + (pkin(2) * t6703 - t6531) * t6299);
t6465 = t6127 * t6151 * t6715;
t6384 = t6275 * t6465;
t6540 = t6159 * t6717;
t6103 = t6154 * t6540 - t6384;
t6595 = t6103 * t6763;
t6594 = t6103 * t6729;
t6593 = t6110 * t6735;
t6592 = t6111 * t6732;
t6591 = t6112 * t6729;
t6590 = t6125 * t6767;
t6589 = t6126 * t6765;
t6588 = t6127 * t6763;
t6587 = t6156 * t6811;
t6586 = t6140 * t6756;
t6585 = t6140 * t6755;
t6584 = t6140 * t6753;
t6583 = t6141 * t6756;
t6582 = t6141 * t6755;
t6581 = t6141 * t6753;
t6580 = t6158 * t6810;
t6579 = t6142 * t6750;
t6578 = t6142 * t6749;
t6577 = t6142 * t6747;
t6576 = t6143 * t6750;
t6575 = t6143 * t6749;
t6574 = t6143 * t6747;
t6573 = t6160 * t6809;
t6572 = t6144 * t6744;
t6571 = t6144 * t6743;
t6570 = t6144 * t6741;
t6569 = t6145 * t6744;
t6568 = t6145 * t6743;
t6567 = t6145 * t6741;
t6566 = t6149 * t6758;
t6565 = t6269 * t6766;
t6564 = t6150 * t6752;
t6563 = t6272 * t6764;
t6562 = t6151 * t6746;
t6561 = t6275 * t6762;
t6560 = t6152 * t6756;
t6559 = t6152 * t6755;
t6558 = t6152 * t6754;
t6557 = t6152 * t6753;
t6556 = t6153 * t6750;
t6555 = t6153 * t6749;
t6554 = t6153 * t6748;
t6553 = t6153 * t6747;
t6552 = t6154 * t6744;
t6551 = t6154 * t6743;
t6550 = t6154 * t6742;
t6549 = t6154 * t6741;
t6547 = t6194 * t6753;
t6197 = t6633 + t6651;
t6546 = t6197 * t6753;
t6545 = t6156 * t6697;
t6543 = t6195 * t6747;
t6198 = t6632 + t6650;
t6542 = t6198 * t6747;
t6541 = t6158 * t6691;
t6539 = t6196 * t6741;
t6199 = t6631 + t6649;
t6538 = t6199 * t6741;
t6537 = t6160 * t6685;
t6523 = t6269 * t6727;
t6521 = t6272 * t6725;
t6519 = t6275 * t6723;
t6515 = t6277 * t6702;
t6514 = t6277 * t6698;
t6513 = t6277 * t6696;
t6512 = t6277 * t6692;
t6511 = t6277 * t6690;
t6510 = t6277 * t6686;
t6506 = (t6537 * t6809 + t6541 * t6810 + t6545 * t6811) * t6674 + (t6265 * t6587 + t6266 * t6580 + t6267 * t6573) * t6771 + (t6573 + t6580 + t6587) * MDP(1);
t6423 = t6154 * t6537;
t6426 = t6153 * t6541;
t6429 = t6152 * t6545;
t6505 = (t6140 * t6429 + t6142 * t6426 + t6144 * t6423) * t6674 + (t6140 * t6558 + t6142 * t6554 + t6144 * t6550) * t6771 + (t6140 * t6761 + t6142 * t6760 + t6144 * t6759) * MDP(1);
t6504 = (t6141 * t6429 + t6143 * t6426 + t6145 * t6423) * t6674 + (t6141 * t6558 + t6143 * t6554 + t6145 * t6550) * t6771 + (t6141 * t6761 + t6143 * t6760 + t6145 * t6759) * MDP(1);
t6503 = t6756 * t6796;
t6502 = t6750 * t6796;
t6501 = t6744 * t6796;
t6500 = 0.2e1 * t6636;
t6499 = 0.2e1 * t6635;
t6498 = 0.2e1 * t6634;
t6494 = t6242 * t6264 - t6270;
t6493 = t6243 * t6264 - t6273;
t6492 = t6244 * t6264 - t6276;
t6473 = (0.2e1 * t6268 - 0.1e1) * t6726;
t6472 = (0.2e1 * t6271 - 0.1e1) * t6724;
t6471 = (0.2e1 * t6274 - 0.1e1) * t6722;
t6464 = t6140 * t6547;
t6463 = t6140 * t6546;
t6462 = t6141 * t6547;
t6461 = t6141 * t6546;
t6460 = t6142 * t6543;
t6459 = t6142 * t6542;
t6458 = t6143 * t6543;
t6457 = t6143 * t6542;
t6456 = t6144 * t6539;
t6455 = t6144 * t6538;
t6454 = t6145 * t6539;
t6453 = t6145 * t6538;
t6182 = t6197 * t6282 + t6291 * t6792;
t6452 = t6182 * t6566;
t6185 = (pkin(1) * t6282 - pkin(5) * t6684) * t6277 - t6481;
t6451 = t6185 * t6566;
t6450 = t6182 * t6565;
t6449 = t6185 * t6565;
t6188 = t6515 - t6705;
t6448 = t6188 * t6565;
t6190 = t6514 + t6714;
t6447 = t6190 * t6565;
t6446 = t6292 * t6565;
t6183 = t6198 * t6285 + t6294 * t6792;
t6445 = t6183 * t6564;
t6186 = (pkin(1) * t6285 - pkin(5) * t6682) * t6277 - t6482;
t6444 = t6186 * t6564;
t6443 = t6183 * t6563;
t6442 = t6186 * t6563;
t6189 = t6513 - t6704;
t6441 = t6189 * t6563;
t6191 = t6512 + t6711;
t6440 = t6191 * t6563;
t6439 = t6295 * t6563;
t6184 = t6199 * t6288 + t6297 * t6792;
t6438 = t6184 * t6562;
t6187 = (pkin(1) * t6288 - pkin(5) * t6680) * t6277 - t6476;
t6437 = t6187 * t6562;
t6436 = t6184 * t6561;
t6435 = t6187 * t6561;
t6192 = t6511 - t6703;
t6434 = t6192 * t6561;
t6193 = t6510 + t6708;
t6433 = t6193 * t6561;
t6432 = t6298 * t6561;
t6431 = t6152 * t6547;
t6430 = t6152 * t6546;
t6428 = t6153 * t6543;
t6427 = t6153 * t6542;
t6425 = t6154 * t6539;
t6424 = t6154 * t6538;
t6422 = t6155 * t6515;
t6421 = t6155 * t6514;
t6420 = t6282 * t6547;
t6419 = t6157 * t6513;
t6418 = t6157 * t6512;
t6417 = t6285 * t6543;
t6416 = t6159 * t6511;
t6415 = t6159 * t6510;
t6414 = t6288 * t6539;
t6404 = t6155 * t6736 / 0.2e1;
t6403 = t6157 * t6733 / 0.2e1;
t6402 = t6159 * t6730 / 0.2e1;
t6401 = 0.2e1 * t6282 * t6514;
t6400 = 0.2e1 * t6285 * t6512;
t6399 = 0.2e1 * t6288 * t6510;
t6389 = t6155 * t6473;
t6388 = t6157 * t6472;
t6387 = t6159 * t6471;
t6383 = t6140 * t6452;
t6382 = t6140 * t6451;
t6381 = t6140 * t6420;
t6380 = t6141 * t6452;
t6379 = t6141 * t6451;
t6378 = t6141 * t6420;
t6377 = t6142 * t6445;
t6376 = t6142 * t6444;
t6375 = t6142 * t6417;
t6374 = t6143 * t6445;
t6373 = t6143 * t6444;
t6372 = t6143 * t6417;
t6371 = t6144 * t6438;
t6370 = t6144 * t6437;
t6369 = t6144 * t6414;
t6368 = t6145 * t6438;
t6367 = t6145 * t6437;
t6366 = t6145 * t6414;
t6365 = t6152 * t6452;
t6364 = t6152 * t6451;
t6363 = t6277 * t6446;
t6362 = t6153 * t6445;
t6361 = t6153 * t6444;
t6360 = t6277 * t6439;
t6359 = t6154 * t6438;
t6358 = t6154 * t6437;
t6357 = t6277 * t6432;
t6356 = t6152 * t6420;
t6355 = t6153 * t6417;
t6354 = t6154 * t6414;
t6353 = t6565 * t6651;
t6352 = t6563 * t6650;
t6351 = t6561 * t6649;
t6113 = t6140 * t6757;
t6029 = 0.2e1 * t6113 + t6062;
t6347 = t6140 * (t6029 * t6155 + t6074 * t6753);
t6114 = t6141 * t6757;
t6031 = 0.2e1 * t6114 + t6065;
t6346 = t6141 * (t6031 * t6155 + t6077 * t6753);
t6115 = t6142 * t6751;
t6033 = 0.2e1 * t6115 + t6063;
t6345 = t6142 * (t6033 * t6157 + t6075 * t6747);
t6116 = t6143 * t6751;
t6035 = 0.2e1 * t6116 + t6066;
t6344 = t6143 * (t6035 * t6157 + t6078 * t6747);
t6117 = t6144 * t6745;
t6037 = 0.2e1 * t6117 + t6064;
t6343 = t6144 * (t6037 * t6159 + t6076 * t6741);
t6118 = t6145 * t6745;
t6039 = 0.2e1 * t6118 + t6067;
t6342 = t6145 * (t6039 * t6159 + t6079 * t6741);
t6095 = 0.2e1 * t6128 + t6104;
t6341 = t6152 * (t6095 * t6155 + t6110 * t6753);
t6097 = 0.2e1 * t6129 + t6105;
t6340 = t6153 * (t6097 * t6157 + t6111 * t6747);
t6099 = 0.2e1 * t6130 + t6106;
t6339 = t6154 * (t6099 * t6159 + t6112 * t6741);
t6335 = t6282 * t6661 + t6793 * t6698;
t6334 = t6285 * t6661 + t6793 * t6692;
t6333 = t6288 * t6661 + t6793 * t6686;
t6332 = t6291 * t6661 - t6793 * t6702;
t6331 = t6294 * t6661 - t6793 * t6696;
t6330 = t6297 * t6661 - t6793 * t6690;
t6329 = t6029 * t6120 + t6077 * t6584;
t6328 = t6029 * t6131 + t6110 * t6584;
t6327 = t6031 * t6119 + t6074 * t6581;
t6326 = t6031 * t6131 + t6110 * t6581;
t6325 = t6033 * t6122 + t6078 * t6577;
t6324 = t6033 * t6132 + t6111 * t6577;
t6323 = t6035 * t6121 + t6075 * t6574;
t6322 = t6035 * t6132 + t6111 * t6574;
t6321 = t6037 * t6124 + t6079 * t6570;
t6320 = t6037 * t6133 + t6112 * t6570;
t6319 = t6039 * t6123 + t6076 * t6567;
t6318 = t6039 * t6133 + t6112 * t6567;
t6317 = t6074 * t6557 + t6095 * t6119;
t6316 = t6075 * t6553 + t6097 * t6121;
t6315 = t6076 * t6549 + t6099 * t6123;
t6314 = t6077 * t6557 + t6095 * t6120;
t6313 = t6078 * t6553 + t6097 * t6122;
t6312 = t6079 * t6549 + t6099 * t6124;
t6311 = -(t6074 * t6639 + t6080 * t6657) * t6808 - (-t6074 * t6654 + t6140 * t6500) * t6757 + t6140 * t6503;
t6310 = -(t6075 * t6638 + t6082 * t6656) * t6807 - (-t6075 * t6653 + t6142 * t6499) * t6751 + t6142 * t6502;
t6309 = -(t6076 * t6637 + t6084 * t6655) * t6806 - (-t6076 * t6652 + t6144 * t6498) * t6745 + t6144 * t6501;
t6308 = -(t6077 * t6639 + t6081 * t6657) * t6808 - (-t6077 * t6654 + t6141 * t6500) * t6757 + t6141 * t6503;
t6307 = -(t6078 * t6638 + t6083 * t6656) * t6807 - (-t6078 * t6653 + t6143 * t6499) * t6751 + t6143 * t6502;
t6306 = -(t6079 * t6637 + t6085 * t6655) * t6806 - (-t6079 * t6652 + t6145 * t6498) * t6745 + t6145 * t6501;
t6305 = -(pkin(1) * t6467 + t6110 * t6639) * t6808 - (-t6110 * t6654 + t6152 * t6500) * t6757 + t6152 * t6503;
t6304 = -(pkin(1) * t6466 + t6111 * t6638) * t6807 - (-t6111 * t6653 + t6153 * t6499) * t6751 + t6153 * t6502;
t6303 = -(pkin(1) * t6465 + t6112 * t6637) * t6806 - (-t6112 * t6652 + t6154 * t6498) * t6745 + t6154 * t6501;
t6148 = t6154 ^ 2;
t6147 = t6153 ^ 2;
t6146 = t6152 ^ 2;
t6139 = t6145 ^ 2;
t6138 = t6144 ^ 2;
t6137 = t6143 ^ 2;
t6136 = t6142 ^ 2;
t6135 = t6141 ^ 2;
t6134 = t6140 ^ 2;
t6094 = t6130 + t6106 / 0.2e1;
t6093 = t6129 + t6105 / 0.2e1;
t6092 = t6128 + t6104 / 0.2e1;
t6091 = t6112 * t6402 + t6133;
t6090 = t6111 * t6403 + t6132;
t6089 = t6110 * t6404 + t6131;
t6058 = t6100 * t6288 + t6154 * t6415;
t6057 = t6098 * t6285 + t6153 * t6418;
t6056 = t6096 * t6282 + t6152 * t6421;
t6055 = t6100 * t6297 - t6154 * t6416;
t6054 = t6098 * t6294 - t6153 * t6419;
t6053 = t6096 * t6291 - t6152 * t6422;
t6052 = t6133 + (-t6112 * t6730 + t6154 * t6492) * t6159;
t6051 = t6132 + (-t6111 * t6733 + t6153 * t6493) * t6157;
t6050 = t6131 + (-t6110 * t6736 + t6152 * t6494) * t6155;
t6049 = -t6085 * t6561 + t6145 * t6540;
t6048 = -t6084 * t6561 + t6144 * t6540;
t6047 = -t6083 * t6563 + t6143 * t6544;
t6046 = -t6082 * t6563 + t6142 * t6544;
t6045 = -t6081 * t6565 + t6141 * t6548;
t6044 = -t6080 * t6565 + t6140 * t6548;
t6043 = t6100 * t6658 + t6154 * t6387;
t6042 = t6096 * t6660 + t6152 * t6389;
t6041 = t6098 * t6659 + t6153 * t6388;
t6040 = t6118 + t6067;
t6038 = t6117 + t6064;
t6036 = t6116 + t6066;
t6034 = t6115 + t6063;
t6032 = t6114 + t6065;
t6030 = t6113 + t6062;
t6028 = t6118 + t6067 / 0.2e1;
t6027 = t6117 + t6064 / 0.2e1;
t6026 = t6116 + t6066 / 0.2e1;
t6025 = t6115 + t6063 / 0.2e1;
t6024 = t6114 + t6065 / 0.2e1;
t6023 = t6113 + t6062 / 0.2e1;
t6022 = t6079 * t6402 + t6124;
t6021 = t6078 * t6403 + t6122;
t6020 = t6077 * t6404 + t6120;
t6019 = t6076 * t6402 + t6123;
t6018 = t6075 * t6403 + t6121;
t6017 = t6074 * t6404 + t6119;
t6008 = t6127 * t6277 * t6351 + (t6127 * t6263 * t6432 + t6154 * t6662 - 0.2e1 * t6133) * pkin(5);
t6007 = t6126 * t6277 * t6352 + (t6126 * t6263 * t6439 + t6153 * t6663 - 0.2e1 * t6132) * pkin(5);
t6006 = t6125 * t6277 * t6353 + (t6125 * t6263 * t6446 + t6152 * t6664 - 0.2e1 * t6131) * pkin(5);
t6001 = -t6091 * t6256 - t6094 * t6631;
t6000 = t6091 * t6789 - t6094 * t6634;
t5999 = t6089 * t6791 - t6092 * t6636;
t5998 = -t6090 * t6255 - t6093 * t6632;
t5997 = -t6089 * t6254 - t6092 * t6633;
t5996 = t6090 * t6790 - t6093 * t6635;
t5995 = t6040 * t6288 + t6145 * t6415;
t5994 = t6038 * t6288 + t6144 * t6415;
t5993 = t6036 * t6285 + t6143 * t6418;
t5992 = t6034 * t6285 + t6142 * t6418;
t5991 = t6032 * t6282 + t6141 * t6421;
t5990 = t6030 * t6282 + t6140 * t6421;
t5989 = t6040 * t6297 - t6145 * t6416;
t5988 = t6038 * t6297 - t6144 * t6416;
t5987 = t6036 * t6294 - t6143 * t6419;
t5986 = t6034 * t6294 - t6142 * t6419;
t5985 = t6032 * t6291 - t6141 * t6422;
t5984 = t6030 * t6291 - t6140 * t6422;
t5980 = -t6192 * t6384 + (-t6112 * t6277 + t6154 * t6330) * t6744;
t5979 = -t6189 * t6385 + (-t6111 * t6277 + t6153 * t6331) * t6750;
t5978 = -t6188 * t6386 + (-t6110 * t6277 + t6152 * t6332) * t6756;
t5977 = t6193 * t6384 + (-t6112 * t6519 + t6154 * t6333) * t6744;
t5976 = t6191 * t6385 + (-t6111 * t6521 + t6153 * t6334) * t6750;
t5975 = t6190 * t6386 + (-t6110 * t6523 + t6152 * t6335) * t6756;
t5968 = t6124 + (-t6079 * t6730 + t6145 * t6492) * t6159;
t5967 = t6123 + (-t6076 * t6730 + t6144 * t6492) * t6159;
t5966 = t6122 + (-t6078 * t6733 + t6143 * t6493) * t6157;
t5965 = t6121 + (-t6075 * t6733 + t6142 * t6493) * t6157;
t5964 = t6120 + (-t6077 * t6736 + t6141 * t6494) * t6155;
t5963 = t6119 + (-t6074 * t6736 + t6140 * t6494) * t6155;
t5962 = t6040 * t6658 + t6145 * t6387;
t5961 = t6038 * t6658 + t6144 * t6387;
t5960 = t6032 * t6660 + t6141 * t6389;
t5959 = t6030 * t6660 + t6140 * t6389;
t5958 = t6036 * t6659 + t6143 * t6388;
t5957 = t6034 * t6659 + t6142 * t6388;
t5956 = t6085 * t6351 + (t6085 * t6357 + t6145 * t6662 - 0.2e1 * t6124) * pkin(5);
t5955 = t6084 * t6351 + (t6084 * t6357 + t6144 * t6662 - 0.2e1 * t6123) * pkin(5);
t5954 = t6083 * t6352 + (t6083 * t6360 + t6143 * t6663 - 0.2e1 * t6122) * pkin(5);
t5953 = t6082 * t6352 + (t6082 * t6360 + t6142 * t6663 - 0.2e1 * t6121) * pkin(5);
t5952 = t6081 * t6353 + (t6081 * t6363 + t6141 * t6664 - 0.2e1 * t6120) * pkin(5);
t5951 = t6080 * t6353 + (t6080 * t6363 + t6140 * t6664 - 0.2e1 * t6119) * pkin(5);
t5950 = -t6022 * t6256 - t6028 * t6631;
t5949 = t6022 * t6789 - t6028 * t6634;
t5948 = -t6019 * t6256 - t6027 * t6631;
t5947 = t6019 * t6789 - t6027 * t6634;
t5946 = t6020 * t6791 - t6024 * t6636;
t5945 = t6017 * t6791 - t6023 * t6636;
t5944 = -t6021 * t6255 - t6026 * t6632;
t5943 = -t6018 * t6255 - t6025 * t6632;
t5942 = -t6020 * t6254 - t6024 * t6633;
t5941 = -t6017 * t6254 - t6023 * t6633;
t5940 = t6021 * t6790 - t6026 * t6635;
t5939 = t6018 * t6790 - t6025 * t6635;
t5938 = t6052 * t6274 + t6094 * t6399 + t6100 * t6278;
t5937 = t6051 * t6271 + t6093 * t6400 + t6098 * t6278;
t5936 = t6050 * t6268 + t6092 * t6401 + t6096 * t6278;
t5935 = -t6051 * t6694 + t6093 * t6472;
t5934 = -t6050 * t6700 + t6092 * t6473;
t5933 = -t6052 * t6688 + t6094 * t6471;
t5932 = -t6085 * t6434 + (-t6079 * t6277 + t6145 * t6330) * t6744;
t5931 = -t6084 * t6434 + (-t6076 * t6277 + t6144 * t6330) * t6744;
t5930 = -t6083 * t6441 + (-t6078 * t6277 + t6143 * t6331) * t6750;
t5929 = -t6082 * t6441 + (-t6075 * t6277 + t6142 * t6331) * t6750;
t5928 = -t6081 * t6448 + (-t6077 * t6277 + t6141 * t6332) * t6756;
t5927 = -t6080 * t6448 + (-t6074 * t6277 + t6140 * t6332) * t6756;
t5926 = t6085 * t6433 + (-t6079 * t6519 + t6145 * t6333) * t6744;
t5925 = t6084 * t6433 + (-t6076 * t6519 + t6144 * t6333) * t6744;
t5924 = t6083 * t6440 + (-t6078 * t6521 + t6143 * t6334) * t6750;
t5923 = t6082 * t6440 + (-t6075 * t6521 + t6142 * t6334) * t6750;
t5922 = t6081 * t6447 + (-t6077 * t6523 + t6141 * t6335) * t6756;
t5921 = t6080 * t6447 + (-t6074 * t6523 + t6140 * t6335) * t6756;
t5920 = -t6288 * t6008 + t6297 * t6303;
t5919 = -t6297 * t6008 - t6288 * t6303;
t5918 = -t6285 * t6007 + t6294 * t6304;
t5917 = -t6294 * t6007 - t6285 * t6304;
t5916 = -t6282 * t6006 + t6291 * t6305;
t5915 = -t6291 * t6006 - t6282 * t6305;
t5914 = t5968 * t6274 + t6028 * t6399 + t6040 * t6278;
t5913 = t5967 * t6274 + t6027 * t6399 + t6038 * t6278;
t5912 = t5966 * t6271 + t6026 * t6400 + t6036 * t6278;
t5911 = t5965 * t6271 + t6025 * t6400 + t6034 * t6278;
t5910 = t5964 * t6268 + t6024 * t6401 + t6032 * t6278;
t5909 = t5963 * t6268 + t6023 * t6401 + t6030 * t6278;
t5908 = -t5966 * t6694 + t6026 * t6472;
t5907 = -t5965 * t6694 + t6025 * t6472;
t5906 = -t5964 * t6700 + t6024 * t6473;
t5905 = -t5963 * t6700 + t6023 * t6473;
t5904 = -t5968 * t6688 + t6028 * t6471;
t5903 = -t5967 * t6688 + t6027 * t6471;
t5902 = -t6288 * t5956 + t6297 * t6306;
t5901 = -t6297 * t5956 - t6288 * t6306;
t5900 = -t6288 * t5955 + t6297 * t6309;
t5899 = -t6297 * t5955 - t6288 * t6309;
t5898 = -t6285 * t5954 + t6294 * t6307;
t5897 = -t6294 * t5954 - t6285 * t6307;
t5896 = -t6285 * t5953 + t6294 * t6310;
t5895 = -t6294 * t5953 - t6285 * t6310;
t5894 = -t6282 * t5952 + t6291 * t6308;
t5893 = -t6291 * t5952 - t6282 * t6308;
t5892 = -t6282 * t5951 + t6291 * t6311;
t5891 = -t6291 * t5951 - t6282 * t6311;
t1 = [(t6135 * t6156 + t6137 * t6158 + t6139 * t6160) * MDP(1) + (t6135 * t6754 + t6137 * t6748 + t6139 * t6742) * t6771 + (t6135 * t6545 + t6137 * t6541 + t6139 * t6537) * t6674 + (t6283 * t6346 + t6286 * t6344 + t6289 * t6342) * t6770 + (t6292 * t6346 + t6295 * t6344 + t6298 * t6342) * t6769 + (t6032 * t6065 + t6036 * t6066 + t6040 * t6067 + (t6032 * t6120 + t6036 * t6122 + t6040 * t6124) * t6278) * MDP(8) + (t5940 * t6670 + t5946 * t6672 + t5949 * t6668 + t6077 * t6462 - t6078 * t6458 - t6079 * t6454) * MDP(9) + (t5942 * t6672 + t5944 * t6670 + t5950 * t6668 - t6077 * t6461 - t6078 * t6457 - t6079 * t6453) * MDP(10) + ((t5914 * t6145 + t5995 * t6609) * t6159 + (t5912 * t6143 + t5993 * t6610) * t6157 + (t5910 * t6141 + t5991 * t6611) * t6155) * MDP(11) + (t5904 * t6668 + t5906 * t6672 + t5908 * t6670 + t5958 * t6066 + t5960 * t6065 + t5962 * t6067) * MDP(12) + ((t6145 * t5926 - t6049 * t6609) * t6159 + (t6143 * t5924 - t6047 * t6610) * t6157 + (t6141 * t5922 - t6045 * t6611) * t6155 + (t5991 * t6607 + t5993 * t6605 + t5995 * t6603) * t6302) * MDP(13) + ((t5932 * t6145 - t6049 * t6079) * t6159 + (t5930 * t6143 - t6047 * t6078) * t6157 + (t5928 * t6141 - t6045 * t6077) * t6155 + (t5985 * t6607 + t5987 * t6605 + t5989 * t6603) * t6302) * MDP(14) + ((-t6045 * t6607 - t6047 * t6605 - t6049 * t6603) * t6302 + (t6045 * t6583 + t6047 * t6576 + t6049 * t6569) * t6277) * MDP(15) + ((-t6079 * t6743 + (-t6085 * t6436 + t5902) * t6159) * t6145 + (-t6078 * t6749 + (-t6083 * t6443 + t5898) * t6157) * t6143 + (t6077 * t6755 + (-t6081 * t6450 + t5894) * t6155) * t6141) * MDP(16) + ((t6079 * t6414 + (t6085 * t6435 + t5901) * t6159) * t6145 + (t6078 * t6417 + (t6083 * t6442 + t5897) * t6157) * t6143 + (-t6077 * t6420 + (t6081 * t6449 + t5893) * t6155) * t6141) * MDP(17) + MDP(18); (t6283 * t6329 + t6286 * t6325 + t6289 * t6321) * t6770 + (t6292 * t6329 + t6295 * t6325 + t6298 * t6321) * t6769 + (t6030 * t6065 + t6034 * t6066 + t6038 * t6067 + (t6030 * t6120 + t6034 * t6122 + t6038 * t6124) * t6278) * MDP(8) + (t5939 * t6670 + t5945 * t6672 + t5947 * t6668 + t6077 * t6464 - t6078 * t6460 - t6079 * t6456) * MDP(9) + (t5941 * t6672 + t5943 * t6670 + t5948 * t6668 - t6077 * t6463 - t6078 * t6459 - t6079 * t6455) * MDP(10) + ((t5913 * t6145 + t5994 * t6609) * t6159 + (t5911 * t6143 + t5992 * t6610) * t6157 + (t5909 * t6141 + t5990 * t6611) * t6155) * MDP(11) + (t5903 * t6668 + t5905 * t6672 + t5907 * t6670 + t5957 * t6066 + t5959 * t6065 + t5961 * t6067) * MDP(12) + ((t5925 * t6145 - t6048 * t6609) * t6159 + (t5923 * t6143 - t6046 * t6610) * t6157 + (t5921 * t6141 - t6044 * t6611) * t6155 + (t5990 * t6607 + t5992 * t6605 + t5994 * t6603) * t6302) * MDP(13) + ((t5931 * t6145 - t6048 * t6079) * t6159 + (t5929 * t6143 - t6046 * t6078) * t6157 + (t5927 * t6141 - t6044 * t6077) * t6155 + (t5984 * t6607 + t5986 * t6605 + t5988 * t6603) * t6302) * MDP(14) + ((-t6044 * t6607 - t6046 * t6605 - t6048 * t6603) * t6302 + (t6044 * t6583 + t6046 * t6576 + t6048 * t6569) * t6277) * MDP(15) + (t6077 * t6585 - t6078 * t6578 - t6079 * t6571 + t5892 * t6120 + t5896 * t6122 + t5900 * t6124 + (-t6081 * t6383 - t6083 * t6377 - t6085 * t6371) * t6302) * MDP(16) + (-t6077 * t6381 + t6078 * t6375 + t6079 * t6369 + t5891 * t6120 + t5895 * t6122 + t5899 * t6124 + (t6081 * t6382 + t6083 * t6376 + t6085 * t6370) * t6302) * MDP(17) + t6506; (t6283 * t6314 + t6286 * t6313 + t6289 * t6312) * t6770 + (t6292 * t6314 + t6295 * t6313 + t6298 * t6312) * t6769 + (t6077 * t6602 + t6078 * t6601 + t6079 * t6600 + (t6096 * t6120 + t6098 * t6122 + t6100 * t6124) * t6278) * MDP(8) + (t5996 * t6670 + t5999 * t6672 + t6000 * t6668 + t6077 * t6431 - t6078 * t6428 - t6079 * t6425) * MDP(9) + (t5997 * t6672 + t5998 * t6670 + t6001 * t6668 - t6077 * t6430 - t6078 * t6427 - t6079 * t6424) * MDP(10) + ((t5938 * t6145 + t6058 * t6609) * t6159 + (t5937 * t6143 + t6057 * t6610) * t6157 + (t5936 * t6141 + t6056 * t6611) * t6155) * MDP(11) + (t5933 * t6668 + t5934 * t6672 + t5935 * t6670 + t6041 * t6066 + t6042 * t6065 + t6043 * t6067) * MDP(12) + ((t5977 * t6145 - t6079 * t6594) * t6159 + (t5976 * t6143 - t6078 * t6596) * t6157 + (t5975 * t6141 - t6077 * t6598) * t6155 + (t6056 * t6607 + t6057 * t6605 + t6058 * t6603) * t6302) * MDP(13) + ((t5980 * t6145 - t6079 * t6103) * t6159 + (t5979 * t6143 - t6078 * t6102) * t6157 + (t5978 * t6141 - t6077 * t6101) * t6155 + (t6053 * t6607 + t6054 * t6605 + t6055 * t6603) * t6302) * MDP(14) + ((-t6081 * t6599 - t6083 * t6597 - t6085 * t6595) * t6302 + (t6101 * t6583 + t6102 * t6576 + t6103 * t6569) * t6277) * MDP(15) + (t6077 * t6559 - t6078 * t6555 - t6079 * t6551 + t5916 * t6120 + t5918 * t6122 + t5920 * t6124 + (-t6081 * t6365 - t6083 * t6362 - t6085 * t6359) * t6302) * MDP(16) + (-t6077 * t6356 + t6078 * t6355 + t6079 * t6354 + t5915 * t6120 + t5917 * t6122 + t5919 * t6124 + (t6081 * t6364 + t6083 * t6361 + t6085 * t6358) * t6302) * MDP(17) + t6504; (t6283 * t6327 + t6286 * t6323 + t6289 * t6319) * t6770 + (t6292 * t6327 + t6295 * t6323 + t6298 * t6319) * t6769 + (t6032 * t6062 + t6036 * t6063 + t6040 * t6064 + (t6032 * t6119 + t6036 * t6121 + t6040 * t6123) * t6278) * MDP(8) + (t5940 * t6671 + t5946 * t6673 + t5949 * t6669 + t6074 * t6462 - t6075 * t6458 - t6076 * t6454) * MDP(9) + (t5942 * t6673 + t5944 * t6671 + t5950 * t6669 - t6074 * t6461 - t6075 * t6457 - t6076 * t6453) * MDP(10) + ((t5914 * t6144 + t5995 * t6612) * t6159 + (t5912 * t6142 + t5993 * t6613) * t6157 + (t5910 * t6140 + t5991 * t6614) * t6155) * MDP(11) + (t5904 * t6669 + t5906 * t6673 + t5908 * t6671 + t5958 * t6063 + t5960 * t6062 + t5962 * t6064) * MDP(12) + ((t5926 * t6144 - t6049 * t6612) * t6159 + (t5924 * t6142 - t6047 * t6613) * t6157 + (t5922 * t6140 - t6045 * t6614) * t6155 + (t5991 * t6608 + t5993 * t6606 + t5995 * t6604) * t6302) * MDP(13) + ((t5932 * t6144 - t6049 * t6076) * t6159 + (t5930 * t6142 - t6047 * t6075) * t6157 + (t5928 * t6140 - t6045 * t6074) * t6155 + (t5985 * t6608 + t5987 * t6606 + t5989 * t6604) * t6302) * MDP(14) + ((-t6045 * t6608 - t6047 * t6606 - t6049 * t6604) * t6302 + (t6045 * t6586 + t6047 * t6579 + t6049 * t6572) * t6277) * MDP(15) + (t6074 * t6582 - t6075 * t6575 - t6076 * t6568 + t5894 * t6119 + t5898 * t6121 + t5902 * t6123 + (-t6080 * t6380 - t6082 * t6374 - t6084 * t6368) * t6302) * MDP(16) + (-t6074 * t6378 + t6075 * t6372 + t6076 * t6366 + t5893 * t6119 + t5897 * t6121 + t5901 * t6123 + (t6080 * t6379 + t6082 * t6373 + t6084 * t6367) * t6302) * MDP(17) + t6506; (t6134 * t6156 + t6136 * t6158 + t6138 * t6160) * MDP(1) + (t6134 * t6754 + t6136 * t6748 + t6138 * t6742) * t6771 + (t6134 * t6545 + t6136 * t6541 + t6138 * t6537) * t6674 + (t6283 * t6347 + t6286 * t6345 + t6289 * t6343) * t6770 + (t6292 * t6347 + t6295 * t6345 + t6298 * t6343) * t6769 + (t6030 * t6062 + t6034 * t6063 + t6038 * t6064 + (t6030 * t6119 + t6034 * t6121 + t6038 * t6123) * t6278) * MDP(8) + (t5939 * t6671 + t5945 * t6673 + t5947 * t6669 + t6074 * t6464 - t6075 * t6460 - t6076 * t6456) * MDP(9) + (t5941 * t6673 + t5943 * t6671 + t5948 * t6669 - t6074 * t6463 - t6075 * t6459 - t6076 * t6455) * MDP(10) + ((t5913 * t6144 + t5994 * t6612) * t6159 + (t5911 * t6142 + t5992 * t6613) * t6157 + (t5909 * t6140 + t5990 * t6614) * t6155) * MDP(11) + (t5903 * t6669 + t5905 * t6673 + t5907 * t6671 + t5957 * t6063 + t5959 * t6062 + t5961 * t6064) * MDP(12) + ((t5925 * t6144 - t6048 * t6612) * t6159 + (t5923 * t6142 - t6046 * t6613) * t6157 + (t5921 * t6140 - t6044 * t6614) * t6155 + (t5990 * t6608 + t5992 * t6606 + t5994 * t6604) * t6302) * MDP(13) + ((t5931 * t6144 - t6048 * t6076) * t6159 + (t5929 * t6142 - t6046 * t6075) * t6157 + (t5927 * t6140 - t6044 * t6074) * t6155 + (t5984 * t6608 + t5986 * t6606 + t5988 * t6604) * t6302) * MDP(14) + ((-t6044 * t6608 - t6046 * t6606 - t6048 * t6604) * t6302 + (t6044 * t6586 + t6046 * t6579 + t6048 * t6572) * t6277) * MDP(15) + ((-t6076 * t6743 + (-t6084 * t6436 + t5900) * t6159) * t6144 + (-t6075 * t6749 + (-t6082 * t6443 + t5896) * t6157) * t6142 + (t6074 * t6755 + (-t6080 * t6450 + t5892) * t6155) * t6140) * MDP(16) + ((t6076 * t6414 + (t6084 * t6435 + t5899) * t6159) * t6144 + (t6075 * t6417 + (t6082 * t6442 + t5895) * t6157) * t6142 + (-t6074 * t6420 + (t6080 * t6449 + t5891) * t6155) * t6140) * MDP(17) + MDP(18); (t6283 * t6317 + t6286 * t6316 + t6289 * t6315) * t6770 + (t6292 * t6317 + t6295 * t6316 + t6298 * t6315) * t6769 + (t6074 * t6602 + t6075 * t6601 + t6076 * t6600 + (t6096 * t6119 + t6098 * t6121 + t6100 * t6123) * t6278) * MDP(8) + (t5996 * t6671 + t5999 * t6673 + t6000 * t6669 + t6074 * t6431 - t6075 * t6428 - t6076 * t6425) * MDP(9) + (t5997 * t6673 + t5998 * t6671 + t6001 * t6669 - t6074 * t6430 - t6075 * t6427 - t6076 * t6424) * MDP(10) + ((t5938 * t6144 + t6058 * t6612) * t6159 + (t5937 * t6142 + t6057 * t6613) * t6157 + (t5936 * t6140 + t6056 * t6614) * t6155) * MDP(11) + (t5933 * t6669 + t5934 * t6673 + t5935 * t6671 + t6041 * t6063 + t6042 * t6062 + t6043 * t6064) * MDP(12) + ((t5977 * t6144 - t6076 * t6594) * t6159 + (t5976 * t6142 - t6075 * t6596) * t6157 + (t5975 * t6140 - t6074 * t6598) * t6155 + (t6056 * t6608 + t6057 * t6606 + t6058 * t6604) * t6302) * MDP(13) + ((t5980 * t6144 - t6076 * t6103) * t6159 + (t5979 * t6142 - t6075 * t6102) * t6157 + (t5978 * t6140 - t6074 * t6101) * t6155 + (t6053 * t6608 + t6054 * t6606 + t6055 * t6604) * t6302) * MDP(14) + ((-t6080 * t6599 - t6082 * t6597 - t6084 * t6595) * t6302 + (t6101 * t6586 + t6102 * t6579 + t6103 * t6572) * t6277) * MDP(15) + (t6074 * t6559 - t6075 * t6555 - t6076 * t6551 + t5916 * t6119 + t5918 * t6121 + t5920 * t6123 + (-t6080 * t6365 - t6082 * t6362 - t6084 * t6359) * t6302) * MDP(16) + (-t6074 * t6356 + t6075 * t6355 + t6076 * t6354 + t5915 * t6119 + t5917 * t6121 + t5919 * t6123 + (t6080 * t6364 + t6082 * t6361 + t6084 * t6358) * t6302) * MDP(17) + t6505; (t6283 * t6326 + t6286 * t6322 + t6289 * t6318) * t6770 + (t6292 * t6326 + t6295 * t6322 + t6298 * t6318) * t6769 + (t6032 * t6104 + t6036 * t6105 + t6040 * t6106 + (t6032 * t6131 + t6036 * t6132 + t6040 * t6133) * t6278) * MDP(8) + (t5940 * t6666 + t5946 * t6667 + t5949 * t6665 + t6110 * t6462 - t6111 * t6458 - t6112 * t6454) * MDP(9) + (t5942 * t6667 + t5944 * t6666 + t5950 * t6665 - t6110 * t6461 - t6111 * t6457 - t6112 * t6453) * MDP(10) + ((t5914 * t6154 + t5995 * t6591) * t6159 + (t5912 * t6153 + t5993 * t6592) * t6157 + (t5910 * t6152 + t5991 * t6593) * t6155) * MDP(11) + (t5904 * t6665 + t5906 * t6667 + t5908 * t6666 + t5958 * t6105 + t5960 * t6104 + t5962 * t6106) * MDP(12) + ((t5926 * t6154 - t6049 * t6591) * t6159 + (t5924 * t6153 - t6047 * t6592) * t6157 + (t5922 * t6152 - t6045 * t6593) * t6155 + (t5991 * t6590 + t5993 * t6589 + t5995 * t6588) * t6715) * MDP(13) + ((t5932 * t6154 - t6049 * t6112) * t6159 + (t5930 * t6153 - t6047 * t6111) * t6157 + (t5928 * t6152 - t6045 * t6110) * t6155 + (t5985 * t6590 + t5987 * t6589 + t5989 * t6588) * t6715) * MDP(14) + (t6045 * t6560 + t6047 * t6556 + t6049 * t6552 + (-t6045 * t6590 - t6047 * t6589 - t6049 * t6588) * t6302) * t6768 + (t6110 * t6582 - t6111 * t6575 - t6112 * t6568 + t5894 * t6131 + t5898 * t6132 + t5902 * t6133 + (-t6125 * t6380 - t6126 * t6374 - t6127 * t6368) * t6715) * MDP(16) + (-t6110 * t6378 + t6111 * t6372 + t6112 * t6366 + t5893 * t6131 + t5897 * t6132 + t5901 * t6133 + (t6125 * t6379 + t6126 * t6373 + t6127 * t6367) * t6715) * MDP(17) + t6504; (t6283 * t6328 + t6286 * t6324 + t6289 * t6320) * t6770 + (t6292 * t6328 + t6295 * t6324 + t6298 * t6320) * t6769 + (t6030 * t6104 + t6034 * t6105 + t6038 * t6106 + (t6030 * t6131 + t6034 * t6132 + t6038 * t6133) * t6278) * MDP(8) + (t5939 * t6666 + t5945 * t6667 + t5947 * t6665 + t6110 * t6464 - t6111 * t6460 - t6112 * t6456) * MDP(9) + (t5941 * t6667 + t5943 * t6666 + t5948 * t6665 - t6110 * t6463 - t6111 * t6459 - t6112 * t6455) * MDP(10) + ((t5913 * t6154 + t5994 * t6591) * t6159 + (t5911 * t6153 + t5992 * t6592) * t6157 + (t5909 * t6152 + t5990 * t6593) * t6155) * MDP(11) + (t5903 * t6665 + t5905 * t6667 + t5907 * t6666 + t5957 * t6105 + t5959 * t6104 + t5961 * t6106) * MDP(12) + ((t5925 * t6154 - t6048 * t6591) * t6159 + (t5923 * t6153 - t6046 * t6592) * t6157 + (t5921 * t6152 - t6044 * t6593) * t6155 + (t5990 * t6590 + t5992 * t6589 + t5994 * t6588) * t6715) * MDP(13) + ((t5931 * t6154 - t6048 * t6112) * t6159 + (t5929 * t6153 - t6046 * t6111) * t6157 + (t5927 * t6152 - t6044 * t6110) * t6155 + (t5984 * t6590 + t5986 * t6589 + t5988 * t6588) * t6715) * MDP(14) + (t6044 * t6560 + t6046 * t6556 + t6048 * t6552 + (-t6044 * t6590 - t6046 * t6589 - t6048 * t6588) * t6302) * t6768 + (t6110 * t6585 - t6111 * t6578 - t6112 * t6571 + t5892 * t6131 + t5896 * t6132 + t5900 * t6133 + (-t6125 * t6383 - t6126 * t6377 - t6127 * t6371) * t6715) * MDP(16) + (-t6110 * t6381 + t6111 * t6375 + t6112 * t6369 + t5891 * t6131 + t5895 * t6132 + t5899 * t6133 + (t6125 * t6382 + t6126 * t6376 + t6127 * t6370) * t6715) * MDP(17) + t6505; (t6146 * t6156 + t6147 * t6158 + t6148 * t6160) * MDP(1) + (t6146 * t6754 + t6147 * t6748 + t6148 * t6742) * t6771 + (t6146 * t6545 + t6147 * t6541 + t6148 * t6537) * t6674 + (t6283 * t6341 + t6286 * t6340 + t6289 * t6339) * t6770 + (t6292 * t6341 + t6295 * t6340 + t6298 * t6339) * t6769 + (t6096 * t6104 + t6098 * t6105 + t6100 * t6106 + (t6096 * t6131 + t6098 * t6132 + t6100 * t6133) * t6278) * MDP(8) + (t5996 * t6666 + t5999 * t6667 + t6000 * t6665 + t6110 * t6431 - t6111 * t6428 - t6112 * t6425) * MDP(9) + (t5997 * t6667 + t5998 * t6666 + t6001 * t6665 - t6110 * t6430 - t6111 * t6427 - t6112 * t6424) * MDP(10) + ((t5938 * t6154 + t6058 * t6591) * t6159 + (t5937 * t6153 + t6057 * t6592) * t6157 + (t5936 * t6152 + t6056 * t6593) * t6155) * MDP(11) + (t5933 * t6665 + t5934 * t6667 + t5935 * t6666 + t6041 * t6105 + t6042 * t6104 + t6043 * t6106) * MDP(12) + ((t6154 * t5977 - t6103 * t6591) * t6159 + (t6153 * t5976 - t6102 * t6592) * t6157 + (t6152 * t5975 - t6101 * t6593) * t6155 + (t6056 * t6590 + t6057 * t6589 + t6058 * t6588) * t6715) * MDP(13) + ((t5980 * t6154 - t6103 * t6112) * t6159 + (t5979 * t6153 - t6102 * t6111) * t6157 + (t5978 * t6152 - t6101 * t6110) * t6155 + (t6053 * t6590 + t6054 * t6589 + t6055 * t6588) * t6715) * MDP(14) + (t6101 * t6560 + t6102 * t6556 + t6103 * t6552 + (-t6101 * t6590 - t6102 * t6589 - t6103 * t6588) * t6302) * t6768 + ((-t6112 * t6743 + (-t6184 * t6384 + t5920) * t6159) * t6154 + (-t6111 * t6749 + (-t6183 * t6385 + t5918) * t6157) * t6153 + (t6110 * t6755 + (-t6182 * t6386 + t5916) * t6155) * t6152) * MDP(16) + ((t6112 * t6414 + (t6187 * t6384 + t5919) * t6159) * t6154 + (t6111 * t6417 + (t6186 * t6385 + t5917) * t6157) * t6153 + (-t6110 * t6420 + (t6185 * t6386 + t5915) * t6155) * t6152) * MDP(17) + MDP(18);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
