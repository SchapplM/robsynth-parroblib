% Calculate inertia matrix for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% MX [3x3]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1(xP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_inertia_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:57:06
% EndTime: 2020-08-06 22:57:21
% DurationCPUTime: 14.88s
% Computational Cost: add. (14079->644), mult. (33777->1127), div. (648->10), fcn. (21780->32), ass. (0->449)
t1832 = m(3) * rSges(3,1);
t1735 = (pkin(5) * t1832);
t1868 = -2 * t1735;
t1554 = cos(qJ(3,1));
t1831 = m(3) * rSges(3,2);
t1486 = rSges(3,1) * t1831 - Icges(3,4);
t1545 = sin(qJ(3,1));
t1745 = t1545 * t1486;
t1567 = rSges(3,2) ^ 2;
t1569 = rSges(3,1) ^ 2;
t1503 = -t1567 + t1569;
t1443 = t1503 * m(3) - Icges(3,1) + Icges(3,2);
t1531 = t1554 ^ 2;
t1856 = t1443 * t1531;
t1867 = -0.2e1 * t1554 * t1745 + t1856;
t1551 = cos(qJ(3,2));
t1542 = sin(qJ(3,2));
t1749 = t1542 * t1486;
t1528 = t1551 ^ 2;
t1857 = t1443 * t1528;
t1866 = -0.2e1 * t1551 * t1749 + t1857;
t1548 = cos(qJ(3,3));
t1539 = sin(qJ(3,3));
t1753 = t1539 * t1486;
t1525 = t1548 ^ 2;
t1858 = t1443 * t1525;
t1865 = -0.2e1 * t1548 * t1753 + t1858;
t1549 = cos(qJ(2,3));
t1527 = t1549 ^ 2;
t1566 = rSges(3,3) ^ 2;
t1568 = rSges(2,2) ^ 2;
t1570 = rSges(2,1) ^ 2;
t1800 = Icges(2,1) + Icges(3,2);
t1855 = Icges(2,2) + Icges(3,3) - t1800 + (-t1568 + t1570) * m(2) + (-t1566 + t1567) * m(3);
t1864 = -(t1855 + t1865) * t1527 + t1539 * t1868;
t1552 = cos(qJ(2,2));
t1530 = t1552 ^ 2;
t1863 = -(t1855 + t1866) * t1530 + t1542 * t1868;
t1555 = cos(qJ(2,1));
t1533 = t1555 ^ 2;
t1862 = -(t1855 + t1867) * t1533 + t1545 * t1868;
t1830 = rSges(3,3) * m(3);
t1484 = rSges(3,2) * t1830 - Icges(3,6);
t1485 = rSges(3,1) * t1830 - Icges(3,5);
t1407 = -t1484 * t1548 - t1485 * t1539;
t1408 = -t1484 * t1551 - t1485 * t1542;
t1409 = -t1484 * t1554 - t1485 * t1545;
t1540 = sin(qJ(2,3));
t1557 = rSges(2,3) + pkin(5);
t1826 = m(2) * t1557;
t1583 = -rSges(2,1) * t1826 + Icges(2,5) + t1486;
t1610 = -rSges(2,2) * t1826 + pkin(5) * t1830 + Icges(2,6);
t1725 = t1539 * t1831;
t1834 = -0.2e1 * t1486;
t1854 = (t1610 - t1407) * t1549 + ((-t1443 * t1539 - t1735) * t1548 + t1525 * t1834 + pkin(5) * t1725 + t1583) * t1540;
t1543 = sin(qJ(2,2));
t1724 = t1542 * t1831;
t1853 = (t1610 - t1408) * t1552 + ((-t1443 * t1542 - t1735) * t1551 + t1528 * t1834 + pkin(5) * t1724 + t1583) * t1543;
t1546 = sin(qJ(2,1));
t1723 = t1545 * t1831;
t1852 = (t1610 - t1409) * t1555 + ((-t1443 * t1545 - t1735) * t1554 + t1531 * t1834 + pkin(5) * t1723 + t1583) * t1546;
t1535 = cos(pkin(3));
t1524 = t1535 ^ 2;
t1827 = -t1524 + 0.1e1;
t1509 = t1540 * pkin(6);
t1465 = t1509 + pkin(1);
t1510 = t1543 * pkin(6);
t1469 = t1510 + pkin(1);
t1511 = t1546 * pkin(6);
t1473 = t1511 + pkin(1);
t1833 = m(2) * rSges(2,2);
t1798 = rSges(2,1) * t1833 - Icges(2,4);
t1541 = sin(qJ(1,3));
t1462 = t1539 * pkin(5) + pkin(2);
t1823 = pkin(2) * t1525;
t1657 = -t1462 + 0.2e1 * t1823;
t1851 = t1541 * t1657;
t1544 = sin(qJ(1,2));
t1466 = t1542 * pkin(5) + pkin(2);
t1822 = pkin(2) * t1528;
t1656 = -t1466 + 0.2e1 * t1822;
t1850 = t1544 * t1656;
t1547 = sin(qJ(1,1));
t1470 = t1545 * pkin(5) + pkin(2);
t1821 = pkin(2) * t1531;
t1655 = -t1470 + 0.2e1 * t1821;
t1849 = t1547 * t1655;
t1737 = t1554 * t1555;
t1845 = -pkin(2) * t1737 - t1511;
t1739 = t1551 * t1552;
t1844 = -pkin(2) * t1739 - t1510;
t1741 = t1548 * t1549;
t1843 = -pkin(2) * t1741 - t1509;
t1550 = cos(qJ(1,3));
t1534 = sin(pkin(3));
t1810 = pkin(6) * t1534;
t1645 = (t1549 + 0.1e1) * (t1549 - 0.1e1) * t1810;
t1819 = pkin(2) * t1540;
t1706 = t1541 * t1819;
t1760 = t1534 * t1550;
t1838 = (-(pkin(1) * t1760 + t1541 * pkin(5)) * t1540 + t1550 * t1645) * t1539 - t1706;
t1553 = cos(qJ(1,2));
t1644 = (t1552 + 0.1e1) * (t1552 - 0.1e1) * t1810;
t1818 = pkin(2) * t1543;
t1704 = t1544 * t1818;
t1759 = t1534 * t1553;
t1837 = (-(pkin(1) * t1759 + t1544 * pkin(5)) * t1543 + t1553 * t1644) * t1542 - t1704;
t1556 = cos(qJ(1,1));
t1643 = (t1555 + 0.1e1) * (t1555 - 0.1e1) * t1810;
t1817 = pkin(2) * t1546;
t1702 = t1547 * t1817;
t1758 = t1534 * t1556;
t1836 = (-(pkin(1) * t1758 + t1547 * pkin(5)) * t1546 + t1556 * t1643) * t1545 - t1702;
t1835 = -0.2e1 * pkin(1);
t1560 = pkin(1) * rSges(3,1);
t1829 = pkin(1) * rSges(3,2);
t1828 = t1443 / 0.2e1;
t1825 = pkin(1) * t1534;
t1824 = pkin(1) * t1535;
t1512 = pkin(1) * t1540;
t1513 = pkin(1) * t1543;
t1514 = pkin(1) * t1546;
t1820 = pkin(2) * t1534;
t1816 = pkin(2) * t1548;
t1815 = pkin(2) * t1551;
t1814 = pkin(2) * t1554;
t1813 = pkin(5) * t1549;
t1812 = pkin(5) * t1552;
t1811 = pkin(5) * t1555;
t1808 = (t1568 + t1570) * m(2);
t1806 = t1539 * pkin(2);
t1805 = t1542 * pkin(2);
t1804 = t1545 * pkin(2);
t1803 = t1549 * pkin(6);
t1802 = t1552 * pkin(6);
t1801 = t1555 * pkin(6);
t1799 = Icges(3,1) + Icges(2,3);
t1436 = (t1527 - 0.2e1) * t1806 - pkin(5);
t1398 = t1436 * t1541 * t1534 - t1465 * t1550;
t1433 = -pkin(5) + (t1527 - 0.1e1) * t1806;
t1536 = legFrame(3,2);
t1496 = sin(t1536);
t1499 = cos(t1536);
t1750 = t1540 * t1549;
t1666 = t1539 * t1750;
t1609 = t1666 * t1820;
t1590 = t1550 * t1609;
t1711 = t1541 * t1803;
t1641 = t1496 * t1711;
t1642 = t1525 * t1706;
t1751 = t1539 * t1549;
t1663 = t1465 * t1751;
t1712 = pkin(6) * t1751;
t1715 = t1534 * t1803;
t1740 = t1549 * t1550;
t1763 = t1534 * t1540;
t1347 = ((-t1436 * t1499 - t1641) * t1548 + (t1496 * t1851 - t1499 * t1712) * t1540) * t1524 + (-(t1496 * t1740 - 0.2e1 * t1499 * t1763) * t1823 + (t1398 * t1496 - t1499 * t1715) * t1548 + (-t1499 * t1462 + t1539 * t1641) * t1763) * t1535 - t1496 * t1642 + (t1499 * t1433 + t1496 * t1590) * t1548 - t1838 * t1496 + t1499 * t1663;
t1526 = 0.1e1 / t1548;
t1797 = t1347 * t1526;
t1437 = (t1530 - 0.2e1) * t1805 - pkin(5);
t1399 = t1437 * t1544 * t1534 - t1469 * t1553;
t1434 = -pkin(5) + (t1530 - 0.1e1) * t1805;
t1537 = legFrame(2,2);
t1497 = sin(t1537);
t1500 = cos(t1537);
t1746 = t1543 * t1552;
t1665 = t1542 * t1746;
t1608 = t1665 * t1820;
t1589 = t1553 * t1608;
t1709 = t1544 * t1802;
t1639 = t1497 * t1709;
t1647 = t1528 * t1704;
t1747 = t1542 * t1552;
t1662 = t1469 * t1747;
t1710 = pkin(6) * t1747;
t1714 = t1534 * t1802;
t1738 = t1552 * t1553;
t1762 = t1534 * t1543;
t1348 = ((-t1437 * t1500 - t1639) * t1551 + (t1497 * t1850 - t1500 * t1710) * t1543) * t1524 + (-(t1497 * t1738 - 0.2e1 * t1500 * t1762) * t1822 + (t1399 * t1497 - t1500 * t1714) * t1551 + (-t1500 * t1466 + t1542 * t1639) * t1762) * t1535 - t1497 * t1647 + (t1500 * t1434 + t1497 * t1589) * t1551 - t1837 * t1497 + t1500 * t1662;
t1529 = 0.1e1 / t1551;
t1796 = t1348 * t1529;
t1438 = (t1533 - 0.2e1) * t1804 - pkin(5);
t1400 = t1438 * t1547 * t1534 - t1473 * t1556;
t1435 = -pkin(5) + (t1533 - 0.1e1) * t1804;
t1538 = legFrame(1,2);
t1498 = sin(t1538);
t1501 = cos(t1538);
t1742 = t1546 * t1555;
t1664 = t1545 * t1742;
t1607 = t1664 * t1820;
t1588 = t1556 * t1607;
t1707 = t1547 * t1801;
t1637 = t1498 * t1707;
t1646 = t1531 * t1702;
t1743 = t1545 * t1555;
t1661 = t1473 * t1743;
t1708 = pkin(6) * t1743;
t1713 = t1534 * t1801;
t1736 = t1555 * t1556;
t1761 = t1534 * t1546;
t1349 = ((-t1438 * t1501 - t1637) * t1554 + (t1498 * t1849 - t1501 * t1708) * t1546) * t1524 + (-(t1498 * t1736 - 0.2e1 * t1501 * t1761) * t1821 + (t1400 * t1498 - t1501 * t1713) * t1554 + (-t1501 * t1470 + t1545 * t1637) * t1761) * t1535 - t1498 * t1646 + (t1501 * t1435 + t1498 * t1588) * t1554 - t1836 * t1498 + t1501 * t1661;
t1532 = 0.1e1 / t1554;
t1795 = t1349 * t1532;
t1640 = t1499 * t1711;
t1350 = ((-t1436 * t1496 + t1640) * t1548 + (-t1496 * t1712 - t1499 * t1851) * t1540) * t1524 + ((0.2e1 * t1496 * t1763 + t1499 * t1740) * t1823 + (-t1398 * t1499 - t1496 * t1715) * t1548 - (t1496 * t1462 + t1539 * t1640) * t1763) * t1535 + t1499 * t1642 + (t1496 * t1433 - t1499 * t1590) * t1548 + t1838 * t1499 + t1496 * t1663;
t1794 = t1350 * t1526;
t1638 = t1500 * t1709;
t1351 = ((-t1437 * t1497 + t1638) * t1551 + (-t1497 * t1710 - t1500 * t1850) * t1543) * t1524 + ((0.2e1 * t1497 * t1762 + t1500 * t1738) * t1822 + (-t1399 * t1500 - t1497 * t1714) * t1551 - (t1497 * t1466 + t1542 * t1638) * t1762) * t1535 + t1500 * t1647 + (t1497 * t1434 - t1500 * t1589) * t1551 + t1837 * t1500 + t1497 * t1662;
t1793 = t1351 * t1529;
t1636 = t1501 * t1707;
t1352 = ((-t1438 * t1498 + t1636) * t1554 + (-t1498 * t1708 - t1501 * t1849) * t1546) * t1524 + ((0.2e1 * t1498 * t1761 + t1501 * t1736) * t1821 + (-t1400 * t1501 - t1498 * t1713) * t1554 - (t1498 * t1470 + t1545 * t1636) * t1761) * t1535 + t1501 * t1646 + (t1498 * t1435 - t1501 * t1588) * t1554 + t1836 * t1501 + t1498 * t1661;
t1792 = t1352 * t1532;
t1561 = m(2) * rSges(2,1);
t1453 = -t1561 + t1725;
t1461 = -t1830 + t1833;
t1635 = (t1566 + t1567) * m(3) + t1808 + t1799;
t1359 = t1854 * t1534 + ((-t1461 * t1540 + (t1548 * t1832 - t1453) * t1549) * pkin(1) + t1635 + t1865) * t1535;
t1791 = t1359 * t1526;
t1454 = -t1561 + t1724;
t1360 = t1853 * t1534 + ((-t1461 * t1543 + (t1551 * t1832 - t1454) * t1552) * pkin(1) + t1635 + t1866) * t1535;
t1790 = t1360 * t1529;
t1455 = -t1561 + t1723;
t1361 = t1852 * t1534 + ((-t1461 * t1546 + (t1554 * t1832 - t1455) * t1555) * pkin(1) + t1635 + t1867) * t1535;
t1789 = t1361 * t1532;
t1752 = t1539 * t1541;
t1362 = ((-pkin(6) * t1666 - t1436 * t1548) * t1760 + (-t1465 * t1548 - t1549 * t1823) * t1541) * t1535 + t1548 * t1541 * t1609 + (t1825 * t1540 - t1645) * t1752 + ((pkin(6) * t1741 - t1657 * t1540) * t1524 + t1525 * t1819 - t1540 * t1462) * t1550;
t1788 = t1362 * t1526;
t1748 = t1542 * t1544;
t1363 = ((-pkin(6) * t1665 - t1437 * t1551) * t1759 + (-t1469 * t1551 - t1552 * t1822) * t1544) * t1535 + t1551 * t1544 * t1608 + (t1825 * t1543 - t1644) * t1748 + ((pkin(6) * t1739 - t1656 * t1543) * t1524 + t1528 * t1818 - t1466 * t1543) * t1553;
t1787 = t1363 * t1529;
t1744 = t1545 * t1547;
t1364 = ((-pkin(6) * t1664 - t1438 * t1554) * t1758 + (-t1473 * t1554 - t1555 * t1821) * t1547) * t1535 + t1554 * t1547 * t1607 + (t1825 * t1546 - t1643) * t1744 + ((pkin(6) * t1737 - t1655 * t1546) * t1524 + t1531 * t1817 - t1546 * t1470) * t1556;
t1786 = t1364 * t1532;
t1562 = 0.2e1 * qJ(3,3);
t1732 = t1567 + t1569;
t1600 = Icges(2,3) + t1808 + (0.2e1 * t1566 + t1732) * m(3) / 0.2e1 + Icges(3,2) / 0.2e1 + Icges(3,1) / 0.2e1;
t1785 = (cos(t1562) * t1828 - t1486 * sin(t1562) + t1600) * t1526;
t1563 = 0.2e1 * qJ(3,2);
t1784 = (cos(t1563) * t1828 - t1486 * sin(t1563) + t1600) * t1529;
t1564 = 0.2e1 * qJ(3,1);
t1783 = (cos(t1564) * t1828 - t1486 * sin(t1564) + t1600) * t1532;
t1487 = pkin(6) * t1824;
t1489 = pkin(1) * t1806;
t1705 = t1540 * t1816;
t1729 = pkin(5) * t1820;
t1782 = 0.1e1 / ((-t1548 * t1729 + t1487) * t1549 - t1705 * t1824 + t1534 * (-pkin(5) * t1509 + t1489)) * t1526;
t1490 = pkin(1) * t1805;
t1703 = t1543 * t1815;
t1781 = 0.1e1 / ((-t1551 * t1729 + t1487) * t1552 - t1703 * t1824 + t1534 * (-pkin(5) * t1510 + t1490)) * t1529;
t1491 = pkin(1) * t1804;
t1701 = t1546 * t1814;
t1780 = 0.1e1 / ((-t1554 * t1729 + t1487) * t1555 - t1701 * t1824 + t1534 * (-pkin(5) * t1511 + t1491)) * t1532;
t1779 = t1407 * t1526;
t1778 = t1408 * t1529;
t1777 = t1409 * t1532;
t1425 = -t1705 + t1803;
t1776 = t1425 * t1535;
t1426 = -t1703 + t1802;
t1775 = t1426 * t1535;
t1427 = -t1701 + t1801;
t1774 = t1427 * t1535;
t1773 = t1484 * t1539;
t1772 = t1484 * t1542;
t1771 = t1484 * t1545;
t1770 = t1485 * t1540;
t1769 = t1485 * t1543;
t1768 = t1485 * t1546;
t1573 = pkin(2) ^ 2;
t1767 = t1525 * t1573;
t1766 = t1528 * t1573;
t1765 = t1531 * t1573;
t1764 = t1534 * t1535;
t1574 = 0.1e1 / pkin(2);
t1757 = t1534 * t1574;
t1756 = t1535 * t1541;
t1755 = t1535 * t1544;
t1754 = t1535 * t1547;
t1734 = pkin(5) * t1831;
t1733 = 0.2e1 * t1798;
t1572 = pkin(5) ^ 2;
t1731 = pkin(1) ^ 2 + t1572;
t1730 = t1461 * t1835;
t1728 = pkin(6) * t1816;
t1727 = pkin(6) * t1815;
t1726 = pkin(6) * t1814;
t1722 = -0.2e1 * t1764;
t1721 = t1535 * t1806;
t1720 = t1535 * t1805;
t1719 = t1535 * t1804;
t1718 = pkin(2) * t1752;
t1717 = pkin(2) * t1748;
t1716 = pkin(2) * t1744;
t1697 = -0.2e1 * t1728;
t1696 = -0.2e1 * t1727;
t1695 = -0.2e1 * t1726;
t1694 = t1827 * pkin(6);
t1474 = t1512 + pkin(6);
t1463 = pkin(5) + t1806;
t1634 = t1827 * t1541 * t1463;
t1389 = t1474 * t1760 + t1540 * t1634;
t1464 = 0.2e1 * t1509 + pkin(1);
t1392 = t1464 * t1760 + t1634;
t1669 = t1534 * t1756;
t1616 = t1496 * t1669;
t1401 = -t1524 * t1499 + t1499 + t1616;
t1413 = -t1524 * t1509 + t1465;
t1439 = t1512 + t1694;
t1571 = pkin(6) ^ 2;
t1650 = -t1571 + t1767;
t1599 = t1550 * t1650;
t1606 = pkin(6) * t1616;
t1675 = t1463 * t1764;
t1619 = t1499 * t1675;
t1672 = t1540 * t1767;
t1353 = (t1534 * t1496 * t1599 + 0.2e1 * t1401 * t1728) * t1527 + (-t1401 * t1672 + (t1392 * t1496 - t1619) * t1816 + (t1499 * t1413 + t1540 * t1606) * pkin(6)) * t1549 - (t1499 * t1439 + t1606) * t1816 + pkin(6) * (t1389 * t1496 - t1540 * t1619);
t1687 = t1353 * t1782;
t1615 = t1499 * t1669;
t1402 = t1524 * t1496 - t1496 + t1615;
t1605 = pkin(6) * t1615;
t1622 = t1496 * t1675;
t1354 = (-t1650 * t1499 * t1760 + t1402 * t1697) * t1527 + (t1402 * t1672 - (t1392 * t1499 + t1622) * t1816 + pkin(6) * (t1496 * t1413 - t1540 * t1605)) * t1549 - (t1496 * t1439 - t1605) * t1816 - (t1389 * t1499 + t1540 * t1622) * pkin(6);
t1686 = t1354 * t1782;
t1475 = t1513 + pkin(6);
t1467 = pkin(5) + t1805;
t1633 = t1827 * t1544 * t1467;
t1390 = t1475 * t1759 + t1543 * t1633;
t1468 = 0.2e1 * t1510 + pkin(1);
t1393 = t1468 * t1759 + t1633;
t1668 = t1534 * t1755;
t1614 = t1497 * t1668;
t1403 = -t1524 * t1500 + t1500 + t1614;
t1414 = -t1524 * t1510 + t1469;
t1440 = t1513 + t1694;
t1649 = -t1571 + t1766;
t1598 = t1553 * t1649;
t1604 = pkin(6) * t1614;
t1674 = t1467 * t1764;
t1618 = t1500 * t1674;
t1671 = t1543 * t1766;
t1355 = (t1534 * t1497 * t1598 + 0.2e1 * t1403 * t1727) * t1530 + (-t1403 * t1671 + (t1393 * t1497 - t1618) * t1815 + (t1500 * t1414 + t1543 * t1604) * pkin(6)) * t1552 - (t1500 * t1440 + t1604) * t1815 + pkin(6) * (t1390 * t1497 - t1543 * t1618);
t1685 = t1355 * t1781;
t1613 = t1500 * t1668;
t1404 = t1524 * t1497 - t1497 + t1613;
t1603 = pkin(6) * t1613;
t1621 = t1497 * t1674;
t1356 = (-t1649 * t1500 * t1759 + t1404 * t1696) * t1530 + (t1404 * t1671 - (t1393 * t1500 + t1621) * t1815 + pkin(6) * (t1497 * t1414 - t1543 * t1603)) * t1552 - (t1497 * t1440 - t1603) * t1815 - (t1390 * t1500 + t1543 * t1621) * pkin(6);
t1684 = t1356 * t1781;
t1476 = t1514 + pkin(6);
t1471 = pkin(5) + t1804;
t1632 = t1827 * t1547 * t1471;
t1391 = t1476 * t1758 + t1546 * t1632;
t1472 = 0.2e1 * t1511 + pkin(1);
t1394 = t1472 * t1758 + t1632;
t1667 = t1534 * t1754;
t1612 = t1498 * t1667;
t1405 = -t1524 * t1501 + t1501 + t1612;
t1415 = -t1524 * t1511 + t1473;
t1441 = t1514 + t1694;
t1648 = -t1571 + t1765;
t1597 = t1648 * t1556;
t1602 = pkin(6) * t1612;
t1673 = t1471 * t1764;
t1617 = t1501 * t1673;
t1670 = t1546 * t1765;
t1357 = (t1534 * t1498 * t1597 + 0.2e1 * t1405 * t1726) * t1533 + (-t1405 * t1670 + (t1394 * t1498 - t1617) * t1814 + (t1501 * t1415 + t1546 * t1602) * pkin(6)) * t1555 - (t1501 * t1441 + t1602) * t1814 + pkin(6) * (t1391 * t1498 - t1546 * t1617);
t1683 = t1357 * t1780;
t1611 = t1501 * t1667;
t1406 = t1524 * t1498 - t1498 + t1611;
t1601 = pkin(6) * t1611;
t1620 = t1498 * t1673;
t1358 = (-t1648 * t1501 * t1758 + t1406 * t1695) * t1533 + (t1406 * t1670 - (t1394 * t1501 + t1620) * t1814 + pkin(6) * (t1498 * t1415 - t1546 * t1601)) * t1555 - (t1498 * t1441 - t1601) * t1814 - (t1391 * t1501 + t1546 * t1620) * pkin(6);
t1682 = t1358 * t1780;
t1365 = (t1535 * t1550 * t1697 + t1650 * t1541) * t1527 + ((-t1463 * t1760 + t1541 * t1464) * t1816 + t1540 * t1535 * t1599) * t1549 + pkin(6) * (t1541 * t1474 + (-t1463 * t1763 + t1535 * t1816) * t1550);
t1681 = t1365 * t1782;
t1366 = (t1535 * t1553 * t1696 + t1649 * t1544) * t1530 + ((-t1467 * t1759 + t1544 * t1468) * t1815 + t1543 * t1535 * t1598) * t1552 + pkin(6) * (t1544 * t1475 + (-t1467 * t1762 + t1535 * t1815) * t1553);
t1680 = t1366 * t1781;
t1367 = (t1535 * t1556 * t1695 + t1648 * t1547) * t1533 + ((-t1471 * t1758 + t1547 * t1472) * t1814 + t1546 * t1535 * t1597) * t1555 + pkin(6) * (t1547 * t1476 + (-t1471 * t1761 + t1535 * t1814) * t1556);
t1679 = t1367 * t1780;
t1678 = t1574 * t1782;
t1677 = t1574 * t1781;
t1676 = t1574 * t1780;
t1456 = t1732 * m(3) + Icges(3,3);
t1368 = ((-t1770 - m(3) * (rSges(3,2) * t1813 + t1560)) * t1548 + (t1540 * t1484 - m(3) * (rSges(3,1) * t1813 - t1829)) * t1539 - t1456 * t1549) * t1534 - (-Icges(3,5) * t1539 - t1548 * Icges(3,6) + (rSges(3,1) * t1539 + rSges(3,2) * t1548) * m(3) * (rSges(3,3) + t1512)) * t1535;
t1631 = t1368 * t1678;
t1369 = ((-t1769 - m(3) * (rSges(3,2) * t1812 + t1560)) * t1551 + (t1543 * t1484 - m(3) * (rSges(3,1) * t1812 - t1829)) * t1542 - t1456 * t1552) * t1534 - (-Icges(3,5) * t1542 - t1551 * Icges(3,6) + (rSges(3,1) * t1542 + rSges(3,2) * t1551) * m(3) * (rSges(3,3) + t1513)) * t1535;
t1630 = t1369 * t1677;
t1370 = ((-t1768 - m(3) * (rSges(3,2) * t1811 + t1560)) * t1554 + (t1546 * t1484 - m(3) * (rSges(3,1) * t1811 - t1829)) * t1545 - t1456 * t1555) * t1534 - (-Icges(3,5) * t1545 - t1554 * Icges(3,6) + (rSges(3,1) * t1545 + rSges(3,2) * t1554) * m(3) * (rSges(3,3) + t1514)) * t1535;
t1629 = t1370 * t1676;
t1628 = t1407 * t1678;
t1627 = t1456 * t1678;
t1626 = t1408 * t1677;
t1625 = t1456 * t1677;
t1624 = t1409 * t1676;
t1623 = t1456 * t1676;
t1596 = t1365 * t1534 * t1678;
t1595 = t1366 * t1534 * t1677;
t1594 = t1367 * t1534 * t1676;
t1587 = Icges(1,3) + (t1568 + (0.2e1 * pkin(5) + rSges(2,3)) * rSges(2,3) + t1731) * m(2) + (t1566 + t1569 + t1731) * m(3) + (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) + t1800;
t1579 = -(rSges(2,1) + t1557) * (-rSges(2,1) + t1557) * m(2) + (-t1572 - t1503) * m(3) + t1799 - t1800;
t1508 = 0.2e1 * m(3) * t1560;
t1507 = -0.2e1 * t1734;
t1506 = 0.2e1 * t1734;
t1432 = 0.2e1 * t1443;
t1397 = t1427 * t1754 - t1556 * t1845;
t1396 = t1426 * t1755 - t1553 * t1844;
t1395 = t1425 * t1756 - t1550 * t1843;
t1388 = 0.1e1 / (pkin(1) * t1774 + (t1845 * pkin(5) + t1491) * t1534);
t1387 = 0.1e1 / (pkin(1) * t1775 + (t1844 * pkin(5) + t1490) * t1534);
t1386 = 0.1e1 / (pkin(1) * t1776 + (t1843 * pkin(5) + t1489) * t1534);
t1385 = -t1547 * t1845 + (-t1534 * t1804 - t1774) * t1556;
t1384 = -t1544 * t1844 + (-t1534 * t1805 - t1775) * t1553;
t1383 = -t1541 * t1843 + (-t1534 * t1806 - t1776) * t1550;
t1376 = (t1498 * t1427 - t1501 * t1716) * t1534 - t1397 * t1501 - t1498 * t1719;
t1375 = (t1501 * t1427 + t1498 * t1716) * t1534 + t1397 * t1498 - t1501 * t1719;
t1374 = (t1497 * t1426 - t1500 * t1717) * t1534 - t1396 * t1500 - t1497 * t1720;
t1373 = (t1500 * t1426 + t1497 * t1717) * t1534 + t1396 * t1497 - t1500 * t1720;
t1372 = (t1496 * t1425 - t1499 * t1718) * t1534 - t1395 * t1499 - t1496 * t1721;
t1371 = (t1499 * t1425 + t1496 * t1718) * t1534 + t1395 * t1496 - t1499 * t1721;
t1346 = (0.2e1 * (-t1485 * t1554 + t1771 + t1798) * t1742 + t1432 * t1531 + (t1507 - 0.4e1 * t1745) * t1554 + t1579 + t1862) * t1524 - t1852 * t1722 + ((t1508 + 0.2e1 * t1768) * t1554 + (-t1733 - 0.2e1 * t1771) * t1546 + t1455 * t1835) * t1555 - t1856 + (t1506 + 0.2e1 * t1745) * t1554 + t1546 * t1730 + t1587 - t1862;
t1345 = (0.2e1 * (-t1485 * t1551 + t1772 + t1798) * t1746 + t1432 * t1528 + (t1507 - 0.4e1 * t1749) * t1551 + t1579 + t1863) * t1524 - t1853 * t1722 + ((t1508 + 0.2e1 * t1769) * t1551 + (-t1733 - 0.2e1 * t1772) * t1543 + t1454 * t1835) * t1552 - t1857 + (t1506 + 0.2e1 * t1749) * t1551 + t1543 * t1730 + t1587 - t1863;
t1344 = (0.2e1 * (-t1485 * t1548 + t1773 + t1798) * t1750 + t1432 * t1525 + (t1507 - 0.4e1 * t1753) * t1548 + t1579 + t1864) * t1524 - t1854 * t1722 + ((t1508 + 0.2e1 * t1770) * t1548 + (-t1733 - 0.2e1 * t1773) * t1540 + t1453 * t1835) * t1549 - t1858 + (t1506 + 0.2e1 * t1753) * t1548 + t1540 * t1730 + t1587 - t1864;
t1343 = t1456 * t1594 + (t1364 * t1777 + t1370 * t1385) * t1388;
t1342 = t1456 * t1595 + (t1363 * t1778 + t1369 * t1384) * t1387;
t1341 = t1456 * t1596 + (t1362 * t1779 + t1368 * t1383) * t1386;
t1340 = t1409 * t1594 + (t1361 * t1385 + t1364 * t1783) * t1388;
t1339 = t1408 * t1595 + (t1360 * t1384 + t1363 * t1784) * t1387;
t1338 = t1407 * t1596 + (t1359 * t1383 + t1362 * t1785) * t1386;
t1337 = t1358 * t1623 + (t1352 * t1777 + t1370 * t1376) * t1388;
t1336 = t1357 * t1623 + (t1349 * t1777 + t1370 * t1375) * t1388;
t1335 = t1356 * t1625 + (t1351 * t1778 + t1369 * t1374) * t1387;
t1334 = t1355 * t1625 + (t1348 * t1778 + t1369 * t1373) * t1387;
t1333 = t1354 * t1627 + (t1350 * t1779 + t1368 * t1372) * t1386;
t1332 = t1353 * t1627 + (t1347 * t1779 + t1368 * t1371) * t1386;
t1331 = t1358 * t1624 + (t1352 * t1783 + t1361 * t1376) * t1388;
t1330 = t1357 * t1624 + (t1349 * t1783 + t1361 * t1375) * t1388;
t1329 = t1356 * t1626 + (t1351 * t1784 + t1360 * t1374) * t1387;
t1328 = t1355 * t1626 + (t1348 * t1784 + t1360 * t1373) * t1387;
t1327 = t1354 * t1628 + (t1350 * t1785 + t1359 * t1372) * t1386;
t1326 = t1353 * t1628 + (t1347 * t1785 + t1359 * t1371) * t1386;
t1325 = t1370 * t1594 + (t1346 * t1385 + t1361 * t1786) * t1388;
t1324 = t1369 * t1595 + (t1345 * t1384 + t1360 * t1787) * t1387;
t1323 = t1368 * t1596 + (t1344 * t1383 + t1359 * t1788) * t1386;
t1322 = t1358 * t1629 + (t1346 * t1376 + t1352 * t1789) * t1388;
t1321 = t1357 * t1629 + (t1346 * t1375 + t1349 * t1789) * t1388;
t1320 = t1356 * t1630 + (t1345 * t1374 + t1351 * t1790) * t1387;
t1319 = t1355 * t1630 + (t1345 * t1373 + t1348 * t1790) * t1387;
t1318 = t1354 * t1631 + (t1344 * t1372 + t1350 * t1791) * t1386;
t1317 = t1353 * t1631 + (t1344 * t1371 + t1347 * t1791) * t1386;
t1 = [m(4) + (t1322 * t1376 + t1331 * t1792) * t1388 + (t1320 * t1374 + t1329 * t1793) * t1387 + (t1318 * t1372 + t1327 * t1794) * t1386 + (t1333 * t1686 + t1335 * t1684 + t1337 * t1682) * t1574, (t1322 * t1375 + t1331 * t1795) * t1388 + (t1320 * t1373 + t1329 * t1796) * t1387 + (t1318 * t1371 + t1327 * t1797) * t1386 + (t1333 * t1687 + t1335 * t1685 + t1337 * t1683) * t1574, (t1322 * t1385 + t1331 * t1786) * t1388 + (t1320 * t1384 + t1329 * t1787) * t1387 + (t1318 * t1383 + t1327 * t1788) * t1386 + (t1333 * t1681 + t1335 * t1680 + t1337 * t1679) * t1757; (t1321 * t1376 + t1330 * t1792) * t1388 + (t1319 * t1374 + t1328 * t1793) * t1387 + (t1317 * t1372 + t1326 * t1794) * t1386 + (t1332 * t1686 + t1334 * t1684 + t1336 * t1682) * t1574, m(4) + (t1321 * t1375 + t1330 * t1795) * t1388 + (t1319 * t1373 + t1328 * t1796) * t1387 + (t1317 * t1371 + t1326 * t1797) * t1386 + (t1332 * t1687 + t1334 * t1685 + t1336 * t1683) * t1574, (t1321 * t1385 + t1330 * t1786) * t1388 + (t1319 * t1384 + t1328 * t1787) * t1387 + (t1317 * t1383 + t1326 * t1788) * t1386 + (t1332 * t1681 + t1334 * t1680 + t1336 * t1679) * t1757; (t1325 * t1376 + t1340 * t1792) * t1388 + (t1324 * t1374 + t1339 * t1793) * t1387 + (t1323 * t1372 + t1338 * t1794) * t1386 + (t1341 * t1686 + t1342 * t1684 + t1343 * t1682) * t1574, (t1325 * t1375 + t1340 * t1795) * t1388 + (t1324 * t1373 + t1339 * t1796) * t1387 + (t1323 * t1371 + t1338 * t1797) * t1386 + (t1341 * t1687 + t1342 * t1685 + t1343 * t1683) * t1574, m(4) + (t1325 * t1385 + t1340 * t1786) * t1388 + (t1324 * t1384 + t1339 * t1787) * t1387 + (t1323 * t1383 + t1338 * t1788) * t1386 + (t1341 * t1681 + t1342 * t1680 + t1343 * t1679) * t1757;];
MX  = t1;
