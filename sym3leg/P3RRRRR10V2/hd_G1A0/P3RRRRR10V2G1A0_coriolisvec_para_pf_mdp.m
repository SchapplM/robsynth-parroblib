% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 00:36:19
% EndTime: 2020-08-07 00:48:17
% DurationCPUTime: 760.73s
% Computational Cost: add. (10292433->2593), mult. (18485241->4046), div. (138690->44), fcn. (14227260->26), ass. (0->1525)
t9359 = cos(pkin(4));
t9335 = t9359 ^ 2;
t10358 = t9335 - 0.1e1;
t9378 = sin(qJ(2,1));
t9389 = xDP(3);
t10162 = t9378 * t9389;
t9387 = cos(qJ(2,1));
t10163 = t9378 * t9387;
t9386 = cos(qJ(3,1));
t9305 = t9386 * pkin(3);
t9392 = (pkin(8) + pkin(7));
t9336 = pkin(2) + t9392;
t9337 = pkin(2) - t9392;
t10236 = (t9305 + t9336) * (t9305 + t9337);
t9379 = sin(qJ(1,1));
t9388 = cos(qJ(1,1));
t9390 = xDP(2);
t9391 = xDP(1);
t9148 = t9379 * t9391 - t9388 * t9390;
t9151 = t9379 * t9390 + t9388 * t9391;
t9370 = legFrame(1,3);
t9287 = sin(t9370);
t9290 = cos(t9370);
t9069 = -t9148 * t9287 + t9151 * t9290;
t9358 = sin(pkin(4));
t10242 = t9069 * t9358;
t9393 = 2 * t9392;
t10161 = t9378 * t9393;
t9207 = pkin(1) + t10161;
t9315 = pkin(1) * t9378;
t9246 = t9315 + pkin(7);
t9214 = pkin(8) + t9246;
t10154 = t9389 * t9392;
t9218 = pkin(1) * t10154;
t9239 = t9305 + pkin(2);
t9352 = t9387 ^ 2;
t9066 = t9148 * t9290 + t9151 * t9287;
t9377 = sin(qJ(3,1));
t9295 = t9377 * pkin(3);
t9233 = t9295 + pkin(6);
t9225 = t9389 * t9359;
t9900 = t9358 * t9225;
t9427 = t9233 * (t9066 * t9335 - t9066 - t9900);
t9801 = t10358 * t9389;
t10210 = t9358 * t9359;
t9935 = t9066 * t10210;
t9475 = t9801 + t9935;
t10223 = (t9359 + 0.1e1) * (t9359 - 0.1e1);
t9916 = t9389 * t10223;
t9051 = t9387 * t9069;
t9932 = t9358 * t9051;
t8925 = t9218 * t9387 + (t10163 * t9475 - t9352 * t10242) * t10236 + (-pkin(1) * t10162 - t9207 * t9932 + t9387 * t9427) * t9239 + (-t9214 * t10242 + t9378 * t9427 + (0.2e1 * (-t9916 - t9935) * t9352 + t9475) * t9239) * t9392;
t10151 = t9392 * t9378;
t10348 = pkin(1) * t9239;
t10328 = pkin(6) * t9386;
t10339 = pkin(2) * t9377;
t9180 = t10328 - t10339;
t10230 = t9239 * t9358;
t10179 = t9359 * t9392;
t9208 = pkin(1) * t10179;
t10164 = t9378 * t9386;
t9885 = t9359 * t10164;
t9487 = -t9885 * t10348 + (-t9180 * t10230 + t9208 * t9386) * t9387;
t9027 = (-t10151 * t9180 + t9377 * t10348) * t9358 + t9487;
t10284 = t8925 / t9027;
t9412 = 0.1e1 / pkin(3);
t8919 = t9412 * t10284;
t8910 = pkin(6) * t8919;
t10245 = t9066 * t9378;
t10037 = pkin(3) * t10245;
t9261 = t9392 * t9387;
t9308 = t9389 * pkin(6);
t10112 = t9066 * t9261 + t9308;
t10155 = t9386 * t9389;
t10205 = t9358 * t9377;
t10211 = t9352 * t9389;
t10220 = (t9387 + 0.1e1) * (t9387 - 0.1e1);
t9282 = t9352 - 0.2e1;
t10224 = t9282 * t9377;
t9054 = t9066 * pkin(6);
t10251 = (t9261 * t9389 - t9054) * t9378;
t9350 = t9386 ^ 2;
t10314 = t9350 * pkin(3);
t10352 = 0.2e1 * t9350 - 0.1e1;
t9307 = t9387 * pkin(2);
t10429 = t9307 + pkin(1);
t9163 = t9307 + t10151;
t9157 = pkin(1) + t9163;
t10338 = pkin(2) * t9378;
t9166 = t9261 - t10338;
t9312 = pkin(2) * t9389;
t9647 = -t9392 * t10220 + t10429 * t9378;
t9890 = t9358 * t10162;
t8883 = ((-pkin(2) * t10211 - t10251 + t9312) * t9377 + (-pkin(2) * t10245 + t10112) * t9386 + (-t10155 * t10224 - t10352 * t10245) * pkin(3)) * t9335 + (-(t10112 * t9378 + (pkin(2) * t10220 + t9282 * t9305) * t9066) * t10205 + (t9051 + 0.2e1 * t9890) * t10314 + ((-t9166 * t9389 + t9054) * t9358 + t9157 * t9069) * t9386 - pkin(3) * t9890) * t9359 + (-(t9378 * t9932 - t10211 + t9389) * t9305 - t9647 * t10242 + t10251 + t9389 * t9387 * t10429) * t9377 + t9350 * t10037 - pkin(6) * t10155 - t10037;
t10181 = t9359 * t9386;
t9087 = pkin(1) * (-t9239 * t9378 + t9261) * t10181;
t10156 = t9386 * t9387;
t9211 = pkin(3) * t10156;
t9861 = t9211 + t9163;
t9018 = t9087 + ((pkin(2) * t9157 + t10429 * t9305) * t9377 - t9861 * t10328) * t9358;
t8877 = t8883 / t9018;
t9981 = t9392 * t8877;
t10127 = -t9981 + t8910;
t10467 = t10127 * t9378;
t9375 = sin(qJ(2,2));
t10168 = t9375 * t9389;
t9384 = cos(qJ(2,2));
t10169 = t9375 * t9384;
t9383 = cos(qJ(3,2));
t9301 = t9383 * pkin(3);
t10237 = (t9301 + t9336) * (t9301 + t9337);
t9376 = sin(qJ(1,2));
t9385 = cos(qJ(1,2));
t9147 = t9376 * t9391 - t9385 * t9390;
t9150 = t9376 * t9390 + t9385 * t9391;
t9369 = legFrame(2,3);
t9286 = sin(t9369);
t9289 = cos(t9369);
t9068 = -t9147 * t9286 + t9150 * t9289;
t10243 = t9068 * t9358;
t10167 = t9375 * t9393;
t9206 = pkin(1) + t10167;
t9314 = pkin(1) * t9375;
t9245 = t9314 + pkin(7);
t9213 = pkin(8) + t9245;
t9237 = t9301 + pkin(2);
t9348 = t9384 ^ 2;
t9065 = t9147 * t9289 + t9150 * t9286;
t9374 = sin(qJ(3,2));
t9294 = t9374 * pkin(3);
t9230 = t9294 + pkin(6);
t9428 = t9230 * (t9065 * t9335 - t9065 - t9900);
t9936 = t9065 * t10210;
t9476 = t9801 + t9936;
t9050 = t9384 * t9068;
t9933 = t9358 * t9050;
t8924 = t9218 * t9384 + (t10169 * t9476 - t9348 * t10243) * t10237 + (-pkin(1) * t10168 - t9206 * t9933 + t9384 * t9428) * t9237 + (-t9213 * t10243 + t9375 * t9428 + (0.2e1 * (-t9916 - t9936) * t9348 + t9476) * t9237) * t9392;
t10152 = t9392 * t9375;
t10349 = pkin(1) * t9237;
t10330 = pkin(6) * t9383;
t10341 = pkin(2) * t9374;
t9179 = t10330 - t10341;
t10231 = t9237 * t9358;
t10170 = t9375 * t9383;
t9886 = t9359 * t10170;
t9488 = -t9886 * t10349 + (-t9179 * t10231 + t9208 * t9383) * t9384;
t9026 = (-t10152 * t9179 + t9374 * t10349) * t9358 + t9488;
t10285 = t8924 / t9026;
t8917 = t9412 * t10285;
t8909 = pkin(6) * t8917;
t10246 = t9065 * t9375;
t10038 = pkin(3) * t10246;
t9260 = t9392 * t9384;
t10113 = t9065 * t9260 + t9308;
t10157 = t9383 * t9389;
t10207 = t9358 * t9374;
t10213 = t9348 * t9389;
t10221 = (t9384 + 0.1e1) * (t9384 - 0.1e1);
t9281 = t9348 - 0.2e1;
t10226 = t9281 * t9374;
t9053 = t9065 * pkin(6);
t10252 = (t9260 * t9389 - t9053) * t9375;
t9346 = t9383 ^ 2;
t10315 = t9346 * pkin(3);
t10354 = 0.2e1 * t9346 - 0.1e1;
t9303 = t9384 * pkin(2);
t10430 = t9303 + pkin(1);
t9162 = t9303 + t10152;
t9156 = pkin(1) + t9162;
t10340 = pkin(2) * t9375;
t9165 = t9260 - t10340;
t9648 = -t9392 * t10221 + t10430 * t9375;
t9893 = t9358 * t10168;
t8882 = ((-pkin(2) * t10213 - t10252 + t9312) * t9374 + (-pkin(2) * t10246 + t10113) * t9383 + (-t10157 * t10226 - t10354 * t10246) * pkin(3)) * t9335 + (-(t10113 * t9375 + (pkin(2) * t10221 + t9281 * t9301) * t9065) * t10207 + (t9050 + 0.2e1 * t9893) * t10315 + ((-t9165 * t9389 + t9053) * t9358 + t9156 * t9068) * t9383 - pkin(3) * t9893) * t9359 + (-(t9375 * t9933 - t10213 + t9389) * t9301 - t9648 * t10243 + t10252 + t9389 * t9384 * t10430) * t9374 + t9346 * t10038 - pkin(6) * t10157 - t10038;
t10183 = t9359 * t9383;
t9086 = pkin(1) * (-t9237 * t9375 + t9260) * t10183;
t10158 = t9383 * t9384;
t9210 = pkin(3) * t10158;
t9862 = t9210 + t9162;
t9017 = t9086 + ((pkin(2) * t9156 + t10430 * t9301) * t9374 - t9862 * t10330) * t9358;
t8875 = t8882 / t9017;
t9987 = t9392 * t8875;
t10128 = -t9987 + t8909;
t10466 = t10128 * t9375;
t9372 = sin(qJ(2,3));
t10174 = t9372 * t9389;
t9381 = cos(qJ(2,3));
t10175 = t9372 * t9381;
t9380 = cos(qJ(3,3));
t9297 = t9380 * pkin(3);
t10238 = (t9297 + t9336) * (t9297 + t9337);
t9373 = sin(qJ(1,3));
t9382 = cos(qJ(1,3));
t9146 = t9373 * t9391 - t9382 * t9390;
t9149 = t9373 * t9390 + t9382 * t9391;
t9368 = legFrame(3,3);
t9285 = sin(t9368);
t9288 = cos(t9368);
t9067 = -t9146 * t9285 + t9149 * t9288;
t10244 = t9067 * t9358;
t10173 = t9372 * t9393;
t9205 = pkin(1) + t10173;
t9313 = pkin(1) * t9372;
t9244 = t9313 + pkin(7);
t9212 = pkin(8) + t9244;
t9235 = t9297 + pkin(2);
t9344 = t9381 ^ 2;
t9064 = t9146 * t9288 + t9149 * t9285;
t9371 = sin(qJ(3,3));
t9293 = t9371 * pkin(3);
t9227 = t9293 + pkin(6);
t9429 = t9227 * (t9064 * t9335 - t9064 - t9900);
t9937 = t9064 * t10210;
t9477 = t9801 + t9937;
t9049 = t9381 * t9067;
t9934 = t9358 * t9049;
t8923 = t9218 * t9381 + (t10175 * t9477 - t9344 * t10244) * t10238 + (-pkin(1) * t10174 - t9205 * t9934 + t9381 * t9429) * t9235 + (-t9212 * t10244 + t9372 * t9429 + (0.2e1 * (-t9916 - t9937) * t9344 + t9477) * t9235) * t9392;
t10153 = t9392 * t9372;
t10350 = pkin(1) * t9235;
t10332 = pkin(6) * t9380;
t10343 = pkin(2) * t9371;
t9178 = t10332 - t10343;
t10232 = t9235 * t9358;
t10176 = t9372 * t9380;
t9887 = t9359 * t10176;
t9489 = -t9887 * t10350 + (-t9178 * t10232 + t9208 * t9380) * t9381;
t9025 = (-t10153 * t9178 + t9371 * t10350) * t9358 + t9489;
t10286 = t8923 / t9025;
t8915 = t9412 * t10286;
t8908 = pkin(6) * t8915;
t10247 = t9064 * t9372;
t10039 = pkin(3) * t10247;
t9259 = t9392 * t9381;
t10114 = t9064 * t9259 + t9308;
t10159 = t9380 * t9389;
t10209 = t9358 * t9371;
t10215 = t9344 * t9389;
t10222 = (t9381 + 0.1e1) * (t9381 - 0.1e1);
t9280 = t9344 - 0.2e1;
t10228 = t9280 * t9371;
t9052 = t9064 * pkin(6);
t10253 = (t9259 * t9389 - t9052) * t9372;
t9342 = t9380 ^ 2;
t10316 = t9342 * pkin(3);
t10356 = 0.2e1 * t9342 - 0.1e1;
t9299 = t9381 * pkin(2);
t10431 = t9299 + pkin(1);
t9161 = t9299 + t10153;
t9155 = pkin(1) + t9161;
t10342 = pkin(2) * t9372;
t9164 = t9259 - t10342;
t9649 = -t9392 * t10222 + t10431 * t9372;
t9896 = t9358 * t10174;
t8881 = ((-pkin(2) * t10215 - t10253 + t9312) * t9371 + (-pkin(2) * t10247 + t10114) * t9380 + (-t10159 * t10228 - t10356 * t10247) * pkin(3)) * t9335 + (-(t10114 * t9372 + (pkin(2) * t10222 + t9280 * t9297) * t9064) * t10209 + (t9049 + 0.2e1 * t9896) * t10316 + ((-t9164 * t9389 + t9052) * t9358 + t9155 * t9067) * t9380 - pkin(3) * t9896) * t9359 + (-(t9372 * t9934 - t10215 + t9389) * t9297 - t9649 * t10244 + t10253 + t9389 * t9381 * t10431) * t9371 + t9342 * t10039 - pkin(6) * t10159 - t10039;
t10185 = t9359 * t9380;
t9085 = pkin(1) * (-t9235 * t9372 + t9259) * t10185;
t10160 = t9380 * t9381;
t9209 = pkin(3) * t10160;
t9863 = t9209 + t9161;
t9016 = t9085 + t9358 * ((pkin(2) * t9155 + t10431 * t9297) * t9371 - t9863 * t10332);
t8873 = t8881 / t9016;
t9992 = t9392 * t8873;
t10129 = -t9992 + t8908;
t10465 = t10129 * t9372;
t9407 = pkin(8) ^ 2;
t9408 = pkin(7) ^ 2;
t10104 = t9407 + t9408;
t10361 = pkin(8) * pkin(7);
t10404 = 0.2e1 * t10361 + t10104;
t10437 = 0.2e1 * t9381;
t10436 = 0.2e1 * t9384;
t10435 = 0.2e1 * t9387;
t10250 = (t9064 * t9358 + t9225) * t9371;
t9189 = t9358 * t10154;
t10197 = t9358 * t9389;
t9550 = t9064 * t9359 - t10197;
t8947 = -(-t9372 * t9550 + t9049) * t10316 + ((-pkin(2) * t9067 - t10179 * t9064 + t9189) * t9381 + (pkin(2) * t9550 - t9067 * t9392) * t9372 - pkin(3) * t10250) * t9380 - pkin(2) * t10250;
t10076 = pkin(1) * t10209;
t10196 = t9358 * t9392;
t10344 = pkin(2) * t9359;
t9270 = pkin(1) * t10344;
t9142 = -pkin(6) * t10196 - t9270;
t10111 = pkin(3) * t10076 + t9142 * t9372;
t10345 = pkin(2) * t9358;
t9228 = t9293 - pkin(6);
t9103 = t9228 * t10345 + t9208;
t9115 = t9155 * t10343;
t10202 = t9358 * t9381;
t10048 = pkin(6) * t10202;
t10190 = t9359 * t9372;
t10073 = pkin(1) * t10190;
t9131 = t10048 + t10073;
t9661 = -t9131 * t10316 + t9358 * t9115;
t8990 = (t9103 * t9381 + t10111) * t9380 + t9661;
t10283 = t8947 / t8990;
t9962 = t9372 * t10283;
t9711 = t9358 * t9962;
t10464 = t9227 * t9711;
t10249 = (t9065 * t9358 + t9225) * t9374;
t9549 = t9065 * t9359 - t10197;
t8948 = -(-t9375 * t9549 + t9050) * t10315 + ((-pkin(2) * t9068 - t10179 * t9065 + t9189) * t9384 + (pkin(2) * t9549 - t9068 * t9392) * t9375 - pkin(3) * t10249) * t9383 - pkin(2) * t10249;
t10075 = pkin(1) * t10207;
t10110 = pkin(3) * t10075 + t9142 * t9375;
t9231 = t9294 - pkin(6);
t9104 = t9231 * t10345 + t9208;
t9116 = t9156 * t10341;
t10200 = t9358 * t9384;
t10047 = pkin(6) * t10200;
t10188 = t9359 * t9375;
t10072 = pkin(1) * t10188;
t9132 = t10047 + t10072;
t9660 = -t9132 * t10315 + t9358 * t9116;
t8991 = (t9104 * t9384 + t10110) * t9383 + t9660;
t10282 = t8948 / t8991;
t9952 = t9375 * t10282;
t9703 = t9358 * t9952;
t10463 = t9230 * t9703;
t10248 = (t9066 * t9358 + t9225) * t9377;
t9548 = t9066 * t9359 - t10197;
t8949 = -(-t9378 * t9548 + t9051) * t10314 + ((-pkin(2) * t9069 - t10179 * t9066 + t9189) * t9387 + (pkin(2) * t9548 - t9069 * t9392) * t9378 - pkin(3) * t10248) * t9386 - pkin(2) * t10248;
t10074 = pkin(1) * t10205;
t10109 = pkin(3) * t10074 + t9142 * t9378;
t9234 = t9295 - pkin(6);
t9105 = t9234 * t10345 + t9208;
t9117 = t9157 * t10339;
t10198 = t9358 * t9387;
t10046 = pkin(6) * t10198;
t10186 = t9359 * t9378;
t10071 = pkin(1) * t10186;
t9130 = t10046 + t10071;
t9659 = -t9130 * t10314 + t9358 * t9117;
t8989 = (t9105 * t9387 + t10109) * t9386 + t9659;
t10281 = t8949 / t8989;
t9941 = t9378 * t10281;
t9694 = t9358 * t9941;
t10462 = t9233 * t9694;
t9566 = t8919 * t10281;
t10225 = t9282 * t9335;
t9789 = -t9352 + t10225;
t9665 = t9789 + 0.1e1;
t10461 = t9665 * t9566;
t9574 = t8917 * t10282;
t10227 = t9281 * t9335;
t9790 = -t9348 + t10227;
t9666 = t9790 + 0.1e1;
t10460 = t9666 * t9574;
t9582 = t8915 * t10283;
t10229 = t9280 * t9335;
t9791 = -t9344 + t10229;
t9667 = t9791 + 0.1e1;
t10459 = t9667 * t9582;
t9960 = t9381 * t10283;
t8929 = t9358 * t9960;
t10120 = t8929 - 0.2e1 * t8915;
t9341 = t9380 * t9342;
t9411 = pkin(3) ^ 2;
t10216 = t9341 * t9411;
t10434 = -t9344 + 0.1e1;
t9889 = t9359 * t8873;
t10002 = (t9889 + (-t10229 - t10434) * t10283) * t10216;
t9226 = pkin(6) * t9371 + pkin(3);
t10023 = t10358 * t9226;
t9399 = pkin(6) / 0.3e1;
t10034 = (t9293 + t9399) * t10342;
t8902 = pkin(8) * t8915;
t8905 = pkin(7) * t8915;
t8779 = t8905 + t8902;
t10061 = t8779 * t9293;
t10069 = pkin(2) * t10283;
t9414 = pkin(2) ^ 2;
t10102 = t9414 - t9411;
t9357 = t9392 ^ 2;
t10105 = t9357 + t9411;
t10208 = t9358 * t9372;
t10388 = -0.2e1 * pkin(2);
t10312 = pkin(3) * t10388;
t10334 = pkin(3) * t9358;
t10378 = -0.2e1 * t9335;
t10217 = t9336 * t9337;
t9271 = pkin(6) * t9293;
t10413 = t9344 * t10217 + t9271;
t8752 = t9371 * t9992 - t10286;
t8935 = t9359 * t10283;
t8799 = t8935 + t8873;
t8788 = t8799 * pkin(2);
t8813 = t8929 - t8915;
t9995 = t9371 * t8873;
t8833 = pkin(3) * t9995;
t8856 = pkin(2) * t8873;
t9400 = pkin(6) / 0.2e1;
t9220 = t9293 + t9400;
t9658 = -0.2e1 * t9711;
t8926 = t9220 * t9658;
t9088 = -pkin(6) * t9161 + t10431 * t9293;
t10346 = pkin(1) * t9359;
t9118 = t9164 * t10346;
t8996 = 0.1e1 / ((t9088 * t9358 + t9118) * t9380 + t9661);
t9152 = pkin(1) * t9293 - pkin(6) * t10153;
t9091 = t9228 * t9299 + t9152;
t8999 = 0.1e1 / ((t9091 * t9358 + t9118) * t9380 + t9661);
t9215 = pkin(1) * t10153;
t9269 = t9357 + t9414;
t9298 = t9344 * pkin(2);
t9401 = -0.3e1 / 0.2e1 * pkin(2);
t9581 = t9371 * t9711;
t9526 = pkin(3) * t9581;
t9959 = t9392 * t10283;
t9687 = t9358 * t9959;
t9580 = t9372 * t9687;
t9994 = t9372 * t8873;
t9750 = t9371 * t9994;
t9601 = t9358 * t9750;
t9882 = t9372 * t9259;
t9646 = t9298 + t9882;
t9963 = t9371 * t10283;
t9712 = t9358 * t9963;
t9769 = pkin(2) * t9882;
t10191 = t9359 * t9371;
t9909 = t9358 * t10191;
t9964 = t9358 * t10283;
t9966 = t9335 * t10283;
t9979 = t9392 * t10286;
t8593 = -(t10002 + ((t8926 + 0.2e1 * t8856) * t9359 - (t8833 + t8779) * t10208 + ((t9401 + t9646) * t10378 + 0.2e1 * t9298 + t9205 * t9381 - pkin(2)) * t10283) * t10316 + (-(0.2e1 * t9769 - t10102 + t10413) * t9966 + (-t10061 + t9269 * t8873 + (0.2e1 * t9220 * t9259 - 0.3e1 * t10034) * t9964) * t9359 + (t10069 * t9205 + t10334 * t8752) * t9381 + t9601 * t10312 + (t9215 + t10105 + t10413) * t10283) * t9380 + pkin(2) * ((-pkin(2) * t9750 + t8752 * t9381) * t9358 + (t9164 * t9909 - t10023) * t10283)) * t8999 * t10283 + (-(t8799 * t10216 + 0.2e1 * (-t9526 / 0.2e1 + t8788) * t10316 + (t8799 * t9269 + ((t9259 - 0.2e1 * t10342) * pkin(3) * t9964 - t9979) * t9371) * t9380 + t9164 * pkin(2) * t9712) * t8873 + (t9342 * t9580 + (t8799 * t9371 * t9392 + pkin(3) * t8929 - t10286) * t9380 + pkin(2) * t8813) * t10286) * t8996;
t10298 = t8593 * t9358;
t8851 = pkin(8) * t8873;
t8852 = pkin(7) * t8873;
t9872 = -t10286 / 0.2e1;
t10135 = (t8852 + t8851 - t8908 / 0.2e1) * t9293 + pkin(3) * t9872;
t8853 = pkin(6) * t8873;
t9867 = t9407 / 0.2e1 + t9408 / 0.2e1;
t9513 = t9412 * (-t9414 / 0.2e1 + t9867);
t10045 = ((t8853 + t8902) * pkin(7) + pkin(6) * t8851 + t9513 * t10286 + t10135) * t9297;
t10195 = t9358 * t9412;
t10062 = pkin(2) * t10195;
t10070 = t9411 * t10346;
t10089 = 0.2e1 * t9359;
t10099 = 0.2e1 * t9297;
t10218 = t9335 * t9392;
t10337 = pkin(2) * t9392;
t10347 = pkin(1) * t9358;
t9628 = t9867 + t10361;
t10360 = 0.3e1 / 0.2e1 * t9414 + t9628;
t9334 = t9359 * t9335;
t10380 = 0.2e1 * t9334;
t9328 = pkin(1) * t9392;
t10381 = 0.2e1 * t9328;
t9274 = pkin(2) * t9297;
t9296 = t9342 * t9411;
t10403 = t9274 + t9296 - t9271;
t10416 = 0.2e1 * t9271 - t9296;
t8870 = pkin(1) * t8873;
t10421 = t8799 * t10153 + t8870;
t8839 = pkin(6) * t9992;
t8674 = t8839 + t10135;
t9866 = t8853 + t8779;
t8698 = t8833 + t9866;
t8764 = t8908 - t8852;
t8722 = t8851 - t8764;
t9194 = t9414 + t10404;
t9884 = t9371 * t10286;
t9737 = t9392 * t9884;
t9535 = t9194 * t8873 - t9737;
t8725 = t8935 * t9194 + t9535;
t8737 = t8833 + t8853;
t8755 = t9992 - t9884;
t8855 = t9414 * t8873;
t9190 = pkin(1) * t10217;
t9158 = t9359 * t9190;
t9409 = pkin(6) ^ 2;
t10103 = pkin(1) ^ 2 + t9409;
t9552 = t10404 + t10103;
t9160 = t9411 + t9552;
t9168 = -0.2e1 / 0.3e1 * t10361 - t9407 / 0.3e1 - t9408 / 0.3e1 + t9414;
t9195 = pkin(2) * t9208;
t9202 = t10153 + pkin(1);
t9329 = t9411 + t9414;
t9330 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t9343 = t9381 * t9344;
t9405 = 0.2e1 * pkin(2);
t9410 = pkin(3) * t9411;
t10123 = 0.2e1 * t8779;
t10405 = t10123 + 0.2e1 * t8833;
t8911 = pkin(1) * t8915;
t10446 = t8698 * t9372 + t8911;
t9447 = t9372 * (t8853 * t10217 + (((t8908 - 0.2e1 * t8851) * pkin(7) + t8855 + pkin(6) * t8902 - t10104 * t8873) * t9371 + t9979) * pkin(3)) + ((0.2e1 * t8853 + t10405) * t9372 + t8911) * t9274 + t10446 * t9296;
t9544 = 0.2e1 * t9274 + t9296;
t9465 = t9544 + t10217;
t10066 = t9202 * t10343;
t10095 = pkin(6) * t10316;
t9046 = (t9103 * t9380 + (t9371 * t9414 - t10095) * t9358) * t9381;
t10096 = pkin(3) * t10346;
t9854 = t9342 * t10096;
t9483 = t9358 * t10066 - t9372 * t9854 + t9046;
t9856 = -t9409 / 0.2e1 - t9411 / 0.2e1 + t9414 / 0.2e1;
t9496 = t9856 - t10404;
t10400 = 0.3e1 * t10404;
t9497 = t9411 + t10103 + t10400;
t9922 = t9372 * t10238;
t9967 = t9227 * t10283;
t9500 = t9922 * t9967;
t9715 = t9235 * t9967;
t9579 = t9392 * t9715;
t9505 = t9334 * t9579;
t9741 = t9412 * t9884;
t9532 = t9741 * t10346;
t9538 = t8935 * t9212 + t8722;
t9551 = -t10404 + t9329;
t9578 = t9227 * t9687;
t9657 = 0.2e1 * t9711;
t9668 = t9414 - t10400;
t9740 = t9372 * t8915;
t9671 = pkin(1) * t9740 + t9866;
t9674 = t9371 * t9872;
t9188 = -t10217 / 0.2e1;
t9675 = t9358 * t9188;
t9690 = t9358 * t8915;
t9713 = t10223 * t10283;
t9714 = t9235 * t9964;
t9751 = t9358 * t9994;
t9762 = t10358 * t10283;
t9980 = t9342 * t10286;
t9778 = pkin(3) * t9980;
t9899 = t9358 * t10179;
t9785 = pkin(1) * t9899;
t10063 = pkin(2) * t10196;
t9855 = 0.2e1 * t10063;
t9868 = 0.3e1 / 0.2e1 * t9168 * t9392;
t9869 = t9359 * t10360;
t9965 = t9344 * t10283;
t9001 = 0.1e1 / ((t9152 * t9380 + t10066) * t9358 + t9489);
t9968 = t9001 * t10283;
t9996 = t9358 * t8873;
t8578 = (((t9371 * t9785 + ((t9271 + t9551) * t9380 + (t9226 + t10316) * pkin(2)) * t10223) * t9965 + ((pkin(2) * t9690 + t9202 * t9713) * t10316 + ((t8915 * t9329 - t9293 * t9538) * t9358 + pkin(2) * t9205 * t9713) * t9380 - (t9371 * t9538 - t10286) * t10345 - t9392 * (-t10023 * t9962 + t9532)) * t9381 + t9980 * t10347 + (t9392 * t9212 * t9762 + (t10062 * t9202 + t10073 * t9371) * t10286) * t9380 - (-t9372 * t10286 + (t8722 * t9372 + t8935 * t9202 + t8870) * t9371) * t10196 + t9532 * t10342) / ((-pkin(2) * t10073 + t9152 * t9358) * t9380 + t9483) * t10286 + ((t9342 * t10070 + (t10196 * t9227 + t9270) * t10099 + t9227 * t9855 + t9158) * t9965 + (t9410 * t8799 * t9341 + (t9392 * t9674 + t8873 * t10360 + ((-t10345 * t9227 + t9208) * t9372 + t9869) * t10283) * t10099 + 0.2e1 * (t9227 * t9675 + t9195) * t9962 + pkin(2) * t8725) * t9381 + (-t9578 / 0.2e1 + t10421 * pkin(2)) * t10099 + t8725 * t10153 - pkin(2) * t9578 + (t8935 * t9357 + t9535) * pkin(1) + ((0.3e1 * t8788 - t10464) * t9381 + t10421) * t9296) / (t10111 * t9380 + t9483) * t9996 + (-(t9668 + t9544) * t9343 * t9713 * t10232 + (-0.4e1 * t9505 + (-0.3e1 * (t9168 + t9544) * t9580 - 0.2e1 * t10045 + (-0.2e1 * t8674 + t9778) * pkin(2)) * t9335 + ((t8873 * t9465 + t9737) * t10347 + 0.4e1 * t9579) * t9359 + 0.2e1 * (t9372 * t9868 + t9190 + t9544 * (t9330 * t9372 + pkin(1))) * t9964 - pkin(2) * t9778 + 0.2e1 * t10045 + t8674 * t9405) * t9344 + (t9500 * t10380 + (0.2e1 * (t9496 + t10403) * t9714 + t9447) * t9335 + (((t9674 + t9992) * t9313 - t10061 / 0.2e1 + t8855 / 0.2e1) * t10232 - t9500 + (t9296 / 0.2e1 + t9274 + t9628) * t9235 * t9996) * t10089 + (0.4e1 * t9215 + t9497 + t10416) * t9714 - t9447) * t9381 + 0.2e1 * t9505 + ((t9856 + t10403) * t9657 + (t8833 + t9671) * t9297 + pkin(2) * t8737) * t10218 + (((t8855 - t10061) * t9372 + t8755 * pkin(1)) * t9358 - 0.2e1 * t9715 + (t9544 + t10404) * t9751) * t10179 + (t10381 + (t9160 + t10416) * t9372) * t9687 - (t8698 * t9392 + t8779 * t9313) * t9297 - t8737 * t10337) * t9968) * t9412;
t10325 = pkin(7) * t8578;
t9602 = t8915 * t8873;
t9529 = pkin(2) * t9602;
t8771 = -0.2e1 * t9529;
t9175 = pkin(7) * t9381 - t10342;
t10458 = t10298 * t9175 + t10325 + (pkin(2) * t10120 + pkin(7) * t9711) * t8935 + t8771;
t9950 = t9384 * t10282;
t8930 = t9358 * t9950;
t10119 = t8930 - 0.2e1 * t8917;
t9345 = t9383 * t9346;
t10214 = t9345 * t9411;
t10433 = -t9348 + 0.1e1;
t9888 = t9359 * t8875;
t10001 = (t9888 + (-t10227 - t10433) * t10282) * t10214;
t9229 = pkin(6) * t9374 + pkin(3);
t10022 = t10358 * t9229;
t10036 = (t9294 + t9399) * t10340;
t8903 = pkin(8) * t8917;
t8906 = pkin(7) * t8917;
t8780 = t8906 + t8903;
t10060 = t8780 * t9294;
t10068 = pkin(2) * t10282;
t10206 = t9358 * t9375;
t9272 = pkin(6) * t9294;
t10412 = t9348 * t10217 + t9272;
t8753 = t9374 * t9987 - t10285;
t8936 = t9359 * t10282;
t8802 = t8936 + t8875;
t8789 = t8802 * pkin(2);
t8815 = t8930 - t8917;
t9990 = t9374 * t8875;
t8834 = pkin(3) * t9990;
t8862 = pkin(2) * t8875;
t9222 = t9294 + t9400;
t9656 = -0.2e1 * t9703;
t8927 = t9222 * t9656;
t9089 = -pkin(6) * t9162 + t10430 * t9294;
t9119 = t9165 * t10346;
t8997 = 0.1e1 / ((t9089 * t9358 + t9119) * t9383 + t9660);
t9153 = pkin(1) * t9294 - pkin(6) * t10152;
t9092 = t9231 * t9303 + t9153;
t9000 = 0.1e1 / ((t9092 * t9358 + t9119) * t9383 + t9660);
t9216 = pkin(1) * t10152;
t9302 = t9348 * pkin(2);
t9573 = t9374 * t9703;
t9525 = pkin(3) * t9573;
t9949 = t9392 * t10282;
t9686 = t9358 * t9949;
t9572 = t9375 * t9686;
t9989 = t9375 * t8875;
t9746 = t9374 * t9989;
t9598 = t9358 * t9746;
t9878 = t9375 * t9260;
t9645 = t9302 + t9878;
t9953 = t9374 * t10282;
t9704 = t9358 * t9953;
t9768 = pkin(2) * t9878;
t10189 = t9359 * t9374;
t9907 = t9358 * t10189;
t9954 = t9358 * t10282;
t9956 = t9335 * t10282;
t9977 = t9392 * t10285;
t8594 = -(t10001 + ((t8927 + 0.2e1 * t8862) * t9359 - (t8834 + t8780) * t10206 + ((t9401 + t9645) * t10378 + 0.2e1 * t9302 + t9206 * t9384 - pkin(2)) * t10282) * t10315 + (-(0.2e1 * t9768 - t10102 + t10412) * t9956 + (-t10060 + t9269 * t8875 + (0.2e1 * t9222 * t9260 - 0.3e1 * t10036) * t9954) * t9359 + (t10068 * t9206 + t10334 * t8753) * t9384 + t9598 * t10312 + (t9216 + t10105 + t10412) * t10282) * t9383 + pkin(2) * ((-pkin(2) * t9746 + t8753 * t9384) * t9358 + (t9165 * t9907 - t10022) * t10282)) * t9000 * t10282 + (-(t8802 * t10214 + 0.2e1 * (-t9525 / 0.2e1 + t8789) * t10315 + (t8802 * t9269 + ((t9260 - 0.2e1 * t10340) * pkin(3) * t9954 - t9977) * t9374) * t9383 + t9165 * pkin(2) * t9704) * t8875 + (t9346 * t9572 + (t8802 * t9374 * t9392 + pkin(3) * t8930 - t10285) * t9383 + pkin(2) * t8815) * t10285) * t8997;
t10296 = t8594 * t9358;
t8857 = pkin(8) * t8875;
t8858 = pkin(7) * t8875;
t9871 = -t10285 / 0.2e1;
t10134 = (t8858 + t8857 - t8909 / 0.2e1) * t9294 + pkin(3) * t9871;
t8859 = pkin(6) * t8875;
t10044 = ((t8859 + t8903) * pkin(7) + pkin(6) * t8857 + t9513 * t10285 + t10134) * t9301;
t10098 = 0.2e1 * t9301;
t9275 = pkin(2) * t9301;
t9300 = t9346 * t9411;
t10402 = t9275 + t9300 - t9272;
t10415 = 0.2e1 * t9272 - t9300;
t8871 = pkin(1) * t8875;
t10420 = t8802 * t10152 + t8871;
t8840 = pkin(6) * t9987;
t8675 = t8840 + t10134;
t9865 = t8859 + t8780;
t8699 = t8834 + t9865;
t8765 = t8909 - t8858;
t8723 = t8857 - t8765;
t9880 = t9374 * t10285;
t9732 = t9392 * t9880;
t9534 = t9194 * t8875 - t9732;
t8726 = t8936 * t9194 + t9534;
t8738 = t8834 + t8859;
t8756 = t9987 - t9880;
t8861 = t9414 * t8875;
t9203 = t10152 + pkin(1);
t9347 = t9384 * t9348;
t10122 = 0.2e1 * t8780;
t10406 = t10122 + 0.2e1 * t8834;
t8912 = pkin(1) * t8917;
t10445 = t8699 * t9375 + t8912;
t9446 = t9375 * (t8859 * t10217 + (((t8909 - 0.2e1 * t8857) * pkin(7) + t8861 + pkin(6) * t8903 - t10104 * t8875) * t9374 + t9977) * pkin(3)) + ((0.2e1 * t8859 + t10406) * t9375 + t8912) * t9275 + t10445 * t9300;
t9543 = 0.2e1 * t9275 + t9300;
t9464 = t9543 + t10217;
t10065 = t9203 * t10341;
t10094 = pkin(6) * t10315;
t9047 = (t9104 * t9383 + (t9374 * t9414 - t10094) * t9358) * t9384;
t9853 = t9346 * t10096;
t9482 = t9358 * t10065 - t9375 * t9853 + t9047;
t9921 = t9375 * t10237;
t9957 = t9230 * t10282;
t9499 = t9921 * t9957;
t9707 = t9237 * t9957;
t9571 = t9392 * t9707;
t9503 = t9334 * t9571;
t9736 = t9412 * t9880;
t9531 = t9736 * t10346;
t9537 = t8936 * t9213 + t8723;
t9570 = t9230 * t9686;
t9655 = 0.2e1 * t9703;
t9735 = t9375 * t8917;
t9670 = pkin(1) * t9735 + t9865;
t9673 = t9374 * t9871;
t9689 = t9358 * t8917;
t9705 = t10223 * t10282;
t9706 = t9237 * t9954;
t9747 = t9358 * t9989;
t9761 = t10358 * t10282;
t9978 = t9346 * t10285;
t9777 = pkin(3) * t9978;
t9955 = t9348 * t10282;
t9002 = 0.1e1 / ((t9153 * t9383 + t10065) * t9358 + t9488);
t9958 = t9002 * t10282;
t9991 = t9358 * t8875;
t8579 = (((t9374 * t9785 + ((t9272 + t9551) * t9383 + (t9229 + t10315) * pkin(2)) * t10223) * t9955 + ((pkin(2) * t9689 + t9203 * t9705) * t10315 + ((t8917 * t9329 - t9294 * t9537) * t9358 + t9206 * pkin(2) * t9705) * t9383 - (t9374 * t9537 - t10285) * t10345 - t9392 * (-t10022 * t9952 + t9531)) * t9384 + t9978 * t10347 + (t9392 * t9213 * t9761 + (t10062 * t9203 + t10072 * t9374) * t10285) * t9383 - (-t9375 * t10285 + (t8723 * t9375 + t8936 * t9203 + t8871) * t9374) * t10196 + t9531 * t10340) / ((-pkin(2) * t10072 + t9153 * t9358) * t9383 + t9482) * t10285 + ((t9346 * t10070 + (t10196 * t9230 + t9270) * t10098 + t9230 * t9855 + t9158) * t9955 + (t9410 * t8802 * t9345 + (t9392 * t9673 + t8875 * t10360 + ((-t10345 * t9230 + t9208) * t9375 + t9869) * t10282) * t10098 + 0.2e1 * (t9230 * t9675 + t9195) * t9952 + pkin(2) * t8726) * t9384 + (-t9570 / 0.2e1 + t10420 * pkin(2)) * t10098 + t8726 * t10152 - pkin(2) * t9570 + (t8936 * t9357 + t9534) * pkin(1) + ((0.3e1 * t8789 - t10463) * t9384 + t10420) * t9300) / (t10110 * t9383 + t9482) * t9991 + (-(t9668 + t9543) * t9347 * t9705 * t10231 + (-0.4e1 * t9503 + (-0.3e1 * (t9168 + t9543) * t9572 - 0.2e1 * t10044 + (-0.2e1 * t8675 + t9777) * pkin(2)) * t9335 + ((t8875 * t9464 + t9732) * t10347 + 0.4e1 * t9571) * t9359 + 0.2e1 * (t9375 * t9868 + t9190 + t9543 * (t9330 * t9375 + pkin(1))) * t9954 - pkin(2) * t9777 + 0.2e1 * t10044 + t8675 * t9405) * t9348 + (t9499 * t10380 + (0.2e1 * (t9496 + t10402) * t9706 + t9446) * t9335 + (((t9673 + t9987) * t9314 - t10060 / 0.2e1 + t8861 / 0.2e1) * t10231 - t9499 + (t9300 / 0.2e1 + t9275 + t9628) * t9237 * t9991) * t10089 + (0.4e1 * t9216 + t9497 + t10415) * t9706 - t9446) * t9384 + 0.2e1 * t9503 + ((t9856 + t10402) * t9655 + (t8834 + t9670) * t9301 + pkin(2) * t8738) * t10218 + (((t8861 - t10060) * t9375 + t8756 * pkin(1)) * t9358 - 0.2e1 * t9707 + (t9543 + t10404) * t9747) * t10179 + (t10381 + (t9160 + t10415) * t9375) * t9686 - (t8699 * t9392 + t8780 * t9314) * t9301 - t8738 * t10337) * t9958) * t9412;
t10324 = pkin(7) * t8579;
t9599 = t8917 * t8875;
t9528 = pkin(2) * t9599;
t8772 = -0.2e1 * t9528;
t9176 = pkin(7) * t9384 - t10340;
t10457 = t10296 * t9176 + t10324 + (pkin(2) * t10119 + pkin(7) * t9703) * t8936 + t8772;
t9939 = t9387 * t10281;
t8931 = t9358 * t9939;
t10118 = t8931 - 0.2e1 * t8919;
t9349 = t9386 * t9350;
t10212 = t9349 * t9411;
t10432 = -t9352 + 0.1e1;
t9985 = t9359 * t8877;
t10000 = (t9985 + (-t10225 - t10432) * t10281) * t10212;
t9232 = pkin(6) * t9377 + pkin(3);
t10021 = t10358 * t9232;
t10031 = (t9295 + t9399) * t10338;
t8904 = pkin(8) * t8919;
t8907 = pkin(7) * t8919;
t8781 = t8907 + t8904;
t10059 = t8781 * t9295;
t10067 = pkin(2) * t10281;
t10204 = t9358 * t9378;
t9273 = pkin(6) * t9295;
t10411 = t9352 * t10217 + t9273;
t8754 = t9377 * t9981 - t10284;
t8937 = t9359 * t10281;
t8805 = t8937 + t8877;
t8790 = t8805 * pkin(2);
t8817 = t8931 - t8919;
t9984 = t9377 * t8877;
t8835 = pkin(3) * t9984;
t8867 = pkin(2) * t8877;
t9224 = t9295 + t9400;
t9654 = -0.2e1 * t9694;
t8928 = t9224 * t9654;
t9090 = -pkin(6) * t9163 + t10429 * t9295;
t9120 = t9166 * t10346;
t8995 = 0.1e1 / ((t9090 * t9358 + t9120) * t9386 + t9659);
t9154 = pkin(1) * t9295 - pkin(6) * t10151;
t9093 = t9234 * t9307 + t9154;
t8998 = 0.1e1 / ((t9093 * t9358 + t9120) * t9386 + t9659);
t9217 = pkin(1) * t10151;
t9306 = t9352 * pkin(2);
t9565 = t9377 * t9694;
t9524 = pkin(3) * t9565;
t9938 = t9392 * t10281;
t9685 = t9358 * t9938;
t9564 = t9378 * t9685;
t9983 = t9378 * t8877;
t9742 = t9377 * t9983;
t9595 = t9358 * t9742;
t9874 = t9378 * t9261;
t9644 = t9306 + t9874;
t9942 = t9377 * t10281;
t9695 = t9358 * t9942;
t9767 = pkin(2) * t9874;
t10187 = t9359 * t9377;
t9905 = t9358 * t10187;
t9943 = t9358 * t10281;
t9945 = t9335 * t10281;
t9975 = t9392 * t10284;
t8595 = -(t10000 + ((t8928 + 0.2e1 * t8867) * t9359 - (t8835 + t8781) * t10204 + ((t9401 + t9644) * t10378 + 0.2e1 * t9306 + t9207 * t9387 - pkin(2)) * t10281) * t10314 + (-(0.2e1 * t9767 - t10102 + t10411) * t9945 + (-t10059 + t9269 * t8877 + (0.2e1 * t9224 * t9261 - 0.3e1 * t10031) * t9943) * t9359 + (t10067 * t9207 + t10334 * t8754) * t9387 + t9595 * t10312 + (t9217 + t10105 + t10411) * t10281) * t9386 + pkin(2) * ((-pkin(2) * t9742 + t8754 * t9387) * t9358 + (t9166 * t9905 - t10021) * t10281)) * t8998 * t10281 + (-(t8805 * t10212 + 0.2e1 * (-t9524 / 0.2e1 + t8790) * t10314 + (t8805 * t9269 + ((t9261 - 0.2e1 * t10338) * pkin(3) * t9943 - t9975) * t9377) * t9386 + pkin(2) * t9166 * t9695) * t8877 + (t9350 * t9564 + (t8805 * t9377 * t9392 + pkin(3) * t8931 - t10284) * t9386 + pkin(2) * t8817) * t10284) * t8995;
t10294 = t8595 * t9358;
t8863 = pkin(7) * t8877;
t8869 = pkin(8) * t8877;
t9870 = -t10284 / 0.2e1;
t10133 = (t8863 + t8869 - t8910 / 0.2e1) * t9295 + pkin(3) * t9870;
t8864 = pkin(6) * t8877;
t10043 = ((t8864 + t8904) * pkin(7) + pkin(8) * t8864 + t9513 * t10284 + t10133) * t9305;
t10097 = 0.2e1 * t9305;
t9276 = pkin(2) * t9305;
t9304 = t9350 * t9411;
t10401 = t9276 + t9304 - t9273;
t10414 = 0.2e1 * t9273 - t9304;
t8868 = pkin(1) * t8877;
t10422 = t8805 * t10151 + t8868;
t8841 = pkin(6) * t9981;
t8676 = t8841 + t10133;
t9864 = t8864 + t8781;
t8700 = t8835 + t9864;
t8766 = t8910 - t8863;
t8724 = t8869 - t8766;
t9876 = t9377 * t10284;
t9727 = t9392 * t9876;
t9533 = t9194 * t8877 - t9727;
t8727 = t8937 * t9194 + t9533;
t8739 = t8835 + t8864;
t8757 = t9981 - t9876;
t8866 = t9414 * t8877;
t9204 = t10151 + pkin(1);
t9351 = t9387 * t9352;
t10121 = 0.2e1 * t8781;
t10407 = t10121 + 0.2e1 * t8835;
t8913 = pkin(1) * t8919;
t10444 = t8700 * t9378 + t8913;
t9445 = (t8864 * t10217 + (((t8910 - 0.2e1 * t8869) * pkin(7) + t8866 + pkin(6) * t8904 - t10104 * t8877) * t9377 + t9975) * pkin(3)) * t9378 + ((0.2e1 * t8864 + t10407) * t9378 + t8913) * t9276 + t10444 * t9304;
t9542 = 0.2e1 * t9276 + t9304;
t9463 = t9542 + t10217;
t10064 = t9204 * t10339;
t10093 = pkin(6) * t10314;
t9048 = (t9105 * t9386 + (t9377 * t9414 - t10093) * t9358) * t9387;
t9852 = t9350 * t10096;
t9481 = t9358 * t10064 - t9378 * t9852 + t9048;
t9920 = t9378 * t10236;
t9946 = t9233 * t10281;
t9498 = t9920 * t9946;
t9698 = t9239 * t9946;
t9563 = t9392 * t9698;
t9501 = t9334 * t9563;
t9731 = t9412 * t9876;
t9530 = t9731 * t10346;
t9536 = t8937 * t9214 + t8724;
t9562 = t9233 * t9685;
t9653 = 0.2e1 * t9694;
t9730 = t9378 * t8919;
t9669 = pkin(1) * t9730 + t9864;
t9672 = t9377 * t9870;
t9688 = t9358 * t8919;
t9696 = t10223 * t10281;
t9697 = t9239 * t9943;
t9743 = t9358 * t9983;
t9760 = t10358 * t10281;
t9976 = t9350 * t10284;
t9776 = pkin(3) * t9976;
t9944 = t9352 * t10281;
t9003 = 0.1e1 / ((t9154 * t9386 + t10064) * t9358 + t9487);
t9948 = t9003 * t10281;
t9986 = t9358 * t8877;
t8580 = (((t9377 * t9785 + ((t9273 + t9551) * t9386 + (t9232 + t10314) * pkin(2)) * t10223) * t9944 + ((pkin(2) * t9688 + t9204 * t9696) * t10314 + ((t8919 * t9329 - t9295 * t9536) * t9358 + pkin(2) * t9207 * t9696) * t9386 - (t9377 * t9536 - t10284) * t10345 - (-t10021 * t9941 + t9530) * t9392) * t9387 + t9976 * t10347 + (t9392 * t9214 * t9760 + (t10062 * t9204 + t10071 * t9377) * t10284) * t9386 - (-t9378 * t10284 + (t8724 * t9378 + t8937 * t9204 + t8868) * t9377) * t10196 + t9530 * t10338) / ((-pkin(2) * t10071 + t9154 * t9358) * t9386 + t9481) * t10284 + ((t9350 * t10070 + (t10196 * t9233 + t9270) * t10097 + t9233 * t9855 + t9158) * t9944 + (t9410 * t8805 * t9349 + (t9392 * t9672 + t8877 * t10360 + ((-t10345 * t9233 + t9208) * t9378 + t9869) * t10281) * t10097 + 0.2e1 * (t9233 * t9675 + t9195) * t9941 + pkin(2) * t8727) * t9387 + (-t9562 / 0.2e1 + t10422 * pkin(2)) * t10097 + t8727 * t10151 - pkin(2) * t9562 + (t8937 * t9357 + t9533) * pkin(1) + ((0.3e1 * t8790 - t10462) * t9387 + t10422) * t9304) / (t10109 * t9386 + t9481) * t9986 + (-(t9668 + t9542) * t9351 * t9696 * t10230 + (-0.4e1 * t9501 + (-0.3e1 * (t9168 + t9542) * t9564 - 0.2e1 * t10043 + (-0.2e1 * t8676 + t9776) * pkin(2)) * t9335 + ((t8877 * t9463 + t9727) * t10347 + 0.4e1 * t9563) * t9359 + 0.2e1 * (t9378 * t9868 + t9190 + t9542 * (t9330 * t9378 + pkin(1))) * t9943 - pkin(2) * t9776 + 0.2e1 * t10043 + t8676 * t9405) * t9352 + (t9498 * t10380 + (0.2e1 * (t9496 + t10401) * t9697 + t9445) * t9335 + (((t9672 + t9981) * t9315 - t10059 / 0.2e1 + t8866 / 0.2e1) * t10230 - t9498 + (t9304 / 0.2e1 + t9276 + t9628) * t9239 * t9986) * t10089 + (0.4e1 * t9217 + t9497 + t10414) * t9697 - t9445) * t9387 + 0.2e1 * t9501 + ((t9856 + t10401) * t9653 + (t8835 + t9669) * t9305 + pkin(2) * t8739) * t10218 + (((t8866 - t10059) * t9378 + t8757 * pkin(1)) * t9358 - 0.2e1 * t9698 + (t9542 + t10404) * t9743) * t10179 + (t10381 + (t9160 + t10414) * t9378) * t9685 - (t8700 * t9392 + t8781 * t9315) * t9305 - t8739 * t10337) * t9948) * t9412;
t10323 = pkin(7) * t8580;
t9596 = t8919 * t8877;
t9527 = pkin(2) * t9596;
t8770 = -0.2e1 * t9527;
t9177 = pkin(7) * t9387 - t10338;
t10456 = t10294 * t9177 + t10323 + (pkin(2) * t10118 + pkin(7) * t9694) * t8937 + t8770;
t8557 = t10202 * t8593 + t8578;
t8941 = t8947 ^ 2 / t8990 ^ 2;
t9908 = t9358 * t10190;
t10455 = -t9908 * t8941 - t8557;
t8558 = t10200 * t8594 + t8579;
t8942 = t8948 ^ 2 / t8991 ^ 2;
t9906 = t9358 * t10188;
t10454 = -t9906 * t8942 - t8558;
t8559 = t10198 * t8595 + t8580;
t8943 = t8949 ^ 2 / t8989 ^ 2;
t9904 = t9358 * t10186;
t10453 = -t9904 * t8943 - t8559;
t10241 = (pkin(7) * t10175 - pkin(2) + t9298) * t9335;
t10326 = pkin(6) * t9392;
t10331 = pkin(6) * t9381;
t10336 = pkin(3) * t9226;
t9136 = -pkin(2) + t9646;
t9317 = pkin(1) * t9381;
t9247 = t9317 + t9405;
t9404 = 0.3e1 * pkin(2);
t10030 = pkin(2) * t10175;
t9523 = t9344 * t9392 - t10030;
t9738 = t9381 * t8915;
t9643 = pkin(2) * t9738;
t9692 = t9136 * t9226 * t10283;
t9851 = pkin(1) * t8856;
t9858 = t9357 + t10102;
t10005 = (-t10002 - ((t8873 * t9247 + t8926) * t9359 + (-t9643 - t10446) * t9358 + ((-t9298 + (-t10153 + pkin(1)) * t9381 + t9404) * t9335 + t9136) * t10283) * t10316 + ((-t9381 * t9851 + t9212 * t9884 - (t9215 + t9269) * t8873) * t9359 + (pkin(2) * t9227 * t9994 - t10331 * t8755) * t9358 + (-(pkin(1) * t9299 + t10336 * t9344 + t9215 - t9271 + t9858) * t9335 + (((t9313 - t9392) * t9293 - t10326) * t9381 + 0.3e1 * t10034) * t10210 + t10222 * t10336) * t10283) * t9380 - t9335 * t9692 - (pkin(1) * t9523 - t9269 * t9372 - t9328) * t9359 * t9712 + t8752 * t9155 * t9358 + t9692) * t8873;
t10052 = pkin(6) * t10223;
t10177 = t9371 * t9380;
t10372 = 0.2e1 * t9371;
t9316 = pkin(1) * t9344;
t9398 = -pkin(7) / 0.2e1;
t9331 = t9398 - pkin(8) / 0.2e1;
t9406 = -0.2e1 * pkin(1);
t10184 = t9359 * t9381;
t9903 = t9358 * t10184;
t8620 = ((pkin(1) * t9750 + t8752) * t9380 - (t9317 + pkin(2)) * t8915) * t9359 + ((t9884 + t10129) * t9372 - t8870 + (t9155 * t9342 + (pkin(6) * t10177 - pkin(2)) * t9381) * t8873) * t9358 + ((-(-t9299 + t9316 + t9406 - t10173) * t10210 - t10052 * t10175) * t9342 + (t9226 * t9903 + (t9331 * t9344 + t10030 / 0.2e1 + t9212) * t9335 * t10372 - (-t9523 + t9212) * t9371) * t9380 + (t9316 - t9202) * t10210 + t10358 * t9227 * t10175) * t10283;
t10035 = pkin(3) * t10465;
t10055 = pkin(6) * t10283;
t10101 = -0.2e1 * t9328;
t10107 = t9188 + t9411;
t10108 = t10217 / 0.3e1 - 0.2e1 / 0.3e1 * t9411;
t8884 = pkin(1) * t9690;
t10126 = t8884 + 0.2e1 * t10069;
t10289 = (-t8856 + t9526) * t9344;
t10042 = pkin(3) * t8873;
t10292 = ((pkin(2) * t9657 + t9866) * t9371 + t10042) * t9344;
t10379 = 0.3e1 * t9334;
t10386 = 0.2e1 * pkin(6);
t10387 = -0.2e1 * pkin(6);
t10390 = 0.2e1 * pkin(1);
t8854 = t9411 * t8873;
t10425 = t9341 * t8854;
t10440 = 0.2e1 * t9372;
t8761 = pkin(3) * t10286 - t8839;
t8836 = pkin(1) * t9994;
t8848 = pkin(2) * t8853;
t9159 = 0.3e1 * t9411 + t9552;
t9265 = -t9409 + t10102;
t9541 = 0.2e1 * t9343 * t9687;
t9450 = pkin(3) * (pkin(6) * t9658 + t8856) + t9541 * t10343;
t9594 = t9372 * t9738;
t9627 = -t10095 * t9381 + t9115;
t9637 = pkin(2) * t9687;
t9652 = t9357 * t8873 + t8855;
t9781 = pkin(2) * t9964;
t9664 = 0.2e1 * t9781;
t9784 = pkin(2) * t9996;
t9788 = pkin(1) * t9992;
t9807 = 0.2e1 * t9959;
t9843 = 0.2e1 * t10283;
t9846 = pkin(2) * t10055;
t9849 = pkin(2) * t10042;
t9857 = t9409 / 0.3e1 - t9414 / 0.3e1 + t9411;
t9756 = (((-0.4e1 / 0.3e1 + t9344) * t10216 + ((-0.2e1 / 0.3e1 * t9271 + t10108) * t9344 + 0.2e1 / 0.3e1 * t9769 + 0.4e1 / 0.3e1 * t9271 + t9857) * t9380 + (0.4e1 / 0.3e1 * t10316 - 0.2e1 / 0.3e1 * t9226) * t9136) * t10283 * t10379 + (t9280 * t10425 - (t10289 + (t8870 + t10465) * t9381 + 0.3e1 * t8856 - 0.4e1 * t10464) * t10316 + ((t9687 * t10387 - t9851) * t9381 + (pkin(6) * t9664 - t9788) * t9372 + t8854 + (-t10292 + (t9541 + (pkin(2) * t9740 - 0.4e1 * t9687) * t9381 + (t8911 + t9664) * t10440 + t8853 + t10123) * t9371) * pkin(3) - t9652) * t9380 + ((-t10217 * t9711 - t8848) * t9371 - t9849) * t9344 + ((t8761 * t9372 - 0.2e1 * t9637) * t9371 + t10035) * t9381 + (t9265 * t9711 + t8848) * t9371 + t9450) * t9335 + ((-0.3e1 * t9344 + 0.3e1) * t10216 * t10283 - (t9280 * t8884 + (-t9643 + (-t8853 - t10405) * t9372) * t9358 + ((t10390 + 0.4e1 * t10153) * t9381 + (0.4e1 * t9344 - 0.2e1) * pkin(2)) * t10283) * t10316 + (0.2e1 * (t9271 + t10107) * t9965 + (((t8836 + t10129) * t9293 + t8761) * t9358 - t9202 * pkin(2) * t9843) * t9381 + (t9751 * t9404 - 0.4e1 * t10055) * t9293 + (pkin(6) * t9784 + t9959 * t9406) * t9372 - t9159 * t10283) * t9380 + ((-t9358 * t9788 + 0.2e1 * t9846) * t9371 + pkin(3) * t10126) * t9344 + ((pkin(1) * t9784 + pkin(6) * t9807) * t9371 + pkin(3) * t9807) * t10175 + (-0.2e1 * t9846 + (t9372 * t9652 + t9788) * t9358) * t9371 - pkin(3) * (t10208 * t8779 + t10126)) * t9359 + t10434 * t10425 - (-t10289 - t8856 + (-t10129 * t9381 + (t10386 + t9293) * t9964) * t9372) * t10316 + (-t8854 + (t10292 + (-pkin(2) * t9594 + (-t9392 * t9343 + (t9392 + t9313) * t9381) * t9358 * t9843 - t9671) * t9371) * pkin(3)) * t9380 + ((t8848 + (t10217 * t9372 + t10101) * t9964) * t9371 + t9849) * t9344 + (((pkin(1) * t9664 - t8761) * t9372 + 0.2e1 * t9637) * t9371 - t10035) * t9381 + (-t8848 + (t9160 * t9372 + t10381) * t9964) * t9371 - t9450) / (t9085 + t9358 * (t9091 * t9380 + t9627)) * t10283;
t8581 = -t9756 + (-t8620 * t10286 - t10005) * t8999;
t10322 = pkin(7) * t8581;
t8590 = t9359 * t8593;
t8872 = t8881 ^ 2 / t9016 ^ 2;
t9241 = pkin(7) * t9372 + pkin(1);
t9753 = t10283 * t8873;
t9558 = t9359 * t9753;
t9775 = pkin(6) * t9908;
t10452 = -t8590 * t9244 - t10322 + (0.2e1 * t9558 + t8872) * pkin(2) + (t9241 * t9381 - t10241 + t9298 - t9775) * t8941;
t10240 = (pkin(7) * t10169 - pkin(2) + t9302) * t9335;
t10329 = pkin(6) * t9384;
t10335 = pkin(3) * t9229;
t9137 = -pkin(2) + t9645;
t9319 = pkin(1) * t9384;
t9248 = t9319 + t9405;
t10029 = pkin(2) * t10169;
t9522 = t9348 * t9392 - t10029;
t9733 = t9384 * t8917;
t9641 = pkin(2) * t9733;
t9691 = t9137 * t9229 * t10282;
t9850 = pkin(1) * t8862;
t10004 = (-t10001 - ((t8875 * t9248 + t8927) * t9359 + (-t9641 - t10445) * t9358 + ((-t9302 + (-t10152 + pkin(1)) * t9384 + t9404) * t9335 + t9137) * t10282) * t10315 + ((-t9384 * t9850 + t9213 * t9880 - (t9216 + t9269) * t8875) * t9359 + (pkin(2) * t9230 * t9989 - t10329 * t8756) * t9358 + (-(pkin(1) * t9303 + t10335 * t9348 + t9216 - t9272 + t9858) * t9335 + (((t9314 - t9392) * t9294 - t10326) * t9384 + 0.3e1 * t10036) * t10210 + t10221 * t10335) * t10282) * t9383 - t9335 * t9691 - (pkin(1) * t9522 - t9269 * t9375 - t9328) * t9359 * t9704 + t8753 * t9156 * t9358 + t9691) * t8875;
t10171 = t9374 * t9383;
t10370 = 0.2e1 * t9374;
t9318 = pkin(1) * t9348;
t10182 = t9359 * t9384;
t9902 = t9358 * t10182;
t8621 = ((pkin(1) * t9746 + t8753) * t9383 - (t9319 + pkin(2)) * t8917) * t9359 + ((t9880 + t10128) * t9375 - t8871 + (t9156 * t9346 + (pkin(6) * t10171 - pkin(2)) * t9384) * t8875) * t9358 + ((-(-t9303 + t9318 + t9406 - t10167) * t10210 - t10052 * t10169) * t9346 + (t9229 * t9902 + (t9331 * t9348 + t10029 / 0.2e1 + t9213) * t9335 * t10370 - (-t9522 + t9213) * t9374) * t9383 + (t9318 - t9203) * t10210 + t10358 * t9230 * t10169) * t10282;
t10033 = pkin(3) * t10466;
t10054 = pkin(6) * t10282;
t8885 = pkin(1) * t9689;
t10125 = t8885 + 0.2e1 * t10068;
t10288 = (-t8862 + t9525) * t9348;
t10041 = pkin(3) * t8875;
t10291 = ((pkin(2) * t9655 + t9865) * t9374 + t10041) * t9348;
t8860 = t9411 * t8875;
t10424 = t9345 * t8860;
t10439 = 0.2e1 * t9375;
t8762 = pkin(3) * t10285 - t8840;
t8837 = pkin(1) * t9989;
t8849 = pkin(2) * t8859;
t9540 = 0.2e1 * t9347 * t9686;
t9449 = pkin(3) * (pkin(6) * t9656 + t8862) + t9540 * t10341;
t9593 = t9375 * t9733;
t9626 = -t10094 * t9384 + t9116;
t9636 = pkin(2) * t9686;
t9651 = t9357 * t8875 + t8861;
t9780 = pkin(2) * t9954;
t9663 = 0.2e1 * t9780;
t9783 = pkin(2) * t9991;
t9787 = pkin(1) * t9987;
t9806 = 0.2e1 * t9949;
t9842 = 0.2e1 * t10282;
t9845 = pkin(2) * t10054;
t9848 = pkin(2) * t10041;
t9755 = (((t9348 - 0.4e1 / 0.3e1) * t10214 + ((-0.2e1 / 0.3e1 * t9272 + t10108) * t9348 + 0.2e1 / 0.3e1 * t9768 + 0.4e1 / 0.3e1 * t9272 + t9857) * t9383 + (0.4e1 / 0.3e1 * t10315 - 0.2e1 / 0.3e1 * t9229) * t9137) * t10282 * t10379 + (t9281 * t10424 - (t10288 + (t8871 + t10466) * t9384 + 0.3e1 * t8862 - 0.4e1 * t10463) * t10315 + ((t9686 * t10387 - t9850) * t9384 + (pkin(6) * t9663 - t9787) * t9375 + t8860 + (-t10291 + (t9540 + (pkin(2) * t9735 - 0.4e1 * t9686) * t9384 + (t8912 + t9663) * t10439 + t8859 + t10122) * t9374) * pkin(3) - t9651) * t9383 + ((-t10217 * t9703 - t8849) * t9374 - t9848) * t9348 + ((t8762 * t9375 - 0.2e1 * t9636) * t9374 + t10033) * t9384 + (t9265 * t9703 + t8849) * t9374 + t9449) * t9335 + ((-0.3e1 * t9348 + 0.3e1) * t10214 * t10282 - (t9281 * t8885 + (-t9641 + (-t8859 - t10406) * t9375) * t9358 + ((t10390 + 0.4e1 * t10152) * t9384 + (0.4e1 * t9348 - 0.2e1) * pkin(2)) * t10282) * t10315 + (0.2e1 * (t9272 + t10107) * t9955 + (((t8837 + t10128) * t9294 + t8762) * t9358 - t9203 * pkin(2) * t9842) * t9384 + (t9747 * t9404 - 0.4e1 * t10054) * t9294 + (pkin(6) * t9783 + t9949 * t9406) * t9375 - t9159 * t10282) * t9383 + ((-t9358 * t9787 + 0.2e1 * t9845) * t9374 + pkin(3) * t10125) * t9348 + ((pkin(1) * t9783 + pkin(6) * t9806) * t9374 + pkin(3) * t9806) * t10169 + (-0.2e1 * t9845 + (t9375 * t9651 + t9787) * t9358) * t9374 - pkin(3) * (t10206 * t8780 + t10125)) * t9359 + t10433 * t10424 - (-t10288 - t8862 + (-t10128 * t9384 + (t10386 + t9294) * t9954) * t9375) * t10315 + (-t8860 + (t10291 + (-pkin(2) * t9593 + (-t9392 * t9347 + (t9392 + t9314) * t9384) * t9358 * t9842 - t9670) * t9374) * pkin(3)) * t9383 + ((t8849 + (t10217 * t9375 + t10101) * t9954) * t9374 + t9848) * t9348 + (((pkin(1) * t9663 - t8762) * t9375 + 0.2e1 * t9636) * t9374 - t10033) * t9384 + (-t8849 + (t9160 * t9375 + t10381) * t9954) * t9374 - t9449) / (t9086 + t9358 * (t9092 * t9383 + t9626)) * t10282;
t8582 = -t9755 + (-t8621 * t10285 - t10004) * t9000;
t10321 = pkin(7) * t8582;
t8591 = t9359 * t8594;
t8874 = t8882 ^ 2 / t9017 ^ 2;
t9242 = pkin(7) * t9375 + pkin(1);
t9749 = t10282 * t8875;
t9557 = t9359 * t9749;
t9774 = pkin(6) * t9906;
t10451 = -t8591 * t9245 - t10321 + (0.2e1 * t9557 + t8874) * pkin(2) + (t9242 * t9384 - t10240 + t9302 - t9774) * t8942;
t10239 = (pkin(7) * t10163 - pkin(2) + t9306) * t9335;
t10106 = t9273 + t9411;
t10327 = pkin(6) * t9387;
t9138 = -pkin(2) + t9644;
t9321 = pkin(1) * t9387;
t9249 = t9321 + t9405;
t9520 = -pkin(1) * t9307 - t9217 - t9269;
t10028 = pkin(2) * t10163;
t9521 = t9352 * t9392 - t10028;
t9728 = t9387 * t8919;
t9639 = pkin(2) * t9728;
t9947 = t9232 * t10281;
t9699 = t9138 * t9947;
t10003 = (-t10000 - ((t8877 * t9249 + t8928) * t9359 + (-t9639 - t10444) * t9358 + ((-t9306 + (-t10151 + pkin(1)) * t9387 + t9404) * t9335 + t9138) * t10281) * t10314 + (-(pkin(3) * t9232 * t9352 - t10106 - t9520) * t9945 + ((((t9315 - t9392) * t9295 - t10326) * t9387 + 0.3e1 * t10031) * t9943 + t9214 * t9876 + t9520 * t8877) * t9359 + (pkin(2) * t9233 * t9983 - t10327 * t8757) * t9358 + pkin(3) * t9947 * t10220) * t9386 - t9335 * t9699 - (pkin(1) * t9521 - t9269 * t9378 - t9328) * t9359 * t9695 + t8754 * t9157 * t9358 + t9699) * t8877;
t10165 = t9377 * t9386;
t10368 = 0.2e1 * t9377;
t9320 = pkin(1) * t9352;
t10180 = t9359 * t9387;
t9901 = t9358 * t10180;
t8622 = ((pkin(1) * t9742 + t8754) * t9386 - (t9321 + pkin(2)) * t8919) * t9359 + ((t9876 + t10127) * t9378 - t8868 + (t9157 * t9350 + (pkin(6) * t10165 - pkin(2)) * t9387) * t8877) * t9358 + ((-(-t9307 + t9320 + t9406 - t10161) * t10210 - t10052 * t10163) * t9350 + (t9232 * t9901 + (t9331 * t9352 + t10028 / 0.2e1 + t9214) * t9335 * t10368 - t9377 * (-t9521 + t9214)) * t9386 + (t9320 - t9204) * t10210 + t10358 * t9233 * t10163) * t10281;
t10032 = pkin(3) * t10467;
t10053 = pkin(6) * t10281;
t8886 = pkin(1) * t9688;
t10124 = t8886 + 0.2e1 * t10067;
t10287 = (-t8867 + t9524) * t9352;
t10040 = pkin(3) * t8877;
t10290 = ((pkin(2) * t9653 + t9864) * t9377 + t10040) * t9352;
t8865 = t9411 * t8877;
t10423 = t9349 * t8865;
t10438 = 0.2e1 * t9378;
t8763 = pkin(3) * t10284 - t8841;
t8838 = pkin(1) * t9983;
t8850 = pkin(2) * t8864;
t9539 = 0.2e1 * t9351 * t9685;
t9448 = pkin(3) * (pkin(6) * t9654 + t8867) + t9539 * t10339;
t9592 = t9378 * t9728;
t9625 = -t10093 * t9387 + t9117;
t9635 = pkin(2) * t9685;
t9650 = t9357 * t8877 + t8866;
t9779 = pkin(2) * t9943;
t9662 = 0.2e1 * t9779;
t9782 = pkin(2) * t9986;
t9786 = pkin(1) * t9981;
t9805 = 0.2e1 * t9938;
t9841 = 0.2e1 * t10281;
t9844 = pkin(2) * t10053;
t9847 = pkin(2) * t10040;
t9754 = (((-0.4e1 / 0.3e1 + t9352) * t10212 + ((-0.2e1 / 0.3e1 * t9273 + t10108) * t9352 + 0.2e1 / 0.3e1 * t9767 + 0.4e1 / 0.3e1 * t9273 + t9857) * t9386 + (0.4e1 / 0.3e1 * t10314 - 0.2e1 / 0.3e1 * t9232) * t9138) * t10281 * t10379 + (t9282 * t10423 - (t10287 + (t8868 + t10467) * t9387 + 0.3e1 * t8867 - 0.4e1 * t10462) * t10314 + ((-pkin(1) * t8867 + t9685 * t10387) * t9387 + (pkin(6) * t9662 - t9786) * t9378 + t8865 + (-t10290 + (t9539 + (pkin(2) * t9730 - 0.4e1 * t9685) * t9387 + (t8913 + t9662) * t10438 + t8864 + t10121) * t9377) * pkin(3) - t9650) * t9386 + ((-t10217 * t9694 - t8850) * t9377 - t9847) * t9352 + ((t8763 * t9378 - 0.2e1 * t9635) * t9377 + t10032) * t9387 + (t9265 * t9694 + t8850) * t9377 + t9448) * t9335 + ((-0.3e1 * t9352 + 0.3e1) * t10212 * t10281 - (t9282 * t8886 + (-t9639 + (-t8864 - t10407) * t9378) * t9358 + ((t10390 + 0.4e1 * t10151) * t9387 + (0.4e1 * t9352 - 0.2e1) * pkin(2)) * t10281) * t10314 + (0.2e1 * (t9188 + t10106) * t9944 + (((t8838 + t10127) * t9295 + t8763) * t9358 - t9204 * pkin(2) * t9841) * t9387 + (t9743 * t9404 - 0.4e1 * t10053) * t9295 + (pkin(6) * t9782 + t9938 * t9406) * t9378 - t9159 * t10281) * t9386 + ((-t9358 * t9786 + 0.2e1 * t9844) * t9377 + pkin(3) * t10124) * t9352 + ((pkin(1) * t9782 + pkin(6) * t9805) * t9377 + pkin(3) * t9805) * t10163 + (-0.2e1 * t9844 + (t9378 * t9650 + t9786) * t9358) * t9377 - pkin(3) * (t10204 * t8781 + t10124)) * t9359 + t10432 * t10423 - (-t10287 - t8867 + (-t10127 * t9387 + (t10386 + t9295) * t9943) * t9378) * t10314 + (-t8865 + (t10290 + (-pkin(2) * t9592 + (-t9392 * t9351 + (t9392 + t9315) * t9387) * t9358 * t9841 - t9669) * t9377) * pkin(3)) * t9386 + ((t8850 + (t10217 * t9378 + t10101) * t9943) * t9377 + t9847) * t9352 + (((pkin(1) * t9662 - t8763) * t9378 + 0.2e1 * t9635) * t9377 - t10032) * t9387 + (-t8850 + (t9160 * t9378 + t10381) * t9943) * t9377 - t9448) / (t9087 + t9358 * (t9093 * t9386 + t9625)) * t10281;
t8583 = -t9754 + (-t8622 * t10284 - t10003) * t8998;
t10320 = pkin(7) * t8583;
t8592 = t9359 * t8595;
t8876 = t8883 ^ 2 / t9018 ^ 2;
t9243 = pkin(7) * t9378 + pkin(1);
t9745 = t10281 * t8877;
t9556 = t9359 * t9745;
t9773 = pkin(6) * t9904;
t10450 = -t8592 * t9246 - t10320 + (0.2e1 * t9556 + t8876) * pkin(2) + (t9243 * t9387 - t10239 + t9306 - t9773) * t8943;
t10049 = pkin(6) * t10204;
t10317 = pkin(7) * t9352;
t10377 = 0.2e1 * t9335;
t10408 = pkin(6) * t9901 + t9315;
t9413 = 0.1e1 / pkin(3) ^ 2;
t8918 = t8925 ^ 2 * t9413 / t9027 ^ 2;
t8901 = pkin(7) * t8918;
t9507 = t9358 * t9566;
t9472 = t9507 * t9405;
t9970 = t9378 * t8943;
t10449 = t8943 * ((-t10028 + t9398 + t10317) * t10377 + pkin(7) - 0.2e1 * t10317 + t10408) + (pkin(2) * t9970 + pkin(7) * t9507) * t10435 - t9378 * t9472 - t8901 - t8583 * t10388 - (-t9249 * t9359 + t10049) * t8595;
t10050 = pkin(6) * t10206;
t10318 = pkin(7) * t9348;
t10409 = pkin(6) * t9902 + t9314;
t8916 = t8924 ^ 2 * t9413 / t9026 ^ 2;
t8900 = pkin(7) * t8916;
t9508 = t9358 * t9574;
t9473 = t9508 * t9405;
t9972 = t9375 * t8942;
t10448 = t8942 * ((-t10029 + t9398 + t10318) * t10377 + pkin(7) - 0.2e1 * t10318 + t10409) + (pkin(2) * t9972 + pkin(7) * t9508) * t10436 - t9375 * t9473 - t8900 - t8582 * t10388 - (-t9248 * t9359 + t10050) * t8594;
t10051 = pkin(6) * t10208;
t10319 = pkin(7) * t9344;
t10410 = pkin(6) * t9903 + t9313;
t8914 = t8923 ^ 2 * t9413 / t9025 ^ 2;
t8899 = pkin(7) * t8914;
t9509 = t9358 * t9582;
t9474 = t9509 * t9405;
t9974 = t9372 * t8941;
t10447 = t8941 * ((-t10030 + t9398 + t10319) * t10377 + pkin(7) - 0.2e1 * t10319 + t10410) + (pkin(2) * t9974 + pkin(7) * t9509) * t10437 - t9372 * t9474 - t8899 - t8581 * t10388 - (-t9247 * t9359 + t10051) * t8593;
t10092 = 0.2e1 * t8593;
t9170 = t9299 + t9241;
t10443 = (t10431 * t8578 - (pkin(6) * t8581 - t10325) * t9372) * t9358 - (-t9170 * t9381 + t10241) * t10092 - (t10051 * t10092 - t8581 * t9247) * t9359;
t10091 = 0.2e1 * t8594;
t9172 = t9303 + t9242;
t10442 = (t10430 * t8579 - (pkin(6) * t8582 - t10324) * t9375) * t9358 - (-t9172 * t9384 + t10240) * t10091 - (t10050 * t10091 - t8582 * t9248) * t9359;
t10090 = 0.2e1 * t8595;
t9174 = t9307 + t9243;
t10441 = (t10429 * t8580 - (pkin(6) * t8583 - t10323) * t9378) * t9358 - (-t9174 * t9387 + t10239) * t10090 - (t10049 * t10090 - t8583 * t9249) * t9359;
t10313 = t10358 * pkin(6);
t10419 = t8914 - t8872;
t10418 = t8916 - t8874;
t10417 = t8918 - t8876;
t10389 = -0.4e1 * pkin(2);
t10385 = 0.2e1 * pkin(7);
t10384 = -0.2e1 * t8929 + t8915;
t10383 = -0.2e1 * t8930 + t8917;
t10382 = -0.2e1 * t8931 + t8919;
t10376 = -0.2e1 * t9358;
t10375 = 0.2e1 * t9358;
t10374 = -0.2e1 * t9359;
t10373 = -0.2e1 * t9371;
t10371 = -0.2e1 * t9374;
t10369 = -0.2e1 * t9377;
t10367 = -0.2e1 * t9380;
t10365 = -0.2e1 * t9383;
t10363 = -0.2e1 * t9386;
t10359 = -0.4e1 * t9335 + 0.4e1;
t10357 = t10377 - 0.2e1;
t10355 = 0.4e1 * t9342 - 0.2e1;
t10353 = 0.4e1 * t9346 - 0.2e1;
t10351 = 0.4e1 * t9350 - 0.2e1;
t10333 = pkin(6) * t9358;
t9333 = t9358 ^ 2;
t10311 = MDP(4) * t9333;
t10310 = MDP(5) * t9333;
t10309 = MDP(6) * t9358;
t10308 = MDP(7) * t9358;
t10304 = t8557 * t9381;
t10303 = t8558 * t9384;
t10302 = t8559 * t9387;
t10297 = t8593 * t9381;
t10295 = t8594 * t9384;
t10293 = t8595 * t9387;
t10235 = t9205 * t9235;
t9055 = -t9227 * t10232 + t9359 * t9922;
t9028 = t9382 * t10235 - t9055 * t9373;
t9031 = t9373 * t10235 + t9055 * t9382;
t9094 = -t9227 * t10208 + t9235 * t9359;
t9058 = -t9094 * t9373 + t9212 * t9382;
t9061 = t9094 * t9382 + t9212 * t9373;
t9919 = t9235 * t10179;
t9070 = t9382 * t10238 + 0.2e1 * t9373 * t9919;
t9681 = t9382 * t9919;
t9881 = t9373 * t10238;
t8950 = (t9070 * t9288 + 0.2e1 * (t9681 - t9881 / 0.2e1) * t9285) * t9344 + (t9028 * t9288 - t9031 * t9285) * t9381 + (t9058 * t9288 - t9061 * t9285) * t9392;
t8980 = 0.1e1 / (t9046 + (t10063 * t9371 + t9142 * t9380 - t9854) * t9372 + t9235 * t10076);
t10280 = t8950 * t8980;
t10234 = t9206 * t9237;
t9056 = -t9230 * t10231 + t9359 * t9921;
t9029 = t9385 * t10234 - t9056 * t9376;
t9032 = t9376 * t10234 + t9056 * t9385;
t9095 = -t9230 * t10206 + t9237 * t9359;
t9059 = -t9095 * t9376 + t9213 * t9385;
t9062 = t9095 * t9385 + t9213 * t9376;
t9918 = t9237 * t10179;
t9071 = t9385 * t10237 + 0.2e1 * t9376 * t9918;
t9680 = t9385 * t9918;
t9877 = t9376 * t10237;
t8951 = (t9071 * t9289 + 0.2e1 * (t9680 - t9877 / 0.2e1) * t9286) * t9348 + (t9029 * t9289 - t9032 * t9286) * t9384 + (t9059 * t9289 - t9062 * t9286) * t9392;
t8981 = 0.1e1 / (t9047 + (t10063 * t9374 + t9142 * t9383 - t9853) * t9375 + t9237 * t10075);
t10279 = t8951 * t8981;
t10233 = t9207 * t9239;
t9057 = -t9233 * t10230 + t9359 * t9920;
t9030 = t9388 * t10233 - t9057 * t9379;
t9033 = t9379 * t10233 + t9057 * t9388;
t9096 = -t9233 * t10204 + t9239 * t9359;
t9060 = -t9096 * t9379 + t9214 * t9388;
t9063 = t9096 * t9388 + t9214 * t9379;
t9917 = t9239 * t10179;
t9072 = t9388 * t10236 + 0.2e1 * t9379 * t9917;
t9679 = t9388 * t9917;
t9873 = t9379 * t10236;
t8952 = (t9072 * t9290 + 0.2e1 * (t9679 - t9873 / 0.2e1) * t9287) * t9352 + (t9030 * t9290 - t9033 * t9287) * t9387 + (t9060 * t9290 - t9063 * t9287) * t9392;
t8982 = 0.1e1 / (t9048 + (t10063 * t9377 + t9142 * t9386 - t9852) * t9378 + t9239 * t10074);
t10278 = t8952 * t8982;
t8953 = ((-0.2e1 * t9681 + t9881) * t9288 + t9070 * t9285) * t9344 + (t9028 * t9285 + t9031 * t9288) * t9381 + (t9058 * t9285 + t9061 * t9288) * t9392;
t10277 = t8953 * t8980;
t8954 = ((-0.2e1 * t9680 + t9877) * t9289 + t9071 * t9286) * t9348 + (t9029 * t9286 + t9032 * t9289) * t9384 + (t9059 * t9286 + t9062 * t9289) * t9392;
t10276 = t8954 * t8981;
t8955 = ((-0.2e1 * t9679 + t9873) * t9290 + t9072 * t9287) * t9352 + (t9030 * t9287 + t9033 * t9290) * t9387 + (t9060 * t9287 + t9063 * t9290) * t9392;
t10275 = t8955 * t8982;
t9109 = t9285 * t9382 + t9288 * t9373;
t9110 = -t9285 * t9373 + t9288 * t9382;
t9453 = ((pkin(3) * t10228 - pkin(6)) * t9380 + t9371 * t9136) * t10210 - (t9164 * t9380 + (t9226 - 0.2e1 * t10316) * t9372) * t9335 - (-t9226 + t10316) * t9372;
t9480 = t10185 * (pkin(1) + t9863) - (t9209 * t9372 + t9649) * t10209;
t8956 = -t9109 * t9453 + t9110 * t9480;
t9004 = 0.1e1 / (t9085 + t9358 * (t9088 * t9380 + t9627));
t10274 = t8956 * t9004;
t8957 = t9109 * t9480 + t9110 * t9453;
t10273 = t8957 * t9004;
t9111 = t9286 * t9385 + t9289 * t9376;
t9112 = -t9286 * t9376 + t9289 * t9385;
t9452 = ((pkin(3) * t10226 - pkin(6)) * t9383 + t9374 * t9137) * t10210 - (t9165 * t9383 + (t9229 - 0.2e1 * t10315) * t9375) * t9335 - (-t9229 + t10315) * t9375;
t9479 = t10183 * (pkin(1) + t9862) - (t9210 * t9375 + t9648) * t10207;
t8958 = -t9111 * t9452 + t9112 * t9479;
t9005 = 0.1e1 / (t9086 + t9358 * (t9089 * t9383 + t9626));
t10272 = t8958 * t9005;
t8959 = t9111 * t9479 + t9112 * t9452;
t10271 = t8959 * t9005;
t9113 = t9287 * t9388 + t9290 * t9379;
t9114 = -t9287 * t9379 + t9290 * t9388;
t9451 = ((pkin(3) * t10224 - pkin(6)) * t9386 + t9377 * t9138) * t10210 - (t9166 * t9386 + (t9232 - 0.2e1 * t10314) * t9378) * t9335 - (-t9232 + t10314) * t9378;
t9478 = t10181 * (pkin(1) + t9861) - (t9211 * t9378 + t9647) * t10205;
t8960 = -t9113 * t9451 + t9114 * t9478;
t9006 = 0.1e1 / (t9087 + t9358 * (t9090 * t9386 + t9625));
t10270 = t8960 * t9006;
t8961 = t9113 * t9478 + t9114 * t9451;
t10269 = t8961 * t9006;
t9930 = t9110 * t10209;
t8962 = -(t10190 * t9110 + t9109 * t9381) * t10316 + (pkin(3) * t9930 + (-pkin(2) * t9109 + t10179 * t9110) * t9381 - (t9110 * t10344 + t9109 * t9392) * t9372) * t9380 + pkin(2) * t9930;
t10268 = t8962 * t8999;
t9931 = t9109 * t10209;
t8963 = -(-t10190 * t9109 + t9110 * t9381) * t10316 + (-pkin(3) * t9931 + (-pkin(2) * t9110 - t10179 * t9109) * t9381 + (t9109 * t10344 - t9110 * t9392) * t9372) * t9380 - pkin(2) * t9931;
t10267 = t8963 * t8999;
t9928 = t9112 * t10207;
t8964 = -(t10188 * t9112 + t9111 * t9384) * t10315 + (pkin(3) * t9928 + (-pkin(2) * t9111 + t10179 * t9112) * t9384 - (t9112 * t10344 + t9111 * t9392) * t9375) * t9383 + pkin(2) * t9928;
t10266 = t8964 * t9000;
t9929 = t9111 * t10207;
t8965 = -(-t10188 * t9111 + t9112 * t9384) * t10315 + (-pkin(3) * t9929 + (-pkin(2) * t9112 - t10179 * t9111) * t9384 + (t9111 * t10344 - t9112 * t9392) * t9375) * t9383 - pkin(2) * t9929;
t10265 = t8965 * t9000;
t9926 = t9114 * t10205;
t8966 = -(t10186 * t9114 + t9113 * t9387) * t10314 + (pkin(3) * t9926 + (-pkin(2) * t9113 + t10179 * t9114) * t9387 - (t9114 * t10344 + t9113 * t9392) * t9378) * t9386 + pkin(2) * t9926;
t10264 = t8966 * t8998;
t9927 = t9113 * t10205;
t8967 = -(-t10186 * t9113 + t9114 * t9387) * t10314 + (-pkin(3) * t9927 + (-pkin(2) * t9114 - t10179 * t9113) * t9387 + (t9113 * t10344 - t9114 * t9392) * t9378) * t9386 - pkin(2) * t9927;
t10263 = t8967 * t8998;
t10082 = -0.2e1 * t10223;
t8968 = t9328 * t9381 + (-t9227 * t9903 - t9212 + (t10082 * t9344 + t9335) * t9392) * t9235 + ((t9335 * t10238 - t9465) * t9381 - t9227 * t9899) * t9372;
t10262 = t8968 * t9001;
t8969 = t9328 * t9384 + (-t9230 * t9902 - t9213 + (t10082 * t9348 + t9335) * t9392) * t9237 + ((t9335 * t10237 - t9464) * t9384 - t9230 * t9899) * t9375;
t10261 = t8969 * t9002;
t8970 = t9328 * t9387 + (-t9233 * t9901 - t9214 + (t10082 * t9352 + t9335) * t9392) * t9239 + ((t9335 * t10236 - t9463) * t9387 - t9233 * t9899) * t9378;
t10260 = t8970 * t9003;
t9759 = t10356 * t10208;
t10259 = ((-t9164 * t10210 + t10313) * t9380 + (-t9136 * t9335 + t9155 * t9381 - t9775) * t9371 + (-t10177 * t9667 + t9359 * t9759) * pkin(3)) * t8996;
t9758 = t10354 * t10206;
t10258 = ((-t9165 * t10210 + t10313) * t9383 + (-t9137 * t9335 + t9156 * t9384 - t9774) * t9374 + (-t10171 * t9666 + t9359 * t9758) * pkin(3)) * t8997;
t9757 = t10352 * t10204;
t10257 = ((-t9166 * t10210 + t10313) * t9386 + (-t9138 * t9335 + t9157 * t9387 - t9773) * t9377 + (-t10165 * t9665 + t9359 * t9757) * pkin(3)) * t8995;
t9042 = -t10204 * t10314 + (-pkin(3) * t10187 + t9166 * t9358) * t9386 - pkin(2) * t10187;
t10256 = t8998 * t9042;
t9040 = -t10208 * t10316 + (-pkin(3) * t10191 + t9164 * t9358) * t9380 - pkin(2) * t10191;
t10255 = t8999 * t9040;
t9041 = -t10206 * t10315 + (-pkin(3) * t10189 + t9165 * t9358) * t9383 - pkin(2) * t10189;
t10254 = t9000 * t9041;
t10219 = t9333 * t9412;
t10203 = t9358 * t9380;
t10201 = t9358 * t9383;
t10199 = t9358 * t9386;
t10194 = t9359 * t8581;
t10193 = t9359 * t8582;
t10192 = t9359 * t8583;
t10178 = t9371 * t9372;
t10172 = t9374 * t9375;
t10166 = t9377 * t9378;
t10150 = -t10447 * t9371 + t10458 * t9380;
t10149 = t10447 * t9380 + t10458 * t9371;
t10148 = -t10448 * t9374 + t10457 * t9383;
t10147 = t10448 * t9383 + t10457 * t9374;
t10146 = -t10449 * t9377 + t10456 * t9386;
t10145 = t10449 * t9386 + t10456 * t9377;
t10132 = t10120 * t8935 - 0.2e1 * t9602;
t8573 = t8590 + t8581;
t9612 = t9381 * t9762;
t8740 = t9612 + 0.2e1 * t9690;
t9961 = t9380 * t10283;
t9710 = t9372 * t9961;
t9973 = t9381 * t8941;
t10144 = 0.2e1 * t10177 * t8573 + t8593 * t9759 + ((t10376 * t9973 + 0.4e1 * t9582) * t9359 + 0.4e1 * t9602) * t9342 + t8740 * t9710 * t10373 + t10132;
t10131 = t10119 * t8936 - 0.2e1 * t9599;
t8575 = t8591 + t8582;
t9611 = t9384 * t9761;
t8741 = t9611 + 0.2e1 * t9689;
t9951 = t9383 * t10282;
t9702 = t9375 * t9951;
t9971 = t9384 * t8942;
t10143 = 0.2e1 * t10171 * t8575 + t8594 * t9758 + ((t10376 * t9971 + 0.4e1 * t9574) * t9359 + 0.4e1 * t9599) * t9346 + t8741 * t9702 * t10371 + t10131;
t10130 = t10118 * t8937 - 0.2e1 * t9596;
t8577 = t8592 + t8583;
t9610 = t9387 * t9760;
t8742 = t9610 + 0.2e1 * t9688;
t9940 = t9386 * t10281;
t9693 = t9378 * t9940;
t9969 = t9387 * t8943;
t10142 = 0.2e1 * t10165 * t8577 + t8595 * t9757 + ((t10376 * t9969 + 0.4e1 * t9566) * t9359 + 0.4e1 * t9596) * t9350 + t8742 * t9693 * t10369 + t10130;
t9925 = t9175 * t10210;
t8701 = 0.2e1 * t9175 * t9996 + (-t10313 + t9925) * t10283;
t10141 = -t9170 * t9380 * t10298 - t8701 * t9961 + (-t10331 * t10298 + t10452) * t9371;
t10140 = (-pkin(6) * t10160 + t9170 * t9371) * t10298 + t8701 * t9963 + t10452 * t9380;
t9924 = t9176 * t10210;
t8702 = 0.2e1 * t9176 * t9991 + (-t10313 + t9924) * t10282;
t10139 = (-pkin(6) * t10158 + t9172 * t9374) * t10296 + t8702 * t9953 + t10451 * t9383;
t10138 = -t9172 * t9383 * t10296 - t8702 * t9951 + (-t10329 * t10296 + t10451) * t9374;
t9923 = t9177 * t10210;
t8703 = 0.2e1 * t9177 * t9986 + (-t10313 + t9923) * t10281;
t10137 = -t9174 * t9386 * t10294 - t8703 * t9940 + (-t10327 * t10294 + t10450) * t9377;
t10136 = (-pkin(6) * t10156 + t9174 * t9377) * t10294 + t8703 * t9942 + t10450 * t9386;
t10117 = t8941 - t8872;
t10116 = t8942 - t8874;
t10115 = t8943 - t8876;
t10085 = -0.2e1 * t8873;
t10084 = -0.2e1 * t8875;
t10083 = -0.2e1 * t8877;
t10081 = -0.2e1 * t10210;
t10080 = -0.2e1 * t10177;
t10079 = -0.2e1 * t10171;
t10078 = -0.2e1 * t10165;
t10077 = t10357 * pkin(6);
t8773 = t8872 + t8914;
t10058 = t8773 * t10333;
t8774 = t8874 + t8916;
t10057 = t8774 * t10333;
t8775 = t8876 + t8918;
t10056 = t8775 * t10333;
t8566 = t8590 - t9756 / 0.2e1 + (-t10005 / 0.2e1 + t8620 * t9872) * t8999;
t10020 = t8566 * t10208;
t8567 = t8591 - t9755 / 0.2e1 + (-t10004 / 0.2e1 + t8621 * t9871) * t9000;
t10019 = t8567 * t10206;
t8568 = t8592 - t9754 / 0.2e1 + (-t10003 / 0.2e1 + t8622 * t9870) * t8998;
t10018 = t8568 * t10204;
t10017 = t8581 * t10202;
t10016 = t8582 * t10200;
t10015 = t8583 * t10198;
t10014 = t8593 * t10259;
t10013 = t8593 * t9004 * t9372;
t10012 = t9004 * t10297;
t10011 = t8594 * t10258;
t10010 = t8594 * t9005 * t9375;
t10009 = t9005 * t10295;
t10008 = t8595 * t10257;
t10007 = t8595 * t9006 * t9378;
t10006 = t9006 * t10293;
t9993 = t9380 * t8873;
t9988 = t9383 * t8875;
t9982 = t9386 * t8877;
t9912 = t9344 * t8941;
t9911 = t9348 * t8942;
t9910 = t9352 * t8943;
t9898 = t9358 * t10178;
t9897 = t9358 * t10176;
t9895 = t9358 * t10172;
t9894 = t9358 * t10170;
t9892 = t9358 * t10166;
t9891 = t9358 * t10164;
t9883 = t9371 * t10176;
t9879 = t9374 * t10170;
t9875 = t9377 * t10164;
t9840 = t8980 * t10141;
t9839 = t8980 * t10140;
t9838 = t8981 * t10139;
t9837 = t8981 * t10138;
t9836 = t8982 * t10137;
t9835 = t8982 * t10136;
t8505 = -t8580 * t9246 * t9359 + ((-pkin(6) * t8580 - t10320) * t9387 + t8583 * t10338) * t9358 + (-0.2e1 * t9923 + t10077) * t8595;
t8686 = (-pkin(7) * t8876 + t9596 * t10386 + t8901) * t9378 + pkin(1) * t8918;
t8697 = t8901 + (pkin(1) * t8775 + t9472) * t9378;
t8721 = t8838 - t8766;
t9729 = t9386 * t8919;
t9638 = pkin(2) * t9729;
t8751 = t9984 * t10385 + t9638;
t8769 = t8864 - t8907;
t8823 = t8913 + t9779;
t9502 = t9243 * t9566;
t9597 = t9378 * t9745;
t9607 = t8766 * t9694;
t9834 = t8998 * (-t10441 * t9377 - t8505 * t9386 + 0.2e1 * (t8751 * t9352 + (pkin(7) * t9729 + t9984 * t10388) * t10163 - t9638 + t9377 * t8766) * t9945 + ((t8769 * t9695 - t8823 * t9982) * t10435 + (t8770 + 0.2e1 * t9607) * t9386 + t8697 * t9377) * t9359 - 0.2e1 * t8751 * t9944 + (t9502 * t10363 + t9377 * t10056 + (t10199 * t10417 + 0.4e1 * t9377 * t9597) * pkin(2)) * t9387 + t8686 * t10199 + 0.2e1 * t8721 * t9942);
t9553 = t9731 / 0.2e1;
t9632 = pkin(2) * t9731;
t9764 = pkin(7) * t9982;
t9833 = t8998 * (t10441 * t9386 - t8505 * t9377 - 0.4e1 * ((t9764 - t9632 / 0.2e1) * t9352 - (pkin(2) * t9982 + pkin(7) * t9553) * t10163 + (t8910 / 0.2e1 - t8863 / 0.2e1) * t9386 + pkin(2) * t9553) * t9945 + ((-t8769 * t9358 * t9940 - t8823 * t9984) * t10435 - t8697 * t9386 + (-t9527 + t9607) * t10368) * t9359 + (-0.2e1 * t9632 + 0.4e1 * t9764) * t9944 + ((t9597 * t10389 - t10056) * t9386 + (t9502 + (t8876 / 0.2e1 - t8918 / 0.2e1) * t10345) * t10369) * t9387 - 0.2e1 * t8721 * t9940 + t8686 * t10205);
t8538 = t8595 * t9789 - t10192 + t8595;
t8667 = t9507 * t10374 + (t9610 - t9688) * t8877;
t9676 = t10198 * t8876;
t9744 = (t8931 + t8919) * t9985;
t9832 = t8998 * (t10018 * t10351 + t10078 * t8538 + (0.2e1 * t9676 + 0.4e1 * t9744) * t9350 + 0.4e1 * t8667 * t9875 - 0.2e1 * t9744 - t9676 - 0.2e1 * t10352 * t10461);
t8795 = t8937 + t8877 / 0.2e1;
t9682 = t9358 * t9875;
t9831 = t8998 * (t8538 * t9350 + 0.2e1 * t8568 * t9682 + t8577 * t9359 + (-t9744 - t9676 / 0.2e1 + t10461) * t10078 + (-t8667 * t9350 - t8795 * t9688) * t10438);
t9485 = t9566 * t10435;
t8706 = -t10417 * t9358 + t9485;
t8730 = t9358 * t9485 - t8918;
t9268 = t9352 - 0.1e1 / 0.2e1;
t9830 = t8998 * (-t9386 * t10015 + t8580 * (t9892 - t10181) + (t10081 * t9386 - t10166 * t10357) * t10293 + t8706 * t10164 + t8730 * t10187 + (t9335 * t9592 * t10363 + (t10359 * t9268 * t9377 + t10375 * t9885) * t8877) * t10281);
t9829 = t8998 * (-t9377 * t10015 - t8580 * (t9891 + t10187) + (t10164 * t10357 - 0.2e1 * t9905) * t10293 + t8706 * t10166 - t8730 * t10181 + (-((t10083 * t9352 + t8877) * t9386 + t9377 * t9592) * t9335 + t9359 * t9595 - 0.2e1 * t9268 * t9982) * t9841);
t8503 = -t8578 * t9244 * t9359 + ((-pkin(6) * t8578 - t10322) * t9381 + t8581 * t10342) * t9358 + (-0.2e1 * t9925 + t10077) * t8593;
t8687 = (-pkin(7) * t8872 + t9602 * t10386 + t8899) * t9372 + pkin(1) * t8914;
t8695 = t8899 + (pkin(1) * t8773 + t9474) * t9372;
t8719 = t8836 - t8764;
t9739 = t9380 * t8915;
t9642 = pkin(2) * t9739;
t8749 = t9995 * t10385 + t9642;
t8767 = t8853 - t8905;
t8821 = t8911 + t9781;
t9506 = t9241 * t9582;
t9603 = t9372 * t9753;
t9609 = t8764 * t9711;
t9828 = t8999 * (-t10443 * t9371 - t8503 * t9380 + 0.2e1 * (t8749 * t9344 + (pkin(7) * t9739 + t9995 * t10388) * t10175 - t9642 + t9371 * t8764) * t9966 + ((t8767 * t9712 - t8821 * t9993) * t10437 + (t8771 + 0.2e1 * t9609) * t9380 + t9371 * t8695) * t9359 - 0.2e1 * t8749 * t9965 + (t9506 * t10367 + t9371 * t10058 + (t10203 * t10419 + 0.4e1 * t9371 * t9603) * pkin(2)) * t9381 + t8687 * t10203 + 0.2e1 * t8719 * t9963);
t9555 = t9741 / 0.2e1;
t9634 = pkin(2) * t9741;
t9766 = pkin(7) * t9993;
t9827 = t8999 * (t10443 * t9380 - t8503 * t9371 - 0.4e1 * ((t9766 - t9634 / 0.2e1) * t9344 - (pkin(2) * t9993 + pkin(7) * t9555) * t10175 + (t8908 / 0.2e1 - t8852 / 0.2e1) * t9380 + pkin(2) * t9555) * t9966 + ((-t8767 * t9358 * t9961 - t8821 * t9995) * t10437 - t8695 * t9380 + (-t9529 + t9609) * t10372) * t9359 + (-0.2e1 * t9634 + 0.4e1 * t9766) * t9965 + ((t9603 * t10389 - t10058) * t9380 + (t9506 + (t8872 / 0.2e1 - t8914 / 0.2e1) * t10345) * t10373) * t9381 - 0.2e1 * t8719 * t9961 + t8687 * t10209);
t8536 = t8593 * t9791 - t10194 + t8593;
t8665 = t9509 * t10374 + (t9612 - t9690) * t8873;
t9678 = t10202 * t8872;
t9752 = (t8929 + t8915) * t9889;
t9826 = t8999 * (t10020 * t10355 + t10080 * t8536 + (0.2e1 * t9678 + 0.4e1 * t9752) * t9342 + 0.4e1 * t8665 * t9883 - 0.2e1 * t9752 - t9678 - 0.2e1 * t10356 * t10459);
t8793 = t8935 + t8873 / 0.2e1;
t9684 = t9358 * t9883;
t9825 = t8999 * (t8536 * t9342 + 0.2e1 * t8566 * t9684 + t8573 * t9359 + (-t9752 - t9678 / 0.2e1 + t10459) * t10080 + (-t8665 * t9342 - t8793 * t9690) * t10440);
t9484 = t9582 * t10437;
t8704 = -t10419 * t9358 + t9484;
t8728 = t9358 * t9484 - t8914;
t9266 = t9344 - 0.1e1 / 0.2e1;
t9824 = t8999 * (-t9380 * t10017 + t8578 * (t9898 - t10185) + (t10081 * t9380 - t10178 * t10357) * t10297 + t8704 * t10176 + t8728 * t10191 + (t9335 * t9594 * t10367 + (t10359 * t9266 * t9371 + t10375 * t9887) * t8873) * t10283);
t9823 = t8999 * (-t9371 * t10017 - t8578 * (t9897 + t10191) + (t10176 * t10357 - 0.2e1 * t9909) * t10297 + t8704 * t10178 - t8728 * t10185 + (-((t10085 * t9344 + t8873) * t9380 + t9371 * t9594) * t9335 + t9359 * t9601 - 0.2e1 * t9266 * t9993) * t9843);
t8504 = -t8579 * t9245 * t9359 + ((-pkin(6) * t8579 - t10321) * t9384 + t8582 * t10340) * t9358 + (-0.2e1 * t9924 + t10077) * t8594;
t8688 = (-pkin(7) * t8874 + t9599 * t10386 + t8900) * t9375 + pkin(1) * t8916;
t8696 = t8900 + (pkin(1) * t8774 + t9473) * t9375;
t8720 = t8837 - t8765;
t9734 = t9383 * t8917;
t9640 = pkin(2) * t9734;
t8750 = t9990 * t10385 + t9640;
t8768 = t8859 - t8906;
t8822 = t8912 + t9780;
t9504 = t9242 * t9574;
t9600 = t9375 * t9749;
t9608 = t8765 * t9703;
t9822 = t9000 * (-t10442 * t9374 - t8504 * t9383 + 0.2e1 * (t8750 * t9348 + (pkin(7) * t9734 + t9990 * t10388) * t10169 - t9640 + t9374 * t8765) * t9956 + ((t8768 * t9704 - t8822 * t9988) * t10436 + (t8772 + 0.2e1 * t9608) * t9383 + t9374 * t8696) * t9359 - 0.2e1 * t8750 * t9955 + (t9504 * t10365 + t9374 * t10057 + (t10201 * t10418 + 0.4e1 * t9374 * t9600) * pkin(2)) * t9384 + t8688 * t10201 + 0.2e1 * t8720 * t9953);
t9554 = t9736 / 0.2e1;
t9633 = pkin(2) * t9736;
t9765 = pkin(7) * t9988;
t9821 = t9000 * (t10442 * t9383 - t9374 * t8504 - 0.4e1 * ((t9765 - t9633 / 0.2e1) * t9348 - (pkin(2) * t9988 + pkin(7) * t9554) * t10169 + (t8909 / 0.2e1 - t8858 / 0.2e1) * t9383 + pkin(2) * t9554) * t9956 + ((-t8768 * t9358 * t9951 - t8822 * t9990) * t10436 - t8696 * t9383 + (-t9528 + t9608) * t10370) * t9359 + (-0.2e1 * t9633 + 0.4e1 * t9765) * t9955 + ((t9600 * t10389 - t10057) * t9383 + (t9504 + (t8874 / 0.2e1 - t8916 / 0.2e1) * t10345) * t10371) * t9384 - 0.2e1 * t8720 * t9951 + t8688 * t10207);
t8537 = t8594 * t9790 - t10193 + t8594;
t8666 = t9508 * t10374 + (t9611 - t9689) * t8875;
t9677 = t10200 * t8874;
t9748 = (t8930 + t8917) * t9888;
t9820 = t9000 * (t10019 * t10353 + t10079 * t8537 + (0.2e1 * t9677 + 0.4e1 * t9748) * t9346 + 0.4e1 * t8666 * t9879 - 0.2e1 * t9748 - t9677 - 0.2e1 * t10354 * t10460);
t8794 = t8936 + t8875 / 0.2e1;
t9683 = t9358 * t9879;
t9819 = t9000 * (t8537 * t9346 + 0.2e1 * t8567 * t9683 + t8575 * t9359 + (-t9748 - t9677 / 0.2e1 + t10460) * t10079 + (-t8666 * t9346 - t8794 * t9689) * t10439);
t9486 = t9574 * t10436;
t8705 = -t10418 * t9358 + t9486;
t8729 = t9358 * t9486 - t8916;
t9267 = t9348 - 0.1e1 / 0.2e1;
t9818 = t9000 * (-t9383 * t10016 + t8579 * (t9895 - t10183) + (t10081 * t9383 - t10172 * t10357) * t10295 + t8705 * t10170 + t8729 * t10189 + (t9335 * t9593 * t10365 + (t10359 * t9267 * t9374 + t10375 * t9886) * t8875) * t10282);
t9817 = t9000 * (-t9374 * t10016 - t8579 * (t9894 + t10189) + (t10170 * t10357 - 0.2e1 * t9907) * t10295 + t8705 * t10172 - t8729 * t10183 + (-((t10084 * t9348 + t8875) * t9383 + t9374 * t9593) * t9335 + t9359 * t9598 - 0.2e1 * t9267 * t9988) * t9842);
t9816 = t9004 * t10150;
t9815 = t9004 * t10149;
t9814 = t9004 * t10144;
t9813 = t9005 * t10148;
t9812 = t9005 * t10147;
t9811 = t9005 * t10143;
t9810 = t9006 * t10146;
t9809 = t9006 * t10145;
t9808 = t9006 * t10142;
t9804 = 0.2e1 * t9912;
t9803 = 0.2e1 * t9911;
t9802 = 0.2e1 * t9910;
t8551 = t8573 * t9371 + t8593 * t9897;
t9800 = t8551 * t9371 - t10132 * t10177 + (t8740 * t9342 - t9690) * t9962;
t8552 = t8575 * t9374 + t8594 * t9894;
t9799 = t8552 * t9374 - t10131 * t10171 + (t8741 * t9346 - t9689) * t9952;
t8553 = t8577 * t9377 + t8595 * t9891;
t9798 = t8553 * t9377 - t10130 * t10165 + (t8742 * t9350 - t9688) * t9941;
t8932 = -0.2e1 * t9912;
t8824 = -t8941 + t9804;
t9432 = t8824 * t9335 + t8728 + t8941;
t9797 = (t8932 + t9432) * t9371 + t10455 * t9380;
t9796 = (-t9432 + t9804) * t9380 + t10455 * t9371;
t8933 = -0.2e1 * t9911;
t8825 = -t8942 + t9803;
t9431 = t8825 * t9335 + t8729 + t8942;
t9795 = (t8933 + t9431) * t9374 + t10454 * t9383;
t9794 = (-t9431 + t9803) * t9383 + t10454 * t9374;
t8934 = -0.2e1 * t9910;
t8826 = -t8943 + t9802;
t9430 = t8826 * t9335 + t8730 + t8943;
t9793 = (t8934 + t9430) * t9377 + t10453 * t9386;
t9792 = (-t9430 + t9802) * t9386 + t10453 * t9377;
t9726 = t10259 * t8941;
t9725 = t9004 * t9974;
t9724 = t9004 * t9973;
t9723 = t10258 * t8942;
t9722 = t9005 * t9972;
t9721 = t9005 * t9971;
t9720 = t10257 * t8943;
t9719 = t9006 * t9970;
t9718 = t9006 * t9969;
t9717 = t8968 * t9968;
t9716 = t8980 * t9960;
t9709 = t8969 * t9958;
t9708 = t8981 * t9950;
t9701 = t8970 * t9948;
t9700 = t8982 * t9939;
t9624 = t9004 * t9800;
t9623 = t9004 * t9797;
t9622 = t9004 * t9796;
t9621 = t9005 * t9799;
t9620 = t9005 * t9795;
t9619 = t9005 * t9794;
t9618 = t9006 * t9798;
t9617 = t9006 * t9793;
t9616 = t9006 * t9792;
t9606 = t8813 * t9004 * t9962;
t9605 = t8815 * t9005 * t9952;
t9604 = t8817 * t9006 * t9941;
t9591 = t9372 * t9724;
t9589 = t9375 * t9721;
t9587 = t9378 * t9718;
t9585 = t8950 * t9716;
t9584 = t8953 * t9716;
t9583 = t9381 * t9717;
t9577 = t8951 * t9708;
t9576 = t8954 * t9708;
t9575 = t9384 * t9709;
t9569 = t8952 * t9700;
t9568 = t8955 * t9700;
t9567 = t9387 * t9701;
t9561 = t9372 * t9726;
t9560 = t9375 * t9723;
t9559 = t9378 * t9720;
t8571 = t10192 / 0.2e1 + t8595;
t8796 = t9985 / 0.2e1 + t10281;
t9519 = t8998 * (t10083 * (t10046 * t8795 + t8796 * t9315) + t10018 * t10387 + 0.2e1 * t8571 * t9321);
t9518 = t8998 * (t10083 * (-t10049 * t8795 + t8796 * t9321) - 0.2e1 * t10046 * t8568 - 0.2e1 * t8571 * t9315);
t8569 = t10194 / 0.2e1 + t8593;
t8791 = t9889 / 0.2e1 + t10283;
t9517 = t8999 * (t10085 * (t10048 * t8793 + t8791 * t9313) + t10020 * t10387 + 0.2e1 * t8569 * t9317);
t9516 = t8999 * (t10085 * (-t10051 * t8793 + t8791 * t9317) - 0.2e1 * t10048 * t8566 - 0.2e1 * t8569 * t9313);
t8570 = t10193 / 0.2e1 + t8594;
t8792 = t9888 / 0.2e1 + t10282;
t9515 = t9000 * (t10084 * (t10047 * t8794 + t8792 * t9314) + t10019 * t10387 + 0.2e1 * t8570 * t9319);
t9514 = t9000 * (t10084 * (-t10050 * t8794 + t8792 * t9319) - 0.2e1 * t10047 * t8567 - 0.2e1 * t8570 * t9314);
t9512 = t8980 * t9603;
t9511 = t8981 * t9600;
t9510 = t8982 * t9597;
t9495 = -t8593 * t9131 + (t9317 - t9775) * t8941;
t9494 = t8593 * (pkin(1) * t10184 - t10051) + t10410 * t8941;
t9493 = -t8594 * t9132 + (t9319 - t9774) * t8942;
t9492 = t8594 * (pkin(1) * t10182 - t10050) + t10409 * t8942;
t9491 = -t8595 * t9130 + (t9321 - t9773) * t8943;
t9490 = t8595 * (pkin(1) * t10180 - t10049) + t10408 * t8943;
t9471 = t9004 * t9495;
t9470 = t9004 * t9494;
t9469 = t9005 * t9493;
t9468 = t9005 * t9492;
t9467 = t9006 * t9491;
t9466 = t9006 * t9490;
t9462 = t8998 * (t9983 * t10382 + t10302);
t8576 = 0.2e1 * t8592 + t8583;
t8803 = 0.2e1 * t8937 + t8877;
t9461 = t8998 * (t8803 * t9387 * t8877 + t8576 * t9378);
t9460 = t8998 * (t8576 * t9387 - t8803 * t9983);
t9459 = t8999 * (t9994 * t10384 + t10304);
t8572 = 0.2e1 * t8590 + t8581;
t8797 = 0.2e1 * t8935 + t8873;
t9458 = t8999 * (t8797 * t9381 * t8873 + t8572 * t9372);
t9457 = t8999 * (t8572 * t9381 - t8797 * t9994);
t9456 = t9000 * (t9989 * t10383 + t10303);
t8574 = 0.2e1 * t8591 + t8582;
t8800 = 0.2e1 * t8936 + t8875;
t9455 = t9000 * (t8800 * t9384 * t8875 + t8574 * t9375);
t9454 = t9000 * (t8574 * t9384 - t8800 * t9989);
t9444 = t8998 * (t10163 * t10090 + 0.4e1 * t9268 * t9745);
t9443 = t8998 * (t8595 * t9378 ^ 2 + t10435 * t9597);
t9442 = t8999 * (t10175 * t10092 + 0.4e1 * t9266 * t9753);
t9441 = t8999 * (t8593 * t9372 ^ 2 + t10437 * t9603);
t9440 = t9000 * (t10169 * t10091 + 0.4e1 * t9267 * t9749);
t9439 = t9000 * (t8594 * t9375 ^ 2 + t10436 * t9600);
t8804 = t8937 + 0.2e1 * t8877;
t8801 = t8936 + 0.2e1 * t8875;
t8798 = t8935 + 0.2e1 * t8873;
t8736 = t8804 * t9377 + t9358 * t9693;
t8735 = t8801 * t9374 + t9358 * t9702;
t8734 = t8798 * t9371 + t9358 * t9710;
t8733 = t8804 * t9386 - t9565;
t8732 = t8801 * t9383 - t9573;
t8731 = t8798 * t9380 - t9581;
t8652 = (t8943 * t9789 + t10115 - 0.2e1 * t9556) * t10165 - t10352 * t8805 * t9694;
t8651 = (t8942 * t9790 + t10116 - 0.2e1 * t9557) * t10171 - t10354 * t8802 * t9703;
t8650 = (t8941 * t9791 + t10117 - 0.2e1 * t9558) * t10177 - t10356 * t8799 * t9711;
t8637 = (-0.2e1 * t8876 + t8934 + 0.2e1 * t8943) * t9350 + (-t10351 * t9985 + 0.4e1 * t8805 * t9682) * t10281 + (t10225 * t10352 + t9352) * t8943 - t10115;
t8636 = (-0.2e1 * t8874 + t8933 + 0.2e1 * t8942) * t9346 + (-t10353 * t9888 + 0.4e1 * t8802 * t9683) * t10282 + (t10227 * t10354 + t9348) * t8942 - t10116;
t8635 = (-0.2e1 * t8872 + t8932 + 0.2e1 * t8941) * t9342 + (-t10355 * t9889 + 0.4e1 * t8799 * t9684) * t10283 + (t10229 * t10356 + t9344) * t8941 - t10117;
t8550 = t8577 * t9386 - t8595 * t9892;
t8549 = t8575 * t9383 - t8594 * t9895;
t8548 = t8573 * t9380 - t8593 * t9898;
t1 = [(t10263 * t8595 + t10265 * t8594 + t10267 * t8593) * MDP(1) + (-t8956 * t9591 - t8958 * t9589 - t8960 * t9587 + t8963 * t9441 + t8965 * t9439 + t8967 * t9443) * t10311 + (-t10270 * t8826 - t10272 * t8825 - t10274 * t8824 + t8963 * t9442 + t8965 * t9440 + t8967 * t9444) * t10310 + (t8956 * t10013 + t8958 * t10010 + t8960 * t10007 + t8967 * t9461 + t8965 * t9455 + t8963 * t9458 + (-t8956 * t9724 - t8958 * t9721 - t8960 * t9718) * t9359) * t10309 + (t8956 * t10012 + t8958 * t10009 + t8960 * t10006 + t8967 * t9460 + t8965 * t9454 + t8963 * t9457 + (t8956 * t9725 + t8958 * t9722 + t8960 * t9719) * t9359) * t10308 + (t8573 * t10274 + t8575 * t10272 + t8577 * t10270 + (t10263 * t8577 + t10265 * t8575 + t10267 * t8573) * t9359) * MDP(8) + (t8956 * t9470 + t8958 * t9468 + t8960 * t9466 + t8963 * t9517 + t8965 * t9515 + t8967 * t9519) * MDP(9) + (t8956 * t9471 + t8958 * t9469 + t8960 * t9467 + t8963 * t9516 + t8965 * t9514 + t8967 * t9518) * MDP(10) + (t8967 * t9831 + t8965 * t9819 + t8963 * t9825 + t8960 * t9618 + t8958 * t9621 + t8956 * t9624 + (-t10278 * t8652 - t10279 * t8651 - t10280 * t8650) * t10195) * MDP(11) + (t8967 * t9832 + t8965 * t9820 + t8963 * t9826 + t8960 * t9808 + t8958 * t9811 + t8956 * t9814 + (-t10278 * t8637 - t10279 * t8636 - t10280 * t8635) * t10195) * MDP(12) + (t8967 * t9829 + t8965 * t9817 + t8963 * t9823 + t8960 * t9616 + t8958 * t9619 + t8956 * t9622 + ((-t10278 * t8553 - t10279 * t8552 - t10280 * t8551) * t9358 + (-t8731 * t9585 - t8732 * t9577 - t8733 * t9569) * t9333) * t9412) * MDP(13) + (t8967 * t9830 + t8965 * t9818 + t8963 * t9824 + t8960 * t9617 + t8958 * t9620 + t8956 * t9623 + ((-t10278 * t8550 - t10279 * t8549 - t10280 * t8548) * t9358 + (t8734 * t9585 + t8735 * t9577 + t8736 * t9569) * t9333) * t9412) * MDP(14) + ((-t8950 * t9512 - t8951 * t9511 - t8952 * t9510) * t10219 + (t8956 * t9606 + t8958 * t9605 + t8960 * t9604 + t8967 * t9462 + t8965 * t9456 + t8963 * t9459 + (t10278 * t8559 + t10279 * t8558 + t10280 * t8557) * t9412) * t9358) * MDP(15) + (t8967 * t9833 + t8965 * t9821 + t8963 * t9827 + t8960 * t9809 + t8958 * t9812 + t8956 * t9815 + (-t8950 * t9840 - t8951 * t9837 - t8952 * t9836) * t10195) * MDP(16) + (t8967 * t9834 + t8965 * t9822 + t8963 * t9828 + t8960 * t9810 + t8958 * t9813 + t8956 * t9816 + (-t8950 * t9839 - t8951 * t9838 - t8952 * t9835) * t10195) * MDP(17); (t10264 * t8595 + t10266 * t8594 + t10268 * t8593) * MDP(1) + (-t8957 * t9591 - t8959 * t9589 - t8961 * t9587 + t8962 * t9441 + t8964 * t9439 + t8966 * t9443) * t10311 + (-t10269 * t8826 - t10271 * t8825 - t10273 * t8824 + t8962 * t9442 + t8964 * t9440 + t8966 * t9444) * t10310 + (t8957 * t10013 + t8959 * t10010 + t8961 * t10007 + t8966 * t9461 + t8964 * t9455 + t8962 * t9458 + (-t8957 * t9724 - t8959 * t9721 - t8961 * t9718) * t9359) * t10309 + (t8957 * t10012 + t8959 * t10009 + t8961 * t10006 + t8966 * t9460 + t8964 * t9454 + t8962 * t9457 + (t8957 * t9725 + t8959 * t9722 + t8961 * t9719) * t9359) * t10308 + (t8573 * t10273 + t8575 * t10271 + t8577 * t10269 + (t10264 * t8577 + t10266 * t8575 + t10268 * t8573) * t9359) * MDP(8) + (t8957 * t9470 + t8959 * t9468 + t8961 * t9466 + t8962 * t9517 + t8964 * t9515 + t8966 * t9519) * MDP(9) + (t8957 * t9471 + t8959 * t9469 + t8961 * t9467 + t8962 * t9516 + t8964 * t9514 + t8966 * t9518) * MDP(10) + (t8966 * t9831 + t8964 * t9819 + t8962 * t9825 + t8961 * t9618 + t8959 * t9621 + t8957 * t9624 + (-t10275 * t8652 - t10276 * t8651 - t10277 * t8650) * t10195) * MDP(11) + (t8966 * t9832 + t8964 * t9820 + t8962 * t9826 + t8961 * t9808 + t8959 * t9811 + t8957 * t9814 + (-t10275 * t8637 - t10276 * t8636 - t10277 * t8635) * t10195) * MDP(12) + (t8966 * t9829 + t8964 * t9817 + t8962 * t9823 + t8961 * t9616 + t8959 * t9619 + t8957 * t9622 + ((-t10275 * t8553 - t10276 * t8552 - t10277 * t8551) * t9358 + (-t8731 * t9584 - t8732 * t9576 - t8733 * t9568) * t9333) * t9412) * MDP(13) + (t8966 * t9830 + t8964 * t9818 + t8962 * t9824 + t8961 * t9617 + t8959 * t9620 + t8957 * t9623 + ((-t10275 * t8550 - t10276 * t8549 - t10277 * t8548) * t9358 + (t8734 * t9584 + t8735 * t9576 + t8736 * t9568) * t9333) * t9412) * MDP(14) + ((-t8953 * t9512 - t8954 * t9511 - t8955 * t9510) * t10219 + (t8957 * t9606 + t8959 * t9605 + t8961 * t9604 + t8966 * t9462 + t8964 * t9456 + t8962 * t9459 + (t10275 * t8559 + t10276 * t8558 + t10277 * t8557) * t9412) * t9358) * MDP(15) + (t8966 * t9833 + t8964 * t9821 + t8962 * t9827 + t8961 * t9809 + t8959 * t9812 + t8957 * t9815 + (-t8953 * t9840 - t8954 * t9837 - t8955 * t9836) * t10195) * MDP(16) + (t8966 * t9834 + t8964 * t9822 + t8962 * t9828 + t8961 * t9810 + t8959 * t9813 + t8957 * t9816 + (-t8953 * t9839 - t8954 * t9838 - t8955 * t9835) * t10195) * MDP(17); (t10254 * t8594 + t10255 * t8593 + t10256 * t8595) * MDP(1) + (t9040 * t9441 + t9041 * t9439 + t9042 * t9443 - t9381 * t9561 - t9384 * t9560 - t9387 * t9559) * t10311 + (-t10257 * t8826 - t10258 * t8825 - t10259 * t8824 + t9040 * t9442 + t9041 * t9440 + t9042 * t9444) * t10310 + (t9372 * t10014 + t9375 * t10011 + t9378 * t10008 + t9041 * t9455 + t9040 * t9458 + t9042 * t9461 + (-t9381 * t9726 - t9384 * t9723 - t9387 * t9720) * t9359) * t10309 + (t9381 * t10014 + t9384 * t10011 + t9387 * t10008 + t9041 * t9454 + t9040 * t9457 + t9042 * t9460 + (t9559 + t9560 + t9561) * t9359) * t10308 + (t8573 * t10259 + t8575 * t10258 + t8577 * t10257 + (t10254 * t8575 + t10255 * t8573 + t10256 * t8577) * t9359) * MDP(8) + (t10257 * t9490 + t10258 * t9492 + t10259 * t9494 + t9040 * t9517 + t9041 * t9515 + t9042 * t9519) * MDP(9) + (t10257 * t9491 + t10258 * t9493 + t10259 * t9495 + t9040 * t9516 + t9041 * t9514 + t9042 * t9518) * MDP(10) + (t9041 * t9819 + t9040 * t9825 + t9042 * t9831 + t9798 * t10257 + t9799 * t10258 + t9800 * t10259 + (t10260 * t8652 + t10261 * t8651 + t10262 * t8650) * t9412) * MDP(11) + (t9041 * t9820 + t9040 * t9826 + t9042 * t9832 + t10142 * t10257 + t10143 * t10258 + t10144 * t10259 + (t10260 * t8637 + t10261 * t8636 + t10262 * t8635) * t9412) * MDP(12) + (t9041 * t9817 + t9040 * t9823 + t9042 * t9829 + t9792 * t10257 + t9794 * t10258 + t9796 * t10259 + (t8551 * t10262 + t8552 * t10261 + t8553 * t10260 + (t8731 * t9583 + t8732 * t9575 + t8733 * t9567) * t9358) * t9412) * MDP(13) + (t9041 * t9818 + t9040 * t9824 + t9042 * t9830 + t9793 * t10257 + t9795 * t10258 + t9797 * t10259 + (t8548 * t10262 + t8549 * t10261 + t8550 * t10260 + (-t8734 * t9583 - t8735 * t9575 - t8736 * t9567) * t9358) * t9412) * MDP(14) + ((-t10260 * t8559 - t10261 * t8558 - t10262 * t8557) * t9412 + (t10255 * t10304 + t10254 * t10303 + t10256 * t10302 + (t8817 * t10257 * t10281 + (t10256 * t10382 + t9412 * t9701) * t8877) * t9378 + (t8815 * t10258 * t10282 + (t10254 * t10383 + t9412 * t9709) * t8875) * t9375 + (t8813 * t10259 * t10283 + (t10255 * t10384 + t9412 * t9717) * t8873) * t9372) * t9358) * MDP(15) + (t9041 * t9821 + t9040 * t9827 + t9042 * t9833 + t10145 * t10257 + t10147 * t10258 + t10149 * t10259 + (t10137 * t10260 + t10138 * t10261 + t10141 * t10262) * t9412) * MDP(16) + (t9041 * t9822 + t9040 * t9828 + t9042 * t9834 + t10146 * t10257 + t10148 * t10258 + t10150 * t10259 + (t10136 * t10260 + t10139 * t10261 + t10140 * t10262) * t9412) * MDP(17);];
taucX  = t1;
