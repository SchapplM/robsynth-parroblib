% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V2G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 00:06:44
% EndTime: 2020-08-07 00:19:20
% DurationCPUTime: 798.32s
% Computational Cost: add. (10292391->2551), mult. (18485196->4006), div. (138690->44), fcn. (14227260->26), ass. (0->1524)
t3896 = cos(pkin(4));
t3872 = t3896 ^ 2;
t4894 = t3872 - 0.1e1;
t3909 = sin(qJ(2,3));
t3949 = 0.1e1 / pkin(3);
t3929 = (pkin(8) + pkin(7));
t3930 = 2 * t3929;
t4713 = t3909 * t3930;
t3742 = pkin(1) + t4713;
t3850 = pkin(1) * t3909;
t3781 = t3850 + pkin(7);
t3749 = pkin(8) + t3781;
t3926 = xDP(3);
t4694 = t3926 * t3929;
t3755 = pkin(1) * t4694;
t3917 = cos(qJ(3,3));
t3834 = t3917 * pkin(3);
t3772 = t3834 + pkin(2);
t3918 = cos(qJ(2,3));
t3881 = t3918 ^ 2;
t3910 = sin(qJ(1,3));
t3919 = cos(qJ(1,3));
t3927 = xDP(2);
t3928 = xDP(1);
t3683 = t3910 * t3928 - t3919 * t3927;
t3686 = t3910 * t3927 + t3919 * t3928;
t3905 = legFrame(3,3);
t3822 = sin(t3905);
t3825 = cos(t3905);
t3601 = t3683 * t3825 + t3686 * t3822;
t3908 = sin(qJ(3,3));
t3830 = t3908 * pkin(3);
t3764 = t3830 + pkin(6);
t3762 = t3926 * t3896;
t3895 = sin(pkin(4));
t4440 = t3895 * t3762;
t3966 = t3764 * (t3601 * t3872 - t3601 - t4440);
t4341 = t4894 * t3926;
t4750 = t3895 * t3896;
t4477 = t3601 * t4750;
t4014 = t4341 + t4477;
t4763 = (t3896 + 0.1e1) * (t3896 - 0.1e1);
t4456 = t3926 * t4763;
t3604 = -t3683 * t3822 + t3686 * t3825;
t3586 = t3918 * t3604;
t4474 = t3895 * t3586;
t4714 = t3909 * t3926;
t4715 = t3909 * t3918;
t3873 = pkin(2) + t3929;
t3874 = pkin(2) - t3929;
t4778 = (t3834 + t3873) * (t3834 + t3874);
t4784 = t3604 * t3895;
t3460 = t3755 * t3918 + (-t3881 * t4784 + t4014 * t4715) * t4778 + (-pkin(1) * t4714 - t3742 * t4474 + t3918 * t3966) * t3772 + (-t3749 * t4784 + t3909 * t3966 + (0.2e1 * (-t4456 - t4477) * t3881 + t4014) * t3772) * t3929;
t4865 = pkin(6) * t3917;
t4879 = pkin(2) * t3908;
t3715 = t4865 - t4879;
t4719 = t3896 * t3929;
t3745 = pkin(1) * t4719;
t4716 = t3909 * t3917;
t4427 = t3896 * t4716;
t4772 = t3772 * t3895;
t4886 = pkin(1) * t3772;
t4026 = -t4427 * t4886 + (-t3715 * t4772 + t3745 * t3917) * t3918;
t4693 = t3929 * t3909;
t3562 = (-t3715 * t4693 + t3908 * t4886) * t3895 + t4026;
t4826 = t3460 / t3562;
t3452 = t3949 * t4826;
t3445 = pkin(6) * t3452;
t3589 = t3601 * pkin(6);
t3836 = t3918 * pkin(2);
t3698 = t3836 + t4693;
t3692 = pkin(1) + t3698;
t3796 = t3929 * t3918;
t4878 = pkin(2) * t3909;
t3701 = t3796 - t4878;
t3817 = t3881 - 0.2e1;
t3849 = pkin(2) * t3926;
t3879 = t3917 ^ 2;
t4762 = (t3918 + 0.1e1) * (t3918 - 0.1e1);
t4967 = t3836 + pkin(1);
t4189 = t3909 * t4967 - t3929 * t4762;
t4436 = t3895 * t4714;
t4787 = t3601 * t3909;
t4579 = pkin(3) * t4787;
t3845 = t3926 * pkin(6);
t4654 = t3601 * t3796 + t3845;
t4699 = t3917 * t3926;
t4749 = t3895 * t3908;
t4755 = t3881 * t3926;
t4768 = t3817 * t3908;
t4793 = (t3796 * t3926 - t3589) * t3909;
t4870 = pkin(3) * t3879;
t4892 = 0.2e1 * t3879 - 0.1e1;
t3418 = ((-pkin(2) * t4755 + t3849 - t4793) * t3908 + (-pkin(2) * t4787 + t4654) * t3917 + (-t4699 * t4768 - t4787 * t4892) * pkin(3)) * t3872 + (-(t4654 * t3909 + (pkin(2) * t4762 + t3817 * t3834) * t3601) * t4749 + (t3586 + 0.2e1 * t4436) * t4870 + ((-t3701 * t3926 + t3589) * t3895 + t3692 * t3604) * t3917 - pkin(3) * t4436) * t3896 + (-(t3909 * t4474 + t3926 - t4755) * t3834 - t4189 * t4784 + t4793 + t3926 * t3918 * t4967) * t3908 + t3879 * t4579 - pkin(6) * t4699 - t4579;
t4725 = t3896 * t3917;
t3622 = pkin(1) * (-t3772 * t3909 + t3796) * t4725;
t4700 = t3917 * t3918;
t3746 = pkin(3) * t4700;
t4403 = t3746 + t3698;
t3553 = t3622 + t3895 * ((pkin(2) * t3692 + t3834 * t4967) * t3908 - t4403 * t4865);
t3410 = t3418 / t3553;
t4532 = t3929 * t3410;
t4669 = -t4532 + t3445;
t5003 = t3909 * t4669;
t3912 = sin(qJ(2,2));
t4707 = t3912 * t3930;
t3743 = pkin(1) + t4707;
t3851 = pkin(1) * t3912;
t3782 = t3851 + pkin(7);
t3750 = pkin(8) + t3782;
t3920 = cos(qJ(3,2));
t3838 = t3920 * pkin(3);
t3774 = t3838 + pkin(2);
t3921 = cos(qJ(2,2));
t3885 = t3921 ^ 2;
t3913 = sin(qJ(1,2));
t3922 = cos(qJ(1,2));
t3684 = t3913 * t3928 - t3922 * t3927;
t3687 = t3913 * t3927 + t3922 * t3928;
t3906 = legFrame(2,3);
t3823 = sin(t3906);
t3826 = cos(t3906);
t3602 = t3684 * t3826 + t3687 * t3823;
t3911 = sin(qJ(3,2));
t3831 = t3911 * pkin(3);
t3767 = t3831 + pkin(6);
t3965 = t3767 * (t3602 * t3872 - t3602 - t4440);
t4476 = t3602 * t4750;
t4013 = t4341 + t4476;
t3605 = -t3684 * t3823 + t3687 * t3826;
t3587 = t3921 * t3605;
t4473 = t3895 * t3587;
t4708 = t3912 * t3926;
t4709 = t3912 * t3921;
t4777 = (t3838 + t3873) * (t3838 + t3874);
t4783 = t3605 * t3895;
t3461 = t3755 * t3921 + (-t3885 * t4783 + t4013 * t4709) * t4777 + (-pkin(1) * t4708 - t3743 * t4473 + t3921 * t3965) * t3774 + (-t3750 * t4783 + t3912 * t3965 + (0.2e1 * (-t4456 - t4476) * t3885 + t4013) * t3774) * t3929;
t4863 = pkin(6) * t3920;
t4877 = pkin(2) * t3911;
t3716 = t4863 - t4877;
t4710 = t3912 * t3920;
t4426 = t3896 * t4710;
t4771 = t3774 * t3895;
t4885 = pkin(1) * t3774;
t4025 = -t4426 * t4885 + (-t3716 * t4771 + t3745 * t3920) * t3921;
t4692 = t3929 * t3912;
t3563 = (-t3716 * t4692 + t3911 * t4885) * t3895 + t4025;
t4825 = t3461 / t3563;
t3454 = t3949 * t4825;
t3446 = pkin(6) * t3454;
t3590 = t3602 * pkin(6);
t3840 = t3921 * pkin(2);
t3699 = t3840 + t4692;
t3693 = pkin(1) + t3699;
t3797 = t3929 * t3921;
t4876 = pkin(2) * t3912;
t3702 = t3797 - t4876;
t3818 = t3885 - 0.2e1;
t3883 = t3920 ^ 2;
t4761 = (t3921 + 0.1e1) * (t3921 - 0.1e1);
t4966 = t3840 + pkin(1);
t4188 = t3912 * t4966 - t3929 * t4761;
t4433 = t3895 * t4708;
t4786 = t3602 * t3912;
t4578 = pkin(3) * t4786;
t4653 = t3602 * t3797 + t3845;
t4697 = t3920 * t3926;
t4747 = t3895 * t3911;
t4753 = t3885 * t3926;
t4766 = t3818 * t3911;
t4792 = (t3797 * t3926 - t3590) * t3912;
t4869 = pkin(3) * t3883;
t4890 = 0.2e1 * t3883 - 0.1e1;
t3419 = ((-pkin(2) * t4753 + t3849 - t4792) * t3911 + (-pkin(2) * t4786 + t4653) * t3920 + (-t4697 * t4766 - t4786 * t4890) * pkin(3)) * t3872 + (-(t4653 * t3912 + (pkin(2) * t4761 + t3818 * t3838) * t3602) * t4747 + (t3587 + 0.2e1 * t4433) * t4869 + ((-t3702 * t3926 + t3590) * t3895 + t3693 * t3605) * t3920 - pkin(3) * t4433) * t3896 + (-(t3912 * t4473 + t3926 - t4753) * t3838 - t4188 * t4783 + t4792 + t3926 * t3921 * t4966) * t3911 + t3883 * t4578 - pkin(6) * t4697 - t4578;
t4723 = t3896 * t3920;
t3623 = pkin(1) * (-t3774 * t3912 + t3797) * t4723;
t4698 = t3920 * t3921;
t3747 = pkin(3) * t4698;
t4402 = t3747 + t3699;
t3554 = t3623 + ((pkin(2) * t3693 + t3838 * t4966) * t3911 - t4402 * t4863) * t3895;
t3412 = t3419 / t3554;
t4527 = t3929 * t3412;
t4668 = -t4527 + t3446;
t5002 = t3912 * t4668;
t3915 = sin(qJ(2,1));
t4701 = t3915 * t3930;
t3744 = pkin(1) + t4701;
t3852 = pkin(1) * t3915;
t3783 = t3852 + pkin(7);
t3751 = pkin(8) + t3783;
t3923 = cos(qJ(3,1));
t3842 = t3923 * pkin(3);
t3776 = t3842 + pkin(2);
t3924 = cos(qJ(2,1));
t3889 = t3924 ^ 2;
t3916 = sin(qJ(1,1));
t3925 = cos(qJ(1,1));
t3685 = t3916 * t3928 - t3925 * t3927;
t3688 = t3916 * t3927 + t3925 * t3928;
t3907 = legFrame(1,3);
t3824 = sin(t3907);
t3827 = cos(t3907);
t3603 = t3685 * t3827 + t3688 * t3824;
t3914 = sin(qJ(3,1));
t3832 = t3914 * pkin(3);
t3770 = t3832 + pkin(6);
t3964 = t3770 * (t3603 * t3872 - t3603 - t4440);
t4475 = t3603 * t4750;
t4012 = t4341 + t4475;
t3606 = -t3685 * t3824 + t3688 * t3827;
t3588 = t3924 * t3606;
t4472 = t3895 * t3588;
t4702 = t3915 * t3926;
t4703 = t3915 * t3924;
t4776 = (t3842 + t3873) * (t3842 + t3874);
t4782 = t3606 * t3895;
t3462 = t3755 * t3924 + (-t3889 * t4782 + t4012 * t4703) * t4776 + (-pkin(1) * t4702 - t3744 * t4472 + t3924 * t3964) * t3776 + (-t3751 * t4782 + t3915 * t3964 + (0.2e1 * (-t4456 - t4475) * t3889 + t4012) * t3776) * t3929;
t4861 = pkin(6) * t3923;
t4875 = pkin(2) * t3914;
t3717 = t4861 - t4875;
t4704 = t3915 * t3923;
t4425 = t3896 * t4704;
t4770 = t3776 * t3895;
t4884 = pkin(1) * t3776;
t4024 = -t4425 * t4884 + (-t3717 * t4770 + t3745 * t3923) * t3924;
t4691 = t3929 * t3915;
t3564 = (-t3717 * t4691 + t3914 * t4884) * t3895 + t4024;
t4824 = t3462 / t3564;
t3456 = t3949 * t4824;
t3447 = pkin(6) * t3456;
t3591 = t3603 * pkin(6);
t3844 = t3924 * pkin(2);
t3700 = t3844 + t4691;
t3694 = pkin(1) + t3700;
t3798 = t3929 * t3924;
t4874 = pkin(2) * t3915;
t3703 = t3798 - t4874;
t3819 = t3889 - 0.2e1;
t3887 = t3923 ^ 2;
t4760 = (t3924 + 0.1e1) * (t3924 - 0.1e1);
t4965 = t3844 + pkin(1);
t4187 = t3915 * t4965 - t3929 * t4760;
t4430 = t3895 * t4702;
t4785 = t3603 * t3915;
t4577 = pkin(3) * t4785;
t4652 = t3603 * t3798 + t3845;
t4695 = t3923 * t3926;
t4745 = t3895 * t3914;
t4751 = t3889 * t3926;
t4764 = t3819 * t3914;
t4791 = (t3798 * t3926 - t3591) * t3915;
t4868 = pkin(3) * t3887;
t4888 = 0.2e1 * t3887 - 0.1e1;
t3420 = ((-pkin(2) * t4751 + t3849 - t4791) * t3914 + (-pkin(2) * t4785 + t4652) * t3923 + (-t4695 * t4764 - t4785 * t4888) * pkin(3)) * t3872 + (-(t4652 * t3915 + (pkin(2) * t4760 + t3819 * t3842) * t3603) * t4745 + (t3588 + 0.2e1 * t4430) * t4868 + ((-t3703 * t3926 + t3591) * t3895 + t3694 * t3606) * t3923 - pkin(3) * t4430) * t3896 + (-(t3915 * t4472 + t3926 - t4751) * t3842 - t4187 * t4782 + t4791 + t3926 * t3924 * t4965) * t3914 + t3887 * t4577 - pkin(6) * t4695 - t4577;
t4721 = t3896 * t3923;
t3624 = pkin(1) * (-t3776 * t3915 + t3798) * t4721;
t4696 = t3923 * t3924;
t3748 = pkin(3) * t4696;
t4401 = t3748 + t3700;
t3555 = t3624 + ((pkin(2) * t3694 + t3842 * t4965) * t3914 - t4401 * t4861) * t3895;
t3414 = t3420 / t3555;
t4521 = t3929 * t3414;
t4667 = -t4521 + t3447;
t5001 = t3915 * t4667;
t3944 = pkin(8) ^ 2;
t3945 = pkin(7) ^ 2;
t4644 = t3944 + t3945;
t4897 = pkin(8) * pkin(7);
t4943 = 0.2e1 * t4897 + t4644;
t4973 = 0.2e1 * t3918;
t4972 = 0.2e1 * t3921;
t4971 = 0.2e1 * t3924;
t3726 = t3895 * t4694;
t4737 = t3895 * t3926;
t4087 = t3601 * t3896 - t4737;
t4790 = (t3601 * t3895 + t3762) * t3908;
t3484 = -(-t3909 * t4087 + t3586) * t4870 + ((-pkin(2) * t3604 - t3601 * t4719 + t3726) * t3918 + (pkin(2) * t4087 - t3604 * t3929) * t3909 - pkin(3) * t4790) * t3917 - pkin(2) * t4790;
t3765 = t3830 - pkin(6);
t4881 = pkin(2) * t3895;
t3640 = t3765 * t4881 + t3745;
t3652 = t3692 * t4879;
t4742 = t3895 * t3918;
t4588 = pkin(6) * t4742;
t4730 = t3896 * t3909;
t4613 = pkin(1) * t4730;
t3668 = t4588 + t4613;
t4201 = t3895 * t3652 - t3668 * t4870;
t4880 = pkin(2) * t3896;
t3807 = pkin(1) * t4880;
t4736 = t3895 * t3929;
t3679 = -pkin(6) * t4736 - t3807;
t4616 = pkin(1) * t4749;
t4651 = pkin(3) * t4616 + t3679 * t3909;
t3527 = (t3640 * t3918 + t4651) * t3917 + t4201;
t4823 = t3484 / t3527;
t4502 = t3909 * t4823;
t4248 = t3895 * t4502;
t5000 = t3764 * t4248;
t4086 = t3602 * t3896 - t4737;
t4789 = (t3602 * t3895 + t3762) * t3911;
t3485 = -(-t3912 * t4086 + t3587) * t4869 + ((-pkin(2) * t3605 - t3602 * t4719 + t3726) * t3921 + (pkin(2) * t4086 - t3605 * t3929) * t3912 - pkin(3) * t4789) * t3920 - pkin(2) * t4789;
t3768 = t3831 - pkin(6);
t3641 = t3768 * t4881 + t3745;
t3653 = t3693 * t4877;
t4740 = t3895 * t3921;
t4587 = pkin(6) * t4740;
t4728 = t3896 * t3912;
t4612 = pkin(1) * t4728;
t3669 = t4587 + t4612;
t4200 = t3895 * t3653 - t3669 * t4869;
t4615 = pkin(1) * t4747;
t4650 = pkin(3) * t4615 + t3679 * t3912;
t3528 = (t3641 * t3921 + t4650) * t3920 + t4200;
t4822 = t3485 / t3528;
t4492 = t3912 * t4822;
t4240 = t3895 * t4492;
t4999 = t3767 * t4240;
t4085 = t3603 * t3896 - t4737;
t4788 = (t3603 * t3895 + t3762) * t3914;
t3486 = -(-t3915 * t4085 + t3588) * t4868 + ((-pkin(2) * t3606 - t3603 * t4719 + t3726) * t3924 + (pkin(2) * t4085 - t3606 * t3929) * t3915 - pkin(3) * t4788) * t3923 - pkin(2) * t4788;
t3771 = t3832 - pkin(6);
t3642 = t3771 * t4881 + t3745;
t3654 = t3694 * t4875;
t4738 = t3895 * t3924;
t4586 = pkin(6) * t4738;
t4726 = t3896 * t3915;
t4611 = pkin(1) * t4726;
t3667 = t4586 + t4611;
t4199 = t3895 * t3654 - t3667 * t4868;
t4614 = pkin(1) * t4745;
t4649 = pkin(3) * t4614 + t3679 * t3915;
t3526 = (t3642 * t3924 + t4649) * t3923 + t4199;
t4821 = t3486 / t3526;
t4481 = t3915 * t4821;
t4231 = t3895 * t4481;
t4998 = t3770 * t4231;
t4109 = t3456 * t4821;
t4765 = t3819 * t3872;
t4329 = -t3889 + t4765;
t4205 = t4329 + 0.1e1;
t4997 = t4205 * t4109;
t4117 = t3454 * t4822;
t4767 = t3818 * t3872;
t4330 = -t3885 + t4767;
t4206 = t4330 + 0.1e1;
t4996 = t4206 * t4117;
t4125 = t3452 * t4823;
t4769 = t3817 * t3872;
t4331 = -t3881 + t4769;
t4207 = t4331 + 0.1e1;
t4995 = t4207 * t4125;
t3289 = t3908 * t4532 - t4826;
t3407 = pkin(1) * t3410;
t3739 = t4693 + pkin(1);
t3763 = pkin(6) * t3908 + pkin(3);
t3853 = pkin(1) * t3881;
t3854 = pkin(1) * t3918;
t3935 = -pkin(7) / 0.2e1;
t3868 = t3935 - pkin(8) / 0.2e1;
t3943 = -0.2e1 * pkin(1);
t4570 = pkin(2) * t4715;
t4060 = t3881 * t3929 - t4570;
t4534 = t3909 * t3410;
t4290 = t3908 * t4534;
t4424 = t3908 * t4826;
t4724 = t3896 * t3918;
t4443 = t3895 * t4724;
t4592 = pkin(6) * t4763;
t4717 = t3908 * t3917;
t4908 = 0.2e1 * t3908;
t3157 = ((pkin(1) * t4290 + t3289) * t3917 - (t3854 + pkin(2)) * t3452) * t3896 + ((t4424 + t4669) * t3909 - t3407 + (t3692 * t3879 + (pkin(6) * t4717 - pkin(2)) * t3918) * t3410) * t3895 + ((-(-t3836 + t3853 + t3943 - t4713) * t4750 - t4592 * t4715) * t3879 + (t3763 * t4443 + (t3868 * t3881 + t4570 / 0.2e1 + t3749) * t3872 * t4908 - (-t4060 + t3749) * t3908) * t3917 + (t3853 - t3739) * t4750 + t4894 * t3764 * t4715) * t4823;
t3689 = pkin(1) * t3830 - pkin(6) * t4693;
t3628 = t3765 * t3836 + t3689;
t4882 = pkin(1) * t3896;
t3655 = t3701 * t4882;
t3536 = 0.1e1 / ((t3628 * t3895 + t3655) * t3917 + t4201);
t3376 = pkin(6) * t4532;
t3298 = pkin(3) * t4826 - t3376;
t3439 = pkin(8) * t3452;
t3442 = pkin(7) * t3452;
t3316 = t3442 + t3439;
t3373 = pkin(1) * t4534;
t3390 = pkin(6) * t3410;
t3385 = pkin(2) * t3390;
t3948 = pkin(3) ^ 2;
t3391 = t3948 * t3410;
t3393 = pkin(2) * t3410;
t4281 = t3895 * t3452;
t3421 = pkin(1) * t4281;
t3448 = pkin(1) * t3452;
t3835 = t3881 * pkin(2);
t4422 = t3909 * t3796;
t4186 = t3835 + t4422;
t3673 = -pkin(2) + t4186;
t3946 = pkin(6) ^ 2;
t4643 = pkin(1) ^ 2 + t3946;
t4089 = t4943 + t4643;
t3696 = 0.3e1 * t3948 + t4089;
t3697 = t3948 + t4089;
t3951 = pkin(2) ^ 2;
t4642 = t3951 - t3948;
t3802 = -t3946 + t4642;
t3808 = pkin(6) * t3830;
t3880 = t3918 * t3881;
t3941 = 0.3e1 * pkin(2);
t4499 = t3929 * t4823;
t4227 = t3895 * t4499;
t4078 = 0.2e1 * t3880 * t4227;
t4198 = -0.2e1 * t4248;
t3987 = pkin(3) * (pkin(6) * t4198 + t3393) + t4078 * t4879;
t4277 = t3918 * t3452;
t4134 = t3909 * t4277;
t4635 = pkin(6) * t4870;
t4167 = -t3918 * t4635 + t3652;
t4177 = pkin(2) * t4227;
t4183 = pkin(2) * t4277;
t3392 = t3951 * t3410;
t3894 = t3929 ^ 2;
t4192 = t3410 * t3894 + t3392;
t4504 = t3895 * t4823;
t4321 = pkin(2) * t4504;
t4204 = 0.2e1 * t4321;
t4279 = t3909 * t3452;
t4406 = t3390 + t3316;
t4211 = pkin(1) * t4279 + t4406;
t4291 = t3895 * t4534;
t4309 = pkin(2) * t4422;
t4536 = t3895 * t3410;
t4324 = pkin(2) * t4536;
t4328 = pkin(1) * t4532;
t4347 = 0.2e1 * t4499;
t4383 = 0.2e1 * t4823;
t4595 = pkin(6) * t4823;
t4386 = pkin(2) * t4595;
t4582 = pkin(3) * t3410;
t4389 = pkin(2) * t4582;
t4391 = pkin(1) * t3393;
t4397 = t3946 / 0.3e1 - t3951 / 0.3e1 + t3948;
t4505 = t3881 * t4823;
t4575 = pkin(3) * t5003;
t3865 = pkin(1) * t3929;
t4641 = -0.2e1 * t3865;
t4757 = t3873 * t3874;
t3725 = -t4757 / 0.2e1;
t4647 = t3725 + t3948;
t4648 = t4757 / 0.3e1 - 0.2e1 / 0.3e1 * t3948;
t4663 = 0.2e1 * t3316;
t4609 = pkin(2) * t4823;
t4666 = t3421 + 0.2e1 * t4609;
t4748 = t3895 * t3909;
t3878 = t3917 * t3879;
t4756 = t3878 * t3948;
t4124 = t3908 * t4248;
t4063 = pkin(3) * t4124;
t4829 = (-t3393 + t4063) * t3881;
t4197 = 0.2e1 * t4248;
t4832 = ((pkin(2) * t4197 + t4406) * t3908 + t4582) * t3881;
t3871 = t3896 * t3872;
t4915 = 0.3e1 * t3871;
t4917 = 0.2e1 * t3865;
t4922 = 0.2e1 * pkin(6);
t4923 = -0.2e1 * pkin(6);
t4926 = 0.2e1 * pkin(1);
t4535 = t3908 * t3410;
t3370 = pkin(3) * t4535;
t4940 = t4663 + 0.2e1 * t3370;
t4961 = t3878 * t3391;
t4970 = -t3881 + 0.1e1;
t4976 = 0.2e1 * t3909;
t4296 = (((-0.4e1 / 0.3e1 + t3881) * t4756 + ((-0.2e1 / 0.3e1 * t3808 + t4648) * t3881 + 0.2e1 / 0.3e1 * t4309 + 0.4e1 / 0.3e1 * t3808 + t4397) * t3917 + (0.4e1 / 0.3e1 * t4870 - 0.2e1 / 0.3e1 * t3763) * t3673) * t4823 * t4915 + (t3817 * t4961 - (t4829 + (t3407 + t5003) * t3918 + 0.3e1 * t3393 - 0.4e1 * t5000) * t4870 + ((t4227 * t4923 - t4391) * t3918 + (pkin(6) * t4204 - t4328) * t3909 + t3391 + (-t4832 + (t4078 + (pkin(2) * t4279 - 0.4e1 * t4227) * t3918 + (t3448 + t4204) * t4976 + t3390 + t4663) * t3908) * pkin(3) - t4192) * t3917 + ((-t4248 * t4757 - t3385) * t3908 - t4389) * t3881 + ((t3298 * t3909 - 0.2e1 * t4177) * t3908 + t4575) * t3918 + (t3802 * t4248 + t3385) * t3908 + t3987) * t3872 + ((-0.3e1 * t3881 + 0.3e1) * t4756 * t4823 - (t3817 * t3421 + (-t4183 + (-t3390 - t4940) * t3909) * t3895 + ((t4926 + 0.4e1 * t4693) * t3918 + (0.4e1 * t3881 - 0.2e1) * pkin(2)) * t4823) * t4870 + (0.2e1 * (t3808 + t4647) * t4505 + (((t3373 + t4669) * t3830 + t3298) * t3895 - t3739 * pkin(2) * t4383) * t3918 + (t3941 * t4291 - 0.4e1 * t4595) * t3830 + (pkin(6) * t4324 + t4499 * t3943) * t3909 - t3696 * t4823) * t3917 + ((-t3895 * t4328 + 0.2e1 * t4386) * t3908 + pkin(3) * t4666) * t3881 + ((pkin(1) * t4324 + pkin(6) * t4347) * t3908 + pkin(3) * t4347) * t4715 + (-0.2e1 * t4386 + (t3909 * t4192 + t4328) * t3895) * t3908 - pkin(3) * (t3316 * t4748 + t4666)) * t3896 + t4970 * t4961 - (-t4829 - t3393 + (-t4669 * t3918 + (t4922 + t3830) * t4504) * t3909) * t4870 + (-t3391 + (t4832 + (-pkin(2) * t4134 + (-t3929 * t3880 + (t3929 + t3850) * t3918) * t3895 * t4383 - t4211) * t3908) * pkin(3)) * t3917 + ((t3385 + (t3909 * t4757 + t4641) * t4504) * t3908 + t4389) * t3881 + (((pkin(1) * t4204 - t3298) * t3909 + 0.2e1 * t4177) * t3908 - t4575) * t3918 + (-t3385 + (t3697 * t3909 + t4917) * t4504) * t3908 - t3987) / (t3622 + t3895 * (t3628 * t3917 + t4167)) * t4823;
t3292 = t4532 - t4424;
t3937 = pkin(6) / 0.2e1;
t3757 = t3830 + t3937;
t3463 = t3757 * t4198;
t3752 = pkin(1) * t4693;
t3942 = 0.2e1 * pkin(2);
t3784 = t3854 + t3942;
t3806 = t3894 + t3951;
t4229 = t3673 * t3763 * t4823;
t4503 = t3908 * t4823;
t4249 = t3895 * t4503;
t4398 = t3894 + t4642;
t4429 = t3896 * t3410;
t4542 = (t4429 + (-t4769 - t4970) * t4823) * t4756;
t3936 = pkin(6) / 0.3e1;
t4574 = (t3830 + t3936) * t4878;
t4859 = pkin(6) * t3929;
t4864 = pkin(6) * t3918;
t4872 = pkin(3) * t3763;
t3235 = t3370 + t4406;
t4982 = t3235 * t3909 + t3448;
t4545 = (-t4542 - ((t3410 * t3784 + t3463) * t3896 + (-t4183 - t4982) * t3895 + ((-t3835 + (-t4693 + pkin(1)) * t3918 + t3941) * t3872 + t3673) * t4823) * t4870 + ((-t3918 * t4391 + t3749 * t4424 - (t3752 + t3806) * t3410) * t3896 + (pkin(2) * t3764 * t4534 - t3292 * t4864) * t3895 + (-(pkin(1) * t3836 + t3881 * t4872 + t3752 - t3808 + t4398) * t3872 + (((t3850 - t3929) * t3830 - t4859) * t3918 + 0.3e1 * t4574) * t4750 + t4762 * t4872) * t4823) * t3917 - t3872 * t4229 - (pkin(1) * t4060 - t3806 * t3909 - t3865) * t3896 * t4249 + t3289 * t3692 * t3895 + t4229) * t3410;
t3118 = -t4296 + (-t3157 * t4826 - t4545) * t3536;
t3472 = t3896 * t4823;
t3336 = t3472 + t3410;
t3325 = t3336 * pkin(2);
t4500 = t3918 * t4823;
t3466 = t3895 * t4500;
t3350 = t3466 - t3452;
t3625 = -pkin(6) * t3698 + t3830 * t4967;
t3533 = 0.1e1 / ((t3625 * t3895 + t3655) * t3917 + t4201);
t3938 = -0.3e1 / 0.2e1 * pkin(2);
t4123 = t3909 * t4227;
t4141 = t3895 * t4290;
t4731 = t3896 * t3908;
t4449 = t3895 * t4731;
t4506 = t3872 * t4823;
t4519 = t3929 * t4826;
t4563 = t4894 * t3763;
t4601 = t3316 * t3830;
t4645 = t3894 + t3948;
t4924 = -0.2e1 * pkin(2);
t4848 = pkin(3) * t4924;
t4867 = pkin(3) * t3895;
t4914 = -0.2e1 * t3872;
t4949 = t3881 * t4757 + t3808;
t3130 = -(t4542 + ((t3463 + 0.2e1 * t3393) * t3896 - (t3370 + t3316) * t4748 + ((t3938 + t4186) * t4914 + 0.2e1 * t3835 + t3742 * t3918 - pkin(2)) * t4823) * t4870 + (-(0.2e1 * t4309 - t4642 + t4949) * t4506 + (-t4601 + t3806 * t3410 + (0.2e1 * t3757 * t3796 - 0.3e1 * t4574) * t4504) * t3896 + (t3289 * t4867 + t3742 * t4609) * t3918 + t4141 * t4848 + (t3752 + t4645 + t4949) * t4823) * t3917 + pkin(2) * ((-pkin(2) * t4290 + t3289 * t3918) * t3895 + (t3701 * t4449 - t4563) * t4823)) * t3536 * t4823 + (-(t3336 * t4756 + 0.2e1 * (-t4063 / 0.2e1 + t3325) * t4870 + (t3336 * t3806 + ((t3796 - 0.2e1 * t4878) * pkin(3) * t4504 - t4519) * t3908) * t3917 + t3701 * pkin(2) * t4249) * t3410 + (t3879 * t4123 + (t3336 * t3908 * t3929 + pkin(3) * t3466 - t4826) * t3917 + pkin(2) * t3350) * t4826) * t3533;
t3950 = 0.1e1 / pkin(3) ^ 2;
t3451 = t3460 ^ 2 * t3950 / t3562 ^ 2;
t3436 = pkin(7) * t3451;
t3478 = t3484 ^ 2 / t3527 ^ 2;
t4046 = t3895 * t4125;
t4011 = t4046 * t3942;
t4514 = t3909 * t3478;
t4591 = pkin(6) * t4748;
t4852 = pkin(7) * t3881;
t4913 = 0.2e1 * t3872;
t4946 = pkin(6) * t4443 + t3850;
t4994 = t3118 * t4924 + (-t3784 * t3896 + t4591) * t3130 - t3478 * ((t3935 - t4570 + t4852) * t4913 + pkin(7) - 0.2e1 * t4852 + t4946) - (pkin(2) * t4514 + pkin(7) * t4046) * t4973 + t3909 * t4011 + t3436;
t3290 = t3911 * t4527 - t4825;
t3408 = pkin(1) * t3412;
t3740 = t4692 + pkin(1);
t3766 = pkin(6) * t3911 + pkin(3);
t3855 = pkin(1) * t3885;
t3856 = pkin(1) * t3921;
t4569 = pkin(2) * t4709;
t4059 = t3885 * t3929 - t4569;
t4529 = t3912 * t3412;
t4286 = t3911 * t4529;
t4420 = t3911 * t4825;
t4722 = t3896 * t3921;
t4442 = t3895 * t4722;
t4711 = t3911 * t3920;
t4906 = 0.2e1 * t3911;
t3158 = ((pkin(1) * t4286 + t3290) * t3920 - (t3856 + pkin(2)) * t3454) * t3896 + ((t4420 + t4668) * t3912 - t3408 + (t3693 * t3883 + (pkin(6) * t4711 - pkin(2)) * t3921) * t3412) * t3895 + ((-(-t3840 + t3855 + t3943 - t4707) * t4750 - t4592 * t4709) * t3883 + (t3766 * t4442 + (t3868 * t3885 + t4569 / 0.2e1 + t3750) * t3872 * t4906 - (-t4059 + t3750) * t3911) * t3920 + (t3855 - t3740) * t4750 + t4894 * t3767 * t4709) * t4822;
t3690 = pkin(1) * t3831 - pkin(6) * t4692;
t3629 = t3768 * t3840 + t3690;
t3656 = t3702 * t4882;
t3537 = 0.1e1 / ((t3629 * t3895 + t3656) * t3920 + t4200);
t3377 = pkin(6) * t4527;
t3299 = pkin(3) * t4825 - t3377;
t3440 = pkin(8) * t3454;
t3443 = pkin(7) * t3454;
t3317 = t3443 + t3440;
t3374 = pkin(1) * t4529;
t3396 = pkin(6) * t3412;
t3386 = pkin(2) * t3396;
t3397 = t3948 * t3412;
t3399 = pkin(2) * t3412;
t4275 = t3895 * t3454;
t3422 = pkin(1) * t4275;
t3449 = pkin(1) * t3454;
t3839 = t3885 * pkin(2);
t4418 = t3912 * t3797;
t4185 = t3839 + t4418;
t3674 = -pkin(2) + t4185;
t3809 = pkin(6) * t3831;
t3884 = t3921 * t3885;
t4489 = t3929 * t4822;
t4226 = t3895 * t4489;
t4077 = 0.2e1 * t3884 * t4226;
t4196 = -0.2e1 * t4240;
t3986 = pkin(3) * (pkin(6) * t4196 + t3399) + t4077 * t4877;
t4271 = t3921 * t3454;
t4133 = t3912 * t4271;
t4634 = pkin(6) * t4869;
t4166 = -t3921 * t4634 + t3653;
t4176 = pkin(2) * t4226;
t4181 = pkin(2) * t4271;
t3398 = t3951 * t3412;
t4191 = t3412 * t3894 + t3398;
t4494 = t3895 * t4822;
t4320 = pkin(2) * t4494;
t4203 = 0.2e1 * t4320;
t4273 = t3912 * t3454;
t4405 = t3396 + t3317;
t4210 = pkin(1) * t4273 + t4405;
t4287 = t3895 * t4529;
t4308 = pkin(2) * t4418;
t4531 = t3895 * t3412;
t4323 = pkin(2) * t4531;
t4327 = pkin(1) * t4527;
t4346 = 0.2e1 * t4489;
t4382 = 0.2e1 * t4822;
t4594 = pkin(6) * t4822;
t4385 = pkin(2) * t4594;
t4581 = pkin(3) * t3412;
t4388 = pkin(2) * t4581;
t4390 = pkin(1) * t3399;
t4495 = t3885 * t4822;
t4573 = pkin(3) * t5002;
t4662 = 0.2e1 * t3317;
t4608 = pkin(2) * t4822;
t4665 = t3422 + 0.2e1 * t4608;
t4746 = t3895 * t3912;
t3882 = t3920 * t3883;
t4754 = t3882 * t3948;
t4116 = t3911 * t4240;
t4062 = pkin(3) * t4116;
t4828 = (-t3399 + t4062) * t3885;
t4195 = 0.2e1 * t4240;
t4831 = ((pkin(2) * t4195 + t4405) * t3911 + t4581) * t3885;
t4530 = t3911 * t3412;
t3371 = pkin(3) * t4530;
t4941 = t4662 + 0.2e1 * t3371;
t4960 = t3882 * t3397;
t4969 = -t3885 + 0.1e1;
t4975 = 0.2e1 * t3912;
t4295 = (((t3885 - 0.4e1 / 0.3e1) * t4754 + ((-0.2e1 / 0.3e1 * t3809 + t4648) * t3885 + 0.2e1 / 0.3e1 * t4308 + 0.4e1 / 0.3e1 * t3809 + t4397) * t3920 + (0.4e1 / 0.3e1 * t4869 - 0.2e1 / 0.3e1 * t3766) * t3674) * t4822 * t4915 + (t3818 * t4960 - (t4828 + (t3408 + t5002) * t3921 + 0.3e1 * t3399 - 0.4e1 * t4999) * t4869 + ((t4226 * t4923 - t4390) * t3921 + (pkin(6) * t4203 - t4327) * t3912 + t3397 + (-t4831 + (t4077 + (pkin(2) * t4273 - 0.4e1 * t4226) * t3921 + (t3449 + t4203) * t4975 + t3396 + t4662) * t3911) * pkin(3) - t4191) * t3920 + ((-t4240 * t4757 - t3386) * t3911 - t4388) * t3885 + ((t3299 * t3912 - 0.2e1 * t4176) * t3911 + t4573) * t3921 + (t3802 * t4240 + t3386) * t3911 + t3986) * t3872 + ((-0.3e1 * t3885 + 0.3e1) * t4754 * t4822 - (t3818 * t3422 + (-t4181 + (-t3396 - t4941) * t3912) * t3895 + ((t4926 + 0.4e1 * t4692) * t3921 + (0.4e1 * t3885 - 0.2e1) * pkin(2)) * t4822) * t4869 + (0.2e1 * (t3809 + t4647) * t4495 + (((t3374 + t4668) * t3831 + t3299) * t3895 - t3740 * pkin(2) * t4382) * t3921 + (t3941 * t4287 - 0.4e1 * t4594) * t3831 + (pkin(6) * t4323 + t4489 * t3943) * t3912 - t3696 * t4822) * t3920 + ((-t3895 * t4327 + 0.2e1 * t4385) * t3911 + pkin(3) * t4665) * t3885 + ((pkin(1) * t4323 + pkin(6) * t4346) * t3911 + pkin(3) * t4346) * t4709 + (-0.2e1 * t4385 + (t3912 * t4191 + t4327) * t3895) * t3911 - pkin(3) * (t3317 * t4746 + t4665)) * t3896 + t4969 * t4960 - (-t4828 - t3399 + (-t4668 * t3921 + (t4922 + t3831) * t4494) * t3912) * t4869 + (-t3397 + (t4831 + (-pkin(2) * t4133 + (-t3929 * t3884 + (t3929 + t3851) * t3921) * t3895 * t4382 - t4210) * t3911) * pkin(3)) * t3920 + ((t3386 + (t3912 * t4757 + t4641) * t4494) * t3911 + t4388) * t3885 + (((pkin(1) * t4203 - t3299) * t3912 + 0.2e1 * t4176) * t3911 - t4573) * t3921 + (-t3386 + (t3697 * t3912 + t4917) * t4494) * t3911 - t3986) / (t3623 + t3895 * (t3629 * t3920 + t4166)) * t4822;
t3293 = t4527 - t4420;
t3759 = t3831 + t3937;
t3464 = t3759 * t4196;
t3753 = pkin(1) * t4692;
t3785 = t3856 + t3942;
t4228 = t3674 * t3766 * t4822;
t4493 = t3911 * t4822;
t4241 = t3895 * t4493;
t4428 = t3896 * t3412;
t4541 = (t4428 + (-t4767 - t4969) * t4822) * t4754;
t4576 = (t3831 + t3936) * t4876;
t4862 = pkin(6) * t3921;
t4871 = pkin(3) * t3766;
t3236 = t3371 + t4405;
t4981 = t3236 * t3912 + t3449;
t4544 = (-t4541 - ((t3412 * t3785 + t3464) * t3896 + (-t4181 - t4981) * t3895 + ((-t3839 + (-t4692 + pkin(1)) * t3921 + t3941) * t3872 + t3674) * t4822) * t4869 + ((-t3921 * t4390 + t3750 * t4420 - (t3753 + t3806) * t3412) * t3896 + (pkin(2) * t3767 * t4529 - t3293 * t4862) * t3895 + (-(pkin(1) * t3840 + t3885 * t4871 + t3753 - t3809 + t4398) * t3872 + (((t3851 - t3929) * t3831 - t4859) * t3921 + 0.3e1 * t4576) * t4750 + t4761 * t4871) * t4822) * t3920 - t3872 * t4228 - (pkin(1) * t4059 - t3806 * t3912 - t3865) * t3896 * t4241 + t3290 * t3693 * t3895 + t4228) * t3412;
t3119 = -t4295 + (-t3158 * t4825 - t4544) * t3537;
t3473 = t3896 * t4822;
t3339 = t3473 + t3412;
t3326 = t3339 * pkin(2);
t4490 = t3921 * t4822;
t3467 = t3895 * t4490;
t3352 = t3467 - t3454;
t3626 = -pkin(6) * t3699 + t3831 * t4966;
t3534 = 0.1e1 / ((t3626 * t3895 + t3656) * t3920 + t4200);
t4115 = t3912 * t4226;
t4138 = t3895 * t4286;
t4729 = t3896 * t3911;
t4447 = t3895 * t4729;
t4496 = t3872 * t4822;
t4517 = t3929 * t4825;
t4562 = t4894 * t3766;
t4600 = t3317 * t3831;
t4948 = t3885 * t4757 + t3809;
t3131 = -(t4541 + ((t3464 + 0.2e1 * t3399) * t3896 - (t3371 + t3317) * t4746 + ((t3938 + t4185) * t4914 + 0.2e1 * t3839 + t3743 * t3921 - pkin(2)) * t4822) * t4869 + (-(0.2e1 * t4308 - t4642 + t4948) * t4496 + (-t4600 + t3806 * t3412 + (0.2e1 * t3759 * t3797 - 0.3e1 * t4576) * t4494) * t3896 + (t3290 * t4867 + t3743 * t4608) * t3921 + t4138 * t4848 + (t3753 + t4645 + t4948) * t4822) * t3920 + pkin(2) * ((-pkin(2) * t4286 + t3290 * t3921) * t3895 + (t3702 * t4447 - t4562) * t4822)) * t3537 * t4822 + (-(t3339 * t4754 + 0.2e1 * (-t4062 / 0.2e1 + t3326) * t4869 + (t3339 * t3806 + ((t3797 - 0.2e1 * t4876) * pkin(3) * t4494 - t4517) * t3911) * t3920 + t3702 * pkin(2) * t4241) * t3412 + (t3883 * t4115 + (t3339 * t3911 * t3929 + pkin(3) * t3467 - t4825) * t3920 + pkin(2) * t3352) * t4825) * t3534;
t3453 = t3461 ^ 2 * t3950 / t3563 ^ 2;
t3437 = pkin(7) * t3453;
t3479 = t3485 ^ 2 / t3528 ^ 2;
t4045 = t3895 * t4117;
t4010 = t4045 * t3942;
t4512 = t3912 * t3479;
t4590 = pkin(6) * t4746;
t4851 = pkin(7) * t3885;
t4945 = pkin(6) * t4442 + t3851;
t4993 = t3119 * t4924 + (-t3785 * t3896 + t4590) * t3131 - t3479 * ((t3935 - t4569 + t4851) * t4913 + pkin(7) - 0.2e1 * t4851 + t4945) - (pkin(2) * t4512 + pkin(7) * t4045) * t4972 + t3912 * t4010 + t3437;
t3291 = t3914 * t4521 - t4824;
t3405 = pkin(1) * t3414;
t3741 = t4691 + pkin(1);
t3769 = pkin(6) * t3914 + pkin(3);
t3857 = pkin(1) * t3889;
t3858 = pkin(1) * t3924;
t4568 = pkin(2) * t4703;
t4058 = t3889 * t3929 - t4568;
t4523 = t3915 * t3414;
t4282 = t3914 * t4523;
t4416 = t3914 * t4824;
t4720 = t3896 * t3924;
t4441 = t3895 * t4720;
t4705 = t3914 * t3923;
t4904 = 0.2e1 * t3914;
t3159 = ((pkin(1) * t4282 + t3291) * t3923 - (t3858 + pkin(2)) * t3456) * t3896 + ((t4416 + t4667) * t3915 - t3405 + (t3694 * t3887 + (pkin(6) * t4705 - pkin(2)) * t3924) * t3414) * t3895 + ((-(-t3844 + t3857 + t3943 - t4701) * t4750 - t4592 * t4703) * t3887 + (t3769 * t4441 + (t3868 * t3889 + t4568 / 0.2e1 + t3751) * t3872 * t4904 - t3914 * (-t4058 + t3751)) * t3923 + (t3857 - t3741) * t4750 + t4894 * t3770 * t4703) * t4821;
t3691 = pkin(1) * t3832 - pkin(6) * t4691;
t3630 = t3771 * t3844 + t3691;
t3657 = t3703 * t4882;
t3535 = 0.1e1 / ((t3630 * t3895 + t3657) * t3923 + t4199);
t3378 = pkin(6) * t4521;
t3300 = pkin(3) * t4824 - t3378;
t3441 = pkin(8) * t3456;
t3444 = pkin(7) * t3456;
t3318 = t3444 + t3441;
t3375 = pkin(1) * t4523;
t3401 = pkin(6) * t3414;
t3387 = pkin(2) * t3401;
t3402 = t3948 * t3414;
t3404 = pkin(2) * t3414;
t4269 = t3895 * t3456;
t3423 = pkin(1) * t4269;
t3450 = pkin(1) * t3456;
t3843 = t3889 * pkin(2);
t4414 = t3915 * t3798;
t4184 = t3843 + t4414;
t3675 = -pkin(2) + t4184;
t3810 = pkin(6) * t3832;
t3888 = t3924 * t3889;
t4478 = t3929 * t4821;
t4225 = t3895 * t4478;
t4076 = 0.2e1 * t3888 * t4225;
t4194 = -0.2e1 * t4231;
t3985 = pkin(3) * (pkin(6) * t4194 + t3404) + t4076 * t4875;
t4265 = t3924 * t3456;
t4132 = t3915 * t4265;
t4633 = pkin(6) * t4868;
t4165 = -t3924 * t4633 + t3654;
t4175 = pkin(2) * t4225;
t4179 = pkin(2) * t4265;
t3403 = t3951 * t3414;
t4190 = t3414 * t3894 + t3403;
t4483 = t3895 * t4821;
t4319 = pkin(2) * t4483;
t4202 = 0.2e1 * t4319;
t4267 = t3915 * t3456;
t4404 = t3401 + t3318;
t4209 = pkin(1) * t4267 + t4404;
t4283 = t3895 * t4523;
t4307 = pkin(2) * t4414;
t4526 = t3895 * t3414;
t4322 = pkin(2) * t4526;
t4326 = pkin(1) * t4521;
t4345 = 0.2e1 * t4478;
t4381 = 0.2e1 * t4821;
t4593 = pkin(6) * t4821;
t4384 = pkin(2) * t4593;
t4580 = pkin(3) * t3414;
t4387 = pkin(2) * t4580;
t4484 = t3889 * t4821;
t4572 = pkin(3) * t5001;
t4646 = t3810 + t3948;
t4661 = 0.2e1 * t3318;
t4607 = pkin(2) * t4821;
t4664 = t3423 + 0.2e1 * t4607;
t4744 = t3895 * t3915;
t3886 = t3923 * t3887;
t4752 = t3886 * t3948;
t4093 = t3914 * t4231;
t4061 = pkin(3) * t4093;
t4827 = (-t3404 + t4061) * t3889;
t4193 = 0.2e1 * t4231;
t4830 = ((pkin(2) * t4193 + t4404) * t3914 + t4580) * t3889;
t4524 = t3914 * t3414;
t3372 = pkin(3) * t4524;
t4942 = t4661 + 0.2e1 * t3372;
t4959 = t3886 * t3402;
t4968 = -t3889 + 0.1e1;
t4974 = 0.2e1 * t3915;
t4294 = (((-0.4e1 / 0.3e1 + t3889) * t4752 + ((-0.2e1 / 0.3e1 * t3810 + t4648) * t3889 + 0.2e1 / 0.3e1 * t4307 + 0.4e1 / 0.3e1 * t3810 + t4397) * t3923 + (0.4e1 / 0.3e1 * t4868 - 0.2e1 / 0.3e1 * t3769) * t3675) * t4821 * t4915 + (t3819 * t4959 - (t4827 + (t3405 + t5001) * t3924 + 0.3e1 * t3404 - 0.4e1 * t4998) * t4868 + ((-pkin(1) * t3404 + t4225 * t4923) * t3924 + (pkin(6) * t4202 - t4326) * t3915 + t3402 + (-t4830 + (t4076 + (pkin(2) * t4267 - 0.4e1 * t4225) * t3924 + (t3450 + t4202) * t4974 + t3401 + t4661) * t3914) * pkin(3) - t4190) * t3923 + ((-t4231 * t4757 - t3387) * t3914 - t4387) * t3889 + ((t3300 * t3915 - 0.2e1 * t4175) * t3914 + t4572) * t3924 + (t3802 * t4231 + t3387) * t3914 + t3985) * t3872 + ((-0.3e1 * t3889 + 0.3e1) * t4752 * t4821 - (t3819 * t3423 + (-t4179 + (-t3401 - t4942) * t3915) * t3895 + ((t4926 + 0.4e1 * t4691) * t3924 + (0.4e1 * t3889 - 0.2e1) * pkin(2)) * t4821) * t4868 + (0.2e1 * (t3725 + t4646) * t4484 + (((t3375 + t4667) * t3832 + t3300) * t3895 - t3741 * pkin(2) * t4381) * t3924 + (t3941 * t4283 - 0.4e1 * t4593) * t3832 + (pkin(6) * t4322 + t4478 * t3943) * t3915 - t3696 * t4821) * t3923 + ((-t3895 * t4326 + 0.2e1 * t4384) * t3914 + pkin(3) * t4664) * t3889 + ((pkin(1) * t4322 + pkin(6) * t4345) * t3914 + pkin(3) * t4345) * t4703 + (-0.2e1 * t4384 + (t3915 * t4190 + t4326) * t3895) * t3914 - pkin(3) * (t3318 * t4744 + t4664)) * t3896 + t4968 * t4959 - (-t4827 - t3404 + (-t4667 * t3924 + (t4922 + t3832) * t4483) * t3915) * t4868 + (-t3402 + (t4830 + (-pkin(2) * t4132 + (-t3929 * t3888 + (t3929 + t3852) * t3924) * t3895 * t4381 - t4209) * t3914) * pkin(3)) * t3923 + ((t3387 + (t3915 * t4757 + t4641) * t4483) * t3914 + t4387) * t3889 + (((pkin(1) * t4202 - t3300) * t3915 + 0.2e1 * t4175) * t3914 - t4572) * t3924 + (-t3387 + (t3697 * t3915 + t4917) * t4483) * t3914 - t3985) / (t3624 + t3895 * (t3630 * t3923 + t4165)) * t4821;
t3294 = t4521 - t4416;
t3761 = t3832 + t3937;
t3465 = t3761 * t4194;
t3786 = t3858 + t3942;
t3754 = pkin(1) * t4691;
t4057 = -pkin(1) * t3844 - t3754 - t3806;
t4482 = t3914 * t4821;
t4232 = t3895 * t4482;
t4487 = t3769 * t4821;
t4236 = t3675 * t4487;
t4485 = t3872 * t4821;
t4525 = t3896 * t3414;
t4540 = (t4525 + (-t4765 - t4968) * t4821) * t4752;
t4571 = (t3832 + t3936) * t4874;
t4860 = pkin(6) * t3924;
t3237 = t3372 + t4404;
t4980 = t3237 * t3915 + t3450;
t4543 = (-t4540 - ((t3414 * t3786 + t3465) * t3896 + (-t4179 - t4980) * t3895 + ((-t3843 + (-t4691 + pkin(1)) * t3924 + t3941) * t3872 + t3675) * t4821) * t4868 + (-(pkin(3) * t3769 * t3889 - t4057 - t4646) * t4485 + ((((t3852 - t3929) * t3832 - t4859) * t3924 + 0.3e1 * t4571) * t4483 + t3751 * t4416 + t4057 * t3414) * t3896 + (pkin(2) * t3770 * t4523 - t3294 * t4860) * t3895 + pkin(3) * t4487 * t4760) * t3923 - t3872 * t4236 - (pkin(1) * t4058 - t3806 * t3915 - t3865) * t3896 * t4232 + t3291 * t3694 * t3895 + t4236) * t3414;
t3120 = -t4294 + (-t3159 * t4824 - t4543) * t3535;
t3474 = t3896 * t4821;
t3342 = t3474 + t3414;
t3327 = t3342 * pkin(2);
t4479 = t3924 * t4821;
t3468 = t3895 * t4479;
t3354 = t3468 - t3456;
t3627 = -pkin(6) * t3700 + t3832 * t4965;
t3532 = 0.1e1 / ((t3627 * t3895 + t3657) * t3923 + t4199);
t4108 = t3915 * t4225;
t4135 = t3895 * t4282;
t4727 = t3896 * t3914;
t4445 = t3895 * t4727;
t4515 = t3929 * t4824;
t4561 = t4894 * t3769;
t4599 = t3318 * t3832;
t4947 = t3889 * t4757 + t3810;
t3132 = -(t4540 + ((t3465 + 0.2e1 * t3404) * t3896 - (t3372 + t3318) * t4744 + ((t3938 + t4184) * t4914 + 0.2e1 * t3843 + t3744 * t3924 - pkin(2)) * t4821) * t4868 + (-(0.2e1 * t4307 - t4642 + t4947) * t4485 + (-t4599 + t3806 * t3414 + (0.2e1 * t3761 * t3798 - 0.3e1 * t4571) * t4483) * t3896 + (t3291 * t4867 + t3744 * t4607) * t3924 + t4135 * t4848 + (t3754 + t4645 + t4947) * t4821) * t3923 + pkin(2) * ((-pkin(2) * t4282 + t3291 * t3924) * t3895 + (t3703 * t4445 - t4561) * t4821)) * t3535 * t4821 + (-(t3342 * t4752 + 0.2e1 * (-t4061 / 0.2e1 + t3327) * t4868 + (t3342 * t3806 + ((t3798 - 0.2e1 * t4874) * pkin(3) * t4483 - t4515) * t3914) * t3923 + pkin(2) * t3703 * t4232) * t3414 + (t3887 * t4108 + (t3342 * t3914 * t3929 + pkin(3) * t3468 - t4824) * t3923 + pkin(2) * t3354) * t4824) * t3532;
t3455 = t3462 ^ 2 * t3950 / t3564 ^ 2;
t3438 = pkin(7) * t3455;
t3480 = t3486 ^ 2 / t3526 ^ 2;
t4044 = t3895 * t4109;
t4009 = t4044 * t3942;
t4510 = t3915 * t3480;
t4589 = pkin(6) * t4744;
t4850 = pkin(7) * t3889;
t4944 = pkin(6) * t4441 + t3852;
t4992 = t3120 * t4924 + (-t3786 * t3896 + t4589) * t3132 - t3480 * ((t3935 - t4568 + t4850) * t4913 + pkin(7) - 0.2e1 * t4850 + t4944) - (pkin(2) * t4510 + pkin(7) * t4044) * t4971 + t3915 * t4009 + t3438;
t4142 = t3452 * t3410;
t4066 = pkin(2) * t4142;
t3308 = -0.2e1 * t4066;
t3712 = pkin(7) * t3918 - t4878;
t4660 = t3466 - 0.2e1 * t3452;
t4838 = t3130 * t3895;
t3388 = pkin(8) * t3410;
t3389 = pkin(7) * t3410;
t4412 = -t4826 / 0.2e1;
t4675 = (t3389 + t3388 - t3445 / 0.2e1) * t3830 + pkin(3) * t4412;
t3211 = t3376 + t4675;
t3301 = t3445 - t3389;
t3259 = t3388 - t3301;
t3731 = t3951 + t4943;
t4276 = t3929 * t4424;
t4072 = t3731 * t3410 - t4276;
t3262 = t3472 * t3731 + t4072;
t3274 = t3370 + t3390;
t3727 = pkin(1) * t4757;
t3695 = t3896 * t3727;
t3705 = -0.2e1 / 0.3e1 * t4897 - t3944 / 0.3e1 - t3945 / 0.3e1 + t3951;
t3732 = pkin(2) * t3745;
t3811 = pkin(2) * t3834;
t3833 = t3879 * t3948;
t3866 = t3948 + t3951;
t3867 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t3947 = pkin(3) * t3948;
t3984 = t3909 * (t3390 * t4757 + (((t3445 - 0.2e1 * t3388) * pkin(7) + t3392 + pkin(6) * t3439 - t4644 * t3410) * t3908 + t4519) * pkin(3)) + ((0.2e1 * t3390 + t4940) * t3909 + t3448) * t3811 + t4982 * t3833;
t4081 = 0.2e1 * t3811 + t3833;
t4002 = t4081 + t4757;
t3583 = (t3640 * t3917 + (t3908 * t3951 - t4635) * t3895) * t3918;
t4636 = pkin(3) * t4882;
t4394 = t3879 * t4636;
t4606 = t3739 * t4879;
t4020 = t3895 * t4606 - t3909 * t4394 + t3583;
t4396 = -t3946 / 0.2e1 - t3948 / 0.2e1 + t3951 / 0.2e1;
t4033 = t4396 - t4943;
t4936 = 0.3e1 * t4943;
t4034 = t3948 + t4643 + t4936;
t4462 = t3909 * t4778;
t4507 = t3764 * t4823;
t4037 = t4462 * t4507;
t4252 = t3772 * t4507;
t4122 = t3929 * t4252;
t4042 = t3871 * t4122;
t4280 = t3949 * t4424;
t4069 = t4280 * t4882;
t4075 = t3472 * t3749 + t3259;
t4088 = -t4943 + t3866;
t4121 = t3764 * t4227;
t4407 = t3944 / 0.2e1 + t3945 / 0.2e1;
t4168 = t4407 + t4897;
t4208 = t3951 - t4936;
t4214 = t3908 * t4412;
t4215 = t3895 * t3725;
t4250 = t4763 * t4823;
t4251 = t3772 * t4504;
t4302 = t4894 * t4823;
t4520 = t3879 * t4826;
t4318 = pkin(3) * t4520;
t4439 = t3895 * t4719;
t4325 = pkin(1) * t4439;
t4603 = pkin(2) * t4736;
t4395 = 0.2e1 * t4603;
t4408 = 0.3e1 / 0.2e1 * t3705 * t3929;
t4896 = 0.3e1 / 0.2e1 * t3951 + t4168;
t4409 = t3896 * t4896;
t3538 = 0.1e1 / ((t3689 * t3917 + t4606) * t3895 + t4026);
t4508 = t3538 * t4823;
t4050 = t3949 * (-t3951 / 0.2e1 + t4407);
t4585 = ((t3390 + t3439) * pkin(7) + pkin(6) * t3388 + t4050 * t4826 + t4675) * t3834;
t4735 = t3895 * t3949;
t4602 = pkin(2) * t4735;
t4610 = t3948 * t4882;
t4629 = 0.2e1 * t3896;
t4639 = 0.2e1 * t3834;
t4758 = t3872 * t3929;
t4873 = pkin(2) * t3929;
t4883 = pkin(1) * t3895;
t4916 = 0.2e1 * t3871;
t4939 = t3811 + t3833 - t3808;
t4952 = 0.2e1 * t3808 - t3833;
t4957 = t3336 * t4693 + t3407;
t3115 = (((t3908 * t4325 + ((t3808 + t4088) * t3917 + (t3763 + t4870) * pkin(2)) * t4763) * t4505 + ((pkin(2) * t4281 + t3739 * t4250) * t4870 + ((t3452 * t3866 - t3830 * t4075) * t3895 + pkin(2) * t3742 * t4250) * t3917 - (t3908 * t4075 - t4826) * t4881 - t3929 * (-t4502 * t4563 + t4069)) * t3918 + t4520 * t4883 + (t3929 * t3749 * t4302 + (t3739 * t4602 + t3908 * t4613) * t4826) * t3917 - (-t3909 * t4826 + (t3259 * t3909 + t3472 * t3739 + t3407) * t3908) * t4736 + t4069 * t4878) / ((-pkin(2) * t4613 + t3689 * t3895) * t3917 + t4020) * t4826 + ((t3879 * t4610 + (t3764 * t4736 + t3807) * t4639 + t3764 * t4395 + t3695) * t4505 + (t3947 * t3336 * t3878 + (t3929 * t4214 + t3410 * t4896 + ((-t3764 * t4881 + t3745) * t3909 + t4409) * t4823) * t4639 + 0.2e1 * (t3764 * t4215 + t3732) * t4502 + pkin(2) * t3262) * t3918 + (-t4121 / 0.2e1 + t4957 * pkin(2)) * t4639 + t3262 * t4693 - pkin(2) * t4121 + (t3472 * t3894 + t4072) * pkin(1) + ((0.3e1 * t3325 - t5000) * t3918 + t4957) * t3833) / (t3917 * t4651 + t4020) * t4536 + (-(t4208 + t4081) * t3880 * t4250 * t4772 + (-0.4e1 * t4042 + (-0.3e1 * (t3705 + t4081) * t4123 - 0.2e1 * t4585 + (-0.2e1 * t3211 + t4318) * pkin(2)) * t3872 + ((t3410 * t4002 + t4276) * t4883 + 0.4e1 * t4122) * t3896 + 0.2e1 * (t3909 * t4408 + t3727 + t4081 * (t3867 * t3909 + pkin(1))) * t4504 - pkin(2) * t4318 + 0.2e1 * t4585 + t3211 * t3942) * t3881 + (t4037 * t4916 + (0.2e1 * (t4033 + t4939) * t4251 + t3984) * t3872 + (((t4214 + t4532) * t3850 - t4601 / 0.2e1 + t3392 / 0.2e1) * t4772 - t4037 + (t3833 / 0.2e1 + t3811 + t4168) * t3772 * t4536) * t4629 + (0.4e1 * t3752 + t4034 + t4952) * t4251 - t3984) * t3918 + 0.2e1 * t4042 + ((t4396 + t4939) * t4197 + (t3370 + t4211) * t3834 + pkin(2) * t3274) * t4758 + (((t3392 - t4601) * t3909 + t3292 * pkin(1)) * t3895 - 0.2e1 * t4252 + (t4081 + t4943) * t4291) * t4719 + (t4917 + (t3697 + t4952) * t3909) * t4227 - (t3235 * t3929 + t3316 * t3850) * t3834 - t3274 * t4873) * t4508) * t3949;
t4858 = pkin(7) * t3115;
t4991 = t3712 * t4838 + (pkin(2) * t4660 + pkin(7) * t4248) * t3472 + t3308 + t4858;
t4139 = t3454 * t3412;
t4065 = pkin(2) * t4139;
t3309 = -0.2e1 * t4065;
t3713 = pkin(7) * t3921 - t4876;
t4659 = t3467 - 0.2e1 * t3454;
t4836 = t3131 * t3895;
t3394 = pkin(8) * t3412;
t3395 = pkin(7) * t3412;
t4411 = -t4825 / 0.2e1;
t4674 = (t3395 + t3394 - t3446 / 0.2e1) * t3831 + pkin(3) * t4411;
t3212 = t3377 + t4674;
t3302 = t3446 - t3395;
t3260 = t3394 - t3302;
t4270 = t3929 * t4420;
t4071 = t3731 * t3412 - t4270;
t3263 = t3473 * t3731 + t4071;
t3275 = t3371 + t3396;
t3812 = pkin(2) * t3838;
t3837 = t3883 * t3948;
t3983 = t3912 * (t3396 * t4757 + (((t3446 - 0.2e1 * t3394) * pkin(7) + t3398 + pkin(6) * t3440 - t4644 * t3412) * t3911 + t4517) * pkin(3)) + ((0.2e1 * t3396 + t4941) * t3912 + t3449) * t3812 + t4981 * t3837;
t4080 = 0.2e1 * t3812 + t3837;
t4001 = t4080 + t4757;
t3584 = (t3641 * t3920 + (t3911 * t3951 - t4634) * t3895) * t3921;
t4393 = t3883 * t4636;
t4605 = t3740 * t4877;
t4019 = t3895 * t4605 - t3912 * t4393 + t3584;
t4461 = t3912 * t4777;
t4497 = t3767 * t4822;
t4036 = t4461 * t4497;
t4244 = t3774 * t4497;
t4114 = t3929 * t4244;
t4040 = t3871 * t4114;
t4274 = t3949 * t4420;
t4068 = t4274 * t4882;
t4074 = t3473 * t3750 + t3260;
t4113 = t3767 * t4226;
t4213 = t3911 * t4411;
t4242 = t4763 * t4822;
t4243 = t3774 * t4494;
t4301 = t4894 * t4822;
t4518 = t3883 * t4825;
t4317 = pkin(3) * t4518;
t3539 = 0.1e1 / ((t3690 * t3920 + t4605) * t3895 + t4025);
t4498 = t3539 * t4822;
t4584 = ((t3396 + t3440) * pkin(7) + pkin(6) * t3394 + t4050 * t4825 + t4674) * t3838;
t4638 = 0.2e1 * t3838;
t4938 = t3812 + t3837 - t3809;
t4951 = 0.2e1 * t3809 - t3837;
t4956 = t3339 * t4692 + t3408;
t3116 = (((t3911 * t4325 + ((t3809 + t4088) * t3920 + (t3766 + t4869) * pkin(2)) * t4763) * t4495 + ((pkin(2) * t4275 + t3740 * t4242) * t4869 + ((t3454 * t3866 - t3831 * t4074) * t3895 + t3743 * pkin(2) * t4242) * t3920 - (t3911 * t4074 - t4825) * t4881 - t3929 * (-t4492 * t4562 + t4068)) * t3921 + t4518 * t4883 + (t3929 * t3750 * t4301 + (t3740 * t4602 + t3911 * t4612) * t4825) * t3920 - (-t3912 * t4825 + (t3260 * t3912 + t3473 * t3740 + t3408) * t3911) * t4736 + t4068 * t4876) / ((-pkin(2) * t4612 + t3690 * t3895) * t3920 + t4019) * t4825 + ((t3883 * t4610 + (t3767 * t4736 + t3807) * t4638 + t3767 * t4395 + t3695) * t4495 + (t3947 * t3339 * t3882 + (t3929 * t4213 + t3412 * t4896 + ((-t3767 * t4881 + t3745) * t3912 + t4409) * t4822) * t4638 + 0.2e1 * (t3767 * t4215 + t3732) * t4492 + pkin(2) * t3263) * t3921 + (-t4113 / 0.2e1 + t4956 * pkin(2)) * t4638 + t3263 * t4692 - pkin(2) * t4113 + (t3473 * t3894 + t4071) * pkin(1) + ((0.3e1 * t3326 - t4999) * t3921 + t4956) * t3837) / (t3920 * t4650 + t4019) * t4531 + (-(t4208 + t4080) * t3884 * t4242 * t4771 + (-0.4e1 * t4040 + (-0.3e1 * (t3705 + t4080) * t4115 - 0.2e1 * t4584 + (-0.2e1 * t3212 + t4317) * pkin(2)) * t3872 + ((t3412 * t4001 + t4270) * t4883 + 0.4e1 * t4114) * t3896 + 0.2e1 * (t3912 * t4408 + t3727 + t4080 * (t3867 * t3912 + pkin(1))) * t4494 - pkin(2) * t4317 + 0.2e1 * t4584 + t3212 * t3942) * t3885 + (t4036 * t4916 + (0.2e1 * (t4033 + t4938) * t4243 + t3983) * t3872 + (((t4213 + t4527) * t3851 - t4600 / 0.2e1 + t3398 / 0.2e1) * t4771 - t4036 + (t3837 / 0.2e1 + t3812 + t4168) * t3774 * t4531) * t4629 + (0.4e1 * t3753 + t4034 + t4951) * t4243 - t3983) * t3921 + 0.2e1 * t4040 + ((t4396 + t4938) * t4195 + (t3371 + t4210) * t3838 + pkin(2) * t3275) * t4758 + (((t3398 - t4600) * t3912 + t3293 * pkin(1)) * t3895 - 0.2e1 * t4244 + (t4080 + t4943) * t4287) * t4719 + (t4917 + (t3697 + t4951) * t3912) * t4226 - (t3236 * t3929 + t3317 * t3851) * t3838 - t3275 * t4873) * t4498) * t3949;
t4857 = pkin(7) * t3116;
t4990 = t3713 * t4836 + (pkin(2) * t4659 + pkin(7) * t4240) * t3473 + t3309 + t4857;
t4136 = t3456 * t3414;
t4064 = pkin(2) * t4136;
t3307 = -0.2e1 * t4064;
t3714 = pkin(7) * t3924 - t4874;
t4658 = t3468 - 0.2e1 * t3456;
t4834 = t3132 * t3895;
t3400 = pkin(7) * t3414;
t3406 = pkin(8) * t3414;
t4410 = -t4824 / 0.2e1;
t4673 = (t3400 + t3406 - t3447 / 0.2e1) * t3832 + pkin(3) * t4410;
t3213 = t3378 + t4673;
t3303 = t3447 - t3400;
t3261 = t3406 - t3303;
t4264 = t3929 * t4416;
t4070 = t3731 * t3414 - t4264;
t3264 = t3474 * t3731 + t4070;
t3276 = t3372 + t3401;
t3813 = pkin(2) * t3842;
t3841 = t3887 * t3948;
t3982 = (t3401 * t4757 + (((t3447 - 0.2e1 * t3406) * pkin(7) + t3403 + pkin(6) * t3441 - t4644 * t3414) * t3914 + t4515) * pkin(3)) * t3915 + ((0.2e1 * t3401 + t4942) * t3915 + t3450) * t3813 + t4980 * t3841;
t4079 = 0.2e1 * t3813 + t3841;
t4000 = t4079 + t4757;
t3585 = (t3642 * t3923 + (t3914 * t3951 - t4633) * t3895) * t3924;
t4392 = t3887 * t4636;
t4604 = t3741 * t4875;
t4018 = t3895 * t4604 - t3915 * t4392 + t3585;
t4460 = t3915 * t4776;
t4486 = t3770 * t4821;
t4035 = t4460 * t4486;
t4235 = t3776 * t4486;
t4107 = t3929 * t4235;
t4038 = t3871 * t4107;
t4268 = t3949 * t4416;
t4067 = t4268 * t4882;
t4073 = t3474 * t3751 + t3261;
t4106 = t3770 * t4225;
t4212 = t3914 * t4410;
t4233 = t4763 * t4821;
t4234 = t3776 * t4483;
t4300 = t4894 * t4821;
t4516 = t3887 * t4824;
t4316 = pkin(3) * t4516;
t3540 = 0.1e1 / ((t3691 * t3923 + t4604) * t3895 + t4024);
t4488 = t3540 * t4821;
t4583 = ((t3401 + t3441) * pkin(7) + pkin(8) * t3401 + t4050 * t4824 + t4673) * t3842;
t4637 = 0.2e1 * t3842;
t4937 = t3813 + t3841 - t3810;
t4950 = 0.2e1 * t3810 - t3841;
t4958 = t3342 * t4691 + t3405;
t3117 = (((t3914 * t4325 + ((t3810 + t4088) * t3923 + (t3769 + t4868) * pkin(2)) * t4763) * t4484 + ((pkin(2) * t4269 + t3741 * t4233) * t4868 + ((t3456 * t3866 - t3832 * t4073) * t3895 + pkin(2) * t3744 * t4233) * t3923 - (t3914 * t4073 - t4824) * t4881 - (-t4481 * t4561 + t4067) * t3929) * t3924 + t4516 * t4883 + (t3929 * t3751 * t4300 + (t3741 * t4602 + t3914 * t4611) * t4824) * t3923 - (-t3915 * t4824 + (t3261 * t3915 + t3474 * t3741 + t3405) * t3914) * t4736 + t4067 * t4874) / ((-pkin(2) * t4611 + t3691 * t3895) * t3923 + t4018) * t4824 + ((t3887 * t4610 + (t3770 * t4736 + t3807) * t4637 + t3770 * t4395 + t3695) * t4484 + (t3947 * t3342 * t3886 + (t3929 * t4212 + t3414 * t4896 + ((-t3770 * t4881 + t3745) * t3915 + t4409) * t4821) * t4637 + 0.2e1 * (t3770 * t4215 + t3732) * t4481 + pkin(2) * t3264) * t3924 + (-t4106 / 0.2e1 + t4958 * pkin(2)) * t4637 + t3264 * t4691 - pkin(2) * t4106 + (t3474 * t3894 + t4070) * pkin(1) + ((0.3e1 * t3327 - t4998) * t3924 + t4958) * t3841) / (t3923 * t4649 + t4018) * t4526 + (-(t4208 + t4079) * t3888 * t4233 * t4770 + (-0.4e1 * t4038 + (-0.3e1 * (t3705 + t4079) * t4108 - 0.2e1 * t4583 + (-0.2e1 * t3213 + t4316) * pkin(2)) * t3872 + ((t3414 * t4000 + t4264) * t4883 + 0.4e1 * t4107) * t3896 + 0.2e1 * (t3915 * t4408 + t3727 + t4079 * (t3867 * t3915 + pkin(1))) * t4483 - pkin(2) * t4316 + 0.2e1 * t4583 + t3213 * t3942) * t3889 + (t4035 * t4916 + (0.2e1 * (t4033 + t4937) * t4234 + t3982) * t3872 + (((t4212 + t4521) * t3852 - t4599 / 0.2e1 + t3403 / 0.2e1) * t4770 - t4035 + (t3841 / 0.2e1 + t3813 + t4168) * t3776 * t4526) * t4629 + (0.4e1 * t3754 + t4034 + t4950) * t4234 - t3982) * t3924 + 0.2e1 * t4038 + ((t4396 + t4937) * t4193 + (t3372 + t4209) * t3842 + pkin(2) * t3276) * t4758 + (((t3403 - t4599) * t3915 + t3294 * pkin(1)) * t3895 - 0.2e1 * t4235 + (t4079 + t4943) * t4283) * t4719 + (t4917 + (t3697 + t4950) * t3915) * t4225 - (t3237 * t3929 + t3318 * t3852) * t3842 - t3276 * t4873) * t4488) * t3949;
t4856 = pkin(7) * t3117;
t4989 = t3714 * t4834 + (pkin(2) * t4658 + pkin(7) * t4231) * t3474 + t3307 + t4856;
t3094 = t3130 * t4742 + t3115;
t4448 = t3895 * t4730;
t4988 = -t4448 * t3478 - t3094;
t3095 = t3131 * t4740 + t3116;
t4446 = t3895 * t4728;
t4987 = -t4446 * t3479 - t3095;
t3096 = t3132 * t4738 + t3117;
t4444 = t3895 * t4726;
t4986 = -t4444 * t3480 - t3096;
t3127 = t3896 * t3130;
t3409 = t3418 ^ 2 / t3553 ^ 2;
t3778 = pkin(7) * t3909 + pkin(1);
t4293 = t4823 * t3410;
t4096 = t3896 * t4293;
t4315 = pkin(6) * t4448;
t4781 = (pkin(7) * t4715 - pkin(2) + t3835) * t3872;
t4855 = pkin(7) * t3118;
t4985 = -t3127 * t3781 + (0.2e1 * t4096 + t3409) * pkin(2) + (t3778 * t3918 + t3835 - t4315 - t4781) * t3478 - t4855;
t3128 = t3896 * t3131;
t3411 = t3419 ^ 2 / t3554 ^ 2;
t3779 = pkin(7) * t3912 + pkin(1);
t4289 = t4822 * t3412;
t4095 = t3896 * t4289;
t4314 = pkin(6) * t4446;
t4780 = (pkin(7) * t4709 - pkin(2) + t3839) * t3872;
t4854 = pkin(7) * t3119;
t4984 = -t3128 * t3782 + (0.2e1 * t4095 + t3411) * pkin(2) + (t3779 * t3921 + t3839 - t4314 - t4780) * t3479 - t4854;
t3129 = t3896 * t3132;
t3413 = t3420 ^ 2 / t3555 ^ 2;
t3780 = pkin(7) * t3915 + pkin(1);
t4285 = t4821 * t3414;
t4094 = t3896 * t4285;
t4313 = pkin(6) * t4444;
t4779 = (pkin(7) * t4703 - pkin(2) + t3843) * t3872;
t4853 = pkin(7) * t3120;
t4983 = -t3129 * t3783 + (0.2e1 * t4094 + t3413) * pkin(2) + (t3780 * t3924 + t3843 - t4313 - t4779) * t3480 - t4853;
t3707 = t3836 + t3778;
t4632 = 0.2e1 * t3130;
t4979 = t3895 * (t3115 * t4967 - (pkin(6) * t3118 - t4858) * t3909) - (-t3707 * t3918 + t4781) * t4632 - (-t3118 * t3784 + t4591 * t4632) * t3896;
t3709 = t3840 + t3779;
t4631 = 0.2e1 * t3131;
t4978 = t3895 * (t3116 * t4966 - (pkin(6) * t3119 - t4857) * t3912) - (-t3709 * t3921 + t4780) * t4631 - (-t3119 * t3785 + t4590 * t4631) * t3896;
t3711 = t3844 + t3780;
t4630 = 0.2e1 * t3132;
t4977 = t3895 * (t3117 * t4965 - (pkin(6) * t3120 - t4856) * t3915) - (-t3711 * t3924 + t4779) * t4630 - (-t3120 * t3786 + t4589 * t4630) * t3896;
t4849 = t4894 * pkin(6);
t4955 = t3451 - t3409;
t4954 = t3453 - t3411;
t4953 = t3455 - t3413;
t4925 = -0.4e1 * pkin(2);
t4921 = 0.2e1 * pkin(7);
t4920 = -0.2e1 * t3466 + t3452;
t4919 = -0.2e1 * t3467 + t3454;
t4918 = -0.2e1 * t3468 + t3456;
t4912 = -0.2e1 * t3895;
t4911 = 0.2e1 * t3895;
t4910 = -0.2e1 * t3896;
t4909 = -0.2e1 * t3908;
t4907 = -0.2e1 * t3911;
t4905 = -0.2e1 * t3914;
t4903 = -0.2e1 * t3917;
t4901 = -0.2e1 * t3920;
t4899 = -0.2e1 * t3923;
t4895 = -0.4e1 * t3872 + 0.4e1;
t4893 = t4913 - 0.2e1;
t4891 = 0.4e1 * t3879 - 0.2e1;
t4889 = 0.4e1 * t3883 - 0.2e1;
t4887 = 0.4e1 * t3887 - 0.2e1;
t4866 = pkin(6) * t3895;
t4844 = t3094 * t3918;
t4843 = t3095 * t3921;
t4842 = t3096 * t3924;
t4837 = t3130 * t3918;
t4835 = t3131 * t3921;
t4833 = t3132 * t3924;
t3592 = -t3764 * t4772 + t3896 * t4462;
t4775 = t3742 * t3772;
t3565 = -t3592 * t3910 + t3919 * t4775;
t3568 = t3592 * t3919 + t3910 * t4775;
t3631 = -t3764 * t4748 + t3772 * t3896;
t3595 = -t3631 * t3910 + t3749 * t3919;
t3598 = t3631 * t3919 + t3749 * t3910;
t4459 = t3772 * t4719;
t3607 = 0.2e1 * t3910 * t4459 + t3919 * t4778;
t4221 = t3919 * t4459;
t4421 = t3910 * t4778;
t3487 = (t3607 * t3825 + 0.2e1 * (t4221 - t4421 / 0.2e1) * t3822) * t3881 + (t3565 * t3825 - t3568 * t3822) * t3918 + (t3595 * t3825 - t3598 * t3822) * t3929;
t3517 = 0.1e1 / (t3583 + (t3679 * t3917 + t3908 * t4603 - t4394) * t3909 + t3772 * t4616);
t4820 = t3487 * t3517;
t3593 = -t3767 * t4771 + t3896 * t4461;
t4774 = t3743 * t3774;
t3566 = -t3593 * t3913 + t3922 * t4774;
t3569 = t3593 * t3922 + t3913 * t4774;
t3632 = -t3767 * t4746 + t3774 * t3896;
t3596 = -t3632 * t3913 + t3750 * t3922;
t3599 = t3632 * t3922 + t3750 * t3913;
t4458 = t3774 * t4719;
t3608 = 0.2e1 * t3913 * t4458 + t3922 * t4777;
t4220 = t3922 * t4458;
t4417 = t3913 * t4777;
t3488 = (t3608 * t3826 + 0.2e1 * (t4220 - t4417 / 0.2e1) * t3823) * t3885 + (t3566 * t3826 - t3569 * t3823) * t3921 + (t3596 * t3826 - t3599 * t3823) * t3929;
t3518 = 0.1e1 / (t3584 + (t3679 * t3920 + t3911 * t4603 - t4393) * t3912 + t3774 * t4615);
t4819 = t3488 * t3518;
t3594 = -t3770 * t4770 + t3896 * t4460;
t4773 = t3744 * t3776;
t3567 = -t3594 * t3916 + t3925 * t4773;
t3570 = t3594 * t3925 + t3916 * t4773;
t3633 = -t3770 * t4744 + t3776 * t3896;
t3597 = -t3633 * t3916 + t3751 * t3925;
t3600 = t3633 * t3925 + t3751 * t3916;
t4457 = t3776 * t4719;
t3609 = 0.2e1 * t3916 * t4457 + t3925 * t4776;
t4219 = t3925 * t4457;
t4413 = t3916 * t4776;
t3489 = (t3609 * t3827 + 0.2e1 * (t4219 - t4413 / 0.2e1) * t3824) * t3889 + (t3567 * t3827 - t3570 * t3824) * t3924 + (t3597 * t3827 - t3600 * t3824) * t3929;
t3519 = 0.1e1 / (t3585 + (t3679 * t3923 + t3914 * t4603 - t4392) * t3915 + t3776 * t4614);
t4818 = t3489 * t3519;
t3490 = ((-0.2e1 * t4221 + t4421) * t3825 + t3607 * t3822) * t3881 + (t3565 * t3822 + t3568 * t3825) * t3918 + (t3595 * t3822 + t3598 * t3825) * t3929;
t4817 = t3490 * t3517;
t3491 = ((-0.2e1 * t4220 + t4417) * t3826 + t3608 * t3823) * t3885 + (t3566 * t3823 + t3569 * t3826) * t3921 + (t3596 * t3823 + t3599 * t3826) * t3929;
t4816 = t3491 * t3518;
t3492 = ((-0.2e1 * t4219 + t4413) * t3827 + t3609 * t3824) * t3889 + (t3567 * t3824 + t3570 * t3827) * t3924 + (t3597 * t3824 + t3600 * t3827) * t3929;
t4815 = t3492 * t3519;
t3646 = t3822 * t3919 + t3825 * t3910;
t3647 = -t3822 * t3910 + t3825 * t3919;
t3990 = ((pkin(3) * t4768 - pkin(6)) * t3917 + t3908 * t3673) * t4750 - (t3701 * t3917 + (t3763 - 0.2e1 * t4870) * t3909) * t3872 - (-t3763 + t4870) * t3909;
t4017 = -(t3746 * t3909 + t4189) * t4749 + (pkin(1) + t4403) * t4725;
t3493 = -t3646 * t3990 + t3647 * t4017;
t3541 = 0.1e1 / (t3622 + t3895 * (t3625 * t3917 + t4167));
t4814 = t3493 * t3541;
t3494 = t3646 * t4017 + t3647 * t3990;
t4813 = t3494 * t3541;
t3648 = t3823 * t3922 + t3826 * t3913;
t3649 = -t3823 * t3913 + t3826 * t3922;
t3989 = ((pkin(3) * t4766 - pkin(6)) * t3920 + t3911 * t3674) * t4750 - (t3702 * t3920 + (t3766 - 0.2e1 * t4869) * t3912) * t3872 - (-t3766 + t4869) * t3912;
t4016 = -(t3747 * t3912 + t4188) * t4747 + (pkin(1) + t4402) * t4723;
t3495 = -t3648 * t3989 + t3649 * t4016;
t3542 = 0.1e1 / (t3623 + t3895 * (t3626 * t3920 + t4166));
t4812 = t3495 * t3542;
t3496 = t3648 * t4016 + t3649 * t3989;
t4811 = t3496 * t3542;
t3650 = t3824 * t3925 + t3827 * t3916;
t3651 = -t3824 * t3916 + t3827 * t3925;
t3988 = ((pkin(3) * t4764 - pkin(6)) * t3923 + t3914 * t3675) * t4750 - (t3703 * t3923 + (t3769 - 0.2e1 * t4868) * t3915) * t3872 - (-t3769 + t4868) * t3915;
t4015 = -(t3748 * t3915 + t4187) * t4745 + (pkin(1) + t4401) * t4721;
t3497 = -t3650 * t3988 + t3651 * t4015;
t3543 = 0.1e1 / (t3624 + t3895 * (t3627 * t3923 + t4165));
t4810 = t3497 * t3543;
t3498 = t3650 * t4015 + t3651 * t3988;
t4809 = t3498 * t3543;
t4470 = t3647 * t4749;
t3499 = -(t3646 * t3918 + t3647 * t4730) * t4870 + (pkin(3) * t4470 + (-pkin(2) * t3646 + t3647 * t4719) * t3918 - (t3646 * t3929 + t3647 * t4880) * t3909) * t3917 + pkin(2) * t4470;
t4808 = t3499 * t3536;
t4471 = t3646 * t4749;
t3500 = -(-t3646 * t4730 + t3647 * t3918) * t4870 + (-pkin(3) * t4471 + (-pkin(2) * t3647 - t3646 * t4719) * t3918 + (t3646 * t4880 - t3647 * t3929) * t3909) * t3917 - pkin(2) * t4471;
t4807 = t3500 * t3536;
t4468 = t3649 * t4747;
t3501 = -(t3648 * t3921 + t3649 * t4728) * t4869 + (pkin(3) * t4468 + (-pkin(2) * t3648 + t3649 * t4719) * t3921 - (t3648 * t3929 + t3649 * t4880) * t3912) * t3920 + pkin(2) * t4468;
t4806 = t3501 * t3537;
t4469 = t3648 * t4747;
t3502 = -(-t3648 * t4728 + t3649 * t3921) * t4869 + (-pkin(3) * t4469 + (-pkin(2) * t3649 - t3648 * t4719) * t3921 + (t3648 * t4880 - t3649 * t3929) * t3912) * t3920 - pkin(2) * t4469;
t4805 = t3502 * t3537;
t4466 = t3651 * t4745;
t3503 = -(t3650 * t3924 + t3651 * t4726) * t4868 + (pkin(3) * t4466 + (-pkin(2) * t3650 + t3651 * t4719) * t3924 - (t3650 * t3929 + t3651 * t4880) * t3915) * t3923 + pkin(2) * t4466;
t4804 = t3503 * t3535;
t4467 = t3650 * t4745;
t3504 = -(-t3650 * t4726 + t3651 * t3924) * t4868 + (-pkin(3) * t4467 + (-pkin(2) * t3651 - t3650 * t4719) * t3924 + (t3650 * t4880 - t3651 * t3929) * t3915) * t3923 - pkin(2) * t4467;
t4803 = t3504 * t3535;
t4622 = -0.2e1 * t4763;
t3505 = t3865 * t3918 + (-t3764 * t4443 - t3749 + (t3881 * t4622 + t3872) * t3929) * t3772 + ((t3872 * t4778 - t4002) * t3918 - t3764 * t4439) * t3909;
t4802 = t3505 * t3538;
t3506 = t3865 * t3921 + (-t3767 * t4442 - t3750 + (t3885 * t4622 + t3872) * t3929) * t3774 + ((t3872 * t4777 - t4001) * t3921 - t3767 * t4439) * t3912;
t4801 = t3506 * t3539;
t3507 = t3865 * t3924 + (-t3770 * t4441 - t3751 + (t3889 * t4622 + t3872) * t3929) * t3776 + ((t3872 * t4776 - t4000) * t3924 - t3770 * t4439) * t3915;
t4800 = t3507 * t3540;
t4299 = t4892 * t4748;
t4799 = ((-t3701 * t4750 + t4849) * t3917 + (-t3673 * t3872 + t3692 * t3918 - t4315) * t3908 + (t3896 * t4299 - t4207 * t4717) * pkin(3)) * t3533;
t4298 = t4890 * t4746;
t4798 = ((-t3702 * t4750 + t4849) * t3920 + (-t3674 * t3872 + t3693 * t3921 - t4314) * t3911 + (t3896 * t4298 - t4206 * t4711) * pkin(3)) * t3534;
t4297 = t4888 * t4744;
t4797 = ((-t3703 * t4750 + t4849) * t3923 + (-t3675 * t3872 + t3694 * t3924 - t4313) * t3914 + (t3896 * t4297 - t4205 * t4705) * pkin(3)) * t3532;
t3579 = -t4744 * t4868 + (-pkin(3) * t4727 + t3703 * t3895) * t3923 - pkin(2) * t4727;
t4796 = t3535 * t3579;
t3577 = -t4748 * t4870 + (-pkin(3) * t4731 + t3701 * t3895) * t3917 - pkin(2) * t4731;
t4795 = t3536 * t3577;
t3578 = -t4746 * t4869 + (-pkin(3) * t4729 + t3702 * t3895) * t3920 - pkin(2) * t4729;
t4794 = t3537 * t3578;
t3870 = t3895 ^ 2;
t4759 = t3870 * t3949;
t4743 = t3895 * t3917;
t4741 = t3895 * t3920;
t4739 = t3895 * t3923;
t4734 = t3896 * t3118;
t4733 = t3896 * t3119;
t4732 = t3896 * t3120;
t4718 = t3908 * t3909;
t4712 = t3911 * t3912;
t4706 = t3914 * t3915;
t4690 = t4994 * t3908 + t4991 * t3917;
t4689 = t4991 * t3908 - t4994 * t3917;
t4688 = t4993 * t3911 + t4990 * t3920;
t4687 = t4990 * t3911 - t4993 * t3920;
t4686 = t4992 * t3914 + t4989 * t3923;
t4685 = t4989 * t3914 - t4992 * t3923;
t3110 = t3127 + t3118;
t4152 = t3918 * t4302;
t3277 = t4152 + 0.2e1 * t4281;
t4501 = t3917 * t4823;
t4247 = t3909 * t4501;
t4513 = t3918 * t3478;
t4672 = t4660 * t3472 - 0.2e1 * t4142;
t4684 = 0.2e1 * t3110 * t4717 + t3130 * t4299 + ((t4513 * t4912 + 0.4e1 * t4125) * t3896 + 0.4e1 * t4142) * t3879 + t3277 * t4247 * t4909 + t4672;
t3112 = t3128 + t3119;
t4151 = t3921 * t4301;
t3278 = t4151 + 0.2e1 * t4275;
t4491 = t3920 * t4822;
t4239 = t3912 * t4491;
t4511 = t3921 * t3479;
t4671 = t4659 * t3473 - 0.2e1 * t4139;
t4683 = 0.2e1 * t3112 * t4711 + t3131 * t4298 + ((t4511 * t4912 + 0.4e1 * t4117) * t3896 + 0.4e1 * t4139) * t3883 + t3278 * t4239 * t4907 + t4671;
t3114 = t3129 + t3120;
t4150 = t3924 * t4300;
t3279 = t4150 + 0.2e1 * t4269;
t4480 = t3923 * t4821;
t4230 = t3915 * t4480;
t4509 = t3924 * t3480;
t4670 = t4658 * t3474 - 0.2e1 * t4136;
t4682 = 0.2e1 * t3114 * t4705 + t3132 * t4297 + ((t4509 * t4912 + 0.4e1 * t4109) * t3896 + 0.4e1 * t4136) * t3887 + t3279 * t4230 * t4905 + t4670;
t4465 = t3712 * t4750;
t3238 = 0.2e1 * t3712 * t4536 + (t4465 - t4849) * t4823;
t4681 = -t3707 * t3917 * t4838 - t3238 * t4501 + (-t4864 * t4838 + t4985) * t3908;
t4680 = (-pkin(6) * t4700 + t3707 * t3908) * t4838 + t3238 * t4503 + t4985 * t3917;
t4464 = t3713 * t4750;
t3239 = 0.2e1 * t3713 * t4531 + (t4464 - t4849) * t4822;
t4679 = (-pkin(6) * t4698 + t3709 * t3911) * t4836 + t3239 * t4493 + t4984 * t3920;
t4678 = -t3709 * t3920 * t4836 - t3239 * t4491 + (-t4862 * t4836 + t4984) * t3911;
t4463 = t3714 * t4750;
t3240 = 0.2e1 * t3714 * t4526 + (t4463 - t4849) * t4821;
t4677 = -t3711 * t3923 * t4834 - t3240 * t4480 + (-t4860 * t4834 + t4983) * t3914;
t4676 = (-pkin(6) * t4696 + t3711 * t3914) * t4834 + t3240 * t4482 + t4983 * t3923;
t4657 = t3478 - t3409;
t4656 = t3479 - t3411;
t4655 = t3480 - t3413;
t4625 = -0.2e1 * t3410;
t4624 = -0.2e1 * t3412;
t4623 = -0.2e1 * t3414;
t4621 = -0.2e1 * t4750;
t4620 = -0.2e1 * t4717;
t4619 = -0.2e1 * t4711;
t4618 = -0.2e1 * t4705;
t4617 = t4893 * pkin(6);
t3310 = t3409 + t3451;
t4598 = t3310 * t4866;
t3311 = t3411 + t3453;
t4597 = t3311 * t4866;
t3312 = t3413 + t3455;
t4596 = t3312 * t4866;
t3103 = t3127 - t4296 / 0.2e1 + (-t4545 / 0.2e1 + t3157 * t4412) * t3536;
t4560 = t3103 * t4748;
t3104 = t3128 - t4295 / 0.2e1 + (-t4544 / 0.2e1 + t3158 * t4411) * t3537;
t4559 = t3104 * t4746;
t3105 = t3129 - t4294 / 0.2e1 + (-t4543 / 0.2e1 + t3159 * t4410) * t3535;
t4558 = t3105 * t4744;
t4557 = t3118 * t4742;
t4556 = t3119 * t4740;
t4555 = t3120 * t4738;
t4554 = t3130 * t4799;
t4553 = t3130 * t3541 * t3909;
t4552 = t3541 * t4837;
t4551 = t3131 * t4798;
t4550 = t3131 * t3542 * t3912;
t4549 = t3542 * t4835;
t4548 = t3132 * t4797;
t4547 = t3132 * t3543 * t3915;
t4546 = t3543 * t4833;
t4533 = t3917 * t3410;
t4528 = t3920 * t3412;
t4522 = t3923 * t3414;
t4452 = t3881 * t3478;
t4451 = t3885 * t3479;
t4450 = t3889 * t3480;
t4438 = t3895 * t4718;
t4437 = t3895 * t4716;
t4435 = t3895 * t4712;
t4434 = t3895 * t4710;
t4432 = t3895 * t4706;
t4431 = t3895 * t4704;
t4423 = t3908 * t4716;
t4419 = t3911 * t4710;
t4415 = t3914 * t4704;
t4380 = t3517 * t4681;
t4379 = t3517 * t4680;
t4378 = t3518 * t4679;
t4377 = t3518 * t4678;
t4376 = t3519 * t4677;
t4375 = t3519 * t4676;
t3042 = -t3117 * t3783 * t3896 + ((-pkin(6) * t3117 - t4853) * t3924 + t3120 * t4874) * t3895 + (-0.2e1 * t4463 + t4617) * t3132;
t3223 = (-pkin(7) * t3413 + t4136 * t4922 + t3438) * t3915 + pkin(1) * t3455;
t3234 = t3438 + (pkin(1) * t3312 + t4009) * t3915;
t3258 = t3375 - t3303;
t4266 = t3923 * t3456;
t4178 = pkin(2) * t4266;
t3288 = t4524 * t4921 + t4178;
t3306 = t3401 - t3444;
t3360 = t3450 + t4319;
t4039 = t3780 * t4109;
t4137 = t3915 * t4285;
t4147 = t3303 * t4231;
t4374 = t3535 * (-t4977 * t3914 - t3042 * t3923 + 0.2e1 * (t3288 * t3889 + (pkin(7) * t4266 + t4524 * t4924) * t4703 - t4178 + t3914 * t3303) * t4485 + ((t3306 * t4232 - t3360 * t4522) * t4971 + (t3307 + 0.2e1 * t4147) * t3923 + t3234 * t3914) * t3896 - 0.2e1 * t3288 * t4484 + (t4039 * t4899 + t3914 * t4596 + (0.4e1 * t3914 * t4137 + t4739 * t4953) * pkin(2)) * t3924 + t3223 * t4739 + 0.2e1 * t3258 * t4482);
t4090 = t4268 / 0.2e1;
t4172 = pkin(2) * t4268;
t4304 = pkin(7) * t4522;
t4373 = t3535 * (t4977 * t3923 - t3042 * t3914 - 0.4e1 * ((t4304 - t4172 / 0.2e1) * t3889 - (pkin(2) * t4522 + pkin(7) * t4090) * t4703 + (t3447 / 0.2e1 - t3400 / 0.2e1) * t3923 + pkin(2) * t4090) * t4485 + ((-t3306 * t3895 * t4480 - t3360 * t4524) * t4971 - t3234 * t3923 + (-t4064 + t4147) * t4904) * t3896 + (-0.2e1 * t4172 + 0.4e1 * t4304) * t4484 + ((t4137 * t4925 - t4596) * t3923 + (t4039 + (t3413 / 0.2e1 - t3455 / 0.2e1) * t4881) * t4905) * t3924 - 0.2e1 * t3258 * t4480 + t3223 * t4745);
t3075 = t3132 * t4329 + t3132 - t4732;
t3204 = t4044 * t4910 + (t4150 - t4269) * t3414;
t4216 = t4738 * t3413;
t4284 = (t3468 + t3456) * t4525;
t4372 = t3535 * (t3075 * t4618 + t4558 * t4887 + (0.2e1 * t4216 + 0.4e1 * t4284) * t3887 + 0.4e1 * t3204 * t4415 - 0.2e1 * t4284 - t4216 - 0.2e1 * t4888 * t4997);
t3332 = t3474 + t3414 / 0.2e1;
t4222 = t3895 * t4415;
t4371 = t3535 * (t3075 * t3887 + 0.2e1 * t3105 * t4222 + t3114 * t3896 + (-t4284 - t4216 / 0.2e1 + t4997) * t4618 + (-t3204 * t3887 - t3332 * t4269) * t4974);
t4022 = t4109 * t4971;
t3243 = -t3895 * t4953 + t4022;
t3267 = t3895 * t4022 - t3455;
t3805 = t3889 - 0.1e1 / 0.2e1;
t4370 = t3535 * (-t3923 * t4555 + t3117 * (t4432 - t4721) + (t3923 * t4621 - t4706 * t4893) * t4833 + t3243 * t4704 + t3267 * t4727 + (t3872 * t4132 * t4899 + (t3805 * t3914 * t4895 + t4425 * t4911) * t3414) * t4821);
t4369 = t3535 * (-t3914 * t4555 - t3117 * (t4431 + t4727) + (t4704 * t4893 - 0.2e1 * t4445) * t4833 + t3243 * t4706 - t3267 * t4721 + (-((t3889 * t4623 + t3414) * t3923 + t3914 * t4132) * t3872 + t3896 * t4135 - 0.2e1 * t3805 * t4522) * t4381);
t3040 = -t3115 * t3781 * t3896 + ((-pkin(6) * t3115 - t4855) * t3918 + t3118 * t4878) * t3895 + (-0.2e1 * t4465 + t4617) * t3130;
t3224 = (-pkin(7) * t3409 + t4142 * t4922 + t3436) * t3909 + pkin(1) * t3451;
t3232 = t3436 + (pkin(1) * t3310 + t4011) * t3909;
t3256 = t3373 - t3301;
t4278 = t3917 * t3452;
t4182 = pkin(2) * t4278;
t3286 = t4535 * t4921 + t4182;
t3304 = t3390 - t3442;
t3358 = t3448 + t4321;
t4043 = t3778 * t4125;
t4143 = t3909 * t4293;
t4149 = t3301 * t4248;
t4368 = t3536 * (-t4979 * t3908 - t3040 * t3917 + 0.2e1 * (t3286 * t3881 + (pkin(7) * t4278 + t4535 * t4924) * t4715 - t4182 + t3908 * t3301) * t4506 + ((t3304 * t4249 - t3358 * t4533) * t4973 + (t3308 + 0.2e1 * t4149) * t3917 + t3908 * t3232) * t3896 - 0.2e1 * t3286 * t4505 + (t4043 * t4903 + t3908 * t4598 + (0.4e1 * t3908 * t4143 + t4743 * t4955) * pkin(2)) * t3918 + t3224 * t4743 + 0.2e1 * t3256 * t4503);
t4092 = t4280 / 0.2e1;
t4174 = pkin(2) * t4280;
t4306 = pkin(7) * t4533;
t4367 = t3536 * (t4979 * t3917 - t3040 * t3908 - 0.4e1 * ((t4306 - t4174 / 0.2e1) * t3881 - (pkin(2) * t4533 + pkin(7) * t4092) * t4715 + (t3445 / 0.2e1 - t3389 / 0.2e1) * t3917 + pkin(2) * t4092) * t4506 + ((-t3304 * t3895 * t4501 - t3358 * t4535) * t4973 - t3232 * t3917 + (-t4066 + t4149) * t4908) * t3896 + (-0.2e1 * t4174 + 0.4e1 * t4306) * t4505 + ((t4143 * t4925 - t4598) * t3917 + (t4043 + (t3409 / 0.2e1 - t3451 / 0.2e1) * t4881) * t4909) * t3918 - 0.2e1 * t3256 * t4501 + t3224 * t4749);
t3073 = t3130 * t4331 + t3130 - t4734;
t3202 = t4046 * t4910 + (t4152 - t4281) * t3410;
t4218 = t4742 * t3409;
t4292 = (t3466 + t3452) * t4429;
t4366 = t3536 * (t3073 * t4620 + t4560 * t4891 + (0.2e1 * t4218 + 0.4e1 * t4292) * t3879 + 0.4e1 * t3202 * t4423 - 0.2e1 * t4292 - t4218 - 0.2e1 * t4892 * t4995);
t3330 = t3472 + t3410 / 0.2e1;
t4224 = t3895 * t4423;
t4365 = t3536 * (t3073 * t3879 + 0.2e1 * t3103 * t4224 + t3110 * t3896 + (-t4292 - t4218 / 0.2e1 + t4995) * t4620 + (-t3202 * t3879 - t3330 * t4281) * t4976);
t4021 = t4125 * t4973;
t3241 = -t3895 * t4955 + t4021;
t3265 = t3895 * t4021 - t3451;
t3803 = t3881 - 0.1e1 / 0.2e1;
t4364 = t3536 * (-t3917 * t4557 + t3115 * (t4438 - t4725) + (t3917 * t4621 - t4718 * t4893) * t4837 + t3241 * t4716 + t3265 * t4731 + (t3872 * t4134 * t4903 + (t3803 * t3908 * t4895 + t4427 * t4911) * t3410) * t4823);
t4363 = t3536 * (-t3908 * t4557 - t3115 * (t4437 + t4731) + (t4716 * t4893 - 0.2e1 * t4449) * t4837 + t3241 * t4718 - t3265 * t4725 + (-((t3881 * t4625 + t3410) * t3917 + t3908 * t4134) * t3872 + t3896 * t4141 - 0.2e1 * t3803 * t4533) * t4383);
t3041 = -t3116 * t3782 * t3896 + ((-pkin(6) * t3116 - t4854) * t3921 + t3119 * t4876) * t3895 + (-0.2e1 * t4464 + t4617) * t3131;
t3225 = (-pkin(7) * t3411 + t4139 * t4922 + t3437) * t3912 + pkin(1) * t3453;
t3233 = t3437 + (pkin(1) * t3311 + t4010) * t3912;
t3257 = t3374 - t3302;
t4272 = t3920 * t3454;
t4180 = pkin(2) * t4272;
t3287 = t4530 * t4921 + t4180;
t3305 = t3396 - t3443;
t3359 = t3449 + t4320;
t4041 = t3779 * t4117;
t4140 = t3912 * t4289;
t4148 = t3302 * t4240;
t4362 = t3537 * (-t4978 * t3911 - t3041 * t3920 + 0.2e1 * (t3287 * t3885 + (pkin(7) * t4272 + t4530 * t4924) * t4709 - t4180 + t3911 * t3302) * t4496 + ((t3305 * t4241 - t3359 * t4528) * t4972 + (t3309 + 0.2e1 * t4148) * t3920 + t3911 * t3233) * t3896 - 0.2e1 * t3287 * t4495 + (t4041 * t4901 + t3911 * t4597 + (0.4e1 * t3911 * t4140 + t4741 * t4954) * pkin(2)) * t3921 + t3225 * t4741 + 0.2e1 * t3257 * t4493);
t4091 = t4274 / 0.2e1;
t4173 = pkin(2) * t4274;
t4305 = pkin(7) * t4528;
t4361 = t3537 * (t4978 * t3920 - t3911 * t3041 - 0.4e1 * ((t4305 - t4173 / 0.2e1) * t3885 - (pkin(2) * t4528 + pkin(7) * t4091) * t4709 + (t3446 / 0.2e1 - t3395 / 0.2e1) * t3920 + pkin(2) * t4091) * t4496 + ((-t3305 * t3895 * t4491 - t3359 * t4530) * t4972 - t3233 * t3920 + (-t4065 + t4148) * t4906) * t3896 + (-0.2e1 * t4173 + 0.4e1 * t4305) * t4495 + ((t4140 * t4925 - t4597) * t3920 + (t4041 + (t3411 / 0.2e1 - t3453 / 0.2e1) * t4881) * t4907) * t3921 - 0.2e1 * t3257 * t4491 + t3225 * t4747);
t3074 = t3131 * t4330 + t3131 - t4733;
t3203 = t4045 * t4910 + (t4151 - t4275) * t3412;
t4217 = t4740 * t3411;
t4288 = (t3467 + t3454) * t4428;
t4360 = t3537 * (t3074 * t4619 + t4559 * t4889 + (0.2e1 * t4217 + 0.4e1 * t4288) * t3883 + 0.4e1 * t3203 * t4419 - 0.2e1 * t4288 - t4217 - 0.2e1 * t4890 * t4996);
t3331 = t3473 + t3412 / 0.2e1;
t4223 = t3895 * t4419;
t4359 = t3537 * (t3074 * t3883 + 0.2e1 * t3104 * t4223 + t3112 * t3896 + (-t4288 - t4217 / 0.2e1 + t4996) * t4619 + (-t3203 * t3883 - t3331 * t4275) * t4975);
t4023 = t4117 * t4972;
t3242 = -t3895 * t4954 + t4023;
t3266 = t3895 * t4023 - t3453;
t3804 = t3885 - 0.1e1 / 0.2e1;
t4358 = t3537 * (-t3920 * t4556 + t3116 * (t4435 - t4723) + (t3920 * t4621 - t4712 * t4893) * t4835 + t3242 * t4710 + t3266 * t4729 + (t3872 * t4133 * t4901 + (t3804 * t3911 * t4895 + t4426 * t4911) * t3412) * t4822);
t4357 = t3537 * (-t3911 * t4556 - t3116 * (t4434 + t4729) + (t4710 * t4893 - 0.2e1 * t4447) * t4835 + t3242 * t4712 - t3266 * t4723 + (-((t3885 * t4624 + t3412) * t3920 + t3911 * t4133) * t3872 + t3896 * t4138 - 0.2e1 * t3804 * t4528) * t4382);
t4356 = t3541 * t4690;
t4355 = t3541 * t4689;
t4354 = t3541 * t4684;
t4353 = t3542 * t4688;
t4352 = t3542 * t4687;
t4351 = t3542 * t4683;
t4350 = t3543 * t4686;
t4349 = t3543 * t4685;
t4348 = t3543 * t4682;
t4344 = 0.2e1 * t4452;
t4343 = 0.2e1 * t4451;
t4342 = 0.2e1 * t4450;
t3088 = t3110 * t3908 + t3130 * t4437;
t4340 = t3088 * t3908 - t4672 * t4717 + (t3277 * t3879 - t4281) * t4502;
t3089 = t3112 * t3911 + t3131 * t4434;
t4339 = t3089 * t3911 - t4671 * t4711 + (t3278 * t3883 - t4275) * t4492;
t3090 = t3114 * t3914 + t3132 * t4431;
t4338 = t3090 * t3914 - t4670 * t4705 + (t3279 * t3887 - t4269) * t4481;
t3469 = -0.2e1 * t4452;
t3361 = -t3478 + t4344;
t3969 = t3361 * t3872 + t3265 + t3478;
t4337 = (t3469 + t3969) * t3908 + t4988 * t3917;
t4336 = (-t3969 + t4344) * t3917 + t4988 * t3908;
t3470 = -0.2e1 * t4451;
t3362 = -t3479 + t4343;
t3968 = t3362 * t3872 + t3266 + t3479;
t4335 = (t3470 + t3968) * t3911 + t4987 * t3920;
t4334 = (-t3968 + t4343) * t3920 + t4987 * t3911;
t3471 = -0.2e1 * t4450;
t3363 = -t3480 + t4342;
t3967 = t3363 * t3872 + t3267 + t3480;
t4333 = (t3471 + t3967) * t3914 + t4986 * t3923;
t4332 = (-t3967 + t4342) * t3923 + t4986 * t3914;
t4263 = t4799 * t3478;
t4262 = t3541 * t4514;
t4261 = t3541 * t4513;
t4260 = t4798 * t3479;
t4259 = t3542 * t4512;
t4258 = t3542 * t4511;
t4257 = t4797 * t3480;
t4256 = t3543 * t4510;
t4255 = t3543 * t4509;
t4254 = t3505 * t4508;
t4253 = t3517 * t4500;
t4246 = t3506 * t4498;
t4245 = t3518 * t4490;
t4238 = t3507 * t4488;
t4237 = t3519 * t4479;
t4164 = t3541 * t4340;
t4163 = t3541 * t4337;
t4162 = t3541 * t4336;
t4161 = t3542 * t4339;
t4160 = t3542 * t4335;
t4159 = t3542 * t4334;
t4158 = t3543 * t4338;
t4157 = t3543 * t4333;
t4156 = t3543 * t4332;
t4146 = t3350 * t3541 * t4502;
t4145 = t3352 * t3542 * t4492;
t4144 = t3354 * t3543 * t4481;
t4128 = t3487 * t4253;
t4127 = t3490 * t4253;
t4126 = t3918 * t4254;
t4120 = t3488 * t4245;
t4119 = t3491 * t4245;
t4118 = t3921 * t4246;
t4112 = t3489 * t4237;
t4111 = t3492 * t4237;
t4110 = t3924 * t4238;
t4105 = t3493 * t4261;
t4104 = t3494 * t4261;
t4103 = t3495 * t4258;
t4102 = t3496 * t4258;
t4101 = t3497 * t4255;
t4100 = t3498 * t4255;
t4099 = t3918 * t4263;
t4098 = t3921 * t4260;
t4097 = t3924 * t4257;
t3108 = t4732 / 0.2e1 + t3132;
t3333 = t4525 / 0.2e1 + t4821;
t4056 = t3535 * ((t3332 * t4586 + t3333 * t3852) * t4623 + t4558 * t4923 + 0.2e1 * t3108 * t3858);
t4055 = t3535 * ((-t3332 * t4589 + t3333 * t3858) * t4623 - 0.2e1 * t3105 * t4586 - 0.2e1 * t3108 * t3852);
t3106 = t4734 / 0.2e1 + t3130;
t3328 = t4429 / 0.2e1 + t4823;
t4054 = t3536 * ((t3328 * t3850 + t3330 * t4588) * t4625 + t4560 * t4923 + 0.2e1 * t3106 * t3854);
t4053 = t3536 * ((t3328 * t3854 - t3330 * t4591) * t4625 - 0.2e1 * t3103 * t4588 - 0.2e1 * t3106 * t3850);
t3107 = t4733 / 0.2e1 + t3131;
t3329 = t4428 / 0.2e1 + t4822;
t4052 = t3537 * ((t3329 * t3851 + t3331 * t4587) * t4624 + t4559 * t4923 + 0.2e1 * t3107 * t3856);
t4051 = t3537 * ((t3329 * t3856 - t3331 * t4590) * t4624 - 0.2e1 * t3104 * t4587 - 0.2e1 * t3107 * t3851);
t4049 = t3517 * t4143;
t4048 = t3518 * t4140;
t4047 = t3519 * t4137;
t4032 = -t3130 * t3668 + t3478 * (t3854 - t4315);
t4031 = t3130 * (pkin(1) * t4724 - t4591) + t3478 * t4946;
t4030 = -t3131 * t3669 + t3479 * (t3856 - t4314);
t4029 = t3131 * (pkin(1) * t4722 - t4590) + t3479 * t4945;
t4028 = -t3132 * t3667 + t3480 * (t3858 - t4313);
t4027 = t3132 * (pkin(1) * t4720 - t4589) + t3480 * t4944;
t4008 = t3541 * t4032;
t4007 = t3541 * t4031;
t4006 = t3542 * t4030;
t4005 = t3542 * t4029;
t4004 = t3543 * t4028;
t4003 = t3543 * t4027;
t3999 = t3535 * (t4523 * t4918 + t4842);
t3113 = 0.2e1 * t3129 + t3120;
t3340 = 0.2e1 * t3474 + t3414;
t3998 = t3535 * (t3340 * t3414 * t3924 + t3113 * t3915);
t3997 = t3535 * (t3113 * t3924 - t3340 * t4523);
t3996 = t3536 * (t4534 * t4920 + t4844);
t3109 = 0.2e1 * t3127 + t3118;
t3334 = 0.2e1 * t3472 + t3410;
t3995 = t3536 * (t3334 * t3410 * t3918 + t3109 * t3909);
t3994 = t3536 * (t3109 * t3918 - t3334 * t4534);
t3993 = t3537 * (t4529 * t4919 + t4843);
t3111 = 0.2e1 * t3128 + t3119;
t3337 = 0.2e1 * t3473 + t3412;
t3992 = t3537 * (t3337 * t3412 * t3921 + t3111 * t3912);
t3991 = t3537 * (t3111 * t3921 - t3337 * t4529);
t3981 = t3535 * (0.4e1 * t3805 * t4285 + t4703 * t4630);
t3980 = t3535 * (t3132 * t3915 ^ 2 + t4137 * t4971);
t3979 = t3536 * (0.4e1 * t3803 * t4293 + t4715 * t4632);
t3978 = t3536 * (t3130 * t3909 ^ 2 + t4143 * t4973);
t3977 = t3537 * (0.4e1 * t3804 * t4289 + t4709 * t4631);
t3976 = t3537 * (t3131 * t3912 ^ 2 + t4140 * t4972);
t3341 = t3474 + 0.2e1 * t3414;
t3338 = t3473 + 0.2e1 * t3412;
t3335 = t3472 + 0.2e1 * t3410;
t3273 = t3341 * t3914 + t3895 * t4230;
t3272 = t3338 * t3911 + t3895 * t4239;
t3271 = t3335 * t3908 + t3895 * t4247;
t3270 = t3341 * t3923 - t4093;
t3269 = t3338 * t3920 - t4116;
t3268 = t3335 * t3917 - t4124;
t3189 = (t3480 * t4329 - 0.2e1 * t4094 + t4655) * t4705 - t4888 * t3342 * t4231;
t3188 = (t3479 * t4330 - 0.2e1 * t4095 + t4656) * t4711 - t4890 * t3339 * t4240;
t3187 = (t3478 * t4331 - 0.2e1 * t4096 + t4657) * t4717 - t4892 * t3336 * t4248;
t3174 = (-0.2e1 * t3413 + t3471 + 0.2e1 * t3480) * t3887 + (0.4e1 * t3342 * t4222 - t4525 * t4887) * t4821 + (t4765 * t4888 + t3889) * t3480 - t4655;
t3173 = (-0.2e1 * t3411 + t3470 + 0.2e1 * t3479) * t3883 + (0.4e1 * t3339 * t4223 - t4428 * t4889) * t4822 + (t4767 * t4890 + t3885) * t3479 - t4656;
t3172 = (-0.2e1 * t3409 + t3469 + 0.2e1 * t3478) * t3879 + (0.4e1 * t3336 * t4224 - t4429 * t4891) * t4823 + (t4769 * t4892 + t3881) * t3478 - t4657;
t3087 = t3114 * t3923 - t3132 * t4432;
t3086 = t3112 * t3920 - t3131 * t4435;
t3085 = t3110 * t3917 - t3130 * t4438;
t1 = [t3130 * t4807 + t3131 * t4805 + t3132 * t4803, 0, 0, (t3500 * t3978 + t3502 * t3976 + t3504 * t3980 - t3909 * t4105 - t3912 * t4103 - t3915 * t4101) * t3870, (-t3361 * t4814 - t3362 * t4812 - t3363 * t4810 + t3500 * t3979 + t3502 * t3977 + t3504 * t3981) * t3870, (t3493 * t4553 + t3495 * t4550 + t3497 * t4547 + t3504 * t3998 + t3502 * t3992 + t3500 * t3995 + (-t4101 - t4103 - t4105) * t3896) * t3895, (t3493 * t4552 + t3495 * t4549 + t3497 * t4546 + t3504 * t3997 + t3502 * t3991 + t3500 * t3994 + (t3493 * t4262 + t3495 * t4259 + t3497 * t4256) * t3896) * t3895, t3110 * t4814 + t3112 * t4812 + t3114 * t4810 + (t3110 * t4807 + t3112 * t4805 + t3114 * t4803) * t3896, t3493 * t4007 + t3495 * t4005 + t3497 * t4003 + t3500 * t4054 + t3502 * t4052 + t3504 * t4056, t3493 * t4008 + t3495 * t4006 + t3497 * t4004 + t3500 * t4053 + t3502 * t4051 + t3504 * t4055, t3504 * t4371 + t3502 * t4359 + t3500 * t4365 + t3497 * t4158 + t3495 * t4161 + t3493 * t4164 + (-t3187 * t4820 - t3188 * t4819 - t3189 * t4818) * t4735, t3504 * t4372 + t3502 * t4360 + t3500 * t4366 + t3497 * t4348 + t3495 * t4351 + t3493 * t4354 + (-t3172 * t4820 - t3173 * t4819 - t3174 * t4818) * t4735, t3504 * t4369 + t3502 * t4357 + t3500 * t4363 + t3497 * t4156 + t3495 * t4159 + t3493 * t4162 + ((-t3088 * t4820 - t3089 * t4819 - t3090 * t4818) * t3895 + (-t3268 * t4128 - t3269 * t4120 - t3270 * t4112) * t3870) * t3949, t3504 * t4370 + t3502 * t4358 + t3500 * t4364 + t3497 * t4157 + t3495 * t4160 + t3493 * t4163 + ((-t3085 * t4820 - t3086 * t4819 - t3087 * t4818) * t3895 + (t3271 * t4128 + t3272 * t4120 + t3273 * t4112) * t3870) * t3949, (-t3487 * t4049 - t3488 * t4048 - t3489 * t4047) * t4759 + (t3493 * t4146 + t3495 * t4145 + t3497 * t4144 + t3504 * t3999 + t3502 * t3993 + t3500 * t3996 + (t3094 * t4820 + t3095 * t4819 + t3096 * t4818) * t3949) * t3895, t3504 * t4373 + t3502 * t4361 + t3500 * t4367 + t3497 * t4349 + t3495 * t4352 + t3493 * t4355 + (-t3487 * t4380 - t3488 * t4377 - t3489 * t4376) * t4735, t3504 * t4374 + t3502 * t4362 + t3500 * t4368 + t3497 * t4350 + t3495 * t4353 + t3493 * t4356 + (-t3487 * t4379 - t3488 * t4378 - t3489 * t4375) * t4735, 0; t3130 * t4808 + t3131 * t4806 + t3132 * t4804, 0, 0, (t3499 * t3978 + t3501 * t3976 + t3503 * t3980 - t3909 * t4104 - t3912 * t4102 - t3915 * t4100) * t3870, (-t3361 * t4813 - t3362 * t4811 - t3363 * t4809 + t3499 * t3979 + t3501 * t3977 + t3503 * t3981) * t3870, (t3494 * t4553 + t3496 * t4550 + t3498 * t4547 + t3503 * t3998 + t3501 * t3992 + t3499 * t3995 + (-t4100 - t4102 - t4104) * t3896) * t3895, (t3494 * t4552 + t3496 * t4549 + t3498 * t4546 + t3503 * t3997 + t3501 * t3991 + t3499 * t3994 + (t3494 * t4262 + t3496 * t4259 + t3498 * t4256) * t3896) * t3895, t3110 * t4813 + t3112 * t4811 + t3114 * t4809 + (t3110 * t4808 + t3112 * t4806 + t3114 * t4804) * t3896, t3494 * t4007 + t3496 * t4005 + t3498 * t4003 + t3499 * t4054 + t3501 * t4052 + t3503 * t4056, t3494 * t4008 + t3496 * t4006 + t3498 * t4004 + t3499 * t4053 + t3501 * t4051 + t3503 * t4055, t3503 * t4371 + t3501 * t4359 + t3499 * t4365 + t3498 * t4158 + t3496 * t4161 + t3494 * t4164 + (-t3187 * t4817 - t3188 * t4816 - t3189 * t4815) * t4735, t3503 * t4372 + t3501 * t4360 + t3499 * t4366 + t3498 * t4348 + t3496 * t4351 + t3494 * t4354 + (-t3172 * t4817 - t3173 * t4816 - t3174 * t4815) * t4735, t3503 * t4369 + t3501 * t4357 + t3499 * t4363 + t3498 * t4156 + t3496 * t4159 + t3494 * t4162 + ((-t3088 * t4817 - t3089 * t4816 - t3090 * t4815) * t3895 + (-t3268 * t4127 - t3269 * t4119 - t3270 * t4111) * t3870) * t3949, t3503 * t4370 + t3501 * t4358 + t3499 * t4364 + t3498 * t4157 + t3496 * t4160 + t3494 * t4163 + ((-t3085 * t4817 - t3086 * t4816 - t3087 * t4815) * t3895 + (t3271 * t4127 + t3272 * t4119 + t3273 * t4111) * t3870) * t3949, (-t3490 * t4049 - t3491 * t4048 - t3492 * t4047) * t4759 + (t3494 * t4146 + t3496 * t4145 + t3498 * t4144 + t3503 * t3999 + t3501 * t3993 + t3499 * t3996 + (t3094 * t4817 + t3095 * t4816 + t3096 * t4815) * t3949) * t3895, t3503 * t4373 + t3501 * t4361 + t3499 * t4367 + t3498 * t4349 + t3496 * t4352 + t3494 * t4355 + (-t3490 * t4380 - t3491 * t4377 - t3492 * t4376) * t4735, t3503 * t4374 + t3501 * t4362 + t3499 * t4368 + t3498 * t4350 + t3496 * t4353 + t3494 * t4356 + (-t3490 * t4379 - t3491 * t4378 - t3492 * t4375) * t4735, 0; t3130 * t4795 + t3131 * t4794 + t3132 * t4796, 0, 0, (t3577 * t3978 + t3578 * t3976 + t3579 * t3980 - t3909 * t4099 - t3912 * t4098 - t3915 * t4097) * t3870, (-t3361 * t4799 - t3362 * t4798 - t3363 * t4797 + t3577 * t3979 + t3578 * t3977 + t3579 * t3981) * t3870, (t3909 * t4554 + t3912 * t4551 + t3915 * t4548 + t3578 * t3992 + t3577 * t3995 + t3579 * t3998 + (-t4097 - t4098 - t4099) * t3896) * t3895, (t3918 * t4554 + t3921 * t4551 + t3924 * t4548 + t3578 * t3991 + t3577 * t3994 + t3579 * t3997 + (t3909 * t4263 + t3912 * t4260 + t3915 * t4257) * t3896) * t3895, t3110 * t4799 + t3112 * t4798 + t3114 * t4797 + (t3110 * t4795 + t3112 * t4794 + t3114 * t4796) * t3896, t3577 * t4054 + t3578 * t4052 + t3579 * t4056 + t4027 * t4797 + t4029 * t4798 + t4031 * t4799, t3577 * t4053 + t3578 * t4051 + t3579 * t4055 + t4028 * t4797 + t4030 * t4798 + t4032 * t4799, t3578 * t4359 + t3577 * t4365 + t3579 * t4371 + t4338 * t4797 + t4339 * t4798 + t4340 * t4799 + (t3187 * t4802 + t3188 * t4801 + t3189 * t4800) * t3949, t3578 * t4360 + t3577 * t4366 + t3579 * t4372 + t4682 * t4797 + t4683 * t4798 + t4684 * t4799 + (t3172 * t4802 + t3173 * t4801 + t3174 * t4800) * t3949, t3578 * t4357 + t3577 * t4363 + t3579 * t4369 + t4332 * t4797 + t4334 * t4798 + t4336 * t4799 + (t3088 * t4802 + t3089 * t4801 + t3090 * t4800 + (t3268 * t4126 + t3269 * t4118 + t3270 * t4110) * t3895) * t3949, t3578 * t4358 + t3577 * t4364 + t3579 * t4370 + t4333 * t4797 + t4335 * t4798 + t4337 * t4799 + (t3085 * t4802 + t3086 * t4801 + t3087 * t4800 + (-t3271 * t4126 - t3272 * t4118 - t3273 * t4110) * t3895) * t3949, (-t3094 * t4802 - t3095 * t4801 - t3096 * t4800) * t3949 + (t4795 * t4844 + t4794 * t4843 + t4796 * t4842 + (t3354 * t4797 * t4821 + (t3949 * t4238 + t4796 * t4918) * t3414) * t3915 + (t3352 * t4798 * t4822 + (t3949 * t4246 + t4794 * t4919) * t3412) * t3912 + (t3350 * t4799 * t4823 + (t3949 * t4254 + t4795 * t4920) * t3410) * t3909) * t3895, t3578 * t4361 + t3577 * t4367 + t3579 * t4373 + t4685 * t4797 + t4687 * t4798 + t4689 * t4799 + (t4677 * t4800 + t4678 * t4801 + t4681 * t4802) * t3949, t3578 * t4362 + t3577 * t4368 + t3579 * t4374 + t4686 * t4797 + t4688 * t4798 + t4690 * t4799 + (t4676 * t4800 + t4679 * t4801 + t4680 * t4802) * t3949, 0;];
tau_reg  = t1;
