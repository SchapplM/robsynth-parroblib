% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G1A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V2G1A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 00:48:17
% EndTime: 2020-08-07 00:48:25
% DurationCPUTime: 8.31s
% Computational Cost: add. (4830->556), mult. (8931->957), div. (126->16), fcn. (8118->26), ass. (0->385)
t10723 = cos(qJ(3,3));
t10693 = t10723 * pkin(3);
t10662 = t10693 + pkin(2);
t10726 = cos(qJ(3,2));
t10695 = t10726 * pkin(3);
t10664 = t10695 + pkin(2);
t10729 = cos(qJ(3,1));
t10697 = t10729 * pkin(3);
t10666 = t10697 + pkin(2);
t10732 = pkin(8) + pkin(7);
t10911 = pkin(1) * t10662;
t10910 = pkin(1) * t10664;
t10909 = pkin(1) * t10666;
t10710 = cos(pkin(4));
t10908 = pkin(1) * t10710;
t10907 = pkin(2) * t10710;
t10720 = sin(qJ(3,1));
t10906 = pkin(2) * t10720;
t10703 = t10723 ^ 2;
t10905 = t10703 * pkin(3);
t10705 = t10726 ^ 2;
t10904 = t10705 * pkin(3);
t10707 = t10729 ^ 2;
t10903 = t10707 * pkin(3);
t10714 = sin(qJ(3,3));
t10902 = t10714 * pkin(2);
t10690 = t10714 * pkin(3);
t10717 = sin(qJ(3,2));
t10901 = t10717 * pkin(2);
t10691 = t10717 * pkin(3);
t10692 = t10720 * pkin(3);
t10724 = cos(qJ(2,3));
t10694 = t10724 * pkin(2);
t10727 = cos(qJ(2,2));
t10696 = t10727 * pkin(2);
t10730 = cos(qJ(2,1));
t10698 = t10730 * pkin(2);
t10900 = -0.2e1 * pkin(2) * pkin(3);
t10700 = t10710 ^ 2;
t10899 = (t10700 - 0.1e1) * pkin(6);
t10702 = pkin(2) - t10732;
t10701 = pkin(2) + t10732;
t10829 = t10710 * t10732;
t10646 = pkin(1) * t10829;
t10715 = sin(qJ(2,3));
t10647 = pkin(1) * t10715 + t10732;
t10656 = t10690 + pkin(6);
t10668 = t10732 * t10715;
t10699 = pkin(1) * t10732;
t10704 = t10724 ^ 2;
t10709 = sin(pkin(4));
t10733 = pkin(3) ^ 2;
t10750 = pkin(1) * t10690 - pkin(6) * t10668;
t10826 = t10715 * t10723;
t10759 = t10710 * t10826;
t10770 = t10709 * t10829;
t10791 = -0.2e1 * (t10710 + 0.1e1) * (t10710 - 0.1e1);
t10842 = t10709 * t10724;
t10847 = t10701 * t10702;
t10850 = t10662 * t10709;
t10853 = (t10693 + t10701) * (t10693 + t10702);
t10898 = (t10699 * t10724 + (-t10656 * t10710 * t10842 - t10647 + (t10704 * t10791 + t10700) * t10732) * t10662 + ((t10700 * t10853 - t10703 * t10733 + t10723 * t10900 - t10847) * t10724 - t10656 * t10770) * t10715) / ((t10646 * t10723 - (pkin(6) * t10723 - t10902) * t10850) * t10724 - t10759 * t10911 + (t10750 * t10723 + (t10668 + pkin(1)) * t10902) * t10709);
t10718 = sin(qJ(2,2));
t10648 = pkin(1) * t10718 + t10732;
t10658 = t10691 + pkin(6);
t10669 = t10732 * t10718;
t10706 = t10727 ^ 2;
t10749 = pkin(1) * t10691 - pkin(6) * t10669;
t10821 = t10718 * t10726;
t10758 = t10710 * t10821;
t10841 = t10709 * t10727;
t10849 = t10664 * t10709;
t10852 = (t10695 + t10701) * (t10695 + t10702);
t10897 = (t10699 * t10727 + (-t10658 * t10710 * t10841 - t10648 + (t10706 * t10791 + t10700) * t10732) * t10664 + ((t10700 * t10852 - t10705 * t10733 + t10726 * t10900 - t10847) * t10727 - t10658 * t10770) * t10718) / ((t10726 * t10646 - (pkin(6) * t10726 - t10901) * t10849) * t10727 - t10758 * t10910 + (t10749 * t10726 + (t10669 + pkin(1)) * t10901) * t10709);
t10721 = sin(qJ(2,1));
t10649 = pkin(1) * t10721 + t10732;
t10660 = t10692 + pkin(6);
t10670 = t10732 * t10721;
t10708 = t10730 ^ 2;
t10748 = pkin(1) * t10692 - pkin(6) * t10670;
t10816 = t10721 * t10729;
t10757 = t10710 * t10816;
t10840 = t10709 * t10730;
t10848 = t10666 * t10709;
t10851 = (t10697 + t10701) * (t10697 + t10702);
t10896 = (t10699 * t10730 + (-t10660 * t10710 * t10840 - t10649 + (t10708 * t10791 + t10700) * t10732) * t10666 + ((t10700 * t10851 - t10707 * t10733 + t10729 * t10900 - t10847) * t10730 - t10660 * t10770) * t10721) / ((t10646 * t10729 - (pkin(6) * t10729 - t10906) * t10848) * t10730 - t10757 * t10909 + (t10748 * t10729 + (t10670 + pkin(1)) * t10906) * t10709);
t10671 = t10732 * t10724;
t10625 = -t10715 * pkin(2) + t10671;
t10603 = t10625 * t10908;
t10609 = t10704 * pkin(2) + t10715 * t10671 - pkin(2);
t10622 = t10694 + t10668;
t10619 = pkin(1) + t10622;
t10677 = t10704 - 0.2e1;
t10663 = t10694 + pkin(1);
t10747 = -t10622 * pkin(6) + t10663 * t10690;
t10790 = t10619 * t10902;
t10837 = t10710 * t10715;
t10753 = -(pkin(1) * t10837 + pkin(6) * t10842) * t10905 + t10709 * t10790;
t10769 = t10709 * t10837;
t10846 = t10709 * t10710;
t10895 = ((-t10625 * t10846 + t10899) * t10723 + (-pkin(6) * t10769 - t10609 * t10700 + t10724 * t10619) * t10714 + (-(t10677 * t10700 - t10704 + 0.1e1) * t10714 * t10723 + (0.2e1 * t10703 - 0.1e1) * t10769) * pkin(3)) / ((t10709 * t10747 + t10603) * t10723 + t10753);
t10672 = t10732 * t10727;
t10626 = -t10718 * pkin(2) + t10672;
t10604 = t10626 * t10908;
t10610 = t10706 * pkin(2) + t10718 * t10672 - pkin(2);
t10623 = t10696 + t10669;
t10620 = pkin(1) + t10623;
t10678 = t10706 - 0.2e1;
t10665 = t10696 + pkin(1);
t10746 = -t10623 * pkin(6) + t10665 * t10691;
t10789 = t10620 * t10901;
t10835 = t10710 * t10718;
t10752 = -(pkin(1) * t10835 + pkin(6) * t10841) * t10904 + t10709 * t10789;
t10768 = t10709 * t10835;
t10894 = ((-t10626 * t10846 + t10899) * t10726 + (-pkin(6) * t10768 - t10610 * t10700 + t10727 * t10620) * t10717 + (-(t10678 * t10700 - t10706 + 0.1e1) * t10717 * t10726 + (0.2e1 * t10705 - 0.1e1) * t10768) * pkin(3)) / ((t10709 * t10746 + t10604) * t10726 + t10752);
t10673 = t10732 * t10730;
t10627 = -t10721 * pkin(2) + t10673;
t10605 = t10627 * t10908;
t10611 = t10708 * pkin(2) + t10721 * t10673 - pkin(2);
t10624 = t10698 + t10670;
t10621 = pkin(1) + t10624;
t10679 = t10708 - 0.2e1;
t10667 = t10698 + pkin(1);
t10745 = -t10624 * pkin(6) + t10667 * t10692;
t10788 = t10621 * t10906;
t10833 = t10710 * t10721;
t10751 = -(pkin(1) * t10833 + pkin(6) * t10840) * t10903 + t10709 * t10788;
t10767 = t10709 * t10833;
t10893 = ((-t10627 * t10846 + t10899) * t10729 + (-pkin(6) * t10767 - t10611 * t10700 + t10730 * t10621) * t10720 + (-(t10679 * t10700 - t10708 + 0.1e1) * t10720 * t10729 + (0.2e1 * t10707 - 0.1e1) * t10767) * pkin(3)) / ((t10709 * t10745 + t10605) * t10729 + t10751);
t10828 = t10714 * t10709;
t10588 = t10759 - t10828;
t10716 = sin(qJ(1,3));
t10725 = cos(qJ(1,3));
t10810 = t10725 * t10724;
t10570 = -t10588 * t10716 + t10723 * t10810;
t10711 = legFrame(3,3);
t10682 = sin(t10711);
t10685 = cos(t10711);
t10613 = t10682 * g(1) - t10685 * g(2);
t10616 = t10685 * g(1) + t10682 * g(2);
t10812 = t10723 * t10724;
t10813 = t10723 * t10709;
t10838 = t10710 * t10714;
t10492 = t10616 * t10570 - t10613 * (t10588 * t10725 + t10716 * t10812) + g(3) * (t10715 * t10813 + t10838);
t10612 = -t10709 * pkin(6) * t10732 - pkin(1) * t10907;
t10657 = t10690 - pkin(6);
t10735 = pkin(2) ^ 2;
t10794 = pkin(6) * t10905;
t10795 = pkin(3) * t10908;
t10498 = 0.1e1 / (t10646 * t10812 + (t10612 * t10723 - t10703 * t10795) * t10715 + ((pkin(2) * t10657 * t10723 - t10794) * t10724 + (pkin(2) * t10668 + t10735 * t10724 + t10911) * t10714) * t10709);
t10892 = t10492 * t10498;
t10825 = t10716 * t10715;
t10591 = t10710 * t10825 - t10810;
t10744 = t10591 * t10714 + t10716 * t10813;
t10824 = t10716 * t10724;
t10827 = t10714 * t10715;
t10832 = t10710 * t10723;
t10493 = -t10616 * t10744 - t10613 * ((t10710 * t10827 + t10813) * t10725 + t10714 * t10824) - g(3) * (-t10709 * t10827 + t10832);
t10891 = t10493 * t10498;
t10823 = t10717 * t10709;
t10589 = t10758 - t10823;
t10719 = sin(qJ(1,2));
t10728 = cos(qJ(1,2));
t10806 = t10728 * t10727;
t10571 = -t10589 * t10719 + t10726 * t10806;
t10712 = legFrame(2,3);
t10683 = sin(t10712);
t10686 = cos(t10712);
t10614 = t10683 * g(1) - t10686 * g(2);
t10617 = t10686 * g(1) + t10683 * g(2);
t10808 = t10726 * t10727;
t10809 = t10726 * t10709;
t10836 = t10710 * t10717;
t10494 = t10571 * t10617 - (t10589 * t10728 + t10719 * t10808) * t10614 + g(3) * (t10718 * t10809 + t10836);
t10659 = t10691 - pkin(6);
t10793 = pkin(6) * t10904;
t10499 = 0.1e1 / (t10646 * t10808 + (t10612 * t10726 - t10705 * t10795) * t10718 + ((pkin(2) * t10659 * t10726 - t10793) * t10727 + (pkin(2) * t10669 + t10735 * t10727 + t10910) * t10717) * t10709);
t10890 = t10494 * t10499;
t10818 = t10720 * t10709;
t10590 = t10757 - t10818;
t10722 = sin(qJ(1,1));
t10731 = cos(qJ(1,1));
t10802 = t10731 * t10730;
t10572 = -t10590 * t10722 + t10729 * t10802;
t10713 = legFrame(1,3);
t10684 = sin(t10713);
t10687 = cos(t10713);
t10615 = t10684 * g(1) - t10687 * g(2);
t10618 = t10687 * g(1) + t10684 * g(2);
t10804 = t10729 * t10730;
t10805 = t10729 * t10709;
t10834 = t10710 * t10720;
t10495 = t10572 * t10618 - (t10590 * t10731 + t10722 * t10804) * t10615 + g(3) * (t10721 * t10805 + t10834);
t10661 = t10692 - pkin(6);
t10792 = pkin(6) * t10903;
t10500 = 0.1e1 / (t10646 * t10804 + (t10612 * t10729 - t10707 * t10795) * t10721 + ((pkin(2) * t10661 * t10729 - t10792) * t10730 + (pkin(2) * t10670 + t10735 * t10730 + t10909) * t10720) * t10709);
t10889 = t10495 * t10500;
t10820 = t10719 * t10718;
t10592 = t10710 * t10820 - t10806;
t10743 = t10592 * t10717 + t10719 * t10809;
t10819 = t10719 * t10727;
t10822 = t10717 * t10718;
t10831 = t10710 * t10726;
t10496 = -t10743 * t10617 - ((t10710 * t10822 + t10809) * t10728 + t10717 * t10819) * t10614 - g(3) * (-t10709 * t10822 + t10831);
t10888 = t10496 * t10499;
t10815 = t10722 * t10721;
t10593 = t10710 * t10815 - t10802;
t10742 = t10593 * t10720 + t10722 * t10805;
t10814 = t10722 * t10730;
t10817 = t10720 * t10721;
t10830 = t10710 * t10729;
t10497 = -t10742 * t10618 - ((t10710 * t10817 + t10805) * t10731 + t10720 * t10814) * t10615 - g(3) * (-t10709 * t10817 + t10830);
t10887 = t10497 * t10500;
t10504 = 0.1e1 / (((t10661 * t10698 + t10748) * t10709 + t10605) * t10729 + t10751);
t10803 = t10731 * t10721;
t10599 = t10710 * t10803 + t10814;
t10511 = -t10618 * (t10599 * t10720 + t10731 * t10805) + t10615 * t10742;
t10886 = t10504 * t10511;
t10512 = t10618 * (t10599 * t10729 - t10731 * t10818) + t10615 * t10572;
t10885 = t10504 * t10512;
t10598 = t10710 * t10802 - t10815;
t10602 = t10710 * t10814 + t10803;
t10538 = t10618 * t10598 - t10615 * t10602;
t10884 = t10504 * t10538;
t10539 = -t10615 * t10593 + t10618 * t10599;
t10883 = t10504 * t10539;
t10843 = t10709 * t10721;
t10542 = -t10843 * t10903 + (-pkin(3) * t10834 + t10627 * t10709) * t10729 - pkin(2) * t10834;
t10882 = t10504 * t10542;
t10881 = t10504 * (t10615 * t10731 + t10618 * t10722);
t10880 = t10504 * (-t10615 * t10722 + t10618 * t10731);
t10505 = 0.1e1 / (((t10657 * t10694 + t10750) * t10709 + t10603) * t10723 + t10753);
t10811 = t10725 * t10715;
t10595 = t10710 * t10811 + t10824;
t10507 = -t10616 * (t10595 * t10714 + t10725 * t10813) + t10613 * t10744;
t10879 = t10505 * t10507;
t10508 = t10616 * (t10595 * t10723 - t10725 * t10828) + t10613 * t10570;
t10878 = t10505 * t10508;
t10594 = t10710 * t10810 - t10825;
t10600 = t10710 * t10824 + t10811;
t10534 = t10616 * t10594 - t10613 * t10600;
t10877 = t10505 * t10534;
t10535 = -t10613 * t10591 + t10616 * t10595;
t10876 = t10505 * t10535;
t10845 = t10709 * t10715;
t10540 = -t10845 * t10905 + (-pkin(3) * t10838 + t10625 * t10709) * t10723 - pkin(2) * t10838;
t10875 = t10505 * t10540;
t10874 = t10505 * (t10613 * t10725 + t10616 * t10716);
t10873 = t10505 * (-t10613 * t10716 + t10616 * t10725);
t10506 = 0.1e1 / (((t10659 * t10696 + t10749) * t10709 + t10604) * t10726 + t10752);
t10807 = t10728 * t10718;
t10597 = t10710 * t10807 + t10819;
t10509 = -t10617 * (t10597 * t10717 + t10728 * t10809) + t10614 * t10743;
t10872 = t10506 * t10509;
t10510 = t10617 * (t10597 * t10726 - t10728 * t10823) + t10571 * t10614;
t10871 = t10506 * t10510;
t10596 = t10710 * t10806 - t10820;
t10601 = t10710 * t10819 + t10807;
t10536 = t10617 * t10596 - t10614 * t10601;
t10870 = t10506 * t10536;
t10537 = -t10614 * t10592 + t10617 * t10597;
t10869 = t10506 * t10537;
t10844 = t10709 * t10718;
t10541 = -t10844 * t10904 + (-pkin(3) * t10836 + t10626 * t10709) * t10726 - pkin(2) * t10836;
t10868 = t10506 * t10541;
t10867 = t10506 * (t10614 * t10728 + t10617 * t10719);
t10866 = t10506 * (-t10614 * t10719 + t10617 * t10728);
t10516 = 0.1e1 / (pkin(1) * (-t10662 * t10715 + t10671) * t10832 + t10709 * (t10747 * t10723 - t10724 * t10794 + t10790));
t10634 = t10716 * g(1) - t10725 * g(2);
t10635 = t10725 * g(1) + t10716 * g(2);
t10680 = g(3) * t10709;
t10519 = (t10680 + (-t10634 * t10685 - t10635 * t10682) * t10710) * t10724 + (t10634 * t10682 - t10635 * t10685) * t10715;
t10865 = t10516 * t10519;
t10522 = -g(3) * t10842 + t10613 * t10594 + t10616 * t10600;
t10864 = t10516 * t10522;
t10523 = g(3) * t10845 - t10616 * t10591 - t10613 * t10595;
t10863 = t10516 * t10523;
t10517 = 0.1e1 / (pkin(1) * (-t10664 * t10718 + t10672) * t10831 + t10709 * (t10746 * t10726 - t10727 * t10793 + t10789));
t10636 = t10719 * g(1) - t10728 * g(2);
t10637 = t10728 * g(1) + t10719 * g(2);
t10520 = (t10680 + (-t10636 * t10686 - t10637 * t10683) * t10710) * t10727 + (t10636 * t10683 - t10637 * t10686) * t10718;
t10862 = t10517 * t10520;
t10524 = -g(3) * t10841 + t10614 * t10596 + t10617 * t10601;
t10861 = t10517 * t10524;
t10525 = g(3) * t10844 - t10617 * t10592 - t10614 * t10597;
t10860 = t10517 * t10525;
t10518 = 0.1e1 / (pkin(1) * (-t10666 * t10721 + t10673) * t10830 + t10709 * (t10745 * t10729 - t10730 * t10792 + t10788));
t10638 = g(1) * t10722 - g(2) * t10731;
t10639 = g(1) * t10731 + g(2) * t10722;
t10521 = (t10680 + (-t10638 * t10687 - t10639 * t10684) * t10710) * t10730 + (t10638 * t10684 - t10639 * t10687) * t10721;
t10859 = t10518 * t10521;
t10526 = -g(3) * t10840 + t10615 * t10598 + t10618 * t10602;
t10858 = t10518 * t10526;
t10527 = g(3) * t10843 - t10618 * t10593 - t10615 * t10599;
t10857 = t10518 * t10527;
t10856 = (pkin(1) + 0.2e1 * t10668) * t10662;
t10855 = (pkin(1) + 0.2e1 * t10669) * t10664;
t10854 = (pkin(1) + 0.2e1 * t10670) * t10666;
t10734 = 0.1e1 / pkin(3);
t10839 = t10709 * t10734;
t10582 = t10725 * t10682 + t10716 * t10685;
t10801 = t10732 * t10582;
t10583 = -t10716 * t10682 + t10725 * t10685;
t10800 = t10732 * t10583;
t10584 = t10728 * t10683 + t10719 * t10686;
t10799 = t10732 * t10584;
t10585 = -t10719 * t10683 + t10728 * t10686;
t10798 = t10732 * t10585;
t10586 = t10731 * t10684 + t10722 * t10687;
t10797 = t10732 * t10586;
t10587 = -t10722 * t10684 + t10731 * t10687;
t10796 = t10732 * t10587;
t10787 = t10714 * pkin(6) + pkin(3);
t10786 = t10717 * pkin(6) + pkin(3);
t10785 = t10720 * pkin(6) + pkin(3);
t10784 = t10519 * t10895;
t10783 = t10520 * t10894;
t10782 = t10521 * t10893;
t10781 = t10714 * t10865;
t10780 = t10723 * t10865;
t10779 = t10717 * t10862;
t10778 = t10726 * t10862;
t10777 = t10720 * t10859;
t10776 = t10729 * t10859;
t10775 = t10583 * t10828;
t10774 = t10586 * t10818;
t10773 = t10662 * t10829;
t10772 = t10664 * t10829;
t10771 = t10666 * t10829;
t10766 = t10582 * t10828;
t10765 = t10716 * t10853;
t10764 = t10584 * t10823;
t10763 = t10585 * t10823;
t10762 = t10719 * t10852;
t10761 = t10587 * t10818;
t10760 = t10722 * t10851;
t10756 = t10725 * t10773;
t10755 = t10728 * t10772;
t10754 = t10731 * t10771;
t10741 = -(t10663 * t10715 + t10732 + (pkin(3) * t10826 - t10671) * t10724) * t10828 + (pkin(3) * t10812 + t10619) * t10832;
t10740 = -(t10665 * t10718 + t10732 + (pkin(3) * t10821 - t10672) * t10727) * t10823 + (pkin(3) * t10808 + t10620) * t10831;
t10739 = -(t10667 * t10721 + t10732 + (pkin(3) * t10816 - t10673) * t10730) * t10818 + (pkin(3) * t10804 + t10621) * t10830;
t10738 = ((t10677 * t10690 - pkin(6)) * t10723 + t10714 * t10609) * t10846 - (t10625 * t10723 + (t10787 - 0.2e1 * t10905) * t10715) * t10700 - t10715 * (-t10787 + t10905);
t10737 = ((t10678 * t10691 - pkin(6)) * t10726 + t10717 * t10610) * t10846 - (t10626 * t10726 + (t10786 - 0.2e1 * t10904) * t10718) * t10700 - t10718 * (-t10786 + t10904);
t10736 = ((t10679 * t10692 - pkin(6)) * t10729 + t10720 * t10611) * t10846 - (t10627 * t10729 + (t10785 - 0.2e1 * t10903) * t10721) * t10700 - t10721 * (-t10785 + t10903);
t10575 = -t10660 * t10843 + t10710 * t10666;
t10574 = -t10658 * t10844 + t10710 * t10664;
t10573 = -t10656 * t10845 + t10710 * t10662;
t10554 = 0.2e1 * t10722 * t10771 + t10731 * t10851;
t10553 = 0.2e1 * t10719 * t10772 + t10728 * t10852;
t10552 = 0.2e1 * t10716 * t10773 + t10725 * t10853;
t10551 = t10575 * t10731 + t10722 * t10649;
t10550 = t10574 * t10728 + t10719 * t10648;
t10549 = t10573 * t10725 + t10716 * t10647;
t10548 = -t10722 * t10575 + t10649 * t10731;
t10547 = -t10719 * t10574 + t10648 * t10728;
t10546 = -t10716 * t10573 + t10647 * t10725;
t10545 = -t10660 * t10848 + t10833 * t10851;
t10544 = -t10658 * t10849 + t10835 * t10852;
t10543 = -t10656 * t10850 + t10837 * t10853;
t10533 = t10545 * t10731 + t10722 * t10854;
t10532 = t10544 * t10728 + t10719 * t10855;
t10531 = t10543 * t10725 + t10716 * t10856;
t10530 = -t10545 * t10722 + t10731 * t10854;
t10529 = -t10544 * t10719 + t10728 * t10855;
t10528 = -t10543 * t10716 + t10725 * t10856;
t10485 = -(-t10586 * t10833 + t10587 * t10730) * t10903 + (-pkin(3) * t10774 + (-pkin(2) * t10587 - t10710 * t10797) * t10730 + (t10586 * t10907 - t10796) * t10721) * t10729 - pkin(2) * t10774;
t10484 = -(t10586 * t10730 + t10587 * t10833) * t10903 + (pkin(3) * t10761 + (-pkin(2) * t10586 + t10710 * t10796) * t10730 - (t10587 * t10907 + t10797) * t10721) * t10729 + pkin(2) * t10761;
t10483 = -(-t10584 * t10835 + t10585 * t10727) * t10904 + (-pkin(3) * t10764 + (-pkin(2) * t10585 - t10710 * t10799) * t10727 + (t10584 * t10907 - t10798) * t10718) * t10726 - pkin(2) * t10764;
t10482 = -(t10584 * t10727 + t10585 * t10835) * t10904 + (pkin(3) * t10763 + (-pkin(2) * t10584 + t10710 * t10798) * t10727 - (t10585 * t10907 + t10799) * t10718) * t10726 + pkin(2) * t10763;
t10481 = -(-t10582 * t10837 + t10583 * t10724) * t10905 + (-pkin(3) * t10766 + (-pkin(2) * t10583 - t10710 * t10801) * t10724 + (t10582 * t10907 - t10800) * t10715) * t10723 - pkin(2) * t10766;
t10480 = -(t10582 * t10724 + t10583 * t10837) * t10905 + (pkin(3) * t10775 + (-pkin(2) * t10582 + t10710 * t10800) * t10724 - (t10583 * t10907 + t10801) * t10715) * t10723 + pkin(2) * t10775;
t10479 = t10739 * t10586 + t10736 * t10587;
t10478 = -t10736 * t10586 + t10739 * t10587;
t10477 = t10740 * t10584 + t10737 * t10585;
t10476 = -t10737 * t10584 + t10740 * t10585;
t10475 = t10741 * t10582 + t10738 * t10583;
t10474 = -t10738 * t10582 + t10741 * t10583;
t10473 = ((-0.2e1 * t10754 + t10760) * t10687 + t10554 * t10684) * t10708 + (t10530 * t10684 + t10533 * t10687) * t10730 + (t10548 * t10684 + t10551 * t10687) * t10732;
t10472 = ((-0.2e1 * t10755 + t10762) * t10686 + t10553 * t10683) * t10706 + (t10529 * t10683 + t10532 * t10686) * t10727 + (t10547 * t10683 + t10550 * t10686) * t10732;
t10471 = ((-0.2e1 * t10756 + t10765) * t10685 + t10552 * t10682) * t10704 + (t10528 * t10682 + t10531 * t10685) * t10724 + (t10546 * t10682 + t10549 * t10685) * t10732;
t10470 = (t10554 * t10687 + 0.2e1 * (t10754 - t10760 / 0.2e1) * t10684) * t10708 + (t10530 * t10687 - t10684 * t10533) * t10730 + (t10548 * t10687 - t10684 * t10551) * t10732;
t10469 = (t10553 * t10686 + 0.2e1 * (t10755 - t10762 / 0.2e1) * t10683) * t10706 + (t10529 * t10686 - t10683 * t10532) * t10727 + (t10547 * t10686 - t10683 * t10550) * t10732;
t10468 = (t10552 * t10685 + 0.2e1 * (t10756 - t10765 / 0.2e1) * t10682) * t10704 + (t10528 * t10685 - t10682 * t10531) * t10724 + (t10546 * t10685 - t10682 * t10549) * t10732;
t1 = [(t10481 * t10874 + t10483 * t10867 + t10485 * t10881) * MDP(2) + (t10481 * t10873 + t10483 * t10866 + t10485 * t10880) * MDP(3) + (t10474 * t10864 + t10476 * t10861 + t10478 * t10858 + t10481 * t10876 + t10483 * t10869 + t10485 * t10883) * MDP(9) + (t10474 * t10863 + t10476 * t10860 + t10478 * t10857 + t10481 * t10877 + t10483 * t10870 + t10485 * t10884) * MDP(10) + (-t10474 * t10780 - t10476 * t10778 - t10478 * t10776 + t10481 * t10878 + t10483 * t10871 + t10485 * t10885) * MDP(16) + (t10474 * t10781 + t10476 * t10779 + t10478 * t10777 + t10481 * t10879 + t10483 * t10872 + t10485 * t10886) * MDP(17) - g(1) * MDP(18) + ((-t10468 * t10891 - t10469 * t10888 - t10470 * t10887) * MDP(16) + (-t10468 * t10892 - t10469 * t10890 - t10470 * t10889) * MDP(17)) * t10839; (t10480 * t10874 + t10482 * t10867 + t10484 * t10881) * MDP(2) + (t10480 * t10873 + t10482 * t10866 + t10484 * t10880) * MDP(3) + (t10475 * t10864 + t10477 * t10861 + t10479 * t10858 + t10480 * t10876 + t10482 * t10869 + t10484 * t10883) * MDP(9) + (t10475 * t10863 + t10477 * t10860 + t10479 * t10857 + t10480 * t10877 + t10482 * t10870 + t10484 * t10884) * MDP(10) + (-t10475 * t10780 - t10477 * t10778 - t10479 * t10776 + t10480 * t10878 + t10482 * t10871 + t10484 * t10885) * MDP(16) + (t10475 * t10781 + t10477 * t10779 + t10479 * t10777 + t10480 * t10879 + t10482 * t10872 + t10484 * t10886) * MDP(17) - g(2) * MDP(18) + ((-t10471 * t10891 - t10472 * t10888 - t10473 * t10887) * MDP(16) + (-t10471 * t10892 - t10472 * t10890 - t10473 * t10889) * MDP(17)) * t10839; (t10540 * t10874 + t10541 * t10867 + t10542 * t10881) * MDP(2) + (t10540 * t10873 + t10541 * t10866 + t10542 * t10880) * MDP(3) + (t10522 * t10895 + t10524 * t10894 + t10526 * t10893 + t10535 * t10875 + t10537 * t10868 + t10539 * t10882) * MDP(9) + (t10523 * t10895 + t10525 * t10894 + t10527 * t10893 + t10534 * t10875 + t10536 * t10868 + t10538 * t10882) * MDP(10) + (t10508 * t10875 + t10510 * t10868 + t10512 * t10882 - t10723 * t10784 - t10726 * t10783 - t10729 * t10782) * MDP(16) + (t10507 * t10875 + t10509 * t10868 + t10511 * t10882 + t10714 * t10784 + t10717 * t10783 + t10720 * t10782) * MDP(17) - g(3) * MDP(18) + ((t10493 * t10898 + t10496 * t10897 + t10497 * t10896) * MDP(16) + (t10492 * t10898 + t10494 * t10897 + t10495 * t10896) * MDP(17)) * t10734;];
taugX  = t1;
