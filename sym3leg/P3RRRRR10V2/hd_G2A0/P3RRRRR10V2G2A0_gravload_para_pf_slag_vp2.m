% Calculate Gravitation load for parallel robot
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [3x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:11:45
% EndTime: 2020-08-07 01:11:57
% DurationCPUTime: 12.99s
% Computational Cost: add. (2370->589), mult. (4113->1001), div. (36->13), fcn. (3126->26), ass. (0->382)
t4031 = cos(qJ(3,3));
t3998 = t4031 * pkin(3);
t3968 = t3998 + pkin(2);
t4023 = sin(qJ(2,3));
t4338 = t3968 * t4023;
t4034 = cos(qJ(3,2));
t3999 = t4034 * pkin(3);
t3969 = t3999 + pkin(2);
t4026 = sin(qJ(2,2));
t4337 = t3969 * t4026;
t4037 = cos(qJ(3,1));
t4000 = t4037 * pkin(3);
t3970 = t4000 + pkin(2);
t4029 = sin(qJ(2,1));
t4336 = t3970 * t4029;
t4019 = legFrame(3,2);
t3989 = sin(t4019);
t3992 = cos(t4019);
t3932 = g(1) * t3992 - g(2) * t3989;
t4024 = sin(qJ(1,3));
t4033 = cos(qJ(1,3));
t3901 = g(3) * t4033 + t3932 * t4024;
t4032 = cos(qJ(2,3));
t3904 = g(3) * t4024 - t3932 * t4033;
t3929 = g(1) * t3989 + g(2) * t3992;
t4017 = sin(pkin(4));
t4018 = cos(pkin(4));
t4329 = -t3904 * t4018 + t3929 * t4017;
t4053 = t4032 * t3901 + t4329 * t4023;
t4020 = legFrame(2,2);
t3990 = sin(t4020);
t3993 = cos(t4020);
t3933 = g(1) * t3993 - g(2) * t3990;
t4027 = sin(qJ(1,2));
t4036 = cos(qJ(1,2));
t3902 = g(3) * t4036 + t3933 * t4027;
t4035 = cos(qJ(2,2));
t3905 = g(3) * t4027 - t3933 * t4036;
t3930 = g(1) * t3990 + g(2) * t3993;
t4330 = -t3905 * t4018 + t3930 * t4017;
t4052 = t4035 * t3902 + t4330 * t4026;
t4021 = legFrame(1,2);
t3991 = sin(t4021);
t3994 = cos(t4021);
t3934 = g(1) * t3994 - g(2) * t3991;
t4030 = sin(qJ(1,1));
t4039 = cos(qJ(1,1));
t3903 = g(3) * t4039 + t3934 * t4030;
t4038 = cos(qJ(2,1));
t3906 = g(3) * t4030 - t3934 * t4039;
t3931 = g(1) * t3991 + g(2) * t3994;
t4331 = -t3906 * t4018 + t3931 * t4017;
t4051 = t4038 * t3903 + t4331 * t4029;
t4335 = m(2) + m(3);
t4012 = t4032 ^ 2;
t4041 = pkin(8) + pkin(7);
t4334 = t4012 * t4041;
t4014 = t4035 ^ 2;
t4333 = t4014 * t4041;
t4016 = t4038 ^ 2;
t4332 = t4016 * t4041;
t3979 = t4041 * t4038;
t3940 = -pkin(2) * t4029 + t3979;
t4072 = t4017 * t3940;
t3978 = t4041 * t4035;
t3939 = -pkin(2) * t4026 + t3978;
t4073 = t4017 * t3939;
t3977 = t4041 * t4032;
t3938 = -pkin(2) * t4023 + t3977;
t4074 = t4017 * t3938;
t4328 = t3904 * t4017 + t3929 * t4018;
t4327 = t3905 * t4017 + t3930 * t4018;
t4326 = t3906 * t4017 + t3931 * t4018;
t4022 = sin(qJ(3,3));
t4169 = t4022 * pkin(6) + pkin(3);
t4011 = t4031 ^ 2;
t4306 = t4011 * pkin(3);
t4313 = pkin(2) * t4031;
t4325 = (-t4169 + 0.2e1 * t4306 + t4313) * t4023 - t4031 * t3977;
t4025 = sin(qJ(3,2));
t4168 = t4025 * pkin(6) + pkin(3);
t4013 = t4034 ^ 2;
t4304 = t4013 * pkin(3);
t4311 = pkin(2) * t4034;
t4324 = (-t4168 + 0.2e1 * t4304 + t4311) * t4026 - t4034 * t3978;
t4028 = sin(qJ(3,1));
t4167 = t4028 * pkin(6) + pkin(3);
t4015 = t4037 ^ 2;
t4302 = t4015 * pkin(3);
t4309 = pkin(2) * t4037;
t4323 = (-t4167 + 0.2e1 * t4302 + t4309) * t4029 - t4037 * t3979;
t3976 = t4041 * t4029;
t4003 = pkin(2) * t4038;
t4194 = t3976 + t4003;
t3937 = pkin(1) + t4194;
t3997 = t4028 * pkin(3);
t4114 = (t4016 - 0.2e1) * t3997 - pkin(6);
t4238 = t4017 * t4039;
t4322 = t4030 * t3937 + t4114 * t4238;
t3975 = t4041 * t4026;
t4002 = pkin(2) * t4035;
t4195 = t3975 + t4002;
t3936 = pkin(1) + t4195;
t3996 = t4025 * pkin(3);
t4115 = (t4014 - 0.2e1) * t3996 - pkin(6);
t4239 = t4017 * t4036;
t4321 = t4027 * t3936 + t4115 * t4239;
t3974 = t4041 * t4023;
t4001 = pkin(2) * t4032;
t4196 = t3974 + t4001;
t3935 = pkin(1) + t4196;
t3995 = t4022 * pkin(3);
t4116 = (t4012 - 0.2e1) * t3995 - pkin(6);
t4240 = t4017 * t4033;
t4320 = t4024 * t3935 + t4116 * t4240;
t4008 = t4018 ^ 2;
t4319 = -0.2e1 * t4008 + 0.1e1;
t4318 = pkin(1) * t4018;
t4004 = pkin(1) * t4023;
t4005 = pkin(1) * t4026;
t4006 = pkin(1) * t4029;
t4317 = pkin(2) * t4018;
t4312 = pkin(2) * t4033;
t4310 = pkin(2) * t4036;
t4308 = pkin(2) * t4039;
t4307 = pkin(6) * t4017;
t4305 = t4012 * pkin(2);
t4303 = t4014 * pkin(2);
t4301 = t4016 * pkin(2);
t4300 = t4022 * pkin(2);
t4299 = t4025 * pkin(2);
t4298 = t4028 * pkin(2);
t4297 = -m(3) * pkin(2) - mrSges(2,1);
t4010 = pkin(2) - t4041;
t4009 = pkin(2) + t4041;
t3958 = t4335 * pkin(1) + mrSges(1,1);
t3947 = t3958 * g(3);
t3963 = t3995 - pkin(6);
t4040 = mrSges(1,2) * g(3);
t3926 = -mrSges(3,1) * t4031 + mrSges(3,2) * t4022 + t4297;
t3980 = pkin(7) * m(3) - mrSges(2,2) + mrSges(3,3);
t4077 = -t3926 * t4032 + t3980 * t4023;
t4173 = t4335 * pkin(6) + mrSges(2,3);
t4083 = (-t3926 * t4023 - t3980 * t4032) * t4018 - (mrSges(3,1) * t4022 + mrSges(3,2) * t4031 + t4173) * t4017;
t4176 = t3935 * t4300;
t4185 = t4018 * t4004;
t4192 = pkin(1) * t3995;
t4296 = (t3947 * t4024 + t4040 * t4033 + (t4077 * t4024 + t4083 * t4033) * g(3) + ((-t3958 - t4077) * t4033 + (mrSges(1,2) + t4083) * t4024) * t3932) / (-(t4032 * t4307 + t4185) * t4306 + ((-pkin(6) * t3974 + t3963 * t4001 + t4192) * t4017 + t3938 * t4318) * t4031 + t4017 * t4176);
t3965 = t3996 - pkin(6);
t3927 = -mrSges(3,1) * t4034 + mrSges(3,2) * t4025 + t4297;
t4076 = -t3927 * t4035 + t3980 * t4026;
t4082 = (-t3927 * t4026 - t3980 * t4035) * t4018 - (mrSges(3,1) * t4025 + mrSges(3,2) * t4034 + t4173) * t4017;
t4175 = t3936 * t4299;
t4184 = t4018 * t4005;
t4191 = pkin(1) * t3996;
t4295 = (t3947 * t4027 + t4040 * t4036 + (t4076 * t4027 + t4082 * t4036) * g(3) + ((-t3958 - t4076) * t4036 + (mrSges(1,2) + t4082) * t4027) * t3933) / (-(t4035 * t4307 + t4184) * t4304 + ((-pkin(6) * t3975 + t3965 * t4002 + t4191) * t4017 + t3939 * t4318) * t4034 + t4017 * t4175);
t3967 = t3997 - pkin(6);
t3928 = -mrSges(3,1) * t4037 + mrSges(3,2) * t4028 + t4297;
t4075 = -t3928 * t4038 + t3980 * t4029;
t4081 = (-t3928 * t4029 - t3980 * t4038) * t4018 - (mrSges(3,1) * t4028 + mrSges(3,2) * t4037 + t4173) * t4017;
t4174 = t3937 * t4298;
t4183 = t4018 * t4006;
t4190 = pkin(1) * t3997;
t4294 = (t3947 * t4030 + t4040 * t4039 + (t4075 * t4030 + t4081 * t4039) * g(3) + ((-t3958 - t4075) * t4039 + (mrSges(1,2) + t4081) * t4030) * t3934) / (-(t4038 * t4307 + t4183) * t4302 + ((-pkin(6) * t3976 + t3967 * t4003 + t4190) * t4017 + t3940 * t4318) * t4037 + t4017 * t4174);
t3971 = t4001 + pkin(1);
t4233 = t4018 * t4031;
t4182 = pkin(1) * t4233;
t4189 = pkin(6) * t4306;
t4293 = (-t4053 * t3980 + (-t4023 * t3901 + t4032 * t4329) * t3926) / ((-t4032 * t4189 + (-pkin(6) * t4196 + t3971 * t3995) * t4031 + t4176) * t4017 + (t3977 - t4338) * t4182);
t3972 = t4002 + pkin(1);
t4232 = t4018 * t4034;
t4181 = pkin(1) * t4232;
t4188 = pkin(6) * t4304;
t4292 = (-t4052 * t3980 + (-t4026 * t3902 + t4035 * t4330) * t3927) / ((-t4035 * t4188 + (-pkin(6) * t4195 + t3972 * t3996) * t4034 + t4175) * t4017 + (t3978 - t4337) * t4181);
t3973 = t4003 + pkin(1);
t4231 = t4018 * t4037;
t4180 = pkin(1) * t4231;
t4187 = pkin(6) * t4302;
t4291 = (-t4051 * t3980 + (-t4029 * t3903 + t4038 * t4331) * t3928) / ((-t4038 * t4187 + (-pkin(6) * t4194 + t3973 * t3997) * t4037 + t4174) * t4017 + (t3979 - t4336) * t4180);
t4281 = (t3998 + t4009) * (t3998 + t4010);
t4280 = (t3999 + t4009) * (t3999 + t4010);
t4279 = (t4000 + t4009) * (t4000 + t4010);
t4230 = t4018 * t4041;
t3957 = pkin(1) * t4230;
t4278 = t3957 * t4031;
t4277 = t3957 * t4034;
t4276 = t3957 * t4037;
t3962 = t3995 + pkin(6);
t4275 = t3962 * t4017;
t3964 = t3996 + pkin(6);
t4274 = t3964 * t4017;
t3966 = t3997 + pkin(6);
t4273 = t3966 * t4017;
t4272 = t3968 * t3989;
t4271 = t3968 * t3992;
t4270 = t3969 * t3990;
t4269 = t3969 * t3993;
t4268 = t3970 * t3991;
t4267 = t3970 * t3994;
t4266 = (t4018 + 0.1e1) * (t4018 - 0.1e1);
t3959 = t4004 + t4041;
t4265 = t3989 * t3959;
t4264 = t3989 * t4023;
t4263 = t3989 * t4033;
t3960 = t4005 + t4041;
t4262 = t3990 * t3960;
t4261 = t3990 * t4026;
t4260 = t3990 * t4036;
t3961 = t4006 + t4041;
t4259 = t3991 * t3961;
t4258 = t3991 * t4029;
t4257 = t3991 * t4039;
t4256 = t3992 * t3959;
t4255 = t3992 * t4033;
t4254 = t3993 * t3960;
t4253 = t3993 * t4036;
t4252 = t3994 * t3961;
t4251 = t3994 * t4039;
t4250 = t4009 * t4010;
t4045 = pkin(3) ^ 2;
t4249 = t4011 * t4045;
t4248 = t4013 * t4045;
t4247 = t4015 * t4045;
t4246 = t4017 * t4023;
t4245 = t4017 * t4024;
t4244 = t4017 * t4026;
t4243 = t4017 * t4027;
t4242 = t4017 * t4029;
t4241 = t4017 * t4030;
t4236 = t4018 * t4024;
t4235 = t4018 * t4027;
t4234 = t4018 * t4030;
t4229 = t4022 * t4033;
t4228 = t4023 * t4024;
t4227 = t4023 * t4032;
t4226 = t4023 * t4033;
t4224 = t4024 * t4032;
t4223 = t4024 * t4041;
t4222 = t4025 * t4036;
t4221 = t4026 * t4027;
t4220 = t4026 * t4035;
t4219 = t4026 * t4036;
t4217 = t4027 * t4035;
t4216 = t4027 * t4041;
t4215 = t4028 * t4039;
t4214 = t4029 * t4030;
t4213 = t4029 * t4038;
t4212 = t4029 * t4039;
t4210 = t4030 * t4038;
t4209 = t4030 * t4041;
t4207 = t4032 * t4033;
t3941 = pkin(1) + 0.2e1 * t3974;
t4206 = t4033 * t3941;
t4205 = t4033 * t4041;
t4203 = t4035 * t4036;
t3942 = pkin(1) + 0.2e1 * t3975;
t4202 = t4036 * t3942;
t4201 = t4036 * t4041;
t4199 = t4038 * t4039;
t3943 = pkin(1) + 0.2e1 * t3976;
t4198 = t4039 * t3943;
t4197 = t4039 * t4041;
t4193 = -0.2e1 * t4317;
t4186 = -0.2e1 * t4266;
t4179 = pkin(3) * t4229;
t4178 = pkin(3) * t4222;
t4177 = pkin(3) * t4215;
t3877 = (-t4328 * mrSges(3,1) + t4053 * mrSges(3,2)) * t4031 + t4022 * (t4053 * mrSges(3,1) + t4328 * mrSges(3,2));
t3944 = t4031 * pkin(6) - t4300;
t4046 = 0.1e1 / pkin(3);
t4166 = t3877 / ((-t3944 * t3968 * t4017 + t4278) * t4032 + (pkin(1) * t3968 * t4022 - t3944 * t3974) * t4017 - t4182 * t4338) * t4046;
t3878 = (-t4327 * mrSges(3,1) + t4052 * mrSges(3,2)) * t4034 + t4025 * (t4052 * mrSges(3,1) + t4327 * mrSges(3,2));
t3945 = t4034 * pkin(6) - t4299;
t4165 = t3878 / ((-t3945 * t3969 * t4017 + t4277) * t4035 + (pkin(1) * t3969 * t4025 - t3945 * t3975) * t4017 - t4181 * t4337) * t4046;
t3879 = (-t4326 * mrSges(3,1) + t4051 * mrSges(3,2)) * t4037 + t4028 * (t4051 * mrSges(3,1) + t4326 * mrSges(3,2));
t3946 = t4037 * pkin(6) - t4298;
t4164 = t3879 / ((-t3946 * t3970 * t4017 + t4276) * t4038 + (pkin(1) * t3970 * t4028 - t3946 * t3976) * t4017 - t4180 * t4336) * t4046;
t4133 = t4018 * t4205;
t4163 = (t3968 * t4133 - t4024 * t4281 / 0.2e1) * t4012 * t4017;
t4132 = t4018 * t4201;
t4162 = (t3969 * t4132 - t4027 * t4280 / 0.2e1) * t4014 * t4017;
t4131 = t4018 * t4197;
t4161 = (t3970 * t4131 - t4030 * t4279 / 0.2e1) * t4016 * t4017;
t4160 = t3941 * t3968 * t4024;
t4159 = t3942 * t3969 * t4027;
t4158 = t3943 * t3970 * t4030;
t4157 = t4023 * t4281;
t4156 = t4026 * t4280;
t4155 = t4029 * t4279;
t4154 = t3968 * t4263;
t4153 = t3968 * t4255;
t4152 = t3969 * t4260;
t4151 = t3969 * t4253;
t4150 = t3970 * t4257;
t4149 = t3970 * t4251;
t4148 = t3989 * t4226;
t4147 = t3990 * t4219;
t4146 = t3991 * t4212;
t4145 = t3992 * t4246;
t4144 = t3992 * t4226;
t4143 = t3993 * t4244;
t4142 = t3993 * t4219;
t4141 = t3994 * t4212;
t4140 = t4018 * t4250;
t4139 = t4022 * t4245;
t4138 = t4025 * t4243;
t4137 = t4028 * t4241;
t4136 = t4018 * t4228;
t4135 = t4018 * t4221;
t4134 = t4018 * t4214;
t4130 = t3989 * t4246;
t4129 = t3990 * t4244;
t4128 = t3991 * t4242;
t4127 = t3994 * t4242;
t4123 = 0.2e1 * pkin(2) * t4230;
t4122 = pkin(3) * t4148;
t4121 = pkin(3) * t4144;
t4120 = pkin(3) * t4147;
t4119 = pkin(3) * t4142;
t4118 = pkin(3) * t4146;
t4117 = pkin(3) * t4141;
t4113 = t4033 * t4157;
t4112 = t4036 * t4156;
t4111 = t4039 * t4155;
t4110 = t4224 * t4246;
t4109 = t4217 * t4244;
t4108 = t4210 * t4242;
t4107 = t3962 * t4154;
t4106 = t3962 * t4153;
t4105 = t3962 * t4148;
t4104 = t3962 * t4144;
t4103 = t3964 * t4152;
t4102 = t3964 * t4151;
t4101 = t3964 * t4147;
t4100 = t3964 * t4142;
t4099 = t3966 * t4150;
t4098 = t3966 * t4149;
t4097 = t3966 * t4146;
t4096 = t3966 * t4141;
t4095 = t4023 * t4169;
t4094 = t4026 * t4168;
t4093 = t4029 * t4167;
t4092 = t3968 * t4012 * t4186;
t4091 = t3969 * t4014 * t4186;
t4090 = t3970 * t4016 * t4186;
t3954 = t3974 + pkin(1);
t4089 = t3954 * t4032 + t4305;
t3955 = t3975 + pkin(1);
t4088 = t3955 * t4035 + t4303;
t3956 = t3976 + pkin(1);
t4087 = t3956 * t4038 + t4301;
t4071 = t4023 * t3977 - pkin(2) + t4305;
t4070 = t4026 * t3978 - pkin(2) + t4303;
t4069 = t4029 * t3979 - pkin(2) + t4301;
t4068 = pkin(6) * t4226 - (pkin(2) * t4227 + t3959 - t4334) * t4245;
t4067 = pkin(6) * t4219 - (pkin(2) * t4220 + t3960 - t4333) * t4243;
t4066 = pkin(6) * t4212 - (pkin(2) * t4213 + t3961 - t4332) * t4241;
t4062 = t4071 * t4229;
t4061 = t4070 * t4222;
t4060 = t4069 * t4215;
t4059 = -(t4018 * t4312 + t4223) * t4023 + (-pkin(2) * t4024 + t4133) * t4032 + t4017 * t4179;
t4058 = -(t4018 * t4310 + t4216) * t4026 + (-pkin(2) * t4027 + t4132) * t4035 + t4017 * t4178;
t4057 = -(t4018 * t4308 + t4209) * t4029 + (-pkin(2) * t4030 + t4131) * t4038 + t4017 * t4177;
t4056 = -t4018 * t3995 + t4074;
t4055 = -t4018 * t3996 + t4073;
t4054 = -t4018 * t3997 + t4072;
t4050 = -t4071 * t4022 - t4116 * t4031;
t4049 = -t4070 * t4025 - t4115 * t4034;
t4048 = -t4069 * t4028 - t4114 * t4037;
t4047 = pkin(2) ^ 2;
t4007 = pkin(1) * t4041;
t3925 = -pkin(1) * t4317 - t4041 * t4307;
t3924 = t4018 * t4209 + t4308;
t3923 = t4018 * t4216 + t4310;
t3922 = t4018 * t4223 + t4312;
t3912 = t4018 * t4212 + t4210;
t3911 = t4018 * t4219 + t4217;
t3910 = t4018 * t4226 + t4224;
t3900 = t4007 - t4155;
t3899 = t4007 - t4156;
t3898 = t4007 - t4157;
t1 = [(-(t3912 * t3994 + t4128) * t4302 + (t4054 * t3991 + t4057 * t3994) * t4037 + (-t3991 * t4018 + t3994 * t4238) * t4298) * t4294 + ((t4048 * t3991 + t4323 * t4251) * t4008 + ((t3994 * t4210 + 0.2e1 * t4128) * t4302 + (-t3991 * t4072 + t4322 * t3994) * t4037 + t4017 * (t3994 * t4060 - t4167 * t4258)) * t4018 - t4015 * t4117 + ((t3991 * t4016 - t3994 * t4108 - t3991) * t3997 - t3991 * pkin(6)) * t4037 + (t4087 * t3991 + t4066 * t3994) * t4028 + t4117) * t4291 + (0.2e1 * t3994 * t4161 + (((-t3966 * t4268 - t3994 * t4111) * t4018 - t3994 * t4158) * t4017 + (t3991 * t4155 - t4098) * t4008 + t4098 + t3900 * t3991) * t4038 - t3970 * t4259 + (t3991 * t4090 - ((t3966 * t4258 + t4149) * t4018 + t4030 * t4252) * t4017 - (t4096 - t4268) * t4008 + t4096) * t4041) * t4164 + (-(t3911 * t3993 + t4129) * t4304 + (t4055 * t3990 + t4058 * t3993) * t4034 + (-t3990 * t4018 + t3993 * t4239) * t4299) * t4295 + ((t4049 * t3990 + t4324 * t4253) * t4008 + ((t3993 * t4217 + 0.2e1 * t4129) * t4304 + (-t3990 * t4073 + t4321 * t3993) * t4034 + t4017 * (t3993 * t4061 - t4168 * t4261)) * t4018 - t4013 * t4119 + ((t3990 * t4014 - t3993 * t4109 - t3990) * t3996 - t3990 * pkin(6)) * t4034 + (t4088 * t3990 + t4067 * t3993) * t4025 + t4119) * t4292 + (0.2e1 * t3993 * t4162 + (((-t3964 * t4270 - t3993 * t4112) * t4018 - t3993 * t4159) * t4017 + (t3990 * t4156 - t4102) * t4008 + t4102 + t3899 * t3990) * t4035 - t3969 * t4262 + (t3990 * t4091 - ((t3964 * t4261 + t4151) * t4018 + t4027 * t4254) * t4017 - (t4100 - t4270) * t4008 + t4100) * t4041) * t4165 + (-(t3910 * t3992 + t4130) * t4306 + (t4056 * t3989 + t4059 * t3992) * t4031 + (-t3989 * t4018 + t3992 * t4240) * t4300) * t4296 + ((t4050 * t3989 + t4325 * t4255) * t4008 + ((t3992 * t4224 + 0.2e1 * t4130) * t4306 + (-t3989 * t4074 + t4320 * t3992) * t4031 + t4017 * (t3992 * t4062 - t4169 * t4264)) * t4018 - t4011 * t4121 + ((t3989 * t4012 - t3992 * t4110 - t3989) * t3995 - t3989 * pkin(6)) * t4031 + (t4089 * t3989 + t4068 * t3992) * t4022 + t4121) * t4293 + (0.2e1 * t3992 * t4163 + (((-t3962 * t4272 - t3992 * t4113) * t4018 - t3992 * t4160) * t4017 + (t3989 * t4157 - t4106) * t4008 + t4106 + t3898 * t3989) * t4032 - t3968 * t4265 + (t3989 * t4092 - ((t3962 * t4264 + t4153) * t4018 + t4024 * t4256) * t4017 - (t4104 - t4272) * t4008 + t4104) * t4041) * t4166 - g(1) * m(4); ((t3912 * t3991 - t4127) * t4302 + (-t4057 * t3991 + t4054 * t3994) * t4037 - (t3991 * t4238 + t3994 * t4018) * t4298) * t4294 + ((t4048 * t3994 - t4323 * t4257) * t4008 + (-(t3991 * t4210 - 0.2e1 * t4127) * t4302 + (-t4322 * t3991 - t3994 * t4072) * t4037 - (t3991 * t4060 + t3994 * t4093) * t4017) * t4018 + t4015 * t4118 + ((t3991 * t4108 + t3994 * t4016 - t3994) * t3997 - t3994 * pkin(6)) * t4037 + (-t4066 * t3991 + t4087 * t3994) * t4028 - t4118) * t4291 + (-0.2e1 * t3991 * t4161 + (((-t3966 * t4267 + t3991 * t4111) * t4018 + t3991 * t4158) * t4017 + (t3994 * t4155 + t4099) * t4008 - t4099 + t3900 * t3994) * t4038 - t3970 * t4252 + (t3994 * t4090 + ((-t3966 * t3994 * t4029 + t4150) * t4018 + t4030 * t4259) * t4017 + (t4097 + t4267) * t4008 - t4097) * t4041) * t4164 + ((t3911 * t3990 - t4143) * t4304 + (-t4058 * t3990 + t4055 * t3993) * t4034 - (t3990 * t4239 + t3993 * t4018) * t4299) * t4295 + ((t4049 * t3993 - t4324 * t4260) * t4008 + (-(t3990 * t4217 - 0.2e1 * t4143) * t4304 + (-t4321 * t3990 - t3993 * t4073) * t4034 - (t3990 * t4061 + t3993 * t4094) * t4017) * t4018 + t4013 * t4120 + ((t3990 * t4109 + t3993 * t4014 - t3993) * t3996 - t3993 * pkin(6)) * t4034 + (-t4067 * t3990 + t4088 * t3993) * t4025 - t4120) * t4292 + (-0.2e1 * t3990 * t4162 + (((-t3964 * t4269 + t3990 * t4112) * t4018 + t3990 * t4159) * t4017 + (t3993 * t4156 + t4103) * t4008 - t4103 + t3899 * t3993) * t4035 - t3969 * t4254 + (t3993 * t4091 + ((-t3964 * t3993 * t4026 + t4152) * t4018 + t4027 * t4262) * t4017 + (t4101 + t4269) * t4008 - t4101) * t4041) * t4165 + ((t3910 * t3989 - t4145) * t4306 + (-t4059 * t3989 + t4056 * t3992) * t4031 - (t3989 * t4240 + t3992 * t4018) * t4300) * t4296 + ((t4050 * t3992 - t4325 * t4263) * t4008 + (-(t3989 * t4224 - 0.2e1 * t4145) * t4306 + (-t4320 * t3989 - t3992 * t4074) * t4031 - (t3989 * t4062 + t3992 * t4095) * t4017) * t4018 + t4011 * t4122 + ((t3989 * t4110 + t3992 * t4012 - t3992) * t3995 - t3992 * pkin(6)) * t4031 + (-t4068 * t3989 + t4089 * t3992) * t4022 - t4122) * t4293 + (-0.2e1 * t3989 * t4163 + (((-t3962 * t4271 + t3989 * t4113) * t4018 + t3989 * t4160) * t4017 + (t3992 * t4157 + t4107) * t4008 - t4107 + t3898 * t3992) * t4032 - t3968 * t4256 + (t3992 * t4092 + ((-t3962 * t3992 * t4023 + t4154) * t4018 + t4024 * t4265) * t4017 + (t4105 + t4271) * t4008 - t4105) * t4041) * t4166 - g(2) * m(4); (-(-t4134 + t4199) * t4302 + (-pkin(3) * t4137 - t3924 * t4038 - t4029 * (-pkin(2) * t4234 + t4197)) * t4037 - pkin(2) * t4137) * t4294 + (((-t4114 * t4234 - t4177 * t4213) * t4037 - (t4069 * t4234 + t4039 * (t3973 * t4029 + t4041 - t4332)) * t4028) * t4017 + (t4018 * t4199 + t4319 * t4214) * t4302 + (t3937 * t4039 + t3940 * t4234) * t4231 + t4030 * t4093 * t4266) * t4291 + (-(-t4135 + t4203) * t4304 + (-pkin(3) * t4138 - t3923 * t4035 - t4026 * (-pkin(2) * t4235 + t4201)) * t4034 - pkin(2) * t4138) * t4295 + (((-t4115 * t4235 - t4178 * t4220) * t4034 - (t4070 * t4235 + t4036 * (t3972 * t4026 + t4041 - t4333)) * t4025) * t4017 + (t4018 * t4203 + t4319 * t4221) * t4304 + (t3936 * t4036 + t3939 * t4235) * t4232 + t4027 * t4094 * t4266) * t4292 + (-(-t4136 + t4207) * t4306 + (-pkin(3) * t4139 - t3922 * t4032 - t4023 * (-pkin(2) * t4236 + t4205)) * t4031 - pkin(2) * t4139) * t4296 + (((-t4116 * t4236 - t4179 * t4227) * t4031 - (t4071 * t4236 + t4033 * (t3971 * t4023 + t4041 - t4334)) * t4022) * t4017 + (t4018 * t4207 + t4319 * t4228) * t4306 + (t3935 * t4033 + t3938 * t4236) * t4233 + t4024 * t4095 * t4266) * t4293 - g(3) * m(4) + (-((t4030 * t4123 + 0.2e1 * t3924 * t4000 + (t4247 + t4250) * t4039) * t4016 + (-t4134 * t4247 + ((t4029 * t4193 + t4273) * t4030 + t4198) * t4000 + (pkin(2) * t4273 - t4029 * t4140) * t4030 + pkin(2) * t4198) * t4038 + (t4039 * t3961 + (t3966 * t4242 - t3970 * t4018) * t4030) * t4041) / ((t4276 + (t3967 * t4309 + t4028 * t4047 - t4187) * t4017) * t4038 - t4183 * t4302 + (t3925 * t4029 + t4017 * t4190) * t4037 + t4017 * t3956 * t4298) * t3879 - ((t4027 * t4123 + 0.2e1 * t3923 * t3999 + (t4248 + t4250) * t4036) * t4014 + (-t4135 * t4248 + ((t4026 * t4193 + t4274) * t4027 + t4202) * t3999 + (pkin(2) * t4274 - t4026 * t4140) * t4027 + pkin(2) * t4202) * t4035 + (t4036 * t3960 + (t3964 * t4244 - t3969 * t4018) * t4027) * t4041) / ((t4277 + (t3965 * t4311 + t4025 * t4047 - t4188) * t4017) * t4035 - t4184 * t4304 + (t3925 * t4026 + t4017 * t4191) * t4034 + t4017 * t3955 * t4299) * t3878 - ((t4024 * t4123 + 0.2e1 * t3922 * t3998 + (t4249 + t4250) * t4033) * t4012 + (-t4136 * t4249 + ((t4023 * t4193 + t4275) * t4024 + t4206) * t3998 + (pkin(2) * t4275 - t4023 * t4140) * t4024 + pkin(2) * t4206) * t4032 + (t4033 * t3959 + (t3962 * t4246 - t3968 * t4018) * t4024) * t4041) / ((t4278 + (t3963 * t4313 + t4022 * t4047 - t4189) * t4017) * t4032 - t4185 * t4306 + (t3925 * t4023 + t4017 * t4192) * t4031 + t4017 * t3954 * t4300) * t3877) * t4017 * t4046;];
taugX  = t1;
