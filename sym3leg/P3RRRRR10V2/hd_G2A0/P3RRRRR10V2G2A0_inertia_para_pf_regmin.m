% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x18]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V2G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:26:21
% EndTime: 2020-08-07 01:27:50
% DurationCPUTime: 105.41s
% Computational Cost: add. (164709->1519), mult. (328626->2714), div. (4509->16), fcn. (278892->26), ass. (0->985)
t2523 = legFrame(1,2);
t2486 = sin(t2523);
t2489 = cos(t2523);
t2530 = sin(qJ(3,1));
t2492 = t2530 * pkin(3);
t2520 = cos(pkin(4));
t2507 = t2520 ^ 2;
t2539 = cos(qJ(3,1));
t2517 = t2539 ^ 2;
t2540 = cos(qJ(2,1));
t2518 = t2540 ^ 2;
t2519 = sin(pkin(4));
t2542 = pkin(8) + pkin(7);
t2478 = t2542 * t2540;
t2531 = sin(qJ(2,1));
t2498 = t2518 * pkin(2);
t3157 = t2498 - pkin(2);
t2602 = t2478 * t2531 + t3157;
t2481 = t2518 - 0.2e1;
t2701 = t2481 * t2492 - pkin(6);
t2548 = -t2530 * t2602 - t2539 * t2701;
t2541 = cos(qJ(1,1));
t2940 = t2530 * t2541;
t2563 = t2602 * t2940;
t2504 = pkin(1) * t2531;
t2469 = t2504 + pkin(7);
t2454 = pkin(8) + t2469;
t2936 = t2531 * t2541;
t2937 = t2531 * t2540;
t2532 = sin(qJ(1,1));
t2984 = t2519 * t2532;
t3132 = t2518 * t2542;
t2599 = pkin(6) * t2936 - (pkin(2) * t2937 + t2454 - t3132) * t2984;
t3103 = pkin(2) * t2531;
t2429 = t2478 - t3103;
t2605 = t2519 * t2429;
t2475 = t2542 * t2531;
t2447 = t2475 + pkin(1);
t2635 = t2447 * t2540 + t2498;
t2859 = t2530 * pkin(6) + pkin(3);
t2653 = t2531 * t2859;
t2934 = t2532 * t2540;
t2985 = t2519 * t2531;
t2668 = t2934 * t2985;
t2749 = t2486 * t2936;
t2705 = pkin(3) * t2749;
t2726 = t2489 * t2985;
t2997 = t2486 * t2541;
t3094 = t2517 * pkin(3);
t2501 = pkin(2) * t2540;
t2918 = t2475 + t2501;
t2426 = pkin(1) + t2918;
t2978 = t2519 * t2541;
t3119 = t2532 * t2426 + t2701 * t2978;
t3098 = pkin(2) * t2539;
t3120 = t2531 * (-t2859 + 0.2e1 * t3094 + t3098) - t2539 * t2478;
t2308 = (t2548 * t2489 - t2997 * t3120) * t2507 + (-(t2486 * t2934 - 0.2e1 * t2726) * t3094 + (-t2486 * t3119 - t2489 * t2605) * t2539 - (t2486 * t2563 + t2489 * t2653) * t2519) * t2520 + t2517 * t2705 + ((t2486 * t2668 + t2489 * t2518 - t2489) * t2492 - t2489 * pkin(6)) * t2539 + (-t2486 * t2599 + t2489 * t2635) * t2530 - t2705;
t3104 = pkin(2) * t2530;
t2868 = t2426 * t3104;
t2968 = t2520 * t2539;
t2889 = pkin(1) * t2968;
t2908 = pkin(6) * t3094;
t3138 = t2501 + pkin(1);
t2497 = t2539 * pkin(3);
t2463 = t2497 + pkin(2);
t3169 = t2463 * t2531;
t2371 = 0.1e1 / ((-t2540 * t2908 + (-pkin(6) * t2918 + t2492 * t3138) * t2539 + t2868) * t2519 + (t2478 - t3169) * t2889);
t2272 = t2308 * t2371;
t2505 = pkin(1) * t2542;
t2508 = pkin(2) + t2542;
t2509 = pkin(2) - t2542;
t3019 = (t2497 + t2508) * (t2497 + t2509);
t2763 = t2531 * t3019;
t2386 = t2505 - t2763;
t2459 = t2492 + pkin(6);
t3003 = (t2520 + 0.1e1) * (t2520 - 0.1e1);
t2903 = -0.2e1 * t3003;
t2641 = t2463 * t2518 * t2903;
t2755 = t2463 * t2997;
t2663 = t2459 * t2755;
t2672 = t2459 * t2749;
t2677 = t2541 * t2763;
t2543 = 0.2e1 * t2542;
t2450 = t2531 * t2543 + pkin(1);
t2760 = t2450 * t2463 * t2532;
t2921 = t2541 * t2542;
t2730 = t2520 * t2921;
t2766 = (t2463 * t2730 - t2532 * t3019 / 0.2e1) * t2518 * t2519;
t3004 = t2463 * t2489;
t3013 = t2454 * t2532;
t2316 = -0.2e1 * t2486 * t2766 + (((-t2459 * t3004 + t2486 * t2677) * t2520 + t2486 * t2760) * t2519 + (t2489 * t2763 + t2663) * t2507 - t2663 + t2386 * t2489) * t2540 - t2454 * t3004 + (t2489 * t2641 + ((-t2459 * t2489 * t2531 + t2755) * t2520 + t2486 * t3013) * t2519 + (t2672 + t3004) * t2507 - t2672) * t2542;
t2404 = t2520 * t2936 + t2934;
t2972 = t2520 * t2530;
t2557 = -pkin(3) * t2972 + t2605;
t2883 = pkin(3) * t2940;
t2933 = t2532 * t2542;
t3097 = pkin(2) * t2541;
t2560 = -(t2520 * t3097 + t2933) * t2531 + (-pkin(2) * t2532 + t2730) * t2540 + t2519 * t2883;
t2356 = (t2404 * t2486 - t2726) * t3094 + (-t2486 * t2560 + t2489 * t2557) * t2539 - (t2486 * t2978 + t2489 * t2520) * t3104;
t2979 = t2519 * t2540;
t2880 = pkin(6) * t2979;
t2892 = t2520 * t2504;
t2408 = t2880 + t2892;
t2460 = t2492 - pkin(6);
t2911 = pkin(1) * t2492;
t3113 = pkin(1) * t2520;
t2366 = -t2408 * t3094 + ((-pkin(6) * t2475 + t2460 * t2501 + t2911) * t2519 + t2429 * t3113) * t2539 + t2519 * t2868;
t2360 = 0.1e1 / t2366;
t2806 = t2360 * t2985;
t3141 = 0.2e1 * pkin(6);
t2661 = t2806 * t3141;
t2437 = t2539 * pkin(6) - t3104;
t2967 = t2520 * t2542;
t2451 = pkin(1) * t2967;
t3016 = t2451 * t2539;
t2377 = 0.1e1 / ((-t2437 * t2463 * t2519 + t3016) * t2540 + (pkin(1) * t2463 * t2530 - t2437 * t2475) * t2519 - t2889 * t3169);
t2546 = 0.1e1 / pkin(3);
t3022 = t2377 * t2546;
t2842 = t2316 * t3022;
t2714 = pkin(7) * t2842;
t2544 = 0.2e1 * pkin(2);
t3110 = pkin(1) * t2540;
t2472 = t2544 + t3110;
t3028 = t2371 * t2472;
t2432 = pkin(7) * t2531 + t3138;
t3125 = 0.2e1 * ((pkin(7) * t2937 + t3157) * t2507 - t2432 * t2540) * t2360;
t3128 = t2546 * t3138;
t3154 = t2377 * t3128;
t3177 = (t2316 * t3154 + (pkin(6) * t2272 + t2714) * t2531) * t2519 + t2356 * t3125 + (-t2308 * t3028 + t2356 * t2661) * t2520;
t2746 = t2489 * t2936;
t2704 = pkin(3) * t2746;
t2750 = t2486 * t2985;
t2994 = t2489 * t2541;
t2998 = t2486 * t2531;
t2311 = (t2548 * t2486 + t2994 * t3120) * t2507 + ((t2489 * t2934 + 0.2e1 * t2750) * t3094 + (-t2486 * t2605 + t2489 * t3119) * t2539 + t2519 * (t2489 * t2563 - t2859 * t2998)) * t2520 - t2517 * t2704 + ((t2486 * t2518 - t2489 * t2668 - t2486) * t2492 - t2486 * pkin(6)) * t2539 + (t2486 * t2635 + t2489 * t2599) * t2530 + t2704;
t2275 = t2311 * t2371;
t2754 = t2463 * t2994;
t2662 = t2459 * t2754;
t2671 = t2459 * t2746;
t3005 = t2463 * t2486;
t2317 = 0.2e1 * t2489 * t2766 + (((-t2459 * t3005 - t2489 * t2677) * t2520 - t2489 * t2760) * t2519 + (t2486 * t2763 - t2662) * t2507 + t2662 + t2386 * t2486) * t2540 - t2454 * t3005 + (t2486 * t2641 - ((t2459 * t2998 + t2754) * t2520 + t2489 * t3013) * t2519 - (t2671 - t3005) * t2507 + t2671) * t2542;
t2355 = -(t2404 * t2489 + t2750) * t3094 + (t2486 * t2557 + t2489 * t2560) * t2539 + (-t2486 * t2520 + t2489 * t2978) * t3104;
t2841 = t2317 * t3022;
t2713 = pkin(7) * t2841;
t3176 = (t2317 * t3154 + (pkin(6) * t2275 + t2713) * t2531) * t2519 + t2355 * t3125 + (-t2311 * t3028 + t2355 * t2661) * t2520;
t2522 = legFrame(2,2);
t2485 = sin(t2522);
t2488 = cos(t2522);
t2527 = sin(qJ(3,2));
t2491 = t2527 * pkin(3);
t2536 = cos(qJ(3,2));
t2515 = t2536 ^ 2;
t2537 = cos(qJ(2,2));
t2516 = t2537 ^ 2;
t2477 = t2542 * t2537;
t2528 = sin(qJ(2,2));
t2496 = t2516 * pkin(2);
t3158 = t2496 - pkin(2);
t2603 = t2477 * t2528 + t3158;
t2480 = t2516 - 0.2e1;
t2702 = t2480 * t2491 - pkin(6);
t2549 = -t2527 * t2603 - t2536 * t2702;
t2538 = cos(qJ(1,2));
t2951 = t2527 * t2538;
t2564 = t2603 * t2951;
t2503 = pkin(1) * t2528;
t2468 = t2503 + pkin(7);
t2453 = pkin(8) + t2468;
t2947 = t2528 * t2538;
t2948 = t2528 * t2537;
t2529 = sin(qJ(1,2));
t2986 = t2519 * t2529;
t3133 = t2516 * t2542;
t2600 = pkin(6) * t2947 - (pkin(2) * t2948 + t2453 - t3133) * t2986;
t3105 = pkin(2) * t2528;
t2428 = t2477 - t3105;
t2606 = t2519 * t2428;
t2474 = t2542 * t2528;
t2446 = t2474 + pkin(1);
t2636 = t2446 * t2537 + t2496;
t2860 = t2527 * pkin(6) + pkin(3);
t2654 = t2528 * t2860;
t2945 = t2529 * t2537;
t2987 = t2519 * t2528;
t2669 = t2945 * t2987;
t2751 = t2485 * t2947;
t2707 = pkin(3) * t2751;
t2727 = t2488 * t2987;
t2999 = t2485 * t2538;
t3095 = t2515 * pkin(3);
t2500 = pkin(2) * t2537;
t2919 = t2474 + t2500;
t2425 = pkin(1) + t2919;
t2980 = t2519 * t2538;
t3118 = t2529 * t2425 + t2702 * t2980;
t3100 = pkin(2) * t2536;
t3121 = t2528 * (-t2860 + 0.2e1 * t3095 + t3100) - t2536 * t2477;
t2307 = (t2549 * t2488 - t2999 * t3121) * t2507 + (-(t2485 * t2945 - 0.2e1 * t2727) * t3095 + (-t2485 * t3118 - t2488 * t2606) * t2536 - (t2485 * t2564 + t2488 * t2654) * t2519) * t2520 + t2515 * t2707 + ((t2485 * t2669 + t2488 * t2516 - t2488) * t2491 - t2488 * pkin(6)) * t2536 + (-t2485 * t2600 + t2488 * t2636) * t2527 - t2707;
t3106 = pkin(2) * t2527;
t2869 = t2425 * t3106;
t2969 = t2520 * t2536;
t2890 = pkin(1) * t2969;
t2909 = pkin(6) * t3095;
t3139 = t2500 + pkin(1);
t2495 = t2536 * pkin(3);
t2462 = t2495 + pkin(2);
t3170 = t2462 * t2528;
t2370 = 0.1e1 / ((-t2537 * t2909 + (-pkin(6) * t2919 + t2491 * t3139) * t2536 + t2869) * t2519 + (t2477 - t3170) * t2890);
t2271 = t2307 * t2370;
t3020 = (t2495 + t2508) * (t2495 + t2509);
t2764 = t2528 * t3020;
t2385 = t2505 - t2764;
t2457 = t2491 + pkin(6);
t2642 = t2462 * t2516 * t2903;
t2757 = t2462 * t2999;
t2665 = t2457 * t2757;
t2674 = t2457 * t2751;
t2678 = t2538 * t2764;
t2449 = t2528 * t2543 + pkin(1);
t2761 = t2449 * t2462 * t2529;
t2925 = t2538 * t2542;
t2731 = t2520 * t2925;
t2767 = (t2462 * t2731 - t2529 * t3020 / 0.2e1) * t2516 * t2519;
t3006 = t2462 * t2488;
t3014 = t2453 * t2529;
t2314 = -0.2e1 * t2485 * t2767 + (((-t2457 * t3006 + t2485 * t2678) * t2520 + t2485 * t2761) * t2519 + (t2488 * t2764 + t2665) * t2507 - t2665 + t2385 * t2488) * t2537 - t2453 * t3006 + (t2488 * t2642 + ((-t2457 * t2488 * t2528 + t2757) * t2520 + t2485 * t3014) * t2519 + (t2674 + t3006) * t2507 - t2674) * t2542;
t2403 = t2520 * t2947 + t2945;
t2974 = t2520 * t2527;
t2558 = -pkin(3) * t2974 + t2606;
t2884 = pkin(3) * t2951;
t2944 = t2529 * t2542;
t3099 = pkin(2) * t2538;
t2561 = -(t2520 * t3099 + t2944) * t2528 + (-pkin(2) * t2529 + t2731) * t2537 + t2519 * t2884;
t2354 = (t2403 * t2485 - t2727) * t3095 + (-t2485 * t2561 + t2488 * t2558) * t2536 - (t2485 * t2980 + t2488 * t2520) * t3106;
t2981 = t2519 * t2537;
t2881 = pkin(6) * t2981;
t2893 = t2520 * t2503;
t2410 = t2881 + t2893;
t2458 = t2491 - pkin(6);
t2912 = pkin(1) * t2491;
t2368 = -t2410 * t3095 + ((-pkin(6) * t2474 + t2458 * t2500 + t2912) * t2519 + t2428 * t3113) * t2536 + t2519 * t2869;
t2364 = 0.1e1 / t2368;
t2790 = t2364 * t2987;
t2659 = t2790 * t3141;
t2435 = t2536 * pkin(6) - t3106;
t3017 = t2451 * t2536;
t2376 = 0.1e1 / ((-t2435 * t2462 * t2519 + t3017) * t2537 + (pkin(1) * t2462 * t2527 - t2435 * t2474) * t2519 - t2890 * t3170);
t3023 = t2376 * t2546;
t2844 = t2314 * t3023;
t2716 = pkin(7) * t2844;
t3111 = pkin(1) * t2537;
t2471 = t2544 + t3111;
t3035 = t2370 * t2471;
t2431 = pkin(7) * t2528 + t3139;
t3124 = 0.2e1 * ((pkin(7) * t2948 + t3158) * t2507 - t2431 * t2537) * t2364;
t3127 = t2546 * t3139;
t3155 = t2376 * t3127;
t3175 = (t2314 * t3155 + (pkin(6) * t2271 + t2716) * t2528) * t2519 + t2354 * t3124 + (-t2307 * t3035 + t2354 * t2659) * t2520;
t2747 = t2488 * t2947;
t2706 = pkin(3) * t2747;
t2752 = t2485 * t2987;
t2995 = t2488 * t2538;
t3000 = t2485 * t2528;
t2310 = (t2549 * t2485 + t2995 * t3121) * t2507 + ((t2488 * t2945 + 0.2e1 * t2752) * t3095 + (-t2485 * t2606 + t2488 * t3118) * t2536 + t2519 * (t2488 * t2564 - t2860 * t3000)) * t2520 - t2515 * t2706 + ((t2485 * t2516 - t2488 * t2669 - t2485) * t2491 - t2485 * pkin(6)) * t2536 + (t2485 * t2636 + t2488 * t2600) * t2527 + t2706;
t2274 = t2310 * t2370;
t2756 = t2462 * t2995;
t2664 = t2457 * t2756;
t2673 = t2457 * t2747;
t3007 = t2462 * t2485;
t2315 = 0.2e1 * t2488 * t2767 + (((-t2457 * t3007 - t2488 * t2678) * t2520 - t2488 * t2761) * t2519 + (t2485 * t2764 - t2664) * t2507 + t2664 + t2385 * t2485) * t2537 - t2453 * t3007 + (t2485 * t2642 - ((t2457 * t3000 + t2756) * t2520 + t2488 * t3014) * t2519 - (t2673 - t3007) * t2507 + t2673) * t2542;
t2353 = -(t2403 * t2488 + t2752) * t3095 + (t2485 * t2558 + t2488 * t2561) * t2536 + (-t2485 * t2520 + t2488 * t2980) * t3106;
t2843 = t2315 * t3023;
t2715 = pkin(7) * t2843;
t3174 = (t2315 * t3155 + (pkin(6) * t2274 + t2715) * t2528) * t2519 + t2353 * t3124 + (-t2310 * t3035 + t2353 * t2659) * t2520;
t2521 = legFrame(3,2);
t2484 = sin(t2521);
t2487 = cos(t2521);
t2524 = sin(qJ(3,3));
t2490 = t2524 * pkin(3);
t2533 = cos(qJ(3,3));
t2513 = t2533 ^ 2;
t2534 = cos(qJ(2,3));
t2514 = t2534 ^ 2;
t2476 = t2542 * t2534;
t2525 = sin(qJ(2,3));
t2494 = t2514 * pkin(2);
t3159 = t2494 - pkin(2);
t2604 = t2476 * t2525 + t3159;
t2479 = t2514 - 0.2e1;
t2703 = t2479 * t2490 - pkin(6);
t2550 = -t2524 * t2604 - t2533 * t2703;
t2535 = cos(qJ(1,3));
t2962 = t2524 * t2535;
t2565 = t2604 * t2962;
t2502 = pkin(1) * t2525;
t2467 = t2502 + pkin(7);
t2452 = pkin(8) + t2467;
t2958 = t2525 * t2535;
t2959 = t2525 * t2534;
t2526 = sin(qJ(1,3));
t2988 = t2519 * t2526;
t3134 = t2514 * t2542;
t2601 = pkin(6) * t2958 - (pkin(2) * t2959 + t2452 - t3134) * t2988;
t3107 = pkin(2) * t2525;
t2427 = t2476 - t3107;
t2607 = t2519 * t2427;
t2473 = t2542 * t2525;
t2445 = t2473 + pkin(1);
t2637 = t2445 * t2534 + t2494;
t2861 = t2524 * pkin(6) + pkin(3);
t2655 = t2525 * t2861;
t2956 = t2526 * t2534;
t2989 = t2519 * t2525;
t2670 = t2956 * t2989;
t2753 = t2484 * t2958;
t2709 = pkin(3) * t2753;
t2728 = t2487 * t2989;
t3001 = t2484 * t2535;
t3096 = t2513 * pkin(3);
t2499 = pkin(2) * t2534;
t2920 = t2473 + t2499;
t2424 = pkin(1) + t2920;
t2982 = t2519 * t2535;
t3117 = t2526 * t2424 + t2703 * t2982;
t3102 = pkin(2) * t2533;
t3122 = t2525 * (-t2861 + 0.2e1 * t3096 + t3102) - t2533 * t2476;
t2306 = (t2550 * t2487 - t3001 * t3122) * t2507 + (-(t2484 * t2956 - 0.2e1 * t2728) * t3096 + (-t2484 * t3117 - t2487 * t2607) * t2533 - (t2484 * t2565 + t2487 * t2655) * t2519) * t2520 + t2513 * t2709 + ((t2484 * t2670 + t2487 * t2514 - t2487) * t2490 - t2487 * pkin(6)) * t2533 + (-t2484 * t2601 + t2487 * t2637) * t2524 - t2709;
t3108 = pkin(2) * t2524;
t2870 = t2424 * t3108;
t2970 = t2520 * t2533;
t2891 = pkin(1) * t2970;
t2910 = pkin(6) * t3096;
t3140 = t2499 + pkin(1);
t2493 = t2533 * pkin(3);
t2461 = t2493 + pkin(2);
t3171 = t2461 * t2525;
t2369 = 0.1e1 / ((-t2534 * t2910 + (-pkin(6) * t2920 + t2490 * t3140) * t2533 + t2870) * t2519 + (t2476 - t3171) * t2891);
t2270 = t2306 * t2369;
t3021 = (t2493 + t2508) * (t2493 + t2509);
t2765 = t2525 * t3021;
t2384 = t2505 - t2765;
t2455 = t2490 + pkin(6);
t2643 = t2461 * t2514 * t2903;
t2759 = t2461 * t3001;
t2667 = t2455 * t2759;
t2676 = t2455 * t2753;
t2679 = t2535 * t2765;
t2448 = t2525 * t2543 + pkin(1);
t2762 = t2448 * t2461 * t2526;
t2929 = t2535 * t2542;
t2732 = t2520 * t2929;
t2768 = (t2461 * t2732 - t2526 * t3021 / 0.2e1) * t2514 * t2519;
t3008 = t2461 * t2487;
t3015 = t2452 * t2526;
t2312 = -0.2e1 * t2484 * t2768 + (((-t2455 * t3008 + t2484 * t2679) * t2520 + t2484 * t2762) * t2519 + (t2487 * t2765 + t2667) * t2507 - t2667 + t2384 * t2487) * t2534 - t2452 * t3008 + (t2487 * t2643 + ((-t2455 * t2487 * t2525 + t2759) * t2520 + t2484 * t3015) * t2519 + (t2676 + t3008) * t2507 - t2676) * t2542;
t2402 = t2520 * t2958 + t2956;
t2976 = t2520 * t2524;
t2559 = -pkin(3) * t2976 + t2607;
t2885 = pkin(3) * t2962;
t2955 = t2526 * t2542;
t3101 = pkin(2) * t2535;
t2562 = -(t2520 * t3101 + t2955) * t2525 + (-pkin(2) * t2526 + t2732) * t2534 + t2519 * t2885;
t2352 = (t2402 * t2484 - t2728) * t3096 + (-t2484 * t2562 + t2487 * t2559) * t2533 - (t2484 * t2982 + t2487 * t2520) * t3108;
t2983 = t2519 * t2534;
t2882 = pkin(6) * t2983;
t2894 = t2520 * t2502;
t2409 = t2882 + t2894;
t2456 = t2490 - pkin(6);
t2913 = pkin(1) * t2490;
t2367 = -t2409 * t3096 + ((-pkin(6) * t2473 + t2456 * t2499 + t2913) * t2519 + t2427 * t3113) * t2533 + t2519 * t2870;
t2362 = 0.1e1 / t2367;
t2798 = t2362 * t2989;
t2660 = t2798 * t3141;
t2433 = t2533 * pkin(6) - t3108;
t3018 = t2451 * t2533;
t2375 = 0.1e1 / ((-t2433 * t2461 * t2519 + t3018) * t2534 + (pkin(1) * t2461 * t2524 - t2433 * t2473) * t2519 - t2891 * t3171);
t3024 = t2375 * t2546;
t2846 = t2312 * t3024;
t2718 = pkin(7) * t2846;
t3112 = pkin(1) * t2534;
t2470 = t2544 + t3112;
t3042 = t2369 * t2470;
t2430 = pkin(7) * t2525 + t3140;
t3123 = 0.2e1 * ((pkin(7) * t2959 + t3159) * t2507 - t2430 * t2534) * t2362;
t3126 = t2546 * t3140;
t3156 = t2375 * t3126;
t3173 = (t2312 * t3156 + (pkin(6) * t2270 + t2718) * t2525) * t2519 + t2352 * t3123 + (-t2306 * t3042 + t2352 * t2660) * t2520;
t2748 = t2487 * t2958;
t2708 = pkin(3) * t2748;
t2729 = t2484 * t2989;
t2996 = t2487 * t2535;
t3002 = t2484 * t2525;
t2309 = (t2550 * t2484 + t2996 * t3122) * t2507 + ((t2487 * t2956 + 0.2e1 * t2729) * t3096 + (-t2484 * t2607 + t2487 * t3117) * t2533 + t2519 * (t2487 * t2565 - t2861 * t3002)) * t2520 - t2513 * t2708 + ((t2484 * t2514 - t2487 * t2670 - t2484) * t2490 - t2484 * pkin(6)) * t2533 + (t2484 * t2637 + t2487 * t2601) * t2524 + t2708;
t2273 = t2309 * t2369;
t2758 = t2461 * t2996;
t2666 = t2455 * t2758;
t2675 = t2455 * t2748;
t3009 = t2461 * t2484;
t2313 = 0.2e1 * t2487 * t2768 + (((-t2455 * t3009 - t2487 * t2679) * t2520 - t2487 * t2762) * t2519 + (t2484 * t2765 - t2666) * t2507 + t2666 + t2384 * t2484) * t2534 - t2452 * t3009 + (t2484 * t2643 - ((t2455 * t3002 + t2758) * t2520 + t2487 * t3015) * t2519 - (t2675 - t3009) * t2507 + t2675) * t2542;
t2351 = -(t2402 * t2487 + t2729) * t3096 + (t2484 * t2559 + t2487 * t2562) * t2533 + (-t2484 * t2520 + t2487 * t2982) * t3108;
t2845 = t2313 * t3024;
t2717 = pkin(7) * t2845;
t3172 = (t2313 * t3156 + (pkin(6) * t2273 + t2717) * t2525) * t2519 + t2351 * t3123 + (-t2309 * t3042 + t2351 * t2660) * t2520;
t2931 = t2534 * t2535;
t2961 = t2525 * t2526;
t2975 = t2520 * t2526;
t3115 = -0.2e1 * t2507 + 0.1e1;
t2336 = ((-t2703 * t2975 - t2885 * t2959) * t2533 - (t2604 * t2975 + t2535 * (t2525 * t3140 + t2542 - t3134)) * t2524) * t2519 + (t2520 * t2931 + t3115 * t2961) * t3096 + (t2424 * t2535 + t2427 * t2975) * t2970 + t2526 * t2655 * t3003;
t2318 = t2336 * t2369;
t2417 = t2520 * t2955 + t3101;
t2735 = t2520 * t2961;
t2743 = t2524 * t2988;
t2378 = -(-t2735 + t2931) * t3096 + (-pkin(3) * t2743 - t2417 * t2534 - t2525 * (-pkin(2) * t2975 + t2929)) * t2533 - pkin(2) * t2743;
t3109 = pkin(2) * t2520;
t2420 = -pkin(6) * t2519 * t2542 - pkin(1) * t3109;
t2547 = pkin(2) ^ 2;
t2719 = t2967 * t2544;
t2993 = t2508 * t2509;
t2745 = t2520 * t2993;
t2914 = -0.2e1 * t3109;
t2930 = t2535 * t2448;
t2545 = pkin(3) ^ 2;
t2992 = t2513 * t2545;
t3012 = t2455 * t2519;
t3069 = ((t2526 * t2719 + 0.2e1 * t2417 * t2493 + (t2992 + t2993) * t2535) * t2514 + (-t2735 * t2992 + ((t2525 * t2914 + t3012) * t2526 + t2930) * t2493 + (pkin(2) * t3012 - t2525 * t2745) * t2526 + pkin(2) * t2930) * t2534 + (t2535 * t2452 + (t2455 * t2989 - t2461 * t2520) * t2526) * t2542) / ((t3018 + (t2456 * t3102 + t2524 * t2547 - t2910) * t2519) * t2534 - t2894 * t3096 + (t2420 * t2525 + t2519 * t2913) * t2533 + t2519 * t2445 * t3108);
t2840 = t2546 * t3069;
t2712 = pkin(7) * t2840;
t3162 = t2519 * (t3126 * t2519 * t3069 - (pkin(6) * t2318 - t2519 * t2712) * t2525) - t2378 * t3123 - (-t2336 * t3042 + t2378 * t2660) * t2520;
t2927 = t2537 * t2538;
t2950 = t2528 * t2529;
t2973 = t2520 * t2529;
t2337 = ((-t2702 * t2973 - t2884 * t2948) * t2536 - (t2603 * t2973 + t2538 * (t2528 * t3139 + t2542 - t3133)) * t2527) * t2519 + (t2520 * t2927 + t3115 * t2950) * t3095 + (t2425 * t2538 + t2428 * t2973) * t2969 + t2529 * t2654 * t3003;
t2319 = t2337 * t2370;
t2418 = t2520 * t2944 + t3099;
t2734 = t2520 * t2950;
t2740 = t2527 * t2986;
t2379 = -(-t2734 + t2927) * t3095 + (-pkin(3) * t2740 - t2418 * t2537 - t2528 * (-pkin(2) * t2973 + t2925)) * t2536 - pkin(2) * t2740;
t2926 = t2538 * t2449;
t2991 = t2515 * t2545;
t3011 = t2457 * t2519;
t3068 = ((t2529 * t2719 + 0.2e1 * t2418 * t2495 + (t2991 + t2993) * t2538) * t2516 + (-t2734 * t2991 + ((t2528 * t2914 + t3011) * t2529 + t2926) * t2495 + (pkin(2) * t3011 - t2528 * t2745) * t2529 + pkin(2) * t2926) * t2537 + (t2538 * t2453 + (t2457 * t2987 - t2462 * t2520) * t2529) * t2542) / ((t3017 + (t2458 * t3100 + t2527 * t2547 - t2909) * t2519) * t2537 - t2893 * t3095 + (t2420 * t2528 + t2519 * t2912) * t2536 + t2519 * t2446 * t3106);
t2839 = t2546 * t3068;
t2711 = pkin(7) * t2839;
t3161 = t2519 * (t3127 * t2519 * t3068 - (pkin(6) * t2319 - t2519 * t2711) * t2528) - t2379 * t3124 - (-t2337 * t3035 + t2379 * t2659) * t2520;
t2923 = t2540 * t2541;
t2939 = t2531 * t2532;
t2971 = t2520 * t2532;
t2338 = ((-t2701 * t2971 - t2883 * t2937) * t2539 - (t2602 * t2971 + t2541 * (t2531 * t3138 + t2542 - t3132)) * t2530) * t2519 + (t2520 * t2923 + t3115 * t2939) * t3094 + (t2426 * t2541 + t2429 * t2971) * t2968 + t2532 * t2653 * t3003;
t2320 = t2338 * t2371;
t2419 = t2520 * t2933 + t3097;
t2733 = t2520 * t2939;
t2737 = t2530 * t2984;
t2380 = -(-t2733 + t2923) * t3094 + (-pkin(3) * t2737 - t2419 * t2540 - t2531 * (-pkin(2) * t2971 + t2921)) * t2539 - pkin(2) * t2737;
t2922 = t2541 * t2450;
t2990 = t2517 * t2545;
t3010 = t2459 * t2519;
t3067 = ((t2532 * t2719 + 0.2e1 * t2419 * t2497 + (t2990 + t2993) * t2541) * t2518 + (-t2733 * t2990 + ((t2531 * t2914 + t3010) * t2532 + t2922) * t2497 + (pkin(2) * t3010 - t2531 * t2745) * t2532 + pkin(2) * t2922) * t2540 + (t2541 * t2454 + (t2459 * t2985 - t2463 * t2520) * t2532) * t2542) / ((t3016 + (t2460 * t3098 + t2530 * t2547 - t2908) * t2519) * t2540 - t2892 * t3094 + (t2420 * t2531 + t2519 * t2911) * t2539 + t2519 * t2447 * t3104);
t2838 = t2546 * t3067;
t2710 = pkin(7) * t2838;
t3160 = t2519 * (t3128 * t2519 * t3067 - (pkin(6) * t2320 - t2519 * t2710) * t2531) - t2380 * t3125 - (-t2338 * t3028 + t2380 * t2661) * t2520;
t3137 = t2351 * t2352;
t3136 = t2353 * t2354;
t3135 = t2355 * t2356;
t3116 = -0.2e1 * pkin(2);
t3114 = 0.2e1 * t2507 - 0.2e1;
t3075 = t2312 * t2375;
t3074 = t2313 * t2375;
t3073 = t2314 * t2376;
t3072 = t2315 * t2376;
t3071 = t2316 * t2377;
t3070 = t2317 * t2377;
t2327 = t2351 * t2362;
t3066 = t2351 * t2369;
t2328 = t2352 * t2362;
t3065 = t2352 * t2369;
t2329 = t2353 * t2364;
t3064 = t2353 * t2370;
t2330 = t2354 * t2364;
t3063 = t2354 * t2370;
t2331 = t2355 * t2360;
t3062 = t2355 * t2371;
t2332 = t2356 * t2360;
t3061 = t2356 * t2371;
t3060 = t2360 * t2519;
t3059 = t2360 * t2520;
t3058 = t2360 * t2540;
t2361 = 0.1e1 / t2366 ^ 2;
t3057 = t2361 * t2380;
t2512 = t2531 ^ 2;
t3056 = t2361 * t2512;
t3055 = t2362 * t2519;
t3054 = t2362 * t2520;
t3053 = t2362 * t2534;
t2363 = 0.1e1 / t2367 ^ 2;
t3052 = t2363 * t2378;
t2510 = t2525 ^ 2;
t3051 = t2363 * t2510;
t3050 = t2364 * t2519;
t3049 = t2364 * t2520;
t3048 = t2364 * t2537;
t2365 = 0.1e1 / t2368 ^ 2;
t3047 = t2365 * t2379;
t2511 = t2528 ^ 2;
t3046 = t2365 * t2511;
t3045 = t2369 * t2378;
t2873 = pkin(6) * t2989;
t3044 = t2369 * (t2520 * t3112 - t2873);
t3043 = t2369 * t2409;
t3041 = t2369 * t2520;
t3040 = t2369 * t2524;
t3039 = t2369 * t2533;
t3038 = t2370 * t2379;
t2872 = pkin(6) * t2987;
t3037 = t2370 * (t2520 * t3111 - t2872);
t3036 = t2370 * t2410;
t3034 = t2370 * t2520;
t3033 = t2370 * t2527;
t3032 = t2370 * t2536;
t3031 = t2371 * t2380;
t2871 = pkin(6) * t2985;
t3030 = t2371 * (t2520 * t3110 - t2871);
t3029 = t2371 * t2408;
t3027 = t2371 * t2520;
t3026 = t2371 * t2530;
t3025 = t2371 * t2539;
t2342 = t2378 * t2362;
t2343 = t2379 * t2364;
t2344 = t2380 * t2360;
t2977 = t2519 * t2546;
t2966 = t2520 * t2546;
t2965 = t2524 * t2525;
t2964 = t2524 * t2533;
t2963 = t2524 * t2534;
t2960 = t2525 * t2533;
t2954 = t2527 * t2528;
t2953 = t2527 * t2536;
t2952 = t2527 * t2537;
t2949 = t2528 * t2536;
t2943 = t2530 * t2531;
t2942 = t2530 * t2539;
t2941 = t2530 * t2540;
t2938 = t2531 * t2539;
t2932 = t2533 * t2534;
t2928 = t2536 * t2537;
t2924 = t2539 * t2540;
t2917 = t2369 * t3116;
t2916 = t2370 * t3116;
t2915 = t2371 * t3116;
t2506 = t2519 ^ 2;
t2904 = 0.2e1 * t2506;
t2902 = -0.2e1 * t2519 * t2520;
t2901 = -0.2e1 * t2964;
t2900 = 0.2e1 * t2964;
t2899 = -0.2e1 * t2953;
t2898 = 0.2e1 * t2953;
t2897 = -0.2e1 * t2942;
t2896 = 0.2e1 * t2942;
t2895 = t3114 * pkin(6);
t2888 = t2369 * t3107;
t2887 = t2370 * t3105;
t2886 = t2371 * t3103;
t2879 = pkin(7) * t2270;
t2878 = pkin(7) * t2271;
t2877 = pkin(7) * t2272;
t2876 = pkin(7) * t2273;
t2875 = pkin(7) * t2274;
t2874 = pkin(7) * t2275;
t2858 = t2306 * t3040;
t2857 = t2306 * t3039;
t2856 = t2307 * t3033;
t2855 = t2307 * t3032;
t2854 = t2308 * t3026;
t2853 = t2308 * t3025;
t2852 = t2309 * t3040;
t2851 = t2309 * t3039;
t2850 = t2310 * t3033;
t2849 = t2310 * t3032;
t2848 = t2311 * t3026;
t2847 = t2311 * t3025;
t2837 = t2336 * t3040;
t2836 = t2336 * t3039;
t2835 = t2337 * t3033;
t2834 = t2337 * t3032;
t2833 = t2338 * t3026;
t2832 = t2338 * t3025;
t2831 = t2363 * t3137;
t2830 = t2351 * t3053;
t2829 = t2351 * t3044;
t2828 = t2351 * t3043;
t2827 = t2352 * t3053;
t2826 = t2352 * t3044;
t2825 = t2352 * t3043;
t2824 = t2365 * t3136;
t2823 = t2353 * t3048;
t2822 = t2353 * t3037;
t2821 = t2353 * t3036;
t2820 = t2354 * t3048;
t2819 = t2354 * t3037;
t2818 = t2354 * t3036;
t2817 = t2361 * t3135;
t2816 = t2355 * t3058;
t2815 = t2355 * t3030;
t2814 = t2355 * t3029;
t2813 = t2356 * t3058;
t2812 = t2356 * t3030;
t2811 = t2356 * t3029;
t2810 = t2540 * t2344;
t2809 = (pkin(6) * t2941 + t2432 * t2539) * t3060;
t2808 = (-pkin(6) * t2924 + t2432 * t2530) * t3060;
t2644 = -pkin(7) * t2540 + t3103;
t2807 = t2644 * t3060;
t2805 = t2360 * t2979;
t2804 = t2380 * t3056;
t2803 = t2361 * t2937;
t2802 = t2534 * t2342;
t2801 = (pkin(6) * t2963 + t2430 * t2533) * t3055;
t2800 = (-pkin(6) * t2932 + t2430 * t2524) * t3055;
t2646 = -pkin(7) * t2534 + t3107;
t2799 = t2646 * t3055;
t2797 = t2362 * t2983;
t2796 = t2378 * t3051;
t2795 = t2363 * t2959;
t2794 = t2537 * t2343;
t2793 = (pkin(6) * t2952 + t2431 * t2536) * t3050;
t2792 = (-pkin(6) * t2928 + t2431 * t2527) * t3050;
t2645 = -pkin(7) * t2537 + t3105;
t2791 = t2645 * t3050;
t2789 = t2364 * t2981;
t2788 = t2379 * t3046;
t2787 = t2365 * t2948;
t2786 = t2378 * t3044;
t2785 = t2378 * t3043;
t2784 = t2369 * t2963;
t2783 = t2369 * t2932;
t2782 = t2379 * t3037;
t2781 = t2379 * t3036;
t2780 = t2370 * t2952;
t2779 = t2370 * t2928;
t2778 = t2380 * t3030;
t2777 = t2380 * t3029;
t2776 = t2371 * t2941;
t2775 = t2371 * t2924;
t2744 = t2519 * t2965;
t2396 = t2744 - t2970;
t2774 = t2396 * t3024;
t2742 = t2519 * t2960;
t2398 = t2742 + t2976;
t2773 = t2398 * t3024;
t2741 = t2519 * t2954;
t2397 = t2741 - t2969;
t2772 = t2397 * t3023;
t2739 = t2519 * t2949;
t2399 = t2739 + t2974;
t2771 = t2399 * t3023;
t2738 = t2519 * t2943;
t2400 = t2738 - t2968;
t2770 = t2400 * t3022;
t2736 = t2519 * t2938;
t2401 = t2736 + t2972;
t2769 = t2401 * t3022;
t2321 = t2351 * t3054;
t2322 = t2352 * t3054;
t2323 = t2353 * t3049;
t2324 = t2354 * t3049;
t2325 = t2355 * t3059;
t2326 = t2356 * t3059;
t2339 = t2520 * t2342;
t2340 = t2520 * t2343;
t2341 = t2520 * t2344;
t2722 = t3041 / 0.2e1;
t2721 = t3034 / 0.2e1;
t2720 = t3027 / 0.2e1;
t2700 = (0.4e1 * t2513 - 0.2e1) * t2989;
t2699 = (0.4e1 * t2515 - 0.2e1) * t2987;
t2698 = (0.4e1 * t2517 - 0.2e1) * t2985;
t2697 = t2360 * t2738;
t2696 = t2360 * t2736;
t2695 = t2380 * t2803;
t2694 = t2362 * t2744;
t2693 = t2362 * t2742;
t2692 = t2378 * t2795;
t2691 = t2364 * t2741;
t2690 = t2364 * t2739;
t2689 = t2379 * t2787;
t2688 = t2519 * t2784;
t2687 = t2519 * t2783;
t2686 = t2519 * t2780;
t2685 = t2519 * t2779;
t2684 = t2519 * t2776;
t2683 = t2519 * t2775;
t2682 = t2375 * t2467 * t2966;
t2681 = t2376 * t2468 * t2966;
t2680 = t2377 * t2469 * t2966;
t2640 = 0.2e1 * t2524 * t2742;
t2639 = 0.2e1 * t2527 * t2739;
t2638 = 0.2e1 * t2530 * t2736;
t2631 = t2360 * (t2481 * t2507 - t2518);
t2630 = t2362 * (t2479 * t2507 - t2514);
t2629 = t2364 * (t2480 * t2507 - t2516);
t2628 = (0.2e1 * t2517 - 0.1e1) * t2806;
t2627 = (0.2e1 * t2513 - 0.1e1) * t2798;
t2626 = (0.2e1 * t2515 - 0.1e1) * t2790;
t2228 = 0.2e1 * t2321 + t2273;
t2616 = (t2228 + t2273) * t2327;
t2230 = 0.2e1 * t2322 + t2270;
t2615 = (t2230 + t2270) * t2328;
t2232 = 0.2e1 * t2323 + t2274;
t2614 = (t2232 + t2274) * t2329;
t2234 = 0.2e1 * t2324 + t2271;
t2613 = (t2234 + t2271) * t2330;
t2236 = 0.2e1 * t2325 + t2275;
t2612 = (t2236 + t2275) * t2331;
t2238 = 0.2e1 * t2326 + t2272;
t2611 = (t2238 + t2272) * t2332;
t2304 = 0.2e1 * t2341 + t2320;
t2610 = (t2304 + t2320) * t2344;
t2300 = 0.2e1 * t2339 + t2318;
t2609 = (t2300 + t2318) * t2342;
t2302 = 0.2e1 * t2340 + t2319;
t2608 = (t2302 + t2319) * t2343;
t2595 = t2360 * (-t2472 * t2520 + t2871);
t2594 = t2364 * (-t2471 * t2520 + t2872);
t2593 = (-t2470 * t2520 + t2873) * t2362;
t2592 = t2360 * (t2236 * t2356 + t2308 * t3062);
t2591 = t2360 * (t2236 * t2380 + t2338 * t3062);
t2590 = t2360 * (t2238 * t2355 + t2311 * t3061);
t2589 = t2360 * (t2238 * t2380 + t2338 * t3061);
t2588 = t2360 * (t2304 * t2356 + t2308 * t3031);
t2587 = t2360 * (t2304 * t2355 + t2311 * t3031);
t2586 = t2362 * (t2228 * t2352 + t2306 * t3066);
t2585 = t2362 * (t2228 * t2378 + t2336 * t3066);
t2584 = t2362 * (t2230 * t2351 + t2309 * t3065);
t2583 = t2362 * (t2230 * t2378 + t2336 * t3065);
t2582 = t2362 * (t2300 * t2352 + t2306 * t3045);
t2581 = t2362 * (t2300 * t2351 + t2309 * t3045);
t2580 = t2364 * (t2232 * t2354 + t2307 * t3064);
t2579 = t2364 * (t2232 * t2379 + t2337 * t3064);
t2578 = t2364 * (t2234 * t2353 + t2310 * t3063);
t2577 = t2364 * (t2234 * t2379 + t2337 * t3063);
t2576 = t2364 * (t2302 * t2354 + t2307 * t3038);
t2575 = t2364 * (t2302 * t2353 + t2310 * t3038);
t2568 = t2360 * (-t2644 * t2902 + t2895);
t2567 = t2362 * (-t2646 * t2902 + t2895);
t2566 = t2364 * (-t2645 * t2902 + t2895);
t2556 = (t2530 * t2902 + t3114 * t2938) * t3058;
t2555 = (t2539 * t2902 - t3114 * t2943) * t3058;
t2554 = (t2524 * t2902 + t3114 * t2960) * t3053;
t2553 = (t2533 * t2902 - t3114 * t2965) * t3053;
t2552 = (t2527 * t2902 + t3114 * t2949) * t3048;
t2551 = (t2536 * t2902 - t3114 * t2954) * t3048;
t2374 = t2380 ^ 2;
t2373 = t2379 ^ 2;
t2372 = t2378 ^ 2;
t2350 = t2356 ^ 2;
t2349 = t2355 ^ 2;
t2348 = t2354 ^ 2;
t2347 = t2353 ^ 2;
t2346 = t2352 ^ 2;
t2345 = t2351 ^ 2;
t2305 = t2341 + t2320;
t2303 = t2340 + t2319;
t2301 = t2339 + t2318;
t2299 = t2341 + t2320 / 0.2e1;
t2298 = t2340 + t2319 / 0.2e1;
t2297 = t2339 + t2318 / 0.2e1;
t2296 = t2338 * t2720 + t2344;
t2295 = t2337 * t2721 + t2343;
t2294 = t2336 * t2722 + t2342;
t2293 = pkin(7) * t2320 + t2341 * t2469;
t2292 = pkin(7) * t2319 + t2340 * t2468;
t2291 = pkin(7) * t2318 + t2339 * t2467;
t2281 = (t2810 + t2838) * t2519;
t2280 = (t2794 + t2839) * t2519;
t2279 = (t2802 + t2840) * t2519;
t2278 = (t2344 * t2644 - t2710) * t2519;
t2277 = (t2343 * t2645 - t2711) * t2519;
t2276 = (t2342 * t2646 - t2712) * t2519;
t2266 = t2305 * t2530 + t2380 * t2696;
t2265 = t2303 * t2527 + t2379 * t2690;
t2264 = t2301 * t2524 + t2378 * t2693;
t2263 = t2305 * t2539 - t2380 * t2697;
t2262 = t2303 * t2536 - t2379 * t2691;
t2261 = t2301 * t2533 - t2378 * t2694;
t2260 = t2338 * t2915 + t2380 * t2595;
t2259 = t2337 * t2916 + t2379 * t2594;
t2258 = t2336 * t2917 + t2378 * t2593;
t2257 = -t2293 * t2539 + t2380 * t2808;
t2256 = -t2292 * t2536 + t2379 * t2792;
t2255 = -t2292 * t2527 - t2379 * t2793;
t2254 = -t2291 * t2524 - t2378 * t2801;
t2253 = -t2293 * t2530 - t2380 * t2809;
t2252 = -t2291 * t2533 + t2378 * t2800;
t2251 = t2356 * t2805 - t2842;
t2250 = t2355 * t2805 - t2841;
t2249 = t2354 * t2789 - t2844;
t2248 = t2353 * t2789 - t2843;
t2247 = t2352 * t2797 - t2846;
t2246 = t2351 * t2797 - t2845;
t2245 = t2356 * t2807 + t2714;
t2244 = t2355 * t2807 + t2713;
t2243 = t2354 * t2791 + t2716;
t2242 = t2353 * t2791 + t2715;
t2241 = t2352 * t2799 + t2718;
t2240 = t2351 * t2799 + t2717;
t2239 = t2326 + t2272;
t2237 = t2325 + t2275;
t2235 = t2324 + t2271;
t2233 = t2323 + t2274;
t2231 = t2322 + t2270;
t2229 = t2321 + t2273;
t2227 = t2326 + t2272 / 0.2e1;
t2226 = t2325 + t2275 / 0.2e1;
t2225 = t2324 + t2271 / 0.2e1;
t2224 = t2323 + t2274 / 0.2e1;
t2223 = t2322 + t2270 / 0.2e1;
t2222 = t2321 + t2273 / 0.2e1;
t2221 = t2311 * t2720 + t2331;
t2220 = t2310 * t2721 + t2329;
t2219 = t2309 * t2722 + t2327;
t2218 = t2308 * t2720 + t2332;
t2217 = t2307 * t2721 + t2330;
t2216 = t2306 * t2722 + t2328;
t2215 = t2326 * t2469 + t2877;
t2214 = t2325 * t2469 + t2874;
t2213 = t2324 * t2468 + t2878;
t2212 = t2323 * t2468 + t2875;
t2211 = t2322 * t2467 + t2879;
t2210 = t2321 * t2467 + t2876;
t2203 = -t2338 * t3027 + t2380 * t2631 + t2344;
t2202 = -t2337 * t3034 + t2379 * t2629 + t2343;
t2201 = -t2336 * t3041 + t2378 * t2630 + t2342;
t2200 = t2305 * t2896 + t2380 * t2628;
t2199 = t2303 * t2898 + t2379 * t2626;
t2198 = t2301 * t2900 + t2378 * t2627;
t2197 = 0.2e1 * t2295 * t3111 - 0.2e1 * t2298 * t2872;
t2196 = 0.2e1 * t2296 * t3110 - 0.2e1 * t2299 * t2871;
t2195 = -0.2e1 * t2296 * t2504 - 0.2e1 * t2299 * t2880;
t2194 = 0.2e1 * t2294 * t3112 - 0.2e1 * t2297 * t2873;
t2193 = -0.2e1 * t2294 * t2502 - 0.2e1 * t2297 * t2882;
t2192 = -0.2e1 * t2295 * t2503 - 0.2e1 * t2298 * t2881;
t2185 = t2352 * t3052 + t2354 * t3047 + t2356 * t3057;
t2184 = t2351 * t3052 + t2353 * t3047 + t2355 * t3057;
t2183 = (t2352 * t2796 + t2354 * t2788 + t2356 * t2804) * t2506;
t2182 = (t2351 * t2796 + t2353 * t2788 + t2355 * t2804) * t2506;
t2181 = (t2352 * t2692 + t2354 * t2689 + t2356 * t2695) * t2904;
t2180 = (t2351 * t2692 + t2353 * t2689 + t2355 * t2695) * t2904;
t2179 = t2239 * t2530 + t2356 * t2696;
t2178 = t2237 * t2530 + t2355 * t2696;
t2177 = t2235 * t2527 + t2354 * t2690;
t2176 = t2233 * t2527 + t2353 * t2690;
t2175 = t2231 * t2524 + t2352 * t2693;
t2174 = t2229 * t2524 + t2351 * t2693;
t2173 = t2239 * t2539 - t2356 * t2697;
t2172 = t2237 * t2539 - t2355 * t2697;
t2171 = t2235 * t2536 - t2354 * t2691;
t2170 = t2233 * t2536 - t2353 * t2691;
t2169 = t2231 * t2533 - t2352 * t2694;
t2168 = t2229 * t2533 - t2351 * t2694;
t2167 = t2308 * t2915 + t2356 * t2595;
t2166 = t2311 * t2915 + t2355 * t2595;
t2165 = t2307 * t2916 + t2354 * t2594;
t2164 = t2310 * t2916 + t2353 * t2594;
t2163 = t2306 * t2917 + t2352 * t2593;
t2162 = t2309 * t2917 + t2351 * t2593;
t2161 = -t2215 * t2539 + t2356 * t2808;
t2160 = -t2214 * t2539 + t2355 * t2808;
t2159 = -t2213 * t2536 + t2354 * t2792;
t2158 = -t2212 * t2536 + t2353 * t2792;
t2157 = -t2213 * t2527 - t2354 * t2793;
t2156 = -t2212 * t2527 - t2353 * t2793;
t2155 = -t2211 * t2524 - t2352 * t2801;
t2154 = -t2210 * t2524 - t2351 * t2801;
t2153 = -t2215 * t2530 - t2356 * t2809;
t2152 = -t2214 * t2530 - t2355 * t2809;
t2151 = -t2211 * t2533 + t2352 * t2800;
t2150 = -t2210 * t2533 + t2351 * t2800;
t2149 = -t2260 * t2539 - t2278 * t2530;
t2148 = t2260 * t2530 - t2278 * t2539;
t2147 = -t2259 * t2536 - t2277 * t2527;
t2146 = t2259 * t2527 - t2277 * t2536;
t2145 = -t2258 * t2533 - t2276 * t2524;
t2144 = t2258 * t2524 - t2276 * t2533;
t2143 = (-t2338 * t2776 - t2401 * t2838) * t2519 + t2380 * t2556;
t2142 = (-t2337 * t2780 - t2399 * t2839) * t2519 + t2379 * t2552;
t2141 = (-t2336 * t2784 - t2398 * t2840) * t2519 + t2378 * t2554;
t2140 = (-t2338 * t2775 + t2400 * t2838) * t2519 + t2380 * t2555;
t2139 = (-t2337 * t2779 + t2397 * t2839) * t2519 + t2379 * t2551;
t2138 = (-t2336 * t2783 + t2396 * t2840) * t2519 + t2378 * t2553;
t2137 = t2817 + t2824 + t2831;
t2136 = (t2510 * t2831 + t2511 * t2824 + t2512 * t2817) * t2506;
t2135 = (t2787 * t3136 + t2795 * t3137 + t2803 * t3135) * t2904;
t2134 = -t2308 * t3027 + t2356 * t2631 + t2332;
t2133 = -t2311 * t3027 + t2355 * t2631 + t2331;
t2132 = -t2307 * t3034 + t2354 * t2629 + t2330;
t2131 = -t2310 * t3034 + t2353 * t2629 + t2329;
t2130 = -t2306 * t3041 + t2352 * t2630 + t2328;
t2129 = -t2309 * t3041 + t2351 * t2630 + t2327;
t2128 = t2239 * t2896 + t2356 * t2628;
t2127 = t2237 * t2896 + t2355 * t2628;
t2126 = t2235 * t2898 + t2354 * t2626;
t2125 = t2233 * t2898 + t2353 * t2626;
t2124 = t2231 * t2900 + t2352 * t2627;
t2123 = t2229 * t2900 + t2351 * t2627;
t2122 = 0.2e1 * t2217 * t3111 - 0.2e1 * t2225 * t2872;
t2121 = 0.2e1 * t2220 * t3111 - 0.2e1 * t2224 * t2872;
t2120 = 0.2e1 * t2218 * t3110 - 0.2e1 * t2227 * t2871;
t2119 = -0.2e1 * t2218 * t2504 - 0.2e1 * t2227 * t2880;
t2118 = 0.2e1 * t2221 * t3110 - 0.2e1 * t2226 * t2871;
t2117 = -0.2e1 * t2221 * t2504 - 0.2e1 * t2226 * t2880;
t2116 = 0.2e1 * t2216 * t3112 - 0.2e1 * t2223 * t2873;
t2115 = -0.2e1 * t2216 * t2502 - 0.2e1 * t2223 * t2882;
t2114 = 0.2e1 * t2219 * t3112 - 0.2e1 * t2222 * t2873;
t2113 = -0.2e1 * t2219 * t2502 - 0.2e1 * t2222 * t2882;
t2112 = -0.2e1 * t2217 * t2503 - 0.2e1 * t2225 * t2881;
t2111 = -0.2e1 * t2220 * t2503 - 0.2e1 * t2224 * t2881;
t2110 = (t2644 * t2320 + (-t2469 * t2520 - t2880) * t2838) * t2519 + t2380 * t2568;
t2109 = (t2645 * t2319 + (-t2468 * t2520 - t2881) * t2839) * t2519 + t2379 * t2566;
t2108 = (t2646 * t2318 + (-t2467 * t2520 - t2882) * t2840) * t2519 + t2378 * t2567;
t2107 = t2203 * t2517 + t2299 * t2638 + t2305 * t2520;
t2106 = t2202 * t2515 + t2298 * t2639 + t2303 * t2520;
t2105 = t2201 * t2513 + t2297 * t2640 + t2301 * t2520;
t2104 = t2202 * t2899 + t2298 * t2699;
t2103 = t2203 * t2897 + t2299 * t2698;
t2102 = t2201 * t2901 + t2297 * t2700;
t2101 = -t2167 * t2539 - t2245 * t2530;
t2100 = t2167 * t2530 - t2245 * t2539;
t2099 = -t2166 * t2539 - t2244 * t2530;
t2098 = t2166 * t2530 - t2244 * t2539;
t2097 = -t2165 * t2536 - t2243 * t2527;
t2096 = t2165 * t2527 - t2243 * t2536;
t2095 = -t2164 * t2536 - t2242 * t2527;
t2094 = t2164 * t2527 - t2242 * t2536;
t2093 = -t2163 * t2533 - t2241 * t2524;
t2092 = t2163 * t2524 - t2241 * t2533;
t2091 = -t2162 * t2533 - t2240 * t2524;
t2090 = t2162 * t2524 - t2240 * t2533;
t2089 = -t2308 * t2684 + t2316 * t2769 + t2356 * t2556;
t2088 = -t2311 * t2684 + t2317 * t2769 + t2355 * t2556;
t2087 = -t2307 * t2686 + t2314 * t2771 + t2354 * t2552;
t2086 = -t2310 * t2686 + t2315 * t2771 + t2353 * t2552;
t2085 = -t2306 * t2688 + t2312 * t2773 + t2352 * t2554;
t2084 = -t2309 * t2688 + t2313 * t2773 + t2351 * t2554;
t2083 = -t2308 * t2683 - t2316 * t2770 + t2356 * t2555;
t2082 = -t2311 * t2683 - t2317 * t2770 + t2355 * t2555;
t2081 = -t2307 * t2685 - t2314 * t2772 + t2354 * t2551;
t2080 = -t2310 * t2685 - t2315 * t2772 + t2353 * t2551;
t2079 = -t2306 * t2687 - t2312 * t2774 + t2352 * t2553;
t2078 = -t2309 * t2687 - t2313 * t2774 + t2351 * t2553;
t2077 = t2316 * t2680 + ((pkin(6) * t2842 - t2877) * t2540 + t2308 * t2886) * t2519 + t2356 * t2568;
t2076 = t2317 * t2680 + ((pkin(6) * t2841 - t2874) * t2540 + t2311 * t2886) * t2519 + t2355 * t2568;
t2075 = t2314 * t2681 + ((pkin(6) * t2844 - t2878) * t2537 + t2307 * t2887) * t2519 + t2354 * t2566;
t2074 = t2315 * t2681 + ((pkin(6) * t2843 - t2875) * t2537 + t2310 * t2887) * t2519 + t2353 * t2566;
t2073 = t2312 * t2682 + ((pkin(6) * t2846 - t2879) * t2534 + t2306 * t2888) * t2519 + t2352 * t2567;
t2072 = t2313 * t2682 + ((pkin(6) * t2845 - t2876) * t2534 + t2309 * t2888) * t2519 + t2351 * t2567;
t2071 = t2134 * t2517 + t2227 * t2638 + t2239 * t2520;
t2070 = t2133 * t2517 + t2226 * t2638 + t2237 * t2520;
t2069 = t2132 * t2515 + t2225 * t2639 + t2235 * t2520;
t2068 = t2131 * t2515 + t2224 * t2639 + t2233 * t2520;
t2067 = t2130 * t2513 + t2223 * t2640 + t2231 * t2520;
t2066 = t2129 * t2513 + t2222 * t2640 + t2229 * t2520;
t2065 = t2132 * t2899 + t2225 * t2699;
t2064 = t2131 * t2899 + t2224 * t2699;
t2063 = t2134 * t2897 + t2227 * t2698;
t2062 = t2133 * t2897 + t2226 * t2698;
t2061 = t2130 * t2901 + t2223 * t2700;
t2060 = t2129 * t2901 + t2222 * t2700;
t2059 = -t2530 * t2110 + t3160 * t2539;
t2058 = -t2539 * t2110 - t3160 * t2530;
t2057 = -t2109 * t2527 + t3161 * t2536;
t2056 = -t2109 * t2536 - t3161 * t2527;
t2055 = -t2108 * t2524 + t3162 * t2533;
t2054 = -t2108 * t2533 - t3162 * t2524;
t2053 = -t2530 * t2077 - t3177 * t2539;
t2052 = -t2539 * t2077 + t3177 * t2530;
t2051 = -t2530 * t2076 - t3176 * t2539;
t2050 = -t2539 * t2076 + t3176 * t2530;
t2049 = -t2075 * t2527 - t3175 * t2536;
t2048 = -t2075 * t2536 + t3175 * t2527;
t2047 = -t2074 * t2527 - t3174 * t2536;
t2046 = -t2074 * t2536 + t3174 * t2527;
t2045 = -t2073 * t2524 - t3173 * t2533;
t2044 = -t2073 * t2533 + t3173 * t2524;
t2043 = -t2072 * t2524 - t2533 * t3172;
t2042 = -t2072 * t2533 + t2524 * t3172;
t1 = [t2345 * t2363 + t2347 * t2365 + t2349 * t2361, 0, 0, (t2345 * t3051 + t2347 * t3046 + t2349 * t3056) * t2506, (t2345 * t2795 + t2347 * t2787 + t2349 * t2803) * t2904, (t2525 * t2616 + t2528 * t2614 + t2531 * t2612) * t2519, (t2534 * t2616 + t2537 * t2614 + t2540 * t2612) * t2519, t2229 * t2273 + t2233 * t2274 + t2237 * t2275 + (t2229 * t2327 + t2233 * t2329 + t2237 * t2331) * t2520, (t2311 * t3030 + t2118) * t2331 + (t2310 * t3037 + t2121) * t2329 + (t2309 * t3044 + t2114) * t2327, (-t2311 * t3029 + t2117) * t2331 + (-t2310 * t3036 + t2111) * t2329 + (-t2309 * t3043 + t2113) * t2327, t2066 * t2327 + t2068 * t2329 + t2070 * t2331 + t2174 * t2852 + t2176 * t2850 + t2178 * t2848, t2060 * t2327 + t2062 * t2331 + t2064 * t2329 + t2123 * t2273 + t2125 * t2274 + t2127 * t2275, -t2246 * t2852 - t2248 * t2850 - t2250 * t2848 + t2084 * t2327 + t2086 * t2329 + t2088 * t2331 + (t2174 * t3074 + t2176 * t3072 + t2178 * t3070) * t2546, -t2246 * t2851 - t2248 * t2849 - t2250 * t2847 + t2078 * t2327 + t2080 * t2329 + t2082 * t2331 + (t2168 * t3074 + t2170 * t3072 + t2172 * t3070) * t2546, (-t2246 * t3074 - t2248 * t3072 - t2250 * t3070) * t2546 + (t2246 * t2830 + t2248 * t2823 + t2250 * t2816) * t2519, t2043 * t2327 + t2047 * t2329 + t2051 * t2331 + t2091 * t2273 + t2095 * t2274 + t2099 * t2275 + (t2152 * t3070 + t2154 * t3074 + t2156 * t3072) * t2546, t2042 * t2327 + t2046 * t2329 + t2050 * t2331 + t2090 * t2273 + t2094 * t2274 + t2098 * t2275 + (t2150 * t3074 + t2158 * t3072 + t2160 * t3070) * t2546, 1; t2137, 0, 0, t2136, t2135, (t2525 * t2584 + t2528 * t2578 + t2531 * t2590) * t2519, (t2534 * t2584 + t2537 * t2578 + t2540 * t2590) * t2519, t2231 * t2273 + t2235 * t2274 + t2239 * t2275 + (t2231 * t2327 + t2235 * t2329 + t2239 * t2331) * t2520, (t2122 * t2353 + t2310 * t2819) * t2364 + (t2116 * t2351 + t2309 * t2826) * t2362 + (t2120 * t2355 + t2311 * t2812) * t2360, (t2112 * t2353 - t2310 * t2818) * t2364 + (t2115 * t2351 - t2309 * t2825) * t2362 + (t2119 * t2355 - t2311 * t2811) * t2360, t2067 * t2327 + t2069 * t2329 + t2071 * t2331 + t2175 * t2852 + t2177 * t2850 + t2179 * t2848, t2061 * t2327 + t2063 * t2331 + t2065 * t2329 + t2124 * t2273 + t2126 * t2274 + t2128 * t2275, -t2247 * t2852 - t2249 * t2850 - t2251 * t2848 + t2085 * t2327 + t2087 * t2329 + t2089 * t2331 + (t2175 * t3074 + t2177 * t3072 + t2179 * t3070) * t2546, -t2247 * t2851 - t2249 * t2849 - t2251 * t2847 + t2079 * t2327 + t2081 * t2329 + t2083 * t2331 + (t2169 * t3074 + t2171 * t3072 + t2173 * t3070) * t2546, (-t2247 * t3074 - t2249 * t3072 - t2251 * t3070) * t2546 + (t2247 * t2830 + t2249 * t2823 + t2251 * t2816) * t2519, t2045 * t2327 + t2049 * t2329 + t2053 * t2331 + t2093 * t2273 + t2097 * t2274 + t2101 * t2275 + (t2153 * t3070 + t2155 * t3074 + t2157 * t3072) * t2546, t2044 * t2327 + t2048 * t2329 + t2052 * t2331 + t2092 * t2273 + t2096 * t2274 + t2100 * t2275 + (t2151 * t3074 + t2159 * t3072 + t2161 * t3070) * t2546, 0; t2184, 0, 0, t2182, t2180, (t2525 * t2581 + t2528 * t2575 + t2531 * t2587) * t2519, (t2534 * t2581 + t2537 * t2575 + t2540 * t2587) * t2519, t2301 * t2273 + t2303 * t2274 + t2305 * t2275 + (t2301 * t2327 + t2303 * t2329 + t2305 * t2331) * t2520, (t2197 * t2353 + t2310 * t2782) * t2364 + (t2194 * t2351 + t2309 * t2786) * t2362 + (t2196 * t2355 + t2311 * t2778) * t2360, (t2192 * t2353 - t2310 * t2781) * t2364 + (t2193 * t2351 - t2309 * t2785) * t2362 + (t2195 * t2355 - t2311 * t2777) * t2360, t2105 * t2327 + t2106 * t2329 + t2107 * t2331 + t2264 * t2852 + t2265 * t2850 + t2266 * t2848, t2102 * t2327 + t2103 * t2331 + t2104 * t2329 + t2198 * t2273 + t2199 * t2274 + t2200 * t2275, -t2279 * t2852 - t2280 * t2850 - t2281 * t2848 + t2141 * t2327 + t2142 * t2329 + t2143 * t2331 + (t2264 * t3074 + t2265 * t3072 + t2266 * t3070) * t2546, -t2279 * t2851 - t2280 * t2849 - t2281 * t2847 + t2138 * t2327 + t2139 * t2329 + t2140 * t2331 + (t2261 * t3074 + t2262 * t3072 + t2263 * t3070) * t2546, (-t2279 * t3074 - t2280 * t3072 - t2281 * t3070) * t2546 + (t2279 * t2830 + t2280 * t2823 + t2281 * t2816) * t2519, t2055 * t2327 + t2057 * t2329 + t2059 * t2331 + t2145 * t2273 + t2147 * t2274 + t2149 * t2275 + (t2253 * t3070 + t2254 * t3074 + t2255 * t3072) * t2546, t2054 * t2327 + t2056 * t2329 + t2058 * t2331 + t2144 * t2273 + t2146 * t2274 + t2148 * t2275 + (t2252 * t3074 + t2256 * t3072 + t2257 * t3070) * t2546, 0; t2137, 0, 0, t2136, t2135, (t2525 * t2586 + t2528 * t2580 + t2531 * t2592) * t2519, (t2534 * t2586 + t2537 * t2580 + t2540 * t2592) * t2519, t2229 * t2270 + t2233 * t2271 + t2237 * t2272 + (t2229 * t2328 + t2233 * t2330 + t2237 * t2332) * t2520, (t2121 * t2354 + t2307 * t2822) * t2364 + (t2114 * t2352 + t2306 * t2829) * t2362 + (t2118 * t2356 + t2308 * t2815) * t2360, (t2111 * t2354 - t2307 * t2821) * t2364 + (t2113 * t2352 - t2306 * t2828) * t2362 + (t2117 * t2356 - t2308 * t2814) * t2360, t2066 * t2328 + t2068 * t2330 + t2070 * t2332 + t2174 * t2858 + t2176 * t2856 + t2178 * t2854, t2060 * t2328 + t2062 * t2332 + t2064 * t2330 + t2123 * t2270 + t2125 * t2271 + t2127 * t2272, -t2246 * t2858 - t2248 * t2856 - t2250 * t2854 + t2084 * t2328 + t2086 * t2330 + t2088 * t2332 + (t2174 * t3075 + t2176 * t3073 + t2178 * t3071) * t2546, -t2246 * t2857 - t2248 * t2855 - t2250 * t2853 + t2078 * t2328 + t2080 * t2330 + t2082 * t2332 + (t2168 * t3075 + t2170 * t3073 + t2172 * t3071) * t2546, (-t2246 * t3075 - t2248 * t3073 - t2250 * t3071) * t2546 + (t2246 * t2827 + t2248 * t2820 + t2250 * t2813) * t2519, t2043 * t2328 + t2047 * t2330 + t2051 * t2332 + t2091 * t2270 + t2095 * t2271 + t2099 * t2272 + (t2152 * t3071 + t2154 * t3075 + t2156 * t3073) * t2546, t2042 * t2328 + t2046 * t2330 + t2050 * t2332 + t2090 * t2270 + t2094 * t2271 + t2098 * t2272 + (t2150 * t3075 + t2158 * t3073 + t2160 * t3071) * t2546, 0; t2346 * t2363 + t2348 * t2365 + t2350 * t2361, 0, 0, (t2346 * t3051 + t2348 * t3046 + t2350 * t3056) * t2506, (t2346 * t2795 + t2348 * t2787 + t2350 * t2803) * t2904, (t2525 * t2615 + t2528 * t2613 + t2531 * t2611) * t2519, (t2534 * t2615 + t2537 * t2613 + t2540 * t2611) * t2519, t2231 * t2270 + t2235 * t2271 + t2239 * t2272 + (t2231 * t2328 + t2235 * t2330 + t2239 * t2332) * t2520, (t2308 * t3030 + t2120) * t2332 + (t2307 * t3037 + t2122) * t2330 + (t2306 * t3044 + t2116) * t2328, (-t2308 * t3029 + t2119) * t2332 + (-t2307 * t3036 + t2112) * t2330 + (-t2306 * t3043 + t2115) * t2328, t2067 * t2328 + t2069 * t2330 + t2071 * t2332 + t2175 * t2858 + t2177 * t2856 + t2179 * t2854, t2061 * t2328 + t2063 * t2332 + t2065 * t2330 + t2124 * t2270 + t2126 * t2271 + t2128 * t2272, -t2247 * t2858 - t2249 * t2856 - t2251 * t2854 + t2085 * t2328 + t2087 * t2330 + t2089 * t2332 + (t2175 * t3075 + t2177 * t3073 + t2179 * t3071) * t2546, -t2247 * t2857 - t2249 * t2855 - t2251 * t2853 + t2079 * t2328 + t2081 * t2330 + t2083 * t2332 + (t2169 * t3075 + t2171 * t3073 + t2173 * t3071) * t2546, (-t2247 * t3075 - t2249 * t3073 - t2251 * t3071) * t2546 + (t2247 * t2827 + t2249 * t2820 + t2251 * t2813) * t2519, t2045 * t2328 + t2049 * t2330 + t2053 * t2332 + t2093 * t2270 + t2097 * t2271 + t2101 * t2272 + (t2153 * t3071 + t2155 * t3075 + t2157 * t3073) * t2546, t2044 * t2328 + t2048 * t2330 + t2052 * t2332 + t2092 * t2270 + t2096 * t2271 + t2100 * t2272 + (t2151 * t3075 + t2159 * t3073 + t2161 * t3071) * t2546, 1; t2185, 0, 0, t2183, t2181, (t2525 * t2582 + t2528 * t2576 + t2531 * t2588) * t2519, (t2534 * t2582 + t2537 * t2576 + t2540 * t2588) * t2519, t2301 * t2270 + t2303 * t2271 + t2305 * t2272 + (t2301 * t2328 + t2303 * t2330 + t2305 * t2332) * t2520, (t2197 * t2354 + t2307 * t2782) * t2364 + (t2194 * t2352 + t2306 * t2786) * t2362 + (t2196 * t2356 + t2308 * t2778) * t2360, (t2192 * t2354 - t2307 * t2781) * t2364 + (t2193 * t2352 - t2306 * t2785) * t2362 + (t2195 * t2356 - t2308 * t2777) * t2360, t2105 * t2328 + t2106 * t2330 + t2107 * t2332 + t2264 * t2858 + t2265 * t2856 + t2266 * t2854, t2102 * t2328 + t2103 * t2332 + t2104 * t2330 + t2198 * t2270 + t2199 * t2271 + t2200 * t2272, -t2279 * t2858 - t2280 * t2856 - t2281 * t2854 + t2141 * t2328 + t2142 * t2330 + t2143 * t2332 + (t2264 * t3075 + t2265 * t3073 + t2266 * t3071) * t2546, -t2279 * t2857 - t2280 * t2855 - t2281 * t2853 + t2138 * t2328 + t2139 * t2330 + t2140 * t2332 + (t2261 * t3075 + t2262 * t3073 + t2263 * t3071) * t2546, (-t2279 * t3075 - t2280 * t3073 - t2281 * t3071) * t2546 + (t2279 * t2827 + t2280 * t2820 + t2281 * t2813) * t2519, t2055 * t2328 + t2057 * t2330 + t2059 * t2332 + t2145 * t2270 + t2147 * t2271 + t2149 * t2272 + (t2253 * t3071 + t2254 * t3075 + t2255 * t3073) * t2546, t2054 * t2328 + t2056 * t2330 + t2058 * t2332 + t2144 * t2270 + t2146 * t2271 + t2148 * t2272 + (t2252 * t3075 + t2256 * t3073 + t2257 * t3071) * t2546, 0; t2184, 0, 0, t2182, t2180, (t2525 * t2585 + t2528 * t2579 + t2531 * t2591) * t2519, (t2534 * t2585 + t2537 * t2579 + t2540 * t2591) * t2519, t2229 * t2318 + t2233 * t2319 + t2237 * t2320 + (t2229 * t2342 + t2233 * t2343 + t2237 * t2344) * t2520, (t2121 * t2379 + t2337 * t2822) * t2364 + (t2114 * t2378 + t2336 * t2829) * t2362 + (t2118 * t2380 + t2338 * t2815) * t2360, (t2111 * t2379 - t2337 * t2821) * t2364 + (t2113 * t2378 - t2336 * t2828) * t2362 + (t2117 * t2380 - t2338 * t2814) * t2360, t2066 * t2342 + t2068 * t2343 + t2070 * t2344 + t2174 * t2837 + t2176 * t2835 + t2178 * t2833, t2060 * t2342 + t2062 * t2344 + t2064 * t2343 + t2123 * t2318 + t2125 * t2319 + t2127 * t2320, -t2246 * t2837 - t2248 * t2835 - t2250 * t2833 + t2084 * t2342 + t2086 * t2343 + t2088 * t2344 + (-t2174 * t3069 - t2176 * t3068 - t2178 * t3067) * t2977, -t2246 * t2836 - t2248 * t2834 - t2250 * t2832 + t2078 * t2342 + t2080 * t2343 + t2082 * t2344 + (-t2168 * t3069 - t2170 * t3068 - t2172 * t3067) * t2977, (t2246 * t2802 + t2248 * t2794 + t2250 * t2810 + (t2246 * t3069 + t2248 * t3068 + t2250 * t3067) * t2546) * t2519, t2043 * t2342 + t2047 * t2343 + t2051 * t2344 + t2091 * t2318 + t2095 * t2319 + t2099 * t2320 + (-t2152 * t3067 - t2154 * t3069 - t2156 * t3068) * t2977, t2042 * t2342 + t2046 * t2343 + t2050 * t2344 + t2090 * t2318 + t2094 * t2319 + t2098 * t2320 + (-t2150 * t3069 - t2158 * t3068 - t2160 * t3067) * t2977, 0; t2185, 0, 0, t2183, t2181, (t2525 * t2583 + t2528 * t2577 + t2531 * t2589) * t2519, (t2534 * t2583 + t2537 * t2577 + t2540 * t2589) * t2519, t2231 * t2318 + t2235 * t2319 + t2239 * t2320 + (t2231 * t2342 + t2235 * t2343 + t2239 * t2344) * t2520, (t2122 * t2379 + t2337 * t2819) * t2364 + (t2116 * t2378 + t2336 * t2826) * t2362 + (t2120 * t2380 + t2338 * t2812) * t2360, (t2112 * t2379 - t2337 * t2818) * t2364 + (t2115 * t2378 - t2336 * t2825) * t2362 + (t2119 * t2380 - t2338 * t2811) * t2360, t2067 * t2342 + t2069 * t2343 + t2071 * t2344 + t2175 * t2837 + t2177 * t2835 + t2179 * t2833, t2061 * t2342 + t2063 * t2344 + t2065 * t2343 + t2124 * t2318 + t2126 * t2319 + t2128 * t2320, -t2247 * t2837 - t2249 * t2835 - t2251 * t2833 + t2085 * t2342 + t2087 * t2343 + t2089 * t2344 + (-t2175 * t3069 - t2177 * t3068 - t2179 * t3067) * t2977, -t2247 * t2836 - t2249 * t2834 - t2251 * t2832 + t2079 * t2342 + t2081 * t2343 + t2083 * t2344 + (-t2169 * t3069 - t2171 * t3068 - t2173 * t3067) * t2977, (t2247 * t2802 + t2249 * t2794 + t2251 * t2810 + (t2247 * t3069 + t2249 * t3068 + t2251 * t3067) * t2546) * t2519, t2045 * t2342 + t2049 * t2343 + t2053 * t2344 + t2093 * t2318 + t2097 * t2319 + t2101 * t2320 + (-t2153 * t3067 - t2155 * t3069 - t2157 * t3068) * t2977, t2044 * t2342 + t2048 * t2343 + t2052 * t2344 + t2092 * t2318 + t2096 * t2319 + t2100 * t2320 + (-t2151 * t3069 - t2159 * t3068 - t2161 * t3067) * t2977, 0; t2361 * t2374 + t2363 * t2372 + t2365 * t2373, 0, 0, (t2372 * t3051 + t2373 * t3046 + t2374 * t3056) * t2506, (t2372 * t2795 + t2373 * t2787 + t2374 * t2803) * t2904, (t2525 * t2609 + t2528 * t2608 + t2531 * t2610) * t2519, (t2534 * t2609 + t2537 * t2608 + t2540 * t2610) * t2519, t2301 * t2318 + t2303 * t2319 + t2305 * t2320 + (t2301 * t2342 + t2303 * t2343 + t2305 * t2344) * t2520, (t2337 * t3037 + t2197) * t2343 + (t2336 * t3044 + t2194) * t2342 + (t2338 * t3030 + t2196) * t2344, (-t2337 * t3036 + t2192) * t2343 + (-t2336 * t3043 + t2193) * t2342 + (-t2338 * t3029 + t2195) * t2344, t2105 * t2342 + t2106 * t2343 + t2107 * t2344 + t2264 * t2837 + t2265 * t2835 + t2266 * t2833, t2102 * t2342 + t2103 * t2344 + t2104 * t2343 + t2198 * t2318 + t2199 * t2319 + t2200 * t2320, -t2279 * t2837 - t2280 * t2835 - t2281 * t2833 + t2141 * t2342 + t2142 * t2343 + t2143 * t2344 + (-t2264 * t3069 - t2265 * t3068 - t2266 * t3067) * t2977, -t2279 * t2836 - t2280 * t2834 - t2281 * t2832 + t2138 * t2342 + t2139 * t2343 + t2140 * t2344 + (-t2261 * t3069 - t2262 * t3068 - t2263 * t3067) * t2977, (t2279 * t2802 + t2280 * t2794 + t2281 * t2810 + (t2279 * t3069 + t2280 * t3068 + t2281 * t3067) * t2546) * t2519, t2055 * t2342 + t2057 * t2343 + t2059 * t2344 + t2145 * t2318 + t2147 * t2319 + t2149 * t2320 + (-t2253 * t3067 - t2254 * t3069 - t2255 * t3068) * t2977, t2054 * t2342 + t2056 * t2343 + t2058 * t2344 + t2144 * t2318 + t2146 * t2319 + t2148 * t2320 + (-t2252 * t3069 - t2256 * t3068 - t2257 * t3067) * t2977, 1;];
tau_reg  = t1;
