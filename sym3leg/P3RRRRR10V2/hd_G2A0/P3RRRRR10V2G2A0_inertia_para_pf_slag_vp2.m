% Calculate inertia matrix for parallel robot
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% MX [3x3]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2(xP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:07:48
% EndTime: 2020-08-07 01:08:03
% DurationCPUTime: 16.27s
% Computational Cost: add. (22035->789), mult. (38655->1251), div. (432->13), fcn. (27738->26), ass. (0->540)
t2323 = 2 * pkin(2);
t2322 = m(2) + m(3);
t2255 = m(3) * pkin(2) + mrSges(2,1);
t1923 = cos(qJ(3,1));
t1900 = t1923 ^ 2;
t1904 = Ifges(3,2) - Ifges(3,1);
t2146 = t1904 * t1900;
t1914 = sin(qJ(3,1));
t2259 = mrSges(3,2) * t1914;
t2321 = t2259 * t2323 - t2146;
t1920 = cos(qJ(3,2));
t1898 = t1920 ^ 2;
t2147 = t1904 * t1898;
t1911 = sin(qJ(3,2));
t2260 = mrSges(3,2) * t1911;
t2320 = t2260 * t2323 - t2147;
t1917 = cos(qJ(3,3));
t1896 = t1917 ^ 2;
t2148 = t1904 * t1896;
t1908 = sin(qJ(3,3));
t2261 = mrSges(3,2) * t1908;
t2319 = t2261 * t2323 - t2148;
t1861 = mrSges(3,2) * pkin(7) - Ifges(3,6);
t1862 = pkin(7) * mrSges(3,1) - Ifges(3,5);
t1776 = -t1861 * t1917 - t1862 * t1908;
t1926 = pkin(6) * mrSges(3,2);
t2285 = pkin(2) * mrSges(3,1);
t1831 = -t1926 + t2285;
t1909 = sin(qJ(2,3));
t1918 = cos(qJ(2,3));
t2029 = -t2255 * pkin(6) - Ifges(3,4) + Ifges(2,5);
t1927 = pkin(6) * mrSges(3,1);
t1929 = pkin(2) * mrSges(3,2);
t2112 = t1927 + t1929;
t1871 = pkin(7) * m(3) + mrSges(3,3);
t1857 = -mrSges(2,2) + t1871;
t2253 = t1857 * pkin(6) + Ifges(2,6);
t2293 = -0.2e1 * Ifges(3,4);
t2318 = -t1909 * (t1831 * t1908 + t1896 * t2293 + t1917 * (t1904 * t1908 + t2112) - t2029) + (-t1776 + t2253) * t1918;
t1777 = -t1861 * t1920 - t1862 * t1911;
t1912 = sin(qJ(2,2));
t1921 = cos(qJ(2,2));
t2317 = -t1912 * (t1831 * t1911 + t1898 * t2293 + t1920 * (t1904 * t1911 + t2112) - t2029) + (-t1777 + t2253) * t1921;
t1778 = -t1861 * t1923 - t1862 * t1914;
t1915 = sin(qJ(2,1));
t1924 = cos(qJ(2,1));
t2316 = -t1915 * (t1831 * t1914 + t1900 * t2293 + t1923 * (t1904 * t1914 + t2112) - t2029) + (-t1778 + t2253) * t1924;
t2315 = Ifges(3,1) + Ifges(2,3);
t1875 = t1917 * pkin(3);
t1844 = t1875 + pkin(2);
t1876 = t1920 * pkin(3);
t1845 = t1876 + pkin(2);
t1877 = t1923 * pkin(3);
t1846 = t1877 + pkin(2);
t2314 = t1871 * pkin(2) + Ifges(2,4);
t1931 = pkin(8) + pkin(7);
t1856 = t1931 * t1924;
t1800 = -pkin(2) * t1915 + t1856;
t1902 = sin(pkin(4));
t1970 = t1902 * t1800;
t1855 = t1931 * t1921;
t1799 = -pkin(2) * t1912 + t1855;
t1971 = t1902 * t1799;
t1854 = t1931 * t1918;
t1798 = -pkin(2) * t1909 + t1854;
t1972 = t1902 * t1798;
t1897 = t1918 ^ 2;
t2272 = t1897 * pkin(2);
t1969 = t1854 * t1909 - pkin(2) + t2272;
t2313 = t1908 * t1969;
t1899 = t1921 ^ 2;
t2270 = t1899 * pkin(2);
t1968 = t1855 * t1912 - pkin(2) + t2270;
t2312 = t1911 * t1968;
t1901 = t1924 ^ 2;
t2268 = t1901 * pkin(2);
t1967 = t1856 * t1915 - pkin(2) + t2268;
t2311 = t1914 * t1967;
t2310 = t1931 * t1897;
t2309 = t1931 * t1899;
t2308 = t1931 * t1901;
t2307 = (-t2322 * pkin(6) - (2 * mrSges(2,3))) * pkin(6);
t2258 = Ifges(3,4) * t1908;
t1807 = t2258 + t2285;
t2291 = 0.2e1 * t1917;
t2306 = t1807 * t2291 - t2319;
t2257 = Ifges(3,4) * t1911;
t1808 = t2257 + t2285;
t2290 = 0.2e1 * t1920;
t2305 = t1808 * t2290 - t2320;
t2256 = Ifges(3,4) * t1914;
t1809 = t2256 + t2285;
t2289 = 0.2e1 * t1923;
t2304 = t1809 * t2289 - t2321;
t2079 = t1908 * pkin(6) + pkin(3);
t2273 = t1896 * pkin(3);
t2277 = pkin(2) * t1917;
t2303 = t1909 * (-t2079 + 0.2e1 * t2273 + t2277) - t1917 * t1854;
t2078 = t1911 * pkin(6) + pkin(3);
t2271 = t1898 * pkin(3);
t2276 = pkin(2) * t1920;
t2302 = t1912 * (-t2078 + 0.2e1 * t2271 + t2276) - t1920 * t1855;
t2077 = t1914 * pkin(6) + pkin(3);
t2269 = t1900 * pkin(3);
t2275 = pkin(2) * t1923;
t2301 = t1915 * (-t2077 + 0.2e1 * t2269 + t2275) - t1923 * t1856;
t1853 = t1931 * t1915;
t1880 = pkin(2) * t1924;
t2114 = t1853 + t1880;
t1797 = pkin(1) + t2114;
t1916 = sin(qJ(1,1));
t1874 = t1914 * pkin(3);
t2020 = (t1901 - 0.2e1) * t1874 - pkin(6);
t1925 = cos(qJ(1,1));
t2157 = t1902 * t1925;
t2297 = t1916 * t1797 + t2020 * t2157;
t1852 = t1931 * t1912;
t1879 = pkin(2) * t1921;
t2115 = t1852 + t1879;
t1796 = pkin(1) + t2115;
t1913 = sin(qJ(1,2));
t1873 = t1911 * pkin(3);
t2021 = (t1899 - 0.2e1) * t1873 - pkin(6);
t1922 = cos(qJ(1,2));
t2158 = t1902 * t1922;
t2296 = t1913 * t1796 + t2021 * t2158;
t1851 = t1931 * t1909;
t1878 = pkin(2) * t1918;
t2116 = t1851 + t1878;
t1795 = pkin(1) + t2116;
t1910 = sin(qJ(1,3));
t1872 = t1908 * pkin(3);
t2022 = (t1897 - 0.2e1) * t1872 - pkin(6);
t1919 = cos(qJ(1,3));
t2159 = t1902 * t1919;
t2295 = t1910 * t1795 + t2022 * t2159;
t2294 = -0.2e1 * pkin(1);
t2292 = -0.2e1 * t2112;
t2287 = mrSges(3,3) * pkin(7);
t2286 = pkin(1) * mrSges(3,1);
t2284 = (-Ifges(2,1) - Ifges(3,2));
t1903 = cos(pkin(4));
t1887 = t1903 ^ 2;
t2283 = -0.2e1 * t1887 + 0.1e1;
t2282 = pkin(1) * t1903;
t1881 = pkin(1) * t1909;
t1882 = pkin(1) * t1912;
t1883 = pkin(1) * t1915;
t2281 = pkin(2) * t1903;
t2274 = pkin(6) * t1902;
t2267 = t1908 * pkin(2);
t2266 = t1911 * pkin(2);
t2265 = t1914 * pkin(2);
t2264 = t1919 * pkin(2);
t2263 = t1922 * pkin(2);
t2262 = t1925 * pkin(2);
t2252 = 0.2e1 * t1927;
t1889 = pkin(2) - t1931;
t1888 = pkin(2) + t1931;
t1905 = legFrame(3,2);
t1865 = sin(t1905);
t1868 = cos(t1905);
t1947 = -t1917 * t2022 - t2313;
t1956 = t1919 * t2313;
t1822 = t1881 + t1931;
t2143 = t1909 * t1919;
t2144 = t1909 * t1918;
t2166 = t1902 * t1910;
t1966 = pkin(6) * t2143 - (pkin(2) * t2144 + t1822 - t2310) * t2166;
t1817 = t1851 + pkin(1);
t1982 = t1817 * t1918 + t2272;
t1992 = t1909 * t2079;
t2141 = t1910 * t1918;
t2167 = t1902 * t1909;
t2016 = t2141 * t2167;
t2093 = pkin(3) * t2143;
t2028 = t1865 * t2093;
t2054 = t1868 * t2167;
t2188 = t1865 * t1919;
t1713 = (t1947 * t1868 - t2188 * t2303) * t1887 + (-(t1865 * t2141 - 0.2e1 * t2054) * t2273 + (-t1865 * t2295 - t1868 * t1972) * t1917 - (t1865 * t1956 + t1868 * t1992) * t1902) * t1903 + t1896 * t2028 + ((t1865 * t2016 + t1897 * t1868 - t1868) * t1872 - t1868 * pkin(6)) * t1917 + (-t1865 * t1966 + t1868 * t1982) * t1908 - t2028;
t1847 = t1878 + pkin(1);
t2094 = t1795 * t2267;
t2109 = pkin(6) * t2273;
t2152 = t1903 * t1917;
t1752 = 0.1e1 / ((-t1918 * t2109 + (-pkin(6) * t2116 + t1847 * t1872) * t1917 + t2094) * t1902 + (-t1844 * t1909 + t1854) * pkin(1) * t2152);
t2251 = t1713 * t1752;
t1906 = legFrame(2,2);
t1866 = sin(t1906);
t1869 = cos(t1906);
t1946 = -t1920 * t2021 - t2312;
t1955 = t1922 * t2312;
t1823 = t1882 + t1931;
t2137 = t1912 * t1922;
t2138 = t1912 * t1921;
t2163 = t1902 * t1913;
t1965 = pkin(6) * t2137 - (pkin(2) * t2138 + t1823 - t2309) * t2163;
t1818 = t1852 + pkin(1);
t1981 = t1818 * t1921 + t2270;
t1991 = t1912 * t2078;
t2135 = t1913 * t1921;
t2164 = t1902 * t1912;
t2015 = t2135 * t2164;
t2091 = pkin(3) * t2137;
t2026 = t1866 * t2091;
t2049 = t1869 * t2164;
t2185 = t1866 * t1922;
t1714 = (t1946 * t1869 - t2185 * t2302) * t1887 + (-(t1866 * t2135 - 0.2e1 * t2049) * t2271 + (-t1866 * t2296 - t1869 * t1971) * t1920 - (t1866 * t1955 + t1869 * t1991) * t1902) * t1903 + t1898 * t2026 + ((t1866 * t2015 + t1899 * t1869 - t1869) * t1873 - t1869 * pkin(6)) * t1920 + (-t1866 * t1965 + t1869 * t1981) * t1911 - t2026;
t1848 = t1879 + pkin(1);
t2092 = t1796 * t2266;
t2108 = pkin(6) * t2271;
t2151 = t1903 * t1920;
t1753 = 0.1e1 / ((-t1921 * t2108 + (-pkin(6) * t2115 + t1848 * t1873) * t1920 + t2092) * t1902 + (-t1845 * t1912 + t1855) * pkin(1) * t2151);
t2250 = t1714 * t1753;
t1907 = legFrame(1,2);
t1867 = sin(t1907);
t1870 = cos(t1907);
t1945 = -t1923 * t2020 - t2311;
t1954 = t1925 * t2311;
t1824 = t1883 + t1931;
t2131 = t1915 * t1925;
t2132 = t1915 * t1924;
t2160 = t1902 * t1916;
t1964 = pkin(6) * t2131 - (pkin(2) * t2132 + t1824 - t2308) * t2160;
t1819 = t1853 + pkin(1);
t1980 = t1819 * t1924 + t2268;
t1990 = t1915 * t2077;
t2129 = t1916 * t1924;
t2161 = t1902 * t1915;
t2014 = t2129 * t2161;
t2089 = pkin(3) * t2131;
t2024 = t1867 * t2089;
t2044 = t1870 * t2161;
t2182 = t1867 * t1925;
t1715 = (t1945 * t1870 - t2182 * t2301) * t1887 + (-(t1867 * t2129 - 0.2e1 * t2044) * t2269 + (-t1867 * t2297 - t1870 * t1970) * t1923 - (t1867 * t1954 + t1870 * t1990) * t1902) * t1903 + t1900 * t2024 + ((t1867 * t2014 + t1901 * t1870 - t1870) * t1874 - t1870 * pkin(6)) * t1923 + (-t1867 * t1964 + t1870 * t1980) * t1914 - t2024;
t1849 = t1880 + pkin(1);
t2090 = t1797 * t2265;
t2107 = pkin(6) * t2269;
t2150 = t1903 * t1923;
t1754 = 0.1e1 / ((-t1924 * t2107 + (-pkin(6) * t2114 + t1849 * t1874) * t1923 + t2090) * t1902 + (-t1846 * t1915 + t1856) * pkin(1) * t2150);
t2249 = t1715 * t1754;
t2027 = t1868 * t2093;
t2056 = t1865 * t2167;
t2180 = t1868 * t1919;
t2189 = t1865 * t1909;
t1716 = (t1947 * t1865 + t2180 * t2303) * t1887 + ((t1868 * t2141 + 0.2e1 * t2056) * t2273 + (-t1865 * t1972 + t1868 * t2295) * t1917 + t1902 * (t1868 * t1956 - t2079 * t2189)) * t1903 - t1896 * t2027 + ((t1897 * t1865 - t1868 * t2016 - t1865) * t1872 - t1865 * pkin(6)) * t1917 + (t1865 * t1982 + t1868 * t1966) * t1908 + t2027;
t2248 = t1716 * t1752;
t2025 = t1869 * t2091;
t2051 = t1866 * t2164;
t2178 = t1869 * t1922;
t2186 = t1866 * t1912;
t1717 = (t1946 * t1866 + t2178 * t2302) * t1887 + ((t1869 * t2135 + 0.2e1 * t2051) * t2271 + (-t1866 * t1971 + t1869 * t2296) * t1920 + t1902 * (t1869 * t1955 - t2078 * t2186)) * t1903 - t1898 * t2025 + ((t1899 * t1866 - t1869 * t2015 - t1866) * t1873 - t1866 * pkin(6)) * t1920 + (t1866 * t1981 + t1869 * t1965) * t1911 + t2025;
t2247 = t1717 * t1753;
t2023 = t1870 * t2089;
t2046 = t1867 * t2161;
t2176 = t1870 * t1925;
t2183 = t1867 * t1915;
t1718 = (t1945 * t1867 + t2176 * t2301) * t1887 + ((t1870 * t2129 + 0.2e1 * t2046) * t2269 + (-t1867 * t1970 + t1870 * t2297) * t1923 + t1902 * (t1870 * t1954 - t2077 * t2183)) * t1903 - t1900 * t2023 + ((t1901 * t1867 - t1870 * t2014 - t1867) * t1874 - t1867 * pkin(6)) * t1923 + (t1867 * t1980 + t1870 * t1964) * t1914 + t2023;
t2246 = t1718 * t1754;
t1886 = pkin(1) * t1931;
t2206 = (t1875 + t1888) * (t1875 + t1889);
t2064 = t1909 * t2206;
t1770 = t1886 - t2064;
t1838 = t1872 + pkin(6);
t2191 = (t1903 + 0.1e1) * (t1903 - 0.1e1);
t2103 = -0.2e1 * t2191;
t1989 = t1844 * t1897 * t2103;
t2057 = t1838 * t2189;
t2005 = t1919 * t2057;
t2042 = t1844 * t2188;
t2007 = t1838 * t2042;
t2012 = t1868 * t2064;
t2013 = t1865 * t2064;
t2055 = t1909 * t1868 * t1838;
t1801 = pkin(1) + 0.2e1 * t1851;
t2067 = t1801 * t1844 * t1910;
t2125 = t1919 * t1931;
t2040 = t1903 * t2125;
t2070 = (t1844 * t2040 - t1910 * t2206 / 0.2e1) * t1897 * t1902;
t2181 = t1868 * t1844;
t2200 = t1822 * t1910;
t1719 = -0.2e1 * t1865 * t2070 + (((-t1838 * t2181 + t1919 * t2013) * t1903 + t1865 * t2067) * t1902 + (t2007 + t2012) * t1887 - t2007 + t1770 * t1868) * t1918 - t1822 * t2181 + (t1868 * t1989 + ((t2042 - t2055) * t1903 + t1865 * t2200) * t1902 + (t2005 + t2181) * t1887 - t2005) * t1931;
t1804 = t1917 * pkin(6) - t2267;
t2100 = t1903 * t1881;
t2149 = t1903 * t1931;
t1820 = pkin(1) * t2149;
t2203 = t1820 * t1917;
t1755 = 0.1e1 / ((-t1844 * t1804 * t1902 + t2203) * t1918 + (pkin(1) * t1908 * t1844 - t1804 * t1851) * t1902 - t1917 * t1844 * t2100);
t2245 = t1719 * t1755;
t2004 = t1919 * t2055;
t2041 = t1844 * t2180;
t2006 = t1838 * t2041;
t2190 = t1865 * t1844;
t1720 = 0.2e1 * t1868 * t2070 + (((-t1838 * t2190 - t1919 * t2012) * t1903 - t1868 * t2067) * t1902 + (-t2006 + t2013) * t1887 + t2006 + t1770 * t1865) * t1918 - t1822 * t2190 + (t1865 * t1989 - ((t2041 + t2057) * t1903 + t1868 * t2200) * t1902 - (t2004 - t2190) * t1887 + t2004) * t1931;
t2244 = t1720 * t1755;
t2205 = (t1876 + t1888) * (t1876 + t1889);
t2063 = t1912 * t2205;
t1771 = t1886 - t2063;
t1840 = t1873 + pkin(6);
t1988 = t1845 * t1899 * t2103;
t2052 = t1840 * t2186;
t2001 = t1922 * t2052;
t2039 = t1845 * t2185;
t2003 = t1840 * t2039;
t2010 = t1869 * t2063;
t2011 = t1866 * t2063;
t2050 = t1912 * t1869 * t1840;
t1802 = pkin(1) + 0.2e1 * t1852;
t2066 = t1802 * t1845 * t1913;
t2122 = t1922 * t1931;
t2037 = t1903 * t2122;
t2069 = (t1845 * t2037 - t1913 * t2205 / 0.2e1) * t1899 * t1902;
t2179 = t1869 * t1845;
t2199 = t1823 * t1913;
t1721 = -0.2e1 * t1866 * t2069 + (((-t1840 * t2179 + t1922 * t2011) * t1903 + t1866 * t2066) * t1902 + (t2003 + t2010) * t1887 - t2003 + t1771 * t1869) * t1921 - t1823 * t2179 + (t1869 * t1988 + ((t2039 - t2050) * t1903 + t1866 * t2199) * t1902 + (t2001 + t2179) * t1887 - t2001) * t1931;
t1805 = t1920 * pkin(6) - t2266;
t2099 = t1903 * t1882;
t2202 = t1820 * t1920;
t1756 = 0.1e1 / ((-t1845 * t1805 * t1902 + t2202) * t1921 + (pkin(1) * t1911 * t1845 - t1805 * t1852) * t1902 - t1920 * t1845 * t2099);
t2243 = t1721 * t1756;
t2000 = t1922 * t2050;
t2038 = t1845 * t2178;
t2002 = t1840 * t2038;
t2187 = t1866 * t1845;
t1722 = 0.2e1 * t1869 * t2069 + (((-t1840 * t2187 - t1922 * t2010) * t1903 - t1869 * t2066) * t1902 + (-t2002 + t2011) * t1887 + t2002 + t1771 * t1866) * t1921 - t1823 * t2187 + (t1866 * t1988 - ((t2038 + t2052) * t1903 + t1869 * t2199) * t1902 - (t2000 - t2187) * t1887 + t2000) * t1931;
t2242 = t1722 * t1756;
t2204 = (t1877 + t1888) * (t1877 + t1889);
t2062 = t1915 * t2204;
t1772 = t1886 - t2062;
t1842 = t1874 + pkin(6);
t1987 = t1846 * t1901 * t2103;
t2047 = t1842 * t2183;
t1997 = t1925 * t2047;
t2036 = t1846 * t2182;
t1999 = t1842 * t2036;
t2008 = t1870 * t2062;
t2009 = t1867 * t2062;
t2045 = t1915 * t1870 * t1842;
t1803 = pkin(1) + 0.2e1 * t1853;
t2065 = t1803 * t1846 * t1916;
t2119 = t1925 * t1931;
t2034 = t1903 * t2119;
t2068 = (t1846 * t2034 - t1916 * t2204 / 0.2e1) * t1901 * t1902;
t2177 = t1870 * t1846;
t2198 = t1824 * t1916;
t1723 = -0.2e1 * t1867 * t2068 + (((-t1842 * t2177 + t1925 * t2009) * t1903 + t1867 * t2065) * t1902 + (t1999 + t2008) * t1887 - t1999 + t1772 * t1870) * t1924 - t1824 * t2177 + (t1870 * t1987 + ((t2036 - t2045) * t1903 + t1867 * t2198) * t1902 + (t1997 + t2177) * t1887 - t1997) * t1931;
t1806 = t1923 * pkin(6) - t2265;
t2098 = t1903 * t1883;
t2201 = t1820 * t1923;
t1757 = 0.1e1 / ((-t1846 * t1806 * t1902 + t2201) * t1924 + (pkin(1) * t1914 * t1846 - t1806 * t1853) * t1902 - t1923 * t1846 * t2098);
t2241 = t1723 * t1757;
t1996 = t1925 * t2045;
t2035 = t1846 * t2176;
t1998 = t1842 * t2035;
t2184 = t1867 * t1846;
t1724 = 0.2e1 * t1870 * t2068 + (((-t1842 * t2184 - t1925 * t2008) * t1903 - t1870 * t2065) * t1902 + (-t1998 + t2009) * t1887 + t1998 + t1772 * t1867) * t1924 - t1824 * t2184 + (t1867 * t1987 - ((t2035 + t2047) * t1903 + t1870 * t2198) * t1902 - (t1996 - t2184) * t1887 + t1996) * t1931;
t2240 = t1724 * t1757;
t2140 = t1910 * t1931;
t1788 = t1903 * t2140 + t2264;
t1791 = -pkin(1) * t2281 - t1931 * t2274;
t1839 = t1872 - pkin(6);
t1943 = pkin(2) ^ 2;
t2030 = t2149 * t2323;
t2145 = t1909 * t1910;
t2053 = t1903 * t2145;
t2175 = t1888 * t1889;
t2061 = t1903 * t2175;
t2168 = t1902 * t1908;
t2097 = pkin(3) * t2168;
t2111 = -0.2e1 * t2281;
t2127 = t1919 * t1801;
t2171 = t1902 * t1838;
t1941 = pkin(3) ^ 2;
t2174 = t1896 * t1941;
t2239 = ((t1910 * t2030 + 0.2e1 * t1788 * t1875 + (t2174 + t2175) * t1919) * t1897 + (-t2053 * t2174 + ((t1909 * t2111 + t2171) * t1910 + t2127) * t1875 + (pkin(2) * t2171 - t1909 * t2061) * t1910 + pkin(2) * t2127) * t1918 + (t1919 * t1822 + (t1838 * t2167 - t1844 * t1903) * t1910) * t1931) / ((t2203 + (t1839 * t2277 + t1908 * t1943 - t2109) * t1902) * t1918 - t2100 * t2273 + (pkin(1) * t2097 + t1791 * t1909) * t1917 + pkin(2) * t1817 * t2168);
t2134 = t1913 * t1931;
t1789 = t1903 * t2134 + t2263;
t1841 = t1873 - pkin(6);
t2139 = t1912 * t1913;
t2048 = t1903 * t2139;
t2165 = t1902 * t1911;
t2096 = pkin(3) * t2165;
t2124 = t1922 * t1802;
t2170 = t1902 * t1840;
t2173 = t1898 * t1941;
t2238 = ((t1913 * t2030 + 0.2e1 * t1789 * t1876 + (t2173 + t2175) * t1922) * t1899 + (-t2048 * t2173 + ((t1912 * t2111 + t2170) * t1913 + t2124) * t1876 + (pkin(2) * t2170 - t1912 * t2061) * t1913 + pkin(2) * t2124) * t1921 + (t1922 * t1823 + (t1840 * t2164 - t1845 * t1903) * t1913) * t1931) / ((t2202 + (t1841 * t2276 + t1911 * t1943 - t2108) * t1902) * t1921 - t2099 * t2271 + (pkin(1) * t2096 + t1791 * t1912) * t1920 + pkin(2) * t1818 * t2165);
t2128 = t1916 * t1931;
t1790 = t1903 * t2128 + t2262;
t1843 = t1874 - pkin(6);
t2133 = t1915 * t1916;
t2043 = t1903 * t2133;
t2162 = t1902 * t1914;
t2095 = pkin(3) * t2162;
t2121 = t1925 * t1803;
t2169 = t1902 * t1842;
t2172 = t1900 * t1941;
t2237 = ((t1916 * t2030 + 0.2e1 * t1790 * t1877 + (t2172 + t2175) * t1925) * t1901 + (-t2043 * t2172 + ((t1915 * t2111 + t2169) * t1916 + t2121) * t1877 + (pkin(2) * t2169 - t1915 * t2061) * t1916 + pkin(2) * t2121) * t1924 + (t1925 * t1824 + (t1842 * t2161 - t1846 * t1903) * t1916) * t1931) / ((t2201 + (t1843 * t2275 + t1914 * t1943 - t2107) * t1902) * t1924 - t2098 * t2269 + (pkin(1) * t2095 + t1791 * t1915) * t1923 + pkin(2) * t1819 * t2162);
t2126 = t1919 * t1918;
t2155 = t1903 * t1910;
t1731 = ((-t1908 * t1918 * t2093 - t2022 * t2155) * t1917 - (t1969 * t2155 + t1919 * (t1847 * t1909 + t1931 - t2310)) * t1908) * t1902 + (t1903 * t2126 + t2283 * t2145) * t2273 + (t1919 * t1795 + t1798 * t2155) * t2152 + t1910 * t1992 * t2191;
t2236 = t1731 * t1752;
t2123 = t1922 * t1921;
t2154 = t1903 * t1913;
t1732 = ((-t1911 * t1921 * t2091 - t2021 * t2154) * t1920 - (t1968 * t2154 + t1922 * (t1848 * t1912 + t1931 - t2309)) * t1911) * t1902 + (t1903 * t2123 + t2283 * t2139) * t2271 + (t1922 * t1796 + t1799 * t2154) * t2151 + t1913 * t1991 * t2191;
t2235 = t1732 * t1753;
t2120 = t1925 * t1924;
t2153 = t1903 * t1916;
t1733 = ((-t1914 * t1924 * t2089 - t2020 * t2153) * t1923 - (t1967 * t2153 + t1925 * (t1849 * t1915 + t1931 - t2308)) * t1914) * t1902 + (t1903 * t2120 + t2283 * t2133) * t2269 + (t1925 * t1797 + t1800 * t2153) * t2150 + t1916 * t1990 * t2191;
t2234 = t1733 * t1754;
t1779 = t1903 * t2143 + t2141;
t1950 = -t1903 * t1872 + t1972;
t1953 = -(t1903 * t2264 + t2140) * t1909 + (-t1910 * pkin(2) + t2040) * t1918 + t1919 * t2097;
t1734 = -(t1868 * t1779 + t2056) * t2273 + (t1865 * t1950 + t1868 * t1953) * t1917 + (-t1903 * t1865 + t1868 * t2159) * t2267;
t1749 = 0.1e1 / (-(t1918 * t2274 + t2100) * t2273 + ((pkin(1) * t1872 - pkin(6) * t1851 + t1839 * t1878) * t1902 + t1798 * t2282) * t1917 + t1902 * t2094);
t2233 = t1734 * t1749;
t1735 = (t1865 * t1779 - t2054) * t2273 + (-t1865 * t1953 + t1868 * t1950) * t1917 - (t1865 * t2159 + t1903 * t1868) * t2267;
t2232 = t1735 * t1749;
t1780 = t1903 * t2137 + t2135;
t1949 = -t1903 * t1873 + t1971;
t1952 = -(t1903 * t2263 + t2134) * t1912 + (-t1913 * pkin(2) + t2037) * t1921 + t1922 * t2096;
t1736 = -(t1869 * t1780 + t2051) * t2271 + (t1866 * t1949 + t1869 * t1952) * t1920 + (-t1903 * t1866 + t1869 * t2158) * t2266;
t1750 = 0.1e1 / (-(t1921 * t2274 + t2099) * t2271 + ((pkin(1) * t1873 - pkin(6) * t1852 + t1841 * t1879) * t1902 + t1799 * t2282) * t1920 + t1902 * t2092);
t2231 = t1736 * t1750;
t1737 = (t1866 * t1780 - t2049) * t2271 + (-t1866 * t1952 + t1869 * t1949) * t1920 - (t1866 * t2158 + t1903 * t1869) * t2266;
t2230 = t1737 * t1750;
t1781 = t1903 * t2131 + t2129;
t1948 = -t1903 * t1874 + t1970;
t1951 = -(t1903 * t2262 + t2128) * t1915 + (-t1916 * pkin(2) + t2034) * t1924 + t1925 * t2095;
t1738 = -(t1870 * t1781 + t2046) * t2269 + (t1867 * t1948 + t1870 * t1951) * t1923 + (-t1903 * t1867 + t1870 * t2157) * t2265;
t1751 = 0.1e1 / (-(t1924 * t2274 + t2098) * t2269 + ((pkin(1) * t1874 - pkin(6) * t1853 + t1843 * t1880) * t1902 + t1800 * t2282) * t1923 + t1902 * t2090);
t2229 = t1738 * t1751;
t1739 = (t1867 * t1781 - t2044) * t2269 + (-t1867 * t1951 + t1870 * t1948) * t1923 - (t1867 * t2157 + t1903 * t1870) * t2265;
t2228 = t1739 * t1751;
t1934 = m(3) * t1943;
t1891 = 0.2e1 * t2287;
t1933 = m(3) * pkin(7) ^ 2;
t2113 = t1891 + t1933;
t1986 = t1934 + t2113 + t2315;
t1761 = t1986 + t2306;
t1995 = -t2255 + t2261;
t1740 = t2318 * t1902 + t1903 * ((t1857 * t1909 + (mrSges(3,1) * t1917 - t1995) * t1918) * pkin(1) + t1761);
t2227 = t1740 * t1749;
t2226 = t1740 * t1752;
t1762 = t1986 + t2305;
t1994 = -t2255 + t2260;
t1741 = t2317 * t1902 + t1903 * ((t1857 * t1912 + (mrSges(3,1) * t1920 - t1994) * t1921) * pkin(1) + t1762);
t2225 = t1741 * t1750;
t2224 = t1741 * t1753;
t1763 = t1986 + t2304;
t1993 = -t2255 + t2259;
t1742 = t2316 * t1902 + t1903 * ((t1857 * t1915 + (mrSges(3,1) * t1923 - t1993) * t1924) * pkin(1) + t1763);
t2223 = t1742 * t1751;
t2222 = t1742 * t1754;
t1832 = -t1926 - t2285;
t1833 = -t1927 + t1929;
t1930 = pkin(1) * mrSges(3,2);
t2085 = pkin(7) + t1881;
t2194 = t1862 * t1909;
t1746 = ((t1832 * t1918 - t2194 - t2286) * t1917 + (t1833 * t1918 + t1861 * t1909 + t1930) * t1908 - Ifges(3,3) * t1918) * t1902 - t1903 * ((mrSges(3,2) * t2085 - Ifges(3,6)) * t1917 + t1908 * (mrSges(3,1) * t2085 - Ifges(3,5)));
t2221 = t1746 * t1749;
t2084 = pkin(7) + t1882;
t2193 = t1862 * t1912;
t1747 = ((t1832 * t1921 - t2193 - t2286) * t1920 + (t1833 * t1921 + t1861 * t1912 + t1930) * t1911 - Ifges(3,3) * t1921) * t1902 - t1903 * ((mrSges(3,2) * t2084 - Ifges(3,6)) * t1920 + t1911 * (mrSges(3,1) * t2084 - Ifges(3,5)));
t2220 = t1747 * t1750;
t2083 = pkin(7) + t1883;
t2192 = t1862 * t1915;
t1748 = ((t1832 * t1924 - t2192 - t2286) * t1923 + (t1833 * t1924 + t1861 * t1915 + t1930) * t1914 - Ifges(3,3) * t1924) * t1902 - t1903 * ((mrSges(3,2) * t2083 - Ifges(3,6)) * t1923 + t1914 * (mrSges(3,1) * t2083 - Ifges(3,5)));
t2219 = t1748 * t1751;
t2060 = t1908 * t2166;
t2218 = t1749 * (-(-t2053 + t2126) * t2273 + (-pkin(3) * t2060 - t1788 * t1918 - t1909 * (-pkin(2) * t2155 + t2125)) * t1917 - pkin(2) * t2060);
t2059 = t1911 * t2163;
t2217 = t1750 * (-(-t2048 + t2123) * t2271 + (-pkin(3) * t2059 - t1789 * t1921 - t1912 * (-pkin(2) * t2154 + t2122)) * t1920 - pkin(2) * t2059);
t2058 = t1914 * t2160;
t2216 = t1751 * (-(-t2043 + t2120) * t2269 + (-pkin(3) * t2058 - t1790 * t1924 - t1915 * (-pkin(2) * t2153 + t2119)) * t1923 - pkin(2) * t2058);
t2215 = t1752 * t1761;
t2214 = t1752 * t1776;
t2213 = t1753 * t1762;
t2212 = t1753 * t1777;
t2211 = t1754 * t1763;
t2210 = t1754 * t1778;
t1942 = 0.1e1 / pkin(3);
t2209 = t1755 * t1942;
t2208 = t1756 * t1942;
t2207 = t1757 * t1942;
t2197 = t1861 * t1908;
t2196 = t1861 * t1911;
t2195 = t1861 * t1914;
t2156 = t1902 * t1942;
t2117 = 0.2e1 * t2314;
t2110 = 0.2e1 * t1857 * pkin(1);
t2102 = 0.2e1 * t1902 * t1903;
t2101 = t1934 + t2284;
t2088 = Ifges(3,3) * t2209;
t2087 = Ifges(3,3) * t2208;
t2086 = Ifges(3,3) * t2207;
t2076 = t1746 * t2209;
t2075 = t1747 * t2208;
t2074 = t1748 * t2207;
t2073 = t1776 * t2209;
t2072 = t1777 * t2208;
t2071 = t1778 * t2207;
t2019 = t2156 * t2239;
t2018 = t2156 * t2238;
t2017 = t2156 * t2237;
t1976 = Ifges(2,2) + Ifges(3,3) - t1933 + t2101;
t1975 = t1891 - t1976;
t1974 = t2101 + t2307 + t2315;
t1973 = -0.2e1 * t2287 + t1976;
t1960 = t2322 * pkin(1) ^ 2 + Ifges(1,3) + t2113 - t2284 - t2307;
t1890 = 0.2e1 * t2286;
t1727 = -t2146 + ((t1975 + t2321) * t1901 + 0.2e1 * (-t1862 * t1923 + t2195 - t2314) * t2132 + t1914 * t2292 + 0.2e1 * t2146 + (-t1809 * t1901 + t1831 + 0.2e1 * t2256) * t2289 + t1974) * t1887 + ((t1890 + 0.2e1 * t2192) * t1923 + (t2117 - 0.2e1 * t2195) * t1915 + t1993 * t2294) * t1924 + (t1926 - t2256) * t2289 + t1914 * t2252 + t1915 * t2110 + (t1973 + t2304) * t1901 + t1960 + t2316 * t2102;
t1726 = -t2147 + ((t1975 + t2320) * t1899 + 0.2e1 * (-t1862 * t1920 + t2196 - t2314) * t2138 + t1911 * t2292 + 0.2e1 * t2147 + (-t1808 * t1899 + t1831 + 0.2e1 * t2257) * t2290 + t1974) * t1887 + ((t1890 + 0.2e1 * t2193) * t1920 + (t2117 - 0.2e1 * t2196) * t1912 + t1994 * t2294) * t1921 + t1911 * t2252 + t1912 * t2110 + (t1973 + t2305) * t1899 + (t1926 - t2257) * t2290 + t1960 + t2317 * t2102;
t1725 = -t2148 + ((t1975 + t2319) * t1897 + 0.2e1 * (-t1862 * t1917 + t2197 - t2314) * t2144 + t1908 * t2292 + 0.2e1 * t2148 + (-t1807 * t1897 + t1831 + 0.2e1 * t2258) * t2291 + t1974) * t1887 + ((t1890 + 0.2e1 * t2194) * t1917 + (t2117 - 0.2e1 * t2197) * t1909 + t1995 * t2294) * t1918 + (t1926 - t2258) * t2291 + t1908 * t2252 + t1909 * t2110 + (t1973 + t2306) * t1897 + t1960 + t2318 * t2102;
t1712 = -Ifges(3,3) * t2017 + t1733 * t2210 + t1748 * t2216;
t1711 = -Ifges(3,3) * t2018 + t1732 * t2212 + t1747 * t2217;
t1710 = -Ifges(3,3) * t2019 + t1731 * t2214 + t1746 * t2218;
t1709 = t1733 * t2211 + t1742 * t2216 - t1778 * t2017;
t1708 = t1732 * t2213 + t1741 * t2217 - t1777 * t2018;
t1707 = t1731 * t2215 + t1740 * t2218 - t1776 * t2019;
t1706 = t1727 * t2216 + t1733 * t2222 - t1748 * t2017;
t1705 = t1726 * t2217 + t1732 * t2224 - t1747 * t2018;
t1704 = t1725 * t2218 + t1731 * t2226 - t1746 * t2019;
t1703 = t1715 * t2210 + t1723 * t2086 + t1739 * t2219;
t1702 = t1718 * t2210 + t1724 * t2086 + t1738 * t2219;
t1701 = t1714 * t2212 + t1721 * t2087 + t1737 * t2220;
t1700 = t1717 * t2212 + t1722 * t2087 + t1736 * t2220;
t1699 = t1713 * t2214 + t1719 * t2088 + t1735 * t2221;
t1698 = t1716 * t2214 + t1720 * t2088 + t1734 * t2221;
t1697 = t1715 * t2211 + t1723 * t2071 + t1739 * t2223;
t1696 = t1718 * t2211 + t1724 * t2071 + t1738 * t2223;
t1695 = t1714 * t2213 + t1721 * t2072 + t1737 * t2225;
t1694 = t1717 * t2213 + t1722 * t2072 + t1736 * t2225;
t1693 = t1713 * t2215 + t1719 * t2073 + t1735 * t2227;
t1692 = t1716 * t2215 + t1720 * t2073 + t1734 * t2227;
t1691 = t1715 * t2222 + t1723 * t2074 + t1727 * t2228;
t1690 = t1718 * t2222 + t1724 * t2074 + t1727 * t2229;
t1689 = t1714 * t2224 + t1721 * t2075 + t1726 * t2230;
t1688 = t1717 * t2224 + t1722 * t2075 + t1726 * t2231;
t1687 = t1713 * t2226 + t1719 * t2076 + t1725 * t2232;
t1686 = t1716 * t2226 + t1720 * t2076 + t1725 * t2233;
t1 = [t1686 * t2233 + t1688 * t2231 + t1690 * t2229 + t1692 * t2248 + t1694 * t2247 + t1696 * t2246 + m(4) + (t1698 * t2244 + t1700 * t2242 + t1702 * t2240) * t1942, t1686 * t2232 + t1688 * t2230 + t1690 * t2228 + t1692 * t2251 + t1694 * t2250 + t1696 * t2249 + (t1698 * t2245 + t1700 * t2243 + t1702 * t2241) * t1942, t1686 * t2218 + t1688 * t2217 + t1690 * t2216 + t1692 * t2236 + t1694 * t2235 + t1696 * t2234 + (-t1698 * t2239 - t1700 * t2238 - t1702 * t2237) * t2156; t1687 * t2233 + t1689 * t2231 + t1691 * t2229 + t1693 * t2248 + t1695 * t2247 + t1697 * t2246 + (t1699 * t2244 + t1701 * t2242 + t1703 * t2240) * t1942, t1687 * t2232 + t1689 * t2230 + t1691 * t2228 + t1693 * t2251 + t1695 * t2250 + t1697 * t2249 + m(4) + (t1699 * t2245 + t1701 * t2243 + t1703 * t2241) * t1942, t1687 * t2218 + t1689 * t2217 + t1691 * t2216 + t1693 * t2236 + t1695 * t2235 + t1697 * t2234 + (-t1699 * t2239 - t1701 * t2238 - t1703 * t2237) * t2156; t1704 * t2233 + t1705 * t2231 + t1706 * t2229 + t1707 * t2248 + t1708 * t2247 + t1709 * t2246 + (t1710 * t2244 + t1711 * t2242 + t1712 * t2240) * t1942, t1704 * t2232 + t1705 * t2230 + t1706 * t2228 + t1707 * t2251 + t1708 * t2250 + t1709 * t2249 + (t1710 * t2245 + t1711 * t2243 + t1712 * t2241) * t1942, t1704 * t2218 + t1705 * t2217 + t1706 * t2216 + t1707 * t2236 + t1708 * t2235 + t1709 * t2234 + m(4) + (-t1710 * t2239 - t1711 * t2238 - t1712 * t2237) * t2156;];
MX  = t1;
