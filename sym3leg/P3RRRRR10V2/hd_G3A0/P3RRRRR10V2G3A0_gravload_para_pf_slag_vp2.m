% Calculate Gravitation load for parallel robot
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [3x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 02:30:41
% EndTime: 2020-08-07 02:30:53
% DurationCPUTime: 12.95s
% Computational Cost: add. (2370->589), mult. (4113->997), div. (36->13), fcn. (3126->26), ass. (0->380)
t4026 = sin(qJ(2,3));
t4035 = cos(qJ(2,3));
t4022 = legFrame(3,2);
t3992 = sin(t4022);
t3995 = cos(t4022);
t3934 = g(1) * t3995 - g(2) * t3992;
t4027 = sin(qJ(1,3));
t4036 = cos(qJ(1,3));
t4088 = g(3) * t4027 - t3934 * t4036;
t3906 = g(3) * t4036 + t3934 * t4027;
t3931 = g(1) * t3992 + g(2) * t3995;
t4020 = sin(pkin(4));
t4021 = cos(pkin(4));
t4326 = -t3906 * t4021 + t3931 * t4020;
t4055 = t4326 * t4026 - t4088 * t4035;
t4029 = sin(qJ(2,2));
t4038 = cos(qJ(2,2));
t4023 = legFrame(2,2);
t3993 = sin(t4023);
t3996 = cos(t4023);
t3935 = g(1) * t3996 - g(2) * t3993;
t4030 = sin(qJ(1,2));
t4039 = cos(qJ(1,2));
t4087 = g(3) * t4030 - t3935 * t4039;
t3907 = g(3) * t4039 + t3935 * t4030;
t3932 = g(1) * t3993 + g(2) * t3996;
t4327 = -t3907 * t4021 + t3932 * t4020;
t4054 = t4327 * t4029 - t4087 * t4038;
t4032 = sin(qJ(2,1));
t4041 = cos(qJ(2,1));
t4024 = legFrame(1,2);
t3994 = sin(t4024);
t3997 = cos(t4024);
t3936 = g(1) * t3997 - g(2) * t3994;
t4033 = sin(qJ(1,1));
t4042 = cos(qJ(1,1));
t4086 = g(3) * t4033 - t3936 * t4042;
t3908 = g(3) * t4042 + t3936 * t4033;
t3933 = g(1) * t3994 + g(2) * t3997;
t4328 = -t3908 * t4021 + t3933 * t4020;
t4053 = t4328 * t4032 - t4086 * t4041;
t4338 = m(2) + m(3);
t4034 = cos(qJ(3,3));
t4001 = t4034 * pkin(3);
t3970 = t4001 + pkin(2);
t4337 = t3970 * t4026;
t4037 = cos(qJ(3,2));
t4002 = t4037 * pkin(3);
t3971 = t4002 + pkin(2);
t4336 = t3971 * t4029;
t4040 = cos(qJ(3,1));
t4003 = t4040 * pkin(3);
t3972 = t4003 + pkin(2);
t4335 = t3972 * t4032;
t4015 = t4035 ^ 2;
t4043 = pkin(8) + pkin(7);
t4334 = t4015 * t4043;
t4017 = t4038 ^ 2;
t4333 = t4017 * t4043;
t4019 = t4041 ^ 2;
t4332 = t4019 * t4043;
t3981 = t4043 * t4041;
t3942 = -pkin(2) * t4032 + t3981;
t4074 = t4020 * t3942;
t3980 = t4043 * t4038;
t3941 = -pkin(2) * t4029 + t3980;
t4075 = t4020 * t3941;
t3979 = t4043 * t4035;
t3940 = -pkin(2) * t4026 + t3979;
t4076 = t4020 * t3940;
t4325 = t3906 * t4020 + t3931 * t4021;
t4324 = t3907 * t4020 + t3932 * t4021;
t4323 = t3908 * t4020 + t3933 * t4021;
t4025 = sin(qJ(3,3));
t4174 = t4025 * pkin(6) + pkin(3);
t4014 = t4034 ^ 2;
t4308 = t4014 * pkin(3);
t4311 = pkin(2) * t4034;
t4322 = (-t4174 + 0.2e1 * t4308 + t4311) * t4026 - t4034 * t3979;
t4028 = sin(qJ(3,2));
t4173 = t4028 * pkin(6) + pkin(3);
t4016 = t4037 ^ 2;
t4306 = t4016 * pkin(3);
t4310 = pkin(2) * t4037;
t4321 = (-t4173 + 0.2e1 * t4306 + t4310) * t4029 - t4037 * t3980;
t4031 = sin(qJ(3,1));
t4172 = t4031 * pkin(6) + pkin(3);
t4018 = t4040 ^ 2;
t4304 = t4018 * pkin(3);
t4309 = pkin(2) * t4040;
t4320 = (-t4172 + 0.2e1 * t4304 + t4309) * t4032 - t4040 * t3981;
t3978 = t4043 * t4032;
t4006 = pkin(2) * t4041;
t4197 = t3978 + t4006;
t3939 = pkin(1) + t4197;
t4000 = t4031 * pkin(3);
t4119 = (t4019 - 0.2e1) * t4000 - pkin(6);
t4241 = t4020 * t4033;
t4319 = -t3939 * t4042 + t4119 * t4241;
t3977 = t4043 * t4029;
t4005 = pkin(2) * t4038;
t4198 = t3977 + t4005;
t3938 = pkin(1) + t4198;
t3999 = t4028 * pkin(3);
t4120 = (t4017 - 0.2e1) * t3999 - pkin(6);
t4243 = t4020 * t4030;
t4318 = -t3938 * t4039 + t4120 * t4243;
t3976 = t4043 * t4026;
t4004 = pkin(2) * t4035;
t4199 = t3976 + t4004;
t3937 = pkin(1) + t4199;
t3998 = t4025 * pkin(3);
t4121 = (t4015 - 0.2e1) * t3998 - pkin(6);
t4245 = t4020 * t4027;
t4317 = -t3937 * t4036 + t4121 * t4245;
t4316 = t4021 / 0.2e1;
t4315 = pkin(1) * t4021;
t4007 = pkin(1) * t4026;
t4008 = pkin(1) * t4029;
t4009 = pkin(1) * t4032;
t4307 = t4015 * pkin(2);
t4305 = t4017 * pkin(2);
t4303 = t4019 * pkin(2);
t3986 = t4021 * pkin(2);
t4302 = t4025 * pkin(2);
t4301 = t4028 * pkin(2);
t4300 = t4031 * pkin(2);
t4299 = -m(3) * pkin(2) - mrSges(2,1);
t4013 = pkin(2) - t4043;
t4012 = pkin(2) + t4043;
t3960 = pkin(1) * t4338 + mrSges(1,1);
t3949 = g(3) * t3960;
t3965 = t3998 - pkin(6);
t3928 = -mrSges(3,1) * t4034 + mrSges(3,2) * t4025 + t4299;
t3982 = pkin(7) * m(3) - mrSges(2,2) + mrSges(3,3);
t4175 = pkin(6) * t4338 + mrSges(2,3);
t4079 = (-t3928 * t4026 - t3982 * t4035) * t4021 - (mrSges(3,1) * t4025 + mrSges(3,2) * t4034 + t4175) * t4020 + mrSges(1,2);
t4082 = -t3928 * t4035 + t3982 * t4026;
t4178 = t3937 * t4302;
t4187 = t4021 * t4007;
t4194 = pkin(1) * t3998;
t4240 = t4020 * t4035;
t4298 = (t3949 * t4036 + (-t4079 * t4027 + t4082 * t4036) * g(3) + (t4079 * t4036 + (t3960 + t4082) * t4027) * t3934) / (-(pkin(6) * t4240 + t4187) * t4308 + ((-pkin(6) * t3976 + t3965 * t4004 + t4194) * t4020 + t3940 * t4315) * t4034 + t4020 * t4178);
t3967 = t3999 - pkin(6);
t3929 = -mrSges(3,1) * t4037 + mrSges(3,2) * t4028 + t4299;
t4078 = (-t3929 * t4029 - t3982 * t4038) * t4021 - (mrSges(3,1) * t4028 + mrSges(3,2) * t4037 + t4175) * t4020 + mrSges(1,2);
t4081 = -t3929 * t4038 + t3982 * t4029;
t4177 = t3938 * t4301;
t4186 = t4021 * t4008;
t4193 = pkin(1) * t3999;
t4238 = t4020 * t4038;
t4297 = (t3949 * t4039 + (-t4078 * t4030 + t4081 * t4039) * g(3) + (t4078 * t4039 + (t3960 + t4081) * t4030) * t3935) / (-(pkin(6) * t4238 + t4186) * t4306 + ((-pkin(6) * t3977 + t3967 * t4005 + t4193) * t4020 + t3941 * t4315) * t4037 + t4020 * t4177);
t3969 = t4000 - pkin(6);
t3930 = -mrSges(3,1) * t4040 + mrSges(3,2) * t4031 + t4299;
t4077 = (-t3930 * t4032 - t3982 * t4041) * t4021 - (mrSges(3,1) * t4031 + mrSges(3,2) * t4040 + t4175) * t4020 + mrSges(1,2);
t4080 = -t3930 * t4041 + t3982 * t4032;
t4176 = t3939 * t4300;
t4185 = t4021 * t4009;
t4192 = pkin(1) * t4000;
t4236 = t4020 * t4041;
t4296 = (t3949 * t4042 + (-t4077 * t4033 + t4080 * t4042) * g(3) + (t4077 * t4042 + (t3960 + t4080) * t4033) * t3936) / (-(pkin(6) * t4236 + t4185) * t4304 + ((-pkin(6) * t3978 + t3969 * t4006 + t4192) * t4020 + t3942 * t4315) * t4040 + t4020 * t4176);
t3973 = t4004 + pkin(1);
t4233 = t4021 * t4034;
t4184 = pkin(1) * t4233;
t4191 = pkin(6) * t4308;
t4295 = (-t4055 * t3982 + (t4026 * t4088 + t4035 * t4326) * t3928) / ((-t4035 * t4191 + (-pkin(6) * t4199 + t3973 * t3998) * t4034 + t4178) * t4020 + (t3979 - t4337) * t4184);
t3974 = t4005 + pkin(1);
t4231 = t4021 * t4037;
t4183 = pkin(1) * t4231;
t4190 = pkin(6) * t4306;
t4294 = (-t4054 * t3982 + (t4029 * t4087 + t4038 * t4327) * t3929) / ((-t4038 * t4190 + (-pkin(6) * t4198 + t3974 * t3999) * t4037 + t4177) * t4020 + (t3980 - t4336) * t4183);
t3975 = t4006 + pkin(1);
t4229 = t4021 * t4040;
t4182 = pkin(1) * t4229;
t4189 = pkin(6) * t4304;
t4293 = (-t4053 * t3982 + (t4032 * t4086 + t4041 * t4328) * t3930) / ((-t4041 * t4189 + (-pkin(6) * t4197 + t3975 * t4000) * t4040 + t4176) * t4020 + (t3981 - t4335) * t4182);
t4280 = (t4001 + t4012) * (t4001 + t4013);
t4279 = (t4002 + t4012) * (t4002 + t4013);
t4278 = (t4003 + t4012) * (t4003 + t4013);
t4227 = t4021 * t4043;
t3959 = pkin(1) * t4227;
t4277 = t3959 * t4034;
t4276 = t3959 * t4037;
t4275 = t3959 * t4040;
t3964 = t3998 + pkin(6);
t4274 = t3964 * t4020;
t3966 = t3999 + pkin(6);
t4273 = t3966 * t4020;
t3968 = t4000 + pkin(6);
t4272 = t3968 * t4020;
t4271 = t3970 * t3992;
t4270 = t3970 * t3995;
t4269 = t3971 * t3993;
t4268 = t3971 * t3996;
t4267 = t3972 * t3994;
t4266 = t3972 * t3997;
t4265 = (t4021 + 0.1e1) * (t4021 - 0.1e1);
t3961 = t4007 + t4043;
t4264 = t3992 * t3961;
t4263 = t3992 * t4027;
t3962 = t4008 + t4043;
t4262 = t3993 * t3962;
t4261 = t3993 * t4030;
t3963 = t4009 + t4043;
t4260 = t3994 * t3963;
t4259 = t3994 * t4033;
t4258 = t3995 * t4026;
t4257 = t3995 * t4027;
t4256 = t3996 * t3962;
t4255 = t3996 * t4029;
t4254 = t3996 * t4030;
t4253 = t3997 * t3963;
t4252 = t3997 * t4032;
t4251 = t3997 * t4033;
t4250 = t4012 * t4013;
t4047 = pkin(3) ^ 2;
t4249 = t4014 * t4047;
t4248 = t4016 * t4047;
t4247 = t4018 * t4047;
t4246 = t4020 * t4026;
t4244 = t4020 * t4029;
t4242 = t4020 * t4032;
t4239 = t4020 * t4036;
t4237 = t4020 * t4039;
t4235 = t4020 * t4042;
t4232 = t4021 * t4036;
t4230 = t4021 * t4039;
t4228 = t4021 * t4042;
t4226 = t4025 * t4027;
t4225 = t4026 * t4027;
t4224 = t4026 * t4035;
t3943 = pkin(1) + 0.2e1 * t3976;
t4223 = t4027 * t3943;
t4222 = t4027 * t4035;
t4221 = t4027 * t4043;
t4220 = t4028 * t4030;
t4219 = t4029 * t4030;
t4218 = t4029 * t4038;
t3944 = pkin(1) + 0.2e1 * t3977;
t4217 = t4030 * t3944;
t4216 = t4030 * t4038;
t4215 = t4030 * t4043;
t4214 = t4031 * t4033;
t4213 = t4032 * t4033;
t4212 = t4032 * t4041;
t3945 = pkin(1) + 0.2e1 * t3978;
t4211 = t4033 * t3945;
t4210 = t4033 * t4041;
t4209 = t4033 * t4043;
t4208 = t4035 * t4036;
t4207 = t4036 * t4026;
t4206 = t4038 * t4039;
t4205 = t4039 * t4029;
t4204 = t4041 * t4042;
t4203 = t4042 * t4032;
t4202 = t4043 * t4036;
t4201 = t4043 * t4039;
t4200 = t4043 * t4042;
t4011 = t4021 ^ 2;
t4196 = t4011 - 0.1e1 / 0.2e1;
t4195 = 0.2e1 * t3986;
t4188 = -0.2e1 * t4265;
t4181 = pkin(3) * t4226;
t4180 = pkin(3) * t4220;
t4179 = pkin(3) * t4214;
t3879 = (-t4325 * mrSges(3,1) + t4055 * mrSges(3,2)) * t4034 + t4025 * (t4055 * mrSges(3,1) + t4325 * mrSges(3,2));
t3946 = t4034 * pkin(6) - t4302;
t4048 = 0.1e1 / pkin(3);
t4171 = t3879 / ((-t3946 * t3970 * t4020 + t4277) * t4035 + (pkin(1) * t3970 * t4025 - t3946 * t3976) * t4020 - t4184 * t4337) * t4048;
t3880 = (-t4324 * mrSges(3,1) + t4054 * mrSges(3,2)) * t4037 + t4028 * (t4054 * mrSges(3,1) + t4324 * mrSges(3,2));
t3947 = t4037 * pkin(6) - t4301;
t4170 = t3880 / ((-t3947 * t3971 * t4020 + t4276) * t4038 + (pkin(1) * t3971 * t4028 - t3947 * t3977) * t4020 - t4183 * t4336) * t4048;
t3881 = (-t4323 * mrSges(3,1) + t4053 * mrSges(3,2)) * t4040 + t4031 * (t4053 * mrSges(3,1) + t4323 * mrSges(3,2));
t3948 = t4040 * pkin(6) - t4300;
t4169 = t3881 / ((-t3948 * t3972 * t4020 + t4275) * t4041 + (pkin(1) * t3972 * t4031 - t3948 * t3978) * t4020 - t4182 * t4335) * t4048;
t4142 = t4021 * t4221;
t4168 = (0.2e1 * t3970 * t4142 + t4036 * t4280) * t4020 * t4015;
t4140 = t4021 * t4215;
t4167 = (0.2e1 * t3971 * t4140 + t4039 * t4279) * t4020 * t4017;
t4138 = t4021 * t4209;
t4166 = (0.2e1 * t3972 * t4138 + t4042 * t4278) * t4020 * t4019;
t4165 = t3943 * t3970 * t4036;
t4164 = t3944 * t3971 * t4039;
t4163 = t3945 * t3972 * t4042;
t4162 = t4026 * t4280;
t4161 = t4029 * t4279;
t4160 = t4032 * t4278;
t4159 = t3970 * t4263;
t4158 = t3970 * t4257;
t4157 = t3971 * t4261;
t4156 = t3971 * t4254;
t4155 = t3972 * t4259;
t4154 = t3972 * t4251;
t4153 = t3992 * t4225;
t4152 = t3993 * t4219;
t4151 = t3994 * t4213;
t4150 = t3995 * t4225;
t4149 = t3996 * t4219;
t4148 = t3997 * t4213;
t4147 = t4021 * t4250;
t4146 = t4025 * t4239;
t4145 = t4028 * t4237;
t4144 = t4031 * t4235;
t4143 = t4021 * t4207;
t4141 = t4021 * t4205;
t4139 = t4021 * t4203;
t4137 = t3992 * t4246;
t4136 = t3995 * t4246;
t4135 = t3993 * t4244;
t4134 = t3996 * t4244;
t4133 = t3994 * t4242;
t4132 = t3997 * t4242;
t4128 = -0.2e1 * pkin(2) * t4227;
t4127 = pkin(3) * t4153;
t4126 = pkin(3) * t4150;
t4125 = pkin(3) * t4152;
t4124 = pkin(3) * t4149;
t4123 = pkin(3) * t4151;
t4122 = pkin(3) * t4148;
t4118 = t4027 * t4162;
t4117 = t4030 * t4161;
t4116 = t4033 * t4160;
t4115 = t4207 * t4240;
t4114 = t4205 * t4238;
t4113 = t4203 * t4236;
t4112 = t3964 * t4159;
t4111 = t3964 * t4158;
t4110 = t3964 * t4153;
t4109 = t3964 * t4150;
t4108 = t3966 * t4157;
t4107 = t3966 * t4156;
t4106 = t3966 * t4152;
t4105 = t3966 * t4149;
t4104 = t3968 * t4155;
t4103 = t3968 * t4154;
t4102 = t3968 * t4151;
t4101 = t3968 * t4148;
t4100 = t4026 * t4174;
t4099 = t4029 * t4173;
t4098 = t4032 * t4172;
t4097 = t3970 * t4015 * t4188;
t4096 = t3971 * t4017 * t4188;
t4095 = t3972 * t4019 * t4188;
t3956 = t3976 + pkin(1);
t4094 = t3956 * t4035 + t4307;
t3957 = t3977 + pkin(1);
t4093 = t3957 * t4038 + t4305;
t3958 = t3978 + pkin(1);
t4092 = t3958 * t4041 + t4303;
t4073 = t4026 * t3979 - pkin(2) + t4307;
t4072 = t4029 * t3980 - pkin(2) + t4305;
t4071 = t4032 * t3981 - pkin(2) + t4303;
t4070 = pkin(6) * t4225 + (pkin(2) * t4224 + t3961 - t4334) * t4239;
t4069 = pkin(6) * t4219 + (pkin(2) * t4218 + t3962 - t4333) * t4237;
t4068 = pkin(6) * t4213 + (pkin(2) * t4212 + t3963 - t4332) * t4235;
t4064 = t4073 * t4226;
t4063 = t4072 * t4220;
t4062 = t4071 * t4214;
t4061 = (-t4027 * t3986 + t4202) * t4026 + (t4036 * pkin(2) + t4142) * t4035 + t4020 * t4181;
t4060 = (-t4030 * t3986 + t4201) * t4029 + (t4039 * pkin(2) + t4140) * t4038 + t4020 * t4180;
t4059 = (-t4033 * t3986 + t4200) * t4032 + (t4042 * pkin(2) + t4138) * t4041 + t4020 * t4179;
t4058 = -t4021 * t3998 + t4076;
t4057 = -t4021 * t3999 + t4075;
t4056 = -t4021 * t4000 + t4074;
t4052 = -t4073 * t4025 - t4121 * t4034;
t4051 = -t4072 * t4028 - t4120 * t4037;
t4050 = -t4071 * t4031 - t4119 * t4040;
t4049 = pkin(2) ^ 2;
t4010 = pkin(1) * t4043;
t3927 = -pkin(6) * t4020 * t4043 - pkin(1) * t3986;
t3926 = -pkin(2) * t4033 + t4021 * t4200;
t3925 = -pkin(2) * t4030 + t4021 * t4201;
t3924 = -pkin(2) * t4027 + t4021 * t4202;
t3914 = -t4021 * t4213 + t4204;
t3913 = -t4021 * t4219 + t4206;
t3912 = -t4021 * t4225 + t4208;
t3902 = t4010 - t4160;
t3901 = t4010 - t4161;
t3900 = t4010 - t4162;
t1 = [(-(t3914 * t3997 + t4133) * t4304 + (t4056 * t3994 - t4059 * t3997) * t4040 - (t3994 * t4021 + t3997 * t4241) * t4300) * t4296 + ((t4050 * t3994 - t4320 * t4251) * t4011 + ((t3997 * t4204 + 0.2e1 * t4133) * t4304 + (-t3994 * t4074 - t4319 * t3997) * t4040 - t4020 * (t3994 * t4098 + t3997 * t4062)) * t4021 + t4018 * t4122 + (-(-t3994 * t4019 + t3997 * t4113 + t3994) * t4000 - t3994 * pkin(6)) * t4040 + (t4092 * t3994 - t4068 * t3997) * t4031 - t4122) * t4293 + (-t3997 * t4166 + (((-t3968 * t4267 + t3997 * t4116) * t4021 - t3997 * t4163) * t4020 + (t3994 * t4160 + t4103) * t4011 - t4103 + t3994 * t3902) * t4041 - t3972 * t4260 + (t3994 * t4095 - ((t3968 * t3994 * t4032 - t4154) * t4021 + t4042 * t4253) * t4020 + (t4101 + t4267) * t4011 - t4101) * t4043) * t4169 + (-(t3913 * t3996 + t4135) * t4306 + (t4057 * t3993 - t4060 * t3996) * t4037 - (t3993 * t4021 + t3996 * t4243) * t4301) * t4297 + ((t4051 * t3993 - t4321 * t4254) * t4011 + ((t3996 * t4206 + 0.2e1 * t4135) * t4306 + (-t3993 * t4075 - t4318 * t3996) * t4037 - t4020 * (t3993 * t4099 + t3996 * t4063)) * t4021 + t4016 * t4124 + (-(-t3993 * t4017 + t3996 * t4114 + t3993) * t3999 - t3993 * pkin(6)) * t4037 + (t4093 * t3993 - t4069 * t3996) * t4028 - t4124) * t4294 + (-t3996 * t4167 + (((-t3966 * t4269 + t3996 * t4117) * t4021 - t3996 * t4164) * t4020 + (t3993 * t4161 + t4107) * t4011 - t4107 + t3993 * t3901) * t4038 - t3971 * t4262 + (t3993 * t4096 - ((t3966 * t3993 * t4029 - t4156) * t4021 + t4039 * t4256) * t4020 + (t4105 + t4269) * t4011 - t4105) * t4043) * t4170 + (-(t3912 * t3995 + t4137) * t4308 + (t4058 * t3992 - t4061 * t3995) * t4034 - (t3992 * t4021 + t3995 * t4245) * t4302) * t4298 + ((t4052 * t3992 - t4322 * t4257) * t4011 + ((t3995 * t4208 + 0.2e1 * t4137) * t4308 + (-t3992 * t4076 - t4317 * t3995) * t4034 - t4020 * (t3992 * t4100 + t3995 * t4064)) * t4021 + t4014 * t4126 + (-(-t3992 * t4015 + t3995 * t4115 + t3992) * t3998 - t3992 * pkin(6)) * t4034 + (t4094 * t3992 - t4070 * t3995) * t4025 - t4126) * t4295 + (-t3995 * t4168 + (((-t3964 * t4271 + t3995 * t4118) * t4021 - t3995 * t4165) * t4020 + (t3992 * t4162 + t4111) * t4011 - t4111 + t3992 * t3900) * t4035 - t3970 * t4264 + (t3992 * t4097 - ((t3964 * t3992 * t4026 - t4158) * t4021 + t4036 * t3995 * t3961) * t4020 + (t4109 + t4271) * t4011 - t4109) * t4043) * t4171 - g(1) * m(4); ((t3914 * t3994 - t4132) * t4304 + (t4059 * t3994 + t4056 * t3997) * t4040 + (t3994 * t4241 - t3997 * t4021) * t4300) * t4296 + ((t4050 * t3997 + t4320 * t4259) * t4011 + (-(t3994 * t4204 - 0.2e1 * t4132) * t4304 + (t4319 * t3994 - t3997 * t4074) * t4040 + t4020 * (t3994 * t4062 - t4172 * t4252)) * t4021 - t4018 * t4123 + ((t3994 * t4113 + t3997 * t4019 - t3997) * t4000 - t3997 * pkin(6)) * t4040 + (t4068 * t3994 + t4092 * t3997) * t4031 + t4123) * t4293 + (t3994 * t4166 + (((-t3968 * t4266 - t3994 * t4116) * t4021 + t3994 * t4163) * t4020 + (t3997 * t4160 - t4104) * t4011 + t4104 + t3997 * t3902) * t4041 - t3972 * t4253 + (t3997 * t4095 + ((-t3968 * t4252 - t4155) * t4021 + t4042 * t4260) * t4020 + (-t4102 + t4266) * t4011 + t4102) * t4043) * t4169 + ((t3913 * t3993 - t4134) * t4306 + (t4060 * t3993 + t4057 * t3996) * t4037 + (t3993 * t4243 - t3996 * t4021) * t4301) * t4297 + ((t4051 * t3996 + t4321 * t4261) * t4011 + (-(t3993 * t4206 - 0.2e1 * t4134) * t4306 + (t4318 * t3993 - t3996 * t4075) * t4037 + t4020 * (t3993 * t4063 - t4173 * t4255)) * t4021 - t4016 * t4125 + ((t3993 * t4114 + t3996 * t4017 - t3996) * t3999 - t3996 * pkin(6)) * t4037 + (t4069 * t3993 + t4093 * t3996) * t4028 + t4125) * t4294 + (t3993 * t4167 + (((-t3966 * t4268 - t3993 * t4117) * t4021 + t3993 * t4164) * t4020 + (t3996 * t4161 - t4108) * t4011 + t4108 + t3996 * t3901) * t4038 - t3971 * t4256 + (t3996 * t4096 + ((-t3966 * t4255 - t4157) * t4021 + t4039 * t4262) * t4020 + (-t4106 + t4268) * t4011 + t4106) * t4043) * t4170 + ((t3912 * t3992 - t4136) * t4308 + (t4061 * t3992 + t4058 * t3995) * t4034 + (t3992 * t4245 - t3995 * t4021) * t4302) * t4298 + ((t4052 * t3995 + t4322 * t4263) * t4011 + (-(t3992 * t4208 - 0.2e1 * t4136) * t4308 + (t4317 * t3992 - t3995 * t4076) * t4034 + t4020 * (t3992 * t4064 - t4174 * t4258)) * t4021 - t4014 * t4127 + ((t3992 * t4115 + t3995 * t4015 - t3995) * t3998 - t3995 * pkin(6)) * t4034 + (t4070 * t3992 + t4094 * t3995) * t4025 + t4127) * t4295 + (t3992 * t4168 + (((-t3964 * t4270 - t3992 * t4118) * t4021 + t3992 * t4165) * t4020 + (t3995 * t4162 - t4112) * t4011 + t4112 + t3995 * t3900) * t4035 - t3961 * t4270 + (t3995 * t4097 + ((-t3964 * t4258 - t4159) * t4021 + t4036 * t4264) * t4020 + (-t4110 + t4270) * t4011 + t4110) * t4043) * t4171 - g(2) * m(4); ((t4139 + t4210) * t4304 + (-pkin(3) * t4144 - t3926 * t4041 + (pkin(2) * t4228 + t4209) * t4032) * t4040 - pkin(2) * t4144) * t4296 + (((-t4119 * t4228 + t4179 * t4212) * t4040 + (-t4071 * t4228 + t4033 * (t3975 * t4032 + t4043 - t4332)) * t4031) * t4020 - 0.2e1 * (t4196 * t4203 + t4210 * t4316) * t4304 - (t3939 * t4033 - t3942 * t4228) * t4229 + t4042 * t4098 * t4265) * t4293 + ((t4141 + t4216) * t4306 + (-pkin(3) * t4145 - t3925 * t4038 + (pkin(2) * t4230 + t4215) * t4029) * t4037 - pkin(2) * t4145) * t4297 + (((-t4120 * t4230 + t4180 * t4218) * t4037 + (-t4072 * t4230 + t4030 * (t3974 * t4029 + t4043 - t4333)) * t4028) * t4020 - 0.2e1 * (t4196 * t4205 + t4216 * t4316) * t4306 - (t3938 * t4030 - t3941 * t4230) * t4231 + t4039 * t4099 * t4265) * t4294 + ((t4143 + t4222) * t4308 + (-pkin(3) * t4146 - t3924 * t4035 + (pkin(2) * t4232 + t4221) * t4026) * t4034 - pkin(2) * t4146) * t4298 + (((-t4121 * t4232 + t4181 * t4224) * t4034 + (-t4073 * t4232 + t4027 * (t3973 * t4026 + t4043 - t4334)) * t4025) * t4020 - 0.2e1 * (t4196 * t4207 + t4222 * t4316) * t4308 - (t3937 * t4027 - t3940 * t4232) * t4233 + t4036 * t4100 * t4265) * t4295 - g(3) * m(4) + (((t4042 * t4128 - 0.2e1 * t3926 * t4003 + (t4247 + t4250) * t4033) * t4019 + (t4139 * t4247 + ((t4032 * t4195 - t4272) * t4042 + t4211) * t4003 + (-pkin(2) * t4272 + t4032 * t4147) * t4042 + pkin(2) * t4211) * t4041 + t4043 * (t4033 * t3963 + (pkin(3) * t4229 - t3968 * t4242 + t3986) * t4042)) / ((t4275 + (t3969 * t4309 + t4031 * t4049 - t4189) * t4020) * t4041 - t4185 * t4304 + (t3927 * t4032 + t4020 * t4192) * t4040 + t3958 * t4020 * t4300) * t3881 + ((t4039 * t4128 - 0.2e1 * t3925 * t4002 + (t4248 + t4250) * t4030) * t4017 + (t4141 * t4248 + ((t4029 * t4195 - t4273) * t4039 + t4217) * t4002 + (-pkin(2) * t4273 + t4029 * t4147) * t4039 + pkin(2) * t4217) * t4038 + t4043 * (t4030 * t3962 + (pkin(3) * t4231 - t3966 * t4244 + t3986) * t4039)) / ((t4276 + (t3967 * t4310 + t4028 * t4049 - t4190) * t4020) * t4038 - t4186 * t4306 + (t3927 * t4029 + t4020 * t4193) * t4037 + t3957 * t4020 * t4301) * t3880 + ((t4036 * t4128 - 0.2e1 * t3924 * t4001 + (t4249 + t4250) * t4027) * t4015 + (t4143 * t4249 + ((t4026 * t4195 - t4274) * t4036 + t4223) * t4001 + (-pkin(2) * t4274 + t4026 * t4147) * t4036 + pkin(2) * t4223) * t4035 + t4043 * (t4027 * t3961 + (pkin(3) * t4233 - t3964 * t4246 + t3986) * t4036)) / ((t4277 + (t3965 * t4311 + t4025 * t4049 - t4191) * t4020) * t4035 - t4187 * t4308 + (t3927 * t4026 + t4020 * t4194) * t4034 + t3956 * t4020 * t4302) * t3879) * t4020 * t4048;];
taugX  = t1;
