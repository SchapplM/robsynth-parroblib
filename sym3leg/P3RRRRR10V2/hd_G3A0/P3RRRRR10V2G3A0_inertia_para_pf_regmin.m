% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x18]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V2G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 02:45:10
% EndTime: 2020-08-07 02:46:35
% DurationCPUTime: 100.00s
% Computational Cost: add. (164709->1522), mult. (328986->2714), div. (4509->16), fcn. (278892->26), ass. (0->983)
t2531 = legFrame(1,2);
t2494 = sin(t2531);
t2497 = cos(t2531);
t2538 = sin(qJ(3,1));
t2500 = t2538 * pkin(3);
t2528 = cos(pkin(4));
t2515 = t2528 ^ 2;
t2547 = cos(qJ(3,1));
t2525 = t2547 ^ 2;
t2548 = cos(qJ(2,1));
t2526 = t2548 ^ 2;
t2527 = sin(pkin(4));
t2550 = pkin(8) + pkin(7);
t2485 = t2550 * t2548;
t2539 = sin(qJ(2,1));
t2506 = t2526 * pkin(2);
t3162 = t2506 - pkin(2);
t2610 = t2485 * t2539 + t3162;
t2488 = t2526 - 0.2e1;
t2712 = t2488 * t2500 - pkin(6);
t2556 = -t2538 * t2610 - t2547 * t2712;
t2540 = sin(qJ(1,1));
t2947 = t2538 * t2540;
t2571 = t2610 * t2947;
t2512 = pkin(1) * t2539;
t2476 = t2512 + pkin(7);
t2461 = pkin(8) + t2476;
t2942 = t2539 * t2548;
t2944 = t2539 * t2540;
t2549 = cos(qJ(1,1));
t2981 = t2527 * t2549;
t3134 = t2526 * t2550;
t2607 = pkin(6) * t2944 + (pkin(2) * t2942 + t2461 - t3134) * t2981;
t3106 = pkin(2) * t2539;
t2436 = t2485 - t3106;
t2613 = t2527 * t2436;
t2482 = t2550 * t2539;
t2454 = t2482 + pkin(1);
t2643 = t2454 * t2548 + t2506;
t2928 = t2549 * t2539;
t2982 = t2527 * t2548;
t2682 = t2928 * t2982;
t2759 = t2494 * t2944;
t2716 = pkin(3) * t2759;
t2988 = t2527 * t2539;
t2734 = t2497 * t2988;
t2867 = t2538 * pkin(6) + pkin(3);
t2929 = t2548 * t2549;
t2998 = t2497 * t2539;
t3003 = t2494 * t2540;
t3100 = t2525 * pkin(3);
t2509 = pkin(2) * t2548;
t2924 = t2482 + t2509;
t2433 = pkin(1) + t2924;
t2987 = t2527 * t2540;
t3121 = -t2433 * t2549 + t2712 * t2987;
t3103 = pkin(2) * t2547;
t3122 = t2539 * (-t2867 + 0.2e1 * t3100 + t3103) - t2547 * t2485;
t2312 = (t2556 * t2497 + t3003 * t3122) * t2515 + (-(t2494 * t2929 - 0.2e1 * t2734) * t3100 + (t2494 * t3121 - t2497 * t2613) * t2547 + t2527 * (t2494 * t2571 - t2867 * t2998)) * t2528 - t2525 * t2716 + ((t2494 * t2682 + t2497 * t2526 - t2497) * t2500 - t2497 * pkin(6)) * t2547 + (t2494 * t2607 + t2497 * t2643) * t2538 + t2716;
t3107 = pkin(2) * t2538;
t2873 = t2433 * t3107;
t2972 = t2528 * t2547;
t2894 = pkin(1) * t2972;
t2913 = pkin(6) * t3100;
t3140 = t2509 + pkin(1);
t2505 = t2547 * pkin(3);
t2470 = t2505 + pkin(2);
t3156 = t2470 * t2539;
t2378 = 0.1e1 / ((-t2548 * t2913 + (-pkin(6) * t2924 + t2500 * t3140) * t2547 + t2873) * t2527 + (t2485 - t3156) * t2894);
t2276 = t2312 * t2378;
t2513 = pkin(1) * t2550;
t2516 = pkin(2) + t2550;
t2517 = pkin(2) - t2550;
t3022 = (t2505 + t2516) * (t2505 + t2517);
t2771 = t2539 * t3022;
t2393 = t2513 - t2771;
t2466 = t2500 + pkin(6);
t3006 = (t2528 + 0.1e1) * (t2528 - 0.1e1);
t2908 = -0.2e1 * t3006;
t2649 = t2470 * t2526 * t2908;
t2671 = t2466 * t2759;
t2763 = t2470 * t3003;
t2673 = t2466 * t2763;
t2685 = t2540 * t2771;
t2551 = 0.2e1 * t2550;
t2457 = t2539 * t2551 + pkin(1);
t2768 = t2457 * t2470 * t2549;
t2939 = t2540 * t2550;
t2739 = t2528 * t2939;
t2774 = (0.2e1 * t2470 * t2739 + t2549 * t3022) * t2526 * t2527;
t3007 = t2470 * t2497;
t3016 = t2461 * t2549;
t2318 = t2494 * t2774 + (((-t2466 * t3007 - t2494 * t2685) * t2528 + t2494 * t2768) * t2527 + (t2497 * t2771 - t2673) * t2515 + t2673 + t2497 * t2393) * t2548 - t2461 * t3007 + (t2497 * t2649 + ((-t2466 * t2998 - t2763) * t2528 + t2494 * t3016) * t2527 + (-t2671 + t3007) * t2515 + t2671) * t2550;
t2411 = -t2528 * t2944 + t2929;
t2977 = t2528 * t2538;
t2565 = -pkin(3) * t2977 + t2613;
t2489 = t2528 * pkin(2);
t2888 = pkin(3) * t2947;
t2927 = t2549 * t2550;
t2568 = (-t2489 * t2540 + t2927) * t2539 + (pkin(2) * t2549 + t2739) * t2548 + t2527 * t2888;
t2363 = (t2411 * t2494 - t2734) * t3100 + (t2494 * t2568 + t2497 * t2565) * t2547 + (t2494 * t2987 - t2497 * t2528) * t3107;
t2882 = pkin(6) * t2982;
t2897 = t2528 * t2512;
t2415 = t2882 + t2897;
t2467 = t2500 - pkin(6);
t2916 = pkin(1) * t2500;
t3115 = pkin(1) * t2528;
t2373 = -t2415 * t3100 + ((-pkin(6) * t2482 + t2467 * t2509 + t2916) * t2527 + t2436 * t3115) * t2547 + t2527 * t2873;
t2367 = 0.1e1 / t2373;
t2814 = t2367 * t2988;
t3143 = 0.2e1 * pkin(6);
t2669 = t2814 * t3143;
t2444 = t2547 * pkin(6) - t3107;
t2970 = t2528 * t2550;
t2458 = pkin(1) * t2970;
t3019 = t2458 * t2547;
t2384 = 0.1e1 / ((-t2444 * t2470 * t2527 + t3019) * t2548 + (pkin(1) * t2470 * t2538 - t2444 * t2482) * t2527 - t2894 * t3156);
t2554 = 0.1e1 / pkin(3);
t3028 = t2384 * t2554;
t2852 = t2318 * t3028;
t2724 = pkin(7) * t2852;
t2552 = 0.2e1 * pkin(2);
t3112 = pkin(1) * t2548;
t2479 = t2552 + t3112;
t3034 = t2378 * t2479;
t2439 = pkin(7) * t2539 + t3140;
t3127 = 0.2e1 * ((pkin(7) * t2942 + t3162) * t2515 - t2439 * t2548) * t2367;
t3130 = t2554 * t3140;
t3159 = t2384 * t3130;
t3179 = (t2318 * t3159 + (pkin(6) * t2276 + t2724) * t2539) * t2527 + t2363 * t3127 + (-t2312 * t3034 + t2363 * t2669) * t2528;
t2530 = legFrame(2,2);
t2493 = sin(t2530);
t2496 = cos(t2530);
t2535 = sin(qJ(3,2));
t2499 = t2535 * pkin(3);
t2544 = cos(qJ(3,2));
t2523 = t2544 ^ 2;
t2545 = cos(qJ(2,2));
t2524 = t2545 ^ 2;
t2484 = t2550 * t2545;
t2536 = sin(qJ(2,2));
t2504 = t2524 * pkin(2);
t3163 = t2504 - pkin(2);
t2611 = t2484 * t2536 + t3163;
t2487 = t2524 - 0.2e1;
t2713 = t2487 * t2499 - pkin(6);
t2557 = -t2535 * t2611 - t2544 * t2713;
t2537 = sin(qJ(1,2));
t2957 = t2535 * t2537;
t2572 = t2611 * t2957;
t2511 = pkin(1) * t2536;
t2475 = t2511 + pkin(7);
t2460 = pkin(8) + t2475;
t2952 = t2536 * t2545;
t2954 = t2536 * t2537;
t2546 = cos(qJ(1,2));
t2983 = t2527 * t2546;
t3135 = t2524 * t2550;
t2608 = pkin(6) * t2954 + (pkin(2) * t2952 + t2460 - t3135) * t2983;
t3108 = pkin(2) * t2536;
t2435 = t2484 - t3108;
t2614 = t2527 * t2435;
t2481 = t2550 * t2536;
t2453 = t2481 + pkin(1);
t2644 = t2453 * t2545 + t2504;
t2932 = t2546 * t2536;
t2984 = t2527 * t2545;
t2683 = t2932 * t2984;
t2760 = t2493 * t2954;
t2718 = pkin(3) * t2760;
t2990 = t2527 * t2536;
t2757 = t2496 * t2990;
t2868 = t2535 * pkin(6) + pkin(3);
t2933 = t2545 * t2546;
t3000 = t2496 * t2536;
t3004 = t2493 * t2537;
t3101 = t2523 * pkin(3);
t2508 = pkin(2) * t2545;
t2925 = t2481 + t2508;
t2432 = pkin(1) + t2925;
t2989 = t2527 * t2537;
t3120 = -t2432 * t2546 + t2713 * t2989;
t3104 = pkin(2) * t2544;
t3123 = t2536 * (-t2868 + 0.2e1 * t3101 + t3104) - t2544 * t2484;
t2311 = (t2557 * t2496 + t3004 * t3123) * t2515 + (-(t2493 * t2933 - 0.2e1 * t2757) * t3101 + (t2493 * t3120 - t2496 * t2614) * t2544 + t2527 * (t2493 * t2572 - t2868 * t3000)) * t2528 - t2523 * t2718 + ((t2493 * t2683 + t2496 * t2524 - t2496) * t2499 - t2496 * pkin(6)) * t2544 + (t2493 * t2608 + t2496 * t2644) * t2535 + t2718;
t3109 = pkin(2) * t2535;
t2874 = t2432 * t3109;
t2974 = t2528 * t2544;
t2895 = pkin(1) * t2974;
t2914 = pkin(6) * t3101;
t3141 = t2508 + pkin(1);
t2503 = t2544 * pkin(3);
t2469 = t2503 + pkin(2);
t3157 = t2469 * t2536;
t2377 = 0.1e1 / ((-t2545 * t2914 + (-pkin(6) * t2925 + t2499 * t3141) * t2544 + t2874) * t2527 + (t2484 - t3157) * t2895);
t2275 = t2311 * t2377;
t3023 = (t2503 + t2516) * (t2503 + t2517);
t2772 = t2536 * t3023;
t2392 = t2513 - t2772;
t2464 = t2499 + pkin(6);
t2650 = t2469 * t2524 * t2908;
t2675 = t2464 * t2760;
t2765 = t2469 * t3004;
t2677 = t2464 * t2765;
t2686 = t2537 * t2772;
t2456 = t2536 * t2551 + pkin(1);
t2769 = t2456 * t2469 * t2546;
t2949 = t2537 * t2550;
t2741 = t2528 * t2949;
t2775 = (0.2e1 * t2469 * t2741 + t2546 * t3023) * t2524 * t2527;
t3009 = t2469 * t2496;
t3017 = t2460 * t2546;
t2317 = t2493 * t2775 + (((-t2464 * t3009 - t2493 * t2686) * t2528 + t2493 * t2769) * t2527 + (t2496 * t2772 - t2677) * t2515 + t2677 + t2496 * t2392) * t2545 - t2460 * t3009 + (t2496 * t2650 + ((-t2464 * t3000 - t2765) * t2528 + t2493 * t3017) * t2527 + (-t2675 + t3009) * t2515 + t2675) * t2550;
t2410 = -t2528 * t2954 + t2933;
t2978 = t2528 * t2535;
t2566 = -pkin(3) * t2978 + t2614;
t2889 = pkin(3) * t2957;
t2931 = t2546 * t2550;
t2569 = (-t2489 * t2537 + t2931) * t2536 + (pkin(2) * t2546 + t2741) * t2545 + t2527 * t2889;
t2362 = (t2410 * t2493 - t2757) * t3101 + (t2493 * t2569 + t2496 * t2566) * t2544 + (t2493 * t2989 - t2496 * t2528) * t3109;
t2883 = pkin(6) * t2984;
t2898 = t2528 * t2511;
t2417 = t2883 + t2898;
t2465 = t2499 - pkin(6);
t2917 = pkin(1) * t2499;
t2375 = -t2417 * t3101 + ((-pkin(6) * t2481 + t2465 * t2508 + t2917) * t2527 + t2435 * t3115) * t2544 + t2527 * t2874;
t2371 = 0.1e1 / t2375;
t2798 = t2371 * t2990;
t2667 = t2798 * t3143;
t2442 = t2544 * pkin(6) - t3109;
t3020 = t2458 * t2544;
t2383 = 0.1e1 / ((-t2442 * t2469 * t2527 + t3020) * t2545 + (pkin(1) * t2469 * t2535 - t2442 * t2481) * t2527 - t2895 * t3157);
t3029 = t2383 * t2554;
t2853 = t2317 * t3029;
t2725 = pkin(7) * t2853;
t3113 = pkin(1) * t2545;
t2478 = t2552 + t3113;
t3041 = t2377 * t2478;
t2438 = pkin(7) * t2536 + t3141;
t3126 = 0.2e1 * ((pkin(7) * t2952 + t3163) * t2515 - t2438 * t2545) * t2371;
t3129 = t2554 * t3141;
t3160 = t2383 * t3129;
t3178 = (t2317 * t3160 + (pkin(6) * t2275 + t2725) * t2536) * t2527 + t2362 * t3126 + (-t2311 * t3041 + t2362 * t2667) * t2528;
t2529 = legFrame(3,2);
t2492 = sin(t2529);
t2495 = cos(t2529);
t2532 = sin(qJ(3,3));
t2498 = t2532 * pkin(3);
t2541 = cos(qJ(3,3));
t2521 = t2541 ^ 2;
t2542 = cos(qJ(2,3));
t2522 = t2542 ^ 2;
t2483 = t2550 * t2542;
t2533 = sin(qJ(2,3));
t2502 = t2522 * pkin(2);
t3164 = t2502 - pkin(2);
t2612 = t2483 * t2533 + t3164;
t2486 = t2522 - 0.2e1;
t2714 = t2486 * t2498 - pkin(6);
t2558 = -t2532 * t2612 - t2541 * t2714;
t2534 = sin(qJ(1,3));
t2967 = t2532 * t2534;
t2573 = t2612 * t2967;
t2510 = pkin(1) * t2533;
t2474 = t2510 + pkin(7);
t2459 = pkin(8) + t2474;
t2962 = t2533 * t2542;
t2964 = t2533 * t2534;
t2543 = cos(qJ(1,3));
t2985 = t2527 * t2543;
t3136 = t2522 * t2550;
t2609 = pkin(6) * t2964 + (pkin(2) * t2962 + t2459 - t3136) * t2985;
t3110 = pkin(2) * t2533;
t2434 = t2483 - t3110;
t2615 = t2527 * t2434;
t2480 = t2550 * t2533;
t2452 = t2480 + pkin(1);
t2645 = t2452 * t2542 + t2502;
t2936 = t2543 * t2533;
t2986 = t2527 * t2542;
t2684 = t2936 * t2986;
t2761 = t2492 * t2964;
t2720 = pkin(3) * t2761;
t2992 = t2527 * t2533;
t2737 = t2495 * t2992;
t2869 = t2532 * pkin(6) + pkin(3);
t2937 = t2542 * t2543;
t3002 = t2495 * t2533;
t3005 = t2492 * t2534;
t3102 = t2521 * pkin(3);
t2507 = pkin(2) * t2542;
t2926 = t2480 + t2507;
t2431 = pkin(1) + t2926;
t2991 = t2527 * t2534;
t3119 = -t2431 * t2543 + t2714 * t2991;
t3105 = pkin(2) * t2541;
t3124 = t2533 * (-t2869 + 0.2e1 * t3102 + t3105) - t2541 * t2483;
t2310 = (t2558 * t2495 + t3005 * t3124) * t2515 + (-(t2492 * t2937 - 0.2e1 * t2737) * t3102 + (t2492 * t3119 - t2495 * t2615) * t2541 + t2527 * (t2492 * t2573 - t2869 * t3002)) * t2528 - t2521 * t2720 + ((t2492 * t2684 + t2495 * t2522 - t2495) * t2498 - t2495 * pkin(6)) * t2541 + (t2492 * t2609 + t2495 * t2645) * t2532 + t2720;
t3111 = pkin(2) * t2532;
t2875 = t2431 * t3111;
t2976 = t2528 * t2541;
t2896 = pkin(1) * t2976;
t2915 = pkin(6) * t3102;
t3142 = t2507 + pkin(1);
t2501 = t2541 * pkin(3);
t2468 = t2501 + pkin(2);
t3158 = t2468 * t2533;
t2376 = 0.1e1 / ((-t2542 * t2915 + (-pkin(6) * t2926 + t2498 * t3142) * t2541 + t2875) * t2527 + (t2483 - t3158) * t2896);
t2274 = t2310 * t2376;
t3024 = (t2501 + t2516) * (t2501 + t2517);
t2773 = t2533 * t3024;
t2391 = t2513 - t2773;
t2462 = t2498 + pkin(6);
t2651 = t2468 * t2522 * t2908;
t2679 = t2462 * t2761;
t2767 = t2468 * t3005;
t2681 = t2462 * t2767;
t2687 = t2534 * t2773;
t2455 = t2533 * t2551 + pkin(1);
t2770 = t2455 * t2468 * t2543;
t2959 = t2534 * t2550;
t2743 = t2528 * t2959;
t2776 = (0.2e1 * t2468 * t2743 + t2543 * t3024) * t2522 * t2527;
t3011 = t2468 * t2495;
t3018 = t2459 * t2543;
t2316 = t2492 * t2776 + (((-t2462 * t3011 - t2492 * t2687) * t2528 + t2492 * t2770) * t2527 + (t2495 * t2773 - t2681) * t2515 + t2681 + t2495 * t2391) * t2542 - t2459 * t3011 + (t2495 * t2651 + ((-t2462 * t3002 - t2767) * t2528 + t2492 * t3018) * t2527 + (-t2679 + t3011) * t2515 + t2679) * t2550;
t2409 = -t2528 * t2964 + t2937;
t2979 = t2528 * t2532;
t2567 = -pkin(3) * t2979 + t2615;
t2890 = pkin(3) * t2967;
t2935 = t2543 * t2550;
t2570 = (-t2489 * t2534 + t2935) * t2533 + (pkin(2) * t2543 + t2743) * t2542 + t2527 * t2890;
t2361 = (t2409 * t2492 - t2737) * t3102 + (t2492 * t2570 + t2495 * t2567) * t2541 + (t2492 * t2991 - t2495 * t2528) * t3111;
t2884 = pkin(6) * t2986;
t2899 = t2528 * t2510;
t2416 = t2884 + t2899;
t2463 = t2498 - pkin(6);
t2918 = pkin(1) * t2498;
t2374 = -t2416 * t3102 + ((-pkin(6) * t2480 + t2463 * t2507 + t2918) * t2527 + t2434 * t3115) * t2541 + t2527 * t2875;
t2369 = 0.1e1 / t2374;
t2806 = t2369 * t2992;
t2668 = t2806 * t3143;
t2440 = t2541 * pkin(6) - t3111;
t3021 = t2458 * t2541;
t2382 = 0.1e1 / ((-t2440 * t2468 * t2527 + t3021) * t2542 + (pkin(1) * t2468 * t2532 - t2440 * t2480) * t2527 - t2896 * t3158);
t3030 = t2382 * t2554;
t2854 = t2316 * t3030;
t2726 = pkin(7) * t2854;
t3114 = pkin(1) * t2542;
t2477 = t2552 + t3114;
t3048 = t2376 * t2477;
t2437 = pkin(7) * t2533 + t3142;
t3125 = 0.2e1 * ((pkin(7) * t2962 + t3164) * t2515 - t2437 * t2542) * t2369;
t3128 = t2554 * t3142;
t3161 = t2382 * t3128;
t3177 = (t2316 * t3161 + (pkin(6) * t2274 + t2726) * t2533) * t2527 + t2361 * t3125 + (-t2310 * t3048 + t2361 * t2668) * t2528;
t2661 = t2539 * t2867;
t2755 = t2497 * t2944;
t2715 = pkin(3) * t2755;
t2735 = t2494 * t2988;
t2997 = t2497 * t2540;
t2315 = (t2556 * t2494 - t2997 * t3122) * t2515 + ((t2497 * t2929 + 0.2e1 * t2735) * t3100 + (-t2494 * t2613 - t2497 * t3121) * t2547 - t2527 * (t2494 * t2661 + t2497 * t2571)) * t2528 + t2525 * t2715 + (-(-t2494 * t2526 + t2497 * t2682 + t2494) * t2500 - t2494 * pkin(6)) * t2547 + (t2494 * t2643 - t2497 * t2607) * t2538 - t2715;
t2279 = t2315 * t2378;
t2670 = t2466 * t2755;
t2762 = t2470 * t2997;
t2672 = t2466 * t2762;
t3008 = t2470 * t2494;
t2321 = -t2497 * t2774 + (((-t2466 * t3008 + t2497 * t2685) * t2528 - t2497 * t2768) * t2527 + (t2494 * t2771 + t2672) * t2515 - t2672 + t2494 * t2393) * t2548 - t2461 * t3008 + (t2494 * t2649 - ((t2466 * t2494 * t2539 - t2762) * t2528 + t2497 * t3016) * t2527 + (t2670 + t3008) * t2515 - t2670) * t2550;
t2360 = -(t2411 * t2497 + t2735) * t3100 + (t2494 * t2565 - t2497 * t2568) * t2547 - (t2494 * t2528 + t2497 * t2987) * t3107;
t2849 = t2321 * t3028;
t2721 = pkin(7) * t2849;
t3176 = (t2321 * t3159 + (pkin(6) * t2279 + t2721) * t2539) * t2527 + t2360 * t3127 + (-t2315 * t3034 + t2360 * t2669) * t2528;
t2662 = t2536 * t2868;
t2756 = t2496 * t2954;
t2717 = pkin(3) * t2756;
t2736 = t2493 * t2990;
t2999 = t2496 * t2537;
t2314 = (t2557 * t2493 - t2999 * t3123) * t2515 + ((t2496 * t2933 + 0.2e1 * t2736) * t3101 + (-t2493 * t2614 - t2496 * t3120) * t2544 - t2527 * (t2493 * t2662 + t2496 * t2572)) * t2528 + t2523 * t2717 + (-(-t2493 * t2524 + t2496 * t2683 + t2493) * t2499 - t2493 * pkin(6)) * t2544 + (t2493 * t2644 - t2496 * t2608) * t2535 - t2717;
t2278 = t2314 * t2377;
t2674 = t2464 * t2756;
t2764 = t2469 * t2999;
t2676 = t2464 * t2764;
t3010 = t2469 * t2493;
t2320 = -t2496 * t2775 + (((-t2464 * t3010 + t2496 * t2686) * t2528 - t2496 * t2769) * t2527 + (t2493 * t2772 + t2676) * t2515 - t2676 + t2493 * t2392) * t2545 - t2460 * t3010 + (t2493 * t2650 - ((t2464 * t2493 * t2536 - t2764) * t2528 + t2496 * t3017) * t2527 + (t2674 + t3010) * t2515 - t2674) * t2550;
t2359 = -(t2410 * t2496 + t2736) * t3101 + (t2493 * t2566 - t2496 * t2569) * t2544 - (t2493 * t2528 + t2496 * t2989) * t3109;
t2850 = t2320 * t3029;
t2722 = pkin(7) * t2850;
t3175 = (t2320 * t3160 + (pkin(6) * t2278 + t2722) * t2536) * t2527 + t2359 * t3126 + (-t2314 * t3041 + t2359 * t2667) * t2528;
t2663 = t2533 * t2869;
t2758 = t2495 * t2964;
t2719 = pkin(3) * t2758;
t2738 = t2492 * t2992;
t3001 = t2495 * t2534;
t2313 = (t2558 * t2492 - t3001 * t3124) * t2515 + ((t2495 * t2937 + 0.2e1 * t2738) * t3102 + (-t2492 * t2615 - t2495 * t3119) * t2541 - t2527 * (t2492 * t2663 + t2495 * t2573)) * t2528 + t2521 * t2719 + (-(-t2492 * t2522 + t2495 * t2684 + t2492) * t2498 - t2492 * pkin(6)) * t2541 + (t2492 * t2645 - t2495 * t2609) * t2532 - t2719;
t2277 = t2313 * t2376;
t2678 = t2462 * t2758;
t2766 = t2468 * t3001;
t2680 = t2462 * t2766;
t3012 = t2468 * t2492;
t2319 = -t2495 * t2776 + (((-t2462 * t3012 + t2495 * t2687) * t2528 - t2495 * t2770) * t2527 + (t2492 * t2773 + t2680) * t2515 - t2680 + t2492 * t2391) * t2542 - t2459 * t3012 + (t2492 * t2651 - ((t2462 * t2492 * t2533 - t2766) * t2528 + t2495 * t3018) * t2527 + (t2678 + t3012) * t2515 - t2678) * t2550;
t2358 = -(t2409 * t2495 + t2738) * t3102 + (t2492 * t2567 - t2495 * t2570) * t2541 - (t2492 * t2528 + t2495 * t2991) * t3111;
t2851 = t2319 * t3030;
t2723 = pkin(7) * t2851;
t3174 = (t2319 * t3161 + (pkin(6) * t2277 + t2723) * t2533) * t2527 + t2358 * t3125 + (-t2313 * t3048 + t2358 * t2668) * t2528;
t2923 = t2515 - 0.1e1 / 0.2e1;
t2960 = t2534 * t2542;
t2975 = t2528 * t2543;
t3117 = t2528 / 0.2e1;
t2343 = ((-t2714 * t2975 + t2890 * t2962) * t2541 + (-t2612 * t2975 + t2534 * (t2533 * t3142 + t2550 - t3136)) * t2532) * t2527 - 0.2e1 * (t2923 * t2936 + t2960 * t3117) * t3102 - (t2431 * t2534 - t2434 * t2975) * t2976 + t2543 * t2663 * t3006;
t2325 = t2343 * t2376;
t2424 = -pkin(2) * t2534 + t2528 * t2935;
t2744 = t2528 * t2936;
t2752 = t2532 * t2985;
t2385 = (t2744 + t2960) * t3102 + (-pkin(3) * t2752 - t2424 * t2542 + (pkin(2) * t2975 + t2959) * t2533) * t2541 - pkin(2) * t2752;
t2427 = -pkin(6) * t2527 * t2550 - pkin(1) * t2489;
t2555 = pkin(2) ^ 2;
t3118 = -0.2e1 * pkin(2);
t2727 = t2970 * t3118;
t2996 = t2516 * t2517;
t2754 = t2528 * t2996;
t2919 = 0.2e1 * t2489;
t2961 = t2534 * t2455;
t2553 = pkin(3) ^ 2;
t2995 = t2521 * t2553;
t3015 = t2462 * t2527;
t3075 = ((t2543 * t2727 - 0.2e1 * t2424 * t2501 + (t2995 + t2996) * t2534) * t2522 + (t2744 * t2995 + ((t2533 * t2919 - t3015) * t2543 + t2961) * t2501 + (-pkin(2) * t3015 + t2533 * t2754) * t2543 + pkin(2) * t2961) * t2542 + t2550 * (t2534 * t2459 + (pkin(3) * t2976 - t2462 * t2992 + t2489) * t2543)) / ((t3021 + (t2463 * t3105 + t2532 * t2555 - t2915) * t2527) * t2542 - t2899 * t3102 + (t2427 * t2533 + t2527 * t2918) * t2541 + t2452 * t2527 * t3111);
t2848 = t2554 * t3075;
t2708 = t2527 * t2848;
t3167 = t2527 * (t3128 * t2527 * t3075 + (pkin(6) * t2325 + pkin(7) * t2708) * t2533) + t2385 * t3125 + (-t2343 * t3048 + t2385 * t2668) * t2528;
t2950 = t2537 * t2545;
t2973 = t2528 * t2546;
t2344 = ((-t2713 * t2973 + t2889 * t2952) * t2544 + (-t2611 * t2973 + t2537 * (t2536 * t3141 + t2550 - t3135)) * t2535) * t2527 - 0.2e1 * (t2923 * t2932 + t2950 * t3117) * t3101 - (t2432 * t2537 - t2435 * t2973) * t2974 + t2546 * t2662 * t3006;
t2326 = t2344 * t2377;
t2425 = -pkin(2) * t2537 + t2528 * t2931;
t2742 = t2528 * t2932;
t2749 = t2535 * t2983;
t2386 = (t2742 + t2950) * t3101 + (-pkin(3) * t2749 - t2425 * t2545 + (pkin(2) * t2973 + t2949) * t2536) * t2544 - pkin(2) * t2749;
t2951 = t2537 * t2456;
t2994 = t2523 * t2553;
t3014 = t2464 * t2527;
t3074 = ((t2546 * t2727 - 0.2e1 * t2425 * t2503 + (t2994 + t2996) * t2537) * t2524 + (t2742 * t2994 + ((t2536 * t2919 - t3014) * t2546 + t2951) * t2503 + (-pkin(2) * t3014 + t2536 * t2754) * t2546 + pkin(2) * t2951) * t2545 + t2550 * (t2537 * t2460 + (pkin(3) * t2974 - t2464 * t2990 + t2489) * t2546)) / ((t3020 + (t2465 * t3104 + t2535 * t2555 - t2914) * t2527) * t2545 - t2898 * t3101 + (t2427 * t2536 + t2527 * t2917) * t2544 + t2453 * t2527 * t3109);
t2847 = t2554 * t3074;
t2707 = t2527 * t2847;
t3166 = t2527 * (t3129 * t2527 * t3074 + (pkin(6) * t2326 + pkin(7) * t2707) * t2536) + t2386 * t3126 + (-t2344 * t3041 + t2386 * t2667) * t2528;
t2940 = t2540 * t2548;
t2971 = t2528 * t2549;
t2345 = ((-t2712 * t2971 + t2888 * t2942) * t2547 + (-t2610 * t2971 + t2540 * (t2539 * t3140 + t2550 - t3134)) * t2538) * t2527 - 0.2e1 * (t2923 * t2928 + t2940 * t3117) * t3100 - (t2433 * t2540 - t2436 * t2971) * t2972 + t2549 * t2661 * t3006;
t2327 = t2345 * t2378;
t2426 = -pkin(2) * t2540 + t2528 * t2927;
t2740 = t2528 * t2928;
t2746 = t2538 * t2981;
t2387 = (t2740 + t2940) * t3100 + (-pkin(3) * t2746 - t2426 * t2548 + (pkin(2) * t2971 + t2939) * t2539) * t2547 - pkin(2) * t2746;
t2941 = t2540 * t2457;
t2993 = t2525 * t2553;
t3013 = t2466 * t2527;
t3073 = ((t2549 * t2727 - 0.2e1 * t2426 * t2505 + (t2993 + t2996) * t2540) * t2526 + (t2740 * t2993 + ((t2539 * t2919 - t3013) * t2549 + t2941) * t2505 + (-pkin(2) * t3013 + t2539 * t2754) * t2549 + pkin(2) * t2941) * t2548 + t2550 * (t2540 * t2461 + (pkin(3) * t2972 - t2466 * t2988 + t2489) * t2549)) / ((t3019 + (t2467 * t3103 + t2538 * t2555 - t2913) * t2527) * t2548 - t2897 * t3100 + (t2427 * t2539 + t2527 * t2916) * t2547 + t2454 * t2527 * t3107);
t2846 = t2554 * t3073;
t2706 = t2527 * t2846;
t3165 = t2527 * (t3130 * t2527 * t3073 + (pkin(6) * t2327 + pkin(7) * t2706) * t2539) + t2387 * t3127 + (-t2345 * t3034 + t2387 * t2669) * t2528;
t3139 = t2358 * t2361;
t3138 = t2359 * t2362;
t3137 = t2360 * t2363;
t3116 = 0.2e1 * t2515 - 0.2e1;
t3081 = t2316 * t2382;
t3080 = t2317 * t2383;
t3079 = t2318 * t2384;
t3078 = t2319 * t2382;
t3077 = t2320 * t2383;
t3076 = t2321 * t2384;
t2334 = t2358 * t2369;
t3072 = t2358 * t2376;
t2335 = t2359 * t2371;
t3071 = t2359 * t2377;
t2336 = t2360 * t2367;
t3070 = t2360 * t2378;
t2337 = t2361 * t2369;
t3069 = t2361 * t2376;
t2338 = t2362 * t2371;
t3068 = t2362 * t2377;
t2339 = t2363 * t2367;
t3067 = t2363 * t2378;
t3066 = t2367 * t2527;
t3065 = t2367 * t2528;
t3064 = t2367 * t2548;
t2368 = 0.1e1 / t2373 ^ 2;
t3063 = t2368 * t2387;
t2520 = t2539 ^ 2;
t3062 = t2368 * t2520;
t3061 = t2369 * t2527;
t3060 = t2369 * t2528;
t3059 = t2369 * t2542;
t2370 = 0.1e1 / t2374 ^ 2;
t3058 = t2370 * t2385;
t2518 = t2533 ^ 2;
t3057 = t2370 * t2518;
t3056 = t2371 * t2527;
t3055 = t2371 * t2528;
t3054 = t2371 * t2545;
t2372 = 0.1e1 / t2375 ^ 2;
t3053 = t2372 * t2386;
t2519 = t2536 ^ 2;
t3052 = t2372 * t2519;
t3051 = t2376 * t2385;
t2887 = pkin(6) * t2992;
t3050 = t2376 * (t2528 * t3114 - t2887);
t3049 = t2376 * t2416;
t3047 = t2376 * t2528;
t3046 = t2376 * t2532;
t3045 = t2376 * t2541;
t3044 = t2377 * t2386;
t2886 = pkin(6) * t2990;
t3043 = t2377 * (t2528 * t3113 - t2886);
t3042 = t2377 * t2417;
t3040 = t2377 * t2528;
t3039 = t2377 * t2535;
t3038 = t2377 * t2544;
t3037 = t2378 * t2387;
t2885 = pkin(6) * t2988;
t3036 = t2378 * (t2528 * t3112 - t2885);
t3035 = t2378 * t2415;
t3033 = t2378 * t2528;
t3032 = t2378 * t2538;
t3031 = t2378 * t2547;
t2349 = t2385 * t2369;
t2350 = t2386 * t2371;
t2351 = t2387 * t2367;
t2980 = t2527 * t2554;
t2969 = t2528 * t2554;
t2968 = t2532 * t2533;
t2966 = t2532 * t2541;
t2965 = t2532 * t2542;
t2963 = t2533 * t2541;
t2958 = t2535 * t2536;
t2956 = t2535 * t2544;
t2955 = t2535 * t2545;
t2953 = t2536 * t2544;
t2948 = t2538 * t2539;
t2946 = t2538 * t2547;
t2945 = t2538 * t2548;
t2943 = t2539 * t2547;
t2938 = t2541 * t2542;
t2934 = t2544 * t2545;
t2930 = t2547 * t2548;
t2922 = t2376 * t3118;
t2921 = t2377 * t3118;
t2920 = t2378 * t3118;
t2514 = t2527 ^ 2;
t2909 = 0.2e1 * t2514;
t2907 = -0.2e1 * t2527 * t2528;
t2906 = -0.2e1 * t2966;
t2905 = 0.2e1 * t2966;
t2904 = -0.2e1 * t2956;
t2903 = 0.2e1 * t2956;
t2902 = -0.2e1 * t2946;
t2901 = 0.2e1 * t2946;
t2900 = t3116 * pkin(6);
t2893 = t2376 * t3110;
t2892 = t2377 * t3108;
t2891 = t2378 * t3106;
t2881 = pkin(7) * t2274;
t2880 = pkin(7) * t2275;
t2879 = pkin(7) * t2276;
t2878 = pkin(7) * t2277;
t2877 = pkin(7) * t2278;
t2876 = pkin(7) * t2279;
t2866 = t2310 * t3046;
t2865 = t2310 * t3045;
t2864 = t2311 * t3039;
t2863 = t2311 * t3038;
t2862 = t2312 * t3032;
t2861 = t2312 * t3031;
t2860 = t2313 * t3046;
t2859 = t2313 * t3045;
t2858 = t2314 * t3039;
t2857 = t2314 * t3038;
t2856 = t2315 * t3032;
t2855 = t2315 * t3031;
t2845 = t2343 * t3046;
t2844 = t2343 * t3045;
t2843 = t2344 * t3039;
t2842 = t2344 * t3038;
t2841 = t2345 * t3032;
t2840 = t2345 * t3031;
t2839 = t2370 * t3139;
t2838 = t2358 * t3059;
t2837 = t2358 * t3050;
t2836 = t2358 * t3049;
t2835 = t2372 * t3138;
t2834 = t2359 * t3054;
t2833 = t2359 * t3043;
t2832 = t2359 * t3042;
t2831 = t2368 * t3137;
t2830 = t2360 * t3064;
t2829 = t2360 * t3036;
t2828 = t2360 * t3035;
t2827 = t2361 * t3059;
t2826 = t2361 * t3050;
t2825 = t2361 * t3049;
t2824 = t2362 * t3054;
t2823 = t2362 * t3043;
t2822 = t2362 * t3042;
t2821 = t2363 * t3064;
t2820 = t2363 * t3036;
t2819 = t2363 * t3035;
t2818 = t2548 * t2351;
t2817 = (pkin(6) * t2945 + t2439 * t2547) * t3066;
t2816 = (-pkin(6) * t2930 + t2439 * t2538) * t3066;
t2652 = -pkin(7) * t2548 + t3106;
t2815 = t2652 * t3066;
t2813 = t2367 * t2982;
t2812 = t2387 * t3062;
t2811 = t2368 * t2942;
t2810 = t2542 * t2349;
t2809 = (pkin(6) * t2965 + t2437 * t2541) * t3061;
t2808 = (-pkin(6) * t2938 + t2437 * t2532) * t3061;
t2654 = -pkin(7) * t2542 + t3110;
t2807 = t2654 * t3061;
t2805 = t2369 * t2986;
t2804 = t2385 * t3057;
t2803 = t2370 * t2962;
t2802 = t2545 * t2350;
t2801 = (pkin(6) * t2955 + t2438 * t2544) * t3056;
t2800 = (-pkin(6) * t2934 + t2438 * t2535) * t3056;
t2653 = -pkin(7) * t2545 + t3108;
t2799 = t2653 * t3056;
t2797 = t2371 * t2984;
t2796 = t2386 * t3052;
t2795 = t2372 * t2952;
t2794 = t2385 * t3050;
t2793 = t2385 * t3049;
t2792 = t2376 * t2965;
t2791 = t2376 * t2938;
t2790 = t2386 * t3043;
t2789 = t2386 * t3042;
t2788 = t2377 * t2955;
t2787 = t2377 * t2934;
t2786 = t2387 * t3036;
t2785 = t2387 * t3035;
t2784 = t2378 * t2945;
t2783 = t2378 * t2930;
t2753 = t2527 * t2968;
t2403 = t2753 - t2976;
t2782 = t2403 * t3030;
t2751 = t2527 * t2963;
t2405 = t2751 + t2979;
t2781 = t2405 * t3030;
t2750 = t2527 * t2958;
t2404 = t2750 - t2974;
t2780 = t2404 * t3029;
t2748 = t2527 * t2953;
t2406 = t2748 + t2978;
t2779 = t2406 * t3029;
t2747 = t2527 * t2948;
t2407 = t2747 - t2972;
t2778 = t2407 * t3028;
t2745 = t2527 * t2943;
t2408 = t2745 + t2977;
t2777 = t2408 * t3028;
t2328 = t2358 * t3060;
t2329 = t2359 * t3055;
t2330 = t2360 * t3065;
t2331 = t2361 * t3060;
t2332 = t2362 * t3055;
t2333 = t2363 * t3065;
t2346 = t2528 * t2349;
t2347 = t2528 * t2350;
t2348 = t2528 * t2351;
t2730 = t3047 / 0.2e1;
t2729 = t3040 / 0.2e1;
t2728 = t3033 / 0.2e1;
t2711 = (0.4e1 * t2521 - 0.2e1) * t2992;
t2710 = (0.4e1 * t2523 - 0.2e1) * t2990;
t2709 = (0.4e1 * t2525 - 0.2e1) * t2988;
t2705 = t2367 * t2747;
t2704 = t2367 * t2745;
t2703 = t2387 * t2811;
t2702 = t2369 * t2753;
t2701 = t2369 * t2751;
t2700 = t2385 * t2803;
t2699 = t2371 * t2750;
t2698 = t2371 * t2748;
t2697 = t2386 * t2795;
t2696 = t2527 * t2792;
t2695 = t2527 * t2791;
t2694 = t2527 * t2788;
t2693 = t2527 * t2787;
t2692 = t2527 * t2784;
t2691 = t2527 * t2783;
t2690 = t2382 * t2474 * t2969;
t2689 = t2383 * t2475 * t2969;
t2688 = t2384 * t2476 * t2969;
t2648 = 0.2e1 * t2532 * t2751;
t2647 = 0.2e1 * t2535 * t2748;
t2646 = 0.2e1 * t2538 * t2745;
t2639 = t2367 * (t2488 * t2515 - t2526);
t2638 = t2369 * (t2486 * t2515 - t2522);
t2637 = t2371 * (t2487 * t2515 - t2524);
t2636 = (0.2e1 * t2525 - 0.1e1) * t2814;
t2635 = (0.2e1 * t2521 - 0.1e1) * t2806;
t2634 = (0.2e1 * t2523 - 0.1e1) * t2798;
t2232 = 0.2e1 * t2328 + t2277;
t2624 = (t2232 + t2277) * t2334;
t2234 = 0.2e1 * t2329 + t2278;
t2623 = (t2234 + t2278) * t2335;
t2236 = 0.2e1 * t2330 + t2279;
t2622 = (t2236 + t2279) * t2336;
t2238 = 0.2e1 * t2331 + t2274;
t2621 = (t2238 + t2274) * t2337;
t2240 = 0.2e1 * t2332 + t2275;
t2620 = (t2240 + t2275) * t2338;
t2242 = 0.2e1 * t2333 + t2276;
t2619 = (t2242 + t2276) * t2339;
t2308 = 0.2e1 * t2348 + t2327;
t2618 = (t2308 + t2327) * t2351;
t2304 = 0.2e1 * t2346 + t2325;
t2617 = (t2304 + t2325) * t2349;
t2306 = 0.2e1 * t2347 + t2326;
t2616 = (t2306 + t2326) * t2350;
t2603 = t2367 * (-t2479 * t2528 + t2885);
t2602 = t2369 * (-t2477 * t2528 + t2887);
t2601 = t2371 * (-t2478 * t2528 + t2886);
t2600 = t2367 * (t2236 * t2363 + t2312 * t3070);
t2599 = t2367 * (t2236 * t2387 + t2345 * t3070);
t2598 = t2367 * (t2242 * t2360 + t2315 * t3067);
t2597 = t2367 * (t2242 * t2387 + t2345 * t3067);
t2596 = t2367 * (t2308 * t2363 + t2312 * t3037);
t2595 = t2367 * (t2308 * t2360 + t2315 * t3037);
t2594 = t2369 * (t2232 * t2361 + t2310 * t3072);
t2593 = t2369 * (t2232 * t2385 + t2343 * t3072);
t2592 = t2369 * (t2238 * t2358 + t2313 * t3069);
t2591 = t2369 * (t2238 * t2385 + t2343 * t3069);
t2590 = t2369 * (t2304 * t2361 + t2310 * t3051);
t2589 = t2369 * (t2304 * t2358 + t2313 * t3051);
t2588 = t2371 * (t2234 * t2362 + t2311 * t3071);
t2587 = t2371 * (t2234 * t2386 + t2344 * t3071);
t2586 = t2371 * (t2240 * t2359 + t2314 * t3068);
t2585 = t2371 * (t2240 * t2386 + t2344 * t3068);
t2584 = t2371 * (t2306 * t2362 + t2311 * t3044);
t2583 = t2371 * (t2306 * t2359 + t2314 * t3044);
t2576 = t2367 * (-t2652 * t2907 + t2900);
t2575 = t2369 * (-t2654 * t2907 + t2900);
t2574 = t2371 * (-t2653 * t2907 + t2900);
t2564 = (t2538 * t2907 + t2943 * t3116) * t3064;
t2563 = (t2547 * t2907 - t2948 * t3116) * t3064;
t2562 = (t2532 * t2907 + t2963 * t3116) * t3059;
t2561 = (t2541 * t2907 - t2968 * t3116) * t3059;
t2560 = (t2535 * t2907 + t2953 * t3116) * t3054;
t2559 = (t2544 * t2907 - t2958 * t3116) * t3054;
t2381 = t2387 ^ 2;
t2380 = t2386 ^ 2;
t2379 = t2385 ^ 2;
t2357 = t2363 ^ 2;
t2356 = t2362 ^ 2;
t2355 = t2361 ^ 2;
t2354 = t2360 ^ 2;
t2353 = t2359 ^ 2;
t2352 = t2358 ^ 2;
t2309 = t2348 + t2327;
t2307 = t2347 + t2326;
t2305 = t2346 + t2325;
t2303 = t2348 + t2327 / 0.2e1;
t2302 = t2347 + t2326 / 0.2e1;
t2301 = t2346 + t2325 / 0.2e1;
t2300 = t2345 * t2728 + t2351;
t2299 = t2344 * t2729 + t2350;
t2298 = t2343 * t2730 + t2349;
t2297 = pkin(7) * t2327 + t2348 * t2476;
t2296 = pkin(7) * t2326 + t2347 * t2475;
t2295 = pkin(7) * t2325 + t2346 * t2474;
t2285 = t2387 * t2813 - t2706;
t2284 = t2386 * t2797 - t2707;
t2283 = t2385 * t2805 - t2708;
t2282 = (pkin(7) * t2846 + t2351 * t2652) * t2527;
t2281 = (pkin(7) * t2847 + t2350 * t2653) * t2527;
t2280 = (pkin(7) * t2848 + t2349 * t2654) * t2527;
t2270 = t2309 * t2538 + t2387 * t2704;
t2269 = t2307 * t2535 + t2386 * t2698;
t2268 = t2305 * t2532 + t2385 * t2701;
t2267 = t2309 * t2547 - t2387 * t2705;
t2266 = t2307 * t2544 - t2386 * t2699;
t2265 = t2305 * t2541 - t2385 * t2702;
t2264 = t2345 * t2920 + t2387 * t2603;
t2263 = t2344 * t2921 + t2386 * t2601;
t2262 = t2343 * t2922 + t2385 * t2602;
t2261 = -t2295 * t2541 + t2385 * t2808;
t2260 = -t2297 * t2547 + t2387 * t2816;
t2259 = -t2297 * t2538 - t2387 * t2817;
t2258 = -t2296 * t2544 + t2386 * t2800;
t2257 = -t2296 * t2535 - t2386 * t2801;
t2256 = -t2295 * t2532 - t2385 * t2809;
t2255 = t2363 * t2813 - t2852;
t2254 = t2360 * t2813 - t2849;
t2253 = t2362 * t2797 - t2853;
t2252 = t2359 * t2797 - t2850;
t2251 = t2361 * t2805 - t2854;
t2250 = t2358 * t2805 - t2851;
t2249 = t2363 * t2815 + t2724;
t2248 = t2362 * t2799 + t2725;
t2247 = t2361 * t2807 + t2726;
t2246 = t2360 * t2815 + t2721;
t2245 = t2359 * t2799 + t2722;
t2244 = t2358 * t2807 + t2723;
t2243 = t2333 + t2276;
t2241 = t2332 + t2275;
t2239 = t2331 + t2274;
t2237 = t2330 + t2279;
t2235 = t2329 + t2278;
t2233 = t2328 + t2277;
t2231 = t2333 + t2276 / 0.2e1;
t2230 = t2332 + t2275 / 0.2e1;
t2229 = t2331 + t2274 / 0.2e1;
t2228 = t2330 + t2279 / 0.2e1;
t2227 = t2329 + t2278 / 0.2e1;
t2226 = t2328 + t2277 / 0.2e1;
t2225 = t2315 * t2728 + t2336;
t2224 = t2314 * t2729 + t2335;
t2223 = t2313 * t2730 + t2334;
t2222 = t2312 * t2728 + t2339;
t2221 = t2311 * t2729 + t2338;
t2220 = t2310 * t2730 + t2337;
t2219 = t2333 * t2476 + t2879;
t2218 = t2332 * t2475 + t2880;
t2217 = t2331 * t2474 + t2881;
t2216 = t2330 * t2476 + t2876;
t2215 = t2329 * t2475 + t2877;
t2214 = t2328 * t2474 + t2878;
t2207 = -t2345 * t3033 + t2387 * t2639 + t2351;
t2206 = -t2344 * t3040 + t2386 * t2637 + t2350;
t2205 = -t2343 * t3047 + t2385 * t2638 + t2349;
t2204 = t2309 * t2901 + t2387 * t2636;
t2203 = t2307 * t2903 + t2386 * t2634;
t2202 = t2305 * t2905 + t2385 * t2635;
t2201 = -0.2e1 * t2300 * t2512 - 0.2e1 * t2303 * t2882;
t2200 = -0.2e1 * t2299 * t2511 - 0.2e1 * t2302 * t2883;
t2199 = 0.2e1 * t2299 * t3113 - 0.2e1 * t2302 * t2886;
t2198 = -0.2e1 * t2298 * t2510 - 0.2e1 * t2301 * t2884;
t2197 = 0.2e1 * t2298 * t3114 - 0.2e1 * t2301 * t2887;
t2196 = 0.2e1 * t2300 * t3112 - 0.2e1 * t2303 * t2885;
t2189 = t2361 * t3058 + t2362 * t3053 + t2363 * t3063;
t2188 = t2358 * t3058 + t2359 * t3053 + t2360 * t3063;
t2187 = (t2361 * t2804 + t2362 * t2796 + t2363 * t2812) * t2514;
t2186 = (t2358 * t2804 + t2359 * t2796 + t2360 * t2812) * t2514;
t2185 = (t2361 * t2700 + t2362 * t2697 + t2363 * t2703) * t2909;
t2184 = (t2358 * t2700 + t2359 * t2697 + t2360 * t2703) * t2909;
t2183 = t2243 * t2538 + t2363 * t2704;
t2182 = t2237 * t2538 + t2360 * t2704;
t2181 = t2241 * t2535 + t2362 * t2698;
t2180 = t2235 * t2535 + t2359 * t2698;
t2179 = t2239 * t2532 + t2361 * t2701;
t2178 = t2233 * t2532 + t2358 * t2701;
t2177 = t2243 * t2547 - t2363 * t2705;
t2176 = t2237 * t2547 - t2360 * t2705;
t2175 = t2241 * t2544 - t2362 * t2699;
t2174 = t2235 * t2544 - t2359 * t2699;
t2173 = t2239 * t2541 - t2361 * t2702;
t2172 = t2233 * t2541 - t2358 * t2702;
t2171 = t2312 * t2920 + t2363 * t2603;
t2170 = t2315 * t2920 + t2360 * t2603;
t2169 = t2311 * t2921 + t2362 * t2601;
t2168 = t2314 * t2921 + t2359 * t2601;
t2167 = t2310 * t2922 + t2361 * t2602;
t2166 = t2313 * t2922 + t2358 * t2602;
t2165 = -t2217 * t2541 + t2361 * t2808;
t2164 = -t2214 * t2541 + t2358 * t2808;
t2163 = -t2219 * t2547 + t2363 * t2816;
t2162 = -t2219 * t2538 - t2363 * t2817;
t2161 = -t2218 * t2544 + t2362 * t2800;
t2160 = -t2218 * t2535 - t2362 * t2801;
t2159 = -t2217 * t2532 - t2361 * t2809;
t2158 = -t2216 * t2547 + t2360 * t2816;
t2157 = -t2216 * t2538 - t2360 * t2817;
t2156 = -t2215 * t2544 + t2359 * t2800;
t2155 = -t2215 * t2535 - t2359 * t2801;
t2154 = -t2214 * t2532 - t2358 * t2809;
t2153 = -t2264 * t2547 - t2282 * t2538;
t2152 = t2264 * t2538 - t2282 * t2547;
t2151 = -t2263 * t2544 - t2281 * t2535;
t2150 = t2263 * t2535 - t2281 * t2544;
t2149 = -t2262 * t2541 - t2280 * t2532;
t2148 = t2262 * t2532 - t2280 * t2541;
t2147 = (-t2345 * t2784 + t2408 * t2846) * t2527 + t2387 * t2564;
t2146 = (-t2344 * t2788 + t2406 * t2847) * t2527 + t2386 * t2560;
t2145 = (-t2343 * t2792 + t2405 * t2848) * t2527 + t2385 * t2562;
t2144 = (-t2345 * t2783 - t2407 * t2846) * t2527 + t2387 * t2563;
t2143 = (-t2344 * t2787 - t2404 * t2847) * t2527 + t2386 * t2559;
t2142 = (-t2343 * t2791 - t2403 * t2848) * t2527 + t2385 * t2561;
t2141 = t2831 + t2835 + t2839;
t2140 = (t2518 * t2839 + t2519 * t2835 + t2520 * t2831) * t2514;
t2139 = (t2795 * t3138 + t2803 * t3139 + t2811 * t3137) * t2909;
t2138 = -t2312 * t3033 + t2363 * t2639 + t2339;
t2137 = -t2311 * t3040 + t2362 * t2637 + t2338;
t2136 = -t2310 * t3047 + t2361 * t2638 + t2337;
t2135 = -t2315 * t3033 + t2360 * t2639 + t2336;
t2134 = -t2314 * t3040 + t2359 * t2637 + t2335;
t2133 = -t2313 * t3047 + t2358 * t2638 + t2334;
t2132 = t2243 * t2901 + t2363 * t2636;
t2131 = t2237 * t2901 + t2360 * t2636;
t2130 = t2241 * t2903 + t2362 * t2634;
t2129 = t2235 * t2903 + t2359 * t2634;
t2128 = t2239 * t2905 + t2361 * t2635;
t2127 = t2233 * t2905 + t2358 * t2635;
t2126 = -0.2e1 * t2222 * t2512 - 0.2e1 * t2231 * t2882;
t2125 = -0.2e1 * t2221 * t2511 - 0.2e1 * t2230 * t2883;
t2124 = 0.2e1 * t2221 * t3113 - 0.2e1 * t2230 * t2886;
t2123 = -0.2e1 * t2220 * t2510 - 0.2e1 * t2229 * t2884;
t2122 = 0.2e1 * t2220 * t3114 - 0.2e1 * t2229 * t2887;
t2121 = -0.2e1 * t2225 * t2512 - 0.2e1 * t2228 * t2882;
t2120 = -0.2e1 * t2224 * t2511 - 0.2e1 * t2227 * t2883;
t2119 = 0.2e1 * t2224 * t3113 - 0.2e1 * t2227 * t2886;
t2118 = -0.2e1 * t2223 * t2510 - 0.2e1 * t2226 * t2884;
t2117 = 0.2e1 * t2223 * t3114 - 0.2e1 * t2226 * t2887;
t2116 = 0.2e1 * t2222 * t3112 - 0.2e1 * t2231 * t2885;
t2115 = 0.2e1 * t2225 * t3112 - 0.2e1 * t2228 * t2885;
t2114 = (t2652 * t2327 + (t2476 * t2528 + t2882) * t2846) * t2527 + t2387 * t2576;
t2113 = (t2653 * t2326 + (t2475 * t2528 + t2883) * t2847) * t2527 + t2386 * t2574;
t2112 = (t2654 * t2325 + (t2474 * t2528 + t2884) * t2848) * t2527 + t2385 * t2575;
t2111 = t2207 * t2525 + t2303 * t2646 + t2309 * t2528;
t2110 = t2206 * t2523 + t2302 * t2647 + t2307 * t2528;
t2109 = t2205 * t2521 + t2301 * t2648 + t2305 * t2528;
t2108 = t2207 * t2902 + t2303 * t2709;
t2107 = t2206 * t2904 + t2302 * t2710;
t2106 = t2205 * t2906 + t2301 * t2711;
t2105 = -t2171 * t2547 - t2249 * t2538;
t2104 = t2171 * t2538 - t2249 * t2547;
t2103 = -t2170 * t2547 - t2246 * t2538;
t2102 = t2170 * t2538 - t2246 * t2547;
t2101 = -t2169 * t2544 - t2248 * t2535;
t2100 = t2169 * t2535 - t2248 * t2544;
t2099 = -t2168 * t2544 - t2245 * t2535;
t2098 = t2168 * t2535 - t2245 * t2544;
t2097 = -t2167 * t2541 - t2247 * t2532;
t2096 = t2167 * t2532 - t2247 * t2541;
t2095 = -t2166 * t2541 - t2244 * t2532;
t2094 = t2166 * t2532 - t2244 * t2541;
t2093 = -t2312 * t2692 + t2318 * t2777 + t2363 * t2564;
t2092 = -t2311 * t2694 + t2317 * t2779 + t2362 * t2560;
t2091 = -t2310 * t2696 + t2316 * t2781 + t2361 * t2562;
t2090 = -t2315 * t2692 + t2321 * t2777 + t2360 * t2564;
t2089 = -t2314 * t2694 + t2320 * t2779 + t2359 * t2560;
t2088 = -t2313 * t2696 + t2319 * t2781 + t2358 * t2562;
t2087 = -t2312 * t2691 - t2318 * t2778 + t2363 * t2563;
t2086 = -t2315 * t2691 - t2321 * t2778 + t2360 * t2563;
t2085 = -t2311 * t2693 - t2317 * t2780 + t2362 * t2559;
t2084 = -t2314 * t2693 - t2320 * t2780 + t2359 * t2559;
t2083 = -t2310 * t2695 - t2316 * t2782 + t2361 * t2561;
t2082 = -t2313 * t2695 - t2319 * t2782 + t2358 * t2561;
t2081 = t2318 * t2688 + ((pkin(6) * t2852 - t2879) * t2548 + t2312 * t2891) * t2527 + t2363 * t2576;
t2080 = t2317 * t2689 + ((pkin(6) * t2853 - t2880) * t2545 + t2311 * t2892) * t2527 + t2362 * t2574;
t2079 = t2316 * t2690 + ((pkin(6) * t2854 - t2881) * t2542 + t2310 * t2893) * t2527 + t2361 * t2575;
t2078 = t2321 * t2688 + ((pkin(6) * t2849 - t2876) * t2548 + t2315 * t2891) * t2527 + t2360 * t2576;
t2077 = t2320 * t2689 + ((pkin(6) * t2850 - t2877) * t2545 + t2314 * t2892) * t2527 + t2359 * t2574;
t2076 = t2319 * t2690 + ((pkin(6) * t2851 - t2878) * t2542 + t2313 * t2893) * t2527 + t2358 * t2575;
t2075 = t2138 * t2525 + t2231 * t2646 + t2243 * t2528;
t2074 = t2137 * t2523 + t2230 * t2647 + t2241 * t2528;
t2073 = t2136 * t2521 + t2229 * t2648 + t2239 * t2528;
t2072 = t2135 * t2525 + t2228 * t2646 + t2237 * t2528;
t2071 = t2134 * t2523 + t2227 * t2647 + t2235 * t2528;
t2070 = t2133 * t2521 + t2226 * t2648 + t2233 * t2528;
t2069 = t2138 * t2902 + t2231 * t2709;
t2068 = t2135 * t2902 + t2228 * t2709;
t2067 = t2137 * t2904 + t2230 * t2710;
t2066 = t2134 * t2904 + t2227 * t2710;
t2065 = t2136 * t2906 + t2229 * t2711;
t2064 = t2133 * t2906 + t2226 * t2711;
t2063 = -t2114 * t2538 - t2547 * t3165;
t2062 = -t2114 * t2547 + t2538 * t3165;
t2061 = -t2113 * t2535 - t2544 * t3166;
t2060 = -t2113 * t2544 + t2535 * t3166;
t2059 = -t2112 * t2532 - t3167 * t2541;
t2058 = -t2112 * t2541 + t3167 * t2532;
t2057 = -t2081 * t2538 - t3179 * t2547;
t2056 = -t2081 * t2547 + t3179 * t2538;
t2055 = -t2080 * t2535 - t3178 * t2544;
t2054 = -t2080 * t2544 + t3178 * t2535;
t2053 = -t2079 * t2532 - t3177 * t2541;
t2052 = -t2079 * t2541 + t3177 * t2532;
t2051 = -t2078 * t2538 - t3176 * t2547;
t2050 = -t2078 * t2547 + t3176 * t2538;
t2049 = -t2077 * t2535 - t2544 * t3175;
t2048 = -t2077 * t2544 + t2535 * t3175;
t2047 = -t2076 * t2532 - t2541 * t3174;
t2046 = -t2076 * t2541 + t2532 * t3174;
t1 = [t2352 * t2370 + t2353 * t2372 + t2354 * t2368, 0, 0, (t2352 * t3057 + t2353 * t3052 + t2354 * t3062) * t2514, (t2352 * t2803 + t2353 * t2795 + t2354 * t2811) * t2909, (t2533 * t2624 + t2536 * t2623 + t2539 * t2622) * t2527, (t2542 * t2624 + t2545 * t2623 + t2548 * t2622) * t2527, t2233 * t2277 + t2235 * t2278 + t2237 * t2279 + (t2233 * t2334 + t2235 * t2335 + t2237 * t2336) * t2528, (t2315 * t3036 + t2115) * t2336 + (t2314 * t3043 + t2119) * t2335 + (t2313 * t3050 + t2117) * t2334, (-t2315 * t3035 + t2121) * t2336 + (-t2314 * t3042 + t2120) * t2335 + (-t2313 * t3049 + t2118) * t2334, t2070 * t2334 + t2071 * t2335 + t2072 * t2336 + t2178 * t2860 + t2180 * t2858 + t2182 * t2856, t2064 * t2334 + t2066 * t2335 + t2068 * t2336 + t2127 * t2277 + t2129 * t2278 + t2131 * t2279, -t2250 * t2860 - t2252 * t2858 - t2254 * t2856 + t2088 * t2334 + t2089 * t2335 + t2090 * t2336 + (t2178 * t3078 + t2180 * t3077 + t2182 * t3076) * t2554, -t2250 * t2859 - t2252 * t2857 - t2254 * t2855 + t2082 * t2334 + t2084 * t2335 + t2086 * t2336 + (t2172 * t3078 + t2174 * t3077 + t2176 * t3076) * t2554, (-t2250 * t3078 - t2252 * t3077 - t2254 * t3076) * t2554 + (t2250 * t2838 + t2252 * t2834 + t2254 * t2830) * t2527, t2047 * t2334 + t2049 * t2335 + t2051 * t2336 + t2095 * t2277 + t2099 * t2278 + t2103 * t2279 + (t2154 * t3078 + t2155 * t3077 + t2157 * t3076) * t2554, t2046 * t2334 + t2048 * t2335 + t2050 * t2336 + t2094 * t2277 + t2098 * t2278 + t2102 * t2279 + (t2156 * t3077 + t2158 * t3076 + t2164 * t3078) * t2554, 1; t2141, 0, 0, t2140, t2139, (t2533 * t2592 + t2536 * t2586 + t2539 * t2598) * t2527, (t2542 * t2592 + t2545 * t2586 + t2548 * t2598) * t2527, t2239 * t2277 + t2241 * t2278 + t2243 * t2279 + (t2239 * t2334 + t2241 * t2335 + t2243 * t2336) * t2528, (t2124 * t2359 + t2314 * t2823) * t2371 + (t2122 * t2358 + t2313 * t2826) * t2369 + (t2116 * t2360 + t2315 * t2820) * t2367, (t2125 * t2359 - t2314 * t2822) * t2371 + (t2123 * t2358 - t2313 * t2825) * t2369 + (t2126 * t2360 - t2315 * t2819) * t2367, t2073 * t2334 + t2074 * t2335 + t2075 * t2336 + t2179 * t2860 + t2181 * t2858 + t2183 * t2856, t2065 * t2334 + t2067 * t2335 + t2069 * t2336 + t2128 * t2277 + t2130 * t2278 + t2132 * t2279, -t2251 * t2860 - t2253 * t2858 - t2255 * t2856 + t2091 * t2334 + t2092 * t2335 + t2093 * t2336 + (t2179 * t3078 + t2181 * t3077 + t2183 * t3076) * t2554, -t2251 * t2859 - t2253 * t2857 - t2255 * t2855 + t2083 * t2334 + t2085 * t2335 + t2087 * t2336 + (t2173 * t3078 + t2175 * t3077 + t2177 * t3076) * t2554, (-t2251 * t3078 - t2253 * t3077 - t2255 * t3076) * t2554 + (t2251 * t2838 + t2253 * t2834 + t2255 * t2830) * t2527, t2053 * t2334 + t2055 * t2335 + t2057 * t2336 + t2097 * t2277 + t2101 * t2278 + t2105 * t2279 + (t2159 * t3078 + t2160 * t3077 + t2162 * t3076) * t2554, t2052 * t2334 + t2054 * t2335 + t2056 * t2336 + t2096 * t2277 + t2100 * t2278 + t2104 * t2279 + (t2161 * t3077 + t2163 * t3076 + t2165 * t3078) * t2554, 0; t2188, 0, 0, t2186, t2184, (t2533 * t2589 + t2536 * t2583 + t2539 * t2595) * t2527, (t2542 * t2589 + t2545 * t2583 + t2548 * t2595) * t2527, t2305 * t2277 + t2307 * t2278 + t2309 * t2279 + (t2305 * t2334 + t2307 * t2335 + t2309 * t2336) * t2528, (t2199 * t2359 + t2314 * t2790) * t2371 + (t2197 * t2358 + t2313 * t2794) * t2369 + (t2196 * t2360 + t2315 * t2786) * t2367, (t2200 * t2359 - t2314 * t2789) * t2371 + (t2198 * t2358 - t2313 * t2793) * t2369 + (t2201 * t2360 - t2315 * t2785) * t2367, t2109 * t2334 + t2110 * t2335 + t2111 * t2336 + t2268 * t2860 + t2269 * t2858 + t2270 * t2856, t2106 * t2334 + t2107 * t2335 + t2108 * t2336 + t2202 * t2277 + t2203 * t2278 + t2204 * t2279, -t2283 * t2860 - t2284 * t2858 - t2285 * t2856 + t2145 * t2334 + t2146 * t2335 + t2147 * t2336 + (t2268 * t3078 + t2269 * t3077 + t2270 * t3076) * t2554, -t2283 * t2859 - t2284 * t2857 - t2285 * t2855 + t2142 * t2334 + t2143 * t2335 + t2144 * t2336 + (t2265 * t3078 + t2266 * t3077 + t2267 * t3076) * t2554, (-t2283 * t3078 - t2284 * t3077 - t2285 * t3076) * t2554 + (t2283 * t2838 + t2284 * t2834 + t2285 * t2830) * t2527, t2059 * t2334 + t2061 * t2335 + t2063 * t2336 + t2149 * t2277 + t2151 * t2278 + t2153 * t2279 + (t2256 * t3078 + t2257 * t3077 + t2259 * t3076) * t2554, t2058 * t2334 + t2060 * t2335 + t2062 * t2336 + t2148 * t2277 + t2150 * t2278 + t2152 * t2279 + (t2258 * t3077 + t2260 * t3076 + t2261 * t3078) * t2554, 0; t2141, 0, 0, t2140, t2139, (t2533 * t2594 + t2536 * t2588 + t2539 * t2600) * t2527, (t2542 * t2594 + t2545 * t2588 + t2548 * t2600) * t2527, t2233 * t2274 + t2235 * t2275 + t2237 * t2276 + (t2233 * t2337 + t2235 * t2338 + t2237 * t2339) * t2528, (t2119 * t2362 + t2311 * t2833) * t2371 + (t2117 * t2361 + t2310 * t2837) * t2369 + (t2115 * t2363 + t2312 * t2829) * t2367, (t2120 * t2362 - t2311 * t2832) * t2371 + (t2118 * t2361 - t2310 * t2836) * t2369 + (t2121 * t2363 - t2312 * t2828) * t2367, t2070 * t2337 + t2071 * t2338 + t2072 * t2339 + t2178 * t2866 + t2180 * t2864 + t2182 * t2862, t2064 * t2337 + t2066 * t2338 + t2068 * t2339 + t2127 * t2274 + t2129 * t2275 + t2131 * t2276, -t2250 * t2866 - t2252 * t2864 - t2254 * t2862 + t2088 * t2337 + t2089 * t2338 + t2090 * t2339 + (t2178 * t3081 + t2180 * t3080 + t2182 * t3079) * t2554, -t2250 * t2865 - t2252 * t2863 - t2254 * t2861 + t2082 * t2337 + t2084 * t2338 + t2086 * t2339 + (t2172 * t3081 + t2174 * t3080 + t2176 * t3079) * t2554, (-t2250 * t3081 - t2252 * t3080 - t2254 * t3079) * t2554 + (t2250 * t2827 + t2252 * t2824 + t2254 * t2821) * t2527, t2047 * t2337 + t2049 * t2338 + t2051 * t2339 + t2095 * t2274 + t2099 * t2275 + t2103 * t2276 + (t2154 * t3081 + t2155 * t3080 + t2157 * t3079) * t2554, t2046 * t2337 + t2048 * t2338 + t2050 * t2339 + t2094 * t2274 + t2098 * t2275 + t2102 * t2276 + (t2156 * t3080 + t2158 * t3079 + t2164 * t3081) * t2554, 0; t2355 * t2370 + t2356 * t2372 + t2357 * t2368, 0, 0, (t2355 * t3057 + t2356 * t3052 + t2357 * t3062) * t2514, (t2355 * t2803 + t2356 * t2795 + t2357 * t2811) * t2909, (t2533 * t2621 + t2536 * t2620 + t2539 * t2619) * t2527, (t2542 * t2621 + t2545 * t2620 + t2548 * t2619) * t2527, t2239 * t2274 + t2241 * t2275 + t2243 * t2276 + (t2239 * t2337 + t2241 * t2338 + t2243 * t2339) * t2528, (t2312 * t3036 + t2116) * t2339 + (t2311 * t3043 + t2124) * t2338 + (t2310 * t3050 + t2122) * t2337, (-t2312 * t3035 + t2126) * t2339 + (-t2311 * t3042 + t2125) * t2338 + (-t2310 * t3049 + t2123) * t2337, t2073 * t2337 + t2074 * t2338 + t2075 * t2339 + t2179 * t2866 + t2181 * t2864 + t2183 * t2862, t2065 * t2337 + t2067 * t2338 + t2069 * t2339 + t2128 * t2274 + t2130 * t2275 + t2132 * t2276, -t2251 * t2866 - t2253 * t2864 - t2255 * t2862 + t2091 * t2337 + t2092 * t2338 + t2093 * t2339 + (t2179 * t3081 + t2181 * t3080 + t2183 * t3079) * t2554, -t2251 * t2865 - t2253 * t2863 - t2255 * t2861 + t2083 * t2337 + t2085 * t2338 + t2087 * t2339 + (t2173 * t3081 + t2175 * t3080 + t2177 * t3079) * t2554, (-t2251 * t3081 - t2253 * t3080 - t2255 * t3079) * t2554 + (t2251 * t2827 + t2253 * t2824 + t2255 * t2821) * t2527, t2053 * t2337 + t2055 * t2338 + t2057 * t2339 + t2097 * t2274 + t2101 * t2275 + t2105 * t2276 + (t2159 * t3081 + t2160 * t3080 + t2162 * t3079) * t2554, t2052 * t2337 + t2054 * t2338 + t2056 * t2339 + t2096 * t2274 + t2100 * t2275 + t2104 * t2276 + (t2161 * t3080 + t2163 * t3079 + t2165 * t3081) * t2554, 1; t2189, 0, 0, t2187, t2185, (t2533 * t2590 + t2536 * t2584 + t2539 * t2596) * t2527, (t2542 * t2590 + t2545 * t2584 + t2548 * t2596) * t2527, t2305 * t2274 + t2307 * t2275 + t2309 * t2276 + (t2305 * t2337 + t2307 * t2338 + t2309 * t2339) * t2528, (t2199 * t2362 + t2311 * t2790) * t2371 + (t2197 * t2361 + t2310 * t2794) * t2369 + (t2196 * t2363 + t2312 * t2786) * t2367, (t2200 * t2362 - t2311 * t2789) * t2371 + (t2198 * t2361 - t2310 * t2793) * t2369 + (t2201 * t2363 - t2312 * t2785) * t2367, t2109 * t2337 + t2110 * t2338 + t2111 * t2339 + t2268 * t2866 + t2269 * t2864 + t2270 * t2862, t2106 * t2337 + t2107 * t2338 + t2108 * t2339 + t2202 * t2274 + t2203 * t2275 + t2204 * t2276, -t2283 * t2866 - t2284 * t2864 - t2285 * t2862 + t2145 * t2337 + t2146 * t2338 + t2147 * t2339 + (t2268 * t3081 + t2269 * t3080 + t2270 * t3079) * t2554, -t2283 * t2865 - t2284 * t2863 - t2285 * t2861 + t2142 * t2337 + t2143 * t2338 + t2144 * t2339 + (t2265 * t3081 + t2266 * t3080 + t2267 * t3079) * t2554, (-t2283 * t3081 - t2284 * t3080 - t2285 * t3079) * t2554 + (t2283 * t2827 + t2284 * t2824 + t2285 * t2821) * t2527, t2059 * t2337 + t2061 * t2338 + t2063 * t2339 + t2149 * t2274 + t2151 * t2275 + t2153 * t2276 + (t2256 * t3081 + t2257 * t3080 + t2259 * t3079) * t2554, t2058 * t2337 + t2060 * t2338 + t2062 * t2339 + t2148 * t2274 + t2150 * t2275 + t2152 * t2276 + (t2258 * t3080 + t2260 * t3079 + t2261 * t3081) * t2554, 0; t2188, 0, 0, t2186, t2184, (t2533 * t2593 + t2536 * t2587 + t2539 * t2599) * t2527, (t2542 * t2593 + t2545 * t2587 + t2548 * t2599) * t2527, t2233 * t2325 + t2235 * t2326 + t2237 * t2327 + (t2233 * t2349 + t2235 * t2350 + t2237 * t2351) * t2528, (t2119 * t2386 + t2344 * t2833) * t2371 + (t2117 * t2385 + t2343 * t2837) * t2369 + (t2115 * t2387 + t2345 * t2829) * t2367, (t2120 * t2386 - t2344 * t2832) * t2371 + (t2118 * t2385 - t2343 * t2836) * t2369 + (t2121 * t2387 - t2345 * t2828) * t2367, t2070 * t2349 + t2071 * t2350 + t2072 * t2351 + t2178 * t2845 + t2180 * t2843 + t2182 * t2841, t2064 * t2349 + t2066 * t2350 + t2068 * t2351 + t2127 * t2325 + t2129 * t2326 + t2131 * t2327, -t2250 * t2845 - t2252 * t2843 - t2254 * t2841 + t2088 * t2349 + t2089 * t2350 + t2090 * t2351 + (t2178 * t3075 + t2180 * t3074 + t2182 * t3073) * t2980, -t2250 * t2844 - t2252 * t2842 - t2254 * t2840 + t2082 * t2349 + t2084 * t2350 + t2086 * t2351 + (t2172 * t3075 + t2174 * t3074 + t2176 * t3073) * t2980, (t2250 * t2810 + t2252 * t2802 + t2254 * t2818 + (-t2250 * t3075 - t2252 * t3074 - t2254 * t3073) * t2554) * t2527, t2047 * t2349 + t2049 * t2350 + t2051 * t2351 + t2095 * t2325 + t2099 * t2326 + t2103 * t2327 + (t2154 * t3075 + t2155 * t3074 + t2157 * t3073) * t2980, t2046 * t2349 + t2048 * t2350 + t2050 * t2351 + t2094 * t2325 + t2098 * t2326 + t2102 * t2327 + (t2156 * t3074 + t2158 * t3073 + t2164 * t3075) * t2980, 0; t2189, 0, 0, t2187, t2185, (t2533 * t2591 + t2536 * t2585 + t2539 * t2597) * t2527, (t2542 * t2591 + t2545 * t2585 + t2548 * t2597) * t2527, t2239 * t2325 + t2241 * t2326 + t2243 * t2327 + (t2239 * t2349 + t2241 * t2350 + t2243 * t2351) * t2528, (t2124 * t2386 + t2344 * t2823) * t2371 + (t2122 * t2385 + t2343 * t2826) * t2369 + (t2116 * t2387 + t2345 * t2820) * t2367, (t2125 * t2386 - t2344 * t2822) * t2371 + (t2123 * t2385 - t2343 * t2825) * t2369 + (t2126 * t2387 - t2345 * t2819) * t2367, t2073 * t2349 + t2074 * t2350 + t2075 * t2351 + t2179 * t2845 + t2181 * t2843 + t2183 * t2841, t2065 * t2349 + t2067 * t2350 + t2069 * t2351 + t2128 * t2325 + t2130 * t2326 + t2132 * t2327, -t2251 * t2845 - t2253 * t2843 - t2255 * t2841 + t2091 * t2349 + t2092 * t2350 + t2093 * t2351 + (t2179 * t3075 + t2181 * t3074 + t2183 * t3073) * t2980, -t2251 * t2844 - t2253 * t2842 - t2255 * t2840 + t2083 * t2349 + t2085 * t2350 + t2087 * t2351 + (t2173 * t3075 + t2175 * t3074 + t2177 * t3073) * t2980, (t2251 * t2810 + t2253 * t2802 + t2255 * t2818 + (-t2251 * t3075 - t2253 * t3074 - t2255 * t3073) * t2554) * t2527, t2053 * t2349 + t2055 * t2350 + t2057 * t2351 + t2097 * t2325 + t2101 * t2326 + t2105 * t2327 + (t2159 * t3075 + t2160 * t3074 + t2162 * t3073) * t2980, t2052 * t2349 + t2054 * t2350 + t2056 * t2351 + t2096 * t2325 + t2100 * t2326 + t2104 * t2327 + (t2161 * t3074 + t2163 * t3073 + t2165 * t3075) * t2980, 0; t2368 * t2381 + t2370 * t2379 + t2372 * t2380, 0, 0, (t2379 * t3057 + t2380 * t3052 + t2381 * t3062) * t2514, (t2379 * t2803 + t2380 * t2795 + t2381 * t2811) * t2909, (t2533 * t2617 + t2536 * t2616 + t2539 * t2618) * t2527, (t2542 * t2617 + t2545 * t2616 + t2548 * t2618) * t2527, t2305 * t2325 + t2307 * t2326 + t2309 * t2327 + (t2305 * t2349 + t2307 * t2350 + t2309 * t2351) * t2528, (t2344 * t3043 + t2199) * t2350 + (t2343 * t3050 + t2197) * t2349 + (t2345 * t3036 + t2196) * t2351, (-t2344 * t3042 + t2200) * t2350 + (-t2343 * t3049 + t2198) * t2349 + (-t2345 * t3035 + t2201) * t2351, t2109 * t2349 + t2110 * t2350 + t2111 * t2351 + t2268 * t2845 + t2269 * t2843 + t2270 * t2841, t2106 * t2349 + t2107 * t2350 + t2108 * t2351 + t2202 * t2325 + t2203 * t2326 + t2204 * t2327, -t2283 * t2845 - t2284 * t2843 - t2285 * t2841 + t2145 * t2349 + t2146 * t2350 + t2147 * t2351 + (t2268 * t3075 + t2269 * t3074 + t2270 * t3073) * t2980, -t2283 * t2844 - t2284 * t2842 - t2285 * t2840 + t2142 * t2349 + t2143 * t2350 + t2144 * t2351 + (t2265 * t3075 + t2266 * t3074 + t2267 * t3073) * t2980, (t2283 * t2810 + t2284 * t2802 + t2285 * t2818 + (-t2283 * t3075 - t2284 * t3074 - t2285 * t3073) * t2554) * t2527, t2059 * t2349 + t2061 * t2350 + t2063 * t2351 + t2149 * t2325 + t2151 * t2326 + t2153 * t2327 + (t2256 * t3075 + t2257 * t3074 + t2259 * t3073) * t2980, t2058 * t2349 + t2060 * t2350 + t2062 * t2351 + t2148 * t2325 + t2150 * t2326 + t2152 * t2327 + (t2258 * t3074 + t2260 * t3073 + t2261 * t3075) * t2980, 1;];
tau_reg  = t1;
