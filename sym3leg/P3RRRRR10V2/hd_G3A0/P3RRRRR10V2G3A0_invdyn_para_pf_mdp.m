% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G3A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRRRR10V2G3A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G3A0_invdyn_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 02:58:27
% EndTime: 2020-08-07 03:12:03
% DurationCPUTime: 861.90s
% Computational Cost: add. (11610252->2828), mult. (22840509->4277), div. (155610->38), fcn. (17471637->26), ass. (0->1597)
t6670 = cos(qJ(2,3));
t6681 = pkin(8) + pkin(7);
t6549 = t6681 * t6670;
t6661 = sin(qJ(2,3));
t7641 = pkin(2) * t6661;
t6465 = t6549 - t7641;
t6642 = sin(pkin(4));
t6800 = t6642 * t6465;
t6673 = cos(qJ(2,2));
t6550 = t6681 * t6673;
t6664 = sin(qJ(2,2));
t7639 = pkin(2) * t6664;
t6466 = t6550 - t7639;
t6799 = t6642 * t6466;
t6676 = cos(qJ(2,1));
t6551 = t6681 * t6676;
t6667 = sin(qJ(2,1));
t7637 = pkin(2) * t6667;
t6467 = t6551 - t7637;
t6798 = t6642 * t6467;
t6700 = 0.1e1 / pkin(3);
t6662 = sin(qJ(1,3));
t6671 = cos(qJ(1,3));
t6678 = xDP(3);
t6654 = legFrame(3,2);
t6576 = cos(t6654);
t6680 = xDP(1);
t6573 = sin(t6654);
t6679 = xDP(2);
t7478 = t6573 * t6679;
t6854 = -t6576 * t6680 + t7478;
t6381 = -t6662 * t6678 - t6671 * t6854;
t7466 = t6576 * t6679;
t6408 = t6573 * t6680 + t7466;
t6600 = pkin(1) * t6661;
t6502 = t6681 + t6600;
t6615 = pkin(1) * t6681;
t6508 = t6679 * t6615;
t6509 = t6680 * t6615;
t6660 = sin(qJ(3,3));
t6579 = t6660 * pkin(3);
t6517 = t6579 + pkin(6);
t6643 = cos(pkin(4));
t6622 = t6643 ^ 2;
t6628 = t6670 ^ 2;
t6669 = cos(qJ(3,3));
t6583 = t6669 * pkin(3);
t7745 = t6583 + pkin(2);
t6922 = t6680 * t7745;
t7482 = (t6643 + 0.1e1) * (t6643 - 0.1e1);
t7143 = t6681 * t7482;
t6955 = t7745 * t7143;
t6623 = pkin(2) + t6681;
t6624 = pkin(2) - t6681;
t7518 = (t6583 + t6623) * (t6583 + t6624);
t7158 = t6661 * t7518;
t7407 = t6643 * t6681;
t7375 = t6671 * t6678;
t7697 = t6662 * t6854 - t7375;
t7164 = t7697 * t7407;
t7421 = t6642 * t6681;
t7440 = t6642 * t6643;
t7451 = t6622 * t6681;
t7502 = t6517 * t6661;
t6682 = 0.2e1 * t6681;
t7399 = t6661 * t6682;
t6497 = pkin(1) + t7399;
t7512 = t6497 * t7745;
t7530 = t6408 * t7745;
t7536 = t7697 * t6643;
t7658 = t6622 - 0.1e1;
t7785 = 0.2e1 * t7745;
t6222 = ((-t6381 * t7518 + t7164 * t7785) * t6642 - 0.2e1 * t6408 * t6955) * t6628 + ((-t6381 * t7512 - t7158 * t7536) * t6642 + t6508 * t6576 + t6509 * t6573 + t7658 * t6408 * t7158 + ((-t6408 * t7440 - t6622 * t7697 - t7375) * t7745 + (-t6576 * t6922 + t7478 * t7745) * t6662) * t6517) * t6670 - ((t6408 * t7502 + t7697 * t7745) * t6643 + t6381 * t6502) * t7421 + (-t7502 * t7697 + t7530) * t7451 + (t7697 * t6681 * t6517 + (-t6573 * t6922 - t7466 * t7745) * pkin(1)) * t6661 - t6681 * t7530;
t7609 = t6669 * pkin(6);
t7642 = pkin(2) * t6660;
t6469 = t7609 - t7642;
t7413 = t6643 * t6669;
t7286 = pkin(1) * t7413;
t7495 = t7745 * t6642;
t6501 = pkin(1) * t7407;
t7506 = t6501 * t6669;
t7784 = t6661 * t7745;
t6797 = -t7286 * t7784 + (-t6469 * t7495 + t7506) * t6670;
t7365 = t6681 * t6661;
t6363 = (pkin(1) * t6660 * t7745 - t6469 * t7365) * t6642 + t6797;
t6354 = 0.1e1 / t6363;
t7578 = t6222 * t6354;
t6214 = t6700 * t7578;
t6207 = pkin(6) * t6214;
t6375 = t6670 * t6381;
t7400 = t6661 * t6670;
t7276 = pkin(2) * t7400;
t6824 = t6628 * t6681 - t7276;
t6402 = -t6824 + t6502;
t6597 = pkin(2) * t6670;
t7334 = t7365 + t6597;
t6460 = pkin(1) + t7334;
t6626 = t6669 ^ 2;
t6566 = t6628 - 0.2e1;
t6482 = t6661 * t6549;
t6584 = t6628 * pkin(2);
t7337 = t6482 + t6584;
t7746 = -pkin(2) + t7337;
t6734 = t6566 * t6583 + t7746;
t6494 = t7365 + pkin(1);
t6889 = t6494 * t6670 + t6584;
t7120 = t6642 * t7400;
t7438 = t6642 * t6661;
t7161 = t6408 * t7438;
t7535 = t7697 * t6661;
t7255 = pkin(3) * t7535;
t7439 = t6642 * t6660;
t7457 = (t6670 + 0.1e1) * (t6670 - 0.1e1);
t7630 = pkin(3) * t6626;
t7611 = t6660 * pkin(6);
t6516 = pkin(3) + t7611;
t7322 = 0.2e1 * t7630;
t7636 = pkin(2) * t6669;
t7698 = t6661 * (-t6516 + t7322 + t7636) - t6669 * t6549;
t6180 = ((-t6660 * t6734 + t7609) * t6408 + t7698 * t7697) * t6622 + (-(pkin(6) * t6408 * t6661 - t6734 * t7697) * t7439 + (t6375 + 0.2e1 * t7161) * t7630 + ((-pkin(6) * t7697 - t6408 * t6465) * t6642 + t6381 * t6460) * t6669 - pkin(3) * t7161) * t6643 + (pkin(6) * t7535 + (-t6402 * t6642 - t6583 * t7120) * t6381 + (t6583 * t7457 + t6889) * t6408) * t6660 - t6626 * t7255 - t6408 * t7609 + t7255;
t6384 = (t6549 - t7784) * t7286;
t6528 = t6597 + pkin(1);
t6351 = t6384 + t6642 * ((pkin(2) * t6460 + t6528 * t6583) * t6660 - (t6583 * t6670 + t7334) * t7609);
t6163 = t6180 / t6351;
t7221 = t6681 * t6163;
t7353 = -t7221 + t6207;
t7793 = t6661 * t7353;
t6665 = sin(qJ(1,2));
t6674 = cos(qJ(1,2));
t6655 = legFrame(2,2);
t6577 = cos(t6655);
t6574 = sin(t6655);
t7474 = t6574 * t6679;
t6853 = -t6577 * t6680 + t7474;
t6382 = -t6665 * t6678 - t6674 * t6853;
t7462 = t6577 * t6679;
t6409 = t6574 * t6680 + t7462;
t6601 = pkin(1) * t6664;
t6503 = t6681 + t6601;
t6663 = sin(qJ(3,2));
t6580 = t6663 * pkin(3);
t6520 = t6580 + pkin(6);
t6632 = t6673 ^ 2;
t6672 = cos(qJ(3,2));
t6586 = t6672 * pkin(3);
t7744 = t6586 + pkin(2);
t6921 = t6680 * t7744;
t6954 = t7744 * t7143;
t7517 = (t6586 + t6623) * (t6586 + t6624);
t7157 = t6664 * t7517;
t7371 = t6674 * t6678;
t7695 = t6665 * t6853 - t7371;
t7163 = t7695 * t7407;
t7500 = t6520 * t6664;
t7390 = t6664 * t6682;
t6498 = pkin(1) + t7390;
t7510 = t6498 * t7744;
t7529 = t6409 * t7744;
t7534 = t7695 * t6643;
t7786 = 0.2e1 * t7744;
t6223 = ((-t6382 * t7517 + t7163 * t7786) * t6642 - 0.2e1 * t6409 * t6954) * t6632 + ((-t6382 * t7510 - t7157 * t7534) * t6642 + t6508 * t6577 + t6509 * t6574 + t7658 * t6409 * t7157 + ((-t6409 * t7440 - t6622 * t7695 - t7371) * t7744 + (-t6577 * t6921 + t7474 * t7744) * t6665) * t6520) * t6673 - ((t6409 * t7500 + t7695 * t7744) * t6643 + t6382 * t6503) * t7421 + (-t7500 * t7695 + t7529) * t7451 + (t7695 * t6681 * t6520 + (-t6574 * t6921 - t7462 * t7744) * pkin(1)) * t6664 - t6681 * t7529;
t7608 = t6672 * pkin(6);
t7640 = pkin(2) * t6663;
t6470 = t7608 - t7640;
t7411 = t6643 * t6672;
t7285 = pkin(1) * t7411;
t7492 = t7744 * t6642;
t7505 = t6501 * t6672;
t7783 = t6664 * t7744;
t6796 = -t7285 * t7783 + (-t6470 * t7492 + t7505) * t6673;
t7364 = t6681 * t6664;
t6364 = (pkin(1) * t6663 * t7744 - t6470 * t7364) * t6642 + t6796;
t6356 = 0.1e1 / t6364;
t7577 = t6223 * t6356;
t6216 = t6700 * t7577;
t6208 = pkin(6) * t6216;
t6376 = t6673 * t6382;
t7391 = t6664 * t6673;
t7275 = pkin(2) * t7391;
t6823 = t6632 * t6681 - t7275;
t6403 = -t6823 + t6503;
t6598 = pkin(2) * t6673;
t7333 = t7364 + t6598;
t6461 = pkin(1) + t7333;
t6630 = t6672 ^ 2;
t6567 = t6632 - 0.2e1;
t6483 = t6664 * t6550;
t6587 = t6632 * pkin(2);
t7336 = t6483 + t6587;
t7747 = -pkin(2) + t7336;
t6733 = t6567 * t6586 + t7747;
t6495 = t7364 + pkin(1);
t6888 = t6495 * t6673 + t6587;
t7116 = t6642 * t7391;
t7435 = t6642 * t6664;
t7160 = t6409 * t7435;
t7533 = t7695 * t6664;
t7252 = pkin(3) * t7533;
t7436 = t6642 * t6663;
t7456 = (t6673 + 0.1e1) * (t6673 - 0.1e1);
t7629 = pkin(3) * t6630;
t7610 = t6663 * pkin(6);
t6519 = pkin(3) + t7610;
t7321 = 0.2e1 * t7629;
t7635 = pkin(2) * t6672;
t7696 = t6664 * (-t6519 + t7321 + t7635) - t6672 * t6550;
t6181 = ((-t6663 * t6733 + t7608) * t6409 + t7696 * t7695) * t6622 + (-(pkin(6) * t6409 * t6664 - t6733 * t7695) * t7436 + (t6376 + 0.2e1 * t7160) * t7629 + ((-pkin(6) * t7695 - t6409 * t6466) * t6642 + t6382 * t6461) * t6672 - pkin(3) * t7160) * t6643 + (pkin(6) * t7533 + (-t6403 * t6642 - t6586 * t7116) * t6382 + (t6586 * t7456 + t6888) * t6409) * t6663 - t6630 * t7252 - t6409 * t7608 + t7252;
t6385 = (t6550 - t7783) * t7285;
t6529 = t6598 + pkin(1);
t6352 = t6385 + ((pkin(2) * t6461 + t6529 * t6586) * t6663 - (t6586 * t6673 + t7333) * t7608) * t6642;
t6165 = t6181 / t6352;
t7214 = t6681 * t6165;
t7352 = -t7214 + t6208;
t7792 = t6664 * t7352;
t6668 = sin(qJ(1,1));
t6677 = cos(qJ(1,1));
t6656 = legFrame(1,2);
t6578 = cos(t6656);
t6575 = sin(t6656);
t7470 = t6575 * t6679;
t6852 = -t6578 * t6680 + t7470;
t6383 = -t6668 * t6678 - t6677 * t6852;
t7458 = t6578 * t6679;
t6410 = t6575 * t6680 + t7458;
t6602 = pkin(1) * t6667;
t6504 = t6681 + t6602;
t6666 = sin(qJ(3,1));
t6581 = t6666 * pkin(3);
t6523 = t6581 + pkin(6);
t6636 = t6676 ^ 2;
t6675 = cos(qJ(3,1));
t6589 = t6675 * pkin(3);
t7743 = t6589 + pkin(2);
t6920 = t6680 * t7743;
t6953 = t7743 * t7143;
t7516 = (t6589 + t6623) * (t6589 + t6624);
t7156 = t6667 * t7516;
t7367 = t6677 * t6678;
t7693 = t6668 * t6852 - t7367;
t7162 = t7693 * t7407;
t7498 = t6523 * t6667;
t7381 = t6667 * t6682;
t6499 = pkin(1) + t7381;
t7508 = t6499 * t7743;
t7528 = t6410 * t7743;
t7532 = t7693 * t6643;
t7787 = 0.2e1 * t7743;
t6224 = ((-t6383 * t7516 + t7162 * t7787) * t6642 - 0.2e1 * t6410 * t6953) * t6636 + ((-t6383 * t7508 - t7156 * t7532) * t6642 + t6508 * t6578 + t6509 * t6575 + t7658 * t6410 * t7156 + ((-t6410 * t7440 - t6622 * t7693 - t7367) * t7743 + (-t6578 * t6920 + t7470 * t7743) * t6668) * t6523) * t6676 - ((t6410 * t7498 + t7693 * t7743) * t6643 + t6383 * t6504) * t7421 + (-t7498 * t7693 + t7528) * t7451 + (t7693 * t6681 * t6523 + (-t6575 * t6920 - t7458 * t7743) * pkin(1)) * t6667 - t6681 * t7528;
t7607 = t6675 * pkin(6);
t7638 = pkin(2) * t6666;
t6471 = t7607 - t7638;
t7409 = t6643 * t6675;
t7284 = pkin(1) * t7409;
t7489 = t7743 * t6642;
t7504 = t6501 * t6675;
t7782 = t6667 * t7743;
t6795 = -t7284 * t7782 + (-t6471 * t7489 + t7504) * t6676;
t7363 = t6681 * t6667;
t6365 = (pkin(1) * t6666 * t7743 - t6471 * t7363) * t6642 + t6795;
t6358 = 0.1e1 / t6365;
t7576 = t6224 * t6358;
t6218 = t6700 * t7576;
t6209 = pkin(6) * t6218;
t6377 = t6676 * t6383;
t7382 = t6667 * t6676;
t7274 = pkin(2) * t7382;
t6822 = t6636 * t6681 - t7274;
t6404 = -t6822 + t6504;
t6599 = pkin(2) * t6676;
t7332 = t7363 + t6599;
t6462 = pkin(1) + t7332;
t6634 = t6675 ^ 2;
t6568 = t6636 - 0.2e1;
t6484 = t6667 * t6551;
t6590 = t6636 * pkin(2);
t7335 = t6484 + t6590;
t7748 = -pkin(2) + t7335;
t6732 = t6568 * t6589 + t7748;
t6496 = t7363 + pkin(1);
t6887 = t6496 * t6676 + t6590;
t7112 = t6642 * t7382;
t7432 = t6642 * t6667;
t7159 = t6410 * t7432;
t7531 = t7693 * t6667;
t7249 = pkin(3) * t7531;
t7433 = t6642 * t6666;
t7455 = (t6676 + 0.1e1) * (t6676 - 0.1e1);
t7628 = pkin(3) * t6634;
t6522 = pkin(6) * t6666 + pkin(3);
t7320 = 0.2e1 * t7628;
t7634 = pkin(2) * t6675;
t7694 = t6667 * (-t6522 + t7320 + t7634) - t6675 * t6551;
t6182 = ((-t6666 * t6732 + t7607) * t6410 + t7694 * t7693) * t6622 + (-(pkin(6) * t6410 * t6667 - t6732 * t7693) * t7433 + (t6377 + 0.2e1 * t7159) * t7628 + ((-pkin(6) * t7693 - t6410 * t6467) * t6642 + t6462 * t6383) * t6675 - pkin(3) * t7159) * t6643 + (pkin(6) * t7531 + (-t6404 * t6642 - t6589 * t7112) * t6383 + (t6589 * t7455 + t6887) * t6410) * t6666 - t6634 * t7249 - t6410 * t7607 + t7249;
t6386 = (t6551 - t7782) * t7284;
t6530 = t6599 + pkin(1);
t6353 = t6386 + ((pkin(2) * t6462 + t6530 * t6589) * t6666 - (t6589 * t6676 + t7332) * t7607) * t6642;
t6167 = t6182 / t6353;
t7208 = t6681 * t6167;
t7351 = -t7208 + t6209;
t7791 = t6667 * t7351;
t7419 = t6643 * t6660;
t6731 = -pkin(3) * t7419 + t6800;
t7273 = pkin(3) * t7439;
t6279 = -(t6375 + (t6408 * t6642 + t7536) * t6661) * t7630 + (t7697 * t7273 + (-pkin(2) * t6381 + t7164) * t6670 + (-pkin(2) * t7536 - t6381 * t6681) * t6661 + t6731 * t6408) * t6669 - (t6408 * t6643 - t6642 * t7697) * t7642;
t6451 = pkin(1) * t6579 - pkin(6) * t7365;
t6518 = t6579 - pkin(6);
t6393 = t6518 * t6597 + t6451;
t7645 = pkin(1) * t6643;
t6426 = t6465 * t7645;
t6411 = t6460 * t7642;
t7418 = t6643 * t6661;
t7289 = pkin(1) * t7418;
t7429 = t6642 * t6670;
t6925 = t6642 * t6411 - (pkin(6) * t7429 + t7289) * t7630;
t6334 = (t6393 * t6642 + t6426) * t6669 + t6925;
t6329 = 0.1e1 / t6334;
t7569 = t6279 * t6329;
t7181 = t6670 * t7569;
t6980 = t6642 * t7181;
t6093 = -t6214 + t6980;
t6390 = -pkin(6) * t7334 + t6528 * t6579;
t6325 = 0.1e1 / ((t6390 * t6642 + t6426) * t6669 + t6925);
t7180 = t6681 * t7569;
t6952 = t6642 * t7180;
t6869 = t6661 * t6952;
t6249 = t6643 * t7569;
t6082 = t6249 + t6163;
t7584 = t6082 * t6660;
t6006 = (t6626 * t6869 + (pkin(3) * t6980 + t6681 * t7584 - t7578) * t6669 + pkin(2) * t6093) * t6325 * t7578;
t6659 = xDDP(1);
t7377 = t6670 * t6671;
t7401 = t6661 * t6662;
t6414 = -t6643 * t7401 + t7377;
t6570 = t6643 * pkin(2);
t7396 = t6662 * t6681;
t7109 = t6643 * t7396;
t7404 = t6660 * t6662;
t7270 = pkin(3) * t7404;
t7374 = t6671 * t6681;
t6740 = (-t6570 * t6662 + t7374) * t6661 + (pkin(2) * t6671 + t7109) * t6670 + t6642 * t7270;
t7142 = t6573 * t7438;
t7437 = t6642 * t6662;
t6312 = -(t6414 * t6576 + t7142) * t7630 + (t6573 * t6731 - t6576 * t6740) * t6669 - (t6573 * t6643 + t6576 * t7437) * t7642;
t7551 = t6312 * t6329;
t6297 = t6659 * t7551;
t6658 = xDDP(2);
t7136 = t6576 * t7438;
t6315 = (t6414 * t6573 - t7136) * t7630 + (t6573 * t6740 + t6576 * t6731) * t6669 + (t6573 * t7437 - t6576 * t6643) * t7642;
t7548 = t6315 * t6329;
t6300 = t6658 * t7548;
t6657 = xDDP(3);
t6444 = -pkin(2) * t6662 + t6643 * t7374;
t7376 = t6671 * t6661;
t7110 = t6643 * t7376;
t7428 = t6642 * t6671;
t7123 = t6660 * t7428;
t7397 = t6662 * t6670;
t7412 = t6643 * t6671;
t6360 = (t7110 + t7397) * t7630 + (-pkin(3) * t7123 - t6444 * t6670 + (pkin(2) * t7412 + t7396) * t6661) * t6669 - pkin(2) * t7123;
t7542 = t6329 * t6360;
t6309 = t6657 * t7542;
t7223 = t6660 * t6163;
t6123 = pkin(3) * t7223;
t6148 = pkin(2) * t6163;
t6192 = t6681 * t6214;
t6689 = pkin(6) / 0.2e1;
t6511 = t6579 + t6689;
t7568 = t6279 * t6661;
t7182 = t6329 * t7568;
t6981 = t6642 * t7182;
t6916 = -0.2e1 * t6981;
t6240 = t6511 * t6916;
t6330 = 0.1e1 / t6334 ^ 2;
t6505 = pkin(1) * t7365;
t6641 = t6681 ^ 2;
t6702 = pkin(2) ^ 2;
t6556 = t6641 + t6702;
t6690 = -0.3e1 / 0.2e1 * pkin(2);
t6557 = pkin(3) * t7611;
t6699 = pkin(3) ^ 2;
t7331 = t6557 + t6699;
t7450 = t6623 * t6624;
t6836 = t6628 * t7450 + t7331;
t7222 = t6661 * t6163;
t7008 = t6660 * t7222;
t6904 = pkin(2) * t7008;
t7204 = t6681 * t7578;
t6997 = t6660 * t7204;
t7033 = pkin(2) * t6482;
t7224 = t6643 * t6163;
t6625 = t6669 * t6626;
t7449 = t6625 * t6699;
t7485 = t6566 * t6622;
t7654 = t6628 - 0.1e1;
t7233 = (t7224 + (t7654 - t7485) * t7569) * t7449;
t6688 = pkin(6) / 0.3e1;
t7253 = (t6579 + t6688) * t7641;
t7295 = 0.2e1 * t7421;
t7511 = t6497 * t6670;
t6039 = t6660 * t7221 - t7578;
t7590 = t6039 * t6670;
t7643 = pkin(2) * t6642;
t7663 = -0.3e1 * t6642;
t7668 = -0.2e1 * t6622;
t7239 = (t7233 + (t6163 * t6556 - t6997) * t7413 + (-t6904 + t7590) * t7643 + ((t6240 + 0.2e1 * t6148) * t6643 * t6626 + (-(t6123 + t6192) * t6661 * t6626 + (-0.2e1 * t6904 + t7590) * t6669) * t6642) * pkin(3) + (((t6690 + t7337) * t7668 + 0.2e1 * t6584 + t7511 - pkin(2)) * t7630 + (-(-t6702 + t6836 + 0.2e1 * t7033) * t6622 + (t6511 * t6670 * t7295 + t7253 * t7663) * t6643 + pkin(2) * t7511 + t6505 + t6641 + t6836) * t6669 + pkin(2) * (-t6516 * t6622 + t6800 * t7419 + t6516)) * t7569) * t6330 * t6279;
t6761 = t6006 + t6297 + t6300 + t6309 - t7239;
t6827 = t6981 * t6579;
t7183 = t6642 * t7569;
t6982 = t6660 * t7183;
t7593 = (t6082 * t7449 + (-t6827 / 0.2e1 + t6082 * pkin(2)) * t7322 + (t6556 * t6082 + ((t6549 - 0.2e1 * t7641) * pkin(3) * t7183 - t7204) * t6660) * t6669 + pkin(2) * t6465 * t6982) * t6325;
t7017 = t6163 * t7593;
t5961 = t6761 - t7017;
t5955 = pkin(6) * t5961;
t6871 = t6214 * t7569;
t6099 = pkin(2) * t6871;
t6102 = 0.2e1 * t6871;
t6701 = 0.1e1 / pkin(3) ^ 2;
t6213 = t6222 ^ 2 / t6363 ^ 2 * t6701;
t6198 = pkin(7) * t6213;
t6261 = t6279 ^ 2 * t6330;
t6591 = g(3) * t6662;
t7467 = t6576 * t6671;
t7479 = t6573 * t6671;
t6237 = pkin(1) * t6261 + g(1) * t7467 - g(2) * t7479 - t6591;
t6454 = t6573 * g(1) + t6576 * g(2);
t7127 = t6628 * t6261;
t7667 = 0.2e1 * t6622;
t7657 = t7667 - 0.2e1;
t7293 = pkin(7) * t7657;
t7319 = -0.2e1 * t6570;
t5958 = pkin(1) * t5961;
t6594 = g(3) * t6671;
t7468 = t6576 * t6662;
t7480 = t6573 * t6662;
t6794 = g(1) * t7468 - g(2) * t7480 + t5958 + t6594;
t7196 = t6642 * t6261;
t5925 = pkin(6) * t7196 + t6794;
t7599 = t5925 * t6643;
t7749 = t7658 * pkin(7);
t7790 = -t6261 * (t7276 * t7657 + t7749) + (t7599 + (pkin(7) * t6102 - t6454) * t6642) * t6670 - 0.2e1 * (t6099 + t5955 / 0.2e1) * t7438 - t5961 * t7319 + t7293 * t7127 + t6237 * t6661 - t6198;
t7417 = t6643 * t6663;
t6730 = -pkin(3) * t7417 + t6799;
t7272 = pkin(3) * t7436;
t6280 = -(t6376 + (t6409 * t6642 + t7534) * t6664) * t7629 + (t7695 * t7272 + (-pkin(2) * t6382 + t7163) * t6673 + (-pkin(2) * t7534 - t6382 * t6681) * t6664 + t6730 * t6409) * t6672 - (t6409 * t6643 - t6642 * t7695) * t7640;
t6452 = pkin(1) * t6580 - pkin(6) * t7364;
t6521 = t6580 - pkin(6);
t6394 = t6521 * t6598 + t6452;
t6427 = t6466 * t7645;
t6412 = t6461 * t7640;
t7416 = t6643 * t6664;
t7288 = pkin(1) * t7416;
t7426 = t6642 * t6673;
t6924 = t6642 * t6412 - (pkin(6) * t7426 + t7288) * t7629;
t6335 = (t6394 * t6642 + t6427) * t6672 + t6924;
t6331 = 0.1e1 / t6335;
t7567 = t6280 * t6331;
t7175 = t6673 * t7567;
t6975 = t6642 * t7175;
t6094 = -t6216 + t6975;
t6391 = -pkin(6) * t7333 + t6529 * t6580;
t6326 = 0.1e1 / ((t6391 * t6642 + t6427) * t6672 + t6924);
t7174 = t6681 * t7567;
t6974 = t6642 * t7174;
t6865 = t6664 * t6974;
t6250 = t6643 * t7567;
t6084 = t6250 + t6165;
t7583 = t6084 * t6663;
t6007 = (t6630 * t6865 + (pkin(3) * t6975 + t6681 * t7583 - t7577) * t6672 + pkin(2) * t6094) * t6326 * t7577;
t7373 = t6673 * t6674;
t7392 = t6664 * t6665;
t6415 = -t6643 * t7392 + t7373;
t7387 = t6665 * t6681;
t7107 = t6643 * t7387;
t7395 = t6663 * t6665;
t7269 = pkin(3) * t7395;
t7370 = t6674 * t6681;
t6739 = (-t6570 * t6665 + t7370) * t6664 + (pkin(2) * t6674 + t7107) * t6673 + t6642 * t7269;
t7140 = t6574 * t7435;
t7434 = t6642 * t6665;
t6313 = -(t6415 * t6577 + t7140) * t7629 + (t6574 * t6730 - t6577 * t6739) * t6672 - (t6574 * t6643 + t6577 * t7434) * t7640;
t7550 = t6313 * t6331;
t6298 = t6659 * t7550;
t7134 = t6577 * t7435;
t6316 = (t6415 * t6574 - t7134) * t7629 + (t6574 * t6739 + t6577 * t6730) * t6672 + (t6574 * t7434 - t6577 * t6643) * t7640;
t7547 = t6316 * t6331;
t6301 = t6658 * t7547;
t6445 = -pkin(2) * t6665 + t6643 * t7370;
t7372 = t6674 * t6664;
t7108 = t6643 * t7372;
t7425 = t6642 * t6674;
t7119 = t6663 * t7425;
t7388 = t6665 * t6673;
t7410 = t6643 * t6674;
t6361 = (t7108 + t7388) * t7629 + (-pkin(3) * t7119 - t6445 * t6673 + (pkin(2) * t7410 + t7387) * t6664) * t6672 - pkin(2) * t7119;
t7539 = t6331 * t6361;
t6310 = t6657 * t7539;
t7216 = t6663 * t6165;
t6125 = pkin(3) * t7216;
t6153 = pkin(2) * t6165;
t6193 = t6681 * t6216;
t6513 = t6580 + t6689;
t7566 = t6280 * t6664;
t7176 = t6331 * t7566;
t6976 = t6642 * t7176;
t6914 = -0.2e1 * t6976;
t6241 = t6513 * t6914;
t6332 = 0.1e1 / t6335 ^ 2;
t6506 = pkin(1) * t7364;
t6558 = pkin(3) * t7610;
t7330 = t6558 + t6699;
t6835 = t6632 * t7450 + t7330;
t7215 = t6664 * t6165;
t7004 = t6663 * t7215;
t6903 = pkin(2) * t7004;
t7201 = t6681 * t7577;
t6994 = t6663 * t7201;
t7030 = pkin(2) * t6483;
t7217 = t6643 * t6165;
t6629 = t6672 * t6630;
t7447 = t6629 * t6699;
t7484 = t6567 * t6622;
t7651 = t6632 - 0.1e1;
t7232 = (t7217 + (t7651 - t7484) * t7567) * t7447;
t7250 = (t6580 + t6688) * t7639;
t7509 = t6498 * t6673;
t6040 = t6663 * t7214 - t7577;
t7589 = t6040 * t6673;
t7238 = (t7232 + (t6165 * t6556 - t6994) * t7411 + (-t6903 + t7589) * t7643 + ((t6241 + 0.2e1 * t6153) * t6643 * t6630 + (-(t6125 + t6193) * t6664 * t6630 + (-0.2e1 * t6903 + t7589) * t6672) * t6642) * pkin(3) + (((t6690 + t7336) * t7668 + 0.2e1 * t6587 + t7509 - pkin(2)) * t7629 + (-(-t6702 + t6835 + 0.2e1 * t7030) * t6622 + (t6513 * t6673 * t7295 + t7250 * t7663) * t6643 + pkin(2) * t7509 + t6506 + t6641 + t6835) * t6672 + pkin(2) * (-t6519 * t6622 + t6799 * t7417 + t6519)) * t7567) * t6332 * t6280;
t6760 = t6007 + t6298 + t6301 + t6310 - t7238;
t6826 = t6976 * t6580;
t7177 = t6642 * t7567;
t6977 = t6663 * t7177;
t7592 = (t6084 * t7447 + (-t6826 / 0.2e1 + t6084 * pkin(2)) * t7321 + (t6556 * t6084 + ((t6550 - 0.2e1 * t7639) * pkin(3) * t7177 - t7201) * t6663) * t6672 + pkin(2) * t6466 * t6977) * t6326;
t7016 = t6165 * t7592;
t5962 = t6760 - t7016;
t5956 = pkin(6) * t5962;
t6867 = t6216 * t7567;
t6101 = pkin(2) * t6867;
t6103 = 0.2e1 * t6867;
t6215 = t6223 ^ 2 / t6364 ^ 2 * t6701;
t6201 = pkin(7) * t6215;
t6262 = t6280 ^ 2 * t6332;
t6592 = g(3) * t6665;
t7463 = t6577 * t6674;
t7475 = t6574 * t6674;
t6238 = pkin(1) * t6262 + g(1) * t7463 - g(2) * t7475 - t6592;
t6455 = t6574 * g(1) + t6577 * g(2);
t7126 = t6632 * t6262;
t5959 = pkin(1) * t5962;
t6595 = g(3) * t6674;
t7464 = t6577 * t6665;
t7476 = t6574 * t6665;
t6793 = g(1) * t7464 - g(2) * t7476 + t5959 + t6595;
t7192 = t6642 * t6262;
t5926 = pkin(6) * t7192 + t6793;
t7598 = t5926 * t6643;
t7789 = -t6262 * (t7275 * t7657 + t7749) + (t7598 + (pkin(7) * t6103 - t6455) * t6642) * t6673 - 0.2e1 * (t6101 + t5956 / 0.2e1) * t7435 - t5962 * t7319 + t7293 * t7126 + t6238 * t6664 - t6201;
t7415 = t6643 * t6666;
t6729 = -pkin(3) * t7415 + t6798;
t7271 = pkin(3) * t7433;
t6281 = -(t6377 + (t6410 * t6642 + t7532) * t6667) * t7628 + (t7693 * t7271 + (-pkin(2) * t6383 + t7162) * t6676 + (-pkin(2) * t7532 - t6383 * t6681) * t6667 + t6729 * t6410) * t6675 - (t6410 * t6643 - t6642 * t7693) * t7638;
t6453 = pkin(1) * t6581 - pkin(6) * t7363;
t6524 = t6581 - pkin(6);
t6395 = t6524 * t6599 + t6453;
t6428 = t6467 * t7645;
t6413 = t6462 * t7638;
t7414 = t6643 * t6667;
t7287 = pkin(1) * t7414;
t7423 = t6642 * t6676;
t6923 = t6642 * t6413 - (pkin(6) * t7423 + t7287) * t7628;
t6333 = (t6395 * t6642 + t6428) * t6675 + t6923;
t6327 = 0.1e1 / t6333;
t7565 = t6281 * t6327;
t7169 = t6676 * t7565;
t6969 = t6642 * t7169;
t6095 = -t6218 + t6969;
t6392 = -pkin(6) * t7332 + t6530 * t6581;
t6324 = 0.1e1 / ((t6392 * t6642 + t6428) * t6675 + t6923);
t7168 = t6681 * t7565;
t6968 = t6642 * t7168;
t6861 = t6667 * t6968;
t6251 = t6643 * t7565;
t6086 = t6251 + t6167;
t7582 = t6086 * t6666;
t6008 = (t6634 * t6861 + (pkin(3) * t6969 + t6681 * t7582 - t7576) * t6675 + pkin(2) * t6095) * t6324 * t7576;
t7369 = t6676 * t6677;
t7383 = t6667 * t6668;
t6416 = -t6643 * t7383 + t7369;
t7378 = t6668 * t6681;
t7105 = t6643 * t7378;
t7386 = t6666 * t6668;
t7268 = pkin(3) * t7386;
t7366 = t6677 * t6681;
t6738 = (-t6570 * t6668 + t7366) * t6667 + (pkin(2) * t6677 + t7105) * t6676 + t6642 * t7268;
t7138 = t6575 * t7432;
t7431 = t6642 * t6668;
t6314 = -(t6416 * t6578 + t7138) * t7628 + (t6575 * t6729 - t6578 * t6738) * t6675 - (t6575 * t6643 + t6578 * t7431) * t7638;
t7549 = t6314 * t6327;
t6299 = t6659 * t7549;
t7132 = t6578 * t7432;
t6317 = (t6416 * t6575 - t7132) * t7628 + (t6575 * t6738 + t6578 * t6729) * t6675 + (t6575 * t7431 - t6578 * t6643) * t7638;
t7546 = t6317 * t6327;
t6302 = t6658 * t7546;
t6446 = -pkin(2) * t6668 + t6643 * t7366;
t7368 = t6677 * t6667;
t7106 = t6643 * t7368;
t7422 = t6642 * t6677;
t7115 = t6666 * t7422;
t7379 = t6668 * t6676;
t7408 = t6643 * t6677;
t6362 = (t7106 + t7379) * t7628 + (-pkin(3) * t7115 - t6446 * t6676 + (pkin(2) * t7408 + t7378) * t6667) * t6675 - pkin(2) * t7115;
t7545 = t6327 * t6362;
t6311 = t6657 * t7545;
t7210 = t6666 * t6167;
t6127 = pkin(3) * t7210;
t6157 = pkin(2) * t6167;
t6194 = t6681 * t6218;
t6515 = t6581 + t6689;
t7564 = t6281 * t6667;
t7170 = t6327 * t7564;
t6970 = t6642 * t7170;
t6912 = -0.2e1 * t6970;
t6242 = t6515 * t6912;
t6328 = 0.1e1 / t6333 ^ 2;
t6507 = pkin(1) * t7363;
t6559 = pkin(6) * t6581;
t7329 = t6559 + t6699;
t6834 = t6636 * t7450 + t7329;
t7209 = t6667 * t6167;
t7000 = t6666 * t7209;
t6902 = pkin(2) * t7000;
t7198 = t6681 * t7576;
t6991 = t6666 * t7198;
t7027 = pkin(2) * t6484;
t7111 = t6643 * t6167;
t6633 = t6675 * t6634;
t7445 = t6633 * t6699;
t7483 = t6568 * t6622;
t7648 = t6636 - 0.1e1;
t7231 = (t7111 + (t7648 - t7483) * t7565) * t7445;
t7247 = (t6581 + t6688) * t7637;
t7507 = t6499 * t6676;
t6041 = t6666 * t7208 - t7576;
t7588 = t6041 * t6676;
t7237 = (t7231 + (t6167 * t6556 - t6991) * t7409 + (-t6902 + t7588) * t7643 + ((t6242 + 0.2e1 * t6157) * t6643 * t6634 + (-(t6127 + t6194) * t6667 * t6634 + (-0.2e1 * t6902 + t7588) * t6675) * t6642) * pkin(3) + (((t6690 + t7335) * t7668 + 0.2e1 * t6590 + t7507 - pkin(2)) * t7628 + (-(-t6702 + t6834 + 0.2e1 * t7027) * t6622 + (t6515 * t6676 * t7295 + t7247 * t7663) * t6643 + pkin(2) * t7507 + t6507 + t6641 + t6834) * t6675 + pkin(2) * (-t6522 * t6622 + t6798 * t7415 + t6522)) * t7565) * t6328 * t6281;
t6759 = t6008 + t6299 + t6302 + t6311 - t7237;
t6825 = t6970 * t6581;
t7171 = t6642 * t7565;
t6971 = t6666 * t7171;
t7591 = (t6086 * t7445 + (-t6825 / 0.2e1 + t6086 * pkin(2)) * t7320 + (t6556 * t6086 + ((t6551 - 0.2e1 * t7637) * pkin(3) * t7171 - t7198) * t6666) * t6675 + pkin(2) * t6467 * t6971) * t6324;
t7015 = t6167 * t7591;
t5963 = t6759 - t7015;
t5950 = t5963 * pkin(6);
t6863 = t6218 * t7565;
t6100 = pkin(2) * t6863;
t6104 = 0.2e1 * t6863;
t6217 = t6224 ^ 2 / t6365 ^ 2 * t6701;
t6202 = pkin(7) * t6217;
t6263 = t6281 ^ 2 * t6328;
t6593 = g(3) * t6668;
t7459 = t6578 * t6677;
t7471 = t6575 * t6677;
t6239 = pkin(1) * t6263 + g(1) * t7459 - g(2) * t7471 - t6593;
t6456 = t6575 * g(1) + t6578 * g(2);
t7125 = t6636 * t6263;
t5960 = pkin(1) * t5963;
t6596 = g(3) * t6677;
t7460 = t6578 * t6668;
t7472 = t6575 * t6668;
t6792 = g(1) * t7460 - g(2) * t7472 + t5960 + t6596;
t7188 = t6642 * t6263;
t5927 = pkin(6) * t7188 + t6792;
t7597 = t5927 * t6643;
t7788 = -t6263 * (t7274 * t7657 + t7749) + (t7597 + (pkin(7) * t6104 - t6456) * t6642) * t6676 - 0.2e1 * (t6100 + t5950 / 0.2e1) * t7432 - t5963 * t7319 + t7293 * t7125 + t6239 * t6667 - t6202;
t6537 = t6573 * g(2);
t7614 = t6576 * g(1);
t6457 = -t6537 + t7614;
t6417 = t6457 * t6662;
t7781 = t6417 + t6594;
t6539 = t6574 * g(2);
t7613 = t6577 * g(1);
t6458 = -t6539 + t7613;
t6420 = t6458 * t6665;
t7780 = t6420 + t6595;
t6541 = t6575 * g(2);
t7612 = t6578 * g(1);
t6459 = -t6541 + t7612;
t6423 = t6459 * t6668;
t7779 = t6423 + t6596;
t6683 = pkin(8) * pkin(7);
t6696 = pkin(8) ^ 2;
t6697 = pkin(7) ^ 2;
t7327 = t6696 + t6697;
t7081 = 0.2e1 * t6683 + t7327;
t6212 = pkin(1) * t6218;
t6206 = pkin(7) * t6218;
t6155 = pkin(6) * t6167;
t6204 = pkin(8) * t6218;
t7348 = t6155 + t6204;
t6931 = t6127 + t6206 + t7348;
t6846 = t6931 * t6667;
t7778 = t6846 + t6212;
t6211 = pkin(1) * t6216;
t6205 = pkin(7) * t6216;
t6151 = pkin(6) * t6165;
t6203 = pkin(8) * t6216;
t7349 = t6151 + t6203;
t6932 = t6125 + t6205 + t7349;
t6847 = t6932 * t6664;
t7777 = t6847 + t6211;
t6210 = pkin(1) * t6214;
t6200 = pkin(7) * t6214;
t6146 = pkin(6) * t6163;
t6199 = pkin(8) * t6214;
t7350 = t6146 + t6199;
t6933 = t6123 + t6200 + t7350;
t6848 = t6933 * t6661;
t7776 = t6848 + t6210;
t7775 = t6459 * t6677 - t6593;
t7774 = t6458 * t6674 - t6592;
t7773 = t6457 * t6671 - t6591;
t7406 = t6658 * t6700;
t6387 = t6615 - t7158;
t7297 = -0.2e1 * t7482;
t6910 = t7745 * t6628 * t7297;
t7152 = t7745 * t7480;
t6948 = t6517 * t7152;
t7141 = t6573 * t7401;
t6961 = t6517 * t7141;
t6964 = t6662 * t7158;
t7155 = t6671 * t7512;
t7167 = (t6671 * t7518 + t7109 * t7785) * t6628 * t6642;
t7469 = t6576 * t6661;
t7496 = t7745 * t6576;
t7563 = (t6573 * t7167 + (((-t6517 * t7496 - t6573 * t6964) * t6643 + t6573 * t7155) * t6642 + (t6576 * t7158 - t6948) * t6622 + t6948 + t6576 * t6387) * t6670 - t6502 * t7496 + (t6576 * t6910 + ((-t6517 * t7469 - t7152) * t6643 + t6502 * t7479) * t6642 + (-t6961 + t7496) * t6622 + t6961) * t6681) * t6354;
t6264 = t7406 * t7563;
t7405 = t6659 * t6700;
t7151 = t7745 * t7468;
t6947 = t6517 * t7151;
t7135 = t6576 * t7401;
t6960 = t6517 * t7135;
t7481 = t6573 * t6661;
t7497 = t7745 * t6573;
t7560 = (-t6576 * t7167 + (((-t6517 * t7497 + t6576 * t6964) * t6643 - t6576 * t7155) * t6642 + (t6573 * t7158 + t6947) * t6622 - t6947 + t6573 * t6387) * t6670 - t6502 * t7497 + (t6573 * t6910 - ((t6517 * t7481 - t7151) * t6643 + t6502 * t7467) * t6642 + (t6960 + t7497) * t6622 - t6960) * t6681) * t6354;
t6267 = t7405 * t7560;
t7420 = t6642 * t6700;
t7124 = t6657 * t7420;
t6450 = -pkin(1) * t6570 - pkin(6) * t7421;
t6582 = t6626 * t6699;
t7283 = t6494 * t7642;
t7318 = pkin(6) * t7630;
t6782 = -t7289 * t7630 + (t7506 + (t6518 * t7636 + t6660 * t6702 - t7318) * t6642) * t6670 + t6642 * t7283;
t7077 = t6681 * t7319;
t7130 = t6661 * t7450;
t7279 = pkin(2) * t7418;
t7398 = t6662 * t6497;
t7503 = t6517 * t6642;
t7557 = ((t6671 * t7077 - 0.2e1 * t6444 * t6583 + (t6582 + t7450) * t6662) * t6628 + (t7110 * t6582 + ((0.2e1 * t7279 - t7503) * t6671 + t7398) * t6583 + (-pkin(2) * t7503 + t6643 * t7130) * t6671 + pkin(2) * t7398) * t6670 + t6681 * (t6662 * t6502 + (pkin(3) * t7413 - t6517 * t7438 + t6570) * t6671)) / ((pkin(1) * t7273 + t6450 * t6661) * t6669 + t6782);
t6288 = t7124 * t7557;
t6336 = 0.1e1 / ((t6451 * t6669 + t7283) * t6642 + t6797);
t6144 = pkin(8) * t6163;
t6145 = pkin(7) * t6163;
t7344 = t6207 - t6145;
t6033 = t6144 - t7344;
t6160 = pkin(1) * t6163;
t6616 = t6699 + t6702;
t6833 = t6210 * t7419;
t6842 = t6249 * t6502 + t6033;
t6639 = -0.2e1 * t6683;
t7078 = t6702 - t7327;
t6855 = t6639 + t6699 + t7078;
t6983 = t7482 * t7569;
t6999 = t6642 * t6214;
t7046 = t6642 * t6501;
t7184 = t6628 * t7569;
t7206 = t6626 * t7578;
t7280 = pkin(2) * t7420;
t7646 = pkin(1) * t6642;
t7019 = ((t6660 * t7046 + ((t6557 + t6855) * t6669 + (t6516 + t7630) * pkin(2)) * t7482) * t7184 + ((pkin(2) * t6999 + t6494 * t6983) * t7630 + ((t6214 * t6616 - t6579 * t6842) * t6642 + t6497 * pkin(2) * t6983) * t6669 - (t6660 * t6842 - t7578) * t7643 - (-t6516 * t7182 * t7658 + t6833) * t6681) * t6670 + t7206 * t7646 + (t7658 * t6502 * t7180 + (t6494 * t7280 + t6660 * t7289) * t7578) * t6669 - (-t6661 * t7578 + (t6033 * t6661 + t6249 * t6494 + t6160) * t6660) * t7421 + t6833 * t7641) / ((-pkin(1) * t7279 + t6451 * t6642) * t6669 + t6782) * t7578;
t6487 = t6702 + t7081;
t6560 = pkin(2) * t6583;
t6108 = t6487 * t6163;
t6839 = t6108 - t6997;
t6851 = 0.2e1 * t6560 + t6582;
t6859 = t6517 * t6955;
t6870 = t6661 * t6983;
t6652 = t6702 / 0.2e1;
t7727 = t6696 / 0.2e1 + t6697 / 0.2e1;
t6929 = t6652 + t6683 + t7727;
t6147 = pkin(3) * t6163;
t7073 = pkin(2) * t6147;
t6120 = t6669 * t7073;
t7220 = t6699 * t6163;
t6124 = t6626 * t7220;
t7094 = -t7578 / 0.2e1;
t6939 = t6660 * t7094;
t6936 = t6108 / 0.2e1 + t6124 / 0.2e1 + t6120 + t6681 * t6939;
t7290 = pkin(1) * t7440;
t7356 = 0.2e1 * t6120 + t6124;
t7236 = ((t7290 * t7518 - 0.2e1 * t6859) * t7184 + (0.2e1 * ((t6582 / 0.2e1 + t6560 + t6505 + t6929) * t6249 + t6936) * t7495 + t6517 * t6870 * t7518) * t6670 + ((t6615 + (t6487 + t6851) * t6661) * t6681 * t6249 + t6494 * (t6839 + t7356)) * t6642 + t6859 * t7569) * t6163;
t6132 = pkin(6) * t7221;
t7362 = (t6145 + t6144 - t6207 / 0.2e1) * t6579 + pkin(3) * t7094;
t6009 = t6132 + t7362;
t7205 = t6660 * t7578;
t6042 = t7221 - t7205;
t6698 = pkin(6) ^ 2;
t7326 = pkin(1) ^ 2 + t6698;
t6856 = t7081 + t7326;
t6464 = t6699 + t6856;
t6468 = -0.2e1 / 0.3e1 * t6683 - t6696 / 0.3e1 - t6697 / 0.3e1 + t6702;
t6486 = pkin(1) * t7450;
t6617 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t6627 = t6670 * t6628;
t6694 = 0.2e1 * pkin(2);
t7010 = t7450 * t6163;
t6728 = t6661 * (pkin(6) * t7010 + (((t6207 - 0.2e1 * t6144) * pkin(7) + pkin(6) * t6199) * t6660 + t7204 + t7078 * t7223) * pkin(3)) + (t6210 + 0.2e1 * t6848) * t6560 + t7776 * t6582;
t6998 = t6661 * t6214;
t6189 = pkin(1) * t6998;
t7041 = t6517 * t6148;
t6767 = (t6189 + t6933) * t6583 + t7041;
t7079 = -t6698 / 0.2e1 - t6699 / 0.2e1 + t6652;
t6804 = t6639 + t7079 - t7327;
t7705 = 0.3e1 * t7081;
t6805 = t6699 + t7326 + t7705;
t6984 = t6517 * t7745 * t7569;
t6868 = t6681 * t6984;
t6915 = 0.2e1 * t6981;
t6930 = t6702 - t7705;
t6621 = t6643 * t6622;
t7021 = 0.2e1 * t6621 - 0.2e1 * t6643;
t7042 = pkin(3) * t7206;
t7064 = 0.2e1 * t7183;
t7091 = 0.3e1 / 0.2e1 * t6468 * t6681;
t6818 = t6700 * (-t6702 / 0.2e1 + t7727);
t7258 = (pkin(6) * t6144 + pkin(7) * t7350 + t6818 * t7578 + t7362) * t6583;
t7296 = 0.2e1 * t7440;
t7670 = 0.2e1 * t6621;
t7671 = 0.2e1 * t6615;
t7708 = t6560 + t6582 - t6557;
t7730 = 0.2e1 * t6557 - t6582;
t7760 = -0.4e1 * t6621;
t7243 = (-(t6930 + t6851) * t6627 * t6983 * t7495 + (t6868 * t7760 + (-0.3e1 * (t6468 + t6851) * t6869 - 0.2e1 * t7258 + (-0.2e1 * t6009 + t7042) * pkin(2)) * t6622 + ((t6997 + t7010 + t7356) * t7646 + 0.4e1 * t6868) * t6643 + (t6661 * t7091 + t6486 + t6851 * (t6617 * t6661 + pkin(1))) * t7064 - pkin(2) * t7042 + 0.2e1 * t7258 + t6009 * t6694) * t6628 + (t6728 * t6622 + ((t6939 + t7221) * t6600 + t6936) * t7745 * t7296 + (((t6804 + t7708) * t7667 + 0.4e1 * t6505 + t6805 + t7730) * t7495 + t6517 * t7021 * t7158) * t7569 - t6728) * t6670 + (t6984 * t7670 + ((t7079 + t7708) * t6915 + t6767) * t6622 + (-0.2e1 * t6984 + t6042 * t7646 + (t6163 * t6851 + t6839) * t7438) * t6643 + (t7671 + (t6464 + t7730) * t6661) * t7183 - t6767) * t6681) * t7569;
t5841 = -(t6336 * (t7236 + t7243) + t7019) * t6700 + t6264 + t6267 + t6288;
t6048 = pkin(3) * t7578 - t6132;
t6129 = pkin(1) * t7222;
t6141 = pkin(2) * t6146;
t6186 = pkin(1) * t6999;
t6463 = 0.3e1 * t6699 + t6856;
t6476 = -t7450 / 0.2e1;
t7325 = t6702 - t6699;
t6500 = t6641 + t7325;
t6555 = -t6698 + t7325;
t6695 = -0.2e1 * pkin(1);
t6845 = 0.2e1 * t6627 * t6952;
t6737 = pkin(3) * (pkin(6) * t6916 + t6148) + t6845 * t7642;
t6883 = -t6670 * t7318 + t6411;
t6895 = pkin(2) * t6952;
t7038 = pkin(2) * t6214;
t6898 = t6670 * t7038;
t6928 = pkin(2) * t7064;
t7009 = t6625 * t7220;
t7225 = t6642 * t6163;
t7045 = pkin(2) * t7225;
t7049 = pkin(1) * t7221;
t7055 = -(pkin(2) * t6915 + t6146 + t6192) * t6628 + t6146;
t7063 = 0.2e1 * t7180;
t7067 = 0.2e1 * t7569;
t7264 = pkin(6) * t7569;
t7070 = pkin(2) * t7264;
t7076 = pkin(1) * t6148;
t7080 = t6698 / 0.3e1 - t6702 / 0.3e1 + t6699;
t7254 = pkin(3) * t7793;
t7324 = -0.2e1 * t6615;
t7338 = t7450 / 0.3e1 - 0.2e1 / 0.3e1 * t6699;
t7347 = t7569 * t6694 + t6186;
t7587 = (-t6148 + t6827) * t6628;
t7666 = 0.4e1 * t6628;
t7653 = t7666 - 0.2e1;
t7669 = 0.3e1 * t6621;
t7681 = 0.2e1 * pkin(6);
t7682 = -0.2e1 * pkin(6);
t7683 = 0.2e1 * pkin(1);
t7721 = t6556 * t6661 + t6615;
t5875 = (((-0.4e1 / 0.3e1 + t6628) * t7449 + ((-0.2e1 / 0.3e1 * t6557 + t7338) * t6628 + 0.2e1 / 0.3e1 * t7033 + 0.4e1 / 0.3e1 * t6557 + t7080) * t6669 + (0.4e1 / 0.3e1 * t7630 - 0.2e1 / 0.3e1 * t6516) * t7746) * t7569 * t7669 + (t6566 * t7009 - (t7587 + (t6160 + t7793) * t6670 + 0.3e1 * t6148 - 0.4e1 * t6517 * t6981) * t7630 + ((t6952 * t7682 - t7076) * t6670 + (pkin(6) * t6928 - t7049) * t6661 - t6500 * t6163 + (-t6147 * t6628 + (t6845 + (pkin(2) * t6998 - 0.4e1 * t6952) * t6670 + 0.2e1 * (t6210 + t6928) * t6661 + 0.2e1 * t6192 + t7055) * t6660) * pkin(3)) * t6669 + ((-t6981 * t7450 - t6141) * t6660 - t7073) * t6628 + ((t6048 * t6661 - 0.2e1 * t6895) * t6660 + t7254) * t6670 + (t6555 * t6981 + t6141) * t6660 + t6737) * t6622 + ((-0.3e1 * t6628 + 0.3e1) * t7449 * t7569 - (t6566 * t6186 + (-t6898 + (-t6146 - 0.2e1 * t6192 - 0.2e1 * t6123) * t6661) * t6642 + ((t7683 + 0.4e1 * t7365) * t6670 + t7653 * pkin(2)) * t7569) * t7630 + (0.2e1 * (t6476 + t7331) * t7184 + (((t6129 + t7353) * t6579 + t6048) * t6642 - t6494 * pkin(2) * t7067) * t6670 + (0.3e1 * t6661 * t7045 - 0.4e1 * t7264) * t6579 + (pkin(6) * t7045 + t6695 * t7180) * t6661 - t6463 * t7569) * t6669 + ((-t6642 * t7049 + 0.2e1 * t7070) * t6660 + pkin(3) * t7347) * t6628 + ((pkin(1) * t7045 + pkin(6) * t7063) * t6660 + pkin(3) * t7063) * t7400 + (t7721 * t7225 - 0.2e1 * t7070) * t6660 - (t6192 * t7438 + t7347) * pkin(3)) * t6643 - t7654 * t7009 - (-t7587 - t6148 + (-t7353 * t6670 + (t7681 + t6579) * t7183) * t6661) * t7630 - (-t7654 * t6147 + (t6661 * t6898 + t6189 + t6192 + (-t6502 * t6670 + t6681 * t6627) * t6642 * t7067 + t7055) * t6660) * t6583 + ((t6141 + (t7130 + t7324) * t7183) * t6660 + t7073) * t6628 + (((pkin(1) * t6928 - t6048) * t6661 + 0.2e1 * t6895) * t6660 - t7254) * t6670 + (-t6141 + (t6464 * t6661 + t7671) * t7183) * t6660 - t6737) / (t6384 + (t6393 * t6669 + t6883) * t6642) * t7569;
t6604 = pkin(1) * t6670;
t6693 = 0.3e1 * pkin(2);
t6967 = t7746 * t6516 * t7569;
t7226 = t6329 * t6163;
t7623 = pkin(6) * t6681;
t7626 = pkin(6) * t6670;
t7633 = pkin(3) * t6516;
t5967 = (-t7233 - ((t6240 + (t6604 + t6694) * t6163) * t6643 + (-t6898 - t7776) * t6642 + ((-t6584 + (-t7365 + pkin(1)) * t6670 + t6693) * t6622 + t7746) * t7569) * t7630 + ((-t6670 * t7076 + t6502 * t7205 - (t6505 + t6556) * t6163) * t6643 + (-t6042 * t7626 + t6661 * t7041) * t6642 + (-(pkin(1) * t6597 + t6628 * t7633 + t6500 + t6505 - t6557) * t6622 + (((t6600 - t6681) * t6579 - t7623) * t6670 + 0.3e1 * t7253) * t7440 + t7457 * t7633) * t7569) * t6669 - t6622 * t6967 - (pkin(1) * t6824 - t7721) * t6643 * t6982 + t6039 * t6460 * t6642 + t6967) * t7226;
t6603 = pkin(1) * t6628;
t6618 = -pkin(7) / 0.2e1 - pkin(8) / 0.2e1;
t7146 = t6661 * t7482;
t7403 = t6660 * t6669;
t5982 = (((pkin(1) * t7008 + t6039) * t6669 - (t6604 + pkin(2)) * t6214) * t6643 + ((t7205 + t7353) * t6661 - t6160 + (t6460 * t6626 + (pkin(6) * t7403 - pkin(2)) * t6670) * t6163) * t6642 + ((-(-t6597 + t6603 + t6695 - t7399) * t7440 - t7146 * t7626) * t6626 + (t6516 * t6643 * t7429 + ((t6618 * t6628 + t7276 / 0.2e1 + t6502) * t7667 - t6402) * t6660) * t6669 + (t6603 - t6494) * t7440 + t7658 * t6517 * t7400) * t7569) * t6329 * t7578;
t7024 = t6566 * t6579 - pkin(6);
t6719 = -t6660 * t7746 - t6669 * t7024;
t6746 = t7746 * t7404;
t6785 = pkin(6) * t7401 + t6402 * t7428;
t6951 = t6671 * t7120;
t7032 = pkin(3) * t7141;
t7690 = -t6460 * t6671 + t7024 * t7437;
t6270 = (t6719 * t6576 + t7698 * t7480) * t6622 + (-(t6573 * t7377 - 0.2e1 * t7136) * t7630 + (t7690 * t6573 - t6576 * t6800) * t6669 + t6642 * (-t6516 * t7469 + t6573 * t6746)) * t6643 - t6626 * t7032 + ((t6573 * t6951 + t6576 * t6628 - t6576) * t6579 - t6576 * pkin(6)) * t6669 + (t6573 * t6785 + t6576 * t6889) * t6660 + t7032;
t6339 = 0.1e1 / ((t6390 * t6669 + t6883) * t6642 + t6384);
t7575 = t6270 * t6339;
t6231 = t6658 * t7575;
t7031 = pkin(3) * t7135;
t6273 = (t6573 * t6719 - t7468 * t7698) * t6622 + ((t6576 * t7377 + 0.2e1 * t7142) * t7630 + (-t6573 * t6800 - t7690 * t6576) * t6669 - t6642 * (t6516 * t7481 + t6576 * t6746)) * t6643 + t6626 * t7031 + (-(-t6573 * t6628 + t6576 * t6951 + t6573) * t6579 - t6573 * pkin(6)) * t6669 + (t6573 * t6889 - t6576 * t6785) * t6660 - t7031;
t7572 = t6273 * t6339;
t6234 = t6659 * t7572;
t7328 = t6622 - 0.1e1 / 0.2e1;
t7659 = t6643 / 0.2e1;
t6306 = ((-t7024 * t7412 + t7270 * t7400) * t6669 + (-t7746 * t7412 + t6662 * (t6528 * t6661 - t6681 * t7457)) * t6660) * t6642 - 0.2e1 * (t7328 * t7376 + t7397 * t7659) * t7630 - (t6460 * t6662 - t6465 * t7412) * t7413 + t6671 * t6516 * t7146;
t7554 = t6306 * t6339;
t6294 = t6657 * t7554;
t5862 = t6234 + t6231 + t6294 - t5875 - t5967 - t5982;
t5952 = pkin(7) * t5961;
t7011 = t6279 * t7226;
t6087 = pkin(2) * t7011;
t5949 = t5961 * pkin(2);
t6901 = pkin(7) * t7011;
t7602 = (0.2e1 * t5949 + 0.4e1 * t6901) * t6628;
t7619 = t5841 * pkin(7);
t7704 = -t7344 * t7569 + t5949;
t7769 = -(t7602 - 0.4e1 * (t6087 - t5952 / 0.2e1) * t7400 - 0.2e1 * t7704) * t6622 - (pkin(1) * t5841 + (pkin(6) * t5862 + t7619) * t6661) * t6642 - 0.2e1 * (t6129 - t7344) * t7569 + t7602;
t6388 = t6615 - t7157;
t6909 = t7744 * t6632 * t7297;
t7150 = t7744 * t7476;
t6946 = t6520 * t7150;
t7139 = t6574 * t7392;
t6959 = t6520 * t7139;
t6963 = t6665 * t7157;
t7154 = t6674 * t7510;
t7166 = (t6674 * t7517 + t7107 * t7786) * t6632 * t6642;
t7465 = t6577 * t6664;
t7493 = t7744 * t6577;
t7562 = (t6574 * t7166 + (((-t6520 * t7493 - t6574 * t6963) * t6643 + t6574 * t7154) * t6642 + (t6577 * t7157 - t6946) * t6622 + t6946 + t6577 * t6388) * t6673 - t6503 * t7493 + (t6577 * t6909 + ((-t6520 * t7465 - t7150) * t6643 + t6503 * t7475) * t6642 + (-t6959 + t7493) * t6622 + t6959) * t6681) * t6356;
t6265 = t7406 * t7562;
t7149 = t7744 * t7464;
t6945 = t6520 * t7149;
t7133 = t6577 * t7392;
t6958 = t6520 * t7133;
t7477 = t6574 * t6664;
t7494 = t7744 * t6574;
t7559 = (-t6577 * t7166 + (((-t6520 * t7494 + t6577 * t6963) * t6643 - t6577 * t7154) * t6642 + (t6574 * t7157 + t6945) * t6622 - t6945 + t6574 * t6388) * t6673 - t6503 * t7494 + (t6574 * t6909 - ((t6520 * t7477 - t7149) * t6643 + t6503 * t7463) * t6642 + (t6958 + t7494) * t6622 - t6958) * t6681) * t6356;
t6268 = t7405 * t7559;
t6585 = t6630 * t6699;
t7282 = t6495 * t7640;
t7317 = pkin(6) * t7629;
t6781 = -t7288 * t7629 + (t7505 + (t6521 * t7635 + t6663 * t6702 - t7317) * t6642) * t6673 + t6642 * t7282;
t7129 = t6664 * t7450;
t7278 = pkin(2) * t7416;
t7389 = t6665 * t6498;
t7501 = t6520 * t6642;
t7556 = ((t6674 * t7077 - 0.2e1 * t6445 * t6586 + (t6585 + t7450) * t6665) * t6632 + (t7108 * t6585 + ((0.2e1 * t7278 - t7501) * t6674 + t7389) * t6586 + (-pkin(2) * t7501 + t6643 * t7129) * t6674 + pkin(2) * t7389) * t6673 + t6681 * (t6665 * t6503 + (pkin(3) * t7411 - t6520 * t7435 + t6570) * t6674)) / ((pkin(1) * t7272 + t6450 * t6664) * t6672 + t6781);
t6289 = t7124 * t7556;
t6337 = 0.1e1 / ((t6452 * t6672 + t7282) * t6642 + t6796);
t6149 = pkin(8) * t6165;
t6150 = pkin(7) * t6165;
t7343 = t6208 - t6150;
t6034 = t6149 - t7343;
t6161 = pkin(1) * t6165;
t6832 = t6211 * t7417;
t6841 = t6250 * t6503 + t6034;
t6978 = t7482 * t7567;
t6996 = t6642 * t6216;
t7178 = t6632 * t7567;
t7203 = t6630 * t7577;
t7018 = ((t6663 * t7046 + ((t6558 + t6855) * t6672 + (t6519 + t7629) * pkin(2)) * t7482) * t7178 + ((pkin(2) * t6996 + t6495 * t6978) * t7629 + ((t6216 * t6616 - t6580 * t6841) * t6642 + t6498 * pkin(2) * t6978) * t6672 - (t6663 * t6841 - t7577) * t7643 - (-t6519 * t7176 * t7658 + t6832) * t6681) * t6673 + t7203 * t7646 + (t7658 * t6503 * t7174 + (t6495 * t7280 + t6663 * t7288) * t7577) * t6672 - (-t6664 * t7577 + (t6034 * t6664 + t6250 * t6495 + t6161) * t6663) * t7421 + t6832 * t7639) / ((-pkin(1) * t7278 + t6452 * t6642) * t6672 + t6781) * t7577;
t6561 = pkin(2) * t6586;
t6109 = t6487 * t6165;
t6838 = t6109 - t6994;
t6850 = 0.2e1 * t6561 + t6585;
t6858 = t6520 * t6954;
t6866 = t6664 * t6978;
t6152 = pkin(3) * t6165;
t7072 = pkin(2) * t6152;
t6121 = t6672 * t7072;
t7213 = t6699 * t6165;
t6126 = t6630 * t7213;
t7093 = -t7577 / 0.2e1;
t6938 = t6663 * t7093;
t6935 = t6109 / 0.2e1 + t6126 / 0.2e1 + t6121 + t6681 * t6938;
t7355 = 0.2e1 * t6121 + t6126;
t7235 = ((t7290 * t7517 - 0.2e1 * t6858) * t7178 + (0.2e1 * ((t6585 / 0.2e1 + t6561 + t6506 + t6929) * t6250 + t6935) * t7492 + t6520 * t6866 * t7517) * t6673 + ((t6615 + (t6487 + t6850) * t6664) * t6681 * t6250 + (t6838 + t7355) * t6495) * t6642 + t6858 * t7567) * t6165;
t6133 = pkin(6) * t7214;
t7361 = (t6150 + t6149 - t6208 / 0.2e1) * t6580 + pkin(3) * t7093;
t6010 = t6133 + t7361;
t7202 = t6663 * t7577;
t6043 = t7214 - t7202;
t6631 = t6673 * t6632;
t7006 = t7450 * t6165;
t6727 = t6664 * (pkin(6) * t7006 + (((t6208 - 0.2e1 * t6149) * pkin(7) + pkin(6) * t6203) * t6663 + t7201 + t7078 * t7216) * pkin(3)) + (t6211 + 0.2e1 * t6847) * t6561 + t7777 * t6585;
t6995 = t6664 * t6216;
t6190 = pkin(1) * t6995;
t7040 = t6520 * t6153;
t6766 = (t6190 + t6932) * t6586 + t7040;
t6979 = t6520 * t7744 * t7567;
t6864 = t6681 * t6979;
t6913 = 0.2e1 * t6976;
t7037 = pkin(3) * t7203;
t7062 = 0.2e1 * t7177;
t7257 = (pkin(6) * t6149 + pkin(7) * t7349 + t6818 * t7577 + t7361) * t6586;
t7707 = t6561 + t6585 - t6558;
t7729 = 0.2e1 * t6558 - t6585;
t7242 = (-(t6930 + t6850) * t6631 * t6978 * t7492 + (t6864 * t7760 + (-0.3e1 * (t6468 + t6850) * t6865 - 0.2e1 * t7257 + (-0.2e1 * t6010 + t7037) * pkin(2)) * t6622 + ((t6994 + t7006 + t7355) * t7646 + 0.4e1 * t6864) * t6643 + (t6664 * t7091 + t6486 + t6850 * (t6617 * t6664 + pkin(1))) * t7062 - pkin(2) * t7037 + 0.2e1 * t7257 + t6010 * t6694) * t6632 + (t6727 * t6622 + ((t6938 + t7214) * t6601 + t6935) * t7744 * t7296 + (((t6804 + t7707) * t7667 + 0.4e1 * t6506 + t6805 + t7729) * t7492 + t6520 * t7021 * t7157) * t7567 - t6727) * t6673 + t6681 * (t6979 * t7670 + ((t7079 + t7707) * t6913 + t6766) * t6622 + (-0.2e1 * t6979 + t6043 * t7646 + (t6165 * t6850 + t6838) * t7435) * t6643 + (t7671 + (t6464 + t7729) * t6664) * t7177 - t6766)) * t7567;
t5842 = -(t6337 * (t7235 + t7242) + t7018) * t6700 + t6265 + t6268 + t6289;
t6049 = pkin(3) * t7577 - t6133;
t6130 = pkin(1) * t7215;
t6142 = pkin(2) * t6151;
t6187 = pkin(1) * t6996;
t6844 = 0.2e1 * t6631 * t6974;
t6736 = pkin(3) * (pkin(6) * t6914 + t6153) + t6844 * t7640;
t6882 = -t6673 * t7317 + t6412;
t6894 = pkin(2) * t6974;
t7036 = pkin(2) * t6216;
t6897 = t6673 * t7036;
t6927 = pkin(2) * t7062;
t7005 = t6629 * t7213;
t7218 = t6642 * t6165;
t7044 = pkin(2) * t7218;
t7048 = pkin(1) * t7214;
t7054 = -(pkin(2) * t6913 + t6151 + t6193) * t6632 + t6151;
t7061 = 0.2e1 * t7174;
t7066 = 0.2e1 * t7567;
t7263 = pkin(6) * t7567;
t7069 = pkin(2) * t7263;
t7075 = pkin(1) * t6153;
t7251 = pkin(3) * t7792;
t7346 = t7567 * t6694 + t6187;
t7586 = (-t6153 + t6826) * t6632;
t7665 = 0.4e1 * t6632;
t7650 = t7665 - 0.2e1;
t7722 = t6556 * t6664 + t6615;
t5876 = (((t6632 - 0.4e1 / 0.3e1) * t7447 + ((-0.2e1 / 0.3e1 * t6558 + t7338) * t6632 + 0.2e1 / 0.3e1 * t7030 + 0.4e1 / 0.3e1 * t6558 + t7080) * t6672 + (0.4e1 / 0.3e1 * t7629 - 0.2e1 / 0.3e1 * t6519) * t7747) * t7567 * t7669 + (t6567 * t7005 - (t7586 + (t6161 + t7792) * t6673 + 0.3e1 * t6153 - 0.4e1 * t6520 * t6976) * t7629 + ((t6974 * t7682 - t7075) * t6673 + (pkin(6) * t6927 - t7048) * t6664 - t6500 * t6165 + (-t6152 * t6632 + (t6844 + (pkin(2) * t6995 - 0.4e1 * t6974) * t6673 + 0.2e1 * (t6211 + t6927) * t6664 + 0.2e1 * t6193 + t7054) * t6663) * pkin(3)) * t6672 + ((-t6976 * t7450 - t6142) * t6663 - t7072) * t6632 + ((t6049 * t6664 - 0.2e1 * t6894) * t6663 + t7251) * t6673 + (t6555 * t6976 + t6142) * t6663 + t6736) * t6622 + ((-0.3e1 * t6632 + 0.3e1) * t7447 * t7567 - (t6567 * t6187 + (-t6897 + (-t6151 - 0.2e1 * t6193 - 0.2e1 * t6125) * t6664) * t6642 + ((t7683 + 0.4e1 * t7364) * t6673 + t7650 * pkin(2)) * t7567) * t7629 + (0.2e1 * (t6476 + t7330) * t7178 + (((t6130 + t7352) * t6580 + t6049) * t6642 - t6495 * pkin(2) * t7066) * t6673 + (0.3e1 * t6664 * t7044 - 0.4e1 * t7263) * t6580 + (pkin(6) * t7044 + t6695 * t7174) * t6664 - t6463 * t7567) * t6672 + ((-t6642 * t7048 + 0.2e1 * t7069) * t6663 + pkin(3) * t7346) * t6632 + ((pkin(1) * t7044 + pkin(6) * t7061) * t6663 + pkin(3) * t7061) * t7391 + (t7722 * t7218 - 0.2e1 * t7069) * t6663 - (t6193 * t7435 + t7346) * pkin(3)) * t6643 - t7651 * t7005 - (-t7586 - t6153 + (-t7352 * t6673 + (t7681 + t6580) * t7177) * t6664) * t7629 - (-t7651 * t6152 + (t6664 * t6897 + t6190 + t6193 + (-t6503 * t6673 + t6681 * t6631) * t6642 * t7066 + t7054) * t6663) * t6586 + ((t6142 + (t7129 + t7324) * t7177) * t6663 + t7072) * t6632 + (((pkin(1) * t6927 - t6049) * t6664 + 0.2e1 * t6894) * t6663 - t7251) * t6673 + (-t6142 + (t6464 * t6664 + t7671) * t7177) * t6663 - t6736) / (t6385 + (t6394 * t6672 + t6882) * t6642) * t7567;
t6606 = pkin(1) * t6673;
t6966 = t7747 * t6519 * t7567;
t7219 = t6331 * t6165;
t7625 = pkin(6) * t6673;
t7632 = pkin(3) * t6519;
t5968 = (-t7232 - ((t6241 + (t6606 + t6694) * t6165) * t6643 + (-t6897 - t7777) * t6642 + ((-t6587 + (-t7364 + pkin(1)) * t6673 + t6693) * t6622 + t7747) * t7567) * t7629 + ((-t6673 * t7075 + t6503 * t7202 - (t6506 + t6556) * t6165) * t6643 + (-t6043 * t7625 + t6664 * t7040) * t6642 + (-(pkin(1) * t6598 + t6632 * t7632 + t6500 + t6506 - t6558) * t6622 + (((t6601 - t6681) * t6580 - t7623) * t6673 + 0.3e1 * t7250) * t7440 + t7456 * t7632) * t7567) * t6672 - t6622 * t6966 - (pkin(1) * t6823 - t7722) * t6643 * t6977 + t6040 * t6461 * t6642 + t6966) * t7219;
t6605 = pkin(1) * t6632;
t7145 = t6664 * t7482;
t7394 = t6663 * t6672;
t5983 = (((pkin(1) * t7004 + t6040) * t6672 - (t6606 + pkin(2)) * t6216) * t6643 + ((t7202 + t7352) * t6664 - t6161 + (t6461 * t6630 + (pkin(6) * t7394 - pkin(2)) * t6673) * t6165) * t6642 + ((-(-t6598 + t6605 + t6695 - t7390) * t7440 - t7145 * t7625) * t6630 + (t6519 * t6643 * t7426 + ((t6618 * t6632 + t7275 / 0.2e1 + t6503) * t7667 - t6403) * t6663) * t6672 + (t6605 - t6495) * t7440 + t7658 * t6520 * t7391) * t7567) * t6331 * t7577;
t7023 = t6567 * t6580 - pkin(6);
t6718 = -t6663 * t7747 - t6672 * t7023;
t6745 = t7747 * t7395;
t6784 = pkin(6) * t7392 + t6403 * t7425;
t6950 = t6674 * t7116;
t7029 = pkin(3) * t7139;
t7691 = -t6461 * t6674 + t7023 * t7434;
t6271 = (t6718 * t6577 + t7696 * t7476) * t6622 + (-(t6574 * t7373 - 0.2e1 * t7134) * t7629 + (t7691 * t6574 - t6577 * t6799) * t6672 + t6642 * (-t6519 * t7465 + t6574 * t6745)) * t6643 - t6630 * t7029 + ((t6574 * t6950 + t6577 * t6632 - t6577) * t6580 - t6577 * pkin(6)) * t6672 + (t6574 * t6784 + t6577 * t6888) * t6663 + t7029;
t6340 = 0.1e1 / ((t6391 * t6672 + t6882) * t6642 + t6385);
t7574 = t6271 * t6340;
t6232 = t6658 * t7574;
t7028 = pkin(3) * t7133;
t6274 = (t6574 * t6718 - t7464 * t7696) * t6622 + ((t6577 * t7373 + 0.2e1 * t7140) * t7629 + (-t6574 * t6799 - t7691 * t6577) * t6672 - t6642 * (t6519 * t7477 + t6577 * t6745)) * t6643 + t6630 * t7028 + (-(-t6574 * t6632 + t6577 * t6950 + t6574) * t6580 - t6574 * pkin(6)) * t6672 + (t6574 * t6888 - t6577 * t6784) * t6663 - t7028;
t7571 = t6274 * t6340;
t6235 = t6659 * t7571;
t6307 = ((-t7023 * t7410 + t7269 * t7391) * t6672 + (-t7747 * t7410 + t6665 * (t6529 * t6664 - t6681 * t7456)) * t6663) * t6642 - 0.2e1 * (t7328 * t7372 + t7388 * t7659) * t7629 - (t6461 * t6665 - t6466 * t7410) * t7411 + t6674 * t6519 * t7145;
t7553 = t6307 * t6340;
t6295 = t6657 * t7553;
t5863 = t6235 + t6232 + t6295 - t5876 - t5968 - t5983;
t5953 = pkin(7) * t5962;
t7007 = t6280 * t7219;
t6088 = pkin(2) * t7007;
t5957 = pkin(2) * t5962;
t6900 = pkin(7) * t7007;
t7601 = (0.2e1 * t5957 + 0.4e1 * t6900) * t6632;
t7618 = t5842 * pkin(7);
t7702 = -t7343 * t7567 + t5957;
t7768 = -(t7601 - 0.4e1 * (t6088 - t5953 / 0.2e1) * t7391 - 0.2e1 * t7702) * t6622 - (pkin(1) * t5842 + (pkin(6) * t5863 + t7618) * t6664) * t6642 - 0.2e1 * (t6130 - t7343) * t7567 + t7601;
t6389 = t6615 - t7156;
t6908 = t7743 * t6636 * t7297;
t7148 = t7743 * t7472;
t6944 = t6523 * t7148;
t7137 = t6575 * t7383;
t6957 = t6523 * t7137;
t6962 = t6668 * t7156;
t7153 = t6677 * t7508;
t7165 = (t6677 * t7516 + t7105 * t7787) * t6636 * t6642;
t7461 = t6578 * t6667;
t7490 = t7743 * t6578;
t7561 = (t6575 * t7165 + (((-t6523 * t7490 - t6575 * t6962) * t6643 + t6575 * t7153) * t6642 + (t6578 * t7156 - t6944) * t6622 + t6944 + t6578 * t6389) * t6676 - t6504 * t7490 + (t6578 * t6908 + ((-t6523 * t7461 - t7148) * t6643 + t6504 * t7471) * t6642 + (-t6957 + t7490) * t6622 + t6957) * t6681) * t6358;
t6266 = t7406 * t7561;
t7147 = t7743 * t7460;
t6943 = t6523 * t7147;
t7131 = t6578 * t7383;
t6956 = t6523 * t7131;
t7473 = t6575 * t6667;
t7491 = t7743 * t6575;
t7558 = (-t6578 * t7165 + (((-t6523 * t7491 + t6578 * t6962) * t6643 - t6578 * t7153) * t6642 + (t6575 * t7156 + t6943) * t6622 - t6943 + t6575 * t6389) * t6676 - t6504 * t7491 + (t6575 * t6908 - ((t6523 * t7473 - t7147) * t6643 + t6504 * t7459) * t6642 + (t6956 + t7491) * t6622 - t6956) * t6681) * t6358;
t6269 = t7405 * t7558;
t6588 = t6634 * t6699;
t7281 = t6496 * t7638;
t7316 = pkin(6) * t7628;
t6780 = -t7287 * t7628 + (t7504 + (t6524 * t7634 + t6666 * t6702 - t7316) * t6642) * t6676 + t6642 * t7281;
t7128 = t6667 * t7450;
t7277 = pkin(2) * t7414;
t7380 = t6668 * t6499;
t7499 = t6523 * t6642;
t7555 = ((t6677 * t7077 - 0.2e1 * t6446 * t6589 + (t6588 + t7450) * t6668) * t6636 + (t7106 * t6588 + ((0.2e1 * t7277 - t7499) * t6677 + t7380) * t6589 + (-pkin(2) * t7499 + t6643 * t7128) * t6677 + pkin(2) * t7380) * t6676 + t6681 * (t6668 * t6504 + (pkin(3) * t7409 - t6523 * t7432 + t6570) * t6677)) / ((pkin(1) * t7271 + t6450 * t6667) * t6675 + t6780);
t6290 = t7124 * t7555;
t6338 = 0.1e1 / ((t6453 * t6675 + t7281) * t6642 + t6795);
t6159 = pkin(8) * t6167;
t6154 = pkin(7) * t6167;
t7342 = t6209 - t6154;
t6035 = t6159 - t7342;
t6158 = pkin(1) * t6167;
t6831 = t6212 * t7415;
t6840 = t6251 * t6504 + t6035;
t6972 = t7482 * t7565;
t6993 = t6642 * t6218;
t7172 = t6636 * t7565;
t7200 = t6634 * t7576;
t7020 = ((t6666 * t7046 + ((t6559 + t6855) * t6675 + (t6522 + t7628) * pkin(2)) * t7482) * t7172 + ((pkin(2) * t6993 + t6496 * t6972) * t7628 + ((t6218 * t6616 - t6581 * t6840) * t6642 + t6499 * pkin(2) * t6972) * t6675 - (t6666 * t6840 - t7576) * t7643 - (-t6522 * t7170 * t7658 + t6831) * t6681) * t6676 + t7200 * t7646 + (t7658 * t6504 * t7168 + (t6496 * t7280 + t6666 * t7287) * t7576) * t6675 - (-t6667 * t7576 + (t6035 * t6667 + t6251 * t6496 + t6158) * t6666) * t7421 + t6831 * t7637) / ((-pkin(1) * t7277 + t6453 * t6642) * t6675 + t6780) * t7576;
t6562 = pkin(2) * t6589;
t6110 = t6487 * t6167;
t6837 = t6110 - t6991;
t6849 = 0.2e1 * t6562 + t6588;
t6857 = t6523 * t6953;
t6862 = t6667 * t6972;
t6156 = pkin(3) * t6167;
t7071 = pkin(2) * t6156;
t6122 = t6675 * t7071;
t7207 = t6699 * t6167;
t6128 = t6634 * t7207;
t7092 = -t7576 / 0.2e1;
t6937 = t6666 * t7092;
t6934 = t6110 / 0.2e1 + t6128 / 0.2e1 + t6122 + t6681 * t6937;
t7354 = 0.2e1 * t6122 + t6128;
t7234 = ((t7290 * t7516 - 0.2e1 * t6857) * t7172 + (0.2e1 * ((t6588 / 0.2e1 + t6562 + t6507 + t6929) * t6251 + t6934) * t7489 + t6523 * t6862 * t7516) * t6676 + ((t6615 + (t6487 + t6849) * t6667) * t6681 * t6251 + (t6837 + t7354) * t6496) * t6642 + t6857 * t7565) * t6167;
t6134 = pkin(6) * t7208;
t7360 = (t6154 + t6159 - t6209 / 0.2e1) * t6581 + pkin(3) * t7092;
t6011 = t6134 + t7360;
t7199 = t6666 * t7576;
t6044 = t7208 - t7199;
t6635 = t6676 * t6636;
t7002 = t7450 * t6167;
t6726 = t6667 * (pkin(6) * t7002 + (((t6209 - 0.2e1 * t6159) * pkin(7) + pkin(6) * t6204) * t6666 + t7198 + t7078 * t7210) * pkin(3)) + (t6212 + 0.2e1 * t6846) * t6562 + t7778 * t6588;
t6992 = t6667 * t6218;
t6191 = pkin(1) * t6992;
t7039 = t6523 * t6157;
t6765 = (t6191 + t6931) * t6589 + t7039;
t6973 = t6523 * t7743 * t7565;
t6860 = t6681 * t6973;
t6911 = 0.2e1 * t6970;
t7035 = pkin(3) * t7200;
t7060 = 0.2e1 * t7171;
t7256 = (pkin(7) * t7348 + pkin(8) * t6155 + t6818 * t7576 + t7360) * t6589;
t7706 = t6562 + t6588 - t6559;
t7728 = 0.2e1 * t6559 - t6588;
t7241 = (-(t6930 + t6849) * t6635 * t6972 * t7489 + (t6860 * t7760 + (-0.3e1 * (t6468 + t6849) * t6861 - 0.2e1 * t7256 + (-0.2e1 * t6011 + t7035) * pkin(2)) * t6622 + ((t6991 + t7002 + t7354) * t7646 + 0.4e1 * t6860) * t6643 + (t6667 * t7091 + t6486 + t6849 * (t6617 * t6667 + pkin(1))) * t7060 - pkin(2) * t7035 + 0.2e1 * t7256 + t6011 * t6694) * t6636 + (t6726 * t6622 + ((t6937 + t7208) * t6602 + t6934) * t7743 * t7296 + (((t6804 + t7706) * t7667 + 0.4e1 * t6507 + t6805 + t7728) * t7489 + t6523 * t7021 * t7156) * t7565 - t6726) * t6676 + t6681 * (t6973 * t7670 + ((t7079 + t7706) * t6911 + t6765) * t6622 + (-0.2e1 * t6973 + t6044 * t7646 + (t6167 * t6849 + t6837) * t7432) * t6643 + (t7671 + (t6464 + t7728) * t6667) * t7171 - t6765)) * t7565;
t5843 = -(t6338 * (t7234 + t7241) + t7020) * t6700 + t6266 + t6269 + t6290;
t6050 = pkin(3) * t7576 - t6134;
t6131 = pkin(1) * t7209;
t6143 = pkin(2) * t6155;
t6188 = pkin(1) * t6993;
t6843 = 0.2e1 * t6635 * t6968;
t6735 = pkin(3) * (pkin(6) * t6912 + t6157) + t6843 * t7638;
t6881 = -t6676 * t7316 + t6413;
t6893 = pkin(2) * t6968;
t7034 = pkin(2) * t6218;
t6896 = t6676 * t7034;
t6926 = pkin(2) * t7060;
t7001 = t6633 * t7207;
t7211 = t6642 * t6167;
t7043 = pkin(2) * t7211;
t7047 = pkin(1) * t7208;
t7053 = -(pkin(2) * t6911 + t6155 + t6194) * t6636 + t6155;
t7059 = 0.2e1 * t7168;
t7065 = 0.2e1 * t7565;
t7262 = pkin(6) * t7565;
t7068 = pkin(2) * t7262;
t7074 = pkin(1) * t6157;
t7248 = pkin(3) * t7791;
t7345 = t7565 * t6694 + t6188;
t7585 = (-t6157 + t6825) * t6636;
t7664 = 0.4e1 * t6636;
t7647 = t7664 - 0.2e1;
t7723 = t6556 * t6667 + t6615;
t5874 = (((t6636 - 0.4e1 / 0.3e1) * t7445 + ((-0.2e1 / 0.3e1 * t6559 + t7338) * t6636 + 0.2e1 / 0.3e1 * t7027 + 0.4e1 / 0.3e1 * t6559 + t7080) * t6675 + (0.4e1 / 0.3e1 * t7628 - 0.2e1 / 0.3e1 * t6522) * t7748) * t7565 * t7669 + (t6568 * t7001 - (t7585 + (t6158 + t7791) * t6676 + 0.3e1 * t6157 - 0.4e1 * t6523 * t6970) * t7628 + ((t6968 * t7682 - t7074) * t6676 + (pkin(6) * t6926 - t7047) * t6667 - t6500 * t6167 + (-t6156 * t6636 + (t6843 + (pkin(2) * t6992 - 0.4e1 * t6968) * t6676 + 0.2e1 * (t6212 + t6926) * t6667 + 0.2e1 * t6194 + t7053) * t6666) * pkin(3)) * t6675 + ((-t6970 * t7450 - t6143) * t6666 - t7071) * t6636 + ((t6050 * t6667 - 0.2e1 * t6893) * t6666 + t7248) * t6676 + (t6555 * t6970 + t6143) * t6666 + t6735) * t6622 + ((-0.3e1 * t6636 + 0.3e1) * t7445 * t7565 - (t6568 * t6188 + (-t6896 + (-t6155 - 0.2e1 * t6194 - 0.2e1 * t6127) * t6667) * t6642 + ((t7683 + 0.4e1 * t7363) * t6676 + t7647 * pkin(2)) * t7565) * t7628 + (0.2e1 * (t6476 + t7329) * t7172 + (((t6131 + t7351) * t6581 + t6050) * t6642 - t6496 * pkin(2) * t7065) * t6676 + (0.3e1 * t6667 * t7043 - 0.4e1 * t7262) * t6581 + (pkin(6) * t7043 + t6695 * t7168) * t6667 - t6463 * t7565) * t6675 + ((-t6642 * t7047 + 0.2e1 * t7068) * t6666 + pkin(3) * t7345) * t6636 + ((pkin(1) * t7043 + pkin(6) * t7059) * t6666 + pkin(3) * t7059) * t7382 + (t7723 * t7211 - 0.2e1 * t7068) * t6666 - (t6194 * t7432 + t7345) * pkin(3)) * t6643 - t7648 * t7001 - (-t7585 - t6157 + (-t7351 * t6676 + (t7681 + t6581) * t7171) * t6667) * t7628 - (-t7648 * t6156 + (t6667 * t6896 + t6191 + t6194 + (-t6504 * t6676 + t6681 * t6635) * t6642 * t7065 + t7053) * t6666) * t6589 + ((t6143 + (t7128 + t7324) * t7171) * t6666 + t7071) * t6636 + (((pkin(1) * t6926 - t6050) * t6667 + 0.2e1 * t6893) * t6666 - t7248) * t6676 + (-t6143 + (t6464 * t6667 + t7671) * t7171) * t6666 - t6735) / (t6386 + (t6395 * t6675 + t6881) * t6642) * t7565;
t6608 = pkin(1) * t6676;
t6965 = t7748 * t6522 * t7565;
t7212 = t6327 * t6167;
t7624 = pkin(6) * t6676;
t7631 = pkin(3) * t6522;
t5969 = (-t7231 - ((t6242 + (t6608 + t6694) * t6167) * t6643 + (-t6896 - t7778) * t6642 + ((-t6590 + (-t7363 + pkin(1)) * t6676 + t6693) * t6622 + t7748) * t7565) * t7628 + ((-t6676 * t7074 + t6504 * t7199 - (t6507 + t6556) * t6167) * t6643 + (-t6044 * t7624 + t6667 * t7039) * t6642 + (-(pkin(1) * t6599 + t6636 * t7631 + t6500 + t6507 - t6559) * t6622 + (((t6602 - t6681) * t6581 - t7623) * t6676 + 0.3e1 * t7247) * t7440 + t7455 * t7631) * t7565) * t6675 - t6622 * t6965 - (pkin(1) * t6822 - t7723) * t6643 * t6971 + t6041 * t6462 * t6642 + t6965) * t7212;
t6607 = pkin(1) * t6636;
t7144 = t6667 * t7482;
t7385 = t6666 * t6675;
t5984 = (((pkin(1) * t7000 + t6041) * t6675 - (t6608 + pkin(2)) * t6218) * t6643 + ((t7199 + t7351) * t6667 - t6158 + (t6462 * t6634 + (pkin(6) * t7385 - pkin(2)) * t6676) * t6167) * t6642 + ((-(-t6599 + t6607 + t6695 - t7381) * t7440 - t7144 * t7624) * t6634 + (t6522 * t6643 * t7423 + ((t6618 * t6636 + t7274 / 0.2e1 + t6504) * t7667 - t6404) * t6666) * t6675 + (t6607 - t6496) * t7440 + t7658 * t6523 * t7382) * t7565) * t6327 * t7576;
t7022 = t6568 * t6581 - pkin(6);
t6717 = -t6666 * t7748 - t6675 * t7022;
t6744 = t7748 * t7386;
t6783 = pkin(6) * t7383 + t6404 * t7422;
t6949 = t6677 * t7112;
t7026 = pkin(3) * t7137;
t7692 = -t6462 * t6677 + t7022 * t7431;
t6272 = (t6717 * t6578 + t7694 * t7472) * t6622 + (-(t6575 * t7369 - 0.2e1 * t7132) * t7628 + (t7692 * t6575 - t6578 * t6798) * t6675 + t6642 * (-t6522 * t7461 + t6575 * t6744)) * t6643 - t6634 * t7026 + ((t6575 * t6949 + t6578 * t6636 - t6578) * t6581 - t6578 * pkin(6)) * t6675 + (t6575 * t6783 + t6578 * t6887) * t6666 + t7026;
t6341 = 0.1e1 / ((t6392 * t6675 + t6881) * t6642 + t6386);
t7573 = t6272 * t6341;
t6233 = t6658 * t7573;
t7025 = pkin(3) * t7131;
t6275 = (t6575 * t6717 - t7460 * t7694) * t6622 + ((t6578 * t7369 + 0.2e1 * t7138) * t7628 + (-t6575 * t6798 - t7692 * t6578) * t6675 - t6642 * (t6522 * t7473 + t6578 * t6744)) * t6643 + t6634 * t7025 + (-(-t6575 * t6636 + t6578 * t6949 + t6575) * t6581 - t6575 * pkin(6)) * t6675 + (t6575 * t6887 - t6578 * t6783) * t6666 - t7025;
t7570 = t6275 * t6341;
t6236 = t6659 * t7570;
t6308 = ((-t7022 * t7408 + t7268 * t7382) * t6675 + (-t7748 * t7408 + t6668 * (t6530 * t6667 - t6681 * t7455)) * t6666) * t6642 - 0.2e1 * (t7328 * t7368 + t7379 * t7659) * t7628 - (t6462 * t6668 - t6467 * t7408) * t7409 + t6677 * t6522 * t7144;
t7552 = t6308 * t6341;
t6296 = t6657 * t7552;
t5864 = t6236 + t6233 + t6296 - t5874 - t5969 - t5984;
t5954 = pkin(7) * t5963;
t7003 = t6281 * t7212;
t6089 = pkin(2) * t7003;
t5951 = t5963 * pkin(2);
t6899 = pkin(7) * t7003;
t7600 = (0.2e1 * t5951 + 0.4e1 * t6899) * t6636;
t7617 = t5843 * pkin(7);
t7703 = -t7342 * t7565 + t5951;
t7767 = -(t7600 - 0.4e1 * (t6089 - t5954 / 0.2e1) * t7382 - 0.2e1 * t7703) * t6622 - (pkin(1) * t5843 + (pkin(6) * t5864 + t7617) * t6667) * t6642 - 0.2e1 * (t6131 - t7342) * t7565 + t7600;
t5859 = pkin(1) * t5862;
t5916 = t6099 + t5955;
t7662 = -0.2e1 * t6642;
t6162 = t6180 ^ 2 / t6351 ^ 2;
t7736 = t6162 + t6213;
t7766 = (-pkin(1) * t7736 + t5916 * t7662 + t7773) * t6661 - ((t6146 - t6200) * t7064 - t5859) * t6670 - t6198;
t5860 = pkin(1) * t5863;
t5918 = t6101 + t5956;
t6164 = t6181 ^ 2 / t6352 ^ 2;
t7735 = t6164 + t6215;
t7765 = (-pkin(1) * t7735 + t5918 * t7662 + t7774) * t6664 - ((t6151 - t6205) * t7062 - t5860) * t6673 - t6201;
t5861 = pkin(1) * t5864;
t5917 = t6100 + t5950;
t6166 = t6182 ^ 2 / t6353 ^ 2;
t7734 = t6166 + t6217;
t7764 = (-pkin(1) * t7734 + t5917 * t7662 + t7775) * t6667 - ((t6155 - t6206) * t7060 - t5861) * t6676 - t6202;
t7759 = 0.2e1 * t6628;
t7758 = 0.2e1 * t6632;
t7757 = 0.2e1 * t6636;
t7756 = 0.2e1 * t6643;
t7755 = 0.2e1 * t6670;
t7754 = 0.2e1 * t6673;
t7753 = 0.2e1 * t6676;
t7752 = 0.4e1 * t6863;
t7751 = 0.4e1 * t6867;
t7750 = 0.4e1 * t6871;
t6917 = -0.2e1 * t7003;
t6918 = -0.2e1 * t7007;
t6919 = -0.2e1 * t7011;
t7742 = t6622 * t7647;
t7741 = t6622 * t7650;
t7740 = t6622 * t7653;
t5940 = t6664 * t5962;
t6876 = t6673 * t7007;
t6754 = t5940 + t6876;
t5941 = t6667 * t5963;
t6873 = t6676 * t7003;
t6753 = t5941 + t6873;
t5942 = t5961 * t6661;
t6879 = t6670 * t7011;
t6755 = t5942 + t6879;
t7733 = -(pkin(2) * t5841 + t7736 * pkin(6)) * t6642 - (0.4e1 * t6087 - 0.2e1 * t5952) * t6661 + t7781;
t7732 = -(pkin(2) * t5842 + t7735 * pkin(6)) * t6642 - (0.4e1 * t6088 - 0.2e1 * t5953) * t6664 + t7780;
t7731 = -(pkin(2) * t5843 + t7734 * pkin(6)) * t6642 - (0.4e1 * t6089 - 0.2e1 * t5954) * t6667 + t7779;
t7726 = -pkin(7) * t7382 - t6590;
t7725 = -pkin(7) * t7391 - t6587;
t7724 = -pkin(7) * t7400 - t6584;
t7717 = -t6456 * t6642 + t7597;
t7715 = -t6455 * t6642 + t7598;
t7713 = -t6454 * t6642 + t7599;
t7265 = t6642 * t5950;
t7441 = t6642 * t5864;
t7686 = (-pkin(1) * t6166 - 0.2e1 * t7265 + t7775) * t6643 + pkin(1) * t6917 - pkin(6) * t7441;
t7627 = pkin(6) * t6642;
t7266 = t5962 * t7627;
t7442 = t6642 * t5863;
t7685 = (-pkin(1) * t6164 - 0.2e1 * t7266 + t7774) * t6643 + pkin(1) * t6918 - pkin(6) * t7442;
t7267 = t5961 * t7627;
t7443 = t6642 * t5862;
t7684 = (-pkin(1) * t6162 - 0.2e1 * t7267 + t7773) * t6643 + pkin(1) * t6919 - pkin(6) * t7443;
t6447 = t7614 / 0.2e1 - t6537 / 0.2e1;
t6817 = t6628 * t6871;
t6878 = t6214 * t6163;
t6829 = pkin(2) * t6878;
t6942 = -t6213 / 0.2e1;
t7097 = t6162 / 0.2e1;
t7616 = t5862 * pkin(2);
t7622 = pkin(7) * t5862;
t7660 = pkin(7) / 0.2e1;
t7680 = -0.2e1 * (t7724 * t6871 + t5916) * t6622 - 0.2e1 * (((t6087 - t5952) * t6642 + pkin(1) * t6878) * t6670 + t7704 * t7438 + t6829 + (t6600 / 0.2e1 + t7660) * t5841) * t6643 - 0.2e1 * pkin(2) * t6817 - 0.2e1 * ((-t7622 / 0.2e1 + t5841 * t6689 + (t7097 + t6942) * pkin(2)) * t6642 + (pkin(7) * t6661 + pkin(1)) * t6871) * t6670 - 0.2e1 * ((-pkin(6) * t6878 + pkin(7) * t7097 - t6198 / 0.2e1 + t7616 / 0.2e1) * t6661 + t6447 * t6671 + pkin(1) * t6942 - t6591 / 0.2e1) * t6642 + 0.2e1 * t5955;
t6448 = t7613 / 0.2e1 - t6539 / 0.2e1;
t6816 = t6632 * t6867;
t6875 = t6216 * t6165;
t6830 = pkin(2) * t6875;
t6941 = -t6215 / 0.2e1;
t7096 = t6164 / 0.2e1;
t7621 = pkin(7) * t5863;
t7644 = pkin(2) * t5863;
t7679 = -0.2e1 * (t7725 * t6867 + t5918) * t6622 - 0.2e1 * (((t6088 - t5953) * t6642 + pkin(1) * t6875) * t6673 + t7702 * t7435 + t6830 + (t6601 / 0.2e1 + t7660) * t5842) * t6643 - 0.2e1 * pkin(2) * t6816 - 0.2e1 * ((-t7621 / 0.2e1 + t5842 * t6689 + (t7096 + t6941) * pkin(2)) * t6642 + (pkin(7) * t6664 + pkin(1)) * t6867) * t6673 - 0.2e1 * ((-pkin(6) * t6875 + pkin(7) * t7096 - t6201 / 0.2e1 + t7644 / 0.2e1) * t6664 + t6448 * t6674 + pkin(1) * t6941 - t6592 / 0.2e1) * t6642 + 0.2e1 * t5956;
t6449 = t7612 / 0.2e1 - t6541 / 0.2e1;
t6815 = t6636 * t6863;
t6872 = t6218 * t6167;
t6828 = pkin(2) * t6872;
t6940 = -t6217 / 0.2e1;
t7095 = t6166 / 0.2e1;
t7615 = t5864 * pkin(2);
t7620 = pkin(7) * t5864;
t7678 = -0.2e1 * (t7726 * t6863 + t5917) * t6622 - 0.2e1 * (((t6089 - t5954) * t6642 + pkin(1) * t6872) * t6676 + t7703 * t7432 + t6828 + (t6602 / 0.2e1 + t7660) * t5843) * t6643 - 0.2e1 * pkin(2) * t6815 - 0.2e1 * ((-t7620 / 0.2e1 + t5843 * t6689 + (t7095 + t6940) * pkin(2)) * t6642 + (pkin(7) * t6667 + pkin(1)) * t6863) * t6676 - 0.2e1 * ((-pkin(6) * t6872 + pkin(7) * t7095 - t6202 / 0.2e1 + t7615 / 0.2e1) * t6667 + t6449 * t6677 + pkin(1) * t6940 - t6593 / 0.2e1) * t6642 + 0.2e1 * t5950;
t6874 = t6642 * t7003;
t6077 = t6667 * t6874;
t5837 = t6077 + t6269 / 0.2e1 + t6266 / 0.2e1 + t6290 / 0.2e1 + (-t7020 / 0.2e1 + (-t7241 / 0.2e1 - t7234 / 0.2e1) * t6338) * t6700;
t6810 = t6667 * t6872;
t7444 = t6636 * t5963;
t7088 = -t7444 / 0.2e1;
t7677 = -0.2e1 * t5837 * t6676 + t7088 * t7662 + t6810;
t6880 = t6642 * t7011;
t6075 = t6661 * t6880;
t5835 = t6075 + t6267 / 0.2e1 + t6264 / 0.2e1 + t6288 / 0.2e1 + (-t7019 / 0.2e1 + (-t7243 / 0.2e1 - t7236 / 0.2e1) * t6336) * t6700;
t6814 = t6661 * t6878;
t7448 = t6628 * t5961;
t7090 = -t7448 / 0.2e1;
t7676 = -0.2e1 * t5835 * t6670 + t7090 * t7662 + t6814;
t6877 = t6642 * t7007;
t6076 = t6664 * t6877;
t5836 = t6076 + t6268 / 0.2e1 + t6265 / 0.2e1 + t6289 / 0.2e1 + (-t7018 / 0.2e1 + (-t7242 / 0.2e1 - t7235 / 0.2e1) * t6337) * t6700;
t6812 = t6664 * t6875;
t7446 = t6632 * t5962;
t7089 = -t7446 / 0.2e1;
t7675 = -0.2e1 * t5836 * t6673 + t7089 * t7662 + t6812;
t7674 = -0.2e1 * t5958;
t7673 = -0.2e1 * t5959;
t7672 = -0.2e1 * t5960;
t7656 = t7667 - 0.1e1;
t7655 = 0.2e1 * t6626 - 0.1e1;
t7652 = 0.2e1 * t6630 - 0.1e1;
t7649 = 0.2e1 * t6634 - 0.1e1;
t6620 = t6642 ^ 2;
t7606 = MDP(4) * t6620;
t7605 = MDP(5) * t6620;
t7604 = MDP(6) * t6642;
t7603 = MDP(7) * t6642;
t7596 = t5961 * t6670;
t7595 = t5962 * t6673;
t7594 = t5963 * t6676;
t7544 = t6327 * t7779;
t7543 = t6327 * t7775;
t7541 = t6329 * t7781;
t7540 = t6329 * t7773;
t7538 = t6331 * t7780;
t7537 = t6331 * t7774;
t7454 = t6622 * t6661;
t7453 = t6622 * t6664;
t7452 = t6622 * t6667;
t7430 = t6642 * t6669;
t7427 = t6642 * t6672;
t7424 = t6642 * t6675;
t7402 = t6661 * t5862;
t7393 = t6664 * t5863;
t7384 = t6667 * t5864;
t7359 = -0.2e1 * t6087 + t5952;
t7358 = -0.2e1 * t6088 + t5953;
t7357 = -0.2e1 * t6089 + t5954;
t7341 = t6261 - t6162;
t7340 = t6262 - t6164;
t7339 = t6263 - t6166;
t7315 = 0.2e1 * t6642;
t7313 = 0.4e1 * t6643;
t5937 = t6643 * t5961;
t6807 = -t5875 / 0.2e1 - t5967 / 0.2e1 - t5982 / 0.2e1 + t6231 / 0.2e1 + t6234 / 0.2e1 + t6294 / 0.2e1;
t5826 = t5937 + t6807;
t6078 = t6249 + t6163 / 0.2e1;
t7312 = -0.2e1 * (-t5826 * t6670 + t6078 * t7222) * t6329;
t5938 = t6643 * t5962;
t6806 = -t5876 / 0.2e1 - t5968 / 0.2e1 - t5983 / 0.2e1 + t6232 / 0.2e1 + t6235 / 0.2e1 + t6295 / 0.2e1;
t5827 = t5938 + t6806;
t6079 = t6250 + t6165 / 0.2e1;
t7311 = -0.2e1 * (-t5827 * t6673 + t6079 * t7215) * t6331;
t5939 = t6643 * t5963;
t6808 = -t5874 / 0.2e1 - t5969 / 0.2e1 - t5984 / 0.2e1 + t6233 / 0.2e1 + t6236 / 0.2e1 + t6296 / 0.2e1;
t5828 = t5939 + t6808;
t6080 = t6251 + t6167 / 0.2e1;
t7310 = -0.2e1 * (-t5828 * t6676 + t6080 * t7209) * t6327;
t6813 = t6661 * t6871;
t7309 = (t6813 - t7443 / 0.2e1) * t7755;
t6811 = t6664 * t6867;
t7308 = (t6811 - t7442 / 0.2e1) * t7754;
t6809 = t6667 * t6863;
t7307 = (t6809 - t7441 / 0.2e1) * t7753;
t7306 = 0.2e1 * t7551;
t7305 = 0.2e1 * t7550;
t7304 = 0.2e1 * t7549;
t7303 = 0.2e1 * t7548;
t7302 = 0.2e1 * t7547;
t7301 = 0.2e1 * t7546;
t7300 = 0.2e1 * t7545;
t7299 = 0.2e1 * t7542;
t7298 = 0.2e1 * t7539;
t7294 = pkin(6) * t7658;
t7240 = t5961 * t7400;
t7230 = (t6163 + t6214) * (t6163 - t6214) * t6642;
t7229 = (t6165 + t6216) * (t6165 - t6216) * t6642;
t7228 = (t6167 + t6218) * (t6167 - t6218) * t6642;
t7227 = t6673 * t6164;
t7197 = t6622 * t6261;
t7195 = t6661 * t6261;
t7194 = t6670 * t6261;
t7193 = t6622 * t6262;
t7191 = t6664 * t6262;
t7190 = t6673 * t6262;
t7189 = t6622 * t6263;
t7187 = t6667 * t6263;
t7186 = t6676 * t6263;
t7122 = t5961 * t7438;
t7121 = t6661 * t7430;
t7118 = t6642 * t5940;
t7117 = t6664 * t7427;
t7114 = t6642 * t5941;
t7113 = t6667 * t7424;
t7104 = t5962 * t7391;
t7103 = t5963 * t7382;
t7102 = t6670 * t6162;
t7101 = t6676 * t6166;
t7052 = -t6628 + t7485;
t7051 = -t6632 + t7484;
t7050 = -t6636 + t7483;
t7014 = t6093 * t6339 * t7568;
t7013 = t6094 * t6340 * t7566;
t7012 = t6095 * t6341 * t7564;
t6990 = t6339 * t7194;
t6989 = t6642 * t7194;
t6988 = t6340 * t7190;
t6987 = t6642 * t7190;
t6986 = t6341 * t7186;
t6985 = t6642 * t7186;
t6907 = -t6261 + t7197;
t6906 = -t6262 + t7193;
t6905 = -t6263 + t7189;
t6788 = t6642 * t6102;
t6787 = t6642 * t6103;
t6786 = t6642 * t6104;
t6779 = t6642 * t6810;
t6778 = t6642 * t6809;
t6777 = t6642 * t6814;
t6776 = t6642 * t6813;
t6775 = t6642 * t6812;
t6774 = t6642 * t6811;
t5829 = t5937 + t5862;
t5830 = t5938 + t5863;
t5831 = t5939 + t5864;
t5931 = t6643 * t7195 + t7596;
t5932 = t6643 * t7191 + t7595;
t5935 = t6643 * t7187 + t7594;
t6758 = (t6880 * t7682 + t5859) * t6643 - t6162 * t7627 + t6594;
t6757 = (t6877 * t7682 + t5860) * t6643 - t6164 * t7627 + t6595;
t6756 = (t6874 * t7682 + t5861) * t6643 - t6166 * t7627 + t6596;
t6743 = -t5841 * t7438 - t6213 * t6643 + t6919 + 0.2e1 * t7240;
t6742 = -t5842 * t7435 - t6215 * t6643 + t6918 + 0.2e1 * t7104;
t6741 = -t5843 * t7432 - t6217 * t6643 + t6917 + 0.2e1 * t7103;
t6716 = t6670 * t6788 + t6907 * t7759 - t6213 - t6907;
t6715 = t6673 * t6787 + t6906 * t7758 - t6215 - t6906;
t6714 = t6676 * t6786 + t6905 * t7757 - t6217 - t6905;
t6713 = t7194 * t7454 + (t6788 - t7194) * t6661 - t5829;
t6712 = t7190 * t7453 + (t6787 - t7190) * t6664 - t5830;
t6711 = t7186 * t7452 + (t6786 - t7186) * t6667 - t5831;
t6248 = -0.2e1 * t7125;
t6247 = -0.2e1 * t7126;
t6246 = -0.2e1 * t7127;
t6176 = t6248 + t6263;
t6175 = t6247 + t6262;
t6174 = t6246 + t6261;
t6098 = -0.2e1 * t6778;
t6097 = -0.2e1 * t6774;
t6096 = -0.2e1 * t6776;
t6085 = t6251 + 0.2e1 * t6167;
t6083 = t6250 + 0.2e1 * t6165;
t6081 = t6249 + 0.2e1 * t6163;
t6068 = -0.2e1 * t6872;
t6067 = 0.4e1 * t6872;
t6066 = -0.2e1 * t6875;
t6065 = 0.4e1 * t6875;
t6064 = -0.2e1 * t6878;
t6063 = 0.4e1 * t6878;
t5999 = (t6263 * t7050 + t6643 * t6917 + t7339) * t7385 - t7649 * t6086 * t6970;
t5998 = (t6262 * t7051 + t6643 * t6918 + t7340) * t7394 - t7652 * t6084 * t6976;
t5997 = (t6261 * t7052 + t6643 * t6919 + t7341) * t7403 - t7655 * t6082 * t6981;
t5993 = (-0.2e1 * t6166 + t6248 + 0.2e1 * t6263) * t6634 + (0.4e1 * t7113 * t7582 + (-0.4e1 * t6634 + 0.2e1) * t7111) * t7565 + (t7483 * t7649 + t6636) * t6263 - t7339;
t5992 = (-0.2e1 * t6164 + t6247 + 0.2e1 * t6262) * t6630 + (0.4e1 * t7117 * t7583 + (-0.4e1 * t6630 + 0.2e1) * t7217) * t7567 + (t7484 * t7652 + t6632) * t6262 - t7340;
t5991 = (-0.2e1 * t6162 + t6246 + 0.2e1 * t6261) * t6626 + (0.4e1 * t7121 * t7584 + (-0.4e1 * t6626 + 0.2e1) * t7224) * t7569 + (t7485 * t7655 + t6628) * t6261 - t7341;
t5948 = 0.2e1 * t5960;
t5947 = 0.2e1 * t5959;
t5946 = 0.2e1 * t5958;
t5936 = t6643 * t7186 - t5941;
t5934 = t6643 * t7190 - t5940;
t5933 = t6643 * t7194 - t5942;
t5930 = t6239 - t7265;
t5929 = t6238 - t7266;
t5928 = t6237 - t7267;
t5912 = t5963 * t6675 - t6666 * t6863;
t5911 = t5962 * t6672 - t6663 * t6867;
t5910 = t5961 * t6669 - t6660 * t6871;
t5909 = t5963 * t6666 + t6675 * t6863;
t5908 = t5962 * t6663 + t6672 * t6867;
t5907 = t5961 * t6660 + t6669 * t6871;
t5891 = t5941 + 0.2e1 * t6873;
t5890 = t5940 + 0.2e1 * t6876;
t5889 = t5942 + 0.2e1 * t6879;
t5888 = t7103 + (t7757 - 0.1e1) * t7003;
t5887 = t7104 + (t7758 - 0.1e1) * t7007;
t5886 = t7240 + (t7759 - 0.1e1) * t7011;
t5885 = t6676 * t5930 - t7717 * t6667;
t5884 = t6667 * t5930 + t7717 * t6676;
t5883 = t6673 * t5929 - t7715 * t6664;
t5882 = t6664 * t5929 + t7715 * t6673;
t5881 = t6670 * t5928 - t7713 * t6661;
t5880 = t6661 * t5928 + t7713 * t6670;
t5867 = ((pkin(7) * t6676 - t7637) * t7188 + t6456) * t6643 + ((t5951 + 0.2e1 * t6899) * t6676 + t7357 * t6667 + t6792) * t6642 - t7294 * t6263;
t5866 = ((pkin(7) * t6673 - t7639) * t7192 + t6455) * t6643 + ((t5957 + 0.2e1 * t6900) * t6673 + t7358 * t6664 + t6793) * t6642 - t7294 * t6262;
t5865 = ((pkin(7) * t6670 - t7641) * t7196 + t6454) * t6643 + ((t5949 + 0.2e1 * t6901) * t6670 + t7359 * t6661 + t6794) * t6642 - t7294 * t6261;
t5858 = -0.2e1 * t7644;
t5857 = 0.2e1 * t7644;
t5856 = -0.2e1 * t7615;
t5855 = 0.2e1 * t7615;
t5854 = -0.2e1 * t7616;
t5853 = 0.2e1 * t7616;
t5825 = t6080 * t6167 * t6676 + t5828 * t6667;
t5823 = t6079 * t6165 * t6673 + t5827 * t6664;
t5821 = t6078 * t6163 * t6670 + t5826 * t6661;
t5819 = t5935 * t6642 - t5843;
t5818 = t5932 * t6642 - t5842;
t5817 = t5931 * t6642 - t5841;
t5816 = -t5963 * t7423 + t5843 + t6077;
t5815 = -t5962 * t7426 + t5842 + t6076;
t5814 = -t5961 * t7429 + t5841 + t6075;
t5810 = -t6666 * t5819 - t6675 * t6714;
t5809 = -t6675 * t5819 + t6666 * t6714;
t5808 = -t6663 * t5818 - t6672 * t6715;
t5807 = -t6672 * t5818 + t6663 * t6715;
t5806 = -t6660 * t5817 - t6669 * t6716;
t5805 = -t6669 * t5817 + t6660 * t6716;
t5804 = (-t6085 * t7433 + t6675 * t6862) * t7169 + t6675 * t5831 - t6666 * t7114;
t5803 = (t6085 * t7424 + t6666 * t6862) * t7169 + t6666 * t5831 + t5963 * t7113;
t5802 = (-t6083 * t7436 + t6672 * t6866) * t7175 + t6672 * t5830 - t6663 * t7118;
t5801 = (-t6081 * t7439 + t6669 * t6870) * t7181 + t6669 * t5829 - t6660 * t7122;
t5800 = (t6083 * t7427 + t6663 * t6866) * t7175 + t6663 * t5830 + t5962 * t7117;
t5799 = (t6081 * t7430 + t6660 * t6870) * t7181 + t6660 * t5829 + t5961 * t7121;
t5798 = (t6263 * t6570 + t5954) * t7423 + (pkin(7) * t6970 - 0.2e1 * t7034) * t6251 - pkin(2) * t7114 - 0.2e1 * t6828 - t7617;
t5797 = (t6262 * t6570 + t5953) * t7426 + (pkin(7) * t6976 - 0.2e1 * t7036) * t6250 - pkin(2) * t7118 - 0.2e1 * t6830 - t7618;
t5796 = (t6261 * t6570 + t5952) * t7429 + (pkin(7) * t6981 - 0.2e1 * t7038) * t6249 - pkin(2) * t7122 - 0.2e1 * t6829 - t7619;
t5795 = t7726 * t7189 + (-t5927 * t6667 - t7357) * t6643 + (-pkin(6) * t7594 + t6456 * t6667) * t6642 + (pkin(7) * t7187 + t6239) * t6676 - t7620 + (t7189 + t7125 + t6166) * pkin(2);
t5794 = t7725 * t7193 + (-t5926 * t6664 - t7358) * t6643 + (-pkin(6) * t7595 + t6455 * t6664) * t6642 + (pkin(7) * t7191 + t6238) * t6673 - t7621 + (t7193 + t7126 + t6164) * pkin(2);
t5793 = t7724 * t7197 + (-t5925 * t6661 - t7359) * t6643 + (-pkin(6) * t7596 + t6454 * t6661) * t6642 + (pkin(7) * t7195 + t6237) * t6670 - t7622 + (t7197 + t7127 + t6162) * pkin(2);
t5792 = ((t7752 - 0.2e1 * t6985) * t6643 + 0.2e1 * t7114 + t6067) * t6634 - 0.2e1 * t6711 * t7385 + (-0.2e1 * t6218 + t6969) * t6251 - t7114 + t6068;
t5791 = ((t7751 - 0.2e1 * t6987) * t6643 + 0.2e1 * t7118 + t6065) * t6630 - 0.2e1 * t6712 * t7394 + (-0.2e1 * t6216 + t6975) * t6250 - t7118 + t6066;
t5790 = ((t7750 - 0.2e1 * t6989) * t6643 + 0.2e1 * t7122 + t6063) * t6626 - 0.2e1 * t6713 * t7403 + (-0.2e1 * t6214 + t6980) * t6249 - t7122 + t6064;
t5786 = (t5948 + t6423 + t6756) * t6676 + t7686 * t6667;
t5785 = (t5947 + t6420 + t6757) * t6673 + t7685 * t6664;
t5784 = (t5946 + t6417 + t6758) * t6670 + t7684 * t6661;
t5783 = t7686 * t6676 + (-0.2e1 * t6449 * t6668 - t6756 + t7672) * t6667;
t5782 = t7685 * t6673 + (-0.2e1 * t6448 * t6665 - t6757 + t7673) * t6664;
t5781 = t7684 * t6670 + (-0.2e1 * t6447 * t6662 - t6758 + t7674) * t6661;
t5780 = t5795 * t6675 + t5867 * t6666;
t5779 = t5795 * t6666 - t5867 * t6675;
t5778 = t5794 * t6672 + t5866 * t6663;
t5777 = t5794 * t6663 - t5866 * t6672;
t5776 = t5793 * t6669 + t5865 * t6660;
t5775 = t5793 * t6660 - t5865 * t6669;
t5774 = t6711 * t6634 + (t7114 + (t6104 - t6985) * t6643 + 0.2e1 * t6872) * t7385 - t6778 + t5831;
t5773 = t6712 * t6630 + (t7118 + (t6103 - t6987) * t6643 + 0.2e1 * t6875) * t7394 - t6774 + t5830;
t5772 = t6713 * t6626 + (t7122 + (t6102 - t6989) * t6643 + 0.2e1 * t6878) * t7403 - t6776 + t5829;
t5771 = t5798 * t6675 + (t5856 - t7788) * t6666;
t5770 = t5798 * t6666 + (t5855 + t7788) * t6675;
t5769 = t6672 * t5797 + (t5858 - t7789) * t6663;
t5768 = t5797 * t6663 + (t5857 + t7789) * t6672;
t5767 = t5796 * t6669 + (t5854 - t7790) * t6660;
t5766 = t5796 * t6660 + (t5853 + t7790) * t6669;
t5765 = (t5837 * t6675 - t5912 * t7423) * t7756 + t6675 * t7307 + (t5909 * t6676 * t7668 + t6675 * t7228) * t6667 + ((t7664 - t7742) * t7003 + t6741) * t6666;
t5764 = (-t5909 * t7440 + t5912 * t7452) * t7753 + (t5837 * t7756 + t6667 * t7228 + t7307) * t6666 + ((-0.4e1 * t6636 + t7742) * t7003 - t6741) * t6675;
t5763 = (t5836 * t6672 - t5911 * t7426) * t7756 + t6672 * t7308 + (t5908 * t6673 * t7668 + t6672 * t7229) * t6664 + ((t7665 - t7741) * t7007 + t6742) * t6663;
t5762 = (-t5908 * t7440 + t5911 * t7453) * t7754 + (t5836 * t7756 + t6664 * t7229 + t7308) * t6663 + ((-0.4e1 * t6632 + t7741) * t7007 - t6742) * t6672;
t5761 = (t5835 * t6669 - t5910 * t7429) * t7756 + t6669 * t7309 + (t5907 * t6670 * t7668 + t6669 * t7230) * t6661 + ((t7666 - t7740) * t7011 + t6743) * t6660;
t5760 = (-t5907 * t7440 + t5910 * t7454) * t7755 + (t5835 * t7756 + t6661 * t7230 + t7309) * t6660 + ((-0.4e1 * t6628 + t7740) * t7011 - t6743) * t6669;
t5759 = ((-0.2e1 * t6008 - 0.2e1 * t6299 - 0.2e1 * t6302 - 0.2e1 * t6311 + 0.2e1 * t7237 + t7444) * t6622 + (0.4e1 * t6778 - t5864) * t6643 - t7444 + (t7656 * t7591 + (-t7169 * t7657 + 0.2e1 * t6993) * t6667) * t6167 + t6759) * t6634 + 0.2e1 * ((t6753 * t6643 + t6676 * t7095 + t7384 / 0.2e1) * t6642 + (t7111 + (t7455 - t7483) * t7565) * t6218) * t7385 + t6622 * t5963 + (t6098 + t5864) * t6643 - t6779;
t5758 = ((-0.2e1 * t6006 - 0.2e1 * t6297 - 0.2e1 * t6300 - 0.2e1 * t6309 + 0.2e1 * t7239 + t7448) * t6622 + (0.4e1 * t6776 - t5862) * t6643 - t7448 + (t7656 * t7593 + (-t7181 * t7657 + 0.2e1 * t6999) * t6661) * t6163 + t6761) * t6626 + 0.2e1 * ((t6755 * t6643 + t6670 * t7097 + t7402 / 0.2e1) * t6642 + (t7224 + (t7457 - t7485) * t7569) * t6214) * t7403 + t6622 * t5961 + (t6096 + t5862) * t6643 - t6777;
t5757 = ((-0.2e1 * t6007 - 0.2e1 * t6298 - 0.2e1 * t6301 - 0.2e1 * t6310 + 0.2e1 * t7238 + t7446) * t6622 + (0.4e1 * t6774 - t5863) * t6643 - t7446 + (t7656 * t7592 + (-t7175 * t7657 + 0.2e1 * t6996) * t6664) * t6165 + t6760) * t6630 + 0.2e1 * ((t6754 * t6643 + t6673 * t7096 + t7393 / 0.2e1) * t6642 + (t7217 + (t7456 - t7484) * t7567) * t6216) * t7394 + t6622 * t5962 + (t6097 + t5863) * t6643 - t6775;
t5756 = (t6067 * t6643 + (-t7050 - 0.1e1) * t7752) * t6634 + 0.4e1 * ((t7088 + (t6667 * t7169 - t7591) * t6167 + t6759) * t6622 + (t6098 + t6808) * t6643 - t6667 * t6873 - t6779 + t7444 / 0.2e1 - t6299 / 0.2e1 - t6302 / 0.2e1 - t6311 / 0.2e1 + t7237 / 0.2e1 + t7015 / 0.2e1 - t6008 / 0.2e1) * t7385 + t6104 * t7483 + (-t6753 * t7315 + t6068) * t6643 - 0.2e1 * t6815 + t6104 + ((t6753 * t7313 + 0.2e1 * t7101 + 0.2e1 * t7384) * t6634 - t7101 - t7384) * t6642;
t5755 = (t6065 * t6643 + (-t7051 - 0.1e1) * t7751) * t6630 + 0.4e1 * ((t7089 + (t6664 * t7175 - t7592) * t6165 + t6760) * t6622 + (t6097 + t6806) * t6643 - t6664 * t6876 - t6775 + t7446 / 0.2e1 - t6298 / 0.2e1 - t6301 / 0.2e1 - t6310 / 0.2e1 + t7238 / 0.2e1 + t7016 / 0.2e1 - t6007 / 0.2e1) * t7394 + t6103 * t7484 + (-t6754 * t7315 + t6066) * t6643 - 0.2e1 * t6816 + t6103 + ((t6754 * t7313 + 0.2e1 * t7227 + 0.2e1 * t7393) * t6630 - t7227 - t7393) * t6642;
t5754 = (t6063 * t6643 + (-t7052 - 0.1e1) * t7750) * t6626 + 0.4e1 * ((t7090 + (t6661 * t7181 - t7593) * t6163 + t6761) * t6622 + (t6096 + t6807) * t6643 - t6661 * t6879 - t6777 + t7448 / 0.2e1 - t6297 / 0.2e1 - t6300 / 0.2e1 - t6309 / 0.2e1 + t7239 / 0.2e1 + t7017 / 0.2e1 - t6006 / 0.2e1) * t7403 + t6102 * t7485 + (-t6755 * t7315 + t6064) * t6643 - 0.2e1 * t6817 + t6102 + ((t6755 * t7313 + 0.2e1 * t7102 + 0.2e1 * t7402) * t6626 - t7102 - t7402) * t6642;
t5750 = ((t5855 + t7764) * t6643 + (t5948 + t7731) * t6676 + t7767) * t6675 + t6666 * t7678;
t5749 = ((t5856 - t7764) * t6643 + (t7672 - t7731) * t6676 - t7767) * t6666 + t6675 * t7678;
t5748 = ((t5857 + t7765) * t6643 + (t5947 + t7732) * t6673 + t7768) * t6672 + t6663 * t7679;
t5747 = ((t5858 - t7765) * t6643 + (t7673 - t7732) * t6673 - t7768) * t6663 + t6672 * t7679;
t5746 = ((t5853 + t7766) * t6643 + (t5946 + t7733) * t6670 + t7769) * t6669 + t6660 * t7680;
t5745 = ((t5854 - t7766) * t6643 + (t7674 - t7733) * t6670 - t7769) * t6660 + t6669 * t7680;
t1 = [(t5961 * t7551 + t5962 * t7550 + t5963 * t7549) * MDP(1) + (t6312 * t7541 + t6313 * t7538 + t6314 * t7544) * MDP(2) + (t6312 * t7540 + t6313 * t7537 + t6314 * t7543) * MDP(3) + ((t5891 * t7549 - t6275 * t6986) * t6667 + (t5890 * t7550 - t6274 * t6988) * t6664 + (t5889 * t7551 - t6273 * t6990) * t6661) * t7606 + (t5886 * t7306 + t5887 * t7305 + t5888 * t7304 + t6174 * t7572 + t6175 * t7571 + t6176 * t7570) * t7605 + (t5821 * t7306 + t5823 * t7305 + t5825 * t7304 - t5933 * t7572 - t5934 * t7571 - t5936 * t7570) * t7604 + (t5931 * t7572 + t5932 * t7571 + t5935 * t7570 + t6312 * t7312 + t6313 * t7311 + t6314 * t7310) * t7603 + (t5829 * t7572 + t5830 * t7571 + t5831 * t7570 + (t5829 * t7551 + t5830 * t7550 + t5831 * t7549) * t6643) * MDP(8) + (t5784 * t7551 + t5785 * t7550 + t5786 * t7549 + t5880 * t7572 + t5882 * t7571 + t5884 * t7570) * MDP(9) + (t5781 * t7551 + t5782 * t7550 + t5783 * t7549 + t5881 * t7572 + t5883 * t7571 + t5885 * t7570) * MDP(10) + (t5757 * t7550 + t5758 * t7551 + t5759 * t7549 + t5772 * t7572 + t5773 * t7571 + t5774 * t7570 + (t5997 * t7560 + t5998 * t7559 + t5999 * t7558) * t6700) * MDP(11) + (t5754 * t7551 + t5755 * t7550 + t5756 * t7549 + t5790 * t7572 + t5791 * t7571 + t5792 * t7570 + (t5991 * t7560 + t5992 * t7559 + t5993 * t7558) * t6700) * MDP(12) + (t5760 * t7551 + t5762 * t7550 + t5764 * t7549 + t5806 * t7572 + t5808 * t7571 + t5810 * t7570 + (t5799 * t7560 + t5800 * t7559 + t5803 * t7558) * t6700) * MDP(13) + (t5761 * t7551 + t5763 * t7550 + t5765 * t7549 + t5805 * t7572 + t5807 * t7571 + t5809 * t7570 + (t5801 * t7560 + t5802 * t7559 + t5804 * t7558) * t6700) * MDP(14) + ((t5814 * t7560 + t5815 * t7559 + t5816 * t7558) * t6700 + ((t6274 * t7013 + t6313 * t7675) * t6331 + (t6273 * t7014 + t6312 * t7676) * t6329 + (t6275 * t7012 + t6314 * t7677) * t6327) * t6642) * MDP(15) + (t5746 * t7551 + t5748 * t7550 + t5750 * t7549 + t5766 * t7572 + t5768 * t7571 + t5770 * t7570 + (t5775 * t7560 + t5777 * t7559 + t5779 * t7558) * t6700) * MDP(16) + (t5745 * t7551 + t5747 * t7550 + t5749 * t7549 + t5767 * t7572 + t5769 * t7571 + t5771 * t7570 + (t5776 * t7560 + t5778 * t7559 + t5780 * t7558) * t6700) * MDP(17) + (t6659 - g(1)) * MDP(18); (t5961 * t7548 + t5962 * t7547 + t5963 * t7546) * MDP(1) + (t6315 * t7541 + t6316 * t7538 + t6317 * t7544) * MDP(2) + (t6315 * t7540 + t6316 * t7537 + t6317 * t7543) * MDP(3) + ((t5891 * t7546 - t6272 * t6986) * t6667 + (t5890 * t7547 - t6271 * t6988) * t6664 + (t5889 * t7548 - t6270 * t6990) * t6661) * t7606 + (t5886 * t7303 + t5887 * t7302 + t5888 * t7301 + t6174 * t7575 + t6175 * t7574 + t6176 * t7573) * t7605 + (t5821 * t7303 + t5823 * t7302 + t5825 * t7301 - t5933 * t7575 - t5934 * t7574 - t5936 * t7573) * t7604 + (t5931 * t7575 + t5932 * t7574 + t5935 * t7573 + t6315 * t7312 + t6316 * t7311 + t6317 * t7310) * t7603 + (t5829 * t7575 + t5830 * t7574 + t5831 * t7573 + (t5829 * t7548 + t5830 * t7547 + t5831 * t7546) * t6643) * MDP(8) + (t5784 * t7548 + t5785 * t7547 + t5786 * t7546 + t5880 * t7575 + t5882 * t7574 + t5884 * t7573) * MDP(9) + (t5781 * t7548 + t5782 * t7547 + t5783 * t7546 + t5881 * t7575 + t5883 * t7574 + t5885 * t7573) * MDP(10) + (t5757 * t7547 + t5758 * t7548 + t5759 * t7546 + t5772 * t7575 + t5773 * t7574 + t5774 * t7573 + (t5997 * t7563 + t5998 * t7562 + t5999 * t7561) * t6700) * MDP(11) + (t5754 * t7548 + t5755 * t7547 + t5756 * t7546 + t5790 * t7575 + t5791 * t7574 + t5792 * t7573 + (t5991 * t7563 + t5992 * t7562 + t5993 * t7561) * t6700) * MDP(12) + (t5760 * t7548 + t5762 * t7547 + t5764 * t7546 + t5806 * t7575 + t5808 * t7574 + t5810 * t7573 + (t5799 * t7563 + t5800 * t7562 + t5803 * t7561) * t6700) * MDP(13) + (t5761 * t7548 + t5763 * t7547 + t5765 * t7546 + t5805 * t7575 + t5807 * t7574 + t5809 * t7573 + (t5801 * t7563 + t5802 * t7562 + t5804 * t7561) * t6700) * MDP(14) + ((t5814 * t7563 + t5815 * t7562 + t5816 * t7561) * t6700 + ((t6271 * t7013 + t6316 * t7675) * t6331 + (t6270 * t7014 + t6315 * t7676) * t6329 + (t6272 * t7012 + t6317 * t7677) * t6327) * t6642) * MDP(15) + (t5746 * t7548 + t5748 * t7547 + t5750 * t7546 + t5766 * t7575 + t5768 * t7574 + t5770 * t7573 + (t5775 * t7563 + t5777 * t7562 + t5779 * t7561) * t6700) * MDP(16) + (t5745 * t7548 + t5747 * t7547 + t5749 * t7546 + t5767 * t7575 + t5769 * t7574 + t5771 * t7573 + (t5776 * t7563 + t5778 * t7562 + t5780 * t7561) * t6700) * MDP(17) + (t6658 - g(2)) * MDP(18); (t5961 * t7542 + t5962 * t7539 + t5963 * t7545) * MDP(1) + (t6360 * t7541 + t6361 * t7538 + t6362 * t7544) * MDP(2) + (t6360 * t7540 + t6361 * t7537 + t6362 * t7543) * MDP(3) + ((t5891 * t7545 - t6308 * t6986) * t6667 + (t5890 * t7539 - t6307 * t6988) * t6664 + (t5889 * t7542 - t6306 * t6990) * t6661) * t7606 + (t5886 * t7299 + t5887 * t7298 + t5888 * t7300 + t6174 * t7554 + t6175 * t7553 + t6176 * t7552) * t7605 + (t5821 * t7299 + t5823 * t7298 + t5825 * t7300 - t5933 * t7554 - t5934 * t7553 - t5936 * t7552) * t7604 + (t5931 * t7554 + t5932 * t7553 + t5935 * t7552 + t6360 * t7312 + t6361 * t7311 + t6362 * t7310) * t7603 + (t5829 * t7554 + t5830 * t7553 + t5831 * t7552 + (t5829 * t7542 + t5830 * t7539 + t5831 * t7545) * t6643) * MDP(8) + (t5784 * t7542 + t5785 * t7539 + t5786 * t7545 + t5880 * t7554 + t5882 * t7553 + t5884 * t7552) * MDP(9) + (t5781 * t7542 + t5782 * t7539 + t5783 * t7545 + t5881 * t7554 + t5883 * t7553 + t5885 * t7552) * MDP(10) + (t5757 * t7539 + t5758 * t7542 + t5759 * t7545 + t5772 * t7554 + t5773 * t7553 + t5774 * t7552 + (t5997 * t7557 + t5998 * t7556 + t5999 * t7555) * t7420) * MDP(11) + (t5754 * t7542 + t5755 * t7539 + t5756 * t7545 + t5790 * t7554 + t5791 * t7553 + t5792 * t7552 + (t5991 * t7557 + t5992 * t7556 + t5993 * t7555) * t7420) * MDP(12) + (t5760 * t7542 + t5762 * t7539 + t5764 * t7545 + t5806 * t7554 + t5808 * t7553 + t5810 * t7552 + (t5799 * t7557 + t5800 * t7556 + t5803 * t7555) * t7420) * MDP(13) + (t5761 * t7542 + t5763 * t7539 + t5765 * t7545 + t5805 * t7554 + t5807 * t7553 + t5809 * t7552 + (t5801 * t7557 + t5802 * t7556 + t5804 * t7555) * t7420) * MDP(14) + ((t6307 * t7013 + t6361 * t7675) * t6331 + (t6306 * t7014 + t6360 * t7676) * t6329 + (t6308 * t7012 + t6362 * t7677) * t6327 + (t5814 * t7557 + t5815 * t7556 + t5816 * t7555) * t6700) * t6642 * MDP(15) + (t5746 * t7542 + t5748 * t7539 + t5750 * t7545 + t5766 * t7554 + t5768 * t7553 + t5770 * t7552 + (t5775 * t7557 + t5777 * t7556 + t5779 * t7555) * t7420) * MDP(16) + (t5745 * t7542 + t5747 * t7539 + t5749 * t7545 + t5767 * t7554 + t5769 * t7553 + t5771 * t7552 + (t5776 * t7557 + t5778 * t7556 + t5780 * t7555) * t7420) * MDP(17) + (t6657 - g(3)) * MDP(18);];
tauX  = t1;
