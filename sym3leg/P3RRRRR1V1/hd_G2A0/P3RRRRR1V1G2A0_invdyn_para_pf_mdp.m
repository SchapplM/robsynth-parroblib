% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR1V1G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRRRR1V1G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(4,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:35:02
% EndTime: 2020-08-07 03:35:26
% DurationCPUTime: 26.10s
% Computational Cost: add. (139290->973), mult. (271731->1620), div. (22212->15), fcn. (212868->84), ass. (0->656)
t2491 = qJ(2,3) + qJ(3,3);
t2454 = qJ(1,3) + t2491;
t2430 = cos(t2454);
t2455 = qJ(1,3) - t2491;
t2431 = cos(t2455);
t2319 = t2431 + t2430;
t2493 = qJ(2,2) + qJ(3,2);
t2456 = qJ(1,2) + t2493;
t2432 = cos(t2456);
t2457 = qJ(1,2) - t2493;
t2433 = cos(t2457);
t2320 = t2433 + t2432;
t2495 = qJ(2,1) + qJ(3,1);
t2458 = qJ(1,1) + t2495;
t2434 = cos(t2458);
t2459 = qJ(1,1) - t2495;
t2435 = cos(t2459);
t2321 = t2435 + t2434;
t2889 = pkin(2) ^ 2;
t2888 = 2 * pkin(1);
t2511 = cos(qJ(3,3));
t2481 = t2511 ^ 2;
t2514 = cos(qJ(3,2));
t2484 = t2514 ^ 2;
t2517 = cos(qJ(3,1));
t2487 = t2517 ^ 2;
t2498 = legFrame(1,2);
t2462 = sin(t2498);
t2465 = cos(t2498);
t2327 = g(1) * t2465 - g(2) * t2462;
t2510 = sin(qJ(1,1));
t2519 = cos(qJ(1,1));
t2300 = g(3) * t2519 + t2327 * t2510;
t2520 = xDP(3);
t2521 = xDP(2);
t2522 = xDP(1);
t2285 = -t2510 * t2520 + (-t2462 * t2521 + t2465 * t2522) * t2519;
t2279 = t2285 ^ 2;
t2453 = cos(t2495);
t2518 = cos(qJ(2,1));
t2330 = pkin(2) * t2518 + pkin(3) * t2453 + pkin(1);
t2318 = 0.1e1 / t2330 ^ 2;
t2786 = t2279 * t2318;
t2255 = pkin(1) * t2786 + t2300;
t2324 = g(1) * t2462 + g(2) * t2465;
t2509 = sin(qJ(2,1));
t2249 = t2255 * t2518 - t2324 * t2509;
t2497 = legFrame(2,2);
t2461 = sin(t2497);
t2464 = cos(t2497);
t2326 = g(1) * t2464 - g(2) * t2461;
t2507 = sin(qJ(1,2));
t2516 = cos(qJ(1,2));
t2299 = g(3) * t2516 + t2326 * t2507;
t2284 = -t2507 * t2520 + (-t2461 * t2521 + t2464 * t2522) * t2516;
t2278 = t2284 ^ 2;
t2451 = cos(t2493);
t2515 = cos(qJ(2,2));
t2329 = pkin(2) * t2515 + pkin(3) * t2451 + pkin(1);
t2316 = 0.1e1 / t2329 ^ 2;
t2787 = t2278 * t2316;
t2254 = pkin(1) * t2787 + t2299;
t2323 = g(1) * t2461 + g(2) * t2464;
t2506 = sin(qJ(2,2));
t2247 = t2254 * t2515 - t2323 * t2506;
t2496 = legFrame(3,2);
t2460 = sin(t2496);
t2463 = cos(t2496);
t2325 = g(1) * t2463 - g(2) * t2460;
t2504 = sin(qJ(1,3));
t2513 = cos(qJ(1,3));
t2298 = g(3) * t2513 + t2325 * t2504;
t2283 = -t2504 * t2520 + (-t2460 * t2521 + t2463 * t2522) * t2513;
t2277 = t2283 ^ 2;
t2449 = cos(t2491);
t2512 = cos(qJ(2,3));
t2328 = pkin(2) * t2512 + pkin(3) * t2449 + pkin(1);
t2314 = 0.1e1 / t2328 ^ 2;
t2788 = t2277 * t2314;
t2253 = pkin(1) * t2788 + t2298;
t2322 = g(1) * t2460 + g(2) * t2463;
t2503 = sin(qJ(2,3));
t2245 = t2253 * t2512 - t2322 * t2503;
t2883 = -0.2e1 * pkin(2);
t2526 = 0.1e1 / pkin(2);
t2502 = sin(qJ(3,3));
t2723 = t2512 * t2522;
t2724 = t2512 * t2521;
t2736 = t2504 * t2522;
t2737 = t2504 * t2521;
t2238 = 0.2e1 * ((-t2503 * t2736 - t2724) * t2463 + t2460 * (t2503 * t2737 - t2723)) * t2502 + 0.2e1 * ((-t2503 * t2521 + t2504 * t2723) * t2463 - t2460 * (t2503 * t2522 + t2504 * t2724)) * t2511 + t2319 * t2520;
t2475 = 0.1e1 / t2502;
t2812 = t2238 * t2475;
t2623 = t2812 / 0.2e1;
t2232 = t2526 * t2623;
t2842 = pkin(3) * t2511;
t2439 = pkin(2) + t2842;
t2838 = pkin(3) * t2522;
t2692 = t2502 * t2838;
t2839 = pkin(3) * t2521;
t2693 = t2502 * t2839;
t2722 = t2513 * t2520;
t2229 = ((-t2439 * t2736 + t2693) * t2463 + (t2439 * t2737 + t2692) * t2460 - t2439 * t2722) * t2512 + t2503 * ((t2439 * t2521 + t2504 * t2692) * t2463 + (t2439 * t2522 - t2504 * t2693) * t2460 + t2502 * pkin(3) * t2722);
t2524 = 0.1e1 / pkin(3);
t2713 = t2524 * t2526;
t2671 = t2229 * t2713;
t2593 = t2475 * t2671;
t2211 = t2232 + t2593 / 0.2e1;
t2882 = -0.2e1 * t2211;
t2505 = sin(qJ(3,2));
t2719 = t2515 * t2522;
t2720 = t2515 * t2521;
t2731 = t2507 * t2522;
t2732 = t2507 * t2521;
t2239 = 0.2e1 * ((-t2506 * t2731 - t2720) * t2464 + t2461 * (t2506 * t2732 - t2719)) * t2505 + 0.2e1 * ((-t2506 * t2521 + t2507 * t2719) * t2464 - t2461 * (t2506 * t2522 + t2507 * t2720)) * t2514 + t2320 * t2520;
t2477 = 0.1e1 / t2505;
t2811 = t2239 * t2477;
t2621 = t2811 / 0.2e1;
t2233 = t2526 * t2621;
t2841 = pkin(3) * t2514;
t2440 = pkin(2) + t2841;
t2688 = t2505 * t2838;
t2689 = t2505 * t2839;
t2718 = t2516 * t2520;
t2230 = ((-t2440 * t2731 + t2689) * t2464 + (t2440 * t2732 + t2688) * t2461 - t2440 * t2718) * t2515 + t2506 * ((t2440 * t2521 + t2507 * t2688) * t2464 + (t2440 * t2522 - t2507 * t2689) * t2461 + t2505 * pkin(3) * t2718);
t2670 = t2230 * t2713;
t2592 = t2477 * t2670;
t2212 = t2233 + t2592 / 0.2e1;
t2881 = -0.2e1 * t2212;
t2508 = sin(qJ(3,1));
t2715 = t2518 * t2522;
t2716 = t2518 * t2521;
t2726 = t2510 * t2522;
t2727 = t2510 * t2521;
t2240 = 0.2e1 * ((-t2509 * t2726 - t2716) * t2465 + t2462 * (t2509 * t2727 - t2715)) * t2508 + 0.2e1 * ((-t2509 * t2521 + t2510 * t2715) * t2465 - t2462 * (t2509 * t2522 + t2510 * t2716)) * t2517 + t2321 * t2520;
t2479 = 0.1e1 / t2508;
t2810 = t2240 * t2479;
t2619 = t2810 / 0.2e1;
t2234 = t2526 * t2619;
t2840 = pkin(3) * t2517;
t2441 = pkin(2) + t2840;
t2684 = t2508 * t2838;
t2685 = t2508 * t2839;
t2714 = t2519 * t2520;
t2231 = ((-t2441 * t2726 + t2685) * t2465 + (t2441 * t2727 + t2684) * t2462 - t2441 * t2714) * t2518 + t2509 * ((t2441 * t2521 + t2510 * t2684) * t2465 + (t2441 * t2522 - t2510 * t2685) * t2462 + t2508 * pkin(3) * t2714);
t2669 = t2231 * t2713;
t2591 = t2479 * t2669;
t2213 = t2234 + t2591 / 0.2e1;
t2880 = -0.2e1 * t2213;
t2523 = pkin(3) ^ 2;
t2879 = -0.2e1 * t2523;
t2878 = -g(1) / 0.4e1;
t2877 = g(1) / 0.4e1;
t2876 = -g(2) / 0.4e1;
t2875 = g(2) / 0.4e1;
t2874 = g(3) / 0.2e1;
t2217 = t2232 + t2593;
t2831 = t2217 * pkin(3);
t2698 = t2511 * t2831;
t2205 = t2623 + t2698;
t2208 = -0.2e1 * t2831;
t2739 = t2502 * t2512;
t2694 = pkin(3) * t2739;
t2301 = t2439 * t2503 + t2694;
t2466 = t2511 * pkin(2);
t2828 = t2481 * pkin(3);
t2358 = -pkin(3) + t2466 + 0.2e1 * t2828;
t2482 = t2512 ^ 2;
t2483 = t2513 ^ 2;
t2632 = t2511 * t2812;
t2738 = t2503 * t2512;
t2635 = t2502 * t2738;
t2313 = 0.1e1 / t2328;
t2775 = t2313 * t2513;
t2660 = t2283 * t2775;
t2740 = t2502 * t2503;
t2695 = pkin(3) * t2740;
t2708 = 0.2e1 * t2842;
t2776 = t2313 * t2504;
t2873 = -((0.4e1 * t2217 * t2828 + t2208 + t2632) * t2482 - 0.2e1 * (t2623 + 0.2e1 * t2698) * t2635 - t2208 + t2208 * t2481) * t2483 / 0.4e1 + t2504 * (t2358 * t2738 + ((pkin(2) + t2708) * t2482 - t2439) * t2502) * t2660 / 0.2e1 + t2632 / 0.4e1 - t2208 / 0.4e1 + t2319 * (-(-t2205 * t2512 + t2217 * t2695) * t2513 / 0.4e1 - t2301 * t2283 * t2776 / 0.4e1);
t2218 = t2233 + t2592;
t2830 = t2218 * pkin(3);
t2697 = t2514 * t2830;
t2206 = t2621 + t2697;
t2209 = -0.2e1 * t2830;
t2734 = t2505 * t2515;
t2690 = pkin(3) * t2734;
t2302 = t2440 * t2506 + t2690;
t2467 = t2514 * pkin(2);
t2827 = t2484 * pkin(3);
t2359 = -pkin(3) + t2467 + 0.2e1 * t2827;
t2485 = t2515 ^ 2;
t2486 = t2516 ^ 2;
t2630 = t2514 * t2811;
t2733 = t2506 * t2515;
t2634 = t2505 * t2733;
t2315 = 0.1e1 / t2329;
t2773 = t2315 * t2516;
t2656 = t2284 * t2773;
t2735 = t2505 * t2506;
t2691 = pkin(3) * t2735;
t2707 = 0.2e1 * t2841;
t2774 = t2315 * t2507;
t2872 = -((0.4e1 * t2218 * t2827 + t2209 + t2630) * t2485 - 0.2e1 * (t2621 + 0.2e1 * t2697) * t2634 - t2209 + t2209 * t2484) * t2486 / 0.4e1 + t2507 * (t2359 * t2733 + ((pkin(2) + t2707) * t2485 - t2440) * t2505) * t2656 / 0.2e1 + t2630 / 0.4e1 - t2209 / 0.4e1 + t2320 * (-(-t2206 * t2515 + t2218 * t2691) * t2516 / 0.4e1 - t2302 * t2284 * t2774 / 0.4e1);
t2219 = t2234 + t2591;
t2829 = t2219 * pkin(3);
t2696 = t2517 * t2829;
t2207 = t2619 + t2696;
t2210 = -0.2e1 * t2829;
t2729 = t2508 * t2518;
t2686 = pkin(3) * t2729;
t2303 = t2441 * t2509 + t2686;
t2468 = t2517 * pkin(2);
t2826 = t2487 * pkin(3);
t2360 = -pkin(3) + t2468 + 0.2e1 * t2826;
t2488 = t2518 ^ 2;
t2489 = t2519 ^ 2;
t2628 = t2517 * t2810;
t2728 = t2509 * t2518;
t2633 = t2508 * t2728;
t2317 = 0.1e1 / t2330;
t2771 = t2317 * t2519;
t2652 = t2285 * t2771;
t2730 = t2508 * t2509;
t2687 = pkin(3) * t2730;
t2706 = 0.2e1 * t2840;
t2772 = t2317 * t2510;
t2871 = -((0.4e1 * t2219 * t2826 + t2210 + t2628) * t2488 - 0.2e1 * (t2619 + 0.2e1 * t2696) * t2633 - t2210 + t2210 * t2487) * t2489 / 0.4e1 + t2510 * (t2360 * t2728 + ((pkin(2) + t2706) * t2488 - t2441) * t2508) * t2652 / 0.2e1 + t2628 / 0.4e1 - t2210 / 0.4e1 + t2321 * (-(-t2207 * t2518 + t2219 * t2687) * t2519 / 0.4e1 - t2303 * t2285 * t2772 / 0.4e1);
t2443 = sin(t2491);
t2752 = t2475 * t2503;
t2202 = -t2443 * t2831 - t2238 * t2752 / 0.2e1;
t2751 = t2475 * t2526;
t2659 = t2283 * t2751;
t2220 = t2314 * t2443 * t2229 * t2659;
t2501 = xDDP(1);
t2646 = t2463 * t2775;
t2289 = t2501 * t2646;
t2355 = pkin(2) * t2503 + pkin(3) * t2443;
t2536 = t2220 + t2289 + (t2232 * t2355 - t2202) * t2283 * t2314;
t2500 = xDDP(2);
t2760 = t2460 * t2513;
t2638 = t2500 * t2760;
t2499 = xDDP(3);
t2743 = t2499 * t2504;
t2539 = -t2638 - t2743;
t2190 = t2313 * t2539 + t2536;
t2870 = -t2190 / 0.2e1;
t2445 = sin(t2493);
t2749 = t2477 * t2506;
t2203 = -t2445 * t2830 - t2239 * t2749 / 0.2e1;
t2748 = t2477 * t2526;
t2655 = t2284 * t2748;
t2221 = t2316 * t2445 * t2230 * t2655;
t2643 = t2464 * t2773;
t2290 = t2501 * t2643;
t2356 = pkin(2) * t2506 + pkin(3) * t2445;
t2535 = t2221 + t2290 + (t2233 * t2356 - t2203) * t2284 * t2316;
t2758 = t2461 * t2516;
t2637 = t2500 * t2758;
t2742 = t2499 * t2507;
t2538 = -t2637 - t2742;
t2191 = t2315 * t2538 + t2535;
t2869 = -t2191 / 0.2e1;
t2447 = sin(t2495);
t2746 = t2479 * t2509;
t2204 = -t2447 * t2829 - t2240 * t2746 / 0.2e1;
t2745 = t2479 * t2526;
t2651 = t2285 * t2745;
t2222 = t2318 * t2447 * t2231 * t2651;
t2640 = t2465 * t2771;
t2291 = t2501 * t2640;
t2357 = pkin(2) * t2509 + pkin(3) * t2447;
t2534 = t2222 + t2291 + (t2234 * t2357 - t2204) * t2285 * t2318;
t2756 = t2462 * t2519;
t2636 = t2500 * t2756;
t2741 = t2499 * t2510;
t2537 = -t2636 - t2741;
t2192 = t2317 * t2537 + t2534;
t2868 = -t2192 / 0.2e1;
t2421 = t2496 + t2491;
t2409 = qJ(1,3) + t2421;
t2867 = sin(t2409) / 0.4e1;
t2422 = -t2496 + t2491;
t2411 = qJ(1,3) - t2422;
t2372 = sin(t2411);
t2866 = -t2372 / 0.4e1;
t2412 = qJ(1,3) - t2421;
t2373 = sin(t2412);
t2865 = -t2373 / 0.4e1;
t2423 = t2497 + t2493;
t2413 = qJ(1,2) + t2423;
t2864 = sin(t2413) / 0.4e1;
t2424 = -t2497 + t2493;
t2415 = qJ(1,2) - t2424;
t2376 = sin(t2415);
t2863 = -t2376 / 0.4e1;
t2416 = qJ(1,2) - t2423;
t2377 = sin(t2416);
t2862 = -t2377 / 0.4e1;
t2425 = t2498 + t2495;
t2417 = qJ(1,1) + t2425;
t2861 = sin(t2417) / 0.4e1;
t2426 = -t2498 + t2495;
t2419 = qJ(1,1) - t2426;
t2380 = sin(t2419);
t2860 = -t2380 / 0.4e1;
t2420 = qJ(1,1) - t2425;
t2381 = sin(t2420);
t2859 = -t2381 / 0.4e1;
t2410 = qJ(1,3) + t2422;
t2858 = -cos(t2410) / 0.4e1;
t2857 = -cos(t2411) / 0.4e1;
t2414 = qJ(1,2) + t2424;
t2856 = -cos(t2414) / 0.4e1;
t2855 = -cos(t2415) / 0.4e1;
t2418 = qJ(1,1) + t2426;
t2854 = -cos(t2418) / 0.4e1;
t2853 = -cos(t2419) / 0.4e1;
t2852 = -sin(t2422) / 0.2e1;
t2851 = -sin(t2424) / 0.2e1;
t2850 = -sin(t2426) / 0.2e1;
t2849 = t2499 / 0.2e1;
t2848 = 0.2e1 * t2482 - 0.1e1;
t2847 = 0.4e1 * t2482 - 0.2e1;
t2846 = 0.2e1 * t2485 - 0.1e1;
t2845 = 0.4e1 * t2485 - 0.2e1;
t2844 = 0.2e1 * t2488 - 0.1e1;
t2843 = 0.4e1 * t2488 - 0.2e1;
t2837 = g(3) * sin(t2455);
t2836 = g(3) * sin(t2457);
t2835 = g(3) * sin(t2459);
t2834 = g(3) * t2431;
t2833 = g(3) * t2433;
t2832 = g(3) * t2435;
t2825 = pkin(3) * t2883;
t2824 = MDP(8) * t2526;
t2823 = MDP(15) * t2526;
t2821 = t2190 * t2475;
t2820 = t2191 * t2477;
t2819 = t2192 * t2479;
t2818 = (t2217 * t2523 + (t2211 * t2708 + t2623) * pkin(2)) * t2524;
t2817 = (t2218 * t2523 + (t2212 * t2707 + t2621) * pkin(2)) * t2524;
t2816 = (t2219 * t2523 + (t2213 * t2706 + t2619) * pkin(2)) * t2524;
t2815 = t2217 * t2229;
t2814 = t2218 * t2230;
t2813 = t2219 * t2231;
t2310 = t2503 * t2511 + t2739;
t2551 = -t2511 * t2512 + t2740;
t2761 = t2460 * t2504;
t2265 = -t2310 * t2463 + t2551 * t2761;
t2806 = t2265 * t2475;
t2755 = t2463 * t2504;
t2266 = -t2310 * t2460 - t2551 * t2755;
t2805 = t2266 * t2475;
t2311 = t2506 * t2514 + t2734;
t2550 = -t2514 * t2515 + t2735;
t2759 = t2461 * t2507;
t2267 = -t2311 * t2464 + t2550 * t2759;
t2804 = t2267 * t2477;
t2754 = t2464 * t2507;
t2268 = -t2311 * t2461 - t2550 * t2754;
t2803 = t2268 * t2477;
t2312 = t2509 * t2517 + t2729;
t2549 = -t2517 * t2518 + t2730;
t2757 = t2462 * t2510;
t2269 = -t2312 * t2465 + t2549 * t2757;
t2802 = t2269 * t2479;
t2753 = t2465 * t2510;
t2270 = -t2312 * t2462 - t2549 * t2753;
t2801 = t2270 * t2479;
t2361 = t2439 * t2512;
t2304 = t2361 - t2695;
t2271 = t2301 * t2460 - t2304 * t2755;
t2800 = t2271 * t2475;
t2799 = t2271 * t2501;
t2362 = t2440 * t2515;
t2305 = t2362 - t2691;
t2272 = t2302 * t2461 - t2305 * t2754;
t2798 = t2272 * t2477;
t2797 = t2272 * t2501;
t2363 = t2441 * t2518;
t2306 = t2363 - t2687;
t2273 = t2303 * t2462 - t2306 * t2753;
t2796 = t2273 * t2479;
t2795 = t2273 * t2501;
t2274 = t2301 * t2463 + t2304 * t2761;
t2794 = t2274 * t2475;
t2793 = t2274 * t2500;
t2275 = t2302 * t2464 + t2305 * t2759;
t2792 = t2275 * t2477;
t2791 = t2275 * t2500;
t2276 = t2303 * t2465 + t2306 * t2757;
t2790 = t2276 * t2479;
t2789 = t2276 * t2500;
t2785 = t2283 * t2313;
t2783 = t2284 * t2315;
t2781 = t2285 * t2317;
t2779 = t2304 * t2513;
t2778 = t2305 * t2516;
t2777 = t2306 * t2519;
t2770 = t2319 * t2475;
t2769 = t2320 * t2477;
t2768 = t2321 * t2479;
t2764 = (t2466 + pkin(3)) * t2524;
t2763 = (t2467 + pkin(3)) * t2524;
t2762 = (t2468 + pkin(3)) * t2524;
t2476 = 0.1e1 / t2502 ^ 2;
t2527 = 0.1e1 / t2889;
t2750 = t2476 * t2527;
t2478 = 0.1e1 / t2505 ^ 2;
t2747 = t2478 * t2527;
t2480 = 0.1e1 / t2508 ^ 2;
t2744 = t2480 * t2527;
t2725 = t2511 * t2502;
t2721 = t2514 * t2505;
t2717 = t2517 * t2508;
t2712 = t2481 - 0.1e1 / 0.2e1;
t2711 = t2484 - 0.1e1 / 0.2e1;
t2710 = t2487 - 0.1e1 / 0.2e1;
t2709 = t2523 - t2889;
t2705 = 0.2e1 * t2524;
t2704 = 0.2e1 * t2738;
t2703 = 0.2e1 * t2733;
t2702 = 0.2e1 * t2728;
t2701 = pkin(2) * t2788;
t2700 = pkin(2) * t2787;
t2699 = pkin(2) * t2786;
t2683 = t2551 * t2821;
t2682 = t2310 * t2821;
t2681 = t2190 * t2752;
t2680 = t2512 * t2821;
t2679 = t2550 * t2820;
t2678 = t2311 * t2820;
t2677 = t2191 * t2749;
t2676 = t2515 * t2820;
t2675 = t2549 * t2819;
t2674 = t2312 * t2819;
t2673 = t2192 * t2746;
t2672 = t2518 * t2819;
t2394 = pkin(1) - 0.2e1 * t2695;
t2545 = pkin(1) * t2740 - pkin(3) + t2828;
t2668 = ((t2481 * t2879 + t2511 * t2825 + t2709) * t2482 - t2394 * t2361 + pkin(3) * t2545) * t2788;
t2667 = t2475 * t2788;
t2395 = pkin(1) - 0.2e1 * t2691;
t2544 = pkin(1) * t2735 - pkin(3) + t2827;
t2666 = ((t2484 * t2879 + t2514 * t2825 + t2709) * t2485 - t2395 * t2362 + pkin(3) * t2544) * t2787;
t2665 = t2477 * t2787;
t2396 = pkin(1) - 0.2e1 * t2687;
t2543 = pkin(1) * t2730 - pkin(3) + t2826;
t2664 = ((t2487 * t2879 + t2517 * t2825 + t2709) * t2488 - t2396 * t2363 + pkin(3) * t2543) * t2786;
t2663 = t2479 * t2786;
t2662 = t2217 * t2785;
t2658 = t2218 * t2783;
t2654 = t2219 * t2781;
t2650 = t2475 * t2779;
t2649 = t2477 * t2778;
t2648 = t2479 * t2777;
t2647 = t2313 * t2760;
t2645 = t2314 * t2738;
t2644 = t2315 * t2758;
t2642 = t2316 * t2733;
t2641 = t2317 * t2756;
t2639 = t2318 * t2728;
t2631 = t2499 * t2779;
t2629 = t2499 * t2778;
t2627 = t2499 * t2777;
t2235 = t2238 ^ 2;
t2626 = t2235 * t2476 / 0.4e1;
t2236 = t2239 ^ 2;
t2625 = t2236 * t2478 / 0.4e1;
t2237 = t2240 ^ 2;
t2624 = t2237 * t2480 / 0.4e1;
t2622 = t2812 / 0.4e1;
t2620 = t2811 / 0.4e1;
t2618 = t2810 / 0.4e1;
t2617 = t2770 / 0.2e1;
t2616 = t2769 / 0.2e1;
t2615 = t2768 / 0.2e1;
t2614 = t2866 + cos(t2422) / 0.2e1;
t2613 = t2373 / 0.4e1 + cos(t2421) / 0.2e1;
t2612 = t2863 + cos(t2424) / 0.2e1;
t2611 = t2377 / 0.4e1 + cos(t2423) / 0.2e1;
t2610 = t2860 + cos(t2426) / 0.2e1;
t2609 = t2381 / 0.4e1 + cos(t2425) / 0.2e1;
t2385 = cos(t2412);
t2608 = -t2385 / 0.4e1 + t2857;
t2607 = t2385 / 0.4e1 + t2857;
t2389 = cos(t2416);
t2606 = -t2389 / 0.4e1 + t2855;
t2605 = t2389 / 0.4e1 + t2855;
t2393 = cos(t2420);
t2604 = -t2393 / 0.4e1 + t2853;
t2603 = t2393 / 0.4e1 + t2853;
t2530 = t2266 * t2501 + t2265 * t2500 + t2319 * t2849 - (-0.4e1 * t2504 * ((t2511 * t2622 + t2712 * t2831) * t2738 + ((t2622 + t2698) * t2482 - t2205 / 0.2e1) * t2502) * t2513 + (0.2e1 * t2483 - 0.2e1) * (t2358 * t2482 + (-pkin(2) * t2740 + t2394 * t2511) * t2512 - t2545) * t2785 + t2319 * ((t2205 * t2503 + t2217 * t2694) * t2504 - (pkin(1) + t2304) * t2660)) * t2785 / 0.2e1;
t2151 = (t2238 * t2873 + t2815) * t2750 + t2530 * t2751;
t2250 = t2253 * t2503;
t2602 = pkin(2) * t2151 + (t2503 * t2701 + t2322) * t2512 + t2250;
t2529 = t2268 * t2501 + t2267 * t2500 + t2320 * t2849 - (-0.4e1 * t2507 * ((t2514 * t2620 + t2711 * t2830) * t2733 + ((t2620 + t2697) * t2485 - t2206 / 0.2e1) * t2505) * t2516 + (0.2e1 * t2486 - 0.2e1) * (t2359 * t2485 + (-pkin(2) * t2735 + t2395 * t2514) * t2515 - t2544) * t2783 + t2320 * ((t2206 * t2506 + t2218 * t2690) * t2507 - (pkin(1) + t2305) * t2656)) * t2783 / 0.2e1;
t2152 = (t2239 * t2872 + t2814) * t2747 + t2529 * t2748;
t2251 = t2254 * t2506;
t2601 = pkin(2) * t2152 + (t2506 * t2700 + t2323) * t2515 + t2251;
t2528 = t2270 * t2501 + t2269 * t2500 + t2321 * t2849 - (-0.4e1 * t2510 * ((t2517 * t2618 + t2710 * t2829) * t2728 + ((t2618 + t2696) * t2488 - t2207 / 0.2e1) * t2508) * t2519 + (0.2e1 * t2489 - 0.2e1) * (t2360 * t2488 + (-pkin(2) * t2730 + t2396 * t2517) * t2518 - t2543) * t2781 + t2321 * ((t2207 * t2509 + t2219 * t2686) * t2510 - (pkin(1) + t2306) * t2652)) * t2781 / 0.2e1;
t2153 = (t2240 * t2871 + t2813) * t2744 + t2528 * t2745;
t2252 = t2255 * t2509;
t2600 = pkin(2) * t2153 + (t2509 * t2699 + t2324) * t2518 + t2252;
t2295 = g(3) * t2504 - t2325 * t2513;
t2296 = g(3) * t2507 - t2326 * t2516;
t2297 = g(3) * t2510 - t2327 * t2519;
t2599 = t2847 * t2725;
t2598 = t2845 * t2721;
t2597 = t2843 * t2717;
t2596 = t2190 * t2650;
t2595 = t2191 * t2649;
t2594 = t2192 * t2648;
t2280 = t2712 * t2738 + (t2482 - 0.1e1 / 0.2e1) * t2725;
t2590 = t2280 * t2667;
t2581 = t2511 * t2635;
t2286 = t2481 * t2847 - 0.4e1 * t2581 - t2848;
t2589 = t2286 * t2667;
t2588 = t2319 * t2667;
t2281 = t2711 * t2733 + (t2485 - 0.1e1 / 0.2e1) * t2721;
t2587 = t2281 * t2665;
t2580 = t2514 * t2634;
t2287 = t2484 * t2845 - 0.4e1 * t2580 - t2846;
t2586 = t2287 * t2665;
t2585 = t2320 * t2665;
t2282 = t2710 * t2728 + (t2488 - 0.1e1 / 0.2e1) * t2717;
t2584 = t2282 * t2663;
t2579 = t2517 * t2633;
t2288 = t2487 * t2843 - 0.4e1 * t2579 - t2844;
t2583 = t2288 * t2663;
t2582 = t2321 * t2663;
t2578 = t2770 * t2870;
t2577 = t2769 * t2869;
t2576 = t2768 * t2868;
t2575 = -0.2e1 * t2590;
t2574 = -0.2e1 * t2587;
t2573 = -0.2e1 * t2584;
t2572 = t2511 * t2593;
t2571 = t2514 * t2592;
t2570 = t2517 * t2591;
t2569 = t2238 * t2313 * t2659;
t2568 = t2239 * t2315 * t2655;
t2567 = t2240 * t2317 * t2651;
t2566 = t2650 * t2788;
t2565 = t2277 * t2475 * t2645;
t2564 = t2649 * t2787;
t2563 = t2278 * t2477 * t2642;
t2562 = t2648 * t2786;
t2561 = t2279 * t2479 * t2639;
t2560 = -t2588 / 0.2e1;
t2559 = -t2585 / 0.2e1;
t2558 = -t2582 / 0.2e1;
t2371 = sin(t2410);
t2382 = cos(t2409);
t2557 = g(1) * t2858 + g(2) * t2867 + t2371 * t2876 + t2382 * t2878 + sin(t2454) * t2874;
t2375 = sin(t2414);
t2386 = cos(t2413);
t2556 = g(1) * t2856 + g(2) * t2864 + t2375 * t2876 + t2386 * t2878 + sin(t2456) * t2874;
t2379 = sin(t2418);
t2390 = cos(t2417);
t2555 = g(1) * t2854 + g(2) * t2861 + t2379 * t2876 + t2390 * t2878 + sin(t2458) * t2874;
t2554 = g(1) * t2867 + g(2) * t2858 + t2371 * t2877 + t2382 * t2875 + t2430 * t2874;
t2553 = g(1) * t2864 + g(2) * t2856 + t2375 * t2877 + t2386 * t2875 + t2432 * t2874;
t2552 = g(1) * t2861 + g(2) * t2854 + t2379 * t2877 + t2390 * t2875 + t2434 * t2874;
t2548 = t2190 * t2888 + t2295;
t2547 = t2191 * t2888 + t2296;
t2546 = t2192 * t2888 + t2297;
t2542 = t2512 * t2569;
t2541 = t2515 * t2568;
t2540 = t2518 * t2567;
t2533 = t2482 * t2701 + t2526 * t2626 + t2245;
t2532 = t2485 * t2700 + t2526 * t2625 + t2247;
t2531 = t2488 * t2699 + t2526 * t2624 + t2249;
t2494 = 0.2e1 * qJ(2,1) + qJ(3,1);
t2492 = 0.2e1 * qJ(2,2) + qJ(3,2);
t2490 = 0.2e1 * qJ(2,3) + qJ(3,3);
t2452 = cos(t2494);
t2450 = cos(t2492);
t2448 = cos(t2490);
t2446 = sin(t2494);
t2444 = sin(t2492);
t2442 = sin(t2490);
t2401 = sin(t2425);
t2399 = sin(t2423);
t2397 = sin(t2421);
t2248 = t2324 * t2518 + t2252;
t2246 = t2323 * t2515 + t2251;
t2244 = t2322 * t2512 + t2250;
t2243 = t2844 * t2786;
t2242 = t2846 * t2787;
t2241 = t2848 * t2788;
t2216 = t2219 ^ 2;
t2215 = t2218 ^ 2;
t2214 = t2217 ^ 2;
t2189 = (t2192 * t2509 + t2540) * t2509;
t2188 = (t2191 * t2506 + t2541) * t2506;
t2187 = (t2190 * t2503 + t2542) * t2503;
t2186 = -pkin(1) * t2509 * t2567 + t2518 * t2546;
t2185 = -pkin(1) * t2540 - t2509 * t2546;
t2184 = -pkin(1) * t2506 * t2568 + t2515 * t2547;
t2183 = -pkin(1) * t2541 - t2506 * t2547;
t2182 = -pkin(1) * t2503 * t2569 + t2512 * t2548;
t2181 = -pkin(1) * t2542 - t2503 * t2548;
t2180 = t2192 * t2702 + t2567 * t2844;
t2179 = t2191 * t2703 + t2568 * t2846;
t2178 = t2190 * t2704 + t2569 * t2848;
t2165 = t2835 / 0.2e1 + (t2859 + t2380 / 0.4e1) * g(2) + t2604 * g(1) + (t2192 * t2453 - t2447 * t2654) * t2888 + ((t2446 * t2880 - t2669) * t2781 + (t2452 + t2517) * t2192) * pkin(2) + t2555;
t2164 = t2836 / 0.2e1 + (t2862 + t2376 / 0.4e1) * g(2) + t2606 * g(1) + (t2191 * t2451 - t2445 * t2658) * t2888 + ((t2444 * t2881 - t2670) * t2783 + (t2450 + t2514) * t2191) * pkin(2) + t2556;
t2163 = t2837 / 0.2e1 + (t2865 + t2372 / 0.4e1) * g(2) + t2608 * g(1) + (t2190 * t2449 - t2443 * t2662) * t2888 + ((t2442 * t2882 - t2671) * t2785 + (t2448 + t2511) * t2190) * pkin(2) + t2557;
t2162 = -t2832 / 0.2e1 + t2603 * g(2) + (t2859 + t2860) * g(1) + (-t2192 * t2447 - t2453 * t2654) * t2888 + ((t2452 * t2880 - t2570) * t2781 + (-t2446 - t2508) * t2192) * pkin(2) + t2552;
t2161 = -t2833 / 0.2e1 + t2605 * g(2) + (t2862 + t2863) * g(1) + (-t2191 * t2445 - t2451 * t2658) * t2888 + ((t2450 * t2881 - t2571) * t2783 + (-t2444 - t2505) * t2191) * pkin(2) + t2553;
t2160 = -t2834 / 0.2e1 + t2607 * g(2) + (t2865 + t2866) * g(1) + (-t2190 * t2443 - t2449 * t2662) * t2888 + ((t2448 * t2882 - t2572) * t2785 + (-t2442 - t2502) * t2190) * pkin(2) + t2554;
t2159 = t2534 * t2488 + (-0.2e1 * t2487 * t2488 + (t2517 + 0.2e1 * t2633) * t2517) * t2192 + (t2537 * t2488 + ((0.2e1 * t2487 - 0.1e1) * t2702 + t2597) * t2285 * t2219) * t2317;
t2158 = t2535 * t2485 + (-0.2e1 * t2484 * t2485 + (t2514 + 0.2e1 * t2634) * t2514) * t2191 + (t2538 * t2485 + ((0.2e1 * t2484 - 0.1e1) * t2703 + t2598) * t2284 * t2218) * t2315;
t2157 = t2536 * t2482 + (-0.2e1 * t2481 * t2482 + (t2511 + 0.2e1 * t2635) * t2511) * t2190 + (t2539 * t2482 + ((0.2e1 * t2481 - 0.1e1) * t2704 + t2599) * t2283 * t2217) * t2313;
t2156 = -0.8e1 * (t2487 * t2868 + t2291 / 0.4e1 + t2222 / 0.4e1 + (-t2636 / 0.4e1 - t2741 / 0.4e1) * t2317) * t2728 + t2192 * t2597 + (-0.8e1 * (-t2204 / 0.4e1 + t2357 * t2240 * t2745 / 0.8e1) * t2639 + ((0.8e1 * t2487 - 0.4e1) * t2488 - 0.8e1 * t2579 - 0.4e1 * t2487 + 0.2e1) * t2317 * t2219) * t2285;
t2155 = -0.8e1 * (t2484 * t2869 + t2290 / 0.4e1 + t2221 / 0.4e1 + (-t2637 / 0.4e1 - t2742 / 0.4e1) * t2315) * t2733 + t2191 * t2598 + (-0.8e1 * (-t2203 / 0.4e1 + t2356 * t2239 * t2748 / 0.8e1) * t2642 + ((0.8e1 * t2484 - 0.4e1) * t2485 - 0.8e1 * t2580 - 0.4e1 * t2484 + 0.2e1) * t2315 * t2218) * t2284;
t2154 = -0.8e1 * (t2481 * t2870 + t2289 / 0.4e1 + t2220 / 0.4e1 + (-t2638 / 0.4e1 - t2743 / 0.4e1) * t2313) * t2738 + t2190 * t2599 + (-0.8e1 * (-t2202 / 0.4e1 + t2355 * t2238 * t2751 / 0.8e1) * t2645 + ((0.8e1 * t2481 - 0.4e1) * t2482 - 0.8e1 * t2581 - 0.4e1 * t2481 + 0.2e1) * t2313 * t2217) * t2283;
t2147 = t2509 * t2527 * t2624 - t2153 * t2518;
t2146 = -t2153 * t2509 - t2237 * t2518 * t2744 / 0.4e1;
t2145 = t2506 * t2527 * t2625 - t2152 * t2515;
t2144 = -t2152 * t2506 - t2236 * t2515 * t2747 / 0.4e1;
t2143 = t2503 * t2527 * t2626 - t2151 * t2512;
t2142 = -t2151 * t2503 - t2235 * t2512 * t2750 / 0.4e1;
t2141 = t2508 * t2531 + t2517 * t2600;
t2140 = -t2508 * t2600 + t2517 * t2531;
t2139 = t2505 * t2532 + t2514 * t2601;
t2138 = -t2505 * t2601 + t2514 * t2532;
t2137 = t2502 * t2533 + t2511 * t2602;
t2136 = -t2502 * t2602 + t2511 * t2533;
t2135 = ((t2871 - t2816 / 0.2e1) * t2240 + (0.1e1 - t2762) * t2813) * t2744 + ((-t2627 + t2664 + t2789 + t2795) * t2524 + t2528) * t2745;
t2134 = ((t2872 - t2817 / 0.2e1) * t2239 + (0.1e1 - t2763) * t2814) * t2747 + ((-t2629 + t2666 + t2791 + t2797) * t2524 + t2529) * t2748;
t2133 = ((t2873 - t2818 / 0.2e1) * t2238 + (0.1e1 - t2764) * t2815) * t2750 + ((-t2631 + t2668 + t2793 + t2799) * t2524 + t2530) * t2751;
t2132 = ((t2871 - t2816 / 0.4e1) * t2240 + (0.1e1 - t2762 / 0.2e1) * t2813) * t2744 + ((t2795 / 0.2e1 + t2789 / 0.2e1 - t2627 / 0.2e1 + t2664 / 0.2e1) * t2524 + t2528) * t2745;
t2131 = ((t2872 - t2817 / 0.4e1) * t2239 + (0.1e1 - t2763 / 0.2e1) * t2814) * t2747 + ((t2797 / 0.2e1 + t2791 / 0.2e1 - t2629 / 0.2e1 + t2666 / 0.2e1) * t2524 + t2529) * t2748;
t2130 = ((t2873 - t2818 / 0.4e1) * t2238 + (0.1e1 - t2764 / 0.2e1) * t2815) * t2750 + ((t2799 / 0.2e1 + t2793 / 0.2e1 - t2631 / 0.2e1 + t2668 / 0.2e1) * t2524 + t2530) * t2751;
t2129 = t2135 * t2508 + t2216 * t2517;
t2128 = t2134 * t2505 + t2215 * t2514;
t2127 = t2133 * t2502 + t2214 * t2511;
t2126 = -t2135 * t2517 + t2216 * t2508;
t2125 = -t2134 * t2514 + t2215 * t2505;
t2124 = -t2133 * t2511 + t2214 * t2502;
t2123 = -t2835 / 0.2e1 + (-t2132 * t2517 + t2213 * t2669) * t2883 + (pkin(1) * t2447 + pkin(2) * t2446) * t2786 + (t2609 + t2610) * g(2) + (t2850 + t2401 / 0.2e1 - t2604) * g(1) + t2555;
t2122 = -t2836 / 0.2e1 + (-t2131 * t2514 + t2212 * t2670) * t2883 + (pkin(1) * t2445 + pkin(2) * t2444) * t2787 + (t2611 + t2612) * g(2) + (t2851 + t2399 / 0.2e1 - t2606) * g(1) + t2556;
t2121 = -t2837 / 0.2e1 + (-t2130 * t2511 + t2211 * t2671) * t2883 + (pkin(1) * t2443 + pkin(2) * t2442) * t2788 + (t2613 + t2614) * g(2) + (t2852 + t2397 / 0.2e1 - t2608) * g(1) + t2557;
t2120 = t2832 / 0.2e1 + (t2132 * t2508 + t2213 * t2570) * t2883 + (pkin(1) * t2453 + pkin(2) * t2452) * t2786 + (t2850 - t2401 / 0.2e1 - t2603) * g(2) + (t2609 - t2610) * g(1) + t2552;
t2119 = t2833 / 0.2e1 + (t2131 * t2505 + t2212 * t2571) * t2883 + (pkin(1) * t2451 + pkin(2) * t2450) * t2787 + (t2851 - t2399 / 0.2e1 - t2605) * g(2) + (t2611 - t2612) * g(1) + t2553;
t2118 = t2834 / 0.2e1 + (t2130 * t2502 + t2211 * t2572) * t2883 + (pkin(1) * t2449 + pkin(2) * t2448) * t2788 + (t2852 - t2397 / 0.2e1 - t2607) * g(2) + (t2613 - t2614) * g(1) + t2554;
t2117 = t2126 * t2509 - t2129 * t2518;
t2116 = t2125 * t2506 - t2128 * t2515;
t2115 = t2124 * t2503 - t2127 * t2512;
t2114 = t2126 * t2518 + t2129 * t2509;
t2113 = t2125 * t2515 + t2128 * t2506;
t2112 = t2124 * t2512 + t2127 * t2503;
t1 = [(t2190 * t2646 + t2191 * t2643 + t2192 * t2640) * MDP(1) + (t2295 * t2646 + t2296 * t2643 + t2297 * t2640) * MDP(2) + (t2298 * t2646 + t2299 * t2643 + t2300 * t2640) * MDP(3) + (t2187 * t2646 + t2188 * t2643 + t2189 * t2640 + (-t2266 * t2565 - t2268 * t2563 - t2270 * t2561) * t2526) * MDP(4) + (t2178 * t2646 + t2179 * t2643 + t2180 * t2640 + (-t2241 * t2805 - t2242 * t2803 - t2243 * t2801) * t2526) * MDP(5) + (t2142 * t2646 + t2144 * t2643 + t2146 * t2640 + (-t2266 * t2681 - t2268 * t2677 - t2270 * t2673) * t2526) * MDP(6) + (t2143 * t2646 + t2145 * t2643 + t2147 * t2640 + (-t2266 * t2680 - t2268 * t2676 - t2270 * t2672) * t2526) * MDP(7) + (t2151 * t2805 + t2152 * t2803 + t2153 * t2801) * t2824 + (t2182 * t2646 + t2184 * t2643 + t2186 * t2640 + (t2244 * t2805 + t2246 * t2803 + t2248 * t2801) * t2526) * MDP(9) + (t2181 * t2646 + t2183 * t2643 + t2185 * t2640 + (t2245 * t2805 + t2247 * t2803 + t2249 * t2801) * t2526) * MDP(10) + (t2157 * t2646 + t2158 * t2643 + t2159 * t2640 + (t2266 * t2575 + t2268 * t2574 + t2270 * t2573 + (-t2271 * t2590 - t2272 * t2587 - t2273 * t2584) * t2705) * t2526) * MDP(11) + (t2154 * t2646 + t2155 * t2643 + t2156 * t2640 + (-t2266 * t2589 - t2268 * t2586 - t2270 * t2583 + (-t2271 * t2589 - t2272 * t2586 - t2273 * t2583) * t2524) * t2526) * MDP(12) + (t2115 * t2646 + t2116 * t2643 + t2117 * t2640 + (-t2266 * t2682 - t2268 * t2678 - t2270 * t2674 + (-t2271 * t2682 - t2272 * t2678 - t2273 * t2674) * t2524) * t2526) * MDP(13) + (t2112 * t2646 + t2113 * t2643 + t2114 * t2640 + (t2266 * t2683 + t2268 * t2679 + t2270 * t2675 + (t2271 * t2683 + t2272 * t2679 + t2273 * t2675) * t2524) * t2526) * MDP(14) + (t2133 * t2805 + t2134 * t2803 + t2135 * t2801 + (t2133 * t2800 + t2134 * t2798 + t2135 * t2796) * t2524) * t2823 + (t2163 * t2646 + t2164 * t2643 + t2165 * t2640 + (t2121 * t2805 + t2122 * t2803 + t2123 * t2801 + (t2137 * t2800 + t2139 * t2798 + t2141 * t2796) * t2524) * t2526) * MDP(16) + (t2160 * t2646 + t2161 * t2643 + t2162 * t2640 + (t2118 * t2805 + t2119 * t2803 + t2120 * t2801 + (t2136 * t2800 + t2138 * t2798 + t2140 * t2796) * t2524) * t2526) * MDP(17) + (t2501 - g(1)) * MDP(18); (-t2190 * t2647 - t2191 * t2644 - t2192 * t2641) * MDP(1) + (-t2295 * t2647 - t2296 * t2644 - t2297 * t2641) * MDP(2) + (-t2298 * t2647 - t2299 * t2644 - t2300 * t2641) * MDP(3) + (-t2187 * t2647 - t2188 * t2644 - t2189 * t2641 + (-t2265 * t2565 - t2267 * t2563 - t2269 * t2561) * t2526) * MDP(4) + (-t2178 * t2647 - t2179 * t2644 - t2180 * t2641 + (-t2241 * t2806 - t2242 * t2804 - t2243 * t2802) * t2526) * MDP(5) + (-t2142 * t2647 - t2144 * t2644 - t2146 * t2641 + (-t2265 * t2681 - t2267 * t2677 - t2269 * t2673) * t2526) * MDP(6) + (-t2143 * t2647 - t2145 * t2644 - t2147 * t2641 + (-t2265 * t2680 - t2267 * t2676 - t2269 * t2672) * t2526) * MDP(7) + (t2151 * t2806 + t2152 * t2804 + t2153 * t2802) * t2824 + (-t2182 * t2647 - t2184 * t2644 - t2186 * t2641 + (t2244 * t2806 + t2246 * t2804 + t2248 * t2802) * t2526) * MDP(9) + (-t2181 * t2647 - t2183 * t2644 - t2185 * t2641 + (t2245 * t2806 + t2247 * t2804 + t2249 * t2802) * t2526) * MDP(10) + (-t2157 * t2647 - t2158 * t2644 - t2159 * t2641 + (t2265 * t2575 + t2267 * t2574 + t2269 * t2573 + (-t2274 * t2590 - t2275 * t2587 - t2276 * t2584) * t2705) * t2526) * MDP(11) + (-t2154 * t2647 - t2155 * t2644 - t2156 * t2641 + (-t2265 * t2589 - t2267 * t2586 - t2269 * t2583 + (-t2274 * t2589 - t2275 * t2586 - t2276 * t2583) * t2524) * t2526) * MDP(12) + (-t2115 * t2647 - t2116 * t2644 - t2117 * t2641 + (-t2265 * t2682 - t2267 * t2678 - t2269 * t2674 + (-t2274 * t2682 - t2275 * t2678 - t2276 * t2674) * t2524) * t2526) * MDP(13) + (-t2112 * t2647 - t2113 * t2644 - t2114 * t2641 + (t2265 * t2683 + t2267 * t2679 + t2269 * t2675 + (t2274 * t2683 + t2275 * t2679 + t2276 * t2675) * t2524) * t2526) * MDP(14) + (t2133 * t2806 + t2134 * t2804 + t2135 * t2802 + (t2133 * t2794 + t2134 * t2792 + t2135 * t2790) * t2524) * t2823 + (-t2163 * t2647 - t2164 * t2644 - t2165 * t2641 + (t2121 * t2806 + t2122 * t2804 + t2123 * t2802 + (t2137 * t2794 + t2139 * t2792 + t2141 * t2790) * t2524) * t2526) * MDP(16) + (-t2160 * t2647 - t2161 * t2644 - t2162 * t2641 + (t2118 * t2806 + t2119 * t2804 + t2120 * t2802 + (t2136 * t2794 + t2138 * t2792 + t2140 * t2790) * t2524) * t2526) * MDP(17) + (t2500 - g(2)) * MDP(18); (-t2190 * t2776 - t2191 * t2774 - t2192 * t2772) * MDP(1) + (-t2295 * t2776 - t2296 * t2774 - t2297 * t2772) * MDP(2) + (-t2298 * t2776 - t2299 * t2774 - t2300 * t2772) * MDP(3) + (-t2187 * t2776 - t2188 * t2774 - t2189 * t2772 + (t2558 * t2728 + t2559 * t2733 + t2560 * t2738) * t2526) * MDP(4) + (-t2178 * t2776 - t2179 * t2774 - t2180 * t2772 + (-t2241 * t2617 - t2242 * t2616 - t2243 * t2615) * t2526) * MDP(5) + (-t2142 * t2776 - t2144 * t2774 - t2146 * t2772 + (t2503 * t2578 + t2506 * t2577 + t2509 * t2576) * t2526) * MDP(6) + (-t2143 * t2776 - t2145 * t2774 - t2147 * t2772 + (t2512 * t2578 + t2515 * t2577 + t2518 * t2576) * t2526) * MDP(7) + (t2151 * t2617 + t2152 * t2616 + t2153 * t2615) * t2824 + (-t2182 * t2776 - t2184 * t2774 - t2186 * t2772 + (t2244 * t2617 + t2246 * t2616 + t2248 * t2615) * t2526) * MDP(9) + (-t2181 * t2776 - t2183 * t2774 - t2185 * t2772 + (t2245 * t2617 + t2247 * t2616 + t2249 * t2615) * t2526) * MDP(10) + (-t2157 * t2776 - t2158 * t2774 - t2159 * t2772 + (-t2280 * t2588 - t2281 * t2585 - t2282 * t2582 + (t2280 * t2566 + t2281 * t2564 + t2282 * t2562) * t2705) * t2526) * MDP(11) + (-t2154 * t2776 - t2155 * t2774 - t2156 * t2772 + (t2288 * t2558 + t2287 * t2559 + t2286 * t2560 + (t2286 * t2566 + t2287 * t2564 + t2288 * t2562) * t2524) * t2526) * MDP(12) + (-t2115 * t2776 - t2116 * t2774 - t2117 * t2772 + (t2312 * t2576 + t2311 * t2577 + t2310 * t2578 + (t2310 * t2596 + t2311 * t2595 + t2312 * t2594) * t2524) * t2526) * MDP(13) + (-t2112 * t2776 - t2113 * t2774 - t2114 * t2772 + (-t2549 * t2576 - t2550 * t2577 - t2551 * t2578 + (-t2549 * t2594 - t2550 * t2595 - t2551 * t2596) * t2524) * t2526) * MDP(14) + (t2135 * t2615 + t2134 * t2616 + t2133 * t2617 + (-t2133 * t2650 - t2134 * t2649 - t2135 * t2648) * t2524) * t2823 + (-t2163 * t2776 - t2164 * t2774 - t2165 * t2772 + (t2123 * t2615 + t2122 * t2616 + t2121 * t2617 + (-t2137 * t2650 - t2139 * t2649 - t2141 * t2648) * t2524) * t2526) * MDP(16) + (-t2160 * t2776 - t2161 * t2774 - t2162 * t2772 + (t2120 * t2615 + t2119 * t2616 + t2118 * t2617 + (-t2136 * t2650 - t2138 * t2649 - t2140 * t2648) * t2524) * t2526) * MDP(17) + (t2499 - g(3)) * MDP(18);];
tauX  = t1;
