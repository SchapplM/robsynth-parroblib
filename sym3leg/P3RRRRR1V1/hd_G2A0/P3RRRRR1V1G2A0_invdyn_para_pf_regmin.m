% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [3x18]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P3RRRRR1V1G2A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR1V1G2A0_invdyn_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:34:10
% EndTime: 2020-08-07 03:34:33
% DurationCPUTime: 24.47s
% Computational Cost: add. (139239->922), mult. (271677->1567), div. (22212->15), fcn. (212868->84), ass. (0->654)
t380 = qJ(2,3) + qJ(3,3);
t343 = qJ(1,3) + t380;
t319 = cos(t343);
t344 = qJ(1,3) - t380;
t320 = cos(t344);
t208 = t320 + t319;
t382 = qJ(2,2) + qJ(3,2);
t345 = qJ(1,2) + t382;
t321 = cos(t345);
t346 = qJ(1,2) - t382;
t322 = cos(t346);
t209 = t322 + t321;
t384 = qJ(2,1) + qJ(3,1);
t347 = qJ(1,1) + t384;
t323 = cos(t347);
t348 = qJ(1,1) - t384;
t324 = cos(t348);
t210 = t324 + t323;
t776 = pkin(2) ^ 2;
t775 = 2 * pkin(1);
t400 = cos(qJ(3,3));
t370 = t400 ^ 2;
t403 = cos(qJ(3,2));
t373 = t403 ^ 2;
t406 = cos(qJ(3,1));
t376 = t406 ^ 2;
t387 = legFrame(1,2);
t351 = sin(t387);
t354 = cos(t387);
t216 = g(1) * t354 - g(2) * t351;
t399 = sin(qJ(1,1));
t408 = cos(qJ(1,1));
t189 = g(3) * t408 + t216 * t399;
t409 = xDP(3);
t410 = xDP(2);
t411 = xDP(1);
t174 = -t399 * t409 + (-t351 * t410 + t354 * t411) * t408;
t168 = t174 ^ 2;
t342 = cos(t384);
t407 = cos(qJ(2,1));
t219 = pkin(2) * t407 + pkin(3) * t342 + pkin(1);
t207 = 0.1e1 / t219 ^ 2;
t677 = t168 * t207;
t144 = pkin(1) * t677 + t189;
t213 = g(1) * t351 + g(2) * t354;
t398 = sin(qJ(2,1));
t138 = t144 * t407 - t213 * t398;
t386 = legFrame(2,2);
t350 = sin(t386);
t353 = cos(t386);
t215 = g(1) * t353 - g(2) * t350;
t396 = sin(qJ(1,2));
t405 = cos(qJ(1,2));
t188 = g(3) * t405 + t215 * t396;
t173 = -t396 * t409 + (-t350 * t410 + t353 * t411) * t405;
t167 = t173 ^ 2;
t340 = cos(t382);
t404 = cos(qJ(2,2));
t218 = pkin(2) * t404 + pkin(3) * t340 + pkin(1);
t205 = 0.1e1 / t218 ^ 2;
t678 = t167 * t205;
t143 = pkin(1) * t678 + t188;
t212 = g(1) * t350 + g(2) * t353;
t395 = sin(qJ(2,2));
t136 = t143 * t404 - t212 * t395;
t385 = legFrame(3,2);
t349 = sin(t385);
t352 = cos(t385);
t214 = g(1) * t352 - g(2) * t349;
t393 = sin(qJ(1,3));
t402 = cos(qJ(1,3));
t187 = g(3) * t402 + t214 * t393;
t172 = -t393 * t409 + (-t349 * t410 + t352 * t411) * t402;
t166 = t172 ^ 2;
t338 = cos(t380);
t401 = cos(qJ(2,3));
t217 = pkin(2) * t401 + pkin(3) * t338 + pkin(1);
t203 = 0.1e1 / t217 ^ 2;
t679 = t166 * t203;
t142 = pkin(1) * t679 + t187;
t211 = g(1) * t349 + g(2) * t352;
t392 = sin(qJ(2,3));
t134 = t142 * t401 - t211 * t392;
t770 = -0.2e1 * pkin(2);
t415 = 0.1e1 / pkin(2);
t391 = sin(qJ(3,3));
t614 = t401 * t411;
t615 = t401 * t410;
t627 = t393 * t411;
t628 = t393 * t410;
t127 = 0.2e1 * ((-t392 * t627 - t615) * t352 + t349 * (t392 * t628 - t614)) * t391 + 0.2e1 * ((-t392 * t410 + t393 * t614) * t352 - t349 * (t392 * t411 + t393 * t615)) * t400 + t208 * t409;
t364 = 0.1e1 / t391;
t703 = t127 * t364;
t512 = t703 / 0.2e1;
t121 = t415 * t512;
t732 = pkin(3) * t400;
t328 = pkin(2) + t732;
t728 = pkin(3) * t411;
t581 = t391 * t728;
t729 = pkin(3) * t410;
t582 = t391 * t729;
t613 = t402 * t409;
t118 = ((-t328 * t627 + t582) * t352 + (t328 * t628 + t581) * t349 - t328 * t613) * t401 + t392 * ((t328 * t410 + t393 * t581) * t352 + (t328 * t411 - t393 * t582) * t349 + t391 * pkin(3) * t613);
t413 = 0.1e1 / pkin(3);
t604 = t413 * t415;
t560 = t118 * t604;
t485 = t364 * t560;
t100 = t121 + t485 / 0.2e1;
t769 = -0.2e1 * t100;
t394 = sin(qJ(3,2));
t610 = t404 * t411;
t611 = t404 * t410;
t622 = t396 * t411;
t623 = t396 * t410;
t128 = 0.2e1 * ((-t395 * t622 - t611) * t353 + t350 * (t395 * t623 - t610)) * t394 + 0.2e1 * ((-t395 * t410 + t396 * t610) * t353 - t350 * (t395 * t411 + t396 * t611)) * t403 + t209 * t409;
t366 = 0.1e1 / t394;
t702 = t128 * t366;
t510 = t702 / 0.2e1;
t122 = t415 * t510;
t731 = pkin(3) * t403;
t329 = pkin(2) + t731;
t577 = t394 * t728;
t578 = t394 * t729;
t609 = t405 * t409;
t119 = ((-t329 * t622 + t578) * t353 + (t329 * t623 + t577) * t350 - t329 * t609) * t404 + t395 * ((t329 * t410 + t396 * t577) * t353 + (t329 * t411 - t396 * t578) * t350 + t394 * pkin(3) * t609);
t559 = t119 * t604;
t484 = t366 * t559;
t101 = t122 + t484 / 0.2e1;
t768 = -0.2e1 * t101;
t397 = sin(qJ(3,1));
t606 = t407 * t411;
t607 = t407 * t410;
t617 = t399 * t411;
t618 = t399 * t410;
t129 = 0.2e1 * ((-t398 * t617 - t607) * t354 + t351 * (t398 * t618 - t606)) * t397 + 0.2e1 * ((-t398 * t410 + t399 * t606) * t354 - t351 * (t398 * t411 + t399 * t607)) * t406 + t210 * t409;
t368 = 0.1e1 / t397;
t701 = t129 * t368;
t508 = t701 / 0.2e1;
t123 = t415 * t508;
t730 = pkin(3) * t406;
t330 = pkin(2) + t730;
t573 = t397 * t728;
t574 = t397 * t729;
t605 = t408 * t409;
t120 = ((-t330 * t617 + t574) * t354 + (t330 * t618 + t573) * t351 - t330 * t605) * t407 + t398 * ((t330 * t410 + t399 * t573) * t354 + (t330 * t411 - t399 * t574) * t351 + t397 * pkin(3) * t605);
t558 = t120 * t604;
t483 = t368 * t558;
t102 = t123 + t483 / 0.2e1;
t767 = -0.2e1 * t102;
t412 = pkin(3) ^ 2;
t766 = -0.2e1 * t412;
t765 = -g(1) / 0.4e1;
t764 = g(1) / 0.4e1;
t763 = -g(2) / 0.4e1;
t762 = g(2) / 0.4e1;
t761 = g(3) / 0.2e1;
t106 = t121 + t485;
t630 = t391 * t401;
t583 = pkin(3) * t630;
t190 = t328 * t392 + t583;
t355 = t400 * pkin(2);
t718 = t370 * pkin(3);
t247 = -pkin(3) + t355 + 0.2e1 * t718;
t371 = t401 ^ 2;
t372 = t402 ^ 2;
t521 = t400 * t703;
t629 = t392 * t401;
t524 = t391 * t629;
t202 = 0.1e1 / t217;
t666 = t202 * t402;
t549 = t172 * t666;
t631 = t391 * t392;
t584 = pkin(3) * t631;
t721 = t106 * pkin(3);
t587 = t400 * t721;
t597 = 0.2e1 * t732;
t667 = t202 * t393;
t94 = t512 + t587;
t97 = -0.2e1 * t721;
t760 = -((0.4e1 * t106 * t718 + t521 + t97) * t371 - 0.2e1 * (t512 + 0.2e1 * t587) * t524 - t97 + t97 * t370) * t372 / 0.4e1 + t393 * (t247 * t629 + ((pkin(2) + t597) * t371 - t328) * t391) * t549 / 0.2e1 + t521 / 0.4e1 - t97 / 0.4e1 + t208 * (-(t106 * t584 - t401 * t94) * t402 / 0.4e1 - t190 * t172 * t667 / 0.4e1);
t107 = t122 + t484;
t625 = t394 * t404;
t579 = pkin(3) * t625;
t191 = t329 * t395 + t579;
t356 = t403 * pkin(2);
t717 = t373 * pkin(3);
t248 = -pkin(3) + t356 + 0.2e1 * t717;
t374 = t404 ^ 2;
t375 = t405 ^ 2;
t519 = t403 * t702;
t624 = t395 * t404;
t523 = t394 * t624;
t204 = 0.1e1 / t218;
t664 = t204 * t405;
t545 = t173 * t664;
t626 = t394 * t395;
t580 = pkin(3) * t626;
t720 = t107 * pkin(3);
t586 = t403 * t720;
t596 = 0.2e1 * t731;
t665 = t204 * t396;
t95 = t510 + t586;
t98 = -0.2e1 * t720;
t759 = -((0.4e1 * t107 * t717 + t519 + t98) * t374 - 0.2e1 * (t510 + 0.2e1 * t586) * t523 - t98 + t98 * t373) * t375 / 0.4e1 + t396 * (t248 * t624 + ((pkin(2) + t596) * t374 - t329) * t394) * t545 / 0.2e1 + t519 / 0.4e1 - t98 / 0.4e1 + t209 * (-(t107 * t580 - t404 * t95) * t405 / 0.4e1 - t191 * t173 * t665 / 0.4e1);
t108 = t123 + t483;
t620 = t397 * t407;
t575 = pkin(3) * t620;
t192 = t330 * t398 + t575;
t357 = t406 * pkin(2);
t716 = t376 * pkin(3);
t249 = -pkin(3) + t357 + 0.2e1 * t716;
t377 = t407 ^ 2;
t378 = t408 ^ 2;
t517 = t406 * t701;
t619 = t398 * t407;
t522 = t397 * t619;
t206 = 0.1e1 / t219;
t662 = t206 * t408;
t541 = t174 * t662;
t621 = t397 * t398;
t576 = pkin(3) * t621;
t719 = t108 * pkin(3);
t585 = t406 * t719;
t595 = 0.2e1 * t730;
t663 = t206 * t399;
t96 = t508 + t585;
t99 = -0.2e1 * t719;
t758 = -((0.4e1 * t108 * t716 + t517 + t99) * t377 - 0.2e1 * (t508 + 0.2e1 * t585) * t522 - t99 + t99 * t376) * t378 / 0.4e1 + t399 * (t249 * t619 + ((pkin(2) + t595) * t377 - t330) * t397) * t541 / 0.2e1 + t517 / 0.4e1 - t99 / 0.4e1 + t210 * (-(t108 * t576 - t407 * t96) * t408 / 0.4e1 - t192 * t174 * t663 / 0.4e1);
t310 = t385 + t380;
t298 = qJ(1,3) + t310;
t757 = sin(t298) / 0.4e1;
t311 = -t385 + t380;
t300 = qJ(1,3) - t311;
t261 = sin(t300);
t756 = -t261 / 0.4e1;
t301 = qJ(1,3) - t310;
t262 = sin(t301);
t755 = -t262 / 0.4e1;
t312 = t386 + t382;
t302 = qJ(1,2) + t312;
t754 = sin(t302) / 0.4e1;
t313 = -t386 + t382;
t304 = qJ(1,2) - t313;
t265 = sin(t304);
t753 = -t265 / 0.4e1;
t305 = qJ(1,2) - t312;
t266 = sin(t305);
t752 = -t266 / 0.4e1;
t314 = t387 + t384;
t306 = qJ(1,1) + t314;
t751 = sin(t306) / 0.4e1;
t315 = -t387 + t384;
t308 = qJ(1,1) - t315;
t269 = sin(t308);
t750 = -t269 / 0.4e1;
t309 = qJ(1,1) - t314;
t270 = sin(t309);
t749 = -t270 / 0.4e1;
t299 = qJ(1,3) + t311;
t748 = -cos(t299) / 0.4e1;
t747 = -cos(t300) / 0.4e1;
t303 = qJ(1,2) + t313;
t746 = -cos(t303) / 0.4e1;
t745 = -cos(t304) / 0.4e1;
t307 = qJ(1,1) + t315;
t744 = -cos(t307) / 0.4e1;
t743 = -cos(t308) / 0.4e1;
t742 = -sin(t311) / 0.2e1;
t741 = -sin(t313) / 0.2e1;
t740 = -sin(t315) / 0.2e1;
t388 = xDDP(3);
t739 = t388 / 0.2e1;
t738 = 0.2e1 * t371 - 0.1e1;
t737 = 0.4e1 * t371 - 0.2e1;
t736 = 0.2e1 * t374 - 0.1e1;
t735 = 0.4e1 * t374 - 0.2e1;
t734 = 0.2e1 * t377 - 0.1e1;
t733 = 0.4e1 * t377 - 0.2e1;
t727 = g(3) * sin(t344);
t726 = g(3) * sin(t346);
t725 = g(3) * sin(t348);
t724 = g(3) * t320;
t723 = g(3) * t322;
t722 = g(3) * t324;
t332 = sin(t380);
t642 = t364 * t415;
t548 = t172 * t642;
t109 = t203 * t332 * t118 * t548;
t390 = xDDP(1);
t535 = t352 * t666;
t178 = t390 * t535;
t244 = pkin(2) * t392 + pkin(3) * t332;
t643 = t364 * t392;
t91 = -t332 * t721 - t127 * t643 / 0.2e1;
t425 = t109 + t178 + (t121 * t244 - t91) * t172 * t203;
t389 = xDDP(2);
t651 = t349 * t402;
t527 = t389 * t651;
t634 = t388 * t393;
t431 = -t527 - t634;
t79 = t202 * t431 + t425;
t715 = t364 * t79;
t334 = sin(t382);
t639 = t366 * t415;
t544 = t173 * t639;
t110 = t205 * t334 * t119 * t544;
t532 = t353 * t664;
t179 = t390 * t532;
t245 = pkin(2) * t395 + pkin(3) * t334;
t640 = t366 * t395;
t92 = -t334 * t720 - t128 * t640 / 0.2e1;
t424 = t110 + t179 + (t122 * t245 - t92) * t173 * t205;
t649 = t350 * t405;
t526 = t389 * t649;
t633 = t388 * t396;
t430 = -t526 - t633;
t80 = t204 * t430 + t424;
t714 = t366 * t80;
t336 = sin(t384);
t636 = t368 * t415;
t540 = t174 * t636;
t111 = t207 * t336 * t120 * t540;
t529 = t354 * t662;
t180 = t390 * t529;
t246 = pkin(2) * t398 + pkin(3) * t336;
t637 = t368 * t398;
t93 = -t336 * t719 - t129 * t637 / 0.2e1;
t423 = t111 + t180 + (t123 * t246 - t93) * t174 * t207;
t647 = t351 * t408;
t525 = t389 * t647;
t632 = t388 * t399;
t429 = -t525 - t632;
t81 = t206 * t429 + t423;
t713 = t368 * t81;
t712 = t370 * t79;
t711 = t373 * t80;
t710 = t376 * t81;
t709 = (t106 * t412 + (t100 * t597 + t512) * pkin(2)) * t413;
t708 = (t107 * t412 + (t101 * t596 + t510) * pkin(2)) * t413;
t707 = (t108 * t412 + (t102 * t595 + t508) * pkin(2)) * t413;
t706 = t106 * t118;
t705 = t107 * t119;
t704 = t108 * t120;
t199 = t392 * t400 + t630;
t440 = -t400 * t401 + t631;
t652 = t349 * t393;
t154 = -t199 * t352 + t440 * t652;
t697 = t154 * t364;
t646 = t352 * t393;
t155 = -t199 * t349 - t440 * t646;
t696 = t155 * t364;
t200 = t395 * t403 + t625;
t439 = -t403 * t404 + t626;
t650 = t350 * t396;
t156 = -t200 * t353 + t439 * t650;
t695 = t156 * t366;
t645 = t353 * t396;
t157 = -t200 * t350 - t439 * t645;
t694 = t157 * t366;
t201 = t398 * t406 + t620;
t438 = -t406 * t407 + t621;
t648 = t351 * t399;
t158 = -t201 * t354 + t438 * t648;
t693 = t158 * t368;
t644 = t354 * t399;
t159 = -t201 * t351 - t438 * t644;
t692 = t159 * t368;
t250 = t328 * t401;
t193 = t250 - t584;
t160 = t190 * t349 - t193 * t646;
t691 = t160 * t364;
t690 = t160 * t390;
t251 = t329 * t404;
t194 = t251 - t580;
t161 = t191 * t350 - t194 * t645;
t689 = t161 * t366;
t688 = t161 * t390;
t252 = t330 * t407;
t195 = t252 - t576;
t162 = t192 * t351 - t195 * t644;
t687 = t162 * t368;
t686 = t162 * t390;
t163 = t190 * t352 + t193 * t652;
t685 = t163 * t364;
t684 = t163 * t389;
t164 = t191 * t353 + t194 * t650;
t683 = t164 * t366;
t682 = t164 * t389;
t165 = t192 * t354 + t195 * t648;
t681 = t165 * t368;
t680 = t165 * t389;
t676 = t172 * t202;
t674 = t173 * t204;
t672 = t174 * t206;
t670 = t193 * t402;
t669 = t194 * t405;
t668 = t195 * t408;
t661 = t208 * t364;
t660 = t209 * t366;
t659 = t210 * t368;
t655 = (t355 + pkin(3)) * t413;
t654 = (t356 + pkin(3)) * t413;
t653 = (t357 + pkin(3)) * t413;
t365 = 0.1e1 / t391 ^ 2;
t416 = 0.1e1 / t776;
t641 = t365 * t416;
t367 = 0.1e1 / t394 ^ 2;
t638 = t367 * t416;
t369 = 0.1e1 / t397 ^ 2;
t635 = t369 * t416;
t616 = t400 * t391;
t612 = t403 * t394;
t608 = t406 * t397;
t603 = pkin(3) * t770;
t602 = t412 - t776;
t601 = t370 - 0.1e1 / 0.2e1;
t600 = t373 - 0.1e1 / 0.2e1;
t599 = t376 - 0.1e1 / 0.2e1;
t594 = 0.2e1 * t413;
t593 = 0.2e1 * t629;
t592 = 0.2e1 * t624;
t591 = 0.2e1 * t619;
t590 = pkin(2) * t679;
t589 = pkin(2) * t678;
t588 = pkin(2) * t677;
t572 = t440 * t715;
t571 = t439 * t714;
t570 = t438 * t713;
t569 = t199 * t715;
t568 = t200 * t714;
t567 = t201 * t713;
t566 = t79 * t643;
t565 = t401 * t715;
t564 = t80 * t640;
t563 = t404 * t714;
t562 = t81 * t637;
t561 = t407 * t713;
t283 = pkin(1) - 0.2e1 * t584;
t428 = pkin(1) * t631 - pkin(3) + t718;
t557 = ((t370 * t766 + t400 * t603 + t602) * t371 - t283 * t250 + pkin(3) * t428) * t679;
t556 = t364 * t679;
t284 = pkin(1) - 0.2e1 * t580;
t427 = pkin(1) * t626 - pkin(3) + t717;
t555 = ((t373 * t766 + t403 * t603 + t602) * t374 - t284 * t251 + pkin(3) * t427) * t678;
t554 = t366 * t678;
t285 = pkin(1) - 0.2e1 * t576;
t426 = pkin(1) * t621 - pkin(3) + t716;
t553 = ((t376 * t766 + t406 * t603 + t602) * t377 - t285 * t252 + pkin(3) * t426) * t677;
t552 = t368 * t677;
t551 = t106 * t676;
t547 = t107 * t674;
t543 = t108 * t672;
t539 = t364 * t670;
t538 = t366 * t669;
t537 = t368 * t668;
t536 = t202 * t651;
t534 = t203 * t629;
t533 = t204 * t649;
t531 = t205 * t624;
t530 = t206 * t647;
t528 = t207 * t619;
t520 = t388 * t670;
t518 = t388 * t669;
t516 = t388 * t668;
t124 = t127 ^ 2;
t515 = t124 * t365 / 0.4e1;
t125 = t128 ^ 2;
t514 = t125 * t367 / 0.4e1;
t126 = t129 ^ 2;
t513 = t126 * t369 / 0.4e1;
t511 = t703 / 0.4e1;
t509 = t702 / 0.4e1;
t507 = t701 / 0.4e1;
t506 = t661 / 0.2e1;
t505 = t660 / 0.2e1;
t504 = t659 / 0.2e1;
t503 = t756 + cos(t311) / 0.2e1;
t502 = t262 / 0.4e1 + cos(t310) / 0.2e1;
t501 = t753 + cos(t313) / 0.2e1;
t500 = t266 / 0.4e1 + cos(t312) / 0.2e1;
t499 = t750 + cos(t315) / 0.2e1;
t498 = t270 / 0.4e1 + cos(t314) / 0.2e1;
t274 = cos(t301);
t497 = -t274 / 0.4e1 + t747;
t496 = t274 / 0.4e1 + t747;
t278 = cos(t305);
t495 = -t278 / 0.4e1 + t745;
t494 = t278 / 0.4e1 + t745;
t282 = cos(t309);
t493 = -t282 / 0.4e1 + t743;
t492 = t282 / 0.4e1 + t743;
t139 = t142 * t392;
t419 = t155 * t390 + t154 * t389 + t208 * t739 - (-0.4e1 * t393 * ((t400 * t511 + t601 * t721) * t629 + ((t511 + t587) * t371 - t94 / 0.2e1) * t391) * t402 + t208 * ((t106 * t583 + t392 * t94) * t393 - (pkin(1) + t193) * t549) + (0.2e1 * t372 - 0.2e1) * (t247 * t371 + (-pkin(2) * t631 + t283 * t400) * t401 - t428) * t676) * t676 / 0.2e1;
t40 = (t127 * t760 + t706) * t641 + t419 * t642;
t491 = pkin(2) * t40 + (t392 * t590 + t211) * t401 + t139;
t140 = t143 * t395;
t418 = t157 * t390 + t156 * t389 + t209 * t739 - (-0.4e1 * t396 * ((t403 * t509 + t600 * t720) * t624 + ((t509 + t586) * t374 - t95 / 0.2e1) * t394) * t405 + t209 * ((t107 * t579 + t395 * t95) * t396 - (pkin(1) + t194) * t545) + (0.2e1 * t375 - 0.2e1) * (t248 * t374 + (-pkin(2) * t626 + t284 * t403) * t404 - t427) * t674) * t674 / 0.2e1;
t41 = (t128 * t759 + t705) * t638 + t418 * t639;
t490 = pkin(2) * t41 + (t395 * t589 + t212) * t404 + t140;
t141 = t144 * t398;
t417 = t159 * t390 + t158 * t389 + t210 * t739 - (-0.4e1 * t399 * ((t406 * t507 + t599 * t719) * t619 + ((t507 + t585) * t377 - t96 / 0.2e1) * t397) * t408 + t210 * ((t108 * t575 + t398 * t96) * t399 - (pkin(1) + t195) * t541) + (0.2e1 * t378 - 0.2e1) * (t249 * t377 + (-pkin(2) * t621 + t285 * t406) * t407 - t426) * t672) * t672 / 0.2e1;
t42 = (t129 * t758 + t704) * t635 + t417 * t636;
t489 = pkin(2) * t42 + (t398 * t588 + t213) * t407 + t141;
t184 = g(3) * t393 - t214 * t402;
t185 = g(3) * t396 - t215 * t405;
t186 = g(3) * t399 - t216 * t408;
t488 = t79 * t539;
t487 = t80 * t538;
t486 = t81 * t537;
t169 = t601 * t629 + (t371 - 0.1e1 / 0.2e1) * t616;
t482 = t169 * t556;
t473 = t400 * t524;
t175 = t737 * t370 - 0.4e1 * t473 - t738;
t481 = t175 * t556;
t480 = t208 * t556;
t170 = t600 * t624 + (t374 - 0.1e1 / 0.2e1) * t612;
t479 = t170 * t554;
t472 = t403 * t523;
t176 = t735 * t373 - 0.4e1 * t472 - t736;
t478 = t176 * t554;
t477 = t209 * t554;
t171 = t599 * t619 + (t377 - 0.1e1 / 0.2e1) * t608;
t476 = t171 * t552;
t471 = t406 * t522;
t177 = t733 * t376 - 0.4e1 * t471 - t734;
t475 = t177 * t552;
t474 = t210 * t552;
t470 = -t79 * t661 / 0.2e1;
t469 = -t80 * t660 / 0.2e1;
t468 = -t81 * t659 / 0.2e1;
t467 = t737 * t616;
t466 = t735 * t612;
t465 = t733 * t608;
t464 = -0.2e1 * t482;
t463 = -0.2e1 * t479;
t462 = -0.2e1 * t476;
t461 = t400 * t485;
t460 = t403 * t484;
t459 = t406 * t483;
t458 = t127 * t202 * t548;
t457 = t128 * t204 * t544;
t456 = t129 * t206 * t540;
t455 = t539 * t679;
t454 = t166 * t364 * t534;
t453 = t538 * t678;
t452 = t167 * t366 * t531;
t451 = t537 * t677;
t450 = t168 * t368 * t528;
t260 = sin(t299);
t271 = cos(t298);
t449 = g(1) * t748 + g(2) * t757 + t260 * t763 + t271 * t765 + sin(t343) * t761;
t264 = sin(t303);
t275 = cos(t302);
t448 = g(1) * t746 + g(2) * t754 + t264 * t763 + t275 * t765 + sin(t345) * t761;
t268 = sin(t307);
t279 = cos(t306);
t447 = g(1) * t744 + g(2) * t751 + t268 * t763 + t279 * t765 + sin(t347) * t761;
t446 = g(1) * t757 + g(2) * t748 + t260 * t764 + t271 * t762 + t319 * t761;
t445 = g(1) * t754 + g(2) * t746 + t264 * t764 + t275 * t762 + t321 * t761;
t444 = g(1) * t751 + g(2) * t744 + t268 * t764 + t279 * t762 + t323 * t761;
t443 = -t480 / 0.2e1;
t442 = -t477 / 0.2e1;
t441 = -t474 / 0.2e1;
t437 = t775 * t79 + t184;
t436 = t775 * t80 + t185;
t435 = t775 * t81 + t186;
t434 = t401 * t458;
t433 = t404 * t457;
t432 = t407 * t456;
t422 = t371 * t590 + t415 * t515 + t134;
t421 = t374 * t589 + t415 * t514 + t136;
t420 = t377 * t588 + t415 * t513 + t138;
t383 = 0.2e1 * qJ(2,1) + qJ(3,1);
t381 = 0.2e1 * qJ(2,2) + qJ(3,2);
t379 = 0.2e1 * qJ(2,3) + qJ(3,3);
t341 = cos(t383);
t339 = cos(t381);
t337 = cos(t379);
t335 = sin(t383);
t333 = sin(t381);
t331 = sin(t379);
t290 = sin(t314);
t288 = sin(t312);
t286 = sin(t310);
t137 = t213 * t407 + t141;
t135 = t212 * t404 + t140;
t133 = t211 * t401 + t139;
t132 = t734 * t677;
t131 = t736 * t678;
t130 = t738 * t679;
t105 = t108 ^ 2;
t104 = t107 ^ 2;
t103 = t106 ^ 2;
t78 = (t81 * t398 + t432) * t398;
t77 = (t80 * t395 + t433) * t395;
t76 = (t79 * t392 + t434) * t392;
t75 = -pkin(1) * t398 * t456 + t407 * t435;
t74 = -pkin(1) * t432 - t398 * t435;
t73 = -pkin(1) * t395 * t457 + t404 * t436;
t72 = -pkin(1) * t433 - t395 * t436;
t71 = -pkin(1) * t392 * t458 + t401 * t437;
t70 = -pkin(1) * t434 - t392 * t437;
t69 = t734 * t456 + t81 * t591;
t68 = t736 * t457 + t80 * t592;
t67 = t738 * t458 + t79 * t593;
t54 = t725 / 0.2e1 + (t749 + t269 / 0.4e1) * g(2) + t493 * g(1) + (-t336 * t543 + t81 * t342) * t775 + ((t341 + t406) * t81 + (t335 * t767 - t558) * t672) * pkin(2) + t447;
t53 = t726 / 0.2e1 + (t752 + t265 / 0.4e1) * g(2) + t495 * g(1) + (-t334 * t547 + t80 * t340) * t775 + ((t339 + t403) * t80 + (t333 * t768 - t559) * t674) * pkin(2) + t448;
t52 = t727 / 0.2e1 + (t755 + t261 / 0.4e1) * g(2) + t497 * g(1) + (-t332 * t551 + t79 * t338) * t775 + ((t337 + t400) * t79 + (t331 * t769 - t560) * t676) * pkin(2) + t449;
t51 = -t722 / 0.2e1 + t492 * g(2) + (t749 + t750) * g(1) + (-t81 * t336 - t342 * t543) * t775 + ((-t335 - t397) * t81 + (t341 * t767 - t459) * t672) * pkin(2) + t444;
t50 = -t723 / 0.2e1 + t494 * g(2) + (t752 + t753) * g(1) + (-t80 * t334 - t340 * t547) * t775 + ((-t333 - t394) * t80 + (t339 * t768 - t460) * t674) * pkin(2) + t445;
t49 = -t724 / 0.2e1 + t496 * g(2) + (t755 + t756) * g(1) + (-t79 * t332 - t338 * t551) * t775 + ((-t331 - t391) * t79 + (t337 * t769 - t461) * t676) * pkin(2) + t446;
t48 = (t423 - 0.2e1 * t710) * t377 + (t406 + 0.2e1 * t522) * t81 * t406 + (t429 * t377 + ((0.2e1 * t376 - 0.1e1) * t591 + t465) * t174 * t108) * t206;
t47 = (t424 - 0.2e1 * t711) * t374 + (t403 + 0.2e1 * t523) * t80 * t403 + (t430 * t374 + ((0.2e1 * t373 - 0.1e1) * t592 + t466) * t173 * t107) * t204;
t46 = (t425 - 0.2e1 * t712) * t371 + (t400 + 0.2e1 * t524) * t79 * t400 + (t431 * t371 + ((0.2e1 * t370 - 0.1e1) * t593 + t467) * t172 * t106) * t202;
t45 = -0.8e1 * (-t710 / 0.2e1 + t180 / 0.4e1 + t111 / 0.4e1 + (-t525 / 0.4e1 - t632 / 0.4e1) * t206) * t619 + t81 * t465 + (-0.8e1 * (-t93 / 0.4e1 + t246 * t129 * t636 / 0.8e1) * t528 + ((0.8e1 * t376 - 0.4e1) * t377 - 0.8e1 * t471 - 0.4e1 * t376 + 0.2e1) * t206 * t108) * t174;
t44 = -0.8e1 * (-t711 / 0.2e1 + t179 / 0.4e1 + t110 / 0.4e1 + (-t526 / 0.4e1 - t633 / 0.4e1) * t204) * t624 + t80 * t466 + (-0.8e1 * (-t92 / 0.4e1 + t245 * t128 * t639 / 0.8e1) * t531 + ((0.8e1 * t373 - 0.4e1) * t374 - 0.8e1 * t472 - 0.4e1 * t373 + 0.2e1) * t204 * t107) * t173;
t43 = -0.8e1 * (-t712 / 0.2e1 + t178 / 0.4e1 + t109 / 0.4e1 + (-t527 / 0.4e1 - t634 / 0.4e1) * t202) * t629 + t79 * t467 + (-0.8e1 * (-t91 / 0.4e1 + t244 * t127 * t642 / 0.8e1) * t534 + ((0.8e1 * t370 - 0.4e1) * t371 - 0.8e1 * t473 - 0.4e1 * t370 + 0.2e1) * t202 * t106) * t172;
t36 = t398 * t416 * t513 - t42 * t407;
t35 = -t42 * t398 - t126 * t407 * t635 / 0.4e1;
t34 = t395 * t416 * t514 - t41 * t404;
t33 = -t41 * t395 - t125 * t404 * t638 / 0.4e1;
t32 = t392 * t416 * t515 - t40 * t401;
t31 = -t40 * t392 - t124 * t401 * t641 / 0.4e1;
t30 = t397 * t420 + t406 * t489;
t29 = -t397 * t489 + t406 * t420;
t28 = t394 * t421 + t403 * t490;
t27 = -t394 * t490 + t403 * t421;
t26 = t391 * t422 + t400 * t491;
t25 = -t391 * t491 + t400 * t422;
t24 = ((t758 - t707 / 0.2e1) * t129 + (0.1e1 - t653) * t704) * t635 + ((-t516 + t553 + t680 + t686) * t413 + t417) * t636;
t23 = ((t759 - t708 / 0.2e1) * t128 + (0.1e1 - t654) * t705) * t638 + ((-t518 + t555 + t682 + t688) * t413 + t418) * t639;
t22 = ((t760 - t709 / 0.2e1) * t127 + (0.1e1 - t655) * t706) * t641 + ((-t520 + t557 + t684 + t690) * t413 + t419) * t642;
t21 = ((t758 - t707 / 0.4e1) * t129 + (0.1e1 - t653 / 0.2e1) * t704) * t635 + ((t686 / 0.2e1 + t680 / 0.2e1 - t516 / 0.2e1 + t553 / 0.2e1) * t413 + t417) * t636;
t20 = ((t759 - t708 / 0.4e1) * t128 + (0.1e1 - t654 / 0.2e1) * t705) * t638 + ((t688 / 0.2e1 + t682 / 0.2e1 - t518 / 0.2e1 + t555 / 0.2e1) * t413 + t418) * t639;
t19 = ((t760 - t709 / 0.4e1) * t127 + (0.1e1 - t655 / 0.2e1) * t706) * t641 + ((t690 / 0.2e1 + t684 / 0.2e1 - t520 / 0.2e1 + t557 / 0.2e1) * t413 + t419) * t642;
t18 = t105 * t406 + t24 * t397;
t17 = t104 * t403 + t23 * t394;
t16 = t103 * t400 + t22 * t391;
t15 = t105 * t397 - t24 * t406;
t14 = t104 * t394 - t23 * t403;
t13 = t103 * t391 - t22 * t400;
t12 = -t725 / 0.2e1 + (t102 * t558 - t21 * t406) * t770 + (pkin(1) * t336 + pkin(2) * t335) * t677 + (t498 + t499) * g(2) + (t740 + t290 / 0.2e1 - t493) * g(1) + t447;
t11 = -t726 / 0.2e1 + (t101 * t559 - t20 * t403) * t770 + (pkin(1) * t334 + pkin(2) * t333) * t678 + (t500 + t501) * g(2) + (t741 + t288 / 0.2e1 - t495) * g(1) + t448;
t10 = -t727 / 0.2e1 + (t100 * t560 - t19 * t400) * t770 + (pkin(1) * t332 + pkin(2) * t331) * t679 + (t502 + t503) * g(2) + (t742 + t286 / 0.2e1 - t497) * g(1) + t449;
t9 = t722 / 0.2e1 + (t102 * t459 + t21 * t397) * t770 + (pkin(1) * t342 + pkin(2) * t341) * t677 + (t740 - t290 / 0.2e1 - t492) * g(2) + (t498 - t499) * g(1) + t444;
t8 = t723 / 0.2e1 + (t101 * t460 + t20 * t394) * t770 + (pkin(1) * t340 + pkin(2) * t339) * t678 + (t741 - t288 / 0.2e1 - t494) * g(2) + (t500 - t501) * g(1) + t445;
t7 = t724 / 0.2e1 + (t100 * t461 + t19 * t391) * t770 + (pkin(1) * t338 + pkin(2) * t337) * t679 + (t742 - t286 / 0.2e1 - t496) * g(2) + (t502 - t503) * g(1) + t446;
t6 = t15 * t398 - t18 * t407;
t5 = t14 * t395 - t17 * t404;
t4 = t13 * t392 - t16 * t401;
t3 = t15 * t407 + t18 * t398;
t2 = t14 * t404 + t17 * t395;
t1 = t13 * t401 + t16 * t392;
t37 = [t529 * t81 + t532 * t80 + t535 * t79, t184 * t535 + t185 * t532 + t186 * t529, t187 * t535 + t188 * t532 + t189 * t529, t76 * t535 + t77 * t532 + t78 * t529 + (-t155 * t454 - t157 * t452 - t159 * t450) * t415, t67 * t535 + t68 * t532 + t69 * t529 + (-t130 * t696 - t131 * t694 - t132 * t692) * t415, t31 * t535 + t33 * t532 + t35 * t529 + (-t155 * t566 - t157 * t564 - t159 * t562) * t415, t32 * t535 + t34 * t532 + t36 * t529 + (-t155 * t565 - t157 * t563 - t159 * t561) * t415, (t40 * t696 + t41 * t694 + t42 * t692) * t415, t71 * t535 + t73 * t532 + t75 * t529 + (t133 * t696 + t135 * t694 + t137 * t692) * t415, t70 * t535 + t72 * t532 + t74 * t529 + (t134 * t696 + t136 * t694 + t138 * t692) * t415, t46 * t535 + t47 * t532 + t48 * t529 + (t155 * t464 + t157 * t463 + t159 * t462 + (-t160 * t482 - t161 * t479 - t162 * t476) * t594) * t415, t43 * t535 + t44 * t532 + t45 * t529 + (-t155 * t481 - t157 * t478 - t159 * t475 + (-t160 * t481 - t161 * t478 - t162 * t475) * t413) * t415, t4 * t535 + t5 * t532 + t6 * t529 + (-t155 * t569 - t157 * t568 - t159 * t567 + (-t160 * t569 - t161 * t568 - t162 * t567) * t413) * t415, t1 * t535 + t2 * t532 + t3 * t529 + (t155 * t572 + t157 * t571 + t159 * t570 + (t160 * t572 + t161 * t571 + t162 * t570) * t413) * t415, (t22 * t696 + t23 * t694 + t24 * t692 + (t22 * t691 + t23 * t689 + t24 * t687) * t413) * t415, t52 * t535 + t53 * t532 + t54 * t529 + (t10 * t696 + t11 * t694 + t12 * t692 + (t26 * t691 + t28 * t689 + t30 * t687) * t413) * t415, t49 * t535 + t50 * t532 + t51 * t529 + (t7 * t696 + t8 * t694 + t9 * t692 + (t25 * t691 + t27 * t689 + t29 * t687) * t413) * t415, t390 - g(1); -t530 * t81 - t533 * t80 - t536 * t79, -t184 * t536 - t185 * t533 - t186 * t530, -t187 * t536 - t188 * t533 - t189 * t530, -t76 * t536 - t77 * t533 - t78 * t530 + (-t154 * t454 - t156 * t452 - t158 * t450) * t415, -t67 * t536 - t68 * t533 - t69 * t530 + (-t130 * t697 - t131 * t695 - t132 * t693) * t415, -t31 * t536 - t33 * t533 - t35 * t530 + (-t154 * t566 - t156 * t564 - t158 * t562) * t415, -t32 * t536 - t34 * t533 - t36 * t530 + (-t154 * t565 - t156 * t563 - t158 * t561) * t415, (t40 * t697 + t41 * t695 + t42 * t693) * t415, -t71 * t536 - t73 * t533 - t75 * t530 + (t133 * t697 + t135 * t695 + t137 * t693) * t415, -t70 * t536 - t72 * t533 - t74 * t530 + (t134 * t697 + t136 * t695 + t138 * t693) * t415, -t46 * t536 - t47 * t533 - t48 * t530 + (t154 * t464 + t156 * t463 + t158 * t462 + (-t163 * t482 - t164 * t479 - t165 * t476) * t594) * t415, -t43 * t536 - t44 * t533 - t45 * t530 + (-t154 * t481 - t156 * t478 - t158 * t475 + (-t163 * t481 - t164 * t478 - t165 * t475) * t413) * t415, -t4 * t536 - t5 * t533 - t6 * t530 + (-t154 * t569 - t156 * t568 - t158 * t567 + (-t163 * t569 - t164 * t568 - t165 * t567) * t413) * t415, -t1 * t536 - t2 * t533 - t3 * t530 + (t154 * t572 + t156 * t571 + t158 * t570 + (t163 * t572 + t164 * t571 + t165 * t570) * t413) * t415, (t22 * t697 + t23 * t695 + t24 * t693 + (t22 * t685 + t23 * t683 + t24 * t681) * t413) * t415, -t52 * t536 - t53 * t533 - t54 * t530 + (t10 * t697 + t11 * t695 + t12 * t693 + (t26 * t685 + t28 * t683 + t30 * t681) * t413) * t415, -t49 * t536 - t50 * t533 - t51 * t530 + (t7 * t697 + t8 * t695 + t9 * t693 + (t25 * t685 + t27 * t683 + t29 * t681) * t413) * t415, t389 - g(2); -t81 * t663 - t665 * t80 - t667 * t79, -t184 * t667 - t185 * t665 - t186 * t663, -t187 * t667 - t188 * t665 - t189 * t663, -t76 * t667 - t77 * t665 - t78 * t663 + (t441 * t619 + t442 * t624 + t443 * t629) * t415, -t67 * t667 - t68 * t665 - t69 * t663 + (-t130 * t506 - t131 * t505 - t132 * t504) * t415, -t31 * t667 - t33 * t665 - t35 * t663 + (t392 * t470 + t395 * t469 + t398 * t468) * t415, -t32 * t667 - t34 * t665 - t36 * t663 + (t401 * t470 + t404 * t469 + t407 * t468) * t415, (t40 * t506 + t41 * t505 + t42 * t504) * t415, -t71 * t667 - t73 * t665 - t75 * t663 + (t133 * t506 + t135 * t505 + t137 * t504) * t415, -t70 * t667 - t72 * t665 - t74 * t663 + (t134 * t506 + t136 * t505 + t138 * t504) * t415, -t46 * t667 - t47 * t665 - t48 * t663 + (-t169 * t480 - t170 * t477 - t171 * t474 + (t169 * t455 + t170 * t453 + t171 * t451) * t594) * t415, -t43 * t667 - t44 * t665 - t45 * t663 + (t177 * t441 + t176 * t442 + t175 * t443 + (t175 * t455 + t176 * t453 + t177 * t451) * t413) * t415, -t4 * t667 - t5 * t665 - t6 * t663 + (t201 * t468 + t200 * t469 + t199 * t470 + (t199 * t488 + t200 * t487 + t201 * t486) * t413) * t415, -t1 * t667 - t2 * t665 - t3 * t663 + (-t438 * t468 - t439 * t469 - t440 * t470 + (-t438 * t486 - t439 * t487 - t440 * t488) * t413) * t415, (t24 * t504 + t23 * t505 + t22 * t506 + (-t22 * t539 - t23 * t538 - t24 * t537) * t413) * t415, -t52 * t667 - t53 * t665 - t54 * t663 + (t12 * t504 + t11 * t505 + t10 * t506 + (-t26 * t539 - t28 * t538 - t30 * t537) * t413) * t415, -t49 * t667 - t50 * t665 - t51 * t663 + (t9 * t504 + t8 * t505 + t7 * t506 + (-t25 * t539 - t27 * t538 - t29 * t537) * t413) * t415, t388 - g(3);];
tauX_reg  = t37;
