% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:05
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR2G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G1A0_coriolisvec_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G1A0_coriolisvec_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:05:00
% EndTime: 2020-03-09 21:05:09
% DurationCPUTime: 9.16s
% Computational Cost: add. (22695->429), mult. (43376->847), div. (10440->26), fcn. (36300->42), ass. (0->385)
t2478 = sin(qJ(2,3));
t2449 = 0.1e1 / t2478 ^ 2;
t2483 = cos(qJ(3,3));
t2458 = t2483 ^ 2;
t2462 = 0.1e1 / t2458 ^ 2;
t2484 = cos(qJ(2,3));
t2490 = xDP(2);
t2491 = xDP(1);
t2402 = t2478 * t2490 + t2484 * t2491;
t2403 = t2478 * t2491 - t2484 * t2490;
t2441 = qJ(1,3) + legFrame(3,3);
t2429 = sin(t2441);
t2432 = cos(t2441);
t2477 = sin(qJ(3,3));
t2489 = xDP(3);
t2697 = t2477 * t2489;
t2393 = t2697 + (t2402 * t2432 - t2403 * t2429) * t2483;
t2390 = t2393 ^ 2;
t2749 = pkin(2) * t2483;
t2414 = pkin(1) * t2484 + t2749;
t2763 = t2390 * t2414;
t2767 = t2449 * t2462 * t2763;
t2480 = sin(qJ(2,2));
t2453 = 0.1e1 / t2480 ^ 2;
t2485 = cos(qJ(3,2));
t2463 = t2485 ^ 2;
t2467 = 0.1e1 / t2463 ^ 2;
t2486 = cos(qJ(2,2));
t2404 = t2480 * t2490 + t2486 * t2491;
t2405 = t2480 * t2491 - t2486 * t2490;
t2442 = qJ(1,2) + legFrame(2,3);
t2430 = sin(t2442);
t2433 = cos(t2442);
t2479 = sin(qJ(3,2));
t2693 = t2479 * t2489;
t2394 = t2693 + (t2404 * t2433 - t2405 * t2430) * t2485;
t2391 = t2394 ^ 2;
t2748 = pkin(2) * t2485;
t2415 = pkin(1) * t2486 + t2748;
t2762 = t2391 * t2415;
t2766 = t2453 * t2467 * t2762;
t2482 = sin(qJ(2,1));
t2457 = 0.1e1 / t2482 ^ 2;
t2487 = cos(qJ(3,1));
t2468 = t2487 ^ 2;
t2472 = 0.1e1 / t2468 ^ 2;
t2488 = cos(qJ(2,1));
t2406 = t2482 * t2490 + t2488 * t2491;
t2407 = t2482 * t2491 - t2488 * t2490;
t2443 = qJ(1,1) + legFrame(1,3);
t2431 = sin(t2443);
t2434 = cos(t2443);
t2481 = sin(qJ(3,1));
t2689 = t2481 * t2489;
t2395 = t2689 + (t2406 * t2434 - t2407 * t2431) * t2487;
t2392 = t2395 ^ 2;
t2747 = pkin(2) * t2487;
t2416 = pkin(1) * t2488 + t2747;
t2761 = t2392 * t2416;
t2765 = t2457 * t2472 * t2761;
t2764 = 2 * MDP(8);
t2447 = t2477 ^ 2;
t2446 = t2477 * t2447;
t2760 = t2446 * t2462;
t2448 = 0.1e1 / t2478;
t2718 = t2448 * t2484;
t2759 = t2477 * t2767;
t2451 = t2479 ^ 2;
t2450 = t2479 * t2451;
t2758 = t2450 * t2467;
t2452 = 0.1e1 / t2480;
t2713 = t2452 * t2486;
t2757 = t2479 * t2766;
t2455 = t2481 ^ 2;
t2454 = t2481 * t2455;
t2756 = t2454 * t2472;
t2456 = 0.1e1 / t2482;
t2708 = t2456 * t2488;
t2755 = t2481 * t2765;
t2493 = 0.1e1 / pkin(2);
t2754 = -0.2e1 * pkin(1);
t2459 = 0.1e1 / t2483;
t2464 = 0.1e1 / t2485;
t2469 = 0.1e1 / t2487;
t2752 = pkin(2) * t2458;
t2751 = pkin(2) * t2463;
t2750 = pkin(2) * t2468;
t2473 = t2489 ^ 2;
t2746 = MDP(9) * t2473;
t2444 = pkin(1) * t2490;
t2445 = pkin(1) * t2491;
t2384 = -t2414 * t2697 + (-(t2402 * t2749 + t2445) * t2432 - (-t2403 * t2749 + t2444) * t2429) * t2483;
t2460 = 0.1e1 / t2483 ^ 2;
t2496 = 0.1e1 / pkin(1);
t2685 = t2493 * t2496;
t2628 = t2448 * t2685;
t2381 = t2384 * t2460 * t2628;
t2719 = t2448 * t2459;
t2387 = t2393 * t2496 * t2719;
t2376 = t2387 + t2381;
t2687 = t2489 * t2493;
t2610 = t2484 * t2687;
t2552 = t2459 * t2610;
t2508 = t2483 * t2458;
t2461 = 0.1e1 / t2508;
t2558 = t2461 * t2628;
t2698 = t2477 * t2478;
t2525 = ((-pkin(1) * t2376 * t2698 + t2459 * t2489) * t2483 + pkin(1) * t2552) * t2489 * t2558;
t2492 = pkin(2) ^ 2;
t2369 = t2492 * t2376 * t2508;
t2494 = 0.1e1 / pkin(2) ^ 2;
t2607 = t2494 * t2462 * t2384;
t2613 = t2478 * t2697;
t2677 = t2484 * t2752;
t2588 = (t2369 + (t2376 * t2677 - t2613) * pkin(1)) * t2607;
t2705 = t2461 * t2493;
t2661 = (t2369 + (0.2e1 * (t2387 + t2381 / 0.2e1) * t2677 + (t2393 * t2448 - t2613) * t2483 * t2459) * pkin(1)) * t2705;
t2497 = 0.1e1 / pkin(1) ^ 2;
t2717 = t2449 * t2497;
t2646 = t2384 * t2717;
t2732 = t2376 * t2459;
t2360 = t2646 * t2732;
t2411 = t2473 * t2558;
t2684 = t2360 + t2411;
t2736 = (-t2376 * t2752 - t2393 * t2718) * t2460;
t2745 = (-t2525 / 0.2e1 + (-t2588 / 0.2e1 + (-t2736 - t2661 / 0.2e1) * t2393) * t2717 + t2684) * t2484;
t2385 = -t2415 * t2693 + (-(t2404 * t2748 + t2445) * t2433 - (-t2405 * t2748 + t2444) * t2430) * t2485;
t2465 = 0.1e1 / t2485 ^ 2;
t2622 = t2452 * t2685;
t2382 = t2385 * t2465 * t2622;
t2714 = t2452 * t2464;
t2388 = t2394 * t2496 * t2714;
t2378 = t2388 + t2382;
t2609 = t2486 * t2687;
t2551 = t2464 * t2609;
t2511 = t2485 * t2463;
t2466 = 0.1e1 / t2511;
t2556 = t2466 * t2622;
t2694 = t2479 * t2480;
t2524 = ((-pkin(1) * t2378 * t2694 + t2464 * t2489) * t2485 + pkin(1) * t2551) * t2489 * t2556;
t2370 = t2492 * t2378 * t2511;
t2606 = t2494 * t2467 * t2385;
t2612 = t2480 * t2693;
t2676 = t2486 * t2751;
t2587 = (t2370 + (t2378 * t2676 - t2612) * pkin(1)) * t2606;
t2703 = t2466 * t2493;
t2660 = (t2370 + (0.2e1 * (t2388 + t2382 / 0.2e1) * t2676 + (t2394 * t2452 - t2612) * t2485 * t2464) * pkin(1)) * t2703;
t2712 = t2453 * t2497;
t2645 = t2385 * t2712;
t2729 = t2378 * t2464;
t2361 = t2645 * t2729;
t2412 = t2473 * t2556;
t2683 = t2361 + t2412;
t2735 = (-t2378 * t2751 - t2394 * t2713) * t2465;
t2744 = (-t2524 / 0.2e1 + (-t2587 / 0.2e1 + (-t2735 - t2660 / 0.2e1) * t2394) * t2712 + t2683) * t2486;
t2386 = -t2416 * t2689 + (-(t2406 * t2747 + t2445) * t2434 - (-t2407 * t2747 + t2444) * t2431) * t2487;
t2470 = 0.1e1 / t2487 ^ 2;
t2616 = t2456 * t2685;
t2383 = t2386 * t2470 * t2616;
t2709 = t2456 * t2469;
t2389 = t2395 * t2496 * t2709;
t2380 = t2389 + t2383;
t2608 = t2488 * t2687;
t2550 = t2469 * t2608;
t2514 = t2487 * t2468;
t2471 = 0.1e1 / t2514;
t2554 = t2471 * t2616;
t2690 = t2481 * t2482;
t2523 = ((-pkin(1) * t2380 * t2690 + t2469 * t2489) * t2487 + pkin(1) * t2550) * t2489 * t2554;
t2371 = t2492 * t2380 * t2514;
t2605 = t2494 * t2472 * t2386;
t2611 = t2482 * t2689;
t2675 = t2488 * t2750;
t2586 = (t2371 + (t2380 * t2675 - t2611) * pkin(1)) * t2605;
t2701 = t2471 * t2493;
t2659 = (t2371 + (0.2e1 * (t2389 + t2383 / 0.2e1) * t2675 + (t2395 * t2456 - t2611) * t2487 * t2469) * pkin(1)) * t2701;
t2707 = t2457 * t2497;
t2644 = t2386 * t2707;
t2726 = t2380 * t2469;
t2362 = t2644 * t2726;
t2413 = t2473 * t2554;
t2682 = t2362 + t2413;
t2734 = (-t2380 * t2750 - t2395 * t2708) * t2470;
t2743 = (-t2523 / 0.2e1 + (-t2586 / 0.2e1 + (-t2734 - t2659 / 0.2e1) * t2395) * t2707 + t2682) * t2488;
t2336 = -t2525 + (-t2588 + (-t2661 - t2736) * t2393) * t2717 + t2684;
t2408 = 0.1e1 / (sin(qJ(2,3) + qJ(3,3)) + sin(qJ(2,3) - qJ(3,3)));
t2742 = t2336 * t2408;
t2338 = -t2524 + (-t2587 + (-t2660 - t2735) * t2394) * t2712 + t2683;
t2409 = 0.1e1 / (sin(qJ(2,2) + qJ(3,2)) + sin(qJ(2,2) - qJ(3,2)));
t2741 = t2338 * t2409;
t2340 = -t2523 + (-t2586 + (-t2659 - t2734) * t2395) * t2707 + t2682;
t2410 = 0.1e1 / (sin(qJ(2,1) + qJ(3,1)) + sin(qJ(2,1) - qJ(3,1)));
t2740 = t2340 * t2410;
t2342 = -t2393 * t2717 * t2736 + t2684;
t2739 = t2342 * t2448;
t2343 = -t2394 * t2712 * t2735 + t2683;
t2738 = t2343 * t2452;
t2344 = -t2395 * t2707 * t2734 + t2682;
t2737 = t2344 * t2456;
t2733 = (0.2e1 * t2387 + t2381) * t2384;
t2731 = t2376 * t2477;
t2730 = (0.2e1 * t2388 + t2382) * t2385;
t2728 = t2378 * t2479;
t2727 = (0.2e1 * t2389 + t2383) * t2386;
t2725 = t2380 * t2481;
t2724 = t2414 * t2460;
t2723 = t2415 * t2465;
t2722 = t2416 * t2470;
t2721 = t2447 * t2461;
t2720 = t2448 * t2336;
t2716 = t2451 * t2466;
t2715 = t2452 * t2338;
t2711 = t2455 * t2471;
t2710 = t2456 * t2340;
t2706 = t2459 * t2477;
t2704 = t2464 * t2479;
t2702 = t2469 * t2481;
t2700 = t2473 * t2494;
t2699 = t2477 * t2461;
t2696 = t2478 * t2342;
t2695 = t2479 * t2466;
t2692 = t2480 * t2343;
t2691 = t2481 * t2471;
t2688 = t2482 * t2344;
t2686 = t2489 * t2494;
t2681 = 2 * MDP(7);
t2679 = 4 * MDP(8);
t2678 = 2 * MDP(13);
t2674 = 2 * t2764;
t2437 = qJ(2,1) + t2443;
t2436 = qJ(2,2) + t2442;
t2435 = qJ(2,3) + t2441;
t2673 = t2447 * t2742;
t2672 = t2336 * t2477 * t2483;
t2671 = t2451 * t2741;
t2670 = t2338 * t2479 * t2485;
t2669 = t2455 * t2740;
t2668 = t2340 * t2481 * t2487;
t2667 = t2408 * t2696;
t2666 = t2342 * t2408 * t2484;
t2665 = t2409 * t2692;
t2664 = t2343 * t2409 * t2486;
t2663 = t2410 * t2688;
t2662 = t2344 * t2410 * t2488;
t2658 = t2448 * t2733;
t2657 = t2408 * t2731;
t2438 = t2458 - 0.1e1 / 0.2e1;
t2656 = t2438 * t2732;
t2655 = t2448 * t2731;
t2654 = t2452 * t2730;
t2653 = t2409 * t2728;
t2439 = t2463 - 0.1e1 / 0.2e1;
t2652 = t2439 * t2729;
t2651 = t2452 * t2728;
t2650 = t2456 * t2727;
t2649 = t2410 * t2725;
t2440 = t2468 - 0.1e1 / 0.2e1;
t2648 = t2440 * t2726;
t2647 = t2456 * t2725;
t2643 = t2390 * t2408 * t2448;
t2641 = t2391 * t2409 * t2452;
t2639 = t2392 * t2410 * t2456;
t2637 = t2448 * t2724;
t2636 = t2342 * t2724;
t2635 = t2452 * t2723;
t2634 = t2343 * t2723;
t2633 = t2456 * t2722;
t2632 = t2344 * t2722;
t2631 = t2447 * t2720;
t2630 = t2447 * t2719;
t2629 = t2448 * t2706;
t2627 = t2449 * t2460 * t2484;
t2626 = t2449 * t2699;
t2625 = t2451 * t2715;
t2624 = t2451 * t2714;
t2623 = t2452 * t2704;
t2621 = t2453 * t2465 * t2486;
t2620 = t2453 * t2695;
t2619 = t2455 * t2710;
t2618 = t2455 * t2709;
t2617 = t2456 * t2702;
t2615 = t2457 * t2470 * t2488;
t2614 = t2457 * t2691;
t2604 = t2700 / 0.2e1;
t2603 = t2459 + t2721;
t2602 = t2464 + t2716;
t2601 = t2469 + t2711;
t2600 = t2408 * t2672;
t2599 = t2336 * t2637;
t2598 = t2448 * t2672;
t2597 = t2409 * t2670;
t2596 = t2338 * t2635;
t2595 = t2452 * t2670;
t2594 = t2410 * t2668;
t2593 = t2340 * t2633;
t2592 = t2456 * t2668;
t2591 = t2342 * t2629;
t2590 = t2343 * t2623;
t2589 = t2344 * t2617;
t2585 = t2460 * t2658;
t2584 = t2408 * t2656;
t2583 = t2448 * t2656;
t2582 = t2438 * t2655;
t2581 = t2465 * t2654;
t2580 = t2409 * t2652;
t2579 = t2452 * t2652;
t2578 = t2439 * t2651;
t2577 = t2470 * t2650;
t2576 = t2410 * t2648;
t2575 = t2456 * t2648;
t2574 = t2440 * t2647;
t2573 = t2459 * t2643;
t2572 = t2460 * t2643;
t2570 = t2464 * t2641;
t2569 = t2465 * t2641;
t2567 = t2469 * t2639;
t2566 = t2470 * t2639;
t2423 = qJ(3,3) + t2435;
t2424 = -qJ(3,3) + t2435;
t2396 = t2429 * t2754 + (-sin(t2424) - sin(t2423)) * pkin(2);
t2564 = t2396 * t2666;
t2425 = qJ(3,2) + t2436;
t2426 = -qJ(3,2) + t2436;
t2397 = t2430 * t2754 + (-sin(t2426) - sin(t2425)) * pkin(2);
t2563 = t2397 * t2664;
t2427 = qJ(3,1) + t2437;
t2428 = -qJ(3,1) + t2437;
t2398 = t2431 * t2754 + (-sin(t2428) - sin(t2427)) * pkin(2);
t2562 = t2398 * t2662;
t2399 = t2432 * t2754 + (-cos(t2424) - cos(t2423)) * pkin(2);
t2561 = t2399 * t2666;
t2400 = t2433 * t2754 + (-cos(t2426) - cos(t2425)) * pkin(2);
t2560 = t2400 * t2664;
t2401 = t2434 * t2754 + (-cos(t2428) - cos(t2427)) * pkin(2);
t2559 = t2401 * t2662;
t2557 = t2484 * t2626;
t2555 = t2486 * t2620;
t2553 = t2488 * t2614;
t2549 = t2390 * t2627;
t2548 = t2391 * t2621;
t2547 = t2392 * t2615;
t2546 = t2460 * t2604;
t2545 = t2465 * t2604;
t2544 = t2470 * t2604;
t2543 = t2408 * t2603;
t2542 = t2409 * t2602;
t2541 = t2410 * t2601;
t2540 = t2448 * t2603;
t2539 = t2452 * t2602;
t2538 = t2456 * t2601;
t2537 = t2627 * t2733;
t2536 = t2621 * t2730;
t2535 = t2615 * t2727;
t2534 = t2477 * t2572;
t2533 = t2408 * t2549;
t2532 = t2479 * t2569;
t2531 = t2409 * t2548;
t2530 = t2481 * t2566;
t2529 = t2410 * t2547;
t2528 = t2636 * t2718;
t2527 = t2634 * t2713;
t2526 = t2632 * t2708;
t2337 = -t2525 + 0.2e1 * t2360 + 0.2e1 * t2411 + (-t2588 + (-t2661 - 0.2e1 * t2736) * t2393) * t2717;
t2357 = t2546 + (t2393 * t2705 + t2607 / 0.2e1) * t2646;
t2522 = (t2484 * t2337 * MDP(5) + (0.2e1 * t2483 * t2745 - 0.2e1 * t2552 * t2731 + (-0.2e1 * t2357 * t2483 - t2700 * t2721) * t2478) * MDP(12) + (-(t2478 * t2546 + t2745) * t2477 + t2357 * t2698 - t2376 * t2610) * t2678) * t2448;
t2339 = -t2524 + 0.2e1 * t2361 + 0.2e1 * t2412 + (-t2587 + (-t2660 - 0.2e1 * t2735) * t2394) * t2712;
t2358 = t2545 + (t2394 * t2703 + t2606 / 0.2e1) * t2645;
t2521 = (t2486 * t2339 * MDP(5) + (0.2e1 * t2485 * t2744 - 0.2e1 * t2551 * t2728 + (-0.2e1 * t2358 * t2485 - t2700 * t2716) * t2480) * MDP(12) + (-(t2480 * t2545 + t2744) * t2479 + t2358 * t2694 - t2378 * t2609) * t2678) * t2452;
t2341 = -t2523 + 0.2e1 * t2362 + 0.2e1 * t2413 + (-t2586 + (-t2659 - 0.2e1 * t2734) * t2395) * t2707;
t2359 = t2544 + (t2395 * t2701 + t2605 / 0.2e1) * t2644;
t2520 = (t2488 * t2341 * MDP(5) + (0.2e1 * t2487 * t2743 - 0.2e1 * t2550 * t2725 + (-0.2e1 * t2359 * t2487 - t2700 * t2711) * t2482) * MDP(12) + (-(t2482 * t2544 + t2743) * t2481 + t2359 * t2690 - t2380 * t2608) * t2678) * t2456;
t2519 = -t2337 * MDP(6) + t2522;
t2518 = -t2339 * MDP(6) + t2521;
t2517 = -t2341 * MDP(6) + t2520;
t2495 = t2493 / t2492;
t2422 = cos(t2437);
t2421 = cos(t2436);
t2420 = cos(t2435);
t2419 = sin(t2437);
t2418 = sin(t2436);
t2417 = sin(t2435);
t2374 = t2380 ^ 2;
t2373 = t2378 ^ 2;
t2372 = t2376 ^ 2;
t1 = [t2517 * t2422 + t2518 * t2421 + t2519 * t2420 + ((t2559 + t2560 + t2561) * MDP(5) + (-t2399 * t2667 - t2400 * t2665 - t2401 * t2663) * MDP(6) + (t2483 * t2561 + t2485 * t2560 + t2487 * t2559) * MDP(12) + (-t2477 * t2561 - t2479 * t2560 - t2481 * t2559) * MDP(13) + ((t2399 * t2572 + t2400 * t2569 + t2401 * t2566) * MDP(5) + (t2399 * t2533 + t2400 * t2531 + t2401 * t2529) * MDP(6) + (t2399 * t2573 + t2400 * t2570 + t2401 * t2567) * MDP(12) + (-t2399 * t2534 - t2400 * t2532 - t2401 * t2530) * MDP(13)) * t2497) * t2493 + ((t2420 * t2739 + t2421 * t2738 + t2422 * t2737) * MDP(1) + (t2420 * t2720 + t2421 * t2715 + t2422 * t2710) * MDP(4) + (t2420 * t2631 + t2421 * t2625 + t2422 * t2619) * MDP(7) + (t2420 * t2598 + t2421 * t2595 + t2422 * t2592) * t2764 + ((t2399 * t2657 + t2400 * t2653 + t2401 * t2649) * t2681 + (t2399 * t2584 + t2400 * t2580 + t2401 * t2576) * t2674) * t2686 + ((t2399 * t2543 + t2400 * t2542 + t2401 * t2541) * t2495 + (t2420 * t2540 + t2421 * t2539 + t2422 * t2538) * t2494) * t2746 + ((t2399 * t2742 + t2400 * t2741 + t2401 * t2740) * MDP(4) + (-t2420 * t2585 - t2421 * t2581 - t2422 * t2577) * MDP(5) + (-t2420 * t2537 - t2421 * t2536 - t2422 * t2535) * MDP(6) + (t2399 * t2673 + t2400 * t2671 + t2401 * t2669) * MDP(7) + (t2399 * t2600 + t2400 * t2597 + t2401 * t2594) * t2764 + ((t2420 * t2655 + t2421 * t2651 + t2422 * t2647) * t2681 + (t2420 * t2583 + t2421 * t2579 + t2422 * t2575) * t2674) * t2489) * t2493) * t2496; t2517 * t2419 + t2518 * t2418 + t2519 * t2417 + ((t2562 + t2563 + t2564) * MDP(5) + (-t2396 * t2667 - t2397 * t2665 - t2398 * t2663) * MDP(6) + (t2483 * t2564 + t2485 * t2563 + t2487 * t2562) * MDP(12) + (-t2477 * t2564 - t2479 * t2563 - t2481 * t2562) * MDP(13) + ((t2396 * t2572 + t2397 * t2569 + t2398 * t2566) * MDP(5) + (t2396 * t2533 + t2397 * t2531 + t2398 * t2529) * MDP(6) + (t2396 * t2573 + t2397 * t2570 + t2398 * t2567) * MDP(12) + (-t2396 * t2534 - t2397 * t2532 - t2398 * t2530) * MDP(13)) * t2497) * t2493 + ((t2417 * t2739 + t2418 * t2738 + t2419 * t2737) * MDP(1) + (t2417 * t2720 + t2418 * t2715 + t2419 * t2710) * MDP(4) + (t2417 * t2631 + t2418 * t2625 + t2419 * t2619) * MDP(7) + (t2417 * t2598 + t2418 * t2595 + t2419 * t2592) * t2764 + ((t2396 * t2657 + t2397 * t2653 + t2398 * t2649) * t2681 + (t2396 * t2584 + t2397 * t2580 + t2398 * t2576) * t2674) * t2686 + ((t2396 * t2543 + t2397 * t2542 + t2398 * t2541) * t2495 + (t2417 * t2540 + t2418 * t2539 + t2419 * t2538) * t2494) * t2746 + ((t2396 * t2742 + t2397 * t2741 + t2398 * t2740) * MDP(4) + (-t2417 * t2585 - t2418 * t2581 - t2419 * t2577) * MDP(5) + (-t2417 * t2537 - t2418 * t2536 - t2419 * t2535) * MDP(6) + (t2396 * t2673 + t2397 * t2671 + t2398 * t2669) * MDP(7) + (t2396 * t2600 + t2397 * t2597 + t2398 * t2594) * t2764 + ((t2417 * t2655 + t2418 * t2651 + t2419 * t2647) * t2681 + (t2417 * t2583 + t2418 * t2579 + t2419 * t2575) * t2674) * t2489) * t2493) * t2496; (-t2337 * t2706 - t2339 * t2704 - t2341 * t2702) * MDP(6) + t2520 * t2702 + t2521 * t2704 + t2522 * t2706 + (t2462 * t2477 + t2467 * t2479 + t2472 * t2481) * t2495 * MDP(11) * t2473 + ((t2589 + t2590 + t2591) * MDP(1) + (t2336 * t2629 + t2338 * t2623 + t2340 * t2617) * MDP(4) + (t2446 * t2336 * t2719 + t2450 * t2338 * t2714 + t2454 * t2340 * t2709) * MDP(7) + (t2619 + t2625 + t2631) * t2764 + ((-t2376 * t2447 * t2637 - t2378 * t2451 * t2635 - t2380 * t2455 * t2633) * t2681 + (-t2414 * t2461 * t2582 - t2415 * t2466 * t2578 - t2416 * t2471 * t2574) * t2679) * t2686 + (((-t2469 * t2756 - t2691) * t2456 * t2416 + (-t2464 * t2758 - t2695) * t2452 * t2415 + (-t2459 * t2760 - t2699) * t2448 * t2414) * t2495 + ((t2470 * t2481 + t2756) * t2456 + (t2465 * t2479 + t2758) * t2452 + (t2460 * t2477 + t2760) * t2448) * t2494) * t2746) * t2496 + ((-t2477 * t2528 - t2479 * t2527 - t2481 * t2526) * MDP(5) + (t2477 * t2636 + t2479 * t2634 + t2481 * t2632) * MDP(6) + (-t2477 * t2372 - t2479 * t2373 - t2481 * t2374) * MDP(7) + (t2469 * t2374 * (-0.2e1 * t2468 + 0.1e1) + t2464 * t2373 * (-0.2e1 * t2463 + 0.1e1) + t2459 * t2372 * (-0.2e1 * t2458 + 0.1e1)) * MDP(8) + (t2336 * t2706 + t2338 * t2704 + t2340 * t2702) * MDP(9) + (t2336 + t2338 + t2340) * MDP(10) + (-t2414 * t2484 * t2591 - t2415 * t2486 * t2590 - t2416 * t2488 * t2589) * MDP(12) + (t2447 * t2528 + t2451 * t2527 + t2455 * t2526) * MDP(13) + ((-t2688 * t2702 - t2692 * t2704 - t2696 * t2706) * MDP(12) + (-t2688 - t2692 - t2696) * MDP(13)) * pkin(1) + ((-t2755 - t2757 - t2759) * MDP(5) + (-t2708 * t2755 - t2713 * t2757 - t2718 * t2759) * MDP(6) + (-t2614 * t2761 - t2620 * t2762 - t2626 * t2763) * MDP(12) + (t2447 * t2767 + t2451 * t2766 + t2455 * t2765) * MDP(13)) * t2497 + ((-t2477 * t2599 - t2479 * t2596 - t2481 * t2593) * MDP(4) + (-t2650 * t2691 - t2654 * t2695 - t2658 * t2699) * MDP(5) + (-t2553 * t2727 - t2555 * t2730 - t2557 * t2733) * MDP(6) + (-t2446 * t2599 - t2450 * t2596 - t2454 * t2593) * MDP(7) + (-t2336 * t2414 * t2630 - t2338 * t2415 * t2624 - t2340 * t2416 * t2618) * t2764 + (t2390 * t2557 + t2391 * t2555 + t2392 * t2553) * MDP(12) + (t2547 + t2548 + t2549) * MDP(13) + ((t2376 * t2630 + t2378 * t2624 + t2380 * t2618) * t2681 + (t2460 * t2582 + t2465 * t2578 + t2470 * t2574) * t2679) * t2489) * t2496) * t2493;];
taucX  = t1;
