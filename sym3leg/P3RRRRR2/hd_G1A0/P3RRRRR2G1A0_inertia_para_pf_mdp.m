% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:05
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR2G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G1A0_inertia_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G1A0_inertia_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:04:53
% EndTime: 2020-03-09 21:05:00
% DurationCPUTime: 7.31s
% Computational Cost: add. (5793->531), mult. (3293->894), div. (2916->19), fcn. (4296->42), ass. (0->325)
t2101 = cos(qJ(3,3));
t2102 = cos(qJ(2,3));
t2050 = pkin(1) * t2102 + pkin(2) * t2101;
t2326 = t2050 * t2102;
t2103 = cos(qJ(3,2));
t2104 = cos(qJ(2,2));
t2051 = pkin(1) * t2104 + pkin(2) * t2103;
t2325 = t2051 * t2104;
t2105 = cos(qJ(3,1));
t2106 = cos(qJ(2,1));
t2052 = pkin(1) * t2106 + pkin(2) * t2105;
t2324 = t2052 * t2106;
t2323 = -0.2e1 * pkin(1);
t2322 = 2 * MDP(8);
t2083 = 0.1e1 / t2101;
t2086 = 0.1e1 / t2103;
t2089 = 0.1e1 / t2105;
t2084 = 0.1e1 / t2101 ^ 2;
t2087 = 0.1e1 / t2103 ^ 2;
t2090 = 0.1e1 / t2105 ^ 2;
t2321 = MDP(1) / pkin(1) ^ 2;
t2070 = qJ(1,1) + legFrame(1,3);
t2069 = qJ(1,2) + legFrame(2,3);
t2068 = qJ(1,3) + legFrame(3,3);
t2065 = qJ(2,3) + t2068;
t2059 = qJ(3,3) + t2065;
t2060 = -qJ(3,3) + t2065;
t2032 = sin(t2068) * t2323 + (-sin(t2060) - sin(t2059)) * pkin(2);
t2044 = 0.1e1 / (sin(qJ(2,3) + qJ(3,3)) + sin(qJ(2,3) - qJ(3,3)));
t2320 = t2032 * t2044;
t2066 = qJ(2,2) + t2069;
t2061 = qJ(3,2) + t2066;
t2062 = -qJ(3,2) + t2066;
t2033 = sin(t2069) * t2323 + (-sin(t2062) - sin(t2061)) * pkin(2);
t2045 = 0.1e1 / (sin(qJ(2,2) + qJ(3,2)) + sin(qJ(2,2) - qJ(3,2)));
t2319 = t2033 * t2045;
t2067 = qJ(2,1) + t2070;
t2063 = qJ(3,1) + t2067;
t2064 = -qJ(3,1) + t2067;
t2034 = sin(t2070) * t2323 + (-sin(t2064) - sin(t2063)) * pkin(2);
t2046 = 0.1e1 / (sin(qJ(2,1) + qJ(3,1)) + sin(qJ(2,1) - qJ(3,1)));
t2318 = t2034 * t2046;
t2035 = cos(t2068) * t2323 + (-cos(t2060) - cos(t2059)) * pkin(2);
t2317 = t2035 * t2044;
t2036 = cos(t2069) * t2323 + (-cos(t2062) - cos(t2061)) * pkin(2);
t2316 = t2036 * t2045;
t2037 = cos(t2070) * t2323 + (-cos(t2064) - cos(t2063)) * pkin(2);
t2315 = t2037 * t2046;
t2053 = sin(t2065);
t2314 = t2044 * t2053;
t2056 = cos(t2065);
t2313 = t2044 * t2056;
t2095 = sin(qJ(3,3));
t2072 = t2095 ^ 2;
t2312 = t2044 * t2072;
t2054 = sin(t2066);
t2311 = t2045 * t2054;
t2057 = cos(t2066);
t2310 = t2045 * t2057;
t2097 = sin(qJ(3,2));
t2076 = t2097 ^ 2;
t2309 = t2045 * t2076;
t2055 = sin(t2067);
t2308 = t2046 * t2055;
t2058 = cos(t2067);
t2307 = t2046 * t2058;
t2099 = sin(qJ(3,1));
t2080 = t2099 ^ 2;
t2306 = t2046 * t2080;
t2096 = sin(qJ(2,3));
t2073 = 0.1e1 / t2096;
t2305 = t2053 * t2073;
t2098 = sin(qJ(2,2));
t2077 = 0.1e1 / t2098;
t2304 = t2054 * t2077;
t2100 = sin(qJ(2,1));
t2081 = 0.1e1 / t2100;
t2303 = t2055 * t2081;
t2302 = t2056 * t2073;
t2301 = t2057 * t2077;
t2300 = t2058 * t2081;
t2299 = t2072 * t2073;
t2298 = t2072 * t2084;
t2297 = t2073 * t2083;
t2296 = t2073 * t2084;
t2295 = t2073 * t2102;
t2109 = 0.1e1 / pkin(1);
t2294 = t2073 * t2109;
t2293 = t2076 * t2077;
t2292 = t2076 * t2087;
t2291 = t2077 * t2086;
t2290 = t2077 * t2087;
t2289 = t2077 * t2104;
t2288 = t2077 * t2109;
t2287 = t2080 * t2081;
t2286 = t2080 * t2090;
t2285 = t2081 * t2089;
t2284 = t2081 * t2090;
t2283 = t2081 * t2106;
t2282 = t2081 * t2109;
t2281 = t2083 * t2095;
t2280 = t2086 * t2097;
t2279 = t2089 * t2099;
t2278 = t2095 * t2101;
t2277 = t2095 * t2102;
t2107 = 0.1e1 / pkin(2);
t2276 = t2096 * t2107;
t2275 = t2097 * t2103;
t2274 = t2097 * t2104;
t2273 = t2098 * t2107;
t2272 = t2099 * t2105;
t2271 = t2099 * t2106;
t2270 = t2100 * t2107;
t2269 = t2101 * t2102;
t2268 = t2103 * t2104;
t2267 = t2105 * t2106;
t2266 = t2107 * t2109;
t2265 = 2 * MDP(12);
t2264 = 2 * MDP(13);
t2263 = t2032 * t2312;
t2262 = t2033 * t2309;
t2261 = t2034 * t2306;
t2260 = t2035 * t2312;
t2259 = t2036 * t2309;
t2258 = t2037 * t2306;
t2257 = t2044 * t2281;
t2256 = t2044 * t2278;
t2255 = t2044 * t2266;
t2254 = t2045 * t2280;
t2253 = t2045 * t2275;
t2252 = t2045 * t2266;
t2251 = t2046 * t2279;
t2250 = t2046 * t2272;
t2249 = t2046 * t2266;
t2248 = t2050 * t2296;
t2074 = 0.1e1 / t2096 ^ 2;
t2247 = t2074 * t2326;
t2246 = t2051 * t2290;
t2078 = 0.1e1 / t2098 ^ 2;
t2245 = t2078 * t2325;
t2244 = t2052 * t2284;
t2082 = 0.1e1 / t2100 ^ 2;
t2243 = t2082 * t2324;
t2242 = t2053 * t2299;
t2241 = t2053 * t2295;
t2240 = t2054 * t2293;
t2239 = t2054 * t2289;
t2238 = t2055 * t2287;
t2237 = t2055 * t2283;
t2236 = t2056 * t2299;
t2235 = t2056 * t2295;
t2234 = t2057 * t2293;
t2233 = t2057 * t2289;
t2232 = t2058 * t2287;
t2231 = t2058 * t2283;
t2071 = t2095 * t2072;
t2230 = t2071 * t2297;
t2229 = t2072 * t2297;
t2228 = t2074 * t2298;
t2227 = t2073 * t2281;
t2226 = t2073 * t2278;
t2225 = t2073 * t2277;
t2224 = t2073 * t2269;
t2223 = t2074 * t2281;
t2075 = t2097 * t2076;
t2222 = t2075 * t2291;
t2221 = t2076 * t2291;
t2220 = t2078 * t2292;
t2219 = t2077 * t2280;
t2218 = t2077 * t2275;
t2217 = t2077 * t2274;
t2216 = t2077 * t2268;
t2215 = t2078 * t2280;
t2079 = t2099 * t2080;
t2214 = t2079 * t2285;
t2213 = t2080 * t2285;
t2212 = t2082 * t2286;
t2211 = t2081 * t2279;
t2210 = t2081 * t2272;
t2209 = t2081 * t2271;
t2208 = t2081 * t2267;
t2207 = t2082 * t2279;
t2206 = t2032 * t2256;
t2205 = t2033 * t2253;
t2204 = t2034 * t2250;
t2203 = t2035 * t2256;
t2202 = t2036 * t2253;
t2201 = t2037 * t2250;
t2200 = t2044 * t2241;
t2199 = t2044 * t2235;
t2198 = t2044 * t2225;
t2197 = t2045 * t2239;
t2196 = t2045 * t2233;
t2195 = t2045 * t2217;
t2194 = t2046 * t2237;
t2193 = t2046 * t2231;
t2192 = t2046 * t2209;
t2191 = t2071 * t2248;
t2190 = t2050 * t2229;
t2189 = t2095 * t2248;
t2085 = t2083 * t2084;
t2188 = t2085 * t2247;
t2187 = t2095 * t2247;
t2186 = t2075 * t2246;
t2185 = t2051 * t2221;
t2184 = t2097 * t2246;
t2088 = t2086 * t2087;
t2183 = t2088 * t2245;
t2182 = t2097 * t2245;
t2181 = t2079 * t2244;
t2180 = t2052 * t2213;
t2179 = t2099 * t2244;
t2091 = t2089 * t2090;
t2178 = t2091 * t2243;
t2177 = t2099 * t2243;
t2176 = t2053 * t2226;
t2175 = t2053 * t2225;
t2174 = t2053 * t2224;
t2173 = t2054 * t2218;
t2172 = t2054 * t2217;
t2171 = t2054 * t2216;
t2170 = t2055 * t2210;
t2169 = t2055 * t2209;
t2168 = t2055 * t2208;
t2167 = t2056 * t2226;
t2166 = t2056 * t2225;
t2165 = t2056 * t2224;
t2164 = t2057 * t2218;
t2163 = t2057 * t2217;
t2162 = t2057 * t2216;
t2161 = t2058 * t2210;
t2160 = t2058 * t2209;
t2159 = t2058 * t2208;
t2158 = t2102 * t2229;
t2157 = t2083 * t2225;
t2156 = t2104 * t2221;
t2155 = t2086 * t2217;
t2154 = t2106 * t2213;
t2153 = t2089 * t2209;
t2152 = t2044 * t2175;
t2151 = t2044 * t2174;
t2150 = t2044 * t2166;
t2149 = t2044 * t2165;
t2148 = t2044 * t2158;
t2147 = t2044 * t2157;
t2146 = t2045 * t2172;
t2145 = t2045 * t2171;
t2144 = t2045 * t2163;
t2143 = t2045 * t2162;
t2142 = t2045 * t2156;
t2141 = t2045 * t2155;
t2140 = t2046 * t2169;
t2139 = t2046 * t2168;
t2138 = t2046 * t2160;
t2137 = t2046 * t2159;
t2136 = t2046 * t2154;
t2135 = t2046 * t2153;
t2134 = t2228 * t2326;
t2133 = t2083 * t2187;
t2132 = t2084 * t2187;
t2131 = t2220 * t2325;
t2130 = t2086 * t2182;
t2129 = t2087 * t2182;
t2128 = t2212 * t2324;
t2127 = t2089 * t2177;
t2126 = t2090 * t2177;
t2125 = t2189 * t2266;
t2124 = t2184 * t2266;
t2123 = t2179 * t2266;
t2122 = t2032 * t2257 + t2033 * t2254 + t2034 * t2251;
t2121 = t2035 * t2257 + t2036 * t2254 + t2037 * t2251;
t2120 = t2050 * t2085 * t2299 + t2051 * t2088 * t2293 + t2052 * t2091 * t2287;
t2108 = 0.1e1 / pkin(2) ^ 2;
t2049 = t2109 * t2211;
t2048 = t2109 * t2219;
t2047 = t2109 * t2227;
t2043 = t2058 * t2282;
t2042 = t2057 * t2288;
t2041 = t2056 * t2294;
t2040 = t2055 * t2282;
t2039 = t2054 * t2288;
t2038 = t2053 * t2294;
t2031 = t2049 - t2123;
t2030 = 0.2e1 * t2049 - t2123;
t2029 = t2048 - t2124;
t2028 = 0.2e1 * t2048 - t2124;
t2027 = t2047 - t2125;
t2026 = 0.2e1 * t2047 - t2125;
t2025 = t2049 - t2123 / 0.2e1;
t2024 = t2048 - t2124 / 0.2e1;
t2023 = t2047 - t2125 / 0.2e1;
t2022 = t2037 * t2249;
t2021 = t2036 * t2252;
t2020 = t2035 * t2255;
t2019 = t2034 * t2249;
t2018 = t2033 * t2252;
t2017 = t2032 * t2255;
t2016 = t2025 * t2271 + t2270 / 0.2e1;
t2015 = t2024 * t2274 + t2273 / 0.2e1;
t2014 = t2023 * t2277 + t2276 / 0.2e1;
t2013 = -0.2e1 * t2025 * t2267 + t2270 * t2279;
t2012 = -0.2e1 * t2024 * t2268 + t2273 * t2280;
t2011 = -0.2e1 * t2023 * t2269 + t2276 * t2281;
t2010 = (t2056 * t2223 + t2057 * t2215 + t2058 * t2207) * t2321;
t2009 = (t2053 * t2223 + t2054 * t2215 + t2055 * t2207) * t2321;
t2008 = t2043 + t2022;
t2007 = 0.2e1 * t2043 + t2022;
t2006 = t2042 + t2021;
t2005 = 0.2e1 * t2042 + t2021;
t2004 = t2041 + t2020;
t2003 = 0.2e1 * t2041 + t2020;
t2002 = t2040 + t2019;
t2001 = 0.2e1 * t2040 + t2019;
t2000 = t2039 + t2018;
t1999 = 0.2e1 * t2039 + t2018;
t1998 = t2038 + t2017;
t1997 = 0.2e1 * t2038 + t2017;
t1996 = t2043 + t2022 / 0.2e1;
t1995 = t2042 + t2021 / 0.2e1;
t1994 = t2041 + t2020 / 0.2e1;
t1993 = t2040 + t2019 / 0.2e1;
t1992 = t2039 + t2018 / 0.2e1;
t1991 = t2038 + t2017 / 0.2e1;
t1990 = (t2053 * t2056 * t2074 + t2054 * t2057 * t2078 + t2055 * t2058 * t2082) * t2321;
t1 = [(t2003 * t2235 + t2005 * t2233 + t2007 * t2231) * MDP(5) + (-t2003 * t2056 - t2005 * t2057 - t2007 * t2058) * MDP(6) + (t1994 * t2165 + t1995 * t2162 + t1996 * t2159) * t2265 + (-t1994 * t2166 - t1995 * t2163 - t1996 * t2160) * t2264 + MDP(14) + (t2056 ^ 2 * t2074 + t2057 ^ 2 * t2078 + t2058 ^ 2 * t2082) * t2321 + ((t2004 * t2302 + t2006 * t2301 + t2008 * t2300) * MDP(4) + (t2004 * t2236 + t2006 * t2234 + t2008 * t2232) * MDP(7) + (t2004 * t2167 + t2006 * t2164 + t2008 * t2161) * t2322 + ((t2004 * t2317 + t2006 * t2316 + t2008 * t2315) * MDP(4) + (t2035 * t2199 + t2036 * t2196 + t2037 * t2193) * MDP(5) + (-t2035 * t2313 - t2036 * t2310 - t2037 * t2307) * MDP(6) + (t2004 * t2260 + t2006 * t2259 + t2008 * t2258) * MDP(7) + (t2004 * t2203 + t2006 * t2202 + t2008 * t2201) * t2322 + (t2035 * t2149 + t2036 * t2143 + t2037 * t2137) * MDP(12) + (-t2035 * t2150 - t2036 * t2144 - t2037 * t2138) * MDP(13)) * t2107) * t2109; t1990 + (t1997 * t2235 + t1999 * t2233 + t2001 * t2231) * MDP(5) + (-t1997 * t2056 - t1999 * t2057 - t2001 * t2058) * MDP(6) + (t1991 * t2165 + t1992 * t2162 + t1993 * t2159) * t2265 + (-t1991 * t2166 - t1992 * t2163 - t1993 * t2160) * t2264 + ((t1998 * t2302 + t2000 * t2301 + t2002 * t2300) * MDP(4) + (t1998 * t2236 + t2000 * t2234 + t2002 * t2232) * MDP(7) + (t1998 * t2167 + t2000 * t2164 + t2002 * t2161) * t2322 + ((t1998 * t2317 + t2000 * t2316 + t2002 * t2315) * MDP(4) + (t2035 * t2200 + t2036 * t2197 + t2037 * t2194) * MDP(5) + (-t2035 * t2314 - t2036 * t2311 - t2037 * t2308) * MDP(6) + (t1998 * t2260 + t2000 * t2259 + t2002 * t2258) * MDP(7) + (t1998 * t2203 + t2000 * t2202 + t2002 * t2201) * t2322 + (t2035 * t2151 + t2036 * t2145 + t2037 * t2139) * MDP(12) + (-t2035 * t2152 - t2036 * t2146 - t2037 * t2140) * MDP(13)) * t2107) * t2109; t2010 + (t2026 * t2235 + t2028 * t2233 + t2030 * t2231) * MDP(5) + (-t2026 * t2056 - t2028 * t2057 - t2030 * t2058) * MDP(6) + (-t2011 * t2302 - t2012 * t2301 - t2013 * t2300) * MDP(12) + (-t2014 * t2302 - t2015 * t2301 - t2016 * t2300) * t2264 + ((t2027 * t2302 + t2029 * t2301 + t2031 * t2300) * MDP(4) + (t2027 * t2236 + t2029 * t2234 + t2031 * t2232) * MDP(7) + (t2027 * t2167 + t2029 * t2164 + t2031 * t2161) * t2322 + (t2121 * MDP(9) + (t2315 + t2316 + t2317) * MDP(10)) * t2108 + ((t2027 * t2317 + t2029 * t2316 + t2031 * t2315) * MDP(4) + (t2035 * t2147 + t2036 * t2141 + t2037 * t2135) * MDP(5) - t2121 * MDP(6) + (t2027 * t2260 + t2029 * t2259 + t2031 * t2258) * MDP(7) + (t2027 * t2203 + t2029 * t2202 + t2031 * t2201) * t2322 + (t2056 * t2227 + t2057 * t2219 + t2058 * t2211) * MDP(9) + (t2300 + t2301 + t2302) * MDP(10) + (t2035 * t2198 + t2036 * t2195 + t2037 * t2192) * MDP(12) + (-t2035 * t2148 - t2036 * t2142 - t2037 * t2136) * MDP(13)) * t2107) * t2109; t1990 + (t2003 * t2241 + t2005 * t2239 + t2007 * t2237) * MDP(5) + (-t2003 * t2053 - t2005 * t2054 - t2007 * t2055) * MDP(6) + (t1994 * t2174 + t1995 * t2171 + t1996 * t2168) * t2265 + (-t1994 * t2175 - t1995 * t2172 - t1996 * t2169) * t2264 + ((t2004 * t2305 + t2006 * t2304 + t2008 * t2303) * MDP(4) + (t2004 * t2242 + t2006 * t2240 + t2008 * t2238) * MDP(7) + (t2004 * t2176 + t2006 * t2173 + t2008 * t2170) * t2322 + ((t2004 * t2320 + t2006 * t2319 + t2008 * t2318) * MDP(4) + (t2032 * t2199 + t2033 * t2196 + t2034 * t2193) * MDP(5) + (-t2032 * t2313 - t2033 * t2310 - t2034 * t2307) * MDP(6) + (t2004 * t2263 + t2006 * t2262 + t2008 * t2261) * MDP(7) + (t2004 * t2206 + t2006 * t2205 + t2008 * t2204) * t2322 + (t2032 * t2149 + t2033 * t2143 + t2034 * t2137) * MDP(12) + (-t2032 * t2150 - t2033 * t2144 - t2034 * t2138) * MDP(13)) * t2107) * t2109; (t1997 * t2241 + t1999 * t2239 + t2001 * t2237) * MDP(5) + (-t1997 * t2053 - t1999 * t2054 - t2001 * t2055) * MDP(6) + (t1991 * t2174 + t1992 * t2171 + t1993 * t2168) * t2265 + (-t1991 * t2175 - t1992 * t2172 - t1993 * t2169) * t2264 + MDP(14) + (t2053 ^ 2 * t2074 + t2054 ^ 2 * t2078 + t2055 ^ 2 * t2082) * t2321 + ((t1998 * t2305 + t2000 * t2304 + t2002 * t2303) * MDP(4) + (t1998 * t2242 + t2000 * t2240 + t2002 * t2238) * MDP(7) + (t1998 * t2176 + t2000 * t2173 + t2002 * t2170) * t2322 + ((t1998 * t2320 + t2000 * t2319 + t2002 * t2318) * MDP(4) + (t2032 * t2200 + t2033 * t2197 + t2034 * t2194) * MDP(5) + (-t2032 * t2314 - t2033 * t2311 - t2034 * t2308) * MDP(6) + (t1998 * t2263 + t2000 * t2262 + t2002 * t2261) * MDP(7) + (t1998 * t2206 + t2000 * t2205 + t2002 * t2204) * t2322 + (t2032 * t2151 + t2033 * t2145 + t2034 * t2139) * MDP(12) + (-t2032 * t2152 - t2033 * t2146 - t2034 * t2140) * MDP(13)) * t2107) * t2109; t2009 + (t2026 * t2241 + t2028 * t2239 + t2030 * t2237) * MDP(5) + (-t2026 * t2053 - t2028 * t2054 - t2030 * t2055) * MDP(6) + (-t2011 * t2305 - t2012 * t2304 - t2013 * t2303) * MDP(12) + (-t2014 * t2305 - t2015 * t2304 - t2016 * t2303) * t2264 + ((t2027 * t2305 + t2029 * t2304 + t2031 * t2303) * MDP(4) + (t2027 * t2242 + t2029 * t2240 + t2031 * t2238) * MDP(7) + (t2027 * t2176 + t2029 * t2173 + t2031 * t2170) * t2322 + (t2122 * MDP(9) + (t2318 + t2319 + t2320) * MDP(10)) * t2108 + ((t2027 * t2320 + t2029 * t2319 + t2031 * t2318) * MDP(4) + (t2032 * t2147 + t2033 * t2141 + t2034 * t2135) * MDP(5) - t2122 * MDP(6) + (t2027 * t2263 + t2029 * t2262 + t2031 * t2261) * MDP(7) + (t2027 * t2206 + t2029 * t2205 + t2031 * t2204) * t2322 + (t2053 * t2227 + t2054 * t2219 + t2055 * t2211) * MDP(9) + (t2303 + t2304 + t2305) * MDP(10) + (t2032 * t2198 + t2033 * t2195 + t2034 * t2192) * MDP(12) + (-t2032 * t2148 - t2033 * t2142 - t2034 * t2136) * MDP(13)) * t2107) * t2109; t2010 + (t2003 * t2157 + t2005 * t2155 + t2007 * t2153) * MDP(5) + (-t2003 * t2281 - t2005 * t2280 - t2007 * t2279) * MDP(6) + (t1994 * t2225 + t1995 * t2217 + t1996 * t2209) * t2265 + (-t1994 * t2158 - t1995 * t2156 - t1996 * t2154) * t2264 + ((t2004 * t2281 + t2006 * t2280 + t2008 * t2279) * MDP(9) + (t2004 + t2006 + t2008) * MDP(10) + (-t2056 * t2281 - t2057 * t2280 - t2058 * t2279) * MDP(12) + (-t2056 - t2057 - t2058) * MDP(13)) * t2107 + ((t2004 * t2227 + t2006 * t2219 + t2008 * t2211) * MDP(4) + (t2004 * t2230 + t2006 * t2222 + t2008 * t2214) * MDP(7) + (t2004 * t2299 + t2006 * t2293 + t2008 * t2287) * t2322 + ((-t2004 * t2189 - t2006 * t2184 - t2008 * t2179) * MDP(4) + (-t2056 * t2132 - t2057 * t2129 - t2058 * t2126) * MDP(5) + (t2056 * t2189 + t2057 * t2184 + t2058 * t2179) * MDP(6) + (-t2004 * t2191 - t2006 * t2186 - t2008 * t2181) * MDP(7) + (-t2004 * t2190 - t2006 * t2185 - t2008 * t2180) * t2322 + (-t2056 * t2133 - t2057 * t2130 - t2058 * t2127) * MDP(12) + (t2056 * t2134 + t2057 * t2131 + t2058 * t2128) * MDP(13)) * t2107) * t2109; t2009 + (t1997 * t2157 + t1999 * t2155 + t2001 * t2153) * MDP(5) + (-t1997 * t2281 - t1999 * t2280 - t2001 * t2279) * MDP(6) + (t1991 * t2225 + t1992 * t2217 + t1993 * t2209) * t2265 + (-t1991 * t2158 - t1992 * t2156 - t1993 * t2154) * t2264 + ((t1998 * t2281 + t2000 * t2280 + t2002 * t2279) * MDP(9) + (t1998 + t2000 + t2002) * MDP(10) + (-t2053 * t2281 - t2054 * t2280 - t2055 * t2279) * MDP(12) + (-t2053 - t2054 - t2055) * MDP(13)) * t2107 + ((t1998 * t2227 + t2000 * t2219 + t2002 * t2211) * MDP(4) + (t1998 * t2230 + t2000 * t2222 + t2002 * t2214) * MDP(7) + (t1998 * t2299 + t2000 * t2293 + t2002 * t2287) * t2322 + ((-t1998 * t2189 - t2000 * t2184 - t2002 * t2179) * MDP(4) + (-t2053 * t2132 - t2054 * t2129 - t2055 * t2126) * MDP(5) + (t2053 * t2189 + t2054 * t2184 + t2055 * t2179) * MDP(6) + (-t1998 * t2191 - t2000 * t2186 - t2002 * t2181) * MDP(7) + (-t1998 * t2190 - t2000 * t2185 - t2002 * t2180) * t2322 + (-t2053 * t2133 - t2054 * t2130 - t2055 * t2127) * MDP(12) + (t2053 * t2134 + t2054 * t2131 + t2055 * t2128) * MDP(13)) * t2107) * t2109; (t2026 * t2157 + t2028 * t2155 + t2030 * t2153) * MDP(5) + (-t2026 * t2281 - t2028 * t2280 - t2030 * t2279) * MDP(6) + (-t2011 * t2227 - t2012 * t2219 - t2013 * t2211) * MDP(12) + (-t2014 * t2227 - t2015 * t2219 - t2016 * t2211) * t2264 + MDP(14) + (t2212 + t2220 + t2228) * t2321 + (t2084 + t2087 + t2090) * MDP(11) * t2108 + ((t2027 * t2281 + t2029 * t2280 + t2031 * t2279) * MDP(9) + (t2027 + t2029 + t2031) * MDP(10) + (-t2286 - t2292 - t2298) * MDP(12) + (-t2279 - t2280 - t2281) * MDP(13)) * t2107 + ((t2027 * t2227 + t2029 * t2219 + t2031 * t2211) * MDP(4) + (t2027 * t2230 + t2029 * t2222 + t2031 * t2214) * MDP(7) + (t2027 * t2299 + t2029 * t2293 + t2031 * t2287) * t2322 + (-t2120 * MDP(9) + (-t2179 - t2184 - t2189) * MDP(10)) * t2108 + ((-t2027 * t2189 - t2029 * t2184 - t2031 * t2179) * MDP(4) + (-t2072 * t2188 - t2076 * t2183 - t2080 * t2178) * MDP(5) + t2120 * MDP(6) + (-t2027 * t2191 - t2029 * t2186 - t2031 * t2181) * MDP(7) + (-t2027 * t2190 - t2029 * t2185 - t2031 * t2180) * t2322 + (t2072 * t2296 + t2076 * t2290 + t2080 * t2284) * MDP(9) + (t2211 + t2219 + t2227) * MDP(10) + (-t2128 - t2131 - t2134) * MDP(12) + (t2071 * t2188 + t2075 * t2183 + t2079 * t2178) * MDP(13)) * t2107) * t2109;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
