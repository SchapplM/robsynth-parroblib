% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x14]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:05
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR2G1P1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G1P1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G1P1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G1P1A0_inertia_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G1P1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G1P1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:04:30
% EndTime: 2020-03-09 21:04:37
% DurationCPUTime: 7.59s
% Computational Cost: add. (5716->451), mult. (3210->845), div. (2916->19), fcn. (4296->42), ass. (0->339)
t652 = 0.1e1 / pkin(1);
t639 = sin(qJ(2,3));
t616 = 0.1e1 / t639;
t644 = cos(qJ(3,3));
t626 = 0.1e1 / t644;
t638 = sin(qJ(3,3));
t841 = t626 * t638;
t785 = t616 * t841;
t590 = t652 * t785;
t645 = cos(qJ(2,3));
t593 = t645 * pkin(1) + t644 * pkin(2);
t627 = 0.1e1 / t644 ^ 2;
t856 = t616 * t627;
t806 = t593 * t856;
t747 = t638 * t806;
t650 = 0.1e1 / pkin(2);
t826 = t650 * t652;
t668 = t747 * t826;
t569 = 0.2e1 * t590 - t668;
t641 = sin(qJ(2,2));
t620 = 0.1e1 / t641;
t646 = cos(qJ(3,2));
t629 = 0.1e1 / t646;
t640 = sin(qJ(3,2));
t840 = t629 * t640;
t777 = t620 * t840;
t591 = t652 * t777;
t647 = cos(qJ(2,2));
t594 = t647 * pkin(1) + t646 * pkin(2);
t630 = 0.1e1 / t646 ^ 2;
t850 = t620 * t630;
t804 = t594 * t850;
t742 = t640 * t804;
t667 = t742 * t826;
t571 = 0.2e1 * t591 - t667;
t643 = sin(qJ(2,1));
t624 = 0.1e1 / t643;
t648 = cos(qJ(3,1));
t632 = 0.1e1 / t648;
t642 = sin(qJ(3,1));
t839 = t632 * t642;
t769 = t624 * t839;
t592 = t652 * t769;
t649 = cos(qJ(2,1));
t595 = t649 * pkin(1) + t648 * pkin(2);
t633 = 0.1e1 / t648 ^ 2;
t844 = t624 * t633;
t802 = t595 * t844;
t737 = t642 * t802;
t666 = t737 * t826;
t573 = 0.2e1 * t592 - t666;
t836 = t639 * t650;
t837 = t638 * t645;
t888 = -t569 * t837 - t836;
t833 = t641 * t650;
t834 = t640 * t647;
t887 = -t571 * t834 - t833;
t830 = t643 * t650;
t831 = t642 * t649;
t886 = -t573 * t831 - t830;
t885 = t593 * t645;
t884 = t594 * t647;
t883 = t595 * t649;
t882 = -0.2e1 * pkin(1);
t881 = 0.2e1 * t652;
t611 = qJ(1,3) + legFrame(3,3);
t608 = qJ(2,3) + t611;
t602 = qJ(3,3) + t608;
t603 = -qJ(3,3) + t608;
t575 = sin(t611) * t882 + (-sin(t603) - sin(t602)) * pkin(2);
t587 = 0.1e1 / (sin(qJ(2,3) + qJ(3,3)) + sin(qJ(2,3) - qJ(3,3)));
t880 = t575 * t587;
t612 = qJ(1,2) + legFrame(2,3);
t609 = qJ(2,2) + t612;
t604 = qJ(3,2) + t609;
t605 = -qJ(3,2) + t609;
t576 = sin(t612) * t882 + (-sin(t605) - sin(t604)) * pkin(2);
t588 = 0.1e1 / (sin(qJ(2,2) + qJ(3,2)) + sin(qJ(2,2) - qJ(3,2)));
t879 = t576 * t588;
t613 = qJ(1,1) + legFrame(1,3);
t610 = qJ(2,1) + t613;
t606 = qJ(3,1) + t610;
t607 = -qJ(3,1) + t610;
t577 = sin(t613) * t882 + (-sin(t607) - sin(t606)) * pkin(2);
t589 = 0.1e1 / (sin(qJ(2,1) + qJ(3,1)) + sin(qJ(2,1) - qJ(3,1)));
t878 = t577 * t589;
t578 = cos(t611) * t882 + (-cos(t603) - cos(t602)) * pkin(2);
t877 = t578 * t587;
t579 = cos(t612) * t882 + (-cos(t605) - cos(t604)) * pkin(2);
t876 = t579 * t588;
t580 = cos(t613) * t882 + (-cos(t607) - cos(t606)) * pkin(2);
t875 = t580 * t589;
t596 = sin(t608);
t874 = t587 * t596;
t599 = cos(t608);
t873 = t587 * t599;
t615 = t638 ^ 2;
t872 = t587 * t615;
t597 = sin(t609);
t871 = t588 * t597;
t600 = cos(t609);
t870 = t588 * t600;
t619 = t640 ^ 2;
t869 = t588 * t619;
t598 = sin(t610);
t868 = t589 * t598;
t601 = cos(t610);
t867 = t589 * t601;
t623 = t642 ^ 2;
t866 = t589 * t623;
t865 = t596 * t616;
t864 = t597 * t620;
t863 = t598 * t624;
t862 = t599 * t616;
t861 = t600 * t620;
t860 = t601 * t624;
t859 = t615 * t616;
t858 = t615 * t627;
t857 = t616 * t626;
t855 = t616 * t645;
t854 = t616 * t652;
t853 = t619 * t620;
t852 = t619 * t630;
t851 = t620 * t629;
t849 = t620 * t647;
t848 = t620 * t652;
t847 = t623 * t624;
t846 = t623 * t633;
t845 = t624 * t632;
t843 = t624 * t649;
t842 = t624 * t652;
t838 = t638 * t644;
t835 = t640 * t646;
t832 = t642 * t648;
t829 = t644 * t645;
t828 = t646 * t647;
t827 = t648 * t649;
t651 = 0.1e1 / pkin(2) ^ 2;
t825 = t651 * t652;
t824 = t616 * t888;
t823 = t620 * t887;
t822 = t624 * t886;
t821 = t575 * t872;
t820 = t576 * t869;
t819 = t577 * t866;
t818 = t578 * t872;
t817 = t579 * t869;
t816 = t580 * t866;
t815 = t587 * t841;
t814 = t587 * t838;
t813 = t587 * t826;
t812 = t588 * t840;
t811 = t588 * t835;
t810 = t588 * t826;
t809 = t589 * t839;
t808 = t589 * t832;
t807 = t589 * t826;
t617 = 0.1e1 / t639 ^ 2;
t805 = t617 * t885;
t621 = 0.1e1 / t641 ^ 2;
t803 = t621 * t884;
t625 = 0.1e1 / t643 ^ 2;
t801 = t625 * t883;
t800 = t596 * t859;
t799 = t596 * t855;
t798 = t597 * t853;
t797 = t597 * t849;
t796 = t598 * t847;
t795 = t598 * t843;
t794 = t599 * t859;
t793 = t599 * t855;
t792 = t600 * t853;
t791 = t600 * t849;
t790 = t601 * t847;
t789 = t601 * t843;
t614 = t638 * t615;
t788 = t614 * t857;
t787 = t615 * t857;
t786 = t617 * t858;
t784 = t616 * t838;
t783 = t616 * t837;
t782 = t616 * t829;
t781 = t617 * t841;
t618 = t640 * t619;
t780 = t618 * t851;
t779 = t619 * t851;
t778 = t621 * t852;
t776 = t620 * t835;
t775 = t620 * t834;
t774 = t620 * t828;
t773 = t621 * t840;
t622 = t642 * t623;
t772 = t622 * t845;
t771 = t623 * t845;
t770 = t625 * t846;
t768 = t624 * t832;
t767 = t624 * t831;
t766 = t624 * t827;
t765 = t625 * t839;
t764 = t575 * t814;
t763 = t576 * t811;
t762 = t577 * t808;
t761 = t578 * t814;
t760 = t579 * t811;
t759 = t580 * t808;
t758 = t587 * t799;
t757 = t587 * t793;
t756 = t587 * t783;
t755 = t588 * t797;
t754 = t588 * t791;
t753 = t588 * t775;
t752 = t589 * t795;
t751 = t589 * t789;
t750 = t589 * t767;
t749 = t614 * t806;
t748 = t593 * t787;
t628 = t626 * t627;
t746 = t628 * t805;
t745 = t638 * t805;
t744 = t618 * t804;
t743 = t594 * t779;
t631 = t629 * t630;
t741 = t631 * t803;
t740 = t640 * t803;
t739 = t622 * t802;
t738 = t595 * t771;
t634 = t632 * t633;
t736 = t634 * t801;
t735 = t642 * t801;
t734 = t596 * t784;
t733 = t596 * t782;
t732 = t597 * t776;
t731 = t597 * t774;
t730 = t598 * t768;
t729 = t598 * t766;
t728 = t599 * t784;
t727 = t599 * t782;
t726 = t600 * t776;
t725 = t600 * t774;
t724 = t601 * t768;
t723 = t601 * t766;
t722 = t645 * t787;
t721 = t626 * t783;
t720 = t647 * t779;
t719 = t629 * t775;
t718 = t649 * t771;
t717 = t632 * t767;
t560 = t575 * t813;
t581 = t596 * t854;
t534 = t581 + t560 / 0.2e1;
t716 = t534 * t783;
t563 = t578 * t813;
t584 = t599 * t854;
t537 = t584 + t563 / 0.2e1;
t715 = t537 * t783;
t561 = t576 * t810;
t582 = t597 * t848;
t535 = t582 + t561 / 0.2e1;
t714 = t535 * t775;
t564 = t579 * t810;
t585 = t600 * t848;
t538 = t585 + t564 / 0.2e1;
t713 = t538 * t775;
t562 = t577 * t807;
t583 = t598 * t842;
t536 = t583 + t562 / 0.2e1;
t712 = t536 * t767;
t565 = t580 * t807;
t586 = t601 * t842;
t539 = t586 + t565 / 0.2e1;
t711 = t539 * t767;
t710 = 0.2e1 * t733;
t709 = 0.2e1 * t731;
t708 = 0.2e1 * t729;
t707 = 0.2e1 * t727;
t706 = 0.2e1 * t725;
t705 = 0.2e1 * t723;
t704 = -0.2e1 * t722;
t703 = -0.2e1 * t720;
t702 = -0.2e1 * t718;
t701 = -0.2e1 * t716;
t700 = -0.2e1 * t715;
t699 = -0.2e1 * t714;
t698 = -0.2e1 * t713;
t697 = -0.2e1 * t712;
t696 = -0.2e1 * t711;
t695 = t596 * t756;
t694 = t587 * t733;
t693 = t599 * t756;
t692 = t587 * t727;
t691 = t587 * t722;
t690 = t587 * t721;
t689 = t597 * t753;
t688 = t588 * t731;
t687 = t600 * t753;
t686 = t588 * t725;
t685 = t588 * t720;
t684 = t588 * t719;
t683 = t598 * t750;
t682 = t589 * t729;
t681 = t601 * t750;
t680 = t589 * t723;
t679 = t589 * t718;
t678 = t589 * t717;
t677 = t786 * t885;
t676 = t626 * t745;
t675 = t627 * t745;
t674 = t778 * t884;
t673 = t629 * t740;
t672 = t630 * t740;
t671 = t770 * t883;
t670 = t632 * t735;
t669 = t633 * t735;
t665 = t575 * t815 + t576 * t812 + t577 * t809;
t664 = t578 * t815 + t579 * t812 + t580 * t809;
t663 = t593 * t628 * t859 + t594 * t631 * t853 + t595 * t634 * t847;
t653 = 0.1e1 / pkin(1) ^ 2;
t574 = t592 - t666;
t572 = t591 - t667;
t570 = t590 - t668;
t556 = -t573 * t827 + t830 * t839;
t555 = -t571 * t828 + t833 * t840;
t554 = -t569 * t829 + t836 * t841;
t553 = (t599 * t781 + t600 * t773 + t601 * t765) * t653;
t552 = (t596 * t781 + t597 * t773 + t598 * t765) * t653;
t551 = t586 + t565;
t550 = 0.2e1 * t586 + t565;
t549 = t585 + t564;
t548 = 0.2e1 * t585 + t564;
t547 = t584 + t563;
t546 = 0.2e1 * t584 + t563;
t545 = t583 + t562;
t544 = 0.2e1 * t583 + t562;
t543 = t582 + t561;
t542 = 0.2e1 * t582 + t561;
t541 = t581 + t560;
t540 = 0.2e1 * t581 + t560;
t533 = (t596 * t599 * t617 + t597 * t600 * t621 + t598 * t601 * t625) * t653;
t1 = [(t599 ^ 2 * t617 + t600 ^ 2 * t621 + t601 ^ 2 * t625) * t653, 0, 0, (t547 * t862 + t549 * t861 + t551 * t860 + (t547 * t877 + t549 * t876 + t551 * t875) * t650) * t652, t546 * t793 + t548 * t791 + t550 * t789 + (t578 * t757 + t579 * t754 + t580 * t751) * t826, -t599 * t546 - t600 * t548 - t601 * t550 + (-t578 * t873 - t579 * t870 - t580 * t867) * t826, (t547 * t794 + t549 * t792 + t551 * t790 + (t547 * t818 + t549 * t817 + t551 * t816) * t650) * t652, (t547 * t728 + t549 * t726 + t551 * t724 + (t547 * t761 + t549 * t760 + t551 * t759) * t650) * t881, 0, 0, 0, t537 * t707 + t538 * t706 + t539 * t705 + (t578 * t692 + t579 * t686 + t580 * t680) * t826, t599 * t700 + t600 * t698 + t601 * t696 + (-t578 * t693 - t579 * t687 - t580 * t681) * t826, 1; t533, 0, 0, (t541 * t862 + t543 * t861 + t545 * t860 + (t541 * t877 + t543 * t876 + t545 * t875) * t650) * t652, t540 * t793 + t542 * t791 + t544 * t789 + (t578 * t758 + t579 * t755 + t580 * t752) * t826, -t599 * t540 - t600 * t542 - t601 * t544 + (-t578 * t874 - t579 * t871 - t580 * t868) * t826, (t541 * t794 + t543 * t792 + t545 * t790 + (t541 * t818 + t543 * t817 + t545 * t816) * t650) * t652, (t541 * t728 + t543 * t726 + t545 * t724 + (t541 * t761 + t543 * t760 + t545 * t759) * t650) * t881, 0, 0, 0, t534 * t707 + t535 * t706 + t536 * t705 + (t578 * t694 + t579 * t688 + t580 * t682) * t826, t599 * t701 + t600 * t699 + t601 * t697 + (-t578 * t695 - t579 * t689 - t580 * t683) * t826, 0; t553, 0, 0, (t570 * t862 + t572 * t861 + t574 * t860 + (t570 * t877 + t572 * t876 + t574 * t875) * t650) * t652, t569 * t793 + t571 * t791 + t573 * t789 + (t578 * t690 + t579 * t684 + t580 * t678) * t826, -t599 * t569 - t600 * t571 - t601 * t573 - t664 * t826, (t570 * t794 + t572 * t792 + t574 * t790 + (t570 * t818 + t572 * t817 + t574 * t816) * t650) * t652, (t570 * t728 + t572 * t726 + t574 * t724 + (t570 * t761 + t572 * t760 + t574 * t759) * t650) * t881, (t664 * t651 + (t599 * t785 + t600 * t777 + t601 * t769) * t650) * t652, ((t875 + t876 + t877) * t651 + (t860 + t861 + t862) * t650) * t652, 0, -t554 * t862 - t555 * t861 - t556 * t860 + (t578 * t756 + t579 * t753 + t580 * t750) * t826, t599 * t824 + t600 * t823 + t601 * t822 + (-t578 * t691 - t579 * t685 - t580 * t679) * t826, 0; t533, 0, 0, (t547 * t865 + t549 * t864 + t551 * t863 + (t547 * t880 + t549 * t879 + t551 * t878) * t650) * t652, t546 * t799 + t548 * t797 + t550 * t795 + (t575 * t757 + t576 * t754 + t577 * t751) * t826, -t596 * t546 - t597 * t548 - t598 * t550 + (-t575 * t873 - t576 * t870 - t577 * t867) * t826, (t547 * t800 + t549 * t798 + t551 * t796 + (t547 * t821 + t549 * t820 + t551 * t819) * t650) * t652, (t547 * t734 + t549 * t732 + t551 * t730 + (t547 * t764 + t549 * t763 + t551 * t762) * t650) * t881, 0, 0, 0, t537 * t710 + t538 * t709 + t539 * t708 + (t575 * t692 + t576 * t686 + t577 * t680) * t826, t596 * t700 + t597 * t698 + t598 * t696 + (-t575 * t693 - t576 * t687 - t577 * t681) * t826, 0; (t596 ^ 2 * t617 + t597 ^ 2 * t621 + t598 ^ 2 * t625) * t653, 0, 0, (t541 * t865 + t543 * t864 + t545 * t863 + (t541 * t880 + t543 * t879 + t545 * t878) * t650) * t652, t540 * t799 + t542 * t797 + t544 * t795 + (t575 * t758 + t576 * t755 + t577 * t752) * t826, -t596 * t540 - t597 * t542 - t598 * t544 + (-t575 * t874 - t576 * t871 - t577 * t868) * t826, (t541 * t800 + t543 * t798 + t545 * t796 + (t541 * t821 + t543 * t820 + t545 * t819) * t650) * t652, (t541 * t734 + t543 * t732 + t545 * t730 + (t541 * t764 + t543 * t763 + t545 * t762) * t650) * t881, 0, 0, 0, t534 * t710 + t535 * t709 + t536 * t708 + (t575 * t694 + t576 * t688 + t577 * t682) * t826, t596 * t701 + t597 * t699 + t598 * t697 + (-t575 * t695 - t576 * t689 - t577 * t683) * t826, 1; t552, 0, 0, (t570 * t865 + t572 * t864 + t574 * t863 + (t570 * t880 + t572 * t879 + t574 * t878) * t650) * t652, t569 * t799 + t571 * t797 + t573 * t795 + (t575 * t690 + t576 * t684 + t577 * t678) * t826, -t596 * t569 - t597 * t571 - t598 * t573 - t665 * t826, (t570 * t800 + t572 * t798 + t574 * t796 + (t570 * t821 + t572 * t820 + t574 * t819) * t650) * t652, (t570 * t734 + t572 * t732 + t574 * t730 + (t570 * t764 + t572 * t763 + t574 * t762) * t650) * t881, (t665 * t651 + (t596 * t785 + t597 * t777 + t598 * t769) * t650) * t652, ((t878 + t879 + t880) * t651 + (t863 + t864 + t865) * t650) * t652, 0, -t554 * t865 - t555 * t864 - t556 * t863 + (t575 * t756 + t576 * t753 + t577 * t750) * t826, t596 * t824 + t597 * t823 + t598 * t822 + (-t575 * t691 - t576 * t685 - t577 * t679) * t826, 0; t553, 0, 0, (t547 * t785 + t549 * t777 + t551 * t769 + (-t547 * t747 - t549 * t742 - t551 * t737) * t650) * t652, t546 * t721 + t548 * t719 + t550 * t717 + (-t599 * t675 - t600 * t672 - t601 * t669) * t826, -t546 * t841 - t548 * t840 - t550 * t839 + (t599 * t747 + t600 * t742 + t601 * t737) * t826, (t547 * t788 + t549 * t780 + t551 * t772 + (-t547 * t749 - t549 * t744 - t551 * t739) * t650) * t652, (t547 * t859 + t549 * t853 + t551 * t847 + (-t547 * t748 - t549 * t743 - t551 * t738) * t650) * t881, (t547 * t841 + t549 * t840 + t551 * t839) * t650, (t547 + t549 + t551) * t650, 0, 0.2e1 * t715 + 0.2e1 * t713 + 0.2e1 * t711 + (-t599 * t841 - t600 * t840 - t601 * t839 + (-t599 * t676 - t600 * t673 - t601 * t670) * t652) * t650, t537 * t704 + t538 * t703 + t539 * t702 + (-t599 - t600 - t601 + (t599 * t677 + t600 * t674 + t601 * t671) * t652) * t650, 0; t552, 0, 0, (t541 * t785 + t543 * t777 + t545 * t769 + (-t541 * t747 - t543 * t742 - t545 * t737) * t650) * t652, t540 * t721 + t542 * t719 + t544 * t717 + (-t596 * t675 - t597 * t672 - t598 * t669) * t826, -t540 * t841 - t542 * t840 - t544 * t839 + (t596 * t747 + t597 * t742 + t598 * t737) * t826, (t541 * t788 + t543 * t780 + t545 * t772 + (-t541 * t749 - t543 * t744 - t545 * t739) * t650) * t652, (t541 * t859 + t543 * t853 + t545 * t847 + (-t541 * t748 - t543 * t743 - t545 * t738) * t650) * t881, (t541 * t841 + t543 * t840 + t545 * t839) * t650, (t541 + t543 + t545) * t650, 0, 0.2e1 * t716 + 0.2e1 * t714 + 0.2e1 * t712 + (-t596 * t841 - t597 * t840 - t598 * t839 + (-t596 * t676 - t597 * t673 - t598 * t670) * t652) * t650, t534 * t704 + t535 * t703 + t536 * t702 + (-t596 - t597 - t598 + (t596 * t677 + t597 * t674 + t598 * t671) * t652) * t650, 0; (t770 + t778 + t786) * t653, 0, 0, (t570 * t785 + t572 * t777 + t574 * t769 + (-t570 * t747 - t572 * t742 - t574 * t737) * t650) * t652, t569 * t721 + t571 * t719 + t573 * t717 + (-t615 * t746 - t619 * t741 - t623 * t736) * t826, -t569 * t841 - t571 * t840 - t573 * t839 + t663 * t826, (t570 * t788 + t572 * t780 + t574 * t772 + (-t570 * t749 - t572 * t744 - t574 * t739) * t650) * t652, (t570 * t859 + t572 * t853 + t574 * t847 + (-t570 * t748 - t572 * t743 - t574 * t738) * t650) * t881, -t663 * t825 + (t570 * t841 + t572 * t840 + t574 * t839 + (t615 * t856 + t619 * t850 + t623 * t844) * t652) * t650, (-t737 - t742 - t747) * t825 + (t570 + t572 + t574 + (t769 + t777 + t785) * t652) * t650, (t627 + t630 + t633) * t651, -t554 * t785 - t555 * t777 - t556 * t769 + (-t858 - t852 - t846 + (-t671 - t674 - t677) * t652) * t650, t785 * t888 + t777 * t887 + t769 * t886 + (-t841 - t840 - t839 + (t614 * t746 + t618 * t741 + t622 * t736) * t652) * t650, 1;];
tau_reg  = t1;
