% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x14]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:05
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR2G1P1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G1P1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G1P1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G1P1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G1P1A0_coriolisvec_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G1P1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G1P1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:04:37
% EndTime: 2020-03-09 21:04:43
% DurationCPUTime: 6.62s
% Computational Cost: add. (22669->418), mult. (43347->874), div. (10440->26), fcn. (36300->42), ass. (0->379)
t1042 = sin(qJ(3,3));
t1012 = t1042 ^ 2;
t1011 = t1042 * t1012;
t1048 = cos(qJ(3,3));
t1023 = t1048 ^ 2;
t1027 = 0.1e1 / t1023 ^ 2;
t1318 = t1011 * t1027;
t1043 = sin(qJ(2,3));
t1014 = 0.1e1 / t1043 ^ 2;
t1049 = cos(qJ(2,3));
t1317 = t1014 * t1049;
t1044 = sin(qJ(3,2));
t1016 = t1044 ^ 2;
t1015 = t1044 * t1016;
t1050 = cos(qJ(3,2));
t1028 = t1050 ^ 2;
t1032 = 0.1e1 / t1028 ^ 2;
t1316 = t1015 * t1032;
t1045 = sin(qJ(2,2));
t1018 = 0.1e1 / t1045 ^ 2;
t1051 = cos(qJ(2,2));
t1315 = t1018 * t1051;
t1046 = sin(qJ(3,1));
t1020 = t1046 ^ 2;
t1019 = t1046 * t1020;
t1052 = cos(qJ(3,1));
t1033 = t1052 ^ 2;
t1037 = 0.1e1 / t1033 ^ 2;
t1314 = t1019 * t1037;
t1047 = sin(qJ(2,1));
t1022 = 0.1e1 / t1047 ^ 2;
t1053 = cos(qJ(2,1));
t1313 = t1022 * t1053;
t1058 = 1 / pkin(2);
t1312 = -2 * pkin(1);
t1013 = 0.1e1 / t1043;
t1017 = 0.1e1 / t1045;
t1021 = 0.1e1 / t1047;
t1024 = 0.1e1 / t1048;
t1029 = 0.1e1 / t1050;
t1034 = 0.1e1 / t1052;
t1061 = 1 / pkin(1);
t1311 = 2 * t1061;
t1310 = pkin(2) * t1023;
t1309 = pkin(2) * t1028;
t1308 = pkin(2) * t1033;
t1307 = pkin(2) * t1048;
t1306 = pkin(2) * t1050;
t1305 = pkin(2) * t1052;
t1054 = xDP(3);
t1239 = t1054 * t1058;
t1169 = t1049 * t1239;
t1108 = t1024 * t1169;
t1073 = t1048 * t1023;
t1026 = 0.1e1 / t1073;
t1238 = t1058 * t1061;
t1182 = t1013 * t1238;
t1111 = t1026 * t1182;
t1245 = t1042 * t1043;
t1025 = 0.1e1 / t1048 ^ 2;
t1055 = xDP(2);
t1009 = pkin(1) * t1055;
t1056 = xDP(1);
t1010 = pkin(1) * t1056;
t1244 = t1042 * t1054;
t967 = t1043 * t1055 + t1049 * t1056;
t968 = t1043 * t1056 - t1049 * t1055;
t979 = pkin(1) * t1049 + t1307;
t1006 = qJ(1,3) + legFrame(3,3);
t994 = sin(t1006);
t997 = cos(t1006);
t949 = -t979 * t1244 + (-(t967 * t1307 + t1010) * t997 - (-t968 * t1307 + t1009) * t994) * t1048;
t946 = t949 * t1025 * t1182;
t1267 = t1013 * t1024;
t958 = t1244 + (t967 * t997 - t968 * t994) * t1048;
t952 = t958 * t1061 * t1267;
t941 = t952 + t946;
t1084 = ((-pkin(1) * t941 * t1245 + t1024 * t1054) * t1048 + pkin(1) * t1108) * t1054 * t1111;
t1172 = t1043 * t1244;
t1059 = 0.1e1 / pkin(2) ^ 2;
t1190 = t1059 * t1027 * t949;
t1235 = t1049 * t1310;
t1057 = pkin(2) ^ 2;
t934 = t1057 * t941 * t1073;
t1129 = (t934 + (t941 * t1235 - t1172) * pkin(1)) * t1190;
t1252 = t1026 * t1058;
t1187 = (t934 + (0.2e1 * (t952 + t946 / 0.2e1) * t1235 + (t1013 * t958 - t1172) * t1048 * t1024) * pkin(1)) * t1252;
t1062 = 1 / pkin(1) ^ 2;
t1264 = t1014 * t1062;
t1265 = t1013 * t1049;
t1271 = (-t958 * t1265 - t941 * t1310) * t1025;
t1204 = t949 * t1264;
t1286 = t1024 * t941;
t925 = t1204 * t1286;
t1038 = t1054 ^ 2;
t976 = t1038 * t1111;
t1298 = t925 + t976;
t901 = -t1084 + (-t1129 + (-t1187 - t1271) * t958) * t1264 + t1298;
t973 = 0.1e1 / (sin(qJ(2,3) + qJ(3,3)) + sin(qJ(2,3) - qJ(3,3)));
t1304 = t901 * t973;
t1168 = t1051 * t1239;
t1107 = t1029 * t1168;
t1076 = t1050 * t1028;
t1031 = 0.1e1 / t1076;
t1178 = t1017 * t1238;
t1110 = t1031 * t1178;
t1243 = t1044 * t1045;
t1030 = 0.1e1 / t1050 ^ 2;
t1242 = t1044 * t1054;
t969 = t1045 * t1055 + t1051 * t1056;
t970 = t1045 * t1056 - t1051 * t1055;
t980 = pkin(1) * t1051 + t1306;
t1007 = qJ(1,2) + legFrame(2,3);
t995 = sin(t1007);
t998 = cos(t1007);
t950 = -t980 * t1242 + (-(t969 * t1306 + t1010) * t998 - (-t970 * t1306 + t1009) * t995) * t1050;
t947 = t950 * t1030 * t1178;
t1262 = t1017 * t1029;
t959 = t1242 + (t969 * t998 - t970 * t995) * t1050;
t953 = t959 * t1061 * t1262;
t943 = t953 + t947;
t1083 = ((-pkin(1) * t943 * t1243 + t1029 * t1054) * t1050 + pkin(1) * t1107) * t1054 * t1110;
t1171 = t1045 * t1242;
t1189 = t1059 * t1032 * t950;
t1234 = t1051 * t1309;
t935 = t1057 * t943 * t1076;
t1128 = (t935 + (t943 * t1234 - t1171) * pkin(1)) * t1189;
t1250 = t1031 * t1058;
t1186 = (t935 + (0.2e1 * (t953 + t947 / 0.2e1) * t1234 + (t1017 * t959 - t1171) * t1050 * t1029) * pkin(1)) * t1250;
t1259 = t1018 * t1062;
t1260 = t1017 * t1051;
t1270 = (-t959 * t1260 - t943 * t1309) * t1030;
t1199 = t950 * t1259;
t1285 = t1029 * t943;
t926 = t1199 * t1285;
t977 = t1038 * t1110;
t1297 = t926 + t977;
t903 = -t1083 + (-t1128 + (-t1186 - t1270) * t959) * t1259 + t1297;
t974 = 0.1e1 / (sin(qJ(2,2) + qJ(3,2)) + sin(qJ(2,2) - qJ(3,2)));
t1303 = t903 * t974;
t1167 = t1053 * t1239;
t1106 = t1034 * t1167;
t1079 = t1052 * t1033;
t1036 = 0.1e1 / t1079;
t1174 = t1021 * t1238;
t1109 = t1036 * t1174;
t1241 = t1046 * t1047;
t1035 = 0.1e1 / t1052 ^ 2;
t1240 = t1046 * t1054;
t971 = t1047 * t1055 + t1053 * t1056;
t972 = t1047 * t1056 - t1053 * t1055;
t981 = pkin(1) * t1053 + t1305;
t1008 = qJ(1,1) + legFrame(1,3);
t996 = sin(t1008);
t999 = cos(t1008);
t951 = -t981 * t1240 + (-(t971 * t1305 + t1010) * t999 - (-t972 * t1305 + t1009) * t996) * t1052;
t948 = t951 * t1035 * t1174;
t1257 = t1021 * t1034;
t960 = t1240 + (t971 * t999 - t972 * t996) * t1052;
t954 = t960 * t1061 * t1257;
t945 = t954 + t948;
t1082 = ((-pkin(1) * t945 * t1241 + t1034 * t1054) * t1052 + pkin(1) * t1106) * t1054 * t1109;
t1170 = t1047 * t1240;
t1188 = t1059 * t1037 * t951;
t1233 = t1053 * t1308;
t936 = t1057 * t945 * t1079;
t1127 = (t936 + (t945 * t1233 - t1170) * pkin(1)) * t1188;
t1248 = t1036 * t1058;
t1185 = (t936 + (0.2e1 * (t954 + t948 / 0.2e1) * t1233 + (t1021 * t960 - t1170) * t1052 * t1034) * pkin(1)) * t1248;
t1254 = t1022 * t1062;
t1255 = t1021 * t1053;
t1269 = (-t960 * t1255 - t945 * t1308) * t1035;
t1194 = t951 * t1254;
t1284 = t1034 * t945;
t927 = t1194 * t1284;
t978 = t1038 * t1109;
t1296 = t927 + t978;
t905 = -t1082 + (-t1127 + (-t1185 - t1269) * t960) * t1254 + t1296;
t975 = 0.1e1 / (sin(qJ(2,1) + qJ(3,1)) + sin(qJ(2,1) - qJ(3,1)));
t1302 = t905 * t975;
t1301 = (0.2e1 * t952 + t946) * t949;
t1300 = (0.2e1 * t953 + t947) * t950;
t1299 = (0.2e1 * t954 + t948) * t951;
t1295 = t1012 * t901;
t1000 = qJ(2,3) + t1006;
t982 = sin(t1000);
t1294 = t1013 * t982;
t985 = cos(t1000);
t1293 = t1013 * t985;
t1292 = t1016 * t903;
t1001 = qJ(2,2) + t1007;
t983 = sin(t1001);
t1291 = t1017 * t983;
t986 = cos(t1001);
t1290 = t1017 * t986;
t1289 = t1020 * t905;
t1002 = qJ(2,1) + t1008;
t984 = sin(t1002);
t1288 = t1021 * t984;
t987 = cos(t1002);
t1287 = t1021 * t987;
t1283 = t1042 * t941;
t907 = -t958 * t1264 * t1271 + t1298;
t1282 = t1043 * t907;
t1281 = t1044 * t943;
t908 = -t959 * t1259 * t1270 + t1297;
t1280 = t1045 * t908;
t1279 = t1046 * t945;
t909 = -t960 * t1254 * t1269 + t1296;
t1278 = t1047 * t909;
t1277 = t1049 * t907;
t1276 = t1051 * t908;
t1275 = t1053 * t909;
t1274 = (-t1084 / 0.2e1 + (-t1129 / 0.2e1 + (-t1271 - t1187 / 0.2e1) * t958) * t1264 + t1298) * t1049;
t1273 = (-t1083 / 0.2e1 + (-t1128 / 0.2e1 + (-t1270 - t1186 / 0.2e1) * t959) * t1259 + t1297) * t1051;
t1272 = (-t1082 / 0.2e1 + (-t1127 / 0.2e1 + (-t1269 - t1185 / 0.2e1) * t960) * t1254 + t1296) * t1053;
t1268 = t1012 * t1026;
t1266 = t1013 * t1025;
t1263 = t1016 * t1031;
t1261 = t1017 * t1030;
t1258 = t1020 * t1036;
t1256 = t1021 * t1035;
t1253 = t1024 * t1042;
t1251 = t1029 * t1044;
t1249 = t1034 * t1046;
t1247 = t1038 * t1059;
t1246 = t1038 * t1061;
t1237 = 2 * t1058;
t1236 = 0.2e1 * t1059;
t1232 = t973 * t1295;
t955 = t958 ^ 2;
t1231 = t1013 * t955 * t973;
t1230 = t974 * t1292;
t956 = t959 ^ 2;
t1229 = t1017 * t956 * t974;
t1228 = t975 * t1289;
t957 = t960 ^ 2;
t1227 = t1021 * t957 * t975;
t1226 = t1027 * t955 * t979;
t1225 = t1032 * t956 * t980;
t1224 = t1037 * t957 * t981;
t1223 = t973 * t1283;
t1222 = t973 * t1282;
t1221 = t974 * t1281;
t1220 = t974 * t1280;
t1219 = t975 * t1279;
t1218 = t975 * t1278;
t1217 = t973 * t1277;
t1216 = t974 * t1276;
t1215 = t975 * t1275;
t1214 = t979 * t1025 * t907;
t1213 = t980 * t1030 * t908;
t1212 = t981 * t1035 * t909;
t1003 = t1023 - 0.1e1 / 0.2e1;
t1211 = t1003 * t1286;
t1004 = t1028 - 0.1e1 / 0.2e1;
t1210 = t1004 * t1285;
t1005 = t1033 - 0.1e1 / 0.2e1;
t1209 = t1005 * t1284;
t1208 = t1013 * t1295;
t1207 = t979 * t1266;
t1206 = t1013 * t1283;
t902 = -t1084 + 0.2e1 * t925 + 0.2e1 * t976 + (-t1129 + (-t1187 - 0.2e1 * t1271) * t958) * t1264;
t1205 = t902 * t1265;
t1203 = t1017 * t1292;
t1202 = t980 * t1261;
t1201 = t1017 * t1281;
t904 = -t1083 + 0.2e1 * t926 + 0.2e1 * t977 + (-t1128 + (-t1186 - 0.2e1 * t1270) * t959) * t1259;
t1200 = t904 * t1260;
t1198 = t1021 * t1289;
t1197 = t981 * t1256;
t1196 = t1021 * t1279;
t906 = -t1082 + 0.2e1 * t927 + 0.2e1 * t978 + (-t1127 + (-t1185 - 0.2e1 * t1269) * t960) * t1254;
t1195 = t906 * t1255;
t1193 = t1042 * t1048 * t901;
t1192 = t1044 * t1050 * t903;
t1191 = t1046 * t1052 * t905;
t1184 = t1012 * t1267;
t1183 = t1013 * t1253;
t1181 = t1025 * t1317;
t1180 = t1016 * t1262;
t1179 = t1017 * t1251;
t1177 = t1030 * t1315;
t1176 = t1020 * t1257;
t1175 = t1021 * t1249;
t1173 = t1035 * t1313;
t1166 = t1247 / 0.2e1;
t1105 = t1025 * t1166;
t922 = t1105 + (t958 * t1252 + t1190 / 0.2e1) * t1204;
t1165 = t1013 * (0.2e1 * t1048 * t1274 - 0.2e1 * t1108 * t1283 + (-0.2e1 * t1048 * t922 - t1247 * t1268) * t1043);
t1104 = t1030 * t1166;
t923 = t1104 + (t959 * t1250 + t1189 / 0.2e1) * t1199;
t1164 = t1017 * (0.2e1 * t1050 * t1273 - 0.2e1 * t1107 * t1281 + (-0.2e1 * t1050 * t923 - t1247 * t1263) * t1045);
t1103 = t1035 * t1166;
t924 = t1103 + (t960 * t1248 + t1188 / 0.2e1) * t1194;
t1163 = t1021 * (0.2e1 * t1052 * t1272 - 0.2e1 * t1106 * t1279 + (-0.2e1 * t1052 * t924 - t1247 * t1258) * t1047);
t1162 = t1024 + t1268;
t1161 = t1029 + t1263;
t1160 = t1034 + t1258;
t1159 = t973 * t1211;
t1158 = t974 * t1210;
t1157 = t975 * t1209;
t1156 = t1024 * t1231;
t1155 = t901 * t1207;
t1154 = t1266 * t1301;
t1153 = t1025 * t1231;
t1152 = t1029 * t1229;
t1151 = t903 * t1202;
t1150 = t1261 * t1300;
t1149 = t1030 * t1229;
t1148 = t1034 * t1227;
t1147 = t905 * t1197;
t1146 = t1256 * t1299;
t1145 = t1035 * t1227;
t1144 = t1026 * t1061 * t1301;
t1143 = t1062 * t1226;
t1142 = t1031 * t1061 * t1300;
t1141 = t1062 * t1225;
t1140 = t1036 * t1061 * t1299;
t1139 = t1062 * t1224;
t1138 = t973 * t1193;
t1137 = t1042 * t1217;
t1136 = t974 * t1192;
t1135 = t1044 * t1216;
t1134 = t975 * t1191;
t1133 = t1046 * t1215;
t1132 = t1048 * t1217;
t1131 = t1050 * t1216;
t1130 = t1052 * t1215;
t1126 = t1013 * t1211;
t1125 = t1003 * t1206;
t1124 = t1017 * t1210;
t1123 = t1004 * t1201;
t1122 = t1021 * t1209;
t1121 = t1005 * t1196;
t1120 = t1012 * t1207;
t1119 = t1013 * t1193;
t1118 = t1016 * t1202;
t1117 = t1017 * t1192;
t1116 = t1020 * t1197;
t1115 = t1021 * t1191;
t1114 = t955 * t1181;
t1113 = t956 * t1177;
t1112 = t957 * t1173;
t1102 = 0.2e1 * t1013 * (-(t1043 * t1105 + t1274) * t1042 - t941 * t1169 + t922 * t1245);
t1101 = 0.2e1 * t1017 * (-(t1045 * t1104 + t1273) * t1044 - t943 * t1168 + t923 * t1243);
t1100 = 0.2e1 * t1021 * (-(t1047 * t1103 + t1272) * t1046 - t945 * t1167 + t924 * t1241);
t1099 = t1042 * t1153;
t1098 = t1181 * t1301;
t1097 = t973 * t1114;
t1096 = t1044 * t1149;
t1095 = t1177 * t1300;
t1094 = t974 * t1113;
t1093 = t1046 * t1145;
t1092 = t1173 * t1299;
t1091 = t975 * t1112;
t1090 = t1162 * t973;
t1089 = t1161 * t974;
t1088 = t1160 * t975;
t1087 = t1013 * t1162;
t1086 = t1017 * t1161;
t1085 = t1021 * t1160;
t1060 = t1058 / t1057;
t993 = -qJ(3,1) + t1002;
t992 = qJ(3,1) + t1002;
t991 = -qJ(3,2) + t1001;
t990 = qJ(3,2) + t1001;
t989 = -qJ(3,3) + t1000;
t988 = qJ(3,3) + t1000;
t966 = t999 * t1312 + (-cos(t993) - cos(t992)) * pkin(2);
t965 = t998 * t1312 + (-cos(t991) - cos(t990)) * pkin(2);
t964 = t997 * t1312 + (-cos(t989) - cos(t988)) * pkin(2);
t963 = t996 * t1312 + (-sin(t993) - sin(t992)) * pkin(2);
t962 = t995 * t1312 + (-sin(t991) - sin(t990)) * pkin(2);
t961 = t994 * t1312 + (-sin(t989) - sin(t988)) * pkin(2);
t939 = t945 ^ 2;
t938 = t943 ^ 2;
t937 = t941 ^ 2;
t1 = [(t909 * t1287 + t908 * t1290 + t907 * t1293) * t1061, 0, 0, (t901 * t1293 + t903 * t1290 + t905 * t1287 + (t966 * t1302 + t965 * t1303 + t964 * t1304) * t1058) * t1061, t985 * t1205 + t986 * t1200 + t987 * t1195 + (t964 * t1217 + t965 * t1216 + t966 * t1215 + (t966 * t1145 + t965 * t1149 + t964 * t1153) * t1062 + (-t987 * t1146 - t986 * t1150 - t985 * t1154) * t1061) * t1058, -t985 * t902 - t986 * t904 - t987 * t906 + (-t964 * t1222 - t965 * t1220 - t966 * t1218 + (t1091 * t966 + t1094 * t965 + t1097 * t964) * t1062 + (-t1092 * t987 - t1095 * t986 - t1098 * t985) * t1061) * t1058, (t985 * t1208 + t986 * t1203 + t987 * t1198 + (t1228 * t966 + t1230 * t965 + t1232 * t964) * t1058 + ((t1219 * t966 + t1221 * t965 + t1223 * t964) * t1236 + (t1196 * t987 + t1201 * t986 + t1206 * t985) * t1237) * t1054) * t1061, (t985 * t1119 + t986 * t1117 + t987 * t1115 + (t1134 * t966 + t1136 * t965 + t1138 * t964) * t1058 + ((t1157 * t966 + t1158 * t965 + t1159 * t964) * t1236 + (t1122 * t987 + t1124 * t986 + t1126 * t985) * t1237) * t1054) * t1311, ((t1088 * t966 + t1089 * t965 + t1090 * t964) * t1060 + (t1085 * t987 + t1086 * t986 + t1087 * t985) * t1059) * t1246, 0, 0, t987 * t1163 + t986 * t1164 + t985 * t1165 + (t964 * t1132 + t965 * t1131 + t966 * t1130 + (t1148 * t966 + t1152 * t965 + t1156 * t964) * t1062) * t1058, t987 * t1100 + t986 * t1101 + t985 * t1102 + (-t964 * t1137 - t965 * t1135 - t966 * t1133 + (-t1093 * t966 - t1096 * t965 - t1099 * t964) * t1062) * t1058, 0; (t909 * t1288 + t908 * t1291 + t907 * t1294) * t1061, 0, 0, (t901 * t1294 + t903 * t1291 + t905 * t1288 + (t963 * t1302 + t962 * t1303 + t961 * t1304) * t1058) * t1061, t982 * t1205 + t983 * t1200 + t984 * t1195 + (t961 * t1217 + t962 * t1216 + t963 * t1215 + (t1145 * t963 + t1149 * t962 + t1153 * t961) * t1062 + (-t1146 * t984 - t1150 * t983 - t1154 * t982) * t1061) * t1058, -t982 * t902 - t983 * t904 - t984 * t906 + (-t961 * t1222 - t962 * t1220 - t963 * t1218 + (t1091 * t963 + t1094 * t962 + t1097 * t961) * t1062 + (-t1092 * t984 - t1095 * t983 - t1098 * t982) * t1061) * t1058, (t982 * t1208 + t983 * t1203 + t984 * t1198 + (t1228 * t963 + t1230 * t962 + t1232 * t961) * t1058 + ((t1219 * t963 + t1221 * t962 + t1223 * t961) * t1236 + (t1196 * t984 + t1201 * t983 + t1206 * t982) * t1237) * t1054) * t1061, (t982 * t1119 + t983 * t1117 + t984 * t1115 + (t1134 * t963 + t1136 * t962 + t1138 * t961) * t1058 + ((t1157 * t963 + t1158 * t962 + t1159 * t961) * t1236 + (t1122 * t984 + t1124 * t983 + t1126 * t982) * t1237) * t1054) * t1311, ((t1088 * t963 + t1089 * t962 + t1090 * t961) * t1060 + (t1085 * t984 + t1086 * t983 + t1087 * t982) * t1059) * t1246, 0, 0, t984 * t1163 + t983 * t1164 + t982 * t1165 + (t961 * t1132 + t962 * t1131 + t963 * t1130 + (t1148 * t963 + t1152 * t962 + t1156 * t961) * t1062) * t1058, t984 * t1100 + t983 * t1101 + t982 * t1102 + (-t961 * t1137 - t962 * t1135 - t963 * t1133 + (-t1093 * t963 - t1096 * t962 - t1099 * t961) * t1062) * t1058, 0; (t909 * t1175 + t908 * t1179 + t907 * t1183) * t1061, 0, 0, (t901 * t1183 + t903 * t1179 + t905 * t1175 + (-t1042 * t1155 - t1044 * t1151 - t1046 * t1147) * t1058) * t1061, t1049 * t902 * t1183 + t1051 * t904 * t1179 + t1053 * t906 * t1175 + ((-t1022 * t1139 + (-t1053 * t1212 - t1140) * t1021) * t1046 + (-t1018 * t1141 + (-t1051 * t1213 - t1142) * t1017) * t1044 + (-t1014 * t1143 + (-t1049 * t1214 - t1144) * t1013) * t1042) * t1058, -t902 * t1253 - t904 * t1251 - t906 * t1249 + ((t1212 + (-t1021 * t1139 - t1140) * t1313) * t1046 + (t1213 + (-t1017 * t1141 - t1142) * t1315) * t1044 + (t1214 + (-t1013 * t1143 - t1144) * t1317) * t1042) * t1058, (-t1042 * t937 - t1044 * t938 - t1046 * t939) * t1058 + (t1011 * t901 * t1267 + t1015 * t903 * t1262 + t1019 * t905 * t1257 + (-t1011 * t1155 - t1015 * t1151 - t1019 * t1147) * t1058 + ((-t1116 * t945 - t1118 * t943 - t1120 * t941) * t1236 + (t1176 * t945 + t1180 * t943 + t1184 * t941) * t1237) * t1054) * t1061, (t1034 * t939 * (-0.2e1 * t1033 + 0.1e1) + t1029 * t938 * (-0.2e1 * t1028 + 0.1e1) + t1024 * t937 * (-0.2e1 * t1023 + 0.1e1)) * t1058 + (0.2e1 * t1208 + 0.2e1 * t1203 + 0.2e1 * t1198 + (-t1176 * t905 * t981 - t1180 * t903 * t980 - t1184 * t901 * t979) * t1237 + 0.4e1 * ((-t1026 * t1125 * t979 - t1031 * t1123 * t980 - t1036 * t1121 * t981) * t1059 + (t1025 * t1125 + t1030 * t1123 + t1035 * t1121) * t1058) * t1054) * t1061, (t1249 * t905 + t903 * t1251 + t1253 * t901) * t1058 + (((-t1034 * t1314 - t1046 * t1036) * t981 * t1021 + (-t1029 * t1316 - t1044 * t1031) * t980 * t1017 + (-t1024 * t1318 - t1042 * t1026) * t979 * t1013) * t1060 + ((t1035 * t1046 + t1314) * t1021 + (t1030 * t1044 + t1316) * t1017 + (t1025 * t1042 + t1318) * t1013) * t1059) * t1246, (t901 + t903 + t905) * t1058, (t1027 * t1042 + t1032 * t1044 + t1037 * t1046) * t1060 * t1038, t1163 * t1249 + t1164 * t1251 + t1165 * t1253 + (((-pkin(1) * t1047 - t1255 * t981) * t909 * t1034 + (t1053 * t1061 - t1062 * t981) * t957 * t1036 * t1022) * t1046 + ((-pkin(1) * t1045 - t1260 * t980) * t908 * t1029 + (t1051 * t1061 - t1062 * t980) * t956 * t1031 * t1018) * t1044 + ((-pkin(1) * t1043 - t1265 * t979) * t907 * t1024 + (t1049 * t1061 - t1062 * t979) * t955 * t1026 * t1014) * t1042) * t1058, t1100 * t1249 + t1101 * t1251 + t1102 * t1253 + (t1120 * t1277 + t1118 * t1276 + t1116 * t1275 + (t1012 * t1014 * t1226 + t1016 * t1018 * t1225 + t1020 * t1022 * t1224) * t1062 + (t1112 + t1113 + t1114) * t1061 + (-t1278 - t1280 - t1282) * pkin(1)) * t1058, 0;];
tau_reg  = t1;
