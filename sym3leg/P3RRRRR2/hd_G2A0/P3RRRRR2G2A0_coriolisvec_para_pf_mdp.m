% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR2G2P2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G2P2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:10
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G2P2A0_coriolisvec_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:09:47
% EndTime: 2020-03-09 21:09:59
% DurationCPUTime: 12.46s
% Computational Cost: add. (29865->489), mult. (75715->1020), div. (11559->26), fcn. (69957->39), ass. (0->426)
t2956 = sin(qJ(2,3));
t2957 = sin(qJ(1,3));
t2964 = cos(qJ(3,3));
t2965 = cos(qJ(2,3));
t2966 = cos(qJ(1,3));
t2973 = xDP(3);
t2952 = legFrame(3,2);
t2916 = sin(t2952);
t2919 = cos(t2952);
t2974 = xDP(2);
t2975 = xDP(1);
t3012 = -t2916 * t2974 + t2919 * t2975;
t3187 = t2966 * t2973;
t2898 = t2916 * t2975 + t2919 * t2974;
t2955 = sin(qJ(3,3));
t3194 = t2955 * t2898;
t2874 = ((-t2957 * t2973 + t3012 * t2966) * t2956 + t2965 * (t3012 * t2957 + t3187)) * t2964 + t3194;
t2871 = t2874 ^ 2;
t2924 = 0.1e1 / t2956 ^ 2;
t3301 = t2871 * t2924;
t2959 = sin(qJ(2,2));
t2960 = sin(qJ(1,2));
t2967 = cos(qJ(3,2));
t2968 = cos(qJ(2,2));
t2969 = cos(qJ(1,2));
t2953 = legFrame(2,2);
t2917 = sin(t2953);
t2920 = cos(t2953);
t3011 = -t2917 * t2974 + t2920 * t2975;
t3185 = t2969 * t2973;
t2899 = t2917 * t2975 + t2920 * t2974;
t2958 = sin(qJ(3,2));
t3192 = t2958 * t2899;
t2875 = ((-t2960 * t2973 + t3011 * t2969) * t2959 + t2968 * (t3011 * t2960 + t3185)) * t2967 + t3192;
t2872 = t2875 ^ 2;
t2928 = 0.1e1 / t2959 ^ 2;
t3300 = t2872 * t2928;
t2962 = sin(qJ(2,1));
t2963 = sin(qJ(1,1));
t2970 = cos(qJ(3,1));
t2971 = cos(qJ(2,1));
t2972 = cos(qJ(1,1));
t2954 = legFrame(1,2);
t2918 = sin(t2954);
t2921 = cos(t2954);
t3010 = -t2918 * t2974 + t2921 * t2975;
t3183 = t2972 * t2973;
t2900 = t2918 * t2975 + t2921 * t2974;
t2961 = sin(qJ(3,1));
t3190 = t2961 * t2900;
t2876 = ((-t2963 * t2973 + t3010 * t2972) * t2962 + t2971 * (t3010 * t2963 + t3183)) * t2970 + t3190;
t2873 = t2876 ^ 2;
t2932 = 0.1e1 / t2962 ^ 2;
t3299 = t2873 * t2932;
t3298 = 2 * MDP(8);
t2934 = t2964 ^ 2;
t2907 = t2934 - 0.1e1 / 0.2e1;
t2935 = 0.1e1 / t2964;
t3297 = t2907 * t2935;
t2940 = t2967 ^ 2;
t2908 = t2940 - 0.1e1 / 0.2e1;
t2941 = 0.1e1 / t2967;
t3296 = t2908 * t2941;
t2946 = t2970 ^ 2;
t2909 = t2946 - 0.1e1 / 0.2e1;
t2947 = 0.1e1 / t2970;
t3295 = t2909 * t2947;
t2923 = 0.1e1 / t2956;
t3214 = t2923 * t2965;
t2938 = 0.1e1 / t2934 ^ 2;
t3140 = t2938 * t3301;
t2927 = 0.1e1 / t2959;
t3207 = t2927 * t2968;
t2944 = 0.1e1 / t2940 ^ 2;
t3137 = t2944 * t3300;
t2931 = 0.1e1 / t2962;
t3200 = t2931 * t2971;
t2950 = 0.1e1 / t2946 ^ 2;
t3134 = t2950 * t3299;
t2897 = t2900 ^ 2;
t2948 = 0.1e1 / t2970 ^ 2;
t3201 = t2931 * t2948;
t2930 = t2961 ^ 2;
t3204 = t2930 * t2931;
t3235 = t2897 * t2950;
t3294 = t2897 * t3201 + t3204 * t3235;
t2896 = t2899 ^ 2;
t2942 = 0.1e1 / t2967 ^ 2;
t3208 = t2927 * t2942;
t2926 = t2958 ^ 2;
t3211 = t2926 * t2927;
t3237 = t2896 * t2944;
t3293 = t2896 * t3208 + t3211 * t3237;
t2895 = t2898 ^ 2;
t2936 = 0.1e1 / t2964 ^ 2;
t3215 = t2923 * t2936;
t2922 = t2955 ^ 2;
t3218 = t2922 * t2923;
t3239 = t2895 * t2938;
t3292 = t2895 * t3215 + t3218 * t3239;
t2977 = 1 / pkin(2);
t3291 = -2 * pkin(1);
t3290 = 2 * pkin(2);
t2978 = 1 / pkin(2) ^ 2;
t3288 = t2978 / 0.2e1;
t3287 = pkin(1) * t2957;
t3286 = pkin(1) * t2960;
t3285 = pkin(1) * t2963;
t3284 = pkin(1) * t2974;
t3283 = pkin(1) * t2975;
t3282 = pkin(2) * t2934;
t3281 = pkin(2) * t2940;
t3280 = pkin(2) * t2946;
t3279 = pkin(2) * t2974;
t3278 = pkin(2) * t2975;
t3277 = qJ(2,1) - qJ(3,1);
t3276 = qJ(2,1) + qJ(3,1);
t3275 = qJ(2,2) - qJ(3,2);
t3274 = qJ(2,2) + qJ(3,2);
t3273 = qJ(2,3) - qJ(3,3);
t3272 = qJ(2,3) + qJ(3,3);
t2976 = pkin(2) ^ 2;
t2979 = t2977 / t2976;
t3271 = MDP(9) * t2979;
t3270 = MDP(11) * t2979;
t2901 = t2956 * t2966 + t2957 * t2965;
t3174 = pkin(1) * t2955 * t2965;
t2865 = -((-t2956 * t2957 + t2965 * t2966) * t2973 + t3012 * t2901) * t3282 + ((-t2955 * t3279 - t2957 * t3283) * t2919 + (-t2955 * t3278 + t2957 * t3284) * t2916 - pkin(1) * t3187) * t2964 - t2898 * t3174;
t2980 = 1 / pkin(1);
t3182 = t2977 * t2980;
t3112 = t2923 * t3182;
t2862 = t2865 * t2936 * t3112;
t3216 = t2923 * t2935;
t2868 = t2874 * t2980 * t3216;
t2859 = t2868 + t2862;
t2937 = t2935 / t2934;
t3048 = t2937 * t3112;
t3233 = t2898 * t2977;
t3120 = t2965 * t3233;
t3051 = t2935 * t3120;
t3193 = t2955 * t2956;
t3006 = ((-pkin(1) * t2859 * t3193 + t2898 * t2935) * t2964 + pkin(1) * t3051) * t2898 * t3048;
t3102 = t2935 * t3193;
t3188 = t2964 * t2965;
t3197 = t2937 * t2977;
t3250 = t2859 * t2934;
t3084 = (pkin(2) * t3250 + (t2859 * t3188 - t3102 * t3233) * pkin(1)) * t2865 * t3197;
t3153 = (t2976 * t3250 + ((t2868 + t2862 / 0.2e1) * t3188 * t3290 + (t2874 * t2923 - t2898 * t3193) * t2935) * pkin(1)) * t2977 * t2936;
t2981 = 1 / pkin(1) ^ 2;
t3212 = t2924 * t2981;
t3111 = t2935 * t3212;
t2844 = t2859 * t2865 * t3111;
t2889 = t2895 * t3048;
t3181 = t2844 + t2889;
t3114 = t2935 * t3214;
t2847 = -pkin(2) * t2859 * t2964 - t2874 * t3114;
t3257 = t2847 * t2935;
t2823 = -t3006 + (-t3084 + (-t3153 - t3257) * t2874) * t3212 + t3181;
t3269 = t2823 * t2936;
t3268 = t2823 * t2955;
t2902 = t2959 * t2969 + t2960 * t2968;
t3173 = pkin(1) * t2958 * t2968;
t2866 = -((-t2959 * t2960 + t2968 * t2969) * t2973 + t3011 * t2902) * t3281 + ((-t2958 * t3279 - t2960 * t3283) * t2920 + (-t2958 * t3278 + t2960 * t3284) * t2917 - pkin(1) * t3185) * t2967 - t2899 * t3173;
t3108 = t2927 * t3182;
t2863 = t2866 * t2942 * t3108;
t3209 = t2927 * t2941;
t2869 = t2875 * t2980 * t3209;
t2860 = t2869 + t2863;
t2943 = t2941 / t2940;
t3047 = t2943 * t3108;
t3232 = t2899 * t2977;
t3119 = t2968 * t3232;
t3050 = t2941 * t3119;
t3191 = t2958 * t2959;
t3005 = ((-pkin(1) * t2860 * t3191 + t2899 * t2941) * t2967 + pkin(1) * t3050) * t2899 * t3047;
t3101 = t2941 * t3191;
t3186 = t2967 * t2968;
t3196 = t2943 * t2977;
t3248 = t2860 * t2940;
t3083 = (pkin(2) * t3248 + (t2860 * t3186 - t3101 * t3232) * pkin(1)) * t2866 * t3196;
t3152 = (t2976 * t3248 + ((t2869 + t2863 / 0.2e1) * t3186 * t3290 + (t2875 * t2927 - t2899 * t3191) * t2941) * pkin(1)) * t2977 * t2942;
t3205 = t2928 * t2981;
t3107 = t2941 * t3205;
t2845 = t2860 * t2866 * t3107;
t2890 = t2896 * t3047;
t3180 = t2845 + t2890;
t3110 = t2941 * t3207;
t2848 = -pkin(2) * t2860 * t2967 - t2875 * t3110;
t3256 = t2848 * t2941;
t2824 = -t3005 + (-t3083 + (-t3152 - t3256) * t2875) * t3205 + t3180;
t3267 = t2824 * t2942;
t3266 = t2824 * t2958;
t2903 = t2962 * t2972 + t2963 * t2971;
t3172 = pkin(1) * t2961 * t2971;
t2867 = -((-t2962 * t2963 + t2971 * t2972) * t2973 + t3010 * t2903) * t3280 + ((-t2961 * t3279 - t2963 * t3283) * t2921 + (-t2961 * t3278 + t2963 * t3284) * t2918 - pkin(1) * t3183) * t2970 - t2900 * t3172;
t3104 = t2931 * t3182;
t2864 = t2867 * t2948 * t3104;
t3202 = t2931 * t2947;
t2870 = t2876 * t2980 * t3202;
t2861 = t2870 + t2864;
t2949 = t2947 / t2946;
t3046 = t2949 * t3104;
t3231 = t2900 * t2977;
t3118 = t2971 * t3231;
t3049 = t2947 * t3118;
t3189 = t2961 * t2962;
t3004 = ((-pkin(1) * t2861 * t3189 + t2900 * t2947) * t2970 + pkin(1) * t3049) * t2900 * t3046;
t3100 = t2947 * t3189;
t3184 = t2970 * t2971;
t3195 = t2949 * t2977;
t3246 = t2861 * t2946;
t3082 = (pkin(2) * t3246 + (t2861 * t3184 - t3100 * t3231) * pkin(1)) * t2867 * t3195;
t3151 = (t2976 * t3246 + ((t2870 + t2864 / 0.2e1) * t3184 * t3290 + (t2876 * t2931 - t2900 * t3189) * t2947) * pkin(1)) * t2977 * t2948;
t3198 = t2932 * t2981;
t3103 = t2947 * t3198;
t2846 = t2861 * t2867 * t3103;
t2891 = t2897 * t3046;
t3179 = t2846 + t2891;
t3106 = t2947 * t3200;
t2849 = -pkin(2) * t2861 * t2970 - t2876 * t3106;
t3255 = t2849 * t2947;
t2825 = -t3004 + (-t3082 + (-t3151 - t3255) * t2876) * t3198 + t3179;
t3265 = t2825 * t2948;
t3264 = t2825 * t2961;
t2826 = -t2847 * t2874 * t3111 + t3181;
t3263 = t2826 * t2936;
t3262 = t2826 * t2956;
t2827 = -t2848 * t2875 * t3107 + t3180;
t3261 = t2827 * t2942;
t3260 = t2827 * t2959;
t2828 = -t2849 * t2876 * t3103 + t3179;
t3259 = t2828 * t2948;
t3258 = t2828 * t2962;
t3254 = (t2862 + 0.2e1 * t2868) * t2865;
t3253 = (t2863 + 0.2e1 * t2869) * t2866;
t3252 = (t2864 + 0.2e1 * t2870) * t2867;
t3251 = t2859 * t2898;
t3249 = t2860 * t2899;
t3247 = t2861 * t2900;
t3242 = (t2966 * t3291 + (-cos(qJ(1,3) + t3273) - cos(qJ(1,3) + t3272)) * pkin(2)) / (sin(t3272) + sin(t3273));
t3241 = (t2969 * t3291 + (-cos(qJ(1,2) + t3275) - cos(qJ(1,2) + t3274)) * pkin(2)) / (sin(t3274) + sin(t3275));
t3240 = (t2972 * t3291 + (-cos(qJ(1,1) + t3277) - cos(qJ(1,1) + t3276)) * pkin(2)) / (sin(t3276) + sin(t3277));
t3238 = t2895 * t2978;
t3236 = t2896 * t2978;
t3234 = t2897 * t2978;
t3230 = t2901 * t2964;
t3229 = t2902 * t2967;
t3228 = t2903 * t2970;
t2913 = cos(qJ(1,3) + qJ(2,3));
t3227 = t2913 * t2923;
t2914 = cos(qJ(1,2) + qJ(2,2));
t3226 = t2914 * t2927;
t2915 = cos(qJ(1,1) + qJ(2,1));
t3225 = t2915 * t2931;
t3224 = t2916 * t2955;
t3223 = t2917 * t2958;
t3222 = t2918 * t2961;
t3221 = t2919 * t2955;
t3220 = t2920 * t2958;
t3219 = t2921 * t2961;
t3217 = t2922 * t2937;
t3213 = t2924 * t2965;
t3210 = t2926 * t2943;
t3206 = t2928 * t2968;
t3203 = t2930 * t2949;
t3199 = t2932 * t2971;
t3178 = 2 * MDP(7);
t3176 = 4 * MDP(8);
t3175 = 2 * MDP(13);
t3171 = t2901 * t3282;
t3170 = t2902 * t3281;
t3169 = t2903 * t3280;
t3168 = MDP(4) * t3269;
t3167 = MDP(4) * t3267;
t3166 = MDP(4) * t3265;
t3165 = t2823 * t3242;
t3164 = t2922 * t3269;
t3163 = t2935 * t3268;
t3162 = t2824 * t3241;
t3161 = t2926 * t3267;
t3160 = t2941 * t3266;
t3159 = t2825 * t3240;
t3158 = t2930 * t3265;
t3157 = t2947 * t3264;
t3156 = t2826 * t3242;
t3155 = t2827 * t3241;
t3154 = t2828 * t3240;
t2853 = t2859 ^ 2;
t3150 = t2853 * (-0.2e1 * t2934 + 0.1e1) * t2935;
t2854 = t2860 ^ 2;
t3149 = t2854 * (-0.2e1 * t2940 + 0.1e1) * t2941;
t2855 = t2861 ^ 2;
t3148 = t2855 * (-0.2e1 * t2946 + 0.1e1) * t2947;
t3147 = t2923 * t3251;
t3146 = t2859 * t3194;
t3145 = t2927 * t3249;
t3144 = t2860 * t3192;
t3143 = t2931 * t3247;
t3142 = t2861 * t3190;
t3141 = t2937 * t3301;
t3139 = t2871 * t3213;
t3138 = t2943 * t3300;
t3136 = t2872 * t3206;
t3135 = t2949 * t3299;
t3133 = t2873 * t3199;
t2883 = -t2916 * t3230 + t3221;
t3132 = t2883 * t3216;
t2884 = t2919 * t3230 + t3224;
t3131 = t2884 * t3216;
t2885 = -t2917 * t3229 + t3220;
t3130 = t2885 * t3209;
t2886 = t2920 * t3229 + t3223;
t3129 = t2886 * t3209;
t2887 = -t2918 * t3228 + t3219;
t3128 = t2887 * t3202;
t2888 = t2921 * t3228 + t3222;
t3127 = t2888 * t3202;
t3125 = t2955 * t3239;
t3123 = t2958 * t3237;
t3121 = t2961 * t3235;
t3117 = t2913 * t3218;
t3116 = t2914 * t3211;
t3115 = t2915 * t3204;
t3113 = t2923 * t3268;
t3109 = t2927 * t3266;
t3105 = t2931 * t3264;
t3099 = 0.2e1 * t3163;
t3098 = 0.2e1 * t3160;
t3097 = 0.2e1 * t3157;
t3096 = MDP(5) * t2937 * t3254;
t3095 = MDP(5) * t2943 * t3253;
t3094 = MDP(5) * t2949 * t3252;
t3093 = t2826 * t3114;
t3092 = t3214 * t3263;
t3091 = t2826 * t3102;
t3090 = t2827 * t3110;
t3089 = t3207 * t3261;
t3088 = t2827 * t3101;
t3087 = t2828 * t3106;
t3086 = t3200 * t3259;
t3085 = t2828 * t3100;
t3081 = t3213 * t3254;
t3080 = t3206 * t3253;
t3079 = t3199 * t3252;
t3078 = t3242 * t3251;
t3077 = t3241 * t3249;
t3076 = t3240 * t3247;
t3075 = t2871 * t2923 * t3242;
t3074 = t2936 * t3139;
t3073 = t2955 * t3140;
t3072 = t3140 * t3214;
t3071 = t2872 * t2927 * t3241;
t3070 = t2942 * t3136;
t3069 = t2958 * t3137;
t3068 = t3137 * t3207;
t3067 = t2873 * t2931 * t3240;
t3066 = t2948 * t3133;
t3065 = t2961 * t3134;
t3064 = t3134 * t3200;
t3063 = t2823 * t3132;
t3062 = t2823 * t3131;
t3061 = t2824 * t3130;
t3060 = t2824 * t3129;
t3059 = t2825 * t3128;
t3058 = t2825 * t3127;
t3057 = t2965 * t3156;
t3056 = t2968 * t3155;
t3055 = t2971 * t3154;
t3045 = t2936 * t3238 / 0.2e1;
t3044 = t2942 * t3236 / 0.2e1;
t3043 = t2948 * t3234 / 0.2e1;
t3042 = 0.4e1 * t2907 * t2936 * t3251;
t3041 = 0.2e1 * t2913 * t3147;
t3040 = 0.2e1 * t2935 * t3146;
t3039 = 0.4e1 * t2908 * t2942 * t3249;
t3038 = 0.2e1 * t2914 * t3145;
t3037 = 0.2e1 * t2941 * t3144;
t3036 = 0.4e1 * t2909 * t2948 * t3247;
t3035 = 0.2e1 * t2915 * t3143;
t3034 = 0.2e1 * t2947 * t3142;
t3033 = t2937 * t3081;
t3032 = t2943 * t3080;
t3031 = t2949 * t3079;
t3030 = t2907 * t2937 * t3147;
t3029 = t3146 * t3215;
t3028 = t2908 * t2943 * t3145;
t3027 = t3144 * t3208;
t3026 = t2909 * t2949 * t3143;
t3025 = t3142 * t3201;
t3024 = t2936 * t3075;
t3023 = t2937 * t2955 * t3139;
t3022 = t2942 * t3071;
t3021 = t2943 * t2958 * t3136;
t3020 = t2948 * t3067;
t3019 = t2949 * t2961 * t3133;
t2877 = t2916 * t3171 + (-pkin(2) * t3221 + t2916 * t3287) * t2964 - t2919 * t3174;
t3018 = t2877 * t3092;
t2878 = -t2919 * t3171 + (-pkin(2) * t3224 - t2919 * t3287) * t2964 - t2916 * t3174;
t3017 = t2878 * t3092;
t2879 = t2917 * t3170 + (-pkin(2) * t3220 + t2917 * t3286) * t2967 - t2920 * t3173;
t3016 = t2879 * t3089;
t2880 = -t2920 * t3170 + (-pkin(2) * t3223 - t2920 * t3286) * t2967 - t2917 * t3173;
t3015 = t2880 * t3089;
t2881 = t2918 * t3169 + (-pkin(2) * t3219 + t2918 * t3285) * t2970 - t2921 * t3172;
t3014 = t2881 * t3086;
t2882 = -t2921 * t3169 + (-pkin(2) * t3222 - t2921 * t3285) * t2970 - t2918 * t3172;
t3013 = t2882 * t3086;
t3009 = t2895 * t2923 * (t2922 * t2935 * t2938 + t2937);
t3008 = t2896 * t2927 * (t2926 * t2941 * t2944 + t2943);
t3007 = t2897 * t2931 * (t2930 * t2947 * t2950 + t2949);
t2817 = -t3006 / 0.2e1 + (-t3084 / 0.2e1 + (-t3257 - t3153 / 0.2e1) * t2874) * t3212 + t3181;
t2820 = -t3006 + 0.2e1 * t2844 + 0.2e1 * t2889 + (-t3084 + (-t3153 - 0.2e1 * t3257) * t2874) * t3212;
t2841 = t3045 + (t2938 * t2865 * t3288 + t2874 * t3197) * t2865 * t3212;
t3003 = -t2820 * MDP(6) + (t2965 * t2820 * MDP(5) + (-0.2e1 * t2859 * t2955 * t3051 + 0.2e1 * t2817 * t3188 + (-0.2e1 * t2841 * t2964 - t3217 * t3238) * t2956) * MDP(12) + (-(t2817 * t2965 + t2956 * t3045) * t2955 + t2841 * t3193 - t2859 * t3120) * t3175) * t2923;
t2818 = -t3005 / 0.2e1 + (-t3083 / 0.2e1 + (-t3256 - t3152 / 0.2e1) * t2875) * t3205 + t3180;
t2821 = -t3005 + 0.2e1 * t2845 + 0.2e1 * t2890 + (-t3083 + (-t3152 - 0.2e1 * t3256) * t2875) * t3205;
t2842 = t3044 + (t2944 * t2866 * t3288 + t2875 * t3196) * t2866 * t3205;
t3002 = -t2821 * MDP(6) + (t2968 * t2821 * MDP(5) + (-0.2e1 * t2860 * t2958 * t3050 + 0.2e1 * t2818 * t3186 + (-0.2e1 * t2842 * t2967 - t3210 * t3236) * t2959) * MDP(12) + (-(t2818 * t2968 + t2959 * t3044) * t2958 + t2842 * t3191 - t2860 * t3119) * t3175) * t2927;
t2819 = -t3004 / 0.2e1 + (-t3082 / 0.2e1 + (-t3255 - t3151 / 0.2e1) * t2876) * t3198 + t3179;
t2822 = -t3004 + 0.2e1 * t2846 + 0.2e1 * t2891 + (-t3082 + (-t3151 - 0.2e1 * t3255) * t2876) * t3198;
t2843 = t3043 + (t2950 * t2867 * t3288 + t2876 * t3195) * t2867 * t3198;
t3001 = -t2822 * MDP(6) + (t2971 * t2822 * MDP(5) + (-0.2e1 * t2861 * t2961 * t3049 + 0.2e1 * t2819 * t3184 + (-0.2e1 * t2843 * t2970 - t3203 * t3234) * t2962) * MDP(12) + (-(t2819 * t2971 + t2962 * t3043) * t2961 + t2843 * t3189 - t2861 * t3118) * t3175) * t2931;
t3000 = t2935 * t3003;
t2999 = t2941 * t3002;
t2998 = t2947 * t3001;
t1 = [t2888 * t2998 + t2886 * t2999 + t2884 * t3000 + (t2916 * t3125 + t2917 * t3123 + t2918 * t3121) * t3270 + ((t2826 * t3131 + t2827 * t3129 + t2828 * t3127) * MDP(1) + (t3058 + t3060 + t3062) * MDP(4) + (t2922 * t3062 + t2926 * t3060 + t2930 * t3058) * MDP(7) + (t2884 * t3113 + t2886 * t3109 + t2888 * t3105) * t3298 + (t2878 * t3009 + t2880 * t3008 + t2882 * t3007) * t3271 + ((t2878 * t3029 + t2880 * t3027 + t2882 * t3025) * t3178 + (t2878 * t3030 + t2880 * t3028 + t2882 * t3026) * t3176 + (t3292 * t2884 + t3293 * t2886 + t3294 * t2888) * MDP(9)) * t2978) * t2980 + ((t3013 + t3015 + t3017) * MDP(5) + (-t2878 * t3263 - t2880 * t3261 - t2882 * t3259) * MDP(6) + (-t2853 * t3224 - t2854 * t3223 - t2855 * t3222) * MDP(7) + (t2916 * t3150 + t2917 * t3149 + t2918 * t3148) * MDP(8) + (t2916 * t3163 + t2917 * t3160 + t2918 * t3157) * MDP(9) + (t2823 * t2916 + t2824 * t2917 + t2825 * t2918) * MDP(10) + (t2878 * t3093 + t2880 * t3090 + t2882 * t3087) * MDP(12) + (-t2955 * t3017 - t2958 * t3015 - t2961 * t3013) * MDP(13) + ((-t2916 * t3091 - t2917 * t3088 - t2918 * t3085) * MDP(12) + (-t2916 * t3262 - t2917 * t3260 - t2918 * t3258) * MDP(13)) * pkin(1) + ((t2878 * t3140 + t2880 * t3137 + t2882 * t3134) * MDP(5) + (t2878 * t3072 + t2880 * t3068 + t2882 * t3064) * MDP(6) + (t2878 * t3141 + t2880 * t3138 + t2882 * t3135) * MDP(12) + (-t2878 * t3073 - t2880 * t3069 - t2882 * t3065) * MDP(13)) * t2981 + ((-t2884 * t3033 - t2886 * t3032 - t2888 * t3031) * MDP(6) + (t2916 * t3023 + t2917 * t3021 + t2918 * t3019) * MDP(12) + (t2916 * t3074 + t2917 * t3070 + t2918 * t3066) * MDP(13) + (t2882 * t3166 - t2888 * t3094 + (t2882 * t3158 + t2888 * t3034) * MDP(7) + (t2882 * t3097 + t2888 * t3036) * MDP(8)) * t2931 + (t2880 * t3167 - t2886 * t3095 + (t2880 * t3161 + t2886 * t3037) * MDP(7) + (t2880 * t3098 + t2886 * t3039) * MDP(8)) * t2927 + (t2878 * t3168 - t2884 * t3096 + (t2878 * t3164 + t2884 * t3040) * MDP(7) + (t2878 * t3099 + t2884 * t3042) * MDP(8)) * t2923) * t2980) * t2977; t2887 * t2998 + t2885 * t2999 + t2883 * t3000 + (t2919 * t3125 + t2920 * t3123 + t2921 * t3121) * t3270 + ((t2826 * t3132 + t2827 * t3130 + t2828 * t3128) * MDP(1) + (t3059 + t3061 + t3063) * MDP(4) + (t2922 * t3063 + t2926 * t3061 + t2930 * t3059) * MDP(7) + (t2883 * t3113 + t2885 * t3109 + t2887 * t3105) * t3298 + (t2877 * t3009 + t2879 * t3008 + t2881 * t3007) * t3271 + ((t2877 * t3029 + t2879 * t3027 + t2881 * t3025) * t3178 + (t2877 * t3030 + t2879 * t3028 + t2881 * t3026) * t3176 + (t3292 * t2883 + t3293 * t2885 + t3294 * t2887) * MDP(9)) * t2978) * t2980 + ((t3014 + t3016 + t3018) * MDP(5) + (-t2877 * t3263 - t2879 * t3261 - t2881 * t3259) * MDP(6) + (-t2853 * t3221 - t2854 * t3220 - t2855 * t3219) * MDP(7) + (t2919 * t3150 + t2920 * t3149 + t2921 * t3148) * MDP(8) + (t2919 * t3163 + t2920 * t3160 + t2921 * t3157) * MDP(9) + (t2823 * t2919 + t2824 * t2920 + t2825 * t2921) * MDP(10) + (t2877 * t3093 + t2879 * t3090 + t2881 * t3087) * MDP(12) + (-t2955 * t3018 - t2958 * t3016 - t2961 * t3014) * MDP(13) + ((-t2919 * t3091 - t2920 * t3088 - t2921 * t3085) * MDP(12) + (-t2919 * t3262 - t2920 * t3260 - t2921 * t3258) * MDP(13)) * pkin(1) + ((t2877 * t3140 + t2879 * t3137 + t2881 * t3134) * MDP(5) + (t2877 * t3072 + t2879 * t3068 + t2881 * t3064) * MDP(6) + (t2877 * t3141 + t2879 * t3138 + t2881 * t3135) * MDP(12) + (-t2877 * t3073 - t2879 * t3069 - t2881 * t3065) * MDP(13)) * t2981 + ((-t2883 * t3033 - t2885 * t3032 - t2887 * t3031) * MDP(6) + (t2919 * t3023 + t2920 * t3021 + t2921 * t3019) * MDP(12) + (t2919 * t3074 + t2920 * t3070 + t2921 * t3066) * MDP(13) + (t2881 * t3166 - t2887 * t3094 + (t2881 * t3158 + t2887 * t3034) * MDP(7) + (t2881 * t3097 + t2887 * t3036) * MDP(8)) * t2931 + (t2879 * t3167 - t2885 * t3095 + (t2879 * t3161 + t2885 * t3037) * MDP(7) + (t2879 * t3098 + t2885 * t3039) * MDP(8)) * t2927 + (t2877 * t3168 - t2883 * t3096 + (t2877 * t3164 + t2883 * t3040) * MDP(7) + (t2877 * t3099 + t2883 * t3042) * MDP(8)) * t2923) * t2980) * t2977; t3001 * t2915 + t3002 * t2914 + t3003 * t2913 + ((t3055 + t3056 + t3057) * MDP(5) + (-t2956 * t3156 - t2959 * t3155 - t2962 * t3154) * MDP(6) + (t2964 * t3057 + t2967 * t3056 + t2970 * t3055) * MDP(12) + (-t2955 * t3057 - t2958 * t3056 - t2961 * t3055) * MDP(13) + ((t3020 + t3022 + t3024) * MDP(5) + (t3066 * t3240 + t3070 * t3241 + t3074 * t3242) * MDP(6) + (t2935 * t3075 + t2941 * t3071 + t2947 * t3067) * MDP(12) + (-t2955 * t3024 - t2958 * t3022 - t2961 * t3020) * MDP(13)) * t2981) * t2977 + ((t2826 * t3227 + t2827 * t3226 + t2828 * t3225) * MDP(1) + (t2823 * t3227 + t2824 * t3226 + t2825 * t3225) * MDP(4) + (t2823 * t3117 + t2824 * t3116 + t2825 * t3115) * MDP(7) + (t2913 * t2964 * t3113 + t2914 * t2967 * t3109 + t2915 * t2970 * t3105) * t3298 + ((t2947 + t3203) * t2897 * t3240 + (t2941 + t3210) * t2896 * t3241 + (t2935 + t3217) * t2895 * t3242) * t3271 + ((t2955 * t3078 + t2958 * t3077 + t2961 * t3076) * t3178 + 0.2e1 * (t3076 * t3295 + t3077 * t3296 + t3078 * t3297) * t3298 + ((t2915 * t3202 + t2949 * t3115) * t2897 + (t2914 * t3209 + t2943 * t3116) * t2896 + (t2913 * t3216 + t2937 * t3117) * t2895) * MDP(9)) * t2978 + ((t3159 + t3162 + t3165) * MDP(4) + (-t2913 * t3215 * t3254 - t2914 * t3208 * t3253 - t2915 * t3201 * t3252) * MDP(5) + (-t2913 * t2936 * t3081 - t2914 * t2942 * t3080 - t2915 * t2948 * t3079) * MDP(6) + (t2922 * t3165 + t2926 * t3162 + t2930 * t3159 + t2955 * t3041 + t2958 * t3038 + t2961 * t3035) * MDP(7) + (t2955 * t2964 * t3165 + t2958 * t2967 * t3162 + t2961 * t2970 * t3159 + t3035 * t3295 + t3038 * t3296 + t3041 * t3297) * t3298) * t2977) * t2980;];
taucX  = t1;
