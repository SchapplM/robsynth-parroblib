% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x14]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:10
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR2G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G2A0_coriolisvec_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:09:16
% EndTime: 2020-03-09 21:09:25
% DurationCPUTime: 10.06s
% Computational Cost: add. (29837->476), mult. (75684->1004), div. (11559->26), fcn. (69957->39), ass. (0->455)
t1190 = sin(qJ(2,3));
t1191 = sin(qJ(1,3));
t1198 = cos(qJ(3,3));
t1199 = cos(qJ(2,3));
t1200 = cos(qJ(1,3));
t1207 = xDP(3);
t1186 = legFrame(3,2);
t1150 = sin(t1186);
t1153 = cos(t1186);
t1208 = xDP(2);
t1209 = xDP(1);
t1246 = -t1150 * t1208 + t1153 * t1209;
t1437 = t1200 * t1207;
t1132 = t1150 * t1209 + t1153 * t1208;
t1189 = sin(qJ(3,3));
t1444 = t1189 * t1132;
t1108 = ((-t1191 * t1207 + t1246 * t1200) * t1190 + t1199 * (t1246 * t1191 + t1437)) * t1198 + t1444;
t1105 = t1108 ^ 2;
t1158 = 0.1e1 / t1190 ^ 2;
t1556 = t1105 * t1158;
t1193 = sin(qJ(2,2));
t1194 = sin(qJ(1,2));
t1201 = cos(qJ(3,2));
t1202 = cos(qJ(2,2));
t1203 = cos(qJ(1,2));
t1187 = legFrame(2,2);
t1151 = sin(t1187);
t1154 = cos(t1187);
t1245 = -t1151 * t1208 + t1154 * t1209;
t1435 = t1203 * t1207;
t1133 = t1151 * t1209 + t1154 * t1208;
t1192 = sin(qJ(3,2));
t1442 = t1192 * t1133;
t1109 = ((-t1194 * t1207 + t1245 * t1203) * t1193 + t1202 * (t1245 * t1194 + t1435)) * t1201 + t1442;
t1106 = t1109 ^ 2;
t1162 = 0.1e1 / t1193 ^ 2;
t1555 = t1106 * t1162;
t1196 = sin(qJ(2,1));
t1197 = sin(qJ(1,1));
t1204 = cos(qJ(3,1));
t1205 = cos(qJ(2,1));
t1206 = cos(qJ(1,1));
t1188 = legFrame(1,2);
t1152 = sin(t1188);
t1155 = cos(t1188);
t1244 = -t1152 * t1208 + t1155 * t1209;
t1433 = t1206 * t1207;
t1134 = t1152 * t1209 + t1155 * t1208;
t1195 = sin(qJ(3,1));
t1440 = t1195 * t1134;
t1110 = ((-t1197 * t1207 + t1244 * t1206) * t1196 + t1205 * (t1244 * t1197 + t1433)) * t1204 + t1440;
t1107 = t1110 ^ 2;
t1166 = 0.1e1 / t1196 ^ 2;
t1554 = t1107 * t1166;
t1157 = 0.1e1 / t1190;
t1553 = 0.2e1 * t1157;
t1161 = 0.1e1 / t1193;
t1552 = 0.2e1 * t1161;
t1165 = 0.1e1 / t1196;
t1551 = 0.2e1 * t1165;
t1168 = t1198 ^ 2;
t1141 = t1168 - 0.1e1 / 0.2e1;
t1169 = 0.1e1 / t1198;
t1550 = t1141 * t1169;
t1174 = t1201 ^ 2;
t1142 = t1174 - 0.1e1 / 0.2e1;
t1175 = 0.1e1 / t1201;
t1549 = t1142 * t1175;
t1180 = t1204 ^ 2;
t1143 = t1180 - 0.1e1 / 0.2e1;
t1181 = 0.1e1 / t1204;
t1548 = t1143 * t1181;
t1147 = cos(qJ(1,3) + qJ(2,3));
t1170 = 0.1e1 / t1198 ^ 2;
t1547 = t1147 * t1170;
t1148 = cos(qJ(1,2) + qJ(2,2));
t1176 = 0.1e1 / t1201 ^ 2;
t1546 = t1148 * t1176;
t1149 = cos(qJ(1,1) + qJ(2,1));
t1182 = 0.1e1 / t1204 ^ 2;
t1545 = t1149 * t1182;
t1156 = t1189 ^ 2;
t1172 = 0.1e1 / t1168 ^ 2;
t1544 = t1156 * t1172;
t1465 = t1157 * t1199;
t1383 = t1172 * t1556;
t1160 = t1192 ^ 2;
t1178 = 0.1e1 / t1174 ^ 2;
t1543 = t1160 * t1178;
t1459 = t1161 * t1202;
t1380 = t1178 * t1555;
t1164 = t1195 ^ 2;
t1184 = 0.1e1 / t1180 ^ 2;
t1542 = t1164 * t1184;
t1453 = t1165 * t1205;
t1377 = t1184 * t1554;
t1211 = 1 / pkin(2);
t1541 = -2 * pkin(1);
t1540 = 2 * pkin(2);
t1212 = 1 / pkin(2) ^ 2;
t1539 = t1212 / 0.2e1;
t1538 = pkin(1) * t1191;
t1537 = pkin(1) * t1194;
t1536 = pkin(1) * t1197;
t1535 = pkin(1) * t1208;
t1534 = pkin(1) * t1209;
t1533 = pkin(2) * t1168;
t1532 = pkin(2) * t1174;
t1531 = pkin(2) * t1180;
t1530 = pkin(2) * t1208;
t1529 = pkin(2) * t1209;
t1528 = qJ(2,1) - qJ(3,1);
t1527 = qJ(2,1) + qJ(3,1);
t1526 = qJ(2,2) - qJ(3,2);
t1525 = qJ(2,2) + qJ(3,2);
t1524 = qJ(2,3) - qJ(3,3);
t1523 = qJ(2,3) + qJ(3,3);
t1135 = t1200 * t1190 + t1191 * t1199;
t1426 = pkin(1) * t1189 * t1199;
t1099 = -((-t1191 * t1190 + t1199 * t1200) * t1207 + t1246 * t1135) * t1533 + ((-t1189 * t1530 - t1191 * t1534) * t1153 + (-t1189 * t1529 + t1191 * t1535) * t1150 - pkin(1) * t1437) * t1198 - t1132 * t1426;
t1214 = 1 / pkin(1);
t1432 = t1211 * t1214;
t1362 = t1157 * t1432;
t1096 = t1099 * t1170 * t1362;
t1467 = t1157 * t1169;
t1102 = t1108 * t1214 * t1467;
t1093 = t1102 + t1096;
t1215 = 1 / pkin(1) ^ 2;
t1463 = t1158 * t1215;
t1361 = t1169 * t1463;
t1078 = t1093 * t1099 * t1361;
t1129 = t1132 ^ 2;
t1171 = t1169 / t1168;
t1294 = t1171 * t1362;
t1123 = t1129 * t1294;
t1486 = t1132 * t1211;
t1366 = t1199 * t1486;
t1443 = t1189 * t1190;
t1234 = ((-pkin(1) * t1093 * t1443 + t1132 * t1169) * t1198 + pkin(1) * t1169 * t1366) * t1132 * t1294;
t1354 = t1169 * t1443;
t1438 = t1198 * t1199;
t1449 = t1171 * t1211;
t1503 = t1093 * t1168;
t1327 = (pkin(2) * t1503 + (t1093 * t1438 - t1354 * t1486) * pkin(1)) * t1099 * t1449;
t1210 = pkin(2) ^ 2;
t1399 = (t1210 * t1503 + ((t1102 + t1096 / 0.2e1) * t1438 * t1540 + (t1108 * t1157 - t1132 * t1443) * t1169) * pkin(1)) * t1211 * t1170;
t1363 = t1169 * t1465;
t1081 = -t1198 * t1093 * pkin(2) - t1108 * t1363;
t1510 = t1081 * t1169;
t1054 = -t1234 + 0.2e1 * t1078 + 0.2e1 * t1123 + (-t1327 + (-t1399 - 0.2e1 * t1510) * t1108) * t1463;
t1522 = t1054 * t1169;
t1136 = t1203 * t1193 + t1194 * t1202;
t1425 = pkin(1) * t1192 * t1202;
t1100 = -((-t1194 * t1193 + t1202 * t1203) * t1207 + t1245 * t1136) * t1532 + ((-t1192 * t1530 - t1194 * t1534) * t1154 + (-t1192 * t1529 + t1194 * t1535) * t1151 - pkin(1) * t1435) * t1201 - t1133 * t1425;
t1359 = t1161 * t1432;
t1097 = t1100 * t1176 * t1359;
t1461 = t1161 * t1175;
t1103 = t1109 * t1214 * t1461;
t1094 = t1103 + t1097;
t1457 = t1162 * t1215;
t1358 = t1175 * t1457;
t1079 = t1094 * t1100 * t1358;
t1130 = t1133 ^ 2;
t1177 = t1175 / t1174;
t1293 = t1177 * t1359;
t1124 = t1130 * t1293;
t1485 = t1133 * t1211;
t1365 = t1202 * t1485;
t1441 = t1192 * t1193;
t1233 = ((-pkin(1) * t1094 * t1441 + t1133 * t1175) * t1201 + pkin(1) * t1175 * t1365) * t1133 * t1293;
t1353 = t1175 * t1441;
t1436 = t1201 * t1202;
t1447 = t1177 * t1211;
t1501 = t1094 * t1174;
t1326 = (pkin(2) * t1501 + (t1094 * t1436 - t1353 * t1485) * pkin(1)) * t1100 * t1447;
t1398 = (t1210 * t1501 + ((t1103 + t1097 / 0.2e1) * t1436 * t1540 + (t1109 * t1161 - t1133 * t1441) * t1175) * pkin(1)) * t1211 * t1176;
t1360 = t1175 * t1459;
t1082 = -t1201 * t1094 * pkin(2) - t1109 * t1360;
t1509 = t1082 * t1175;
t1055 = -t1233 + 0.2e1 * t1079 + 0.2e1 * t1124 + (-t1326 + (-t1398 - 0.2e1 * t1509) * t1109) * t1457;
t1521 = t1055 * t1175;
t1137 = t1206 * t1196 + t1197 * t1205;
t1424 = pkin(1) * t1195 * t1205;
t1101 = -((-t1197 * t1196 + t1205 * t1206) * t1207 + t1244 * t1137) * t1531 + ((-t1195 * t1530 - t1197 * t1534) * t1155 + (-t1195 * t1529 + t1197 * t1535) * t1152 - pkin(1) * t1433) * t1204 - t1134 * t1424;
t1356 = t1165 * t1432;
t1098 = t1101 * t1182 * t1356;
t1455 = t1165 * t1181;
t1104 = t1110 * t1214 * t1455;
t1095 = t1104 + t1098;
t1451 = t1166 * t1215;
t1355 = t1181 * t1451;
t1080 = t1095 * t1101 * t1355;
t1131 = t1134 ^ 2;
t1183 = t1181 / t1180;
t1292 = t1183 * t1356;
t1125 = t1131 * t1292;
t1484 = t1134 * t1211;
t1364 = t1205 * t1484;
t1439 = t1195 * t1196;
t1232 = ((-pkin(1) * t1095 * t1439 + t1134 * t1181) * t1204 + pkin(1) * t1181 * t1364) * t1134 * t1292;
t1352 = t1181 * t1439;
t1434 = t1204 * t1205;
t1445 = t1183 * t1211;
t1499 = t1095 * t1180;
t1325 = (pkin(2) * t1499 + (t1095 * t1434 - t1352 * t1484) * pkin(1)) * t1101 * t1445;
t1397 = (t1210 * t1499 + ((t1104 + t1098 / 0.2e1) * t1434 * t1540 + (t1110 * t1165 - t1134 * t1439) * t1181) * pkin(1)) * t1211 * t1182;
t1357 = t1181 * t1453;
t1083 = -t1204 * t1095 * pkin(2) - t1110 * t1357;
t1508 = t1083 * t1181;
t1056 = -t1232 + 0.2e1 * t1080 + 0.2e1 * t1125 + (-t1325 + (-t1397 - 0.2e1 * t1508) * t1110) * t1451;
t1520 = t1056 * t1181;
t1431 = t1078 + t1123;
t1057 = -t1234 + (-t1327 + (-t1399 - t1510) * t1108) * t1463 + t1431;
t1519 = t1057 * t1189;
t1430 = t1079 + t1124;
t1058 = -t1233 + (-t1326 + (-t1398 - t1509) * t1109) * t1457 + t1430;
t1518 = t1058 * t1192;
t1429 = t1080 + t1125;
t1059 = -t1232 + (-t1325 + (-t1397 - t1508) * t1110) * t1451 + t1429;
t1517 = t1059 * t1195;
t1060 = -t1081 * t1108 * t1361 + t1431;
t1516 = t1060 * t1170;
t1515 = t1060 * t1190;
t1061 = -t1082 * t1109 * t1358 + t1430;
t1514 = t1061 * t1176;
t1513 = t1061 * t1193;
t1062 = -t1083 * t1110 * t1355 + t1429;
t1512 = t1062 * t1182;
t1511 = t1062 * t1196;
t1507 = (t1096 + 0.2e1 * t1102) * t1099;
t1506 = (t1097 + 0.2e1 * t1103) * t1100;
t1505 = (t1098 + 0.2e1 * t1104) * t1101;
t1504 = t1093 * t1132;
t1502 = t1094 * t1133;
t1500 = t1095 * t1134;
t1495 = (t1200 * t1541 + (-cos(qJ(1,3) + t1524) - cos(qJ(1,3) + t1523)) * pkin(2)) / (sin(t1523) + sin(t1524));
t1494 = (t1203 * t1541 + (-cos(qJ(1,2) + t1526) - cos(qJ(1,2) + t1525)) * pkin(2)) / (sin(t1525) + sin(t1526));
t1493 = (t1206 * t1541 + (-cos(qJ(1,1) + t1528) - cos(qJ(1,1) + t1527)) * pkin(2)) / (sin(t1527) + sin(t1528));
t1492 = t1129 * t1157;
t1491 = t1129 * t1212;
t1490 = t1130 * t1161;
t1489 = t1130 * t1212;
t1488 = t1131 * t1165;
t1487 = t1131 * t1212;
t1483 = t1135 * t1198;
t1482 = t1136 * t1201;
t1481 = t1137 * t1204;
t1480 = t1147 * t1054;
t1479 = t1147 * t1157;
t1478 = t1148 * t1055;
t1477 = t1148 * t1161;
t1476 = t1149 * t1056;
t1475 = t1149 * t1165;
t1474 = t1150 * t1189;
t1473 = t1151 * t1192;
t1472 = t1152 * t1195;
t1471 = t1153 * t1189;
t1470 = t1154 * t1192;
t1469 = t1155 * t1195;
t1468 = t1156 * t1171;
t1466 = t1157 * t1170;
t1464 = t1158 * t1199;
t1462 = t1160 * t1177;
t1460 = t1161 * t1176;
t1458 = t1162 * t1202;
t1456 = t1164 * t1183;
t1454 = t1165 * t1182;
t1452 = t1166 * t1205;
t1450 = t1169 * t1189;
t1448 = t1175 * t1192;
t1446 = t1181 * t1195;
t1428 = 2 * t1212;
t1427 = 4 * t1212;
t1423 = t1135 * t1533;
t1422 = t1136 * t1532;
t1421 = t1137 * t1531;
t1420 = t1057 * t1495;
t1419 = t1057 * t1479;
t1418 = t1057 * t1156 * t1170;
t1417 = t1057 * t1466;
t1416 = t1057 * t1450;
t1415 = t1198 * t1519;
t1414 = t1058 * t1494;
t1413 = t1058 * t1477;
t1412 = t1058 * t1160 * t1176;
t1411 = t1058 * t1460;
t1410 = t1058 * t1448;
t1409 = t1201 * t1518;
t1408 = t1059 * t1493;
t1407 = t1059 * t1475;
t1406 = t1059 * t1164 * t1182;
t1405 = t1059 * t1454;
t1404 = t1059 * t1446;
t1403 = t1204 * t1517;
t1402 = t1060 * t1495;
t1401 = t1061 * t1494;
t1400 = t1062 * t1493;
t1087 = t1093 ^ 2;
t1396 = t1087 * (-0.2e1 * t1168 + 0.1e1) * t1169;
t1088 = t1094 ^ 2;
t1395 = t1088 * (-0.2e1 * t1174 + 0.1e1) * t1175;
t1089 = t1095 ^ 2;
t1394 = t1089 * (-0.2e1 * t1180 + 0.1e1) * t1181;
t1393 = t1157 * t1507;
t1392 = t1161 * t1506;
t1391 = t1165 * t1505;
t1390 = t1157 * t1504;
t1389 = t1093 * t1444;
t1388 = t1161 * t1502;
t1387 = t1094 * t1442;
t1386 = t1165 * t1500;
t1385 = t1095 * t1440;
t1384 = t1171 * t1556;
t1382 = t1105 * t1464;
t1381 = t1177 * t1555;
t1379 = t1106 * t1458;
t1378 = t1183 * t1554;
t1376 = t1107 * t1452;
t1117 = -t1150 * t1483 + t1471;
t1375 = t1117 * t1467;
t1118 = t1153 * t1483 + t1474;
t1374 = t1118 * t1467;
t1119 = -t1151 * t1482 + t1470;
t1373 = t1119 * t1461;
t1120 = t1154 * t1482 + t1473;
t1372 = t1120 * t1461;
t1121 = -t1152 * t1481 + t1469;
t1371 = t1121 * t1455;
t1122 = t1155 * t1481 + t1472;
t1370 = t1122 * t1455;
t1369 = t1129 * t1172 * t1189;
t1368 = t1130 * t1178 * t1192;
t1367 = t1131 * t1184 * t1195;
t1051 = -t1234 / 0.2e1 + (-t1327 / 0.2e1 + (-t1510 - t1399 / 0.2e1) * t1108) * t1463 + t1431;
t1288 = t1170 * t1491 / 0.2e1;
t1075 = t1288 + (t1172 * t1099 * t1539 + t1108 * t1449) * t1099 * t1463;
t1291 = t1093 * t1366;
t1351 = t1157 * (0.2e1 * t1051 * t1438 - 0.2e1 * t1291 * t1450 + (-0.2e1 * t1075 * t1198 - t1468 * t1491) * t1190);
t1052 = -t1233 / 0.2e1 + (-t1326 / 0.2e1 + (-t1509 - t1398 / 0.2e1) * t1109) * t1457 + t1430;
t1287 = t1176 * t1489 / 0.2e1;
t1076 = t1287 + (t1178 * t1100 * t1539 + t1109 * t1447) * t1100 * t1457;
t1290 = t1094 * t1365;
t1350 = t1161 * (0.2e1 * t1052 * t1436 - 0.2e1 * t1290 * t1448 + (-0.2e1 * t1076 * t1201 - t1462 * t1489) * t1193);
t1053 = -t1232 / 0.2e1 + (-t1325 / 0.2e1 + (-t1508 - t1397 / 0.2e1) * t1110) * t1451 + t1429;
t1286 = t1182 * t1487 / 0.2e1;
t1077 = t1286 + (t1184 * t1101 * t1539 + t1110 * t1445) * t1101 * t1451;
t1289 = t1095 * t1364;
t1349 = t1165 * (0.2e1 * t1053 * t1434 - 0.2e1 * t1289 * t1446 + (-0.2e1 * t1077 * t1204 - t1456 * t1487) * t1196);
t1348 = t1519 * t1553;
t1347 = 0.2e1 * t1416;
t1346 = t1518 * t1552;
t1345 = 0.2e1 * t1410;
t1344 = t1517 * t1551;
t1343 = 0.2e1 * t1404;
t1342 = t1054 * t1363;
t1341 = t1055 * t1360;
t1340 = t1056 * t1357;
t1339 = t1199 * t1402;
t1338 = t1060 * t1363;
t1337 = t1465 * t1516;
t1336 = t1060 * t1354;
t1335 = t1202 * t1401;
t1334 = t1061 * t1360;
t1333 = t1459 * t1514;
t1332 = t1061 * t1353;
t1331 = t1205 * t1400;
t1330 = t1062 * t1357;
t1329 = t1453 * t1512;
t1328 = t1062 * t1352;
t1324 = t1171 * t1393;
t1323 = t1464 * t1507;
t1322 = t1177 * t1392;
t1321 = t1458 * t1506;
t1320 = t1183 * t1391;
t1319 = t1452 * t1505;
t1318 = t1495 * t1504;
t1317 = t1494 * t1502;
t1316 = t1493 * t1500;
t1315 = t1105 * t1157 * t1495;
t1314 = t1170 * t1382;
t1313 = t1383 * t1465;
t1312 = t1106 * t1161 * t1494;
t1311 = t1176 * t1379;
t1310 = t1380 * t1459;
t1309 = t1107 * t1165 * t1493;
t1308 = t1182 * t1376;
t1307 = t1377 * t1453;
t1111 = t1150 * t1423 + (-pkin(2) * t1471 + t1150 * t1538) * t1198 - t1153 * t1426;
t1306 = t1111 * t1383;
t1112 = -t1153 * t1423 + (-pkin(2) * t1474 - t1153 * t1538) * t1198 - t1150 * t1426;
t1305 = t1112 * t1383;
t1113 = t1151 * t1422 + (-pkin(2) * t1470 + t1151 * t1537) * t1201 - t1154 * t1425;
t1304 = t1113 * t1380;
t1114 = -t1154 * t1422 + (-pkin(2) * t1473 - t1154 * t1537) * t1201 - t1151 * t1425;
t1303 = t1114 * t1380;
t1115 = t1152 * t1421 + (-pkin(2) * t1469 + t1152 * t1536) * t1204 - t1155 * t1424;
t1302 = t1115 * t1377;
t1116 = -t1155 * t1421 + (-pkin(2) * t1472 - t1155 * t1536) * t1204 - t1152 * t1424;
t1301 = t1116 * t1377;
t1300 = t1057 * t1375;
t1299 = t1057 * t1374;
t1298 = t1058 * t1373;
t1297 = t1058 * t1372;
t1296 = t1059 * t1371;
t1295 = t1059 * t1370;
t1285 = t1169 * t1351;
t1284 = t1175 * t1350;
t1283 = t1181 * t1349;
t1282 = 0.4e1 * t1141 * t1170 * t1504;
t1281 = 0.2e1 * t1147 * t1390;
t1280 = 0.2e1 * t1169 * t1389;
t1279 = 0.4e1 * t1142 * t1176 * t1502;
t1278 = 0.2e1 * t1148 * t1388;
t1277 = 0.2e1 * t1175 * t1387;
t1276 = 0.4e1 * t1143 * t1182 * t1500;
t1275 = 0.2e1 * t1149 * t1386;
t1274 = 0.2e1 * t1181 * t1385;
t1273 = (-(t1051 * t1199 + t1190 * t1288) * t1189 + t1075 * t1443 - t1291) * t1553;
t1272 = (-(t1052 * t1202 + t1193 * t1287) * t1192 + t1076 * t1441 - t1290) * t1552;
t1271 = (-(t1053 * t1205 + t1196 * t1286) * t1195 + t1077 * t1439 - t1289) * t1551;
t1270 = t1129 * (t1169 + t1468);
t1269 = t1130 * (t1175 + t1462);
t1268 = t1131 * (t1181 + t1456);
t1267 = t1171 * t1323;
t1266 = t1177 * t1321;
t1265 = t1183 * t1319;
t1264 = t1141 * t1171 * t1390;
t1263 = t1389 * t1466;
t1262 = t1142 * t1177 * t1388;
t1261 = t1387 * t1460;
t1260 = t1143 * t1183 * t1386;
t1259 = t1385 * t1454;
t1258 = t1170 * t1315;
t1257 = t1171 * t1189 * t1382;
t1256 = t1176 * t1312;
t1255 = t1177 * t1192 * t1379;
t1254 = t1182 * t1309;
t1253 = t1183 * t1195 * t1376;
t1252 = t1111 * t1337;
t1251 = t1112 * t1337;
t1250 = t1113 * t1333;
t1249 = t1114 * t1333;
t1248 = t1115 * t1329;
t1247 = t1116 * t1329;
t1243 = t1169 * t1273;
t1242 = t1175 * t1272;
t1241 = t1181 * t1271;
t1240 = (t1170 + t1544) * t1492;
t1239 = (t1169 * t1544 + t1171) * t1492;
t1238 = (t1176 + t1543) * t1490;
t1237 = (t1175 * t1543 + t1177) * t1490;
t1236 = (t1182 + t1542) * t1488;
t1235 = (t1181 * t1542 + t1183) * t1488;
t1213 = t1211 / t1210;
t1 = [(t1060 * t1374 + t1061 * t1372 + t1062 * t1370) * t1214, 0, 0, (t1299 + t1297 + t1295 + (t1112 * t1417 + t1114 * t1411 + t1116 * t1405) * t1211) * t1214, t1118 * t1342 + t1120 * t1341 + t1122 * t1340 + (t1251 + t1249 + t1247 + (t1301 + t1303 + t1305) * t1215 + (-t1118 * t1324 - t1120 * t1322 - t1122 * t1320) * t1214) * t1211, -t1118 * t1522 - t1120 * t1521 - t1122 * t1520 + (-t1112 * t1516 - t1114 * t1514 - t1116 * t1512 + (t1112 * t1313 + t1114 * t1310 + t1116 * t1307) * t1215 + (-t1118 * t1267 - t1120 * t1266 - t1122 * t1265) * t1214) * t1211, (-t1087 * t1474 - t1088 * t1473 - t1089 * t1472) * t1211 + (t1156 * t1299 + t1160 * t1297 + t1164 * t1295 + (t1112 * t1263 + t1114 * t1261 + t1116 * t1259) * t1428 + ((t1116 * t1406 + t1122 * t1274) * t1165 + (t1114 * t1412 + t1120 * t1277) * t1161 + (t1112 * t1418 + t1118 * t1280) * t1157) * t1211) * t1214, (t1150 * t1396 + t1151 * t1395 + t1152 * t1394) * t1211 + (t1118 * t1348 + t1120 * t1346 + t1122 * t1344 + (t1112 * t1264 + t1114 * t1262 + t1116 * t1260) * t1427 + ((t1116 * t1343 + t1122 * t1276) * t1165 + (t1114 * t1345 + t1120 * t1279) * t1161 + (t1112 * t1347 + t1118 * t1282) * t1157) * t1211) * t1214, (t1150 * t1416 + t1151 * t1410 + t1152 * t1404) * t1211 + ((t1112 * t1239 + t1114 * t1237 + t1116 * t1235) * t1213 + (t1118 * t1240 + t1120 * t1238 + t1122 * t1236) * t1212) * t1214, (t1057 * t1150 + t1058 * t1151 + t1059 * t1152) * t1211, (t1150 * t1369 + t1151 * t1368 + t1152 * t1367) * t1213, t1122 * t1283 + t1120 * t1284 + t1118 * t1285 + (t1112 * t1338 + t1114 * t1334 + t1116 * t1330 + (t1112 * t1384 + t1114 * t1381 + t1116 * t1378) * t1215 + (t1150 * t1257 + t1151 * t1255 + t1152 * t1253) * t1214 + (-t1150 * t1336 - t1151 * t1332 - t1152 * t1328) * pkin(1)) * t1211, t1122 * t1241 + t1120 * t1242 + t1118 * t1243 + (-t1189 * t1251 - t1192 * t1249 - t1195 * t1247 + (-t1189 * t1305 - t1192 * t1303 - t1195 * t1301) * t1215 + (t1150 * t1314 + t1151 * t1311 + t1152 * t1308) * t1214 + (-t1150 * t1515 - t1151 * t1513 - t1152 * t1511) * pkin(1)) * t1211, 0; (t1060 * t1375 + t1061 * t1373 + t1062 * t1371) * t1214, 0, 0, (t1300 + t1298 + t1296 + (t1111 * t1417 + t1113 * t1411 + t1115 * t1405) * t1211) * t1214, t1117 * t1342 + t1119 * t1341 + t1121 * t1340 + (t1252 + t1250 + t1248 + (t1302 + t1304 + t1306) * t1215 + (-t1117 * t1324 - t1119 * t1322 - t1121 * t1320) * t1214) * t1211, -t1117 * t1522 - t1119 * t1521 - t1121 * t1520 + (-t1111 * t1516 - t1113 * t1514 - t1115 * t1512 + (t1111 * t1313 + t1113 * t1310 + t1115 * t1307) * t1215 + (-t1117 * t1267 - t1119 * t1266 - t1121 * t1265) * t1214) * t1211, (-t1087 * t1471 - t1088 * t1470 - t1089 * t1469) * t1211 + (t1156 * t1300 + t1160 * t1298 + t1164 * t1296 + (t1111 * t1263 + t1113 * t1261 + t1115 * t1259) * t1428 + ((t1115 * t1406 + t1121 * t1274) * t1165 + (t1113 * t1412 + t1119 * t1277) * t1161 + (t1111 * t1418 + t1117 * t1280) * t1157) * t1211) * t1214, (t1153 * t1396 + t1154 * t1395 + t1155 * t1394) * t1211 + (t1117 * t1348 + t1119 * t1346 + t1121 * t1344 + (t1111 * t1264 + t1113 * t1262 + t1115 * t1260) * t1427 + ((t1115 * t1343 + t1121 * t1276) * t1165 + (t1113 * t1345 + t1119 * t1279) * t1161 + (t1111 * t1347 + t1117 * t1282) * t1157) * t1211) * t1214, (t1153 * t1416 + t1154 * t1410 + t1155 * t1404) * t1211 + ((t1111 * t1239 + t1113 * t1237 + t1115 * t1235) * t1213 + (t1117 * t1240 + t1119 * t1238 + t1121 * t1236) * t1212) * t1214, (t1057 * t1153 + t1058 * t1154 + t1059 * t1155) * t1211, (t1153 * t1369 + t1154 * t1368 + t1155 * t1367) * t1213, t1121 * t1283 + t1119 * t1284 + t1117 * t1285 + (t1111 * t1338 + t1113 * t1334 + t1115 * t1330 + (t1111 * t1384 + t1113 * t1381 + t1115 * t1378) * t1215 + (t1153 * t1257 + t1154 * t1255 + t1155 * t1253) * t1214 + (-t1153 * t1336 - t1154 * t1332 - t1155 * t1328) * pkin(1)) * t1211, t1121 * t1241 + t1119 * t1242 + t1117 * t1243 + (-t1189 * t1252 - t1192 * t1250 - t1195 * t1248 + (-t1189 * t1306 - t1192 * t1304 - t1195 * t1302) * t1215 + (t1153 * t1314 + t1154 * t1311 + t1155 * t1308) * t1214 + (-t1153 * t1515 - t1154 * t1513 - t1155 * t1511) * pkin(1)) * t1211, 0; (t1060 * t1479 + t1061 * t1477 + t1062 * t1475) * t1214, 0, 0, (t1419 + t1413 + t1407 + (t1408 + t1414 + t1420) * t1211) * t1214, t1465 * t1480 + t1459 * t1478 + t1453 * t1476 + (t1339 + t1335 + t1331 + (t1254 + t1256 + t1258) * t1215 + (-t1391 * t1545 - t1392 * t1546 - t1393 * t1547) * t1214) * t1211, -t1480 - t1478 - t1476 + (-t1190 * t1402 - t1193 * t1401 - t1196 * t1400 + (t1308 * t1493 + t1311 * t1494 + t1314 * t1495) * t1215 + (-t1319 * t1545 - t1321 * t1546 - t1323 * t1547) * t1214) * t1211, (t1156 * t1419 + t1160 * t1413 + t1164 * t1407 + (t1189 * t1318 + t1192 * t1317 + t1195 * t1316) * t1428 + (t1156 * t1420 + t1160 * t1414 + t1164 * t1408 + t1189 * t1281 + t1192 * t1278 + t1195 * t1275) * t1211) * t1214, 0.2e1 * (t1415 * t1479 + t1409 * t1477 + t1403 * t1475 + (t1316 * t1548 + t1317 * t1549 + t1318 * t1550) * t1428 + (t1275 * t1548 + t1278 * t1549 + t1281 * t1550 + t1403 * t1493 + t1409 * t1494 + t1415 * t1495) * t1211) * t1214, ((t1268 * t1493 + t1269 * t1494 + t1270 * t1495) * t1213 + (t1268 * t1475 + t1269 * t1477 + t1270 * t1479) * t1212) * t1214, 0, 0, t1149 * t1349 + t1148 * t1350 + t1147 * t1351 + (t1198 * t1339 + t1201 * t1335 + t1204 * t1331 + (t1169 * t1315 + t1175 * t1312 + t1181 * t1309) * t1215) * t1211, t1149 * t1271 + t1148 * t1272 + t1147 * t1273 + (-t1189 * t1339 - t1192 * t1335 - t1195 * t1331 + (-t1189 * t1258 - t1192 * t1256 - t1195 * t1254) * t1215) * t1211, 0;];
tau_reg  = t1;
