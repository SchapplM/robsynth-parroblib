% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x14]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:10
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR2G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G2A0_inertia_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:09:07
% EndTime: 2020-03-09 21:09:16
% DurationCPUTime: 9.25s
% Computational Cost: add. (5020->551), mult. (9987->1135), div. (3573->22), fcn. (12339->39), ass. (0->457)
t659 = cos(qJ(1,3) + qJ(2,3));
t701 = cos(qJ(3,3));
t1044 = t659 * t701;
t660 = cos(qJ(1,2) + qJ(2,2));
t704 = cos(qJ(3,2));
t1043 = t660 * t704;
t661 = cos(qJ(1,1) + qJ(2,1));
t707 = cos(qJ(3,1));
t1042 = t661 * t707;
t1041 = -2 * pkin(1);
t678 = 0.1e1 / t701;
t682 = 0.1e1 / t704;
t686 = 0.1e1 / t707;
t712 = 1 / pkin(1);
t1040 = 2 * t712;
t694 = sin(qJ(1,3));
t1039 = pkin(1) * t694;
t697 = sin(qJ(1,2));
t1038 = pkin(1) * t697;
t700 = sin(qJ(1,1));
t1037 = pkin(1) * t700;
t689 = legFrame(3,2);
t665 = cos(t689);
t692 = sin(qJ(3,3));
t1010 = t665 * t692;
t693 = sin(qJ(2,3));
t702 = cos(qJ(2,3));
t703 = cos(qJ(1,3));
t650 = t693 * t703 + t694 * t702;
t1027 = t650 * t701;
t662 = sin(t689);
t641 = -t662 * t1027 + t1010;
t1036 = t641 * t678;
t1019 = t662 * t692;
t642 = t665 * t1027 + t1019;
t1035 = t642 * t678;
t690 = legFrame(2,2);
t666 = cos(t690);
t695 = sin(qJ(3,2));
t1007 = t666 * t695;
t696 = sin(qJ(2,2));
t705 = cos(qJ(2,2));
t706 = cos(qJ(1,2));
t651 = t696 * t706 + t697 * t705;
t1026 = t651 * t704;
t663 = sin(t690);
t643 = -t663 * t1026 + t1007;
t1034 = t643 * t682;
t1016 = t663 * t695;
t644 = t666 * t1026 + t1016;
t1033 = t644 * t682;
t691 = legFrame(1,2);
t667 = cos(t691);
t698 = sin(qJ(3,1));
t1004 = t667 * t698;
t699 = sin(qJ(2,1));
t708 = cos(qJ(2,1));
t709 = cos(qJ(1,1));
t652 = t699 * t709 + t700 * t708;
t1025 = t652 * t707;
t664 = sin(t691);
t645 = -t664 * t1025 + t1004;
t1032 = t645 * t686;
t1013 = t664 * t698;
t646 = t667 * t1025 + t1013;
t1031 = t646 * t686;
t960 = qJ(2,3) + qJ(3,3);
t961 = qJ(2,3) - qJ(3,3);
t1030 = (t703 * t1041 + (-cos(qJ(1,3) + t961) - cos(qJ(1,3) + t960)) * pkin(2)) / (sin(t960) + sin(t961));
t962 = qJ(2,2) + qJ(3,2);
t963 = qJ(2,2) - qJ(3,2);
t1029 = (t706 * t1041 + (-cos(qJ(1,2) + t963) - cos(qJ(1,2) + t962)) * pkin(2)) / (sin(t962) + sin(t963));
t964 = qJ(2,1) + qJ(3,1);
t965 = qJ(2,1) - qJ(3,1);
t1028 = (t709 * t1041 + (-cos(qJ(1,1) + t965) - cos(qJ(1,1) + t964)) * pkin(2)) / (sin(t964) + sin(t965));
t669 = 0.1e1 / t693;
t1024 = t659 * t669;
t672 = 0.1e1 / t696;
t1023 = t660 * t672;
t675 = 0.1e1 / t699;
t1022 = t661 * t675;
t1021 = t662 * t659;
t1020 = t662 * t678;
t1018 = t663 * t660;
t1017 = t663 * t682;
t1015 = t664 * t661;
t1014 = t664 * t686;
t1012 = t665 * t659;
t1011 = t665 * t678;
t1009 = t666 * t660;
t1008 = t666 * t682;
t1006 = t667 * t661;
t1005 = t667 * t686;
t1003 = t669 * t678;
t679 = 0.1e1 / t701 ^ 2;
t1002 = t669 * t679;
t677 = t701 ^ 2;
t680 = t678 / t677;
t1001 = t669 * t680;
t1000 = t669 * t692;
t999 = t669 * t702;
t998 = t669 * t712;
t670 = 0.1e1 / t693 ^ 2;
t997 = t670 * t679;
t996 = t670 * t702;
t995 = t672 * t682;
t683 = 0.1e1 / t704 ^ 2;
t994 = t672 * t683;
t681 = t704 ^ 2;
t684 = t682 / t681;
t993 = t672 * t684;
t992 = t672 * t695;
t991 = t672 * t705;
t990 = t672 * t712;
t673 = 0.1e1 / t696 ^ 2;
t989 = t673 * t683;
t988 = t673 * t705;
t987 = t675 * t686;
t687 = 0.1e1 / t707 ^ 2;
t986 = t675 * t687;
t685 = t707 ^ 2;
t688 = t686 / t685;
t985 = t675 * t688;
t984 = t675 * t698;
t983 = t675 * t708;
t982 = t675 * t712;
t676 = 0.1e1 / t699 ^ 2;
t981 = t676 * t687;
t980 = t676 * t708;
t979 = t678 * t692;
t978 = t679 * t692;
t977 = t682 * t695;
t976 = t683 * t695;
t975 = t686 * t698;
t974 = t687 * t698;
t973 = t692 * t702;
t710 = 0.1e1 / pkin(2);
t972 = t693 * t710;
t971 = t695 * t705;
t970 = t696 * t710;
t969 = t698 * t708;
t968 = t699 * t710;
t967 = t710 * t712;
t711 = 0.1e1 / pkin(2) ^ 2;
t966 = t711 * t712;
t959 = -0.2e1 * t1024;
t958 = -0.2e1 * t1023;
t957 = -0.2e1 * t1022;
t956 = -0.2e1 * t701 * t702;
t955 = -0.2e1 * t704 * t705;
t954 = -0.2e1 * t707 * t708;
t953 = pkin(1) * t973;
t952 = pkin(1) * t971;
t951 = pkin(1) * t969;
t950 = pkin(2) * t650 * t677;
t949 = pkin(2) * t651 * t681;
t948 = pkin(2) * t652 * t685;
t616 = t662 * t950 + (-pkin(2) * t1010 + t662 * t1039) * t701 - t665 * t953;
t947 = t616 * t1002;
t617 = -t665 * t950 + (-pkin(2) * t1019 - t665 * t1039) * t701 - t662 * t953;
t946 = t617 * t1002;
t618 = t663 * t949 + (-pkin(2) * t1007 + t663 * t1038) * t704 - t666 * t952;
t945 = t618 * t994;
t619 = -t666 * t949 + (-pkin(2) * t1016 - t666 * t1038) * t704 - t663 * t952;
t944 = t619 * t994;
t620 = t664 * t948 + (-pkin(2) * t1004 + t664 * t1037) * t707 - t667 * t951;
t943 = t620 * t986;
t621 = -t667 * t948 + (-pkin(2) * t1013 - t667 * t1037) * t707 - t664 * t951;
t942 = t621 * t986;
t638 = t967 * t1030;
t656 = t659 * t998;
t941 = (t656 + t638 / 0.2e1) * t999;
t639 = t967 * t1029;
t657 = t660 * t990;
t940 = (t657 + t639 / 0.2e1) * t991;
t640 = t967 * t1028;
t658 = t661 * t982;
t939 = (t658 + t640 / 0.2e1) * t983;
t628 = t656 + t638;
t938 = t628 * t1002;
t629 = t657 + t639;
t937 = t629 * t994;
t630 = t658 + t640;
t936 = t630 * t986;
t935 = t641 * t1003;
t934 = t641 * t1001;
t933 = t641 * t1000;
t932 = t642 * t1003;
t931 = t642 * t1001;
t930 = t642 * t1000;
t929 = t643 * t995;
t928 = t643 * t993;
t927 = t643 * t992;
t926 = t644 * t995;
t925 = t644 * t993;
t924 = t644 * t992;
t923 = t645 * t987;
t922 = t645 * t985;
t921 = t645 * t984;
t920 = t646 * t987;
t919 = t646 * t985;
t918 = t646 * t984;
t668 = t692 ^ 2;
t917 = t668 * t1030;
t916 = t678 * t1030;
t915 = t692 * t1030;
t671 = t695 ^ 2;
t914 = t671 * t1029;
t913 = t682 * t1029;
t912 = t695 * t1029;
t674 = t698 ^ 2;
t911 = t674 * t1028;
t910 = t686 * t1028;
t909 = t698 * t1028;
t908 = t668 * t1024;
t907 = t659 * t1002;
t906 = t659 * t999;
t905 = t659 * t670 * t678;
t904 = t671 * t1023;
t903 = t660 * t994;
t902 = t660 * t991;
t901 = t660 * t673 * t682;
t900 = t674 * t1022;
t899 = t661 * t986;
t898 = t661 * t983;
t897 = t661 * t676 * t686;
t896 = t662 * t1003;
t895 = t662 * t1002;
t894 = t662 * t979;
t893 = t662 * t978;
t892 = t663 * t995;
t891 = t663 * t994;
t890 = t663 * t977;
t889 = t663 * t976;
t888 = t664 * t987;
t887 = t664 * t986;
t886 = t664 * t975;
t885 = t664 * t974;
t884 = t665 * t1003;
t883 = t665 * t1002;
t882 = t665 * t979;
t881 = t665 * t978;
t880 = t666 * t995;
t879 = t666 * t994;
t878 = t666 * t977;
t877 = t666 * t976;
t876 = t667 * t987;
t875 = t667 * t986;
t874 = t667 * t975;
t873 = t667 * t974;
t872 = t668 * t1003;
t871 = t668 * t1002;
t870 = t669 * t979;
t869 = t678 * t999;
t868 = t678 * t998;
t867 = t680 * t1000;
t866 = t679 * t996;
t865 = t680 * t996;
t864 = t671 * t995;
t863 = t671 * t994;
t862 = t672 * t977;
t861 = t682 * t991;
t860 = t682 * t990;
t859 = t684 * t992;
t858 = t683 * t988;
t857 = t684 * t988;
t856 = t674 * t987;
t855 = t674 * t986;
t854 = t675 * t975;
t853 = t686 * t983;
t852 = t686 * t982;
t851 = t688 * t984;
t850 = t687 * t980;
t849 = t688 * t980;
t848 = t972 / 0.2e1;
t847 = t970 / 0.2e1;
t846 = t968 / 0.2e1;
t845 = 0.2e1 * t941;
t844 = 0.2e1 * t940;
t843 = 0.2e1 * t939;
t842 = -0.2e1 * t935;
t841 = -0.2e1 * t932;
t840 = -0.2e1 * t929;
t839 = -0.2e1 * t926;
t838 = -0.2e1 * t923;
t837 = -0.2e1 * t920;
t836 = t616 * t871;
t835 = t616 * t870;
t834 = t617 * t871;
t833 = t617 * t870;
t832 = t618 * t863;
t831 = t618 * t862;
t830 = t619 * t863;
t829 = t619 * t862;
t828 = t620 * t855;
t827 = t620 * t854;
t826 = t621 * t855;
t825 = t621 * t854;
t824 = t628 * t871;
t823 = t628 * t870;
t822 = t629 * t863;
t821 = t629 * t862;
t820 = t630 * t855;
t819 = t630 * t854;
t818 = t641 * t872;
t817 = t641 * t869;
t816 = t641 * t866;
t815 = t641 * t865;
t814 = t642 * t872;
t813 = t642 * t869;
t812 = t642 * t866;
t811 = t642 * t865;
t810 = t643 * t864;
t809 = t643 * t861;
t808 = t643 * t858;
t807 = t643 * t857;
t806 = t644 * t864;
t805 = t644 * t861;
t804 = t644 * t858;
t803 = t644 * t857;
t802 = t645 * t856;
t801 = t645 * t853;
t800 = t645 * t850;
t799 = t645 * t849;
t798 = t646 * t856;
t797 = t646 * t853;
t796 = t646 * t850;
t795 = t646 * t849;
t794 = t999 * t1030;
t793 = t678 * t915;
t792 = t701 * t915;
t791 = t991 * t1029;
t790 = t682 * t912;
t789 = t704 * t912;
t788 = t983 * t1028;
t787 = t686 * t909;
t786 = t707 * t909;
t785 = t1000 * t1044;
t784 = t702 * t905;
t783 = t659 * t866;
t782 = t992 * t1043;
t781 = t705 * t901;
t780 = t660 * t858;
t779 = t984 * t1042;
t778 = t708 * t897;
t777 = t661 * t850;
t776 = t662 * t867;
t775 = t659 * t894;
t774 = t641 * t893;
t773 = t642 * t893;
t772 = t663 * t859;
t771 = t660 * t890;
t770 = t643 * t889;
t769 = t644 * t889;
t768 = t664 * t851;
t767 = t661 * t886;
t766 = t645 * t885;
t765 = t646 * t885;
t764 = t665 * t867;
t763 = t659 * t882;
t762 = t641 * t881;
t761 = t642 * t881;
t760 = t666 * t859;
t759 = t660 * t878;
t758 = t643 * t877;
t757 = t644 * t877;
t756 = t667 * t851;
t755 = t661 * t874;
t754 = t645 * t873;
t753 = t646 * t873;
t752 = t967 * t1002;
t751 = t692 * t865;
t750 = t967 * t994;
t749 = t695 * t857;
t748 = t967 * t986;
t747 = t698 * t849;
t746 = t972 * t979;
t745 = t970 * t977;
t744 = t968 * t975;
t743 = -0.2e1 * t692 * t941;
t742 = -0.2e1 * t695 * t940;
t741 = -0.2e1 * t698 * t939;
t740 = t641 * t751;
t739 = t642 * t751;
t738 = t643 * t749;
t737 = t644 * t749;
t736 = t645 * t747;
t735 = t646 * t747;
t734 = t659 * t794;
t733 = t678 * t794;
t732 = t692 * t794;
t731 = t660 * t791;
t730 = t682 * t791;
t729 = t695 * t791;
t728 = t661 * t788;
t727 = t686 * t788;
t726 = t698 * t788;
t725 = t692 * t783;
t724 = t695 * t780;
t723 = t698 * t777;
t722 = t678 * t743;
t721 = t682 * t742;
t720 = t686 * t741;
t719 = t678 * t732;
t718 = t682 * t729;
t717 = t686 * t726;
t713 = 1 / pkin(1) ^ 2;
t637 = t646 * t852;
t636 = t645 * t852;
t635 = t644 * t860;
t634 = t643 * t860;
t633 = t642 * t868;
t632 = t641 * t868;
t631 = (t662 * t665 * t679 + t663 * t666 * t683 + t664 * t667 * t687) * t711;
t627 = t640 + 0.2e1 * t658;
t626 = t639 + 0.2e1 * t657;
t625 = t638 + 0.2e1 * t656;
t615 = t621 * t748;
t614 = t620 * t748;
t613 = t619 * t750;
t612 = t618 * t750;
t611 = t617 * t752;
t610 = t616 * t752;
t609 = t637 + t615;
t608 = t636 + t614;
t607 = t635 + t613;
t606 = t634 + t612;
t605 = t633 + t611;
t604 = t632 + t610;
t603 = t615 + 0.2e1 * t637;
t602 = t614 + 0.2e1 * t636;
t601 = t613 + 0.2e1 * t635;
t600 = t612 + 0.2e1 * t634;
t599 = t611 + 0.2e1 * t633;
t598 = t610 + 0.2e1 * t632;
t597 = t637 + t615 / 0.2e1;
t596 = t636 + t614 / 0.2e1;
t595 = t635 + t613 / 0.2e1;
t594 = t634 + t612 / 0.2e1;
t593 = t633 + t611 / 0.2e1;
t592 = t632 + t610 / 0.2e1;
t591 = t597 * t969 + t664 * t846;
t590 = t596 * t969 + t667 * t846;
t589 = t595 * t971 + t663 * t847;
t588 = t594 * t971 + t666 * t847;
t587 = t593 * t973 + t662 * t848;
t586 = t592 * t973 + t665 * t848;
t585 = t593 * t956 + t662 * t746;
t584 = t592 * t956 + t665 * t746;
t583 = t597 * t954 + t664 * t744;
t582 = t596 * t954 + t667 * t744;
t581 = t595 * t955 + t663 * t745;
t580 = t594 * t955 + t666 * t745;
t579 = (t642 * t905 + t644 * t901 + t646 * t897) * t713;
t578 = (t641 * t905 + t643 * t901 + t645 * t897) * t713;
t577 = (t641 * t642 * t997 + t643 * t644 * t989 + t645 * t646 * t981) * t713;
t1 = [(t642 ^ 2 * t997 + t644 ^ 2 * t989 + t646 ^ 2 * t981) * t713, 0, 0, (t605 * t932 + t607 * t926 + t609 * t920 + (t605 * t946 + t607 * t944 + t609 * t942) * t710) * t712, t599 * t813 + t601 * t805 + t603 * t797 + (t617 * t811 + t619 * t803 + t621 * t795) * t967, -t599 * t1035 - t601 * t1033 - t603 * t1031 + (-t617 * t931 - t619 * t925 - t621 * t919) * t967, (t605 * t814 + t607 * t806 + t609 * t798 + (t605 * t834 + t607 * t830 + t609 * t826) * t710) * t712, (t605 * t930 + t607 * t924 + t609 * t918 + (t605 * t833 + t607 * t829 + t609 * t825) * t710) * t1040, (t617 * t776 + t619 * t772 + t621 * t768) * t966 + (t605 * t894 + t607 * t890 + t609 * t886 + (t669 * t773 + t672 * t769 + t675 * t765) * t712) * t710, (t617 * t895 + t619 * t891 + t621 * t887) * t966 + (t605 * t662 + t607 * t663 + t609 * t664 + (t642 * t896 + t644 * t892 + t646 * t888) * t712) * t710, (t662 ^ 2 * t679 + t663 ^ 2 * t683 + t664 ^ 2 * t687) * t711, -t581 * t926 - t583 * t920 - t585 * t932 + (-t773 - t769 - t765 + (t617 * t812 + t619 * t804 + t621 * t796) * t712) * t710, t587 * t841 + t589 * t839 + t591 * t837 + (-t642 * t1020 - t644 * t1017 - t646 * t1014 + (-t617 * t739 - t619 * t737 - t621 * t735) * t712) * t710, 1; t577, 0, 0, (t604 * t932 + t606 * t926 + t608 * t920 + (t604 * t946 + t606 * t944 + t608 * t942) * t710) * t712, t598 * t813 + t600 * t805 + t602 * t797 + (t617 * t815 + t619 * t807 + t621 * t799) * t967, -t598 * t1035 - t600 * t1033 - t602 * t1031 + (-t617 * t934 - t619 * t928 - t621 * t922) * t967, (t604 * t814 + t606 * t806 + t608 * t798 + (t604 * t834 + t606 * t830 + t608 * t826) * t710) * t712, (t604 * t930 + t606 * t924 + t608 * t918 + (t604 * t833 + t606 * t829 + t608 * t825) * t710) * t1040, (t617 * t764 + t619 * t760 + t621 * t756) * t966 + (t604 * t894 + t606 * t890 + t608 * t886 + (t669 * t761 + t672 * t757 + t675 * t753) * t712) * t710, (t617 * t883 + t619 * t879 + t621 * t875) * t966 + (t604 * t662 + t606 * t663 + t608 * t664 + (t642 * t884 + t644 * t880 + t646 * t876) * t712) * t710, t631, -t580 * t926 - t582 * t920 - t584 * t932 + (-t774 - t770 - t766 + (t617 * t816 + t619 * t808 + t621 * t800) * t712) * t710, t586 * t841 + t588 * t839 + t590 * t837 + (-t641 * t1020 - t643 * t1017 - t645 * t1014 + (-t617 * t740 - t619 * t738 - t621 * t736) * t712) * t710, 0; t579, 0, 0, (t628 * t932 + t629 * t926 + t630 * t920 + (t617 * t938 + t619 * t937 + t621 * t936) * t710) * t712, t625 * t813 + t626 * t805 + t627 * t797 + (t617 * t783 + t619 * t780 + t621 * t777) * t967, -t625 * t1035 - t626 * t1033 - t627 * t1031 + (-t617 * t907 - t619 * t903 - t621 * t899) * t967, (t628 * t814 + t629 * t806 + t630 * t798 + (t617 * t824 + t619 * t822 + t621 * t820) * t710) * t712, (t628 * t930 + t629 * t924 + t630 * t918 + (t617 * t823 + t619 * t821 + t621 * t819) * t710) * t1040, (t628 * t894 + t629 * t890 + t630 * t886) * t710, (t628 * t662 + t629 * t663 + t630 * t664) * t710, 0, t642 * t845 + t644 * t844 + t646 * t843 + (-t775 - t771 - t767 + (t617 * t784 + t619 * t781 + t621 * t778) * t712) * t710, t642 * t722 + t644 * t721 + t646 * t720 + (-t1021 - t1018 - t1015 + (-t617 * t725 - t619 * t724 - t621 * t723) * t712) * t710, 0; t577, 0, 0, (t605 * t935 + t607 * t929 + t609 * t923 + (t605 * t947 + t607 * t945 + t609 * t943) * t710) * t712, t599 * t817 + t601 * t809 + t603 * t801 + (t616 * t811 + t618 * t803 + t620 * t795) * t967, -t599 * t1036 - t601 * t1034 - t603 * t1032 + (-t616 * t931 - t618 * t925 - t620 * t919) * t967, (t605 * t818 + t607 * t810 + t609 * t802 + (t605 * t836 + t607 * t832 + t609 * t828) * t710) * t712, (t605 * t933 + t607 * t927 + t609 * t921 + (t605 * t835 + t607 * t831 + t609 * t827) * t710) * t1040, (t616 * t776 + t618 * t772 + t620 * t768) * t966 + (t605 * t882 + t607 * t878 + t609 * t874 + (t669 * t774 + t672 * t770 + t675 * t766) * t712) * t710, (t616 * t895 + t618 * t891 + t620 * t887) * t966 + (t605 * t665 + t607 * t666 + t609 * t667 + (t641 * t896 + t643 * t892 + t645 * t888) * t712) * t710, t631, -t581 * t929 - t583 * t923 - t585 * t935 + (-t761 - t757 - t753 + (t616 * t812 + t618 * t804 + t620 * t796) * t712) * t710, t587 * t842 + t589 * t840 + t591 * t838 + (-t642 * t1011 - t644 * t1008 - t646 * t1005 + (-t616 * t739 - t618 * t737 - t620 * t735) * t712) * t710, 0; (t641 ^ 2 * t997 + t643 ^ 2 * t989 + t645 ^ 2 * t981) * t713, 0, 0, (t604 * t935 + t606 * t929 + t608 * t923 + (t604 * t947 + t606 * t945 + t608 * t943) * t710) * t712, t598 * t817 + t600 * t809 + t602 * t801 + (t616 * t815 + t618 * t807 + t620 * t799) * t967, -t598 * t1036 - t600 * t1034 - t602 * t1032 + (-t616 * t934 - t618 * t928 - t620 * t922) * t967, (t604 * t818 + t606 * t810 + t608 * t802 + (t604 * t836 + t606 * t832 + t608 * t828) * t710) * t712, (t604 * t933 + t606 * t927 + t608 * t921 + (t604 * t835 + t606 * t831 + t608 * t827) * t710) * t1040, (t616 * t764 + t618 * t760 + t620 * t756) * t966 + (t604 * t882 + t606 * t878 + t608 * t874 + (t669 * t762 + t672 * t758 + t675 * t754) * t712) * t710, (t616 * t883 + t618 * t879 + t620 * t875) * t966 + (t604 * t665 + t606 * t666 + t608 * t667 + (t641 * t884 + t643 * t880 + t645 * t876) * t712) * t710, (t665 ^ 2 * t679 + t666 ^ 2 * t683 + t667 ^ 2 * t687) * t711, -t580 * t929 - t582 * t923 - t584 * t935 + (-t762 - t758 - t754 + (t616 * t816 + t618 * t808 + t620 * t800) * t712) * t710, t586 * t842 + t588 * t840 + t590 * t838 + (-t641 * t1011 - t643 * t1008 - t645 * t1005 + (-t616 * t740 - t618 * t738 - t620 * t736) * t712) * t710, 1; t578, 0, 0, (t628 * t935 + t629 * t929 + t630 * t923 + (t616 * t938 + t618 * t937 + t620 * t936) * t710) * t712, t625 * t817 + t626 * t809 + t627 * t801 + (t616 * t783 + t618 * t780 + t620 * t777) * t967, -t625 * t1036 - t626 * t1034 - t627 * t1032 + (-t616 * t907 - t618 * t903 - t620 * t899) * t967, (t628 * t818 + t629 * t810 + t630 * t802 + (t616 * t824 + t618 * t822 + t620 * t820) * t710) * t712, (t628 * t933 + t629 * t927 + t630 * t921 + (t616 * t823 + t618 * t821 + t620 * t819) * t710) * t1040, (t628 * t882 + t629 * t878 + t630 * t874) * t710, (t628 * t665 + t629 * t666 + t630 * t667) * t710, 0, t641 * t845 + t643 * t844 + t645 * t843 + (-t763 - t759 - t755 + (t616 * t784 + t618 * t781 + t620 * t778) * t712) * t710, t641 * t722 + t643 * t721 + t645 * t720 + (-t1012 - t1009 - t1006 + (-t616 * t725 - t618 * t724 - t620 * t723) * t712) * t710, 0; t579, 0, 0, (t605 * t1024 + t607 * t1023 + t609 * t1022 + (t609 * t1028 + t607 * t1029 + t605 * t1030) * t710) * t712, t599 * t906 + t601 * t902 + t603 * t898 + (t642 * t733 + t644 * t730 + t646 * t727) * t967, -t659 * t599 - t660 * t601 - t661 * t603 + (-t642 * t916 - t644 * t913 - t646 * t910) * t967, (t605 * t908 + t607 * t904 + t609 * t900 + (t605 * t917 + t607 * t914 + t609 * t911) * t710) * t712, (t605 * t785 + t607 * t782 + t609 * t779 + (t605 * t792 + t607 * t789 + t609 * t786) * t710) * t1040, ((t662 * t793 + t663 * t790 + t664 * t787) * t711 + (t669 * t775 + t672 * t771 + t675 * t767) * t710) * t712, ((t664 * t1028 + t663 * t1029 + t662 * t1030) * t711 + (t1015 * t675 + t1018 * t672 + t1021 * t669) * t710) * t712, 0, -t581 * t1023 - t583 * t1022 - t585 * t1024 + (t642 * t794 + t644 * t791 + t646 * t788) * t967, t587 * t959 + t589 * t958 + t591 * t957 + (-t642 * t719 - t644 * t718 - t646 * t717) * t967, 0; t578, 0, 0, (t604 * t1024 + t606 * t1023 + t608 * t1022 + (t608 * t1028 + t606 * t1029 + t604 * t1030) * t710) * t712, t598 * t906 + t600 * t902 + t602 * t898 + (t641 * t733 + t643 * t730 + t645 * t727) * t967, -t659 * t598 - t660 * t600 - t661 * t602 + (-t641 * t916 - t643 * t913 - t645 * t910) * t967, (t604 * t908 + t606 * t904 + t608 * t900 + (t604 * t917 + t606 * t914 + t608 * t911) * t710) * t712, (t604 * t785 + t606 * t782 + t608 * t779 + (t604 * t792 + t606 * t789 + t608 * t786) * t710) * t1040, ((t665 * t793 + t666 * t790 + t667 * t787) * t711 + (t669 * t763 + t672 * t759 + t675 * t755) * t710) * t712, ((t667 * t1028 + t666 * t1029 + t665 * t1030) * t711 + (t1006 * t675 + t1009 * t672 + t1012 * t669) * t710) * t712, 0, -t580 * t1023 - t582 * t1022 - t584 * t1024 + (t641 * t794 + t643 * t791 + t645 * t788) * t967, t586 * t959 + t588 * t958 + t590 * t957 + (-t641 * t719 - t643 * t718 - t645 * t717) * t967, 0; (t659 ^ 2 * t670 + t660 ^ 2 * t673 + t661 ^ 2 * t676) * t713, 0, 0, (t628 * t1024 + t629 * t1023 + t630 * t1022 + (t630 * t1028 + t629 * t1029 + t628 * t1030) * t710) * t712, t625 * t906 + t626 * t902 + t627 * t898 + (t728 + t731 + t734) * t967, -t659 * t625 - t660 * t626 - t661 * t627 + (-t661 * t1028 - t660 * t1029 - t659 * t1030) * t967, (t628 * t908 + t629 * t904 + t630 * t900 + (t628 * t917 + t629 * t914 + t630 * t911) * t710) * t712, (t628 * t785 + t629 * t782 + t630 * t779 + (t628 * t792 + t629 * t789 + t630 * t786) * t710) * t1040, 0, 0, 0, t845 * t1044 + t844 * t1043 + t843 * t1042 + (t701 * t734 + t704 * t731 + t707 * t728) * t967, t659 * t743 + t660 * t742 + t661 * t741 + (-t659 * t732 - t660 * t729 - t661 * t726) * t967, 1;];
tau_reg  = t1;
