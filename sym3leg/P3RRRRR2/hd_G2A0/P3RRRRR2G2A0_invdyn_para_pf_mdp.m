% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:10
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRRRR2G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G2A0_invdyn_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:09:26
% EndTime: 2020-03-09 21:09:38
% DurationCPUTime: 12.33s
% Computational Cost: add. (34257->570), mult. (83240->1052), div. (14409->25), fcn. (78441->54), ass. (0->457)
t2339 = 2 * pkin(1);
t2041 = legFrame(3,2);
t2008 = sin(t2041);
t2011 = cos(t2041);
t2066 = xDP(2);
t2067 = xDP(1);
t1927 = t2008 * t2067 + t2011 * t2066;
t2047 = sin(qJ(3,3));
t2048 = sin(qJ(2,3));
t2049 = sin(qJ(1,3));
t2056 = cos(qJ(3,3));
t2057 = cos(qJ(2,3));
t2058 = cos(qJ(1,3));
t2065 = xDP(3);
t2090 = -t2008 * t2066 + t2011 * t2067;
t2220 = t2058 * t2065;
t1864 = ((-t2049 * t2065 + t2090 * t2058) * t2048 + t2057 * (t2090 * t2049 + t2220)) * t2056 + t2047 * t1927;
t2071 = 1 / pkin(1);
t2020 = 0.1e1 / t2048;
t2027 = 0.1e1 / t2056;
t2240 = t2020 * t2027;
t2146 = t2071 * t2240;
t1855 = t1864 * t2146;
t1936 = t2058 * t2048 + t2049 * t2057;
t2203 = pkin(1) * t2047 * t2057;
t2293 = pkin(2) * t2067;
t2294 = pkin(2) * t2066;
t2026 = t2056 ^ 2;
t2297 = pkin(2) * t2026;
t2298 = pkin(1) * t2067;
t2299 = pkin(1) * t2066;
t1852 = -((-t2049 * t2048 + t2057 * t2058) * t2065 + t2090 * t1936) * t2297 + ((-t2047 * t2294 - t2049 * t2298) * t2011 + (-t2047 * t2293 + t2049 * t2299) * t2008 - pkin(1) * t2220) * t2056 - t1927 * t2203;
t2028 = 0.1e1 / t2056 ^ 2;
t2069 = 0.1e1 / pkin(2);
t2215 = t2069 * t2071;
t2137 = t2028 * t2215;
t2117 = t2020 * t2137;
t2104 = t1852 * t2117;
t1843 = t1855 + t2104;
t2021 = 0.1e1 / t2048 ^ 2;
t2072 = 1 / pkin(1) ^ 2;
t2237 = t2021 * t2072;
t2144 = t2027 * t2237;
t1822 = t1843 * t1852 * t2144;
t2245 = t2011 * t2047;
t2258 = t1936 * t2056;
t1906 = -t2008 * t2258 + t2245;
t2045 = xDDP(2);
t1894 = t1906 * t2045 * t2146;
t2251 = t2008 * t2047;
t1907 = t2011 * t2258 + t2251;
t2046 = xDDP(1);
t1895 = t1907 * t2046 * t2146;
t1924 = t1927 ^ 2;
t2029 = t2027 / t2026;
t2116 = t2020 * t2029 * t2215;
t1912 = t1924 * t2116;
t2044 = xDDP(3);
t2225 = t2044 * t2071;
t2038 = qJ(1,3) + qJ(2,3);
t2005 = cos(t2038);
t2255 = t2005 * t2020;
t1945 = t2225 * t2255;
t2099 = t1822 + t1894 + t1895 + t1912 + t1945;
t1825 = -t2056 * t1843 * pkin(2) - t2057 * t1864 * t2240;
t2108 = t1825 * t1864 * t2144;
t1804 = t2099 - t2108;
t2111 = t2011 * g(1) - t2008 * g(2);
t1918 = g(3) * t2058 + t2111 * t2049;
t2224 = t2047 * t2048;
t2151 = t1927 * t2224;
t2221 = t2056 * t2057;
t2228 = t2027 * t2069;
t2267 = t1843 * t2026;
t1816 = pkin(2) * t2267 + (t1843 * t2221 - t2151 * t2228) * pkin(1);
t2200 = t1936 * t2297;
t2304 = pkin(1) * t2049;
t1885 = t2008 * t2200 + (-pkin(2) * t2245 + t2008 * t2304) * t2056 - t2011 * t2203;
t1879 = t1885 * t2045 * t2117;
t1886 = -t2011 * t2200 + (-pkin(2) * t2251 - t2011 * t2304) * t2056 - t2008 * t2203;
t1880 = t1886 * t2046 * t2117;
t2134 = t2044 * t2215;
t2284 = qJ(2,3) + qJ(3,3);
t2285 = qJ(2,3) - qJ(3,3);
t2319 = -2 * pkin(1);
t2264 = (t2058 * t2319 + (-cos(qJ(1,3) + t2285) - cos(qJ(1,3) + t2284)) * pkin(2)) / (sin(t2284) + sin(t2285));
t1903 = t2134 * t2264;
t2120 = t1927 * t2057 * t2228;
t2087 = ((-pkin(1) * t1843 * t2224 + t1927 * t2027) * t2056 + pkin(1) * t2120) * t1927 * t2116;
t2181 = t1852 * t2029 * t2069;
t2105 = t2181 * t2237;
t2133 = -t2069 * t2072 / 0.2e1;
t1837 = t1855 + t2104 / 0.2e1;
t2068 = pkin(2) ^ 2;
t2318 = 0.2e1 * pkin(2);
t2325 = (t2068 * t2267 + (t1837 * t2221 * t2318 + (t1864 * t2020 - t2151) * t2027) * pkin(1)) * t2028;
t2084 = t2021 * t1864 * t2133 * t2325 - t1816 * t2105 / 0.2e1 - t2087 / 0.2e1 + t1879 / 0.2e1 + t1880 / 0.2e1 + t1903 / 0.2e1;
t2070 = 0.1e1 / pkin(2) ^ 2;
t2214 = t2070 * t2072;
t2212 = 0.2e1 * t1864 * t2105 + t1852 ^ 2 * t2021 / t2026 ^ 2 * t2214;
t2261 = t1924 * t2070;
t2322 = g(3) * t2049 - t2111 * t2058;
t2338 = (t2322 + (t1804 + t2084) * t2339) * t2057 - (pkin(1) * (t2028 * t2261 + t2212) - t1918) * t2048;
t2042 = legFrame(2,2);
t2009 = sin(t2042);
t2012 = cos(t2042);
t1928 = t2009 * t2067 + t2012 * t2066;
t2050 = sin(qJ(3,2));
t2051 = sin(qJ(2,2));
t2052 = sin(qJ(1,2));
t2059 = cos(qJ(3,2));
t2060 = cos(qJ(2,2));
t2061 = cos(qJ(1,2));
t2089 = -t2009 * t2066 + t2012 * t2067;
t2218 = t2061 * t2065;
t1865 = ((-t2052 * t2065 + t2089 * t2061) * t2051 + t2060 * (t2089 * t2052 + t2218)) * t2059 + t2050 * t1928;
t2022 = 0.1e1 / t2051;
t2031 = 0.1e1 / t2059;
t2236 = t2022 * t2031;
t2143 = t2071 * t2236;
t1857 = t1865 * t2143;
t1937 = t2061 * t2051 + t2052 * t2060;
t2301 = pkin(1) * t2060;
t2202 = t2050 * t2301;
t2030 = t2059 ^ 2;
t2296 = pkin(2) * t2030;
t1853 = -((-t2052 * t2051 + t2060 * t2061) * t2065 + t2089 * t1937) * t2296 + ((-t2050 * t2294 - t2052 * t2298) * t2012 + (-t2050 * t2293 + t2052 * t2299) * t2009 - pkin(1) * t2218) * t2059 - t1928 * t2202;
t2032 = 0.1e1 / t2059 ^ 2;
t2136 = t2032 * t2215;
t2115 = t2022 * t2136;
t2102 = t1853 * t2115;
t1844 = t1857 + t2102;
t2023 = 0.1e1 / t2051 ^ 2;
t2233 = t2023 * t2072;
t2141 = t2031 * t2233;
t1823 = t1844 * t1853 * t2141;
t2243 = t2012 * t2050;
t2257 = t1937 * t2059;
t1908 = -t2009 * t2257 + t2243;
t1896 = t1908 * t2045 * t2143;
t2249 = t2009 * t2050;
t1909 = t2012 * t2257 + t2249;
t1897 = t1909 * t2046 * t2143;
t1925 = t1928 ^ 2;
t2033 = t2031 / t2030;
t2114 = t2022 * t2033 * t2215;
t1913 = t1925 * t2114;
t2039 = qJ(1,2) + qJ(2,2);
t2006 = cos(t2039);
t2254 = t2006 * t2022;
t1946 = t2225 * t2254;
t2098 = t1823 + t1896 + t1897 + t1913 + t1946;
t1826 = -t2059 * t1844 * pkin(2) - t2060 * t1865 * t2236;
t2107 = t1826 * t1865 * t2141;
t1805 = t2098 - t2107;
t2110 = t2012 * g(1) - t2009 * g(2);
t1919 = g(3) * t2061 + t2110 * t2052;
t2223 = t2050 * t2051;
t2149 = t1928 * t2223;
t2219 = t2059 * t2060;
t2227 = t2031 * t2069;
t2266 = t1844 * t2030;
t1817 = pkin(2) * t2266 + (t1844 * t2219 - t2149 * t2227) * pkin(1);
t2199 = t1937 * t2296;
t2303 = pkin(1) * t2052;
t1887 = t2009 * t2199 + (-pkin(2) * t2243 + t2009 * t2303) * t2059 - t2012 * t2202;
t1881 = t1887 * t2045 * t2115;
t1888 = -t2012 * t2199 + (-pkin(2) * t2249 - t2012 * t2303) * t2059 - t2009 * t2202;
t1882 = t1888 * t2046 * t2115;
t2286 = qJ(2,2) + qJ(3,2);
t2287 = qJ(2,2) - qJ(3,2);
t2263 = (t2061 * t2319 + (-cos(qJ(1,2) + t2287) - cos(qJ(1,2) + t2286)) * pkin(2)) / (sin(t2286) + sin(t2287));
t1904 = t2134 * t2263;
t2119 = t1928 * t2060 * t2227;
t2086 = ((-pkin(1) * t1844 * t2223 + t1928 * t2031) * t2059 + pkin(1) * t2119) * t1928 * t2114;
t2180 = t1853 * t2033 * t2069;
t2103 = t2180 * t2233;
t1838 = t1857 + t2102 / 0.2e1;
t2324 = (t2068 * t2266 + (t1838 * t2219 * t2318 + (t1865 * t2022 - t2149) * t2031) * pkin(1)) * t2032;
t2083 = t2023 * t1865 * t2133 * t2324 - t1817 * t2103 / 0.2e1 - t2086 / 0.2e1 + t1881 / 0.2e1 + t1882 / 0.2e1 + t1904 / 0.2e1;
t2213 = 0.2e1 * t1865 * t2103 + t1853 ^ 2 * t2023 / t2030 ^ 2 * t2214;
t2260 = t1925 * t2070;
t2321 = g(3) * t2052 - t2110 * t2061;
t2337 = (t2321 + (t1805 + t2083) * t2339) * t2060 - (pkin(1) * (t2032 * t2260 + t2213) - t1919) * t2051;
t2043 = legFrame(1,2);
t2010 = sin(t2043);
t2013 = cos(t2043);
t1929 = t2010 * t2067 + t2013 * t2066;
t2053 = sin(qJ(3,1));
t2054 = sin(qJ(2,1));
t2055 = sin(qJ(1,1));
t2062 = cos(qJ(3,1));
t2063 = cos(qJ(2,1));
t2064 = cos(qJ(1,1));
t2088 = -t2010 * t2066 + t2013 * t2067;
t2216 = t2064 * t2065;
t1866 = ((-t2055 * t2065 + t2088 * t2064) * t2054 + t2063 * (t2088 * t2055 + t2216)) * t2062 + t2053 * t1929;
t2024 = 0.1e1 / t2054;
t2035 = 0.1e1 / t2062;
t2232 = t2024 * t2035;
t2140 = t2071 * t2232;
t1859 = t1866 * t2140;
t1938 = t2064 * t2054 + t2055 * t2063;
t2300 = pkin(1) * t2063;
t2201 = t2053 * t2300;
t2034 = t2062 ^ 2;
t2295 = pkin(2) * t2034;
t1854 = -((-t2055 * t2054 + t2063 * t2064) * t2065 + t2088 * t1938) * t2295 + ((-t2053 * t2294 - t2055 * t2298) * t2013 + (-t2053 * t2293 + t2055 * t2299) * t2010 - pkin(1) * t2216) * t2062 - t1929 * t2201;
t2036 = 0.1e1 / t2062 ^ 2;
t2135 = t2036 * t2215;
t2113 = t2024 * t2135;
t2100 = t1854 * t2113;
t1845 = t1859 + t2100;
t2025 = 0.1e1 / t2054 ^ 2;
t2229 = t2025 * t2072;
t2138 = t2035 * t2229;
t1824 = t1845 * t1854 * t2138;
t2241 = t2013 * t2053;
t2256 = t1938 * t2062;
t1910 = -t2010 * t2256 + t2241;
t1898 = t1910 * t2045 * t2140;
t2247 = t2010 * t2053;
t1911 = t2013 * t2256 + t2247;
t1899 = t1911 * t2046 * t2140;
t1926 = t1929 ^ 2;
t2037 = t2035 / t2034;
t2112 = t2024 * t2037 * t2215;
t1914 = t1926 * t2112;
t2040 = qJ(1,1) + qJ(2,1);
t2007 = cos(t2040);
t2253 = t2007 * t2024;
t1947 = t2225 * t2253;
t2097 = t1824 + t1898 + t1899 + t1914 + t1947;
t1827 = -t2062 * t1845 * pkin(2) - t2063 * t1866 * t2232;
t2106 = t1827 * t1866 * t2138;
t1806 = t2097 - t2106;
t2109 = t2013 * g(1) - t2010 * g(2);
t1920 = g(3) * t2064 + t2109 * t2055;
t2222 = t2053 * t2054;
t2147 = t1929 * t2222;
t2217 = t2062 * t2063;
t2226 = t2035 * t2069;
t2265 = t1845 * t2034;
t1818 = pkin(2) * t2265 + (t1845 * t2217 - t2147 * t2226) * pkin(1);
t2198 = t1938 * t2295;
t2302 = pkin(1) * t2055;
t1889 = t2010 * t2198 + (-pkin(2) * t2241 + t2010 * t2302) * t2062 - t2013 * t2201;
t1883 = t1889 * t2045 * t2113;
t1890 = -t2013 * t2198 + (-pkin(2) * t2247 - t2013 * t2302) * t2062 - t2010 * t2201;
t1884 = t1890 * t2046 * t2113;
t2288 = qJ(2,1) + qJ(3,1);
t2289 = qJ(2,1) - qJ(3,1);
t2262 = (t2064 * t2319 + (-cos(qJ(1,1) + t2289) - cos(qJ(1,1) + t2288)) * pkin(2)) / (sin(t2288) + sin(t2289));
t1905 = t2134 * t2262;
t2118 = t1929 * t2063 * t2226;
t2085 = ((-pkin(1) * t1845 * t2222 + t1929 * t2035) * t2062 + pkin(1) * t2118) * t1929 * t2112;
t2179 = t1854 * t2037 * t2069;
t2101 = t2179 * t2229;
t1839 = t1859 + t2100 / 0.2e1;
t2323 = (t2068 * t2265 + (t1839 * t2217 * t2318 + (t1866 * t2024 - t2147) * t2035) * pkin(1)) * t2036;
t2082 = t2025 * t1866 * t2133 * t2323 - t1818 * t2101 / 0.2e1 - t2085 / 0.2e1 + t1883 / 0.2e1 + t1884 / 0.2e1 + t1905 / 0.2e1;
t2211 = 0.2e1 * t1866 * t2101 + t1854 ^ 2 * t2025 / t2034 ^ 2 * t2214;
t2259 = t1926 * t2070;
t2320 = g(3) * t2055 - t2109 * t2064;
t2336 = (t2320 + (t1806 + t2082) * t2339) * t2063 - (pkin(1) * (t2036 * t2259 + t2211) - t1920) * t2054;
t1801 = t1804 * pkin(1);
t2335 = t1801 + t2322;
t1802 = pkin(1) * t1805;
t2334 = t1802 + t2321;
t1803 = pkin(1) * t1806;
t2333 = t1803 + t2320;
t2177 = t1865 ^ 2 * t2032 * t2071;
t1856 = t2023 * t2177;
t2332 = t1856 + t1919;
t2176 = t1866 ^ 2 * t2036 * t2071;
t1858 = t2025 * t2176;
t2331 = t1858 + t1920;
t2178 = t1864 ^ 2 * t2028 * t2071;
t1860 = t2021 * t2178;
t2330 = t1860 + t1918;
t2326 = 2 * t2071;
t2317 = 2 * MDP(7);
t2316 = 2 * MDP(8);
t2314 = -g(1) / 0.2e1;
t2313 = g(1) / 0.2e1;
t2312 = -g(2) / 0.2e1;
t2311 = g(2) / 0.2e1;
t1993 = t2041 + t2038;
t2310 = sin(t1993) / 0.2e1;
t1995 = t2042 + t2039;
t2309 = sin(t1995) / 0.2e1;
t1997 = t2043 + t2040;
t2308 = sin(t1997) / 0.2e1;
t1994 = -t2041 + t2038;
t2307 = -cos(t1994) / 0.2e1;
t1996 = -t2042 + t2039;
t2306 = -cos(t1996) / 0.2e1;
t1998 = -t2043 + t2040;
t2305 = -cos(t1998) / 0.2e1;
t2283 = MDP(1) * t2071;
t2282 = MDP(2) * t2071;
t2281 = MDP(3) * t2071;
t2280 = MDP(4) * t2071;
t2279 = MDP(5) * t2071;
t2278 = MDP(6) * t2071;
t2277 = MDP(11) * t2069;
t2081 = t1879 + t1880 + t1903 - t2087;
t2129 = t1816 * t2181;
t2188 = t2069 * t2325;
t2270 = t1825 * t2027;
t1780 = (-t2129 + (-t2188 - t2270) * t1864) * t2237 + t2081 + t2099;
t2276 = t1780 * t2047;
t2080 = t1881 + t1882 + t1904 - t2086;
t2128 = t1817 * t2180;
t2187 = t2069 * t2324;
t2269 = t1826 * t2031;
t1781 = (-t2128 + (-t2187 - t2269) * t1865) * t2233 + t2080 + t2098;
t2275 = t1781 * t2050;
t2079 = t1883 + t1884 + t1905 - t2085;
t2127 = t1818 * t2179;
t2186 = t2069 * t2323;
t2268 = t1827 * t2035;
t1782 = (-t2127 + (-t2186 - t2268) * t1866) * t2229 + t2079 + t2097;
t2274 = t1782 * t2053;
t2252 = t2008 * t2027;
t2250 = t2009 * t2031;
t2248 = t2010 * t2035;
t2246 = t2011 * t2027;
t2244 = t2012 * t2031;
t2242 = t2013 * t2035;
t2239 = t2020 * t2028;
t2238 = t2020 * t2047;
t2235 = t2022 * t2032;
t2234 = t2022 * t2050;
t2231 = t2024 * t2036;
t2230 = t2024 * t2053;
t2154 = t2047 * t2261;
t1891 = t2029 * t2154 + (t2008 * t2046 + t2011 * t2045) * t2228;
t2207 = (t1843 * t2120 + t1891 * t2048 / 0.2e1) * t2319;
t2153 = t2050 * t2260;
t1892 = t2033 * t2153 + (t2009 * t2046 + t2012 * t2045) * t2227;
t2206 = (t1844 * t2119 + t1892 * t2051 / 0.2e1) * t2319;
t2152 = t2053 * t2259;
t1893 = t2037 * t2152 + (t2010 * t2046 + t2013 * t2045) * t2226;
t2205 = (t1845 * t2118 + t1893 * t2054 / 0.2e1) * t2319;
t2150 = t1927 * t2069 * t1843;
t1771 = (t1895 / 0.2e1 + t1894 / 0.2e1 + t1945 / 0.2e1 - t2108 / 0.2e1 + t1822 / 0.2e1 + t1912 / 0.2e1 + t2084) * t2047 + t2150;
t2197 = t1771 * t2238;
t2148 = t1928 * t2069 * t1844;
t1772 = (t1897 / 0.2e1 + t1896 / 0.2e1 + t1946 / 0.2e1 - t2107 / 0.2e1 + t1823 / 0.2e1 + t1913 / 0.2e1 + t2083) * t2050 + t2148;
t2196 = t1772 * t2234;
t2182 = t1845 * t1929 * t2069;
t1773 = (t1899 / 0.2e1 + t1898 / 0.2e1 + t1947 / 0.2e1 - t2106 / 0.2e1 + t1824 / 0.2e1 + t1914 / 0.2e1 + t2082) * t2053 + t2182;
t2195 = t1773 * t2230;
t2194 = t2027 * t2276;
t2193 = t2031 * t2275;
t2192 = t2035 * t2274;
t1795 = t2330 * t2048 + t2335 * t2057;
t2191 = t1795 * t2240;
t1796 = t2332 * t2051 + t2334 * t2060;
t2190 = t1796 * t2236;
t1797 = t2331 * t2054 + t2333 * t2063;
t2189 = t1797 * t2232;
t1840 = t1843 ^ 2;
t2185 = t1840 * (-0.2e1 * t2026 + 0.1e1) * t2027;
t1841 = t1844 ^ 2;
t2184 = t1841 * (-0.2e1 * t2030 + 0.1e1) * t2031;
t1842 = t1845 ^ 2;
t2183 = t1842 * (-0.2e1 * t2034 + 0.1e1) * t2035;
t2175 = t1885 * t2239;
t2174 = t1886 * t2239;
t2173 = t1887 * t2235;
t2172 = t1888 * t2235;
t2171 = t1889 * t2231;
t2170 = t1890 * t2231;
t2169 = t1906 * t2240;
t2168 = t1907 * t2240;
t2167 = t1908 * t2236;
t2166 = t1909 * t2236;
t2165 = t1910 * t2232;
t2164 = t1911 * t2232;
t2163 = t2322 * t2240;
t2162 = t2321 * t2236;
t2161 = t2320 * t2232;
t2160 = t1918 * t2240;
t2159 = t1919 * t2236;
t2158 = t1920 * t2232;
t2157 = t2047 * t2264;
t2156 = t2050 * t2263;
t2155 = t2053 * t2262;
t2145 = t2028 * t2238;
t2142 = t2032 * t2234;
t2139 = t2036 * t2230;
t2132 = t2027 * t2197;
t2131 = t2031 * t2196;
t2130 = t2035 * t2195;
t2126 = t1885 * t2145;
t2125 = t1886 * t2145;
t2124 = t1887 * t2142;
t2123 = t1888 * t2142;
t2122 = t1889 * t2139;
t2121 = t1890 * t2139;
t1976 = sin(t1994);
t1981 = cos(t1993);
t2096 = g(1) * t2307 + g(2) * t2310 + t1976 * t2312 + t1981 * t2314 + g(3) * sin(t2038);
t1978 = sin(t1996);
t1983 = cos(t1995);
t2095 = g(1) * t2306 + g(2) * t2309 + t1978 * t2312 + t1983 * t2314 + g(3) * sin(t2039);
t1980 = sin(t1998);
t1985 = cos(t1997);
t2094 = g(1) * t2305 + g(2) * t2308 + t1980 * t2312 + t1985 * t2314 + g(3) * sin(t2040);
t2093 = g(1) * t2310 + g(2) * t2307 + g(3) * t2005 + t1976 * t2313 + t1981 * t2311;
t2092 = g(1) * t2309 + g(2) * t2306 + g(3) * t2006 + t1978 * t2313 + t1983 * t2311;
t2091 = g(1) * t2308 + g(2) * t2305 + g(3) * t2007 + t1980 * t2313 + t1985 * t2311;
t1944 = t2010 * g(1) + t2013 * g(2);
t1942 = t2009 * g(1) + t2012 * g(2);
t1940 = t2008 * g(1) + t2011 * g(2);
t1872 = t1893 * t2053 + t2035 * t2259;
t1871 = t1892 * t2050 + t2031 * t2260;
t1870 = t1891 * t2047 + t2027 * t2261;
t1869 = t1893 * t2062 - t2036 * t2152;
t1868 = t1892 * t2059 - t2032 * t2153;
t1867 = t1891 * t2056 - t2028 * t2154;
t1800 = t1806 * t2300 + t2024 * t2176 + t2094;
t1799 = t1805 * t2301 + t2022 * t2177 + t2095;
t1798 = t2057 * t1801 + t2020 * t2178 + t2096;
t1794 = -t2054 * t1803 + t2063 * t1858 + t2091;
t1793 = -t2051 * t1802 + t2060 * t1856 + t2092;
t1792 = -t2048 * t1801 + t2057 * t1860 + t2093;
t1791 = -t2048 * t2335 + t2330 * t2057;
t1790 = -t2054 * t2333 + t2331 * t2063;
t1789 = -t2051 * t2334 + t2332 * t2060;
t1788 = t1791 * t2056 + t1940 * t2047;
t1787 = t1791 * t2047 - t1940 * t2056;
t1786 = t1790 * t2062 + t1944 * t2053;
t1785 = t1790 * t2053 - t1944 * t2062;
t1784 = t1789 * t2059 + t1942 * t2050;
t1783 = t1789 * t2050 - t1942 * t2059;
t1779 = 0.2e1 * t1824 + 0.2e1 * t1898 + 0.2e1 * t1899 + 0.2e1 * t1914 + 0.2e1 * t1947 + (-t2127 + (-t2186 - 0.2e1 * t2268) * t1866) * t2229 + t2079;
t1778 = 0.2e1 * t1823 + 0.2e1 * t1896 + 0.2e1 * t1897 + 0.2e1 * t1913 + 0.2e1 * t1946 + (-t2128 + (-t2187 - 0.2e1 * t2269) * t1865) * t2233 + t2080;
t1777 = 0.2e1 * t1822 + 0.2e1 * t1894 + 0.2e1 * t1895 + 0.2e1 * t1912 + 0.2e1 * t1945 + (-t2129 + (-t2188 - 0.2e1 * t2270) * t1864) * t2237 + t2081;
t1770 = -pkin(1) * (t2054 * t1779 + t2211 * t2063) + t2091;
t1769 = -pkin(1) * (t2051 * t1778 + t2213 * t2060) + t2092;
t1768 = -pkin(1) * (t2048 * t1777 + t2212 * t2057) + t2093;
t1767 = (-0.2e1 * t1854 * t1839 * t2135 + t1779 * t2063) * pkin(1) + t2094;
t1766 = (-0.2e1 * t1853 * t1838 * t2136 + t1778 * t2060) * pkin(1) + t2095;
t1765 = (-0.2e1 * t1837 * t1852 * t2137 + t1777 * t2057) * pkin(1) + t2096;
t1764 = t2062 * t2274 + (-t2035 + 0.2e1 * t2062) * t2182;
t1763 = t2059 * t2275 + (-t2031 + 0.2e1 * t2059) * t2148;
t1762 = t2056 * t2276 + (-t2027 + 0.2e1 * t2056) * t2150;
t1761 = -t2053 * t2336 + t2062 * t2205;
t1760 = -t2050 * t2337 + t2059 * t2206;
t1759 = -t2047 * t2338 + t2056 * t2207;
t1758 = t2053 * t2205 + t2062 * t2336;
t1757 = t2050 * t2206 + t2059 * t2337;
t1756 = t2047 * t2207 + t2056 * t2338;
t1 = [(t1804 * t2168 + t1805 * t2166 + t1806 * t2164) * t2283 + (t1907 * t2163 + t1909 * t2162 + t1911 * t2161) * t2282 + (t1907 * t2160 + t1909 * t2159 + t1911 * t2158) * t2281 + (t1780 * t2168 + t1781 * t2166 + t1782 * t2164 + (t1780 * t2174 + t1781 * t2172 + t1782 * t2170) * t2069) * t2280 + (t1765 * t2168 + t1766 * t2166 + t1767 * t2164 + (t1798 * t2174 + t1799 * t2172 + t1800 * t2170) * t2069) * t2279 + (t1768 * t2168 + t1769 * t2166 + t1770 * t2164 + (t1792 * t2174 + t1793 * t2172 + t1794 * t2170) * t2069) * t2278 + ((t1907 * t2132 + t1909 * t2131 + t1911 * t2130) * t2326 + (-t1840 * t2251 - t1841 * t2249 - t1842 * t2247 + (t1771 * t2125 + t1772 * t2123 + t1773 * t2121) * t2326) * t2069) * MDP(7) + ((t2008 * t2185 + t2009 * t2184 + t2010 * t2183) * t2069 + (t1762 * t2168 + t1763 * t2166 + t1764 * t2164 + (t1762 * t2174 + t1763 * t2172 + t1764 * t2170) * t2069) * t2326) * MDP(8) + ((t1870 * t2168 + t1871 * t2166 + t1872 * t2164) * t2071 + (t2008 * t2194 + t2009 * t2193 + t2010 * t2192 + (t1870 * t2174 + t1871 * t2172 + t1872 * t2170) * t2071) * t2069) * MDP(9) + ((t1867 * t2168 + t1868 * t2166 + t1869 * t2164) * t2071 + (t1780 * t2008 + t1781 * t2009 + t1782 * t2010 + (t1867 * t2174 + t1868 * t2172 + t1869 * t2170) * t2071) * t2069) * MDP(10) + (t1891 * t2252 + t1892 * t2250 + t1893 * t2248) * t2277 + ((t1756 * t2168 + t1757 * t2166 + t1758 * t2164) * t2071 + (t1783 * t2250 + t1785 * t2248 + t1787 * t2252 + (t1886 * t2191 + t1888 * t2190 + t1890 * t2189) * t2071) * t2069) * MDP(12) + ((t1759 * t2168 + t1760 * t2166 + t1761 * t2164) * t2071 + (t1784 * t2250 + t1786 * t2248 + t1788 * t2252 + (-t1795 * t2125 - t1796 * t2123 - t1797 * t2121) * t2071) * t2069) * MDP(13) + (t2046 - g(1)) * MDP(14); (t1804 * t2169 + t1805 * t2167 + t1806 * t2165) * t2283 + (t1906 * t2163 + t1908 * t2162 + t1910 * t2161) * t2282 + (t1906 * t2160 + t1908 * t2159 + t1910 * t2158) * t2281 + (t1780 * t2169 + t1781 * t2167 + t1782 * t2165 + (t1780 * t2175 + t1781 * t2173 + t1782 * t2171) * t2069) * t2280 + (t1765 * t2169 + t1766 * t2167 + t1767 * t2165 + (t1798 * t2175 + t1799 * t2173 + t1800 * t2171) * t2069) * t2279 + (t1768 * t2169 + t1769 * t2167 + t1770 * t2165 + (t1792 * t2175 + t1793 * t2173 + t1794 * t2171) * t2069) * t2278 + ((t1906 * t2132 + t1908 * t2131 + t1910 * t2130) * t2326 + (-t1840 * t2245 - t1841 * t2243 - t1842 * t2241 + (t1771 * t2126 + t1772 * t2124 + t1773 * t2122) * t2326) * t2069) * MDP(7) + ((t2011 * t2185 + t2012 * t2184 + t2013 * t2183) * t2069 + (t1762 * t2169 + t1763 * t2167 + t1764 * t2165 + (t1762 * t2175 + t1763 * t2173 + t1764 * t2171) * t2069) * t2326) * MDP(8) + ((t1870 * t2169 + t1871 * t2167 + t1872 * t2165) * t2071 + (t2011 * t2194 + t2012 * t2193 + t2013 * t2192 + (t1870 * t2175 + t1871 * t2173 + t1872 * t2171) * t2071) * t2069) * MDP(9) + ((t1867 * t2169 + t1868 * t2167 + t1869 * t2165) * t2071 + (t1780 * t2011 + t1781 * t2012 + t1782 * t2013 + (t1867 * t2175 + t1868 * t2173 + t1869 * t2171) * t2071) * t2069) * MDP(10) + (t1891 * t2246 + t1892 * t2244 + t1893 * t2242) * t2277 + ((t1756 * t2169 + t1757 * t2167 + t1758 * t2165) * t2071 + (t1783 * t2244 + t1785 * t2242 + t1787 * t2246 + (t1885 * t2191 + t1887 * t2190 + t1889 * t2189) * t2071) * t2069) * MDP(12) + ((t1759 * t2169 + t1760 * t2167 + t1761 * t2165) * t2071 + (t1784 * t2244 + t1786 * t2242 + t1788 * t2246 + (-t1795 * t2126 - t1796 * t2124 - t1797 * t2122) * t2071) * t2069) * MDP(13) + (t2045 - g(2)) * MDP(14); (t2044 - g(3)) * MDP(14) + ((t1804 * t2255 + t1805 * t2254 + t1806 * t2253) * MDP(1) + (t2253 * t2320 + t2254 * t2321 + t2255 * t2322) * MDP(2) + (t1918 * t2255 + t1919 * t2254 + t1920 * t2253) * MDP(3) + (t1780 * t2255 + t1781 * t2254 + t1782 * t2253) * MDP(4) + (t1765 * t2255 + t1766 * t2254 + t1767 * t2253) * MDP(5) + (t1768 * t2255 + t1769 * t2254 + t1770 * t2253) * MDP(6) + (t1870 * t2255 + t1871 * t2254 + t1872 * t2253) * MDP(9) + (t1867 * t2255 + t1868 * t2254 + t1869 * t2253) * MDP(10) + (t1756 * t2255 + t1757 * t2254 + t1758 * t2253) * MDP(12) + (t1759 * t2255 + t1760 * t2254 + t1761 * t2253) * MDP(13) + (t2005 * t2197 + t2006 * t2196 + t2007 * t2195) * t2317 + (t1762 * t2255 + t1763 * t2254 + t1764 * t2253) * t2316 + ((t1780 * t2264 + t1781 * t2263 + t1782 * t2262) * MDP(4) + (t1798 * t2264 + t1799 * t2263 + t1800 * t2262) * MDP(5) + (t1792 * t2264 + t1793 * t2263 + t1794 * t2262) * MDP(6) + (t1870 * t2264 + t1871 * t2263 + t1872 * t2262) * MDP(9) + (t1867 * t2264 + t1868 * t2263 + t1869 * t2262) * MDP(10) + (t1795 * t2056 * t2264 + t1796 * t2059 * t2263 + t1797 * t2062 * t2262) * MDP(12) + (-t1795 * t2157 - t1796 * t2156 - t1797 * t2155) * MDP(13) + (t1771 * t2157 + t1772 * t2156 + t1773 * t2155) * t2317 + (t1762 * t2264 + t1763 * t2263 + t1764 * t2262) * t2316) * t2069) * t2071;];
tauX  = t1;
