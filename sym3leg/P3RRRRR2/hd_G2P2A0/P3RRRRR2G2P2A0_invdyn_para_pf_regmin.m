% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR2G2P2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [3x14]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:10
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P3RRRRR2G2P2A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G2P2A0_invdyn_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:08:57
% EndTime: 2020-03-09 21:09:07
% DurationCPUTime: 10.66s
% Computational Cost: add. (34219->532), mult. (83199->1027), div. (14409->25), fcn. (78441->54), ass. (0->449)
t576 = 2 * pkin(1);
t294 = sin(qJ(1,3));
t303 = cos(qJ(1,3));
t286 = legFrame(3,2);
t253 = sin(t286);
t256 = cos(t286);
t356 = g(1) * t256 - g(2) * t253;
t163 = g(3) * t303 + t294 * t356;
t301 = cos(qJ(3,3));
t273 = 0.1e1 / t301 ^ 2;
t293 = sin(qJ(2,3));
t302 = cos(qJ(2,3));
t311 = xDP(2);
t312 = xDP(1);
t172 = t253 * t312 + t256 * t311;
t292 = sin(qJ(3,3));
t310 = xDP(3);
t335 = -t253 * t311 + t256 * t312;
t468 = t303 * t310;
t109 = ((-t294 * t310 + t303 * t335) * t293 + t302 * (t294 * t335 + t468)) * t301 + t292 * t172;
t181 = t293 * t303 + t294 * t302;
t271 = t301 ^ 2;
t532 = pkin(2) * t271;
t445 = t181 * t532;
t537 = pkin(1) * t302;
t448 = t292 * t537;
t493 = t256 * t292;
t540 = pkin(1) * t294;
t130 = t253 * t445 + (-pkin(2) * t493 + t253 * t540) * t301 - t256 * t448;
t290 = xDDP(2);
t265 = 0.1e1 / t293;
t314 = 0.1e1 / pkin(2);
t316 = 1 / pkin(1);
t463 = t314 * t316;
t382 = t273 * t463;
t362 = t265 * t382;
t124 = t130 * t290 * t362;
t499 = t253 * t292;
t131 = -t256 * t445 + (-pkin(2) * t499 - t256 * t540) * t301 - t253 * t448;
t291 = xDDP(1);
t125 = t131 * t291 * t362;
t289 = xDDP(3);
t379 = t289 * t463;
t456 = qJ(2,3) + qJ(3,3);
t457 = qJ(2,3) - qJ(3,3);
t556 = -2 * pkin(1);
t512 = (t303 * t556 + (-cos(qJ(1,3) + t457) - cos(qJ(1,3) + t456)) * pkin(2)) / (sin(t456) + sin(t457));
t148 = t379 * t512;
t266 = 0.1e1 / t293 ^ 2;
t272 = 0.1e1 / t301;
t274 = t272 / t271;
t361 = t265 * t274 * t463;
t476 = t272 * t314;
t365 = t172 * t302 * t476;
t472 = t292 * t293;
t488 = t265 * t272;
t391 = t316 * t488;
t100 = t109 * t391;
t528 = pkin(2) * t312;
t529 = pkin(2) * t311;
t533 = pkin(1) * t312;
t534 = pkin(1) * t311;
t97 = -((-t293 * t294 + t302 * t303) * t310 + t335 * t181) * t532 + ((-t292 * t529 - t294 * t533) * t256 + (-t292 * t528 + t294 * t534) * t253 - pkin(1) * t468) * t301 - t172 * t448;
t347 = t97 * t362;
t88 = t100 + t347;
t329 = ((-pkin(1) * t472 * t88 + t172 * t272) * t301 + pkin(1) * t365) * t172 * t361;
t427 = t274 * t314 * t97;
t317 = 1 / pkin(1) ^ 2;
t485 = t266 * t317;
t353 = t427 * t485;
t378 = -t314 * t317 / 0.2e1;
t313 = pkin(2) ^ 2;
t394 = t172 * t472;
t469 = t301 * t302;
t521 = t271 * t88;
t555 = 0.2e1 * pkin(2);
t82 = t100 + t347 / 0.2e1;
t562 = t273 * (t313 * t521 + (t82 * t469 * t555 + (t109 * t265 - t394) * t272) * pkin(1));
t61 = pkin(2) * t521 + (-t394 * t476 + t469 * t88) * pkin(1);
t332 = t266 * t109 * t378 * t562 - t61 * t353 / 0.2e1 + t124 / 0.2e1 + t125 / 0.2e1 + t148 / 0.2e1 - t329 / 0.2e1;
t506 = t181 * t301;
t151 = -t253 * t506 + t493;
t139 = t151 * t290 * t391;
t152 = t256 * t506 + t499;
t140 = t152 * t291 * t391;
t169 = t172 ^ 2;
t157 = t169 * t361;
t473 = t289 * t316;
t283 = qJ(1,3) + qJ(2,3);
t250 = cos(t283);
t503 = t250 * t265;
t190 = t473 * t503;
t389 = t272 * t485;
t67 = t88 * t97 * t389;
t344 = t139 + t140 + t157 + t190 + t67;
t70 = -pkin(2) * t301 * t88 - t109 * t302 * t488;
t350 = t70 * t109 * t389;
t49 = t344 - t350;
t315 = 0.1e1 / pkin(2) ^ 2;
t509 = t169 * t315;
t462 = t315 * t317;
t526 = 0.2e1 * t109 * t353 + t97 ^ 2 * t266 / t271 ^ 2 * t462;
t559 = g(3) * t294 - t303 * t356;
t575 = (t559 + (t49 + t332) * t576) * t302 - (pkin(1) * (t273 * t509 + t526) - t163) * t293;
t297 = sin(qJ(1,2));
t306 = cos(qJ(1,2));
t287 = legFrame(2,2);
t254 = sin(t287);
t257 = cos(t287);
t355 = g(1) * t257 - g(2) * t254;
t164 = g(3) * t306 + t297 * t355;
t304 = cos(qJ(3,2));
t277 = 0.1e1 / t304 ^ 2;
t296 = sin(qJ(2,2));
t305 = cos(qJ(2,2));
t173 = t254 * t312 + t257 * t311;
t295 = sin(qJ(3,2));
t334 = -t254 * t311 + t257 * t312;
t466 = t306 * t310;
t110 = ((-t297 * t310 + t306 * t334) * t296 + t305 * (t297 * t334 + t466)) * t304 + t295 * t173;
t182 = t296 * t306 + t297 * t305;
t275 = t304 ^ 2;
t531 = pkin(2) * t275;
t444 = t182 * t531;
t536 = pkin(1) * t305;
t447 = t295 * t536;
t491 = t257 * t295;
t539 = pkin(1) * t297;
t132 = t254 * t444 + (-pkin(2) * t491 + t254 * t539) * t304 - t257 * t447;
t267 = 0.1e1 / t296;
t381 = t277 * t463;
t360 = t267 * t381;
t126 = t132 * t290 * t360;
t497 = t254 * t295;
t133 = -t257 * t444 + (-pkin(2) * t497 - t257 * t539) * t304 - t254 * t447;
t127 = t133 * t291 * t360;
t458 = qJ(2,2) + qJ(3,2);
t459 = qJ(2,2) - qJ(3,2);
t511 = (t306 * t556 + (-cos(qJ(1,2) + t459) - cos(qJ(1,2) + t458)) * pkin(2)) / (sin(t458) + sin(t459));
t149 = t379 * t511;
t268 = 0.1e1 / t296 ^ 2;
t276 = 0.1e1 / t304;
t278 = t276 / t275;
t359 = t267 * t278 * t463;
t475 = t276 * t314;
t364 = t173 * t305 * t475;
t471 = t295 * t296;
t484 = t267 * t276;
t388 = t316 * t484;
t102 = t110 * t388;
t98 = -((-t296 * t297 + t305 * t306) * t310 + t334 * t182) * t531 + ((-t295 * t529 - t297 * t533) * t257 + (-t295 * t528 + t297 * t534) * t254 - pkin(1) * t466) * t304 - t173 * t447;
t346 = t98 * t360;
t89 = t102 + t346;
t328 = ((-pkin(1) * t471 * t89 + t173 * t276) * t304 + pkin(1) * t364) * t173 * t359;
t425 = t278 * t314 * t98;
t481 = t268 * t317;
t352 = t425 * t481;
t393 = t173 * t471;
t467 = t304 * t305;
t519 = t275 * t89;
t83 = t102 + t346 / 0.2e1;
t561 = t277 * (t313 * t519 + (t83 * t467 * t555 + (t110 * t267 - t393) * t276) * pkin(1));
t62 = pkin(2) * t519 + (-t393 * t475 + t467 * t89) * pkin(1);
t331 = t268 * t110 * t378 * t561 - t62 * t352 / 0.2e1 + t126 / 0.2e1 + t127 / 0.2e1 + t149 / 0.2e1 - t328 / 0.2e1;
t505 = t182 * t304;
t153 = -t254 * t505 + t491;
t141 = t153 * t290 * t388;
t154 = t257 * t505 + t497;
t142 = t154 * t291 * t388;
t170 = t173 ^ 2;
t158 = t170 * t359;
t284 = qJ(1,2) + qJ(2,2);
t251 = cos(t284);
t502 = t251 * t267;
t191 = t473 * t502;
t386 = t276 * t481;
t68 = t89 * t98 * t386;
t343 = t141 + t142 + t158 + t191 + t68;
t71 = -pkin(2) * t304 * t89 - t110 * t305 * t484;
t349 = t71 * t110 * t386;
t50 = t343 - t349;
t508 = t170 * t315;
t527 = 0.2e1 * t110 * t352 + t98 ^ 2 * t268 / t275 ^ 2 * t462;
t558 = g(3) * t297 - t306 * t355;
t574 = (t558 + (t50 + t331) * t576) * t305 - (pkin(1) * (t277 * t508 + t527) - t164) * t296;
t300 = sin(qJ(1,1));
t309 = cos(qJ(1,1));
t288 = legFrame(1,2);
t255 = sin(t288);
t258 = cos(t288);
t354 = g(1) * t258 - g(2) * t255;
t165 = g(3) * t309 + t300 * t354;
t307 = cos(qJ(3,1));
t281 = 0.1e1 / t307 ^ 2;
t299 = sin(qJ(2,1));
t308 = cos(qJ(2,1));
t174 = t255 * t312 + t258 * t311;
t298 = sin(qJ(3,1));
t333 = -t255 * t311 + t258 * t312;
t464 = t309 * t310;
t111 = ((-t300 * t310 + t309 * t333) * t299 + t308 * (t300 * t333 + t464)) * t307 + t298 * t174;
t183 = t299 * t309 + t300 * t308;
t279 = t307 ^ 2;
t530 = pkin(2) * t279;
t443 = t183 * t530;
t535 = pkin(1) * t308;
t446 = t298 * t535;
t489 = t258 * t298;
t538 = pkin(1) * t300;
t134 = t255 * t443 + (-pkin(2) * t489 + t255 * t538) * t307 - t258 * t446;
t269 = 0.1e1 / t299;
t380 = t281 * t463;
t358 = t269 * t380;
t128 = t134 * t290 * t358;
t495 = t255 * t298;
t135 = -t258 * t443 + (-pkin(2) * t495 - t258 * t538) * t307 - t255 * t446;
t129 = t135 * t291 * t358;
t460 = qJ(2,1) + qJ(3,1);
t461 = qJ(2,1) - qJ(3,1);
t510 = (t309 * t556 + (-cos(qJ(1,1) + t461) - cos(qJ(1,1) + t460)) * pkin(2)) / (sin(t460) + sin(t461));
t150 = t379 * t510;
t270 = 0.1e1 / t299 ^ 2;
t280 = 0.1e1 / t307;
t282 = t280 / t279;
t357 = t269 * t282 * t463;
t474 = t280 * t314;
t363 = t174 * t308 * t474;
t470 = t298 * t299;
t480 = t269 * t280;
t385 = t316 * t480;
t104 = t111 * t385;
t99 = -((-t299 * t300 + t308 * t309) * t310 + t333 * t183) * t530 + ((-t298 * t529 - t300 * t533) * t258 + (-t298 * t528 + t300 * t534) * t255 - pkin(1) * t464) * t307 - t174 * t446;
t345 = t99 * t358;
t90 = t104 + t345;
t327 = ((-pkin(1) * t470 * t90 + t174 * t280) * t307 + pkin(1) * t363) * t174 * t357;
t423 = t282 * t314 * t99;
t477 = t270 * t317;
t351 = t423 * t477;
t392 = t174 * t470;
t465 = t307 * t308;
t517 = t279 * t90;
t84 = t104 + t345 / 0.2e1;
t560 = t281 * (t313 * t517 + (t84 * t465 * t555 + (t111 * t269 - t392) * t280) * pkin(1));
t63 = pkin(2) * t517 + (-t392 * t474 + t465 * t90) * pkin(1);
t330 = t270 * t111 * t378 * t560 - t63 * t351 / 0.2e1 + t128 / 0.2e1 + t129 / 0.2e1 + t150 / 0.2e1 - t327 / 0.2e1;
t171 = t174 ^ 2;
t507 = t171 * t315;
t504 = t183 * t307;
t155 = -t255 * t504 + t489;
t143 = t155 * t290 * t385;
t156 = t258 * t504 + t495;
t144 = t156 * t291 * t385;
t159 = t171 * t357;
t285 = qJ(1,1) + qJ(2,1);
t252 = cos(t285);
t501 = t252 * t269;
t192 = t473 * t501;
t383 = t280 * t477;
t69 = t90 * t99 * t383;
t342 = t143 + t144 + t159 + t192 + t69;
t72 = -pkin(2) * t307 * t90 - t111 * t308 * t480;
t348 = t72 * t111 * t383;
t51 = t342 - t348;
t525 = 0.2e1 * t111 * t351 + t99 ^ 2 * t270 / t279 ^ 2 * t462;
t557 = g(3) * t300 - t309 * t354;
t573 = (t557 + (t51 + t330) * t576) * t308 - (pkin(1) * (t281 * t507 + t525) - t165) * t299;
t46 = t49 * pkin(1);
t572 = t46 + t559;
t47 = pkin(1) * t50;
t571 = t47 + t558;
t48 = pkin(1) * t51;
t570 = t48 + t557;
t420 = t110 ^ 2 * t277 * t316;
t101 = t268 * t420;
t569 = t101 + t164;
t419 = t111 ^ 2 * t281 * t316;
t103 = t270 * t419;
t568 = t103 + t165;
t421 = t109 ^ 2 * t273 * t316;
t105 = t266 * t421;
t567 = t105 + t163;
t563 = 2 * t316;
t553 = -g(1) / 0.2e1;
t552 = g(1) / 0.2e1;
t551 = -g(2) / 0.2e1;
t550 = g(2) / 0.2e1;
t238 = t286 + t283;
t546 = sin(t238) / 0.2e1;
t240 = t287 + t284;
t545 = sin(t240) / 0.2e1;
t242 = t288 + t285;
t544 = sin(t242) / 0.2e1;
t239 = -t286 + t283;
t543 = -cos(t239) / 0.2e1;
t241 = -t287 + t284;
t542 = -cos(t241) / 0.2e1;
t243 = -t288 + t285;
t541 = -cos(t243) / 0.2e1;
t326 = t124 + t125 + t148 - t329;
t377 = t61 * t427;
t428 = t314 * t562;
t520 = t272 * t70;
t25 = (-t377 + (-t428 - t520) * t109) * t485 + t326 + t344;
t524 = t25 * t292;
t325 = t126 + t127 + t149 - t328;
t376 = t62 * t425;
t426 = t314 * t561;
t518 = t276 * t71;
t26 = (-t376 + (-t426 - t518) * t110) * t481 + t325 + t343;
t523 = t26 * t295;
t324 = t128 + t129 + t150 - t327;
t375 = t63 * t423;
t424 = t314 * t560;
t516 = t280 * t72;
t27 = (-t375 + (-t424 - t516) * t111) * t477 + t324 + t342;
t522 = t27 * t298;
t500 = t253 * t272;
t498 = t254 * t276;
t496 = t255 * t280;
t494 = t256 * t272;
t492 = t257 * t276;
t490 = t258 * t280;
t487 = t265 * t273;
t486 = t265 * t292;
t483 = t267 * t277;
t482 = t267 * t295;
t479 = t269 * t281;
t478 = t269 * t298;
t397 = t292 * t509;
t136 = t274 * t397 + (t253 * t291 + t256 * t290) * t476;
t452 = (t88 * t365 + t136 * t293 / 0.2e1) * t556;
t396 = t295 * t508;
t137 = t278 * t396 + (t254 * t291 + t257 * t290) * t475;
t451 = (t89 * t364 + t137 * t296 / 0.2e1) * t556;
t395 = t298 * t507;
t138 = t282 * t395 + (t255 * t291 + t258 * t290) * t474;
t450 = (t90 * t363 + t138 * t299 / 0.2e1) * t556;
t440 = t172 * t314 * t88;
t16 = (t140 / 0.2e1 + t139 / 0.2e1 + t190 / 0.2e1 - t350 / 0.2e1 + t67 / 0.2e1 + t157 / 0.2e1 + t332) * t292 + t440;
t442 = t16 * t486;
t439 = t173 * t314 * t89;
t17 = (t142 / 0.2e1 + t141 / 0.2e1 + t191 / 0.2e1 - t349 / 0.2e1 + t68 / 0.2e1 + t158 / 0.2e1 + t331) * t295 + t439;
t441 = t17 * t482;
t422 = t90 * t174 * t314;
t18 = (t144 / 0.2e1 + t143 / 0.2e1 + t192 / 0.2e1 - t348 / 0.2e1 + t69 / 0.2e1 + t159 / 0.2e1 + t330) * t298 + t422;
t438 = t18 * t478;
t85 = t88 ^ 2;
t437 = (-0.2e1 * t271 + 0.1e1) * t272 * t85;
t86 = t89 ^ 2;
t436 = (-0.2e1 * t275 + 0.1e1) * t276 * t86;
t87 = t90 ^ 2;
t435 = (-0.2e1 * t279 + 0.1e1) * t280 * t87;
t434 = t272 * t524;
t433 = t276 * t523;
t40 = t293 * t567 + t302 * t572;
t432 = t40 * t488;
t41 = t296 * t569 + t305 * t571;
t431 = t41 * t484;
t42 = t299 * t568 + t308 * t570;
t430 = t42 * t480;
t429 = t280 * t522;
t418 = t130 * t487;
t417 = t131 * t487;
t416 = t132 * t483;
t415 = t133 * t483;
t414 = t134 * t479;
t413 = t135 * t479;
t412 = t151 * t488;
t411 = t152 * t488;
t410 = t153 * t484;
t409 = t154 * t484;
t408 = t155 * t480;
t407 = t156 * t480;
t406 = t559 * t488;
t405 = t558 * t484;
t404 = t557 * t480;
t403 = t163 * t488;
t402 = t164 * t484;
t401 = t165 * t480;
t400 = t292 * t512;
t399 = t295 * t511;
t398 = t298 * t510;
t390 = t273 * t486;
t387 = t277 * t482;
t384 = t281 * t478;
t374 = t272 * t442;
t373 = t276 * t441;
t372 = t280 * t438;
t371 = t130 * t390;
t370 = t131 * t390;
t369 = t132 * t387;
t368 = t133 * t387;
t367 = t134 * t384;
t366 = t135 * t384;
t221 = sin(t239);
t226 = cos(t238);
t341 = g(1) * t543 + g(2) * t546 + t221 * t551 + t226 * t553 + g(3) * sin(t283);
t223 = sin(t241);
t228 = cos(t240);
t340 = g(1) * t542 + g(2) * t545 + t223 * t551 + t228 * t553 + g(3) * sin(t284);
t225 = sin(t243);
t230 = cos(t242);
t339 = g(1) * t541 + g(2) * t544 + t225 * t551 + t230 * t553 + g(3) * sin(t285);
t338 = g(1) * t546 + g(2) * t543 + g(3) * t250 + t221 * t552 + t226 * t550;
t337 = g(1) * t545 + g(2) * t542 + g(3) * t251 + t223 * t552 + t228 * t550;
t336 = g(1) * t544 + g(2) * t541 + g(3) * t252 + t225 * t552 + t230 * t550;
t189 = g(1) * t255 + g(2) * t258;
t187 = g(1) * t254 + g(2) * t257;
t185 = g(1) * t253 + g(2) * t256;
t117 = t138 * t298 + t280 * t507;
t116 = t137 * t295 + t276 * t508;
t115 = t136 * t292 + t272 * t509;
t114 = t138 * t307 - t281 * t395;
t113 = t137 * t304 - t277 * t396;
t112 = t136 * t301 - t273 * t397;
t45 = t269 * t419 + t51 * t535 + t339;
t44 = t267 * t420 + t50 * t536 + t340;
t43 = t265 * t421 + t49 * t537 + t341;
t39 = t103 * t308 - t299 * t48 + t336;
t38 = t101 * t305 - t296 * t47 + t337;
t37 = t105 * t302 - t293 * t46 + t338;
t36 = -t293 * t572 + t302 * t567;
t35 = -t299 * t570 + t308 * t568;
t34 = -t296 * t571 + t305 * t569;
t33 = t185 * t292 + t301 * t36;
t32 = -t185 * t301 + t292 * t36;
t31 = t189 * t298 + t307 * t35;
t30 = -t189 * t307 + t298 * t35;
t29 = t187 * t295 + t304 * t34;
t28 = -t187 * t304 + t295 * t34;
t24 = 0.2e1 * t143 + 0.2e1 * t144 + 0.2e1 * t159 + 0.2e1 * t192 + 0.2e1 * t69 + (-t375 + (-t424 - 0.2e1 * t516) * t111) * t477 + t324;
t23 = 0.2e1 * t141 + 0.2e1 * t142 + 0.2e1 * t158 + 0.2e1 * t191 + 0.2e1 * t68 + (-t376 + (-t426 - 0.2e1 * t518) * t110) * t481 + t325;
t22 = 0.2e1 * t139 + 0.2e1 * t140 + 0.2e1 * t157 + 0.2e1 * t190 + 0.2e1 * t67 + (-t377 + (-t428 - 0.2e1 * t520) * t109) * t485 + t326;
t15 = -pkin(1) * (t299 * t24 + t308 * t525) + t336;
t14 = -pkin(1) * (t23 * t296 + t305 * t527) + t337;
t13 = -pkin(1) * (t22 * t293 + t302 * t526) + t338;
t12 = (-0.2e1 * t380 * t84 * t99 + t24 * t308) * pkin(1) + t339;
t11 = (-0.2e1 * t381 * t83 * t98 + t23 * t305) * pkin(1) + t340;
t10 = (-0.2e1 * t382 * t82 * t97 + t22 * t302) * pkin(1) + t341;
t9 = t307 * t522 + (-t280 + 0.2e1 * t307) * t422;
t8 = t304 * t523 + (-t276 + 0.2e1 * t304) * t439;
t7 = t301 * t524 + (-t272 + 0.2e1 * t301) * t440;
t6 = -t298 * t573 + t307 * t450;
t5 = -t295 * t574 + t304 * t451;
t4 = -t292 * t575 + t301 * t452;
t3 = t298 * t450 + t307 * t573;
t2 = t295 * t451 + t304 * t574;
t1 = t292 * t452 + t301 * t575;
t19 = [(t407 * t51 + t409 * t50 + t411 * t49) * t316, (t152 * t406 + t154 * t405 + t156 * t404) * t316, (t152 * t403 + t154 * t402 + t156 * t401) * t316, (t25 * t411 + t26 * t409 + t27 * t407 + (t25 * t417 + t26 * t415 + t27 * t413) * t314) * t316, (t10 * t411 + t11 * t409 + t12 * t407 + (t413 * t45 + t415 * t44 + t417 * t43) * t314) * t316, (t13 * t411 + t14 * t409 + t15 * t407 + (t37 * t417 + t38 * t415 + t39 * t413) * t314) * t316, (t152 * t374 + t154 * t373 + t156 * t372) * t563 + (-t85 * t499 - t86 * t497 - t87 * t495 + (t16 * t370 + t17 * t368 + t18 * t366) * t563) * t314, (t253 * t437 + t254 * t436 + t255 * t435) * t314 + (t7 * t411 + t8 * t409 + t9 * t407 + (t413 * t9 + t415 * t8 + t417 * t7) * t314) * t563, (t115 * t411 + t116 * t409 + t117 * t407) * t316 + (t253 * t434 + t254 * t433 + t255 * t429 + (t115 * t417 + t116 * t415 + t117 * t413) * t316) * t314, (t112 * t411 + t113 * t409 + t114 * t407) * t316 + (t25 * t253 + t254 * t26 + t255 * t27 + (t112 * t417 + t113 * t415 + t114 * t413) * t316) * t314, (t136 * t500 + t137 * t498 + t138 * t496) * t314, (t1 * t411 + t2 * t409 + t3 * t407) * t316 + (t32 * t500 + t28 * t498 + t30 * t496 + (t131 * t432 + t133 * t431 + t135 * t430) * t316) * t314, (t4 * t411 + t407 * t6 + t409 * t5) * t316 + (t33 * t500 + t29 * t498 + t31 * t496 + (-t366 * t42 - t368 * t41 - t370 * t40) * t316) * t314, t291 - g(1); (t408 * t51 + t410 * t50 + t412 * t49) * t316, (t151 * t406 + t153 * t405 + t155 * t404) * t316, (t151 * t403 + t153 * t402 + t155 * t401) * t316, (t25 * t412 + t26 * t410 + t27 * t408 + (t25 * t418 + t26 * t416 + t27 * t414) * t314) * t316, (t10 * t412 + t11 * t410 + t12 * t408 + (t414 * t45 + t416 * t44 + t418 * t43) * t314) * t316, (t13 * t412 + t14 * t410 + t15 * t408 + (t37 * t418 + t38 * t416 + t39 * t414) * t314) * t316, (t151 * t374 + t153 * t373 + t155 * t372) * t563 + (-t85 * t493 - t86 * t491 - t87 * t489 + (t16 * t371 + t17 * t369 + t18 * t367) * t563) * t314, (t256 * t437 + t257 * t436 + t258 * t435) * t314 + (t7 * t412 + t8 * t410 + t9 * t408 + (t414 * t9 + t416 * t8 + t418 * t7) * t314) * t563, (t115 * t412 + t116 * t410 + t117 * t408) * t316 + (t256 * t434 + t257 * t433 + t258 * t429 + (t115 * t418 + t116 * t416 + t117 * t414) * t316) * t314, (t112 * t412 + t113 * t410 + t114 * t408) * t316 + (t25 * t256 + t257 * t26 + t258 * t27 + (t112 * t418 + t113 * t416 + t114 * t414) * t316) * t314, (t136 * t494 + t137 * t492 + t138 * t490) * t314, (t1 * t412 + t2 * t410 + t3 * t408) * t316 + (t32 * t494 + t28 * t492 + t30 * t490 + (t130 * t432 + t132 * t431 + t134 * t430) * t316) * t314, (t4 * t412 + t408 * t6 + t410 * t5) * t316 + (t33 * t494 + t29 * t492 + t31 * t490 + (-t367 * t42 - t369 * t41 - t371 * t40) * t316) * t314, t290 - g(2); (t49 * t503 + t50 * t502 + t501 * t51) * t316, (t501 * t557 + t502 * t558 + t503 * t559) * t316, (t163 * t503 + t164 * t502 + t165 * t501) * t316, (t25 * t503 + t26 * t502 + t27 * t501 + (t25 * t512 + t26 * t511 + t27 * t510) * t314) * t316, (t10 * t503 + t11 * t502 + t12 * t501 + (t43 * t512 + t44 * t511 + t45 * t510) * t314) * t316, (t13 * t503 + t14 * t502 + t15 * t501 + (t37 * t512 + t38 * t511 + t39 * t510) * t314) * t316, (t250 * t442 + t251 * t441 + t252 * t438 + (t16 * t400 + t17 * t399 + t18 * t398) * t314) * t563, (t7 * t503 + t8 * t502 + t9 * t501 + (t510 * t9 + t511 * t8 + t512 * t7) * t314) * t563, (t115 * t503 + t116 * t502 + t117 * t501 + (t115 * t512 + t116 * t511 + t117 * t510) * t314) * t316, (t112 * t503 + t113 * t502 + t114 * t501 + (t112 * t512 + t113 * t511 + t114 * t510) * t314) * t316, 0, (t1 * t503 + t2 * t502 + t3 * t501 + (t301 * t40 * t512 + t304 * t41 * t511 + t307 * t42 * t510) * t314) * t316, (t4 * t503 + t5 * t502 + t6 * t501 + (-t398 * t42 - t399 * t41 - t40 * t400) * t314) * t316, t289 - g(3);];
tauX_reg  = t19;
