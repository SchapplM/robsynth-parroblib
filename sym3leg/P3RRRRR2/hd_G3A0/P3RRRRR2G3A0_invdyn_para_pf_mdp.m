% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G3A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:13
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRRRR2G3A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G3A0_invdyn_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:12:34
% EndTime: 2020-03-09 21:12:46
% DurationCPUTime: 12.72s
% Computational Cost: add. (33354->561), mult. (83366->1076), div. (14535->22), fcn. (78822->42), ass. (0->469)
t2014 = legFrame(3,2);
t1984 = sin(t2014);
t1987 = cos(t2014);
t2039 = xDP(2);
t2040 = xDP(1);
t1906 = t1984 * t2040 + t1987 * t2039;
t2020 = sin(qJ(3,3));
t2021 = sin(qJ(2,3));
t2022 = sin(qJ(1,3));
t2029 = cos(qJ(3,3));
t2030 = cos(qJ(2,3));
t2031 = cos(qJ(1,3));
t2038 = xDP(3);
t2060 = t1984 * t2039 - t1987 * t2040;
t2204 = t2022 * t2038;
t1843 = ((t2060 * t2022 - t2031 * t2038) * t2021 - t2030 * (t2060 * t2031 + t2204)) * t2029 + t2020 * t1906;
t2000 = 0.1e1 / t2029;
t1993 = 0.1e1 / t2021;
t2044 = 0.1e1 / pkin(1);
t2228 = t1993 * t2044;
t2130 = t2000 * t2228;
t1834 = t1843 * t2130;
t1915 = t2021 * t2022 - t2031 * t2030;
t1916 = t2021 * t2031 + t2022 * t2030;
t2185 = pkin(1) * t2020 * t2030;
t2272 = pkin(2) * t2040;
t2273 = pkin(2) * t2039;
t1999 = t2029 ^ 2;
t2279 = pkin(2) * t1999;
t2280 = pkin(1) * t2040;
t2281 = pkin(1) * t2039;
t1831 = (-t2060 * t1915 + t1916 * t2038) * t2279 + ((-t2020 * t2273 - t2031 * t2280) * t1987 + (-t2020 * t2272 + t2031 * t2281) * t1984 + pkin(1) * t2204) * t2029 - t1906 * t2185;
t2001 = 0.1e1 / t2029 ^ 2;
t2042 = 0.1e1 / pkin(2);
t2194 = t2042 * t2044;
t2119 = t2001 * t2194;
t2087 = t1993 * t2119;
t2068 = t1831 * t2087;
t1822 = t1834 + t2068;
t2231 = t1993 * t2000;
t2276 = pkin(2) * t2029;
t1804 = -t1843 * t2030 * t2231 - t1822 * t2276;
t1994 = 0.1e1 / t2021 ^ 2;
t2045 = 0.1e1 / pkin(1) ^ 2;
t2227 = t1994 * t2045;
t2128 = t2000 * t2227;
t2072 = t1804 * t1843 * t2128;
t1801 = t1822 * t1831 * t2128;
t2236 = t1987 * t2020;
t2252 = t1915 * t2029;
t1885 = t1984 * t2252 + t2236;
t2018 = xDDP(2);
t1873 = t1885 * t2018 * t2130;
t2242 = t1984 * t2020;
t1886 = -t1987 * t2252 + t2242;
t2019 = xDDP(1);
t1874 = t1886 * t2019 * t2130;
t1903 = t1906 ^ 2;
t2002 = t2000 / t1999;
t2086 = t1993 * t2002 * t2194;
t1891 = t1903 * t2086;
t2078 = t1801 + t1873 + t1874 + t1891;
t2017 = xDDP(3);
t2207 = t2017 * t2044;
t2011 = qJ(1,3) + qJ(2,3);
t1981 = sin(t2011);
t2249 = t1981 * t1993;
t2081 = t2207 * t2249;
t1783 = -t2072 + t2078 - t2081;
t1780 = t1783 * pkin(1);
t2075 = t1987 * g(1) - g(2) * t1984;
t1897 = g(3) * t2031 + t2075 * t2022;
t2318 = t1780 + t1897;
t2016 = legFrame(1,2);
t1986 = sin(t2016);
t1989 = cos(t2016);
t1908 = t1986 * t2040 + t1989 * t2039;
t2026 = sin(qJ(3,1));
t2027 = sin(qJ(2,1));
t2028 = sin(qJ(1,1));
t2035 = cos(qJ(3,1));
t2036 = cos(qJ(2,1));
t2037 = cos(qJ(1,1));
t2058 = t1986 * t2039 - t1989 * t2040;
t2198 = t2028 * t2038;
t1845 = ((t2058 * t2028 - t2037 * t2038) * t2027 - t2036 * (t2058 * t2037 + t2198)) * t2035 + t2026 * t1908;
t2008 = 0.1e1 / t2035;
t1997 = 0.1e1 / t2027;
t2218 = t1997 * t2044;
t2122 = t2008 * t2218;
t1837 = t1845 * t2122;
t1919 = t2027 * t2028 - t2037 * t2036;
t1920 = t2027 * t2037 + t2028 * t2036;
t2183 = pkin(1) * t2026 * t2036;
t2007 = t2035 ^ 2;
t2277 = pkin(2) * t2007;
t1833 = (-t2058 * t1919 + t1920 * t2038) * t2277 + ((-t2026 * t2273 - t2037 * t2280) * t1989 + (-t2026 * t2272 + t2037 * t2281) * t1986 + pkin(1) * t2198) * t2035 - t1908 * t2183;
t2009 = 0.1e1 / t2035 ^ 2;
t2117 = t2009 * t2194;
t2083 = t1997 * t2117;
t2064 = t1833 * t2083;
t1824 = t1837 + t2064;
t2221 = t1997 * t2008;
t2274 = pkin(2) * t2035;
t1806 = -t1845 * t2036 * t2221 - t1824 * t2274;
t1998 = 0.1e1 / t2027 ^ 2;
t2217 = t1998 * t2045;
t2120 = t2008 * t2217;
t2070 = t1806 * t1845 * t2120;
t1803 = t1824 * t1833 * t2120;
t2232 = t1989 * t2026;
t2250 = t1919 * t2035;
t1889 = t1986 * t2250 + t2232;
t1877 = t1889 * t2018 * t2122;
t2238 = t1986 * t2026;
t1890 = -t1989 * t2250 + t2238;
t1878 = t1890 * t2019 * t2122;
t1905 = t1908 ^ 2;
t2010 = t2008 / t2007;
t2082 = t1997 * t2010 * t2194;
t1893 = t1905 * t2082;
t2076 = t1803 + t1877 + t1878 + t1893;
t2013 = qJ(1,1) + qJ(2,1);
t1983 = sin(t2013);
t2245 = t1983 * t1997;
t2079 = t2207 * t2245;
t1785 = -t2070 + t2076 - t2079;
t1781 = t1785 * pkin(1);
t2073 = t1989 * g(1) - g(2) * t1986;
t1901 = g(3) * t2037 + t2073 * t2028;
t2317 = t1781 + t1901;
t2015 = legFrame(2,2);
t1985 = sin(t2015);
t1988 = cos(t2015);
t1907 = t1985 * t2040 + t1988 * t2039;
t2023 = sin(qJ(3,2));
t2024 = sin(qJ(2,2));
t2025 = sin(qJ(1,2));
t2032 = cos(qJ(3,2));
t2033 = cos(qJ(2,2));
t2034 = cos(qJ(1,2));
t2059 = t1985 * t2039 - t1988 * t2040;
t2201 = t2025 * t2038;
t1844 = ((t2059 * t2025 - t2034 * t2038) * t2024 - t2033 * (t2059 * t2034 + t2201)) * t2032 + t2023 * t1907;
t2004 = 0.1e1 / t2032;
t1995 = 0.1e1 / t2024;
t2223 = t1995 * t2044;
t2126 = t2004 * t2223;
t1836 = t1844 * t2126;
t1917 = t2024 * t2025 - t2034 * t2033;
t1918 = t2024 * t2034 + t2025 * t2033;
t2284 = pkin(1) * t2033;
t2184 = t2023 * t2284;
t2003 = t2032 ^ 2;
t2278 = pkin(2) * t2003;
t1832 = (-t2059 * t1917 + t1918 * t2038) * t2278 + ((-t2023 * t2273 - t2034 * t2280) * t1988 + (-t2023 * t2272 + t2034 * t2281) * t1985 + pkin(1) * t2201) * t2032 - t1907 * t2184;
t2005 = 0.1e1 / t2032 ^ 2;
t2118 = t2005 * t2194;
t2085 = t1995 * t2118;
t2066 = t1832 * t2085;
t1823 = t1836 + t2066;
t2226 = t1995 * t2004;
t2275 = pkin(2) * t2032;
t1805 = -t1844 * t2033 * t2226 - t1823 * t2275;
t1996 = 0.1e1 / t2024 ^ 2;
t2222 = t1996 * t2045;
t2124 = t2004 * t2222;
t2071 = t1805 * t1844 * t2124;
t1802 = t1823 * t1832 * t2124;
t2234 = t1988 * t2023;
t2251 = t1917 * t2032;
t1887 = t1985 * t2251 + t2234;
t1875 = t1887 * t2018 * t2126;
t2240 = t1985 * t2023;
t1888 = -t1988 * t2251 + t2240;
t1876 = t1888 * t2019 * t2126;
t1904 = t1907 ^ 2;
t2006 = t2004 / t2003;
t2084 = t1995 * t2006 * t2194;
t1892 = t1904 * t2084;
t2077 = t1802 + t1875 + t1876 + t1892;
t2012 = qJ(1,2) + qJ(2,2);
t1982 = sin(t2012);
t2247 = t1982 * t1995;
t2080 = t2207 * t2247;
t1784 = -t2071 + t2077 - t2080;
t1782 = pkin(1) * t1784;
t2074 = t1988 * g(1) - g(2) * t1985;
t1899 = g(3) * t2034 + t2074 * t2025;
t2316 = t1782 + t1899;
t2162 = t1844 ^ 2 * t2005 * t2044;
t1835 = t1996 * t2162;
t1900 = -g(3) * t2025 + t2074 * t2034;
t2315 = t1835 + t1900;
t2163 = t1843 ^ 2 * t2001 * t2044;
t1838 = t1994 * t2163;
t1898 = -g(3) * t2022 + t2075 * t2031;
t2314 = t1838 + t1898;
t2161 = t1845 ^ 2 * t2009 * t2044;
t1839 = t1998 * t2161;
t1902 = -g(3) * t2028 + t2073 * t2037;
t2313 = t1839 + t1902;
t2206 = t2020 * t2021;
t2136 = t1906 * t2206;
t2197 = t2029 * t2030;
t2215 = t2000 * t2042;
t2258 = t1822 * t1999;
t1795 = pkin(2) * t2258 + (t1822 * t2197 - t2136 * t2215) * pkin(1);
t2182 = t1915 * t2279;
t2285 = pkin(1) * t2031;
t1864 = -t1984 * t2182 + (-pkin(2) * t2236 + t1984 * t2285) * t2029 - t1987 * t2185;
t1858 = t1864 * t2018 * t2087;
t1867 = t1987 * t2182 + (-pkin(2) * t2242 - t1987 * t2285) * t2029 - t1984 * t2185;
t1861 = t1867 * t2019 * t2087;
t2116 = t2017 * t2194;
t1894 = pkin(1) * t2022 + t1916 * t2276;
t2148 = t1894 * t2231;
t1882 = t2116 * t2148;
t2214 = t2002 * t2042;
t2166 = t1831 * t2214;
t2069 = t2166 * t2227;
t2115 = -t2042 * t2045 / 0.2e1;
t2090 = t1906 * t2030 * t2215;
t2305 = ((-pkin(1) * t1822 * t2206 + t1906 * t2000) * t2029 + pkin(1) * t2090) * t1906;
t1816 = t1834 + t2068 / 0.2e1;
t2041 = pkin(2) ^ 2;
t2297 = 0.2e1 * pkin(2);
t2308 = (t2041 * t2258 + (t1816 * t2197 * t2297 + (t1843 * t1993 - t2136) * t2000) * pkin(1)) * t2001;
t2057 = t1994 * t1843 * t2115 * t2308 - t1795 * t2069 / 0.2e1 - t2086 * t2305 / 0.2e1 + t1858 / 0.2e1 + t1861 / 0.2e1 + t1882 / 0.2e1;
t2043 = 0.1e1 / pkin(2) ^ 2;
t2193 = t2043 * t2045;
t2192 = 0.2e1 * t1843 * t2069 + t1831 ^ 2 * t1994 / t1999 ^ 2 * t2193;
t2255 = t1903 * t2043;
t2298 = 0.2e1 * pkin(1);
t2312 = (-(t1783 + t2057) * t2298 - t1897) * t2030 + t2021 * (pkin(1) * (t2001 * t2255 + t2192) - t1898);
t2203 = t2023 * t2024;
t2134 = t1907 * t2203;
t2196 = t2032 * t2033;
t2212 = t2004 * t2042;
t2257 = t1823 * t2003;
t1796 = pkin(2) * t2257 + (t1823 * t2196 - t2134 * t2212) * pkin(1);
t2181 = t1917 * t2278;
t2283 = pkin(1) * t2034;
t1865 = -t1985 * t2181 + (-pkin(2) * t2234 + t1985 * t2283) * t2032 - t1988 * t2184;
t1859 = t1865 * t2018 * t2085;
t1868 = t1988 * t2181 + (-pkin(2) * t2240 - t1988 * t2283) * t2032 - t1985 * t2184;
t1862 = t1868 * t2019 * t2085;
t1895 = pkin(1) * t2025 + t1918 * t2275;
t2147 = t1895 * t2226;
t1883 = t2116 * t2147;
t2211 = t2006 * t2042;
t2165 = t1832 * t2211;
t2067 = t2165 * t2222;
t2089 = t1907 * t2033 * t2212;
t2304 = ((-pkin(1) * t1823 * t2203 + t1907 * t2004) * t2032 + pkin(1) * t2089) * t1907;
t1817 = t1836 + t2066 / 0.2e1;
t2307 = (t2041 * t2257 + (t1817 * t2196 * t2297 + (t1844 * t1995 - t2134) * t2004) * pkin(1)) * t2005;
t2056 = t1996 * t1844 * t2115 * t2307 - t1796 * t2067 / 0.2e1 - t2084 * t2304 / 0.2e1 + t1859 / 0.2e1 + t1862 / 0.2e1 + t1883 / 0.2e1;
t2191 = 0.2e1 * t1844 * t2067 + t1832 ^ 2 * t1996 / t2003 ^ 2 * t2193;
t2254 = t1904 * t2043;
t2311 = (-(t1784 + t2056) * t2298 - t1899) * t2033 + t2024 * (pkin(1) * (t2005 * t2254 + t2191) - t1900);
t2200 = t2026 * t2027;
t2132 = t1908 * t2200;
t2195 = t2035 * t2036;
t2209 = t2008 * t2042;
t2256 = t1824 * t2007;
t1797 = pkin(2) * t2256 + (t1824 * t2195 - t2132 * t2209) * pkin(1);
t2180 = t1919 * t2277;
t2282 = pkin(1) * t2037;
t1866 = -t1986 * t2180 + (-pkin(2) * t2232 + t1986 * t2282) * t2035 - t1989 * t2183;
t1860 = t1866 * t2018 * t2083;
t1869 = t1989 * t2180 + (-pkin(2) * t2238 - t1989 * t2282) * t2035 - t1986 * t2183;
t1863 = t1869 * t2019 * t2083;
t1896 = pkin(1) * t2028 + t1920 * t2274;
t2146 = t1896 * t2221;
t1884 = t2116 * t2146;
t2208 = t2010 * t2042;
t2164 = t1833 * t2208;
t2065 = t2164 * t2217;
t2088 = t1908 * t2036 * t2209;
t2303 = ((-pkin(1) * t1824 * t2200 + t1908 * t2008) * t2035 + pkin(1) * t2088) * t1908;
t1818 = t1837 + t2064 / 0.2e1;
t2306 = (t2041 * t2256 + (t1818 * t2195 * t2297 + (t1845 * t1997 - t2132) * t2008) * pkin(1)) * t2009;
t2055 = t1998 * t1845 * t2115 * t2306 - t1797 * t2065 / 0.2e1 - t2082 * t2303 / 0.2e1 + t1860 / 0.2e1 + t1863 / 0.2e1 + t1884 / 0.2e1;
t2190 = 0.2e1 * t1845 * t2065 + t1833 ^ 2 * t1998 / t2007 ^ 2 * t2193;
t2253 = t1905 * t2043;
t2310 = (-(t1785 + t2055) * t2298 - t1901) * t2036 + t2027 * (pkin(1) * (t2009 * t2253 + t2190) - t1902);
t2309 = 0.2e1 * t2044;
t2299 = -0.2e1 * pkin(1);
t2296 = 2 * MDP(7);
t2295 = 2 * MDP(8);
t2293 = g(1) / 0.2e1;
t2292 = -g(2) / 0.2e1;
t1967 = -t2014 + t2011;
t2291 = sin(t1967) / 0.2e1;
t1969 = -t2015 + t2012;
t2290 = sin(t1969) / 0.2e1;
t1971 = -t2016 + t2013;
t2289 = sin(t1971) / 0.2e1;
t1966 = t2014 + t2011;
t2288 = cos(t1966) / 0.2e1;
t1968 = t2015 + t2012;
t2287 = cos(t1968) / 0.2e1;
t1970 = t2016 + t2013;
t2286 = cos(t1970) / 0.2e1;
t2268 = MDP(1) * t2044;
t2267 = MDP(2) * t2044;
t2266 = MDP(3) * t2044;
t2265 = MDP(4) * t2044;
t2264 = MDP(5) * t2044;
t2263 = MDP(6) * t2044;
t2262 = MDP(11) * t2042;
t2261 = t1804 * t2000;
t2260 = t1805 * t2004;
t2259 = t1806 * t2008;
t2248 = t1981 * t2017;
t2246 = t1982 * t2017;
t2244 = t1983 * t2017;
t2243 = t1984 * t2000;
t2241 = t1985 * t2004;
t2239 = t1986 * t2008;
t2237 = t1987 * t2000;
t2235 = t1988 * t2004;
t2233 = t1989 * t2008;
t2230 = t1993 * t2001;
t2229 = t1993 * t2020;
t2225 = t1995 * t2005;
t2224 = t1995 * t2023;
t2220 = t1997 * t2009;
t2219 = t1997 * t2026;
t2216 = t2000 * t2020;
t2213 = t2004 * t2023;
t2210 = t2008 * t2026;
t2139 = t2020 * t2255;
t1870 = t2002 * t2139 + (t1984 * t2019 + t1987 * t2018) * t2215;
t2189 = (t1822 * t2090 + t1870 * t2021 / 0.2e1) * t2299;
t2138 = t2023 * t2254;
t1871 = t2006 * t2138 + (t1985 * t2019 + t1988 * t2018) * t2212;
t2188 = (t1823 * t2089 + t1871 * t2024 / 0.2e1) * t2299;
t2137 = t2026 * t2253;
t1872 = t2010 * t2137 + (t1986 * t2019 + t1989 * t2018) * t2209;
t2187 = (t1824 * t2088 + t1872 * t2027 / 0.2e1) * t2299;
t2102 = t2214 * t2305;
t2105 = t1795 * t2166;
t2114 = t1858 + t1861 + t1882;
t2173 = t2042 * t2308;
t1758 = (-t2102 - t2248) * t2228 + (-t2105 + (-t2173 - t2261) * t1843) * t2227 + t2078 + t2114;
t2179 = t1758 * t2216;
t2101 = t2211 * t2304;
t2104 = t1796 * t2165;
t2113 = t1859 + t1862 + t1883;
t2172 = t2042 * t2307;
t1759 = (-t2101 - t2246) * t2223 + (-t2104 + (-t2172 - t2260) * t1844) * t2222 + t2077 + t2113;
t2178 = t1759 * t2213;
t2100 = t2208 * t2303;
t2103 = t1797 * t2164;
t2112 = t1860 + t1863 + t1884;
t2171 = t2042 * t2306;
t1761 = (-t2100 - t2244) * t2218 + (-t2103 + (-t2171 - t2259) * t1845) * t2217 + t2076 + t2112;
t2177 = t1761 * t2210;
t1774 = t2314 * t2021 + t2318 * t2030;
t2176 = t1774 * t2231;
t1775 = t2315 * t2024 + t2316 * t2033;
t2175 = t1775 * t2226;
t1776 = t2313 * t2027 + t2317 * t2036;
t2174 = t1776 * t2221;
t1819 = t1822 ^ 2;
t2170 = t1819 * (-0.2e1 * t1999 + 0.1e1) * t2000;
t1820 = t1823 ^ 2;
t2169 = t1820 * (-0.2e1 * t2003 + 0.1e1) * t2004;
t1821 = t1824 ^ 2;
t2168 = t1821 * (-0.2e1 * t2007 + 0.1e1) * t2008;
t2167 = t1824 * t1908 * t2042;
t2160 = t1864 * t2230;
t2159 = t1865 * t2225;
t2158 = t1866 * t2220;
t2157 = t1867 * t2230;
t2156 = t1868 * t2225;
t2155 = t1869 * t2220;
t2154 = t1885 * t2231;
t2153 = t1886 * t2231;
t2152 = t1887 * t2226;
t2151 = t1888 * t2226;
t2150 = t1889 * t2221;
t2149 = t1890 * t2221;
t2145 = t1897 * t2231;
t2144 = t1898 * t2231;
t2143 = t1899 * t2226;
t2142 = t1900 * t2226;
t2141 = t1901 * t2221;
t2140 = t1902 * t2221;
t2135 = t1906 * t2042 * t1822;
t2133 = t1907 * t2042 * t1823;
t2131 = t1993 * t2216;
t2129 = t2001 * t2229;
t2127 = t1995 * t2213;
t2125 = t2005 * t2224;
t2123 = t1997 * t2210;
t2121 = t2009 * t2219;
t1750 = (t1874 / 0.2e1 + t1873 / 0.2e1 - t2081 / 0.2e1 - t2072 / 0.2e1 + t1801 / 0.2e1 + t1891 / 0.2e1 + t2057) * t2020 + t2135;
t2108 = t1750 * t2131;
t1751 = (t1876 / 0.2e1 + t1875 / 0.2e1 - t2080 / 0.2e1 - t2071 / 0.2e1 + t1802 / 0.2e1 + t1892 / 0.2e1 + t2056) * t2023 + t2133;
t2107 = t1751 * t2127;
t1752 = (t1878 / 0.2e1 + t1877 / 0.2e1 - t2079 / 0.2e1 - t2070 / 0.2e1 + t1803 / 0.2e1 + t1893 / 0.2e1 + t2055) * t2026 + t2167;
t2106 = t1752 * t2123;
t2099 = t1864 * t2129;
t2098 = t1865 * t2125;
t2097 = t1866 * t2121;
t2096 = t1867 * t2129;
t2095 = t1868 * t2125;
t2094 = t1869 * t2121;
t2093 = t1894 * t2131;
t2092 = t1895 * t2127;
t2091 = t1896 * t2123;
t1951 = sin(t1966);
t1958 = cos(t1967);
t2063 = g(1) * t2291 + g(2) * t2288 + t1951 * t2293 + t1958 * t2292 + g(3) * cos(t2011);
t1953 = sin(t1968);
t1960 = cos(t1969);
t2062 = g(1) * t2290 + g(2) * t2287 + t1953 * t2293 + t1960 * t2292 + g(3) * cos(t2012);
t1955 = sin(t1970);
t1962 = cos(t1971);
t2061 = g(1) * t2289 + g(2) * t2286 + t1955 * t2293 + t1962 * t2292 + g(3) * cos(t2013);
t2054 = g(1) * t2288 + g(2) * t2291 - g(3) * t1981 + t1951 * t2292 + t1958 * t2293;
t2053 = g(1) * t2287 + g(2) * t2290 - g(3) * t1982 + t1953 * t2292 + t1960 * t2293;
t2052 = g(1) * t2286 + g(2) * t2289 - g(3) * t1983 + t1955 * t2292 + t1962 * t2293;
t1926 = g(1) * t1986 + g(2) * t1989;
t1924 = g(1) * t1985 + g(2) * t1988;
t1922 = g(1) * t1984 + g(2) * t1987;
t1851 = t1872 * t2026 + t2008 * t2253;
t1850 = t1871 * t2023 + t2004 * t2254;
t1849 = t1870 * t2020 + t2000 * t2255;
t1848 = t1872 * t2035 - t2009 * t2137;
t1847 = t1871 * t2032 - t2005 * t2138;
t1846 = t1870 * t2029 - t2001 * t2139;
t1779 = t2036 * t1781 + t1997 * t2161 + t2061;
t1778 = t1784 * t2284 + t1995 * t2162 + t2062;
t1777 = t2030 * t1780 + t1993 * t2163 + t2063;
t1773 = -t2027 * t1781 + t2036 * t1839 + t2052;
t1772 = -t2024 * t1782 + t2033 * t1835 + t2053;
t1771 = -t2021 * t1780 + t2030 * t1838 + t2054;
t1770 = -t2027 * t2317 + t2313 * t2036;
t1769 = -t2021 * t2318 + t2314 * t2030;
t1768 = -t2024 * t2316 + t2315 * t2033;
t1767 = t1770 * t2035 + t1926 * t2026;
t1766 = t1770 * t2026 - t1926 * t2035;
t1765 = t1769 * t2029 + t1922 * t2020;
t1764 = t1769 * t2020 - t1922 * t2029;
t1763 = t1768 * t2032 + t1924 * t2023;
t1762 = t1768 * t2023 - t1924 * t2032;
t1760 = 0.2e1 * t1803 + 0.2e1 * t1877 + 0.2e1 * t1878 + 0.2e1 * t1893 + (-t2100 - 0.2e1 * t2244) * t2218 + (-t2103 + (-t2171 - 0.2e1 * t2259) * t1845) * t2217 + t2112;
t1757 = 0.2e1 * t1801 + 0.2e1 * t1873 + 0.2e1 * t1874 + 0.2e1 * t1891 + (-t2102 - 0.2e1 * t2248) * t2228 + (-t2105 + (-t2173 - 0.2e1 * t2261) * t1843) * t2227 + t2114;
t1756 = 0.2e1 * t1802 + 0.2e1 * t1875 + 0.2e1 * t1876 + 0.2e1 * t1892 + (-t2101 - 0.2e1 * t2246) * t2223 + (-t2104 + (-t2172 - 0.2e1 * t2260) * t1844) * t2222 + t2113;
t1749 = -pkin(1) * (t2027 * t1760 + t2190 * t2036) + t2052;
t1748 = -pkin(1) * (t2024 * t1756 + t2191 * t2033) + t2053;
t1747 = -pkin(1) * (t2021 * t1757 + t2192 * t2030) + t2054;
t1746 = (-0.2e1 * t1818 * t1833 * t2117 + t1760 * t2036) * pkin(1) + t2061;
t1745 = (-0.2e1 * t1817 * t1832 * t2118 + t1756 * t2033) * pkin(1) + t2062;
t1744 = (-0.2e1 * t1816 * t1831 * t2119 + t1757 * t2030) * pkin(1) + t2063;
t1743 = t1761 * t2026 * t2035 + (-t2008 + 0.2e1 * t2035) * t2167;
t1742 = t1759 * t2023 * t2032 + (-t2004 + 0.2e1 * t2032) * t2133;
t1741 = t1758 * t2020 * t2029 + (-t2000 + 0.2e1 * t2029) * t2135;
t1740 = t2310 * t2026 + t2035 * t2187;
t1739 = t2026 * t2187 - t2310 * t2035;
t1738 = t2311 * t2023 + t2032 * t2188;
t1737 = t2023 * t2188 - t2311 * t2032;
t1736 = t2312 * t2020 + t2029 * t2189;
t1735 = t2020 * t2189 - t2312 * t2029;
t1 = [(t1783 * t2153 + t1784 * t2151 + t1785 * t2149) * t2268 + (t1886 * t2145 + t1888 * t2143 + t1890 * t2141) * t2267 + (t1886 * t2144 + t1888 * t2142 + t1890 * t2140) * t2266 + (t1758 * t2153 + t1759 * t2151 + t1761 * t2149 + (t1758 * t2157 + t1759 * t2156 + t1761 * t2155) * t2042) * t2265 + (t1744 * t2153 + t1745 * t2151 + t1746 * t2149 + (t1777 * t2157 + t1778 * t2156 + t1779 * t2155) * t2042) * t2264 + (t1747 * t2153 + t1748 * t2151 + t1749 * t2149 + (t1771 * t2157 + t1772 * t2156 + t1773 * t2155) * t2042) * t2263 + ((t1886 * t2108 + t1888 * t2107 + t1890 * t2106) * t2309 + (-t1819 * t2242 - t1820 * t2240 - t1821 * t2238 + (t1750 * t2096 + t1751 * t2095 + t1752 * t2094) * t2309) * t2042) * MDP(7) + ((t1984 * t2170 + t1985 * t2169 + t1986 * t2168) * t2042 + (t1741 * t2153 + t1742 * t2151 + t1743 * t2149 + (t1741 * t2157 + t1742 * t2156 + t1743 * t2155) * t2042) * t2309) * MDP(8) + ((t1849 * t2153 + t1850 * t2151 + t1851 * t2149) * t2044 + (t1984 * t2179 + t1985 * t2178 + t1986 * t2177 + (t1849 * t2157 + t1850 * t2156 + t1851 * t2155) * t2044) * t2042) * MDP(9) + ((t1846 * t2153 + t1847 * t2151 + t1848 * t2149) * t2044 + (t1758 * t1984 + t1759 * t1985 + t1761 * t1986 + (t1846 * t2157 + t1847 * t2156 + t1848 * t2155) * t2044) * t2042) * MDP(10) + (t1870 * t2243 + t1871 * t2241 + t1872 * t2239) * t2262 + ((t1735 * t2153 + t1737 * t2151 + t1739 * t2149) * t2044 + (t1762 * t2241 + t1764 * t2243 + t1766 * t2239 + (t1867 * t2176 + t1868 * t2175 + t1869 * t2174) * t2044) * t2042) * MDP(12) + ((t1736 * t2153 + t1738 * t2151 + t1740 * t2149) * t2044 + (t1763 * t2241 + t1765 * t2243 + t1767 * t2239 + (-t1774 * t2096 - t1775 * t2095 - t1776 * t2094) * t2044) * t2042) * MDP(13) + (t2019 - g(1)) * MDP(14); (t1783 * t2154 + t1784 * t2152 + t1785 * t2150) * t2268 + (t1885 * t2145 + t1887 * t2143 + t1889 * t2141) * t2267 + (t1885 * t2144 + t1887 * t2142 + t1889 * t2140) * t2266 + (t1758 * t2154 + t1759 * t2152 + t1761 * t2150 + (t1758 * t2160 + t1759 * t2159 + t1761 * t2158) * t2042) * t2265 + (t1744 * t2154 + t1745 * t2152 + t1746 * t2150 + (t1777 * t2160 + t1778 * t2159 + t1779 * t2158) * t2042) * t2264 + (t1747 * t2154 + t1748 * t2152 + t1749 * t2150 + (t1771 * t2160 + t1772 * t2159 + t1773 * t2158) * t2042) * t2263 + ((t1885 * t2108 + t1887 * t2107 + t1889 * t2106) * t2309 + (-t1819 * t2236 - t1820 * t2234 - t1821 * t2232 + (t1750 * t2099 + t1751 * t2098 + t1752 * t2097) * t2309) * t2042) * MDP(7) + ((t1987 * t2170 + t1988 * t2169 + t1989 * t2168) * t2042 + (t1741 * t2154 + t1742 * t2152 + t1743 * t2150 + (t1741 * t2160 + t1742 * t2159 + t1743 * t2158) * t2042) * t2309) * MDP(8) + ((t1849 * t2154 + t1850 * t2152 + t1851 * t2150) * t2044 + (t1987 * t2179 + t1988 * t2178 + t1989 * t2177 + (t1849 * t2160 + t1850 * t2159 + t1851 * t2158) * t2044) * t2042) * MDP(9) + ((t1846 * t2154 + t1847 * t2152 + t1848 * t2150) * t2044 + (t1758 * t1987 + t1759 * t1988 + t1761 * t1989 + (t1846 * t2160 + t1847 * t2159 + t1848 * t2158) * t2044) * t2042) * MDP(10) + (t1870 * t2237 + t1871 * t2235 + t1872 * t2233) * t2262 + ((t1735 * t2154 + t1737 * t2152 + t1739 * t2150) * t2044 + (t1762 * t2235 + t1764 * t2237 + t1766 * t2233 + (t1864 * t2176 + t1865 * t2175 + t1866 * t2174) * t2044) * t2042) * MDP(12) + ((t1736 * t2154 + t1738 * t2152 + t1740 * t2150) * t2044 + (t1763 * t2235 + t1765 * t2237 + t1767 * t2233 + (-t1774 * t2099 - t1775 * t2098 - t1776 * t2097) * t2044) * t2042) * MDP(13) + (t2018 - g(2)) * MDP(14); (t2017 - g(3)) * MDP(14) + ((-t1783 * t2249 - t1784 * t2247 - t1785 * t2245) * MDP(1) + (-t1897 * t2249 - t1899 * t2247 - t1901 * t2245) * MDP(2) + (-t1898 * t2249 - t1900 * t2247 - t1902 * t2245) * MDP(3) + (-t1758 * t2249 - t1759 * t2247 - t1761 * t2245) * MDP(4) + (-t1744 * t2249 - t1745 * t2247 - t1746 * t2245) * MDP(5) + (-t1747 * t2249 - t1748 * t2247 - t1749 * t2245) * MDP(6) + (-t1849 * t2249 - t1850 * t2247 - t1851 * t2245) * MDP(9) + (-t1846 * t2249 - t1847 * t2247 - t1848 * t2245) * MDP(10) + (-t1735 * t2249 - t1737 * t2247 - t1739 * t2245) * MDP(12) + (-t1736 * t2249 - t1738 * t2247 - t1740 * t2245) * MDP(13) + (-t1750 * t1981 * t2229 - t1751 * t1982 * t2224 - t1752 * t1983 * t2219) * t2296 + (-t1741 * t2249 - t1742 * t2247 - t1743 * t2245) * t2295 + ((t1758 * t2148 + t1759 * t2147 + t1761 * t2146) * MDP(4) + (t1777 * t2148 + t1778 * t2147 + t1779 * t2146) * MDP(5) + (t1771 * t2148 + t1772 * t2147 + t1773 * t2146) * MDP(6) + (t1849 * t2148 + t1850 * t2147 + t1851 * t2146) * MDP(9) + (t1846 * t2148 + t1847 * t2147 + t1848 * t2146) * MDP(10) + (t1774 * t1894 * t1993 + t1775 * t1895 * t1995 + t1776 * t1896 * t1997) * MDP(12) + (-t1774 * t2093 - t1775 * t2092 - t1776 * t2091) * MDP(13) + (t1750 * t2093 + t1751 * t2092 + t1752 * t2091) * t2296 + (t1741 * t2148 + t1742 * t2147 + t1743 * t2146) * t2295) * t2042) * t2044;];
tauX  = t1;
