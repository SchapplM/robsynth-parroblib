% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR2G3P3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G3P3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:13
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G3P3A0_coriolisvec_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:12:56
% EndTime: 2020-03-09 21:13:08
% DurationCPUTime: 12.68s
% Computational Cost: add. (29550->471), mult. (75784->1031), div. (11562->23), fcn. (70041->27), ass. (0->428)
t2940 = sin(qJ(2,3));
t2941 = sin(qJ(1,3));
t2948 = cos(qJ(3,3));
t2949 = cos(qJ(2,3));
t2950 = cos(qJ(1,3));
t2957 = xDP(3);
t2936 = legFrame(3,2);
t2900 = sin(t2936);
t2903 = cos(t2936);
t2958 = xDP(2);
t2959 = xDP(1);
t2993 = t2900 * t2958 - t2903 * t2959;
t3191 = t2941 * t2957;
t2879 = t2900 * t2959 + t2903 * t2958;
t2939 = sin(qJ(3,3));
t3193 = t2939 * t2879;
t2855 = ((t2993 * t2941 - t2950 * t2957) * t2940 - t2949 * (t2993 * t2950 + t3191)) * t2948 + t3193;
t2882 = t2940 * t2941 - t2950 * t2949;
t2883 = t2940 * t2950 + t2941 * t2949;
t3167 = pkin(1) * t2939 * t2949;
t3265 = pkin(2) * t2959;
t3266 = pkin(2) * t2958;
t2918 = t2948 ^ 2;
t3272 = pkin(2) * t2918;
t3273 = pkin(1) * t2959;
t3274 = pkin(1) * t2958;
t2846 = (-t2993 * t2882 + t2883 * t2957) * t3272 + ((-t2939 * t3266 - t2950 * t3273) * t2903 + (-t2939 * t3265 + t2950 * t3274) * t2900 + pkin(1) * t3191) * t2948 - t2879 * t3167;
t2920 = 0.1e1 / t2948 ^ 2;
t2907 = 0.1e1 / t2940;
t2961 = 0.1e1 / pkin(2);
t2964 = 0.1e1 / pkin(1);
t3181 = t2961 * t2964;
t3099 = t2907 * t3181;
t2843 = t2846 * t2920 * t3099;
t2919 = 0.1e1 / t2948;
t3210 = t2907 * t2919;
t2849 = t2855 * t2964 * t3210;
t2840 = t2849 + t2843;
t2921 = t2919 / t2918;
t3029 = t2921 * t3099;
t3226 = t2879 * t2961;
t3107 = t2949 * t3226;
t3032 = t2919 * t3107;
t3192 = t2939 * t2940;
t2987 = ((-pkin(1) * t2840 * t3192 + t2879 * t2919) * t2948 + pkin(1) * t3032) * t2879 * t3029;
t3089 = t2919 * t3192;
t3184 = t2948 * t2949;
t3196 = t2921 * t2961;
t3240 = t2840 * t2918;
t3068 = (pkin(2) * t3240 + (t2840 * t3184 - t3089 * t3226) * pkin(1)) * t2846 * t3196;
t2960 = pkin(2) ^ 2;
t3280 = 0.2e1 * pkin(2);
t3146 = (t2960 * t3240 + ((t2849 + t2843 / 0.2e1) * t3184 * t3280 + (t2855 * t2907 - t2879 * t3192) * t2919) * pkin(1)) * t2961 * t2920;
t2908 = 0.1e1 / t2940 ^ 2;
t2965 = 0.1e1 / pkin(1) ^ 2;
t3207 = t2908 * t2965;
t3098 = t2919 * t3207;
t2825 = t2840 * t2846 * t3098;
t2876 = t2879 ^ 2;
t2870 = t2876 * t3029;
t3174 = t2825 + t2870;
t3208 = t2907 * t2949;
t3101 = t2919 * t3208;
t3269 = pkin(2) * t2948;
t2828 = -t2840 * t3269 - t2855 * t3101;
t3247 = t2828 * t2919;
t2798 = -t2987 / 0.2e1 + (-t3068 / 0.2e1 + (-t3247 - t3146 / 0.2e1) * t2855) * t3207 + t3174;
t2803 = -t2987 + 0.2e1 * t2825 + 0.2e1 * t2870 + (-t3068 + (-t3146 - 0.2e1 * t3247) * t2855) * t3207;
t2922 = 0.1e1 / t2918 ^ 2;
t2962 = 0.1e1 / pkin(2) ^ 2;
t3231 = t2876 * t2962;
t3026 = t2920 * t3231 / 0.2e1;
t3278 = t2962 / 0.2e1;
t2822 = t3026 + (t2922 * t2846 * t3278 + t2855 * t3196) * t2846 * t3207;
t2906 = t2939 ^ 2;
t3168 = 2 * MDP(13);
t3293 = t2803 * MDP(6) + (-t2949 * t2803 * MDP(5) + (0.2e1 * t2840 * t2939 * t3032 - 0.2e1 * t2798 * t3184 + (t2906 * t2921 * t3231 + 0.2e1 * t2822 * t2948) * t2940) * MDP(12) + ((t2798 * t2949 + t2940 * t3026) * t2939 - t2822 * t3192 + t2840 * t3107) * t3168) * t2907;
t2943 = sin(qJ(2,2));
t2944 = sin(qJ(1,2));
t2951 = cos(qJ(3,2));
t2952 = cos(qJ(2,2));
t2953 = cos(qJ(1,2));
t2937 = legFrame(2,2);
t2901 = sin(t2937);
t2904 = cos(t2937);
t2992 = t2901 * t2958 - t2904 * t2959;
t3188 = t2944 * t2957;
t2880 = t2901 * t2959 + t2904 * t2958;
t2942 = sin(qJ(3,2));
t3190 = t2942 * t2880;
t2856 = ((t2992 * t2944 - t2953 * t2957) * t2943 - t2952 * (t2992 * t2953 + t3188)) * t2951 + t3190;
t2884 = t2943 * t2944 - t2953 * t2952;
t2885 = t2943 * t2953 + t2944 * t2952;
t3166 = pkin(1) * t2942 * t2952;
t2924 = t2951 ^ 2;
t3271 = pkin(2) * t2924;
t2847 = (-t2992 * t2884 + t2885 * t2957) * t3271 + ((-t2942 * t3266 - t2953 * t3273) * t2904 + (-t2942 * t3265 + t2953 * t3274) * t2901 + pkin(1) * t3188) * t2951 - t2880 * t3166;
t2926 = 0.1e1 / t2951 ^ 2;
t2911 = 0.1e1 / t2943;
t3095 = t2911 * t3181;
t2844 = t2847 * t2926 * t3095;
t2925 = 0.1e1 / t2951;
t3205 = t2911 * t2925;
t2850 = t2856 * t2964 * t3205;
t2841 = t2850 + t2844;
t2927 = t2925 / t2924;
t3028 = t2927 * t3095;
t3225 = t2880 * t2961;
t3106 = t2952 * t3225;
t3031 = t2925 * t3106;
t3189 = t2942 * t2943;
t2986 = ((-pkin(1) * t2841 * t3189 + t2880 * t2925) * t2951 + pkin(1) * t3031) * t2880 * t3028;
t3088 = t2925 * t3189;
t3183 = t2951 * t2952;
t3195 = t2927 * t2961;
t3238 = t2841 * t2924;
t3067 = (pkin(2) * t3238 + (t2841 * t3183 - t3088 * t3225) * pkin(1)) * t2847 * t3195;
t3145 = (t2960 * t3238 + ((t2850 + t2844 / 0.2e1) * t3183 * t3280 + (t2856 * t2911 - t2880 * t3189) * t2925) * pkin(1)) * t2961 * t2926;
t2912 = 0.1e1 / t2943 ^ 2;
t3202 = t2912 * t2965;
t3094 = t2925 * t3202;
t2826 = t2841 * t2847 * t3094;
t2877 = t2880 ^ 2;
t2871 = t2877 * t3028;
t3173 = t2826 + t2871;
t3203 = t2911 * t2952;
t3097 = t2925 * t3203;
t3268 = pkin(2) * t2951;
t2829 = -t2841 * t3268 - t2856 * t3097;
t3246 = t2829 * t2925;
t2799 = -t2986 / 0.2e1 + (-t3067 / 0.2e1 + (-t3246 - t3145 / 0.2e1) * t2856) * t3202 + t3173;
t2801 = -t2986 + 0.2e1 * t2826 + 0.2e1 * t2871 + (-t3067 + (-t3145 - 0.2e1 * t3246) * t2856) * t3202;
t2928 = 0.1e1 / t2924 ^ 2;
t3229 = t2877 * t2962;
t3025 = t2926 * t3229 / 0.2e1;
t2823 = t3025 + (t2928 * t2847 * t3278 + t2856 * t3195) * t2847 * t3202;
t2910 = t2942 ^ 2;
t3292 = t2801 * MDP(6) + (-t2952 * t2801 * MDP(5) + (0.2e1 * t2841 * t2942 * t3031 - 0.2e1 * t2799 * t3183 + (t2910 * t2927 * t3229 + 0.2e1 * t2823 * t2951) * t2943) * MDP(12) + ((t2799 * t2952 + t2943 * t3025) * t2942 - t2823 * t3189 + t2841 * t3106) * t3168) * t2911;
t2946 = sin(qJ(2,1));
t2947 = sin(qJ(1,1));
t2954 = cos(qJ(3,1));
t2955 = cos(qJ(2,1));
t2956 = cos(qJ(1,1));
t2938 = legFrame(1,2);
t2902 = sin(t2938);
t2905 = cos(t2938);
t2991 = t2902 * t2958 - t2905 * t2959;
t3185 = t2947 * t2957;
t2881 = t2902 * t2959 + t2905 * t2958;
t2945 = sin(qJ(3,1));
t3187 = t2945 * t2881;
t2857 = ((t2991 * t2947 - t2956 * t2957) * t2946 - t2955 * (t2991 * t2956 + t3185)) * t2954 + t3187;
t2886 = t2946 * t2947 - t2956 * t2955;
t2887 = t2946 * t2956 + t2947 * t2955;
t3165 = pkin(1) * t2945 * t2955;
t2930 = t2954 ^ 2;
t3270 = pkin(2) * t2930;
t2848 = (-t2991 * t2886 + t2887 * t2957) * t3270 + ((-t2945 * t3266 - t2956 * t3273) * t2905 + (-t2945 * t3265 + t2956 * t3274) * t2902 + pkin(1) * t3185) * t2954 - t2881 * t3165;
t2932 = 0.1e1 / t2954 ^ 2;
t2915 = 0.1e1 / t2946;
t3091 = t2915 * t3181;
t2845 = t2848 * t2932 * t3091;
t2931 = 0.1e1 / t2954;
t3200 = t2915 * t2931;
t2851 = t2857 * t2964 * t3200;
t2842 = t2851 + t2845;
t2933 = t2931 / t2930;
t3027 = t2933 * t3091;
t3224 = t2881 * t2961;
t3105 = t2955 * t3224;
t3030 = t2931 * t3105;
t3186 = t2945 * t2946;
t2985 = ((-pkin(1) * t2842 * t3186 + t2881 * t2931) * t2954 + pkin(1) * t3030) * t2881 * t3027;
t3087 = t2931 * t3186;
t3182 = t2954 * t2955;
t3194 = t2933 * t2961;
t3236 = t2842 * t2930;
t3066 = (pkin(2) * t3236 + (t2842 * t3182 - t3087 * t3224) * pkin(1)) * t2848 * t3194;
t3144 = (t2960 * t3236 + ((t2851 + t2845 / 0.2e1) * t3182 * t3280 + (t2857 * t2915 - t2881 * t3186) * t2931) * pkin(1)) * t2961 * t2932;
t2916 = 0.1e1 / t2946 ^ 2;
t3197 = t2916 * t2965;
t3090 = t2931 * t3197;
t2827 = t2842 * t2848 * t3090;
t2878 = t2881 ^ 2;
t2872 = t2878 * t3027;
t3172 = t2827 + t2872;
t3198 = t2915 * t2955;
t3093 = t2931 * t3198;
t3267 = pkin(2) * t2954;
t2830 = -t2842 * t3267 - t2857 * t3093;
t3245 = t2830 * t2931;
t2800 = -t2985 / 0.2e1 + (-t3066 / 0.2e1 + (-t3245 - t3144 / 0.2e1) * t2857) * t3197 + t3172;
t2806 = -t2985 + 0.2e1 * t2827 + 0.2e1 * t2872 + (-t3066 + (-t3144 - 0.2e1 * t3245) * t2857) * t3197;
t2934 = 0.1e1 / t2930 ^ 2;
t3227 = t2878 * t2962;
t3024 = t2932 * t3227 / 0.2e1;
t2824 = t3024 + (t2934 * t2848 * t3278 + t2857 * t3194) * t2848 * t3197;
t2914 = t2945 ^ 2;
t3291 = t2806 * MDP(6) + (-t2955 * t2806 * MDP(5) + (0.2e1 * t2842 * t2945 * t3030 - 0.2e1 * t2800 * t3182 + (t2914 * t2933 * t3227 + 0.2e1 * t2824 * t2954) * t2946) * MDP(12) + ((t2800 * t2955 + t2946 * t3024) * t2945 - t2824 * t3186 + t2842 * t3105) * t3168) * t2915;
t3290 = 2 * MDP(8);
t3211 = t2906 * t2922;
t3289 = t2908 * t2949;
t3206 = t2910 * t2928;
t3288 = t2912 * t2952;
t3201 = t2914 * t2934;
t3287 = t2916 * t2955;
t3199 = t2915 * t2932;
t3228 = t2878 * t2915;
t3286 = t2878 * t3199 + t3201 * t3228;
t3204 = t2911 * t2926;
t3230 = t2877 * t2911;
t3285 = t2877 * t3204 + t3206 * t3230;
t3209 = t2907 * t2920;
t3232 = t2876 * t2907;
t3284 = t2876 * t3209 + t3211 * t3232;
t3277 = pkin(1) * t2950;
t3276 = pkin(1) * t2953;
t3275 = pkin(1) * t2956;
t2963 = t2961 / t2960;
t3264 = MDP(9) * t2963;
t3260 = MDP(11) * t2963;
t2802 = -t2987 + (-t3068 + (-t3146 - t3247) * t2855) * t3207 + t3174;
t3259 = t2802 * t2920;
t3258 = t2802 * t2939;
t2804 = -t2986 + (-t3067 + (-t3145 - t3246) * t2856) * t3202 + t3173;
t3257 = t2804 * t2926;
t3256 = t2804 * t2942;
t2805 = -t2985 + (-t3066 + (-t3144 - t3245) * t2857) * t3197 + t3172;
t3255 = t2805 * t2932;
t3254 = t2805 * t2945;
t2807 = -t2828 * t2855 * t3098 + t3174;
t3253 = t2807 * t2920;
t3252 = t2807 * t2940;
t2808 = -t2829 * t2856 * t3094 + t3173;
t3251 = t2808 * t2926;
t3250 = t2808 * t2943;
t2809 = -t2830 * t2857 * t3090 + t3172;
t3249 = t2809 * t2932;
t3248 = t2809 * t2946;
t3244 = (t2843 + 0.2e1 * t2849) * t2846;
t3243 = (t2844 + 0.2e1 * t2850) * t2847;
t3242 = (t2845 + 0.2e1 * t2851) * t2848;
t3241 = t2840 * t2879;
t3239 = t2841 * t2880;
t3237 = t2842 * t2881;
t2852 = t2855 ^ 2;
t3235 = t2852 * t2908;
t2853 = t2856 ^ 2;
t3234 = t2853 * t2912;
t2854 = t2857 ^ 2;
t3233 = t2854 * t2916;
t3223 = t2882 * t2948;
t3222 = t2884 * t2951;
t3221 = t2886 * t2954;
t2897 = sin(qJ(1,3) + qJ(2,3));
t3220 = t2897 * t2907;
t2898 = sin(qJ(1,2) + qJ(2,2));
t3219 = t2898 * t2911;
t2899 = sin(qJ(1,1) + qJ(2,1));
t3218 = t2899 * t2915;
t3217 = t2900 * t2939;
t3216 = t2901 * t2942;
t3215 = t2902 * t2945;
t3214 = t2903 * t2939;
t3213 = t2904 * t2942;
t3212 = t2905 * t2945;
t3171 = 2 * MDP(7);
t3169 = 4 * MDP(8);
t3164 = t2882 * t3272;
t3163 = t2884 * t3271;
t3162 = t2886 * t3270;
t3161 = MDP(4) * t3259;
t3160 = MDP(4) * t3257;
t3159 = MDP(4) * t3255;
t3155 = t2906 * t3259;
t3154 = t2919 * t3258;
t3153 = t2910 * t3257;
t3152 = t2925 * t3256;
t3151 = t2914 * t3255;
t3150 = t2931 * t3254;
t3149 = t2807 * t3208;
t3148 = t2808 * t3203;
t3147 = t2809 * t3198;
t2834 = t2840 ^ 2;
t3143 = t2834 * (-0.2e1 * t2918 + 0.1e1) * t2919;
t2835 = t2841 ^ 2;
t3142 = t2835 * (-0.2e1 * t2924 + 0.1e1) * t2925;
t2836 = t2842 ^ 2;
t3141 = t2836 * (-0.2e1 * t2930 + 0.1e1) * t2931;
t3140 = t2907 * t3241;
t3139 = t2920 * t3241;
t3138 = t2911 * t3239;
t3137 = t2926 * t3239;
t3136 = t2915 * t3237;
t3135 = t2932 * t3237;
t3134 = t2920 * t3235;
t3133 = t2921 * t3235;
t3132 = t2922 * t3235;
t3131 = t2939 * t3235;
t3130 = t2852 * t2907 * t3289;
t3129 = t2926 * t3234;
t3128 = t2927 * t3234;
t3127 = t2928 * t3234;
t3126 = t2942 * t3234;
t3125 = t2853 * t2911 * t3288;
t3124 = t2932 * t3233;
t3123 = t2933 * t3233;
t3122 = t2934 * t3233;
t3121 = t2945 * t3233;
t3120 = t2854 * t2915 * t3287;
t2864 = t2900 * t3223 + t3214;
t3119 = t2864 * t3210;
t2865 = -t2903 * t3223 + t3217;
t3118 = t2865 * t3210;
t2866 = t2901 * t3222 + t3213;
t3117 = t2866 * t3205;
t2867 = -t2904 * t3222 + t3216;
t3116 = t2867 * t3205;
t2868 = t2902 * t3221 + t3212;
t3115 = t2868 * t3200;
t2869 = -t2905 * t3221 + t3215;
t3114 = t2869 * t3200;
t3112 = t2876 * t2922 * t2939;
t3110 = t2877 * t2928 * t2942;
t3108 = t2878 * t2934 * t2945;
t3104 = t2906 * t3220;
t3103 = t2910 * t3219;
t3102 = t2914 * t3218;
t3100 = t2907 * t3258;
t3096 = t2911 * t3256;
t3092 = t2915 * t3254;
t3086 = 0.2e1 * t3154;
t3085 = 0.2e1 * t3152;
t3084 = 0.2e1 * t3150;
t3083 = MDP(5) * t2921 * t3244;
t3082 = MDP(5) * t2927 * t3243;
t3081 = MDP(5) * t2933 * t3242;
t2873 = pkin(1) * t2941 + t2883 * t3269;
t3080 = t2802 * t2873 * t3210;
t2874 = pkin(1) * t2944 + t2885 * t3268;
t3079 = t2804 * t2874 * t3205;
t2875 = pkin(1) * t2947 + t2887 * t3267;
t3078 = t2805 * t2875 * t3200;
t3077 = t2807 * t3101;
t3076 = t2920 * t3149;
t3075 = t2807 * t3089;
t3074 = t2808 * t3097;
t3073 = t2926 * t3148;
t3072 = t2808 * t3088;
t3071 = t2809 * t3093;
t3070 = t2932 * t3147;
t3069 = t2809 * t3087;
t3065 = t3244 * t3289;
t3064 = t3243 * t3288;
t3063 = t3242 * t3287;
t3062 = t2907 * t3139;
t3061 = t2840 * t2919 * t3193;
t3060 = t2911 * t3137;
t3059 = t2841 * t2925 * t3190;
t3058 = t2915 * t3135;
t3057 = t2842 * t2931 * t3187;
t3056 = t2949 * t3134;
t3055 = t2921 * t3131;
t3054 = t2922 * t3131;
t3053 = t2922 * t3130;
t3052 = t2952 * t3129;
t3051 = t2927 * t3126;
t3050 = t2928 * t3126;
t3049 = t2928 * t3125;
t3048 = t2955 * t3124;
t3047 = t2933 * t3121;
t3046 = t2934 * t3121;
t3045 = t2934 * t3120;
t3044 = t2802 * t3119;
t3043 = t2802 * t3118;
t3042 = t2804 * t3117;
t3041 = t2804 * t3116;
t3040 = t2805 * t3115;
t3039 = t2805 * t3114;
t3038 = t2873 * t3149;
t3037 = t2874 * t3148;
t3036 = t2875 * t3147;
t2891 = t2918 - 0.1e1 / 0.2e1;
t3023 = 0.4e1 * t2891 * t3139;
t3022 = -0.2e1 * t2897 * t3140;
t3021 = 0.2e1 * t3061;
t2892 = t2924 - 0.1e1 / 0.2e1;
t3020 = 0.4e1 * t2892 * t3137;
t3019 = -0.2e1 * t2898 * t3138;
t3018 = 0.2e1 * t3059;
t2893 = t2930 - 0.1e1 / 0.2e1;
t3017 = 0.4e1 * t2893 * t3135;
t3016 = -0.2e1 * t2899 * t3136;
t3015 = 0.2e1 * t3057;
t3014 = t2919 * t3038;
t3013 = t2925 * t3037;
t3012 = t2931 * t3036;
t3011 = t2921 * t3065;
t3010 = t2927 * t3064;
t3009 = t2933 * t3063;
t3008 = t2891 * t2921 * t3140;
t3007 = t2939 * t3062;
t3006 = t2892 * t2927 * t3138;
t3005 = t2942 * t3060;
t3004 = t2893 * t2933 * t3136;
t3003 = t2945 * t3058;
t3002 = t2949 * t3055;
t3001 = t2952 * t3051;
t3000 = t2955 * t3047;
t2858 = -t2900 * t3164 + (-pkin(2) * t3214 + t2900 * t3277) * t2948 - t2903 * t3167;
t2999 = t2858 * t3076;
t2859 = -t2901 * t3163 + (-pkin(2) * t3213 + t2901 * t3276) * t2951 - t2904 * t3166;
t2998 = t2859 * t3073;
t2860 = -t2902 * t3162 + (-pkin(2) * t3212 + t2902 * t3275) * t2954 - t2905 * t3165;
t2997 = t2860 * t3070;
t2861 = t2903 * t3164 + (-pkin(2) * t3217 - t2903 * t3277) * t2948 - t2900 * t3167;
t2996 = t2861 * t3076;
t2862 = t2904 * t3163 + (-pkin(2) * t3216 - t2904 * t3276) * t2951 - t2901 * t3166;
t2995 = t2862 * t3073;
t2863 = t2905 * t3162 + (-pkin(2) * t3215 - t2905 * t3275) * t2954 - t2902 * t3165;
t2994 = t2863 * t3070;
t2990 = (t2919 * t3211 + t2921) * t3232;
t2989 = (t2925 * t3206 + t2927) * t3230;
t2988 = (t2931 * t3201 + t2933) * t3228;
t2984 = t2919 * t3293;
t2983 = t2925 * t3292;
t2982 = t2931 * t3291;
t1 = [-t2869 * t2982 - t2867 * t2983 - t2865 * t2984 + (t2900 * t3112 + t2901 * t3110 + t2902 * t3108) * t3260 + ((t2807 * t3118 + t2808 * t3116 + t2809 * t3114) * MDP(1) + (t3039 + t3041 + t3043) * MDP(4) + (t2906 * t3043 + t2910 * t3041 + t2914 * t3039) * MDP(7) + (t2865 * t3100 + t2867 * t3096 + t2869 * t3092) * t3290 + (t2861 * t2990 + t2862 * t2989 + t2863 * t2988) * t3264 + ((t2861 * t3007 + t2862 * t3005 + t2863 * t3003) * t3171 + (t2861 * t3008 + t2862 * t3006 + t2863 * t3004) * t3169 + (t3284 * t2865 + t3285 * t2867 + t3286 * t2869) * MDP(9)) * t2962) * t2964 + ((t2994 + t2995 + t2996) * MDP(5) + (-t2861 * t3253 - t2862 * t3251 - t2863 * t3249) * MDP(6) + (-t2834 * t3217 - t2835 * t3216 - t2836 * t3215) * MDP(7) + (t2900 * t3143 + t2901 * t3142 + t2902 * t3141) * MDP(8) + (t2900 * t3154 + t2901 * t3152 + t2902 * t3150) * MDP(9) + (t2802 * t2900 + t2804 * t2901 + t2805 * t2902) * MDP(10) + (t2861 * t3077 + t2862 * t3074 + t2863 * t3071) * MDP(12) + (-t2939 * t2996 - t2942 * t2995 - t2945 * t2994) * MDP(13) + ((-t2900 * t3075 - t2901 * t3072 - t2902 * t3069) * MDP(12) + (-t2900 * t3252 - t2901 * t3250 - t2902 * t3248) * MDP(13)) * pkin(1) + ((t2861 * t3132 + t2862 * t3127 + t2863 * t3122) * MDP(5) + (t2861 * t3053 + t2862 * t3049 + t2863 * t3045) * MDP(6) + (t2861 * t3133 + t2862 * t3128 + t2863 * t3123) * MDP(12) + (-t2861 * t3054 - t2862 * t3050 - t2863 * t3046) * MDP(13)) * t2965 + ((-t2865 * t3011 - t2867 * t3010 - t2869 * t3009) * MDP(6) + (t2900 * t3002 + t2901 * t3001 + t2902 * t3000) * MDP(12) + (t2900 * t3056 + t2901 * t3052 + t2902 * t3048) * MDP(13) + (t2863 * t3159 - t2869 * t3081 + (t2863 * t3151 + t2869 * t3015) * MDP(7) + (t2863 * t3084 + t2869 * t3017) * MDP(8)) * t2915 + (t2862 * t3160 - t2867 * t3082 + (t2862 * t3153 + t2867 * t3018) * MDP(7) + (t2862 * t3085 + t2867 * t3020) * MDP(8)) * t2911 + (t2861 * t3161 - t2865 * t3083 + (t2861 * t3155 + t2865 * t3021) * MDP(7) + (t2861 * t3086 + t2865 * t3023) * MDP(8)) * t2907) * t2964) * t2961; -t2868 * t2982 - t2866 * t2983 - t2864 * t2984 + (t2903 * t3112 + t2904 * t3110 + t2905 * t3108) * t3260 + ((t2807 * t3119 + t2808 * t3117 + t2809 * t3115) * MDP(1) + (t3040 + t3042 + t3044) * MDP(4) + (t2906 * t3044 + t2910 * t3042 + t2914 * t3040) * MDP(7) + (t2864 * t3100 + t2866 * t3096 + t2868 * t3092) * t3290 + (t2858 * t2990 + t2859 * t2989 + t2860 * t2988) * t3264 + ((t2858 * t3007 + t2859 * t3005 + t2860 * t3003) * t3171 + (t2858 * t3008 + t2859 * t3006 + t2860 * t3004) * t3169 + (t3284 * t2864 + t3285 * t2866 + t3286 * t2868) * MDP(9)) * t2962) * t2964 + ((t2997 + t2998 + t2999) * MDP(5) + (-t2858 * t3253 - t2859 * t3251 - t2860 * t3249) * MDP(6) + (-t2834 * t3214 - t2835 * t3213 - t2836 * t3212) * MDP(7) + (t2903 * t3143 + t2904 * t3142 + t2905 * t3141) * MDP(8) + (t2903 * t3154 + t2904 * t3152 + t2905 * t3150) * MDP(9) + (t2802 * t2903 + t2804 * t2904 + t2805 * t2905) * MDP(10) + (t2858 * t3077 + t2859 * t3074 + t2860 * t3071) * MDP(12) + (-t2939 * t2999 - t2942 * t2998 - t2945 * t2997) * MDP(13) + ((-t2903 * t3075 - t2904 * t3072 - t2905 * t3069) * MDP(12) + (-t2903 * t3252 - t2904 * t3250 - t2905 * t3248) * MDP(13)) * pkin(1) + ((t2858 * t3132 + t2859 * t3127 + t2860 * t3122) * MDP(5) + (t2858 * t3053 + t2859 * t3049 + t2860 * t3045) * MDP(6) + (t2858 * t3133 + t2859 * t3128 + t2860 * t3123) * MDP(12) + (-t2858 * t3054 - t2859 * t3050 - t2860 * t3046) * MDP(13)) * t2965 + ((-t2864 * t3011 - t2866 * t3010 - t2868 * t3009) * MDP(6) + (t2903 * t3002 + t2904 * t3001 + t2905 * t3000) * MDP(12) + (t2903 * t3056 + t2904 * t3052 + t2905 * t3048) * MDP(13) + (t2860 * t3159 - t2868 * t3081 + (t2860 * t3151 + t2868 * t3015) * MDP(7) + (t2860 * t3084 + t2868 * t3017) * MDP(8)) * t2915 + (t2859 * t3160 - t2866 * t3082 + (t2859 * t3153 + t2866 * t3018) * MDP(7) + (t2859 * t3085 + t2866 * t3020) * MDP(8)) * t2911 + (t2858 * t3161 - t2864 * t3083 + (t2858 * t3155 + t2864 * t3021) * MDP(7) + (t2858 * t3086 + t2864 * t3023) * MDP(8)) * t2907) * t2964) * t2961; t3291 * t2899 + t3292 * t2898 + t3293 * t2897 + ((t3012 + t3013 + t3014) * MDP(5) + (-t2873 * t2919 * t2807 - t2874 * t2925 * t2808 - t2875 * t2931 * t2809) * MDP(6) + (t3036 + t3037 + t3038) * MDP(12) + (-t2939 * t3014 - t2942 * t3013 - t2945 * t3012) * MDP(13) + ((t2873 * t3133 + t2874 * t3128 + t2875 * t3123) * MDP(5) + (t2873 * t2921 * t3130 + t2874 * t2927 * t3125 + t2875 * t2933 * t3120) * MDP(6) + (t2873 * t3134 + t2874 * t3129 + t2875 * t3124) * MDP(12) + (-t2873 * t3055 - t2874 * t3051 - t2875 * t3047) * MDP(13)) * t2965) * t2961 + ((-t2807 * t3220 - t2808 * t3219 - t2809 * t3218) * MDP(1) + (-t2802 * t3220 - t2804 * t3219 - t2805 * t3218) * MDP(4) + (-t2802 * t3104 - t2804 * t3103 - t2805 * t3102) * MDP(7) + (-t2897 * t2948 * t3100 - t2898 * t2951 * t3096 - t2899 * t2954 * t3092) * t3290 + ((t2932 + t3201) * t2875 * t3228 + (t2926 + t3206) * t2874 * t3230 + (t2920 + t3211) * t2873 * t3232) * t3264 + ((t2873 * t2907 * t3061 + t2874 * t2911 * t3059 + t2875 * t2915 * t3057) * t3171 + 0.2e1 * (t2873 * t2891 * t3062 + t2874 * t2892 * t3060 + t2875 * t2893 * t3058) * t3290 + ((-t2899 * t3200 - t2933 * t3102) * t2878 + (-t2898 * t3205 - t2927 * t3103) * t2877 + (-t2897 * t3210 - t2921 * t3104) * t2876) * MDP(9)) * t2962 + ((t3078 + t3079 + t3080) * MDP(4) + (t2897 * t3209 * t3244 + t2898 * t3204 * t3243 + t2899 * t3199 * t3242) * MDP(5) + (t2897 * t2920 * t3065 + t2898 * t2926 * t3064 + t2899 * t2932 * t3063) * MDP(6) + (t2906 * t3080 + t2910 * t3079 + t2914 * t3078 + t2939 * t3022 + t2942 * t3019 + t2945 * t3016) * MDP(7) + (t2891 * t2919 * t3022 + t2892 * t2925 * t3019 + t2893 * t2931 * t3016 + t2873 * t3100 + t2874 * t3096 + t2875 * t3092) * t3290) * t2961) * t2964;];
taucX  = t1;
