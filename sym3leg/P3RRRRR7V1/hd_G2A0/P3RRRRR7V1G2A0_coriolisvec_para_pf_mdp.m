% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR7V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR7V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:52
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(5,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:50:29
% EndTime: 2020-08-07 03:52:33
% DurationCPUTime: 130.29s
% Computational Cost: add. (1402062->1284), mult. (3667986->2191), div. (37308->31), fcn. (2283849->159), ass. (0->915)
t6048 = 4 * pkin(2);
t5414 = sin(qJ(1,1));
t5405 = legFrame(1,2);
t5319 = cos(t5405);
t5426 = xDP(1);
t5867 = t5319 * t5426;
t5316 = sin(t5405);
t5425 = xDP(2);
t5876 = t5316 * t5425;
t5514 = -t5867 + t5876;
t6059 = t5514 * t5414;
t5411 = sin(qJ(1,2));
t5404 = legFrame(2,2);
t5318 = cos(t5404);
t5870 = t5318 * t5426;
t5315 = sin(t5404);
t5879 = t5315 * t5425;
t5515 = -t5870 + t5879;
t6058 = t5515 * t5411;
t5408 = sin(qJ(1,3));
t5403 = legFrame(3,2);
t5317 = cos(t5403);
t5873 = t5317 * t5426;
t5314 = sin(t5403);
t5882 = t5314 * t5425;
t5516 = -t5873 + t5882;
t6057 = t5516 * t5408;
t5462 = 0.1e1 / pkin(1);
t5412 = sin(qJ(3,1));
t5358 = 0.1e1 / t5412;
t5423 = cos(qJ(1,1));
t5235 = t5423 * t5876;
t5424 = xDP(3);
t5246 = t5414 * t5424;
t5690 = t5423 * t5867;
t5151 = -t5690 / 0.2e1 + t5235 / 0.2e1 + t5246;
t5249 = t5424 * t5423;
t5162 = t5249 - t6059;
t5421 = cos(qJ(3,1));
t5978 = t5421 * pkin(2);
t5255 = pkin(1) + t5978;
t5413 = sin(qJ(2,1));
t5422 = cos(qJ(2,1));
t5844 = t5412 * t5422;
t5864 = (t5421 + 0.1e1) * (t5421 - 0.1e1);
t5175 = pkin(2) * t5413 * t5864 + t5255 * t5844;
t5210 = t5316 * t5426 + t5319 * t5425;
t5904 = t5210 * t5413;
t5187 = pkin(1) * t5904;
t5190 = pkin(2) * t5210;
t5193 = pkin(1) * t5210;
t5323 = t5421 * pkin(1);
t5457 = pkin(2) ^ 2;
t5461 = pkin(1) ^ 2;
t5332 = t5457 + t5461;
t5450 = 0.2e1 * qJ(3,1);
t5341 = sin(t5450);
t5370 = t5421 ^ 2;
t5369 = t5421 * t5370;
t5372 = t5422 ^ 2;
t5371 = t5422 * t5372;
t5846 = t5412 * t5413;
t5887 = t5255 * t5422;
t5505 = pkin(2) * t5846 - t5887;
t5845 = t5412 * t5414;
t5706 = t5514 * t5845;
t5807 = -pkin(1) * t5706 + t5190;
t5993 = pkin(2) * t5370;
t5511 = -0.2e1 * t5210 * t5993 + t5807;
t5427 = pkin(4) + pkin(5);
t5831 = t5423 * t5427;
t5556 = t5514 * t5831 + t5187;
t5454 = 0.2e1 * qJ(2,1);
t5351 = cos(t5454);
t5577 = t5175 * t5351 * t5249;
t5833 = t5421 * t5412;
t5673 = t5413 * t5833;
t5578 = t5422 * t5673;
t5643 = -0.2e1 * t5706;
t5165 = -t5235 - t5246 + t5690;
t5841 = t5413 * t5427;
t5668 = t5165 * t5841;
t5830 = t5424 * t5427;
t5671 = t5414 * t5830;
t5672 = t5413 * t5831;
t5342 = sin(t5454);
t5687 = t5342 * t5249;
t5843 = t5413 * t5414;
t5705 = t5514 * t5843;
t5800 = 0.4e1 * t5369 - 0.5e1 * t5421;
t5322 = t5414 * pkin(2);
t5804 = t5412 * t5672 + t5322;
t5824 = t5457 * t5210;
t5827 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t5842 = t5413 * t5422;
t5905 = t5210 * t5412;
t5918 = t5165 * t5427;
t6030 = 2 * pkin(2);
t5933 = (-pkin(1) * t6059 + t5905 * t6030) * t5421;
t5977 = t5422 * pkin(2);
t5990 = pkin(2) * t5412;
t5349 = cos(t5450);
t5996 = pkin(2) * t5349;
t6017 = 0.2e1 * t5370;
t6002 = t6017 - 0.1e1;
t6010 = pkin(1) * pkin(2);
t6014 = -0.2e1 * t5427;
t6016 = 0.4e1 * t5370;
t6031 = -2 * pkin(2);
t6032 = -3 * pkin(2);
t6033 = 0.2e1 * pkin(1);
t5402 = -t5457 / 0.2e1;
t5312 = t5402 + t5461;
t6051 = -0.2e1 * t5370 * t5827 + 0.2e1 * t5312;
t6052 = 2 * t5457;
t6053 = 0.2e1 * t5427;
t5103 = (t5577 + ((pkin(2) * t5643 - t5193) * t5421 + t5511) * t5371 + (t5556 * t5412 + (-pkin(2) * t6002 * t6059 + t5933) * t5413) * t5372 + ((t5193 - (t5845 * t6031 - t5672) * t5514) * t5421 - t5511) * t5422 + t5705 * t5993 - t5673 * t5190 - (pkin(2) * t5843 + t5412 * t5831) * t5514) * t5996 - pkin(2) * (t5175 * t5687 - ((pkin(1) * t5905 + t5933) * t5372 + (-t5413 * t5807 + t5421 * t5556) * t5422 - t5514 * t5804) * t5422 - ((t5842 * t6017 - t5833) * t5210 - (t6002 * t5372 - t5370 - 0.2e1 * t5578) * t6059) * t5977) * t5341 - pkin(1) * t5505 * t5687 * t5864 + t5577 * t5323 + (t5421 * t5643 * t5827 + t5210 * t6051 + (-(t6016 - 0.3e1) * t5706 - t5800 * t5210) * t6010) * t5371 + ((((t5187 + t5671) * t6016 - 0.3e1 * t5187 + t5151 * t6014) * t5412 - t5800 * pkin(1) * t5705) * pkin(2) + 0.2e1 * (-pkin(1) * t5918 + t5827 * t5904) * t5833 + t5705 * t6051) * t5372 + ((0.2e1 * t5413 * t5671 + t5193) * t5369 * t6030 + (-0.2e1 * t5824 + ((t5249 + 0.2e1 * t6059) * t5990 - 0.2e1 * t5668) * pkin(1)) * t5370 + ((t5249 * t5332 - t6052 * t6059) * t5412 + (0.4e1 / 0.3e1 * (-t5690 / 0.4e1 + t5235 / 0.4e1 + t5246) * t5841 + t5193) * t6032) * t5421 + pkin(1) * (t5249 - 0.3e1 * t6059) * t5990 + t5668 * t6033 + t5824) * t5422 + pkin(2) * ((-t5246 * t5370 + t5151) * t5412 * t6053 + ((t5369 - t5421) * pkin(1) * t5249 + (t5162 * t5370 + t5210 * t5833 - t5162) * pkin(2)) * t5413);
t5259 = pkin(1) * t5978;
t5431 = -0.3e1 / 0.2e1 * pkin(1);
t6008 = t5457 / 0.2e1;
t5124 = (t5255 * t5842 + (t5372 - 0.1e1) * t5990) * t5996 / 0.2e1 - t5505 * t5341 * t5977 / 0.2e1 + pkin(2) * (pkin(1) * t5370 - t5978 / 0.2e1 + t5431) * t5842 + ((t5259 + t5312) * t5372 + t6008) * t5412;
t5951 = t5103 / t5124;
t5740 = t5358 * t5951;
t5565 = t5740 / 0.2e1;
t5094 = t5462 * t5565;
t5988 = pkin(2) * t5426;
t5773 = t5412 * t5988;
t5989 = pkin(2) * t5425;
t5774 = t5412 * t5989;
t5828 = t5426 * t5427;
t5829 = t5425 * t5427;
t5840 = t5414 * t5427;
t5885 = t5255 * t5426;
t5886 = t5255 * t5425;
t5109 = ((-t5414 * t5885 - t5774) * t5422 + t5423 * t5828) * t5319 + ((t5414 * t5886 - t5773) * t5422 - t5423 * t5829) * t5316 - (t5423 * t5887 + t5840) * t5424 + ((t5414 * t5773 - t5886) * t5319 + (-t5414 * t5774 - t5885) * t5316 + t5249 * t5990) * t5413;
t5458 = 1 / pkin(2);
t5822 = t5458 * t5462;
t5606 = t5109 * t5358 * t5822;
t5082 = t5094 + t5606;
t5073 = t5457 * t5082;
t5076 = t5094 + t5606 / 0.2e1;
t5097 = pkin(1) * t5565;
t5106 = 0.2e1 / 0.3e1 * t5606;
t5448 = 0.4e1 * qJ(3,1);
t5391 = t5448 + t5454;
t5277 = sin(t5391);
t5449 = 0.3e1 * qJ(3,1);
t5392 = t5449 + t5454;
t5278 = sin(t5392);
t5394 = t5454 + t5450;
t5279 = sin(t5394);
t5395 = t5454 + qJ(3,1);
t5280 = sin(t5395);
t5451 = -0.2e1 * qJ(3,1);
t5397 = t5454 + t5451;
t5282 = sin(t5397);
t5453 = 0.3e1 * qJ(2,1);
t5302 = cos(t5448 + t5453);
t5303 = cos(t5449 + t5453);
t5304 = cos(t5449 + qJ(2,1));
t5305 = cos(t5450 + t5453);
t5393 = t5450 + qJ(2,1);
t5306 = cos(t5393);
t5307 = cos(t5453 + qJ(3,1));
t5398 = qJ(2,1) + qJ(3,1);
t5308 = cos(t5398);
t5399 = qJ(2,1) - qJ(3,1);
t5309 = cos(t5399);
t6007 = -t5461 / 0.2e1;
t5311 = t6007 + t5457;
t5333 = -(3 * t5457) + t5461;
t5340 = sin(t5449);
t5396 = t5454 - qJ(3,1);
t5452 = 0.4e1 * qJ(2,1);
t5456 = pkin(2) * t5457;
t5460 = pkin(1) * t5461;
t5463 = 0.1e1 / pkin(1) ^ 2;
t5229 = pkin(1) * t5422 + pkin(2) * t5308;
t5225 = 0.1e1 / t5229;
t5712 = t5225 * t5918;
t5559 = t5712 * t6010;
t5662 = -t5951 / 0.2e1;
t5566 = t5358 * t5662;
t5987 = pkin(2) * t5461;
t5793 = -0.3e1 * t5987;
t5655 = t5456 + t5793;
t5656 = t5827 * t6031;
t5657 = t5827 / 0.2e1;
t5661 = -t5951 / 0.4e1;
t5667 = t5427 * t5827;
t5823 = t5457 * t5462;
t5684 = t5358 * t5823;
t5920 = t5165 * t5225;
t5710 = t5462 * t5920;
t5711 = t5457 * t5920;
t5819 = t5461 * sin(t5396);
t5764 = pkin(2) * t5819;
t5789 = 3 * t5457;
t5792 = 0.3e1 * t5987;
t5400 = t5427 ^ 2;
t5256 = t5400 + t5457;
t5794 = t5256 * t6048;
t5799 = 0.2e1 / 0.3e1 * t5457 + t5461;
t5795 = -0.6e1 * pkin(2) * (0.2e1 / 0.3e1 * t5400 + t5799);
t5796 = -0.9e1 * pkin(2) * (0.8e1 / 0.9e1 * t5400 + t5799);
t5797 = 0.5e1 * pkin(1) * t5457;
t5810 = t5073 + t5097;
t5948 = t5109 * t5458;
t6005 = t5462 / 0.3e1;
t5803 = 0.4e1 / 0.3e1 * t5400 + t5461;
t6024 = -(3 * t6052) - 0.3e1 * t5803;
t6025 = -(9 * t5457) - 0.3e1 * t5803;
t6026 = (9 * t5457) + 0.2e1 * t5461 + 0.4e1 * t5400;
t6034 = -0.2e1 * pkin(1);
t6036 = cos(qJ(2,1) + t5451) + cos(t5453);
t6037 = -t5305 - t5422;
t6038 = -t5302 - t5306;
t5028 = (-((t6038 * t5082 * t6052 + (t6036 * t5740 + (-(t5094 - t5606 / 0.2e1) * t5308 + (-t5303 + t5307) * t5076) * t6048) * pkin(1)) * t5427 + (t5412 * t5796 + t5655 * sin(t5449 + t5452) + t5278 * t5795 + t5280 * t5794 + 0.6e1 * t5764 + t5340 * t5793 + sin(t5452 + qJ(3,1)) * t5792 - t5456 * sin(0.5e1 * qJ(3,1) + t5452) + (t5282 + sin(t5452)) * t5460 + (-t5333 * sin(t5452 + t5450) + t5342 * t6026 + t5341 * t6025 + t5279 * t6024 + (-sin(t5452 + t5448) - t5277) * t5789) * pkin(1)) * t5920 + ((pkin(2) * t5309 * t5951 - t5109 * t5304) * t5358 + t6037 * (t5097 - t5073)) * t6053) * t5710 / 0.4e1 + ((-(t5097 + (0.4e1 * t5948 + 0.2e1 * t5951) * t5684) * pkin(1) * t5279 + t5810 * t5278 * t6031 + 0.4e1 * t5076 * t5764 + t5461 * t5282 * t5565 + t5457 * t5277 * t5566 + t5082 * t5280 * t5656 + (t5097 + (0.3e1 / 0.2e1 * t5951 + 0.2e1 * t5948) * t5684) * t5341 * t6034 + (t5094 + 0.4e1 / 0.5e1 * t5606) * t5342 * t5797 - t5340 * t5740 * t6010 - 0.6e1 * ((t5740 * t6005 + t5106) * t5457 + t5461 * (t5094 + t5106)) * t5990 + t6038 * t5427 * t5711 + t6036 * t5461 * t5712 - 0.2e1 * (t5303 + t5308) * t5559 + 0.2e1 * (t5309 + t5307) * t5559 + t6037 * t5667 * t5920) * t5661 + 0.2e1 * ((-t5819 / 0.2e1 + t5278 * t6008 + t5280 * t5657 + t5332 * t5412 + (t5279 + t5341 - t5342) * t6010) * t5082 + ((-t5305 / 0.4e1 + t5302 / 0.4e1 + t5306 / 0.4e1 - t5422 / 0.4e1) * pkin(2) + (t5303 / 0.4e1 - t5307 / 0.4e1 + t5304 / 0.4e1 - t5308 / 0.4e1) * pkin(1)) * t5712) * t5109) * t5358 * t5463) / (t5311 * cos(t5394) + cos(t5397) * t6007 + cos(t5391) * t5402 + t5312 * t5351 - t5332 * t5349 + t5259 + (-cos(t5396) - cos(t5392) + 0.2e1 * cos(t5395) - cos(t5449)) * t6010 + t5332);
t5220 = t5413 * t5421 + t5844;
t5900 = t5225 * t5413;
t5713 = t5165 * t5900;
t5634 = pkin(1) * t5713;
t5052 = -t5427 * t5634 + (0.2e1 * t5076 * t5323 - t5220 * t5712) * pkin(2) + t5810;
t5714 = t5372 * t5920;
t5775 = pkin(2) * t5844;
t5798 = t5461 - t5457;
t6009 = t5427 / 0.2e1;
t5544 = ((t5370 * t6052 + 0.2e1 * t5259 + t5798) * t5714 - 0.2e1 * (t5082 * t6009 + t5255 * t5713) * t5775 - t5370 * t5711 + t5256 * t5920 + (-t5082 * t5978 + t5566) * t5841) * t5358 * t5710;
t5359 = 0.1e1 / t5412 ^ 2;
t5861 = t5359 * t5463;
t5283 = sin(t5398);
t5954 = (-t5283 * t5712 + t5082 * (t5323 + pkin(2))) * t5109;
t5016 = (-t5544 + (t5052 * t5662 - t5954) * t5861) * t5458 + t5028;
t5079 = t5082 ^ 2;
t5226 = 0.1e1 / t5229 ^ 2;
t5919 = t5165 * t5226;
t5999 = pkin(2) * t5283;
t6006 = t5462 / 0.2e1;
t5049 = (t5082 * t5999 - t5712 + (t5283 * t5109 * t5462 + (t5413 / 0.2e1 + (pkin(1) * t5413 + t5999) * t6006) * t5951) * t5358) * t5919;
t5957 = t5049 * t5413;
t5984 = pkin(4) * t5413;
t6012 = pkin(4) / 0.2e1;
t6035 = -0.4e1 * pkin(1);
t6056 = t5076 * t5714 * t6035 + t5079 * t5984 + 0.2e1 * t5565 * t5920 - 0.2e1 * (pkin(1) * t5957 + t5016 * t6012) * t5422;
t5409 = sin(qJ(3,2));
t5355 = 0.1e1 / t5409;
t5420 = cos(qJ(1,2));
t5234 = t5420 * t5879;
t5245 = t5411 * t5424;
t5691 = t5420 * t5870;
t5150 = -t5691 / 0.2e1 + t5234 / 0.2e1 + t5245;
t5248 = t5424 * t5420;
t5161 = t5248 - t6058;
t5418 = cos(qJ(3,2));
t5980 = t5418 * pkin(2);
t5253 = pkin(1) + t5980;
t5410 = sin(qJ(2,2));
t5419 = cos(qJ(2,2));
t5851 = t5409 * t5419;
t5865 = (t5418 + 0.1e1) * (t5418 - 0.1e1);
t5174 = pkin(2) * t5410 * t5865 + t5253 * t5851;
t5208 = t5315 * t5426 + t5318 * t5425;
t5907 = t5208 * t5410;
t5186 = pkin(1) * t5907;
t5189 = pkin(2) * t5208;
t5192 = pkin(1) * t5208;
t5325 = pkin(1) * t5418;
t5442 = 0.2e1 * qJ(3,2);
t5338 = sin(t5442);
t5366 = t5418 ^ 2;
t5365 = t5418 * t5366;
t5368 = t5419 ^ 2;
t5367 = t5419 * t5368;
t5853 = t5409 * t5410;
t5891 = t5253 * t5419;
t5506 = pkin(2) * t5853 - t5891;
t5852 = t5409 * t5411;
t5708 = t5515 * t5852;
t5808 = -pkin(1) * t5708 + t5189;
t5994 = pkin(2) * t5366;
t5512 = -0.2e1 * t5208 * t5994 + t5808;
t5834 = t5420 * t5427;
t5557 = t5515 * t5834 + t5186;
t5446 = 0.2e1 * qJ(2,2);
t5348 = cos(t5446);
t5581 = t5174 * t5348 * t5248;
t5836 = t5418 * t5409;
t5677 = t5410 * t5836;
t5582 = t5419 * t5677;
t5644 = -0.2e1 * t5708;
t5164 = -t5234 - t5245 + t5691;
t5848 = t5410 * t5427;
t5669 = t5164 * t5848;
t5675 = t5411 * t5830;
t5676 = t5410 * t5834;
t5339 = sin(t5446);
t5688 = t5339 * t5248;
t5850 = t5410 * t5411;
t5707 = t5515 * t5850;
t5801 = 0.4e1 * t5365 - 0.5e1 * t5418;
t5321 = t5411 * pkin(2);
t5805 = t5409 * t5676 + t5321;
t5825 = t5457 * t5208;
t5849 = t5410 * t5419;
t5908 = t5208 * t5409;
t5921 = t5164 * t5427;
t5934 = (-pkin(1) * t6058 + t5908 * t6030) * t5418;
t5979 = t5419 * pkin(2);
t5991 = pkin(2) * t5409;
t5346 = cos(t5442);
t5997 = pkin(2) * t5346;
t6020 = 0.2e1 * t5366;
t6003 = t6020 - 0.1e1;
t6019 = 0.4e1 * t5366;
t6050 = -0.2e1 * t5366 * t5827 + 0.2e1 * t5312;
t5102 = (t5581 + ((pkin(2) * t5644 - t5192) * t5418 + t5512) * t5367 + (t5557 * t5409 + (-pkin(2) * t6003 * t6058 + t5934) * t5410) * t5368 + ((t5192 - (t5852 * t6031 - t5676) * t5515) * t5418 - t5512) * t5419 + t5707 * t5994 - t5677 * t5189 - (pkin(2) * t5850 + t5409 * t5834) * t5515) * t5997 - pkin(2) * (t5174 * t5688 - ((pkin(1) * t5908 + t5934) * t5368 + (-t5410 * t5808 + t5418 * t5557) * t5419 - t5515 * t5805) * t5419 - ((t5849 * t6020 - t5836) * t5208 - (t6003 * t5368 - t5366 - 0.2e1 * t5582) * t6058) * t5979) * t5338 - pkin(1) * t5506 * t5688 * t5865 + t5581 * t5325 + (t5418 * t5644 * t5827 + t5208 * t6050 + (-(t6019 - 0.3e1) * t5708 - t5801 * t5208) * t6010) * t5367 + ((((t5186 + t5675) * t6019 - 0.3e1 * t5186 + t5150 * t6014) * t5409 - t5801 * pkin(1) * t5707) * pkin(2) + 0.2e1 * (-pkin(1) * t5921 + t5827 * t5907) * t5836 + t5707 * t6050) * t5368 + ((0.2e1 * t5410 * t5675 + t5192) * t5365 * t6030 + (-0.2e1 * t5825 + ((t5248 + 0.2e1 * t6058) * t5991 - 0.2e1 * t5669) * pkin(1)) * t5366 + ((t5248 * t5332 - t6052 * t6058) * t5409 + (0.4e1 / 0.3e1 * (-t5691 / 0.4e1 + t5234 / 0.4e1 + t5245) * t5848 + t5192) * t6032) * t5418 + pkin(1) * (t5248 - 0.3e1 * t6058) * t5991 + t5669 * t6033 + t5825) * t5419 + pkin(2) * ((-t5245 * t5366 + t5150) * t5409 * t6053 + ((t5365 - t5418) * pkin(1) * t5248 + (t5161 * t5366 + t5208 * t5836 - t5161) * pkin(2)) * t5410);
t5258 = pkin(1) * t5980;
t5123 = (t5253 * t5849 + (t5368 - 0.1e1) * t5991) * t5997 / 0.2e1 - t5506 * t5338 * t5979 / 0.2e1 + pkin(2) * (pkin(1) * t5366 - t5980 / 0.2e1 + t5431) * t5849 + ((t5258 + t5312) * t5368 + t6008) * t5409;
t5952 = t5102 / t5123;
t5741 = t5355 * t5952;
t5567 = t5741 / 0.2e1;
t5093 = t5462 * t5567;
t5777 = t5409 * t5988;
t5778 = t5409 * t5989;
t5847 = t5411 * t5427;
t5889 = t5253 * t5426;
t5890 = t5253 * t5425;
t5108 = ((-t5411 * t5889 - t5778) * t5419 + t5420 * t5828) * t5318 + ((t5411 * t5890 - t5777) * t5419 - t5420 * t5829) * t5315 - (t5420 * t5891 + t5847) * t5424 + ((t5411 * t5777 - t5890) * t5318 + (-t5411 * t5778 - t5889) * t5315 + t5248 * t5991) * t5410;
t5607 = t5108 * t5355 * t5822;
t5081 = t5093 + t5607;
t5072 = t5457 * t5081;
t5075 = t5093 + t5607 / 0.2e1;
t5096 = pkin(1) * t5567;
t5105 = 0.2e1 / 0.3e1 * t5607;
t5440 = 0.4e1 * qJ(3,2);
t5382 = t5440 + t5446;
t5270 = sin(t5382);
t5383 = t5442 + t5446;
t5271 = sin(t5383);
t5443 = -0.2e1 * qJ(3,2);
t5385 = t5443 + t5446;
t5272 = sin(t5385);
t5441 = 0.3e1 * qJ(3,2);
t5386 = t5446 + t5441;
t5273 = sin(t5386);
t5387 = t5446 + qJ(3,2);
t5274 = sin(t5387);
t5445 = 0.3e1 * qJ(2,2);
t5293 = cos(t5440 + t5445);
t5294 = cos(t5441 + qJ(2,2));
t5384 = t5442 + qJ(2,2);
t5295 = cos(t5384);
t5296 = cos(t5445 + t5441);
t5297 = cos(t5445 + t5442);
t5298 = cos(t5445 + qJ(3,2));
t5389 = qJ(2,2) + qJ(3,2);
t5299 = cos(t5389);
t5390 = qJ(2,2) - qJ(3,2);
t5300 = cos(t5390);
t5337 = sin(t5441);
t5388 = t5446 - qJ(3,2);
t5444 = 0.4e1 * qJ(2,2);
t5228 = pkin(1) * t5419 + pkin(2) * t5299;
t5223 = 0.1e1 / t5228;
t5717 = t5223 * t5921;
t5560 = t5717 * t6010;
t5664 = -t5952 / 0.2e1;
t5568 = t5355 * t5664;
t5663 = -t5952 / 0.4e1;
t5685 = t5355 * t5823;
t5923 = t5164 * t5223;
t5715 = t5462 * t5923;
t5716 = t5457 * t5923;
t5820 = t5461 * sin(t5388);
t5765 = pkin(2) * t5820;
t5811 = t5072 + t5096;
t5949 = t5108 * t5458;
t6039 = cos(qJ(2,2) + t5443) + cos(t5445);
t6040 = -t5297 - t5419;
t6041 = -t5293 - t5295;
t5027 = (-((t6041 * t5081 * t6052 + (t6039 * t5741 + (-(t5093 - t5607 / 0.2e1) * t5299 + (-t5296 + t5298) * t5075) * t6048) * pkin(1)) * t5427 + (t5655 * sin(t5444 + t5441) - t5456 * sin(0.5e1 * qJ(3,2) + t5444) + sin(t5444 + qJ(3,2)) * t5792 + t5337 * t5793 + 0.6e1 * t5765 + t5273 * t5795 + t5274 * t5794 + t5409 * t5796 + (sin(t5444) + t5272) * t5460 + (-t5333 * sin(t5442 + t5444) + t5339 * t6026 + t5338 * t6025 + t5271 * t6024 + (-sin(t5440 + t5444) - t5270) * t5789) * pkin(1)) * t5923 + ((pkin(2) * t5300 * t5952 - t5108 * t5294) * t5355 + t6040 * (t5096 - t5072)) * t6053) * t5715 / 0.4e1 + ((t5811 * t5273 * t6031 - (t5096 + (0.4e1 * t5949 + 0.2e1 * t5952) * t5685) * pkin(1) * t5271 + 0.4e1 * t5075 * t5765 + t5461 * t5272 * t5567 + t5457 * t5270 * t5568 + t5081 * t5274 * t5656 + (t5096 + (0.3e1 / 0.2e1 * t5952 + 0.2e1 * t5949) * t5685) * t5338 * t6034 + (t5093 + 0.4e1 / 0.5e1 * t5607) * t5339 * t5797 - t5337 * t5741 * t6010 - 0.6e1 * ((t5741 * t6005 + t5105) * t5457 + t5461 * (t5093 + t5105)) * t5991 + t6041 * t5427 * t5716 + t6039 * t5461 * t5717 - 0.2e1 * (t5296 + t5299) * t5560 + 0.2e1 * (t5300 + t5298) * t5560 + t6040 * t5667 * t5923) * t5663 + 0.2e1 * ((-t5820 / 0.2e1 + t5273 * t6008 + t5274 * t5657 + t5332 * t5409 + (t5271 + t5338 - t5339) * t6010) * t5081 + ((-t5297 / 0.4e1 + t5293 / 0.4e1 + t5295 / 0.4e1 - t5419 / 0.4e1) * pkin(2) + (t5296 / 0.4e1 - t5298 / 0.4e1 + t5294 / 0.4e1 - t5299 / 0.4e1) * pkin(1)) * t5717) * t5108) * t5355 * t5463) / (t5311 * cos(t5383) + cos(t5385) * t6007 + cos(t5382) * t5402 + t5312 * t5348 - t5332 * t5346 + t5258 + (-cos(t5388) - cos(t5386) + 0.2e1 * cos(t5387) - cos(t5441)) * t6010 + t5332);
t5219 = t5410 * t5418 + t5851;
t5901 = t5223 * t5410;
t5718 = t5164 * t5901;
t5635 = pkin(1) * t5718;
t5983 = t5075 * pkin(1);
t5051 = -t5427 * t5635 + (-t5219 * t5717 + 0.2e1 * t5418 * t5983) * pkin(2) + t5811;
t5719 = t5368 * t5923;
t5779 = pkin(2) * t5851;
t5545 = ((t5366 * t6052 + 0.2e1 * t5258 + t5798) * t5719 - 0.2e1 * (t5081 * t6009 + t5253 * t5718) * t5779 - t5366 * t5716 + t5256 * t5923 + (-t5081 * t5980 + t5568) * t5848) * t5355 * t5715;
t5356 = 0.1e1 / t5409 ^ 2;
t5862 = t5356 * t5463;
t5276 = sin(t5389);
t5955 = (-t5276 * t5717 + t5081 * (t5325 + pkin(2))) * t5108;
t5015 = (-t5545 + (t5051 * t5664 - t5955) * t5862) * t5458 + t5027;
t5078 = t5081 ^ 2;
t5224 = 0.1e1 / t5228 ^ 2;
t5922 = t5164 * t5224;
t6000 = pkin(2) * t5276;
t5048 = (t5081 * t6000 - t5717 + (t5276 * t5108 * t5462 + (t5410 / 0.2e1 + (pkin(1) * t5410 + t6000) * t6006) * t5952) * t5355) * t5922;
t5960 = t5048 * t5410;
t5985 = pkin(4) * t5410;
t6055 = t5078 * t5985 + 0.2e1 * t5567 * t5923 - 0.4e1 * t5719 * t5983 - 0.2e1 * (pkin(1) * t5960 + t5015 * t6012) * t5419;
t5406 = sin(qJ(3,3));
t5352 = 0.1e1 / t5406;
t5417 = cos(qJ(1,3));
t5233 = t5417 * t5882;
t5244 = t5408 * t5424;
t5692 = t5417 * t5873;
t5149 = -t5692 / 0.2e1 + t5233 / 0.2e1 + t5244;
t5247 = t5424 * t5417;
t5166 = t5247 - t6057;
t5415 = cos(qJ(3,3));
t5982 = t5415 * pkin(2);
t5251 = pkin(1) + t5982;
t5407 = sin(qJ(2,3));
t5416 = cos(qJ(2,3));
t5858 = t5406 * t5416;
t5866 = (t5415 + 0.1e1) * (t5415 - 0.1e1);
t5173 = pkin(2) * t5407 * t5866 + t5251 * t5858;
t5206 = t5314 * t5426 + t5317 * t5425;
t5910 = t5206 * t5407;
t5185 = pkin(1) * t5910;
t5188 = pkin(2) * t5206;
t5191 = pkin(1) * t5206;
t5324 = pkin(1) * t5415;
t5434 = 0.2e1 * qJ(3,3);
t5335 = sin(t5434);
t5362 = t5415 ^ 2;
t5361 = t5415 * t5362;
t5364 = t5416 ^ 2;
t5363 = t5416 * t5364;
t5860 = t5406 * t5407;
t5895 = t5251 * t5416;
t5507 = pkin(2) * t5860 - t5895;
t5859 = t5406 * t5408;
t5709 = t5516 * t5859;
t5809 = -pkin(1) * t5709 + t5188;
t5995 = pkin(2) * t5362;
t5513 = -0.2e1 * t5206 * t5995 + t5809;
t5837 = t5417 * t5427;
t5558 = t5516 * t5837 + t5185;
t5438 = 0.2e1 * qJ(2,3);
t5345 = cos(t5438);
t5583 = t5173 * t5345 * t5247;
t5839 = t5415 * t5406;
t5682 = t5407 * t5839;
t5584 = t5416 * t5682;
t5645 = -0.2e1 * t5709;
t5163 = -t5233 - t5244 + t5692;
t5855 = t5407 * t5427;
t5670 = t5163 * t5855;
t5679 = t5408 * t5830;
t5857 = t5407 * t5408;
t5680 = t5516 * t5857;
t5681 = t5407 * t5837;
t5336 = sin(t5438);
t5689 = t5336 * t5247;
t5802 = 0.4e1 * t5361 - 0.5e1 * t5415;
t5320 = t5408 * pkin(2);
t5806 = t5406 * t5681 + t5320;
t5826 = t5457 * t5206;
t5856 = t5407 * t5416;
t5911 = t5206 * t5406;
t5924 = t5163 * t5427;
t5935 = (-pkin(1) * t6057 + t5911 * t6030) * t5415;
t5981 = t5416 * pkin(2);
t5992 = pkin(2) * t5406;
t5343 = cos(t5434);
t5998 = pkin(2) * t5343;
t6023 = 0.2e1 * t5362;
t6004 = t6023 - 0.1e1;
t6022 = 0.4e1 * t5362;
t6049 = -0.2e1 * t5362 * t5827 + 0.2e1 * t5312;
t5101 = (t5583 + ((pkin(2) * t5645 - t5191) * t5415 + t5513) * t5363 + (t5558 * t5406 + (-pkin(2) * t6004 * t6057 + t5935) * t5407) * t5364 + ((t5191 - (t5859 * t6031 - t5681) * t5516) * t5415 - t5513) * t5416 + t5680 * t5995 - t5682 * t5188 - (pkin(2) * t5857 + t5406 * t5837) * t5516) * t5998 - pkin(2) * (t5173 * t5689 - ((pkin(1) * t5911 + t5935) * t5364 + (-t5407 * t5809 + t5415 * t5558) * t5416 - t5806 * t5516) * t5416 - ((t5856 * t6023 - t5839) * t5206 - (t6004 * t5364 - t5362 - 0.2e1 * t5584) * t6057) * t5981) * t5335 - pkin(1) * t5507 * t5689 * t5866 + t5583 * t5324 + (t5415 * t5645 * t5827 + t5206 * t6049 + (-(t6022 - 0.3e1) * t5709 - t5802 * t5206) * t6010) * t5363 + ((((t5185 + t5679) * t6022 - 0.3e1 * t5185 + t5149 * t6014) * t5406 - t5802 * pkin(1) * t5680) * pkin(2) + 0.2e1 * (-pkin(1) * t5924 + t5827 * t5910) * t5839 + t5680 * t6049) * t5364 + ((0.2e1 * t5407 * t5679 + t5191) * t5361 * t6030 + (-0.2e1 * t5826 + ((t5247 + 0.2e1 * t6057) * t5992 - 0.2e1 * t5670) * pkin(1)) * t5362 + ((t5247 * t5332 - t6052 * t6057) * t5406 + (0.4e1 / 0.3e1 * (-t5692 / 0.4e1 + t5233 / 0.4e1 + t5244) * t5855 + t5191) * t6032) * t5415 + pkin(1) * (t5247 - 0.3e1 * t6057) * t5992 + t5670 * t6033 + t5826) * t5416 + pkin(2) * ((-t5244 * t5362 + t5149) * t5406 * t6053 + ((t5361 - t5415) * pkin(1) * t5247 + (t5166 * t5362 + t5206 * t5839 - t5166) * pkin(2)) * t5407);
t5257 = pkin(1) * t5982;
t5122 = (t5251 * t5856 + (t5364 - 0.1e1) * t5992) * t5998 / 0.2e1 - t5507 * t5335 * t5981 / 0.2e1 + pkin(2) * (pkin(1) * t5362 - t5982 / 0.2e1 + t5431) * t5856 + ((t5257 + t5312) * t5364 + t6008) * t5406;
t5953 = t5101 / t5122;
t5742 = t5352 * t5953;
t5569 = t5742 / 0.2e1;
t5092 = t5462 * t5569;
t5781 = t5406 * t5988;
t5782 = t5406 * t5989;
t5854 = t5408 * t5427;
t5893 = t5251 * t5426;
t5894 = t5251 * t5425;
t5107 = ((-t5408 * t5893 - t5782) * t5416 + t5417 * t5828) * t5317 + ((t5408 * t5894 - t5781) * t5416 - t5417 * t5829) * t5314 - (t5417 * t5895 + t5854) * t5424 + ((t5408 * t5781 - t5894) * t5317 + (-t5408 * t5782 - t5893) * t5314 + t5247 * t5992) * t5407;
t5608 = t5107 * t5352 * t5822;
t5080 = t5092 + t5608;
t5071 = t5457 * t5080;
t5074 = t5092 + t5608 / 0.2e1;
t5095 = pkin(1) * t5569;
t5104 = 0.2e1 / 0.3e1 * t5608;
t5432 = 0.4e1 * qJ(3,3);
t5373 = t5432 + t5438;
t5263 = sin(t5373);
t5433 = 0.3e1 * qJ(3,3);
t5374 = t5433 + t5438;
t5264 = sin(t5374);
t5375 = t5434 + t5438;
t5265 = sin(t5375);
t5435 = -0.2e1 * qJ(3,3);
t5377 = t5435 + t5438;
t5266 = sin(t5377);
t5378 = t5438 + qJ(3,3);
t5267 = sin(t5378);
t5437 = 0.3e1 * qJ(2,3);
t5284 = cos(t5432 + t5437);
t5285 = cos(t5433 + t5437);
t5286 = cos(t5434 + t5437);
t5376 = t5434 + qJ(2,3);
t5287 = cos(t5376);
t5288 = cos(t5437 + qJ(3,3));
t5289 = cos(qJ(2,3) + t5433);
t5380 = qJ(2,3) + qJ(3,3);
t5290 = cos(t5380);
t5381 = qJ(2,3) - qJ(3,3);
t5291 = cos(t5381);
t5334 = sin(t5433);
t5379 = t5438 - qJ(3,3);
t5436 = 0.4e1 * qJ(2,3);
t5227 = pkin(1) * t5416 + pkin(2) * t5290;
t5221 = 0.1e1 / t5227;
t5722 = t5221 * t5924;
t5561 = t5722 * t6010;
t5666 = -t5953 / 0.2e1;
t5570 = t5352 * t5666;
t5665 = -t5953 / 0.4e1;
t5686 = t5352 * t5823;
t5926 = t5163 * t5221;
t5720 = t5462 * t5926;
t5721 = t5457 * t5926;
t5821 = t5461 * sin(t5379);
t5766 = pkin(2) * t5821;
t5812 = t5071 + t5095;
t5950 = t5107 * t5458;
t6042 = cos(qJ(2,3) + t5435) + cos(t5437);
t6043 = -t5286 - t5416;
t6044 = -t5284 - t5287;
t5026 = (-((t6044 * t5080 * t6052 + (t6042 * t5742 + (-(t5092 - t5608 / 0.2e1) * t5290 + (-t5285 + t5288) * t5074) * t6048) * pkin(1)) * t5427 + (t5655 * sin(t5433 + t5436) - t5456 * sin(0.5e1 * qJ(3,3) + t5436) + t5334 * t5793 + 0.6e1 * t5766 + t5264 * t5795 + t5267 * t5794 + sin(qJ(3,3) + t5436) * t5792 + t5406 * t5796 + (sin(t5436) + t5266) * t5460 + (-t5333 * sin(t5436 + t5434) + t5336 * t6026 + t5335 * t6025 + t5265 * t6024 + (-sin(t5432 + t5436) - t5263) * t5789) * pkin(1)) * t5926 + ((pkin(2) * t5291 * t5953 - t5107 * t5289) * t5352 + t6043 * (t5095 - t5071)) * t6053) * t5720 / 0.4e1 + ((-(t5095 + (0.4e1 * t5950 + 0.2e1 * t5953) * t5686) * pkin(1) * t5265 + t5812 * t5264 * t6031 + 0.4e1 * t5074 * t5766 + t5461 * t5266 * t5569 + t5457 * t5263 * t5570 + t5080 * t5267 * t5656 + (t5095 + (0.3e1 / 0.2e1 * t5953 + 0.2e1 * t5950) * t5686) * t5335 * t6034 + (t5092 + 0.4e1 / 0.5e1 * t5608) * t5336 * t5797 - t5334 * t5742 * t6010 - 0.6e1 * ((t5742 * t6005 + t5104) * t5457 + t5461 * (t5092 + t5104)) * t5992 + t6044 * t5427 * t5721 + t6042 * t5461 * t5722 - 0.2e1 * (t5285 + t5290) * t5561 + 0.2e1 * (t5291 + t5288) * t5561 + t6043 * t5667 * t5926) * t5665 + 0.2e1 * ((-t5821 / 0.2e1 + t5264 * t6008 + t5267 * t5657 + t5332 * t5406 + (t5265 + t5335 - t5336) * t6010) * t5080 + ((-t5286 / 0.4e1 + t5284 / 0.4e1 + t5287 / 0.4e1 - t5416 / 0.4e1) * pkin(2) + (t5285 / 0.4e1 + t5289 / 0.4e1 - t5288 / 0.4e1 - t5290 / 0.4e1) * pkin(1)) * t5722) * t5107) * t5352 * t5463) / (t5311 * cos(t5375) + cos(t5377) * t6007 + cos(t5373) * t5402 + t5312 * t5345 - t5332 * t5343 + t5257 + (-cos(t5379) - cos(t5374) + 0.2e1 * cos(t5378) - cos(t5433)) * t6010 + t5332);
t5218 = t5407 * t5415 + t5858;
t5902 = t5221 * t5407;
t5723 = t5163 * t5902;
t5636 = pkin(1) * t5723;
t5050 = -t5427 * t5636 + (0.2e1 * t5074 * t5324 - t5218 * t5722) * pkin(2) + t5812;
t5724 = t5364 * t5926;
t5783 = pkin(2) * t5858;
t5546 = ((t5362 * t6052 + 0.2e1 * t5257 + t5798) * t5724 - 0.2e1 * (t5080 * t6009 + t5251 * t5723) * t5783 - t5362 * t5721 + t5256 * t5926 + (-t5080 * t5982 + t5570) * t5855) * t5352 * t5720;
t5353 = 0.1e1 / t5406 ^ 2;
t5863 = t5353 * t5463;
t5269 = sin(t5380);
t5956 = (-t5269 * t5722 + t5080 * (t5324 + pkin(2))) * t5107;
t5014 = (-t5546 + (t5050 * t5666 - t5956) * t5863) * t5458 + t5026;
t5077 = t5080 ^ 2;
t5222 = 0.1e1 / t5227 ^ 2;
t5925 = t5163 * t5222;
t6001 = pkin(2) * t5269;
t5047 = (t5080 * t6001 - t5722 + (t5269 * t5107 * t5462 + (t5407 / 0.2e1 + (pkin(1) * t5407 + t6001) * t6006) * t5953) * t5352) * t5925;
t5963 = t5047 * t5407;
t5986 = pkin(4) * t5407;
t6054 = t5074 * t5724 * t6035 + t5077 * t5986 + 0.2e1 * t5569 * t5926 - 0.2e1 * (pkin(1) * t5963 + t5014 * t6012) * t5416;
t6021 = 0.2e1 * t5364;
t5260 = t6021 - 0.1e1;
t6047 = t5222 * t5260;
t6018 = 0.2e1 * t5368;
t5261 = t6018 - 0.1e1;
t6046 = t5224 * t5261;
t6015 = 0.2e1 * t5372;
t5262 = t6015 - 0.1e1;
t6045 = t5226 * t5262;
t5158 = (t5362 - 0.1e1 / 0.2e1) * t5856 + (t5364 - 0.1e1 / 0.2e1) * t5839;
t6029 = 0.4e1 * t5158;
t5159 = (t5366 - 0.1e1 / 0.2e1) * t5849 + (t5368 - 0.1e1 / 0.2e1) * t5836;
t6028 = 0.4e1 * t5159;
t5160 = (t5370 - 0.1e1 / 0.2e1) * t5842 + (t5372 - 0.1e1 / 0.2e1) * t5833;
t6027 = 0.4e1 * t5160;
t6011 = pkin(4) / 0.4e1;
t5976 = -qJ(3,1) + qJ(1,1);
t5975 = qJ(3,1) + qJ(1,1);
t5974 = -qJ(3,2) + qJ(1,2);
t5973 = qJ(3,2) + qJ(1,2);
t5972 = -qJ(3,3) + qJ(1,3);
t5971 = qJ(3,3) + qJ(1,3);
t5970 = MDP(8) * t5462;
t5969 = -0.2e1 * qJ(2,1) + qJ(1,1);
t5968 = -0.2e1 * qJ(2,2) + qJ(1,2);
t5967 = -0.2e1 * qJ(2,3) + qJ(1,3);
t5966 = MDP(15) * t5462;
t5965 = t5047 * t5221;
t5964 = t5047 * t5352;
t5962 = t5048 * t5223;
t5961 = t5048 * t5355;
t5959 = t5049 * t5225;
t5958 = t5049 * t5358;
t5155 = t5163 ^ 2;
t5931 = t5155 * t5222;
t5143 = t5364 * t5931;
t5125 = -0.2e1 * t5143 + t5931;
t5194 = 0.1e1 / t5507;
t5947 = t5125 * t5194;
t5156 = t5164 ^ 2;
t5929 = t5156 * t5224;
t5144 = t5368 * t5929;
t5126 = -0.2e1 * t5144 + t5929;
t5195 = 0.1e1 / t5506;
t5946 = t5126 * t5195;
t5157 = t5165 ^ 2;
t5927 = t5157 * t5226;
t5145 = t5372 * t5927;
t5127 = -0.2e1 * t5145 + t5927;
t5196 = 0.1e1 / t5505;
t5945 = t5127 * t5196;
t5944 = (-(sin(qJ(2,3) + t5971) - sin(qJ(2,3) - t5972)) * t6053 + (-cos(t5435 + t5967) - cos(qJ(1,3) + t5375) - 0.2e1 * t5417) * pkin(2) + (-cos(qJ(1,3) + t5378) - cos(t5972) - cos(t5971) - cos(qJ(3,3) - t5967)) * pkin(1)) / ((-sin(t5376) + t5407) * pkin(2) + (sin(t5381) - t5269) * pkin(1));
t5943 = (-(-sin(qJ(2,2) - t5974) + sin(qJ(2,2) + t5973)) * t6053 + (-cos(t5443 + t5968) - cos(qJ(1,2) + t5383) - 0.2e1 * t5420) * pkin(2) + (-cos(qJ(3,2) - t5968) - cos(qJ(1,2) + t5387) - cos(t5974) - cos(t5973)) * pkin(1)) / ((-sin(t5384) + t5410) * pkin(2) + (sin(t5390) - t5276) * pkin(1));
t5942 = (-(-sin(qJ(2,1) - t5976) + sin(qJ(2,1) + t5975)) * t6053 + (-cos(t5451 + t5969) - cos(qJ(1,1) + t5394) - 0.2e1 * t5423) * pkin(2) + (-cos(qJ(3,1) - t5969) - cos(qJ(1,1) + t5395) - cos(t5976) - cos(t5975)) * pkin(1)) / ((-sin(t5393) + t5413) * pkin(2) + (sin(t5399) - t5283) * pkin(1));
t5152 = -t5408 * t5507 - t5837;
t5197 = t5251 * t5407 + t5783;
t5134 = t5152 * t5314 - t5197 * t5317;
t5941 = t5134 * t5352;
t5135 = -t5152 * t5317 - t5197 * t5314;
t5940 = t5135 * t5352;
t5153 = -t5411 * t5506 - t5834;
t5198 = t5253 * t5410 + t5779;
t5136 = t5153 * t5315 - t5198 * t5318;
t5939 = t5136 * t5355;
t5137 = -t5153 * t5318 - t5198 * t5315;
t5938 = t5137 * t5355;
t5154 = -t5414 * t5505 - t5831;
t5199 = t5255 * t5413 + t5775;
t5138 = t5154 * t5316 - t5199 * t5319;
t5937 = t5138 * t5358;
t5139 = -t5154 * t5319 - t5199 * t5316;
t5936 = t5139 * t5358;
t5932 = t5155 * t5194;
t5930 = t5156 * t5195;
t5928 = t5157 * t5196;
t5167 = t5417 * t5507 - t5854;
t5917 = t5167 * t5352;
t5168 = t5420 * t5506 - t5847;
t5916 = t5168 * t5355;
t5169 = t5423 * t5505 - t5840;
t5915 = t5169 * t5358;
t5914 = t5194 * t5352;
t5913 = t5195 * t5355;
t5912 = t5196 * t5358;
t5236 = -pkin(2) + t5324 + 0.2e1 * t5995;
t5899 = t5236 * t5408;
t5237 = -pkin(2) + t5325 + 0.2e1 * t5994;
t5898 = t5237 * t5411;
t5238 = -pkin(2) + t5323 + 0.2e1 * t5993;
t5897 = t5238 * t5414;
t5896 = (pkin(1) + 0.2e1 * t5982) * t5406;
t5892 = (pkin(1) + 0.2e1 * t5980) * t5409;
t5888 = (pkin(1) + 0.2e1 * t5978) * t5412;
t5884 = t5314 * t5407;
t5883 = t5314 * t5417;
t5881 = t5315 * t5410;
t5880 = t5315 * t5420;
t5878 = t5316 * t5413;
t5877 = t5316 * t5423;
t5875 = t5317 * t5407;
t5874 = t5317 * t5417;
t5872 = t5318 * t5410;
t5871 = t5318 * t5420;
t5869 = t5319 * t5413;
t5868 = t5319 * t5423;
t5838 = t5415 * t5416;
t5835 = t5418 * t5419;
t5832 = t5421 * t5422;
t5053 = t5074 * t5636 + t5077 * t6011;
t5492 = pkin(1) * t5047 * t6021 - t5014 * t5986;
t5818 = -0.4e1 * t5053 * t5838 + t5406 * t6054 + t5415 * t5492;
t5817 = 0.4e1 * t5053 * t5858 - t5406 * t5492 + t5415 * t6054;
t5054 = t5075 * t5635 + t5078 * t6011;
t5491 = pkin(1) * t5048 * t6018 - t5015 * t5985;
t5816 = -0.4e1 * t5054 * t5835 + t5409 * t6055 + t5418 * t5491;
t5815 = 0.4e1 * t5054 * t5851 - t5409 * t5491 + t5418 * t6055;
t5055 = t5076 * t5634 + t5079 * t6011;
t5490 = pkin(1) * t5049 * t6015 - t5016 * t5984;
t5814 = -0.4e1 * t5055 * t5832 + t5412 * t6056 + t5421 * t5490;
t5813 = 0.4e1 * t5055 * t5844 - t5412 * t5490 + t5421 * t6056;
t5788 = 2 * t5458;
t5784 = pkin(2) * t5839;
t5780 = pkin(2) * t5836;
t5776 = pkin(2) * t5833;
t5772 = pkin(4) * t5047 * t5416;
t5771 = pkin(4) * t5048 * t5419;
t5770 = pkin(4) * t5049 * t5422;
t5769 = pkin(4) * t5963;
t5768 = pkin(4) * t5960;
t5767 = pkin(4) * t5957;
t5763 = t5047 * t5914;
t5215 = t5838 - t5860;
t5762 = t5215 * t5964;
t5761 = t5218 * t5964;
t5760 = t5408 * t5965;
t5759 = t5417 * t5965;
t5758 = t5048 * t5913;
t5216 = t5835 - t5853;
t5757 = t5216 * t5961;
t5756 = t5219 * t5961;
t5755 = t5411 * t5962;
t5754 = t5420 * t5962;
t5753 = t5049 * t5912;
t5217 = t5832 - t5846;
t5752 = t5217 * t5958;
t5751 = t5220 * t5958;
t5750 = t5414 * t5959;
t5749 = t5423 * t5959;
t5748 = t5080 * t5925;
t5747 = t5081 * t5922;
t5746 = t5082 * t5919;
t5745 = t5101 ^ 2 / t5122 ^ 2 * t5353;
t5744 = t5102 ^ 2 / t5123 ^ 2 * t5356;
t5743 = t5103 ^ 2 / t5124 ^ 2 * t5359;
t5179 = t5320 * t5362 - t5806;
t5683 = t5406 * t5857;
t5480 = pkin(1) * t5683 + (t5683 * t6030 + t5837) * t5415;
t5110 = (-t5314 * t5899 + t5317 * t5896) * t5364 + (t5236 * t5875 + t5314 * t5480) * t5416 + t5179 * t5314 - t5317 * t5784;
t5739 = t5110 * t5914;
t5111 = (t5314 * t5896 + t5317 * t5899) * t5364 + (t5236 * t5884 - t5317 * t5480) * t5416 - t5179 * t5317 - t5314 * t5784;
t5738 = t5111 * t5914;
t5180 = t5321 * t5366 - t5805;
t5678 = t5409 * t5850;
t5479 = pkin(1) * t5678 + (t5678 * t6030 + t5834) * t5418;
t5112 = (-t5315 * t5898 + t5318 * t5892) * t5368 + (t5237 * t5872 + t5315 * t5479) * t5419 + t5180 * t5315 - t5318 * t5780;
t5737 = t5112 * t5913;
t5113 = (t5315 * t5892 + t5318 * t5898) * t5368 + (t5237 * t5881 - t5318 * t5479) * t5419 - t5180 * t5318 - t5315 * t5780;
t5736 = t5113 * t5913;
t5181 = t5322 * t5370 - t5804;
t5674 = t5412 * t5843;
t5478 = pkin(1) * t5674 + (t5674 * t6030 + t5831) * t5421;
t5114 = (-t5316 * t5897 + t5319 * t5888) * t5372 + (t5238 * t5869 + t5316 * t5478) * t5422 + t5181 * t5316 - t5319 * t5776;
t5735 = t5114 * t5912;
t5115 = (t5316 * t5888 + t5319 * t5897) * t5372 + (t5238 * t5878 - t5319 * t5478) * t5422 - t5181 * t5319 - t5316 * t5776;
t5734 = t5115 * t5912;
t5730 = t5155 * t5944;
t5729 = t5156 * t5943;
t5728 = t5157 * t5942;
t5727 = t5352 * t5931;
t5726 = t5355 * t5929;
t5725 = t5358 * t5927;
t5704 = t5026 * t5902;
t5703 = t5221 * t5026 * t5416;
t5702 = t5221 * t5874;
t5701 = t5222 * t5856;
t5700 = t5027 * t5901;
t5699 = t5223 * t5027 * t5419;
t5698 = t5223 * t5871;
t5697 = t5224 * t5849;
t5696 = t5028 * t5900;
t5695 = t5225 * t5028 * t5422;
t5694 = t5225 * t5868;
t5693 = t5226 * t5842;
t5660 = t5944 / 0.2e1;
t5659 = t5943 / 0.2e1;
t5658 = t5942 / 0.2e1;
t5654 = t5221 * t5818;
t5653 = t5221 * t5817;
t5652 = t5223 * t5816;
t5651 = t5223 * t5815;
t5650 = t5225 * t5814;
t5649 = t5225 * t5813;
t5602 = t5155 * t5701;
t5140 = t5415 * t5602;
t5062 = (t5143 - t5931 / 0.2e1 - t5074 * t5608) * t5406 + t5140;
t5648 = -0.2e1 * t5062 * t5914;
t5598 = t5156 * t5697;
t5141 = t5418 * t5598;
t5063 = (t5144 - t5929 / 0.2e1 - t5075 * t5607) * t5409 + t5141;
t5647 = -0.2e1 * t5063 * t5913;
t5594 = t5157 * t5693;
t5142 = t5421 * t5594;
t5064 = (t5145 - t5927 / 0.2e1 - t5076 * t5606) * t5412 + t5142;
t5646 = -0.2e1 * t5064 * t5912;
t5642 = t5406 * t5772;
t5641 = t5415 * t5772;
t5640 = t5409 * t5771;
t5639 = t5418 * t5771;
t5638 = t5412 * t5770;
t5637 = t5421 * t5770;
t5633 = t5417 * t5704;
t5632 = t5417 * t5703;
t5631 = t5423 * t5696;
t5630 = t5423 * t5695;
t5629 = t5194 * t5762;
t5628 = t5194 * t5761;
t5627 = t5407 * t5763;
t5626 = t5416 * t5763;
t5354 = t5407 ^ 2;
t5625 = t5354 * t5759;
t5624 = t5856 * t5965;
t5623 = t5195 * t5757;
t5622 = t5195 * t5756;
t5621 = t5410 * t5758;
t5620 = t5419 * t5758;
t5357 = t5410 ^ 2;
t5619 = t5357 * t5754;
t5618 = t5849 * t5962;
t5617 = t5196 * t5752;
t5616 = t5196 * t5751;
t5615 = t5413 * t5753;
t5614 = t5422 * t5753;
t5360 = t5413 ^ 2;
t5613 = t5360 * t5749;
t5612 = t5842 * t5959;
t5611 = t5163 * t5417 * t5953;
t5610 = t5164 * t5420 * t5952;
t5609 = t5165 * t5423 * t5951;
t5605 = t5158 * t5727;
t5170 = -0.4e1 * t5584 + (0.4e1 * t5364 - 0.2e1) * t5362 - t5260;
t5604 = t5170 * t5727;
t5603 = t5194 * t5727;
t5601 = t5159 * t5726;
t5171 = -0.4e1 * t5582 + (0.4e1 * t5368 - 0.2e1) * t5366 - t5261;
t5600 = t5171 * t5726;
t5599 = t5195 * t5726;
t5597 = t5160 * t5725;
t5172 = -0.4e1 * t5578 + (0.4e1 * t5372 - 0.2e1) * t5370 - t5262;
t5596 = t5172 * t5725;
t5595 = t5196 * t5725;
t5587 = t5352 * t5701;
t5586 = t5355 * t5697;
t5585 = t5358 * t5693;
t5580 = t5420 * t5700;
t5579 = t5420 * t5699;
t5576 = t5047 * t5660;
t5575 = t5048 * t5659;
t5574 = t5049 * t5658;
t5573 = t5745 / 0.4e1;
t5572 = t5744 / 0.4e1;
t5571 = t5743 / 0.4e1;
t5564 = -t5730 / 0.2e1;
t5563 = -t5729 / 0.2e1;
t5562 = -t5728 / 0.2e1;
t5543 = t5417 * t5624;
t5542 = t5420 * t5618;
t5541 = t5423 * t5612;
t5540 = t5170 * t5603;
t5539 = t5171 * t5599;
t5538 = t5172 * t5595;
t5534 = t5408 * t5163 * t5742;
t5533 = t5411 * t5164 * t5741;
t5532 = t5414 * t5165 * t5740;
t5531 = t5406 * t5602;
t5530 = t5409 * t5598;
t5529 = t5412 * t5594;
t5528 = -t5221 * t5745 / 0.4e1;
t5527 = t5221 * t5573;
t5526 = -t5223 * t5744 / 0.4e1;
t5525 = t5223 * t5572;
t5524 = -t5225 * t5743 / 0.4e1;
t5523 = t5225 * t5571;
t5522 = t5014 * t5218 + t5077 * t5215;
t5521 = t5014 * t5215 - t5077 * t5218;
t5520 = t5015 * t5219 + t5078 * t5216;
t5519 = t5015 * t5216 - t5078 * t5219;
t5518 = t5016 * t5220 + t5079 * t5217;
t5517 = t5016 * t5217 - t5079 * t5220;
t5510 = 0.2e1 * t5158 * t5603;
t5509 = 0.2e1 * t5159 * t5599;
t5508 = 0.2e1 * t5160 * t5595;
t5504 = t5611 * t6047;
t5503 = t5610 * t6046;
t5502 = t5609 * t6045;
t5501 = t5417 * t5528;
t5500 = t5417 * t5527;
t5499 = t5420 * t5526;
t5498 = t5420 * t5525;
t5497 = t5423 * t5524;
t5496 = t5423 * t5523;
t5489 = t5221 * t5522;
t5488 = t5221 * t5521;
t5487 = t5223 * t5520;
t5486 = t5223 * t5519;
t5485 = t5225 * t5518;
t5484 = t5225 * t5517;
t5477 = 0.2e1 * t5170 * t5748 + t5965 * t6029;
t5476 = t5218 ^ 2 * t5965 + t5748 * t6029;
t5475 = 0.2e1 * t5171 * t5747 + t5962 * t6028;
t5474 = t5219 ^ 2 * t5962 + t5747 * t6028;
t5473 = 0.2e1 * t5172 * t5746 + t5959 * t6027;
t5472 = t5220 ^ 2 * t5959 + t5746 * t6027;
t5459 = 1 / pkin(2) ^ 2;
t5091 = t5463 * t5571 + t5145;
t5090 = t5463 * t5572 + t5144;
t5089 = t5463 * t5573 + t5143;
t5088 = t5091 * t5421 - t5529;
t5087 = t5091 * t5412 + t5142;
t5086 = t5090 * t5418 - t5530;
t5085 = t5090 * t5409 + t5141;
t5084 = t5089 * t5415 - t5531;
t5083 = t5089 * t5406 + t5140;
t5067 = -0.2e1 * t5529 + (t5262 * t5927 + (-t5109 * t5459 - t5458 * t5951) * t5109 * t5861) * t5421;
t5066 = -0.2e1 * t5530 + (t5261 * t5929 + (-t5108 * t5459 - t5458 * t5952) * t5108 * t5862) * t5418;
t5065 = -0.2e1 * t5531 + (t5260 * t5931 + (-t5107 * t5459 - t5458 * t5953) * t5107 * t5863) * t5415;
t5025 = pkin(1) * t5028 - t5767;
t5024 = pkin(1) * t5027 - t5768;
t5023 = pkin(1) * t5026 - t5769;
t5022 = -t5025 * t5412 - t5637;
t5021 = -t5024 * t5409 - t5639;
t5020 = -t5023 * t5406 - t5641;
t5019 = t5025 * t5421 - t5638;
t5018 = t5024 * t5418 - t5640;
t5017 = t5023 * t5415 - t5642;
t5010 = t5767 + ((-t5544 / 0.2e1 + (t5052 * t5661 - t5954 / 0.2e1) * t5861) * t5458 + t5028) * t6034;
t5009 = t5768 + ((-t5545 / 0.2e1 + (t5051 * t5663 - t5955 / 0.2e1) * t5862) * t5458 + t5027) * t6034;
t5008 = t5769 + ((-t5546 / 0.2e1 + (t5050 * t5665 - t5956 / 0.2e1) * t5863) * t5458 + t5026) * t6034;
t5007 = -t5010 * t5421 - t5638;
t5006 = t5010 * t5412 - t5637;
t5005 = -t5009 * t5418 - t5640;
t5004 = t5009 * t5409 - t5639;
t5003 = -t5008 * t5415 - t5642;
t5002 = t5008 * t5406 - t5641;
t1 = [(t5047 * t5702 + t5048 * t5698 + t5049 * t5694) * MDP(1) + (t5317 * t5625 + t5318 * t5619 + t5319 * t5613 + ((t5115 * t5928 + t5319 * t5609) * t5585 + (t5113 * t5930 + t5318 * t5610) * t5586 + (t5111 * t5932 + t5317 * t5611) * t5587) * t5462) * MDP(4) + (0.2e1 * t5317 * t5543 + 0.2e1 * t5318 * t5542 + 0.2e1 * t5319 * t5541 + ((-t5115 * t5945 + t5319 * t5502) * t5358 + (-t5113 * t5946 + t5318 * t5503) * t5355 + (-t5111 * t5947 + t5317 * t5504) * t5352) * t5462) * MDP(5) + (t5317 * t5633 + t5318 * t5580 + t5319 * t5631 + (t5317 * t5416 * t5500 + t5318 * t5419 * t5498 + t5319 * t5422 * t5496) * t5463 + (-t5111 * t5627 - t5113 * t5621 - t5115 * t5615) * t5462) * MDP(6) + (t5317 * t5632 + t5318 * t5579 + t5319 * t5630 + (t5497 * t5869 + t5499 * t5872 + t5501 * t5875) * t5463 + (-t5111 * t5626 - t5113 * t5620 - t5115 * t5614) * t5462) * MDP(7) + (-t5026 * t5738 - t5027 * t5736 - t5028 * t5734) * t5970 + (t5472 * t5868 + t5474 * t5871 + t5476 * t5874 + (t5111 * t5510 + t5113 * t5509 + t5115 * t5508 + (-t5135 * t5605 - t5137 * t5601 - t5139 * t5597) * t5788) * t5462) * MDP(11) + (t5473 * t5868 + t5475 * t5871 + t5477 * t5874 + (t5111 * t5540 + t5113 * t5539 + t5115 * t5538 + (-t5135 * t5604 - t5137 * t5600 - t5139 * t5596) * t5458) * t5462) * MDP(12) + (t5518 * t5694 + t5520 * t5698 + t5522 * t5702 + (-t5111 * t5628 - t5113 * t5622 - t5115 * t5616 + (t5135 * t5761 + t5137 * t5756 + t5139 * t5751) * t5458) * t5462) * MDP(13) + (t5517 * t5694 + t5519 * t5698 + t5521 * t5702 + (-t5111 * t5629 - t5113 * t5623 - t5115 * t5617 + (t5135 * t5762 + t5137 * t5757 + t5139 * t5752) * t5458) * t5462) * MDP(14) + (-t5014 * t5738 - t5015 * t5736 - t5016 * t5734 + (t5014 * t5940 + t5015 * t5938 + t5016 * t5936) * t5458) * t5966 + (t5111 * t5648 + t5113 * t5647 + t5115 * t5646 + t5814 * t5694 + t5816 * t5698 + t5818 * t5702 + (-t5003 * t5738 - t5005 * t5736 - t5007 * t5734) * t5462 + (t5083 * t5940 + t5085 * t5938 + t5087 * t5936 + (t5017 * t5940 + t5018 * t5938 + t5019 * t5936) * t5462) * t5458) * MDP(16) + (-t5065 * t5738 - t5066 * t5736 - t5067 * t5734 + t5813 * t5694 + t5815 * t5698 + t5817 * t5702 + (-t5002 * t5738 - t5004 * t5736 - t5006 * t5734) * t5462 + (t5084 * t5940 + t5086 * t5938 + t5088 * t5936 + (t5020 * t5940 + t5021 * t5938 + t5022 * t5936) * t5462) * t5458) * MDP(17); (-t5314 * t5759 - t5315 * t5754 - t5316 * t5749) * MDP(1) + (-t5314 * t5625 - t5315 * t5619 - t5316 * t5613 + ((t5114 * t5928 - t5316 * t5609) * t5585 + (t5112 * t5930 - t5315 * t5610) * t5586 + (t5110 * t5932 - t5314 * t5611) * t5587) * t5462) * MDP(4) + (-0.2e1 * t5314 * t5543 - 0.2e1 * t5315 * t5542 - 0.2e1 * t5316 * t5541 + ((-t5114 * t5945 - t5316 * t5502) * t5358 + (-t5112 * t5946 - t5315 * t5503) * t5355 + (-t5110 * t5947 - t5314 * t5504) * t5352) * t5462) * MDP(5) + (-t5314 * t5633 - t5315 * t5580 - t5316 * t5631 + (t5314 * t5416 * t5501 + t5315 * t5419 * t5499 + t5316 * t5422 * t5497) * t5463 + (-t5110 * t5627 - t5112 * t5621 - t5114 * t5615) * t5462) * MDP(6) + (-t5314 * t5632 - t5315 * t5579 - t5316 * t5630 + (t5496 * t5878 + t5498 * t5881 + t5500 * t5884) * t5463 + (-t5110 * t5626 - t5112 * t5620 - t5114 * t5614) * t5462) * MDP(7) + (-t5026 * t5739 - t5027 * t5737 - t5028 * t5735) * t5970 + (-t5472 * t5877 - t5474 * t5880 - t5476 * t5883 + (t5110 * t5510 + t5112 * t5509 + t5114 * t5508 + (-t5134 * t5605 - t5136 * t5601 - t5138 * t5597) * t5788) * t5462) * MDP(11) + (-t5473 * t5877 - t5475 * t5880 - t5477 * t5883 + (t5110 * t5540 + t5112 * t5539 + t5114 * t5538 + (-t5134 * t5604 - t5136 * t5600 - t5138 * t5596) * t5458) * t5462) * MDP(12) + (-t5485 * t5877 - t5487 * t5880 - t5489 * t5883 + (-t5110 * t5628 - t5112 * t5622 - t5114 * t5616 + (t5134 * t5761 + t5136 * t5756 + t5138 * t5751) * t5458) * t5462) * MDP(13) + (-t5484 * t5877 - t5486 * t5880 - t5488 * t5883 + (-t5110 * t5629 - t5112 * t5623 - t5114 * t5617 + (t5134 * t5762 + t5136 * t5757 + t5138 * t5752) * t5458) * t5462) * MDP(14) + (-t5014 * t5739 - t5015 * t5737 - t5016 * t5735 + (t5014 * t5941 + t5015 * t5939 + t5016 * t5937) * t5458) * t5966 + (t5110 * t5648 + t5112 * t5647 + t5114 * t5646 - t5650 * t5877 - t5652 * t5880 - t5654 * t5883 + (-t5003 * t5739 - t5005 * t5737 - t5007 * t5735) * t5462 + (t5083 * t5941 + t5085 * t5939 + t5087 * t5937 + (t5017 * t5941 + t5018 * t5939 + t5019 * t5937) * t5462) * t5458) * MDP(16) + (-t5065 * t5739 - t5066 * t5737 - t5067 * t5735 - t5649 * t5877 - t5651 * t5880 - t5653 * t5883 + (-t5002 * t5739 - t5004 * t5737 - t5006 * t5735) * t5462 + (t5084 * t5941 + t5086 * t5939 + t5088 * t5937 + (t5020 * t5941 + t5021 * t5939 + t5022 * t5937) * t5462) * t5458) * MDP(17); (-t5750 - t5755 - t5760) * MDP(1) + (-t5354 * t5760 - t5357 * t5755 - t5360 * t5750 + ((-t5532 + t5562) * t5693 + (-t5533 + t5563) * t5697 + (-t5534 + t5564) * t5701) * t5462) * MDP(4) + (-0.2e1 * t5408 * t5624 - 0.2e1 * t5411 * t5618 - 0.2e1 * t5414 * t5612 + (t5125 * t5660 + t5126 * t5659 + t5127 * t5658 - t5532 * t6045 - t5533 * t6046 - t5534 * t6047) * t5462) * MDP(5) + (-t5408 * t5704 - t5411 * t5700 - t5414 * t5696 + (t5408 * t5416 * t5528 + t5411 * t5419 * t5526 + t5414 * t5422 * t5524) * t5463 + (t5407 * t5576 + t5410 * t5575 + t5413 * t5574) * t5462) * MDP(6) + (-t5408 * t5703 - t5411 * t5699 - t5414 * t5695 + (t5523 * t5843 + t5525 * t5850 + t5527 * t5857) * t5463 + (t5416 * t5576 + t5419 * t5575 + t5422 * t5574) * t5462) * MDP(7) + (t5026 * t5660 + t5027 * t5659 + t5028 * t5658) * t5970 + (-t5472 * t5414 - t5474 * t5411 - t5476 * t5408 + (-t5158 * t5222 * t5730 - t5159 * t5224 * t5729 - t5160 * t5226 * t5728 + (-t5167 * t5605 - t5168 * t5601 - t5169 * t5597) * t5788) * t5462) * MDP(11) + (-t5473 * t5414 - t5475 * t5411 - t5477 * t5408 + (t5226 * t5172 * t5562 + t5224 * t5171 * t5563 + t5222 * t5170 * t5564 + (-t5167 * t5604 - t5168 * t5600 - t5169 * t5596) * t5458) * t5462) * MDP(12) + (-t5414 * t5485 - t5411 * t5487 - t5408 * t5489 + (t5220 * t5574 + t5219 * t5575 + t5218 * t5576 + (t5167 * t5761 + t5168 * t5756 + t5169 * t5751) * t5458) * t5462) * MDP(13) + (-t5414 * t5484 - t5411 * t5486 - t5408 * t5488 + (t5217 * t5574 + t5216 * t5575 + t5215 * t5576 + (t5167 * t5762 + t5168 * t5757 + t5169 * t5752) * t5458) * t5462) * MDP(14) + (t5016 * t5658 + t5015 * t5659 + t5014 * t5660 + (t5014 * t5917 + t5015 * t5916 + t5016 * t5915) * t5458) * t5966 + (t5062 * t5944 + t5063 * t5943 + t5064 * t5942 - t5414 * t5650 - t5411 * t5652 - t5408 * t5654 + (t5003 * t5660 + t5005 * t5659 + t5007 * t5658) * t5462 + (t5083 * t5917 + t5085 * t5916 + t5087 * t5915 + (t5017 * t5917 + t5018 * t5916 + t5019 * t5915) * t5462) * t5458) * MDP(16) + (t5067 * t5658 + t5066 * t5659 + t5065 * t5660 - t5414 * t5649 - t5411 * t5651 - t5408 * t5653 + (t5002 * t5660 + t5004 * t5659 + t5006 * t5658) * t5462 + (t5084 * t5917 + t5086 * t5916 + t5088 * t5915 + (t5020 * t5917 + t5021 * t5916 + t5022 * t5915) * t5462) * t5458) * MDP(17);];
taucX  = t1;
