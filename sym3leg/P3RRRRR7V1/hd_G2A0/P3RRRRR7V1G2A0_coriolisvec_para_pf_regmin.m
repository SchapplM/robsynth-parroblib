% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR7V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:52
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR7V1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(5,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_regmin: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:45:55
% EndTime: 2020-08-07 03:47:54
% DurationCPUTime: 126.51s
% Computational Cost: add. (1402026->1248), mult. (3667947->2159), div. (37308->31), fcn. (2283849->159), ass. (0->916)
t2883 = 4 * pkin(2);
t2248 = sin(qJ(1,1));
t2239 = legFrame(1,2);
t2153 = cos(t2239);
t2260 = xDP(1);
t2701 = t2153 * t2260;
t2150 = sin(t2239);
t2259 = xDP(2);
t2710 = t2150 * t2259;
t2348 = -t2701 + t2710;
t2894 = t2348 * t2248;
t2245 = sin(qJ(1,2));
t2238 = legFrame(2,2);
t2152 = cos(t2238);
t2704 = t2152 * t2260;
t2149 = sin(t2238);
t2713 = t2149 * t2259;
t2349 = -t2704 + t2713;
t2893 = t2349 * t2245;
t2242 = sin(qJ(1,3));
t2237 = legFrame(3,2);
t2151 = cos(t2237);
t2707 = t2151 * t2260;
t2148 = sin(t2237);
t2716 = t2148 * t2259;
t2350 = -t2707 + t2716;
t2892 = t2350 * t2242;
t2296 = 0.1e1 / pkin(1);
t2246 = sin(qJ(3,1));
t2192 = 0.1e1 / t2246;
t2257 = cos(qJ(1,1));
t2069 = t2257 * t2710;
t2258 = xDP(3);
t2080 = t2248 * t2258;
t2525 = t2257 * t2701;
t1985 = -t2525 / 0.2e1 + t2069 / 0.2e1 + t2080;
t2083 = t2258 * t2257;
t1996 = t2083 - t2894;
t2255 = cos(qJ(3,1));
t2813 = t2255 * pkin(2);
t2089 = pkin(1) + t2813;
t2247 = sin(qJ(2,1));
t2256 = cos(qJ(2,1));
t2678 = t2246 * t2256;
t2698 = (t2255 + 0.1e1) * (t2255 - 0.1e1);
t2009 = pkin(2) * t2247 * t2698 + t2089 * t2678;
t2044 = t2150 * t2260 + t2153 * t2259;
t2741 = t2044 * t2247;
t2021 = pkin(1) * t2741;
t2024 = pkin(2) * t2044;
t2027 = pkin(1) * t2044;
t2157 = t2255 * pkin(1);
t2291 = pkin(2) ^ 2;
t2295 = pkin(1) ^ 2;
t2166 = t2291 + t2295;
t2284 = 0.2e1 * qJ(3,1);
t2175 = sin(t2284);
t2204 = t2255 ^ 2;
t2203 = t2255 * t2204;
t2206 = t2256 ^ 2;
t2205 = t2256 * t2206;
t2680 = t2246 * t2247;
t2721 = t2089 * t2256;
t2339 = pkin(2) * t2680 - t2721;
t2679 = t2246 * t2248;
t2535 = t2348 * t2679;
t2641 = -pkin(1) * t2535 + t2024;
t2828 = pkin(2) * t2204;
t2345 = -0.2e1 * t2044 * t2828 + t2641;
t2261 = pkin(4) + pkin(5);
t2665 = t2257 * t2261;
t2390 = t2348 * t2665 + t2021;
t2288 = 0.2e1 * qJ(2,1);
t2185 = cos(t2288);
t2411 = t2009 * t2185 * t2083;
t2667 = t2255 * t2246;
t2507 = t2247 * t2667;
t2412 = t2256 * t2507;
t2477 = -0.2e1 * t2535;
t1999 = -t2069 - t2080 + t2525;
t2675 = t2247 * t2261;
t2502 = t1999 * t2675;
t2664 = t2258 * t2261;
t2505 = t2248 * t2664;
t2506 = t2247 * t2665;
t2176 = sin(t2288);
t2522 = t2176 * t2083;
t2677 = t2247 * t2248;
t2534 = t2348 * t2677;
t2634 = 0.4e1 * t2203 - 0.5e1 * t2255;
t2156 = t2248 * pkin(2);
t2638 = t2246 * t2506 + t2156;
t2658 = t2291 * t2044;
t2661 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t2676 = t2247 * t2256;
t2742 = t2044 * t2246;
t2755 = t1999 * t2261;
t2865 = 2 * pkin(2);
t2770 = (-pkin(1) * t2894 + t2742 * t2865) * t2255;
t2812 = t2256 * pkin(2);
t2825 = pkin(2) * t2246;
t2183 = cos(t2284);
t2831 = pkin(2) * t2183;
t2852 = 0.2e1 * t2204;
t2837 = t2852 - 0.1e1;
t2845 = pkin(1) * pkin(2);
t2849 = -0.2e1 * t2261;
t2851 = 0.4e1 * t2204;
t2866 = -2 * pkin(2);
t2867 = -3 * pkin(2);
t2868 = 0.2e1 * pkin(1);
t2236 = -t2291 / 0.2e1;
t2146 = t2236 + t2295;
t2886 = -0.2e1 * t2204 * t2661 + 0.2e1 * t2146;
t2887 = 2 * t2291;
t2888 = 0.2e1 * t2261;
t1937 = (t2411 + ((pkin(2) * t2477 - t2027) * t2255 + t2345) * t2205 + (t2390 * t2246 + (-pkin(2) * t2837 * t2894 + t2770) * t2247) * t2206 + ((t2027 - (t2679 * t2866 - t2506) * t2348) * t2255 - t2345) * t2256 + t2534 * t2828 - t2507 * t2024 - (pkin(2) * t2677 + t2246 * t2665) * t2348) * t2831 - pkin(2) * (t2009 * t2522 - ((pkin(1) * t2742 + t2770) * t2206 + (-t2247 * t2641 + t2255 * t2390) * t2256 - t2348 * t2638) * t2256 - ((t2676 * t2852 - t2667) * t2044 - (t2206 * t2837 - t2204 - 0.2e1 * t2412) * t2894) * t2812) * t2175 - pkin(1) * t2339 * t2522 * t2698 + t2411 * t2157 + (t2255 * t2477 * t2661 + t2044 * t2886 + (-(t2851 - 0.3e1) * t2535 - t2634 * t2044) * t2845) * t2205 + ((((t2021 + t2505) * t2851 - 0.3e1 * t2021 + t1985 * t2849) * t2246 - t2634 * pkin(1) * t2534) * pkin(2) + 0.2e1 * (-pkin(1) * t2755 + t2661 * t2741) * t2667 + t2534 * t2886) * t2206 + ((0.2e1 * t2247 * t2505 + t2027) * t2203 * t2865 + (-0.2e1 * t2658 + ((t2083 + 0.2e1 * t2894) * t2825 - 0.2e1 * t2502) * pkin(1)) * t2204 + ((t2083 * t2166 - t2887 * t2894) * t2246 + (0.4e1 / 0.3e1 * (-t2525 / 0.4e1 + t2069 / 0.4e1 + t2080) * t2675 + t2027) * t2867) * t2255 + pkin(1) * (t2083 - 0.3e1 * t2894) * t2825 + t2502 * t2868 + t2658) * t2256 + pkin(2) * ((-t2080 * t2204 + t1985) * t2246 * t2888 + ((t2203 - t2255) * pkin(1) * t2083 + (t1996 * t2204 + t2044 * t2667 - t1996) * pkin(2)) * t2247);
t2093 = pkin(1) * t2813;
t2265 = -0.3e1 / 0.2e1 * pkin(1);
t2843 = t2291 / 0.2e1;
t1958 = (t2089 * t2676 + (t2206 - 0.1e1) * t2825) * t2831 / 0.2e1 - t2339 * t2175 * t2812 / 0.2e1 + pkin(2) * (pkin(1) * t2204 - t2813 / 0.2e1 + t2265) * t2676 + ((t2093 + t2146) * t2206 + t2843) * t2246;
t2788 = t1937 / t1958;
t2568 = t2192 * t2788;
t2399 = t2568 / 0.2e1;
t1928 = t2296 * t2399;
t2823 = pkin(2) * t2260;
t2607 = t2246 * t2823;
t2824 = pkin(2) * t2259;
t2608 = t2246 * t2824;
t2662 = t2260 * t2261;
t2663 = t2259 * t2261;
t2674 = t2248 * t2261;
t2719 = t2089 * t2260;
t2720 = t2089 * t2259;
t1943 = ((-t2248 * t2719 - t2608) * t2256 + t2257 * t2662) * t2153 + ((t2248 * t2720 - t2607) * t2256 - t2257 * t2663) * t2150 - (t2257 * t2721 + t2674) * t2258 + ((t2248 * t2607 - t2720) * t2153 + (-t2248 * t2608 - t2719) * t2150 + t2083 * t2825) * t2247;
t2292 = 1 / pkin(2);
t2656 = t2292 * t2296;
t2438 = t1943 * t2192 * t2656;
t1916 = t1928 + t2438;
t1907 = t2291 * t1916;
t1910 = t1928 + t2438 / 0.2e1;
t1931 = pkin(1) * t2399;
t1940 = 0.2e1 / 0.3e1 * t2438;
t2282 = 0.4e1 * qJ(3,1);
t2225 = t2282 + t2288;
t2111 = sin(t2225);
t2283 = 0.3e1 * qJ(3,1);
t2226 = t2283 + t2288;
t2112 = sin(t2226);
t2228 = t2288 + t2284;
t2113 = sin(t2228);
t2229 = t2288 + qJ(3,1);
t2114 = sin(t2229);
t2285 = -0.2e1 * qJ(3,1);
t2231 = t2288 + t2285;
t2116 = sin(t2231);
t2287 = 0.3e1 * qJ(2,1);
t2136 = cos(t2282 + t2287);
t2137 = cos(t2283 + t2287);
t2138 = cos(t2283 + qJ(2,1));
t2139 = cos(t2284 + t2287);
t2227 = t2284 + qJ(2,1);
t2140 = cos(t2227);
t2141 = cos(t2287 + qJ(3,1));
t2232 = qJ(2,1) + qJ(3,1);
t2142 = cos(t2232);
t2233 = qJ(2,1) - qJ(3,1);
t2143 = cos(t2233);
t2842 = -t2295 / 0.2e1;
t2145 = t2842 + t2291;
t2167 = -(3 * t2291) + t2295;
t2174 = sin(t2283);
t2230 = t2288 - qJ(3,1);
t2286 = 0.4e1 * qJ(2,1);
t2290 = pkin(2) * t2291;
t2294 = pkin(1) * t2295;
t2297 = 0.1e1 / pkin(1) ^ 2;
t2063 = pkin(1) * t2256 + pkin(2) * t2142;
t2059 = 0.1e1 / t2063;
t2540 = t2059 * t2755;
t2393 = t2540 * t2845;
t2496 = -t2788 / 0.2e1;
t2400 = t2192 * t2496;
t2822 = pkin(2) * t2295;
t2627 = -0.3e1 * t2822;
t2489 = t2290 + t2627;
t2490 = t2661 * t2866;
t2491 = t2661 / 0.2e1;
t2495 = -t2788 / 0.4e1;
t2501 = t2261 * t2661;
t2657 = t2291 * t2296;
t2519 = t2192 * t2657;
t2757 = t1999 * t2059;
t2538 = t2296 * t2757;
t2539 = t2291 * t2757;
t2653 = t2295 * sin(t2230);
t2598 = pkin(2) * t2653;
t2623 = 3 * t2291;
t2626 = 0.3e1 * t2822;
t2234 = t2261 ^ 2;
t2090 = t2234 + t2291;
t2628 = t2090 * t2883;
t2633 = 0.2e1 / 0.3e1 * t2291 + t2295;
t2629 = -0.6e1 * pkin(2) * (0.2e1 / 0.3e1 * t2234 + t2633);
t2630 = -0.9e1 * pkin(2) * (0.8e1 / 0.9e1 * t2234 + t2633);
t2631 = 0.5e1 * pkin(1) * t2291;
t2644 = t1907 + t1931;
t2785 = t1943 * t2292;
t2840 = t2296 / 0.3e1;
t2637 = 0.4e1 / 0.3e1 * t2234 + t2295;
t2859 = -(3 * t2887) - 0.3e1 * t2637;
t2860 = -(9 * t2291) - 0.3e1 * t2637;
t2861 = (9 * t2291) + 0.2e1 * t2295 + 0.4e1 * t2234;
t2869 = -0.2e1 * pkin(1);
t2871 = cos(qJ(2,1) + t2285) + cos(t2287);
t2872 = -t2139 - t2256;
t2873 = -t2136 - t2140;
t1862 = (-((t2873 * t1916 * t2887 + (t2871 * t2568 + (-(t1928 - t2438 / 0.2e1) * t2142 + (-t2137 + t2141) * t1910) * t2883) * pkin(1)) * t2261 + (t2489 * sin(t2283 + t2286) + t2112 * t2629 + t2114 * t2628 + sin(t2286 + qJ(3,1)) * t2626 - t2290 * sin(0.5e1 * qJ(3,1) + t2286) + 0.6e1 * t2598 + t2174 * t2627 + t2246 * t2630 + (sin(t2286) + t2116) * t2294 + (-t2167 * sin(t2286 + t2284) + t2176 * t2861 + t2175 * t2860 + t2113 * t2859 + (-sin(t2286 + t2282) - t2111) * t2623) * pkin(1)) * t2757 + ((pkin(2) * t2143 * t2788 - t1943 * t2138) * t2192 + t2872 * (t1931 - t1907)) * t2888) * t2538 / 0.4e1 + ((-(t1931 + (0.4e1 * t2785 + 0.2e1 * t2788) * t2519) * pkin(1) * t2113 + t2644 * t2112 * t2866 + 0.4e1 * t1910 * t2598 + t2295 * t2116 * t2399 + t2291 * t2111 * t2400 + t1916 * t2114 * t2490 + (t1931 + (0.3e1 / 0.2e1 * t2788 + 0.2e1 * t2785) * t2519) * t2175 * t2869 + (t1928 + 0.4e1 / 0.5e1 * t2438) * t2176 * t2631 - t2174 * t2568 * t2845 - 0.6e1 * ((t2568 * t2840 + t1940) * t2291 + t2295 * (t1928 + t1940)) * t2825 + t2873 * t2261 * t2539 + t2871 * t2295 * t2540 - 0.2e1 * (t2137 + t2142) * t2393 + 0.2e1 * (t2143 + t2141) * t2393 + t2872 * t2501 * t2757) * t2495 + 0.2e1 * ((-t2653 / 0.2e1 + t2112 * t2843 + t2114 * t2491 + t2166 * t2246 + (t2113 + t2175 - t2176) * t2845) * t1916 + ((-t2139 / 0.4e1 + t2136 / 0.4e1 + t2140 / 0.4e1 - t2256 / 0.4e1) * pkin(2) + (t2137 / 0.4e1 - t2141 / 0.4e1 + t2138 / 0.4e1 - t2142 / 0.4e1) * pkin(1)) * t2540) * t1943) * t2192 * t2297) / (t2145 * cos(t2228) + cos(t2231) * t2842 + cos(t2225) * t2236 + t2146 * t2185 - t2166 * t2183 + t2093 + (-cos(t2230) - cos(t2226) + 0.2e1 * cos(t2229) - cos(t2283)) * t2845 + t2166);
t2054 = t2247 * t2255 + t2678;
t2541 = t2247 * t2757;
t2468 = pkin(1) * t2541;
t1886 = -t2261 * t2468 + (0.2e1 * t1910 * t2157 - t2054 * t2540) * pkin(2) + t2644;
t2542 = t2206 * t2757;
t2609 = pkin(2) * t2678;
t2632 = t2295 - t2291;
t2844 = t2261 / 0.2e1;
t2378 = ((t2204 * t2887 + 0.2e1 * t2093 + t2632) * t2542 - 0.2e1 * (t1916 * t2844 + t2089 * t2541) * t2609 - t2204 * t2539 + t2090 * t2757 + (-t1916 * t2813 + t2400) * t2675) * t2192 * t2538;
t2193 = 0.1e1 / t2246 ^ 2;
t2695 = t2193 * t2297;
t2117 = sin(t2232);
t2791 = (-t2117 * t2540 + t1916 * (t2157 + pkin(2))) * t1943;
t1850 = (-t2378 + (t1886 * t2496 - t2791) * t2695) * t2292 + t1862;
t1913 = t1916 ^ 2;
t2060 = 0.1e1 / t2063 ^ 2;
t2756 = t1999 * t2060;
t2834 = pkin(2) * t2117;
t2841 = t2296 / 0.2e1;
t1883 = (t1916 * t2834 - t2540 + (t2117 * t1943 * t2296 + (t2247 / 0.2e1 + (pkin(1) * t2247 + t2834) * t2841) * t2788) * t2192) * t2756;
t2794 = t1883 * t2247;
t2819 = pkin(4) * t2247;
t2847 = pkin(4) / 0.2e1;
t2870 = -0.4e1 * pkin(1);
t2891 = t1910 * t2542 * t2870 + t1913 * t2819 + 0.2e1 * t2399 * t2757 - 0.2e1 * (pkin(1) * t2794 + t1850 * t2847) * t2256;
t2243 = sin(qJ(3,2));
t2189 = 0.1e1 / t2243;
t2254 = cos(qJ(1,2));
t2068 = t2254 * t2713;
t2079 = t2245 * t2258;
t2526 = t2254 * t2704;
t1984 = -t2526 / 0.2e1 + t2068 / 0.2e1 + t2079;
t2082 = t2258 * t2254;
t1995 = t2082 - t2893;
t2252 = cos(qJ(3,2));
t2815 = t2252 * pkin(2);
t2087 = pkin(1) + t2815;
t2244 = sin(qJ(2,2));
t2253 = cos(qJ(2,2));
t2685 = t2243 * t2253;
t2699 = (t2252 + 0.1e1) * (t2252 - 0.1e1);
t2008 = pkin(2) * t2244 * t2699 + t2087 * t2685;
t2042 = t2149 * t2260 + t2152 * t2259;
t2744 = t2042 * t2244;
t2020 = pkin(1) * t2744;
t2023 = pkin(2) * t2042;
t2026 = pkin(1) * t2042;
t2159 = pkin(1) * t2252;
t2276 = 0.2e1 * qJ(3,2);
t2172 = sin(t2276);
t2200 = t2252 ^ 2;
t2199 = t2252 * t2200;
t2202 = t2253 ^ 2;
t2201 = t2253 * t2202;
t2687 = t2243 * t2244;
t2725 = t2087 * t2253;
t2340 = pkin(2) * t2687 - t2725;
t2686 = t2243 * t2245;
t2536 = t2349 * t2686;
t2642 = -pkin(1) * t2536 + t2023;
t2829 = pkin(2) * t2200;
t2346 = -0.2e1 * t2042 * t2829 + t2642;
t2668 = t2254 * t2261;
t2391 = t2349 * t2668 + t2020;
t2280 = 0.2e1 * qJ(2,2);
t2182 = cos(t2280);
t2413 = t2008 * t2182 * t2082;
t2670 = t2252 * t2243;
t2512 = t2244 * t2670;
t2414 = t2253 * t2512;
t2478 = -0.2e1 * t2536;
t1998 = -t2068 - t2079 + t2526;
t2682 = t2244 * t2261;
t2503 = t1998 * t2682;
t2509 = t2245 * t2664;
t2684 = t2244 * t2245;
t2510 = t2349 * t2684;
t2511 = t2244 * t2668;
t2173 = sin(t2280);
t2523 = t2173 * t2082;
t2635 = 0.4e1 * t2199 - 0.5e1 * t2252;
t2155 = t2245 * pkin(2);
t2639 = t2243 * t2511 + t2155;
t2659 = t2291 * t2042;
t2683 = t2244 * t2253;
t2745 = t2042 * t2243;
t2758 = t1998 * t2261;
t2771 = (-pkin(1) * t2893 + t2745 * t2865) * t2252;
t2814 = t2253 * pkin(2);
t2826 = pkin(2) * t2243;
t2180 = cos(t2276);
t2832 = pkin(2) * t2180;
t2855 = 0.2e1 * t2200;
t2838 = t2855 - 0.1e1;
t2854 = 0.4e1 * t2200;
t2885 = -0.2e1 * t2200 * t2661 + 0.2e1 * t2146;
t1936 = (t2413 + ((pkin(2) * t2478 - t2026) * t2252 + t2346) * t2201 + (t2391 * t2243 + (-pkin(2) * t2838 * t2893 + t2771) * t2244) * t2202 + ((t2026 - (t2686 * t2866 - t2511) * t2349) * t2252 - t2346) * t2253 + t2510 * t2829 - t2512 * t2023 - (pkin(2) * t2684 + t2243 * t2668) * t2349) * t2832 - pkin(2) * (t2008 * t2523 - ((pkin(1) * t2745 + t2771) * t2202 + (-t2244 * t2642 + t2252 * t2391) * t2253 - t2349 * t2639) * t2253 - ((t2683 * t2855 - t2670) * t2042 - (t2202 * t2838 - t2200 - 0.2e1 * t2414) * t2893) * t2814) * t2172 - pkin(1) * t2340 * t2523 * t2699 + t2413 * t2159 + (t2252 * t2478 * t2661 + t2042 * t2885 + (-(t2854 - 0.3e1) * t2536 - t2635 * t2042) * t2845) * t2201 + ((((t2020 + t2509) * t2854 - 0.3e1 * t2020 + t1984 * t2849) * t2243 - t2635 * pkin(1) * t2510) * pkin(2) + 0.2e1 * (-pkin(1) * t2758 + t2661 * t2744) * t2670 + t2510 * t2885) * t2202 + ((0.2e1 * t2244 * t2509 + t2026) * t2199 * t2865 + (-0.2e1 * t2659 + ((t2082 + 0.2e1 * t2893) * t2826 - 0.2e1 * t2503) * pkin(1)) * t2200 + ((t2082 * t2166 - t2887 * t2893) * t2243 + (0.4e1 / 0.3e1 * (-t2526 / 0.4e1 + t2068 / 0.4e1 + t2079) * t2682 + t2026) * t2867) * t2252 + pkin(1) * (t2082 - 0.3e1 * t2893) * t2826 + t2503 * t2868 + t2659) * t2253 + pkin(2) * ((-t2079 * t2200 + t1984) * t2243 * t2888 + ((t2199 - t2252) * pkin(1) * t2082 + (t1995 * t2200 + t2042 * t2670 - t1995) * pkin(2)) * t2244);
t2092 = pkin(1) * t2815;
t1957 = (t2087 * t2683 + (t2202 - 0.1e1) * t2826) * t2832 / 0.2e1 - t2340 * t2172 * t2814 / 0.2e1 + pkin(2) * (pkin(1) * t2200 - t2815 / 0.2e1 + t2265) * t2683 + ((t2092 + t2146) * t2202 + t2843) * t2243;
t2789 = t1936 / t1957;
t2569 = t2189 * t2789;
t2401 = t2569 / 0.2e1;
t1927 = t2296 * t2401;
t2611 = t2243 * t2823;
t2612 = t2243 * t2824;
t2681 = t2245 * t2261;
t2723 = t2087 * t2260;
t2724 = t2087 * t2259;
t1942 = ((-t2245 * t2723 - t2612) * t2253 + t2254 * t2662) * t2152 + ((t2245 * t2724 - t2611) * t2253 - t2254 * t2663) * t2149 - (t2254 * t2725 + t2681) * t2258 + ((t2245 * t2611 - t2724) * t2152 + (-t2245 * t2612 - t2723) * t2149 + t2082 * t2826) * t2244;
t2439 = t1942 * t2189 * t2656;
t1915 = t1927 + t2439;
t1906 = t2291 * t1915;
t1909 = t1927 + t2439 / 0.2e1;
t1930 = pkin(1) * t2401;
t1939 = 0.2e1 / 0.3e1 * t2439;
t2274 = 0.4e1 * qJ(3,2);
t2216 = t2274 + t2280;
t2104 = sin(t2216);
t2217 = t2276 + t2280;
t2105 = sin(t2217);
t2277 = -0.2e1 * qJ(3,2);
t2219 = t2277 + t2280;
t2106 = sin(t2219);
t2275 = 0.3e1 * qJ(3,2);
t2220 = t2280 + t2275;
t2107 = sin(t2220);
t2221 = t2280 + qJ(3,2);
t2108 = sin(t2221);
t2279 = 0.3e1 * qJ(2,2);
t2127 = cos(t2274 + t2279);
t2128 = cos(t2275 + qJ(2,2));
t2218 = t2276 + qJ(2,2);
t2129 = cos(t2218);
t2130 = cos(t2279 + t2275);
t2131 = cos(t2279 + t2276);
t2132 = cos(t2279 + qJ(3,2));
t2223 = qJ(2,2) + qJ(3,2);
t2133 = cos(t2223);
t2224 = qJ(2,2) - qJ(3,2);
t2134 = cos(t2224);
t2171 = sin(t2275);
t2222 = t2280 - qJ(3,2);
t2278 = 0.4e1 * qJ(2,2);
t2062 = pkin(1) * t2253 + pkin(2) * t2133;
t2057 = 0.1e1 / t2062;
t2545 = t2057 * t2758;
t2394 = t2545 * t2845;
t2498 = -t2789 / 0.2e1;
t2402 = t2189 * t2498;
t2497 = -t2789 / 0.4e1;
t2520 = t2189 * t2657;
t2760 = t1998 * t2057;
t2543 = t2296 * t2760;
t2544 = t2291 * t2760;
t2654 = t2295 * sin(t2222);
t2599 = pkin(2) * t2654;
t2645 = t1906 + t1930;
t2786 = t1942 * t2292;
t2874 = cos(qJ(2,2) + t2277) + cos(t2279);
t2875 = -t2131 - t2253;
t2876 = -t2127 - t2129;
t1861 = (-((t2876 * t1915 * t2887 + (t2874 * t2569 + (-(t1927 - t2439 / 0.2e1) * t2133 + (t2132 - t2130) * t1909) * t2883) * pkin(1)) * t2261 + (t2107 * t2629 + t2108 * t2628 + t2243 * t2630 - t2290 * sin(0.5e1 * qJ(3,2) + t2278) + 0.6e1 * t2599 + t2171 * t2627 + t2489 * sin(t2278 + t2275) + sin(t2278 + qJ(3,2)) * t2626 + (sin(t2278) + t2106) * t2294 + (-t2167 * sin(t2276 + t2278) + t2173 * t2861 + t2172 * t2860 + t2105 * t2859 + (-sin(t2274 + t2278) - t2104) * t2623) * pkin(1)) * t2760 + ((pkin(2) * t2134 * t2789 - t1942 * t2128) * t2189 + t2875 * (t1930 - t1906)) * t2888) * t2543 / 0.4e1 + ((t2645 * t2107 * t2866 - (t1930 + (0.4e1 * t2786 + 0.2e1 * t2789) * t2520) * pkin(1) * t2105 + 0.4e1 * t1909 * t2599 + t2295 * t2106 * t2401 + t2291 * t2104 * t2402 + t1915 * t2108 * t2490 + (t1930 + (0.3e1 / 0.2e1 * t2789 + 0.2e1 * t2786) * t2520) * t2172 * t2869 + (t1927 + 0.4e1 / 0.5e1 * t2439) * t2173 * t2631 - t2171 * t2569 * t2845 - 0.6e1 * ((t2569 * t2840 + t1939) * t2291 + t2295 * (t1927 + t1939)) * t2826 + t2876 * t2261 * t2544 + t2874 * t2295 * t2545 - 0.2e1 * (t2130 + t2133) * t2394 + 0.2e1 * (t2134 + t2132) * t2394 + t2875 * t2501 * t2760) * t2497 + 0.2e1 * ((-t2654 / 0.2e1 + t2107 * t2843 + t2108 * t2491 + t2166 * t2243 + (t2105 + t2172 - t2173) * t2845) * t1915 + ((-t2131 / 0.4e1 + t2127 / 0.4e1 + t2129 / 0.4e1 - t2253 / 0.4e1) * pkin(2) + (t2130 / 0.4e1 - t2132 / 0.4e1 + t2128 / 0.4e1 - t2133 / 0.4e1) * pkin(1)) * t2545) * t1942) * t2189 * t2297) / (t2145 * cos(t2217) + cos(t2219) * t2842 + cos(t2216) * t2236 + t2146 * t2182 - t2166 * t2180 + t2092 + (-cos(t2222) - cos(t2220) + 0.2e1 * cos(t2221) - cos(t2275)) * t2845 + t2166);
t2053 = t2244 * t2252 + t2685;
t2546 = t2244 * t2760;
t2469 = pkin(1) * t2546;
t2818 = t1909 * pkin(1);
t1885 = -t2261 * t2469 + (-t2053 * t2545 + 0.2e1 * t2252 * t2818) * pkin(2) + t2645;
t2547 = t2202 * t2760;
t2613 = pkin(2) * t2685;
t2379 = ((t2200 * t2887 + 0.2e1 * t2092 + t2632) * t2547 - 0.2e1 * (t1915 * t2844 + t2087 * t2546) * t2613 - t2200 * t2544 + t2090 * t2760 + (-t1915 * t2815 + t2402) * t2682) * t2189 * t2543;
t2190 = 0.1e1 / t2243 ^ 2;
t2696 = t2190 * t2297;
t2110 = sin(t2223);
t2792 = (-t2110 * t2545 + t1915 * (t2159 + pkin(2))) * t1942;
t1849 = (-t2379 + (t1885 * t2498 - t2792) * t2696) * t2292 + t1861;
t1912 = t1915 ^ 2;
t2058 = 0.1e1 / t2062 ^ 2;
t2759 = t1998 * t2058;
t2835 = pkin(2) * t2110;
t1882 = (t1915 * t2835 - t2545 + (t2110 * t1942 * t2296 + (t2244 / 0.2e1 + (pkin(1) * t2244 + t2835) * t2841) * t2789) * t2189) * t2759;
t2797 = t1882 * t2244;
t2820 = pkin(4) * t2244;
t2890 = t1912 * t2820 + 0.2e1 * t2401 * t2760 - 0.4e1 * t2547 * t2818 - 0.2e1 * (pkin(1) * t2797 + t1849 * t2847) * t2253;
t2240 = sin(qJ(3,3));
t2186 = 0.1e1 / t2240;
t2251 = cos(qJ(1,3));
t2067 = t2251 * t2716;
t2078 = t2242 * t2258;
t2527 = t2251 * t2707;
t1983 = -t2527 / 0.2e1 + t2067 / 0.2e1 + t2078;
t2081 = t2258 * t2251;
t2000 = t2081 - t2892;
t2249 = cos(qJ(3,3));
t2817 = t2249 * pkin(2);
t2085 = pkin(1) + t2817;
t2241 = sin(qJ(2,3));
t2250 = cos(qJ(2,3));
t2692 = t2240 * t2250;
t2700 = (t2249 + 0.1e1) * (t2249 - 0.1e1);
t2007 = pkin(2) * t2241 * t2700 + t2085 * t2692;
t2040 = t2148 * t2260 + t2151 * t2259;
t2747 = t2040 * t2241;
t2019 = pkin(1) * t2747;
t2022 = pkin(2) * t2040;
t2025 = pkin(1) * t2040;
t2158 = pkin(1) * t2249;
t2268 = 0.2e1 * qJ(3,3);
t2169 = sin(t2268);
t2196 = t2249 ^ 2;
t2195 = t2249 * t2196;
t2198 = t2250 ^ 2;
t2197 = t2250 * t2198;
t2694 = t2240 * t2241;
t2729 = t2085 * t2250;
t2341 = pkin(2) * t2694 - t2729;
t2693 = t2240 * t2242;
t2537 = t2350 * t2693;
t2643 = -pkin(1) * t2537 + t2022;
t2830 = pkin(2) * t2196;
t2347 = -0.2e1 * t2040 * t2830 + t2643;
t2671 = t2251 * t2261;
t2392 = t2350 * t2671 + t2019;
t2272 = 0.2e1 * qJ(2,3);
t2179 = cos(t2272);
t2415 = t2007 * t2179 * t2081;
t2673 = t2249 * t2240;
t2517 = t2241 * t2673;
t2416 = t2250 * t2517;
t2479 = -0.2e1 * t2537;
t1997 = -t2067 - t2078 + t2527;
t2689 = t2241 * t2261;
t2504 = t1997 * t2689;
t2514 = t2242 * t2664;
t2691 = t2241 * t2242;
t2515 = t2350 * t2691;
t2516 = t2241 * t2671;
t2170 = sin(t2272);
t2524 = t2170 * t2081;
t2636 = 0.4e1 * t2195 - 0.5e1 * t2249;
t2154 = t2242 * pkin(2);
t2640 = t2240 * t2516 + t2154;
t2660 = t2291 * t2040;
t2690 = t2241 * t2250;
t2748 = t2040 * t2240;
t2761 = t1997 * t2261;
t2772 = (-pkin(1) * t2892 + t2748 * t2865) * t2249;
t2816 = t2250 * pkin(2);
t2827 = pkin(2) * t2240;
t2177 = cos(t2268);
t2833 = pkin(2) * t2177;
t2858 = 0.2e1 * t2196;
t2839 = t2858 - 0.1e1;
t2857 = 0.4e1 * t2196;
t2884 = -0.2e1 * t2196 * t2661 + 0.2e1 * t2146;
t1935 = (t2415 + ((pkin(2) * t2479 - t2025) * t2249 + t2347) * t2197 + (t2392 * t2240 + (-pkin(2) * t2839 * t2892 + t2772) * t2241) * t2198 + ((t2025 - (t2693 * t2866 - t2516) * t2350) * t2249 - t2347) * t2250 + t2515 * t2830 - t2517 * t2022 - (pkin(2) * t2691 + t2240 * t2671) * t2350) * t2833 - pkin(2) * (t2007 * t2524 - ((pkin(1) * t2748 + t2772) * t2198 + (-t2241 * t2643 + t2249 * t2392) * t2250 - t2640 * t2350) * t2250 - ((t2690 * t2858 - t2673) * t2040 - (t2198 * t2839 - t2196 - 0.2e1 * t2416) * t2892) * t2816) * t2169 - pkin(1) * t2341 * t2524 * t2700 + t2415 * t2158 + (t2249 * t2479 * t2661 + t2040 * t2884 + (-(t2857 - 0.3e1) * t2537 - t2636 * t2040) * t2845) * t2197 + ((((t2019 + t2514) * t2857 - 0.3e1 * t2019 + t1983 * t2849) * t2240 - t2636 * pkin(1) * t2515) * pkin(2) + 0.2e1 * (-pkin(1) * t2761 + t2661 * t2747) * t2673 + t2515 * t2884) * t2198 + ((0.2e1 * t2241 * t2514 + t2025) * t2195 * t2865 + (-0.2e1 * t2660 + ((t2081 + 0.2e1 * t2892) * t2827 - 0.2e1 * t2504) * pkin(1)) * t2196 + ((t2081 * t2166 - t2887 * t2892) * t2240 + (0.4e1 / 0.3e1 * (-t2527 / 0.4e1 + t2067 / 0.4e1 + t2078) * t2689 + t2025) * t2867) * t2249 + pkin(1) * (t2081 - 0.3e1 * t2892) * t2827 + t2504 * t2868 + t2660) * t2250 + pkin(2) * ((-t2078 * t2196 + t1983) * t2240 * t2888 + ((t2195 - t2249) * pkin(1) * t2081 + (t2000 * t2196 + t2040 * t2673 - t2000) * pkin(2)) * t2241);
t2091 = pkin(1) * t2817;
t1956 = (t2085 * t2690 + (t2198 - 0.1e1) * t2827) * t2833 / 0.2e1 - t2341 * t2169 * t2816 / 0.2e1 + pkin(2) * (pkin(1) * t2196 - t2817 / 0.2e1 + t2265) * t2690 + ((t2091 + t2146) * t2198 + t2843) * t2240;
t2790 = t1935 / t1956;
t2570 = t2186 * t2790;
t2403 = t2570 / 0.2e1;
t1926 = t2296 * t2403;
t2615 = t2240 * t2823;
t2616 = t2240 * t2824;
t2688 = t2242 * t2261;
t2727 = t2085 * t2260;
t2728 = t2085 * t2259;
t1941 = ((-t2242 * t2727 - t2616) * t2250 + t2251 * t2662) * t2151 + ((t2242 * t2728 - t2615) * t2250 - t2251 * t2663) * t2148 - (t2251 * t2729 + t2688) * t2258 + ((t2242 * t2615 - t2728) * t2151 + (-t2242 * t2616 - t2727) * t2148 + t2081 * t2827) * t2241;
t2440 = t1941 * t2186 * t2656;
t1914 = t1926 + t2440;
t1905 = t2291 * t1914;
t1908 = t1926 + t2440 / 0.2e1;
t1929 = pkin(1) * t2403;
t1938 = 0.2e1 / 0.3e1 * t2440;
t2266 = 0.4e1 * qJ(3,3);
t2207 = t2266 + t2272;
t2097 = sin(t2207);
t2267 = 0.3e1 * qJ(3,3);
t2208 = t2267 + t2272;
t2098 = sin(t2208);
t2209 = t2268 + t2272;
t2099 = sin(t2209);
t2269 = -0.2e1 * qJ(3,3);
t2211 = t2269 + t2272;
t2100 = sin(t2211);
t2212 = t2272 + qJ(3,3);
t2101 = sin(t2212);
t2271 = 0.3e1 * qJ(2,3);
t2118 = cos(t2266 + t2271);
t2119 = cos(t2267 + t2271);
t2120 = cos(t2268 + t2271);
t2210 = t2268 + qJ(2,3);
t2121 = cos(t2210);
t2122 = cos(t2271 + qJ(3,3));
t2123 = cos(qJ(2,3) + t2267);
t2214 = qJ(2,3) + qJ(3,3);
t2124 = cos(t2214);
t2215 = qJ(2,3) - qJ(3,3);
t2125 = cos(t2215);
t2168 = sin(t2267);
t2213 = t2272 - qJ(3,3);
t2270 = 0.4e1 * qJ(2,3);
t2061 = pkin(1) * t2250 + pkin(2) * t2124;
t2055 = 0.1e1 / t2061;
t2550 = t2055 * t2761;
t2395 = t2550 * t2845;
t2500 = -t2790 / 0.2e1;
t2404 = t2186 * t2500;
t2499 = -t2790 / 0.4e1;
t2521 = t2186 * t2657;
t2763 = t1997 * t2055;
t2548 = t2296 * t2763;
t2549 = t2291 * t2763;
t2655 = t2295 * sin(t2213);
t2600 = pkin(2) * t2655;
t2646 = t1905 + t1929;
t2787 = t1941 * t2292;
t2877 = cos(qJ(2,3) + t2269) + cos(t2271);
t2878 = -t2120 - t2250;
t2879 = -t2118 - t2121;
t1860 = (-((t2879 * t1914 * t2887 + (t2877 * t2570 + (-(t1926 - t2440 / 0.2e1) * t2124 + (-t2119 + t2122) * t1908) * t2883) * pkin(1)) * t2261 + (t2098 * t2629 + t2101 * t2628 - t2290 * sin(0.5e1 * qJ(3,3) + t2270) + sin(qJ(3,3) + t2270) * t2626 + t2489 * sin(t2267 + t2270) + 0.6e1 * t2600 + t2168 * t2627 + t2240 * t2630 + (sin(t2270) + t2100) * t2294 + (-t2167 * sin(t2270 + t2268) + t2170 * t2861 + t2169 * t2860 + t2099 * t2859 + (-sin(t2266 + t2270) - t2097) * t2623) * pkin(1)) * t2763 + ((pkin(2) * t2125 * t2790 - t1941 * t2123) * t2186 + t2878 * (t1929 - t1905)) * t2888) * t2548 / 0.4e1 + ((-(t1929 + (0.4e1 * t2787 + 0.2e1 * t2790) * t2521) * pkin(1) * t2099 + t2646 * t2098 * t2866 + 0.4e1 * t1908 * t2600 + t2295 * t2100 * t2403 + t2291 * t2097 * t2404 + t1914 * t2101 * t2490 + (t1929 + (0.3e1 / 0.2e1 * t2790 + 0.2e1 * t2787) * t2521) * t2169 * t2869 + (t1926 + 0.4e1 / 0.5e1 * t2440) * t2170 * t2631 - t2168 * t2570 * t2845 - 0.6e1 * ((t2570 * t2840 + t1938) * t2291 + t2295 * (t1926 + t1938)) * t2827 + t2879 * t2261 * t2549 + t2877 * t2295 * t2550 - 0.2e1 * (t2119 + t2124) * t2395 + 0.2e1 * (t2125 + t2122) * t2395 + t2878 * t2501 * t2763) * t2499 + 0.2e1 * ((-t2655 / 0.2e1 + t2098 * t2843 + t2101 * t2491 + t2166 * t2240 + (t2099 + t2169 - t2170) * t2845) * t1914 + ((-t2120 / 0.4e1 + t2118 / 0.4e1 + t2121 / 0.4e1 - t2250 / 0.4e1) * pkin(2) + (t2119 / 0.4e1 + t2123 / 0.4e1 - t2122 / 0.4e1 - t2124 / 0.4e1) * pkin(1)) * t2550) * t1941) * t2186 * t2297) / (t2145 * cos(t2209) + cos(t2211) * t2842 + cos(t2207) * t2236 + t2146 * t2179 - t2166 * t2177 + t2091 + (-cos(t2213) - cos(t2208) + 0.2e1 * cos(t2212) - cos(t2267)) * t2845 + t2166);
t2052 = t2241 * t2249 + t2692;
t2551 = t2241 * t2763;
t2470 = pkin(1) * t2551;
t1884 = -t2261 * t2470 + (0.2e1 * t1908 * t2158 - t2052 * t2550) * pkin(2) + t2646;
t2552 = t2198 * t2763;
t2617 = pkin(2) * t2692;
t2380 = ((t2196 * t2887 + 0.2e1 * t2091 + t2632) * t2552 - 0.2e1 * (t1914 * t2844 + t2085 * t2551) * t2617 - t2196 * t2549 + t2090 * t2763 + (-t1914 * t2817 + t2404) * t2689) * t2186 * t2548;
t2187 = 0.1e1 / t2240 ^ 2;
t2697 = t2187 * t2297;
t2103 = sin(t2214);
t2793 = (-t2103 * t2550 + t1914 * (t2158 + pkin(2))) * t1941;
t1848 = (-t2380 + (t1884 * t2500 - t2793) * t2697) * t2292 + t1860;
t1911 = t1914 ^ 2;
t2056 = 0.1e1 / t2061 ^ 2;
t2762 = t1997 * t2056;
t2836 = pkin(2) * t2103;
t1881 = (t1914 * t2836 - t2550 + (t2103 * t1941 * t2296 + (t2241 / 0.2e1 + (pkin(1) * t2241 + t2836) * t2841) * t2790) * t2186) * t2762;
t2800 = t1881 * t2241;
t2821 = pkin(4) * t2241;
t2889 = t1908 * t2552 * t2870 + t1911 * t2821 + 0.2e1 * t2403 * t2763 - 0.2e1 * (pkin(1) * t2800 + t1848 * t2847) * t2250;
t2856 = 0.2e1 * t2198;
t2094 = t2856 - 0.1e1;
t2882 = t2056 * t2094;
t2853 = 0.2e1 * t2202;
t2095 = t2853 - 0.1e1;
t2881 = t2058 * t2095;
t2850 = 0.2e1 * t2206;
t2096 = t2850 - 0.1e1;
t2880 = t2060 * t2096;
t1992 = (t2196 - 0.1e1 / 0.2e1) * t2690 + (t2198 - 0.1e1 / 0.2e1) * t2673;
t2864 = 0.4e1 * t1992;
t1993 = (t2200 - 0.1e1 / 0.2e1) * t2683 + (t2202 - 0.1e1 / 0.2e1) * t2670;
t2863 = 0.4e1 * t1993;
t1994 = (t2204 - 0.1e1 / 0.2e1) * t2676 + (t2206 - 0.1e1 / 0.2e1) * t2667;
t2862 = 0.4e1 * t1994;
t2846 = pkin(4) / 0.4e1;
t2811 = -qJ(3,1) + qJ(1,1);
t2810 = qJ(3,1) + qJ(1,1);
t2809 = -qJ(3,2) + qJ(1,2);
t2808 = qJ(3,2) + qJ(1,2);
t2807 = -qJ(3,3) + qJ(1,3);
t2806 = qJ(3,3) + qJ(1,3);
t2805 = -0.2e1 * qJ(2,1) + qJ(1,1);
t2804 = -0.2e1 * qJ(2,2) + qJ(1,2);
t2803 = -0.2e1 * qJ(2,3) + qJ(1,3);
t2802 = t1881 * t2055;
t2801 = t1881 * t2186;
t2799 = t1882 * t2057;
t2798 = t1882 * t2189;
t2796 = t1883 * t2059;
t2795 = t1883 * t2192;
t1989 = t1997 ^ 2;
t2768 = t1989 * t2056;
t1977 = t2198 * t2768;
t1959 = -0.2e1 * t1977 + t2768;
t2028 = 0.1e1 / t2341;
t2784 = t1959 * t2028;
t1990 = t1998 ^ 2;
t2766 = t1990 * t2058;
t1978 = t2202 * t2766;
t1960 = -0.2e1 * t1978 + t2766;
t2029 = 0.1e1 / t2340;
t2783 = t1960 * t2029;
t1991 = t1999 ^ 2;
t2764 = t1991 * t2060;
t1979 = t2206 * t2764;
t1961 = -0.2e1 * t1979 + t2764;
t2030 = 0.1e1 / t2339;
t2782 = t1961 * t2030;
t2781 = (-(-sin(qJ(2,3) - t2807) + sin(qJ(2,3) + t2806)) * t2888 + (-cos(t2269 + t2803) - cos(qJ(1,3) + t2209) - 0.2e1 * t2251) * pkin(2) + (-cos(qJ(3,3) - t2803) - cos(qJ(1,3) + t2212) - cos(t2807) - cos(t2806)) * pkin(1)) / ((-sin(t2210) + t2241) * pkin(2) + (sin(t2215) - t2103) * pkin(1));
t2780 = (-(-sin(qJ(2,2) - t2809) + sin(qJ(2,2) + t2808)) * t2888 + (-cos(t2277 + t2804) - cos(qJ(1,2) + t2217) - 0.2e1 * t2254) * pkin(2) + (-cos(qJ(3,2) - t2804) - cos(qJ(1,2) + t2221) - cos(t2809) - cos(t2808)) * pkin(1)) / ((-sin(t2218) + t2244) * pkin(2) + (sin(t2224) - t2110) * pkin(1));
t2779 = (-(-sin(qJ(2,1) - t2811) + sin(qJ(2,1) + t2810)) * t2888 + (-cos(t2285 + t2805) - cos(qJ(1,1) + t2228) - 0.2e1 * t2257) * pkin(2) + (-cos(qJ(3,1) - t2805) - cos(qJ(1,1) + t2229) - cos(t2811) - cos(t2810)) * pkin(1)) / ((-sin(t2227) + t2247) * pkin(2) + (sin(t2233) - t2117) * pkin(1));
t1986 = -t2242 * t2341 - t2671;
t2031 = t2085 * t2241 + t2617;
t1968 = t1986 * t2148 - t2031 * t2151;
t2778 = t1968 * t2186;
t1969 = -t1986 * t2151 - t2031 * t2148;
t2777 = t1969 * t2186;
t1987 = -t2245 * t2340 - t2668;
t2032 = t2087 * t2244 + t2613;
t1970 = t1987 * t2149 - t2032 * t2152;
t2776 = t1970 * t2189;
t1971 = -t1987 * t2152 - t2032 * t2149;
t2775 = t1971 * t2189;
t1988 = -t2248 * t2339 - t2665;
t2033 = t2089 * t2247 + t2609;
t1972 = t1988 * t2150 - t2033 * t2153;
t2774 = t1972 * t2192;
t1973 = -t1988 * t2153 - t2033 * t2150;
t2773 = t1973 * t2192;
t2769 = t1989 * t2028;
t2767 = t1990 * t2029;
t2765 = t1991 * t2030;
t2001 = t2251 * t2341 - t2688;
t2754 = t2001 * t2186;
t2002 = t2254 * t2340 - t2681;
t2753 = t2002 * t2189;
t2003 = t2257 * t2339 - t2674;
t2752 = t2003 * t2192;
t2751 = t2028 * t2186;
t2750 = t2029 * t2189;
t2749 = t2030 * t2192;
t2739 = t2055 * t2242;
t2738 = t2055 * t2251;
t2737 = t2057 * t2245;
t2736 = t2057 * t2254;
t2735 = t2059 * t2248;
t2734 = t2059 * t2257;
t2070 = -pkin(2) + t2158 + 0.2e1 * t2830;
t2733 = t2070 * t2242;
t2071 = -pkin(2) + t2159 + 0.2e1 * t2829;
t2732 = t2071 * t2245;
t2072 = -pkin(2) + t2157 + 0.2e1 * t2828;
t2731 = t2072 * t2248;
t2730 = (pkin(1) + 0.2e1 * t2817) * t2240;
t2726 = (pkin(1) + 0.2e1 * t2815) * t2243;
t2722 = (pkin(1) + 0.2e1 * t2813) * t2246;
t2718 = t2148 * t2241;
t2717 = t2148 * t2251;
t2715 = t2149 * t2244;
t2714 = t2149 * t2254;
t2712 = t2150 * t2247;
t2711 = t2150 * t2257;
t2709 = t2151 * t2241;
t2708 = t2151 * t2251;
t2706 = t2152 * t2244;
t2705 = t2152 * t2254;
t2703 = t2153 * t2247;
t2702 = t2153 * t2257;
t2672 = t2249 * t2250;
t2669 = t2252 * t2253;
t2666 = t2255 * t2256;
t1887 = t1908 * t2470 + t1911 * t2846;
t2326 = pkin(1) * t1881 * t2856 - t1848 * t2821;
t2652 = -0.4e1 * t1887 * t2672 + t2889 * t2240 + t2249 * t2326;
t2651 = 0.4e1 * t1887 * t2692 - t2240 * t2326 + t2889 * t2249;
t1888 = t1909 * t2469 + t1912 * t2846;
t2325 = pkin(1) * t1882 * t2853 - t1849 * t2820;
t2650 = -0.4e1 * t1888 * t2669 + t2890 * t2243 + t2252 * t2325;
t2649 = 0.4e1 * t1888 * t2685 - t2243 * t2325 + t2890 * t2252;
t1889 = t1910 * t2468 + t1913 * t2846;
t2324 = pkin(1) * t1883 * t2850 - t1850 * t2819;
t2648 = -0.4e1 * t1889 * t2666 + t2891 * t2246 + t2255 * t2324;
t2647 = 0.4e1 * t1889 * t2678 - t2246 * t2324 + t2891 * t2255;
t2622 = 2 * t2292;
t2618 = pkin(2) * t2673;
t2614 = pkin(2) * t2670;
t2610 = pkin(2) * t2667;
t2606 = pkin(4) * t1881 * t2250;
t2605 = pkin(4) * t1882 * t2253;
t2604 = pkin(4) * t1883 * t2256;
t2603 = pkin(4) * t2800;
t2602 = pkin(4) * t2797;
t2601 = pkin(4) * t2794;
t2597 = t1860 * t2739;
t2596 = t1860 * t2738;
t2595 = t1861 * t2737;
t2594 = t1861 * t2736;
t2593 = t1862 * t2735;
t2592 = t1862 * t2734;
t2591 = t1881 * t2751;
t2049 = t2672 - t2694;
t2590 = t2049 * t2801;
t2589 = t2052 * t2801;
t2588 = t1881 * t2739;
t2587 = t1881 * t2738;
t2586 = t1882 * t2750;
t2050 = t2669 - t2687;
t2585 = t2050 * t2798;
t2584 = t2053 * t2798;
t2583 = t1882 * t2737;
t2582 = t1882 * t2736;
t2581 = t1883 * t2749;
t2051 = t2666 - t2680;
t2580 = t2051 * t2795;
t2579 = t2054 * t2795;
t2578 = t1883 * t2735;
t2577 = t1883 * t2734;
t2576 = t1914 * t2762;
t2575 = t1915 * t2759;
t2574 = t1916 * t2756;
t2573 = t1935 ^ 2 / t1956 ^ 2 * t2187;
t2572 = t1936 ^ 2 / t1957 ^ 2 * t2190;
t2571 = t1937 ^ 2 / t1958 ^ 2 * t2193;
t2013 = t2154 * t2196 - t2640;
t2518 = t2240 * t2691;
t2314 = pkin(1) * t2518 + (t2518 * t2865 + t2671) * t2249;
t1944 = (-t2148 * t2733 + t2151 * t2730) * t2198 + (t2070 * t2709 + t2148 * t2314) * t2250 + t2013 * t2148 - t2151 * t2618;
t2567 = t1944 * t2751;
t1945 = (t2148 * t2730 + t2151 * t2733) * t2198 + (t2070 * t2718 - t2151 * t2314) * t2250 - t2013 * t2151 - t2148 * t2618;
t2566 = t1945 * t2751;
t2014 = t2155 * t2200 - t2639;
t2513 = t2243 * t2684;
t2313 = pkin(1) * t2513 + (t2513 * t2865 + t2668) * t2252;
t1946 = (-t2149 * t2732 + t2152 * t2726) * t2202 + (t2071 * t2706 + t2149 * t2313) * t2253 + t2014 * t2149 - t2152 * t2614;
t2565 = t1946 * t2750;
t1947 = (t2149 * t2726 + t2152 * t2732) * t2202 + (t2071 * t2715 - t2152 * t2313) * t2253 - t2014 * t2152 - t2149 * t2614;
t2564 = t1947 * t2750;
t2015 = t2156 * t2204 - t2638;
t2508 = t2246 * t2677;
t2312 = pkin(1) * t2508 + (t2508 * t2865 + t2665) * t2255;
t1948 = (-t2150 * t2731 + t2153 * t2722) * t2206 + (t2072 * t2703 + t2150 * t2312) * t2256 + t2015 * t2150 - t2153 * t2610;
t2563 = t1948 * t2749;
t1949 = (t2150 * t2722 + t2153 * t2731) * t2206 + (t2072 * t2712 - t2153 * t2312) * t2256 - t2015 * t2153 - t2150 * t2610;
t2562 = t1949 * t2749;
t2558 = t1989 * t2781;
t2557 = t1990 * t2780;
t2556 = t1991 * t2779;
t2555 = t2186 * t2768;
t2554 = t2189 * t2766;
t2553 = t2192 * t2764;
t2533 = t2055 * t2708;
t2532 = t2056 * t2690;
t2531 = t2057 * t2705;
t2530 = t2058 * t2683;
t2529 = t2059 * t2702;
t2528 = t2060 * t2676;
t2494 = t2781 / 0.2e1;
t2493 = t2780 / 0.2e1;
t2492 = t2779 / 0.2e1;
t2488 = t2055 * t2652;
t2487 = t2055 * t2651;
t2486 = t2057 * t2650;
t2485 = t2057 * t2649;
t2484 = t2059 * t2648;
t2483 = t2059 * t2647;
t2434 = t1989 * t2532;
t1974 = t2249 * t2434;
t1896 = (t1977 - t2768 / 0.2e1 - t1908 * t2440) * t2240 + t1974;
t2482 = -0.2e1 * t1896 * t2751;
t2430 = t1990 * t2530;
t1975 = t2252 * t2430;
t1897 = (t1978 - t2766 / 0.2e1 - t1909 * t2439) * t2243 + t1975;
t2481 = -0.2e1 * t1897 * t2750;
t2426 = t1991 * t2528;
t1976 = t2255 * t2426;
t1898 = (t1979 - t2764 / 0.2e1 - t1910 * t2438) * t2246 + t1976;
t2480 = -0.2e1 * t1898 * t2749;
t2476 = t2240 * t2606;
t2475 = t2249 * t2606;
t2474 = t2243 * t2605;
t2473 = t2252 * t2605;
t2472 = t2246 * t2604;
t2471 = t2255 * t2604;
t2467 = t2241 * t2596;
t2466 = t2250 * t2596;
t2465 = t2244 * t2594;
t2464 = t2253 * t2594;
t2463 = t2247 * t2592;
t2462 = t2256 * t2592;
t2461 = t2028 * t2590;
t2460 = t2028 * t2589;
t2459 = t2241 * t2591;
t2458 = t2250 * t2591;
t2188 = t2241 ^ 2;
t2457 = t2188 * t2587;
t2456 = t2690 * t2802;
t2455 = t2029 * t2585;
t2454 = t2029 * t2584;
t2453 = t2244 * t2586;
t2452 = t2253 * t2586;
t2191 = t2244 ^ 2;
t2451 = t2191 * t2582;
t2450 = t2683 * t2799;
t2449 = t2030 * t2580;
t2448 = t2030 * t2579;
t2447 = t2247 * t2581;
t2446 = t2256 * t2581;
t2194 = t2247 ^ 2;
t2445 = t2194 * t2577;
t2444 = t2676 * t2796;
t2443 = t1997 * t2251 * t2790;
t2442 = t1998 * t2254 * t2789;
t2441 = t1999 * t2257 * t2788;
t2437 = t1992 * t2555;
t2004 = -0.4e1 * t2416 + (0.4e1 * t2198 - 0.2e1) * t2196 - t2094;
t2436 = t2004 * t2555;
t2435 = t2028 * t2555;
t2433 = t1993 * t2554;
t2005 = -0.4e1 * t2414 + (0.4e1 * t2202 - 0.2e1) * t2200 - t2095;
t2432 = t2005 * t2554;
t2431 = t2029 * t2554;
t2429 = t1994 * t2553;
t2006 = -0.4e1 * t2412 + (0.4e1 * t2206 - 0.2e1) * t2204 - t2096;
t2428 = t2006 * t2553;
t2427 = t2030 * t2553;
t2419 = t2186 * t2532;
t2418 = t2189 * t2530;
t2417 = t2192 * t2528;
t2410 = t1881 * t2494;
t2409 = t1882 * t2493;
t2408 = t1883 * t2492;
t2407 = t2573 / 0.4e1;
t2406 = t2572 / 0.4e1;
t2405 = t2571 / 0.4e1;
t2398 = -t2558 / 0.2e1;
t2397 = -t2557 / 0.2e1;
t2396 = -t2556 / 0.2e1;
t2377 = t2251 * t2456;
t2376 = t2254 * t2450;
t2375 = t2257 * t2444;
t2374 = t2004 * t2435;
t2373 = t2005 * t2431;
t2372 = t2006 * t2427;
t2368 = t2242 * t1997 * t2570;
t2367 = t2245 * t1998 * t2569;
t2366 = t2248 * t1999 * t2568;
t2365 = t2240 * t2434;
t2364 = t2243 * t2430;
t2363 = t2246 * t2426;
t2362 = -t2055 * t2573 / 0.4e1;
t2361 = t2055 * t2407;
t2360 = -t2057 * t2572 / 0.4e1;
t2359 = t2057 * t2406;
t2358 = -t2059 * t2571 / 0.4e1;
t2357 = t2059 * t2405;
t2356 = t1848 * t2052 + t1911 * t2049;
t2355 = t1848 * t2049 - t1911 * t2052;
t2354 = t1849 * t2053 + t1912 * t2050;
t2353 = t1849 * t2050 - t1912 * t2053;
t2352 = t1850 * t2054 + t1913 * t2051;
t2351 = t1850 * t2051 - t1913 * t2054;
t2344 = 0.2e1 * t1992 * t2435;
t2343 = 0.2e1 * t1993 * t2431;
t2342 = 0.2e1 * t1994 * t2427;
t2338 = t2443 * t2882;
t2337 = t2442 * t2881;
t2336 = t2441 * t2880;
t2335 = t2251 * t2362;
t2334 = t2251 * t2361;
t2333 = t2254 * t2360;
t2332 = t2254 * t2359;
t2331 = t2257 * t2358;
t2330 = t2257 * t2357;
t2323 = t2055 * t2356;
t2322 = t2055 * t2355;
t2321 = t2057 * t2354;
t2320 = t2057 * t2353;
t2319 = t2059 * t2352;
t2318 = t2059 * t2351;
t2311 = 0.2e1 * t2004 * t2576 + t2802 * t2864;
t2310 = t2052 ^ 2 * t2802 + t2576 * t2864;
t2309 = 0.2e1 * t2005 * t2575 + t2799 * t2863;
t2308 = t2053 ^ 2 * t2799 + t2575 * t2863;
t2307 = 0.2e1 * t2006 * t2574 + t2796 * t2862;
t2306 = t2054 ^ 2 * t2796 + t2574 * t2862;
t2293 = 1 / pkin(2) ^ 2;
t1925 = t2297 * t2405 + t1979;
t1924 = t2297 * t2406 + t1978;
t1923 = t2297 * t2407 + t1977;
t1922 = t1925 * t2255 - t2363;
t1921 = t1925 * t2246 + t1976;
t1920 = t1924 * t2252 - t2364;
t1919 = t1924 * t2243 + t1975;
t1918 = t1923 * t2249 - t2365;
t1917 = t1923 * t2240 + t1974;
t1901 = -0.2e1 * t2363 + (t2096 * t2764 + (-t1943 * t2293 - t2292 * t2788) * t1943 * t2695) * t2255;
t1900 = -0.2e1 * t2364 + (t2095 * t2766 + (-t1942 * t2293 - t2292 * t2789) * t1942 * t2696) * t2252;
t1899 = -0.2e1 * t2365 + (t2094 * t2768 + (-t1941 * t2293 - t2292 * t2790) * t1941 * t2697) * t2249;
t1859 = pkin(1) * t1862 - t2601;
t1858 = pkin(1) * t1861 - t2602;
t1857 = pkin(1) * t1860 - t2603;
t1856 = -t1859 * t2246 - t2471;
t1855 = -t1858 * t2243 - t2473;
t1854 = -t1857 * t2240 - t2475;
t1853 = t1859 * t2255 - t2472;
t1852 = t1858 * t2252 - t2474;
t1851 = t1857 * t2249 - t2476;
t1844 = t2601 + ((-t2378 / 0.2e1 + (t1886 * t2495 - t2791 / 0.2e1) * t2695) * t2292 + t1862) * t2869;
t1843 = t2602 + ((-t2379 / 0.2e1 + (t1885 * t2497 - t2792 / 0.2e1) * t2696) * t2292 + t1861) * t2869;
t1842 = t2603 + ((-t2380 / 0.2e1 + (t1884 * t2499 - t2793 / 0.2e1) * t2697) * t2292 + t1860) * t2869;
t1841 = -t1844 * t2255 - t2472;
t1840 = t1844 * t2246 - t2471;
t1839 = -t1843 * t2252 - t2474;
t1838 = t1843 * t2243 - t2473;
t1837 = -t1842 * t2249 - t2476;
t1836 = t1842 * t2240 - t2475;
t1 = [t1881 * t2533 + t1882 * t2531 + t1883 * t2529, 0, 0, t2151 * t2457 + t2152 * t2451 + t2153 * t2445 + ((t1949 * t2765 + t2153 * t2441) * t2417 + (t1947 * t2767 + t2152 * t2442) * t2418 + (t1945 * t2769 + t2151 * t2443) * t2419) * t2296, 0.2e1 * t2151 * t2377 + 0.2e1 * t2152 * t2376 + 0.2e1 * t2153 * t2375 + ((-t1949 * t2782 + t2153 * t2336) * t2192 + (-t1947 * t2783 + t2152 * t2337) * t2189 + (-t1945 * t2784 + t2151 * t2338) * t2186) * t2296, t2151 * t2467 + t2152 * t2465 + t2153 * t2463 + (t2151 * t2250 * t2334 + t2152 * t2253 * t2332 + t2153 * t2256 * t2330) * t2297 + (-t1945 * t2459 - t1947 * t2453 - t1949 * t2447) * t2296, t2151 * t2466 + t2152 * t2464 + t2153 * t2462 + (t2331 * t2703 + t2333 * t2706 + t2335 * t2709) * t2297 + (-t1945 * t2458 - t1947 * t2452 - t1949 * t2446) * t2296, (-t1860 * t2566 - t1861 * t2564 - t1862 * t2562) * t2296, 0, 0, t2306 * t2702 + t2308 * t2705 + t2310 * t2708 + (t1945 * t2344 + t1947 * t2343 + t1949 * t2342 + (-t1969 * t2437 - t1971 * t2433 - t1973 * t2429) * t2622) * t2296, t2307 * t2702 + t2309 * t2705 + t2311 * t2708 + (t1945 * t2374 + t1947 * t2373 + t1949 * t2372 + (-t1969 * t2436 - t1971 * t2432 - t1973 * t2428) * t2292) * t2296, t2352 * t2529 + t2354 * t2531 + t2356 * t2533 + (-t1945 * t2460 - t1947 * t2454 - t1949 * t2448 + (t1969 * t2589 + t1971 * t2584 + t1973 * t2579) * t2292) * t2296, t2351 * t2529 + t2353 * t2531 + t2355 * t2533 + (-t1945 * t2461 - t1947 * t2455 - t1949 * t2449 + (t1969 * t2590 + t1971 * t2585 + t1973 * t2580) * t2292) * t2296, (-t1848 * t2566 - t1849 * t2564 - t1850 * t2562 + (t1848 * t2777 + t1849 * t2775 + t1850 * t2773) * t2292) * t2296, t1945 * t2482 + t1947 * t2481 + t1949 * t2480 + t2648 * t2529 + t2650 * t2531 + t2652 * t2533 + (-t1837 * t2566 - t1839 * t2564 - t1841 * t2562) * t2296 + (t1917 * t2777 + t1919 * t2775 + t1921 * t2773 + (t1851 * t2777 + t1852 * t2775 + t1853 * t2773) * t2296) * t2292, -t1899 * t2566 - t1900 * t2564 - t1901 * t2562 + t2647 * t2529 + t2649 * t2531 + t2651 * t2533 + (-t1836 * t2566 - t1838 * t2564 - t1840 * t2562) * t2296 + (t1918 * t2777 + t1920 * t2775 + t1922 * t2773 + (t1854 * t2777 + t1855 * t2775 + t1856 * t2773) * t2296) * t2292, 0; -t2148 * t2587 - t2149 * t2582 - t2150 * t2577, 0, 0, -t2148 * t2457 - t2149 * t2451 - t2150 * t2445 + ((t1948 * t2765 - t2150 * t2441) * t2417 + (t1946 * t2767 - t2149 * t2442) * t2418 + (t1944 * t2769 - t2148 * t2443) * t2419) * t2296, -0.2e1 * t2148 * t2377 - 0.2e1 * t2149 * t2376 - 0.2e1 * t2150 * t2375 + ((-t1948 * t2782 - t2150 * t2336) * t2192 + (-t1946 * t2783 - t2149 * t2337) * t2189 + (-t1944 * t2784 - t2148 * t2338) * t2186) * t2296, -t2148 * t2467 - t2149 * t2465 - t2150 * t2463 + (t2148 * t2250 * t2335 + t2149 * t2253 * t2333 + t2150 * t2256 * t2331) * t2297 + (-t1944 * t2459 - t1946 * t2453 - t1948 * t2447) * t2296, -t2148 * t2466 - t2149 * t2464 - t2150 * t2462 + (t2330 * t2712 + t2332 * t2715 + t2334 * t2718) * t2297 + (-t1944 * t2458 - t1946 * t2452 - t1948 * t2446) * t2296, (-t1860 * t2567 - t1861 * t2565 - t1862 * t2563) * t2296, 0, 0, -t2306 * t2711 - t2308 * t2714 - t2310 * t2717 + (t1944 * t2344 + t1946 * t2343 + t1948 * t2342 + (-t1968 * t2437 - t1970 * t2433 - t1972 * t2429) * t2622) * t2296, -t2307 * t2711 - t2309 * t2714 - t2311 * t2717 + (t1944 * t2374 + t1946 * t2373 + t1948 * t2372 + (-t1968 * t2436 - t1970 * t2432 - t1972 * t2428) * t2292) * t2296, -t2319 * t2711 - t2321 * t2714 - t2323 * t2717 + (-t1944 * t2460 - t1946 * t2454 - t1948 * t2448 + (t1968 * t2589 + t1970 * t2584 + t1972 * t2579) * t2292) * t2296, -t2318 * t2711 - t2320 * t2714 - t2322 * t2717 + (-t1944 * t2461 - t1946 * t2455 - t1948 * t2449 + (t1968 * t2590 + t1970 * t2585 + t1972 * t2580) * t2292) * t2296, (-t1848 * t2567 - t1849 * t2565 - t1850 * t2563 + (t1848 * t2778 + t1849 * t2776 + t1850 * t2774) * t2292) * t2296, t1944 * t2482 + t1946 * t2481 + t1948 * t2480 - t2484 * t2711 - t2486 * t2714 - t2488 * t2717 + (-t1837 * t2567 - t1839 * t2565 - t1841 * t2563) * t2296 + (t1917 * t2778 + t1919 * t2776 + t1921 * t2774 + (t1851 * t2778 + t1852 * t2776 + t1853 * t2774) * t2296) * t2292, -t1899 * t2567 - t1900 * t2565 - t1901 * t2563 - t2483 * t2711 - t2485 * t2714 - t2487 * t2717 + (-t1836 * t2567 - t1838 * t2565 - t1840 * t2563) * t2296 + (t1918 * t2778 + t1920 * t2776 + t1922 * t2774 + (t1854 * t2778 + t1855 * t2776 + t1856 * t2774) * t2296) * t2292, 0; -t2578 - t2583 - t2588, 0, 0, -t2188 * t2588 - t2191 * t2583 - t2194 * t2578 + ((-t2366 + t2396) * t2528 + (-t2367 + t2397) * t2530 + (-t2368 + t2398) * t2532) * t2296, -0.2e1 * t2242 * t2456 - 0.2e1 * t2245 * t2450 - 0.2e1 * t2248 * t2444 + (t1959 * t2494 + t1960 * t2493 + t1961 * t2492 - t2366 * t2880 - t2367 * t2881 - t2368 * t2882) * t2296, -t2241 * t2597 - t2244 * t2595 - t2247 * t2593 + (t2242 * t2250 * t2362 + t2245 * t2253 * t2360 + t2248 * t2256 * t2358) * t2297 + (t2241 * t2410 + t2244 * t2409 + t2247 * t2408) * t2296, -t2250 * t2597 - t2253 * t2595 - t2256 * t2593 + (t2357 * t2677 + t2359 * t2684 + t2361 * t2691) * t2297 + (t2250 * t2410 + t2253 * t2409 + t2256 * t2408) * t2296, (t1860 * t2494 + t1861 * t2493 + t1862 * t2492) * t2296, 0, 0, -t2306 * t2248 - t2308 * t2245 - t2310 * t2242 + (-t1992 * t2056 * t2558 - t1993 * t2058 * t2557 - t1994 * t2060 * t2556 + (-t2001 * t2437 - t2002 * t2433 - t2003 * t2429) * t2622) * t2296, -t2307 * t2248 - t2309 * t2245 - t2311 * t2242 + (t2060 * t2006 * t2396 + t2058 * t2005 * t2397 + t2056 * t2004 * t2398 + (-t2001 * t2436 - t2002 * t2432 - t2003 * t2428) * t2292) * t2296, -t2248 * t2319 - t2245 * t2321 - t2242 * t2323 + (t2054 * t2408 + t2053 * t2409 + t2052 * t2410 + (t2001 * t2589 + t2002 * t2584 + t2003 * t2579) * t2292) * t2296, -t2248 * t2318 - t2245 * t2320 - t2242 * t2322 + (t2051 * t2408 + t2050 * t2409 + t2049 * t2410 + (t2001 * t2590 + t2002 * t2585 + t2003 * t2580) * t2292) * t2296, (t1850 * t2492 + t1849 * t2493 + t1848 * t2494 + (t1848 * t2754 + t1849 * t2753 + t1850 * t2752) * t2292) * t2296, t1896 * t2781 + t1897 * t2780 + t1898 * t2779 - t2248 * t2484 - t2245 * t2486 - t2242 * t2488 + (t1837 * t2494 + t1839 * t2493 + t1841 * t2492) * t2296 + (t1917 * t2754 + t1919 * t2753 + t1921 * t2752 + (t1851 * t2754 + t1852 * t2753 + t1853 * t2752) * t2296) * t2292, t1901 * t2492 + t1900 * t2493 + t1899 * t2494 - t2248 * t2483 - t2245 * t2485 - t2242 * t2487 + (t1836 * t2494 + t1838 * t2493 + t1840 * t2492) * t2296 + (t1918 * t2754 + t1920 * t2753 + t1922 * t2752 + (t1854 * t2754 + t1855 * t2753 + t1856 * t2752) * t2296) * t2292, 0;];
tau_reg  = t1;
