% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR7V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR7V1G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:52
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRRRR7V1G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(5,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR7V1G2A0_invdyn_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:47:57
% EndTime: 2020-08-07 03:50:08
% DurationCPUTime: 138.14s
% Computational Cost: add. (1450281->1527), mult. (3776277->2391), div. (40836->30), fcn. (2356083->201), ass. (0->1004)
t3709 = legFrame(2,2);
t3618 = sin(t3709);
t3621 = cos(t3709);
t3420 = g(1) * t3621 - g(2) * t3618;
t3719 = sin(qJ(1,2));
t3728 = cos(qJ(1,2));
t3369 = -g(3) * t3719 + t3420 * t3728;
t3694 = qJ(2,2) + qJ(3,2);
t3595 = cos(t3694);
t3727 = cos(qJ(2,2));
t3456 = pkin(1) * t3727 + pkin(2) * t3595;
t3424 = 0.1e1 / t3456;
t4188 = t3424 * t3719;
t4009 = t3369 * t4188;
t4359 = 0.4e1 * pkin(2);
t3722 = sin(qJ(1,1));
t3710 = legFrame(1,2);
t3622 = cos(t3710);
t3734 = xDP(1);
t4153 = t3622 * t3734;
t3619 = sin(t3710);
t3733 = xDP(2);
t4156 = t3619 * t3733;
t3818 = -t4153 + t4156;
t4367 = t3818 * t3722;
t4154 = t3621 * t3734;
t4158 = t3618 * t3733;
t3819 = -t4154 + t4158;
t4366 = t3819 * t3719;
t3716 = sin(qJ(1,3));
t3708 = legFrame(3,2);
t3620 = cos(t3708);
t4155 = t3620 * t3734;
t3617 = sin(t3708);
t4160 = t3617 * t3733;
t3820 = -t4155 + t4160;
t4365 = t3820 * t3716;
t3735 = (pkin(4) + pkin(5));
t4364 = 2 * t3735;
t3765 = pkin(2) ^ 2;
t4363 = 0.2e1 * t3765;
t3707 = -t3765 / 0.2e1;
t3768 = pkin(1) ^ 2;
t3609 = t3707 + t3768;
t3729 = cos(qJ(3,1));
t3675 = t3729 ^ 2;
t4116 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t4362 = -0.2e1 * t3675 * t4116 + 0.2e1 * t3609;
t3726 = cos(qJ(3,2));
t3671 = t3726 ^ 2;
t4361 = -0.2e1 * t3671 * t4116 + 0.2e1 * t3609;
t3723 = cos(qJ(3,3));
t3667 = t3723 ^ 2;
t4360 = -0.2e1 * t3667 * t4116 + 0.2e1 * t3609;
t3740 = 0.4e1 * qJ(3,3);
t3745 = 3 * qJ(2,3);
t3578 = cos(t3740 + t3745);
t3742 = 0.2e1 * qJ(3,3);
t3681 = t3742 + qJ(2,3);
t3581 = cos(t3681);
t4358 = -t3578 - t3581;
t3580 = cos(t3742 + t3745);
t3724 = cos(qJ(2,3));
t4357 = -t3580 - t3724;
t3743 = -0.2e1 * qJ(3,3);
t4356 = cos(qJ(2,3) + t3743) + cos(t3745);
t3748 = 0.4e1 * qJ(3,2);
t3753 = 0.3e1 * qJ(2,2);
t3588 = cos(t3748 + t3753);
t3750 = 0.2e1 * qJ(3,2);
t3689 = t3750 + qJ(2,2);
t3590 = cos(t3689);
t4355 = -t3588 - t3590;
t3592 = cos(t3753 + t3750);
t4354 = -t3592 - t3727;
t3751 = -0.2e1 * qJ(3,2);
t4353 = cos(qJ(2,2) + t3751) + cos(t3753);
t3756 = 0.4e1 * qJ(3,1);
t3761 = 3 * qJ(2,1);
t3598 = cos(t3756 + t3761);
t3758 = 0.2e1 * qJ(3,1);
t3698 = t3758 + qJ(2,1);
t3602 = cos(t3698);
t4352 = -t3598 - t3602;
t3601 = cos(t3758 + t3761);
t3730 = cos(qJ(2,1));
t4351 = -t3601 - t3730;
t3759 = -0.2e1 * qJ(3,1);
t4350 = cos(qJ(2,1) + t3759) + cos(t3761);
t4349 = -0.2e1 * pkin(1);
t4348 = -0.3e1 * pkin(2);
t4347 = -0.2e1 * pkin(2);
t4346 = 0.2e1 * pkin(2);
t3769 = 0.1e1 / pkin(1);
t3714 = sin(qJ(3,3));
t3660 = 0.1e1 / t3714;
t3725 = cos(qJ(1,3));
t3461 = t3725 * t4160;
t3732 = xDP(3);
t3532 = t3716 * t3732;
t3986 = t3725 * t4155;
t3329 = -t3986 / 0.2e1 + t3461 / 0.2e1 + t3532;
t3535 = t3732 * t3725;
t3346 = t3535 - t4365;
t4268 = t3723 * pkin(2);
t3548 = pkin(1) + t4268;
t4144 = t3714 * t3724;
t4152 = (t3723 + 0.1e1) * (t3723 - 0.1e1);
t3715 = sin(qJ(2,3));
t4287 = pkin(2) * t3715;
t3353 = t3548 * t4144 + t4152 * t4287;
t3401 = t3617 * t3734 + t3620 * t3733;
t4200 = t3401 * t3715;
t3380 = pkin(1) * t4200;
t3386 = pkin(1) * t3401;
t3632 = pkin(1) * t3723;
t3640 = t3765 + t3768;
t3643 = sin(t3742);
t3666 = t3723 * t3667;
t3669 = t3724 ^ 2;
t3668 = t3724 * t3669;
t4146 = t3714 * t3715;
t4174 = t3548 * t3724;
t3811 = pkin(2) * t4146 - t4174;
t4145 = t3714 * t3716;
t4003 = t3820 * t4145;
t4103 = -pkin(1) * t4003 + pkin(2) * t3401;
t4291 = pkin(2) * t3667;
t3817 = -0.2e1 * t3401 * t4291 + t4103;
t4124 = t3725 * t3735;
t3856 = t3820 * t4124 + t3380;
t3746 = 2 * qJ(2,3);
t3653 = cos(t3746);
t3876 = t3353 * t3653 * t3535;
t4142 = t3715 * t3724;
t3973 = t3714 * t4142;
t3877 = t3723 * t3973;
t3343 = -t3461 - t3532 + t3986;
t4141 = t3715 * t3735;
t3962 = t3343 * t4141;
t3925 = pkin(1) * t3962;
t3934 = -0.2e1 * t4003;
t4119 = t3732 * t3735;
t3971 = t3716 * t4119;
t3972 = t3715 * t4124;
t3644 = sin(t3746);
t3983 = t3644 * t3535;
t4143 = t3715 * t3716;
t4002 = t3820 * t4143;
t4125 = t3723 * t3714;
t4004 = t3401 * t4125;
t4080 = 0.2e1 * t4142;
t4096 = 0.4e1 * t3666 - 0.5e1 * t3723;
t3623 = t3716 * pkin(2);
t4100 = t3714 * t3972 + t3623;
t4115 = t3765 * t3401;
t4201 = t3401 * t3714;
t4217 = t3343 * t3735;
t4225 = (-pkin(1) * t4365 + t4201 * t4346) * t3723;
t4282 = pkin(2) * t3724;
t4288 = pkin(2) * t3714;
t3651 = cos(t3742);
t4294 = pkin(2) * t3651;
t4306 = 0.2e1 * t3667 - 0.1e1;
t4329 = pkin(1) * pkin(2);
t4336 = -2 * t3735;
t4339 = 0.4e1 * t3667;
t3272 = (t3876 + ((pkin(2) * t3934 - t3386) * t3723 + t3817) * t3668 + (t3856 * t3714 + (-pkin(2) * t4306 * t4365 + t4225) * t3715) * t3669 + ((t3386 - (t4145 * t4347 - t3972) * t3820) * t3723 - t3817) * t3724 + t4002 * t4291 - t4004 * t4287 - (pkin(2) * t4143 + t3714 * t4124) * t3820) * t4294 - pkin(2) * (t3353 * t3983 - ((pkin(1) * t4201 + t4225) * t3669 + (-t3715 * t4103 + t3723 * t3856) * t3724 - t4100 * t3820) * t3724 - ((t3667 * t4080 - t4125) * t3401 - (t4306 * t3669 - t3667 - 0.2e1 * t3877) * t4365) * t4282) * t3643 - pkin(1) * t3811 * t3983 * t4152 + t3876 * t3632 + (t3723 * t3934 * t4116 + t3401 * t4360 + (-(t4339 - 0.3e1) * t4003 - t4096 * t3401) * t4329) * t3668 + ((((t3380 + t3971) * t4339 - 0.3e1 * t3380 + t3329 * t4336) * t3714 - t4096 * pkin(1) * t4002) * pkin(2) + 0.2e1 * (-pkin(1) * t4217 + t4116 * t4200) * t4125 + t4002 * t4360) * t3669 + ((0.2e1 * t3715 * t3971 + t3386) * t3666 * t4346 + (-0.2e1 * t4115 + ((t3535 + 0.2e1 * t4365) * t4288 - 0.2e1 * t3962) * pkin(1)) * t3667 + ((t3535 * t3640 - t4363 * t4365) * t3714 + (0.4e1 / 0.3e1 * (-t3986 / 0.4e1 + t3461 / 0.4e1 + t3532) * t4141 + t3386) * t4348) * t3723 + pkin(1) * (t3535 - 0.3e1 * t4365) * t4288 + 0.2e1 * t3925 + t4115) * t3724 + pkin(2) * ((-t3532 * t3667 + t3329) * t3714 * t4364 + ((t3666 - t3723) * pkin(1) * t3535 + (t3346 * t3667 - t3346 + t4004) * pkin(2)) * t3715);
t3554 = pkin(1) * t4268;
t3739 = -0.3e1 / 0.2e1 * pkin(1);
t4309 = t3765 / 0.2e1;
t3299 = (t3548 * t4142 + (t3669 - 0.1e1) * t4288) * t4294 / 0.2e1 - t3811 * t3643 * t4282 / 0.2e1 + pkin(2) * (pkin(1) * t3667 - t4268 / 0.2e1 + t3739) * t4142 + ((t3554 + t3609) * t3669 + t4309) * t3714;
t4246 = t3272 / t3299;
t4040 = t3660 * t4246;
t3864 = t4040 / 0.2e1;
t3263 = t3769 * t3864;
t4280 = pkin(2) * t3734;
t4069 = t3714 * t4280;
t4281 = pkin(2) * t3733;
t4070 = t3714 * t4281;
t4117 = t3734 * t3735;
t4118 = t3733 * t3735;
t4140 = t3716 * t3735;
t4172 = t3548 * t3734;
t4173 = t3548 * t3733;
t3281 = ((-t3716 * t4172 - t4070) * t3724 + t3725 * t4117) * t3620 + ((t3716 * t4173 - t4069) * t3724 - t3725 * t4118) * t3617 - (t3725 * t4174 + t4140) * t3732 + ((t3716 * t4069 - t4173) * t3620 + (-t3716 * t4070 - t4172) * t3617 + t3535 * t4288) * t3715;
t3766 = 0.1e1 / pkin(2);
t4111 = t3766 * t3769;
t4037 = t3281 * t4111;
t3904 = t3660 * t4037;
t3248 = t3263 + t3904 / 0.2e1;
t4345 = -0.2e1 * t3248;
t3717 = sin(qJ(3,2));
t3662 = 0.1e1 / t3717;
t3462 = t3728 * t4158;
t3533 = t3719 * t3732;
t3985 = t3728 * t4154;
t3330 = -t3985 / 0.2e1 + t3462 / 0.2e1 + t3533;
t3536 = t3732 * t3728;
t3341 = t3536 - t4366;
t4267 = t3726 * pkin(2);
t3550 = pkin(1) + t4267;
t4137 = t3717 * t3727;
t4151 = (t3726 + 0.1e1) * (t3726 - 0.1e1);
t3718 = sin(qJ(2,2));
t4285 = pkin(2) * t3718;
t3354 = t3550 * t4137 + t4151 * t4285;
t3403 = t3618 * t3734 + t3621 * t3733;
t4197 = t3403 * t3718;
t3381 = pkin(1) * t4197;
t3387 = pkin(1) * t3403;
t3633 = pkin(1) * t3726;
t3646 = sin(t3750);
t3670 = t3726 * t3671;
t3673 = t3727 ^ 2;
t3672 = t3727 * t3673;
t4139 = t3717 * t3718;
t4169 = t3550 * t3727;
t3810 = pkin(2) * t4139 - t4169;
t4138 = t3717 * t3719;
t4000 = t3819 * t4138;
t4102 = -pkin(1) * t4000 + pkin(2) * t3403;
t4290 = pkin(2) * t3671;
t3816 = -0.2e1 * t3403 * t4290 + t4102;
t4122 = t3728 * t3735;
t3855 = t3819 * t4122 + t3381;
t3754 = 0.2e1 * qJ(2,2);
t3656 = cos(t3754);
t3874 = t3354 * t3656 * t3536;
t4135 = t3718 * t3727;
t3969 = t3717 * t4135;
t3875 = t3726 * t3969;
t3344 = -t3462 - t3533 + t3985;
t4134 = t3718 * t3735;
t3961 = t3344 * t4134;
t3924 = pkin(1) * t3961;
t3933 = -0.2e1 * t4000;
t3967 = t3719 * t4119;
t3968 = t3718 * t4122;
t3647 = sin(t3754);
t3982 = t3647 * t3536;
t4136 = t3718 * t3719;
t3999 = t3819 * t4136;
t4123 = t3726 * t3717;
t4001 = t3403 * t4123;
t4078 = 0.2e1 * t4135;
t4095 = 0.4e1 * t3670 - 0.5e1 * t3726;
t3624 = t3719 * pkin(2);
t4099 = t3717 * t3968 + t3624;
t4114 = t3765 * t3403;
t4198 = t3403 * t3717;
t4214 = t3344 * t3735;
t4224 = (-pkin(1) * t4366 + t4198 * t4346) * t3726;
t4266 = t3727 * pkin(2);
t4286 = pkin(2) * t3717;
t3654 = cos(t3750);
t4293 = pkin(2) * t3654;
t4303 = 0.2e1 * t3671 - 0.1e1;
t4338 = 0.4e1 * t3671;
t3273 = (t3874 + ((pkin(2) * t3933 - t3387) * t3726 + t3816) * t3672 + (t3855 * t3717 + (-pkin(2) * t4303 * t4366 + t4224) * t3718) * t3673 + ((t3387 - (t4138 * t4347 - t3968) * t3819) * t3726 - t3816) * t3727 + t3999 * t4290 - t4001 * t4285 - (pkin(2) * t4136 + t3717 * t4122) * t3819) * t4293 - pkin(2) * (t3354 * t3982 - ((pkin(1) * t4198 + t4224) * t3673 + (-t3718 * t4102 + t3726 * t3855) * t3727 - t3819 * t4099) * t3727 - ((t3671 * t4078 - t4123) * t3403 - (t4303 * t3673 - t3671 - 0.2e1 * t3875) * t4366) * t4266) * t3646 - pkin(1) * t3810 * t3982 * t4151 + t3874 * t3633 + (t3726 * t3933 * t4116 + t3403 * t4361 + (-(t4338 - 0.3e1) * t4000 - t4095 * t3403) * t4329) * t3672 + ((((t3381 + t3967) * t4338 - 0.3e1 * t3381 + t3330 * t4336) * t3717 - t4095 * pkin(1) * t3999) * pkin(2) + 0.2e1 * (-pkin(1) * t4214 + t4116 * t4197) * t4123 + t3999 * t4361) * t3673 + ((0.2e1 * t3718 * t3967 + t3387) * t3670 * t4346 + (-0.2e1 * t4114 + ((t3536 + 0.2e1 * t4366) * t4286 - 0.2e1 * t3961) * pkin(1)) * t3671 + ((t3536 * t3640 - t4363 * t4366) * t3717 + (0.4e1 / 0.3e1 * (-t3985 / 0.4e1 + t3462 / 0.4e1 + t3533) * t4134 + t3387) * t4348) * t3726 + pkin(1) * (t3536 - 0.3e1 * t4366) * t4286 + 0.2e1 * t3924 + t4114) * t3727 + pkin(2) * ((-t3533 * t3671 + t3330) * t3717 * t4364 + ((t3670 - t3726) * pkin(1) * t3536 + (t3341 * t3671 - t3341 + t4001) * pkin(2)) * t3718);
t3555 = pkin(1) * t4267;
t3300 = (t3550 * t4135 + (t3673 - 0.1e1) * t4286) * t4293 / 0.2e1 - t3810 * t3646 * t4266 / 0.2e1 + pkin(2) * (pkin(1) * t3671 - t4267 / 0.2e1 + t3739) * t4135 + ((t3555 + t3609) * t3673 + t4309) * t3717;
t4245 = t3273 / t3300;
t4039 = t3662 * t4245;
t3862 = t4039 / 0.2e1;
t3264 = t3769 * t3862;
t4065 = t3717 * t4280;
t4066 = t3717 * t4281;
t4133 = t3719 * t3735;
t4167 = t3550 * t3734;
t4168 = t3550 * t3733;
t3282 = ((-t3719 * t4167 - t4066) * t3727 + t3728 * t4117) * t3621 + ((t3719 * t4168 - t4065) * t3727 - t3728 * t4118) * t3618 - (t3728 * t4169 + t4133) * t3732 + ((t3719 * t4065 - t4168) * t3621 + (-t3719 * t4066 - t4167) * t3618 + t3536 * t4286) * t3718;
t4036 = t3282 * t4111;
t3903 = t3662 * t4036;
t3249 = t3264 + t3903 / 0.2e1;
t4344 = -0.2e1 * t3249;
t3720 = sin(qJ(3,1));
t3664 = 0.1e1 / t3720;
t3731 = cos(qJ(1,1));
t3463 = t3731 * t4156;
t3534 = t3722 * t3732;
t3984 = t3731 * t4153;
t3331 = -t3984 / 0.2e1 + t3463 / 0.2e1 + t3534;
t3537 = t3732 * t3731;
t3342 = t3537 - t4367;
t4265 = t3729 * pkin(2);
t3552 = pkin(1) + t4265;
t4130 = t3720 * t3730;
t4150 = (t3729 + 0.1e1) * (t3729 - 0.1e1);
t3721 = sin(qJ(2,1));
t4283 = pkin(2) * t3721;
t3355 = t3552 * t4130 + t4150 * t4283;
t3405 = t3619 * t3734 + t3622 * t3733;
t4194 = t3405 * t3721;
t3382 = pkin(1) * t4194;
t3388 = pkin(1) * t3405;
t3626 = t3729 * pkin(1);
t3649 = sin(t3758);
t3674 = t3729 * t3675;
t3677 = t3730 ^ 2;
t3676 = t3730 * t3677;
t4132 = t3720 * t3721;
t4164 = t3552 * t3730;
t3809 = pkin(2) * t4132 - t4164;
t4131 = t3720 * t3722;
t3997 = t3818 * t4131;
t4101 = -pkin(1) * t3997 + pkin(2) * t3405;
t4289 = pkin(2) * t3675;
t3815 = -0.2e1 * t3405 * t4289 + t4101;
t4120 = t3731 * t3735;
t3854 = t3818 * t4120 + t3382;
t3762 = 2 * qJ(2,1);
t3659 = cos(t3762);
t3872 = t3355 * t3659 * t3537;
t4128 = t3721 * t3730;
t3965 = t3720 * t4128;
t3873 = t3729 * t3965;
t3345 = -t3463 - t3534 + t3984;
t4127 = t3721 * t3735;
t3960 = t3345 * t4127;
t3923 = pkin(1) * t3960;
t3932 = -0.2e1 * t3997;
t3963 = t3722 * t4119;
t3964 = t3721 * t4120;
t3650 = sin(t3762);
t3981 = t3650 * t3537;
t4129 = t3721 * t3722;
t3996 = t3818 * t4129;
t4121 = t3729 * t3720;
t3998 = t3405 * t4121;
t4076 = 0.2e1 * t4128;
t4094 = 0.4e1 * t3674 - 0.5e1 * t3729;
t3625 = t3722 * pkin(2);
t4098 = t3720 * t3964 + t3625;
t4113 = t3765 * t3405;
t4195 = t3405 * t3720;
t4211 = t3345 * t3735;
t4223 = (-pkin(1) * t4367 + t4195 * t4346) * t3729;
t4264 = t3730 * pkin(2);
t4284 = pkin(2) * t3720;
t3657 = cos(t3758);
t4292 = pkin(2) * t3657;
t4300 = 0.2e1 * t3675 - 0.1e1;
t4337 = 0.4e1 * t3675;
t3274 = (t3872 + ((pkin(2) * t3932 - t3388) * t3729 + t3815) * t3676 + (t3854 * t3720 + (-pkin(2) * t4300 * t4367 + t4223) * t3721) * t3677 + ((t3388 - (t4131 * t4347 - t3964) * t3818) * t3729 - t3815) * t3730 + t3996 * t4289 - t3998 * t4283 - (pkin(2) * t4129 + t3720 * t4120) * t3818) * t4292 - pkin(2) * (t3355 * t3981 - ((pkin(1) * t4195 + t4223) * t3677 + (-t3721 * t4101 + t3729 * t3854) * t3730 - t3818 * t4098) * t3730 - ((t3675 * t4076 - t4121) * t3405 - (t4300 * t3677 - t3675 - 0.2e1 * t3873) * t4367) * t4264) * t3649 - pkin(1) * t3809 * t3981 * t4150 + t3872 * t3626 + (t3729 * t3932 * t4116 + t3405 * t4362 + (-(t4337 - 0.3e1) * t3997 - t4094 * t3405) * t4329) * t3676 + ((((t3382 + t3963) * t4337 - 0.3e1 * t3382 + t3331 * t4336) * t3720 - t4094 * pkin(1) * t3996) * pkin(2) + 0.2e1 * (-pkin(1) * t4211 + t4116 * t4194) * t4121 + t3996 * t4362) * t3677 + ((0.2e1 * t3721 * t3963 + t3388) * t3674 * t4346 + (-0.2e1 * t4113 + ((t3537 + 0.2e1 * t4367) * t4284 - 0.2e1 * t3960) * pkin(1)) * t3675 + ((t3537 * t3640 - t4363 * t4367) * t3720 + (0.4e1 / 0.3e1 * (-t3984 / 0.4e1 + t3463 / 0.4e1 + t3534) * t4127 + t3388) * t4348) * t3729 + pkin(1) * (t3537 - 0.3e1 * t4367) * t4284 + 0.2e1 * t3923 + t4113) * t3730 + pkin(2) * ((-t3534 * t3675 + t3331) * t3720 * t4364 + ((t3674 - t3729) * pkin(1) * t3537 + (t3342 * t3675 - t3342 + t3998) * pkin(2)) * t3721);
t3556 = pkin(1) * t4265;
t3301 = (t3552 * t4128 + (t3677 - 0.1e1) * t4284) * t4292 / 0.2e1 - t3809 * t3649 * t4264 / 0.2e1 + pkin(2) * (pkin(1) * t3675 - t4265 / 0.2e1 + t3739) * t4128 + ((t3556 + t3609) * t3677 + t4309) * t3720;
t4244 = t3274 / t3301;
t4038 = t3664 * t4244;
t3860 = t4038 / 0.2e1;
t3265 = t3769 * t3860;
t4061 = t3720 * t4280;
t4062 = t3720 * t4281;
t4126 = t3722 * t3735;
t4162 = t3552 * t3734;
t4163 = t3552 * t3733;
t3283 = ((-t3722 * t4162 - t4062) * t3730 + t3731 * t4117) * t3622 + ((t3722 * t4163 - t4061) * t3730 - t3731 * t4118) * t3619 - (t3731 * t4164 + t4126) * t3732 + ((t3722 * t4061 - t4163) * t3622 + (-t3722 * t4062 - t4162) * t3619 + t3537 * t4284) * t3721;
t4035 = t3283 * t4111;
t3902 = t3664 * t4035;
t3250 = t3265 + t3902 / 0.2e1;
t4343 = -0.2e1 * t3250;
t3705 = t3735 ^ 2;
t4342 = 0.9e1 * t3765 + 0.2e1 * t3768 + (4 * t3705);
t4097 = 0.4e1 / 0.3e1 * t3705 + t3768;
t4341 = -0.9e1 * t3765 - 0.3e1 * t4097;
t4340 = -0.3e1 * t4363 - 0.3e1 * t4097;
t4334 = -g(1) / 0.4e1;
t4333 = g(1) / 0.4e1;
t4332 = -g(2) / 0.4e1;
t4331 = g(2) / 0.4e1;
t4330 = g(3) / 0.2e1;
t3530 = t3709 + t3694;
t3514 = qJ(1,2) + t3530;
t4328 = sin(t3514) / 0.4e1;
t3531 = -t3709 + t3694;
t3515 = qJ(1,2) - t3531;
t3474 = sin(t3515);
t4327 = -t3474 / 0.4e1;
t3517 = qJ(1,2) - t3530;
t3476 = sin(t3517);
t4326 = -t3476 / 0.4e1;
t3685 = qJ(2,3) + qJ(3,3);
t3526 = t3708 + t3685;
t3518 = qJ(1,3) + t3526;
t4325 = sin(t3518) / 0.4e1;
t4057 = t3708 - t3685;
t3520 = qJ(1,3) + t4057;
t3479 = sin(t3520);
t4324 = -t3479 / 0.4e1;
t3521 = qJ(1,3) - t3526;
t3480 = sin(t3521);
t4323 = -t3480 / 0.4e1;
t3703 = qJ(2,1) + qJ(3,1);
t3528 = t3710 + t3703;
t3522 = qJ(1,1) + t3528;
t4322 = sin(t3522) / 0.4e1;
t4056 = t3710 - t3703;
t3524 = qJ(1,1) + t4056;
t3483 = sin(t3524);
t4321 = -t3483 / 0.4e1;
t3525 = qJ(1,1) - t3528;
t3484 = sin(t3525);
t4320 = -t3484 / 0.4e1;
t4319 = -cos(t3515) / 0.4e1;
t3516 = qJ(1,2) + t3531;
t4318 = -cos(t3516) / 0.4e1;
t3519 = qJ(1,3) - t4057;
t4317 = -cos(t3519) / 0.4e1;
t4316 = -cos(t3520) / 0.4e1;
t3523 = qJ(1,1) - t4056;
t4315 = -cos(t3523) / 0.4e1;
t4314 = -cos(t3524) / 0.4e1;
t4313 = -sin(t4057) / 0.2e1;
t4312 = -sin(t4056) / 0.2e1;
t4311 = sin(t3531) / 0.2e1;
t4310 = t3735 / 0.2e1;
t4308 = -t3768 / 0.2e1;
t3770 = 0.1e1 / pkin(1) ^ 2;
t4307 = -t3770 / 0.4e1;
t4305 = 0.2e1 * t3669 - 0.1e1;
t4304 = 0.4e1 * t3669 - 0.2e1;
t4302 = 0.2e1 * t3673 - 0.1e1;
t4301 = 0.4e1 * t3673 - 0.2e1;
t4299 = 0.2e1 * t3677 - 0.1e1;
t4298 = 0.4e1 * t3677 - 0.2e1;
t3563 = sin(t3685);
t4297 = pkin(2) * t3563;
t3570 = sin(t3694);
t4296 = pkin(2) * t3570;
t3577 = sin(t3703);
t4295 = pkin(2) * t3577;
t4279 = pkin(2) * t3768;
t3585 = cos(t3685);
t3455 = pkin(1) * t3724 + pkin(2) * t3585;
t3422 = 0.1e1 / t3455;
t3254 = t3263 + t3904;
t3958 = -t4246 / 0.2e1;
t3865 = t3660 * t3958;
t3835 = t3715 * t3865;
t4016 = t3422 * t4217;
t3236 = -t3254 * t4297 + t3835 + t4016;
t3423 = 0.1e1 / t3455 ^ 2;
t4189 = t3423 * t3660;
t3275 = t3343 * t3563 * t3281 * t3769 * t4189;
t3713 = xDDP(1);
t4190 = t3422 * t3725;
t3994 = t3620 * t4190;
t3371 = t3713 * t3994;
t3452 = pkin(1) * t3715 + t4297;
t3793 = t3275 + t3371 + (t3263 * t3452 - t3236) * t3343 * t3423;
t3712 = xDDP(2);
t4161 = t3617 * t3725;
t3989 = t3712 * t4161;
t3711 = xDDP(3);
t4149 = t3711 * t3716;
t3802 = -t3989 - t4149;
t3230 = t3422 * t3802 + t3793;
t4278 = pkin(4) * t3230;
t3255 = t3264 + t3903;
t3956 = -t4245 / 0.2e1;
t3863 = t3662 * t3956;
t3834 = t3718 * t3863;
t4014 = t3424 * t4214;
t3237 = -t3255 * t4296 + t3834 + t4014;
t3425 = 0.1e1 / t3456 ^ 2;
t4186 = t3425 * t3662;
t3276 = t3344 * t3570 * t3282 * t3769 * t4186;
t4187 = t3424 * t3728;
t3992 = t3621 * t4187;
t3372 = t3713 * t3992;
t3454 = pkin(1) * t3718 + t4296;
t3792 = t3276 + t3372 + (t3264 * t3454 - t3237) * t3344 * t3425;
t4159 = t3618 * t3728;
t3988 = t3712 * t4159;
t4148 = t3711 * t3719;
t3801 = -t3988 - t4148;
t3231 = t3424 * t3801 + t3792;
t4277 = pkin(4) * t3231;
t3605 = cos(t3703);
t3457 = pkin(1) * t3730 + pkin(2) * t3605;
t3426 = 0.1e1 / t3457;
t3256 = t3265 + t3902;
t3954 = -t4244 / 0.2e1;
t3861 = t3664 * t3954;
t3833 = t3721 * t3861;
t4012 = t3426 * t4211;
t3238 = -t3256 * t4295 + t3833 + t4012;
t3427 = 0.1e1 / t3457 ^ 2;
t4183 = t3427 * t3664;
t3277 = t3345 * t3577 * t3283 * t3769 * t4183;
t4184 = t3426 * t3731;
t3990 = t3622 * t4184;
t3373 = t3713 * t3990;
t3453 = pkin(1) * t3721 + t4295;
t3791 = t3277 + t3373 + (t3265 * t3453 - t3238) * t3345 * t3427;
t4157 = t3619 * t3731;
t3987 = t3712 * t4157;
t4147 = t3711 * t3722;
t3800 = -t3987 - t4147;
t3232 = t3426 * t3800 + t3791;
t4276 = pkin(4) * t3232;
t4259 = -qJ(3,3) + qJ(1,3);
t3612 = -qJ(2,3) + t4259;
t3539 = sin(t3612);
t4275 = g(3) * t3539;
t4261 = -qJ(3,2) + qJ(1,2);
t3614 = -qJ(2,2) + t4261;
t3541 = sin(t3614);
t4274 = g(3) * t3541;
t4263 = -qJ(3,1) + qJ(1,1);
t3616 = -qJ(2,1) + t4263;
t3543 = sin(t3616);
t4273 = g(3) * t3543;
t4272 = g(3) * cos(t3612);
t4271 = g(3) * cos(t3614);
t4270 = g(3) * cos(t3616);
t4262 = qJ(3,1) + qJ(1,1);
t4260 = qJ(3,2) + qJ(1,2);
t4258 = qJ(3,3) + qJ(1,3);
t4257 = MDP(8) * t3769;
t4256 = -(2 * qJ(2,1)) + qJ(1,1);
t4255 = -0.2e1 * qJ(2,2) + qJ(1,2);
t4254 = -(2 * qJ(2,3)) + qJ(1,3);
t3683 = t3746 + qJ(3,3);
t3692 = t3754 + qJ(3,2);
t3700 = t3762 + qJ(3,1);
t4253 = MDP(15) * t3769;
t4252 = t3230 * t3660;
t4251 = t3231 * t3662;
t4250 = t3232 * t3664;
t4249 = (-t3563 * t4016 + t3254 * (t3632 + pkin(2))) * t3281;
t4248 = (-t3570 * t4014 + t3255 * (t3633 + pkin(2))) * t3282;
t4247 = (-t3577 * t4012 + t3256 * (t3626 + pkin(2))) * t3283;
t4243 = t3281 * t3766;
t4242 = t3282 * t3766;
t4241 = t3283 * t3766;
t3611 = qJ(2,3) + t4258;
t3538 = sin(t3611);
t3680 = t3742 + t3746;
t3686 = qJ(2,3) - qJ(3,3);
t4240 = (-(t3538 + t3539) * t4364 + (-cos(t3743 + t4254) - cos(qJ(1,3) + t3680) - 0.2e1 * t3725) * pkin(2) + (-cos(qJ(3,3) - t4254) - cos(qJ(1,3) + t3683) - cos(t4259) - cos(t4258)) * pkin(1)) / ((-sin(t3681) + t3715) * pkin(2) + (sin(t3686) - t3563) * pkin(1));
t3613 = qJ(2,2) + t4260;
t3540 = sin(t3613);
t3688 = t3750 + t3754;
t3695 = qJ(2,2) - qJ(3,2);
t4239 = (-(t3540 + t3541) * t4364 + (-cos(t3751 + t4255) - cos(qJ(1,2) + t3688) - 0.2e1 * t3728) * pkin(2) + (-cos(qJ(3,2) - t4255) - cos(qJ(1,2) + t3692) - cos(t4261) - cos(t4260)) * pkin(1)) / ((-sin(t3689) + t3718) * pkin(2) + (sin(t3695) - t3570) * pkin(1));
t3615 = qJ(2,1) + t4262;
t3542 = sin(t3615);
t3699 = t3762 + t3758;
t3704 = qJ(2,1) - qJ(3,1);
t4238 = (-(t3542 + t3543) * t4364 + (-cos(t3759 + t4256) - cos(qJ(1,1) + t3699) - 0.2e1 * t3731) * pkin(2) + (-cos(qJ(3,1) - t4256) - cos(qJ(1,1) + t3700) - cos(t4263) - cos(t4262)) * pkin(1)) / ((-sin(t3698) + t3721) * pkin(2) + (sin(t3704) - t3577) * pkin(1));
t3332 = -t3716 * t3811 - t4124;
t4071 = pkin(2) * t4144;
t4175 = t3548 * t3715;
t3392 = t4071 + t4175;
t3311 = t3332 * t3617 - t3392 * t3620;
t4237 = t3311 * t3660;
t4236 = t3311 * t3712;
t3312 = -t3332 * t3620 - t3392 * t3617;
t4235 = t3312 * t3660;
t4234 = t3312 * t3713;
t3333 = -t3719 * t3810 - t4122;
t4067 = pkin(2) * t4137;
t4170 = t3550 * t3718;
t3393 = t4067 + t4170;
t3313 = t3333 * t3618 - t3393 * t3621;
t4233 = t3313 * t3662;
t4232 = t3313 * t3712;
t3314 = -t3333 * t3621 - t3393 * t3618;
t4231 = t3314 * t3662;
t4230 = t3314 * t3713;
t3334 = -t3722 * t3809 - t4120;
t4063 = pkin(2) * t4130;
t4165 = t3552 * t3721;
t3394 = t4063 + t4165;
t3315 = t3334 * t3619 - t3394 * t3622;
t4229 = t3315 * t3664;
t4228 = t3315 * t3712;
t3316 = -t3334 * t3622 - t3394 * t3619;
t4227 = t3316 * t3664;
t4226 = t3316 * t3713;
t3335 = t3343 ^ 2;
t4222 = t3335 * t3423;
t3336 = t3344 ^ 2;
t4221 = t3336 * t3425;
t3337 = t3345 ^ 2;
t4220 = t3337 * t3427;
t4219 = t3343 * t3422;
t4216 = t3344 * t3424;
t4213 = t3345 * t3426;
t3347 = t3725 * t3811 - t4140;
t4210 = t3347 * t3660;
t4209 = t3347 * t3711;
t3348 = t3728 * t3810 - t4133;
t4208 = t3348 * t3662;
t4207 = t3348 * t3711;
t3349 = t3731 * t3809 - t4126;
t4206 = t3349 * t3664;
t4205 = t3349 * t3711;
t3389 = 0.1e1 / t3811;
t4204 = t3389 * t3660;
t3390 = 0.1e1 / t3810;
t4203 = t3390 * t3662;
t3391 = 0.1e1 / t3809;
t4202 = t3391 * t3664;
t4191 = t3422 * t3716;
t4185 = t3426 * t3722;
t3464 = -pkin(2) + t3632 + 0.2e1 * t4291;
t4182 = t3464 * t3715;
t4181 = t3464 * t3716;
t3465 = -pkin(2) + t3633 + 0.2e1 * t4290;
t4180 = t3465 * t3718;
t4179 = t3465 * t3719;
t3466 = -pkin(2) + t3626 + 0.2e1 * t4289;
t4178 = t3466 * t3721;
t4177 = t3466 * t3722;
t4176 = (pkin(1) + 0.2e1 * t4268) * t3714;
t4171 = (pkin(1) + 0.2e1 * t4267) * t3717;
t4166 = (pkin(1) + 0.2e1 * t4265) * t3720;
t3245 = t3765 * t3254;
t3246 = t3765 * t3255;
t3247 = t3765 * t3256;
t4112 = t3765 * t3769;
t4110 = t3766 * t3770;
t3684 = t3746 - qJ(3,3);
t4109 = t3768 * sin(t3684);
t3693 = t3754 - qJ(3,2);
t4108 = t3768 * sin(t3693);
t3701 = t3762 - qJ(3,1);
t4107 = t3768 * sin(t3701);
t3266 = pkin(1) * t3864;
t4106 = t3245 + t3266;
t3267 = pkin(1) * t3862;
t4105 = t3246 + t3267;
t3268 = pkin(1) * t3860;
t4104 = t3247 + t3268;
t4093 = 0.2e1 / 0.3e1 * t3765 + t3768;
t4092 = t3768 - t3765;
t4091 = 0.5e1 * pkin(1) * t3765;
t4090 = -0.9e1 * pkin(2) * (0.8e1 / 0.9e1 * t3705 + t4093);
t4089 = -0.6e1 * pkin(2) * (0.2e1 / 0.3e1 * t3705 + t4093);
t3553 = t3705 + t3765;
t4088 = t3553 * t4359;
t4087 = -0.3e1 * t4279;
t4086 = 0.3e1 * t4279;
t4083 = 0.3e1 * t3765;
t4082 = 0.2e1 * t3766;
t4081 = -0.8e1 * t4142;
t4079 = -0.8e1 * t4135;
t4077 = -0.8e1 * t4128;
t4075 = pkin(1) * t4222;
t4074 = pkin(1) * t4221;
t4073 = pkin(1) * t4220;
t4072 = pkin(2) * t4125;
t4068 = pkin(2) * t4123;
t4064 = pkin(2) * t4121;
t4060 = pkin(2) * t4109;
t4059 = pkin(2) * t4108;
t4058 = pkin(2) * t4107;
t4015 = t3765 * t4219;
t4055 = ((t3667 * t4363 + 0.2e1 * t3554 + t4092) * t3669 * t4219 - 0.2e1 * (t3254 * t4310 + t4175 * t4219) * t4071 - t3667 * t4015 - t3254 * t4141 * t4268 + t3735 * t3835 + t3553 * t4219) * t4219;
t4013 = t3765 * t4216;
t4054 = ((t3671 * t4363 + 0.2e1 * t3555 + t4092) * t3673 * t4216 - 0.2e1 * (t3255 * t4310 + t4170 * t4216) * t4067 - t3671 * t4013 - t3255 * t4134 * t4267 + t3735 * t3834 + t3553 * t4216) * t4216;
t4011 = t3765 * t4213;
t4053 = ((t3675 * t4363 + 0.2e1 * t3556 + t4092) * t3677 * t4213 - 0.2e1 * (t3256 * t4310 + t4165 * t4213) * t4063 - t3675 * t4011 - t3256 * t4127 * t4265 + t3735 * t3833 + t3553 * t4213) * t4213;
t4052 = t3230 * t4204;
t3410 = t3723 * t3724 - t4146;
t4051 = t3410 * t4252;
t3413 = t3715 * t3723 + t4144;
t4050 = t3413 * t4252;
t4049 = t3231 * t4203;
t3411 = t3726 * t3727 - t4139;
t4048 = t3411 * t4251;
t3414 = t3718 * t3726 + t4137;
t4047 = t3414 * t4251;
t4046 = t3232 * t4202;
t3412 = t3729 * t3730 - t4132;
t4045 = t3412 * t4250;
t3415 = t3721 * t3729 + t4130;
t4044 = t3415 * t4250;
t3661 = 0.1e1 / t3714 ^ 2;
t4043 = t3272 ^ 2 / t3299 ^ 2 * t3661;
t3663 = 0.1e1 / t3717 ^ 2;
t4042 = t3273 ^ 2 / t3300 ^ 2 * t3663;
t3665 = 0.1e1 / t3720 ^ 2;
t4041 = t3274 ^ 2 / t3301 ^ 2 * t3665;
t3359 = t3667 * t3623 - t4100;
t3974 = t3714 * t4143;
t3790 = pkin(1) * t3974 + (t3974 * t4346 + t4124) * t3723;
t3284 = (-t3617 * t4181 + t3620 * t4176) * t3669 + (t3617 * t3790 + t3620 * t4182) * t3724 + t3359 * t3617 - t3620 * t4072;
t4034 = t3284 * t4204;
t3285 = (t3617 * t4176 + t3620 * t4181) * t3669 + (t3617 * t4182 - t3620 * t3790) * t3724 - t3359 * t3620 - t3617 * t4072;
t4033 = t3285 * t4204;
t3360 = t3671 * t3624 - t4099;
t3970 = t3717 * t4136;
t3789 = pkin(1) * t3970 + (t3970 * t4346 + t4122) * t3726;
t3286 = (-t3618 * t4179 + t3621 * t4171) * t3673 + (t3618 * t3789 + t3621 * t4180) * t3727 + t3360 * t3618 - t3621 * t4068;
t4032 = t3286 * t4203;
t3287 = (t3618 * t4171 + t3621 * t4179) * t3673 + (t3618 * t4180 - t3621 * t3789) * t3727 - t3360 * t3621 - t3618 * t4068;
t4031 = t3287 * t4203;
t3361 = t3675 * t3625 - t4098;
t3966 = t3720 * t4129;
t3788 = pkin(1) * t3966 + (t3966 * t4346 + t4120) * t3729;
t3288 = (-t3619 * t4177 + t3622 * t4166) * t3677 + (t3619 * t3788 + t3622 * t4178) * t3730 + t3361 * t3619 - t3622 * t4064;
t4030 = t3288 * t4202;
t3289 = (t3619 * t4166 + t3622 * t4177) * t3677 + (t3619 * t4178 - t3622 * t3788) * t3730 - t3361 * t3622 - t3619 * t4064;
t4029 = t3289 * t4202;
t3302 = t4305 * t4222;
t4028 = t3302 * t4204;
t3303 = t4302 * t4221;
t4027 = t3303 * t4203;
t3304 = t4299 * t4220;
t4026 = t3304 * t4202;
t3416 = g(1) * t3617 + g(2) * t3620;
t3419 = g(1) * t3620 - g(2) * t3617;
t3928 = g(3) * t3725 + t3419 * t3716;
t3320 = -t3416 * t3724 + t3715 * t3928;
t4025 = t3320 * t4204;
t3407 = t3416 * t3715;
t3321 = t3724 * t3928 + t3407;
t4024 = t3321 * t4204;
t3418 = g(1) * t3619 + g(2) * t3622;
t3421 = g(1) * t3622 - g(2) * t3619;
t3926 = g(3) * t3731 + t3421 * t3722;
t3322 = -t3418 * t3730 + t3721 * t3926;
t4023 = t3322 * t4202;
t3409 = t3418 * t3721;
t3323 = t3730 * t3926 + t3409;
t4022 = t3323 * t4202;
t3417 = g(1) * t3618 + g(2) * t3621;
t3927 = g(3) * t3728 + t3420 * t3719;
t3324 = -t3417 * t3727 + t3718 * t3927;
t4021 = t3324 * t4203;
t3408 = t3417 * t3718;
t3325 = t3727 * t3927 + t3408;
t4020 = t3325 * t4203;
t4019 = t3335 * t4189;
t4018 = t3336 * t4186;
t4017 = t3337 * t4183;
t3374 = -g(3) * t3716 + t3419 * t3725;
t4010 = t3374 * t3422 * t3724;
t4008 = t3369 * t4187;
t3375 = -g(3) * t3722 + t3421 * t3731;
t4007 = t3375 * t3426 * t3730;
t4006 = t3374 * t4191;
t4005 = t3375 * t4185;
t3995 = t3422 * t4161;
t3993 = t3424 * t4159;
t3991 = t3426 * t4157;
t3980 = t3660 * t4112;
t3979 = t3661 * t4110;
t3978 = t3662 * t4112;
t3977 = t3663 * t4110;
t3976 = t3664 * t4112;
t3975 = t3665 * t4110;
t3959 = t3735 * t4116;
t3957 = -t4246 / 0.4e1;
t3955 = -t4245 / 0.4e1;
t3953 = -t4244 / 0.4e1;
t3952 = t4240 / 0.2e1;
t3951 = t4239 / 0.2e1;
t3950 = t4238 / 0.2e1;
t3949 = t4116 / 0.2e1;
t3948 = t4327 - cos(t3531) / 0.2e1;
t3947 = t3476 / 0.4e1 - cos(t3530) / 0.2e1;
t3946 = t4324 - cos(t4057) / 0.2e1;
t3945 = t3480 / 0.4e1 - cos(t3526) / 0.2e1;
t3944 = t4321 - cos(t4056) / 0.2e1;
t3943 = t3484 / 0.4e1 - cos(t3528) / 0.2e1;
t3488 = cos(t3517);
t3942 = -t3488 / 0.4e1 + t4319;
t3941 = t3488 / 0.4e1 + t4319;
t3492 = cos(t3521);
t3940 = -t3492 / 0.4e1 + t4316;
t3939 = t3492 / 0.4e1 + t4316;
t3496 = cos(t3525);
t3938 = -t3496 / 0.4e1 + t4314;
t3937 = t3496 / 0.4e1 + t4314;
t3936 = t4116 * t4347;
t3764 = pkin(2) * t3765;
t3935 = t3764 + t4087;
t3583 = cos(t3683);
t3608 = t4308 + t3765;
t3678 = t3740 + t3746;
t3741 = 0.3e1 * qJ(3,3);
t3679 = t3741 + t3746;
t3682 = t3743 + t3746;
t3305 = 0.1e1 / (t3608 * cos(t3680) + cos(t3682) * t4308 + cos(t3678) * t3707 + t3609 * t3653 - t3640 * t3651 + t3554 + (-cos(t3684) - cos(t3679) - cos(t3741) + 0.2e1 * t3583) * t4329 + t3640);
t3557 = sin(t3678);
t3558 = sin(t3679);
t3559 = sin(t3680);
t3560 = sin(t3682);
t3561 = sin(t3683);
t3579 = cos(t3741 + t3745);
t3582 = cos(t3745 + qJ(3,3));
t3584 = cos(qJ(2,3) + t3741);
t3586 = cos(t3686);
t3641 = -0.3e1 * t3765 + t3768;
t3642 = sin(t3741);
t3744 = 4 * qJ(2,3);
t3767 = pkin(1) * t3768;
t3781 = (t3711 * t3952 - ((t4358 * t3254 * t4363 + (t4356 * t4040 + (-(t3263 - t3904 / 0.2e1) * t3585 + (-t3579 + t3582) * t3248) * t4359) * pkin(1)) * t3735 + (sin(qJ(3,3) + t3744) * t4086 + t3714 * t4090 + t3558 * t4089 + t3561 * t4088 + t3642 * t4087 + 0.6e1 * t4060 + t3935 * sin(t3741 + t3744) - t3764 * sin(0.5e1 * qJ(3,3) + t3744) + (t3560 + sin(t3744)) * t3767 + (-t3641 * sin(t3744 + t3742) + t3644 * t4342 + t3643 * t4341 + t3559 * t4340 + (-sin(t3740 + t3744) - t3557) * t4083) * pkin(1)) * t4219 + ((pkin(2) * t3586 * t4246 - t3281 * t3584) * t3660 + t4357 * (t3266 - t3245)) * t4364) * t3305 * t4219 / 0.4e1) * t3769;
t3278 = 0.2e1 / 0.3e1 * t3904;
t3859 = t4016 * t4329;
t3907 = t3769 * t4040;
t3784 = ((-(t3266 + (0.4e1 * t4243 + 0.2e1 * t4246) * t3980) * pkin(1) * t3559 + t4106 * t3558 * t4347 + 0.4e1 * t3248 * t4060 + t3768 * t3560 * t3864 + t3765 * t3557 * t3865 + t3254 * t3561 * t3936 + (t3266 + (0.3e1 / 0.2e1 * t4246 + 0.2e1 * t4243) * t3980) * t3643 * t4349 + (t3263 + 0.4e1 / 0.5e1 * t3904) * t3644 * t4091 - t3642 * t4040 * t4329 - 0.6e1 * ((t3907 / 0.3e1 + t3278) * t3765 + t3768 * (t3263 + t3278)) * t4288 + t4358 * t3735 * t4015 + t4356 * t3768 * t4016 - 0.2e1 * (t3579 + t3585) * t3859 + 0.2e1 * (t3586 + t3582) * t3859 + t4357 * t3959 * t4219) * t3957 + 0.2e1 * ((-t4109 / 0.2e1 + t3558 * t4309 + t3561 * t3949 + t3640 * t3714 + (t3559 + t3643 - t3644) * t4329) * t3254 + ((-t3580 / 0.4e1 + t3578 / 0.4e1 + t3581 / 0.4e1 - t3724 / 0.4e1) * pkin(2) + (t3579 / 0.4e1 + t3584 / 0.4e1 - t3582 / 0.4e1 - t3585 / 0.4e1) * pkin(1)) * t4016) * t3281) * t3770 * t3305;
t3799 = (t3284 * t3712 + t3285 * t3713) * t3389;
t3191 = t3781 + (-t3769 * t3799 + t3784) * t3660;
t3224 = t3928 - t4278;
t3931 = pkin(1) * t3191 + t3224 * t3715 + (t3715 * t4075 - t3416) * t3724;
t3604 = cos(t3700);
t3696 = t3756 + t3762;
t3757 = 0.3e1 * qJ(3,1);
t3697 = t3757 + t3762;
t3702 = t3762 + t3759;
t3307 = 0.1e1 / (t3608 * cos(t3699) + cos(t3702) * t4308 + cos(t3696) * t3707 + t3609 * t3659 - t3640 * t3657 + t3556 + (-cos(t3701) - cos(t3697) - cos(t3757) + 0.2e1 * t3604) * t4329 + t3640);
t3571 = sin(t3696);
t3572 = sin(t3697);
t3573 = sin(t3699);
t3574 = sin(t3700);
t3576 = sin(t3702);
t3599 = cos(t3757 + t3761);
t3600 = cos(t3757 + qJ(2,1));
t3603 = cos(t3761 + qJ(3,1));
t3606 = cos(t3704);
t3648 = sin(t3757);
t3760 = 4 * qJ(2,1);
t3779 = (t3711 * t3950 - ((t4352 * t3256 * t4363 + (t4350 * t4038 + (-(t3265 - t3902 / 0.2e1) * t3605 + (-t3599 + t3603) * t3250) * t4359) * pkin(1)) * t3735 + (sin(t3760 + qJ(3,1)) * t4086 + t3935 * sin(t3757 + t3760) + t3720 * t4090 + t3648 * t4087 + 0.6e1 * t4058 - t3764 * sin(0.5e1 * qJ(3,1) + t3760) + t3572 * t4089 + t3574 * t4088 + (t3576 + sin(t3760)) * t3767 + (-t3641 * sin(t3760 + t3758) + t3650 * t4342 + t3649 * t4341 + t3573 * t4340 + (-sin(t3760 + t3756) - t3571) * t4083) * pkin(1)) * t4213 + ((pkin(2) * t3606 * t4244 - t3283 * t3600) * t3664 + t4351 * (t3268 - t3247)) * t4364) * t3307 * t4213 / 0.4e1) * t3769;
t3280 = 0.2e1 / 0.3e1 * t3902;
t3857 = t4012 * t4329;
t3905 = t3769 * t4038;
t3782 = ((-(t3268 + (0.4e1 * t4241 + 0.2e1 * t4244) * t3976) * pkin(1) * t3573 + t4104 * t3572 * t4347 + 0.4e1 * t3250 * t4058 + t3768 * t3576 * t3860 + t3765 * t3571 * t3861 + t3256 * t3574 * t3936 + (t3268 + (0.3e1 / 0.2e1 * t4244 + 0.2e1 * t4241) * t3976) * t3649 * t4349 + (t3265 + 0.4e1 / 0.5e1 * t3902) * t3650 * t4091 - t3648 * t4038 * t4329 - 0.6e1 * ((t3905 / 0.3e1 + t3280) * t3765 + t3768 * (t3265 + t3280)) * t4284 + t4352 * t3735 * t4011 + t4350 * t3768 * t4012 - 0.2e1 * (t3599 + t3605) * t3857 + 0.2e1 * (t3606 + t3603) * t3857 + t4351 * t3959 * t4213) * t3953 + 0.2e1 * ((-t4107 / 0.2e1 + t3572 * t4309 + t3574 * t3949 + t3640 * t3720 + (t3573 + t3649 - t3650) * t4329) * t3256 + ((-t3601 / 0.4e1 + t3598 / 0.4e1 + t3602 / 0.4e1 - t3730 / 0.4e1) * pkin(2) + (t3599 / 0.4e1 - t3603 / 0.4e1 + t3600 / 0.4e1 - t3605 / 0.4e1) * pkin(1)) * t4012) * t3283) * t3770 * t3307;
t3797 = (t3288 * t3712 + t3289 * t3713) * t3391;
t3193 = t3779 + (-t3769 * t3797 + t3782) * t3664;
t3225 = t3926 - t4276;
t3930 = pkin(1) * t3193 + t3225 * t3721 + (t3721 * t4073 - t3418) * t3730;
t3594 = cos(t3692);
t3687 = t3748 + t3754;
t3690 = t3751 + t3754;
t3749 = 0.3e1 * qJ(3,2);
t3691 = t3754 + t3749;
t3306 = 0.1e1 / (t3608 * cos(t3688) + cos(t3690) * t4308 + cos(t3687) * t3707 + t3609 * t3656 - t3640 * t3654 + t3555 + (-cos(t3693) - cos(t3691) - cos(t3749) + 0.2e1 * t3594) * t4329 + t3640);
t3564 = sin(t3687);
t3565 = sin(t3688);
t3566 = sin(t3690);
t3567 = sin(t3691);
t3568 = sin(t3692);
t3589 = cos(t3749 + qJ(2,2));
t3591 = cos(t3753 + t3749);
t3593 = cos(t3753 + qJ(3,2));
t3596 = cos(t3695);
t3645 = sin(t3749);
t3752 = 0.4e1 * qJ(2,2);
t3780 = (t3711 * t3951 - ((t4355 * t3255 * t4363 + (t4353 * t4039 + (-(t3264 - t3903 / 0.2e1) * t3595 + (-t3591 + t3593) * t3249) * t4359) * pkin(1)) * t3735 + (sin(t3752 + qJ(3,2)) * t4086 + t3935 * sin(t3752 + t3749) + t3717 * t4090 + t3567 * t4089 + t3568 * t4088 + t3645 * t4087 + 0.6e1 * t4059 - t3764 * sin(0.5e1 * qJ(3,2) + t3752) + (t3566 + sin(t3752)) * t3767 + (-t3641 * sin(t3750 + t3752) + t3647 * t4342 + t3646 * t4341 + t3565 * t4340 + (-sin(t3748 + t3752) - t3564) * t4083) * pkin(1)) * t4216 + ((pkin(2) * t3596 * t4245 - t3282 * t3589) * t3662 + t4354 * (t3267 - t3246)) * t4364) * t3306 * t4216 / 0.4e1) * t3769;
t3279 = 0.2e1 / 0.3e1 * t3903;
t3858 = t4014 * t4329;
t3906 = t3769 * t4039;
t3783 = ((t4105 * t3567 * t4347 - (t3267 + (0.4e1 * t4242 + 0.2e1 * t4245) * t3978) * pkin(1) * t3565 + 0.4e1 * t3249 * t4059 + t3768 * t3566 * t3862 + t3765 * t3564 * t3863 + t3255 * t3568 * t3936 + (t3267 + (0.3e1 / 0.2e1 * t4245 + 0.2e1 * t4242) * t3978) * t3646 * t4349 + (t3264 + 0.4e1 / 0.5e1 * t3903) * t3647 * t4091 - t3645 * t4039 * t4329 - 0.6e1 * ((t3906 / 0.3e1 + t3279) * t3765 + t3768 * (t3264 + t3279)) * t4286 + t4355 * t3735 * t4013 + t4353 * t3768 * t4014 - 0.2e1 * (t3591 + t3595) * t3858 + 0.2e1 * (t3596 + t3593) * t3858 + t4354 * t3959 * t4216) * t3955 + 0.2e1 * ((-t4108 / 0.2e1 + t3567 * t4309 + t3568 * t3949 + t3640 * t3717 + (t3565 + t3646 - t3647) * t4329) * t3255 + ((-t3592 / 0.4e1 + t3588 / 0.4e1 + t3590 / 0.4e1 - t3727 / 0.4e1) * pkin(2) + (t3591 / 0.4e1 - t3593 / 0.4e1 + t3589 / 0.4e1 - t3595 / 0.4e1) * pkin(1)) * t4014) * t3282) * t3770 * t3306;
t3798 = (t3286 * t3712 + t3287 * t3713) * t3390;
t3192 = t3780 + (-t3769 * t3798 + t3783) * t3662;
t3226 = t3927 - t4277;
t3929 = pkin(1) * t3192 + t3226 * t3718 + (t3718 * t4074 - t3417) * t3727;
t3922 = t4304 * t4125;
t3921 = t4301 * t4123;
t3920 = t4298 * t4121;
t3919 = t3389 * t4051;
t3918 = t3389 * t4050;
t3917 = t3715 * t4052;
t3916 = t3724 * t4052;
t3915 = t3390 * t4048;
t3914 = t3390 * t4047;
t3913 = t3718 * t4049;
t3912 = t3727 * t4049;
t3911 = t3391 * t4045;
t3910 = t3391 * t4044;
t3909 = t3721 * t4046;
t3908 = t3730 * t4046;
t3901 = t4222 * t4240;
t3900 = t4221 * t4239;
t3899 = t4220 * t4238;
t3338 = (t3667 - 0.1e1 / 0.2e1) * t4142 + (t3669 - 0.1e1 / 0.2e1) * t4125;
t3898 = t3338 * t4019;
t3350 = t4304 * t3667 - 0.4e1 * t3877 - t4305;
t3897 = t3350 * t4019;
t3896 = t3389 * t4019;
t3339 = (t3671 - 0.1e1 / 0.2e1) * t4135 + (t3673 - 0.1e1 / 0.2e1) * t4123;
t3895 = t3339 * t4018;
t3351 = t4301 * t3671 - 0.4e1 * t3875 - t4302;
t3894 = t3351 * t4018;
t3893 = t3390 * t4018;
t3340 = (t3675 - 0.1e1 / 0.2e1) * t4128 + (t3677 - 0.1e1 / 0.2e1) * t4121;
t3892 = t3340 * t4017;
t3352 = t4298 * t3675 - 0.4e1 * t3873 - t4299;
t3891 = t3352 * t4017;
t3890 = t3391 * t4017;
t3883 = t3725 * t4010;
t3882 = t3718 * t4008;
t3881 = t3727 * t4008;
t3880 = t3731 * t4007;
t3879 = t3374 * t3715 * t4190;
t3878 = t3375 * t3721 * t4184;
t3871 = t3230 * t3952;
t3870 = t3231 * t3951;
t3869 = t3232 * t3950;
t3868 = t4043 / 0.4e1;
t3867 = t4042 / 0.4e1;
t3866 = t4041 / 0.4e1;
t3844 = t3723 * t3904;
t3843 = t3726 * t3903;
t3842 = t3729 * t3902;
t3841 = t3350 * t3896;
t3840 = t3351 * t3893;
t3839 = t3352 * t3890;
t3832 = -t3901 / 0.2e1;
t3831 = -t3900 / 0.2e1;
t3830 = -t3899 / 0.2e1;
t3475 = sin(t3516);
t3485 = cos(t3514);
t3829 = g(1) * t4318 + g(2) * t4328 + t3475 * t4332 + t3485 * t4334 + t3540 * t4330;
t3478 = sin(t3519);
t3489 = cos(t3518);
t3828 = g(1) * t4317 + g(2) * t4325 + t3478 * t4332 + t3489 * t4334 + t3538 * t4330;
t3482 = sin(t3523);
t3493 = cos(t3522);
t3827 = g(1) * t4315 + g(2) * t4322 + t3482 * t4332 + t3493 * t4334 + t3542 * t4330;
t3826 = g(1) * t4328 + g(2) * t4318 + t3475 * t4333 + t3485 * t4331 + cos(t3613) * t4330;
t3825 = g(1) * t4325 + g(2) * t4317 + t3478 * t4333 + t3489 * t4331 + cos(t3611) * t4330;
t3824 = g(1) * t4322 + g(2) * t4315 + t3482 * t4333 + t3493 * t4331 + cos(t3615) * t4330;
t3233 = -t3422 * t3925 + (0.2e1 * t3248 * t3632 - t3413 * t4016) * pkin(2) + t4106;
t3173 = t3781 + (t3233 * t3958 - t4249) * t3979 + (t3784 + (-t3799 + (-t4055 + t4209 + t4234 + t4236) * t3766) * t3769) * t3660;
t3251 = t3254 ^ 2;
t3823 = t3173 * t3723 - t3251 * t3714;
t3234 = -t3424 * t3924 + (0.2e1 * t3249 * t3633 - t3414 * t4014) * pkin(2) + t4105;
t3174 = t3780 + (t3234 * t3956 - t4248) * t3977 + (t3783 + (-t3798 + (-t4054 + t4207 + t4230 + t4232) * t3766) * t3769) * t3662;
t3252 = t3255 ^ 2;
t3822 = t3174 * t3726 - t3252 * t3717;
t3235 = -t3426 * t3923 + (0.2e1 * t3250 * t3626 - t3415 * t4012) * pkin(2) + t4104;
t3175 = t3779 + (t3235 * t3954 - t4247) * t3975 + (t3782 + (-t3797 + (-t4053 + t4205 + t4226 + t4228) * t3766) * t3769) * t3664;
t3253 = t3256 ^ 2;
t3821 = t3175 * t3729 - t3253 * t3720;
t3814 = 0.2e1 * t3338 * t3896;
t3813 = 0.2e1 * t3339 * t3893;
t3812 = 0.2e1 * t3340 * t3890;
t3808 = t3907 * t4219;
t3807 = t3906 * t4216;
t3806 = t3905 * t4213;
t3805 = t3896 * t4142;
t3804 = t3893 * t4135;
t3803 = t3890 * t4128;
t3787 = t3224 * t3724 + t3669 * t4075 + t3769 * t3868 + t3407;
t3786 = t3225 * t3730 + t3677 * t4073 + t3769 * t3866 + t3409;
t3785 = t3226 * t3727 + t3673 * t4074 + t3769 * t3867 + t3408;
t3506 = sin(t3530);
t3504 = sin(t3528);
t3502 = sin(t3526);
t3223 = (t3232 * t3721 + t3730 * t3806) * t3721;
t3222 = (t3231 * t3718 + t3727 * t3807) * t3718;
t3221 = (t3230 * t3715 + t3724 * t3808) * t3715;
t3220 = t3232 * t4076 + t4299 * t3806;
t3219 = t3231 * t4078 + t4302 * t3807;
t3218 = t3230 * t4080 + t4305 * t3808;
t3199 = t3791 * t3677 + (-0.2e1 * t3677 * t3675 + (t3729 + 0.2e1 * t3965) * t3729) * t3232 + (t3800 * t3677 + (t4300 * t4076 + t3920) * t3345 * t3256) * t3426;
t3198 = t3792 * t3673 + (-0.2e1 * t3671 * t3673 + (t3726 + 0.2e1 * t3969) * t3726) * t3231 + (t3801 * t3673 + (t4303 * t4078 + t3921) * t3344 * t3255) * t3424;
t3197 = t3793 * t3669 + (-0.2e1 * t3667 * t3669 + (t3723 + 0.2e1 * t3973) * t3723) * t3230 + (t3802 * t3669 + (t4306 * t4080 + t3922) * t3343 * t3254) * t3422;
t3196 = (-t3675 * t3232 / 0.2e1 + t3373 / 0.4e1 + t3277 / 0.4e1 + (-t3987 / 0.4e1 - t4147 / 0.4e1) * t3426) * t4077 + t3232 * t3920 + ((-t3238 / 0.4e1 + t3453 * t3905 / 0.8e1) * t3427 * t4077 + ((0.8e1 * t3675 - 0.4e1) * t3677 - 0.8e1 * t3873 - 0.4e1 * t3675 + 0.2e1) * t3426 * t3256) * t3345;
t3195 = (-t3671 * t3231 / 0.2e1 + t3372 / 0.4e1 + t3276 / 0.4e1 + (-t3988 / 0.4e1 - t4148 / 0.4e1) * t3424) * t4079 + t3231 * t3921 + ((-t3237 / 0.4e1 + t3454 * t3906 / 0.8e1) * t3425 * t4079 + ((0.8e1 * t3671 - 0.4e1) * t3673 - 0.8e1 * t3875 - 0.4e1 * t3671 + 0.2e1) * t3424 * t3255) * t3344;
t3194 = (-t3667 * t3230 / 0.2e1 + t3371 / 0.4e1 + t3275 / 0.4e1 + (-t3989 / 0.4e1 - t4149 / 0.4e1) * t3422) * t4081 + t3230 * t3922 + ((-t3236 / 0.4e1 + t3452 * t3907 / 0.8e1) * t3423 * t4081 + ((0.8e1 * t3667 - 0.4e1) * t3669 - 0.8e1 * t3877 - 0.4e1 * t3667 + 0.2e1) * t3422 * t3254) * t3343;
t3190 = t3721 * t4041 * t4307 + t3193 * t3730;
t3189 = t3730 * t3770 * t3866 + t3193 * t3721;
t3188 = t3718 * t4042 * t4307 + t3192 * t3727;
t3187 = t3727 * t3770 * t3867 + t3192 * t3718;
t3186 = t3715 * t4043 * t4307 + t3191 * t3724;
t3185 = t3724 * t3770 * t3868 + t3191 * t3715;
t3181 = t3720 * t3786 + t3729 * t3930;
t3180 = -t3720 * t3930 + t3729 * t3786;
t3179 = t3717 * t3785 + t3726 * t3929;
t3178 = -t3717 * t3929 + t3726 * t3785;
t3177 = t3714 * t3787 + t3723 * t3931;
t3176 = -t3714 * t3931 + t3723 * t3787;
t3172 = t3779 + (t3235 * t3953 - t4247 / 0.2e1) * t3975 + (t3782 + (-t3797 + (t4226 / 0.2e1 + t4228 / 0.2e1 + t4205 / 0.2e1 - t4053 / 0.2e1) * t3766) * t3769) * t3664;
t3171 = t3780 + (t3234 * t3955 - t4248 / 0.2e1) * t3977 + (t3783 + (-t3798 + (t4230 / 0.2e1 + t4232 / 0.2e1 + t4207 / 0.2e1 - t4054 / 0.2e1) * t3766) * t3769) * t3662;
t3170 = t3781 + (t3233 * t3957 - t4249 / 0.2e1) * t3979 + (t3784 + (-t3799 + (t4234 / 0.2e1 + t4236 / 0.2e1 + t4209 / 0.2e1 - t4055 / 0.2e1) * t3766) * t3769) * t3660;
t3169 = t3175 * t3720 + t3253 * t3729;
t3168 = t3174 * t3717 + t3252 * t3726;
t3167 = t3173 * t3714 + t3251 * t3723;
t3166 = -t4273 / 0.2e1 + t3574 * t4073 - t3577 * t4276 + (-t3172 * t3729 + t3250 * t4035) * t4349 + (t3943 + t3944) * g(2) + (t4312 - t3504 / 0.2e1 - t3938) * g(1) + t3827;
t3165 = -t4275 / 0.2e1 + t3561 * t4075 - t3563 * t4278 + (-t3170 * t3723 + t3248 * t4037) * t4349 + (t3945 + t3946) * g(2) + (t4313 - t3502 / 0.2e1 - t3940) * g(1) + t3828;
t3164 = -t4274 / 0.2e1 + t3568 * t4074 - t3570 * t4277 + (-t3171 * t3726 + t3249 * t4036) * t4349 + (t3947 + t3948) * g(2) + (t4311 - t3506 / 0.2e1 - t3942) * g(1) + t3829;
t3163 = t4270 / 0.2e1 + t3604 * t4073 - t3605 * t4276 + (t3172 * t3720 + t3250 * t3842) * t4349 + (t4312 + t3504 / 0.2e1 - t3937) * g(2) + (t3943 - t3944) * g(1) + t3824;
t3162 = t4272 / 0.2e1 + t3583 * t4075 - t3585 * t4278 + (t3170 * t3714 + t3248 * t3844) * t4349 + (t4313 + t3502 / 0.2e1 - t3939) * g(2) + (t3945 - t3946) * g(1) + t3825;
t3161 = t4271 / 0.2e1 + t3594 * t4074 - t3595 * t4277 + (t3171 * t3717 + t3249 * t3843) * t4349 + (t4311 + t3506 / 0.2e1 - t3941) * g(2) + (t3947 - t3948) * g(1) + t3826;
t3160 = t4273 / 0.2e1 + (t4320 + t3483 / 0.4e1) * g(2) + t3938 * g(1) + (-t3175 * t3577 - t3253 * t3605) * pkin(4) + ((t3574 * t4343 - t4035) * t4213 + (t3604 + t3729) * t3232) * pkin(1) + t3827;
t3159 = t4275 / 0.2e1 + (t4323 + t3479 / 0.4e1) * g(2) + t3940 * g(1) + (-t3173 * t3563 - t3251 * t3585) * pkin(4) + ((t3561 * t4345 - t4037) * t4219 + (t3583 + t3723) * t3230) * pkin(1) + t3828;
t3158 = t4274 / 0.2e1 + (t4326 + t3474 / 0.4e1) * g(2) + t3942 * g(1) + (-t3174 * t3570 - t3252 * t3595) * pkin(4) + ((t3568 * t4344 - t4036) * t4216 + (t3594 + t3726) * t3231) * pkin(1) + t3829;
t3157 = -t4270 / 0.2e1 + t3937 * g(2) + (t4320 + t4321) * g(1) + (-t3175 * t3605 + t3253 * t3577) * pkin(4) + ((t3604 * t4343 - t3842) * t4213 + (-t3574 - t3720) * t3232) * pkin(1) + t3824;
t3156 = -t4272 / 0.2e1 + t3939 * g(2) + (t4323 + t4324) * g(1) + (-t3173 * t3585 + t3251 * t3563) * pkin(4) + ((t3583 * t4345 - t3844) * t4219 + (-t3561 - t3714) * t3230) * pkin(1) + t3825;
t3155 = -t4271 / 0.2e1 + t3941 * g(2) + (t4326 + t4327) * g(1) + (-t3174 * t3595 + t3252 * t3570) * pkin(4) + ((t3594 * t4344 - t3843) * t4216 + (-t3568 - t3717) * t3231) * pkin(1) + t3826;
t3154 = t3169 * t3730 + t3721 * t3821;
t3153 = t3168 * t3727 + t3718 * t3822;
t3152 = t3167 * t3724 + t3715 * t3823;
t3151 = -t3721 * t3169 + t3730 * t3821;
t3150 = -t3168 * t3718 + t3727 * t3822;
t3149 = -t3715 * t3167 + t3724 * t3823;
t1 = [(t3230 * t3994 + t3231 * t3992 + t3232 * t3990) * MDP(1) + (-t3369 * t3992 - t3374 * t3994 - t3375 * t3990) * MDP(2) + (t3926 * t3990 + t3927 * t3992 + t3928 * t3994) * MDP(3) + (t3221 * t3994 + t3222 * t3992 + t3223 * t3990 + (t3285 * t3805 + t3287 * t3804 + t3289 * t3803) * t3769) * MDP(4) + (t3218 * t3994 + t3219 * t3992 + t3220 * t3990 + (t3285 * t4028 + t3287 * t4027 + t3289 * t4026) * t3769) * MDP(5) + (t3185 * t3994 + t3187 * t3992 + t3189 * t3990 + (-t3285 * t3917 - t3287 * t3913 - t3289 * t3909) * t3769) * MDP(6) + (t3186 * t3994 + t3188 * t3992 + t3190 * t3990 + (-t3285 * t3916 - t3287 * t3912 - t3289 * t3908) * t3769) * MDP(7) + (-t3191 * t4033 - t3192 * t4031 - t3193 * t4029) * t4257 + (-t3620 * t3883 - t3621 * t3881 - t3622 * t3880 + (-t3285 * t4025 - t3287 * t4021 - t3289 * t4023) * t3769) * MDP(9) + (t3621 * t3882 + t3620 * t3879 + t3622 * t3878 + (-t3285 * t4024 - t3287 * t4020 - t3289 * t4022) * t3769) * MDP(10) + (t3197 * t3994 + t3198 * t3992 + t3199 * t3990 + (t3285 * t3814 + t3287 * t3813 + t3289 * t3812 + (-t3312 * t3898 - t3314 * t3895 - t3316 * t3892) * t4082) * t3769) * MDP(11) + (t3194 * t3994 + t3195 * t3992 + t3196 * t3990 + (t3285 * t3841 + t3287 * t3840 + t3289 * t3839 + (-t3312 * t3897 - t3314 * t3894 - t3316 * t3891) * t3766) * t3769) * MDP(12) + (t3152 * t3994 + t3153 * t3992 + t3154 * t3990 + (-t3285 * t3918 - t3287 * t3914 - t3289 * t3910 + (t3312 * t4050 + t3314 * t4047 + t3316 * t4044) * t3766) * t3769) * MDP(13) + (t3149 * t3994 + t3150 * t3992 + t3151 * t3990 + (-t3285 * t3919 - t3287 * t3915 - t3289 * t3911 + (t3312 * t4051 + t3314 * t4048 + t3316 * t4045) * t3766) * t3769) * MDP(14) + (-t3173 * t4033 - t3174 * t4031 - t3175 * t4029 + (t3173 * t4235 + t3174 * t4231 + t3175 * t4227) * t3766) * t4253 + (t3158 * t3992 + t3159 * t3994 + t3160 * t3990 + (-t3164 * t4031 - t3165 * t4033 - t3166 * t4029 + (t3177 * t4235 + t3179 * t4231 + t3181 * t4227) * t3766) * t3769) * MDP(16) + (t3155 * t3992 + t3156 * t3994 + t3157 * t3990 + (-t3161 * t4031 - t3162 * t4033 - t3163 * t4029 + (t3176 * t4235 + t3178 * t4231 + t3180 * t4227) * t3766) * t3769) * MDP(17) + (t3713 - g(1)) * MDP(18); (-t3230 * t3995 - t3231 * t3993 - t3232 * t3991) * MDP(1) + (t3369 * t3993 + t3374 * t3995 + t3375 * t3991) * MDP(2) + (-t3926 * t3991 - t3927 * t3993 - t3928 * t3995) * MDP(3) + (-t3221 * t3995 - t3222 * t3993 - t3223 * t3991 + (t3284 * t3805 + t3286 * t3804 + t3288 * t3803) * t3769) * MDP(4) + (-t3218 * t3995 - t3219 * t3993 - t3220 * t3991 + (t3284 * t4028 + t3286 * t4027 + t3288 * t4026) * t3769) * MDP(5) + (-t3185 * t3995 - t3187 * t3993 - t3189 * t3991 + (-t3284 * t3917 - t3286 * t3913 - t3288 * t3909) * t3769) * MDP(6) + (-t3186 * t3995 - t3188 * t3993 - t3190 * t3991 + (-t3284 * t3916 - t3286 * t3912 - t3288 * t3908) * t3769) * MDP(7) + (-t3191 * t4034 - t3192 * t4032 - t3193 * t4030) * t4257 + (t3617 * t3883 + t3618 * t3881 + t3619 * t3880 + (-t3284 * t4025 - t3286 * t4021 - t3288 * t4023) * t3769) * MDP(9) + (-t3618 * t3882 - t3617 * t3879 - t3619 * t3878 + (-t3284 * t4024 - t3286 * t4020 - t3288 * t4022) * t3769) * MDP(10) + (-t3197 * t3995 - t3198 * t3993 - t3199 * t3991 + (t3284 * t3814 + t3286 * t3813 + t3288 * t3812 + (-t3311 * t3898 - t3313 * t3895 - t3315 * t3892) * t4082) * t3769) * MDP(11) + (-t3194 * t3995 - t3195 * t3993 - t3196 * t3991 + (t3284 * t3841 + t3286 * t3840 + t3288 * t3839 + (-t3311 * t3897 - t3313 * t3894 - t3315 * t3891) * t3766) * t3769) * MDP(12) + (-t3152 * t3995 - t3153 * t3993 - t3154 * t3991 + (-t3284 * t3918 - t3286 * t3914 - t3288 * t3910 + (t3311 * t4050 + t3313 * t4047 + t3315 * t4044) * t3766) * t3769) * MDP(13) + (-t3149 * t3995 - t3150 * t3993 - t3151 * t3991 + (-t3284 * t3919 - t3286 * t3915 - t3288 * t3911 + (t3311 * t4051 + t3313 * t4048 + t3315 * t4045) * t3766) * t3769) * MDP(14) + (-t3173 * t4034 - t3174 * t4032 - t3175 * t4030 + (t3173 * t4237 + t3174 * t4233 + t3175 * t4229) * t3766) * t4253 + (-t3158 * t3993 - t3159 * t3995 - t3160 * t3991 + (-t3164 * t4032 - t3165 * t4034 - t3166 * t4030 + (t3177 * t4237 + t3179 * t4233 + t3181 * t4229) * t3766) * t3769) * MDP(16) + (-t3155 * t3993 - t3156 * t3995 - t3157 * t3991 + (-t3161 * t4032 - t3162 * t4034 - t3163 * t4030 + (t3176 * t4237 + t3178 * t4233 + t3180 * t4229) * t3766) * t3769) * MDP(17) + (t3712 - g(2)) * MDP(18); (-t3230 * t4191 - t3231 * t4188 - t3232 * t4185) * MDP(1) + (t4005 + t4006 + t4009) * MDP(2) + (-t3926 * t4185 - t3927 * t4188 - t3928 * t4191) * MDP(3) + (-t3221 * t4191 - t3222 * t4188 - t3223 * t4185 + (t3830 * t4128 + t3831 * t4135 + t3832 * t4142) * t3769) * MDP(4) + (-t3218 * t4191 - t3219 * t4188 - t3220 * t4185 + (-t3302 * t3952 - t3303 * t3951 - t3304 * t3950) * t3769) * MDP(5) + (-t3185 * t4191 - t3187 * t4188 - t3189 * t4185 + (t3715 * t3871 + t3718 * t3870 + t3721 * t3869) * t3769) * MDP(6) + (-t3186 * t4191 - t3188 * t4188 - t3190 * t4185 + (t3724 * t3871 + t3727 * t3870 + t3730 * t3869) * t3769) * MDP(7) + (t3191 * t3952 + t3192 * t3951 + t3193 * t3950) * t4257 + (t3716 * t4010 + t3727 * t4009 + t3722 * t4007 + (t3320 * t3952 + t3322 * t3950 + t3324 * t3951) * t3769) * MDP(9) + (-t3718 * t4009 - t3715 * t4006 - t3721 * t4005 + (t3321 * t3952 + t3323 * t3950 + t3325 * t3951) * t3769) * MDP(10) + (-t3197 * t4191 - t3198 * t4188 - t3199 * t4185 + (-t3338 * t3901 - t3339 * t3900 - t3340 * t3899 + (-t3347 * t3898 - t3348 * t3895 - t3349 * t3892) * t4082) * t3769) * MDP(11) + (-t3194 * t4191 - t3195 * t4188 - t3196 * t4185 + (t3352 * t3830 + t3351 * t3831 + t3350 * t3832 + (-t3347 * t3897 - t3348 * t3894 - t3349 * t3891) * t3766) * t3769) * MDP(12) + (-t3152 * t4191 - t3153 * t4188 - t3154 * t4185 + (t3415 * t3869 + t3414 * t3870 + t3413 * t3871 + (t3347 * t4050 + t3348 * t4047 + t3349 * t4044) * t3766) * t3769) * MDP(13) + (-t3149 * t4191 - t3150 * t4188 - t3151 * t4185 + (t3412 * t3869 + t3411 * t3870 + t3410 * t3871 + (t3347 * t4051 + t3348 * t4048 + t3349 * t4045) * t3766) * t3769) * MDP(14) + (t3175 * t3950 + t3174 * t3951 + t3173 * t3952 + (t3173 * t4210 + t3174 * t4208 + t3175 * t4206) * t3766) * t4253 + (-t3158 * t4188 - t3159 * t4191 - t3160 * t4185 + (t3166 * t3950 + t3164 * t3951 + t3165 * t3952 + (t3177 * t4210 + t3179 * t4208 + t3181 * t4206) * t3766) * t3769) * MDP(16) + (-t3155 * t4188 - t3156 * t4191 - t3157 * t4185 + (t3163 * t3950 + t3161 * t3951 + t3162 * t3952 + (t3176 * t4210 + t3178 * t4208 + t3180 * t4206) * t3766) * t3769) * MDP(17) + (t3711 - g(3)) * MDP(18);];
tauX  = t1;
