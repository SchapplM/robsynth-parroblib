% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR7V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR7V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 09:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(5,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 09:00:50
% EndTime: 2020-08-07 09:02:57
% DurationCPUTime: 132.78s
% Computational Cost: add. (1402062->1284), mult. (3654918->2188), div. (37308->31), fcn. (2279457->159), ass. (0->907)
t5411 = 0.1e1 / pkin(1);
t5362 = sin(qJ(3,1));
t5313 = 0.1e1 / t5362;
t5943 = legFrame(1,2);
t5742 = sin(t5943);
t5947 = xDP(2);
t5522 = t5742 * t5947;
t5946 = sin(qJ(1,1));
t5193 = t5946 * t5522;
t5374 = xDP(1);
t5274 = cos(t5943);
t5716 = t5274 * t5946;
t5604 = t5374 * t5716;
t5372 = cos(qJ(1,1));
t5373 = xDP(3);
t5788 = t5372 * t5373;
t5109 = t5604 / 0.2e1 - t5193 / 0.2e1 + t5788;
t5204 = t5373 * t5946;
t5432 = -t5274 * t5374 + t5522;
t6006 = t5432 * t5372;
t5122 = t5204 + t6006;
t5370 = cos(qJ(3,1));
t5902 = t5370 * pkin(2);
t5210 = pkin(1) + t5902;
t5363 = sin(qJ(2,1));
t5371 = cos(qJ(2,1));
t5800 = t5362 * t5371;
t5815 = (t5370 + 0.1e1) * (t5370 - 0.1e1);
t5133 = pkin(2) * t5363 * t5815 + t5210 * t5800;
t5171 = t5274 * t5947 + t5374 * t5742;
t5828 = t5171 * t5363;
t5145 = pkin(1) * t5828;
t5151 = pkin(2) * t5171;
t5154 = pkin(1) * t5171;
t5375 = -pkin(5) - pkin(4);
t5213 = t5946 * t5375;
t5277 = t5370 * pkin(1);
t5406 = pkin(2) ^ 2;
t5410 = pkin(1) ^ 2;
t5287 = t5406 + t5410;
t5399 = 0.2e1 * qJ(3,1);
t5296 = sin(t5399);
t5325 = t5370 ^ 2;
t5324 = t5370 * t5325;
t5327 = t5371 ^ 2;
t5326 = t5371 * t5327;
t5421 = 0.2e1 * t6006;
t5278 = t5372 * pkin(2);
t5600 = t5362 * t5213;
t5453 = t5363 * t5600 + t5278;
t5801 = t5362 * t5363;
t5478 = pkin(2) * t5801 - t5210 * t5371;
t5486 = t5213 * t5432 + t5145;
t5660 = t5362 * t6006;
t5772 = -pkin(1) * t5660 + t5151;
t5916 = pkin(2) * t5325;
t5487 = -0.2e1 * t5171 * t5916 + t5772;
t5403 = 0.2e1 * qJ(2,1);
t5306 = cos(t5403);
t5511 = t5133 * t5306 * t5204;
t5790 = t5370 * t5362;
t5648 = t5363 * t5790;
t5550 = t5371 * t5648;
t5297 = sin(t5403);
t5601 = t5297 * t5204;
t5120 = -t5193 + t5604 + t5788;
t5842 = t5120 * t5375;
t5737 = pkin(1) * t5842;
t5622 = t5363 * t5737;
t5913 = pkin(2) * t5362;
t5759 = 0.2e1 * t5913;
t5630 = t5372 * t5759;
t5787 = t5373 * t5375;
t5644 = t5372 * t5787;
t5798 = t5363 * t5372;
t5645 = t5432 * t5798;
t5786 = (pkin(1) + pkin(2)) * (pkin(1) - pkin(2));
t5743 = 0.2e1 * t5786;
t5799 = t5363 * t5371;
t5744 = 0.2e1 * t5799;
t5754 = pkin(1) * t5913;
t5768 = 0.4e1 * t5324 - 0.5e1 * t5370;
t5783 = t5406 * t5171;
t5797 = t5363 * t5375;
t5857 = (-pkin(1) * t6006 + t5171 * t5759) * t5370;
t5901 = t5371 * pkin(2);
t5304 = cos(t5399);
t5919 = pkin(2) * t5304;
t5925 = pkin(1) * t5373;
t5926 = pkin(1) * t5362;
t5929 = 0.2e1 * t5325 - 0.1e1;
t5948 = pkin(1) * pkin(2);
t5954 = 0.4e1 * t5325;
t5969 = 0.2e1 * pkin(2);
t5970 = -0.2e1 * pkin(2);
t5971 = -0.3e1 * pkin(2);
t5357 = -t5406 / 0.2e1;
t5270 = t5357 + t5410;
t6000 = -0.2e1 * t5325 * t5786 + 0.2e1 * t5270;
t6002 = 0.2e1 * t5375;
t5061 = -(t5511 + ((-t5660 * t5970 + t5154) * t5370 - t5487) * t5326 + (-t5486 * t5362 + (pkin(2) * t5929 * t6006 - t5857) * t5363) * t5327 + ((-t5154 - (t5213 * t5363 + t5630) * t5432) * t5370 + t5487) * t5371 - t5645 * t5916 + t5648 * t5151 + (pkin(2) * t5798 + t5600) * t5432) * t5919 + (t5133 * t5601 + ((t5171 * t5926 + t5857) * t5327 + (-t5363 * t5772 + t5370 * t5486) * t5371 - t5453 * t5432) * t5371 + ((t5325 * t5744 - t5790) * t5171 - (t5327 * t5929 - t5325 - 0.2e1 * t5550) * t6006) * t5901) * pkin(2) * t5296 + t5478 * pkin(1) * t5601 * t5815 - t5511 * t5277 + (-t5370 * t5660 * t5743 + t5171 * t6000 + (-(t5954 - 0.3e1) * t5660 - t5768 * t5171) * t5948) * t5326 + ((((t5145 - t5644) * t5954 - 0.3e1 * t5145 + t5109 * t6002) * t5362 - t5768 * pkin(1) * t5645) * pkin(2) + 0.2e1 * (t5786 * t5828 - t5737) * t5790 + t5645 * t6000) * t5327 + ((-0.2e1 * t5363 * t5644 + t5154) * t5324 * t5969 + (-(t5204 - t5421) * t5754 - 0.2e1 * t5622 - 0.2e1 * t5783) * t5325 + ((-t5204 * t5287 - t5406 * t5421) * t5362 + (-0.4e1 / 0.3e1 * (t5604 / 0.4e1 - t5193 / 0.4e1 + t5788) * t5797 + t5154) * t5971) * t5370 - (t5204 + 0.3e1 * t6006) * t5754 + 0.2e1 * t5622 + t5783) * t5371 - pkin(2) * ((-t5325 * t5788 + t5109) * t5362 * t6002 + ((t5122 * t5325 - t5171 * t5790 - t5122) * pkin(2) + (t5324 - t5370) * t5925 * t5946) * t5363);
t5215 = pkin(1) * t5902;
t5380 = -0.3e1 / 0.2e1 * pkin(1);
t5936 = t5406 / 0.2e1;
t5082 = (t5210 * t5799 + (t5327 - 0.1e1) * t5913) * t5919 / 0.2e1 - t5478 * t5296 * t5901 / 0.2e1 + pkin(2) * (pkin(1) * t5325 - t5902 / 0.2e1 + t5380) * t5799 + ((t5215 + t5270) * t5327 + t5936) * t5362;
t5875 = t5061 / t5082;
t5695 = t5313 * t5875;
t5541 = t5695 / 0.2e1;
t5052 = t5411 * t5541;
t5127 = t5372 * t5375 - t5478 * t5946;
t5734 = pkin(2) * t5800;
t5160 = t5210 * t5363 + t5734;
t5462 = t5372 * t5478 + t5213;
t5067 = (-t5160 * t5947 + t5374 * t5462) * t5274 + (-t5160 * t5374 - t5462 * t5947) * t5742 + t5373 * t5127;
t5407 = 0.1e1 / pkin(2);
t5781 = t5407 * t5411;
t5574 = t5067 * t5313 * t5781;
t5040 = t5052 + t5574;
t5031 = t5406 * t5040;
t5034 = t5052 + t5574 / 0.2e1;
t5055 = pkin(1) * t5541;
t5064 = 0.2e1 / 0.3e1 * t5574;
t5397 = 0.4e1 * qJ(3,1);
t5346 = t5397 + t5403;
t5235 = sin(t5346);
t5398 = 0.3e1 * qJ(3,1);
t5347 = t5398 + t5403;
t5236 = sin(t5347);
t5350 = t5403 + t5399;
t5238 = sin(t5350);
t5351 = t5403 + qJ(3,1);
t5239 = sin(t5351);
t5400 = -0.2e1 * qJ(3,1);
t5352 = t5403 + t5400;
t5240 = sin(t5352);
t5402 = 0.3e1 * qJ(2,1);
t5260 = cos(t5397 + t5402);
t5261 = cos(t5398 + qJ(2,1));
t5348 = t5399 + qJ(2,1);
t5262 = cos(t5348);
t5263 = cos(t5402 + t5398);
t5264 = cos(t5402 + t5399);
t5265 = cos(t5402 + qJ(3,1));
t5353 = qJ(2,1) + qJ(3,1);
t5266 = cos(t5353);
t5354 = qJ(2,1) - qJ(3,1);
t5267 = cos(t5354);
t5935 = -t5410 / 0.2e1;
t5269 = t5935 + t5406;
t5288 = -0.3e1 * t5406 + t5410;
t5295 = sin(t5398);
t5349 = -qJ(3,1) + t5403;
t5401 = 0.4e1 * qJ(2,1);
t5405 = pkin(2) * t5406;
t5409 = pkin(1) * t5410;
t5412 = 0.1e1 / pkin(1) ^ 2;
t5190 = pkin(1) * t5371 + pkin(2) * t5266;
t5186 = 0.1e1 / t5190;
t5667 = t5186 * t5842;
t5535 = t5667 * t5948;
t5638 = -t5875 / 0.2e1;
t5542 = t5313 * t5638;
t5912 = pkin(2) * t5410;
t5757 = 0.3e1 * t5912;
t5628 = -t5405 + t5757;
t5629 = t5786 * t5970;
t5633 = t5786 / 0.2e1;
t5637 = -t5875 / 0.4e1;
t5643 = t5375 * t5786;
t5782 = t5406 * t5411;
t5651 = t5313 * t5782;
t5844 = t5120 * t5186;
t5665 = t5411 * t5844;
t5666 = t5406 * t5844;
t5778 = t5410 * sin(t5349);
t5725 = pkin(2) * t5778;
t5751 = 0.3e1 * t5406;
t5758 = -0.3e1 * t5912;
t5355 = t5375 ^ 2;
t5214 = t5355 + t5406;
t5762 = -0.4e1 * pkin(2) * t5214;
t5767 = 0.2e1 / 0.3e1 * t5406 + t5410;
t5763 = 0.6e1 * pkin(2) * (0.2e1 / 0.3e1 * t5355 + t5767);
t5764 = 0.9e1 * pkin(2) * (0.8e1 / 0.9e1 * t5355 + t5767);
t5765 = 0.5e1 * pkin(1) * t5406;
t5775 = t5031 + t5055;
t5872 = t5067 * t5407;
t5933 = t5411 / 0.3e1;
t5938 = -t5371 / 0.4e1;
t5771 = 0.4e1 / 0.3e1 * t5355 + t5410;
t6001 = 0.2e1 * t5406;
t5959 = 0.3e1 * t6001 + 0.3e1 * t5771;
t5960 = 0.9e1 * t5406 + 0.3e1 * t5771;
t5961 = -0.9e1 * t5406 - 0.2e1 * t5410 - 0.4e1 * t5355;
t5968 = 0.4e1 * t5034;
t5972 = -0.2e1 * pkin(1);
t5973 = cos(qJ(2,1) + t5400) + cos(t5402);
t5974 = t5264 + t5371;
t5975 = t5260 + t5262;
t5994 = 0.4e1 * pkin(2);
t4984 = (((t5975 * t5040 * t6001 + (-t5973 * t5695 + ((t5052 - t5574 / 0.2e1) * t5266 + (t5263 - t5265) * t5034) * t5994) * pkin(1)) * t5375 + (t5295 * t5757 - 0.6e1 * t5725 + t5362 * t5764 + t5628 * sin(t5401 + t5398) + sin(qJ(3,1) + t5401) * t5758 + t5236 * t5763 + t5239 * t5762 + t5405 * sin(t5401 + 0.5e1 * qJ(3,1)) + (-t5240 - sin(t5401)) * t5409 + (t5288 * sin(t5401 + t5399) + t5297 * t5961 + t5296 * t5960 + t5238 * t5959 + (sin(t5401 + t5397) + t5235) * t5751) * pkin(1)) * t5844 + ((-pkin(2) * t5267 * t5875 + t5067 * t5261) * t5313 + t5974 * (t5055 - t5031)) * t6002) * t5665 / 0.4e1 + ((-(t5055 + (0.4e1 * t5872 + 0.2e1 * t5875) * t5651) * pkin(1) * t5238 + t5775 * t5236 * t5970 + t5725 * t5968 + t5410 * t5240 * t5541 + t5406 * t5235 * t5542 + t5040 * t5239 * t5629 + (t5055 + (0.3e1 / 0.2e1 * t5875 + 0.2e1 * t5872) * t5651) * t5296 * t5972 + (t5052 + 0.4e1 / 0.5e1 * t5574) * t5297 * t5765 - t5295 * t5695 * t5948 - 0.6e1 * ((t5695 * t5933 + t5064) * t5406 + t5410 * (t5052 + t5064)) * t5913 - t5975 * t5375 * t5666 + t5973 * t5410 * t5667 - 0.2e1 * (t5263 + t5266) * t5535 + 0.2e1 * (t5267 + t5265) * t5535 - t5974 * t5643 * t5844) * t5637 + 0.2e1 * ((-t5778 / 0.2e1 + t5236 * t5936 + t5239 * t5633 + t5287 * t5362 + (t5238 + t5296 - t5297) * t5948) * t5040 + ((-t5264 / 0.4e1 + t5260 / 0.4e1 + t5262 / 0.4e1 + t5938) * pkin(2) + (t5263 / 0.4e1 - t5265 / 0.4e1 + t5261 / 0.4e1 - t5266 / 0.4e1) * pkin(1)) * t5667) * t5067) * t5313 * t5412) / (t5269 * cos(t5350) + cos(t5352) * t5935 + cos(t5346) * t5357 + t5270 * t5306 - t5287 * t5304 + t5215 + (-cos(t5349) - cos(t5347) + 0.2e1 * cos(t5351) - cos(t5398)) * t5948 + t5287);
t5181 = t5363 * t5370 + t5800;
t5668 = t5363 * t5844;
t5613 = pkin(1) * t5668;
t5010 = -t5375 * t5613 + (0.2e1 * t5034 * t5277 - t5181 * t5667) * pkin(2) + t5775;
t5669 = t5327 * t5844;
t5766 = t5410 - t5406;
t5937 = -t5375 / 0.2e1;
t5505 = (-(t5325 * t6001 + 0.2e1 * t5215 + t5766) * t5669 - 0.2e1 * (t5040 * t5937 - t5210 * t5668) * t5734 + t5325 * t5666 - t5214 * t5844 + (t5040 * t5902 + t5541) * t5797) * t5313 * t5665;
t5314 = 0.1e1 / t5362 ^ 2;
t5812 = t5314 * t5412;
t5241 = sin(t5353);
t5878 = (-t5241 * t5667 + t5040 * (t5277 + pkin(2))) * t5067;
t4972 = (t5505 + (t5010 * t5638 - t5878) * t5812) * t5407 + t4984;
t5037 = t5040 ^ 2;
t5187 = 0.1e1 / t5190 ^ 2;
t5843 = t5120 * t5187;
t5922 = pkin(2) * t5241;
t5934 = -t5411 / 0.2e1;
t5007 = (-t5040 * t5922 + t5667 + (-t5241 * t5067 * t5411 + (-t5363 / 0.2e1 + (pkin(1) * t5363 + t5922) * t5934) * t5875) * t5313) * t5843;
t5881 = t5007 * t5363;
t5909 = pkin(4) * t5363;
t5950 = pkin(4) / 0.2e1;
t6011 = pkin(1) * t5669 * t5968 + t5037 * t5909 + 0.2e1 * t5542 * t5844 - 0.2e1 * (pkin(1) * t5881 + t4972 * t5950) * t5371;
t5360 = sin(qJ(3,2));
t5310 = 0.1e1 / t5360;
t5942 = legFrame(2,2);
t5741 = sin(t5942);
t5521 = t5741 * t5947;
t5945 = sin(qJ(1,2));
t5192 = t5945 * t5521;
t5273 = cos(t5942);
t5717 = t5273 * t5945;
t5605 = t5374 * t5717;
t5369 = cos(qJ(1,2));
t5791 = t5369 * t5373;
t5108 = t5605 / 0.2e1 - t5192 / 0.2e1 + t5791;
t5203 = t5373 * t5945;
t5431 = -t5273 * t5374 + t5521;
t6007 = t5431 * t5369;
t5124 = t5203 + t6007;
t5367 = cos(qJ(3,2));
t5904 = t5367 * pkin(2);
t5208 = pkin(1) + t5904;
t5361 = sin(qJ(2,2));
t5368 = cos(qJ(2,2));
t5805 = t5360 * t5368;
t5816 = (t5367 + 0.1e1) * (t5367 - 0.1e1);
t5132 = pkin(2) * t5361 * t5816 + t5208 * t5805;
t5169 = t5273 * t5947 + t5374 * t5741;
t5830 = t5169 * t5361;
t5144 = pkin(1) * t5830;
t5150 = pkin(2) * t5169;
t5153 = pkin(1) * t5169;
t5212 = t5945 * t5375;
t5280 = pkin(1) * t5367;
t5391 = 0.2e1 * qJ(3,2);
t5293 = sin(t5391);
t5321 = t5367 ^ 2;
t5320 = t5367 * t5321;
t5323 = t5368 ^ 2;
t5322 = t5368 * t5323;
t5422 = 0.2e1 * t6007;
t5276 = t5369 * pkin(2);
t5599 = t5360 * t5212;
t5452 = t5361 * t5599 + t5276;
t5806 = t5360 * t5361;
t5479 = pkin(2) * t5806 - t5208 * t5368;
t5485 = t5212 * t5431 + t5144;
t5662 = t5360 * t6007;
t5773 = -pkin(1) * t5662 + t5150;
t5917 = pkin(2) * t5321;
t5488 = -0.2e1 * t5169 * t5917 + t5773;
t5395 = 0.2e1 * qJ(2,2);
t5303 = cos(t5395);
t5512 = t5132 * t5303 * t5203;
t5793 = t5367 * t5360;
t5649 = t5361 * t5793;
t5551 = t5368 * t5649;
t5294 = sin(t5395);
t5602 = t5294 * t5203;
t5118 = -t5192 + t5605 + t5791;
t5845 = t5118 * t5375;
t5738 = pkin(1) * t5845;
t5623 = t5361 * t5738;
t5914 = pkin(2) * t5360;
t5760 = 0.2e1 * t5914;
t5631 = t5369 * t5760;
t5646 = t5369 * t5787;
t5803 = t5361 * t5369;
t5661 = t5431 * t5803;
t5804 = t5361 * t5368;
t5745 = 0.2e1 * t5804;
t5755 = pkin(1) * t5914;
t5769 = 0.4e1 * t5320 - 0.5e1 * t5367;
t5784 = t5406 * t5169;
t5802 = t5361 * t5375;
t5858 = (-pkin(1) * t6007 + t5169 * t5760) * t5367;
t5903 = t5368 * pkin(2);
t5301 = cos(t5391);
t5920 = pkin(2) * t5301;
t5927 = pkin(1) * t5360;
t5930 = 0.2e1 * t5321 - 0.1e1;
t5956 = 0.4e1 * t5321;
t5999 = -0.2e1 * t5321 * t5786 + 0.2e1 * t5270;
t5060 = -(t5512 + ((-t5662 * t5970 + t5153) * t5367 - t5488) * t5322 + (-t5485 * t5360 + (pkin(2) * t5930 * t6007 - t5858) * t5361) * t5323 + ((-t5153 - (t5212 * t5361 + t5631) * t5431) * t5367 + t5488) * t5368 - t5661 * t5917 + t5649 * t5150 + (pkin(2) * t5803 + t5599) * t5431) * t5920 + (t5132 * t5602 + ((t5169 * t5927 + t5858) * t5323 + (-t5361 * t5773 + t5367 * t5485) * t5368 - t5452 * t5431) * t5368 + ((t5321 * t5745 - t5793) * t5169 - (t5323 * t5930 - t5321 - 0.2e1 * t5551) * t6007) * t5903) * pkin(2) * t5293 + t5479 * pkin(1) * t5602 * t5816 - t5512 * t5280 + (-t5367 * t5662 * t5743 + t5169 * t5999 + (-(t5956 - 0.3e1) * t5662 - t5769 * t5169) * t5948) * t5322 + ((((t5144 - t5646) * t5956 - 0.3e1 * t5144 + t5108 * t6002) * t5360 - t5769 * pkin(1) * t5661) * pkin(2) + 0.2e1 * (t5786 * t5830 - t5738) * t5793 + t5661 * t5999) * t5323 + ((-0.2e1 * t5361 * t5646 + t5153) * t5320 * t5969 + (-(t5203 - t5422) * t5755 - 0.2e1 * t5623 - 0.2e1 * t5784) * t5321 + ((-t5203 * t5287 - t5406 * t5422) * t5360 + (-0.4e1 / 0.3e1 * (t5605 / 0.4e1 - t5192 / 0.4e1 + t5791) * t5802 + t5153) * t5971) * t5367 - (t5203 + 0.3e1 * t6007) * t5755 + 0.2e1 * t5623 + t5784) * t5368 - pkin(2) * ((-t5321 * t5791 + t5108) * t5360 * t6002 + ((t5124 * t5321 - t5169 * t5793 - t5124) * pkin(2) + (t5320 - t5367) * t5925 * t5945) * t5361);
t5217 = pkin(1) * t5904;
t5081 = (t5208 * t5804 + (t5323 - 0.1e1) * t5914) * t5920 / 0.2e1 - t5479 * t5293 * t5903 / 0.2e1 + pkin(2) * (t5321 * pkin(1) - t5904 / 0.2e1 + t5380) * t5804 + ((t5217 + t5270) * t5323 + t5936) * t5360;
t5876 = t5060 / t5081;
t5696 = t5310 * t5876;
t5543 = t5696 / 0.2e1;
t5051 = t5411 * t5543;
t5126 = t5369 * t5375 - t5479 * t5945;
t5735 = pkin(2) * t5805;
t5159 = t5208 * t5361 + t5735;
t5461 = t5369 * t5479 + t5212;
t5066 = (-t5159 * t5947 + t5374 * t5461) * t5273 + (-t5159 * t5374 - t5461 * t5947) * t5741 + t5373 * t5126;
t5575 = t5066 * t5310 * t5781;
t5039 = t5051 + t5575;
t5030 = t5406 * t5039;
t5033 = t5051 + t5575 / 0.2e1;
t5054 = pkin(1) * t5543;
t5063 = 0.2e1 / 0.3e1 * t5575;
t5337 = t5391 + t5395;
t5228 = sin(t5337);
t5392 = -0.2e1 * qJ(3,2);
t5340 = t5392 + t5395;
t5230 = sin(t5340);
t5389 = 0.4e1 * qJ(3,2);
t5341 = t5395 + t5389;
t5231 = sin(t5341);
t5390 = 0.3e1 * qJ(3,2);
t5342 = t5395 + t5390;
t5232 = sin(t5342);
t5343 = t5395 + qJ(3,2);
t5233 = sin(t5343);
t5394 = 0.3e1 * qJ(2,2);
t5251 = cos(t5389 + t5394);
t5252 = cos(t5390 + t5394);
t5253 = cos(t5390 + qJ(2,2));
t5254 = cos(t5391 + t5394);
t5338 = t5391 + qJ(2,2);
t5255 = cos(t5338);
t5256 = cos(t5394 + qJ(3,2));
t5344 = qJ(2,2) + qJ(3,2);
t5257 = cos(t5344);
t5345 = qJ(2,2) - qJ(3,2);
t5258 = cos(t5345);
t5292 = sin(t5390);
t5339 = -qJ(3,2) + t5395;
t5393 = 0.4e1 * qJ(2,2);
t5189 = pkin(1) * t5368 + pkin(2) * t5257;
t5184 = 0.1e1 / t5189;
t5672 = t5184 * t5845;
t5536 = t5672 * t5948;
t5640 = -t5876 / 0.2e1;
t5544 = t5310 * t5640;
t5639 = -t5876 / 0.4e1;
t5652 = t5310 * t5782;
t5847 = t5118 * t5184;
t5670 = t5411 * t5847;
t5671 = t5406 * t5847;
t5779 = t5410 * sin(t5339);
t5726 = pkin(2) * t5779;
t5776 = t5030 + t5054;
t5873 = t5066 * t5407;
t5939 = -t5368 / 0.4e1;
t5976 = cos(qJ(2,2) + t5392) + cos(t5394);
t5977 = t5254 + t5368;
t5978 = t5251 + t5255;
t4986 = (((t5978 * t5039 * t6001 + (-t5976 * t5696 + ((t5051 - t5575 / 0.2e1) * t5257 + (t5252 - t5256) * t5033) * t5994) * pkin(1)) * t5375 + (t5628 * sin(t5390 + t5393) + sin(t5393 + qJ(3,2)) * t5758 + t5360 * t5764 - 0.6e1 * t5726 + t5292 * t5757 + t5232 * t5763 + t5233 * t5762 + t5405 * sin(t5393 + 0.5e1 * qJ(3,2)) + (-t5230 - sin(t5393)) * t5409 + (t5288 * sin(t5393 + t5391) + t5294 * t5961 + t5293 * t5960 + t5228 * t5959 + (sin(t5389 + t5393) + t5231) * t5751) * pkin(1)) * t5847 + ((-pkin(2) * t5258 * t5876 + t5066 * t5253) * t5310 + t5977 * (t5054 - t5030)) * t6002) * t5670 / 0.4e1 + ((t5776 * t5232 * t5970 - (t5054 + (0.4e1 * t5873 + 0.2e1 * t5876) * t5652) * pkin(1) * t5228 + 0.4e1 * t5033 * t5726 + t5406 * t5231 * t5544 + t5410 * t5230 * t5543 + t5039 * t5233 * t5629 + (t5054 + (0.3e1 / 0.2e1 * t5876 + 0.2e1 * t5873) * t5652) * t5293 * t5972 + (t5051 + 0.4e1 / 0.5e1 * t5575) * t5294 * t5765 - t5292 * t5696 * t5948 - 0.6e1 * ((t5696 * t5933 + t5063) * t5406 + t5410 * (t5051 + t5063)) * t5914 - t5978 * t5375 * t5671 + t5976 * t5410 * t5672 - 0.2e1 * (t5252 + t5257) * t5536 + 0.2e1 * (t5258 + t5256) * t5536 - t5977 * t5643 * t5847) * t5639 + 0.2e1 * ((t5232 * t5936 - t5779 / 0.2e1 + t5233 * t5633 + t5287 * t5360 + (t5228 + t5293 - t5294) * t5948) * t5039 + ((-t5254 / 0.4e1 + t5251 / 0.4e1 + t5255 / 0.4e1 + t5939) * pkin(2) + (t5252 / 0.4e1 - t5256 / 0.4e1 + t5253 / 0.4e1 - t5257 / 0.4e1) * pkin(1)) * t5672) * t5066) * t5310 * t5412) / (t5269 * cos(t5337) + cos(t5341) * t5357 + cos(t5340) * t5935 + t5270 * t5303 - t5287 * t5301 + t5217 + (-cos(t5342) - cos(t5339) + 0.2e1 * cos(t5343) - cos(t5390)) * t5948 + t5287);
t5180 = t5361 * t5367 + t5805;
t5673 = t5361 * t5847;
t5614 = pkin(1) * t5673;
t5907 = t5033 * pkin(1);
t5009 = -t5375 * t5614 + (-t5180 * t5672 + 0.2e1 * t5367 * t5907) * pkin(2) + t5776;
t5674 = t5323 * t5847;
t5506 = (-(t5321 * t6001 + 0.2e1 * t5217 + t5766) * t5674 - 0.2e1 * (t5039 * t5937 - t5208 * t5673) * t5735 + t5321 * t5671 - t5214 * t5847 + (t5039 * t5904 + t5543) * t5802) * t5310 * t5670;
t5311 = 0.1e1 / t5360 ^ 2;
t5813 = t5311 * t5412;
t5234 = sin(t5344);
t5879 = (-t5234 * t5672 + t5039 * (t5280 + pkin(2))) * t5066;
t4974 = (t5506 + (t5009 * t5640 - t5879) * t5813) * t5407 + t4986;
t5036 = t5039 ^ 2;
t5185 = 0.1e1 / t5189 ^ 2;
t5846 = t5118 * t5185;
t5923 = pkin(2) * t5234;
t5006 = (-t5039 * t5923 + t5672 + (-t5234 * t5066 * t5411 + (-t5361 / 0.2e1 + (pkin(1) * t5361 + t5923) * t5934) * t5876) * t5310) * t5846;
t5884 = t5006 * t5361;
t5910 = pkin(4) * t5361;
t6010 = t5036 * t5910 + 0.2e1 * t5544 * t5847 + 0.4e1 * t5674 * t5907 - 0.2e1 * (pkin(1) * t5884 + t4974 * t5950) * t5368;
t5358 = sin(qJ(3,3));
t5307 = 0.1e1 / t5358;
t5941 = legFrame(3,2);
t5740 = sin(t5941);
t5520 = t5740 * t5947;
t5944 = sin(qJ(1,3));
t5191 = t5944 * t5520;
t5272 = cos(t5941);
t5718 = t5272 * t5944;
t5606 = t5374 * t5718;
t5366 = cos(qJ(1,3));
t5794 = t5366 * t5373;
t5107 = t5606 / 0.2e1 - t5191 / 0.2e1 + t5794;
t5202 = t5373 * t5944;
t5430 = -t5272 * t5374 + t5520;
t6008 = t5430 * t5366;
t5123 = t5202 + t6008;
t5364 = cos(qJ(3,3));
t5906 = t5364 * pkin(2);
t5206 = pkin(1) + t5906;
t5359 = sin(qJ(2,3));
t5365 = cos(qJ(2,3));
t5810 = t5358 * t5365;
t5817 = (t5364 + 0.1e1) * (t5364 - 0.1e1);
t5131 = pkin(2) * t5359 * t5817 + t5206 * t5810;
t5167 = t5272 * t5947 + t5374 * t5740;
t5832 = t5167 * t5359;
t5143 = pkin(1) * t5832;
t5149 = pkin(2) * t5167;
t5152 = pkin(1) * t5167;
t5211 = t5944 * t5375;
t5279 = pkin(1) * t5364;
t5383 = 0.2e1 * qJ(3,3);
t5290 = sin(t5383);
t5317 = t5364 ^ 2;
t5316 = t5364 * t5317;
t5319 = t5365 ^ 2;
t5318 = t5365 * t5319;
t5423 = 0.2e1 * t6008;
t5275 = t5366 * pkin(2);
t5598 = t5358 * t5211;
t5451 = t5359 * t5598 + t5275;
t5811 = t5358 * t5359;
t5480 = pkin(2) * t5811 - t5206 * t5365;
t5484 = t5211 * t5430 + t5143;
t5664 = t5358 * t6008;
t5774 = -pkin(1) * t5664 + t5149;
t5918 = pkin(2) * t5317;
t5489 = -0.2e1 * t5167 * t5918 + t5774;
t5387 = 0.2e1 * qJ(2,3);
t5300 = cos(t5387);
t5513 = t5131 * t5300 * t5202;
t5796 = t5364 * t5358;
t5650 = t5359 * t5796;
t5552 = t5365 * t5650;
t5291 = sin(t5387);
t5603 = t5291 * t5202;
t5116 = -t5191 + t5606 + t5794;
t5848 = t5116 * t5375;
t5739 = pkin(1) * t5848;
t5624 = t5359 * t5739;
t5915 = pkin(2) * t5358;
t5761 = 0.2e1 * t5915;
t5632 = t5366 * t5761;
t5647 = t5366 * t5787;
t5808 = t5359 * t5366;
t5663 = t5430 * t5808;
t5809 = t5359 * t5365;
t5746 = 0.2e1 * t5809;
t5756 = pkin(1) * t5915;
t5770 = 0.4e1 * t5316 - 0.5e1 * t5364;
t5785 = t5406 * t5167;
t5807 = t5359 * t5375;
t5859 = (-pkin(1) * t6008 + t5167 * t5761) * t5364;
t5905 = t5365 * pkin(2);
t5298 = cos(t5383);
t5921 = pkin(2) * t5298;
t5928 = pkin(1) * t5358;
t5931 = 0.2e1 * t5317 - 0.1e1;
t5958 = 0.4e1 * t5317;
t5998 = -0.2e1 * t5317 * t5786 + 0.2e1 * t5270;
t5059 = -(t5513 + ((-t5664 * t5970 + t5152) * t5364 - t5489) * t5318 + (-t5484 * t5358 + (pkin(2) * t5931 * t6008 - t5859) * t5359) * t5319 + ((-t5152 - (t5211 * t5359 + t5632) * t5430) * t5364 + t5489) * t5365 - t5663 * t5918 + t5650 * t5149 + (pkin(2) * t5808 + t5598) * t5430) * t5921 + pkin(2) * (t5131 * t5603 + ((t5167 * t5928 + t5859) * t5319 + (-t5359 * t5774 + t5364 * t5484) * t5365 - t5451 * t5430) * t5365 + ((t5317 * t5746 - t5796) * t5167 - (t5319 * t5931 - t5317 - 0.2e1 * t5552) * t6008) * t5905) * t5290 + t5480 * pkin(1) * t5603 * t5817 - t5513 * t5279 + (-t5364 * t5664 * t5743 + t5167 * t5998 + (-(t5958 - 0.3e1) * t5664 - t5770 * t5167) * t5948) * t5318 + ((((t5143 - t5647) * t5958 - 0.3e1 * t5143 + t5107 * t6002) * t5358 - t5770 * pkin(1) * t5663) * pkin(2) + 0.2e1 * (t5786 * t5832 - t5739) * t5796 + t5663 * t5998) * t5319 + ((-0.2e1 * t5359 * t5647 + t5152) * t5316 * t5969 + (-(t5202 - t5423) * t5756 - 0.2e1 * t5624 - 0.2e1 * t5785) * t5317 + ((-t5202 * t5287 - t5406 * t5423) * t5358 + (-0.4e1 / 0.3e1 * (t5606 / 0.4e1 - t5191 / 0.4e1 + t5794) * t5807 + t5152) * t5971) * t5364 - (t5202 + 0.3e1 * t6008) * t5756 + 0.2e1 * t5624 + t5785) * t5365 - pkin(2) * ((-t5317 * t5794 + t5107) * t5358 * t6002 + ((t5123 * t5317 - t5167 * t5796 - t5123) * pkin(2) + (t5316 - t5364) * t5925 * t5944) * t5359);
t5216 = pkin(1) * t5906;
t5080 = (t5206 * t5809 + (t5319 - 0.1e1) * t5915) * t5921 / 0.2e1 - t5480 * t5290 * t5905 / 0.2e1 + pkin(2) * (pkin(1) * t5317 - t5906 / 0.2e1 + t5380) * t5809 + ((t5216 + t5270) * t5319 + t5936) * t5358;
t5877 = t5059 / t5080;
t5697 = t5307 * t5877;
t5545 = t5697 / 0.2e1;
t5050 = t5411 * t5545;
t5125 = t5366 * t5375 - t5480 * t5944;
t5736 = pkin(2) * t5810;
t5158 = t5206 * t5359 + t5736;
t5460 = t5366 * t5480 + t5211;
t5065 = (-t5158 * t5947 + t5374 * t5460) * t5272 + (-t5158 * t5374 - t5460 * t5947) * t5740 + t5373 * t5125;
t5576 = t5065 * t5307 * t5781;
t5038 = t5050 + t5576;
t5029 = t5406 * t5038;
t5032 = t5050 + t5576 / 0.2e1;
t5053 = pkin(1) * t5545;
t5062 = 0.2e1 / 0.3e1 * t5576;
t5381 = 0.4e1 * qJ(3,3);
t5330 = t5387 + t5381;
t5222 = sin(t5330);
t5382 = 0.3e1 * qJ(3,3);
t5331 = t5387 + t5382;
t5223 = sin(t5331);
t5332 = t5387 + t5383;
t5224 = sin(t5332);
t5333 = t5387 + qJ(3,3);
t5225 = sin(t5333);
t5384 = -0.2e1 * qJ(3,3);
t5334 = t5387 + t5384;
t5226 = sin(t5334);
t5386 = 0.3e1 * qJ(2,3);
t5242 = cos(t5381 + t5386);
t5243 = cos(t5382 + qJ(2,3));
t5328 = t5383 + qJ(2,3);
t5244 = cos(t5328);
t5245 = cos(t5386 + t5382);
t5246 = cos(t5386 + t5383);
t5247 = cos(t5386 + qJ(3,3));
t5335 = qJ(2,3) + qJ(3,3);
t5248 = cos(t5335);
t5336 = qJ(2,3) - qJ(3,3);
t5249 = cos(t5336);
t5289 = sin(t5382);
t5329 = -qJ(3,3) + t5387;
t5385 = 0.4e1 * qJ(2,3);
t5188 = pkin(1) * t5365 + pkin(2) * t5248;
t5182 = 0.1e1 / t5188;
t5677 = t5182 * t5848;
t5537 = t5677 * t5948;
t5642 = -t5877 / 0.2e1;
t5546 = t5307 * t5642;
t5641 = -t5877 / 0.4e1;
t5653 = t5307 * t5782;
t5850 = t5116 * t5182;
t5675 = t5411 * t5850;
t5676 = t5406 * t5850;
t5780 = t5410 * sin(t5329);
t5727 = pkin(2) * t5780;
t5777 = t5029 + t5053;
t5874 = t5065 * t5407;
t5940 = -t5365 / 0.4e1;
t5979 = cos(qJ(2,3) + t5384) + cos(t5386);
t5980 = t5246 + t5365;
t5981 = t5242 + t5244;
t4985 = (((t5981 * t5038 * t6001 + (-t5979 * t5697 + ((t5050 - t5576 / 0.2e1) * t5248 + (-t5247 + t5245) * t5032) * t5994) * pkin(1)) * t5375 + (t5405 * sin(t5385 + 0.5e1 * qJ(3,3)) + sin(t5385 + qJ(3,3)) * t5758 - 0.6e1 * t5727 + t5289 * t5757 + t5628 * sin(t5385 + t5382) + t5358 * t5764 + t5223 * t5763 + t5225 * t5762 + (-sin(t5385) - t5226) * t5409 + (t5288 * sin(t5385 + t5383) + t5291 * t5961 + t5290 * t5960 + t5224 * t5959 + (sin(t5381 + t5385) + t5222) * t5751) * pkin(1)) * t5850 + ((-pkin(2) * t5249 * t5877 + t5065 * t5243) * t5307 + t5980 * (t5053 - t5029)) * t6002) * t5675 / 0.4e1 + ((-(t5053 + (0.4e1 * t5874 + 0.2e1 * t5877) * t5653) * pkin(1) * t5224 + t5777 * t5223 * t5970 + 0.4e1 * t5032 * t5727 + t5410 * t5226 * t5545 + t5406 * t5222 * t5546 + t5038 * t5225 * t5629 + (t5053 + (0.3e1 / 0.2e1 * t5877 + 0.2e1 * t5874) * t5653) * t5290 * t5972 + (t5050 + 0.4e1 / 0.5e1 * t5576) * t5291 * t5765 - t5289 * t5697 * t5948 - 0.6e1 * ((t5697 * t5933 + t5062) * t5406 + t5410 * (t5050 + t5062)) * t5915 - t5981 * t5375 * t5676 + t5979 * t5410 * t5677 - 0.2e1 * (t5245 + t5248) * t5537 + 0.2e1 * (t5249 + t5247) * t5537 - t5980 * t5643 * t5850) * t5641 + 0.2e1 * ((t5223 * t5936 - t5780 / 0.2e1 + t5225 * t5633 + t5287 * t5358 + (t5224 + t5290 - t5291) * t5948) * t5038 + ((-t5246 / 0.4e1 + t5242 / 0.4e1 + t5244 / 0.4e1 + t5940) * pkin(2) + (t5245 / 0.4e1 - t5247 / 0.4e1 + t5243 / 0.4e1 - t5248 / 0.4e1) * pkin(1)) * t5677) * t5065) * t5307 * t5412) / (t5269 * cos(t5332) + cos(t5334) * t5935 + cos(t5330) * t5357 + t5270 * t5300 - t5287 * t5298 + t5216 + (-cos(t5331) - cos(t5329) + 0.2e1 * cos(t5333) - cos(t5382)) * t5948 + t5287);
t5179 = t5359 * t5364 + t5810;
t5678 = t5359 * t5850;
t5615 = pkin(1) * t5678;
t5908 = t5032 * pkin(1);
t5008 = -t5375 * t5615 + (-t5179 * t5677 + 0.2e1 * t5364 * t5908) * pkin(2) + t5777;
t5679 = t5319 * t5850;
t5507 = (-(t5317 * t6001 + 0.2e1 * t5216 + t5766) * t5679 - 0.2e1 * (t5038 * t5937 - t5206 * t5678) * t5736 + t5317 * t5676 - t5214 * t5850 + (t5038 * t5906 + t5545) * t5807) * t5307 * t5675;
t5308 = 0.1e1 / t5358 ^ 2;
t5814 = t5308 * t5412;
t5227 = sin(t5335);
t5880 = (-t5227 * t5677 + t5038 * (t5279 + pkin(2))) * t5065;
t4973 = (t5507 + (t5008 * t5642 - t5880) * t5814) * t5407 + t4985;
t5035 = t5038 ^ 2;
t5183 = 0.1e1 / t5188 ^ 2;
t5849 = t5116 * t5183;
t5924 = pkin(2) * t5227;
t5005 = (-t5038 * t5924 + t5677 + (-t5227 * t5065 * t5411 + (-t5359 / 0.2e1 + (pkin(1) * t5359 + t5924) * t5934) * t5877) * t5307) * t5849;
t5887 = t5005 * t5359;
t5911 = pkin(4) * t5359;
t6009 = t5035 * t5911 + 0.2e1 * t5546 * t5850 + 0.4e1 * t5679 * t5908 - 0.2e1 * (pkin(1) * t5887 + t4973 * t5950) * t5365;
t5957 = 0.2e1 * t5319;
t5218 = t5957 - 0.1e1;
t5128 = -0.4e1 * t5552 + (0.4e1 * t5319 - 0.2e1) * t5317 - t5218;
t6005 = 0.2e1 * t5128;
t5955 = 0.2e1 * t5323;
t5219 = t5955 - 0.1e1;
t5129 = -0.4e1 * t5551 + (0.4e1 * t5323 - 0.2e1) * t5321 - t5219;
t6004 = 0.2e1 * t5129;
t5953 = 0.2e1 * t5327;
t5220 = t5953 - 0.1e1;
t5130 = -0.4e1 * t5550 + (0.4e1 * t5327 - 0.2e1) * t5325 - t5220;
t6003 = 0.2e1 * t5130;
t5997 = t5359 / 0.4e1;
t5996 = t5361 / 0.4e1;
t5995 = t5363 / 0.4e1;
t5523 = t5944 * t5740;
t5468 = t5182 * t5523;
t5993 = t5183 * t5218;
t5524 = t5945 * t5741;
t5467 = t5184 * t5524;
t5992 = t5185 * t5219;
t5525 = t5946 * t5742;
t5466 = t5186 * t5525;
t5991 = t5187 * t5220;
t5822 = t5186 * t5274;
t5990 = t5822 * t5946;
t5824 = t5184 * t5273;
t5989 = t5824 * t5945;
t5826 = t5182 * t5272;
t5988 = t5826 * t5944;
t5949 = pkin(4) / 0.4e1;
t5011 = -t5032 * t5615 + t5035 * t5949;
t5455 = pkin(1) * t5005 * t5957 - t4973 * t5911;
t5795 = t5364 * t5365;
t5987 = -0.4e1 * t5011 * t5795 + t6009 * t5358 + t5364 * t5455;
t5986 = 0.4e1 * t5011 * t5810 - t5358 * t5455 + t6009 * t5364;
t5013 = -t5033 * t5614 + t5036 * t5949;
t5454 = pkin(1) * t5006 * t5955 - t4974 * t5910;
t5792 = t5367 * t5368;
t5985 = -0.4e1 * t5013 * t5792 + t6010 * t5360 + t5367 * t5454;
t5984 = 0.4e1 * t5013 * t5805 - t5360 * t5454 + t6010 * t5367;
t5012 = -t5034 * t5613 + t5037 * t5949;
t5456 = pkin(1) * t5007 * t5953 - t4972 * t5909;
t5789 = t5370 * t5371;
t5983 = -0.4e1 * t5012 * t5789 + t6011 * t5362 + t5370 * t5456;
t5982 = 0.4e1 * t5012 * t5800 - t5362 * t5456 + t6011 * t5370;
t5113 = (t5317 - 0.1e1 / 0.2e1) * t5809 + (t5319 - 0.1e1 / 0.2e1) * t5796;
t5967 = -0.4e1 * t5113;
t5966 = 0.4e1 * t5113;
t5114 = (t5321 - 0.1e1 / 0.2e1) * t5804 + (t5323 - 0.1e1 / 0.2e1) * t5793;
t5965 = -0.4e1 * t5114;
t5964 = 0.4e1 * t5114;
t5115 = (t5325 - 0.1e1 / 0.2e1) * t5799 + (t5327 - 0.1e1 / 0.2e1) * t5790;
t5963 = -0.4e1 * t5115;
t5962 = 0.4e1 * t5115;
t5932 = t5412 / 0.4e1;
t5900 = -qJ(3,1) + qJ(1,1);
t5899 = qJ(3,1) + qJ(1,1);
t5898 = -qJ(3,2) + qJ(1,2);
t5897 = qJ(3,2) + qJ(1,2);
t5896 = -qJ(3,3) + qJ(1,3);
t5895 = qJ(3,3) + qJ(1,3);
t5894 = MDP(8) * t5411;
t5893 = qJ(1,1) - 0.2e1 * qJ(2,1);
t5892 = qJ(1,2) - 0.2e1 * qJ(2,2);
t5891 = -0.2e1 * qJ(2,3) + qJ(1,3);
t5890 = MDP(15) * t5411;
t5889 = t5005 * t5182;
t5888 = t5005 * t5307;
t5886 = t5006 * t5184;
t5885 = t5006 * t5310;
t5883 = t5007 * t5186;
t5882 = t5007 * t5313;
t5110 = t5116 ^ 2;
t5855 = t5110 * t5183;
t5101 = t5319 * t5855;
t5083 = -0.2e1 * t5101 + t5855;
t5155 = 0.1e1 / t5480;
t5871 = t5083 * t5155;
t5111 = t5118 ^ 2;
t5853 = t5111 * t5185;
t5102 = t5323 * t5853;
t5084 = -0.2e1 * t5102 + t5853;
t5156 = 0.1e1 / t5479;
t5870 = t5084 * t5156;
t5112 = t5120 ^ 2;
t5851 = t5112 * t5187;
t5103 = t5327 * t5851;
t5085 = -0.2e1 * t5103 + t5851;
t5157 = 0.1e1 / t5478;
t5869 = t5085 * t5157;
t5868 = ((cos(qJ(2,3) - t5896) + cos(qJ(2,3) + t5895)) * t6002 + (sin(t5384 + t5891) + sin(qJ(1,3) + t5332) + 0.2e1 * t5944) * pkin(2) + (sin(t5896) + sin(t5895) - sin(qJ(3,3) - t5891) + sin(qJ(1,3) + t5333)) * pkin(1)) / ((-sin(t5328) + t5359) * pkin(2) + (sin(t5336) - t5227) * pkin(1));
t5867 = ((cos(qJ(2,2) - t5898) + cos(qJ(2,2) + t5897)) * t6002 + (sin(t5392 + t5892) + sin(qJ(1,2) + t5337) + 0.2e1 * t5945) * pkin(2) + (-sin(qJ(3,2) - t5892) + sin(qJ(1,2) + t5343) + sin(t5898) + sin(t5897)) * pkin(1)) / ((-sin(t5338) + t5361) * pkin(2) + (sin(t5345) - t5234) * pkin(1));
t5866 = ((cos(qJ(2,1) - t5900) + cos(qJ(2,1) + t5899)) * t6002 + (sin(t5400 + t5893) + sin(qJ(1,1) + t5350) + 0.2e1 * t5946) * pkin(2) + (-sin(qJ(3,1) - t5893) + sin(qJ(1,1) + t5351) + sin(t5900) + sin(t5899)) * pkin(1)) / ((-sin(t5348) + t5363) * pkin(2) + (sin(t5354) - t5241) * pkin(1));
t5092 = -t5272 * t5158 - t5460 * t5740;
t5865 = t5092 * t5307;
t5093 = -t5740 * t5158 + t5272 * t5460;
t5864 = t5093 * t5307;
t5094 = -t5273 * t5159 - t5461 * t5741;
t5863 = t5094 * t5310;
t5095 = -t5741 * t5159 + t5273 * t5461;
t5862 = t5095 * t5310;
t5096 = -t5274 * t5160 - t5462 * t5742;
t5861 = t5096 * t5313;
t5097 = -t5742 * t5160 + t5274 * t5462;
t5860 = t5097 * t5313;
t5856 = t5110 * t5155;
t5854 = t5111 * t5156;
t5852 = t5112 * t5157;
t5841 = t5125 * t5307;
t5840 = t5126 * t5310;
t5839 = t5127 * t5313;
t5838 = t5155 * t5307;
t5837 = t5156 * t5310;
t5836 = t5157 * t5313;
t5825 = t5182 * t5366;
t5823 = t5184 * t5369;
t5821 = t5186 * t5372;
t5194 = -pkin(2) + t5279 + 0.2e1 * t5918;
t5820 = t5194 * t5272;
t5195 = -pkin(2) + t5280 + 0.2e1 * t5917;
t5819 = t5195 * t5273;
t5196 = -pkin(2) + t5277 + 0.2e1 * t5916;
t5818 = t5196 * t5274;
t5750 = 0.2e1 * t5407;
t5733 = pkin(4) * t5005 * t5365;
t5732 = pkin(4) * t5006 * t5368;
t5731 = pkin(4) * t5007 * t5371;
t5730 = pkin(4) * t5887;
t5729 = pkin(4) * t5884;
t5728 = pkin(4) * t5881;
t5176 = t5795 - t5811;
t5724 = t5176 * t5944;
t5177 = t5792 - t5806;
t5723 = t5177 * t5945;
t5178 = t5789 - t5801;
t5722 = t5178 * t5946;
t5721 = t5179 * t5944;
t5720 = t5180 * t5945;
t5719 = t5181 * t5946;
t5715 = t5005 * t5838;
t5714 = t5176 * t5888;
t5713 = t5179 * t5888;
t5712 = t5005 * t5825;
t5711 = t5006 * t5837;
t5710 = t5177 * t5885;
t5709 = t5180 * t5885;
t5708 = t5006 * t5823;
t5707 = t5007 * t5836;
t5706 = t5178 * t5882;
t5705 = t5181 * t5882;
t5704 = t5007 * t5821;
t5703 = t5038 * t5849;
t5702 = t5039 * t5846;
t5701 = t5040 * t5843;
t5700 = t5059 ^ 2 / t5080 ^ 2 * t5308;
t5699 = t5060 ^ 2 / t5081 ^ 2 * t5311;
t5698 = t5061 ^ 2 / t5082 ^ 2 * t5314;
t5137 = t5275 * t5317 - t5451;
t5205 = pkin(1) + 0.2e1 * t5906;
t5450 = (t5359 * t5632 + t5211) * t5364 + t5808 * t5928;
t5597 = t5194 * t5740;
t5068 = (t5358 * t5272 * t5205 - t5366 * t5597) * t5319 + (t5359 * t5820 + t5450 * t5740) * t5365 + t5137 * t5740 - t5272 * pkin(2) * t5796;
t5694 = t5068 * t5838;
t5594 = t5358 * t5740;
t5069 = (t5205 * t5594 + t5366 * t5820) * t5319 + (-t5272 * t5450 + t5359 * t5597) * t5365 - t5137 * t5272 - t5594 * t5906;
t5693 = t5069 * t5838;
t5138 = t5276 * t5321 - t5452;
t5207 = pkin(1) + 0.2e1 * t5904;
t5449 = (t5361 * t5631 + t5212) * t5367 + t5803 * t5927;
t5596 = t5195 * t5741;
t5070 = (t5360 * t5273 * t5207 - t5369 * t5596) * t5323 + (t5361 * t5819 + t5449 * t5741) * t5368 + t5138 * t5741 - t5273 * pkin(2) * t5793;
t5692 = t5070 * t5837;
t5593 = t5360 * t5741;
t5071 = (t5207 * t5593 + t5369 * t5819) * t5323 + (-t5273 * t5449 + t5361 * t5596) * t5368 - t5138 * t5273 - t5593 * t5904;
t5691 = t5071 * t5837;
t5139 = t5278 * t5325 - t5453;
t5209 = pkin(1) + 0.2e1 * t5902;
t5448 = (t5363 * t5630 + t5213) * t5370 + t5798 * t5926;
t5595 = t5196 * t5742;
t5072 = (t5362 * t5274 * t5209 - t5372 * t5595) * t5327 + (t5363 * t5818 + t5448 * t5742) * t5371 + t5139 * t5742 - t5274 * pkin(2) * t5790;
t5690 = t5072 * t5836;
t5592 = t5362 * t5742;
t5073 = (t5209 * t5592 + t5372 * t5818) * t5327 + (-t5274 * t5448 + t5363 * t5595) * t5371 - t5139 * t5274 - t5592 * t5902;
t5689 = t5073 * t5836;
t5685 = t5110 * t5868;
t5684 = t5111 * t5867;
t5683 = t5112 * t5866;
t5682 = t5307 * t5855;
t5681 = t5310 * t5853;
t5680 = t5313 * t5851;
t5659 = t5365 * t5825;
t5658 = t5183 * t5809;
t5657 = t5368 * t5823;
t5656 = t5185 * t5804;
t5655 = t5371 * t5821;
t5654 = t5187 * t5799;
t5636 = t5868 / 0.2e1;
t5635 = t5867 / 0.2e1;
t5634 = t5866 / 0.2e1;
t5570 = t5110 * t5658;
t5098 = t5364 * t5570;
t5020 = (t5101 - t5855 / 0.2e1 - t5032 * t5576) * t5358 + t5098;
t5627 = -0.2e1 * t5020 * t5838;
t5566 = t5111 * t5656;
t5099 = t5367 * t5566;
t5021 = (t5102 - t5853 / 0.2e1 - t5033 * t5575) * t5360 + t5099;
t5626 = -0.2e1 * t5021 * t5837;
t5562 = t5112 * t5654;
t5100 = t5370 * t5562;
t5022 = (t5103 - t5851 / 0.2e1 - t5034 * t5574) * t5362 + t5100;
t5625 = -0.2e1 * t5022 * t5836;
t5621 = t5358 * t5733;
t5620 = t5364 * t5733;
t5619 = t5360 * t5732;
t5618 = t5367 * t5732;
t5617 = t5362 * t5731;
t5616 = t5370 * t5731;
t5612 = t5944 * t5889;
t5611 = t5945 * t5886;
t5610 = t5946 * t5883;
t5609 = t5182 * t5718;
t5608 = t5184 * t5717;
t5607 = t5186 * t5716;
t5591 = t5155 * t5714;
t5590 = t5155 * t5713;
t5589 = t5359 * t5715;
t5588 = t5365 * t5715;
t5587 = t5156 * t5710;
t5586 = t5156 * t5709;
t5585 = t5361 * t5711;
t5584 = t5368 * t5711;
t5583 = t5157 * t5706;
t5582 = t5157 * t5705;
t5581 = t5363 * t5707;
t5580 = t5371 * t5707;
t5579 = t5182 * t5700;
t5578 = t5184 * t5699;
t5577 = t5186 * t5698;
t5573 = t5113 * t5682;
t5572 = t5128 * t5682;
t5571 = t5155 * t5682;
t5569 = t5114 * t5681;
t5568 = t5129 * t5681;
t5567 = t5156 * t5681;
t5565 = t5115 * t5680;
t5564 = t5130 * t5680;
t5563 = t5157 * t5680;
t5555 = t5307 * t5658;
t5554 = t5310 * t5656;
t5553 = t5313 * t5654;
t5549 = t5005 * t5636;
t5548 = t5006 * t5635;
t5547 = t5007 * t5634;
t5540 = -t5685 / 0.2e1;
t5539 = -t5684 / 0.2e1;
t5538 = -t5683 / 0.2e1;
t5519 = t4984 * t5607;
t5518 = t4985 * t5609;
t5517 = t4986 * t5608;
t5516 = t5944 * t5703;
t5515 = t5945 * t5702;
t5514 = t5946 * t5701;
t5510 = t5005 * t5609;
t5509 = t5006 * t5608;
t5508 = t5007 * t5607;
t5504 = t5366 * t5579;
t5503 = t5369 * t5578;
t5502 = t5372 * t5577;
t5501 = t5128 * t5571;
t5500 = t5129 * t5567;
t5499 = t5130 * t5563;
t5495 = t5358 * t5570;
t5494 = t5366 * t5116 * t5697;
t5493 = t5360 * t5566;
t5492 = t5369 * t5118 * t5696;
t5491 = t5362 * t5562;
t5490 = t5372 * t5120 * t5695;
t5483 = 0.2e1 * t5113 * t5571;
t5482 = 0.2e1 * t5114 * t5567;
t5481 = 0.2e1 * t5115 * t5563;
t5477 = t5116 * t5523;
t5476 = t5118 * t5524;
t5475 = t5120 * t5525;
t5474 = t5176 * t5523;
t5473 = t5177 * t5524;
t5472 = t5178 * t5525;
t5471 = t5179 * t5523;
t5470 = t5180 * t5524;
t5469 = t5181 * t5525;
t5465 = t5120 * t5716 * t5875;
t5464 = t5118 * t5717 * t5876;
t5463 = t5116 * t5718 * t5877;
t5447 = t4984 * t5466;
t5446 = t4985 * t5468;
t5445 = t4986 * t5467;
t5444 = t5007 * t5466;
t5443 = t5006 * t5467;
t5442 = t5005 * t5468;
t5441 = t5579 * t5718;
t5440 = t5578 * t5717;
t5439 = t5577 * t5716;
t5438 = t5038 * t5183 * t5477;
t5437 = t5039 * t5185 * t5476;
t5436 = t5040 * t5187 * t5475;
t5435 = t5476 * t5876;
t5434 = t5477 * t5877;
t5433 = t5475 * t5875;
t5429 = t5468 * t5700;
t5428 = t5467 * t5699;
t5427 = t5466 * t5698;
t5408 = 0.1e1 / pkin(2) ^ 2;
t5315 = t5363 ^ 2;
t5312 = t5361 ^ 2;
t5309 = t5359 ^ 2;
t5175 = t5181 ^ 2;
t5174 = t5180 ^ 2;
t5173 = t5179 ^ 2;
t5049 = t5698 * t5932 + t5103;
t5048 = t5699 * t5932 + t5102;
t5047 = t5700 * t5932 + t5101;
t5046 = t5049 * t5370 - t5491;
t5045 = t5049 * t5362 + t5100;
t5044 = t5048 * t5367 - t5493;
t5043 = t5048 * t5360 + t5099;
t5042 = t5047 * t5364 - t5495;
t5041 = t5047 * t5358 + t5098;
t5025 = -0.2e1 * t5491 + (t5220 * t5851 + (-t5067 * t5408 - t5407 * t5875) * t5067 * t5812) * t5370;
t5024 = -0.2e1 * t5493 + (t5219 * t5853 + (-t5066 * t5408 - t5407 * t5876) * t5066 * t5813) * t5367;
t5023 = -0.2e1 * t5495 + (t5218 * t5855 + (-t5065 * t5408 - t5407 * t5877) * t5065 * t5814) * t5364;
t4983 = pkin(1) * t4984 - t5728;
t4982 = pkin(1) * t4986 - t5729;
t4981 = pkin(1) * t4985 - t5730;
t4980 = -t4983 * t5362 - t5616;
t4979 = -t4982 * t5360 - t5618;
t4978 = -t4981 * t5358 - t5620;
t4977 = t4983 * t5370 - t5617;
t4976 = t4982 * t5367 - t5619;
t4975 = t4981 * t5364 - t5621;
t4968 = t5728 + ((t5505 / 0.2e1 + (t5010 * t5637 - t5878 / 0.2e1) * t5812) * t5407 + t4984) * t5972;
t4967 = t5729 + ((t5506 / 0.2e1 + (t5009 * t5639 - t5879 / 0.2e1) * t5813) * t5407 + t4986) * t5972;
t4966 = t5730 + ((t5507 / 0.2e1 + (t5008 * t5641 - t5880 / 0.2e1) * t5814) * t5407 + t4985) * t5972;
t4965 = -t4968 * t5370 - t5617;
t4964 = t4968 * t5362 - t5616;
t4963 = -t4967 * t5367 - t5619;
t4962 = t4967 * t5360 - t5618;
t4961 = -t4966 * t5364 - t5621;
t4960 = t4966 * t5358 - t5620;
t1 = [(-t5508 - t5509 - t5510) * MDP(1) + (-t5309 * t5510 - t5312 * t5509 - t5315 * t5508 + ((t5073 * t5852 + t5465) * t5553 + (t5071 * t5854 + t5464) * t5554 + (t5069 * t5856 + t5463) * t5555) * t5411) * MDP(4) + (-0.2e1 * t5510 * t5809 - 0.2e1 * t5509 * t5804 - 0.2e1 * t5508 * t5799 + ((-t5073 * t5869 + t5465 * t5991) * t5313 + (-t5071 * t5870 + t5464 * t5992) * t5310 + (-t5069 * t5871 + t5463 * t5993) * t5307) * t5411) * MDP(5) + (-t5359 * t5518 - t5361 * t5517 - t5363 * t5519 + (t5439 * t5938 + t5440 * t5939 + t5441 * t5940) * t5412 + (-t5069 * t5589 - t5071 * t5585 - t5073 * t5581) * t5411) * MDP(6) + (-t5365 * t5518 - t5368 * t5517 - t5371 * t5519 + (t5439 * t5995 + t5440 * t5996 + t5441 * t5997) * t5412 + (-t5069 * t5588 - t5071 * t5584 - t5073 * t5580) * t5411) * MDP(7) + (-t4984 * t5689 - t4985 * t5693 - t4986 * t5691) * t5894 + ((-t5175 * t5610 + t5514 * t5962) * t5274 + (-t5174 * t5611 + t5515 * t5964) * t5273 + (-t5173 * t5612 + t5516 * t5966) * t5272 + (t5069 * t5483 + t5071 * t5482 + t5073 * t5481 + (-t5093 * t5573 - t5095 * t5569 - t5097 * t5565) * t5750) * t5411) * MDP(11) + ((t5514 * t6003 + t5610 * t5963) * t5274 + (t5515 * t6004 + t5611 * t5965) * t5273 + (t5516 * t6005 + t5612 * t5967) * t5272 + (t5069 * t5501 + t5071 * t5500 + t5073 * t5499 + (-t5093 * t5572 - t5095 * t5568 - t5097 * t5564) * t5407) * t5411) * MDP(12) + ((-t4972 * t5719 - t5037 * t5722) * t5822 + (-t4974 * t5720 - t5036 * t5723) * t5824 + (-t4973 * t5721 - t5035 * t5724) * t5826 + (-t5069 * t5590 - t5071 * t5586 - t5073 * t5582 + (t5093 * t5713 + t5095 * t5709 + t5097 * t5705) * t5407) * t5411) * MDP(13) + ((-t4972 * t5722 + t5037 * t5719) * t5822 + (-t4974 * t5723 + t5036 * t5720) * t5824 + (-t4973 * t5724 + t5035 * t5721) * t5826 + (-t5069 * t5591 - t5071 * t5587 - t5073 * t5583 + (t5093 * t5714 + t5095 * t5710 + t5097 * t5706) * t5407) * t5411) * MDP(14) + (-t4972 * t5689 - t4973 * t5693 - t4974 * t5691 + (t4972 * t5860 + t4973 * t5864 + t4974 * t5862) * t5407) * t5890 + (t5069 * t5627 + t5071 * t5626 + t5073 * t5625 + (-t4961 * t5693 - t4963 * t5691 - t4965 * t5689) * t5411 + (t5041 * t5864 + t5043 * t5862 + t5045 * t5860 + (t4975 * t5864 + t4976 * t5862 + t4977 * t5860) * t5411) * t5407 - t5983 * t5990 - t5985 * t5989 - t5987 * t5988) * MDP(16) + (-t5023 * t5693 - t5024 * t5691 - t5025 * t5689 + (-t4960 * t5693 - t4962 * t5691 - t4964 * t5689) * t5411 + (t5042 * t5864 + t5044 * t5862 + t5046 * t5860 + (t4978 * t5864 + t4979 * t5862 + t4980 * t5860) * t5411) * t5407 - t5982 * t5990 - t5984 * t5989 - t5986 * t5988) * MDP(17); (t5444 + t5443 + t5442) * MDP(1) + (t5309 * t5442 + t5312 * t5443 + t5315 * t5444 + ((t5072 * t5852 - t5433) * t5553 + (t5070 * t5854 - t5435) * t5554 + (t5068 * t5856 - t5434) * t5555) * t5411) * MDP(4) + (t5442 * t5746 + t5443 * t5745 + t5444 * t5744 + ((-t5072 * t5869 - t5433 * t5991) * t5313 + (-t5070 * t5870 - t5435 * t5992) * t5310 + (-t5068 * t5871 - t5434 * t5993) * t5307) * t5411) * MDP(5) + (t5359 * t5446 + t5361 * t5445 + t5363 * t5447 + (t5371 * t5427 / 0.4e1 + t5368 * t5428 / 0.4e1 + t5365 * t5429 / 0.4e1) * t5412 + (-t5068 * t5589 - t5070 * t5585 - t5072 * t5581) * t5411) * MDP(6) + (t5365 * t5446 + t5368 * t5445 + t5371 * t5447 + (-t5363 * t5427 / 0.4e1 - t5361 * t5428 / 0.4e1 - t5359 * t5429 / 0.4e1) * t5412 + (-t5068 * t5588 - t5070 * t5584 - t5072 * t5580) * t5411) * MDP(7) + (-t4984 * t5690 - t4985 * t5694 - t4986 * t5692) * t5894 + (t5438 * t5967 + t5437 * t5965 + t5436 * t5963 + t5173 * t5442 + t5174 * t5443 + t5175 * t5444 + (t5068 * t5483 + t5070 * t5482 + t5072 * t5481 + (-t5092 * t5573 - t5094 * t5569 - t5096 * t5565) * t5750) * t5411) * MDP(11) + (-0.2e1 * t5128 * t5438 - 0.2e1 * t5129 * t5437 - 0.2e1 * t5130 * t5436 + t5442 * t5966 + t5443 * t5964 + t5444 * t5962 + (t5068 * t5501 + t5070 * t5500 + t5072 * t5499 + (-t5092 * t5572 - t5094 * t5568 - t5096 * t5564) * t5407) * t5411) * MDP(12) + ((t4972 * t5469 + t5037 * t5472) * t5186 + (t4974 * t5470 + t5036 * t5473) * t5184 + (t4973 * t5471 + t5035 * t5474) * t5182 + (-t5068 * t5590 - t5070 * t5586 - t5072 * t5582 + (t5092 * t5713 + t5094 * t5709 + t5096 * t5705) * t5407) * t5411) * MDP(13) + ((t4972 * t5472 - t5037 * t5469) * t5186 + (t4974 * t5473 - t5036 * t5470) * t5184 + (t4973 * t5474 - t5035 * t5471) * t5182 + (-t5068 * t5591 - t5070 * t5587 - t5072 * t5583 + (t5092 * t5714 + t5094 * t5710 + t5096 * t5706) * t5407) * t5411) * MDP(14) + (-t4972 * t5690 - t4973 * t5694 - t4974 * t5692 + (t4972 * t5861 + t4973 * t5865 + t4974 * t5863) * t5407) * t5890 + (t5068 * t5627 + t5070 * t5626 + t5072 * t5625 + (-t4961 * t5694 - t4963 * t5692 - t4965 * t5690) * t5411 + (t5041 * t5865 + t5043 * t5863 + t5045 * t5861 + (t4975 * t5865 + t4976 * t5863 + t4977 * t5861) * t5411) * t5407 + t5983 * t5466 + t5985 * t5467 + t5987 * t5468) * MDP(16) + (-t5023 * t5694 - t5024 * t5692 - t5025 * t5690 + (-t4960 * t5694 - t4962 * t5692 - t4964 * t5690) * t5411 + (t5042 * t5865 + t5044 * t5863 + t5046 * t5861 + (t4978 * t5865 + t4979 * t5863 + t4980 * t5861) * t5411) * t5407 + t5982 * t5466 + t5984 * t5467 + t5986 * t5468) * MDP(17); (-t5704 - t5708 - t5712) * MDP(1) + (-t5309 * t5712 - t5312 * t5708 - t5315 * t5704 + ((t5490 + t5538) * t5654 + (t5492 + t5539) * t5656 + (t5494 + t5540) * t5658) * t5411) * MDP(4) + (-0.2e1 * t5659 * t5887 - 0.2e1 * t5657 * t5884 - 0.2e1 * t5655 * t5881 + (t5083 * t5636 + t5084 * t5635 + t5085 * t5634 + t5490 * t5991 + t5492 * t5992 + t5494 * t5993) * t5411) * MDP(5) + (-t5186 * t4984 * t5798 - t5182 * t4985 * t5808 - t5184 * t4986 * t5803 + (t5502 * t5938 + t5503 * t5939 + t5504 * t5940) * t5412 + (t5359 * t5549 + t5361 * t5548 + t5363 * t5547) * t5411) * MDP(6) + (-t4984 * t5655 - t4985 * t5659 - t4986 * t5657 + (t5502 * t5995 + t5503 * t5996 + t5504 * t5997) * t5412 + (t5365 * t5549 + t5368 * t5548 + t5371 * t5547) * t5411) * MDP(7) + (t4984 * t5634 + t4985 * t5636 + t4986 * t5635) * t5894 + ((-t5175 * t5883 + t5701 * t5962) * t5372 + (-t5174 * t5886 + t5702 * t5964) * t5369 + (-t5173 * t5889 + t5703 * t5966) * t5366 + (-t5113 * t5183 * t5685 - t5114 * t5185 * t5684 - t5115 * t5187 * t5683 + (-t5125 * t5573 - t5126 * t5569 - t5127 * t5565) * t5750) * t5411) * MDP(11) + ((t5701 * t6003 + t5883 * t5963) * t5372 + (t5702 * t6004 + t5886 * t5965) * t5369 + (t5703 * t6005 + t5889 * t5967) * t5366 + (t5187 * t5130 * t5538 + t5185 * t5129 * t5539 + t5183 * t5128 * t5540 + (-t5125 * t5572 - t5126 * t5568 - t5127 * t5564) * t5407) * t5411) * MDP(12) + ((-t4972 * t5181 - t5037 * t5178) * t5821 + (-t4974 * t5180 - t5036 * t5177) * t5823 + (-t4973 * t5179 - t5035 * t5176) * t5825 + (t5181 * t5547 + t5180 * t5548 + t5179 * t5549 + (t5125 * t5713 + t5126 * t5709 + t5127 * t5705) * t5407) * t5411) * MDP(13) + ((-t4972 * t5178 + t5037 * t5181) * t5821 + (-t4974 * t5177 + t5036 * t5180) * t5823 + (-t4973 * t5176 + t5035 * t5179) * t5825 + (t5178 * t5547 + t5177 * t5548 + t5176 * t5549 + (t5125 * t5714 + t5126 * t5710 + t5127 * t5706) * t5407) * t5411) * MDP(14) + (t4972 * t5634 + t4974 * t5635 + t4973 * t5636 + (t4972 * t5839 + t4973 * t5841 + t4974 * t5840) * t5407) * t5890 + (t5020 * t5868 + t5021 * t5867 + t5022 * t5866 - t5983 * t5821 - t5985 * t5823 - t5987 * t5825 + (t4961 * t5636 + t4963 * t5635 + t4965 * t5634) * t5411 + (t5041 * t5841 + t5043 * t5840 + t5045 * t5839 + (t4975 * t5841 + t4976 * t5840 + t4977 * t5839) * t5411) * t5407) * MDP(16) + (t5025 * t5634 + t5024 * t5635 + t5023 * t5636 - t5982 * t5821 - t5984 * t5823 - t5986 * t5825 + (t4960 * t5636 + t4962 * t5635 + t4964 * t5634) * t5411 + (t5042 * t5841 + t5044 * t5840 + t5046 * t5839 + (t4978 * t5841 + t4979 * t5840 + t4980 * t5839) * t5411) * t5407) * MDP(17);];
taucX  = t1;
