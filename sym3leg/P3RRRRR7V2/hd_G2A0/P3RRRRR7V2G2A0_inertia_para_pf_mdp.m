% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR7V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR7V2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 10:08
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR7V2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V2G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V2G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRRRR7V2G2A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V2G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR7V2G2A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 10:03:08
% EndTime: 2020-08-07 10:03:38
% DurationCPUTime: 32.86s
% Computational Cost: add. (36039->972), mult. (62409->1654), div. (4239->27), fcn. (43746->66), ass. (0->676)
t6259 = legFrame(3,2);
t6216 = sin(t6259);
t6731 = -0.2e1 * t6216;
t6260 = legFrame(2,2);
t6217 = sin(t6260);
t6730 = -0.2e1 * t6217;
t6261 = legFrame(1,2);
t6218 = sin(t6261);
t6729 = -0.2e1 * t6218;
t6219 = cos(t6259);
t6728 = 0.2e1 * t6219;
t6220 = cos(t6260);
t6727 = 0.2e1 * t6220;
t6221 = cos(t6261);
t6726 = 0.2e1 * t6221;
t6687 = qJ(3,1) + qJ(1,1);
t6214 = qJ(2,1) + t6687;
t6688 = -qJ(3,1) + qJ(1,1);
t6215 = -qJ(2,1) + t6688;
t6279 = cos(qJ(1,1));
t6291 = 2 * qJ(3,1);
t6674 = 2 * pkin(1);
t6680 = qJ(1,1) - (2 * qJ(2,1));
t6681 = qJ(1,1) + (2 * qJ(2,1));
t6282 = pkin(5) + pkin(6);
t6232 = (pkin(7) + t6282);
t6710 = 2 * t6232;
t6116 = (cos(t6215) + cos(t6214)) * t6674 + (sin(t6215) + sin(t6214)) * t6710 + (cos((2 * qJ(3,1)) - t6680) + cos(t6291 + t6681) + 0.2e1 * t6279) * pkin(3) + (cos(qJ(3,1) - t6680) + cos(qJ(3,1) + t6681) + cos(t6688) + cos(t6687)) * pkin(2);
t6256 = qJ(2,1) + qJ(3,1);
t6269 = sin(qJ(2,1));
t6296 = pkin(2) ^ 2;
t6268 = sin(qJ(3,1));
t6692 = t6268 * pkin(1);
t6131 = -t6296 * sin((qJ(2,1) - qJ(3,1))) + pkin(2) * (pkin(2) * sin(t6256) + 0.2e1 * t6692 + (sin((t6291 + qJ(2,1))) - t6269) * pkin(3));
t6671 = t6116 / t6131;
t6107 = t6671 / 0.2e1;
t6685 = qJ(3,2) + qJ(1,2);
t6212 = qJ(2,2) + t6685;
t6686 = -qJ(3,2) + qJ(1,2);
t6213 = -qJ(2,2) + t6686;
t6276 = cos(qJ(1,2));
t6288 = 2 * qJ(3,2);
t6678 = qJ(1,2) - (2 * qJ(2,2));
t6679 = qJ(1,2) + (2 * qJ(2,2));
t6115 = (cos(t6213) + cos(t6212)) * t6674 + (sin(t6213) + sin(t6212)) * t6710 + (cos((2 * qJ(3,2)) - t6678) + cos(t6288 + t6679) + 0.2e1 * t6276) * pkin(3) + (cos(qJ(3,2) - t6678) + cos(qJ(3,2) + t6679) + cos(t6686) + cos(t6685)) * pkin(2);
t6255 = qJ(2,2) + qJ(3,2);
t6266 = sin(qJ(2,2));
t6265 = sin(qJ(3,2));
t6693 = t6265 * pkin(1);
t6130 = -t6296 * sin((qJ(2,2) - qJ(3,2))) + pkin(2) * (pkin(2) * sin(t6255) + 0.2e1 * t6693 + (sin((t6288 + qJ(2,2))) - t6266) * pkin(3));
t6672 = t6115 / t6130;
t6106 = t6672 / 0.2e1;
t6683 = qJ(3,3) + qJ(1,3);
t6210 = qJ(2,3) + t6683;
t6684 = -qJ(3,3) + qJ(1,3);
t6211 = -qJ(2,3) + t6684;
t6273 = cos(qJ(1,3));
t6285 = 2 * qJ(3,3);
t6676 = -(2 * qJ(2,3)) + qJ(1,3);
t6677 = (2 * qJ(2,3)) + qJ(1,3);
t6114 = (cos(t6211) + cos(t6210)) * t6674 + (sin(t6211) + sin(t6210)) * t6710 + (cos((2 * qJ(3,3)) - t6676) + cos(t6285 + t6677) + 0.2e1 * t6273) * pkin(3) + (cos(qJ(3,3) - t6676) + cos(qJ(3,3) + t6677) + cos(t6684) + cos(t6683)) * pkin(2);
t6254 = qJ(2,3) + qJ(3,3);
t6263 = sin(qJ(2,3));
t6262 = sin(qJ(3,3));
t6694 = t6262 * pkin(1);
t6129 = -t6296 * sin((qJ(2,3) - qJ(3,3))) + pkin(2) * (pkin(2) * sin(t6254) + 0.2e1 * t6694 + (sin((t6285 + qJ(2,3))) - t6263) * pkin(3));
t6673 = t6114 / t6129;
t6105 = t6673 / 0.2e1;
t6725 = t6216 * t6219;
t6724 = t6217 * t6220;
t6723 = t6218 * t6221;
t6271 = cos(qJ(3,3));
t6222 = t6271 * pkin(3);
t6602 = pkin(2) * t6222;
t6294 = pkin(3) ^ 2;
t6603 = -t6294 / 0.2e1 + t6296 / 0.2e1;
t6245 = t6271 ^ 2;
t6619 = t6245 * t6294;
t6168 = t6602 + t6603 + t6619;
t6225 = pkin(3) * t6245;
t6264 = sin(qJ(1,3));
t6616 = t6262 * t6263;
t6530 = t6264 * t6616;
t6585 = pkin(3) * t6616;
t6201 = t6222 + pkin(2);
t6272 = cos(qJ(2,3));
t6638 = t6201 * t6272;
t6246 = t6272 ^ 2;
t6709 = -0.2e1 * t6246;
t6118 = t6168 * t6273 * t6709 - ((pkin(1) - 0.2e1 * t6585) * t6273 + t6264 * t6232) * t6638 + pkin(3) * ((pkin(1) * t6616 - pkin(3) + t6225) * t6273 + t6232 * t6530);
t6295 = 0.1e1 / pkin(3);
t6297 = 0.1e1 / pkin(2);
t6165 = pkin(1) - t6585 + t6638;
t6664 = 0.1e1 / t6165 / t6262;
t6562 = t6297 * t6664;
t6490 = t6295 * t6562;
t6722 = t6118 * t6490 + t6105;
t6274 = cos(qJ(3,2));
t6223 = t6274 * pkin(3);
t6601 = pkin(2) * t6223;
t6248 = t6274 ^ 2;
t6618 = t6248 * t6294;
t6169 = t6601 + t6603 + t6618;
t6226 = pkin(3) * t6248;
t6267 = sin(qJ(1,2));
t6612 = t6265 * t6266;
t6529 = t6267 * t6612;
t6584 = pkin(3) * t6612;
t6202 = t6223 + pkin(2);
t6275 = cos(qJ(2,2));
t6635 = t6202 * t6275;
t6249 = t6275 ^ 2;
t6707 = -0.2e1 * t6249;
t6119 = t6169 * t6276 * t6707 - ((pkin(1) - 0.2e1 * t6584) * t6276 + t6267 * t6232) * t6635 + pkin(3) * ((pkin(1) * t6612 - pkin(3) + t6226) * t6276 + t6232 * t6529);
t6166 = pkin(1) - t6584 + t6635;
t6662 = 0.1e1 / t6166 / t6265;
t6560 = t6297 * t6662;
t6487 = t6295 * t6560;
t6721 = t6119 * t6487 + t6106;
t6277 = cos(qJ(3,1));
t6224 = t6277 * pkin(3);
t6600 = pkin(2) * t6224;
t6251 = t6277 ^ 2;
t6617 = t6251 * t6294;
t6170 = t6600 + t6603 + t6617;
t6227 = pkin(3) * t6251;
t6270 = sin(qJ(1,1));
t6608 = t6268 * t6269;
t6528 = t6270 * t6608;
t6583 = pkin(3) * t6608;
t6203 = t6224 + pkin(2);
t6278 = cos(qJ(2,1));
t6632 = t6203 * t6278;
t6252 = t6278 ^ 2;
t6705 = -0.2e1 * t6252;
t6120 = t6170 * t6279 * t6705 - ((pkin(1) - 0.2e1 * t6583) * t6279 + t6270 * t6232) * t6632 + pkin(3) * ((pkin(1) * t6608 - pkin(3) + t6227) * t6279 + t6232 * t6528);
t6167 = pkin(1) - t6583 + t6632;
t6660 = 0.1e1 / t6167 / t6268;
t6558 = t6297 * t6660;
t6484 = t6295 * t6558;
t6720 = t6120 * t6484 + t6107;
t6606 = t6269 * t6277;
t6716 = -2 * pkin(1);
t6719 = -t6268 * pkin(2) * t6705 + 0.2e1 * (pkin(2) * t6606 + t6692) * t6278 - t6606 * t6716;
t6610 = t6266 * t6274;
t6718 = -t6265 * pkin(2) * t6707 + 0.2e1 * (pkin(2) * t6610 + t6693) * t6275 - t6610 * t6716;
t6614 = t6263 * t6271;
t6717 = -t6262 * pkin(2) * t6709 + 0.2e1 * (pkin(2) * t6614 + t6694) * t6272 - t6614 * t6716;
t6715 = -0.2e1 * pkin(2);
t6714 = 0.2e1 * pkin(2);
t6713 = 0.2e1 * pkin(3);
t6712 = 2 * MDP(5);
t6711 = 4 * MDP(12);
t6708 = 0.2e1 * t6246;
t6706 = 0.2e1 * t6249;
t6704 = 0.2e1 * t6252;
t6703 = -0.2e1 * t6263;
t6702 = -0.2e1 * t6266;
t6701 = -0.2e1 * t6269;
t6700 = t6282 / 0.2e1;
t6699 = pkin(3) * t6262;
t6698 = pkin(3) * t6265;
t6697 = pkin(3) * t6268;
t6696 = pkin(5) / 0.2e1;
t6695 = pkin(5) * t6297;
t6691 = t6271 * pkin(2);
t6690 = t6274 * pkin(2);
t6689 = t6277 * pkin(2);
t6682 = MDP(8) / pkin(2) ^ 2;
t6675 = MDP(15) * t6297;
t6522 = pkin(1) * t6264 - t6232 * t6273;
t6132 = t6522 * t6616 + (t6245 - 0.1e1) * t6264 * pkin(3);
t6670 = t6132 * t6216;
t6669 = t6132 * t6219;
t6521 = pkin(1) * t6267 - t6232 * t6276;
t6133 = t6521 * t6612 + (t6248 - 0.1e1) * t6267 * pkin(3);
t6668 = t6133 * t6217;
t6667 = t6133 * t6220;
t6520 = pkin(1) * t6270 - t6232 * t6279;
t6134 = t6520 * t6608 + (t6251 - 0.1e1) * t6270 * pkin(3);
t6666 = t6134 * t6218;
t6665 = t6134 * t6221;
t6663 = 0.1e1 / t6165 ^ 2 / t6262 ^ 2;
t6661 = 0.1e1 / t6166 ^ 2 / t6265 ^ 2;
t6659 = 0.1e1 / t6167 ^ 2 / t6268 ^ 2;
t6186 = pkin(3) * cos(t6254) + t6272 * pkin(2) + pkin(1);
t6180 = 0.1e1 / t6186;
t6658 = t6180 * t6264;
t6657 = t6180 * t6282;
t6181 = 0.1e1 / t6186 ^ 2;
t6236 = t6264 ^ 2;
t6656 = t6181 * t6236;
t6247 = t6273 ^ 2;
t6655 = t6181 * t6247;
t6187 = pkin(3) * cos(t6255) + t6275 * pkin(2) + pkin(1);
t6182 = 0.1e1 / t6187;
t6654 = t6182 * t6267;
t6653 = t6182 * t6282;
t6183 = 0.1e1 / t6187 ^ 2;
t6240 = t6267 ^ 2;
t6652 = t6183 * t6240;
t6250 = t6276 ^ 2;
t6651 = t6183 * t6250;
t6188 = pkin(3) * cos(t6256) + t6278 * pkin(2) + pkin(1);
t6184 = 0.1e1 / t6188;
t6650 = t6184 * t6270;
t6649 = t6184 * t6282;
t6185 = 0.1e1 / t6188 ^ 2;
t6244 = t6270 ^ 2;
t6648 = t6185 * t6244;
t6253 = t6279 ^ 2;
t6647 = t6185 * t6253;
t6195 = pkin(1) * t6263 - t6699;
t6646 = t6195 * t6271;
t6196 = pkin(1) * t6266 - t6698;
t6645 = t6196 * t6274;
t6197 = pkin(1) * t6269 - t6697;
t6644 = t6197 * t6277;
t6284 = pkin(2) / 0.2e1;
t6643 = (t6222 + t6284) * t6262;
t6642 = (t6223 + t6284) * t6265;
t6641 = (t6224 + t6284) * t6268;
t6640 = t6201 * t6216;
t6639 = t6201 * t6219;
t6637 = t6202 * t6217;
t6636 = t6202 * t6220;
t6634 = t6203 * t6218;
t6633 = t6203 * t6221;
t6631 = t6216 * t6264;
t6630 = t6216 * t6273;
t6629 = t6217 * t6267;
t6628 = t6217 * t6276;
t6627 = t6218 * t6270;
t6626 = t6218 * t6279;
t6625 = t6219 * t6264;
t6624 = t6219 * t6273;
t6623 = t6220 * t6267;
t6622 = t6220 * t6276;
t6621 = t6221 * t6270;
t6620 = t6221 * t6279;
t6615 = t6262 * t6282;
t6613 = t6263 * t6272;
t6611 = t6265 * t6282;
t6609 = t6266 * t6275;
t6607 = t6268 * t6282;
t6605 = t6269 * t6278;
t6604 = t6295 * t6297;
t6595 = 0.2e1 * t6297;
t6594 = pkin(1) * t6658;
t6593 = pkin(1) * t6180 * t6273;
t6592 = pkin(1) * t6654;
t6591 = pkin(1) * t6182 * t6276;
t6590 = pkin(1) * t6650;
t6589 = pkin(1) * t6184 * t6279;
t6588 = t6201 * t6699;
t6587 = t6202 * t6698;
t6586 = t6203 * t6697;
t6582 = MDP(8) * t6297 / 0.2e1;
t6231 = -t6294 + t6296;
t6135 = pkin(3) * t6694 + (t6231 + 0.2e1 * t6602 + 0.2e1 * t6619) * t6263;
t6156 = t6530 * t6713 - t6522;
t6081 = (t6168 * t6631 - t6219 * t6588) * t6708 + (-t6135 * t6219 - t6156 * t6640) * t6272 - pkin(3) * t6670 - t6195 * t6639;
t6581 = t6081 * t6664;
t6082 = (-t6168 * t6625 - t6216 * t6588) * t6708 + (-t6135 * t6216 + t6156 * t6639) * t6272 + pkin(3) * t6669 - t6195 * t6640;
t6580 = t6082 * t6664;
t6136 = pkin(3) * t6693 + (t6231 + 0.2e1 * t6601 + 0.2e1 * t6618) * t6266;
t6157 = t6529 * t6713 - t6521;
t6083 = (t6169 * t6629 - t6220 * t6587) * t6706 + (-t6136 * t6220 - t6157 * t6637) * t6275 - pkin(3) * t6668 - t6196 * t6636;
t6579 = t6083 * t6662;
t6084 = (-t6169 * t6623 - t6217 * t6587) * t6706 + (-t6136 * t6217 + t6157 * t6636) * t6275 + pkin(3) * t6667 - t6196 * t6637;
t6578 = t6084 * t6662;
t6137 = pkin(3) * t6692 + (t6231 + 0.2e1 * t6600 + 0.2e1 * t6617) * t6269;
t6158 = t6528 * t6713 - t6520;
t6085 = (t6170 * t6627 - t6221 * t6586) * t6704 + (-t6137 * t6221 - t6158 * t6634) * t6278 - pkin(3) * t6666 - t6197 * t6633;
t6577 = t6085 * t6660;
t6086 = (-t6170 * t6621 - t6218 * t6586) * t6704 + (-t6137 * t6218 + t6158 * t6633) * t6278 + pkin(3) * t6665 - t6197 * t6634;
t6576 = t6086 * t6660;
t6153 = t6694 + (-pkin(3) + t6691 + 0.2e1 * t6225) * t6263;
t6283 = -pkin(3) / 0.2e1;
t6189 = t6225 + t6691 / 0.2e1 + t6283;
t6339 = pkin(2) * t6530 + t6156 * t6271;
t6087 = (-t6189 * t6631 + t6219 * t6643) * t6708 + (t6219 * t6153 + t6339 * t6216) * t6272 + t6670 + t6219 * t6646;
t6575 = t6087 * t6664;
t6088 = (t6189 * t6625 + t6216 * t6643) * t6708 + (t6216 * t6153 - t6339 * t6219) * t6272 - t6669 + t6216 * t6646;
t6574 = t6088 * t6664;
t6154 = t6693 + (-pkin(3) + t6690 + 0.2e1 * t6226) * t6266;
t6190 = t6226 + t6690 / 0.2e1 + t6283;
t6338 = pkin(2) * t6529 + t6157 * t6274;
t6089 = (-t6190 * t6629 + t6220 * t6642) * t6706 + (t6220 * t6154 + t6338 * t6217) * t6275 + t6668 + t6220 * t6645;
t6573 = t6089 * t6662;
t6090 = (t6190 * t6623 + t6217 * t6642) * t6706 + (t6217 * t6154 - t6338 * t6220) * t6275 - t6667 + t6217 * t6645;
t6572 = t6090 * t6662;
t6155 = t6692 + (-pkin(3) + t6689 + 0.2e1 * t6227) * t6269;
t6191 = t6227 + t6689 / 0.2e1 + t6283;
t6337 = pkin(2) * t6528 + t6158 * t6277;
t6091 = (-t6191 * t6627 + t6221 * t6641) * t6704 + (t6221 * t6155 + t6337 * t6218) * t6278 + t6666 + t6221 * t6644;
t6571 = t6091 * t6660;
t6092 = (t6191 * t6621 + t6218 * t6641) * t6704 + (t6218 * t6155 - t6337 * t6221) * t6278 - t6665 + t6218 * t6644;
t6570 = t6092 * t6660;
t6569 = t6180 * t6673;
t6568 = t6182 * t6672;
t6567 = t6184 * t6671;
t6566 = t6118 * t6664;
t6565 = t6119 * t6662;
t6564 = t6120 * t6660;
t6563 = t6180 * t6664;
t6561 = t6182 * t6662;
t6559 = t6184 * t6660;
t6557 = t6180 * t6630;
t6556 = t6180 * t6624;
t6555 = t6264 * t6657;
t6554 = t6273 * t6657;
t6204 = t6216 ^ 2;
t6553 = t6204 * t6655;
t6207 = t6219 ^ 2;
t6552 = t6207 * t6655;
t6235 = t6263 ^ 2;
t6551 = t6235 * t6655;
t6550 = t6181 * t6613;
t6549 = t6181 * t6264 * t6273;
t6548 = t6182 * t6628;
t6547 = t6182 * t6622;
t6546 = t6267 * t6653;
t6545 = t6276 * t6653;
t6205 = t6217 ^ 2;
t6544 = t6205 * t6651;
t6208 = t6220 ^ 2;
t6543 = t6208 * t6651;
t6239 = t6266 ^ 2;
t6542 = t6239 * t6651;
t6541 = t6183 * t6609;
t6540 = t6183 * t6267 * t6276;
t6539 = t6184 * t6626;
t6538 = t6184 * t6620;
t6537 = t6270 * t6649;
t6536 = t6279 * t6649;
t6206 = t6218 ^ 2;
t6535 = t6206 * t6647;
t6209 = t6221 ^ 2;
t6534 = t6209 * t6647;
t6243 = t6269 ^ 2;
t6533 = t6243 * t6647;
t6532 = t6185 * t6605;
t6531 = t6185 * t6270 * t6279;
t6527 = t6271 * t6700;
t6526 = t6274 * t6700;
t6525 = t6277 * t6700;
t6524 = MDP(6) * t6595;
t6523 = MDP(7) * t6595;
t6519 = t6262 * t6593;
t6518 = t6263 * t6593;
t6517 = t6272 * t6593;
t6516 = t6265 * t6591;
t6515 = t6266 * t6591;
t6514 = t6275 * t6591;
t6513 = t6268 * t6589;
t6512 = t6269 * t6589;
t6511 = t6278 * t6589;
t6510 = t6180 * t6246 * t6691;
t6509 = t6182 * t6249 * t6690;
t6508 = t6184 * t6252 * t6689;
t6507 = pkin(5) * t6105;
t6506 = pkin(5) * t6106;
t6505 = pkin(5) * t6107;
t6504 = pkin(5) * t6562;
t6503 = pkin(5) * t6560;
t6502 = pkin(5) * t6558;
t6501 = t6664 * t6673;
t6500 = t6264 * t6569;
t6499 = t6273 * t6569;
t6498 = t6662 * t6672;
t6497 = t6267 * t6568;
t6496 = t6276 * t6568;
t6495 = t6660 * t6671;
t6494 = t6270 * t6567;
t6493 = t6279 * t6567;
t6492 = t6264 * t6563;
t6491 = t6273 * t6563;
t6489 = t6267 * t6561;
t6488 = t6276 * t6561;
t6486 = t6270 * t6559;
t6485 = t6279 * t6559;
t6384 = -t6271 * t6272 + t6616;
t6483 = t6384 * t6557;
t6482 = t6384 * t6556;
t6383 = -t6274 * t6275 + t6612;
t6481 = t6383 * t6548;
t6480 = t6383 * t6547;
t6382 = -t6277 * t6278 + t6608;
t6479 = t6382 * t6539;
t6478 = t6382 * t6538;
t6177 = t6262 * t6272 + t6614;
t6477 = t6177 * t6557;
t6476 = t6177 * t6556;
t6178 = t6265 * t6275 + t6610;
t6475 = t6178 * t6548;
t6474 = t6178 * t6547;
t6179 = t6268 * t6278 + t6606;
t6473 = t6179 * t6539;
t6472 = t6179 * t6538;
t6471 = t6263 * t6554;
t6470 = t6272 * t6555;
t6469 = t6272 * t6554;
t6468 = t6655 * t6725;
t6467 = t6216 * t6549;
t6466 = t6219 * t6549;
t6465 = t6235 * t6549;
t6464 = t6247 * t6550;
t6463 = t6266 * t6545;
t6462 = t6275 * t6546;
t6461 = t6275 * t6545;
t6460 = t6651 * t6724;
t6459 = t6217 * t6540;
t6458 = t6220 * t6540;
t6457 = t6239 * t6540;
t6456 = t6250 * t6541;
t6455 = t6269 * t6536;
t6454 = t6278 * t6537;
t6453 = t6278 * t6536;
t6452 = t6647 * t6723;
t6451 = t6218 * t6531;
t6450 = t6221 * t6531;
t6449 = t6243 * t6531;
t6448 = t6253 * t6532;
t6447 = t6263 * t6555;
t6446 = t6266 * t6546;
t6445 = t6269 * t6537;
t6444 = t6273 * t6510;
t6443 = t6276 * t6509;
t6442 = t6279 * t6508;
t6441 = t6263 * t6504;
t6440 = t6272 * t6504;
t6439 = t6266 * t6503;
t6438 = t6275 * t6503;
t6437 = t6269 * t6502;
t6436 = t6278 * t6502;
t6435 = t6263 * t6499;
t6434 = t6272 * t6499;
t6433 = t6266 * t6496;
t6432 = t6275 * t6496;
t6431 = t6269 * t6493;
t6430 = t6278 * t6493;
t6426 = t6384 * t6492;
t6425 = t6177 * t6492;
t6424 = t6216 * t6491;
t6423 = t6219 * t6491;
t6422 = t6263 * t6492;
t6421 = t6263 * t6491;
t6420 = t6272 * t6492;
t6419 = t6272 * t6491;
t6418 = t6383 * t6489;
t6417 = t6178 * t6489;
t6416 = t6217 * t6488;
t6415 = t6220 * t6488;
t6414 = t6266 * t6489;
t6413 = t6266 * t6488;
t6412 = t6275 * t6489;
t6411 = t6275 * t6488;
t6410 = t6382 * t6486;
t6409 = t6179 * t6486;
t6408 = t6218 * t6485;
t6407 = t6221 * t6485;
t6406 = t6269 * t6486;
t6405 = t6269 * t6485;
t6404 = t6278 * t6486;
t6403 = t6278 * t6485;
t6402 = t6262 * t6469;
t6401 = t6271 * t6469;
t6400 = t6549 * t6613;
t6399 = t6265 * t6461;
t6398 = t6274 * t6461;
t6397 = t6540 * t6609;
t6396 = t6268 * t6453;
t6395 = t6277 * t6453;
t6394 = t6531 * t6605;
t6393 = t6216 * t6471;
t6392 = t6217 * t6463;
t6391 = t6218 * t6455;
t6390 = t6219 * t6471;
t6389 = t6220 * t6463;
t6388 = t6221 * t6455;
t6387 = t6490 / 0.2e1;
t6386 = t6487 / 0.2e1;
t6385 = t6484 / 0.2e1;
t6380 = -pkin(1) * t6271 + pkin(2) * t6616;
t6378 = -pkin(1) * t6274 + pkin(2) * t6612;
t6376 = -pkin(1) * t6277 + pkin(2) * t6608;
t6375 = t6384 * t6424;
t6374 = t6384 * t6423;
t6373 = t6177 * t6424;
t6372 = t6177 * t6423;
t6371 = t6216 * t6421;
t6370 = t6216 * t6419;
t6369 = t6219 * t6421;
t6368 = t6219 * t6419;
t6367 = t6383 * t6416;
t6366 = t6383 * t6415;
t6365 = t6178 * t6416;
t6364 = t6178 * t6415;
t6363 = t6217 * t6413;
t6362 = t6217 * t6411;
t6361 = t6220 * t6413;
t6360 = t6220 * t6411;
t6359 = t6382 * t6408;
t6358 = t6382 * t6407;
t6357 = t6179 * t6408;
t6356 = t6179 * t6407;
t6355 = t6218 * t6405;
t6354 = t6218 * t6403;
t6353 = t6221 * t6405;
t6352 = t6221 * t6403;
t6351 = t6219 * t6402;
t6350 = t6219 * t6401;
t6349 = t6220 * t6399;
t6348 = t6220 * t6398;
t6347 = t6221 * t6396;
t6346 = t6221 * t6395;
t6342 = t6282 * t6384;
t6341 = t6282 * t6383;
t6340 = t6282 * t6382;
t6138 = (t6245 - 0.1e1 / 0.2e1) * t6613 + (t6246 - 0.1e1 / 0.2e1) * t6271 * t6262;
t6139 = (t6248 - 0.1e1 / 0.2e1) * t6609 + (t6249 - 0.1e1 / 0.2e1) * t6274 * t6265;
t6140 = (t6251 - 0.1e1 / 0.2e1) * t6605 + (t6252 - 0.1e1 / 0.2e1) * t6277 * t6268;
t6171 = t6177 ^ 2;
t6172 = t6178 ^ 2;
t6173 = t6179 ^ 2;
t6325 = (t6091 * t6221 - t6092 * t6218) * t6485;
t6326 = (t6089 * t6220 - t6090 * t6217) * t6488;
t6327 = (t6087 * t6219 - t6088 * t6216) * t6491;
t6336 = (t6087 * t6088 * t6663 + t6089 * t6090 * t6661 + t6091 * t6092 * t6659) * t6682 + (-t6138 * t6468 - t6139 * t6460 - t6140 * t6452) * t6711 + (-t6171 * t6468 - t6172 * t6460 - t6173 * t6452) * MDP(11) + (-t6448 * t6723 - t6456 * t6724 - t6464 * t6725) * t6712 + (-t6235 * t6468 - t6239 * t6460 - t6243 * t6452) * MDP(4) + (-t6452 - t6460 - t6468) * MDP(1) + ((t6263 * t6327 + t6266 * t6326 + t6269 * t6325) * MDP(6) + (t6272 * t6327 + t6275 * t6326 + t6278 * t6325) * MDP(7)) * t6297;
t6305 = t6216 * t6434 + t6217 * t6432 + t6218 * t6430;
t6306 = t6216 * t6435 + t6217 * t6433 + t6218 * t6431;
t6309 = t6087 * t6420 + t6089 * t6412 + t6091 * t6404;
t6310 = t6087 * t6422 + t6089 * t6414 + t6091 * t6406;
t6335 = (-t6310 * t6297 - t6306 / 0.2e1) * MDP(6) + (-t6309 * t6297 - t6305 / 0.2e1) * MDP(7) + (t6087 * t6501 + t6089 * t6498 + t6091 * t6495) * t6582 + (t6138 * t6467 + t6139 * t6459 + t6140 * t6451) * t6711 + (t6171 * t6467 + t6172 * t6459 + t6173 * t6451) * MDP(11) + (t6216 * t6400 + t6217 * t6397 + t6218 * t6394) * t6712 + (t6216 * t6465 + t6217 * t6457 + t6218 * t6449) * MDP(4) + (t6451 + t6459 + t6467) * MDP(1);
t6303 = t6219 * t6434 + t6220 * t6432 + t6221 * t6430;
t6304 = t6219 * t6435 + t6220 * t6433 + t6221 * t6431;
t6307 = t6088 * t6420 + t6090 * t6412 + t6092 * t6404;
t6308 = t6088 * t6422 + t6090 * t6414 + t6092 * t6406;
t6334 = (-t6308 * t6297 + t6304 / 0.2e1) * MDP(6) + (-t6307 * t6297 + t6303 / 0.2e1) * MDP(7) + (t6088 * t6501 + t6090 * t6498 + t6092 * t6495) * t6582 + (-t6138 * t6466 - t6139 * t6458 - t6140 * t6450) * t6711 + (-t6171 * t6466 - t6172 * t6458 - t6173 * t6450) * MDP(11) + (-t6219 * t6400 - t6220 * t6397 - t6221 * t6394) * t6712 + (-t6219 * t6465 - t6220 * t6457 - t6221 * t6449) * MDP(4) + (-t6450 - t6458 - t6466) * MDP(1);
t6333 = 0.2e1 * t6180 * t6380;
t6332 = 0.2e1 * t6182 * t6378;
t6331 = 0.2e1 * t6184 * t6376;
t6324 = -0.2e1 * t6722 * t6658;
t6323 = -0.2e1 * t6721 * t6654;
t6322 = -0.2e1 * t6720 * t6650;
t6069 = t6087 * t6562;
t6021 = t6081 * t6490 + t6069;
t6321 = t6180 * (-t6021 * t6264 - t6630 * t6722);
t6070 = t6088 * t6562;
t6022 = t6082 * t6490 + t6070;
t6320 = t6180 * (-t6022 * t6264 + t6624 * t6722);
t6071 = t6089 * t6560;
t6023 = t6083 * t6487 + t6071;
t6319 = t6182 * (-t6023 * t6267 - t6628 * t6721);
t6072 = t6090 * t6560;
t6024 = t6084 * t6487 + t6072;
t6318 = t6182 * (-t6024 * t6267 + t6622 * t6721);
t6073 = t6091 * t6558;
t6025 = t6085 * t6484 + t6073;
t6317 = t6184 * (-t6025 * t6270 - t6626 * t6720);
t6074 = t6092 * t6558;
t6026 = t6086 * t6484 + t6074;
t6316 = t6184 * (-t6026 * t6270 + t6620 * t6720);
t6315 = t6180 * t6717;
t6314 = t6182 * t6718;
t6313 = t6184 * t6719;
t6312 = t6263 * t6500 + t6266 * t6497 + t6269 * t6494;
t6311 = t6272 * t6500 + t6275 * t6497 + t6278 * t6494;
t6302 = t6087 * t6371 + t6089 * t6363 + t6091 * t6355;
t6301 = t6087 * t6370 + t6089 * t6362 + t6091 * t6354;
t6300 = t6088 * t6369 + t6090 * t6361 + t6092 * t6353;
t6299 = t6088 * t6368 + t6090 * t6360 + t6092 * t6352;
t6152 = t6277 * t6454;
t6151 = t6274 * t6462;
t6150 = t6271 * t6470;
t6149 = t6268 * t6454;
t6148 = t6265 * t6462;
t6147 = t6262 * t6470;
t6146 = t6218 * t6395;
t6145 = t6217 * t6398;
t6144 = t6216 * t6401;
t6143 = t6218 * t6396;
t6142 = t6217 * t6399;
t6141 = t6216 * t6402;
t6104 = pkin(2) * t6107 + t6445;
t6103 = pkin(2) * t6106 + t6446;
t6102 = pkin(2) * t6105 + t6447;
t6101 = 0.2e1 * t6269 * t6590 - t6278 * t6505;
t6100 = 0.2e1 * t6266 * t6592 - t6275 * t6506;
t6099 = 0.2e1 * t6263 * t6594 - t6272 * t6507;
t6098 = -t6269 * t6505 - 0.2e1 * t6278 * t6590;
t6097 = -t6266 * t6506 - 0.2e1 * t6275 * t6592;
t6096 = -t6263 * t6507 - 0.2e1 * t6272 * t6594;
t6080 = -t6104 * t6268 + t6152;
t6079 = t6104 * t6277 + t6149;
t6078 = -t6103 * t6265 + t6151;
t6077 = t6103 * t6274 + t6148;
t6076 = -t6102 * t6262 + t6150;
t6075 = t6102 * t6271 + t6147;
t6068 = t6388 - t6570;
t6067 = t6389 - t6572;
t6066 = t6390 - t6574;
t6065 = t6391 + t6571;
t6064 = t6392 + t6573;
t6063 = t6393 + t6575;
t6062 = -t6092 * t6436 - 0.2e1 * t6221 * t6512;
t6061 = -t6091 * t6436 + 0.2e1 * t6218 * t6512;
t6060 = -t6090 * t6438 - 0.2e1 * t6220 * t6515;
t6059 = -t6089 * t6438 + 0.2e1 * t6217 * t6515;
t6058 = -t6088 * t6440 - 0.2e1 * t6219 * t6518;
t6057 = -t6087 * t6440 + 0.2e1 * t6216 * t6518;
t6056 = -t6092 * t6437 + t6511 * t6726;
t6055 = -t6091 * t6437 + t6511 * t6729;
t6054 = -t6090 * t6439 + t6514 * t6727;
t6053 = -t6089 * t6439 + t6514 * t6730;
t6052 = -t6088 * t6441 + t6517 * t6728;
t6051 = -t6087 * t6441 + t6517 * t6731;
t6047 = -t6068 * t6277 - t6347;
t6046 = t6068 * t6268 - t6346;
t6045 = -t6067 * t6274 - t6349;
t6044 = t6067 * t6265 - t6348;
t6043 = -t6066 * t6271 - t6351;
t6042 = t6066 * t6262 - t6350;
t6041 = -t6065 * t6268 + t6146;
t6040 = t6065 * t6277 + t6143;
t6039 = -t6064 * t6265 + t6145;
t6038 = t6064 * t6274 + t6142;
t6037 = -t6063 * t6262 + t6144;
t6036 = t6063 * t6271 + t6141;
t6035 = t6445 + (t6120 * t6385 + t6107) * t6714;
t6034 = t6446 + (t6119 * t6386 + t6106) * t6714;
t6033 = t6447 + (t6118 * t6387 + t6105) * t6714;
t6032 = -t6035 * t6268 + t6152;
t6031 = t6035 * t6277 + t6149;
t6030 = -t6034 * t6265 + t6151;
t6029 = t6034 * t6274 + t6148;
t6028 = -t6033 * t6262 + t6150;
t6027 = t6033 * t6271 + t6147;
t6020 = t6388 + (t6086 * t6385 + t6074) * t6715;
t6019 = t6389 + (t6084 * t6386 + t6072) * t6715;
t6018 = t6390 + (t6082 * t6387 + t6070) * t6715;
t6017 = t6391 + (t6085 * t6385 + t6073) * t6714;
t6016 = t6392 + (t6083 * t6386 + t6071) * t6714;
t6015 = t6393 + (t6081 * t6387 + t6069) * t6714;
t6014 = -t6020 * t6277 - t6347;
t6013 = t6020 * t6268 - t6346;
t6012 = -t6019 * t6274 - t6349;
t6011 = t6019 * t6265 - t6348;
t6010 = -t6018 * t6271 - t6351;
t6009 = t6018 * t6262 - t6350;
t6008 = -t6017 * t6268 + t6146;
t6007 = t6017 * t6277 + t6143;
t6006 = -t6016 * t6265 + t6145;
t6005 = t6016 * t6274 + t6142;
t6004 = -t6015 * t6262 + t6144;
t6003 = t6015 * t6271 + t6141;
t6002 = t6270 * t6313 + t6340 * t6720;
t6001 = t6267 * t6314 + t6341 * t6721;
t6000 = t6264 * t6315 + t6342 * t6722;
t5999 = -0.2e1 * t6270 * t6508 + (t6270 * t6331 - t6607 * t6720) * t6278 + (-t6268 * t6590 + t6525 * t6720) * t6701;
t5998 = -0.2e1 * t6267 * t6509 + (t6267 * t6332 - t6611 * t6721) * t6275 + (-t6265 * t6592 + t6526 * t6721) * t6702;
t5997 = -0.2e1 * t6264 * t6510 + (t6264 * t6333 - t6615 * t6722) * t6272 + (-t6262 * t6594 + t6527 * t6722) * t6703;
t5996 = t6026 * t6340 - t6719 * t6538;
t5995 = t6025 * t6340 + t6313 * t6626;
t5994 = t6024 * t6341 - t6718 * t6547;
t5993 = t6023 * t6341 + t6314 * t6628;
t5992 = t6022 * t6342 - t6717 * t6556;
t5991 = t6021 * t6342 + t6315 * t6630;
t5990 = t6442 * t6726 + (-t6026 * t6607 - 0.2e1 * t6376 * t6538) * t6278 + (t6026 * t6525 + t6221 * t6513) * t6701;
t5989 = t6442 * t6729 + (-t6025 * t6607 + t6331 * t6626) * t6278 + (t6025 * t6525 - t6218 * t6513) * t6701;
t5988 = t6443 * t6727 + (-t6024 * t6611 - 0.2e1 * t6378 * t6547) * t6275 + (t6024 * t6526 + t6220 * t6516) * t6702;
t5987 = t6443 * t6730 + (-t6023 * t6611 + t6332 * t6628) * t6275 + (t6023 * t6526 - t6217 * t6516) * t6702;
t5986 = t6444 * t6728 + (-t6022 * t6615 - 0.2e1 * t6380 * t6556) * t6272 + (t6022 * t6527 + t6219 * t6519) * t6703;
t5985 = t6444 * t6731 + (-t6021 * t6615 + t6333 * t6630) * t6272 + (t6021 * t6527 - t6216 * t6519) * t6703;
t1 = [(t6534 + t6543 + t6552) * MDP(1) + (t6207 * t6551 + t6208 * t6542 + t6209 * t6533) * MDP(4) + (t6207 * t6464 + t6208 * t6456 + t6209 * t6448) * t6712 + t6300 * t6524 + t6299 * t6523 + (t6088 ^ 2 * t6663 + t6090 ^ 2 * t6661 + t6092 ^ 2 * t6659) * t6682 + (t6052 * t6556 + t6054 * t6547 + t6056 * t6538 - t6300 * t6695) * MDP(9) + (t6058 * t6556 + t6060 * t6547 + t6062 * t6538 - t6299 * t6695) * MDP(10) + (t6171 * t6552 + t6172 * t6543 + t6173 * t6534) * MDP(11) + (t6138 * t6552 + t6139 * t6543 + t6140 * t6534) * t6711 + (t6022 * t6476 + t6024 * t6474 + t6026 * t6472 + (t6088 * t6372 + t6090 * t6364 + t6092 * t6356 + (t6082 * t6372 + t6084 * t6364 + t6086 * t6356) * t6295) * t6297) * MDP(13) + (-t6022 * t6482 - t6024 * t6480 - t6026 * t6478 + (-t6088 * t6374 - t6090 * t6366 - t6092 * t6358 + (-t6082 * t6374 - t6084 * t6366 - t6086 * t6358) * t6295) * t6297) * MDP(14) + (t6022 * t6574 + t6024 * t6572 + t6026 * t6570 + (t6022 * t6580 + t6024 * t6578 + t6026 * t6576) * t6295) * t6675 + (t5986 * t6556 + t5988 * t6547 + t5990 * t6538 + (t6010 * t6574 + t6012 * t6572 + t6014 * t6570 + (t6043 * t6580 + t6045 * t6578 + t6047 * t6576) * t6295) * t6297) * MDP(16) + (t5992 * t6556 + t5994 * t6547 + t5996 * t6538 + (t6009 * t6574 + t6011 * t6572 + t6013 * t6570 + (t6042 * t6580 + t6044 * t6578 + t6046 * t6576) * t6295) * t6297) * MDP(17) + MDP(18); (t6051 * t6556 + t6053 * t6547 + t6055 * t6538 + (t6088 * t6371 + t6090 * t6363 + t6092 * t6355) * t6695) * MDP(9) + (t6057 * t6556 + t6059 * t6547 + t6061 * t6538 + (t6088 * t6370 + t6090 * t6362 + t6092 * t6354) * t6695) * MDP(10) + (t6021 * t6476 + t6023 * t6474 + t6025 * t6472 + (-t6088 * t6373 - t6090 * t6365 - t6092 * t6357 + (-t6082 * t6373 - t6084 * t6365 - t6086 * t6357) * t6295) * t6297) * MDP(13) + (-t6021 * t6482 - t6023 * t6480 - t6025 * t6478 + (t6088 * t6375 + t6090 * t6367 + t6092 * t6359 + (t6082 * t6375 + t6084 * t6367 + t6086 * t6359) * t6295) * t6297) * MDP(14) + (t6021 * t6574 + t6023 * t6572 + t6025 * t6570 + (t6021 * t6580 + t6023 * t6578 + t6025 * t6576) * t6295) * t6675 + (t5985 * t6556 + t5987 * t6547 + t5989 * t6538 + (t6003 * t6574 + t6005 * t6572 + t6007 * t6570 + (t6036 * t6580 + t6038 * t6578 + t6040 * t6576) * t6295) * t6297) * MDP(16) + (t5991 * t6556 + t5993 * t6547 + t5995 * t6538 + (t6004 * t6574 + t6006 * t6572 + t6008 * t6570 + (t6037 * t6580 + t6039 * t6578 + t6041 * t6576) * t6295) * t6297) * MDP(17) + t6336; (t6096 * t6556 + t6097 * t6547 + t6098 * t6538 + t6308 * t6695) * MDP(9) + (t6099 * t6556 + t6100 * t6547 + t6101 * t6538 + t6307 * t6695) * MDP(10) + (t6722 * t6476 + t6721 * t6474 + t6720 * t6472 + (-t6088 * t6425 - t6090 * t6417 - t6092 * t6409 + (-t6082 * t6425 - t6084 * t6417 - t6086 * t6409) * t6295) * t6297) * MDP(13) + (-t6722 * t6482 - t6721 * t6480 - t6720 * t6478 + (t6088 * t6426 + t6090 * t6418 + t6092 * t6410 + (t6082 * t6426 + t6084 * t6418 + t6086 * t6410) * t6295) * t6297) * MDP(14) + (t6722 * t6574 + t6721 * t6572 + t6720 * t6570 + (t6576 * t6720 + t6578 * t6721 + t6580 * t6722) * t6295) * t6675 + (t5997 * t6556 + t5998 * t6547 + t5999 * t6538 + (t6027 * t6574 + t6029 * t6572 + t6031 * t6570 + (t6075 * t6580 + t6077 * t6578 + t6079 * t6576) * t6295) * t6297) * MDP(16) + (t6000 * t6556 + t6001 * t6547 + t6002 * t6538 + (t6028 * t6574 + t6030 * t6572 + t6032 * t6570 + (t6076 * t6580 + t6078 * t6578 + t6080 * t6576) * t6295) * t6297) * MDP(17) + t6334; (-t6052 * t6557 - t6054 * t6548 - t6056 * t6539 + (-t6087 * t6369 - t6089 * t6361 - t6091 * t6353) * t6695) * MDP(9) + (-t6058 * t6557 - t6060 * t6548 - t6062 * t6539 + (-t6087 * t6368 - t6089 * t6360 - t6091 * t6352) * t6695) * MDP(10) + (-t6022 * t6477 - t6024 * t6475 - t6026 * t6473 + (t6087 * t6372 + t6089 * t6364 + t6091 * t6356 + (t6081 * t6372 + t6083 * t6364 + t6085 * t6356) * t6295) * t6297) * MDP(13) + (t6022 * t6483 + t6024 * t6481 + t6026 * t6479 + (-t6087 * t6374 - t6089 * t6366 - t6091 * t6358 + (-t6081 * t6374 - t6083 * t6366 - t6085 * t6358) * t6295) * t6297) * MDP(14) + (t6022 * t6575 + t6024 * t6573 + t6026 * t6571 + (t6022 * t6581 + t6024 * t6579 + t6026 * t6577) * t6295) * t6675 + (-t5986 * t6557 - t5988 * t6548 - t5990 * t6539 + (t6010 * t6575 + t6012 * t6573 + t6014 * t6571 + (t6043 * t6581 + t6045 * t6579 + t6047 * t6577) * t6295) * t6297) * MDP(16) + (-t5992 * t6557 - t5994 * t6548 - t5996 * t6539 + (t6009 * t6575 + t6011 * t6573 + t6013 * t6571 + (t6042 * t6581 + t6044 * t6579 + t6046 * t6577) * t6295) * t6297) * MDP(17) + t6336; (t6535 + t6544 + t6553) * MDP(1) + (t6204 * t6551 + t6205 * t6542 + t6206 * t6533) * MDP(4) + (t6204 * t6464 + t6205 * t6456 + t6206 * t6448) * t6712 - t6302 * t6524 - t6301 * t6523 + (t6087 ^ 2 * t6663 + t6089 ^ 2 * t6661 + t6091 ^ 2 * t6659) * t6682 + (-t6051 * t6557 - t6053 * t6548 - t6055 * t6539 + t6302 * t6695) * MDP(9) + (-t6057 * t6557 - t6059 * t6548 - t6061 * t6539 + t6301 * t6695) * MDP(10) + (t6171 * t6553 + t6172 * t6544 + t6173 * t6535) * MDP(11) + (t6138 * t6553 + t6139 * t6544 + t6140 * t6535) * t6711 + (-t6021 * t6477 - t6023 * t6475 - t6025 * t6473 + (-t6087 * t6373 - t6089 * t6365 - t6091 * t6357 + (-t6081 * t6373 - t6083 * t6365 - t6085 * t6357) * t6295) * t6297) * MDP(13) + (t6021 * t6483 + t6023 * t6481 + t6025 * t6479 + (t6087 * t6375 + t6089 * t6367 + t6091 * t6359 + (t6081 * t6375 + t6083 * t6367 + t6085 * t6359) * t6295) * t6297) * MDP(14) + (t6021 * t6575 + t6023 * t6573 + t6025 * t6571 + (t6021 * t6581 + t6023 * t6579 + t6025 * t6577) * t6295) * t6675 + (-t5985 * t6557 - t5987 * t6548 - t5989 * t6539 + (t6003 * t6575 + t6005 * t6573 + t6007 * t6571 + (t6036 * t6581 + t6038 * t6579 + t6040 * t6577) * t6295) * t6297) * MDP(16) + (-t5991 * t6557 - t5993 * t6548 - t5995 * t6539 + (t6004 * t6575 + t6006 * t6573 + t6008 * t6571 + (t6037 * t6581 + t6039 * t6579 + t6041 * t6577) * t6295) * t6297) * MDP(17) + MDP(18); (-t6096 * t6557 - t6097 * t6548 - t6098 * t6539 + t6310 * t6695) * MDP(9) + (-t6099 * t6557 - t6100 * t6548 - t6101 * t6539 + t6309 * t6695) * MDP(10) + (-t6722 * t6477 - t6721 * t6475 - t6720 * t6473 + (-t6087 * t6425 - t6089 * t6417 - t6091 * t6409 + (-t6081 * t6425 - t6083 * t6417 - t6085 * t6409) * t6295) * t6297) * MDP(13) + (t6722 * t6483 + t6721 * t6481 + t6720 * t6479 + (t6087 * t6426 + t6089 * t6418 + t6091 * t6410 + (t6081 * t6426 + t6083 * t6418 + t6085 * t6410) * t6295) * t6297) * MDP(14) + (t6722 * t6575 + t6721 * t6573 + t6720 * t6571 + (t6577 * t6720 + t6579 * t6721 + t6581 * t6722) * t6295) * t6675 + (-t5997 * t6557 - t5998 * t6548 - t5999 * t6539 + (t6027 * t6575 + t6029 * t6573 + t6031 * t6571 + (t6075 * t6581 + t6077 * t6579 + t6079 * t6577) * t6295) * t6297) * MDP(16) + (-t6000 * t6557 - t6001 * t6548 - t6002 * t6539 + (t6028 * t6575 + t6030 * t6573 + t6032 * t6571 + (t6076 * t6581 + t6078 * t6579 + t6080 * t6577) * t6295) * t6297) * MDP(17) + t6335; (-t6052 * t6658 - t6054 * t6654 - t6056 * t6650 - t6304 * t6696) * MDP(9) + (-t6058 * t6658 - t6060 * t6654 - t6062 * t6650 - t6303 * t6696) * MDP(10) + (t6177 * t6320 + t6178 * t6318 + t6179 * t6316) * MDP(13) + (-t6316 * t6382 - t6318 * t6383 - t6320 * t6384) * MDP(14) + ((t6022 * t6566 + t6024 * t6565 + t6026 * t6564) * t6604 + t6022 * t6105 + t6024 * t6106 + t6026 * t6107) * MDP(15) + (-t5986 * t6658 - t5988 * t6654 - t5990 * t6650 + (t6043 * t6566 + t6045 * t6565 + t6047 * t6564) * t6604 + t6010 * t6105 + t6012 * t6106 + t6014 * t6107) * MDP(16) + (-t5992 * t6658 - t5994 * t6654 - t5996 * t6650 + (t6042 * t6566 + t6044 * t6565 + t6046 * t6564) * t6604 + t6009 * t6105 + t6011 * t6106 + t6013 * t6107) * MDP(17) + t6334; (-t6051 * t6658 - t6053 * t6654 - t6055 * t6650 + t6306 * t6696) * MDP(9) + (-t6057 * t6658 - t6059 * t6654 - t6061 * t6650 + t6305 * t6696) * MDP(10) + (t6177 * t6321 + t6178 * t6319 + t6179 * t6317) * MDP(13) + (-t6317 * t6382 - t6319 * t6383 - t6321 * t6384) * MDP(14) + ((t6021 * t6566 + t6023 * t6565 + t6025 * t6564) * t6604 + t6021 * t6105 + t6023 * t6106 + t6025 * t6107) * MDP(15) + (-t5985 * t6658 - t5987 * t6654 - t5989 * t6650 + (t6036 * t6566 + t6038 * t6565 + t6040 * t6564) * t6604 + t6003 * t6105 + t6005 * t6106 + t6007 * t6107) * MDP(16) + (-t5991 * t6658 - t5993 * t6654 - t5995 * t6650 + (t6037 * t6566 + t6039 * t6565 + t6041 * t6564) * t6604 + t6004 * t6105 + t6006 * t6106 + t6008 * t6107) * MDP(17) + t6335; (t6648 + t6652 + t6656) * MDP(1) + (t6235 * t6656 + t6239 * t6652 + t6243 * t6648) * MDP(4) + (t6236 * t6550 + t6240 * t6541 + t6244 * t6532) * t6712 + (t6116 ^ 2 / t6131 ^ 2 + t6115 ^ 2 / t6130 ^ 2 + t6114 ^ 2 / t6129 ^ 2) * MDP(8) / 0.4e1 + (-t6096 * t6658 - t6097 * t6654 - t6098 * t6650 + t6312 * t6696) * MDP(9) + (-t6099 * t6658 - t6100 * t6654 - t6101 * t6650 + t6311 * t6696) * MDP(10) + (t6171 * t6656 + t6172 * t6652 + t6173 * t6648) * MDP(11) + (t6138 * t6656 + t6139 * t6652 + t6140 * t6648) * t6711 + (t6177 * t6324 + t6178 * t6323 + t6179 * t6322) * MDP(13) + (-t6322 * t6382 - t6323 * t6383 - t6324 * t6384) * MDP(14) + ((t6564 * t6720 + t6565 * t6721 + t6566 * t6722) * t6604 + t6722 * t6105 + t6721 * t6106 + t6720 * t6107) * MDP(15) + (-t5997 * t6658 - t5998 * t6654 - t5999 * t6650 + (t6075 * t6566 + t6077 * t6565 + t6079 * t6564) * t6604 + t6027 * t6105 + t6029 * t6106 + t6031 * t6107) * MDP(16) + (-t6000 * t6658 - t6001 * t6654 - t6002 * t6650 + (t6076 * t6566 + t6078 * t6565 + t6080 * t6564) * t6604 + t6028 * t6105 + t6030 * t6106 + t6032 * t6107) * MDP(17) + MDP(18) - t6312 * MDP(6) - t6311 * MDP(7);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
