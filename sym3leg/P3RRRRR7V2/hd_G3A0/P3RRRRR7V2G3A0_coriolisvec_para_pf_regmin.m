% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR7V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 10:47
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR7V2G3A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V2G3A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR7V2G3A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V2G3A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRRRR7V2G3A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V2G3A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V2G3A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 10:30:40
% EndTime: 2020-08-07 10:36:03
% DurationCPUTime: 346.85s
% Computational Cost: add. (4691421->1802), mult. (10213917->2984), div. (74106->37), fcn. (5728686->186), ass. (0->1237)
t4011 = 2 * pkin(1);
t4010 = 4 * pkin(2);
t4009 = 2 * pkin(1);
t3088 = sin(qJ(3,3));
t3010 = 0.1e1 / t3088;
t3109 = pkin(5) + pkin(6);
t3007 = -pkin(7) - t3109;
t3090 = sin(qJ(1,3));
t2820 = t3090 * t3007;
t3099 = cos(qJ(1,3));
t2979 = pkin(1) * t3099;
t2823 = t3099 * t3007;
t2974 = pkin(1) * t3090;
t3106 = xDP(3);
t3763 = (t2823 + t2974) * t3106;
t3085 = legFrame(3,2);
t2954 = sin(t3085);
t2957 = cos(t3085);
t3107 = xDP(2);
t3108 = xDP(1);
t3999 = -t2954 * t3107 + t2957 * t3108;
t2630 = -t3763 / 0.2e1 + t3999 * (t2979 - t2820 / 0.2e1);
t2708 = t2954 * t3108 + t2957 * t3107;
t2702 = pkin(1) * t2708;
t3089 = sin(qJ(2,3));
t3710 = t3089 * t3099;
t3479 = t3999 * t3710;
t2633 = -pkin(2) * t3479 + t2702;
t3688 = t3099 * t3108;
t3689 = t3099 * t3107;
t3290 = -t2954 * t3689 + t2957 * t3688;
t2639 = t3290 * pkin(1) - t3763;
t2760 = t2979 - t2820;
t2651 = t2760 * t3999;
t3097 = cos(qJ(3,3));
t2964 = t3097 * pkin(3);
t2835 = t2964 + pkin(2);
t2960 = t3088 * pkin(1);
t3020 = t3097 ^ 2;
t3894 = t3020 - 0.1e1;
t3604 = pkin(3) * t3894;
t3098 = cos(qJ(2,3));
t3714 = t3088 * t3098;
t2654 = t2835 * t3714 + t3089 * t3604 + t2960;
t3781 = t2708 * t3089;
t2684 = pkin(2) * t3781;
t2687 = pkin(1) * t3781;
t3715 = t3088 * t3089;
t3569 = pkin(3) * t3715;
t2783 = pkin(1) - t3569;
t3752 = t2835 * t3098;
t2699 = t2783 + t3752;
t2810 = pkin(1) * t2820;
t3147 = pkin(3) ^ 2;
t3080 = t3147 / 0.2e1;
t3154 = pkin(1) ^ 2;
t2947 = t3080 + t3154;
t3151 = pkin(2) ^ 2;
t3084 = t3151 / 0.2e1;
t2813 = t3084 + t2947;
t2859 = -0.2e1 / 0.3e1 * pkin(5) - 0.2e1 / 0.3e1 * pkin(6) - 0.2e1 / 0.3e1 * pkin(7);
t3081 = -t3147 / 0.2e1;
t2946 = t3081 + t3151;
t2970 = pkin(3) * t3020;
t2988 = t3147 + t3154;
t3119 = 0.2e1 * qJ(3,3);
t2990 = sin(t3119);
t3019 = t3097 * t3020;
t3022 = t3098 ^ 2;
t3021 = t3098 * t3022;
t3293 = t3999 * (t2979 - t2820 / 0.3e1);
t3673 = (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t3607 = 0.2e1 * t3673;
t3775 = t3999 * t3099;
t3296 = t3607 * t3775;
t3690 = t3097 * t3098;
t3332 = t3690 * t3715;
t3123 = 0.2e1 * qJ(2,3);
t3000 = cos(t3123);
t3679 = t3106 * t3090;
t3335 = t2654 * t3000 * t3679;
t3562 = pkin(2) * t3679;
t3410 = t3089 * t3562;
t3478 = t3097 * t3775;
t3413 = pkin(2) * t3478;
t2991 = sin(t3123);
t3462 = t2991 * t3679;
t3465 = t2760 * t3715;
t3480 = t3088 * t3775;
t2973 = pkin(1) * t3089;
t3865 = pkin(3) * t3088;
t2780 = t2973 - t3865;
t3760 = t2780 * t3097;
t3483 = t2708 * t3760;
t3885 = pkin(2) * t2708;
t3633 = pkin(1) * t3885;
t3555 = 0.4e1 * t3633;
t3851 = t3089 * pkin(2);
t3570 = t2630 * t3851;
t3598 = pkin(1) * t2823;
t3691 = t3097 * t3088;
t3610 = 0.2e1 * t3691;
t3930 = 0.2e1 * t2947;
t3614 = t2708 * t3930;
t3648 = -0.4e1 * t3019 + 0.5e1 * t3097;
t3655 = t2684 + t2651;
t3713 = t3089 * (-(t2947 * t3090 + t3598) * t3106 + t3999 * (t2947 * t3099 - t2810));
t3721 = t3020 * t3089;
t3780 = t2708 * t3097;
t3849 = t3098 * pkin(3);
t3850 = t3097 * pkin(2);
t2998 = cos(t3119);
t3871 = pkin(3) * t2998;
t3925 = 0.2e1 * t3020;
t3893 = t3925 - 0.1e1;
t3904 = pkin(2) * pkin(3);
t3910 = -pkin(2) / 0.2e1;
t3916 = -0.2e1 * t3106;
t3924 = 0.4e1 * t3020;
t3926 = -0.2e1 * t2988;
t3931 = -0.2e1 * t2946;
t3938 = -0.3e1 * pkin(3);
t3939 = -0.5e1 * pkin(3);
t3619 = -0.2e1 * t2708 * t3020;
t3981 = (0.2e1 * t3088 * t3478 + t2708 + t3619) * pkin(3);
t2579 = (-t3335 + ((t3480 - t3780) * pkin(2) + t3981) * t3021 + (-t2702 * t3097 + t3655 * t3088 + (t3413 + (t2708 * t3610 + t3775 * t3893) * pkin(3)) * t3089) * t3022 + ((t2651 * t3089 + t3885) * t3097 + (-pkin(2) * t3775 + t2687) * t3088 - t3981) * t3098 - t3479 * t2970 + t2783 * t3780 - t3999 * (-pkin(3) * t3710 + t2760 * t3088)) * t3871 + pkin(3) * (t2654 * t3462 + ((t3088 * t3885 + t3413) * t3022 + (t2633 * t3088 + t3097 * t3655) * t3098 + t3483 - t3999 * t3465) * t3098 + ((t3022 * t3610 + (-t3089 + 0.2e1 * t3721) * t3098) * t2708 + (t3022 * t3893 - 0.2e1 * t3332 - t3894) * t3775) * t3849) * t2990 - (t3097 + 0.1e1) * t2699 * pkin(2) * (t3097 - 0.1e1) * t3462 - t3335 * t3850 + (t3296 * t3691 + 0.2e1 * (-t3020 * t3673 + t2946) * t2708 + ((t3924 - 0.3e1) * t3480 + t3648 * t2708) * t3904) * t3021 + ((t3089 * t3296 - 0.4e1 * t3633) * t3020 + (t2630 * t4010 + t3607 * t3781) * t3691 + t3479 * t3931 + t3555 + ((t2639 + t2684) * t3088 * t3924 - 0.3e1 * (t2684 - 0.2e1 / 0.3e1 * t3763 + t3293) * t3088 + t3648 * t2633) * pkin(3)) * t3022 + ((0.4e1 * (t2687 + (t3679 / 0.2e1 + t3290) * t3910) * t3865 + 0.4e1 * t3570 + t2708 * t3926) * t3020 + ((t3089 * t3555 + (t2813 * t3090 + t3598) * t3916 + 0.2e1 * t3999 * (t2988 * t3099 - t2810)) * t3088 + ((-0.4e1 / 0.5e1 * t3763 + t3999 * (t2979 - t2820 / 0.5e1)) * t3089 + 0.3e1 / 0.5e1 * t3885) * t3939) * t3097 - 0.3e1 * (t2687 - pkin(2) * (-t3679 / 0.3e1 + t3290)) * t3865 - 0.4e1 * t3570 + t3614) * t3098 + (-t2639 * t3865 + t3713) * t3925 + ((-pkin(1) * t3562 + t3089 * t3614) * t3088 + (-t3410 / 0.3e1 + t2702) * t3938) * t3097 + 0.3e1 * (-(t2859 * t3099 + t2974) * t3106 + t3293) * t3865 - 0.2e1 * t3713 + ((0.4e1 * t2639 * t3089 + 0.2e1 * t3885) * t3098 - t3410 + 0.2e1 * t2702) * pkin(3) * t3019;
t2861 = pkin(2) * t2964;
t3905 = pkin(1) * pkin(3);
t3630 = -0.3e1 / 0.2e1 * t3905;
t3711 = t3089 * t3098;
t3720 = t3022 * t3088;
t3864 = pkin(3) * t3089;
t3901 = t2990 / 0.2e1;
t3929 = 0.2e1 * t2960;
t2610 = (t2835 * t3711 + t2973 + (t3022 - 0.1e1) * t3865) * t3871 / 0.2e1 + t2699 * t3849 * t3901 + (t2861 + t2946) * t3720 + ((t2960 - t3864 / 0.2e1) * t2964 + (t3929 + (t3020 - 0.3e1 / 0.2e1) * t3864) * pkin(2)) * t3098 + t3721 * t3905 + t2947 * t3088 + t3089 * t3630;
t3814 = t2579 / t2610;
t3507 = t3010 * t3814;
t3322 = t3507 / 0.2e1;
t2573 = pkin(2) * t3322;
t3152 = 1 / pkin(2);
t2570 = t3152 * t3322;
t3641 = t3147 - t3151;
t2778 = t3641 * t3107;
t2779 = t3641 * t3108;
t2817 = pkin(1) * t3715;
t2789 = t2817 - pkin(3);
t2784 = pkin(1) - 0.2e1 * t3569;
t3227 = t2784 * t3099 - t2820;
t3456 = t3088 * t3710;
t3331 = t3007 * t3456;
t2963 = t3020 * t3147;
t3449 = (t3290 - t3679) * t2963;
t3453 = t3106 * t3673;
t3459 = t3089 * t2820;
t3840 = -0.2e1 * t3904;
t3551 = t3108 * t3840;
t3552 = t3107 * t3840;
t3856 = pkin(3) * t3108;
t3575 = t3088 * t3856;
t3857 = pkin(3) * t3107;
t3576 = t3088 * t3857;
t3589 = t3108 * t3851;
t3590 = t3107 * t3851;
t3708 = t3089 * t3147;
t3975 = t2784 * t3090 + t2823;
t3790 = t3975 * t3106;
t3858 = pkin(3) * t3106;
t3875 = pkin(2) * t3108;
t3876 = pkin(2) * t3107;
t2588 = (-0.2e1 * t3449 - 0.2e1 * ((pkin(2) * t3688 + t3576) * t2957 + (-pkin(2) * t3689 + t3575) * t2954 - t3562) * t2964 + (t2779 * t3099 + t3088 * t3552) * t2957 + (-t2778 * t3099 + t3088 * t3551) * t2954 + t3090 * t3453) * t3022 + (t3619 * t3708 - ((t3108 * t3227 + 0.2e1 * t3590) * t2957 + (-t3107 * t3227 + 0.2e1 * t3589) * t2954 - t3790) * t2964 + (-pkin(1) * t3576 + t2778 * t3089 - t3227 * t3875) * t2957 + (-pkin(1) * t3575 + t2779 * t3089 + t3227 * t3876) * t2954 + pkin(2) * t3790) * t3098 + t3449 - pkin(3) * t3483 + (-pkin(1) * t3590 + (t2789 * t3688 + (-t3108 * t3459 + t3876) * t3088) * pkin(3)) * t2957 + (-pkin(1) * t3589 + (-t2789 * t3689 + (t3107 * t3459 + t3875) * t3088) * pkin(3)) * t2954 - (t2789 * t3090 + t3331) * t3858;
t3148 = 0.1e1 / pkin(3);
t2696 = 0.1e1 / t2699;
t3727 = t3010 * t3152;
t3486 = t2696 * t3727;
t3341 = t3148 * t3486;
t3260 = t2588 * t3341;
t2555 = t2570 + t3260;
t3820 = t2555 * t3147;
t2534 = t2573 - t3820;
t2537 = t2573 + t3820;
t2583 = t3260 / 0.2e1;
t2549 = t2570 + t2583;
t3117 = 0.4e1 * qJ(3,3);
t3032 = t3117 + t3123;
t2870 = sin(t3032);
t3118 = 0.3e1 * qJ(3,3);
t3033 = t3118 + t3123;
t2871 = sin(t3033);
t3034 = t3119 + t3123;
t2872 = sin(t3034);
t3035 = t3119 + qJ(2,3);
t2873 = sin(t3035);
t3036 = qJ(3,3) + t3123;
t2874 = sin(t3036);
t3120 = -0.2e1 * qJ(3,3);
t3038 = t3120 + t3123;
t2876 = sin(t3038);
t3042 = qJ(2,3) + t3118;
t2877 = sin(t3042);
t3043 = qJ(2,3) + qJ(3,3);
t2878 = sin(t3043);
t3044 = qJ(2,3) - qJ(3,3);
t2879 = sin(t3044);
t3045 = qJ(2,3) + t3120;
t2880 = sin(t3045);
t3122 = 0.3e1 * qJ(2,3);
t3031 = t3117 + t3122;
t2903 = cos(t3031);
t2904 = cos(t3033);
t2906 = cos(t3035);
t2907 = cos(t3036);
t3037 = -qJ(3,3) + t3123;
t2908 = cos(t3037);
t2909 = cos(t3038);
t3039 = t3122 + t3118;
t2910 = cos(t3039);
t3040 = t3122 + t3119;
t2911 = cos(t3040);
t3041 = t3122 + qJ(3,3);
t2912 = cos(t3041);
t2913 = cos(t3042);
t2914 = cos(t3043);
t2915 = cos(t3044);
t2987 = -0.3e1 * t3147 + t3151;
t2989 = sin(t3118);
t3121 = 0.4e1 * qJ(2,3);
t3146 = pkin(3) * t3147;
t3150 = pkin(2) * t3151;
t2666 = -t3090 * t3999 - t3099 * t3106;
t3879 = pkin(2) * t3098;
t2746 = pkin(3) * t2914 + pkin(1) + t3879;
t2731 = 0.1e1 / t2746;
t3796 = t2666 * t2731;
t3350 = t3673 * t3796;
t3242 = t3007 * t3350;
t3495 = t3007 * t3796;
t3416 = pkin(3) * t3495;
t3311 = pkin(2) * t3416;
t3323 = -t3507 / 0.2e1;
t3371 = t3152 * t3507;
t3419 = pkin(3) * t3507;
t3425 = pkin(2) * t3495;
t3428 = pkin(2) * t3507;
t3855 = pkin(3) * t3151;
t3638 = 0.3e1 * t3855;
t3435 = -t3146 + t3638;
t3436 = pkin(3) * t3607;
t3442 = (t2873 - t3089) * pkin(3);
t3446 = t3673 / 0.4e1;
t3493 = t3147 * t3796;
t3544 = 0.2e1 * t3855;
t3556 = 0.12e2 * t3904;
t3670 = t3151 * sin(t3037);
t3559 = pkin(3) * t3670;
t3874 = pkin(3) * t2878;
t3582 = t2555 * t3874;
t3605 = -0.12e2 * pkin(1) * t3904;
t3606 = 0.6e1 * t3673;
t3620 = 6 * t3151;
t3622 = 0.3e1 * t3147;
t2983 = t3007 ^ 2;
t3649 = t2983 / 0.3e1 + t3154;
t2777 = t3147 / 0.3e1 + t3649;
t3627 = -0.12e2 * pkin(3) * t2777;
t3628 = 0.12e2 * pkin(3) * (t3084 + t2777);
t3897 = t3147 / 0.4e1;
t3629 = 0.24e2 * pkin(3) * (t3897 + 0.3e1 / 0.8e1 * t3151 + t3649);
t3637 = 0.4e1 * t3855;
t3639 = -0.3e1 * t3855;
t3640 = -0.5e1 * pkin(2) * t3147;
t3672 = t3147 * t3152;
t3786 = t2696 * t3148;
t3787 = t2696 * t3010;
t3839 = 0.2e1 * t3904;
t3083 = t3151 / 0.4e1;
t3445 = t3083 + t3649;
t3907 = 0.12e2 * t3080 + 0.12e2 * t3445;
t3078 = 0.3e1 / 0.4e1 * t3147;
t3908 = 0.12e2 * t3078 + 0.12e2 * t3445;
t3113 = -2 * t3151;
t3909 = -0.12e2 * t3078 + t3113 - 0.12e2 * t3649;
t3913 = 0.6e1 * t3147;
t3444 = t2983 + 0.9e1 / 0.4e1 * t3147 + t3154;
t3932 = (12 * t3151) + 0.8e1 * t3444;
t3933 = -(6 * t3151) - 0.8e1 * t3444;
t3937 = 0.2e1 * pkin(3);
t3941 = 2 * pkin(2);
t3945 = -2 * pkin(1);
t3947 = -8 * pkin(1);
t2916 = cos(t3045);
t3969 = t2916 + cos(t3122);
t3970 = -t2911 - t3098;
t3971 = -t2904 + t2907;
t3972 = -t2903 - t2906;
t3906 = pkin(1) * pkin(2);
t3985 = 8 * t3906;
t3986 = 0.2e1 * t3147;
t3990 = 4 * pkin(1);
t2905 = cos(t3034);
t3112 = -0.2e1 * t3147;
t3443 = t3112 + t3113 - (4 * t3154);
t3841 = -0.4e1 * t3904;
t3842 = 0.4e1 * t3905;
t3843 = -0.8e1 * t3905;
t3844 = 4 * t3906;
t3845 = -8 * t3906;
t3957 = t3112 + t3151;
t3995 = (4 * t3154) + (2 * t3151) + t3986;
t4002 = t3113 + t3147;
t3994 = t2905 * t3957 + cos(t3118) * t3839 + cos(t3032) * t3147 + t2907 * t3841 + t2914 * t3843 + t3098 * t3845 - 0.2e1 * t2861 + t3443 + (t2906 + t2916) * t3844 + (t2913 + t2915) * t3842 + t4002 * t3000 + t3995 * t2998;
t4005 = -t2905 + t3000 + t2998;
t2498 = -((-0.2e1 * t2588 * t2913 * t3787 + t3972 * t2555 * t3986 + 0.2e1 * t3970 * t2534 + (t3971 * t2555 * t3990 + (-(t2570 - t3260 / 0.2e1) * t2914 + (-t2910 + t2912) * t2549) * t4010) * pkin(3) + (t2915 * t3937 + t3969 * pkin(2) + (-0.1e1 + t4005) * t4011) * t3507) * t3007 + (sin(qJ(3,3) + t3121) * t3639 + t2871 * t3628 + t2874 * t3627 - 0.6e1 * t3559 + t2989 * t3638 + t3088 * t3629 + t3146 * sin(0.5e1 * qJ(3,3) + t3121) + t3435 * sin(t3118 + t3121) + (-sin(t3121) - t2876) * t3150 + (t2987 * sin(t3121 + t3119) + t2991 * t3909 + t2990 * t3908 + t2872 * t3907 + (sin(t3117 + t3121) + t2870) * t3622) * pkin(2) + (sin(t3040) * t3606 + sin(t3031) * t3913 + t3089 * t3933 + t2873 * t3932 + (-sin(t3122) - t2880) * t3620 + (sin(t3039) - sin(t3041) + t2877 + t2878 - 0.2e1 * t2879) * t3556) * pkin(1)) * t3796) / (t2904 * t3637 + (t2908 * t3839 + t2909 * t3151 + t3994) * t3941) * t3796 + (((t2573 + 0.2e1 * t3820) * t2873 * t3990 + t2880 * t3428 * t3945 + t2537 * t2871 * t3937 + (t3428 / 0.4e1 + (0.3e1 / 0.4e1 * t3814 + t2588 * t3786) * t3010 * t3672 + t3154 * t2570) * t2990 * t4010 + (t2555 * t3708 + t3425 / 0.4e1) * t3947 - 0.4e1 * t2549 * t3559 + t2555 * t2874 * t3436 + (t2570 + 0.2e1 / 0.3e1 * t3260) * t2879 * t3605 + (t2570 + 0.4e1 / 0.5e1 * t3260) * t2991 * t3640 + t3582 * t3985 + 0.8e1 * ((0.3e1 / 0.8e1 * t3371 + t2583) * t3151 + t2947 * t2555) * t3865 + t3147 * t2870 * t3322 + t3151 * t2876 * t3323 + t3972 * t3007 * t3493 + t3969 * t3151 * t3495 - 0.2e1 * (t2914 + t2910) * t3311 + 0.2e1 * (t2915 + t2912) * t3311 + t3970 * t3242 + (t2989 * t3419 + (t2573 + 0.4e1 * t3820) * t2872) * pkin(2) + t4005 * t3425 * t4009 + (t2877 * t3419 + t3971 * t3416) * t4011) * t3152 * t3323 - 0.8e1 * (((-t2904 / 0.4e1 + t2907 / 0.4e1) * pkin(1) + (t2911 / 0.8e1 - t2903 / 0.8e1 - t2906 / 0.8e1 + t3098 / 0.8e1) * pkin(3) + (-t2910 / 0.8e1 - t2913 / 0.8e1 + t2912 / 0.8e1 + t2914 / 0.8e1) * pkin(2)) * t3495 + (-t3670 / 0.4e1 + t2871 * t3897 + t2874 * t3446 + t2813 * t3088 + pkin(1) * t3442 + ((-t2879 + t2878) * pkin(1) + (t2872 / 0.2e1 - t2991 / 0.2e1 + t3901) * pkin(3)) * pkin(2)) * t2555) * t2588 * t3486) / (t3150 * t2909 + (t2904 + t2908) * t3544 + t3994 * pkin(2));
t2657 = t2666 ^ 2;
t2732 = 0.1e1 / t2746 ^ 2;
t2636 = t2657 * t2732;
t2582 = t3260 / 0.3e1;
t3494 = t3089 * t3796;
t3353 = t3007 * t3494;
t3613 = 0.2e1 * t2963;
t3636 = 0.2e1 * t2964;
t3011 = 0.1e1 / t3088 ^ 2;
t3153 = 1 / pkin(2) ^ 2;
t3726 = t3011 * t3153;
t3888 = pkin(2) * t2549;
t3984 = 0.2e1 / 0.3e1 * pkin(2);
t3272 = (0.2e1 * t2835 * t3416 * t3720 + ((t3353 + t3888) * t3613 + 0.3e1 * (t3353 * t3984 + (t3371 / 0.6e1 + t2582) * t3147 + t3151 * (t2570 + t2582)) * t2964 + t3089 * t3242 + t2537 * pkin(2)) * t3098 + (-(t2549 * t3851 + t3495 / 0.2e1) * t3865 + pkin(1) * t3888) * t3636 - (t2537 * t3089 + t3425) * t3865 + pkin(1) * t2537) * t3726 * t3814;
t3795 = t2666 * t2732;
t3896 = t3152 / 0.2e1;
t2525 = (t3582 + t3495 + (t2878 * t2588 * t2696 * t3152 + (t3089 / 0.2e1 + (t3851 + t3874) * t3896) * t3814) * t3010) * t3795;
t3709 = t3089 * t3109;
t3527 = t2525 * t3709;
t2642 = 0.1e1 / (pkin(2) * (pkin(2) * t2878 + t3442 + t3929) - t2879 * t3151);
t2984 = t3986 + t3151;
t3838 = 0.3e1 * t3904;
t3534 = ((pkin(3) * t2872 + (t2874 + t3088) * pkin(2)) * t3495 + (t3151 * t2915 + t2906 * t3904 + t2984 * t2914 + t3098 * t3838 + (pkin(3) + t3850) * t4011) * t2555) * t2588 * t2642;
t3141 = 0.2e1 * pkin(7);
t3643 = 0.2e1 * pkin(6) + t3141;
t3194 = pkin(7) ^ 2 + t3154 + (t3141 + pkin(6)) * pkin(6) + (t3643 + pkin(5)) * pkin(5);
t2718 = t3147 + t3194;
t2717 = t3622 + t3194;
t3946 = -4 * pkin(1);
t3275 = t3569 * t3946 + t2717;
t3424 = pkin(2) * t3494;
t3550 = 0.2e1 * t2861;
t3601 = pkin(1) * t3796;
t3644 = -0.3e1 / 0.4e1 * t3147 + t3083;
t3882 = pkin(2) * t3007;
t3902 = 0.3e1 / 0.2e1 * t3151 + t3081;
t3915 = -0.3e1 * t3146;
t3989 = 0.2e1 * t3022;
t3536 = (0.4e1 * (t2963 + t2861 / 0.2e1 + t3644) * t2835 * t3021 * t3796 + (t2783 * t3493 * t3925 + (-(-t2555 * t3007 + 0.3e1 * t3424) * t3865 / 0.2e1 + pkin(2) * t3601) * t3636 - (-t2549 * t3882 + t3494 * t3902) * t3865 + pkin(1) * t3350) * t3989 + ((t2549 * t3550 + t2555 * t3613 + t2534) * t3089 * t3007 + (t3019 * t3915 + t3275 * t2964 + (t3275 - 0.3e1 * t2963) * pkin(2)) * t3796) * t3098 - pkin(3) * ((t2555 * t2964 + t3322) * t3088 * t3007 + (t2718 * t3715 + (-t3020 * t3569 + (t3925 - 0.2e1) * pkin(1)) * pkin(3)) * t3796)) * t3796;
t3942 = -2 * pkin(2);
t4008 = t3527 + ((-t3272 / 0.4e1 + (-t3536 / 0.2e1 - t3534 / 0.2e1) * t3727) * t3786 + t2498) * t3942 - (pkin(1) + 0.2e1 * t3879) * t3089 * t2636;
t3091 = sin(qJ(3,2));
t3013 = 0.1e1 / t3091;
t3093 = sin(qJ(1,2));
t2821 = t3093 * t3007;
t3102 = cos(qJ(1,2));
t2980 = pkin(1) * t3102;
t2824 = t3102 * t3007;
t2976 = pkin(1) * t3093;
t3762 = (t2824 + t2976) * t3106;
t3086 = legFrame(2,2);
t2955 = sin(t3086);
t2958 = cos(t3086);
t4000 = -t2955 * t3107 + t2958 * t3108;
t2631 = -t3762 / 0.2e1 + t4000 * (t2980 - t2821 / 0.2e1);
t2709 = t2955 * t3108 + t2958 * t3107;
t2703 = pkin(1) * t2709;
t3092 = sin(qJ(2,2));
t3702 = t3092 * t3102;
t3476 = t4000 * t3702;
t2634 = -pkin(2) * t3476 + t2703;
t3684 = t3102 * t3108;
t3685 = t3102 * t3107;
t3289 = -t2955 * t3685 + t2958 * t3684;
t2640 = t3289 * pkin(1) - t3762;
t2761 = t2980 - t2821;
t2652 = t2761 * t4000;
t3100 = cos(qJ(3,2));
t2966 = t3100 * pkin(3);
t2837 = t2966 + pkin(2);
t2961 = t3091 * pkin(1);
t3024 = t3100 ^ 2;
t3892 = t3024 - 0.1e1;
t3603 = pkin(3) * t3892;
t3101 = cos(qJ(2,2));
t3706 = t3091 * t3101;
t2655 = t2837 * t3706 + t3092 * t3603 + t2961;
t3779 = t2709 * t3092;
t2685 = pkin(2) * t3779;
t2688 = pkin(1) * t3779;
t3707 = t3091 * t3092;
t3568 = pkin(3) * t3707;
t2785 = pkin(1) - t3568;
t3749 = t2837 * t3101;
t2700 = t2785 + t3749;
t2811 = pkin(1) * t2821;
t2971 = pkin(3) * t3024;
t3127 = 0.2e1 * qJ(3,2);
t2993 = sin(t3127);
t3023 = t3100 * t3024;
t3026 = t3101 ^ 2;
t3025 = t3101 * t3026;
t3292 = t4000 * (t2980 - t2821 / 0.3e1);
t3774 = t4000 * t3102;
t3295 = t3607 * t3774;
t3686 = t3100 * t3101;
t3330 = t3686 * t3707;
t3131 = 0.2e1 * qJ(2,2);
t3003 = cos(t3131);
t3678 = t3106 * t3093;
t3334 = t2655 * t3003 * t3678;
t3561 = pkin(2) * t3678;
t3409 = t3092 * t3561;
t3475 = t3100 * t3774;
t3412 = pkin(2) * t3475;
t2994 = sin(t3131);
t3461 = t2994 * t3678;
t3464 = t2761 * t3707;
t3477 = t3091 * t3774;
t2975 = pkin(1) * t3092;
t3863 = pkin(3) * t3091;
t2781 = t2975 - t3863;
t3759 = t2781 * t3100;
t3482 = t2709 * t3759;
t3884 = pkin(2) * t2709;
t3632 = pkin(1) * t3884;
t3554 = 0.4e1 * t3632;
t3881 = pkin(2) * t3092;
t3593 = t2631 * t3881;
t3597 = pkin(1) * t2824;
t3687 = t3100 * t3091;
t3609 = 0.2e1 * t3687;
t3618 = t2709 * t3930;
t3647 = -0.4e1 * t3023 + 0.5e1 * t3100;
t3654 = t2685 + t2652;
t3705 = t3092 * (-(t2947 * t3093 + t3597) * t3106 + t4000 * (t2947 * t3102 - t2811));
t3719 = t3024 * t3092;
t3778 = t2709 * t3100;
t3847 = t3101 * pkin(3);
t3848 = t3100 * pkin(2);
t3001 = cos(t3127);
t3870 = pkin(3) * t3001;
t3922 = 0.2e1 * t3024;
t3891 = t3922 - 0.1e1;
t3921 = 0.4e1 * t3024;
t3617 = -0.2e1 * t2709 * t3024;
t3982 = (0.2e1 * t3091 * t3475 + t2709 + t3617) * pkin(3);
t2580 = (-t3334 + ((t3477 - t3778) * pkin(2) + t3982) * t3025 + (-t2703 * t3100 + t3654 * t3091 + (t3412 + (t2709 * t3609 + t3774 * t3891) * pkin(3)) * t3092) * t3026 + ((t2652 * t3092 + t3884) * t3100 + (-pkin(2) * t3774 + t2688) * t3091 - t3982) * t3101 - t3476 * t2971 + t2785 * t3778 - t4000 * (-pkin(3) * t3702 + t2761 * t3091)) * t3870 + pkin(3) * (t2655 * t3461 + ((t3091 * t3884 + t3412) * t3026 + (t2634 * t3091 + t3100 * t3654) * t3101 + t3482 - t4000 * t3464) * t3101 + ((t3026 * t3609 + (-t3092 + 0.2e1 * t3719) * t3101) * t2709 + (t3026 * t3891 - 0.2e1 * t3330 - t3892) * t3774) * t3847) * t2993 - t2700 * pkin(2) * (t3100 + 0.1e1) * (t3100 - 0.1e1) * t3461 - t3334 * t3848 + (t3295 * t3687 + 0.2e1 * (-t3024 * t3673 + t2946) * t2709 + ((t3921 - 0.3e1) * t3477 + t3647 * t2709) * t3904) * t3025 + ((t3092 * t3295 - 0.4e1 * t3632) * t3024 + (t2631 * t4010 + t3607 * t3779) * t3687 + t3476 * t3931 + t3554 + ((t2640 + t2685) * t3091 * t3921 - 0.3e1 * (t2685 - 0.2e1 / 0.3e1 * t3762 + t3292) * t3091 + t3647 * t2634) * pkin(3)) * t3026 + ((0.4e1 * (t2688 + (t3678 / 0.2e1 + t3289) * t3910) * t3863 + 0.4e1 * t3593 + t2709 * t3926) * t3024 + ((t3092 * t3554 + (t2813 * t3093 + t3597) * t3916 + 0.2e1 * t4000 * (t2988 * t3102 - t2811)) * t3091 + ((-0.4e1 / 0.5e1 * t3762 + t4000 * (t2980 - t2821 / 0.5e1)) * t3092 + 0.3e1 / 0.5e1 * t3884) * t3939) * t3100 - 0.3e1 * (t2688 - (-t3678 / 0.3e1 + t3289) * pkin(2)) * t3863 - 0.4e1 * t3593 + t3618) * t3101 + (-t2640 * t3863 + t3705) * t3922 + ((-pkin(1) * t3561 + t3092 * t3618) * t3091 + (-t3409 / 0.3e1 + t2703) * t3938) * t3100 + 0.3e1 * (-(t2859 * t3102 + t2976) * t3106 + t3292) * t3863 - 0.2e1 * t3705 + ((0.4e1 * t2640 * t3092 + 0.2e1 * t3884) * t3101 - t3409 + 0.2e1 * t2703) * pkin(3) * t3023;
t2862 = pkin(2) * t2966;
t3703 = t3092 * t3101;
t3718 = t3026 * t3091;
t3862 = pkin(3) * t3092;
t3900 = t2993 / 0.2e1;
t3928 = 0.2e1 * t2961;
t2611 = (t2837 * t3703 + t2975 + (t3026 - 0.1e1) * t3863) * t3870 / 0.2e1 + t2700 * t3847 * t3900 + (t2862 + t2946) * t3718 + ((t2961 - t3862 / 0.2e1) * t2966 + (t3928 + (t3024 - 0.3e1 / 0.2e1) * t3862) * pkin(2)) * t3101 + t3719 * t3905 + t2947 * t3091 + t3092 * t3630;
t3813 = t2580 / t2611;
t3506 = t3013 * t3813;
t3320 = t3506 / 0.2e1;
t2574 = pkin(2) * t3320;
t2571 = t3152 * t3320;
t2818 = pkin(1) * t3707;
t2790 = t2818 - pkin(3);
t2786 = pkin(1) - 0.2e1 * t3568;
t3226 = t2786 * t3102 - t2821;
t3455 = t3091 * t3702;
t3329 = t3007 * t3455;
t2965 = t3024 * t3147;
t3448 = (t3289 - t3678) * t2965;
t3458 = t3092 * t2821;
t3573 = t3091 * t3856;
t3574 = t3091 * t3857;
t3586 = t3092 * t3875;
t3587 = t3092 * t3876;
t3700 = t3092 * t3147;
t3974 = t2786 * t3093 + t2824;
t3789 = t3974 * t3106;
t2589 = (-0.2e1 * t3448 - 0.2e1 * ((pkin(2) * t3684 + t3574) * t2958 + (-pkin(2) * t3685 + t3573) * t2955 - t3561) * t2966 + (t2779 * t3102 + t3091 * t3552) * t2958 + (-t2778 * t3102 + t3091 * t3551) * t2955 + t3093 * t3453) * t3026 + (t3617 * t3700 - ((t3108 * t3226 + 0.2e1 * t3587) * t2958 + (-t3107 * t3226 + 0.2e1 * t3586) * t2955 - t3789) * t2966 + (-pkin(1) * t3574 + t2778 * t3092 - t3226 * t3875) * t2958 + (-pkin(1) * t3573 + t2779 * t3092 + t3226 * t3876) * t2955 + pkin(2) * t3789) * t3101 + t3448 - pkin(3) * t3482 + (-pkin(1) * t3587 + (t2790 * t3684 + (-t3108 * t3458 + t3876) * t3091) * pkin(3)) * t2958 + (-pkin(1) * t3586 + (-t2790 * t3685 + (t3107 * t3458 + t3875) * t3091) * pkin(3)) * t2955 - (t2790 * t3093 + t3329) * t3858;
t2697 = 0.1e1 / t2700;
t3725 = t3013 * t3152;
t3485 = t2697 * t3725;
t3340 = t3148 * t3485;
t3259 = t2589 * t3340;
t2556 = t2571 + t3259;
t3819 = t2556 * t3147;
t2535 = t2574 - t3819;
t2538 = t2574 + t3819;
t2585 = t3259 / 0.2e1;
t2550 = t2571 + t2585;
t3125 = 0.4e1 * qJ(3,2);
t3047 = t3125 + t3131;
t2881 = sin(t3047);
t3126 = 0.3e1 * qJ(3,2);
t3049 = t3126 + t3131;
t2882 = sin(t3049);
t3051 = t3127 + t3131;
t2883 = sin(t3051);
t3052 = t3127 + qJ(2,2);
t2884 = sin(t3052);
t3053 = qJ(3,2) + t3131;
t2885 = sin(t3053);
t3128 = -0.2e1 * qJ(3,2);
t3055 = t3128 + qJ(2,2);
t2887 = sin(t3055);
t3057 = t3131 + t3128;
t2888 = sin(t3057);
t3058 = qJ(2,2) + t3126;
t2889 = sin(t3058);
t3059 = qJ(2,2) + qJ(3,2);
t2890 = sin(t3059);
t3060 = qJ(2,2) - qJ(3,2);
t2891 = sin(t3060);
t3130 = 0.3e1 * qJ(2,2);
t3046 = t3125 + t3130;
t2917 = cos(t3046);
t3048 = t3126 + t3130;
t2918 = cos(t3048);
t2919 = cos(t3049);
t3050 = t3127 + t3130;
t2920 = cos(t3050);
t2922 = cos(t3052);
t2923 = cos(t3053);
t3054 = -qJ(3,2) + t3131;
t2924 = cos(t3054);
t3056 = t3130 + qJ(3,2);
t2926 = cos(t3056);
t2927 = cos(t3057);
t2928 = cos(t3058);
t2929 = cos(t3059);
t2930 = cos(t3060);
t2992 = sin(t3126);
t3129 = 0.4e1 * qJ(2,2);
t2667 = -t3093 * t4000 - t3102 * t3106;
t3878 = pkin(2) * t3101;
t2747 = pkin(3) * t2929 + pkin(1) + t3878;
t2733 = 0.1e1 / t2747;
t3794 = t2667 * t2733;
t3346 = t3673 * t3794;
t3241 = t3007 * t3346;
t3492 = t3007 * t3794;
t3415 = pkin(3) * t3492;
t3310 = pkin(2) * t3415;
t3321 = -t3506 / 0.2e1;
t3367 = t3152 * t3506;
t3418 = pkin(3) * t3506;
t3423 = pkin(2) * t3492;
t3427 = pkin(2) * t3506;
t3441 = (t2884 - t3092) * pkin(3);
t3490 = t3147 * t3794;
t3669 = t3151 * sin(t3054);
t3558 = pkin(3) * t3669;
t3873 = pkin(3) * t2890;
t3581 = t2556 * t3873;
t3784 = t2697 * t3148;
t3785 = t2697 * t3013;
t2925 = cos(t3055);
t3965 = t2925 + cos(t3130);
t3966 = -t2920 - t3101;
t3967 = -t2919 + t2923;
t3968 = -t2917 - t2922;
t2921 = cos(t3051);
t3993 = t2921 * t3957 + cos(t3126) * t3839 + cos(t3047) * t3147 + t2923 * t3841 + t2929 * t3843 + t3101 * t3845 - 0.2e1 * t2862 + t3443 + (t2922 + t2925) * t3844 + (t2928 + t2930) * t3842 + t4002 * t3003 + t3995 * t3001;
t4004 = -t2921 + t3003 + t3001;
t2499 = -((-0.2e1 * t2589 * t2928 * t3785 + t3968 * t2556 * t3986 + 0.2e1 * t3966 * t2535 + (t3967 * t2556 * t3990 + (-(t2571 - t3259 / 0.2e1) * t2929 + (-t2918 + t2926) * t2550) * t4010) * pkin(3) + (t2930 * t3937 + t3965 * pkin(2) + (-0.1e1 + t4004) * t4011) * t3506) * t3007 + (t3435 * sin(t3126 + t3129) + t3146 * sin(t3129 + 0.5e1 * qJ(3,2)) + t2882 * t3628 - 0.6e1 * t3558 + t2992 * t3638 + t2885 * t3627 + t3091 * t3629 + sin(t3129 + qJ(3,2)) * t3639 + (-sin(t3129) - t2888) * t3150 + (t2987 * sin(t3127 + t3129) + t2994 * t3909 + t2993 * t3908 + t2883 * t3907 + (sin(t3125 + t3129) + t2881) * t3622) * pkin(2) + (sin(t3050) * t3606 + sin(t3046) * t3913 + t3092 * t3933 + t2884 * t3932 + (-sin(t3130) - t2887) * t3620 + (sin(t3048) - sin(t3056) + t2889 + t2890 - 0.2e1 * t2891) * t3556) * pkin(1)) * t3794) / (t2919 * t3637 + (t2924 * t3839 + t2927 * t3151 + t3993) * t3941) * t3794 + ((t2887 * t3427 * t3945 + t2538 * t2882 * t3937 + (t3427 / 0.4e1 + (0.3e1 / 0.4e1 * t3813 + t2589 * t3784) * t3013 * t3672 + t3154 * t2571) * t2993 * t4010 + (t2574 + 0.2e1 * t3819) * t2884 * t3990 + t3147 * t2881 * t3320 + t3151 * t2888 * t3321 + (t2556 * t3700 + t3423 / 0.4e1) * t3947 + (t2571 + 0.2e1 / 0.3e1 * t3259) * t2891 * t3605 - 0.4e1 * t2550 * t3558 + t2556 * t2885 * t3436 + (t2571 + 0.4e1 / 0.5e1 * t3259) * t2994 * t3640 + 0.8e1 * ((0.3e1 / 0.8e1 * t3367 + t2585) * t3151 + t2947 * t2556) * t3863 + t3581 * t3985 + t3968 * t3007 * t3490 + t3965 * t3151 * t3492 - 0.2e1 * (t2929 + t2918) * t3310 + 0.2e1 * (t2930 + t2926) * t3310 + t3966 * t3241 + (t2992 * t3418 + (t2574 + 0.4e1 * t3819) * t2883) * pkin(2) + t4004 * t3423 * t4009 + (t2889 * t3418 + t3967 * t3415) * t4011) * t3152 * t3321 - 0.8e1 * (((-t2919 / 0.4e1 + t2923 / 0.4e1) * pkin(1) + (t2920 / 0.8e1 - t2917 / 0.8e1 - t2922 / 0.8e1 + t3101 / 0.8e1) * pkin(3) + (-t2918 / 0.8e1 - t2928 / 0.8e1 + t2926 / 0.8e1 + t2929 / 0.8e1) * pkin(2)) * t3492 + (-t3669 / 0.4e1 + t2882 * t3897 + t2885 * t3446 + t2813 * t3091 + pkin(1) * t3441 + ((-t2891 + t2890) * pkin(1) + (t2883 / 0.2e1 - t2994 / 0.2e1 + t3900) * pkin(3)) * pkin(2)) * t2556) * t2589 * t3485) / (t3150 * t2927 + (t2919 + t2924) * t3544 + t3993 * pkin(2));
t2658 = t2667 ^ 2;
t2734 = 0.1e1 / t2747 ^ 2;
t2637 = t2658 * t2734;
t2584 = t3259 / 0.3e1;
t3491 = t3092 * t3794;
t3349 = t3007 * t3491;
t3612 = 0.2e1 * t2965;
t3635 = 0.2e1 * t2966;
t3014 = 0.1e1 / t3091 ^ 2;
t3724 = t3014 * t3153;
t3887 = pkin(2) * t2550;
t3271 = (0.2e1 * t2837 * t3415 * t3718 + ((t3349 + t3887) * t3612 + 0.3e1 * (t3349 * t3984 + (t3367 / 0.6e1 + t2584) * t3147 + t3151 * (t2571 + t2584)) * t2966 + t3092 * t3241 + t2538 * pkin(2)) * t3101 + (-(t2550 * t3881 + t3492 / 0.2e1) * t3863 + pkin(1) * t3887) * t3635 - (t2538 * t3092 + t3423) * t3863 + pkin(1) * t2538) * t3724 * t3813;
t3793 = t2667 * t2734;
t2526 = (t3581 + t3492 + (t2890 * t2589 * t2697 * t3152 + (t3092 / 0.2e1 + (t3873 + t3881) * t3896) * t3813) * t3013) * t3793;
t3701 = t3092 * t3109;
t3522 = t2526 * t3701;
t2644 = 0.1e1 / (pkin(2) * (pkin(2) * t2890 + t3441 + t3928) - t2891 * t3151);
t3533 = ((pkin(3) * t2883 + (t2885 + t3091) * pkin(2)) * t3492 + (t3151 * t2930 + t2922 * t3904 + t2984 * t2929 + t3101 * t3838 + (pkin(3) + t3848) * t4011) * t2556) * t2589 * t2644;
t3274 = t3568 * t3946 + t2717;
t3422 = pkin(2) * t3491;
t3549 = 0.2e1 * t2862;
t3600 = pkin(1) * t3794;
t3988 = 0.2e1 * t3026;
t3535 = (0.4e1 * (t2965 + t2862 / 0.2e1 + t3644) * t2837 * t3025 * t3794 + (t2785 * t3490 * t3922 + (-(-t2556 * t3007 + 0.3e1 * t3422) * t3863 / 0.2e1 + pkin(2) * t3600) * t3635 - (-t2550 * t3882 + t3491 * t3902) * t3863 + pkin(1) * t3346) * t3988 + ((t2550 * t3549 + t2556 * t3612 + t2535) * t3092 * t3007 + (t3023 * t3915 + t3274 * t2966 + (t3274 - 0.3e1 * t2965) * pkin(2)) * t3794) * t3101 - pkin(3) * ((t2556 * t2966 + t3320) * t3091 * t3007 + (t2718 * t3707 + (-t3024 * t3568 + (t3922 - 0.2e1) * pkin(1)) * pkin(3)) * t3794)) * t3794;
t4007 = t3522 + ((-t3271 / 0.4e1 + (-t3535 / 0.2e1 - t3533 / 0.2e1) * t3725) * t3784 + t2499) * t3942 - (pkin(1) + 0.2e1 * t3878) * t3092 * t2637;
t3094 = sin(qJ(3,1));
t3016 = 0.1e1 / t3094;
t3096 = sin(qJ(1,1));
t2822 = t3096 * t3007;
t3105 = cos(qJ(1,1));
t2981 = pkin(1) * t3105;
t2825 = t3105 * t3007;
t2978 = pkin(1) * t3096;
t3761 = (t2825 + t2978) * t3106;
t3087 = legFrame(1,2);
t2956 = sin(t3087);
t2959 = cos(t3087);
t4001 = -t2956 * t3107 + t2959 * t3108;
t2632 = -t3761 / 0.2e1 + t4001 * (t2981 - t2822 / 0.2e1);
t2710 = t2956 * t3108 + t2959 * t3107;
t2704 = pkin(1) * t2710;
t3095 = sin(qJ(2,1));
t3694 = t3095 * t3105;
t3473 = t4001 * t3694;
t2635 = -pkin(2) * t3473 + t2704;
t3680 = t3105 * t3108;
t3681 = t3105 * t3107;
t3288 = -t2956 * t3681 + t2959 * t3680;
t2641 = t3288 * pkin(1) - t3761;
t2762 = t2981 - t2822;
t2653 = t2762 * t4001;
t3103 = cos(qJ(3,1));
t2968 = t3103 * pkin(3);
t2839 = t2968 + pkin(2);
t2962 = t3094 * pkin(1);
t3028 = t3103 ^ 2;
t3890 = t3028 - 0.1e1;
t3602 = pkin(3) * t3890;
t3104 = cos(qJ(2,1));
t3698 = t3094 * t3104;
t2656 = t2839 * t3698 + t3095 * t3602 + t2962;
t3777 = t2710 * t3095;
t2686 = pkin(2) * t3777;
t2689 = pkin(1) * t3777;
t3699 = t3094 * t3095;
t3566 = pkin(3) * t3699;
t2787 = pkin(1) - t3566;
t3746 = t2839 * t3104;
t2701 = t2787 + t3746;
t2812 = pkin(1) * t2822;
t2972 = pkin(3) * t3028;
t3135 = 0.2e1 * qJ(3,1);
t2996 = sin(t3135);
t3027 = t3103 * t3028;
t3030 = t3104 ^ 2;
t3029 = t3104 * t3030;
t3291 = t4001 * (t2981 - t2822 / 0.3e1);
t3773 = t4001 * t3105;
t3294 = t3607 * t3773;
t3682 = t3103 * t3104;
t3328 = t3682 * t3699;
t3139 = 0.2e1 * qJ(2,1);
t3006 = cos(t3139);
t3677 = t3106 * t3096;
t3333 = t2656 * t3006 * t3677;
t3560 = pkin(2) * t3677;
t3408 = t3095 * t3560;
t3472 = t3103 * t3773;
t3411 = pkin(2) * t3472;
t2997 = sin(t3139);
t3460 = t2997 * t3677;
t3463 = t2762 * t3699;
t3474 = t3094 * t3773;
t2977 = pkin(1) * t3095;
t3861 = pkin(3) * t3094;
t2782 = t2977 - t3861;
t3758 = t2782 * t3103;
t3481 = t2710 * t3758;
t3883 = pkin(2) * t2710;
t3631 = pkin(1) * t3883;
t3553 = 0.4e1 * t3631;
t3880 = pkin(2) * t3095;
t3592 = t2632 * t3880;
t3596 = pkin(1) * t2825;
t3683 = t3103 * t3094;
t3608 = 0.2e1 * t3683;
t3616 = t2710 * t3930;
t3646 = -0.4e1 * t3027 + 0.5e1 * t3103;
t3653 = t2686 + t2653;
t3697 = t3095 * (-(t2947 * t3096 + t3596) * t3106 + t4001 * (t2947 * t3105 - t2812));
t3717 = t3028 * t3095;
t3776 = t2710 * t3103;
t3846 = t3103 * pkin(2);
t3859 = pkin(3) * t3104;
t3004 = cos(t3135);
t3869 = pkin(3) * t3004;
t3919 = 0.2e1 * t3028;
t3889 = t3919 - 0.1e1;
t3918 = 0.4e1 * t3028;
t3615 = -0.2e1 * t2710 * t3028;
t3983 = (0.2e1 * t3094 * t3472 + t2710 + t3615) * pkin(3);
t2581 = (-t3333 + ((t3474 - t3776) * pkin(2) + t3983) * t3029 + (-t2704 * t3103 + t3653 * t3094 + (t3411 + (t2710 * t3608 + t3773 * t3889) * pkin(3)) * t3095) * t3030 + ((t2653 * t3095 + t3883) * t3103 + (-pkin(2) * t3773 + t2689) * t3094 - t3983) * t3104 - t3473 * t2972 + t2787 * t3776 - (-pkin(3) * t3694 + t2762 * t3094) * t4001) * t3869 + (t2656 * t3460 + ((t3094 * t3883 + t3411) * t3030 + (t2635 * t3094 + t3103 * t3653) * t3104 + t3481 - t4001 * t3463) * t3104 + ((t3030 * t3608 + (-t3095 + 0.2e1 * t3717) * t3104) * t2710 + (t3030 * t3889 - 0.2e1 * t3328 - t3890) * t3773) * t3859) * pkin(3) * t2996 - t2701 * pkin(2) * (t3103 + 0.1e1) * (t3103 - 0.1e1) * t3460 - t3333 * t3846 + (t3294 * t3683 + 0.2e1 * (-t3028 * t3673 + t2946) * t2710 + ((t3918 - 0.3e1) * t3474 + t3646 * t2710) * t3904) * t3029 + ((t3095 * t3294 - 0.4e1 * t3631) * t3028 + (t2632 * t4010 + t3607 * t3777) * t3683 + t3473 * t3931 + t3553 + ((t2641 + t2686) * t3094 * t3918 - 0.3e1 * (t2686 - 0.2e1 / 0.3e1 * t3761 + t3291) * t3094 + t3646 * t2635) * pkin(3)) * t3030 + ((0.4e1 * (t2689 + (t3677 / 0.2e1 + t3288) * t3910) * t3861 + 0.4e1 * t3592 + t2710 * t3926) * t3028 + ((t3095 * t3553 + (t2813 * t3096 + t3596) * t3916 + 0.2e1 * t4001 * (t2988 * t3105 - t2812)) * t3094 + ((-0.4e1 / 0.5e1 * t3761 + t4001 * (t2981 - t2822 / 0.5e1)) * t3095 + 0.3e1 / 0.5e1 * t3883) * t3939) * t3103 - 0.3e1 * (t2689 - (-t3677 / 0.3e1 + t3288) * pkin(2)) * t3861 - 0.4e1 * t3592 + t3616) * t3104 + (-t2641 * t3861 + t3697) * t3919 + ((-pkin(1) * t3560 + t3095 * t3616) * t3094 + (-t3408 / 0.3e1 + t2704) * t3938) * t3103 + 0.3e1 * (-t3106 * (t2859 * t3105 + t2978) + t3291) * t3861 - 0.2e1 * t3697 + ((0.4e1 * t2641 * t3095 + 0.2e1 * t3883) * t3104 - t3408 + 0.2e1 * t2704) * pkin(3) * t3027;
t2863 = pkin(2) * t2968;
t3695 = t3095 * t3104;
t3716 = t3030 * t3094;
t3860 = pkin(3) * t3095;
t3899 = t2996 / 0.2e1;
t3927 = 0.2e1 * t2962;
t2609 = (t2839 * t3695 + t2977 + (t3030 - 0.1e1) * t3861) * t3869 / 0.2e1 + t2701 * t3859 * t3899 + (t2863 + t2946) * t3716 + ((t2962 - t3860 / 0.2e1) * t2968 + (t3927 + (t3028 - 0.3e1 / 0.2e1) * t3860) * pkin(2)) * t3104 + t3717 * t3905 + t2947 * t3094 + t3095 * t3630;
t3812 = t2581 / t2609;
t3505 = t3016 * t3812;
t3318 = t3505 / 0.2e1;
t2575 = pkin(2) * t3318;
t2572 = t3152 * t3318;
t2819 = pkin(1) * t3699;
t2791 = t2819 - pkin(3);
t2788 = pkin(1) - 0.2e1 * t3566;
t3225 = t2788 * t3105 - t2822;
t3454 = t3094 * t3694;
t3327 = t3007 * t3454;
t2967 = t3028 * t3147;
t3447 = (t3288 - t3677) * t2967;
t3457 = t3095 * t2822;
t3571 = t3094 * t3856;
t3572 = t3094 * t3857;
t3583 = t3095 * t3875;
t3584 = t3095 * t3876;
t3692 = t3095 * t3147;
t3973 = t2788 * t3096 + t2825;
t3788 = t3973 * t3106;
t2590 = (-0.2e1 * t3447 - 0.2e1 * ((pkin(2) * t3680 + t3572) * t2959 + (-pkin(2) * t3681 + t3571) * t2956 - t3560) * t2968 + (t2779 * t3105 + t3094 * t3552) * t2959 + (-t2778 * t3105 + t3094 * t3551) * t2956 + t3096 * t3453) * t3030 + (t3615 * t3692 - ((t3108 * t3225 + 0.2e1 * t3584) * t2959 + (-t3107 * t3225 + 0.2e1 * t3583) * t2956 - t3788) * t2968 + (-pkin(1) * t3572 + t2778 * t3095 - t3225 * t3875) * t2959 + (-pkin(1) * t3571 + t2779 * t3095 + t3225 * t3876) * t2956 + pkin(2) * t3788) * t3104 + t3447 - pkin(3) * t3481 + (-pkin(1) * t3584 + (t2791 * t3680 + (-t3108 * t3457 + t3876) * t3094) * pkin(3)) * t2959 + (-pkin(1) * t3583 + (-t2791 * t3681 + (t3107 * t3457 + t3875) * t3094) * pkin(3)) * t2956 - (t2791 * t3096 + t3327) * t3858;
t2698 = 0.1e1 / t2701;
t3723 = t3016 * t3152;
t3484 = t2698 * t3723;
t3339 = t3148 * t3484;
t3258 = t2590 * t3339;
t2557 = t2572 + t3258;
t3818 = t2557 * t3147;
t2536 = t2575 - t3818;
t2539 = t2575 + t3818;
t2587 = t3258 / 0.2e1;
t2551 = t2572 + t2587;
t3133 = 0.4e1 * qJ(3,1);
t3061 = t3133 + t3139;
t2892 = sin(t3061);
t3134 = 0.3e1 * qJ(3,1);
t3062 = t3134 + t3139;
t2893 = sin(t3062);
t3063 = t3135 + t3139;
t2894 = sin(t3063);
t3064 = t3135 + qJ(2,1);
t2895 = sin(t3064);
t3066 = qJ(3,1) + t3139;
t2896 = sin(t3066);
t3136 = -0.2e1 * qJ(3,1);
t3068 = t3136 + t3139;
t2898 = sin(t3068);
t3069 = t3136 + qJ(2,1);
t2899 = sin(t3069);
t3073 = qJ(2,1) + t3134;
t2900 = sin(t3073);
t3074 = qJ(2,1) + qJ(3,1);
t2901 = sin(t3074);
t3075 = qJ(2,1) - qJ(3,1);
t2902 = sin(t3075);
t2931 = cos(t3062);
t2933 = cos(t3064);
t3138 = 0.3e1 * qJ(2,1);
t3065 = qJ(3,1) + t3138;
t2934 = cos(t3065);
t2935 = cos(t3066);
t3067 = -qJ(3,1) + t3139;
t2936 = cos(t3067);
t2937 = cos(t3068);
t3070 = t3138 + t3133;
t2939 = cos(t3070);
t3071 = t3138 + t3134;
t2940 = cos(t3071);
t3072 = t3138 + t3135;
t2941 = cos(t3072);
t2942 = cos(t3073);
t2943 = cos(t3074);
t2944 = cos(t3075);
t2995 = sin(t3134);
t3137 = 0.4e1 * qJ(2,1);
t2668 = -t3096 * t4001 - t3105 * t3106;
t3877 = pkin(2) * t3104;
t2748 = pkin(3) * t2943 + pkin(1) + t3877;
t2735 = 0.1e1 / t2748;
t3792 = t2668 * t2735;
t3342 = t3673 * t3792;
t3240 = t3007 * t3342;
t3489 = t3007 * t3792;
t3414 = pkin(3) * t3489;
t3309 = pkin(2) * t3414;
t3319 = -t3505 / 0.2e1;
t3363 = t3152 * t3505;
t3417 = pkin(3) * t3505;
t3421 = pkin(2) * t3489;
t3426 = pkin(2) * t3505;
t3440 = (t2895 - t3095) * pkin(3);
t3487 = t3147 * t3792;
t3668 = t3151 * sin(t3067);
t3557 = pkin(3) * t3668;
t3872 = pkin(3) * t2901;
t3580 = t2557 * t3872;
t3782 = t2698 * t3148;
t3783 = t2698 * t3016;
t3961 = -t2941 - t3104;
t2938 = cos(t3069);
t3962 = t2938 + cos(t3138);
t3963 = -t2933 - t2939;
t3964 = -t2931 + t2935;
t2932 = cos(t3063);
t3992 = t2932 * t3957 + cos(t3134) * t3839 + cos(t3061) * t3147 + t2935 * t3841 + t2943 * t3843 + t3104 * t3845 - 0.2e1 * t2863 + t3443 + (t2933 + t2938) * t3844 + (t2942 + t2944) * t3842 + t4002 * t3006 + t3995 * t3004;
t4003 = -t2932 + t3006 + t3004;
t2500 = -((-0.2e1 * t2590 * t2942 * t3783 + t3963 * t2557 * t3986 + 0.2e1 * t3961 * t2536 + (t3964 * t2557 * t3990 + (-(t2572 - t3258 / 0.2e1) * t2943 + (t2934 - t2940) * t2551) * t4010) * pkin(3) + (t2944 * t3937 + t3962 * pkin(2) + (-0.1e1 + t4003) * t4011) * t3505) * t3007 + (t3435 * sin(t3134 + t3137) + t3146 * sin(t3137 + 0.5e1 * qJ(3,1)) + t2995 * t3638 + t2893 * t3628 + t2896 * t3627 + t3094 * t3629 - 0.6e1 * t3557 + sin(t3137 + qJ(3,1)) * t3639 + (-t2898 - sin(t3137)) * t3150 + (t2987 * sin(t3137 + t3135) + t2997 * t3909 + t2996 * t3908 + t2894 * t3907 + (sin(t3137 + t3133) + t2892) * t3622) * pkin(2) + (sin(t3072) * t3606 + sin(t3070) * t3913 + t3095 * t3933 + t2895 * t3932 + (-sin(t3138) - t2899) * t3620 + (sin(t3071) - sin(t3065) + t2900 + t2901 - 0.2e1 * t2902) * t3556) * pkin(1)) * t3792) / (t2931 * t3637 + (t2936 * t3839 + t2937 * t3151 + t3992) * t3941) * t3792 + ((t2899 * t3426 * t3945 + t2539 * t2893 * t3937 + (t3426 / 0.4e1 + (0.3e1 / 0.4e1 * t3812 + t2590 * t3782) * t3016 * t3672 + t3154 * t2572) * t2996 * t4010 + (t2575 + 0.2e1 * t3818) * t2895 * t3990 + t3147 * t2892 * t3318 + t3151 * t2898 * t3319 + (t2557 * t3692 + t3421 / 0.4e1) * t3947 + (t2572 + 0.2e1 / 0.3e1 * t3258) * t2902 * t3605 + t2557 * t2896 * t3436 + (t2572 + 0.4e1 / 0.5e1 * t3258) * t2997 * t3640 - 0.4e1 * t2551 * t3557 + t3580 * t3985 + 0.8e1 * ((0.3e1 / 0.8e1 * t3363 + t2587) * t3151 + t2947 * t2557) * t3861 + t3963 * t3007 * t3487 + t3962 * t3151 * t3489 - 0.2e1 * (t2943 + t2940) * t3309 + 0.2e1 * (t2944 + t2934) * t3309 + t3961 * t3240 + (t2995 * t3417 + (t2575 + 0.4e1 * t3818) * t2894) * pkin(2) + t4003 * t3421 * t4009 + (t2900 * t3417 + t3964 * t3414) * t4011) * t3152 * t3319 - 0.8e1 * (((-t2931 / 0.4e1 + t2935 / 0.4e1) * pkin(1) + (t2941 / 0.8e1 - t2939 / 0.8e1 - t2933 / 0.8e1 + t3104 / 0.8e1) * pkin(3) + (-t2940 / 0.8e1 - t2942 / 0.8e1 + t2934 / 0.8e1 + t2943 / 0.8e1) * pkin(2)) * t3489 + (-t3668 / 0.4e1 + t2893 * t3897 + t2896 * t3446 + t2813 * t3094 + pkin(1) * t3440 + ((-t2902 + t2901) * pkin(1) + (t2894 / 0.2e1 - t2997 / 0.2e1 + t3899) * pkin(3)) * pkin(2)) * t2557) * t2590 * t3484) / (t3150 * t2937 + (t2931 + t2936) * t3544 + t3992 * pkin(2));
t2659 = t2668 ^ 2;
t2736 = 0.1e1 / t2748 ^ 2;
t2638 = t2659 * t2736;
t2586 = t3258 / 0.3e1;
t3488 = t3095 * t3792;
t3345 = t3007 * t3488;
t3611 = 0.2e1 * t2967;
t3634 = 0.2e1 * t2968;
t3017 = 0.1e1 / t3094 ^ 2;
t3722 = t3017 * t3153;
t3886 = pkin(2) * t2551;
t3270 = (0.2e1 * t2839 * t3414 * t3716 + ((t3345 + t3886) * t3611 + 0.3e1 * (t3345 * t3984 + (t3363 / 0.6e1 + t2586) * t3147 + t3151 * (t2572 + t2586)) * t2968 + t3095 * t3240 + pkin(2) * t2539) * t3104 + (-(t2551 * t3880 + t3489 / 0.2e1) * t3861 + pkin(1) * t3886) * t3634 - (t2539 * t3095 + t3421) * t3861 + pkin(1) * t2539) * t3722 * t3812;
t3791 = t2668 * t2736;
t2527 = (t3580 + t3489 + (t2901 * t2590 * t2698 * t3152 + (t3095 / 0.2e1 + (t3872 + t3880) * t3896) * t3812) * t3016) * t3791;
t3693 = t3095 * t3109;
t3517 = t2527 * t3693;
t2646 = 0.1e1 / (pkin(2) * (pkin(2) * t2901 + t3440 + t3927) - t2902 * t3151);
t3532 = ((pkin(3) * t2894 + (t2896 + t3094) * pkin(2)) * t3489 + (t3151 * t2944 + t2933 * t3904 + t2984 * t2943 + t3104 * t3838 + (pkin(3) + t3846) * t4011) * t2557) * t2590 * t2646;
t3273 = t3566 * t3946 + t2717;
t3420 = pkin(2) * t3488;
t3548 = 0.2e1 * t2863;
t3599 = pkin(1) * t3792;
t3987 = 0.2e1 * t3030;
t3537 = (0.4e1 * (t2967 + t2863 / 0.2e1 + t3644) * t2839 * t3029 * t3792 + (t2787 * t3487 * t3919 + (-(-t2557 * t3007 + 0.3e1 * t3420) * t3861 / 0.2e1 + pkin(2) * t3599) * t3634 - (-t2551 * t3882 + t3488 * t3902) * t3861 + pkin(1) * t3342) * t3987 + ((t2551 * t3548 + t2557 * t3611 + t2536) * t3095 * t3007 + (t3027 * t3915 + t3273 * t2968 + (t3273 - 0.3e1 * t2967) * pkin(2)) * t3792) * t3104 - pkin(3) * ((t2557 * t2968 + t3318) * t3094 * t3007 + (t2718 * t3699 + (-t3028 * t3566 + (t3919 - 0.2e1) * pkin(1)) * pkin(3)) * t3792)) * t3792;
t4006 = t3517 + ((-t3270 / 0.4e1 + (-t3537 / 0.2e1 - t3532 / 0.2e1) * t3723) * t3782 + t2500) * t3942 - (pkin(1) + 0.2e1 * t3877) * t3095 * t2638;
t3696 = t3095 * t3103;
t2730 = t3696 + t3698;
t3704 = t3092 * t3100;
t2729 = t3704 + t3706;
t3712 = t3089 * t3097;
t2728 = t3712 + t3714;
t3652 = pkin(2) * t3712 + t2960;
t3998 = -pkin(1) * t3712 - pkin(2) * t3720 - t3098 * t3652;
t3650 = pkin(2) * t3696 + t2962;
t3997 = -pkin(1) * t3696 - pkin(2) * t3716 - t3104 * t3650;
t3651 = pkin(2) * t3704 + t2961;
t3996 = -pkin(1) * t3704 - pkin(2) * t3718 - t3101 * t3651;
t3953 = 0.2e1 * t2525;
t3952 = 0.2e1 * t2526;
t3951 = 0.2e1 * t2527;
t3950 = t3098 * (pkin(1) * t3097 - pkin(2) * t3715) + t3022 * t3850;
t3949 = t3101 * (pkin(1) * t3100 - pkin(2) * t3707) + t3026 * t3848;
t3948 = t3104 * (pkin(1) * t3103 - pkin(2) * t3699) + t3030 * t3846;
t2663 = (t3020 - 0.1e1 / 0.2e1) * t3711 + (t3022 - 0.1e1 / 0.2e1) * t3691;
t3936 = 0.4e1 * t2663;
t2664 = (t3024 - 0.1e1 / 0.2e1) * t3703 + (t3026 - 0.1e1 / 0.2e1) * t3687;
t3935 = 0.4e1 * t2664;
t2665 = (t3028 - 0.1e1 / 0.2e1) * t3695 + (t3030 - 0.1e1 / 0.2e1) * t3683;
t3934 = 0.4e1 * t2665;
t3898 = t3109 / 0.4e1;
t3895 = t3152 / 0.4e1;
t2867 = t3989 - 0.1e1;
t2868 = t3988 - 0.1e1;
t2869 = t3987 - 0.1e1;
t3854 = pkin(5) * t2498;
t3853 = pkin(5) * t2499;
t3852 = pkin(5) * t2500;
t3837 = -qJ(3,1) + qJ(1,1);
t3836 = qJ(3,1) + qJ(1,1);
t3835 = -qJ(3,2) + qJ(1,2);
t3834 = qJ(3,2) + qJ(1,2);
t3833 = -qJ(3,3) + qJ(1,3);
t3832 = qJ(3,3) + qJ(1,3);
t3831 = qJ(1,1) - 0.2e1 * qJ(2,1);
t3830 = qJ(1,2) - 0.2e1 * qJ(2,2);
t3829 = -0.2e1 * qJ(2,3) + qJ(1,3);
t3826 = t2525 * t2731;
t3825 = t2525 * t3098;
t3824 = t2526 * t2733;
t3823 = t2526 * t3101;
t3822 = t2527 * t2735;
t3821 = t2527 * t3104;
t3817 = t2579 ^ 2 / t2610 ^ 2;
t3816 = t2580 ^ 2 / t2611 ^ 2;
t3815 = t2581 ^ 2 / t2609 ^ 2;
t3498 = t3022 * t2636;
t2618 = t2636 - 0.2e1 * t3498;
t3811 = t2618 * t2696;
t3497 = t3026 * t2637;
t2619 = t2637 - 0.2e1 * t3497;
t3810 = t2619 * t2697;
t3496 = t3030 * t2638;
t2620 = t2638 - 0.2e1 * t3496;
t3809 = t2620 * t2698;
t2948 = qJ(2,3) + t3832;
t2949 = -qJ(2,3) + t3833;
t3008 = 0.2e1 * pkin(5) + t3643;
t3808 = ((cos(t2949) + cos(t2948)) * t3008 + (-sin(t2949) - sin(t2948)) * t4011 + (-sin(t3120 + t3829) - sin(qJ(1,3) + t3034) - 0.2e1 * t3090) * pkin(3) + (sin(qJ(3,3) - t3829) - sin(qJ(1,3) + t3036) - sin(t3833) - sin(t3832)) * pkin(2)) * t2642 / 0.2e1;
t2950 = qJ(2,2) + t3834;
t2951 = -qJ(2,2) + t3835;
t3807 = ((cos(t2951) + cos(t2950)) * t3008 + (-sin(t2951) - sin(t2950)) * t4011 + (-sin(t3128 + t3830) - sin(qJ(1,2) + t3051) - 0.2e1 * t3093) * pkin(3) + (-sin(t3835) - sin(t3834) + sin(qJ(3,2) - t3830) - sin(qJ(1,2) + t3053)) * pkin(2)) * t2644 / 0.2e1;
t2952 = qJ(2,1) + t3836;
t2953 = -qJ(2,1) + t3837;
t3806 = ((cos(t2953) + cos(t2952)) * t3008 + (-sin(t2953) - sin(t2952)) * t4011 + (-sin(t3136 + t3831) - sin(qJ(1,1) + t3063) - 0.2e1 * t3096) * pkin(3) + (-sin(t3837) - sin(t3836) + sin(qJ(3,1) - t3831) - sin(qJ(1,1) + t3066)) * pkin(2)) * t2646 / 0.2e1;
t2648 = t3099 * t3604 + t3465;
t3805 = t2648 * t2954;
t3804 = t2648 * t2957;
t2649 = t3102 * t3603 + t3464;
t3803 = t2649 * t2955;
t3802 = t2649 * t2958;
t2650 = t3105 * t3602 + t3463;
t3801 = t2650 * t2956;
t3800 = t2650 * t2959;
t3799 = t2657 * t2696;
t3798 = t2658 * t2697;
t3797 = t2659 * t2698;
t3772 = t2731 * t3090;
t3771 = t2731 * t3099;
t3770 = t2732 * t3010;
t3769 = t2733 * t3093;
t3768 = t2733 * t3102;
t3767 = t2734 * t3013;
t3766 = t2735 * t3096;
t3765 = t2735 * t3105;
t3764 = t2736 * t3016;
t3116 = pkin(2) / 0.2e1;
t3757 = (t2964 + t3116) * t3088;
t3756 = (t2966 + t3116) * t3091;
t3755 = (t2968 + t3116) * t3094;
t3754 = t2835 * t2954;
t3753 = t2835 * t2957;
t3751 = t2837 * t2955;
t3750 = t2837 * t2958;
t3748 = t2839 * t2956;
t3747 = t2839 * t2959;
t3745 = t2954 * t3090;
t3744 = t2954 * t3099;
t3742 = t2955 * t3093;
t3741 = t2955 * t3102;
t3739 = t2956 * t3096;
t3738 = t2956 * t3105;
t3736 = t2957 * t3090;
t3735 = t2957 * t3099;
t3733 = t2958 * t3093;
t3732 = t2958 * t3102;
t3730 = t2959 * t3096;
t3729 = t2959 * t3105;
t2480 = (-t3272 / 0.2e1 + (-t3534 - t3536) * t3727) * t3786 + t2498;
t3676 = t3109 * t2480;
t2481 = (-t3271 / 0.2e1 + (-t3533 - t3535) * t3725) * t3784 + t2499;
t3675 = t3109 * t2481;
t2482 = (-t3270 / 0.2e1 + (-t3532 - t3537) * t3723) * t3782 + t2500;
t3674 = t3109 * t2482;
t3671 = t3148 * t3152;
t2552 = t2555 ^ 2;
t2529 = t2549 * t3424 + t2552 * t3898;
t3373 = t2731 * t3507;
t2531 = t2552 * t3709 + t2666 * t3373;
t3439 = -0.4e1 * t3022 * t3888;
t3547 = t2555 * t4011;
t3667 = -t2728 * t3676 + (-t2960 * t3089 + t3950) * t3953 - 0.4e1 * t2529 * t3690 + t2531 * t3088 + (-t2728 * t3547 + t3088 * t3439) * t3796;
t2553 = t2556 ^ 2;
t2530 = t2550 * t3422 + t2553 * t3898;
t3369 = t2733 * t3506;
t2532 = t2553 * t3701 + t2667 * t3369;
t3438 = -0.4e1 * t3026 * t3887;
t3546 = t2556 * t4011;
t3666 = -t2729 * t3675 + (-t2961 * t3092 + t3949) * t3952 - 0.4e1 * t2530 * t3686 + t2532 * t3091 + (-t2729 * t3546 + t3091 * t3438) * t3794;
t2554 = t2557 ^ 2;
t2528 = t2551 * t3420 + t2554 * t3898;
t3365 = t2735 * t3505;
t2533 = t2554 * t3693 + t2668 * t3365;
t3437 = -0.4e1 * t3030 * t3886;
t3545 = t2557 * t4011;
t3665 = -t2730 * t3674 + (-t2962 * t3095 + t3948) * t3951 - 0.4e1 * t2528 * t3682 + t2533 * t3094 + (-t2730 * t3545 + t3094 * t3437) * t3792;
t3221 = -t3690 + t3715;
t3664 = t3221 * t3676 + t3998 * t3953 + 0.4e1 * t2529 * t3714 + t2531 * t3097 + (t3097 * t3439 + t3221 * t3547) * t3796;
t3220 = -t3686 + t3707;
t3663 = t3220 * t3675 + t3996 * t3952 + 0.4e1 * t2530 * t3706 + t2532 * t3100 + (t3100 * t3438 + t3220 * t3546) * t3794;
t3219 = -t3682 + t3699;
t3662 = t3219 * t3674 + t3997 * t3951 + 0.4e1 * t2528 * t3698 + t2533 * t3103 + (t3103 * t3437 + t3219 * t3545) * t3792;
t3149 = 0.1e1 / pkin(3) ^ 2;
t2546 = t3498 * t3941 + pkin(1) * t3098 * t2636 - pkin(2) * (t2636 + (t3786 * t3814 + t3149 / t2699 ^ 2 * t2588) * t2588 * t3726);
t3528 = t3109 * t3825;
t3394 = t3097 * t3528;
t3661 = t2546 * t3097 + t4008 * t3088 - t3394;
t3395 = t3088 * t3528;
t3660 = t2546 * t3088 - t4008 * t3097 - t3395;
t2547 = t3497 * t3941 + pkin(1) * t3101 * t2637 - pkin(2) * (t2637 + (t3784 * t3813 + t3149 / t2700 ^ 2 * t2589) * t2589 * t3724);
t3523 = t3109 * t3823;
t3386 = t3100 * t3523;
t3659 = t2547 * t3100 + t4007 * t3091 - t3386;
t3387 = t3091 * t3523;
t3658 = t2547 * t3091 - t4007 * t3100 - t3387;
t2548 = t3496 * t3941 + pkin(1) * t3104 * t2638 - pkin(2) * (t2638 + (t3782 * t3812 + t3149 / t2701 ^ 2 * t2590) * t2590 * t3722);
t3518 = t3109 * t3821;
t3378 = t3103 * t3518;
t3657 = t2548 * t3103 + t4006 * t3094 - t3378;
t3379 = t3094 * t3518;
t3656 = t2548 * t3094 - t4006 * t3103 - t3379;
t3645 = t3081 + t3084;
t3621 = 0.2e1 * t3148;
t3579 = t2835 * t3865;
t3578 = t2837 * t3863;
t3577 = t2839 * t3861;
t3543 = t2480 * t3787;
t3542 = t2481 * t3785;
t3541 = t2482 * t3783;
t3540 = t2498 * t3772;
t3539 = t2499 * t3769;
t3538 = t2500 * t3766;
t3531 = t2525 * t3808;
t3530 = t2525 * t3787;
t3529 = t2525 * t3771;
t3526 = t2526 * t3807;
t3525 = t2526 * t3785;
t3524 = t2526 * t3768;
t3521 = t2527 * t3806;
t3520 = t2527 * t3783;
t3519 = t2527 * t3765;
t3516 = t2552 * t3771;
t3515 = t2553 * t3768;
t3514 = t2554 * t3765;
t3513 = t2555 * t3795;
t3512 = t2555 * t2666 * t3099;
t3511 = t2556 * t3793;
t3510 = t2556 * t2667 * t3102;
t3509 = t2557 * t3791;
t3508 = t2557 * t2668 * t3105;
t2675 = t3864 * t3893 + t3652;
t3115 = -pkin(3) / 0.2e1;
t2763 = t2970 + t3850 / 0.2e1 + t3115;
t2681 = t3456 * t3937 - t2760;
t3193 = pkin(2) * t3456 + t2681 * t3097;
t2597 = (-t2763 * t3744 + t2957 * t3757) * t3989 + (t2957 * t2675 + t2954 * t3193) * t3098 + t3805 + t2957 * t3760;
t3504 = t2597 * t3787;
t2598 = (t2763 * t3735 + t2954 * t3757) * t3989 + (t2954 * t2675 - t2957 * t3193) * t3098 - t3804 + t2954 * t3760;
t3503 = t2598 * t3787;
t2676 = t3862 * t3891 + t3651;
t2764 = t2971 + t3848 / 0.2e1 + t3115;
t2682 = t3455 * t3937 - t2761;
t3192 = pkin(2) * t3455 + t2682 * t3100;
t2599 = (-t2764 * t3741 + t2958 * t3756) * t3988 + (t2958 * t2676 + t2955 * t3192) * t3101 + t3803 + t2958 * t3759;
t3502 = t2599 * t3785;
t2600 = (t2764 * t3732 + t2955 * t3756) * t3988 + (t2955 * t2676 - t2958 * t3192) * t3101 - t3802 + t2955 * t3759;
t3501 = t2600 * t3785;
t2677 = t3860 * t3889 + t3650;
t2765 = t2972 + t3846 / 0.2e1 + t3115;
t2683 = t3454 * t3937 - t2762;
t3191 = pkin(2) * t3454 + t2683 * t3103;
t2601 = (-t2765 * t3738 + t2959 * t3755) * t3987 + (t2959 * t2677 + t2956 * t3191) * t3104 + t3801 + t2959 * t3758;
t3500 = t2601 * t3783;
t2602 = (t2765 * t3729 + t2956 * t3755) * t3987 + (t2956 * t2677 - t2959 * t3191) * t3104 - t3800 + t2956 * t3758;
t3499 = t2602 * t3783;
t3471 = t2731 * t3745;
t3470 = t2731 * t3736;
t3469 = t2733 * t3742;
t3468 = t2733 * t3733;
t3467 = t2735 * t3739;
t3466 = t2735 * t3730;
t3434 = t2731 * t3667;
t3433 = t2731 * t3664;
t3432 = t2733 * t3666;
t3431 = t2733 * t3663;
t3430 = t2735 * t3665;
t3429 = t2735 * t3662;
t3407 = t3089 * t3540;
t3406 = t3098 * t3540;
t3405 = t3092 * t3539;
t3404 = t3101 * t3539;
t3403 = t3095 * t3538;
t3402 = t3104 * t3538;
t3401 = t3221 * t3530;
t3400 = t2728 * t3530;
t3399 = t3089 * t3530;
t3398 = t3098 * t3530;
t3012 = t3089 ^ 2;
t3397 = t2525 * t3012 * t3772;
t3396 = t3711 * t3826;
t3393 = t3220 * t3525;
t3392 = t2729 * t3525;
t3391 = t3092 * t3525;
t3390 = t3101 * t3525;
t3015 = t3092 ^ 2;
t3389 = t2526 * t3015 * t3769;
t3388 = t3703 * t3824;
t3385 = t3219 * t3520;
t3384 = t2730 * t3520;
t3383 = t3095 * t3520;
t3382 = t3104 * t3520;
t3018 = t3095 ^ 2;
t3381 = t2527 * t3018 * t3766;
t3380 = t3695 * t3822;
t3377 = t2731 * t3011 * t3817;
t3376 = t2733 * t3014 * t3816;
t3375 = t2735 * t3017 * t3815;
t3374 = t2666 * t3090 * t3814;
t3372 = t3099 * t3507;
t3370 = t2667 * t3093 * t3813;
t3368 = t3102 * t3506;
t3366 = t2668 * t3096 * t3812;
t3364 = t3105 * t3505;
t3362 = t2636 * t3808;
t3361 = t2637 * t3807;
t3360 = t2638 * t3806;
t3359 = t3770 * t3799;
t3357 = t3767 * t3798;
t3355 = t3764 * t3797;
t3338 = t3711 * t3770;
t3337 = t3703 * t3767;
t3336 = t3695 * t3764;
t3326 = t3817 * t3895;
t3325 = t3816 * t3895;
t3324 = t3815 * t3895;
t3308 = t3661 * t3787;
t3307 = t3660 * t3787;
t2495 = -pkin(2) * t2498 + t3527;
t3306 = (t2495 * t3088 + t3097 * t3011 * t3326 + (-t2817 + t3950) * t2636 - t3394) * t3787;
t3305 = (-t2495 * t3097 - t2636 * t3998 + t3010 * t3326 - t3395) * t3787;
t3304 = t3659 * t3785;
t3303 = t3658 * t3785;
t2496 = -pkin(2) * t2499 + t3522;
t3302 = (t2496 * t3091 + t3100 * t3014 * t3325 + (-t2818 + t3949) * t2637 - t3386) * t3785;
t3301 = (-t2496 * t3100 - t2637 * t3996 + t3013 * t3325 - t3387) * t3785;
t3300 = t3657 * t3783;
t3299 = t3656 * t3783;
t2497 = -pkin(2) * t2500 + t3517;
t3298 = (t2497 * t3094 + t3103 * t3017 * t3324 + (-t2819 + t3948) * t2638 - t3378) * t3783;
t3297 = (-t2497 * t3103 - t2638 * t3997 + t3016 * t3324 - t3379) * t3783;
t3287 = pkin(5) * t3371;
t3286 = pkin(5) * t3367;
t3285 = pkin(5) * t3363;
t3269 = t3090 * t3396;
t3268 = t3093 * t3388;
t3267 = t3096 * t3380;
t3266 = t3090 * t3373;
t3265 = t2731 * t3372;
t3264 = t3093 * t3369;
t3263 = t2733 * t3368;
t3262 = t3096 * t3365;
t3261 = t2735 * t3364;
t3257 = t3098 * t3362;
t3256 = t3101 * t3361;
t3255 = t3104 * t3360;
t3254 = t2663 * t3359;
t2672 = -0.4e1 * t3332 + (0.4e1 * t3022 - 0.2e1) * t3020 - t2867;
t3253 = t2672 * t3359;
t3252 = t3089 * t3359;
t3251 = t3098 * t3359;
t3250 = t2664 * t3357;
t2673 = -0.4e1 * t3330 + (0.4e1 * t3026 - 0.2e1) * t3024 - t2868;
t3249 = t2673 * t3357;
t3248 = t3092 * t3357;
t3247 = t3101 * t3357;
t3246 = t2665 * t3355;
t2674 = -0.4e1 * t3328 + (0.4e1 * t3030 - 0.2e1) * t3028 - t2869;
t3245 = t2674 * t3355;
t3244 = t3095 * t3355;
t3243 = t3104 * t3355;
t3239 = -t3377 / 0.4e1;
t3238 = t3377 / 0.4e1;
t3237 = -t3376 / 0.4e1;
t3236 = t3376 / 0.4e1;
t3235 = -t3375 / 0.4e1;
t3234 = t3375 / 0.4e1;
t3233 = t2480 * t2728 - t2552 * t3221;
t3232 = -t2480 * t3221 - t2552 * t2728;
t3231 = t2481 * t2729 - t2553 * t3220;
t3230 = -t2481 * t3220 - t2553 * t2729;
t3229 = t2482 * t2730 - t2554 * t3219;
t3228 = -t2482 * t3219 - t2554 * t2730;
t3215 = -0.2e1 * t3254;
t3214 = -0.2e1 * t3250;
t3213 = -0.2e1 * t3246;
t3212 = t2732 * t2867 * t3374;
t3211 = t3372 * t3795;
t3210 = t2954 * t3266;
t3209 = t2957 * t3266;
t3208 = t2734 * t2868 * t3370;
t3207 = t3368 * t3793;
t3206 = t2955 * t3264;
t3205 = t2958 * t3264;
t3204 = t2736 * t2869 * t3366;
t3203 = t3364 * t3791;
t3202 = t2956 * t3262;
t3201 = t2959 * t3262;
t3200 = t3090 * t3238;
t3199 = t3098 * t3239;
t3198 = t3093 * t3236;
t3197 = t3101 * t3237;
t3196 = t3096 * t3234;
t3195 = t3104 * t3235;
t3190 = -t2498 * t3771 + t3531;
t3189 = -t2499 * t3768 + t3526;
t3188 = -t2500 * t3765 + t3521;
t3187 = 0.2e1 * t2672 * t3513 + t3826 * t3936;
t2722 = t2728 ^ 2;
t3186 = t2722 * t3826 + t3513 * t3936;
t3185 = 0.2e1 * t2673 * t3511 + t3824 * t3935;
t2723 = t2729 ^ 2;
t3184 = t2723 * t3824 + t3511 * t3935;
t3183 = 0.2e1 * t2674 * t3509 + t3822 * t3934;
t2724 = t2730 ^ 2;
t3182 = t2724 * t3822 + t3509 * t3934;
t2719 = t2963 + t2861 + t3645;
t2624 = t2719 * t3090 * t3989 + t3975 * t3752 - pkin(3) * ((t2970 + t2789) * t3090 + t3331);
t3181 = t2624 * t3341 + t3808;
t2720 = t2965 + t2862 + t3645;
t2625 = t2720 * t3093 * t3988 + t3974 * t3749 - pkin(3) * ((t2971 + t2790) * t3093 + t3329);
t3180 = t2625 * t3340 + t3807;
t2721 = t2967 + t2863 + t3645;
t2626 = t2721 * t3096 * t3987 + t3973 * t3746 - pkin(3) * ((t2972 + t2791) * t3096 + t3327);
t3179 = t2626 * t3339 + t3806;
t3175 = t3181 * t2657;
t3174 = t3180 * t2658;
t3173 = t3179 * t2659;
t3172 = -t2480 * t3771 + t2525 * t3181;
t3171 = -t2481 * t3768 + t2526 * t3180;
t3170 = -t2482 * t3765 + t2527 * t3179;
t3169 = t2597 * t3399 + t2599 * t3391 + t2601 * t3383;
t3168 = t2597 * t3398 + t2599 * t3390 + t2601 * t3382;
t3167 = t2598 * t3399 + t2600 * t3391 + t2602 * t3383;
t3166 = t2598 * t3398 + t2600 * t3390 + t2602 * t3382;
t2662 = pkin(3) * t2962 + (-t3641 + t3548 + t3611) * t3095;
t2661 = pkin(3) * t2961 + (-t3641 + t3549 + t3612) * t3092;
t2660 = pkin(3) * t2960 + (-t3641 + t3550 + t3613) * t3089;
t2596 = (-t2721 * t3729 - t2956 * t3577) * t3987 + (-t2662 * t2956 + t2683 * t3747) * t3104 + pkin(3) * t3800 - t2782 * t3748;
t2595 = (t2721 * t3738 - t2959 * t3577) * t3987 + (-t2662 * t2959 - t2683 * t3748) * t3104 - pkin(3) * t3801 - t2782 * t3747;
t2594 = (-t2720 * t3732 - t2955 * t3578) * t3988 + (-t2661 * t2955 + t2682 * t3750) * t3101 + pkin(3) * t3802 - t2781 * t3751;
t2593 = (t2720 * t3741 - t2958 * t3578) * t3988 + (-t2661 * t2958 - t2682 * t3751) * t3101 - pkin(3) * t3803 - t2781 * t3750;
t2592 = (-t2719 * t3735 - t2954 * t3579) * t3989 + (-t2660 * t2954 + t2681 * t3753) * t3098 + pkin(3) * t3804 - t2780 * t3754;
t2591 = (t2719 * t3744 - t2957 * t3579) * t3989 + (-t2660 * t2957 - t2681 * t3754) * t3098 - pkin(3) * t3805 - t2780 * t3753;
t2569 = t3104 * t3599 - t3095 * t3285 / 0.4e1;
t2568 = t3101 * t3600 - t3092 * t3286 / 0.4e1;
t2567 = t3098 * t3601 - t3089 * t3287 / 0.4e1;
t2566 = pkin(1) * t3488 + t3104 * t3285 / 0.4e1;
t2565 = pkin(1) * t3491 + t3101 * t3286 / 0.4e1;
t2564 = pkin(1) * t3494 + t3098 * t3287 / 0.4e1;
t2494 = -0.2e1 * t2527 * t2977 - t3104 * t3852;
t2493 = -0.2e1 * t2526 * t2975 - t3101 * t3853;
t2492 = -0.2e1 * t2525 * t2973 - t3098 * t3854;
t2491 = -t3095 * t3852 + t3821 * t4011;
t2490 = -t3092 * t3853 + t3823 * t4011;
t2489 = -t3089 * t3854 + t3825 * t4011;
t1 = [-t2525 * t3470 - t2526 * t3468 - t2527 * t3466, 0, 0, -t2957 * t3397 - t2958 * t3389 - t2959 * t3381 + ((-t2602 * t3797 - t2959 * t3366) * t3336 + (-t2600 * t3798 - t2958 * t3370) * t3337 + (-t2598 * t3799 - t2957 * t3374) * t3338) * t3152, -0.2e1 * t2957 * t3269 - 0.2e1 * t2958 * t3268 - 0.2e1 * t2959 * t3267 + ((t2602 * t3809 - t2959 * t3204) * t3016 + (t2600 * t3810 - t2958 * t3208) * t3013 + (t2598 * t3811 - t2957 * t3212) * t3010) * t3152, -t2957 * t3407 - t2958 * t3405 - t2959 * t3403 + (t3195 * t3730 + t3197 * t3733 + t3199 * t3736) * t3153 + t3167 * t3152, -t2957 * t3406 - t2958 * t3404 - t2959 * t3402 + (t2957 * t3089 * t3200 + t2958 * t3092 * t3198 + t2959 * t3095 * t3196) * t3153 + t3166 * t3152, (t2498 * t3503 + t2499 * t3501 + t2500 * t3499) * t3152, -t2489 * t3470 - t2490 * t3468 - t2491 * t3466 + (t2564 * t3209 + t2565 * t3205 + t2566 * t3201 - t3167 * pkin(5) + (t2598 * t3252 + t2600 * t3248 + t2602 * t3244) * pkin(1)) * t3152, -t2492 * t3470 - t2493 * t3468 - t2494 * t3466 + (t2567 * t3209 + t2568 * t3205 + t2569 * t3201 - t3166 * pkin(5) + (t2598 * t3251 + t2600 * t3247 + t2602 * t3243) * pkin(1)) * t3152, -t3182 * t3730 - t3184 * t3733 - t3186 * t3736 + (t2598 * t3215 + t2600 * t3214 + t2602 * t3213 + (-t2592 * t3254 - t2594 * t3250 - t2596 * t3246) * t3621) * t3152, -t3183 * t3730 - t3185 * t3733 - t3187 * t3736 + (-t2598 * t3253 - t2600 * t3249 - t2602 * t3245 + (-t2592 * t3253 - t2594 * t3249 - t2596 * t3245) * t3148) * t3152, -t3229 * t3466 - t3231 * t3468 - t3233 * t3470 + (t2598 * t3400 + t2600 * t3392 + t2602 * t3384 + (t2592 * t3400 + t2594 * t3392 + t2596 * t3384) * t3148) * t3152, -t3228 * t3466 - t3230 * t3468 - t3232 * t3470 + (-t2598 * t3401 - t2600 * t3393 - t2602 * t3385 + (-t2592 * t3401 - t2594 * t3393 - t2596 * t3385) * t3148) * t3152, (t2480 * t3503 + t2481 * t3501 + t2482 * t3499 + (t2592 * t3543 + t2594 * t3542 + t2596 * t3541) * t3148) * t3152, -t3430 * t3730 - t3432 * t3733 - t3434 * t3736 + (t2602 * t3299 + t2600 * t3303 + t2598 * t3307 + (t2592 * t3305 + t2594 * t3301 + t2596 * t3297) * t3148) * t3152, -t3429 * t3730 - t3431 * t3733 - t3433 * t3736 + (t2602 * t3300 + t2600 * t3304 + t2598 * t3308 + (t2592 * t3306 + t2594 * t3302 + t2596 * t3298) * t3148) * t3152, 0; t2525 * t3471 + t2526 * t3469 + t2527 * t3467, 0, 0, t2954 * t3397 + t2955 * t3389 + t2956 * t3381 + ((-t2601 * t3797 + t2956 * t3366) * t3336 + (-t2599 * t3798 + t2955 * t3370) * t3337 + (-t2597 * t3799 + t2954 * t3374) * t3338) * t3152, 0.2e1 * t2954 * t3269 + 0.2e1 * t2955 * t3268 + 0.2e1 * t2956 * t3267 + ((t2601 * t3809 + t2956 * t3204) * t3016 + (t2599 * t3810 + t2955 * t3208) * t3013 + (t2597 * t3811 + t2954 * t3212) * t3010) * t3152, t2954 * t3407 + t2955 * t3405 + t2956 * t3403 + (t2954 * t3098 * t3200 + t2955 * t3101 * t3198 + t2956 * t3104 * t3196) * t3153 + t3169 * t3152, t2954 * t3406 + t2955 * t3404 + t2956 * t3402 + (t3089 * t3239 * t3745 + t3092 * t3237 * t3742 + t3095 * t3235 * t3739) * t3153 + t3168 * t3152, (t2498 * t3504 + t2499 * t3502 + t2500 * t3500) * t3152, t2489 * t3471 + t2490 * t3469 + t2491 * t3467 + (-t2564 * t3210 - t2565 * t3206 - t2566 * t3202 - t3169 * pkin(5) + (t2597 * t3252 + t2599 * t3248 + t2601 * t3244) * pkin(1)) * t3152, t2492 * t3471 + t2493 * t3469 + t2494 * t3467 + (-t2567 * t3210 - t2568 * t3206 - t2569 * t3202 - t3168 * pkin(5) + (t2597 * t3251 + t2599 * t3247 + t2601 * t3243) * pkin(1)) * t3152, t3182 * t3739 + t3184 * t3742 + t3186 * t3745 + (t2597 * t3215 + t2599 * t3214 + t2601 * t3213 + (-t2591 * t3254 - t2593 * t3250 - t2595 * t3246) * t3621) * t3152, t3183 * t3739 + t3185 * t3742 + t3187 * t3745 + (-t2597 * t3253 - t2599 * t3249 - t2601 * t3245 + (-t2591 * t3253 - t2593 * t3249 - t2595 * t3245) * t3148) * t3152, t3229 * t3467 + t3231 * t3469 + t3233 * t3471 + (t2597 * t3400 + t2599 * t3392 + t2601 * t3384 + (t2591 * t3400 + t2593 * t3392 + t2595 * t3384) * t3148) * t3152, t3228 * t3467 + t3230 * t3469 + t3232 * t3471 + (-t2597 * t3401 - t2599 * t3393 - t2601 * t3385 + (-t2591 * t3401 - t2593 * t3393 - t2595 * t3385) * t3148) * t3152, (t2480 * t3504 + t2481 * t3502 + t2482 * t3500 + (t2591 * t3543 + t2593 * t3542 + t2595 * t3541) * t3148) * t3152, t3665 * t3467 + t3666 * t3469 + t3667 * t3471 + (t2601 * t3299 + t2599 * t3303 + t2597 * t3307 + (t2591 * t3305 + t2593 * t3301 + t2595 * t3297) * t3148) * t3152, t3662 * t3467 + t3663 * t3469 + t3664 * t3471 + (t2601 * t3300 + t2599 * t3304 + t2597 * t3308 + (t2591 * t3306 + t2593 * t3302 + t2595 * t3298) * t3148) * t3152, 0; -t3519 - t3524 - t3529, 0, 0, -t3089 * t3257 - t3092 * t3256 - t3095 * t3255 - t3012 * t3529 - t3015 * t3524 - t3018 * t3519 + (-t3203 * t3695 - t3207 * t3703 - t3211 * t3711) * t3152, -0.2e1 * t3099 * t3396 - 0.2e1 * t3102 * t3388 - 0.2e1 * t3105 * t3380 + t2618 * t3808 + t2619 * t3807 + t2620 * t3806 + (-t2867 * t3211 - t2868 * t3207 - t2869 * t3203) * t3152, t3188 * t3095 + t3189 * t3092 + t3190 * t3089 + (t3099 * t3199 + t3102 * t3197 + t3105 * t3195) * t3153, t3188 * t3104 + t3189 * t3101 + t3190 * t3098 + (t3234 * t3694 + t3236 * t3702 + t3238 * t3710) * t3153, t2498 * t3808 + t2499 * t3807 + t2500 * t3806, -t2489 * t3771 - t2490 * t3768 - t2491 * t3765 + (t2564 * t3265 + t2565 * t3263 + t2566 * t3261) * t3152 + (-t3089 * t3531 - t3092 * t3526 - t3095 * t3521) * pkin(5) + (t3089 * t3362 + t3092 * t3361 + t3095 * t3360) * pkin(1), -t2492 * t3771 - t2493 * t3768 - t2494 * t3765 + (t2567 * t3265 + t2568 * t3263 + t2569 * t3261) * t3152 + (-t3098 * t3531 - t3101 * t3526 - t3104 * t3521) * pkin(5) + (t3255 + t3256 + t3257) * pkin(1), -t2722 * t3529 - t2723 * t3524 - t2724 * t3519 + (-0.2e1 * t3173 - 0.4e1 * t3508) * t2736 * t2665 + (-0.2e1 * t3174 - 0.4e1 * t3510) * t2734 * t2664 + (-0.2e1 * t3175 - 0.4e1 * t3512) * t2732 * t2663, -0.4e1 * t2663 * t3529 - 0.4e1 * t2664 * t3524 - 0.4e1 * t2665 * t3519 + (-t3173 - 0.2e1 * t3508) * t2736 * t2674 + (-t3174 - 0.2e1 * t3510) * t2734 * t2673 + (-t3175 - 0.2e1 * t3512) * t2732 * t2672, t2728 * t3172 + t2729 * t3171 + t2730 * t3170 + t3219 * t3514 + t3220 * t3515 + t3221 * t3516, t2728 * t3516 + t2729 * t3515 + t2730 * t3514 - t3170 * t3219 - t3171 * t3220 - t3172 * t3221, t2480 * t3808 + t2481 * t3807 + t2482 * t3806 + (t2624 * t3543 + t2625 * t3542 + t2626 * t3541) * t3671, -t3105 * t3430 - t3102 * t3432 - t3099 * t3434 + t3656 * t3806 + t3658 * t3807 + t3660 * t3808 + (t2624 * t3305 + t2625 * t3301 + t2626 * t3297) * t3671, -t3105 * t3429 - t3102 * t3431 - t3099 * t3433 + t3657 * t3806 + t3659 * t3807 + t3661 * t3808 + (t2624 * t3306 + t2625 * t3302 + t2626 * t3298) * t3671, 0;];
tau_reg  = t1;
