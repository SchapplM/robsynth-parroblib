% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR7V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR7V2G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 10:47
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR7V2G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 10:41:46
% EndTime: 2020-08-07 10:42:16
% DurationCPUTime: 33.50s
% Computational Cost: add. (36039->972), mult. (62409->1651), div. (4239->27), fcn. (43746->66), ass. (0->673)
t6347 = legFrame(3,2);
t6304 = sin(t6347);
t6816 = 0.2e1 * t6304;
t6348 = legFrame(2,2);
t6305 = sin(t6348);
t6815 = 0.2e1 * t6305;
t6349 = legFrame(1,2);
t6306 = sin(t6349);
t6814 = 0.2e1 * t6306;
t6307 = cos(t6347);
t6813 = -0.2e1 * t6307;
t6308 = cos(t6348);
t6812 = -0.2e1 * t6308;
t6309 = cos(t6349);
t6811 = -0.2e1 * t6309;
t6775 = qJ(3,1) + qJ(1,1);
t6302 = qJ(2,1) + t6775;
t6776 = -qJ(3,1) + qJ(1,1);
t6303 = -qJ(2,1) + t6776;
t6358 = sin(qJ(1,1));
t6379 = 2 * qJ(3,1);
t6762 = 2 * pkin(1);
t6768 = qJ(1,1) - (2 * qJ(2,1));
t6769 = qJ(1,1) + (2 * qJ(2,1));
t6370 = pkin(5) + pkin(6);
t6320 = (pkin(7) + t6370);
t6795 = 2 * t6320;
t6201 = (-sin(t6303) - sin(t6302)) * t6762 + (cos(t6303) + cos(t6302)) * t6795 + (sin((2 * qJ(3,1)) - t6768) - sin(t6379 + t6769) - 0.2e1 * t6358) * pkin(3) + (sin(qJ(3,1) - t6768) - sin(qJ(3,1) + t6769) - sin(t6776) - sin(t6775)) * pkin(2);
t6344 = qJ(2,1) + qJ(3,1);
t6357 = sin(qJ(2,1));
t6384 = pkin(2) ^ 2;
t6356 = sin(qJ(3,1));
t6780 = t6356 * pkin(1);
t6216 = -t6384 * sin((qJ(2,1) - qJ(3,1))) + pkin(2) * (pkin(2) * sin(t6344) + 0.2e1 * t6780 + (sin((t6379 + qJ(2,1))) - t6357) * pkin(3));
t6759 = t6201 / t6216;
t6192 = t6759 / 0.2e1;
t6773 = qJ(3,2) + qJ(1,2);
t6300 = qJ(2,2) + t6773;
t6774 = -qJ(3,2) + qJ(1,2);
t6301 = -qJ(2,2) + t6774;
t6355 = sin(qJ(1,2));
t6376 = 2 * qJ(3,2);
t6766 = qJ(1,2) - (2 * qJ(2,2));
t6767 = qJ(1,2) + (2 * qJ(2,2));
t6200 = (-sin(t6301) - sin(t6300)) * t6762 + (cos(t6301) + cos(t6300)) * t6795 + (sin((2 * qJ(3,2)) - t6766) - sin(t6376 + t6767) - 0.2e1 * t6355) * pkin(3) + (sin(qJ(3,2) - t6766) - sin(qJ(3,2) + t6767) - sin(t6774) - sin(t6773)) * pkin(2);
t6343 = qJ(2,2) + qJ(3,2);
t6354 = sin(qJ(2,2));
t6353 = sin(qJ(3,2));
t6781 = t6353 * pkin(1);
t6215 = -t6384 * sin((qJ(2,2) - qJ(3,2))) + pkin(2) * (pkin(2) * sin(t6343) + 0.2e1 * t6781 + (sin((t6376 + qJ(2,2))) - t6354) * pkin(3));
t6760 = t6200 / t6215;
t6191 = t6760 / 0.2e1;
t6771 = qJ(3,3) + qJ(1,3);
t6298 = qJ(2,3) + t6771;
t6772 = -qJ(3,3) + qJ(1,3);
t6299 = -qJ(2,3) + t6772;
t6352 = sin(qJ(1,3));
t6373 = 2 * qJ(3,3);
t6764 = -(2 * qJ(2,3)) + qJ(1,3);
t6765 = qJ(1,3) + (2 * qJ(2,3));
t6199 = (-sin(t6299) - sin(t6298)) * t6762 + (cos(t6299) + cos(t6298)) * t6795 + (sin((2 * qJ(3,3)) - t6764) - sin(t6373 + t6765) - 0.2e1 * t6352) * pkin(3) + (sin(qJ(3,3) - t6764) - sin(qJ(3,3) + t6765) - sin(t6772) - sin(t6771)) * pkin(2);
t6342 = qJ(2,3) + qJ(3,3);
t6351 = sin(qJ(2,3));
t6350 = sin(qJ(3,3));
t6782 = t6350 * pkin(1);
t6214 = -t6384 * sin((qJ(2,3) - qJ(3,3))) + pkin(2) * (pkin(2) * sin(t6342) + 0.2e1 * t6782 + (sin((t6373 + qJ(2,3))) - t6351) * pkin(3));
t6761 = t6199 / t6214;
t6190 = t6761 / 0.2e1;
t6810 = t6304 * t6307;
t6809 = t6305 * t6308;
t6808 = t6306 * t6309;
t6359 = cos(qJ(3,3));
t6310 = t6359 * pkin(3);
t6687 = pkin(2) * t6310;
t6382 = pkin(3) ^ 2;
t6688 = -t6382 / 0.2e1 + t6384 / 0.2e1;
t6333 = t6359 ^ 2;
t6707 = t6333 * t6382;
t6253 = t6687 + t6688 + t6707;
t6313 = pkin(3) * t6333;
t6361 = cos(qJ(1,3));
t6704 = t6350 * t6351;
t6615 = t6361 * t6704;
t6670 = pkin(3) * t6704;
t6289 = t6310 + pkin(2);
t6360 = cos(qJ(2,3));
t6726 = t6289 * t6360;
t6334 = t6360 ^ 2;
t6794 = 0.2e1 * t6334;
t6203 = t6253 * t6352 * t6794 + ((pkin(1) - 0.2e1 * t6670) * t6352 - t6361 * t6320) * t6726 - pkin(3) * ((pkin(1) * t6704 - pkin(3) + t6313) * t6352 - t6320 * t6615);
t6383 = 0.1e1 / pkin(3);
t6385 = 0.1e1 / pkin(2);
t6250 = pkin(1) - t6670 + t6726;
t6752 = 0.1e1 / t6250 / t6350;
t6647 = t6385 * t6752;
t6578 = t6383 * t6647;
t6807 = t6203 * t6578 + t6190;
t6362 = cos(qJ(3,2));
t6311 = t6362 * pkin(3);
t6686 = pkin(2) * t6311;
t6336 = t6362 ^ 2;
t6706 = t6336 * t6382;
t6254 = t6686 + t6688 + t6706;
t6314 = pkin(3) * t6336;
t6364 = cos(qJ(1,2));
t6700 = t6353 * t6354;
t6614 = t6364 * t6700;
t6669 = pkin(3) * t6700;
t6290 = t6311 + pkin(2);
t6363 = cos(qJ(2,2));
t6723 = t6290 * t6363;
t6337 = t6363 ^ 2;
t6793 = 0.2e1 * t6337;
t6204 = t6254 * t6355 * t6793 + ((pkin(1) - 0.2e1 * t6669) * t6355 - t6364 * t6320) * t6723 - pkin(3) * ((pkin(1) * t6700 - pkin(3) + t6314) * t6355 - t6320 * t6614);
t6251 = pkin(1) - t6669 + t6723;
t6750 = 0.1e1 / t6251 / t6353;
t6645 = t6385 * t6750;
t6575 = t6383 * t6645;
t6806 = t6204 * t6575 + t6191;
t6365 = cos(qJ(3,1));
t6312 = t6365 * pkin(3);
t6685 = pkin(2) * t6312;
t6339 = t6365 ^ 2;
t6705 = t6339 * t6382;
t6255 = t6685 + t6688 + t6705;
t6315 = pkin(3) * t6339;
t6367 = cos(qJ(1,1));
t6696 = t6356 * t6357;
t6613 = t6367 * t6696;
t6668 = pkin(3) * t6696;
t6291 = t6312 + pkin(2);
t6366 = cos(qJ(2,1));
t6720 = t6291 * t6366;
t6340 = t6366 ^ 2;
t6792 = 0.2e1 * t6340;
t6205 = t6255 * t6358 * t6792 + ((pkin(1) - 0.2e1 * t6668) * t6358 - t6367 * t6320) * t6720 - pkin(3) * ((pkin(1) * t6696 - pkin(3) + t6315) * t6358 - t6320 * t6613);
t6252 = pkin(1) - t6668 + t6720;
t6748 = 0.1e1 / t6252 / t6356;
t6643 = t6385 * t6748;
t6572 = t6383 * t6643;
t6805 = t6205 * t6572 + t6192;
t6694 = t6357 * t6365;
t6800 = -0.2e1 * pkin(2);
t6801 = -2 * pkin(1);
t6804 = -t6356 * t6340 * t6800 + 0.2e1 * (pkin(2) * t6694 + t6780) * t6366 - t6694 * t6801;
t6698 = t6354 * t6362;
t6803 = -t6353 * t6337 * t6800 + 0.2e1 * (pkin(2) * t6698 + t6781) * t6363 - t6698 * t6801;
t6702 = t6351 * t6359;
t6802 = -t6350 * t6334 * t6800 + 0.2e1 * (pkin(2) * t6702 + t6782) * t6360 - t6702 * t6801;
t6799 = 0.2e1 * pkin(2);
t6798 = 0.2e1 * pkin(3);
t6797 = 2 * MDP(5);
t6796 = 4 * MDP(12);
t6791 = -0.2e1 * t6351;
t6790 = -0.2e1 * t6354;
t6789 = -0.2e1 * t6357;
t6788 = t6370 / 0.2e1;
t6787 = pkin(3) * t6350;
t6786 = pkin(3) * t6353;
t6785 = pkin(3) * t6356;
t6784 = pkin(5) / 0.2e1;
t6783 = pkin(5) * t6385;
t6779 = t6359 * pkin(2);
t6778 = t6362 * pkin(2);
t6777 = t6365 * pkin(2);
t6770 = MDP(8) / pkin(2) ^ 2;
t6763 = MDP(15) * t6385;
t6691 = pkin(1) * t6361 + t6352 * t6320;
t6217 = t6691 * t6704 + (t6333 - 0.1e1) * t6361 * pkin(3);
t6758 = t6217 * t6304;
t6757 = t6217 * t6307;
t6690 = pkin(1) * t6364 + t6355 * t6320;
t6218 = t6690 * t6700 + (t6336 - 0.1e1) * t6364 * pkin(3);
t6756 = t6218 * t6305;
t6755 = t6218 * t6308;
t6689 = pkin(1) * t6367 + t6358 * t6320;
t6219 = t6689 * t6696 + (t6339 - 0.1e1) * t6367 * pkin(3);
t6754 = t6219 * t6306;
t6753 = t6219 * t6309;
t6751 = 0.1e1 / t6250 ^ 2 / t6350 ^ 2;
t6749 = 0.1e1 / t6251 ^ 2 / t6353 ^ 2;
t6747 = 0.1e1 / t6252 ^ 2 / t6356 ^ 2;
t6271 = pkin(3) * cos(t6342) + t6360 * pkin(2) + pkin(1);
t6265 = 0.1e1 / t6271;
t6746 = t6265 * t6361;
t6745 = t6265 * t6370;
t6266 = 0.1e1 / t6271 ^ 2;
t6324 = t6352 ^ 2;
t6744 = t6266 * t6324;
t6335 = t6361 ^ 2;
t6743 = t6266 * t6335;
t6272 = pkin(3) * cos(t6343) + t6363 * pkin(2) + pkin(1);
t6267 = 0.1e1 / t6272;
t6742 = t6267 * t6364;
t6741 = t6267 * t6370;
t6268 = 0.1e1 / t6272 ^ 2;
t6328 = t6355 ^ 2;
t6740 = t6268 * t6328;
t6338 = t6364 ^ 2;
t6739 = t6268 * t6338;
t6273 = pkin(3) * cos(t6344) + t6366 * pkin(2) + pkin(1);
t6269 = 0.1e1 / t6273;
t6738 = t6269 * t6367;
t6737 = t6269 * t6370;
t6270 = 0.1e1 / t6273 ^ 2;
t6332 = t6358 ^ 2;
t6736 = t6270 * t6332;
t6341 = t6367 ^ 2;
t6735 = t6270 * t6341;
t6280 = pkin(1) * t6351 - t6787;
t6734 = t6280 * t6359;
t6281 = pkin(1) * t6354 - t6786;
t6733 = t6281 * t6362;
t6282 = pkin(1) * t6357 - t6785;
t6732 = t6282 * t6365;
t6372 = pkin(2) / 0.2e1;
t6731 = (t6310 + t6372) * t6350;
t6730 = (t6311 + t6372) * t6353;
t6729 = (t6312 + t6372) * t6356;
t6728 = t6289 * t6304;
t6727 = t6289 * t6307;
t6725 = t6290 * t6305;
t6724 = t6290 * t6308;
t6722 = t6291 * t6306;
t6721 = t6291 * t6309;
t6719 = t6304 * t6352;
t6718 = t6304 * t6361;
t6717 = t6305 * t6355;
t6716 = t6305 * t6364;
t6715 = t6306 * t6358;
t6714 = t6306 * t6367;
t6713 = t6307 * t6352;
t6712 = t6307 * t6361;
t6711 = t6308 * t6355;
t6710 = t6308 * t6364;
t6709 = t6309 * t6358;
t6708 = t6309 * t6367;
t6703 = t6350 * t6370;
t6701 = t6351 * t6360;
t6699 = t6353 * t6370;
t6697 = t6354 * t6363;
t6695 = t6356 * t6370;
t6693 = t6357 * t6366;
t6692 = t6383 * t6385;
t6680 = 0.2e1 * t6385;
t6679 = pkin(1) * t6265 * t6352;
t6678 = pkin(1) * t6746;
t6677 = pkin(1) * t6267 * t6355;
t6676 = pkin(1) * t6742;
t6675 = pkin(1) * t6269 * t6358;
t6674 = pkin(1) * t6738;
t6673 = t6289 * t6787;
t6672 = t6290 * t6786;
t6671 = t6291 * t6785;
t6667 = MDP(8) * t6385 / 0.2e1;
t6319 = -t6382 + t6384;
t6220 = pkin(3) * t6782 + (t6319 + 0.2e1 * t6687 + 0.2e1 * t6707) * t6351;
t6241 = t6615 * t6798 - t6691;
t6166 = (t6253 * t6718 - t6307 * t6673) * t6794 + (-t6220 * t6307 - t6241 * t6728) * t6360 - pkin(3) * t6758 - t6280 * t6727;
t6666 = t6166 * t6752;
t6167 = (-t6253 * t6712 - t6304 * t6673) * t6794 + (-t6220 * t6304 + t6241 * t6727) * t6360 + pkin(3) * t6757 - t6280 * t6728;
t6665 = t6167 * t6752;
t6221 = pkin(3) * t6781 + (t6319 + 0.2e1 * t6686 + 0.2e1 * t6706) * t6354;
t6242 = t6614 * t6798 - t6690;
t6168 = (t6254 * t6716 - t6308 * t6672) * t6793 + (-t6221 * t6308 - t6242 * t6725) * t6363 - pkin(3) * t6756 - t6281 * t6724;
t6664 = t6168 * t6750;
t6169 = (-t6254 * t6710 - t6305 * t6672) * t6793 + (-t6221 * t6305 + t6242 * t6724) * t6363 + pkin(3) * t6755 - t6281 * t6725;
t6663 = t6169 * t6750;
t6222 = pkin(3) * t6780 + (t6319 + 0.2e1 * t6685 + 0.2e1 * t6705) * t6357;
t6243 = t6613 * t6798 - t6689;
t6170 = (t6255 * t6714 - t6309 * t6671) * t6792 + (-t6222 * t6309 - t6243 * t6722) * t6366 - pkin(3) * t6754 - t6282 * t6721;
t6662 = t6170 * t6748;
t6171 = (-t6255 * t6708 - t6306 * t6671) * t6792 + (-t6222 * t6306 + t6243 * t6721) * t6366 + pkin(3) * t6753 - t6282 * t6722;
t6661 = t6171 * t6748;
t6238 = t6782 + (-pkin(3) + t6779 + 0.2e1 * t6313) * t6351;
t6371 = -pkin(3) / 0.2e1;
t6274 = t6313 + t6779 / 0.2e1 + t6371;
t6427 = pkin(2) * t6615 + t6241 * t6359;
t6172 = (-t6274 * t6718 + t6307 * t6731) * t6794 + (t6307 * t6238 + t6304 * t6427) * t6360 + t6758 + t6307 * t6734;
t6660 = t6172 * t6752;
t6173 = (t6274 * t6712 + t6304 * t6731) * t6794 + (t6304 * t6238 - t6307 * t6427) * t6360 - t6757 + t6304 * t6734;
t6659 = t6173 * t6752;
t6239 = t6781 + (-pkin(3) + t6778 + 0.2e1 * t6314) * t6354;
t6275 = t6314 + t6778 / 0.2e1 + t6371;
t6426 = pkin(2) * t6614 + t6242 * t6362;
t6174 = (-t6275 * t6716 + t6308 * t6730) * t6793 + (t6308 * t6239 + t6305 * t6426) * t6363 + t6756 + t6308 * t6733;
t6658 = t6174 * t6750;
t6175 = (t6275 * t6710 + t6305 * t6730) * t6793 + (t6305 * t6239 - t6308 * t6426) * t6363 - t6755 + t6305 * t6733;
t6657 = t6175 * t6750;
t6240 = t6780 + (-pkin(3) + t6777 + 0.2e1 * t6315) * t6357;
t6276 = t6315 + t6777 / 0.2e1 + t6371;
t6425 = pkin(2) * t6613 + t6243 * t6365;
t6176 = (-t6276 * t6714 + t6309 * t6729) * t6792 + (t6309 * t6240 + t6306 * t6425) * t6366 + t6754 + t6309 * t6732;
t6656 = t6176 * t6748;
t6177 = (t6276 * t6708 + t6306 * t6729) * t6792 + (t6306 * t6240 - t6309 * t6425) * t6366 - t6753 + t6306 * t6732;
t6655 = t6177 * t6748;
t6654 = t6265 * t6761;
t6653 = t6267 * t6760;
t6652 = t6269 * t6759;
t6651 = t6203 * t6752;
t6650 = t6204 * t6750;
t6649 = t6205 * t6748;
t6648 = t6265 * t6752;
t6646 = t6267 * t6750;
t6644 = t6269 * t6748;
t6642 = t6265 * t6719;
t6641 = t6265 * t6713;
t6640 = t6352 * t6745;
t6639 = t6361 * t6745;
t6292 = t6304 ^ 2;
t6638 = t6292 * t6744;
t6295 = t6307 ^ 2;
t6637 = t6295 * t6744;
t6323 = t6351 ^ 2;
t6636 = t6323 * t6744;
t6635 = t6266 * t6701;
t6634 = t6266 * t6352 * t6361;
t6633 = t6267 * t6717;
t6632 = t6267 * t6711;
t6631 = t6355 * t6741;
t6630 = t6364 * t6741;
t6293 = t6305 ^ 2;
t6629 = t6293 * t6740;
t6296 = t6308 ^ 2;
t6628 = t6296 * t6740;
t6327 = t6354 ^ 2;
t6627 = t6327 * t6740;
t6626 = t6268 * t6697;
t6625 = t6268 * t6355 * t6364;
t6624 = t6269 * t6715;
t6623 = t6269 * t6709;
t6622 = t6358 * t6737;
t6621 = t6367 * t6737;
t6294 = t6306 ^ 2;
t6620 = t6294 * t6736;
t6297 = t6309 ^ 2;
t6619 = t6297 * t6736;
t6331 = t6357 ^ 2;
t6618 = t6331 * t6736;
t6617 = t6270 * t6693;
t6616 = t6270 * t6358 * t6367;
t6612 = t6359 * t6788;
t6611 = t6362 * t6788;
t6610 = t6365 * t6788;
t6609 = MDP(6) * t6680;
t6608 = MDP(7) * t6680;
t6607 = t6350 * t6679;
t6606 = t6351 * t6679;
t6605 = t6360 * t6679;
t6604 = t6353 * t6677;
t6603 = t6354 * t6677;
t6602 = t6363 * t6677;
t6601 = t6356 * t6675;
t6600 = t6357 * t6675;
t6599 = t6366 * t6675;
t6598 = t6265 * t6334 * t6779;
t6597 = t6267 * t6337 * t6778;
t6596 = t6269 * t6340 * t6777;
t6595 = pkin(5) * t6190;
t6594 = pkin(5) * t6191;
t6593 = pkin(5) * t6192;
t6592 = pkin(5) * t6647;
t6591 = pkin(5) * t6645;
t6590 = pkin(5) * t6643;
t6589 = t6752 * t6761;
t6588 = t6352 * t6654;
t6587 = t6361 * t6654;
t6586 = t6750 * t6760;
t6585 = t6355 * t6653;
t6584 = t6364 * t6653;
t6583 = t6748 * t6759;
t6582 = t6358 * t6652;
t6581 = t6367 * t6652;
t6580 = t6352 * t6648;
t6579 = t6361 * t6648;
t6577 = t6355 * t6646;
t6576 = t6364 * t6646;
t6574 = t6358 * t6644;
t6573 = t6367 * t6644;
t6472 = -t6359 * t6360 + t6704;
t6571 = t6472 * t6642;
t6570 = t6472 * t6641;
t6471 = -t6362 * t6363 + t6700;
t6569 = t6471 * t6633;
t6568 = t6471 * t6632;
t6470 = -t6365 * t6366 + t6696;
t6567 = t6470 * t6624;
t6566 = t6470 * t6623;
t6262 = t6350 * t6360 + t6702;
t6565 = t6262 * t6642;
t6564 = t6262 * t6641;
t6263 = t6353 * t6363 + t6698;
t6563 = t6263 * t6633;
t6562 = t6263 * t6632;
t6264 = t6356 * t6366 + t6694;
t6561 = t6264 * t6624;
t6560 = t6264 * t6623;
t6559 = t6351 * t6640;
t6558 = t6360 * t6640;
t6557 = t6360 * t6639;
t6556 = t6744 * t6810;
t6555 = t6304 * t6634;
t6554 = t6307 * t6634;
t6553 = t6323 * t6634;
t6552 = t6324 * t6635;
t6551 = t6354 * t6631;
t6550 = t6363 * t6631;
t6549 = t6363 * t6630;
t6548 = t6740 * t6809;
t6547 = t6305 * t6625;
t6546 = t6308 * t6625;
t6545 = t6327 * t6625;
t6544 = t6328 * t6626;
t6543 = t6357 * t6622;
t6542 = t6366 * t6622;
t6541 = t6366 * t6621;
t6540 = t6736 * t6808;
t6539 = t6306 * t6616;
t6538 = t6309 * t6616;
t6537 = t6331 * t6616;
t6536 = t6332 * t6617;
t6535 = t6351 * t6639;
t6534 = t6354 * t6630;
t6533 = t6357 * t6621;
t6532 = t6352 * t6598;
t6531 = t6355 * t6597;
t6530 = t6358 * t6596;
t6529 = t6351 * t6592;
t6528 = t6360 * t6592;
t6527 = t6354 * t6591;
t6526 = t6363 * t6591;
t6525 = t6357 * t6590;
t6524 = t6366 * t6590;
t6523 = t6351 * t6588;
t6522 = t6360 * t6588;
t6521 = t6354 * t6585;
t6520 = t6363 * t6585;
t6519 = t6357 * t6582;
t6518 = t6366 * t6582;
t6514 = t6472 * t6579;
t6513 = t6262 * t6579;
t6512 = t6304 * t6580;
t6511 = t6307 * t6580;
t6510 = t6351 * t6580;
t6509 = t6351 * t6579;
t6508 = t6360 * t6580;
t6507 = t6360 * t6579;
t6506 = t6471 * t6576;
t6505 = t6263 * t6576;
t6504 = t6305 * t6577;
t6503 = t6308 * t6577;
t6502 = t6354 * t6577;
t6501 = t6354 * t6576;
t6500 = t6363 * t6577;
t6499 = t6363 * t6576;
t6498 = t6470 * t6573;
t6497 = t6264 * t6573;
t6496 = t6306 * t6574;
t6495 = t6309 * t6574;
t6494 = t6357 * t6574;
t6493 = t6357 * t6573;
t6492 = t6366 * t6574;
t6491 = t6366 * t6573;
t6490 = t6350 * t6558;
t6489 = t6359 * t6558;
t6488 = t6634 * t6701;
t6487 = t6353 * t6550;
t6486 = t6362 * t6550;
t6485 = t6625 * t6697;
t6484 = t6356 * t6542;
t6483 = t6365 * t6542;
t6482 = t6616 * t6693;
t6481 = t6304 * t6559;
t6480 = t6305 * t6551;
t6479 = t6306 * t6543;
t6478 = t6307 * t6559;
t6477 = t6308 * t6551;
t6476 = t6309 * t6543;
t6475 = t6578 / 0.2e1;
t6474 = t6575 / 0.2e1;
t6473 = t6572 / 0.2e1;
t6468 = -pkin(1) * t6359 + pkin(2) * t6704;
t6466 = -pkin(1) * t6362 + pkin(2) * t6700;
t6464 = -pkin(1) * t6365 + pkin(2) * t6696;
t6463 = t6472 * t6512;
t6462 = t6472 * t6511;
t6461 = t6262 * t6512;
t6460 = t6262 * t6511;
t6459 = t6304 * t6510;
t6458 = t6304 * t6508;
t6457 = t6307 * t6510;
t6456 = t6307 * t6508;
t6455 = t6471 * t6504;
t6454 = t6471 * t6503;
t6453 = t6263 * t6504;
t6452 = t6263 * t6503;
t6451 = t6305 * t6502;
t6450 = t6305 * t6500;
t6449 = t6308 * t6502;
t6448 = t6308 * t6500;
t6447 = t6470 * t6496;
t6446 = t6470 * t6495;
t6445 = t6264 * t6496;
t6444 = t6264 * t6495;
t6443 = t6306 * t6494;
t6442 = t6306 * t6492;
t6441 = t6309 * t6494;
t6440 = t6309 * t6492;
t6439 = t6304 * t6490;
t6438 = t6304 * t6489;
t6437 = t6305 * t6487;
t6436 = t6305 * t6486;
t6435 = t6306 * t6484;
t6434 = t6306 * t6483;
t6430 = t6370 * t6472;
t6429 = t6370 * t6471;
t6428 = t6370 * t6470;
t6223 = (t6333 - 0.1e1 / 0.2e1) * t6701 + (t6334 - 0.1e1 / 0.2e1) * t6359 * t6350;
t6224 = (t6336 - 0.1e1 / 0.2e1) * t6697 + (t6337 - 0.1e1 / 0.2e1) * t6362 * t6353;
t6225 = (t6339 - 0.1e1 / 0.2e1) * t6693 + (t6340 - 0.1e1 / 0.2e1) * t6365 * t6356;
t6256 = t6262 ^ 2;
t6257 = t6263 ^ 2;
t6258 = t6264 ^ 2;
t6413 = (-t6176 * t6309 + t6177 * t6306) * t6574;
t6414 = (-t6174 * t6308 + t6175 * t6305) * t6577;
t6415 = (-t6172 * t6307 + t6173 * t6304) * t6580;
t6424 = (t6172 * t6173 * t6751 + t6174 * t6175 * t6749 + t6176 * t6177 * t6747) * t6770 + (-t6223 * t6556 - t6224 * t6548 - t6225 * t6540) * t6796 + (-t6256 * t6556 - t6257 * t6548 - t6258 * t6540) * MDP(11) + (-t6536 * t6808 - t6544 * t6809 - t6552 * t6810) * t6797 + (-t6323 * t6556 - t6327 * t6548 - t6331 * t6540) * MDP(4) + (-t6540 - t6548 - t6556) * MDP(1) + ((t6351 * t6415 + t6354 * t6414 + t6357 * t6413) * MDP(6) + (t6360 * t6415 + t6363 * t6414 + t6366 * t6413) * MDP(7)) * t6385;
t6393 = t6304 * t6522 + t6305 * t6520 + t6306 * t6518;
t6394 = t6304 * t6523 + t6305 * t6521 + t6306 * t6519;
t6397 = t6172 * t6507 + t6174 * t6499 + t6176 * t6491;
t6398 = t6172 * t6509 + t6174 * t6501 + t6176 * t6493;
t6423 = (-t6385 * t6398 + t6394 / 0.2e1) * MDP(6) + (-t6385 * t6397 + t6393 / 0.2e1) * MDP(7) + (t6172 * t6589 + t6174 * t6586 + t6176 * t6583) * t6667 + (-t6223 * t6555 - t6224 * t6547 - t6225 * t6539) * t6796 + (-t6256 * t6555 - t6257 * t6547 - t6258 * t6539) * MDP(11) + (-t6304 * t6488 - t6305 * t6485 - t6306 * t6482) * t6797 + (-t6304 * t6553 - t6305 * t6545 - t6306 * t6537) * MDP(4) + (-t6539 - t6547 - t6555) * MDP(1);
t6391 = t6307 * t6522 + t6308 * t6520 + t6309 * t6518;
t6392 = t6307 * t6523 + t6308 * t6521 + t6309 * t6519;
t6395 = t6173 * t6507 + t6175 * t6499 + t6177 * t6491;
t6396 = t6173 * t6509 + t6175 * t6501 + t6177 * t6493;
t6422 = (-t6385 * t6396 - t6392 / 0.2e1) * MDP(6) + (-t6385 * t6395 - t6391 / 0.2e1) * MDP(7) + (t6173 * t6589 + t6175 * t6586 + t6177 * t6583) * t6667 + (t6223 * t6554 + t6224 * t6546 + t6225 * t6538) * t6796 + (t6256 * t6554 + t6257 * t6546 + t6258 * t6538) * MDP(11) + (t6307 * t6488 + t6308 * t6485 + t6309 * t6482) * t6797 + (t6307 * t6553 + t6308 * t6545 + t6309 * t6537) * MDP(4) + (t6538 + t6546 + t6554) * MDP(1);
t6421 = 0.2e1 * t6265 * t6468;
t6420 = 0.2e1 * t6267 * t6466;
t6419 = 0.2e1 * t6269 * t6464;
t6412 = -0.2e1 * t6807 * t6746;
t6411 = -0.2e1 * t6806 * t6742;
t6410 = -0.2e1 * t6805 * t6738;
t6154 = t6172 * t6647;
t6106 = t6166 * t6578 + t6154;
t6409 = t6265 * (-t6106 * t6361 + t6719 * t6807);
t6155 = t6173 * t6647;
t6107 = t6167 * t6578 + t6155;
t6408 = t6265 * (-t6107 * t6361 - t6713 * t6807);
t6156 = t6174 * t6645;
t6108 = t6168 * t6575 + t6156;
t6407 = t6267 * (-t6108 * t6364 + t6717 * t6806);
t6157 = t6175 * t6645;
t6109 = t6169 * t6575 + t6157;
t6406 = t6267 * (-t6109 * t6364 - t6711 * t6806);
t6158 = t6176 * t6643;
t6110 = t6170 * t6572 + t6158;
t6405 = t6269 * (-t6110 * t6367 + t6715 * t6805);
t6159 = t6177 * t6643;
t6111 = t6171 * t6572 + t6159;
t6404 = t6269 * (-t6111 * t6367 - t6709 * t6805);
t6403 = t6265 * t6802;
t6402 = t6267 * t6803;
t6401 = t6269 * t6804;
t6400 = t6351 * t6587 + t6354 * t6584 + t6357 * t6581;
t6399 = t6360 * t6587 + t6363 * t6584 + t6366 * t6581;
t6390 = t6172 * t6459 + t6174 * t6451 + t6176 * t6443;
t6389 = t6172 * t6458 + t6174 * t6450 + t6176 * t6442;
t6388 = t6173 * t6457 + t6175 * t6449 + t6177 * t6441;
t6387 = t6173 * t6456 + t6175 * t6448 + t6177 * t6440;
t6237 = t6365 * t6541;
t6236 = t6362 * t6549;
t6235 = t6359 * t6557;
t6234 = t6356 * t6541;
t6233 = t6353 * t6549;
t6232 = t6350 * t6557;
t6231 = t6309 * t6483;
t6230 = t6308 * t6486;
t6229 = t6307 * t6489;
t6228 = t6309 * t6484;
t6227 = t6308 * t6487;
t6226 = t6307 * t6490;
t6189 = pkin(2) * t6192 + t6533;
t6188 = pkin(2) * t6191 + t6534;
t6187 = pkin(2) * t6190 + t6535;
t6186 = 0.2e1 * t6357 * t6674 - t6366 * t6593;
t6185 = 0.2e1 * t6354 * t6676 - t6363 * t6594;
t6184 = 0.2e1 * t6351 * t6678 - t6360 * t6595;
t6183 = -t6357 * t6593 - 0.2e1 * t6366 * t6674;
t6182 = -t6354 * t6594 - 0.2e1 * t6363 * t6676;
t6181 = -t6351 * t6595 - 0.2e1 * t6360 * t6678;
t6165 = -t6189 * t6356 + t6237;
t6164 = t6189 * t6365 + t6234;
t6163 = -t6188 * t6353 + t6236;
t6162 = t6188 * t6362 + t6233;
t6161 = -t6187 * t6350 + t6235;
t6160 = t6187 * t6359 + t6232;
t6153 = t6476 + t6655;
t6152 = t6477 + t6657;
t6151 = t6478 + t6659;
t6150 = t6479 - t6656;
t6149 = t6480 - t6658;
t6148 = t6481 - t6660;
t6147 = -t6177 * t6524 + 0.2e1 * t6309 * t6600;
t6146 = -t6176 * t6524 - 0.2e1 * t6306 * t6600;
t6145 = -t6175 * t6526 + 0.2e1 * t6308 * t6603;
t6144 = -t6174 * t6526 - 0.2e1 * t6305 * t6603;
t6143 = -t6173 * t6528 + 0.2e1 * t6307 * t6606;
t6142 = -t6172 * t6528 - 0.2e1 * t6304 * t6606;
t6141 = -t6177 * t6525 + t6599 * t6811;
t6140 = -t6176 * t6525 + t6599 * t6814;
t6139 = -t6175 * t6527 + t6602 * t6812;
t6138 = -t6174 * t6527 + t6602 * t6815;
t6137 = -t6173 * t6529 + t6605 * t6813;
t6136 = -t6172 * t6529 + t6605 * t6816;
t6132 = -t6153 * t6356 + t6231;
t6131 = t6153 * t6365 + t6228;
t6130 = -t6152 * t6353 + t6230;
t6129 = t6152 * t6362 + t6227;
t6128 = -t6151 * t6350 + t6229;
t6127 = t6151 * t6359 + t6226;
t6126 = -t6150 * t6365 - t6435;
t6125 = t6150 * t6356 - t6434;
t6124 = -t6149 * t6362 - t6437;
t6123 = t6149 * t6353 - t6436;
t6122 = -t6148 * t6359 - t6439;
t6121 = t6148 * t6350 - t6438;
t6120 = t6533 + (t6205 * t6473 + t6192) * t6799;
t6119 = t6534 + (t6204 * t6474 + t6191) * t6799;
t6118 = t6535 + (t6203 * t6475 + t6190) * t6799;
t6117 = -t6120 * t6356 + t6237;
t6116 = t6120 * t6365 + t6234;
t6115 = -t6119 * t6353 + t6236;
t6114 = t6119 * t6362 + t6233;
t6113 = -t6118 * t6350 + t6235;
t6112 = t6118 * t6359 + t6232;
t6105 = t6476 + (t6171 * t6473 + t6159) * t6799;
t6104 = t6477 + (t6169 * t6474 + t6157) * t6799;
t6103 = t6478 + (t6167 * t6475 + t6155) * t6799;
t6102 = t6479 + (t6170 * t6473 + t6158) * t6800;
t6101 = t6480 + (t6168 * t6474 + t6156) * t6800;
t6100 = t6481 + (t6166 * t6475 + t6154) * t6800;
t6099 = -t6105 * t6356 + t6231;
t6098 = t6105 * t6365 + t6228;
t6097 = -t6104 * t6353 + t6230;
t6096 = t6104 * t6362 + t6227;
t6095 = -t6103 * t6350 + t6229;
t6094 = t6103 * t6359 + t6226;
t6093 = -t6102 * t6365 - t6435;
t6092 = t6102 * t6356 - t6434;
t6091 = -t6101 * t6362 - t6437;
t6090 = t6101 * t6353 - t6436;
t6089 = -t6100 * t6359 - t6439;
t6088 = t6100 * t6350 - t6438;
t6087 = t6367 * t6401 + t6428 * t6805;
t6086 = t6364 * t6402 + t6429 * t6806;
t6085 = t6361 * t6403 + t6430 * t6807;
t6084 = -0.2e1 * t6367 * t6596 + (t6367 * t6419 - t6695 * t6805) * t6366 + (-t6356 * t6674 + t6610 * t6805) * t6789;
t6083 = -0.2e1 * t6364 * t6597 + (t6364 * t6420 - t6699 * t6806) * t6363 + (-t6353 * t6676 + t6611 * t6806) * t6790;
t6082 = -0.2e1 * t6361 * t6598 + (t6361 * t6421 - t6703 * t6807) * t6360 + (-t6350 * t6678 + t6612 * t6807) * t6791;
t6081 = t6111 * t6428 + t6401 * t6709;
t6080 = t6110 * t6428 - t6804 * t6624;
t6079 = t6109 * t6429 + t6402 * t6711;
t6078 = t6108 * t6429 - t6803 * t6633;
t6077 = t6107 * t6430 + t6403 * t6713;
t6076 = t6106 * t6430 - t6802 * t6642;
t6075 = t6530 * t6811 + (-t6111 * t6695 + t6419 * t6709) * t6366 + (t6111 * t6610 - t6309 * t6601) * t6789;
t6074 = t6530 * t6814 + (-t6110 * t6695 - 0.2e1 * t6464 * t6624) * t6366 + (t6110 * t6610 + t6306 * t6601) * t6789;
t6073 = t6531 * t6812 + (-t6109 * t6699 + t6420 * t6711) * t6363 + (t6109 * t6611 - t6308 * t6604) * t6790;
t6072 = t6531 * t6815 + (-t6108 * t6699 - 0.2e1 * t6466 * t6633) * t6363 + (t6108 * t6611 + t6305 * t6604) * t6790;
t6071 = t6532 * t6813 + (-t6107 * t6703 + t6421 * t6713) * t6360 + (t6107 * t6612 - t6307 * t6607) * t6791;
t6070 = t6532 * t6816 + (-t6106 * t6703 - 0.2e1 * t6468 * t6642) * t6360 + (t6106 * t6612 + t6304 * t6607) * t6791;
t1 = [(t6619 + t6628 + t6637) * MDP(1) + (t6295 * t6636 + t6296 * t6627 + t6297 * t6618) * MDP(4) + (t6295 * t6552 + t6296 * t6544 + t6297 * t6536) * t6797 - t6388 * t6609 - t6387 * t6608 + (t6173 ^ 2 * t6751 + t6175 ^ 2 * t6749 + t6177 ^ 2 * t6747) * t6770 + (-t6137 * t6641 - t6139 * t6632 - t6141 * t6623 + t6388 * t6783) * MDP(9) + (-t6143 * t6641 - t6145 * t6632 - t6147 * t6623 + t6387 * t6783) * MDP(10) + (t6256 * t6637 + t6257 * t6628 + t6258 * t6619) * MDP(11) + (t6223 * t6637 + t6224 * t6628 + t6225 * t6619) * t6796 + (-t6107 * t6564 - t6109 * t6562 - t6111 * t6560 + (-t6173 * t6460 - t6175 * t6452 - t6177 * t6444 + (-t6167 * t6460 - t6169 * t6452 - t6171 * t6444) * t6383) * t6385) * MDP(13) + (t6107 * t6570 + t6109 * t6568 + t6111 * t6566 + (t6173 * t6462 + t6175 * t6454 + t6177 * t6446 + (t6167 * t6462 + t6169 * t6454 + t6171 * t6446) * t6383) * t6385) * MDP(14) + (t6107 * t6659 + t6109 * t6657 + t6111 * t6655 + (t6107 * t6665 + t6109 * t6663 + t6111 * t6661) * t6383) * t6763 + (-t6071 * t6641 - t6073 * t6632 - t6075 * t6623 + (t6094 * t6659 + t6096 * t6657 + t6098 * t6655 + (t6127 * t6665 + t6129 * t6663 + t6131 * t6661) * t6383) * t6385) * MDP(16) + (-t6077 * t6641 - t6079 * t6632 - t6081 * t6623 + (t6095 * t6659 + t6097 * t6657 + t6099 * t6655 + (t6128 * t6665 + t6130 * t6663 + t6132 * t6661) * t6383) * t6385) * MDP(17) + MDP(18); (-t6136 * t6641 - t6138 * t6632 - t6140 * t6623 + (-t6173 * t6459 - t6175 * t6451 - t6177 * t6443) * t6783) * MDP(9) + (-t6142 * t6641 - t6144 * t6632 - t6146 * t6623 + (-t6173 * t6458 - t6175 * t6450 - t6177 * t6442) * t6783) * MDP(10) + (-t6106 * t6564 - t6108 * t6562 - t6110 * t6560 + (t6173 * t6461 + t6175 * t6453 + t6177 * t6445 + (t6167 * t6461 + t6169 * t6453 + t6171 * t6445) * t6383) * t6385) * MDP(13) + (t6106 * t6570 + t6108 * t6568 + t6110 * t6566 + (-t6173 * t6463 - t6175 * t6455 - t6177 * t6447 + (-t6167 * t6463 - t6169 * t6455 - t6171 * t6447) * t6383) * t6385) * MDP(14) + (t6106 * t6659 + t6108 * t6657 + t6110 * t6655 + (t6106 * t6665 + t6108 * t6663 + t6110 * t6661) * t6383) * t6763 + (-t6070 * t6641 - t6072 * t6632 - t6074 * t6623 + (t6089 * t6659 + t6091 * t6657 + t6093 * t6655 + (t6122 * t6665 + t6124 * t6663 + t6126 * t6661) * t6383) * t6385) * MDP(16) + (-t6076 * t6641 - t6078 * t6632 - t6080 * t6623 + (t6088 * t6659 + t6090 * t6657 + t6092 * t6655 + (t6121 * t6665 + t6123 * t6663 + t6125 * t6661) * t6383) * t6385) * MDP(17) + t6424; (-t6181 * t6641 - t6182 * t6632 - t6183 * t6623 + t6396 * t6783) * MDP(9) + (-t6184 * t6641 - t6185 * t6632 - t6186 * t6623 + t6395 * t6783) * MDP(10) + (-t6807 * t6564 - t6806 * t6562 - t6805 * t6560 + (-t6173 * t6513 - t6175 * t6505 - t6177 * t6497 + (-t6167 * t6513 - t6169 * t6505 - t6171 * t6497) * t6383) * t6385) * MDP(13) + (t6807 * t6570 + t6806 * t6568 + t6805 * t6566 + (t6173 * t6514 + t6175 * t6506 + t6177 * t6498 + (t6167 * t6514 + t6169 * t6506 + t6171 * t6498) * t6383) * t6385) * MDP(14) + (t6807 * t6659 + t6806 * t6657 + t6805 * t6655 + (t6661 * t6805 + t6663 * t6806 + t6665 * t6807) * t6383) * t6763 + (-t6082 * t6641 - t6083 * t6632 - t6084 * t6623 + (t6112 * t6659 + t6114 * t6657 + t6116 * t6655 + (t6160 * t6665 + t6162 * t6663 + t6164 * t6661) * t6383) * t6385) * MDP(16) + (-t6085 * t6641 - t6086 * t6632 - t6087 * t6623 + (t6113 * t6659 + t6115 * t6657 + t6117 * t6655 + (t6161 * t6665 + t6163 * t6663 + t6165 * t6661) * t6383) * t6385) * MDP(17) + t6422; (t6137 * t6642 + t6139 * t6633 + t6141 * t6624 + (t6172 * t6457 + t6174 * t6449 + t6176 * t6441) * t6783) * MDP(9) + (t6143 * t6642 + t6145 * t6633 + t6147 * t6624 + (t6172 * t6456 + t6174 * t6448 + t6176 * t6440) * t6783) * MDP(10) + (t6107 * t6565 + t6109 * t6563 + t6111 * t6561 + (-t6172 * t6460 - t6174 * t6452 - t6176 * t6444 + (-t6166 * t6460 - t6168 * t6452 - t6170 * t6444) * t6383) * t6385) * MDP(13) + (-t6107 * t6571 - t6109 * t6569 - t6111 * t6567 + (t6172 * t6462 + t6174 * t6454 + t6176 * t6446 + (t6166 * t6462 + t6168 * t6454 + t6170 * t6446) * t6383) * t6385) * MDP(14) + (t6107 * t6660 + t6109 * t6658 + t6111 * t6656 + (t6107 * t6666 + t6109 * t6664 + t6111 * t6662) * t6383) * t6763 + (t6071 * t6642 + t6073 * t6633 + t6075 * t6624 + (t6094 * t6660 + t6096 * t6658 + t6098 * t6656 + (t6127 * t6666 + t6129 * t6664 + t6131 * t6662) * t6383) * t6385) * MDP(16) + (t6077 * t6642 + t6079 * t6633 + t6081 * t6624 + (t6095 * t6660 + t6097 * t6658 + t6099 * t6656 + (t6128 * t6666 + t6130 * t6664 + t6132 * t6662) * t6383) * t6385) * MDP(17) + t6424; (t6620 + t6629 + t6638) * MDP(1) + (t6292 * t6636 + t6293 * t6627 + t6294 * t6618) * MDP(4) + (t6292 * t6552 + t6293 * t6544 + t6294 * t6536) * t6797 + t6390 * t6609 + t6389 * t6608 + (t6172 ^ 2 * t6751 + t6174 ^ 2 * t6749 + t6176 ^ 2 * t6747) * t6770 + (t6136 * t6642 + t6138 * t6633 + t6140 * t6624 - t6390 * t6783) * MDP(9) + (t6142 * t6642 + t6144 * t6633 + t6146 * t6624 - t6389 * t6783) * MDP(10) + (t6256 * t6638 + t6257 * t6629 + t6258 * t6620) * MDP(11) + (t6223 * t6638 + t6224 * t6629 + t6225 * t6620) * t6796 + (t6106 * t6565 + t6108 * t6563 + t6110 * t6561 + (t6172 * t6461 + t6174 * t6453 + t6176 * t6445 + (t6166 * t6461 + t6168 * t6453 + t6170 * t6445) * t6383) * t6385) * MDP(13) + (-t6106 * t6571 - t6108 * t6569 - t6110 * t6567 + (-t6172 * t6463 - t6174 * t6455 - t6176 * t6447 + (-t6166 * t6463 - t6168 * t6455 - t6170 * t6447) * t6383) * t6385) * MDP(14) + (t6106 * t6660 + t6108 * t6658 + t6110 * t6656 + (t6106 * t6666 + t6108 * t6664 + t6110 * t6662) * t6383) * t6763 + (t6070 * t6642 + t6072 * t6633 + t6074 * t6624 + (t6089 * t6660 + t6091 * t6658 + t6093 * t6656 + (t6122 * t6666 + t6124 * t6664 + t6126 * t6662) * t6383) * t6385) * MDP(16) + (t6076 * t6642 + t6078 * t6633 + t6080 * t6624 + (t6088 * t6660 + t6090 * t6658 + t6092 * t6656 + (t6121 * t6666 + t6123 * t6664 + t6125 * t6662) * t6383) * t6385) * MDP(17) + MDP(18); (t6181 * t6642 + t6182 * t6633 + t6183 * t6624 + t6398 * t6783) * MDP(9) + (t6184 * t6642 + t6185 * t6633 + t6186 * t6624 + t6397 * t6783) * MDP(10) + (t6807 * t6565 + t6806 * t6563 + t6805 * t6561 + (-t6172 * t6513 - t6174 * t6505 - t6176 * t6497 + (-t6166 * t6513 - t6168 * t6505 - t6170 * t6497) * t6383) * t6385) * MDP(13) + (-t6807 * t6571 - t6806 * t6569 - t6805 * t6567 + (t6172 * t6514 + t6174 * t6506 + t6176 * t6498 + (t6166 * t6514 + t6168 * t6506 + t6170 * t6498) * t6383) * t6385) * MDP(14) + (t6807 * t6660 + t6806 * t6658 + t6805 * t6656 + (t6662 * t6805 + t6664 * t6806 + t6666 * t6807) * t6383) * t6763 + (t6082 * t6642 + t6083 * t6633 + t6084 * t6624 + (t6112 * t6660 + t6114 * t6658 + t6116 * t6656 + (t6160 * t6666 + t6162 * t6664 + t6164 * t6662) * t6383) * t6385) * MDP(16) + (t6085 * t6642 + t6086 * t6633 + t6087 * t6624 + (t6113 * t6660 + t6115 * t6658 + t6117 * t6656 + (t6161 * t6666 + t6163 * t6664 + t6165 * t6662) * t6383) * t6385) * MDP(17) + t6423; (-t6137 * t6746 - t6139 * t6742 - t6141 * t6738 + t6392 * t6784) * MDP(9) + (-t6143 * t6746 - t6145 * t6742 - t6147 * t6738 + t6391 * t6784) * MDP(10) + (t6262 * t6408 + t6263 * t6406 + t6264 * t6404) * MDP(13) + (-t6404 * t6470 - t6406 * t6471 - t6408 * t6472) * MDP(14) + ((t6107 * t6651 + t6109 * t6650 + t6111 * t6649) * t6692 + t6107 * t6190 + t6109 * t6191 + t6111 * t6192) * MDP(15) + (-t6071 * t6746 - t6073 * t6742 - t6075 * t6738 + (t6127 * t6651 + t6129 * t6650 + t6131 * t6649) * t6692 + t6094 * t6190 + t6096 * t6191 + t6098 * t6192) * MDP(16) + (-t6077 * t6746 - t6079 * t6742 - t6081 * t6738 + (t6128 * t6651 + t6130 * t6650 + t6132 * t6649) * t6692 + t6095 * t6190 + t6097 * t6191 + t6099 * t6192) * MDP(17) + t6422; (-t6136 * t6746 - t6138 * t6742 - t6140 * t6738 - t6394 * t6784) * MDP(9) + (-t6142 * t6746 - t6144 * t6742 - t6146 * t6738 - t6393 * t6784) * MDP(10) + (t6262 * t6409 + t6263 * t6407 + t6264 * t6405) * MDP(13) + (-t6405 * t6470 - t6407 * t6471 - t6409 * t6472) * MDP(14) + ((t6106 * t6651 + t6108 * t6650 + t6110 * t6649) * t6692 + t6106 * t6190 + t6108 * t6191 + t6110 * t6192) * MDP(15) + (-t6070 * t6746 - t6072 * t6742 - t6074 * t6738 + (t6122 * t6651 + t6124 * t6650 + t6126 * t6649) * t6692 + t6089 * t6190 + t6091 * t6191 + t6093 * t6192) * MDP(16) + (-t6076 * t6746 - t6078 * t6742 - t6080 * t6738 + (t6121 * t6651 + t6123 * t6650 + t6125 * t6649) * t6692 + t6088 * t6190 + t6090 * t6191 + t6092 * t6192) * MDP(17) + t6423; (t6735 + t6739 + t6743) * MDP(1) + (t6323 * t6743 + t6327 * t6739 + t6331 * t6735) * MDP(4) + (t6335 * t6635 + t6338 * t6626 + t6341 * t6617) * t6797 + (t6201 ^ 2 / t6216 ^ 2 + t6200 ^ 2 / t6215 ^ 2 + t6199 ^ 2 / t6214 ^ 2) * MDP(8) / 0.4e1 + (-t6181 * t6746 - t6182 * t6742 - t6183 * t6738 + t6400 * t6784) * MDP(9) + (-t6184 * t6746 - t6185 * t6742 - t6186 * t6738 + t6399 * t6784) * MDP(10) + (t6256 * t6743 + t6257 * t6739 + t6258 * t6735) * MDP(11) + (t6223 * t6743 + t6224 * t6739 + t6225 * t6735) * t6796 + (t6262 * t6412 + t6263 * t6411 + t6264 * t6410) * MDP(13) + (-t6410 * t6470 - t6411 * t6471 - t6412 * t6472) * MDP(14) + ((t6649 * t6805 + t6650 * t6806 + t6651 * t6807) * t6692 + t6807 * t6190 + t6806 * t6191 + t6805 * t6192) * MDP(15) + (-t6082 * t6746 - t6083 * t6742 - t6084 * t6738 + (t6160 * t6651 + t6162 * t6650 + t6164 * t6649) * t6692 + t6112 * t6190 + t6114 * t6191 + t6116 * t6192) * MDP(16) + (-t6085 * t6746 - t6086 * t6742 - t6087 * t6738 + (t6161 * t6651 + t6163 * t6650 + t6165 * t6649) * t6692 + t6113 * t6190 + t6115 * t6191 + t6117 * t6192) * MDP(17) + MDP(18) - t6400 * MDP(6) - t6399 * MDP(7);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
