% Calculate minimal parameter regressor of inverse dynamics forces for
% P4PRRR1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [11x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRR1G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [4x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-02 20:15
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P4PRRR1G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(7,1),zeros(11,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [11 1]), ...
  'P4PRRR1G1A0_invdyn_para_pf_mdp: MDP has to be [11x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-02 20:14:57
% EndTime: 2020-03-02 20:15:10
% DurationCPUTime: 14.03s
% Computational Cost: add. (47805->380), mult. (41372->644), div. (5856->11), fcn. (35904->42), ass. (0->309)
t1496 = pkin(7) + qJ(2,1);
t1479 = qJ(3,1) + t1496;
t1464 = sin(t1479);
t1467 = cos(t1479);
t1501 = legFrame(1,3);
t1483 = sin(t1501);
t1487 = cos(t1501);
t1648 = -t1464 * t1483 + t1487 * t1467;
t1495 = pkin(7) + qJ(2,2);
t1478 = qJ(3,2) + t1495;
t1463 = sin(t1478);
t1466 = cos(t1478);
t1500 = legFrame(2,3);
t1482 = sin(t1500);
t1486 = cos(t1500);
t1647 = -t1463 * t1482 + t1486 * t1466;
t1494 = pkin(7) + qJ(2,3);
t1477 = qJ(3,3) + t1494;
t1462 = sin(t1477);
t1465 = cos(t1477);
t1499 = legFrame(3,3);
t1481 = sin(t1499);
t1485 = cos(t1499);
t1646 = -t1462 * t1481 + t1485 * t1465;
t1493 = pkin(7) + qJ(2,4);
t1470 = qJ(3,4) + t1493;
t1456 = sin(t1470);
t1457 = cos(t1470);
t1498 = legFrame(4,3);
t1480 = sin(t1498);
t1484 = cos(t1498);
t1645 = -t1456 * t1480 + t1484 * t1457;
t1527 = 0.1e1 / pkin(2);
t1468 = sin(t1493);
t1469 = cos(t1493);
t1374 = t1456 * t1469 - t1468 * t1457;
t1642 = 0.1e1 / t1374;
t1592 = t1642 * t1527;
t1644 = -2 * pkin(2);
t1643 = 2 * pkin(2);
t1471 = sin(t1494);
t1474 = cos(t1494);
t1384 = t1462 * t1474 - t1471 * t1465;
t1641 = 0.1e1 / t1384;
t1472 = sin(t1495);
t1475 = cos(t1495);
t1385 = t1463 * t1475 - t1472 * t1466;
t1640 = 0.1e1 / t1385;
t1473 = sin(t1496);
t1476 = cos(t1496);
t1386 = t1464 * t1476 - t1473 * t1467;
t1639 = 0.1e1 / t1386;
t1516 = xP(4);
t1491 = sin(t1516);
t1492 = cos(t1516);
t1517 = koppelP(4,2);
t1521 = koppelP(4,1);
t1411 = t1491 * t1521 + t1492 * t1517;
t1513 = xDP(4);
t1515 = xDP(1);
t1395 = t1411 * t1513 - t1515;
t1415 = -t1491 * t1517 + t1492 * t1521;
t1514 = xDP(2);
t1399 = t1415 * t1513 + t1514;
t1311 = (-t1395 * t1484 + t1480 * t1399) * t1457 + t1456 * (t1480 * t1395 + t1399 * t1484);
t1526 = 0.1e1 / pkin(3);
t1388 = t1484 * t1456 + t1480 * t1457;
t1332 = pkin(2) * (t1484 * t1468 + t1480 * t1469) + t1388 * pkin(3);
t1580 = t1399 * t1332;
t1536 = -pkin(2) * (t1468 * t1480 - t1484 * t1469) + t1645 * pkin(3);
t1608 = t1536 * t1395;
t1532 = (-t1580 + t1608) * t1526;
t1295 = (t1311 + t1532) * t1592;
t1540 = t1456 * t1468 + t1457 * t1469;
t1618 = t1311 * t1642;
t1289 = pkin(3) * t1295 + t1540 * t1618;
t1302 = t1532 * t1592;
t1560 = t1295 * t1302 * t1527;
t1545 = pkin(3) * t1560;
t1528 = 1 / pkin(2) ^ 2;
t1558 = t1528 * t1618;
t1497 = t1513 ^ 2;
t1504 = xDDP(4);
t1505 = xDDP(2);
t1352 = -t1411 * t1497 + t1415 * t1504 + t1505;
t1324 = t1388 * t1352 * t1592;
t1506 = xDDP(1);
t1356 = -t1411 * t1504 - t1415 * t1497 + t1506;
t1325 = t1645 * t1356 * t1592;
t1568 = t1324 + t1325;
t1281 = -(-t1289 * t1558 - t1545) * t1642 + t1568;
t1638 = pkin(2) * t1281;
t1518 = koppelP(3,2);
t1522 = koppelP(3,1);
t1412 = t1491 * t1522 + t1492 * t1518;
t1396 = t1412 * t1513 - t1515;
t1416 = -t1491 * t1518 + t1492 * t1522;
t1400 = t1416 * t1513 + t1514;
t1315 = (-t1396 * t1485 + t1481 * t1400) * t1465 + t1462 * (t1481 * t1396 + t1400 * t1485);
t1392 = t1485 * t1462 + t1481 * t1465;
t1335 = pkin(2) * (t1485 * t1471 + t1481 * t1474) + t1392 * pkin(3);
t1579 = t1400 * t1335;
t1535 = -pkin(2) * (t1471 * t1481 - t1485 * t1474) + t1646 * pkin(3);
t1599 = t1535 * t1396;
t1531 = (-t1579 + t1599) * t1526;
t1589 = t1641 * t1527;
t1299 = (t1315 + t1531) * t1589;
t1539 = t1462 * t1471 + t1465 * t1474;
t1617 = t1315 * t1641;
t1290 = pkin(3) * t1299 + t1539 * t1617;
t1554 = t1528 * t1617;
t1353 = -t1412 * t1497 + t1416 * t1504 + t1505;
t1357 = -t1412 * t1504 - t1416 * t1497 + t1506;
t1567 = (t1353 * t1392 + t1357 * t1646) * t1589;
t1303 = t1531 * t1589;
t1625 = t1299 * t1303;
t1634 = pkin(3) * t1527;
t1282 = -(-t1290 * t1554 - t1625 * t1634) * t1641 + t1567;
t1637 = pkin(2) * t1282;
t1519 = koppelP(2,2);
t1523 = koppelP(2,1);
t1413 = t1491 * t1523 + t1492 * t1519;
t1397 = t1413 * t1513 - t1515;
t1417 = -t1491 * t1519 + t1492 * t1523;
t1401 = t1417 * t1513 + t1514;
t1316 = (-t1397 * t1486 + t1482 * t1401) * t1466 + t1463 * (t1482 * t1397 + t1401 * t1486);
t1393 = t1486 * t1463 + t1482 * t1466;
t1336 = pkin(2) * (t1486 * t1472 + t1482 * t1475) + t1393 * pkin(3);
t1578 = t1401 * t1336;
t1534 = -pkin(2) * (t1472 * t1482 - t1486 * t1475) + t1647 * pkin(3);
t1596 = t1534 * t1397;
t1530 = (-t1578 + t1596) * t1526;
t1588 = t1640 * t1527;
t1300 = (t1316 + t1530) * t1588;
t1538 = t1463 * t1472 + t1466 * t1475;
t1616 = t1316 * t1640;
t1291 = pkin(3) * t1300 + t1538 * t1616;
t1553 = t1528 * t1616;
t1354 = -t1413 * t1497 + t1417 * t1504 + t1505;
t1358 = -t1413 * t1504 - t1417 * t1497 + t1506;
t1566 = (t1354 * t1393 + t1358 * t1647) * t1588;
t1304 = t1530 * t1588;
t1624 = t1300 * t1304;
t1283 = -(-t1291 * t1553 - t1624 * t1634) * t1640 + t1566;
t1636 = pkin(2) * t1283;
t1520 = koppelP(1,2);
t1524 = koppelP(1,1);
t1414 = t1491 * t1524 + t1492 * t1520;
t1398 = t1414 * t1513 - t1515;
t1418 = -t1491 * t1520 + t1492 * t1524;
t1402 = t1418 * t1513 + t1514;
t1317 = (-t1398 * t1487 + t1483 * t1402) * t1467 + t1464 * (t1483 * t1398 + t1402 * t1487);
t1394 = t1487 * t1464 + t1483 * t1467;
t1337 = pkin(2) * (t1487 * t1473 + t1483 * t1476) + t1394 * pkin(3);
t1577 = t1402 * t1337;
t1533 = -pkin(2) * (t1473 * t1483 - t1487 * t1476) + t1648 * pkin(3);
t1593 = t1533 * t1398;
t1529 = (-t1577 + t1593) * t1526;
t1587 = t1639 * t1527;
t1301 = (t1317 + t1529) * t1587;
t1537 = t1464 * t1473 + t1467 * t1476;
t1615 = t1317 * t1639;
t1292 = t1301 * pkin(3) + t1537 * t1615;
t1552 = t1528 * t1615;
t1355 = -t1414 * t1497 + t1418 * t1504 + t1505;
t1359 = -t1414 * t1504 - t1418 * t1497 + t1506;
t1565 = (t1355 * t1394 + t1359 * t1648) * t1587;
t1305 = t1529 * t1587;
t1623 = t1301 * t1305;
t1284 = -(-t1292 * t1552 - t1623 * t1634) * t1639 + t1565;
t1635 = pkin(2) * t1284;
t1633 = 0.2e1 * pkin(3);
t1294 = (t1311 + (t1608 / 0.2e1 - t1580 / 0.2e1) * t1526) * t1592;
t1525 = pkin(3) ^ 2;
t1632 = (-t1295 * t1525 + (-t1540 * t1294 * t1633 - t1618) * pkin(2)) * t1526;
t1296 = (t1315 + (t1599 / 0.2e1 - t1579 / 0.2e1) * t1526) * t1589;
t1631 = (-t1299 * t1525 + (-t1539 * t1296 * t1633 - t1617) * pkin(2)) * t1526;
t1297 = (t1316 + (t1596 / 0.2e1 - t1578 / 0.2e1) * t1526) * t1588;
t1630 = (-t1300 * t1525 + (-t1538 * t1297 * t1633 - t1616) * pkin(2)) * t1526;
t1298 = (t1317 + (t1593 / 0.2e1 - t1577 / 0.2e1) * t1526) * t1587;
t1629 = (-t1301 * t1525 + (-t1537 * t1298 * t1633 - t1615) * pkin(2)) * t1526;
t1628 = t1296 * t1303;
t1627 = t1297 * t1304;
t1626 = t1298 * t1305;
t1344 = t1411 * t1484 - t1480 * t1415;
t1348 = t1480 * t1411 + t1415 * t1484;
t1544 = t1344 * t1457 - t1348 * t1456;
t1622 = (pkin(2) * (t1344 * t1469 - t1348 * t1468) + t1544 * pkin(3)) * t1642;
t1345 = t1412 * t1485 - t1481 * t1416;
t1349 = t1481 * t1412 + t1416 * t1485;
t1543 = t1345 * t1465 - t1349 * t1462;
t1621 = (pkin(2) * (t1345 * t1474 - t1349 * t1471) + t1543 * pkin(3)) * t1641;
t1346 = t1413 * t1486 - t1482 * t1417;
t1350 = t1482 * t1413 + t1417 * t1486;
t1542 = t1346 * t1466 - t1350 * t1463;
t1620 = (pkin(2) * (t1346 * t1475 - t1350 * t1472) + t1542 * pkin(3)) * t1640;
t1347 = t1414 * t1487 - t1483 * t1418;
t1351 = t1483 * t1414 + t1418 * t1487;
t1541 = t1347 * t1467 - t1351 * t1464;
t1619 = (pkin(2) * (t1347 * t1476 - t1351 * t1473) + t1541 * pkin(3)) * t1639;
t1614 = t1544 * t1642;
t1613 = t1543 * t1641;
t1612 = t1542 * t1640;
t1611 = t1541 * t1639;
t1610 = t1332 * t1642;
t1609 = t1536 * t1642;
t1607 = t1335 * t1353;
t1606 = t1335 * t1641;
t1605 = t1336 * t1354;
t1604 = t1336 * t1640;
t1603 = t1337 * t1355;
t1602 = t1337 * t1639;
t1601 = t1535 * t1357;
t1600 = t1535 * t1641;
t1598 = t1534 * t1358;
t1597 = t1534 * t1640;
t1595 = t1533 * t1359;
t1594 = t1533 * t1639;
t1591 = t1642 * t1645;
t1590 = t1642 * t1388;
t1586 = t1641 * t1646;
t1585 = t1641 * t1392;
t1584 = t1640 * t1647;
t1583 = t1640 * t1393;
t1582 = t1639 * t1648;
t1581 = t1639 * t1394;
t1452 = t1498 + t1470;
t1444 = sin(t1452);
t1445 = cos(t1452);
t1564 = g(1) * t1445 + g(2) * t1444;
t1453 = t1499 + t1477;
t1446 = sin(t1453);
t1449 = cos(t1453);
t1563 = g(1) * t1449 + g(2) * t1446;
t1454 = t1500 + t1478;
t1447 = sin(t1454);
t1450 = cos(t1454);
t1562 = g(1) * t1450 + g(2) * t1447;
t1455 = t1501 + t1479;
t1448 = sin(t1455);
t1451 = cos(t1455);
t1561 = g(1) * t1451 + g(2) * t1448;
t1559 = t1311 ^ 2 / t1374 ^ 2 * t1527;
t1557 = t1315 ^ 2 / t1384 ^ 2 * t1527;
t1556 = t1316 ^ 2 / t1385 ^ 2 * t1527;
t1555 = t1317 ^ 2 / t1386 ^ 2 * t1527;
t1550 = -(t1540 * pkin(2) + pkin(3)) * t1642 * t1560 + (-t1332 * t1352 - t1536 * t1356) * t1526 * t1592;
t1549 = g(1) * t1444 - g(2) * t1445;
t1548 = g(1) * t1446 - g(2) * t1449;
t1547 = g(1) * t1447 - g(2) * t1450;
t1546 = g(1) * t1448 - g(2) * t1451;
t1512 = cos(qJ(3,1));
t1511 = cos(qJ(3,2));
t1510 = cos(qJ(3,3));
t1509 = sin(qJ(3,1));
t1508 = sin(qJ(3,2));
t1507 = sin(qJ(3,3));
t1503 = cos(qJ(3,4));
t1502 = sin(qJ(3,4));
t1490 = t1506 - g(1);
t1489 = t1505 - g(2);
t1426 = t1487 * g(1) + t1483 * g(2);
t1425 = t1486 * g(1) + t1482 * g(2);
t1424 = t1485 * g(1) + t1481 * g(2);
t1423 = t1484 * g(1) + t1480 * g(2);
t1422 = t1483 * g(1) - t1487 * g(2);
t1421 = t1482 * g(1) - t1486 * g(2);
t1420 = t1481 * g(1) - t1485 * g(2);
t1419 = t1480 * g(1) - t1484 * g(2);
t1410 = -t1491 * t1504 - t1492 * t1497;
t1409 = -t1491 * t1497 + t1492 * t1504;
t1408 = t1491 * t1489 + t1492 * t1490;
t1407 = t1492 * t1489 - t1491 * t1490;
t1370 = t1537 * pkin(2) + pkin(3);
t1369 = t1538 * pkin(2) + pkin(3);
t1368 = t1539 * pkin(2) + pkin(3);
t1367 = -t1422 * t1473 + t1426 * t1476;
t1366 = -t1421 * t1472 + t1425 * t1475;
t1365 = -t1420 * t1471 + t1424 * t1474;
t1364 = t1422 * t1476 + t1426 * t1473;
t1363 = t1421 * t1475 + t1425 * t1472;
t1362 = t1420 * t1474 + t1424 * t1471;
t1361 = -t1419 * t1468 + t1423 * t1469;
t1360 = t1419 * t1469 + t1423 * t1468;
t1280 = -t1509 * t1635 + t1512 * t1555 + t1561;
t1279 = -t1507 * t1637 + t1510 * t1557 + t1563;
t1278 = t1507 * t1557 + t1510 * t1637 + t1548;
t1277 = t1508 * t1556 + t1511 * t1636 + t1547;
t1276 = -t1508 * t1636 + t1511 * t1556 + t1562;
t1275 = t1509 * t1555 + t1512 * t1635 + t1546;
t1274 = t1502 * t1559 + t1503 * t1638 + t1549;
t1273 = -t1502 * t1638 + t1503 * t1559 + t1564;
t1272 = -((-t1292 - t1629) * t1552 + ((t1595 + t1603) * t1526 + (-pkin(3) + t1370) * t1623) * t1527) * t1639 + t1565;
t1271 = -((-t1291 - t1630) * t1553 + ((t1598 + t1605) * t1526 + (-pkin(3) + t1369) * t1624) * t1527) * t1640 + t1566;
t1270 = -((-t1290 - t1631) * t1554 + ((t1601 + t1607) * t1526 + (-pkin(3) + t1368) * t1625) * t1527) * t1641 + t1567;
t1269 = -((-t1292 - t1629 / 0.2e1) * t1552 + ((t1595 / 0.2e1 + t1603 / 0.2e1) * t1526 + (-pkin(3) + t1370 / 0.2e1) * t1623) * t1527) * t1639 + t1565;
t1268 = -((-t1291 - t1630 / 0.2e1) * t1553 + ((t1598 / 0.2e1 + t1605 / 0.2e1) * t1526 + (-pkin(3) + t1369 / 0.2e1) * t1624) * t1527) * t1640 + t1566;
t1267 = -((-t1290 - t1631 / 0.2e1) * t1554 + ((t1601 / 0.2e1 + t1607 / 0.2e1) * t1526 + (-pkin(3) + t1368 / 0.2e1) * t1625) * t1527) * t1641 + t1567;
t1266 = -(-t1545 + (-t1289 - t1632) * t1558) * t1642 + t1550 + t1568;
t1265 = 0.2e1 * t1324 + 0.2e1 * t1325 - (-0.2e1 * t1545 + (-0.2e1 * t1289 - t1632) * t1558) * t1642 + t1550;
t1264 = (t1509 * t1269 + t1512 * t1626) * t1644 + t1561;
t1263 = (t1508 * t1268 + t1511 * t1627) * t1644 + t1562;
t1262 = (t1507 * t1267 + t1510 * t1628) * t1644 + t1563;
t1261 = (t1269 * t1512 - t1509 * t1626) * t1643 + t1546;
t1260 = (t1268 * t1511 - t1508 * t1627) * t1643 + t1547;
t1259 = (t1267 * t1510 - t1507 * t1628) * t1643 + t1548;
t1258 = -pkin(2) * ((0.2e1 * t1311 * t1592 + t1302) * t1302 * t1503 + t1502 * t1265) + t1564;
t1257 = pkin(2) * (-0.2e1 * t1302 * t1502 * t1294 + t1265 * t1503) + t1549;
t1 = [t1410 * MDP(9) - t1409 * MDP(10) + (-t1491 * t1407 + t1492 * t1408) * MDP(11) + ((t1281 * t1591 + t1282 * t1586 + t1283 * t1584 + t1284 * t1582) * MDP(2) + (t1360 * t1591 + t1362 * t1586 + t1363 * t1584 + t1364 * t1582) * MDP(3) + (t1361 * t1591 + t1365 * t1586 + t1366 * t1584 + t1367 * t1582) * MDP(4) + (t1266 * t1591 + t1270 * t1586 + t1271 * t1584 + t1272 * t1582) * MDP(5) + (t1257 * t1591 + t1259 * t1586 + t1260 * t1584 + t1261 * t1582) * MDP(6) + (t1258 * t1591 + t1262 * t1586 + t1263 * t1584 + t1264 * t1582) * MDP(7) + ((-t1266 * t1609 - t1270 * t1600 - t1271 * t1597 - t1272 * t1594) * MDP(5) + (-t1274 * t1609 - t1275 * t1594 - t1277 * t1597 - t1278 * t1600) * MDP(6) + (-t1273 * t1609 - t1276 * t1597 - t1279 * t1600 - t1280 * t1594) * MDP(7)) * t1526) * t1527; t1409 * MDP(9) + t1410 * MDP(10) + (t1492 * t1407 + t1491 * t1408) * MDP(11) + ((t1281 * t1590 + t1282 * t1585 + t1283 * t1583 + t1284 * t1581) * MDP(2) + (t1360 * t1590 + t1362 * t1585 + t1363 * t1583 + t1364 * t1581) * MDP(3) + (t1361 * t1590 + t1365 * t1585 + t1366 * t1583 + t1367 * t1581) * MDP(4) + (t1266 * t1590 + t1270 * t1585 + t1271 * t1583 + t1272 * t1581) * MDP(5) + (t1257 * t1590 + t1259 * t1585 + t1260 * t1583 + t1261 * t1581) * MDP(6) + (t1258 * t1590 + t1262 * t1585 + t1263 * t1583 + t1264 * t1581) * MDP(7) + ((-t1266 * t1610 - t1270 * t1606 - t1271 * t1604 - t1272 * t1602) * MDP(5) + (-t1274 * t1610 - t1275 * t1602 - t1277 * t1604 - t1278 * t1606) * MDP(6) + (-t1273 * t1610 - t1276 * t1604 - t1279 * t1606 - t1280 * t1602) * MDP(7)) * t1526) * t1527; ((4 * MDP(1)) + MDP(11)) * (xDDP(3) - g(3)); -t1408 * MDP(10) + t1504 * MDP(8) + t1407 * MDP(9) + ((-t1281 * t1614 - t1282 * t1613 - t1283 * t1612 - t1284 * t1611) * MDP(2) + (-t1360 * t1614 - t1362 * t1613 - t1363 * t1612 - t1364 * t1611) * MDP(3) + (-t1361 * t1614 - t1365 * t1613 - t1366 * t1612 - t1367 * t1611) * MDP(4) + (-t1266 * t1614 - t1270 * t1613 - t1271 * t1612 - t1272 * t1611) * MDP(5) + (-t1257 * t1614 - t1259 * t1613 - t1260 * t1612 - t1261 * t1611) * MDP(6) + (-t1258 * t1614 - t1262 * t1613 - t1263 * t1612 - t1264 * t1611) * MDP(7) + ((t1266 * t1622 + t1270 * t1621 + t1271 * t1620 + t1272 * t1619) * MDP(5) + (t1274 * t1622 + t1275 * t1619 + t1277 * t1620 + t1278 * t1621) * MDP(6) + (t1273 * t1622 + t1276 * t1620 + t1279 * t1621 + t1280 * t1619) * MDP(7)) * t1526) * t1527;];
tauX  = t1;
