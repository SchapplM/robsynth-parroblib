% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRR1G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [11x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRR1G1P1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [4x4]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-02 20:15
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P4PRRR1G1P1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(7,1),zeros(11,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRR1G1P1A0_inertia_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRR1G1P1A0_inertia_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P4PRRR1G1P1A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRR1G1P1A0_inertia_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRR1G1P1A0_inertia_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [11 1]), ...
  'P4PRRR1G1P1A0_inertia_para_pf_mdp: MDP has to be [11x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-02 20:15:10
% EndTime: 2020-03-02 20:15:20
% DurationCPUTime: 9.90s
% Computational Cost: add. (11909->351), mult. (7395->623), div. (1668->11), fcn. (9228->34), ass. (0->285)
t1788 = pkin(7) + qJ(2,1);
t1903 = qJ(3,1) + t1788;
t1769 = sin(t1903);
t1970 = legFrame(1,3);
t1782 = sin(t1970);
t1842 = cos(t1903);
t1907 = cos(t1970);
t1809 = -t1769 * t1782 + t1907 * t1842;
t1775 = sin(t1788);
t1778 = cos(t1788);
t1740 = t1769 * t1778 - t1775 * t1842;
t1971 = 0.1e1 / t1740;
t1916 = t1971 * t1809;
t1787 = pkin(7) + qJ(2,2);
t1902 = qJ(3,2) + t1787;
t1768 = sin(t1902);
t1969 = legFrame(2,3);
t1781 = sin(t1969);
t1841 = cos(t1902);
t1906 = cos(t1969);
t1808 = -t1768 * t1781 + t1906 * t1841;
t1774 = sin(t1787);
t1777 = cos(t1787);
t1739 = t1768 * t1777 - t1774 * t1841;
t1972 = 0.1e1 / t1739;
t1920 = t1972 * t1808;
t1786 = pkin(7) + qJ(2,3);
t1901 = qJ(3,3) + t1786;
t1767 = sin(t1901);
t1968 = legFrame(3,3);
t1780 = sin(t1968);
t1840 = cos(t1901);
t1905 = cos(t1968);
t1807 = -t1767 * t1780 + t1905 * t1840;
t1773 = sin(t1786);
t1776 = cos(t1786);
t1738 = t1767 * t1776 - t1773 * t1840;
t1973 = 0.1e1 / t1738;
t1924 = t1973 * t1807;
t1785 = pkin(7) + qJ(2,4);
t1844 = qJ(3,4) + t1785;
t1762 = sin(t1844);
t1967 = legFrame(4,3);
t1779 = sin(t1967);
t1815 = cos(t1844);
t1904 = cos(t1967);
t1806 = -t1762 * t1779 + t1904 * t1815;
t1771 = sin(t1785);
t1772 = cos(t1785);
t1728 = t1762 * t1772 - t1771 * t1815;
t1974 = 0.1e1 / t1728;
t1934 = t1974 * t1806;
t1797 = xP(4);
t1783 = sin(t1797);
t1784 = cos(t1797);
t1798 = koppelP(4,1);
t1975 = koppelP(4,2);
t1749 = t1783 * t1798 + t1784 * t1975;
t1753 = -t1783 * t1975 + t1784 * t1798;
t1717 = t1749 * t1904 - t1779 * t1753;
t1721 = t1779 * t1749 + t1753 * t1904;
t1982 = t1717 * t1815 - t1721 * t1762;
t1801 = koppelP(1,1);
t1978 = koppelP(1,2);
t1752 = t1783 * t1801 + t1784 * t1978;
t1756 = -t1783 * t1978 + t1784 * t1801;
t1720 = t1752 * t1907 - t1782 * t1756;
t1724 = t1782 * t1752 + t1756 * t1907;
t1981 = t1720 * t1842 - t1724 * t1769;
t1800 = koppelP(2,1);
t1977 = koppelP(2,2);
t1751 = t1783 * t1800 + t1784 * t1977;
t1755 = -t1783 * t1977 + t1784 * t1800;
t1719 = t1751 * t1906 - t1781 * t1755;
t1723 = t1781 * t1751 + t1755 * t1906;
t1980 = t1719 * t1841 - t1723 * t1768;
t1799 = koppelP(3,1);
t1976 = koppelP(3,2);
t1750 = t1783 * t1799 + t1784 * t1976;
t1754 = -t1783 * t1976 + t1784 * t1799;
t1718 = t1750 * t1905 - t1780 * t1754;
t1722 = t1780 * t1750 + t1754 * t1905;
t1979 = t1718 * t1840 - t1722 * t1767;
t1966 = MDP(2) / pkin(2) ^ 2;
t1802 = 0.1e1 / pkin(3);
t1965 = MDP(5) * t1802;
t1657 = pkin(2) * (t1717 * t1772 - t1721 * t1771) + t1982 * pkin(3);
t1964 = t1657 * t1974;
t1726 = 0.1e1 / t1728 ^ 2;
t1963 = t1657 * t1726;
t1658 = pkin(2) * (t1718 * t1776 - t1722 * t1773) + t1979 * pkin(3);
t1962 = t1658 * t1973;
t1730 = 0.1e1 / t1738 ^ 2;
t1961 = t1658 * t1730;
t1659 = pkin(2) * (t1719 * t1777 - t1723 * t1774) + t1980 * pkin(3);
t1960 = t1659 * t1972;
t1732 = 0.1e1 / t1739 ^ 2;
t1959 = t1659 * t1732;
t1660 = pkin(2) * (t1720 * t1778 - t1724 * t1775) + t1981 * pkin(3);
t1958 = t1660 * t1971;
t1734 = 0.1e1 / t1740 ^ 2;
t1957 = t1660 * t1734;
t1956 = t1982 * t1974;
t1955 = t1982 * t1726;
t1954 = t1979 * t1973;
t1953 = t1979 * t1730;
t1952 = t1980 * t1972;
t1951 = t1980 * t1732;
t1950 = t1981 * t1971;
t1949 = t1981 * t1734;
t1742 = t1904 * t1762 + t1779 * t1815;
t1709 = pkin(2) * (t1904 * t1771 + t1779 * t1772) + t1742 * pkin(3);
t1948 = t1709 * t1974;
t1710 = -pkin(2) * (t1771 * t1779 - t1904 * t1772) + t1806 * pkin(3);
t1947 = t1710 * t1974;
t1746 = t1905 * t1767 + t1780 * t1840;
t1711 = pkin(2) * (t1905 * t1773 + t1780 * t1776) + t1746 * pkin(3);
t1946 = t1711 * t1973;
t1747 = t1906 * t1768 + t1781 * t1841;
t1712 = pkin(2) * (t1906 * t1774 + t1781 * t1777) + t1747 * pkin(3);
t1945 = t1712 * t1972;
t1748 = t1907 * t1769 + t1782 * t1842;
t1713 = pkin(2) * (t1907 * t1775 + t1782 * t1778) + t1748 * pkin(3);
t1944 = t1713 * t1971;
t1714 = -pkin(2) * (t1773 * t1780 - t1905 * t1776) + t1807 * pkin(3);
t1943 = t1714 * t1973;
t1715 = -pkin(2) * (t1774 * t1781 - t1906 * t1777) + t1808 * pkin(3);
t1942 = t1715 * t1972;
t1716 = -pkin(2) * (t1775 * t1782 - t1907 * t1778) + t1809 * pkin(3);
t1941 = t1716 * t1971;
t1936 = t1974 ^ 2;
t1803 = 0.1e1 / pkin(2);
t1935 = t1974 * t1803;
t1933 = t1974 * t1742;
t1789 = sin(qJ(3,4));
t1932 = t1974 * t1789;
t1790 = cos(qJ(3,4));
t1931 = t1974 * t1790;
t1930 = t1973 ^ 2;
t1929 = t1973 * t1803;
t1928 = t1972 ^ 2;
t1927 = t1972 * t1803;
t1926 = t1971 ^ 2;
t1925 = t1971 * t1803;
t1923 = t1973 * t1746;
t1791 = sin(qJ(3,3));
t1922 = t1973 * t1791;
t1794 = cos(qJ(3,3));
t1921 = t1973 * t1794;
t1919 = t1972 * t1747;
t1792 = sin(qJ(3,2));
t1918 = t1972 * t1792;
t1795 = cos(qJ(3,2));
t1917 = t1972 * t1795;
t1915 = t1971 * t1748;
t1793 = sin(qJ(3,1));
t1914 = t1971 * t1793;
t1796 = cos(qJ(3,1));
t1913 = t1971 * t1796;
t1912 = t1802 * t1803;
t1868 = t1974 * t1912;
t1838 = t1710 * t1868;
t1839 = t1709 * t1868;
t1911 = t1749 * t1838 - t1753 * t1839;
t1863 = t1973 * t1912;
t1834 = t1714 * t1863;
t1837 = t1711 * t1863;
t1910 = t1750 * t1834 - t1754 * t1837;
t1858 = t1972 * t1912;
t1833 = t1715 * t1858;
t1836 = t1712 * t1858;
t1909 = t1751 * t1833 - t1755 * t1836;
t1853 = t1971 * t1912;
t1832 = t1716 * t1853;
t1835 = t1713 * t1853;
t1908 = t1752 * t1832 - t1756 * t1835;
t1852 = t1806 * t1935;
t1701 = t1749 * t1852;
t1851 = t1742 * t1935;
t1702 = t1753 * t1851;
t1661 = -t1701 + t1702;
t1850 = t1807 * t1929;
t1703 = t1750 * t1850;
t1847 = t1746 * t1929;
t1706 = t1754 * t1847;
t1666 = -t1703 + t1706;
t1849 = t1808 * t1927;
t1704 = t1751 * t1849;
t1846 = t1747 * t1927;
t1707 = t1755 * t1846;
t1667 = -t1704 + t1707;
t1848 = t1809 * t1925;
t1705 = t1752 * t1848;
t1845 = t1748 * t1925;
t1708 = t1756 * t1845;
t1668 = -t1705 + t1708;
t1900 = t1661 * t1964;
t1899 = t1789 * t1963;
t1898 = t1790 * t1963;
t1897 = t1666 * t1962;
t1896 = t1791 * t1961;
t1895 = t1794 * t1961;
t1894 = t1667 * t1960;
t1893 = t1792 * t1959;
t1892 = t1795 * t1959;
t1891 = t1668 * t1958;
t1890 = t1793 * t1957;
t1889 = t1796 * t1957;
t1888 = t1661 * t1932;
t1887 = t1661 * t1931;
t1886 = t1666 * t1922;
t1885 = t1666 * t1921;
t1884 = t1667 * t1918;
t1883 = t1667 * t1917;
t1882 = t1668 * t1914;
t1881 = t1668 * t1913;
t1880 = t1789 * t1956;
t1879 = t1790 * t1956;
t1878 = t1791 * t1954;
t1877 = t1794 * t1954;
t1876 = t1792 * t1952;
t1875 = t1795 * t1952;
t1874 = t1793 * t1950;
t1873 = t1796 * t1950;
t1872 = t1806 * t1932;
t1871 = t1806 * t1931;
t1870 = t1742 * t1932;
t1869 = t1742 * t1931;
t1867 = t1807 * t1922;
t1866 = t1807 * t1921;
t1865 = t1746 * t1922;
t1864 = t1746 * t1921;
t1862 = t1808 * t1918;
t1861 = t1808 * t1917;
t1860 = t1747 * t1918;
t1859 = t1747 * t1917;
t1857 = t1809 * t1914;
t1856 = t1809 * t1913;
t1855 = t1748 * t1914;
t1854 = t1748 * t1913;
t1843 = -t1783 * MDP(10) + t1784 * MDP(9);
t1831 = t1974 * t1872;
t1830 = t1974 * t1871;
t1829 = t1974 * t1870;
t1828 = t1974 * t1869;
t1827 = t1973 * t1867;
t1826 = t1973 * t1866;
t1825 = t1973 * t1865;
t1824 = t1973 * t1864;
t1823 = t1972 * t1862;
t1822 = t1972 * t1861;
t1821 = t1972 * t1860;
t1820 = t1972 * t1859;
t1819 = t1971 * t1857;
t1818 = t1971 * t1856;
t1817 = t1971 * t1855;
t1816 = t1971 * t1854;
t1814 = -t1784 * MDP(10) - t1783 * MDP(9);
t1805 = (t1915 * t1916 + t1919 * t1920 + t1923 * t1924 + t1933 * t1934) * t1966;
t1757 = (t1783 ^ 2 + t1784 ^ 2) * MDP(11);
t1680 = -t1832 + t1848;
t1679 = -t1835 + t1845;
t1678 = -t1833 + t1849;
t1677 = -t1836 + t1846;
t1676 = -t1834 + t1850;
t1675 = -t1837 + t1847;
t1674 = -t1832 + 0.2e1 * t1848;
t1673 = -t1833 + 0.2e1 * t1849;
t1672 = -t1834 + 0.2e1 * t1850;
t1671 = -t1835 + 0.2e1 * t1845;
t1670 = -t1836 + 0.2e1 * t1846;
t1669 = -t1837 + 0.2e1 * t1847;
t1665 = -t1838 + t1852;
t1664 = -t1839 + t1851;
t1663 = -t1838 + 0.2e1 * t1852;
t1662 = -t1839 + 0.2e1 * t1851;
t1656 = t1668 + t1908;
t1655 = t1667 + t1909;
t1654 = t1666 + t1910;
t1653 = -0.2e1 * t1705 + 0.2e1 * t1708 + t1908;
t1652 = -0.2e1 * t1704 + 0.2e1 * t1707 + t1909;
t1651 = -0.2e1 * t1703 + 0.2e1 * t1706 + t1910;
t1650 = t1661 + t1911;
t1649 = -0.2e1 * t1701 + 0.2e1 * t1702 + t1911;
t1 = [(t1663 * t1871 + t1672 * t1866 + t1673 * t1861 + t1674 * t1856) * MDP(6) + (-t1663 * t1872 - t1672 * t1867 - t1673 * t1862 - t1674 * t1857) * MDP(7) + t1757 + (t1806 ^ 2 * t1936 + t1807 ^ 2 * t1930 + t1808 ^ 2 * t1928 + t1809 ^ 2 * t1926) * t1966 + ((t1665 * t1934 + t1676 * t1924 + t1678 * t1920 + t1680 * t1916) * MDP(5) + ((-t1665 * t1947 - t1676 * t1943 - t1678 * t1942 - t1680 * t1941) * MDP(5) + (-t1710 * t1830 - t1714 * t1826 - t1715 * t1822 - t1716 * t1818) * MDP(6) + (t1710 * t1831 + t1714 * t1827 + t1715 * t1823 + t1716 * t1819) * MDP(7)) * t1802) * t1803; (t1662 * t1871 + t1669 * t1866 + t1670 * t1861 + t1671 * t1856) * MDP(6) + (-t1662 * t1872 - t1669 * t1867 - t1670 * t1862 - t1671 * t1857) * MDP(7) + t1805 + ((t1664 * t1934 + t1675 * t1924 + t1677 * t1920 + t1679 * t1916) * MDP(5) + ((-t1664 * t1947 - t1675 * t1943 - t1677 * t1942 - t1679 * t1941) * MDP(5) + (-t1710 * t1828 - t1714 * t1824 - t1715 * t1820 - t1716 * t1816) * MDP(6) + (t1710 * t1829 + t1714 * t1825 + t1715 * t1821 + t1716 * t1817) * MDP(7)) * t1802) * t1803; 0; (t1649 * t1871 + t1651 * t1866 + t1652 * t1861 + t1653 * t1856) * MDP(6) + (-t1649 * t1872 - t1651 * t1867 - t1652 * t1862 - t1653 * t1857) * MDP(7) + ((-t1710 * t1887 - t1714 * t1885 - t1715 * t1883 - t1716 * t1881) * MDP(6) + (t1710 * t1888 + t1714 * t1886 + t1715 * t1884 + t1716 * t1882) * MDP(7)) * t1802 + ((t1661 * t1934 + t1666 * t1924 + t1667 * t1920 + t1668 * t1916) * MDP(2) + (t1650 * t1934 + t1654 * t1924 + t1655 * t1920 + t1656 * t1916) * MDP(5) + (-t1650 * t1947 - t1654 * t1943 - t1655 * t1942 - t1656 * t1941) * t1965) * t1803 + t1814; (t1663 * t1869 + t1672 * t1864 + t1673 * t1859 + t1674 * t1854) * MDP(6) + (-t1663 * t1870 - t1672 * t1865 - t1673 * t1860 - t1674 * t1855) * MDP(7) + t1805 + ((t1665 * t1933 + t1676 * t1923 + t1678 * t1919 + t1680 * t1915) * MDP(5) + ((-t1665 * t1948 - t1676 * t1946 - t1678 * t1945 - t1680 * t1944) * MDP(5) + (-t1709 * t1830 - t1711 * t1826 - t1712 * t1822 - t1713 * t1818) * MDP(6) + (t1709 * t1831 + t1711 * t1827 + t1712 * t1823 + t1713 * t1819) * MDP(7)) * t1802) * t1803; (t1662 * t1869 + t1669 * t1864 + t1670 * t1859 + t1671 * t1854) * MDP(6) + (-t1662 * t1870 - t1669 * t1865 - t1670 * t1860 - t1671 * t1855) * MDP(7) + t1757 + (t1742 ^ 2 * t1936 + t1746 ^ 2 * t1930 + t1747 ^ 2 * t1928 + t1748 ^ 2 * t1926) * t1966 + ((t1664 * t1933 + t1675 * t1923 + t1677 * t1919 + t1679 * t1915) * MDP(5) + ((-t1664 * t1948 - t1675 * t1946 - t1677 * t1945 - t1679 * t1944) * MDP(5) + (-t1709 * t1828 - t1711 * t1824 - t1712 * t1820 - t1713 * t1816) * MDP(6) + (t1709 * t1829 + t1711 * t1825 + t1712 * t1821 + t1713 * t1817) * MDP(7)) * t1802) * t1803; 0; (t1649 * t1869 + t1651 * t1864 + t1652 * t1859 + t1653 * t1854) * MDP(6) + (-t1649 * t1870 - t1651 * t1865 - t1652 * t1860 - t1653 * t1855) * MDP(7) + ((-t1709 * t1887 - t1711 * t1885 - t1712 * t1883 - t1713 * t1881) * MDP(6) + (t1709 * t1888 + t1711 * t1886 + t1712 * t1884 + t1713 * t1882) * MDP(7)) * t1802 + ((t1661 * t1933 + t1666 * t1923 + t1667 * t1919 + t1668 * t1915) * MDP(2) + (t1650 * t1933 + t1654 * t1923 + t1655 * t1919 + t1656 * t1915) * MDP(5) + (-t1650 * t1948 - t1654 * t1946 - t1655 * t1945 - t1656 * t1944) * t1965) * t1803 + t1843; 0; 0; (4 * MDP(1)) + MDP(11); 0; (-t1663 * t1879 - t1672 * t1877 - t1673 * t1875 - t1674 * t1873) * MDP(6) + (t1663 * t1880 + t1672 * t1878 + t1673 * t1876 + t1674 * t1874) * MDP(7) + (-t1806 * t1955 - t1807 * t1953 - t1808 * t1951 - t1809 * t1949) * t1966 + ((-t1665 * t1956 - t1676 * t1954 - t1678 * t1952 - t1680 * t1950) * MDP(5) + ((t1665 * t1964 + t1676 * t1962 + t1678 * t1960 + t1680 * t1958) * MDP(5) + (t1806 * t1898 + t1807 * t1895 + t1808 * t1892 + t1809 * t1889) * MDP(6) + (-t1806 * t1899 - t1807 * t1896 - t1808 * t1893 - t1809 * t1890) * MDP(7)) * t1802) * t1803 + t1814; (-t1662 * t1879 - t1669 * t1877 - t1670 * t1875 - t1671 * t1873) * MDP(6) + (t1662 * t1880 + t1669 * t1878 + t1670 * t1876 + t1671 * t1874) * MDP(7) + (-t1742 * t1955 - t1746 * t1953 - t1747 * t1951 - t1748 * t1949) * t1966 + ((-t1664 * t1956 - t1675 * t1954 - t1677 * t1952 - t1679 * t1950) * MDP(5) + ((t1664 * t1964 + t1675 * t1962 + t1677 * t1960 + t1679 * t1958) * MDP(5) + (t1742 * t1898 + t1746 * t1895 + t1747 * t1892 + t1748 * t1889) * MDP(6) + (-t1742 * t1899 - t1746 * t1896 - t1747 * t1893 - t1748 * t1890) * MDP(7)) * t1802) * t1803 + t1843; 0; (-t1649 * t1879 - t1651 * t1877 - t1652 * t1875 - t1653 * t1873) * MDP(6) + (t1649 * t1880 + t1651 * t1878 + t1652 * t1876 + t1653 * t1874) * MDP(7) + MDP(8) + ((t1790 * t1900 + t1794 * t1897 + t1795 * t1894 + t1796 * t1891) * MDP(6) + (-t1789 * t1900 - t1791 * t1897 - t1792 * t1894 - t1793 * t1891) * MDP(7)) * t1802 + ((-t1661 * t1956 - t1666 * t1954 - t1667 * t1952 - t1668 * t1950) * MDP(2) + (-t1650 * t1956 - t1654 * t1954 - t1655 * t1952 - t1656 * t1950) * MDP(5) + (t1650 * t1964 + t1654 * t1962 + t1655 * t1960 + t1656 * t1958) * t1965) * t1803;];
%% Postprocessing: Reshape Output
% From vec2mat_4_matlab.m
res = [t1(1), t1(2), t1(3), t1(4); t1(5), t1(6), t1(7), t1(8); t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16);];
MMX  = res;
