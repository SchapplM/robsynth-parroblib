% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [4x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:00
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 10:59:50
% EndTime: 2020-08-07 10:59:59
% DurationCPUTime: 9.61s
% Computational Cost: add. (10672->473), mult. (27359->1014), div. (5800->22), fcn. (20636->26), ass. (0->441)
t3209 = 2 * MDP(6);
t2883 = xP(4);
t2812 = sin(t2883);
t2813 = cos(t2883);
t2887 = koppelP(1,2);
t2891 = koppelP(1,1);
t2795 = t2812 * t2891 + t2813 * t2887;
t2799 = -t2812 * t2887 + t2813 * t2891;
t2866 = legFrame(1,2);
t2807 = sin(t2866);
t2811 = cos(t2866);
t2780 = t2795 * t2811 + t2807 * t2799;
t2879 = xDP(4);
t2881 = xDP(2);
t2882 = xDP(1);
t2779 = t2780 * t2879 + t2807 * t2881 - t2882 * t2811;
t2877 = cos(qJ(3,1));
t2880 = xDP(3);
t2871 = sin(qJ(3,1));
t2878 = cos(qJ(2,1));
t3111 = t2871 * t2878;
t2771 = -t2779 * t3111 - t2877 * t2880;
t2767 = t2771 ^ 2;
t2836 = t2871 ^ 2;
t3166 = t2779 * t2878;
t3067 = t2771 * t3166;
t2872 = sin(qJ(2,1));
t2838 = 0.1e1 / t2872 ^ 2;
t2921 = t2877 ^ 2;
t2855 = 0.1e1 / t2921 ^ 2;
t3133 = t2838 * t2855;
t3208 = (t2767 * t2871 + 0.2e1 * t2836 * t3067) * t3133;
t2886 = koppelP(2,2);
t2890 = koppelP(2,1);
t2794 = t2812 * t2890 + t2813 * t2886;
t2798 = -t2812 * t2886 + t2813 * t2890;
t2865 = legFrame(2,2);
t2806 = sin(t2865);
t2810 = cos(t2865);
t2783 = t2794 * t2810 + t2806 * t2798;
t2778 = t2783 * t2879 + t2806 * t2881 - t2882 * t2810;
t2875 = cos(qJ(3,2));
t2869 = sin(qJ(3,2));
t2876 = cos(qJ(2,2));
t3114 = t2869 * t2876;
t2770 = -t2778 * t3114 - t2875 * t2880;
t2766 = t2770 ^ 2;
t2831 = t2869 ^ 2;
t3167 = t2778 * t2876;
t3070 = t2770 * t3167;
t2870 = sin(qJ(2,2));
t2833 = 0.1e1 / t2870 ^ 2;
t2917 = t2875 ^ 2;
t2849 = 0.1e1 / t2917 ^ 2;
t3137 = t2833 * t2849;
t3207 = (t2766 * t2869 + 0.2e1 * t2831 * t3070) * t3137;
t2885 = koppelP(3,2);
t2889 = koppelP(3,1);
t2793 = t2812 * t2889 + t2813 * t2885;
t2797 = -t2812 * t2885 + t2813 * t2889;
t2864 = legFrame(3,2);
t2805 = sin(t2864);
t2809 = cos(t2864);
t2782 = t2793 * t2809 + t2805 * t2797;
t2777 = t2782 * t2879 + t2805 * t2881 - t2882 * t2809;
t2873 = cos(qJ(3,3));
t2867 = sin(qJ(3,3));
t2874 = cos(qJ(2,3));
t3117 = t2867 * t2874;
t2769 = -t2777 * t3117 - t2873 * t2880;
t2765 = t2769 ^ 2;
t2826 = t2867 ^ 2;
t3168 = t2777 * t2874;
t3073 = t2769 * t3168;
t2868 = sin(qJ(2,3));
t2828 = 0.1e1 / t2868 ^ 2;
t2913 = t2873 ^ 2;
t2843 = 0.1e1 / t2913 ^ 2;
t3141 = t2828 * t2843;
t3206 = (t2765 * t2867 + 0.2e1 * t2826 * t3073) * t3141;
t2884 = koppelP(4,2);
t2888 = koppelP(4,1);
t2792 = t2812 * t2888 + t2813 * t2884;
t2796 = -t2812 * t2884 + t2813 * t2888;
t2863 = legFrame(4,2);
t2804 = sin(t2863);
t2808 = cos(t2863);
t2781 = t2792 * t2808 + t2804 * t2796;
t2776 = t2781 * t2879 + t2804 * t2881 - t2882 * t2808;
t2861 = cos(qJ(3,4));
t2859 = sin(qJ(3,4));
t2862 = cos(qJ(2,4));
t3121 = t2859 * t2862;
t2768 = -t2776 * t3121 - t2861 * t2880;
t2764 = t2768 ^ 2;
t2815 = t2859 ^ 2;
t3169 = t2776 * t2862;
t3076 = t2768 * t3169;
t2860 = sin(qJ(2,4));
t2817 = 0.1e1 / t2860 ^ 2;
t2900 = t2861 ^ 2;
t2822 = 0.1e1 / t2900 ^ 2;
t3148 = t2817 * t2822;
t3205 = (t2764 * t2859 + 0.2e1 * t2815 * t3076) * t3148;
t2892 = 0.1e1 / pkin(2);
t2816 = 0.1e1 / t2860;
t2819 = 0.1e1 / t2861;
t2827 = 0.1e1 / t2868;
t2832 = 0.1e1 / t2870;
t2837 = 0.1e1 / t2872;
t2840 = 0.1e1 / t2873;
t2846 = 0.1e1 / t2875;
t2852 = 0.1e1 / t2877;
t2893 = 1 / (pkin(2) ^ 2);
t2820 = 0.1e1 / t2900;
t2841 = 0.1e1 / t2913;
t2847 = 0.1e1 / t2917;
t2853 = 0.1e1 / t2921;
t3204 = -2 * t2893;
t3203 = MDP(2) * t2892;
t3202 = MDP(9) * t2892;
t2858 = t2879 ^ 2;
t2957 = t2792 * t2804 - t2796 * t2808;
t3056 = t2820 * t3121;
t3000 = t2816 * t3056;
t3149 = t2816 * t2862;
t3075 = t2768 * t3149;
t3122 = t2859 * t2860;
t2821 = t2819 * t2820;
t3145 = t2821 * t2892;
t3177 = t2768 * t2817;
t2728 = (t2957 * t2858 * t3000 + (-(-t2776 * t3122 + t3075) * t3177 - (-t2768 * t2859 + t3169) * t2816 * t2776) * t2819 * t3145) * t2892;
t3201 = t2728 * t2819;
t3200 = t2728 * t2859;
t2956 = t2793 * t2805 - t2797 * t2809;
t3040 = t2841 * t3117;
t2998 = t2827 * t3040;
t3142 = t2827 * t2874;
t3072 = t2769 * t3142;
t3118 = t2867 * t2868;
t2842 = t2840 * t2841;
t3130 = t2842 * t2892;
t3176 = t2769 * t2828;
t2729 = (t2956 * t2858 * t2998 + (-(-t2777 * t3118 + t3072) * t3176 - (-t2769 * t2867 + t3168) * t2827 * t2777) * t2840 * t3130) * t2892;
t3199 = t2729 * t2840;
t3198 = t2729 * t2867;
t2955 = t2794 * t2806 - t2798 * t2810;
t3039 = t2847 * t3114;
t2996 = t2832 * t3039;
t3138 = t2832 * t2876;
t3069 = t2770 * t3138;
t3115 = t2869 * t2870;
t2848 = t2846 * t2847;
t3127 = t2848 * t2892;
t3175 = t2770 * t2833;
t2730 = (t2955 * t2858 * t2996 + (-(-t2778 * t3115 + t3069) * t3175 - (-t2770 * t2869 + t3167) * t2832 * t2778) * t2846 * t3127) * t2892;
t3197 = t2730 * t2846;
t3196 = t2730 * t2869;
t2954 = t2795 * t2807 - t2799 * t2811;
t3038 = t2853 * t3111;
t2994 = t2837 * t3038;
t3134 = t2837 * t2878;
t3066 = t2771 * t3134;
t3112 = t2871 * t2872;
t2854 = t2852 * t2853;
t3124 = t2854 * t2892;
t3174 = t2771 * t2838;
t2731 = (t2954 * t2858 * t2994 + (-(-t2779 * t3112 + t3066) * t3174 - (-t2771 * t2871 + t3166) * t2837 * t2779) * t2852 * t3124) * t2892;
t3195 = t2731 * t2852;
t3194 = t2731 * t2871;
t2772 = t2776 ^ 2;
t3120 = t2860 * t2861;
t2784 = t2804 * t3120 - t2808 * t2859;
t3164 = t2804 * t2859;
t2785 = t2808 * t3120 + t3164;
t2818 = t2816 * t2817;
t2740 = t2764 * t2818 * t3145 + (t2772 * t3145 + (-t2784 * t2796 - t2785 * t2792) * t2858 * t2819) * t2816;
t3193 = t2740 * t2808;
t2773 = t2777 ^ 2;
t3116 = t2868 * t2873;
t2786 = t2805 * t3116 - t2809 * t2867;
t3162 = t2805 * t2867;
t2789 = t2809 * t3116 + t3162;
t2829 = t2827 * t2828;
t2741 = t2765 * t2829 * t3130 + (t2773 * t3130 + (-t2786 * t2797 - t2789 * t2793) * t2858 * t2840) * t2827;
t3192 = t2741 * t2809;
t2774 = t2778 ^ 2;
t3113 = t2870 * t2875;
t2787 = t2806 * t3113 - t2810 * t2869;
t3160 = t2806 * t2869;
t2790 = t2810 * t3113 + t3160;
t2834 = t2832 * t2833;
t2742 = t2766 * t2834 * t3127 + (t2774 * t3127 + (-t2787 * t2798 - t2790 * t2794) * t2858 * t2846) * t2832;
t3191 = t2742 * t2810;
t2775 = t2779 ^ 2;
t3110 = t2872 * t2877;
t2788 = t2807 * t3110 - t2811 * t2871;
t3158 = t2807 * t2871;
t2791 = t2811 * t3110 + t3158;
t2839 = t2837 * t2838;
t2743 = t2767 * t2839 * t3124 + (t2775 * t3124 + (-t2788 * t2799 - t2791 * t2795) * t2858 * t2852) * t2837;
t3190 = t2743 * t2811;
t3146 = t2821 * t2859;
t3065 = t2772 * t3146;
t3123 = t2858 * t2892;
t2752 = -t2957 * t2819 * t3123 + t2893 * t3065;
t3189 = t2752 * t2816;
t3131 = t2842 * t2867;
t3064 = t2773 * t3131;
t2753 = -t2956 * t2840 * t3123 + t2893 * t3064;
t3188 = t2753 * t2827;
t3128 = t2848 * t2869;
t3063 = t2774 * t3128;
t2754 = -t2955 * t2846 * t3123 + t2893 * t3063;
t3187 = t2754 * t2832;
t3125 = t2854 * t2871;
t3062 = t2775 * t3125;
t2755 = -t2954 * t2852 * t3123 + t2893 * t3062;
t3186 = t2755 * t2837;
t3185 = t2764 * t2822;
t2823 = t2819 * t2822;
t3184 = t2764 * t2823;
t3183 = t2765 * t2843;
t2844 = t2840 * t2843;
t3182 = t2765 * t2844;
t3181 = t2766 * t2849;
t2850 = t2846 * t2849;
t3180 = t2766 * t2850;
t3179 = t2767 * t2855;
t2856 = t2852 * t2855;
t3178 = t2767 * t2856;
t3173 = t2772 * t2820;
t3172 = t2773 * t2841;
t3171 = t2774 * t2847;
t3170 = t2775 * t2853;
t3165 = t2804 * t2819;
t3163 = t2805 * t2840;
t3161 = t2806 * t2846;
t3159 = t2807 * t2852;
t3157 = t2808 * t2819;
t3156 = t2809 * t2840;
t3155 = t2810 * t2846;
t3154 = t2811 * t2852;
t3153 = t2812 * t2858;
t3152 = t2813 * t2858;
t3151 = t2816 * t2819;
t2824 = t2862 ^ 2;
t3150 = t2816 * t2824;
t3147 = t2819 * t2859;
t3144 = t2827 * t2840;
t2845 = t2874 ^ 2;
t3143 = t2827 * t2845;
t3140 = t2832 * t2846;
t2851 = t2876 ^ 2;
t3139 = t2832 * t2851;
t3136 = t2837 * t2852;
t2857 = t2878 ^ 2;
t3135 = t2837 * t2857;
t3132 = t2840 * t2867;
t3129 = t2846 * t2869;
t3126 = t2852 * t2871;
t3119 = t2862 * t2728;
t3109 = t2874 * t2729;
t3108 = t2876 * t2730;
t3107 = t2878 * t2731;
t3087 = t2764 * t2817 * t2893;
t2760 = t2822 * t3087;
t2748 = t2893 * t3173 + t2760;
t2953 = t2776 * t3075 * t3204;
t3106 = -t2748 * t3120 - t2752 * t3122 + t2861 * t3119 + t2953 * t3146;
t3105 = t2748 * t3122 - t2752 * t3120 + t2820 * t2953 - t2859 * t3119;
t3084 = t2765 * t2828 * t2893;
t2761 = t2843 * t3084;
t2749 = t2893 * t3172 + t2761;
t2952 = t2777 * t3072 * t3204;
t3104 = -t2749 * t3116 - t2753 * t3118 + t2873 * t3109 + t2952 * t3131;
t3081 = t2766 * t2833 * t2893;
t2762 = t2849 * t3081;
t2750 = t2893 * t3171 + t2762;
t2951 = t2778 * t3069 * t3204;
t3103 = -t2750 * t3113 - t2754 * t3115 + t2875 * t3108 + t2951 * t3128;
t3078 = t2767 * t2838 * t2893;
t2763 = t2855 * t3078;
t2751 = t2893 * t3170 + t2763;
t2950 = t2779 * t3066 * t3204;
t3102 = -t2751 * t3110 - t2755 * t3112 + t2877 * t3107 + t2950 * t3125;
t3101 = t2749 * t3118 - t2753 * t3116 + t2841 * t2952 - t2867 * t3109;
t3100 = t2750 * t3115 - t2754 * t3113 + t2847 * t2951 - t2869 * t3108;
t3099 = t2751 * t3112 - t2755 * t3110 + t2853 * t2950 - t2871 * t3107;
t2894 = t2892 * t2893;
t3098 = 0.2e1 * t2894;
t3097 = t2728 * t3151;
t3096 = t2729 * t3144;
t3095 = t2730 * t3140;
t3094 = t2731 * t3136;
t3093 = t2740 * t3151;
t3092 = t2741 * t3144;
t3091 = t2742 * t3140;
t3090 = t2743 * t3136;
t3089 = t2764 * t3148;
t3088 = t2817 * t3184;
t3086 = t2765 * t3141;
t3085 = t2828 * t3182;
t3083 = t2766 * t3137;
t3082 = t2833 * t3180;
t3080 = t2767 * t3133;
t3079 = t2838 * t3178;
t3077 = t2776 * t3177;
t3074 = t2777 * t3176;
t3071 = t2778 * t3175;
t3068 = t2779 * t3174;
t3061 = t2815 * t3149;
t3060 = t2819 * t3149;
t3059 = t2820 * t3150;
t3058 = t2820 * t3149;
t3057 = t2816 * t3121;
t3055 = t2826 * t3142;
t3054 = t2840 * t3142;
t3053 = t2841 * t3143;
t3052 = t2841 * t3142;
t3051 = t2827 * t3117;
t3050 = t2831 * t3138;
t3049 = t2846 * t3138;
t3048 = t2847 * t3139;
t3047 = t2847 * t3138;
t3046 = t2832 * t3114;
t3045 = t2836 * t3134;
t3044 = t2852 * t3134;
t3043 = t2853 * t3135;
t3042 = t2853 * t3134;
t3041 = t2837 * t3111;
t3037 = t2816 * t3106;
t3036 = t2816 * t3105;
t3035 = t2827 * t3104;
t3034 = t2827 * t3101;
t3033 = t2832 * t3103;
t3032 = t2832 * t3100;
t3031 = t2837 * t3102;
t3030 = t2837 * t3099;
t3029 = t2860 + t3150;
t3028 = t2868 + t3143;
t3027 = t2870 + t3139;
t3026 = t2872 + t3135;
t3025 = t2728 * t3060;
t3024 = t2729 * t3054;
t3023 = t2730 * t3049;
t3022 = t2731 * t3044;
t3021 = t2740 * t3056;
t3020 = t2741 * t3040;
t3019 = t2742 * t3039;
t3018 = t2743 * t3038;
t3017 = t2862 * t3089;
t3016 = t2818 * t2862 * t3184;
t3015 = t2874 * t3086;
t3014 = t2829 * t2874 * t3182;
t3013 = t2876 * t3083;
t3012 = t2834 * t2876 * t3180;
t3011 = t2878 * t3080;
t3010 = t2839 * t2878 * t3178;
t3009 = t2817 * t3076;
t3008 = t2828 * t3073;
t3007 = t2833 * t3070;
t3006 = t2838 * t3067;
t3005 = t2816 * t3065;
t3004 = t2827 * t3064;
t3003 = t2832 * t3063;
t3002 = t2837 * t3062;
t3001 = t2819 * t3057;
t2999 = t2840 * t3051;
t2997 = t2846 * t3046;
t2995 = t2852 * t3041;
t2993 = t2819 * t3037;
t2992 = t2840 * t3035;
t2991 = t2846 * t3033;
t2990 = t2846 * t3032;
t2989 = t2852 * t3031;
t2988 = t2852 * t3030;
t2987 = t2819 * t3036;
t2986 = t2840 * t3034;
t2985 = t2819 * t3029;
t2984 = t2840 * t3028;
t2983 = t2846 * t3027;
t2982 = t2852 * t3026;
t2814 = t2859 * t2815;
t2981 = t2728 * t2814 * t3058;
t2980 = t2728 * t3000;
t2825 = t2867 * t2826;
t2979 = t2729 * t2825 * t3052;
t2978 = t2729 * t2998;
t2830 = t2869 * t2831;
t2977 = t2730 * t2830 * t3047;
t2976 = t2730 * t2996;
t2835 = t2871 * t2836;
t2975 = t2731 * t2835 * t3042;
t2974 = t2731 * t2994;
t2973 = t2740 * t2859 * t3059;
t2972 = t2741 * t2867 * t3053;
t2971 = t2742 * t2869 * t3048;
t2970 = t2743 * t2871 * t3043;
t2969 = t2752 * t2815 * t3058;
t2968 = t2753 * t2826 * t3052;
t2967 = t2754 * t2831 * t3047;
t2966 = t2755 * t2836 * t3042;
t2965 = t2772 * t2822 * t3061;
t2964 = t2862 * t3005;
t2963 = t2773 * t2843 * t3055;
t2962 = t2874 * t3004;
t2961 = t2774 * t2849 * t3050;
t2960 = t2876 * t3003;
t2959 = t2775 * t2855 * t3045;
t2958 = t2878 * t3002;
t2949 = 0.2e1 * t2728 * t3061 + 0.2e1 * t2820 * t3087 - t2760;
t2948 = 0.2e1 * t2729 * t3055 + 0.2e1 * t2841 * t3084 - t2761;
t2947 = 0.2e1 * t2730 * t3050 + 0.2e1 * t2847 * t3081 - t2762;
t2946 = 0.2e1 * t2731 * t3045 + 0.2e1 * t2853 * t3078 - t2763;
t2945 = t2815 * t3059 - t2860;
t2944 = t2826 * t3053 - t2868;
t2943 = t2831 * t3048 - t2870;
t2942 = t2836 * t3043 - t2872;
t2941 = t2752 * t3001 - t2728;
t2940 = t2753 * t2999 - t2729;
t2939 = t2754 * t2997 - t2730;
t2938 = t2755 * t2995 - t2731;
t2800 = -0.1e1 + 0.2e1 * t2900;
t2937 = t2800 * t2823 * t2859 * t3009;
t2801 = -0.1e1 + 0.2e1 * t2913;
t2936 = t2801 * t2844 * t2867 * t3008;
t2802 = -0.1e1 + 0.2e1 * t2917;
t2935 = t2802 * t2850 * t2869 * t3007;
t2803 = -0.1e1 + 0.2e1 * t2921;
t2934 = t2803 * t2856 * t2871 * t3006;
t2929 = -t2728 * t3147 + t2969;
t2928 = -t2729 * t3132 + t2968;
t2927 = -t2730 * t3129 + t2967;
t2926 = -t2731 * t3126 + t2966;
t2925 = t2740 * t3149 + t2741 * t3142 + t2742 * t3138 + t2743 * t3134;
t2759 = (-t2788 * t2795 + t2791 * t2799) * t3136;
t2758 = (-t2787 * t2794 + t2790 * t2798) * t3140;
t2757 = (-t2786 * t2793 + t2789 * t2797) * t3144;
t2756 = (-t2784 * t2792 + t2785 * t2796) * t3151;
t1 = [(t2784 * t3093 + t2786 * t3092 + t2787 * t3091 + t2788 * t3090) * MDP(1) + (t2808 * t2980 + t2809 * t2978 + t2810 * t2976 + t2811 * t2974) * t3203 + (t2784 * t3025 + t2786 * t3024 + t2787 * t3023 + t2788 * t3022 + (-t2784 * t3088 - t2786 * t3085 - t2787 * t3082 - t2788 * t3079) * t2893 + (t2808 * t2973 + t2809 * t2972 + t2810 * t2971 + t2811 * t2970) * t2892) * MDP(3) + (-t2784 * t3201 - t2786 * t3199 - t2787 * t3197 - t2788 * t3195 + (-t2784 * t3016 - t2786 * t3014 - t2787 * t3012 - t2788 * t3010) * t2893 + (-t2808 * t3021 - t2809 * t3020 - t2810 * t3019 - t2811 * t3018) * t2892) * MDP(4) + ((t2808 * t2981 + t2809 * t2979 + t2810 * t2977 + t2811 * t2975) * t2892 + (t2808 * t3205 + t2809 * t3206 + t2810 * t3207 + t2811 * t3208) * t2894) * MDP(5) + ((t2808 * t2937 + t2809 * t2936 + t2810 * t2935 + t2811 * t2934) * t3098 + (t2946 * t3154 + t2947 * t3155 + t2948 * t3156 + t2949 * t3157) * t2892) * MDP(6) + ((t2808 * t2964 + t2809 * t2962 + t2810 * t2960 + t2811 * t2958) * t2894 + (t2929 * t2808 + t2928 * t2809 + t2927 * t2810 + t2926 * t2811) * t2892) * MDP(7) + ((-t2808 * t2965 - t2809 * t2963 - t2810 * t2961 - t2811 * t2959) * t2894 + (t2941 * t2808 + t2940 * t2809 + t2939 * t2810 + t2938 * t2811) * t2892) * MDP(8) + (-t2752 * t3157 - t2753 * t3156 - t2754 * t3155 - t2755 * t3154) * t3202 + (t2788 * t2989 + t2787 * t2991 + t2786 * t2992 + t2784 * t2993 + (t3026 * t3126 * t3190 + t3027 * t3129 * t3191 + t3028 * t3132 * t3192 + t3029 * t3147 * t3193) * t2892) * MDP(10) + (t2788 * t2988 + t2787 * t2990 + t2786 * t2986 + t2784 * t2987 + (-t2942 * t3190 - t2943 * t3191 - t2944 * t3192 - t2945 * t3193) * t2892) * MDP(11) - MDP(13) * t3152 + MDP(14) * t3153; (t2785 * t3093 + t2789 * t3092 + t2790 * t3091 + t2791 * t3090) * MDP(1) + (-t2804 * t2980 - t2805 * t2978 - t2806 * t2976 - t2807 * t2974) * t3203 + (t2785 * t3025 + t2789 * t3024 + t2790 * t3023 + t2791 * t3022 + (-t2785 * t3088 - t2789 * t3085 - t2790 * t3082 - t2791 * t3079) * t2893 + (-t2804 * t2973 - t2805 * t2972 - t2806 * t2971 - t2807 * t2970) * t2892) * MDP(3) + (-t2785 * t3201 - t2789 * t3199 - t2790 * t3197 - t2791 * t3195 + (-t2785 * t3016 - t2789 * t3014 - t2790 * t3012 - t2791 * t3010) * t2893 + (t2804 * t3021 + t2805 * t3020 + t2806 * t3019 + t2807 * t3018) * t2892) * MDP(4) + ((-t2804 * t2981 - t2805 * t2979 - t2806 * t2977 - t2807 * t2975) * t2892 + (-t2804 * t3205 - t2805 * t3206 - t2806 * t3207 - t2807 * t3208) * t2894) * MDP(5) + ((-t2804 * t2937 - t2805 * t2936 - t2806 * t2935 - t2807 * t2934) * t3098 + (-t2946 * t3159 - t2947 * t3161 - t2948 * t3163 - t2949 * t3165) * t2892) * MDP(6) + ((-t2804 * t2964 - t2805 * t2962 - t2806 * t2960 - t2807 * t2958) * t2894 + (-t2929 * t2804 - t2928 * t2805 - t2927 * t2806 - t2926 * t2807) * t2892) * MDP(7) + ((t2804 * t2965 + t2805 * t2963 + t2806 * t2961 + t2807 * t2959) * t2894 + (-t2941 * t2804 - t2940 * t2805 - t2939 * t2806 - t2938 * t2807) * t2892) * MDP(8) + (t2752 * t3165 + t2753 * t3163 + t2754 * t3161 + t2755 * t3159) * t3202 + (t2791 * t2989 + t2790 * t2991 + t2789 * t2992 + t2785 * t2993 + (-t2740 * t2985 * t3164 - t2741 * t2984 * t3162 - t2742 * t2983 * t3160 - t2743 * t2982 * t3158) * t2892) * MDP(10) + (t2791 * t2988 + t2790 * t2990 + t2789 * t2986 + t2785 * t2987 + (t2945 * t2804 * t2740 + t2944 * t2805 * t2741 + t2943 * t2806 * t2742 + t2942 * t2807 * t2743) * t2892) * MDP(11) - MDP(13) * t3153 - MDP(14) * t3152; t2925 * MDP(1) + (-t3094 - t3095 - t3096 - t3097) * t3203 + (t2728 * t3150 + t2729 * t3143 + t2730 * t3139 + t2731 * t3135 + (-t3011 - t3013 - t3015 - t3017) * t2893 + (-t2740 * t3060 - t2741 * t3054 - t2742 * t3049 - t2743 * t3044) * t2892) * MDP(3) + (-t3119 - t3109 - t3108 - t3107 + (-t2818 * t2824 * t3185 - t2829 * t2845 * t3183 - t2834 * t2851 * t3181 - t2839 * t2857 * t3179) * t2893 + (t2740 * t2819 + t2741 * t2840 + t2742 * t2846 + t2743 * t2852) * t2892) * MDP(4) + ((-t3068 * t3125 - t3071 * t3128 - t3074 * t3131 - t3077 * t3146) * t3098 + (-t2815 * t3097 - t2826 * t3096 - t2831 * t3095 - t2836 * t3094) * t2892) * MDP(5) + ((-t2800 * t2822 * t3077 - t2801 * t2843 * t3074 - t2802 * t2849 * t3071 - t2803 * t2855 * t3068) * t2894 + (-t2816 * t3200 - t2827 * t3198 - t2832 * t3196 - t2837 * t3194) * t2892) * t3209 + ((-t2816 * t3173 - t2827 * t3172 - t2832 * t3171 - t2837 * t3170) * t2894 + (-t3126 * t3186 - t3129 * t3187 - t3132 * t3188 - t3147 * t3189) * t2892) * MDP(7) + ((t3002 + t3003 + t3004 + t3005) * t2894 + (-t3186 - t3187 - t3188 - t3189) * t2892) * MDP(8) + (t2862 * t3037 + t2874 * t3035 + t2876 * t3033 + t2878 * t3031 - t2925 * t2892) * MDP(10) + (t2878 * t3030 + t2876 * t3032 + t2874 * t3034 + t2862 * t3036 + (t2740 * t3001 + t2741 * t2999 + t2742 * t2997 + t2743 * t2995) * t2892) * MDP(11); (t2743 * MDP(1) + t3102 * MDP(10) + t3099 * MDP(11) + (MDP(3) * t2878 - MDP(4) * t2872) * t2731) * t2759 + (t2742 * MDP(1) + t3103 * MDP(10) + t3100 * MDP(11) + (MDP(3) * t2876 - MDP(4) * t2870) * t2730) * t2758 + (t2741 * MDP(1) + t3104 * MDP(10) + t3101 * MDP(11) + (MDP(3) * t2874 - MDP(4) * t2868) * t2729) * t2757 + (t2740 * MDP(1) + t3106 * MDP(10) + t3105 * MDP(11) + (MDP(3) * t2862 - MDP(4) * t2860) * t2728) * t2756 + ((-t2756 * t2816 * t3185 - t2757 * t2827 * t3183 - t2758 * t2832 * t3181 - t2759 * t2837 * t3179) * MDP(3) + (-t2756 * t3017 - t2757 * t3015 - t2758 * t3013 - t2759 * t3011) * MDP(4)) * t2893 + (((-0.2e1 * t2831 * t2849 * t3007 - t2869 * t3083) * t2783 + (-0.2e1 * t2826 * t2843 * t3008 - t2867 * t3086) * t2782 + (-0.2e1 * t2815 * t2822 * t3009 - t2859 * t3089) * t2781 + (-0.2e1 * t2836 * t2855 * t3006 - t2871 * t3080) * t2780) * MDP(5) + (-t2780 * t2934 - t2781 * t2937 - t2782 * t2936 - t2783 * t2935) * t3209 + (-t2780 * t2958 - t2781 * t2964 - t2782 * t2962 - t2783 * t2960) * MDP(7) + (t2780 * t2959 + t2781 * t2965 + t2782 * t2963 + t2783 * t2961) * MDP(8)) * t2894 + ((-MDP(7) * t2967 + (MDP(8) + (-MDP(2) * t2869 - MDP(5) * t2830) * t3047) * t2730 + (-t2947 * MDP(6) + MDP(7) * t3196 + (-MDP(8) * t3046 + MDP(9)) * t2754) * t2846 + (t2943 * MDP(11) + ((-MDP(3) * t3139 + MDP(4) * t2876) * t2847 - MDP(10) * t2983) * t2869) * t2742) * t2783 + (-MDP(7) * t2968 + (MDP(8) + (-MDP(2) * t2867 - MDP(5) * t2825) * t3052) * t2729 + (-t2948 * MDP(6) + MDP(7) * t3198 + (-MDP(8) * t3051 + MDP(9)) * t2753) * t2840 + (t2944 * MDP(11) + ((-MDP(3) * t3143 + MDP(4) * t2874) * t2841 - MDP(10) * t2984) * t2867) * t2741) * t2782 + (-MDP(7) * t2969 + (MDP(8) + (-MDP(2) * t2859 - MDP(5) * t2814) * t3058) * t2728 + (-t2949 * MDP(6) + MDP(7) * t3200 + (-MDP(8) * t3057 + MDP(9)) * t2752) * t2819 + (t2945 * MDP(11) + ((-MDP(3) * t3150 + MDP(4) * t2862) * t2820 - MDP(10) * t2985) * t2859) * t2740) * t2781 + (-MDP(7) * t2966 + (MDP(8) + (-MDP(2) * t2871 - MDP(5) * t2835) * t3042) * t2731 + (-t2946 * MDP(6) + MDP(7) * t3194 + (-MDP(8) * t3041 + MDP(9)) * t2755) * t2852 + (t2942 * MDP(11) + ((-MDP(3) * t3135 + MDP(4) * t2878) * t2853 - MDP(10) * t2982) * t2871) * t2743) * t2780) * t2892;];
taucX  = t1;
