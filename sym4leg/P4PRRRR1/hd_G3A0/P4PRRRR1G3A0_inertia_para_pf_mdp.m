% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR1G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [4x4]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-02 19:06
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P4PRRRR1G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR1G3A0_inertia_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR1G3A0_inertia_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4PRRRR1G3A0_inertia_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR1G3A0_inertia_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR1G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR1G3A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-02 19:05:45
% EndTime: 2020-03-02 19:06:10
% DurationCPUTime: 25.92s
% Computational Cost: add. (2706->641), mult. (6893->1090), div. (3196->22), fcn. (8620->26), ass. (0->411)
t1773 = legFrame(4,2);
t1727 = cos(t1773);
t1774 = legFrame(3,2);
t1728 = cos(t1774);
t1775 = legFrame(2,2);
t1729 = cos(t1775);
t1776 = legFrame(1,2);
t1730 = cos(t1776);
t1788 = cos(qJ(2,1));
t1781 = sin(qJ(3,1));
t1751 = t1781 ^ 2;
t1782 = sin(qJ(2,1));
t1753 = 0.1e1 / t1782 ^ 2;
t1787 = cos(qJ(3,1));
t1817 = t1787 ^ 2;
t1765 = 0.1e1 / t1817;
t2037 = t1753 * t1765;
t1957 = t1751 * t2037;
t1892 = t1788 * t1957;
t1786 = cos(qJ(2,2));
t1779 = sin(qJ(3,2));
t1747 = t1779 ^ 2;
t1780 = sin(qJ(2,2));
t1749 = 0.1e1 / t1780 ^ 2;
t1785 = cos(qJ(3,2));
t1814 = t1785 ^ 2;
t1760 = 0.1e1 / t1814;
t2044 = t1749 * t1760;
t1965 = t1747 * t2044;
t1896 = t1786 * t1965;
t1784 = cos(qJ(2,3));
t1777 = sin(qJ(3,3));
t1743 = t1777 ^ 2;
t1778 = sin(qJ(2,3));
t1745 = 0.1e1 / t1778 ^ 2;
t1783 = cos(qJ(3,3));
t1811 = t1783 ^ 2;
t1755 = 0.1e1 / t1811;
t2051 = t1745 * t1755;
t1973 = t1743 * t2051;
t1900 = t1784 * t1973;
t1772 = cos(qJ(2,4));
t1769 = sin(qJ(3,4));
t1734 = t1769 ^ 2;
t1770 = sin(qJ(2,4));
t1736 = 0.1e1 / t1770 ^ 2;
t1771 = cos(qJ(3,4));
t1802 = t1771 ^ 2;
t1738 = 0.1e1 / t1802;
t2061 = t1736 * t1738;
t1983 = t1734 * t2061;
t1905 = t1772 * t1983;
t2117 = t1727 * t1905 + t1728 * t1900 + t1729 * t1896 + t1730 * t1892;
t1798 = 1 / pkin(2);
t2099 = MDP(10) * t1798;
t1789 = xP(4);
t1731 = sin(t1789);
t1732 = cos(t1789);
t1790 = koppelP(4,2);
t1794 = koppelP(4,1);
t1705 = t1731 * t1794 + t1732 * t1790;
t1709 = -t1731 * t1790 + t1732 * t1794;
t1723 = sin(t1773);
t1673 = t1705 * t1727 + t1709 * t1723;
t2116 = t1673 * t1723;
t1791 = koppelP(3,2);
t1795 = koppelP(3,1);
t1706 = t1731 * t1795 + t1732 * t1791;
t1710 = -t1731 * t1791 + t1732 * t1795;
t1724 = sin(t1774);
t1674 = t1706 * t1728 + t1710 * t1724;
t2115 = t1674 * t1724;
t1792 = koppelP(2,2);
t1796 = koppelP(2,1);
t1707 = t1731 * t1796 + t1732 * t1792;
t1711 = -t1731 * t1792 + t1732 * t1796;
t1725 = sin(t1775);
t1675 = t1707 * t1729 + t1711 * t1725;
t2114 = t1675 * t1725;
t1793 = koppelP(1,2);
t1797 = koppelP(1,1);
t1708 = t1731 * t1797 + t1732 * t1793;
t1712 = -t1731 * t1793 + t1732 * t1797;
t1726 = sin(t1776);
t1676 = t1708 * t1730 + t1712 * t1726;
t2113 = t1676 * t1726;
t2066 = t1730 * t1788;
t1704 = t1726 * t1782 + t2066;
t1752 = 0.1e1 / t1782;
t2075 = t1704 * t1752;
t2070 = t1726 * t1788;
t1703 = t1730 * t1782 - t2070;
t2076 = t1703 * t1752;
t1877 = -t1708 * t2075 + t1712 * t2076;
t2067 = t1729 * t1786;
t1702 = t1725 * t1780 + t2067;
t1748 = 0.1e1 / t1780;
t2078 = t1702 * t1748;
t2071 = t1725 * t1786;
t1701 = t1729 * t1780 - t2071;
t2079 = t1701 * t1748;
t1878 = -t1707 * t2078 + t1711 * t2079;
t2068 = t1728 * t1784;
t1700 = t1724 * t1778 + t2068;
t1744 = 0.1e1 / t1778;
t2081 = t1700 * t1744;
t2072 = t1724 * t1784;
t1699 = t1728 * t1778 - t2072;
t2082 = t1699 * t1744;
t1879 = -t1706 * t2081 + t1710 * t2082;
t2069 = t1727 * t1772;
t1698 = t1723 * t1770 + t2069;
t1735 = 0.1e1 / t1770;
t2084 = t1698 * t1735;
t2073 = t1723 * t1772;
t1697 = t1727 * t1770 - t2073;
t2085 = t1697 * t1735;
t1880 = -t1705 * t2084 + t1709 * t2085;
t1764 = 0.1e1 / t1787;
t2028 = t1764 * t1781;
t1955 = t1752 * t2028;
t1759 = 0.1e1 / t1785;
t2031 = t1759 * t1779;
t1963 = t1748 * t2031;
t1754 = 0.1e1 / t1783;
t2034 = t1754 * t1777;
t1971 = t1744 * t2034;
t1737 = 0.1e1 / t1771;
t2058 = t1737 * t1769;
t1981 = t1735 * t2058;
t2112 = (t1877 * t1955 + t1878 * t1963 + t1879 * t1971 + t1880 * t1981) * MDP(1);
t2111 = -t1731 * MDP(13) - t1732 * MDP(14) + (t1877 * t2075 + t1878 * t2078 + t1879 * t2081 + t1880 * t2084) * MDP(1);
t2110 = t1732 * MDP(13) - t1731 * MDP(14) + (t1877 * t2076 + t1878 * t2079 + t1879 * t2082 + t1880 * t2085) * MDP(1);
t2109 = 2 * MDP(6);
t2108 = 2 * t1798;
t2107 = MDP(2) * t1798;
t1799 = 1 / (pkin(2) ^ 2);
t2106 = MDP(2) * t1799;
t2105 = MDP(3) * t1798;
t2104 = MDP(4) * t1798;
t2103 = MDP(5) * t1798;
t2102 = MDP(5) * t1799;
t2101 = MDP(7) * t1799;
t2100 = MDP(8) * t1799;
t2098 = MDP(11) * t1798;
t2097 = t1880 * t1737;
t2096 = t1880 * t1735;
t2095 = t1879 * t1754;
t2094 = t1878 * t1759;
t2093 = t1877 * t1764;
t2092 = t1879 * t1744;
t2091 = t1878 * t1748;
t2090 = t1877 * t1752;
t2064 = t1735 * t1737;
t1999 = t1673 * t2064;
t1667 = t1798 * t1999;
t2089 = t1667 * t1772;
t2054 = t1744 * t1754;
t1998 = t1674 * t2054;
t1668 = t1798 * t1998;
t2088 = t1668 * t1784;
t2047 = t1748 * t1759;
t1997 = t1675 * t2047;
t1669 = t1798 * t1997;
t2087 = t1669 * t1786;
t2040 = t1752 * t1764;
t1996 = t1676 * t2040;
t1670 = t1798 * t1996;
t2086 = t1670 * t1788;
t2083 = t1698 * t1736;
t2080 = t1700 * t1745;
t2077 = t1702 * t1749;
t2074 = t1704 * t1753;
t2065 = t1734 * t1738;
t1741 = t1772 ^ 2;
t2063 = t1735 * t1741;
t2062 = t1735 * t1772;
t2060 = t1736 * t1741;
t2059 = t1736 * t1772;
t2057 = t1738 * t1769;
t1739 = t1737 * t1738;
t2056 = t1739 * t1772;
t2055 = t1743 * t1755;
t1758 = t1784 ^ 2;
t2053 = t1744 * t1758;
t2052 = t1744 * t1784;
t2050 = t1745 * t1758;
t2049 = t1745 * t1784;
t2048 = t1747 * t1760;
t1763 = t1786 ^ 2;
t2046 = t1748 * t1763;
t2045 = t1748 * t1786;
t2043 = t1749 * t1763;
t2042 = t1749 * t1786;
t2041 = t1751 * t1765;
t1768 = t1788 ^ 2;
t2039 = t1752 * t1768;
t2038 = t1752 * t1788;
t2036 = t1753 * t1768;
t2035 = t1753 * t1788;
t2033 = t1755 * t1777;
t1756 = t1754 * t1755;
t2032 = t1756 * t1784;
t2030 = t1760 * t1779;
t1761 = t1759 * t1760;
t2029 = t1761 * t1786;
t2027 = t1765 * t1781;
t1766 = t1764 * t1765;
t2026 = t1766 * t1788;
t2025 = t1769 * t1772;
t2024 = t1777 * t1784;
t2023 = t1779 * t1786;
t2022 = t1781 * t1788;
t2021 = MDP(6) * t2108;
t2020 = t1799 * t2109;
t2019 = t1880 * t2062;
t2018 = t1879 * t2052;
t2017 = t1878 * t2045;
t2016 = t1877 * t2038;
t2015 = t1667 * t1735 * t1769;
t2014 = t1667 * t2062;
t2013 = t1667 * t2025;
t2012 = t1771 * t2089;
t2011 = t1668 * t1744 * t1777;
t2010 = t1668 * t2052;
t2009 = t1668 * t2024;
t2008 = t1783 * t2088;
t2007 = t1669 * t1748 * t1779;
t2006 = t1669 * t2045;
t2005 = t1669 * t2023;
t2004 = t1785 * t2087;
t2003 = t1670 * t1752 * t1781;
t2002 = t1670 * t2038;
t2001 = t1670 * t2022;
t2000 = t1787 * t2086;
t1995 = t1723 * t2064;
t1994 = t1724 * t2054;
t1993 = t1725 * t2047;
t1992 = t1726 * t2040;
t1991 = t1727 * t2064;
t1990 = t1727 * t2061;
t1989 = t1728 * t2054;
t1988 = t1728 * t2051;
t1987 = t1729 * t2047;
t1986 = t1729 * t2044;
t1985 = t1730 * t2040;
t1984 = t1730 * t2037;
t1982 = t1741 * t2065;
t1980 = t1735 * t2057;
t1979 = t1736 * t2058;
t1978 = t1739 * t2060;
t1977 = t1736 * t2056;
t1976 = 0.1e1 / t1802 ^ 2 * t2060;
t1975 = t1737 * t2025;
t1974 = t1738 * t2025;
t1972 = t1758 * t2055;
t1970 = t1744 * t2033;
t1969 = t1745 * t2034;
t1968 = t1756 * t2050;
t1967 = t1745 * t2032;
t1966 = 0.1e1 / t1811 ^ 2 * t2050;
t1964 = t1763 * t2048;
t1962 = t1748 * t2030;
t1961 = t1749 * t2031;
t1960 = t1761 * t2043;
t1959 = t1749 * t2029;
t1958 = 0.1e1 / t1814 ^ 2 * t2043;
t1956 = t1768 * t2041;
t1954 = t1752 * t2027;
t1953 = t1753 * t2028;
t1952 = t1766 * t2036;
t1951 = t1753 * t2026;
t1950 = 0.1e1 / t1817 ^ 2 * t2036;
t1949 = t1754 * t2024;
t1948 = t1755 * t2024;
t1947 = t1759 * t2023;
t1946 = t1760 * t2023;
t1945 = t1764 * t2022;
t1944 = t1765 * t2022;
t1942 = t1737 * t2019;
t1941 = t1754 * t2018;
t1940 = t1759 * t2017;
t1939 = t1764 * t2016;
t1938 = t1667 * t1734 * t2064;
t1937 = t1735 * t2012;
t1936 = t1668 * t1743 * t2054;
t1935 = t1744 * t2008;
t1934 = t1669 * t1747 * t2047;
t1933 = t1748 * t2004;
t1932 = t1670 * t1751 * t2040;
t1931 = t1752 * t2000;
t1930 = t2061 * t2116;
t1929 = t2051 * t2115;
t1928 = t2044 * t2114;
t1927 = t2037 * t2113;
t1926 = t1697 * t1723 * t2059;
t1925 = t1697 * t1979;
t1924 = t1698 * t1727 * t2059;
t1923 = t1699 * t1724 * t2049;
t1922 = t1699 * t1969;
t1921 = t1700 * t1728 * t2049;
t1920 = t1701 * t1725 * t2042;
t1919 = t1701 * t1961;
t1918 = t1702 * t1729 * t2042;
t1917 = t1703 * t1726 * t2035;
t1916 = t1703 * t1953;
t1915 = t1704 * t1730 * t2035;
t1914 = t1727 * t1983;
t1913 = t1727 * t1979;
t1912 = t1728 * t1973;
t1911 = t1728 * t1969;
t1910 = t1729 * t1965;
t1909 = t1729 * t1961;
t1908 = t1730 * t1957;
t1907 = t1730 * t1953;
t1733 = t1769 * t1734;
t1906 = t1733 * t1977;
t1904 = t1736 * t1975;
t1903 = t1769 * t1977;
t1902 = t1736 * t1982;
t1742 = t1777 * t1743;
t1901 = t1742 * t1967;
t1899 = t1745 * t1949;
t1898 = t1777 * t1967;
t1746 = t1779 * t1747;
t1897 = t1746 * t1959;
t1895 = t1749 * t1947;
t1894 = t1779 * t1959;
t1750 = t1781 * t1751;
t1893 = t1750 * t1951;
t1891 = t1753 * t1945;
t1890 = t1781 * t1951;
t1889 = t1745 * t1972;
t1888 = t1749 * t1964;
t1887 = t1753 * t1956;
t1886 = t1735 * t2013;
t1885 = t1744 * t2009;
t1884 = t1748 * t2005;
t1883 = t1752 * t2001;
t1869 = t1726 * t1891;
t1870 = t1725 * t1895;
t1871 = t1724 * t1899;
t1872 = t1723 * t1904;
t1882 = (t1869 + t1870 + t1871 + t1872) * t1798;
t1881 = t2117 * t1798;
t1876 = t1769 * t1942;
t1875 = t1777 * t1941;
t1874 = t1779 * t1940;
t1873 = t1781 * t1939;
t1867 = t1727 * t1904;
t1865 = t1728 * t1899;
t1863 = t1729 * t1895;
t1861 = t1730 * t1891;
t1859 = t1697 * t1727 - t1698 * t1723;
t1858 = t1699 * t1728 - t1700 * t1724;
t1857 = t1701 * t1729 - t1702 * t1725;
t1856 = t1703 * t1730 - t1704 * t1726;
t1855 = t1735 * t1982 - t1770;
t1854 = t1744 * t1972 - t1778;
t1853 = t1748 * t1964 - t1780;
t1852 = t1752 * t1956 - t1782;
t1851 = (-t1770 - t2063) * t2058;
t1850 = (-t1778 - t2053) * t2034;
t1849 = (-t1780 - t2046) * t2031;
t1848 = (-t1782 - t2039) * t2028;
t1847 = (-t1698 * t1741 - t2069) * t1736;
t1846 = (-t1700 * t1758 - t2068) * t1745;
t1845 = (-t1702 * t1763 - t2067) * t1749;
t1844 = (-t1704 * t1768 - t2066) * t1753;
t1843 = t1673 * t1697 * t1736 + t1723 * t2096;
t1842 = -t1673 * t2083 + t1727 * t2096;
t1841 = t1674 * t1699 * t1745 + t1724 * t2092;
t1840 = -t1674 * t2080 + t1728 * t2092;
t1839 = t1675 * t1701 * t1749 + t1725 * t2091;
t1838 = -t1675 * t2077 + t1729 * t2091;
t1837 = t1676 * t1703 * t1753 + t1726 * t2090;
t1836 = -t1676 * t2074 + t1730 * t2090;
t1820 = -t1723 * t1905 - t1724 * t1900 - t1725 * t1896 - t1726 * t1892;
t1835 = ((-t1703 * t1768 + t2070) * t1753 * t2027 + (-t1701 * t1763 + t2071) * t1749 * t2030 + (-t1699 * t1758 + t2072) * t1745 * t2033 + (-t1697 * t1741 + t2073) * t1736 * t2057) * t2105 + ((t1703 * t1788 - t1726) * t1954 + (t1701 * t1786 - t1725) * t1962 + (t1699 * t1784 - t1724) * t1970 + (t1697 * t1772 - t1723) * t1980) * t2104 + (t1916 + t1919 + t1922 + t1925) * MDP(1) + t1820 * t2020 + (-t1723 * t1906 - t1724 * t1901 - t1725 * t1897 - t1726 * t1893) * t2102 + (-t1723 * t1903 - t1724 * t1898 - t1725 * t1894 - t1726 * t1890) * t2106 + (t1723 * t1980 + t1724 * t1970 + t1725 * t1962 + t1726 * t1954) * t2101 + (t1992 + t1993 + t1994 + t1995) * t2100;
t1834 = (t1844 * t2027 + t1845 * t2030 + t1846 * t2033 + t1847 * t2057) * t2105 + ((t1704 * t1788 + t1730) * t1954 + (t1702 * t1786 + t1729) * t1962 + (t1700 * t1784 + t1728) * t1970 + (t1698 * t1772 + t1727) * t1980) * t2104 + (t1698 * t1979 + t1700 * t1969 + t1702 * t1961 + t1704 * t1953) * MDP(1) + t2117 * t2020 + (t1727 * t1906 + t1728 * t1901 + t1729 * t1897 + t1730 * t1893) * t2102 + (t1727 * t1903 + t1728 * t1898 + t1729 * t1894 + t1730 * t1890) * t2106 + (-t1727 * t1980 - t1728 * t1970 - t1729 * t1962 - t1730 * t1954) * t2101 + (-t1985 - t1987 - t1989 - t1991) * t2100;
t1833 = t1843 * t1772;
t1832 = t1842 * t1772;
t1831 = t1841 * t1784;
t1830 = t1840 * t1784;
t1829 = t1839 * t1786;
t1828 = t1838 * t1786;
t1827 = t1837 * t1788;
t1826 = t1836 * t1788;
t1825 = t1667 * t2058 + t1668 * t2034 + t1669 * t2031 + t1670 * t2028;
t1824 = t1733 * t1978 + t1742 * t1968 + t1746 * t1960 + t1750 * t1952;
t1823 = t1734 * t1735 * t2056 + t1743 * t1744 * t2032 + t1747 * t1748 * t2029 + t1751 * t1752 * t2026;
t1821 = -t1673 * t1905 - t1674 * t1900 - t1675 * t1896 - t1676 * t1892;
t1722 = t1730 ^ 2;
t1721 = t1729 ^ 2;
t1720 = t1728 ^ 2;
t1719 = t1727 ^ 2;
t1718 = t1726 ^ 2;
t1717 = t1725 ^ 2;
t1716 = t1724 ^ 2;
t1715 = t1723 ^ 2;
t1713 = (t1731 ^ 2 + t1732 ^ 2) * MDP(15);
t1688 = t1852 * t1798;
t1687 = t1853 * t1798;
t1686 = t1854 * t1798;
t1685 = t1855 * t1798;
t1684 = t1798 * t1848;
t1683 = t1798 * t1849;
t1682 = t1798 * t1850;
t1681 = t1798 * t1851;
t1644 = (t1697 * t2083 + t1699 * t2080 + t1701 * t2077 + t1703 * t2074) * MDP(1) + ((-t1723 * t1990 - t1724 * t1988 - t1725 * t1986 - t1726 * t1984) * MDP(2) + (-t1723 * t1914 - t1724 * t1912 - t1725 * t1910 - t1726 * t1908) * MDP(5) + (-t1723 * t1913 - t1724 * t1911 - t1725 * t1909 - t1726 * t1907) * t2109) * t1799 + ((t1856 * t2040 + t1857 * t2047 + t1858 * t2054 + t1859 * t2064) * MDP(4) + (-MDP(10) + (MDP(11) * t1781 - MDP(3)) * t1764) * t1856 * t2035 + (-MDP(10) + (MDP(11) * t1779 - MDP(3)) * t1759) * t1857 * t2042 + (-MDP(10) + (MDP(11) * t1777 - MDP(3)) * t1754) * t1858 * t2049 + (-MDP(10) + (MDP(11) * t1769 - MDP(3)) * t1737) * t1859 * t2059) * t1798;
t1 = [(t1698 ^ 2 * t1736 + t1700 ^ 2 * t1745 + t1702 ^ 2 * t1749 + t1704 ^ 2 * t1753) * MDP(1) + t1713 + ((t1719 * t2061 + t1720 * t2051 + t1721 * t2044 + t1722 * t2037) * MDP(2) + (t1719 * t1983 + t1720 * t1973 + t1721 * t1965 + t1722 * t1957) * MDP(5) + (t1719 * t1979 + t1720 * t1969 + t1721 * t1961 + t1722 * t1953) * t2109) * t1799 + ((-t1737 * t1924 - t1754 * t1921 - t1759 * t1918 - t1764 * t1915) * MDP(3) + (t1698 * t1991 + t1700 * t1989 + t1702 * t1987 + t1704 * t1985) * MDP(4) + (-t1915 - t1918 - t1921 - t1924) * MDP(10) + (t1698 * t1867 + t1700 * t1865 + t1702 * t1863 + t1704 * t1861) * MDP(11)) * t2108; t1644; (t1681 * t2084 + t1682 * t2081 + t1683 * t2078 + t1684 * t2075 + (-t1861 - t1863 - t1865 - t1867) * t1798) * MDP(10) + (t1685 * t2084 + t1686 * t2081 + t1687 * t2078 + t1688 * t2075 + t1881) * MDP(11) + t1834; (-t1667 * t1991 - t1668 * t1989 - t1669 * t1987 - t1670 * t1985) * t2107 + (t1698 * t2014 + t1700 * t2010 + t1702 * t2006 + t1704 * t2002 + (-t1727 * t1942 - t1728 * t1941 - t1729 * t1940 - t1730 * t1939) * t1798) * MDP(3) + (-t1667 * t1698 - t1668 * t1700 - t1669 * t1702 - t1670 * t1704 + (t1727 * t2097 + t1728 * t2095 + t1729 * t2094 + t1730 * t2093) * t1798) * MDP(4) + (-t1727 * t1938 - t1728 * t1936 - t1729 * t1934 - t1730 * t1932) * t2103 + (-t1727 * t2015 - t1728 * t2011 - t1729 * t2007 - t1730 * t2003) * t2021 + (t1698 * t1937 + t1700 * t1935 + t1702 * t1933 + t1704 * t1931 + (-t1727 * t2019 - t1728 * t2018 - t1729 * t2017 - t1730 * t2016) * t1798) * MDP(10) + (-t1698 * t1886 - t1700 * t1885 - t1702 * t1884 - t1704 * t1883 + (t1727 * t1876 + t1728 * t1875 + t1729 * t1874 + t1730 * t1873) * t1798) * MDP(11) + t2111; t1644; (t1697 ^ 2 * t1736 + t1699 ^ 2 * t1745 + t1701 ^ 2 * t1749 + t1703 ^ 2 * t1753) * MDP(1) + t1713 + ((t1715 * t2061 + t1716 * t2051 + t1717 * t2044 + t1718 * t2037) * MDP(2) + (t1715 * t1983 + t1716 * t1973 + t1717 * t1965 + t1718 * t1957) * MDP(5) + (t1715 * t1979 + t1716 * t1969 + t1717 * t1961 + t1718 * t1953) * t2109) * t1799 + ((t1737 * t1926 + t1754 * t1923 + t1759 * t1920 + t1764 * t1917) * MDP(3) + (-t1697 * t1995 - t1699 * t1994 - t1701 * t1993 - t1703 * t1992) * MDP(4) + (t1917 + t1920 + t1923 + t1926) * MDP(10) + (-t1697 * t1872 - t1699 * t1871 - t1701 * t1870 - t1703 * t1869) * MDP(11)) * t2108; (t1681 * t2085 + t1682 * t2082 + t1683 * t2079 + t1684 * t2076 + t1882) * MDP(10) + (t1685 * t2085 + t1686 * t2082 + t1687 * t2079 + t1688 * t2076 + t1820 * t1798) * MDP(11) + t1835; (t1667 * t1995 + t1668 * t1994 + t1669 * t1993 + t1670 * t1992) * t2107 + (t1697 * t2014 + t1699 * t2010 + t1701 * t2006 + t1703 * t2002 + (t1723 * t1942 + t1724 * t1941 + t1725 * t1940 + t1726 * t1939) * t1798) * MDP(3) + (-t1667 * t1697 - t1668 * t1699 - t1669 * t1701 - t1670 * t1703 + (-t1723 * t2097 - t1724 * t2095 - t1725 * t2094 - t1726 * t2093) * t1798) * MDP(4) + (t1723 * t1938 + t1724 * t1936 + t1725 * t1934 + t1726 * t1932) * t2103 + (t1723 * t2015 + t1724 * t2011 + t1725 * t2007 + t1726 * t2003) * t2021 + (t1697 * t1937 + t1699 * t1935 + t1701 * t1933 + t1703 * t1931 + (t1723 * t2019 + t1724 * t2018 + t1725 * t2017 + t1726 * t2016) * t1798) * MDP(10) + (-t1697 * t1886 - t1699 * t1885 - t1701 * t1884 - t1703 * t1883 + (-t1723 * t1876 - t1724 * t1875 - t1725 * t1874 - t1726 * t1873) * t1798) * MDP(11) + t2110; t1834 + (t1881 + (t1698 * t1902 + t1700 * t1889 + t1702 * t1888 + t1704 * t1887 - t1698 - t1700 - t1702 - t1704) * t1798) * MDP(11) + ((-t1704 + t1844) * t2028 + (-t1702 + t1845) * t2031 + (-t1700 + t1846) * t2034 + (-t1698 + t1847) * t2058) * t2099; t1882 * MDP(10) + ((-t1697 * t2058 - t1699 * t2034 - t1701 * t2031 - t1703 * t2028 - t1741 * t1925 - t1758 * t1922 - t1763 * t1919 - t1768 * t1916) * MDP(10) + (t1697 * t1902 + t1699 * t1889 + t1701 * t1888 + t1703 * t1887 - t1697 - t1699 - t1701 - t1703 + t1820) * MDP(11)) * t1798 + t1835; (t1957 + t1965 + t1973 + t1983) * MDP(1) + (t1681 * t1981 + t1682 * t1971 + t1683 * t1963 + t1684 * t1955) * MDP(10) + (t1685 * t1981 + t1686 * t1971 + t1687 * t1963 + t1688 * t1955) * MDP(11) + MDP(15) + ((-t1887 - t1888 - t1889 - t1902 - t2041 - t2048 - t2055 - t2065) * MDP(10) + (t1824 - t2028 - t2031 - t2034 - t2058) * MDP(11) + 0.2e1 * (-t1734 * t1978 - t1743 * t1968 - t1747 * t1960 - t1751 * t1952) * MDP(3) + 0.2e1 * t1823 * MDP(4)) * t1798 + ((t1734 * t1976 + t1743 * t1966 + t1747 * t1958 + t1751 * t1950) * MDP(2) + (t1734 ^ 2 * t1976 + t1743 ^ 2 * t1966 + t1747 ^ 2 * t1958 + t1751 ^ 2 * t1950) * MDP(5) + (t1738 + t1755 + t1760 + t1765) * MDP(9) + t1824 * t2109 - 0.2e1 * t1823 * MDP(7) + 0.2e1 * (-t1735 * t1974 - t1744 * t1948 - t1748 * t1946 - t1752 * t1944) * MDP(8)) * t1799; t2112 + (-t1738 * t1886 - t1755 * t1885 - t1760 * t1884 - t1765 * t1883) * t2107 + (t1737 * t1886 + t1754 * t1885 + t1759 * t1884 + t1764 * t1883) * MDP(3) - t1825 * MDP(4) + (-t1733 * t1738 * t2014 - t1742 * t1755 * t2010 - t1746 * t1760 * t2006 - t1750 * t1765 * t2002) * t2103 + (t1886 + t1885 + t1884 + t1883) * MDP(10) + (t2021 + MDP(11)) * (-t1772 * t1938 - t1784 * t1936 - t1786 * t1934 - t1788 * t1932) + ((-t1741 * t1880 * t1980 - t1758 * t1879 * t1970 - t1763 * t1878 * t1962 - t1768 * t1877 * t1954) * MDP(3) + (t1877 * t1944 + t1878 * t1946 + t1879 * t1948 + t1880 * t1974) * MDP(4) + t1825 * MDP(7) + (t1667 + t1668 + t1669 + t1670) * MDP(8) + (t1848 * t1877 + t1849 * t1878 + t1850 * t1879 + t1851 * t1880) * MDP(10) + (t1852 * t1877 + t1853 * t1878 + t1854 * t1879 + t1855 * t1880) * MDP(11)) * t1798; (-t1673 * t1990 - t1674 * t1988 - t1675 * t1986 - t1676 * t1984) * t2106 + (-t1737 * t1832 - t1754 * t1830 - t1759 * t1828 - t1764 * t1826) * t2105 + ((-t1676 * t2075 + t1730 * t1877) * t1764 + (-t1675 * t2078 + t1729 * t1878) * t1759 + (-t1674 * t2081 + t1728 * t1879) * t1754 + (-t1673 * t2084 + t1727 * t1880) * t1737) * t2104 + (-t1673 * t1914 - t1674 * t1912 - t1675 * t1910 - t1676 * t1908) * t2102 + (-t1673 * t1913 - t1674 * t1911 - t1675 * t1909 - t1676 * t1907) * t2020 + (-t1826 - t1828 - t1830 - t1832) * t2099 + (t1836 * t1945 + t1838 * t1947 + t1840 * t1949 + t1842 * t1975) * t2098 + t2111; (t1927 + t1928 + t1929 + t1930) * t2106 + (t1737 * t1833 + t1754 * t1831 + t1759 * t1829 + t1764 * t1827) * t2105 + ((-t1676 * t2076 - t1726 * t1877) * t1764 + (-t1675 * t2079 - t1725 * t1878) * t1759 + (-t1674 * t2082 - t1724 * t1879) * t1754 + (-t1673 * t2085 - t1723 * t1880) * t1737) * t2104 + (t1734 * t1930 + t1743 * t1929 + t1747 * t1928 + t1751 * t1927) * t2102 + (t1953 * t2113 + t1961 * t2114 + t1969 * t2115 + t1979 * t2116) * t2020 + (t1827 + t1829 + t1831 + t1833) * t2099 + (-t1837 * t1945 - t1839 * t1947 - t1841 * t1949 - t1843 * t1975) * t2098 + t2110; t2112 + (-t1673 * t1903 - t1674 * t1898 - t1675 * t1894 - t1676 * t1890) * t2106 + ((t1676 * t2035 - t1877 * t2039) * t2027 + (t1675 * t2042 - t1878 * t2046) * t2030 + (t1674 * t2049 - t1879 * t2053) * t2033 + (t1673 * t2059 - t1880 * t2063) * t2057) * t2105 + ((-t1676 * t1752 + t1788 * t1877) * t2027 + (-t1675 * t1748 + t1786 * t1878) * t2030 + (-t1674 * t1744 + t1784 * t1879) * t2033 + (-t1673 * t1735 + t1772 * t1880) * t2057) * t2104 + (-t1673 * t1906 - t1674 * t1901 - t1675 * t1897 - t1676 * t1893) * t2102 + t1821 * t2020 + (t1673 * t1980 + t1674 * t1970 + t1675 * t1962 + t1676 * t1954) * t2101 + (t1996 + t1997 + t1998 + t1999) * t2100 + (t1880 * t1681 + t1879 * t1682 + t1878 * t1683 + t1877 * t1684 + (t1673 * t1904 + t1674 * t1899 + t1675 * t1895 + t1676 * t1891) * t1798) * MDP(10) + (t1685 * t1880 + t1686 * t1879 + t1687 * t1878 + t1688 * t1877 + t1798 * t1821) * MDP(11); (t1877 ^ 2 + t1878 ^ 2 + t1879 ^ 2 + t1880 ^ 2) * MDP(1) + (t1667 * t1999 + t1668 * t1998 + t1669 * t1997 + t1670 * t1996) * t2107 + (t1880 * t2089 + t1879 * t2088 + t1878 * t2087 + t1877 * t2086 + (t1673 * t1942 + t1674 * t1941 + t1675 * t1940 + t1676 * t1939) * t1798) * MDP(3) + (-t1880 * t1667 * t1770 - t1879 * t1668 * t1778 - t1878 * t1669 * t1780 - t1877 * t1670 * t1782 + (-t1673 * t2097 - t1674 * t2095 - t1675 * t2094 - t1676 * t2093) * t1798) * MDP(4) + (t1673 * t1938 + t1674 * t1936 + t1675 * t1934 + t1676 * t1932) * t2103 + (t1673 * t2015 + t1674 * t2011 + t1675 * t2007 + t1676 * t2003) * t2021 + (t1880 * t2012 + t1879 * t2008 + t1878 * t2004 + t1877 * t2000 + (t1673 * t2019 + t1674 * t2018 + t1675 * t2017 + t1676 * t2016) * t1798) * MDP(10) + (-t1880 * t2013 - t1879 * t2009 - t1878 * t2005 - t1877 * t2001 + (-t1673 * t1876 - t1674 * t1875 - t1675 * t1874 - t1676 * t1873) * t1798) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_4_matlab.m
res = [t1(1), t1(2), t1(3), t1(4); t1(5), t1(6), t1(7), t1(8); t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16);];
MMX  = res;
