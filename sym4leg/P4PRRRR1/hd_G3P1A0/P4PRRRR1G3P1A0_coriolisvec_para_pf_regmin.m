% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR1G3P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-02 19:06
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR1G3P1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR1G3P1A0_coriolisvec_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR1G3P1A0_coriolisvec_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR1G3P1A0_coriolisvec_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4PRRRR1G3P1A0_coriolisvec_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR1G3P1A0_coriolisvec_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR1G3P1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-02 19:05:23
% EndTime: 2020-03-02 19:05:33
% DurationCPUTime: 10.26s
% Computational Cost: add. (5797->374), mult. (15512->808), div. (3896->22), fcn. (11996->26), ass. (0->332)
t922 = cos(qJ(2,4));
t940 = xDP(3);
t1120 = t922 * t940;
t943 = xP(4);
t871 = sin(t943);
t872 = cos(t943);
t944 = koppelP(4,2);
t948 = koppelP(4,1);
t851 = t871 * t948 + t872 * t944;
t855 = -t871 * t944 + t872 * t948;
t923 = legFrame(4,2);
t863 = sin(t923);
t867 = cos(t923);
t839 = t851 * t867 + t863 * t855;
t919 = sin(qJ(3,4));
t921 = cos(qJ(3,4));
t939 = xDP(4);
t941 = xDP(2);
t942 = xDP(1);
t832 = (t839 * t939 + t863 * t941 - t942 * t867) * t921 - t919 * t1120;
t827 = t832 ^ 2;
t920 = sin(qJ(2,4));
t876 = 0.1e1 / t920 ^ 2;
t1183 = t827 * t876;
t934 = cos(qJ(2,3));
t1113 = t934 * t940;
t945 = koppelP(3,2);
t949 = koppelP(3,1);
t852 = t871 * t949 + t872 * t945;
t856 = -t871 * t945 + t872 * t949;
t924 = legFrame(3,2);
t864 = sin(t924);
t868 = cos(t924);
t840 = t852 * t868 + t864 * t856;
t927 = sin(qJ(3,3));
t933 = cos(qJ(3,3));
t836 = (t840 * t939 + t864 * t941 - t942 * t868) * t933 - t927 * t1113;
t829 = t836 ^ 2;
t928 = sin(qJ(2,3));
t887 = 0.1e1 / t928 ^ 2;
t1182 = t829 * t887;
t936 = cos(qJ(2,2));
t1112 = t936 * t940;
t946 = koppelP(2,2);
t950 = koppelP(2,1);
t853 = t871 * t950 + t872 * t946;
t857 = -t871 * t946 + t872 * t950;
t925 = legFrame(2,2);
t865 = sin(t925);
t869 = cos(t925);
t841 = t853 * t869 + t857 * t865;
t929 = sin(qJ(3,2));
t935 = cos(qJ(3,2));
t837 = (t841 * t939 + t865 * t941 - t942 * t869) * t935 - t929 * t1112;
t830 = t837 ^ 2;
t930 = sin(qJ(2,2));
t892 = 0.1e1 / t930 ^ 2;
t1181 = t830 * t892;
t938 = cos(qJ(2,1));
t1111 = t938 * t940;
t947 = koppelP(1,2);
t951 = koppelP(1,1);
t854 = t871 * t951 + t872 * t947;
t858 = -t871 * t947 + t872 * t951;
t926 = legFrame(1,2);
t866 = sin(t926);
t870 = cos(t926);
t842 = t854 * t870 + t858 * t866;
t931 = sin(qJ(3,1));
t937 = cos(qJ(3,1));
t838 = (t842 * t939 + t866 * t941 - t942 * t870) * t937 - t931 * t1111;
t831 = t838 ^ 2;
t932 = sin(qJ(2,1));
t897 = 0.1e1 / t932 ^ 2;
t1180 = t831 * t897;
t895 = t931 ^ 2;
t896 = 0.1e1 / t932;
t981 = t937 ^ 2;
t912 = 0.1e1 / t981;
t914 = 0.1e1 / t981 ^ 2;
t990 = (t895 * t914 + t912) * t896;
t890 = t929 ^ 2;
t891 = 0.1e1 / t930;
t977 = t935 ^ 2;
t906 = 0.1e1 / t977;
t908 = 0.1e1 / t977 ^ 2;
t991 = (t890 * t908 + t906) * t891;
t885 = t927 ^ 2;
t886 = 0.1e1 / t928;
t973 = t933 ^ 2;
t900 = 0.1e1 / t973;
t902 = 0.1e1 / t973 ^ 2;
t992 = (t885 * t902 + t900) * t886;
t874 = t919 ^ 2;
t875 = 0.1e1 / t920;
t960 = t921 ^ 2;
t879 = 0.1e1 / t960;
t881 = 0.1e1 / t960 ^ 2;
t993 = (t874 * t881 + t879) * t875;
t952 = 0.1e1 / pkin(2);
t878 = 0.1e1 / t921;
t899 = 0.1e1 / t933;
t905 = 0.1e1 / t935;
t911 = 0.1e1 / t937;
t953 = 0.1e1 / pkin(2) ^ 2;
t1150 = t876 * t953;
t1059 = t881 * t1150;
t1151 = t875 * t922;
t1069 = t832 * t1151;
t1110 = t940 * t952;
t1122 = t919 * t920;
t1153 = t875 * t878;
t880 = t878 * t879;
t917 = t939 ^ 2;
t803 = -(-t940 * t1122 + t1069) * t832 * t1059 + (-(-t832 * t919 + t1120) * t880 * t1110 + (-t851 * t863 + t855 * t867) * t917) * t952 * t1153;
t1179 = t803 * t922;
t1143 = t887 * t953;
t1054 = t902 * t1143;
t1144 = t886 * t934;
t1067 = t836 * t1144;
t1119 = t927 * t928;
t1146 = t886 * t899;
t901 = t899 * t900;
t804 = -(-t940 * t1119 + t1067) * t836 * t1054 + (-(-t836 * t927 + t1113) * t901 * t1110 + (-t852 * t864 + t856 * t868) * t917) * t952 * t1146;
t1178 = t804 * t934;
t1139 = t892 * t953;
t1050 = t908 * t1139;
t1140 = t891 * t936;
t1065 = t837 * t1140;
t1117 = t929 * t930;
t1142 = t891 * t905;
t907 = t905 * t906;
t805 = -(-t940 * t1117 + t1065) * t837 * t1050 + (-(-t837 * t929 + t1112) * t907 * t1110 + (-t853 * t865 + t857 * t869) * t917) * t952 * t1142;
t1177 = t805 * t936;
t1135 = t897 * t953;
t1046 = t914 * t1135;
t1136 = t896 * t938;
t1063 = t838 * t1136;
t1115 = t931 * t932;
t1138 = t896 * t911;
t913 = t911 * t912;
t806 = -(-t940 * t1115 + t1063) * t838 * t1046 + (-(-t838 * t931 + t1111) * t913 * t1110 + (-t854 * t866 + t858 * t870) * t917) * t952 * t1138;
t1176 = t806 * t938;
t918 = t940 ^ 2;
t1125 = t918 * t952;
t1167 = t875 * t1183;
t843 = -t863 * t922 + t867 * t920;
t844 = t863 * t920 + t867 * t922;
t815 = t880 * t952 * t1167 + (t880 * t1125 + (-t843 * t851 - t844 * t855) * t917) * t875;
t1175 = t815 * t875;
t1174 = t815 * t878;
t1165 = t886 * t1182;
t845 = -t864 * t934 + t868 * t928;
t846 = t864 * t928 + t868 * t934;
t816 = t901 * t952 * t1165 + (t901 * t1125 + (-t845 * t852 - t846 * t856) * t917) * t886;
t1173 = t816 * t886;
t1172 = t816 * t899;
t1163 = t891 * t1181;
t847 = -t865 * t936 + t869 * t930;
t848 = t865 * t930 + t869 * t936;
t817 = t907 * t952 * t1163 + (t907 * t1125 + (-t847 * t853 - t848 * t857) * t917) * t891;
t1171 = t817 * t891;
t1170 = t817 * t905;
t1161 = t896 * t1180;
t849 = -t866 * t938 + t870 * t932;
t850 = t866 * t932 + t870 * t938;
t818 = t913 * t952 * t1161 + (t913 * t1125 + (-t849 * t854 - t850 * t858) * t917) * t896;
t1169 = t818 * t896;
t1168 = t818 * t911;
t1166 = t827 * t881;
t1164 = t829 * t902;
t1162 = t830 * t908;
t1160 = t831 * t914;
t1159 = t832 * t876;
t1158 = t836 * t887;
t1157 = t837 * t892;
t1156 = t838 * t897;
t1155 = t871 * t917;
t1154 = t872 * t917;
t1152 = t875 * t922 ^ 2;
t1149 = t878 * t919;
t1148 = t880 * t919;
t1147 = t881 * t922;
t1145 = t886 * t934 ^ 2;
t1141 = t891 * t936 ^ 2;
t1137 = t896 * t938 ^ 2;
t1134 = t899 * t927;
t1133 = t901 * t927;
t1132 = t902 * t934;
t1131 = t905 * t929;
t1130 = t907 * t929;
t1129 = t908 * t936;
t1128 = t911 * t931;
t1127 = t913 * t931;
t1126 = t914 * t938;
t1124 = t918 * t953;
t954 = t952 * t953;
t1123 = t918 * t954;
t1121 = t919 * t922;
t1118 = t927 * t934;
t1116 = t929 * t936;
t1114 = t931 * t938;
t1109 = t940 * t954;
t1042 = t920 * t1124;
t823 = t827 * t1059;
t819 = t879 * t1124 + t823;
t1099 = -0.2e1 * t940 * t953;
t989 = t1069 * t1099;
t1108 = -t874 * t880 * t1042 + t989 * t1148 + (-t819 * t920 + t1179) * t921;
t1041 = t928 * t1124;
t824 = t829 * t1054;
t820 = t900 * t1124 + t824;
t988 = t1067 * t1099;
t1107 = -t885 * t901 * t1041 + t988 * t1133 + (-t820 * t928 + t1178) * t933;
t1040 = t930 * t1124;
t825 = t830 * t1050;
t821 = t906 * t1124 + t825;
t987 = t1065 * t1099;
t1106 = -t890 * t907 * t1040 + t987 * t1130 + (-t821 * t930 + t1177) * t935;
t1039 = t932 * t1124;
t826 = t831 * t1046;
t822 = t912 * t1124 + t826;
t986 = t1063 * t1099;
t1105 = -t895 * t913 * t1039 + t986 * t1127 + (-t822 * t932 + t1176) * t937;
t1104 = t819 * t1122 + t879 * t989 + (-t879 * t1042 - t1179) * t919;
t1103 = t820 * t1119 + t900 * t988 + (-t900 * t1041 - t1178) * t927;
t1102 = t821 * t1117 + t906 * t987 + (-t906 * t1040 - t1177) * t929;
t1101 = t822 * t1115 + t912 * t986 + (-t912 * t1039 - t1176) * t931;
t1100 = 0.2e1 * t940;
t1098 = t803 * t1153;
t1097 = t803 * t875 * t919;
t1096 = t803 * t1151;
t1095 = t804 * t1146;
t1094 = t804 * t886 * t927;
t1093 = t804 * t1144;
t1092 = t805 * t1142;
t1091 = t805 * t891 * t929;
t1090 = t805 * t1140;
t1089 = t806 * t1138;
t1088 = t806 * t896 * t931;
t1087 = t806 * t1136;
t1086 = t815 * t1151;
t1085 = t815 * t1149;
t1084 = t816 * t1144;
t1083 = t816 * t1134;
t1082 = t817 * t1140;
t1081 = t817 * t1131;
t1080 = t818 * t1136;
t1079 = t818 * t1128;
t1078 = t876 * t1166;
t1077 = t919 * t1183;
t1076 = t887 * t1164;
t1075 = t927 * t1182;
t1074 = t892 * t1162;
t1073 = t929 * t1181;
t1072 = t897 * t1160;
t1071 = t931 * t1180;
t1070 = (-0.1e1 + 0.2e1 * t960) * t1159;
t1068 = (-0.1e1 + 0.2e1 * t973) * t1158;
t1066 = (-0.1e1 + 0.2e1 * t977) * t1157;
t1064 = (-0.1e1 + 0.2e1 * t981) * t1156;
t1062 = t878 * t1151;
t1061 = t879 * t1152;
t1060 = t876 * t1147;
t882 = t878 * t881;
t1058 = t882 * t1121;
t1057 = t899 * t1144;
t1056 = t900 * t1145;
t1055 = t887 * t1132;
t1053 = t905 * t1140;
t1052 = t906 * t1141;
t1051 = t892 * t1129;
t1049 = t911 * t1136;
t1048 = t912 * t1137;
t1047 = t897 * t1126;
t903 = t899 * t902;
t1045 = t903 * t1118;
t909 = t905 * t908;
t1044 = t909 * t1116;
t915 = t911 * t914;
t1043 = t915 * t1114;
t1038 = t886 * t1103;
t1037 = t1108 * t875;
t1036 = t1107 * t886;
t1035 = t1106 * t891;
t1034 = t1105 * t896;
t1033 = t1104 * t875;
t1032 = t1102 * t891;
t1031 = t1101 * t896;
t1030 = t954 * t1100;
t1025 = t874 * t1098;
t1024 = t879 * t1096;
t1023 = t885 * t1095;
t1022 = t900 * t1093;
t1021 = t890 * t1092;
t1020 = t906 * t1090;
t1019 = t895 * t1089;
t1018 = t912 * t1087;
t1017 = t815 * t1062;
t1016 = t816 * t1057;
t1015 = t817 * t1053;
t1014 = t818 * t1049;
t1013 = t1147 * t1167;
t1012 = t1132 * t1165;
t1011 = t1129 * t1163;
t1010 = t1126 * t1161;
t1009 = t881 * t1070;
t1008 = t1148 * t1159;
t1007 = t902 * t1068;
t1006 = t1133 * t1158;
t1005 = t908 * t1066;
t1004 = t1130 * t1157;
t1003 = t914 * t1064;
t1002 = t1127 * t1156;
t1001 = t919 * t1062;
t1000 = t927 * t1057;
t999 = t929 * t1053;
t998 = t931 * t1049;
t997 = t815 * t1001;
t996 = t816 * t1000;
t995 = t817 * t999;
t994 = t818 * t998;
t985 = t806 * t1128 + t805 * t1131 + t804 * t1134 + t803 * t1149;
t894 = t931 * t895;
t889 = t929 * t890;
t884 = t927 * t885;
t873 = t919 * t874;
t835 = (t849 * t858 - t850 * t854) * t896;
t834 = (t847 * t857 - t848 * t853) * t891;
t833 = (t845 * t856 - t846 * t852) * t886;
t828 = (t843 * t855 - t844 * t851) * t875;
t1 = [t850 * t1169 + t848 * t1171 + t846 * t1173 + t844 * t1175, (-t1089 * t870 - t1092 * t869 - t1095 * t868 - t1098 * t867) * t952, t844 * t1096 + t846 * t1093 + t848 * t1090 + t850 * t1087 + (-t1072 * t850 - t1074 * t848 - t1076 * t846 - t1078 * t844) * t953 + (-t1014 * t870 - t1015 * t869 - t1016 * t868 - t1017 * t867) * t952, -t844 * t803 - t846 * t804 - t848 * t805 - t850 * t806 + (-t1010 * t850 - t1011 * t848 - t1012 * t846 - t1013 * t844) * t953 + (t870 * t1168 + t869 * t1170 + t868 * t1172 + t867 * t1174) * t952, (-t1019 * t870 - t1021 * t869 - t1023 * t868 - t1025 * t867) * t952 + (-t1002 * t870 - t1004 * t869 - t1006 * t868 - t1008 * t867) * t1030, 0.2e1 * (-t1088 * t870 - t1091 * t869 - t1094 * t868 - t1097 * t867) * t952 + 0.2e1 * (-t1003 * t870 - t1005 * t869 - t1007 * t868 - t1009 * t867) * t1109, (-t867 * t993 - t868 * t992 - t869 * t991 - t870 * t990) * t1123, 0, 0, t850 * t1034 + t848 * t1035 + t846 * t1036 + t844 * t1037 + (-t1080 * t870 - t1082 * t869 - t1084 * t868 - t1086 * t867) * t952, t850 * t1031 + t848 * t1032 + t846 * t1038 + t844 * t1033 + (t867 * t997 + t868 * t996 + t869 * t995 + t870 * t994) * t952, 0, -t1154, t1155, 0; t849 * t1169 + t847 * t1171 + t845 * t1173 + t843 * t1175, (t1089 * t866 + t1092 * t865 + t1095 * t864 + t1098 * t863) * t952, t843 * t1096 + t845 * t1093 + t847 * t1090 + t849 * t1087 + (-t1072 * t849 - t1074 * t847 - t1076 * t845 - t1078 * t843) * t953 + (t1014 * t866 + t1015 * t865 + t1016 * t864 + t1017 * t863) * t952, -t843 * t803 - t845 * t804 - t847 * t805 - t849 * t806 + (-t1010 * t849 - t1011 * t847 - t1012 * t845 - t1013 * t843) * t953 + (-t866 * t1168 - t865 * t1170 - t864 * t1172 - t863 * t1174) * t952, (t1019 * t866 + t1021 * t865 + t1023 * t864 + t1025 * t863) * t952 + (t1002 * t866 + t1004 * t865 + t1006 * t864 + t1008 * t863) * t1030, 0.2e1 * (t1088 * t866 + t1091 * t865 + t1094 * t864 + t1097 * t863) * t952 + 0.2e1 * (t1003 * t866 + t1005 * t865 + t1007 * t864 + t1009 * t863) * t1109, (t863 * t993 + t864 * t992 + t865 * t991 + t866 * t990) * t1123, 0, 0, t849 * t1034 + t847 * t1035 + t845 * t1036 + t843 * t1037 + (t1080 * t866 + t1082 * t865 + t1084 * t864 + t1086 * t863) * t952, t849 * t1031 + t847 * t1032 + t845 * t1038 + t843 * t1033 + (-t863 * t997 - t864 * t996 - t865 * t995 - t866 * t994) * t952, 0, -t1155, -t1154, 0; t896 * t1079 + t891 * t1081 + t886 * t1083 + t875 * t1085, (-t1018 * t931 - t1020 * t929 - t1022 * t927 - t1024 * t919) * t952, t803 * t1001 + t804 * t1000 + t805 * t999 + t806 * t998 + (-t1071 * t915 - t1073 * t909 - t1075 * t903 - t1077 * t882) * t953 + (-t1048 * t818 * t931 - t1052 * t817 * t929 - t1056 * t816 * t927 - t1061 * t815 * t919) * t952, (-t1043 * t1161 - t1044 * t1163 - t1045 * t1165 - t1058 * t1167) * t953 + (t1114 * t818 * t912 + t1116 * t817 * t906 + t1118 * t816 * t900 + t1121 * t815 * t879) * t952 - t985, (-t1018 * t894 - t1020 * t889 - t1022 * t884 - t1024 * t873) * t952 + (-t881 * t1077 - t902 * t1075 - t908 * t1073 - t914 * t1071 + (-t1047 * t838 * t895 - t1051 * t837 * t890 - t1055 * t836 * t885 - t1060 * t832 * t874) * t1100) * t954, (-t1043 * t1064 - t1044 * t1066 - t1045 * t1068 - t1058 * t1070) * t1030 + ((-0.2e1 * t1135 * t831 * t912 - 0.2e1 * t1087 * t895 + t826) * t911 + (-0.2e1 * t830 * t906 * t1139 - 0.2e1 * t1090 * t890 + t825) * t905 + (-0.2e1 * t900 * t829 * t1143 - 0.2e1 * t1093 * t885 + t824) * t899 + (-0.2e1 * t827 * t879 * t1150 - 0.2e1 * t1096 * t874 + t823) * t878) * t952, t985 * t952 + ((-t894 * t915 - t1127) * t1136 + (-t889 * t909 - t1130) * t1140 + (-t884 * t903 - t1133) * t1144 + (-t873 * t882 - t1148) * t1151) * t1123, (t803 + t804 + t805 + t806) * t952, (t881 * t919 + t902 * t927 + t908 * t929 + t914 * t931) * t1123, t1034 * t1128 + t1035 * t1131 + t1036 * t1134 + t1037 * t1149 + ((-t932 - t1137) * t1079 + (-t930 - t1141) * t1081 + (-t928 - t1145) * t1083 + (-t920 - t1152) * t1085) * t952, t1031 * t1128 + t1032 * t1131 + t1038 * t1134 + t1033 * t1149 + ((t1048 * t895 - t932) * t818 + (t1052 * t890 - t930) * t817 + (t1056 * t885 - t928) * t816 + (t1061 * t874 - t920) * t815) * t952, 0, 0, 0, 0; t815 * t828 + t816 * t833 + t817 * t834 + t818 * t835, (t1089 * t842 + t1092 * t841 + t1095 * t840 + t1098 * t839) * t952, t828 * t1179 + t833 * t1178 + t834 * t1177 + t835 * t1176 + (-t835 * t896 * t1160 - t834 * t891 * t1162 - t833 * t886 * t1164 - t828 * t875 * t1166) * t953 + (t1014 * t842 + t1015 * t841 + t1016 * t840 + t1017 * t839) * t952, -t828 * t803 * t920 - t833 * t804 * t928 - t834 * t805 * t930 - t835 * t806 * t932 + (-t1047 * t831 * t835 - t1051 * t830 * t834 - t1055 * t829 * t833 - t1060 * t827 * t828) * t953 + (-t842 * t1168 - t841 * t1170 - t840 * t1172 - t839 * t1174) * t952, (t1019 * t842 + t1021 * t841 + t1023 * t840 + t1025 * t839) * t952 + (t1002 * t842 + t1004 * t841 + t1006 * t840 + t1008 * t839) * t1030, 0.2e1 * (t1088 * t842 + t1091 * t841 + t1094 * t840 + t1097 * t839) * t952 + 0.2e1 * (t1003 * t842 + t1005 * t841 + t1007 * t840 + t1009 * t839) * t1109, (t839 * t993 + t840 * t992 + t841 * t991 + t842 * t990) * t1123, 0, 0, t1105 * t835 + t1106 * t834 + t1107 * t833 + t1108 * t828 + (t1080 * t842 + t1082 * t841 + t1084 * t840 + t1086 * t839) * t952, t1101 * t835 + t1102 * t834 + t1103 * t833 + t1104 * t828 + (-t839 * t997 - t840 * t996 - t841 * t995 - t842 * t994) * t952, 0, 0, 0, 0;];
tau_reg  = t1;
