% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:04:36
% EndTime: 2020-08-07 11:04:57
% DurationCPUTime: 22.58s
% Computational Cost: add. (106883->645), mult. (255232->1386), div. (10224->22), fcn. (198816->30), ass. (0->631)
t1951 = xP(4);
t1901 = sin(t1951);
t1902 = cos(t1951);
t1953 = koppelP(3,2);
t1957 = koppelP(3,1);
t1866 = t1901 * t1957 + t1902 * t1953;
t1870 = -t1901 * t1953 + t1902 * t1957;
t1932 = legFrame(3,2);
t1894 = sin(t1932);
t1898 = cos(t1932);
t1947 = xDP(4);
t1949 = xDP(2);
t1950 = xDP(1);
t1770 = (-t1866 * t1947 + t1950) * t1898 - t1894 * (t1870 * t1947 + t1949);
t1924 = sin(pkin(6));
t1948 = xDP(3);
t2291 = t1948 * t1924;
t2402 = cos(pkin(6));
t1762 = t1770 * t2402 - t2291;
t1888 = t1948 * t2402;
t1766 = t1770 * t1924 + t1888;
t1936 = sin(qJ(2,3));
t1942 = cos(qJ(2,3));
t1926 = cos(pkin(3));
t2312 = t1926 * t1942;
t2317 = t1926 * t1936;
t1941 = cos(qJ(3,3));
t2405 = pkin(2) * t1941;
t1732 = -(t1936 * t1762 + t1766 * t2312) * t2405 + pkin(5) * (t1942 * t1762 - t1766 * t2317);
t1912 = 0.1e1 / t1941;
t1960 = pkin(5) ^ 2;
t1961 = pkin(2) ^ 2;
t1935 = sin(qJ(3,3));
t2301 = t1936 * t1941;
t1875 = pkin(2) * t2301 - t1942 * pkin(5);
t1925 = sin(pkin(3));
t2318 = t1926 * t1935;
t2181 = pkin(2) * t2318 + t1875 * t1925;
t2428 = 0.1e1 / t2181;
t2351 = t2428 * t1935;
t2220 = t1912 * t2351;
t2309 = t1926 * t1948;
t2324 = t1925 * t1941;
t1748 = ((-t1770 * t2317 - t1942 * t1948) * t1924 + (t1770 * t1942 - t1936 * t2309) * t2402) * t1935 - t1766 * t2324;
t2360 = t1748 * t2428;
t1712 = -pkin(5) * t1732 * t2220 + (t1912 * t1960 + t1941 * t1961) * t2360;
t2281 = pkin(5) * t2360;
t2177 = t1935 * t2281;
t2376 = t1732 * t2428;
t1717 = (t2177 - t2376) * t1912;
t1878 = pkin(5) * t1936 + t1942 * t2405;
t2204 = t1925 * t2402;
t2174 = pkin(2) * t2204;
t2203 = t1926 * t2402;
t1773 = -t1875 * t2203 - t1924 * t1878 + t1935 * t2174;
t1753 = t1773 * t1894 + t1898 * t2181;
t1754 = -t1773 * t1898 + t1894 * t2181;
t1923 = t1947 ^ 2;
t2352 = t2428 * t1912;
t2429 = 0.1e1 / t2181 ^ 2;
t2375 = t1732 * t2429;
t1700 = -t1717 * t1912 * t2375 + (t1712 * t1748 * t2352 + (-t1753 * t1866 - t1754 * t1870) * t1923) * t2428;
t2389 = t1700 * t2428;
t1954 = koppelP(2,2);
t1958 = koppelP(2,1);
t1867 = t1901 * t1958 + t1902 * t1954;
t1871 = -t1901 * t1954 + t1902 * t1958;
t1933 = legFrame(2,2);
t1895 = sin(t1933);
t1899 = cos(t1933);
t1767 = (-t1867 * t1947 + t1950) * t1899 - t1895 * (t1871 * t1947 + t1949);
t1759 = t1767 * t2402 - t2291;
t1763 = t1767 * t1924 + t1888;
t1938 = sin(qJ(2,2));
t1944 = cos(qJ(2,2));
t2311 = t1926 * t1944;
t2315 = t1926 * t1938;
t1943 = cos(qJ(3,2));
t2404 = pkin(2) * t1943;
t1733 = -(t1938 * t1759 + t1763 * t2311) * t2404 + pkin(5) * (t1944 * t1759 - t1763 * t2315);
t1916 = 0.1e1 / t1943;
t1937 = sin(qJ(3,2));
t2298 = t1938 * t1943;
t1876 = pkin(2) * t2298 - t1944 * pkin(5);
t2316 = t1926 * t1937;
t2180 = pkin(2) * t2316 + t1876 * t1925;
t2430 = 0.1e1 / t2180;
t2348 = t2430 * t1937;
t2217 = t1916 * t2348;
t2323 = t1925 * t1943;
t1749 = ((-t1767 * t2315 - t1944 * t1948) * t1924 + (t1767 * t1944 - t1938 * t2309) * t2402) * t1937 - t1763 * t2323;
t2359 = t1749 * t2430;
t1713 = -pkin(5) * t1733 * t2217 + (t1916 * t1960 + t1943 * t1961) * t2359;
t2280 = pkin(5) * t2359;
t2176 = t1937 * t2280;
t2374 = t1733 * t2430;
t1718 = (t2176 - t2374) * t1916;
t1879 = pkin(5) * t1938 + t1944 * t2404;
t1774 = -t1876 * t2203 - t1924 * t1879 + t1937 * t2174;
t1755 = t1774 * t1895 + t1899 * t2180;
t1756 = -t1774 * t1899 + t1895 * t2180;
t2349 = t2430 * t1916;
t2431 = 0.1e1 / t2180 ^ 2;
t2373 = t1733 * t2431;
t1701 = -t1718 * t1916 * t2373 + (t1713 * t1749 * t2349 + (-t1755 * t1867 - t1756 * t1871) * t1923) * t2430;
t2388 = t1701 * t2430;
t1931 = legFrame(4,2);
t1893 = sin(t1931);
t1930 = cos(qJ(2,4));
t1928 = sin(qJ(2,4));
t1929 = cos(qJ(3,4));
t2305 = t1928 * t1929;
t1873 = pkin(2) * t2305 - t1930 * pkin(5);
t1927 = sin(qJ(3,4));
t2321 = t1926 * t1927;
t2182 = pkin(2) * t2321 + t1873 * t1925;
t2426 = 0.1e1 / t2182;
t2357 = t2426 * t1893;
t2427 = 0.1e1 / t2182 ^ 2;
t2435 = t2427 * t2426;
t1934 = legFrame(1,2);
t1896 = sin(t1934);
t1946 = cos(qJ(2,1));
t1940 = sin(qJ(2,1));
t1945 = cos(qJ(3,1));
t2295 = t1940 * t1945;
t1877 = pkin(2) * t2295 - t1946 * pkin(5);
t1939 = sin(qJ(3,1));
t2314 = t1926 * t1939;
t2179 = pkin(2) * t2314 + t1877 * t1925;
t2432 = 0.1e1 / t2179;
t2346 = t2432 * t1896;
t2433 = 0.1e1 / t2179 ^ 2;
t2434 = t2433 * t2432;
t1955 = koppelP(1,2);
t1959 = koppelP(1,1);
t1868 = t1901 * t1959 + t1902 * t1955;
t1872 = -t1901 * t1955 + t1902 * t1959;
t1900 = cos(t1934);
t2026 = t1868 * t1900 + t1896 * t1872;
t2425 = 0.2e1 * t2026;
t1952 = koppelP(4,2);
t1956 = koppelP(4,1);
t1865 = t1901 * t1956 + t1902 * t1952;
t1869 = -t1901 * t1952 + t1902 * t1956;
t1897 = cos(t1931);
t2029 = t1865 * t1897 + t1893 * t1869;
t2424 = 0.2e1 * t2029;
t1769 = (-t1865 * t1947 + t1950) * t1897 - t1893 * (t1869 * t1947 + t1949);
t1761 = t1769 * t2402 - t2291;
t1765 = t1769 * t1924 + t1888;
t2319 = t1926 * t1930;
t2320 = t1926 * t1928;
t2406 = pkin(2) * t1929;
t1728 = -(t1928 * t1761 + t1765 * t2319) * t2406 + pkin(5) * (t1761 * t1930 - t1765 * t2320);
t1905 = 0.1e1 / t1929;
t2331 = t1905 * t1927;
t2223 = t2426 * t2331;
t2325 = t1925 * t1929;
t1744 = ((-t1769 * t2320 - t1930 * t1948) * t1924 + (t1769 * t1930 - t1928 * t2309) * t2402) * t1927 - t1765 * t2325;
t2367 = t1744 * t2426;
t1711 = -pkin(5) * t1728 * t2223 + (t1905 * t1960 + t1929 * t1961) * t2367;
t2282 = pkin(5) * t2367;
t2178 = t1927 * t2282;
t2382 = t1728 * t2426;
t1715 = (t2178 - t2382) * t1905;
t1874 = pkin(5) * t1928 + t1930 * t2406;
t1771 = -t1873 * t2203 - t1924 * t1874 + t1927 * t2174;
t1751 = t1771 * t1893 + t1897 * t2182;
t1752 = -t1771 * t1897 + t1893 * t2182;
t2356 = t2426 * t1905;
t2381 = t1728 * t2427;
t1699 = -t1715 * t1905 * t2381 + (t1711 * t1744 * t2356 + (-t1751 * t1865 - t1752 * t1869) * t1923) * t2426;
t2423 = t1699 * t1928;
t1768 = (-t1868 * t1947 + t1950) * t1900 - t1896 * (t1872 * t1947 + t1949);
t1760 = t1768 * t2402 - t2291;
t1764 = t1768 * t1924 + t1888;
t2310 = t1926 * t1946;
t2313 = t1926 * t1940;
t2403 = pkin(2) * t1945;
t1734 = -(t1940 * t1760 + t1764 * t2310) * t2403 + pkin(5) * (t1946 * t1760 - t1764 * t2313);
t1920 = 0.1e1 / t1945;
t2327 = t1920 * t1939;
t2214 = t2432 * t2327;
t2322 = t1925 * t1945;
t1750 = ((-t1768 * t2313 - t1946 * t1948) * t1924 + (t1768 * t1946 - t1940 * t2309) * t2402) * t1939 - t1764 * t2322;
t2358 = t1750 * t2432;
t1714 = -pkin(5) * t1734 * t2214 + (t1920 * t1960 + t1945 * t1961) * t2358;
t2279 = pkin(5) * t2358;
t2175 = t1939 * t2279;
t2371 = t1734 * t2432;
t1719 = (t2175 - t2371) * t1920;
t1880 = pkin(5) * t1940 + t1946 * t2403;
t1775 = -t1877 * t2203 - t1924 * t1880 + t1939 * t2174;
t1757 = t1775 * t1896 + t1900 * t2179;
t1758 = -t1775 * t1900 + t1896 * t2179;
t2345 = t2432 * t1920;
t2370 = t1734 * t2433;
t1702 = -t1719 * t1920 * t2370 + (t1714 * t1750 * t2345 + (-t1757 * t1868 - t1758 * t1872) * t1923) * t2432;
t2422 = t1702 * t1940;
t2385 = t1728 ^ 2 * t2427;
t2421 = t1732 ^ 2 * t2429;
t2420 = t1733 ^ 2 * t2431;
t2378 = t1734 ^ 2 * t2433;
t1904 = t1929 ^ 2;
t1907 = t1905 / t1904;
t2419 = t1907 * t1927;
t1919 = t1945 ^ 2;
t1922 = t1920 / t1919;
t2418 = t1922 * t1939;
t2196 = t2402 * t1944;
t2300 = t1937 * t1938;
t1802 = -t1937 * t2196 + (t1926 * t2300 + t2323) * t1924;
t2094 = 0.2e1 * t2359 * t2373;
t2024 = t1802 * t2094;
t2199 = t2402 * t1938;
t2192 = -pkin(5) * (-t1924 * t2315 + t2196) + (t1924 * t2311 + t2199) * t2404;
t1746 = t1749 ^ 2;
t2364 = t1746 * t2431;
t2248 = t2430 * t2364;
t1917 = 0.1e1 / t1943 ^ 2;
t2328 = t1917 * t1937;
t2417 = (-t2192 * t2248 + t2024) * t2328;
t2197 = t2402 * t1942;
t2303 = t1935 * t1936;
t1801 = -t1935 * t2197 + (t1926 * t2303 + t2324) * t1924;
t2095 = 0.2e1 * t2360 * t2375;
t2025 = t1801 * t2095;
t2200 = t2402 * t1936;
t2193 = -pkin(5) * (-t1924 * t2317 + t2197) + (t1924 * t2312 + t2200) * t2405;
t1745 = t1748 ^ 2;
t2366 = t1745 * t2429;
t2251 = t2428 * t2366;
t1913 = 0.1e1 / t1941 ^ 2;
t2329 = t1913 * t1935;
t2416 = (-t2193 * t2251 + t2025) * t2329;
t2415 = t1923 * (-t1868 * t1896 + t1872 * t1900);
t2414 = t1923 * (-t1867 * t1895 + t1871 * t1899);
t2413 = t1923 * (-t1866 * t1894 + t1870 * t1898);
t2412 = t1923 * (-t1865 * t1893 + t1869 * t1897);
t2202 = t2402 * t1928;
t2001 = -t1924 * t1930 - t1926 * t2202;
t1800 = t2001 * t1927 - t1929 * t2204;
t2411 = 0.2e1 * t1800;
t2198 = t2402 * t1940;
t1998 = -t1924 * t1946 - t1926 * t2198;
t1806 = t1998 * t1939 - t1945 * t2204;
t2410 = 0.2e1 * t1806;
t2201 = t2402 * t1930;
t1853 = -t1924 * t2320 + t2201;
t1807 = -t1853 * t1927 + t1924 * t2325;
t2409 = 0.2e1 * t1807;
t2195 = t2402 * t1946;
t1856 = t1924 * t2313 - t2195;
t1808 = t1856 * t1939 + t1924 * t2322;
t2408 = 0.2e1 * t1808;
t2407 = pkin(2) * t1925;
t1906 = 0.1e1 / t1929 ^ 2;
t1962 = 0.1e1 / pkin(2);
t2354 = t2426 * t1962;
t2222 = t1905 * t2354;
t2066 = t1728 * t1925 * t2222;
t2211 = t1925 * t2305;
t2307 = t1927 * t1928;
t2212 = t1925 * t2307;
t1799 = -t1927 * t2201 + (t1926 * t2307 + t2325) * t1924;
t2230 = t1799 * t2356;
t2308 = t1926 * t1962;
t2355 = t2426 * t1927;
t1691 = t2230 * t2412 + (-(t1926 * t1715 + (pkin(2) * (t1925 * t1930 * t2367 + t2308 * t2382) * t1904 - (t1728 * t2355 - t2282) * t2211) * t1905) * t2426 * t2367 - (t1930 * t2066 + (-t2212 + (-t1905 + t1929) * t1926) * t2367) * t2381) * t1906;
t2401 = t1691 * t2426;
t2400 = t1691 * t1927;
t1911 = t1941 ^ 2;
t2350 = t2428 * t1962;
t2219 = t1912 * t2350;
t2061 = t1732 * t1925 * t2219;
t2209 = t1925 * t2301;
t2210 = t1925 * t2303;
t2229 = t1801 * t2352;
t1692 = t2229 * t2413 + (-(t1926 * t1717 + (pkin(2) * (t1925 * t1942 * t2360 + t2308 * t2376) * t1911 - (t1732 * t2351 - t2281) * t2209) * t1912) * t2428 * t2360 + (-t1942 * t2061 + (t2210 + (t1912 - t1941) * t1926) * t2360) * t2375) * t1913;
t2399 = t1692 * t2428;
t1915 = t1943 ^ 2;
t2347 = t2430 * t1962;
t2216 = t1916 * t2347;
t2060 = t1733 * t1925 * t2216;
t2207 = t1925 * t2298;
t2208 = t1925 * t2300;
t2228 = t1802 * t2349;
t1693 = t2228 * t2414 + (-(t1926 * t1718 + (pkin(2) * (t1925 * t1944 * t2359 + t2308 * t2374) * t1915 - (t1733 * t2348 - t2280) * t2207) * t1916) * t2430 * t2359 + (-t1944 * t2060 + (t2208 + (t1916 - t1943) * t1926) * t2359) * t2373) * t1917;
t2398 = t1693 * t2430;
t1921 = 0.1e1 / t1945 ^ 2;
t2343 = t2432 * t1962;
t2213 = t1920 * t2343;
t2058 = t1734 * t1925 * t2213;
t2205 = t1925 * t2295;
t2297 = t1939 * t1940;
t2206 = t1925 * t2297;
t1803 = -t1939 * t2195 + (t1926 * t2297 + t2322) * t1924;
t2227 = t1803 * t2345;
t2344 = t2432 * t1939;
t1694 = t2227 * t2415 + (-(t1926 * t1719 + (pkin(2) * (t1925 * t1946 * t2358 + t2308 * t2371) * t1919 - (t1734 * t2344 - t2279) * t2205) * t1920) * t2432 * t2358 + (-t1946 * t2058 + (t2206 + (t1920 - t1945) * t1926) * t2358) * t2370) * t1921;
t2397 = t1694 * t2432;
t2396 = t1694 * t1939;
t2224 = t2426 * t2354;
t2129 = t1744 * t2224;
t2194 = -pkin(5) * t1853 + (t1924 * t2319 + t2202) * t2406;
t1695 = (-t1926 * t1711 * t2129 - (-t1927 * t1873 * t2066 + t1926 * (-t1905 * t2178 + t1929 * t2382)) * t1728 * t2224) * t1906 + t2194 * t2222 * t2412;
t2395 = t1695 * t2426;
t2221 = t2428 * t2350;
t2128 = t1748 * t2221;
t1696 = (-t1926 * t1712 * t2128 - (-t1935 * t1875 * t2061 + t1926 * (-t1912 * t2177 + t1941 * t2376)) * t1732 * t2221) * t1913 + t2193 * t2219 * t2413;
t2394 = t1696 * t2428;
t2218 = t2430 * t2347;
t2127 = t1749 * t2218;
t1697 = (-t1926 * t1713 * t2127 - (-t1937 * t1876 * t2060 + t1926 * (-t1916 * t2176 + t1943 * t2374)) * t1733 * t2218) * t1917 + t2192 * t2216 * t2414;
t2393 = t1697 * t2430;
t2215 = t2432 * t2343;
t2126 = t1750 * t2215;
t2191 = t1856 * pkin(5) + (t1924 * t2310 + t2198) * t2403;
t1698 = (-t1926 * t1714 * t2126 - (-t1939 * t1877 * t2058 + t1926 * (-t1920 * t2175 + t1945 * t2371)) * t1734 * t2215) * t1921 + t2191 * t2213 * t2415;
t2392 = t1698 * t2432;
t2391 = t1699 * t2426;
t2390 = t1699 * t1930;
t2387 = t1702 * t2432;
t2386 = t1702 * t1946;
t2384 = t2426 * t2385;
t2383 = t1728 * t1744;
t2380 = t2428 * t2421;
t2379 = t2430 * t2420;
t2377 = t2432 * t2378;
t2372 = t1734 * t1750;
t1743 = t1744 ^ 2;
t2369 = t1743 * t2427;
t2368 = t1743 * t1906;
t2365 = t1745 * t1913;
t2363 = t1746 * t1917;
t1747 = t1750 ^ 2;
t2362 = t1747 * t2433;
t2361 = t1747 * t1921;
t2333 = t1901 * t1923;
t2332 = t1902 * t1923;
t2330 = t1906 * t1927;
t2326 = t1921 * t1939;
t2306 = t1928 * t1691;
t2304 = t1930 * t1691;
t2302 = t1936 * t1692;
t2299 = t1938 * t1693;
t2296 = t1940 * t1694;
t2294 = t1942 * t1692;
t2293 = t1944 * t1693;
t2292 = t1946 * t1694;
t1687 = t1926 * t1695 + t1925 * t2304;
t1735 = t2427 * t2368;
t1963 = 0.1e1 / pkin(2) ^ 2;
t2262 = t1963 * t2385;
t2143 = t1906 * t2262;
t1716 = t1735 + t2143;
t2009 = -0.2e1 * t1728 * t1930 * t2129;
t2290 = t1687 * t1929 - t1695 * t2212 + (-t1716 * t2305 + t2009 * t2330) * t1925 - t2143 * t2321;
t2289 = -t1687 * t1927 - t1695 * t2211 + (t1716 * t2307 + t1905 * t2009) * t1925 - t1926 * t1905 * t2262;
t1688 = t1926 * t1696 + t1925 * t2294;
t1736 = t2429 * t2365;
t2260 = t1963 * t2421;
t2138 = t1913 * t2260;
t1720 = t1736 + t2138;
t2008 = -0.2e1 * t1732 * t1942 * t2128;
t2288 = t1688 * t1941 - t1696 * t2210 + (-t1720 * t2301 + t2008 * t2329) * t1925 - t2138 * t2318;
t1689 = t1926 * t1697 + t1925 * t2293;
t1737 = t2431 * t2363;
t2258 = t1963 * t2420;
t2135 = t1917 * t2258;
t1721 = t1737 + t2135;
t2006 = -0.2e1 * t1733 * t1944 * t2127;
t2287 = t1689 * t1943 - t1697 * t2208 + (-t1721 * t2298 + t2006 * t2328) * t1925 - t2135 * t2316;
t1690 = t1926 * t1698 + t1925 * t2292;
t1738 = t2433 * t2361;
t2256 = t1963 * t2378;
t2132 = t1921 * t2256;
t1722 = t1738 + t2132;
t2004 = -0.2e1 * t1734 * t1946 * t2126;
t2286 = t1690 * t1945 - t1698 * t2206 + (-t1722 * t2295 + t2004 * t2326) * t1925 - t2132 * t2314;
t2285 = -t1688 * t1935 - t1696 * t2209 + (t1720 * t2303 + t1912 * t2008) * t1925 - t1912 * t1926 * t2260;
t2284 = -t1689 * t1937 - t1697 * t2207 + (t1721 * t2300 + t1916 * t2006) * t1925 - t1916 * t1926 * t2258;
t2283 = -t1690 * t1939 - t1698 * t2205 + (t1722 * t2297 + t1920 * t2004) * t1925 - t1926 * t1920 * t2256;
t2278 = t2194 * t2401;
t2277 = t1691 * t2355;
t2276 = t2193 * t2399;
t2275 = t1692 * t2351;
t2274 = t2192 * t2398;
t2273 = t1693 * t2348;
t2272 = t2191 * t2397;
t2271 = t1694 * t2344;
t2270 = t1799 * t2395;
t2269 = t1801 * t2394;
t2268 = t1802 * t2393;
t2267 = t1803 * t2392;
t2266 = t2426 * t2390;
t2265 = t1942 * t2389;
t2264 = t1944 * t2388;
t2263 = t2432 * t2386;
t2261 = t1906 * t2384;
t2259 = t1913 * t2380;
t2257 = t1917 * t2379;
t2255 = t1921 * t2377;
t2254 = t2426 * t2369;
t2253 = t1928 * t2368;
t2252 = t1930 * t2368;
t2250 = t1936 * t2365;
t2249 = t1942 * t2365;
t2247 = t1938 * t2363;
t2246 = t1944 * t2363;
t2245 = t2432 * t2362;
t2244 = t1940 * t2361;
t2243 = t1946 * t2361;
t1783 = -(-t1924 * t1928 + t1926 * t2201) * t2406 + pkin(5) * t2001;
t2242 = t1783 * t2356;
t2241 = t2194 * t2356;
t2240 = t2194 * t2029 * t2426;
t2000 = -t1924 * t1942 - t1926 * t2200;
t1786 = -(-t1924 * t1936 + t1926 * t2197) * t2405 + pkin(5) * t2000;
t2239 = t1786 * t2352;
t1999 = -t1924 * t1944 - t1926 * t2199;
t1787 = -(-t1924 * t1938 + t1926 * t2196) * t2404 + pkin(5) * t1999;
t2238 = t1787 * t2349;
t1788 = -(-t1924 * t1940 + t1926 * t2195) * t2403 + pkin(5) * t1998;
t2237 = t1788 * t2345;
t2236 = t2193 * t2352;
t2028 = t1866 * t1898 + t1894 * t1870;
t2235 = t2193 * t2028 * t2428;
t2234 = t2192 * t2349;
t2027 = t1867 * t1899 + t1895 * t1871;
t2233 = t2192 * t2027 * t2430;
t2232 = t2191 * t2345;
t2231 = t2191 * t2026 * t2432;
t2226 = t1807 * t2357;
t2225 = t1808 * t2346;
t2190 = t2426 * t2289;
t2189 = t2428 * t2288;
t2188 = t2430 * t2287;
t2187 = t2290 * t2426;
t2186 = t2286 * t2432;
t2185 = t2285 * t2428;
t2184 = t2284 * t2430;
t2183 = t2283 * t2432;
t2173 = t1691 * t2230;
t2172 = t1799 * t2277;
t2171 = t1691 * t2223;
t2170 = t1692 * t2229;
t2169 = t1801 * t2275;
t2168 = t1692 * t2220;
t2167 = t1693 * t2228;
t2166 = t1802 * t2273;
t2165 = t1693 * t2217;
t2164 = t1694 * t2227;
t2163 = t1803 * t2271;
t2162 = t1694 * t2214;
t2161 = t1695 * t2223;
t2160 = t1696 * t2220;
t2159 = t1697 * t2217;
t2158 = t1698 * t2214;
t2157 = t1699 * t2242;
t2156 = t1799 * t2266;
t2155 = t2356 * t2423;
t2154 = t1700 * t2239;
t2153 = t1801 * t2265;
t2152 = t1700 * t1936 * t2352;
t2151 = t1701 * t2238;
t2150 = t1802 * t2264;
t2149 = t1701 * t1938 * t2349;
t2148 = t1702 * t2237;
t2147 = t1803 * t2263;
t2146 = t2345 * t2422;
t2145 = t1799 * t2261;
t2144 = t2384 * t2419;
t2142 = t2435 * t2383;
t2141 = (0.2e1 * t1904 - 0.1e1) * t1907 * t2383;
t2140 = t1801 * t2259;
t1914 = t1912 / t1911;
t2139 = t1914 * t1935 * t2380;
t2137 = t1802 * t2257;
t1918 = t1916 / t1915;
t2136 = t1918 * t1937 * t2379;
t2134 = t1803 * t2255;
t2133 = t2377 * t2418;
t2131 = t2434 * t2372;
t2130 = (0.2e1 * t1919 - 0.1e1) * t1922 * t2372;
t2125 = t1893 * t2241;
t2124 = t1897 * t2241;
t2123 = t1905 * t2240;
t2122 = t1894 * t2236;
t2121 = t1898 * t2236;
t2120 = t1912 * t2235;
t2119 = t1895 * t2234;
t2118 = t1899 * t2234;
t2117 = t1916 * t2233;
t2116 = t1896 * t2232;
t2115 = t1900 * t2232;
t2114 = t1920 * t2231;
t2112 = t1800 * t1691 * t2356;
t2111 = t1800 * t2266;
t1804 = t2000 * t1935 - t1941 * t2204;
t2107 = t1804 * t1692 * t2352;
t2106 = t1804 * t2265;
t1805 = t1999 * t1937 - t1943 * t2204;
t2105 = t1805 * t1693 * t2349;
t2104 = t1805 * t2264;
t2103 = t1806 * t1694 * t2345;
t2102 = t1806 * t2263;
t2101 = t1905 * t2226;
t2100 = t1920 * t2225;
t2099 = t1695 * t2226;
t2098 = t1698 * t2225;
t2097 = 0.2e1 * t2169;
t2096 = 0.2e1 * t2166;
t2093 = t2194 * t2171;
t2092 = t2193 * t2168;
t2091 = t2192 * t2165;
t2090 = t2191 * t2162;
t2089 = t1799 * t2161;
t2088 = t1801 * t2160;
t2087 = t1802 * t2159;
t2086 = t1803 * t2158;
t2085 = t1699 * t2125;
t2084 = t1699 * t2124;
t2083 = t1699 * t2123;
t2082 = t1799 * t2155;
t2081 = t1700 * t2122;
t2080 = t1700 * t2121;
t2079 = t1700 * t2120;
t2078 = t1801 * t2152;
t2077 = t1701 * t2119;
t2076 = t1701 * t2118;
t2075 = t1701 * t2117;
t2074 = t1802 * t2149;
t2073 = t1702 * t2116;
t2072 = t1702 * t2115;
t2071 = t1702 * t2114;
t2070 = t1803 * t2146;
t2069 = t1799 * t2144;
t2068 = t2226 * t2385;
t2067 = t1799 * t2142;
t2065 = t1801 * t2139;
t2064 = t1802 * t2136;
t2063 = t1803 * t2133;
t2062 = t2225 * t2378;
t2059 = t1803 * t2131;
t2057 = t2029 * t2173;
t2056 = t2029 * t2156;
t2055 = t1905 * t2111;
t2054 = t2028 * t2170;
t2053 = t2028 * t2153;
t2052 = t2027 * t2167;
t2051 = t2027 * t2150;
t2050 = t2026 * t2164;
t2049 = t2026 * t2147;
t2048 = t1912 * t2106;
t2047 = t1916 * t2104;
t2046 = t1920 * t2102;
t2045 = t2226 * t2390;
t2044 = t1691 * t2101;
t2043 = t1894 * t2170;
t2042 = t1894 * t2153;
t2041 = t1895 * t2167;
t2040 = t1895 * t2150;
t2039 = t1694 * t2100;
t2038 = t2225 * t2386;
t2037 = t1897 * t2173;
t2036 = t1897 * t2156;
t2035 = t1898 * t2170;
t2034 = t1898 * t2153;
t2033 = t1899 * t2167;
t2032 = t1899 * t2150;
t2031 = t1900 * t2164;
t2030 = t1900 * t2147;
t2023 = t2141 * t2435;
t2022 = t2130 * t2434;
t2021 = t1905 * t2056;
t2020 = t1912 * t2053;
t2019 = t1916 * t2051;
t2018 = t1920 * t2049;
t2017 = t1905 * t2045;
t2016 = t1912 * t2042;
t2015 = t1916 * t2040;
t2014 = t1920 * t2038;
t2013 = t1905 * t2036;
t2012 = t1912 * t2034;
t2011 = t1916 * t2032;
t2010 = t1920 * t2030;
t2007 = (0.2e1 * t1911 - 0.1e1) * t1914 * t2095;
t2005 = (0.2e1 * t1915 - 0.1e1) * t1918 * t2094;
t2003 = t1799 * t2023;
t2002 = t1803 * t2022;
t1997 = t1801 * t2007;
t1996 = t1802 * t2005;
t1995 = -t2252 * t2435 - t2306 * t2426;
t1994 = -t2253 * t2435 + t2304 * t2426;
t1831 = t2428 * t2429;
t1993 = -t1831 * t2249 - t2302 * t2428;
t1992 = -t1831 * t2250 + t2294 * t2428;
t1834 = t2430 * t2431;
t1991 = -t1834 * t2246 - t2299 * t2430;
t1990 = -t1834 * t2247 + t2293 * t2430;
t1989 = -t2243 * t2434 - t2296 * t2432;
t1988 = -t2244 * t2434 + t2292 * t2432;
t1724 = t1736 - 0.2e1 * t2366;
t1985 = t1724 * t2236 + t1997;
t1725 = t1737 - 0.2e1 * t2364;
t1984 = t1725 * t2234 + t1996;
t1910 = t1939 ^ 2;
t1909 = t1937 ^ 2;
t1908 = t1935 ^ 2;
t1903 = t1927 ^ 2;
t1864 = t2205 + t2314;
t1863 = t1926 * t1945 - t2206;
t1862 = t2207 + t2316;
t1861 = t1943 * t1926 - t2208;
t1860 = t2209 + t2318;
t1859 = t1941 * t1926 - t2210;
t1855 = t2211 + t2321;
t1854 = t1929 * t1926 - t2212;
t1778 = t2402 * t1880 + (-t1877 * t1926 + t1939 * t2407) * t1924;
t1777 = t2402 * t1879 + (-t1876 * t1926 + t1937 * t2407) * t1924;
t1776 = t2402 * t1878 + (-t1875 * t1926 + t1935 * t2407) * t1924;
t1772 = t2402 * t1874 + (-t1873 * t1926 + t1927 * t2407) * t1924;
t1742 = (t1757 * t1872 - t1758 * t1868) * t2432;
t1741 = (t1755 * t1871 - t1756 * t1867) * t2430;
t1740 = (t1753 * t1870 - t1754 * t1866) * t2428;
t1739 = (t1751 * t1869 - t1752 * t1865) * t2426;
t1726 = t1738 - 0.2e1 * t2362;
t1723 = t1735 - 0.2e1 * t2369;
t1 = [t1752 * t2391 + t1754 * t2389 + t1756 * t2388 + t1758 * t2387, -t2031 - t2033 - t2035 - t2037, (t1752 * t1994 + t1754 * t1992 + t1756 * t1990 + t1758 * t1988 - t2010 - t2011 - t2012 - t2013) * t1925, (t1752 * t1995 + t1754 * t1993 + t1756 * t1991 + t1758 * t1989 + t1897 * t2082 + t1898 * t2078 + t1899 * t2074 + t1900 * t2070) * t1925, -t1903 * t2037 - t1908 * t2035 - t1909 * t2033 - t1910 * t2031 + ((t2191 * t2245 - 0.2e1 * t2059) * t1900 * t2326 - t1899 * t2417 - t1898 * t2416 + (t2194 * t2254 - 0.2e1 * t2067) * t1897 * t2330) * t1962, -0.2e1 * t1897 * t2172 - 0.2e1 * t1898 * t2169 - 0.2e1 * t1899 * t2166 - 0.2e1 * t1900 * t2163 + ((-t1726 * t2232 - 0.2e1 * t2002) * t1900 - t1984 * t1899 - t1985 * t1898 + (-t1723 * t2241 - 0.2e1 * t2003) * t1897) * t1962, -t1897 * t2089 - t1898 * t2088 - t1899 * t2087 - t1900 * t2086 + (-t1897 * t2145 - t1898 * t2140 - t1899 * t2137 - t1900 * t2134) * t1963 + (-t1897 * t2093 - t1898 * t2092 - t1899 * t2091 - t1900 * t2090) * t1962, -t1897 * t2270 - t1898 * t2269 - t1899 * t2268 - t1900 * t2267 + (t1897 * t2069 + t1898 * t2065 + t1899 * t2064 + t1900 * t2063) * t1963 + (-t1897 * t2278 - t1898 * t2276 - t1899 * t2274 - t1900 * t2272) * t1962, (-t1695 * t2124 - t1696 * t2121 - t1697 * t2118 - t1698 * t2115) * t1962, t1758 * t2186 + t1756 * t2188 + t1754 * t2189 + t1752 * t2187 + (-t1854 * t2084 - t1859 * t2080 - t1861 * t2076 - t1863 * t2072) * t1962 + (-t2030 - t2032 - t2034 - t2036) * t1925, t1758 * t2183 + t1756 * t2184 + t1754 * t2185 + t1752 * t2190 + (t1855 * t2084 + t1860 * t2080 + t1862 * t2076 + t1864 * t2072) * t1962 + (t1927 * t2013 + t1935 * t2012 + t1937 * t2011 + t1939 * t2010) * t1925, 0, -t2332, t2333, 0; t1751 * t2391 + t1753 * t2389 + t1755 * t2388 + t1757 * t2387, t2039 + t2041 + t2043 + t2044, (t1751 * t1994 + t1753 * t1992 + t1755 * t1990 + t1757 * t1988 + t2014 + t2015 + t2016 + t2017) * t1925, (t1751 * t1995 + t1753 * t1993 + t1755 * t1991 + t1757 * t1989 - t1894 * t2078 - t1895 * t2074 - t2100 * t2422 - t2101 * t2423) * t1925, t1903 * t2044 + t1908 * t2043 + t1909 * t2041 + t1910 * t2039 + (t1895 * t2417 + t1894 * t2416 + (-t1747 * t2191 + t2372 * t2408) * t2433 * t2326 * t2346 + (-t1743 * t2194 + t2383 * t2409) * t2427 * t2330 * t2357) * t1962, 0.2e1 * t2226 * t2400 + t1894 * t2097 + t1895 * t2096 + 0.2e1 * t2225 * t2396 + (t1984 * t1895 + t1985 * t1894 + (t1726 * t1920 * t2191 + t2130 * t2408 * t2433) * t2346 + (t1723 * t1905 * t2194 + t2141 * t2409 * t2427) * t2357) * t1962, t2099 * t2331 + t1894 * t2088 + t1895 * t2087 + t2098 * t2327 + (t1894 * t2140 + t1895 * t2137 + t1906 * t2068 + t1921 * t2062) * t1963 + (t1893 * t2093 + t1894 * t2092 + t1895 * t2091 + t1896 * t2090) * t1962, t2099 + t1894 * t2269 + t1895 * t2268 + t2098 + (-t1894 * t2065 - t1895 * t2064 - t2062 * t2418 - t2068 * t2419) * t1963 + (t1893 * t2278 + t1894 * t2276 + t1895 * t2274 + t1896 * t2272) * t1962, (t1695 * t2125 + t1696 * t2122 + t1697 * t2119 + t1698 * t2116) * t1962, t1757 * t2186 + t1755 * t2188 + t1753 * t2189 + t1751 * t2187 + (t1854 * t2085 + t1859 * t2081 + t1861 * t2077 + t1863 * t2073) * t1962 + (t2038 + t2040 + t2042 + t2045) * t1925, t1757 * t2183 + t1755 * t2184 + t1753 * t2185 + t1751 * t2190 + (-t1855 * t2085 - t1860 * t2081 - t1862 * t2077 - t1864 * t2073) * t1962 + (-t1927 * t2017 - t1935 * t2016 - t1937 * t2015 - t1939 * t2014) * t1925, 0, -t2333, -t2332, 0; t1772 * t2391 + t1776 * t2389 + t1777 * t2388 + t1778 * t2387, t2103 + t2105 + t2107 + t2112, (t1772 * t1994 + t1776 * t1992 + t1777 * t1990 + t1778 * t1988 + t2046 + t2047 + t2048 + t2055) * t1925, (t1772 * t1995 + t1776 * t1993 + t1777 * t1991 + t1778 * t1989 - t1800 * t2155 - t1804 * t2152 - t1805 * t2149 - t1806 * t2146) * t1925, t1903 * t2112 + t1908 * t2107 + t1909 * t2105 + t1910 * t2103 + ((-t1788 * t2245 + t2131 * t2410) * t2326 + (-t1787 * t2248 + t1805 * t2094) * t2328 + (-t1786 * t2251 + t1804 * t2095) * t2329 + (-t1783 * t2254 + t2142 * t2411) * t2330) * t1962, t2277 * t2411 + 0.2e1 * t1804 * t2275 + 0.2e1 * t1805 * t2273 + t2271 * t2410 + (t1723 * t2242 + t1724 * t2239 + t1725 * t2238 + t1726 * t2237 + t1804 * t2007 + t1805 * t2005 + t2022 * t2410 + t2023 * t2411) * t1962, t1800 * t2161 + t1804 * t2160 + t1805 * t2159 + t1806 * t2158 + (t1800 * t2261 + t1804 * t2259 + t1805 * t2257 + t1806 * t2255) * t1963 + (t1783 * t2171 + t1786 * t2168 + t1787 * t2165 + t1788 * t2162) * t1962, t1800 * t2395 + t1804 * t2394 + t1805 * t2393 + t1806 * t2392 + (-t1800 * t2144 - t1804 * t2139 - t1805 * t2136 - t1806 * t2133) * t1963 + (t1783 * t2401 + t1786 * t2399 + t1787 * t2398 + t1788 * t2397) * t1962, (t1695 * t2242 + t1696 * t2239 + t1697 * t2238 + t1698 * t2237) * t1962, t1778 * t2186 + t1777 * t2188 + t1776 * t2189 + t1772 * t2187 + (t1854 * t2157 + t1859 * t2154 + t1861 * t2151 + t1863 * t2148) * t1962 + (t2102 + t2104 + t2106 + t2111) * t1925, t1778 * t2183 + t1777 * t2184 + t1776 * t2185 + t1772 * t2190 + (-t1855 * t2157 - t1860 * t2154 - t1862 * t2151 - t1864 * t2148) * t1962 + (-t1927 * t2055 - t1935 * t2048 - t1937 * t2047 - t1939 * t2046) * t1925, 0, 0, 0, 0; t1739 * t1699 + t1740 * t1700 + t1741 * t1701 + t1742 * t1702, t2050 + t2052 + t2054 + t2057, (t2021 + t2020 + t2019 + t2018 + (-t2244 * t2433 + t2292) * t1742 + (-t2247 * t2431 + t2293) * t1741 + (-t2250 * t2429 + t2294) * t1740 + (-t2253 * t2427 + t2304) * t1739) * t1925, (-t2029 * t2082 - t2028 * t2078 - t2027 * t2074 - t2026 * t2070 + (-t2243 * t2433 - t2296) * t1742 + (-t2246 * t2431 - t2299) * t1741 + (-t2249 * t2429 - t2302) * t1740 + (-t2252 * t2427 - t2306) * t1739) * t1925, t1903 * t2057 + t1908 * t2054 + t1909 * t2052 + t1910 * t2050 + ((t2059 * t2425 - t2231 * t2362) * t2326 + (t2024 * t2027 - t2233 * t2364) * t2328 + (t2025 * t2028 - t2235 * t2366) * t2329 + (t2067 * t2424 - t2240 * t2369) * t2330) * t1962, t2172 * t2424 + t2028 * t2097 + t2027 * t2096 + t2163 * t2425 + (t1723 * t2123 + t1724 * t2120 + t1725 * t2117 + t1726 * t2114 + t1996 * t2027 + t1997 * t2028 + t2002 * t2425 + t2003 * t2424) * t1962, t2029 * t2089 + t2028 * t2088 + t2027 * t2087 + t2026 * t2086 + (t2026 * t2134 + t2027 * t2137 + t2028 * t2140 + t2029 * t2145) * t1963 + (t1692 * t1935 * t2120 + t1693 * t1937 * t2117 + t2114 * t2396 + t2123 * t2400) * t1962, t2029 * t2270 + t2028 * t2269 + t2027 * t2268 + t2026 * t2267 + (-t2026 * t2063 - t2027 * t2064 - t2028 * t2065 - t2029 * t2069) * t1963 + (t1691 * t2240 + t1692 * t2235 + t1693 * t2233 + t1694 * t2231) * t1962, (t1695 * t2123 + t1696 * t2120 + t1697 * t2117 + t1698 * t2114) * t1962, t2286 * t1742 + t2287 * t1741 + t2288 * t1740 + t2290 * t1739 + (t1854 * t2083 + t1859 * t2079 + t1861 * t2075 + t1863 * t2071) * t1962 + (t2049 + t2051 + t2053 + t2056) * t1925, t2283 * t1742 + t2284 * t1741 + t2285 * t1740 + t2289 * t1739 + (-t1855 * t2083 - t1860 * t2079 - t1862 * t2075 - t1864 * t2071) * t1962 + (-t1927 * t2021 - t1935 * t2020 - t1937 * t2019 - t1939 * t2018) * t1925, 0, 0, 0, 0;];
tau_reg  = t1;
