% Calculate vector of centrifugal and coriolis load on the joints for
% P4PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% taucX [4x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_slag_vp2: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:03:04
% EndTime: 2020-08-07 11:03:18
% DurationCPUTime: 14.79s
% Computational Cost: add. (37328->464), mult. (107080->942), div. (13200->9), fcn. (114308->30), ass. (0->365)
t1114 = sin(pkin(3));
t1116 = cos(pkin(3));
t1118 = sin(qJ(2,4));
t1117 = sin(qJ(3,4));
t1119 = cos(qJ(3,4));
t1224 = mrSges(3,1) * t1117 + mrSges(3,2) * t1119;
t1240 = t1119 * mrSges(3,1) - mrSges(3,2) * t1117;
t1025 = -t1114 * t1224 * t1118 + t1240 * t1116;
t1081 = Ifges(3,5) * t1117 + Ifges(3,6) * t1119;
t1121 = Ifges(3,1) - Ifges(3,2);
t1283 = t1117 * t1121;
t1103 = t1119 ^ 2;
t1395 = 0.2e1 * t1103;
t1282 = t1118 * t1119;
t1244 = t1114 * t1282;
t1113 = sin(pkin(6));
t1115 = cos(pkin(6));
t1120 = cos(qJ(2,4));
t1292 = t1116 * t1120;
t1293 = t1116 * t1118;
t1377 = pkin(2) * t1119;
t1009 = -(-t1113 * t1118 + t1115 * t1292) * t1377 - pkin(5) * (t1113 * t1120 + t1115 * t1293);
t1010 = (t1113 * t1292 + t1115 * t1118) * t1377 + (t1113 * t1293 - t1115 * t1120) * pkin(5);
t1140 = xDP(3);
t1143 = xP(4);
t1101 = sin(t1143);
t1102 = cos(t1143);
t1146 = koppelP(4,2);
t1150 = koppelP(4,1);
t1065 = t1101 * t1150 + t1102 * t1146;
t1069 = -t1101 * t1146 + t1102 * t1150;
t1123 = legFrame(4,2);
t1093 = sin(t1123);
t1097 = cos(t1123);
t1139 = xDP(4);
t1141 = xDP(2);
t1142 = xDP(1);
t1208 = (t1069 * t1139 + t1141) * t1093 - (-t1065 * t1139 + t1142) * t1097;
t1156 = 0.1e1 / pkin(2);
t1073 = pkin(2) * t1282 - pkin(5) * t1120;
t1378 = pkin(2) * t1116;
t1034 = t1073 * t1114 + t1117 * t1378;
t1399 = 0.1e1 / t1034;
t1325 = t1399 / t1119;
t1258 = t1156 * t1325;
t954 = (t1009 * t1140 + t1208 * t1010) * t1258;
t1349 = t1117 * t954;
t1272 = pkin(2) * t1349;
t1300 = t1114 * t1120;
t1382 = pkin(2) * t1103;
t1172 = t1114 * t1119 + t1117 * t1293;
t1284 = t1117 * t1120;
t1017 = t1172 * t1113 - t1115 * t1284;
t1018 = -t1113 * t1284 - t1172 * t1115;
t975 = (t1208 * t1017 + t1018 * t1140) * t1325;
t1385 = pkin(5) * t975;
t1389 = pkin(2) * t954;
t1268 = t1117 * t1385;
t921 = t1268 - t1389;
t885 = (((t1116 * t954 + t975 * t1300) * t1382 - (t1272 - t1385) * t1244 + t1116 * t921) * t975 - (-t954 * t1300 + (-t1103 * t1116 + t1117 * t1244 + t1116) * t975) * t1389) * t1325;
t1285 = t1116 * t1156;
t1301 = t1114 * t1117;
t1154 = pkin(5) ^ 2;
t1155 = pkin(2) ^ 2;
t1364 = (-pkin(5) * t1272 + (t1103 * t1155 + t1154) * t975) * t975;
t893 = (t1285 * t1364 + (-t954 * t1073 * t1301 + t1116 * (t954 * t1382 - t1268)) * t954) * t1325;
t897 = (t921 * t1389 - t1364) * t1399;
t974 = t975 ^ 2;
t1440 = -Ifges(3,3) * t893 - t1025 * t897 - t1081 * t885 - (Ifges(3,4) * t1395 + t1119 * t1283 - Ifges(3,4)) * t974;
t1383 = Ifges(3,1) + Ifges(2,3);
t1400 = 0.2e1 * Ifges(3,4);
t1053 = t1117 * t1119 * t1400 - t1103 * t1121 + t1383;
t1122 = mrSges(2,2) - mrSges(3,3);
t1317 = ((mrSges(2,1) + t1240) * t1120 - t1118 * t1122) * t1114;
t1390 = -Ifges(3,6) / 0.2e1;
t1391 = Ifges(3,5) / 0.2e1;
t1439 = -t1053 * t885 - t1081 * t893 - t897 * t1317 + 0.2e1 * ((t975 * t1283 + t954 * t1391) * t1119 + t1349 * t1390 + (t1395 - 0.1e1) * t975 * Ifges(3,4)) * t954;
t1133 = cos(qJ(3,3));
t1106 = t1133 ^ 2;
t1127 = sin(qJ(3,3));
t1281 = t1127 * t1133;
t1055 = -t1106 * t1121 + t1281 * t1400 + t1383;
t1082 = Ifges(3,5) * t1127 + Ifges(3,6) * t1133;
t1128 = sin(qJ(2,3));
t1134 = cos(qJ(2,3));
t1239 = t1133 * mrSges(3,1) - mrSges(3,2) * t1127;
t1316 = ((mrSges(2,1) + t1239) * t1134 - t1128 * t1122) * t1114;
t1291 = t1116 * t1128;
t1171 = t1114 * t1133 + t1127 * t1291;
t1280 = t1127 * t1134;
t1019 = t1171 * t1113 - t1115 * t1280;
t1022 = -t1113 * t1280 - t1171 * t1115;
t1147 = koppelP(3,2);
t1151 = koppelP(3,1);
t1066 = t1101 * t1151 + t1102 * t1147;
t1070 = -t1101 * t1147 + t1102 * t1151;
t1124 = legFrame(3,2);
t1094 = sin(t1124);
t1098 = cos(t1124);
t1207 = (t1070 * t1139 + t1141) * t1094 - (-t1066 * t1139 + t1142) * t1098;
t1279 = t1128 * t1133;
t1075 = pkin(2) * t1279 - pkin(5) * t1134;
t1038 = t1075 * t1114 + t1127 * t1378;
t1398 = 0.1e1 / t1038;
t1324 = t1398 / t1133;
t982 = (t1207 * t1019 + t1022 * t1140) * t1324;
t1347 = t1127 * t982;
t1288 = t1116 * t1134;
t1376 = pkin(2) * t1133;
t1011 = -(-t1113 * t1128 + t1115 * t1288) * t1376 - pkin(5) * (t1113 * t1134 + t1115 * t1291);
t1014 = (t1113 * t1288 + t1115 * t1128) * t1376 + (t1113 * t1291 - t1115 * t1134) * pkin(5);
t1255 = t1156 * t1324;
t959 = (t1011 * t1140 + t1207 * t1014) * t1255;
t1348 = t1127 * t959;
t1394 = 0.2e1 * t1106;
t1243 = t1114 * t1279;
t1271 = pkin(2) * t1348;
t1296 = t1114 * t1134;
t1381 = pkin(2) * t1106;
t1388 = pkin(2) * t959;
t1267 = pkin(5) * t1347;
t923 = t1267 - t1388;
t886 = (((t1116 * t959 + t982 * t1296) * t1381 - (-pkin(5) * t982 + t1271) * t1243 + t1116 * t923) * t982 - (-t959 * t1296 + (-t1106 * t1116 + t1127 * t1243 + t1116) * t982) * t1388) * t1324;
t1299 = t1114 * t1127;
t1363 = (-pkin(5) * t1271 + (t1106 * t1155 + t1154) * t982) * t982;
t894 = (t1285 * t1363 + (-t959 * t1075 * t1299 + t1116 * (t959 * t1381 - t1267)) * t959) * t1324;
t898 = (t923 * t1388 - t1363) * t1398;
t1438 = -t1055 * t886 - t1082 * t894 - t898 * t1316 + 0.2e1 * ((t1121 * t1347 + t959 * t1391) * t1133 + t1348 * t1390 + (t1394 - 0.1e1) * t982 * Ifges(3,4)) * t959;
t1135 = cos(qJ(3,2));
t1108 = t1135 ^ 2;
t1129 = sin(qJ(3,2));
t1278 = t1129 * t1135;
t1056 = -t1108 * t1121 + t1278 * t1400 + t1383;
t1083 = Ifges(3,5) * t1129 + Ifges(3,6) * t1135;
t1130 = sin(qJ(2,2));
t1136 = cos(qJ(2,2));
t1238 = t1135 * mrSges(3,1) - mrSges(3,2) * t1129;
t1315 = ((mrSges(2,1) + t1238) * t1136 - t1130 * t1122) * t1114;
t1290 = t1116 * t1130;
t1170 = t1114 * t1135 + t1129 * t1290;
t1277 = t1129 * t1136;
t1020 = t1170 * t1113 - t1115 * t1277;
t1023 = -t1113 * t1277 - t1170 * t1115;
t1148 = koppelP(2,2);
t1152 = koppelP(2,1);
t1067 = t1101 * t1152 + t1102 * t1148;
t1071 = -t1101 * t1148 + t1102 * t1152;
t1125 = legFrame(2,2);
t1095 = sin(t1125);
t1099 = cos(t1125);
t1206 = (t1071 * t1139 + t1141) * t1095 - (-t1067 * t1139 + t1142) * t1099;
t1276 = t1130 * t1135;
t1076 = pkin(2) * t1276 - pkin(5) * t1136;
t1039 = t1076 * t1114 + t1129 * t1378;
t1397 = 0.1e1 / t1039;
t1323 = t1397 / t1135;
t983 = (t1206 * t1020 + t1023 * t1140) * t1323;
t1345 = t1129 * t983;
t1287 = t1116 * t1136;
t1375 = pkin(2) * t1135;
t1012 = -(-t1113 * t1130 + t1115 * t1287) * t1375 - pkin(5) * (t1113 * t1136 + t1115 * t1290);
t1015 = (t1113 * t1287 + t1115 * t1130) * t1375 + (t1113 * t1290 - t1115 * t1136) * pkin(5);
t1252 = t1156 * t1323;
t960 = (t1012 * t1140 + t1206 * t1015) * t1252;
t1346 = t1129 * t960;
t1393 = 0.2e1 * t1108;
t1242 = t1114 * t1276;
t1270 = pkin(2) * t1346;
t1295 = t1114 * t1136;
t1380 = pkin(2) * t1108;
t1387 = pkin(2) * t960;
t1266 = pkin(5) * t1345;
t924 = t1266 - t1387;
t887 = (((t1116 * t960 + t983 * t1295) * t1380 - (-pkin(5) * t983 + t1270) * t1242 + t1116 * t924) * t983 + (t960 * t1295 + (t1108 * t1116 - t1129 * t1242 - t1116) * t983) * t1387) * t1323;
t1298 = t1114 * t1129;
t1362 = (-pkin(5) * t1270 + (t1108 * t1155 + t1154) * t983) * t983;
t895 = (t1285 * t1362 + (-t960 * t1076 * t1298 + t1116 * (t960 * t1380 - t1266)) * t960) * t1323;
t899 = (t924 * t1387 - t1362) * t1397;
t1437 = -t1056 * t887 - t1083 * t895 - t899 * t1315 + 0.2e1 * ((t1121 * t1345 + t960 * t1391) * t1135 + t1346 * t1390 + (t1393 - 0.1e1) * t983 * Ifges(3,4)) * t960;
t1137 = cos(qJ(3,1));
t1110 = t1137 ^ 2;
t1131 = sin(qJ(3,1));
t1275 = t1131 * t1137;
t1057 = -t1110 * t1121 + t1275 * t1400 + t1383;
t1084 = Ifges(3,5) * t1131 + Ifges(3,6) * t1137;
t1132 = sin(qJ(2,1));
t1138 = cos(qJ(2,1));
t1237 = t1137 * mrSges(3,1) - mrSges(3,2) * t1131;
t1314 = ((mrSges(2,1) + t1237) * t1138 - t1132 * t1122) * t1114;
t1289 = t1116 * t1132;
t1169 = t1114 * t1137 + t1131 * t1289;
t1274 = t1131 * t1138;
t1021 = t1169 * t1113 - t1115 * t1274;
t1024 = -t1113 * t1274 - t1169 * t1115;
t1149 = koppelP(1,2);
t1153 = koppelP(1,1);
t1068 = t1101 * t1153 + t1102 * t1149;
t1072 = -t1101 * t1149 + t1102 * t1153;
t1126 = legFrame(1,2);
t1096 = sin(t1126);
t1100 = cos(t1126);
t1205 = (t1072 * t1139 + t1141) * t1096 - (-t1068 * t1139 + t1142) * t1100;
t1273 = t1132 * t1137;
t1077 = pkin(2) * t1273 - pkin(5) * t1138;
t1040 = t1077 * t1114 + t1131 * t1378;
t1396 = 0.1e1 / t1040;
t1322 = t1396 / t1137;
t984 = (t1205 * t1021 + t1024 * t1140) * t1322;
t1343 = t1131 * t984;
t1286 = t1116 * t1138;
t1374 = pkin(2) * t1137;
t1013 = -(-t1113 * t1132 + t1115 * t1286) * t1374 - pkin(5) * (t1113 * t1138 + t1115 * t1289);
t1016 = (t1113 * t1286 + t1115 * t1132) * t1374 + (t1113 * t1289 - t1115 * t1138) * pkin(5);
t1249 = t1156 * t1322;
t961 = (t1013 * t1140 + t1205 * t1016) * t1249;
t1344 = t1131 * t961;
t1392 = 0.2e1 * t1110;
t1241 = t1114 * t1273;
t1269 = pkin(2) * t1344;
t1294 = t1114 * t1138;
t1379 = pkin(2) * t1110;
t1386 = pkin(2) * t961;
t1265 = pkin(5) * t1343;
t925 = t1265 - t1386;
t888 = (((t1116 * t961 + t984 * t1294) * t1379 - (-pkin(5) * t984 + t1269) * t1241 + t1116 * t925) * t984 - (-t961 * t1294 + (-t1110 * t1116 + t1131 * t1241 + t1116) * t984) * t1386) * t1322;
t1297 = t1114 * t1131;
t1361 = (-pkin(5) * t1269 + (t1110 * t1155 + t1154) * t984) * t984;
t896 = (t1285 * t1361 + (-t961 * t1077 * t1297 + t1116 * (t961 * t1379 - t1265)) * t961) * t1322;
t900 = (t925 * t1386 - t1361) * t1396;
t1436 = -t1057 * t888 - t1084 * t896 - t900 * t1314 + 0.2e1 * ((t1121 * t1343 + t961 * t1391) * t1137 + t1344 * t1390 + (t1392 - 0.1e1) * t984 * Ifges(3,4)) * t961;
t1223 = mrSges(3,1) * t1127 + mrSges(3,2) * t1133;
t1026 = -t1114 * t1223 * t1128 + t1239 * t1116;
t979 = t982 ^ 2;
t1435 = -Ifges(3,3) * t894 - t1026 * t898 - t1082 * t886 - (Ifges(3,4) * t1394 + t1121 * t1281 - Ifges(3,4)) * t979;
t1222 = mrSges(3,1) * t1129 + mrSges(3,2) * t1135;
t1027 = -t1114 * t1222 * t1130 + t1238 * t1116;
t980 = t983 ^ 2;
t1434 = -Ifges(3,3) * t895 - t1027 * t899 - t1083 * t887 - (Ifges(3,4) * t1393 + t1121 * t1278 - Ifges(3,4)) * t980;
t1221 = mrSges(3,1) * t1131 + mrSges(3,2) * t1137;
t1028 = -t1114 * t1221 * t1132 + t1237 * t1116;
t981 = t984 ^ 2;
t1433 = -Ifges(3,3) * t896 - t1028 * t900 - t1084 * t888 - (Ifges(3,4) * t1392 + t1121 * t1275 - Ifges(3,4)) * t981;
t1428 = t1433 * t1249;
t1427 = t1434 * t1252;
t1426 = t1435 * t1255;
t1425 = t1440 * t1258;
t1424 = t1439 * t1325;
t1423 = t1438 * t1324;
t1422 = t1437 * t1323;
t1421 = t1436 * t1322;
t1105 = m(1) + m(2) + m(3);
t1384 = t1122 / 0.2e1;
t953 = t954 ^ 2;
t1416 = -t1025 * t893 - t1105 * t897 - t885 * t1317 + ((-mrSges(2,1) * t974 - t1240 * (t974 + t953)) * t1118 - 0.2e1 * t1120 * (t1224 * t954 + t975 * t1384) * t975) * t1114 - t1116 * t953 * t1224;
t956 = t959 ^ 2;
t1415 = -t1026 * t894 - t1105 * t898 - t886 * t1316 + ((-mrSges(2,1) * t979 - t1239 * (t979 + t956)) * t1128 - 0.2e1 * t1134 * (t1223 * t959 + t982 * t1384) * t982) * t1114 - t1116 * t956 * t1223;
t957 = t960 ^ 2;
t1414 = -t1027 * t895 - t1105 * t899 - t887 * t1315 + ((-mrSges(2,1) * t980 - t1238 * (t980 + t957)) * t1130 - 0.2e1 * t1136 * (t1222 * t960 + t983 * t1384) * t983) * t1114 - t1116 * t957 * t1222;
t958 = t961 ^ 2;
t1413 = -t1028 * t896 - t1105 * t900 - t888 * t1314 + ((-mrSges(2,1) * t981 - t1237 * (t981 + t958)) * t1132 - 0.2e1 * t1138 * (t1221 * t961 + t984 * t1384) * t984) * t1114 - t1116 * t958 * t1221;
t1412 = t1396 * t1413;
t1411 = t1397 * t1414;
t1410 = t1398 * t1415;
t1409 = t1399 * t1416;
t1408 = t1016 * t1428 + t1021 * t1421;
t1407 = t1015 * t1427 + t1020 * t1422;
t1406 = t1014 * t1426 + t1019 * t1423;
t1405 = t1010 * t1425 + t1017 * t1424;
t1404 = t1324 * (-t1066 * t1094 + t1070 * t1098);
t1403 = t1325 * (-t1065 * t1093 + t1069 * t1097);
t1402 = (-t1068 * t1096 + t1072 * t1100) * t1322;
t1401 = (-t1067 * t1095 + t1071 * t1099) * t1323;
t1112 = t1139 ^ 2;
t1369 = Ifges(3,3) * t1156;
t1337 = t1010 * t1156;
t1336 = t1014 * t1156;
t1335 = t1015 * t1156;
t1334 = t1016 * t1156;
t1333 = t1025 * t1399;
t1332 = t1025 * t1156;
t1331 = t1026 * t1398;
t1330 = t1026 * t1156;
t1329 = t1027 * t1397;
t1328 = t1027 * t1156;
t1327 = t1028 * t1396;
t1326 = t1028 * t1156;
t1321 = t1399 * t1105;
t1320 = t1398 * t1105;
t1319 = t1397 * t1105;
t1318 = t1396 * t1105;
t1305 = t1081 * t1156;
t1304 = t1082 * t1156;
t1303 = t1083 * t1156;
t1302 = t1084 * t1156;
t1260 = t1093 * t1325;
t1259 = t1097 * t1325;
t1257 = t1094 * t1324;
t1256 = t1098 * t1324;
t1254 = t1095 * t1323;
t1253 = t1099 * t1323;
t1251 = t1096 * t1322;
t1250 = t1100 * t1322;
t1248 = t1399 * t1317;
t1247 = t1398 * t1316;
t1246 = t1397 * t1315;
t1245 = t1396 * t1314;
t1204 = pkin(2) * t1301 - t1073 * t1116;
t1203 = pkin(2) * t1299 - t1075 * t1116;
t1202 = pkin(2) * t1298 - t1076 * t1116;
t1201 = pkin(2) * t1297 - t1077 * t1116;
t1200 = Ifges(3,3) * t1337 + t1017 * t1081;
t1199 = Ifges(3,3) * t1336 + t1019 * t1082;
t1198 = Ifges(3,3) * t1335 + t1020 * t1083;
t1197 = Ifges(3,3) * t1334 + t1021 * t1084;
t1176 = t1010 * t1305 + t1017 * t1053;
t1175 = t1014 * t1304 + t1019 * t1055;
t1174 = t1015 * t1303 + t1020 * t1056;
t1173 = t1016 * t1302 + t1021 * t1057;
t1074 = pkin(5) * t1118 + t1120 * t1377;
t1001 = -t1074 * t1113 + t1204 * t1115;
t993 = t1001 * t1093 + t1034 * t1097;
t994 = -t1001 * t1097 + t1034 * t1093;
t1168 = t1399 * (-t1065 * t993 - t1069 * t994);
t1078 = pkin(5) * t1128 + t1134 * t1376;
t1003 = -t1078 * t1113 + t1203 * t1115;
t995 = t1003 * t1094 + t1038 * t1098;
t996 = -t1003 * t1098 + t1038 * t1094;
t1167 = t1398 * (-t1066 * t995 - t1070 * t996);
t1079 = pkin(5) * t1130 + t1136 * t1375;
t1004 = -t1079 * t1113 + t1202 * t1115;
t997 = t1004 * t1095 + t1039 * t1099;
t998 = -t1004 * t1099 + t1039 * t1095;
t1166 = t1397 * (-t1067 * t997 - t1071 * t998);
t1080 = pkin(5) * t1132 + t1138 * t1374;
t1005 = -t1080 * t1113 + t1201 * t1115;
t1000 = -t1005 * t1100 + t1040 * t1096;
t999 = t1005 * t1096 + t1040 * t1100;
t1165 = t1396 * (-t1000 * t1072 - t1068 * t999);
t1164 = t1010 * t1332 + t1017 * t1317;
t1163 = t1014 * t1330 + t1019 * t1316;
t1162 = t1015 * t1328 + t1020 * t1315;
t1161 = t1016 * t1326 + t1021 * t1314;
t1160 = (t1065 * t1097 + t1069 * t1093) * t1325;
t1159 = (t1066 * t1098 + t1070 * t1094) * t1324;
t1158 = (t1067 * t1099 + t1071 * t1095) * t1323;
t1157 = (t1068 * t1100 + t1072 * t1096) * t1322;
t1145 = mrSges(4,1);
t1144 = mrSges(4,2);
t1008 = t1080 * t1115 + t1201 * t1113;
t1007 = t1079 * t1115 + t1202 * t1113;
t1006 = t1078 * t1115 + t1203 * t1113;
t1002 = t1074 * t1115 + t1204 * t1113;
t992 = t1021 * t1157;
t991 = t1020 * t1158;
t990 = t1019 * t1159;
t989 = t1017 * t1160;
t988 = t1157 * t1334;
t987 = t1158 * t1335;
t986 = t1159 * t1336;
t985 = t1160 * t1337;
t978 = (-t1000 * t1068 + t1072 * t999) * t1396;
t977 = (-t1067 * t998 + t1071 * t997) * t1397;
t976 = (-t1066 * t996 + t1070 * t995) * t1398;
t970 = (-t1065 * t994 + t1069 * t993) * t1399;
t1 = [t994 * t1409 + t996 * t1410 + t998 * t1411 + t1000 * t1412 - t1408 * t1100 - t1407 * t1099 - t1406 * t1098 - t1405 * t1097 + ((-t1162 * t1253 + t998 * t1319) * t1166 + (t1020 * (-t1174 * t1253 + t998 * t1246) + (-t1198 * t1253 + t998 * t1329) * t1335) * t1401 + (t1000 * t1318 - t1161 * t1250) * t1165 + (t1021 * (t1000 * t1245 - t1173 * t1250) + (t1000 * t1327 - t1197 * t1250) * t1334) * t1402 + t1101 * t1144 - t1102 * t1145 + (-t1164 * t1259 + t994 * t1321) * t1168 + (t1017 * (-t1176 * t1259 + t994 * t1248) + (-t1200 * t1259 + t994 * t1333) * t1337) * t1403 + (-t1163 * t1256 + t996 * t1320) * t1167 + (t1019 * (-t1175 * t1256 + t996 * t1247) + (-t1199 * t1256 + t996 * t1331) * t1336) * t1404) * t1112; t993 * t1409 + t995 * t1410 + t997 * t1411 + t999 * t1412 + t1408 * t1096 + t1407 * t1095 + t1406 * t1094 + t1405 * t1093 + ((t1162 * t1254 + t997 * t1319) * t1166 + (t1020 * (t1174 * t1254 + t997 * t1246) + (t1198 * t1254 + t997 * t1329) * t1335) * t1401 + (t1161 * t1251 + t999 * t1318) * t1165 + (t1021 * (t1173 * t1251 + t999 * t1245) + (t1197 * t1251 + t999 * t1327) * t1334) * t1402 - t1101 * t1145 - t1102 * t1144 + (t1164 * t1260 + t993 * t1321) * t1168 + (t1017 * (t1176 * t1260 + t993 * t1248) + (t1200 * t1260 + t993 * t1333) * t1337) * t1403 + (t1163 * t1257 + t995 * t1320) * t1167 + (t1019 * (t1175 * t1257 + t995 * t1247) + (t1199 * t1257 + t995 * t1331) * t1336) * t1404) * t1112; t1002 * t1409 + t1006 * t1410 + t1007 * t1411 + t1008 * t1412 + t1421 * t1024 + t1422 * t1023 + t1423 * t1022 + t1424 * t1018 + t1428 * t1013 + t1427 * t1012 + t1426 * t1011 + t1425 * t1009 + ((t1007 * t1319 + (t1012 * t1328 + t1023 * t1315) * t1323) * t1166 + (t1020 * (t1007 * t1246 + (t1012 * t1303 + t1023 * t1056) * t1323) + (t1007 * t1329 + (t1012 * t1369 + t1023 * t1083) * t1323) * t1335) * t1401 + (t1008 * t1318 + (t1013 * t1326 + t1024 * t1314) * t1322) * t1165 + (t1021 * (t1008 * t1245 + (t1013 * t1302 + t1024 * t1057) * t1322) + (t1008 * t1327 + (t1013 * t1369 + t1024 * t1084) * t1322) * t1334) * t1402 + (t1002 * t1321 + (t1009 * t1332 + t1018 * t1317) * t1325) * t1168 + (t1017 * (t1002 * t1248 + (t1009 * t1305 + t1018 * t1053) * t1325) + (t1002 * t1333 + (t1009 * t1369 + t1018 * t1081) * t1325) * t1337) * t1403 + (t1006 * t1320 + (t1011 * t1330 + t1022 * t1316) * t1324) * t1167 + (t1019 * (t1006 * t1247 + (t1011 * t1304 + t1022 * t1055) * t1324) + (t1006 * t1331 + (t1011 * t1369 + t1022 * t1082) * t1324) * t1336) * t1404) * t1112; t1436 * t992 + t1437 * t991 + t1438 * t990 + t1439 * t989 + t1433 * t988 + t1434 * t987 + t1435 * t986 + t1440 * t985 + t1413 * t978 + t1414 * t977 + t1415 * t976 + t1416 * t970 + ((t1027 * t987 + t1105 * t977 + t991 * t1315) * t1166 + (t1020 * (t1056 * t991 + t1083 * t987 + t977 * t1315) + (Ifges(3,3) * t987 + t1027 * t977 + t1083 * t991) * t1335) * t1401 + (t1028 * t988 + t1105 * t978 + t992 * t1314) * t1165 + (t1021 * (t1057 * t992 + t1084 * t988 + t978 * t1314) + (Ifges(3,3) * t988 + t1028 * t978 + t1084 * t992) * t1334) * t1402 + (t1025 * t985 + t1105 * t970 + t989 * t1317) * t1168 + (t1017 * (t1053 * t989 + t1081 * t985 + t970 * t1317) + (Ifges(3,3) * t985 + t1025 * t970 + t1081 * t989) * t1337) * t1403 + (t1026 * t986 + t1105 * t976 + t990 * t1316) * t1167 + (t1019 * (t1055 * t990 + t1082 * t986 + t976 * t1316) + (Ifges(3,3) * t986 + t1026 * t976 + t1082 * t990) * t1336) * t1404) * t1112;];
taucX  = t1;
