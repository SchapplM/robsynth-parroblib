% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V1G2A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G2A0_gravload_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G2A0_gravload_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V1G2A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G2A0_gravload_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G2A0_gravload_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G2A0_gravload_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:04:57
% EndTime: 2020-08-07 11:05:00
% DurationCPUTime: 3.22s
% Computational Cost: add. (1489->261), mult. (4024->535), div. (228->9), fcn. (4440->30), ass. (0->277)
t2598 = sin(pkin(3));
t2599 = cos(pkin(6));
t2600 = cos(pkin(3));
t2743 = t2599 * t2600;
t2552 = -t2598 * g(1) + g(2) * t2743;
t2553 = g(1) * t2743 + t2598 * g(2);
t2608 = legFrame(1,2);
t2586 = sin(t2608);
t2590 = cos(t2608);
t2563 = t2590 * g(1) - t2586 * g(2);
t2597 = sin(pkin(6));
t2575 = t2600 * t2597 * g(3);
t2582 = t2599 * g(3);
t2614 = sin(qJ(2,1));
t2620 = cos(qJ(2,1));
t2458 = (t2552 * t2586 - t2553 * t2590 + t2575) * t2620 + t2614 * (t2563 * t2597 + t2582);
t2613 = sin(qJ(3,1));
t2776 = t2458 * t2613;
t2621 = xP(4);
t2591 = sin(t2621);
t2592 = cos(t2621);
t2624 = koppelP(2,2);
t2628 = koppelP(2,1);
t2546 = t2591 * t2628 + t2592 * t2624;
t2550 = -t2591 * t2624 + t2592 * t2628;
t2607 = legFrame(2,2);
t2585 = sin(t2607);
t2589 = cos(t2607);
t2645 = t2546 * t2589 + t2585 * t2550;
t2617 = cos(qJ(3,2));
t2612 = sin(qJ(2,2));
t2618 = cos(qJ(2,2));
t2763 = pkin(2) * t2617;
t2565 = -t2618 * pkin(5) + t2612 * t2763;
t2611 = sin(qJ(3,2));
t2737 = t2600 * t2611;
t2511 = pkin(2) * t2737 + t2565 * t2598;
t2767 = 0.1e1 / t2511;
t2755 = t2767 / t2617;
t2775 = t2645 * t2755;
t2623 = koppelP(3,2);
t2627 = koppelP(3,1);
t2545 = t2591 * t2627 + t2592 * t2623;
t2549 = -t2591 * t2623 + t2592 * t2627;
t2606 = legFrame(3,2);
t2584 = sin(t2606);
t2588 = cos(t2606);
t2646 = t2545 * t2588 + t2584 * t2549;
t2615 = cos(qJ(3,3));
t2610 = sin(qJ(2,3));
t2616 = cos(qJ(2,3));
t2764 = pkin(2) * t2615;
t2564 = -t2616 * pkin(5) + t2610 * t2764;
t2609 = sin(qJ(3,3));
t2739 = t2600 * t2609;
t2510 = pkin(2) * t2739 + t2564 * t2598;
t2768 = 0.1e1 / t2510;
t2756 = t2768 / t2615;
t2774 = t2646 * t2756;
t2734 = t2600 * t2614;
t2526 = t2597 * t2734 - t2599 * t2620;
t2731 = t2600 * t2620;
t2535 = t2597 * t2731 + t2599 * t2614;
t2619 = cos(qJ(3,1));
t2762 = pkin(2) * t2619;
t2681 = t2526 * pkin(5) + t2535 * t2762;
t2596 = 0.1e1 / t2619;
t2713 = t2614 * t2619;
t2566 = pkin(2) * t2713 - t2620 * pkin(5);
t2735 = t2600 * t2613;
t2512 = pkin(2) * t2735 + t2566 * t2598;
t2766 = 0.1e1 / t2512;
t2754 = t2766 * t2596;
t2773 = t2681 * t2754;
t2602 = sin(qJ(2,4));
t2604 = cos(qJ(2,4));
t2740 = t2600 * t2604;
t2522 = t2597 * t2740 + t2599 * t2602;
t2741 = t2600 * t2602;
t2523 = -t2597 * t2741 + t2599 * t2604;
t2603 = cos(qJ(3,4));
t2765 = pkin(2) * t2603;
t2684 = -pkin(5) * t2523 + t2522 * t2765;
t2593 = 0.1e1 / t2603;
t2728 = t2602 * t2603;
t2554 = pkin(2) * t2728 - t2604 * pkin(5);
t2601 = sin(qJ(3,4));
t2742 = t2600 * t2601;
t2506 = pkin(2) * t2742 + t2554 * t2598;
t2769 = 0.1e1 / t2506;
t2757 = t2769 * t2593;
t2772 = t2684 * t2757;
t2561 = t2588 * g(1) - t2584 * g(2);
t2771 = (t2552 * t2584 - t2553 * t2588 + t2575) * t2616 + t2610 * (t2561 * t2597 + t2582);
t2562 = t2589 * g(1) - t2585 * g(2);
t2770 = (t2552 * t2585 - t2553 * t2589 + t2575) * t2618 + t2612 * (t2562 * t2597 + t2582);
t2761 = t2771 * t2768;
t2760 = t2770 * t2767;
t2730 = t2601 * t2602;
t2744 = t2598 * t2603;
t2524 = t2600 * t2730 + t2744;
t2729 = t2601 * t2604;
t2491 = -t2524 * t2597 + t2599 * t2729;
t2759 = t2491 * t2769;
t2706 = t2619 * t2598;
t2716 = t2613 * t2614;
t2540 = t2600 * t2716 + t2706;
t2715 = t2613 * t2620;
t2495 = -t2540 * t2597 + t2599 * t2715;
t2758 = t2495 * t2766;
t2605 = legFrame(4,2);
t2583 = sin(t2605);
t2587 = cos(t2605);
t2556 = t2583 * g(1) + t2587 * g(2);
t2753 = t2769 * t2556;
t2557 = t2584 * g(1) + t2588 * g(2);
t2752 = t2768 * t2557;
t2558 = t2585 * g(1) + t2589 * g(2);
t2751 = t2767 * t2558;
t2559 = t2586 * g(1) + t2590 * g(2);
t2750 = t2766 * t2559;
t2749 = t2556 * t2598;
t2748 = t2557 * t2598;
t2747 = t2558 * t2598;
t2746 = t2559 * t2598;
t2745 = t2598 * t2601;
t2738 = t2600 * t2610;
t2736 = t2600 * t2612;
t2733 = t2600 * t2616;
t2732 = t2600 * t2618;
t2727 = t2603 * t2600;
t2726 = t2603 * t2604;
t2725 = t2609 * t2598;
t2724 = t2609 * t2610;
t2723 = t2609 * t2616;
t2721 = t2611 * t2598;
t2720 = t2611 * t2612;
t2719 = t2611 * t2618;
t2717 = t2613 * t2598;
t2712 = t2615 * t2598;
t2711 = t2615 * t2600;
t2710 = t2615 * t2616;
t2709 = t2617 * t2598;
t2708 = t2617 * t2600;
t2707 = t2617 * t2618;
t2705 = t2619 * t2620;
t2622 = koppelP(4,2);
t2626 = koppelP(4,1);
t2544 = t2591 * t2626 + t2592 * t2622;
t2548 = -t2591 * t2622 + t2592 * t2626;
t2647 = t2544 * t2587 + t2583 * t2548;
t2704 = t2647 * t2759;
t2625 = koppelP(1,2);
t2629 = koppelP(1,1);
t2547 = t2591 * t2629 + t2592 * t2625;
t2551 = -t2591 * t2625 + t2592 * t2629;
t2644 = t2547 * t2590 + t2586 * t2551;
t2703 = t2644 * t2758;
t2520 = -t2597 * t2602 + t2599 * t2740;
t2521 = t2597 * t2604 + t2599 * t2741;
t2702 = (-pkin(5) * t2521 - t2520 * t2765) * t2757;
t2527 = -t2597 * t2610 + t2599 * t2733;
t2530 = t2597 * t2616 + t2599 * t2738;
t2701 = (-pkin(5) * t2530 - t2527 * t2764) * t2756;
t2528 = -t2597 * t2612 + t2599 * t2732;
t2531 = t2597 * t2618 + t2599 * t2736;
t2700 = (-pkin(5) * t2531 - t2528 * t2763) * t2755;
t2529 = -t2597 * t2614 + t2599 * t2731;
t2532 = t2597 * t2620 + t2599 * t2734;
t2699 = (-pkin(5) * t2532 - t2529 * t2762) * t2754;
t2639 = t2524 * t2599 + t2597 * t2729;
t2698 = t2639 * t2757;
t2538 = t2600 * t2724 + t2712;
t2638 = -t2538 * t2597 + t2599 * t2723;
t2697 = t2638 * t2761;
t2539 = t2600 * t2720 + t2709;
t2636 = -t2539 * t2597 + t2599 * t2719;
t2696 = t2636 * t2760;
t2637 = t2538 * t2599 + t2597 * t2723;
t2695 = t2637 * t2756;
t2635 = t2539 * t2599 + t2597 * t2719;
t2694 = t2635 * t2755;
t2634 = t2540 * t2599 + t2597 * t2715;
t2693 = t2634 * t2754;
t2692 = (-t2523 * t2601 + t2597 * t2744) * t2769 * t2583;
t2691 = (t2526 * t2613 + t2597 * t2706) * t2766 * t2586;
t2690 = t2587 * t2757;
t2689 = t2584 * t2756;
t2688 = t2588 * t2756;
t2687 = t2585 * t2755;
t2686 = t2589 * t2755;
t2685 = t2590 * t2754;
t2533 = t2597 * t2733 + t2599 * t2610;
t2536 = -t2597 * t2738 + t2599 * t2616;
t2683 = -pkin(5) * t2536 + t2533 * t2764;
t2534 = t2597 * t2732 + t2599 * t2612;
t2537 = -t2597 * t2736 + t2599 * t2618;
t2682 = -pkin(5) * t2537 + t2534 * t2763;
t2560 = t2587 * g(1) - t2583 * g(2);
t2452 = (t2552 * t2583 - t2553 * t2587 + t2575) * t2604 + t2602 * (t2560 * t2597 + t2582);
t2680 = t2452 * t2601 * t2757;
t2679 = t2771 * t2609 * t2756;
t2678 = t2770 * t2611 * t2755;
t2677 = t2754 * t2776;
t2676 = t2593 * t2704;
t2675 = t2596 * t2703;
t2674 = t2638 * t2774;
t2673 = t2636 * t2775;
t2672 = t2583 * t2772;
t2671 = t2684 * t2690;
t2670 = t2647 * t2772;
t2669 = t2683 * t2689;
t2668 = t2683 * t2688;
t2667 = t2683 * t2774;
t2666 = t2682 * t2687;
t2665 = t2682 * t2686;
t2664 = t2682 * t2775;
t2663 = t2586 * t2773;
t2662 = t2681 * t2685;
t2661 = t2644 * t2773;
t2660 = t2491 * t2690;
t2659 = t2638 * t2689;
t2658 = t2638 * t2688;
t2657 = t2636 * t2687;
t2656 = t2636 * t2686;
t2655 = t2495 * t2685;
t2654 = t2593 * t2692;
t2653 = t2596 * t2691;
t2652 = t2452 * t2692;
t2651 = t2491 * t2680;
t2650 = t2638 * t2679;
t2649 = t2636 * t2678;
t2648 = t2495 * t2677;
t2643 = pkin(2) * t2745 - t2554 * t2600;
t2642 = pkin(2) * t2725 - t2564 * t2600;
t2641 = pkin(2) * t2721 - t2565 * t2600;
t2640 = pkin(2) * t2717 - t2566 * t2600;
t2630 = 0.1e1 / pkin(2);
t2571 = t2592 * g(1) + t2591 * g(2);
t2570 = t2591 * g(1) - t2592 * g(2);
t2569 = pkin(2) * t2705 + pkin(5) * t2614;
t2568 = pkin(2) * t2707 + pkin(5) * t2612;
t2567 = pkin(2) * t2710 + pkin(5) * t2610;
t2555 = pkin(2) * t2726 + pkin(5) * t2602;
t2543 = t2612 * t2708 - t2721;
t2542 = t2610 * t2711 - t2725;
t2541 = t2600 * t2713 - t2717;
t2525 = t2602 * t2727 - t2745;
t2470 = -t2597 * t2569 + t2640 * t2599;
t2469 = -t2597 * t2568 + t2641 * t2599;
t2468 = -t2597 * t2567 + t2642 * t2599;
t2467 = -t2597 * t2555 + t2643 * t2599;
t2466 = -g(3) * t2526 + t2563 * t2532 + t2614 * t2746;
t2465 = g(3) * t2537 + t2562 * t2531 + t2612 * t2747;
t2464 = g(3) * t2536 + t2561 * t2530 + t2610 * t2748;
t2463 = g(3) * t2535 - t2563 * t2529 - t2620 * t2746;
t2462 = g(3) * t2534 - t2562 * t2528 - t2618 * t2747;
t2461 = g(3) * t2533 - t2561 * t2527 - t2616 * t2748;
t2460 = g(3) * t2523 + t2560 * t2521 + t2602 * t2749;
t2459 = g(3) * t2522 - t2560 * t2520 - t2604 * t2749;
t2451 = -t2470 * t2590 + t2586 * t2512;
t2450 = t2470 * t2586 + t2590 * t2512;
t2449 = -t2469 * t2589 + t2585 * t2511;
t2448 = t2469 * t2585 + t2589 * t2511;
t2447 = -t2468 * t2588 + t2584 * t2510;
t2446 = t2468 * t2584 + t2588 * t2510;
t2445 = -t2467 * t2587 + t2583 * t2506;
t2444 = t2467 * t2583 + t2587 * t2506;
t2443 = (-t2543 * t2597 + t2599 * t2707) * g(3) + (t2543 * t2599 + t2597 * t2707) * t2562 + t2558 * (t2612 * t2709 + t2737);
t2442 = (-t2542 * t2597 + t2599 * t2710) * g(3) + (t2542 * t2599 + t2597 * t2710) * t2561 + t2557 * (t2610 * t2712 + t2739);
t2441 = (-t2541 * t2597 + t2599 * t2705) * g(3) + (t2541 * t2599 + t2597 * t2705) * t2563 + t2559 * (t2614 * t2706 + t2735);
t2440 = t2495 * g(3) + t2563 * t2634 - t2559 * (-t2598 * t2716 + t2600 * t2619);
t2439 = t2636 * g(3) + t2562 * t2635 - t2558 * (-t2598 * t2720 + t2708);
t2438 = t2638 * g(3) + t2561 * t2637 - t2557 * (-t2598 * t2724 + t2711);
t2437 = g(3) * (-t2525 * t2597 + t2599 * t2726) + (t2525 * t2599 + t2597 * t2726) * t2560 + t2556 * (t2598 * t2728 + t2742);
t2436 = t2491 * g(3) + t2560 * t2639 - t2556 * (-t2598 * t2730 + t2727);
t1 = [-t2445 * t2753 - t2447 * t2752 - t2449 * t2751 - t2451 * t2750, 0, t2459 * t2660 + t2461 * t2658 + t2462 * t2656 + t2463 * t2655, t2460 * t2660 + t2464 * t2658 + t2465 * t2656 + t2466 * t2655, 0, 0, 0, 0, 0, t2587 * t2452 * t2759 + t2588 * t2697 + t2589 * t2696 + t2590 * t2458 * t2758 + (-t2436 * t2671 - t2438 * t2668 - t2439 * t2665 - t2440 * t2662) * t2630, -t2587 * t2651 - t2588 * t2650 - t2589 * t2649 - t2590 * t2648 + (-t2437 * t2671 - t2441 * t2662 - t2442 * t2668 - t2443 * t2665) * t2630, 0, 0, 0, -t2591 * t2570 - t2592 * t2571; -t2444 * t2753 - t2446 * t2752 - t2448 * t2751 - t2450 * t2750, 0, t2459 * t2654 - t2461 * t2659 - t2462 * t2657 + t2463 * t2653, t2460 * t2654 - t2464 * t2659 - t2465 * t2657 + t2466 * t2653, 0, 0, 0, 0, 0, t2652 - t2584 * t2697 - t2585 * t2696 + t2458 * t2691 + (t2436 * t2672 + t2438 * t2669 + t2439 * t2666 + t2440 * t2663) * t2630, -t2593 * t2601 * t2652 + t2584 * t2650 + t2585 * t2649 - t2653 * t2776 + (t2437 * t2672 + t2441 * t2663 + t2442 * t2669 + t2443 * t2666) * t2630, 0, 0, 0, t2592 * t2570 - t2591 * t2571; -(t2599 * t2569 + t2640 * t2597) * t2750 - (t2599 * t2568 + t2641 * t2597) * t2751 - (t2599 * t2567 + t2642 * t2597) * t2752 - (t2599 * t2555 + t2643 * t2597) * t2753, 0, -t2459 * t2698 - t2461 * t2695 - t2462 * t2694 - t2463 * t2693, -t2460 * t2698 - t2464 * t2695 - t2465 * t2694 - t2466 * t2693, 0, 0, 0, 0, 0, -t2639 * t2769 * t2452 - t2637 * t2761 - t2635 * t2760 - t2634 * t2766 * t2458 + (t2436 * t2702 + t2438 * t2701 + t2439 * t2700 + t2440 * t2699) * t2630, t2639 * t2680 + t2637 * t2679 + t2635 * t2678 + t2634 * t2677 + (t2437 * t2702 + t2441 * t2699 + t2442 * t2701 + t2443 * t2700) * t2630, 0, 0, 0, -g(3); -(t2450 * t2551 - t2451 * t2547) * t2750 - (t2448 * t2550 - t2449 * t2546) * t2751 - (t2446 * t2549 - t2447 * t2545) * t2752 - (t2444 * t2548 - t2445 * t2544) * t2753, 0, -t2459 * t2676 - t2461 * t2674 - t2462 * t2673 - t2463 * t2675, -t2460 * t2676 - t2464 * t2674 - t2465 * t2673 - t2466 * t2675, 0, 0, 0, 0, 0, -t2452 * t2704 - t2646 * t2697 - t2645 * t2696 - t2458 * t2703 + (t2436 * t2670 + t2438 * t2667 + t2439 * t2664 + t2440 * t2661) * t2630, t2647 * t2651 + t2646 * t2650 + t2645 * t2649 + t2644 * t2648 + (t2437 * t2670 + t2441 * t2661 + t2442 * t2667 + t2443 * t2664) * t2630, 0, t2570, t2571, 0;];
tau_reg  = t1;
