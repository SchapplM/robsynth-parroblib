% Calculate vector of centrifugal and coriolis load on the joints for
% P4PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% taucX [4x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-09-20 23:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_slag_vp2: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-09-20 22:59:34
% EndTime: 2020-09-20 22:59:48
% DurationCPUTime: 14.49s
% Computational Cost: add. (37328->464), mult. (107080->942), div. (13200->9), fcn. (114308->30), ass. (0->365)
t1117 = cos(qJ(3,4));
t1101 = t1117 ^ 2;
t1115 = sin(qJ(3,4));
t1119 = Ifges(3,1) - Ifges(3,2);
t1381 = Ifges(3,1) + Ifges(2,3);
t1398 = 2 * Ifges(3,4);
t1051 = t1115 * t1117 * t1398 - t1101 * t1119 + t1381;
t1079 = Ifges(3,5) * t1115 + Ifges(3,6) * t1117;
t1281 = t1115 * t1119;
t1112 = sin(pkin(3));
t1116 = sin(qJ(2,4));
t1118 = cos(qJ(2,4));
t1120 = mrSges(2,2) - mrSges(3,3);
t1238 = t1117 * mrSges(3,1) - mrSges(3,2) * t1115;
t1315 = ((mrSges(2,1) + t1238) * t1118 - t1116 * t1120) * t1112;
t1111 = sin(pkin(6));
t1113 = cos(pkin(6));
t1114 = cos(pkin(3));
t1290 = t1114 * t1118;
t1291 = t1114 * t1116;
t1375 = pkin(2) * t1117;
t1007 = (-t1111 * t1116 + t1113 * t1290) * t1375 + pkin(5) * (t1111 * t1118 + t1113 * t1291);
t1008 = (t1111 * t1290 + t1113 * t1116) * t1375 + (t1111 * t1291 - t1113 * t1118) * pkin(5);
t1138 = xDP(3);
t1141 = xP(4);
t1099 = sin(t1141);
t1100 = cos(t1141);
t1144 = koppelP(4,2);
t1148 = koppelP(4,1);
t1063 = t1099 * t1148 + t1100 * t1144;
t1067 = -t1099 * t1144 + t1100 * t1148;
t1121 = legFrame(4,2);
t1091 = sin(t1121);
t1095 = cos(t1121);
t1137 = xDP(4);
t1139 = xDP(2);
t1140 = xDP(1);
t1206 = (t1067 * t1137 + t1139) * t1091 - (-t1063 * t1137 + t1140) * t1095;
t1154 = 0.1e1 / pkin(2);
t1280 = t1116 * t1117;
t1071 = pkin(2) * t1280 - pkin(5) * t1118;
t1376 = pkin(2) * t1114;
t1032 = t1071 * t1112 + t1115 * t1376;
t1397 = 0.1e1 / t1032;
t1323 = t1397 / t1117;
t1256 = t1154 * t1323;
t952 = (t1206 * t1007 + t1008 * t1138) * t1256;
t1346 = t1115 * t952;
t1388 = -Ifges(3,6) / 0.2e1;
t1389 = Ifges(3,5) / 0.2e1;
t1393 = 0.2e1 * t1101;
t1242 = t1112 * t1280;
t1270 = pkin(2) * t1346;
t1298 = t1112 * t1118;
t1380 = pkin(2) * t1101;
t1170 = t1112 * t1117 + t1115 * t1291;
t1282 = t1115 * t1118;
t1015 = t1170 * t1111 - t1113 * t1282;
t1016 = t1111 * t1282 + t1170 * t1113;
t973 = (t1015 * t1138 + t1206 * t1016) * t1323;
t1383 = pkin(5) * t973;
t1387 = pkin(2) * t952;
t1266 = t1115 * t1383;
t919 = t1266 - t1387;
t883 = (((t1114 * t952 + t973 * t1298) * t1380 - (t1270 - t1383) * t1242 + t1114 * t919) * t973 - (-t952 * t1298 + (-t1101 * t1114 + t1115 * t1242 + t1114) * t973) * t1387) * t1323;
t1283 = t1114 * t1154;
t1299 = t1112 * t1115;
t1152 = pkin(5) ^ 2;
t1153 = pkin(2) ^ 2;
t1362 = (-pkin(5) * t1270 + (t1101 * t1153 + t1152) * t973) * t973;
t891 = (t1283 * t1362 + (-t952 * t1071 * t1299 + t1114 * (t952 * t1380 - t1266)) * t952) * t1323;
t895 = (t919 * t1387 - t1362) * t1397;
t1436 = -t1051 * t883 - t1079 * t891 - t895 * t1315 + 0.2e1 * ((t973 * t1281 + t952 * t1389) * t1117 + t1346 * t1388 + (t1393 - 0.1e1) * t973 * Ifges(3,4)) * t952;
t1222 = mrSges(3,1) * t1115 + mrSges(3,2) * t1117;
t1023 = -t1116 * t1112 * t1222 + t1238 * t1114;
t972 = t973 ^ 2;
t1435 = -Ifges(3,3) * t891 - t1023 * t895 - t1079 * t883 - (Ifges(3,4) * t1393 + t1117 * t1281 - Ifges(3,4)) * t972;
t1131 = cos(qJ(3,3));
t1104 = t1131 ^ 2;
t1125 = sin(qJ(3,3));
t1279 = t1125 * t1131;
t1053 = -t1104 * t1119 + t1279 * t1398 + t1381;
t1080 = Ifges(3,5) * t1125 + Ifges(3,6) * t1131;
t1126 = sin(qJ(2,3));
t1132 = cos(qJ(2,3));
t1237 = t1131 * mrSges(3,1) - mrSges(3,2) * t1125;
t1314 = ((mrSges(2,1) + t1237) * t1132 - t1126 * t1120) * t1112;
t1289 = t1114 * t1126;
t1169 = t1112 * t1131 + t1125 * t1289;
t1278 = t1125 * t1132;
t1017 = t1169 * t1111 - t1113 * t1278;
t1020 = t1111 * t1278 + t1169 * t1113;
t1145 = koppelP(3,2);
t1149 = koppelP(3,1);
t1064 = t1099 * t1149 + t1100 * t1145;
t1068 = -t1099 * t1145 + t1100 * t1149;
t1122 = legFrame(3,2);
t1092 = sin(t1122);
t1096 = cos(t1122);
t1205 = (t1068 * t1137 + t1139) * t1092 - (-t1064 * t1137 + t1140) * t1096;
t1277 = t1126 * t1131;
t1073 = pkin(2) * t1277 - pkin(5) * t1132;
t1036 = t1073 * t1112 + t1125 * t1376;
t1396 = 0.1e1 / t1036;
t1322 = t1396 / t1131;
t980 = (t1017 * t1138 + t1205 * t1020) * t1322;
t1344 = t1125 * t980;
t1286 = t1114 * t1132;
t1374 = pkin(2) * t1131;
t1009 = (-t1111 * t1126 + t1113 * t1286) * t1374 + pkin(5) * (t1111 * t1132 + t1113 * t1289);
t1012 = (t1111 * t1286 + t1113 * t1126) * t1374 + (t1111 * t1289 - t1113 * t1132) * pkin(5);
t1253 = t1154 * t1322;
t957 = (t1205 * t1009 + t1012 * t1138) * t1253;
t1345 = t1125 * t957;
t1392 = 0.2e1 * t1104;
t1241 = t1112 * t1277;
t1269 = pkin(2) * t1345;
t1294 = t1112 * t1132;
t1379 = pkin(2) * t1104;
t1386 = pkin(2) * t957;
t1265 = pkin(5) * t1344;
t921 = t1265 - t1386;
t884 = (((t1114 * t957 + t980 * t1294) * t1379 - (-pkin(5) * t980 + t1269) * t1241 + t1114 * t921) * t980 + (t957 * t1294 + (t1104 * t1114 - t1125 * t1241 - t1114) * t980) * t1386) * t1322;
t1297 = t1112 * t1125;
t1361 = (-pkin(5) * t1269 + (t1104 * t1153 + t1152) * t980) * t980;
t892 = (t1283 * t1361 + (-t957 * t1073 * t1297 + t1114 * (t957 * t1379 - t1265)) * t957) * t1322;
t896 = (t921 * t1386 - t1361) * t1396;
t1434 = -t1053 * t884 - t1080 * t892 - t896 * t1314 + 0.2e1 * ((t1119 * t1344 + t957 * t1389) * t1131 + t1345 * t1388 + (t1392 - 0.1e1) * t980 * Ifges(3,4)) * t957;
t1133 = cos(qJ(3,2));
t1106 = t1133 ^ 2;
t1127 = sin(qJ(3,2));
t1276 = t1127 * t1133;
t1054 = -t1106 * t1119 + t1276 * t1398 + t1381;
t1081 = Ifges(3,5) * t1127 + Ifges(3,6) * t1133;
t1128 = sin(qJ(2,2));
t1134 = cos(qJ(2,2));
t1236 = t1133 * mrSges(3,1) - mrSges(3,2) * t1127;
t1313 = ((mrSges(2,1) + t1236) * t1134 - t1128 * t1120) * t1112;
t1288 = t1114 * t1128;
t1168 = t1112 * t1133 + t1127 * t1288;
t1275 = t1127 * t1134;
t1018 = t1168 * t1111 - t1113 * t1275;
t1021 = t1111 * t1275 + t1168 * t1113;
t1146 = koppelP(2,2);
t1150 = koppelP(2,1);
t1065 = t1099 * t1150 + t1100 * t1146;
t1069 = -t1099 * t1146 + t1100 * t1150;
t1123 = legFrame(2,2);
t1093 = sin(t1123);
t1097 = cos(t1123);
t1204 = (t1069 * t1137 + t1139) * t1093 - (-t1065 * t1137 + t1140) * t1097;
t1274 = t1128 * t1133;
t1074 = pkin(2) * t1274 - pkin(5) * t1134;
t1037 = t1074 * t1112 + t1127 * t1376;
t1395 = 0.1e1 / t1037;
t1321 = t1395 / t1133;
t981 = (t1018 * t1138 + t1204 * t1021) * t1321;
t1342 = t1127 * t981;
t1285 = t1114 * t1134;
t1373 = pkin(2) * t1133;
t1010 = (-t1111 * t1128 + t1113 * t1285) * t1373 + pkin(5) * (t1111 * t1134 + t1113 * t1288);
t1013 = (t1111 * t1285 + t1113 * t1128) * t1373 + (t1111 * t1288 - t1113 * t1134) * pkin(5);
t1250 = t1154 * t1321;
t958 = (t1204 * t1010 + t1013 * t1138) * t1250;
t1343 = t1127 * t958;
t1391 = 0.2e1 * t1106;
t1240 = t1112 * t1274;
t1268 = pkin(2) * t1343;
t1293 = t1112 * t1134;
t1378 = pkin(2) * t1106;
t1385 = pkin(2) * t958;
t1264 = pkin(5) * t1342;
t922 = t1264 - t1385;
t885 = (((t1114 * t958 + t981 * t1293) * t1378 - (-pkin(5) * t981 + t1268) * t1240 + t1114 * t922) * t981 + (t958 * t1293 + (t1106 * t1114 - t1127 * t1240 - t1114) * t981) * t1385) * t1321;
t1296 = t1112 * t1127;
t1360 = (-pkin(5) * t1268 + (t1106 * t1153 + t1152) * t981) * t981;
t893 = (t1283 * t1360 + (-t958 * t1074 * t1296 + t1114 * (t958 * t1378 - t1264)) * t958) * t1321;
t897 = (t922 * t1385 - t1360) * t1395;
t1433 = -t1054 * t885 - t1081 * t893 - t897 * t1313 + 0.2e1 * ((t1119 * t1342 + t958 * t1389) * t1133 + t1343 * t1388 + (t1391 - 0.1e1) * t981 * Ifges(3,4)) * t958;
t1135 = cos(qJ(3,1));
t1108 = t1135 ^ 2;
t1129 = sin(qJ(3,1));
t1273 = t1129 * t1135;
t1055 = -t1108 * t1119 + t1273 * t1398 + t1381;
t1082 = Ifges(3,5) * t1129 + Ifges(3,6) * t1135;
t1130 = sin(qJ(2,1));
t1136 = cos(qJ(2,1));
t1235 = t1135 * mrSges(3,1) - mrSges(3,2) * t1129;
t1312 = ((mrSges(2,1) + t1235) * t1136 - t1130 * t1120) * t1112;
t1287 = t1114 * t1130;
t1167 = t1112 * t1135 + t1129 * t1287;
t1272 = t1129 * t1136;
t1019 = t1167 * t1111 - t1113 * t1272;
t1022 = t1111 * t1272 + t1167 * t1113;
t1147 = koppelP(1,2);
t1151 = koppelP(1,1);
t1066 = t1099 * t1151 + t1100 * t1147;
t1070 = -t1099 * t1147 + t1100 * t1151;
t1124 = legFrame(1,2);
t1094 = sin(t1124);
t1098 = cos(t1124);
t1203 = (t1070 * t1137 + t1139) * t1094 - (-t1066 * t1137 + t1140) * t1098;
t1271 = t1130 * t1135;
t1075 = pkin(2) * t1271 - pkin(5) * t1136;
t1038 = t1075 * t1112 + t1129 * t1376;
t1394 = 0.1e1 / t1038;
t1320 = t1394 / t1135;
t982 = (t1019 * t1138 + t1203 * t1022) * t1320;
t1340 = t1129 * t982;
t1284 = t1114 * t1136;
t1372 = pkin(2) * t1135;
t1011 = (-t1111 * t1130 + t1113 * t1284) * t1372 + pkin(5) * (t1111 * t1136 + t1113 * t1287);
t1014 = (t1111 * t1284 + t1113 * t1130) * t1372 + (t1111 * t1287 - t1113 * t1136) * pkin(5);
t1247 = t1154 * t1320;
t959 = (t1203 * t1011 + t1014 * t1138) * t1247;
t1341 = t1129 * t959;
t1390 = 0.2e1 * t1108;
t1239 = t1112 * t1271;
t1267 = pkin(2) * t1341;
t1292 = t1112 * t1136;
t1377 = pkin(2) * t1108;
t1384 = pkin(2) * t959;
t1263 = pkin(5) * t1340;
t923 = t1263 - t1384;
t886 = (((t1114 * t959 + t982 * t1292) * t1377 - (-pkin(5) * t982 + t1267) * t1239 + t1114 * t923) * t982 - (-t959 * t1292 + (-t1108 * t1114 + t1129 * t1239 + t1114) * t982) * t1384) * t1320;
t1295 = t1112 * t1129;
t1359 = (-pkin(5) * t1267 + (t1108 * t1153 + t1152) * t982) * t982;
t894 = (t1283 * t1359 + (-t959 * t1075 * t1295 + t1114 * (t959 * t1377 - t1263)) * t959) * t1320;
t898 = (t923 * t1384 - t1359) * t1394;
t1432 = -t1055 * t886 - t1082 * t894 - t898 * t1312 + 0.2e1 * ((t1119 * t1340 + t959 * t1389) * t1135 + t1341 * t1388 + (t1390 - 0.1e1) * t982 * Ifges(3,4)) * t959;
t1221 = mrSges(3,1) * t1125 + mrSges(3,2) * t1131;
t1024 = -t1126 * t1112 * t1221 + t1237 * t1114;
t977 = t980 ^ 2;
t1431 = -Ifges(3,3) * t892 - t1024 * t896 - t1080 * t884 - (Ifges(3,4) * t1392 + t1119 * t1279 - Ifges(3,4)) * t977;
t1220 = mrSges(3,1) * t1127 + mrSges(3,2) * t1133;
t1025 = -t1128 * t1112 * t1220 + t1236 * t1114;
t978 = t981 ^ 2;
t1430 = -Ifges(3,3) * t893 - t1025 * t897 - t1081 * t885 - (Ifges(3,4) * t1391 + t1119 * t1276 - Ifges(3,4)) * t978;
t1219 = mrSges(3,1) * t1129 + mrSges(3,2) * t1135;
t1026 = -t1130 * t1112 * t1219 + t1235 * t1114;
t979 = t982 ^ 2;
t1429 = -Ifges(3,3) * t894 - t1026 * t898 - t1082 * t886 - (Ifges(3,4) * t1390 + t1119 * t1273 - Ifges(3,4)) * t979;
t1424 = t1429 * t1247;
t1423 = t1430 * t1250;
t1422 = t1431 * t1253;
t1421 = t1435 * t1256;
t1420 = t1432 * t1320;
t1419 = t1433 * t1321;
t1418 = t1436 * t1323;
t1417 = t1434 * t1322;
t1103 = m(1) + m(2) + m(3);
t1382 = t1120 / 0.2e1;
t951 = t952 ^ 2;
t1414 = -t1023 * t891 - t1103 * t895 - t883 * t1315 + ((-mrSges(2,1) * t972 - t1238 * (t972 + t951)) * t1116 - 0.2e1 * (t1222 * t952 + t973 * t1382) * t973 * t1118) * t1112 - t1114 * t951 * t1222;
t954 = t957 ^ 2;
t1413 = -t1024 * t892 - t1103 * t896 - t884 * t1314 + ((-mrSges(2,1) * t977 - t1237 * (t977 + t954)) * t1126 - 0.2e1 * (t1221 * t957 + t980 * t1382) * t980 * t1132) * t1112 - t1114 * t954 * t1221;
t955 = t958 ^ 2;
t1412 = -t1025 * t893 - t1103 * t897 - t885 * t1313 + ((-mrSges(2,1) * t978 - t1236 * (t978 + t955)) * t1128 - 0.2e1 * (t1220 * t958 + t981 * t1382) * t981 * t1134) * t1112 - t1114 * t955 * t1220;
t956 = t959 ^ 2;
t1411 = -t1026 * t894 - t1103 * t898 - t886 * t1312 + ((-mrSges(2,1) * t979 - t1235 * (t979 + t956)) * t1130 - 0.2e1 * (t1219 * t959 + t982 * t1382) * t982 * t1136) * t1112 - t1114 * t956 * t1219;
t1410 = t1394 * t1411;
t1409 = t1395 * t1412;
t1408 = t1396 * t1413;
t1407 = t1397 * t1414;
t1406 = t1422 * t1009 + t1417 * t1020;
t1405 = t1421 * t1007 + t1418 * t1016;
t1404 = -t1424 * t1011 - t1420 * t1022;
t1403 = -t1423 * t1010 - t1419 * t1021;
t1402 = (-t1066 * t1094 + t1070 * t1098) * t1320;
t1401 = (-t1065 * t1093 + t1069 * t1097) * t1321;
t1400 = (-t1064 * t1092 + t1068 * t1096) * t1322;
t1399 = (-t1063 * t1091 + t1067 * t1095) * t1323;
t1110 = t1137 ^ 2;
t1367 = Ifges(3,3) * t1154;
t1335 = t1007 * t1154;
t1334 = t1009 * t1154;
t1333 = t1010 * t1154;
t1332 = t1011 * t1154;
t1331 = t1023 * t1397;
t1330 = t1023 * t1154;
t1329 = t1024 * t1396;
t1328 = t1024 * t1154;
t1327 = t1025 * t1395;
t1326 = t1025 * t1154;
t1325 = t1026 * t1394;
t1324 = t1026 * t1154;
t1319 = t1397 * t1103;
t1318 = t1396 * t1103;
t1317 = t1395 * t1103;
t1316 = t1394 * t1103;
t1303 = t1079 * t1154;
t1302 = t1080 * t1154;
t1301 = t1081 * t1154;
t1300 = t1082 * t1154;
t1258 = t1091 * t1323;
t1257 = t1095 * t1323;
t1255 = t1092 * t1322;
t1254 = t1096 * t1322;
t1252 = t1093 * t1321;
t1251 = t1097 * t1321;
t1249 = t1094 * t1320;
t1248 = t1098 * t1320;
t1246 = t1397 * t1315;
t1245 = t1396 * t1314;
t1244 = t1395 * t1313;
t1243 = t1394 * t1312;
t1202 = pkin(2) * t1299 - t1071 * t1114;
t1201 = pkin(2) * t1297 - t1073 * t1114;
t1200 = pkin(2) * t1296 - t1074 * t1114;
t1199 = pkin(2) * t1295 - t1075 * t1114;
t1198 = Ifges(3,3) * t1335 + t1016 * t1079;
t1197 = Ifges(3,3) * t1334 + t1020 * t1080;
t1196 = Ifges(3,3) * t1333 + t1021 * t1081;
t1195 = Ifges(3,3) * t1332 + t1022 * t1082;
t1174 = t1007 * t1303 + t1016 * t1051;
t1173 = t1009 * t1302 + t1020 * t1053;
t1172 = t1010 * t1301 + t1021 * t1054;
t1171 = t1011 * t1300 + t1022 * t1055;
t1072 = pkin(5) * t1116 + t1118 * t1375;
t999 = t1072 * t1113 + t1202 * t1111;
t991 = t1032 * t1091 + t1095 * t999;
t992 = t1032 * t1095 - t1091 * t999;
t1166 = t1397 * (-t1063 * t992 - t1067 * t991);
t1076 = pkin(5) * t1126 + t1132 * t1374;
t1001 = t1076 * t1113 + t1201 * t1111;
t993 = t1001 * t1096 + t1036 * t1092;
t994 = -t1001 * t1092 + t1036 * t1096;
t1165 = t1396 * (-t1064 * t994 - t1068 * t993);
t1077 = pkin(5) * t1128 + t1134 * t1373;
t1002 = t1077 * t1113 + t1200 * t1111;
t995 = t1002 * t1097 + t1037 * t1093;
t996 = -t1002 * t1093 + t1037 * t1097;
t1164 = t1395 * (-t1065 * t996 - t1069 * t995);
t1078 = pkin(5) * t1130 + t1136 * t1372;
t1003 = t1078 * t1113 + t1199 * t1111;
t997 = t1003 * t1098 + t1038 * t1094;
t998 = -t1003 * t1094 + t1038 * t1098;
t1163 = t1394 * (-t1066 * t998 - t1070 * t997);
t1162 = t1007 * t1330 + t1016 * t1315;
t1161 = t1009 * t1328 + t1020 * t1314;
t1160 = t1010 * t1326 + t1021 * t1313;
t1159 = t1011 * t1324 + t1022 * t1312;
t1158 = (t1063 * t1095 + t1067 * t1091) * t1323;
t1157 = (t1064 * t1096 + t1068 * t1092) * t1322;
t1156 = (t1065 * t1097 + t1069 * t1093) * t1321;
t1155 = (t1066 * t1098 + t1070 * t1094) * t1320;
t1143 = mrSges(4,1);
t1142 = mrSges(4,2);
t1006 = -t1078 * t1111 + t1199 * t1113;
t1005 = -t1077 * t1111 + t1200 * t1113;
t1004 = -t1076 * t1111 + t1201 * t1113;
t1000 = -t1072 * t1111 + t1202 * t1113;
t990 = t1022 * t1155;
t989 = t1021 * t1156;
t988 = t1020 * t1157;
t987 = t1016 * t1158;
t986 = t1155 * t1332;
t985 = t1156 * t1333;
t984 = t1157 * t1334;
t983 = t1158 * t1335;
t976 = (-t1066 * t997 + t1070 * t998) * t1394;
t975 = (-t1065 * t995 + t1069 * t996) * t1395;
t974 = (-t1064 * t993 + t1068 * t994) * t1396;
t968 = (-t1063 * t991 + t1067 * t992) * t1397;
t1 = [t991 * t1407 + t993 * t1408 + t995 * t1409 + t997 * t1410 + t1404 * t1098 + t1403 * t1097 - t1406 * t1096 - t1405 * t1095 + (t1099 * t1142 - t1100 * t1143 + (-t1162 * t1257 + t991 * t1319) * t1166 + (t1016 * (-t1174 * t1257 + t991 * t1246) + (-t1198 * t1257 + t991 * t1331) * t1335) * t1399 + (-t1161 * t1254 + t993 * t1318) * t1165 + (t1020 * (-t1173 * t1254 + t993 * t1245) + (-t1197 * t1254 + t993 * t1329) * t1334) * t1400 + (-t1160 * t1251 + t995 * t1317) * t1164 + (t1021 * (-t1172 * t1251 + t995 * t1244) + (-t1196 * t1251 + t995 * t1327) * t1333) * t1401 + (-t1159 * t1248 + t997 * t1316) * t1163 + (t1022 * (-t1171 * t1248 + t997 * t1243) + (-t1195 * t1248 + t997 * t1325) * t1332) * t1402) * t1110; t992 * t1407 + t994 * t1408 + t996 * t1409 + t998 * t1410 - t1404 * t1094 - t1403 * t1093 + t1406 * t1092 + t1405 * t1091 + (-t1099 * t1143 - t1100 * t1142 + (t1162 * t1258 + t992 * t1319) * t1166 + (t1016 * (t1174 * t1258 + t992 * t1246) + (t1198 * t1258 + t992 * t1331) * t1335) * t1399 + (t1161 * t1255 + t994 * t1318) * t1165 + (t1020 * (t1173 * t1255 + t994 * t1245) + (t1197 * t1255 + t994 * t1329) * t1334) * t1400 + (t1160 * t1252 + t996 * t1317) * t1164 + (t1021 * (t1172 * t1252 + t996 * t1244) + (t1196 * t1252 + t996 * t1327) * t1333) * t1401 + (t1159 * t1249 + t998 * t1316) * t1163 + (t1022 * (t1171 * t1249 + t998 * t1243) + (t1195 * t1249 + t998 * t1325) * t1332) * t1402) * t1110; t1000 * t1407 + t1004 * t1408 + t1005 * t1409 + t1006 * t1410 + t1420 * t1019 + t1419 * t1018 + t1417 * t1017 + t1418 * t1015 + t1424 * t1014 + t1423 * t1013 + t1422 * t1012 + t1421 * t1008 + ((t1000 * t1319 + (t1008 * t1330 + t1015 * t1315) * t1323) * t1166 + (t1016 * (t1000 * t1246 + (t1008 * t1303 + t1015 * t1051) * t1323) + (t1000 * t1331 + (t1008 * t1367 + t1015 * t1079) * t1323) * t1335) * t1399 + (t1004 * t1318 + (t1012 * t1328 + t1017 * t1314) * t1322) * t1165 + (t1020 * (t1004 * t1245 + (t1012 * t1302 + t1017 * t1053) * t1322) + (t1004 * t1329 + (t1012 * t1367 + t1017 * t1080) * t1322) * t1334) * t1400 + (t1005 * t1317 + (t1013 * t1326 + t1018 * t1313) * t1321) * t1164 + (t1021 * (t1005 * t1244 + (t1013 * t1301 + t1018 * t1054) * t1321) + (t1005 * t1327 + (t1013 * t1367 + t1018 * t1081) * t1321) * t1333) * t1401 + (t1006 * t1316 + (t1014 * t1324 + t1019 * t1312) * t1320) * t1163 + (t1022 * (t1006 * t1243 + (t1014 * t1300 + t1019 * t1055) * t1320) + (t1006 * t1325 + (t1014 * t1367 + t1019 * t1082) * t1320) * t1332) * t1402) * t1110; t1432 * t990 + t1433 * t989 + t1434 * t988 + t1436 * t987 + t1429 * t986 + t1430 * t985 + t1431 * t984 + t1435 * t983 + t1411 * t976 + t1412 * t975 + t1413 * t974 + t1414 * t968 + ((t1023 * t983 + t1103 * t968 + t987 * t1315) * t1166 + (t1016 * (t1051 * t987 + t1079 * t983 + t968 * t1315) + (Ifges(3,3) * t983 + t1023 * t968 + t1079 * t987) * t1335) * t1399 + (t1024 * t984 + t1103 * t974 + t988 * t1314) * t1165 + (t1020 * (t1053 * t988 + t1080 * t984 + t974 * t1314) + (Ifges(3,3) * t984 + t1024 * t974 + t1080 * t988) * t1334) * t1400 + (t1025 * t985 + t1103 * t975 + t989 * t1313) * t1164 + (t1021 * (t1054 * t989 + t1081 * t985 + t975 * t1313) + (Ifges(3,3) * t985 + t1025 * t975 + t1081 * t989) * t1333) * t1401 + (t1026 * t986 + t1103 * t976 + t990 * t1312) * t1163 + (t1022 * (t1055 * t990 + t1082 * t986 + t976 * t1312) + (Ifges(3,3) * t986 + t1026 * t976 + t1082 * t990) * t1332) * t1402) * t1110;];
taucX  = t1;
