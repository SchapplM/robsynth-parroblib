% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-09-20 23:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V1G3A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G3A0_gravload_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G3A0_gravload_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V1G3A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G3A0_gravload_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G3A0_gravload_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G3A0_gravload_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-09-20 23:01:38
% EndTime: 2020-09-20 23:01:41
% DurationCPUTime: 2.57s
% Computational Cost: add. (1489->259), mult. (4058->529), div. (228->9), fcn. (4462->30), ass. (0->272)
t2485 = cos(qJ(2,4));
t2483 = sin(qJ(2,4));
t2484 = cos(qJ(3,4));
t2600 = t2483 * t2484;
t2436 = pkin(2) * t2600 - t2485 * pkin(5);
t2479 = sin(pkin(3));
t2481 = cos(pkin(3));
t2482 = sin(qJ(3,4));
t2615 = t2481 * t2482;
t2399 = pkin(2) * t2615 + t2436 * t2479;
t2641 = 0.1e1 / t2399;
t2491 = sin(qJ(2,3));
t2497 = cos(qJ(2,3));
t2496 = cos(qJ(3,3));
t2636 = pkin(2) * t2496;
t2446 = -t2497 * pkin(5) + t2491 * t2636;
t2490 = sin(qJ(3,3));
t2612 = t2481 * t2490;
t2403 = pkin(2) * t2612 + t2446 * t2479;
t2640 = 0.1e1 / t2403;
t2493 = sin(qJ(2,2));
t2499 = cos(qJ(2,2));
t2498 = cos(qJ(3,2));
t2635 = pkin(2) * t2498;
t2447 = -t2499 * pkin(5) + t2493 * t2635;
t2492 = sin(qJ(3,2));
t2610 = t2481 * t2492;
t2404 = pkin(2) * t2610 + t2447 * t2479;
t2639 = 0.1e1 / t2404;
t2501 = cos(qJ(2,1));
t2495 = sin(qJ(2,1));
t2500 = cos(qJ(3,1));
t2588 = t2495 * t2500;
t2448 = pkin(2) * t2588 - t2501 * pkin(5);
t2494 = sin(qJ(3,1));
t2608 = t2481 * t2494;
t2405 = pkin(2) * t2608 + t2448 * t2479;
t2638 = 0.1e1 / t2405;
t2637 = pkin(2) * t2484;
t2634 = pkin(2) * t2500;
t2478 = sin(pkin(6));
t2633 = t2478 * g(3);
t2602 = t2482 * t2483;
t2410 = t2479 * t2484 + t2481 * t2602;
t2480 = cos(pkin(6));
t2601 = t2482 * t2485;
t2387 = t2410 * t2480 + t2478 * t2601;
t2632 = t2387 * t2641;
t2587 = t2496 * t2479;
t2596 = t2490 * t2491;
t2423 = t2481 * t2596 + t2587;
t2595 = t2490 * t2497;
t2391 = t2423 * t2480 + t2478 * t2595;
t2631 = t2391 * t2640;
t2584 = t2498 * t2479;
t2593 = t2492 * t2493;
t2424 = t2481 * t2593 + t2584;
t2592 = t2492 * t2499;
t2392 = t2424 * t2480 + t2478 * t2592;
t2630 = t2392 * t2639;
t2581 = t2500 * t2479;
t2590 = t2494 * t2495;
t2425 = t2481 * t2590 + t2581;
t2589 = t2494 * t2501;
t2393 = t2425 * t2480 + t2478 * t2589;
t2629 = t2393 * t2638;
t2474 = 0.1e1 / t2484;
t2628 = t2641 * t2474;
t2475 = 0.1e1 / t2496;
t2627 = t2640 * t2475;
t2476 = 0.1e1 / t2498;
t2626 = t2639 * t2476;
t2477 = 0.1e1 / t2500;
t2625 = t2638 * t2477;
t2486 = legFrame(4,2);
t2464 = sin(t2486);
t2468 = cos(t2486);
t2438 = t2464 * g(1) + t2468 * g(2);
t2624 = t2641 * t2438;
t2487 = legFrame(3,2);
t2465 = sin(t2487);
t2469 = cos(t2487);
t2439 = t2465 * g(1) + t2469 * g(2);
t2623 = t2640 * t2439;
t2488 = legFrame(2,2);
t2466 = sin(t2488);
t2470 = cos(t2488);
t2440 = t2466 * g(1) + t2470 * g(2);
t2622 = t2639 * t2440;
t2489 = legFrame(1,2);
t2467 = sin(t2489);
t2471 = cos(t2489);
t2441 = t2467 * g(1) + t2471 * g(2);
t2621 = t2638 * t2441;
t2620 = t2438 * t2479;
t2619 = t2439 * t2479;
t2618 = t2440 * t2479;
t2617 = t2441 * t2479;
t2616 = t2478 * t2481;
t2614 = t2481 * t2483;
t2613 = t2481 * t2485;
t2611 = t2481 * t2491;
t2609 = t2481 * t2493;
t2607 = t2481 * t2495;
t2606 = t2481 * t2497;
t2605 = t2481 * t2499;
t2604 = t2481 * t2501;
t2603 = t2482 * t2479;
t2599 = t2484 * t2481;
t2598 = t2485 * t2484;
t2597 = t2490 * t2479;
t2594 = t2492 * t2479;
t2591 = t2494 * t2479;
t2586 = t2496 * t2481;
t2585 = t2496 * t2497;
t2583 = t2498 * t2481;
t2582 = t2498 * t2499;
t2580 = t2500 * t2501;
t2434 = -t2479 * g(1) - g(2) * t2616;
t2435 = g(1) * t2616 - t2479 * g(2);
t2442 = t2468 * g(1) - t2464 * g(2);
t2459 = t2481 * t2480 * g(3);
t2350 = (t2434 * t2464 + t2435 * t2468 + t2459) * t2485 + t2483 * (t2442 * t2480 - t2633);
t2579 = t2350 * t2632;
t2443 = t2469 * g(1) - t2465 * g(2);
t2351 = (t2434 * t2465 + t2435 * t2469 + t2459) * t2497 + t2491 * (t2443 * t2480 - t2633);
t2578 = t2351 * t2631;
t2444 = t2470 * g(1) - t2466 * g(2);
t2352 = (t2434 * t2466 + t2435 * t2470 + t2459) * t2499 + t2493 * (t2444 * t2480 - t2633);
t2577 = t2352 * t2630;
t2445 = t2471 * g(1) - t2467 * g(2);
t2353 = (t2434 * t2467 + t2435 * t2471 + t2459) * t2501 + t2495 * (t2445 * t2480 - t2633);
t2576 = t2353 * t2629;
t2502 = xP(4);
t2472 = sin(t2502);
t2473 = cos(t2502);
t2506 = koppelP(1,2);
t2510 = koppelP(1,1);
t2429 = t2472 * t2510 + t2473 * t2506;
t2433 = -t2472 * t2506 + t2473 * t2510;
t2520 = t2429 * t2471 + t2467 * t2433;
t2575 = t2520 * t2629;
t2503 = koppelP(4,2);
t2507 = koppelP(4,1);
t2426 = t2472 * t2507 + t2473 * t2503;
t2430 = -t2472 * t2503 + t2473 * t2507;
t2523 = t2426 * t2468 + t2464 * t2430;
t2574 = t2523 * t2632;
t2504 = koppelP(3,2);
t2508 = koppelP(3,1);
t2427 = t2472 * t2508 + t2473 * t2504;
t2431 = -t2472 * t2504 + t2473 * t2508;
t2522 = t2427 * t2469 + t2465 * t2431;
t2573 = t2522 * t2631;
t2505 = koppelP(2,2);
t2509 = koppelP(2,1);
t2428 = t2472 * t2509 + t2473 * t2505;
t2432 = -t2472 * t2505 + t2473 * t2509;
t2521 = t2428 * t2470 + t2466 * t2432;
t2572 = t2521 * t2630;
t2408 = t2478 * t2613 + t2480 * t2483;
t2409 = -t2478 * t2614 + t2480 * t2485;
t2571 = (-t2409 * pkin(5) + t2408 * t2637) * t2628;
t2418 = t2478 * t2606 + t2480 * t2491;
t2421 = -t2478 * t2611 + t2480 * t2497;
t2570 = (-t2421 * pkin(5) + t2418 * t2636) * t2627;
t2419 = t2478 * t2605 + t2480 * t2493;
t2422 = -t2478 * t2609 + t2480 * t2499;
t2569 = (-t2422 * pkin(5) + t2419 * t2635) * t2626;
t2411 = t2478 * t2607 - t2480 * t2501;
t2420 = t2478 * t2604 + t2480 * t2495;
t2568 = (t2411 * pkin(5) + t2420 * t2634) * t2625;
t2515 = -t2410 * t2478 + t2480 * t2601;
t2567 = t2515 * t2628;
t2514 = -t2423 * t2478 + t2480 * t2595;
t2566 = t2514 * t2627;
t2513 = -t2424 * t2478 + t2480 * t2592;
t2565 = t2513 * t2626;
t2512 = -t2425 * t2478 + t2480 * t2589;
t2564 = t2512 * t2625;
t2563 = t2464 * t2628;
t2562 = t2468 * t2628;
t2561 = t2465 * t2627;
t2560 = t2469 * t2627;
t2559 = t2466 * t2626;
t2558 = t2470 * t2626;
t2557 = t2467 * t2625;
t2556 = t2471 * t2625;
t2555 = t2350 * t2482 * t2628;
t2554 = t2351 * t2490 * t2627;
t2553 = t2352 * t2492 * t2626;
t2552 = t2353 * t2494 * t2625;
t2551 = t2477 * t2575;
t2550 = t2474 * t2574;
t2549 = t2475 * t2573;
t2548 = t2476 * t2572;
t2414 = -t2478 * t2495 + t2480 * t2604;
t2417 = t2478 * t2501 + t2480 * t2607;
t2378 = pkin(5) * t2417 + t2414 * t2634;
t2547 = t2378 * t2556;
t2412 = -t2478 * t2491 + t2480 * t2606;
t2415 = t2478 * t2497 + t2480 * t2611;
t2376 = pkin(5) * t2415 + t2412 * t2636;
t2546 = t2376 * t2560;
t2413 = -t2478 * t2493 + t2480 * t2605;
t2416 = t2478 * t2499 + t2480 * t2609;
t2377 = pkin(5) * t2416 + t2413 * t2635;
t2545 = t2377 * t2558;
t2406 = t2478 * t2483 - t2480 * t2613;
t2407 = t2478 * t2485 + t2480 * t2614;
t2374 = -pkin(5) * t2407 + t2406 * t2637;
t2544 = t2374 * t2523 * t2628;
t2543 = t2374 * t2563;
t2542 = t2374 * t2562;
t2541 = t2376 * t2522 * t2627;
t2540 = t2376 * t2561;
t2539 = t2377 * t2521 * t2626;
t2538 = t2377 * t2559;
t2537 = t2378 * t2520 * t2625;
t2536 = t2378 * t2557;
t2535 = t2387 * t2563;
t2534 = t2387 * t2562;
t2533 = t2391 * t2561;
t2532 = t2391 * t2560;
t2531 = t2392 * t2559;
t2530 = t2392 * t2558;
t2529 = t2393 * t2557;
t2528 = t2393 * t2556;
t2527 = t2387 * t2555;
t2526 = t2391 * t2554;
t2525 = t2392 * t2553;
t2524 = t2393 * t2552;
t2519 = pkin(2) * t2603 - t2436 * t2481;
t2518 = pkin(2) * t2597 - t2446 * t2481;
t2517 = pkin(2) * t2594 - t2447 * t2481;
t2516 = pkin(2) * t2591 - t2448 * t2481;
t2511 = 0.1e1 / pkin(2);
t2453 = t2473 * g(1) + t2472 * g(2);
t2452 = t2472 * g(1) - t2473 * g(2);
t2451 = pkin(2) * t2580 + pkin(5) * t2495;
t2450 = pkin(2) * t2582 + pkin(5) * t2493;
t2449 = pkin(2) * t2585 + pkin(5) * t2491;
t2437 = pkin(2) * t2598 + pkin(5) * t2483;
t2365 = t2480 * t2451 + t2516 * t2478;
t2364 = t2480 * t2450 + t2517 * t2478;
t2363 = t2480 * t2449 + t2518 * t2478;
t2362 = t2480 * t2437 + t2519 * t2478;
t2361 = -g(3) * t2417 - t2445 * t2411 + t2495 * t2617;
t2360 = g(3) * t2414 + t2445 * t2420 - t2501 * t2617;
t2359 = -g(3) * t2416 + t2444 * t2422 + t2493 * t2618;
t2358 = g(3) * t2413 + t2444 * t2419 - t2499 * t2618;
t2357 = -g(3) * t2415 + t2443 * t2421 + t2491 * t2619;
t2356 = g(3) * t2412 + t2443 * t2418 - t2497 * t2619;
t2355 = -g(3) * t2407 + t2442 * t2409 + t2483 * t2620;
t2354 = -g(3) * t2406 + t2442 * t2408 - t2485 * t2620;
t2349 = -t2365 * t2467 + t2405 * t2471;
t2348 = t2365 * t2471 + t2405 * t2467;
t2347 = -t2364 * t2466 + t2404 * t2470;
t2346 = t2364 * t2470 + t2404 * t2466;
t2345 = -t2363 * t2465 + t2403 * t2469;
t2344 = t2363 * t2469 + t2403 * t2465;
t2343 = -t2362 * t2464 + t2399 * t2468;
t2342 = t2362 * t2468 + t2399 * t2464;
t2341 = t2512 * t2445 - t2393 * g(3) - t2441 * (-t2479 * t2590 + t2481 * t2500);
t2340 = t2513 * t2444 - t2392 * g(3) - t2440 * (-t2479 * t2593 + t2583);
t2339 = t2514 * t2443 - t2391 * g(3) - t2439 * (-t2479 * t2596 + t2586);
t2338 = t2445 * ((-t2481 * t2588 + t2591) * t2478 + t2480 * t2580) + g(3) * (-t2417 * t2500 + t2480 * t2591) + t2441 * (t2495 * t2581 + t2608);
t2337 = t2444 * ((-t2493 * t2583 + t2594) * t2478 + t2480 * t2582) + g(3) * (-t2416 * t2498 + t2480 * t2594) + t2440 * (t2493 * t2584 + t2610);
t2336 = t2443 * ((-t2491 * t2586 + t2597) * t2478 + t2480 * t2585) + g(3) * (-t2415 * t2496 + t2480 * t2597) + t2439 * (t2491 * t2587 + t2612);
t2335 = t2442 * t2515 - t2387 * g(3) - t2438 * (-t2479 * t2602 + t2599);
t2334 = ((-t2483 * t2599 + t2603) * t2478 + t2480 * t2598) * t2442 + g(3) * (-t2407 * t2484 + t2480 * t2603) + t2438 * (t2479 * t2600 + t2615);
t1 = [-t2342 * t2624 - t2344 * t2623 - t2346 * t2622 - t2348 * t2621, 0, -t2354 * t2534 - t2356 * t2532 - t2358 * t2530 - t2360 * t2528, -t2355 * t2534 - t2357 * t2532 - t2359 * t2530 - t2361 * t2528, 0, 0, 0, 0, 0, -t2468 * t2579 - t2469 * t2578 - t2470 * t2577 - t2471 * t2576 + (t2335 * t2542 - t2339 * t2546 - t2340 * t2545 - t2341 * t2547) * t2511, t2468 * t2527 + t2469 * t2526 + t2470 * t2525 + t2471 * t2524 + (t2334 * t2542 - t2336 * t2546 - t2337 * t2545 - t2338 * t2547) * t2511, 0, 0, 0, -t2472 * t2452 - t2473 * t2453; -t2343 * t2624 - t2345 * t2623 - t2347 * t2622 - t2349 * t2621, 0, t2354 * t2535 + t2356 * t2533 + t2358 * t2531 + t2360 * t2529, t2355 * t2535 + t2357 * t2533 + t2359 * t2531 + t2361 * t2529, 0, 0, 0, 0, 0, t2464 * t2579 + t2465 * t2578 + t2466 * t2577 + t2467 * t2576 + (-t2335 * t2543 + t2339 * t2540 + t2340 * t2538 + t2341 * t2536) * t2511, -t2464 * t2527 - t2465 * t2526 - t2466 * t2525 - t2467 * t2524 + (-t2334 * t2543 + t2336 * t2540 + t2337 * t2538 + t2338 * t2536) * t2511, 0, 0, 0, t2473 * t2452 - t2472 * t2453; -(-t2478 * t2451 + t2516 * t2480) * t2621 - (-t2478 * t2450 + t2517 * t2480) * t2622 - (-t2478 * t2449 + t2518 * t2480) * t2623 - (-t2478 * t2437 + t2519 * t2480) * t2624, 0, -t2354 * t2567 - t2356 * t2566 - t2358 * t2565 - t2360 * t2564, -t2355 * t2567 - t2357 * t2566 - t2359 * t2565 - t2361 * t2564, 0, 0, 0, 0, 0, -t2515 * t2641 * t2350 - t2514 * t2640 * t2351 - t2513 * t2639 * t2352 - t2512 * t2638 * t2353 + (t2335 * t2571 + t2339 * t2570 + t2340 * t2569 + t2341 * t2568) * t2511, t2515 * t2555 + t2514 * t2554 + t2513 * t2553 + t2512 * t2552 + (t2334 * t2571 + t2336 * t2570 + t2337 * t2569 + t2338 * t2568) * t2511, 0, 0, 0, -g(3); -(-t2348 * t2429 + t2349 * t2433) * t2621 - (-t2346 * t2428 + t2347 * t2432) * t2622 - (-t2344 * t2427 + t2345 * t2431) * t2623 - (-t2342 * t2426 + t2343 * t2430) * t2624, 0, t2354 * t2550 + t2356 * t2549 + t2358 * t2548 + t2360 * t2551, t2355 * t2550 + t2357 * t2549 + t2359 * t2548 + t2361 * t2551, 0, 0, 0, 0, 0, t2350 * t2574 + t2351 * t2573 + t2352 * t2572 + t2353 * t2575 + (-t2335 * t2544 + t2339 * t2541 + t2340 * t2539 + t2341 * t2537) * t2511, -t2523 * t2527 - t2522 * t2526 - t2521 * t2525 - t2520 * t2524 + (-t2334 * t2544 + t2336 * t2541 + t2337 * t2539 + t2338 * t2537) * t2511, 0, t2452, t2453, 0;];
tau_reg  = t1;
