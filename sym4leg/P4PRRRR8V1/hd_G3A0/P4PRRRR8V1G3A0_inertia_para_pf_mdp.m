% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V1G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [4x4]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-09-20 23:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P4PRRRR8V1G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G3A0_inertia_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G3A0_inertia_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G3A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G3A0_inertia_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V1G3A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-09-20 23:02:02
% EndTime: 2020-09-20 23:03:06
% DurationCPUTime: 66.21s
% Computational Cost: add. (19572->1076), mult. (60956->2147), div. (5040->18), fcn. (64370->30), ass. (0->839)
t3538 = cos(qJ(3,3));
t3514 = 0.1e1 / t3538;
t3540 = cos(qJ(3,2));
t3516 = 0.1e1 / t3540;
t3542 = cos(qJ(3,1));
t3518 = 0.1e1 / t3542;
t3526 = cos(qJ(3,4));
t3509 = 0.1e1 / t3526;
t3520 = sin(pkin(6));
t3522 = cos(pkin(6));
t3521 = sin(pkin(3));
t3523 = cos(pkin(3));
t3524 = sin(qJ(3,4));
t3525 = sin(qJ(2,4));
t4087 = t3524 * t3525;
t3613 = t3521 * t3526 + t3523 * t4087;
t3527 = cos(qJ(2,4));
t4086 = t3524 * t3527;
t3421 = t3520 * t4086 + t3522 * t3613;
t3528 = legFrame(4,2);
t3498 = sin(t3528);
t4085 = t3525 * t3526;
t3476 = pkin(2) * t4085 - pkin(5) * t3527;
t4100 = t3523 * t3524;
t3960 = pkin(2) * t4100 + t3476 * t3521;
t4225 = 0.1e1 / t3960 ^ 2;
t4137 = t4225 * t3498;
t4024 = t3421 * t4137;
t3880 = t3509 * t4024;
t4098 = t3523 * t3527;
t4099 = t3523 * t3525;
t4200 = pkin(2) * t3526;
t3403 = -pkin(5) * (t3520 * t3527 + t3522 * t4099) + (t3520 * t3525 - t3522 * t4098) * t4200;
t3502 = cos(t3528);
t4243 = t3403 * t3502;
t3531 = legFrame(1,2);
t3501 = sin(t3531);
t3536 = sin(qJ(3,1));
t3537 = sin(qJ(2,1));
t4078 = t3536 * t3537;
t3610 = t3521 * t3542 + t3523 * t4078;
t3543 = cos(qJ(2,1));
t4077 = t3536 * t3543;
t3433 = t3520 * t4077 + t3522 * t3610;
t3505 = cos(t3531);
t4076 = t3537 * t3542;
t3481 = pkin(2) * t4076 - pkin(5) * t3543;
t4093 = t3523 * t3536;
t3957 = pkin(2) * t4093 + t3481 * t3521;
t4231 = 0.1e1 / t3957 ^ 2;
t4119 = t4231 * t3505;
t4012 = t3433 * t4119;
t4089 = t3523 * t3543;
t4092 = t3523 * t3537;
t4197 = pkin(2) * t3542;
t3410 = pkin(5) * (t3520 * t3543 + t3522 * t4092) + (-t3520 * t3537 + t3522 * t4089) * t4197;
t4071 = -0.2e1 * t3410;
t4250 = t4071 * t3501 * t4012;
t3529 = legFrame(3,2);
t3499 = sin(t3529);
t3532 = sin(qJ(3,3));
t3533 = sin(qJ(2,3));
t4084 = t3532 * t3533;
t3612 = t3521 * t3538 + t3523 * t4084;
t3539 = cos(qJ(2,3));
t4083 = t3532 * t3539;
t3431 = t3520 * t4083 + t3522 * t3612;
t3503 = cos(t3529);
t4082 = t3533 * t3538;
t3479 = pkin(2) * t4082 - pkin(5) * t3539;
t4097 = t3523 * t3532;
t3959 = pkin(2) * t4097 + t3479 * t3521;
t4227 = 0.1e1 / t3959 ^ 2;
t4131 = t4227 * t3503;
t4016 = t3431 * t4131;
t4091 = t3523 * t3539;
t4096 = t3523 * t3533;
t4199 = pkin(2) * t3538;
t3408 = pkin(5) * (t3520 * t3539 + t3522 * t4096) + (-t3520 * t3533 + t3522 * t4091) * t4199;
t4070 = -0.2e1 * t3408;
t4251 = t4070 * t3499 * t4016;
t3530 = legFrame(2,2);
t3500 = sin(t3530);
t3534 = sin(qJ(3,2));
t3535 = sin(qJ(2,2));
t4081 = t3534 * t3535;
t3611 = t3521 * t3540 + t3523 * t4081;
t3541 = cos(qJ(2,2));
t4080 = t3534 * t3541;
t3432 = t3520 * t4080 + t3522 * t3611;
t3504 = cos(t3530);
t4079 = t3535 * t3540;
t3480 = pkin(2) * t4079 - pkin(5) * t3541;
t4095 = t3523 * t3534;
t3958 = pkin(2) * t4095 + t3480 * t3521;
t4229 = 0.1e1 / t3958 ^ 2;
t4125 = t4229 * t3504;
t4014 = t3432 * t4125;
t4090 = t3523 * t3541;
t4094 = t3523 * t3535;
t4198 = pkin(2) * t3540;
t3409 = pkin(5) * (t3520 * t3541 + t3522 * t4094) + (-t3520 * t3535 + t3522 * t4090) * t4198;
t4069 = -0.2e1 * t3409;
t4252 = t4069 * t3500 * t4014;
t4258 = t3514 * t4251 + t3516 * t4252 + t3518 * t4250 + t3880 * t4243;
t3510 = 0.1e1 / t3526 ^ 2;
t4135 = t4225 * t3510;
t4006 = t3498 * t4135;
t3879 = t3421 * t4006;
t3749 = t3524 * t3879;
t3519 = 0.1e1 / t3542 ^ 2;
t4106 = t3519 * t3536;
t3517 = 0.1e1 / t3540 ^ 2;
t4108 = t3517 * t3534;
t3515 = 0.1e1 / t3538 ^ 2;
t4110 = t3515 * t3532;
t4257 = t3749 * t4243 + t4106 * t4250 + t4108 * t4252 + t4110 * t4251;
t3477 = pkin(5) * t3525 + t3527 * t4200;
t4201 = pkin(2) * t3521;
t3699 = -t3476 * t3523 + t3524 * t4201;
t3386 = t3477 * t3522 + t3520 * t3699;
t3378 = t3386 * t3502 + t3498 * t3960;
t3482 = pkin(5) * t3533 + t3539 * t4199;
t3698 = -t3479 * t3523 + t3532 * t4201;
t3388 = t3482 * t3522 + t3520 * t3698;
t3380 = t3388 * t3503 + t3499 * t3959;
t3483 = pkin(5) * t3535 + t3541 * t4198;
t3697 = -t3480 * t3523 + t3534 * t4201;
t3389 = t3483 * t3522 + t3520 * t3697;
t3382 = t3389 * t3504 + t3500 * t3958;
t3484 = pkin(5) * t3537 + t3543 * t4197;
t3696 = -t3481 * t3523 + t3536 * t4201;
t3390 = t3484 * t3522 + t3520 * t3696;
t3384 = t3390 * t3505 + t3501 * t3957;
t3413 = (t3520 * t4089 + t3522 * t3537) * t4197 + (t3520 * t4092 - t3522 * t3543) * pkin(5);
t3430 = t3520 * t3610 - t3522 * t4077;
t4241 = t3410 * t3430 + t3413 * t3433;
t3565 = t4241 * t4119;
t3412 = (t3520 * t4090 + t3522 * t3535) * t4198 + (t3520 * t4094 - t3522 * t3541) * pkin(5);
t3429 = t3520 * t3611 - t3522 * t4080;
t4240 = t3409 * t3429 + t3412 * t3432;
t3568 = t4240 * t4125;
t3411 = (t3520 * t4091 + t3522 * t3533) * t4199 + (t3520 * t4096 - t3522 * t3539) * pkin(5);
t3428 = t3520 * t3612 - t3522 * t4083;
t4239 = t3408 * t3428 + t3411 * t3431;
t3571 = t4239 * t4131;
t4136 = t4225 * t3502;
t3404 = (t3520 * t4098 + t3522 * t3525) * t4200 + (t3520 * t4099 - t3522 * t3527) * pkin(5);
t3420 = t3520 * t3613 - t3522 * t4086;
t4161 = t3403 * t3420;
t4238 = t3404 * t3421 - t4161;
t3575 = t4238 * t4136;
t3393 = -t3484 * t3520 + t3522 * t3696;
t4168 = t3393 * t3433;
t3621 = -t3384 * t3430 + t3505 * t4168;
t3392 = -t3483 * t3520 + t3522 * t3697;
t4171 = t3392 * t3432;
t3623 = -t3382 * t3429 + t3504 * t4171;
t3391 = -t3482 * t3520 + t3522 * t3698;
t4174 = t3391 * t3431;
t3625 = -t3380 * t3428 + t3503 * t4174;
t3387 = -t3477 * t3520 + t3522 * t3699;
t4177 = t3387 * t3421;
t3627 = -t3378 * t3420 + t3502 * t4177;
t4107 = t3518 * t3536;
t3971 = t4231 * t4107;
t4209 = t3430 * t3433;
t3735 = t3971 * t4209;
t3513 = t3536 ^ 2;
t4117 = t4231 * t3519;
t3868 = t4117 * t4209;
t3736 = t3513 * t3868;
t4109 = t3516 * t3534;
t3982 = t4229 * t4109;
t4210 = t3429 * t3432;
t3738 = t3982 * t4210;
t3512 = t3534 ^ 2;
t4123 = t4229 * t3517;
t3870 = t4123 * t4210;
t3739 = t3512 * t3870;
t4111 = t3514 * t3532;
t3993 = t4227 * t4111;
t4211 = t3428 * t3431;
t3741 = t3993 * t4211;
t3511 = t3532 ^ 2;
t4129 = t4227 * t3515;
t3872 = t4129 * t4211;
t3742 = t3511 * t3872;
t4113 = t3509 * t3524;
t4003 = t4225 * t4113;
t3756 = t3420 * t3421 * t4003;
t3508 = t3524 ^ 2;
t4026 = t3420 * t4135;
t3887 = t3421 * t4026;
t3757 = t3508 * t3887;
t4230 = 0.1e1 / t3957;
t4120 = t4230 * t3543;
t3976 = t3518 * t4120;
t3833 = t4230 * t3976;
t4121 = t4230 * t3537;
t3977 = t3518 * t4121;
t3834 = t4230 * t3977;
t4228 = 0.1e1 / t3958;
t4126 = t4228 * t3541;
t3987 = t3516 * t4126;
t3839 = t4228 * t3987;
t4127 = t4228 * t3535;
t3988 = t3516 * t4127;
t3840 = t4228 * t3988;
t4226 = 0.1e1 / t3959;
t4132 = t4226 * t3539;
t3998 = t3514 * t4132;
t3845 = t4226 * t3998;
t4133 = t4226 * t3533;
t3999 = t3514 * t4133;
t3846 = t4226 * t3999;
t4224 = 0.1e1 / t3960;
t4138 = t4224 * t3527;
t4007 = t3509 * t4138;
t3850 = t4224 * t4007;
t4139 = t4224 * t3525;
t4008 = t3509 * t4139;
t3851 = t4224 * t4008;
t3973 = t3505 * t4117;
t3984 = t3504 * t4123;
t3995 = t3503 * t4129;
t4005 = t3502 * t4135;
t4112 = t3510 * t3524;
t4166 = t3393 * t4231;
t4169 = t3392 * t4229;
t4172 = t3391 * t4227;
t4175 = t3387 * t4225;
t3554 = 0.1e1 / pkin(2) ^ 2;
t4191 = MDP(9) * t3554;
t3553 = 0.1e1 / pkin(2);
t4193 = MDP(8) * t3553;
t4194 = MDP(7) * t3553;
t4195 = MDP(4) * t3521;
t4196 = MDP(3) * t3521;
t4202 = 2 * MDP(6);
t4245 = t3403 * t3404;
t4253 = t3410 * t3413;
t4254 = t3409 * t3412;
t4255 = t3408 * t3411;
t4256 = (t3621 * t3834 + t3623 * t3840 + t3625 * t3846 + t3627 * t3851) * t4195 + (-t3621 * t3833 - t3623 * t3839 - t3625 * t3845 - t3627 * t3850) * t4196 + (t3378 * t4175 + t3380 * t4172 + t3382 * t4169 + t3384 * t4166) * MDP(1) + (-t3502 * t3756 - t3503 * t3741 - t3504 * t3738 - t3505 * t3735) * t4202 + (-t3502 * t3757 - t3503 * t3742 - t3504 * t3739 - t3505 * t3736) * MDP(5) + (-t3502 * t3887 - t3503 * t3872 - t3504 * t3870 - t3505 * t3868) * MDP(2) + (-t3973 * t4253 - t3984 * t4254 - t3995 * t4255 + t4005 * t4245) * t4191 + (-t3509 * t3575 - t3514 * t3571 - t3516 * t3568 - t3518 * t3565) * t4193 + (-t3565 * t4106 - t3568 * t4108 - t3571 * t4110 - t3575 * t4112) * t4194;
t3830 = t3501 * t3973;
t3836 = t3500 * t3984;
t3842 = t3499 * t3995;
t4246 = t3410 ^ 2;
t4247 = t3409 ^ 2;
t4248 = t3408 ^ 2;
t4249 = -t3830 * t4246 - t3836 * t4247 - t3842 * t4248;
t4216 = t3403 ^ 2;
t3544 = xP(4);
t3506 = sin(t3544);
t3507 = cos(t3544);
t3545 = koppelP(4,2);
t3549 = koppelP(4,1);
t3468 = t3506 * t3549 + t3507 * t3545;
t3472 = -t3506 * t3545 + t3507 * t3549;
t3710 = t3468 * t3502 + t3472 * t3498;
t4164 = t3710 * t4224;
t4237 = t3501 * t3553 * t4241;
t4236 = t3500 * t3553 * t4240;
t4235 = t3499 * t3553 * t4239;
t3379 = -t3386 * t3498 + t3502 * t3960;
t3381 = -t3388 * t3499 + t3503 * t3959;
t3383 = -t3389 * t3500 + t3504 * t3958;
t3385 = -t3390 * t3501 + t3505 * t3957;
t3620 = t3385 * t3430 + t3501 * t4168;
t3622 = t3383 * t3429 + t3500 * t4171;
t3624 = t3381 * t3428 + t3499 * t4174;
t3626 = t3379 * t3420 + t3498 * t4177;
t3646 = t3553 * t3749;
t3750 = t3553 * t3880;
t3902 = t4117 * t4253;
t3906 = t4123 * t4254;
t3910 = t4129 * t4255;
t3970 = t4231 * t4106;
t3981 = t4229 * t4108;
t3992 = t4227 * t4110;
t4118 = t4231 * t3518;
t4124 = t4229 * t3516;
t4130 = t4227 * t3514;
t4234 = (-t3620 * t3834 - t3622 * t3840 - t3624 * t3846 - t3626 * t3851) * t4195 + (t3620 * t3833 + t3622 * t3839 + t3624 * t3845 + t3626 * t3850) * t4196 + (t3379 * t4175 + t3381 * t4172 + t3383 * t4169 + t3385 * t4166) * MDP(1) + (t3498 * t3756 + t3499 * t3741 + t3500 * t3738 + t3501 * t3735) * t4202 + (t3498 * t3757 + t3499 * t3742 + t3500 * t3739 + t3501 * t3736) * MDP(5) + (t3420 * t3879 + t3499 * t3872 + t3500 * t3870 + t3501 * t3868) * MDP(2) + (t3404 * t3646 + t3970 * t4237 + t3981 * t4236 + t3992 * t4235) * MDP(7) + (t3404 * t3750 + t4118 * t4237 + t4124 * t4236 + t4130 * t4235) * MDP(8) + (t3499 * t3910 + t3500 * t3906 + t3501 * t3902 - t4006 * t4245) * t4191;
t4233 = 0.2e1 * MDP(7);
t4232 = 0.2e1 * MDP(8);
t3310 = (-t3378 * t3468 + t3379 * t3472) * t4224;
t4140 = t4224 * t3509;
t3576 = t3710 * t4140;
t3342 = t3421 * t3576;
t4147 = t3421 * t4224;
t4044 = t3710 * t4147;
t3932 = t3509 * t4044;
t4223 = t3310 * (t3342 + t3932);
t3546 = koppelP(3,2);
t3550 = koppelP(3,1);
t3469 = t3506 * t3550 + t3507 * t3546;
t3473 = -t3506 * t3546 + t3507 * t3550;
t3313 = (-t3380 * t3469 + t3381 * t3473) * t4226;
t3709 = t3469 * t3503 + t3473 * t3499;
t4134 = t4226 * t3514;
t3573 = t3709 * t4134;
t3345 = t3431 * t3573;
t4146 = t3431 * t4226;
t4043 = t3709 * t4146;
t3929 = t3514 * t4043;
t4222 = t3313 * (t3345 + t3929);
t3547 = koppelP(2,2);
t3551 = koppelP(2,1);
t3470 = t3506 * t3551 + t3507 * t3547;
t3474 = -t3506 * t3547 + t3507 * t3551;
t3314 = (-t3382 * t3470 + t3383 * t3474) * t4228;
t3708 = t3470 * t3504 + t3474 * t3500;
t4128 = t4228 * t3516;
t3570 = t3708 * t4128;
t3343 = t3432 * t3570;
t4144 = t3432 * t4228;
t4042 = t3708 * t4144;
t3926 = t3516 * t4042;
t4221 = t3314 * (t3343 + t3926);
t3548 = koppelP(1,2);
t3552 = koppelP(1,1);
t3471 = t3506 * t3552 + t3507 * t3548;
t3475 = -t3506 * t3548 + t3507 * t3552;
t3315 = (-t3384 * t3471 + t3385 * t3475) * t4230;
t3707 = t3471 * t3505 + t3475 * t3501;
t4122 = t4230 * t3518;
t3567 = t3707 * t4122;
t3344 = t3433 * t3567;
t4142 = t3433 * t4230;
t4045 = t3707 * t4142;
t3935 = t3518 * t4045;
t4220 = t3315 * (t3344 + t3935);
t4215 = 0.2e1 * t3403 * t3710;
t4214 = t3411 * t3428;
t4213 = t3412 * t3429;
t4212 = t3413 * t3430;
t4208 = t3707 * t4117;
t4207 = t3708 * t4123;
t4206 = t3709 * t4129;
t4205 = MDP(7) * t4112 + t3509 * MDP(8);
t4204 = 0.2e1 * MDP(3);
t4203 = 0.2e1 * MDP(4);
t4192 = MDP(9) * t3553;
t4189 = t3342 * t4224;
t4188 = t3343 * t4228;
t4187 = t3344 * t4230;
t4186 = t3345 * t4226;
t4185 = t3378 * t4224;
t4184 = t3379 * t4224;
t4183 = t3380 * t4226;
t4182 = t3381 * t4226;
t4181 = t3382 * t4228;
t4180 = t3383 * t4228;
t4179 = t3384 * t4230;
t4178 = t3385 * t4230;
t4176 = t3387 * t4224;
t4173 = t3391 * t4226;
t4170 = t3392 * t4228;
t4167 = t3393 * t4230;
t4165 = t3707 * t4230;
t4163 = t3709 * t4226;
t4162 = t3708 * t4228;
t4156 = t3408 * t4226;
t4154 = t3409 * t4228;
t4152 = t3410 * t4230;
t4148 = t3420 * t4225;
t4145 = t3431 * t4227;
t4143 = t3432 * t4229;
t4141 = t3433 * t4231;
t4105 = t3521 * t3527;
t4104 = t3521 * t3539;
t4103 = t3521 * t3541;
t4102 = t3521 * t3543;
t4101 = t3521 * t3553;
t4088 = t3523 * t3553;
t4075 = 0.2e1 * t3707;
t4073 = 0.2e1 * t3709;
t4072 = 0.2e1 * t3708;
t3338 = t3553 * t3403 * t3576;
t4066 = t3338 * t4147;
t3339 = t3553 * t3408 * t3573;
t4065 = t3339 * t4146;
t3340 = t3553 * t3409 * t3570;
t4064 = t3340 * t4144;
t3341 = t3553 * t3410 * t3567;
t4063 = t3341 * t4142;
t4062 = t3342 * t4185;
t4061 = t3342 * t4176;
t4060 = t3403 * t4189;
t4059 = t3524 * t4189;
t4058 = t3343 * t4181;
t4057 = t3343 * t4170;
t4056 = t3534 * t4188;
t4055 = t3344 * t4179;
t4054 = t3344 * t4167;
t4053 = t3536 * t4187;
t4052 = t3345 * t4183;
t4051 = t3345 * t4173;
t4050 = t3532 * t4186;
t4049 = t3342 * t4184;
t4048 = t3345 * t4182;
t4047 = t3343 * t4180;
t4046 = t3344 * t4178;
t4041 = t3403 * t4164;
t4040 = t3404 * t4140;
t4039 = t3709 * t4156;
t4038 = t3408 * t4145;
t4037 = t3708 * t4154;
t4036 = t3409 * t4143;
t4035 = t3707 * t4152;
t4034 = t3410 * t4141;
t4033 = t3411 * t4134;
t4032 = t3412 * t4128;
t4031 = t3413 * t4122;
t4030 = t3710 * t4135;
t3419 = t3421 ^ 2;
t4029 = t3419 * t4135;
t4028 = t3420 * t4140;
t4027 = t3420 * t4138;
t4025 = t3421 * t4138;
t4023 = t3428 * t4134;
t4022 = t3428 * t4132;
t4021 = t3429 * t4128;
t4020 = t3429 * t4126;
t4019 = t3430 * t4122;
t4018 = t3430 * t4120;
t4017 = t3431 * t4132;
t4015 = t3432 * t4126;
t4013 = t3433 * t4120;
t4011 = t3498 * t4140;
t4010 = t3502 * t4140;
t4009 = t4224 * t4113;
t4004 = t3508 * t4135;
t4002 = t3499 * t4134;
t4001 = t3503 * t4134;
t4000 = t4226 * t4111;
t3491 = t3499 ^ 2;
t3997 = t3491 * t4129;
t3495 = t3503 ^ 2;
t3996 = t3495 * t4129;
t3994 = t3511 * t4129;
t3991 = t3500 * t4128;
t3990 = t3504 * t4128;
t3989 = t4228 * t4109;
t3492 = t3500 ^ 2;
t3986 = t3492 * t4123;
t3496 = t3504 ^ 2;
t3985 = t3496 * t4123;
t3983 = t3512 * t4123;
t3980 = t3501 * t4122;
t3979 = t3505 * t4122;
t3978 = t4230 * t4107;
t3493 = t3501 ^ 2;
t3975 = t3493 * t4117;
t3497 = t3505 ^ 2;
t3974 = t3497 * t4117;
t3972 = t3513 * t4117;
t3969 = t3521 * t4087;
t3968 = t3521 * t4085;
t3967 = t3521 * t4084;
t3966 = t3521 * t4082;
t3965 = t3521 * t4081;
t3964 = t3521 * t4079;
t3963 = t3521 * t4078;
t3962 = t3521 * t4076;
t3956 = t3310 * t4027;
t3955 = t3313 * t4022;
t3954 = t3314 * t4020;
t3953 = t3315 * t4018;
t3952 = t3338 * t4009;
t3951 = t3339 * t4000;
t3950 = t3340 * t3989;
t3949 = t3341 * t3978;
t3948 = t3421 * t4059;
t3947 = t3342 * t3508 * t4140;
t3946 = t3342 * t4009;
t3945 = t3432 * t4056;
t3944 = t3343 * t3512 * t4128;
t3943 = t3343 * t3989;
t3942 = t3433 * t4053;
t3941 = t3344 * t3513 * t4122;
t3940 = t3344 * t3978;
t3939 = t3431 * t4050;
t3938 = t3345 * t3511 * t4134;
t3937 = t3345 * t4000;
t3427 = t3433 ^ 2;
t3936 = t3427 * t4208;
t3934 = t3707 * t4013;
t3933 = t3710 * t4029;
t3931 = t3710 * t4025;
t3425 = t3431 ^ 2;
t3930 = t3425 * t4206;
t3928 = t3709 * t4017;
t3426 = t3432 ^ 2;
t3927 = t3426 * t4207;
t3925 = t3708 * t4015;
t3924 = t3410 * t3979;
t3923 = t3408 * t4001;
t3922 = t3409 * t3990;
t3921 = t4216 * t4030;
t3920 = t4135 * t4216;
t3919 = t3509 * t4041;
t3918 = t3403 * t4011;
t3917 = t3403 * t4010;
t3460 = t3523 * t3526 - t3969;
t3916 = t3460 * t4040;
t3461 = t3968 + t4100;
t3915 = t3461 * t4040;
t3913 = t4248 * t4206;
t3912 = t4247 * t4207;
t3911 = t4246 * t4208;
t3909 = t3514 * t4039;
t3908 = t3491 * t4038;
t3907 = t3408 * t4002;
t3905 = t3516 * t4037;
t3904 = t3492 * t4036;
t3903 = t3409 * t3991;
t3901 = t3518 * t4035;
t3900 = t3493 * t4034;
t3899 = t3410 * t3980;
t3462 = t3523 * t3538 - t3967;
t3898 = t3462 * t4033;
t3463 = t3966 + t4097;
t3897 = t3463 * t4033;
t3464 = t3523 * t3540 - t3965;
t3895 = t3464 * t4032;
t3465 = t3964 + t4095;
t3894 = t3465 * t4032;
t3466 = t3523 * t3542 - t3963;
t3892 = t3466 * t4031;
t3467 = t3962 + t4093;
t3891 = t3467 * t4031;
t3889 = t3419 * t4004;
t3888 = t3419 * t4003;
t3886 = t4224 * t4027;
t3885 = t3524 * t4026;
t3884 = t3421 * t4011;
t3883 = t3498 * t4025;
t3882 = t3421 * t4010;
t3881 = t3502 * t4025;
t3878 = t3425 * t3994;
t3877 = t3425 * t3993;
t3876 = t3426 * t3983;
t3875 = t3426 * t3982;
t3874 = t3427 * t3972;
t3873 = t3427 * t3971;
t3871 = t4226 * t4022;
t3869 = t4228 * t4020;
t3867 = t4230 * t4018;
t3866 = t3431 * t4002;
t3865 = t3499 * t4017;
t3864 = t3431 * t4001;
t3863 = t3503 * t4017;
t3861 = t3432 * t3991;
t3860 = t3500 * t4015;
t3859 = t3432 * t3990;
t3858 = t3504 * t4015;
t3856 = t3433 * t3980;
t3855 = t3501 * t4013;
t3854 = t3433 * t3979;
t3853 = t3505 * t4013;
t3849 = t3524 * t4007;
t3848 = t4101 * t4139;
t3847 = t3498 * t4005;
t3844 = t3532 * t3998;
t3843 = t4101 * t4133;
t3838 = t3534 * t3987;
t3837 = t4101 * t4127;
t3832 = t3536 * t3976;
t3831 = t4101 * t4121;
t3715 = t3315 * t3856;
t3716 = t3314 * t3861;
t3717 = t3313 * t3866;
t3718 = t3310 * t3884;
t3828 = t3715 * t4102 + t3716 * t4103 + t3717 * t4104 + t3718 * t4105;
t3821 = t3315 * t3854;
t3822 = t3314 * t3859;
t3823 = t3313 * t3864;
t3824 = t3310 * t3882;
t3827 = (t3525 * t3824 + t3533 * t3823 + t3535 * t3822 + t3537 * t3821) * t3521;
t3826 = (t3509 * t3956 + t3514 * t3955 + t3516 * t3954 + t3518 * t3953) * t3521;
t3825 = -t3506 * MDP(14) + (t3310 * t4184 + t3313 * t4182 + t3314 * t4180 + t3315 * t4178) * MDP(1) + t3507 * MDP(13);
t3820 = t3421 * t3952;
t3819 = t3431 * t3951;
t3818 = t3432 * t3950;
t3817 = t3433 * t3949;
t3816 = t3403 * t3946;
t3815 = t3421 * t3947;
t3814 = t3409 * t3943;
t3813 = t3432 * t3944;
t3812 = t3410 * t3940;
t3811 = t3433 * t3941;
t3810 = t3408 * t3937;
t3809 = t3431 * t3938;
t3808 = t3387 * t3886;
t3807 = t3391 * t3871;
t3806 = t3392 * t3869;
t3805 = t3393 * t3867;
t3804 = t3501 * t3936;
t3803 = t4230 * t3934;
t3802 = t3498 * t3933;
t3801 = t4224 * t3931;
t3800 = t3499 * t3930;
t3799 = t4226 * t3928;
t3798 = t3500 * t3927;
t3797 = t4228 * t3925;
t3796 = t3466 * t3924;
t3795 = t3467 * t3924;
t3794 = t3462 * t3923;
t3793 = t3463 * t3923;
t3792 = t3464 * t3922;
t3791 = t3465 * t3922;
t3790 = t3460 * t3919;
t3789 = t3461 * t3919;
t3788 = t3403 * t3848;
t3787 = t3460 * t3918;
t3786 = t3460 * t3917;
t3785 = t3461 * t3918;
t3784 = t3461 * t3917;
t3783 = t4224 * t3916;
t3782 = t4224 * t3915;
t3780 = t3462 * t3909;
t3779 = t3463 * t3909;
t3778 = t3462 * t3907;
t3777 = t3463 * t3907;
t3776 = t3408 * t3843;
t3775 = t3464 * t3905;
t3774 = t3465 * t3905;
t3773 = t3464 * t3903;
t3772 = t3465 * t3903;
t3771 = t3409 * t3837;
t3770 = t3466 * t3901;
t3769 = t3467 * t3901;
t3768 = t3466 * t3899;
t3767 = t3467 * t3899;
t3766 = t3410 * t3831;
t3765 = t4226 * t3898;
t3764 = t4226 * t3897;
t3763 = t4228 * t3895;
t3762 = t4228 * t3894;
t3761 = t4230 * t3892;
t3760 = t4230 * t3891;
t3759 = t3502 * t3889;
t3758 = t3502 * t3888;
t3755 = t3420 * t3849;
t3754 = t4224 * t3883;
t3753 = t4224 * t3881;
t3752 = t3421 * t3851;
t3751 = t3421 * t3849;
t3748 = t3503 * t3878;
t3747 = t3503 * t3877;
t3746 = t3504 * t3876;
t3745 = t3504 * t3875;
t3744 = t3505 * t3874;
t3743 = t3505 * t3873;
t3740 = t3428 * t3844;
t3737 = t3429 * t3838;
t3734 = t3430 * t3832;
t3733 = t4226 * t3865;
t3732 = t4226 * t3863;
t3731 = t3431 * t3846;
t3730 = t3431 * t3844;
t3729 = t4228 * t3860;
t3728 = t4228 * t3858;
t3727 = t3432 * t3840;
t3726 = t3432 * t3838;
t3725 = t4230 * t3855;
t3724 = t4230 * t3853;
t3723 = t3433 * t3834;
t3722 = t3433 * t3832;
t3714 = t3378 * t3498 - t3379 * t3502;
t3713 = t3380 * t3499 - t3381 * t3503;
t3712 = t3382 * t3500 - t3383 * t3504;
t3711 = t3384 * t3501 - t3385 * t3505;
t3695 = t3378 * t3753;
t3694 = t3378 * t3752;
t3693 = t3379 * t3754;
t3692 = t3380 * t3732;
t3691 = t3380 * t3731;
t3690 = t3381 * t3733;
t3689 = t3382 * t3728;
t3688 = t3382 * t3727;
t3687 = t3383 * t3729;
t3686 = t3384 * t3724;
t3685 = t3384 * t3723;
t3684 = t3385 * t3725;
t3683 = t3387 * t3801;
t3682 = t3391 * t3799;
t3681 = t3392 * t3797;
t3680 = t3393 * t3803;
t3679 = t3707 * t3722;
t3678 = t3710 * t3751;
t3677 = t3709 * t3730;
t3676 = t3708 * t3726;
t3675 = t4230 * t3796;
t3674 = t4230 * t3795;
t3673 = t4226 * t3794;
t3672 = t4226 * t3793;
t3671 = t4228 * t3792;
t3670 = t4228 * t3791;
t3669 = t4224 * t3790;
t3668 = t4224 * t3789;
t3666 = t4224 * t3787;
t3665 = t4224 * t3786;
t3664 = t4224 * t3785;
t3663 = t4224 * t3784;
t3662 = t4226 * t3780;
t3661 = t4226 * t3779;
t3660 = t4226 * t3778;
t3659 = t4226 * t3777;
t3658 = t4228 * t3775;
t3657 = t4228 * t3774;
t3656 = t4228 * t3773;
t3655 = t4228 * t3772;
t3654 = t4230 * t3770;
t3653 = t4230 * t3769;
t3652 = t4230 * t3768;
t3651 = t4230 * t3767;
t3650 = t4224 * t3755;
t3649 = t3379 * t3801;
t3648 = t3498 * t3751;
t3647 = t3502 * t3751;
t3645 = t4226 * t3740;
t3644 = t4228 * t3737;
t3643 = t4230 * t3734;
t3642 = t3381 * t3799;
t3641 = t3499 * t3730;
t3640 = t3503 * t3730;
t3639 = t3383 * t3797;
t3638 = t3500 * t3726;
t3637 = t3504 * t3726;
t3636 = t3385 * t3803;
t3635 = t3501 * t3722;
t3634 = t3505 * t3722;
t3633 = t3848 * t4113;
t3632 = t3843 * t4111;
t3631 = t3837 * t4109;
t3630 = t3831 * t4107;
t3629 = (-t3711 * t3723 - t3712 * t3727 - t3713 * t3731 - t3714 * t3752) * t4195 + (t3421 * t3714 * t3850 + t3431 * t3713 * t3845 + t3432 * t3712 * t3839 + t3433 * t3711 * t3833) * t4196 + (t3378 * t3379 * t4225 + t3380 * t3381 * t4227 + t3382 * t3383 * t4229 + t3384 * t3385 * t4231) * MDP(1) + (-t3498 * t3758 - t3499 * t3747 - t3500 * t3745 - t3501 * t3743) * t4202 + (-t3498 * t3759 - t3499 * t3748 - t3500 * t3746 - t3501 * t3744) * MDP(5) + (-t3419 * t3847 - t3425 * t3842 - t3426 * t3836 - t3427 * t3830) * MDP(2);
t3609 = -t3506 * MDP(13) - t3507 * MDP(14) + (t3310 * t4185 + t3313 * t4183 + t3314 * t4181 + t3315 * t4179) * MDP(1);
t3608 = t4024 * t4215;
t3607 = t3421 * t4136 * t4215;
t3606 = t3499 * t4073 * t4038;
t3605 = t3408 * t4073 * t4016;
t3604 = t3500 * t4072 * t4036;
t3603 = t3409 * t4072 * t4014;
t3602 = t3501 * t4075 * t4034;
t3601 = t3410 * t4075 * t4012;
t3597 = t4230 * t3679;
t3596 = t4224 * t3678;
t3595 = t4226 * t3677;
t3594 = t4228 * t3676;
t3593 = t3403 * t3633;
t3592 = t3408 * t3632;
t3591 = t3409 * t3631;
t3590 = t3410 * t3630;
t3589 = t3509 * t3649;
t3588 = t4224 * t3648;
t3587 = t4224 * t3647;
t3586 = t3514 * t3642;
t3585 = t4226 * t3641;
t3584 = t4226 * t3640;
t3583 = t3516 * t3639;
t3582 = t4228 * t3638;
t3581 = t4228 * t3637;
t3580 = t3518 * t3636;
t3579 = t4230 * t3635;
t3578 = t4230 * t3634;
t3564 = t4225 * t4238 * t3710;
t3563 = t4227 * t4239 * t3709;
t3562 = t4229 * t4240 * t3708;
t3561 = t4231 * t4241 * t3707;
t3560 = (-t3403 * t4088 + t3421 * t4105) * t4140;
t3559 = (t3408 * t4088 + t3431 * t4104) * t4134;
t3558 = (t3409 * t4088 + t3432 * t4103) * t4128;
t3557 = (t3410 * t4088 + t3433 * t4102) * t4122;
t3556 = -0.2e1 * t3421 * t4225 * t4205 * t3403;
t3494 = t3502 ^ 2;
t3490 = t3498 ^ 2;
t3478 = (t3506 ^ 2 + t3507 ^ 2) * MDP(15);
t3424 = t3430 ^ 2;
t3423 = t3429 ^ 2;
t3422 = t3428 ^ 2;
t3418 = t3420 ^ 2;
t3363 = t3750 * t4243;
t3359 = t3646 * t4243;
t3358 = t3554 * t3847 * t4216;
t3357 = (t3413 * t4088 + t3430 * t4102) * t4122;
t3356 = (t3412 * t4088 + t3429 * t4103) * t4128;
t3355 = (t3411 * t4088 + t3428 * t4104) * t4134;
t3354 = (t3404 * t4088 + t3420 * t4105) * t4140;
t3353 = t3505 * t3557;
t3352 = t3501 * t3557;
t3351 = t3504 * t3558;
t3350 = t3500 * t3558;
t3349 = t3503 * t3559;
t3348 = t3499 * t3559;
t3347 = t3502 * t3560;
t3346 = t3498 * t3560;
t3337 = -t3357 * t3536 - t3413 * t3831;
t3336 = -t3356 * t3534 - t3412 * t3837;
t3335 = -t3355 * t3532 - t3411 * t3843;
t3334 = t3357 * t3542 - t3413 * t3630;
t3333 = t3356 * t3540 - t3412 * t3631;
t3332 = t3355 * t3538 - t3411 * t3632;
t3331 = -t3354 * t3524 - t3404 * t3848;
t3330 = t3354 * t3526 - t3404 * t3633;
t3329 = t3353 * t3536 + t3505 * t3766;
t3328 = -t3352 * t3536 - t3501 * t3766;
t3327 = t3351 * t3534 + t3504 * t3771;
t3326 = -t3350 * t3534 - t3500 * t3771;
t3325 = t3349 * t3532 + t3503 * t3776;
t3324 = -t3348 * t3532 - t3499 * t3776;
t3323 = -t3353 * t3542 + t3505 * t3590;
t3322 = t3352 * t3542 - t3501 * t3590;
t3321 = -t3351 * t3540 + t3504 * t3591;
t3320 = t3350 * t3540 - t3500 * t3591;
t3319 = -t3349 * t3538 + t3503 * t3592;
t3318 = t3348 * t3538 - t3499 * t3592;
t3317 = t3347 * t3524 - t3502 * t3788;
t3316 = -t3346 * t3524 + t3498 * t3788;
t3312 = -t3347 * t3526 - t3502 * t3593;
t3311 = t3346 * t3526 + t3498 * t3593;
t3294 = t3341 * t3523 + t3344 * t4102;
t3293 = t3340 * t3523 + t3343 * t4103;
t3292 = t3339 * t3523 + t3345 * t4104;
t3291 = -t3338 * t3523 + t3342 * t4105;
t3284 = -t3294 * t3536 - t3341 * t3962;
t3283 = t3294 * t3542 - t3341 * t3963;
t3282 = -t3293 * t3534 - t3340 * t3964;
t3281 = t3293 * t3540 - t3340 * t3965;
t3280 = -t3292 * t3532 - t3339 * t3966;
t3279 = t3292 * t3538 - t3339 * t3967;
t3278 = -t3291 * t3524 + t3338 * t3968;
t3277 = t3291 * t3526 + t3338 * t3969;
t3273 = (t3310 * t4176 + t3313 * t4173 + t3314 * t4170 + t3315 * t4167) * MDP(1);
t1 = [(t3378 ^ 2 * t4225 + t3380 ^ 2 * t4227 + t3382 ^ 2 * t4229 + t3384 ^ 2 * t4231) * MDP(1) + (t3425 * t3996 + t3426 * t3985 + t3427 * t3974 + t3494 * t4029) * MDP(2) + (t3494 * t3889 + t3495 * t3878 + t3496 * t3876 + t3497 * t3874) * MDP(5) + (t3494 * t3888 + t3495 * t3877 + t3496 * t3875 + t3497 * t3873) * t4202 + (t3312 * t4185 + t3319 * t4183 + t3321 * t4181 + t3323 * t4179) * MDP(10) + (t3317 * t4185 + t3325 * t4183 + t3327 * t4181 + t3329 * t4179) * MDP(11) + t3478 + (t3494 * t3920 + t3974 * t4246 + t3985 * t4247 + t3996 * t4248) * t4191 + ((-t3686 - t3689 - t3692 - t3695) * MDP(10) + (t3378 * t3587 + t3380 * t3584 + t3382 * t3581 + t3384 * t3578) * MDP(11) + (-t3509 * t3695 - t3514 * t3692 - t3516 * t3689 - t3518 * t3686) * t4204 + (t3502 * t3694 + t3503 * t3691 + t3504 * t3688 + t3505 * t3685) * t4203) * t3521 + ((t3378 * t3665 - t3380 * t3673 - t3382 * t3671 - t3384 * t3675) * MDP(10) + (-t3378 * t3663 + t3380 * t3672 + t3382 * t3670 + t3384 * t3674) * MDP(11) + t3494 * t3556 + (-t4106 * MDP(7) - t3518 * MDP(8)) * t3497 * t4141 * t4071 + (-t4110 * MDP(7) - t3514 * MDP(8)) * t3495 * t4145 * t4070 + (-t4108 * MDP(7) - t3516 * MDP(8)) * t3496 * t4143 * t4069) * t3553; (t4257 * t3553 + t3359) * MDP(7) + (t4258 * t3553 + t3363) * MDP(8) + (t4249 * t3554 - t3358) * MDP(9) + (t3311 * t4185 + t3318 * t4183 + t3320 * t4181 + t3322 * t4179 + (t3379 * t3665 - t3381 * t3673 - t3383 * t3671 - t3385 * t3675) * t3553 + (-t3379 * t3753 - t3381 * t3732 - t3383 * t3728 - t3385 * t3724) * t3521) * MDP(10) + (t3316 * t4185 + t3324 * t4183 + t3326 * t4181 + t3328 * t4179 + (-t3379 * t3663 + t3381 * t3672 + t3383 * t3670 + t3385 * t3674) * t3553 + (t3379 * t3587 + t3381 * t3584 + t3383 * t3581 + t3385 * t3578) * t3521) * MDP(11) + t3629; (t3330 * t4185 + t3332 * t4183 + t3333 * t4181 + t3334 * t4179 + (t3387 * t3665 - t3391 * t3673 - t3392 * t3671 - t3393 * t3675) * t3553 + (-t3387 * t3753 - t3391 * t3732 - t3392 * t3728 - t3393 * t3724) * t3521) * MDP(10) + (t3331 * t4185 + t3335 * t4183 + t3336 * t4181 + t3337 * t4179 + (-t3387 * t3663 + t3391 * t3672 + t3392 * t3670 + t3393 * t3674) * t3553 + (t3387 * t3587 + t3391 * t3584 + t3392 * t3581 + t3393 * t3578) * t3521) * MDP(11) + t4256; (-t3342 * t3882 - t3343 * t3859 - t3344 * t3854 - t3345 * t3864) * MDP(2) + ((-t3821 + t4055) * t3543 + (-t3822 + t4058) * t3541 + (-t3823 + t4052) * t3539 + (-t3824 + t4062) * t3527) * t4196 + ((-t3525 * t4062 - t3533 * t4052 - t3535 * t4058 - t3537 * t4055) * t3521 + t3827) * MDP(4) + (-t3502 * t3815 - t3503 * t3809 - t3504 * t3813 - t3505 * t3811) * MDP(5) + (-t3502 * t3948 - t3503 * t3939 - t3504 * t3945 - t3505 * t3942) * t4202 + (t3502 * t3820 - t3503 * t3819 - t3504 * t3818 - t3505 * t3817 + (-t3343 * t3534 * t3922 - t3344 * t3536 * t3924 - t3345 * t3532 * t3923 + t3502 * t3816) * t3553) * MDP(7) + (t3502 * t4066 - t3503 * t4065 - t3504 * t4064 - t3505 * t4063 + (-t3408 * t3503 * t4186 - t3409 * t3504 * t4188 - t3410 * t3505 * t4187 + t3502 * t4060) * t3553) * MDP(8) + (-t3338 * t3917 - t3339 * t3923 - t3340 * t3922 - t3341 * t3924) * t4192 + (t3277 * t4185 + t3279 * t4183 + t3281 * t4181 + t3283 * t4179 + (t3310 * t3786 - t3313 * t3794 - t3314 * t3792 - t3315 * t3796) * t3553 + (-t3310 * t3881 - t3313 * t3863 - t3314 * t3858 - t3315 * t3853) * t3521) * MDP(10) + (t3278 * t4185 + t3280 * t4183 + t3282 * t4181 + t3284 * t4179 + (-t3310 * t3784 + t3313 * t3793 + t3314 * t3791 + t3315 * t3795) * t3553 + (t3310 * t3647 + t3313 * t3640 + t3314 * t3637 + t3315 * t3634) * t3521) * MDP(11) + t3609; t3359 * MDP(7) + t3363 * MDP(8) - t3358 * MDP(9) + (t3312 * t4184 + t3319 * t4182 + t3321 * t4180 + t3323 * t4178) * MDP(10) + (t3317 * t4184 + t3325 * t4182 + t3327 * t4180 + t3329 * t4178) * MDP(11) + t4249 * t4191 + ((t3378 * t3754 + t3380 * t3733 + t3382 * t3729 + t3384 * t3725) * MDP(10) + (-t3378 * t3588 - t3380 * t3585 - t3382 * t3582 - t3384 * t3579) * MDP(11)) * t3521 + (t4257 * MDP(7) + t4258 * MDP(8) + (-t3378 * t3666 + t3380 * t3660 + t3382 * t3656 + t3384 * t3652) * MDP(10) + (t3378 * t3664 - t3380 * t3659 - t3382 * t3655 - t3384 * t3651) * MDP(11)) * t3553 + t3629; (t3379 ^ 2 * t4225 + t3381 ^ 2 * t4227 + t3383 ^ 2 * t4229 + t3385 ^ 2 * t4231) * MDP(1) + (t3425 * t3997 + t3426 * t3986 + t3427 * t3975 + t3490 * t4029) * MDP(2) + (t3490 * t3889 + t3491 * t3878 + t3492 * t3876 + t3493 * t3874) * MDP(5) + (t3490 * t3888 + t3491 * t3877 + t3492 * t3875 + t3493 * t3873) * t4202 + (t3311 * t4184 + t3318 * t4182 + t3320 * t4180 + t3322 * t4178) * MDP(10) + (t3316 * t4184 + t3324 * t4182 + t3326 * t4180 + t3328 * t4178) * MDP(11) + t3478 + (t3490 * t3920 + t3975 * t4246 + t3986 * t4247 + t3997 * t4248) * t4191 + ((t3684 + t3687 + t3690 + t3693) * MDP(10) + (-t3379 * t3588 - t3381 * t3585 - t3383 * t3582 - t3385 * t3579) * MDP(11) + (t3509 * t3693 + t3514 * t3690 + t3516 * t3687 + t3518 * t3684) * t4204 + (-t3379 * t3498 * t3752 - t3381 * t3499 * t3731 - t3383 * t3500 * t3727 - t3385 * t3501 * t3723) * t4203) * t3521 + ((-t3379 * t3666 + t3381 * t3660 + t3383 * t3656 + t3385 * t3652) * MDP(10) + (t3379 * t3664 - t3381 * t3659 - t3383 * t3655 - t3385 * t3651) * MDP(11) + t3490 * t3556 + (t3900 * t4106 + t3904 * t4108 + t3908 * t4110) * t4233 + (t3514 * t3908 + t3516 * t3904 + t3518 * t3900) * t4232) * t3553; (t3330 * t4184 + t3332 * t4182 + t3333 * t4180 + t3334 * t4178) * MDP(10) + (t3331 * t4184 + t3335 * t4182 + t3336 * t4180 + t3337 * t4178) * MDP(11) + ((t3391 * t3660 + t3392 * t3656 + t3393 * t3652) * MDP(10) + (-t3391 * t3659 - t3392 * t3655 - t3393 * t3651) * MDP(11) + (-MDP(7) * t3885 + (-MDP(8) * t4148 + (-MDP(10) * t3460 + MDP(11) * t3461) * t4224 * t4176) * t3509) * t3498 * t3403) * t3553 + ((t3387 * t3754 + t3391 * t3733 + t3392 * t3729 + t3393 * t3725) * MDP(10) + (-t3387 * t3588 - t3391 * t3585 - t3392 * t3582 - t3393 * t3579) * MDP(11)) * t3521 + t4234; (t3342 * t3884 + t3343 * t3861 + t3344 * t3856 + t3345 * t3866) * MDP(2) + ((t3527 * t4049 + t3539 * t4048 + t3541 * t4047 + t3543 * t4046) * t3521 + t3828) * MDP(3) + ((-t3715 - t4046) * t3537 + (-t3716 - t4047) * t3535 + (-t3717 - t4048) * t3533 + (-t3718 - t4049) * t3525) * t4195 + (t3498 * t3815 + t3499 * t3809 + t3500 * t3813 + t3501 * t3811) * MDP(5) + (t3498 * t3948 + t3499 * t3939 + t3500 * t3945 + t3501 * t3942) * t4202 + (-t3498 * t3820 + t3499 * t3819 + t3500 * t3818 + t3501 * t3817 + (-t3498 * t3816 + t3499 * t3810 + t3500 * t3814 + t3501 * t3812) * t3553) * MDP(7) + (-t3498 * t4066 + t3499 * t4065 + t3500 * t4064 + t3501 * t4063 + (t3343 * t3500 * t4154 + t3344 * t3501 * t4152 + t3345 * t3499 * t4156 - t3498 * t4060) * t3553) * MDP(8) + (t3338 * t3918 + t3339 * t3907 + t3340 * t3903 + t3341 * t3899) * t4192 + (t3277 * t4184 + t3279 * t4182 + t3281 * t4180 + t3283 * t4178 + (-t3310 * t3787 + t3313 * t3778 + t3314 * t3773 + t3315 * t3768) * t3553 + (t3310 * t3883 + t3313 * t3865 + t3314 * t3860 + t3315 * t3855) * t3521) * MDP(10) + (t3278 * t4184 + t3280 * t4182 + t3282 * t4180 + t3284 * t4178 + (t3310 * t3785 - t3313 * t3777 - t3314 * t3772 - t3315 * t3767) * t3553 + (-t3310 * t3648 - t3313 * t3641 - t3314 * t3638 - t3315 * t3635) * t3521) * MDP(11) + t3825; (t3312 * t4176 + t3319 * t4173 + t3321 * t4170 + t3323 * t4167 + (t3378 * t3783 + t3380 * t3765 + t3382 * t3763 + t3384 * t3761) * t3553 + (t3378 * t3886 + t3380 * t3871 + t3382 * t3869 + t3384 * t3867) * t3521) * MDP(10) + (t3317 * t4176 + t3325 * t4173 + t3327 * t4170 + t3329 * t4167 + (-t3378 * t3782 - t3380 * t3764 - t3382 * t3762 - t3384 * t3760) * t3553 + (-t3378 * t3650 - t3380 * t3645 - t3382 * t3644 - t3384 * t3643) * t3521) * MDP(11) + t4256; (t3311 * t4176 + t3318 * t4173 + t3320 * t4170 + t3322 * t4167) * MDP(10) + (t3316 * t4176 + t3324 * t4173 + t3326 * t4170 + t3328 * t4167) * MDP(11) + ((t3379 * t3783 + t3381 * t3765 + t3383 * t3763 + t3385 * t3761) * MDP(10) + (-t3379 * t3782 - t3381 * t3764 - t3383 * t3762 - t3385 * t3760) * MDP(11) - t4205 * t4137 * t4161) * t3553 + ((t3379 * t3886 + t3381 * t3871 + t3383 * t3869 + t3385 * t3867) * MDP(10) + (-t3379 * t3650 - t3381 * t3645 - t3383 * t3644 - t3385 * t3643) * MDP(11)) * t3521 + t4234; (t3387 ^ 2 * t4225 + t3391 ^ 2 * t4227 + t3392 ^ 2 * t4229 + t3393 ^ 2 * t4231) * MDP(1) + (t3418 * t4135 + t3422 * t4129 + t3423 * t4123 + t3424 * t4117) * MDP(2) + (t3418 * t4004 + t3422 * t3994 + t3423 * t3983 + t3424 * t3972) * MDP(5) + (t3418 * t4003 + t3422 * t3993 + t3423 * t3982 + t3424 * t3971) * t4202 + (t3330 * t4176 + t3332 * t4173 + t3333 * t4170 + t3334 * t4167) * MDP(10) + (t3331 * t4176 + t3335 * t4173 + t3336 * t4170 + t3337 * t4167) * MDP(11) + MDP(15) + (t3404 ^ 2 * t4135 + t3411 ^ 2 * t4129 + t3412 ^ 2 * t4123 + t3413 ^ 2 * t4117) * t4191 + ((t3387 * t3783 + t3391 * t3765 + t3392 * t3763 + t3393 * t3761) * MDP(10) + (-t3387 * t3782 - t3391 * t3764 - t3392 * t3762 - t3393 * t3760) * MDP(11) + (t3404 * t3885 + t3970 * t4212 + t3981 * t4213 + t3992 * t4214) * t4233 + (t3404 * t3509 * t4148 + t4118 * t4212 + t4124 * t4213 + t4130 * t4214) * t4232) * t3553 + ((t3805 + t3806 + t3807 + t3808) * MDP(10) + (-t3387 * t3650 - t3391 * t3645 - t3392 * t3644 - t3393 * t3643) * MDP(11) + (t3509 * t3808 + t3514 * t3807 + t3516 * t3806 + t3518 * t3805) * t4204 + (-t3387 * t3420 * t3851 - t3391 * t3428 * t3846 - t3392 * t3429 * t3840 - t3393 * t3430 * t3834) * t4203) * t3521; t3273 + (t3342 * t4028 + t3343 * t4021 + t3344 * t4019 + t3345 * t4023) * MDP(2) + ((t3527 * t4061 + t3539 * t4051 + t3541 * t4057 + t3543 * t4054) * t3521 + t3826) * MDP(3) + ((-t3315 * t4019 - t4054) * t3537 + (-t3314 * t4021 - t4057) * t3535 + (-t3313 * t4023 - t4051) * t3533 + (-t3310 * t4028 - t4061) * t3525) * t4195 + (t3420 * t3947 + t3428 * t3938 + t3429 * t3944 + t3430 * t3941) * MDP(5) + (t3420 * t4059 + t3428 * t4050 + t3429 * t4056 + t3430 * t4053) * t4202 + (-t3420 * t3952 + t3428 * t3951 + t3429 * t3950 + t3430 * t3949 + (t3404 * t3946 + t3411 * t3937 + t3412 * t3943 + t3413 * t3940) * t3553) * MDP(7) + (-t3338 * t3420 * t4224 + t3339 * t3428 * t4226 + t3340 * t3429 * t4228 + t3341 * t3430 * t4230 + (t3404 * t4189 + t3411 * t4186 + t3412 * t4188 + t3413 * t4187) * t3553) * MDP(8) + (-t3338 * t4040 + t3339 * t4033 + t3340 * t4032 + t3341 * t4031) * t4192 + (t3277 * t4176 + t3279 * t4173 + t3281 * t4170 + t3283 * t4167 + (t3310 * t3916 + t3313 * t3898 + t3314 * t3895 + t3315 * t3892) * t3553 + (t3953 + t3954 + t3955 + t3956) * t3521) * MDP(10) + (t3278 * t4176 + t3280 * t4173 + t3282 * t4170 + t3284 * t4167 + (-t3310 * t3915 - t3313 * t3897 - t3314 * t3894 - t3315 * t3891) * t3553 + (-t3310 * t3755 - t3313 * t3740 - t3314 * t3737 - t3315 * t3734) * t3521) * MDP(11); (-t3502 * t3933 - t3503 * t3930 - t3504 * t3927 - t3505 * t3936) * MDP(2) + ((-t3315 * t3505 + t3384 * t4165) * t3433 * t3976 + (-t3314 * t3504 + t3382 * t4162) * t3432 * t3987 + (-t3313 * t3503 + t3380 * t4163) * t3431 * t3998 + (-t3310 * t3502 + t3378 * t4164) * t3421 * t4007) * t4196 + ((-t3685 * t3707 - t3688 * t3708 - t3691 * t3709 - t3694 * t3710) * t3521 + t3827) * MDP(4) + (-t3707 * t3744 - t3708 * t3746 - t3709 * t3748 - t3710 * t3759) * MDP(5) + (-t3707 * t3743 - t3708 * t3745 - t3709 * t3747 - t3710 * t3758) * t4202 + (-t3601 * t4106 - t3603 * t4108 - t3605 * t4110 + t3607 * t4112) * t4194 + (t3509 * t3607 - t3514 * t3605 - t3516 * t3603 - t3518 * t3601) * t4193 + (-t3502 * t3921 - t3503 * t3913 - t3504 * t3912 - t3505 * t3911) * t4191 + (t3310 * t3312 + t3313 * t3319 + t3314 * t3321 + t3315 * t3323 + (-t3378 * t3669 + t3380 * t3662 + t3382 * t3658 + t3384 * t3654) * t3553 + (t3378 * t3801 + t3380 * t3799 + t3382 * t3797 + t3384 * t3803) * t3521) * MDP(10) + (t3310 * t3317 + t3313 * t3325 + t3314 * t3327 + t3315 * t3329 + (t3378 * t3668 - t3380 * t3661 - t3382 * t3657 - t3384 * t3653) * t3553 + (-t3378 * t3596 - t3380 * t3595 - t3382 * t3594 - t3384 * t3597) * t3521) * MDP(11) + t3609; (t3798 + t3800 + t3802 + t3804) * MDP(2) + ((t3580 + t3583 + t3586 + t3589) * t3521 + t3828) * MDP(3) + ((-t3315 * t3501 - t3385 * t4165) * t3433 * t3977 + (-t3314 * t3500 - t3383 * t4162) * t3432 * t3988 + (-t3313 * t3499 - t3381 * t4163) * t3431 * t3999 + (-t3310 * t3498 - t3379 * t4164) * t3421 * t4008) * t4195 + (t3508 * t3802 + t3511 * t3800 + t3512 * t3798 + t3513 * t3804) * MDP(5) + (t3498 * t3710 * t3888 + t3499 * t3709 * t3877 + t3500 * t3708 * t3875 + t3501 * t3707 * t3873) * t4202 + (t3602 * t4106 + t3604 * t4108 + t3606 * t4110 - t3608 * t4112) * t4194 + (-t3509 * t3608 + t3514 * t3606 + t3516 * t3604 + t3518 * t3602) * t4193 + (t3498 * t3921 + t3499 * t3913 + t3500 * t3912 + t3501 * t3911) * t4191 + (t3310 * t3311 + t3313 * t3318 + t3314 * t3320 + t3315 * t3322 + (-t3379 * t3669 + t3381 * t3662 + t3383 * t3658 + t3385 * t3654) * t3553 + (t3636 + t3639 + t3642 + t3649) * t3521) * MDP(10) + (t3310 * t3316 + t3313 * t3324 + t3314 * t3326 + t3315 * t3328 + (t3379 * t3668 - t3381 * t3661 - t3383 * t3657 - t3385 * t3653) * t3553 + (-t3524 * t3589 - t3532 * t3586 - t3534 * t3583 - t3536 * t3580) * t3521) * MDP(11) + t3825; t3273 + (t3707 * t3868 + t3708 * t3870 + t3709 * t3872 + t3710 * t3887) * MDP(2) + ((t3509 * t3683 + t3514 * t3682 + t3516 * t3681 + t3518 * t3680) * t3521 + t3826) * MDP(3) + ((-t3315 * t3430 - t4165 * t4168) * t3977 + (-t3314 * t3429 - t4162 * t4171) * t3988 + (-t3313 * t3428 - t4163 * t4174) * t3999 + (-t3310 * t3420 - t4164 * t4177) * t4008) * t4195 + (t3707 * t3736 + t3708 * t3739 + t3709 * t3742 + t3710 * t3757) * MDP(5) + (t3707 * t3735 + t3708 * t3738 + t3709 * t3741 + t3710 * t3756) * t4202 + (t3561 * t4106 + t3562 * t4108 + t3563 * t4110 + t3564 * t4112) * t4194 + (t3509 * t3564 + t3514 * t3563 + t3516 * t3562 + t3518 * t3561) * t4193 + (t3707 * t3902 + t3708 * t3906 + t3709 * t3910 - t4030 * t4245) * t4191 + (t3310 * t3330 + t3313 * t3332 + t3314 * t3333 + t3315 * t3334 + (-t3387 * t3669 + t3391 * t3662 + t3392 * t3658 + t3393 * t3654) * t3553 + (t3680 + t3681 + t3682 + t3683) * t3521) * MDP(10) + (t3310 * t3331 + t3313 * t3335 + t3314 * t3336 + t3315 * t3337 + (t3387 * t3668 - t3391 * t3661 - t3392 * t3657 - t3393 * t3653) * t3553 + (-t3387 * t3596 - t3391 * t3595 - t3392 * t3594 - t3393 * t3597) * t3521) * MDP(11); (t3310 ^ 2 + t3313 ^ 2 + t3314 ^ 2 + t3315 ^ 2) * MDP(1) + (t3342 * t3932 + t3343 * t3926 + t3344 * t3935 + t3345 * t3929) * MDP(2) + (t3527 * t4223 + t3539 * t4222 + t3541 * t4221 + t3543 * t4220) * t4196 + (-t3525 * t4223 - t3533 * t4222 - t3535 * t4221 - t3537 * t4220) * t4195 + (t3707 * t3811 + t3708 * t3813 + t3709 * t3809 + t3710 * t3815) * MDP(5) + (t3707 * t3942 + t3708 * t3945 + t3709 * t3939 + t3710 * t3948) * t4202 + (-t3710 * t3820 + t3709 * t3819 + t3708 * t3818 + t3707 * t3817 + (-t3342 * t3524 * t3919 + t3707 * t3812 + t3708 * t3814 + t3709 * t3810) * t3553) * MDP(7) + (-t3338 * t4044 + t3339 * t4043 + t3340 * t4042 + t3341 * t4045 + (-t3342 * t4041 + t3343 * t4037 + t3344 * t4035 + t3345 * t4039) * t3553) * MDP(8) + (t3338 * t3919 + t3339 * t3909 + t3340 * t3905 + t3341 * t3901) * t4192 + (t3310 * t3277 + t3313 * t3279 + t3314 * t3281 + t3315 * t3283 + (-t3310 * t3790 + t3313 * t3780 + t3314 * t3775 + t3315 * t3770) * t3553 + (t3310 * t3931 + t3313 * t3928 + t3314 * t3925 + t3315 * t3934) * t3521) * MDP(10) + (t3310 * t3278 + t3313 * t3280 + t3314 * t3282 + t3315 * t3284 + (t3310 * t3789 - t3313 * t3779 - t3314 * t3774 - t3315 * t3769) * t3553 + (-t3310 * t3678 - t3313 * t3677 - t3314 * t3676 - t3315 * t3679) * t3521) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_4_matlab.m
res = [t1(1), t1(2), t1(3), t1(4); t1(5), t1(6), t1(7), t1(8); t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16);];
MMX  = res;
