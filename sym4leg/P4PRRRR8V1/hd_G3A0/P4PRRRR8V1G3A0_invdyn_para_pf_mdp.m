% Calculate minimal parameter regressor of inverse dynamics forces for
% P4PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V1G3A0_convert_par2_MPV_fixb.m

% Output:
% tauX [4x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-09-20 23:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P4PRRRR8V1G3A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-09-20 23:01:41
% EndTime: 2020-09-20 23:02:02
% DurationCPUTime: 22.27s
% Computational Cost: add. (119159->715), mult. (280737->1332), div. (11524->18), fcn. (220021->30), ass. (0->543)
t2954 = cos(qJ(2,1));
t2948 = sin(qJ(2,1));
t2953 = cos(qJ(3,1));
t3156 = t2948 * t2953;
t2888 = pkin(2) * t3156 - pkin(5) * t2954;
t2928 = sin(pkin(3));
t2930 = cos(pkin(3));
t2947 = sin(qJ(3,1));
t3252 = pkin(2) * t2947;
t3095 = t2888 * t2928 + t2930 * t3252;
t2838 = 0.1e1 / t3095 ^ 2;
t3264 = 0.1e1 / t3095;
t2952 = cos(qJ(2,2));
t2946 = sin(qJ(2,2));
t2951 = cos(qJ(3,2));
t3159 = t2946 * t2951;
t2887 = pkin(2) * t3159 - pkin(5) * t2952;
t2945 = sin(qJ(3,2));
t3253 = pkin(2) * t2945;
t3096 = t2887 * t2928 + t2930 * t3253;
t2836 = 0.1e1 / t3096 ^ 2;
t3263 = 0.1e1 / t3096;
t2950 = cos(qJ(2,3));
t2944 = sin(qJ(2,3));
t2949 = cos(qJ(3,3));
t3162 = t2944 * t2949;
t2886 = pkin(2) * t3162 - pkin(5) * t2950;
t2943 = sin(qJ(3,3));
t3254 = pkin(2) * t2943;
t3097 = t2886 * t2928 + t2930 * t3254;
t2834 = 0.1e1 / t3097 ^ 2;
t3262 = 0.1e1 / t3097;
t2934 = cos(qJ(2,4));
t2932 = sin(qJ(2,4));
t2933 = cos(qJ(3,4));
t3165 = t2932 * t2933;
t2884 = pkin(2) * t3165 - pkin(5) * t2934;
t2931 = sin(qJ(3,4));
t3256 = pkin(2) * t2931;
t3098 = t2884 * t2928 + t2930 * t3256;
t2828 = 0.1e1 / t3098 ^ 2;
t3261 = 0.1e1 / t3098;
t2927 = sin(pkin(6));
t2929 = cos(pkin(6));
t3170 = t2930 * t2954;
t3173 = t2930 * t2948;
t3249 = pkin(2) * t2953;
t2802 = pkin(5) * (t2927 * t2954 + t2929 * t3173) + (-t2927 * t2948 + t2929 * t3170) * t3249;
t2938 = legFrame(1,2);
t2915 = cos(t2938);
t3260 = t2802 * t2915;
t3172 = t2930 * t2950;
t3175 = t2930 * t2944;
t3251 = pkin(2) * t2949;
t2800 = pkin(5) * (t2927 * t2950 + t2929 * t3175) + (-t2927 * t2944 + t2929 * t3172) * t3251;
t2936 = legFrame(3,2);
t2913 = cos(t2936);
t3259 = t2800 * t2913;
t3171 = t2930 * t2952;
t3174 = t2930 * t2946;
t3250 = pkin(2) * t2951;
t2801 = pkin(5) * (t2927 * t2952 + t2929 * t3174) + (-t2927 * t2946 + t2929 * t3171) * t3250;
t2937 = legFrame(2,2);
t2914 = cos(t2937);
t3258 = t2801 * t2914;
t3176 = t2930 * t2934;
t3177 = t2930 * t2932;
t3255 = pkin(2) * t2933;
t2798 = -pkin(5) * (t2927 * t2934 + t2929 * t3177) + (t2927 * t2932 - t2929 * t3176) * t3255;
t2959 = xP(4);
t2916 = sin(t2959);
t2917 = cos(t2959);
t2960 = koppelP(4,2);
t2964 = koppelP(4,1);
t2874 = t2916 * t2964 + t2917 * t2960;
t2878 = -t2916 * t2960 + t2917 * t2964;
t2935 = legFrame(4,2);
t2908 = sin(t2935);
t2912 = cos(t2935);
t3005 = t2874 * t2912 + t2878 * t2908;
t3257 = t2798 * t3005;
t3248 = g(3) * t2927;
t2907 = t2929 * g(3);
t2941 = xDDP(2);
t3247 = t2941 - g(2);
t2942 = xDDP(1);
t3246 = t2942 - g(1);
t2970 = 0.1e1 / pkin(2);
t3245 = MDP(9) * t2970;
t2918 = 0.1e1 / t2933;
t2955 = xDP(4);
t2957 = xDP(2);
t2958 = xDP(1);
t2778 = (-t2874 * t2955 + t2958) * t2912 - (t2878 * t2955 + t2957) * t2908;
t2956 = xDP(3);
t3182 = t2927 * t2956;
t2770 = t2778 * t2929 - t3182;
t3169 = t2930 * t2956;
t3181 = t2928 * t2933;
t2755 = ((-t2778 * t3177 - t2934 * t2956) * t2929 - (t2778 * t2934 - t2932 * t3169) * t2927) * t2931 - t2770 * t3181;
t3223 = t2755 * t3261;
t3155 = pkin(5) * t3223;
t3094 = t2931 * t3155;
t2897 = t2956 * t2929;
t2774 = t2778 * t2927 + t2897;
t2743 = -(t2770 * t3176 - t2774 * t2932) * t3255 - pkin(5) * (t2770 * t3177 + t2774 * t2934);
t3232 = t2743 * t3261;
t2730 = (t3094 - t3232) * t2918;
t2926 = t2955 ^ 2;
t2939 = xDDP(4);
t2810 = -t2874 * t2926 + t2878 * t2939 + t2941;
t2814 = -t2874 * t2939 - t2878 * t2926 + t2942;
t2972 = t2933 ^ 2;
t2919 = 0.1e1 / t2972;
t2940 = xDDP(3);
t3195 = t3261 * t2970;
t3114 = t2918 * t3195;
t3028 = t2743 * t2928 * t3114;
t3167 = t2931 * t2932;
t2983 = t2930 * t3167 + t3181;
t3166 = t2931 * t2934;
t2819 = t2927 * t3166 + t2983 * t2929;
t3197 = t3261 * t2918;
t3116 = t2912 * t3197;
t3059 = t2819 * t3116;
t3117 = t2908 * t3197;
t3060 = t2819 * t3117;
t2818 = t2983 * t2927 - t2929 * t3166;
t3122 = t2818 * t3197;
t3141 = t3261 * t3223;
t3168 = t2930 * t2970;
t3196 = t3261 * t2931;
t3231 = t2743 * t2828;
t2674 = t2810 * t3060 - t2814 * t3059 + t2940 * t3122 + (-(t2930 * t2730 + (pkin(2) * (t2928 * t2934 * t3223 + t3168 * t3232) * t2972 - t2928 * (t2743 * t3196 - t3155) * t3165) * t2918) * t3141 + (-t2934 * t3028 + (t2928 * t3167 + (t2918 - t2933) * t2930) * t3223) * t3231) * t2919;
t3244 = t2674 * t3261;
t3243 = t2674 * t2931;
t3242 = t2674 * t2934;
t2920 = 0.1e1 / t2949;
t2961 = koppelP(3,2);
t2965 = koppelP(3,1);
t2875 = t2916 * t2965 + t2917 * t2961;
t2879 = -t2916 * t2961 + t2917 * t2965;
t2909 = sin(t2936);
t2779 = (-t2875 * t2955 + t2958) * t2913 - (t2879 * t2955 + t2957) * t2909;
t2771 = t2779 * t2929 - t3182;
t3180 = t2928 * t2949;
t2759 = ((-t2779 * t3175 - t2950 * t2956) * t2929 - (t2779 * t2950 - t2944 * t3169) * t2927) * t2943 - t2771 * t3180;
t3219 = t2759 * t3262;
t3154 = pkin(5) * t3219;
t3093 = t2943 * t3154;
t2775 = t2779 * t2927 + t2897;
t2747 = -(t2771 * t3172 - t2775 * t2944) * t3251 - (t2771 * t3175 + t2775 * t2950) * pkin(5);
t3230 = t2747 * t3262;
t2732 = (t3093 - t3230) * t2920;
t2811 = -t2875 * t2926 + t2879 * t2939 + t2941;
t2815 = -t2875 * t2939 - t2879 * t2926 + t2942;
t2973 = t2949 ^ 2;
t2921 = 0.1e1 / t2973;
t3192 = t3262 * t2970;
t3109 = t2920 * t3192;
t3026 = t2747 * t2928 * t3109;
t3164 = t2943 * t2944;
t2982 = t2930 * t3164 + t3180;
t3163 = t2943 * t2950;
t2823 = t2927 * t3163 + t2982 * t2929;
t3194 = t3262 * t2920;
t3111 = t2913 * t3194;
t3056 = t2823 * t3111;
t3112 = t2909 * t3194;
t3057 = t2823 * t3112;
t2820 = t2982 * t2927 - t2929 * t3163;
t3121 = t2820 * t3194;
t3137 = t3262 * t3219;
t3193 = t3262 * t2943;
t3229 = t2747 * t2834;
t2675 = t2811 * t3057 - t2815 * t3056 + t2940 * t3121 + (-(t2930 * t2732 + (pkin(2) * (t2928 * t2950 * t3219 + t3168 * t3230) * t2973 - t2928 * (t2747 * t3193 - t3154) * t3162) * t2920) * t3137 + (-t2950 * t3026 + (t2928 * t3164 + (t2920 - t2949) * t2930) * t3219) * t3229) * t2921;
t3241 = t2675 * t3262;
t3240 = t2675 * t2943;
t3239 = t2675 * t2950;
t2922 = 0.1e1 / t2951;
t2962 = koppelP(2,2);
t2966 = koppelP(2,1);
t2876 = t2916 * t2966 + t2917 * t2962;
t2880 = -t2916 * t2962 + t2917 * t2966;
t2910 = sin(t2937);
t2780 = (-t2876 * t2955 + t2958) * t2914 - (t2880 * t2955 + t2957) * t2910;
t2772 = t2780 * t2929 - t3182;
t3179 = t2928 * t2951;
t2760 = ((-t2780 * t3174 - t2952 * t2956) * t2929 - (t2780 * t2952 - t2946 * t3169) * t2927) * t2945 - t2772 * t3179;
t3218 = t2760 * t3263;
t3153 = pkin(5) * t3218;
t3092 = t2945 * t3153;
t2776 = t2780 * t2927 + t2897;
t2748 = -(t2772 * t3171 - t2776 * t2946) * t3250 - (t2772 * t3174 + t2776 * t2952) * pkin(5);
t3228 = t2748 * t3263;
t2733 = (t3092 - t3228) * t2922;
t2812 = -t2876 * t2926 + t2880 * t2939 + t2941;
t2816 = -t2876 * t2939 - t2880 * t2926 + t2942;
t2974 = t2951 ^ 2;
t2923 = 0.1e1 / t2974;
t3189 = t3263 * t2970;
t3104 = t2922 * t3189;
t3024 = t2748 * t2928 * t3104;
t3161 = t2945 * t2946;
t2981 = t2930 * t3161 + t3179;
t3160 = t2945 * t2952;
t2824 = t2927 * t3160 + t2981 * t2929;
t3191 = t3263 * t2922;
t3106 = t2914 * t3191;
t3053 = t2824 * t3106;
t3107 = t2910 * t3191;
t3054 = t2824 * t3107;
t2821 = t2981 * t2927 - t2929 * t3160;
t3120 = t2821 * t3191;
t3136 = t3263 * t3218;
t3190 = t3263 * t2945;
t3227 = t2748 * t2836;
t2676 = t2812 * t3054 - t2816 * t3053 + t2940 * t3120 + (-(t2930 * t2733 + (pkin(2) * (t2928 * t2952 * t3218 + t3168 * t3228) * t2974 - t2928 * (t2748 * t3190 - t3153) * t3159) * t2922) * t3136 + (-t2952 * t3024 + (t2928 * t3161 + (t2922 - t2951) * t2930) * t3218) * t3227) * t2923;
t3238 = t2676 * t3263;
t3237 = t2676 * t2945;
t3236 = t2676 * t2952;
t2924 = 0.1e1 / t2953;
t2963 = koppelP(1,2);
t2967 = koppelP(1,1);
t2877 = t2916 * t2967 + t2917 * t2963;
t2881 = -t2916 * t2963 + t2917 * t2967;
t2911 = sin(t2938);
t2781 = (-t2877 * t2955 + t2958) * t2915 - (t2881 * t2955 + t2957) * t2911;
t2773 = t2781 * t2929 - t3182;
t3178 = t2928 * t2953;
t2761 = ((-t2781 * t3173 - t2954 * t2956) * t2929 - (t2781 * t2954 - t2948 * t3169) * t2927) * t2947 - t2773 * t3178;
t3217 = t2761 * t3264;
t3152 = pkin(5) * t3217;
t3091 = t2947 * t3152;
t2777 = t2781 * t2927 + t2897;
t2749 = -(t2773 * t3170 - t2777 * t2948) * t3249 - (t2773 * t3173 + t2777 * t2954) * pkin(5);
t3226 = t2749 * t3264;
t2734 = (t3091 - t3226) * t2924;
t2813 = -t2877 * t2926 + t2881 * t2939 + t2941;
t2817 = -t2877 * t2939 - t2881 * t2926 + t2942;
t2975 = t2953 ^ 2;
t2925 = 0.1e1 / t2975;
t3186 = t3264 * t2970;
t3099 = t2924 * t3186;
t3022 = t2749 * t2928 * t3099;
t3158 = t2947 * t2948;
t2980 = t2930 * t3158 + t3178;
t3157 = t2947 * t2954;
t2825 = t2927 * t3157 + t2980 * t2929;
t3188 = t3264 * t2924;
t3101 = t2915 * t3188;
t3050 = t2825 * t3101;
t3102 = t2911 * t3188;
t3051 = t2825 * t3102;
t2822 = t2980 * t2927 - t2929 * t3157;
t3119 = t2822 * t3188;
t3135 = t3264 * t3217;
t3187 = t3264 * t2947;
t3225 = t2749 * t2838;
t2677 = t2813 * t3051 - t2817 * t3050 + t2940 * t3119 + (-(t2930 * t2734 + (pkin(2) * (t2928 * t2954 * t3217 + t3168 * t3226) * t2975 - t2928 * (t2749 * t3187 - t3152) * t3156) * t2924) * t3135 + (-t2954 * t3022 + (t2928 * t3158 + (t2924 - t2953) * t2930) * t3217) * t3225) * t2925;
t3235 = t2677 * t3264;
t3234 = t2677 * t2947;
t3233 = t2677 * t2954;
t3224 = t2755 ^ 2 * t2828;
t3222 = t2759 ^ 2 * t2834;
t3221 = t2760 ^ 2 * t2836;
t3220 = t2761 ^ 2 * t2838;
t2885 = pkin(5) * t2932 + t2934 * t3255;
t2997 = -t2884 * t2930 + t2928 * t3256;
t2782 = t2885 * t2929 + t2997 * t2927;
t2762 = t2782 * t2912 + t2908 * t3098;
t3216 = t2762 * t3261;
t2763 = -t2782 * t2908 + t2912 * t3098;
t3215 = t2763 * t3261;
t2889 = pkin(5) * t2944 + t2950 * t3251;
t2996 = -t2886 * t2930 + t2928 * t3254;
t2784 = t2889 * t2929 + t2996 * t2927;
t2764 = t2784 * t2913 + t2909 * t3097;
t3214 = t2764 * t3262;
t2765 = -t2784 * t2909 + t2913 * t3097;
t3213 = t2765 * t3262;
t2890 = pkin(5) * t2946 + t2952 * t3250;
t2995 = -t2887 * t2930 + t2928 * t3253;
t2785 = t2890 * t2929 + t2995 * t2927;
t2766 = t2785 * t2914 + t2910 * t3096;
t3212 = t2766 * t3263;
t2767 = -t2785 * t2910 + t2914 * t3096;
t3211 = t2767 * t3263;
t2891 = pkin(5) * t2948 + t2954 * t3249;
t2994 = -t2888 * t2930 + t2928 * t3252;
t2786 = t2891 * t2929 + t2994 * t2927;
t2768 = t2786 * t2915 + t2911 * t3095;
t3210 = t2768 * t3264;
t2769 = -t2786 * t2911 + t2915 * t3095;
t3209 = t2769 * t3264;
t2783 = -t2885 * t2927 + t2997 * t2929;
t3208 = t2783 * t3261;
t2787 = -t2889 * t2927 + t2996 * t2929;
t3207 = t2787 * t3262;
t2788 = -t2890 * t2927 + t2995 * t2929;
t3206 = t2788 * t3263;
t2789 = -t2891 * t2927 + t2994 * t2929;
t3205 = t2789 * t3264;
t3204 = t2800 * t3262;
t3203 = t2801 * t3263;
t3202 = t2802 * t3264;
t3201 = t2819 * t3261;
t3200 = t2823 * t3262;
t3199 = t2824 * t3263;
t3198 = t2825 * t3264;
t2968 = pkin(5) ^ 2;
t2969 = pkin(2) ^ 2;
t3184 = t2918 * t2931;
t3115 = t3261 * t3184;
t2726 = -pkin(5) * t2743 * t3115 + (t2918 * t2968 + t2933 * t2969) * t3223;
t2799 = (t2927 * t3176 + t2929 * t2932) * t3255 + (t2927 * t3177 - t2929 * t2934) * pkin(5);
t3118 = t3261 * t3195;
t3082 = t2755 * t3118;
t2690 = (-t2930 * t2726 * t3082 - (-t2931 * t2884 * t3028 + t2930 * (-t2918 * t3094 + t2933 * t3232)) * t2743 * t3118) * t2919 + (t2799 * t2940 - (t2810 * t2908 - t2814 * t2912) * t2798) * t3114;
t3029 = t2743 * t3082;
t3001 = 0.2e1 * t3029;
t2678 = t2919 * t2934 * t3001 + t2690 * t2932;
t2971 = 0.1e1 / pkin(2) ^ 2;
t3146 = t2743 ^ 2 * t2828 * t2971;
t2682 = -t2919 * t2931 * t3146 + t2690 * t2933;
t3009 = -(t3146 + t3224) * t2919 * t2932 + t3242;
t2642 = (-t2931 * t2678 + t3009 * t2933) * t2928 + t2930 * t2682;
t3185 = t3261 * t2642;
t3183 = t2927 * t2930;
t3151 = t2798 * t3244;
t3041 = g(1) * t2912 - g(2) * t2908;
t2858 = t3041 * t2929 - t3248;
t2711 = (t2762 * t2814 + t2763 * t2810 + t2783 * t2940) * t3261 + (t2726 * t3141 - t2730 * t3231) * t2918;
t2882 = g(1) * t2928 + g(2) * t3183;
t2883 = g(1) * t3183 - t2928 * g(2);
t2892 = t2930 * t2907;
t2979 = t2711 * t2928 - t2882 * t2908 + t2883 * t2912 + t2892;
t2694 = t2932 * t2858 + t2979 * t2934;
t3150 = t2694 * t3201;
t3040 = g(1) * t2913 - g(2) * t2909;
t2859 = t3040 * t2929 - t3248;
t3110 = t2920 * t3193;
t2727 = -pkin(5) * t2747 * t3110 + (t2920 * t2968 + t2949 * t2969) * t3219;
t2715 = (t2764 * t2815 + t2765 * t2811 + t2787 * t2940) * t3262 + (t2727 * t3137 - t2732 * t3229) * t2920;
t2978 = t2715 * t2928 - t2882 * t2909 + t2883 * t2913 + t2892;
t2697 = t2944 * t2859 + t2978 * t2950;
t3149 = t2697 * t3200;
t3039 = g(1) * t2914 - g(2) * t2910;
t2860 = t3039 * t2929 - t3248;
t3105 = t2922 * t3190;
t2728 = -pkin(5) * t2748 * t3105 + (t2922 * t2968 + t2951 * t2969) * t3218;
t2716 = (t2766 * t2816 + t2767 * t2812 + t2788 * t2940) * t3263 + (t2728 * t3136 - t2733 * t3227) * t2922;
t2977 = t2716 * t2928 - t2882 * t2910 + t2883 * t2914 + t2892;
t2698 = t2946 * t2860 + t2977 * t2952;
t3148 = t2698 * t3199;
t3038 = g(1) * t2915 - g(2) * t2911;
t2861 = t3038 * t2929 - t3248;
t3100 = t2924 * t3187;
t2729 = -pkin(5) * t2749 * t3100 + (t2924 * t2968 + t2953 * t2969) * t3217;
t2717 = (t2768 * t2817 + t2769 * t2813 + t2789 * t2940) * t3264 + (t2729 * t3135 - t2734 * t3225) * t2924;
t2976 = t2717 * t2928 - t2882 * t2911 + t2883 * t2915 + t2892;
t2699 = t2948 * t2861 + t2976 * t2954;
t3147 = t2699 * t3198;
t3145 = t2747 ^ 2 * t2834 * t2971;
t3144 = t2748 ^ 2 * t2836 * t2971;
t3143 = t2749 ^ 2 * t2838 * t2971;
t3142 = t2919 * t3224;
t3140 = t2921 * t3222;
t3139 = t2923 * t3221;
t3138 = t2925 * t3220;
t3002 = t2877 * t2915 + t2881 * t2911;
t3134 = t3002 * t3198;
t3133 = t3005 * t3201;
t3004 = t2875 * t2913 + t2879 * t2909;
t3132 = t3004 * t3200;
t3003 = t2876 * t2914 + t2880 * t2910;
t3131 = t3003 * t3199;
t3130 = t3261 * t3257;
t3129 = t2799 * t3197;
t3128 = t3004 * t3204;
t3127 = t3003 * t3203;
t3126 = t3002 * t3202;
t2803 = (t2927 * t3172 + t2929 * t2944) * t3251 + (t2927 * t3175 - t2929 * t2950) * pkin(5);
t3125 = t2803 * t3194;
t2804 = (t2927 * t3171 + t2929 * t2946) * t3250 + (t2927 * t3174 - t2929 * t2952) * pkin(5);
t3124 = t2804 * t3191;
t2805 = (t2927 * t3170 + t2929 * t2948) * t3249 + (t2927 * t3173 - t2929 * t2954) * pkin(5);
t3123 = t2805 * t3188;
t3113 = t3262 * t3192;
t3108 = t3263 * t3189;
t3103 = t3264 * t3186;
t3090 = t2674 * t3115;
t3089 = t2675 * t3110;
t3088 = t2676 * t3105;
t3087 = t2677 * t3100;
t3086 = t2694 * t3122;
t3085 = t2697 * t3121;
t3084 = t2698 * t3120;
t3083 = t2699 * t3119;
t3081 = t2759 * t3113;
t3080 = t2760 * t3108;
t3079 = t2761 * t3103;
t3078 = t2924 * t3134;
t3077 = t2918 * t3133;
t3076 = t2920 * t3132;
t3075 = t2922 * t3131;
t3074 = t2802 * t3101;
t3073 = t2800 * t3111;
t3072 = t2801 * t3106;
t3071 = t2918 * t3130;
t3070 = t2798 * t3117;
t3069 = t2798 * t3116;
t3068 = t2920 * t3128;
t3067 = t2800 * t3112;
t3066 = t2922 * t3127;
t3065 = t2801 * t3107;
t3064 = t2924 * t3126;
t3063 = t2802 * t3102;
t3062 = t2674 * t3130;
t3061 = t2694 * t3133;
t3058 = t2697 * t3132;
t3055 = t2698 * t3131;
t3052 = t2699 * t3134;
t3049 = t2908 * t3150;
t3048 = t2909 * t3149;
t3047 = t2910 * t3148;
t3046 = t2911 * t3147;
t3045 = t2912 * t3150;
t3044 = t2913 * t3149;
t3043 = t2914 * t3148;
t3042 = t2915 * t3147;
t3037 = t2798 * t3090;
t3036 = t2800 * t3089;
t3035 = t2801 * t3088;
t3034 = t2802 * t3087;
t3033 = t2918 * t3061;
t3032 = t2920 * t3058;
t3031 = t2922 * t3055;
t3030 = t2924 * t3052;
t3027 = t2747 * t3081;
t3025 = t2748 * t3080;
t3023 = t2749 * t3079;
t3021 = t3142 * t3196;
t3020 = t3140 * t3193;
t3019 = t3139 * t3190;
t3018 = t3138 * t3187;
t3017 = t2918 * t3049;
t3016 = t2920 * t3048;
t3015 = t2922 * t3047;
t3014 = t2924 * t3046;
t3013 = t2918 * t3045;
t3012 = t2920 * t3044;
t3011 = t2922 * t3043;
t3010 = t2924 * t3042;
t3008 = -(t3145 + t3222) * t2921 * t2944 + t3239;
t3007 = -(t3144 + t3221) * t2923 * t2946 + t3236;
t3006 = -(t3143 + t3220) * t2925 * t2948 + t3233;
t3000 = 0.2e1 * t3027;
t2999 = 0.2e1 * t3025;
t2998 = 0.2e1 * t3023;
t2993 = t2798 * t3021;
t2992 = t2800 * t3020;
t2991 = t2801 * t3019;
t2990 = t2802 * t3018;
t2873 = -t2916 * t2939 - t2917 * t2926;
t2872 = -t2916 * t2926 + t2917 * t2939;
t2857 = t3038 * t2927 + t2907;
t2856 = t3039 * t2927 + t2907;
t2855 = t3040 * t2927 + t2907;
t2854 = t3041 * t2927 + t2907;
t2831 = t2954 * t2861;
t2830 = t2952 * t2860;
t2829 = t2950 * t2859;
t2826 = t2934 * t2858;
t2753 = (-t2768 * t2877 + t2769 * t2881) * t3264;
t2752 = (-t2766 * t2876 + t2767 * t2880) * t3263;
t2751 = (-t2764 * t2875 + t2765 * t2879) * t3262;
t2750 = (-t2762 * t2874 + t2763 * t2878) * t3261;
t2741 = (t2925 - 0.2e1) * t3220;
t2740 = (t2923 - 0.2e1) * t3221;
t2739 = (t2921 - 0.2e1) * t3222;
t2738 = (t2919 - 0.2e1) * t3224;
t2714 = -t2911 * g(1) - t2915 * g(2) + t2717;
t2713 = -t2910 * g(1) - t2914 * g(2) + t2716;
t2712 = -t2909 * g(1) - t2913 * g(2) + t2715;
t2710 = -t2908 * g(1) - t2912 * g(2) + t2711;
t2709 = -t2714 * t2930 + t2857 * t2928;
t2708 = -t2713 * t2930 + t2856 * t2928;
t2707 = -t2712 * t2930 + t2855 * t2928;
t2706 = -t2710 * t2930 + t2854 * t2928;
t2705 = t2831 + (-t2714 * t2928 - t2857 * t2930) * t2948;
t2704 = t2830 + (-t2713 * t2928 - t2856 * t2930) * t2946;
t2703 = t2829 + (-t2712 * t2928 - t2855 * t2930) * t2944;
t2702 = -t2976 * t2948 + t2831;
t2701 = -t2977 * t2946 + t2830;
t2700 = -t2978 * t2944 + t2829;
t2696 = t2826 + (-t2710 * t2928 - t2854 * t2930) * t2932;
t2695 = -t2979 * t2932 + t2826;
t2693 = (-t2930 * t2729 * t3079 - (-t2947 * t2888 * t3022 + t2930 * (-t2924 * t3091 + t2953 * t3226)) * t2749 * t3103) * t2925 + (t2805 * t2940 + (t2813 * t2911 - t2817 * t2915) * t2802) * t3099;
t2692 = (-t2930 * t2728 * t3080 - (-t2945 * t2887 * t3024 + t2930 * (-t2922 * t3092 + t2951 * t3228)) * t2748 * t3108) * t2923 + (t2804 * t2940 + (t2812 * t2910 - t2816 * t2914) * t2801) * t3104;
t2691 = (-t2930 * t2727 * t3081 - (-t2943 * t2886 * t3026 + t2930 * (-t2920 * t3093 + t2949 * t3230)) * t2747 * t3113) * t2921 + (t2803 * t2940 + (t2811 * t2909 - t2815 * t2913) * t2800) * t3109;
t2689 = t2693 * t2947 + t2924 * t3143;
t2688 = t2692 * t2945 + t2922 * t3144;
t2687 = t2691 * t2943 + t2920 * t3145;
t2686 = -t2925 * t2947 * t3143 + t2693 * t2953;
t2685 = -t2923 * t2945 * t3144 + t2692 * t2951;
t2684 = -t2921 * t2943 * t3145 + t2691 * t2949;
t2683 = t2690 * t2931 + t2918 * t3146;
t2681 = t2925 * t2954 * t2998 + t2693 * t2948;
t2680 = t2923 * t2952 * t2999 + t2692 * t2946;
t2679 = t2921 * t2950 * t3000 + t2691 * t2944;
t2673 = t2676 * t2946 + t2952 * t3139;
t2672 = t2946 * t3139 - t3236;
t2671 = t2677 * t2948 + t2954 * t3138;
t2670 = t2675 * t2944 + t2950 * t3140;
t2669 = t2948 * t3138 - t3233;
t2668 = t2944 * t3140 - t3239;
t2667 = t2674 * t2932 + t2934 * t3142;
t2666 = t2932 * t3142 - t3242;
t2665 = (t2924 * t2998 + t3234) * t2947;
t2664 = (t2922 * t2999 + t3237) * t2945;
t2663 = (t2920 * t3000 + t3240) * t2943;
t2662 = (t2918 * t3001 + t3243) * t2931;
t2661 = t2705 * t2953 + t2709 * t2947;
t2660 = t2705 * t2947 - t2709 * t2953;
t2659 = t2704 * t2951 + t2708 * t2945;
t2658 = t2704 * t2945 - t2708 * t2951;
t2657 = t2703 * t2949 + t2707 * t2943;
t2656 = t2703 * t2943 - t2707 * t2949;
t2655 = 0.2e1 * t2953 * t3234 + (-0.2e1 * t2925 + 0.4e1) * t3023;
t2654 = 0.2e1 * t2951 * t3237 + (-0.2e1 * t2923 + 0.4e1) * t3025;
t2653 = 0.2e1 * t2949 * t3240 + (-0.2e1 * t2921 + 0.4e1) * t3027;
t2652 = 0.2e1 * t2933 * t3243 + (-0.2e1 * t2919 + 0.4e1) * t3029;
t2651 = t2696 * t2933 + t2706 * t2931;
t2650 = t2696 * t2931 - t2706 * t2933;
t2649 = (-t2953 * t2681 - t3006 * t2947) * t2928 - t2930 * t2689;
t2648 = (-t2951 * t2680 - t3007 * t2945) * t2928 - t2930 * t2688;
t2647 = (-t2949 * t2679 - t3008 * t2943) * t2928 - t2930 * t2687;
t2646 = (-t2947 * t2681 + t3006 * t2953) * t2928 + t2930 * t2686;
t2645 = (-t2945 * t2680 + t3007 * t2951) * t2928 + t2930 * t2685;
t2644 = (-t2943 * t2679 + t3008 * t2949) * t2928 + t2930 * t2684;
t2643 = (-t2933 * t2678 - t3009 * t2931) * t2928 - t2930 * t2683;
t1 = [(t2710 * t3216 + t2712 * t3214 + t2713 * t3212 + t2714 * t3210) * MDP(1) + (-t2674 * t3059 - t2675 * t3056 - t2676 * t3053 - t2677 * t3050) * MDP(2) + (-t3013 - t3012 - t3011 - t3010 + (-t2666 * t3216 - t2668 * t3214 - t2669 * t3210 - t2672 * t3212) * t2928) * MDP(3) + (-t2695 * t3059 - t2700 * t3056 - t2701 * t3053 - t2702 * t3050 + (-t2667 * t3216 - t2670 * t3214 - t2671 * t3210 - t2673 * t3212) * t2928) * MDP(4) + (-t2662 * t3059 - t2663 * t3056 - t2664 * t3053 - t2665 * t3050 + (-t2912 * t2993 + t3018 * t3260 + t3019 * t3258 + t3020 * t3259) * t2970) * MDP(5) + (-t2652 * t3059 - t2653 * t3056 - t2654 * t3053 - t2655 * t3050 + (t2738 * t3069 - t2739 * t3073 - t2740 * t3072 - t2741 * t3074) * t2970) * MDP(6) + (-t2683 * t3059 - t2687 * t3056 - t2688 * t3053 - t2689 * t3050 + (t2912 * t3037 - t3072 * t3237 - t3073 * t3240 - t3074 * t3234) * t2970) * MDP(7) + (-t2682 * t3059 - t2684 * t3056 - t2685 * t3053 - t2686 * t3050 + (t2912 * t3151 - t3235 * t3260 - t3238 * t3258 - t3241 * t3259) * t2970) * MDP(8) + (t2690 * t3069 - t2691 * t3073 - t2692 * t3072 - t2693 * t3074) * t3245 + (-t3045 - t3044 - t3043 - t3042 + t2762 * t3185 + t2644 * t3214 + t2645 * t3212 + t2646 * t3210 + (t2650 * t3069 - t2656 * t3073 - t2658 * t3072 - t2660 * t3074) * t2970) * MDP(10) + (t2649 * t3210 + t2947 * t3010 + t2648 * t3212 + t2945 * t3011 + t2647 * t3214 + t2943 * t3012 + t2643 * t3216 + t2931 * t3013 + (t2651 * t3069 - t2657 * t3073 - t2659 * t3072 - t2661 * t3074) * t2970) * MDP(11) + t2873 * MDP(13) - t2872 * MDP(14) + t3246 * MDP(15); (t2710 * t3215 + t2712 * t3213 + t2713 * t3211 + t2714 * t3209) * MDP(1) + (t2674 * t3060 + t2675 * t3057 + t2676 * t3054 + t2677 * t3051) * MDP(2) + (t3017 + t3016 + t3015 + t3014 + (-t2666 * t3215 - t2668 * t3213 - t2669 * t3209 - t2672 * t3211) * t2928) * MDP(3) + (t2695 * t3060 + t2700 * t3057 + t2701 * t3054 + t2702 * t3051 + (-t2667 * t3215 - t2670 * t3213 - t2671 * t3209 - t2673 * t3211) * t2928) * MDP(4) + (t2662 * t3060 + t2663 * t3057 + t2664 * t3054 + t2665 * t3051 + (t2908 * t2993 - t2909 * t2992 - t2910 * t2991 - t2911 * t2990) * t2970) * MDP(5) + (t2652 * t3060 + t2653 * t3057 + t2654 * t3054 + t2655 * t3051 + (-t2738 * t3070 + t2739 * t3067 + t2740 * t3065 + t2741 * t3063) * t2970) * MDP(6) + (t2683 * t3060 + t2687 * t3057 + t2688 * t3054 + t2689 * t3051 + (-t2908 * t3037 + t2909 * t3036 + t2910 * t3035 + t2911 * t3034) * t2970) * MDP(7) + (t2682 * t3060 + t2684 * t3057 + t2685 * t3054 + t2686 * t3051 + (t2675 * t2909 * t3204 + t2676 * t2910 * t3203 + t2677 * t2911 * t3202 - t2908 * t3151) * t2970) * MDP(8) + (-t2690 * t3070 + t2691 * t3067 + t2692 * t3065 + t2693 * t3063) * t3245 + (t3049 + t3048 + t3047 + t3046 + t2763 * t3185 + t2644 * t3213 + t2645 * t3211 + t2646 * t3209 + (-t2650 * t3070 + t2656 * t3067 + t2658 * t3065 + t2660 * t3063) * t2970) * MDP(10) + (t2649 * t3209 - t2947 * t3014 + t2648 * t3211 - t2945 * t3015 + t2647 * t3213 - t2943 * t3016 + t2643 * t3215 - t2931 * t3017 + (-t2651 * t3070 + t2657 * t3067 + t2659 * t3065 + t2661 * t3063) * t2970) * MDP(11) + t2872 * MDP(13) + t2873 * MDP(14) + t3247 * MDP(15); (t2710 * t3208 + t2712 * t3207 + t2713 * t3206 + t2714 * t3205) * MDP(1) + (t2674 * t3122 + t2675 * t3121 + t2676 * t3120 + t2677 * t3119) * MDP(2) + (t3086 + t3085 + t3084 + t3083 + (-t2666 * t3208 - t2668 * t3207 - t2669 * t3205 - t2672 * t3206) * t2928) * MDP(3) + (t2695 * t3122 + t2700 * t3121 + t2701 * t3120 + t2702 * t3119 + (-t2667 * t3208 - t2670 * t3207 - t2671 * t3205 - t2673 * t3206) * t2928) * MDP(4) + (t2662 * t3122 + t2663 * t3121 + t2664 * t3120 + t2665 * t3119 + (-t2799 * t3021 - t2803 * t3020 - t2804 * t3019 - t2805 * t3018) * t2970) * MDP(5) + (t2652 * t3122 + t2653 * t3121 + t2654 * t3120 + t2655 * t3119 + (t2738 * t3129 + t2739 * t3125 + t2740 * t3124 + t2741 * t3123) * t2970) * MDP(6) + (t2683 * t3122 + t2687 * t3121 + t2688 * t3120 + t2689 * t3119 + (t2799 * t3090 + t2803 * t3089 + t2804 * t3088 + t2805 * t3087) * t2970) * MDP(7) + (t2682 * t3122 + t2684 * t3121 + t2685 * t3120 + t2686 * t3119 + (t2799 * t3244 + t2803 * t3241 + t2804 * t3238 + t2805 * t3235) * t2970) * MDP(8) + (t2690 * t3129 + t2691 * t3125 + t2692 * t3124 + t2693 * t3123) * t3245 + (t2783 * t3185 + t2644 * t3207 + t2645 * t3206 + t2646 * t3205 + t2818 * t3261 * t2694 + t2820 * t3262 * t2697 + t2821 * t3263 * t2698 + t2822 * t3264 * t2699 + (t2650 * t3129 + t2656 * t3125 + t2658 * t3124 + t2660 * t3123) * t2970) * MDP(10) + (t2649 * t3205 - t2947 * t3083 + t2648 * t3206 - t2945 * t3084 + t2647 * t3207 - t2943 * t3085 + t2643 * t3208 - t2931 * t3086 + (t2651 * t3129 + t2657 * t3125 + t2659 * t3124 + t2661 * t3123) * t2970) * MDP(11) + (t2940 - g(3)) * MDP(15); (t2710 * t2750 + t2712 * t2751 + t2713 * t2752 + t2714 * t2753) * MDP(1) + (t2674 * t3077 + t2675 * t3076 + t2676 * t3075 + t2677 * t3078) * MDP(2) + (t3033 + t3032 + t3031 + t3030 + (-t2666 * t2750 - t2668 * t2751 - t2669 * t2753 - t2672 * t2752) * t2928) * MDP(3) + (t2695 * t3077 + t2700 * t3076 + t2701 * t3075 + t2702 * t3078 + (-t2667 * t2750 - t2670 * t2751 - t2671 * t2753 - t2673 * t2752) * t2928) * MDP(4) + (t2662 * t3077 + t2663 * t3076 + t2664 * t3075 + t2665 * t3078 + (-t2990 * t3002 - t2991 * t3003 - t2992 * t3004 + t3021 * t3257) * t2970) * MDP(5) + (t2652 * t3077 + t2653 * t3076 + t2654 * t3075 + t2655 * t3078 + (-t2738 * t3071 + t2739 * t3068 + t2740 * t3066 + t2741 * t3064) * t2970) * MDP(6) + (t2683 * t3077 + t2687 * t3076 + t2688 * t3075 + t2689 * t3078 + (t3002 * t3034 + t3003 * t3035 + t3004 * t3036 - t3062 * t3184) * t2970) * MDP(7) + (t2682 * t3077 + t2684 * t3076 + t2685 * t3075 + t2686 * t3078 + (t2675 * t3128 + t2676 * t3127 + t2677 * t3126 - t3062) * t2970) * MDP(8) + (-t2690 * t3071 + t2691 * t3068 + t2692 * t3066 + t2693 * t3064) * t3245 + (t3061 + t3058 + t3055 + t3052 + t2750 * t2642 + t2751 * t2644 + t2752 * t2645 + t2753 * t2646 + (-t2650 * t3071 + t2656 * t3068 + t2658 * t3066 + t2660 * t3064) * t2970) * MDP(10) + (t2753 * t2649 - t2947 * t3030 + t2752 * t2648 - t2945 * t3031 + t2751 * t2647 - t2943 * t3032 + t2750 * t2643 - t2931 * t3033 + (-t2651 * t3071 + t2657 * t3068 + t2659 * t3066 + t2661 * t3064) * t2970) * MDP(11) + t2939 * MDP(12) + (-t3246 * t2916 + t3247 * t2917) * MDP(13) + (-t3247 * t2916 - t3246 * t2917) * MDP(14);];
tauX  = t1;
