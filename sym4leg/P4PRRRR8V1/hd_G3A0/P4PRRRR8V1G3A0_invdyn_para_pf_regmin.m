% Calculate minimal parameter regressor of inverse dynamics forces for
% P4PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [4x15]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-09-20 23:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P4PRRRR8V1G3A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G3A0_invdyn_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-09-20 22:59:57
% EndTime: 2020-09-20 23:00:17
% DurationCPUTime: 20.51s
% Computational Cost: add. (119109->666), mult. (280683->1279), div. (11524->18), fcn. (220021->30), ass. (0->527)
t313 = cos(qJ(2,1));
t307 = sin(qJ(2,1));
t312 = cos(qJ(3,1));
t502 = t307 * t312;
t247 = pkin(2) * t502 - t313 * pkin(5);
t287 = sin(pkin(3));
t289 = cos(pkin(3));
t306 = sin(qJ(3,1));
t595 = pkin(2) * t306;
t441 = t247 * t287 + t289 * t595;
t197 = 0.1e1 / t441 ^ 2;
t607 = 0.1e1 / t441;
t311 = cos(qJ(2,2));
t305 = sin(qJ(2,2));
t310 = cos(qJ(3,2));
t505 = t305 * t310;
t246 = pkin(2) * t505 - t311 * pkin(5);
t304 = sin(qJ(3,2));
t596 = pkin(2) * t304;
t442 = t246 * t287 + t289 * t596;
t195 = 0.1e1 / t442 ^ 2;
t606 = 0.1e1 / t442;
t309 = cos(qJ(2,3));
t303 = sin(qJ(2,3));
t308 = cos(qJ(3,3));
t508 = t303 * t308;
t245 = pkin(2) * t508 - t309 * pkin(5);
t302 = sin(qJ(3,3));
t597 = pkin(2) * t302;
t443 = t245 * t287 + t289 * t597;
t193 = 0.1e1 / t443 ^ 2;
t605 = 0.1e1 / t443;
t293 = cos(qJ(2,4));
t291 = sin(qJ(2,4));
t292 = cos(qJ(3,4));
t511 = t291 * t292;
t243 = pkin(2) * t511 - t293 * pkin(5);
t290 = sin(qJ(3,4));
t599 = pkin(2) * t290;
t444 = t243 * t287 + t289 * t599;
t187 = 0.1e1 / t444 ^ 2;
t604 = 0.1e1 / t444;
t286 = sin(pkin(6));
t288 = cos(pkin(6));
t516 = t289 * t313;
t519 = t289 * t307;
t592 = pkin(2) * t312;
t161 = pkin(5) * (t286 * t313 + t288 * t519) + (-t286 * t307 + t288 * t516) * t592;
t297 = legFrame(1,2);
t274 = cos(t297);
t603 = t161 * t274;
t518 = t289 * t309;
t521 = t289 * t303;
t594 = pkin(2) * t308;
t159 = pkin(5) * (t286 * t309 + t288 * t521) + (-t286 * t303 + t288 * t518) * t594;
t295 = legFrame(3,2);
t272 = cos(t295);
t602 = t159 * t272;
t517 = t289 * t311;
t520 = t289 * t305;
t593 = pkin(2) * t310;
t160 = pkin(5) * (t286 * t311 + t288 * t520) + (-t286 * t305 + t288 * t517) * t593;
t296 = legFrame(2,2);
t273 = cos(t296);
t601 = t160 * t273;
t522 = t289 * t293;
t523 = t289 * t291;
t598 = pkin(2) * t292;
t157 = -pkin(5) * (t286 * t293 + t288 * t523) + (t286 * t291 - t288 * t522) * t598;
t318 = xP(4);
t275 = sin(t318);
t276 = cos(t318);
t319 = koppelP(4,2);
t323 = koppelP(4,1);
t233 = t275 * t323 + t276 * t319;
t237 = -t275 * t319 + t276 * t323;
t294 = legFrame(4,2);
t267 = sin(t294);
t271 = cos(t294);
t364 = t233 * t271 + t267 * t237;
t600 = t157 * t364;
t591 = t286 * g(3);
t266 = t288 * g(3);
t300 = xDDP(2);
t590 = t300 - g(2);
t301 = xDDP(1);
t589 = t301 - g(1);
t314 = xDP(4);
t316 = xDP(2);
t317 = xDP(1);
t137 = (-t233 * t314 + t317) * t271 - t267 * (t237 * t314 + t316);
t315 = xDP(3);
t528 = t286 * t315;
t129 = t137 * t288 - t528;
t256 = t315 * t288;
t133 = t137 * t286 + t256;
t102 = -(t129 * t522 - t291 * t133) * t598 - pkin(5) * (t129 * t523 + t133 * t293);
t285 = t314 ^ 2;
t298 = xDDP(4);
t169 = -t285 * t233 + t237 * t298 + t300;
t173 = -t233 * t298 - t285 * t237 + t301;
t277 = 0.1e1 / t292;
t331 = t292 ^ 2;
t278 = 0.1e1 / t331;
t299 = xDDP(3);
t329 = 0.1e1 / pkin(2);
t539 = t604 * t329;
t460 = t277 * t539;
t375 = t102 * t287 * t460;
t513 = t290 * t291;
t527 = t287 * t292;
t342 = t289 * t513 + t527;
t512 = t290 * t293;
t178 = t286 * t512 + t288 * t342;
t541 = t604 * t277;
t462 = t271 * t541;
t407 = t178 * t462;
t463 = t267 * t541;
t408 = t178 * t463;
t177 = t286 * t342 - t288 * t512;
t468 = t177 * t541;
t515 = t289 * t315;
t114 = ((-t137 * t523 - t293 * t315) * t288 - (t137 * t293 - t291 * t515) * t286) * t290 - t129 * t527;
t567 = t114 * t604;
t487 = t604 * t567;
t501 = pkin(5) * t567;
t514 = t289 * t329;
t540 = t604 * t290;
t575 = t102 * t187;
t576 = t102 * t604;
t440 = t290 * t501;
t89 = (t440 - t576) * t277;
t33 = t169 * t408 - t173 * t407 + t299 * t468 + (-(t289 * t89 + (pkin(2) * (t287 * t293 * t567 + t514 * t576) * t331 - t287 * (t102 * t540 - t501) * t511) * t277) * t487 + (-t293 * t375 + (t287 * t513 + (t277 - t292) * t289) * t567) * t575) * t278;
t588 = t604 * t33;
t320 = koppelP(3,2);
t324 = koppelP(3,1);
t234 = t275 * t324 + t276 * t320;
t238 = -t275 * t320 + t276 * t324;
t268 = sin(t295);
t138 = (-t234 * t314 + t317) * t272 - t268 * (t238 * t314 + t316);
t130 = t138 * t288 - t528;
t134 = t138 * t286 + t256;
t106 = -(t130 * t518 - t134 * t303) * t594 - (t130 * t521 + t309 * t134) * pkin(5);
t170 = -t285 * t234 + t238 * t298 + t300;
t174 = -t234 * t298 - t285 * t238 + t301;
t279 = 0.1e1 / t308;
t332 = t308 ^ 2;
t280 = 0.1e1 / t332;
t536 = t605 * t329;
t455 = t279 * t536;
t373 = t106 * t287 * t455;
t510 = t302 * t303;
t526 = t287 * t308;
t341 = t289 * t510 + t526;
t509 = t302 * t309;
t182 = t286 * t509 + t288 * t341;
t538 = t605 * t279;
t457 = t272 * t538;
t405 = t182 * t457;
t458 = t268 * t538;
t406 = t182 * t458;
t179 = t286 * t341 - t288 * t509;
t467 = t179 * t538;
t118 = ((-t138 * t521 - t309 * t315) * t288 - (t138 * t309 - t303 * t515) * t286) * t302 - t130 * t526;
t563 = t118 * t605;
t483 = t605 * t563;
t500 = pkin(5) * t563;
t537 = t605 * t302;
t573 = t106 * t193;
t574 = t106 * t605;
t439 = t302 * t500;
t91 = (t439 - t574) * t279;
t34 = t170 * t406 - t174 * t405 + t299 * t467 + (-(t289 * t91 + (pkin(2) * (t287 * t309 * t563 + t514 * t574) * t332 - t287 * (t106 * t537 - t500) * t508) * t279) * t483 + (-t309 * t373 + (t287 * t510 + (t279 - t308) * t289) * t563) * t573) * t280;
t587 = t605 * t34;
t321 = koppelP(2,2);
t325 = koppelP(2,1);
t235 = t275 * t325 + t276 * t321;
t239 = -t275 * t321 + t276 * t325;
t269 = sin(t296);
t139 = (-t235 * t314 + t317) * t273 - t269 * (t239 * t314 + t316);
t131 = t139 * t288 - t528;
t135 = t139 * t286 + t256;
t107 = -(t131 * t517 - t135 * t305) * t593 - (t131 * t520 + t311 * t135) * pkin(5);
t171 = -t285 * t235 + t239 * t298 + t300;
t175 = -t235 * t298 - t285 * t239 + t301;
t281 = 0.1e1 / t310;
t333 = t310 ^ 2;
t282 = 0.1e1 / t333;
t533 = t606 * t329;
t450 = t281 * t533;
t371 = t107 * t287 * t450;
t507 = t304 * t305;
t525 = t287 * t310;
t340 = t289 * t507 + t525;
t506 = t304 * t311;
t183 = t286 * t506 + t288 * t340;
t535 = t606 * t281;
t452 = t273 * t535;
t403 = t183 * t452;
t453 = t269 * t535;
t404 = t183 * t453;
t180 = t286 * t340 - t288 * t506;
t466 = t180 * t535;
t119 = ((-t139 * t520 - t311 * t315) * t288 - (t139 * t311 - t305 * t515) * t286) * t304 - t131 * t525;
t562 = t119 * t606;
t482 = t606 * t562;
t499 = pkin(5) * t562;
t534 = t606 * t304;
t571 = t107 * t195;
t572 = t107 * t606;
t438 = t304 * t499;
t92 = (t438 - t572) * t281;
t35 = t171 * t404 - t175 * t403 + t299 * t466 + (-(t289 * t92 + (pkin(2) * (t287 * t311 * t562 + t514 * t572) * t333 - t287 * (t107 * t534 - t499) * t505) * t281) * t482 + (-t311 * t371 + (t287 * t507 + (t281 - t310) * t289) * t562) * t571) * t282;
t586 = t606 * t35;
t322 = koppelP(1,2);
t326 = koppelP(1,1);
t236 = t275 * t326 + t276 * t322;
t240 = -t275 * t322 + t276 * t326;
t270 = sin(t297);
t140 = (-t236 * t314 + t317) * t274 - t270 * (t240 * t314 + t316);
t132 = t140 * t288 - t528;
t136 = t140 * t286 + t256;
t108 = -(t132 * t516 - t136 * t307) * t592 - (t132 * t519 + t313 * t136) * pkin(5);
t172 = -t285 * t236 + t240 * t298 + t300;
t176 = -t236 * t298 - t285 * t240 + t301;
t283 = 0.1e1 / t312;
t334 = t312 ^ 2;
t284 = 0.1e1 / t334;
t530 = t607 * t329;
t445 = t283 * t530;
t369 = t108 * t287 * t445;
t504 = t306 * t307;
t524 = t287 * t312;
t339 = t289 * t504 + t524;
t503 = t306 * t313;
t184 = t286 * t503 + t288 * t339;
t532 = t607 * t283;
t447 = t274 * t532;
t401 = t184 * t447;
t448 = t270 * t532;
t402 = t184 * t448;
t181 = t286 * t339 - t288 * t503;
t465 = t181 * t532;
t120 = ((-t140 * t519 - t313 * t315) * t288 - (t140 * t313 - t307 * t515) * t286) * t306 - t132 * t524;
t561 = t120 * t607;
t481 = t607 * t561;
t498 = pkin(5) * t561;
t531 = t607 * t306;
t569 = t108 * t197;
t570 = t108 * t607;
t437 = t306 * t498;
t93 = (t437 - t570) * t283;
t36 = t172 * t402 - t176 * t401 + t299 * t465 + (-(t289 * t93 + (pkin(2) * (t287 * t313 * t561 + t514 * t570) * t334 - t287 * (t108 * t531 - t498) * t502) * t283) * t481 + (-t313 * t369 + (t287 * t504 + (t283 - t312) * t289) * t561) * t569) * t284;
t585 = t607 * t36;
t584 = t293 * t33;
t583 = t309 * t34;
t582 = t311 * t35;
t581 = t313 * t36;
t580 = t33 * t290;
t579 = t34 * t302;
t578 = t35 * t304;
t577 = t36 * t306;
t568 = t114 ^ 2 * t187;
t566 = t118 ^ 2 * t193;
t565 = t119 ^ 2 * t195;
t564 = t120 ^ 2 * t197;
t244 = pkin(5) * t291 + t293 * t598;
t356 = -t243 * t289 + t287 * t599;
t141 = t288 * t244 + t286 * t356;
t121 = t141 * t271 + t267 * t444;
t560 = t121 * t604;
t122 = -t141 * t267 + t271 * t444;
t559 = t122 * t604;
t248 = pkin(5) * t303 + t309 * t594;
t355 = -t245 * t289 + t287 * t597;
t143 = t288 * t248 + t286 * t355;
t123 = t143 * t272 + t268 * t443;
t558 = t123 * t605;
t124 = -t143 * t268 + t272 * t443;
t557 = t124 * t605;
t249 = pkin(5) * t305 + t311 * t593;
t354 = -t246 * t289 + t287 * t596;
t144 = t288 * t249 + t286 * t354;
t125 = t144 * t273 + t269 * t442;
t556 = t125 * t606;
t126 = -t144 * t269 + t273 * t442;
t555 = t126 * t606;
t250 = pkin(5) * t307 + t313 * t592;
t353 = -t247 * t289 + t287 * t595;
t145 = t288 * t250 + t286 * t353;
t127 = t145 * t274 + t270 * t441;
t554 = t127 * t607;
t128 = -t145 * t270 + t274 * t441;
t553 = t128 * t607;
t142 = -t286 * t244 + t288 * t356;
t552 = t142 * t604;
t146 = -t286 * t248 + t288 * t355;
t551 = t146 * t605;
t147 = -t286 * t249 + t288 * t354;
t550 = t147 * t606;
t148 = -t286 * t250 + t288 * t353;
t549 = t148 * t607;
t548 = t159 * t605;
t547 = t160 * t606;
t546 = t161 * t607;
t545 = t178 * t604;
t544 = t182 * t605;
t543 = t183 * t606;
t542 = t184 * t607;
t529 = t286 * t289;
t497 = t157 * t588;
t400 = g(1) * t271 - g(2) * t267;
t217 = t400 * t288 - t591;
t241 = t287 * g(1) + g(2) * t529;
t242 = g(1) * t529 - t287 * g(2);
t251 = t289 * t266;
t327 = pkin(5) ^ 2;
t328 = pkin(2) ^ 2;
t461 = t277 * t540;
t85 = -pkin(5) * t102 * t461 + (t277 * t327 + t292 * t328) * t567;
t70 = (t121 * t173 + t122 * t169 + t142 * t299) * t604 + (t85 * t487 - t89 * t575) * t277;
t338 = t241 * t267 - t242 * t271 - t70 * t287 - t251;
t53 = t291 * t217 - t293 * t338;
t496 = t53 * t545;
t399 = g(1) * t272 - g(2) * t268;
t218 = t399 * t288 - t591;
t456 = t279 * t537;
t86 = -pkin(5) * t106 * t456 + (t279 * t327 + t308 * t328) * t563;
t74 = (t123 * t174 + t124 * t170 + t146 * t299) * t605 + (t86 * t483 - t91 * t573) * t279;
t337 = t241 * t268 - t242 * t272 - t74 * t287 - t251;
t56 = t303 * t218 - t309 * t337;
t495 = t56 * t544;
t398 = g(1) * t273 - g(2) * t269;
t219 = t398 * t288 - t591;
t451 = t281 * t534;
t87 = -pkin(5) * t107 * t451 + (t281 * t327 + t310 * t328) * t562;
t75 = (t125 * t175 + t126 * t171 + t147 * t299) * t606 + (t87 * t482 - t92 * t571) * t281;
t336 = t241 * t269 - t242 * t273 - t75 * t287 - t251;
t57 = t305 * t219 - t311 * t336;
t494 = t57 * t543;
t397 = g(1) * t274 - g(2) * t270;
t220 = t397 * t288 - t591;
t446 = t283 * t531;
t88 = -pkin(5) * t108 * t446 + (t283 * t327 + t312 * t328) * t561;
t76 = (t127 * t176 + t128 * t172 + t148 * t299) * t607 + (t88 * t481 - t93 * t569) * t283;
t335 = t241 * t270 - t242 * t274 - t76 * t287 - t251;
t58 = t307 * t220 - t313 * t335;
t493 = t58 * t542;
t330 = 0.1e1 / pkin(2) ^ 2;
t492 = t102 ^ 2 * t187 * t330;
t491 = t106 ^ 2 * t193 * t330;
t490 = t107 ^ 2 * t195 * t330;
t489 = t108 ^ 2 * t197 * t330;
t488 = t278 * t568;
t486 = t280 * t566;
t485 = t282 * t565;
t484 = t284 * t564;
t361 = t236 * t274 + t270 * t240;
t480 = t361 * t542;
t479 = t364 * t545;
t363 = t234 * t272 + t268 * t238;
t478 = t363 * t544;
t362 = t235 * t273 + t269 * t239;
t477 = t362 * t543;
t476 = t604 * t600;
t158 = (t286 * t522 + t288 * t291) * t598 + (t286 * t523 - t288 * t293) * pkin(5);
t475 = t158 * t541;
t474 = t363 * t548;
t473 = t362 * t547;
t472 = t361 * t546;
t162 = (t286 * t518 + t288 * t303) * t594 + (t286 * t521 - t288 * t309) * pkin(5);
t471 = t162 * t538;
t163 = (t286 * t517 + t288 * t305) * t593 + (t286 * t520 - t288 * t311) * pkin(5);
t470 = t163 * t535;
t164 = (t286 * t516 + t288 * t307) * t592 + (t286 * t519 - t288 * t313) * pkin(5);
t469 = t164 * t532;
t464 = t604 * t539;
t459 = t605 * t536;
t454 = t606 * t533;
t449 = t607 * t530;
t436 = t53 * t468;
t435 = t56 * t467;
t434 = t57 * t466;
t433 = t58 * t465;
t432 = t33 * t461;
t431 = t34 * t456;
t430 = t35 * t451;
t429 = t36 * t446;
t428 = t114 * t464;
t427 = t118 * t459;
t426 = t119 * t454;
t425 = t120 * t449;
t424 = t283 * t480;
t423 = t277 * t479;
t422 = t279 * t478;
t421 = t281 * t477;
t420 = t161 * t447;
t419 = t159 * t457;
t418 = t160 * t452;
t417 = t277 * t476;
t416 = t157 * t463;
t415 = t157 * t462;
t414 = t279 * t474;
t413 = t159 * t458;
t412 = t281 * t473;
t411 = t160 * t453;
t410 = t283 * t472;
t409 = t161 * t448;
t396 = t157 * t432;
t395 = t159 * t431;
t394 = t160 * t430;
t393 = t161 * t429;
t392 = t53 * t423;
t391 = t56 * t422;
t390 = t57 * t421;
t389 = t58 * t424;
t388 = t53 * t408;
t387 = t56 * t406;
t386 = t57 * t404;
t385 = t58 * t402;
t384 = t53 * t407;
t383 = t56 * t405;
t382 = t57 * t403;
t381 = t58 * t401;
t380 = (t492 + t568) * t278 * t291 - t584;
t379 = (t491 + t566) * t280 * t303 - t583;
t378 = (t490 + t565) * t282 * t305 - t582;
t377 = (t489 + t564) * t284 * t307 - t581;
t376 = t102 * t428;
t374 = t106 * t427;
t372 = t107 * t426;
t370 = t108 * t425;
t368 = t488 * t540;
t367 = t486 * t537;
t366 = t485 * t534;
t365 = t484 * t531;
t360 = 0.2e1 * t376;
t359 = 0.2e1 * t374;
t358 = 0.2e1 * t372;
t357 = 0.2e1 * t370;
t352 = t157 * t368;
t351 = t159 * t367;
t350 = t160 * t366;
t349 = t161 * t365;
t232 = -t275 * t298 - t276 * t285;
t231 = -t275 * t285 + t276 * t298;
t216 = t397 * t286 + t266;
t215 = t398 * t286 + t266;
t214 = t399 * t286 + t266;
t213 = t400 * t286 + t266;
t190 = t313 * t220;
t189 = t311 * t219;
t188 = t309 * t218;
t185 = t293 * t217;
t112 = (-t127 * t236 + t128 * t240) * t607;
t111 = (-t125 * t235 + t126 * t239) * t606;
t110 = (-t123 * t234 + t124 * t238) * t605;
t109 = (-t121 * t233 + t122 * t237) * t604;
t100 = (t284 - 0.2e1) * t564;
t99 = (t282 - 0.2e1) * t565;
t98 = (t280 - 0.2e1) * t566;
t97 = (t278 - 0.2e1) * t568;
t73 = -t270 * g(1) - t274 * g(2) + t76;
t72 = -t269 * g(1) - t273 * g(2) + t75;
t71 = -t268 * g(1) - t272 * g(2) + t74;
t69 = -t267 * g(1) - t271 * g(2) + t70;
t68 = t287 * t216 - t73 * t289;
t67 = t287 * t215 - t72 * t289;
t66 = t287 * t214 - t71 * t289;
t65 = t287 * t213 - t69 * t289;
t64 = t190 + (-t216 * t289 - t287 * t73) * t307;
t63 = t189 + (-t215 * t289 - t287 * t72) * t305;
t62 = t188 + (-t214 * t289 - t287 * t71) * t303;
t61 = t307 * t335 + t190;
t60 = t305 * t336 + t189;
t59 = t303 * t337 + t188;
t55 = t185 + (-t213 * t289 - t287 * t69) * t291;
t54 = t291 * t338 + t185;
t52 = (-t289 * t88 * t425 - (-t306 * t247 * t369 + t289 * (-t283 * t437 + t312 * t570)) * t108 * t449) * t284 + (t164 * t299 + (t172 * t270 - t176 * t274) * t161) * t445;
t51 = (-t289 * t87 * t426 - (-t304 * t246 * t371 + t289 * (-t281 * t438 + t310 * t572)) * t107 * t454) * t282 + (t163 * t299 + (t171 * t269 - t175 * t273) * t160) * t450;
t50 = (-t289 * t86 * t427 - (-t302 * t245 * t373 + t289 * (-t279 * t439 + t308 * t574)) * t106 * t459) * t280 + (t162 * t299 + (t170 * t268 - t174 * t272) * t159) * t455;
t49 = (-t289 * t85 * t428 - (-t290 * t243 * t375 + t289 * (-t277 * t440 + t292 * t576)) * t102 * t464) * t278 + (t158 * t299 - (t169 * t267 - t173 * t271) * t157) * t460;
t48 = t283 * t489 + t52 * t306;
t47 = t281 * t490 + t51 * t304;
t46 = t279 * t491 + t50 * t302;
t45 = -t284 * t306 * t489 + t52 * t312;
t44 = -t282 * t304 * t490 + t51 * t310;
t43 = -t280 * t302 * t491 + t50 * t308;
t42 = t277 * t492 + t49 * t290;
t41 = -t278 * t290 * t492 + t49 * t292;
t40 = t284 * t313 * t357 + t307 * t52;
t39 = t282 * t311 * t358 + t305 * t51;
t38 = t280 * t309 * t359 + t303 * t50;
t37 = t278 * t293 * t360 + t291 * t49;
t32 = t305 * t35 + t311 * t485;
t31 = t305 * t485 - t582;
t30 = t307 * t36 + t313 * t484;
t29 = t303 * t34 + t309 * t486;
t28 = t307 * t484 - t581;
t27 = t303 * t486 - t583;
t26 = t291 * t33 + t293 * t488;
t25 = t291 * t488 - t584;
t24 = (t283 * t357 + t577) * t306;
t23 = (t281 * t358 + t578) * t304;
t22 = (t279 * t359 + t579) * t302;
t21 = (t277 * t360 + t580) * t290;
t20 = t306 * t68 + t64 * t312;
t19 = t64 * t306 - t312 * t68;
t18 = t304 * t67 + t63 * t310;
t17 = t63 * t304 - t310 * t67;
t16 = t302 * t66 + t62 * t308;
t15 = t62 * t302 - t308 * t66;
t14 = 0.2e1 * t312 * t577 + (-0.2e1 * t284 + 0.4e1) * t370;
t13 = 0.2e1 * t310 * t578 + (-0.2e1 * t282 + 0.4e1) * t372;
t12 = 0.2e1 * t308 * t579 + (-0.2e1 * t280 + 0.4e1) * t374;
t11 = 0.2e1 * t292 * t580 + (-0.2e1 * t278 + 0.4e1) * t376;
t10 = t65 * t290 + t55 * t292;
t9 = t55 * t290 - t65 * t292;
t8 = (t377 * t306 - t312 * t40) * t287 - t289 * t48;
t7 = (t378 * t304 - t310 * t39) * t287 - t289 * t47;
t6 = (t379 * t302 - t308 * t38) * t287 - t289 * t46;
t5 = (-t306 * t40 - t377 * t312) * t287 + t289 * t45;
t4 = (-t304 * t39 - t378 * t310) * t287 + t289 * t44;
t3 = (-t302 * t38 - t379 * t308) * t287 + t289 * t43;
t2 = (t380 * t290 - t292 * t37) * t287 - t289 * t42;
t1 = (-t290 * t37 - t380 * t292) * t287 + t289 * t41;
t77 = [t73 * t554 + t72 * t556 + t71 * t558 + t69 * t560, -t33 * t407 - t34 * t405 - t35 * t403 - t36 * t401, -t384 - t383 - t382 - t381 + (-t25 * t560 - t27 * t558 - t28 * t554 - t31 * t556) * t287, -t54 * t407 - t59 * t405 - t60 * t403 - t61 * t401 + (-t26 * t560 - t29 * t558 - t30 * t554 - t32 * t556) * t287, -t21 * t407 - t22 * t405 - t23 * t403 - t24 * t401 + (-t271 * t352 + t365 * t603 + t366 * t601 + t367 * t602) * t329, -t11 * t407 - t12 * t405 - t13 * t403 - t14 * t401 + (-t100 * t420 + t415 * t97 - t418 * t99 - t419 * t98) * t329, -t42 * t407 - t46 * t405 - t47 * t403 - t48 * t401 + (t271 * t396 - t418 * t578 - t419 * t579 - t420 * t577) * t329, -t41 * t407 - t43 * t405 - t44 * t403 - t45 * t401 + (t271 * t497 - t585 * t603 - t586 * t601 - t587 * t602) * t329, (t415 * t49 - t418 * t51 - t419 * t50 - t420 * t52) * t329, -t271 * t496 - t272 * t495 - t273 * t494 - t274 * t493 + t1 * t560 + t3 * t558 + t4 * t556 + t5 * t554 + (-t15 * t419 - t17 * t418 - t19 * t420 + t415 * t9) * t329, t8 * t554 + t306 * t381 + t7 * t556 + t304 * t382 + t6 * t558 + t302 * t383 + t2 * t560 + t290 * t384 + (t10 * t415 - t16 * t419 - t18 * t418 - t20 * t420) * t329, 0, t232, -t231, t589; t73 * t553 + t72 * t555 + t71 * t557 + t69 * t559, t33 * t408 + t34 * t406 + t35 * t404 + t36 * t402, t388 + t387 + t386 + t385 + (-t25 * t559 - t27 * t557 - t28 * t553 - t31 * t555) * t287, t54 * t408 + t59 * t406 + t60 * t404 + t61 * t402 + (-t26 * t559 - t29 * t557 - t30 * t553 - t32 * t555) * t287, t21 * t408 + t22 * t406 + t23 * t404 + t24 * t402 + (t267 * t352 - t268 * t351 - t269 * t350 - t270 * t349) * t329, t11 * t408 + t12 * t406 + t13 * t404 + t14 * t402 + (t100 * t409 + t411 * t99 + t413 * t98 - t416 * t97) * t329, t42 * t408 + t46 * t406 + t47 * t404 + t48 * t402 + (-t267 * t396 + t268 * t395 + t269 * t394 + t270 * t393) * t329, t41 * t408 + t43 * t406 + t44 * t404 + t45 * t402 + (t268 * t34 * t548 + t269 * t35 * t547 + t270 * t36 * t546 - t267 * t497) * t329, (t409 * t52 + t411 * t51 + t413 * t50 - t416 * t49) * t329, t267 * t496 + t268 * t495 + t269 * t494 + t270 * t493 + t1 * t559 + t3 * t557 + t4 * t555 + t5 * t553 + (t15 * t413 + t17 * t411 + t19 * t409 - t416 * t9) * t329, t8 * t553 - t306 * t385 + t7 * t555 - t304 * t386 + t6 * t557 - t302 * t387 + t2 * t559 - t290 * t388 + (-t10 * t416 + t16 * t413 + t18 * t411 + t20 * t409) * t329, 0, t231, t232, t590; t73 * t549 + t72 * t550 + t71 * t551 + t69 * t552, t33 * t468 + t34 * t467 + t35 * t466 + t36 * t465, t436 + t435 + t434 + t433 + (-t25 * t552 - t27 * t551 - t28 * t549 - t31 * t550) * t287, t54 * t468 + t59 * t467 + t60 * t466 + t61 * t465 + (-t26 * t552 - t29 * t551 - t30 * t549 - t32 * t550) * t287, t21 * t468 + t22 * t467 + t23 * t466 + t24 * t465 + (-t158 * t368 - t162 * t367 - t163 * t366 - t164 * t365) * t329, t11 * t468 + t12 * t467 + t13 * t466 + t14 * t465 + (t100 * t469 + t470 * t99 + t471 * t98 + t475 * t97) * t329, t42 * t468 + t46 * t467 + t47 * t466 + t48 * t465 + (t158 * t432 + t162 * t431 + t163 * t430 + t164 * t429) * t329, t41 * t468 + t43 * t467 + t44 * t466 + t45 * t465 + (t158 * t588 + t162 * t587 + t163 * t586 + t164 * t585) * t329, (t469 * t52 + t470 * t51 + t471 * t50 + t475 * t49) * t329, t1 * t552 + t3 * t551 + t4 * t550 + t5 * t549 + t177 * t604 * t53 + t179 * t605 * t56 + t180 * t606 * t57 + t181 * t607 * t58 + (t15 * t471 + t17 * t470 + t19 * t469 + t475 * t9) * t329, t8 * t549 - t306 * t433 + t7 * t550 - t304 * t434 + t6 * t551 - t302 * t435 + t2 * t552 - t290 * t436 + (t10 * t475 + t16 * t471 + t18 * t470 + t20 * t469) * t329, 0, 0, 0, t299 - g(3); t109 * t69 + t110 * t71 + t111 * t72 + t112 * t73, t33 * t423 + t34 * t422 + t35 * t421 + t36 * t424, t389 + t392 + t391 + t390 + (-t109 * t25 - t110 * t27 - t111 * t31 - t112 * t28) * t287, t61 * t424 + t54 * t423 + t59 * t422 + t60 * t421 + (-t109 * t26 - t110 * t29 - t111 * t32 - t112 * t30) * t287, t24 * t424 + t21 * t423 + t22 * t422 + t23 * t421 + (-t349 * t361 - t350 * t362 - t351 * t363 + t368 * t600) * t329, t11 * t423 + t12 * t422 + t13 * t421 + t14 * t424 + (t100 * t410 + t412 * t99 + t414 * t98 - t417 * t97) * t329, t48 * t424 + t42 * t423 + t46 * t422 + t47 * t421 + (t361 * t393 + t362 * t394 + t363 * t395 - t417 * t580) * t329, t45 * t424 + t41 * t423 + t43 * t422 + t44 * t421 + (-t33 * t476 + t34 * t474 + t35 * t473 + t36 * t472) * t329, (t410 * t52 + t412 * t51 + t414 * t50 - t417 * t49) * t329, t58 * t480 + t53 * t479 + t56 * t478 + t57 * t477 + t109 * t1 + t110 * t3 + t111 * t4 + t112 * t5 + (t15 * t414 + t17 * t412 + t19 * t410 - t417 * t9) * t329, t112 * t8 - t306 * t389 + t111 * t7 - t304 * t390 + t110 * t6 - t302 * t391 + t109 * t2 - t290 * t392 + (-t10 * t417 + t16 * t414 + t18 * t412 + t20 * t410) * t329, t298, -t589 * t275 + t276 * t590, -t275 * t590 - t589 * t276, 0;];
tauX_reg  = t77;
