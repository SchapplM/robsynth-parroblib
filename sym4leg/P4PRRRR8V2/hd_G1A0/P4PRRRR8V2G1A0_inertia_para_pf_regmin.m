% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4*4x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V2G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:10:55
% EndTime: 2020-08-07 11:11:17
% DurationCPUTime: 24.44s
% Computational Cost: add. (40475->960), mult. (83384->1913), div. (2924->26), fcn. (88956->30), ass. (0->717)
t1051 = legFrame(1,3);
t1025 = sin(t1051);
t1029 = cos(t1051);
t1066 = cos(qJ(3,1));
t1045 = sin(pkin(4));
t1060 = sin(qJ(3,1));
t1330 = t1045 * t1060;
t1280 = pkin(2) * t1330;
t1439 = pkin(3) * t1066 ^ 2;
t1067 = cos(qJ(2,1));
t1061 = sin(qJ(2,1));
t1068 = pkin(7) + pkin(6);
t1291 = t1061 * t1068;
t1012 = pkin(2) * t1067 + t1291;
t1044 = sin(pkin(8));
t1046 = cos(pkin(8));
t1021 = t1068 * t1067;
t1009 = pkin(2) * t1061 - t1021;
t1047 = cos(pkin(4));
t1092 = pkin(3) * t1330 - t1009 * t1047;
t1449 = t1012 * t1046 + t1044 * t1092;
t912 = t1044 * t1012 - t1046 * t1092;
t952 = t1046 * t1025 + t1029 * t1044;
t1313 = t1047 * t1061;
t959 = t1044 * t1313 - t1046 * t1067;
t962 = t1044 * t1067 + t1046 * t1313;
t862 = -(t1025 * t962 + t959 * t1029) * t1439 + (-t1025 * t912 + t1449 * t1029) * t1066 + t952 * t1280;
t948 = -t1044 * t1025 + t1029 * t1046;
t865 = (-t1025 * t959 + t962 * t1029) * t1439 + (t1449 * t1025 + t912 * t1029) * t1066 - t948 * t1280;
t1324 = t1045 * t1066;
t885 = -t948 * t1324 - (t1067 * t952 + t1313 * t948) * t1060;
t888 = -t952 * t1324 - (-t1067 * t948 + t1313 * t952) * t1060;
t1314 = t1047 * t1060;
t1329 = t1045 * t1061;
t909 = t1329 * t1439 + (pkin(3) * t1314 + t1009 * t1045) * t1066 + pkin(2) * t1314;
t905 = 0.1e1 / t909 ^ 2;
t1453 = (t862 * t888 + t865 * t885) * t905;
t1050 = legFrame(2,3);
t1024 = sin(t1050);
t1028 = cos(t1050);
t1064 = cos(qJ(3,2));
t1058 = sin(qJ(3,2));
t1332 = t1045 * t1058;
t1281 = pkin(2) * t1332;
t1440 = pkin(3) * t1064 ^ 2;
t1065 = cos(qJ(2,2));
t1059 = sin(qJ(2,2));
t1295 = t1059 * t1068;
t1011 = pkin(2) * t1065 + t1295;
t1020 = t1068 * t1065;
t1008 = pkin(2) * t1059 - t1020;
t1093 = pkin(3) * t1332 - t1008 * t1047;
t1448 = t1011 * t1046 + t1044 * t1093;
t911 = t1044 * t1011 - t1046 * t1093;
t951 = t1046 * t1024 + t1028 * t1044;
t1315 = t1047 * t1059;
t958 = t1044 * t1315 - t1046 * t1065;
t961 = t1044 * t1065 + t1046 * t1315;
t861 = -(t1024 * t961 + t958 * t1028) * t1440 + (-t1024 * t911 + t1448 * t1028) * t1064 + t951 * t1281;
t947 = -t1044 * t1024 + t1028 * t1046;
t864 = (-t1024 * t958 + t961 * t1028) * t1440 + (t1448 * t1024 + t911 * t1028) * t1064 - t947 * t1281;
t1326 = t1045 * t1064;
t884 = -t947 * t1326 - (t1065 * t951 + t1315 * t947) * t1058;
t887 = -t951 * t1326 - (-t1065 * t947 + t1315 * t951) * t1058;
t1316 = t1047 * t1058;
t1331 = t1045 * t1059;
t908 = t1331 * t1440 + (pkin(3) * t1316 + t1008 * t1045) * t1064 + pkin(2) * t1316;
t903 = 0.1e1 / t908 ^ 2;
t1452 = (t861 * t887 + t864 * t884) * t903;
t1049 = legFrame(3,3);
t1023 = sin(t1049);
t1027 = cos(t1049);
t1062 = cos(qJ(3,3));
t1056 = sin(qJ(3,3));
t1334 = t1045 * t1056;
t1282 = pkin(2) * t1334;
t1441 = pkin(3) * t1062 ^ 2;
t1063 = cos(qJ(2,3));
t1057 = sin(qJ(2,3));
t1299 = t1057 * t1068;
t1010 = pkin(2) * t1063 + t1299;
t1019 = t1068 * t1063;
t1007 = pkin(2) * t1057 - t1019;
t1094 = pkin(3) * t1334 - t1007 * t1047;
t1447 = t1010 * t1046 + t1044 * t1094;
t910 = t1044 * t1010 - t1046 * t1094;
t950 = t1046 * t1023 + t1027 * t1044;
t1317 = t1047 * t1057;
t957 = t1044 * t1317 - t1046 * t1063;
t960 = t1044 * t1063 + t1046 * t1317;
t860 = -(t1023 * t960 + t957 * t1027) * t1441 + (-t1023 * t910 + t1447 * t1027) * t1062 + t950 * t1282;
t946 = -t1044 * t1023 + t1027 * t1046;
t863 = (-t1023 * t957 + t960 * t1027) * t1441 + (t1447 * t1023 + t910 * t1027) * t1062 - t946 * t1282;
t1328 = t1045 * t1062;
t883 = -t946 * t1328 - (t1063 * t950 + t1317 * t946) * t1056;
t886 = -t950 * t1328 - (-t1063 * t946 + t1317 * t950) * t1056;
t1318 = t1047 * t1056;
t1333 = t1045 * t1057;
t907 = t1333 * t1441 + (pkin(3) * t1318 + t1007 * t1045) * t1062 + pkin(2) * t1318;
t901 = 0.1e1 / t907 ^ 2;
t1451 = (t860 * t886 + t863 * t883) * t901;
t1048 = legFrame(4,3);
t1022 = sin(t1048);
t1026 = cos(t1048);
t1054 = cos(qJ(3,4));
t1052 = sin(qJ(3,4));
t1338 = t1045 * t1052;
t1283 = pkin(2) * t1338;
t1442 = pkin(3) * t1054 ^ 2;
t1055 = cos(qJ(2,4));
t1053 = sin(qJ(2,4));
t1304 = t1053 * t1068;
t1006 = pkin(2) * t1055 + t1304;
t1015 = t1068 * t1055;
t1005 = pkin(2) * t1053 - t1015;
t1095 = pkin(3) * t1338 - t1005 * t1047;
t1446 = t1006 * t1046 + t1044 * t1095;
t906 = t1044 * t1006 - t1046 * t1095;
t949 = t1046 * t1022 + t1026 * t1044;
t1320 = t1047 * t1053;
t953 = t1044 * t1320 - t1046 * t1055;
t954 = t1044 * t1055 + t1046 * t1320;
t857 = -(t1022 * t954 + t953 * t1026) * t1442 + (-t1022 * t906 + t1446 * t1026) * t1054 + t949 * t1283;
t945 = -t1044 * t1022 + t1026 * t1046;
t858 = (-t1022 * t953 + t954 * t1026) * t1442 + (t1446 * t1022 + t906 * t1026) * t1054 - t945 * t1283;
t1336 = t1045 * t1054;
t875 = -t945 * t1336 - (t1055 * t949 + t1320 * t945) * t1052;
t876 = -t949 * t1336 - (-t1055 * t945 + t1320 * t949) * t1052;
t1321 = t1047 * t1052;
t1337 = t1045 * t1053;
t899 = t1337 * t1442 + (pkin(3) * t1321 + t1005 * t1045) * t1054 + pkin(2) * t1321;
t898 = 0.1e1 / t899 ^ 2;
t1450 = (t857 * t876 + t858 * t875) * t898;
t1445 = 0.2e1 * pkin(2);
t1444 = 0.2e1 * t1045;
t1078 = 0.1e1 / pkin(3);
t1443 = 0.2e1 * t1078;
t1069 = xP(4);
t1034 = sin(t1069);
t1035 = cos(t1069);
t1305 = t1053 * t1054;
t1070 = koppelP(4,2);
t1074 = koppelP(4,1);
t997 = t1044 * t1070 + t1046 * t1074;
t998 = -t1044 * t1074 + t1046 * t1070;
t1131 = t1034 * t998 - t997 * t1035;
t941 = t1034 * t997 + t998 * t1035;
t869 = t1022 * t1131 + t941 * t1026;
t977 = t1055 * t1070 - t1074 * t1320;
t978 = t1055 * t1074 + t1070 * t1320;
t917 = -t1044 * t978 + t977 * t1046;
t918 = t1044 * t977 + t978 * t1046;
t1014 = t1054 * pkin(3) + pkin(2);
t993 = t1014 * t1321;
t1438 = (((-t1034 * t917 + t918 * t1035) * t1026 + (t918 * t1034 + t917 * t1035) * t1022) * t1052 + t869 * t1336) / (t993 + (pkin(3) * t1305 + t1005) * t1336);
t1300 = t1057 * t1062;
t1071 = koppelP(3,2);
t1075 = koppelP(3,1);
t1000 = -t1044 * t1075 + t1046 * t1071;
t999 = t1044 * t1071 + t1046 * t1075;
t1122 = t1034 * t1000 - t999 * t1035;
t942 = t1000 * t1035 + t1034 * t999;
t870 = t1023 * t1122 + t942 * t1027;
t979 = t1063 * t1071 - t1075 * t1317;
t982 = t1063 * t1075 + t1071 * t1317;
t919 = -t1044 * t982 + t979 * t1046;
t922 = t1044 * t979 + t982 * t1046;
t1016 = t1062 * pkin(3) + pkin(2);
t994 = t1016 * t1318;
t1437 = (((-t1034 * t919 + t922 * t1035) * t1027 + (t922 * t1034 + t919 * t1035) * t1023) * t1056 + t870 * t1328) / (t994 + (pkin(3) * t1300 + t1007) * t1328);
t1296 = t1059 * t1064;
t1072 = koppelP(2,2);
t1076 = koppelP(2,1);
t1001 = t1044 * t1072 + t1046 * t1076;
t1002 = -t1044 * t1076 + t1046 * t1072;
t1121 = t1001 * t1035 - t1034 * t1002;
t943 = t1034 * t1001 + t1002 * t1035;
t871 = -t1024 * t1121 + t943 * t1028;
t980 = t1065 * t1072 - t1076 * t1315;
t983 = t1065 * t1076 + t1072 * t1315;
t920 = -t1044 * t983 + t980 * t1046;
t923 = t1044 * t980 + t983 * t1046;
t1017 = t1064 * pkin(3) + pkin(2);
t995 = t1017 * t1316;
t1436 = (((-t1034 * t920 + t923 * t1035) * t1028 + t1024 * (t1034 * t923 + t920 * t1035)) * t1058 + t871 * t1326) / (t995 + (pkin(3) * t1296 + t1008) * t1326);
t1292 = t1061 * t1066;
t1073 = koppelP(1,2);
t1077 = koppelP(1,1);
t1003 = t1044 * t1073 + t1046 * t1077;
t1004 = -t1044 * t1077 + t1046 * t1073;
t1120 = t1003 * t1035 - t1034 * t1004;
t944 = t1034 * t1003 + t1004 * t1035;
t872 = -t1025 * t1120 + t944 * t1029;
t981 = t1067 * t1073 - t1077 * t1313;
t984 = t1067 * t1077 + t1073 * t1313;
t921 = -t1044 * t984 + t981 * t1046;
t924 = t1044 * t981 + t984 * t1046;
t1018 = t1066 * pkin(3) + pkin(2);
t996 = t1018 * t1314;
t1435 = (((-t1034 * t921 + t924 * t1035) * t1029 + (t924 * t1034 + t921 * t1035) * t1025) * t1060 + t872 * t1324) / (t996 + (pkin(3) * t1292 + t1009) * t1324);
t897 = 0.1e1 / t899;
t985 = t1034 * t1074 + t1035 * t1070;
t989 = -t1034 * t1070 + t1035 * t1074;
t809 = (-t875 * t985 + t876 * t989) * t897;
t1434 = t809 * t897;
t964 = t1053 * t1014 - t1015;
t928 = t1336 * t964 + t993;
t925 = 0.1e1 / t928;
t1433 = t809 * t925;
t900 = 0.1e1 / t907;
t986 = t1034 * t1075 + t1035 * t1071;
t990 = -t1034 * t1071 + t1035 * t1075;
t810 = (-t883 * t986 + t886 * t990) * t900;
t1432 = t810 * t900;
t974 = t1057 * t1016 - t1019;
t938 = t1328 * t974 + t994;
t929 = 0.1e1 / t938;
t1431 = t810 * t929;
t902 = 0.1e1 / t908;
t987 = t1034 * t1076 + t1035 * t1072;
t991 = -t1034 * t1072 + t1035 * t1076;
t811 = (-t884 * t987 + t887 * t991) * t902;
t1430 = t811 * t902;
t975 = t1059 * t1017 - t1020;
t939 = t1326 * t975 + t995;
t931 = 0.1e1 / t939;
t1429 = t811 * t931;
t904 = 0.1e1 / t909;
t988 = t1034 * t1077 + t1035 * t1073;
t992 = -t1034 * t1073 + t1035 * t1077;
t812 = (-t885 * t988 + t888 * t992) * t904;
t1428 = t812 * t904;
t976 = t1061 * t1018 - t1021;
t940 = t1324 * t976 + t996;
t933 = 0.1e1 / t940;
t1427 = t812 * t933;
t1370 = t1047 * (t1014 * t1055 + t1304);
t853 = t869 * t1370 - t964 * (t941 * t1022 - t1026 * t1131);
t1426 = t853 * t925;
t1369 = t1047 * (t1016 * t1063 + t1299);
t854 = t870 * t1369 - t974 * (t942 * t1023 - t1027 * t1122);
t1425 = t854 * t929;
t1368 = t1047 * (t1017 * t1065 + t1295);
t855 = t871 * t1368 - (t943 * t1024 + t1028 * t1121) * t975;
t1424 = t855 * t931;
t1367 = t1047 * (t1018 * t1067 + t1291);
t856 = t872 * t1367 - (t1025 * t944 + t1029 * t1120) * t976;
t1423 = t856 * t933;
t1422 = t857 * t897;
t1421 = t857 * t898;
t1420 = t858 * t897;
t1419 = t860 * t900;
t1418 = t860 * t901;
t1417 = t861 * t902;
t1416 = t861 * t903;
t1415 = t862 * t904;
t1414 = t862 * t905;
t1413 = t863 * t900;
t1412 = t864 * t902;
t1411 = t865 * t904;
t1410 = t875 * t897;
t1409 = t876 * t897;
t1408 = t876 * t898;
t1407 = t883 * t900;
t1406 = t884 * t902;
t1405 = t885 * t904;
t1404 = t886 * t900;
t1403 = t886 * t901;
t1402 = t887 * t902;
t1401 = t887 * t903;
t1400 = t888 * t904;
t1399 = t888 * t905;
t889 = -t945 * t1370 + t964 * t949;
t1398 = t889 * t925;
t890 = -t1370 * t949 - t964 * t945;
t1397 = t890 * t925;
t926 = 0.1e1 / t928 ^ 2;
t1396 = t890 * t926;
t891 = -t1369 * t946 + t974 * t950;
t1395 = t891 * t929;
t892 = -t1368 * t947 + t975 * t951;
t1394 = t892 * t931;
t893 = -t1367 * t948 + t976 * t952;
t1393 = t893 * t933;
t894 = -t1369 * t950 - t974 * t946;
t1392 = t894 * t929;
t930 = 0.1e1 / t938 ^ 2;
t1391 = t894 * t930;
t895 = -t1368 * t951 - t975 * t947;
t1390 = t895 * t931;
t932 = 0.1e1 / t939 ^ 2;
t1389 = t895 * t932;
t896 = -t1367 * t952 - t976 * t948;
t1388 = t896 * t933;
t934 = 0.1e1 / t940 ^ 2;
t1387 = t896 * t934;
t1386 = t897 * t925;
t1385 = t900 * t929;
t1384 = t902 * t931;
t1383 = t904 * t933;
t1307 = t1052 * t1053;
t1189 = t1045 * t1307;
t1319 = t1047 * t1054;
t1382 = t925 * (-t1189 + t1319);
t1188 = t1045 * t1305;
t956 = t1188 + t1321;
t1381 = t925 * t956;
t1302 = t1056 * t1057;
t1187 = t1045 * t1302;
t1312 = t1047 * t1062;
t1380 = t929 * (-t1187 + t1312);
t1186 = t1045 * t1300;
t966 = t1186 + t1318;
t1379 = t929 * t966;
t1298 = t1058 * t1059;
t1185 = t1045 * t1298;
t1311 = t1047 * t1064;
t1378 = t931 * (-t1185 + t1311);
t1184 = t1045 * t1296;
t968 = t1184 + t1316;
t1377 = t931 * t968;
t1294 = t1060 * t1061;
t1191 = t1045 * t1294;
t1310 = t1047 * t1066;
t1376 = t933 * (-t1191 + t1310);
t1190 = t1045 * t1292;
t970 = t1190 + t1314;
t1375 = t933 * t970;
t757 = t989 * t1420 - t985 * t1422;
t762 = t990 * t1413 - t986 * t1419;
t763 = t991 * t1412 - t987 * t1417;
t764 = t992 * t1411 - t988 * t1415;
t1036 = t1052 ^ 2;
t1374 = t1036 * t898;
t1038 = t1056 ^ 2;
t1373 = t1038 * t901;
t1039 = t1058 ^ 2;
t1372 = t1039 * t903;
t1040 = t1060 ^ 2;
t1371 = t1040 * t905;
t1346 = t1078 * t925;
t813 = (-t889 * t985 + t890 * t989) * t1346;
t1366 = t1052 * t813;
t1365 = t1052 * t897;
t1364 = t1053 * t897;
t1363 = t1054 * t897;
t1362 = t1055 * t897;
t1345 = t1078 * t929;
t814 = (-t891 * t986 + t894 * t990) * t1345;
t1361 = t1056 * t814;
t1360 = t1056 * t900;
t1359 = t1057 * t900;
t1344 = t1078 * t931;
t815 = (-t892 * t987 + t895 * t991) * t1344;
t1358 = t1058 * t815;
t1357 = t1058 * t902;
t1356 = t1059 * t902;
t1343 = t1078 * t933;
t816 = (-t893 * t988 + t896 * t992) * t1343;
t1355 = t1060 * t816;
t1354 = t1060 * t904;
t1353 = t1061 * t904;
t1352 = t1062 * t900;
t1351 = t1063 * t900;
t1350 = t1064 * t902;
t1349 = t1065 * t902;
t1348 = t1066 * t904;
t1347 = t1067 * t904;
t1335 = t1045 * t1055;
t1327 = t1045 * t1063;
t1325 = t1045 * t1065;
t1323 = t1045 * t1067;
t1322 = t1045 * t1078;
t1309 = t1047 * t1068;
t1308 = t1047 * t1078;
t1306 = t1052 * t1054;
t1303 = t1054 * t1055;
t1301 = t1056 * t1062;
t1297 = t1058 * t1064;
t1293 = t1060 * t1066;
t1290 = t1062 * t1063;
t1289 = t1064 * t1065;
t1288 = t1066 * t1067;
t1287 = pkin(6) * t1346;
t1286 = pkin(6) * t1345;
t1285 = pkin(6) * t1344;
t1284 = pkin(6) * t1343;
t1279 = t897 * t1438;
t1278 = t900 * t1437;
t1277 = t902 * t1436;
t1276 = t904 * t1435;
t1275 = t875 * t1421;
t1274 = t858 * t1408;
t1273 = t883 * t1418;
t1272 = t884 * t1416;
t1271 = t885 * t1414;
t1270 = t863 * t1403;
t1269 = t864 * t1401;
t1268 = t865 * t1399;
t1267 = t875 * t1408;
t1266 = t883 * t1403;
t1265 = t884 * t1401;
t1264 = t885 * t1399;
t1263 = t1036 * t1438;
t1262 = t1036 * t1434;
t1261 = t1038 * t1437;
t1260 = t1038 * t1432;
t1259 = t1039 * t1436;
t1258 = t1039 * t1430;
t1257 = t1040 * t1435;
t1256 = t1040 * t1428;
t1255 = t1052 * t1433;
t1254 = t813 * t1365;
t1253 = t1054 * t1438;
t1252 = t1054 * t1433;
t1251 = t813 * t1363;
t1250 = t1055 * t1438;
t1249 = t1056 * t1431;
t1248 = t814 * t1360;
t1247 = t1058 * t1429;
t1246 = t815 * t1357;
t1245 = t1060 * t1427;
t1244 = t816 * t1354;
t1243 = t1062 * t1437;
t1242 = t1062 * t1431;
t1241 = t814 * t1352;
t1240 = t1063 * t1437;
t1239 = t1064 * t1436;
t1238 = t1064 * t1429;
t1237 = t815 * t1350;
t1236 = t1065 * t1436;
t1235 = t1066 * t1435;
t1234 = t1066 * t1427;
t1233 = t816 * t1348;
t1232 = t1067 * t1435;
t1231 = t897 * t1335;
t1230 = t900 * t1327;
t1229 = t902 * t1325;
t1228 = t904 * t1323;
t1227 = t897 * t1321;
t1226 = t897 * t1319;
t1225 = t900 * t1318;
t1224 = t902 * t1316;
t1223 = t904 * t1314;
t1222 = t900 * t1312;
t1221 = t902 * t1311;
t1220 = t904 * t1310;
t1219 = t925 * t1308;
t1218 = t929 * t1308;
t1217 = t931 * t1308;
t1216 = t933 * t1308;
t1215 = t925 * t1307;
t1214 = t898 * t1306;
t1213 = t1052 * t1362;
t1212 = t925 * t1305;
t1211 = t897 * t1303;
t1210 = t929 * t1302;
t1209 = t901 * t1301;
t1208 = t1056 * t1351;
t1207 = t929 * t1300;
t1206 = t931 * t1298;
t1205 = t903 * t1297;
t1204 = t1058 * t1349;
t1203 = t931 * t1296;
t1202 = t933 * t1294;
t1201 = t905 * t1293;
t1200 = t1060 * t1347;
t1199 = t933 * t1292;
t1198 = t900 * t1290;
t1197 = t902 * t1289;
t1196 = t904 * t1288;
t1195 = t1014 * t1338;
t1194 = t1016 * t1334;
t1193 = t1017 * t1332;
t1192 = t1018 * t1330;
t1183 = t1052 * t1287;
t1182 = t1054 * t1287;
t1181 = t1056 * t1286;
t1180 = t1058 * t1285;
t1179 = t1060 * t1284;
t1178 = t1062 * t1286;
t1177 = t1064 * t1285;
t1176 = t1066 * t1284;
t1175 = t875 * t889 * t1386;
t1174 = t876 * t890 * t1386;
t1173 = t883 * t891 * t1385;
t1172 = t884 * t892 * t1384;
t1171 = t885 * t893 * t1383;
t1170 = t886 * t894 * t1385;
t1169 = t887 * t895 * t1384;
t1168 = t888 * t896 * t1383;
t1167 = t897 * t1263;
t1166 = t900 * t1261;
t1165 = t902 * t1259;
t1164 = t904 * t1257;
t1163 = t1052 * t1253;
t1162 = t1306 * t1434;
t1161 = t1056 * t1243;
t1160 = t1301 * t1432;
t1159 = t1058 * t1239;
t1158 = t1297 * t1430;
t1157 = t1060 * t1235;
t1156 = t1293 * t1428;
t1155 = t1053 * t925 * t1322;
t1154 = t1057 * t929 * t1322;
t1153 = t1059 * t931 * t1322;
t1152 = t1061 * t933 * t1322;
t1151 = t1047 * t1014;
t777 = (-t985 * ((t1014 * t945 + t1309 * t949) * t1303 - (-t945 * t1068 + t1151 * t949) * t1305 + t949 * t1195) + t989 * ((t1014 * t949 - t1309 * t945) * t1303 + (t949 * t1068 + t1151 * t945) * t1305 - t945 * t1195)) / (t956 * t1014 - t1015 * t1336);
t1150 = t1047 * t1016;
t778 = (-t986 * ((t1016 * t946 + t1309 * t950) * t1290 - (-t946 * t1068 + t1150 * t950) * t1300 + t950 * t1194) + t990 * ((t1016 * t950 - t1309 * t946) * t1290 + (t950 * t1068 + t1150 * t946) * t1300 - t946 * t1194)) / (t966 * t1016 - t1019 * t1328);
t1149 = t1047 * t1017;
t779 = (-t987 * ((t1017 * t947 + t1309 * t951) * t1289 - (-t947 * t1068 + t1149 * t951) * t1296 + t951 * t1193) + t991 * ((t1017 * t951 - t1309 * t947) * t1289 + (t951 * t1068 + t1149 * t947) * t1296 - t947 * t1193)) / (t968 * t1017 - t1020 * t1326);
t1148 = t1047 * t1018;
t780 = (-t988 * ((t1018 * t948 + t1309 * t952) * t1288 - (-t948 * t1068 + t1148 * t952) * t1292 + t952 * t1192) + t992 * ((t1018 * t952 - t1309 * t948) * t1288 + (t952 * t1068 + t1148 * t948) * t1292 - t948 * t1192)) / (t970 * t1018 - t1021 * t1324);
t1147 = t757 * t875 + t809 * t857;
t1146 = t757 * t876 + t809 * t858;
t1145 = t762 * t883 + t810 * t860;
t1144 = t762 * t886 + t810 * t863;
t1143 = t763 * t884 + t811 * t861;
t1142 = t763 * t887 + t811 * t864;
t1141 = t764 * t885 + t812 * t862;
t1140 = t764 * t888 + t812 * t865;
t1135 = t897 * t1163;
t1134 = t900 * t1161;
t1133 = t902 * t1159;
t1132 = t904 * t1157;
t1130 = t1052 * t1155;
t1129 = t1054 * t1155;
t1128 = t1056 * t1154;
t1127 = t1062 * t1154;
t1126 = t1058 * t1153;
t1125 = t1064 * t1153;
t1124 = t1060 * t1152;
t1123 = t1066 * t1152;
t1119 = t1335 * t757 + t809 * t1445;
t1118 = t1335 * t857 + t875 * t1445;
t1117 = t1335 * t858 + t876 * t1445;
t1116 = t1327 * t762 + t810 * t1445;
t1115 = t1327 * t860 + t883 * t1445;
t1114 = t1327 * t863 + t886 * t1445;
t1113 = t1325 * t763 + t811 * t1445;
t1112 = t1325 * t861 + t884 * t1445;
t1111 = t1325 * t864 + t887 * t1445;
t1110 = t1323 * t764 + t812 * t1445;
t1109 = t1323 * t862 + t885 * t1445;
t1108 = t1323 * t865 + t888 * t1445;
t1107 = t757 * t1438 + t777 * t809;
t1106 = t762 * t1437 + t778 * t810;
t1105 = t763 * t1436 + t779 * t811;
t1104 = t764 * t1435 + t780 * t812;
t1103 = t857 * t1438 + t777 * t875;
t1102 = t858 * t1438 + t777 * t876;
t1101 = t860 * t1437 + t778 * t883;
t1100 = t863 * t1437 + t778 * t886;
t1099 = t861 * t1436 + t779 * t884;
t1098 = t864 * t1436 + t779 * t887;
t1097 = t862 * t1435 + t780 * t885;
t1096 = t865 * t1435 + t780 * t888;
t1091 = (t875 * t890 + t876 * t889) * t1386;
t1090 = (t883 * t894 + t886 * t891) * t1385;
t1089 = (t884 * t895 + t887 * t892) * t1384;
t1088 = (t885 * t896 + t888 * t893) * t1383;
t1087 = t925 * (t853 * t1410 + t889 * t1438);
t1086 = t925 * (t853 * t1409 + t890 * t1438);
t1085 = t929 * (t854 * t1407 + t891 * t1437);
t1084 = t929 * (t854 * t1404 + t894 * t1437);
t1083 = t931 * (t855 * t1406 + t892 * t1436);
t1082 = t931 * (t855 * t1402 + t895 * t1436);
t1081 = t933 * (t856 * t1405 + t893 * t1435);
t1080 = t933 * (t856 * t1400 + t896 * t1435);
t1079 = 0.1e1 / pkin(3) ^ 2;
t1013 = t1034 ^ 2 + t1035 ^ 2;
t882 = t888 ^ 2;
t881 = t887 ^ 2;
t880 = t886 ^ 2;
t879 = t885 ^ 2;
t878 = t884 ^ 2;
t877 = t883 ^ 2;
t874 = t876 ^ 2;
t873 = t875 ^ 2;
t842 = t1216 * t896 + t1228 * t888;
t841 = t1216 * t893 + t1228 * t885;
t840 = t1217 * t895 + t1229 * t887;
t839 = t1217 * t892 + t1229 * t884;
t838 = t1218 * t894 + t1230 * t886;
t837 = t1218 * t891 + t1230 * t883;
t834 = t842 * t1060;
t833 = t842 * t1066;
t832 = t841 * t1060;
t831 = t841 * t1066;
t830 = t840 * t1058;
t829 = t840 * t1064;
t828 = t839 * t1058;
t827 = t839 * t1064;
t826 = t838 * t1056;
t825 = t838 * t1062;
t824 = t837 * t1056;
t823 = t837 * t1062;
t822 = t1219 * t890 + t1231 * t876;
t821 = t1219 * t889 + t1231 * t875;
t820 = t822 * t1052;
t819 = t822 * t1054;
t818 = t821 * t1052;
t817 = t821 * t1054;
t804 = (pkin(6) * t888 + t1329 * t865) * t904;
t803 = (pkin(6) * t885 + t1329 * t862) * t904;
t802 = (pkin(6) * t887 + t1331 * t864) * t902;
t801 = (pkin(6) * t884 + t1331 * t861) * t902;
t800 = (pkin(6) * t886 + t1333 * t863) * t900;
t799 = (pkin(6) * t883 + t1333 * t860) * t900;
t798 = (pkin(6) * t876 + t1337 * t858) * t897;
t797 = (pkin(6) * t875 + t1337 * t857) * t897;
t796 = -t1123 * t896 - t834;
t795 = -t1124 * t896 + t833;
t794 = -t1123 * t893 - t832;
t793 = -t1124 * t893 + t831;
t792 = -t1125 * t895 - t830;
t791 = -t1126 * t895 + t829;
t790 = -t1125 * t892 - t828;
t789 = -t1126 * t892 + t827;
t788 = -t1127 * t894 - t826;
t787 = -t1128 * t894 + t825;
t786 = -t1127 * t891 - t824;
t785 = -t1128 * t891 + t823;
t784 = -t1129 * t890 - t820;
t783 = -t1130 * t890 + t819;
t782 = -t1129 * t889 - t818;
t781 = -t1130 * t889 + t817;
t776 = -t1108 * t1354 - t1176 * t896;
t775 = -t1109 * t1354 - t1176 * t893;
t774 = t1108 * t1348 - t1179 * t896;
t773 = t1109 * t1348 - t1179 * t893;
t772 = -t1114 * t1360 - t1178 * t894;
t771 = -t1115 * t1360 - t1178 * t891;
t770 = t1114 * t1352 - t1181 * t894;
t769 = t1115 * t1352 - t1181 * t891;
t768 = -t1111 * t1357 - t1177 * t895;
t767 = -t1112 * t1357 - t1177 * t892;
t766 = t1111 * t1350 - t1180 * t895;
t765 = t1112 * t1350 - t1180 * t892;
t761 = -t1117 * t1365 - t1182 * t890;
t760 = -t1118 * t1365 - t1182 * t889;
t759 = t1117 * t1363 - t1183 * t890;
t758 = t1118 * t1363 - t1183 * t889;
t756 = (-t1353 * t888 - t1356 * t887 - t1359 * t886 - t1364 * t876) * t1045;
t755 = (-t1353 * t885 - t1356 * t884 - t1359 * t883 - t1364 * t875) * t1045;
t754 = (t1347 * t888 + t1349 * t887 + t1351 * t886 + t1362 * t876) * t1045;
t753 = (t1347 * t885 + t1349 * t884 + t1351 * t883 + t1362 * t875) * t1045;
t752 = t1047 * t816 + t1323 * t812;
t751 = t1047 * t815 + t1325 * t811;
t750 = t1047 * t814 + t1327 * t810;
t749 = t752 * t1060;
t748 = t752 * t1066;
t747 = t751 * t1058;
t746 = t751 * t1064;
t745 = t750 * t1056;
t744 = t750 * t1062;
t743 = t1047 * t813 + t1335 * t809;
t742 = t743 * t1052;
t741 = t743 * t1054;
t740 = -t1066 * t804 - t1223 * t865;
t739 = -t1066 * t803 - t1223 * t862;
t738 = -t1064 * t802 - t1224 * t864;
t737 = -t1064 * t801 - t1224 * t861;
t736 = -t1062 * t800 - t1225 * t863;
t735 = -t1062 * t799 - t1225 * t860;
t734 = -t1060 * t804 + t1220 * t865;
t733 = -t1060 * t803 + t1220 * t862;
t732 = -t1058 * t802 + t1221 * t864;
t731 = -t1058 * t801 + t1221 * t861;
t730 = -t1056 * t800 + t1222 * t863;
t729 = -t1056 * t799 + t1222 * t860;
t728 = -t1054 * t798 - t1227 * t858;
t727 = -t1054 * t797 - t1227 * t857;
t726 = -t1052 * t798 + t1226 * t858;
t725 = -t1052 * t797 + t1226 * t857;
t724 = (t893 * t1387 + t892 * t1389 + t891 * t1391 + t889 * t1396) * t1079;
t723 = t812 * pkin(6) + t1329 * t764;
t722 = t811 * pkin(6) + t1331 * t763;
t721 = t810 * pkin(6) + t1333 * t762;
t720 = t809 * pkin(6) + t1337 * t757;
t719 = t1264 + t1265 + t1266 + t1267;
t718 = t1036 * t1267 + t1038 * t1266 + t1039 * t1265 + t1040 * t1264;
t717 = -t1190 * t816 - t749;
t716 = -t1191 * t816 + t748;
t715 = -t1184 * t815 - t747;
t714 = -t1185 * t815 + t746;
t713 = -t1186 * t814 - t745;
t712 = -t1187 * t814 + t744;
t711 = 0.2e1 * t1201 * t885 * t888 + 0.2e1 * t1205 * t884 * t887 + 0.2e1 * t1209 * t883 * t886 + 0.2e1 * t1214 * t875 * t876;
t710 = -t1188 * t813 - t742;
t709 = -t1189 * t813 + t741;
t708 = t1411 + t1412 + t1413 + t1420;
t707 = t1415 + t1417 + t1419 + t1422;
t706 = -t1066 * pkin(6) * t816 - t1060 * t1110;
t705 = -pkin(6) * t1355 + t1066 * t1110;
t704 = -t1062 * pkin(6) * t814 - t1056 * t1116;
t703 = -pkin(6) * t1361 + t1062 * t1116;
t702 = -t1064 * pkin(6) * t815 - t1058 * t1113;
t701 = -pkin(6) * t1358 + t1064 * t1113;
t700 = -t1054 * pkin(6) * t813 - t1052 * t1119;
t699 = -pkin(6) * t1366 + t1054 * t1119;
t698 = -t1066 * t723 - t1314 * t764;
t697 = -t1064 * t722 - t1316 * t763;
t696 = -t1062 * t721 - t1318 * t762;
t695 = -t1060 * t723 + t1310 * t764;
t694 = -t1058 * t722 + t1311 * t763;
t693 = -t1056 * t721 + t1312 * t762;
t692 = -t1054 * t720 - t1321 * t757;
t691 = -t1052 * t720 + t1319 * t757;
t690 = t865 * t1414 + t864 * t1416 + t863 * t1418 + t858 * t1421;
t689 = (t1054 * t1091 + t1062 * t1090 + t1064 * t1089 + t1066 * t1088) * t1078;
t688 = (t1052 * t1091 + t1056 * t1090 + t1058 * t1089 + t1060 * t1088) * t1078;
t687 = (t1055 * t1450 + t1063 * t1451 + t1065 * t1452 + t1067 * t1453) * t1045;
t686 = (-t1053 * t1450 - t1057 * t1451 - t1059 * t1452 - t1061 * t1453) * t1045;
t1 = [t857 ^ 2 * t898 + t860 ^ 2 * t901 + t861 ^ 2 * t903 + t862 ^ 2 * t905, t873 * t898 + t877 * t901 + t878 * t903 + t879 * t905, (t1055 * t1275 + t1063 * t1273 + t1065 * t1272 + t1067 * t1271) * t1444, (-t1053 * t1275 - t1057 * t1273 - t1059 * t1272 - t1061 * t1271) * t1444, t1371 * t879 + t1372 * t878 + t1373 * t877 + t1374 * t873, 0.2e1 * t1201 * t879 + 0.2e1 * t1205 * t878 + 0.2e1 * t1209 * t877 + 0.2e1 * t1214 * t873, (t1052 * t1175 + t1056 * t1173 + t1058 * t1172 + t1060 * t1171) * t1443, (t1054 * t1175 + t1062 * t1173 + t1064 * t1172 + t1066 * t1171) * t1443, (t889 ^ 2 * t926 + t891 ^ 2 * t930 + t892 ^ 2 * t932 + t893 ^ 2 * t934) * t1079, (t885 * t773 + t862 * t793) * t904 + (t884 * t765 + t861 * t789) * t902 + (t883 * t769 + t860 * t785) * t900 + (t875 * t758 + t857 * t781) * t897 + (t1393 * t733 + t1394 * t731 + t1395 * t729 + t1398 * t725) * t1078, (t885 * t775 + t862 * t794) * t904 + (t884 * t767 + t861 * t790) * t902 + (t883 * t771 + t860 * t786) * t900 + (t875 * t760 + t857 * t782) * t897 + (t1393 * t739 + t1394 * t737 + t1395 * t735 + t1398 * t727) * t1078, 0, 0, 0, t1013; t690, t719, t687, t686, t718, t711, t688, t689, t724, (t885 * t774 + t862 * t795) * t904 + (t884 * t766 + t861 * t791) * t902 + (t883 * t770 + t860 * t787) * t900 + (t875 * t759 + t857 * t783) * t897 + (t1393 * t734 + t1394 * t732 + t1395 * t730 + t1398 * t726) * t1078, (t885 * t776 + t862 * t796) * t904 + (t884 * t768 + t861 * t792) * t902 + (t883 * t772 + t860 * t788) * t900 + (t875 * t761 + t857 * t784) * t897 + (t1393 * t740 + t1394 * t738 + t1395 * t736 + t1398 * t728) * t1078, 0, 0, 0, 0; t707, 0, t753, t755, 0, 0, 0, 0, 0, (t1376 * t893 + t1378 * t892 + t1380 * t891 + t1382 * t889) * t1078 + (t1196 * t885 + t1197 * t884 + t1198 * t883 + t1211 * t875) * t1045, (-t1375 * t893 - t1377 * t892 - t1379 * t891 - t1381 * t889) * t1078 + (-t1200 * t885 - t1204 * t884 - t1208 * t883 - t1213 * t875) * t1045, 0, 0, 0, 0; t764 * t1415 + t763 * t1417 + t762 * t1419 + t757 * t1422, t1405 * t812 + t1406 * t811 + t1407 * t810 + t1410 * t809, (t1141 * t1347 + t1143 * t1349 + t1145 * t1351 + t1147 * t1362) * t1045, (-t1141 * t1353 - t1143 * t1356 - t1145 * t1359 - t1147 * t1364) * t1045, t1256 * t885 + t1258 * t884 + t1260 * t883 + t1262 * t875, 0.2e1 * t1156 * t885 + 0.2e1 * t1158 * t884 + 0.2e1 * t1160 * t883 + 0.2e1 * t1162 * t875, t875 * t1254 + t883 * t1248 + t884 * t1246 + t885 * t1244 + (t1245 * t893 + t1247 * t892 + t1249 * t891 + t1255 * t889) * t1078, t875 * t1251 + t883 * t1241 + t884 * t1237 + t885 * t1233 + (t1234 * t893 + t1238 * t892 + t1242 * t891 + t1252 * t889) * t1078, (t1393 * t816 + t1394 * t815 + t1395 * t814 + t1398 * t813) * t1078, (t885 * t705 + t862 * t716) * t904 + (t884 * t701 + t861 * t714) * t902 + (t883 * t703 + t860 * t712) * t900 + (t875 * t699 + t857 * t709) * t897 + (t1393 * t695 + t1394 * t694 + t1395 * t693 + t1398 * t691) * t1078, (t885 * t706 + t862 * t717) * t904 + (t884 * t702 + t861 * t715) * t902 + (t883 * t704 + t860 * t713) * t900 + (t875 * t700 + t857 * t710) * t897 + (t1393 * t698 + t1394 * t697 + t1395 * t696 + t1398 * t692) * t1078, 0, -t1034, -t1035, 0; t690, t719, t687, t686, t718, t711, t688, t689, t724, (t888 * t773 + t865 * t793) * t904 + (t887 * t765 + t864 * t789) * t902 + (t886 * t769 + t863 * t785) * t900 + (t876 * t758 + t858 * t781) * t897 + (t1388 * t733 + t1390 * t731 + t1392 * t729 + t1397 * t725) * t1078, (t888 * t775 + t865 * t794) * t904 + (t887 * t767 + t864 * t790) * t902 + (t886 * t771 + t863 * t786) * t900 + (t876 * t760 + t858 * t782) * t897 + (t1388 * t739 + t1390 * t737 + t1392 * t735 + t1397 * t727) * t1078, 0, 0, 0, 0; t858 ^ 2 * t898 + t863 ^ 2 * t901 + t864 ^ 2 * t903 + t865 ^ 2 * t905, t874 * t898 + t880 * t901 + t881 * t903 + t882 * t905, (t1055 * t1274 + t1063 * t1270 + t1065 * t1269 + t1067 * t1268) * t1444, (-t1053 * t1274 - t1057 * t1270 - t1059 * t1269 - t1061 * t1268) * t1444, t1371 * t882 + t1372 * t881 + t1373 * t880 + t1374 * t874, 0.2e1 * t1201 * t882 + 0.2e1 * t1205 * t881 + 0.2e1 * t1209 * t880 + 0.2e1 * t1214 * t874, (t1052 * t1174 + t1056 * t1170 + t1058 * t1169 + t1060 * t1168) * t1443, (t1054 * t1174 + t1062 * t1170 + t1064 * t1169 + t1066 * t1168) * t1443, (t890 ^ 2 * t926 + t894 ^ 2 * t930 + t895 ^ 2 * t932 + t896 ^ 2 * t934) * t1079, (t888 * t774 + t865 * t795) * t904 + (t887 * t766 + t864 * t791) * t902 + (t886 * t770 + t863 * t787) * t900 + (t876 * t759 + t858 * t783) * t897 + (t1388 * t734 + t1390 * t732 + t1392 * t730 + t1397 * t726) * t1078, (t888 * t776 + t865 * t796) * t904 + (t887 * t768 + t864 * t792) * t902 + (t886 * t772 + t863 * t788) * t900 + (t876 * t761 + t858 * t784) * t897 + (t1388 * t740 + t1390 * t738 + t1392 * t736 + t1397 * t728) * t1078, 0, 0, 0, t1013; t708, 0, t754, t756, 0, 0, 0, 0, 0, (t1376 * t896 + t1378 * t895 + t1380 * t894 + t1382 * t890) * t1078 + (t1196 * t888 + t1197 * t887 + t1198 * t886 + t1211 * t876) * t1045, (-t1375 * t896 - t1377 * t895 - t1379 * t894 - t1381 * t890) * t1078 + (-t1200 * t888 - t1204 * t887 - t1208 * t886 - t1213 * t876) * t1045, 0, 0, 0, 0; t764 * t1411 + t763 * t1412 + t762 * t1413 + t757 * t1420, t1400 * t812 + t1402 * t811 + t1404 * t810 + t1409 * t809, (t1140 * t1347 + t1142 * t1349 + t1144 * t1351 + t1146 * t1362) * t1045, (-t1140 * t1353 - t1142 * t1356 - t1144 * t1359 - t1146 * t1364) * t1045, t1256 * t888 + t1258 * t887 + t1260 * t886 + t1262 * t876, 0.2e1 * t1156 * t888 + 0.2e1 * t1158 * t887 + 0.2e1 * t1160 * t886 + 0.2e1 * t1162 * t876, t876 * t1254 + t886 * t1248 + t887 * t1246 + t888 * t1244 + (t1245 * t896 + t1247 * t895 + t1249 * t894 + t1255 * t890) * t1078, t876 * t1251 + t886 * t1241 + t887 * t1237 + t888 * t1233 + (t1234 * t896 + t1238 * t895 + t1242 * t894 + t1252 * t890) * t1078, (t1388 * t816 + t1390 * t815 + t1392 * t814 + t1397 * t813) * t1078, (t888 * t705 + t865 * t716) * t904 + (t887 * t701 + t864 * t714) * t902 + (t886 * t703 + t863 * t712) * t900 + (t876 * t699 + t858 * t709) * t897 + (t1388 * t695 + t1390 * t694 + t1392 * t693 + t1397 * t691) * t1078, (t888 * t706 + t865 * t717) * t904 + (t887 * t702 + t864 * t715) * t902 + (t886 * t704 + t863 * t713) * t900 + (t876 * t700 + t858 * t710) * t897 + (t1388 * t698 + t1390 * t697 + t1392 * t696 + t1397 * t692) * t1078, 0, t1035, -t1034, 0; t707, 0, t753, t755, 0, 0, 0, 0, 0, t817 + t823 + t827 + t831 + (-t1202 * t893 - t1206 * t892 - t1210 * t891 - t1215 * t889) * t1322, -t818 - t824 - t828 - t832 + (-t1199 * t893 - t1203 * t892 - t1207 * t891 - t1212 * t889) * t1322, 0, 0, 0, 0; t708, 0, t754, t756, 0, 0, 0, 0, 0, t819 + t825 + t829 + t833 + (-t1202 * t896 - t1206 * t895 - t1210 * t894 - t1215 * t890) * t1322, -t820 - t826 - t830 - t834 + (-t1199 * t896 - t1203 * t895 - t1207 * t894 - t1212 * t890) * t1322, 0, 0, 0, 0; 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; t764 + t763 + t762 + t757, 0, (t1055 * t809 + t1063 * t810 + t1065 * t811 + t1067 * t812) * t1045, (-t1053 * t809 - t1057 * t810 - t1059 * t811 - t1061 * t812) * t1045, 0, 0, 0, 0, 0, t741 + t744 + t746 + t748 + (-t1294 * t816 - t1298 * t815 - t1302 * t814 - t1307 * t813) * t1045, -t742 - t745 - t747 - t749 + (-t1292 * t816 - t1296 * t815 - t1300 * t814 - t1305 * t813) * t1045, 0, 0, 0, 0; t780 * t1415 + t779 * t1417 + t778 * t1419 + t777 * t1422, t1276 * t885 + t1277 * t884 + t1278 * t883 + t1279 * t875, (t1097 * t1347 + t1099 * t1349 + t1101 * t1351 + t1103 * t1362) * t1045, (-t1097 * t1353 - t1099 * t1356 - t1101 * t1359 - t1103 * t1364) * t1045, t1164 * t885 + t1165 * t884 + t1166 * t883 + t1167 * t875, 0.2e1 * t1132 * t885 + 0.2e1 * t1133 * t884 + 0.2e1 * t1134 * t883 + 0.2e1 * t1135 * t875, (t1052 * t1087 + t1056 * t1085 + t1058 * t1083 + t1060 * t1081) * t1078, (t1054 * t1087 + t1062 * t1085 + t1064 * t1083 + t1066 * t1081) * t1078, (t853 * t889 * t926 + t854 * t891 * t930 + t855 * t892 * t932 + t856 * t893 * t934) * t1079, t758 * t1438 + t765 * t1436 + t769 * t1437 + t773 * t1435 + t777 * t781 + t778 * t785 + t779 * t789 + t780 * t793 + (t1423 * t733 + t1424 * t731 + t1425 * t729 + t1426 * t725) * t1078, t760 * t1438 + t767 * t1436 + t771 * t1437 + t775 * t1435 + t777 * t782 + t778 * t786 + t779 * t790 + t780 * t794 + (t1423 * t739 + t1424 * t737 + t1425 * t735 + t1426 * t727) * t1078, 0, -t1034, -t1035, 0; t1411 * t780 + t1412 * t779 + t1413 * t778 + t777 * t1420, t1276 * t888 + t1277 * t887 + t1278 * t886 + t1279 * t876, (t1096 * t1347 + t1098 * t1349 + t1100 * t1351 + t1102 * t1362) * t1045, (-t1096 * t1353 - t1098 * t1356 - t1100 * t1359 - t1102 * t1364) * t1045, t1164 * t888 + t1165 * t887 + t1166 * t886 + t1167 * t876, 0.2e1 * t1132 * t888 + 0.2e1 * t1133 * t887 + 0.2e1 * t1134 * t886 + 0.2e1 * t1135 * t876, (t1052 * t1086 + t1056 * t1084 + t1058 * t1082 + t1060 * t1080) * t1078, (t1054 * t1086 + t1062 * t1084 + t1064 * t1082 + t1066 * t1080) * t1078, (t1387 * t856 + t1389 * t855 + t1391 * t854 + t1396 * t853) * t1079, t759 * t1438 + t766 * t1436 + t770 * t1437 + t774 * t1435 + t777 * t783 + t778 * t787 + t779 * t791 + t780 * t795 + (t1423 * t734 + t1424 * t732 + t1425 * t730 + t1426 * t726) * t1078, t761 * t1438 + t768 * t1436 + t772 * t1437 + t776 * t1435 + t777 * t784 + t778 * t788 + t779 * t792 + t780 * t796 + (t1423 * t740 + t1424 * t738 + t1425 * t736 + t1426 * t728) * t1078, 0, t1035, -t1034, 0; t777 + t778 + t779 + t780, 0, (t1232 + t1236 + t1240 + t1250) * t1045, (-t1053 * t1438 - t1057 * t1437 - t1059 * t1436 - t1061 * t1435) * t1045, 0, 0, 0, 0, 0, (t1376 * t856 + t1378 * t855 + t1380 * t854 + t1382 * t853) * t1078 + (t1054 * t1250 + t1062 * t1240 + t1064 * t1236 + t1066 * t1232) * t1045, (-t1375 * t856 - t1377 * t855 - t1379 * t854 - t1381 * t853) * t1078 + (-t1052 * t1250 - t1056 * t1240 - t1058 * t1236 - t1060 * t1232) * t1045, 0, 0, 0, 0; t777 * t757 + t778 * t762 + t779 * t763 + t780 * t764, t812 * t1435 + t811 * t1436 + t810 * t1437 + t809 * t1438, (t1055 * t1107 + t1063 * t1106 + t1065 * t1105 + t1067 * t1104) * t1045, (-t1053 * t1107 - t1057 * t1106 - t1059 * t1105 - t1061 * t1104) * t1045, t1257 * t812 + t1259 * t811 + t1261 * t810 + t1263 * t809, 0.2e1 * t1157 * t812 + 0.2e1 * t1159 * t811 + 0.2e1 * t1161 * t810 + 0.2e1 * t1163 * t809, t1366 * t1438 + t1361 * t1437 + t1358 * t1436 + t1355 * t1435 + (t1245 * t856 + t1247 * t855 + t1249 * t854 + t1255 * t853) * t1078, t813 * t1253 + t814 * t1243 + t815 * t1239 + t816 * t1235 + (t1234 * t856 + t1238 * t855 + t1242 * t854 + t1252 * t853) * t1078, (t1423 * t816 + t1424 * t815 + t1425 * t814 + t1426 * t813) * t1078, t699 * t1438 + t701 * t1436 + t703 * t1437 + t705 * t1435 + t777 * t709 + t778 * t712 + t779 * t714 + t780 * t716 + (t1423 * t695 + t1424 * t694 + t1425 * t693 + t1426 * t691) * t1078, t700 * t1438 + t702 * t1436 + t704 * t1437 + t706 * t1435 + t777 * t710 + t778 * t713 + t779 * t715 + t780 * t717 + (t1423 * t698 + t1424 * t697 + t1425 * t696 + t1426 * t692) * t1078, 1, 0, 0, 0;];
tau_reg  = t1;
