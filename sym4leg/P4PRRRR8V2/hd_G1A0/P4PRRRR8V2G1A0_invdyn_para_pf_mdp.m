% Calculate minimal parameter regressor of inverse dynamics forces for
% P4PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [4x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P4PRRRR8V2G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:11:48
% EndTime: 2020-08-07 11:12:12
% DurationCPUTime: 25.71s
% Computational Cost: add. (173813->863), mult. (350538->1518), div. (11068->22), fcn. (322196->30), ass. (0->563)
t2944 = cos(qJ(3,4));
t2906 = t2944 * pkin(3) + pkin(2);
t2945 = cos(qJ(2,4));
t2965 = pkin(7) + pkin(6);
t2907 = t2945 * t2965;
t2943 = sin(qJ(2,4));
t2835 = t2943 * t2906 - t2907;
t2937 = cos(pkin(4));
t2942 = sin(qJ(3,4));
t3111 = t2937 * t2942;
t2868 = t2906 * t3111;
t2935 = sin(pkin(4));
t3126 = t2935 * t2944;
t2789 = t2835 * t3126 + t2868;
t2786 = 0.1e1 / t2789;
t2956 = cos(qJ(3,3));
t2908 = t2956 * pkin(3) + pkin(2);
t2957 = cos(qJ(2,3));
t2911 = t2957 * t2965;
t2951 = sin(qJ(2,3));
t2839 = t2951 * t2908 - t2911;
t2950 = sin(qJ(3,3));
t3108 = t2937 * t2950;
t2869 = t2908 * t3108;
t3118 = t2935 * t2956;
t2799 = t2839 * t3118 + t2869;
t2790 = 0.1e1 / t2799;
t2958 = cos(qJ(3,2));
t2909 = t2958 * pkin(3) + pkin(2);
t2959 = cos(qJ(2,2));
t2912 = t2959 * t2965;
t2953 = sin(qJ(2,2));
t2840 = t2953 * t2909 - t2912;
t2952 = sin(qJ(3,2));
t3106 = t2937 * t2952;
t2870 = t2909 * t3106;
t3116 = t2935 * t2958;
t2800 = t2840 * t3116 + t2870;
t2792 = 0.1e1 / t2800;
t2960 = cos(qJ(3,1));
t2910 = t2960 * pkin(3) + pkin(2);
t2961 = cos(qJ(2,1));
t2913 = t2961 * t2965;
t2955 = sin(qJ(2,1));
t2841 = t2955 * t2910 - t2913;
t2954 = sin(qJ(3,1));
t3104 = t2937 * t2954;
t2871 = t2910 * t3104;
t3114 = t2935 * t2960;
t2801 = t2841 * t3114 + t2871;
t2794 = 0.1e1 / t2801;
t3119 = t2935 * t2955;
t2966 = xP(4);
t2927 = sin(t2966);
t2928 = cos(t2966);
t2970 = koppelP(1,2);
t2974 = koppelP(1,1);
t2859 = -t2927 * t2970 + t2928 * t2974;
t2962 = xDP(4);
t2963 = xDP(2);
t2808 = -t2859 * t2962 - t2963;
t2855 = t2927 * t2974 + t2928 * t2970;
t2964 = xDP(1);
t2811 = t2855 * t2962 - t2964;
t2941 = legFrame(1,3);
t2918 = sin(t2941);
t2922 = cos(t2941);
t2934 = sin(pkin(8));
t2936 = cos(pkin(8));
t2821 = -t2934 * t2918 + t2922 * t2936;
t2825 = t2936 * t2918 + t2922 * t2934;
t3103 = t2937 * t2955;
t2982 = t2821 * t3103 + t2961 * t2825;
t2983 = -t2961 * t2821 + t2825 * t3103;
t2697 = ((t2808 * t2825 + t2811 * t2821) * t3114 + (t2808 * t2983 + t2811 * t2982) * t2954) * t2794;
t3189 = t2697 * t2965;
t3036 = t2954 * t3189;
t2752 = t2934 * t2808 + t2811 * t2936;
t3007 = t2808 * t2936 - t2934 * t2811;
t3081 = t2955 * t2965;
t3141 = (t2910 * t2961 + t3081) * t2937;
t2709 = (t2752 * t2922 + t2918 * t3007) * t3141 - t2841 * (t2918 * t2752 - t3007 * t2922);
t3181 = t2709 * t2794;
t2674 = t3036 - t3181;
t2884 = pkin(2) * t2955 - t2913;
t2932 = t2960 ^ 2;
t3201 = pkin(3) * t2932;
t2757 = 0.1e1 / ((pkin(3) * t3104 + t2884 * t2935) * t2960 + pkin(2) * t3104 + t3119 * t3201);
t2933 = t2962 ^ 2;
t2946 = xDDP(4);
t2948 = xDDP(2);
t2770 = -t2933 * t2855 + t2859 * t2946 + t2948;
t2949 = xDDP(1);
t2774 = -t2855 * t2946 - t2933 * t2859 + t2949;
t2976 = 0.1e1 / pkin(3);
t3145 = t2794 * t2976;
t3050 = t2709 * t3145;
t2914 = pkin(2) ^ 2 + t2965 ^ 2;
t2975 = pkin(3) ^ 2;
t3146 = t2794 * t2954;
t3035 = t2709 * t3146;
t3194 = 0.2e1 * pkin(2) * pkin(3);
t3058 = (-t2965 * t3035 + (t2932 * t2975 + t2960 * t3194 + t2914) * t2697) * t2697 * t2757;
t3206 = pkin(2) * t2961;
t2887 = t3081 + t3206;
t3120 = t2935 * t2954;
t2990 = pkin(3) * t3120 - t2884 * t2937;
t2761 = t2934 * t2887 - t2990 * t2936;
t2830 = t2934 * t3103 - t2936 * t2961;
t2833 = t2934 * t2961 + t2936 * t3103;
t3070 = pkin(2) * t3120;
t3226 = t2887 * t2936 + t2990 * t2934;
t2729 = (-t2918 * t2830 + t2833 * t2922) * t3201 + (t2761 * t2922 + t3226 * t2918) * t2960 - t2821 * t3070;
t3169 = t2729 * t2757;
t2726 = -(t2830 * t2922 + t2918 * t2833) * t3201 + (-t2918 * t2761 + t3226 * t2922) * t2960 + t2825 * t3070;
t3172 = t2726 * t2757;
t3018 = t2960 * t3058 + (pkin(2) * t3050 - t2674 * t2960) * t2757 * t3181 + t2774 * t3172 + t2770 * t3169;
t2947 = xDDP(3);
t3235 = t2947 - g(3);
t3197 = -t3018 - t3235;
t3239 = t3197 * t3119;
t3121 = t2935 * t2953;
t2969 = koppelP(2,2);
t2973 = koppelP(2,1);
t2858 = -t2927 * t2969 + t2928 * t2973;
t2807 = -t2858 * t2962 - t2963;
t2854 = t2927 * t2973 + t2928 * t2969;
t2810 = t2854 * t2962 - t2964;
t2940 = legFrame(2,3);
t2917 = sin(t2940);
t2921 = cos(t2940);
t2820 = -t2934 * t2917 + t2921 * t2936;
t2824 = t2936 * t2917 + t2921 * t2934;
t3105 = t2937 * t2953;
t2984 = t2820 * t3105 + t2959 * t2824;
t2985 = -t2959 * t2820 + t2824 * t3105;
t2696 = ((t2807 * t2824 + t2810 * t2820) * t3116 + (t2807 * t2985 + t2810 * t2984) * t2952) * t2792;
t3190 = t2696 * t2965;
t3039 = t2952 * t3190;
t2751 = t2934 * t2807 + t2810 * t2936;
t3008 = t2807 * t2936 - t2934 * t2810;
t3085 = t2953 * t2965;
t3142 = (t2909 * t2959 + t3085) * t2937;
t2708 = (t2751 * t2921 + t2917 * t3008) * t3142 - t2840 * (t2917 * t2751 - t3008 * t2921);
t3182 = t2708 * t2792;
t2673 = t3039 - t3182;
t2883 = pkin(2) * t2953 - t2912;
t2931 = t2958 ^ 2;
t3202 = pkin(3) * t2931;
t2756 = 0.1e1 / ((pkin(3) * t3106 + t2883 * t2935) * t2958 + pkin(2) * t3106 + t3121 * t3202);
t2769 = -t2933 * t2854 + t2858 * t2946 + t2948;
t2773 = -t2854 * t2946 - t2933 * t2858 + t2949;
t3147 = t2792 * t2976;
t3051 = t2708 * t3147;
t3148 = t2792 * t2952;
t3038 = t2708 * t3148;
t3059 = (-t2965 * t3038 + (t2931 * t2975 + t2958 * t3194 + t2914) * t2696) * t2696 * t2756;
t3207 = pkin(2) * t2959;
t2886 = t3085 + t3207;
t3122 = t2935 * t2952;
t2991 = pkin(3) * t3122 - t2883 * t2937;
t2760 = t2934 * t2886 - t2991 * t2936;
t2829 = t2934 * t3105 - t2936 * t2959;
t2832 = t2934 * t2959 + t2936 * t3105;
t3071 = pkin(2) * t3122;
t3225 = t2886 * t2936 + t2991 * t2934;
t2728 = (-t2917 * t2829 + t2832 * t2921) * t3202 + (t2760 * t2921 + t3225 * t2917) * t2958 - t2820 * t3071;
t3170 = t2728 * t2756;
t2725 = -(t2829 * t2921 + t2917 * t2832) * t3202 + (-t2917 * t2760 + t3225 * t2921) * t2958 + t2824 * t3071;
t3173 = t2725 * t2756;
t3019 = t2958 * t3059 + (pkin(2) * t3051 - t2673 * t2958) * t2756 * t3182 + t2773 * t3173 + t2769 * t3170;
t3198 = -t3019 - t3235;
t3238 = t3198 * t3121;
t3123 = t2935 * t2951;
t2968 = koppelP(3,2);
t2972 = koppelP(3,1);
t2857 = -t2927 * t2968 + t2928 * t2972;
t2812 = -t2857 * t2962 - t2963;
t2853 = t2927 * t2972 + t2928 * t2968;
t2813 = t2853 * t2962 - t2964;
t2939 = legFrame(3,3);
t2916 = sin(t2939);
t2920 = cos(t2939);
t2819 = -t2934 * t2916 + t2920 * t2936;
t2823 = t2936 * t2916 + t2920 * t2934;
t3107 = t2937 * t2951;
t2986 = t2819 * t3107 + t2957 * t2823;
t2987 = -t2957 * t2819 + t2823 * t3107;
t2698 = ((t2812 * t2823 + t2813 * t2819) * t3118 + (t2812 * t2987 + t2813 * t2986) * t2950) * t2790;
t3188 = t2698 * t2965;
t3042 = t2950 * t3188;
t2753 = t2934 * t2812 + t2813 * t2936;
t3006 = t2812 * t2936 - t2934 * t2813;
t3089 = t2951 * t2965;
t3143 = (t2908 * t2957 + t3089) * t2937;
t2707 = (t2753 * t2920 + t2916 * t3006) * t3143 - t2839 * (t2916 * t2753 - t3006 * t2920);
t3183 = t2707 * t2790;
t2672 = t3042 - t3183;
t2882 = pkin(2) * t2951 - t2911;
t2930 = t2956 ^ 2;
t3203 = pkin(3) * t2930;
t2755 = 0.1e1 / ((pkin(3) * t3108 + t2882 * t2935) * t2956 + pkin(2) * t3108 + t3123 * t3203);
t2768 = -t2933 * t2853 + t2857 * t2946 + t2948;
t2772 = -t2853 * t2946 - t2933 * t2857 + t2949;
t3149 = t2790 * t2976;
t3052 = t2707 * t3149;
t3150 = t2790 * t2950;
t3041 = t2707 * t3150;
t3060 = (-t2965 * t3041 + (t2930 * t2975 + t2956 * t3194 + t2914) * t2698) * t2698 * t2755;
t3208 = pkin(2) * t2957;
t2885 = t3089 + t3208;
t3124 = t2935 * t2950;
t2992 = pkin(3) * t3124 - t2882 * t2937;
t2759 = t2934 * t2885 - t2992 * t2936;
t2828 = t2934 * t3107 - t2936 * t2957;
t2831 = t2934 * t2957 + t2936 * t3107;
t3072 = pkin(2) * t3124;
t3224 = t2885 * t2936 + t2992 * t2934;
t2727 = (-t2916 * t2828 + t2831 * t2920) * t3203 + (t2759 * t2920 + t3224 * t2916) * t2956 - t2819 * t3072;
t3171 = t2727 * t2755;
t2724 = -(t2828 * t2920 + t2916 * t2831) * t3203 + (-t2916 * t2759 + t3224 * t2920) * t2956 + t2823 * t3072;
t3174 = t2724 * t2755;
t3020 = t2956 * t3060 + (pkin(2) * t3052 - t2672 * t2956) * t2755 * t3183 + t2772 * t3174 + t2768 * t3171;
t3199 = -t3020 - t3235;
t3237 = t3199 * t3123;
t3127 = t2935 * t2943;
t2967 = koppelP(4,2);
t2971 = koppelP(4,1);
t2856 = -t2927 * t2967 + t2928 * t2971;
t2806 = -t2856 * t2962 - t2963;
t2852 = t2927 * t2971 + t2928 * t2967;
t2809 = t2852 * t2962 - t2964;
t2938 = legFrame(4,3);
t2915 = sin(t2938);
t2919 = cos(t2938);
t2818 = -t2934 * t2915 + t2919 * t2936;
t2822 = t2936 * t2915 + t2919 * t2934;
t3110 = t2937 * t2943;
t2988 = t2818 * t3110 + t2945 * t2822;
t2989 = -t2945 * t2818 + t2822 * t3110;
t2691 = ((t2806 * t2822 + t2809 * t2818) * t3126 + (t2806 * t2989 + t2809 * t2988) * t2942) * t2786;
t3192 = t2691 * t2965;
t3045 = t2942 * t3192;
t2750 = t2934 * t2806 + t2809 * t2936;
t3009 = t2806 * t2936 - t2934 * t2809;
t3094 = t2943 * t2965;
t3144 = (t2906 * t2945 + t3094) * t2937;
t2703 = (t2750 * t2919 + t2915 * t3009) * t3144 - t2835 * (t2915 * t2750 - t3009 * t2919);
t3184 = t2703 * t2786;
t2670 = t3045 - t3184;
t2880 = pkin(2) * t2943 - t2907;
t2929 = t2944 ^ 2;
t3204 = pkin(3) * t2929;
t2754 = 0.1e1 / ((pkin(3) * t3111 + t2880 * t2935) * t2944 + pkin(2) * t3111 + t3127 * t3204);
t2767 = -t2933 * t2852 + t2856 * t2946 + t2948;
t2771 = -t2852 * t2946 - t2933 * t2856 + t2949;
t3151 = t2786 * t2976;
t3056 = t2703 * t3151;
t3152 = t2786 * t2942;
t3044 = t2703 * t3152;
t3061 = (-t2965 * t3044 + (t2929 * t2975 + t2944 * t3194 + t2914) * t2691) * t2691 * t2754;
t3209 = pkin(2) * t2945;
t2881 = t3094 + t3209;
t3128 = t2935 * t2942;
t2993 = pkin(3) * t3128 - t2880 * t2937;
t2758 = t2934 * t2881 - t2993 * t2936;
t2826 = t2934 * t3110 - t2936 * t2945;
t2827 = t2934 * t2945 + t2936 * t3110;
t3073 = pkin(2) * t3128;
t3223 = t2881 * t2936 + t2993 * t2934;
t2723 = (-t2915 * t2826 + t2827 * t2919) * t3204 + (t2758 * t2919 + t3223 * t2915) * t2944 - t2818 * t3073;
t3175 = t2723 * t2754;
t2722 = -(t2826 * t2919 + t2915 * t2827) * t3204 + (-t2915 * t2758 + t3223 * t2919) * t2944 + t2822 * t3073;
t3176 = t2722 * t2754;
t3021 = t2944 * t3061 + (pkin(2) * t3056 - t2670 * t2944) * t2754 * t3184 + t2771 * t3176 + t2767 * t3175;
t3200 = -t3021 - t3235;
t3236 = t3200 * t3127;
t2889 = -t2934 * g(1) + t2936 * g(2);
t2890 = t2936 * g(1) + t2934 * g(2);
t3001 = t2889 * t2919 - t2890 * t2915;
t2977 = 0.1e1 / pkin(3) ^ 2;
t3057 = t2703 ^ 2 / t2789 ^ 2 * t2977;
t2734 = -t2818 * t3126 - t2988 * t2942;
t2735 = -t2822 * t3126 - t2989 * t2942;
t3095 = t2943 * t2944;
t3043 = t2935 * t3095;
t3125 = t2935 * t2945;
t2607 = (-((t2691 * t3125 + t2937 * t3056) * t3204 + ((-t3044 + t3192) * t2943 + t2691 * t3209) * t3126 + t2937 * t2670) * t2691 + t2734 * t2771 + t2735 * t2767 - (t3056 * t3125 + (t2937 * t2929 - t2942 * t3043 - t2937) * t2691) * t3184) * t2754;
t3218 = 0.2e1 * t2607;
t3222 = (t2889 * t2915 + t2890 * t2919) * t2943 + pkin(2) * t3218 - pkin(6) * t3057 - (t2935 * t3200 + t3001 * t2937) * t2945;
t2999 = t2889 * t2920 - t2890 * t2916;
t3055 = t2707 ^ 2 / t2799 ^ 2 * t2977;
t2736 = -t2819 * t3118 - t2986 * t2950;
t2739 = -t2823 * t3118 - t2987 * t2950;
t3090 = t2951 * t2956;
t3040 = t2935 * t3090;
t3117 = t2935 * t2957;
t2611 = (-((t2698 * t3117 + t2937 * t3052) * t3203 + ((-t3041 + t3188) * t2951 + t2698 * t3208) * t3118 + t2937 * t2672) * t2698 + t2736 * t2772 + t2739 * t2768 - (t3052 * t3117 + (t2937 * t2930 - t2950 * t3040 - t2937) * t2698) * t3183) * t2755;
t3217 = 0.2e1 * t2611;
t3221 = (t2889 * t2916 + t2890 * t2920) * t2951 + pkin(2) * t3217 - pkin(6) * t3055 - (t2935 * t3199 + t2999 * t2937) * t2957;
t2997 = t2889 * t2921 - t2890 * t2917;
t3054 = t2708 ^ 2 * t2977 / t2800 ^ 2;
t2737 = -t2820 * t3116 - t2984 * t2952;
t2740 = -t2824 * t3116 - t2985 * t2952;
t3086 = t2953 * t2958;
t3037 = t2935 * t3086;
t3115 = t2935 * t2959;
t2612 = (-((t2696 * t3115 + t2937 * t3051) * t3202 + ((-t3038 + t3190) * t2953 + t2696 * t3207) * t3116 + t2937 * t2673) * t2696 + t2737 * t2773 + t2740 * t2769 - (t3051 * t3115 + (t2937 * t2931 - t2952 * t3037 - t2937) * t2696) * t3182) * t2756;
t3216 = 0.2e1 * t2612;
t3220 = (t2889 * t2917 + t2890 * t2921) * t2953 + pkin(2) * t3216 - pkin(6) * t3054 - (t2935 * t3198 + t2997 * t2937) * t2959;
t2995 = t2889 * t2922 - t2890 * t2918;
t3053 = t2709 ^ 2 * t2977 / t2801 ^ 2;
t2738 = -t2821 * t3114 - t2982 * t2954;
t2741 = -t2825 * t3114 - t2983 * t2954;
t3082 = t2955 * t2960;
t3046 = t2935 * t3082;
t3113 = t2935 * t2961;
t2613 = (-((t2697 * t3113 + t2937 * t3050) * t3201 + ((-t3035 + t3189) * t2955 + t2697 * t3206) * t3114 + t2937 * t2674) * t2697 + t2738 * t2774 + t2741 * t2770 - (t3050 * t3113 + (t2937 * t2932 - t2954 * t3046 - t2937) * t2697) * t3181) * t2757;
t3215 = 0.2e1 * t2613;
t3219 = (t2889 * t2918 + t2890 * t2922) * t2955 + pkin(2) * t3215 - pkin(6) * t3053 - (t2935 * t3197 + t2995 * t2937) * t2961;
t2742 = -t2818 * t3144 + t2835 * t2822;
t2743 = -t2835 * t2818 - t2822 * t3144;
t2814 = pkin(3) * t3095 + t2880;
t2766 = 0.1e1 / (t2814 * t3126 + t2868);
t3098 = t2937 * t2976;
t3112 = t2935 * t2976;
t3205 = pkin(2) * t2976;
t2630 = -t3061 * t3098 - (-t2937 * t3045 + (-t2814 * t2942 * t3112 + t2937 * (t2944 * t3205 + t2929)) * t3184) * t2766 * t3056 + (t2742 * t2771 + t2743 * t2767) * t3151;
t3028 = t2691 * t3056;
t3210 = pkin(6) / 0.2e1;
t3214 = -0.2e1 * pkin(2) * t3028 - 0.2e1 * t2630 * t3210;
t2745 = -t2820 * t3142 + t2840 * t2824;
t2748 = -t2840 * t2820 - t2824 * t3142;
t2816 = pkin(3) * t3086 + t2883;
t2776 = 0.1e1 / (t2816 * t3116 + t2870);
t2634 = -t3059 * t3098 - (-t2937 * t3039 + (-t2816 * t2952 * t3112 + t2937 * (t2958 * t3205 + t2931)) * t3182) * t2776 * t3051 + (t2745 * t2773 + t2748 * t2769) * t3147;
t3024 = t2696 * t3051;
t3213 = -0.2e1 * pkin(2) * t3024 - 0.2e1 * t2634 * t3210;
t2746 = -t2821 * t3141 + t2841 * t2825;
t2749 = -t2841 * t2821 - t2825 * t3141;
t2817 = pkin(3) * t3082 + t2884;
t2777 = 0.1e1 / (t2817 * t3114 + t2871);
t2635 = -t3058 * t3098 - (-t2937 * t3036 + (-t2817 * t2954 * t3112 + t2937 * (t2960 * t3205 + t2932)) * t3181) * t2777 * t3050 + (t2746 * t2774 + t2749 * t2770) * t3145;
t3023 = t2697 * t3050;
t3212 = -0.2e1 * pkin(2) * t3023 - 0.2e1 * t2635 * t3210;
t2744 = -t2819 * t3143 + t2839 * t2823;
t2747 = -t2839 * t2819 - t2823 * t3143;
t2815 = pkin(3) * t3090 + t2882;
t2775 = 0.1e1 / (t2815 * t3118 + t2869);
t2633 = -t3060 * t3098 - (-t2937 * t3042 + (-t2815 * t2950 * t3112 + t2937 * (t2956 * t3205 + t2930)) * t3183) * t2775 * t3052 + (t2744 * t2772 + t2747 * t2768) * t3149;
t3022 = t2698 * t3052;
t3211 = -0.2e1 * pkin(2) * t3022 - 0.2e1 * t2633 * t3210;
t3196 = t2948 - g(2);
t3195 = t2949 - g(1);
t3193 = MDP(9) * t2976;
t2872 = t2934 * t2967 + t2936 * t2971;
t2873 = -t2934 * t2971 + t2936 * t2967;
t2802 = t2927 * t2872 + t2873 * t2928;
t3005 = t2872 * t2928 - t2927 * t2873;
t2730 = t2802 * t2919 - t3005 * t2915;
t2844 = t2945 * t2967 - t2971 * t3110;
t2845 = t2945 * t2971 + t2967 * t3110;
t2778 = t2844 * t2936 - t2934 * t2845;
t2779 = t2934 * t2844 + t2845 * t2936;
t3191 = (((-t2927 * t2778 + t2779 * t2928) * t2919 + (t2778 * t2928 + t2779 * t2927) * t2915) * t2942 + t2730 * t3126) * t2766;
t2874 = t2934 * t2968 + t2936 * t2972;
t2875 = -t2934 * t2972 + t2936 * t2968;
t2803 = t2927 * t2874 + t2875 * t2928;
t3004 = t2874 * t2928 - t2927 * t2875;
t2731 = t2803 * t2920 - t3004 * t2916;
t2846 = t2957 * t2968 - t2972 * t3107;
t2849 = t2957 * t2972 + t2968 * t3107;
t2780 = t2846 * t2936 - t2934 * t2849;
t2783 = t2934 * t2846 + t2849 * t2936;
t3187 = (((-t2927 * t2780 + t2783 * t2928) * t2920 + (t2780 * t2928 + t2783 * t2927) * t2916) * t2950 + t2731 * t3118) * t2775;
t2876 = t2934 * t2969 + t2936 * t2973;
t2877 = -t2934 * t2973 + t2936 * t2969;
t2804 = t2927 * t2876 + t2877 * t2928;
t3003 = t2876 * t2928 - t2927 * t2877;
t2732 = t2804 * t2921 - t3003 * t2917;
t2847 = t2959 * t2969 - t2973 * t3105;
t2850 = t2959 * t2973 + t2969 * t3105;
t2781 = t2847 * t2936 - t2934 * t2850;
t2784 = t2934 * t2847 + t2850 * t2936;
t3186 = (((-t2927 * t2781 + t2784 * t2928) * t2921 + t2917 * (t2781 * t2928 + t2927 * t2784)) * t2952 + t2732 * t3116) * t2776;
t2878 = t2934 * t2970 + t2936 * t2974;
t2879 = -t2934 * t2974 + t2936 * t2970;
t2805 = t2927 * t2878 + t2879 * t2928;
t3002 = t2878 * t2928 - t2927 * t2879;
t2733 = t2805 * t2922 - t2918 * t3002;
t2848 = t2961 * t2970 - t2974 * t3103;
t2851 = t2961 * t2974 + t2970 * t3103;
t2782 = t2848 * t2936 - t2934 * t2851;
t2785 = t2934 * t2848 + t2851 * t2936;
t3185 = (((-t2927 * t2782 + t2785 * t2928) * t2922 + (t2782 * t2928 + t2785 * t2927) * t2918) * t2954 + t2733 * t3114) * t2777;
t2718 = t2730 * t3144 - t2835 * (t2802 * t2915 + t3005 * t2919);
t3180 = t2718 * t2786;
t2719 = t2731 * t3143 - t2839 * (t2803 * t2916 + t3004 * t2920);
t3179 = t2719 * t2790;
t2720 = t2732 * t3142 - (t2804 * t2917 + t3003 * t2921) * t2840;
t3178 = t2720 * t2792;
t2721 = t2733 * t3141 - (t2918 * t2805 + t3002 * t2922) * t2841;
t3177 = t2721 * t2794;
t3168 = t2734 * t2754;
t3167 = t2735 * t2754;
t3166 = t2736 * t2755;
t3165 = t2737 * t2756;
t3164 = t2738 * t2757;
t3163 = t2739 * t2755;
t3162 = t2740 * t2756;
t3161 = t2741 * t2757;
t3160 = t2742 * t2786;
t3159 = t2743 * t2786;
t3158 = t2744 * t2790;
t3157 = t2745 * t2792;
t3156 = t2746 * t2794;
t3155 = t2747 * t2790;
t3154 = t2748 * t2792;
t3153 = t2749 * t2794;
t3109 = t2937 * t2945;
t3102 = t2937 * t2957;
t3101 = t2937 * t2959;
t3100 = t2937 * t2961;
t3099 = t2937 * t2965;
t3097 = t2942 * t2944;
t3093 = t2944 * t2945;
t3092 = t2950 * t2956;
t3088 = t2952 * t2958;
t3084 = t2954 * t2960;
t3080 = t2956 * t2957;
t3079 = t2958 * t2959;
t3078 = t2960 * t2961;
t3069 = t2607 * t3152;
t3068 = t2607 * t2786 * t2944;
t3067 = t2611 * t3150;
t3066 = t2611 * t2790 * t2956;
t3065 = t2612 * t3148;
t3064 = t2612 * t2792 * t2958;
t3063 = t2613 * t3146;
t3062 = t2613 * t2794 * t2960;
t3049 = t2906 * t3128;
t3048 = t2908 * t3124;
t3047 = t2909 * t3122;
t3034 = t2910 * t3120;
t2606 = t2945 * t2607;
t2690 = t2691 ^ 2;
t3033 = (t2690 + t3057) * t2943 - t2606;
t2608 = t2957 * t2611;
t2694 = t2698 ^ 2;
t3032 = (t2694 + t3055) * t2951 - t2608;
t2609 = t2959 * t2612;
t2692 = t2696 ^ 2;
t3031 = (t2692 + t3054) * t2953 - t2609;
t2610 = t2961 * t2613;
t2693 = t2697 ^ 2;
t3030 = (t2693 + t3053) * t2955 - t2610;
t3029 = t2690 * t2786 * t3097;
t3027 = t2692 * t2792 * t3088;
t3026 = t2693 * t2794 * t3084;
t3025 = t2694 * t2790 * t3092;
t3017 = t2906 * t2937;
t3016 = t2908 * t2937;
t3015 = t2909 * t2937;
t3014 = t2910 * t2937;
t3013 = 0.2e1 * t3028;
t3012 = 0.2e1 * t3024;
t3011 = 0.2e1 * t3023;
t3010 = 0.2e1 * t3022;
t2867 = t2922 * g(1) + t2918 * g(2);
t2866 = t2921 * g(1) + t2917 * g(2);
t2865 = t2920 * g(1) + t2916 * g(2);
t2864 = t2919 * g(1) + t2915 * g(2);
t2863 = t2918 * g(1) - t2922 * g(2);
t2862 = t2917 * g(1) - t2921 * g(2);
t2861 = t2916 * g(1) - t2920 * g(2);
t2860 = t2915 * g(1) - t2919 * g(2);
t2843 = -t2927 * t2946 - t2928 * t2933;
t2842 = -t2927 * t2933 + t2928 * t2946;
t2685 = (-t2855 * ((t2910 * t2821 + t2825 * t3099) * t3078 - (-t2821 * t2965 + t2825 * t3014) * t3082 + t2825 * t3034) + t2859 * ((-t2821 * t3099 + t2910 * t2825) * t3078 + (t2821 * t3014 + t2825 * t2965) * t3082 - t2821 * t3034)) / (-t2913 * t3114 + (t3046 + t3104) * t2910);
t2684 = (-t2854 * ((t2909 * t2820 + t2824 * t3099) * t3079 - (-t2820 * t2965 + t2824 * t3015) * t3086 + t2824 * t3047) + t2858 * ((-t2820 * t3099 + t2909 * t2824) * t3079 + (t2820 * t3015 + t2824 * t2965) * t3086 - t2820 * t3047)) / (-t2912 * t3116 + (t3037 + t3106) * t2909);
t2683 = (-t2853 * ((t2908 * t2819 + t2823 * t3099) * t3080 - (-t2819 * t2965 + t2823 * t3016) * t3090 + t2823 * t3048) + t2857 * ((-t2819 * t3099 + t2908 * t2823) * t3080 + (t2819 * t3016 + t2823 * t2965) * t3090 - t2819 * t3048)) / (-t2911 * t3118 + (t3040 + t3108) * t2908);
t2682 = (-t2852 * ((t2906 * t2818 + t2822 * t3099) * t3093 - (-t2818 * t2965 + t2822 * t3017) * t3095 + t2822 * t3049) + t2856 * ((-t2818 * t3099 + t2906 * t2822) * t3093 + (t2818 * t3017 + t2822 * t2965) * t3095 - t2818 * t3049)) / (-t2907 * t3126 + (t3043 + t3111) * t2906);
t2681 = (-0.2e1 * t2932 + 0.1e1) * t2693;
t2680 = (-0.2e1 * t2931 + 0.1e1) * t2692;
t2679 = (-0.2e1 * t2930 + 0.1e1) * t2694;
t2678 = (-0.2e1 * t2929 + 0.1e1) * t2690;
t2648 = t2995 * t2935 - t2937 * t3197;
t2647 = t2997 * t2935 - t2937 * t3198;
t2646 = t2999 * t2935 - t2937 * t3199;
t2643 = t2867 * (t2934 * t3100 + t2936 * t2955) + t2863 * (-t2934 * t2955 + t2936 * t3100) - t3197 * t3113;
t2642 = t2866 * (t2934 * t3101 + t2936 * t2953) + t2862 * (-t2934 * t2953 + t2936 * t3101) - t3198 * t3115;
t2641 = t2865 * (t2934 * t3102 + t2936 * t2951) + t2861 * (-t2934 * t2951 + t2936 * t3102) - t3199 * t3117;
t2640 = -t2867 * t2830 - t2863 * t2833 + t3239;
t2639 = -t2866 * t2829 - t2862 * t2832 + t3238;
t2638 = -t2865 * t2828 - t2861 * t2831 + t3237;
t2636 = t3001 * t2935 - t2937 * t3200;
t2632 = t2864 * (t2934 * t3109 + t2936 * t2943) + t2860 * (-t2934 * t2943 + t2936 * t3109) - t3200 * t3125;
t2631 = -t2864 * t2826 - t2860 * t2827 + t3236;
t2629 = t2635 * t2960 - t2954 * t3053;
t2628 = t2635 * t2954 + t2960 * t3053;
t2627 = t2634 * t2958 - t2952 * t3054;
t2626 = t2634 * t2952 + t2958 * t3054;
t2625 = t2633 * t2956 - t2950 * t3055;
t2624 = t2633 * t2950 + t2956 * t3055;
t2623 = t2630 * t2944 - t2942 * t3057;
t2622 = t2630 * t2942 + t2944 * t3057;
t2618 = t2951 * t2633 + t2957 * t3010;
t2617 = t2955 * t2635 + t2961 * t3011;
t2616 = t2953 * t2634 + t2959 * t3012;
t2614 = t2943 * t2630 + t2945 * t3013;
t2605 = t2953 * t2612 + t2692 * t2959;
t2604 = -t2692 * t2953 + t2609;
t2603 = t2955 * t2613 + t2961 * t2693;
t2602 = t2951 * t2611 + t2957 * t2694;
t2601 = -t2955 * t2693 + t2610;
t2600 = -t2951 * t2694 + t2608;
t2599 = t2943 * t2607 + t2945 * t2690;
t2598 = -t2943 * t2690 + t2606;
t2597 = (t2613 * t2954 + t2960 * t3011) * t2954;
t2596 = (t2612 * t2952 + t2958 * t3012) * t2952;
t2595 = (t2611 * t2950 + t2956 * t3010) * t2950;
t2594 = (t2607 * t2942 + t2944 * t3013) * t2942;
t2593 = t3084 * t3215 + (0.4e1 * t2932 - 0.2e1) * t3023;
t2592 = t3088 * t3216 + (0.4e1 * t2931 - 0.2e1) * t3024;
t2591 = t3092 * t3217 + (0.4e1 * t2930 - 0.2e1) * t3022;
t2590 = t3097 * t3218 + (0.4e1 * t2929 - 0.2e1) * t3028;
t2589 = (t2889 * t3103 + t2961 * t2890) * t2922 + (t2961 * t2889 - t2890 * t3103) * t2918 + t3239 + pkin(2) * t2693 - t2613 * pkin(6);
t2588 = (t2889 * t3105 + t2959 * t2890) * t2921 + (t2959 * t2889 - t2890 * t3105) * t2917 + t3238 + pkin(2) * t2692 - t2612 * pkin(6);
t2587 = (t2889 * t3107 + t2957 * t2890) * t2920 + (t2957 * t2889 - t2890 * t3107) * t2916 + t3237 + pkin(2) * t2694 - t2611 * pkin(6);
t2586 = (t2889 * t3110 + t2945 * t2890) * t2919 + (t2945 * t2889 - t2890 * t3110) * t2915 + t3236 + pkin(2) * t2690 - t2607 * pkin(6);
t2585 = (-t2950 * t2618 - t3032 * t2956) * t2935;
t2584 = (-t2956 * t2618 + t3032 * t2950) * t2935;
t2583 = (-t2954 * t2617 - t3030 * t2960) * t2935;
t2582 = (-t2960 * t2617 + t3030 * t2954) * t2935;
t2581 = (-t2952 * t2616 - t3031 * t2958) * t2935;
t2580 = (-t2958 * t2616 + t3031 * t2952) * t2935;
t2579 = (-t2942 * t2614 - t3033 * t2944) * t2935;
t2578 = (-t2944 * t2614 + t3033 * t2942) * t2935;
t2577 = t2589 * t2960 - t2648 * t2954;
t2576 = t2589 * t2954 + t2648 * t2960;
t2575 = t2588 * t2958 - t2647 * t2952;
t2574 = t2588 * t2952 + t2647 * t2958;
t2573 = t2587 * t2956 - t2646 * t2950;
t2572 = t2587 * t2950 + t2646 * t2956;
t2571 = t2586 * t2944 - t2636 * t2942;
t2570 = t2586 * t2942 + t2636 * t2944;
t2569 = t2954 * t3212 + t3219 * t2960;
t2568 = -t3219 * t2954 + t2960 * t3212;
t2567 = t2952 * t3213 + t3220 * t2958;
t2566 = -t3220 * t2952 + t2958 * t3213;
t2565 = t2950 * t3211 + t3221 * t2956;
t2564 = -t3221 * t2950 + t2956 * t3211;
t2563 = t2942 * t3214 + t3222 * t2944;
t2562 = -t3222 * t2942 + t2944 * t3214;
t2561 = t2937 * t2625 + t2585;
t2560 = -t2937 * t2624 + t2584;
t2559 = t2937 * t2629 + t2583;
t2558 = -t2937 * t2628 + t2582;
t2557 = t2937 * t2627 + t2581;
t2556 = -t2937 * t2626 + t2580;
t2555 = t2937 * t2623 + t2579;
t2554 = -t2937 * t2622 + t2578;
t1 = [(-t3172 * t3197 - t3173 * t3198 - t3174 * t3199 - t3176 * t3200) * MDP(1) + (t2607 * t3168 + t2611 * t3166 + t2612 * t3165 + t2613 * t3164) * MDP(2) + (t2632 * t3168 + t2641 * t3166 + t2642 * t3165 + t2643 * t3164 + (t2598 * t3176 + t2600 * t3174 + t2601 * t3172 + t2604 * t3173) * t2935) * MDP(3) + (t2631 * t3168 + t2638 * t3166 + t2639 * t3165 + t2640 * t3164 + (-t2599 * t3176 - t2602 * t3174 - t2603 * t3172 - t2605 * t3173) * t2935) * MDP(4) + (t2594 * t3168 + t2595 * t3166 + t2596 * t3165 + t2597 * t3164 + (-t2742 * t3029 - t2744 * t3025 - t2745 * t3027 - t2746 * t3026) * t2976) * MDP(5) + (t2590 * t3168 + t2591 * t3166 + t2592 * t3165 + t2593 * t3164 + (t2678 * t3160 + t2679 * t3158 + t2680 * t3157 + t2681 * t3156) * t2976) * MDP(6) + (t2622 * t3168 + t2624 * t3166 + t2626 * t3165 + t2628 * t3164 + (t2742 * t3069 + t2744 * t3067 + t2745 * t3065 + t2746 * t3063) * t2976) * MDP(7) + (t2623 * t3168 + t2625 * t3166 + t2627 * t3165 + t2629 * t3164 + (t2742 * t3068 + t2744 * t3066 + t2745 * t3064 + t2746 * t3062) * t2976) * MDP(8) + (t2630 * t3160 + t2633 * t3158 + t2634 * t3157 + t2635 * t3156) * t3193 + ((t2726 * t2559 + t2738 * t2569) * t2757 + (t2725 * t2557 + t2737 * t2567) * t2756 + (t2724 * t2561 + t2736 * t2565) * t2755 + (t2722 * t2555 + t2734 * t2563) * t2754 + (t2570 * t3160 + t2572 * t3158 + t2574 * t3157 + t2576 * t3156) * t2976) * MDP(10) + ((t2726 * t2558 + t2738 * t2568) * t2757 + (t2725 * t2556 + t2737 * t2566) * t2756 + (t2724 * t2560 + t2736 * t2564) * t2755 + (t2722 * t2554 + t2734 * t2562) * t2754 + (t2571 * t3160 + t2573 * t3158 + t2575 * t3157 + t2577 * t3156) * t2976) * MDP(11) + t2843 * MDP(13) - t2842 * MDP(14) + t3195 * MDP(15); (-t3169 * t3197 - t3170 * t3198 - t3171 * t3199 - t3175 * t3200) * MDP(1) + (t2607 * t3167 + t2611 * t3163 + t2612 * t3162 + t2613 * t3161) * MDP(2) + (t2632 * t3167 + t2641 * t3163 + t2642 * t3162 + t2643 * t3161 + (t2598 * t3175 + t2600 * t3171 + t2601 * t3169 + t2604 * t3170) * t2935) * MDP(3) + (t2631 * t3167 + t2638 * t3163 + t2639 * t3162 + t2640 * t3161 + (-t2599 * t3175 - t2602 * t3171 - t2603 * t3169 - t2605 * t3170) * t2935) * MDP(4) + (t2594 * t3167 + t2595 * t3163 + t2596 * t3162 + t2597 * t3161 + (-t2743 * t3029 - t2747 * t3025 - t2748 * t3027 - t2749 * t3026) * t2976) * MDP(5) + (t2590 * t3167 + t2591 * t3163 + t2592 * t3162 + t2593 * t3161 + (t2678 * t3159 + t2679 * t3155 + t2680 * t3154 + t2681 * t3153) * t2976) * MDP(6) + (t2622 * t3167 + t2624 * t3163 + t2626 * t3162 + t2628 * t3161 + (t2743 * t3069 + t2747 * t3067 + t2748 * t3065 + t2749 * t3063) * t2976) * MDP(7) + (t2623 * t3167 + t2625 * t3163 + t2627 * t3162 + t2629 * t3161 + (t2743 * t3068 + t2747 * t3066 + t2748 * t3064 + t2749 * t3062) * t2976) * MDP(8) + (t2630 * t3159 + t2633 * t3155 + t2634 * t3154 + t2635 * t3153) * t3193 + ((t2729 * t2559 + t2741 * t2569) * t2757 + (t2728 * t2557 + t2740 * t2567) * t2756 + (t2727 * t2561 + t2739 * t2565) * t2755 + (t2723 * t2555 + t2735 * t2563) * t2754 + (t2570 * t3159 + t2572 * t3155 + t2574 * t3154 + t2576 * t3153) * t2976) * MDP(10) + ((t2729 * t2558 + t2741 * t2568) * t2757 + (t2728 * t2556 + t2740 * t2566) * t2756 + (t2727 * t2560 + t2739 * t2564) * t2755 + (t2723 * t2554 + t2735 * t2562) * t2754 + (t2571 * t3159 + t2573 * t3155 + t2575 * t3154 + t2577 * t3153) * t2976) * MDP(11) + t2842 * MDP(13) + t2843 * MDP(14) + t3196 * MDP(15); ((4 * t2947) - (4 * g(3)) + t3018 + t3019 + t3020 + t3021) * MDP(1) + (t2579 + t2581 + t2583 + t2585) * MDP(10) + (t2578 + t2580 + t2582 + t2584) * MDP(11) + t3235 * MDP(15) + ((t2623 + t2625 + t2627 + t2629) * MDP(10) + (-t2622 - t2624 - t2626 - t2628) * MDP(11)) * t2937 + ((t2598 + t2600 + t2601 + t2604) * MDP(3) + (-t2599 - t2602 - t2603 - t2605) * MDP(4)) * t2935; (-t2682 * t3200 - t2683 * t3199 - t2684 * t3198 - t2685 * t3197) * MDP(1) + (t2607 * t3191 + t2611 * t3187 + t2612 * t3186 + t2613 * t3185) * MDP(2) + (t2632 * t3191 + t2641 * t3187 + t2642 * t3186 + t2643 * t3185 + (t2598 * t2682 + t2600 * t2683 + t2601 * t2685 + t2604 * t2684) * t2935) * MDP(3) + (t2631 * t3191 + t2638 * t3187 + t2639 * t3186 + t2640 * t3185 + (-t2599 * t2682 - t2602 * t2683 - t2603 * t2685 - t2605 * t2684) * t2935) * MDP(4) + (t2594 * t3191 + t2595 * t3187 + t2596 * t3186 + t2597 * t3185 + (-t2718 * t3029 - t2719 * t3025 - t2720 * t3027 - t2721 * t3026) * t2976) * MDP(5) + (t2590 * t3191 + t2591 * t3187 + t2592 * t3186 + t2593 * t3185 + (t2678 * t3180 + t2679 * t3179 + t2680 * t3178 + t2681 * t3177) * t2976) * MDP(6) + (t2622 * t3191 + t2624 * t3187 + t2626 * t3186 + t2628 * t3185 + (t2718 * t3069 + t2719 * t3067 + t2720 * t3065 + t2721 * t3063) * t2976) * MDP(7) + (t2623 * t3191 + t2625 * t3187 + t2627 * t3186 + t2629 * t3185 + (t2718 * t3068 + t2719 * t3066 + t2720 * t3064 + t2721 * t3062) * t2976) * MDP(8) + (t2630 * t3180 + t2633 * t3179 + t2634 * t3178 + t2635 * t3177) * t3193 + (t2563 * t3191 + t2565 * t3187 + t2567 * t3186 + t2569 * t3185 + t2682 * t2555 + t2684 * t2557 + t2685 * t2559 + t2683 * t2561 + (t2570 * t3180 + t2572 * t3179 + t2574 * t3178 + t2576 * t3177) * t2976) * MDP(10) + (t2562 * t3191 + t2564 * t3187 + t2566 * t3186 + t2568 * t3185 + t2682 * t2554 + t2684 * t2556 + t2685 * t2558 + t2683 * t2560 + (t2571 * t3180 + t2573 * t3179 + t2575 * t3178 + t2577 * t3177) * t2976) * MDP(11) + t2946 * MDP(12) + (-t3195 * t2927 + t3196 * t2928) * MDP(13) + (-t3196 * t2927 - t3195 * t2928) * MDP(14);];
tauX  = t1;
