% Calculate minimal parameter regressor of inverse dynamics forces for
% P4PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [4x15]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P4PRRRR8V2G1A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G1A0_invdyn_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:10:32
% EndTime: 2020-08-07 11:10:55
% DurationCPUTime: 23.94s
% Computational Cost: add. (173769->820), mult. (350490->1472), div. (11068->22), fcn. (322196->30), ass. (0->562)
t391 = cos(qJ(3,4));
t353 = t391 * pkin(3) + pkin(2);
t392 = cos(qJ(2,4));
t412 = pkin(7) + pkin(6);
t354 = t392 * t412;
t390 = sin(qJ(2,4));
t282 = t390 * t353 - t354;
t384 = cos(pkin(4));
t389 = sin(qJ(3,4));
t559 = t384 * t389;
t315 = t353 * t559;
t382 = sin(pkin(4));
t574 = t382 * t391;
t236 = t282 * t574 + t315;
t233 = 0.1e1 / t236;
t403 = cos(qJ(3,3));
t355 = t403 * pkin(3) + pkin(2);
t404 = cos(qJ(2,3));
t358 = t404 * t412;
t398 = sin(qJ(2,3));
t286 = t398 * t355 - t358;
t397 = sin(qJ(3,3));
t556 = t384 * t397;
t316 = t355 * t556;
t566 = t382 * t403;
t246 = t286 * t566 + t316;
t237 = 0.1e1 / t246;
t405 = cos(qJ(3,2));
t356 = t405 * pkin(3) + pkin(2);
t406 = cos(qJ(2,2));
t359 = t406 * t412;
t400 = sin(qJ(2,2));
t287 = t400 * t356 - t359;
t399 = sin(qJ(3,2));
t554 = t384 * t399;
t317 = t356 * t554;
t564 = t382 * t405;
t247 = t287 * t564 + t317;
t239 = 0.1e1 / t247;
t407 = cos(qJ(3,1));
t357 = t407 * pkin(3) + pkin(2);
t408 = cos(qJ(2,1));
t360 = t408 * t412;
t402 = sin(qJ(2,1));
t288 = t402 * t357 - t360;
t401 = sin(qJ(3,1));
t552 = t384 * t401;
t318 = t357 * t552;
t562 = t382 * t407;
t248 = t288 * t562 + t318;
t241 = 0.1e1 / t248;
t567 = t382 * t402;
t413 = xP(4);
t374 = sin(t413);
t375 = cos(t413);
t417 = koppelP(1,2);
t421 = koppelP(1,1);
t306 = -t374 * t417 + t375 * t421;
t409 = xDP(4);
t410 = xDP(2);
t255 = -t306 * t409 - t410;
t302 = t374 * t421 + t375 * t417;
t411 = xDP(1);
t258 = t302 * t409 - t411;
t388 = legFrame(1,3);
t365 = sin(t388);
t369 = cos(t388);
t381 = sin(pkin(8));
t383 = cos(pkin(8));
t268 = -t381 * t365 + t369 * t383;
t272 = t383 * t365 + t369 * t381;
t551 = t384 * t402;
t429 = t268 * t551 + t408 * t272;
t430 = -t408 * t268 + t272 * t551;
t144 = ((t255 * t272 + t258 * t268) * t562 + (t255 * t430 + t258 * t429) * t401) * t241;
t637 = t144 * t412;
t483 = t401 * t637;
t199 = t381 * t255 + t258 * t383;
t454 = t255 * t383 - t381 * t258;
t529 = t402 * t412;
t589 = (t357 * t408 + t529) * t384;
t156 = (t199 * t369 + t365 * t454) * t589 - t288 * (t365 * t199 - t369 * t454);
t629 = t156 * t241;
t121 = t483 - t629;
t331 = pkin(2) * t402 - t360;
t379 = t407 ^ 2;
t646 = pkin(3) * t379;
t204 = 0.1e1 / ((pkin(3) * t552 + t331 * t382) * t407 + pkin(2) * t552 + t567 * t646);
t380 = t409 ^ 2;
t393 = xDDP(4);
t395 = xDDP(2);
t217 = -t380 * t302 + t306 * t393 + t395;
t396 = xDDP(1);
t221 = -t302 * t393 - t380 * t306 + t396;
t423 = 0.1e1 / pkin(3);
t593 = t241 * t423;
t497 = t156 * t593;
t361 = pkin(2) ^ 2 + t412 ^ 2;
t422 = pkin(3) ^ 2;
t594 = t241 * t401;
t482 = t156 * t594;
t525 = 0.2e1 * pkin(2) * pkin(3);
t505 = (-t412 * t482 + (t379 * t422 + t407 * t525 + t361) * t144) * t204 * t144;
t651 = pkin(2) * t408;
t334 = t529 + t651;
t568 = t382 * t401;
t437 = pkin(3) * t568 - t331 * t384;
t208 = t381 * t334 - t383 * t437;
t277 = t381 * t551 - t383 * t408;
t280 = t381 * t408 + t383 * t551;
t517 = pkin(2) * t568;
t672 = t334 * t383 + t381 * t437;
t176 = (-t365 * t277 + t280 * t369) * t646 + (t208 * t369 + t365 * t672) * t407 - t268 * t517;
t617 = t176 * t204;
t173 = -(t277 * t369 + t365 * t280) * t646 + (-t365 * t208 + t369 * t672) * t407 + t272 * t517;
t620 = t173 * t204;
t465 = t407 * t505 + (pkin(2) * t497 - t121 * t407) * t204 * t629 + t221 * t620 + t217 * t617;
t394 = xDDP(3);
t681 = t394 - g(3);
t643 = -t465 - t681;
t685 = t643 * t567;
t569 = t382 * t400;
t416 = koppelP(2,2);
t420 = koppelP(2,1);
t305 = -t374 * t416 + t375 * t420;
t254 = -t305 * t409 - t410;
t301 = t374 * t420 + t375 * t416;
t257 = t301 * t409 - t411;
t387 = legFrame(2,3);
t364 = sin(t387);
t368 = cos(t387);
t267 = -t381 * t364 + t368 * t383;
t271 = t383 * t364 + t368 * t381;
t553 = t384 * t400;
t431 = t267 * t553 + t406 * t271;
t432 = -t406 * t267 + t271 * t553;
t143 = ((t254 * t271 + t257 * t267) * t564 + (t254 * t432 + t257 * t431) * t399) * t239;
t638 = t143 * t412;
t487 = t399 * t638;
t198 = t381 * t254 + t257 * t383;
t455 = t254 * t383 - t381 * t257;
t533 = t400 * t412;
t590 = (t356 * t406 + t533) * t384;
t155 = (t198 * t368 + t364 * t455) * t590 - t287 * (t364 * t198 - t368 * t455);
t630 = t155 * t239;
t120 = t487 - t630;
t330 = pkin(2) * t400 - t359;
t378 = t405 ^ 2;
t647 = pkin(3) * t378;
t203 = 0.1e1 / ((pkin(3) * t554 + t330 * t382) * t405 + pkin(2) * t554 + t569 * t647);
t216 = -t380 * t301 + t305 * t393 + t395;
t220 = -t301 * t393 - t380 * t305 + t396;
t595 = t239 * t423;
t498 = t155 * t595;
t596 = t239 * t399;
t486 = t155 * t596;
t506 = (-t412 * t486 + (t378 * t422 + t405 * t525 + t361) * t143) * t203 * t143;
t652 = pkin(2) * t406;
t333 = t533 + t652;
t570 = t382 * t399;
t438 = pkin(3) * t570 - t330 * t384;
t207 = t381 * t333 - t383 * t438;
t276 = t381 * t553 - t383 * t406;
t279 = t381 * t406 + t383 * t553;
t518 = pkin(2) * t570;
t671 = t333 * t383 + t381 * t438;
t175 = (-t364 * t276 + t279 * t368) * t647 + (t207 * t368 + t364 * t671) * t405 - t267 * t518;
t618 = t175 * t203;
t172 = -(t276 * t368 + t364 * t279) * t647 + (-t364 * t207 + t368 * t671) * t405 + t271 * t518;
t621 = t172 * t203;
t466 = t405 * t506 + (pkin(2) * t498 - t120 * t405) * t203 * t630 + t220 * t621 + t216 * t618;
t644 = -t466 - t681;
t684 = t644 * t569;
t571 = t382 * t398;
t415 = koppelP(3,2);
t419 = koppelP(3,1);
t304 = -t374 * t415 + t375 * t419;
t259 = -t304 * t409 - t410;
t300 = t374 * t419 + t375 * t415;
t260 = t300 * t409 - t411;
t386 = legFrame(3,3);
t363 = sin(t386);
t367 = cos(t386);
t266 = -t381 * t363 + t367 * t383;
t270 = t383 * t363 + t367 * t381;
t555 = t384 * t398;
t433 = t266 * t555 + t404 * t270;
t434 = -t404 * t266 + t270 * t555;
t145 = ((t259 * t270 + t260 * t266) * t566 + (t259 * t434 + t260 * t433) * t397) * t237;
t636 = t145 * t412;
t491 = t397 * t636;
t200 = t381 * t259 + t260 * t383;
t453 = t259 * t383 - t381 * t260;
t537 = t398 * t412;
t591 = (t355 * t404 + t537) * t384;
t154 = (t200 * t367 + t363 * t453) * t591 - t286 * (t363 * t200 - t367 * t453);
t631 = t154 * t237;
t119 = t491 - t631;
t329 = pkin(2) * t398 - t358;
t377 = t403 ^ 2;
t648 = pkin(3) * t377;
t202 = 0.1e1 / ((pkin(3) * t556 + t329 * t382) * t403 + pkin(2) * t556 + t571 * t648);
t215 = -t380 * t300 + t304 * t393 + t395;
t219 = -t300 * t393 - t380 * t304 + t396;
t597 = t237 * t423;
t499 = t154 * t597;
t598 = t237 * t397;
t490 = t154 * t598;
t507 = (-t412 * t490 + (t377 * t422 + t403 * t525 + t361) * t145) * t202 * t145;
t653 = pkin(2) * t404;
t332 = t537 + t653;
t572 = t382 * t397;
t439 = pkin(3) * t572 - t329 * t384;
t206 = t381 * t332 - t383 * t439;
t275 = t381 * t555 - t383 * t404;
t278 = t381 * t404 + t383 * t555;
t519 = pkin(2) * t572;
t670 = t332 * t383 + t381 * t439;
t174 = (-t363 * t275 + t278 * t367) * t648 + (t206 * t367 + t363 * t670) * t403 - t266 * t519;
t619 = t174 * t202;
t171 = -(t275 * t367 + t363 * t278) * t648 + (-t363 * t206 + t367 * t670) * t403 + t270 * t519;
t622 = t171 * t202;
t467 = t403 * t507 + (pkin(2) * t499 - t119 * t403) * t202 * t631 + t219 * t622 + t215 * t619;
t645 = -t467 - t681;
t683 = t645 * t571;
t575 = t382 * t390;
t414 = koppelP(4,2);
t418 = koppelP(4,1);
t303 = -t374 * t414 + t375 * t418;
t253 = -t303 * t409 - t410;
t299 = t374 * t418 + t375 * t414;
t256 = t299 * t409 - t411;
t385 = legFrame(4,3);
t362 = sin(t385);
t366 = cos(t385);
t265 = -t381 * t362 + t366 * t383;
t269 = t383 * t362 + t366 * t381;
t558 = t384 * t390;
t435 = t265 * t558 + t392 * t269;
t436 = -t392 * t265 + t269 * t558;
t138 = ((t253 * t269 + t256 * t265) * t574 + (t253 * t436 + t256 * t435) * t389) * t233;
t640 = t138 * t412;
t495 = t389 * t640;
t197 = t381 * t253 + t256 * t383;
t456 = t253 * t383 - t381 * t256;
t542 = t390 * t412;
t592 = (t353 * t392 + t542) * t384;
t150 = (t197 * t366 + t362 * t456) * t592 - t282 * (t362 * t197 - t366 * t456);
t632 = t150 * t233;
t117 = t495 - t632;
t327 = pkin(2) * t390 - t354;
t376 = t391 ^ 2;
t649 = pkin(3) * t376;
t201 = 0.1e1 / ((pkin(3) * t559 + t327 * t382) * t391 + pkin(2) * t559 + t575 * t649);
t214 = -t380 * t299 + t303 * t393 + t395;
t218 = -t299 * t393 - t380 * t303 + t396;
t599 = t233 * t423;
t503 = t150 * t599;
t600 = t233 * t389;
t494 = t150 * t600;
t508 = (-t412 * t494 + (t376 * t422 + t391 * t525 + t361) * t138) * t201 * t138;
t654 = pkin(2) * t392;
t328 = t542 + t654;
t576 = t382 * t389;
t440 = pkin(3) * t576 - t327 * t384;
t205 = t381 * t328 - t383 * t440;
t273 = t381 * t558 - t383 * t392;
t274 = t381 * t392 + t383 * t558;
t520 = pkin(2) * t576;
t669 = t328 * t383 + t381 * t440;
t170 = (-t362 * t273 + t274 * t366) * t649 + (t205 * t366 + t362 * t669) * t391 - t265 * t520;
t623 = t170 * t201;
t169 = -(t273 * t366 + t362 * t274) * t649 + (-t362 * t205 + t366 * t669) * t391 + t269 * t520;
t624 = t169 * t201;
t468 = t391 * t508 + (pkin(2) * t503 - t117 * t391) * t201 * t632 + t218 * t624 + t214 * t623;
t655 = -t468 - t681;
t682 = t655 * t575;
t336 = -t381 * g(1) + t383 * g(2);
t337 = t383 * g(1) + t381 * g(2);
t448 = t336 * t366 - t337 * t362;
t424 = 0.1e1 / pkin(3) ^ 2;
t504 = t150 ^ 2 / t236 ^ 2 * t424;
t181 = -t265 * t574 - t389 * t435;
t182 = -t269 * t574 - t389 * t436;
t543 = t390 * t391;
t492 = t382 * t543;
t573 = t382 * t392;
t54 = (-((t138 * t573 + t384 * t503) * t649 + ((-t494 + t640) * t390 + t138 * t654) * t574 + t384 * t117) * t138 + t181 * t218 + t182 * t214 - (t503 * t573 + (t384 * t376 - t389 * t492 - t384) * t138) * t632) * t201;
t664 = 0.2e1 * t54;
t668 = (t336 * t362 + t337 * t366) * t390 + pkin(2) * t664 - pkin(6) * t504 - (t382 * t655 + t384 * t448) * t392;
t446 = t336 * t367 - t337 * t363;
t502 = t154 ^ 2 / t246 ^ 2 * t424;
t183 = -t266 * t566 - t397 * t433;
t186 = -t270 * t566 - t397 * t434;
t538 = t398 * t403;
t488 = t382 * t538;
t565 = t382 * t404;
t58 = (-((t145 * t565 + t384 * t499) * t648 + ((-t490 + t636) * t398 + t145 * t653) * t566 + t384 * t119) * t145 + t183 * t219 + t186 * t215 - (t499 * t565 + (t384 * t377 - t397 * t488 - t384) * t145) * t631) * t202;
t663 = 0.2e1 * t58;
t667 = (t336 * t363 + t337 * t367) * t398 + pkin(2) * t663 - pkin(6) * t502 - (t382 * t645 + t384 * t446) * t404;
t444 = t336 * t368 - t337 * t364;
t501 = t155 ^ 2 * t424 / t247 ^ 2;
t184 = -t267 * t564 - t399 * t431;
t187 = -t271 * t564 - t399 * t432;
t534 = t400 * t405;
t484 = t382 * t534;
t563 = t382 * t406;
t59 = (-((t143 * t563 + t384 * t498) * t647 + ((-t486 + t638) * t400 + t143 * t652) * t564 + t384 * t120) * t143 + t184 * t220 + t187 * t216 - (t498 * t563 + (t384 * t378 - t399 * t484 - t384) * t143) * t630) * t203;
t662 = 0.2e1 * t59;
t666 = (t336 * t364 + t337 * t368) * t400 + pkin(2) * t662 - pkin(6) * t501 - (t382 * t644 + t384 * t444) * t406;
t442 = t336 * t369 - t337 * t365;
t500 = t156 ^ 2 * t424 / t248 ^ 2;
t185 = -t268 * t562 - t401 * t429;
t188 = -t272 * t562 - t401 * t430;
t530 = t402 * t407;
t496 = t382 * t530;
t561 = t382 * t408;
t60 = (-((t144 * t561 + t384 * t497) * t646 + ((-t482 + t637) * t402 + t144 * t651) * t562 + t384 * t121) * t144 + t185 * t221 + t188 * t217 - (t497 * t561 + (t384 * t379 - t401 * t496 - t384) * t144) * t629) * t204;
t661 = 0.2e1 * t60;
t665 = (t336 * t365 + t337 * t369) * t402 + pkin(2) * t661 - pkin(6) * t500 - (t382 * t643 + t384 * t442) * t408;
t475 = t138 * t503;
t656 = pkin(6) / 0.2e1;
t189 = -t265 * t592 + t282 * t269;
t190 = -t282 * t265 - t269 * t592;
t261 = pkin(3) * t543 + t327;
t213 = 0.1e1 / (t261 * t574 + t315);
t546 = t384 * t423;
t560 = t382 * t423;
t650 = pkin(2) * t423;
t77 = -t508 * t546 - (-t384 * t495 + (-t261 * t389 * t560 + t384 * (t391 * t650 + t376)) * t632) * t213 * t503 + (t189 * t218 + t190 * t214) * t599;
t660 = -0.2e1 * pkin(2) * t475 - 0.2e1 * t77 * t656;
t471 = t143 * t498;
t192 = -t267 * t590 + t287 * t271;
t195 = -t287 * t267 - t271 * t590;
t263 = pkin(3) * t534 + t330;
t223 = 0.1e1 / (t263 * t564 + t317);
t81 = -t506 * t546 - (-t384 * t487 + (-t263 * t399 * t560 + t384 * (t405 * t650 + t378)) * t630) * t223 * t498 + (t192 * t220 + t195 * t216) * t595;
t659 = -0.2e1 * pkin(2) * t471 - 0.2e1 * t81 * t656;
t470 = t144 * t497;
t193 = -t268 * t589 + t288 * t272;
t196 = -t288 * t268 - t272 * t589;
t264 = pkin(3) * t530 + t331;
t224 = 0.1e1 / (t264 * t562 + t318);
t82 = -t505 * t546 - (-t384 * t483 + (-t264 * t401 * t560 + t384 * (t407 * t650 + t379)) * t629) * t224 * t497 + (t193 * t221 + t196 * t217) * t593;
t658 = -0.2e1 * pkin(2) * t470 - 0.2e1 * t82 * t656;
t469 = t145 * t499;
t191 = -t266 * t591 + t286 * t270;
t194 = -t286 * t266 - t270 * t591;
t262 = pkin(3) * t538 + t329;
t222 = 0.1e1 / (t262 * t566 + t316);
t80 = -t507 * t546 - (-t384 * t491 + (-t262 * t397 * t560 + t384 * (t403 * t650 + t377)) * t631) * t222 * t499 + (t191 * t219 + t194 * t215) * t597;
t657 = -0.2e1 * pkin(2) * t469 - 0.2e1 * t80 * t656;
t642 = t395 - g(2);
t641 = t396 - g(1);
t319 = t381 * t414 + t383 * t418;
t320 = -t381 * t418 + t383 * t414;
t249 = t374 * t319 + t320 * t375;
t452 = t319 * t375 - t374 * t320;
t177 = t249 * t366 - t362 * t452;
t291 = t392 * t414 - t418 * t558;
t292 = t392 * t418 + t414 * t558;
t225 = t291 * t383 - t381 * t292;
t226 = t381 * t291 + t292 * t383;
t639 = (((-t374 * t225 + t226 * t375) * t366 + (t225 * t375 + t226 * t374) * t362) * t389 + t177 * t574) * t213;
t321 = t381 * t415 + t383 * t419;
t322 = -t381 * t419 + t383 * t415;
t250 = t374 * t321 + t322 * t375;
t451 = t321 * t375 - t374 * t322;
t178 = t250 * t367 - t363 * t451;
t293 = t404 * t415 - t419 * t555;
t296 = t404 * t419 + t415 * t555;
t227 = t293 * t383 - t381 * t296;
t230 = t381 * t293 + t296 * t383;
t635 = (((-t374 * t227 + t230 * t375) * t367 + (t227 * t375 + t230 * t374) * t363) * t397 + t178 * t566) * t222;
t323 = t381 * t416 + t383 * t420;
t324 = -t381 * t420 + t383 * t416;
t251 = t374 * t323 + t324 * t375;
t450 = t323 * t375 - t374 * t324;
t179 = t251 * t368 - t364 * t450;
t294 = t406 * t416 - t420 * t553;
t297 = t406 * t420 + t416 * t553;
t228 = t294 * t383 - t381 * t297;
t231 = t381 * t294 + t297 * t383;
t634 = (((-t374 * t228 + t231 * t375) * t368 + t364 * (t228 * t375 + t374 * t231)) * t399 + t179 * t564) * t223;
t325 = t381 * t417 + t383 * t421;
t326 = -t381 * t421 + t383 * t417;
t252 = t374 * t325 + t326 * t375;
t449 = t325 * t375 - t374 * t326;
t180 = t252 * t369 - t365 * t449;
t295 = t408 * t417 - t421 * t551;
t298 = t408 * t421 + t417 * t551;
t229 = t295 * t383 - t381 * t298;
t232 = t381 * t295 + t298 * t383;
t633 = (((-t374 * t229 + t232 * t375) * t369 + (t229 * t375 + t232 * t374) * t365) * t401 + t180 * t562) * t224;
t165 = t177 * t592 - t282 * (t249 * t362 + t366 * t452);
t628 = t165 * t233;
t166 = t178 * t591 - t286 * (t250 * t363 + t367 * t451);
t627 = t166 * t237;
t167 = t179 * t590 - (t251 * t364 + t368 * t450) * t287;
t626 = t167 * t239;
t168 = t180 * t589 - (t365 * t252 + t369 * t449) * t288;
t625 = t168 * t241;
t616 = t181 * t201;
t615 = t182 * t201;
t614 = t183 * t202;
t613 = t184 * t203;
t612 = t185 * t204;
t611 = t186 * t202;
t610 = t187 * t203;
t609 = t188 * t204;
t608 = t189 * t233;
t607 = t190 * t233;
t606 = t191 * t237;
t605 = t192 * t239;
t604 = t193 * t241;
t603 = t194 * t237;
t602 = t195 * t239;
t601 = t196 * t241;
t557 = t384 * t392;
t550 = t384 * t404;
t549 = t384 * t406;
t548 = t384 * t408;
t547 = t384 * t412;
t545 = t389 * t391;
t541 = t391 * t392;
t540 = t397 * t403;
t536 = t399 * t405;
t532 = t401 * t407;
t528 = t403 * t404;
t527 = t405 * t406;
t526 = t407 * t408;
t516 = t54 * t600;
t515 = t233 * t391 * t54;
t514 = t58 * t598;
t513 = t237 * t403 * t58;
t512 = t59 * t596;
t511 = t239 * t405 * t59;
t510 = t60 * t594;
t509 = t241 * t407 * t60;
t493 = t353 * t576;
t489 = t355 * t572;
t485 = t356 * t570;
t481 = t357 * t568;
t137 = t138 ^ 2;
t53 = t392 * t54;
t480 = (t137 + t504) * t390 - t53;
t139 = t143 ^ 2;
t56 = t406 * t59;
t479 = (t139 + t501) * t400 - t56;
t140 = t144 ^ 2;
t57 = t408 * t60;
t478 = (t140 + t500) * t402 - t57;
t141 = t145 ^ 2;
t55 = t404 * t58;
t477 = (t141 + t502) * t398 - t55;
t476 = t137 * t233 * t545;
t474 = t139 * t239 * t536;
t473 = t140 * t241 * t532;
t472 = t141 * t237 * t540;
t464 = t353 * t384;
t463 = t355 * t384;
t462 = t356 * t384;
t461 = t357 * t384;
t460 = 0.2e1 * t475;
t459 = 0.2e1 * t471;
t458 = 0.2e1 * t470;
t457 = 0.2e1 * t469;
t314 = t369 * g(1) + t365 * g(2);
t313 = t368 * g(1) + t364 * g(2);
t312 = t367 * g(1) + t363 * g(2);
t311 = t366 * g(1) + t362 * g(2);
t310 = t365 * g(1) - t369 * g(2);
t309 = t364 * g(1) - t368 * g(2);
t308 = t363 * g(1) - t367 * g(2);
t307 = t362 * g(1) - t366 * g(2);
t290 = -t374 * t393 - t375 * t380;
t289 = -t374 * t380 + t375 * t393;
t132 = (-t302 * ((t268 * t357 + t272 * t547) * t526 - (-t268 * t412 + t272 * t461) * t530 + t272 * t481) + t306 * ((-t268 * t547 + t272 * t357) * t526 + (t268 * t461 + t272 * t412) * t530 - t268 * t481)) / (-t360 * t562 + (t496 + t552) * t357);
t131 = (-t301 * ((t267 * t356 + t271 * t547) * t527 - (-t267 * t412 + t271 * t462) * t534 + t271 * t485) + t305 * ((-t267 * t547 + t271 * t356) * t527 + (t267 * t462 + t271 * t412) * t534 - t267 * t485)) / (-t359 * t564 + (t484 + t554) * t356);
t130 = (-t300 * ((t266 * t355 + t270 * t547) * t528 - (-t266 * t412 + t270 * t463) * t538 + t270 * t489) + t304 * ((-t266 * t547 + t270 * t355) * t528 + (t266 * t463 + t270 * t412) * t538 - t266 * t489)) / (-t358 * t566 + (t488 + t556) * t355);
t129 = (-t299 * ((t265 * t353 + t269 * t547) * t541 - (-t265 * t412 + t269 * t464) * t543 + t269 * t493) + t303 * ((-t265 * t547 + t269 * t353) * t541 + (t265 * t464 + t269 * t412) * t543 - t265 * t493)) / (-t354 * t574 + (t492 + t559) * t353);
t128 = (-0.2e1 * t379 + 0.1e1) * t140;
t127 = (-0.2e1 * t378 + 0.1e1) * t139;
t126 = (-0.2e1 * t377 + 0.1e1) * t141;
t125 = (-0.2e1 * t376 + 0.1e1) * t137;
t95 = t382 * t442 - t384 * t643;
t94 = t382 * t444 - t384 * t644;
t93 = t382 * t446 - t384 * t645;
t90 = t314 * (t381 * t548 + t383 * t402) + t310 * (-t381 * t402 + t383 * t548) - t643 * t561;
t89 = t313 * (t381 * t549 + t383 * t400) + t309 * (-t381 * t400 + t383 * t549) - t644 * t563;
t88 = t312 * (t381 * t550 + t383 * t398) + t308 * (-t381 * t398 + t383 * t550) - t645 * t565;
t87 = -t314 * t277 - t310 * t280 + t685;
t86 = -t313 * t276 - t309 * t279 + t684;
t85 = -t312 * t275 - t308 * t278 + t683;
t83 = t382 * t448 - t384 * t655;
t79 = t311 * (t381 * t557 + t383 * t390) + t307 * (-t381 * t390 + t383 * t557) - t655 * t573;
t78 = -t311 * t273 - t307 * t274 + t682;
t76 = -t401 * t500 + t82 * t407;
t75 = t82 * t401 + t407 * t500;
t74 = -t399 * t501 + t81 * t405;
t73 = t81 * t399 + t405 * t501;
t72 = -t397 * t502 + t80 * t403;
t71 = t80 * t397 + t403 * t502;
t70 = -t389 * t504 + t77 * t391;
t69 = t77 * t389 + t391 * t504;
t65 = t398 * t80 + t404 * t457;
t64 = t402 * t82 + t408 * t458;
t63 = t400 * t81 + t406 * t459;
t61 = t390 * t77 + t392 * t460;
t52 = t139 * t406 + t400 * t59;
t51 = -t139 * t400 + t56;
t50 = t408 * t140 + t402 * t60;
t49 = t404 * t141 + t398 * t58;
t48 = -t402 * t140 + t57;
t47 = -t398 * t141 + t55;
t46 = t392 * t137 + t390 * t54;
t45 = -t390 * t137 + t53;
t44 = (t60 * t401 + t407 * t458) * t401;
t43 = (t59 * t399 + t405 * t459) * t399;
t42 = (t58 * t397 + t403 * t457) * t397;
t41 = (t54 * t389 + t391 * t460) * t389;
t40 = t532 * t661 + (0.4e1 * t379 - 0.2e1) * t470;
t39 = t536 * t662 + (0.4e1 * t378 - 0.2e1) * t471;
t38 = t540 * t663 + (0.4e1 * t377 - 0.2e1) * t469;
t37 = t545 * t664 + (0.4e1 * t376 - 0.2e1) * t475;
t36 = (t336 * t551 + t408 * t337) * t369 + (t408 * t336 - t337 * t551) * t365 + t685 + pkin(2) * t140 - t60 * pkin(6);
t35 = (t336 * t553 + t406 * t337) * t368 + (t406 * t336 - t337 * t553) * t364 + t684 + pkin(2) * t139 - t59 * pkin(6);
t34 = (t336 * t555 + t404 * t337) * t367 + (t404 * t336 - t337 * t555) * t363 + t683 + pkin(2) * t141 - t58 * pkin(6);
t33 = (t336 * t558 + t392 * t337) * t366 + (t392 * t336 - t337 * t558) * t362 + t682 + pkin(2) * t137 - t54 * pkin(6);
t32 = (-t397 * t65 - t403 * t477) * t382;
t31 = (t397 * t477 - t403 * t65) * t382;
t30 = (-t401 * t64 - t407 * t478) * t382;
t29 = (t401 * t478 - t407 * t64) * t382;
t28 = (-t399 * t63 - t405 * t479) * t382;
t27 = (t399 * t479 - t405 * t63) * t382;
t26 = (-t389 * t61 - t391 * t480) * t382;
t25 = (t389 * t480 - t391 * t61) * t382;
t24 = t36 * t407 - t95 * t401;
t23 = t36 * t401 + t95 * t407;
t22 = t35 * t405 - t94 * t399;
t21 = t35 * t399 + t94 * t405;
t20 = t34 * t403 - t93 * t397;
t19 = t34 * t397 + t93 * t403;
t18 = t33 * t391 - t83 * t389;
t17 = t33 * t389 + t83 * t391;
t16 = t401 * t658 + t407 * t665;
t15 = -t401 * t665 + t407 * t658;
t14 = t399 * t659 + t405 * t666;
t13 = -t399 * t666 + t405 * t659;
t12 = t397 * t657 + t403 * t667;
t11 = -t397 * t667 + t403 * t657;
t10 = t389 * t660 + t391 * t668;
t9 = -t389 * t668 + t391 * t660;
t8 = t384 * t72 + t32;
t7 = -t384 * t71 + t31;
t6 = t384 * t76 + t30;
t5 = -t384 * t75 + t29;
t4 = t384 * t74 + t28;
t3 = -t384 * t73 + t27;
t2 = t384 * t70 + t26;
t1 = -t384 * t69 + t25;
t62 = [-t620 * t643 - t621 * t644 - t622 * t645 - t624 * t655, t54 * t616 + t58 * t614 + t59 * t613 + t60 * t612, t79 * t616 + t88 * t614 + t89 * t613 + t90 * t612 + (t45 * t624 + t47 * t622 + t48 * t620 + t51 * t621) * t382, t78 * t616 + t85 * t614 + t86 * t613 + t87 * t612 + (-t46 * t624 - t49 * t622 - t50 * t620 - t52 * t621) * t382, t41 * t616 + t42 * t614 + t43 * t613 + t44 * t612 + (-t189 * t476 - t191 * t472 - t192 * t474 - t193 * t473) * t423, t37 * t616 + t38 * t614 + t39 * t613 + t40 * t612 + (t125 * t608 + t126 * t606 + t127 * t605 + t128 * t604) * t423, t69 * t616 + t71 * t614 + t73 * t613 + t75 * t612 + (t189 * t516 + t191 * t514 + t192 * t512 + t193 * t510) * t423, t70 * t616 + t72 * t614 + t74 * t613 + t76 * t612 + (t189 * t515 + t191 * t513 + t192 * t511 + t193 * t509) * t423, (t604 * t82 + t605 * t81 + t606 * t80 + t608 * t77) * t423, (t185 * t16 + t173 * t6) * t204 + (t184 * t14 + t172 * t4) * t203 + (t183 * t12 + t171 * t8) * t202 + (t181 * t10 + t169 * t2) * t201 + (t17 * t608 + t19 * t606 + t21 * t605 + t23 * t604) * t423, (t185 * t15 + t173 * t5) * t204 + (t184 * t13 + t172 * t3) * t203 + (t183 * t11 + t171 * t7) * t202 + (t169 * t1 + t181 * t9) * t201 + (t18 * t608 + t20 * t606 + t22 * t605 + t24 * t604) * t423, 0, t290, -t289, t641; -t617 * t643 - t618 * t644 - t619 * t645 - t623 * t655, t54 * t615 + t58 * t611 + t59 * t610 + t60 * t609, t79 * t615 + t88 * t611 + t89 * t610 + t90 * t609 + (t45 * t623 + t47 * t619 + t48 * t617 + t51 * t618) * t382, t78 * t615 + t85 * t611 + t86 * t610 + t87 * t609 + (-t46 * t623 - t49 * t619 - t50 * t617 - t52 * t618) * t382, t41 * t615 + t42 * t611 + t43 * t610 + t44 * t609 + (-t190 * t476 - t194 * t472 - t195 * t474 - t196 * t473) * t423, t37 * t615 + t38 * t611 + t39 * t610 + t40 * t609 + (t125 * t607 + t126 * t603 + t127 * t602 + t128 * t601) * t423, t69 * t615 + t71 * t611 + t73 * t610 + t75 * t609 + (t190 * t516 + t194 * t514 + t195 * t512 + t196 * t510) * t423, t70 * t615 + t72 * t611 + t74 * t610 + t76 * t609 + (t190 * t515 + t194 * t513 + t195 * t511 + t196 * t509) * t423, (t601 * t82 + t602 * t81 + t603 * t80 + t607 * t77) * t423, (t188 * t16 + t176 * t6) * t204 + (t187 * t14 + t175 * t4) * t203 + (t186 * t12 + t174 * t8) * t202 + (t182 * t10 + t170 * t2) * t201 + (t17 * t607 + t19 * t603 + t21 * t602 + t23 * t601) * t423, (t188 * t15 + t176 * t5) * t204 + (t187 * t13 + t175 * t3) * t203 + (t186 * t11 + t174 * t7) * t202 + (t170 * t1 + t182 * t9) * t201 + (t18 * t607 + t20 * t603 + t22 * t602 + t24 * t601) * t423, 0, t289, t290, t642; (4 * t394) - (4 * g(3)) + t465 + t466 + t467 + t468, 0, (t45 + t47 + t48 + t51) * t382, (-t46 - t49 - t50 - t52) * t382, 0, 0, 0, 0, 0, t26 + t28 + t30 + t32 + (t70 + t72 + t74 + t76) * t384, t25 + t27 + t29 + t31 + (-t69 - t71 - t73 - t75) * t384, 0, 0, 0, t681; -t129 * t655 - t130 * t645 - t131 * t644 - t132 * t643, t54 * t639 + t58 * t635 + t59 * t634 + t60 * t633, t79 * t639 + t88 * t635 + t89 * t634 + t90 * t633 + (t129 * t45 + t130 * t47 + t131 * t51 + t132 * t48) * t382, t78 * t639 + t85 * t635 + t86 * t634 + t87 * t633 + (-t129 * t46 - t130 * t49 - t131 * t52 - t132 * t50) * t382, t41 * t639 + t42 * t635 + t43 * t634 + t44 * t633 + (-t165 * t476 - t166 * t472 - t167 * t474 - t168 * t473) * t423, t37 * t639 + t38 * t635 + t39 * t634 + t40 * t633 + (t125 * t628 + t126 * t627 + t127 * t626 + t128 * t625) * t423, t69 * t639 + t71 * t635 + t73 * t634 + t75 * t633 + (t165 * t516 + t166 * t514 + t167 * t512 + t168 * t510) * t423, t70 * t639 + t72 * t635 + t74 * t634 + t76 * t633 + (t165 * t515 + t166 * t513 + t167 * t511 + t168 * t509) * t423, (t625 * t82 + t626 * t81 + t627 * t80 + t628 * t77) * t423, t10 * t639 + t12 * t635 + t14 * t634 + t16 * t633 + t129 * t2 + t130 * t8 + t131 * t4 + t132 * t6 + (t17 * t628 + t19 * t627 + t21 * t626 + t23 * t625) * t423, t11 * t635 + t13 * t634 + t9 * t639 + t15 * t633 + t129 * t1 + t130 * t7 + t131 * t3 + t132 * t5 + (t18 * t628 + t20 * t627 + t22 * t626 + t24 * t625) * t423, t393, -t374 * t641 + t375 * t642, -t374 * t642 - t375 * t641, 0;];
tauX_reg  = t62;
