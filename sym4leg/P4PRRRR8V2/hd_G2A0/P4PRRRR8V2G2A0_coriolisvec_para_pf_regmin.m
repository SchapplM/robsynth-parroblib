% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:22
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V2G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:19:08
% EndTime: 2020-08-07 11:19:42
% DurationCPUTime: 35.92s
% Computational Cost: add. (178091->817), mult. (365768->1692), div. (10244->22), fcn. (289976->30), ass. (0->663)
t2015 = sin(qJ(2,4));
t2016 = cos(qJ(3,4));
t2348 = t2015 * t2016;
t2017 = cos(qJ(2,4));
t2038 = pkin(7) + pkin(6);
t1972 = t2017 * t2038;
t2496 = pkin(2) * t2015 - t1972;
t1915 = pkin(3) * t2348 + t2496;
t2474 = pkin(3) * t2016;
t1970 = pkin(2) + t2474;
t2013 = cos(pkin(4));
t2014 = sin(qJ(3,4));
t2362 = t2013 * t2014;
t1941 = t1970 * t2362;
t2011 = sin(pkin(4));
t2382 = t2011 * t2016;
t1862 = t1915 * t2382 + t1941;
t1859 = 0.1e1 / t1862;
t2023 = sin(qJ(2,3));
t2028 = cos(qJ(3,3));
t2345 = t2023 * t2028;
t2029 = cos(qJ(2,3));
t1979 = t2029 * t2038;
t2495 = pkin(2) * t2023 - t1979;
t1916 = pkin(3) * t2345 + t2495;
t2473 = pkin(3) * t2028;
t1973 = pkin(2) + t2473;
t2022 = sin(qJ(3,3));
t2359 = t2013 * t2022;
t1942 = t1973 * t2359;
t2375 = t2011 * t2028;
t1876 = t1916 * t2375 + t1942;
t1867 = 0.1e1 / t1876;
t2025 = sin(qJ(2,2));
t2030 = cos(qJ(3,2));
t2343 = t2025 * t2030;
t2031 = cos(qJ(2,2));
t1980 = t2031 * t2038;
t2494 = pkin(2) * t2025 - t1980;
t1917 = pkin(3) * t2343 + t2494;
t2472 = pkin(3) * t2030;
t1974 = pkin(2) + t2472;
t2024 = sin(qJ(3,2));
t2357 = t2013 * t2024;
t1943 = t1974 * t2357;
t2373 = t2011 * t2030;
t1877 = t1917 * t2373 + t1943;
t1869 = 0.1e1 / t1877;
t2027 = sin(qJ(2,1));
t2032 = cos(qJ(3,1));
t2340 = t2027 * t2032;
t2033 = cos(qJ(2,1));
t1981 = t2033 * t2038;
t2493 = pkin(2) * t2027 - t1981;
t1918 = pkin(3) * t2340 + t2493;
t2471 = pkin(3) * t2032;
t1975 = pkin(2) + t2471;
t2026 = sin(qJ(3,1));
t2342 = t2026 * t2013;
t1944 = t1975 * t2342;
t2371 = t2011 * t2032;
t1878 = t1918 * t2371 + t1944;
t1871 = 0.1e1 / t1878;
t1906 = pkin(3) * t2342 + t2011 * t2493;
t2008 = t2032 ^ 2;
t2475 = pkin(3) * t2008;
t2317 = t2027 * t2475;
t1854 = 0.1e1 / (pkin(2) * t2342 + t1906 * t2032 + t2011 * t2317);
t1905 = pkin(3) * t2357 + t2011 * t2494;
t2007 = t2030 ^ 2;
t2476 = pkin(3) * t2007;
t2318 = t2025 * t2476;
t1853 = 0.1e1 / (pkin(2) * t2357 + t1905 * t2030 + t2011 * t2318);
t1904 = pkin(3) * t2359 + t2011 * t2495;
t2006 = t2028 ^ 2;
t2477 = pkin(3) * t2006;
t2319 = t2023 * t2477;
t1852 = 0.1e1 / (pkin(2) * t2359 + t1904 * t2028 + t2011 * t2319);
t1903 = pkin(3) * t2362 + t2011 * t2496;
t2002 = t2016 ^ 2;
t2478 = pkin(3) * t2002;
t2320 = t2015 * t2478;
t1851 = 0.1e1 / (pkin(2) * t2362 + t1903 * t2016 + t2011 * t2320);
t2010 = sin(pkin(8));
t2012 = cos(pkin(8));
t2358 = t2013 * t2023;
t1921 = t2010 * t2358 - t2012 * t2029;
t1894 = t1921 * t2022 + t2010 * t2375;
t2522 = 0.2e1 * t1894;
t2356 = t2013 * t2025;
t1922 = t2010 * t2356 - t2012 * t2031;
t1896 = t1922 * t2024 + t2010 * t2373;
t2521 = 0.2e1 * t1896;
t2355 = t2013 * t2027;
t1923 = t2010 * t2355 - t2012 * t2033;
t1898 = t1923 * t2026 + t2010 * t2371;
t2520 = 0.2e1 * t1898;
t2039 = xP(4);
t1999 = sin(t2039);
t2000 = cos(t2039);
t2041 = koppelP(3,2);
t2045 = koppelP(3,1);
t1934 = t1999 * t2045 + t2000 * t2041;
t2019 = legFrame(3,2);
t1989 = sin(t2019);
t1993 = cos(t2019);
t2034 = xDP(4);
t2036 = xDP(2);
t2037 = xDP(1);
t2110 = t1999 * t2041 - t2000 * t2045;
t1842 = -(t2034 * t2110 - t2036) * t1989 + (t1934 * t2034 - t2037) * t1993;
t2035 = xDP(3);
t2363 = t2012 * t2035;
t1836 = t1842 * t2010 - t2363;
t2351 = t2013 * t2035;
t1812 = ((t1842 * t2358 - t2029 * t2035) * t2010 - (t1842 * t2029 + t2023 * t2351) * t2012) * t2022 + t1836 * t2375;
t2439 = t1812 * t1867;
t2268 = t2038 * t2439;
t2170 = t2022 * t2268;
t1928 = t1973 * t2023 - t1979;
t1969 = t2035 * t2010;
t1976 = t2023 * t2038;
t1820 = (t1973 * t2029 + t1976) * t1836 * t2013 + (t1842 * t2012 + t1969) * t1928;
t1888 = t1928 * t2375 + t1942;
t2431 = t1820 / t1888;
t1793 = t2170 - t2431;
t2009 = t2034 ^ 2;
t2236 = t2011 * t2345;
t2049 = 0.1e1 / pkin(3);
t2250 = t2049 * t2431;
t2251 = t2022 * t2431;
t2269 = t2029 * t2439;
t2374 = t2011 * t2029;
t2490 = -t1934 * t1989 - t1993 * t2110;
t1756 = (-((t2011 * t2269 + t2013 * t2250) * t2477 + ((-t2251 + t2268) * t2023 + pkin(2) * t2269) * t2375 + t1793 * t2013) * t2439 - (t2250 * t2374 + (t2006 * t2013 - t2022 * t2236 - t2013) * t2439) * t2431 + t2490 * t2009 * t1894) * t1852;
t1982 = pkin(2) ^ 2 + t2038 ^ 2;
t2048 = pkin(3) ^ 2;
t2484 = 0.2e1 * pkin(2);
t2466 = pkin(3) * t2484;
t1776 = -t2038 * t2251 + (t2006 * t2048 + t2028 * t2466 + t1982) * t2439;
t1950 = pkin(2) * t2029 + t1976;
t2381 = t2011 * t2022;
t2090 = pkin(3) * t2381 - t2013 * t2495;
t1856 = -t1950 * t2010 + t2012 * t2090;
t1924 = t2010 * t2029 + t2012 * t2358;
t2380 = t2011 * t2023;
t2385 = t2011 * t2012;
t2482 = pkin(2) * t2022;
t1825 = (t1924 * t1993 + t1989 * t2380) * t2477 + (-t1856 * t1993 + t1904 * t1989) * t2028 + (t1989 * t2013 - t1993 * t2385) * t2482;
t1828 = -(t1924 * t1989 - t1993 * t2380) * t2477 + (t1856 * t1989 + t1904 * t1993) * t2028 + (t1989 * t2385 + t1993 * t2013) * t2482;
t2270 = t2028 * t2439;
t1764 = (t1776 * t2270 + (pkin(2) * t2250 - t1793 * t2028) * t2431 + (t1825 * t2110 - t1828 * t1934) * t2009) * t1852;
t1752 = pkin(6) * t1756 + t1764 * t2380;
t1741 = t1764 * t2013 * t2028 - t1752 * t2022;
t2217 = pkin(6) * t2250;
t1786 = t2439 * t2482 + t2028 * t2217 / 0.2e1;
t2354 = t2013 * t2029;
t2386 = t2010 * t2013;
t1848 = (t2010 * t2354 + t2012 * t2023) * t2473 + t1950 * t2386 + t2495 * t2012;
t2519 = t2431 * t2522;
t2072 = -t1741 * t1848 + t1786 * t2519;
t2042 = koppelP(2,2);
t2046 = koppelP(2,1);
t1935 = t1999 * t2046 + t2000 * t2042;
t2020 = legFrame(2,2);
t1990 = sin(t2020);
t1994 = cos(t2020);
t2109 = t1999 * t2042 - t2000 * t2046;
t1843 = -(t2034 * t2109 - t2036) * t1990 + (t1935 * t2034 - t2037) * t1994;
t1837 = t1843 * t2010 - t2363;
t1813 = ((t1843 * t2356 - t2031 * t2035) * t2010 - (t1843 * t2031 + t2025 * t2351) * t2012) * t2024 + t1837 * t2373;
t2438 = t1813 * t1869;
t2265 = t2038 * t2438;
t2168 = t2024 * t2265;
t1929 = t1974 * t2025 - t1980;
t1977 = t2025 * t2038;
t1821 = (t1974 * t2031 + t1977) * t1837 * t2013 + (t1843 * t2012 + t1969) * t1929;
t1889 = t1929 * t2373 + t1943;
t2430 = t1821 / t1889;
t1794 = t2168 - t2430;
t2235 = t2011 * t2343;
t2248 = t2049 * t2430;
t2249 = t2024 * t2430;
t2266 = t2031 * t2438;
t2372 = t2011 * t2031;
t2491 = -t1935 * t1990 - t1994 * t2109;
t1757 = (-((t2011 * t2266 + t2013 * t2248) * t2476 + ((-t2249 + t2265) * t2025 + pkin(2) * t2266) * t2373 + t1794 * t2013) * t2438 - (t2248 * t2372 + (t2007 * t2013 - t2024 * t2235 - t2013) * t2438) * t2430 + t2491 * t2009 * t1896) * t1853;
t1777 = -t2038 * t2249 + (t2007 * t2048 + t2030 * t2466 + t1982) * t2438;
t1951 = pkin(2) * t2031 + t1977;
t2379 = t2011 * t2024;
t2089 = pkin(3) * t2379 - t2013 * t2494;
t1857 = -t1951 * t2010 + t2012 * t2089;
t1925 = t2010 * t2031 + t2012 * t2356;
t2378 = t2011 * t2025;
t2481 = pkin(2) * t2024;
t1826 = (t1925 * t1994 + t1990 * t2378) * t2476 + (-t1857 * t1994 + t1905 * t1990) * t2030 + (t1990 * t2013 - t1994 * t2385) * t2481;
t1829 = -(t1925 * t1990 - t1994 * t2378) * t2476 + (t1857 * t1990 + t1905 * t1994) * t2030 + (t1990 * t2385 + t1994 * t2013) * t2481;
t2267 = t2030 * t2438;
t1765 = (t1777 * t2267 + (pkin(2) * t2248 - t1794 * t2030) * t2430 + (t1826 * t2109 - t1829 * t1935) * t2009) * t1853;
t1753 = pkin(6) * t1757 + t1765 * t2378;
t1742 = t1765 * t2013 * t2030 - t1753 * t2024;
t2216 = pkin(6) * t2248;
t1787 = t2438 * t2481 + t2030 * t2216 / 0.2e1;
t2353 = t2013 * t2031;
t1849 = (t2010 * t2353 + t2012 * t2025) * t2472 + t1951 * t2386 + t2494 * t2012;
t2518 = t2430 * t2521;
t2071 = -t1742 * t1849 + t1787 * t2518;
t2043 = koppelP(1,2);
t2047 = koppelP(1,1);
t1936 = t1999 * t2047 + t2000 * t2043;
t2021 = legFrame(1,2);
t1991 = sin(t2021);
t1995 = cos(t2021);
t2108 = t1999 * t2043 - t2000 * t2047;
t1844 = -(t2034 * t2108 - t2036) * t1991 + (t1936 * t2034 - t2037) * t1995;
t1838 = t1844 * t2010 - t2363;
t1814 = ((t1844 * t2355 - t2033 * t2035) * t2010 - (t1844 * t2033 + t2027 * t2351) * t2012) * t2026 + t1838 * t2371;
t2437 = t1814 * t1871;
t2262 = t2038 * t2437;
t2166 = t2026 * t2262;
t1930 = t1975 * t2027 - t1981;
t1978 = t2027 * t2038;
t1822 = (t1975 * t2033 + t1978) * t1838 * t2013 + (t1844 * t2012 + t1969) * t1930;
t1890 = t1930 * t2371 + t1944;
t2429 = t1822 / t1890;
t1795 = t2166 - t2429;
t2234 = t2011 * t2340;
t2246 = t2049 * t2429;
t2247 = t2026 * t2429;
t2263 = t2033 * t2437;
t2370 = t2011 * t2033;
t2492 = -t1936 * t1991 - t1995 * t2108;
t1758 = (-((t2011 * t2263 + t2013 * t2246) * t2475 + ((-t2247 + t2262) * t2027 + pkin(2) * t2263) * t2371 + t1795 * t2013) * t2437 - (t2246 * t2370 + (t2008 * t2013 - t2026 * t2234 - t2013) * t2437) * t2429 + t2492 * t2009 * t1898) * t1854;
t1778 = -t2038 * t2247 + (t2008 * t2048 + t2032 * t2466 + t1982) * t2437;
t1952 = pkin(2) * t2033 + t1978;
t2377 = t2011 * t2026;
t2088 = pkin(3) * t2377 - t2013 * t2493;
t1858 = -t1952 * t2010 + t2012 * t2088;
t1926 = t2010 * t2033 + t2012 * t2355;
t2376 = t2011 * t2027;
t2480 = pkin(2) * t2026;
t1827 = (t1926 * t1995 + t1991 * t2376) * t2475 + (-t1858 * t1995 + t1906 * t1991) * t2032 + (t1991 * t2013 - t1995 * t2385) * t2480;
t1830 = -(t1926 * t1991 - t1995 * t2376) * t2475 + (t1858 * t1991 + t1906 * t1995) * t2032 + (t1991 * t2385 + t1995 * t2013) * t2480;
t2264 = t2032 * t2437;
t1766 = (t1778 * t2264 + (pkin(2) * t2246 - t1795 * t2032) * t2429 + (t1827 * t2108 - t1830 * t1936) * t2009) * t1854;
t1754 = pkin(6) * t1758 + t1766 * t2376;
t1743 = t1766 * t2013 * t2032 - t1754 * t2026;
t2215 = pkin(6) * t2246;
t1788 = t2437 * t2480 + t2032 * t2215 / 0.2e1;
t2352 = t2013 * t2033;
t1850 = (t2010 * t2352 + t2012 * t2027) * t2471 + t1952 * t2386 + t2493 * t2012;
t2517 = t2429 * t2520;
t2070 = -t1743 * t1850 + t1788 * t2517;
t1744 = -t1752 * t2028 - t1764 * t2359;
t1789 = pkin(2) * t2270 - t2022 * t2217 / 0.2e1;
t2069 = -t1744 * t1848 + t1789 * t2519;
t1745 = -t1753 * t2030 - t1765 * t2357;
t1790 = pkin(2) * t2267 - t2024 * t2216 / 0.2e1;
t2068 = -t1745 * t1849 + t1790 * t2518;
t1746 = -t1754 * t2032 - t1766 * t2342;
t1791 = pkin(2) * t2264 - t2026 * t2215 / 0.2e1;
t2067 = -t1746 * t1850 + t1791 * t2517;
t2512 = t2011 * (t2032 * t2493 + t2317);
t2511 = t2011 * (t2030 * t2494 + t2318);
t2510 = t2011 * (t2028 * t2495 + t2319);
t2509 = t2011 * (t2016 * t2496 + t2320);
t2504 = 0.2e1 * t2002 - 0.1e1;
t1984 = 0.2e1 * t2006 - 0.1e1;
t1985 = 0.2e1 * t2007 - 0.1e1;
t1986 = 0.2e1 * t2008 - 0.1e1;
t2503 = t1970 * t2013;
t2502 = t1973 * t2013;
t2501 = t1974 * t2013;
t2500 = t1975 * t2013;
t2167 = t2429 * t2437;
t2139 = 0.2e1 * t2167;
t2406 = t1854 * t2032;
t2238 = t2026 * t2406;
t1806 = t1814 ^ 2 / t1878 ^ 2;
t2272 = t1850 * t1806;
t2499 = (t1898 * t2139 - t2272) * t2238;
t2169 = t2430 * t2438;
t2141 = 0.2e1 * t2169;
t2411 = t1853 * t2030;
t2240 = t2024 * t2411;
t1805 = t1813 ^ 2 / t1877 ^ 2;
t2274 = t1849 * t1805;
t2498 = (t1896 * t2141 - t2274) * t2240;
t2171 = t2431 * t2439;
t2143 = 0.2e1 * t2171;
t2416 = t1852 * t2028;
t2242 = t2022 * t2416;
t1804 = t1812 ^ 2 / t1876 ^ 2;
t2276 = t1848 * t1804;
t2497 = (t1894 * t2143 - t2276) * t2242;
t2040 = koppelP(4,2);
t2044 = koppelP(4,1);
t1933 = t1999 * t2044 + t2000 * t2040;
t2018 = legFrame(4,2);
t1988 = sin(t2018);
t1992 = cos(t2018);
t2111 = t1999 * t2040 - t2000 * t2044;
t1841 = -(t2034 * t2111 - t2036) * t1988 + (t1933 * t2034 - t2037) * t1992;
t1835 = t1841 * t2010 - t2363;
t2361 = t2013 * t2015;
t1808 = ((t1841 * t2361 - t2017 * t2035) * t2010 - (t1841 * t2017 + t2015 * t2351) * t2012) * t2014 + t1835 * t2382;
t1803 = t1808 ^ 2 / t1862 ^ 2;
t1971 = t2015 * t2038;
t1946 = pkin(2) * t2017 + t1971;
t2360 = t2013 * t2017;
t1840 = (t2010 * t2360 + t2012 * t2015) * t2474 + t1946 * t2386 + t2496 * t2012;
t1919 = t2010 * t2361 - t2012 * t2017;
t2079 = t1919 * t2014 + t2010 * t2382;
t1927 = t1970 * t2015 - t1972;
t1816 = (t1970 * t2017 + t1971) * t1835 * t2013 + t1927 * (t1841 * t2012 + t1969);
t1881 = t1927 * t2382 + t1941;
t2435 = t1816 / t1881;
t2324 = 0.2e1 * t2435;
t2440 = t1808 * t1859;
t2145 = t2324 * t2440;
t2421 = t1851 * t2016;
t2244 = t2014 * t2421;
t2051 = (t1840 * t1803 - t2079 * t2145) * t2244;
t2489 = -t1933 * t1988 - t1992 * t2111;
t2483 = pkin(2) * t2014;
t2479 = pkin(2) * t2049;
t2259 = t2014 * t2435;
t1775 = -t2038 * t2259 + (t2002 * t2048 + t2016 * t2466 + t1982) * t2440;
t2277 = t2038 * t2440;
t2178 = t2014 * t2277;
t2258 = t2049 * t2435;
t2350 = t2013 * t2049;
t2369 = t2011 * t2049;
t2387 = t2009 * t2049;
t2428 = t1840 * t1851;
t1759 = -t1775 * t1851 * t2350 * t2440 - (-t2013 * t2178 + (-t1915 * t2014 * t2369 + (t2016 * t2479 + t2002) * t2013) * t2435) * t1859 * t2258 + t2489 * t2387 * t2428;
t2470 = pkin(6) * t1759;
t2427 = t1848 * t1852;
t1760 = -t1776 * t1852 * t2350 * t2439 - (-t2013 * t2170 + (-t1916 * t2022 * t2369 + (t2028 * t2479 + t2006) * t2013) * t2431) * t1867 * t2250 + t2490 * t2387 * t2427;
t2469 = pkin(6) * t1760;
t2426 = t1849 * t1853;
t1761 = -t1777 * t1853 * t2350 * t2438 - (-t2013 * t2168 + (-t1917 * t2024 * t2369 + (t2030 * t2479 + t2007) * t2013) * t2430) * t1869 * t2248 + t2491 * t2387 * t2426;
t2468 = pkin(6) * t1761;
t2425 = t1850 * t1854;
t1762 = -t1778 * t1854 * t2350 * t2437 - (-t2013 * t2166 + (-t1918 * t2026 * t2369 + (t2032 * t2479 + t2008) * t2013) * t2429) * t1871 * t2246 + t2492 * t2387 * t2425;
t2467 = pkin(6) * t1762;
t1785 = t2178 - t2435;
t2162 = t2017 * t2258;
t2237 = t2011 * t2348;
t2278 = t2017 * t2440;
t1755 = (-((t2011 * t2278 + t2013 * t2258) * t2478 + ((-t2259 + t2277) * t2015 + pkin(2) * t2278) * t2382 + t1785 * t2013) * t2440 - (t2011 * t2162 + (t2002 * t2013 - t2014 * t2237 - t2013) * t2440) * t2435 + t2489 * t2009 * t2079) * t1851;
t2459 = t1755 * t1851;
t2458 = t1756 * t1852;
t2457 = t1757 * t1853;
t2456 = t1758 * t1854;
t2384 = t2011 * t2014;
t2091 = pkin(3) * t2384 - t2013 * t2496;
t1855 = -t1946 * t2010 + t2012 * t2091;
t1920 = t2010 * t2017 + t2012 * t2361;
t2383 = t2011 * t2015;
t1823 = (t1920 * t1992 + t1988 * t2383) * t2478 + (-t1855 * t1992 + t1903 * t1988) * t2016 + (t1988 * t2013 - t1992 * t2385) * t2483;
t1824 = -(t1920 * t1988 - t1992 * t2383) * t2478 + (t1855 * t1988 + t1903 * t1992) * t2016 + (t1988 * t2385 + t1992 * t2013) * t2483;
t2279 = t2016 * t2440;
t1763 = (t1775 * t2279 + (pkin(2) * t2258 - t1785 * t2016) * t2435 + (t1823 * t2111 - t1824 * t1933) * t2009) * t1851;
t2455 = t1763 * t1851;
t2454 = t1763 * t2015;
t2453 = t1763 * t2017;
t2452 = t1764 * t1852;
t2451 = t1764 * t2023;
t2450 = t1764 * t2029;
t2449 = t1765 * t1853;
t2448 = t1765 * t2025;
t2447 = t1765 * t2031;
t2446 = t1766 * t1854;
t2445 = t1766 * t2027;
t2444 = t1766 * t2033;
t1780 = t1984 * t1804;
t2443 = t1780 * t1848;
t1781 = t1985 * t1805;
t2442 = t1781 * t1849;
t1782 = t1986 * t1806;
t2441 = t1782 * t1850;
t2436 = t1816 ^ 2 / t1881 ^ 2;
t2434 = t1820 ^ 2 / t1888 ^ 2;
t2433 = t1821 ^ 2 / t1889 ^ 2;
t2432 = t1822 ^ 2 / t1890 ^ 2;
t2424 = t1851 * t2079;
t2423 = t1851 * t1992;
t2422 = t1851 * t2014;
t1864 = t1934 * t1993 - t2110 * t1989;
t2420 = t1852 * t1864;
t2419 = t1852 * t1989;
t2418 = t1852 * t1993;
t2417 = t1852 * t2022;
t1865 = t1935 * t1994 - t2109 * t1990;
t2415 = t1853 * t1865;
t2414 = t1853 * t1990;
t2413 = t1853 * t1994;
t2412 = t1853 * t2024;
t1866 = t1936 * t1995 - t2108 * t1991;
t2410 = t1854 * t1866;
t2409 = t1854 * t1991;
t2408 = t1854 * t1995;
t2407 = t1854 * t2026;
t2405 = t2079 * t1988;
t2404 = t2079 * t1992;
t2403 = t1894 * t1989;
t2402 = t1894 * t1993;
t2401 = t1896 * t1990;
t2400 = t1896 * t1994;
t2399 = t1898 * t1991;
t2398 = t1898 * t1995;
t2389 = t1999 * t2009;
t2388 = t2000 * t2009;
t2368 = t2012 * t2013;
t2367 = t2012 * t2016;
t2366 = t2012 * t2028;
t2365 = t2012 * t2030;
t2364 = t2012 * t2032;
t2349 = t2014 * t2015;
t2347 = t2017 * t1755;
t2346 = t2022 * t2023;
t2344 = t2024 * t2025;
t2341 = t2026 * t2027;
t2339 = t2029 * t1756;
t2338 = t2031 * t1757;
t2337 = t2033 * t1758;
t1747 = t1759 * t2013 + t2011 * t2347;
t2050 = 0.1e1 / pkin(3) ^ 2;
t2260 = t2050 * t2436;
t1792 = t1803 + t2260;
t2078 = -0.2e1 * t2162 * t2440;
t2163 = t2013 * t2260;
t2336 = -t1747 * t2014 - t1759 * t2237 + (t1792 * t2349 + t2016 * t2078) * t2011 - t2016 * t2163;
t2335 = t1747 * t2016 - t2014 * t2163 + (-t1759 * t2349 - t1792 * t2348 + t2014 * t2078) * t2011;
t1749 = t1760 * t2013 + t2011 * t2339;
t2256 = t2050 * t2434;
t1796 = t1804 + t2256;
t2144 = -0.2e1 * t2171;
t2077 = t2029 * t2049 * t2144;
t2159 = t2013 * t2256;
t2334 = -t1749 * t2022 - t1760 * t2236 + (t1796 * t2346 + t2028 * t2077) * t2011 - t2028 * t2159;
t1750 = t1761 * t2013 + t2011 * t2338;
t2254 = t2050 * t2433;
t1797 = t1805 + t2254;
t2142 = -0.2e1 * t2169;
t2076 = t2031 * t2049 * t2142;
t2156 = t2013 * t2254;
t2333 = -t1750 * t2024 - t1761 * t2235 + (t1797 * t2344 + t2030 * t2076) * t2011 - t2030 * t2156;
t1751 = t1762 * t2013 + t2011 * t2337;
t2252 = t2050 * t2432;
t1798 = t1806 + t2252;
t2140 = -0.2e1 * t2167;
t2075 = t2033 * t2049 * t2140;
t2153 = t2013 * t2252;
t2332 = -t1751 * t2026 - t1762 * t2234 + (t1798 * t2341 + t2032 * t2075) * t2011 - t2032 * t2153;
t2331 = t1749 * t2028 - t2022 * t2159 + (-t1760 * t2346 - t1796 * t2345 + t2022 * t2077) * t2011;
t2330 = t1750 * t2030 - t2024 * t2156 + (-t1761 * t2344 - t1797 * t2343 + t2024 * t2076) * t2011;
t2329 = t1751 * t2032 - t2026 * t2153 + (-t1762 * t2341 - t1798 * t2340 + t2026 * t2075) * t2011;
t2316 = t1755 * t2424;
t2315 = t2014 ^ 2 * t2459;
t2314 = t1755 * t2422;
t2313 = t1755 * t2421;
t2312 = t1894 * t2458;
t2003 = t2022 ^ 2;
t2311 = t2003 * t2458;
t2310 = t1756 * t2417;
t2309 = t1756 * t2416;
t2308 = t1896 * t2457;
t2004 = t2024 ^ 2;
t2307 = t2004 * t2457;
t2306 = t1757 * t2412;
t2305 = t1757 * t2411;
t2304 = t1898 * t2456;
t2005 = t2026 ^ 2;
t2303 = t2005 * t2456;
t2302 = t1758 * t2407;
t2301 = t1758 * t2406;
t2300 = t1759 * t2428;
t2299 = t1759 * t2422;
t2298 = t1759 * t2421;
t2297 = t1760 * t2427;
t2296 = t1760 * t2417;
t2295 = t1760 * t2416;
t2294 = t1761 * t2426;
t2293 = t1761 * t2412;
t2292 = t1761 * t2411;
t2291 = t1762 * t2425;
t2290 = t1762 * t2407;
t2289 = t1762 * t2406;
t2288 = t2079 * t2454;
t2287 = t2079 * t2453;
t2286 = t1894 * t2451;
t2285 = t1894 * t2450;
t2284 = t1896 * t2448;
t2283 = t1896 * t2447;
t2282 = t1898 * t2445;
t2281 = t1898 * t2444;
t2280 = t1851 * t1803;
t2275 = t1852 * t1804;
t2273 = t1853 * t1805;
t2271 = t1854 * t1806;
t2261 = t1851 * t2436;
t2257 = t1852 * t2434;
t2255 = t1853 * t2433;
t2253 = t1854 * t2432;
t1863 = t1933 * t1992 - t2111 * t1988;
t2245 = t1863 * t2424;
t2243 = t1894 * t2420;
t2241 = t1896 * t2415;
t2239 = t1898 * t2410;
t2233 = t2079 * t2324;
t1893 = -t1920 * t2014 - t2011 * t2367;
t2232 = -0.2e1 * t1893 * t2435;
t1900 = -t1924 * t2022 - t2011 * t2366;
t2229 = -0.2e1 * t1900 * t2431;
t1901 = -t1925 * t2024 - t2011 * t2365;
t2226 = -0.2e1 * t1901 * t2430;
t1902 = -t1926 * t2026 - t2011 * t2364;
t2223 = -0.2e1 * t1902 * t2429;
t2218 = pkin(6) * t2258;
t2214 = t1840 * t2314;
t2213 = t1840 * t2313;
t2212 = t2079 * t2315;
t2211 = t1755 * t2244;
t2210 = t1848 * t2310;
t2209 = t1848 * t2309;
t2208 = t1756 * t2243;
t2207 = t1894 * t2311;
t2206 = t1756 * t2242;
t2205 = t1849 * t2306;
t2204 = t1849 * t2305;
t2203 = t1757 * t2241;
t2202 = t1896 * t2307;
t2201 = t1757 * t2240;
t2200 = t1850 * t2302;
t2199 = t1850 * t2301;
t2198 = t1758 * t2239;
t2197 = t1898 * t2303;
t2196 = t1758 * t2238;
t2195 = t2079 * t2299;
t2194 = t2079 * t2298;
t2193 = t1760 * t2243;
t2192 = t1894 * t2296;
t2191 = t1894 * t2295;
t2190 = t1761 * t2241;
t2189 = t1896 * t2293;
t2188 = t1896 * t2292;
t2187 = t1762 * t2239;
t2186 = t1898 * t2290;
t2185 = t1898 * t2289;
t2184 = t1763 * t2245;
t2183 = t1764 * t2243;
t2182 = t1765 * t2241;
t2181 = t1766 * t2239;
t2180 = t2014 * t2280;
t2179 = t2016 * t2280;
t2177 = t2022 * t2275;
t2176 = t2028 * t2275;
t2175 = t2024 * t2273;
t2174 = t2030 * t2273;
t2173 = t2026 * t2271;
t2172 = t2032 * t2271;
t2165 = t2014 * t2261;
t2164 = t2016 * t2261;
t2161 = t2022 * t2257;
t2160 = t2028 * t2257;
t2158 = t2024 * t2255;
t2157 = t2030 * t2255;
t2155 = t2026 * t2253;
t2154 = t2032 * t2253;
t2148 = t1864 * t2242;
t2147 = t1865 * t2240;
t2146 = t1866 * t2238;
t2134 = t2079 * t2211;
t2133 = t1894 * t2206;
t2132 = t1896 * t2201;
t2131 = t1898 * t2196;
t2130 = t1840 * t2180;
t2129 = t1840 * t2179;
t2128 = t1848 * t2177;
t2127 = t1848 * t2176;
t2126 = t1849 * t2175;
t2125 = t1849 * t2174;
t2124 = t1850 * t2173;
t2123 = t1850 * t2172;
t2122 = t2079 * t2165;
t2121 = t2079 * t2164;
t2120 = t2243 * t2434;
t2119 = t1894 * t2161;
t2118 = t1894 * t2160;
t2117 = t2241 * t2433;
t2116 = t1896 * t2158;
t2115 = t1896 * t2157;
t2114 = t2239 * t2432;
t2113 = t1898 * t2155;
t2112 = t1898 * t2154;
t2107 = t1970 * t2385;
t2106 = t1973 * t2385;
t2105 = t1974 * t2385;
t2104 = t1975 * t2385;
t2103 = 0.2e1 * t2134;
t2102 = t2504 * t2145;
t2101 = t1894 * t2144;
t2100 = t1984 * t2143;
t2099 = t1896 * t2142;
t2098 = t1985 * t2141;
t2097 = t1898 * t2140;
t2096 = t1986 * t2139;
t2095 = t1755 * t2484 + t2011 * t2453;
t2094 = t1756 * t2484 + t1764 * t2374;
t2093 = t1757 * t2484 + t1765 * t2372;
t2092 = t1758 * t2484 + t1766 * t2370;
t2087 = -t2015 * t1755 - t2017 * t1803;
t2086 = -t2015 * t1803 + t2347;
t2085 = -t2023 * t1756 - t2029 * t1804;
t2084 = -t2023 * t1804 + t2339;
t2083 = -t2025 * t1757 - t2031 * t1805;
t2082 = -t2025 * t1805 + t2338;
t2081 = -t2027 * t1758 - t2033 * t1806;
t2080 = -t2027 * t1806 + t2337;
t1748 = pkin(6) * t1755 + t1763 * t2383;
t1733 = t1763 * t2013 * t2016 - t1748 * t2014;
t1783 = t2440 * t2483 + t2016 * t2218 / 0.2e1;
t2074 = t1733 * t1840 - t1783 * t2233;
t1734 = -t1748 * t2016 - t1763 * t2362;
t1784 = pkin(2) * t2279 - t2014 * t2218 / 0.2e1;
t2073 = t1734 * t1840 - t1784 * t2233;
t2066 = t1851 * t2074;
t2065 = t1851 * t2073;
t1779 = t2504 * t1803;
t2064 = t1779 * t1840 - t2079 * t2102;
t2063 = t1894 * t2100 - t2443;
t2062 = t1896 * t2098 - t2442;
t2061 = t1898 * t2096 - t2441;
t1931 = pkin(2) * t2010 - t2038 * t2368;
t1932 = pkin(2) * t2368 + t2010 * t2038;
t2056 = t1920 * t2478 + (t1931 * t2017 + t1932 * t2015) * t2016;
t2055 = t1924 * t2477 + (t1931 * t2029 + t1932 * t2023) * t2028;
t2054 = t1925 * t2476 + (t1931 * t2031 + t1932 * t2025) * t2030;
t2053 = t1926 * t2475 + (t1931 * t2033 + t1932 * t2027) * t2032;
t2052 = t1851 * t2064;
t1847 = (t2010 * t2027 - t2012 * t2352) * t2471 - t1952 * t2368 + t2493 * t2010;
t1846 = (t2010 * t2025 - t2012 * t2353) * t2472 - t1951 * t2368 + t2494 * t2010;
t1845 = (t2010 * t2023 - t2012 * t2354) * t2473 - t1950 * t2368 + t2495 * t2010;
t1839 = (t2010 * t2015 - t2012 * t2360) * t2474 - t1946 * t2368 + t2496 * t2010;
t1834 = -t1923 * t2475 + t1952 * t2364 + (pkin(2) * t2377 + t2032 * t2088) * t2010;
t1833 = -t1922 * t2476 + t1951 * t2365 + (pkin(2) * t2379 + t2030 * t2089) * t2010;
t1832 = -t1921 * t2477 + t1950 * t2366 + (pkin(2) * t2381 + t2028 * t2090) * t2010;
t1831 = -t1919 * t2478 + t1946 * t2367 + (pkin(2) * t2384 + t2016 * t2091) * t2010;
t1802 = ((-t1936 * t2053 - t2108 * t2512 + (t1936 * t2104 - t2108 * t2500) * t2026) * t1995 + (-t1936 * t2512 + t2108 * t2053 + (-t1936 * t2500 - t2104 * t2108) * t2026) * t1991) * t1871;
t1801 = ((-t2054 * t1935 - t2109 * t2511 + (t1935 * t2105 - t2109 * t2501) * t2024) * t1994 + (-t1935 * t2511 + t2109 * t2054 + (-t1935 * t2501 - t2105 * t2109) * t2024) * t1990) * t1869;
t1800 = ((-t2055 * t1934 - t2110 * t2510 + (t1934 * t2106 - t2110 * t2502) * t2022) * t1993 + (-t1934 * t2510 + t2110 * t2055 + (-t1934 * t2502 - t2106 * t2110) * t2022) * t1989) * t1867;
t1799 = ((-t2056 * t1933 - t2111 * t2509 + (t1933 * t2107 - t2111 * t2503) * t2014) * t1992 + (-t1933 * t2509 + t2056 * t2111 + (-t1933 * t2503 - t2107 * t2111) * t2014) * t1988) * t1859;
t1740 = -t2026 * t2467 + t2032 * t2092;
t1739 = -t2026 * t2092 - t2032 * t2467;
t1738 = -t2024 * t2468 + t2030 * t2093;
t1737 = -t2024 * t2093 - t2030 * t2468;
t1736 = -t2022 * t2469 + t2028 * t2094;
t1735 = -t2022 * t2094 - t2028 * t2469;
t1726 = -t2014 * t2470 + t2016 * t2095;
t1725 = -t2014 * t2095 - t2016 * t2470;
t1 = [t1823 * t2455 + t1825 * t2452 + t1826 * t2449 + t1827 * t2446, -t1992 * t2316 - t1993 * t2312 - t1994 * t2308 - t1995 * t2304, ((t1827 * t2080 - t1995 * t2281) * t1854 + (t1826 * t2082 - t1994 * t2283) * t1853 + (t1825 * t2084 - t1993 * t2285) * t1852 + (t1823 * t2086 - t1992 * t2287) * t1851) * t2011, ((t1827 * t2081 + t1995 * t2282) * t1854 + (t1826 * t2083 + t1994 * t2284) * t1853 + (t1825 * t2085 + t1993 * t2286) * t1852 + (t1823 * t2087 + t1992 * t2288) * t1851) * t2011, -t1992 * t2212 - t1993 * t2207 - t1994 * t2202 - t1995 * t2197 + (t1992 * t2051 - t1993 * t2497 - t1994 * t2498 - t1995 * t2499) * t2049, -0.2e1 * t1992 * t2134 - 0.2e1 * t1993 * t2133 - 0.2e1 * t1994 * t2132 - 0.2e1 * t1995 * t2131 + (-t2061 * t2408 - t2062 * t2413 - t2063 * t2418 + t2064 * t2423) * t2049, -t1992 * t2195 - t1993 * t2192 - t1994 * t2189 - t1995 * t2186 + (-t1992 * t2121 - t1993 * t2118 - t1994 * t2115 - t1995 * t2112) * t2050 + (-t1992 * t2214 - t1993 * t2210 - t1994 * t2205 - t1995 * t2200) * t2049, -t1992 * t2194 - t1993 * t2191 - t1994 * t2188 - t1995 * t2185 + (t1992 * t2122 + t1993 * t2119 + t1994 * t2116 + t1995 * t2113) * t2050 + (-t1992 * t2213 - t1993 * t2209 - t1994 * t2204 - t1995 * t2199) * t2049, (-t1992 * t2300 - t1993 * t2297 - t1994 * t2294 - t1995 * t2291) * t2049, (-t1740 * t2398 + t1827 * t2329) * t1854 + (-t1738 * t2400 + t1826 * t2330) * t1853 + (-t1736 * t2402 + t1825 * t2331) * t1852 + (-t1726 * t2404 + t1823 * t2335) * t1851 + (t2070 * t2408 + t2071 * t2413 + t2072 * t2418 - t2074 * t2423 + (-t1992 * t2130 - t1993 * t2128 - t1994 * t2126 - t1995 * t2124) * pkin(2)) * t2049, (-t1739 * t2398 + t1827 * t2332) * t1854 + (-t1737 * t2400 + t1826 * t2333) * t1853 + (-t1735 * t2402 + t1825 * t2334) * t1852 + (-t1725 * t2404 + t1823 * t2336) * t1851 + (t2067 * t2408 + t2068 * t2413 + t2069 * t2418 - t2073 * t2423 + (-t1992 * t2129 - t1993 * t2127 - t1994 * t2125 - t1995 * t2123) * pkin(2)) * t2049, 0, -t2388, t2389, 0; t1824 * t2455 + t1828 * t2452 + t1829 * t2449 + t1830 * t2446, t1988 * t2316 + t1989 * t2312 + t1990 * t2308 + t1991 * t2304, ((t1830 * t2080 + t1991 * t2281) * t1854 + (t1829 * t2082 + t1990 * t2283) * t1853 + (t1828 * t2084 + t1989 * t2285) * t1852 + (t1824 * t2086 + t1988 * t2287) * t1851) * t2011, ((t1830 * t2081 - t1991 * t2282) * t1854 + (t1829 * t2083 - t1990 * t2284) * t1853 + (t1828 * t2085 - t1989 * t2286) * t1852 + (t1824 * t2087 - t1988 * t2288) * t1851) * t2011, t1988 * t2212 + t1989 * t2207 + t1990 * t2202 + t1991 * t2197 + (-t1988 * t2051 + t1989 * t2497 + t1990 * t2498 + t1991 * t2499) * t2049, t1988 * t2103 + 0.2e1 * t1989 * t2133 + 0.2e1 * t1990 * t2132 + 0.2e1 * t1991 * t2131 + (-t1988 * t2052 + t2061 * t2409 + t2062 * t2414 + t2063 * t2419) * t2049, t1988 * t2195 + t1989 * t2192 + t1990 * t2189 + t1991 * t2186 + (t1988 * t2121 + t1989 * t2118 + t1990 * t2115 + t1991 * t2112) * t2050 + (t1988 * t2214 + t1989 * t2210 + t1990 * t2205 + t1991 * t2200) * t2049, t1988 * t2194 + t1989 * t2191 + t1990 * t2188 + t1991 * t2185 + (-t1988 * t2122 - t1989 * t2119 - t1990 * t2116 - t1991 * t2113) * t2050 + (t1988 * t2213 + t1989 * t2209 + t1990 * t2204 + t1991 * t2199) * t2049, (t1988 * t2300 + t1989 * t2297 + t1990 * t2294 + t1991 * t2291) * t2049, (t1740 * t2399 + t1830 * t2329) * t1854 + (t1738 * t2401 + t1829 * t2330) * t1853 + (t1736 * t2403 + t1828 * t2331) * t1852 + (t1726 * t2405 + t1824 * t2335) * t1851 + (-t2070 * t2409 - t2071 * t2414 - t2072 * t2419 + t1988 * t2066 + (t1988 * t2130 + t1989 * t2128 + t1990 * t2126 + t1991 * t2124) * pkin(2)) * t2049, (t1739 * t2399 + t1830 * t2332) * t1854 + (t1737 * t2401 + t1829 * t2333) * t1853 + (t1735 * t2403 + t1828 * t2334) * t1852 + (t1725 * t2405 + t1824 * t2336) * t1851 + (-t2067 * t2409 - t2068 * t2414 - t2069 * t2419 + t1988 * t2065 + (t1988 * t2129 + t1989 * t2127 + t1990 * t2125 + t1991 * t2123) * pkin(2)) * t2049, 0, -t2389, -t2388, 0; t1831 * t2455 + t1832 * t2452 + t1833 * t2449 + t1834 * t2446, t1893 * t2459 + t1900 * t2458 + t1901 * t2457 + t1902 * t2456, ((t1834 * t2080 + t1902 * t2444) * t1854 + (t1833 * t2082 + t1901 * t2447) * t1853 + (t1832 * t2084 + t1900 * t2450) * t1852 + (t1831 * t2086 + t1893 * t2453) * t1851) * t2011, ((t1834 * t2081 - t1902 * t2445) * t1854 + (t1833 * t2083 - t1901 * t2448) * t1853 + (t1832 * t2085 - t1900 * t2451) * t1852 + (t1831 * t2087 - t1893 * t2454) * t1851) * t2011, t1893 * t2315 + t1900 * t2311 + t1901 * t2307 + t1902 * t2303 + ((-t1806 * t1847 + t1902 * t2139) * t2238 + (-t1805 * t1846 + t1901 * t2141) * t2240 + (-t1804 * t1845 + t1900 * t2143) * t2242 + (-t1803 * t1839 + t1893 * t2145) * t2244) * t2049, 0.2e1 * t1893 * t2211 + 0.2e1 * t1900 * t2206 + 0.2e1 * t1901 * t2201 + 0.2e1 * t1902 * t2196 + ((-t1847 * t1782 + t1902 * t2096) * t1854 + (-t1846 * t1781 + t1901 * t2098) * t1853 + (-t1845 * t1780 + t1900 * t2100) * t1852 + (-t1839 * t1779 + t1893 * t2102) * t1851) * t2049, t1893 * t2299 + t1900 * t2296 + t1901 * t2293 + t1902 * t2290 + (t1893 * t2164 + t1900 * t2160 + t1901 * t2157 + t1902 * t2154) * t2050 + (t1839 * t2314 + t1845 * t2310 + t1846 * t2306 + t1847 * t2302) * t2049, t1893 * t2298 + t1900 * t2295 + t1901 * t2292 + t1902 * t2289 + (-t1893 * t2165 - t1900 * t2161 - t1901 * t2158 - t1902 * t2155) * t2050 + (t1839 * t2313 + t1845 * t2309 + t1846 * t2305 + t1847 * t2301) * t2049, (t1759 * t1839 * t1851 + t1760 * t1845 * t1852 + t1761 * t1846 * t1853 + t1762 * t1847 * t1854) * t2049, (t1902 * t1740 + t1834 * t2329) * t1854 + (t1901 * t1738 + t1833 * t2330) * t1853 + (t1900 * t1736 + t1832 * t2331) * t1852 + (t1893 * t1726 + t1831 * t2335) * t1851 + ((t1847 * t1743 + t1788 * t2223) * t1854 + (t1846 * t1742 + t1787 * t2226) * t1853 + (t1845 * t1741 + t1786 * t2229) * t1852 + (t1839 * t1733 + t1783 * t2232) * t1851 + (t1839 * t2180 + t1845 * t2177 + t1846 * t2175 + t1847 * t2173) * pkin(2)) * t2049, (t1902 * t1739 + t1834 * t2332) * t1854 + (t1901 * t1737 + t1833 * t2333) * t1853 + (t1900 * t1735 + t1832 * t2334) * t1852 + (t1893 * t1725 + t1831 * t2336) * t1851 + ((t1847 * t1746 + t1791 * t2223) * t1854 + (t1846 * t1745 + t1790 * t2226) * t1853 + (t1845 * t1744 + t1789 * t2229) * t1852 + (t1839 * t1734 + t1784 * t2232) * t1851 + (t1839 * t2179 + t1845 * t2176 + t1846 * t2174 + t1847 * t2172) * pkin(2)) * t2049, 0, 0, 0, 0; t1763 * t1799 + t1764 * t1800 + t1765 * t1801 + t1766 * t1802, t1755 * t2245 + t2198 + t2203 + t2208, (t1799 * t2086 + t1800 * t2084 + t1801 * t2082 + t1802 * t2080 + t2017 * t2184 + t2029 * t2183 + t2031 * t2182 + t2033 * t2181) * t2011, (t1799 * t2087 + t1800 * t2085 + t1801 * t2083 + t1802 * t2081 - t2015 * t2184 - t2023 * t2183 - t2025 * t2182 - t2027 * t2181) * t2011, t1863 * t2212 + t2003 * t2208 + t2004 * t2203 + t2005 * t2198 + ((-t2097 - t2272) * t2146 + (-t2099 - t2274) * t2147 + (-t2101 - t2276) * t2148 - t1863 * t2051) * t2049, t1863 * t2103 + t1756 * t2148 * t2522 + t1757 * t2147 * t2521 + t1758 * t2146 * t2520 + ((-t1986 * t2097 - t2441) * t2410 + (-t1985 * t2099 - t2442) * t2415 + (-t1984 * t2101 - t2443) * t2420 - t1863 * t2052) * t2049, t1863 * t2195 + t2022 * t2193 + t2024 * t2190 + t2026 * t2187 + (t1863 * t2121 + t2028 * t2120 + t2030 * t2117 + t2032 * t2114) * t2050 + (t1863 * t2214 + t1864 * t2210 + t1865 * t2205 + t1866 * t2200) * t2049, t1863 * t2194 + t2028 * t2193 + t2030 * t2190 + t2032 * t2187 + (-t1863 * t2122 - t2022 * t2120 - t2024 * t2117 - t2026 * t2114) * t2050 + (t1863 * t2213 + t1864 * t2209 + t1865 * t2204 + t1866 * t2199) * t2049, (t1863 * t2300 + t1864 * t2297 + t1865 * t2294 + t1866 * t2291) * t2049, t1726 * t2245 + t1736 * t2243 + t1738 * t2241 + t1740 * t2239 + t2329 * t1802 + t2330 * t1801 + t2331 * t1800 + t2335 * t1799 + (-t2070 * t2410 - t2071 * t2415 - t2072 * t2420 + t1863 * t2066 + (t1863 * t2130 + t1864 * t2128 + t1865 * t2126 + t1866 * t2124) * pkin(2)) * t2049, t1725 * t2245 + t1735 * t2243 + t1737 * t2241 + t1739 * t2239 + t2332 * t1802 + t2333 * t1801 + t2334 * t1800 + t2336 * t1799 + (-t2067 * t2410 - t2068 * t2415 - t2069 * t2420 + t1863 * t2065 + (t1863 * t2129 + t1864 * t2127 + t1865 * t2125 + t1866 * t2123) * pkin(2)) * t2049, 0, 0, 0, 0;];
tau_reg  = t1;
