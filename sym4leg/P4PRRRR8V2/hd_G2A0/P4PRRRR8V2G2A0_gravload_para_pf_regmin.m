% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:22
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V2G2A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:19:42
% EndTime: 2020-08-07 11:19:47
% DurationCPUTime: 5.74s
% Computational Cost: add. (2113->374), mult. (4920->744), div. (148->9), fcn. (5124->30), ass. (0->300)
t2668 = sin(pkin(4));
t2689 = cos(qJ(3,1));
t2684 = sin(qJ(2,1));
t2852 = pkin(3) * t2689 ^ 2;
t2769 = t2684 * t2852;
t2690 = cos(qJ(2,1));
t2691 = pkin(7) + pkin(6);
t2864 = pkin(2) * t2684 - t2690 * t2691;
t2877 = (t2689 * t2864 + t2769) * t2668;
t2687 = cos(qJ(3,2));
t2682 = sin(qJ(2,2));
t2853 = pkin(3) * t2687 ^ 2;
t2770 = t2682 * t2853;
t2688 = cos(qJ(2,2));
t2865 = pkin(2) * t2682 - t2688 * t2691;
t2876 = (t2687 * t2865 + t2770) * t2668;
t2685 = cos(qJ(3,3));
t2680 = sin(qJ(2,3));
t2854 = pkin(3) * t2685 ^ 2;
t2771 = t2680 * t2854;
t2686 = cos(qJ(2,3));
t2866 = pkin(2) * t2680 - t2686 * t2691;
t2875 = (t2685 * t2866 + t2771) * t2668;
t2673 = cos(qJ(3,4));
t2672 = sin(qJ(2,4));
t2855 = pkin(3) * t2673 ^ 2;
t2772 = t2672 * t2855;
t2674 = cos(qJ(2,4));
t2867 = pkin(2) * t2672 - t2674 * t2691;
t2874 = (t2673 * t2867 + t2772) * t2668;
t2669 = cos(pkin(8));
t2670 = cos(pkin(4));
t2815 = t2669 * t2670;
t2622 = -t2668 * g(1) + g(2) * t2815;
t2623 = g(1) * t2815 + t2668 * g(2);
t2676 = legFrame(3,2);
t2651 = sin(t2676);
t2655 = cos(t2676);
t2629 = t2655 * g(1) - t2651 * g(2);
t2667 = sin(pkin(8));
t2822 = t2667 * t2670;
t2642 = g(3) * t2822;
t2648 = g(3) * t2669;
t2535 = (t2622 * t2651 - t2623 * t2655 + t2642) * t2686 + t2680 * (t2629 * t2667 + t2648);
t2679 = sin(qJ(3,3));
t2873 = t2535 * t2679;
t2677 = legFrame(2,2);
t2652 = sin(t2677);
t2656 = cos(t2677);
t2630 = t2656 * g(1) - t2652 * g(2);
t2536 = (t2622 * t2652 - t2623 * t2656 + t2642) * t2688 + t2682 * (t2630 * t2667 + t2648);
t2681 = sin(qJ(3,2));
t2872 = t2536 * t2681;
t2678 = legFrame(1,2);
t2653 = sin(t2678);
t2657 = cos(t2678);
t2631 = t2657 * g(1) - t2653 * g(2);
t2537 = (t2622 * t2653 - t2623 * t2657 + t2642) * t2690 + t2684 * (t2631 * t2667 + t2648);
t2683 = sin(qJ(3,1));
t2871 = t2537 * t2683;
t2870 = t2535 * t2685;
t2869 = t2536 * t2687;
t2868 = t2537 * t2689;
t2848 = t2689 * pkin(3);
t2765 = pkin(2) + t2848;
t2721 = t2670 * t2765;
t2849 = t2687 * pkin(3);
t2766 = pkin(2) + t2849;
t2722 = t2670 * t2766;
t2850 = t2685 * pkin(3);
t2767 = pkin(2) + t2850;
t2723 = t2670 * t2767;
t2851 = t2673 * pkin(3);
t2768 = pkin(2) + t2851;
t2724 = t2670 * t2768;
t2671 = sin(qJ(3,4));
t2859 = pkin(2) * t2671;
t2858 = pkin(2) * t2679;
t2857 = pkin(2) * t2681;
t2856 = pkin(2) * t2683;
t2814 = t2670 * t2671;
t2584 = pkin(3) * t2814 + t2668 * t2867;
t2554 = 0.1e1 / (pkin(2) * t2814 + t2584 * t2673 + t2668 * t2772);
t2675 = legFrame(4,2);
t2650 = sin(t2675);
t2654 = cos(t2675);
t2628 = t2654 * g(1) - t2650 * g(2);
t2847 = ((t2622 * t2650 - t2623 * t2654 + t2642) * t2674 + t2672 * (t2628 * t2667 + t2648)) * t2554;
t2812 = t2670 * t2674;
t2589 = t2667 * t2672 - t2669 * t2812;
t2635 = pkin(2) * t2674 + t2672 * t2691;
t2846 = (t2589 * t2851 - t2635 * t2815 + t2667 * t2867) * t2554;
t2811 = t2670 * t2679;
t2585 = pkin(3) * t2811 + t2668 * t2866;
t2555 = 0.1e1 / (pkin(2) * t2811 + t2585 * t2685 + t2668 * t2771);
t2805 = t2670 * t2686;
t2597 = t2667 * t2680 - t2669 * t2805;
t2639 = pkin(2) * t2686 + t2680 * t2691;
t2845 = (t2597 * t2850 - t2639 * t2815 + t2667 * t2866) * t2555;
t2809 = t2670 * t2681;
t2586 = pkin(3) * t2809 + t2668 * t2865;
t2556 = 0.1e1 / (pkin(2) * t2809 + t2586 * t2687 + t2668 * t2770);
t2804 = t2670 * t2688;
t2598 = t2667 * t2682 - t2669 * t2804;
t2640 = pkin(2) * t2688 + t2682 * t2691;
t2844 = (t2598 * t2849 - t2640 * t2815 + t2667 * t2865) * t2556;
t2807 = t2670 * t2683;
t2587 = pkin(3) * t2807 + t2668 * t2864;
t2557 = 0.1e1 / (pkin(2) * t2807 + t2587 * t2689 + t2668 * t2769);
t2803 = t2670 * t2690;
t2599 = t2667 * t2684 - t2669 * t2803;
t2641 = pkin(2) * t2690 + t2684 * t2691;
t2843 = (t2599 * t2848 - t2641 * t2815 + t2667 * t2864) * t2557;
t2692 = xP(4);
t2661 = sin(t2692);
t2662 = cos(t2692);
t2693 = koppelP(4,2);
t2697 = koppelP(4,1);
t2614 = t2661 * t2697 + t2662 * t2693;
t2618 = -t2661 * t2693 + t2662 * t2697;
t2563 = t2614 * t2654 + t2650 * t2618;
t2842 = t2554 * t2563;
t2813 = t2670 * t2672;
t2590 = t2667 * t2674 + t2669 * t2813;
t2798 = t2673 * t2668;
t2571 = -t2671 * t2590 - t2669 * t2798;
t2841 = t2554 * t2571;
t2624 = t2650 * g(1) + t2654 * g(2);
t2840 = t2554 * t2624;
t2839 = t2554 * t2650;
t2838 = t2554 * t2654;
t2694 = koppelP(3,2);
t2698 = koppelP(3,1);
t2615 = t2661 * t2698 + t2662 * t2694;
t2619 = -t2661 * t2694 + t2662 * t2698;
t2837 = t2555 * (t2615 * t2655 + t2651 * t2619);
t2810 = t2670 * t2680;
t2600 = t2667 * t2686 + t2669 * t2810;
t2781 = t2685 * t2668;
t2578 = -t2679 * t2600 - t2669 * t2781;
t2836 = t2555 * t2578;
t2625 = t2651 * g(1) + t2655 * g(2);
t2835 = t2555 * t2625;
t2834 = t2555 * t2651;
t2833 = t2555 * t2655;
t2695 = koppelP(2,2);
t2699 = koppelP(2,1);
t2616 = t2661 * t2699 + t2662 * t2695;
t2620 = -t2661 * t2695 + t2662 * t2699;
t2832 = t2556 * (t2616 * t2656 + t2652 * t2620);
t2808 = t2670 * t2682;
t2601 = t2667 * t2688 + t2669 * t2808;
t2778 = t2687 * t2668;
t2579 = -t2681 * t2601 - t2669 * t2778;
t2831 = t2556 * t2579;
t2626 = t2652 * g(1) + t2656 * g(2);
t2830 = t2556 * t2626;
t2829 = t2556 * t2652;
t2828 = t2556 * t2656;
t2696 = koppelP(1,2);
t2700 = koppelP(1,1);
t2617 = t2661 * t2700 + t2662 * t2696;
t2621 = -t2661 * t2696 + t2662 * t2700;
t2827 = t2557 * (t2617 * t2657 + t2653 * t2621);
t2806 = t2670 * t2684;
t2602 = t2667 * t2690 + t2669 * t2806;
t2775 = t2689 * t2668;
t2580 = -t2602 * t2683 - t2669 * t2775;
t2826 = t2557 * t2580;
t2627 = t2653 * g(1) + t2657 * g(2);
t2825 = t2557 * t2627;
t2824 = t2557 * t2653;
t2823 = t2557 * t2657;
t2821 = t2668 * t2669;
t2820 = t2668 * t2672;
t2819 = t2668 * t2680;
t2818 = t2668 * t2682;
t2817 = t2668 * t2683;
t2816 = t2668 * t2684;
t2802 = t2671 * t2668;
t2801 = t2671 * t2672;
t2800 = t2671 * t2674;
t2799 = t2672 * t2673;
t2797 = t2673 * t2674;
t2795 = t2679 * t2668;
t2794 = t2679 * t2680;
t2793 = t2679 * t2686;
t2791 = t2680 * t2685;
t2790 = t2681 * t2668;
t2789 = t2681 * t2682;
t2788 = t2681 * t2688;
t2786 = t2682 * t2687;
t2785 = t2683 * t2684;
t2784 = t2683 * t2690;
t2782 = t2684 * t2689;
t2780 = t2685 * t2686;
t2777 = t2687 * t2688;
t2774 = t2689 * t2690;
t2764 = t2671 * t2847;
t2763 = t2673 * t2847;
t2762 = t2555 * t2873;
t2761 = t2556 * t2872;
t2760 = t2557 * t2871;
t2759 = t2555 * t2870;
t2758 = t2556 * t2869;
t2757 = t2557 * t2868;
t2591 = t2667 * t2812 + t2669 * t2672;
t2547 = t2591 * t2851 + t2635 * t2822 + t2669 * t2867;
t2756 = t2547 * t2842;
t2755 = t2547 * t2839;
t2754 = t2547 * t2838;
t2603 = t2667 * t2805 + t2669 * t2680;
t2551 = t2603 * t2850 + t2639 * t2822 + t2669 * t2866;
t2753 = t2551 * t2837;
t2752 = t2551 * t2834;
t2751 = t2551 * t2833;
t2604 = t2667 * t2804 + t2669 * t2682;
t2552 = t2604 * t2849 + t2640 * t2822 + t2669 * t2865;
t2750 = t2552 * t2832;
t2749 = t2552 * t2829;
t2748 = t2552 * t2828;
t2605 = t2667 * t2803 + t2669 * t2684;
t2553 = t2605 * t2848 + t2641 * t2822 + t2669 * t2864;
t2747 = t2553 * t2827;
t2746 = t2553 * t2824;
t2745 = t2553 * t2823;
t2588 = t2667 * t2813 - t2669 * t2674;
t2570 = -t2588 * t2671 - t2667 * t2798;
t2744 = t2570 * t2842;
t2743 = t2570 * t2839;
t2742 = t2570 * t2838;
t2594 = t2667 * t2810 - t2669 * t2686;
t2572 = t2679 * t2594 + t2667 * t2781;
t2741 = t2572 * t2837;
t2740 = t2572 * t2834;
t2739 = t2572 * t2833;
t2595 = t2667 * t2808 - t2669 * t2688;
t2574 = t2681 * t2595 + t2667 * t2778;
t2738 = t2574 * t2832;
t2737 = t2574 * t2829;
t2736 = t2574 * t2828;
t2596 = t2667 * t2806 - t2669 * t2690;
t2576 = t2683 * t2596 + t2667 * t2775;
t2735 = t2576 * t2827;
t2734 = t2576 * t2824;
t2733 = t2576 * t2823;
t2732 = t2570 * t2764;
t2731 = t2570 * t2763;
t2730 = t2572 * t2762;
t2729 = t2574 * t2761;
t2728 = t2576 * t2760;
t2727 = t2572 * t2759;
t2726 = t2574 * t2758;
t2725 = t2576 * t2757;
t2716 = t2768 * t2821;
t2715 = t2767 * t2821;
t2714 = t2766 * t2821;
t2713 = t2765 * t2821;
t2712 = pkin(3) * t2802 - t2670 * t2867;
t2711 = pkin(3) * t2795 - t2670 * t2866;
t2710 = pkin(3) * t2790 - t2670 * t2865;
t2709 = pkin(3) * t2817 - t2670 * t2864;
t2612 = t2667 * pkin(2) - t2691 * t2815;
t2613 = pkin(2) * t2815 + t2667 * t2691;
t2705 = t2590 * t2855 + (t2612 * t2674 + t2613 * t2672) * t2673;
t2704 = t2600 * t2854 + (t2612 * t2686 + t2613 * t2680) * t2685;
t2703 = t2601 * t2853 + (t2612 * t2688 + t2613 * t2682) * t2687;
t2702 = t2602 * t2852 + (t2612 * t2690 + t2613 * t2684) * t2689;
t2701 = 0.1e1 / pkin(3);
t2633 = t2662 * g(1) + t2661 * g(2);
t2632 = t2661 * g(1) - t2662 * g(2);
t2611 = t2670 * t2782 - t2817;
t2610 = t2670 * t2786 - t2790;
t2609 = t2670 * t2791 - t2795;
t2608 = t2670 * t2785 + t2775;
t2607 = t2670 * t2789 + t2778;
t2606 = t2670 * t2794 + t2781;
t2593 = t2670 * t2799 - t2802;
t2592 = t2670 * t2801 + t2798;
t2561 = -t2641 * t2667 + t2709 * t2669;
t2560 = -t2640 * t2667 + t2710 * t2669;
t2559 = -t2639 * t2667 + t2711 * t2669;
t2558 = -t2635 * t2667 + t2712 * t2669;
t2545 = -g(3) * t2596 + t2631 * t2602 + t2627 * t2816;
t2544 = -g(3) * t2595 + t2630 * t2601 + t2626 * t2818;
t2543 = -g(3) * t2594 + t2629 * t2600 + t2625 * t2819;
t2542 = -t2627 * t2668 * t2690 + g(3) * t2605 + t2631 * t2599;
t2541 = -t2626 * t2668 * t2688 + g(3) * t2604 + t2630 * t2598;
t2540 = -t2625 * t2668 * t2686 + g(3) * t2603 + t2629 * t2597;
t2539 = -g(3) * t2588 + t2628 * t2590 + t2624 * t2820;
t2538 = -t2624 * t2668 * t2674 + g(3) * t2591 + t2628 * t2589;
t2530 = (-t2611 * t2667 + t2669 * t2774) * g(3) + t2631 * (t2611 * t2669 + t2667 * t2774) + t2627 * (t2684 * t2775 + t2807);
t2529 = (-t2610 * t2667 + t2669 * t2777) * g(3) + t2630 * (t2610 * t2669 + t2667 * t2777) + t2626 * (t2682 * t2778 + t2809);
t2528 = (-t2609 * t2667 + t2669 * t2780) * g(3) + t2629 * (t2609 * t2669 + t2667 * t2780) + t2625 * (t2680 * t2781 + t2811);
t2527 = (-t2608 * t2667 + t2669 * t2784) * g(3) + t2631 * (t2608 * t2669 + t2667 * t2784) - t2627 * (-t2668 * t2785 + t2670 * t2689);
t2526 = (-t2607 * t2667 + t2669 * t2788) * g(3) + t2630 * (t2607 * t2669 + t2667 * t2788) - t2626 * (-t2668 * t2789 + t2670 * t2687);
t2525 = (-t2606 * t2667 + t2669 * t2793) * g(3) + t2629 * (t2606 * t2669 + t2667 * t2793) - t2625 * (-t2668 * t2794 + t2670 * t2685);
t2524 = g(3) * (-t2593 * t2667 + t2669 * t2797) + t2628 * (t2593 * t2669 + t2667 * t2797) + t2624 * (t2672 * t2798 + t2814);
t2523 = g(3) * (-t2592 * t2667 + t2669 * t2800) + t2628 * (t2592 * t2669 + t2667 * t2800) - t2624 * (-t2668 * t2801 + t2670 * t2673);
t1 = [-((t2602 * t2657 + t2653 * t2816) * t2852 + (-t2561 * t2657 + t2653 * t2587) * t2689 + (t2670 * t2653 - t2657 * t2821) * t2856) * t2825 - ((t2601 * t2656 + t2652 * t2818) * t2853 + (-t2560 * t2656 + t2652 * t2586) * t2687 + (t2670 * t2652 - t2656 * t2821) * t2857) * t2830 - ((t2600 * t2655 + t2651 * t2819) * t2854 + (-t2559 * t2655 + t2651 * t2585) * t2685 + (t2670 * t2651 - t2655 * t2821) * t2858) * t2835 - ((t2590 * t2654 + t2650 * t2820) * t2855 + (-t2558 * t2654 + t2650 * t2584) * t2673 + (t2670 * t2650 - t2654 * t2821) * t2859) * t2840, 0, t2538 * t2742 - t2540 * t2739 - t2541 * t2736 - t2542 * t2733, t2539 * t2742 - t2543 * t2739 - t2544 * t2736 - t2545 * t2733, 0, 0, 0, 0, 0, t2654 * t2731 - t2655 * t2727 - t2656 * t2726 - t2657 * t2725 + (-t2523 * t2754 - t2525 * t2751 - t2526 * t2748 - t2527 * t2745) * t2701, -t2654 * t2732 + t2655 * t2730 + t2656 * t2729 + t2657 * t2728 + (-t2524 * t2754 - t2528 * t2751 - t2529 * t2748 - t2530 * t2745) * t2701, 0, 0, 0, -t2661 * t2632 - t2662 * t2633; -(-(t2602 * t2653 - t2657 * t2816) * t2852 + (t2561 * t2653 + t2657 * t2587) * t2689 + (t2653 * t2821 + t2670 * t2657) * t2856) * t2825 - (-(t2601 * t2652 - t2656 * t2818) * t2853 + (t2560 * t2652 + t2656 * t2586) * t2687 + (t2652 * t2821 + t2670 * t2656) * t2857) * t2830 - (-(t2600 * t2651 - t2655 * t2819) * t2854 + (t2559 * t2651 + t2655 * t2585) * t2685 + (t2651 * t2821 + t2670 * t2655) * t2858) * t2835 - (-(t2590 * t2650 - t2654 * t2820) * t2855 + (t2558 * t2650 + t2654 * t2584) * t2673 + (t2650 * t2821 + t2670 * t2654) * t2859) * t2840, 0, -t2538 * t2743 + t2540 * t2740 + t2541 * t2737 + t2542 * t2734, -t2539 * t2743 + t2543 * t2740 + t2544 * t2737 + t2545 * t2734, 0, 0, 0, 0, 0, -t2650 * t2731 + t2651 * t2727 + t2652 * t2726 + t2653 * t2725 + (t2523 * t2755 + t2525 * t2752 + t2526 * t2749 + t2527 * t2746) * t2701, t2650 * t2732 - t2651 * t2730 - t2652 * t2729 - t2653 * t2728 + (t2524 * t2755 + t2528 * t2752 + t2529 * t2749 + t2530 * t2746) * t2701, 0, 0, 0, t2662 * t2632 - t2661 * t2633; -(-t2596 * t2852 + t2641 * t2669 * t2689 + (pkin(2) * t2817 + t2709 * t2689) * t2667) * t2825 - (-t2595 * t2853 + t2640 * t2669 * t2687 + (pkin(2) * t2790 + t2710 * t2687) * t2667) * t2830 - (-t2594 * t2854 + t2639 * t2669 * t2685 + (pkin(2) * t2795 + t2711 * t2685) * t2667) * t2835 - (-t2588 * t2855 + t2635 * t2669 * t2673 + (pkin(2) * t2802 + t2712 * t2673) * t2667) * t2840, 0, t2538 * t2841 + t2540 * t2836 + t2541 * t2831 + t2542 * t2826, t2539 * t2841 + t2543 * t2836 + t2544 * t2831 + t2545 * t2826, 0, 0, 0, 0, 0, t2571 * t2763 + t2578 * t2759 + t2579 * t2758 + t2580 * t2757 + (t2523 * t2846 + t2525 * t2845 + t2526 * t2844 + t2527 * t2843) * t2701, -t2571 * t2764 - t2578 * t2762 - t2579 * t2761 - t2580 * t2760 + (t2524 * t2846 + t2528 * t2845 + t2529 * t2844 + t2530 * t2843) * t2701, 0, 0, 0, -g(3); -((-t2617 * t2702 + t2621 * t2877 + (t2617 * t2713 + t2621 * t2721) * t2683) * t2657 + (-t2617 * t2877 - t2621 * t2702 + (-t2617 * t2721 + t2621 * t2713) * t2683) * t2653) / ((pkin(3) * t2782 + t2864) * t2775 + t2683 * t2721) * t2627 - ((-t2703 * t2616 + t2620 * t2876 + (t2616 * t2714 + t2620 * t2722) * t2681) * t2656 + (-t2616 * t2876 - t2620 * t2703 + (-t2616 * t2722 + t2620 * t2714) * t2681) * t2652) / ((pkin(3) * t2786 + t2865) * t2778 + t2681 * t2722) * t2626 - ((-t2704 * t2615 + t2619 * t2875 + (t2615 * t2715 + t2619 * t2723) * t2679) * t2655 + (-t2615 * t2875 - t2619 * t2704 + (-t2615 * t2723 + t2619 * t2715) * t2679) * t2651) / ((pkin(3) * t2791 + t2866) * t2781 + t2679 * t2723) * t2625 - ((-t2705 * t2614 + t2618 * t2874 + (t2614 * t2716 + t2618 * t2724) * t2671) * t2654 + (-t2614 * t2874 - t2705 * t2618 + (-t2614 * t2724 + t2618 * t2716) * t2671) * t2650) / ((pkin(3) * t2799 + t2867) * t2798 + t2671 * t2724) * t2624, 0, -t2538 * t2744 + t2540 * t2741 + t2541 * t2738 + t2542 * t2735, -t2539 * t2744 + t2543 * t2741 + t2544 * t2738 + t2545 * t2735, 0, 0, 0, 0, 0, -t2563 * t2731 + t2741 * t2870 + t2738 * t2869 + t2735 * t2868 + (t2523 * t2756 + t2525 * t2753 + t2526 * t2750 + t2527 * t2747) * t2701, t2563 * t2732 - t2741 * t2873 - t2738 * t2872 - t2735 * t2871 + (t2524 * t2756 + t2528 * t2753 + t2529 * t2750 + t2530 * t2747) * t2701, 0, t2632, t2633, 0;];
tau_reg  = t1;
