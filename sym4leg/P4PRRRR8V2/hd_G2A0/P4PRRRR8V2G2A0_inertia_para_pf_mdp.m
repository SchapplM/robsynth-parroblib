% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [4x4]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:22
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P4PRRRR8V2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G2A0_inertia_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G2A0_inertia_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G2A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G2A0_inertia_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G2A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:20:17
% EndTime: 2020-08-07 11:21:18
% DurationCPUTime: 64.91s
% Computational Cost: add. (44950->1265), mult. (104074->2513), div. (4096->14), fcn. (103852->30), ass. (0->838)
t3928 = sin(pkin(8));
t3930 = cos(pkin(8));
t3935 = cos(qJ(2,4));
t3931 = cos(pkin(4));
t3933 = sin(qJ(2,4));
t4383 = t3931 * t3933;
t3870 = t3928 * t4383 - t3930 * t3935;
t3932 = sin(qJ(3,4));
t3929 = sin(pkin(4));
t3934 = cos(qJ(3,4));
t4404 = t3929 * t3934;
t3848 = t3870 * t3932 + t3928 * t4404;
t3871 = t3928 * t3935 + t3930 * t4383;
t4388 = t3930 * t3934;
t3850 = -t3871 * t3932 - t3929 * t4388;
t4588 = t3848 * t3850;
t3945 = sin(qJ(2,1));
t3951 = cos(qJ(2,1));
t3952 = pkin(7) + pkin(6);
t3896 = pkin(2) * t3951 + t3945 * t3952;
t4369 = t3931 * t3951;
t4389 = t3930 * t3931;
t3950 = cos(qJ(3,1));
t4529 = pkin(3) * t3950;
t4552 = pkin(2) * t3945 - t3951 * t3952;
t3819 = (t3928 * t3945 - t3930 * t4369) * t4529 - t3896 * t4389 + t4552 * t3928;
t4408 = t3928 * t3931;
t3822 = (t3928 * t4369 + t3930 * t3945) * t4529 + t3896 * t4408 + t4552 * t3930;
t4375 = t3931 * t3945;
t3874 = t3928 * t4375 - t3930 * t3951;
t3944 = sin(qJ(3,1));
t4392 = t3929 * t3950;
t3861 = t3874 * t3944 + t3928 * t4392;
t3877 = t3928 * t3951 + t3930 * t4375;
t4385 = t3930 * t3950;
t3865 = -t3877 * t3944 - t3929 * t4385;
t4583 = t3819 * t3861 + t3822 * t3865;
t3943 = sin(qJ(2,2));
t3949 = cos(qJ(2,2));
t3895 = pkin(2) * t3949 + t3943 * t3952;
t4371 = t3931 * t3949;
t3948 = cos(qJ(3,2));
t4530 = pkin(3) * t3948;
t4553 = pkin(2) * t3943 - t3949 * t3952;
t3818 = (t3928 * t3943 - t3930 * t4371) * t4530 - t3895 * t4389 + t4553 * t3928;
t3821 = (t3928 * t4371 + t3930 * t3943) * t4530 + t3895 * t4408 + t4553 * t3930;
t4377 = t3931 * t3943;
t3873 = t3928 * t4377 - t3930 * t3949;
t3942 = sin(qJ(3,2));
t4394 = t3929 * t3948;
t3859 = t3873 * t3942 + t3928 * t4394;
t3876 = t3928 * t3949 + t3930 * t4377;
t4386 = t3930 * t3948;
t3864 = -t3876 * t3942 - t3929 * t4386;
t4582 = t3818 * t3859 + t3821 * t3864;
t3941 = sin(qJ(2,3));
t3947 = cos(qJ(2,3));
t3894 = pkin(2) * t3947 + t3941 * t3952;
t4373 = t3931 * t3947;
t3946 = cos(qJ(3,3));
t4531 = pkin(3) * t3946;
t4554 = pkin(2) * t3941 - t3947 * t3952;
t3817 = (t3928 * t3941 - t3930 * t4373) * t4531 - t3894 * t4389 + t4554 * t3928;
t3820 = (t3928 * t4373 + t3930 * t3941) * t4531 + t3894 * t4408 + t4554 * t3930;
t4379 = t3931 * t3941;
t3872 = t3928 * t4379 - t3930 * t3947;
t3940 = sin(qJ(3,3));
t4396 = t3929 * t3946;
t3857 = t3872 * t3940 + t3928 * t4396;
t3875 = t3928 * t3947 + t3930 * t4379;
t4387 = t3930 * t3946;
t3863 = -t3875 * t3940 - t3929 * t4387;
t4581 = t3817 * t3857 + t3820 * t3863;
t3890 = pkin(2) * t3935 + t3933 * t3952;
t4406 = t3929 * t3932;
t4555 = pkin(2) * t3933 - t3935 * t3952;
t4051 = pkin(3) * t4406 - t3931 * t4555;
t3832 = -t3890 * t3928 + t3930 * t4051;
t4384 = t3931 * t3932;
t3866 = pkin(3) * t4384 + t3929 * t4555;
t3936 = legFrame(4,2);
t3907 = sin(t3936);
t3911 = cos(t3936);
t4405 = t3929 * t3933;
t4407 = t3929 * t3930;
t4536 = pkin(3) * t3934 ^ 2;
t4540 = pkin(2) * t3932;
t3776 = (t3871 * t3911 + t3907 * t4405) * t4536 + (-t3832 * t3911 + t3866 * t3907) * t3934 + (t3907 * t3931 - t3911 * t4407) * t4540;
t3777 = -(t3871 * t3907 - t3911 * t4405) * t4536 + (t3832 * t3907 + t3866 * t3911) * t3934 + (t3907 * t4407 + t3911 * t3931) * t4540;
t4402 = t3929 * t3940;
t4050 = pkin(3) * t4402 - t3931 * t4554;
t3836 = -t3894 * t3928 + t3930 * t4050;
t4380 = t3931 * t3940;
t3867 = pkin(3) * t4380 + t3929 * t4554;
t3937 = legFrame(3,2);
t3908 = sin(t3937);
t3912 = cos(t3937);
t4401 = t3929 * t3941;
t4535 = pkin(3) * t3946 ^ 2;
t4539 = pkin(2) * t3940;
t3778 = (t3875 * t3912 + t3908 * t4401) * t4535 + (-t3836 * t3912 + t3867 * t3908) * t3946 + (t3908 * t3931 - t3912 * t4407) * t4539;
t4400 = t3929 * t3942;
t4049 = pkin(3) * t4400 - t3931 * t4553;
t3837 = -t3895 * t3928 + t3930 * t4049;
t4378 = t3931 * t3942;
t3868 = pkin(3) * t4378 + t3929 * t4553;
t3938 = legFrame(2,2);
t3909 = sin(t3938);
t3913 = cos(t3938);
t4399 = t3929 * t3943;
t4534 = pkin(3) * t3948 ^ 2;
t4538 = pkin(2) * t3942;
t3779 = (t3876 * t3913 + t3909 * t4399) * t4534 + (-t3837 * t3913 + t3868 * t3909) * t3948 + (t3909 * t3931 - t3913 * t4407) * t4538;
t4398 = t3929 * t3944;
t4048 = pkin(3) * t4398 - t3931 * t4552;
t3838 = -t3896 * t3928 + t3930 * t4048;
t4376 = t3931 * t3944;
t3869 = pkin(3) * t4376 + t3929 * t4552;
t3939 = legFrame(1,2);
t3910 = sin(t3939);
t3914 = cos(t3939);
t4397 = t3929 * t3945;
t4533 = pkin(3) * t3950 ^ 2;
t4537 = pkin(2) * t3944;
t3780 = (t3877 * t3914 + t3910 * t4397) * t4533 + (-t3838 * t3914 + t3869 * t3910) * t3950 + (t3910 * t3931 - t3914 * t4407) * t4537;
t3781 = -(t3875 * t3908 - t3912 * t4401) * t4535 + (t3836 * t3908 + t3867 * t3912) * t3946 + (t3908 * t4407 + t3912 * t3931) * t4539;
t3782 = -(t3876 * t3909 - t3913 * t4399) * t4534 + (t3837 * t3909 + t3868 * t3913) * t3948 + (t3909 * t4407 + t3913 * t3931) * t4538;
t3783 = -(t3877 * t3910 - t3914 * t4397) * t4533 + (t3838 * t3910 + t3869 * t3914) * t3950 + (t3910 * t4407 + t3914 * t3931) * t4537;
t3814 = t3820 ^ 2;
t3815 = t3821 ^ 2;
t3816 = t3822 ^ 2;
t4352 = t3933 * t4536;
t3825 = pkin(2) * t4384 + t3866 * t3934 + t3929 * t4352;
t3824 = 0.1e1 / t3825 ^ 2;
t4351 = t3941 * t4535;
t3833 = pkin(2) * t4380 + t3867 * t3946 + t3929 * t4351;
t3827 = 0.1e1 / t3833 ^ 2;
t4350 = t3943 * t4534;
t3834 = pkin(2) * t4378 + t3868 * t3948 + t3929 * t4350;
t3829 = 0.1e1 / t3834 ^ 2;
t4349 = t3945 * t4533;
t3835 = pkin(2) * t4376 + t3869 * t3950 + t3929 * t4349;
t3831 = 0.1e1 / t3835 ^ 2;
t3922 = t3940 ^ 2;
t3923 = t3942 ^ 2;
t3924 = t3944 ^ 2;
t4381 = t3931 * t3935;
t4532 = pkin(3) * t3934;
t3813 = (t3928 * t4381 + t3930 * t3933) * t4532 + t3890 * t4408 + t4555 * t3930;
t4464 = t3824 * t3911;
t4303 = t3813 * t4464;
t4360 = 0.2e1 * t3848;
t4063 = t4360 * t4303;
t4020 = t3934 * t4063;
t4021 = t3932 * t4063;
t4273 = t3824 * t3932 * t3934;
t4556 = t3848 ^ 2;
t4101 = t4273 * t4556;
t4039 = t3911 * t4101;
t4426 = t3831 * t3914;
t4227 = t3910 * t4426;
t4541 = -0.2e1 * t3861;
t4060 = t3822 * t4227 * t4541;
t4439 = t3829 * t3913;
t4243 = t3909 * t4439;
t4542 = -0.2e1 * t3859;
t4061 = t3821 * t4243 * t4542;
t4452 = t3827 * t3912;
t4259 = t3908 * t4452;
t4543 = -0.2e1 * t3857;
t4062 = t3820 * t4259 * t4543;
t4424 = t3831 * t3945;
t4230 = t3861 * t4424;
t4131 = t3914 * t4230;
t4078 = t3929 * t4131;
t4423 = t3831 * t3951;
t4229 = t3861 * t4423;
t4132 = t3910 * t4229;
t4079 = t3929 * t4132;
t4437 = t3829 * t3943;
t4246 = t3859 * t4437;
t4142 = t3913 * t4246;
t4085 = t3929 * t4142;
t4436 = t3829 * t3949;
t4245 = t3859 * t4436;
t4143 = t3909 * t4245;
t4086 = t3929 * t4143;
t4450 = t3827 * t3941;
t4262 = t3857 * t4450;
t4153 = t3912 * t4262;
t4092 = t3929 * t4153;
t4449 = t3827 * t3947;
t4261 = t3857 * t4449;
t4154 = t3908 * t4261;
t4093 = t3929 * t4154;
t3920 = t3932 ^ 2;
t4279 = t3824 * t4556;
t4166 = t3920 * t4279;
t4102 = t3911 * t4166;
t4130 = t3914 * t4229;
t4133 = t3910 * t4230;
t3853 = t3861 ^ 2;
t4364 = t3944 * t3950;
t4225 = t3831 * t4364;
t4135 = t3853 * t4225;
t4136 = t3853 * t4227;
t4141 = t3913 * t4245;
t4144 = t3909 * t4246;
t3852 = t3859 ^ 2;
t4365 = t3942 * t3948;
t4241 = t3829 * t4365;
t4146 = t3852 * t4241;
t4147 = t3852 * t4243;
t4152 = t3912 * t4261;
t4155 = t3908 * t4262;
t3851 = t3857 ^ 2;
t4366 = t3940 * t3946;
t4257 = t3827 * t4366;
t4157 = t3851 * t4257;
t4158 = t3851 * t4259;
t4167 = t3911 * t4279;
t3811 = t3813 ^ 2;
t4309 = t3811 * t4464;
t4514 = MDP(9) / pkin(3) ^ 2;
t3962 = 0.1e1 / pkin(3);
t4516 = MDP(8) * t3962;
t4518 = MDP(7) * t3962;
t4544 = 2 * MDP(6);
t4520 = MDP(4) * t3933;
t4551 = -MDP(3) * t3935 + t4520;
t4573 = t3848 * t3911;
t4574 = t3848 * t3907;
t4587 = (t3776 * t3777 * t3824 + t3778 * t3781 * t3827 + t3779 * t3782 * t3829 + t3780 * t3783 * t3831) * MDP(1) + (-t3907 * t4021 + t3940 * t4062 + t3942 * t4061 + t3944 * t4060) * t4518 + (-t3907 * t4020 + t3946 * t4062 + t3948 * t4061 + t3950 * t4060) * t4516 + (-t3814 * t4259 - t3815 * t4243 - t3816 * t4227 - t3907 * t4309) * t4514 + (-t3908 * t3912 * t4157 - t3909 * t3913 * t4146 - t3910 * t3914 * t4135 - t3907 * t4039) * t4544 + (-t3907 * t4102 - t3922 * t4158 - t3923 * t4147 - t3924 * t4136) * MDP(5) + (-t3907 * t4167 - t4136 - t4147 - t4158) * MDP(2) + (t3778 * t4093 + t3779 * t4086 + t3780 * t4079) * MDP(3) + (t3781 * t4092 + t3782 * t4085 + t3783 * t4078) * MDP(4) + (-(t3776 * t4574 - t3777 * t4573) * t4551 * t3824 + (-t3778 * t4155 - t3779 * t4144 - t3780 * t4133) * MDP(4) + (-t3781 * t4152 - t3782 * t4141 - t3783 * t4130) * MDP(3)) * t3929;
t4162 = t3850 * t4273;
t4586 = t3848 * t4162;
t4463 = t3824 * t3920;
t4585 = t4463 * t4588;
t3812 = (t3928 * t3933 - t3930 * t4381) * t4532 - t3890 * t4389 + t4555 * t3928;
t4071 = -t3812 * t3848 - t3813 * t3850;
t4117 = MDP(7) * t3932 + MDP(8) * t3934;
t4584 = -(MDP(7) * t3940 + MDP(8) * t3946) * t4452 * t4581 - (MDP(7) * t3942 + MDP(8) * t3948) * t4439 * t4582 - (MDP(7) * t3944 + MDP(8) * t3950) * t4426 * t4583 + t4071 * t4464 * t4117;
t4456 = t3827 * t3863;
t4263 = t3857 * t4456;
t3804 = t3908 * t4263;
t4443 = t3829 * t3864;
t4247 = t3859 * t4443;
t3805 = t3909 * t4247;
t4430 = t3831 * t3865;
t4231 = t3861 * t4430;
t3806 = t3910 * t4231;
t3807 = -t3870 * t4536 + t3890 * t4388 + (pkin(2) * t4406 + t3934 * t4051) * t3928;
t3808 = -t3872 * t4535 + t3894 * t4387 + (pkin(2) * t4402 + t3946 * t4050) * t3928;
t3809 = -t3873 * t4534 + t3895 * t4386 + (pkin(2) * t4400 + t3948 * t4049) * t3928;
t3810 = -t3874 * t4533 + t3896 * t4385 + (pkin(2) * t4398 + t3950 * t4048) * t3928;
t4080 = t3861 * t3865 * t4225;
t4087 = t3859 * t3864 * t4241;
t4094 = t3857 * t3863 * t4257;
t4465 = t3824 * t3907;
t4277 = t3850 * t4465;
t4487 = t3813 * t3962;
t4112 = t4277 * t4487;
t4391 = t3929 * t3951;
t4221 = t3865 * t4391;
t4129 = t3831 * t4221;
t4393 = t3929 * t3949;
t4222 = t3864 * t4393;
t4140 = t3829 * t4222;
t4395 = t3929 * t3947;
t4223 = t3863 * t4395;
t4151 = t3827 * t4223;
t4403 = t3929 * t3935;
t4224 = t3850 * t4403;
t4163 = t3824 * t4224;
t4473 = t3822 * t3831;
t4298 = t3819 * t4473;
t4476 = t3821 * t3829;
t4300 = t3818 * t4476;
t4479 = t3820 * t3827;
t4302 = t3817 * t4479;
t4489 = t3812 * t3824;
t4308 = t3813 * t4489;
t4410 = t3861 * t3910;
t4412 = t3859 * t3909;
t4414 = t3857 * t3908;
t4492 = t3810 * t3831;
t4494 = t3809 * t3829;
t4496 = t3808 * t3827;
t4498 = t3807 * t3935;
t4499 = t3807 * t3824;
t4453 = t3827 * t3908;
t4562 = t4581 * t3962 * t4453;
t4440 = t3829 * t3909;
t4563 = t4582 * t3962 * t4440;
t4427 = t3831 * t3910;
t4564 = t4583 * t3962 * t4427;
t4579 = (t3777 * t4499 + t3781 * t4496 + t3782 * t4494 + t3783 * t4492) * MDP(1) + (t3907 * t4308 + t3908 * t4302 + t3909 * t4300 + t3910 * t4298) * t4514 + (t3777 * t4163 + t3781 * t4151 + t3782 * t4140 + t3783 * t4129 + t3808 * t4093 + t3809 * t4086 + t3810 * t4079) * MDP(3) + (t3932 * t4112 + t4562 * t3940 + t4563 * t3942 + t4564 * t3944) * MDP(7) + (t3934 * t4112 + t4562 * t3946 + t4563 * t3948 + t4564 * t3950) * MDP(8) + (t3907 * t4586 + t3908 * t4094 + t3909 * t4087 + t3910 * t4080) * t4544 + (t3922 * t3804 + t3923 * t3805 + t3924 * t3806 + t3907 * t4585) * MDP(5) + (t3848 * t4277 + t3804 + t3805 + t3806) * MDP(2) + (((-t3783 * t3865 - t3810 * t4410) * t4424 + (-t3782 * t3864 - t3809 * t4412) * t4437 + (-t3781 * t3863 - t3808 * t4414) * t4450) * MDP(4) + (MDP(3) * t4498 * t4574 + (-t3777 * t3850 - t3807 * t4574) * t4520) * t3824) * t3929;
t4578 = 0.2e1 * t3857;
t4577 = 0.2e1 * t3859;
t4576 = 0.2e1 * t3861;
t4575 = t3824 * t4117;
t3953 = xP(4);
t3918 = sin(t3953);
t3919 = cos(t3953);
t3954 = koppelP(4,2);
t3958 = koppelP(4,1);
t3880 = t3918 * t3958 + t3919 * t3954;
t3884 = -t3918 * t3954 + t3919 * t3958;
t3840 = t3880 * t3911 + t3884 * t3907;
t4422 = t3840 * t3848;
t4570 = t4360 * t4551;
t4569 = (t3950 * t4552 + t4349) * t3929;
t4568 = (t3948 * t4553 + t4350) * t3929;
t4567 = (t3946 * t4554 + t4351) * t3929;
t4566 = (t3934 * t4555 + t4352) * t3929;
t4134 = t3914 * t4231;
t4145 = t3913 * t4247;
t4156 = t3912 * t4263;
t4228 = t3865 * t4424;
t4244 = t3864 * t4437;
t4260 = t3863 * t4450;
t4462 = t3824 * t3933;
t4274 = t3850 * t4462;
t4310 = t3824 * t4498;
t4560 = (t3776 * t4499 + t3778 * t4496 + t3779 * t4494 + t3780 * t4492) * MDP(1) + (-t3812 * t4303 - t3912 * t4302 - t3913 * t4300 - t3914 * t4298) * t4514 + (t3808 * t4092 + t3809 * t4085 + t3810 * t4078) * MDP(4) + (t3776 * t4163 + t3778 * t4151 + t3779 * t4140 + t3780 * t4129) * MDP(3) + ((-t3808 * t4152 - t3809 * t4141 - t3810 * t4130 - t4310 * t4573) * MDP(3) + (t3807 * t4462 * t4573 - t3776 * t4274 - t3778 * t4260 - t3779 * t4244 - t3780 * t4228) * MDP(4)) * t3929 + (-t3911 * t4586 - t3912 * t4094 - t3913 * t4087 - t3914 * t4080) * t4544 + (-t3911 * t4585 - t3922 * t4156 - t3923 * t4145 - t3924 * t4134) * MDP(5) + (-t4464 * t4588 - t4134 - t4145 - t4156) * MDP(2);
t4354 = 0.2e1 * MDP(7);
t4353 = 0.2e1 * MDP(8);
t3826 = 0.1e1 / t3833;
t3955 = koppelP(3,2);
t3959 = koppelP(3,1);
t3881 = t3918 * t3959 + t3919 * t3955;
t3885 = -t3918 * t3955 + t3919 * t3959;
t3841 = t3881 * t3912 + t3885 * t3908;
t4026 = t3826 * t3841;
t4296 = t3820 * t4026;
t4559 = t3820 * t4578;
t3828 = 0.1e1 / t3834;
t3956 = koppelP(2,2);
t3960 = koppelP(2,1);
t3882 = t3918 * t3960 + t3919 * t3956;
t3886 = -t3918 * t3956 + t3919 * t3960;
t3842 = t3882 * t3913 + t3886 * t3909;
t4025 = t3828 * t3842;
t4292 = t3821 * t4025;
t4558 = t3821 * t4577;
t3830 = 0.1e1 / t3835;
t3957 = koppelP(1,2);
t3961 = koppelP(1,1);
t3883 = t3918 * t3961 + t3919 * t3957;
t3887 = -t3918 * t3957 + t3919 * t3961;
t3843 = t3883 * t3914 + t3887 * t3910;
t4024 = t3830 * t3843;
t4288 = t3822 * t4024;
t4557 = t3822 * t4576;
t4337 = pkin(2) + t4529;
t4122 = t3931 * t4337;
t4338 = pkin(2) + t4530;
t4123 = t3931 * t4338;
t4339 = pkin(2) + t4531;
t4124 = t3931 * t4339;
t4340 = pkin(2) + t4532;
t4125 = t3931 * t4340;
t4545 = 0.2e1 * pkin(2);
t3823 = 0.1e1 / t3825;
t4027 = t3823 * t3840;
t3732 = t4027 * t4487;
t4528 = pkin(6) * t3732;
t3733 = t3962 * t4296;
t4527 = pkin(6) * t3733;
t3734 = t3962 * t4292;
t4526 = pkin(6) * t3734;
t3735 = t3962 * t4288;
t4525 = pkin(6) * t3735;
t4524 = pkin(6) * t3962;
t4523 = MDP(3) * t3929;
t4521 = MDP(4) * t3929;
t4515 = MDP(9) * t3962;
t3762 = t3848 * t4027;
t4513 = t3762 * t3823;
t3764 = t3857 * t4026;
t4512 = t3764 * t3826;
t3765 = t3859 * t4025;
t4511 = t3765 * t3828;
t3766 = t3861 * t4024;
t4510 = t3766 * t3830;
t4509 = t3776 * t3823;
t4508 = t3777 * t3823;
t4506 = t3778 * t3826;
t4505 = t3779 * t3828;
t4504 = t3780 * t3830;
t4503 = t3781 * t3826;
t4502 = t3782 * t3828;
t4501 = t3783 * t3830;
t4500 = t3807 * t3823;
t4497 = t3808 * t3826;
t4495 = t3809 * t3828;
t4493 = t3810 * t3830;
t4491 = t3811 * t3824;
t4490 = t3812 * t3823;
t4486 = t3817 * t3826;
t4484 = t3818 * t3828;
t4482 = t3819 * t3830;
t4480 = t3820 * t3826;
t4477 = t3821 * t3828;
t4474 = t3822 * t3830;
t4471 = t3823 * t3850;
t4470 = t3823 * t3911;
t4469 = t3823 * t3932;
t4468 = t3823 * t3933;
t4467 = t3823 * t3934;
t4466 = t3823 * t3935;
t4461 = t3826 * t3863;
t4460 = t3826 * t3940;
t4459 = t3826 * t3941;
t4458 = t3826 * t3946;
t4457 = t3826 * t3947;
t3899 = t3908 ^ 2;
t4455 = t3827 * t3899;
t3903 = t3912 ^ 2;
t4454 = t3827 * t3903;
t4451 = t3827 * t3922;
t4448 = t3828 * t3864;
t4447 = t3828 * t3942;
t4446 = t3828 * t3943;
t4445 = t3828 * t3948;
t4444 = t3828 * t3949;
t3900 = t3909 ^ 2;
t4442 = t3829 * t3900;
t3904 = t3913 ^ 2;
t4441 = t3829 * t3904;
t4438 = t3829 * t3923;
t4435 = t3830 * t3865;
t4434 = t3830 * t3944;
t4433 = t3830 * t3945;
t4432 = t3830 * t3950;
t4431 = t3830 * t3951;
t3901 = t3910 ^ 2;
t4429 = t3831 * t3901;
t3905 = t3914 ^ 2;
t4428 = t3831 * t3905;
t4425 = t3831 * t3924;
t4421 = t3841 * t3857;
t4420 = t3842 * t3859;
t4419 = t3843 * t3861;
t4413 = t3857 * t3912;
t4411 = t3859 * t3913;
t4409 = t3861 * t3914;
t4390 = t3929 * t3962;
t4382 = t3931 * t3934;
t4374 = t3931 * t3946;
t4372 = t3931 * t3948;
t4370 = t3931 * t3950;
t4368 = t3931 * t3962;
t4356 = 0.2e1 * MDP(3);
t4355 = 0.2e1 * MDP(4);
t4348 = t3932 * t4524;
t4347 = t3934 * t4524;
t4346 = t3940 * t4524;
t4345 = t3942 * t4524;
t4344 = t3944 * t4524;
t4343 = t3946 * t4524;
t4342 = t3948 * t4524;
t4341 = t3950 * t4524;
t3878 = pkin(2) * t3928 - t3952 * t4389;
t3879 = pkin(2) * t4389 + t3928 * t3952;
t3979 = t3871 * t4536 + (t3878 * t3935 + t3879 * t3933) * t3934;
t4067 = t4340 * t4407;
t3657 = ((-t3979 * t3880 + t3884 * t4566 + (t3880 * t4067 + t3884 * t4125) * t3932) * t3911 + (-t3880 * t4566 - t3979 * t3884 + (-t3880 * t4125 + t3884 * t4067) * t3932) * t3907) / ((t3933 * t4532 + t4555) * t4404 + t3932 * t4125);
t4336 = t3657 * t3823 * t3848;
t4335 = t3732 * t4469;
t4334 = t3732 * t4467;
t4333 = t3732 * t4405;
t4332 = t3733 * t4460;
t4331 = t3733 * t4458;
t4330 = t3733 * t4401;
t4329 = t3734 * t4447;
t4328 = t3734 * t4445;
t4327 = t3734 * t4399;
t4326 = t3735 * t4434;
t4325 = t3735 * t4432;
t4324 = t3735 * t4397;
t4323 = t3848 * t4513;
t4322 = t3920 * t4513;
t4321 = t3762 * t4469;
t4320 = t3762 * t4467;
t4319 = t3922 * t4512;
t4318 = t3764 * t4460;
t4317 = t3764 * t4458;
t4316 = t3923 * t4511;
t4315 = t3765 * t4447;
t4314 = t3765 * t4445;
t4313 = t3924 * t4510;
t4312 = t3766 * t4434;
t4311 = t3766 * t4432;
t4307 = t3850 * t4489;
t4306 = t3813 * t4027;
t4305 = t3813 * t3823 * t3907;
t4304 = t3813 * t4470;
t4301 = t3817 * t4456;
t4299 = t3818 * t4443;
t4297 = t3819 * t4430;
t4295 = t3908 * t4480;
t4294 = t3912 * t4480;
t4293 = t3857 * t4479;
t4291 = t3909 * t4477;
t4290 = t3913 * t4477;
t4289 = t3859 * t4476;
t4287 = t3910 * t4474;
t4286 = t3914 * t4474;
t4285 = t3861 * t4473;
t4284 = t3823 * t4422;
t4283 = t3823 * t4384;
t4282 = t3823 * t4382;
t4281 = t3824 * t4422;
t4280 = t3840 * t4465;
t4278 = t3824 * t4574;
t4272 = t3826 * t4421;
t4271 = t3826 * t4414;
t4270 = t3826 * t4413;
t4269 = t3826 * t4380;
t4268 = t3826 * t4374;
t4267 = t3827 * t4421;
t4266 = t3841 * t4453;
t4265 = t3841 * t4452;
t4264 = t3851 * t4451;
t4256 = t3828 * t4420;
t4255 = t3828 * t4412;
t4254 = t3828 * t4411;
t4253 = t3828 * t4378;
t4252 = t3828 * t4372;
t4251 = t3829 * t4420;
t4250 = t3842 * t4440;
t4249 = t3842 * t4439;
t4248 = t3852 * t4438;
t4240 = t3830 * t4419;
t4239 = t3830 * t4410;
t4238 = t3830 * t4409;
t4237 = t3830 * t4376;
t4236 = t3830 * t4370;
t4235 = t3831 * t4419;
t4234 = t3843 * t4427;
t4233 = t3843 * t4426;
t4232 = t3853 * t4425;
t4220 = t3932 * t4403;
t4219 = t3934 * t4403;
t4218 = t3940 * t4395;
t4217 = t3942 * t4393;
t4216 = t3944 * t4391;
t4215 = t3946 * t4395;
t4214 = t3948 * t4393;
t4213 = t3950 * t4391;
t4209 = t3919 * MDP(13) - t3918 * MDP(14);
t4207 = t3848 * t4335;
t4206 = t3848 * t4334;
t4205 = t3733 * t4272;
t4204 = t3857 * t4332;
t4203 = t3857 * t4331;
t4202 = t3734 * t4256;
t4201 = t3859 * t4329;
t4200 = t3859 * t4328;
t4199 = t3735 * t4240;
t4198 = t3861 * t4326;
t4197 = t3861 * t4325;
t4196 = t3813 * t4321;
t4195 = t3813 * t4320;
t4194 = t3848 * t4322;
t4193 = t3932 * t4320;
t4192 = t3820 * t4318;
t4191 = t3820 * t4317;
t4190 = t3764 * t4272;
t4189 = t3857 * t4319;
t4188 = t3940 * t4317;
t4187 = t3821 * t4315;
t4186 = t3821 * t4314;
t4185 = t3765 * t4256;
t4184 = t3859 * t4316;
t4183 = t3942 * t4314;
t4182 = t3822 * t4312;
t4181 = t3822 * t4311;
t4180 = t3766 * t4240;
t4179 = t3861 * t4313;
t4178 = t3944 * t4311;
t4175 = t3940 * t4293;
t4174 = t3946 * t4293;
t4173 = t3942 * t4289;
t4172 = t3948 * t4289;
t4171 = t3944 * t4285;
t4170 = t3950 * t4285;
t4169 = t4390 * t4468;
t4168 = t3850 * t4281;
t4161 = t4390 * t4459;
t4160 = t3857 * t4267;
t4159 = t3922 * t4267;
t4150 = t4390 * t4446;
t4149 = t3859 * t4251;
t4148 = t3923 * t4251;
t4139 = t4390 * t4433;
t4138 = t3861 * t4235;
t4137 = t3924 * t4235;
t4128 = t4366 * t4421;
t4127 = t4365 * t4420;
t4126 = t4364 * t4419;
t4116 = t3848 * t4193;
t4115 = t3857 * t4188;
t4114 = t3859 * t4183;
t4113 = t3861 * t4178;
t4105 = t3932 * t4169;
t4104 = t3934 * t4169;
t4103 = t4278 * t4422;
t4098 = t3940 * t4161;
t4097 = t3946 * t4161;
t4096 = t3857 * t4159;
t4095 = t3827 * t4128;
t4091 = t3942 * t4150;
t4090 = t3948 * t4150;
t4089 = t3859 * t4148;
t4088 = t3829 * t4127;
t4084 = t3944 * t4139;
t4083 = t3950 * t4139;
t4082 = t3861 * t4137;
t4081 = t3831 * t4126;
t4077 = -t3918 * MDP(13) - t3919 * MDP(14);
t4066 = t4339 * t4407;
t4065 = t4338 * t4407;
t4064 = t4337 * t4407;
t3661 = (-t3776 * t3880 + t3777 * t3884) * t3823;
t4059 = t3661 * t4403 + t3762 * t4545;
t3662 = (-t3778 * t3881 + t3781 * t3885) * t3826;
t4058 = t3662 * t4395 + t3764 * t4545;
t3663 = (-t3779 * t3882 + t3782 * t3886) * t3828;
t4057 = t3663 * t4393 + t3765 * t4545;
t3664 = (-t3780 * t3883 + t3783 * t3887) * t3830;
t4056 = t3664 * t4391 + t3766 * t4545;
t4055 = t3807 * t4403 + t3850 * t4545;
t4054 = t3808 * t4395 + t3863 * t4545;
t4053 = t3809 * t4393 + t3864 * t4545;
t4052 = t3810 * t4391 + t3865 * t4545;
t4047 = t3813 * t4105;
t4046 = t3813 * t4104;
t4045 = t3820 * t4098;
t4044 = t3820 * t4097;
t4043 = t3821 * t4091;
t4042 = t3821 * t4090;
t4041 = t3822 * t4084;
t4040 = t3822 * t4083;
t4038 = t3857 * t4095;
t4037 = t3859 * t4088;
t4036 = t3861 * t4081;
t4035 = -t3661 * t4573 + t3762 * t3776;
t4034 = -t3661 * t4574 - t3762 * t3777;
t4033 = t3662 * t4413 - t3764 * t3778;
t4032 = t3662 * t4414 + t3764 * t3781;
t4031 = t3663 * t4411 - t3765 * t3779;
t4030 = t3663 * t4412 + t3765 * t3782;
t4029 = t3664 * t4409 - t3766 * t3780;
t4028 = t3664 * t4410 + t3766 * t3783;
t3725 = (pkin(6) * t4574 + t3777 * t4405) * t3823;
t3637 = -t3725 * t3932 + t3777 * t4282;
t3639 = -t3725 * t3934 - t3777 * t4283;
t4023 = (MDP(10) * t3637 + MDP(11) * t3639) * t3823;
t4022 = t3813 * t4360 * t4280;
t4019 = t4266 * t4559;
t4018 = t4265 * t4559;
t4017 = t4250 * t4558;
t4016 = t4249 * t4558;
t4015 = t4234 * t4557;
t4014 = t4233 * t4557;
t4013 = -t3657 * t3762 - t3661 * t4284;
t3978 = t3875 * t4535 + (t3878 * t3947 + t3879 * t3941) * t3946;
t3658 = ((-t3978 * t3881 + t3885 * t4567 + (t3881 * t4066 + t3885 * t4124) * t3940) * t3912 + (-t3881 * t4567 - t3885 * t3978 + (-t3881 * t4124 + t3885 * t4066) * t3940) * t3908) / ((t3941 * t4531 + t4554) * t4396 + t3940 * t4124);
t4012 = -t3658 * t3764 - t3662 * t4272;
t3977 = t3876 * t4534 + (t3878 * t3949 + t3879 * t3943) * t3948;
t3659 = ((-t3977 * t3882 + t3886 * t4568 + (t3882 * t4065 + t3886 * t4123) * t3942) * t3913 + (-t3882 * t4568 - t3886 * t3977 + (-t3882 * t4123 + t3886 * t4065) * t3942) * t3909) / ((t3943 * t4530 + t4553) * t4394 + t3942 * t4123);
t4011 = -t3659 * t3765 - t3663 * t4256;
t3976 = t3877 * t4533 + (t3878 * t3951 + t3879 * t3945) * t3950;
t3660 = ((-t3883 * t3976 + t3887 * t4569 + (t3883 * t4064 + t3887 * t4122) * t3944) * t3914 + (-t3883 * t4569 - t3887 * t3976 + (-t3883 * t4122 + t3887 * t4064) * t3944) * t3910) / ((t3945 * t4529 + t4552) * t4392 + t3944 * t4122);
t4010 = -t3660 * t3766 - t3664 * t4240;
t4007 = t3813 * t4347 + t4540 * t4360;
t4006 = -0.2e1 * pkin(2) * t3848 * t3934 + t3813 * t4348;
t4005 = t3820 * t4343 + t4539 * t4578;
t4004 = pkin(2) * t3946 * t4543 + t3820 * t4346;
t4003 = t3821 * t4342 + t4538 * t4577;
t4002 = pkin(2) * t3948 * t4542 + t3821 * t4345;
t4001 = t3822 * t4341 + t4537 * t4576;
t4000 = pkin(2) * t3950 * t4541 + t3822 * t4344;
t3999 = t3824 * t3840 * t4071;
t3998 = t3827 * t3841 * t4581;
t3997 = t3829 * t3842 * t4582;
t3996 = t3831 * t3843 * t4583;
t3995 = -t3657 * t4471 - t3807 * t4281;
t3994 = -t3658 * t4461 - t3808 * t4267;
t3993 = -t3659 * t4448 - t3809 * t4251;
t3992 = -t3660 * t4435 - t3810 * t4235;
t3991 = t3823 * (t3813 * t4368 + t3848 * t4403);
t3990 = t3826 * (t3820 * t4368 + t3857 * t4395);
t3989 = t3828 * (t3821 * t4368 + t3859 * t4393);
t3988 = t3830 * (t3822 * t4368 + t3861 * t4391);
t3987 = -t3776 * t4281 + t3911 * t4336;
t3986 = t3777 * t4281 + t3907 * t4336;
t3985 = t3658 * t4270 - t3778 * t4267;
t3984 = t3658 * t4271 + t3781 * t4267;
t3983 = t3659 * t4254 - t3779 * t4251;
t3982 = t3659 * t4255 + t3782 * t4251;
t3981 = t3660 * t4238 - t3780 * t4235;
t3980 = t3660 * t4239 + t3783 * t4235;
t3975 = t4360 * t4575;
t3902 = t3911 ^ 2;
t3898 = t3907 ^ 2;
t3888 = (t3918 ^ 2 + t3919 ^ 2) * MDP(15);
t3856 = t3865 ^ 2;
t3855 = t3864 ^ 2;
t3854 = t3863 ^ 2;
t3847 = t3850 ^ 2;
t3769 = (t3819 * t4368 + t4221) * t3830;
t3768 = (t3818 * t4368 + t4222) * t3828;
t3767 = (t3817 * t4368 + t4223) * t3826;
t3763 = (t3812 * t4368 + t4224) * t3823;
t3761 = t3914 * t3988;
t3760 = t3910 * t3988;
t3759 = t3913 * t3989;
t3758 = t3909 * t3989;
t3757 = t3912 * t3990;
t3756 = t3908 * t3990;
t3755 = t3911 * t3991;
t3754 = t3907 * t3991;
t3753 = (pkin(6) * t3865 + t3810 * t4397) * t3830;
t3752 = (pkin(6) * t3864 + t3809 * t4399) * t3828;
t3751 = (pkin(6) * t3863 + t3808 * t4401) * t3826;
t3750 = (pkin(6) * t3850 + t3807 * t4405) * t3823;
t3731 = (pkin(6) * t4410 + t3783 * t4397) * t3830;
t3730 = (-pkin(6) * t4409 + t3780 * t4397) * t3830;
t3729 = (pkin(6) * t4412 + t3782 * t4399) * t3828;
t3728 = (-pkin(6) * t4411 + t3779 * t4399) * t3828;
t3727 = (pkin(6) * t4414 + t3781 * t4401) * t3826;
t3726 = (-pkin(6) * t4413 + t3778 * t4401) * t3826;
t3724 = (-pkin(6) * t4573 + t3776 * t4405) * t3823;
t3723 = -t3769 * t3944 - t3819 * t4083;
t3722 = t3769 * t3950 - t3819 * t4084;
t3721 = -t3768 * t3942 - t3818 * t4090;
t3720 = t3768 * t3948 - t3818 * t4091;
t3719 = -t3767 * t3940 - t3817 * t4097;
t3718 = t3767 * t3946 - t3817 * t4098;
t3717 = -t3763 * t3932 - t3812 * t4104;
t3716 = t3763 * t3934 - t3812 * t4105;
t3715 = -t3761 * t3950 + t3914 * t4041;
t3714 = t3761 * t3944 + t3914 * t4040;
t3713 = -t3760 * t3944 - t3910 * t4040;
t3712 = t3760 * t3950 - t3910 * t4041;
t3711 = -t3759 * t3948 + t3913 * t4043;
t3710 = t3759 * t3942 + t3913 * t4042;
t3709 = -t3758 * t3942 - t3909 * t4042;
t3708 = t3758 * t3948 - t3909 * t4043;
t3707 = -t3757 * t3946 + t3912 * t4045;
t3706 = t3757 * t3940 + t3912 * t4044;
t3705 = -t3756 * t3940 - t3908 * t4044;
t3704 = t3756 * t3946 - t3908 * t4045;
t3703 = (-t3819 * t4344 + t3950 * t4052) * t3830;
t3702 = (-t3819 * t4341 - t3944 * t4052) * t3830;
t3701 = (-t3818 * t4345 + t3948 * t4053) * t3828;
t3700 = (-t3818 * t4342 - t3942 * t4053) * t3828;
t3699 = (-t3817 * t4346 + t3946 * t4054) * t3826;
t3698 = (-t3817 * t4343 - t3940 * t4054) * t3826;
t3697 = -t3755 * t3934 + t3911 * t4047;
t3696 = t3755 * t3932 + t3911 * t4046;
t3695 = -t3754 * t3932 - t3907 * t4046;
t3694 = t3754 * t3934 - t3907 * t4047;
t3693 = (-t3812 * t4348 + t3934 * t4055) * t3823;
t3692 = (-t3812 * t4347 - t3932 * t4055) * t3823;
t3691 = -t3753 * t3950 - t3810 * t4237;
t3690 = -t3752 * t3948 - t3809 * t4253;
t3689 = -t3751 * t3946 - t3808 * t4269;
t3688 = -t3753 * t3944 + t3810 * t4236;
t3687 = -t3752 * t3942 + t3809 * t4252;
t3686 = -t3751 * t3940 + t3808 * t4268;
t3685 = -t3750 * t3934 - t3807 * t4283;
t3684 = -t3750 * t3932 + t3807 * t4282;
t3681 = (t3783 * t4213 - t3910 * t4000) * t3830;
t3680 = (t3780 * t4213 + t3914 * t4000) * t3830;
t3679 = (-t3783 * t4216 - t3910 * t4001) * t3830;
t3678 = (-t3780 * t4216 + t3914 * t4001) * t3830;
t3677 = (t3782 * t4214 - t3909 * t4002) * t3828;
t3676 = (t3779 * t4214 + t3913 * t4002) * t3828;
t3675 = (-t3782 * t4217 - t3909 * t4003) * t3828;
t3674 = (-t3779 * t4217 + t3913 * t4003) * t3828;
t3673 = (t3781 * t4215 - t3908 * t4004) * t3826;
t3672 = (t3778 * t4215 + t3912 * t4004) * t3826;
t3671 = (-t3781 * t4218 - t3908 * t4005) * t3826;
t3670 = (-t3778 * t4218 + t3912 * t4005) * t3826;
t3668 = (t3777 * t4219 - t3907 * t4006) * t3823;
t3667 = (t3776 * t4219 + t3911 * t4006) * t3823;
t3666 = (-t3777 * t4220 - t3907 * t4007) * t3823;
t3665 = (-t3776 * t4220 + t3911 * t4007) * t3823;
t3656 = t3735 * t3931 + t3766 * t4391;
t3655 = t3734 * t3931 + t3765 * t4393;
t3654 = t3733 * t3931 + t3764 * t4395;
t3652 = t3732 * t3931 + t3762 * t4403;
t3651 = -t3731 * t3950 - t3783 * t4237;
t3650 = -t3730 * t3950 - t3780 * t4237;
t3649 = -t3729 * t3948 - t3782 * t4253;
t3648 = -t3728 * t3948 - t3779 * t4253;
t3647 = -t3727 * t3946 - t3781 * t4269;
t3646 = -t3726 * t3946 - t3778 * t4269;
t3645 = -t3731 * t3944 + t3783 * t4236;
t3644 = -t3730 * t3944 + t3780 * t4236;
t3643 = -t3729 * t3942 + t3782 * t4252;
t3642 = -t3728 * t3942 + t3779 * t4252;
t3641 = -t3727 * t3940 + t3781 * t4268;
t3640 = -t3726 * t3940 + t3778 * t4268;
t3638 = -t3724 * t3934 - t3776 * t4283;
t3636 = -t3724 * t3932 + t3776 * t4282;
t3635 = pkin(6) * t3766 + t3664 * t4397;
t3634 = pkin(6) * t3765 + t3663 * t4399;
t3633 = pkin(6) * t3764 + t3662 * t4401;
t3632 = pkin(6) * t3762 + t3661 * t4405;
t3629 = -t3656 * t3944 - t3950 * t4324;
t3628 = t3656 * t3950 - t3944 * t4324;
t3627 = -t3655 * t3942 - t3948 * t4327;
t3626 = t3655 * t3948 - t3942 * t4327;
t3625 = -t3654 * t3940 - t3946 * t4330;
t3624 = t3654 * t3946 - t3940 * t4330;
t3623 = -t3652 * t3932 - t3934 * t4333;
t3622 = t3652 * t3934 - t3932 * t4333;
t3619 = -t3944 * t4525 + t3950 * t4056;
t3618 = -t3944 * t4056 - t3950 * t4525;
t3617 = -t3942 * t4526 + t3948 * t4057;
t3616 = -t3942 * t4057 - t3948 * t4526;
t3615 = -t3940 * t4527 + t3946 * t4058;
t3614 = -t3940 * t4058 - t3946 * t4527;
t3613 = -t3932 * t4528 + t3934 * t4059;
t3612 = -t3932 * t4059 - t3934 * t4528;
t3611 = -t3635 * t3950 - t3664 * t4376;
t3610 = -t3634 * t3948 - t3663 * t4378;
t3609 = -t3633 * t3946 - t3662 * t4380;
t3608 = -t3635 * t3944 + t3664 * t4370;
t3607 = -t3634 * t3942 + t3663 * t4372;
t3606 = -t3633 * t3940 + t3662 * t4374;
t3605 = -t3632 * t3934 - t3661 * t4384;
t3604 = -t3632 * t3932 + t3661 * t4382;
t1 = [(t3776 ^ 2 * t3824 + t3778 ^ 2 * t3827 + t3779 ^ 2 * t3829 + t3780 ^ 2 * t3831) * MDP(1) + (t3851 * t4454 + t3852 * t4441 + t3853 * t4428 + t3902 * t4279) * MDP(2) + (t3902 * t4166 + t3903 * t4264 + t3904 * t4248 + t3905 * t4232) * MDP(5) + (t3902 * t4101 + t3903 * t4157 + t3904 * t4146 + t3905 * t4135) * t4544 + t3888 + ((-t3680 * t4409 + t3715 * t3780) * MDP(10) + (-t3678 * t4409 + t3714 * t3780) * MDP(11)) * t3830 + ((-t3676 * t4411 + t3711 * t3779) * MDP(10) + (-t3674 * t4411 + t3710 * t3779) * MDP(11)) * t3828 + ((-t3672 * t4413 + t3707 * t3778) * MDP(10) + (-t3670 * t4413 + t3706 * t3778) * MDP(11)) * t3826 + ((-t3667 * t4573 + t3697 * t3776) * MDP(10) + (-t3665 * t4573 + t3696 * t3776) * MDP(11)) * t3823 + (t3814 * t4454 + t3815 * t4441 + t3816 * t4428 + t3902 * t4491) * t4514 + ((-t3778 * t4152 - t3779 * t4141 - t3780 * t4130) * t4356 + (t3778 * t4153 + t3779 * t4142 + t3780 * t4131) * t4355 + t3776 * t4464 * t4570) * t3929 + ((t3903 * t4175 + t3904 * t4173 + t3905 * t4171) * t4354 + (t3903 * t4174 + t3904 * t4172 + t3905 * t4170) * t4353 + (-t3640 * t4294 - t3642 * t4290 - t3644 * t4286) * MDP(10) + (-t3646 * t4294 - t3648 * t4290 - t3650 * t4286) * MDP(11) + ((-MDP(10) * t3636 - MDP(11) * t3638) * t4470 + t3902 * t3975) * t3813) * t3962; ((-t3673 * t4413 + t3704 * t3778) * MDP(10) + (-t3671 * t4413 + t3705 * t3778) * MDP(11)) * t3826 + ((-t3637 * t4304 - t3641 * t4294 - t3643 * t4290 - t3645 * t4286) * MDP(10) + (-t3639 * t4304 - t3647 * t4294 - t3649 * t4290 - t3651 * t4286) * MDP(11)) * t3962 + ((-t3681 * t4409 + t3712 * t3780) * MDP(10) + (-t3679 * t4409 + t3713 * t3780) * MDP(11)) * t3830 + ((-t3668 * t4573 + t3694 * t3776) * MDP(10) + (-t3666 * t4573 + t3695 * t3776) * MDP(11)) * t3823 + ((-t3677 * t4411 + t3708 * t3779) * MDP(10) + (-t3675 * t4411 + t3709 * t3779) * MDP(11)) * t3828 + t4587; ((-t3703 * t4409 + t3722 * t3780) * MDP(10) + (-t3702 * t4409 + t3723 * t3780) * MDP(11)) * t3830 + ((-t3701 * t4411 + t3720 * t3779) * MDP(10) + (-t3700 * t4411 + t3721 * t3779) * MDP(11)) * t3828 + ((-t3699 * t4413 + t3718 * t3778) * MDP(10) + (-t3698 * t4413 + t3719 * t3778) * MDP(11)) * t3826 + ((-t3693 * t4573 + t3716 * t3776) * MDP(10) + (-t3692 * t4573 + t3717 * t3776) * MDP(11)) * t3823 + ((-t3684 * t4304 - t3686 * t4294 - t3687 * t4290 - t3688 * t4286) * MDP(10) + (-t3685 * t4304 - t3689 * t4294 - t3690 * t4290 - t3691 * t4286) * MDP(11) + t4584) * t3962 + t4560; (t3661 * t4509 + t3662 * t4506 + t3663 * t4505 + t3664 * t4504) * MDP(1) + (-t3764 * t4270 - t3765 * t4254 - t3766 * t4238 - t3911 * t4323) * MDP(2) + (-t4029 * t4431 - t4031 * t4444 - t4033 * t4457 + t4035 * t4466) * t4523 + (t4029 * t4433 + t4031 * t4446 + t4033 * t4459 - t4035 * t4468) * t4521 + (-t3911 * t4194 - t3912 * t4189 - t3913 * t4184 - t3914 * t4179) * MDP(5) + (-t3911 * t4116 - t3912 * t4115 - t3913 * t4114 - t3914 * t4113) * t4544 + (-t3911 * t4207 - t3912 * t4204 - t3913 * t4201 - t3914 * t4198 + (-t3911 * t4196 - t3912 * t4192 - t3913 * t4187 - t3914 * t4182) * t3962) * MDP(7) + (-t3911 * t4206 - t3912 * t4203 - t3913 * t4200 - t3914 * t4197 + (-t3911 * t4195 - t3912 * t4191 - t3913 * t4186 - t3914 * t4181) * t3962) * MDP(8) + (-t3732 * t4304 - t3733 * t4294 - t3734 * t4290 - t3735 * t4286) * t4515 + ((-t3619 * t4409 + t3628 * t3780) * t3830 + (-t3617 * t4411 + t3626 * t3779) * t3828 + (-t3615 * t4413 + t3624 * t3778) * t3826 + (-t3613 * t4573 + t3622 * t3776) * t3823 + (-t3604 * t4304 - t3606 * t4294 - t3607 * t4290 - t3608 * t4286) * t3962) * MDP(10) + ((-t3618 * t4409 + t3629 * t3780) * t3830 + (-t3616 * t4411 + t3627 * t3779) * t3828 + (-t3614 * t4413 + t3625 * t3778) * t3826 + (-t3612 * t4573 + t3623 * t3776) * t3823 + (-t3605 * t4304 - t3609 * t4294 - t3610 * t4290 - t3611 * t4286) * t3962) * MDP(11) + t4077; ((t3667 * t4574 + t3697 * t3777) * MDP(10) + (t3665 * t4574 + t3696 * t3777) * MDP(11)) * t3823 + ((t3636 * t4305 + t3640 * t4295 + t3642 * t4291 + t3644 * t4287) * MDP(10) + (t3638 * t4305 + t3646 * t4295 + t3648 * t4291 + t3650 * t4287) * MDP(11)) * t3962 + ((t3672 * t4414 + t3707 * t3781) * MDP(10) + (t3670 * t4414 + t3706 * t3781) * MDP(11)) * t3826 + ((t3680 * t4410 + t3715 * t3783) * MDP(10) + (t3678 * t4410 + t3714 * t3783) * MDP(11)) * t3830 + ((t3676 * t4412 + t3711 * t3782) * MDP(10) + (t3674 * t4412 + t3710 * t3782) * MDP(11)) * t3828 + t4587; (t3777 ^ 2 * t3824 + t3781 ^ 2 * t3827 + t3782 ^ 2 * t3829 + t3783 ^ 2 * t3831) * MDP(1) + (t3851 * t4455 + t3852 * t4442 + t3853 * t4429 + t3898 * t4279) * MDP(2) + (t3898 * t4166 + t3899 * t4264 + t3900 * t4248 + t3901 * t4232) * MDP(5) + (t3898 * t4101 + t3899 * t4157 + t3900 * t4146 + t3901 * t4135) * t4544 + t3888 + ((t3681 * t4410 + t3712 * t3783) * MDP(10) + (t3679 * t4410 + t3713 * t3783) * MDP(11)) * t3830 + ((t3677 * t4412 + t3708 * t3782) * MDP(10) + (t3675 * t4412 + t3709 * t3782) * MDP(11)) * t3828 + ((t3673 * t4414 + t3704 * t3781) * MDP(10) + (t3671 * t4414 + t3705 * t3781) * MDP(11)) * t3826 + ((t3668 * t4574 + t3694 * t3777) * MDP(10) + (t3666 * t4574 + t3695 * t3777) * MDP(11)) * t3823 + (t3814 * t4455 + t3815 * t4442 + t3816 * t4429 + t3898 * t4491) * t4514 + ((t3781 * t4154 + t3782 * t4143 + t3783 * t4132) * t4356 + (-t3781 * t4155 - t3782 * t4144 - t3783 * t4133) * t4355 - t3777 * t4465 * t4570) * t3929 + ((t3899 * t4175 + t3900 * t4173 + t3901 * t4171) * t4354 + (t3899 * t4174 + t3900 * t4172 + t3901 * t4170) * t4353 + (t3641 * t4295 + t3643 * t4291 + t3645 * t4287) * MDP(10) + (t3647 * t4295 + t3649 * t4291 + t3651 * t4287) * MDP(11) + (t3898 * t3975 + t3907 * t4023) * t3813) * t3962; ((t3703 * t4410 + t3722 * t3783) * MDP(10) + (t3702 * t4410 + t3723 * t3783) * MDP(11)) * t3830 + ((t3701 * t4412 + t3720 * t3782) * MDP(10) + (t3700 * t4412 + t3721 * t3782) * MDP(11)) * t3828 + ((t3699 * t4414 + t3718 * t3781) * MDP(10) + (t3698 * t4414 + t3719 * t3781) * MDP(11)) * t3826 + ((t3693 * t4574 + t3716 * t3777) * MDP(10) + (t3692 * t4574 + t3717 * t3777) * MDP(11)) * t3823 + ((t3684 * t4305 + t3686 * t4295 + t3687 * t4291 + t3688 * t4287) * MDP(10) + (t3685 * t4305 + t3689 * t4295 + t3690 * t4291 + t3691 * t4287) * MDP(11) + t4117 * t3812 * t4278) * t3962 + t4579; (t3661 * t4508 + t3662 * t4503 + t3663 * t4502 + t3664 * t4501) * MDP(1) + (t3764 * t4271 + t3765 * t4255 + t3766 * t4239 + t3907 * t4323) * MDP(2) + (t4028 * t4431 + t4030 * t4444 + t4032 * t4457 - t4034 * t4466) * t4523 + (-t4028 * t4433 - t4030 * t4446 - t4032 * t4459 + t4034 * t4468) * t4521 + (t3907 * t4194 + t3908 * t4189 + t3909 * t4184 + t3910 * t4179) * MDP(5) + (t3907 * t4116 + t3908 * t4115 + t3909 * t4114 + t3910 * t4113) * t4544 + (t3907 * t4207 + t3908 * t4204 + t3909 * t4201 + t3910 * t4198 + (t3907 * t4196 + t3908 * t4192 + t3909 * t4187 + t3910 * t4182) * t3962) * MDP(7) + (t3907 * t4206 + t3908 * t4203 + t3909 * t4200 + t3910 * t4197 + (t3907 * t4195 + t3908 * t4191 + t3909 * t4186 + t3910 * t4181) * t3962) * MDP(8) + (t3732 * t4305 + t3733 * t4295 + t3734 * t4291 + t3735 * t4287) * t4515 + ((t3619 * t4410 + t3628 * t3783) * t3830 + (t3617 * t4412 + t3626 * t3782) * t3828 + (t3615 * t4414 + t3624 * t3781) * t3826 + (t3613 * t4574 + t3622 * t3777) * t3823 + (t3604 * t4305 + t3606 * t4295 + t3607 * t4291 + t3608 * t4287) * t3962) * MDP(10) + ((t3618 * t4410 + t3629 * t3783) * t3830 + (t3616 * t4412 + t3627 * t3782) * t3828 + (t3614 * t4414 + t3625 * t3781) * t3826 + (t3612 * t4574 + t3623 * t3777) * t3823 + (t3605 * t4305 + t3609 * t4295 + t3610 * t4291 + t3611 * t4287) * t3962) * MDP(11) + t4209; ((t3680 * t3865 + t3715 * t3810) * MDP(10) + (t3678 * t3865 + t3714 * t3810) * MDP(11)) * t3830 + ((t3676 * t3864 + t3711 * t3809) * MDP(10) + (t3674 * t3864 + t3710 * t3809) * MDP(11)) * t3828 + ((t3672 * t3863 + t3707 * t3808) * MDP(10) + (t3670 * t3863 + t3706 * t3808) * MDP(11)) * t3826 + ((t3667 * t3850 + t3697 * t3807) * MDP(10) + (t3665 * t3850 + t3696 * t3807) * MDP(11)) * t3823 + ((t3636 * t4490 + t3640 * t4486 + t3642 * t4484 + t3644 * t4482) * MDP(10) + (t3638 * t4490 + t3646 * t4486 + t3648 * t4484 + t3650 * t4482) * MDP(11) + t4584) * t3962 + t4560; ((t3681 * t3865 + t3712 * t3810) * MDP(10) + (t3679 * t3865 + t3713 * t3810) * MDP(11)) * t3830 + ((t3677 * t3864 + t3708 * t3809) * MDP(10) + (t3675 * t3864 + t3709 * t3809) * MDP(11)) * t3828 + ((t3673 * t3863 + t3704 * t3808) * MDP(10) + (t3671 * t3863 + t3705 * t3808) * MDP(11)) * t3826 + ((t3668 * t3850 + t3694 * t3807) * MDP(10) + (t3666 * t3850 + t3695 * t3807) * MDP(11)) * t3823 + ((t3641 * t4486 + t3643 * t4484 + t3645 * t4482) * MDP(10) + (t3647 * t4486 + t3649 * t4484 + t3651 * t4482) * MDP(11) + (t4574 * t4575 + t4023) * t3812) * t3962 + t4579; (t3807 ^ 2 * t3824 + t3808 ^ 2 * t3827 + t3809 ^ 2 * t3829 + t3810 ^ 2 * t3831) * MDP(1) + (t3824 * t3847 + t3827 * t3854 + t3829 * t3855 + t3831 * t3856) * MDP(2) + (t3847 * t4463 + t3854 * t4451 + t3855 * t4438 + t3856 * t4425) * MDP(5) + (t3847 * t4273 + t3854 * t4257 + t3855 * t4241 + t3856 * t4225) * t4544 + MDP(15) + ((t3703 * t3865 + t3722 * t3810) * MDP(10) + (t3702 * t3865 + t3723 * t3810) * MDP(11)) * t3830 + ((t3701 * t3864 + t3720 * t3809) * MDP(10) + (t3700 * t3864 + t3721 * t3809) * MDP(11)) * t3828 + ((t3699 * t3863 + t3718 * t3808) * MDP(10) + (t3698 * t3863 + t3719 * t3808) * MDP(11)) * t3826 + ((t3693 * t3850 + t3716 * t3807) * MDP(10) + (t3692 * t3850 + t3717 * t3807) * MDP(11)) * t3823 + (t3812 ^ 2 * t3824 + t3817 ^ 2 * t3827 + t3818 ^ 2 * t3829 + t3819 ^ 2 * t3831) * t4514 + 0.2e1 * ((t3808 * t3863 * t4449 + t3809 * t3864 * t4436 + t3810 * t3865 * t4423 + t3850 * t4310) * MDP(3) + (-t3807 * t4274 - t3808 * t4260 - t3809 * t4244 - t3810 * t4228) * MDP(4)) * t3929 + ((t3684 * t4490 + t3686 * t4486 + t3687 * t4484 + t3688 * t4482) * MDP(10) + (t3685 * t4490 + t3689 * t4486 + t3690 * t4484 + t3691 * t4482) * MDP(11) + (t3932 * t4307 + t3940 * t4301 + t3942 * t4299 + t3944 * t4297) * t4354 + (t3934 * t4307 + t3946 * t4301 + t3948 * t4299 + t3950 * t4297) * t4353) * t3962; (t3661 * t4500 + t3662 * t4497 + t3663 * t4495 + t3664 * t4493) * MDP(1) + (t3762 * t4471 + t3764 * t4461 + t3765 * t4448 + t3766 * t4435) * MDP(2) + (t3850 * t4322 + t3863 * t4319 + t3864 * t4316 + t3865 * t4313) * MDP(5) + (t3850 * t4193 + t3863 * t4188 + t3864 * t4183 + t3865 * t4178) * t4544 + (t3850 * t4335 + t3863 * t4332 + t3864 * t4329 + t3865 * t4326) * MDP(7) + (t3850 * t4334 + t3863 * t4331 + t3864 * t4328 + t3865 * t4325) * MDP(8) + (t3613 * t4471 + t3615 * t4461 + t3617 * t4448 + t3619 * t4435 + t3622 * t4500 + t3624 * t4497 + t3626 * t4495 + t3628 * t4493) * MDP(10) + (t3612 * t4471 + t3614 * t4461 + t3616 * t4448 + t3618 * t4435 + t3623 * t4500 + t3625 * t4497 + t3627 * t4495 + t3629 * t4493) * MDP(11) + ((t3812 * t4321 + t3817 * t4318 + t3818 * t4315 + t3819 * t4312) * MDP(7) + (t3812 * t4320 + t3817 * t4317 + t3818 * t4314 + t3819 * t4311) * MDP(8) + (t3732 * t4490 + t3733 * t4486 + t3734 * t4484 + t3735 * t4482) * MDP(9) + (t3604 * t4490 + t3606 * t4486 + t3607 * t4484 + t3608 * t4482) * MDP(10) + (t3605 * t4490 + t3609 * t4486 + t3610 * t4484 + t3611 * t4482) * MDP(11)) * t3962 + (-t4551 * t3823 * (t3661 * t3850 + t3762 * t3807) + (MDP(3) * t3947 - MDP(4) * t3941) * t3826 * (t3662 * t3863 + t3764 * t3808) + (MDP(3) * t3949 - MDP(4) * t3943) * t3828 * (t3663 * t3864 + t3765 * t3809) + (MDP(3) * t3951 - MDP(4) * t3945) * t3830 * (t3664 * t3865 + t3766 * t3810)) * t3929; (t3657 * t4509 + t3658 * t4506 + t3659 * t4505 + t3660 * t4504) * MDP(1) + (-t3840 * t4167 - t3912 * t4160 - t3913 * t4149 - t3914 * t4138) * MDP(2) + (-t3935 * t3987 - t3947 * t3985 - t3949 * t3983 - t3951 * t3981) * t4523 + (t3933 * t3987 + t3941 * t3985 + t3943 * t3983 + t3945 * t3981) * t4521 + (-t3840 * t4102 - t3912 * t4096 - t3913 * t4089 - t3914 * t4082) * MDP(5) + (-t3840 * t4039 - t3912 * t4038 - t3913 * t4037 - t3914 * t4036) * t4544 + (-t3840 * t4021 - t3940 * t4018 - t3942 * t4016 - t3944 * t4014) * t4518 + (-t3840 * t4020 - t3946 * t4018 - t3948 * t4016 - t3950 * t4014) * t4516 + (-t3814 * t4265 - t3815 * t4249 - t3816 * t4233 - t3840 * t4309) * t4514 + (t3667 * t4284 + t3672 * t4272 + t3676 * t4256 + t3680 * t4240 + t3657 * t3697 + t3658 * t3707 + t3659 * t3711 + t3660 * t3715 + (t3636 * t4306 + t3640 * t4296 + t3642 * t4292 + t3644 * t4288) * t3962) * MDP(10) + (t3665 * t4284 + t3670 * t4272 + t3674 * t4256 + t3678 * t4240 + t3657 * t3696 + t3658 * t3706 + t3659 * t3710 + t3660 * t3714 + (t3638 * t4306 + t3646 * t4296 + t3648 * t4292 + t3650 * t4288) * t3962) * MDP(11) + t4077; (t3657 * t4508 + t3658 * t4503 + t3659 * t4502 + t3660 * t4501) * MDP(1) + (t3908 * t4160 + t3909 * t4149 + t3910 * t4138 + t4103) * MDP(2) + (t3935 * t3986 + t3947 * t3984 + t3949 * t3982 + t3951 * t3980) * t4523 + (-t3933 * t3986 - t3941 * t3984 - t3943 * t3982 - t3945 * t3980) * t4521 + (t3908 * t4096 + t3909 * t4089 + t3910 * t4082 + t3920 * t4103) * MDP(5) + (t3840 * t3907 * t4101 + t3908 * t4038 + t3909 * t4037 + t3910 * t4036) * t4544 + (t3932 * t4022 + t3940 * t4019 + t3942 * t4017 + t3944 * t4015) * t4518 + (t3934 * t4022 + t3946 * t4019 + t3948 * t4017 + t3950 * t4015) * t4516 + (t3811 * t4280 + t3814 * t4266 + t3815 * t4250 + t3816 * t4234) * t4514 + (t3668 * t4284 + t3673 * t4272 + t3677 * t4256 + t3681 * t4240 + t3657 * t3694 + t3658 * t3704 + t3659 * t3708 + t3660 * t3712 + (t3637 * t4306 + t3641 * t4296 + t3643 * t4292 + t3645 * t4288) * t3962) * MDP(10) + (t3666 * t4284 + t3671 * t4272 + t3675 * t4256 + t3679 * t4240 + t3657 * t3695 + t3658 * t3705 + t3659 * t3709 + t3660 * t3713 + (t3639 * t4306 + t3647 * t4296 + t3649 * t4292 + t3651 * t4288) * t3962) * MDP(11) + t4209; (t3657 * t4500 + t3658 * t4497 + t3659 * t4495 + t3660 * t4493) * MDP(1) + (t3863 * t4267 + t3864 * t4251 + t3865 * t4235 + t4168) * MDP(2) + (-t3935 * t3995 - t3947 * t3994 - t3949 * t3993 - t3951 * t3992) * t4523 + (t3933 * t3995 + t3941 * t3994 + t3943 * t3993 + t3945 * t3992) * t4521 + (t3863 * t4159 + t3864 * t4148 + t3865 * t4137 + t3920 * t4168) * MDP(5) + (t3863 * t4095 + t3864 * t4088 + t3865 * t4081 + t4162 * t4422) * t4544 + (-t3932 * t3999 + t3940 * t3998 + t3942 * t3997 + t3944 * t3996) * t4518 + (-t3934 * t3999 + t3946 * t3998 + t3948 * t3997 + t3950 * t3996) * t4516 + (t3840 * t4308 + t3841 * t4302 + t3842 * t4300 + t3843 * t4298) * t4514 + (t3693 * t4284 + t3699 * t4272 + t3701 * t4256 + t3703 * t4240 + t3657 * t3716 + t3658 * t3718 + t3659 * t3720 + t3660 * t3722 + (t3684 * t4306 + t3686 * t4296 + t3687 * t4292 + t3688 * t4288) * t3962) * MDP(10) + (t3692 * t4284 + t3698 * t4272 + t3700 * t4256 + t3702 * t4240 + t3657 * t3717 + t3658 * t3719 + t3659 * t3721 + t3660 * t3723 + (t3685 * t4306 + t3689 * t4296 + t3690 * t4292 + t3691 * t4288) * t3962) * MDP(11); (t3657 * t3661 + t3658 * t3662 + t3659 * t3663 + t3660 * t3664) * MDP(1) + (t3762 * t4284 + t4180 + t4185 + t4190) * MDP(2) + (-t3935 * t4013 - t3947 * t4012 - t3949 * t4011 - t3951 * t4010) * t4523 + (t3933 * t4013 + t3941 * t4012 + t3943 * t4011 + t3945 * t4010) * t4521 + (t3840 * t4194 + t3922 * t4190 + t3923 * t4185 + t3924 * t4180) * MDP(5) + (t3840 * t4116 + t4126 * t4510 + t4127 * t4511 + t4128 * t4512) * t4544 + (t3840 * t4207 + t3940 * t4205 + t3942 * t4202 + t3944 * t4199 + (t3840 * t4196 + t3841 * t4192 + t3842 * t4187 + t3843 * t4182) * t3962) * MDP(7) + (t3840 * t4206 + t3946 * t4205 + t3948 * t4202 + t3950 * t4199 + (t3840 * t4195 + t3841 * t4191 + t3842 * t4186 + t3843 * t4181) * t3962) * MDP(8) + (t3732 * t4306 + t3733 * t4296 + t3734 * t4292 + t3735 * t4288) * t4515 + (t3613 * t4284 + t3615 * t4272 + t3617 * t4256 + t3619 * t4240 + t3657 * t3622 + t3658 * t3624 + t3659 * t3626 + t3660 * t3628 + (t3604 * t4306 + t3606 * t4296 + t3607 * t4292 + t3608 * t4288) * t3962) * MDP(10) + (t3612 * t4284 + t3614 * t4272 + t3616 * t4256 + t3618 * t4240 + t3657 * t3623 + t3658 * t3625 + t3659 * t3627 + t3660 * t3629 + (t3605 * t4306 + t3609 * t4296 + t3610 * t4292 + t3611 * t4288) * t3962) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_4_matlab.m
res = [t1(1), t1(2), t1(3), t1(4); t1(5), t1(6), t1(7), t1(8); t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16);];
MMX  = res;
