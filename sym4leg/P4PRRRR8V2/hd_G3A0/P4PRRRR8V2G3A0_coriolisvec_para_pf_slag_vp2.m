% Calculate vector of centrifugal and coriolis load on the joints for
% P4PRRRR8V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% taucX [4x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_slag_vp2: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:25:55
% EndTime: 2020-08-07 11:26:11
% DurationCPUTime: 16.99s
% Computational Cost: add. (75040->621), mult. (162680->1192), div. (9024->9), fcn. (155268->30), ass. (0->451)
t1176 = sin(qJ(2,1));
t1182 = cos(qJ(2,1));
t1189 = pkin(7) + pkin(6);
t1104 = pkin(2) * t1176 - t1182 * t1189;
t1159 = sin(pkin(4));
t1161 = cos(pkin(4));
t1175 = sin(qJ(3,1));
t1304 = t1161 * t1175;
t1063 = pkin(3) * t1304 + t1104 * t1159;
t1181 = cos(qJ(3,1));
t1319 = t1159 * t1176;
t1156 = t1181 ^ 2;
t1414 = pkin(3) * t1156;
t1031 = 0.1e1 / (pkin(2) * t1304 + t1063 * t1181 + t1319 * t1414);
t1174 = sin(qJ(2,2));
t1180 = cos(qJ(2,2));
t1103 = pkin(2) * t1174 - t1180 * t1189;
t1173 = sin(qJ(3,2));
t1306 = t1161 * t1173;
t1062 = pkin(3) * t1306 + t1103 * t1159;
t1179 = cos(qJ(3,2));
t1321 = t1159 * t1174;
t1155 = t1179 ^ 2;
t1415 = pkin(3) * t1155;
t1030 = 0.1e1 / (pkin(2) * t1306 + t1062 * t1179 + t1321 * t1415);
t1172 = sin(qJ(2,3));
t1178 = cos(qJ(2,3));
t1102 = pkin(2) * t1172 - t1178 * t1189;
t1171 = sin(qJ(3,3));
t1308 = t1161 * t1171;
t1061 = pkin(3) * t1308 + t1102 * t1159;
t1177 = cos(qJ(3,3));
t1323 = t1159 * t1172;
t1154 = t1177 ^ 2;
t1416 = pkin(3) * t1154;
t1029 = 0.1e1 / (pkin(2) * t1308 + t1061 * t1177 + t1323 * t1416);
t1163 = sin(qJ(2,4));
t1165 = cos(qJ(2,4));
t1100 = pkin(2) * t1163 - t1165 * t1189;
t1162 = sin(qJ(3,4));
t1311 = t1161 * t1162;
t1060 = pkin(3) * t1311 + t1100 * t1159;
t1164 = cos(qJ(3,4));
t1327 = t1159 * t1163;
t1151 = t1164 ^ 2;
t1417 = pkin(3) * t1151;
t1028 = 0.1e1 / (pkin(2) * t1311 + t1060 * t1164 + t1327 * t1417);
t1101 = pkin(2) * t1165 + t1163 * t1189;
t1158 = sin(pkin(8));
t1160 = cos(pkin(8));
t1309 = t1161 * t1165;
t1312 = t1160 * t1161;
t1413 = pkin(3) * t1164;
t1020 = (t1158 * t1163 - t1160 * t1309) * t1413 - t1101 * t1312 + t1100 * t1158;
t1329 = t1158 * t1161;
t1021 = (t1158 * t1309 + t1160 * t1163) * t1413 + t1101 * t1329 + t1160 * t1100;
t1186 = xDP(3);
t1191 = xP(4);
t1149 = sin(t1191);
t1150 = cos(t1191);
t1194 = koppelP(4,2);
t1198 = koppelP(4,1);
t1092 = t1149 * t1198 + t1150 * t1194;
t1096 = -t1149 * t1194 + t1150 * t1198;
t1167 = legFrame(4,2);
t1137 = sin(t1167);
t1141 = cos(t1167);
t1185 = xDP(4);
t1187 = xDP(2);
t1188 = xDP(1);
t1230 = (t1096 * t1185 + t1187) * t1137 - (-t1092 * t1185 + t1188) * t1141;
t1204 = 0.1e1 / pkin(3);
t1360 = t1028 * t1204;
t981 = (-t1230 * t1020 + t1021 * t1186) * t1360;
t1395 = t1028 * t981;
t1184 = mrSges(3,1) * pkin(2);
t1132 = mrSges(3,1) * pkin(6) - Ifges(3,5);
t1422 = t1132 / 0.2e1;
t1131 = mrSges(3,2) * pkin(6) - Ifges(3,6);
t1423 = -t1131 / 0.2e1;
t1166 = Ifges(3,1) - Ifges(3,2);
t1183 = pkin(2) * mrSges(3,2);
t1428 = -2 * Ifges(3,4);
t1429 = Ifges(3,4) + t1151 * t1428 + (-t1162 * t1166 + t1183) * t1164;
t1310 = t1161 * t1163;
t1076 = t1158 * t1310 - t1160 * t1165;
t1326 = t1159 * t1164;
t1041 = t1076 * t1162 + t1158 * t1326;
t1077 = t1158 * t1165 + t1160 * t1310;
t1042 = t1077 * t1162 + t1160 * t1326;
t993 = (t1041 * t1186 + t1230 * t1042) * t1028;
t916 = (t1423 * t1162 + t1422 * t1164) * t981 + (t1184 * t1162 + t1429) * t993;
t1457 = -0.2e1 * t916 * t1395;
t1452 = -0.2e1 * t981;
t1105 = pkin(2) * t1178 + t1172 * t1189;
t1302 = t1161 * t1178;
t1412 = pkin(3) * t1177;
t1022 = (t1158 * t1172 - t1160 * t1302) * t1412 - t1105 * t1312 + t1102 * t1158;
t1025 = (t1158 * t1302 + t1160 * t1172) * t1412 + t1105 * t1329 + t1160 * t1102;
t1195 = koppelP(3,2);
t1199 = koppelP(3,1);
t1093 = t1149 * t1199 + t1150 * t1195;
t1097 = -t1149 * t1195 + t1150 * t1199;
t1168 = legFrame(3,2);
t1138 = sin(t1168);
t1142 = cos(t1168);
t1229 = (t1097 * t1185 + t1187) * t1138 - (-t1093 * t1185 + t1188) * t1142;
t1357 = t1029 * t1204;
t986 = (-t1229 * t1022 + t1025 * t1186) * t1357;
t1451 = -0.2e1 * t986;
t1106 = pkin(2) * t1180 + t1174 * t1189;
t1301 = t1161 * t1180;
t1411 = pkin(3) * t1179;
t1023 = (t1158 * t1174 - t1160 * t1301) * t1411 - t1106 * t1312 + t1103 * t1158;
t1026 = (t1158 * t1301 + t1160 * t1174) * t1411 + t1106 * t1329 + t1160 * t1103;
t1196 = koppelP(2,2);
t1200 = koppelP(2,1);
t1094 = t1149 * t1200 + t1150 * t1196;
t1098 = -t1149 * t1196 + t1150 * t1200;
t1169 = legFrame(2,2);
t1139 = sin(t1169);
t1143 = cos(t1169);
t1228 = (t1098 * t1185 + t1187) * t1139 - (-t1094 * t1185 + t1188) * t1143;
t1354 = t1030 * t1204;
t987 = (-t1228 * t1023 + t1026 * t1186) * t1354;
t1450 = -0.2e1 * t987;
t1107 = pkin(2) * t1182 + t1176 * t1189;
t1300 = t1161 * t1182;
t1410 = pkin(3) * t1181;
t1024 = (t1158 * t1176 - t1160 * t1300) * t1410 - t1107 * t1312 + t1104 * t1158;
t1027 = (t1158 * t1300 + t1160 * t1176) * t1410 + t1107 * t1329 + t1160 * t1104;
t1197 = koppelP(1,2);
t1201 = koppelP(1,1);
t1095 = t1149 * t1201 + t1150 * t1197;
t1099 = -t1149 * t1197 + t1150 * t1201;
t1170 = legFrame(1,2);
t1140 = sin(t1170);
t1144 = cos(t1170);
t1227 = (t1099 * t1185 + t1187) * t1140 - (-t1095 * t1185 + t1188) * t1144;
t1351 = t1031 * t1204;
t988 = (-t1227 * t1024 + t1027 * t1186) * t1351;
t1449 = -0.2e1 * t988;
t1409 = mrSges(3,1) * t1162;
t1238 = mrSges(3,2) * t1164 + t1409;
t1254 = t1164 * mrSges(3,1) - mrSges(3,2) * t1162;
t1040 = t1254 * t1161 - t1238 * t1327;
t1129 = m(3) * pkin(6) - mrSges(2,2) + mrSges(3,3);
t1145 = m(3) * pkin(2) + mrSges(2,1);
t1152 = m(1) + m(2) + m(3);
t1338 = ((t1254 + t1145) * t1165 + t1129 * t1163) * t1159;
t1387 = t1165 * t993;
t1427 = pkin(3) * t981;
t1282 = t1162 * t1427;
t1297 = t1163 * t1164;
t1325 = t1159 * t1165;
t1328 = t1159 * t1162;
t1383 = t1189 * t993;
t1270 = t1162 * t1383;
t936 = t1270 - t1427;
t900 = ((t1161 * t981 + t993 * t1325) * t1417 + ((-t1282 + t1383) * t1163 + pkin(2) * t1387) * t1326 + t936 * t1161) * t1028 * t993 + pkin(3) * (t981 * t1325 + (t1151 * t1161 - t1297 * t1328 - t1161) * t993) * t1395;
t1072 = pkin(3) * t1297 + t1100;
t1299 = t1161 * t1204;
t1205 = pkin(2) ^ 2;
t1128 = t1189 ^ 2 + t1205;
t1203 = pkin(3) ^ 2;
t1396 = 0.2e1 * pkin(2) * pkin(3);
t1400 = (-t1189 * t1282 + (t1151 * t1203 + t1164 * t1396 + t1128) * t993) * t993;
t904 = t1028 * t1299 * t1400 + (-t1161 * t1270 + (-t1072 * t1328 + (pkin(2) * t1164 + t1417) * t1161) * t981) / (t1072 * t1326 + (pkin(2) + t1413) * t1311) * t981;
t912 = (-t1164 * t1400 - (pkin(2) * t981 - t1164 * t936) * t1427) * t1028;
t980 = t981 ^ 2;
t992 = t993 ^ 2;
t1448 = -t1040 * t904 - t1152 * t912 - t900 * t1338 + ((-t1145 * t992 - t1254 * (t992 + t980)) * t1163 + (t1129 * t993 + t1238 * t1452) * t1387) * t1159 - t980 * t1161 * t1238;
t1408 = mrSges(3,1) * t1171;
t1237 = mrSges(3,2) * t1177 + t1408;
t1253 = t1177 * mrSges(3,1) - mrSges(3,2) * t1171;
t1049 = t1253 * t1161 - t1237 * t1323;
t1337 = ((t1253 + t1145) * t1178 + t1129 * t1172) * t1159;
t1307 = t1161 * t1172;
t1079 = t1158 * t1307 - t1160 * t1178;
t1318 = t1159 * t1177;
t1043 = t1079 * t1171 + t1158 * t1318;
t1082 = t1158 * t1178 + t1160 * t1307;
t1046 = t1082 * t1171 + t1160 * t1318;
t997 = (t1043 * t1186 + t1229 * t1046) * t1029;
t1386 = t1178 * t997;
t1426 = pkin(3) * t986;
t1281 = t1171 * t1426;
t1293 = t1172 * t1177;
t1317 = t1159 * t1178;
t1324 = t1159 * t1171;
t1382 = t1189 * t997;
t1394 = t1029 * t986;
t1269 = t1171 * t1382;
t938 = t1269 - t1426;
t901 = ((t1161 * t986 + t997 * t1317) * t1416 + ((-t1281 + t1382) * t1172 + pkin(2) * t1386) * t1318 + t938 * t1161) * t1029 * t997 + pkin(3) * (t986 * t1317 + (t1154 * t1161 - t1293 * t1324 - t1161) * t997) * t1394;
t1073 = pkin(3) * t1293 + t1102;
t1399 = (-t1189 * t1281 + (t1154 * t1203 + t1177 * t1396 + t1128) * t997) * t997;
t905 = t1029 * t1299 * t1399 + (-t1161 * t1269 + (-t1073 * t1324 + t1161 * (pkin(2) * t1177 + t1416)) * t986) / (t1073 * t1318 + (pkin(2) + t1412) * t1308) * t986;
t913 = (-t1177 * t1399 - (pkin(2) * t986 - t1177 * t938) * t1426) * t1029;
t983 = t986 ^ 2;
t994 = t997 ^ 2;
t1447 = -t1049 * t905 - t1152 * t913 - t901 * t1337 + ((-t1145 * t994 - t1253 * (t994 + t983)) * t1172 + (t1129 * t997 + t1237 * t1451) * t1386) * t1159 - t983 * t1161 * t1237;
t1407 = mrSges(3,1) * t1173;
t1236 = mrSges(3,2) * t1179 + t1407;
t1252 = t1179 * mrSges(3,1) - mrSges(3,2) * t1173;
t1050 = t1252 * t1161 - t1236 * t1321;
t1336 = ((t1252 + t1145) * t1180 + t1129 * t1174) * t1159;
t1305 = t1161 * t1174;
t1080 = t1158 * t1305 - t1160 * t1180;
t1316 = t1159 * t1179;
t1044 = t1080 * t1173 + t1158 * t1316;
t1083 = t1158 * t1180 + t1160 * t1305;
t1047 = t1083 * t1173 + t1160 * t1316;
t998 = (t1044 * t1186 + t1228 * t1047) * t1030;
t1385 = t1180 * t998;
t1425 = pkin(3) * t987;
t1280 = t1173 * t1425;
t1292 = t1174 * t1179;
t1315 = t1159 * t1180;
t1322 = t1159 * t1173;
t1381 = t1189 * t998;
t1393 = t1030 * t987;
t1268 = t1173 * t1381;
t939 = t1268 - t1425;
t902 = ((t1161 * t987 + t998 * t1315) * t1415 + ((-t1280 + t1381) * t1174 + pkin(2) * t1385) * t1316 + t939 * t1161) * t1030 * t998 + pkin(3) * (t987 * t1315 + (t1155 * t1161 - t1292 * t1322 - t1161) * t998) * t1393;
t1074 = pkin(3) * t1292 + t1103;
t1398 = (-t1189 * t1280 + (t1155 * t1203 + t1179 * t1396 + t1128) * t998) * t998;
t906 = t1030 * t1299 * t1398 + (-t1161 * t1268 + (-t1074 * t1322 + t1161 * (pkin(2) * t1179 + t1415)) * t987) / (t1074 * t1316 + (pkin(2) + t1411) * t1306) * t987;
t914 = (-t1179 * t1398 - (pkin(2) * t987 - t1179 * t939) * t1425) * t1030;
t984 = t987 ^ 2;
t995 = t998 ^ 2;
t1446 = -t1050 * t906 - t1152 * t914 - t902 * t1336 + ((-t1145 * t995 - t1252 * (t995 + t984)) * t1174 + (t1129 * t998 + t1236 * t1450) * t1385) * t1159 - t984 * t1161 * t1236;
t1406 = mrSges(3,1) * t1175;
t1235 = mrSges(3,2) * t1181 + t1406;
t1251 = t1181 * mrSges(3,1) - mrSges(3,2) * t1175;
t1051 = t1251 * t1161 - t1235 * t1319;
t1335 = ((t1251 + t1145) * t1182 + t1129 * t1176) * t1159;
t1303 = t1161 * t1176;
t1081 = t1158 * t1303 - t1160 * t1182;
t1314 = t1159 * t1181;
t1045 = t1081 * t1175 + t1158 * t1314;
t1084 = t1158 * t1182 + t1160 * t1303;
t1048 = t1084 * t1175 + t1160 * t1314;
t999 = (t1045 * t1186 + t1227 * t1048) * t1031;
t1384 = t1182 * t999;
t1424 = pkin(3) * t988;
t1279 = t1175 * t1424;
t1291 = t1176 * t1181;
t1313 = t1159 * t1182;
t1320 = t1159 * t1175;
t1380 = t1189 * t999;
t1392 = t1031 * t988;
t1267 = t1175 * t1380;
t940 = t1267 - t1424;
t903 = ((t1161 * t988 + t999 * t1313) * t1414 + ((-t1279 + t1380) * t1176 + pkin(2) * t1384) * t1314 + t940 * t1161) * t1031 * t999 + pkin(3) * (t988 * t1313 + (t1156 * t1161 - t1291 * t1320 - t1161) * t999) * t1392;
t1075 = pkin(3) * t1291 + t1104;
t1397 = (-t1189 * t1279 + (t1156 * t1203 + t1181 * t1396 + t1128) * t999) * t999;
t907 = t1031 * t1299 * t1397 + (-t1161 * t1267 + (-t1075 * t1320 + t1161 * (pkin(2) * t1181 + t1414)) * t988) / (t1075 * t1314 + (pkin(2) + t1410) * t1304) * t988;
t915 = (-t1181 * t1397 - (pkin(2) * t988 - t1181 * t940) * t1424) * t1031;
t985 = t988 ^ 2;
t996 = t999 ^ 2;
t1445 = -t1051 * t907 - t1152 * t915 - t903 * t1335 + ((-t1145 * t996 - t1251 * (t996 + t985)) * t1176 + (t1129 * t999 + t1235 * t1449) * t1384) * t1159 - t985 * t1161 * t1235;
t1440 = t1028 * t1448;
t1439 = t1029 * t1447;
t1438 = t1030 * t1446;
t1437 = t1031 * t1445;
t1432 = Ifges(3,4) + t1156 * t1428 + (-t1166 * t1175 + t1183) * t1181;
t1388 = (pkin(2) * t1406 + t1432) * t996;
t1239 = t1351 * t1388;
t1257 = t1024 * t1351;
t919 = (t1423 * t1175 + t1422 * t1181) * t988 + (t1184 * t1175 + t1432) * t999;
t1275 = t919 * t1392;
t1353 = t1031 * t1048;
t1210 = Ifges(3,1) + Ifges(2,3) + (pkin(6) ^ 2 + t1205) * m(3) + 0.2e1 * pkin(6) * mrSges(3,3);
t1379 = -0.2e1 * t1183;
t1039 = -t1166 * t1156 + 0.2e1 * (Ifges(3,4) * t1175 + t1184) * t1181 + t1175 * t1379 + t1210;
t1088 = -t1131 * t1181 - t1175 * t1132;
t893 = -t1039 * t903 - t1088 * t907 - t915 * t1335;
t899 = -Ifges(3,3) * t907 - t1051 * t915 - t1088 * t903;
t1436 = t1024 * t1239 + 0.2e1 * t1048 * t1275 + t899 * t1257 - t893 * t1353;
t1430 = Ifges(3,4) + t1154 * t1428 + (-t1166 * t1171 + t1183) * t1177;
t1390 = (pkin(2) * t1408 + t1430) * t994;
t1241 = t1357 * t1390;
t1263 = t1022 * t1357;
t917 = (t1423 * t1171 + t1422 * t1177) * t986 + (t1184 * t1171 + t1430) * t997;
t1277 = t917 * t1394;
t1359 = t1029 * t1046;
t1037 = -t1166 * t1154 + 0.2e1 * (Ifges(3,4) * t1171 + t1184) * t1177 + t1171 * t1379 + t1210;
t1086 = -t1131 * t1177 - t1171 * t1132;
t891 = -t1037 * t901 - t1086 * t905 - t913 * t1337;
t897 = -Ifges(3,3) * t905 - t1049 * t913 - t1086 * t901;
t1435 = t1022 * t1241 + 0.2e1 * t1046 * t1277 + t897 * t1263 - t891 * t1359;
t1431 = Ifges(3,4) + t1155 * t1428 + (-t1166 * t1173 + t1183) * t1179;
t1389 = (pkin(2) * t1407 + t1431) * t995;
t1240 = t1354 * t1389;
t1260 = t1023 * t1354;
t918 = (t1423 * t1173 + t1422 * t1179) * t987 + (t1184 * t1173 + t1431) * t998;
t1276 = t918 * t1393;
t1356 = t1030 * t1047;
t1038 = -t1166 * t1155 + 0.2e1 * (Ifges(3,4) * t1173 + t1184) * t1179 + t1173 * t1379 + t1210;
t1087 = -t1131 * t1179 - t1173 * t1132;
t892 = -t1038 * t902 - t1087 * t906 - t914 * t1336;
t898 = -Ifges(3,3) * t906 - t1050 * t914 - t1087 * t902;
t1434 = t1023 * t1240 + 0.2e1 * t1047 * t1276 + t898 * t1260 - t892 * t1356;
t1391 = (pkin(2) * t1409 + t1429) * t992;
t1242 = t1360 * t1391;
t1266 = t1020 * t1360;
t1362 = t1028 * t1042;
t1036 = -t1166 * t1151 + 0.2e1 * (Ifges(3,4) * t1162 + t1184) * t1164 + t1162 * t1379 + t1210;
t1078 = -t1131 * t1164 - t1162 * t1132;
t888 = -t1036 * t900 - t1078 * t904 - t912 * t1338;
t890 = -Ifges(3,3) * t904 - t1040 * t912 - t1078 * t900;
t1433 = -t1020 * t1242 + t1042 * t1457 - t890 * t1266 + t888 * t1362;
t1157 = t1185 ^ 2;
t1421 = pkin(2) * t1162;
t1420 = pkin(2) * t1171;
t1419 = pkin(2) * t1173;
t1418 = pkin(2) * t1175;
t1401 = Ifges(3,3) * t1204;
t1366 = t1020 * t1204;
t1365 = t1022 * t1204;
t1364 = t1023 * t1204;
t1363 = t1024 * t1204;
t1361 = t1028 * t1157;
t1358 = t1029 * t1157;
t1355 = t1030 * t1157;
t1352 = t1031 * t1157;
t1350 = t1040 * t1204;
t1349 = t1042 * t1137;
t1348 = t1042 * t1141;
t1347 = t1046 * t1138;
t1346 = t1046 * t1142;
t1345 = t1047 * t1139;
t1344 = t1047 * t1143;
t1343 = t1048 * t1140;
t1342 = t1048 * t1144;
t1341 = t1049 * t1204;
t1340 = t1050 * t1204;
t1339 = t1051 * t1204;
t1334 = t1078 * t1204;
t1333 = t1086 * t1204;
t1332 = t1087 * t1204;
t1331 = t1088 * t1204;
t1330 = t1158 * t1159;
t1265 = t1137 * t1366;
t1264 = t1141 * t1366;
t1262 = t1138 * t1365;
t1261 = t1142 * t1365;
t1259 = t1139 * t1364;
t1258 = t1143 * t1364;
t1256 = t1140 * t1363;
t1255 = t1144 * t1363;
t1226 = t1092 * t1141 + t1096 * t1137;
t1225 = t1093 * t1142 + t1097 * t1138;
t1224 = t1094 * t1143 + t1098 * t1139;
t1223 = t1095 * t1144 + t1099 * t1140;
t1222 = pkin(3) * t1328 - t1100 * t1161;
t1221 = pkin(3) * t1324 - t1102 * t1161;
t1220 = pkin(3) * t1322 - t1103 * t1161;
t1219 = pkin(3) * t1320 - t1104 * t1161;
t1218 = Ifges(3,3) * t1366 - t1042 * t1078;
t1217 = Ifges(3,3) * t1365 - t1046 * t1086;
t1216 = Ifges(3,3) * t1364 - t1047 * t1087;
t1215 = Ifges(3,3) * t1363 - t1048 * t1088;
t1214 = t1020 * t1334 - t1036 * t1042;
t1213 = t1022 * t1333 - t1037 * t1046;
t1212 = t1023 * t1332 - t1038 * t1047;
t1211 = t1024 * t1331 - t1039 * t1048;
t1209 = t1020 * t1350 - t1042 * t1338;
t1208 = t1022 * t1341 - t1046 * t1337;
t1207 = t1023 * t1340 - t1047 * t1336;
t1206 = t1024 * t1339 - t1048 * t1335;
t1193 = mrSges(4,1);
t1192 = mrSges(4,2);
t1035 = t1107 * t1160 + t1219 * t1158;
t1034 = t1106 * t1160 + t1220 * t1158;
t1033 = t1105 * t1160 + t1221 * t1158;
t1032 = t1101 * t1160 + t1222 * t1158;
t1019 = -t1084 * t1414 - t1107 * t1158 * t1181 + (pkin(2) * t1320 + t1219 * t1181) * t1160;
t1018 = -t1083 * t1415 - t1106 * t1158 * t1179 + (pkin(2) * t1322 + t1220 * t1179) * t1160;
t1017 = -t1082 * t1416 - t1105 * t1158 * t1177 + (pkin(2) * t1324 + t1221 * t1177) * t1160;
t1016 = -t1077 * t1417 - t1101 * t1158 * t1164 + (pkin(2) * t1328 + t1222 * t1164) * t1160;
t1015 = -(t1081 * t1144 - t1140 * t1319) * t1414 + (t1035 * t1144 + t1063 * t1140) * t1181 + (t1140 * t1161 + t1144 * t1330) * t1418;
t1014 = (t1081 * t1140 + t1144 * t1319) * t1414 + (-t1035 * t1140 + t1063 * t1144) * t1181 + (-t1140 * t1330 + t1144 * t1161) * t1418;
t1013 = -(t1080 * t1143 - t1139 * t1321) * t1415 + (t1034 * t1143 + t1062 * t1139) * t1179 + (t1139 * t1161 + t1143 * t1330) * t1419;
t1012 = (t1080 * t1139 + t1143 * t1321) * t1415 + (-t1034 * t1139 + t1062 * t1143) * t1179 + (-t1139 * t1330 + t1143 * t1161) * t1419;
t1011 = -(t1079 * t1142 - t1138 * t1323) * t1416 + (t1033 * t1142 + t1061 * t1138) * t1177 + (t1138 * t1161 + t1142 * t1330) * t1420;
t1010 = (t1079 * t1138 + t1142 * t1323) * t1416 + (-t1033 * t1138 + t1061 * t1142) * t1177 + (-t1138 * t1330 + t1142 * t1161) * t1420;
t1009 = -(t1076 * t1141 - t1137 * t1327) * t1417 + (t1032 * t1141 + t1060 * t1137) * t1164 + (t1137 * t1161 + t1141 * t1330) * t1421;
t1008 = (t1076 * t1137 + t1141 * t1327) * t1417 + (-t1032 * t1137 + t1060 * t1141) * t1164 + (-t1137 * t1330 + t1141 * t1161) * t1421;
t1007 = t1223 * t1353;
t1006 = t1224 * t1356;
t1005 = t1225 * t1359;
t1004 = t1226 * t1362;
t1003 = t1223 * t1257;
t1002 = t1224 * t1260;
t1001 = t1225 * t1263;
t1000 = t1226 * t1266;
t991 = (t1019 * t1051 + t1027 * t1401 + t1045 * t1088) * t1031;
t990 = (t1018 * t1050 + t1026 * t1401 + t1044 * t1087) * t1030;
t989 = (t1017 * t1049 + t1025 * t1401 + t1043 * t1086) * t1029;
t982 = (t1016 * t1040 + t1021 * t1401 + t1041 * t1078) * t1028;
t979 = (t1019 * t1152 + t1027 * t1339 + t1045 * t1335) * t1031;
t978 = (t1018 * t1152 + t1026 * t1340 + t1044 * t1336) * t1030;
t977 = (t1017 * t1152 + t1025 * t1341 + t1043 * t1337) * t1029;
t976 = (t1016 * t1152 + t1021 * t1350 + t1041 * t1338) * t1028;
t975 = (t1019 * t1335 + t1027 * t1331 + t1039 * t1045) * t1031;
t974 = (t1018 * t1336 + t1026 * t1332 + t1038 * t1044) * t1030;
t973 = (t1017 * t1337 + t1025 * t1333 + t1037 * t1043) * t1029;
t972 = (t1016 * t1338 + t1021 * t1334 + t1036 * t1041) * t1028;
t971 = (t1014 * t1099 - t1015 * t1095) * t1031;
t970 = (t1012 * t1098 - t1013 * t1094) * t1030;
t969 = (t1010 * t1097 - t1011 * t1093) * t1029;
t968 = (t1008 * t1096 - t1009 * t1092) * t1028;
t967 = (t1015 * t1051 + t1215 * t1144) * t1031;
t966 = (t1014 * t1051 - t1215 * t1140) * t1031;
t965 = (t1013 * t1050 + t1216 * t1143) * t1030;
t964 = (t1012 * t1050 - t1216 * t1139) * t1030;
t963 = (t1011 * t1049 + t1217 * t1142) * t1029;
t962 = (t1010 * t1049 - t1217 * t1138) * t1029;
t961 = (t1009 * t1040 + t1218 * t1141) * t1028;
t960 = (t1008 * t1040 - t1218 * t1137) * t1028;
t959 = (t1015 * t1152 + t1206 * t1144) * t1031;
t958 = (t1014 * t1152 - t1206 * t1140) * t1031;
t957 = (t1013 * t1152 + t1207 * t1143) * t1030;
t956 = (t1012 * t1152 - t1207 * t1139) * t1030;
t955 = (t1011 * t1152 + t1208 * t1142) * t1029;
t954 = (t1010 * t1152 - t1208 * t1138) * t1029;
t953 = (t1009 * t1152 + t1209 * t1141) * t1028;
t952 = (t1008 * t1152 - t1209 * t1137) * t1028;
t951 = (t1015 * t1335 + t1211 * t1144) * t1031;
t950 = (t1014 * t1335 - t1211 * t1140) * t1031;
t949 = (t1013 * t1336 + t1212 * t1143) * t1030;
t948 = (t1012 * t1336 - t1212 * t1139) * t1030;
t947 = (t1011 * t1337 + t1213 * t1142) * t1029;
t946 = (t1010 * t1337 - t1213 * t1138) * t1029;
t945 = (t1009 * t1338 + t1214 * t1141) * t1028;
t944 = (t1008 * t1338 - t1214 * t1137) * t1028;
t935 = -Ifges(3,3) * t1003 + t1007 * t1088 + t1051 * t971;
t934 = -Ifges(3,3) * t1002 + t1006 * t1087 + t1050 * t970;
t933 = -Ifges(3,3) * t1001 + t1005 * t1086 + t1049 * t969;
t932 = -t1003 * t1051 + t1007 * t1335 + t1152 * t971;
t931 = -t1002 * t1050 + t1006 * t1336 + t1152 * t970;
t930 = -t1001 * t1049 + t1005 * t1337 + t1152 * t969;
t929 = -Ifges(3,3) * t1000 + t1004 * t1078 + t1040 * t968;
t928 = -t1000 * t1040 + t1004 * t1338 + t1152 * t968;
t927 = -t1003 * t1088 + t1007 * t1039 + t971 * t1335;
t926 = -t1002 * t1087 + t1006 * t1038 + t970 * t1336;
t925 = -t1001 * t1086 + t1005 * t1037 + t969 * t1337;
t924 = -t1000 * t1078 + t1004 * t1036 + t968 * t1338;
t1 = [t1157 * (t1149 * t1192 - t1150 * t1193) + (-(t1015 * t959 + t967 * t1255 - t951 * t1342) * t1099 - (t1014 * t959 - t967 * t1256 + t951 * t1343) * t1095) * t1352 + (-(t1013 * t957 + t965 * t1258 - t949 * t1344) * t1098 - (t1012 * t957 - t965 * t1259 + t949 * t1345) * t1094) * t1355 + (-(t1011 * t955 + t963 * t1261 - t947 * t1346) * t1097 - (t1010 * t955 - t963 * t1262 + t947 * t1347) * t1093) * t1358 + (-(t1009 * t953 + t961 * t1264 - t945 * t1348) * t1096 - (t1008 * t953 - t961 * t1265 + t945 * t1349) * t1092) * t1361 + t1009 * t1440 + t1011 * t1439 + t1013 * t1438 + t1015 * t1437 + t1436 * t1144 + t1434 * t1143 + t1435 * t1142 - t1433 * t1141; -t1157 * (t1149 * t1193 + t1150 * t1192) + (-(t1015 * t958 + t966 * t1255 - t950 * t1342) * t1099 - (t1014 * t958 - t966 * t1256 + t950 * t1343) * t1095) * t1352 + (-(t1013 * t956 + t964 * t1258 - t948 * t1344) * t1098 - (t1012 * t956 - t964 * t1259 + t948 * t1345) * t1094) * t1355 + (-(t1011 * t954 + t962 * t1261 - t946 * t1346) * t1097 - (t1010 * t954 - t962 * t1262 + t946 * t1347) * t1093) * t1358 + (-(t1009 * t952 + t960 * t1264 - t944 * t1348) * t1096 - (t1008 * t952 - t960 * t1265 + t944 * t1349) * t1092) * t1361 + t1008 * t1440 + t1010 * t1439 + t1012 * t1438 + t1014 * t1437 - t1436 * t1140 - t1434 * t1139 - t1435 * t1138 + t1433 * t1137; (-(t1015 * t979 + t991 * t1255 - t975 * t1342) * t1099 - (t1014 * t979 - t991 * t1256 + t975 * t1343) * t1095) * t1352 + (-(t1013 * t978 + t990 * t1258 - t974 * t1344) * t1098 - (t1012 * t978 - t990 * t1259 + t974 * t1345) * t1094) * t1355 + (-(t1011 * t977 + t989 * t1261 - t973 * t1346) * t1097 - (t1010 * t977 - t989 * t1262 + t973 * t1347) * t1093) * t1358 + (-(t1009 * t976 + t982 * t1264 - t972 * t1348) * t1096 - (t1008 * t976 - t982 * t1265 + t972 * t1349) * t1092) * t1361 + t1016 * t1440 + t1017 * t1439 + t1018 * t1438 + t1019 * t1437 + (t1031 * t893 - 0.2e1 * t1275) * t1045 + (t1030 * t892 - 0.2e1 * t1276) * t1044 + (t1029 * t891 - 0.2e1 * t1277) * t1043 + (t1028 * t888 + t1457) * t1041 + (t899 * t1351 + t1239) * t1027 + (t898 * t1354 + t1240) * t1026 + (t897 * t1357 + t1241) * t1025 + (t890 * t1360 + t1242) * t1021; (-(t1015 * t932 + t1255 * t935 - t927 * t1342) * t1099 - (t1014 * t932 - t1256 * t935 + t927 * t1343) * t1095) * t1352 + (-(t1013 * t931 + t1258 * t934 - t926 * t1344) * t1098 - (t1012 * t931 - t1259 * t934 + t926 * t1345) * t1094) * t1355 + (-(t1011 * t930 + t1261 * t933 - t925 * t1346) * t1097 - (t1010 * t930 - t1262 * t933 + t925 * t1347) * t1093) * t1358 + (-(t1009 * t928 + t1264 * t929 - t924 * t1348) * t1096 - (t1008 * t928 - t1265 * t929 + t924 * t1349) * t1092) * t1361 + t1445 * t971 + t1446 * t970 + t1447 * t969 + t1448 * t968 + (t1449 * t919 + t893) * t1007 + (t1450 * t918 + t892) * t1006 + (t1451 * t917 + t891) * t1005 + (t1452 * t916 + t888) * t1004 - (t899 + t1388) * t1003 - (t898 + t1389) * t1002 - (t897 + t1390) * t1001 - (t890 + t1391) * t1000;];
taucX  = t1;
