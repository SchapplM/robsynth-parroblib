% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4PRRRR8V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G3A0_convert_par2_MPV_fixb.m

% Output:
% taugX [4x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4PRRRR8V2G3A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G3A0_gravload_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G3A0_gravload_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V2G3A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G3A0_gravload_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G3A0_gravload_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G3A0_gravload_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G3A0_gravload_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:30:38
% EndTime: 2020-08-07 11:30:44
% DurationCPUTime: 6.46s
% Computational Cost: add. (2133->394), mult. (4945->764), div. (148->9), fcn. (5124->30), ass. (0->293)
t5444 = sin(pkin(4));
t5465 = cos(qJ(3,1));
t5460 = sin(qJ(2,1));
t5626 = pkin(3) * t5465 ^ 2;
t5542 = t5460 * t5626;
t5466 = cos(qJ(2,1));
t5467 = pkin(7) + pkin(6);
t5638 = pkin(2) * t5460 - t5466 * t5467;
t5645 = (t5465 * t5638 + t5542) * t5444;
t5463 = cos(qJ(3,2));
t5458 = sin(qJ(2,2));
t5627 = pkin(3) * t5463 ^ 2;
t5543 = t5458 * t5627;
t5464 = cos(qJ(2,2));
t5639 = pkin(2) * t5458 - t5464 * t5467;
t5644 = (t5463 * t5639 + t5543) * t5444;
t5461 = cos(qJ(3,3));
t5456 = sin(qJ(2,3));
t5628 = pkin(3) * t5461 ^ 2;
t5544 = t5456 * t5628;
t5462 = cos(qJ(2,3));
t5640 = pkin(2) * t5456 - t5462 * t5467;
t5643 = (t5461 * t5640 + t5544) * t5444;
t5449 = cos(qJ(3,4));
t5448 = sin(qJ(2,4));
t5629 = pkin(3) * t5449 ^ 2;
t5545 = t5448 * t5629;
t5450 = cos(qJ(2,4));
t5641 = pkin(2) * t5448 - t5450 * t5467;
t5642 = (t5449 * t5641 + t5545) * t5444;
t5446 = cos(pkin(4));
t5622 = pkin(3) * t5465;
t5538 = pkin(2) + t5622;
t5494 = t5446 * t5538;
t5623 = pkin(3) * t5463;
t5539 = pkin(2) + t5623;
t5495 = t5446 * t5539;
t5624 = pkin(3) * t5461;
t5540 = pkin(2) + t5624;
t5496 = t5446 * t5540;
t5625 = pkin(3) * t5449;
t5541 = pkin(2) + t5625;
t5497 = t5446 * t5541;
t5447 = sin(qJ(3,4));
t5633 = pkin(2) * t5447;
t5455 = sin(qJ(3,3));
t5632 = pkin(2) * t5455;
t5457 = sin(qJ(3,2));
t5631 = pkin(2) * t5457;
t5459 = sin(qJ(3,1));
t5630 = pkin(2) * t5459;
t5443 = sin(pkin(8));
t5621 = g(3) * t5443;
t5573 = t5446 * t5447;
t5363 = pkin(3) * t5573 + t5444 * t5641;
t5339 = 0.1e1 / (pkin(2) * t5573 + t5363 * t5449 + t5444 * t5545);
t5591 = t5443 * t5446;
t5397 = -g(1) * t5444 - g(2) * t5591;
t5398 = g(1) * t5591 - g(2) * t5444;
t5451 = legFrame(4,2);
t5426 = sin(t5451);
t5430 = cos(t5451);
t5403 = g(1) * t5430 - g(2) * t5426;
t5445 = cos(pkin(8));
t5578 = t5445 * t5446;
t5420 = g(3) * t5578;
t5620 = ((t5397 * t5426 + t5398 * t5430 + t5420) * t5450 + t5448 * (t5403 * t5445 - t5621)) * t5339;
t5570 = t5446 * t5455;
t5364 = pkin(3) * t5570 + t5444 * t5640;
t5340 = 0.1e1 / (pkin(2) * t5570 + t5364 * t5461 + t5444 * t5544);
t5452 = legFrame(3,2);
t5427 = sin(t5452);
t5431 = cos(t5452);
t5404 = g(1) * t5431 - g(2) * t5427;
t5619 = ((t5397 * t5427 + t5398 * t5431 + t5420) * t5462 + t5456 * (t5404 * t5445 - t5621)) * t5340;
t5568 = t5446 * t5457;
t5365 = pkin(3) * t5568 + t5444 * t5639;
t5341 = 0.1e1 / (pkin(2) * t5568 + t5365 * t5463 + t5444 * t5543);
t5453 = legFrame(2,2);
t5428 = sin(t5453);
t5432 = cos(t5453);
t5405 = g(1) * t5432 - g(2) * t5428;
t5618 = ((t5397 * t5428 + t5398 * t5432 + t5420) * t5464 + t5458 * (t5405 * t5445 - t5621)) * t5341;
t5566 = t5446 * t5459;
t5366 = pkin(3) * t5566 + t5444 * t5638;
t5342 = 0.1e1 / (pkin(2) * t5566 + t5366 * t5465 + t5444 * t5542);
t5454 = legFrame(1,2);
t5429 = sin(t5454);
t5433 = cos(t5454);
t5406 = g(1) * t5433 - g(2) * t5429;
t5617 = ((t5397 * t5429 + t5398 * t5433 + t5420) * t5466 + t5460 * (t5406 * t5445 - t5621)) * t5342;
t5571 = t5446 * t5450;
t5370 = t5443 * t5571 + t5445 * t5448;
t5410 = pkin(2) * t5450 + t5448 * t5467;
t5616 = (t5370 * t5625 + t5410 * t5591 + t5445 * t5641) * t5339;
t5564 = t5446 * t5462;
t5381 = t5443 * t5564 + t5445 * t5456;
t5414 = pkin(2) * t5462 + t5456 * t5467;
t5615 = (t5381 * t5624 + t5414 * t5591 + t5445 * t5640) * t5340;
t5563 = t5446 * t5464;
t5382 = t5443 * t5563 + t5445 * t5458;
t5415 = pkin(2) * t5464 + t5458 * t5467;
t5614 = (t5382 * t5623 + t5415 * t5591 + t5445 * t5639) * t5341;
t5562 = t5446 * t5466;
t5383 = t5443 * t5562 + t5445 * t5460;
t5416 = pkin(2) * t5466 + t5460 * t5467;
t5613 = (t5383 * t5622 + t5416 * t5591 + t5445 * t5638) * t5342;
t5468 = xP(4);
t5437 = sin(t5468);
t5438 = cos(t5468);
t5469 = koppelP(4,2);
t5473 = koppelP(4,1);
t5389 = t5437 * t5473 + t5438 * t5469;
t5393 = -t5437 * t5469 + t5438 * t5473;
t5348 = t5389 * t5430 + t5393 * t5426;
t5612 = t5339 * t5348;
t5572 = t5446 * t5448;
t5577 = t5445 * t5450;
t5367 = t5443 * t5572 - t5577;
t5588 = t5444 * t5449;
t5355 = t5367 * t5447 + t5443 * t5588;
t5611 = t5339 * t5355;
t5399 = g(1) * t5426 + g(2) * t5430;
t5610 = t5339 * t5399;
t5609 = t5339 * t5426;
t5608 = t5339 * t5430;
t5470 = koppelP(3,2);
t5474 = koppelP(3,1);
t5390 = t5437 * t5474 + t5438 * t5470;
t5394 = -t5437 * t5470 + t5438 * t5474;
t5349 = t5390 * t5431 + t5394 * t5427;
t5607 = t5340 * t5349;
t5569 = t5446 * t5456;
t5576 = t5445 * t5462;
t5372 = t5443 * t5569 - t5576;
t5581 = t5444 * t5461;
t5358 = t5372 * t5455 + t5443 * t5581;
t5606 = t5340 * t5358;
t5400 = g(1) * t5427 + g(2) * t5431;
t5605 = t5340 * t5400;
t5604 = t5340 * t5427;
t5603 = t5340 * t5431;
t5471 = koppelP(2,2);
t5475 = koppelP(2,1);
t5391 = t5437 * t5475 + t5438 * t5471;
t5395 = -t5437 * t5471 + t5438 * t5475;
t5350 = t5391 * t5432 + t5395 * t5428;
t5602 = t5341 * t5350;
t5567 = t5446 * t5458;
t5575 = t5445 * t5464;
t5373 = t5443 * t5567 - t5575;
t5580 = t5444 * t5463;
t5359 = t5373 * t5457 + t5443 * t5580;
t5601 = t5341 * t5359;
t5401 = g(1) * t5428 + g(2) * t5432;
t5600 = t5341 * t5401;
t5599 = t5341 * t5428;
t5598 = t5341 * t5432;
t5472 = koppelP(1,2);
t5476 = koppelP(1,1);
t5392 = t5437 * t5476 + t5438 * t5472;
t5396 = -t5437 * t5472 + t5438 * t5476;
t5351 = t5392 * t5433 + t5396 * t5429;
t5597 = t5342 * t5351;
t5565 = t5446 * t5460;
t5574 = t5445 * t5466;
t5374 = t5443 * t5565 - t5574;
t5579 = t5444 * t5465;
t5357 = t5374 * t5459 + t5443 * t5579;
t5596 = t5342 * t5357;
t5402 = g(1) * t5429 + g(2) * t5433;
t5595 = t5342 * t5402;
t5594 = t5342 * t5429;
t5593 = t5342 * t5433;
t5592 = t5443 * t5444;
t5590 = t5444 * t5447;
t5589 = t5444 * t5448;
t5587 = t5444 * t5455;
t5586 = t5444 * t5456;
t5585 = t5444 * t5457;
t5584 = t5444 * t5458;
t5583 = t5444 * t5459;
t5582 = t5444 * t5460;
t5561 = t5447 * t5448;
t5560 = t5447 * t5450;
t5559 = t5448 * t5449;
t5557 = t5455 * t5456;
t5556 = t5455 * t5462;
t5555 = t5456 * t5461;
t5554 = t5457 * t5458;
t5553 = t5457 * t5464;
t5552 = t5458 * t5463;
t5551 = t5459 * t5460;
t5550 = t5459 * t5466;
t5549 = t5460 * t5465;
t5537 = t5447 * t5620;
t5536 = t5449 * t5620;
t5535 = t5455 * t5619;
t5534 = t5461 * t5619;
t5533 = t5457 * t5618;
t5532 = t5463 * t5618;
t5531 = t5459 * t5617;
t5530 = t5465 * t5617;
t5368 = -t5443 * t5448 + t5445 * t5571;
t5328 = t5368 * t5625 + t5410 * t5578 - t5443 * t5641;
t5529 = t5328 * t5612;
t5528 = t5328 * t5609;
t5527 = t5328 * t5608;
t5375 = t5443 * t5456 - t5445 * t5564;
t5330 = t5375 * t5624 - t5414 * t5578 + t5443 * t5640;
t5526 = t5330 * t5604;
t5525 = t5330 * t5603;
t5524 = t5330 * t5607;
t5376 = t5443 * t5458 - t5445 * t5563;
t5332 = t5376 * t5623 - t5415 * t5578 + t5443 * t5639;
t5523 = t5332 * t5599;
t5522 = t5332 * t5598;
t5521 = t5332 * t5602;
t5377 = t5443 * t5460 - t5445 * t5562;
t5334 = t5377 * t5622 - t5416 * t5578 + t5443 * t5638;
t5520 = t5334 * t5594;
t5519 = t5334 * t5593;
t5518 = t5334 * t5597;
t5369 = t5443 * t5450 + t5445 * t5572;
t5356 = t5369 * t5447 + t5445 * t5588;
t5517 = t5356 * t5612;
t5516 = t5356 * t5609;
t5515 = t5356 * t5608;
t5378 = t5443 * t5462 + t5445 * t5569;
t5360 = t5378 * t5455 + t5445 * t5581;
t5514 = t5360 * t5607;
t5513 = t5360 * t5604;
t5512 = t5360 * t5603;
t5379 = t5443 * t5464 + t5445 * t5567;
t5361 = t5379 * t5457 + t5445 * t5580;
t5511 = t5361 * t5602;
t5510 = t5361 * t5599;
t5509 = t5361 * t5598;
t5380 = t5443 * t5466 + t5445 * t5565;
t5362 = t5380 * t5459 + t5445 * t5579;
t5508 = t5362 * t5597;
t5507 = t5362 * t5594;
t5506 = t5362 * t5593;
t5505 = t5356 * t5537;
t5504 = t5356 * t5536;
t5503 = t5360 * t5535;
t5502 = t5360 * t5534;
t5501 = t5361 * t5533;
t5500 = t5361 * t5532;
t5499 = t5362 * t5531;
t5498 = t5362 * t5530;
t5489 = t5541 * t5592;
t5488 = t5540 * t5592;
t5487 = t5539 * t5592;
t5486 = t5538 * t5592;
t5485 = pkin(3) * t5590 - t5446 * t5641;
t5484 = pkin(3) * t5587 - t5446 * t5640;
t5483 = pkin(3) * t5585 - t5446 * t5639;
t5482 = pkin(3) * t5583 - t5446 * t5638;
t5387 = pkin(2) * t5445 + t5467 * t5591;
t5388 = pkin(2) * t5591 - t5445 * t5467;
t5481 = t5367 * t5629 - (t5387 * t5450 - t5388 * t5448) * t5449;
t5480 = t5372 * t5628 - (t5387 * t5462 - t5388 * t5456) * t5461;
t5479 = t5373 * t5627 - (t5387 * t5464 - t5388 * t5458) * t5463;
t5478 = t5374 * t5626 - (t5387 * t5466 - t5388 * t5460) * t5465;
t5477 = 0.1e1 / pkin(3);
t5408 = g(1) * t5438 + g(2) * t5437;
t5407 = g(1) * t5437 - g(2) * t5438;
t5386 = t5446 * t5551 + t5579;
t5385 = t5446 * t5554 + t5580;
t5384 = t5446 * t5557 + t5581;
t5371 = t5446 * t5561 + t5588;
t5346 = t5416 * t5445 + t5482 * t5443;
t5345 = t5415 * t5445 + t5483 * t5443;
t5344 = t5414 * t5445 + t5484 * t5443;
t5343 = t5410 * t5445 + t5485 * t5443;
t5327 = -g(3) * t5380 - t5374 * t5406 + t5402 * t5582;
t5326 = -t5402 * t5444 * t5466 - g(3) * t5377 + t5383 * t5406;
t5325 = -t5401 * t5444 * t5464 - g(3) * t5376 + t5382 * t5405;
t5324 = -g(3) * t5379 - t5373 * t5405 + t5401 * t5584;
t5323 = -t5400 * t5444 * t5462 - g(3) * t5375 + t5381 * t5404;
t5322 = -g(3) * t5378 - t5372 * t5404 + t5400 * t5586;
t5321 = -t5399 * t5444 * t5450 + g(3) * t5368 + t5370 * t5403;
t5320 = -g(3) * t5369 - t5367 * t5403 + t5399 * t5589;
t5315 = (-t5384 * t5443 + t5445 * t5556) * t5404 - (t5384 * t5445 + t5443 * t5556) * g(3) - t5400 * (-t5444 * t5557 + t5446 * t5461);
t5314 = t5406 * (-t5386 * t5443 + t5445 * t5550) - g(3) * (t5386 * t5445 + t5443 * t5550) - t5402 * (-t5444 * t5551 + t5446 * t5465);
t5313 = t5405 * (-t5385 * t5443 + t5445 * t5553) - g(3) * (t5385 * t5445 + t5443 * t5553) - t5401 * (-t5444 * t5554 + t5446 * t5463);
t5312 = ((-t5446 * t5549 + t5583) * t5443 + t5465 * t5574) * t5406 + g(3) * (-t5380 * t5465 + t5445 * t5583) + t5402 * (t5444 * t5549 + t5566);
t5311 = ((-t5446 * t5552 + t5585) * t5443 + t5463 * t5575) * t5405 + g(3) * (-t5379 * t5463 + t5445 * t5585) + t5401 * (t5444 * t5552 + t5568);
t5310 = t5404 * ((-t5446 * t5555 + t5587) * t5443 + t5461 * t5576) + g(3) * (-t5378 * t5461 + t5445 * t5587) + t5400 * (t5444 * t5555 + t5570);
t5309 = (-t5371 * t5443 + t5445 * t5560) * t5403 - g(3) * (t5371 * t5445 + t5443 * t5560) - t5399 * (-t5444 * t5561 + t5446 * t5449);
t5308 = ((-t5446 * t5559 + t5590) * t5443 + t5449 * t5577) * t5403 + g(3) * (-t5369 * t5449 + t5445 * t5590) + t5399 * (t5444 * t5559 + t5573);
t1 = [(-(-(t5374 * t5433 - t5429 * t5582) * t5626 + (t5346 * t5433 + t5366 * t5429) * t5465 + (t5429 * t5446 + t5433 * t5592) * t5630) * t5595 - (-(t5373 * t5432 - t5428 * t5584) * t5627 + (t5345 * t5432 + t5365 * t5428) * t5463 + (t5428 * t5446 + t5432 * t5592) * t5631) * t5600 - (-(t5372 * t5431 - t5427 * t5586) * t5628 + (t5344 * t5431 + t5364 * t5427) * t5461 + (t5427 * t5446 + t5431 * t5592) * t5632) * t5605 - ((-t5367 * t5430 + t5426 * t5589) * t5629 + (t5343 * t5430 + t5363 * t5426) * t5449 + (t5426 * t5446 + t5430 * t5592) * t5633) * t5610) * MDP(1) + (-t5321 * t5515 - t5323 * t5512 - t5325 * t5509 - t5326 * t5506) * MDP(3) + (-t5320 * t5515 - t5322 * t5512 - t5324 * t5509 - t5327 * t5506) * MDP(4) + (-t5430 * t5504 - t5431 * t5502 - t5432 * t5500 - t5433 * t5498) * MDP(10) + (t5430 * t5505 + t5431 * t5503 + t5432 * t5501 + t5433 * t5499) * MDP(11) + (-t5407 * t5437 - t5408 * t5438) * MDP(15) + ((-t5309 * t5527 + t5313 * t5522 + t5314 * t5519 + t5315 * t5525) * MDP(10) + (-t5308 * t5527 + t5310 * t5525 + t5311 * t5522 + t5312 * t5519) * MDP(11)) * t5477; (-((t5374 * t5429 + t5433 * t5582) * t5626 + (-t5346 * t5429 + t5366 * t5433) * t5465 + (-t5429 * t5592 + t5433 * t5446) * t5630) * t5595 - ((t5373 * t5428 + t5432 * t5584) * t5627 + (-t5345 * t5428 + t5365 * t5432) * t5463 + (-t5428 * t5592 + t5432 * t5446) * t5631) * t5600 - ((t5372 * t5427 + t5431 * t5586) * t5628 + (-t5344 * t5427 + t5364 * t5431) * t5461 + (-t5427 * t5592 + t5431 * t5446) * t5632) * t5605 - (-(-t5367 * t5426 - t5430 * t5589) * t5629 + (-t5343 * t5426 + t5363 * t5430) * t5449 + (-t5426 * t5592 + t5430 * t5446) * t5633) * t5610) * MDP(1) + (t5321 * t5516 + t5323 * t5513 + t5325 * t5510 + t5326 * t5507) * MDP(3) + (t5320 * t5516 + t5322 * t5513 + t5324 * t5510 + t5327 * t5507) * MDP(4) + (t5426 * t5504 + t5427 * t5502 + t5428 * t5500 + t5429 * t5498) * MDP(10) + (-t5426 * t5505 - t5427 * t5503 - t5428 * t5501 - t5429 * t5499) * MDP(11) + (t5407 * t5438 - t5408 * t5437) * MDP(15) + ((t5309 * t5528 - t5313 * t5523 - t5314 * t5520 - t5315 * t5526) * MDP(10) + (t5308 * t5528 - t5310 * t5526 - t5311 * t5523 - t5312 * t5520) * MDP(11)) * t5477; (-(-t5380 * t5626 - t5416 * t5443 * t5465 + (pkin(2) * t5583 + t5482 * t5465) * t5445) * t5595 - (-t5379 * t5627 - t5415 * t5443 * t5463 + (pkin(2) * t5585 + t5483 * t5463) * t5445) * t5600 - (-t5378 * t5628 - t5414 * t5443 * t5461 + (pkin(2) * t5587 + t5484 * t5461) * t5445) * t5605 - (-t5369 * t5629 - t5410 * t5443 * t5449 + (pkin(2) * t5590 + t5485 * t5449) * t5445) * t5610) * MDP(1) + (t5321 * t5611 + t5323 * t5606 + t5325 * t5601 + t5326 * t5596) * MDP(3) + (t5320 * t5611 + t5322 * t5606 + t5324 * t5601 + t5327 * t5596) * MDP(4) + (t5355 * t5536 + t5358 * t5534 + t5359 * t5532 + t5357 * t5530 + (t5309 * t5616 + t5313 * t5614 + t5314 * t5613 + t5315 * t5615) * t5477) * MDP(10) + (-t5355 * t5537 - t5358 * t5535 - t5359 * t5533 - t5357 * t5531 + (t5308 * t5616 + t5310 * t5615 + t5311 * t5614 + t5312 * t5613) * t5477) * MDP(11) - g(3) * MDP(15); (-((t5392 * t5478 + t5396 * t5645 + (-t5392 * t5486 + t5396 * t5494) * t5459) * t5433 + (-t5392 * t5645 + t5478 * t5396 + (-t5392 * t5494 - t5396 * t5486) * t5459) * t5429) / ((pkin(3) * t5549 + t5638) * t5579 + t5459 * t5494) * t5402 - ((t5391 * t5479 + t5395 * t5644 + (-t5391 * t5487 + t5395 * t5495) * t5457) * t5432 + (-t5391 * t5644 + t5479 * t5395 + (-t5391 * t5495 - t5395 * t5487) * t5457) * t5428) / ((pkin(3) * t5552 + t5639) * t5580 + t5457 * t5495) * t5401 - ((t5390 * t5480 + t5394 * t5643 + (-t5390 * t5488 + t5394 * t5496) * t5455) * t5431 + (-t5390 * t5643 + t5480 * t5394 + (-t5390 * t5496 - t5394 * t5488) * t5455) * t5427) / ((pkin(3) * t5555 + t5640) * t5581 + t5455 * t5496) * t5400 - ((t5481 * t5389 + t5393 * t5642 + (-t5389 * t5489 + t5393 * t5497) * t5447) * t5430 + (-t5389 * t5642 + t5393 * t5481 + (-t5389 * t5497 - t5393 * t5489) * t5447) * t5426) / ((pkin(3) * t5559 + t5641) * t5588 + t5447 * t5497) * t5399) * MDP(1) + (t5321 * t5517 + t5323 * t5514 + t5325 * t5511 + t5326 * t5508) * MDP(3) + (t5320 * t5517 + t5322 * t5514 + t5324 * t5511 + t5327 * t5508) * MDP(4) + (t5348 * t5504 + t5349 * t5502 + t5350 * t5500 + t5351 * t5498 + (t5309 * t5529 - t5313 * t5521 - t5314 * t5518 - t5315 * t5524) * t5477) * MDP(10) + (-t5348 * t5505 - t5349 * t5503 - t5350 * t5501 - t5351 * t5499 + (t5308 * t5529 - t5310 * t5524 - t5311 * t5521 - t5312 * t5518) * t5477) * MDP(11) + t5407 * MDP(13) + t5408 * MDP(14);];
taugX  = t1;
