% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR8V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [4x4]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P4PRRRR8V2G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:29:03
% EndTime: 2020-08-07 11:30:03
% DurationCPUTime: 64.35s
% Computational Cost: add. (44992->1281), mult. (104066->2523), div. (4096->14), fcn. (103752->30), ass. (0->825)
t4490 = MDP(9) / pkin(3) ^ 2;
t3933 = sin(qJ(3,3));
t3935 = sin(qJ(3,2));
t3937 = sin(qJ(3,1));
t3939 = cos(qJ(3,3));
t3941 = cos(qJ(3,2));
t3943 = cos(qJ(3,1));
t3938 = sin(qJ(2,1));
t3944 = cos(qJ(2,1));
t3945 = pkin(7) + pkin(6);
t3885 = pkin(2) * t3944 + t3938 * t3945;
t3921 = sin(pkin(8));
t3923 = cos(pkin(8));
t3924 = cos(pkin(4));
t4343 = t3924 * t3944;
t4377 = t3921 * t3924;
t4505 = pkin(3) * t3943;
t4531 = pkin(2) * t3938 - t3944 * t3945;
t3808 = (t3921 * t4343 + t3923 * t3938) * t4505 + t3885 * t4377 + t3923 * t4531;
t3922 = sin(pkin(4));
t4350 = t3924 * t3937;
t3854 = pkin(3) * t4350 + t3922 * t4531;
t4509 = pkin(3) * t3943 ^ 2;
t4322 = t3938 * t4509;
t3821 = pkin(2) * t4350 + t3854 * t3943 + t3922 * t4322;
t3817 = 0.1e1 / t3821 ^ 2;
t4349 = t3924 * t3938;
t3866 = t3921 * t3944 + t3923 * t4349;
t4362 = t3922 * t3943;
t3848 = t3866 * t3937 + t3923 * t4362;
t3932 = legFrame(1,2);
t3907 = cos(t3932);
t4381 = t3848 * t3907;
t4205 = t3817 * t4381;
t4139 = t3808 * t4205;
t3936 = sin(qJ(2,2));
t3942 = cos(qJ(2,2));
t3884 = pkin(2) * t3942 + t3936 * t3945;
t4345 = t3924 * t3942;
t4506 = pkin(3) * t3941;
t4532 = pkin(2) * t3936 - t3942 * t3945;
t3807 = (t3921 * t4345 + t3923 * t3936) * t4506 + t3884 * t4377 + t3923 * t4532;
t4352 = t3924 * t3935;
t3853 = pkin(3) * t4352 + t3922 * t4532;
t4510 = pkin(3) * t3941 ^ 2;
t4323 = t3936 * t4510;
t3820 = pkin(2) * t4352 + t3853 * t3941 + t3922 * t4323;
t3815 = 0.1e1 / t3820 ^ 2;
t4351 = t3924 * t3936;
t3865 = t3921 * t3942 + t3923 * t4351;
t4364 = t3922 * t3941;
t3847 = t3865 * t3935 + t3923 * t4364;
t3931 = legFrame(2,2);
t3906 = cos(t3931);
t4385 = t3847 * t3906;
t4217 = t3815 * t4385;
t4140 = t3807 * t4217;
t3934 = sin(qJ(2,3));
t3940 = cos(qJ(2,3));
t3883 = pkin(2) * t3940 + t3934 * t3945;
t4347 = t3924 * t3940;
t4507 = pkin(3) * t3939;
t4533 = pkin(2) * t3934 - t3940 * t3945;
t3806 = (t3921 * t4347 + t3923 * t3934) * t4507 + t3883 * t4377 + t3923 * t4533;
t4354 = t3924 * t3933;
t3852 = pkin(3) * t4354 + t3922 * t4533;
t4511 = pkin(3) * t3939 ^ 2;
t4324 = t3934 * t4511;
t3819 = pkin(2) * t4354 + t3852 * t3939 + t3922 * t4324;
t3813 = 0.1e1 / t3819 ^ 2;
t4353 = t3924 * t3934;
t3864 = t3921 * t3940 + t3923 * t4353;
t4366 = t3922 * t3939;
t3846 = t3864 * t3933 + t3923 * t4366;
t3930 = legFrame(3,2);
t3905 = cos(t3930);
t4389 = t3846 * t3905;
t4229 = t3813 * t4389;
t4141 = t3806 * t4229;
t3925 = sin(qJ(3,4));
t4358 = t3924 * t3925;
t3926 = sin(qJ(2,4));
t3928 = cos(qJ(2,4));
t4534 = pkin(2) * t3926 - t3928 * t3945;
t3851 = pkin(3) * t4358 + t3922 * t4534;
t3927 = cos(qJ(3,4));
t4512 = pkin(3) * t3927 ^ 2;
t4325 = t3926 * t4512;
t3811 = pkin(2) * t4358 + t3851 * t3927 + t3922 * t4325;
t3810 = 0.1e1 / t3811 ^ 2;
t3929 = legFrame(4,2);
t3904 = cos(t3929);
t4449 = t3810 * t3904;
t4530 = MDP(7) * t3925 + MDP(8) * t3927;
t3879 = pkin(2) * t3928 + t3926 * t3945;
t4355 = t3924 * t3928;
t4359 = t3923 * t3924;
t4508 = pkin(3) * t3927;
t3794 = (t3921 * t3926 - t3923 * t4355) * t4508 + t4534 * t3921 - t3879 * t4359;
t3796 = (t3921 * t4355 + t3923 * t3926) * t4508 + t3879 * t4377 + t3923 * t4534;
t4357 = t3924 * t3926;
t3855 = t3921 * t4357 - t3923 * t3928;
t4374 = t3922 * t3927;
t3835 = t3855 * t3925 + t3921 * t4374;
t3857 = t3921 * t3928 + t3923 * t4357;
t3836 = t3857 * t3925 + t3923 * t4374;
t4543 = t3794 * t3835 - t3796 * t3836;
t4554 = t4543 * t4530 * t4449 + (-t3933 * t4141 - t3935 * t4140 - t3937 * t4139) * MDP(7) + (-t3939 * t4141 - t3941 * t4140 - t3943 * t4139) * MDP(8);
t4553 = t3794 * t3796;
t3900 = sin(t3929);
t4552 = t3794 * t3900;
t3800 = (t3921 * t3934 - t3923 * t4347) * t4507 + t4533 * t3921 - t3883 * t4359;
t3946 = xP(4);
t3911 = sin(t3946);
t3912 = cos(t3946);
t3948 = koppelP(3,2);
t3952 = koppelP(3,1);
t3870 = t3911 * t3952 + t3912 * t3948;
t3874 = -t3911 * t3948 + t3912 * t3952;
t3901 = sin(t3930);
t3827 = t3870 * t3905 + t3874 * t3901;
t4551 = t3827 * t3800;
t3802 = (t3921 * t3936 - t3923 * t4345) * t4506 + t4532 * t3921 - t3884 * t4359;
t3949 = koppelP(2,2);
t3953 = koppelP(2,1);
t3871 = t3911 * t3953 + t3912 * t3949;
t3875 = -t3911 * t3949 + t3912 * t3953;
t3902 = sin(t3931);
t3828 = t3871 * t3906 + t3875 * t3902;
t4550 = t3828 * t3802;
t3804 = (t3921 * t3938 - t3923 * t4343) * t4505 + t4531 * t3921 - t3885 * t4359;
t3950 = koppelP(1,2);
t3954 = koppelP(1,1);
t3872 = t3911 * t3954 + t3912 * t3950;
t3876 = -t3911 * t3950 + t3912 * t3954;
t3903 = sin(t3932);
t3829 = t3872 * t3907 + t3876 * t3903;
t4549 = t3829 * t3804;
t3809 = 0.1e1 / t3811;
t3947 = koppelP(4,2);
t3951 = koppelP(4,1);
t3869 = t3911 * t3951 + t3912 * t3947;
t3873 = -t3911 * t3947 + t3912 * t3951;
t3826 = t3869 * t3904 + t3873 * t3900;
t4277 = t3794 * t3809 * t3826;
t3812 = 0.1e1 / t3819;
t4268 = t3812 * t4551;
t3814 = 0.1e1 / t3820;
t4261 = t3814 * t4550;
t3816 = 0.1e1 / t3821;
t4254 = t3816 * t4549;
t4548 = (t3943 * t4531 + t4322) * t3922;
t4547 = (t3941 * t4532 + t4323) * t3922;
t4546 = (t3939 * t4533 + t4324) * t3922;
t4545 = (t3927 * t4534 + t4325) * t3922;
t3860 = t3921 * t4349 - t3923 * t3944;
t3843 = t3860 * t3937 + t3921 * t4362;
t4256 = t3804 * t3817 * t3903;
t4144 = t3843 * t4256;
t3859 = t3921 * t4351 - t3923 * t3942;
t3845 = t3859 * t3935 + t3921 * t4364;
t4263 = t3802 * t3815 * t3902;
t4148 = t3845 * t4263;
t3858 = t3921 * t4353 - t3923 * t3940;
t3844 = t3858 * t3933 + t3921 * t4366;
t4270 = t3800 * t3813 * t3901;
t4152 = t3844 * t4270;
t4447 = t3810 * t3927;
t4241 = t3835 * t4447;
t4452 = t3810 * t3835;
t4243 = t3925 * t4452;
t4542 = (-t3939 * t4152 - t3941 * t4148 - t3943 * t4144 - t4241 * t4552) * MDP(8) + (-t3933 * t4152 - t3935 * t4148 - t3937 * t4144 - t4243 * t4552) * MDP(7);
t4372 = t3922 * t3933;
t4034 = pkin(3) * t4372 - t3924 * t4533;
t3822 = t3883 * t3923 + t3921 * t4034;
t4371 = t3922 * t3934;
t4378 = t3921 * t3922;
t4515 = pkin(2) * t3933;
t3768 = (t3858 * t3901 + t3905 * t4371) * t4511 + (-t3822 * t3901 + t3852 * t3905) * t3939 + (-t3901 * t4378 + t3905 * t3924) * t4515;
t3769 = -(t3858 * t3905 - t3901 * t4371) * t4511 + (t3822 * t3905 + t3852 * t3901) * t3939 + (t3901 * t3924 + t3905 * t4378) * t4515;
t4370 = t3922 * t3935;
t4033 = pkin(3) * t4370 - t3924 * t4532;
t3823 = t3884 * t3923 + t3921 * t4033;
t4369 = t3922 * t3936;
t4514 = pkin(2) * t3935;
t3770 = (t3859 * t3902 + t3906 * t4369) * t4510 + (-t3823 * t3902 + t3853 * t3906) * t3941 + (-t3902 * t4378 + t3906 * t3924) * t4514;
t3771 = -(t3859 * t3906 - t3902 * t4369) * t4510 + (t3823 * t3906 + t3853 * t3902) * t3941 + (t3902 * t3924 + t3906 * t4378) * t4514;
t4368 = t3922 * t3937;
t4032 = pkin(3) * t4368 - t3924 * t4531;
t3824 = t3885 * t3923 + t3921 * t4032;
t4367 = t3922 * t3938;
t4513 = pkin(2) * t3937;
t3772 = (t3860 * t3903 + t3907 * t4367) * t4509 + (-t3824 * t3903 + t3854 * t3907) * t3943 + (-t3903 * t4378 + t3907 * t3924) * t4513;
t3773 = -(t3860 * t3907 - t3903 * t4367) * t4509 + (t3824 * t3907 + t3854 * t3903) * t3943 + (t3903 * t3924 + t3907 * t4378) * t4513;
t3797 = t3800 ^ 2;
t3798 = t3802 ^ 2;
t3799 = t3804 ^ 2;
t3840 = t3846 ^ 2;
t3841 = t3847 ^ 2;
t3842 = t3848 ^ 2;
t4393 = t3836 * t3904;
t4238 = t3810 * t4393;
t4333 = 0.2e1 * t3794;
t4047 = t4333 * t4238;
t4011 = t3927 * t4047;
t4012 = t3925 * t4047;
t4401 = t3817 * t3907;
t4202 = t3903 * t4401;
t4517 = 0.2e1 * t3848;
t4044 = t3804 * t4202 * t4517;
t4417 = t3815 * t3906;
t4214 = t3902 * t4417;
t4518 = 0.2e1 * t3847;
t4045 = t3802 * t4214 * t4518;
t4433 = t3813 * t3905;
t4226 = t3901 * t4433;
t4519 = 0.2e1 * t3846;
t4046 = t3800 * t4226 * t4519;
t4380 = t3848 * t3938;
t4204 = t3817 * t4380;
t4103 = t3907 * t4204;
t4061 = t3922 * t4103;
t4379 = t3848 * t3944;
t4203 = t3817 * t4379;
t4104 = t3903 * t4203;
t4062 = t3922 * t4104;
t4201 = t3817 * t3937 * t3943;
t4108 = t3842 * t4201;
t4064 = t3907 * t4108;
t4384 = t3847 * t3936;
t4216 = t3815 * t4384;
t4113 = t3906 * t4216;
t4067 = t3922 * t4113;
t4383 = t3847 * t3942;
t4215 = t3815 * t4383;
t4114 = t3902 * t4215;
t4068 = t3922 * t4114;
t4213 = t3815 * t3935 * t3941;
t4118 = t3841 * t4213;
t4070 = t3906 * t4118;
t4388 = t3846 * t3934;
t4228 = t3813 * t4388;
t4123 = t3905 * t4228;
t4073 = t3922 * t4123;
t4387 = t3846 * t3940;
t4227 = t3813 * t4387;
t4124 = t3901 * t4227;
t4074 = t3922 * t4124;
t4225 = t3813 * t3933 * t3939;
t4128 = t3840 * t4225;
t4076 = t3905 * t4128;
t3834 = t3836 ^ 2;
t4237 = t3925 * t4447;
t4135 = t3834 * t4237;
t4080 = t3904 * t4135;
t4102 = t3907 * t4203;
t4105 = t3903 * t4204;
t3917 = t3937 ^ 2;
t4400 = t3817 * t3917;
t4209 = t3842 * t4400;
t4109 = t3907 * t4209;
t4112 = t3906 * t4215;
t4115 = t3902 * t4216;
t3916 = t3935 ^ 2;
t4416 = t3815 * t3916;
t4221 = t3841 * t4416;
t4119 = t3906 * t4221;
t4122 = t3905 * t4227;
t4125 = t3901 * t4228;
t3915 = t3933 ^ 2;
t4432 = t3813 * t3915;
t4233 = t3840 * t4432;
t4129 = t3905 * t4233;
t3913 = t3925 ^ 2;
t4448 = t3810 * t3913;
t4245 = t3834 * t4448;
t4136 = t3904 * t4245;
t4538 = t3794 ^ 2;
t4278 = t3810 * t4538;
t4155 = t3904 * t4278;
t4246 = t3834 * t4449;
t4451 = t3810 * t3836;
t3955 = 0.1e1 / pkin(3);
t4492 = MDP(8) * t3955;
t4494 = MDP(7) * t3955;
t4520 = 2 * MDP(6);
t4376 = t3922 * t3925;
t4035 = pkin(3) * t4376 - t3924 * t4534;
t3818 = t3879 * t3923 + t3921 * t4035;
t4375 = t3922 * t3926;
t4197 = t3904 * t4375;
t4516 = pkin(2) * t3925;
t4522 = (t3855 * t3900 + t4197) * t4512 + (-t3818 * t3900 + t3851 * t3904) * t3927 + (-t3900 * t4378 + t3904 * t3924) * t4516;
t4523 = (-t3855 * t3904 + t3900 * t4375) * t4512 + (t3818 * t3904 + t3851 * t3900) * t3927 + (t3900 * t3924 + t3904 * t4378) * t4516;
t4496 = MDP(4) * t3926;
t4529 = -MDP(3) * t3928 + t4496;
t4541 = (t3900 * t4012 + t3933 * t4046 + t3935 * t4045 + t3937 * t4044) * t4494 + (t3900 * t4011 + t3939 * t4046 + t3941 * t4045 + t3943 * t4044) * t4492 + (-t3797 * t4226 - t3798 * t4214 - t3799 * t4202 - t3900 * t4155) * t4490 + (-t3900 * t4080 - t3901 * t4076 - t3902 * t4070 - t3903 * t4064) * t4520 + (-t3900 * t4136 - t3901 * t4129 - t3902 * t4119 - t3903 * t4109) * MDP(5) + (-t3840 * t4226 - t3841 * t4214 - t3842 * t4202 - t3900 * t4246) * MDP(2) + (t3769 * t4074 + t3771 * t4068 + t3773 * t4062) * MDP(3) + (t3768 * t4073 + t3770 * t4067 + t3772 * t4061) * MDP(4) + ((-t3768 * t4122 - t3770 * t4112 - t3772 * t4102) * MDP(3) + (-t3769 * t4125 - t3771 * t4115 - t3773 * t4105) * MDP(4) - (t3900 * t4523 - t3904 * t4522) * t4529 * t4451) * t3922;
t3791 = -t3864 * t4511 - t3883 * t3921 * t3939 + (pkin(2) * t4372 + t3939 * t4034) * t3923;
t3792 = -t3865 * t4510 - t3884 * t3921 * t3941 + (pkin(2) * t4370 + t3941 * t4033) * t3923;
t3793 = -t3866 * t4509 - t3885 * t3921 * t3943 + (pkin(2) * t4368 + t3943 * t4032) * t3923;
t4063 = t3843 * t3848 * t4201;
t4069 = t3845 * t3847 * t4213;
t4075 = t3844 * t3846 * t4225;
t4079 = t3835 * t3836 * t4237;
t4255 = t3804 * t4401;
t4086 = t3843 * t3955 * t4255;
t4262 = t3802 * t4417;
t4087 = t3845 * t3955 * t4262;
t4269 = t3800 * t4433;
t4088 = t3844 * t3955 * t4269;
t4361 = t3922 * t3944;
t4200 = t3843 * t4361;
t4106 = t3817 * t4200;
t4404 = t3817 * t3848;
t4208 = t3843 * t4404;
t4107 = t3917 * t4208;
t4363 = t3922 * t3942;
t4198 = t3845 * t4363;
t4116 = t3815 * t4198;
t4420 = t3815 * t3847;
t4220 = t3845 * t4420;
t4117 = t3916 * t4220;
t4365 = t3922 * t3940;
t4199 = t3844 * t4365;
t4126 = t3813 * t4199;
t4436 = t3813 * t3846;
t4232 = t3844 * t4436;
t4127 = t3915 * t4232;
t4244 = t3835 * t4451;
t4134 = t3913 * t4244;
t3790 = -t3857 * t4512 - t3879 * t3921 * t3927 + (pkin(2) * t4376 + t3927 * t4035) * t3923;
t4280 = t3790 * t4451;
t4156 = t3928 * t4280;
t4399 = t3817 * t3938;
t4207 = t3843 * t4399;
t4415 = t3815 * t3936;
t4219 = t3845 * t4415;
t4431 = t3813 * t3934;
t4231 = t3844 * t4431;
t4395 = t3835 * t3928;
t4240 = t3810 * t4395;
t4242 = t3926 * t4452;
t4469 = t3793 * t3817;
t4471 = t3792 * t3815;
t4473 = t3791 * t3813;
t4475 = t3790 * t3810;
t4540 = (-t3904 * t4079 - t3905 * t4075 - t3906 * t4069 - t3907 * t4063) * t4520 + (-t3904 * t4134 - t3905 * t4127 - t3906 * t4117 - t3907 * t4107) * MDP(5) + (-t3835 * t4238 - t3843 * t4205 - t3844 * t4229 - t3845 * t4217) * MDP(2) + (t3769 * t4126 + t3771 * t4116 + t3773 * t4106) * MDP(3) + (t3933 * t4088 + t3935 * t4087 + t3937 * t4086) * MDP(7) + (t3939 * t4088 + t3941 * t4087 + t3943 * t4086) * MDP(8) + (t3791 * t4073 + t3792 * t4067 + t3793 * t4061 + t4197 * t4280) * MDP(4) + ((-t3791 * t4122 - t3792 * t4112 - t3793 * t4102 - t3904 * t4156 + t4240 * t4523) * MDP(3) + (-t3769 * t4231 - t3771 * t4219 - t3773 * t4207 - t4242 * t4523) * MDP(4)) * t3922 + (t3806 * t4269 + t3807 * t4262 + t3808 * t4255 + t4449 * t4553) * t4490 + (t3769 * t4473 + t3771 * t4471 + t3773 * t4469 + t4475 * t4523) * MDP(1);
t4382 = t3848 * t3903;
t4206 = t3817 * t4382;
t4083 = t3808 * t3955 * t4206;
t4386 = t3847 * t3902;
t4218 = t3815 * t4386;
t4084 = t3807 * t3955 * t4218;
t4390 = t3846 * t3901;
t4230 = t3813 * t4390;
t4085 = t3806 * t3955 * t4230;
t4394 = t3836 * t3900;
t4239 = t3810 * t4394;
t4089 = t3796 * t3955 * t4239;
t4450 = t3810 * t3900;
t4539 = (t3900 * t4079 + t3901 * t4075 + t3902 * t4069 + t3903 * t4063) * t4520 + (t3900 * t4134 + t3901 * t4127 + t3902 * t4117 + t3903 * t4107) * MDP(5) + (t3835 * t4239 + t3843 * t4206 + t3844 * t4230 + t3845 * t4218) * MDP(2) + (t3925 * t4089 + t3933 * t4085 + t3935 * t4084 + t3937 * t4083) * MDP(7) + (t3927 * t4089 + t3939 * t4085 + t3941 * t4084 + t3943 * t4083) * MDP(8) + (t3900 * t3922 * t4156 + t3768 * t4126 + t3770 * t4116 + t3772 * t4106 + t3791 * t4074 + t3792 * t4068 + t3793 * t4062) * MDP(3) + (((-t3772 * t3843 - t3793 * t4382) * t4399 + (-t3770 * t3845 - t3792 * t4386) * t4415 + (-t3768 * t3844 - t3791 * t4390) * t4431) * MDP(4) + (t4522 * MDP(3) * t4395 + (-t3790 * t4394 - t3835 * t4522) * t4496) * t3810) * t3922 + (-t3806 * t4270 - t3807 * t4263 - t3808 * t4256 - t4450 * t4553) * t4490 + (t3768 * t4473 + t3770 * t4471 + t3772 * t4469 + t4475 * t4522) * MDP(1);
t4327 = 0.2e1 * MDP(7);
t4326 = 0.2e1 * MDP(8);
t4537 = 0.2e1 * t4551;
t4536 = 0.2e1 * t4550;
t4535 = 0.2e1 * t4549;
t4310 = pkin(2) + t4505;
t4098 = t3924 * t4310;
t4311 = pkin(2) + t4506;
t4099 = t3924 * t4311;
t4312 = pkin(2) + t4507;
t4100 = t3924 * t4312;
t4313 = pkin(2) + t4508;
t4101 = t3924 * t4313;
t4521 = 0.2e1 * pkin(2);
t3717 = t3955 * t4277;
t4504 = pkin(6) * t3717;
t3718 = t3955 * t4268;
t4503 = pkin(6) * t3718;
t3719 = t3955 * t4261;
t4502 = pkin(6) * t3719;
t3720 = t3955 * t4254;
t4501 = pkin(6) * t3720;
t4500 = pkin(6) * t3955;
t4499 = MDP(3) * t3922;
t4497 = MDP(4) * t3922;
t4491 = MDP(9) * t3955;
t3867 = pkin(2) * t3923 + t3945 * t4377;
t3868 = pkin(2) * t4377 - t3923 * t3945;
t3972 = t3855 * t4512 - (t3867 * t3928 - t3868 * t3926) * t3927;
t4051 = t4313 * t4378;
t3633 = ((t3972 * t3869 + t3873 * t4545 + (-t3869 * t4051 + t3873 * t4101) * t3925) * t3904 + (-t3869 * t4545 + t3873 * t3972 + (-t3869 * t4101 - t3873 * t4051) * t3925) * t3900) / ((t3926 * t4508 + t4534) * t4374 + t3925 * t4101);
t4489 = t3633 * t3809;
t3637 = (-t3869 * t4523 + t3873 * t4522) * t3809;
t4488 = t3637 * t3809;
t4398 = t3827 * t3846;
t3747 = t3812 * t4398;
t4487 = t3747 * t3812;
t4397 = t3828 * t3847;
t3748 = t3814 * t4397;
t4486 = t3748 * t3814;
t4396 = t3829 * t3848;
t3749 = t3816 * t4396;
t4485 = t3749 * t3816;
t4484 = t4523 * t3810;
t4483 = t4522 * t3810;
t4482 = t3768 * t3812;
t4481 = t3769 * t3812;
t4480 = t3770 * t3814;
t4479 = t3771 * t3814;
t4478 = t3772 * t3816;
t4477 = t3773 * t3816;
t4476 = t3790 * t3809;
t4474 = t3791 * t3812;
t4472 = t3792 * t3814;
t4470 = t3793 * t3816;
t4468 = t3796 * t3809;
t4466 = t3806 * t3812;
t4465 = t3807 * t3814;
t4464 = t3808 * t3816;
t4462 = t3809 * t3835;
t4461 = t3809 * t3836;
t4460 = t3809 * t3900;
t4459 = t3809 * t3904;
t4458 = t3809 * t3925;
t4457 = t3809 * t3926;
t4456 = t3809 * t3927;
t4455 = t3809 * t3928;
t4454 = t3810 * t3826;
t4453 = t3810 * t3834;
t4445 = t3812 * t3844;
t4444 = t3812 * t3901;
t4443 = t3812 * t3905;
t4442 = t3812 * t3933;
t4441 = t3812 * t3934;
t4440 = t3812 * t3939;
t4439 = t3812 * t3940;
t4438 = t3813 * t3827;
t4437 = t3813 * t3844;
t3892 = t3901 ^ 2;
t4435 = t3813 * t3892;
t3896 = t3905 ^ 2;
t4434 = t3813 * t3896;
t4429 = t3814 * t3845;
t4428 = t3814 * t3902;
t4427 = t3814 * t3906;
t4426 = t3814 * t3935;
t4425 = t3814 * t3936;
t4424 = t3814 * t3941;
t4423 = t3814 * t3942;
t4422 = t3815 * t3828;
t4421 = t3815 * t3845;
t3893 = t3902 ^ 2;
t4419 = t3815 * t3893;
t3897 = t3906 ^ 2;
t4418 = t3815 * t3897;
t4413 = t3816 * t3843;
t4412 = t3816 * t3903;
t4411 = t3816 * t3907;
t4410 = t3816 * t3937;
t4409 = t3816 * t3938;
t4408 = t3816 * t3943;
t4407 = t3816 * t3944;
t4406 = t3817 * t3829;
t4405 = t3817 * t3843;
t3894 = t3903 ^ 2;
t4403 = t3817 * t3894;
t3898 = t3907 ^ 2;
t4402 = t3817 * t3898;
t4392 = t3836 * t3926;
t4391 = t3836 * t3928;
t4373 = t3922 * t3928;
t4360 = t3922 * t3955;
t4356 = t3924 * t3927;
t4348 = t3924 * t3939;
t4346 = t3924 * t3941;
t4344 = t3924 * t3943;
t4342 = t3924 * t3955;
t4329 = 0.2e1 * MDP(3);
t4328 = 0.2e1 * MDP(4);
t4321 = t3925 * t4500;
t4320 = t3927 * t4500;
t4319 = t3933 * t4500;
t4318 = t3935 * t4500;
t4317 = t3937 * t4500;
t4316 = t3939 * t4500;
t4315 = t3941 * t4500;
t4314 = t3943 * t4500;
t4308 = t3717 * t4458;
t4307 = t3717 * t4456;
t4306 = t3717 * t4375;
t4305 = t3718 * t4442;
t4304 = t3718 * t4440;
t4303 = t3718 * t4371;
t4302 = t3719 * t4426;
t4301 = t3719 * t4424;
t4300 = t3719 * t4369;
t4299 = t3720 * t4410;
t4298 = t3720 * t4408;
t4297 = t3720 * t4367;
t3745 = t3826 * t4461;
t4296 = t3745 * t4461;
t4295 = t3745 * t3809 * t3913;
t4294 = t3745 * t4458;
t4293 = t3745 * t4456;
t4292 = t3846 * t4487;
t4291 = t3915 * t4487;
t4290 = t3747 * t4442;
t4289 = t3747 * t4440;
t4288 = t3847 * t4486;
t4287 = t3916 * t4486;
t4286 = t3748 * t4426;
t4285 = t3748 * t4424;
t4284 = t3848 * t4485;
t4283 = t3917 * t4485;
t4282 = t3749 * t4410;
t4281 = t3749 * t4408;
t4276 = t3794 * t4460;
t4275 = t3794 * t4459;
t4273 = t3800 * t4444;
t4272 = t3800 * t4443;
t4271 = t3800 * t4436;
t4267 = t3800 * t4438;
t4266 = t3802 * t4428;
t4265 = t3802 * t4427;
t4264 = t3802 * t4420;
t4260 = t3802 * t4422;
t4259 = t3804 * t4412;
t4258 = t3804 * t4411;
t4257 = t3804 * t4404;
t4253 = t3804 * t4406;
t4252 = t3806 * t4437;
t4251 = t3807 * t4421;
t4250 = t3808 * t4405;
t4249 = t3809 * t4358;
t4248 = t3809 * t4356;
t4247 = t3826 * t4450;
t4236 = t3812 * t4354;
t4235 = t3812 * t4348;
t4234 = t3840 * t4438;
t4224 = t3814 * t4352;
t4223 = t3814 * t4346;
t4222 = t3841 * t4422;
t4212 = t3816 * t4350;
t4211 = t3816 * t4344;
t4210 = t3842 * t4406;
t4196 = t3925 * t4373;
t4195 = t3927 * t4373;
t4194 = t3933 * t4365;
t4193 = t3935 * t4363;
t4192 = t3937 * t4361;
t4191 = t3939 * t4365;
t4190 = t3941 * t4363;
t4189 = t3943 * t4361;
t4188 = t3769 * t3813 * t3768 + t3771 * t3815 * t3770 + t3773 * t3817 * t3772;
t4184 = t3912 * MDP(13) - t3911 * MDP(14);
t4183 = t3836 * t4308;
t4182 = t3836 * t4307;
t4181 = t3846 * t4305;
t4180 = t3846 * t4304;
t4179 = t3847 * t4302;
t4178 = t3847 * t4301;
t4177 = t3848 * t4299;
t4176 = t3848 * t4298;
t4175 = t3794 * t4294;
t4174 = t3794 * t4293;
t4173 = t3836 * t4295;
t4172 = t3925 * t4293;
t4171 = t3800 * t4290;
t4170 = t3800 * t4289;
t4169 = t3747 * t4268;
t4168 = t3846 * t4291;
t4167 = t3933 * t4289;
t4166 = t3802 * t4286;
t4165 = t3802 * t4285;
t4164 = t3748 * t4261;
t4163 = t3847 * t4287;
t4162 = t3935 * t4285;
t4161 = t3804 * t4282;
t4160 = t3804 * t4281;
t4159 = t3749 * t4254;
t4158 = t3848 * t4283;
t4157 = t3937 * t4281;
t4153 = t3800 * t4267;
t4151 = t3933 * t4271;
t4150 = t3939 * t4271;
t4149 = t3802 * t4260;
t4147 = t3935 * t4264;
t4146 = t3941 * t4264;
t4145 = t3804 * t4253;
t4143 = t3937 * t4257;
t4142 = t3943 * t4257;
t4138 = t4360 * t4457;
t4137 = t3834 * t4247;
t4131 = t4360 * t4441;
t4130 = t3901 * t4234;
t4121 = t4360 * t4425;
t4120 = t3902 * t4222;
t4111 = t4360 * t4409;
t4110 = t3903 * t4210;
t4093 = t3836 * t4172;
t4092 = t3846 * t4167;
t4091 = t3847 * t4162;
t4090 = t3848 * t4157;
t4082 = t3925 * t4138;
t4081 = t3927 * t4138;
t4078 = t3933 * t4131;
t4077 = t3939 * t4131;
t4072 = t3935 * t4121;
t4071 = t3941 * t4121;
t4066 = t3937 * t4111;
t4065 = t3943 * t4111;
t4060 = -t3911 * MDP(13) - t3912 * MDP(14);
t4050 = t4312 * t4378;
t4049 = t4311 * t4378;
t4048 = t4310 * t4378;
t4043 = t3637 * t4373 + t3745 * t4521;
t3638 = (t3768 * t3874 - t3769 * t3870) * t3812;
t4042 = t3638 * t4365 + t3747 * t4521;
t3639 = (t3770 * t3875 - t3771 * t3871) * t3814;
t4041 = t3639 * t4363 + t3748 * t4521;
t3640 = (t3772 * t3876 - t3773 * t3872) * t3816;
t4040 = t3640 * t4361 + t3749 * t4521;
t4039 = t3790 * t4373 + t3835 * t4521;
t4038 = t3791 * t4365 + t3844 * t4521;
t4037 = t3792 * t4363 + t3845 * t4521;
t4036 = t3793 * t4361 + t3843 * t4521;
t4031 = t3794 * t4082;
t4030 = t3794 * t4081;
t4029 = t3800 * t4078;
t4028 = t3800 * t4077;
t4027 = t3802 * t4072;
t4026 = t3802 * t4071;
t4025 = t3804 * t4066;
t4024 = t3804 * t4065;
t4023 = t3637 * t4393 - t3745 * t4523;
t4022 = t3637 * t4394 + t3745 * t4522;
t4021 = t3638 * t4390 + t3747 * t3768;
t4020 = t3638 * t4389 - t3747 * t3769;
t4019 = t3639 * t4386 + t3748 * t3770;
t4018 = t3639 * t4385 - t3748 * t3771;
t4017 = t3640 * t4382 + t3749 * t3772;
t4016 = t3640 * t4381 - t3749 * t3773;
t4013 = t3826 * t4333 * t4239;
t4010 = t4230 * t4537;
t4009 = t4229 * t4537;
t4008 = t4218 * t4536;
t4007 = t4217 * t4536;
t4006 = t4206 * t4535;
t4005 = t4205 * t4535;
t4004 = (t3633 + t3637) * t3745;
t4003 = t3633 * t4460 + t4454 * t4522;
t4002 = t3633 * t4459 - t4454 * t4523;
t3971 = t3858 * t4511 - (t3867 * t3940 - t3868 * t3934) * t3939;
t3634 = ((t3870 * t3971 + t3874 * t4546 + (-t3870 * t4050 + t3874 * t4100) * t3933) * t3905 + (-t3870 * t4546 + t3971 * t3874 + (-t3870 * t4100 - t3874 * t4050) * t3933) * t3901) / ((t3934 * t4507 + t4533) * t4366 + t3933 * t4100);
t4001 = (t3634 + t3638) * t3747;
t4000 = t3634 * t4444 + t3768 * t4438;
t3999 = t3634 * t4443 - t3769 * t4438;
t3970 = t3859 * t4510 - (t3867 * t3942 - t3868 * t3936) * t3941;
t3635 = ((t3871 * t3970 + t3875 * t4547 + (-t3871 * t4049 + t3875 * t4099) * t3935) * t3906 + (-t3871 * t4547 + t3970 * t3875 + (-t3871 * t4099 - t3875 * t4049) * t3935) * t3902) / ((t3936 * t4506 + t4532) * t4364 + t3935 * t4099);
t3998 = (t3635 + t3639) * t3748;
t3997 = t3635 * t4428 + t3770 * t4422;
t3996 = t3635 * t4427 - t3771 * t4422;
t3969 = t3860 * t4509 - (t3867 * t3944 - t3868 * t3938) * t3943;
t3636 = ((t3872 * t3969 + t3876 * t4548 + (-t3872 * t4048 + t3876 * t4098) * t3937) * t3907 + (-t3872 * t4548 + t3969 * t3876 + (-t3872 * t4098 - t3876 * t4048) * t3937) * t3903) / ((t3938 * t4505 + t4531) * t4362 + t3937 * t4098);
t3995 = (t3636 + t3640) * t3749;
t3994 = t3636 * t4412 + t3772 * t4406;
t3993 = t3636 * t4411 - t3773 * t4406;
t3992 = t3794 * t4320 - 0.2e1 * t3836 * t4516;
t3991 = t3836 * t3927 * t4521 + t3794 * t4321;
t3990 = t3800 * t4316 - 0.2e1 * t3846 * t4515;
t3989 = pkin(2) * t3939 * t4519 + t3800 * t4319;
t3988 = t3802 * t4315 - 0.2e1 * t3847 * t4514;
t3987 = pkin(2) * t3941 * t4518 + t3802 * t4318;
t3986 = t3804 * t4314 - 0.2e1 * t3848 * t4513;
t3985 = pkin(2) * t3943 * t4517 + t3804 * t4317;
t3984 = t4543 * t4454;
t3983 = (-t3800 * t3844 + t3806 * t3846) * t4438;
t3982 = (-t3802 * t3845 + t3807 * t3847) * t4422;
t3981 = (-t3804 * t3843 + t3808 * t3848) * t4406;
t3980 = t3633 * t4462 + t3826 * t4280;
t3979 = t3634 * t4445 + t4398 * t4473;
t3978 = t3635 * t4429 + t4397 * t4471;
t3977 = t3636 * t4413 + t4396 * t4469;
t3976 = t3809 * (-t3794 * t4342 + t3836 * t4373);
t3975 = t3812 * (-t3800 * t4342 + t3846 * t4365);
t3974 = t3814 * (-t3802 * t4342 + t3847 * t4363);
t3973 = t3816 * (-t3804 * t4342 + t3848 * t4361);
t3968 = t4530 * t4333 * t4451;
t3895 = t3904 ^ 2;
t3891 = t3900 ^ 2;
t3877 = (t3911 ^ 2 + t3912 ^ 2) * MDP(15);
t3839 = t3845 ^ 2;
t3838 = t3844 ^ 2;
t3837 = t3843 ^ 2;
t3833 = t3835 ^ 2;
t3752 = (t3808 * t4342 + t4200) * t3816;
t3751 = (t3807 * t4342 + t4198) * t3814;
t3750 = (t3806 * t4342 + t4199) * t3812;
t3746 = (t3796 * t4342 + t3835 * t4373) * t3809;
t3744 = t3907 * t3973;
t3743 = t3903 * t3973;
t3742 = t3906 * t3974;
t3741 = t3902 * t3974;
t3740 = t3905 * t3975;
t3739 = t3901 * t3975;
t3738 = t3904 * t3976;
t3737 = t3900 * t3976;
t3736 = (pkin(6) * t3843 + t3793 * t4367) * t3816;
t3735 = (pkin(6) * t3845 + t3792 * t4369) * t3814;
t3734 = (pkin(6) * t3844 + t3791 * t4371) * t3812;
t3733 = (pkin(6) * t3835 + t3790 * t4375) * t3809;
t3710 = (-pkin(6) * t4381 + t3773 * t4367) * t3816;
t3709 = (pkin(6) * t4382 + t3772 * t4367) * t3816;
t3708 = (-pkin(6) * t4385 + t3771 * t4369) * t3814;
t3707 = (pkin(6) * t4386 + t3770 * t4369) * t3814;
t3706 = (-pkin(6) * t4389 + t3769 * t4371) * t3812;
t3705 = (pkin(6) * t4390 + t3768 * t4371) * t3812;
t3704 = (-pkin(6) * t4393 + t4375 * t4523) * t3809;
t3703 = (pkin(6) * t4394 + t4375 * t4522) * t3809;
t3702 = -t3752 * t3937 - t3808 * t4065;
t3701 = t3752 * t3943 - t3808 * t4066;
t3700 = -t3751 * t3935 - t3807 * t4071;
t3699 = t3751 * t3941 - t3807 * t4072;
t3698 = -t3750 * t3933 - t3806 * t4077;
t3697 = t3750 * t3939 - t3806 * t4078;
t3696 = -t3746 * t3925 - t3796 * t4081;
t3695 = t3746 * t3927 - t3796 * t4082;
t3694 = -t3744 * t3943 - t3907 * t4025;
t3693 = t3744 * t3937 - t3907 * t4024;
t3692 = -t3743 * t3937 + t3903 * t4024;
t3691 = t3743 * t3943 + t3903 * t4025;
t3690 = -t3742 * t3941 - t3906 * t4027;
t3689 = t3742 * t3935 - t3906 * t4026;
t3688 = -t3741 * t3935 + t3902 * t4026;
t3687 = t3741 * t3941 + t3902 * t4027;
t3686 = -t3740 * t3939 - t3905 * t4029;
t3685 = t3740 * t3933 - t3905 * t4028;
t3684 = -t3739 * t3933 + t3901 * t4028;
t3683 = t3739 * t3939 + t3901 * t4029;
t3682 = (-t3808 * t4317 + t3943 * t4036) * t3816;
t3681 = (-t3808 * t4314 - t3937 * t4036) * t3816;
t3680 = (-t3807 * t4318 + t4037 * t3941) * t3814;
t3679 = (-t3807 * t4315 - t4037 * t3935) * t3814;
t3678 = (-t3806 * t4319 + t4038 * t3939) * t3812;
t3677 = (-t3806 * t4316 - t4038 * t3933) * t3812;
t3676 = -t3738 * t3927 - t3904 * t4031;
t3675 = t3738 * t3925 - t3904 * t4030;
t3674 = -t3737 * t3925 + t3900 * t4030;
t3673 = t3737 * t3927 + t3900 * t4031;
t3672 = (-t3796 * t4321 + t4039 * t3927) * t3809;
t3671 = (-t3796 * t4320 - t4039 * t3925) * t3809;
t3666 = -t3736 * t3943 - t3793 * t4212;
t3665 = -t3735 * t3941 - t3792 * t4224;
t3664 = -t3734 * t3939 - t3791 * t4236;
t3663 = -t3736 * t3937 + t3793 * t4211;
t3662 = -t3735 * t3935 + t3792 * t4223;
t3661 = -t3734 * t3933 + t3791 * t4235;
t3660 = -t3733 * t3927 - t3790 * t4249;
t3659 = -t3733 * t3925 + t3790 * t4248;
t3656 = (t3773 * t4189 - t3907 * t3985) * t3816;
t3655 = (t3772 * t4189 + t3903 * t3985) * t3816;
t3654 = (-t3773 * t4192 - t3907 * t3986) * t3816;
t3653 = (-t3772 * t4192 + t3903 * t3986) * t3816;
t3652 = (t3771 * t4190 - t3906 * t3987) * t3814;
t3651 = (t3770 * t4190 + t3902 * t3987) * t3814;
t3650 = (-t3771 * t4193 - t3906 * t3988) * t3814;
t3649 = (-t3770 * t4193 + t3902 * t3988) * t3814;
t3648 = (t3769 * t4191 - t3905 * t3989) * t3812;
t3647 = (t3768 * t4191 + t3901 * t3989) * t3812;
t3646 = (-t3769 * t4194 - t3905 * t3990) * t3812;
t3645 = (-t3768 * t4194 + t3901 * t3990) * t3812;
t3644 = (-t3904 * t3991 + t4195 * t4523) * t3809;
t3643 = (t3900 * t3991 + t4195 * t4522) * t3809;
t3642 = (-t3904 * t3992 - t4196 * t4523) * t3809;
t3641 = (t3900 * t3992 - t4196 * t4522) * t3809;
t3632 = -t3720 * t3924 + t3749 * t4361;
t3631 = -t3719 * t3924 + t3748 * t4363;
t3630 = -t3718 * t3924 + t3747 * t4365;
t3627 = -t3717 * t3924 + t3745 * t4373;
t3622 = -t3710 * t3943 - t3773 * t4212;
t3621 = -t3709 * t3943 - t3772 * t4212;
t3620 = -t3708 * t3941 - t3771 * t4224;
t3619 = -t3707 * t3941 - t3770 * t4224;
t3618 = -t3706 * t3939 - t3769 * t4236;
t3617 = -t3705 * t3939 - t3768 * t4236;
t3616 = -t3710 * t3937 + t3773 * t4211;
t3615 = -t3709 * t3937 + t3772 * t4211;
t3614 = -t3708 * t3935 + t3771 * t4223;
t3613 = -t3707 * t3935 + t3770 * t4223;
t3612 = -t3706 * t3933 + t3769 * t4235;
t3611 = -t3705 * t3933 + t3768 * t4235;
t3610 = -t3704 * t3927 - t4249 * t4523;
t3609 = -t3703 * t3927 - t4249 * t4522;
t3608 = -t3704 * t3925 + t4248 * t4523;
t3607 = -t3703 * t3925 + t4248 * t4522;
t3605 = pkin(6) * t3749 + t3640 * t4367;
t3604 = pkin(6) * t3748 + t3639 * t4369;
t3603 = pkin(6) * t3747 + t3638 * t4371;
t3602 = pkin(6) * t3745 + t3637 * t4375;
t3601 = -t3632 * t3937 + t3943 * t4297;
t3600 = t3632 * t3943 + t3937 * t4297;
t3599 = -t3631 * t3935 + t3941 * t4300;
t3598 = t3631 * t3941 + t3935 * t4300;
t3597 = -t3630 * t3933 + t3939 * t4303;
t3596 = t3630 * t3939 + t3933 * t4303;
t3595 = -t3627 * t3925 + t3927 * t4306;
t3594 = t3627 * t3927 + t3925 * t4306;
t3591 = t3937 * t4501 + t4040 * t3943;
t3590 = -t4040 * t3937 + t3943 * t4501;
t3589 = t3935 * t4502 + t4041 * t3941;
t3588 = -t4041 * t3935 + t3941 * t4502;
t3587 = t3933 * t4503 + t4042 * t3939;
t3586 = -t4042 * t3933 + t3939 * t4503;
t3585 = t3925 * t4504 + t4043 * t3927;
t3584 = -t4043 * t3925 + t3927 * t4504;
t3583 = -t3605 * t3943 - t3640 * t4350;
t3582 = -t3604 * t3941 - t3639 * t4352;
t3581 = -t3603 * t3939 - t3638 * t4354;
t3580 = -t3605 * t3937 + t3640 * t4344;
t3579 = -t3604 * t3935 + t3639 * t4346;
t3578 = -t3603 * t3933 + t3638 * t4348;
t3577 = -t3602 * t3927 - t3637 * t4358;
t3576 = -t3602 * t3925 + t3637 * t4356;
t1 = [(t3769 ^ 2 * t3813 + t3771 ^ 2 * t3815 + t3773 ^ 2 * t3817 + t4484 * t4523) * MDP(1) + (t3840 * t4434 + t3841 * t4418 + t3842 * t4402 + t3895 * t4453) * MDP(2) + (t3895 * t4245 + t3896 * t4233 + t3897 * t4221 + t3898 * t4209) * MDP(5) + (t3895 * t4135 + t3896 * t4128 + t3897 * t4118 + t3898 * t4108) * t4520 + t3877 + ((-t3656 * t4381 + t3694 * t3773) * MDP(10) + (-t3654 * t4381 + t3693 * t3773) * MDP(11)) * t3816 + ((-t3652 * t4385 + t3690 * t3771) * MDP(10) + (-t3650 * t4385 + t3689 * t3771) * MDP(11)) * t3814 + ((-t3648 * t4389 + t3686 * t3769) * MDP(10) + (-t3646 * t4389 + t3685 * t3769) * MDP(11)) * t3812 + ((-t3644 * t4393 + t3676 * t4523) * MDP(10) + (-t3642 * t4393 + t3675 * t4523) * MDP(11)) * t3809 + (t3797 * t4434 + t3798 * t4418 + t3799 * t4402 + t3895 * t4278) * t4490 + ((-t3769 * t4122 - t3771 * t4112 - t3773 * t4102) * t4329 + (t3769 * t4123 + t3771 * t4113 + t3773 * t4103) * t4328 + 0.2e1 * t4529 * t4238 * t4523) * t3922 + ((-t3896 * t4151 - t3897 * t4147 - t3898 * t4143) * t4327 + (-t3896 * t4150 - t3897 * t4146 - t3898 * t4142) * t4326 + (t3608 * t4275 + t3612 * t4272 + t3614 * t4265 + t3616 * t4258) * MDP(10) + (t3610 * t4275 + t3618 * t4272 + t3620 * t4265 + t3622 * t4258) * MDP(11) - t3895 * t3968) * t3955; (t4484 * t4522 + t4188) * MDP(1) + ((-t3655 * t4381 + t3691 * t3773) * MDP(10) + (-t3653 * t4381 + t3692 * t3773) * MDP(11)) * t3816 + ((-t3651 * t4385 + t3687 * t3771) * MDP(10) + (-t3649 * t4385 + t3688 * t3771) * MDP(11)) * t3814 + ((-t3647 * t4389 + t3683 * t3769) * MDP(10) + (-t3645 * t4389 + t3684 * t3769) * MDP(11)) * t3812 + ((-t3643 * t4393 + t3673 * t4523) * MDP(10) + (-t3641 * t4393 + t3674 * t4523) * MDP(11)) * t3809 + ((t3607 * t4275 + t3611 * t4272 + t3613 * t4265 + t3615 * t4258) * MDP(10) + (t3609 * t4275 + t3617 * t4272 + t3619 * t4265 + t3621 * t4258) * MDP(11)) * t3955 + t4541; ((-t3682 * t4381 + t3701 * t3773) * MDP(10) + (-t3681 * t4381 + t3702 * t3773) * MDP(11)) * t3816 + ((-t3680 * t4385 + t3699 * t3771) * MDP(10) + (-t3679 * t4385 + t3700 * t3771) * MDP(11)) * t3814 + ((-t3678 * t4389 + t3697 * t3769) * MDP(10) + (-t3677 * t4389 + t3698 * t3769) * MDP(11)) * t3812 + ((-t3672 * t4393 + t3695 * t4523) * MDP(10) + (-t3671 * t4393 + t3696 * t4523) * MDP(11)) * t3809 + ((t3659 * t4275 + t3661 * t4272 + t3662 * t4265 + t3663 * t4258) * MDP(10) + (t3660 * t4275 + t3664 * t4272 + t3665 * t4265 + t3666 * t4258) * MDP(11) + t4554) * t3955 + t4540; (t3638 * t4481 + t3639 * t4479 + t3640 * t4477 + t4488 * t4523) * MDP(1) + (-t3904 * t4296 - t3905 * t4292 - t3906 * t4288 - t3907 * t4284) * MDP(2) + (-t4016 * t4407 - t4018 * t4423 - t4020 * t4439 - t4023 * t4455) * t4499 + (t4016 * t4409 + t4018 * t4425 + t4020 * t4441 + t4023 * t4457) * t4497 + (-t3904 * t4173 - t3905 * t4168 - t3906 * t4163 - t3907 * t4158) * MDP(5) + (-t3904 * t4093 - t3905 * t4092 - t3906 * t4091 - t3907 * t4090) * t4520 + (t3904 * t4183 + t3905 * t4181 + t3906 * t4179 + t3907 * t4177 + (t3904 * t4175 + t3905 * t4171 + t3906 * t4166 + t3907 * t4161) * t3955) * MDP(7) + (t3904 * t4182 + t3905 * t4180 + t3906 * t4178 + t3907 * t4176 + (t3904 * t4174 + t3905 * t4170 + t3906 * t4165 + t3907 * t4160) * t3955) * MDP(8) + (-t3717 * t4275 - t3718 * t4272 - t3719 * t4265 - t3720 * t4258) * t4491 + ((-t3591 * t4381 + t3600 * t3773) * t3816 + (-t3589 * t4385 + t3598 * t3771) * t3814 + (-t3587 * t4389 + t3596 * t3769) * t3812 + (-t3585 * t4393 + t3594 * t4523) * t3809 + (t3576 * t4275 + t3578 * t4272 + t3579 * t4265 + t3580 * t4258) * t3955) * MDP(10) + ((-t3590 * t4381 + t3601 * t3773) * t3816 + (-t3588 * t4385 + t3599 * t3771) * t3814 + (-t3586 * t4389 + t3597 * t3769) * t3812 + (-t3584 * t4393 + t3595 * t4523) * t3809 + (t3577 * t4275 + t3581 * t4272 + t3582 * t4265 + t3583 * t4258) * t3955) * MDP(11) + t4060; (t4483 * t4523 + t4188) * MDP(1) + ((t3656 * t4382 + t3694 * t3772) * MDP(10) + (t3654 * t4382 + t3693 * t3772) * MDP(11)) * t3816 + ((t3652 * t4386 + t3690 * t3770) * MDP(10) + (t3650 * t4386 + t3689 * t3770) * MDP(11)) * t3814 + ((t3648 * t4390 + t3686 * t3768) * MDP(10) + (t3646 * t4390 + t3685 * t3768) * MDP(11)) * t3812 + ((t3644 * t4394 + t3676 * t4522) * MDP(10) + (t3642 * t4394 + t3675 * t4522) * MDP(11)) * t3809 + ((-t3608 * t4276 - t3612 * t4273 - t3614 * t4266 - t3616 * t4259) * MDP(10) + (-t3610 * t4276 - t3618 * t4273 - t3620 * t4266 - t3622 * t4259) * MDP(11)) * t3955 + t4541; (t3768 ^ 2 * t3813 + t3770 ^ 2 * t3815 + t3772 ^ 2 * t3817 + t4483 * t4522) * MDP(1) + (t3840 * t4435 + t3841 * t4419 + t3842 * t4403 + t3891 * t4453) * MDP(2) + (t3891 * t4245 + t3892 * t4233 + t3893 * t4221 + t3894 * t4209) * MDP(5) + (t3891 * t4135 + t3892 * t4128 + t3893 * t4118 + t3894 * t4108) * t4520 + t3877 + ((t3655 * t4382 + t3691 * t3772) * MDP(10) + (t3653 * t4382 + t3692 * t3772) * MDP(11)) * t3816 + ((t3651 * t4386 + t3687 * t3770) * MDP(10) + (t3649 * t4386 + t3688 * t3770) * MDP(11)) * t3814 + ((t3647 * t4390 + t3683 * t3768) * MDP(10) + (t3645 * t4390 + t3684 * t3768) * MDP(11)) * t3812 + ((t3643 * t4394 + t3673 * t4522) * MDP(10) + (t3641 * t4394 + t3674 * t4522) * MDP(11)) * t3809 + (t3797 * t4435 + t3798 * t4419 + t3799 * t4403 + t3891 * t4278) * t4490 + ((t3768 * t4124 + t3770 * t4114 + t3772 * t4104) * t4329 + (-t3768 * t4125 - t3770 * t4115 - t3772 * t4105) * t4328 - 0.2e1 * t4529 * t4239 * t4522) * t3922 + ((-t3892 * t4151 - t3893 * t4147 - t3894 * t4143) * t4327 + (-t3892 * t4150 - t3893 * t4146 - t3894 * t4142) * t4326 + (-t3607 * t4276 - t3611 * t4273 - t3613 * t4266 - t3615 * t4259) * MDP(10) + (-t3609 * t4276 - t3617 * t4273 - t3619 * t4266 - t3621 * t4259) * MDP(11) - t3891 * t3968) * t3955; ((t3682 * t4382 + t3701 * t3772) * MDP(10) + (t3681 * t4382 + t3702 * t3772) * MDP(11)) * t3816 + ((t3680 * t4386 + t3699 * t3770) * MDP(10) + (t3679 * t4386 + t3700 * t3770) * MDP(11)) * t3814 + ((t3678 * t4390 + t3697 * t3768) * MDP(10) + (t3677 * t4390 + t3698 * t3768) * MDP(11)) * t3812 + ((t3672 * t4394 + t3695 * t4522) * MDP(10) + (t3671 * t4394 + t3696 * t4522) * MDP(11)) * t3809 + ((-t3659 * t4276 - t3661 * t4273 - t3662 * t4266 - t3663 * t4259) * MDP(10) + (-t3660 * t4276 - t3664 * t4273 - t3665 * t4266 - t3666 * t4259) * MDP(11) + t4542) * t3955 + t4539; (t3638 * t4482 + t3639 * t4480 + t3640 * t4478 + t4488 * t4522) * MDP(1) + (t3900 * t4296 + t3901 * t4292 + t3902 * t4288 + t3903 * t4284) * MDP(2) + (t4017 * t4407 + t4019 * t4423 + t4021 * t4439 + t4022 * t4455) * t4499 + (-t4017 * t4409 - t4019 * t4425 - t4021 * t4441 - t4022 * t4457) * t4497 + (t3900 * t4173 + t3901 * t4168 + t3902 * t4163 + t3903 * t4158) * MDP(5) + (t3900 * t4093 + t3901 * t4092 + t3902 * t4091 + t3903 * t4090) * t4520 + (-t3900 * t4183 - t3901 * t4181 - t3902 * t4179 - t3903 * t4177 + (-t3900 * t4175 - t3901 * t4171 - t3902 * t4166 - t3903 * t4161) * t3955) * MDP(7) + (-t3900 * t4182 - t3901 * t4180 - t3902 * t4178 - t3903 * t4176 + (-t3900 * t4174 - t3901 * t4170 - t3902 * t4165 - t3903 * t4160) * t3955) * MDP(8) + (t3717 * t4276 + t3718 * t4273 + t3719 * t4266 + t3720 * t4259) * t4491 + ((t3591 * t4382 + t3772 * t3600) * t3816 + (t3589 * t4386 + t3770 * t3598) * t3814 + (t3587 * t4390 + t3768 * t3596) * t3812 + (t3585 * t4394 + t3594 * t4522) * t3809 + (-t3576 * t4276 - t3578 * t4273 - t3579 * t4266 - t3580 * t4259) * t3955) * MDP(10) + ((t3590 * t4382 + t3772 * t3601) * t3816 + (t3588 * t4386 + t3770 * t3599) * t3814 + (t3586 * t4390 + t3768 * t3597) * t3812 + (t3584 * t4394 + t3595 * t4522) * t3809 + (-t3577 * t4276 - t3581 * t4273 - t3582 * t4266 - t3583 * t4259) * t3955) * MDP(11) + t4184; ((t3656 * t3843 + t3694 * t3793) * MDP(10) + (t3654 * t3843 + t3693 * t3793) * MDP(11)) * t3816 + ((t3652 * t3845 + t3690 * t3792) * MDP(10) + (t3650 * t3845 + t3689 * t3792) * MDP(11)) * t3814 + ((t3648 * t3844 + t3686 * t3791) * MDP(10) + (t3646 * t3844 + t3685 * t3791) * MDP(11)) * t3812 + ((t3644 * t3835 + t3676 * t3790) * MDP(10) + (t3642 * t3835 + t3675 * t3790) * MDP(11)) * t3809 + ((t3608 * t4468 + t3612 * t4466 + t3614 * t4465 + t3616 * t4464) * MDP(10) + (t3610 * t4468 + t3618 * t4466 + t3620 * t4465 + t3622 * t4464) * MDP(11) + t4554) * t3955 + t4540; ((t3655 * t3843 + t3691 * t3793) * MDP(10) + (t3653 * t3843 + t3692 * t3793) * MDP(11)) * t3816 + ((t3651 * t3845 + t3687 * t3792) * MDP(10) + (t3649 * t3845 + t3688 * t3792) * MDP(11)) * t3814 + ((t3647 * t3844 + t3683 * t3791) * MDP(10) + (t3645 * t3844 + t3684 * t3791) * MDP(11)) * t3812 + ((t3643 * t3835 + t3673 * t3790) * MDP(10) + (t3641 * t3835 + t3674 * t3790) * MDP(11)) * t3809 + ((t3607 * t4468 + t3611 * t4466 + t3613 * t4465 + t3615 * t4464) * MDP(10) + (t3609 * t4468 + t3617 * t4466 + t3619 * t4465 + t3621 * t4464) * MDP(11) + t4542) * t3955 + t4539; (t3790 ^ 2 * t3810 + t3791 ^ 2 * t3813 + t3792 ^ 2 * t3815 + t3793 ^ 2 * t3817) * MDP(1) + (t3810 * t3833 + t3813 * t3838 + t3815 * t3839 + t3817 * t3837) * MDP(2) + (t3833 * t4448 + t3837 * t4400 + t3838 * t4432 + t3839 * t4416) * MDP(5) + (t3833 * t4237 + t3837 * t4201 + t3838 * t4225 + t3839 * t4213) * t4520 + MDP(15) + ((t3682 * t3843 + t3701 * t3793) * MDP(10) + (t3681 * t3843 + t3702 * t3793) * MDP(11)) * t3816 + ((t3680 * t3845 + t3699 * t3792) * MDP(10) + (t3679 * t3845 + t3700 * t3792) * MDP(11)) * t3814 + ((t3678 * t3844 + t3697 * t3791) * MDP(10) + (t3677 * t3844 + t3698 * t3791) * MDP(11)) * t3812 + ((t3672 * t3835 + t3695 * t3790) * MDP(10) + (t3671 * t3835 + t3696 * t3790) * MDP(11)) * t3809 + (t3796 ^ 2 * t3810 + t3806 ^ 2 * t3813 + t3807 ^ 2 * t3815 + t3808 ^ 2 * t3817) * t4490 + 0.2e1 * ((t3791 * t3940 * t4437 + t3792 * t3942 * t4421 + t3793 * t3944 * t4405 + t3790 * t4240) * MDP(3) + (-t3790 * t4242 - t3791 * t4231 - t3792 * t4219 - t3793 * t4207) * MDP(4)) * t3922 + ((t3659 * t4468 + t3661 * t4466 + t3662 * t4465 + t3663 * t4464) * MDP(10) + (t3660 * t4468 + t3664 * t4466 + t3665 * t4465 + t3666 * t4464) * MDP(11) + (t3796 * t4243 + t3933 * t4252 + t3935 * t4251 + t3937 * t4250) * t4327 + (t3796 * t4241 + t3939 * t4252 + t3941 * t4251 + t3943 * t4250) * t4326) * t3955; (t3637 * t4476 + t3638 * t4474 + t3639 * t4472 + t3640 * t4470) * MDP(1) + (t3745 * t4462 + t3747 * t4445 + t3748 * t4429 + t3749 * t4413) * MDP(2) + (t3835 * t4295 + t3843 * t4283 + t3844 * t4291 + t3845 * t4287) * MDP(5) + (t3835 * t4172 + t3843 * t4157 + t3844 * t4167 + t3845 * t4162) * t4520 + (-t3835 * t4308 - t3843 * t4299 - t3844 * t4305 - t3845 * t4302) * MDP(7) + (-t3835 * t4307 - t3843 * t4298 - t3844 * t4304 - t3845 * t4301) * MDP(8) + (t3585 * t4462 + t3587 * t4445 + t3589 * t4429 + t3591 * t4413 + t3594 * t4476 + t3596 * t4474 + t3598 * t4472 + t3600 * t4470) * MDP(10) + (t3584 * t4462 + t3586 * t4445 + t3588 * t4429 + t3590 * t4413 + t3595 * t4476 + t3597 * t4474 + t3599 * t4472 + t3601 * t4470) * MDP(11) + ((t3796 * t4294 + t3806 * t4290 + t3807 * t4286 + t3808 * t4282) * MDP(7) + (t3796 * t4293 + t3806 * t4289 + t3807 * t4285 + t3808 * t4281) * MDP(8) + (-t3717 * t4468 - t3718 * t4466 - t3719 * t4465 - t3720 * t4464) * MDP(9) + (t3576 * t4468 + t3578 * t4466 + t3579 * t4465 + t3580 * t4464) * MDP(10) + (t3577 * t4468 + t3581 * t4466 + t3582 * t4465 + t3583 * t4464) * MDP(11)) * t3955 + (-t4529 * t3809 * (t3637 * t3835 + t3745 * t3790) + (MDP(3) * t3940 - MDP(4) * t3934) * t3812 * (t3638 * t3844 + t3747 * t3791) + (MDP(3) * t3942 - MDP(4) * t3936) * t3814 * (t3639 * t3845 + t3748 * t3792) + (MDP(3) * t3944 - MDP(4) * t3938) * t3816 * (t3640 * t3843 + t3749 * t3793)) * t3922; (t3634 * t4481 + t3635 * t4479 + t3636 * t4477 + t4489 * t4523) * MDP(1) + (-t3826 * t4246 - t3905 * t4234 - t3906 * t4222 - t3907 * t4210) * MDP(2) + (-t3993 * t4379 - t3996 * t4383 - t3999 * t4387 - t4002 * t4391) * t4499 + (t3993 * t4380 + t3996 * t4384 + t3999 * t4388 + t4002 * t4392) * t4497 + (-t3826 * t4136 - t3827 * t4129 - t3828 * t4119 - t3829 * t4109) * MDP(5) + (-t3826 * t4080 - t3827 * t4076 - t3828 * t4070 - t3829 * t4064) * t4520 + (t3826 * t4012 + t3933 * t4009 + t3935 * t4007 + t3937 * t4005) * t4494 + (t3826 * t4011 + t3939 * t4009 + t3941 * t4007 + t3943 * t4005) * t4492 + (-t3826 * t4155 - t3905 * t4153 - t3906 * t4149 - t3907 * t4145) * t4490 + (t3644 * t3745 + t3648 * t3747 + t3652 * t3748 + t3656 * t3749 + t3633 * t3676 + t3634 * t3686 + t3635 * t3690 + t3636 * t3694 + (-t3608 * t4277 - t3612 * t4268 - t3614 * t4261 - t3616 * t4254) * t3955) * MDP(10) + (t3642 * t3745 + t3646 * t3747 + t3650 * t3748 + t3654 * t3749 + t3633 * t3675 + t3634 * t3685 + t3635 * t3689 + t3636 * t3693 + (-t3610 * t4277 - t3618 * t4268 - t3620 * t4261 - t3622 * t4254) * t3955) * MDP(11) + t4060; (t3634 * t4482 + t3635 * t4480 + t3636 * t4478 + t4489 * t4522) * MDP(1) + (t4110 + t4120 + t4130 + t4137) * MDP(2) + (t3994 * t4379 + t3997 * t4383 + t4000 * t4387 + t4003 * t4391) * t4499 + (-t3994 * t4380 - t3997 * t4384 - t4000 * t4388 - t4003 * t4392) * t4497 + (t3913 * t4137 + t3915 * t4130 + t3916 * t4120 + t3917 * t4110) * MDP(5) + (t3826 * t3900 * t4135 + t3827 * t3901 * t4128 + t3828 * t3902 * t4118 + t3829 * t3903 * t4108) * t4520 + (-t3925 * t4013 - t3933 * t4010 - t3935 * t4008 - t3937 * t4006) * t4494 + (-t3927 * t4013 - t3939 * t4010 - t3941 * t4008 - t3943 * t4006) * t4492 + (t3901 * t4153 + t3902 * t4149 + t3903 * t4145 + t4247 * t4538) * t4490 + (t3643 * t3745 + t3647 * t3747 + t3651 * t3748 + t3655 * t3749 + t3633 * t3673 + t3634 * t3683 + t3635 * t3687 + t3636 * t3691 + (-t3607 * t4277 - t3611 * t4268 - t3613 * t4261 - t3615 * t4254) * t3955) * MDP(10) + (t3641 * t3745 + t3645 * t3747 + t3649 * t3748 + t3653 * t3749 + t3633 * t3674 + t3634 * t3684 + t3635 * t3688 + t3636 * t3692 + (-t3609 * t4277 - t3617 * t4268 - t3619 * t4261 - t3621 * t4254) * t3955) * MDP(11) + t4184; (t3633 * t4476 + t3634 * t4474 + t3635 * t4472 + t3636 * t4470) * MDP(1) + (t3826 * t4244 + t3827 * t4232 + t3828 * t4220 + t3829 * t4208) * MDP(2) + (t3928 * t3980 + t3940 * t3979 + t3942 * t3978 + t3944 * t3977) * t4499 + (-t3926 * t3980 - t3934 * t3979 - t3936 * t3978 - t3938 * t3977) * t4497 + (t3826 * t4134 + t3827 * t4127 + t3828 * t4117 + t3829 * t4107) * MDP(5) + (t3826 * t4079 + t3827 * t4075 + t3828 * t4069 + t3829 * t4063) * t4520 + (-t3925 * t3984 + t3933 * t3983 + t3935 * t3982 + t3937 * t3981) * t4494 + (-t3927 * t3984 + t3939 * t3983 + t3941 * t3982 + t3943 * t3981) * t4492 + (-t3806 * t4267 - t3807 * t4260 - t3808 * t4253 - t4454 * t4553) * t4490 + (t3672 * t3745 + t3678 * t3747 + t3680 * t3748 + t3682 * t3749 + t3633 * t3695 + t3634 * t3697 + t3635 * t3699 + t3636 * t3701 + (-t3659 * t4277 - t3661 * t4268 - t3662 * t4261 - t3663 * t4254) * t3955) * MDP(10) + (t3671 * t3745 + t3677 * t3747 + t3679 * t3748 + t3681 * t3749 + t3633 * t3696 + t3634 * t3698 + t3635 * t3700 + t3636 * t3702 + (-t3660 * t4277 - t3664 * t4268 - t3665 * t4261 - t3666 * t4254) * t3955) * MDP(11); (t3633 * t3637 + t3634 * t3638 + t3635 * t3639 + t3636 * t3640) * MDP(1) + (t3745 ^ 2 + t3747 ^ 2 + t3748 ^ 2 + t3749 ^ 2) * MDP(2) + (t3928 * t4004 + t3940 * t4001 + t3942 * t3998 + t3944 * t3995) * t4499 + (-t3926 * t4004 - t3934 * t4001 - t3936 * t3998 - t3938 * t3995) * t4497 + (t3826 * t4173 + t3827 * t4168 + t3828 * t4163 + t3829 * t4158) * MDP(5) + (t3826 * t4093 + t3827 * t4092 + t3828 * t4091 + t3829 * t4090) * t4520 + (-t3826 * t4183 - t3827 * t4181 - t3828 * t4179 - t3829 * t4177 + (-t3826 * t4175 - t3933 * t4169 - t3935 * t4164 - t3937 * t4159) * t3955) * MDP(7) + (-t3826 * t4182 - t3827 * t4180 - t3828 * t4178 - t3829 * t4176 + (-t3826 * t4174 - t3939 * t4169 - t3941 * t4164 - t3943 * t4159) * t3955) * MDP(8) + (t3717 * t4277 + t3718 * t4268 + t3719 * t4261 + t3720 * t4254) * t4491 + (t3585 * t3745 + t3587 * t3747 + t3589 * t3748 + t3591 * t3749 + t3633 * t3594 + t3634 * t3596 + t3635 * t3598 + t3636 * t3600 + (-t3576 * t4277 - t3578 * t4268 - t3579 * t4261 - t3580 * t4254) * t3955) * MDP(10) + (t3584 * t3745 + t3586 * t3747 + t3588 * t3748 + t3590 * t3749 + t3633 * t3595 + t3634 * t3597 + t3635 * t3599 + t3636 * t3601 + (-t3577 * t4277 - t3581 * t4268 - t3582 * t4261 - t3583 * t4254) * t3955) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_4_matlab.m
res = [t1(1), t1(2), t1(3), t1(4); t1(5), t1(6), t1(7), t1(8); t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16);];
MMX  = res;
