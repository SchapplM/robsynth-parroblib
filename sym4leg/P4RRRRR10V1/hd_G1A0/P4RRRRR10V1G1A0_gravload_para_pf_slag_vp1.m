% Calculate Gravitation load for parallel robot
% P4RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [4x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 13:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:41:52
% EndTime: 2020-08-07 11:42:00
% DurationCPUTime: 8.33s
% Computational Cost: add. (3175->487), mult. (7622->822), div. (120->17), fcn. (5806->36), ass. (0->369)
t4286 = cos(pkin(3));
t4272 = t4286 ^ 2;
t4510 = t4272 * pkin(6);
t4285 = sin(pkin(3));
t4476 = t4285 * t4286;
t4290 = legFrame(1,3);
t4246 = sin(t4290);
t4250 = cos(t4290);
t4197 = -t4246 * g(1) + t4250 * g(2);
t4201 = t4250 * g(1) + t4246 * g(2);
t4305 = sin(qJ(1,1));
t4314 = cos(qJ(1,1));
t4363 = t4197 * t4314 - t4201 * t4305;
t4512 = g(3) * t4285;
t4561 = t4363 * t4286 + t4512;
t4289 = legFrame(2,3);
t4245 = sin(t4289);
t4249 = cos(t4289);
t4196 = -t4245 * g(1) + t4249 * g(2);
t4200 = t4249 * g(1) + t4245 * g(2);
t4302 = sin(qJ(1,2));
t4311 = cos(qJ(1,2));
t4364 = t4196 * t4311 - t4200 * t4302;
t4560 = t4364 * t4286 + t4512;
t4288 = legFrame(3,3);
t4244 = sin(t4288);
t4248 = cos(t4288);
t4195 = -t4244 * g(1) + t4248 * g(2);
t4199 = t4248 * g(1) + t4244 * g(2);
t4299 = sin(qJ(1,3));
t4308 = cos(qJ(1,3));
t4365 = t4195 * t4308 - t4199 * t4299;
t4559 = t4365 * t4286 + t4512;
t4287 = legFrame(4,3);
t4243 = sin(t4287);
t4247 = cos(t4287);
t4194 = -t4243 * g(1) + t4247 * g(2);
t4198 = t4247 * g(1) + t4243 * g(2);
t4293 = sin(qJ(1,4));
t4296 = cos(qJ(1,4));
t4366 = t4194 * t4296 - t4198 * t4293;
t4558 = t4366 * t4286 + t4512;
t4312 = cos(qJ(3,1));
t4313 = cos(qJ(2,1));
t4303 = sin(qJ(3,1));
t4304 = sin(qJ(2,1));
t4454 = t4304 * t4313;
t4392 = t4303 * t4454;
t4513 = pkin(2) * t4312;
t4441 = t4285 * t4513;
t4471 = t4285 * t4303;
t4282 = t4312 ^ 2;
t4517 = pkin(2) * t4282;
t4259 = t4304 * pkin(6);
t4544 = t4259 + pkin(1);
t4557 = (t4312 * t4544 + t4313 * t4517) * t4286 - t4392 * t4441 + pkin(6) * (t4313 - 0.1e1) * (t4313 + 0.1e1) * t4471;
t4309 = cos(qJ(3,2));
t4310 = cos(qJ(2,2));
t4300 = sin(qJ(3,2));
t4301 = sin(qJ(2,2));
t4456 = t4301 * t4310;
t4394 = t4300 * t4456;
t4514 = pkin(2) * t4309;
t4442 = t4285 * t4514;
t4472 = t4285 * t4300;
t4279 = t4309 ^ 2;
t4518 = pkin(2) * t4279;
t4258 = t4301 * pkin(6);
t4545 = t4258 + pkin(1);
t4556 = (t4309 * t4545 + t4310 * t4518) * t4286 - t4394 * t4442 + pkin(6) * (t4310 - 0.1e1) * (t4310 + 0.1e1) * t4472;
t4306 = cos(qJ(3,3));
t4307 = cos(qJ(2,3));
t4297 = sin(qJ(3,3));
t4298 = sin(qJ(2,3));
t4458 = t4298 * t4307;
t4396 = t4297 * t4458;
t4515 = pkin(2) * t4306;
t4443 = t4285 * t4515;
t4473 = t4285 * t4297;
t4276 = t4306 ^ 2;
t4519 = pkin(2) * t4276;
t4257 = t4298 * pkin(6);
t4546 = t4257 + pkin(1);
t4555 = (t4306 * t4546 + t4307 * t4519) * t4286 - t4396 * t4443 + pkin(6) * (t4307 - 0.1e1) * (t4307 + 0.1e1) * t4473;
t4294 = cos(qJ(3,4));
t4295 = cos(qJ(2,4));
t4291 = sin(qJ(3,4));
t4292 = sin(qJ(2,4));
t4462 = t4292 * t4295;
t4398 = t4291 * t4462;
t4516 = pkin(2) * t4294;
t4444 = t4285 * t4516;
t4475 = t4285 * t4291;
t4273 = t4294 ^ 2;
t4520 = pkin(2) * t4273;
t4253 = t4292 * pkin(6);
t4547 = t4253 + pkin(1);
t4554 = (t4294 * t4547 + t4295 * t4520) * t4286 - t4398 * t4444 + pkin(6) * (t4295 - 0.1e1) * (t4295 + 0.1e1) * t4475;
t4553 = -0.2e1 * pkin(6);
t4552 = 0.2e1 * pkin(6);
t4506 = t4303 * pkin(2);
t4242 = pkin(1) * t4506;
t4449 = t4312 * t4313;
t4425 = t4304 * t4513;
t4205 = -t4313 * pkin(6) + t4425;
t4485 = t4205 * t4286;
t4141 = 0.1e1 / (pkin(1) * t4485 + (-t4242 + (pkin(2) * t4449 + t4259) * pkin(5)) * t4285);
t4507 = t4300 * pkin(2);
t4241 = pkin(1) * t4507;
t4451 = t4309 * t4310;
t4427 = t4301 * t4514;
t4204 = -t4310 * pkin(6) + t4427;
t4486 = t4204 * t4286;
t4140 = 0.1e1 / (pkin(1) * t4486 + (-t4241 + (pkin(2) * t4451 + t4258) * pkin(5)) * t4285);
t4508 = t4297 * pkin(2);
t4240 = pkin(1) * t4508;
t4453 = t4306 * t4307;
t4429 = t4298 * t4515;
t4203 = -t4307 * pkin(6) + t4429;
t4487 = t4203 * t4286;
t4139 = 0.1e1 / (pkin(1) * t4487 + (-t4240 + (pkin(2) * t4453 + t4257) * pkin(5)) * t4285);
t4509 = t4291 * pkin(2);
t4236 = pkin(1) * t4509;
t4461 = t4294 * t4295;
t4431 = t4292 * t4516;
t4202 = -t4295 * pkin(6) + t4431;
t4488 = t4202 * t4286;
t4138 = 0.1e1 / (pkin(1) * t4488 + (-t4236 + (pkin(2) * t4461 + t4253) * pkin(5)) * t4285);
t4551 = pkin(1) * t4292;
t4550 = pkin(1) * t4298;
t4549 = pkin(1) * t4301;
t4548 = pkin(1) * t4304;
t4511 = g(3) * t4286;
t4178 = t4246 * t4305 - t4314 * t4250;
t4328 = pkin(6) ^ 2;
t4329 = pkin(2) ^ 2;
t4383 = t4282 * t4329 - t4328;
t4543 = t4383 * t4178;
t4177 = t4245 * t4302 - t4311 * t4249;
t4384 = t4279 * t4329 - t4328;
t4542 = t4384 * t4177;
t4176 = t4244 * t4299 - t4308 * t4248;
t4385 = t4276 * t4329 - t4328;
t4541 = t4385 * t4176;
t4174 = t4243 * t4293 - t4296 * t4247;
t4386 = t4273 * t4329 - t4328;
t4540 = t4386 * t4174;
t4275 = t4295 ^ 2;
t4210 = (t4275 - 0.2e1) * t4509 - pkin(5);
t4217 = t4291 * pkin(5) + pkin(2);
t4390 = t4217 - 0.2e1 * t4520;
t4531 = (-pkin(6) * t4398 - t4210 * t4294) * t4476 + t4461 * t4510 + (t4390 * t4272 - t4217 + t4520) * t4292;
t4278 = t4307 ^ 2;
t4211 = (t4278 - 0.2e1) * t4508 - pkin(5);
t4222 = t4297 * pkin(5) + pkin(2);
t4389 = t4222 - 0.2e1 * t4519;
t4530 = (-pkin(6) * t4396 - t4211 * t4306) * t4476 + t4453 * t4510 + (t4389 * t4272 - t4222 + t4519) * t4298;
t4281 = t4310 ^ 2;
t4212 = (t4281 - 0.2e1) * t4507 - pkin(5);
t4225 = t4300 * pkin(5) + pkin(2);
t4388 = t4225 - 0.2e1 * t4518;
t4529 = (-pkin(6) * t4394 - t4212 * t4309) * t4476 + t4451 * t4510 + (t4388 * t4272 - t4225 + t4518) * t4301;
t4284 = t4313 ^ 2;
t4213 = (t4284 - 0.2e1) * t4506 - pkin(5);
t4228 = t4303 * pkin(5) + pkin(2);
t4387 = t4228 - 0.2e1 * t4517;
t4528 = (-pkin(6) * t4392 - t4213 * t4312) * t4476 + t4449 * t4510 + (t4387 * t4272 - t4228 + t4517) * t4304;
t4527 = (t4272 - 0.1e1) * t4552;
t4526 = m(1) * rSges(1,2);
t4525 = m(2) * rSges(2,1);
t4524 = m(3) * rSges(3,1);
t4523 = m(3) * rSges(3,2);
t4522 = m(3) / pkin(2);
t4521 = pkin(1) * t4286;
t4501 = rSges(3,2) * t4285;
t4142 = t4293 * t4194 + t4296 * t4198;
t4182 = -t4291 * t4523 + t4294 * t4524 + t4525;
t4216 = m(2) * rSges(2,2) - rSges(3,3) * m(3);
t4214 = t4216 * t4512;
t4460 = t4295 * t4142;
t4467 = t4286 * t4292;
t4118 = t4214 * t4292 + (t4366 * t4467 + t4460) * t4216 + (t4142 * t4292 - t4558 * t4295) * t4182;
t4274 = 0.1e1 / t4294;
t4500 = t4118 * t4274;
t4144 = t4299 * t4195 + t4308 * t4199;
t4183 = -t4297 * t4523 + t4306 * t4524 + t4525;
t4452 = t4307 * t4144;
t4466 = t4286 * t4298;
t4119 = t4214 * t4298 + (t4365 * t4466 + t4452) * t4216 + (t4144 * t4298 - t4559 * t4307) * t4183;
t4277 = 0.1e1 / t4306;
t4499 = t4119 * t4277;
t4145 = t4302 * t4196 + t4311 * t4200;
t4184 = -t4300 * t4523 + t4309 * t4524 + t4525;
t4450 = t4310 * t4145;
t4465 = t4286 * t4301;
t4120 = t4214 * t4301 + (t4364 * t4465 + t4450) * t4216 + (t4145 * t4301 - t4560 * t4310) * t4184;
t4280 = 0.1e1 / t4309;
t4498 = t4120 * t4280;
t4146 = t4305 * t4197 + t4314 * t4201;
t4185 = -t4303 * t4523 + t4312 * t4524 + t4525;
t4448 = t4313 * t4146;
t4464 = t4286 * t4304;
t4121 = t4214 * t4304 + (t4363 * t4464 + t4448) * t4216 + (t4146 * t4304 - t4561 * t4313) * t4185;
t4283 = 0.1e1 / t4312;
t4497 = t4121 * t4283;
t4234 = pkin(6) * t4521;
t4474 = t4285 * t4295;
t4480 = t4285 * (-pkin(5) * t4253 + t4236);
t4496 = 0.1e1 / ((pkin(1) * t4467 + pkin(5) * t4474) * t4516 - t4295 * t4234 - t4480) * t4274;
t4470 = t4285 * t4307;
t4479 = t4285 * (-pkin(5) * t4257 + t4240);
t4495 = 0.1e1 / ((pkin(1) * t4466 + pkin(5) * t4470) * t4515 - t4307 * t4234 - t4479) * t4277;
t4469 = t4285 * t4310;
t4478 = t4285 * (-pkin(5) * t4258 + t4241);
t4494 = 0.1e1 / ((pkin(1) * t4465 + pkin(5) * t4469) * t4514 - t4310 * t4234 - t4478) * t4280;
t4468 = t4285 * t4313;
t4477 = t4285 * (-pkin(5) * t4259 + t4242);
t4493 = 0.1e1 / ((pkin(1) * t4464 + pkin(5) * t4468) * t4513 - t4234 * t4313 - t4477) * t4283;
t4218 = pkin(5) + t4509;
t4484 = t4218 * t4285;
t4223 = pkin(5) + t4508;
t4483 = t4223 * t4285;
t4226 = pkin(5) + t4507;
t4482 = t4226 * t4285;
t4229 = pkin(5) + t4506;
t4481 = t4229 * t4285;
t4463 = t4291 * t4295;
t4459 = t4297 * t4307;
t4457 = t4300 * t4310;
t4455 = t4303 * t4313;
t4447 = rSges(3,2) * t4511;
t4446 = m(2) * (rSges(2,3) + pkin(5)) + pkin(5) * m(3);
t4445 = t4285 * t4522;
t4440 = t4286 * t4516;
t4439 = t4286 * t4515;
t4438 = t4286 * t4514;
t4437 = t4286 * t4513;
t4424 = m(1) * rSges(1,1) + (m(2) + m(3)) * pkin(1);
t4220 = pkin(6) + t4551;
t4231 = pkin(6) + t4550;
t4232 = pkin(6) + t4549;
t4233 = pkin(6) + t4548;
t4334 = t4558 * t4292 + t4460;
t4108 = ((t4366 * t4285 - t4511) * rSges(3,1) + t4334 * rSges(3,2)) * t4294 + (t4334 * rSges(3,1) - t4366 * t4501 + t4447) * t4291;
t4419 = t4108 / ((-pkin(5) * t4444 + t4234) * t4295 - t4431 * t4521 + t4480) * t4274;
t4333 = t4559 * t4298 + t4452;
t4115 = ((t4365 * t4285 - t4511) * rSges(3,1) + t4333 * rSges(3,2)) * t4306 + (t4333 * rSges(3,1) - t4365 * t4501 + t4447) * t4297;
t4418 = t4115 / ((-pkin(5) * t4443 + t4234) * t4307 - t4429 * t4521 + t4479) * t4277;
t4332 = t4560 * t4301 + t4450;
t4116 = ((t4364 * t4285 - t4511) * rSges(3,1) + t4332 * rSges(3,2)) * t4309 + (t4332 * rSges(3,1) - t4364 * t4501 + t4447) * t4300;
t4417 = t4116 / ((-pkin(5) * t4442 + t4234) * t4310 - t4427 * t4521 + t4478) * t4280;
t4331 = t4561 * t4304 + t4448;
t4117 = ((t4363 * t4285 - t4511) * rSges(3,1) + t4331 * rSges(3,2)) * t4312 + (t4331 * rSges(3,1) - t4363 * t4501 + t4447) * t4303;
t4416 = t4117 / ((-pkin(5) * t4441 + t4234) * t4313 - t4425 * t4521 + t4477) * t4283;
t4415 = t4174 * t4475;
t4175 = t4243 * t4296 + t4293 * t4247;
t4414 = t4175 * t4475;
t4413 = t4176 * t4473;
t4412 = t4177 * t4472;
t4411 = t4178 * t4471;
t4179 = t4244 * t4308 + t4299 * t4248;
t4410 = t4179 * t4473;
t4180 = t4245 * t4311 + t4302 * t4249;
t4409 = t4180 * t4472;
t4181 = t4246 * t4314 + t4305 * t4250;
t4408 = t4181 * t4471;
t4407 = (t4286 + 0.1e1) * (t4286 - 0.1e1) * t4329;
t4406 = t4296 * t4484;
t4405 = t4308 * t4483;
t4404 = t4311 * t4482;
t4403 = t4314 * t4481;
t4402 = t4286 * t4474;
t4401 = t4286 * t4470;
t4400 = t4286 * t4469;
t4399 = t4286 * t4468;
t4397 = t4293 * t4484;
t4395 = t4299 * t4483;
t4393 = t4302 * t4482;
t4391 = t4305 * t4481;
t4382 = t4174 * t4440;
t4381 = t4175 * t4440;
t4380 = t4176 * t4439;
t4379 = t4177 * t4438;
t4378 = t4178 * t4437;
t4377 = t4179 * t4439;
t4376 = t4180 * t4438;
t4375 = t4181 * t4437;
t4370 = t4386 * t4175;
t4369 = t4385 * t4179;
t4368 = t4384 * t4180;
t4367 = t4383 * t4181;
t4219 = 0.2e1 * t4253 + pkin(1);
t4354 = t4219 * t4296 + t4397;
t4224 = 0.2e1 * t4257 + pkin(1);
t4353 = t4224 * t4308 + t4395;
t4227 = 0.2e1 * t4258 + pkin(1);
t4352 = t4227 * t4311 + t4393;
t4230 = 0.2e1 * t4259 + pkin(1);
t4351 = t4230 * t4314 + t4391;
t4350 = (t4292 * t4182 + t4216 * t4295) * t4286 - ((rSges(3,1) * t4291 + rSges(3,2) * t4294) * m(3) + t4446) * t4285 + t4526;
t4349 = (t4298 * t4183 + t4216 * t4307) * t4286 - ((rSges(3,1) * t4297 + rSges(3,2) * t4306) * m(3) + t4446) * t4285 + t4526;
t4348 = (t4301 * t4184 + t4216 * t4310) * t4286 - ((rSges(3,1) * t4300 + rSges(3,2) * t4309) * m(3) + t4446) * t4285 + t4526;
t4347 = (t4304 * t4185 + t4216 * t4313) * t4286 - ((rSges(3,1) * t4303 + rSges(3,2) * t4312) * m(3) + t4446) * t4285 + t4526;
t4346 = t4220 * t4296 + t4292 * t4397;
t4345 = t4231 * t4308 + t4298 * t4395;
t4344 = t4232 * t4311 + t4301 * t4393;
t4343 = t4233 * t4314 + t4304 * t4391;
t4342 = t4182 * t4295 - t4216 * t4292 + t4424;
t4341 = t4183 * t4307 - t4216 * t4298 + t4424;
t4340 = t4184 * t4310 - t4216 * t4301 + t4424;
t4339 = t4185 * t4313 - t4216 * t4304 + t4424;
t4327 = koppelP(1,1);
t4326 = koppelP(2,1);
t4325 = koppelP(3,1);
t4324 = koppelP(4,1);
t4323 = koppelP(1,2);
t4322 = koppelP(2,2);
t4321 = koppelP(3,2);
t4320 = koppelP(4,2);
t4319 = rSges(4,1);
t4318 = rSges(4,2);
t4317 = xP(4);
t4271 = cos(t4317);
t4270 = sin(t4317);
t4193 = -t4270 * t4323 + t4271 * t4327;
t4192 = -t4270 * t4322 + t4271 * t4326;
t4191 = -t4270 * t4321 + t4271 * t4325;
t4190 = -t4270 * t4320 + t4271 * t4324;
t4189 = -t4270 * t4327 - t4271 * t4323;
t4188 = -t4270 * t4326 - t4271 * t4322;
t4187 = -t4270 * t4325 - t4271 * t4321;
t4186 = -t4270 * t4324 - t4271 * t4320;
t4165 = t4305 * t4230 - t4403;
t4164 = t4302 * t4227 - t4404;
t4163 = t4299 * t4224 - t4405;
t4162 = t4293 * t4219 - t4406;
t4158 = t4305 * t4233 - t4304 * t4403;
t4157 = t4302 * t4232 - t4301 * t4404;
t4156 = t4299 * t4231 - t4298 * t4405;
t4154 = t4293 * t4220 - t4292 * t4406;
t4129 = t4178 * t4259 + t4181 * t4485 + (t4178 * t4449 - t4408) * pkin(2);
t4128 = t4177 * t4258 + t4180 * t4486 + (t4177 * t4451 - t4409) * pkin(2);
t4127 = t4176 * t4257 + t4179 * t4487 + (t4176 * t4453 - t4410) * pkin(2);
t4126 = -t4181 * t4259 + t4178 * t4485 + (-t4181 * t4449 - t4411) * pkin(2);
t4125 = -t4180 * t4258 + t4177 * t4486 + (-t4180 * t4451 - t4412) * pkin(2);
t4124 = -t4179 * t4257 + t4176 * t4487 + (-t4179 * t4453 - t4413) * pkin(2);
t4123 = t4174 * t4253 + t4175 * t4488 + (t4174 * t4461 - t4414) * pkin(2);
t4122 = -t4175 * t4253 + t4174 * t4488 + (-t4175 * t4461 - t4415) * pkin(2);
t4114 = (t4378 * t4552 + t4367) * t4284 + ((t4165 * t4250 + t4351 * t4246) * t4513 - t4464 * t4543) * t4313 + (t4158 * t4250 + t4246 * t4343 - t4378) * pkin(6);
t4113 = (t4379 * t4552 + t4368) * t4281 + ((t4164 * t4249 + t4352 * t4245) * t4514 - t4465 * t4542) * t4310 + (t4157 * t4249 + t4245 * t4344 - t4379) * pkin(6);
t4112 = (t4380 * t4552 + t4369) * t4278 + ((t4163 * t4248 + t4353 * t4244) * t4515 - t4466 * t4541) * t4307 + (t4156 * t4248 + t4244 * t4345 - t4380) * pkin(6);
t4111 = (t4375 * t4553 + t4543) * t4284 + ((t4246 * t4165 - t4351 * t4250) * t4513 + t4367 * t4464) * t4313 + (t4246 * t4158 - t4343 * t4250 + t4375) * pkin(6);
t4110 = (t4376 * t4553 + t4542) * t4281 + ((t4245 * t4164 - t4352 * t4249) * t4514 + t4368 * t4465) * t4310 + (t4245 * t4157 - t4344 * t4249 + t4376) * pkin(6);
t4109 = (t4377 * t4553 + t4541) * t4278 + ((t4244 * t4163 - t4353 * t4248) * t4515 + t4369 * t4466) * t4307 + (t4244 * t4156 - t4345 * t4248 + t4377) * pkin(6);
t4107 = (t4382 * t4552 + t4370) * t4275 + ((t4162 * t4247 + t4354 * t4243) * t4516 - t4467 * t4540) * t4295 + (t4154 * t4247 + t4243 * t4346 - t4382) * pkin(6);
t4106 = (t4381 * t4553 + t4540) * t4275 + ((t4243 * t4162 - t4354 * t4247) * t4516 + t4370 * t4467) * t4295 + (t4243 * t4154 - t4346 * t4247 + t4381) * pkin(6);
t4105 = -t4557 * t4178 + t4528 * t4181 + t4411 * t4548;
t4104 = -t4556 * t4177 + t4529 * t4180 + t4412 * t4549;
t4103 = -t4555 * t4176 + t4530 * t4179 + t4413 * t4550;
t4102 = t4528 * t4178 + t4557 * t4181 - t4408 * t4548;
t4101 = t4529 * t4177 + t4556 * t4180 - t4409 * t4549;
t4100 = t4530 * t4176 + t4555 * t4179 - t4410 * t4550;
t4099 = -t4554 * t4174 + t4531 * t4175 + t4415 * t4551;
t4098 = t4531 * t4174 + t4554 * t4175 - t4414 * t4551;
t4097 = (t4305 * t4339 + t4347 * t4314) * t4201 + (t4305 * t4347 - t4339 * t4314) * t4197;
t4096 = (t4302 * t4340 + t4348 * t4311) * t4200 + (t4302 * t4348 - t4340 * t4311) * t4196;
t4095 = (t4299 * t4341 + t4349 * t4308) * t4199 + (t4299 * t4349 - t4341 * t4308) * t4195;
t4094 = (t4293 * t4342 + t4350 * t4296) * t4198 + (t4293 * t4350 - t4342 * t4296) * t4194;
t1 = [-m(4) * g(1) - (t4129 * t4097 + t4105 * t4497) * t4141 - (t4128 * t4096 + t4104 * t4498) * t4140 - (t4127 * t4095 + t4103 * t4499) * t4139 - (t4123 * t4094 + t4099 * t4500) * t4138 + (t4106 * t4419 + t4109 * t4418 + t4110 * t4417 + t4111 * t4416) * t4445; -m(4) * g(2) - (t4126 * t4097 + t4102 * t4497) * t4141 - (t4125 * t4096 + t4101 * t4498) * t4140 - (t4124 * t4095 + t4100 * t4499) * t4139 - (t4122 * t4094 + t4098 * t4500) * t4138 + (-t4107 * t4419 - t4112 * t4418 - t4113 * t4417 - t4114 * t4416) * t4445; (t4205 * t4285 + t4286 * t4506) * t4141 * t4097 + ((pkin(6) * t4399 + t4213 * t4272 + pkin(5) + (-t4284 + 0.1e1) * t4506) * t4312 - t4544 * t4455 + (t4387 * t4476 + t4455 * t4510) * t4304) * t4121 * t4493 + (t4204 * t4285 + t4286 * t4507) * t4140 * t4096 + ((pkin(6) * t4400 + t4212 * t4272 + pkin(5) + (-t4281 + 0.1e1) * t4507) * t4309 - t4545 * t4457 + (t4388 * t4476 + t4457 * t4510) * t4301) * t4120 * t4494 + (t4203 * t4285 + t4286 * t4508) * t4139 * t4095 + ((pkin(6) * t4401 + t4211 * t4272 + pkin(5) + (-t4278 + 0.1e1) * t4508) * t4306 - t4546 * t4459 + (t4389 * t4476 + t4459 * t4510) * t4298) * t4119 * t4495 + (t4202 * t4285 + t4286 * t4509) * t4138 * t4094 + ((pkin(6) * t4402 + t4210 * t4272 + pkin(5) + (-t4275 + 0.1e1) * t4509) * t4294 - t4547 * t4463 + (t4390 * t4476 + t4463 * t4510) * t4292) * t4118 * t4496 - m(4) * g(3) + ((-t4282 * t4407 * t4454 + (t4229 * t4399 + t4284 * t4527 + t4233 - t4510) * t4513 - ((-t4272 * t4259 + t4544) * t4313 - t4464 * t4481) * pkin(6)) * t4117 * t4493 + (-t4279 * t4407 * t4456 + (t4226 * t4400 + t4281 * t4527 + t4232 - t4510) * t4514 - ((-t4272 * t4258 + t4545) * t4310 - t4465 * t4482) * pkin(6)) * t4116 * t4494 + (-t4276 * t4407 * t4458 + (t4223 * t4401 + t4278 * t4527 + t4231 - t4510) * t4515 - ((-t4272 * t4257 + t4546) * t4307 - t4466 * t4483) * pkin(6)) * t4115 * t4495 + (-t4273 * t4407 * t4462 + (t4218 * t4402 + t4275 * t4527 + t4220 - t4510) * t4516 - ((-t4272 * t4253 + t4547) * t4295 - t4467 * t4484) * pkin(6)) * t4108 * t4496) * t4522; ((g(1) * t4319 + g(2) * t4318) * t4270 + (g(1) * t4318 - g(2) * t4319) * t4271) * m(4) - ((t4126 * t4193 + t4129 * t4189) * t4097 + (t4102 * t4193 + t4105 * t4189) * t4497) * t4141 - ((t4125 * t4192 + t4128 * t4188) * t4096 + (t4101 * t4192 + t4104 * t4188) * t4498) * t4140 - ((t4124 * t4191 + t4127 * t4187) * t4095 + (t4100 * t4191 + t4103 * t4187) * t4499) * t4139 - ((t4122 * t4190 + t4123 * t4186) * t4094 + (t4098 * t4190 + t4099 * t4186) * t4500) * t4138 + ((t4111 * t4189 - t4114 * t4193) * t4416 + (t4110 * t4188 - t4113 * t4192) * t4417 + (t4109 * t4187 - t4112 * t4191) * t4418 + (t4106 * t4186 - t4107 * t4190) * t4419) * t4445;];
taugX  = t1;
