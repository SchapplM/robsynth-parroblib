% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4*4x21]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 13:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4RRRRR10V1G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V1G1A0_inertia_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V1G1A0_inertia_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4RRRRR10V1G1A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V1G1A0_inertia_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V1G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 12:09:03
% EndTime: 2020-08-07 12:13:20
% DurationCPUTime: 314.02s
% Computational Cost: add. (195804->2556), mult. (534044->4501), div. (15036->25), fcn. (496272->36), ass. (0->1565)
t2984 = cos(pkin(3));
t2966 = t2984 ^ 2;
t3999 = pkin(6) * t2966;
t3998 = -0.2e1 * pkin(6);
t2989 = sin(qJ(3,4));
t2939 = t2989 * pkin(2);
t2921 = pkin(1) * t2939;
t2990 = sin(qJ(2,4));
t2940 = t2990 * pkin(6);
t2983 = sin(pkin(3));
t2992 = cos(qJ(3,4));
t2993 = cos(qJ(2,4));
t3718 = t2992 * t2993;
t3658 = pkin(2) * t3718;
t3720 = t2990 * t2992;
t2865 = pkin(2) * t3720 - t2993 * pkin(6);
t3790 = t2865 * t2984;
t2774 = pkin(1) * t3790 + (-t2921 + (t3658 + t2940) * pkin(5)) * t2983;
t2770 = 0.1e1 / t2774 ^ 2;
t2769 = 0.1e1 / t2774;
t2995 = sin(qJ(3,3));
t2945 = t2995 * pkin(2);
t2922 = pkin(1) * t2945;
t2996 = sin(qJ(2,3));
t2946 = t2996 * pkin(6);
t3004 = cos(qJ(3,3));
t3005 = cos(qJ(2,3));
t3702 = t3004 * t3005;
t3656 = pkin(2) * t3702;
t3714 = t2996 * t3004;
t2866 = pkin(2) * t3714 - t3005 * pkin(6);
t3789 = t2866 * t2984;
t2790 = pkin(1) * t3789 + (-t2922 + (t3656 + t2946) * pkin(5)) * t2983;
t2776 = 0.1e1 / t2790 ^ 2;
t2775 = 0.1e1 / t2790;
t2998 = sin(qJ(3,2));
t2947 = t2998 * pkin(2);
t2923 = pkin(1) * t2947;
t2999 = sin(qJ(2,2));
t2948 = t2999 * pkin(6);
t3007 = cos(qJ(3,2));
t3008 = cos(qJ(2,2));
t3701 = t3007 * t3008;
t3654 = pkin(2) * t3701;
t3709 = t2999 * t3007;
t2867 = pkin(2) * t3709 - t3008 * pkin(6);
t3788 = t2867 * t2984;
t2791 = pkin(1) * t3788 + (-t2923 + (t3654 + t2948) * pkin(5)) * t2983;
t2778 = 0.1e1 / t2791 ^ 2;
t2777 = 0.1e1 / t2791;
t3001 = sin(qJ(3,1));
t2949 = t3001 * pkin(2);
t2924 = pkin(1) * t2949;
t3002 = sin(qJ(2,1));
t2950 = t3002 * pkin(6);
t3010 = cos(qJ(3,1));
t3011 = cos(qJ(2,1));
t3700 = t3010 * t3011;
t3652 = pkin(2) * t3700;
t3704 = t3002 * t3010;
t2868 = pkin(2) * t3704 - t3011 * pkin(6);
t3787 = t2868 * t2984;
t2792 = pkin(1) * t3787 + (-t2924 + (t3652 + t2950) * pkin(5)) * t2983;
t2780 = 0.1e1 / t2792 ^ 2;
t2779 = 0.1e1 / t2792;
t3761 = t2983 * t2984;
t2988 = legFrame(1,3);
t2932 = sin(t2988);
t2936 = cos(t2988);
t3003 = sin(qJ(1,1));
t3012 = cos(qJ(1,1));
t2839 = t2932 * t3003 - t3012 * t2936;
t2982 = t3011 ^ 2;
t2842 = t2932 * t3012 + t2936 * t3003;
t3725 = t2984 * t3010;
t3659 = pkin(2) * t3725;
t3398 = t2842 * t3659;
t3015 = pkin(6) ^ 2;
t2980 = t3010 ^ 2;
t3016 = pkin(2) ^ 2;
t3765 = t2980 * t3016;
t3410 = -t3015 + t3765;
t3997 = (t2839 * t3410 + t3398 * t3998) * t2982;
t2987 = legFrame(2,3);
t2931 = sin(t2987);
t2935 = cos(t2987);
t3000 = sin(qJ(1,2));
t3009 = cos(qJ(1,2));
t2838 = t2931 * t3000 - t3009 * t2935;
t2979 = t3008 ^ 2;
t2841 = t2931 * t3009 + t2935 * t3000;
t3727 = t2984 * t3007;
t3660 = pkin(2) * t3727;
t3399 = t2841 * t3660;
t2977 = t3007 ^ 2;
t3769 = t2977 * t3016;
t3411 = -t3015 + t3769;
t3996 = (t2838 * t3411 + t3399 * t3998) * t2979;
t2986 = legFrame(3,3);
t2930 = sin(t2986);
t2934 = cos(t2986);
t2997 = sin(qJ(1,3));
t3006 = cos(qJ(1,3));
t2837 = t2930 * t2997 - t3006 * t2934;
t2976 = t3005 ^ 2;
t2840 = t2930 * t3006 + t2934 * t2997;
t3729 = t2984 * t3004;
t3661 = pkin(2) * t3729;
t3400 = t2840 * t3661;
t2974 = t3004 ^ 2;
t3773 = t2974 * t3016;
t3412 = -t3015 + t3773;
t3995 = (t2837 * t3412 + t3400 * t3998) * t2976;
t2985 = legFrame(4,3);
t2929 = sin(t2985);
t2933 = cos(t2985);
t2991 = sin(qJ(1,4));
t2994 = cos(qJ(1,4));
t2835 = t2929 * t2991 - t2994 * t2933;
t2970 = t2993 ^ 2;
t2836 = t2929 * t2994 + t2933 * t2991;
t3737 = t2984 * t2992;
t3662 = pkin(2) * t3737;
t3404 = t2836 * t3662;
t2968 = t2992 ^ 2;
t3777 = t2968 * t3016;
t3413 = -t3015 + t3777;
t3994 = (t2835 * t3413 + t3404 * t3998) * t2970;
t2969 = 0.1e1 / t2992;
t3907 = pkin(6) * t2984;
t2920 = pkin(1) * t3907;
t3738 = t2984 * t2990;
t3671 = pkin(1) * t3738;
t3397 = t2992 * t3671;
t3690 = pkin(2) * pkin(5) * t2983;
t3786 = (-pkin(5) * t2940 + t2921) * t2983;
t3984 = 0.1e1 / (pkin(2) * t3397 + (t2992 * t3690 - t2920) * t2993 - t3786);
t3858 = t3984 * t2969;
t2975 = 0.1e1 / t3004;
t3734 = t2984 * t2996;
t3670 = pkin(1) * t3734;
t3395 = t3004 * t3670;
t3785 = (-pkin(5) * t2946 + t2922) * t2983;
t3985 = 0.1e1 / (pkin(2) * t3395 + (t3004 * t3690 - t2920) * t3005 - t3785);
t3856 = t3985 * t2975;
t2978 = 0.1e1 / t3007;
t3732 = t2984 * t2999;
t3669 = pkin(1) * t3732;
t3394 = t3007 * t3669;
t3784 = (-pkin(5) * t2948 + t2923) * t2983;
t3986 = 0.1e1 / (pkin(2) * t3394 + (t3007 * t3690 - t2920) * t3008 - t3784);
t3855 = t3986 * t2978;
t2981 = 0.1e1 / t3010;
t3730 = t2984 * t3002;
t3668 = pkin(1) * t3730;
t3396 = t3010 * t3668;
t3783 = (-pkin(5) * t2950 + t2924) * t2983;
t3987 = 0.1e1 / (pkin(2) * t3396 + (t3010 * t3690 - t2920) * t3011 - t3783);
t3854 = t3987 * t2981;
t2925 = t2970 - 0.2e1;
t2873 = t2925 * t2939 - pkin(5);
t2926 = t2976 - 0.2e1;
t2874 = t2926 * t2945 - pkin(5);
t2927 = t2979 - 0.2e1;
t2875 = t2927 * t2947 - pkin(5);
t2928 = t2982 - 0.2e1;
t2876 = t2928 * t2949 - pkin(5);
t3442 = t2983 * t3704;
t3278 = t3001 * t3442;
t3752 = t2983 * t3001;
t3916 = pkin(2) * t3011;
t3980 = t2950 + pkin(1);
t3993 = t2984 * (t2980 * t3916 + t3010 * t3980) - t3278 * t3916 + pkin(6) * (t3011 + 0.1e1) * (t3011 - 0.1e1) * t3752;
t3445 = t2983 * t3709;
t3279 = t2998 * t3445;
t3754 = t2983 * t2998;
t3918 = pkin(2) * t3008;
t3981 = t2948 + pkin(1);
t3992 = t2984 * (t2977 * t3918 + t3007 * t3981) - t3279 * t3918 + pkin(6) * (t3008 + 0.1e1) * (t3008 - 0.1e1) * t3754;
t3448 = t2983 * t3714;
t3280 = t2995 * t3448;
t3756 = t2983 * t2995;
t3920 = pkin(2) * t3005;
t3982 = t2946 + pkin(1);
t3991 = t2984 * (t2974 * t3920 + t3004 * t3982) - t3280 * t3920 + pkin(6) * (t3005 + 0.1e1) * (t3005 - 0.1e1) * t3756;
t3451 = t2983 * t3720;
t3281 = t2989 * t3451;
t3760 = t2983 * t2989;
t3922 = pkin(2) * t2993;
t3983 = t2940 + pkin(1);
t3990 = t2984 * (t2968 * t3922 + t2992 * t3983) - t3281 * t3922 + pkin(6) * (t2993 + 0.1e1) * (t2993 - 0.1e1) * t3760;
t3989 = 0.2e1 * pkin(5);
t3988 = 0.2e1 * pkin(6);
t3938 = 0.2e1 * t2966;
t3936 = t3938 - 0.2e1;
t2942 = pkin(1) * t2990;
t2954 = pkin(1) * t2996;
t2955 = pkin(1) * t2999;
t2956 = pkin(1) * t3002;
t3485 = t2835 * t3760;
t2715 = -t2836 * t2940 + t2835 * t3790 + (-t2836 * t3718 - t3485) * pkin(2);
t3484 = t2836 * t3760;
t2716 = t2835 * t2940 + t2836 * t3790 + (t2835 * t3718 - t3484) * pkin(2);
t3979 = t2715 * t2716;
t3483 = t2837 * t3756;
t2723 = -t2840 * t2946 + t2837 * t3789 + (-t2840 * t3702 - t3483) * pkin(2);
t3480 = t2840 * t3756;
t2726 = t2837 * t2946 + t2840 * t3789 + (t2837 * t3702 - t3480) * pkin(2);
t3978 = t2723 * t2726;
t3482 = t2838 * t3754;
t2724 = -t2841 * t2948 + t2838 * t3788 + (-t2841 * t3701 - t3482) * pkin(2);
t3479 = t2841 * t3754;
t2727 = t2838 * t2948 + t2841 * t3788 + (t2838 * t3701 - t3479) * pkin(2);
t3977 = t2724 * t2727;
t3481 = t2839 * t3752;
t2725 = -t2842 * t2950 + t2839 * t3787 + (-t2842 * t3700 - t3481) * pkin(2);
t3478 = t2842 * t3752;
t2728 = t2839 * t2950 + t2842 * t3787 + (t2839 * t3700 - t3478) * pkin(2);
t3976 = t2725 * t2728;
t2898 = t3936 * pkin(6);
t2900 = t2939 + pkin(5);
t3757 = t2983 * t2993;
t3441 = t2900 * t3757;
t3461 = t2993 * t3777;
t3759 = t2983 * t2990;
t3473 = t2900 * t3759;
t3634 = (-t2966 + 0.1e1) * pkin(6);
t3778 = (t2984 + 0.1e1) * (t2984 - 0.1e1);
t3923 = pkin(2) * t2992;
t2730 = -t2990 * t3461 * t3778 + (t2898 * t2970 + t2984 * t3441 + t2942 + t3634) * t3923 - ((-t2940 * t2966 + t3983) * t2993 - t2984 * t3473) * pkin(6);
t3645 = pkin(5) * t3757;
t2850 = t3645 + t3671;
t2825 = t2850 * t3923;
t3736 = t2984 * t2993;
t2882 = pkin(6) * t3736;
t2759 = 0.1e1 / (-pkin(1) * t2882 + t2825 - t3786);
t3975 = t2730 * t2759;
t2905 = t2945 + pkin(5);
t3749 = t2983 * t3005;
t3440 = t2905 * t3749;
t3459 = t3005 * t3773;
t3755 = t2983 * t2996;
t3470 = t2905 * t3755;
t3921 = pkin(2) * t3004;
t2731 = -t2996 * t3459 * t3778 + (t2898 * t2976 + t2984 * t3440 + t2954 + t3634) * t3921 - ((-t2946 * t2966 + t3982) * t3005 - t2984 * t3470) * pkin(6);
t3641 = pkin(5) * t3749;
t2855 = t3641 + t3670;
t2828 = t2855 * t3921;
t3728 = t2984 * t3005;
t2883 = pkin(6) * t3728;
t2767 = 0.1e1 / (-pkin(1) * t2883 + t2828 - t3785);
t3974 = t2731 * t2767;
t2909 = t2947 + pkin(5);
t3747 = t2983 * t3008;
t3439 = t2909 * t3747;
t3457 = t3008 * t3769;
t3753 = t2983 * t2999;
t3467 = t2909 * t3753;
t3919 = pkin(2) * t3007;
t2732 = -t2999 * t3457 * t3778 + (t2898 * t2979 + t2984 * t3439 + t2955 + t3634) * t3919 - ((-t2948 * t2966 + t3981) * t3008 - t2984 * t3467) * pkin(6);
t3640 = pkin(5) * t3747;
t2856 = t3640 + t3669;
t2829 = t2856 * t3919;
t3726 = t2984 * t3008;
t2884 = pkin(6) * t3726;
t2768 = 0.1e1 / (-pkin(1) * t2884 + t2829 - t3784);
t3973 = t2732 * t2768;
t2913 = t2949 + pkin(5);
t3745 = t2983 * t3011;
t3438 = t2913 * t3745;
t3455 = t3011 * t3765;
t3751 = t2983 * t3002;
t3464 = t2913 * t3751;
t3917 = pkin(2) * t3010;
t2733 = -t3002 * t3455 * t3778 + (t2898 * t2982 + t2984 * t3438 + t2956 + t3634) * t3917 - ((-t2950 * t2966 + t3980) * t3011 - t2984 * t3464) * pkin(6);
t3639 = pkin(5) * t3745;
t2854 = t3639 + t3668;
t2827 = t2854 * t3917;
t3724 = t2984 * t3011;
t2885 = pkin(6) * t3724;
t2766 = 0.1e1 / (-pkin(1) * t2885 + t2827 - t3783);
t3972 = t2733 * t2766;
t3845 = t2769 * t2984;
t3834 = t2775 * t2984;
t3824 = t2777 * t2984;
t3814 = t2779 * t2984;
t3971 = t2969 * t2983;
t3970 = t2975 * t2983;
t3969 = t2978 * t2983;
t3968 = t2981 * t2983;
t2903 = t2942 + pkin(6);
t3967 = -pkin(6) * t2970 + t2903;
t2916 = t2954 + pkin(6);
t3966 = -pkin(6) * t2976 + t2916;
t2917 = t2955 + pkin(6);
t3965 = -pkin(6) * t2979 + t2917;
t2918 = t2956 + pkin(6);
t3964 = -pkin(6) * t2982 + t2918;
t2899 = pkin(5) * t2989 + pkin(2);
t3927 = pkin(2) * t2968;
t3429 = t2899 - 0.2e1 * t3927;
t3721 = t2989 * t2993;
t3638 = pkin(6) * t3721;
t3951 = t3718 * t3999 - t2873 * t2992 * t3761 + (t3429 * t2966 - t3638 * t3761 - t2899 + t3927) * t2990;
t2904 = pkin(5) * t2995 + pkin(2);
t3926 = pkin(2) * t2974;
t3428 = t2904 - 0.2e1 * t3926;
t3715 = t2995 * t3005;
t3637 = pkin(6) * t3715;
t3950 = t3702 * t3999 - t2874 * t3004 * t3761 + (t3428 * t2966 - t3637 * t3761 - t2904 + t3926) * t2996;
t2908 = pkin(5) * t2998 + pkin(2);
t3925 = pkin(2) * t2977;
t3427 = t2908 - 0.2e1 * t3925;
t3710 = t2998 * t3008;
t3636 = pkin(6) * t3710;
t3949 = t3701 * t3999 - t2875 * t3007 * t3761 + (t3427 * t2966 - t3636 * t3761 - t2908 + t3925) * t2999;
t2912 = pkin(5) * t3001 + pkin(2);
t3924 = pkin(2) * t2980;
t3426 = t2912 - 0.2e1 * t3924;
t3705 = t3001 * t3011;
t3635 = pkin(6) * t3705;
t3948 = t3700 * t3999 - t2876 * t3010 * t3761 + (t3426 * t2966 - t3635 * t3761 - t2912 + t3924) * t3002;
t3947 = 0.2e1 * pkin(1);
t3946 = koppelP(1,1);
t3945 = koppelP(2,1);
t3944 = koppelP(3,1);
t3943 = koppelP(4,1);
t3942 = koppelP(1,2);
t3941 = koppelP(2,2);
t3940 = koppelP(3,2);
t3939 = koppelP(4,2);
t3935 = 0.2e1 * t2968 - 0.1e1;
t3934 = 0.2e1 * t2974 - 0.1e1;
t3933 = 0.2e1 * t2977 - 0.1e1;
t3932 = 0.2e1 * t2980 - 0.1e1;
t3931 = pkin(1) * t2993;
t3930 = pkin(1) * t3005;
t3929 = pkin(1) * t3008;
t3928 = pkin(1) * t3011;
t3915 = pkin(5) * t2990;
t3914 = pkin(5) * t2996;
t3913 = pkin(5) * t2999;
t3912 = pkin(5) * t3002;
t3691 = 0.2e1 * pkin(2) * (t2966 - 0.1e1 / 0.2e1);
t3758 = t2983 * t2992;
t3723 = t2989 * t2990;
t3453 = t2983 * t3723;
t2833 = t3453 - t3737;
t3802 = t2833 * t2993;
t2737 = (-t2899 * t3778 + t2968 * t3691) * t2990 + (pkin(6) * t3802 + t2873 * t3758) * t2984;
t2753 = (-pkin(2) * t3802 + t2984 * t3983) * t2992 - t3967 * t3760;
t2675 = t2737 * t2994 + t2753 * t2991;
t2676 = -t2737 * t2991 + t2753 * t2994;
t3013 = xP(4);
t2963 = sin(t3013);
t2964 = cos(t3013);
t2861 = -t2963 * t3939 + t2964 * t3943;
t3699 = t2963 * t3943 + t2964 * t3939;
t2469 = (t3699 * (-t2675 * t2929 + t2676 * t2933) - t2861 * (t2675 * t2933 + t2676 * t2929)) * t3858;
t3646 = pkin(5) * t3759;
t2849 = pkin(1) * t3736 - t3646;
t3906 = t2469 * t2849;
t3905 = t2469 * t2850;
t3904 = t2469 * t2989;
t3903 = t2469 * t2992;
t3748 = t2983 * t3007;
t3712 = t2998 * t2999;
t3447 = t2983 * t3712;
t2844 = t3447 - t3727;
t3800 = t2844 * t3008;
t2739 = (-t2908 * t3778 + t2977 * t3691) * t2999 + (pkin(6) * t3800 + t2875 * t3748) * t2984;
t2755 = (-pkin(2) * t3800 + t2984 * t3981) * t3007 - t3965 * t3754;
t2684 = t2739 * t3009 + t2755 * t3000;
t2687 = -t2739 * t3000 + t2755 * t3009;
t2863 = -t2963 * t3941 + t2964 * t3945;
t3697 = t2963 * t3945 + t2964 * t3941;
t2471 = (t3697 * (-t2684 * t2931 + t2687 * t2935) - t2863 * (t2684 * t2935 + t2687 * t2931)) * t3855;
t3643 = pkin(5) * t3753;
t2852 = pkin(1) * t3726 - t3643;
t3902 = t2471 * t2852;
t3901 = t2471 * t2856;
t3900 = t2471 * t2998;
t3899 = t2471 * t3007;
t3746 = t2983 * t3010;
t3707 = t3001 * t3002;
t3444 = t2983 * t3707;
t2847 = t3444 - t3725;
t3799 = t2847 * t3011;
t2740 = (-t2912 * t3778 + t2980 * t3691) * t3002 + (pkin(6) * t3799 + t2876 * t3746) * t2984;
t2756 = (-pkin(2) * t3799 + t2984 * t3980) * t3010 - t3964 * t3752;
t2685 = t2740 * t3012 + t2756 * t3003;
t2688 = -t2740 * t3003 + t2756 * t3012;
t2864 = -t2963 * t3942 + t2964 * t3946;
t3696 = t2963 * t3946 + t2964 * t3942;
t2472 = (t3696 * (-t2685 * t2932 + t2688 * t2936) - (t2685 * t2936 + t2688 * t2932) * t2864) * t3854;
t3642 = pkin(5) * t3751;
t2853 = pkin(1) * t3724 - t3642;
t3898 = t2472 * t2853;
t3897 = t2472 * t2854;
t3896 = t2472 * t3001;
t3895 = t2472 * t3010;
t3750 = t2983 * t3004;
t3717 = t2995 * t2996;
t3450 = t2983 * t3717;
t2843 = t3450 - t3729;
t3801 = t2843 * t3005;
t2738 = (-t2904 * t3778 + t2974 * t3691) * t2996 + (pkin(6) * t3801 + t2874 * t3750) * t2984;
t2754 = (-pkin(2) * t3801 + t2984 * t3982) * t3004 - t3966 * t3756;
t2683 = t2738 * t3006 + t2754 * t2997;
t2686 = -t2738 * t2997 + t2754 * t3006;
t2862 = -t2963 * t3940 + t2964 * t3944;
t3698 = t2963 * t3944 + t2964 * t3940;
t2473 = ((-t2683 * t2930 + t2686 * t2934) * t3698 - t2862 * (t2683 * t2934 + t2686 * t2930)) * t3856;
t3644 = pkin(5) * t3755;
t2851 = pkin(1) * t3728 - t3644;
t3894 = t2473 * t2851;
t3893 = t2473 * t2855;
t3892 = t2473 * t2995;
t3891 = t2473 * t3004;
t2607 = t3951 * t2835 + t2836 * t3990 - t3484 * t2942;
t3890 = t2607 * t2969;
t2608 = -t2835 * t3990 + t3951 * t2836 + t3485 * t2942;
t3889 = t2608 * t2969;
t2691 = t2715 * t2769;
t2673 = t2861 * t2691;
t3421 = t2769 * t3699;
t2674 = t2716 * t3421;
t2613 = t2674 - t2673;
t3888 = t2613 * t2769;
t3887 = t2613 * t2849;
t3886 = t2613 * t2969;
t3885 = t2613 * t2993;
t2617 = t3950 * t2837 + t2840 * t3991 - t3480 * t2954;
t3884 = t2617 * t2975;
t2618 = t3949 * t2838 + t2841 * t3992 - t3479 * t2955;
t3883 = t2618 * t2978;
t2619 = t3948 * t2839 + t2842 * t3993 - t3478 * t2956;
t3882 = t2619 * t2981;
t2620 = -t2837 * t3991 + t3950 * t2840 + t3483 * t2954;
t3881 = t2620 * t2975;
t2621 = -t2838 * t3992 + t3949 * t2841 + t3482 * t2955;
t3880 = t2621 * t2978;
t2622 = -t2839 * t3993 + t3948 * t2842 + t3481 * t2956;
t3879 = t2622 * t2981;
t2701 = t2723 * t2775;
t2677 = t2862 * t2701;
t3420 = t2775 * t3698;
t2680 = t2726 * t3420;
t2626 = t2680 - t2677;
t3878 = t2626 * t2775;
t3877 = t2626 * t2851;
t3876 = t2626 * t2975;
t3875 = t2626 * t3005;
t2702 = t2724 * t2777;
t2678 = t2863 * t2702;
t3419 = t2777 * t3697;
t2681 = t2727 * t3419;
t2627 = t2681 - t2678;
t3874 = t2627 * t2777;
t3873 = t2627 * t2852;
t3872 = t2627 * t2978;
t3871 = t2627 * t3008;
t2703 = t2725 * t2779;
t2679 = t2864 * t2703;
t3418 = t2779 * t3696;
t2682 = t2728 * t3418;
t2628 = t2682 - t2679;
t3870 = t2628 * t2779;
t3869 = t2628 * t2853;
t3868 = t2628 * t2981;
t3867 = t2628 * t3011;
t2692 = t2716 * t2769;
t2704 = t2726 * t2775;
t2705 = t2727 * t2777;
t2706 = t2728 * t2779;
t2729 = (t2983 * t2882 + t2873 * t2966 + pkin(5) + (-t2970 + 0.1e1) * t2939) * t2992 - t3983 * t3721 + (t2966 * t3638 + t3429 * t3761) * t2990;
t3866 = t2729 * t2759;
t3017 = 0.1e1 / pkin(2);
t3865 = t2730 * t3017;
t3864 = t2731 * t3017;
t3863 = t2732 * t3017;
t3862 = t2733 * t3017;
t2734 = (t2983 * t2883 + t2874 * t2966 + pkin(5) + (-t2976 + 0.1e1) * t2945) * t3004 - t3982 * t3715 + (t2966 * t3637 + t3428 * t3761) * t2996;
t3861 = t2734 * t2767;
t2735 = (t2983 * t2884 + t2875 * t2966 + pkin(5) + (-t2979 + 0.1e1) * t2947) * t3007 - t3981 * t3710 + (t2966 * t3636 + t3427 * t3761) * t2999;
t3860 = t2735 * t2768;
t2736 = (t2983 * t2885 + t2876 * t2966 + pkin(5) + (-t2982 + 0.1e1) * t2949) * t3010 - t3980 * t3705 + (t2966 * t3635 + t3426 * t3761) * t3002;
t3859 = t2736 * t2766;
t3857 = t2759 * t2969;
t3853 = t2766 * t2981;
t3852 = t2767 * t2975;
t3851 = t2768 * t2978;
t3782 = t2900 * t2983;
t3471 = t2994 * t3782;
t2805 = t2903 * t2991 - t2990 * t3471;
t2901 = 0.2e1 * t2940 + pkin(1);
t2821 = t2901 * t2991 - t3471;
t3472 = t2991 * t3782;
t3113 = t2903 * t2994 + t2990 * t3472;
t3125 = t2901 * t2994 + t3472;
t3157 = t3413 * t3738;
t3253 = t3413 * t2836;
t3405 = t2835 * t3662;
t2642 = (t3405 * t3988 + t3253) * t2970 + ((t2821 * t2933 + t2929 * t3125) * t3923 - t2835 * t3157) * t2993 + (t2805 * t2933 + t2929 * t3113 - t3405) * pkin(6);
t3667 = pkin(1) * t2984 * t3017;
t3261 = t2969 * t2990 * t3667;
t3121 = t3984 * t2983 * t3261;
t2965 = t2983 ^ 2;
t3774 = t2969 * t3017;
t3531 = t3984 * t3774;
t3185 = t2965 * t2993 * t3531;
t3688 = t2769 * t3938;
t2431 = t2642 * t3121 + (t2642 * t3185 - t2715 * t3688 + 0.2e1 * t2691) * pkin(5);
t3744 = t2983 * t3017;
t3530 = t3984 * t3744;
t3409 = pkin(1) * t3530;
t3433 = 0.2e1 * t3646;
t3695 = 0.2e1 * t3931;
t3437 = t2769 * t3695;
t3650 = t2769 * t3915;
t3675 = t2969 * t3931;
t3041 = -(-t2607 * t3650 + t2642 * t3409) * t3971 + (-t2607 * t3675 + t2715 * t3433) * t3845 - t2715 * t3437;
t2291 = -t2431 * t2992 - t2989 * t3041;
t3850 = t2769 * t2291;
t2292 = -t2431 * t2989 + t2992 * t3041;
t3849 = t2769 * t2292;
t2641 = t3994 + ((t2929 * t2821 - t2933 * t3125) * t3923 + t3253 * t3738) * t2993 + (t2929 * t2805 - t2933 * t3113 + t3404) * pkin(6);
t2432 = -t2641 * t3121 + (-t2641 * t3185 - t2716 * t3688 + 0.2e1 * t2692) * pkin(5);
t3040 = -(-t2608 * t3650 - t2641 * t3409) * t3971 + (-t2608 * t3675 + t2716 * t3433) * t3845 - t2716 * t3437;
t2293 = -t2432 * t2992 - t2989 * t3040;
t3848 = t2769 * t2293;
t2294 = -t2432 * t2989 + t2992 * t3040;
t3847 = t2769 * t2294;
t3846 = t2769 * t2969;
t3844 = t2769 * t2993;
t3843 = t2770 * t2849;
t2967 = t2990 ^ 2;
t3842 = t2770 * t2967;
t3841 = t2770 * t2969;
t3739 = t2984 * t2989;
t2811 = pkin(2) * t3739 + t2865 * t2983;
t3840 = t2770 * t2811 ^ 2;
t3781 = t2905 * t2983;
t3468 = t3006 * t3781;
t2808 = t2916 * t2997 - t2996 * t3468;
t2906 = 0.2e1 * t2946 + pkin(1);
t2822 = t2906 * t2997 - t3468;
t3469 = t2997 * t3781;
t3112 = t2916 * t3006 + t2996 * t3469;
t3124 = t2906 * t3006 + t3469;
t3156 = t3412 * t3734;
t3252 = t3412 * t2840;
t3403 = t2837 * t3661;
t2646 = (t3403 * t3988 + t3252) * t2976 + ((t2822 * t2934 + t2930 * t3124) * t3921 - t2837 * t3156) * t3005 + (t2808 * t2934 + t2930 * t3112 - t3403) * pkin(6);
t3260 = t2975 * t2996 * t3667;
t3120 = t3985 * t2983 * t3260;
t3770 = t2975 * t3017;
t3527 = t3985 * t3770;
t3180 = t2965 * t3005 * t3527;
t3687 = t2775 * t3938;
t2433 = t2646 * t3120 + (t2646 * t3180 - t2723 * t3687 + 0.2e1 * t2701) * pkin(5);
t3526 = t3985 * t3744;
t3408 = pkin(1) * t3526;
t3432 = 0.2e1 * t3644;
t3694 = 0.2e1 * t3930;
t3436 = t2775 * t3694;
t3649 = t2775 * t3914;
t3674 = t2975 * t3930;
t3039 = -(-t2617 * t3649 + t2646 * t3408) * t3970 + (-t2617 * t3674 + t2723 * t3432) * t3834 - t2723 * t3436;
t2295 = -t3004 * t2433 - t2995 * t3039;
t3839 = t2775 * t2295;
t2296 = -t2995 * t2433 + t3004 * t3039;
t3838 = t2775 * t2296;
t2643 = t3995 + ((t2930 * t2822 - t2934 * t3124) * t3921 + t3252 * t3734) * t3005 + (t2930 * t2808 - t2934 * t3112 + t3400) * pkin(6);
t2436 = -t2643 * t3120 + (-t2643 * t3180 - t2726 * t3687 + 0.2e1 * t2704) * pkin(5);
t3036 = -(-t2620 * t3649 - t2643 * t3408) * t3970 + (-t2620 * t3674 + t2726 * t3432) * t3834 - t2726 * t3436;
t2297 = -t3004 * t2436 - t2995 * t3036;
t3837 = t2775 * t2297;
t2298 = -t2995 * t2436 + t3004 * t3036;
t3836 = t2775 * t2298;
t3835 = t2775 * t2975;
t3833 = t2775 * t3005;
t3832 = t2776 * t2851;
t2971 = t2996 ^ 2;
t3831 = t2776 * t2971;
t3830 = t2776 * t2975;
t3780 = t2909 * t2983;
t3465 = t3009 * t3780;
t2809 = t2917 * t3000 - t2999 * t3465;
t2910 = 0.2e1 * t2948 + pkin(1);
t2823 = t2910 * t3000 - t3465;
t3466 = t3000 * t3780;
t3111 = t2917 * t3009 + t2999 * t3466;
t3123 = t2910 * t3009 + t3466;
t3155 = t3411 * t3732;
t3251 = t3411 * t2841;
t3402 = t2838 * t3660;
t2647 = (t3402 * t3988 + t3251) * t2979 + ((t2823 * t2935 + t2931 * t3123) * t3919 - t2838 * t3155) * t3008 + (t2809 * t2935 + t2931 * t3111 - t3402) * pkin(6);
t3259 = t2978 * t2999 * t3667;
t3119 = t3986 * t2983 * t3259;
t3766 = t2978 * t3017;
t3523 = t3986 * t3766;
t3175 = t2965 * t3008 * t3523;
t3686 = t2777 * t3938;
t2434 = t2647 * t3119 + (t2647 * t3175 - t2724 * t3686 + 0.2e1 * t2702) * pkin(5);
t3522 = t3986 * t3744;
t3407 = pkin(1) * t3522;
t3431 = 0.2e1 * t3643;
t3693 = 0.2e1 * t3929;
t3435 = t2777 * t3693;
t3648 = t2777 * t3913;
t3673 = t2978 * t3929;
t3038 = -(-t2618 * t3648 + t2647 * t3407) * t3969 + (-t2618 * t3673 + t2724 * t3431) * t3824 - t2724 * t3435;
t2299 = -t3007 * t2434 - t2998 * t3038;
t3829 = t2777 * t2299;
t2300 = -t2998 * t2434 + t3007 * t3038;
t3828 = t2777 * t2300;
t2644 = t3996 + ((t2931 * t2823 - t2935 * t3123) * t3919 + t3251 * t3732) * t3008 + (t2931 * t2809 - t2935 * t3111 + t3399) * pkin(6);
t2437 = -t2644 * t3119 + (-t2644 * t3175 - t2727 * t3686 + 0.2e1 * t2705) * pkin(5);
t3035 = -(-t2621 * t3648 - t2644 * t3407) * t3969 + (-t2621 * t3673 + t2727 * t3431) * t3824 - t2727 * t3435;
t2301 = -t3007 * t2437 - t2998 * t3035;
t3827 = t2777 * t2301;
t2302 = -t2998 * t2437 + t3007 * t3035;
t3826 = t2777 * t2302;
t3825 = t2777 * t2978;
t3823 = t2777 * t3008;
t3822 = t2778 * t2852;
t2972 = t2999 ^ 2;
t3821 = t2778 * t2972;
t3820 = t2778 * t2978;
t3779 = t2913 * t2983;
t3462 = t3012 * t3779;
t2810 = t2918 * t3003 - t3002 * t3462;
t2914 = 0.2e1 * t2950 + pkin(1);
t2824 = t2914 * t3003 - t3462;
t3463 = t3003 * t3779;
t3110 = t2918 * t3012 + t3002 * t3463;
t3122 = t2914 * t3012 + t3463;
t3154 = t3410 * t3730;
t3250 = t3410 * t2842;
t3401 = t2839 * t3659;
t2648 = (t3401 * t3988 + t3250) * t2982 + ((t2824 * t2936 + t2932 * t3122) * t3917 - t2839 * t3154) * t3011 + (t2810 * t2936 + t2932 * t3110 - t3401) * pkin(6);
t3258 = t2981 * t3002 * t3667;
t3118 = t3987 * t2983 * t3258;
t3762 = t2981 * t3017;
t3519 = t3987 * t3762;
t3170 = t2965 * t3011 * t3519;
t3685 = t2779 * t3938;
t2435 = t2648 * t3118 + (t2648 * t3170 - t2725 * t3685 + 0.2e1 * t2703) * pkin(5);
t3518 = t3987 * t3744;
t3406 = pkin(1) * t3518;
t3430 = 0.2e1 * t3642;
t3692 = 0.2e1 * t3928;
t3434 = t2779 * t3692;
t3647 = t2779 * t3912;
t3672 = t2981 * t3928;
t3037 = -(-t2619 * t3647 + t2648 * t3406) * t3968 + (-t2619 * t3672 + t2725 * t3430) * t3814 - t2725 * t3434;
t2303 = -t2435 * t3010 - t3001 * t3037;
t3819 = t2779 * t2303;
t2304 = -t3001 * t2435 + t3010 * t3037;
t3818 = t2779 * t2304;
t2645 = t3997 + ((t2932 * t2824 - t2936 * t3122) * t3917 + t3250 * t3730) * t3011 + (t2932 * t2810 - t2936 * t3110 + t3398) * pkin(6);
t2438 = -t2645 * t3118 + (-t2645 * t3170 - t2728 * t3685 + 0.2e1 * t2706) * pkin(5);
t3034 = -(-t2622 * t3647 - t2645 * t3406) * t3968 + (-t2622 * t3672 + t2728 * t3430) * t3814 - t2728 * t3434;
t2305 = -t2438 * t3010 - t3001 * t3034;
t3817 = t2779 * t2305;
t2306 = -t3001 * t2438 + t3010 * t3034;
t3816 = t2779 * t2306;
t3815 = t2779 * t2981;
t3813 = t2779 * t3011;
t3812 = t2780 * t2853;
t2973 = t3002 ^ 2;
t3811 = t2780 * t2973;
t3810 = t2780 * t2981;
t3735 = t2984 * t2995;
t2818 = pkin(2) * t3735 + t2866 * t2983;
t3809 = t2776 * t2818 ^ 2;
t3733 = t2984 * t2998;
t2819 = pkin(2) * t3733 + t2867 * t2983;
t3808 = t2778 * t2819 ^ 2;
t3731 = t2984 * t3001;
t2820 = pkin(2) * t3731 + t2868 * t2983;
t3807 = t2780 * t2820 ^ 2;
t2745 = t2811 * t2769;
t2746 = t2818 * t2775;
t2747 = t2819 * t2777;
t2748 = t2820 * t2779;
t3798 = t2849 * t2969;
t3797 = t2850 * t2969;
t3796 = t2851 * t2975;
t3795 = t2852 * t2978;
t3794 = t2853 * t2981;
t3793 = t2854 * t2981;
t3792 = t2855 * t2975;
t3791 = t2856 * t2978;
t3776 = t2969 * t2984;
t3775 = t2969 * t2989;
t3772 = t2975 * t2984;
t3771 = t2975 * t2995;
t3768 = t2978 * t2984;
t3767 = t2978 * t2998;
t3764 = t2981 * t2984;
t3763 = t2981 * t3001;
t2586 = t2607 * t3846;
t2577 = t2861 * t2586;
t2578 = t3421 * t3889;
t2470 = t2578 - t2577;
t3743 = t2984 * t2470;
t2592 = t2617 * t3835;
t2579 = t2862 * t2592;
t2582 = t3420 * t3881;
t2474 = t2582 - t2579;
t3742 = t2984 * t2474;
t2593 = t2618 * t3825;
t2580 = t2863 * t2593;
t2583 = t3419 * t3880;
t2475 = t2583 - t2580;
t3741 = t2984 * t2475;
t2594 = t2619 * t3815;
t2581 = t2864 * t2594;
t2584 = t3418 * t3879;
t2476 = t2584 - t2581;
t3740 = t2984 * t2476;
t3722 = t2989 * t2992;
t3719 = t2990 * t2993;
t3716 = t2995 * t3004;
t3713 = t2996 * t3005;
t3711 = t2998 * t3007;
t3708 = t2999 * t3008;
t3706 = t3001 * t3010;
t3703 = t3002 * t3011;
t3689 = 0.2e1 * t2965;
t3684 = -0.2e1 * t3761;
t3683 = -0.2e1 * t3722;
t3682 = 0.2e1 * t3722;
t3681 = -0.2e1 * t3716;
t3680 = 0.2e1 * t3716;
t3679 = -0.2e1 * t3711;
t3678 = 0.2e1 * t3711;
t3677 = -0.2e1 * t3706;
t3676 = 0.2e1 * t3706;
t3629 = t2769 * t3906;
t3628 = t2769 * t3905;
t3627 = t2469 * t2745;
t3626 = t2777 * t3902;
t3625 = t2777 * t3901;
t3624 = t2471 * t2747;
t3623 = t2779 * t3898;
t3622 = t2779 * t3897;
t3621 = t2472 * t2748;
t3620 = t2775 * t3894;
t3619 = t2775 * t3893;
t3618 = t2473 * t2746;
t3617 = t2607 * t3843;
t3616 = t2607 * t3841;
t3615 = t2607 * t3775;
t2587 = t2608 * t3846;
t3614 = t2608 * t3843;
t3613 = t2608 * t3841;
t3612 = t2608 * t3775;
t3611 = t2967 * t3888;
t3610 = t2613 * t3798;
t3609 = t2613 * t3797;
t3608 = t2617 * t3832;
t3607 = t2617 * t3830;
t3606 = t2617 * t3771;
t3605 = t2618 * t3822;
t3604 = t2618 * t3820;
t3603 = t2618 * t3767;
t3602 = t2619 * t3812;
t3601 = t2619 * t3810;
t3600 = t2619 * t3763;
t2595 = t2620 * t3835;
t3599 = t2620 * t3832;
t3598 = t2620 * t3830;
t3597 = t2620 * t3771;
t2596 = t2621 * t3825;
t3596 = t2621 * t3822;
t3595 = t2621 * t3820;
t3594 = t2621 * t3767;
t2597 = t2622 * t3815;
t3593 = t2622 * t3812;
t3592 = t2622 * t3810;
t3591 = t2622 * t3763;
t3590 = t2971 * t3878;
t3589 = t2626 * t3796;
t3588 = t2626 * t3792;
t3587 = t2972 * t3874;
t3586 = t2627 * t3795;
t3585 = t2627 * t3791;
t3584 = t2973 * t3870;
t3583 = t2628 * t3794;
t3582 = t2628 * t3793;
t2700 = t2729 * t3857;
t2741 = t2984 * t2745;
t2657 = t2741 + t2700;
t3307 = t3759 * t2745;
t2631 = t2657 * t2989 + t2992 * t3307;
t3581 = t2631 * t3775;
t2710 = t2734 * t3852;
t2742 = t2984 * t2746;
t2668 = t2742 + t2710;
t3291 = t3755 * t2746;
t2638 = t2668 * t2995 + t3004 * t3291;
t3580 = t2638 * t3771;
t2711 = t2735 * t3851;
t2743 = t2984 * t2747;
t2670 = t2743 + t2711;
t3287 = t3753 * t2747;
t2639 = t2670 * t2998 + t3007 * t3287;
t3579 = t2639 * t3767;
t2712 = t2736 * t3853;
t2744 = t2984 * t2748;
t2672 = t2744 + t2712;
t3283 = t3751 * t2748;
t2640 = t2672 * t3001 + t3010 * t3283;
t3578 = t2640 * t3763;
t3577 = t2641 * t3858;
t3576 = t2642 * t3858;
t3575 = t2643 * t3856;
t3574 = t2644 * t3855;
t3573 = t2645 * t3854;
t3572 = t2646 * t3856;
t3571 = t2647 * t3855;
t3570 = t2648 * t3854;
t3543 = t2730 * t3774;
t3351 = t2759 * t3543;
t3510 = t2993 * t2745;
t2650 = t2983 * t3510 - t3351;
t3569 = t2650 * t3858;
t3568 = t2650 * t3775;
t3567 = t2657 * t3846;
t3541 = t2731 * t3770;
t3348 = t2767 * t3541;
t3494 = t3005 * t2746;
t2658 = t2983 * t3494 - t3348;
t3566 = t2658 * t3856;
t3565 = t2658 * t3771;
t3539 = t2732 * t3766;
t3345 = t2768 * t3539;
t3490 = t3008 * t2747;
t2659 = t2983 * t3490 - t3345;
t3564 = t2659 * t3855;
t3563 = t2659 * t3767;
t3537 = t2733 * t3762;
t3342 = t2766 * t3537;
t3486 = t3011 * t2748;
t2660 = t2983 * t3486 - t3342;
t3562 = t2660 * t3854;
t3561 = t2660 * t3763;
t3560 = t2668 * t3835;
t3559 = t2670 * t3825;
t3558 = t2672 * t3815;
t3557 = t2770 * t3979;
t3556 = t2715 * t3844;
t3555 = t2716 * t3844;
t3554 = t2776 * t3978;
t3553 = t2723 * t3833;
t3552 = t2778 * t3977;
t3551 = t2724 * t3823;
t3550 = t2780 * t3976;
t3549 = t2725 * t3813;
t3548 = t2726 * t3833;
t3547 = t2727 * t3823;
t3546 = t2728 * t3813;
t3545 = t2849 * t3866;
t3544 = t2730 * t3857;
t3542 = t2731 * t3852;
t3540 = t2732 * t3851;
t3538 = t2733 * t3853;
t3536 = t2851 * t3861;
t3535 = t2852 * t3860;
t3534 = t2853 * t3859;
t2797 = pkin(1) * t3758 + t2850 * t2989;
t3533 = t2797 * t3858;
t2798 = (pkin(1) * t2989 - pkin(5) * t3718) * t2983 - t3397;
t3532 = t2798 * t3858;
t2799 = pkin(1) * t3750 + t2855 * t2995;
t3529 = t2799 * t3856;
t2802 = (pkin(1) * t2995 - pkin(5) * t3702) * t2983 - t3395;
t3528 = t2802 * t3856;
t2800 = pkin(1) * t3748 + t2856 * t2998;
t3525 = t2800 * t3855;
t2803 = (pkin(1) * t2998 - pkin(5) * t3701) * t2983 - t3394;
t3524 = t2803 * t3855;
t2801 = pkin(1) * t3746 + t2854 * t3001;
t3521 = t2801 * t3854;
t2804 = (pkin(1) * t3001 - pkin(5) * t3700) * t2983 - t3396;
t3520 = t2804 * t3854;
t3517 = t2769 * t2745;
t3516 = t2770 * t3798;
t3515 = t2770 * t3797;
t3514 = t2770 * t3719;
t3513 = t2849 * t2745;
t3512 = t2967 * t2745;
t3511 = t2969 * t2745;
t3509 = t2775 * t2746;
t3508 = t2776 * t3796;
t3507 = t2776 * t3792;
t3506 = t2776 * t3713;
t3505 = t2777 * t2747;
t3504 = t2778 * t3795;
t3503 = t2778 * t3791;
t3502 = t2778 * t3708;
t3501 = t2779 * t2748;
t3500 = t2780 * t3794;
t3499 = t2780 * t3793;
t3498 = t2780 * t3703;
t3497 = t2851 * t2746;
t3496 = t2971 * t2746;
t3495 = t2975 * t2746;
t3493 = t2852 * t2747;
t3492 = t2972 * t2747;
t3491 = t2978 * t2747;
t3489 = t2853 * t2748;
t3488 = t2973 * t2748;
t3487 = t2981 * t2748;
t3477 = t2849 * t3775;
t3476 = t2851 * t3771;
t3475 = t2852 * t3767;
t3474 = t2853 * t3763;
t3460 = t2969 * t3760;
t3458 = t2975 * t3756;
t3456 = t2978 * t3754;
t3454 = t2981 * t3752;
t3452 = t2983 * t3721;
t3449 = t2983 * t3715;
t3446 = t2983 * t3710;
t3443 = t2983 * t3705;
t2606 = t2984 * t2613;
t2383 = 0.2e1 * t2606 + t2470;
t3425 = t2613 * (t2383 + t2469);
t2614 = t2984 * t2626;
t2394 = 0.2e1 * t2614 + t2474;
t3424 = t2626 * (t2394 + t2473);
t2615 = t2984 * t2627;
t2396 = 0.2e1 * t2615 + t2475;
t3423 = t2627 * (t2396 + t2471);
t2616 = t2984 * t2628;
t2398 = 0.2e1 * t2616 + t2476;
t3422 = t2628 * (t2398 + t2472);
t3417 = t2925 * t2966 - t2970;
t3416 = t2926 * t2966 - t2976;
t3415 = t2927 * t2966 - t2979;
t3414 = t2928 * t2966 - t2982;
t3393 = t3935 * t3759;
t3392 = (0.4e1 * t2968 - 0.2e1) * t3759;
t3391 = t3934 * t3755;
t3390 = (0.4e1 * t2974 - 0.2e1) * t3755;
t3389 = t3933 * t3753;
t3388 = (0.4e1 * t2977 - 0.2e1) * t3753;
t3387 = t3932 * t3751;
t3386 = (0.4e1 * t2980 - 0.2e1) * t3751;
t3385 = t2716 * t3616;
t3384 = t2715 * t3613;
t3383 = t2613 * t3533;
t3382 = t2613 * t3532;
t3381 = t3719 * t3888;
t3380 = t2613 * t3477;
t3379 = t2726 * t3607;
t3378 = t2727 * t3604;
t3377 = t2728 * t3601;
t3376 = t2723 * t3598;
t3375 = t2724 * t3595;
t3374 = t2725 * t3592;
t3373 = t2626 * t3529;
t3372 = t2626 * t3528;
t3371 = t3713 * t3878;
t3370 = t2626 * t3476;
t3369 = t2627 * t3525;
t3368 = t2627 * t3524;
t3367 = t3708 * t3874;
t3366 = t2627 * t3475;
t3365 = t2628 * t3521;
t3364 = t2628 * t3520;
t3363 = t3703 * t3870;
t3362 = t2628 * t3474;
t3361 = t2642 * t3531;
t3360 = t2646 * t3527;
t3359 = t2647 * t3523;
t3358 = t2648 * t3519;
t3357 = t2769 * t3545;
t3356 = t2769 * t2700;
t3355 = t2989 * t2700;
t3354 = t2613 * t2700;
t3353 = t2797 * t3544;
t3352 = t2798 * t3544;
t3350 = t2799 * t3542;
t3349 = t2802 * t3542;
t3347 = t2800 * t3540;
t3346 = t2803 * t3540;
t3344 = t2801 * t3538;
t3343 = t2804 * t3538;
t3341 = t2775 * t3536;
t3340 = t2775 * t2710;
t3339 = t2995 * t2710;
t3338 = t2626 * t2710;
t3337 = t2777 * t3535;
t3336 = t2777 * t2711;
t3335 = t2998 * t2711;
t3334 = t2627 * t2711;
t3333 = t2779 * t3534;
t3332 = t2779 * t2712;
t3331 = t3001 * t2712;
t3330 = t2628 * t2712;
t3329 = t2769 * t3533;
t3328 = t2769 * t3532;
t3327 = t3984 * t3511;
t3326 = t2969 * t3530;
t3325 = t2775 * t3529;
t3324 = t2775 * t3528;
t3323 = t3985 * t3495;
t3322 = t2975 * t3526;
t3321 = t2777 * t3525;
t3320 = t2777 * t3524;
t3319 = t3986 * t3491;
t3318 = t2978 * t3522;
t3317 = t2779 * t3521;
t3316 = t2779 * t3520;
t3315 = t3987 * t3487;
t3314 = t2981 * t3518;
t3313 = t2769 * t3512;
t3312 = t2769 * t3453;
t3311 = t2769 * t3451;
t3310 = t2770 * t3477;
t3309 = t2849 * t3511;
t3308 = t2850 * t3511;
t3306 = t2990 * t3510;
t3305 = t2775 * t3496;
t3304 = t2775 * t3450;
t3303 = t2775 * t3448;
t3302 = t2776 * t3476;
t3301 = t2777 * t3492;
t3300 = t2777 * t3447;
t3299 = t2777 * t3445;
t3298 = t2778 * t3475;
t3297 = t2779 * t3488;
t3296 = t2779 * t3444;
t3295 = t2779 * t3442;
t3294 = t2780 * t3474;
t3293 = t2851 * t3495;
t3292 = t2855 * t3495;
t3290 = t2996 * t3494;
t3289 = t2852 * t3491;
t3288 = t2856 * t3491;
t3286 = t2999 * t3490;
t3285 = t2853 * t3487;
t3284 = t2854 * t3487;
t3282 = t3002 * t3486;
t3277 = t2984 * t2700;
t3276 = t2984 * t2710;
t3275 = t2984 * t2711;
t3274 = t2984 * t2712;
t3273 = -t2769 * t3776 / 0.2e1;
t3272 = -t2775 * t3772 / 0.2e1;
t3271 = -t2777 * t3768 / 0.2e1;
t3270 = -t2779 * t3764 / 0.2e1;
t3265 = 0.2e1 * t3281;
t3264 = 0.2e1 * t3280;
t3263 = 0.2e1 * t3279;
t3262 = 0.2e1 * t3278;
t3249 = t2769 * t3393;
t3248 = t2775 * t3391;
t3247 = t2777 * t3389;
t3246 = t2779 * t3387;
t3245 = t2607 * t3310;
t3244 = t2608 * t3310;
t3243 = t2617 * t3302;
t3242 = t2618 * t3298;
t3241 = t2619 * t3294;
t3240 = t2620 * t3302;
t3239 = t2621 * t3298;
t3238 = t2622 * t3294;
t3237 = t2641 * t3326;
t3236 = t2861 * t3361;
t3235 = t2643 * t3322;
t3234 = t2644 * t3318;
t3233 = t2645 * t3314;
t3232 = t2862 * t3360;
t3231 = t2863 * t3359;
t3230 = t2864 * t3358;
t3229 = t2715 * t3329;
t3228 = t2715 * t3328;
t3227 = t2716 * t3329;
t3226 = t2716 * t3328;
t3225 = t2723 * t3325;
t3224 = t2723 * t3324;
t3223 = t2724 * t3321;
t3222 = t2724 * t3320;
t3221 = t2725 * t3317;
t3220 = t2725 * t3316;
t3219 = t2726 * t3325;
t3218 = t2726 * t3324;
t3217 = t2727 * t3321;
t3216 = t2727 * t3320;
t3215 = t2728 * t3317;
t3214 = t2728 * t3316;
t3213 = t2715 * t3356;
t3212 = t2716 * t3356;
t3211 = t2849 * t3355;
t3210 = t2769 * t3353;
t3209 = t2769 * t3352;
t3208 = t3511 * t3975;
t3207 = t2775 * t3350;
t3206 = t2775 * t3349;
t3205 = t3495 * t3974;
t3204 = t2777 * t3347;
t3203 = t2777 * t3346;
t3202 = t3491 * t3973;
t3201 = t2779 * t3344;
t3200 = t2779 * t3343;
t3199 = t3487 * t3972;
t3198 = t2723 * t3340;
t3197 = t2726 * t3340;
t3196 = t2851 * t3339;
t3195 = t2724 * t3336;
t3194 = t2727 * t3336;
t3193 = t2852 * t3335;
t3192 = t2725 * t3332;
t3191 = t2728 * t3332;
t3190 = t2853 * t3331;
t3189 = t2797 * t3327;
t3188 = t2798 * t3327;
t3187 = t2833 * t3326;
t2834 = t3451 + t3739;
t3186 = t2834 * t3326;
t3184 = t2799 * t3323;
t3183 = t2802 * t3323;
t3182 = t2843 * t3322;
t2845 = t3448 + t3735;
t3181 = t2845 * t3322;
t3179 = t2800 * t3319;
t3178 = t2803 * t3319;
t3177 = t2844 * t3318;
t2846 = t3445 + t3733;
t3176 = t2846 * t3318;
t3174 = t2801 * t3315;
t3173 = t2804 * t3315;
t3172 = t2847 * t3314;
t2848 = t3442 + t3731;
t3171 = t2848 * t3314;
t3169 = t2769 * t3306;
t3168 = t2989 * t3309;
t3167 = t2775 * t3290;
t3166 = t2777 * t3286;
t3165 = t2779 * t3282;
t3164 = t2995 * t3293;
t3163 = t2998 * t3289;
t3162 = t3001 * t3285;
t3153 = t2849 * t3213;
t3152 = t2849 * t3212;
t3151 = t2851 * t3198;
t3150 = t2851 * t3197;
t3149 = t2852 * t3195;
t3148 = t2852 * t3194;
t3147 = t2853 * t3192;
t3146 = t2853 * t3191;
t2749 = -((0.2e1 * t2970 - 0.1e1) * t3907 + t3441) * t3923 + (t2984 * t3461 - (t2882 + t3782) * pkin(6)) * t2990;
t2793 = pkin(6) * t3967 + t2901 * t3658 + t2970 * t3777;
t2505 = (-t3699 * (-t3994 + ((-t2835 * t2901 + t2836 * t3782) * t3923 - t2836 * t3157) * t2993 + (-t2835 * t2903 + (t3473 - t3662) * t2836) * pkin(6)) * t3984 + ((t2749 * t2994 + t2793 * t2991) * t2933 + (-t2749 * t2991 + t2793 * t2994) * t2929) * t2861 / (t2825 + pkin(6) * t3646 - pkin(1) * (pkin(2) * t3760 + t2882))) * t2983 * t3774;
t3145 = -t2505 * t2797 + t2849 * t3903;
t3144 = t2505 * t2798 - t2849 * t3904;
t2689 = t2715 * t3845;
t2523 = -0.2e1 * t2689 - t2586;
t3143 = -t2469 * t2691 + t2523 * t2613;
t2690 = t2716 * t3845;
t2525 = -0.2e1 * t2690 - t2587;
t3142 = -t2469 * t2692 + t2525 * t2613;
t2656 = 0.2e1 * t2741 + t2700;
t3141 = t2613 * t2656 + t3627;
t2751 = -((0.2e1 * t2979 - 0.1e1) * t3907 + t3439) * t3919 + (t2984 * t3457 - (t2884 + t3780) * pkin(6)) * t2999;
t2795 = pkin(6) * t3965 + t2910 * t3654 + t2979 * t3769;
t2508 = (-t3697 * (-t3996 + ((-t2838 * t2910 + t2841 * t3780) * t3919 - t2841 * t3155) * t3008 + (-t2838 * t2917 + (t3467 - t3660) * t2841) * pkin(6)) * t3986 + ((t2751 * t3009 + t2795 * t3000) * t2935 + (-t2751 * t3000 + t2795 * t3009) * t2931) * t2863 / (t2829 + pkin(6) * t3643 - pkin(1) * (pkin(2) * t3754 + t2884))) * t2983 * t3766;
t3140 = -t2508 * t2800 + t2852 * t3899;
t3139 = t2508 * t2803 - t2852 * t3900;
t2695 = t2724 * t3824;
t2547 = -0.2e1 * t2695 - t2593;
t3138 = -t2471 * t2702 + t2547 * t2627;
t2698 = t2727 * t3824;
t2553 = -0.2e1 * t2698 - t2596;
t3137 = -t2471 * t2705 + t2553 * t2627;
t2669 = 0.2e1 * t2743 + t2711;
t3136 = t2627 * t2669 + t3624;
t2752 = -((0.2e1 * t2982 - 0.1e1) * t3907 + t3438) * t3917 + (t2984 * t3455 - (t2885 + t3779) * pkin(6)) * t3002;
t2796 = pkin(6) * t3964 + t2914 * t3652 + t2982 * t3765;
t2507 = (-(-t3997 + ((-t2839 * t2914 + t2842 * t3779) * t3917 - t2842 * t3154) * t3011 + (-t2839 * t2918 + (t3464 - t3659) * t2842) * pkin(6)) * t3696 * t3987 + ((t2752 * t3012 + t2796 * t3003) * t2936 + t2932 * (-t2752 * t3003 + t2796 * t3012)) * t2864 / (t2827 + pkin(6) * t3642 - pkin(1) * (pkin(2) * t3752 + t2885))) * t2983 * t3762;
t3135 = -t2507 * t2801 + t2853 * t3895;
t3134 = t2507 * t2804 - t2853 * t3896;
t2696 = t2725 * t3814;
t2549 = -0.2e1 * t2696 - t2594;
t3133 = -t2472 * t2703 + t2549 * t2628;
t2699 = t2728 * t3814;
t2555 = -0.2e1 * t2699 - t2597;
t3132 = -t2472 * t2706 + t2555 * t2628;
t2671 = 0.2e1 * t2744 + t2712;
t3131 = t2628 * t2671 + t3621;
t2750 = -((0.2e1 * t2976 - 0.1e1) * t3907 + t3440) * t3921 + (t2984 * t3459 - (t2883 + t3781) * pkin(6)) * t2996;
t2794 = pkin(6) * t3966 + t2906 * t3656 + t2976 * t3773;
t2506 = (-(-t3995 + ((-t2837 * t2906 + t2840 * t3781) * t3921 - t2840 * t3156) * t3005 + (-t2837 * t2916 + (t3470 - t3661) * t2840) * pkin(6)) * t3698 * t3985 + t2862 * ((t2750 * t3006 + t2794 * t2997) * t2934 + (-t2750 * t2997 + t2794 * t3006) * t2930) / (t2828 + pkin(6) * t3644 - pkin(1) * (pkin(2) * t3756 + t2883))) * t2983 * t3770;
t3130 = -t2506 * t2799 + t2851 * t3891;
t3129 = t2506 * t2802 - t2851 * t3892;
t2694 = t2723 * t3834;
t2545 = -0.2e1 * t2694 - t2592;
t3128 = -t2473 * t2701 + t2545 * t2626;
t2697 = t2726 * t3834;
t2551 = -0.2e1 * t2697 - t2595;
t3127 = -t2473 * t2704 + t2551 * t2626;
t2667 = 0.2e1 * t2742 + t2710;
t3126 = t2626 * t2667 + t3618;
t3117 = (t2656 + t2700) * t2745;
t3116 = (t2667 + t2710) * t2746;
t3115 = (t2669 + t2711) * t2747;
t3114 = (t2671 + t2712) * t2748;
t3109 = t2715 * (-t2523 * t2769 + t3616);
t3108 = t2716 * (-t2525 * t2769 + t3613);
t3107 = t2723 * (-t2545 * t2775 + t3607);
t3106 = t2724 * (-t2547 * t2777 + t3604);
t3105 = t2725 * (-t2549 * t2779 + t3601);
t3104 = t2726 * (-t2551 * t2775 + t3598);
t3103 = t2727 * (-t2553 * t2777 + t3595);
t3102 = t2728 * (-t2555 * t2779 + t3592);
t3101 = t2769 * (t2383 * t2715 + t2607 * t3886);
t3100 = t2769 * (t2383 * t2716 + t2608 * t3886);
t3099 = t2769 * t3145;
t3098 = t2769 * t3144;
t3097 = t2775 * (t2394 * t2723 + t2617 * t3876);
t3096 = t2775 * (t2394 * t2726 + t2620 * t3876);
t3095 = t2775 * t3130;
t3094 = t2775 * t3129;
t3093 = t2777 * (t2396 * t2724 + t2618 * t3872);
t3092 = t2777 * (t2396 * t2727 + t2621 * t3872);
t3091 = t2777 * t3140;
t3090 = t2777 * t3139;
t3089 = t2779 * (t2398 * t2725 + t2619 * t3868);
t3088 = t2779 * (t2398 * t2728 + t2622 * t3868);
t3087 = t2779 * t3135;
t3086 = t2779 * t3134;
t3085 = t2989 * t3684 + t3720 * t3936;
t3084 = t2992 * t3684 - t3723 * t3936;
t3083 = t2995 * t3684 + t3714 * t3936;
t3082 = t2998 * t3684 + t3709 * t3936;
t3081 = t3001 * t3684 + t3704 * t3936;
t3080 = t3004 * t3684 - t3717 * t3936;
t3079 = t3007 * t3684 - t3712 * t3936;
t3078 = t3010 * t3684 - t3707 * t3936;
t3077 = t2383 * t2745 + t3354;
t3076 = t2394 * t2746 + t3338;
t3075 = t2396 * t2747 + t3334;
t3074 = t2398 * t2748 + t3330;
t3073 = -t2523 * t2692 + t3384;
t3072 = -t2525 * t2691 + t3385;
t3071 = -t2545 * t2704 + t3376;
t3070 = -t2547 * t2705 + t3375;
t3069 = -t2549 * t2706 + t3374;
t3068 = -t2551 * t2701 + t3379;
t3067 = -t2553 * t2702 + t3378;
t3066 = -t2555 * t2703 + t3377;
t2601 = t3699 * t3237;
t2479 = t2983 * t3236 + t2601;
t3061 = -(pkin(1) * t2479 + t2470 * t3915) * t2983 - (-t2470 * t3931 + t2613 * t3433) * t2984 + t2613 * t3695;
t2602 = t3698 * t3235;
t2490 = t2983 * t3232 + t2602;
t3060 = -(pkin(1) * t2490 + t2474 * t3914) * t2983 - (-t2474 * t3930 + t2626 * t3432) * t2984 + t2626 * t3694;
t2603 = t3697 * t3234;
t2491 = t2983 * t3231 + t2603;
t3059 = -(pkin(1) * t2491 + t2475 * t3913) * t2983 - (-t2475 * t3929 + t2627 * t3431) * t2984 + t2627 * t3693;
t2604 = t3696 * t3233;
t2492 = t2983 * t3230 + t2604;
t3058 = -(pkin(1) * t2492 + t2476 * t3912) * t2983 - (-t2476 * t3928 + t2628 * t3430) * t2984 + t2628 * t3692;
t3057 = t2769 * (t2607 * t3511 + t2656 * t2715);
t3056 = t2769 * (t2608 * t3511 + t2656 * t2716);
t3055 = t2775 * (t2617 * t3495 + t2667 * t2723);
t3054 = t2775 * (t2620 * t3495 + t2667 * t2726);
t3053 = t2777 * (t2618 * t3491 + t2669 * t2724);
t3052 = t2777 * (t2621 * t3491 + t2669 * t2727);
t3051 = t2779 * (t2619 * t3487 + t2671 * t2725);
t3050 = t2779 * (t2622 * t3487 + t2671 * t2728);
t3049 = t2523 * t2745 - t3213;
t3048 = t2525 * t2745 - t3212;
t3047 = t2545 * t2746 - t3198;
t3046 = t2547 * t2747 - t3195;
t3045 = t2549 * t2748 - t3192;
t3044 = t2551 * t2746 - t3197;
t3043 = t2553 * t2747 - t3194;
t3042 = t2555 * t2748 - t3191;
t3033 = -(pkin(1) * t3865 + t2729 * t3915) * t3857 * t2983 - (-t2700 * t3931 + t3307 * t3989) * t2984 + t3510 * t3947;
t3032 = -(pkin(1) * t3864 + t2734 * t3914) * t3852 * t2983 - (-t2710 * t3930 + t3291 * t3989) * t2984 + t3494 * t3947;
t3031 = -(pkin(1) * t3863 + t2735 * t3913) * t3851 * t2983 - (-t2711 * t3929 + t3287 * t3989) * t2984 + t3490 * t3947;
t3030 = -(pkin(1) * t3862 + t2736 * t3912) * t3853 * t2983 - (-t2712 * t3928 + t3283 * t3989) * t2984 + t3486 * t3947;
t3029 = t2993 * t3085;
t3028 = t2993 * t3084;
t3027 = t3005 * t3083;
t3026 = t3005 * t3080;
t3025 = t3008 * t3082;
t3024 = t3008 * t3079;
t3023 = t3011 * t3081;
t3022 = t3011 * t3078;
t2877 = t2963 ^ 2 + t2964 ^ 2;
t2722 = t2728 ^ 2;
t2721 = t2727 ^ 2;
t2720 = t2726 ^ 2;
t2719 = t2725 ^ 2;
t2718 = t2724 ^ 2;
t2717 = t2723 ^ 2;
t2714 = t2716 ^ 2;
t2713 = t2715 ^ 2;
t2666 = t2744 + t2712 / 0.2e1;
t2665 = t2743 + t2711 / 0.2e1;
t2664 = t2742 + t2710 / 0.2e1;
t2663 = t3274 / 0.2e1 + t2748;
t2662 = t3275 / 0.2e1 + t2747;
t2661 = t3276 / 0.2e1 + t2746;
t2655 = t2741 + t2700 / 0.2e1;
t2654 = t3277 / 0.2e1 + t2745;
t2637 = t2672 * t3010 - t3001 * t3283;
t2636 = t2670 * t3007 - t2998 * t3287;
t2635 = t2668 * t3004 - t2995 * t3291;
t2630 = t2657 * t2992 - t2989 * t3307;
t2625 = t2628 ^ 2;
t2624 = t2627 ^ 2;
t2623 = t2626 ^ 2;
t2612 = t2613 ^ 2;
t2600 = t2748 * t3414 + t2748 - t3274;
t2599 = t2747 * t3415 + t2747 - t3275;
t2598 = t2746 * t3416 + t2746 - t3276;
t2591 = t2670 * t3678 + t3287 * t3933;
t2590 = t2668 * t3680 + t3291 * t3934;
t2589 = t2672 * t3676 + t3283 * t3932;
t2588 = t2745 * t3417 + t2745 - t3277;
t2585 = t2657 * t3682 + t3307 * t3935;
t2576 = 0.2e1 * t2663 * t3928 - 0.2e1 * t2666 * t3642;
t2575 = 0.2e1 * t2662 * t3929 - 0.2e1 * t2665 * t3643;
t2574 = 0.2e1 * t2661 * t3930 - 0.2e1 * t2664 * t3644;
t2573 = -0.2e1 * t2663 * t2956 - 0.2e1 * t2666 * t3639;
t2572 = -0.2e1 * t2662 * t2955 - 0.2e1 * t2665 * t3640;
t2571 = -0.2e1 * t2661 * t2954 - 0.2e1 * t2664 * t3641;
t2570 = t3258 * t3972 + (t2748 * t3936 + t3342 * t3745) * pkin(5);
t2569 = t3259 * t3973 + (t2747 * t3936 + t3345 * t3747) * pkin(5);
t2568 = t3260 * t3974 + (t2746 * t3936 + t3348 * t3749) * pkin(5);
t2567 = t3261 * t3975 + (t2745 * t3936 + t3351 * t3757) * pkin(5);
t2566 = 0.2e1 * t2654 * t3931 - 0.2e1 * t2655 * t3646;
t2565 = -0.2e1 * t2654 * t2942 - 0.2e1 * t2655 * t3645;
t2564 = -t2983 * t3546 + t3233;
t2563 = (-t3358 - t3549) * t2983;
t2562 = -t2983 * t3547 + t3234;
t2561 = (-t3359 - t3551) * t2983;
t2560 = -t2983 * t3548 + t3235;
t2559 = (-t3360 - t3553) * t2983;
t2558 = -t2983 * t3555 + t3237;
t2557 = (-t3361 - t3556) * t2983;
t2556 = -t2699 - t2597;
t2554 = -t2698 - t2596;
t2552 = -t2697 - t2595;
t2550 = -t2696 - t2594;
t2548 = -t2695 - t2593;
t2546 = -t2694 - t2592;
t2544 = -t2699 - t2597 / 0.2e1;
t2543 = -t2698 - t2596 / 0.2e1;
t2542 = -t2697 - t2595 / 0.2e1;
t2541 = -t2696 - t2594 / 0.2e1;
t2540 = -t2695 - t2593 / 0.2e1;
t2539 = -t2694 - t2592 / 0.2e1;
t2538 = t2622 * t3270 - t2706;
t2537 = t2621 * t3271 - t2705;
t2536 = t2620 * t3272 - t2704;
t2535 = t2619 * t3270 - t2703;
t2534 = t2618 * t3271 - t2702;
t2533 = t2617 * t3272 - t2701;
t2526 = -t2690 - t2587;
t2524 = -t2689 - t2586;
t2522 = -t2690 - t2587 / 0.2e1;
t2521 = -t2689 - t2586 / 0.2e1;
t2520 = t2608 * t3273 - t2692;
t2519 = t2607 * t3273 - t2691;
t2518 = (-t2736 * t3745 - t2847 * t3537) * t2766 + t3022 * t2748;
t2517 = (-t2735 * t3747 - t2844 * t3539) * t2768 + t3024 * t2747;
t2516 = (-t2734 * t3749 - t2843 * t3541) * t2767 + t3026 * t2746;
t2515 = (-t2736 * t3443 + t2848 * t3862) * t3853 + t3023 * t2748;
t2514 = (-t2735 * t3446 + t2846 * t3863) * t3851 + t3025 * t2747;
t2513 = (-t2734 * t3449 + t2845 * t3864) * t3852 + t3027 * t2746;
t2510 = (-t2729 * t3757 - t2833 * t3543) * t2759 + t3028 * t2745;
t2509 = (-t2729 * t3452 + t2834 * t3865) * t3857 + t3029 * t2745;
t2504 = t2556 * t3001 - t2728 * t3295;
t2503 = t2550 * t3001 - t2725 * t3295;
t2502 = t2554 * t2998 - t2727 * t3299;
t2501 = t2548 * t2998 - t2724 * t3299;
t2500 = t2552 * t2995 - t2726 * t3303;
t2499 = t2546 * t2995 - t2723 * t3303;
t2498 = t2556 * t3010 + t2728 * t3296;
t2497 = t2550 * t3010 + t2725 * t3296;
t2496 = t2554 * t3007 + t2727 * t3300;
t2495 = t2548 * t3007 + t2724 * t3300;
t2494 = t2552 * t3004 + t2726 * t3304;
t2493 = t2546 * t3004 + t2723 * t3304;
t2489 = t2526 * t2989 - t2716 * t3311;
t2488 = t2524 * t2989 - t2715 * t3311;
t2487 = t2526 * t2992 + t2716 * t3312;
t2486 = t2524 * t2992 + t2715 * t3312;
t2468 = t2600 * t2980 + t2666 * t3262 + t2672 * t2984;
t2467 = t2599 * t2977 + t2665 * t3263 + t2670 * t2984;
t2466 = t2598 * t2974 + t2664 * t3264 + t2668 * t2984;
t2465 = t2600 * t3677 + t2666 * t3386;
t2464 = t2599 * t3679 + t2665 * t3388;
t2463 = t2598 * t3681 + t2664 * t3390;
t2462 = -t2706 - (-t2622 * t3764 + t2728 * t3414) * t2779;
t2461 = -t2705 - (-t2621 * t3768 + t2727 * t3415) * t2777;
t2460 = -t2704 - (-t2620 * t3772 + t2726 * t3416) * t2775;
t2459 = -t2703 - (-t2619 * t3764 + t2725 * t3414) * t2779;
t2458 = -t2702 - (-t2618 * t3768 + t2724 * t3415) * t2777;
t2457 = -t2701 - (-t2617 * t3772 + t2723 * t3416) * t2775;
t2456 = t2554 * t3678 - t2727 * t3247;
t2455 = t2548 * t3678 - t2724 * t3247;
t2454 = t2552 * t3680 - t2726 * t3248;
t2453 = t2546 * t3680 - t2723 * t3248;
t2452 = t2556 * t3676 - t2728 * t3246;
t2451 = t2550 * t3676 - t2725 * t3246;
t2450 = t2588 * t2968 + t2655 * t3265 + t2657 * t2984;
t2449 = t2588 * t3683 + t2655 * t3392;
t2448 = -t2692 - (-t2608 * t3776 + t2716 * t3417) * t2769;
t2447 = -t2691 - (-t2607 * t3776 + t2715 * t3417) * t2769;
t2446 = -t2716 * t3517 - t2726 * t3509 - t2727 * t3505 - t2728 * t3501;
t2445 = -t2715 * t3517 - t2723 * t3509 - t2724 * t3505 - t2725 * t3501;
t2444 = t2526 * t3682 - t2716 * t3249;
t2443 = t2524 * t3682 - t2715 * t3249;
t2442 = (-t2716 * t3313 - t2726 * t3305 - t2727 * t3301 - t2728 * t3297) * t2965;
t2441 = (-t2715 * t3313 - t2723 * t3305 - t2724 * t3301 - t2725 * t3297) * t2965;
t2440 = (-t2716 * t3169 - t2726 * t3167 - t2727 * t3166 - t2728 * t3165) * t3689;
t2439 = (-t2715 * t3169 - t2723 * t3167 - t2724 * t3166 - t2725 * t3165) * t3689;
t2430 = t3550 + t3552 + t3554 + t3557;
t2429 = -t2604 + (-t3230 + t3867) * t2983;
t2428 = -t2603 + (-t3231 + t3871) * t2983;
t2427 = -t2602 + (-t3232 + t3875) * t2983;
t2426 = (t2967 * t3557 + t2971 * t3554 + t2972 * t3552 + t2973 * t3550) * t2965;
t2425 = (t3498 * t3976 + t3502 * t3977 + t3506 * t3978 + t3514 * t3979) * t3689;
t2424 = -t2601 + (-t3236 + t3885) * t2983;
t2423 = -t3001 * t2570 + t3010 * t3030;
t2422 = -t2570 * t3010 - t3001 * t3030;
t2421 = -t2998 * t2569 + t3007 * t3031;
t2420 = -t3007 * t2569 - t2998 * t3031;
t2419 = -t2995 * t2568 + t3004 * t3032;
t2418 = -t3004 * t2568 - t2995 * t3032;
t2417 = 0.2e1 * t2538 * t3928 - 0.2e1 * t2544 * t3642;
t2416 = 0.2e1 * t2537 * t3929 - 0.2e1 * t2543 * t3643;
t2415 = 0.2e1 * t2535 * t3928 - 0.2e1 * t2541 * t3642;
t2414 = 0.2e1 * t2534 * t3929 - 0.2e1 * t2540 * t3643;
t2413 = 0.2e1 * t2536 * t3930 - 0.2e1 * t2542 * t3644;
t2412 = 0.2e1 * t2533 * t3930 - 0.2e1 * t2539 * t3644;
t2411 = -0.2e1 * t2538 * t2956 - 0.2e1 * t2544 * t3639;
t2410 = -0.2e1 * t2535 * t2956 - 0.2e1 * t2541 * t3639;
t2409 = -0.2e1 * t2537 * t2955 - 0.2e1 * t2543 * t3640;
t2408 = -0.2e1 * t2534 * t2955 - 0.2e1 * t2540 * t3640;
t2407 = -0.2e1 * t2536 * t2954 - 0.2e1 * t2542 * t3641;
t2406 = -0.2e1 * t2533 * t2954 - 0.2e1 * t2539 * t3641;
t2405 = -t2567 * t2989 + t2992 * t3033;
t2404 = -t2567 * t2992 - t2989 * t3033;
t2403 = 0.2e1 * t2520 * t3931 - 0.2e1 * t2522 * t3646;
t2402 = 0.2e1 * t2519 * t3931 - 0.2e1 * t2521 * t3646;
t2401 = -0.2e1 * t2520 * t2942 - 0.2e1 * t2522 * t3645;
t2400 = -0.2e1 * t2519 * t2942 - 0.2e1 * t2521 * t3645;
t2399 = t2616 + t2476;
t2397 = t2615 + t2475;
t2395 = t2614 + t2474;
t2393 = t3740 / 0.2e1 + t2628;
t2392 = t3741 / 0.2e1 + t2627;
t2391 = t3742 / 0.2e1 + t2626;
t2390 = t2616 + t2584 / 0.2e1 - t2581 / 0.2e1;
t2389 = t2615 + t2583 / 0.2e1 - t2580 / 0.2e1;
t2388 = t2614 + t2582 / 0.2e1 - t2579 / 0.2e1;
t2384 = t2606 + t2470;
t2382 = t3743 / 0.2e1 + t2613;
t2381 = t2606 + t2578 / 0.2e1 - t2577 / 0.2e1;
t2379 = t2645 * t3172 - (-t2622 * t2983 + t2728 * t3078) * t3813;
t2378 = -t2648 * t3172 - (-t2619 * t2983 + t2725 * t3078) * t3813;
t2377 = t2644 * t3177 - (-t2621 * t2983 + t2727 * t3079) * t3823;
t2376 = -t2647 * t3177 - (-t2618 * t2983 + t2724 * t3079) * t3823;
t2375 = t2643 * t3182 - (-t2620 * t2983 + t2726 * t3080) * t3833;
t2374 = -t2646 * t3182 - (-t2617 * t2983 + t2723 * t3080) * t3833;
t2373 = -t2645 * t3171 - (-t2622 * t3454 + t2728 * t3081) * t3813;
t2372 = -t2644 * t3176 - (-t2621 * t3456 + t2727 * t3082) * t3823;
t2371 = -t2643 * t3181 - (-t2620 * t3458 + t2726 * t3083) * t3833;
t2370 = t2648 * t3171 - (-t2619 * t3454 + t2725 * t3081) * t3813;
t2369 = t2647 * t3176 - (-t2618 * t3456 + t2724 * t3082) * t3823;
t2368 = t2646 * t3181 - (-t2617 * t3458 + t2723 * t3083) * t3833;
t2367 = t2641 * t3187 - (-t2608 * t2983 + t2716 * t3084) * t3844;
t2366 = -t2642 * t3187 - (-t2607 * t2983 + t2715 * t3084) * t3844;
t2365 = -t2641 * t3186 - (-t2608 * t3460 + t2716 * t3085) * t3844;
t2364 = t2642 * t3186 - (-t2607 * t3460 + t2715 * t3085) * t3844;
t2363 = t2399 * t3001 + t2628 * t3442;
t2362 = t2397 * t2998 + t2627 * t3445;
t2361 = t2395 * t2995 + t2626 * t3448;
t2360 = t2399 * t3010 - t2628 * t3444;
t2359 = t2397 * t3007 - t2627 * t3447;
t2358 = t2395 * t3004 - t2626 * t3450;
t2354 = t2384 * t2989 + t2613 * t3451;
t2353 = t2384 * t2992 - t2613 * t3453;
t2351 = t2613 * t2745 + t2626 * t2746 + t2627 * t2747 + t2628 * t2748;
t2350 = (t2613 * t3512 + t2626 * t3496 + t2627 * t3492 + t2628 * t3488) * t2965;
t2349 = (t2613 * t3306 + t2626 * t3290 + t2627 * t3286 + t2628 * t3282) * t3689;
t2348 = t2628 * t3414 + t2628 - t3740;
t2347 = t2627 * t3415 + t2627 - t3741;
t2346 = t2626 * t3416 + t2626 - t3742;
t2345 = t2397 * t3678 + t2627 * t3389;
t2344 = t2395 * t3680 + t2626 * t3391;
t2343 = t2399 * t3676 + t2628 * t3387;
t2342 = t2613 * t3417 + t2613 - t3743;
t2341 = t2384 * t3682 + t2613 * t3393;
t2340 = t2462 * t2980 + t2544 * t3262 + t2556 * t2984;
t2339 = t2461 * t2977 + t2543 * t3263 + t2554 * t2984;
t2338 = t2460 * t2974 + t2542 * t3264 + t2552 * t2984;
t2337 = t2459 * t2980 + t2541 * t3262 + t2550 * t2984;
t2336 = t2458 * t2977 + t2540 * t3263 + t2548 * t2984;
t2335 = t2457 * t2974 + t2539 * t3264 + t2546 * t2984;
t2334 = t2462 * t3677 + t2544 * t3386;
t2333 = t2461 * t3679 + t2543 * t3388;
t2332 = t2459 * t3677 + t2541 * t3386;
t2331 = t2458 * t3679 + t2540 * t3388;
t2330 = t2460 * t3681 + t2542 * t3390;
t2329 = t2457 * t3681 + t2539 * t3390;
t2328 = -t2613 * t2692 - t2626 * t2704 - t2627 * t2705 - t2628 * t2706;
t2327 = -t2613 * t2691 - t2626 * t2701 - t2627 * t2702 - t2628 * t2703;
t2326 = (-t2716 * t3611 - t2726 * t3590 - t2727 * t3587 - t2728 * t3584) * t2965;
t2325 = (-t2715 * t3611 - t2723 * t3590 - t2724 * t3587 - t2725 * t3584) * t2965;
t2324 = (-t2716 * t3381 - t2726 * t3371 - t2727 * t3367 - t2728 * t3363) * t3689;
t2323 = (-t2715 * t3381 - t2723 * t3371 - t2724 * t3367 - t2725 * t3363) * t3689;
t2322 = t2448 * t2968 + t2522 * t3265 + t2526 * t2984;
t2321 = t2447 * t2968 + t2521 * t3265 + t2524 * t2984;
t2320 = t2448 * t3683 + t2522 * t3392;
t2319 = t2447 * t3683 + t2521 * t3392;
t2318 = t2492 * t3668 + (t2492 * t3745 + t2628 * t3938 + 0.2e1 * t2679 - 0.2e1 * t2682) * pkin(5);
t2317 = t2491 * t3669 + (t2491 * t3747 + t2627 * t3938 + 0.2e1 * t2678 - 0.2e1 * t2681) * pkin(5);
t2316 = t2490 * t3670 + (t2490 * t3749 + t2626 * t3938 + 0.2e1 * t2677 - 0.2e1 * t2680) * pkin(5);
t2315 = t2479 * t3671 + (t2479 * t3757 + t2613 * t3938 + 0.2e1 * t2673 - 0.2e1 * t2674) * pkin(5);
t2314 = -0.2e1 * t2390 * t3642 + 0.2e1 * t2393 * t3928;
t2313 = -0.2e1 * t2389 * t3643 + 0.2e1 * t2392 * t3929;
t2312 = -0.2e1 * t2388 * t3644 + 0.2e1 * t2391 * t3930;
t2311 = -0.2e1 * t2390 * t3639 - 0.2e1 * t2393 * t2956;
t2310 = -0.2e1 * t2389 * t3640 - 0.2e1 * t2392 * t2955;
t2309 = -0.2e1 * t2388 * t3641 - 0.2e1 * t2391 * t2954;
t2308 = -0.2e1 * t2381 * t3646 + 0.2e1 * t2382 * t3931;
t2307 = -0.2e1 * t2381 * t3645 - 0.2e1 * t2382 * t2942;
t2290 = -t2476 * t3443 + t2492 * t2848 + t2628 * t3023;
t2289 = -t2475 * t3446 + t2491 * t2846 + t2627 * t3025;
t2288 = -t2474 * t3449 + t2490 * t2845 + t2626 * t3027;
t2287 = -t2476 * t2983 * t3700 - t2492 * t2847 + t2628 * t3022;
t2286 = -t2475 * t2983 * t3701 - t2491 * t2844 + t2627 * t3024;
t2285 = -t2474 * t2983 * t3702 - t2490 * t2843 + t2626 * t3026;
t2284 = -t2470 * t3452 + t2479 * t2834 + t2613 * t3029;
t2283 = -t2470 * t2983 * t3718 - t2479 * t2833 + t2613 * t3028;
t2282 = t2348 * t2980 + t2390 * t3262 + t2399 * t2984;
t2281 = t2347 * t2977 + t2389 * t3263 + t2397 * t2984;
t2280 = t2346 * t2974 + t2388 * t3264 + t2395 * t2984;
t2279 = t2348 * t3677 + t2390 * t3386;
t2278 = t2347 * t3679 + t2389 * t3388;
t2277 = t2346 * t3681 + t2388 * t3390;
t2276 = t2342 * t2968 + t2381 * t3265 + t2384 * t2984;
t2275 = t2342 * t3683 + t2381 * t3392;
t2274 = -t3001 * t2318 + t3010 * t3058;
t2273 = -t2318 * t3010 - t3001 * t3058;
t2272 = -t2998 * t2317 + t3007 * t3059;
t2271 = -t3007 * t2317 - t2998 * t3059;
t2270 = -t2995 * t2316 + t3004 * t3060;
t2269 = -t3004 * t2316 - t2995 * t3060;
t2268 = -t2315 * t2989 + t2992 * t3061;
t2267 = -t2315 * t2992 - t2989 * t3061;
t1 = [t2714 * t2770 + t2720 * t2776 + t2721 * t2778 + t2722 * t2780, 0, 0, (t2714 * t3842 + t2720 * t3831 + t2721 * t3821 + t2722 * t3811) * t2965, (t2714 * t3514 + t2720 * t3506 + t2721 * t3502 + t2722 * t3498) * t3689, (t2990 * t3108 + t2996 * t3104 + t2999 * t3103 + t3002 * t3102) * t2983, (t2993 * t3108 + t3005 * t3104 + t3008 * t3103 + t3011 * t3102) * t2983, -t2526 * t2587 - t2552 * t2595 - t2554 * t2596 - t2556 * t2597 + (-t2526 * t2692 - t2552 * t2704 - t2554 * t2705 - t2556 * t2706) * t2984, (-t2417 * t2779 + t2622 * t3500) * t2728 + (-t2416 * t2777 + t2621 * t3504) * t2727 + (-t2413 * t2775 + t2620 * t3508) * t2726 + (-t2403 * t2769 + t2608 * t3516) * t2716, (-t2411 * t2779 - t2622 * t3499) * t2728 + (-t2409 * t2777 - t2621 * t3503) * t2727 + (-t2407 * t2775 - t2620 * t3507) * t2726 + (-t2401 * t2769 - t2608 * t3515) * t2716, -(t2340 * t2728 + t2504 * t3591) * t2779 - (t2339 * t2727 + t2502 * t3594) * t2777 - (t2338 * t2726 + t2500 * t3597) * t2775 - (t2322 * t2716 + t2489 * t3612) * t2769, -(t2334 * t2728 + t2452 * t3879) * t2779 - (t2333 * t2727 + t2456 * t3880) * t2777 - (t2330 * t2726 + t2454 * t3881) * t2775 - (t2320 * t2716 + t2444 * t3889) * t2769, -(t2728 * t2373 - t2564 * t3591) * t2779 - (t2727 * t2372 - t2562 * t3594) * t2777 - (t2726 * t2371 - t2560 * t3597) * t2775 - (t2716 * t2365 - t2558 * t3612) * t2769 + (-t2489 * t3577 - t2500 * t3575 - t2502 * t3574 - t2504 * t3573) * t3744, -(t2728 * t2379 - t2622 * t2564) * t2779 - (t2727 * t2377 - t2621 * t2562) * t2777 - (t2726 * t2375 - t2620 * t2560) * t2775 - (t2716 * t2367 - t2608 * t2558) * t2769 + (-t2487 * t3577 - t2494 * t3575 - t2496 * t3574 - t2498 * t3573) * t3744, (-t2558 * t3555 - t2560 * t3548 - t2562 * t3547 - t2564 * t3546 + (t2558 * t3577 + t2560 * t3575 + t2562 * t3574 + t2564 * t3573) * t3017) * t2983, (t3593 - t3816) * t2728 + (t3596 - t3826) * t2727 + (t3599 - t3836) * t2726 + (t3614 - t3847) * t2716 + (-t2641 * t3227 - t2643 * t3219 - t2644 * t3217 - t2645 * t3215) * t3744, (-t3238 - t3817) * t2728 + (-t3239 - t3827) * t2727 + (-t3240 - t3837) * t2726 + (-t3244 - t3848) * t2716 + (t2641 * t3226 + t2643 * t3218 + t2644 * t3216 + t2645 * t3214) * t3744, 0, 0, 0, t2877; t2430, 0, 0, t2426, t2425, (t2990 * t3073 + t2996 * t3071 + t2999 * t3070 + t3002 * t3069) * t2983, (t2993 * t3073 + t3005 * t3071 + t3008 * t3070 + t3011 * t3069) * t2983, -t2524 * t2587 - t2546 * t2595 - t2548 * t2596 - t2550 * t2597 + (-t2524 * t2692 - t2546 * t2704 - t2548 * t2705 - t2550 * t2706) * t2984, -t2402 * t2692 - t2412 * t2704 - t2414 * t2705 - t2415 * t2706 + t2849 * t3384 + t2851 * t3376 + t2852 * t3375 + t2853 * t3374, -t2400 * t2692 - t2406 * t2704 - t2408 * t2705 - t2410 * t2706 - t2850 * t3384 - t2854 * t3374 - t2855 * t3376 - t2856 * t3375, -(t2337 * t2728 + t2503 * t3591) * t2779 - (t2336 * t2727 + t2501 * t3594) * t2777 - (t2335 * t2726 + t2499 * t3597) * t2775 - (t2321 * t2716 + t2488 * t3612) * t2769, -(t2332 * t2728 + t2451 * t3879) * t2779 - (t2331 * t2727 + t2455 * t3880) * t2777 - (t2329 * t2726 + t2453 * t3881) * t2775 - (t2319 * t2716 + t2443 * t3889) * t2769, -(t2728 * t2370 - t2563 * t3591) * t2779 - (t2727 * t2369 - t2561 * t3594) * t2777 - (t2726 * t2368 - t2559 * t3597) * t2775 - (t2716 * t2364 - t2557 * t3612) * t2769 + (-t2488 * t3577 - t2499 * t3575 - t2501 * t3574 - t2503 * t3573) * t3744, -(t2728 * t2378 - t2622 * t2563) * t2779 - (t2727 * t2376 - t2621 * t2561) * t2777 - (t2726 * t2374 - t2620 * t2559) * t2775 - (t2716 * t2366 - t2608 * t2557) * t2769 + (-t2486 * t3577 - t2493 * t3575 - t2495 * t3574 - t2497 * t3573) * t3744, (-t2557 * t3555 - t2559 * t3548 - t2561 * t3547 - t2563 * t3546 + (t2557 * t3577 + t2559 * t3575 + t2561 * t3574 + t2563 * t3573) * t3017) * t2983, t2715 * t3614 + t2723 * t3599 + t2724 * t3596 + t2725 * t3593 - t2716 * t3849 - t2726 * t3838 - t2727 * t3828 - t2728 * t3818 + (-t2641 * t3229 - t2643 * t3225 - t2644 * t3223 - t2645 * t3221) * t3744, -t2728 * t3819 - t2725 * t3238 - t2727 * t3829 - t2724 * t3239 - t2726 * t3839 - t2723 * t3240 - t2716 * t3850 - t2715 * t3244 + (t2641 * t3228 + t2643 * t3224 + t2644 * t3222 + t2645 * t3220) * t3744, 0, 0, 0, 0; t2446, 0, 0, t2442, t2440, (-t2990 * t3056 - t2996 * t3054 - t2999 * t3052 - t3002 * t3050) * t2983, (-t2993 * t3056 - t3005 * t3054 - t3008 * t3052 - t3011 * t3050) * t2983, -t2608 * t3567 - t2620 * t3560 - t2621 * t3559 - t2622 * t3558 + (-t2657 * t2692 - t2668 * t2704 - t2670 * t2705 - t2672 * t2706) * t2984, -(t2728 * t2576 + t2622 * t3285) * t2779 - (t2727 * t2575 + t2621 * t3289) * t2777 - (t2726 * t2574 + t2620 * t3293) * t2775 - (t2716 * t2566 + t2608 * t3309) * t2769, -(t2728 * t2573 - t2622 * t3284) * t2779 - (t2727 * t2572 - t2621 * t3288) * t2777 - (t2726 * t2571 - t2620 * t3292) * t2775 - (t2716 * t2565 - t2608 * t3308) * t2769, -(t2468 * t2728 + t2622 * t3578) * t2779 - (t2467 * t2727 + t2621 * t3579) * t2777 - (t2466 * t2726 + t2620 * t3580) * t2775 - (t2450 * t2716 + t2608 * t3581) * t2769, -(t2465 * t2728 + t2589 * t3879) * t2779 - (t2464 * t2727 + t2591 * t3880) * t2777 - (t2463 * t2726 + t2590 * t3881) * t2775 - (t2449 * t2716 + t2585 * t3889) * t2769, -(t2728 * t2515 - t2622 * t3561) * t2779 - (t2727 * t2514 - t2621 * t3563) * t2777 - (t2726 * t2513 - t2620 * t3565) * t2775 - (t2716 * t2509 - t2608 * t3568) * t2769 + (-t2631 * t3577 - t2638 * t3575 - t2639 * t3574 - t2640 * t3573) * t3744, -(t2728 * t2518 - t2622 * t2660) * t2779 - (t2727 * t2517 - t2621 * t2659) * t2777 - (t2726 * t2516 - t2620 * t2658) * t2775 - (t2716 * t2510 - t2608 * t2650) * t2769 + (-t2630 * t3577 - t2635 * t3575 - t2636 * t3574 - t2637 * t3573) * t3744, (-t2650 * t3555 - t2658 * t3548 - t2659 * t3547 - t2660 * t3546 + (t2641 * t3569 + t2643 * t3566 + t2644 * t3564 + t2645 * t3562) * t3017) * t2983, -(t2728 * t2423 + t2622 * t3489) * t2779 - (t2727 * t2421 + t2621 * t3493) * t2777 - (t2726 * t2419 + t2620 * t3497) * t2775 - (t2716 * t2405 + t2608 * t3513) * t2769 + (t2641 * t3189 + t2643 * t3184 + t2644 * t3179 + t2645 * t3174) * t3744, -(t2728 * t2422 - t2622 * t3162) * t2779 - (t2727 * t2420 - t2621 * t3163) * t2777 - (t2726 * t2418 - t2620 * t3164) * t2775 - (t2716 * t2404 - t2608 * t3168) * t2769 + (-t2641 * t3188 - t2643 * t3183 - t2644 * t3178 - t2645 * t3173) * t3744, 0, 0, 0, 0; t2328, 0, 0, t2326, t2324, (-t2990 * t3100 - t2996 * t3096 - t2999 * t3092 - t3002 * t3088) * t2983, (-t2993 * t3100 - t3005 * t3096 - t3008 * t3092 - t3011 * t3088) * t2983, -t2384 * t2587 - t2395 * t2595 - t2397 * t2596 - t2399 * t2597 + (-t2384 * t2692 - t2395 * t2704 - t2397 * t2705 - t2399 * t2706) * t2984, -(t2314 * t2728 + t2622 * t3583) * t2779 - (t2313 * t2727 + t2621 * t3586) * t2777 - (t2312 * t2726 + t2620 * t3589) * t2775 - (t2308 * t2716 + t2608 * t3610) * t2769, -(t2311 * t2728 - t2622 * t3582) * t2779 - (t2310 * t2727 - t2621 * t3585) * t2777 - (t2309 * t2726 - t2620 * t3588) * t2775 - (t2307 * t2716 - t2608 * t3609) * t2769, -(t2282 * t2728 + t2363 * t3591) * t2779 - (t2281 * t2727 + t2362 * t3594) * t2777 - (t2280 * t2726 + t2361 * t3597) * t2775 - (t2276 * t2716 + t2354 * t3612) * t2769, -(t2279 * t2728 + t2343 * t3879) * t2779 - (t2278 * t2727 + t2345 * t3880) * t2777 - (t2277 * t2726 + t2344 * t3881) * t2775 - (t2275 * t2716 + t2341 * t3889) * t2769, -(t2728 * t2290 - t2429 * t3591) * t2779 - (t2727 * t2289 - t2428 * t3594) * t2777 - (t2726 * t2288 - t2427 * t3597) * t2775 - (t2716 * t2284 - t2424 * t3612) * t2769 + (-t2354 * t3577 - t2361 * t3575 - t2362 * t3574 - t2363 * t3573) * t3744, -(t2728 * t2287 - t2622 * t2429) * t2779 - (t2727 * t2286 - t2621 * t2428) * t2777 - (t2726 * t2285 - t2620 * t2427) * t2775 - (t2716 * t2283 - t2608 * t2424) * t2769 + (-t2353 * t3577 - t2358 * t3575 - t2359 * t3574 - t2360 * t3573) * t3744, (-t2424 * t3555 - t2427 * t3548 - t2428 * t3547 - t2429 * t3546 + (t2424 * t3577 + t2427 * t3575 + t2428 * t3574 + t2429 * t3573) * t3017) * t2983, -(t2728 * t2274 + t2622 * t3869) * t2779 - (t2727 * t2272 + t2621 * t3873) * t2777 - (t2726 * t2270 + t2620 * t3877) * t2775 - (t2716 * t2268 + t2608 * t3887) * t2769 + (t2641 * t3383 + t2643 * t3373 + t2644 * t3369 + t2645 * t3365) * t3744, -(t2728 * t2273 - t2622 * t3362) * t2779 - (t2727 * t2271 - t2621 * t3366) * t2777 - (t2726 * t2269 - t2620 * t3370) * t2775 - (t2716 * t2267 - t2608 * t3380) * t2769 + (-t2641 * t3382 - t2643 * t3372 - t2644 * t3368 - t2645 * t3364) * t3744, 0, -t2963, -t2964, 0; t2430, 0, 0, t2426, t2425, (t2990 * t3072 + t2996 * t3068 + t2999 * t3067 + t3002 * t3066) * t2983, (t2993 * t3072 + t3005 * t3068 + t3008 * t3067 + t3011 * t3066) * t2983, -t2526 * t2586 - t2552 * t2592 - t2554 * t2593 - t2556 * t2594 + (-t2526 * t2691 - t2552 * t2701 - t2554 * t2702 - t2556 * t2703) * t2984, -t2403 * t2691 - t2413 * t2701 - t2416 * t2702 - t2417 * t2703 + t2849 * t3385 + t2851 * t3379 + t2852 * t3378 + t2853 * t3377, -t2401 * t2691 - t2407 * t2701 - t2409 * t2702 - t2411 * t2703 - t2850 * t3385 - t2854 * t3377 - t2855 * t3379 - t2856 * t3378, -(t2340 * t2725 + t2504 * t3600) * t2779 - (t2339 * t2724 + t2502 * t3603) * t2777 - (t2338 * t2723 + t2500 * t3606) * t2775 - (t2322 * t2715 + t2489 * t3615) * t2769, -(t2334 * t2725 + t2452 * t3882) * t2779 - (t2333 * t2724 + t2456 * t3883) * t2777 - (t2330 * t2723 + t2454 * t3884) * t2775 - (t2320 * t2715 + t2444 * t3890) * t2769, -(t2725 * t2373 - t2564 * t3600) * t2779 - (t2724 * t2372 - t2562 * t3603) * t2777 - (t2723 * t2371 - t2560 * t3606) * t2775 - (t2715 * t2365 - t2558 * t3615) * t2769 + (t2489 * t3576 + t2500 * t3572 + t2502 * t3571 + t2504 * t3570) * t3744, -(t2725 * t2379 - t2619 * t2564) * t2779 - (t2724 * t2377 - t2618 * t2562) * t2777 - (t2723 * t2375 - t2617 * t2560) * t2775 - (t2715 * t2367 - t2607 * t2558) * t2769 + (t2487 * t3576 + t2494 * t3572 + t2496 * t3571 + t2498 * t3570) * t3744, (-t2558 * t3556 - t2560 * t3553 - t2562 * t3551 - t2564 * t3549 + (-t2558 * t3576 - t2560 * t3572 - t2562 * t3571 - t2564 * t3570) * t3017) * t2983, t2716 * t3617 + t2726 * t3608 + t2727 * t3605 + t2728 * t3602 - t2715 * t3847 - t2723 * t3836 - t2724 * t3826 - t2725 * t3816 + (t2642 * t3227 + t2646 * t3219 + t2647 * t3217 + t2648 * t3215) * t3744, -t2725 * t3817 - t2728 * t3241 - t2724 * t3827 - t2727 * t3242 - t2723 * t3837 - t2726 * t3243 - t2715 * t3848 - t2716 * t3245 + (-t2642 * t3226 - t2646 * t3218 - t2647 * t3216 - t2648 * t3214) * t3744, 0, 0, 0, 0; t2713 * t2770 + t2717 * t2776 + t2718 * t2778 + t2719 * t2780, 0, 0, (t2713 * t3842 + t2717 * t3831 + t2718 * t3821 + t2719 * t3811) * t2965, (t2713 * t3514 + t2717 * t3506 + t2718 * t3502 + t2719 * t3498) * t3689, (t2990 * t3109 + t2996 * t3107 + t2999 * t3106 + t3002 * t3105) * t2983, (t2993 * t3109 + t3005 * t3107 + t3008 * t3106 + t3011 * t3105) * t2983, -t2524 * t2586 - t2546 * t2592 - t2548 * t2593 - t2550 * t2594 + (-t2524 * t2691 - t2546 * t2701 - t2548 * t2702 - t2550 * t2703) * t2984, (-t2415 * t2779 + t2619 * t3500) * t2725 + (-t2414 * t2777 + t2618 * t3504) * t2724 + (-t2412 * t2775 + t2617 * t3508) * t2723 + (-t2402 * t2769 + t2607 * t3516) * t2715, (-t2410 * t2779 - t2619 * t3499) * t2725 + (-t2408 * t2777 - t2618 * t3503) * t2724 + (-t2406 * t2775 - t2617 * t3507) * t2723 + (-t2400 * t2769 - t2607 * t3515) * t2715, -(t2337 * t2725 + t2503 * t3600) * t2779 - (t2336 * t2724 + t2501 * t3603) * t2777 - (t2335 * t2723 + t2499 * t3606) * t2775 - (t2321 * t2715 + t2488 * t3615) * t2769, -(t2332 * t2725 + t2451 * t3882) * t2779 - (t2331 * t2724 + t2455 * t3883) * t2777 - (t2329 * t2723 + t2453 * t3884) * t2775 - (t2319 * t2715 + t2443 * t3890) * t2769, -(t2725 * t2370 - t2563 * t3600) * t2779 - (t2724 * t2369 - t2561 * t3603) * t2777 - (t2723 * t2368 - t2559 * t3606) * t2775 - (t2715 * t2364 - t2557 * t3615) * t2769 + (t2488 * t3576 + t2499 * t3572 + t2501 * t3571 + t2503 * t3570) * t3744, -(t2725 * t2378 - t2619 * t2563) * t2779 - (t2724 * t2376 - t2618 * t2561) * t2777 - (t2723 * t2374 - t2617 * t2559) * t2775 - (t2715 * t2366 - t2607 * t2557) * t2769 + (t2486 * t3576 + t2493 * t3572 + t2495 * t3571 + t2497 * t3570) * t3744, (-t2557 * t3556 - t2559 * t3553 - t2561 * t3551 - t2563 * t3549 + (-t2557 * t3576 - t2559 * t3572 - t2561 * t3571 - t2563 * t3570) * t3017) * t2983, (t3602 - t3818) * t2725 + (t3605 - t3828) * t2724 + (t3608 - t3838) * t2723 + (t3617 - t3849) * t2715 + (t2642 * t3229 + t2646 * t3225 + t2647 * t3223 + t2648 * t3221) * t3744, (-t3241 - t3819) * t2725 + (-t3242 - t3829) * t2724 + (-t3243 - t3839) * t2723 + (-t3245 - t3850) * t2715 + (-t2642 * t3228 - t2646 * t3224 - t2647 * t3222 - t2648 * t3220) * t3744, 0, 0, 0, t2877; t2445, 0, 0, t2441, t2439, (-t2990 * t3057 - t2996 * t3055 - t2999 * t3053 - t3002 * t3051) * t2983, (-t2993 * t3057 - t3005 * t3055 - t3008 * t3053 - t3011 * t3051) * t2983, -t2607 * t3567 - t2617 * t3560 - t2618 * t3559 - t2619 * t3558 + (-t2657 * t2691 - t2668 * t2701 - t2670 * t2702 - t2672 * t2703) * t2984, -(t2725 * t2576 + t2619 * t3285) * t2779 - (t2724 * t2575 + t2618 * t3289) * t2777 - (t2723 * t2574 + t2617 * t3293) * t2775 - (t2715 * t2566 + t2607 * t3309) * t2769, -(t2725 * t2573 - t2619 * t3284) * t2779 - (t2724 * t2572 - t2618 * t3288) * t2777 - (t2723 * t2571 - t2617 * t3292) * t2775 - (t2715 * t2565 - t2607 * t3308) * t2769, -(t2468 * t2725 + t2619 * t3578) * t2779 - (t2467 * t2724 + t2618 * t3579) * t2777 - (t2466 * t2723 + t2617 * t3580) * t2775 - (t2450 * t2715 + t2607 * t3581) * t2769, -(t2465 * t2725 + t2589 * t3882) * t2779 - (t2464 * t2724 + t2591 * t3883) * t2777 - (t2463 * t2723 + t2590 * t3884) * t2775 - (t2449 * t2715 + t2585 * t3890) * t2769, -(t2725 * t2515 - t2619 * t3561) * t2779 - (t2724 * t2514 - t2618 * t3563) * t2777 - (t2723 * t2513 - t2617 * t3565) * t2775 - (t2715 * t2509 - t2607 * t3568) * t2769 + (t2631 * t3576 + t2638 * t3572 + t2639 * t3571 + t2640 * t3570) * t3744, -(t2725 * t2518 - t2619 * t2660) * t2779 - (t2724 * t2517 - t2618 * t2659) * t2777 - (t2723 * t2516 - t2617 * t2658) * t2775 - (t2715 * t2510 - t2607 * t2650) * t2769 + (t2630 * t3576 + t2635 * t3572 + t2636 * t3571 + t2637 * t3570) * t3744, (-t2650 * t3556 - t2658 * t3553 - t2659 * t3551 - t2660 * t3549 + (-t2642 * t3569 - t2646 * t3566 - t2647 * t3564 - t2648 * t3562) * t3017) * t2983, -(t2725 * t2423 + t2619 * t3489) * t2779 - (t2724 * t2421 + t2618 * t3493) * t2777 - (t2723 * t2419 + t2617 * t3497) * t2775 - (t2715 * t2405 + t2607 * t3513) * t2769 + (-t2642 * t3189 - t2646 * t3184 - t2647 * t3179 - t2648 * t3174) * t3744, -(t2725 * t2422 - t2619 * t3162) * t2779 - (t2724 * t2420 - t2618 * t3163) * t2777 - (t2723 * t2418 - t2617 * t3164) * t2775 - (t2715 * t2404 - t2607 * t3168) * t2769 + (t2642 * t3188 + t2646 * t3183 + t2647 * t3178 + t2648 * t3173) * t3744, 0, 0, 0, 0; t2327, 0, 0, t2325, t2323, (-t2990 * t3101 - t2996 * t3097 - t2999 * t3093 - t3002 * t3089) * t2983, (-t2993 * t3101 - t3005 * t3097 - t3008 * t3093 - t3011 * t3089) * t2983, -t2384 * t2586 - t2395 * t2592 - t2397 * t2593 - t2399 * t2594 + (-t2384 * t2691 - t2395 * t2701 - t2397 * t2702 - t2399 * t2703) * t2984, -(t2314 * t2725 + t2619 * t3583) * t2779 - (t2313 * t2724 + t2618 * t3586) * t2777 - (t2312 * t2723 + t2617 * t3589) * t2775 - (t2308 * t2715 + t2607 * t3610) * t2769, -(t2311 * t2725 - t2619 * t3582) * t2779 - (t2310 * t2724 - t2618 * t3585) * t2777 - (t2309 * t2723 - t2617 * t3588) * t2775 - (t2307 * t2715 - t2607 * t3609) * t2769, -(t2282 * t2725 + t2363 * t3600) * t2779 - (t2281 * t2724 + t2362 * t3603) * t2777 - (t2280 * t2723 + t2361 * t3606) * t2775 - (t2276 * t2715 + t2354 * t3615) * t2769, -(t2279 * t2725 + t2343 * t3882) * t2779 - (t2278 * t2724 + t2345 * t3883) * t2777 - (t2277 * t2723 + t2344 * t3884) * t2775 - (t2275 * t2715 + t2341 * t3890) * t2769, -(t2725 * t2290 - t2429 * t3600) * t2779 - (t2724 * t2289 - t2428 * t3603) * t2777 - (t2723 * t2288 - t2427 * t3606) * t2775 - (t2715 * t2284 - t2424 * t3615) * t2769 + (t2354 * t3576 + t2361 * t3572 + t2362 * t3571 + t2363 * t3570) * t3744, -(t2725 * t2287 - t2619 * t2429) * t2779 - (t2724 * t2286 - t2618 * t2428) * t2777 - (t2723 * t2285 - t2617 * t2427) * t2775 - (t2715 * t2283 - t2607 * t2424) * t2769 + (t2353 * t3576 + t2358 * t3572 + t2359 * t3571 + t2360 * t3570) * t3744, (-t2424 * t3556 - t2427 * t3553 - t2428 * t3551 - t2429 * t3549 + (-t2424 * t3576 - t2427 * t3572 - t2428 * t3571 - t2429 * t3570) * t3017) * t2983, -(t2725 * t2274 + t2619 * t3869) * t2779 - (t2724 * t2272 + t2618 * t3873) * t2777 - (t2723 * t2270 + t2617 * t3877) * t2775 - (t2715 * t2268 + t2607 * t3887) * t2769 + (-t2642 * t3383 - t2646 * t3373 - t2647 * t3369 - t2648 * t3365) * t3744, -(t2725 * t2273 - t2619 * t3362) * t2779 - (t2724 * t2271 - t2618 * t3366) * t2777 - (t2723 * t2269 - t2617 * t3370) * t2775 - (t2715 * t2267 - t2607 * t3380) * t2769 + (t2642 * t3382 + t2646 * t3372 + t2647 * t3368 + t2648 * t3364) * t3744, 0, t2964, -t2963, 0; t2446, 0, 0, t2442, t2440, (t2990 * t3048 + t2996 * t3044 + t2999 * t3043 + t3002 * t3042) * t2983, (t2993 * t3048 + t3005 * t3044 + t3008 * t3043 + t3011 * t3042) * t2983, t2526 * t2700 + t2552 * t2710 + t2554 * t2711 + t2556 * t2712 + (t2526 * t2745 + t2552 * t2746 + t2554 * t2747 + t2556 * t2748) * t2984, t2403 * t2745 + t2413 * t2746 + t2416 * t2747 + t2417 * t2748 - t3146 - t3148 - t3150 - t3152, t2401 * t2745 + t2407 * t2746 + t2409 * t2747 + t2411 * t2748 + t2850 * t3212 + t2854 * t3191 + t2855 * t3197 + t2856 * t3194, t2322 * t2745 + t2338 * t2746 + t2339 * t2747 + t2340 * t2748 + t2489 * t3355 + t2500 * t3339 + t2502 * t3335 + t2504 * t3331, t2320 * t2745 + t2330 * t2746 + t2333 * t2747 + t2334 * t2748 + t2444 * t2700 + t2452 * t2712 + t2454 * t2710 + t2456 * t2711, t2373 * t2748 - t2564 * t3331 + t2372 * t2747 - t2562 * t3335 + t2371 * t2746 - t2560 * t3339 + t2365 * t2745 - t2558 * t3355 + (t2489 * t3544 + t2500 * t3542 + t2502 * t3540 + t2504 * t3538) * t3017, t2367 * t2745 + t2375 * t2746 + t2377 * t2747 + t2379 * t2748 - t2558 * t3866 - t2560 * t3861 - t2562 * t3860 - t2564 * t3859 + (t2487 * t3544 + t2494 * t3542 + t2496 * t3540 + t2498 * t3538) * t3017, (-t2558 * t3544 - t2560 * t3542 - t2562 * t3540 - t2564 * t3538) * t3017 + (t2558 * t3510 + t2560 * t3494 + t2562 * t3490 + t2564 * t3486) * t2983, t2306 * t2748 - t2728 * t3333 + t2302 * t2747 - t2727 * t3337 + t2298 * t2746 - t2726 * t3341 + t2294 * t2745 - t2716 * t3357 + (t2716 * t3210 + t2726 * t3207 + t2727 * t3204 + t2728 * t3201) * t3017, t2305 * t2748 + t3001 * t3146 + t2301 * t2747 + t2998 * t3148 + t2297 * t2746 + t2995 * t3150 + t2293 * t2745 + t2989 * t3152 + (-t2716 * t3209 - t2726 * t3206 - t2727 * t3203 - t2728 * t3200) * t3017, 0, 0, 0, 0; t2445, 0, 0, t2441, t2439, (t2990 * t3049 + t2996 * t3047 + t2999 * t3046 + t3002 * t3045) * t2983, (t2993 * t3049 + t3005 * t3047 + t3008 * t3046 + t3011 * t3045) * t2983, t2524 * t2700 + t2546 * t2710 + t2548 * t2711 + t2550 * t2712 + (t2524 * t2745 + t2546 * t2746 + t2548 * t2747 + t2550 * t2748) * t2984, t2402 * t2745 + t2412 * t2746 + t2414 * t2747 + t2415 * t2748 - t3147 - t3149 - t3151 - t3153, t2400 * t2745 + t2406 * t2746 + t2408 * t2747 + t2410 * t2748 + t2850 * t3213 + t2854 * t3192 + t2855 * t3198 + t2856 * t3195, t2321 * t2745 + t2335 * t2746 + t2336 * t2747 + t2337 * t2748 + t2488 * t3355 + t2499 * t3339 + t2501 * t3335 + t2503 * t3331, t2319 * t2745 + t2329 * t2746 + t2331 * t2747 + t2332 * t2748 + t2443 * t2700 + t2451 * t2712 + t2453 * t2710 + t2455 * t2711, t2370 * t2748 - t2563 * t3331 + t2369 * t2747 - t2561 * t3335 + t2368 * t2746 - t2559 * t3339 + t2364 * t2745 - t2557 * t3355 + (t2488 * t3544 + t2499 * t3542 + t2501 * t3540 + t2503 * t3538) * t3017, t2366 * t2745 + t2374 * t2746 + t2376 * t2747 + t2378 * t2748 - t2557 * t3866 - t2559 * t3861 - t2561 * t3860 - t2563 * t3859 + (t2486 * t3544 + t2493 * t3542 + t2495 * t3540 + t2497 * t3538) * t3017, (-t2557 * t3544 - t2559 * t3542 - t2561 * t3540 - t2563 * t3538) * t3017 + (t2557 * t3510 + t2559 * t3494 + t2561 * t3490 + t2563 * t3486) * t2983, t2304 * t2748 - t2725 * t3333 + t2300 * t2747 - t2724 * t3337 + t2296 * t2746 - t2723 * t3341 + t2292 * t2745 - t2715 * t3357 + (t2715 * t3210 + t2723 * t3207 + t2724 * t3204 + t2725 * t3201) * t3017, t2303 * t2748 + t3001 * t3147 + t2299 * t2747 + t2998 * t3149 + t2295 * t2746 + t2995 * t3151 + t2291 * t2745 + t2989 * t3153 + (-t2715 * t3209 - t2723 * t3206 - t2724 * t3203 - t2725 * t3200) * t3017, 0, 0, 0, 0; t3807 + t3808 + t3809 + t3840, 0, 0, (t2967 * t3840 + t2971 * t3809 + t2972 * t3808 + t2973 * t3807) * t2965, (t3703 * t3807 + t3708 * t3808 + t3713 * t3809 + t3719 * t3840) * t3689, (t2990 * t3117 + t2996 * t3116 + t2999 * t3115 + t3002 * t3114) * t2983, (t2993 * t3117 + t3005 * t3116 + t3008 * t3115 + t3011 * t3114) * t2983, t2657 * t2700 + t2668 * t2710 + t2670 * t2711 + t2672 * t2712 + (t2657 * t2745 + t2668 * t2746 + t2670 * t2747 + t2672 * t2748) * t2984, (t2712 * t2853 + t2576) * t2748 + (t2711 * t2852 + t2575) * t2747 + (t2710 * t2851 + t2574) * t2746 + (t2700 * t2849 + t2566) * t2745, (-t2712 * t2854 + t2573) * t2748 + (-t2711 * t2856 + t2572) * t2747 + (-t2710 * t2855 + t2571) * t2746 + (-t2700 * t2850 + t2565) * t2745, t2450 * t2745 + t2466 * t2746 + t2467 * t2747 + t2468 * t2748 + t2631 * t3355 + t2638 * t3339 + t2639 * t3335 + t2640 * t3331, t2449 * t2745 + t2463 * t2746 + t2464 * t2747 + t2465 * t2748 + t2585 * t2700 + t2589 * t2712 + t2590 * t2710 + t2591 * t2711, t2515 * t2748 - t2660 * t3331 + t2514 * t2747 - t2659 * t3335 + t2513 * t2746 - t2658 * t3339 + t2509 * t2745 - t2650 * t3355 + (t2631 * t3544 + t2638 * t3542 + t2639 * t3540 + t2640 * t3538) * t3017, t2510 * t2745 + t2516 * t2746 + t2517 * t2747 + t2518 * t2748 - t2650 * t3866 - t2658 * t3861 - t2659 * t3860 - t2660 * t3859 + (t2630 * t3544 + t2635 * t3542 + t2636 * t3540 + t2637 * t3538) * t3017, (-t2650 * t3544 - t2658 * t3542 - t2659 * t3540 - t2660 * t3538) * t3017 + (t2650 * t3510 + t2658 * t3494 + t2659 * t3490 + t2660 * t3486) * t2983, (t2423 + t3534) * t2748 + (t2421 + t3535) * t2747 + (t2419 + t3536) * t2746 + (t2405 + t3545) * t2745 + (-t2797 * t3208 - t2799 * t3205 - t2800 * t3202 - t2801 * t3199) * t3017, (t2422 - t3190) * t2748 + (t2420 - t3193) * t2747 + (t2418 - t3196) * t2746 + (t2404 - t3211) * t2745 + (t2798 * t3208 + t2802 * t3205 + t2803 * t3202 + t2804 * t3199) * t3017, 0, 0, 0, 1; t2351, 0, 0, t2350, t2349, (t2990 * t3077 + t2996 * t3076 + t2999 * t3075 + t3002 * t3074) * t2983, (t2993 * t3077 + t3005 * t3076 + t3008 * t3075 + t3011 * t3074) * t2983, t2384 * t2700 + t2395 * t2710 + t2397 * t2711 + t2399 * t2712 + (t2384 * t2745 + t2395 * t2746 + t2397 * t2747 + t2399 * t2748) * t2984, t2308 * t2745 + t2312 * t2746 + t2313 * t2747 + t2314 * t2748 + t2849 * t3354 + t2851 * t3338 + t2852 * t3334 + t2853 * t3330, t2307 * t2745 + t2309 * t2746 + t2310 * t2747 + t2311 * t2748 - t2850 * t3354 - t2854 * t3330 - t2855 * t3338 - t2856 * t3334, t2276 * t2745 + t2280 * t2746 + t2281 * t2747 + t2282 * t2748 + t2354 * t3355 + t2361 * t3339 + t2362 * t3335 + t2363 * t3331, t2275 * t2745 + t2277 * t2746 + t2278 * t2747 + t2279 * t2748 + t2341 * t2700 + t2343 * t2712 + t2344 * t2710 + t2345 * t2711, t2290 * t2748 - t2429 * t3331 + t2289 * t2747 - t2428 * t3335 + t2288 * t2746 - t2427 * t3339 + t2284 * t2745 - t2424 * t3355 + (t2354 * t3544 + t2361 * t3542 + t2362 * t3540 + t2363 * t3538) * t3017, t2283 * t2745 + t2285 * t2746 + t2286 * t2747 + t2287 * t2748 - t2424 * t3866 - t2427 * t3861 - t2428 * t3860 - t2429 * t3859 + (t2353 * t3544 + t2358 * t3542 + t2359 * t3540 + t2360 * t3538) * t3017, (-t2424 * t3544 - t2427 * t3542 - t2428 * t3540 - t2429 * t3538) * t3017 + (t2424 * t3510 + t2427 * t3494 + t2428 * t3490 + t2429 * t3486) * t2983, t2613 * t3545 + t2626 * t3536 + t2627 * t3535 + t2628 * t3534 + t2268 * t2745 + t2270 * t2746 + t2272 * t2747 + t2274 * t2748 + (-t2613 * t3353 - t2626 * t3350 - t2627 * t3347 - t2628 * t3344) * t3017, t2273 * t2748 - t2628 * t3190 + t2271 * t2747 - t2627 * t3193 + t2269 * t2746 - t2626 * t3196 + t2267 * t2745 - t2613 * t3211 + (t2613 * t3352 + t2626 * t3349 + t2627 * t3346 + t2628 * t3343) * t3017, 0, 0, 0, 0; t2328, 0, 0, t2326, t2324, (t2990 * t3142 + t2996 * t3127 + t2999 * t3137 + t3002 * t3132) * t2983, (t2993 * t3142 + t3005 * t3127 + t3008 * t3137 + t3011 * t3132) * t2983, t2469 * t2526 + t2471 * t2554 + t2472 * t2556 + t2473 * t2552 + (t2526 * t2613 + t2552 * t2626 + t2554 * t2627 + t2556 * t2628) * t2984, t2403 * t2613 + t2413 * t2626 + t2416 * t2627 + t2417 * t2628 - t2716 * t3629 - t2726 * t3620 - t2727 * t3626 - t2728 * t3623, t2401 * t2613 + t2407 * t2626 + t2409 * t2627 + t2411 * t2628 + t2716 * t3628 + t2726 * t3619 + t2727 * t3625 + t2728 * t3622, t2322 * t2613 + t2338 * t2626 + t2339 * t2627 + t2340 * t2628 + t2489 * t3904 + t2500 * t3892 + t2502 * t3900 + t2504 * t3896, t2320 * t2613 + t2330 * t2626 + t2333 * t2627 + t2334 * t2628 + t2444 * t2469 + t2452 * t2472 + t2454 * t2473 + t2456 * t2471, t2365 * t2613 + t2371 * t2626 + t2372 * t2627 + t2373 * t2628 + t2489 * t2505 + t2500 * t2506 + t2502 * t2508 + t2504 * t2507 - t2558 * t3904 - t2560 * t3892 - t2562 * t3900 - t2564 * t3896, t2367 * t2613 + t2375 * t2626 + t2377 * t2627 + t2379 * t2628 + t2487 * t2505 + t2494 * t2506 + t2496 * t2508 + t2498 * t2507 - t2558 * t3903 - t2560 * t3891 - t2562 * t3899 - t2564 * t3895, -t2505 * t2558 - t2506 * t2560 - t2507 * t2564 - t2508 * t2562 + (t2558 * t3885 + t2560 * t3875 + t2562 * t3871 + t2564 * t3867) * t2983, t2613 * t2294 + t2626 * t2298 + t2627 * t2302 + t2628 * t2306 - t2716 * t3099 - t2726 * t3095 - t2727 * t3091 - t2728 * t3087, t2613 * t2293 + t2626 * t2297 + t2627 * t2301 + t2628 * t2305 - t2716 * t3098 - t2726 * t3094 - t2727 * t3090 - t2728 * t3086, 0, -t2963, -t2964, 0; t2327, 0, 0, t2325, t2323, (t2990 * t3143 + t2996 * t3128 + t2999 * t3138 + t3002 * t3133) * t2983, (t2993 * t3143 + t3005 * t3128 + t3008 * t3138 + t3011 * t3133) * t2983, t2469 * t2524 + t2471 * t2548 + t2472 * t2550 + t2473 * t2546 + (t2524 * t2613 + t2546 * t2626 + t2548 * t2627 + t2550 * t2628) * t2984, t2402 * t2613 + t2412 * t2626 + t2414 * t2627 + t2415 * t2628 - t2715 * t3629 - t2723 * t3620 - t2724 * t3626 - t2725 * t3623, t2400 * t2613 + t2406 * t2626 + t2408 * t2627 + t2410 * t2628 + t2715 * t3628 + t2723 * t3619 + t2724 * t3625 + t2725 * t3622, t2321 * t2613 + t2335 * t2626 + t2336 * t2627 + t2337 * t2628 + t2488 * t3904 + t2499 * t3892 + t2501 * t3900 + t2503 * t3896, t2319 * t2613 + t2329 * t2626 + t2331 * t2627 + t2332 * t2628 + t2443 * t2469 + t2451 * t2472 + t2453 * t2473 + t2455 * t2471, t2364 * t2613 + t2368 * t2626 + t2369 * t2627 + t2370 * t2628 + t2488 * t2505 + t2499 * t2506 + t2501 * t2508 + t2503 * t2507 - t2557 * t3904 - t2559 * t3892 - t2561 * t3900 - t2563 * t3896, t2366 * t2613 + t2374 * t2626 + t2376 * t2627 + t2378 * t2628 + t2486 * t2505 + t2493 * t2506 + t2495 * t2508 + t2497 * t2507 - t2557 * t3903 - t2559 * t3891 - t2561 * t3899 - t2563 * t3895, -t2505 * t2557 - t2506 * t2559 - t2507 * t2563 - t2508 * t2561 + (t2557 * t3885 + t2559 * t3875 + t2561 * t3871 + t2563 * t3867) * t2983, t2613 * t2292 + t2626 * t2296 + t2627 * t2300 + t2628 * t2304 - t2715 * t3099 - t2723 * t3095 - t2724 * t3091 - t2725 * t3087, t2613 * t2291 + t2626 * t2295 + t2627 * t2299 + t2628 * t2303 - t2715 * t3098 - t2723 * t3094 - t2724 * t3090 - t2725 * t3086, 0, t2964, -t2963, 0; t2351, 0, 0, t2350, t2349, (t2990 * t3141 + t2996 * t3126 + t2999 * t3136 + t3002 * t3131) * t2983, (t2993 * t3141 + t3005 * t3126 + t3008 * t3136 + t3011 * t3131) * t2983, t2469 * t2657 + t2471 * t2670 + t2472 * t2672 + t2473 * t2668 + (t2613 * t2657 + t2626 * t2668 + t2627 * t2670 + t2628 * t2672) * t2984, t2469 * t3513 + t2471 * t3493 + t2472 * t3489 + t2473 * t3497 + t2566 * t2613 + t2574 * t2626 + t2575 * t2627 + t2576 * t2628, t2565 * t2613 + t2571 * t2626 + t2572 * t2627 + t2573 * t2628 - t2850 * t3627 - t2854 * t3621 - t2855 * t3618 - t2856 * t3624, t2450 * t2613 + t2466 * t2626 + t2467 * t2627 + t2468 * t2628 + t2631 * t3904 + t2638 * t3892 + t2639 * t3900 + t2640 * t3896, t2449 * t2613 + t2463 * t2626 + t2464 * t2627 + t2465 * t2628 + t2469 * t2585 + t2471 * t2591 + t2472 * t2589 + t2473 * t2590, t2505 * t2631 + t2506 * t2638 + t2507 * t2640 + t2508 * t2639 + t2509 * t2613 + t2513 * t2626 + t2514 * t2627 + t2515 * t2628 - t2650 * t3904 - t2658 * t3892 - t2659 * t3900 - t2660 * t3896, t2505 * t2630 + t2506 * t2635 + t2507 * t2637 + t2508 * t2636 + t2510 * t2613 + t2516 * t2626 + t2517 * t2627 + t2518 * t2628 - t2650 * t3903 - t2658 * t3891 - t2659 * t3899 - t2660 * t3895, -t2505 * t2650 - t2506 * t2658 - t2507 * t2660 - t2508 * t2659 + (t2650 * t3885 + t2658 * t3875 + t2659 * t3871 + t2660 * t3867) * t2983, t2613 * t2405 + t2626 * t2419 + t2627 * t2421 + t2628 * t2423 + t2745 * t3145 + t2746 * t3130 + t2747 * t3140 + t2748 * t3135, t2613 * t2404 + t2626 * t2418 + t2627 * t2420 + t2628 * t2422 + t2745 * t3144 + t2746 * t3129 + t2747 * t3139 + t2748 * t3134, 0, 0, 0, 0; t2625 + t2624 + t2623 + t2612, 0, 0, (t2612 * t2967 + t2623 * t2971 + t2624 * t2972 + t2625 * t2973) * t2965, (t2612 * t3719 + t2623 * t3713 + t2624 * t3708 + t2625 * t3703) * t3689, (t2990 * t3425 + t2996 * t3424 + t2999 * t3423 + t3002 * t3422) * t2983, (t2993 * t3425 + t3005 * t3424 + t3008 * t3423 + t3011 * t3422) * t2983, t2384 * t2469 + t2395 * t2473 + t2397 * t2471 + t2399 * t2472 + (t2384 * t2613 + t2395 * t2626 + t2397 * t2627 + t2399 * t2628) * t2984, (t2314 + t3898) * t2628 + (t2313 + t3902) * t2627 + (t2312 + t3894) * t2626 + (t2308 + t3906) * t2613, (t2311 - t3897) * t2628 + (t2310 - t3901) * t2627 + (t2309 - t3893) * t2626 + (t2307 - t3905) * t2613, t2276 * t2613 + t2280 * t2626 + t2281 * t2627 + t2282 * t2628 + t2354 * t3904 + t2361 * t3892 + t2362 * t3900 + t2363 * t3896, t2275 * t2613 + t2277 * t2626 + t2278 * t2627 + t2279 * t2628 + t2341 * t2469 + t2343 * t2472 + t2344 * t2473 + t2345 * t2471, t2284 * t2613 + t2288 * t2626 + t2289 * t2627 + t2290 * t2628 + t2354 * t2505 + t2361 * t2506 + t2362 * t2508 + t2363 * t2507 - t2424 * t3904 - t2427 * t3892 - t2428 * t3900 - t2429 * t3896, t2283 * t2613 + t2285 * t2626 + t2286 * t2627 + t2287 * t2628 + t2353 * t2505 + t2358 * t2506 + t2359 * t2508 + t2360 * t2507 - t2424 * t3903 - t2427 * t3891 - t2428 * t3899 - t2429 * t3895, -t2424 * t2505 - t2427 * t2506 - t2428 * t2508 - t2429 * t2507 + (t2424 * t3885 + t2427 * t3875 + t2428 * t3871 + t2429 * t3867) * t2983, (t2274 + t3135) * t2628 + (t2272 + t3140) * t2627 + (t2270 + t3130) * t2626 + (t2268 + t3145) * t2613, (t2273 + t3134) * t2628 + (t2271 + t3139) * t2627 + (t2269 + t3129) * t2626 + (t2267 + t3144) * t2613, 1, 0, 0, 0;];
tau_reg  = t1;
