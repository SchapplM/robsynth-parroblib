% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [21x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4RRRRR10V2G1A0_convert_par2_MPV_fixb.m

% Output:
% taugX [4x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4RRRRR10V2G1A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1),zeros(21,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [21 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_mdp: MDP has to be [21x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 17:14:06
% EndTime: 2020-08-07 17:14:56
% DurationCPUTime: 52.42s
% Computational Cost: add. (11417->1036), mult. (21637->1761), div. (240->29), fcn. (18920->36), ass. (0->692)
t17131 = cos(qJ(2,1));
t17133 = pkin(8) + pkin(7);
t17051 = t17133 * t17131;
t17122 = sin(qJ(2,1));
t16975 = pkin(2) * t17122 - t17051;
t17104 = cos(pkin(4));
t17461 = pkin(1) * t17104;
t16928 = t16975 * t17461;
t17103 = sin(pkin(4));
t17130 = cos(qJ(3,1));
t17048 = t17133 * t17122;
t17087 = t17131 * pkin(2);
t16978 = t17087 + t17048;
t17045 = t17087 + pkin(1);
t17121 = sin(qJ(3,1));
t17081 = t17121 * pkin(3);
t17166 = -pkin(6) * t16978 + t17045 * t17081;
t16960 = pkin(1) + t16978;
t17443 = t16960 * pkin(2);
t17251 = t17121 * t17443;
t17329 = t17104 * t17122;
t17340 = t17103 * t17131;
t17100 = t17130 ^ 2;
t17451 = pkin(3) * t17100;
t17182 = -(pkin(1) * t17329 + pkin(6) * t17340) * t17451 + t17103 * t17251;
t17494 = 0.1e1 / ((-t17103 * t17166 + t16928) * t17130 - t17182);
t17128 = cos(qJ(2,2));
t17050 = t17133 * t17128;
t17119 = sin(qJ(2,2));
t16974 = pkin(2) * t17119 - t17050;
t16927 = t16974 * t17461;
t17127 = cos(qJ(3,2));
t17047 = t17133 * t17119;
t17085 = t17128 * pkin(2);
t16977 = t17085 + t17047;
t17042 = t17085 + pkin(1);
t17118 = sin(qJ(3,2));
t17080 = t17118 * pkin(3);
t17167 = -pkin(6) * t16977 + t17042 * t17080;
t16959 = pkin(1) + t16977;
t17444 = t16959 * pkin(2);
t17253 = t17118 * t17444;
t17331 = t17104 * t17119;
t17343 = t17103 * t17128;
t17098 = t17127 ^ 2;
t17452 = pkin(3) * t17098;
t17183 = -(pkin(1) * t17331 + pkin(6) * t17343) * t17452 + t17103 * t17253;
t17493 = 0.1e1 / ((-t17103 * t17167 + t16927) * t17127 - t17183);
t17125 = cos(qJ(2,3));
t17049 = t17133 * t17125;
t17116 = sin(qJ(2,3));
t16973 = pkin(2) * t17116 - t17049;
t16926 = t16973 * t17461;
t17124 = cos(qJ(3,3));
t17046 = t17133 * t17116;
t17083 = t17125 * pkin(2);
t16976 = t17083 + t17046;
t17039 = t17083 + pkin(1);
t17115 = sin(qJ(3,3));
t17079 = t17115 * pkin(3);
t17168 = -pkin(6) * t16976 + t17039 * t17079;
t16958 = pkin(1) + t16976;
t17445 = t16958 * pkin(2);
t17255 = t17115 * t17445;
t17333 = t17104 * t17116;
t17346 = t17103 * t17125;
t17096 = t17124 ^ 2;
t17453 = pkin(3) * t17096;
t17184 = -(pkin(1) * t17333 + pkin(6) * t17346) * t17453 + t17103 * t17255;
t17492 = 0.1e1 / ((-t17103 * t17168 + t16926) * t17124 - t17184);
t17113 = cos(qJ(2,4));
t17030 = t17133 * t17113;
t17110 = sin(qJ(2,4));
t16971 = pkin(2) * t17110 - t17030;
t16924 = t16971 * t17461;
t17112 = cos(qJ(3,4));
t17029 = t17133 * t17110;
t17078 = t17113 * pkin(2);
t16972 = t17078 + t17029;
t17021 = t17078 + pkin(1);
t17109 = sin(qJ(3,4));
t17076 = t17109 * pkin(3);
t17169 = -pkin(6) * t16972 + t17021 * t17076;
t16957 = pkin(1) + t16972;
t17446 = t16957 * pkin(2);
t17257 = t17109 * t17446;
t17336 = t17104 * t17110;
t17355 = t17103 * t17113;
t17092 = t17112 ^ 2;
t17454 = pkin(3) * t17092;
t17185 = -(pkin(1) * t17336 + pkin(6) * t17355) * t17454 + t17103 * t17257;
t17491 = 0.1e1 / ((-t17103 * t17169 + t16924) * t17112 - t17185);
t17246 = pkin(6) * t17121 + pkin(3);
t17478 = -t17246 + t17451;
t17247 = pkin(6) * t17118 + pkin(3);
t17477 = -t17247 + t17452;
t17248 = pkin(6) * t17115 + pkin(3);
t17476 = -t17248 + t17453;
t17249 = pkin(6) * t17109 + pkin(3);
t17475 = -t17249 + t17454;
t17077 = t17112 * pkin(3);
t17019 = t17077 + pkin(2);
t17082 = t17124 * pkin(3);
t17037 = t17082 + pkin(2);
t17084 = t17127 * pkin(3);
t17040 = t17084 + pkin(2);
t17086 = t17130 * pkin(3);
t17043 = t17086 + pkin(2);
t17144 = 0.1e1 / pkin(3);
t17338 = t17103 * t17144;
t17017 = t17076 + pkin(6);
t17093 = t17113 ^ 2;
t17325 = t17104 * t17133;
t17266 = 0.2e1 * t17325;
t17190 = (t17093 - 0.1e1 / 0.2e1) * t17266;
t17094 = pkin(2) + t17133;
t17095 = pkin(2) - t17133;
t17363 = t17094 * t17095;
t17213 = t17104 * t17363;
t17221 = t17017 * t17355;
t17470 = t16972 * t17017 * t17103 - t17110 * t17113 * t17213 + pkin(2) * t17190 + t17077 * (t17190 + t17221);
t17031 = t17079 + pkin(6);
t17097 = t17125 ^ 2;
t17053 = t17097 - 0.1e1 / 0.2e1;
t17466 = -0.2e1 * pkin(2);
t17199 = t17325 * t17466;
t17219 = t17031 * t17346;
t17469 = t17031 * t16976 * t17103 - t17116 * t17125 * t17213 - t17053 * t17199 + t17082 * (t17053 * t17266 + t17219);
t17033 = t17080 + pkin(6);
t17099 = t17128 ^ 2;
t17054 = t17099 - 0.1e1 / 0.2e1;
t17218 = t17033 * t17343;
t17468 = t17033 * t16977 * t17103 - t17119 * t17128 * t17213 - t17054 * t17199 + t17084 * (t17054 * t17266 + t17218);
t17035 = t17081 + pkin(6);
t17101 = t17131 ^ 2;
t17055 = t17101 - 0.1e1 / 0.2e1;
t17217 = t17035 * t17340;
t17467 = t16978 * t17035 * t17103 - t17122 * t17131 * t17213 - t17055 * t17199 + t17086 * (t17055 * t17266 + t17217);
t17465 = pkin(1) * t17019;
t17464 = pkin(1) * t17037;
t17463 = pkin(1) * t17040;
t17462 = pkin(1) * t17043;
t17460 = pkin(2) * t17103;
t17459 = pkin(2) * t17104;
t17458 = pkin(2) * t17109;
t17457 = pkin(2) * t17115;
t17456 = pkin(2) * t17118;
t17455 = pkin(2) * t17121;
t17450 = pkin(6) * t17112;
t17449 = pkin(6) * t17124;
t17448 = pkin(6) * t17127;
t17447 = pkin(6) * t17130;
t17442 = pkin(3) * t17466;
t17091 = t17104 ^ 2;
t17441 = (t17091 - 0.1e1) * pkin(6);
t17111 = sin(qJ(1,4));
t17114 = cos(qJ(1,4));
t17135 = koppelP(4,2);
t17139 = koppelP(4,1);
t16963 = t17111 * t17139 - t17114 * t17135;
t16964 = t17111 * t17135 + t17114 * t17139;
t17134 = xP(4);
t17089 = sin(t17134);
t17090 = cos(t17134);
t16847 = t16963 * t17089 + t16964 * t17090;
t17105 = legFrame(4,3);
t17066 = sin(t17105);
t17070 = cos(t17105);
t17173 = t16963 * t17090 - t16964 * t17089;
t16758 = t16847 * t17070 - t17066 * t17173;
t17335 = t17104 * t17112;
t16872 = pkin(1) * (-t17019 * t17110 + t17030) * t17335;
t16932 = pkin(2) * t17093 + t17030 * t17110 - pkin(2);
t17060 = t17093 - 0.2e1;
t17309 = t17112 * t17113;
t17198 = pkin(3) * t17309 + t16972;
t17312 = t17110 * t17112;
t17358 = t17103 * t17109;
t17161 = -(t17021 * t17110 + t17133 + (pkin(3) * t17312 - t17030) * t17113) * t17358 + (pkin(1) + t17198) * t17335;
t17256 = t17110 * t17454;
t17272 = -t16971 * t17112 - 0.2e1 * t17256;
t17359 = t17103 * t17104;
t17440 = (t17161 * (t16847 * t17066 + t17070 * t17173) + (-t17272 * t17091 + (-t17091 * t17249 - t17475) * t17110 + ((t17060 * t17077 + t16932) * t17109 - t17450) * t17359) * t16758) / (t16872 + t17103 * ((t17021 * t17077 + t17446) * t17109 - t17198 * t17450));
t17120 = sin(qJ(1,2));
t17129 = cos(qJ(1,2));
t17137 = koppelP(2,2);
t17141 = koppelP(2,1);
t16967 = t17120 * t17141 - t17129 * t17137;
t16968 = t17120 * t17137 + t17129 * t17141;
t16855 = t16967 * t17089 + t16968 * t17090;
t17107 = legFrame(2,3);
t17068 = sin(t17107);
t17072 = cos(t17107);
t17171 = t16967 * t17090 - t16968 * t17089;
t16765 = t16855 * t17072 - t17068 * t17171;
t17327 = t17104 * t17127;
t16874 = pkin(1) * (-t17040 * t17119 + t17050) * t17327;
t16937 = pkin(2) * t17099 + t17050 * t17119 - pkin(2);
t17062 = t17099 - 0.2e1;
t17284 = t17127 * t17128;
t17196 = pkin(3) * t17284 + t16977;
t17296 = t17119 * t17127;
t17351 = t17103 * t17118;
t17159 = -(t17042 * t17119 + t17133 + (pkin(3) * t17296 - t17050) * t17128) * t17351 + (pkin(1) + t17196) * t17327;
t17252 = t17119 * t17452;
t17270 = -t16974 * t17127 - 0.2e1 * t17252;
t17439 = (t17159 * (t17068 * t16855 + t17072 * t17171) + (-t17270 * t17091 + (-t17091 * t17247 - t17477) * t17119 + ((t17062 * t17084 + t16937) * t17118 - t17448) * t17359) * t16765) / (t16874 + t17103 * ((t17042 * t17084 + t17444) * t17118 - t17196 * t17448));
t17123 = sin(qJ(1,1));
t17132 = cos(qJ(1,1));
t17138 = koppelP(1,2);
t17142 = koppelP(1,1);
t16969 = t17123 * t17142 - t17132 * t17138;
t16970 = t17123 * t17138 + t17132 * t17142;
t16856 = t16969 * t17089 + t16970 * t17090;
t17108 = legFrame(1,3);
t17069 = sin(t17108);
t17073 = cos(t17108);
t17170 = t16969 * t17090 - t16970 * t17089;
t16767 = t16856 * t17073 - t17069 * t17170;
t17326 = t17104 * t17130;
t16875 = pkin(1) * (-t17043 * t17122 + t17051) * t17326;
t16938 = pkin(2) * t17101 + t17051 * t17122 - pkin(2);
t17063 = t17101 - 0.2e1;
t17282 = t17130 * t17131;
t17195 = pkin(3) * t17282 + t16978;
t17289 = t17122 * t17130;
t17349 = t17103 * t17121;
t17158 = -(t17045 * t17122 + t17133 + (pkin(3) * t17289 - t17051) * t17131) * t17349 + (pkin(1) + t17195) * t17326;
t17250 = t17122 * t17451;
t17269 = -t16975 * t17130 - 0.2e1 * t17250;
t17438 = (t17158 * (t17069 * t16856 + t17073 * t17170) + (-t17269 * t17091 + (-t17091 * t17246 - t17478) * t17122 + ((t17063 * t17086 + t16938) * t17121 - t17447) * t17359) * t16767) / (t16875 + ((t17045 * t17086 + t17443) * t17121 - t17195 * t17447) * t17103);
t17117 = sin(qJ(1,3));
t17126 = cos(qJ(1,3));
t17136 = koppelP(3,2);
t17140 = koppelP(3,1);
t16965 = t17117 * t17140 - t17126 * t17136;
t16966 = t17117 * t17136 + t17126 * t17140;
t16854 = t16965 * t17089 + t16966 * t17090;
t17106 = legFrame(3,3);
t17067 = sin(t17106);
t17071 = cos(t17106);
t17172 = t16965 * t17090 - t16966 * t17089;
t16763 = t16854 * t17071 - t17067 * t17172;
t17328 = t17104 * t17124;
t16873 = pkin(1) * (-t17037 * t17116 + t17049) * t17328;
t16936 = pkin(2) * t17097 + t17049 * t17116 - pkin(2);
t17061 = t17097 - 0.2e1;
t17286 = t17124 * t17125;
t17197 = pkin(3) * t17286 + t16976;
t17303 = t17116 * t17124;
t17353 = t17103 * t17115;
t17160 = -(t17039 * t17116 + t17133 + (pkin(3) * t17303 - t17049) * t17125) * t17353 + (pkin(1) + t17197) * t17328;
t17254 = t17116 * t17453;
t17271 = -t16973 * t17124 - 0.2e1 * t17254;
t17437 = (t17160 * (t16854 * t17067 + t17071 * t17172) + (-t17271 * t17091 + (-t17091 * t17248 - t17476) * t17116 + ((t17061 * t17082 + t16936) * t17115 - t17449) * t17359) * t16763) / (t16873 + t17103 * ((t17039 * t17082 + t17445) * t17115 - t17197 * t17449));
t17261 = pkin(3) * t17358;
t17276 = t17133 * t17139;
t17280 = t17133 * t17135;
t17324 = t17104 * t17135;
t16804 = (pkin(2) * t17139 - t17104 * t17280) * t17113 + (pkin(2) * t17324 + t17276) * t17110 - t17135 * t17261;
t17320 = t17104 * t17139;
t16805 = (pkin(2) * t17135 + t17104 * t17276) * t17113 + (-pkin(2) * t17320 + t17280) * t17110 + t17139 * t17261;
t16713 = t16804 * t17114 + t16805 * t17111;
t16714 = -t16804 * t17111 + t16805 * t17114;
t16933 = t17110 * t17324 + t17139 * t17113;
t16934 = t17110 * t17320 - t17135 * t17113;
t16826 = t16933 * t17114 - t16934 * t17111;
t16827 = t16933 * t17111 + t16934 * t17114;
t17008 = pkin(1) * t17325;
t17018 = t17076 - pkin(6);
t16892 = t17018 * t17460 + t17008;
t16948 = -pkin(6) * t17103 * t17133 - pkin(1) * t17459;
t17436 = (-((-t16826 * t17089 + t16827 * t17090) * t17070 + (t16826 * t17090 + t16827 * t17089) * t17066) * t17454 + ((t16713 * t17089 + t16714 * t17090) * t17070 - (t16713 * t17090 - t16714 * t17089) * t17066) * t17112 + t16758 * pkin(2) * t17358) / ((pkin(1) * t17261 + t16892 * t17113 + t16948 * t17110) * t17112 + t17185);
t17260 = pkin(3) * t17353;
t17275 = t17133 * t17140;
t17279 = t17133 * t17136;
t17323 = t17104 * t17136;
t16808 = (pkin(2) * t17140 - t17104 * t17279) * t17125 + (pkin(2) * t17323 + t17275) * t17116 - t17136 * t17260;
t17319 = t17104 * t17140;
t16811 = (pkin(2) * t17136 + t17104 * t17275) * t17125 + (-pkin(2) * t17319 + t17279) * t17116 + t17140 * t17260;
t16715 = t16808 * t17126 + t16811 * t17117;
t16718 = -t16808 * t17117 + t16811 * t17126;
t16939 = t17116 * t17323 + t17140 * t17125;
t16942 = t17116 * t17319 - t17136 * t17125;
t16834 = t16939 * t17126 - t16942 * t17117;
t16837 = t16939 * t17117 + t16942 * t17126;
t17032 = t17079 - pkin(6);
t16893 = t17032 * t17460 + t17008;
t17435 = (-((-t16834 * t17089 + t16837 * t17090) * t17071 + (t16834 * t17090 + t16837 * t17089) * t17067) * t17453 + ((t16715 * t17089 + t16718 * t17090) * t17071 - (t16715 * t17090 - t16718 * t17089) * t17067) * t17124 + t16763 * pkin(2) * t17353) / ((pkin(1) * t17260 + t16893 * t17125 + t16948 * t17116) * t17124 + t17184);
t17259 = pkin(3) * t17351;
t17274 = t17133 * t17141;
t17278 = t17133 * t17137;
t17322 = t17104 * t17137;
t16809 = (pkin(2) * t17141 - t17104 * t17278) * t17128 + (pkin(2) * t17322 + t17274) * t17119 - t17137 * t17259;
t17318 = t17104 * t17141;
t16812 = (pkin(2) * t17137 + t17104 * t17274) * t17128 + (-pkin(2) * t17318 + t17278) * t17119 + t17141 * t17259;
t16716 = t16809 * t17129 + t16812 * t17120;
t16719 = -t16809 * t17120 + t16812 * t17129;
t16940 = t17119 * t17322 + t17141 * t17128;
t16943 = t17119 * t17318 - t17137 * t17128;
t16835 = t16940 * t17129 - t16943 * t17120;
t16838 = t16940 * t17120 + t16943 * t17129;
t17034 = t17080 - pkin(6);
t16894 = t17034 * t17460 + t17008;
t17434 = (-((-t16835 * t17089 + t16838 * t17090) * t17072 + (t16835 * t17090 + t16838 * t17089) * t17068) * t17452 + ((t16716 * t17089 + t16719 * t17090) * t17072 - (t16716 * t17090 - t16719 * t17089) * t17068) * t17127 + t16765 * pkin(2) * t17351) / ((pkin(1) * t17259 + t16894 * t17128 + t16948 * t17119) * t17127 + t17183);
t17258 = pkin(3) * t17349;
t17273 = t17133 * t17142;
t17277 = t17133 * t17138;
t17321 = t17104 * t17138;
t16810 = (pkin(2) * t17142 - t17104 * t17277) * t17131 + (pkin(2) * t17321 + t17273) * t17122 - t17138 * t17258;
t17317 = t17104 * t17142;
t16813 = (pkin(2) * t17138 + t17104 * t17273) * t17131 + (-pkin(2) * t17317 + t17277) * t17122 + t17142 * t17258;
t16717 = t16810 * t17132 + t16813 * t17123;
t16720 = -t16810 * t17123 + t16813 * t17132;
t16941 = t17122 * t17321 + t17142 * t17131;
t16944 = t17122 * t17317 - t17138 * t17131;
t16836 = t16941 * t17132 - t16944 * t17123;
t16839 = t16941 * t17123 + t16944 * t17132;
t17036 = t17081 - pkin(6);
t16895 = t17036 * t17460 + t17008;
t17433 = (-((-t16836 * t17089 + t16839 * t17090) * t17073 + (t16836 * t17090 + t16839 * t17089) * t17069) * t17451 + ((t16717 * t17089 + t16720 * t17090) * t17073 - (t16717 * t17090 - t16720 * t17089) * t17069) * t17130 + t16767 * pkin(2) * t17349) / ((pkin(1) * t17258 + t16895 * t17131 + t16948 * t17122) * t17130 + t17182);
t17009 = pkin(1) * t17110 + t17133;
t17088 = pkin(1) * t17133;
t17181 = pkin(1) * t17076 - pkin(6) * t17029;
t17207 = t17104 * t17312;
t17212 = t17103 * t17325;
t17267 = -0.2e1 * (t17104 + 0.1e1) * (t17104 - 0.1e1);
t17143 = pkin(3) ^ 2;
t17364 = t17092 * t17143;
t17368 = t17019 * t17103;
t17372 = (t17077 + t17094) * (t17077 + t17095);
t17432 = (t17088 * t17113 + (-t17104 * t17221 - t17009 + (t17093 * t17267 + t17091) * t17133) * t17019 + ((t17091 * t17372 + t17112 * t17442 - t17363 - t17364) * t17113 - t17017 * t17212) * t17110) / ((t17112 * t17008 - (t17450 - t17458) * t17368) * t17113 - t17207 * t17465 + t17103 * (t17181 * t17112 + (t17029 + pkin(1)) * t17458));
t17013 = pkin(1) * t17116 + t17133;
t17180 = pkin(1) * t17079 - pkin(6) * t17046;
t17206 = t17104 * t17303;
t17362 = t17096 * t17143;
t17367 = t17037 * t17103;
t17371 = (t17082 + t17094) * (t17082 + t17095);
t17431 = (t17088 * t17125 + (-t17104 * t17219 - t17013 + (t17097 * t17267 + t17091) * t17133) * t17037 + ((t17091 * t17371 + t17124 * t17442 - t17362 - t17363) * t17125 - t17031 * t17212) * t17116) / ((t17124 * t17008 - (t17449 - t17457) * t17367) * t17125 - t17206 * t17464 + t17103 * (t17180 * t17124 + (t17046 + pkin(1)) * t17457));
t17014 = pkin(1) * t17119 + t17133;
t17179 = pkin(1) * t17080 - pkin(6) * t17047;
t17205 = t17104 * t17296;
t17361 = t17098 * t17143;
t17366 = t17040 * t17103;
t17370 = (t17084 + t17094) * (t17084 + t17095);
t17430 = (t17088 * t17128 + (-t17104 * t17218 - t17014 + (t17099 * t17267 + t17091) * t17133) * t17040 + ((t17091 * t17370 + t17127 * t17442 - t17361 - t17363) * t17128 - t17033 * t17212) * t17119) / ((t17127 * t17008 - (t17448 - t17456) * t17366) * t17128 - t17205 * t17463 + t17103 * (t17179 * t17127 + (t17047 + pkin(1)) * t17456));
t17015 = pkin(1) * t17122 + t17133;
t17178 = pkin(1) * t17081 - pkin(6) * t17048;
t17204 = t17104 * t17289;
t17360 = t17100 * t17143;
t17365 = t17043 * t17103;
t17369 = (t17086 + t17094) * (t17086 + t17095);
t17429 = (t17088 * t17131 + (-t17104 * t17217 - t17015 + (t17101 * t17267 + t17091) * t17133) * t17043 + ((t17091 * t17369 + t17130 * t17442 - t17360 - t17363) * t17131 - t17035 * t17212) * t17122) / ((t17130 * t17008 - (t17447 - t17455) * t17365) * t17131 - t17204 * t17462 + t17103 * (t17178 * t17130 + (t17048 + pkin(1)) * t17455));
t17211 = t17103 * t17336;
t17428 = ((t16971 * t17359 + t17441) * t17112 + (-pkin(6) * t17211 - t16932 * t17091 + t16957 * t17113) * t17109 + (-(t17060 * t17091 - t17093 + 0.1e1) * t17109 * t17112 + (0.2e1 * t17092 - 0.1e1) * t17211) * pkin(3)) * t17491;
t17210 = t17103 * t17333;
t17427 = ((t16973 * t17359 + t17441) * t17124 + (-pkin(6) * t17210 - t16936 * t17091 + t16958 * t17125) * t17115 + (-(t17061 * t17091 - t17097 + 0.1e1) * t17115 * t17124 + (0.2e1 * t17096 - 0.1e1) * t17210) * pkin(3)) * t17492;
t17209 = t17103 * t17331;
t17426 = ((t16974 * t17359 + t17441) * t17127 + (-pkin(6) * t17209 - t16937 * t17091 + t16959 * t17128) * t17118 + (-(t17062 * t17091 - t17099 + 0.1e1) * t17118 * t17127 + (0.2e1 * t17098 - 0.1e1) * t17209) * pkin(3)) * t17493;
t17208 = t17103 * t17329;
t17425 = ((t16975 * t17359 + t17441) * t17130 + (-pkin(6) * t17208 - t16938 * t17091 + t16960 * t17131) * t17121 + (-(t17063 * t17091 - t17101 + 0.1e1) * t17121 * t17130 + (0.2e1 * t17100 - 0.1e1) * t17208) * pkin(3)) * t17494;
t16896 = t17207 - t17358;
t17308 = t17114 * t17113;
t16868 = -t16896 * t17111 + t17112 * t17308;
t16949 = g(1) * t17066 - t17070 * g(2);
t16953 = g(1) * t17070 + g(2) * t17066;
t17337 = t17104 * t17109;
t16700 = t16868 * t16953 - (t16896 * t17114 + t17111 * t17309) * t16949 + g(3) * (t17103 * t17312 + t17337);
t17145 = pkin(2) ^ 2;
t17194 = t17113 * pkin(6) * t17454;
t17268 = pkin(3) * t17461;
t16708 = 0.1e1 / (t16892 * t17309 + (t16948 * t17112 - t17092 * t17268) * t17110 + (-t17194 + (pkin(2) * t17029 + t17145 * t17113 + t17465) * t17109) * t17103);
t17424 = t16700 * t16708;
t17313 = t17110 * t17111;
t16899 = t17104 * t17313 - t17308;
t17356 = t17103 * t17112;
t17165 = t16899 * t17109 + t17111 * t17356;
t17310 = t17111 * t17113;
t17316 = t17109 * t17110;
t16701 = -t17165 * t16953 - t16949 * ((t17104 * t17316 + t17356) * t17114 + t17109 * t17310) - g(3) * (-t17103 * t17316 + t17335);
t17423 = t16701 * t16708;
t16909 = t17206 - t17353;
t17285 = t17126 * t17125;
t16869 = -t16909 * t17117 + t17124 * t17285;
t16950 = g(1) * t17067 - t17071 * g(2);
t16954 = g(1) * t17071 + g(2) * t17067;
t17334 = t17104 * t17115;
t16702 = t16954 * t16869 - (t16909 * t17126 + t17117 * t17286) * t16950 + g(3) * (t17103 * t17303 + t17334);
t17193 = t17125 * pkin(6) * t17453;
t16709 = 0.1e1 / (t16893 * t17286 + (t16948 * t17124 - t17096 * t17268) * t17116 + (-t17193 + (pkin(2) * t17046 + t17145 * t17125 + t17464) * t17115) * t17103);
t17422 = t16702 * t16709;
t17304 = t17116 * t17117;
t16912 = t17104 * t17304 - t17285;
t17347 = t17103 * t17124;
t17164 = t16912 * t17115 + t17117 * t17347;
t17301 = t17117 * t17125;
t17307 = t17115 * t17116;
t16703 = -t16954 * t17164 - ((t17104 * t17307 + t17347) * t17126 + t17115 * t17301) * t16950 - g(3) * (-t17103 * t17307 + t17328);
t17421 = t16703 * t16709;
t16910 = t17205 - t17351;
t17283 = t17129 * t17128;
t16870 = -t16910 * t17120 + t17127 * t17283;
t16951 = g(1) * t17068 - t17072 * g(2);
t16955 = g(1) * t17072 + g(2) * t17068;
t17332 = t17104 * t17118;
t16704 = t16955 * t16870 - t16951 * (t16910 * t17129 + t17120 * t17284) + g(3) * (t17103 * t17296 + t17332);
t17192 = t17128 * pkin(6) * t17452;
t16710 = 0.1e1 / (t16894 * t17284 + (t16948 * t17127 - t17098 * t17268) * t17119 + (-t17192 + (pkin(2) * t17047 + t17145 * t17128 + t17463) * t17118) * t17103);
t17420 = t16704 * t16710;
t17297 = t17119 * t17120;
t16913 = t17104 * t17297 - t17283;
t17344 = t17103 * t17127;
t17163 = t16913 * t17118 + t17120 * t17344;
t17294 = t17120 * t17128;
t17300 = t17118 * t17119;
t16705 = -t16955 * t17163 - t16951 * ((t17104 * t17300 + t17344) * t17129 + t17118 * t17294) - g(3) * (-t17103 * t17300 + t17327);
t17419 = t16705 * t16710;
t16911 = t17204 - t17349;
t17281 = t17132 * t17131;
t16871 = -t16911 * t17123 + t17130 * t17281;
t16952 = g(1) * t17069 - t17073 * g(2);
t16956 = g(1) * t17073 + g(2) * t17069;
t17330 = t17104 * t17121;
t16706 = t16871 * t16956 - t16952 * (t16911 * t17132 + t17123 * t17282) + g(3) * (t17103 * t17289 + t17330);
t17191 = t17131 * pkin(6) * t17451;
t16711 = 0.1e1 / (t16895 * t17282 + (t16948 * t17130 - t17100 * t17268) * t17122 + (-t17191 + (pkin(2) * t17048 + t17145 * t17131 + t17462) * t17121) * t17103);
t17418 = t16706 * t16711;
t17290 = t17122 * t17123;
t16914 = t17104 * t17290 - t17281;
t17341 = t17103 * t17130;
t17162 = t16914 * t17121 + t17123 * t17341;
t17287 = t17123 * t17131;
t17293 = t17121 * t17122;
t16707 = -t17162 * t16956 - t16952 * ((t17104 * t17293 + t17341) * t17132 + t17121 * t17287) - g(3) * (-t17103 * t17293 + t17326);
t17417 = t16707 * t16711;
t16726 = 0.1e1 / (((t17018 * t17078 + t17181) * t17103 - t16924) * t17112 + t17185);
t17311 = t17110 * t17114;
t16901 = t17104 * t17311 + t17310;
t17354 = t17103 * t17114;
t16727 = -t16953 * (t16901 * t17109 + t17112 * t17354) + t16949 * t17165;
t17416 = t16726 * t16727;
t16728 = t16953 * (t16901 * t17112 - t17109 * t17354) + t16868 * t16949;
t17415 = t16726 * t16728;
t16900 = t17104 * t17308 - t17313;
t16902 = t17104 * t17310 + t17311;
t16778 = t16900 * t16953 - t16902 * t16949;
t17414 = t16726 * t16778;
t16779 = -t16899 * t16949 + t16901 * t16953;
t17413 = t16726 * t16779;
t16792 = -t17103 * t17256 + (-pkin(3) * t17337 - t16971 * t17103) * t17112 - pkin(2) * t17337;
t17412 = t16726 * t16792;
t16845 = t16949 * t17114 + t16953 * t17111;
t17411 = t16726 * t16845;
t16846 = -t16949 * t17111 + t16953 * t17114;
t17410 = t16726 * t16846;
t16733 = 0.1e1 / (((t17036 * t17087 + t17178) * t17103 - t16928) * t17130 + t17182);
t17288 = t17122 * t17132;
t16920 = t17104 * t17288 + t17287;
t17339 = t17103 * t17132;
t16742 = -t16956 * (t16920 * t17121 + t17130 * t17339) + t16952 * t17162;
t17409 = t16733 * t16742;
t16743 = (t16920 * t17130 - t17121 * t17339) * t16956 + t16871 * t16952;
t17408 = t16733 * t16743;
t16919 = t17104 * t17281 - t17290;
t16923 = t17104 * t17287 + t17288;
t16790 = t16919 * t16956 - t16923 * t16952;
t17407 = t16733 * t16790;
t16791 = -t16914 * t16952 + t16920 * t16956;
t17406 = t16733 * t16791;
t16797 = -t17103 * t17250 + (-pkin(3) * t17330 - t16975 * t17103) * t17130 - pkin(2) * t17330;
t17405 = t16733 * t16797;
t16850 = t16952 * t17132 + t16956 * t17123;
t17404 = t16733 * t16850;
t16853 = -t16952 * t17123 + t16956 * t17132;
t17403 = t16733 * t16853;
t16735 = 0.1e1 / (((t17032 * t17083 + t17180) * t17103 - t16926) * t17124 + t17184);
t17302 = t17116 * t17126;
t16916 = t17104 * t17302 + t17301;
t17345 = t17103 * t17126;
t16738 = -t16954 * (t16916 * t17115 + t17124 * t17345) + t16950 * t17164;
t17402 = t16735 * t16738;
t16739 = t16954 * (t16916 * t17124 - t17115 * t17345) + t16869 * t16950;
t17401 = t16735 * t16739;
t16915 = t17104 * t17285 - t17304;
t16921 = t17104 * t17301 + t17302;
t16786 = t16915 * t16954 - t16921 * t16950;
t17400 = t16735 * t16786;
t16787 = -t16912 * t16950 + t16916 * t16954;
t17399 = t16735 * t16787;
t16795 = -t17103 * t17254 + (-pkin(3) * t17334 - t16973 * t17103) * t17124 - pkin(2) * t17334;
t17398 = t16735 * t16795;
t16848 = t16950 * t17126 + t16954 * t17117;
t17397 = t16735 * t16848;
t16851 = -t16950 * t17117 + t16954 * t17126;
t17396 = t16735 * t16851;
t16737 = 0.1e1 / (((t17034 * t17085 + t17179) * t17103 - t16927) * t17127 + t17183);
t17295 = t17119 * t17129;
t16918 = t17104 * t17295 + t17294;
t17342 = t17103 * t17129;
t16740 = -t16955 * (t16918 * t17118 + t17127 * t17342) + t16951 * t17163;
t17395 = t16737 * t16740;
t16741 = t16955 * (t16918 * t17127 - t17118 * t17342) + t16951 * t16870;
t17394 = t16737 * t16741;
t16917 = t17104 * t17283 - t17297;
t16922 = t17104 * t17294 + t17295;
t16788 = t16917 * t16955 - t16922 * t16951;
t17393 = t16737 * t16788;
t16789 = -t16913 * t16951 + t16918 * t16955;
t17392 = t16737 * t16789;
t16796 = -t17103 * t17252 + (-pkin(3) * t17332 - t16974 * t17103) * t17127 - pkin(2) * t17332;
t17391 = t16737 * t16796;
t16849 = t16951 * t17129 + t16955 * t17120;
t17390 = t16737 * t16849;
t16852 = -t16951 * t17120 + t16955 * t17129;
t17389 = t16737 * t16852;
t16745 = 0.1e1 / (t16872 + t17103 * (t17112 * t17169 - t17194 + t17257));
t16984 = g(1) * t17111 - g(2) * t17114;
t16985 = g(1) * t17114 + g(2) * t17111;
t17064 = t17103 * g(3);
t16756 = (t17064 + (-t16984 * t17070 - t16985 * t17066) * t17104) * t17113 + (t16984 * t17066 - t16985 * t17070) * t17110;
t17388 = t16745 * t16756;
t16768 = -g(3) * t17355 + t16900 * t16949 + t16902 * t16953;
t17387 = t16745 * t16768;
t17357 = t17103 * t17110;
t16769 = g(3) * t17357 - t16899 * t16953 - t16901 * t16949;
t17386 = t16745 * t16769;
t16750 = 0.1e1 / (t16873 + t17103 * (t17124 * t17168 - t17193 + t17255));
t16989 = g(1) * t17117 - g(2) * t17126;
t16990 = g(1) * t17126 + g(2) * t17117;
t16759 = (t17064 + (-t16989 * t17071 - t16990 * t17067) * t17104) * t17125 + t17116 * (t16989 * t17067 - t16990 * t17071);
t17385 = t16750 * t16759;
t16770 = -g(3) * t17346 + t16915 * t16950 + t16921 * t16954;
t17384 = t16750 * t16770;
t17352 = t17103 * t17116;
t16771 = g(3) * t17352 - t16954 * t16912 - t16916 * t16950;
t17383 = t16750 * t16771;
t16751 = 0.1e1 / (t16874 + t17103 * (t17127 * t17167 - t17192 + t17253));
t16991 = g(1) * t17120 - g(2) * t17129;
t16992 = g(1) * t17129 + g(2) * t17120;
t16760 = (t17064 + (-t16991 * t17072 - t16992 * t17068) * t17104) * t17128 + t17119 * (t16991 * t17068 - t16992 * t17072);
t17382 = t16751 * t16760;
t16772 = -g(3) * t17343 + t16917 * t16951 + t16922 * t16955;
t17381 = t16751 * t16772;
t17350 = t17103 * t17119;
t16773 = g(3) * t17350 - t16955 * t16913 - t16918 * t16951;
t17380 = t16751 * t16773;
t16752 = 0.1e1 / (t16875 + t17103 * (t17130 * t17166 - t17191 + t17251));
t16993 = g(1) * t17123 - g(2) * t17132;
t16994 = g(1) * t17132 + g(2) * t17123;
t16761 = (t17064 + (-t16993 * t17073 - t16994 * t17069) * t17104) * t17131 + (t16993 * t17069 - t16994 * t17073) * t17122;
t17379 = t16752 * t16761;
t16774 = -g(3) * t17340 + t16919 * t16952 + t16923 * t16956;
t17378 = t16752 * t16774;
t17348 = t17103 * t17122;
t16775 = g(3) * t17348 - t16914 * t16956 - t16920 * t16952;
t17377 = t16752 * t16775;
t17376 = (pkin(1) + 0.2e1 * t17029) * t17019;
t17375 = (pkin(1) + 0.2e1 * t17046) * t17037;
t17374 = (pkin(1) + 0.2e1 * t17047) * t17040;
t17373 = (pkin(1) + 0.2e1 * t17048) * t17043;
t16897 = t17066 * t17114 + t17070 * t17111;
t16898 = -t17066 * t17111 + t17070 * t17114;
t17315 = t17110 * (t16897 * t17459 - t16898 * t17133);
t17314 = t17110 * (t16897 * t17133 + t16898 * t17459);
t16903 = t17067 * t17126 + t17071 * t17117;
t16904 = -t17067 * t17117 + t17071 * t17126;
t17306 = t17116 * (t16903 * t17459 - t16904 * t17133);
t17305 = t17116 * (t16903 * t17133 + t16904 * t17459);
t16905 = t17068 * t17129 + t17072 * t17120;
t16906 = -t17068 * t17120 + t17072 * t17129;
t17299 = t17119 * (t16905 * t17459 - t16906 * t17133);
t17298 = t17119 * (t16905 * t17133 + t16906 * t17459);
t16907 = t17069 * t17132 + t17073 * t17123;
t16908 = -t17069 * t17123 + t17073 * t17132;
t17292 = t17122 * (t16907 * t17459 - t16908 * t17133);
t17291 = t17122 * (t16907 * t17133 + t16908 * t17459);
t17245 = t16756 * t17440;
t17244 = t16760 * t17439;
t17243 = t16761 * t17438;
t17242 = t16759 * t17437;
t17241 = t16756 * t17428;
t17240 = t16759 * t17427;
t17239 = t16760 * t17426;
t17238 = t16761 * t17425;
t17237 = t17109 * t17388;
t17236 = t17112 * t17388;
t17235 = t17115 * t17385;
t17234 = t17124 * t17385;
t17233 = t17118 * t17382;
t17232 = t17127 * t17382;
t17231 = t17121 * t17379;
t17230 = t17130 * t17379;
t17229 = t16897 * t17358;
t17228 = t16898 * t17358;
t17227 = t16903 * t17353;
t17226 = t16904 * t17353;
t17225 = t16905 * t17351;
t17224 = t16906 * t17351;
t17223 = t16907 * t17349;
t17222 = t16908 * t17349;
t17220 = t17019 * t17325;
t17216 = t17037 * t17325;
t17215 = t17040 * t17325;
t17214 = t17043 * t17325;
t17203 = t17111 * t17372;
t17202 = t17117 * t17371;
t17201 = t17120 * t17370;
t17200 = t17123 * t17369;
t17189 = t17114 * t17220;
t17188 = t17126 * t17216;
t17187 = t17129 * t17215;
t17186 = t17132 * t17214;
t17020 = 0.2e1 * t17078 + pkin(1);
t17102 = t17133 ^ 2;
t17177 = pkin(1) * t17078 + t17020 * t17029 + t17093 * t17363 + t17102;
t17038 = 0.2e1 * t17083 + pkin(1);
t17176 = pkin(1) * t17083 + t17038 * t17046 + t17097 * t17363 + t17102;
t17041 = 0.2e1 * t17085 + pkin(1);
t17175 = pkin(1) * t17085 + t17041 * t17047 + t17099 * t17363 + t17102;
t17044 = 0.2e1 * t17087 + pkin(1);
t17174 = pkin(1) * t17087 + t17044 * t17048 + t17101 * t17363 + t17102;
t17153 = ((t17060 * t17076 - pkin(6)) * t17112 + t17109 * t16932) * t17359 - (t17110 * t17249 + t17272) * t17091 - t17110 * t17475;
t17152 = ((t17061 * t17079 - pkin(6)) * t17124 + t17115 * t16936) * t17359 - (t17116 * t17248 + t17271) * t17091 - t17116 * t17476;
t17151 = ((t17062 * t17080 - pkin(6)) * t17127 + t17118 * t16937) * t17359 - (t17119 * t17247 + t17270) * t17091 - t17119 * t17477;
t17150 = ((t17063 * t17081 - pkin(6)) * t17130 + t17121 * t16938) * t17359 - (t17122 * t17246 + t17269) * t17091 - t17122 * t17478;
t16962 = g(1) * t17090 + g(2) * t17089;
t16961 = g(1) * t17089 - g(2) * t17090;
t16879 = -t17035 * t17348 + t17043 * t17104;
t16878 = -t17033 * t17350 + t17040 * t17104;
t16877 = -t17031 * t17352 + t17037 * t17104;
t16876 = -t17017 * t17357 + t17019 * t17104;
t16843 = 0.2e1 * t17123 * t17214 + t17132 * t17369;
t16842 = 0.2e1 * t17120 * t17215 + t17129 * t17370;
t16841 = 0.2e1 * t17117 * t17216 + t17126 * t17371;
t16840 = 0.2e1 * t17111 * t17220 + t17114 * t17372;
t16833 = t16879 * t17132 + t17015 * t17123;
t16832 = t16878 * t17129 + t17014 * t17120;
t16831 = t16877 * t17126 + t17013 * t17117;
t16830 = -t16879 * t17123 + t17015 * t17132;
t16829 = -t16878 * t17120 + t17014 * t17129;
t16828 = -t16877 * t17117 + t17013 * t17126;
t16825 = t16876 * t17114 + t17009 * t17111;
t16824 = -t16876 * t17111 + t17009 * t17114;
t16823 = -t17035 * t17365 + t17329 * t17369;
t16822 = -t17033 * t17366 + t17331 * t17370;
t16821 = -t17031 * t17367 + t17333 * t17371;
t16820 = -t17017 * t17368 + t17336 * t17372;
t16803 = -t16907 * t17329 + t16908 * t17131;
t16802 = t16907 * t17131 + t16908 * t17329;
t16801 = -t16905 * t17331 + t16906 * t17128;
t16800 = t16905 * t17128 + t16906 * t17331;
t16799 = -t16903 * t17333 + t16904 * t17125;
t16798 = t16903 * t17125 + t16904 * t17333;
t16794 = -t16897 * t17336 + t16898 * t17113;
t16793 = t16897 * t17113 + t16898 * t17336;
t16785 = t16823 * t17132 + t17123 * t17373;
t16784 = t16822 * t17129 + t17120 * t17374;
t16783 = t16821 * t17126 + t17117 * t17375;
t16782 = -t16823 * t17123 + t17132 * t17373;
t16781 = -t16822 * t17120 + t17129 * t17374;
t16780 = -t16821 * t17117 + t17126 * t17375;
t16777 = t16820 * t17114 + t17111 * t17376;
t16776 = -t16820 * t17111 + t17114 * t17376;
t16691 = -t16803 * t17451 + (-pkin(3) * t17223 + (-pkin(2) * t16908 - t16907 * t17325) * t17131 + t17292) * t17130 - pkin(2) * t17223;
t16690 = -t16802 * t17451 + (pkin(3) * t17222 + (-pkin(2) * t16907 + t16908 * t17325) * t17131 - t17291) * t17130 + pkin(2) * t17222;
t16689 = -t16801 * t17452 + (-pkin(3) * t17225 + (-pkin(2) * t16906 - t16905 * t17325) * t17128 + t17299) * t17127 - pkin(2) * t17225;
t16688 = -t16800 * t17452 + (pkin(3) * t17224 + (-pkin(2) * t16905 + t16906 * t17325) * t17128 - t17298) * t17127 + pkin(2) * t17224;
t16687 = -t16799 * t17453 + (-pkin(3) * t17227 + (-pkin(2) * t16904 - t16903 * t17325) * t17125 + t17306) * t17124 - pkin(2) * t17227;
t16686 = -t16798 * t17453 + (pkin(3) * t17226 + (-pkin(2) * t16903 + t16904 * t17325) * t17125 - t17305) * t17124 + pkin(2) * t17226;
t16685 = -t16794 * t17454 + (-pkin(3) * t17229 + (-pkin(2) * t16898 - t16897 * t17325) * t17113 + t17315) * t17112 - pkin(2) * t17229;
t16684 = -t16793 * t17454 + (pkin(3) * t17228 + (-pkin(2) * t16897 + t16898 * t17325) * t17113 - t17314) * t17112 + pkin(2) * t17228;
t16683 = t16907 * t17158 + t16908 * t17150;
t16682 = -t16907 * t17150 + t16908 * t17158;
t16681 = t16905 * t17159 + t16906 * t17151;
t16680 = -t16905 * t17151 + t16906 * t17159;
t16679 = t16903 * t17160 + t16904 * t17152;
t16678 = -t16903 * t17152 + t16904 * t17160;
t16677 = t16897 * t17161 + t16898 * t17153;
t16676 = -t16897 * t17153 + t16898 * t17161;
t16675 = ((-0.2e1 * t17186 + t17200) * t17073 + t16843 * t17069) * t17101 + (t16782 * t17069 + t16785 * t17073) * t17131 + t17133 * (t16830 * t17069 + t16833 * t17073);
t16674 = ((-0.2e1 * t17187 + t17201) * t17072 + t16842 * t17068) * t17099 + (t16781 * t17068 + t16784 * t17072) * t17128 + t17133 * (t16829 * t17068 + t16832 * t17072);
t16673 = ((-0.2e1 * t17188 + t17202) * t17071 + t16841 * t17067) * t17097 + (t16780 * t17067 + t16783 * t17071) * t17125 + t17133 * (t16828 * t17067 + t16831 * t17071);
t16672 = (t16843 * t17073 + 0.2e1 * (t17186 - t17200 / 0.2e1) * t17069) * t17101 + (t16782 * t17073 - t16785 * t17069) * t17131 + (t16830 * t17073 - t16833 * t17069) * t17133;
t16671 = (t16842 * t17072 + 0.2e1 * (t17187 - t17201 / 0.2e1) * t17068) * t17099 + (t16781 * t17072 - t16784 * t17068) * t17128 + (t16829 * t17072 - t16832 * t17068) * t17133;
t16670 = (t16841 * t17071 + 0.2e1 * (t17188 - t17202 / 0.2e1) * t17067) * t17097 + (t16780 * t17071 - t16783 * t17067) * t17125 + (t16828 * t17071 - t16831 * t17067) * t17133;
t16669 = ((-0.2e1 * t17189 + t17203) * t17070 + t16840 * t17066) * t17093 + (t16776 * t17066 + t16777 * t17070) * t17113 + t17133 * (t16824 * t17066 + t16825 * t17070);
t16668 = (t16840 * t17070 + 0.2e1 * (t17189 - t17203 / 0.2e1) * t17066) * t17093 + (t16776 * t17070 - t16777 * t17066) * t17113 + (t16824 * t17070 - t16825 * t17066) * t17133;
t16659 = (-(t17089 * t17142 + t17090 * t17138) * (t17174 * t16908 + (t16803 * t17360 + (t16908 * t17044 - 0.2e1 * t17292) * t17086) * t17131 + t17467 * t16907) + (t17174 * t16907 + (t16802 * t17360 + (t16907 * t17044 + 0.2e1 * t17291) * t17086) * t17131 - t17467 * t16908) * (-t17089 * t17138 + t17090 * t17142)) * t17494 * t17338;
t16658 = (-(t17089 * t17141 + t17090 * t17137) * (t17175 * t16906 + (t16801 * t17361 + (t16906 * t17041 - 0.2e1 * t17299) * t17084) * t17128 + t17468 * t16905) + (t17175 * t16905 + (t16800 * t17361 + (t16905 * t17041 + 0.2e1 * t17298) * t17084) * t17128 - t17468 * t16906) * (-t17089 * t17137 + t17090 * t17141)) * t17493 * t17338;
t16657 = (-(t17176 * t16904 + (t16799 * t17362 + (t16904 * t17038 - 0.2e1 * t17306) * t17082) * t17125 + t17469 * t16903) * (t17089 * t17140 + t17090 * t17136) + (t17176 * t16903 + (t16798 * t17362 + (t16903 * t17038 + 0.2e1 * t17305) * t17082) * t17125 - t17469 * t16904) * (-t17089 * t17136 + t17090 * t17140)) * t17492 * t17338;
t16656 = (-(t17089 * t17139 + t17090 * t17135) * (t17177 * t16898 + (t16794 * t17364 + (t16898 * t17020 - 0.2e1 * t17315) * t17077) * t17113 + t17470 * t16897) + (-t17089 * t17135 + t17090 * t17139) * (t17177 * t16897 + (t16793 * t17364 + (t16897 * t17020 + 0.2e1 * t17314) * t17077) * t17113 - t17470 * t16898)) * t17491 * t17338;
t1 = [(t16685 * t17411 + t16687 * t17397 + t16689 * t17390 + t16691 * t17404) * MDP(2) + (t16685 * t17410 + t16687 * t17396 + t16689 * t17389 + t16691 * t17403) * MDP(3) + (t16676 * t17387 + t16678 * t17384 + t16680 * t17381 + t16682 * t17378 + t16685 * t17413 + t16687 * t17399 + t16689 * t17392 + t16691 * t17406) * MDP(9) + (t16676 * t17386 + t16678 * t17383 + t16680 * t17380 + t16682 * t17377 + t16685 * t17414 + t16687 * t17400 + t16689 * t17393 + t16691 * t17407) * MDP(10) + (-t16676 * t17236 - t16678 * t17234 - t16680 * t17232 - t16682 * t17230 + t16685 * t17415 + t16687 * t17401 + t16689 * t17394 + t16691 * t17408) * MDP(16) + (t16676 * t17237 + t16678 * t17235 + t16680 * t17233 + t16682 * t17231 + t16685 * t17416 + t16687 * t17402 + t16689 * t17395 + t16691 * t17409) * MDP(17) + (-t16961 * t17089 - t16962 * t17090) * MDP(21) + ((-t16668 * t17423 - t16670 * t17421 - t16671 * t17419 - t16672 * t17417) * MDP(16) + (-t16668 * t17424 - t16670 * t17422 - t16671 * t17420 - t16672 * t17418) * MDP(17)) * t17338; (t16684 * t17411 + t16686 * t17397 + t16688 * t17390 + t16690 * t17404) * MDP(2) + (t16684 * t17410 + t16686 * t17396 + t16688 * t17389 + t16690 * t17403) * MDP(3) + (t16677 * t17387 + t16679 * t17384 + t16681 * t17381 + t16683 * t17378 + t16684 * t17413 + t16686 * t17399 + t16688 * t17392 + t16690 * t17406) * MDP(9) + (t16677 * t17386 + t16679 * t17383 + t16681 * t17380 + t16683 * t17377 + t16684 * t17414 + t16686 * t17400 + t16688 * t17393 + t16690 * t17407) * MDP(10) + (-t16677 * t17236 - t16679 * t17234 - t16681 * t17232 - t16683 * t17230 + t16684 * t17415 + t16686 * t17401 + t16688 * t17394 + t16690 * t17408) * MDP(16) + (t16677 * t17237 + t16679 * t17235 + t16681 * t17233 + t16683 * t17231 + t16684 * t17416 + t16686 * t17402 + t16688 * t17395 + t16690 * t17409) * MDP(17) + (t16961 * t17090 - t16962 * t17089) * MDP(21) + ((-t16669 * t17423 - t16673 * t17421 - t16674 * t17419 - t16675 * t17417) * MDP(16) + (-t16669 * t17424 - t16673 * t17422 - t16674 * t17420 - t16675 * t17418) * MDP(17)) * t17338; (t16792 * t17411 + t16795 * t17397 + t16796 * t17390 + t16797 * t17404) * MDP(2) + (t16792 * t17410 + t16795 * t17396 + t16796 * t17389 + t16797 * t17403) * MDP(3) + (-t16768 * t17428 - t16770 * t17427 - t16772 * t17426 - t16774 * t17425 + t16779 * t17412 + t16787 * t17398 + t16789 * t17391 + t16791 * t17405) * MDP(9) + (-t16769 * t17428 - t16771 * t17427 - t16773 * t17426 - t16775 * t17425 + t16778 * t17412 + t16786 * t17398 + t16788 * t17391 + t16790 * t17405) * MDP(10) + (t16728 * t17412 + t16739 * t17398 + t16741 * t17391 + t16743 * t17405 + t17112 * t17241 + t17124 * t17240 + t17127 * t17239 + t17130 * t17238) * MDP(16) + (t16727 * t17412 + t16738 * t17398 + t16740 * t17391 + t16742 * t17405 - t17109 * t17241 - t17115 * t17240 - t17118 * t17239 - t17121 * t17238) * MDP(17) - g(3) * MDP(21) + ((t16701 * t17432 + t16703 * t17431 + t16705 * t17430 + t16707 * t17429) * MDP(16) + (t16700 * t17432 + t16702 * t17431 + t16704 * t17430 + t16706 * t17429) * MDP(17)) * t17144; (t16845 * t17436 + t16848 * t17435 + t16849 * t17434 + t16850 * t17433) * MDP(2) + (t16846 * t17436 + t16851 * t17435 + t16852 * t17434 + t16853 * t17433) * MDP(3) + (t16768 * t17440 + t16770 * t17437 + t16772 * t17439 + t16774 * t17438 + t16779 * t17436 + t16787 * t17435 + t16789 * t17434 + t16791 * t17433) * MDP(9) + (t16769 * t17440 + t16771 * t17437 + t16773 * t17439 + t16775 * t17438 + t16778 * t17436 + t16786 * t17435 + t16788 * t17434 + t16790 * t17433) * MDP(10) + (t16656 * t16701 + t16657 * t16703 + t16658 * t16705 + t16659 * t16707 + t16728 * t17436 + t16739 * t17435 + t16741 * t17434 + t16743 * t17433 - t17112 * t17245 - t17124 * t17242 - t17127 * t17244 - t17130 * t17243) * MDP(16) + (t16656 * t16700 + t16657 * t16702 + t16658 * t16704 + t16659 * t16706 + t16727 * t17436 + t16738 * t17435 + t16740 * t17434 + t16742 * t17433 + t17109 * t17245 + t17115 * t17242 + t17118 * t17244 + t17121 * t17243) * MDP(17) + t16961 * MDP(19) + t16962 * MDP(20);];
taugX  = t1;
