% Calculate Gravitation load for parallel robot
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [4x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 13:58:48
% EndTime: 2020-08-07 13:58:59
% DurationCPUTime: 10.55s
% Computational Cost: add. (4803->628), mult. (7889->1025), div. (80->21), fcn. (6142->36), ass. (0->394)
t5225 = m(2) + m(3);
t5008 = legFrame(1,3);
t4967 = sin(t5008);
t4971 = cos(t5008);
t4890 = -t4967 * g(1) + t4971 * g(2);
t4894 = t4971 * g(1) + t4967 * g(2);
t5023 = sin(qJ(1,1));
t5032 = cos(qJ(1,1));
t4819 = t5023 * t4890 + t5032 * t4894;
t5022 = sin(qJ(2,1));
t5031 = cos(qJ(2,1));
t5004 = cos(pkin(4));
t5076 = t4890 * t5032 - t4894 * t5023;
t5003 = sin(pkin(4));
t5218 = g(3) * t5003;
t5080 = t5076 * t5004 + t5218;
t5052 = t5031 * t4819 + t5080 * t5022;
t5007 = legFrame(2,3);
t4966 = sin(t5007);
t4970 = cos(t5007);
t4889 = -t4966 * g(1) + t4970 * g(2);
t4893 = t4970 * g(1) + t4966 * g(2);
t5020 = sin(qJ(1,2));
t5029 = cos(qJ(1,2));
t4818 = t5020 * t4889 + t5029 * t4893;
t5019 = sin(qJ(2,2));
t5028 = cos(qJ(2,2));
t5077 = t4889 * t5029 - t4893 * t5020;
t5081 = t5077 * t5004 + t5218;
t5053 = t5028 * t4818 + t5081 * t5019;
t5006 = legFrame(3,3);
t4965 = sin(t5006);
t4969 = cos(t5006);
t4888 = -t4965 * g(1) + t4969 * g(2);
t4892 = t4969 * g(1) + t4965 * g(2);
t5017 = sin(qJ(1,3));
t5026 = cos(qJ(1,3));
t4817 = t5017 * t4888 + t5026 * t4892;
t5016 = sin(qJ(2,3));
t5025 = cos(qJ(2,3));
t5078 = t4888 * t5026 - t4892 * t5017;
t5082 = t5078 * t5004 + t5218;
t5054 = t5025 * t4817 + t5082 * t5016;
t5005 = legFrame(4,3);
t4964 = sin(t5005);
t4968 = cos(t5005);
t4887 = -t4964 * g(1) + t4968 * g(2);
t4891 = t4968 * g(1) + t4964 * g(2);
t5011 = sin(qJ(1,4));
t5014 = cos(qJ(1,4));
t4815 = t5011 * t4887 + t5014 * t4891;
t5010 = sin(qJ(2,4));
t5013 = cos(qJ(2,4));
t5079 = t4887 * t5014 - t4891 * t5011;
t5083 = t5079 * t5004 + t5218;
t5055 = t5013 * t4815 + t5083 * t5010;
t5217 = g(3) * t5004;
t5012 = cos(qJ(3,4));
t4975 = t5012 * pkin(3);
t4931 = t4975 + pkin(2);
t5024 = cos(qJ(3,3));
t4983 = t5024 * pkin(3);
t4941 = t4983 + pkin(2);
t5027 = cos(qJ(3,2));
t4985 = t5027 * pkin(3);
t4943 = t4985 + pkin(2);
t5030 = cos(qJ(3,1));
t4987 = t5030 * pkin(3);
t4945 = t4987 + pkin(2);
t5034 = pkin(8) + pkin(7);
t5220 = pkin(1) * t5004;
t5219 = pkin(2) * t5004;
t4993 = t5012 ^ 2;
t5216 = t4993 * pkin(3);
t4997 = t5024 ^ 2;
t5215 = t4997 * pkin(3);
t4999 = t5027 ^ 2;
t5214 = t4999 * pkin(3);
t5001 = t5030 ^ 2;
t5213 = t5001 * pkin(3);
t5009 = sin(qJ(3,4));
t5212 = t5009 * pkin(2);
t4974 = t5009 * pkin(3);
t4976 = t5013 * pkin(2);
t5015 = sin(qJ(3,3));
t5211 = t5015 * pkin(2);
t4980 = t5015 * pkin(3);
t5018 = sin(qJ(3,2));
t5210 = t5018 * pkin(2);
t4981 = t5018 * pkin(3);
t5021 = sin(qJ(3,1));
t5209 = t5021 * pkin(2);
t4982 = t5021 * pkin(3);
t4984 = t5025 * pkin(2);
t4986 = t5028 * pkin(2);
t4988 = t5031 * pkin(2);
t4992 = t5004 ^ 2;
t5208 = (t4992 - 0.1e1) * pkin(6);
t5207 = mrSges(3,2) * t5003;
t5206 = -0.2e1 * pkin(2) * pkin(3);
t5205 = -m(3) * pkin(2) - mrSges(2,1);
t4996 = pkin(2) - t5034;
t4995 = pkin(2) + t5034;
t4934 = t5034 * t5013;
t4900 = -t5010 * pkin(2) + t4934;
t4859 = t4900 * t5220;
t4930 = t4974 - pkin(6);
t4882 = -mrSges(3,1) * t5012 + mrSges(3,2) * t5009 + t5205;
t4925 = t5225 * pkin(1) + mrSges(1,1);
t4953 = pkin(7) * m(3) - mrSges(2,2) + mrSges(3,3);
t5067 = t4882 * t5013 - t4953 * t5010 - t4925;
t5121 = t5225 * pkin(6) + mrSges(2,3);
t5071 = (-t5010 * t4882 - t4953 * t5013) * t5004 - (mrSges(3,1) * t5009 + mrSges(3,2) * t5012 + t5121) * t5003 + mrSges(1,2);
t4933 = t5034 * t5010;
t5087 = pkin(1) * t4974 - pkin(6) * t4933;
t4899 = t4976 + t4933;
t4895 = pkin(1) + t4899;
t5125 = t4895 * t5212;
t5164 = t5004 * t5010;
t5129 = pkin(1) * t5164;
t5176 = t5003 * t5013;
t5091 = -(pkin(6) * t5176 + t5129) * t5216 + t5003 * t5125;
t5204 = ((-t5067 * t5011 + t5071 * t5014) * t4891 + (t5071 * t5011 + t5067 * t5014) * t4887) / (((t4930 * t4976 + t5087) * t5003 + t4859) * t5012 + t5091);
t4950 = t5034 * t5025;
t4904 = -t5016 * pkin(2) + t4950;
t4864 = t4904 * t5220;
t4936 = t4980 - pkin(6);
t4884 = -mrSges(3,1) * t5024 + mrSges(3,2) * t5015 + t5205;
t5066 = t4884 * t5025 - t4953 * t5016 - t4925;
t5070 = (-t5016 * t4884 - t4953 * t5025) * t5004 - (mrSges(3,1) * t5015 + mrSges(3,2) * t5024 + t5121) * t5003 + mrSges(1,2);
t4947 = t5034 * t5016;
t5086 = pkin(1) * t4980 - pkin(6) * t4947;
t4901 = t4984 + t4947;
t4896 = pkin(1) + t4901;
t5124 = t4896 * t5211;
t5161 = t5004 * t5016;
t5128 = pkin(1) * t5161;
t5169 = t5003 * t5025;
t5090 = -(pkin(6) * t5169 + t5128) * t5215 + t5003 * t5124;
t5203 = ((-t5066 * t5017 + t5070 * t5026) * t4892 + (t5070 * t5017 + t5066 * t5026) * t4888) / (((t4936 * t4984 + t5086) * t5003 + t4864) * t5024 + t5090);
t4951 = t5034 * t5028;
t4905 = -t5019 * pkin(2) + t4951;
t4865 = t4905 * t5220;
t4938 = t4981 - pkin(6);
t4885 = -mrSges(3,1) * t5027 + mrSges(3,2) * t5018 + t5205;
t5065 = t4885 * t5028 - t4953 * t5019 - t4925;
t5069 = (-t5019 * t4885 - t4953 * t5028) * t5004 - (mrSges(3,1) * t5018 + mrSges(3,2) * t5027 + t5121) * t5003 + mrSges(1,2);
t4948 = t5034 * t5019;
t5085 = pkin(1) * t4981 - pkin(6) * t4948;
t4902 = t4986 + t4948;
t4897 = pkin(1) + t4902;
t5123 = t4897 * t5210;
t5159 = t5004 * t5019;
t5127 = pkin(1) * t5159;
t5168 = t5003 * t5028;
t5089 = -(pkin(6) * t5168 + t5127) * t5214 + t5003 * t5123;
t5202 = ((-t5065 * t5020 + t5069 * t5029) * t4893 + (t5069 * t5020 + t5065 * t5029) * t4889) / (((t4938 * t4986 + t5085) * t5003 + t4865) * t5027 + t5089);
t4952 = t5034 * t5031;
t4906 = -t5022 * pkin(2) + t4952;
t4866 = t4906 * t5220;
t4940 = t4982 - pkin(6);
t4886 = -mrSges(3,1) * t5030 + mrSges(3,2) * t5021 + t5205;
t5064 = t4886 * t5031 - t4953 * t5022 - t4925;
t5068 = (-t5022 * t4886 - t4953 * t5031) * t5004 - (mrSges(3,1) * t5021 + mrSges(3,2) * t5030 + t5121) * t5003 + mrSges(1,2);
t4949 = t5034 * t5022;
t5084 = pkin(1) * t4982 - pkin(6) * t4949;
t4903 = t4988 + t4949;
t4898 = pkin(1) + t4903;
t5122 = t4898 * t5209;
t5157 = t5004 * t5022;
t5126 = pkin(1) * t5157;
t5167 = t5003 * t5031;
t5088 = -(pkin(6) * t5167 + t5126) * t5213 + t5003 * t5122;
t5201 = ((-t5064 * t5023 + t5068 * t5032) * t4894 + (t5068 * t5023 + t5064 * t5032) * t4890) / (((t4940 * t4988 + t5084) * t5003 + t4866) * t5030 + t5088);
t5144 = mrSges(3,2) * t5217;
t4754 = ((t5079 * t5003 - t5217) * mrSges(3,1) + t5055 * mrSges(3,2)) * t5012 + (t5055 * mrSges(3,1) - t5079 * t5207 + t5144) * t5009;
t4883 = -t5003 * pkin(6) * t5034 - pkin(1) * t5219;
t5153 = t5004 * t5034;
t4923 = pkin(1) * t5153;
t5051 = pkin(2) ^ 2;
t5134 = pkin(6) * t5216;
t5135 = pkin(3) * t5220;
t5152 = t5012 * t5013;
t5200 = t4754 / (t4923 * t5152 + (t4883 * t5012 - t4993 * t5135) * t5010 + ((pkin(2) * t4930 * t5012 - t5134) * t5013 + (pkin(1) * t4931 + pkin(2) * t4933 + t5051 * t5013) * t5009) * t5003);
t4755 = ((t5078 * t5003 - t5217) * mrSges(3,1) + t5054 * mrSges(3,2)) * t5024 + (t5054 * mrSges(3,1) - t5078 * t5207 + t5144) * t5015;
t5133 = pkin(6) * t5215;
t5150 = t5024 * t5025;
t5199 = t4755 / (t4923 * t5150 + (t4883 * t5024 - t4997 * t5135) * t5016 + ((pkin(2) * t4936 * t5024 - t5133) * t5025 + (pkin(1) * t4941 + pkin(2) * t4947 + t5051 * t5025) * t5015) * t5003);
t4756 = ((t5077 * t5003 - t5217) * mrSges(3,1) + t5053 * mrSges(3,2)) * t5027 + (t5053 * mrSges(3,1) - t5077 * t5207 + t5144) * t5018;
t5132 = pkin(6) * t5214;
t5148 = t5027 * t5028;
t5198 = t4756 / (t4923 * t5148 + (t4883 * t5027 - t4999 * t5135) * t5019 + ((pkin(2) * t4938 * t5027 - t5132) * t5028 + (pkin(1) * t4943 + pkin(2) * t4948 + t5051 * t5028) * t5018) * t5003);
t4757 = ((t5076 * t5003 - t5217) * mrSges(3,1) + t5052 * mrSges(3,2)) * t5030 + (t5052 * mrSges(3,1) - t5076 * t5207 + t5144) * t5021;
t5131 = pkin(6) * t5213;
t5146 = t5030 * t5031;
t5197 = t4757 / (t4923 * t5146 + (t4883 * t5030 - t5001 * t5135) * t5022 + ((pkin(2) * t4940 * t5030 - t5131) * t5031 + (pkin(1) * t4945 + pkin(2) * t4949 + t5051 * t5031) * t5021) * t5003);
t4760 = -t5055 * t4953 + (-t4815 * t5010 + t5083 * t5013) * t4882;
t4932 = t4976 + pkin(1);
t5075 = -t4899 * pkin(6) + t4932 * t4974;
t5163 = t5004 * t5012;
t5196 = t4760 / (pkin(1) * (-t4931 * t5010 + t4934) * t5163 + t5003 * (t5075 * t5012 - t5013 * t5134 + t5125));
t4767 = -t5054 * t4953 + (-t4817 * t5016 + t5082 * t5025) * t4884;
t4942 = t4984 + pkin(1);
t5074 = -t4901 * pkin(6) + t4942 * t4980;
t5156 = t5004 * t5024;
t5195 = t4767 / (pkin(1) * (-t4941 * t5016 + t4950) * t5156 + t5003 * (t5074 * t5024 - t5025 * t5133 + t5124));
t4768 = -t5053 * t4953 + (-t4818 * t5019 + t5081 * t5028) * t4885;
t4944 = t4986 + pkin(1);
t5073 = -t4902 * pkin(6) + t4944 * t4981;
t5155 = t5004 * t5027;
t5194 = t4768 / (pkin(1) * (-t4943 * t5019 + t4951) * t5155 + t5003 * (t5073 * t5027 - t5028 * t5132 + t5123));
t4769 = -t5052 * t4953 + (-t4819 * t5022 + t5080 * t5031) * t4886;
t4946 = t4988 + pkin(1);
t5072 = -t4903 * pkin(6) + t4946 * t4982;
t5154 = t5004 * t5030;
t5193 = t4769 / (pkin(1) * (-t4945 * t5022 + t4952) * t5154 + t5003 * (t5072 * t5030 - t5031 * t5131 + t5122));
t5192 = (pkin(1) + 0.2e1 * t4933) * t4931;
t5191 = (pkin(1) + 0.2e1 * t4947) * t4941;
t5190 = (pkin(1) + 0.2e1 * t4948) * t4943;
t5189 = (pkin(1) + 0.2e1 * t4949) * t4945;
t5188 = (t4975 + t4995) * (t4975 + t4996);
t5187 = (t4983 + t4995) * (t4983 + t4996);
t5186 = (t4985 + t4995) * (t4985 + t4996);
t5185 = (t4987 + t4995) * (t4987 + t4996);
t5184 = t4931 * t5003;
t5183 = t4941 * t5003;
t5182 = t4943 * t5003;
t5181 = t4945 * t5003;
t5180 = t4995 * t4996;
t5179 = t5003 * t5004;
t5178 = t5003 * t5009;
t5177 = t5003 * t5010;
t5175 = t5003 * t5015;
t5174 = t5003 * t5016;
t5173 = t5003 * t5018;
t5172 = t5003 * t5019;
t5171 = t5003 * t5021;
t5170 = t5003 * t5022;
t5050 = 0.1e1 / pkin(3);
t5166 = t5003 * t5050;
t5165 = t5004 * t5009;
t5162 = t5004 * t5015;
t5160 = t5004 * t5018;
t5158 = t5004 * t5021;
t4850 = t5014 * t4964 + t4968 * t5011;
t5143 = t5034 * t4850;
t4851 = -t4964 * t5011 + t5014 * t4968;
t5142 = t5034 * t4851;
t4852 = t5026 * t4965 + t4969 * t5017;
t5141 = t5034 * t4852;
t4853 = -t4965 * t5017 + t5026 * t4969;
t5140 = t5034 * t4853;
t4854 = t5029 * t4966 + t4970 * t5020;
t5139 = t5034 * t4854;
t4855 = -t4966 * t5020 + t5029 * t4970;
t5138 = t5034 * t4855;
t4856 = t5032 * t4967 + t4971 * t5023;
t5137 = t5034 * t4856;
t4857 = -t4967 * t5023 + t5032 * t4971;
t5136 = t5034 * t4857;
t5130 = -0.2e1 * (t5004 + 0.1e1) * (t5004 - 0.1e1);
t5120 = t5009 * pkin(6) + pkin(3);
t5119 = t5015 * pkin(6) + pkin(3);
t5118 = t5018 * pkin(6) + pkin(3);
t5117 = t5021 * pkin(6) + pkin(3);
t5116 = t4850 * t5178;
t5115 = t4851 * t5178;
t5114 = t4852 * t5175;
t5113 = t4853 * t5175;
t5112 = t4855 * t5173;
t5111 = t4856 * t5171;
t5110 = t4931 * t5153;
t5109 = t4941 * t5153;
t5108 = t4943 * t5153;
t5107 = t4945 * t5153;
t5106 = t5003 * t5153;
t5105 = t5003 * t5164;
t5104 = t5003 * t5161;
t5103 = t5003 * t5159;
t5102 = t5003 * t5157;
t5101 = t5011 * t5188;
t5100 = t5017 * t5187;
t5099 = t4854 * t5173;
t5098 = t5020 * t5186;
t5097 = t4857 * t5171;
t5096 = t5023 * t5185;
t5095 = t5014 * t5110;
t5094 = t5026 * t5109;
t5093 = t5029 * t5108;
t5092 = t5032 * t5107;
t5063 = -(t4932 * t5010 + t5034 + (t5010 * t4975 - t4934) * t5013) * t5178 + (pkin(3) * t5152 + t4895) * t5163;
t5062 = -(t4942 * t5016 + t5034 + (t5016 * t4983 - t4950) * t5025) * t5175 + (pkin(3) * t5150 + t4896) * t5156;
t5061 = -(t4944 * t5019 + t5034 + (t5019 * t4985 - t4951) * t5028) * t5173 + (pkin(3) * t5148 + t4897) * t5155;
t5060 = -(t4946 * t5022 + t5034 + (t5022 * t4987 - t4952) * t5031) * t5171 + (pkin(3) * t5146 + t4898) * t5154;
t4994 = t5013 ^ 2;
t4870 = t4994 * pkin(2) + t5010 * t4934 - pkin(2);
t4958 = t4994 - 0.2e1;
t5059 = ((t4958 * t4974 - pkin(6)) * t5012 + t5009 * t4870) * t5179 - (t4900 * t5012 + (t5120 - 0.2e1 * t5216) * t5010) * t4992 - t5010 * (-t5120 + t5216);
t4998 = t5025 ^ 2;
t4871 = t4998 * pkin(2) + t5016 * t4950 - pkin(2);
t4959 = t4998 - 0.2e1;
t5058 = ((t4959 * t4980 - pkin(6)) * t5024 + t5015 * t4871) * t5179 - (t4904 * t5024 + (t5119 - 0.2e1 * t5215) * t5016) * t4992 - t5016 * (-t5119 + t5215);
t5000 = t5028 ^ 2;
t4872 = t5000 * pkin(2) + t5019 * t4951 - pkin(2);
t4960 = t5000 - 0.2e1;
t5057 = ((t4960 * t4981 - pkin(6)) * t5027 + t5018 * t4872) * t5179 - (t4905 * t5027 + (t5118 - 0.2e1 * t5214) * t5019) * t4992 - t5019 * (-t5118 + t5214);
t5002 = t5031 ^ 2;
t4873 = t5002 * pkin(2) + t5022 * t4952 - pkin(2);
t4961 = t5002 - 0.2e1;
t5056 = ((t4961 * t4982 - pkin(6)) * t5030 + t5021 * t4873) * t5179 - (t4906 * t5030 + (t5117 - 0.2e1 * t5213) * t5022) * t4992 - t5022 * (-t5117 + t5213);
t5049 = pkin(3) ^ 2;
t5048 = koppelP(1,1);
t5047 = koppelP(2,1);
t5046 = koppelP(3,1);
t5045 = koppelP(4,1);
t5044 = koppelP(1,2);
t5043 = koppelP(2,2);
t5042 = koppelP(3,2);
t5041 = koppelP(4,2);
t5040 = mrSges(4,1);
t5039 = mrSges(4,2);
t5038 = xP(4);
t4991 = cos(t5038);
t4990 = sin(t5038);
t4989 = pkin(1) * t5034;
t4939 = t4982 + pkin(6);
t4937 = t4981 + pkin(6);
t4935 = t4980 + pkin(6);
t4929 = t4974 + pkin(6);
t4928 = pkin(1) * t5022 + t5034;
t4927 = pkin(1) * t5019 + t5034;
t4926 = pkin(1) * t5016 + t5034;
t4924 = pkin(1) * t5010 + t5034;
t4881 = -t4990 * t5044 + t4991 * t5048;
t4880 = -t4990 * t5043 + t4991 * t5047;
t4879 = -t4990 * t5042 + t4991 * t5046;
t4878 = -t4990 * t5041 + t4991 * t5045;
t4877 = -t4990 * t5048 - t4991 * t5044;
t4876 = -t4990 * t5047 - t4991 * t5043;
t4875 = -t4990 * t5046 - t4991 * t5042;
t4874 = -t4990 * t5045 - t4991 * t5041;
t4841 = -t4939 * t5170 + t5004 * t4945;
t4840 = -t4937 * t5172 + t5004 * t4943;
t4839 = -t4935 * t5174 + t5004 * t4941;
t4838 = -t4929 * t5177 + t5004 * t4931;
t4813 = 0.2e1 * t5023 * t5107 + t5032 * t5185;
t4812 = 0.2e1 * t5020 * t5108 + t5029 * t5186;
t4811 = 0.2e1 * t5017 * t5109 + t5026 * t5187;
t4810 = 0.2e1 * t5011 * t5110 + t5014 * t5188;
t4809 = t4841 * t5032 + t5023 * t4928;
t4808 = t4840 * t5029 + t5020 * t4927;
t4807 = t4839 * t5026 + t5017 * t4926;
t4806 = -t4841 * t5023 + t4928 * t5032;
t4805 = -t4840 * t5020 + t4927 * t5029;
t4804 = -t4839 * t5017 + t4926 * t5026;
t4803 = t4838 * t5014 + t5011 * t4924;
t4802 = -t4838 * t5011 + t4924 * t5014;
t4801 = -t4939 * t5181 + t5157 * t5185;
t4800 = -t4937 * t5182 + t5159 * t5186;
t4799 = -t4935 * t5183 + t5161 * t5187;
t4798 = -t4929 * t5184 + t5164 * t5188;
t4797 = t4801 * t5032 + t5023 * t5189;
t4796 = t4800 * t5029 + t5020 * t5190;
t4795 = t4799 * t5026 + t5017 * t5191;
t4794 = -t4801 * t5023 + t5032 * t5189;
t4793 = -t4800 * t5020 + t5029 * t5190;
t4792 = -t4799 * t5017 + t5026 * t5191;
t4791 = t4798 * t5014 + t5011 * t5192;
t4790 = -t4798 * t5011 + t5014 * t5192;
t4777 = -(-t4856 * t5157 + t4857 * t5031) * t5213 + (-pkin(3) * t5111 + (-pkin(2) * t4857 - t5004 * t5137) * t5031 + t5022 * (t4856 * t5219 - t5136)) * t5030 - pkin(2) * t5111;
t4776 = -(t4856 * t5031 + t4857 * t5157) * t5213 + (pkin(3) * t5097 + (-pkin(2) * t4856 + t5004 * t5136) * t5031 - t5022 * (t4857 * t5219 + t5137)) * t5030 + pkin(2) * t5097;
t4775 = -(-t4854 * t5159 + t4855 * t5028) * t5214 + (-pkin(3) * t5099 + (-pkin(2) * t4855 - t5004 * t5139) * t5028 + t5019 * (t4854 * t5219 - t5138)) * t5027 - pkin(2) * t5099;
t4774 = -(t4854 * t5028 + t4855 * t5159) * t5214 + (pkin(3) * t5112 + (-pkin(2) * t4854 + t5004 * t5138) * t5028 - t5019 * (t4855 * t5219 + t5139)) * t5027 + pkin(2) * t5112;
t4773 = -(-t4852 * t5161 + t4853 * t5025) * t5215 + (-pkin(3) * t5114 + (-pkin(2) * t4853 - t5004 * t5141) * t5025 + t5016 * (t4852 * t5219 - t5140)) * t5024 - pkin(2) * t5114;
t4772 = -(t4852 * t5025 + t4853 * t5161) * t5215 + (pkin(3) * t5113 + (-pkin(2) * t4852 + t5004 * t5140) * t5025 - t5016 * (t4853 * t5219 + t5141)) * t5024 + pkin(2) * t5113;
t4771 = -(-t4850 * t5164 + t4851 * t5013) * t5216 + (-pkin(3) * t5116 + (-pkin(2) * t4851 - t5004 * t5143) * t5013 + t5010 * (t4850 * t5219 - t5142)) * t5012 - pkin(2) * t5116;
t4770 = -(t4850 * t5013 + t4851 * t5164) * t5216 + (pkin(3) * t5115 + (-pkin(2) * t4850 + t5004 * t5142) * t5013 - t5010 * (t4851 * t5219 + t5143)) * t5012 + pkin(2) * t5115;
t4766 = t5060 * t4856 + t5056 * t4857;
t4765 = -t5056 * t4856 + t5060 * t4857;
t4764 = t5061 * t4854 + t5057 * t4855;
t4763 = -t5057 * t4854 + t5061 * t4855;
t4762 = t5062 * t4852 + t5058 * t4853;
t4761 = -t5058 * t4852 + t5062 * t4853;
t4759 = t5063 * t4850 + t5059 * t4851;
t4758 = -t5059 * t4850 + t5063 * t4851;
t4753 = ((-0.2e1 * t5092 + t5096) * t4971 + t4813 * t4967) * t5002 + (t4794 * t4967 + t4797 * t4971) * t5031 + t5034 * (t4967 * t4806 + t4809 * t4971);
t4752 = ((-0.2e1 * t5093 + t5098) * t4970 + t4812 * t4966) * t5000 + (t4793 * t4966 + t4796 * t4970) * t5028 + t5034 * (t4966 * t4805 + t4808 * t4970);
t4751 = ((-0.2e1 * t5094 + t5100) * t4969 + t4811 * t4965) * t4998 + (t4792 * t4965 + t4795 * t4969) * t5025 + t5034 * (t4965 * t4804 + t4807 * t4969);
t4750 = (t4813 * t4971 + 0.2e1 * (t5092 - t5096 / 0.2e1) * t4967) * t5002 + (t4794 * t4971 - t4967 * t4797) * t5031 + (t4806 * t4971 - t4967 * t4809) * t5034;
t4749 = (t4812 * t4970 + 0.2e1 * (t5093 - t5098 / 0.2e1) * t4966) * t5000 + (t4793 * t4970 - t4966 * t4796) * t5028 + (t4805 * t4970 - t4966 * t4808) * t5034;
t4748 = (t4811 * t4969 + 0.2e1 * (t5094 - t5100 / 0.2e1) * t4965) * t4998 + (t4792 * t4969 - t4965 * t4795) * t5025 + (t4804 * t4969 - t4965 * t4807) * t5034;
t4747 = ((-0.2e1 * t5095 + t5101) * t4968 + t4810 * t4964) * t4994 + (t4790 * t4964 + t4791 * t4968) * t5013 + t5034 * (t4964 * t4802 + t4803 * t4968);
t4746 = (t4810 * t4968 + 0.2e1 * (t5095 - t5101 / 0.2e1) * t4964) * t4994 + (t4790 * t4968 - t4964 * t4791) * t5013 + (t4802 * t4968 - t4964 * t4803) * t5034;
t1 = [t4771 * t5204 + t4773 * t5203 + t4775 * t5202 + t4777 * t5201 + t4758 * t5196 + t4761 * t5195 + t4763 * t5194 + t4765 * t5193 - g(1) * m(4) + (-t4746 * t5200 - t4748 * t5199 - t4749 * t5198 - t4750 * t5197) * t5166; t4770 * t5204 + t4772 * t5203 + t4774 * t5202 + t4776 * t5201 + t4759 * t5196 + t4762 * t5195 + t4764 * t5194 + t4766 * t5193 - g(2) * m(4) + (-t4747 * t5200 - t4751 * t5199 - t4752 * t5198 - t4753 * t5197) * t5166; (-t5170 * t5213 + (-pkin(3) * t5158 + t5003 * t4906) * t5030 - pkin(2) * t5158) * t5201 + ((-t4906 * t5179 + t5208) * t5030 + (-pkin(6) * t5102 - t4873 * t4992 + t5031 * t4898) * t5021 + (-(t4961 * t4992 - t5002 + 0.1e1) * t5021 * t5030 + (0.2e1 * t5001 - 0.1e1) * t5102) * pkin(3)) / ((t5003 * t5072 + t4866) * t5030 + t5088) * t4769 + (-t5172 * t5214 + (-pkin(3) * t5160 + t5003 * t4905) * t5027 - pkin(2) * t5160) * t5202 + ((-t4905 * t5179 + t5208) * t5027 + (-pkin(6) * t5103 - t4872 * t4992 + t5028 * t4897) * t5018 + (-(t4960 * t4992 - t5000 + 0.1e1) * t5018 * t5027 + (0.2e1 * t4999 - 0.1e1) * t5103) * pkin(3)) / ((t5003 * t5073 + t4865) * t5027 + t5089) * t4768 + (-t5174 * t5215 + (-pkin(3) * t5162 + t5003 * t4904) * t5024 - pkin(2) * t5162) * t5203 + ((-t4904 * t5179 + t5208) * t5024 + (-pkin(6) * t5104 - t4871 * t4992 + t5025 * t4896) * t5015 + (-(t4959 * t4992 - t4998 + 0.1e1) * t5015 * t5024 + (0.2e1 * t4997 - 0.1e1) * t5104) * pkin(3)) / ((t5003 * t5074 + t4864) * t5024 + t5090) * t4767 + (-t5177 * t5216 + (-pkin(3) * t5165 + t5003 * t4900) * t5012 - pkin(2) * t5165) * t5204 + ((-t4900 * t5179 + t5208) * t5012 + (-pkin(6) * t5105 - t4870 * t4992 + t5013 * t4895) * t5009 + (-(t4958 * t4992 - t4994 + 0.1e1) * t5009 * t5012 + (0.2e1 * t4993 - 0.1e1) * t5105) * pkin(3)) / ((t5003 * t5075 + t4859) * t5012 + t5091) * t4760 - g(3) * m(4) + ((t4989 * t5031 + (-t4939 * t5004 * t5167 - t4928 + (t5002 * t5130 + t4992) * t5034) * t4945 + ((t4992 * t5185 - t5001 * t5049 + t5030 * t5206 - t5180) * t5031 - t4939 * t5106) * t5022) / ((t4923 * t5030 - (pkin(6) * t5030 - t5209) * t5181) * t5031 - t5030 * t4945 * t5126 + t5003 * (t5084 * t5030 + (t4949 + pkin(1)) * t5209)) * t4757 + (t4989 * t5028 + (-t4937 * t5004 * t5168 - t4927 + (t5000 * t5130 + t4992) * t5034) * t4943 + ((t4992 * t5186 - t4999 * t5049 + t5027 * t5206 - t5180) * t5028 - t4937 * t5106) * t5019) / ((t5027 * t4923 - (pkin(6) * t5027 - t5210) * t5182) * t5028 - t5027 * t4943 * t5127 + t5003 * (t5085 * t5027 + (t4948 + pkin(1)) * t5210)) * t4756 + (t4989 * t5025 + (-t4935 * t5004 * t5169 - t4926 + (t4998 * t5130 + t4992) * t5034) * t4941 + ((t4992 * t5187 - t4997 * t5049 + t5024 * t5206 - t5180) * t5025 - t4935 * t5106) * t5016) / ((t4923 * t5024 - (pkin(6) * t5024 - t5211) * t5183) * t5025 - t5024 * t4941 * t5128 + t5003 * (t5086 * t5024 + (t4947 + pkin(1)) * t5211)) * t4755 + (t4989 * t5013 + (-t4929 * t5004 * t5176 - t4924 + (t4994 * t5130 + t4992) * t5034) * t4931 + ((t4992 * t5188 - t4993 * t5049 + t5012 * t5206 - t5180) * t5013 - t4929 * t5106) * t5010) / ((t5012 * t4923 - (pkin(6) * t5012 - t5212) * t5184) * t5013 - t5012 * t4931 * t5129 + t5003 * (t5087 * t5012 + (t4933 + pkin(1)) * t5212)) * t4754) * t5050; -(-g(1) * t5040 - g(2) * t5039) * t4990 + t4991 * (g(1) * t5039 - g(2) * t5040) + (t4765 * t4877 + t4766 * t4881) * t5193 + (t4763 * t4876 + t4764 * t4880) * t5194 + (t4761 * t4875 + t4762 * t4879) * t5195 + (t4758 * t4874 + t4759 * t4878) * t5196 + (t4776 * t4881 + t4777 * t4877) * t5201 + (t4774 * t4880 + t4775 * t4876) * t5202 + (t4772 * t4879 + t4773 * t4875) * t5203 + (t4770 * t4878 + t4771 * t4874) * t5204 + ((-t4750 * t4877 - t4753 * t4881) * t5197 + (-t4749 * t4876 - t4752 * t4880) * t5198 + (-t4748 * t4875 - t4751 * t4879) * t5199 + (-t4746 * t4874 - t4747 * t4878) * t5200) * t5166;];
taugX  = t1;
