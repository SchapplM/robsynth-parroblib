% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4*4x21]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4RRRRR10V2G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 14:52:01
% EndTime: 2020-08-07 14:59:09
% DurationCPUTime: 470.75s
% Computational Cost: add. (469960->3014), mult. (857100->4929), div. (13076->33), fcn. (749160->36), ass. (0->1594)
t3969 = cos(qJ(2,1));
t3971 = pkin(8) + pkin(7);
t3877 = t3971 * t3969;
t3960 = sin(qJ(2,1));
t4754 = t3960 * pkin(2);
t3800 = -t3877 + t4754;
t3942 = cos(pkin(4));
t4788 = pkin(1) * t3942;
t3748 = t3800 * t4788;
t3941 = sin(pkin(4));
t3968 = cos(qJ(3,1));
t3874 = t3971 * t3960;
t3917 = t3969 * pkin(2);
t3803 = t3917 + t3874;
t3959 = sin(qJ(3,1));
t3908 = t3959 * pkin(3);
t4811 = t3917 + pkin(1);
t4130 = -pkin(6) * t3803 + t4811 * t3908;
t4594 = t3941 * t3969;
t4482 = pkin(6) * t4594;
t4580 = t3942 * t3960;
t3752 = pkin(1) * t4580 + t4482;
t3787 = pkin(1) + t3803;
t4758 = t3787 * pkin(2);
t4471 = t3959 * t4758;
t3938 = t3968 ^ 2;
t4774 = pkin(3) * t3938;
t4182 = -t3752 * t4774 + t3941 * t4471;
t4890 = 0.1e1 / (t3968 * (-t3941 * t4130 + t3748) - t4182);
t3966 = cos(qJ(2,2));
t3876 = t3971 * t3966;
t3957 = sin(qJ(2,2));
t4755 = t3957 * pkin(2);
t3799 = -t3876 + t4755;
t3747 = t3799 * t4788;
t3965 = cos(qJ(3,2));
t3873 = t3971 * t3957;
t3914 = t3966 * pkin(2);
t3802 = t3914 + t3873;
t3956 = sin(qJ(3,2));
t3907 = t3956 * pkin(3);
t4812 = t3914 + pkin(1);
t4131 = -pkin(6) * t3802 + t4812 * t3907;
t4595 = t3941 * t3966;
t4483 = pkin(6) * t4595;
t4582 = t3942 * t3957;
t3754 = pkin(1) * t4582 + t4483;
t3786 = pkin(1) + t3802;
t4759 = t3786 * pkin(2);
t4473 = t3956 * t4759;
t3936 = t3965 ^ 2;
t4775 = pkin(3) * t3936;
t4183 = -t3754 * t4775 + t3941 * t4473;
t4889 = 0.1e1 / (t3965 * (-t3941 * t4131 + t3747) - t4183);
t3963 = cos(qJ(2,3));
t3875 = t3971 * t3963;
t3954 = sin(qJ(2,3));
t4756 = t3954 * pkin(2);
t3798 = -t3875 + t4756;
t3746 = t3798 * t4788;
t3962 = cos(qJ(3,3));
t3872 = t3971 * t3954;
t3911 = t3963 * pkin(2);
t3801 = t3911 + t3872;
t3953 = sin(qJ(3,3));
t3906 = t3953 * pkin(3);
t4813 = t3911 + pkin(1);
t4132 = -pkin(6) * t3801 + t4813 * t3906;
t4596 = t3941 * t3963;
t4484 = pkin(6) * t4596;
t4584 = t3942 * t3954;
t3753 = pkin(1) * t4584 + t4484;
t3785 = pkin(1) + t3801;
t4760 = t3785 * pkin(2);
t4475 = t3953 * t4760;
t3934 = t3962 ^ 2;
t4776 = pkin(3) * t3934;
t4184 = -t3753 * t4776 + t3941 * t4475;
t4888 = 0.1e1 / ((-t3941 * t4132 + t3746) * t3962 - t4184);
t3951 = cos(qJ(2,4));
t3850 = t3971 * t3951;
t3948 = sin(qJ(2,4));
t4757 = t3948 * pkin(2);
t3796 = -t3850 + t4757;
t3743 = t3796 * t4788;
t3950 = cos(qJ(3,4));
t3849 = t3971 * t3948;
t3904 = t3951 * pkin(2);
t3797 = t3904 + t3849;
t3947 = sin(qJ(3,4));
t3901 = t3947 * pkin(3);
t4814 = t3904 + pkin(1);
t4133 = -pkin(6) * t3797 + t4814 * t3901;
t4603 = t3941 * t3951;
t4485 = pkin(6) * t4603;
t4587 = t3942 * t3948;
t3745 = pkin(1) * t4587 + t4485;
t3784 = pkin(1) + t3797;
t4761 = t3784 * pkin(2);
t4477 = t3947 * t4761;
t3927 = t3950 ^ 2;
t4777 = pkin(3) * t3927;
t4185 = -t3745 * t4777 + t3941 * t4477;
t4887 = 0.1e1 / ((-t3941 * t4133 + t3743) * t3950 - t4185);
t3946 = legFrame(1,3);
t3894 = sin(t3946);
t3898 = cos(t3946);
t3961 = sin(qJ(1,1));
t3970 = cos(qJ(1,1));
t3735 = t3894 * t3970 + t3898 * t3961;
t3736 = -t3894 * t3961 + t3898 * t3970;
t3939 = t3969 ^ 2;
t4749 = (t3939 - 0.1e1) * pkin(2);
t3761 = t3877 * t3960 + t4749;
t3889 = t3939 - 0.2e1;
t3925 = t3942 ^ 2;
t4462 = pkin(6) * t3959 + pkin(3);
t4470 = t3960 * t4774;
t4524 = -t3800 * t3968 - 0.2e1 * t4470;
t4606 = t3941 * t3942;
t4834 = -t4462 + t4774;
t4006 = ((t3889 * t3908 - pkin(6)) * t3968 + t3959 * t3761) * t4606 - (t3960 * t4462 + t4524) * t3925 - t3960 * t4834;
t4536 = t3968 * t3969;
t4260 = pkin(3) * t4536 + t3803;
t4540 = t3960 * t3968;
t4577 = t3942 * t3968;
t4598 = t3941 * t3959;
t4070 = -(t4811 * t3960 + t3971 + (pkin(3) * t4540 - t3877) * t3969) * t4598 + (pkin(1) + t4260) * t4577;
t3517 = -t3735 * t4006 + t3736 * t4070;
t4502 = pkin(1) * t4577;
t3915 = t3968 * pkin(3);
t3863 = t3915 + pkin(2);
t4843 = t3863 * t3960;
t3698 = (t3877 - t4843) * t4502;
t4251 = t3969 * pkin(6) * t4774;
t3603 = 0.1e1 / (t3698 + t3941 * (t3968 * t4130 - t4251 + t4471));
t3477 = t3517 * t3603;
t3855 = t3908 + pkin(6);
t4615 = t3863 * t3941;
t3929 = pkin(2) + t3971;
t3930 = pkin(2) - t3971;
t4624 = (t3915 + t3929) * (t3915 + t3930);
t3658 = -t3855 * t4615 + t4580 * t4624;
t3972 = 0.2e1 * t3971;
t4620 = (t3960 * t3972 + pkin(1)) * t3863;
t3619 = -t3658 * t3961 + t3970 * t4620;
t3622 = t3658 * t3970 + t3961 * t4620;
t4597 = t3941 * t3960;
t3702 = -t3855 * t4597 + t3863 * t3942;
t3920 = pkin(1) * t3960;
t3868 = t3920 + pkin(7);
t3841 = pkin(8) + t3868;
t3665 = -t3702 * t3961 + t3841 * t3970;
t3668 = t3702 * t3970 + t3841 * t3961;
t4576 = t3942 * t3971;
t4286 = t3863 * t4576;
t3678 = 0.2e1 * t3961 * t4286 + t3970 * t4624;
t4190 = t3970 * t4286;
t4268 = t3961 * t4624;
t3483 = (t3678 * t3898 + 0.2e1 * (t4190 - t4268 / 0.2e1) * t3894) * t3939 + (t3619 * t3898 - t3622 * t3894) * t3969 + (t3665 * t3898 - t3668 * t3894) * t3971;
t3638 = -t3735 * t4580 + t3736 * t3969;
t4295 = t3735 * t4598;
t4782 = pkin(2) * t3942;
t4542 = t3960 * (t3735 * t4782 - t3736 * t3971);
t3542 = -t3638 * t4774 + (-pkin(3) * t4295 + (-pkin(2) * t3736 - t3735 * t4576) * t3969 + t4542) * t3968 - pkin(2) * t4295;
t3856 = t3908 - pkin(6);
t4178 = pkin(1) * t3908 - pkin(6) * t3874;
t3592 = ((t3856 * t3917 + t4178) * t3941 - t3748) * t3968 + t4182;
t3584 = 0.1e1 / t3592;
t4486 = pkin(6) * t4597;
t4255 = 0.2e1 * t4486;
t4188 = t3584 * t4255;
t3834 = pkin(1) * t4576;
t4783 = pkin(2) * t3941;
t3726 = t3856 * t4783 + t3834;
t3780 = -pkin(6) * t3941 * t3971 - pkin(1) * t4782;
t3985 = pkin(2) ^ 2;
t4519 = pkin(3) * t4788;
t3562 = 0.1e1 / (t3726 * t4536 + (t3780 * t3968 - t3938 * t4519) * t3960 + (-t4251 + (pkin(1) * t3863 + pkin(2) * t3874 + t3985 * t3969) * t3959) * t3941);
t3984 = 0.1e1 / pkin(3);
t4593 = t3941 * t3984;
t4338 = t3562 * t4593;
t4238 = pkin(7) * t4338;
t3982 = 0.2e1 * pkin(2);
t4784 = pkin(1) * t3969;
t3871 = t3982 + t4784;
t4643 = t3603 * t3871;
t4802 = t3984 * t4811;
t4835 = t4802 * t3562 * t3941;
t3811 = pkin(7) * t3960 + t4811;
t4539 = t3960 * t3969;
t4822 = 0.2e1 * (pkin(7) * t4539 + t4749) * t3925 - 0.2e1 * t3969 * t3811;
t4849 = t3584 * t4822;
t4886 = t3941 * (t3483 * t4835 - (pkin(6) * t3477 - t3483 * t4238) * t3960) - t3542 * t4849 - (-t3517 * t4643 + t3542 * t4188) * t3942;
t3518 = t3735 * t4070 + t3736 * t4006;
t3478 = t3518 * t3603;
t3486 = ((-0.2e1 * t4190 + t4268) * t3898 + t3678 * t3894) * t3939 + (t3619 * t3894 + t3622 * t3898) * t3969 + t3971 * (t3665 * t3894 + t3668 * t3898);
t3637 = t3735 * t3969 + t3736 * t4580;
t4294 = t3736 * t4598;
t4541 = t3960 * (t3735 * t3971 + t3736 * t4782);
t3541 = -t3637 * t4774 + (pkin(3) * t4294 + (-pkin(2) * t3735 + t3736 * t4576) * t3969 - t4541) * t3968 + pkin(2) * t4294;
t4885 = t3941 * (t3486 * t4835 - (pkin(6) * t3478 - t3486 * t4238) * t3960) - t3541 * t4849 - (-t3518 * t4643 + t3541 * t4188) * t3942;
t3945 = legFrame(2,3);
t3893 = sin(t3945);
t3897 = cos(t3945);
t3958 = sin(qJ(1,2));
t3967 = cos(qJ(1,2));
t3733 = t3893 * t3967 + t3897 * t3958;
t3734 = -t3893 * t3958 + t3897 * t3967;
t3937 = t3966 ^ 2;
t4750 = (t3937 - 0.1e1) * pkin(2);
t3760 = t3876 * t3957 + t4750;
t3888 = t3937 - 0.2e1;
t4463 = pkin(6) * t3956 + pkin(3);
t4472 = t3957 * t4775;
t4525 = -t3799 * t3965 - 0.2e1 * t4472;
t4833 = -t4463 + t4775;
t4007 = ((t3888 * t3907 - pkin(6)) * t3965 + t3956 * t3760) * t4606 - (t3957 * t4463 + t4525) * t3925 - t3957 * t4833;
t4537 = t3965 * t3966;
t4261 = pkin(3) * t4537 + t3802;
t4547 = t3957 * t3965;
t4578 = t3942 * t3965;
t4600 = t3941 * t3956;
t4071 = -(t4812 * t3957 + t3971 + (pkin(3) * t4547 - t3876) * t3966) * t4600 + (pkin(1) + t4261) * t4578;
t3515 = -t3733 * t4007 + t3734 * t4071;
t4503 = pkin(1) * t4578;
t3912 = t3965 * pkin(3);
t3860 = t3912 + pkin(2);
t4844 = t3860 * t3957;
t3697 = (t3876 - t4844) * t4503;
t4252 = t3966 * pkin(6) * t4775;
t3602 = 0.1e1 / (t3697 + t3941 * (t3965 * t4131 - t4252 + t4473));
t3475 = t3515 * t3602;
t3853 = t3907 + pkin(6);
t4616 = t3860 * t3941;
t4625 = (t3912 + t3929) * (t3912 + t3930);
t3657 = -t3853 * t4616 + t4582 * t4625;
t4621 = (t3957 * t3972 + pkin(1)) * t3860;
t3618 = -t3657 * t3958 + t3967 * t4621;
t3621 = t3657 * t3967 + t3958 * t4621;
t4599 = t3941 * t3957;
t3701 = -t3853 * t4599 + t3860 * t3942;
t3919 = pkin(1) * t3957;
t3867 = t3919 + pkin(7);
t3840 = pkin(8) + t3867;
t3664 = -t3701 * t3958 + t3840 * t3967;
t3667 = t3701 * t3967 + t3840 * t3958;
t4287 = t3860 * t4576;
t3677 = 0.2e1 * t3958 * t4287 + t3967 * t4625;
t4191 = t3967 * t4287;
t4269 = t3958 * t4625;
t3482 = (t3677 * t3897 + 0.2e1 * (t4191 - t4269 / 0.2e1) * t3893) * t3937 + (t3618 * t3897 - t3621 * t3893) * t3966 + (t3664 * t3897 - t3667 * t3893) * t3971;
t3636 = -t3733 * t4582 + t3734 * t3966;
t4297 = t3733 * t4600;
t4549 = t3957 * (t3733 * t4782 - t3734 * t3971);
t3540 = -t3636 * t4775 + (-pkin(3) * t4297 + (-pkin(2) * t3734 - t3733 * t4576) * t3966 + t4549) * t3965 - pkin(2) * t4297;
t3854 = t3907 - pkin(6);
t4179 = pkin(1) * t3907 - pkin(6) * t3873;
t3594 = ((t3854 * t3914 + t4179) * t3941 - t3747) * t3965 + t4183;
t3590 = 0.1e1 / t3594;
t4487 = pkin(6) * t4599;
t4256 = 0.2e1 * t4487;
t4186 = t3590 * t4256;
t3725 = t3854 * t4783 + t3834;
t3561 = 0.1e1 / (t3725 * t4537 + (t3780 * t3965 - t3936 * t4519) * t3957 + (-t4252 + (pkin(1) * t3860 + pkin(2) * t3873 + t3985 * t3966) * t3956) * t3941);
t4341 = t3561 * t4593;
t4239 = pkin(7) * t4341;
t4785 = pkin(1) * t3966;
t3870 = t3982 + t4785;
t4650 = t3602 * t3870;
t4801 = t3984 * t4812;
t4836 = t4801 * t3561 * t3941;
t3809 = pkin(7) * t3957 + t4812;
t4546 = t3957 * t3966;
t4821 = 0.2e1 * (pkin(7) * t4546 + t4750) * t3925 - 0.2e1 * t3966 * t3809;
t4847 = t3590 * t4821;
t4884 = t3941 * (t3482 * t4836 - (pkin(6) * t3475 - t3482 * t4239) * t3957) - t3540 * t4847 - (-t3515 * t4650 + t3540 * t4186) * t3942;
t3516 = t3733 * t4071 + t3734 * t4007;
t3476 = t3516 * t3602;
t3485 = ((-0.2e1 * t4191 + t4269) * t3897 + t3677 * t3893) * t3937 + (t3618 * t3893 + t3621 * t3897) * t3966 + t3971 * (t3664 * t3893 + t3667 * t3897);
t3635 = t3733 * t3966 + t3734 * t4582;
t4296 = t3734 * t4600;
t4548 = t3957 * (t3733 * t3971 + t3734 * t4782);
t3539 = -t3635 * t4775 + (pkin(3) * t4296 + (-pkin(2) * t3733 + t3734 * t4576) * t3966 - t4548) * t3965 + pkin(2) * t4296;
t4883 = t3941 * (t3485 * t4836 - (pkin(6) * t3476 - t3485 * t4239) * t3957) - t3539 * t4847 - (-t3516 * t4650 + t3539 * t4186) * t3942;
t3944 = legFrame(3,3);
t3892 = sin(t3944);
t3896 = cos(t3944);
t3955 = sin(qJ(1,3));
t3964 = cos(qJ(1,3));
t3731 = t3892 * t3964 + t3896 * t3955;
t3732 = -t3892 * t3955 + t3896 * t3964;
t3935 = t3963 ^ 2;
t4751 = (t3935 - 0.1e1) * pkin(2);
t3759 = t3875 * t3954 + t4751;
t3887 = t3935 - 0.2e1;
t4464 = pkin(6) * t3953 + pkin(3);
t4474 = t3954 * t4776;
t4526 = -t3798 * t3962 - 0.2e1 * t4474;
t4832 = -t4464 + t4776;
t4008 = ((t3887 * t3906 - pkin(6)) * t3962 + t3953 * t3759) * t4606 - (t3954 * t4464 + t4526) * t3925 - t3954 * t4832;
t4538 = t3962 * t3963;
t4262 = pkin(3) * t4538 + t3801;
t4554 = t3954 * t3962;
t4579 = t3942 * t3962;
t4602 = t3941 * t3953;
t4072 = -(t4813 * t3954 + t3971 + (pkin(3) * t4554 - t3875) * t3963) * t4602 + (pkin(1) + t4262) * t4579;
t3513 = -t3731 * t4008 + t3732 * t4072;
t4504 = pkin(1) * t4579;
t3909 = t3962 * pkin(3);
t3857 = t3909 + pkin(2);
t4845 = t3857 * t3954;
t3696 = (t3875 - t4845) * t4504;
t4253 = t3963 * pkin(6) * t4776;
t3601 = 0.1e1 / (t3696 + t3941 * (t3962 * t4132 - t4253 + t4475));
t3473 = t3513 * t3601;
t3851 = t3906 + pkin(6);
t4617 = t3857 * t3941;
t4626 = (t3909 + t3929) * (t3909 + t3930);
t3656 = -t3851 * t4617 + t4584 * t4626;
t4622 = (t3954 * t3972 + pkin(1)) * t3857;
t3617 = -t3656 * t3955 + t3964 * t4622;
t3620 = t3656 * t3964 + t3955 * t4622;
t4601 = t3941 * t3954;
t3700 = -t3851 * t4601 + t3857 * t3942;
t3918 = pkin(1) * t3954;
t3866 = t3918 + pkin(7);
t3839 = pkin(8) + t3866;
t3663 = -t3700 * t3955 + t3839 * t3964;
t3666 = t3700 * t3964 + t3839 * t3955;
t4288 = t3857 * t4576;
t3676 = 0.2e1 * t3955 * t4288 + t3964 * t4626;
t4192 = t3964 * t4288;
t4270 = t3955 * t4626;
t3481 = (t3676 * t3896 + 0.2e1 * (t4192 - t4270 / 0.2e1) * t3892) * t3935 + (t3617 * t3896 - t3620 * t3892) * t3963 + (t3663 * t3896 - t3666 * t3892) * t3971;
t3634 = -t3731 * t4584 + t3732 * t3963;
t4299 = t3731 * t4602;
t4556 = t3954 * (t3731 * t4782 - t3732 * t3971);
t3538 = -t3634 * t4776 + (-pkin(3) * t4299 + (-pkin(2) * t3732 - t3731 * t4576) * t3963 + t4556) * t3962 - pkin(2) * t4299;
t3852 = t3906 - pkin(6);
t4180 = pkin(1) * t3906 - pkin(6) * t3872;
t3593 = ((t3852 * t3911 + t4180) * t3941 - t3746) * t3962 + t4184;
t3587 = 0.1e1 / t3593;
t4488 = pkin(6) * t4601;
t4257 = 0.2e1 * t4488;
t4187 = t3587 * t4257;
t3724 = t3852 * t4783 + t3834;
t3560 = 0.1e1 / (t3724 * t4538 + (t3780 * t3962 - t3934 * t4519) * t3954 + (-t4253 + (pkin(1) * t3857 + pkin(2) * t3872 + t3985 * t3963) * t3953) * t3941);
t4344 = t3560 * t4593;
t4240 = pkin(7) * t4344;
t4786 = pkin(1) * t3963;
t3869 = t3982 + t4786;
t4657 = t3601 * t3869;
t4800 = t3984 * t4813;
t4837 = t4800 * t3560 * t3941;
t3807 = pkin(7) * t3954 + t4813;
t4553 = t3954 * t3963;
t4820 = 0.2e1 * (pkin(7) * t4553 + t4751) * t3925 - 0.2e1 * t3963 * t3807;
t4848 = t3587 * t4820;
t4882 = t3941 * (t3481 * t4837 - (pkin(6) * t3473 - t3481 * t4240) * t3954) - t3538 * t4848 - (-t3513 * t4657 + t3538 * t4187) * t3942;
t3514 = t3731 * t4072 + t3732 * t4008;
t3474 = t3514 * t3601;
t3484 = ((-0.2e1 * t4192 + t4270) * t3896 + t3676 * t3892) * t3935 + (t3617 * t3892 + t3620 * t3896) * t3963 + t3971 * (t3663 * t3892 + t3666 * t3896);
t3633 = t3731 * t3963 + t3732 * t4584;
t4298 = t3732 * t4602;
t4555 = t3954 * (t3731 * t3971 + t3732 * t4782);
t3537 = -t3633 * t4776 + (pkin(3) * t4298 + (-pkin(2) * t3731 + t3732 * t4576) * t3963 - t4555) * t3962 + pkin(2) * t4298;
t4881 = t3941 * (t3484 * t4837 - (pkin(6) * t3474 - t3484 * t4240) * t3954) - t3537 * t4848 - (-t3514 * t4657 + t3537 * t4187) * t3942;
t3943 = legFrame(4,3);
t3891 = sin(t3943);
t3895 = cos(t3943);
t3949 = sin(qJ(1,4));
t3952 = cos(qJ(1,4));
t3729 = t3891 * t3952 + t3895 * t3949;
t3730 = -t3891 * t3949 + t3895 * t3952;
t3928 = t3951 ^ 2;
t4752 = (t3928 - 0.1e1) * pkin(2);
t3755 = t3850 * t3948 + t4752;
t3886 = t3928 - 0.2e1;
t4465 = pkin(6) * t3947 + pkin(3);
t4476 = t3948 * t4777;
t4527 = -t3796 * t3950 - 0.2e1 * t4476;
t4831 = -t4465 + t4777;
t4009 = ((t3886 * t3901 - pkin(6)) * t3950 + t3947 * t3755) * t4606 - (t3948 * t4465 + t4527) * t3925 - t3948 * t4831;
t4560 = t3950 * t3951;
t4263 = pkin(3) * t4560 + t3797;
t4562 = t3948 * t3950;
t4586 = t3942 * t3950;
t4605 = t3941 * t3947;
t4073 = -(t4814 * t3948 + t3971 + (pkin(3) * t4562 - t3850) * t3951) * t4605 + (pkin(1) + t4263) * t4586;
t3511 = -t3729 * t4009 + t3730 * t4073;
t4505 = pkin(1) * t4586;
t3902 = t3950 * pkin(3);
t3844 = t3902 + pkin(2);
t4846 = t3844 * t3948;
t3695 = (t3850 - t4846) * t4505;
t4254 = t3951 * pkin(6) * t4777;
t3596 = 0.1e1 / (t3695 + t3941 * (t3950 * t4133 - t4254 + t4477));
t3471 = t3511 * t3596;
t3842 = t3901 + pkin(6);
t4619 = t3844 * t3941;
t4627 = (t3902 + t3929) * (t3902 + t3930);
t3655 = -t3842 * t4619 + t4587 * t4627;
t4623 = (t3948 * t3972 + pkin(1)) * t3844;
t3615 = -t3655 * t3949 + t3952 * t4623;
t3616 = t3655 * t3952 + t3949 * t4623;
t4604 = t3941 * t3948;
t3699 = -t3842 * t4604 + t3844 * t3942;
t3905 = pkin(1) * t3948;
t3847 = t3905 + pkin(7);
t3835 = pkin(8) + t3847;
t3659 = -t3699 * t3949 + t3835 * t3952;
t3660 = t3699 * t3952 + t3835 * t3949;
t4292 = t3844 * t4576;
t3675 = 0.2e1 * t3949 * t4292 + t3952 * t4627;
t4193 = t3952 * t4292;
t4271 = t3949 * t4627;
t3479 = (t3675 * t3895 + 0.2e1 * (t4193 - t4271 / 0.2e1) * t3891) * t3928 + (t3615 * t3895 - t3616 * t3891) * t3951 + (t3659 * t3895 - t3660 * t3891) * t3971;
t3629 = -t3729 * t4587 + t3730 * t3951;
t4301 = t3729 * t4605;
t4564 = t3948 * (t3729 * t4782 - t3730 * t3971);
t3530 = -t3629 * t4777 + (-pkin(3) * t4301 + (-pkin(2) * t3730 - t3729 * t4576) * t3951 + t4564) * t3950 - pkin(2) * t4301;
t3843 = t3901 - pkin(6);
t4181 = pkin(1) * t3901 - pkin(6) * t3849;
t3582 = ((t3843 * t3904 + t4181) * t3941 - t3743) * t3950 + t4185;
t3577 = 0.1e1 / t3582;
t4489 = pkin(6) * t4604;
t4258 = 0.2e1 * t4489;
t4189 = t3577 * t4258;
t3723 = t3843 * t4783 + t3834;
t3559 = 0.1e1 / (t3723 * t4560 + (t3780 * t3950 - t3927 * t4519) * t3948 + (-t4254 + (pkin(1) * t3844 + pkin(2) * t3849 + t3985 * t3951) * t3947) * t3941);
t4347 = t3559 * t4593;
t4241 = pkin(7) * t4347;
t4787 = pkin(1) * t3951;
t3848 = t3982 + t4787;
t4664 = t3596 * t3848;
t4799 = t3984 * t4814;
t4838 = t4799 * t3559 * t3941;
t3805 = pkin(7) * t3948 + t4814;
t4561 = t3948 * t3951;
t4819 = 0.2e1 * (pkin(7) * t4561 + t4752) * t3925 - 0.2e1 * t3951 * t3805;
t4850 = t3577 * t4819;
t4880 = t3941 * (t3479 * t4838 - (pkin(6) * t3471 - t3479 * t4241) * t3948) - t3530 * t4850 - (-t3511 * t4664 + t3530 * t4189) * t3942;
t3512 = t3729 * t4073 + t3730 * t4009;
t3472 = t3512 * t3596;
t3480 = ((-0.2e1 * t4193 + t4271) * t3895 + t3675 * t3891) * t3928 + (t3615 * t3891 + t3616 * t3895) * t3951 + t3971 * (t3659 * t3891 + t3660 * t3895);
t3628 = t3729 * t3951 + t3730 * t4587;
t4300 = t3730 * t4605;
t4563 = t3948 * (t3729 * t3971 + t3730 * t4782);
t3529 = -t3628 * t4777 + (pkin(3) * t4300 + (-pkin(2) * t3729 + t3730 * t4576) * t3951 - t4563) * t3950 + pkin(2) * t4300;
t4879 = t3941 * (t3480 * t4838 - (pkin(6) * t3472 - t3480 * t4241) * t3948) - t3529 * t4850 - (-t3512 * t4664 + t3529 * t4189) * t3942;
t4237 = (0.2e1 * t3927 - 0.1e1) * t4604;
t4249 = t3886 * t3925 - t3928;
t4566 = t3947 * t3950;
t4753 = (t3925 - 0.1e1) * pkin(6);
t3523 = ((t3796 * t4606 + t4753) * t3950 + (-t3755 * t3925 + t3784 * t3951 - t3942 * t4489) * t3947 + (-(t4249 + 0.1e1) * t4566 + t3942 * t4237) * pkin(3)) * t4887;
t4588 = t3942 * t3947;
t3624 = -t3941 * t4476 + (-pkin(3) * t4588 - t3796 * t3941) * t3950 - pkin(2) * t4588;
t3921 = pkin(1) * t3971;
t4284 = t3941 * t4576;
t4293 = t3842 * t4603;
t4517 = -0.2e1 * (t3942 + 0.1e1) * (t3942 - 0.1e1);
t4610 = t3929 * t3930;
t3983 = pkin(3) ^ 2;
t4611 = t3927 * t3983;
t4790 = -0.2e1 * pkin(2);
t4748 = pkin(3) * t4790;
t4773 = pkin(6) * t3950;
t4781 = pkin(2) * t3947;
t4695 = (t3921 * t3951 + (-t3942 * t4293 - t3835 + (t3928 * t4517 + t3925) * t3971) * t3844 + ((t3925 * t4627 + t3950 * t4748 - t4610 - t4611) * t3951 - t3842 * t4284) * t3948) / ((t3950 * t3834 - (t4773 - t4781) * t4619) * t3951 - t4505 * t4846 + t3941 * (t4181 * t3950 + (t3849 + pkin(1)) * t4781));
t4369 = t3984 * t4695;
t4245 = pkin(7) * t4369;
t4854 = t3624 * t4850 + t3941 * (t4695 * t4799 + (-pkin(6) * t3523 + t4245) * t3948) + (t3523 * t3848 + t3624 * t4189) * t3942;
t4235 = (0.2e1 * t3934 - 0.1e1) * t4601;
t4248 = t3887 * t3925 - t3935;
t4558 = t3953 * t3962;
t3524 = ((t3798 * t4606 + t4753) * t3962 + (-t3759 * t3925 + t3785 * t3963 - t3942 * t4488) * t3953 + (-(t4248 + 0.1e1) * t4558 + t3942 * t4235) * pkin(3)) * t4888;
t4585 = t3942 * t3953;
t3630 = -t3941 * t4474 + (-pkin(3) * t4585 - t3798 * t3941) * t3962 - pkin(2) * t4585;
t4291 = t3851 * t4596;
t4609 = t3934 * t3983;
t4772 = pkin(6) * t3962;
t4780 = pkin(2) * t3953;
t4694 = (t3921 * t3963 + (-t3942 * t4291 - t3839 + (t3935 * t4517 + t3925) * t3971) * t3857 + ((t3925 * t4626 + t3962 * t4748 - t4609 - t4610) * t3963 - t3851 * t4284) * t3954) / ((t3962 * t3834 - (t4772 - t4780) * t4617) * t3963 - t4504 * t4845 + t3941 * (t4180 * t3962 + (t3872 + pkin(1)) * t4780));
t4368 = t3984 * t4694;
t4244 = pkin(7) * t4368;
t4853 = t3630 * t4848 + t3941 * (t4694 * t4800 + (-pkin(6) * t3524 + t4244) * t3954) + (t3524 * t3869 + t3630 * t4187) * t3942;
t4233 = (0.2e1 * t3936 - 0.1e1) * t4599;
t4247 = t3888 * t3925 - t3937;
t4551 = t3956 * t3965;
t3525 = ((t3799 * t4606 + t4753) * t3965 + (-t3760 * t3925 + t3786 * t3966 - t3942 * t4487) * t3956 + (-(t4247 + 0.1e1) * t4551 + t3942 * t4233) * pkin(3)) * t4889;
t4583 = t3942 * t3956;
t3631 = -t3941 * t4472 + (-pkin(3) * t4583 - t3799 * t3941) * t3965 - pkin(2) * t4583;
t4290 = t3853 * t4595;
t4608 = t3936 * t3983;
t4771 = pkin(6) * t3965;
t4779 = pkin(2) * t3956;
t4693 = (t3921 * t3966 + (-t3942 * t4290 - t3840 + (t3937 * t4517 + t3925) * t3971) * t3860 + ((t3925 * t4625 + t3965 * t4748 - t4608 - t4610) * t3966 - t3853 * t4284) * t3957) / ((t3965 * t3834 - (t4771 - t4779) * t4616) * t3966 - t4503 * t4844 + t3941 * (t4179 * t3965 + (t3873 + pkin(1)) * t4779));
t4367 = t3984 * t4693;
t4243 = pkin(7) * t4367;
t4852 = t3631 * t4847 + t3941 * (t4693 * t4801 + (-pkin(6) * t3525 + t4243) * t3957) + (t3525 * t3870 + t3631 * t4186) * t3942;
t4231 = (0.2e1 * t3938 - 0.1e1) * t4597;
t4246 = t3889 * t3925 - t3939;
t4544 = t3959 * t3968;
t3526 = ((t3800 * t4606 + t4753) * t3968 + (-t3761 * t3925 + t3787 * t3969 - t3942 * t4486) * t3959 + (-(t4246 + 0.1e1) * t4544 + t3942 * t4231) * pkin(3)) * t4890;
t4581 = t3942 * t3959;
t3632 = -t3941 * t4470 + (-pkin(3) * t4581 - t3800 * t3941) * t3968 - pkin(2) * t4581;
t4289 = t3855 * t4594;
t4607 = t3938 * t3983;
t4770 = pkin(6) * t3968;
t4778 = pkin(2) * t3959;
t4692 = (t3921 * t3969 + (-t3942 * t4289 - t3841 + (t3939 * t4517 + t3925) * t3971) * t3863 + ((t3925 * t4624 + t3968 * t4748 - t4607 - t4610) * t3969 - t3855 * t4284) * t3960) / ((t3968 * t3834 - (t4770 - t4778) * t4615) * t3969 - t4502 * t4843 + t3941 * (t4178 * t3968 + (t3874 + pkin(1)) * t4778));
t4366 = t3984 * t4692;
t4242 = pkin(7) * t4366;
t4851 = t3632 * t4849 + t3941 * (t4692 * t4802 + (-pkin(6) * t3526 + t4242) * t3960) + (t3526 * t3871 + t3632 * t4188) * t3942;
t3973 = xP(4);
t3922 = sin(t3973);
t3923 = cos(t3973);
t3974 = koppelP(4,2);
t3978 = koppelP(4,1);
t3771 = t3922 * t3978 + t3923 * t3974;
t3775 = -t3922 * t3974 + t3923 * t3978;
t4145 = t3479 * t3771 - t3480 * t3775;
t3295 = t4145 * t4347;
t3463 = t3771 * t3471;
t3464 = t3775 * t3472;
t3336 = -t3463 + t3464;
t3497 = t3529 * t3577;
t3498 = t3530 * t3577;
t3388 = t3775 * t3497 - t3771 * t3498;
t4769 = pkin(7) * t3295;
t4826 = t3388 * t4819 + t3941 * (t3295 * t4814 + (pkin(6) * t3336 + t4769) * t3948) + (-t3336 * t3848 + t3388 * t4258) * t3942;
t3975 = koppelP(3,2);
t3979 = koppelP(3,1);
t3772 = t3922 * t3979 + t3923 * t3975;
t3776 = -t3922 * t3975 + t3923 * t3979;
t4144 = t3481 * t3772 - t3484 * t3776;
t3296 = t4144 * t4344;
t3465 = t3772 * t3473;
t3466 = t3776 * t3474;
t3340 = -t3465 + t3466;
t3505 = t3537 * t3587;
t3506 = t3538 * t3587;
t3404 = t3776 * t3505 - t3772 * t3506;
t4768 = pkin(7) * t3296;
t4825 = t3404 * t4820 + t3941 * (t3296 * t4813 + (pkin(6) * t3340 + t4768) * t3954) + (-t3340 * t3869 + t3404 * t4257) * t3942;
t3976 = koppelP(2,2);
t3980 = koppelP(2,1);
t3773 = t3922 * t3980 + t3923 * t3976;
t3777 = -t3922 * t3976 + t3923 * t3980;
t4143 = t3482 * t3773 - t3485 * t3777;
t3297 = t4143 * t4341;
t3467 = t3773 * t3475;
t3468 = t3777 * t3476;
t3341 = -t3467 + t3468;
t3507 = t3539 * t3590;
t3508 = t3540 * t3590;
t3405 = t3777 * t3507 - t3773 * t3508;
t4767 = pkin(7) * t3297;
t4824 = t3405 * t4821 + t3941 * (t3297 * t4812 + (pkin(6) * t3341 + t4767) * t3957) + (-t3341 * t3870 + t3405 * t4256) * t3942;
t3977 = koppelP(1,2);
t3981 = koppelP(1,1);
t3774 = t3922 * t3981 + t3923 * t3977;
t3778 = -t3922 * t3977 + t3923 * t3981;
t4142 = t3483 * t3774 - t3486 * t3778;
t3298 = t4142 * t4338;
t3469 = t3774 * t3477;
t3470 = t3778 * t3478;
t3342 = -t3469 + t3470;
t3509 = t3541 * t3584;
t3510 = t3542 * t3584;
t3406 = t3778 * t3509 - t3774 * t3510;
t4766 = pkin(7) * t3298;
t4823 = t3406 * t4822 + t3941 * (t3298 * t4811 + (pkin(6) * t3342 + t4766) * t3960) + (-t3342 * t3871 + t3406 * t4255) * t3942;
t4810 = t3529 * t3530;
t4809 = t3537 * t3538;
t4808 = t3539 * t3540;
t4807 = t3541 * t3542;
t4515 = 0.2e1 * t4576;
t4250 = (t3928 - 0.1e1 / 0.2e1) * t4515;
t4285 = t3942 * t4610;
t4794 = t3797 * t3842 * t3941 + pkin(2) * t4250 + (t4250 + t4293) * t3902 - t4285 * t4561;
t3879 = t3935 - 0.1e1 / 0.2e1;
t4259 = t4576 * t4790;
t4793 = t3851 * t3801 * t3941 - t3879 * t4259 + (t3879 * t4515 + t4291) * t3909 - t4285 * t4553;
t3880 = t3937 - 0.1e1 / 0.2e1;
t4792 = t3853 * t3802 * t3941 - t3880 * t4259 + (t3880 * t4515 + t4290) * t3912 - t4285 * t4546;
t3881 = t3939 - 0.1e1 / 0.2e1;
t4791 = t3803 * t3855 * t3941 - t3881 * t4259 + (t3881 * t4515 + t4289) * t3915 - t4285 * t4539;
t4789 = 0.2e1 * t3925 - 0.2e1;
t4765 = pkin(7) * t3336;
t4764 = pkin(7) * t3340;
t4763 = pkin(7) * t3341;
t4762 = pkin(7) * t3342;
t3788 = t3949 * t3978 - t3952 * t3974;
t3789 = t3949 * t3974 + t3952 * t3978;
t3680 = t3788 * t3922 + t3789 * t3923;
t4137 = t3788 * t3923 - t3789 * t3922;
t3608 = t3680 * t3895 - t3891 * t4137;
t4731 = (t4073 * (t3680 * t3891 + t3895 * t4137) + (-t4527 * t3925 + (-t3925 * t4465 - t4831) * t3948 + ((t3886 * t3902 + t3755) * t3947 - t4773) * t4606) * t3608) / (t3695 + t3941 * ((t3902 * t4814 + t4761) * t3947 - t4263 * t4773));
t3792 = t3958 * t3980 - t3967 * t3976;
t3793 = t3958 * t3976 + t3967 * t3980;
t3682 = t3792 * t3922 + t3793 * t3923;
t4135 = t3792 * t3923 - t3793 * t3922;
t3612 = t3682 * t3897 - t3893 * t4135;
t4730 = (t4071 * (t3893 * t3682 + t3897 * t4135) + (-t4525 * t3925 + (-t3925 * t4463 - t4833) * t3957 + ((t3888 * t3912 + t3760) * t3956 - t4771) * t4606) * t3612) / (t3697 + t3941 * ((t3912 * t4812 + t4759) * t3956 - t4261 * t4771));
t3794 = t3961 * t3981 - t3970 * t3977;
t3795 = t3961 * t3977 + t3970 * t3981;
t3683 = t3794 * t3922 + t3795 * t3923;
t4134 = t3794 * t3923 - t3795 * t3922;
t3614 = t3683 * t3898 - t3894 * t4134;
t4729 = (t4070 * (t3894 * t3683 + t3898 * t4134) + (-t4524 * t3925 + (-t3925 * t4462 - t4834) * t3960 + ((t3889 * t3915 + t3761) * t3959 - t4770) * t4606) * t3614) / (t3698 + ((t3915 * t4811 + t4758) * t3959 - t4260 * t4770) * t3941);
t3790 = t3955 * t3979 - t3964 * t3975;
t3791 = t3955 * t3975 + t3964 * t3979;
t3681 = t3790 * t3922 + t3791 * t3923;
t4136 = t3790 * t3923 - t3791 * t3922;
t3610 = t3681 * t3896 - t3892 * t4136;
t4728 = (t4072 * (t3681 * t3892 + t3896 * t4136) + (-t4526 * t3925 + (-t3925 * t4464 - t4832) * t3954 + ((t3887 * t3909 + t3759) * t3953 - t4772) * t4606) * t3610) / (t3696 + t3941 * ((t3909 * t4813 + t4760) * t3953 - t4262 * t4772));
t4493 = pkin(3) * t4605;
t4531 = t3971 * t3978;
t4535 = t3971 * t3974;
t4575 = t3942 * t3974;
t3639 = (pkin(2) * t3978 - t3942 * t4535) * t3951 + (pkin(2) * t4575 + t4531) * t3948 - t3974 * t4493;
t4571 = t3942 * t3978;
t3640 = (pkin(2) * t3974 + t3942 * t4531) * t3951 + (-pkin(2) * t4571 + t4535) * t3948 + t3978 * t4493;
t3564 = t3639 * t3952 + t3640 * t3949;
t3565 = -t3639 * t3949 + t3640 * t3952;
t3756 = t3948 * t4575 + t3978 * t3951;
t3757 = t3948 * t4571 - t3974 * t3951;
t3661 = t3756 * t3952 - t3757 * t3949;
t3662 = t3756 * t3949 + t3757 * t3952;
t4727 = (-((-t3661 * t3922 + t3662 * t3923) * t3895 + (t3661 * t3923 + t3662 * t3922) * t3891) * t4777 + ((t3564 * t3922 + t3565 * t3923) * t3895 - (t3564 * t3923 - t3565 * t3922) * t3891) * t3950 + t3608 * pkin(2) * t4605) / ((pkin(1) * t4493 + t3723 * t3951 + t3780 * t3948) * t3950 + t4185);
t4492 = pkin(3) * t4602;
t4530 = t3971 * t3979;
t4534 = t3971 * t3975;
t4574 = t3942 * t3975;
t3643 = (pkin(2) * t3979 - t3942 * t4534) * t3963 + (pkin(2) * t4574 + t4530) * t3954 - t3975 * t4492;
t4570 = t3942 * t3979;
t3646 = (pkin(2) * t3975 + t3942 * t4530) * t3963 + (-pkin(2) * t4570 + t4534) * t3954 + t3979 * t4492;
t3566 = t3643 * t3964 + t3646 * t3955;
t3569 = -t3643 * t3955 + t3646 * t3964;
t3762 = t3954 * t4574 + t3979 * t3963;
t3765 = t3954 * t4570 - t3975 * t3963;
t3669 = t3762 * t3964 - t3765 * t3955;
t3672 = t3762 * t3955 + t3765 * t3964;
t4726 = (-((-t3669 * t3922 + t3672 * t3923) * t3896 + (t3669 * t3923 + t3672 * t3922) * t3892) * t4776 + ((t3566 * t3922 + t3569 * t3923) * t3896 - (t3566 * t3923 - t3569 * t3922) * t3892) * t3962 + t3610 * pkin(2) * t4602) / ((pkin(1) * t4492 + t3724 * t3963 + t3780 * t3954) * t3962 + t4184);
t4491 = pkin(3) * t4600;
t4529 = t3971 * t3980;
t4533 = t3971 * t3976;
t4573 = t3942 * t3976;
t3644 = (pkin(2) * t3980 - t3942 * t4533) * t3966 + (pkin(2) * t4573 + t4529) * t3957 - t3976 * t4491;
t4569 = t3942 * t3980;
t3647 = (pkin(2) * t3976 + t3942 * t4529) * t3966 + (-pkin(2) * t4569 + t4533) * t3957 + t3980 * t4491;
t3567 = t3644 * t3967 + t3647 * t3958;
t3570 = -t3644 * t3958 + t3647 * t3967;
t3763 = t3957 * t4573 + t3980 * t3966;
t3766 = t3957 * t4569 - t3976 * t3966;
t3670 = t3763 * t3967 - t3766 * t3958;
t3673 = t3763 * t3958 + t3766 * t3967;
t4725 = (-((-t3670 * t3922 + t3673 * t3923) * t3897 + (t3670 * t3923 + t3673 * t3922) * t3893) * t4775 + ((t3567 * t3922 + t3570 * t3923) * t3897 - (t3567 * t3923 - t3570 * t3922) * t3893) * t3965 + t3612 * pkin(2) * t4600) / ((pkin(1) * t4491 + t3725 * t3966 + t3780 * t3957) * t3965 + t4183);
t4490 = pkin(3) * t4598;
t4528 = t3971 * t3981;
t4532 = t3971 * t3977;
t4572 = t3942 * t3977;
t3645 = (pkin(2) * t3981 - t3942 * t4532) * t3969 + (pkin(2) * t4572 + t4528) * t3960 - t3977 * t4490;
t4568 = t3942 * t3981;
t3648 = (pkin(2) * t3977 + t3942 * t4528) * t3969 + (-pkin(2) * t4568 + t4532) * t3960 + t3981 * t4490;
t3568 = t3645 * t3970 + t3648 * t3961;
t3571 = -t3645 * t3961 + t3648 * t3970;
t3764 = t3960 * t4572 + t3981 * t3969;
t3767 = t3960 * t4568 - t3977 * t3969;
t3671 = t3764 * t3970 - t3767 * t3961;
t3674 = t3764 * t3961 + t3767 * t3970;
t4724 = (-((-t3671 * t3922 + t3674 * t3923) * t3898 + (t3671 * t3923 + t3674 * t3922) * t3894) * t4774 + ((t3568 * t3922 + t3571 * t3923) * t3898 - (t3568 * t3923 - t3571 * t3922) * t3894) * t3968 + t3614 * pkin(2) * t4598) / ((pkin(1) * t4490 + t3726 * t3969 + t3780 * t3960) * t3968 + t4182);
t4715 = t3388 * t3577;
t4714 = t3404 * t3587;
t4713 = t3405 * t3590;
t4712 = t3406 * t3584;
t4703 = t3479 * t3559;
t4702 = t3480 * t3559;
t4701 = t3481 * t3560;
t4700 = t3482 * t3561;
t4699 = t3483 * t3562;
t4698 = t3484 * t3560;
t4697 = t3485 * t3561;
t4696 = t3486 * t3562;
t4691 = t3559 * t3984;
t4690 = t3560 * t3984;
t4689 = t3561 * t3984;
t4688 = t3562 * t3984;
t4169 = -pkin(7) * t3951 + t4757;
t4687 = t3577 * t4169;
t4686 = t3577 * t3942;
t4685 = t3577 * t3951;
t3578 = 0.1e1 / t3582 ^ 2;
t4684 = t3578 * t3624;
t3926 = t3948 ^ 2;
t4683 = t3578 * t3926;
t4166 = -pkin(7) * t3969 + t4754;
t4682 = t3584 * t4166;
t4681 = t3584 * t3942;
t4680 = t3584 * t3969;
t3585 = 0.1e1 / t3592 ^ 2;
t4679 = t3585 * t3632;
t3933 = t3960 ^ 2;
t4678 = t3585 * t3933;
t4168 = -pkin(7) * t3963 + t4756;
t4677 = t3587 * t4168;
t4676 = t3587 * t3942;
t4675 = t3587 * t3963;
t3588 = 0.1e1 / t3593 ^ 2;
t4674 = t3588 * t3630;
t3931 = t3954 ^ 2;
t4673 = t3588 * t3931;
t4167 = -pkin(7) * t3966 + t4755;
t4672 = t3590 * t4167;
t4671 = t3590 * t3942;
t4670 = t3590 * t3966;
t3591 = 0.1e1 / t3594 ^ 2;
t4669 = t3591 * t3631;
t3932 = t3957 ^ 2;
t4668 = t3591 * t3932;
t4667 = t3596 * t3624;
t3744 = t3942 * t4787 - t4489;
t4666 = t3596 * t3744;
t4665 = t3596 * t3745;
t4663 = t3596 * t3942;
t4662 = t3596 * t3947;
t4661 = t3596 * t3950;
t4660 = t3601 * t3630;
t3749 = t3942 * t4786 - t4488;
t4659 = t3601 * t3749;
t4658 = t3601 * t3753;
t4656 = t3601 * t3942;
t4655 = t3601 * t3953;
t4654 = t3601 * t3962;
t4653 = t3602 * t3631;
t3750 = t3942 * t4785 - t4487;
t4652 = t3602 * t3750;
t4651 = t3602 * t3754;
t4649 = t3602 * t3942;
t4648 = t3602 * t3956;
t4647 = t3602 * t3965;
t4646 = t3603 * t3632;
t3751 = t3942 * t4784 - t4486;
t4645 = t3603 * t3751;
t4644 = t3603 * t3752;
t4642 = t3603 * t3942;
t4641 = t3603 * t3959;
t4640 = t3603 * t3968;
t3548 = t3624 * t3577;
t3552 = t3630 * t3587;
t3553 = t3631 * t3590;
t3554 = t3632 * t3584;
t4565 = t3947 * t3951;
t4639 = (pkin(6) * t4565 + t3805 * t3950) * t3941;
t4638 = (-pkin(6) * t4560 + t3805 * t3947) * t3941;
t4557 = t3953 * t3963;
t4637 = (pkin(6) * t4557 + t3807 * t3962) * t3941;
t4636 = (-pkin(6) * t4538 + t3807 * t3953) * t3941;
t4550 = t3956 * t3966;
t4635 = (pkin(6) * t4550 + t3809 * t3965) * t3941;
t4634 = (-pkin(6) * t4537 + t3809 * t3956) * t3941;
t4543 = t3959 * t3969;
t4633 = (pkin(6) * t4543 + t3811 * t3968) * t3941;
t4632 = (-pkin(6) * t4536 + t3811 * t3959) * t3941;
t4631 = t4169 * t3941;
t4630 = t4168 * t3941;
t4629 = t4167 * t3941;
t4628 = t4166 * t3941;
t4618 = t3847 * t3942;
t4614 = t3866 * t3942;
t4613 = t3867 * t3942;
t4612 = t3868 * t3942;
t4592 = t3942 * t3336;
t4591 = t3942 * t3340;
t4590 = t3942 * t3341;
t4589 = t3942 * t3342;
t3375 = t3942 * t3388;
t3401 = t3942 * t3404;
t3402 = t3942 * t3405;
t3403 = t3942 * t3406;
t4567 = t3947 * t3948;
t4559 = t3953 * t3954;
t4552 = t3956 * t3957;
t4545 = t3959 * t3960;
t4523 = t3596 * t4790;
t4522 = t3601 * t4790;
t4521 = t3602 * t4790;
t4520 = t3603 * t4790;
t3924 = t3941 ^ 2;
t4518 = 0.2e1 * t3924;
t4516 = -0.2e1 * t4606;
t4514 = -0.2e1 * t4566;
t4513 = 0.2e1 * t4566;
t4512 = -0.2e1 * t4558;
t4511 = 0.2e1 * t4558;
t4510 = -0.2e1 * t4551;
t4509 = 0.2e1 * t4551;
t4508 = -0.2e1 * t4544;
t4507 = 0.2e1 * t4544;
t4506 = t4789 * pkin(6);
t4501 = pkin(2) * t3523;
t4500 = pkin(2) * t3524;
t4499 = pkin(2) * t3525;
t4498 = pkin(2) * t3526;
t4481 = pkin(7) * t3523;
t4480 = pkin(7) * t3524;
t4479 = pkin(7) * t3525;
t4478 = pkin(7) * t3526;
t4461 = t3577 * t4731;
t4460 = t3744 * t4731;
t4459 = t3745 * t4731;
t4458 = t3947 * t4731;
t4457 = t3950 * t4731;
t4456 = t3590 * t4730;
t4455 = t3750 * t4730;
t4454 = t3754 * t4730;
t4453 = t3956 * t4730;
t4452 = t3965 * t4730;
t4451 = t3584 * t4729;
t4450 = t3751 * t4729;
t4449 = t3752 * t4729;
t4448 = t3959 * t4729;
t4447 = t3968 * t4729;
t4446 = t3587 * t4728;
t4445 = t3749 * t4728;
t4444 = t3753 * t4728;
t4443 = t3953 * t4728;
t4442 = t3962 * t4728;
t4441 = t3577 * t4727;
t4440 = t3926 * t4727;
t4439 = t3951 * t4727;
t4438 = t3336 * t4603;
t4437 = t3587 * t4726;
t4436 = t3931 * t4726;
t4435 = t3963 * t4726;
t4434 = t3590 * t4725;
t4433 = t3932 * t4725;
t4432 = t3966 * t4725;
t4431 = t3584 * t4724;
t4430 = t3933 * t4724;
t4429 = t3969 * t4724;
t4428 = t3340 * t4596;
t4427 = t3341 * t4595;
t4426 = t3342 * t4594;
t4425 = t3926 * t4715;
t4424 = t3931 * t4714;
t4423 = t3932 * t4713;
t4422 = t3933 * t4712;
t4421 = t3479 * t4691;
t4420 = t3480 * t4691;
t4419 = t3481 * t4690;
t4418 = t3482 * t4689;
t4417 = t3483 * t4688;
t4416 = t3484 * t4690;
t4415 = t3485 * t4689;
t4414 = t3486 * t4688;
t4413 = t3511 * t4666;
t4412 = t3511 * t4665;
t4411 = t3511 * t4662;
t4410 = t3511 * t4661;
t4409 = t3512 * t4666;
t4408 = t3512 * t4665;
t4407 = t3512 * t4662;
t4406 = t3512 * t4661;
t4405 = t3513 * t4659;
t4404 = t3513 * t4658;
t4403 = t3513 * t4655;
t4402 = t3513 * t4654;
t4401 = t3514 * t4659;
t4400 = t3514 * t4658;
t4399 = t3514 * t4655;
t4398 = t3514 * t4654;
t4397 = t3515 * t4652;
t4396 = t3515 * t4651;
t4395 = t3515 * t4648;
t4394 = t3515 * t4647;
t4393 = t3516 * t4652;
t4392 = t3516 * t4651;
t4391 = t3516 * t4648;
t4390 = t3516 * t4647;
t4389 = t3517 * t4645;
t4388 = t3517 * t4644;
t4387 = t3517 * t4641;
t4386 = t3517 * t4640;
t4385 = t3518 * t4645;
t4384 = t3518 * t4644;
t4383 = t3518 * t4641;
t4382 = t3518 * t4640;
t4381 = t3578 * t4810;
t4380 = t3529 * t4685;
t4379 = t3530 * t4685;
t4378 = t3588 * t4809;
t4377 = t3537 * t4675;
t4376 = t3538 * t4675;
t4375 = t3591 * t4808;
t4374 = t3539 * t4670;
t4373 = t3540 * t4670;
t4372 = t3585 * t4807;
t4371 = t3541 * t4680;
t4370 = t3542 * t4680;
t4365 = t3744 * t3523;
t4364 = t3745 * t3523;
t4363 = t3947 * t3523;
t4362 = t3950 * t3523;
t4361 = t3749 * t3524;
t4360 = t3753 * t3524;
t4359 = t3953 * t3524;
t4358 = t3962 * t3524;
t4357 = t3750 * t3525;
t4356 = t3754 * t3525;
t4355 = t3956 * t3525;
t4354 = t3965 * t3525;
t4353 = t3751 * t3526;
t4352 = t3752 * t3526;
t4351 = t3959 * t3526;
t4350 = t3968 * t3526;
t4283 = t3941 * t4567;
t3727 = t4283 - t4586;
t4349 = t3727 * t4691;
t4282 = t3941 * t4562;
t3728 = t4282 + t4588;
t4348 = t3728 * t4691;
t4281 = t3941 * t4559;
t3737 = t4281 - t4579;
t4346 = t3737 * t4690;
t4280 = t3941 * t4554;
t3739 = t4280 + t4585;
t4345 = t3739 * t4690;
t4279 = t3941 * t4552;
t3738 = t4279 - t4578;
t4343 = t3738 * t4689;
t4278 = t3941 * t4547;
t3740 = t4278 + t4583;
t4342 = t3740 * t4689;
t4277 = t3941 * t4545;
t3741 = t4277 - t4577;
t4340 = t3741 * t4688;
t4276 = t3941 * t4540;
t3742 = t4276 + t4581;
t4339 = t3742 * t4688;
t4337 = t3951 * t3548;
t4336 = t3577 * t4639;
t4335 = t3577 * t4638;
t4334 = t3624 * t4683;
t4333 = t3578 * t4561;
t4332 = t3969 * t3554;
t4331 = t3584 * t4633;
t4330 = t3584 * t4632;
t4329 = t3632 * t4678;
t4328 = t3585 * t4539;
t4327 = t3963 * t3552;
t4326 = t3587 * t4637;
t4325 = t3587 * t4636;
t4324 = t3630 * t4673;
t4323 = t3588 * t4553;
t4322 = t3966 * t3553;
t4321 = t3590 * t4635;
t4320 = t3590 * t4634;
t4319 = t3631 * t4668;
t4318 = t3591 * t4546;
t4317 = t3624 * t4666;
t4316 = t3624 * t4665;
t4315 = t3596 * t4565;
t4314 = t3596 * t4560;
t4313 = t3630 * t4659;
t4312 = t3630 * t4658;
t4311 = t3601 * t4557;
t4310 = t3601 * t4538;
t4309 = t3631 * t4652;
t4308 = t3631 * t4651;
t4307 = t3602 * t4550;
t4306 = t3602 * t4537;
t4305 = t3632 * t4645;
t4304 = t3632 * t4644;
t4303 = t3603 * t4543;
t4302 = t3603 * t4536;
t3495 = t3529 * t4686;
t3496 = t3530 * t4686;
t3499 = t3537 * t4676;
t3500 = t3538 * t4676;
t3501 = t3539 * t4671;
t3502 = t3540 * t4671;
t3503 = t3541 * t4681;
t3504 = t3542 * t4681;
t4275 = t3942 * t3523;
t4274 = t3942 * t3524;
t4273 = t3942 * t3525;
t4272 = t3942 * t3526;
t3547 = t3942 * t3548;
t3549 = t3942 * t3552;
t3550 = t3942 * t3553;
t3551 = t3942 * t3554;
t4267 = t4663 / 0.2e1;
t4266 = t4656 / 0.2e1;
t4265 = t4649 / 0.2e1;
t4264 = t4642 / 0.2e1;
t4236 = (0.4e1 * t3927 - 0.2e1) * t4604;
t4234 = (0.4e1 * t3934 - 0.2e1) * t4601;
t4232 = (0.4e1 * t3936 - 0.2e1) * t4599;
t4230 = (0.4e1 * t3938 - 0.2e1) * t4597;
t4229 = t3577 * t4460;
t4228 = t3577 * t4459;
t4227 = t3590 * t4455;
t4226 = t3590 * t4454;
t4225 = t3584 * t4450;
t4224 = t3584 * t4449;
t4223 = t3587 * t4445;
t4222 = t3587 * t4444;
t4221 = t3577 * t4440;
t4220 = t3948 * t4439;
t4219 = t3587 * t4436;
t4218 = t3954 * t4435;
t4217 = t3590 * t4433;
t4216 = t3957 * t4432;
t4215 = t3584 * t4430;
t4214 = t3960 * t4429;
t4213 = t4561 * t4715;
t4212 = t4553 * t4714;
t4211 = t4546 * t4713;
t4210 = t4539 * t4712;
t4209 = t4603 * t3523;
t4208 = t4596 * t3524;
t4207 = t4595 * t3525;
t4206 = t4594 * t3526;
t4205 = t3577 * t4283;
t4204 = t3577 * t4282;
t4203 = t3624 * t4333;
t4202 = t3584 * t4277;
t4201 = t3584 * t4276;
t4200 = t3632 * t4328;
t4199 = t3587 * t4281;
t4198 = t3587 * t4280;
t4197 = t3630 * t4323;
t4196 = t3590 * t4279;
t4195 = t3590 * t4278;
t4194 = t3631 * t4318;
t4165 = 0.2e1 * t3947 * t4282;
t4164 = 0.2e1 * t3953 * t4280;
t4163 = 0.2e1 * t3956 * t4278;
t4162 = 0.2e1 * t3959 * t4276;
t3845 = 0.2e1 * t3904 + pkin(1);
t3940 = t3971 ^ 2;
t4161 = pkin(1) * t3904 + t3845 * t3849 + t3928 * t4610 + t3940;
t3858 = 0.2e1 * t3911 + pkin(1);
t4160 = pkin(1) * t3911 + t3858 * t3872 + t3935 * t4610 + t3940;
t3861 = 0.2e1 * t3914 + pkin(1);
t4159 = pkin(1) * t3914 + t3861 * t3873 + t3937 * t4610 + t3940;
t3864 = 0.2e1 * t3917 + pkin(1);
t4158 = pkin(1) * t3917 + t3864 * t3874 + t3939 * t4610 + t3940;
t4157 = t3577 * t4249;
t4156 = t3584 * t4246;
t4155 = t3587 * t4248;
t4154 = t3590 * t4247;
t4153 = t3577 * t4237;
t4152 = t3584 * t4231;
t4151 = t3587 * t4235;
t4150 = t3590 * t4233;
t4149 = t3577 * t4220;
t4148 = t3587 * t4218;
t4147 = t3590 * t4216;
t4146 = t3584 * t4214;
t4129 = -t3848 * t3942 + t4489;
t4128 = -t3869 * t3942 + t4488;
t4127 = -t3870 * t3942 + t4487;
t4126 = -t3871 * t3942 + t4486;
t4125 = t3596 * t4169;
t4124 = t3601 * t4168;
t4123 = t3602 * t4167;
t4122 = t3603 * t4166;
t3359 = 0.2e1 * t3495 + t3472;
t4121 = (t3359 + t3472) * t3497;
t3361 = 0.2e1 * t3496 + t3471;
t4120 = (t3361 + t3471) * t3498;
t3389 = 0.2e1 * t3499 + t3474;
t4119 = (t3389 + t3474) * t3505;
t3391 = 0.2e1 * t3500 + t3473;
t4118 = (t3391 + t3473) * t3506;
t3393 = 0.2e1 * t3501 + t3476;
t4117 = (t3393 + t3476) * t3507;
t3395 = 0.2e1 * t3502 + t3475;
t4116 = (t3395 + t3475) * t3508;
t3397 = 0.2e1 * t3503 + t3478;
t4115 = (t3397 + t3478) * t3509;
t3399 = 0.2e1 * t3504 + t3477;
t4114 = (t3399 + t3477) * t3510;
t3446 = 0.2e1 * t3547 - t3523;
t4113 = (t3446 - t3523) * t3548;
t3461 = 0.2e1 * t3551 - t3526;
t4112 = (t3461 - t3526) * t3554;
t3457 = 0.2e1 * t3549 - t3524;
t4111 = (t3457 - t3524) * t3552;
t3459 = 0.2e1 * t3550 - t3525;
t4110 = (t3459 - t3525) * t3553;
t4101 = -t4169 * t4516 + t4506;
t4100 = -t4168 * t4516 + t4506;
t4099 = -t4167 * t4516 + t4506;
t4098 = -t4166 * t4516 + t4506;
t3183 = 0.2e1 * t3375 + t3336;
t4089 = t3183 * t4727 + t3388 * t4731;
t4088 = t3183 * t3498 + t3388 * t3471;
t4087 = t3183 * t3497 + t3388 * t3472;
t4086 = t3183 * t3548 - t3388 * t3523;
t3197 = 0.2e1 * t3401 + t3340;
t4085 = t3197 * t4726 + t3404 * t4728;
t4084 = t3197 * t3506 + t3404 * t3473;
t4083 = t3197 * t3505 + t3404 * t3474;
t4082 = t3197 * t3552 - t3404 * t3524;
t3199 = 0.2e1 * t3402 + t3341;
t4081 = t3199 * t4725 + t3405 * t4730;
t4080 = t3199 * t3508 + t3405 * t3475;
t4079 = t3199 * t3507 + t3405 * t3476;
t4078 = t3199 * t3553 - t3405 * t3525;
t3201 = 0.2e1 * t3403 + t3342;
t4077 = t3201 * t4724 + t3406 * t4729;
t4076 = t3201 * t3510 + t3406 * t3477;
t4075 = t3201 * t3509 + t3406 * t3478;
t4074 = t3201 * t3554 - t3406 * t3526;
t4065 = t3577 * t4129;
t4064 = t3584 * t4126;
t4063 = t3587 * t4128;
t4062 = t3590 * t4127;
t4061 = t3577 * (t3359 * t3530 + t3471 * t3529);
t4060 = t3577 * (t3359 * t3624 - t3523 * t3529);
t4059 = t3577 * (t3361 * t3529 + t3472 * t3530);
t4058 = t3577 * (t3361 * t3624 - t3523 * t3530);
t4057 = t3577 * (t3446 * t3530 + t3511 * t4667);
t4056 = t3577 * (t3446 * t3529 + t3512 * t4667);
t4055 = t3584 * (t3397 * t3542 + t3477 * t3541);
t4054 = t3584 * (t3397 * t3632 - t3526 * t3541);
t4053 = t3584 * (t3399 * t3541 + t3478 * t3542);
t4052 = t3584 * (t3399 * t3632 - t3526 * t3542);
t4051 = t3584 * (t3461 * t3542 + t3517 * t4646);
t4050 = t3584 * (t3461 * t3541 + t3518 * t4646);
t4049 = t3587 * (t3389 * t3538 + t3473 * t3537);
t4048 = t3587 * (t3389 * t3630 - t3524 * t3537);
t4047 = t3587 * (t3391 * t3537 + t3474 * t3538);
t4046 = t3587 * (t3391 * t3630 - t3524 * t3538);
t4045 = t3587 * (t3457 * t3538 + t3513 * t4660);
t4044 = t3587 * (t3457 * t3537 + t3514 * t4660);
t4043 = t3590 * (t3393 * t3540 + t3475 * t3539);
t4042 = t3590 * (t3393 * t3631 - t3525 * t3539);
t4041 = t3590 * (t3395 * t3539 + t3476 * t3540);
t4040 = t3590 * (t3395 * t3631 - t3525 * t3540);
t4039 = t3590 * (t3459 * t3540 + t3515 * t4653);
t4038 = t3590 * (t3459 * t3539 + t3516 * t4653);
t4029 = t3359 * t4727 + t3529 * t4461;
t4028 = t3361 * t4727 + t3530 * t4461;
t4027 = t3446 * t4727 + t3624 * t4461;
t4026 = t3393 * t4725 + t3539 * t4456;
t4025 = t3395 * t4725 + t3540 * t4456;
t4024 = t3459 * t4725 + t3631 * t4456;
t4023 = t3397 * t4724 + t3541 * t4451;
t4022 = t3399 * t4724 + t3542 * t4451;
t4021 = t3461 * t4724 + t3632 * t4451;
t4020 = t3389 * t4726 + t3537 * t4446;
t4019 = t3391 * t4726 + t3538 * t4446;
t4018 = t3457 * t4726 + t3630 * t4446;
t4017 = t3577 * t4101;
t4016 = t3584 * t4098;
t4015 = t3587 * t4100;
t4014 = t3590 * t4099;
t4013 = (-t4485 - t4618) * t4691;
t4012 = (-t4484 - t4614) * t4690;
t4011 = (-t4483 - t4613) * t4689;
t4010 = (-t4482 - t4612) * t4688;
t4005 = t3951 * (t3947 * t4516 + t4789 * t4562);
t4004 = t3951 * (t3950 * t4516 - t4789 * t4567);
t4003 = t3963 * (t3953 * t4516 + t4789 * t4554);
t4002 = t3963 * (t3962 * t4516 - t4789 * t4559);
t4001 = t3966 * (t3956 * t4516 + t4789 * t4547);
t4000 = t3966 * (t3965 * t4516 - t4789 * t4552);
t3999 = t3969 * (t3959 * t4516 + t4789 * t4540);
t3998 = t3969 * (t3968 * t4516 - t4789 * t4545);
t3997 = t3577 * t4005;
t3996 = t3577 * t4004;
t3995 = t3584 * t3999;
t3994 = t3584 * t3998;
t3993 = t3587 * t4003;
t3992 = t3587 * t4002;
t3991 = t3590 * t4001;
t3990 = t3590 * t4000;
t3812 = t3922 ^ 2 + t3923 ^ 2;
t3627 = t3632 ^ 2;
t3626 = t3631 ^ 2;
t3625 = t3630 ^ 2;
t3623 = t3624 ^ 2;
t3536 = t3542 ^ 2;
t3535 = t3541 ^ 2;
t3534 = t3540 ^ 2;
t3533 = t3539 ^ 2;
t3532 = t3538 ^ 2;
t3531 = t3537 ^ 2;
t3528 = t3530 ^ 2;
t3527 = t3529 ^ 2;
t3462 = t3551 - t3526;
t3460 = t3550 - t3525;
t3458 = t3549 - t3524;
t3456 = t3551 - t3526 / 0.2e1;
t3455 = t3550 - t3525 / 0.2e1;
t3454 = t3549 - t3524 / 0.2e1;
t3453 = -t4272 / 0.2e1 + t3554;
t3452 = -t4273 / 0.2e1 + t3553;
t3451 = -t4274 / 0.2e1 + t3552;
t3450 = t3551 * t3868 - t4478;
t3449 = t3550 * t3867 - t4479;
t3448 = t3549 * t3866 - t4480;
t3447 = t3547 - t3523;
t3442 = t3547 - t3523 / 0.2e1;
t3441 = -t4275 / 0.2e1 + t3548;
t3440 = t3547 * t3847 - t4481;
t3438 = t3941 * t4332 - t4366;
t3437 = t3941 * t4322 - t4367;
t3436 = t3941 * t4327 - t4368;
t3435 = t3554 * t4628 + t4242;
t3434 = t3553 * t4629 + t4243;
t3433 = t3552 * t4630 + t4244;
t3432 = t3941 * t4337 - t4369;
t3431 = t3548 * t4631 + t4245;
t3426 = t3462 * t3959 + t3632 * t4201;
t3425 = t3460 * t3956 + t3631 * t4195;
t3424 = t3458 * t3953 + t3630 * t4198;
t3423 = t3462 * t3968 - t3632 * t4202;
t3422 = t3460 * t3965 - t3631 * t4196;
t3421 = t3458 * t3962 - t3630 * t4199;
t3420 = t3632 * t4064 + 0.2e1 * t4498;
t3419 = t3631 * t4062 + 0.2e1 * t4499;
t3418 = t3630 * t4063 + 0.2e1 * t4500;
t3417 = t3447 * t3947 + t3624 * t4204;
t3416 = t3447 * t3950 - t3624 * t4205;
t3415 = t3624 * t4065 + 0.2e1 * t4501;
t3414 = -t3449 * t3965 + t3631 * t4320;
t3413 = -t3448 * t3962 + t3630 * t4325;
t3412 = -t3450 * t3968 + t3632 * t4330;
t3411 = -t3450 * t3959 - t3632 * t4331;
t3410 = -t3449 * t3956 - t3631 * t4321;
t3409 = -t3448 * t3953 - t3630 * t4326;
t3408 = -t3440 * t3947 - t3624 * t4336;
t3407 = -t3440 * t3950 + t3624 * t4335;
t3400 = t3504 + t3477;
t3398 = t3503 + t3478;
t3396 = t3502 + t3475;
t3394 = t3501 + t3476;
t3392 = t3500 + t3473;
t3390 = t3499 + t3474;
t3387 = t3504 + t3477 / 0.2e1;
t3386 = t3503 + t3478 / 0.2e1;
t3385 = t3502 + t3475 / 0.2e1;
t3384 = t3501 + t3476 / 0.2e1;
t3383 = t3500 + t3473 / 0.2e1;
t3382 = t3499 + t3474 / 0.2e1;
t3381 = t3518 * t4264 + t3509;
t3380 = t3517 * t4264 + t3510;
t3379 = t3516 * t4265 + t3507;
t3378 = t3515 * t4265 + t3508;
t3377 = t3514 * t4266 + t3505;
t3376 = t3513 * t4266 + t3506;
t3374 = pkin(7) * t3477 + t3504 * t3868;
t3373 = pkin(7) * t3478 + t3503 * t3868;
t3372 = pkin(7) * t3475 + t3502 * t3867;
t3371 = pkin(7) * t3476 + t3501 * t3867;
t3370 = pkin(7) * t3473 + t3500 * t3866;
t3369 = pkin(7) * t3474 + t3499 * t3866;
t3362 = t3496 + t3471;
t3360 = t3495 + t3472;
t3358 = t3496 + t3471 / 0.2e1;
t3357 = t3495 + t3472 / 0.2e1;
t3356 = t3512 * t4267 + t3497;
t3355 = t3511 * t4267 + t3498;
t3354 = t3632 * t4156 + t3554 + t4272;
t3353 = t3631 * t4154 + t3553 + t4273;
t3352 = t3630 * t4155 + t3552 + t4274;
t3351 = pkin(7) * t3471 + t3496 * t3847;
t3350 = pkin(7) * t3472 + t3495 * t3847;
t3347 = t3460 * t4509 + t3631 * t4150;
t3346 = t3458 * t4511 + t3630 * t4151;
t3345 = t3462 * t4507 + t3632 * t4152;
t3344 = t3624 * t4157 + t3548 + t4275;
t3343 = t3447 * t4513 + t3624 * t4153;
t3334 = (t4371 + t4414) * t3941;
t3333 = (t4374 + t4415) * t3941;
t3332 = (t4377 + t4416) * t3941;
t3331 = (t4370 + t4417) * t3941;
t3330 = (t4373 + t4418) * t3941;
t3329 = (t4376 + t4419) * t3941;
t3328 = (-pkin(7) * t4414 + t3541 * t4682) * t3941;
t3327 = (-pkin(7) * t4415 + t3539 * t4672) * t3941;
t3326 = (-pkin(7) * t4416 + t3537 * t4677) * t3941;
t3325 = -0.2e1 * t3453 * t3920 - 0.2e1 * t3456 * t4482;
t3324 = 0.2e1 * t3453 * t4784 - 0.2e1 * t3456 * t4486;
t3323 = -0.2e1 * t3452 * t3919 - 0.2e1 * t3455 * t4483;
t3322 = -0.2e1 * t3451 * t3918 - 0.2e1 * t3454 * t4484;
t3321 = 0.2e1 * t3452 * t4785 - 0.2e1 * t3455 * t4487;
t3320 = 0.2e1 * t3451 * t4786 - 0.2e1 * t3454 * t4488;
t3316 = (-pkin(7) * t4417 + t3542 * t4682) * t3941;
t3315 = (-pkin(7) * t4418 + t3540 * t4672) * t3941;
t3314 = (-pkin(7) * t4419 + t3538 * t4677) * t3941;
t3313 = (t4380 + t4420) * t3941;
t3312 = (t4379 + t4421) * t3941;
t3310 = (-pkin(7) * t4420 + t3529 * t4687) * t3941;
t3309 = (-pkin(7) * t4421 + t3530 * t4687) * t3941;
t3308 = -0.2e1 * t3441 * t3905 - 0.2e1 * t3442 * t4485;
t3307 = 0.2e1 * t3441 * t4787 - 0.2e1 * t3442 * t4489;
t3294 = -t3420 * t3968 - t3435 * t3959;
t3293 = t3420 * t3959 - t3435 * t3968;
t3292 = -t3419 * t3965 - t3434 * t3956;
t3291 = t3419 * t3956 - t3434 * t3965;
t3290 = -t3418 * t3962 - t3433 * t3953;
t3289 = t3418 * t3953 - t3433 * t3962;
t3288 = t3632 * t3995 + t3742 * t4366 + t3959 * t4206;
t3287 = t3631 * t3991 + t3740 * t4367 + t3956 * t4207;
t3286 = t3630 * t3993 + t3739 * t4368 + t3953 * t4208;
t3285 = t3632 * t3994 - t3741 * t4366 + t3968 * t4206;
t3284 = t3631 * t3990 - t3738 * t4367 + t3965 * t4207;
t3283 = t3630 * t3992 - t3737 * t4368 + t3962 * t4208;
t3282 = -t3415 * t3950 - t3431 * t3947;
t3281 = t3415 * t3947 - t3431 * t3950;
t3280 = t3400 * t3959 + t3542 * t4201;
t3279 = t3398 * t3959 + t3541 * t4201;
t3278 = t3396 * t3956 + t3540 * t4195;
t3277 = t3394 * t3956 + t3539 * t4195;
t3276 = t3392 * t3953 + t3538 * t4198;
t3275 = t3390 * t3953 + t3537 * t4198;
t3274 = t3400 * t3968 - t3542 * t4202;
t3273 = t3398 * t3968 - t3541 * t4202;
t3272 = t3396 * t3965 - t3540 * t4196;
t3271 = t3394 * t3965 - t3539 * t4196;
t3270 = t3392 * t3962 - t3538 * t4199;
t3269 = t3390 * t3962 - t3537 * t4199;
t3268 = t3517 * t4520 + t3542 * t4064;
t3267 = t3518 * t4520 + t3541 * t4064;
t3266 = t3515 * t4521 + t3540 * t4062;
t3265 = t3516 * t4521 + t3539 * t4062;
t3264 = t3513 * t4522 + t3538 * t4063;
t3263 = t3514 * t4522 + t3537 * t4063;
t3262 = t3624 * t3997 + t3728 * t4369 + t3947 * t4209;
t3261 = t3624 * t3996 - t3727 * t4369 + t3950 * t4209;
t3260 = -t3372 * t3965 + t3540 * t4320;
t3259 = -t3371 * t3965 + t3539 * t4320;
t3258 = -t3370 * t3962 + t3538 * t4325;
t3257 = -t3369 * t3962 + t3537 * t4325;
t3256 = -t3374 * t3968 + t3542 * t4330;
t3255 = -t3374 * t3959 - t3542 * t4331;
t3254 = -t3373 * t3968 + t3541 * t4330;
t3253 = -t3373 * t3959 - t3541 * t4331;
t3252 = -t3372 * t3956 - t3540 * t4321;
t3251 = -t3371 * t3956 - t3539 * t4321;
t3250 = -t3370 * t3953 - t3538 * t4326;
t3249 = -t3369 * t3953 - t3537 * t4326;
t3248 = (-t3774 * (t4158 * t3736 + (t3638 * t4607 + (t3736 * t3864 - 0.2e1 * t4542) * t3915) * t3969 + t4791 * t3735) + (t4158 * t3735 + (t3637 * t4607 + (t3735 * t3864 + 0.2e1 * t4541) * t3915) * t3969 - t4791 * t3736) * t3778) * t4890 * t4593;
t3247 = (-t3773 * (t4159 * t3734 + (t3636 * t4608 + (t3734 * t3861 - 0.2e1 * t4549) * t3912) * t3966 + t4792 * t3733) + (t4159 * t3733 + (t3635 * t4608 + (t3733 * t3861 + 0.2e1 * t4548) * t3912) * t3966 - t4792 * t3734) * t3777) * t4889 * t4593;
t3246 = (-(t4160 * t3732 + (t3634 * t4609 + (t3732 * t3858 - 0.2e1 * t4556) * t3909) * t3963 + t4793 * t3731) * t3772 + (t4160 * t3731 + (t3633 * t4609 + (t3731 * t3858 + 0.2e1 * t4555) * t3909) * t3963 - t4793 * t3732) * t3776) * t4888 * t4593;
t3245 = t3362 * t3947 + t3530 * t4204;
t3244 = t3360 * t3947 + t3529 * t4204;
t3243 = t3362 * t3950 - t3530 * t4205;
t3242 = t3360 * t3950 - t3529 * t4205;
t3241 = t3511 * t4523 + t3530 * t4065;
t3240 = t3512 * t4523 + t3529 * t4065;
t3239 = (-t3771 * (t4161 * t3730 + (t3629 * t4611 + (t3730 * t3845 - 0.2e1 * t4564) * t3902) * t3951 + t4794 * t3729) + t3775 * (t4161 * t3729 + (t3628 * t4611 + (t3729 * t3845 + 0.2e1 * t4563) * t3902) * t3951 - t4794 * t3730)) * t4887 * t4593;
t3238 = -t3351 * t3947 - t3530 * t4336;
t3237 = -t3350 * t3947 - t3529 * t4336;
t3236 = -t3351 * t3950 + t3530 * t4335;
t3235 = -t3350 * t3950 + t3529 * t4335;
t3234 = -t3517 * t4642 + t3542 * t4156 + t3510;
t3233 = -t3518 * t4642 + t3541 * t4156 + t3509;
t3232 = -t3515 * t4649 + t3540 * t4154 + t3508;
t3231 = -t3516 * t4649 + t3539 * t4154 + t3507;
t3230 = -t3513 * t4656 + t3538 * t4155 + t3506;
t3229 = -t3514 * t4656 + t3537 * t4155 + t3505;
t3228 = t3396 * t4509 + t3540 * t4150;
t3227 = t3394 * t4509 + t3539 * t4150;
t3226 = t3392 * t4511 + t3538 * t4151;
t3225 = t3390 * t4511 + t3537 * t4151;
t3224 = t3400 * t4507 + t3542 * t4152;
t3223 = t3398 * t4507 + t3541 * t4152;
t3222 = -t3511 * t4663 + t3530 * t4157 + t3498;
t3221 = -t3512 * t4663 + t3529 * t4157 + t3497;
t3220 = t3362 * t4513 + t3530 * t4153;
t3219 = t3360 * t4513 + t3529 * t4153;
t3218 = -0.2e1 * t3380 * t3920 - 0.2e1 * t3387 * t4482;
t3217 = 0.2e1 * t3380 * t4784 - 0.2e1 * t3387 * t4486;
t3216 = -0.2e1 * t3381 * t3920 - 0.2e1 * t3386 * t4482;
t3215 = 0.2e1 * t3381 * t4784 - 0.2e1 * t3386 * t4486;
t3214 = -0.2e1 * t3378 * t3919 - 0.2e1 * t3385 * t4483;
t3213 = -0.2e1 * t3379 * t3919 - 0.2e1 * t3384 * t4483;
t3212 = -0.2e1 * t3376 * t3918 - 0.2e1 * t3383 * t4484;
t3211 = -0.2e1 * t3377 * t3918 - 0.2e1 * t3382 * t4484;
t3210 = 0.2e1 * t3378 * t4785 - 0.2e1 * t3385 * t4487;
t3209 = 0.2e1 * t3379 * t4785 - 0.2e1 * t3384 * t4487;
t3208 = 0.2e1 * t3376 * t4786 - 0.2e1 * t3383 * t4488;
t3207 = 0.2e1 * t3377 * t4786 - 0.2e1 * t3382 * t4488;
t3206 = -0.2e1 * t3355 * t3905 - 0.2e1 * t3358 * t4485;
t3205 = -0.2e1 * t3356 * t3905 - 0.2e1 * t3357 * t4485;
t3204 = 0.2e1 * t3355 * t4787 - 0.2e1 * t3358 * t4489;
t3203 = 0.2e1 * t3356 * t4787 - 0.2e1 * t3357 * t4489;
t3202 = t3403 + t3342;
t3200 = t3402 + t3341;
t3198 = t3401 + t3340;
t3196 = t4589 / 0.2e1 + t3406;
t3195 = t4590 / 0.2e1 + t3405;
t3194 = t4591 / 0.2e1 + t3404;
t3193 = t3403 - t3469 / 0.2e1 + t3470 / 0.2e1;
t3192 = t3402 - t3467 / 0.2e1 + t3468 / 0.2e1;
t3191 = t3401 - t3465 / 0.2e1 + t3466 / 0.2e1;
t3190 = t3403 * t3868 + t4762;
t3189 = t3402 * t3867 + t4763;
t3188 = t3401 * t3866 + t4764;
t3184 = t3375 + t3336;
t3182 = t4592 / 0.2e1 + t3388;
t3181 = t3375 - t3463 / 0.2e1 + t3464 / 0.2e1;
t3180 = t3375 * t3847 + t4765;
t3178 = t4366 * t4612 + ((pkin(6) * t4366 + t4478) * t3969 - t3960 * t4498) * t3941 + t3632 * t4016;
t3177 = t4367 * t4613 + ((pkin(6) * t4367 + t4479) * t3966 - t3957 * t4499) * t3941 + t3631 * t4014;
t3176 = t4368 * t4614 + ((pkin(6) * t4368 + t4480) * t3963 - t3954 * t4500) * t3941 + t3630 * t4015;
t3175 = t3530 * t4684 + t3538 * t4674 + t3540 * t4669 + t3542 * t4679;
t3174 = t3529 * t4684 + t3537 * t4674 + t3539 * t4669 + t3541 * t4679;
t3173 = t3354 * t3938 + t3456 * t4162 + t3462 * t3942;
t3172 = t3353 * t3936 + t3455 * t4163 + t3460 * t3942;
t3171 = t3352 * t3934 + t3454 * t4164 + t3458 * t3942;
t3170 = (t3530 * t4334 + t3538 * t4324 + t3540 * t4319 + t3542 * t4329) * t3924;
t3169 = (t3529 * t4334 + t3537 * t4324 + t3539 * t4319 + t3541 * t4329) * t3924;
t3168 = t3354 * t4508 + t3456 * t4230;
t3167 = t3353 * t4510 + t3455 * t4232;
t3166 = t3352 * t4512 + t3454 * t4234;
t3165 = t4369 * t4618 + ((pkin(6) * t4369 + t4481) * t3951 - t3948 * t4501) * t3941 + t3624 * t4017;
t3164 = (t3530 * t4203 + t3538 * t4197 + t3540 * t4194 + t3542 * t4200) * t4518;
t3163 = (t3529 * t4203 + t3537 * t4197 + t3539 * t4194 + t3541 * t4200) * t4518;
t3162 = t3344 * t3927 + t3442 * t4165 + t3447 * t3942;
t3161 = t3344 * t4514 + t3442 * t4236;
t3160 = (t3406 * t3969 - t4142 * t4688) * t3941;
t3159 = (t3405 * t3966 - t4143 * t4689) * t3941;
t3158 = (t3404 * t3963 - t4144 * t4690) * t3941;
t3157 = t3406 * t4628 + t4766;
t3156 = t3405 * t4629 + t4767;
t3155 = t3404 * t4630 + t4768;
t3154 = (t3388 * t3951 - t4145 * t4691) * t3941;
t3153 = t3388 * t4631 + t4769;
t3148 = -t3267 * t3968 - t3328 * t3959;
t3147 = t3267 * t3959 - t3328 * t3968;
t3146 = -t3265 * t3965 - t3327 * t3956;
t3145 = t3265 * t3956 - t3327 * t3965;
t3144 = -t3263 * t3962 - t3326 * t3953;
t3143 = t3263 * t3953 - t3326 * t3962;
t3142 = -t3268 * t3968 - t3316 * t3959;
t3141 = t3268 * t3959 - t3316 * t3968;
t3140 = -t3266 * t3965 - t3315 * t3956;
t3139 = t3266 * t3956 - t3315 * t3965;
t3138 = -t3264 * t3962 - t3314 * t3953;
t3137 = t3264 * t3953 - t3314 * t3962;
t3136 = (-t3486 * t4339 - t3518 * t4303) * t3941 + t3541 * t3995;
t3135 = (-t3485 * t4342 - t3516 * t4307) * t3941 + t3539 * t3991;
t3134 = (-t3484 * t4345 - t3514 * t4311) * t3941 + t3537 * t3993;
t3133 = (t3486 * t4340 - t3518 * t4302) * t3941 + t3541 * t3994;
t3132 = (t3485 * t4343 - t3516 * t4306) * t3941 + t3539 * t3990;
t3131 = (t3484 * t4346 - t3514 * t4310) * t3941 + t3537 * t3992;
t3130 = (-t3483 * t4339 - t3517 * t4303) * t3941 + t3542 * t3995;
t3129 = (-t3482 * t4342 - t3515 * t4307) * t3941 + t3540 * t3991;
t3128 = (-t3481 * t4345 - t3513 * t4311) * t3941 + t3538 * t3993;
t3127 = (t3483 * t4340 - t3517 * t4302) * t3941 + t3542 * t3994;
t3126 = (t3482 * t4343 - t3515 * t4306) * t3941 + t3540 * t3990;
t3125 = (t3481 * t4346 - t3513 * t4310) * t3941 + t3538 * t3992;
t3124 = -t3240 * t3950 - t3310 * t3947;
t3123 = t3240 * t3947 - t3310 * t3950;
t3122 = -t3241 * t3950 - t3309 * t3947;
t3121 = t3241 * t3947 - t3309 * t3950;
t3120 = (-t3480 * t4348 - t3512 * t4315) * t3941 + t3529 * t3997;
t3119 = (t3480 * t4349 - t3512 * t4314) * t3941 + t3529 * t3996;
t3118 = (-t3479 * t4348 - t3511 * t4315) * t3941 + t3530 * t3997;
t3117 = (t3479 * t4349 - t3511 * t4314) * t3941 + t3530 * t3996;
t3116 = t3202 * t3959 + t3406 * t4276;
t3115 = t3200 * t3956 + t3405 * t4278;
t3114 = t3198 * t3953 + t3404 * t4280;
t3113 = t3202 * t3968 - t3406 * t4277;
t3112 = t3200 * t3965 - t3405 * t4279;
t3111 = t3198 * t3962 - t3404 * t4281;
t3110 = t3342 * t4790 + t3406 * t4126;
t3109 = t3341 * t4790 + t3405 * t4127;
t3108 = t3340 * t4790 + t3404 * t4128;
t3107 = -t3190 * t3968 + t3406 * t4632;
t3106 = -t3190 * t3959 - t3406 * t4633;
t3105 = -t3189 * t3956 - t3405 * t4635;
t3104 = -t3188 * t3953 - t3404 * t4637;
t3103 = -t3189 * t3965 + t3405 * t4634;
t3102 = -t3188 * t3962 + t3404 * t4636;
t3101 = t4372 + t4375 + t4378 + t4381;
t3100 = t3184 * t3947 + t3388 * t4282;
t3099 = t3184 * t3950 - t3388 * t4283;
t3098 = t3336 * t4790 + t3388 * t4129;
t3097 = (t3926 * t4381 + t3931 * t4378 + t3932 * t4375 + t3933 * t4372) * t3924;
t3096 = -t3180 * t3950 + t3388 * t4638;
t3095 = -t3180 * t3947 - t3388 * t4639;
t3094 = (t4318 * t4808 + t4323 * t4809 + t4328 * t4807 + t4333 * t4810) * t4518;
t3093 = (t3486 * t4010 + t3518 * t4122) * t3941 + t3541 * t4016;
t3092 = (t3485 * t4011 + t3516 * t4123) * t3941 + t3539 * t4014;
t3091 = (t3484 * t4012 + t3514 * t4124) * t3941 + t3537 * t4015;
t3090 = (t3483 * t4010 + t3517 * t4122) * t3941 + t3542 * t4016;
t3089 = (t3482 * t4011 + t3515 * t4123) * t3941 + t3540 * t4014;
t3088 = (t3481 * t4012 + t3513 * t4124) * t3941 + t3538 * t4015;
t3087 = (t3480 * t4013 + t3512 * t4125) * t3941 + t3529 * t4017;
t3086 = t3234 * t3938 + t3387 * t4162 + t3400 * t3942;
t3085 = t3233 * t3938 + t3386 * t4162 + t3398 * t3942;
t3084 = t3232 * t3936 + t3385 * t4163 + t3396 * t3942;
t3083 = t3231 * t3936 + t3384 * t4163 + t3394 * t3942;
t3082 = t3230 * t3934 + t3383 * t4164 + t3392 * t3942;
t3081 = t3229 * t3934 + t3382 * t4164 + t3390 * t3942;
t3080 = (t3479 * t4013 + t3511 * t4125) * t3941 + t3530 * t4017;
t3079 = t3234 * t4508 + t3387 * t4230;
t3078 = t3233 * t4508 + t3386 * t4230;
t3077 = t3232 * t4510 + t3385 * t4232;
t3076 = t3231 * t4510 + t3384 * t4232;
t3075 = t3230 * t4512 + t3383 * t4234;
t3074 = t3229 * t4512 + t3382 * t4234;
t3073 = t3406 * t4246 + t3406 - t4589;
t3072 = t3405 * t4247 + t3405 - t4590;
t3071 = t3404 * t4248 + t3404 - t4591;
t3070 = t3200 * t4509 + t3405 * t4233;
t3069 = t3198 * t4511 + t3404 * t4235;
t3068 = t3202 * t4507 + t3406 * t4231;
t3067 = t3222 * t3927 + t3358 * t4165 + t3362 * t3942;
t3066 = t3221 * t3927 + t3357 * t4165 + t3360 * t3942;
t3065 = t3222 * t4514 + t3358 * t4236;
t3064 = t3221 * t4514 + t3357 * t4236;
t3063 = t3388 * t4249 + t3388 - t4592;
t3062 = t3184 * t4513 + t3388 * t4237;
t3061 = -0.2e1 * t3193 * t4482 - 0.2e1 * t3196 * t3920;
t3060 = -0.2e1 * t3193 * t4486 + 0.2e1 * t3196 * t4784;
t3059 = -0.2e1 * t3192 * t4483 - 0.2e1 * t3195 * t3919;
t3058 = -0.2e1 * t3191 * t4484 - 0.2e1 * t3194 * t3918;
t3057 = -0.2e1 * t3192 * t4487 + 0.2e1 * t3195 * t4785;
t3056 = -0.2e1 * t3191 * t4488 + 0.2e1 * t3194 * t4786;
t3055 = -0.2e1 * t3181 * t4485 - 0.2e1 * t3182 * t3905;
t3054 = -0.2e1 * t3181 * t4489 + 0.2e1 * t3182 * t4787;
t3053 = -t3178 * t3959 - t3968 * t4851;
t3052 = -t3178 * t3968 + t3959 * t4851;
t3051 = -t3177 * t3956 - t3965 * t4852;
t3050 = -t3177 * t3965 + t3956 * t4852;
t3049 = -t3176 * t3953 - t3962 * t4853;
t3048 = -t3962 * t3176 + t3953 * t4853;
t3047 = -t3947 * t3165 - t3950 * t4854;
t3046 = -t3950 * t3165 + t3947 * t4854;
t3045 = -t3110 * t3968 - t3157 * t3959;
t3044 = t3110 * t3959 - t3157 * t3968;
t3043 = -t3109 * t3965 - t3156 * t3956;
t3042 = t3109 * t3956 - t3156 * t3965;
t3041 = -t3108 * t3962 - t3155 * t3953;
t3040 = t3108 * t3953 - t3155 * t3962;
t3039 = t3298 * t3742 + t3406 * t3999 - t3959 * t4426;
t3038 = t3297 * t3740 + t3405 * t4001 - t3956 * t4427;
t3037 = t3296 * t3739 + t3404 * t4003 - t3953 * t4428;
t3036 = -t3298 * t3741 + t3406 * t3998 - t3968 * t4426;
t3035 = -t3297 * t3738 + t3405 * t4000 - t3965 * t4427;
t3034 = -t3296 * t3737 + t3404 * t4002 - t3962 * t4428;
t3033 = -t3098 * t3950 - t3153 * t3947;
t3032 = t3098 * t3947 - t3153 * t3950;
t3031 = t3295 * t3728 + t3388 * t4005 - t3947 * t4438;
t3030 = -t3295 * t3727 + t3388 * t4004 - t3950 * t4438;
t3029 = t3298 * t4612 + ((pkin(6) * t3298 - t4762) * t3969 + t3342 * t4754) * t3941 + t4098 * t3406;
t3028 = t3297 * t4613 + ((pkin(6) * t3297 - t4763) * t3966 + t3341 * t4755) * t3941 + t4099 * t3405;
t3027 = t3296 * t4614 + ((pkin(6) * t3296 - t4764) * t3963 + t3340 * t4756) * t3941 + t4100 * t3404;
t3026 = t3295 * t4618 + ((pkin(6) * t3295 - t4765) * t3951 + t3336 * t4757) * t3941 + t4101 * t3388;
t3025 = t3073 * t3938 + t3193 * t4162 + t3202 * t3942;
t3024 = t3072 * t3936 + t3192 * t4163 + t3200 * t3942;
t3023 = t3071 * t3934 + t3191 * t4164 + t3198 * t3942;
t3022 = t3073 * t4508 + t3193 * t4230;
t3021 = t3072 * t4510 + t3192 * t4232;
t3020 = t3071 * t4512 + t3191 * t4234;
t3019 = -t3093 * t3959 + t3968 * t4885;
t3018 = -t3093 * t3968 - t3959 * t4885;
t3017 = -t3092 * t3956 + t3965 * t4883;
t3016 = -t3092 * t3965 - t3956 * t4883;
t3015 = -t3091 * t3953 + t3962 * t4881;
t3014 = -t3962 * t3091 - t3953 * t4881;
t3013 = -t3090 * t3959 + t3968 * t4886;
t3012 = -t3090 * t3968 - t3959 * t4886;
t3011 = -t3089 * t3956 + t3965 * t4884;
t3010 = -t3089 * t3965 - t3956 * t4884;
t3009 = -t3088 * t3953 + t3962 * t4882;
t3008 = -t3962 * t3088 - t3953 * t4882;
t3007 = t3063 * t3927 + t3181 * t4165 + t3184 * t3942;
t3006 = t3063 * t4514 + t3181 * t4236;
t3005 = -t3947 * t3087 + t3950 * t4879;
t3004 = -t3950 * t3087 - t3947 * t4879;
t3003 = -t3947 * t3080 + t3950 * t4880;
t3002 = -t3950 * t3080 - t3947 * t4880;
t3001 = -t3029 * t3959 - t3968 * t4823;
t3000 = -t3029 * t3968 + t3959 * t4823;
t2999 = -t3028 * t3956 - t3965 * t4824;
t2998 = -t3028 * t3965 + t3956 * t4824;
t2997 = -t3027 * t3953 - t3962 * t4825;
t2996 = -t3962 * t3027 + t3953 * t4825;
t2995 = -t3947 * t3026 - t3950 * t4826;
t2994 = -t3950 * t3026 + t3947 * t4826;
t1 = [t3528 * t3578 + t3532 * t3588 + t3534 * t3591 + t3536 * t3585, 0, 0, (t3528 * t4683 + t3532 * t4673 + t3534 * t4668 + t3536 * t4678) * t3924, (t3528 * t4333 + t3532 * t4323 + t3534 * t4318 + t3536 * t4328) * t4518, (t3948 * t4120 + t3954 * t4118 + t3957 * t4116 + t3960 * t4114) * t3941, (t3951 * t4120 + t3963 * t4118 + t3966 * t4116 + t3969 * t4114) * t3941, t3362 * t3471 + t3392 * t3473 + t3396 * t3475 + t3400 * t3477 + (t3362 * t3498 + t3392 * t3506 + t3396 * t3508 + t3400 * t3510) * t3942, (t3217 + t4389) * t3510 + (t3210 + t4397) * t3508 + (t3208 + t4405) * t3506 + (t3204 + t4413) * t3498, (t3218 - t4388) * t3510 + (t3214 - t4396) * t3508 + (t3212 - t4404) * t3506 + (t3206 - t4412) * t3498, t3067 * t3498 + t3082 * t3506 + t3084 * t3508 + t3086 * t3510 + t3245 * t4411 + t3276 * t4403 + t3278 * t4395 + t3280 * t4387, t3065 * t3498 + t3075 * t3506 + t3077 * t3508 + t3079 * t3510 + t3220 * t3471 + t3224 * t3477 + t3226 * t3473 + t3228 * t3475, -t3312 * t4411 - t3329 * t4403 - t3330 * t4395 - t3331 * t4387 + t3118 * t3498 + t3128 * t3506 + t3129 * t3508 + t3130 * t3510 + (-t3245 * t4703 - t3276 * t4701 - t3278 * t4700 - t3280 * t4699) * t4593, -t3312 * t4410 - t3329 * t4402 - t3330 * t4394 - t3331 * t4386 + t3117 * t3498 + t3125 * t3506 + t3126 * t3508 + t3127 * t3510 + (-t3243 * t4703 - t3270 * t4701 - t3272 * t4700 - t3274 * t4699) * t4593, (t3312 * t4379 + t3329 * t4376 + t3330 * t4373 + t3331 * t4370 + (t3312 * t4703 + t3329 * t4701 + t3330 * t4700 + t3331 * t4699) * t3984) * t3941, t3003 * t3498 + t3009 * t3506 + t3011 * t3508 + t3013 * t3510 + t3122 * t3471 + t3138 * t3473 + t3140 * t3475 + t3142 * t3477 + (-t3238 * t4703 - t3250 * t4701 - t3252 * t4700 - t3255 * t4699) * t4593, t3002 * t3498 + t3008 * t3506 + t3010 * t3508 + t3012 * t3510 + t3121 * t3471 + t3137 * t3473 + t3139 * t3475 + t3141 * t3477 + (-t3236 * t4703 - t3256 * t4699 - t3258 * t4701 - t3260 * t4700) * t4593, 0, 0, 0, t3812; t3101, 0, 0, t3097, t3094, (t3948 * t4061 + t3954 * t4049 + t3957 * t4043 + t3960 * t4055) * t3941, (t3951 * t4061 + t3963 * t4049 + t3966 * t4043 + t3969 * t4055) * t3941, t3360 * t3471 + t3390 * t3473 + t3394 * t3475 + t3398 * t3477 + (t3360 * t3498 + t3390 * t3506 + t3394 * t3508 + t3398 * t3510) * t3942, (t3209 * t3540 + t3539 * t4397) * t3590 + (t3207 * t3538 + t3537 * t4405) * t3587 + (t3215 * t3542 + t3541 * t4389) * t3584 + (t3203 * t3530 + t3529 * t4413) * t3577, (t3213 * t3540 - t3539 * t4396) * t3590 + (t3211 * t3538 - t3537 * t4404) * t3587 + (t3216 * t3542 - t3541 * t4388) * t3584 + (t3205 * t3530 - t3529 * t4412) * t3577, t3066 * t3498 + t3081 * t3506 + t3083 * t3508 + t3085 * t3510 + t3244 * t4411 + t3275 * t4403 + t3277 * t4395 + t3279 * t4387, t3064 * t3498 + t3074 * t3506 + t3076 * t3508 + t3078 * t3510 + t3219 * t3471 + t3223 * t3477 + t3225 * t3473 + t3227 * t3475, -t3313 * t4411 - t3332 * t4403 - t3333 * t4395 - t3334 * t4387 + t3120 * t3498 + t3134 * t3506 + t3135 * t3508 + t3136 * t3510 + (-t3244 * t4703 - t3275 * t4701 - t3277 * t4700 - t3279 * t4699) * t4593, -t3313 * t4410 - t3332 * t4402 - t3333 * t4394 - t3334 * t4386 + t3119 * t3498 + t3131 * t3506 + t3132 * t3508 + t3133 * t3510 + (-t3242 * t4703 - t3269 * t4701 - t3271 * t4700 - t3273 * t4699) * t4593, (t3313 * t4379 + t3332 * t4376 + t3333 * t4373 + t3334 * t4370 + (t3313 * t4703 + t3332 * t4701 + t3333 * t4700 + t3334 * t4699) * t3984) * t3941, t3005 * t3498 + t3015 * t3506 + t3017 * t3508 + t3019 * t3510 + t3124 * t3471 + t3144 * t3473 + t3146 * t3475 + t3148 * t3477 + (-t3237 * t4703 - t3249 * t4701 - t3251 * t4700 - t3253 * t4699) * t4593, t3004 * t3498 + t3014 * t3506 + t3016 * t3508 + t3018 * t3510 + t3123 * t3471 + t3143 * t3473 + t3145 * t3475 + t3147 * t3477 + (-t3235 * t4703 - t3254 * t4699 - t3257 * t4701 - t3259 * t4700) * t4593, 0, 0, 0, 0; t3175, 0, 0, t3170, t3164, (t3948 * t4057 + t3954 * t4045 + t3957 * t4039 + t3960 * t4051) * t3941, (t3951 * t4057 + t3963 * t4045 + t3966 * t4039 + t3969 * t4051) * t3941, t3447 * t3471 + t3458 * t3473 + t3460 * t3475 + t3462 * t3477 + (t3447 * t3498 + t3458 * t3506 + t3460 * t3508 + t3462 * t3510) * t3942, (t3321 * t3540 + t3515 * t4309) * t3590 + (t3320 * t3538 + t3513 * t4313) * t3587 + (t3324 * t3542 + t3517 * t4305) * t3584 + (t3307 * t3530 + t3511 * t4317) * t3577, (t3323 * t3540 - t3515 * t4308) * t3590 + (t3322 * t3538 - t3513 * t4312) * t3587 + (t3325 * t3542 - t3517 * t4304) * t3584 + (t3308 * t3530 - t3511 * t4316) * t3577, t3162 * t3498 + t3171 * t3506 + t3172 * t3508 + t3173 * t3510 + t3417 * t4411 + t3424 * t4403 + t3425 * t4395 + t3426 * t4387, t3161 * t3498 + t3166 * t3506 + t3167 * t3508 + t3168 * t3510 + t3343 * t3471 + t3345 * t3477 + t3346 * t3473 + t3347 * t3475, -t3432 * t4411 - t3436 * t4403 - t3437 * t4395 - t3438 * t4387 + t3262 * t3498 + t3286 * t3506 + t3287 * t3508 + t3288 * t3510 + (-t3417 * t4703 - t3424 * t4701 - t3425 * t4700 - t3426 * t4699) * t4593, -t3432 * t4410 - t3436 * t4402 - t3437 * t4394 - t3438 * t4386 + t3261 * t3498 + t3283 * t3506 + t3284 * t3508 + t3285 * t3510 + (-t3416 * t4703 - t3421 * t4701 - t3422 * t4700 - t3423 * t4699) * t4593, (t3432 * t4379 + t3436 * t4376 + t3437 * t4373 + t3438 * t4370 + (t3432 * t4703 + t3436 * t4701 + t3437 * t4700 + t3438 * t4699) * t3984) * t3941, t3047 * t3498 + t3049 * t3506 + t3051 * t3508 + t3053 * t3510 + t3282 * t3471 + t3290 * t3473 + t3292 * t3475 + t3294 * t3477 + (-t3408 * t4703 - t3409 * t4701 - t3410 * t4700 - t3411 * t4699) * t4593, t3046 * t3498 + t3048 * t3506 + t3050 * t3508 + t3052 * t3510 + t3281 * t3471 + t3289 * t3473 + t3291 * t3475 + t3293 * t3477 + (-t3407 * t4703 - t3412 * t4699 - t3413 * t4701 - t3414 * t4700) * t4593, 0, 0, 0, 0; t3388 * t3498 + t3404 * t3506 + t3405 * t3508 + t3406 * t3510, 0, 0, (t3530 * t4425 + t3538 * t4424 + t3540 * t4423 + t3542 * t4422) * t3924, (t3530 * t4213 + t3538 * t4212 + t3540 * t4211 + t3542 * t4210) * t4518, (t3948 * t4088 + t3954 * t4084 + t3957 * t4080 + t3960 * t4076) * t3941, (t3951 * t4088 + t3963 * t4084 + t3966 * t4080 + t3969 * t4076) * t3941, t3184 * t3471 + t3198 * t3473 + t3200 * t3475 + t3202 * t3477 + (t3184 * t3498 + t3198 * t3506 + t3200 * t3508 + t3202 * t3510) * t3942, t3054 * t3498 + t3056 * t3506 + t3057 * t3508 + t3060 * t3510 + t3388 * t4413 + t3404 * t4405 + t3405 * t4397 + t3406 * t4389, t3055 * t3498 + t3058 * t3506 + t3059 * t3508 + t3061 * t3510 - t3388 * t4412 - t3404 * t4404 - t3405 * t4396 - t3406 * t4388, t3007 * t3498 + t3023 * t3506 + t3024 * t3508 + t3025 * t3510 + t3100 * t4411 + t3114 * t4403 + t3115 * t4395 + t3116 * t4387, t3006 * t3498 + t3020 * t3506 + t3021 * t3508 + t3022 * t3510 + t3062 * t3471 + t3068 * t3477 + t3069 * t3473 + t3070 * t3475, -t3154 * t4411 - t3158 * t4403 - t3159 * t4395 - t3160 * t4387 + t3031 * t3498 + t3037 * t3506 + t3038 * t3508 + t3039 * t3510 + (-t3100 * t4703 - t3114 * t4701 - t3115 * t4700 - t3116 * t4699) * t4593, -t3154 * t4410 - t3158 * t4402 - t3159 * t4394 - t3160 * t4386 + t3030 * t3498 + t3034 * t3506 + t3035 * t3508 + t3036 * t3510 + (-t3099 * t4703 - t3111 * t4701 - t3112 * t4700 - t3113 * t4699) * t4593, (t3154 * t4379 + t3158 * t4376 + t3159 * t4373 + t3160 * t4370 + (t3154 * t4703 + t3158 * t4701 + t3159 * t4700 + t3160 * t4699) * t3984) * t3941, t2995 * t3498 + t2997 * t3506 + t2999 * t3508 + t3001 * t3510 + t3033 * t3471 + t3041 * t3473 + t3043 * t3475 + t3045 * t3477 + (-t3095 * t4703 - t3104 * t4701 - t3105 * t4700 - t3106 * t4699) * t4593, t2994 * t3498 + t2996 * t3506 + t2998 * t3508 + t3000 * t3510 + t3032 * t3471 + t3040 * t3473 + t3042 * t3475 + t3044 * t3477 + (-t3096 * t4703 - t3102 * t4701 - t3103 * t4700 - t3107 * t4699) * t4593, 0, -t3922, -t3923, 0; t3101, 0, 0, t3097, t3094, (t3948 * t4059 + t3954 * t4047 + t3957 * t4041 + t3960 * t4053) * t3941, (t3951 * t4059 + t3963 * t4047 + t3966 * t4041 + t3969 * t4053) * t3941, t3362 * t3472 + t3392 * t3474 + t3396 * t3476 + t3400 * t3478 + (t3362 * t3497 + t3392 * t3505 + t3396 * t3507 + t3400 * t3509) * t3942, (t3210 * t3539 + t3540 * t4393) * t3590 + (t3208 * t3537 + t3538 * t4401) * t3587 + (t3217 * t3541 + t3542 * t4385) * t3584 + (t3204 * t3529 + t3530 * t4409) * t3577, (t3214 * t3539 - t3540 * t4392) * t3590 + (t3212 * t3537 - t3538 * t4400) * t3587 + (t3218 * t3541 - t3542 * t4384) * t3584 + (t3206 * t3529 - t3530 * t4408) * t3577, t3067 * t3497 + t3082 * t3505 + t3084 * t3507 + t3086 * t3509 + t3245 * t4407 + t3276 * t4399 + t3278 * t4391 + t3280 * t4383, t3065 * t3497 + t3075 * t3505 + t3077 * t3507 + t3079 * t3509 + t3220 * t3472 + t3224 * t3478 + t3226 * t3474 + t3228 * t3476, -t3312 * t4407 - t3329 * t4399 - t3330 * t4391 - t3331 * t4383 + t3118 * t3497 + t3128 * t3505 + t3129 * t3507 + t3130 * t3509 + (-t3245 * t4702 - t3276 * t4698 - t3278 * t4697 - t3280 * t4696) * t4593, -t3312 * t4406 - t3329 * t4398 - t3330 * t4390 - t3331 * t4382 + t3117 * t3497 + t3125 * t3505 + t3126 * t3507 + t3127 * t3509 + (-t3243 * t4702 - t3270 * t4698 - t3272 * t4697 - t3274 * t4696) * t4593, (t3312 * t4380 + t3329 * t4377 + t3330 * t4374 + t3331 * t4371 + (t3312 * t4702 + t3329 * t4698 + t3330 * t4697 + t3331 * t4696) * t3984) * t3941, t3003 * t3497 + t3009 * t3505 + t3011 * t3507 + t3013 * t3509 + t3122 * t3472 + t3138 * t3474 + t3140 * t3476 + t3142 * t3478 + (-t3238 * t4702 - t3250 * t4698 - t3252 * t4697 - t3255 * t4696) * t4593, t3002 * t3497 + t3008 * t3505 + t3010 * t3507 + t3012 * t3509 + t3121 * t3472 + t3137 * t3474 + t3139 * t3476 + t3141 * t3478 + (-t3236 * t4702 - t3256 * t4696 - t3258 * t4698 - t3260 * t4697) * t4593, 0, 0, 0, 0; t3527 * t3578 + t3531 * t3588 + t3533 * t3591 + t3535 * t3585, 0, 0, (t3527 * t4683 + t3531 * t4673 + t3533 * t4668 + t3535 * t4678) * t3924, (t3527 * t4333 + t3531 * t4323 + t3533 * t4318 + t3535 * t4328) * t4518, (t3948 * t4121 + t3954 * t4119 + t3957 * t4117 + t3960 * t4115) * t3941, (t3951 * t4121 + t3963 * t4119 + t3966 * t4117 + t3969 * t4115) * t3941, t3360 * t3472 + t3390 * t3474 + t3394 * t3476 + t3398 * t3478 + (t3360 * t3497 + t3390 * t3505 + t3394 * t3507 + t3398 * t3509) * t3942, (t3215 + t4385) * t3509 + (t3209 + t4393) * t3507 + (t3207 + t4401) * t3505 + (t3203 + t4409) * t3497, (t3216 - t4384) * t3509 + (t3213 - t4392) * t3507 + (t3211 - t4400) * t3505 + (t3205 - t4408) * t3497, t3066 * t3497 + t3081 * t3505 + t3083 * t3507 + t3085 * t3509 + t3244 * t4407 + t3275 * t4399 + t3277 * t4391 + t3279 * t4383, t3064 * t3497 + t3074 * t3505 + t3076 * t3507 + t3078 * t3509 + t3219 * t3472 + t3223 * t3478 + t3225 * t3474 + t3227 * t3476, -t3313 * t4407 - t3332 * t4399 - t3333 * t4391 - t3334 * t4383 + t3120 * t3497 + t3134 * t3505 + t3135 * t3507 + t3136 * t3509 + (-t3244 * t4702 - t3275 * t4698 - t3277 * t4697 - t3279 * t4696) * t4593, -t3313 * t4406 - t3332 * t4398 - t3333 * t4390 - t3334 * t4382 + t3119 * t3497 + t3131 * t3505 + t3132 * t3507 + t3133 * t3509 + (-t3242 * t4702 - t3269 * t4698 - t3271 * t4697 - t3273 * t4696) * t4593, (t3313 * t4380 + t3332 * t4377 + t3333 * t4374 + t3334 * t4371 + (t3313 * t4702 + t3332 * t4698 + t3333 * t4697 + t3334 * t4696) * t3984) * t3941, t3005 * t3497 + t3015 * t3505 + t3017 * t3507 + t3019 * t3509 + t3124 * t3472 + t3144 * t3474 + t3146 * t3476 + t3148 * t3478 + (-t3237 * t4702 - t3249 * t4698 - t3251 * t4697 - t3253 * t4696) * t4593, t3004 * t3497 + t3014 * t3505 + t3016 * t3507 + t3018 * t3509 + t3123 * t3472 + t3143 * t3474 + t3145 * t3476 + t3147 * t3478 + (-t3235 * t4702 - t3254 * t4696 - t3257 * t4698 - t3259 * t4697) * t4593, 0, 0, 0, t3812; t3174, 0, 0, t3169, t3163, (t3948 * t4056 + t3954 * t4044 + t3957 * t4038 + t3960 * t4050) * t3941, (t3951 * t4056 + t3963 * t4044 + t3966 * t4038 + t3969 * t4050) * t3941, t3447 * t3472 + t3458 * t3474 + t3460 * t3476 + t3462 * t3478 + (t3447 * t3497 + t3458 * t3505 + t3460 * t3507 + t3462 * t3509) * t3942, (t3321 * t3539 + t3516 * t4309) * t3590 + (t3320 * t3537 + t3514 * t4313) * t3587 + (t3324 * t3541 + t3518 * t4305) * t3584 + (t3307 * t3529 + t3512 * t4317) * t3577, (t3323 * t3539 - t3516 * t4308) * t3590 + (t3322 * t3537 - t3514 * t4312) * t3587 + (t3325 * t3541 - t3518 * t4304) * t3584 + (t3308 * t3529 - t3512 * t4316) * t3577, t3162 * t3497 + t3171 * t3505 + t3172 * t3507 + t3173 * t3509 + t3417 * t4407 + t3424 * t4399 + t3425 * t4391 + t3426 * t4383, t3161 * t3497 + t3166 * t3505 + t3167 * t3507 + t3168 * t3509 + t3343 * t3472 + t3345 * t3478 + t3346 * t3474 + t3347 * t3476, -t3432 * t4407 - t3436 * t4399 - t3437 * t4391 - t3438 * t4383 + t3262 * t3497 + t3286 * t3505 + t3287 * t3507 + t3288 * t3509 + (-t3417 * t4702 - t3424 * t4698 - t3425 * t4697 - t3426 * t4696) * t4593, -t3432 * t4406 - t3436 * t4398 - t3437 * t4390 - t3438 * t4382 + t3261 * t3497 + t3283 * t3505 + t3284 * t3507 + t3285 * t3509 + (-t3416 * t4702 - t3421 * t4698 - t3422 * t4697 - t3423 * t4696) * t4593, (t3432 * t4380 + t3436 * t4377 + t3437 * t4374 + t3438 * t4371 + (t3432 * t4702 + t3436 * t4698 + t3437 * t4697 + t3438 * t4696) * t3984) * t3941, t3047 * t3497 + t3049 * t3505 + t3051 * t3507 + t3053 * t3509 + t3282 * t3472 + t3290 * t3474 + t3292 * t3476 + t3294 * t3478 + (-t3408 * t4702 - t3409 * t4698 - t3410 * t4697 - t3411 * t4696) * t4593, t3046 * t3497 + t3048 * t3505 + t3050 * t3507 + t3052 * t3509 + t3281 * t3472 + t3289 * t3474 + t3291 * t3476 + t3293 * t3478 + (-t3407 * t4702 - t3412 * t4696 - t3413 * t4698 - t3414 * t4697) * t4593, 0, 0, 0, 0; t3388 * t3497 + t3404 * t3505 + t3405 * t3507 + t3406 * t3509, 0, 0, (t3529 * t4425 + t3537 * t4424 + t3539 * t4423 + t3541 * t4422) * t3924, (t3529 * t4213 + t3537 * t4212 + t3539 * t4211 + t3541 * t4210) * t4518, (t3948 * t4087 + t3954 * t4083 + t3957 * t4079 + t3960 * t4075) * t3941, (t3951 * t4087 + t3963 * t4083 + t3966 * t4079 + t3969 * t4075) * t3941, t3184 * t3472 + t3198 * t3474 + t3200 * t3476 + t3202 * t3478 + (t3184 * t3497 + t3198 * t3505 + t3200 * t3507 + t3202 * t3509) * t3942, t3054 * t3497 + t3056 * t3505 + t3057 * t3507 + t3060 * t3509 + t3388 * t4409 + t3404 * t4401 + t3405 * t4393 + t3406 * t4385, t3055 * t3497 + t3058 * t3505 + t3059 * t3507 + t3061 * t3509 - t3388 * t4408 - t3404 * t4400 - t3405 * t4392 - t3406 * t4384, t3007 * t3497 + t3023 * t3505 + t3024 * t3507 + t3025 * t3509 + t3100 * t4407 + t3114 * t4399 + t3115 * t4391 + t3116 * t4383, t3006 * t3497 + t3020 * t3505 + t3021 * t3507 + t3022 * t3509 + t3062 * t3472 + t3068 * t3478 + t3069 * t3474 + t3070 * t3476, -t3154 * t4407 - t3158 * t4399 - t3159 * t4391 - t3160 * t4383 + t3031 * t3497 + t3037 * t3505 + t3038 * t3507 + t3039 * t3509 + (-t3100 * t4702 - t3114 * t4698 - t3115 * t4697 - t3116 * t4696) * t4593, -t3154 * t4406 - t3158 * t4398 - t3159 * t4390 - t3160 * t4382 + t3030 * t3497 + t3034 * t3505 + t3035 * t3507 + t3036 * t3509 + (-t3099 * t4702 - t3111 * t4698 - t3112 * t4697 - t3113 * t4696) * t4593, (t3154 * t4380 + t3158 * t4377 + t3159 * t4374 + t3160 * t4371 + (t3154 * t4702 + t3158 * t4698 + t3159 * t4697 + t3160 * t4696) * t3984) * t3941, t2995 * t3497 + t2997 * t3505 + t2999 * t3507 + t3001 * t3509 + t3033 * t3472 + t3041 * t3474 + t3043 * t3476 + t3045 * t3478 + (-t3095 * t4702 - t3104 * t4698 - t3105 * t4697 - t3106 * t4696) * t4593, t2994 * t3497 + t2996 * t3505 + t2998 * t3507 + t3000 * t3509 + t3032 * t3472 + t3040 * t3474 + t3042 * t3476 + t3044 * t3478 + (-t3096 * t4702 - t3102 * t4698 - t3103 * t4697 - t3107 * t4696) * t4593, 0, t3923, -t3922, 0; t3175, 0, 0, t3170, t3164, (t3948 * t4058 + t3954 * t4046 + t3957 * t4040 + t3960 * t4052) * t3941, (t3951 * t4058 + t3963 * t4046 + t3966 * t4040 + t3969 * t4052) * t3941, -t3362 * t3523 - t3392 * t3524 - t3396 * t3525 - t3400 * t3526 + (t3362 * t3548 + t3392 * t3552 + t3396 * t3553 + t3400 * t3554) * t3942, (t3210 * t3631 - t3540 * t4357) * t3590 + (t3208 * t3630 - t3538 * t4361) * t3587 + (t3217 * t3632 - t3542 * t4353) * t3584 + (t3204 * t3624 - t3530 * t4365) * t3577, (t3214 * t3631 + t3540 * t4356) * t3590 + (t3212 * t3630 + t3538 * t4360) * t3587 + (t3218 * t3632 + t3542 * t4352) * t3584 + (t3206 * t3624 + t3530 * t4364) * t3577, t3067 * t3548 + t3082 * t3552 + t3084 * t3553 + t3086 * t3554 - t3245 * t4363 - t3276 * t4359 - t3278 * t4355 - t3280 * t4351, t3065 * t3548 + t3075 * t3552 + t3077 * t3553 + t3079 * t3554 - t3220 * t3523 - t3224 * t3526 - t3226 * t3524 - t3228 * t3525, t3312 * t4363 + t3329 * t4359 + t3330 * t4355 + t3331 * t4351 + t3118 * t3548 + t3128 * t3552 + t3129 * t3553 + t3130 * t3554 + (t3245 * t4695 + t3276 * t4694 + t3278 * t4693 + t3280 * t4692) * t3984, t3312 * t4362 + t3329 * t4358 + t3330 * t4354 + t3331 * t4350 + t3117 * t3548 + t3125 * t3552 + t3126 * t3553 + t3127 * t3554 + (t3243 * t4695 + t3270 * t4694 + t3272 * t4693 + t3274 * t4692) * t3984, (-t3312 * t4695 - t3329 * t4694 - t3330 * t4693 - t3331 * t4692) * t3984 + (t3312 * t4337 + t3329 * t4327 + t3330 * t4322 + t3331 * t4332) * t3941, t3003 * t3548 + t3009 * t3552 + t3011 * t3553 + t3013 * t3554 - t3122 * t3523 - t3138 * t3524 - t3140 * t3525 - t3142 * t3526 + (t3238 * t4695 + t3250 * t4694 + t3252 * t4693 + t3255 * t4692) * t3984, t3002 * t3548 + t3008 * t3552 + t3010 * t3553 + t3012 * t3554 - t3121 * t3523 - t3137 * t3524 - t3139 * t3525 - t3141 * t3526 + (t3236 * t4695 + t3256 * t4692 + t3258 * t4694 + t3260 * t4693) * t3984, 0, 0, 0, 0; t3174, 0, 0, t3169, t3163, (t3948 * t4060 + t3954 * t4048 + t3957 * t4042 + t3960 * t4054) * t3941, (t3951 * t4060 + t3963 * t4048 + t3966 * t4042 + t3969 * t4054) * t3941, -t3360 * t3523 - t3390 * t3524 - t3394 * t3525 - t3398 * t3526 + (t3360 * t3548 + t3390 * t3552 + t3394 * t3553 + t3398 * t3554) * t3942, (t3209 * t3631 - t3539 * t4357) * t3590 + (t3207 * t3630 - t3537 * t4361) * t3587 + (t3215 * t3632 - t3541 * t4353) * t3584 + (t3203 * t3624 - t3529 * t4365) * t3577, (t3213 * t3631 + t3539 * t4356) * t3590 + (t3211 * t3630 + t3537 * t4360) * t3587 + (t3216 * t3632 + t3541 * t4352) * t3584 + (t3205 * t3624 + t3529 * t4364) * t3577, t3066 * t3548 + t3081 * t3552 + t3083 * t3553 + t3085 * t3554 - t3244 * t4363 - t3275 * t4359 - t3277 * t4355 - t3279 * t4351, t3064 * t3548 + t3074 * t3552 + t3076 * t3553 + t3078 * t3554 - t3219 * t3523 - t3223 * t3526 - t3225 * t3524 - t3227 * t3525, t3313 * t4363 + t3332 * t4359 + t3333 * t4355 + t3334 * t4351 + t3120 * t3548 + t3134 * t3552 + t3135 * t3553 + t3136 * t3554 + (t3244 * t4695 + t3275 * t4694 + t3277 * t4693 + t3279 * t4692) * t3984, t3313 * t4362 + t3332 * t4358 + t3333 * t4354 + t3334 * t4350 + t3119 * t3548 + t3131 * t3552 + t3132 * t3553 + t3133 * t3554 + (t3242 * t4695 + t3269 * t4694 + t3271 * t4693 + t3273 * t4692) * t3984, (-t3313 * t4695 - t3332 * t4694 - t3333 * t4693 - t3334 * t4692) * t3984 + (t3313 * t4337 + t3332 * t4327 + t3333 * t4322 + t3334 * t4332) * t3941, t3005 * t3548 + t3015 * t3552 + t3017 * t3553 + t3019 * t3554 - t3124 * t3523 - t3144 * t3524 - t3146 * t3525 - t3148 * t3526 + (t3237 * t4695 + t3249 * t4694 + t3251 * t4693 + t3253 * t4692) * t3984, t3004 * t3548 + t3014 * t3552 + t3016 * t3553 + t3018 * t3554 - t3123 * t3523 - t3143 * t3524 - t3145 * t3525 - t3147 * t3526 + (t3235 * t4695 + t3254 * t4692 + t3257 * t4694 + t3259 * t4693) * t3984, 0, 0, 0, 0; t3578 * t3623 + t3585 * t3627 + t3588 * t3625 + t3591 * t3626, 0, 0, (t3623 * t4683 + t3625 * t4673 + t3626 * t4668 + t3627 * t4678) * t3924, (t3623 * t4333 + t3625 * t4323 + t3626 * t4318 + t3627 * t4328) * t4518, (t3948 * t4113 + t3954 * t4111 + t3957 * t4110 + t3960 * t4112) * t3941, (t3951 * t4113 + t3963 * t4111 + t3966 * t4110 + t3969 * t4112) * t3941, -t3447 * t3523 - t3458 * t3524 - t3460 * t3525 - t3462 * t3526 + (t3447 * t3548 + t3458 * t3552 + t3460 * t3553 + t3462 * t3554) * t3942, (t3321 - t4357) * t3553 + (t3320 - t4361) * t3552 + (t3324 - t4353) * t3554 + (t3307 - t4365) * t3548, (t3323 + t4356) * t3553 + (t3322 + t4360) * t3552 + (t3325 + t4352) * t3554 + (t3308 + t4364) * t3548, t3162 * t3548 + t3171 * t3552 + t3172 * t3553 + t3173 * t3554 - t3417 * t4363 - t3424 * t4359 - t3425 * t4355 - t3426 * t4351, t3161 * t3548 + t3166 * t3552 + t3167 * t3553 + t3168 * t3554 - t3343 * t3523 - t3345 * t3526 - t3346 * t3524 - t3347 * t3525, t3432 * t4363 + t3436 * t4359 + t3437 * t4355 + t3438 * t4351 + t3262 * t3548 + t3286 * t3552 + t3287 * t3553 + t3288 * t3554 + (t3417 * t4695 + t3424 * t4694 + t3425 * t4693 + t3426 * t4692) * t3984, t3432 * t4362 + t3436 * t4358 + t3437 * t4354 + t3438 * t4350 + t3261 * t3548 + t3283 * t3552 + t3284 * t3553 + t3285 * t3554 + (t3416 * t4695 + t3421 * t4694 + t3422 * t4693 + t3423 * t4692) * t3984, (-t3432 * t4695 - t3436 * t4694 - t3437 * t4693 - t3438 * t4692) * t3984 + (t3432 * t4337 + t3436 * t4327 + t3437 * t4322 + t3438 * t4332) * t3941, t3047 * t3548 + t3049 * t3552 + t3051 * t3553 + t3053 * t3554 - t3282 * t3523 - t3290 * t3524 - t3292 * t3525 - t3294 * t3526 + (t3408 * t4695 + t3409 * t4694 + t3410 * t4693 + t3411 * t4692) * t3984, t3046 * t3548 + t3048 * t3552 + t3050 * t3553 + t3052 * t3554 - t3281 * t3523 - t3289 * t3524 - t3291 * t3525 - t3293 * t3526 + (t3407 * t4695 + t3412 * t4692 + t3413 * t4694 + t3414 * t4693) * t3984, 0, 0, 0, 1; t3388 * t3548 + t3404 * t3552 + t3405 * t3553 + t3406 * t3554, 0, 0, (t3624 * t4425 + t3630 * t4424 + t3631 * t4423 + t3632 * t4422) * t3924, (t3624 * t4213 + t3630 * t4212 + t3631 * t4211 + t3632 * t4210) * t4518, (t3948 * t4086 + t3954 * t4082 + t3957 * t4078 + t3960 * t4074) * t3941, (t3951 * t4086 + t3963 * t4082 + t3966 * t4078 + t3969 * t4074) * t3941, -t3184 * t3523 - t3198 * t3524 - t3200 * t3525 - t3202 * t3526 + (t3184 * t3548 + t3198 * t3552 + t3200 * t3553 + t3202 * t3554) * t3942, t3054 * t3548 + t3056 * t3552 + t3057 * t3553 + t3060 * t3554 - t3388 * t4365 - t3404 * t4361 - t3405 * t4357 - t3406 * t4353, t3055 * t3548 + t3058 * t3552 + t3059 * t3553 + t3061 * t3554 + t3388 * t4364 + t3404 * t4360 + t3405 * t4356 + t3406 * t4352, t3007 * t3548 + t3023 * t3552 + t3024 * t3553 + t3025 * t3554 - t3100 * t4363 - t3114 * t4359 - t3115 * t4355 - t3116 * t4351, t3006 * t3548 + t3020 * t3552 + t3021 * t3553 + t3022 * t3554 - t3062 * t3523 - t3068 * t3526 - t3069 * t3524 - t3070 * t3525, t3154 * t4363 + t3158 * t4359 + t3159 * t4355 + t3160 * t4351 + t3031 * t3548 + t3037 * t3552 + t3038 * t3553 + t3039 * t3554 + (t3100 * t4695 + t3114 * t4694 + t3115 * t4693 + t3116 * t4692) * t3984, t3154 * t4362 + t3158 * t4358 + t3159 * t4354 + t3160 * t4350 + t3030 * t3548 + t3034 * t3552 + t3035 * t3553 + t3036 * t3554 + (t3099 * t4695 + t3111 * t4694 + t3112 * t4693 + t3113 * t4692) * t3984, (-t3154 * t4695 - t3158 * t4694 - t3159 * t4693 - t3160 * t4692) * t3984 + (t3154 * t4337 + t3158 * t4327 + t3159 * t4322 + t3160 * t4332) * t3941, t2995 * t3548 + t2997 * t3552 + t2999 * t3553 + t3001 * t3554 - t3033 * t3523 - t3041 * t3524 - t3043 * t3525 - t3045 * t3526 + (t3095 * t4695 + t3104 * t4694 + t3105 * t4693 + t3106 * t4692) * t3984, t2994 * t3548 + t2996 * t3552 + t2998 * t3553 + t3000 * t3554 - t3032 * t3523 - t3040 * t3524 - t3042 * t3525 - t3044 * t3526 + (t3096 * t4695 + t3102 * t4694 + t3103 * t4693 + t3107 * t4692) * t3984, 0, 0, 0, 0; t3530 * t4441 + t3538 * t4437 + t3540 * t4434 + t3542 * t4431, 0, 0, (t3530 * t4221 + t3538 * t4219 + t3540 * t4217 + t3542 * t4215) * t3924, (t3530 * t4149 + t3538 * t4148 + t3540 * t4147 + t3542 * t4146) * t4518, (t3948 * t4028 + t3954 * t4019 + t3957 * t4025 + t3960 * t4022) * t3941, (t3951 * t4028 + t3963 * t4019 + t3966 * t4025 + t3969 * t4022) * t3941, t3362 * t4731 + t3396 * t4730 + t3400 * t4729 + t3392 * t4728 + (t3362 * t4727 + t3392 * t4726 + t3396 * t4725 + t3400 * t4724) * t3942, t3204 * t4727 + t3208 * t4726 + t3210 * t4725 + t3217 * t4724 + t3530 * t4229 + t3538 * t4223 + t3540 * t4227 + t3542 * t4225, t3206 * t4727 + t3212 * t4726 + t3214 * t4725 + t3218 * t4724 - t3530 * t4228 - t3538 * t4222 - t3540 * t4226 - t3542 * t4224, t3067 * t4727 + t3082 * t4726 + t3084 * t4725 + t3086 * t4724 + t3245 * t4458 + t3276 * t4443 + t3278 * t4453 + t3280 * t4448, t3065 * t4727 + t3075 * t4726 + t3077 * t4725 + t3079 * t4724 + t3220 * t4731 + t3224 * t4729 + t3226 * t4728 + t3228 * t4730, t3118 * t4727 + t3128 * t4726 + t3129 * t4725 + t3130 * t4724 + t3239 * t3245 + t3246 * t3276 + t3247 * t3278 + t3248 * t3280 - t3312 * t4458 - t3329 * t4443 - t3330 * t4453 - t3331 * t4448, t3117 * t4727 + t3125 * t4726 + t3126 * t4725 + t3127 * t4724 + t3239 * t3243 + t3246 * t3270 + t3247 * t3272 + t3248 * t3274 - t3312 * t4457 - t3329 * t4442 - t3330 * t4452 - t3331 * t4447, -t3239 * t3312 - t3246 * t3329 - t3247 * t3330 - t3248 * t3331 + (t3312 * t4439 + t3329 * t4435 + t3330 * t4432 + t3331 * t4429) * t3941, t3003 * t4727 + t3009 * t4726 + t3011 * t4725 + t3013 * t4724 + t3122 * t4731 + t3138 * t4728 + t3140 * t4730 + t3142 * t4729 + t3239 * t3238 + t3246 * t3250 + t3247 * t3252 + t3248 * t3255, t3002 * t4727 + t3008 * t4726 + t3010 * t4725 + t3012 * t4724 + t3121 * t4731 + t3137 * t4728 + t3139 * t4730 + t3141 * t4729 + t3239 * t3236 + t3246 * t3258 + t3247 * t3260 + t3248 * t3256, 0, -t3922, -t3923, 0; t3529 * t4441 + t3537 * t4437 + t3539 * t4434 + t3541 * t4431, 0, 0, (t3529 * t4221 + t3537 * t4219 + t3539 * t4217 + t3541 * t4215) * t3924, (t3529 * t4149 + t3537 * t4148 + t3539 * t4147 + t3541 * t4146) * t4518, (t3948 * t4029 + t3954 * t4020 + t3957 * t4026 + t3960 * t4023) * t3941, (t3951 * t4029 + t3963 * t4020 + t3966 * t4026 + t3969 * t4023) * t3941, t3360 * t4731 + t3394 * t4730 + t3398 * t4729 + t3390 * t4728 + (t3360 * t4727 + t3390 * t4726 + t3394 * t4725 + t3398 * t4724) * t3942, t3203 * t4727 + t3207 * t4726 + t3209 * t4725 + t3215 * t4724 + t3529 * t4229 + t3537 * t4223 + t3539 * t4227 + t3541 * t4225, t3205 * t4727 + t3211 * t4726 + t3213 * t4725 + t3216 * t4724 - t3529 * t4228 - t3537 * t4222 - t3539 * t4226 - t3541 * t4224, t3066 * t4727 + t3081 * t4726 + t3083 * t4725 + t3085 * t4724 + t3244 * t4458 + t3275 * t4443 + t3277 * t4453 + t3279 * t4448, t3064 * t4727 + t3074 * t4726 + t3076 * t4725 + t3078 * t4724 + t3219 * t4731 + t3223 * t4729 + t3225 * t4728 + t3227 * t4730, t3120 * t4727 + t3134 * t4726 + t3135 * t4725 + t3136 * t4724 + t3239 * t3244 + t3246 * t3275 + t3247 * t3277 + t3248 * t3279 - t3313 * t4458 - t3332 * t4443 - t3333 * t4453 - t3334 * t4448, t3119 * t4727 + t3131 * t4726 + t3132 * t4725 + t3133 * t4724 + t3239 * t3242 + t3246 * t3269 + t3247 * t3271 + t3248 * t3273 - t3313 * t4457 - t3332 * t4442 - t3333 * t4452 - t3334 * t4447, -t3239 * t3313 - t3246 * t3332 - t3247 * t3333 - t3248 * t3334 + (t3313 * t4439 + t3332 * t4435 + t3333 * t4432 + t3334 * t4429) * t3941, t3005 * t4727 + t3015 * t4726 + t3017 * t4725 + t3019 * t4724 + t3124 * t4731 + t3144 * t4728 + t3146 * t4730 + t3148 * t4729 + t3239 * t3237 + t3246 * t3249 + t3247 * t3251 + t3248 * t3253, t3004 * t4727 + t3014 * t4726 + t3016 * t4725 + t3018 * t4724 + t3123 * t4731 + t3143 * t4728 + t3145 * t4730 + t3147 * t4729 + t3239 * t3235 + t3246 * t3257 + t3247 * t3259 + t3248 * t3254, 0, t3923, -t3922, 0; t3624 * t4441 + t3630 * t4437 + t3631 * t4434 + t3632 * t4431, 0, 0, (t3624 * t4221 + t3630 * t4219 + t3631 * t4217 + t3632 * t4215) * t3924, (t3624 * t4149 + t3630 * t4148 + t3631 * t4147 + t3632 * t4146) * t4518, (t3948 * t4027 + t3954 * t4018 + t3957 * t4024 + t3960 * t4021) * t3941, (t3951 * t4027 + t3963 * t4018 + t3966 * t4024 + t3969 * t4021) * t3941, t3447 * t4731 + t3460 * t4730 + t3462 * t4729 + t3458 * t4728 + (t3447 * t4727 + t3458 * t4726 + t3460 * t4725 + t3462 * t4724) * t3942, t3307 * t4727 + t3320 * t4726 + t3321 * t4725 + t3324 * t4724 + t3624 * t4229 + t3630 * t4223 + t3631 * t4227 + t3632 * t4225, t3308 * t4727 + t3322 * t4726 + t3323 * t4725 + t3325 * t4724 - t3624 * t4228 - t3630 * t4222 - t3631 * t4226 - t3632 * t4224, t3162 * t4727 + t3171 * t4726 + t3172 * t4725 + t3173 * t4724 + t3417 * t4458 + t3424 * t4443 + t3425 * t4453 + t3426 * t4448, t3161 * t4727 + t3166 * t4726 + t3167 * t4725 + t3168 * t4724 + t3343 * t4731 + t3345 * t4729 + t3346 * t4728 + t3347 * t4730, t3239 * t3417 + t3246 * t3424 + t3247 * t3425 + t3248 * t3426 + t3262 * t4727 + t3286 * t4726 + t3287 * t4725 + t3288 * t4724 - t3432 * t4458 - t3436 * t4443 - t3437 * t4453 - t3438 * t4448, t3239 * t3416 + t3246 * t3421 + t3247 * t3422 + t3248 * t3423 + t3261 * t4727 + t3283 * t4726 + t3284 * t4725 + t3285 * t4724 - t3432 * t4457 - t3436 * t4442 - t3437 * t4452 - t3438 * t4447, -t3239 * t3432 - t3246 * t3436 - t3247 * t3437 - t3248 * t3438 + (t3432 * t4439 + t3436 * t4435 + t3437 * t4432 + t3438 * t4429) * t3941, t3047 * t4727 + t3049 * t4726 + t3051 * t4725 + t3053 * t4724 + t3239 * t3408 + t3246 * t3409 + t3247 * t3410 + t3248 * t3411 + t3282 * t4731 + t3290 * t4728 + t3292 * t4730 + t3294 * t4729, t3046 * t4727 + t3048 * t4726 + t3050 * t4725 + t3052 * t4724 + t3239 * t3407 + t3246 * t3413 + t3247 * t3414 + t3248 * t3412 + t3281 * t4731 + t3289 * t4728 + t3291 * t4730 + t3293 * t4729, 0, 0, 0, 0; t3388 * t4727 + t3404 * t4726 + t3405 * t4725 + t3406 * t4724, 0, 0, (t3388 * t4440 + t3404 * t4436 + t3405 * t4433 + t3406 * t4430) * t3924, (t3388 * t4220 + t3404 * t4218 + t3405 * t4216 + t3406 * t4214) * t4518, (t3948 * t4089 + t3954 * t4085 + t3957 * t4081 + t3960 * t4077) * t3941, (t3951 * t4089 + t3963 * t4085 + t3966 * t4081 + t3969 * t4077) * t3941, t3184 * t4731 + t3198 * t4728 + t3200 * t4730 + t3202 * t4729 + (t3184 * t4727 + t3198 * t4726 + t3200 * t4725 + t3202 * t4724) * t3942, t3054 * t4727 + t3056 * t4726 + t3057 * t4725 + t3060 * t4724 + t3388 * t4460 + t3404 * t4445 + t3405 * t4455 + t3406 * t4450, t3055 * t4727 + t3058 * t4726 + t3059 * t4725 + t3061 * t4724 - t3388 * t4459 - t3404 * t4444 - t3405 * t4454 - t3406 * t4449, t3007 * t4727 + t3023 * t4726 + t3024 * t4725 + t3025 * t4724 + t3100 * t4458 + t3114 * t4443 + t3115 * t4453 + t3116 * t4448, t3006 * t4727 + t3020 * t4726 + t3021 * t4725 + t3022 * t4724 + t3062 * t4731 + t3068 * t4729 + t3069 * t4728 + t3070 * t4730, t3031 * t4727 + t3037 * t4726 + t3038 * t4725 + t3039 * t4724 + t3239 * t3100 + t3246 * t3114 + t3247 * t3115 + t3248 * t3116 - t3154 * t4458 - t3158 * t4443 - t3159 * t4453 - t3160 * t4448, t3030 * t4727 + t3034 * t4726 + t3035 * t4725 + t3036 * t4724 + t3239 * t3099 + t3246 * t3111 + t3247 * t3112 + t3248 * t3113 - t3154 * t4457 - t3158 * t4442 - t3159 * t4452 - t3160 * t4447, -t3154 * t3239 - t3158 * t3246 - t3159 * t3247 - t3160 * t3248 + (t3154 * t4439 + t3158 * t4435 + t3159 * t4432 + t3160 * t4429) * t3941, t2995 * t4727 + t2997 * t4726 + t2999 * t4725 + t3001 * t4724 + t3033 * t4731 + t3041 * t4728 + t3043 * t4730 + t3045 * t4729 + t3239 * t3095 + t3246 * t3104 + t3247 * t3105 + t3248 * t3106, t2994 * t4727 + t2996 * t4726 + t2998 * t4725 + t3000 * t4724 + t3032 * t4731 + t3040 * t4728 + t3042 * t4730 + t3044 * t4729 + t3239 * t3096 + t3246 * t3102 + t3247 * t3103 + t3248 * t3107, 1, 0, 0, 0;];
tau_reg  = t1;
