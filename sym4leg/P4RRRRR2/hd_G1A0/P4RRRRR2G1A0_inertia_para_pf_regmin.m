% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4*4x17]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:26
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4RRRRR2G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR2G1A0_inertia_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR2G1A0_inertia_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4RRRRR2G1A0_inertia_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR2G1A0_inertia_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR2G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 17:25:06
% EndTime: 2020-08-07 17:25:30
% DurationCPUTime: 26.43s
% Computational Cost: add. (20933->1065), mult. (12456->1775), div. (8008->24), fcn. (14292->66), ass. (0->657)
t1414 = 2 * pkin(1);
t939 = cos(qJ(3,4));
t913 = 0.1e1 / t939;
t947 = cos(qJ(3,3));
t928 = 0.1e1 / t947;
t949 = cos(qJ(3,2));
t931 = 0.1e1 / t949;
t951 = cos(qJ(3,1));
t934 = 0.1e1 / t951;
t914 = 0.1e1 / t939 ^ 2;
t929 = 0.1e1 / t947 ^ 2;
t932 = 0.1e1 / t949 ^ 2;
t935 = 0.1e1 / t951 ^ 2;
t937 = sin(qJ(3,4));
t940 = cos(qJ(2,4));
t1298 = t937 * t940;
t962 = 0.1e1 / pkin(2);
t1404 = t962 / 0.2e1;
t1319 = t913 * t937;
t938 = sin(qJ(2,4));
t911 = 0.1e1 / t938;
t1199 = t911 * t1319;
t964 = 1 / pkin(1);
t858 = t964 * t1199;
t860 = pkin(1) * t940 + pkin(2) * t939;
t1343 = t860 * t914;
t1227 = t937 * t1343;
t1122 = t911 * t1227;
t1287 = t962 * t964;
t985 = t1122 * t1287;
t806 = t858 - t985 / 0.2e1;
t1413 = -0.2e1 * t806 * t1298 - 0.2e1 * t938 * t1404;
t941 = sin(qJ(3,3));
t948 = cos(qJ(2,3));
t1295 = t941 * t948;
t1305 = t928 * t941;
t942 = sin(qJ(2,3));
t918 = 0.1e1 / t942;
t1189 = t918 * t1305;
t861 = t964 * t1189;
t866 = pkin(1) * t948 + pkin(2) * t947;
t1341 = t866 * t929;
t1224 = t941 * t1341;
t1116 = t918 * t1224;
t984 = t1116 * t1287;
t811 = t861 - t984 / 0.2e1;
t1412 = -0.2e1 * t811 * t1295 - 0.2e1 * t942 * t1404;
t943 = sin(qJ(3,2));
t950 = cos(qJ(2,2));
t1293 = t943 * t950;
t1303 = t931 * t943;
t944 = sin(qJ(2,2));
t922 = 0.1e1 / t944;
t1183 = t922 * t1303;
t862 = t964 * t1183;
t867 = pkin(1) * t950 + pkin(2) * t949;
t1339 = t867 * t932;
t1221 = t943 * t1339;
t1110 = t922 * t1221;
t983 = t1110 * t1287;
t812 = t862 - t983 / 0.2e1;
t1411 = -0.2e1 * t812 * t1293 - 0.2e1 * t944 * t1404;
t945 = sin(qJ(3,1));
t952 = cos(qJ(2,1));
t1291 = t945 * t952;
t1301 = t934 * t945;
t946 = sin(qJ(2,1));
t926 = 0.1e1 / t946;
t1177 = t926 * t1301;
t863 = t964 * t1177;
t868 = pkin(1) * t952 + pkin(2) * t951;
t1337 = t868 * t935;
t1218 = t945 * t1337;
t1104 = t926 * t1218;
t982 = t1104 * t1287;
t813 = t863 - t982 / 0.2e1;
t1410 = -0.2e1 * t813 * t1291 - 0.2e1 * t946 * t1404;
t1158 = qJ(1,4) + legFrame(4,3);
t900 = qJ(2,4) + t1158;
t953 = xP(4);
t869 = -t953 + t900;
t954 = koppelP(4,2);
t958 = koppelP(4,1);
t826 = -t954 * cos(t869) + t958 * sin(t869);
t1409 = 0.2e1 * t826;
t1159 = qJ(1,3) + legFrame(3,3);
t904 = qJ(2,3) + t1159;
t877 = -t953 + t904;
t955 = koppelP(3,2);
t959 = koppelP(3,1);
t827 = -t955 * cos(t877) + t959 * sin(t877);
t1408 = 0.2e1 * t827;
t1160 = qJ(1,2) + legFrame(2,3);
t905 = qJ(2,2) + t1160;
t878 = -t953 + t905;
t956 = koppelP(2,2);
t960 = koppelP(2,1);
t828 = -t956 * cos(t878) + t960 * sin(t878);
t1407 = 0.2e1 * t828;
t1161 = qJ(1,1) + legFrame(1,3);
t906 = qJ(2,1) + t1161;
t879 = -t953 + t906;
t957 = koppelP(1,2);
t961 = koppelP(1,1);
t829 = -t957 * cos(t879) + t961 * sin(t879);
t1406 = 0.2e1 * t829;
t1405 = 2 * t964;
t1403 = pkin(1) * sin(t1158);
t1402 = pkin(1) * sin(t1159);
t1401 = pkin(1) * sin(t1160);
t1400 = pkin(1) * sin(t1161);
t854 = 0.1e1 / (sin(qJ(2,4) + qJ(3,4)) + sin(qJ(2,4) - qJ(3,4)));
t1239 = t854 * t1287;
t885 = qJ(3,4) + t900;
t886 = -qJ(3,4) + t900;
t810 = cos(t1158) * t1414 + (cos(t885) + cos(t886)) * pkin(2);
t907 = sin(t953);
t908 = cos(t953);
t838 = t907 * t958 + t908 * t954;
t842 = -t907 * t954 + t908 * t958;
t864 = sin(t885);
t865 = sin(t886);
t747 = (t838 * t810 - 0.2e1 * t842 * (t1403 + (t865 / 0.2e1 + t864 / 0.2e1) * pkin(2))) * t1239;
t883 = sin(t900);
t1399 = t747 * t883;
t884 = cos(t900);
t1398 = t747 * t884;
t910 = t937 ^ 2;
t1397 = t747 * t910;
t855 = 0.1e1 / (sin(qJ(2,3) + qJ(3,3)) + sin(qJ(2,3) - qJ(3,3)));
t1236 = t855 * t1287;
t893 = qJ(3,3) + t904;
t894 = -qJ(3,3) + t904;
t823 = cos(t1159) * t1414 + (cos(t893) + cos(t894)) * pkin(2);
t839 = t907 * t959 + t908 * t955;
t843 = -t907 * t955 + t908 * t959;
t870 = sin(t893);
t871 = sin(t894);
t748 = (t839 * t823 - 0.2e1 * t843 * (t1402 + (t871 / 0.2e1 + t870 / 0.2e1) * pkin(2))) * t1236;
t887 = sin(t904);
t1396 = t748 * t887;
t890 = cos(t904);
t1395 = t748 * t890;
t917 = t941 ^ 2;
t1394 = t748 * t917;
t856 = 0.1e1 / (sin(qJ(2,2) + qJ(3,2)) + sin(qJ(2,2) - qJ(3,2)));
t1233 = t856 * t1287;
t895 = qJ(3,2) + t905;
t896 = -qJ(3,2) + t905;
t824 = cos(t1160) * t1414 + (cos(t895) + cos(t896)) * pkin(2);
t840 = t907 * t960 + t908 * t956;
t844 = -t907 * t956 + t908 * t960;
t872 = sin(t895);
t873 = sin(t896);
t749 = (t840 * t824 - 0.2e1 * t844 * (t1401 + (t873 / 0.2e1 + t872 / 0.2e1) * pkin(2))) * t1233;
t888 = sin(t905);
t1393 = t749 * t888;
t891 = cos(t905);
t1392 = t749 * t891;
t921 = t943 ^ 2;
t1391 = t749 * t921;
t857 = 0.1e1 / (sin(qJ(2,1) + qJ(3,1)) + sin(qJ(2,1) - qJ(3,1)));
t1230 = t857 * t1287;
t897 = qJ(3,1) + t906;
t898 = -qJ(3,1) + t906;
t825 = cos(t1161) * t1414 + (cos(t897) + cos(t898)) * pkin(2);
t841 = t907 * t961 + t908 * t957;
t845 = -t907 * t957 + t908 * t961;
t874 = sin(t897);
t875 = sin(t898);
t750 = (t841 * t825 - 0.2e1 * t845 * (t1400 + (t875 / 0.2e1 + t874 / 0.2e1) * pkin(2))) * t1230;
t889 = sin(t906);
t1390 = t750 * t889;
t892 = cos(t906);
t1389 = t750 * t892;
t925 = t945 ^ 2;
t1388 = t750 * t925;
t1320 = t911 * t964;
t847 = t884 * t1320;
t830 = t838 * t847;
t846 = t883 * t1320;
t831 = t842 * t846;
t786 = -t830 + t831;
t1387 = t786 * t938;
t1386 = t786 * t940;
t1314 = t918 * t964;
t848 = t887 * t1314;
t832 = t843 * t848;
t851 = t890 * t1314;
t835 = t839 * t851;
t787 = -t835 + t832;
t1385 = t787 * t942;
t1384 = t787 * t948;
t1310 = t922 * t964;
t849 = t888 * t1310;
t833 = t844 * t849;
t852 = t891 * t1310;
t836 = t840 * t852;
t788 = -t836 + t833;
t1383 = t788 * t944;
t1382 = t788 * t950;
t1306 = t926 * t964;
t850 = t889 * t1306;
t834 = t845 * t850;
t853 = t892 * t1306;
t837 = t841 * t853;
t789 = -t837 + t834;
t1381 = t789 * t946;
t1380 = t789 * t952;
t807 = 0.2e1 * t858 - t985;
t1379 = t807 * t826;
t809 = -0.2e1 * t1403 + (-t864 - t865) * pkin(2);
t1378 = t809 * t854;
t1377 = t810 * t854;
t814 = 0.2e1 * t861 - t984;
t1376 = t814 * t827;
t816 = 0.2e1 * t862 - t983;
t1375 = t816 * t828;
t818 = 0.2e1 * t863 - t982;
t1374 = t818 * t829;
t820 = -0.2e1 * t1402 + (-t870 - t871) * pkin(2);
t1373 = t820 * t855;
t821 = -0.2e1 * t1401 + (-t872 - t873) * pkin(2);
t1372 = t821 * t856;
t822 = -0.2e1 * t1400 + (-t874 - t875) * pkin(2);
t1371 = t822 * t857;
t1370 = t823 * t855;
t1369 = t824 * t856;
t1368 = t825 * t857;
t796 = t810 * t1239;
t756 = t838 * t796;
t795 = t809 * t1239;
t757 = t842 * t795;
t1285 = t756 + t757;
t736 = -0.2e1 * t830 + 0.2e1 * t831 + t1285;
t1367 = t826 * t736;
t1366 = t826 * t911;
t912 = 0.1e1 / t938 ^ 2;
t1365 = t826 * t912;
t803 = t823 * t1236;
t762 = t839 * t803;
t800 = t820 * t1236;
t765 = t843 * t800;
t1284 = t762 + t765;
t741 = -0.2e1 * t835 + 0.2e1 * t832 + t1284;
t1364 = t827 * t741;
t1363 = t827 * t918;
t919 = 0.1e1 / t942 ^ 2;
t1362 = t827 * t919;
t804 = t824 * t1233;
t763 = t840 * t804;
t801 = t821 * t1233;
t766 = t844 * t801;
t1283 = t763 + t766;
t743 = -0.2e1 * t836 + 0.2e1 * t833 + t1283;
t1361 = t828 * t743;
t1360 = t828 * t922;
t923 = 0.1e1 / t944 ^ 2;
t1359 = t828 * t923;
t805 = t825 * t1230;
t764 = t841 * t805;
t802 = t822 * t1230;
t767 = t845 * t802;
t1282 = t764 + t767;
t745 = -0.2e1 * t837 + 0.2e1 * t834 + t1282;
t1358 = t829 * t745;
t1357 = t829 * t926;
t927 = 0.1e1 / t946 ^ 2;
t1356 = t829 * t927;
t1355 = t854 * t883;
t1354 = t854 * t884;
t1353 = t854 * t910;
t1352 = t855 * t887;
t1351 = t855 * t890;
t1350 = t855 * t917;
t1349 = t856 * t888;
t1348 = t856 * t891;
t1347 = t856 * t921;
t1346 = t857 * t889;
t1345 = t857 * t892;
t1344 = t857 * t925;
t1342 = t860 * t940;
t1340 = t866 * t948;
t1338 = t867 * t950;
t1336 = t868 * t952;
t1335 = t883 * t911;
t1334 = t884 * t911;
t1333 = t884 * t912;
t1332 = t887 * t918;
t1331 = t888 * t922;
t1330 = t889 * t926;
t1329 = t890 * t918;
t1328 = t890 * t919;
t1327 = t891 * t922;
t1326 = t891 * t923;
t1325 = t892 * t926;
t1324 = t892 * t927;
t909 = t937 * t910;
t1323 = t909 * t911;
t1322 = t910 * t911;
t1321 = t911 * t940;
t1318 = t914 * t910;
t916 = t941 * t917;
t1317 = t916 * t918;
t1316 = t917 * t918;
t1315 = t918 * t948;
t920 = t943 * t921;
t1313 = t920 * t922;
t1312 = t921 * t922;
t1311 = t922 * t950;
t924 = t945 * t925;
t1309 = t924 * t926;
t1308 = t925 * t926;
t1307 = t926 * t952;
t1304 = t929 * t917;
t1302 = t932 * t921;
t1300 = t935 * t925;
t1299 = t937 * t939;
t1297 = t939 * t940;
t1296 = t941 * t947;
t1294 = t943 * t949;
t1292 = t945 * t951;
t1290 = t947 * t948;
t1289 = t949 * t950;
t1288 = t951 * t952;
t963 = 0.1e1 / pkin(2) ^ 2;
t1286 = t963 * t964;
t1281 = t911 * t1413;
t1280 = t918 * t1412;
t1279 = t922 * t1411;
t1278 = t926 * t1410;
t1277 = t747 * t1319;
t1276 = t747 * t1299;
t1275 = t748 * t1305;
t1274 = t748 * t1296;
t1273 = t749 * t1303;
t1272 = t749 * t1294;
t1271 = t750 * t1301;
t1270 = t750 * t1292;
t1269 = t854 * t1387;
t1268 = t854 * t1386;
t1267 = t786 * t1298;
t1266 = t786 * t1297;
t1265 = t855 * t1385;
t1264 = t855 * t1384;
t1263 = t787 * t1295;
t1262 = t787 * t1290;
t1261 = t856 * t1383;
t1260 = t856 * t1382;
t1259 = t788 * t1293;
t1258 = t788 * t1289;
t1257 = t857 * t1381;
t1256 = t857 * t1380;
t1255 = t789 * t1291;
t1254 = t789 * t1288;
t1253 = t809 * t1353;
t1252 = t810 * t1353;
t1251 = t820 * t1350;
t1250 = t821 * t1347;
t1249 = t822 * t1344;
t1248 = t823 * t1350;
t1247 = t824 * t1347;
t1246 = t825 * t1344;
t1245 = t826 * t1322;
t1244 = t827 * t1316;
t1243 = t828 * t1312;
t1242 = t829 * t1308;
t1241 = t854 * t1319;
t1240 = t854 * t1299;
t1238 = t855 * t1305;
t1237 = t855 * t1296;
t1235 = t856 * t1303;
t1234 = t856 * t1294;
t1232 = t857 * t1301;
t1231 = t857 * t1292;
t1229 = t860 * t1322;
t1228 = t912 * t1342;
t1226 = t866 * t1316;
t1225 = t919 * t1340;
t1223 = t867 * t1312;
t1222 = t923 * t1338;
t1220 = t868 * t1308;
t1219 = t927 * t1336;
t1217 = t883 * t1322;
t1216 = t883 * t1321;
t1215 = t884 * t1322;
t1214 = t884 * t1321;
t1213 = t887 * t1316;
t1212 = t887 * t1315;
t1211 = t888 * t1312;
t1210 = t888 * t1311;
t1209 = t889 * t1308;
t1208 = t889 * t1307;
t1207 = t890 * t1316;
t1206 = t890 * t1315;
t1205 = t891 * t1312;
t1204 = t891 * t1311;
t1203 = t892 * t1308;
t1202 = t892 * t1307;
t1201 = t913 * t1323;
t1200 = t910 * t913 * t940;
t1198 = t911 * t1299;
t1197 = t911 * t1298;
t1196 = t911 * t1297;
t808 = t858 - t985;
t1195 = t808 * t1319;
t1194 = t883 * t1319;
t1193 = t884 * t1319;
t1192 = t938 * t1319;
t1191 = t928 * t1317;
t1190 = t917 * t928 * t948;
t1188 = t918 * t1296;
t1187 = t918 * t1295;
t1186 = t918 * t1290;
t1185 = t931 * t1313;
t1184 = t921 * t931 * t950;
t1182 = t922 * t1294;
t1181 = t922 * t1293;
t1180 = t922 * t1289;
t1179 = t934 * t1309;
t1178 = t925 * t934 * t952;
t1176 = t926 * t1292;
t1175 = t926 * t1291;
t1174 = t926 * t1288;
t815 = t861 - t984;
t1173 = t815 * t1305;
t1172 = t887 * t1305;
t1171 = t890 * t1305;
t1170 = t942 * t1305;
t817 = t862 - t983;
t1169 = t817 * t1303;
t1168 = t888 * t1303;
t1167 = t891 * t1303;
t1166 = t944 * t1303;
t819 = t863 - t982;
t1165 = t819 * t1301;
t1164 = t889 * t1301;
t1163 = t892 * t1301;
t1162 = t946 * t1301;
t1157 = t854 * t1267;
t1156 = t854 * t1266;
t1155 = t855 * t1263;
t1154 = t855 * t1262;
t1153 = t856 * t1259;
t1152 = t856 * t1258;
t1151 = t857 * t1255;
t1150 = t857 * t1254;
t1149 = t809 * t1240;
t1148 = t810 * t1240;
t1147 = t820 * t1237;
t1146 = t821 * t1234;
t1145 = t822 * t1231;
t1144 = t823 * t1237;
t1143 = t824 * t1234;
t1142 = t825 * t1231;
t1141 = t826 * t1198;
t1140 = t827 * t1188;
t1139 = t828 * t1182;
t1138 = t829 * t1176;
t1137 = t854 * t1216;
t1136 = t854 * t1214;
t1135 = t854 * t1197;
t1134 = t855 * t1212;
t1133 = t855 * t1206;
t1132 = t855 * t1187;
t1131 = t856 * t1210;
t1130 = t856 * t1204;
t1129 = t856 * t1181;
t1128 = t857 * t1208;
t1127 = t857 * t1202;
t1126 = t857 * t1175;
t1125 = t1323 * t1343;
t1124 = t913 * t1229;
t1123 = t1318 * t1342;
t915 = t913 * t914;
t1121 = t915 * t1228;
t1120 = t937 * t1228;
t1119 = t1317 * t1341;
t1118 = t928 * t1226;
t1117 = t1304 * t1340;
t930 = t928 * t929;
t1115 = t930 * t1225;
t1114 = t941 * t1225;
t1113 = t1313 * t1339;
t1112 = t931 * t1223;
t1111 = t1302 * t1338;
t933 = t931 * t932;
t1109 = t933 * t1222;
t1108 = t943 * t1222;
t1107 = t1309 * t1337;
t1106 = t934 * t1220;
t1105 = t1300 * t1336;
t936 = t934 * t935;
t1103 = t936 * t1219;
t1102 = t945 * t1219;
t1101 = t883 * t1198;
t1100 = t883 * t1196;
t1099 = t884 * t1198;
t1098 = t884 * t1196;
t1097 = t887 * t1188;
t1096 = t887 * t1186;
t1095 = t888 * t1182;
t1094 = t888 * t1180;
t1093 = t889 * t1176;
t1092 = t889 * t1174;
t1091 = t890 * t1188;
t1090 = t890 * t1186;
t1089 = t891 * t1182;
t1088 = t891 * t1180;
t1087 = t892 * t1176;
t1086 = t892 * t1174;
t1085 = t911 * t1200;
t1084 = t913 * t1197;
t1083 = t918 * t1190;
t1082 = t928 * t1187;
t1081 = t922 * t1184;
t1080 = t931 * t1181;
t1079 = t926 * t1178;
t1078 = t934 * t1175;
t735 = t756 / 0.2e1 + t757 / 0.2e1 + t786;
t1077 = t735 * t1197;
t754 = t846 + t795 / 0.2e1;
t1076 = t754 * t1197;
t755 = t847 - t796 / 0.2e1;
t1075 = t755 * t1197;
t738 = t762 / 0.2e1 + t765 / 0.2e1 + t787;
t1074 = t738 * t1187;
t768 = t848 + t800 / 0.2e1;
t1073 = t768 * t1187;
t771 = t851 - t803 / 0.2e1;
t1072 = t771 * t1187;
t739 = t763 / 0.2e1 + t766 / 0.2e1 + t788;
t1071 = t739 * t1181;
t769 = t849 + t801 / 0.2e1;
t1070 = t769 * t1181;
t772 = t852 - t804 / 0.2e1;
t1069 = t772 * t1181;
t740 = t764 / 0.2e1 + t767 / 0.2e1 + t789;
t1068 = t740 * t1175;
t770 = t850 + t802 / 0.2e1;
t1067 = t770 * t1175;
t773 = t853 - t805 / 0.2e1;
t1066 = t773 * t1175;
t1065 = 0.2e1 * t1100;
t1064 = 0.2e1 * t1098;
t1063 = 0.2e1 * t1096;
t1062 = 0.2e1 * t1094;
t1061 = 0.2e1 * t1092;
t1060 = 0.2e1 * t1090;
t1059 = 0.2e1 * t1088;
t1058 = 0.2e1 * t1086;
t1057 = -0.2e1 * t1085;
t1056 = -0.2e1 * t1083;
t1055 = -0.2e1 * t1081;
t1054 = -0.2e1 * t1079;
t1053 = -0.2e1 * t1077;
t1052 = -0.2e1 * t1076;
t1051 = -0.2e1 * t1075;
t1050 = -0.2e1 * t1074;
t1049 = -0.2e1 * t1073;
t1048 = -0.2e1 * t1072;
t1047 = -0.2e1 * t1071;
t1046 = -0.2e1 * t1070;
t1045 = -0.2e1 * t1069;
t1044 = -0.2e1 * t1068;
t1043 = -0.2e1 * t1067;
t1042 = -0.2e1 * t1066;
t1041 = t786 * t860 * t1197;
t1040 = t787 * t866 * t1187;
t1039 = t788 * t867 * t1181;
t1038 = t789 * t868 * t1175;
t1037 = t883 * t1135;
t1036 = t854 * t1100;
t1035 = t884 * t1135;
t1034 = t854 * t1098;
t1033 = t854 * t1085;
t1032 = t854 * t1084;
t1031 = t887 * t1132;
t1030 = t855 * t1096;
t1029 = t890 * t1132;
t1028 = t855 * t1090;
t1027 = t855 * t1083;
t1026 = t855 * t1082;
t1025 = t888 * t1129;
t1024 = t856 * t1094;
t1023 = t891 * t1129;
t1022 = t856 * t1088;
t1021 = t856 * t1081;
t1020 = t856 * t1080;
t1019 = t889 * t1126;
t1018 = t857 * t1092;
t1017 = t892 * t1126;
t1016 = t857 * t1086;
t1015 = t857 * t1079;
t1014 = t857 * t1078;
t1013 = t912 * t1123;
t1012 = t913 * t1120;
t1011 = t914 * t1120;
t1010 = t919 * t1117;
t1009 = t928 * t1114;
t1008 = t929 * t1114;
t1007 = t923 * t1111;
t1006 = t931 * t1108;
t1005 = t932 * t1108;
t1004 = t927 * t1105;
t1003 = t934 * t1102;
t1002 = t935 * t1102;
t1001 = t754 * t1409 + t1399;
t1000 = t755 * t1409 + t1398;
t758 = 0.2e1 * t846 + t795;
t999 = t758 * t826 + t1399;
t760 = 0.2e1 * t847 - t796;
t998 = t760 * t826 + t1398;
t997 = t768 * t1408 + t1396;
t996 = t771 * t1408 + t1395;
t774 = 0.2e1 * t848 + t800;
t995 = t774 * t827 + t1396;
t780 = 0.2e1 * t851 - t803;
t994 = t780 * t827 + t1395;
t993 = t769 * t1407 + t1393;
t992 = t772 * t1407 + t1392;
t776 = 0.2e1 * t849 + t801;
t991 = t776 * t828 + t1393;
t782 = 0.2e1 * t852 - t804;
t990 = t782 * t828 + t1392;
t989 = t770 * t1406 + t1390;
t988 = t773 * t1406 + t1389;
t778 = 0.2e1 * t850 + t802;
t987 = t778 * t829 + t1390;
t784 = 0.2e1 * t853 - t805;
t986 = t784 * t829 + t1389;
t981 = t1271 + t1273 + t1275 + t1277;
t980 = t822 * t1232 + t821 * t1235 + t820 * t1238 + t809 * t1241;
t979 = t825 * t1232 + t824 * t1235 + t823 * t1238 + t810 * t1241;
t978 = t936 * t1220 + t933 * t1223 + t930 * t1226 + t915 * t1229;
t965 = 1 / pkin(1) ^ 2;
t859 = t907 ^ 2 + t908 ^ 2;
t793 = t962 * t1162 - 0.2e1 * t813 * t1288;
t792 = t962 * t1166 - 0.2e1 * t812 * t1289;
t791 = t962 * t1170 - 0.2e1 * t811 * t1290;
t790 = t962 * t1192 - 0.2e1 * t806 * t1297;
t785 = t853 - t805;
t783 = t852 - t804;
t781 = t851 - t803;
t779 = t850 + t802;
t777 = t849 + t801;
t775 = t848 + t800;
t761 = t847 - t796;
t759 = t846 + t795;
t753 = (t927 * t1163 + t923 * t1167 + t919 * t1171 + t912 * t1193) * t965;
t752 = (t927 * t1164 + t923 * t1168 + t919 * t1172 + t912 * t1194) * t965;
t751 = (t889 * t1324 + t888 * t1326 + t887 * t1328 + t883 * t1333) * t965;
t746 = t789 + t1282;
t744 = t788 + t1283;
t742 = t787 + t1284;
t737 = t786 + t1285;
t1 = [(t884 ^ 2 * t912 + t890 ^ 2 * t919 + t891 ^ 2 * t923 + t892 ^ 2 * t927) * t965, 0, 0, (t761 * t1334 + t781 * t1329 + t783 * t1327 + t785 * t1325 + (-t785 * t1368 - t783 * t1369 - t781 * t1370 - t761 * t1377) * t962) * t964, t760 * t1214 + t780 * t1206 + t782 * t1204 + t784 * t1202 + (-t1127 * t825 - t1130 * t824 - t1133 * t823 - t1136 * t810) * t1287, -t884 * t760 - t890 * t780 - t891 * t782 - t892 * t784 + (t825 * t1345 + t824 * t1348 + t823 * t1351 + t810 * t1354) * t1287, (t761 * t1215 + t781 * t1207 + t783 * t1205 + t785 * t1203 + (-t1246 * t785 - t1247 * t783 - t1248 * t781 - t1252 * t761) * t962) * t964, (t761 * t1099 + t781 * t1091 + t783 * t1089 + t785 * t1087 + (-t1142 * t785 - t1143 * t783 - t1144 * t781 - t1148 * t761) * t962) * t1405, 0, 0, 0, t755 * t1064 + t771 * t1060 + t772 * t1059 + t773 * t1058 + (-t1016 * t825 - t1022 * t824 - t1028 * t823 - t1034 * t810) * t1287, t884 * t1051 + t890 * t1048 + t891 * t1045 + t892 * t1042 + (t1017 * t825 + t1023 * t824 + t1029 * t823 + t1035 * t810) * t1287, 0, 0, 0, t859; t751, 0, 0, (t759 * t1334 + t775 * t1329 + t777 * t1327 + t779 * t1325 + (-t779 * t1368 - t777 * t1369 - t775 * t1370 - t759 * t1377) * t962) * t964, t758 * t1214 + t774 * t1206 + t776 * t1204 + t778 * t1202 + (-t1128 * t825 - t1131 * t824 - t1134 * t823 - t1137 * t810) * t1287, -t884 * t758 - t890 * t774 - t891 * t776 - t892 * t778 + (t825 * t1346 + t824 * t1349 + t823 * t1352 + t810 * t1355) * t1287, (t759 * t1215 + t775 * t1207 + t777 * t1205 + t779 * t1203 + (-t1246 * t779 - t1247 * t777 - t1248 * t775 - t1252 * t759) * t962) * t964, (t759 * t1099 + t775 * t1091 + t777 * t1089 + t779 * t1087 + (-t1142 * t779 - t1143 * t777 - t1144 * t775 - t1148 * t759) * t962) * t1405, 0, 0, 0, t754 * t1064 + t768 * t1060 + t769 * t1059 + t770 * t1058 + (-t1018 * t825 - t1024 * t824 - t1030 * t823 - t1036 * t810) * t1287, t884 * t1052 + t890 * t1049 + t891 * t1046 + t892 * t1043 + (t1019 * t825 + t1025 * t824 + t1031 * t823 + t1037 * t810) * t1287, 0, 0, 0, 0; t753, 0, 0, (t808 * t1334 + t815 * t1329 + t817 * t1327 + t819 * t1325 + (-t819 * t1368 - t817 * t1369 - t815 * t1370 - t808 * t1377) * t962) * t964, t807 * t1214 + t814 * t1206 + t816 * t1204 + t818 * t1202 + (-t1014 * t825 - t1020 * t824 - t1026 * t823 - t1032 * t810) * t1287, t1287 * t979 - t807 * t884 - t814 * t890 - t816 * t891 - t818 * t892, (t808 * t1215 + t815 * t1207 + t817 * t1205 + t819 * t1203 + (-t1246 * t819 - t1247 * t817 - t1248 * t815 - t1252 * t808) * t962) * t964, (t808 * t1099 + t815 * t1091 + t817 * t1089 + t819 * t1087 + (-t1142 * t819 - t1143 * t817 - t1144 * t815 - t1148 * t808) * t962) * t1405, (-t979 * t963 + (t1163 * t926 + t1167 * t922 + t1171 * t918 + t1193 * t911) * t962) * t964, ((-t1368 - t1369 - t1370 - t1377) * t963 + (t1325 + t1327 + t1329 + t1334) * t962) * t964, 0, -t790 * t1334 - t791 * t1329 - t792 * t1327 - t793 * t1325 + (-t1126 * t825 - t1129 * t824 - t1132 * t823 - t1135 * t810) * t1287, t884 * t1281 + t890 * t1280 + t891 * t1279 + t892 * t1278 + (t1015 * t825 + t1021 * t824 + t1027 * t823 + t1033 * t810) * t1287, 0, 0, 0, 0; (t789 * t1325 + t788 * t1327 + t787 * t1329 + t786 * t1334) * t964, 0, 0, (t737 * t1334 + t742 * t1329 + t744 * t1327 + t746 * t1325 + (-t746 * t1368 - t744 * t1369 - t742 * t1370 - t737 * t1377) * t962) * t964, t736 * t1214 + t741 * t1206 + t743 * t1204 + t745 * t1202 + (-t1256 * t825 - t1260 * t824 - t1264 * t823 - t1268 * t810) * t962, -t884 * t736 - t890 * t741 - t891 * t743 - t892 * t745 + (t1257 * t825 + t1261 * t824 + t1265 * t823 + t1269 * t810) * t962, (t737 * t1215 + t742 * t1207 + t744 * t1205 + t746 * t1203 + (-t1246 * t746 - t1247 * t744 - t1248 * t742 - t1252 * t737) * t962) * t964, (t737 * t1099 + t742 * t1091 + t744 * t1089 + t746 * t1087 + (-t1142 * t746 - t1143 * t744 - t1144 * t742 - t1148 * t737) * t962) * t1405, 0, 0, 0, t735 * t1064 + t738 * t1060 + t739 * t1059 + t740 * t1058 + (-t1150 * t825 - t1152 * t824 - t1154 * t823 - t1156 * t810) * t962, t884 * t1053 + t890 * t1050 + t891 * t1047 + t892 * t1044 + (t1151 * t825 + t1153 * t824 + t1155 * t823 + t1157 * t810) * t962, 0, -t907, -t908, 0; t751, 0, 0, (t761 * t1335 + t781 * t1332 + t783 * t1331 + t785 * t1330 + (t785 * t1371 + t783 * t1372 + t781 * t1373 + t761 * t1378) * t962) * t964, t760 * t1216 + t780 * t1212 + t782 * t1210 + t784 * t1208 + (t1127 * t822 + t1130 * t821 + t1133 * t820 + t1136 * t809) * t1287, -t883 * t760 - t887 * t780 - t888 * t782 - t889 * t784 + (-t822 * t1345 - t821 * t1348 - t820 * t1351 - t809 * t1354) * t1287, (t761 * t1217 + t781 * t1213 + t783 * t1211 + t785 * t1209 + (t1249 * t785 + t1250 * t783 + t1251 * t781 + t1253 * t761) * t962) * t964, (t761 * t1101 + t781 * t1097 + t783 * t1095 + t785 * t1093 + (t1145 * t785 + t1146 * t783 + t1147 * t781 + t1149 * t761) * t962) * t1405, 0, 0, 0, t755 * t1065 + t771 * t1063 + t772 * t1062 + t773 * t1061 + (t1016 * t822 + t1022 * t821 + t1028 * t820 + t1034 * t809) * t1287, t883 * t1051 + t887 * t1048 + t888 * t1045 + t889 * t1042 + (-t1017 * t822 - t1023 * t821 - t1029 * t820 - t1035 * t809) * t1287, 0, 0, 0, 0; (t883 ^ 2 * t912 + t887 ^ 2 * t919 + t888 ^ 2 * t923 + t889 ^ 2 * t927) * t965, 0, 0, (t759 * t1335 + t775 * t1332 + t777 * t1331 + t779 * t1330 + (t779 * t1371 + t777 * t1372 + t775 * t1373 + t759 * t1378) * t962) * t964, t758 * t1216 + t774 * t1212 + t776 * t1210 + t778 * t1208 + (t1128 * t822 + t1131 * t821 + t1134 * t820 + t1137 * t809) * t1287, -t883 * t758 - t887 * t774 - t888 * t776 - t889 * t778 + (-t822 * t1346 - t821 * t1349 - t820 * t1352 - t809 * t1355) * t1287, (t759 * t1217 + t775 * t1213 + t777 * t1211 + t779 * t1209 + (t1249 * t779 + t1250 * t777 + t1251 * t775 + t1253 * t759) * t962) * t964, (t759 * t1101 + t775 * t1097 + t777 * t1095 + t779 * t1093 + (t1145 * t779 + t1146 * t777 + t1147 * t775 + t1149 * t759) * t962) * t1405, 0, 0, 0, t754 * t1065 + t768 * t1063 + t769 * t1062 + t770 * t1061 + (t1018 * t822 + t1024 * t821 + t1030 * t820 + t1036 * t809) * t1287, t883 * t1052 + t887 * t1049 + t888 * t1046 + t889 * t1043 + (-t1019 * t822 - t1025 * t821 - t1031 * t820 - t1037 * t809) * t1287, 0, 0, 0, t859; t752, 0, 0, (t808 * t1335 + t815 * t1332 + t817 * t1331 + t819 * t1330 + (t819 * t1371 + t817 * t1372 + t815 * t1373 + t808 * t1378) * t962) * t964, t807 * t1216 + t814 * t1212 + t816 * t1210 + t818 * t1208 + (t1014 * t822 + t1020 * t821 + t1026 * t820 + t1032 * t809) * t1287, -t1287 * t980 - t807 * t883 - t814 * t887 - t816 * t888 - t818 * t889, (t808 * t1217 + t815 * t1213 + t817 * t1211 + t819 * t1209 + (t1249 * t819 + t1250 * t817 + t1251 * t815 + t1253 * t808) * t962) * t964, (t808 * t1101 + t815 * t1097 + t817 * t1095 + t819 * t1093 + (t1145 * t819 + t1146 * t817 + t1147 * t815 + t1149 * t808) * t962) * t1405, (t980 * t963 + (t1164 * t926 + t1168 * t922 + t1172 * t918 + t1194 * t911) * t962) * t964, ((t1371 + t1372 + t1373 + t1378) * t963 + (t1330 + t1331 + t1332 + t1335) * t962) * t964, 0, -t790 * t1335 - t791 * t1332 - t792 * t1331 - t793 * t1330 + (t1126 * t822 + t1129 * t821 + t1132 * t820 + t1135 * t809) * t1287, t883 * t1281 + t887 * t1280 + t888 * t1279 + t889 * t1278 + (-t1015 * t822 - t1021 * t821 - t1027 * t820 - t1033 * t809) * t1287, 0, 0, 0, 0; (t789 * t1330 + t788 * t1331 + t787 * t1332 + t786 * t1335) * t964, 0, 0, (t737 * t1335 + t742 * t1332 + t744 * t1331 + t746 * t1330 + (t746 * t1371 + t744 * t1372 + t742 * t1373 + t737 * t1378) * t962) * t964, t736 * t1216 + t741 * t1212 + t743 * t1210 + t745 * t1208 + (t1256 * t822 + t1260 * t821 + t1264 * t820 + t1268 * t809) * t962, -t883 * t736 - t887 * t741 - t888 * t743 - t889 * t745 + (-t1257 * t822 - t1261 * t821 - t1265 * t820 - t1269 * t809) * t962, (t737 * t1217 + t742 * t1213 + t744 * t1211 + t746 * t1209 + (t1249 * t746 + t1250 * t744 + t1251 * t742 + t1253 * t737) * t962) * t964, (t737 * t1101 + t742 * t1097 + t744 * t1095 + t746 * t1093 + (t1145 * t746 + t1146 * t744 + t1147 * t742 + t1149 * t737) * t962) * t1405, 0, 0, 0, t735 * t1065 + t738 * t1063 + t739 * t1062 + t740 * t1061 + (t1150 * t822 + t1152 * t821 + t1154 * t820 + t1156 * t809) * t962, t883 * t1053 + t887 * t1050 + t888 * t1047 + t889 * t1044 + (-t1151 * t822 - t1153 * t821 - t1155 * t820 - t1157 * t809) * t962, 0, t908, -t907, 0; t753, 0, 0, (t761 * t1199 + t781 * t1189 + t783 * t1183 + t785 * t1177 + (-t1104 * t785 - t1110 * t783 - t1116 * t781 - t1122 * t761) * t962) * t964, t760 * t1084 + t780 * t1082 + t782 * t1080 + t784 * t1078 + (-t1002 * t892 - t1005 * t891 - t1008 * t890 - t1011 * t884) * t1287, -t760 * t1319 - t780 * t1305 - t782 * t1303 - t784 * t1301 + (t1104 * t892 + t1110 * t891 + t1116 * t890 + t1122 * t884) * t1287, (t761 * t1201 + t781 * t1191 + t783 * t1185 + t785 * t1179 + (-t1107 * t785 - t1113 * t783 - t1119 * t781 - t1125 * t761) * t962) * t964, (t761 * t1322 + t781 * t1316 + t783 * t1312 + t785 * t1308 + (-t1106 * t785 - t1112 * t783 - t1118 * t781 - t1124 * t761) * t962) * t1405, (t1301 * t785 + t1303 * t783 + t1305 * t781 + t1319 * t761) * t962, (t761 + t781 + t783 + t785) * t962, 0, 0.2e1 * t1075 + 0.2e1 * t1072 + 0.2e1 * t1069 + 0.2e1 * t1066 + (-t1193 - t1171 - t1167 - t1163 + (-t1003 * t892 - t1006 * t891 - t1009 * t890 - t1012 * t884) * t964) * t962, t755 * t1057 + t771 * t1056 + t772 * t1055 + t773 * t1054 + (-t884 - t890 - t891 - t892 + (t1004 * t892 + t1007 * t891 + t1010 * t890 + t1013 * t884) * t964) * t962, 0, 0, 0, 0; t752, 0, 0, (t759 * t1199 + t775 * t1189 + t777 * t1183 + t779 * t1177 + (-t1104 * t779 - t1110 * t777 - t1116 * t775 - t1122 * t759) * t962) * t964, t758 * t1084 + t774 * t1082 + t776 * t1080 + t778 * t1078 + (-t1002 * t889 - t1005 * t888 - t1008 * t887 - t1011 * t883) * t1287, -t758 * t1319 - t774 * t1305 - t776 * t1303 - t778 * t1301 + (t1104 * t889 + t1110 * t888 + t1116 * t887 + t1122 * t883) * t1287, (t759 * t1201 + t775 * t1191 + t777 * t1185 + t779 * t1179 + (-t1107 * t779 - t1113 * t777 - t1119 * t775 - t1125 * t759) * t962) * t964, (t759 * t1322 + t775 * t1316 + t777 * t1312 + t779 * t1308 + (-t1106 * t779 - t1112 * t777 - t1118 * t775 - t1124 * t759) * t962) * t1405, (t1301 * t779 + t1303 * t777 + t1305 * t775 + t1319 * t759) * t962, (t759 + t775 + t777 + t779) * t962, 0, 0.2e1 * t1076 + 0.2e1 * t1073 + 0.2e1 * t1070 + 0.2e1 * t1067 + (-t1194 - t1172 - t1168 - t1164 + (-t1003 * t889 - t1006 * t888 - t1009 * t887 - t1012 * t883) * t964) * t962, t754 * t1057 + t768 * t1056 + t769 * t1055 + t770 * t1054 + (-t883 - t887 - t888 - t889 + (t1004 * t889 + t1007 * t888 + t1010 * t887 + t1013 * t883) * t964) * t962, 0, 0, 0, 0; (t927 * t1300 + t923 * t1302 + t919 * t1304 + t912 * t1318) * t965, 0, 0, (t911 * t1195 + t918 * t1173 + t922 * t1169 + t926 * t1165 + (-t1104 * t819 - t1110 * t817 - t1116 * t815 - t1122 * t808) * t962) * t964, t807 * t1084 + t814 * t1082 + t816 * t1080 + t818 * t1078 + (-t1103 * t925 - t1109 * t921 - t1115 * t917 - t1121 * t910) * t1287, t1287 * t978 - t1301 * t818 - t1303 * t816 - t1305 * t814 - t1319 * t807, (t808 * t1201 + t815 * t1191 + t817 * t1185 + t819 * t1179 + (-t1107 * t819 - t1113 * t817 - t1119 * t815 - t1125 * t808) * t962) * t964, (t808 * t1322 + t815 * t1316 + t817 * t1312 + t819 * t1308 + (-t1106 * t819 - t1112 * t817 - t1118 * t815 - t1124 * t808) * t962) * t1405, -t978 * t1286 + (t1195 + t1173 + t1169 + t1165 + (t1300 * t926 + t1302 * t922 + t1304 * t918 + t1318 * t911) * t964) * t962, (-t1104 - t1110 - t1116 - t1122) * t1286 + (t808 + t815 + t817 + t819 + (t1177 + t1183 + t1189 + t1199) * t964) * t962, (t914 + t929 + t932 + t935) * t963, -t790 * t1199 - t791 * t1189 - t792 * t1183 - t793 * t1177 + (-t1318 - t1304 - t1302 - t1300 + (-t1004 - t1007 - t1010 - t1013) * t964) * t962, t1199 * t1413 + t1189 * t1412 + t1183 * t1411 + t1177 * t1410 + (-t1319 - t1305 - t1303 - t1301 + (t1103 * t924 + t1109 * t920 + t1115 * t916 + t1121 * t909) * t964) * t962, 0, 0, 0, 1; (t789 * t1177 + t788 * t1183 + t787 * t1189 + t786 * t1199) * t964, 0, 0, (t737 * t1199 + t742 * t1189 + t744 * t1183 + t746 * t1177 + (-t1104 * t746 - t1110 * t744 - t1116 * t742 - t1122 * t737) * t962) * t964, t736 * t1084 + t741 * t1082 + t743 * t1080 + t745 * t1078 + (-t1038 * t935 - t1039 * t932 - t1040 * t929 - t1041 * t914) * t962, -t736 * t1319 - t741 * t1305 - t743 * t1303 - t745 * t1301 + (t1218 * t789 + t1221 * t788 + t1224 * t787 + t1227 * t786) * t962, (t737 * t1201 + t742 * t1191 + t744 * t1185 + t746 * t1179 + (-t1107 * t746 - t1113 * t744 - t1119 * t742 - t1125 * t737) * t962) * t964, (t737 * t1322 + t742 * t1316 + t744 * t1312 + t746 * t1308 + (-t1106 * t746 - t1112 * t744 - t1118 * t742 - t1124 * t737) * t962) * t1405, (t1301 * t746 + t1303 * t744 + t1305 * t742 + t1319 * t737) * t962, (t737 + t742 + t744 + t746) * t962, 0, 0.2e1 * t1077 + 0.2e1 * t1074 + 0.2e1 * t1071 + 0.2e1 * t1068 + (-t913 * t1041 - t928 * t1040 - t931 * t1039 - t934 * t1038 + (-t1162 * t789 - t1166 * t788 - t1170 * t787 - t1192 * t786) * pkin(1)) * t962, t735 * t1057 + t738 * t1056 + t739 * t1055 + t740 * t1054 + (t911 * t786 * t1123 + t918 * t787 * t1117 + t922 * t788 * t1111 + t926 * t789 * t1105 + (-t1381 - t1383 - t1385 - t1387) * pkin(1)) * t962, 0, 0, 0, 0; (t829 * t1324 + t828 * t1326 + t827 * t1328 + t826 * t1333) * t965, 0, 0, t747 * t761 + t748 * t781 + t749 * t783 + t750 * t785 + (t785 * t1357 + t783 * t1360 + t781 * t1363 + t761 * t1366) * t964, t1307 * t986 + t1311 * t990 + t1315 * t994 + t1321 * t998, -t986 - t990 - t994 - t998, t761 * t1397 + t781 * t1394 + t783 * t1391 + t785 * t1388 + (t1242 * t785 + t1243 * t783 + t1244 * t781 + t1245 * t761) * t964, 0.2e1 * t761 * t1276 + 0.2e1 * t781 * t1274 + 0.2e1 * t783 * t1272 + 0.2e1 * t785 * t1270 + 0.2e1 * (t1138 * t785 + t1139 * t783 + t1140 * t781 + t1141 * t761) * t964, 0, 0, 0, t1000 * t1196 + t1174 * t988 + t1180 * t992 + t1186 * t996, -t1000 * t1197 - t1175 * t988 - t1181 * t992 - t1187 * t996, 0, -t907, -t908, 0; (t889 * t1356 + t888 * t1359 + t887 * t1362 + t883 * t1365) * t965, 0, 0, t747 * t759 + t748 * t775 + t749 * t777 + t750 * t779 + (t779 * t1357 + t777 * t1360 + t775 * t1363 + t759 * t1366) * t964, t1307 * t987 + t1311 * t991 + t1315 * t995 + t1321 * t999, -t987 - t991 - t995 - t999, t759 * t1397 + t775 * t1394 + t777 * t1391 + t779 * t1388 + (t1242 * t779 + t1243 * t777 + t1244 * t775 + t1245 * t759) * t964, 0.2e1 * t759 * t1276 + 0.2e1 * t775 * t1274 + 0.2e1 * t777 * t1272 + 0.2e1 * t779 * t1270 + 0.2e1 * (t1138 * t779 + t1139 * t777 + t1140 * t775 + t1141 * t759) * t964, 0, 0, 0, t1001 * t1196 + t1174 * t989 + t1180 * t993 + t1186 * t997, -t1001 * t1197 - t1175 * t989 - t1181 * t993 - t1187 * t997, 0, t908, -t907, 0; (t1301 * t1356 + t1303 * t1359 + t1305 * t1362 + t1319 * t1365) * t965, 0, 0, t747 * t808 + t748 * t815 + t749 * t817 + t750 * t819 + (t819 * t1357 + t817 * t1360 + t815 * t1363 + t808 * t1366) * t964, (t1271 + t1374) * t1307 + (t1273 + t1375) * t1311 + (t1275 + t1376) * t1315 + (t1277 + t1379) * t1321, -t1374 - t1375 - t1376 - t981 - t1379, t808 * t1397 + t815 * t1394 + t817 * t1391 + t819 * t1388 + (t1242 * t819 + t1243 * t817 + t1244 * t815 + t1245 * t808) * t964, 0.2e1 * t808 * t1276 + 0.2e1 * t815 * t1274 + 0.2e1 * t817 * t1272 + 0.2e1 * t819 * t1270 + 0.2e1 * (t1138 * t819 + t1139 * t817 + t1140 * t815 + t1141 * t808) * t964, ((t1177 * t829 + t1183 * t828 + t1189 * t827 + t1199 * t826) * t964 + t981) * t962, (t747 + t748 + t749 + t750 + (t1357 + t1360 + t1363 + t1366) * t964) * t962, 0, (t1291 * t750 - t793 * t829) * t926 + (t1293 * t749 - t792 * t828) * t922 + (t1295 * t748 - t791 * t827) * t918 + (t1298 * t747 - t790 * t826) * t911, (-t1178 * t750 + t1410 * t829) * t926 + (-t1184 * t749 + t1411 * t828) * t922 + (-t1190 * t748 + t1412 * t827) * t918 + (-t1200 * t747 + t1413 * t826) * t911, 0, 0, 0, 0; (t789 * t1357 + t788 * t1360 + t787 * t1363 + t786 * t1366) * t964, 0, 0, t747 * t737 + t748 * t742 + t749 * t744 + t750 * t746 + (t746 * t1357 + t744 * t1360 + t742 * t1363 + t737 * t1366) * t964, t1321 * t1367 + t1315 * t1364 + t1311 * t1361 + t1307 * t1358 + (t750 * t1380 + t749 * t1382 + t748 * t1384 + t747 * t1386) * pkin(1), -t1367 - t1364 - t1361 - t1358 + (-t750 * t1381 - t749 * t1383 - t748 * t1385 - t747 * t1387) * pkin(1), t737 * t1397 + t742 * t1394 + t744 * t1391 + t746 * t1388 + (t1242 * t746 + t1243 * t744 + t1244 * t742 + t1245 * t737) * t964, 0.2e1 * t737 * t1276 + 0.2e1 * t742 * t1274 + 0.2e1 * t744 * t1272 + 0.2e1 * t746 * t1270 + 0.2e1 * (t1138 * t746 + t1139 * t744 + t1140 * t742 + t1141 * t737) * t964, 0, 0, 0, t735 * t1196 * t1409 + t738 * t1186 * t1408 + t739 * t1180 * t1407 + t740 * t1174 * t1406 + (t1254 * t750 + t1258 * t749 + t1262 * t748 + t1266 * t747) * pkin(1), t826 * t1053 + t827 * t1050 + t828 * t1047 + t829 * t1044 + (-t1255 * t750 - t1259 * t749 - t1263 * t748 - t1267 * t747) * pkin(1), 1, 0, 0, 0;];
tau_reg  = t1;
