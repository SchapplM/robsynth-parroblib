% Calculate minimal parameter regressor of inverse dynamics forces for
% P4RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [17x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4RRRRR2G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [4x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:26
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P4RRRRR2G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(2,1),zeros(17,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [17 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_mdp: MDP has to be [17x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 17:25:47
% EndTime: 2020-08-07 17:26:06
% DurationCPUTime: 19.26s
% Computational Cost: add. (97015->881), mult. (157927->1461), div. (36712->32), fcn. (121416->90), ass. (0->614)
t2691 = xDDP(3);
t3022 = -t2691 / 0.2e1;
t2716 = xP(4);
t2640 = sin(t2716);
t2641 = cos(t2716);
t2717 = koppelP(4,2);
t2721 = koppelP(4,1);
t2500 = -t2640 * t2717 + t2641 * t2721;
t2712 = xDP(4);
t2714 = xDP(2);
t2486 = t2500 * t2712 + t2714;
t2980 = legFrame(4,3);
t2816 = qJ(1,4) + t2980;
t2608 = sin(t2816);
t2685 = sin(qJ(2,4));
t2688 = cos(qJ(2,4));
t2713 = xDP(3);
t2783 = cos(t2816);
t2729 = 0.1e1 / pkin(1);
t2645 = 0.1e1 / t2685;
t2687 = cos(qJ(3,4));
t2648 = 0.1e1 / t2687;
t2684 = sin(qJ(3,4));
t2903 = t2648 * t2684;
t2842 = t2645 * t2903;
t2799 = t2729 * t2842;
t2496 = t2640 * t2721 + t2641 * t2717;
t2715 = xDP(1);
t2811 = -t2496 * t2712 + t2715;
t2904 = t2645 * t2729;
t2411 = t2713 * t2799 + ((-t2685 * t2608 + t2688 * t2783) * t2811 + (t2688 * t2608 + t2685 * t2783) * t2486) * t2904;
t2963 = pkin(2) * t2687;
t2974 = pkin(1) * t2688;
t2544 = t2963 + t2974;
t2888 = t2684 * t2713;
t2402 = -t2544 * t2888 + ((-(t2486 * t2685 + t2688 * t2811) * t2963 - pkin(1) * t2811) * t2783 - ((t2486 * t2688 - t2685 * t2811) * t2963 + pkin(1) * t2486) * t2608) * t2687;
t2649 = 0.1e1 / t2687 ^ 2;
t2726 = 0.1e1 / pkin(2);
t2882 = t2726 * t2729;
t2841 = t2649 * t2882;
t2798 = t2645 * t2841;
t2778 = t2402 * t2798;
t2389 = t2778 + t2411;
t2730 = 0.1e1 / pkin(1) ^ 2;
t2850 = t2402 / t2685 ^ 2 * t2730;
t2366 = t2389 * t2648 * t2850;
t2676 = t2712 ^ 2;
t2690 = xDDP(4);
t2692 = xDDP(2);
t2442 = -t2496 * t2676 + t2500 * t2690 + t2692;
t2609 = qJ(2,4) + t2816;
t2592 = sin(t2609);
t2426 = t2592 * t2442 * t2904;
t2693 = xDDP(1);
t2446 = -t2496 * t2690 - t2500 * t2676 + t2693;
t2593 = cos(t2609);
t2427 = t2593 * t2446 * t2904;
t2504 = t2691 * t2799;
t2677 = t2713 ^ 2;
t2830 = t2677 * t2882;
t2647 = t2687 ^ 2;
t2731 = t2687 * t2647;
t2650 = 0.1e1 / t2731;
t3017 = t2645 * t2650;
t2537 = t2830 * t3017;
t2725 = pkin(2) ^ 2;
t2386 = t2725 * t2389 * t2731;
t2387 = t2778 / 0.2e1 + t2411;
t2728 = pkin(1) ^ 2;
t2829 = t2685 * t2888;
t2967 = pkin(2) * t2647;
t2863 = t2688 * t2967;
t3008 = 0.2e1 * pkin(1);
t2354 = t2386 + t2387 * t2863 * t3008 + (-pkin(1) * t2648 * t2829 + t2411 * t2728) * t2687;
t2883 = t2713 * t2726;
t2797 = t2648 * t2688 * t2883;
t2975 = pkin(1) * t2684;
t2379 = (-t2389 * t2685 * t2975 + t2648 * t2713) * t2687 + pkin(1) * t2797;
t2917 = t2544 * t2684;
t2750 = t2798 * t2917;
t2727 = 0.1e1 / pkin(2) ^ 2;
t2770 = t2727 / t2647 ^ 2 * t2850;
t2754 = (t2386 + (t2389 * t2863 - t2829) * pkin(1)) * t2770;
t2774 = t2411 * t2798;
t2821 = -t2882 / 0.2e1;
t2787 = t2713 * t2821;
t2820 = t2882 / 0.2e1;
t2594 = qJ(3,4) + t2609;
t2552 = cos(t2594);
t2595 = -qJ(3,4) + t2609;
t2553 = cos(t2595);
t2463 = t2783 * t3008 + (t2552 + t2553) * pkin(2);
t2642 = qJ(2,4) + qJ(3,4);
t2616 = sin(t2642);
t2643 = qJ(2,4) - qJ(3,4);
t2617 = sin(t2643);
t2869 = t2616 + t2617;
t2536 = 0.1e1 / t2869;
t2932 = t2463 * t2536;
t2550 = sin(t2594);
t2551 = sin(t2595);
t2979 = pkin(1) * t2608;
t2462 = -0.2e1 * t2979 + (-t2550 - t2551) * pkin(2);
t2933 = t2462 * t2536;
t2746 = -t2354 * t2774 / 0.2e1 - t2754 / 0.2e1 + t2379 * t2787 * t3017 + t2442 * t2820 * t2933 + t2446 * t2821 * t2932 + t2750 * t3022;
t2905 = t2645 * t2648;
t2807 = (-t2411 * t2687 * t2974 - t2389 * t2967) * t2411 * t2905;
t2782 = t2729 * t2807;
t2825 = t2389 * t2883;
t2314 = (t2427 / 0.2e1 + t2426 / 0.2e1 + t2504 / 0.2e1 - t2782 / 0.2e1 + t2366 / 0.2e1 + t2537 / 0.2e1 + t2746) * t2684 + t2825;
t3021 = t2314 * t2684 ^ 2;
t2718 = koppelP(3,2);
t2722 = koppelP(3,1);
t2501 = -t2640 * t2718 + t2641 * t2722;
t2487 = t2501 * t2712 + t2714;
t2981 = legFrame(3,3);
t2817 = qJ(1,3) + t2981;
t2610 = sin(t2817);
t2695 = sin(qJ(2,3));
t2704 = cos(qJ(2,3));
t2784 = cos(t2817);
t2653 = 0.1e1 / t2695;
t2703 = cos(qJ(3,3));
t2662 = 0.1e1 / t2703;
t2694 = sin(qJ(3,3));
t2895 = t2662 * t2694;
t2840 = t2653 * t2895;
t2796 = t2729 * t2840;
t2497 = t2640 * t2722 + t2641 * t2718;
t2810 = -t2497 * t2712 + t2715;
t2900 = t2653 * t2729;
t2416 = t2713 * t2796 + ((-t2695 * t2610 + t2704 * t2784) * t2810 + (t2704 * t2610 + t2695 * t2784) * t2487) * t2900;
t2962 = pkin(2) * t2703;
t2970 = pkin(1) * t2704;
t2554 = t2962 + t2970;
t2886 = t2694 * t2713;
t2403 = -t2554 * t2886 + ((-(t2487 * t2695 + t2704 * t2810) * t2962 - pkin(1) * t2810) * t2784 - ((t2487 * t2704 - t2695 * t2810) * t2962 + pkin(1) * t2487) * t2610) * t2703;
t2663 = 0.1e1 / t2703 ^ 2;
t2837 = t2663 * t2882;
t2795 = t2653 * t2837;
t2777 = t2403 * t2795;
t2400 = t2777 + t2416;
t2849 = t2403 / t2695 ^ 2 * t2730;
t2368 = t2400 * t2662 * t2849;
t2443 = -t2497 * t2676 + t2501 * t2690 + t2692;
t2613 = qJ(2,3) + t2817;
t2596 = sin(t2613);
t2428 = t2596 * t2443 * t2900;
t2447 = -t2497 * t2690 - t2501 * t2676 + t2693;
t2599 = cos(t2613);
t2431 = t2599 * t2447 * t2900;
t2518 = t2691 * t2796;
t2661 = t2703 ^ 2;
t2733 = t2703 * t2661;
t2664 = 0.1e1 / t2733;
t3016 = t2653 * t2664;
t2541 = t2830 * t3016;
t2391 = t2725 * t2400 * t2733;
t2394 = t2777 / 0.2e1 + t2416;
t2828 = t2695 * t2886;
t2966 = pkin(2) * t2661;
t2862 = t2704 * t2966;
t2356 = t2391 + t2394 * t2862 * t3008 + (-pkin(1) * t2662 * t2828 + t2416 * t2728) * t2703;
t2790 = t2662 * t2704 * t2883;
t2973 = pkin(1) * t2694;
t2383 = (-t2400 * t2695 * t2973 + t2662 * t2713) * t2703 + pkin(1) * t2790;
t2916 = t2554 * t2694;
t2749 = t2795 * t2916;
t2769 = t2727 / t2661 ^ 2 * t2849;
t2752 = (t2391 + (t2400 * t2862 - t2828) * pkin(1)) * t2769;
t2771 = t2416 * t2795;
t2602 = qJ(3,3) + t2613;
t2579 = cos(t2602);
t2603 = -qJ(3,3) + t2613;
t2580 = cos(t2603);
t2467 = t2784 * t3008 + (t2579 + t2580) * pkin(2);
t2678 = qJ(2,3) + qJ(3,3);
t2620 = sin(t2678);
t2679 = qJ(2,3) - qJ(3,3);
t2621 = sin(t2679);
t2868 = t2620 + t2621;
t2538 = 0.1e1 / t2868;
t2928 = t2467 * t2538;
t2573 = sin(t2602);
t2574 = sin(t2603);
t2978 = pkin(1) * t2610;
t2464 = -0.2e1 * t2978 + (-t2573 - t2574) * pkin(2);
t2931 = t2464 * t2538;
t2744 = -t2356 * t2771 / 0.2e1 - t2752 / 0.2e1 + t2383 * t2787 * t3016 + t2443 * t2820 * t2931 + t2447 * t2821 * t2928 + t2749 * t3022;
t2901 = t2653 * t2662;
t2805 = (-t2416 * t2703 * t2970 - t2400 * t2966) * t2416 * t2901;
t2780 = t2729 * t2805;
t2824 = t2400 * t2883;
t2315 = (t2431 / 0.2e1 + t2428 / 0.2e1 + t2518 / 0.2e1 - t2780 / 0.2e1 + t2368 / 0.2e1 + t2541 / 0.2e1 + t2744) * t2694 + t2824;
t3020 = t2315 * t2694 ^ 2;
t2719 = koppelP(2,2);
t2723 = koppelP(2,1);
t2502 = -t2640 * t2719 + t2641 * t2723;
t2488 = t2502 * t2712 + t2714;
t2982 = legFrame(2,3);
t2818 = qJ(1,2) + t2982;
t2611 = sin(t2818);
t2698 = sin(qJ(2,2));
t2707 = cos(qJ(2,2));
t2785 = cos(t2818);
t2656 = 0.1e1 / t2698;
t2706 = cos(qJ(3,2));
t2667 = 0.1e1 / t2706;
t2697 = sin(qJ(3,2));
t2893 = t2667 * t2697;
t2839 = t2656 * t2893;
t2794 = t2729 * t2839;
t2498 = t2640 * t2723 + t2641 * t2719;
t2809 = -t2498 * t2712 + t2715;
t2898 = t2656 * t2729;
t2417 = t2713 * t2794 + ((-t2698 * t2611 + t2707 * t2785) * t2809 + (t2707 * t2611 + t2698 * t2785) * t2488) * t2898;
t2961 = pkin(2) * t2706;
t2969 = pkin(1) * t2707;
t2557 = t2961 + t2969;
t2885 = t2697 * t2713;
t2404 = -t2557 * t2885 + ((-(t2488 * t2698 + t2707 * t2809) * t2961 - pkin(1) * t2809) * t2785 - ((t2488 * t2707 - t2698 * t2809) * t2961 + pkin(1) * t2488) * t2611) * t2706;
t2668 = 0.1e1 / t2706 ^ 2;
t2836 = t2668 * t2882;
t2793 = t2656 * t2836;
t2776 = t2404 * t2793;
t2401 = t2776 + t2417;
t2848 = t2404 / t2698 ^ 2 * t2730;
t2369 = t2401 * t2667 * t2848;
t2444 = -t2498 * t2676 + t2502 * t2690 + t2692;
t2614 = qJ(2,2) + t2818;
t2597 = sin(t2614);
t2429 = t2597 * t2444 * t2898;
t2448 = -t2498 * t2690 - t2502 * t2676 + t2693;
t2600 = cos(t2614);
t2432 = t2600 * t2448 * t2898;
t2519 = t2691 * t2794;
t2666 = t2706 ^ 2;
t2735 = t2706 * t2666;
t2669 = 0.1e1 / t2735;
t3015 = t2656 * t2669;
t2542 = t2830 * t3015;
t2392 = t2725 * t2401 * t2735;
t2395 = t2776 / 0.2e1 + t2417;
t2827 = t2698 * t2885;
t2965 = pkin(2) * t2666;
t2861 = t2707 * t2965;
t2357 = t2392 + t2395 * t2861 * t3008 + (-pkin(1) * t2667 * t2827 + t2417 * t2728) * t2706;
t2789 = t2667 * t2707 * t2883;
t2972 = pkin(1) * t2697;
t2384 = (-t2401 * t2698 * t2972 + t2667 * t2713) * t2706 + pkin(1) * t2789;
t2915 = t2557 * t2697;
t2748 = t2793 * t2915;
t2768 = t2727 / t2666 ^ 2 * t2848;
t2751 = (t2392 + (t2401 * t2861 - t2827) * pkin(1)) * t2768;
t2772 = t2417 * t2793;
t2604 = qJ(3,2) + t2614;
t2581 = cos(t2604);
t2605 = -qJ(3,2) + t2614;
t2582 = cos(t2605);
t2468 = t2785 * t3008 + (t2581 + t2582) * pkin(2);
t2680 = qJ(2,2) + qJ(3,2);
t2622 = sin(t2680);
t2681 = qJ(2,2) - qJ(3,2);
t2623 = sin(t2681);
t2867 = t2622 + t2623;
t2539 = 0.1e1 / t2867;
t2927 = t2468 * t2539;
t2575 = sin(t2604);
t2576 = sin(t2605);
t2977 = pkin(1) * t2611;
t2465 = -0.2e1 * t2977 + (-t2575 - t2576) * pkin(2);
t2930 = t2465 * t2539;
t2743 = -t2357 * t2772 / 0.2e1 - t2751 / 0.2e1 + t2384 * t2787 * t3015 + t2444 * t2820 * t2930 + t2448 * t2821 * t2927 + t2748 * t3022;
t2899 = t2656 * t2667;
t2804 = (-t2417 * t2706 * t2969 - t2401 * t2965) * t2417 * t2899;
t2779 = t2729 * t2804;
t2823 = t2401 * t2883;
t2316 = (t2432 / 0.2e1 + t2429 / 0.2e1 + t2519 / 0.2e1 - t2779 / 0.2e1 + t2369 / 0.2e1 + t2542 / 0.2e1 + t2743) * t2697 + t2823;
t3019 = t2316 * t2697 ^ 2;
t2720 = koppelP(1,2);
t2724 = koppelP(1,1);
t2503 = -t2640 * t2720 + t2641 * t2724;
t2489 = t2503 * t2712 + t2714;
t2983 = legFrame(1,3);
t2819 = qJ(1,1) + t2983;
t2612 = sin(t2819);
t2701 = sin(qJ(2,1));
t2710 = cos(qJ(2,1));
t2786 = cos(t2819);
t2659 = 0.1e1 / t2701;
t2709 = cos(qJ(3,1));
t2672 = 0.1e1 / t2709;
t2700 = sin(qJ(3,1));
t2891 = t2672 * t2700;
t2838 = t2659 * t2891;
t2792 = t2729 * t2838;
t2499 = t2640 * t2724 + t2641 * t2720;
t2808 = -t2499 * t2712 + t2715;
t2896 = t2659 * t2729;
t2415 = t2713 * t2792 + ((-t2701 * t2612 + t2710 * t2786) * t2808 + (t2710 * t2612 + t2701 * t2786) * t2489) * t2896;
t2960 = pkin(2) * t2709;
t2968 = pkin(1) * t2710;
t2560 = t2960 + t2968;
t2884 = t2700 * t2713;
t2405 = -t2560 * t2884 + ((-(t2489 * t2701 + t2710 * t2808) * t2960 - pkin(1) * t2808) * t2786 - ((t2489 * t2710 - t2701 * t2808) * t2960 + pkin(1) * t2489) * t2612) * t2709;
t2673 = 0.1e1 / t2709 ^ 2;
t2835 = t2673 * t2882;
t2791 = t2659 * t2835;
t2775 = t2405 * t2791;
t2399 = t2775 + t2415;
t2847 = t2405 / t2701 ^ 2 * t2730;
t2367 = t2399 * t2672 * t2847;
t2445 = -t2499 * t2676 + t2503 * t2690 + t2692;
t2615 = qJ(2,1) + t2819;
t2598 = sin(t2615);
t2430 = t2598 * t2445 * t2896;
t2449 = -t2499 * t2690 - t2503 * t2676 + t2693;
t2601 = cos(t2615);
t2433 = t2601 * t2449 * t2896;
t2520 = t2691 * t2792;
t2671 = t2709 ^ 2;
t2737 = t2709 * t2671;
t2674 = 0.1e1 / t2737;
t3014 = t2659 * t2674;
t2543 = t2830 * t3014;
t2390 = t2725 * t2399 * t2737;
t2393 = t2775 / 0.2e1 + t2415;
t2826 = t2701 * t2884;
t2964 = pkin(2) * t2671;
t2860 = t2710 * t2964;
t2355 = t2390 + t2393 * t2860 * t3008 + (-pkin(1) * t2672 * t2826 + t2415 * t2728) * t2709;
t2788 = t2672 * t2710 * t2883;
t2971 = pkin(1) * t2700;
t2385 = (-t2399 * t2701 * t2971 + t2672 * t2713) * t2709 + pkin(1) * t2788;
t2914 = t2560 * t2700;
t2747 = t2791 * t2914;
t2767 = t2727 / t2671 ^ 2 * t2847;
t2753 = (t2390 + (t2399 * t2860 - t2826) * pkin(1)) * t2767;
t2773 = t2415 * t2791;
t2606 = qJ(3,1) + t2615;
t2583 = cos(t2606);
t2607 = -qJ(3,1) + t2615;
t2584 = cos(t2607);
t2469 = t2786 * t3008 + (t2583 + t2584) * pkin(2);
t2682 = qJ(2,1) + qJ(3,1);
t2624 = sin(t2682);
t2683 = qJ(2,1) - qJ(3,1);
t2625 = sin(t2683);
t2866 = t2624 + t2625;
t2540 = 0.1e1 / t2866;
t2926 = t2469 * t2540;
t2577 = sin(t2606);
t2578 = sin(t2607);
t2976 = pkin(1) * t2612;
t2466 = -0.2e1 * t2976 + (-t2577 - t2578) * pkin(2);
t2929 = t2466 * t2540;
t2745 = -t2355 * t2773 / 0.2e1 - t2753 / 0.2e1 + t2385 * t2787 * t3014 + t2445 * t2820 * t2929 + t2449 * t2821 * t2926 + t2747 * t3022;
t2897 = t2659 * t2672;
t2806 = (-t2415 * t2709 * t2968 - t2399 * t2964) * t2415 * t2897;
t2781 = t2729 * t2806;
t2851 = t2399 * t2883;
t2317 = (t2433 / 0.2e1 + t2430 / 0.2e1 + t2520 / 0.2e1 - t2781 / 0.2e1 + t2367 / 0.2e1 + t2543 / 0.2e1 + t2745) * t2700 + t2851;
t3018 = t2317 * t2700 ^ 2;
t2766 = t2366 + t2426 + t2427 + t2504 + t2537;
t2342 = t2766 - t2782;
t2318 = t2342 + t2746;
t2632 = sin(t2980);
t2636 = cos(t2980);
t2889 = t2677 * t2727;
t2822 = t2889 / 0.2e1;
t2689 = cos(qJ(1,4));
t2950 = t2689 * g(2);
t2951 = t2689 * g(1);
t2686 = sin(qJ(1,4));
t2952 = t2686 * g(2);
t2959 = g(1) * t2686;
t3013 = t2688 * (t2318 * t3008 - (t2950 - t2959) * t2636 + (t2951 + t2952) * t2632) - 0.2e1 * ((-t2951 / 0.2e1 - t2952 / 0.2e1) * t2636 + (-t2950 / 0.2e1 + t2959 / 0.2e1) * t2632 + pkin(1) * (t2649 * t2822 + (t2774 + t2770 / 0.2e1) * t2402)) * t2685;
t2764 = t2368 + t2428 + t2431 + t2518 + t2541;
t2343 = t2764 - t2780;
t2320 = t2343 + t2744;
t2633 = sin(t2981);
t2637 = cos(t2981);
t2705 = cos(qJ(1,3));
t2946 = t2705 * g(2);
t2947 = t2705 * g(1);
t2696 = sin(qJ(1,3));
t2949 = t2696 * g(2);
t2958 = g(1) * t2696;
t3012 = t2704 * (t2320 * t3008 - (t2946 - t2958) * t2637 + (t2947 + t2949) * t2633) - 0.2e1 * ((-t2947 / 0.2e1 - t2949 / 0.2e1) * t2637 + (-t2946 / 0.2e1 + t2958 / 0.2e1) * t2633 + pkin(1) * (t2663 * t2822 + (t2771 + t2769 / 0.2e1) * t2403)) * t2695;
t2763 = t2369 + t2429 + t2432 + t2519 + t2542;
t2344 = t2763 - t2779;
t2321 = t2344 + t2743;
t2634 = sin(t2982);
t2638 = cos(t2982);
t2708 = cos(qJ(1,2));
t2944 = t2708 * g(2);
t2945 = t2708 * g(1);
t2699 = sin(qJ(1,2));
t2948 = t2699 * g(2);
t2957 = g(1) * t2699;
t3011 = t2707 * (t2321 * t3008 - (t2944 - t2957) * t2638 + (t2945 + t2948) * t2634) - 0.2e1 * ((-t2945 / 0.2e1 - t2948 / 0.2e1) * t2638 + (-t2944 / 0.2e1 + t2957 / 0.2e1) * t2634 + pkin(1) * (t2668 * t2822 + (t2772 + t2768 / 0.2e1) * t2404)) * t2698;
t2765 = t2367 + t2430 + t2433 + t2520 + t2543;
t2345 = t2765 - t2781;
t2322 = t2345 + t2745;
t2635 = sin(t2983);
t2639 = cos(t2983);
t2711 = cos(qJ(1,1));
t2953 = g(2) * t2711;
t2702 = sin(qJ(1,1));
t2954 = g(2) * t2702;
t2955 = g(1) * t2711;
t2956 = g(1) * t2702;
t3010 = t2710 * (t2322 * t3008 - (t2953 - t2956) * t2639 + (t2954 + t2955) * t2635) - 0.2e1 * ((-t2955 / 0.2e1 - t2954 / 0.2e1) * t2639 + (-t2953 / 0.2e1 + t2956 / 0.2e1) * t2635 + pkin(1) * (t2673 * t2822 + (t2773 + t2767 / 0.2e1) * t2405)) * t2701;
t3009 = -0.2e1 * pkin(1);
t3007 = -pkin(1) / 0.2e1;
t3006 = pkin(1) / 0.2e1;
t3005 = g(1) / 0.2e1;
t3004 = -g(2) / 0.2e1;
t3003 = t2550 / 0.2e1;
t3002 = t2551 / 0.2e1;
t3001 = -t2553 / 0.2e1;
t3000 = t2573 / 0.2e1;
t2999 = t2574 / 0.2e1;
t2998 = t2575 / 0.2e1;
t2997 = t2576 / 0.2e1;
t2996 = t2577 / 0.2e1;
t2995 = t2578 / 0.2e1;
t2994 = -t2580 / 0.2e1;
t2993 = -t2582 / 0.2e1;
t2992 = -t2584 / 0.2e1;
t2991 = -t2617 / 0.2e1;
t2618 = cos(t2642);
t2990 = t2618 / 0.2e1;
t2989 = -t2621 / 0.2e1;
t2988 = -t2623 / 0.2e1;
t2987 = -t2625 / 0.2e1;
t2626 = cos(t2678);
t2986 = t2626 / 0.2e1;
t2628 = cos(t2680);
t2985 = t2628 / 0.2e1;
t2630 = cos(t2682);
t2984 = t2630 / 0.2e1;
t2943 = t2692 - g(2);
t2942 = t2693 - g(1);
t2941 = t2314 * t2684;
t2940 = t2315 * t2694;
t2939 = t2316 * t2697;
t2938 = t2317 * t2700;
t2834 = t2684 * t2889;
t2887 = t2691 * t2726;
t2490 = t2648 * t2887 + t2650 * t2834;
t2470 = t2490 * t2684 + t2648 * t2889;
t2925 = t2470 * t2536;
t2833 = t2694 * t2889;
t2491 = t2662 * t2887 + t2664 * t2833;
t2471 = t2491 * t2694 + t2662 * t2889;
t2924 = t2471 * t2538;
t2832 = t2697 * t2889;
t2492 = t2667 * t2887 + t2669 * t2832;
t2472 = t2492 * t2697 + t2667 * t2889;
t2923 = t2472 * t2539;
t2831 = t2700 * t2889;
t2493 = t2672 * t2887 + t2674 * t2831;
t2473 = t2493 * t2700 + t2672 * t2889;
t2922 = t2473 * t2540;
t2572 = -t2716 + t2609;
t2474 = -t2717 * cos(t2572) + t2721 * sin(t2572);
t2921 = t2474 * t2645;
t2586 = -t2716 + t2613;
t2475 = -t2718 * cos(t2586) + t2722 * sin(t2586);
t2920 = t2475 * t2653;
t2587 = -t2716 + t2614;
t2476 = -t2719 * cos(t2587) + t2723 * sin(t2587);
t2919 = t2476 * t2656;
t2588 = -t2716 + t2615;
t2477 = -t2720 * cos(t2588) + t2724 * sin(t2588);
t2918 = t2477 * t2659;
t2913 = t2592 * t2645;
t2912 = t2593 * t2645;
t2911 = t2596 * t2653;
t2910 = t2597 * t2656;
t2909 = t2598 * t2659;
t2908 = t2599 * t2653;
t2907 = t2600 * t2656;
t2906 = t2601 * t2659;
t2902 = t2648 * t2726;
t2894 = t2662 * t2726;
t2892 = t2667 * t2726;
t2890 = t2672 * t2726;
t2881 = g(2) * t3003 + t2552 * t3005;
t2880 = g(1) * t3003 + t2552 * t3004;
t2879 = g(2) * t3000 + t2579 * t3005;
t2878 = g(2) * t2998 + t2581 * t3005;
t2877 = g(2) * t2996 + t2583 * t3005;
t2876 = g(1) * t3000 + t2579 * t3004;
t2875 = g(1) * t2998 + t2581 * t3004;
t2874 = g(1) * t2996 + t2583 * t3004;
t2873 = g(1) * t2593 + g(2) * t2592;
t2872 = g(1) * t2599 + g(2) * t2596;
t2871 = g(1) * t2600 + g(2) * t2597;
t2870 = g(1) * t2601 + g(2) * t2598;
t2865 = 2 * MDP(7);
t2864 = 0.2e1 * t2729;
t2859 = t2536 * t2941;
t2858 = t2645 * t2941;
t2857 = t2538 * t2940;
t2856 = t2653 * t2940;
t2855 = t2539 * t2939;
t2854 = t2656 * t2939;
t2853 = t2540 * t2938;
t2852 = t2659 * t2938;
t2846 = t2544 * t2645 * t2649;
t2845 = t2554 * t2653 * t2663;
t2844 = t2557 * t2656 * t2668;
t2843 = t2560 * t2659 * t2673;
t2815 = g(1) * t2592 - g(2) * t2593;
t2814 = g(1) * t2596 - g(2) * t2599;
t2813 = g(1) * t2597 - g(2) * t2600;
t2812 = g(1) * t2598 - g(2) * t2601;
t2803 = t2684 * t2846;
t2802 = t2694 * t2845;
t2801 = t2697 * t2844;
t2800 = t2700 * t2843;
t2762 = g(1) * t3002 + g(2) * t3001;
t2761 = g(1) * t3001 + t2551 * t3004;
t2760 = g(1) * t2999 + g(2) * t2994;
t2759 = g(1) * t2997 + g(2) * t2993;
t2758 = g(1) * t2995 + g(2) * t2992;
t2757 = g(1) * t2994 + t2574 * t3004;
t2756 = g(1) * t2993 + t2576 * t3004;
t2755 = g(1) * t2992 + t2578 * t3004;
t2631 = cos(t2683);
t2629 = cos(t2681);
t2627 = cos(t2679);
t2619 = cos(t2643);
t2512 = t2639 * g(1) + t2635 * g(2);
t2511 = g(1) * t2638 + g(2) * t2634;
t2510 = g(1) * t2637 + g(2) * t2633;
t2509 = g(1) * t2636 + g(2) * t2632;
t2508 = g(1) * t2635 - g(2) * t2639;
t2507 = t2634 * g(1) - t2638 * g(2);
t2506 = g(1) * t2633 - g(2) * t2637;
t2505 = t2632 * g(1) - t2636 * g(2);
t2495 = -t2640 * t2690 - t2641 * t2676;
t2494 = -t2640 * t2676 + t2641 * t2690;
t2461 = t2493 * t2709 - t2673 * t2831;
t2460 = t2492 * t2706 - t2668 * t2832;
t2459 = t2491 * t2703 - t2663 * t2833;
t2458 = t2490 * t2687 - t2649 * t2834;
t2457 = -t2508 * t2702 + t2512 * t2711;
t2456 = -t2507 * t2699 + t2511 * t2708;
t2455 = -t2506 * t2696 + t2510 * t2705;
t2454 = t2508 * t2711 + t2512 * t2702;
t2453 = t2507 * t2708 + t2511 * t2699;
t2452 = t2506 * t2705 + t2510 * t2696;
t2451 = -t2505 * t2686 + t2509 * t2689;
t2450 = t2505 * t2689 + t2509 * t2686;
t2414 = t2417 ^ 2;
t2413 = t2416 ^ 2;
t2412 = t2415 ^ 2;
t2410 = t2411 ^ 2;
t2409 = (t2499 * t2469 - 0.2e1 * t2503 * (t2976 + (t2995 + t2996) * pkin(2))) * t2540 * t2882;
t2408 = (t2498 * t2468 - 0.2e1 * t2502 * (t2977 + (t2997 + t2998) * pkin(2))) * t2539 * t2882;
t2407 = (t2497 * t2467 - 0.2e1 * t2501 * (t2978 + (t2999 + t3000) * pkin(2))) * t2538 * t2882;
t2406 = (t2496 * t2463 - 0.2e1 * t2500 * (t2979 + (t3002 + t3003) * pkin(2))) * t2536 * t2882;
t2398 = t2401 ^ 2;
t2397 = t2400 ^ 2;
t2396 = t2399 ^ 2;
t2388 = t2389 ^ 2;
t2382 = 0.2e1 * t2399 * t2788 + t2493 * t2701;
t2381 = 0.2e1 * t2401 * t2789 + t2492 * t2698;
t2380 = 0.2e1 * t2400 * t2790 + t2491 * t2695;
t2378 = 0.2e1 * t2389 * t2797 + t2490 * t2685;
t2341 = (-t2343 * t2695 + t2413 * t2704) * pkin(1) + t2872;
t2340 = (t2345 * t2710 + t2412 * t2701) * pkin(1) + t2812;
t2339 = (t2344 * t2707 + t2414 * t2698) * pkin(1) + t2813;
t2338 = (-t2345 * t2701 + t2412 * t2710) * pkin(1) + t2870;
t2337 = (-t2344 * t2698 + t2414 * t2707) * pkin(1) + t2871;
t2336 = (t2343 * t2704 + t2413 * t2695) * pkin(1) + t2814;
t2335 = (-t2342 * t2685 + t2410 * t2688) * pkin(1) + t2873;
t2334 = (t2342 * t2688 + t2410 * t2685) * pkin(1) + t2815;
t2333 = ((-t2630 + t2631) * t2412 + (t2624 - t2625) * t2345) * t3007 + t2755 + t2877;
t2332 = ((-t2628 + t2629) * t2414 + (t2622 - t2623) * t2344) * t3007 + t2756 + t2878;
t2331 = ((-t2626 + t2627) * t2413 + (t2620 - t2621) * t2343) * t3007 + t2757 + t2879;
t2330 = (t2866 * t2412 + (t2630 + t2631) * t2345) * t3006 + t2758 + t2874;
t2329 = (t2867 * t2414 + (t2628 + t2629) * t2344) * t3006 + t2759 + t2875;
t2328 = (t2868 * t2413 + (t2626 + t2627) * t2343) * t3006 + t2760 + t2876;
t2327 = ((-t2618 + t2619) * t2410 + (t2616 - t2617) * t2342) * t3007 + t2761 + t2881;
t2326 = (t2869 * t2410 + (t2618 + t2619) * t2342) * t3006 + t2762 + t2880;
t2325 = -t2753 + (-t2806 + ((t2445 * t2466 - t2449 * t2469) * t2540 + (-t2385 * t2674 * t2713 + (-t2355 * t2415 - t2691 * t2914) * t2673) * t2659) * t2726) * t2729 + t2765;
t2324 = -t2751 + (-t2804 + ((t2444 * t2465 - t2448 * t2468) * t2539 + (-t2384 * t2669 * t2713 + (-t2357 * t2417 - t2691 * t2915) * t2668) * t2656) * t2726) * t2729 + t2763;
t2323 = -t2752 + (-t2805 + ((t2443 * t2464 - t2447 * t2467) * t2538 + (-t2383 * t2664 * t2713 + (-t2356 * t2416 - t2691 * t2916) * t2663) * t2653) * t2726) * t2729 + t2764;
t2319 = -t2754 + (-t2807 + ((t2442 * t2462 - t2446 * t2463) * t2536 + (-t2379 * t2650 * t2713 + (-t2354 * t2411 - t2691 * t2917) * t2649) * t2645) * t2726) * t2729 + t2766;
t2313 = (-t2393 * t2405 * t2835 + t2322 * t2710) * t3008 + t2812;
t2312 = (-t2395 * t2404 * t2836 + t2321 * t2707) * t3008 + t2813;
t2311 = (-t2394 * t2403 * t2837 + t2320 * t2704) * t3008 + t2814;
t2310 = (t2393 * t2710 * t2775 + t2322 * t2701) * t3009 + t2870;
t2309 = (t2395 * t2707 * t2776 + t2321 * t2698) * t3009 + t2871;
t2308 = (t2394 * t2704 * t2777 + t2320 * t2695) * t3009 + t2872;
t2307 = (-t2387 * t2402 * t2841 + t2318 * t2688) * t3008 + t2815;
t2306 = (t2387 * t2688 * t2778 + t2318 * t2685) * t3009 + t2873;
t2305 = 0.2e1 * t2325 * t2700 * t2709 + (-0.2e1 * t2672 + 0.4e1 * t2709) * t2851;
t2304 = 0.2e1 * t2324 * t2697 * t2706 + (-0.2e1 * t2667 + 0.4e1 * t2706) * t2823;
t2303 = 0.2e1 * t2323 * t2694 * t2703 + (-0.2e1 * t2662 + 0.4e1 * t2703) * t2824;
t2302 = 0.2e1 * t2319 * t2684 * t2687 + (-0.2e1 * t2648 + 0.4e1 * t2687) * t2825;
t2301 = -t2382 * t2971 + t3010 * t2709;
t2300 = -pkin(1) * t2382 * t2709 - t3010 * t2700;
t2299 = -t2381 * t2972 + t3011 * t2706;
t2298 = -pkin(1) * t2381 * t2706 - t3011 * t2697;
t2297 = -t2380 * t2973 + t3012 * t2703;
t2296 = -pkin(1) * t2380 * t2703 - t3012 * t2694;
t2295 = -t2378 * t2975 + t3013 * t2687;
t2294 = -pkin(1) * t2378 * t2687 - t3013 * t2684;
t1 = [t2495 * MDP(15) - t2494 * MDP(16) + t2942 * MDP(17) + ((t2342 * t2912 + t2343 * t2908 + t2344 * t2907 + t2345 * t2906) * MDP(1) + (t2450 * t2912 + t2452 * t2908 + t2453 * t2907 + t2454 * t2906) * MDP(2) + (t2451 * t2912 + t2455 * t2908 + t2456 * t2907 + t2457 * t2906) * MDP(3) + (t2319 * t2912 + t2323 * t2908 + t2324 * t2907 + t2325 * t2906) * MDP(4) + (t2307 * t2912 + t2311 * t2908 + t2312 * t2907 + t2313 * t2906) * MDP(5) + (t2306 * t2912 + t2308 * t2908 + t2309 * t2907 + t2310 * t2906) * MDP(6) + (t2593 * t2858 + t2599 * t2856 + t2600 * t2854 + t2601 * t2852) * t2865 + (t2302 * t2912 + t2303 * t2908 + t2304 * t2907 + t2305 * t2906) * MDP(8) + (t2470 * t2912 + t2471 * t2908 + t2472 * t2907 + t2473 * t2906) * MDP(9) + (t2458 * t2912 + t2459 * t2908 + t2460 * t2907 + t2461 * t2906) * MDP(10) + (t2295 * t2912 + t2297 * t2908 + t2299 * t2907 + t2301 * t2906) * MDP(12) + (t2294 * t2912 + t2296 * t2908 + t2298 * t2907 + t2300 * t2906) * MDP(13) + ((-t2319 * t2932 - t2323 * t2928 - t2324 * t2927 - t2325 * t2926) * MDP(4) + (-t2334 * t2932 - t2336 * t2928 - t2339 * t2927 - t2340 * t2926) * MDP(5) + (-t2335 * t2932 - t2337 * t2927 - t2338 * t2926 - t2341 * t2928) * MDP(6) + (-t2463 * t2859 - t2467 * t2857 - t2468 * t2855 - t2469 * t2853) * t2865 + (-t2302 * t2932 - t2303 * t2928 - t2304 * t2927 - t2305 * t2926) * MDP(8) + (-t2463 * t2925 - t2467 * t2924 - t2468 * t2923 - t2469 * t2922) * MDP(9) + (-t2458 * t2932 - t2459 * t2928 - t2460 * t2927 - t2461 * t2926) * MDP(10) + (-t2326 * t2932 - t2328 * t2928 - t2329 * t2927 - t2330 * t2926) * MDP(12) + (-t2327 * t2932 - t2331 * t2928 - t2332 * t2927 - t2333 * t2926) * MDP(13)) * t2726) * t2729; t2494 * MDP(15) + t2495 * MDP(16) + t2943 * MDP(17) + ((t2342 * t2913 + t2343 * t2911 + t2344 * t2910 + t2345 * t2909) * MDP(1) + (t2450 * t2913 + t2452 * t2911 + t2453 * t2910 + t2454 * t2909) * MDP(2) + (t2451 * t2913 + t2455 * t2911 + t2456 * t2910 + t2457 * t2909) * MDP(3) + (t2319 * t2913 + t2323 * t2911 + t2324 * t2910 + t2325 * t2909) * MDP(4) + (t2307 * t2913 + t2311 * t2911 + t2312 * t2910 + t2313 * t2909) * MDP(5) + (t2306 * t2913 + t2308 * t2911 + t2309 * t2910 + t2310 * t2909) * MDP(6) + (t2592 * t2858 + t2596 * t2856 + t2597 * t2854 + t2598 * t2852) * t2865 + (t2302 * t2913 + t2303 * t2911 + t2304 * t2910 + t2305 * t2909) * MDP(8) + (t2470 * t2913 + t2471 * t2911 + t2472 * t2910 + t2473 * t2909) * MDP(9) + (t2458 * t2913 + t2459 * t2911 + t2460 * t2910 + t2461 * t2909) * MDP(10) + (t2295 * t2913 + t2297 * t2911 + t2299 * t2910 + t2301 * t2909) * MDP(12) + (t2294 * t2913 + t2296 * t2911 + t2298 * t2910 + t2300 * t2909) * MDP(13) + ((t2319 * t2933 + t2323 * t2931 + t2324 * t2930 + t2325 * t2929) * MDP(4) + (t2334 * t2933 + t2336 * t2931 + t2339 * t2930 + t2340 * t2929) * MDP(5) + (t2335 * t2933 + t2337 * t2930 + t2338 * t2929 + t2341 * t2931) * MDP(6) + (t2462 * t2859 + t2464 * t2857 + t2465 * t2855 + t2466 * t2853) * t2865 + (t2302 * t2933 + t2303 * t2931 + t2304 * t2930 + t2305 * t2929) * MDP(8) + (t2462 * t2925 + t2464 * t2924 + t2465 * t2923 + t2466 * t2922) * MDP(9) + (t2458 * t2933 + t2459 * t2931 + t2460 * t2930 + t2461 * t2929) * MDP(10) + (t2326 * t2933 + t2328 * t2931 + t2329 * t2930 + t2330 * t2929) * MDP(12) + (t2327 * t2933 + t2331 * t2931 + t2332 * t2930 + t2333 * t2929) * MDP(13)) * t2726) * t2729; (t2897 * t3018 + t2899 * t3019 + t2901 * t3020 + t2905 * t3021) * t2864 * MDP(7) + (t2301 * t2792 - t2330 * t2747 + (-g(3) * t2709 + ((t2624 / 0.2e1 + t2987) * t2412 + (-t2631 / 0.2e1 + t2984) * t2345) * pkin(1) - t2758 + t2874) * t2890 + t2299 * t2794 - t2329 * t2748 + (-g(3) * t2706 + ((t2622 / 0.2e1 + t2988) * t2414 + (-t2629 / 0.2e1 + t2985) * t2344) * pkin(1) - t2759 + t2875) * t2892 + t2297 * t2796 - t2328 * t2749 + (-g(3) * t2703 + ((t2620 / 0.2e1 + t2989) * t2413 + (-t2627 / 0.2e1 + t2986) * t2343) * pkin(1) - t2760 + t2876) * t2894 + t2295 * t2799 - t2326 * t2750 + (-g(3) * t2687 + ((t2616 / 0.2e1 + t2991) * t2410 + (-t2619 / 0.2e1 + t2990) * t2342) * pkin(1) - t2762 + t2880) * t2902) * MDP(12) + (t2300 * t2792 - t2333 * t2747 + (g(3) * t2700 + ((t2631 / 0.2e1 + t2984) * t2412 + (-t2624 / 0.2e1 + t2987) * t2345) * pkin(1) - t2755 + t2877) * t2890 + t2298 * t2794 - t2332 * t2748 + (g(3) * t2697 + ((t2629 / 0.2e1 + t2985) * t2414 + (-t2622 / 0.2e1 + t2988) * t2344) * pkin(1) - t2756 + t2878) * t2892 + t2296 * t2796 - t2331 * t2749 + (g(3) * t2694 + ((t2627 / 0.2e1 + t2986) * t2413 + (-t2620 / 0.2e1 + t2989) * t2343) * pkin(1) - t2757 + t2879) * t2894 + t2294 * t2799 - t2327 * t2750 + (g(3) * t2684 + ((t2619 / 0.2e1 + t2990) * t2410 + (-t2616 / 0.2e1 + t2991) * t2342) * pkin(1) - t2761 + t2881) * t2902) * MDP(13) + (t2691 - g(3)) * MDP(17) + ((-t2684 * t2388 - t2700 * t2396 - t2694 * t2397 - t2697 * t2398 + (-t2843 * t3018 - t2844 * t3019 - t2845 * t3020 - t2846 * t3021) * t2864) * MDP(7) + (t2672 * t2396 * (-0.2e1 * t2671 + 0.1e1) + t2667 * t2398 * (-0.2e1 * t2666 + 0.1e1) + t2662 * t2397 * (-0.2e1 * t2661 + 0.1e1) + t2648 * t2388 * (-0.2e1 * t2647 + 0.1e1)) * MDP(8) + (t2319 * t2903 + t2323 * t2895 + t2324 * t2893 + t2325 * t2891) * MDP(9) + (t2319 + t2323 + t2324 + t2325) * MDP(10) + (t2490 * t2648 + t2491 * t2662 + t2492 * t2667 + t2493 * t2672) * MDP(11)) * t2726 + ((t2342 * t2842 + t2343 * t2840 + t2344 * t2839 + t2345 * t2838) * MDP(1) + (t2450 * t2842 + t2452 * t2840 + t2453 * t2839 + t2454 * t2838) * MDP(2) + (t2451 * t2842 + t2455 * t2840 + t2456 * t2839 + t2457 * t2838) * MDP(3) + (t2319 * t2842 + t2323 * t2840 + t2324 * t2839 + t2325 * t2838 + (-t2319 * t2803 - t2323 * t2802 - t2324 * t2801 - t2325 * t2800) * t2726) * MDP(4) + (t2307 * t2842 + t2311 * t2840 + t2312 * t2839 + t2313 * t2838 + (-t2334 * t2803 - t2336 * t2802 - t2339 * t2801 - t2340 * t2800) * t2726) * MDP(5) + (t2306 * t2842 + t2308 * t2840 + t2309 * t2839 + t2310 * t2838 + (-t2335 * t2803 - t2337 * t2801 - t2338 * t2800 - t2341 * t2802) * t2726) * MDP(6) + (t2302 * t2842 + t2303 * t2840 + t2304 * t2839 + t2305 * t2838 + (-t2302 * t2803 - t2303 * t2802 - t2304 * t2801 - t2305 * t2800) * t2726) * MDP(8) + (t2470 * t2842 + t2471 * t2840 + t2472 * t2839 + t2473 * t2838 + (-t2470 * t2803 - t2471 * t2802 - t2472 * t2801 - t2473 * t2800) * t2726) * MDP(9) + (t2458 * t2842 + t2459 * t2840 + t2460 * t2839 + t2461 * t2838 + (-t2458 * t2803 - t2459 * t2802 - t2460 * t2801 - t2461 * t2800) * t2726) * MDP(10)) * t2729; (t2319 * t2406 + t2323 * t2407 + t2324 * t2408 + t2325 * t2409) * MDP(4) + (t2334 * t2406 + t2336 * t2407 + t2339 * t2408 + t2340 * t2409) * MDP(5) + (t2335 * t2406 + t2337 * t2408 + t2338 * t2409 + t2341 * t2407) * MDP(6) + (t2406 * t2941 + t2407 * t2940 + t2408 * t2939 + t2409 * t2938) * t2865 + (t2302 * t2406 + t2303 * t2407 + t2304 * t2408 + t2305 * t2409) * MDP(8) + (t2406 * t2470 + t2407 * t2471 + t2408 * t2472 + t2409 * t2473) * MDP(9) + (t2406 * t2458 + t2407 * t2459 + t2408 * t2460 + t2409 * t2461) * MDP(10) + (t2326 * t2406 + t2328 * t2407 + t2329 * t2408 + t2330 * t2409) * MDP(12) + (t2327 * t2406 + t2331 * t2407 + t2332 * t2408 + t2333 * t2409) * MDP(13) + t2690 * MDP(14) + (MDP(15) * t2943 - MDP(16) * t2942) * t2641 + (-MDP(15) * t2942 - MDP(16) * t2943) * t2640 + ((t2342 * t2921 + t2343 * t2920 + t2344 * t2919 + t2345 * t2918) * MDP(1) + (t2450 * t2921 + t2452 * t2920 + t2453 * t2919 + t2454 * t2918) * MDP(2) + (t2451 * t2921 + t2455 * t2920 + t2456 * t2919 + t2457 * t2918) * MDP(3) + (t2319 * t2921 + t2323 * t2920 + t2324 * t2919 + t2325 * t2918) * MDP(4) + (t2307 * t2921 + t2311 * t2920 + t2312 * t2919 + t2313 * t2918) * MDP(5) + (t2306 * t2921 + t2308 * t2920 + t2309 * t2919 + t2310 * t2918) * MDP(6) + (t2474 * t2858 + t2475 * t2856 + t2476 * t2854 + t2477 * t2852) * t2865 + (t2302 * t2921 + t2303 * t2920 + t2304 * t2919 + t2305 * t2918) * MDP(8) + (t2470 * t2921 + t2471 * t2920 + t2472 * t2919 + t2473 * t2918) * MDP(9) + (t2458 * t2921 + t2459 * t2920 + t2460 * t2919 + t2461 * t2918) * MDP(10) + (t2295 * t2921 + t2297 * t2920 + t2299 * t2919 + t2301 * t2918) * MDP(12) + (t2294 * t2921 + t2296 * t2920 + t2298 * t2919 + t2300 * t2918) * MDP(13)) * t2729;];
tauX  = t1;
