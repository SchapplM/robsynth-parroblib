% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P6PPPRRR1V2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d4,theta1,theta2,theta3]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x13]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 19:43
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6PPPRRR1V2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPPRRR1V2A0_coriolisvec_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6PPPRRR1V2A0_coriolisvec_para_pf_regmin: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPPRRR1V2A0_coriolisvec_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPPRRR1V2A0_coriolisvec_para_pf_regmin: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPPRRR1V2A0_coriolisvec_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPPRRR1V2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 19:34:55
% EndTime: 2019-05-16 19:36:01
% DurationCPUTime: 73.37s
% Computational Cost: add. (111223->1199), mult. (249460->2164), div. (4500->3), fcn. (233591->50), ass. (0->783)
t3489 = xP(5);
t3451 = sin(t3489);
t3491 = koppelP(6,3);
t3454 = cos(t3489);
t3488 = xP(6);
t3450 = sin(t3488);
t3453 = cos(t3488);
t3497 = koppelP(6,2);
t3503 = koppelP(6,1);
t3889 = -t3450 * t3497 + t3503 * t3453;
t3813 = t3454 * t3889;
t3244 = t3451 * t3491 + t3813;
t3467 = legFrame(6,3);
t3414 = sin(t3467);
t3426 = cos(t3467);
t3460 = sin(pkin(8));
t3464 = cos(pkin(8));
t3473 = legFrame(6,1);
t3432 = cos(t3473);
t3777 = t3432 * t3464;
t3778 = t3432 * t3460;
t3479 = legFrame(6,2);
t3444 = cos(t3479);
t3420 = sin(t3473);
t3438 = sin(t3479);
t3797 = t3420 * t3438;
t3490 = xP(4);
t3455 = cos(t3490);
t3678 = t3455 * t3503;
t3684 = t3455 * t3497;
t3452 = sin(t3490);
t3705 = t3452 * t3503;
t3711 = t3452 * t3497;
t3189 = (t3451 * t3705 + t3684) * t3453 + t3450 * (-t3451 * t3711 + t3678);
t3692 = t3454 * t3491;
t3895 = t3452 * t3692 - t3189;
t3924 = t3244 * t3797 + t3444 * t3895;
t3936 = t3426 * (t3244 * t3778 + t3464 * t3924) + t3414 * (t3244 * t3777 - t3460 * t3924);
t3492 = koppelP(5,3);
t3498 = koppelP(5,2);
t3504 = koppelP(5,1);
t3890 = -t3450 * t3498 + t3504 * t3453;
t3812 = t3454 * t3890;
t3245 = t3451 * t3492 + t3812;
t3468 = legFrame(5,3);
t3415 = sin(t3468);
t3427 = cos(t3468);
t3474 = legFrame(5,1);
t3433 = cos(t3474);
t3774 = t3433 * t3464;
t3775 = t3433 * t3460;
t3480 = legFrame(5,2);
t3445 = cos(t3480);
t3421 = sin(t3474);
t3439 = sin(t3480);
t3794 = t3421 * t3439;
t3677 = t3455 * t3504;
t3683 = t3455 * t3498;
t3704 = t3452 * t3504;
t3710 = t3452 * t3498;
t3190 = (t3451 * t3704 + t3683) * t3453 + t3450 * (-t3451 * t3710 + t3677);
t3691 = t3454 * t3492;
t3896 = t3452 * t3691 - t3190;
t3923 = t3245 * t3794 + t3445 * t3896;
t3935 = t3427 * (t3245 * t3775 + t3464 * t3923) + t3415 * (t3245 * t3774 - t3460 * t3923);
t3493 = koppelP(4,3);
t3499 = koppelP(4,2);
t3505 = koppelP(4,1);
t3891 = -t3450 * t3499 + t3505 * t3453;
t3811 = t3454 * t3891;
t3246 = t3451 * t3493 + t3811;
t3469 = legFrame(4,3);
t3416 = sin(t3469);
t3428 = cos(t3469);
t3475 = legFrame(4,1);
t3434 = cos(t3475);
t3771 = t3434 * t3464;
t3772 = t3434 * t3460;
t3481 = legFrame(4,2);
t3446 = cos(t3481);
t3422 = sin(t3475);
t3440 = sin(t3481);
t3791 = t3422 * t3440;
t3676 = t3455 * t3505;
t3682 = t3455 * t3499;
t3703 = t3452 * t3505;
t3709 = t3452 * t3499;
t3191 = (t3451 * t3703 + t3682) * t3453 + t3450 * (-t3451 * t3709 + t3676);
t3690 = t3454 * t3493;
t3897 = t3452 * t3690 - t3191;
t3922 = t3246 * t3791 + t3446 * t3897;
t3934 = t3428 * (t3246 * t3772 + t3464 * t3922) + t3416 * (t3246 * t3771 - t3460 * t3922);
t3494 = koppelP(3,3);
t3500 = koppelP(3,2);
t3506 = koppelP(3,1);
t3892 = -t3450 * t3500 + t3506 * t3453;
t3810 = t3454 * t3892;
t3247 = t3451 * t3494 + t3810;
t3470 = legFrame(3,3);
t3417 = sin(t3470);
t3429 = cos(t3470);
t3476 = legFrame(3,1);
t3435 = cos(t3476);
t3768 = t3435 * t3464;
t3769 = t3435 * t3460;
t3482 = legFrame(3,2);
t3447 = cos(t3482);
t3423 = sin(t3476);
t3441 = sin(t3482);
t3788 = t3423 * t3441;
t3675 = t3455 * t3506;
t3681 = t3455 * t3500;
t3702 = t3452 * t3506;
t3708 = t3452 * t3500;
t3192 = (t3451 * t3702 + t3681) * t3453 + t3450 * (-t3451 * t3708 + t3675);
t3689 = t3454 * t3494;
t3898 = t3452 * t3689 - t3192;
t3921 = t3247 * t3788 + t3447 * t3898;
t3933 = t3429 * (t3247 * t3769 + t3464 * t3921) + t3417 * (t3247 * t3768 - t3460 * t3921);
t3495 = koppelP(2,3);
t3501 = koppelP(2,2);
t3507 = koppelP(2,1);
t3893 = -t3450 * t3501 + t3507 * t3453;
t3809 = t3454 * t3893;
t3248 = t3451 * t3495 + t3809;
t3471 = legFrame(2,3);
t3418 = sin(t3471);
t3430 = cos(t3471);
t3477 = legFrame(2,1);
t3436 = cos(t3477);
t3765 = t3436 * t3464;
t3766 = t3436 * t3460;
t3483 = legFrame(2,2);
t3448 = cos(t3483);
t3424 = sin(t3477);
t3442 = sin(t3483);
t3785 = t3424 * t3442;
t3674 = t3455 * t3507;
t3680 = t3455 * t3501;
t3701 = t3452 * t3507;
t3707 = t3452 * t3501;
t3193 = (t3451 * t3701 + t3680) * t3453 + t3450 * (-t3451 * t3707 + t3674);
t3688 = t3454 * t3495;
t3899 = t3452 * t3688 - t3193;
t3920 = t3248 * t3785 + t3448 * t3899;
t3932 = t3430 * (t3248 * t3766 + t3464 * t3920) + t3418 * (t3248 * t3765 - t3460 * t3920);
t3496 = koppelP(1,3);
t3502 = koppelP(1,2);
t3508 = koppelP(1,1);
t3888 = -t3450 * t3502 + t3453 * t3508;
t3808 = t3454 * t3888;
t3249 = t3451 * t3496 + t3808;
t3472 = legFrame(1,3);
t3419 = sin(t3472);
t3431 = cos(t3472);
t3478 = legFrame(1,1);
t3437 = cos(t3478);
t3762 = t3437 * t3464;
t3763 = t3437 * t3460;
t3484 = legFrame(1,2);
t3449 = cos(t3484);
t3425 = sin(t3478);
t3443 = sin(t3484);
t3782 = t3425 * t3443;
t3673 = t3455 * t3508;
t3679 = t3455 * t3502;
t3700 = t3452 * t3508;
t3706 = t3452 * t3502;
t3194 = (t3451 * t3700 + t3679) * t3453 + t3450 * (-t3451 * t3706 + t3673);
t3687 = t3454 * t3496;
t3894 = t3452 * t3687 - t3194;
t3919 = t3249 * t3782 + t3449 * t3894;
t3931 = t3431 * (t3249 * t3763 + t3464 * t3919) + t3419 * (t3249 * t3762 - t3460 * t3919);
t3385 = t3450 * t3503 + t3453 * t3497;
t3486 = xDP(5);
t3555 = -t3451 * t3889 + t3692;
t3485 = xDP(6);
t3694 = t3454 * t3485;
t3156 = t3385 * t3694 - t3486 * t3555;
t3918 = t3156 * t3452;
t3917 = t3156 * t3455;
t3386 = t3450 * t3504 + t3453 * t3498;
t3554 = -t3451 * t3890 + t3691;
t3157 = t3386 * t3694 - t3486 * t3554;
t3916 = t3157 * t3452;
t3915 = t3157 * t3455;
t3387 = t3450 * t3505 + t3453 * t3499;
t3553 = -t3451 * t3891 + t3690;
t3158 = t3387 * t3694 - t3486 * t3553;
t3914 = t3158 * t3452;
t3913 = t3158 * t3455;
t3388 = t3450 * t3506 + t3453 * t3500;
t3552 = -t3451 * t3892 + t3689;
t3159 = t3388 * t3694 - t3486 * t3552;
t3912 = t3159 * t3452;
t3911 = t3159 * t3455;
t3389 = t3450 * t3507 + t3453 * t3501;
t3551 = -t3451 * t3893 + t3688;
t3160 = t3389 * t3694 - t3486 * t3551;
t3910 = t3160 * t3452;
t3909 = t3160 * t3455;
t3390 = t3450 * t3508 + t3453 * t3502;
t3550 = -t3451 * t3888 + t3687;
t3161 = t3390 * t3694 - t3486 * t3550;
t3908 = t3161 * t3452;
t3907 = t3161 * t3455;
t3326 = t3452 * t3385;
t3906 = t3555 * t3455 + t3326;
t3327 = t3452 * t3386;
t3905 = t3554 * t3455 + t3327;
t3328 = t3452 * t3387;
t3904 = t3553 * t3455 + t3328;
t3329 = t3452 * t3388;
t3903 = t3552 * t3455 + t3329;
t3330 = t3452 * t3389;
t3902 = t3551 * t3455 + t3330;
t3331 = t3452 * t3390;
t3901 = t3550 * t3455 + t3331;
t3332 = t3455 * t3385;
t3137 = -t3555 * t3452 + t3332;
t3333 = t3455 * t3386;
t3138 = -t3554 * t3452 + t3333;
t3334 = t3455 * t3387;
t3139 = -t3553 * t3452 + t3334;
t3713 = t3452 * t3486;
t3487 = xDP(4);
t3855 = t3901 * t3487;
t3002 = -(t3331 * t3451 - t3455 * t3888) * t3485 + t3249 * t3713 - t3855;
t3856 = t3902 * t3487;
t3000 = -(t3330 * t3451 - t3455 * t3893) * t3485 + t3248 * t3713 - t3856;
t3857 = t3903 * t3487;
t2998 = -(t3329 * t3451 - t3455 * t3892) * t3485 + t3247 * t3713 - t3857;
t3686 = t3455 * t3486;
t3861 = t3139 * t3487;
t2997 = -(t3334 * t3451 + t3452 * t3891) * t3485 + t3246 * t3686 - t3861;
t3864 = t3904 * t3487;
t2996 = -(t3328 * t3451 - t3455 * t3891) * t3485 + t3246 * t3713 - t3864;
t3862 = t3138 * t3487;
t2995 = -(t3333 * t3451 + t3452 * t3890) * t3485 + t3245 * t3686 - t3862;
t3865 = t3905 * t3487;
t2994 = -(t3327 * t3451 - t3455 * t3890) * t3485 + t3245 * t3713 - t3865;
t3863 = t3137 * t3487;
t2993 = -(t3332 * t3451 + t3452 * t3889) * t3485 + t3244 * t3686 - t3863;
t3866 = t3906 * t3487;
t2992 = -(t3326 * t3451 - t3455 * t3889) * t3485 + t3244 * t3713 - t3866;
t3373 = t3414 * t3464 + t3426 * t3460;
t3528 = t3444 * t3373;
t3374 = t3415 * t3464 + t3427 * t3460;
t3526 = t3445 * t3374;
t3375 = t3416 * t3464 + t3428 * t3460;
t3524 = t3446 * t3375;
t3376 = t3417 * t3464 + t3429 * t3460;
t3522 = t3447 * t3376;
t3377 = t3418 * t3464 + t3430 * t3460;
t3520 = t3448 * t3377;
t3378 = t3419 * t3464 + t3431 * t3460;
t3518 = t3449 * t3378;
t3698 = t3453 * t3455;
t3731 = t3450 * t3452;
t3298 = -t3451 * t3698 + t3731;
t3665 = t3486 * t3487;
t3693 = t3454 * t3487;
t3697 = t3453 * t3486;
t3323 = t3450 * t3693 - t3697;
t3391 = t3451 * t3487 + t3485;
t3841 = t3323 * t3391;
t3900 = t3454 * (t3298 * t3665 + t3455 * t3841);
t3722 = t3451 * t3455;
t3881 = t3390 * t3455 - t3452 * t3550;
t3858 = t3881 * t3487;
t3003 = -(t3390 * t3722 + t3452 * t3888) * t3485 + t3249 * t3686 - t3858;
t3880 = t3389 * t3455 - t3452 * t3551;
t3859 = t3880 * t3487;
t3001 = -(t3389 * t3722 + t3452 * t3893) * t3485 + t3248 * t3686 - t3859;
t3879 = t3388 * t3455 - t3452 * t3552;
t3860 = t3879 * t3487;
t2999 = -(t3388 * t3722 + t3452 * t3892) * t3485 + t3247 * t3686 - t3860;
t3759 = t3438 * t3464;
t3760 = t3438 * t3460;
t3887 = t3432 * ((-t3137 * t3760 + t3464 * t3906) * t3414 + (t3137 * t3759 + t3460 * t3906) * t3426) + ((-t3137 * t3460 + t3759 * t3906) * t3426 - (t3137 * t3464 + t3760 * t3906) * t3414) * t3420;
t3756 = t3439 * t3464;
t3757 = t3439 * t3460;
t3886 = t3433 * ((-t3138 * t3757 + t3464 * t3905) * t3415 + (t3138 * t3756 + t3460 * t3905) * t3427) + ((-t3138 * t3460 + t3756 * t3905) * t3427 - t3415 * (t3138 * t3464 + t3757 * t3905)) * t3421;
t3753 = t3440 * t3464;
t3754 = t3440 * t3460;
t3885 = t3434 * ((-t3139 * t3754 + t3464 * t3904) * t3416 + (t3139 * t3753 + t3460 * t3904) * t3428) + ((-t3139 * t3460 + t3753 * t3904) * t3428 - t3416 * (t3139 * t3464 + t3754 * t3904)) * t3422;
t3750 = t3441 * t3464;
t3751 = t3441 * t3460;
t3884 = t3435 * ((t3464 * t3903 - t3751 * t3879) * t3417 + (t3460 * t3903 + t3750 * t3879) * t3429) + ((-t3460 * t3879 + t3750 * t3903) * t3429 - t3417 * (t3464 * t3879 + t3751 * t3903)) * t3423;
t3747 = t3442 * t3464;
t3748 = t3442 * t3460;
t3883 = t3436 * ((t3464 * t3902 - t3748 * t3880) * t3418 + (t3460 * t3902 + t3747 * t3880) * t3430) + ((-t3460 * t3880 + t3747 * t3902) * t3430 - t3418 * (t3464 * t3880 + t3748 * t3902)) * t3424;
t3744 = t3443 * t3464;
t3745 = t3443 * t3460;
t3882 = t3437 * ((t3464 * t3901 - t3745 * t3881) * t3419 + (t3460 * t3901 + t3744 * t3881) * t3431) + ((-t3460 * t3881 + t3744 * t3901) * t3431 - (t3464 * t3881 + t3745 * t3901) * t3419) * t3425;
t3227 = t3323 ^ 2;
t3729 = t3450 * t3486;
t3325 = t3453 * t3693 + t3729;
t3228 = t3325 ^ 2;
t3294 = t3391 ^ 2;
t3367 = t3414 * t3460 - t3464 * t3426;
t3461 = sin(pkin(5));
t3459 = sin(pkin(9));
t3463 = cos(pkin(9));
t3466 = cos(pkin(4));
t3667 = t3463 * t3466;
t3365 = t3459 * t3464 + t3460 * t3667;
t3366 = t3459 * t3460 - t3464 * t3667;
t3566 = t3365 * t3414 + t3366 * t3426;
t3462 = sin(pkin(4));
t3465 = cos(pkin(5));
t3668 = t3462 * t3465;
t3080 = t3367 * t3668 + t3461 * t3566;
t3872 = t3080 * t3444;
t3368 = t3415 * t3460 - t3464 * t3427;
t3564 = t3365 * t3415 + t3366 * t3427;
t3081 = t3368 * t3668 + t3461 * t3564;
t3871 = t3081 * t3445;
t3369 = t3416 * t3460 - t3464 * t3428;
t3562 = t3365 * t3416 + t3366 * t3428;
t3082 = t3369 * t3668 + t3461 * t3562;
t3870 = t3082 * t3446;
t3370 = t3417 * t3460 - t3464 * t3429;
t3560 = t3365 * t3417 + t3366 * t3429;
t3083 = t3370 * t3668 + t3461 * t3560;
t3869 = t3083 * t3447;
t3371 = t3418 * t3460 - t3464 * t3430;
t3558 = t3365 * t3418 + t3366 * t3430;
t3084 = t3371 * t3668 + t3461 * t3558;
t3868 = t3084 * t3448;
t3372 = t3419 * t3460 - t3464 * t3431;
t3556 = t3365 * t3419 + t3366 * t3431;
t3085 = t3372 * t3668 + t3461 * t3556;
t3867 = t3085 * t3449;
t3666 = t3485 * t3486;
t3230 = (t3451 * t3729 - t3453 * t3694) * t3487 - t3450 * t3666;
t3854 = t3230 * t3451;
t3231 = (-t3450 * t3694 - t3451 * t3697) * t3487 + t3453 * t3666;
t3853 = t3231 * t3450;
t3295 = -t3451 * t3731 + t3698;
t3843 = t3295 * t3323;
t3842 = t3323 * t3325;
t3840 = t3323 * t3450;
t3839 = t3325 * t3391;
t3838 = t3325 * t3453;
t3837 = t3365 * t3438;
t3836 = t3365 * t3439;
t3835 = t3365 * t3440;
t3834 = t3365 * t3441;
t3833 = t3365 * t3442;
t3832 = t3365 * t3443;
t3831 = t3366 * t3438;
t3830 = t3366 * t3439;
t3829 = t3366 * t3440;
t3828 = t3366 * t3441;
t3827 = t3366 * t3442;
t3826 = t3366 * t3443;
t3825 = t3367 * t3444;
t3824 = t3367 * t3466;
t3823 = t3368 * t3445;
t3822 = t3368 * t3466;
t3821 = t3369 * t3446;
t3820 = t3369 * t3466;
t3819 = t3370 * t3447;
t3818 = t3370 * t3466;
t3817 = t3371 * t3448;
t3816 = t3371 * t3466;
t3815 = t3372 * t3449;
t3814 = t3372 * t3466;
t3804 = t3391 * t3451;
t3796 = t3420 * t3460;
t3795 = t3420 * t3464;
t3793 = t3421 * t3460;
t3792 = t3421 * t3464;
t3790 = t3422 * t3460;
t3789 = t3422 * t3464;
t3787 = t3423 * t3460;
t3786 = t3423 * t3464;
t3784 = t3424 * t3460;
t3783 = t3424 * t3464;
t3781 = t3425 * t3460;
t3780 = t3425 * t3464;
t3779 = t3432 * t3438;
t3776 = t3433 * t3439;
t3773 = t3434 * t3440;
t3770 = t3435 * t3441;
t3767 = t3436 * t3442;
t3764 = t3437 * t3443;
t3761 = t3438 * t3459;
t3758 = t3439 * t3459;
t3755 = t3440 * t3459;
t3752 = t3441 * t3459;
t3749 = t3442 * t3459;
t3746 = t3443 * t3459;
t3743 = t3444 * t3459;
t3742 = t3444 * t3462;
t3741 = t3445 * t3459;
t3740 = t3445 * t3462;
t3739 = t3446 * t3459;
t3738 = t3446 * t3462;
t3737 = t3447 * t3459;
t3736 = t3447 * t3462;
t3735 = t3448 * t3459;
t3734 = t3448 * t3462;
t3733 = t3449 * t3459;
t3732 = t3449 * t3462;
t3730 = t3450 * t3454;
t3715 = t3452 * t3453;
t3714 = t3452 * t3454;
t3712 = t3452 * t3487;
t3699 = t3453 * t3454;
t3695 = t3454 * t3455;
t3685 = t3455 * t3487;
t3456 = 0.1e1 / t3459;
t3457 = 0.1e1 / t3461;
t3672 = t3456 * t3457;
t3458 = 0.1e1 / t3462;
t3671 = t3456 * t3458;
t3670 = t3459 * t3462;
t3669 = t3459 * t3466;
t3296 = t3450 * t3455 + t3451 * t3715;
t3659 = t3296 * t3230 - t3295 * t3841;
t3297 = t3450 * t3722 + t3715;
t3658 = t3298 * t3230 - t3297 * t3841;
t3657 = t3231 * t3695 - t3298 * t3842;
t3652 = t3454 * t3842;
t3656 = t3451 * t3231 - t3453 * t3652;
t3624 = t3454 * t3665;
t3651 = t3325 * t3695;
t3655 = t3297 * t3624 + t3391 * t3651;
t3654 = t3230 * t3714;
t3653 = t3296 * t3665;
t3650 = t3391 * t3714;
t3649 = t3454 ^ 2 * t3665;
t3647 = t3438 * t3667;
t3645 = t3439 * t3667;
t3643 = t3440 * t3667;
t3641 = t3441 * t3667;
t3639 = t3442 * t3667;
t3637 = t3443 * t3667;
t3636 = t3444 * t3667;
t3635 = t3445 * t3667;
t3634 = t3446 * t3667;
t3633 = t3447 * t3667;
t3632 = t3448 * t3667;
t3631 = t3449 * t3667;
t3623 = t3457 * t3671;
t3616 = t3461 * t3462 * t3463;
t3274 = -t3451 * t3686 - t3452 * t3693;
t2929 = t2993 * t3487 + (t3244 * t3685 - t3918) * t3486 + (t2993 * t3451 + t3244 * t3274 + (-t3486 * t3906 - t3917) * t3454) * t3485;
t3275 = t3451 * t3713 - t3454 * t3685;
t2930 = t2992 * t3487 + (t3244 * t3712 + t3917) * t3486 + (t2992 * t3451 - t3244 * t3275 + (t3137 * t3486 - t3918) * t3454) * t3485;
t3567 = t3365 * t3426 - t3366 * t3414;
t3591 = t3367 * t3779 + t3420 * t3373;
t2953 = (-t3420 * t3567 - t3566 * t3779) * t3461 - t3591 * t3668;
t3535 = t3367 * t3797 - t3373 * t3432;
t2959 = (-t3432 * t3567 + t3566 * t3797) * t3461 + t3535 * t3668;
t2863 = (-t3137 * t3274 + t3275 * t3906) * t3485 + ((-t2993 - t3863) * t3455 + (-t2992 - t3866) * t3452) * t3486 + (-t2992 * t3455 + t2993 * t3452) * t3694;
t3609 = t2863 * t3444 * t3672;
t3615 = t3080 * t3458 * t3609 + (t2929 * t2959 + t2930 * t2953) * t3623;
t2931 = t2995 * t3487 + (t3245 * t3685 - t3916) * t3486 + (t2995 * t3451 + t3245 * t3274 + (-t3486 * t3905 - t3915) * t3454) * t3485;
t2932 = t2994 * t3487 + (t3245 * t3712 + t3915) * t3486 + (t2994 * t3451 - t3245 * t3275 + (t3138 * t3486 - t3916) * t3454) * t3485;
t3565 = t3365 * t3427 - t3366 * t3415;
t3590 = t3368 * t3776 + t3421 * t3374;
t2954 = (-t3421 * t3565 - t3564 * t3776) * t3461 - t3590 * t3668;
t3534 = t3368 * t3794 - t3374 * t3433;
t2960 = (-t3433 * t3565 + t3564 * t3794) * t3461 + t3534 * t3668;
t2864 = (-t3138 * t3274 + t3275 * t3905) * t3485 + ((-t2995 - t3862) * t3455 + (-t2994 - t3865) * t3452) * t3486 + (-t2994 * t3455 + t2995 * t3452) * t3694;
t3608 = t2864 * t3445 * t3672;
t3614 = t3081 * t3458 * t3608 + (t2931 * t2960 + t2932 * t2954) * t3623;
t2933 = t2997 * t3487 + (t3246 * t3685 - t3914) * t3486 + (t2997 * t3451 + t3246 * t3274 + (-t3486 * t3904 - t3913) * t3454) * t3485;
t2934 = t2996 * t3487 + (t3246 * t3712 + t3913) * t3486 + (t2996 * t3451 - t3246 * t3275 + (t3139 * t3486 - t3914) * t3454) * t3485;
t3563 = t3365 * t3428 - t3366 * t3416;
t3589 = t3369 * t3773 + t3422 * t3375;
t2955 = (-t3422 * t3563 - t3562 * t3773) * t3461 - t3589 * t3668;
t3533 = t3369 * t3791 - t3375 * t3434;
t2961 = (-t3434 * t3563 + t3562 * t3791) * t3461 + t3533 * t3668;
t2865 = (-t3139 * t3274 + t3275 * t3904) * t3485 + ((-t2997 - t3861) * t3455 + (-t2996 - t3864) * t3452) * t3486 + (-t2996 * t3455 + t2997 * t3452) * t3694;
t3607 = t2865 * t3446 * t3672;
t3613 = t3082 * t3458 * t3607 + (t2933 * t2961 + t2934 * t2955) * t3623;
t2935 = t2999 * t3487 + (t3247 * t3685 - t3912) * t3486 + (t2999 * t3451 + t3247 * t3274 + (-t3486 * t3903 - t3911) * t3454) * t3485;
t2936 = t2998 * t3487 + (t3247 * t3712 + t3911) * t3486 + (t2998 * t3451 - t3247 * t3275 + (t3486 * t3879 - t3912) * t3454) * t3485;
t3561 = t3365 * t3429 - t3366 * t3417;
t3588 = t3370 * t3770 + t3423 * t3376;
t2956 = (-t3423 * t3561 - t3560 * t3770) * t3461 - t3588 * t3668;
t3532 = t3370 * t3788 - t3376 * t3435;
t2962 = (-t3435 * t3561 + t3560 * t3788) * t3461 + t3532 * t3668;
t2866 = (-t3274 * t3879 + t3275 * t3903) * t3485 + ((-t2999 - t3860) * t3455 + (-t2998 - t3857) * t3452) * t3486 + (-t2998 * t3455 + t2999 * t3452) * t3694;
t3606 = t2866 * t3447 * t3672;
t3612 = t3083 * t3458 * t3606 + (t2935 * t2962 + t2936 * t2956) * t3623;
t2937 = t3001 * t3487 + (t3248 * t3685 - t3910) * t3486 + (t3001 * t3451 + t3248 * t3274 + (-t3486 * t3902 - t3909) * t3454) * t3485;
t2938 = t3000 * t3487 + (t3248 * t3712 + t3909) * t3486 + (t3000 * t3451 - t3248 * t3275 + (t3486 * t3880 - t3910) * t3454) * t3485;
t3559 = t3365 * t3430 - t3366 * t3418;
t3587 = t3371 * t3767 + t3424 * t3377;
t2957 = (-t3424 * t3559 - t3558 * t3767) * t3461 - t3587 * t3668;
t3531 = t3371 * t3785 - t3377 * t3436;
t2963 = (-t3436 * t3559 + t3558 * t3785) * t3461 + t3531 * t3668;
t2867 = (-t3274 * t3880 + t3275 * t3902) * t3485 + ((-t3001 - t3859) * t3455 + (-t3000 - t3856) * t3452) * t3486 + (-t3000 * t3455 + t3001 * t3452) * t3694;
t3605 = t2867 * t3448 * t3672;
t3611 = t3084 * t3458 * t3605 + (t2937 * t2963 + t2938 * t2957) * t3623;
t2939 = t3003 * t3487 + (t3249 * t3685 - t3908) * t3486 + (t3003 * t3451 + t3249 * t3274 + (-t3486 * t3901 - t3907) * t3454) * t3485;
t2940 = t3002 * t3487 + (t3249 * t3712 + t3907) * t3486 + (t3002 * t3451 - t3249 * t3275 + (t3486 * t3881 - t3908) * t3454) * t3485;
t3557 = t3365 * t3431 - t3366 * t3419;
t3586 = t3372 * t3764 + t3425 * t3378;
t2958 = (-t3425 * t3557 - t3556 * t3764) * t3461 - t3586 * t3668;
t3530 = t3372 * t3782 - t3378 * t3437;
t2964 = (-t3437 * t3557 + t3556 * t3782) * t3461 + t3530 * t3668;
t2868 = (-t3274 * t3881 + t3275 * t3901) * t3485 + ((-t3003 - t3858) * t3455 + (-t3002 - t3855) * t3452) * t3486 + (-t3002 * t3455 + t3003 * t3452) * t3694;
t3604 = t2868 * t3449 * t3672;
t3610 = t3085 * t3458 * t3604 + (t2939 * t2964 + t2940 * t2958) * t3623;
t3221 = t3373 * t3438 * t3466 + t3742;
t3007 = (t3221 * t3432 - t3420 * t3824) * t3459 + t3463 * t3591;
t3008 = (-t3221 * t3420 - t3432 * t3824) * t3459 - t3535 * t3463;
t3086 = (-t3367 * t3463 - t3373 * t3669) * t3444 + t3438 * t3670;
t2815 = (t2863 * t3086 + t2929 * t3008 + t2930 * t3007) * t3671;
t3222 = t3374 * t3439 * t3466 + t3740;
t3009 = (t3222 * t3433 - t3421 * t3822) * t3459 + t3463 * t3590;
t3010 = (-t3222 * t3421 - t3433 * t3822) * t3459 - t3534 * t3463;
t3087 = (-t3368 * t3463 - t3374 * t3669) * t3445 + t3439 * t3670;
t2816 = (t2864 * t3087 + t2931 * t3010 + t2932 * t3009) * t3671;
t3223 = t3375 * t3440 * t3466 + t3738;
t3011 = (t3223 * t3434 - t3422 * t3820) * t3459 + t3463 * t3589;
t3012 = (-t3223 * t3422 - t3434 * t3820) * t3459 - t3533 * t3463;
t3088 = (-t3369 * t3463 - t3375 * t3669) * t3446 + t3440 * t3670;
t2817 = (t2865 * t3088 + t2933 * t3012 + t2934 * t3011) * t3671;
t3224 = t3376 * t3441 * t3466 + t3736;
t3013 = (t3224 * t3435 - t3423 * t3818) * t3459 + t3463 * t3588;
t3014 = (-t3224 * t3423 - t3435 * t3818) * t3459 - t3532 * t3463;
t3089 = (-t3370 * t3463 - t3376 * t3669) * t3447 + t3441 * t3670;
t2818 = (t2866 * t3089 + t2935 * t3014 + t2936 * t3013) * t3671;
t3225 = t3377 * t3442 * t3466 + t3734;
t3015 = (t3225 * t3436 - t3424 * t3816) * t3459 + t3463 * t3587;
t3016 = (-t3225 * t3424 - t3436 * t3816) * t3459 - t3531 * t3463;
t3090 = (-t3371 * t3463 - t3377 * t3669) * t3448 + t3442 * t3670;
t2819 = (t2867 * t3090 + t2937 * t3016 + t2938 * t3015) * t3671;
t3226 = t3378 * t3443 * t3466 + t3732;
t3017 = (t3226 * t3437 - t3425 * t3814) * t3459 + t3463 * t3586;
t3018 = (-t3226 * t3425 - t3437 * t3814) * t3459 - t3530 * t3463;
t3091 = (-t3372 * t3463 - t3378 * t3669) * t3449 + t3443 * t3670;
t2820 = (t2868 * t3091 + t2939 * t3018 + t2940 * t3017) * t3671;
t2827 = -t3367 * t3609 + (-t2929 * t3535 + t2930 * t3591) * t3672;
t2828 = -t3368 * t3608 + (-t2931 * t3534 + t2932 * t3590) * t3672;
t2829 = -t3369 * t3607 + (-t2933 * t3533 + t2934 * t3589) * t3672;
t2830 = -t3370 * t3606 + (-t2935 * t3532 + t2936 * t3588) * t3672;
t2831 = -t3371 * t3605 + (-t2937 * t3531 + t2938 * t3587) * t3672;
t2832 = -t3372 * t3604 + (-t2939 * t3530 + t2940 * t3586) * t3672;
t3603 = t3465 * t2827 + t3615;
t3602 = t3465 * t2828 + t3614;
t3601 = t3465 * t2829 + t3613;
t3600 = t3465 * t2830 + t3612;
t3599 = t3465 * t2831 + t3611;
t3598 = t3465 * t2832 + t3610;
t3195 = -(t3451 * t3684 + t3705) * t3450 + (t3451 * t3678 - t3711) * t3453;
t3105 = t3455 * t3692 - t3195;
t3196 = -(t3451 * t3683 + t3704) * t3450 + (t3451 * t3677 - t3710) * t3453;
t3106 = t3455 * t3691 - t3196;
t3197 = -(t3451 * t3682 + t3703) * t3450 + (t3451 * t3676 - t3709) * t3453;
t3107 = t3455 * t3690 - t3197;
t3198 = -(t3451 * t3681 + t3702) * t3450 + (t3451 * t3675 - t3708) * t3453;
t3108 = t3455 * t3689 - t3198;
t3199 = -(t3451 * t3680 + t3701) * t3450 + (t3451 * t3674 - t3707) * t3453;
t3109 = t3455 * t3688 - t3199;
t3200 = -(t3451 * t3679 + t3700) * t3450 + (t3451 * t3673 - t3706) * t3453;
t3110 = t3455 * t3687 - t3200;
t3299 = -t3420 * t3760 + t3777;
t3311 = t3420 * t3759 + t3778;
t3579 = t3299 * t3426 - t3311 * t3414;
t3300 = t3432 * t3760 + t3795;
t3312 = t3432 * t3759 - t3796;
t3578 = t3300 * t3426 + t3312 * t3414;
t3301 = -t3421 * t3757 + t3774;
t3313 = t3421 * t3756 + t3775;
t3577 = t3301 * t3427 - t3313 * t3415;
t3302 = t3433 * t3757 + t3792;
t3314 = t3433 * t3756 - t3793;
t3576 = t3302 * t3427 + t3314 * t3415;
t3303 = -t3422 * t3754 + t3771;
t3315 = t3422 * t3753 + t3772;
t3575 = t3303 * t3428 - t3315 * t3416;
t3304 = t3434 * t3754 + t3789;
t3316 = t3434 * t3753 - t3790;
t3574 = t3304 * t3428 + t3316 * t3416;
t3305 = -t3423 * t3751 + t3768;
t3317 = t3423 * t3750 + t3769;
t3573 = t3305 * t3429 - t3317 * t3417;
t3306 = t3435 * t3751 + t3786;
t3318 = t3435 * t3750 - t3787;
t3572 = t3306 * t3429 + t3318 * t3417;
t3307 = -t3424 * t3748 + t3765;
t3319 = t3424 * t3747 + t3766;
t3571 = t3307 * t3430 - t3319 * t3418;
t3308 = t3436 * t3748 + t3783;
t3320 = t3436 * t3747 - t3784;
t3570 = t3308 * t3430 + t3320 * t3418;
t3309 = -t3425 * t3745 + t3762;
t3321 = t3425 * t3744 + t3763;
t3569 = t3309 * t3431 - t3321 * t3419;
t3310 = t3437 * t3745 + t3780;
t3322 = t3437 * t3744 - t3781;
t3568 = t3310 * t3431 + t3322 * t3419;
t3537 = -t3231 * t3295 + t3296 * t3839;
t3536 = -t3231 * t3297 + t3298 * t3839;
t3529 = t3444 * t3244;
t3527 = t3445 * t3245;
t3525 = t3446 * t3246;
t3523 = t3447 * t3247;
t3521 = t3448 * t3248;
t3519 = t3449 * t3249;
t3517 = -t3230 * t3695 - t3297 * t3842;
t3515 = t3454 * t3528;
t3514 = t3454 * t3526;
t3513 = t3454 * t3524;
t3512 = t3454 * t3522;
t3511 = t3454 * t3520;
t3510 = t3454 * t3518;
t3509 = -t3323 * t3804 - t3453 * t3649;
t3233 = t3295 * t3624;
t3232 = t3325 * t3804;
t3207 = -t3294 + t3227;
t3187 = t3230 * t3699;
t3149 = -t3228 + t3294;
t3134 = t3390 * t3744 + t3460 * t3550;
t3133 = t3389 * t3747 + t3460 * t3551;
t3132 = t3388 * t3750 + t3460 * t3552;
t3131 = t3387 * t3753 + t3460 * t3553;
t3130 = t3386 * t3756 + t3460 * t3554;
t3129 = t3385 * t3759 + t3460 * t3555;
t3128 = -t3390 * t3460 + t3550 * t3744;
t3127 = -t3389 * t3460 + t3551 * t3747;
t3126 = -t3388 * t3460 + t3552 * t3750;
t3125 = -t3387 * t3460 + t3553 * t3753;
t3124 = -t3386 * t3460 + t3554 * t3756;
t3123 = -t3385 * t3460 + t3555 * t3759;
t3122 = -t3390 * t3745 + t3464 * t3550;
t3121 = -t3389 * t3748 + t3464 * t3551;
t3120 = -t3388 * t3751 + t3464 * t3552;
t3119 = -t3387 * t3754 + t3464 * t3553;
t3118 = -t3386 * t3757 + t3464 * t3554;
t3117 = -t3385 * t3760 + t3464 * t3555;
t3116 = t3390 * t3464 + t3550 * t3745;
t3115 = t3389 * t3464 + t3551 * t3748;
t3114 = t3388 * t3464 + t3552 * t3751;
t3113 = t3387 * t3464 + t3553 * t3754;
t3112 = t3386 * t3464 + t3554 * t3757;
t3111 = t3385 * t3464 + t3555 * t3760;
t3096 = -t3227 + t3228;
t3094 = t3296 * t3842;
t3093 = -t3294 - t3228;
t3092 = -t3294 - t3227;
t3079 = -t3227 - t3228;
t3078 = t3110 * t3449 + t3249 * t3764;
t3077 = t3109 * t3448 + t3248 * t3767;
t3076 = t3108 * t3447 + t3247 * t3770;
t3075 = t3107 * t3446 + t3246 * t3773;
t3074 = t3106 * t3445 + t3245 * t3776;
t3073 = t3105 * t3444 + t3244 * t3779;
t3066 = t3110 * t3733 + t3249 * (t3425 * t3667 + t3437 * t3746);
t3065 = t3109 * t3735 + t3248 * (t3424 * t3667 + t3436 * t3749);
t3064 = t3108 * t3737 + t3247 * (t3423 * t3667 + t3435 * t3752);
t3063 = t3107 * t3739 + t3246 * (t3422 * t3667 + t3434 * t3755);
t3062 = t3106 * t3741 + t3245 * (t3421 * t3667 + t3433 * t3758);
t3061 = t3105 * t3743 + t3244 * (t3420 * t3667 + t3432 * t3761);
t3060 = -t3894 * t3733 + t3249 * (-t3425 * t3746 + t3437 * t3667);
t3059 = -t3899 * t3735 + t3248 * (-t3424 * t3749 + t3436 * t3667);
t3058 = -t3898 * t3737 + t3247 * (-t3423 * t3752 + t3435 * t3667);
t3057 = -t3897 * t3739 + t3246 * (-t3422 * t3755 + t3434 * t3667);
t3056 = -t3896 * t3741 + t3245 * (-t3421 * t3758 + t3433 * t3667);
t3055 = -t3895 * t3743 + t3244 * (-t3420 * t3761 + t3432 * t3667);
t3042 = t3110 * t3631 + t3249 * (-t3425 * t3459 + t3437 * t3637);
t3041 = t3109 * t3632 + t3248 * (-t3424 * t3459 + t3436 * t3639);
t3040 = t3108 * t3633 + t3247 * (-t3423 * t3459 + t3435 * t3641);
t3039 = t3107 * t3634 + t3246 * (-t3422 * t3459 + t3434 * t3643);
t3038 = t3106 * t3635 + t3245 * (-t3421 * t3459 + t3433 * t3645);
t3037 = t3105 * t3636 + t3244 * (-t3420 * t3459 + t3432 * t3647);
t3036 = -t3894 * t3631 - t3249 * (t3425 * t3637 + t3437 * t3459);
t3035 = -t3899 * t3632 - t3248 * (t3424 * t3639 + t3436 * t3459);
t3034 = -t3898 * t3633 - t3247 * (t3423 * t3641 + t3435 * t3459);
t3033 = -t3897 * t3634 - t3246 * (t3422 * t3643 + t3434 * t3459);
t3032 = -t3896 * t3635 - t3245 * (t3421 * t3645 + t3433 * t3459);
t3031 = -t3895 * t3636 - t3244 * (t3420 * t3647 + t3432 * t3459);
t3030 = t3122 * t3419 + t3134 * t3431;
t3029 = t3121 * t3418 + t3133 * t3430;
t3028 = t3120 * t3417 + t3132 * t3429;
t3027 = t3119 * t3416 + t3131 * t3428;
t3026 = t3118 * t3415 + t3130 * t3427;
t3025 = t3117 * t3414 + t3129 * t3426;
t3024 = -t3116 * t3419 + t3128 * t3431;
t3023 = -t3115 * t3418 + t3127 * t3430;
t3022 = -t3114 * t3417 + t3126 * t3429;
t3021 = -t3113 * t3416 + t3125 * t3428;
t3020 = -t3112 * t3415 + t3124 * t3427;
t3019 = -t3111 * t3414 + t3123 * t3426;
t2976 = -t3390 * t3732 + (t3122 * t3431 - t3134 * t3419) * t3466;
t2975 = -t3389 * t3734 + (t3121 * t3430 - t3133 * t3418) * t3466;
t2974 = -t3388 * t3736 + (t3120 * t3429 - t3132 * t3417) * t3466;
t2973 = -t3387 * t3738 + (t3119 * t3428 - t3131 * t3416) * t3466;
t2972 = -t3386 * t3740 + (t3118 * t3427 - t3130 * t3415) * t3466;
t2971 = -t3385 * t3742 + (t3117 * t3426 - t3129 * t3414) * t3466;
t2970 = t3550 * t3732 + (t3116 * t3431 + t3128 * t3419) * t3466;
t2969 = t3551 * t3734 + (t3115 * t3430 + t3127 * t3418) * t3466;
t2968 = t3552 * t3736 + (t3114 * t3429 + t3126 * t3417) * t3466;
t2967 = t3553 * t3738 + (t3113 * t3428 + t3125 * t3416) * t3466;
t2966 = t3554 * t3740 + (t3112 * t3427 + t3124 * t3415) * t3466;
t2965 = t3555 * t3742 + (t3111 * t3426 + t3123 * t3414) * t3466;
t2946 = (t3078 * t3464 - t3249 * t3781) * t3431 - t3419 * (t3078 * t3460 + t3249 * t3780);
t2945 = (t3077 * t3464 - t3248 * t3784) * t3430 - t3418 * (t3077 * t3460 + t3248 * t3783);
t2944 = (t3076 * t3464 - t3247 * t3787) * t3429 - t3417 * (t3076 * t3460 + t3247 * t3786);
t2943 = (t3075 * t3464 - t3246 * t3790) * t3428 - t3416 * (t3075 * t3460 + t3246 * t3789);
t2942 = (t3074 * t3464 - t3245 * t3793) * t3427 - t3415 * (t3074 * t3460 + t3245 * t3792);
t2941 = (t3073 * t3464 - t3244 * t3796) * t3426 - t3414 * (t3073 * t3460 + t3244 * t3795);
t2928 = t3463 * (-t3109 * t3817 + (-t3308 * t3418 + t3320 * t3430) * t3248) + (t3109 * t3442 - t3436 * t3521) * t3670 + (-t3570 * t3809 + t3199 * t3520 + (-t3451 * t3570 - t3455 * t3511) * t3495) * t3669;
t2927 = t3463 * (-t3108 * t3819 + (-t3306 * t3417 + t3318 * t3429) * t3247) + (t3108 * t3441 - t3435 * t3523) * t3670 + (-t3572 * t3810 + t3198 * t3522 + (-t3451 * t3572 - t3455 * t3512) * t3494) * t3669;
t2926 = t3463 * (-t3107 * t3821 + (-t3304 * t3416 + t3316 * t3428) * t3246) + (t3107 * t3440 - t3434 * t3525) * t3670 + (-t3574 * t3811 + t3197 * t3524 + (-t3451 * t3574 - t3455 * t3513) * t3493) * t3669;
t2925 = t3463 * (-t3106 * t3823 + (-t3302 * t3415 + t3314 * t3427) * t3245) + (t3106 * t3439 - t3433 * t3527) * t3670 + (-t3576 * t3812 + t3196 * t3526 + (-t3451 * t3576 - t3455 * t3514) * t3492) * t3669;
t2924 = t3463 * (-t3105 * t3825 + (-t3300 * t3414 + t3312 * t3426) * t3244) + (t3105 * t3438 - t3432 * t3529) * t3670 + (-t3578 * t3813 + t3195 * t3528 + (-t3451 * t3578 - t3455 * t3515) * t3491) * t3669;
t2923 = t3463 * (-t3110 * t3815 + (-t3310 * t3419 + t3322 * t3431) * t3249) + (t3110 * t3443 - t3437 * t3519) * t3670 + (-t3568 * t3808 + t3200 * t3518 + (-t3451 * t3568 - t3455 * t3510) * t3496) * t3669;
t2922 = -t3463 * (t3899 * t3817 - (t3307 * t3418 + t3319 * t3430) * t3248) + (-t3424 * t3521 + t3442 * t3899) * t3670 + (t3571 * t3809 + t3193 * t3520 + (t3451 * t3571 - t3452 * t3511) * t3495) * t3669;
t2921 = -t3463 * (t3898 * t3819 - (t3305 * t3417 + t3317 * t3429) * t3247) + (-t3423 * t3523 + t3441 * t3898) * t3670 + (t3573 * t3810 + t3192 * t3522 + (t3451 * t3573 - t3452 * t3512) * t3494) * t3669;
t2920 = -t3463 * (t3897 * t3821 - (t3303 * t3416 + t3315 * t3428) * t3246) + (-t3422 * t3525 + t3440 * t3897) * t3670 + (t3575 * t3811 + t3191 * t3524 + (t3451 * t3575 - t3452 * t3513) * t3493) * t3669;
t2919 = -t3463 * (t3896 * t3823 - (t3301 * t3415 + t3313 * t3427) * t3245) + (-t3421 * t3527 + t3439 * t3896) * t3670 + (t3577 * t3812 + t3190 * t3526 + (t3451 * t3577 - t3452 * t3514) * t3492) * t3669;
t2918 = -t3463 * (t3895 * t3825 - (t3299 * t3414 + t3311 * t3426) * t3244) + (-t3420 * t3529 + t3438 * t3895) * t3670 + (t3579 * t3813 + t3189 * t3528 + (t3451 * t3579 - t3452 * t3515) * t3491) * t3669;
t2917 = -t3463 * (t3894 * t3815 - (t3309 * t3419 + t3321 * t3431) * t3249) + (-t3425 * t3519 + t3443 * t3894) * t3670 + (t3569 * t3808 + t3194 * t3518 + (t3451 * t3569 - t3452 * t3510) * t3496) * t3669;
t2880 = ((-t3042 * t3464 + t3066 * t3460) * t3431 + (t3042 * t3460 + t3066 * t3464) * t3419) * t3461 - t2946 * t3668;
t2879 = ((-t3041 * t3464 + t3065 * t3460) * t3430 + (t3041 * t3460 + t3065 * t3464) * t3418) * t3461 - t2945 * t3668;
t2878 = ((-t3040 * t3464 + t3064 * t3460) * t3429 + (t3040 * t3460 + t3064 * t3464) * t3417) * t3461 - t2944 * t3668;
t2877 = ((-t3039 * t3464 + t3063 * t3460) * t3428 + (t3039 * t3460 + t3063 * t3464) * t3416) * t3461 - t2943 * t3668;
t2876 = ((-t3038 * t3464 + t3062 * t3460) * t3427 + (t3038 * t3460 + t3062 * t3464) * t3415) * t3461 - t2942 * t3668;
t2875 = ((-t3037 * t3464 + t3061 * t3460) * t3426 + (t3037 * t3460 + t3061 * t3464) * t3414) * t3461 - t2941 * t3668;
t2874 = ((t3036 * t3464 - t3060 * t3460) * t3431 - (t3036 * t3460 + t3060 * t3464) * t3419) * t3461 - t3931 * t3668;
t2873 = ((t3035 * t3464 - t3059 * t3460) * t3430 - (t3035 * t3460 + t3059 * t3464) * t3418) * t3461 - t3932 * t3668;
t2872 = ((t3034 * t3464 - t3058 * t3460) * t3429 - (t3034 * t3460 + t3058 * t3464) * t3417) * t3461 - t3933 * t3668;
t2871 = ((t3033 * t3464 - t3057 * t3460) * t3428 - (t3033 * t3460 + t3057 * t3464) * t3416) * t3461 - t3934 * t3668;
t2870 = ((t3032 * t3464 - t3056 * t3460) * t3427 - (t3032 * t3460 + t3056 * t3464) * t3415) * t3461 - t3935 * t3668;
t2869 = ((t3031 * t3464 - t3055 * t3460) * t3426 - (t3031 * t3460 + t3055 * t3464) * t3414) * t3461 - t3936 * t3668;
t2844 = (((t3365 * t3901 - t3826 * t3881) * t3431 + (-t3366 * t3901 - t3832 * t3881) * t3419) * t3437 + t3425 * ((-t3365 * t3881 - t3826 * t3901) * t3431 - (-t3366 * t3881 + t3832 * t3901) * t3419)) * t3461 + t3882 * t3668;
t2843 = (((t3365 * t3902 - t3827 * t3880) * t3430 + (-t3366 * t3902 - t3833 * t3880) * t3418) * t3436 + t3424 * ((-t3365 * t3880 - t3827 * t3902) * t3430 - (-t3366 * t3880 + t3833 * t3902) * t3418)) * t3461 + t3883 * t3668;
t2842 = (((t3365 * t3903 - t3828 * t3879) * t3429 + (-t3366 * t3903 - t3834 * t3879) * t3417) * t3435 + t3423 * ((-t3365 * t3879 - t3828 * t3903) * t3429 - (-t3366 * t3879 + t3834 * t3903) * t3417)) * t3461 + t3884 * t3668;
t2841 = (((-t3139 * t3829 + t3365 * t3904) * t3428 + (-t3139 * t3835 - t3366 * t3904) * t3416) * t3434 + t3422 * ((-t3139 * t3365 - t3829 * t3904) * t3428 - (-t3139 * t3366 + t3835 * t3904) * t3416)) * t3461 + t3885 * t3668;
t2840 = (((-t3138 * t3830 + t3365 * t3905) * t3427 + (-t3138 * t3836 - t3366 * t3905) * t3415) * t3433 + t3421 * ((-t3138 * t3365 - t3830 * t3905) * t3427 - (-t3138 * t3366 + t3836 * t3905) * t3415)) * t3461 + t3886 * t3668;
t2839 = (((-t3137 * t3831 + t3365 * t3906) * t3426 + (-t3137 * t3837 - t3366 * t3906) * t3414) * t3432 + t3420 * ((-t3137 * t3365 - t3831 * t3906) * t3426 - (-t3137 * t3366 + t3837 * t3906) * t3414)) * t3461 + t3887 * t3668;
t2838 = ((-t2970 * t3452 - t2976 * t3455) * t3437 + t3425 * (t2970 * t3455 - t2976 * t3452)) * t3459 - t3463 * ((-t3024 * t3452 + t3030 * t3455) * t3437 + (t3024 * t3455 + t3030 * t3452) * t3425);
t2837 = ((-t2969 * t3452 - t2975 * t3455) * t3436 + t3424 * (t2969 * t3455 - t2975 * t3452)) * t3459 - t3463 * ((-t3023 * t3452 + t3029 * t3455) * t3436 + (t3023 * t3455 + t3029 * t3452) * t3424);
t2836 = ((-t2968 * t3452 - t2974 * t3455) * t3435 + t3423 * (t2968 * t3455 - t2974 * t3452)) * t3459 - t3463 * ((-t3022 * t3452 + t3028 * t3455) * t3435 + (t3022 * t3455 + t3028 * t3452) * t3423);
t2835 = ((-t2967 * t3452 - t2973 * t3455) * t3434 + t3422 * (t2967 * t3455 - t2973 * t3452)) * t3459 - t3463 * ((-t3021 * t3452 + t3027 * t3455) * t3434 + (t3021 * t3455 + t3027 * t3452) * t3422);
t2834 = ((-t2966 * t3452 - t2972 * t3455) * t3433 + t3421 * (t2966 * t3455 - t2972 * t3452)) * t3459 - t3463 * ((-t3020 * t3452 + t3026 * t3455) * t3433 + (t3020 * t3455 + t3026 * t3452) * t3421);
t2833 = ((-t2965 * t3452 - t2971 * t3455) * t3432 + t3420 * (t2965 * t3455 - t2971 * t3452)) * t3459 - t3463 * ((-t3019 * t3452 + t3025 * t3455) * t3432 + (t3019 * t3455 + t3025 * t3452) * t3420);
t2814 = t3466 * t2820;
t2813 = t3466 * t2819;
t2812 = t3466 * t2818;
t2811 = t3466 * t2817;
t2810 = t3466 * t2816;
t2809 = t3466 * t2815;
t2808 = t2814 + t3610;
t2807 = t2813 + t3611;
t2806 = t2812 + t3612;
t2805 = t2811 + t3613;
t2804 = t2810 + t3614;
t2803 = t2809 + t3615;
t2802 = t3466 * t3610 + t2820;
t2801 = t3466 * t3611 + t2819;
t2800 = t3466 * t3612 + t2818;
t2799 = t3466 * t3613 + t2817;
t2798 = t3466 * t3614 + t2816;
t2797 = t3466 * t3615 + t2815;
t2796 = t2814 + t3598;
t2795 = t2813 + t3599;
t2794 = t2812 + t3600;
t2793 = t2811 + t3601;
t2792 = t2810 + t3602;
t2791 = t2809 + t3603;
t2790 = -t2832 * t3616 + t3466 * t3598 + t2820;
t2789 = -t2831 * t3616 + t3466 * t3599 + t2819;
t2788 = -t2830 * t3616 + t3466 * t3600 + t2818;
t2787 = -t2829 * t3616 + t3466 * t3601 + t2817;
t2786 = -t2828 * t3616 + t3466 * t3602 + t2816;
t2785 = -t2827 * t3616 + t3466 * t3603 + t2815;
t2784 = t2808 * t3465 - t2820 * t3616 + t2832;
t2783 = t2807 * t3465 - t2819 * t3616 + t2831;
t2782 = t2806 * t3465 - t2818 * t3616 + t2830;
t2781 = t2805 * t3465 - t2817 * t3616 + t2829;
t2780 = t2804 * t3465 - t2816 * t3616 + t2828;
t2779 = t2803 * t3465 - t2815 * t3616 + t2827;
t1 = [(t2815 * t3086 + t2816 * t3087 + t2817 * t3088 + t2818 * t3089 + t2819 * t3090 + t2820 * t3091) * t3671, (t3086 * t2797 + t3087 * t2798 + t3088 * t2799 + t3089 * t2800 + t3090 * t2801 + t3091 * t2802 + (t2803 * t3872 + t2804 * t3871 + t2805 * t3870 + t2806 * t3869 + t2807 * t3868 + t2808 * t3867) * t3457) * t3671, ((t3086 * t2785 + t3087 * t2786 + t3088 * t2787 + t3089 * t2788 + t3090 * t2789 + t3091 * t2790) * t3458 + (-t2779 * t3825 - t2780 * t3823 - t2781 * t3821 - t2782 * t3819 - t2783 * t3817 - t2784 * t3815 + (t2791 * t3872 + t2792 * t3871 + t2793 * t3870 + t2794 * t3869 + t2795 * t3868 + t2796 * t3867) * t3458) * t3457) * t3456, 0, 0, 0, 0, 0, 0, t3092 * t3699 - t3854 + t3232 + (-t3649 + t3652) * t3450, -t3093 * t3730 + t3509 + t3656, t3079 * t3451 + t3187 + (t3853 + (t3838 + t3840) * t3391) * t3454, 0; (t2815 * t3008 + t2816 * t3010 + t2817 * t3012 + t2818 * t3014 + t2819 * t3016 + t2820 * t3018) * t3671, (t2797 * t3008 + t2798 * t3010 + t2799 * t3012 + t2800 * t3014 + t2801 * t3016 + t2802 * t3018 + (t2803 * t2959 + t2804 * t2960 + t2805 * t2961 + t2806 * t2962 + t2807 * t2963 + t2808 * t2964) * t3457) * t3671, ((t2785 * t3008 + t2786 * t3010 + t2787 * t3012 + t2788 * t3014 + t2789 * t3016 + t2790 * t3018) * t3458 + (-t3535 * t2779 - t3534 * t2780 - t3533 * t2781 - t3532 * t2782 - t3531 * t2783 - t3530 * t2784 + (t2791 * t2959 + t2792 * t2960 + t2793 * t2961 + t2794 * t2962 + t2795 * t2963 + t2796 * t2964) * t3458) * t3457) * t3456, 0, 0, 0, 0, 0, 0, t3654 + t3092 * t3296 + t3233 + (-t3650 - t3843) * t3325, t3093 * t3295 - t3094 + (-t3653 + (-t3231 + t3841) * t3452) * t3454, -t3079 * t3714 + t3537 + t3659, 0; (t2815 * t3007 + t2816 * t3009 + t2817 * t3011 + t2818 * t3013 + t2819 * t3015 + t2820 * t3017) * t3671, (t2797 * t3007 + t2798 * t3009 + t2799 * t3011 + t2800 * t3013 + t2801 * t3015 + t2802 * t3017 + (t2803 * t2953 + t2804 * t2954 + t2805 * t2955 + t2806 * t2956 + t2807 * t2957 + t2808 * t2958) * t3457) * t3671, ((t2785 * t3007 + t2786 * t3009 + t2787 * t3011 + t2788 * t3013 + t2789 * t3015 + t2790 * t3017) * t3458 + (t3591 * t2779 + t3590 * t2780 + t3589 * t2781 + t3588 * t2782 + t3587 * t2783 + t3586 * t2784 + (t2791 * t2953 + t2792 * t2954 + t2793 * t2955 + t2794 * t2956 + t2795 * t2957 + t2796 * t2958) * t3458) * t3457) * t3456, 0, 0, 0, 0, 0, 0, t3092 * t3298 + t3517 + t3655, t3093 * t3297 + t3657 - t3900, t3079 * t3695 + t3536 + t3658, 0; (t2815 * t2833 + t2816 * t2834 + t2817 * t2835 + t2818 * t2836 + t2819 * t2837 + t2820 * t2838) * t3671, (t2797 * t2833 + t2798 * t2834 + t2799 * t2835 + t2800 * t2836 + t2801 * t2837 + t2802 * t2838 + (t2803 * t2839 + t2804 * t2840 + t2805 * t2841 + t2806 * t2842 + t2807 * t2843 + t2808 * t2844) * t3457) * t3671, ((t2785 * t2833 + t2786 * t2834 + t2787 * t2835 + t2788 * t2836 + t2789 * t2837 + t2790 * t2838) * t3458 + (-t3882 * t2784 - t3883 * t2783 - t3884 * t2782 - t3885 * t2781 - t3886 * t2780 - t3887 * t2779 + (t2791 * t2839 + t2792 * t2840 + t2793 * t2841 + t2794 * t2842 + t2795 * t2843 + t2796 * t2844) * t3458) * t3457) * t3456, t3231 * t3699 + (t3323 * t3451 - t3391 * t3730) * t3325, t3096 * t3451 + t3187 + (-t3853 + (-t3838 + t3840) * t3391) * t3454, -t3149 * t3730 - t3509 + t3656, -t3230 * t3730 + (-t3325 * t3451 + t3391 * t3699) * t3323, t3207 * t3699 + t3854 + t3232 + (-t3649 - t3652) * t3450, (t3451 * t3665 + (-t3323 * t3453 + t3325 * t3450) * t3391) * t3454, 0, 0, 0, 0; (t2815 * t2924 + t2816 * t2925 + t2817 * t2926 + t2818 * t2927 + t2819 * t2928 + t2820 * t2923) * t3671, (t2797 * t2924 + t2798 * t2925 + t2799 * t2926 + t2800 * t2927 + t2801 * t2928 + t2802 * t2923 + (t2803 * t2875 + t2804 * t2876 + t2805 * t2877 + t2806 * t2878 + t2807 * t2879 + t2808 * t2880) * t3457) * t3671, ((t2785 * t2924 + t2786 * t2925 + t2787 * t2926 + t2788 * t2927 + t2789 * t2928 + t2790 * t2923) * t3458 + (t2941 * t2779 + t2942 * t2780 + t2943 * t2781 + t2944 * t2782 + t2945 * t2783 + t2946 * t2784 + (t2791 * t2875 + t2792 * t2876 + t2793 * t2877 + t2794 * t2878 + t2795 * t2879 + t2796 * t2880) * t3458) * t3457) * t3456, t3231 * t3296 + (t3295 * t3391 - t3323 * t3714) * t3325, -t3096 * t3714 - t3537 + t3659, t3149 * t3295 - t3094 + (t3653 + (-t3231 - t3841) * t3452) * t3454, t3230 * t3295 + (t3296 * t3391 + t3325 * t3714) * t3323, -t3654 + t3207 * t3296 + t3233 + (-t3650 + t3843) * t3325, -t3452 * t3649 + (-t3295 * t3325 - t3296 * t3323) * t3391, 0, 0, 0, 0; (t2815 * t2918 + t2816 * t2919 + t2817 * t2920 + t2818 * t2921 + t2819 * t2922 + t2820 * t2917) * t3671, (t2797 * t2918 + t2798 * t2919 + t2799 * t2920 + t2800 * t2921 + t2801 * t2922 + t2802 * t2917 + (t2803 * t2869 + t2804 * t2870 + t2805 * t2871 + t2806 * t2872 + t2807 * t2873 + t2808 * t2874) * t3457) * t3671, ((t2785 * t2918 + t2786 * t2919 + t2787 * t2920 + t2788 * t2921 + t2789 * t2922 + t2790 * t2917) * t3458 + (t3931 * t2784 + t3932 * t2783 + t3933 * t2782 + t3934 * t2781 + t3935 * t2780 + t3936 * t2779 + (t2791 * t2869 + t2792 * t2870 + t2793 * t2871 + t2794 * t2872 + t2795 * t2873 + t2796 * t2874) * t3458) * t3457) * t3456, t3231 * t3298 + (t3297 * t3391 + t3323 * t3695) * t3325, t3096 * t3695 - t3536 + t3658, t3149 * t3297 + t3657 + t3900, t3230 * t3297 + (t3298 * t3391 - t3651) * t3323, t3207 * t3298 - t3517 + t3655, t3455 * t3649 + (-t3297 * t3325 - t3298 * t3323) * t3391, 0, 0, 0, 0;];
tau_reg  = t1;
