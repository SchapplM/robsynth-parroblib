% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P6PPPRRR1V2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d4,theta1,theta2,theta3]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P6PPPRRR1V2A0_convert_par2_MPV_fixb.m

% Output:
% taugX [6x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 19:43
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PPPRRR1V2A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_mdp: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_mdp: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_mdp: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_mdp: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_mdp: Koppelpunkt has to be [6x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 19:42:11
% EndTime: 2019-05-16 19:43:12
% DurationCPUTime: 66.05s
% Computational Cost: add. (9309->994), mult. (23592->1900), div. (504->3), fcn. (25212->50), ass. (0->589)
t9277 = xP(5);
t9242 = sin(t9277);
t9279 = koppelP(6,3);
t9245 = cos(t9277);
t9276 = xP(6);
t9241 = sin(t9276);
t9244 = cos(t9276);
t9285 = koppelP(6,2);
t9291 = koppelP(6,1);
t9350 = t9241 * t9285 - t9244 * t9291;
t9558 = t9350 * t9245;
t9052 = t9242 * t9279 - t9558;
t9258 = legFrame(6,3);
t9205 = sin(t9258);
t9217 = cos(t9258);
t9251 = sin(pkin(8));
t9255 = cos(pkin(8));
t9264 = legFrame(6,1);
t9223 = cos(t9264);
t9526 = t9223 * t9255;
t9527 = t9223 * t9251;
t9270 = legFrame(6,2);
t9235 = cos(t9270);
t9211 = sin(t9264);
t9229 = sin(t9270);
t9546 = t9211 * t9229;
t9278 = xP(4);
t9246 = cos(t9278);
t9450 = t9246 * t9291;
t9456 = t9246 * t9285;
t9243 = sin(t9278);
t9470 = t9243 * t9291;
t9476 = t9243 * t9285;
t9010 = (t9242 * t9470 + t9456) * t9244 + t9241 * (-t9242 * t9476 + t9450);
t9462 = t9245 * t9279;
t9625 = t9243 * t9462 - t9010;
t9636 = t9052 * t9546 + t9235 * t9625;
t9648 = t9217 * (t9052 * t9527 + t9255 * t9636) + t9205 * (t9052 * t9526 - t9251 * t9636);
t9280 = koppelP(5,3);
t9286 = koppelP(5,2);
t9292 = koppelP(5,1);
t9349 = t9241 * t9286 - t9244 * t9292;
t9557 = t9349 * t9245;
t9053 = t9242 * t9280 - t9557;
t9259 = legFrame(5,3);
t9206 = sin(t9259);
t9218 = cos(t9259);
t9265 = legFrame(5,1);
t9224 = cos(t9265);
t9523 = t9224 * t9255;
t9524 = t9224 * t9251;
t9271 = legFrame(5,2);
t9236 = cos(t9271);
t9212 = sin(t9265);
t9230 = sin(t9271);
t9543 = t9212 * t9230;
t9449 = t9246 * t9292;
t9455 = t9246 * t9286;
t9469 = t9243 * t9292;
t9475 = t9243 * t9286;
t9011 = (t9242 * t9469 + t9455) * t9244 + t9241 * (-t9242 * t9475 + t9449);
t9461 = t9245 * t9280;
t9626 = t9243 * t9461 - t9011;
t9635 = t9053 * t9543 + t9236 * t9626;
t9647 = t9218 * (t9053 * t9524 + t9255 * t9635) + t9206 * (t9053 * t9523 - t9251 * t9635);
t9281 = koppelP(4,3);
t9287 = koppelP(4,2);
t9293 = koppelP(4,1);
t9348 = t9241 * t9287 - t9244 * t9293;
t9556 = t9348 * t9245;
t9054 = t9242 * t9281 - t9556;
t9260 = legFrame(4,3);
t9207 = sin(t9260);
t9219 = cos(t9260);
t9266 = legFrame(4,1);
t9225 = cos(t9266);
t9520 = t9225 * t9255;
t9521 = t9225 * t9251;
t9272 = legFrame(4,2);
t9237 = cos(t9272);
t9213 = sin(t9266);
t9231 = sin(t9272);
t9540 = t9213 * t9231;
t9448 = t9246 * t9293;
t9454 = t9246 * t9287;
t9468 = t9243 * t9293;
t9474 = t9243 * t9287;
t9012 = (t9242 * t9468 + t9454) * t9244 + t9241 * (-t9242 * t9474 + t9448);
t9460 = t9245 * t9281;
t9627 = t9243 * t9460 - t9012;
t9634 = t9054 * t9540 + t9237 * t9627;
t9646 = t9219 * (t9054 * t9521 + t9255 * t9634) + t9207 * (t9054 * t9520 - t9251 * t9634);
t9282 = koppelP(3,3);
t9288 = koppelP(3,2);
t9294 = koppelP(3,1);
t9347 = t9241 * t9288 - t9244 * t9294;
t9555 = t9347 * t9245;
t9055 = t9242 * t9282 - t9555;
t9261 = legFrame(3,3);
t9208 = sin(t9261);
t9220 = cos(t9261);
t9267 = legFrame(3,1);
t9226 = cos(t9267);
t9517 = t9226 * t9255;
t9518 = t9226 * t9251;
t9273 = legFrame(3,2);
t9238 = cos(t9273);
t9214 = sin(t9267);
t9232 = sin(t9273);
t9537 = t9214 * t9232;
t9447 = t9246 * t9294;
t9453 = t9246 * t9288;
t9467 = t9243 * t9294;
t9473 = t9243 * t9288;
t9013 = (t9242 * t9467 + t9453) * t9244 + t9241 * (-t9242 * t9473 + t9447);
t9459 = t9245 * t9282;
t9628 = t9243 * t9459 - t9013;
t9633 = t9055 * t9537 + t9238 * t9628;
t9645 = t9220 * (t9055 * t9518 + t9255 * t9633) + t9208 * (t9055 * t9517 - t9251 * t9633);
t9283 = koppelP(2,3);
t9289 = koppelP(2,2);
t9295 = koppelP(2,1);
t9346 = t9241 * t9289 - t9244 * t9295;
t9554 = t9346 * t9245;
t9056 = t9242 * t9283 - t9554;
t9262 = legFrame(2,3);
t9209 = sin(t9262);
t9221 = cos(t9262);
t9268 = legFrame(2,1);
t9227 = cos(t9268);
t9514 = t9227 * t9255;
t9515 = t9227 * t9251;
t9274 = legFrame(2,2);
t9239 = cos(t9274);
t9215 = sin(t9268);
t9233 = sin(t9274);
t9534 = t9215 * t9233;
t9446 = t9246 * t9295;
t9452 = t9246 * t9289;
t9466 = t9243 * t9295;
t9472 = t9243 * t9289;
t9014 = (t9242 * t9466 + t9452) * t9244 + t9241 * (-t9242 * t9472 + t9446);
t9458 = t9245 * t9283;
t9629 = t9243 * t9458 - t9014;
t9632 = t9056 * t9534 + t9239 * t9629;
t9644 = t9221 * (t9056 * t9515 + t9255 * t9632) + t9209 * (t9056 * t9514 - t9251 * t9632);
t9284 = koppelP(1,3);
t9290 = koppelP(1,2);
t9296 = koppelP(1,1);
t9345 = t9241 * t9290 - t9244 * t9296;
t9553 = t9345 * t9245;
t9057 = t9242 * t9284 - t9553;
t9263 = legFrame(1,3);
t9210 = sin(t9263);
t9222 = cos(t9263);
t9269 = legFrame(1,1);
t9228 = cos(t9269);
t9511 = t9228 * t9255;
t9512 = t9228 * t9251;
t9275 = legFrame(1,2);
t9240 = cos(t9275);
t9216 = sin(t9269);
t9234 = sin(t9275);
t9531 = t9216 * t9234;
t9445 = t9246 * t9296;
t9451 = t9246 * t9290;
t9465 = t9243 * t9296;
t9471 = t9243 * t9290;
t9015 = (t9242 * t9465 + t9451) * t9244 + t9241 * (-t9242 * t9471 + t9445);
t9457 = t9245 * t9284;
t9624 = t9243 * t9457 - t9015;
t9631 = t9057 * t9531 + t9240 * t9624;
t9643 = t9222 * (t9057 * t9512 + t9255 * t9631) + t9210 * (t9057 * t9511 - t9251 * t9631);
t9630 = MDP(2) + MDP(3);
t9163 = t9205 * t9255 + t9217 * t9251;
t9331 = t9235 * t9163;
t9164 = t9206 * t9255 + t9218 * t9251;
t9329 = t9236 * t9164;
t9165 = t9207 * t9255 + t9219 * t9251;
t9327 = t9237 * t9165;
t9166 = t9208 * t9255 + t9220 * t9251;
t9325 = t9238 * t9166;
t9167 = t9209 * t9255 + t9221 * t9251;
t9323 = t9239 * t9167;
t9168 = t9210 * t9255 + t9222 * t9251;
t9321 = t9240 * t9168;
t9623 = -g(2) * t9216 + g(3) * t9228;
t9622 = -g(2) * t9215 + g(3) * t9227;
t9621 = -g(2) * t9214 + g(3) * t9226;
t9620 = -g(2) * t9213 + g(3) * t9225;
t9619 = -g(2) * t9212 + g(3) * t9224;
t9618 = -g(2) * t9211 + g(3) * t9223;
t9034 = t9242 * t9350 + t9462;
t9175 = t9241 * t9291 + t9244 * t9285;
t8986 = -t9034 * t9243 + t9175 * t9246;
t8992 = t9034 * t9246 + t9175 * t9243;
t9508 = t9229 * t9255;
t9509 = t9229 * t9251;
t9617 = t9223 * ((-t8986 * t9509 + t8992 * t9255) * t9205 + (t8986 * t9508 + t8992 * t9251) * t9217) + ((-t8986 * t9251 + t8992 * t9508) * t9217 - (t8986 * t9255 + t8992 * t9509) * t9205) * t9211;
t9035 = t9242 * t9349 + t9461;
t9176 = t9241 * t9292 + t9244 * t9286;
t8987 = -t9035 * t9243 + t9176 * t9246;
t8993 = t9035 * t9246 + t9176 * t9243;
t9505 = t9230 * t9255;
t9506 = t9230 * t9251;
t9616 = t9224 * ((-t8987 * t9506 + t8993 * t9255) * t9206 + (t8987 * t9505 + t8993 * t9251) * t9218) + ((-t8987 * t9251 + t8993 * t9505) * t9218 - t9206 * (t8987 * t9255 + t8993 * t9506)) * t9212;
t9036 = t9242 * t9348 + t9460;
t9177 = t9241 * t9293 + t9244 * t9287;
t8988 = -t9036 * t9243 + t9177 * t9246;
t8994 = t9036 * t9246 + t9177 * t9243;
t9502 = t9231 * t9255;
t9503 = t9231 * t9251;
t9615 = t9225 * ((-t8988 * t9503 + t8994 * t9255) * t9207 + (t8988 * t9502 + t8994 * t9251) * t9219) + ((-t8988 * t9251 + t8994 * t9502) * t9219 - t9207 * (t8988 * t9255 + t8994 * t9503)) * t9213;
t9037 = t9242 * t9347 + t9459;
t9178 = t9241 * t9294 + t9244 * t9288;
t8989 = -t9037 * t9243 + t9178 * t9246;
t8995 = t9037 * t9246 + t9178 * t9243;
t9499 = t9232 * t9255;
t9500 = t9232 * t9251;
t9614 = t9226 * ((-t8989 * t9500 + t8995 * t9255) * t9208 + (t8989 * t9499 + t8995 * t9251) * t9220) + ((-t8989 * t9251 + t8995 * t9499) * t9220 - t9208 * (t8989 * t9255 + t8995 * t9500)) * t9214;
t9038 = t9242 * t9346 + t9458;
t9179 = t9241 * t9295 + t9244 * t9289;
t8990 = -t9038 * t9243 + t9179 * t9246;
t8996 = t9038 * t9246 + t9179 * t9243;
t9496 = t9233 * t9255;
t9497 = t9233 * t9251;
t9613 = t9227 * ((-t8990 * t9497 + t8996 * t9255) * t9209 + (t8990 * t9496 + t8996 * t9251) * t9221) + ((-t8990 * t9251 + t8996 * t9496) * t9221 - t9209 * (t8990 * t9255 + t8996 * t9497)) * t9215;
t9039 = t9242 * t9345 + t9457;
t9180 = t9241 * t9296 + t9244 * t9290;
t8991 = -t9039 * t9243 + t9180 * t9246;
t8997 = t9039 * t9246 + t9180 * t9243;
t9493 = t9234 * t9255;
t9494 = t9234 * t9251;
t9612 = t9228 * ((-t8991 * t9494 + t8997 * t9255) * t9210 + (t8991 * t9493 + t8997 * t9251) * t9222) + ((-t8991 * t9251 + t8997 * t9493) * t9222 - (t8991 * t9255 + t8997 * t9494) * t9210) * t9216;
t9611 = g(1) * t9245;
t9610 = g(1) * t9251;
t9609 = g(1) * t9255;
t9602 = g(2) * t9251;
t9250 = sin(pkin(9));
t9595 = g(3) * t9250;
t9046 = g(1) * t9229 + t9235 * t9618;
t9257 = cos(pkin(4));
t9588 = t9046 * t9257;
t9047 = g(1) * t9230 + t9236 * t9619;
t9587 = t9047 * t9257;
t9048 = g(1) * t9231 + t9237 * t9620;
t9586 = t9048 * t9257;
t9049 = g(1) * t9232 + t9238 * t9621;
t9585 = t9049 * t9257;
t9050 = g(1) * t9233 + t9239 * t9622;
t9584 = t9050 * t9257;
t9051 = g(1) * t9234 + t9240 * t9623;
t9583 = t9051 * t9257;
t9254 = cos(pkin(9));
t9439 = t9254 * t9257;
t9143 = t9250 * t9255 + t9251 * t9439;
t9582 = t9143 * t9229;
t9581 = t9143 * t9230;
t9580 = t9143 * t9231;
t9579 = t9143 * t9232;
t9578 = t9143 * t9233;
t9577 = t9143 * t9234;
t9144 = t9250 * t9251 - t9255 * t9439;
t9576 = t9144 * t9229;
t9575 = t9144 * t9230;
t9574 = t9144 * t9231;
t9573 = t9144 * t9232;
t9572 = t9144 * t9233;
t9571 = t9144 * t9234;
t9157 = t9205 * t9251 - t9255 * t9217;
t9570 = t9157 * t9235;
t9569 = t9157 * t9257;
t9158 = t9206 * t9251 - t9255 * t9218;
t9568 = t9158 * t9236;
t9567 = t9158 * t9257;
t9159 = t9207 * t9251 - t9255 * t9219;
t9566 = t9159 * t9237;
t9565 = t9159 * t9257;
t9160 = t9208 * t9251 - t9255 * t9220;
t9564 = t9160 * t9238;
t9563 = t9160 * t9257;
t9161 = t9209 * t9251 - t9255 * t9221;
t9562 = t9161 * t9239;
t9561 = t9161 * t9257;
t9162 = t9210 * t9251 - t9255 * t9222;
t9560 = t9162 * t9240;
t9559 = t9162 * t9257;
t9545 = t9211 * t9251;
t9544 = t9211 * t9255;
t9542 = t9212 * t9251;
t9541 = t9212 * t9255;
t9539 = t9213 * t9251;
t9538 = t9213 * t9255;
t9536 = t9214 * t9251;
t9535 = t9214 * t9255;
t9533 = t9215 * t9251;
t9532 = t9215 * t9255;
t9530 = t9216 * t9251;
t9529 = t9216 * t9255;
t9528 = t9223 * t9229;
t9525 = t9224 * t9230;
t9522 = t9225 * t9231;
t9519 = t9226 * t9232;
t9516 = t9227 * t9233;
t9513 = t9228 * t9234;
t9510 = t9229 * t9250;
t9507 = t9230 * t9250;
t9504 = t9231 * t9250;
t9501 = t9232 * t9250;
t9498 = t9233 * t9250;
t9495 = t9234 * t9250;
t9492 = t9235 * t9250;
t9253 = sin(pkin(4));
t9491 = t9235 * t9253;
t9490 = t9236 * t9250;
t9489 = t9236 * t9253;
t9488 = t9237 * t9250;
t9487 = t9237 * t9253;
t9486 = t9238 * t9250;
t9485 = t9238 * t9253;
t9484 = t9239 * t9250;
t9483 = t9239 * t9253;
t9482 = t9240 * t9250;
t9481 = t9240 * t9253;
t9480 = t9241 * t9243;
t9479 = t9241 * t9246;
t9478 = t9243 * t9244;
t9477 = t9243 * t9245;
t9464 = t9244 * t9246;
t9463 = t9245 * t9246;
t9247 = 0.1e1 / t9250;
t9444 = t9247 / t9253;
t9443 = t9250 * t9253;
t9442 = t9250 * t9257;
t9441 = t9253 * t9254;
t9256 = cos(pkin(5));
t9440 = t9253 * t9256;
t9438 = g(2) * t9439;
t9437 = g(3) * t9439;
t9252 = sin(pkin(5));
t9248 = 0.1e1 / t9252;
t9436 = MDP(3) * t9247 * t9248;
t9435 = t9046 * t9444;
t9434 = t9047 * t9444;
t9433 = t9048 * t9444;
t9432 = t9049 * t9444;
t9431 = t9050 * t9444;
t9430 = t9051 * t9444;
t9428 = t9229 * t9439;
t9426 = t9230 * t9439;
t9424 = t9231 * t9439;
t9422 = t9232 * t9439;
t9420 = t9233 * t9439;
t9418 = t9234 * t9439;
t9417 = t9235 * t9439;
t9416 = t9236 * t9439;
t9415 = t9237 * t9439;
t9414 = t9238 * t9439;
t9413 = t9239 * t9439;
t9412 = t9240 * t9439;
t9405 = t9248 * t9444;
t9201 = t9251 * g(3);
t9202 = t9255 * g(3);
t9203 = t9255 * g(2);
t9398 = ((((g(3) * t9509 + t9203) * t9217 + t9205 * (g(3) * t9508 - t9602)) * t9223 + ((-g(2) * t9509 + t9202) * t9211 - t9235 * t9610) * t9217 - ((g(2) * t9508 + t9201) * t9211 + t9235 * t9609) * t9205) * t9253 - t9588) * t9405;
t9397 = ((((g(3) * t9506 + t9203) * t9218 + t9206 * (g(3) * t9505 - t9602)) * t9224 + ((-g(2) * t9506 + t9202) * t9212 - t9236 * t9610) * t9218 - ((g(2) * t9505 + t9201) * t9212 + t9236 * t9609) * t9206) * t9253 - t9587) * t9405;
t9396 = ((((g(3) * t9503 + t9203) * t9219 + t9207 * (g(3) * t9502 - t9602)) * t9225 + ((-g(2) * t9503 + t9202) * t9213 - t9237 * t9610) * t9219 - ((g(2) * t9502 + t9201) * t9213 + t9237 * t9609) * t9207) * t9253 - t9586) * t9405;
t9395 = ((((g(3) * t9500 + t9203) * t9220 + t9208 * (g(3) * t9499 - t9602)) * t9226 + ((-g(2) * t9500 + t9202) * t9214 - t9238 * t9610) * t9220 - ((g(2) * t9499 + t9201) * t9214 + t9238 * t9609) * t9208) * t9253 - t9585) * t9405;
t9394 = ((((g(3) * t9497 + t9203) * t9221 + t9209 * (g(3) * t9496 - t9602)) * t9227 + ((-g(2) * t9497 + t9202) * t9215 - t9239 * t9610) * t9221 - ((g(2) * t9496 + t9201) * t9215 + t9239 * t9609) * t9209) * t9253 - t9584) * t9405;
t9393 = ((((g(3) * t9494 + t9203) * t9222 + t9210 * (g(3) * t9493 - t9602)) * t9228 + ((-g(2) * t9494 + t9202) * t9216 - t9240 * t9610) * t9222 - ((g(2) * t9493 + t9201) * t9216 + t9240 * t9609) * t9210) * t9253 - t9583) * t9405;
t9016 = -(t9242 * t9456 + t9470) * t9241 + (t9242 * t9450 - t9476) * t9244;
t8956 = t9246 * t9462 - t9016;
t9017 = -(t9242 * t9455 + t9469) * t9241 + (t9242 * t9449 - t9475) * t9244;
t8957 = t9246 * t9461 - t9017;
t9018 = -(t9242 * t9454 + t9468) * t9241 + (t9242 * t9448 - t9474) * t9244;
t8958 = t9246 * t9460 - t9018;
t9019 = -(t9242 * t9453 + t9467) * t9241 + (t9242 * t9447 - t9473) * t9244;
t8959 = t9246 * t9459 - t9019;
t9020 = -(t9242 * t9452 + t9466) * t9241 + (t9242 * t9446 - t9472) * t9244;
t8960 = t9246 * t9458 - t9020;
t9021 = -(t9242 * t9451 + t9465) * t9241 + (t9242 * t9445 - t9471) * t9244;
t8961 = t9246 * t9457 - t9021;
t9386 = t9157 * t9528 + t9211 * t9163;
t9385 = t9158 * t9525 + t9212 * t9164;
t9384 = t9159 * t9522 + t9213 * t9165;
t9383 = t9160 * t9519 + t9214 * t9166;
t9382 = t9161 * t9516 + t9215 * t9167;
t9381 = t9162 * t9513 + t9216 * t9168;
t9083 = -t9211 * t9509 + t9526;
t9095 = t9211 * t9508 + t9527;
t9374 = t9083 * t9217 - t9095 * t9205;
t9084 = t9223 * t9509 + t9544;
t9096 = t9223 * t9508 - t9545;
t9373 = -t9084 * t9217 - t9096 * t9205;
t9085 = -t9212 * t9506 + t9523;
t9097 = t9212 * t9505 + t9524;
t9372 = t9085 * t9218 - t9097 * t9206;
t9086 = t9224 * t9506 + t9541;
t9098 = t9224 * t9505 - t9542;
t9371 = -t9086 * t9218 - t9098 * t9206;
t9087 = -t9213 * t9503 + t9520;
t9099 = t9213 * t9502 + t9521;
t9370 = t9087 * t9219 - t9099 * t9207;
t9088 = t9225 * t9503 + t9538;
t9100 = t9225 * t9502 - t9539;
t9369 = -t9088 * t9219 - t9100 * t9207;
t9089 = -t9214 * t9500 + t9517;
t9101 = t9214 * t9499 + t9518;
t9368 = t9089 * t9220 - t9101 * t9208;
t9090 = t9226 * t9500 + t9535;
t9102 = t9226 * t9499 - t9536;
t9367 = -t9090 * t9220 - t9102 * t9208;
t9091 = -t9215 * t9497 + t9514;
t9103 = t9215 * t9496 + t9515;
t9366 = t9091 * t9221 - t9103 * t9209;
t9092 = t9227 * t9497 + t9532;
t9104 = t9227 * t9496 - t9533;
t9365 = -t9092 * t9221 - t9104 * t9209;
t9093 = -t9216 * t9494 + t9511;
t9105 = t9216 * t9493 + t9512;
t9364 = t9093 * t9222 - t9105 * t9210;
t9094 = t9228 * t9494 + t9529;
t9106 = t9228 * t9493 - t9530;
t9363 = -t9094 * t9222 - t9106 * t9210;
t9362 = t9143 * t9217 - t9144 * t9205;
t9361 = t9143 * t9205 + t9144 * t9217;
t9360 = t9143 * t9218 - t9144 * t9206;
t9359 = t9143 * t9206 + t9144 * t9218;
t9358 = t9143 * t9219 - t9144 * t9207;
t9357 = t9143 * t9207 + t9144 * t9219;
t9356 = t9143 * t9220 - t9144 * t9208;
t9355 = t9143 * t9208 + t9144 * t9220;
t9354 = t9143 * t9221 - t9144 * t9209;
t9353 = t9143 * t9209 + t9144 * t9221;
t9352 = t9143 * t9222 - t9144 * t9210;
t9351 = t9143 * t9210 + t9144 * t9222;
t8962 = t9034 * t9509 + t9175 * t9255;
t8974 = t9034 * t9508 - t9175 * t9251;
t8846 = t9034 * t9491 + (t8962 * t9217 + t8974 * t9205) * t9257;
t8963 = t9035 * t9506 + t9176 * t9255;
t8975 = t9035 * t9505 - t9176 * t9251;
t8847 = t9035 * t9489 + (t8963 * t9218 + t8975 * t9206) * t9257;
t8964 = t9036 * t9503 + t9177 * t9255;
t8976 = t9036 * t9502 - t9177 * t9251;
t8848 = t9036 * t9487 + (t8964 * t9219 + t8976 * t9207) * t9257;
t8965 = t9037 * t9500 + t9178 * t9255;
t8977 = t9037 * t9499 - t9178 * t9251;
t8849 = t9037 * t9485 + (t8965 * t9220 + t8977 * t9208) * t9257;
t8966 = t9038 * t9497 + t9179 * t9255;
t8978 = t9038 * t9496 - t9179 * t9251;
t8850 = t9038 * t9483 + (t8966 * t9221 + t8978 * t9209) * t9257;
t8967 = t9039 * t9494 + t9180 * t9255;
t8979 = t9039 * t9493 - t9180 * t9251;
t8851 = t9039 * t9481 + (t8967 * t9222 + t8979 * t9210) * t9257;
t8968 = t9034 * t9255 - t9175 * t9509;
t8980 = t9034 * t9251 + t9175 * t9508;
t8870 = -t9175 * t9491 + (t8968 * t9217 - t8980 * t9205) * t9257;
t8969 = t9035 * t9255 - t9176 * t9506;
t8981 = t9035 * t9251 + t9176 * t9505;
t8871 = -t9176 * t9489 + (t8969 * t9218 - t8981 * t9206) * t9257;
t8970 = t9036 * t9255 - t9177 * t9503;
t8982 = t9036 * t9251 + t9177 * t9502;
t8872 = -t9177 * t9487 + (t8970 * t9219 - t8982 * t9207) * t9257;
t8971 = t9037 * t9255 - t9178 * t9500;
t8983 = t9037 * t9251 + t9178 * t9499;
t8873 = -t9178 * t9485 + (t8971 * t9220 - t8983 * t9208) * t9257;
t8972 = t9038 * t9255 - t9179 * t9497;
t8984 = t9038 * t9251 + t9179 * t9496;
t8874 = -t9179 * t9483 + (t8972 * t9221 - t8984 * t9209) * t9257;
t8973 = t9039 * t9255 - t9180 * t9494;
t8985 = t9039 * t9251 + t9180 * t9493;
t8875 = -t9180 * t9481 + (t8973 * t9222 - t8985 * t9210) * t9257;
t8882 = -t8962 * t9205 + t8974 * t9217;
t8883 = -t8963 * t9206 + t8975 * t9218;
t8884 = -t8964 * t9207 + t8976 * t9219;
t8885 = -t8965 * t9208 + t8977 * t9220;
t8886 = -t8966 * t9209 + t8978 * t9221;
t8887 = -t8967 * t9210 + t8979 * t9222;
t8888 = t8968 * t9205 + t8980 * t9217;
t8889 = t8969 * t9206 + t8981 * t9218;
t8890 = t8970 * t9207 + t8982 * t9219;
t8891 = t8971 * t9208 + t8983 * t9220;
t8892 = t8972 * t9209 + t8984 * t9221;
t8893 = t8973 * t9210 + t8985 * t9222;
t9344 = -(((-t8851 * t9243 - t8875 * t9246) * t9228 + t9216 * (t8851 * t9246 - t8875 * t9243)) * t9250 - t9254 * ((-t8887 * t9243 + t8893 * t9246) * t9228 + (t8887 * t9246 + t8893 * t9243) * t9216)) * t9430 - (((-t8850 * t9243 - t8874 * t9246) * t9227 + t9215 * (t8850 * t9246 - t8874 * t9243)) * t9250 - t9254 * ((-t8886 * t9243 + t8892 * t9246) * t9227 + (t8886 * t9246 + t8892 * t9243) * t9215)) * t9431 - (((-t8849 * t9243 - t8873 * t9246) * t9226 + t9214 * (t8849 * t9246 - t8873 * t9243)) * t9250 - t9254 * ((-t8885 * t9243 + t8891 * t9246) * t9226 + (t8885 * t9246 + t8891 * t9243) * t9214)) * t9432 - (((-t8848 * t9243 - t8872 * t9246) * t9225 + t9213 * (t8848 * t9246 - t8872 * t9243)) * t9250 - t9254 * ((-t8884 * t9243 + t8890 * t9246) * t9225 + (t8884 * t9246 + t8890 * t9243) * t9213)) * t9433 - (((-t8847 * t9243 - t8871 * t9246) * t9224 + t9212 * (t8847 * t9246 - t8871 * t9243)) * t9250 - t9254 * ((-t8883 * t9243 + t8889 * t9246) * t9224 + (t8883 * t9246 + t8889 * t9243) * t9212)) * t9434 - (((-t8846 * t9243 - t8870 * t9246) * t9223 + t9211 * (t8846 * t9246 - t8870 * t9243)) * t9250 - t9254 * ((-t8882 * t9243 + t8888 * t9246) * t9223 + (t8882 * t9246 + t8888 * t9243) * t9211)) * t9435;
t9315 = t9245 * t9321;
t9316 = t9245 * t9323;
t9317 = t9245 * t9325;
t9318 = t9245 * t9327;
t9319 = t9245 * t9329;
t9320 = t9245 * t9331;
t9322 = t9240 * t9057;
t9324 = t9239 * t9056;
t9326 = t9238 * t9055;
t9328 = t9237 * t9054;
t9330 = t9236 * t9053;
t9332 = t9235 * t9052;
t9343 = -(-t9254 * (t9624 * t9560 - (t9093 * t9210 + t9105 * t9222) * t9057) + (-t9216 * t9322 + t9234 * t9624) * t9443 + (-t9364 * t9553 + t9015 * t9321 + (t9242 * t9364 - t9243 * t9315) * t9284) * t9442) * t9430 - (-t9254 * (t9629 * t9562 - (t9091 * t9209 + t9103 * t9221) * t9056) + (-t9215 * t9324 + t9233 * t9629) * t9443 + (-t9366 * t9554 + t9014 * t9323 + (t9242 * t9366 - t9243 * t9316) * t9283) * t9442) * t9431 - (-t9254 * (t9628 * t9564 - (t9089 * t9208 + t9101 * t9220) * t9055) + (-t9214 * t9326 + t9232 * t9628) * t9443 + (-t9368 * t9555 + t9013 * t9325 + (t9242 * t9368 - t9243 * t9317) * t9282) * t9442) * t9432 - (-t9254 * (t9627 * t9566 - (t9087 * t9207 + t9099 * t9219) * t9054) + (-t9213 * t9328 + t9231 * t9627) * t9443 + (-t9370 * t9556 + t9012 * t9327 + (t9242 * t9370 - t9243 * t9318) * t9281) * t9442) * t9433 - (-t9254 * (t9626 * t9568 - (t9085 * t9206 + t9097 * t9218) * t9053) + (-t9212 * t9330 + t9230 * t9626) * t9443 + (-t9372 * t9557 + t9011 * t9329 + (t9242 * t9372 - t9243 * t9319) * t9280) * t9442) * t9434 - (-t9254 * (t9625 * t9570 - (t9083 * t9205 + t9095 * t9217) * t9052) + (-t9211 * t9332 + t9229 * t9625) * t9443 + (-t9374 * t9558 + t9010 * t9331 + (t9242 * t9374 - t9243 * t9320) * t9279) * t9442) * t9435;
t9342 = -(t9254 * (-t8961 * t9560 + (-t9094 * t9210 + t9106 * t9222) * t9057) + (t8961 * t9234 - t9228 * t9322) * t9443 + (-t9363 * t9553 + t9021 * t9321 + (t9242 * t9363 - t9246 * t9315) * t9284) * t9442) * t9430 - (t9254 * (-t8960 * t9562 + (-t9092 * t9209 + t9104 * t9221) * t9056) + (t8960 * t9233 - t9227 * t9324) * t9443 + (-t9365 * t9554 + t9020 * t9323 + (t9242 * t9365 - t9246 * t9316) * t9283) * t9442) * t9431 - (t9254 * (-t8959 * t9564 + (-t9090 * t9208 + t9102 * t9220) * t9055) + (t8959 * t9232 - t9226 * t9326) * t9443 + (-t9367 * t9555 + t9019 * t9325 + (t9242 * t9367 - t9246 * t9317) * t9282) * t9442) * t9432 - (t9254 * (-t8958 * t9566 + (-t9088 * t9207 + t9100 * t9219) * t9054) + (t8958 * t9231 - t9225 * t9328) * t9443 + (-t9369 * t9556 + t9018 * t9327 + (t9242 * t9369 - t9246 * t9318) * t9281) * t9442) * t9433 - (t9254 * (-t8957 * t9568 + (-t9086 * t9206 + t9098 * t9218) * t9053) + (t8957 * t9230 - t9224 * t9330) * t9443 + (-t9371 * t9557 + t9017 * t9329 + (t9242 * t9371 - t9246 * t9319) * t9280) * t9442) * t9434 - (t9254 * (-t8956 * t9570 + (-t9084 * t9205 + t9096 * t9217) * t9052) + (t8956 * t9229 - t9223 * t9332) * t9443 + (-t9373 * t9558 + t9016 * t9331 + (t9242 * t9373 - t9246 * t9320) * t9279) * t9442) * t9435;
t9028 = t9163 * t9229 * t9257 + t9491;
t9029 = t9164 * t9230 * t9257 + t9489;
t9030 = t9165 * t9231 * t9257 + t9487;
t9031 = t9166 * t9232 * t9257 + t9485;
t9032 = t9167 * t9233 * t9257 + t9483;
t9033 = t9168 * t9234 * t9257 + t9481;
t9341 = -((t9033 * t9228 - t9216 * t9559) * t9250 + t9254 * t9381) * t9430 - ((t9032 * t9227 - t9215 * t9561) * t9250 + t9254 * t9382) * t9431 - ((t9031 * t9226 - t9214 * t9563) * t9250 + t9254 * t9383) * t9432 - ((t9030 * t9225 - t9213 * t9565) * t9250 + t9254 * t9384) * t9433 - ((t9029 * t9224 - t9212 * t9567) * t9250 + t9254 * t9385) * t9434 - ((t9028 * t9223 - t9211 * t9569) * t9250 + t9254 * t9386) * t9435;
t9333 = t9162 * t9531 - t9168 * t9228;
t9334 = t9161 * t9534 - t9167 * t9227;
t9335 = t9160 * t9537 - t9166 * t9226;
t9336 = t9159 * t9540 - t9165 * t9225;
t9337 = t9158 * t9543 - t9164 * t9224;
t9338 = t9157 * t9546 - t9163 * t9223;
t9340 = -((-t9033 * t9216 - t9228 * t9559) * t9250 - t9333 * t9254) * t9430 - ((-t9032 * t9215 - t9227 * t9561) * t9250 - t9334 * t9254) * t9431 - ((-t9031 * t9214 - t9226 * t9563) * t9250 - t9335 * t9254) * t9432 - ((-t9030 * t9213 - t9225 * t9565) * t9250 - t9336 * t9254) * t9433 - ((-t9029 * t9212 - t9224 * t9567) * t9250 - t9337 * t9254) * t9434 - ((-t9028 * t9211 - t9223 * t9569) * t9250 - t9338 * t9254) * t9435;
t9339 = -((-t9162 * t9254 - t9168 * t9442) * t9240 + t9234 * t9443) * t9430 - ((-t9161 * t9254 - t9167 * t9442) * t9239 + t9233 * t9443) * t9431 - ((-t9160 * t9254 - t9166 * t9442) * t9238 + t9232 * t9443) * t9432 - ((-t9159 * t9254 - t9165 * t9442) * t9237 + t9231 * t9443) * t9433 - ((-t9158 * t9254 - t9164 * t9442) * t9236 + t9230 * t9443) * t9434 - ((-t9157 * t9254 - t9163 * t9442) * t9235 + t9229 * t9443) * t9435;
t9314 = g(1) * t9492 - (-g(2) * t9510 + t9437) * t9211 - (g(3) * t9510 + t9438) * t9223;
t9313 = g(1) * t9490 - (-g(2) * t9507 + t9437) * t9212 - (g(3) * t9507 + t9438) * t9224;
t9312 = g(1) * t9488 - (-g(2) * t9504 + t9437) * t9213 - (g(3) * t9504 + t9438) * t9225;
t9311 = g(1) * t9486 - (-g(2) * t9501 + t9437) * t9214 - (g(3) * t9501 + t9438) * t9226;
t9310 = g(1) * t9484 - (-g(2) * t9498 + t9437) * t9215 - (g(3) * t9498 + t9438) * t9227;
t9309 = g(1) * t9482 - (-g(2) * t9495 + t9437) * t9216 - (g(3) * t9495 + t9438) * t9228;
t9204 = g(2) * t9250;
t9308 = g(1) * t9417 - (g(3) * t9428 - t9204) * t9223 + (g(2) * t9428 + t9595) * t9211;
t9307 = g(1) * t9416 - (g(3) * t9426 - t9204) * t9224 + (g(2) * t9426 + t9595) * t9212;
t9306 = g(1) * t9415 - (g(3) * t9424 - t9204) * t9225 + (g(2) * t9424 + t9595) * t9213;
t9305 = g(1) * t9414 - (g(3) * t9422 - t9204) * t9226 + (g(2) * t9422 + t9595) * t9214;
t9304 = g(1) * t9413 - (g(3) * t9420 - t9204) * t9227 + (g(2) * t9420 + t9595) * t9215;
t9303 = g(1) * t9412 - (g(3) * t9418 - t9204) * t9228 + (g(2) * t9418 + t9595) * t9216;
t9186 = g(2) * t9228 + g(3) * t9216;
t9185 = g(2) * t9227 + g(3) * t9215;
t9184 = g(2) * t9226 + g(3) * t9214;
t9183 = g(2) * t9225 + g(3) * t9213;
t9182 = g(2) * t9224 + g(3) * t9212;
t9181 = g(2) * t9223 + g(3) * t9211;
t9082 = -t9242 * t9464 + t9480;
t9081 = t9242 * t9479 + t9478;
t9080 = t9242 * t9478 + t9479;
t9079 = -t9242 * t9480 + t9464;
t9058 = g(1) * t9242 - g(2) * t9477 + g(3) * t9463;
t9045 = g(1) * t9240 - t9234 * t9623;
t9044 = g(1) * t9239 - t9233 * t9622;
t9043 = g(1) * t9238 - t9232 * t9621;
t9042 = g(1) * t9237 - t9231 * t9620;
t9041 = g(1) * t9236 - t9230 * t9619;
t9040 = g(1) * t9235 - t9229 * t9618;
t8949 = g(2) * t9080 + g(3) * t9082 + t9244 * t9611;
t8948 = -t9079 * g(2) - t9081 * g(3) + t9241 * t9611;
t8941 = t8961 * t9240 + t9057 * t9513;
t8940 = t8960 * t9239 + t9056 * t9516;
t8939 = t8959 * t9238 + t9055 * t9519;
t8938 = t8958 * t9237 + t9054 * t9522;
t8937 = t8957 * t9236 + t9053 * t9525;
t8936 = t8956 * t9235 + t9052 * t9528;
t8929 = t8961 * t9482 + t9057 * (t9216 * t9439 + t9228 * t9495);
t8928 = t8960 * t9484 + t9056 * (t9215 * t9439 + t9227 * t9498);
t8927 = t8959 * t9486 + t9055 * (t9214 * t9439 + t9226 * t9501);
t8926 = t8958 * t9488 + t9054 * (t9213 * t9439 + t9225 * t9504);
t8925 = t8957 * t9490 + t9053 * (t9212 * t9439 + t9224 * t9507);
t8924 = t8956 * t9492 + t9052 * (t9211 * t9439 + t9223 * t9510);
t8923 = -t9624 * t9482 + t9057 * (-t9216 * t9495 + t9228 * t9439);
t8922 = -t9629 * t9484 + t9056 * (-t9215 * t9498 + t9227 * t9439);
t8921 = -t9628 * t9486 + t9055 * (-t9214 * t9501 + t9226 * t9439);
t8920 = -t9627 * t9488 + t9054 * (-t9213 * t9504 + t9225 * t9439);
t8919 = -t9626 * t9490 + t9053 * (-t9212 * t9507 + t9224 * t9439);
t8918 = -t9625 * t9492 + t9052 * (-t9211 * t9510 + t9223 * t9439);
t8905 = t8961 * t9412 + t9057 * (-t9216 * t9250 + t9228 * t9418);
t8904 = t8960 * t9413 + t9056 * (-t9215 * t9250 + t9227 * t9420);
t8903 = t8959 * t9414 + t9055 * (-t9214 * t9250 + t9226 * t9422);
t8902 = t8958 * t9415 + t9054 * (-t9213 * t9250 + t9225 * t9424);
t8901 = t8957 * t9416 + t9053 * (-t9212 * t9250 + t9224 * t9426);
t8900 = t8956 * t9417 + t9052 * (-t9211 * t9250 + t9223 * t9428);
t8899 = -t9624 * t9412 - t9057 * (t9216 * t9418 + t9228 * t9250);
t8898 = -t9629 * t9413 - t9056 * (t9215 * t9420 + t9227 * t9250);
t8897 = -t9628 * t9414 - t9055 * (t9214 * t9422 + t9226 * t9250);
t8896 = -t9627 * t9415 - t9054 * (t9213 * t9424 + t9225 * t9250);
t8895 = -t9626 * t9416 - t9053 * (t9212 * t9426 + t9224 * t9250);
t8894 = -t9625 * t9417 - t9052 * (t9211 * t9428 + t9223 * t9250);
t8833 = (t8941 * t9255 - t9057 * t9530) * t9222 - t9210 * (t8941 * t9251 + t9057 * t9529);
t8832 = (t8940 * t9255 - t9056 * t9533) * t9221 - t9209 * (t8940 * t9251 + t9056 * t9532);
t8831 = (t8939 * t9255 - t9055 * t9536) * t9220 - t9208 * (t8939 * t9251 + t9055 * t9535);
t8830 = (t8938 * t9255 - t9054 * t9539) * t9219 - t9207 * (t8938 * t9251 + t9054 * t9538);
t8829 = (t8937 * t9255 - t9053 * t9542) * t9218 - t9206 * (t8937 * t9251 + t9053 * t9541);
t8828 = (t8936 * t9255 - t9052 * t9545) * t9217 - t9205 * (t8936 * t9251 + t9052 * t9544);
t8815 = ((-t9251 * t9304 - t9255 * t9310) * t9221 + (t9251 * t9310 - t9255 * t9304) * t9209 + t9050 * t9441) * t9252 - t9256 * (t9584 + ((t9044 * t9251 - t9185 * t9255) * t9221 + (t9044 * t9255 + t9185 * t9251) * t9209) * t9253);
t8814 = ((-t9251 * t9305 - t9255 * t9311) * t9220 + (t9251 * t9311 - t9255 * t9305) * t9208 + t9049 * t9441) * t9252 - t9256 * (t9585 + ((t9043 * t9251 - t9184 * t9255) * t9220 + (t9043 * t9255 + t9184 * t9251) * t9208) * t9253);
t8813 = ((-t9251 * t9306 - t9255 * t9312) * t9219 + (t9251 * t9312 - t9255 * t9306) * t9207 + t9048 * t9441) * t9252 - t9256 * (t9586 + ((t9042 * t9251 - t9183 * t9255) * t9219 + (t9042 * t9255 + t9183 * t9251) * t9207) * t9253);
t8812 = ((-t9251 * t9307 - t9255 * t9313) * t9218 + (t9251 * t9313 - t9255 * t9307) * t9206 + t9047 * t9441) * t9252 - t9256 * (t9587 + ((t9041 * t9251 - t9182 * t9255) * t9218 + (t9041 * t9255 + t9182 * t9251) * t9206) * t9253);
t8811 = ((-t9251 * t9303 - t9255 * t9309) * t9222 + (t9251 * t9309 - t9255 * t9303) * t9210 + t9051 * t9441) * t9252 - t9256 * (t9583 + ((t9045 * t9251 - t9186 * t9255) * t9222 + (t9045 * t9255 + t9186 * t9251) * t9210) * t9253);
t8810 = ((-t9251 * t9308 - t9255 * t9314) * t9217 + (t9251 * t9314 - t9255 * t9308) * t9205 + t9046 * t9441) * t9252 - t9256 * (t9588 + ((t9040 * t9251 - t9181 * t9255) * t9217 + (t9040 * t9255 + t9181 * t9251) * t9205) * t9253);
t1 = [t9339 * MDP(1) + (-t9058 * t9242 + (-t8948 * t9241 - t8949 * t9244) * t9245) * MDP(13) + (-t8810 * t9570 - t8811 * t9560 - t8812 * t9568 - t8813 * t9566 - t8814 * t9564 - t8815 * t9562) * t9436 + t9630 * ((t9162 * t9440 + t9252 * t9351) * t9240 * t9393 + (t9161 * t9440 + t9252 * t9353) * t9239 * t9394 + (t9160 * t9440 + t9252 * t9355) * t9238 * t9395 + (t9159 * t9440 + t9252 * t9357) * t9237 * t9396 + (t9158 * t9440 + t9252 * t9359) * t9236 * t9397 + (t9157 * t9440 + t9252 * t9361) * t9235 * t9398 + t9339); t9340 * MDP(1) + (t8948 * t9079 - t8949 * t9080 + t9058 * t9477) * MDP(13) + (-t8810 * t9338 - t8811 * t9333 - t8812 * t9337 - t8813 * t9336 - t8814 * t9335 - t8815 * t9334) * t9436 + t9630 * (((-t9228 * t9352 + t9351 * t9531) * t9252 + t9333 * t9440) * t9393 + ((-t9227 * t9354 + t9353 * t9534) * t9252 + t9334 * t9440) * t9394 + ((-t9226 * t9356 + t9355 * t9537) * t9252 + t9335 * t9440) * t9395 + ((-t9225 * t9358 + t9357 * t9540) * t9252 + t9336 * t9440) * t9396 + ((-t9224 * t9360 + t9359 * t9543) * t9252 + t9337 * t9440) * t9397 + ((-t9223 * t9362 + t9361 * t9546) * t9252 + t9338 * t9440) * t9398 + t9340); t9341 * MDP(1) + (t8948 * t9081 - t8949 * t9082 - t9058 * t9463) * MDP(13) + (t8810 * t9386 + t8811 * t9381 + t8812 * t9385 + t8813 * t9384 + t8814 * t9383 + t8815 * t9382) * t9436 + t9630 * (((-t9216 * t9352 - t9351 * t9513) * t9252 - t9381 * t9440) * t9393 + ((-t9215 * t9354 - t9353 * t9516) * t9252 - t9382 * t9440) * t9394 + ((-t9214 * t9356 - t9355 * t9519) * t9252 - t9383 * t9440) * t9395 + ((-t9213 * t9358 - t9357 * t9522) * t9252 - t9384 * t9440) * t9396 + ((-t9212 * t9360 - t9359 * t9525) * t9252 - t9385 * t9440) * t9397 + ((-t9211 * t9362 - t9361 * t9528) * t9252 - t9386 * t9440) * t9398 + t9341); t9344 * MDP(1) + (MDP(10) * t8948 + MDP(11) * t8949) * t9242 + ((-t8948 * t9244 + t8949 * t9241) * MDP(12) + (-MDP(10) * t9241 - MDP(11) * t9244) * t9058) * t9245 + (-t8810 * t9617 - t8811 * t9612 - t8812 * t9616 - t8813 * t9615 - t8814 * t9614 - t8815 * t9613) * t9436 + t9630 * (((((-t8991 * t9571 + t8997 * t9143) * t9222 + (-t8991 * t9577 - t8997 * t9144) * t9210) * t9228 + t9216 * ((-t8991 * t9143 - t8997 * t9571) * t9222 - (-t8991 * t9144 + t8997 * t9577) * t9210)) * t9252 + t9612 * t9440) * t9393 + ((((-t8990 * t9572 + t8996 * t9143) * t9221 + (-t8990 * t9578 - t8996 * t9144) * t9209) * t9227 + t9215 * ((-t8990 * t9143 - t8996 * t9572) * t9221 - (-t8990 * t9144 + t8996 * t9578) * t9209)) * t9252 + t9613 * t9440) * t9394 + ((((-t8989 * t9573 + t8995 * t9143) * t9220 + (-t8989 * t9579 - t8995 * t9144) * t9208) * t9226 + t9214 * ((-t8989 * t9143 - t8995 * t9573) * t9220 - (-t8989 * t9144 + t8995 * t9579) * t9208)) * t9252 + t9614 * t9440) * t9395 + ((((-t8988 * t9574 + t8994 * t9143) * t9219 + (-t8988 * t9580 - t8994 * t9144) * t9207) * t9225 + t9213 * ((-t8988 * t9143 - t8994 * t9574) * t9219 - (-t8988 * t9144 + t8994 * t9580) * t9207)) * t9252 + t9615 * t9440) * t9396 + ((((-t8987 * t9575 + t8993 * t9143) * t9218 + (-t8987 * t9581 - t8993 * t9144) * t9206) * t9224 + t9212 * ((-t8987 * t9143 - t8993 * t9575) * t9218 - (-t8987 * t9144 + t8993 * t9581) * t9206)) * t9252 + t9616 * t9440) * t9397 + ((((-t8986 * t9576 + t8992 * t9143) * t9217 + (-t8986 * t9582 - t8992 * t9144) * t9205) * t9223 + t9211 * ((-t8986 * t9143 - t8992 * t9576) * t9217 - (-t8986 * t9144 + t8992 * t9582) * t9205)) * t9252 + t9617 * t9440) * t9398 + t9344); t9342 * MDP(1) + (-t8948 * t9477 + t9058 * t9079) * MDP(10) + (-t8949 * t9477 - t9058 * t9080) * MDP(11) + (-t8948 * t9080 - t8949 * t9079) * MDP(12) + (t8810 * t8828 + t8811 * t8833 + t8812 * t8829 + t8813 * t8830 + t8814 * t8831 + t8815 * t8832) * t9436 + t9630 * ((((-t8905 * t9255 + t8929 * t9251) * t9222 + (t8905 * t9251 + t8929 * t9255) * t9210) * t9252 - t8833 * t9440) * t9393 + (((-t8904 * t9255 + t8928 * t9251) * t9221 + (t8904 * t9251 + t8928 * t9255) * t9209) * t9252 - t8832 * t9440) * t9394 + (((-t8903 * t9255 + t8927 * t9251) * t9220 + (t8903 * t9251 + t8927 * t9255) * t9208) * t9252 - t8831 * t9440) * t9395 + (((-t8902 * t9255 + t8926 * t9251) * t9219 + (t8902 * t9251 + t8926 * t9255) * t9207) * t9252 - t8830 * t9440) * t9396 + (((-t8901 * t9255 + t8925 * t9251) * t9218 + (t8901 * t9251 + t8925 * t9255) * t9206) * t9252 - t8829 * t9440) * t9397 + (((-t8900 * t9255 + t8924 * t9251) * t9217 + (t8900 * t9251 + t8924 * t9255) * t9205) * t9252 - t8828 * t9440) * t9398 + t9342); t9343 * MDP(1) + (t8948 * t9463 + t9058 * t9081) * MDP(10) + (t8949 * t9463 - t9058 * t9082) * MDP(11) + (-t8948 * t9082 - t8949 * t9081) * MDP(12) + (t8810 * t9648 + t9643 * t8811 + t9647 * t8812 + t9646 * t8813 + t9645 * t8814 + t9644 * t8815) * t9436 + t9630 * ((((t8899 * t9255 - t8923 * t9251) * t9222 - (t8899 * t9251 + t8923 * t9255) * t9210) * t9252 - t9643 * t9440) * t9393 + (((t8898 * t9255 - t8922 * t9251) * t9221 - (t8898 * t9251 + t8922 * t9255) * t9209) * t9252 - t9644 * t9440) * t9394 + (((t8897 * t9255 - t8921 * t9251) * t9220 - (t8897 * t9251 + t8921 * t9255) * t9208) * t9252 - t9645 * t9440) * t9395 + (((t8896 * t9255 - t8920 * t9251) * t9219 - (t8896 * t9251 + t8920 * t9255) * t9207) * t9252 - t9646 * t9440) * t9396 + (((t8895 * t9255 - t8919 * t9251) * t9218 - (t8895 * t9251 + t8919 * t9255) * t9206) * t9252 - t9647 * t9440) * t9397 + (((t8894 * t9255 - t8918 * t9251) * t9217 - (t8894 * t9251 + t8918 * t9255) * t9205) * t9252 - t9648 * t9440) * t9398 + t9343);];
taugX  = t1;
