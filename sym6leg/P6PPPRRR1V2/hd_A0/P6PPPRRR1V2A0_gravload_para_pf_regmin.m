% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P6PPPRRR1V2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d4,theta1,theta2,theta3]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x13]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 19:43
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6PPPRRR1V2A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_regmin: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPPRRR1V2A0_gravload_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 19:36:01
% EndTime: 2019-05-16 19:36:49
% DurationCPUTime: 51.98s
% Computational Cost: add. (9285->975), mult. (23562->1877), div. (504->3), fcn. (25212->50), ass. (0->595)
t4440 = xP(5);
t4405 = sin(t4440);
t4442 = koppelP(6,3);
t4408 = cos(t4440);
t4439 = xP(6);
t4404 = sin(t4439);
t4407 = cos(t4439);
t4448 = koppelP(6,2);
t4454 = koppelP(6,1);
t4513 = t4404 * t4448 - t4407 * t4454;
t4723 = t4513 * t4408;
t4215 = t4405 * t4442 - t4723;
t4421 = legFrame(6,3);
t4368 = sin(t4421);
t4380 = cos(t4421);
t4414 = sin(pkin(8));
t4418 = cos(pkin(8));
t4427 = legFrame(6,1);
t4386 = cos(t4427);
t4691 = t4386 * t4418;
t4692 = t4386 * t4414;
t4433 = legFrame(6,2);
t4398 = cos(t4433);
t4374 = sin(t4427);
t4392 = sin(t4433);
t4711 = t4374 * t4392;
t4441 = xP(4);
t4409 = cos(t4441);
t4613 = t4409 * t4454;
t4619 = t4409 * t4448;
t4406 = sin(t4441);
t4634 = t4406 * t4454;
t4640 = t4406 * t4448;
t4173 = (t4405 * t4634 + t4619) * t4407 + t4404 * (-t4405 * t4640 + t4613);
t4625 = t4408 * t4442;
t4789 = t4406 * t4625 - t4173;
t4799 = t4215 * t4711 + t4398 * t4789;
t4811 = t4380 * (t4215 * t4692 + t4418 * t4799) + t4368 * (t4215 * t4691 - t4414 * t4799);
t4443 = koppelP(5,3);
t4449 = koppelP(5,2);
t4455 = koppelP(5,1);
t4512 = t4404 * t4449 - t4407 * t4455;
t4722 = t4512 * t4408;
t4216 = t4405 * t4443 - t4722;
t4422 = legFrame(5,3);
t4369 = sin(t4422);
t4381 = cos(t4422);
t4428 = legFrame(5,1);
t4387 = cos(t4428);
t4688 = t4387 * t4418;
t4689 = t4387 * t4414;
t4434 = legFrame(5,2);
t4399 = cos(t4434);
t4375 = sin(t4428);
t4393 = sin(t4434);
t4708 = t4375 * t4393;
t4612 = t4409 * t4455;
t4618 = t4409 * t4449;
t4633 = t4406 * t4455;
t4639 = t4406 * t4449;
t4174 = (t4405 * t4633 + t4618) * t4407 + t4404 * (-t4405 * t4639 + t4612);
t4624 = t4408 * t4443;
t4790 = t4406 * t4624 - t4174;
t4798 = t4216 * t4708 + t4399 * t4790;
t4810 = t4381 * (t4216 * t4689 + t4418 * t4798) + t4369 * (t4216 * t4688 - t4414 * t4798);
t4444 = koppelP(4,3);
t4450 = koppelP(4,2);
t4456 = koppelP(4,1);
t4511 = t4404 * t4450 - t4407 * t4456;
t4721 = t4511 * t4408;
t4217 = t4405 * t4444 - t4721;
t4423 = legFrame(4,3);
t4370 = sin(t4423);
t4382 = cos(t4423);
t4429 = legFrame(4,1);
t4388 = cos(t4429);
t4685 = t4388 * t4418;
t4686 = t4388 * t4414;
t4435 = legFrame(4,2);
t4400 = cos(t4435);
t4376 = sin(t4429);
t4394 = sin(t4435);
t4705 = t4376 * t4394;
t4611 = t4409 * t4456;
t4617 = t4409 * t4450;
t4632 = t4406 * t4456;
t4638 = t4406 * t4450;
t4175 = (t4405 * t4632 + t4617) * t4407 + t4404 * (-t4405 * t4638 + t4611);
t4623 = t4408 * t4444;
t4791 = t4406 * t4623 - t4175;
t4797 = t4217 * t4705 + t4400 * t4791;
t4809 = t4382 * (t4217 * t4686 + t4418 * t4797) + t4370 * (t4217 * t4685 - t4414 * t4797);
t4445 = koppelP(3,3);
t4451 = koppelP(3,2);
t4457 = koppelP(3,1);
t4510 = t4404 * t4451 - t4407 * t4457;
t4720 = t4510 * t4408;
t4218 = t4405 * t4445 - t4720;
t4424 = legFrame(3,3);
t4371 = sin(t4424);
t4383 = cos(t4424);
t4430 = legFrame(3,1);
t4389 = cos(t4430);
t4682 = t4389 * t4418;
t4683 = t4389 * t4414;
t4436 = legFrame(3,2);
t4401 = cos(t4436);
t4377 = sin(t4430);
t4395 = sin(t4436);
t4702 = t4377 * t4395;
t4610 = t4409 * t4457;
t4616 = t4409 * t4451;
t4631 = t4406 * t4457;
t4637 = t4406 * t4451;
t4176 = (t4405 * t4631 + t4616) * t4407 + t4404 * (-t4405 * t4637 + t4610);
t4622 = t4408 * t4445;
t4792 = t4406 * t4622 - t4176;
t4796 = t4218 * t4702 + t4401 * t4792;
t4808 = t4383 * (t4218 * t4683 + t4418 * t4796) + t4371 * (t4218 * t4682 - t4414 * t4796);
t4446 = koppelP(2,3);
t4452 = koppelP(2,2);
t4458 = koppelP(2,1);
t4509 = t4404 * t4452 - t4407 * t4458;
t4719 = t4509 * t4408;
t4219 = t4405 * t4446 - t4719;
t4425 = legFrame(2,3);
t4372 = sin(t4425);
t4384 = cos(t4425);
t4431 = legFrame(2,1);
t4390 = cos(t4431);
t4679 = t4390 * t4418;
t4680 = t4390 * t4414;
t4437 = legFrame(2,2);
t4402 = cos(t4437);
t4378 = sin(t4431);
t4396 = sin(t4437);
t4699 = t4378 * t4396;
t4609 = t4409 * t4458;
t4615 = t4409 * t4452;
t4630 = t4406 * t4458;
t4636 = t4406 * t4452;
t4177 = (t4405 * t4630 + t4615) * t4407 + t4404 * (-t4405 * t4636 + t4609);
t4621 = t4408 * t4446;
t4793 = t4406 * t4621 - t4177;
t4795 = t4219 * t4699 + t4402 * t4793;
t4807 = t4384 * (t4219 * t4680 + t4418 * t4795) + t4372 * (t4219 * t4679 - t4414 * t4795);
t4447 = koppelP(1,3);
t4453 = koppelP(1,2);
t4459 = koppelP(1,1);
t4508 = t4404 * t4453 - t4407 * t4459;
t4718 = t4508 * t4408;
t4220 = t4405 * t4447 - t4718;
t4426 = legFrame(1,3);
t4373 = sin(t4426);
t4385 = cos(t4426);
t4432 = legFrame(1,1);
t4391 = cos(t4432);
t4676 = t4391 * t4418;
t4677 = t4391 * t4414;
t4438 = legFrame(1,2);
t4403 = cos(t4438);
t4379 = sin(t4432);
t4397 = sin(t4438);
t4696 = t4379 * t4397;
t4608 = t4409 * t4459;
t4614 = t4409 * t4453;
t4629 = t4406 * t4459;
t4635 = t4406 * t4453;
t4178 = (t4405 * t4629 + t4614) * t4407 + t4404 * (-t4405 * t4635 + t4608);
t4620 = t4408 * t4447;
t4788 = t4406 * t4620 - t4178;
t4794 = t4220 * t4696 + t4403 * t4788;
t4806 = t4385 * (t4220 * t4677 + t4418 * t4794) + t4373 * (t4220 * t4676 - t4414 * t4794);
t4326 = t4368 * t4418 + t4380 * t4414;
t4494 = t4398 * t4326;
t4327 = t4369 * t4418 + t4381 * t4414;
t4492 = t4399 * t4327;
t4328 = t4370 * t4418 + t4382 * t4414;
t4490 = t4400 * t4328;
t4329 = t4371 * t4418 + t4383 * t4414;
t4488 = t4401 * t4329;
t4330 = t4372 * t4418 + t4384 * t4414;
t4486 = t4402 * t4330;
t4331 = t4373 * t4418 + t4385 * t4414;
t4484 = t4403 * t4331;
t4787 = -g(2) * t4379 + g(3) * t4391;
t4786 = -g(2) * t4378 + g(3) * t4390;
t4785 = -g(2) * t4377 + g(3) * t4389;
t4784 = -g(2) * t4376 + g(3) * t4388;
t4783 = -g(2) * t4375 + g(3) * t4387;
t4782 = -g(2) * t4374 + g(3) * t4386;
t4197 = t4405 * t4513 + t4625;
t4338 = t4404 * t4454 + t4407 * t4448;
t4149 = -t4197 * t4406 + t4338 * t4409;
t4155 = t4197 * t4409 + t4338 * t4406;
t4673 = t4392 * t4418;
t4674 = t4392 * t4414;
t4781 = t4386 * ((-t4149 * t4674 + t4155 * t4418) * t4368 + (t4149 * t4673 + t4155 * t4414) * t4380) + ((-t4149 * t4414 + t4155 * t4673) * t4380 - (t4149 * t4418 + t4155 * t4674) * t4368) * t4374;
t4198 = t4405 * t4512 + t4624;
t4339 = t4404 * t4455 + t4407 * t4449;
t4150 = -t4198 * t4406 + t4339 * t4409;
t4156 = t4198 * t4409 + t4339 * t4406;
t4670 = t4393 * t4418;
t4671 = t4393 * t4414;
t4780 = t4387 * ((-t4150 * t4671 + t4156 * t4418) * t4369 + (t4150 * t4670 + t4156 * t4414) * t4381) + ((-t4150 * t4414 + t4156 * t4670) * t4381 - t4369 * (t4150 * t4418 + t4156 * t4671)) * t4375;
t4199 = t4405 * t4511 + t4623;
t4340 = t4404 * t4456 + t4407 * t4450;
t4151 = -t4199 * t4406 + t4340 * t4409;
t4157 = t4199 * t4409 + t4340 * t4406;
t4667 = t4394 * t4418;
t4668 = t4394 * t4414;
t4779 = t4388 * ((-t4151 * t4668 + t4157 * t4418) * t4370 + (t4151 * t4667 + t4157 * t4414) * t4382) + ((-t4151 * t4414 + t4157 * t4667) * t4382 - t4370 * (t4151 * t4418 + t4157 * t4668)) * t4376;
t4200 = t4405 * t4510 + t4622;
t4341 = t4404 * t4457 + t4407 * t4451;
t4152 = -t4200 * t4406 + t4341 * t4409;
t4158 = t4200 * t4409 + t4341 * t4406;
t4664 = t4395 * t4418;
t4665 = t4395 * t4414;
t4778 = t4389 * ((-t4152 * t4665 + t4158 * t4418) * t4371 + (t4152 * t4664 + t4158 * t4414) * t4383) + ((-t4152 * t4414 + t4158 * t4664) * t4383 - t4371 * (t4152 * t4418 + t4158 * t4665)) * t4377;
t4201 = t4405 * t4509 + t4621;
t4342 = t4404 * t4458 + t4407 * t4452;
t4153 = -t4201 * t4406 + t4342 * t4409;
t4159 = t4201 * t4409 + t4342 * t4406;
t4661 = t4396 * t4418;
t4662 = t4396 * t4414;
t4777 = t4390 * ((-t4153 * t4662 + t4159 * t4418) * t4372 + (t4153 * t4661 + t4159 * t4414) * t4384) + ((-t4153 * t4414 + t4159 * t4661) * t4384 - t4372 * (t4153 * t4418 + t4159 * t4662)) * t4378;
t4202 = t4405 * t4508 + t4620;
t4343 = t4404 * t4459 + t4407 * t4453;
t4154 = -t4202 * t4406 + t4343 * t4409;
t4160 = t4202 * t4409 + t4343 * t4406;
t4658 = t4397 * t4418;
t4659 = t4397 * t4414;
t4776 = t4391 * ((-t4154 * t4659 + t4160 * t4418) * t4373 + (t4154 * t4658 + t4160 * t4414) * t4385) + ((-t4154 * t4414 + t4160 * t4658) * t4385 - (t4154 * t4418 + t4160 * t4659) * t4373) * t4379;
t4775 = g(1) * t4414;
t4774 = g(1) * t4418;
t4767 = g(2) * t4414;
t4413 = sin(pkin(9));
t4760 = g(3) * t4413;
t4209 = g(1) * t4392 + t4398 * t4782;
t4420 = cos(pkin(4));
t4753 = t4209 * t4420;
t4210 = g(1) * t4393 + t4399 * t4783;
t4752 = t4210 * t4420;
t4211 = g(1) * t4394 + t4400 * t4784;
t4751 = t4211 * t4420;
t4212 = g(1) * t4395 + t4401 * t4785;
t4750 = t4212 * t4420;
t4213 = g(1) * t4396 + t4402 * t4786;
t4749 = t4213 * t4420;
t4214 = g(1) * t4397 + t4403 * t4787;
t4748 = t4214 * t4420;
t4417 = cos(pkin(9));
t4601 = t4417 * t4420;
t4306 = t4413 * t4418 + t4414 * t4601;
t4747 = t4306 * t4392;
t4746 = t4306 * t4393;
t4745 = t4306 * t4394;
t4744 = t4306 * t4395;
t4743 = t4306 * t4396;
t4742 = t4306 * t4397;
t4307 = t4413 * t4414 - t4418 * t4601;
t4741 = t4307 * t4392;
t4740 = t4307 * t4393;
t4739 = t4307 * t4394;
t4738 = t4307 * t4395;
t4737 = t4307 * t4396;
t4736 = t4307 * t4397;
t4320 = t4368 * t4414 - t4418 * t4380;
t4735 = t4320 * t4398;
t4734 = t4320 * t4420;
t4321 = t4369 * t4414 - t4418 * t4381;
t4733 = t4321 * t4399;
t4732 = t4321 * t4420;
t4322 = t4370 * t4414 - t4418 * t4382;
t4731 = t4322 * t4400;
t4730 = t4322 * t4420;
t4323 = t4371 * t4414 - t4418 * t4383;
t4729 = t4323 * t4401;
t4728 = t4323 * t4420;
t4324 = t4372 * t4414 - t4418 * t4384;
t4727 = t4324 * t4402;
t4726 = t4324 * t4420;
t4325 = t4373 * t4414 - t4418 * t4385;
t4725 = t4325 * t4403;
t4724 = t4325 * t4420;
t4710 = t4374 * t4414;
t4709 = t4374 * t4418;
t4707 = t4375 * t4414;
t4706 = t4375 * t4418;
t4704 = t4376 * t4414;
t4703 = t4376 * t4418;
t4701 = t4377 * t4414;
t4700 = t4377 * t4418;
t4698 = t4378 * t4414;
t4697 = t4378 * t4418;
t4695 = t4379 * t4414;
t4694 = t4379 * t4418;
t4693 = t4386 * t4392;
t4690 = t4387 * t4393;
t4687 = t4388 * t4394;
t4684 = t4389 * t4395;
t4681 = t4390 * t4396;
t4678 = t4391 * t4397;
t4675 = t4392 * t4413;
t4672 = t4393 * t4413;
t4669 = t4394 * t4413;
t4666 = t4395 * t4413;
t4663 = t4396 * t4413;
t4660 = t4397 * t4413;
t4657 = t4398 * t4413;
t4416 = sin(pkin(4));
t4656 = t4398 * t4416;
t4655 = t4399 * t4413;
t4654 = t4399 * t4416;
t4653 = t4400 * t4413;
t4652 = t4400 * t4416;
t4651 = t4401 * t4413;
t4650 = t4401 * t4416;
t4649 = t4402 * t4413;
t4648 = t4402 * t4416;
t4647 = t4403 * t4413;
t4646 = t4403 * t4416;
t4645 = t4404 * t4406;
t4644 = t4404 * t4408;
t4643 = t4404 * t4409;
t4642 = t4406 * t4407;
t4641 = t4406 * t4408;
t4628 = t4407 * t4408;
t4627 = t4407 * t4409;
t4626 = t4408 * t4409;
t4410 = 0.1e1 / t4413;
t4415 = sin(pkin(5));
t4411 = 0.1e1 / t4415;
t4607 = t4410 * t4411;
t4606 = t4410 / t4416;
t4605 = t4413 * t4416;
t4604 = t4413 * t4420;
t4603 = t4416 * t4417;
t4419 = cos(pkin(5));
t4602 = t4416 * t4419;
t4600 = g(2) * t4601;
t4599 = g(3) * t4601;
t4598 = t4209 * t4606;
t4597 = t4210 * t4606;
t4596 = t4211 * t4606;
t4595 = t4212 * t4606;
t4594 = t4213 * t4606;
t4593 = t4214 * t4606;
t4591 = t4392 * t4601;
t4589 = t4393 * t4601;
t4587 = t4394 * t4601;
t4585 = t4395 * t4601;
t4583 = t4396 * t4601;
t4581 = t4397 * t4601;
t4580 = t4398 * t4601;
t4579 = t4399 * t4601;
t4578 = t4400 * t4601;
t4577 = t4401 * t4601;
t4576 = t4402 * t4601;
t4575 = t4403 * t4601;
t4568 = t4411 * t4606;
t4364 = t4414 * g(3);
t4365 = t4418 * g(3);
t4366 = t4418 * g(2);
t4561 = ((((g(3) * t4674 + t4366) * t4380 + t4368 * (g(3) * t4673 - t4767)) * t4386 + ((-g(2) * t4674 + t4365) * t4374 - t4398 * t4775) * t4380 - ((g(2) * t4673 + t4364) * t4374 + t4398 * t4774) * t4368) * t4416 - t4753) * t4568;
t4560 = ((((g(3) * t4671 + t4366) * t4381 + t4369 * (g(3) * t4670 - t4767)) * t4387 + ((-g(2) * t4671 + t4365) * t4375 - t4399 * t4775) * t4381 - ((g(2) * t4670 + t4364) * t4375 + t4399 * t4774) * t4369) * t4416 - t4752) * t4568;
t4559 = ((((g(3) * t4668 + t4366) * t4382 + t4370 * (g(3) * t4667 - t4767)) * t4388 + ((-g(2) * t4668 + t4365) * t4376 - t4400 * t4775) * t4382 - ((g(2) * t4667 + t4364) * t4376 + t4400 * t4774) * t4370) * t4416 - t4751) * t4568;
t4558 = ((((g(3) * t4665 + t4366) * t4383 + t4371 * (g(3) * t4664 - t4767)) * t4389 + ((-g(2) * t4665 + t4365) * t4377 - t4401 * t4775) * t4383 - ((g(2) * t4664 + t4364) * t4377 + t4401 * t4774) * t4371) * t4416 - t4750) * t4568;
t4557 = ((((g(3) * t4662 + t4366) * t4384 + t4372 * (g(3) * t4661 - t4767)) * t4390 + ((-g(2) * t4662 + t4365) * t4378 - t4402 * t4775) * t4384 - ((g(2) * t4661 + t4364) * t4378 + t4402 * t4774) * t4372) * t4416 - t4749) * t4568;
t4556 = ((((g(3) * t4659 + t4366) * t4385 + t4373 * (g(3) * t4658 - t4767)) * t4391 + ((-g(2) * t4659 + t4365) * t4379 - t4403 * t4775) * t4385 - ((g(2) * t4658 + t4364) * t4379 + t4403 * t4774) * t4373) * t4416 - t4748) * t4568;
t4179 = -(t4405 * t4619 + t4634) * t4404 + (t4405 * t4613 - t4640) * t4407;
t4119 = t4409 * t4625 - t4179;
t4180 = -(t4405 * t4618 + t4633) * t4404 + (t4405 * t4612 - t4639) * t4407;
t4120 = t4409 * t4624 - t4180;
t4181 = -(t4405 * t4617 + t4632) * t4404 + (t4405 * t4611 - t4638) * t4407;
t4121 = t4409 * t4623 - t4181;
t4182 = -(t4405 * t4616 + t4631) * t4404 + (t4405 * t4610 - t4637) * t4407;
t4122 = t4409 * t4622 - t4182;
t4183 = -(t4405 * t4615 + t4630) * t4404 + (t4405 * t4609 - t4636) * t4407;
t4123 = t4409 * t4621 - t4183;
t4184 = -(t4405 * t4614 + t4629) * t4404 + (t4405 * t4608 - t4635) * t4407;
t4124 = t4409 * t4620 - t4184;
t4549 = t4320 * t4693 + t4374 * t4326;
t4548 = t4321 * t4690 + t4375 * t4327;
t4547 = t4322 * t4687 + t4376 * t4328;
t4546 = t4323 * t4684 + t4377 * t4329;
t4545 = t4324 * t4681 + t4378 * t4330;
t4544 = t4325 * t4678 + t4379 * t4331;
t4246 = -t4374 * t4674 + t4691;
t4258 = t4374 * t4673 + t4692;
t4537 = t4246 * t4380 - t4258 * t4368;
t4247 = t4386 * t4674 + t4709;
t4259 = t4386 * t4673 - t4710;
t4536 = -t4247 * t4380 - t4259 * t4368;
t4248 = -t4375 * t4671 + t4688;
t4260 = t4375 * t4670 + t4689;
t4535 = t4248 * t4381 - t4260 * t4369;
t4249 = t4387 * t4671 + t4706;
t4261 = t4387 * t4670 - t4707;
t4534 = -t4249 * t4381 - t4261 * t4369;
t4250 = -t4376 * t4668 + t4685;
t4262 = t4376 * t4667 + t4686;
t4533 = t4250 * t4382 - t4262 * t4370;
t4251 = t4388 * t4668 + t4703;
t4263 = t4388 * t4667 - t4704;
t4532 = -t4251 * t4382 - t4263 * t4370;
t4252 = -t4377 * t4665 + t4682;
t4264 = t4377 * t4664 + t4683;
t4531 = t4252 * t4383 - t4264 * t4371;
t4253 = t4389 * t4665 + t4700;
t4265 = t4389 * t4664 - t4701;
t4530 = -t4253 * t4383 - t4265 * t4371;
t4254 = -t4378 * t4662 + t4679;
t4266 = t4378 * t4661 + t4680;
t4529 = t4254 * t4384 - t4266 * t4372;
t4255 = t4390 * t4662 + t4697;
t4267 = t4390 * t4661 - t4698;
t4528 = -t4255 * t4384 - t4267 * t4372;
t4256 = -t4379 * t4659 + t4676;
t4268 = t4379 * t4658 + t4677;
t4527 = t4256 * t4385 - t4268 * t4373;
t4257 = t4391 * t4659 + t4694;
t4269 = t4391 * t4658 - t4695;
t4526 = -t4257 * t4385 - t4269 * t4373;
t4525 = t4306 * t4380 - t4307 * t4368;
t4524 = t4306 * t4368 + t4307 * t4380;
t4523 = t4306 * t4381 - t4307 * t4369;
t4522 = t4306 * t4369 + t4307 * t4381;
t4521 = t4306 * t4382 - t4307 * t4370;
t4520 = t4306 * t4370 + t4307 * t4382;
t4519 = t4306 * t4383 - t4307 * t4371;
t4518 = t4306 * t4371 + t4307 * t4383;
t4517 = t4306 * t4384 - t4307 * t4372;
t4516 = t4306 * t4372 + t4307 * t4384;
t4515 = t4306 * t4385 - t4307 * t4373;
t4514 = t4306 * t4373 + t4307 * t4385;
t4125 = t4197 * t4674 + t4338 * t4418;
t4137 = t4197 * t4673 - t4338 * t4414;
t4009 = t4197 * t4656 + (t4125 * t4380 + t4137 * t4368) * t4420;
t4126 = t4198 * t4671 + t4339 * t4418;
t4138 = t4198 * t4670 - t4339 * t4414;
t4010 = t4198 * t4654 + (t4126 * t4381 + t4138 * t4369) * t4420;
t4127 = t4199 * t4668 + t4340 * t4418;
t4139 = t4199 * t4667 - t4340 * t4414;
t4011 = t4199 * t4652 + (t4127 * t4382 + t4139 * t4370) * t4420;
t4128 = t4200 * t4665 + t4341 * t4418;
t4140 = t4200 * t4664 - t4341 * t4414;
t4012 = t4200 * t4650 + (t4128 * t4383 + t4140 * t4371) * t4420;
t4129 = t4201 * t4662 + t4342 * t4418;
t4141 = t4201 * t4661 - t4342 * t4414;
t4013 = t4201 * t4648 + (t4129 * t4384 + t4141 * t4372) * t4420;
t4130 = t4202 * t4659 + t4343 * t4418;
t4142 = t4202 * t4658 - t4343 * t4414;
t4014 = t4202 * t4646 + (t4130 * t4385 + t4142 * t4373) * t4420;
t4131 = t4197 * t4418 - t4338 * t4674;
t4143 = t4197 * t4414 + t4338 * t4673;
t4033 = -t4338 * t4656 + (t4131 * t4380 - t4143 * t4368) * t4420;
t4132 = t4198 * t4418 - t4339 * t4671;
t4144 = t4198 * t4414 + t4339 * t4670;
t4034 = -t4339 * t4654 + (t4132 * t4381 - t4144 * t4369) * t4420;
t4133 = t4199 * t4418 - t4340 * t4668;
t4145 = t4199 * t4414 + t4340 * t4667;
t4035 = -t4340 * t4652 + (t4133 * t4382 - t4145 * t4370) * t4420;
t4134 = t4200 * t4418 - t4341 * t4665;
t4146 = t4200 * t4414 + t4341 * t4664;
t4036 = -t4341 * t4650 + (t4134 * t4383 - t4146 * t4371) * t4420;
t4135 = t4201 * t4418 - t4342 * t4662;
t4147 = t4201 * t4414 + t4342 * t4661;
t4037 = -t4342 * t4648 + (t4135 * t4384 - t4147 * t4372) * t4420;
t4136 = t4202 * t4418 - t4343 * t4659;
t4148 = t4202 * t4414 + t4343 * t4658;
t4038 = -t4343 * t4646 + (t4136 * t4385 - t4148 * t4373) * t4420;
t4045 = -t4125 * t4368 + t4137 * t4380;
t4046 = -t4126 * t4369 + t4138 * t4381;
t4047 = -t4127 * t4370 + t4139 * t4382;
t4048 = -t4128 * t4371 + t4140 * t4383;
t4049 = -t4129 * t4372 + t4141 * t4384;
t4050 = -t4130 * t4373 + t4142 * t4385;
t4051 = t4131 * t4368 + t4143 * t4380;
t4052 = t4132 * t4369 + t4144 * t4381;
t4053 = t4133 * t4370 + t4145 * t4382;
t4054 = t4134 * t4371 + t4146 * t4383;
t4055 = t4135 * t4372 + t4147 * t4384;
t4056 = t4136 * t4373 + t4148 * t4385;
t4507 = -(((-t4014 * t4406 - t4038 * t4409) * t4391 + t4379 * (t4014 * t4409 - t4038 * t4406)) * t4413 - t4417 * ((-t4050 * t4406 + t4056 * t4409) * t4391 + (t4050 * t4409 + t4056 * t4406) * t4379)) * t4593 - (((-t4013 * t4406 - t4037 * t4409) * t4390 + t4378 * (t4013 * t4409 - t4037 * t4406)) * t4413 - t4417 * ((-t4049 * t4406 + t4055 * t4409) * t4390 + (t4049 * t4409 + t4055 * t4406) * t4378)) * t4594 - (((-t4012 * t4406 - t4036 * t4409) * t4389 + t4377 * (t4012 * t4409 - t4036 * t4406)) * t4413 - t4417 * ((-t4048 * t4406 + t4054 * t4409) * t4389 + (t4048 * t4409 + t4054 * t4406) * t4377)) * t4595 - (((-t4011 * t4406 - t4035 * t4409) * t4388 + t4376 * (t4011 * t4409 - t4035 * t4406)) * t4413 - t4417 * ((-t4047 * t4406 + t4053 * t4409) * t4388 + (t4047 * t4409 + t4053 * t4406) * t4376)) * t4596 - (((-t4010 * t4406 - t4034 * t4409) * t4387 + t4375 * (t4010 * t4409 - t4034 * t4406)) * t4413 - t4417 * ((-t4046 * t4406 + t4052 * t4409) * t4387 + (t4046 * t4409 + t4052 * t4406) * t4375)) * t4597 - (((-t4009 * t4406 - t4033 * t4409) * t4386 + t4374 * (t4009 * t4409 - t4033 * t4406)) * t4413 - t4417 * ((-t4045 * t4406 + t4051 * t4409) * t4386 + (t4045 * t4409 + t4051 * t4406) * t4374)) * t4598;
t4478 = t4408 * t4484;
t4479 = t4408 * t4486;
t4480 = t4408 * t4488;
t4481 = t4408 * t4490;
t4482 = t4408 * t4492;
t4483 = t4408 * t4494;
t4485 = t4403 * t4220;
t4487 = t4402 * t4219;
t4489 = t4401 * t4218;
t4491 = t4400 * t4217;
t4493 = t4399 * t4216;
t4495 = t4398 * t4215;
t4506 = -(-t4417 * (t4788 * t4725 - (t4256 * t4373 + t4268 * t4385) * t4220) + (-t4379 * t4485 + t4397 * t4788) * t4605 + (-t4527 * t4718 + t4178 * t4484 + (t4405 * t4527 - t4406 * t4478) * t4447) * t4604) * t4593 - (-t4417 * (t4793 * t4727 - (t4254 * t4372 + t4266 * t4384) * t4219) + (-t4378 * t4487 + t4396 * t4793) * t4605 + (-t4529 * t4719 + t4177 * t4486 + (t4405 * t4529 - t4406 * t4479) * t4446) * t4604) * t4594 - (-t4417 * (t4792 * t4729 - (t4252 * t4371 + t4264 * t4383) * t4218) + (-t4377 * t4489 + t4395 * t4792) * t4605 + (-t4531 * t4720 + t4176 * t4488 + (t4405 * t4531 - t4406 * t4480) * t4445) * t4604) * t4595 - (-t4417 * (t4791 * t4731 - (t4250 * t4370 + t4262 * t4382) * t4217) + (-t4376 * t4491 + t4394 * t4791) * t4605 + (-t4533 * t4721 + t4175 * t4490 + (t4405 * t4533 - t4406 * t4481) * t4444) * t4604) * t4596 - (-t4417 * (t4790 * t4733 - (t4248 * t4369 + t4260 * t4381) * t4216) + (-t4375 * t4493 + t4393 * t4790) * t4605 + (-t4535 * t4722 + t4174 * t4492 + (t4405 * t4535 - t4406 * t4482) * t4443) * t4604) * t4597 - (-t4417 * (t4789 * t4735 - (t4246 * t4368 + t4258 * t4380) * t4215) + (-t4374 * t4495 + t4392 * t4789) * t4605 + (-t4537 * t4723 + t4173 * t4494 + (t4405 * t4537 - t4406 * t4483) * t4442) * t4604) * t4598;
t4505 = -(t4417 * (-t4124 * t4725 + (-t4257 * t4373 + t4269 * t4385) * t4220) + (t4124 * t4397 - t4391 * t4485) * t4605 + (-t4526 * t4718 + t4184 * t4484 + (t4405 * t4526 - t4409 * t4478) * t4447) * t4604) * t4593 - (t4417 * (-t4123 * t4727 + (-t4255 * t4372 + t4267 * t4384) * t4219) + (t4123 * t4396 - t4390 * t4487) * t4605 + (-t4528 * t4719 + t4183 * t4486 + (t4405 * t4528 - t4409 * t4479) * t4446) * t4604) * t4594 - (t4417 * (-t4122 * t4729 + (-t4253 * t4371 + t4265 * t4383) * t4218) + (t4122 * t4395 - t4389 * t4489) * t4605 + (-t4530 * t4720 + t4182 * t4488 + (t4405 * t4530 - t4409 * t4480) * t4445) * t4604) * t4595 - (t4417 * (-t4121 * t4731 + (-t4251 * t4370 + t4263 * t4382) * t4217) + (t4121 * t4394 - t4388 * t4491) * t4605 + (-t4532 * t4721 + t4181 * t4490 + (t4405 * t4532 - t4409 * t4481) * t4444) * t4604) * t4596 - (t4417 * (-t4120 * t4733 + (-t4249 * t4369 + t4261 * t4381) * t4216) + (t4120 * t4393 - t4387 * t4493) * t4605 + (-t4534 * t4722 + t4180 * t4492 + (t4405 * t4534 - t4409 * t4482) * t4443) * t4604) * t4597 - (t4417 * (-t4119 * t4735 + (-t4247 * t4368 + t4259 * t4380) * t4215) + (t4119 * t4392 - t4386 * t4495) * t4605 + (-t4536 * t4723 + t4179 * t4494 + (t4405 * t4536 - t4409 * t4483) * t4442) * t4604) * t4598;
t4191 = t4326 * t4392 * t4420 + t4656;
t4192 = t4327 * t4393 * t4420 + t4654;
t4193 = t4328 * t4394 * t4420 + t4652;
t4194 = t4329 * t4395 * t4420 + t4650;
t4195 = t4330 * t4396 * t4420 + t4648;
t4196 = t4331 * t4397 * t4420 + t4646;
t4504 = -((t4196 * t4391 - t4379 * t4724) * t4413 + t4417 * t4544) * t4593 - ((t4195 * t4390 - t4378 * t4726) * t4413 + t4417 * t4545) * t4594 - ((t4194 * t4389 - t4377 * t4728) * t4413 + t4417 * t4546) * t4595 - ((t4193 * t4388 - t4376 * t4730) * t4413 + t4417 * t4547) * t4596 - ((t4192 * t4387 - t4375 * t4732) * t4413 + t4417 * t4548) * t4597 - ((t4191 * t4386 - t4374 * t4734) * t4413 + t4417 * t4549) * t4598;
t4496 = t4325 * t4696 - t4331 * t4391;
t4497 = t4324 * t4699 - t4330 * t4390;
t4498 = t4323 * t4702 - t4329 * t4389;
t4499 = t4322 * t4705 - t4328 * t4388;
t4500 = t4321 * t4708 - t4327 * t4387;
t4501 = t4320 * t4711 - t4326 * t4386;
t4503 = -((-t4196 * t4379 - t4391 * t4724) * t4413 - t4496 * t4417) * t4593 - ((-t4195 * t4378 - t4390 * t4726) * t4413 - t4497 * t4417) * t4594 - ((-t4194 * t4377 - t4389 * t4728) * t4413 - t4498 * t4417) * t4595 - ((-t4193 * t4376 - t4388 * t4730) * t4413 - t4499 * t4417) * t4596 - ((-t4192 * t4375 - t4387 * t4732) * t4413 - t4500 * t4417) * t4597 - ((-t4191 * t4374 - t4386 * t4734) * t4413 - t4501 * t4417) * t4598;
t4502 = -((-t4325 * t4417 - t4331 * t4604) * t4403 + t4397 * t4605) * t4593 - ((-t4324 * t4417 - t4330 * t4604) * t4402 + t4396 * t4605) * t4594 - ((-t4323 * t4417 - t4329 * t4604) * t4401 + t4395 * t4605) * t4595 - ((-t4322 * t4417 - t4328 * t4604) * t4400 + t4394 * t4605) * t4596 - ((-t4321 * t4417 - t4327 * t4604) * t4399 + t4393 * t4605) * t4597 - ((-t4320 * t4417 - t4326 * t4604) * t4398 + t4392 * t4605) * t4598;
t4477 = g(1) * t4657 - (-g(2) * t4675 + t4599) * t4374 - (g(3) * t4675 + t4600) * t4386;
t4476 = g(1) * t4655 - (-g(2) * t4672 + t4599) * t4375 - (g(3) * t4672 + t4600) * t4387;
t4475 = g(1) * t4653 - (-g(2) * t4669 + t4599) * t4376 - (g(3) * t4669 + t4600) * t4388;
t4474 = g(1) * t4651 - (-g(2) * t4666 + t4599) * t4377 - (g(3) * t4666 + t4600) * t4389;
t4473 = g(1) * t4649 - (-g(2) * t4663 + t4599) * t4378 - (g(3) * t4663 + t4600) * t4390;
t4472 = g(1) * t4647 - (-g(2) * t4660 + t4599) * t4379 - (g(3) * t4660 + t4600) * t4391;
t4367 = g(2) * t4413;
t4471 = g(1) * t4580 - (g(3) * t4591 - t4367) * t4386 + (g(2) * t4591 + t4760) * t4374;
t4470 = g(1) * t4579 - (g(3) * t4589 - t4367) * t4387 + (g(2) * t4589 + t4760) * t4375;
t4469 = g(1) * t4578 - (g(3) * t4587 - t4367) * t4388 + (g(2) * t4587 + t4760) * t4376;
t4468 = g(1) * t4577 - (g(3) * t4585 - t4367) * t4389 + (g(2) * t4585 + t4760) * t4377;
t4467 = g(1) * t4576 - (g(3) * t4583 - t4367) * t4390 + (g(2) * t4583 + t4760) * t4378;
t4466 = g(1) * t4575 - (g(3) * t4581 - t4367) * t4391 + (g(2) * t4581 + t4760) * t4379;
t4465 = ((((-t4154 * t4736 + t4160 * t4306) * t4385 + (-t4154 * t4742 - t4160 * t4307) * t4373) * t4391 + t4379 * ((-t4154 * t4306 - t4160 * t4736) * t4385 - (-t4154 * t4307 + t4160 * t4742) * t4373)) * t4415 + t4776 * t4602) * t4556 + ((((-t4153 * t4737 + t4159 * t4306) * t4384 + (-t4153 * t4743 - t4159 * t4307) * t4372) * t4390 + t4378 * ((-t4153 * t4306 - t4159 * t4737) * t4384 - (-t4153 * t4307 + t4159 * t4743) * t4372)) * t4415 + t4777 * t4602) * t4557 + ((((-t4152 * t4738 + t4158 * t4306) * t4383 + (-t4152 * t4744 - t4158 * t4307) * t4371) * t4389 + t4377 * ((-t4152 * t4306 - t4158 * t4738) * t4383 - (-t4152 * t4307 + t4158 * t4744) * t4371)) * t4415 + t4778 * t4602) * t4558 + ((((-t4151 * t4739 + t4157 * t4306) * t4382 + (-t4151 * t4745 - t4157 * t4307) * t4370) * t4388 + t4376 * ((-t4151 * t4306 - t4157 * t4739) * t4382 - (-t4151 * t4307 + t4157 * t4745) * t4370)) * t4415 + t4779 * t4602) * t4559 + ((((-t4150 * t4740 + t4156 * t4306) * t4381 + (-t4150 * t4746 - t4156 * t4307) * t4369) * t4387 + t4375 * ((-t4150 * t4306 - t4156 * t4740) * t4381 - (-t4150 * t4307 + t4156 * t4746) * t4369)) * t4415 + t4780 * t4602) * t4560 + ((((-t4149 * t4741 + t4155 * t4306) * t4380 + (-t4149 * t4747 - t4155 * t4307) * t4368) * t4386 + t4374 * ((-t4149 * t4306 - t4155 * t4741) * t4380 - (-t4149 * t4307 + t4155 * t4747) * t4368)) * t4415 + t4781 * t4602) * t4561 + t4507;
t4057 = -t4789 * t4580 - t4215 * (t4374 * t4591 + t4386 * t4413);
t4058 = -t4790 * t4579 - t4216 * (t4375 * t4589 + t4387 * t4413);
t4059 = -t4791 * t4578 - t4217 * (t4376 * t4587 + t4388 * t4413);
t4060 = -t4792 * t4577 - t4218 * (t4377 * t4585 + t4389 * t4413);
t4061 = -t4793 * t4576 - t4219 * (t4378 * t4583 + t4390 * t4413);
t4062 = -t4788 * t4575 - t4220 * (t4379 * t4581 + t4391 * t4413);
t4081 = -t4789 * t4657 + t4215 * (-t4374 * t4675 + t4386 * t4601);
t4082 = -t4790 * t4655 + t4216 * (-t4375 * t4672 + t4387 * t4601);
t4083 = -t4791 * t4653 + t4217 * (-t4376 * t4669 + t4388 * t4601);
t4084 = -t4792 * t4651 + t4218 * (-t4377 * t4666 + t4389 * t4601);
t4085 = -t4793 * t4649 + t4219 * (-t4378 * t4663 + t4390 * t4601);
t4086 = -t4788 * t4647 + t4220 * (-t4379 * t4660 + t4391 * t4601);
t4464 = (((t4062 * t4418 - t4086 * t4414) * t4385 - (t4062 * t4414 + t4086 * t4418) * t4373) * t4415 - t4806 * t4602) * t4556 + (((t4061 * t4418 - t4085 * t4414) * t4384 - (t4061 * t4414 + t4085 * t4418) * t4372) * t4415 - t4807 * t4602) * t4557 + (((t4060 * t4418 - t4084 * t4414) * t4383 - (t4060 * t4414 + t4084 * t4418) * t4371) * t4415 - t4808 * t4602) * t4558 + (((t4059 * t4418 - t4083 * t4414) * t4382 - (t4059 * t4414 + t4083 * t4418) * t4370) * t4415 - t4809 * t4602) * t4559 + (((t4058 * t4418 - t4082 * t4414) * t4381 - (t4058 * t4414 + t4082 * t4418) * t4369) * t4415 - t4810 * t4602) * t4560 + (((t4057 * t4418 - t4081 * t4414) * t4380 - (t4057 * t4414 + t4081 * t4418) * t4368) * t4415 - t4811 * t4602) * t4561 + t4506;
t4099 = t4119 * t4398 + t4215 * t4693;
t3991 = (t4099 * t4418 - t4215 * t4710) * t4380 - t4368 * (t4099 * t4414 + t4215 * t4709);
t4100 = t4120 * t4399 + t4216 * t4690;
t3992 = (t4100 * t4418 - t4216 * t4707) * t4381 - t4369 * (t4100 * t4414 + t4216 * t4706);
t4101 = t4121 * t4400 + t4217 * t4687;
t3993 = (t4101 * t4418 - t4217 * t4704) * t4382 - t4370 * (t4101 * t4414 + t4217 * t4703);
t4102 = t4122 * t4401 + t4218 * t4684;
t3994 = (t4102 * t4418 - t4218 * t4701) * t4383 - t4371 * (t4102 * t4414 + t4218 * t4700);
t4103 = t4123 * t4402 + t4219 * t4681;
t3995 = (t4103 * t4418 - t4219 * t4698) * t4384 - t4372 * (t4103 * t4414 + t4219 * t4697);
t4104 = t4124 * t4403 + t4220 * t4678;
t3996 = (t4104 * t4418 - t4220 * t4695) * t4385 - t4373 * (t4104 * t4414 + t4220 * t4694);
t4063 = t4119 * t4580 + t4215 * (-t4374 * t4413 + t4386 * t4591);
t4064 = t4120 * t4579 + t4216 * (-t4375 * t4413 + t4387 * t4589);
t4065 = t4121 * t4578 + t4217 * (-t4376 * t4413 + t4388 * t4587);
t4066 = t4122 * t4577 + t4218 * (-t4377 * t4413 + t4389 * t4585);
t4067 = t4123 * t4576 + t4219 * (-t4378 * t4413 + t4390 * t4583);
t4068 = t4124 * t4575 + t4220 * (-t4379 * t4413 + t4391 * t4581);
t4087 = t4119 * t4657 + t4215 * (t4374 * t4601 + t4386 * t4675);
t4088 = t4120 * t4655 + t4216 * (t4375 * t4601 + t4387 * t4672);
t4089 = t4121 * t4653 + t4217 * (t4376 * t4601 + t4388 * t4669);
t4090 = t4122 * t4651 + t4218 * (t4377 * t4601 + t4389 * t4666);
t4091 = t4123 * t4649 + t4219 * (t4378 * t4601 + t4390 * t4663);
t4092 = t4124 * t4647 + t4220 * (t4379 * t4601 + t4391 * t4660);
t4463 = (((-t4068 * t4418 + t4092 * t4414) * t4385 + (t4068 * t4414 + t4092 * t4418) * t4373) * t4415 - t3996 * t4602) * t4556 + (((-t4067 * t4418 + t4091 * t4414) * t4384 + (t4067 * t4414 + t4091 * t4418) * t4372) * t4415 - t3995 * t4602) * t4557 + (((-t4066 * t4418 + t4090 * t4414) * t4383 + (t4066 * t4414 + t4090 * t4418) * t4371) * t4415 - t3994 * t4602) * t4558 + (((-t4065 * t4418 + t4089 * t4414) * t4382 + (t4065 * t4414 + t4089 * t4418) * t4370) * t4415 - t3993 * t4602) * t4559 + (((-t4064 * t4418 + t4088 * t4414) * t4381 + (t4064 * t4414 + t4088 * t4418) * t4369) * t4415 - t3992 * t4602) * t4560 + (((-t4063 * t4418 + t4087 * t4414) * t4380 + (t4063 * t4414 + t4087 * t4418) * t4368) * t4415 - t3991 * t4602) * t4561 + t4505;
t4462 = ((-t4379 * t4515 - t4514 * t4678) * t4415 - t4544 * t4602) * t4556 + ((-t4378 * t4517 - t4516 * t4681) * t4415 - t4545 * t4602) * t4557 + ((-t4377 * t4519 - t4518 * t4684) * t4415 - t4546 * t4602) * t4558 + ((-t4376 * t4521 - t4520 * t4687) * t4415 - t4547 * t4602) * t4559 + ((-t4375 * t4523 - t4522 * t4690) * t4415 - t4548 * t4602) * t4560 + ((-t4374 * t4525 - t4524 * t4693) * t4415 - t4549 * t4602) * t4561 + t4504;
t4461 = ((-t4391 * t4515 + t4514 * t4696) * t4415 + t4496 * t4602) * t4556 + ((-t4390 * t4517 + t4516 * t4699) * t4415 + t4497 * t4602) * t4557 + ((-t4389 * t4519 + t4518 * t4702) * t4415 + t4498 * t4602) * t4558 + ((-t4388 * t4521 + t4520 * t4705) * t4415 + t4499 * t4602) * t4559 + ((-t4387 * t4523 + t4522 * t4708) * t4415 + t4500 * t4602) * t4560 + ((-t4386 * t4525 + t4524 * t4711) * t4415 + t4501 * t4602) * t4561 + t4503;
t4460 = (t4325 * t4602 + t4415 * t4514) * t4403 * t4556 + (t4324 * t4602 + t4415 * t4516) * t4402 * t4557 + (t4323 * t4602 + t4415 * t4518) * t4401 * t4558 + (t4322 * t4602 + t4415 * t4520) * t4400 * t4559 + (t4321 * t4602 + t4415 * t4522) * t4399 * t4560 + (t4320 * t4602 + t4415 * t4524) * t4398 * t4561 + t4502;
t4349 = g(2) * t4391 + g(3) * t4379;
t4348 = g(2) * t4390 + g(3) * t4378;
t4347 = g(2) * t4389 + g(3) * t4377;
t4346 = g(2) * t4388 + g(3) * t4376;
t4345 = g(2) * t4387 + g(3) * t4375;
t4344 = g(2) * t4386 + g(3) * t4374;
t4245 = -t4405 * t4627 + t4645;
t4244 = t4405 * t4643 + t4642;
t4243 = t4405 * t4642 + t4643;
t4242 = -t4405 * t4645 + t4627;
t4221 = g(1) * t4405 - g(2) * t4641 + g(3) * t4626;
t4208 = g(1) * t4403 - t4397 * t4787;
t4207 = g(1) * t4402 - t4396 * t4786;
t4206 = g(1) * t4401 - t4395 * t4785;
t4205 = g(1) * t4400 - t4394 * t4784;
t4204 = g(1) * t4399 - t4393 * t4783;
t4203 = g(1) * t4398 - t4392 * t4782;
t4112 = g(1) * t4628 + g(2) * t4243 + g(3) * t4245;
t4111 = g(1) * t4644 - t4242 * g(2) - t4244 * g(3);
t3978 = ((-t4414 * t4467 - t4418 * t4473) * t4384 + (t4414 * t4473 - t4418 * t4467) * t4372 + t4213 * t4603) * t4415 - t4419 * (t4749 + ((t4207 * t4414 - t4348 * t4418) * t4384 + (t4207 * t4418 + t4348 * t4414) * t4372) * t4416);
t3977 = ((-t4414 * t4468 - t4418 * t4474) * t4383 + (t4414 * t4474 - t4418 * t4468) * t4371 + t4212 * t4603) * t4415 - t4419 * (t4750 + ((t4206 * t4414 - t4347 * t4418) * t4383 + (t4206 * t4418 + t4347 * t4414) * t4371) * t4416);
t3976 = ((-t4414 * t4469 - t4418 * t4475) * t4382 + (t4414 * t4475 - t4418 * t4469) * t4370 + t4211 * t4603) * t4415 - t4419 * (t4751 + ((t4205 * t4414 - t4346 * t4418) * t4382 + (t4205 * t4418 + t4346 * t4414) * t4370) * t4416);
t3975 = ((-t4414 * t4470 - t4418 * t4476) * t4381 + (t4414 * t4476 - t4418 * t4470) * t4369 + t4210 * t4603) * t4415 - t4419 * (t4752 + ((t4204 * t4414 - t4345 * t4418) * t4381 + (t4204 * t4418 + t4345 * t4414) * t4369) * t4416);
t3974 = ((-t4414 * t4466 - t4418 * t4472) * t4385 + (t4414 * t4472 - t4418 * t4466) * t4373 + t4214 * t4603) * t4415 - t4419 * (t4748 + ((t4208 * t4414 - t4349 * t4418) * t4385 + (t4208 * t4418 + t4349 * t4414) * t4373) * t4416);
t3973 = ((-t4414 * t4471 - t4418 * t4477) * t4380 + (t4414 * t4477 - t4418 * t4471) * t4368 + t4209 * t4603) * t4415 - t4419 * (t4753 + ((t4203 * t4414 - t4344 * t4418) * t4380 + (t4203 * t4418 + t4344 * t4414) * t4368) * t4416);
t1 = [t4502, t4460, (-t3973 * t4735 - t3974 * t4725 - t3975 * t4733 - t3976 * t4731 - t3977 * t4729 - t3978 * t4727) * t4607 + t4460, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t4221 * t4405 + (-t4111 * t4404 - t4112 * t4407) * t4408; t4503, t4461, (-t3973 * t4501 - t3974 * t4496 - t3975 * t4500 - t3976 * t4499 - t3977 * t4498 - t3978 * t4497) * t4607 + t4461, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4111 * t4242 - t4112 * t4243 + t4221 * t4641; t4504, t4462, (t3973 * t4549 + t3974 * t4544 + t3975 * t4548 + t3976 * t4547 + t3977 * t4546 + t3978 * t4545) * t4607 + t4462, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4111 * t4244 - t4112 * t4245 - t4221 * t4626; t4507, t4465, t4465 + (-t3973 * t4781 - t3974 * t4776 - t3975 * t4780 - t3976 * t4779 - t3977 * t4778 - t3978 * t4777) * t4607, 0, 0, 0, 0, 0, 0, t4111 * t4405 - t4221 * t4644, t4112 * t4405 - t4221 * t4628, (-t4111 * t4407 + t4112 * t4404) * t4408, 0; t4505, t4463, (t3973 * t3991 + t3974 * t3996 + t3975 * t3992 + t3976 * t3993 + t3977 * t3994 + t3978 * t3995) * t4607 + t4463, 0, 0, 0, 0, 0, 0, -t4111 * t4641 + t4221 * t4242, -t4112 * t4641 - t4221 * t4243, -t4111 * t4243 - t4112 * t4242, 0; t4506, t4464, t4464 + (t3973 * t4811 + t4806 * t3974 + t4810 * t3975 + t4809 * t3976 + t4808 * t3977 + t4807 * t3978) * t4607, 0, 0, 0, 0, 0, 0, t4111 * t4626 + t4221 * t4244, t4112 * t4626 - t4221 * t4245, -t4111 * t4245 - t4112 * t4244, 0;];
tau_reg  = t1;
