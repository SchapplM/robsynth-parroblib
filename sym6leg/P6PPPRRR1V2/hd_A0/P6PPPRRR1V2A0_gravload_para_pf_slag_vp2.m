% Calculate Gravitation load for parallel robot
% P6PPPRRR1V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d4,theta1,theta2,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 19:43
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPPRRR1V2G1P1A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 19:30:56
% EndTime: 2019-05-16 19:31:04
% DurationCPUTime: 8.18s
% Computational Cost: add. (3389->420), mult. (8040->797), div. (378->3), fcn. (9779->50), ass. (0->291)
t3015 = xP(5);
t2979 = sin(t3015);
t2982 = cos(t3015);
t3020 = koppelP(6,3);
t3014 = xP(6);
t2978 = sin(t3014);
t2981 = cos(t3014);
t3026 = koppelP(6,1);
t3132 = koppelP(6,2);
t3144 = t2978 * t3132 - t2981 * t3026;
t2884 = t2979 * t3144 + t2982 * t3020;
t2923 = t2978 * t3026 + t2981 * t3132;
t3016 = xP(4);
t2980 = sin(t3016);
t2983 = cos(t3016);
t2827 = t2884 * t2980 - t2923 * t2983;
t2824 = t2884 * t2983 + t2923 * t2980;
t3021 = koppelP(5,3);
t3027 = koppelP(5,1);
t3133 = koppelP(5,2);
t3143 = t2978 * t3133 - t2981 * t3027;
t2886 = t2979 * t3143 + t2982 * t3021;
t2924 = t2978 * t3027 + t2981 * t3133;
t2828 = t2886 * t2980 - t2924 * t2983;
t2825 = t2886 * t2983 + t2924 * t2980;
t3022 = koppelP(4,3);
t3028 = koppelP(4,1);
t3134 = koppelP(4,2);
t3142 = t2978 * t3134 - t2981 * t3028;
t2888 = t2979 * t3142 + t2982 * t3022;
t2925 = t2978 * t3028 + t2981 * t3134;
t2829 = t2888 * t2980 - t2925 * t2983;
t2826 = t2888 * t2983 + t2925 * t2980;
t3023 = koppelP(3,3);
t3029 = koppelP(3,1);
t3135 = koppelP(3,2);
t3141 = t2978 * t3135 - t2981 * t3029;
t2890 = t2979 * t3141 + t2982 * t3023;
t2926 = t2978 * t3029 + t2981 * t3135;
t2836 = t2890 * t2980 - t2926 * t2983;
t2837 = t2890 * t2983 + t2926 * t2980;
t3024 = koppelP(2,3);
t3030 = koppelP(2,1);
t3136 = koppelP(2,2);
t3140 = t2978 * t3136 - t2981 * t3030;
t2892 = t2979 * t3140 + t2982 * t3024;
t2927 = t2978 * t3030 + t2981 * t3136;
t2840 = t2892 * t2980 - t2927 * t2983;
t2841 = t2892 * t2983 + t2927 * t2980;
t3025 = koppelP(1,3);
t3031 = koppelP(1,1);
t3137 = koppelP(1,2);
t3139 = t2978 * t3137 - t2981 * t3031;
t2894 = t2979 * t3139 + t2982 * t3025;
t2928 = t2978 * t3031 + t2981 * t3137;
t2844 = t2894 * t2980 - t2928 * t2983;
t2845 = t2894 * t2983 + t2928 * t2980;
t3018 = mrSges(4,2);
t3019 = mrSges(4,1);
t3038 = t2978 * t3018 - t2981 * t3019;
t3017 = mrSges(4,3);
t3074 = t2982 * t3017;
t3138 = t2979 * t3038 + t3074;
t3145 = -t2979 * t3017 + t2982 * t3038;
t3013 = m(2) + m(3);
t3007 = legFrame(6,2);
t2972 = cos(t3007);
t3131 = g(1) * t2972;
t3008 = legFrame(5,2);
t2973 = cos(t3008);
t3130 = g(1) * t2973;
t3009 = legFrame(4,2);
t2974 = cos(t3009);
t3129 = g(1) * t2974;
t3010 = legFrame(3,2);
t2975 = cos(t3010);
t3128 = g(1) * t2975;
t3011 = legFrame(2,2);
t2976 = cos(t3011);
t3127 = g(1) * t2976;
t3012 = legFrame(1,2);
t2977 = cos(t3012);
t3126 = g(1) * t2977;
t3125 = cos(pkin(8));
t2995 = legFrame(6,3);
t2942 = sin(t2995);
t2954 = cos(t2995);
t2989 = sin(pkin(8));
t2904 = t2942 * t2989 - t2954 * t3125;
t2990 = sin(pkin(5));
t2988 = sin(pkin(9));
t2992 = cos(pkin(9));
t2994 = cos(pkin(4));
t3067 = t2992 * t2994;
t2902 = t2988 * t3125 + t2989 * t3067;
t2903 = t2988 * t2989 - t3067 * t3125;
t3050 = t2902 * t2942 + t2903 * t2954;
t2991 = sin(pkin(4));
t2993 = cos(pkin(5));
t3068 = t2991 * t2993;
t3124 = (t2904 * t3068 + t2990 * t3050) * t2972;
t2996 = legFrame(5,3);
t2943 = sin(t2996);
t2955 = cos(t2996);
t2905 = t2943 * t2989 - t2955 * t3125;
t3048 = t2902 * t2943 + t2903 * t2955;
t3123 = (t2905 * t3068 + t2990 * t3048) * t2973;
t2997 = legFrame(4,3);
t2944 = sin(t2997);
t2956 = cos(t2997);
t2906 = t2944 * t2989 - t2956 * t3125;
t3046 = t2902 * t2944 + t2903 * t2956;
t3122 = (t2906 * t3068 + t2990 * t3046) * t2974;
t2998 = legFrame(3,3);
t2945 = sin(t2998);
t2957 = cos(t2998);
t2907 = t2945 * t2989 - t2957 * t3125;
t3044 = t2902 * t2945 + t2903 * t2957;
t3121 = (t2907 * t3068 + t2990 * t3044) * t2975;
t2999 = legFrame(2,3);
t2946 = sin(t2999);
t2958 = cos(t2999);
t2908 = t2946 * t2989 - t2958 * t3125;
t3042 = t2902 * t2946 + t2903 * t2958;
t3120 = (t2908 * t3068 + t2990 * t3042) * t2976;
t3000 = legFrame(1,3);
t2947 = sin(t3000);
t2959 = cos(t3000);
t2909 = t2947 * t2989 - t2959 * t3125;
t3040 = t2902 * t2947 + t2903 * t2959;
t3119 = (t2909 * t3068 + t2990 * t3040) * t2977;
t3118 = t2904 * t2972;
t3117 = t2904 * t2994;
t3116 = t2905 * t2973;
t3115 = t2905 * t2994;
t3114 = t2906 * t2974;
t3113 = t2906 * t2994;
t3112 = t2907 * t2975;
t3111 = t2907 * t2994;
t3110 = t2908 * t2976;
t3109 = t2908 * t2994;
t3108 = t2909 * t2977;
t3107 = t2909 * t2994;
t3001 = legFrame(6,1);
t2948 = sin(t3001);
t2966 = sin(t3007);
t3094 = t2948 * t2966;
t3002 = legFrame(5,1);
t2949 = sin(t3002);
t2967 = sin(t3008);
t3093 = t2949 * t2967;
t3003 = legFrame(4,1);
t2950 = sin(t3003);
t2968 = sin(t3009);
t3092 = t2950 * t2968;
t3004 = legFrame(3,1);
t2951 = sin(t3004);
t2969 = sin(t3010);
t3091 = t2951 * t2969;
t3005 = legFrame(2,1);
t2952 = sin(t3005);
t2970 = sin(t3011);
t3090 = t2952 * t2970;
t3006 = legFrame(1,1);
t2953 = sin(t3006);
t2971 = sin(t3012);
t3089 = t2953 * t2971;
t2960 = cos(t3001);
t3088 = t2960 * t2966;
t2961 = cos(t3002);
t3087 = t2961 * t2967;
t2962 = cos(t3003);
t3086 = t2962 * t2968;
t2963 = cos(t3004);
t3085 = t2963 * t2969;
t2964 = cos(t3005);
t3084 = t2964 * t2970;
t2965 = cos(t3006);
t3083 = t2965 * t2971;
t3082 = t2979 * t2980;
t2986 = 0.1e1 / t2991;
t3072 = t2986 * (m(1) + t3013);
t3071 = t2986 * t3013;
t3070 = t2988 * t2991;
t3069 = t2988 * t2994;
t2910 = t2942 * t3125 + t2954 * t2989;
t3057 = t2904 * t3088 + t2948 * t2910;
t2911 = t2943 * t3125 + t2955 * t2989;
t3056 = t2905 * t3087 + t2949 * t2911;
t2912 = t2944 * t3125 + t2956 * t2989;
t3055 = t2906 * t3086 + t2950 * t2912;
t2913 = t2945 * t3125 + t2957 * t2989;
t3054 = t2907 * t3085 + t2951 * t2913;
t2914 = t2946 * t3125 + t2958 * t2989;
t3053 = t2908 * t3084 + t2952 * t2914;
t2915 = t2947 * t3125 + t2959 * t2989;
t3052 = t2909 * t3083 + t2953 * t2915;
t2806 = -t2942 * t3131 + (-t2942 * t3094 + t2954 * t2960) * g(2) + (t2942 * t3088 + t2948 * t2954) * g(3);
t2807 = t2954 * t3131 + (t2942 * t2960 + t2954 * t3094) * g(2) + (t2942 * t2948 - t2954 * t3088) * g(3);
t2782 = t2806 * t3125 - t2989 * t2807;
t2878 = g(1) * t2966 + (-g(2) * t2948 + g(3) * t2960) * t2972;
t2764 = t2782 * t2991 - t2878 * t2994;
t2808 = -t2943 * t3130 + (-t2943 * t3093 + t2955 * t2961) * g(2) + (t2943 * t3087 + t2949 * t2955) * g(3);
t2809 = t2955 * t3130 + (t2943 * t2961 + t2955 * t3093) * g(2) + (t2943 * t2949 - t2955 * t3087) * g(3);
t2783 = t2808 * t3125 - t2989 * t2809;
t2879 = g(1) * t2967 + (-g(2) * t2949 + g(3) * t2961) * t2973;
t2765 = t2783 * t2991 - t2879 * t2994;
t2810 = -t2944 * t3129 + (-t2944 * t3092 + t2956 * t2962) * g(2) + (t2944 * t3086 + t2950 * t2956) * g(3);
t2811 = t2956 * t3129 + (t2944 * t2962 + t2956 * t3092) * g(2) + (t2944 * t2950 - t2956 * t3086) * g(3);
t2784 = t2810 * t3125 - t2989 * t2811;
t2880 = g(1) * t2968 + (-g(2) * t2950 + g(3) * t2962) * t2974;
t2766 = t2784 * t2991 - t2880 * t2994;
t2812 = -t2945 * t3128 + (-t2945 * t3091 + t2957 * t2963) * g(2) + (t2945 * t3085 + t2951 * t2957) * g(3);
t2813 = t2957 * t3128 + (t2945 * t2963 + t2957 * t3091) * g(2) + (t2945 * t2951 - t2957 * t3085) * g(3);
t2785 = t2812 * t3125 - t2989 * t2813;
t2881 = g(1) * t2969 + (-g(2) * t2951 + g(3) * t2963) * t2975;
t2767 = t2785 * t2991 - t2881 * t2994;
t2814 = -t2946 * t3127 + (-t2946 * t3090 + t2958 * t2964) * g(2) + (t2946 * t3084 + t2952 * t2958) * g(3);
t2815 = t2958 * t3127 + (t2946 * t2964 + t2958 * t3090) * g(2) + (t2946 * t2952 - t2958 * t3084) * g(3);
t2786 = t2814 * t3125 - t2989 * t2815;
t2882 = g(1) * t2970 + (-g(2) * t2952 + g(3) * t2964) * t2976;
t2768 = t2786 * t2991 - t2882 * t2994;
t2816 = -t2947 * t3126 + (-t2947 * t3089 + t2959 * t2965) * g(2) + (t2947 * t3083 + t2953 * t2959) * g(3);
t2817 = t2959 * t3126 + (t2947 * t2965 + t2959 * t3089) * g(2) + (t2947 * t2953 - t2959 * t3083) * g(3);
t2787 = t2816 * t3125 - t2989 * t2817;
t2883 = g(1) * t2971 + (-g(2) * t2953 + g(3) * t2965) * t2977;
t2769 = t2787 * t2991 - t2883 * t2994;
t3051 = t2902 * t2954 - t2903 * t2942;
t3049 = t2902 * t2955 - t2903 * t2943;
t3047 = t2902 * t2956 - t2903 * t2944;
t3045 = t2902 * t2957 - t2903 * t2945;
t3043 = t2902 * t2958 - t2903 * t2946;
t3041 = t2902 * t2959 - t2903 * t2947;
t3039 = t2978 * t3019 + t2981 * t3018;
t3037 = t2904 * t3094 - t2910 * t2960;
t3036 = t2905 * t3093 - t2911 * t2961;
t3035 = t2906 * t3092 - t2912 * t2962;
t3034 = t2907 * t3091 - t2913 * t2963;
t3033 = t2908 * t3090 - t2914 * t2964;
t3032 = t2909 * t3089 - t2915 * t2965;
t2985 = 0.1e1 / t2990;
t2984 = 0.1e1 / t2988;
t2877 = t2979 * t3025 - t2982 * t3139;
t2876 = t2979 * t3024 - t2982 * t3140;
t2875 = t2979 * t3023 - t2982 * t3141;
t2874 = t2979 * t3022 - t2982 * t3142;
t2873 = t2979 * t3021 - t2982 * t3143;
t2872 = t2979 * t3020 - t2982 * t3144;
t2871 = t2915 * t2971 * t2994 + t2991 * t2977;
t2870 = t2914 * t2970 * t2994 + t2991 * t2976;
t2869 = t2913 * t2969 * t2994 + t2991 * t2975;
t2868 = t2912 * t2968 * t2994 + t2991 * t2974;
t2867 = t2911 * t2967 * t2994 + t2991 * t2973;
t2866 = t2910 * t2966 * t2994 + t2991 * t2972;
t2823 = (-t2909 * t2992 - t2915 * t3069) * t2977 + t2971 * t3070;
t2822 = (-t2908 * t2992 - t2914 * t3069) * t2976 + t2970 * t3070;
t2821 = (-t2907 * t2992 - t2913 * t3069) * t2975 + t2969 * t3070;
t2820 = (-t2906 * t2992 - t2912 * t3069) * t2974 + t2968 * t3070;
t2819 = (-t2905 * t2992 - t2911 * t3069) * t2973 + t2967 * t3070;
t2818 = (-t2904 * t2992 - t2910 * t3069) * t2972 + t2966 * t3070;
t2799 = (-t2871 * t2953 - t2965 * t3107) * t2988 - t3032 * t2992;
t2798 = (t2871 * t2965 - t2953 * t3107) * t2988 + t2992 * t3052;
t2797 = (-t2870 * t2952 - t2964 * t3109) * t2988 - t3033 * t2992;
t2796 = (t2870 * t2964 - t2952 * t3109) * t2988 + t2992 * t3053;
t2795 = (-t2869 * t2951 - t2963 * t3111) * t2988 - t3034 * t2992;
t2794 = (t2869 * t2963 - t2951 * t3111) * t2988 + t2992 * t3054;
t2793 = (-t2868 * t2950 - t2962 * t3113) * t2988 - t3035 * t2992;
t2792 = (t2868 * t2962 - t2950 * t3113) * t2988 + t2992 * t3055;
t2791 = (-t2867 * t2949 - t2961 * t3115) * t2988 - t3036 * t2992;
t2790 = (t2867 * t2961 - t2949 * t3115) * t2988 + t2992 * t3056;
t2789 = (-t2866 * t2948 - t2960 * t3117) * t2988 - t3037 * t2992;
t2788 = (t2866 * t2960 - t2948 * t3117) * t2988 + t2992 * t3057;
t2781 = (-t2965 * t3041 + t3040 * t3089) * t2990 + t3032 * t3068;
t2780 = (-t2964 * t3043 + t3042 * t3090) * t2990 + t3033 * t3068;
t2779 = (-t2963 * t3045 + t3044 * t3091) * t2990 + t3034 * t3068;
t2778 = (-t2962 * t3047 + t3046 * t3092) * t2990 + t3035 * t3068;
t2777 = (-t2961 * t3049 + t3048 * t3093) * t2990 + t3036 * t3068;
t2776 = (-t2960 * t3051 + t3050 * t3094) * t2990 + t3037 * t3068;
t2775 = (-t2953 * t3041 - t3040 * t3083) * t2990 - t3052 * t3068;
t2774 = (-t2952 * t3043 - t3042 * t3084) * t2990 - t3053 * t3068;
t2773 = (-t2951 * t3045 - t3044 * t3085) * t2990 - t3054 * t3068;
t2772 = (-t2950 * t3047 - t3046 * t3086) * t2990 - t3055 * t3068;
t2771 = (-t2949 * t3049 - t3048 * t3087) * t2990 - t3056 * t3068;
t2770 = (-t2948 * t3051 - t3050 * t3088) * t2990 - t3057 * t3068;
t2763 = ((t2787 * t2994 + t2883 * t2991) * t2992 + (-t2816 * t2989 - t2817 * t3125) * t2988) * t2990 + t2993 * t2769;
t2762 = ((t2786 * t2994 + t2882 * t2991) * t2992 + (-t2814 * t2989 - t2815 * t3125) * t2988) * t2990 + t2993 * t2768;
t2761 = ((t2785 * t2994 + t2881 * t2991) * t2992 + (-t2812 * t2989 - t2813 * t3125) * t2988) * t2990 + t2993 * t2767;
t2760 = ((t2784 * t2994 + t2880 * t2991) * t2992 + (-t2810 * t2989 - t2811 * t3125) * t2988) * t2990 + t2993 * t2766;
t2759 = ((t2783 * t2994 + t2879 * t2991) * t2992 + (-t2808 * t2989 - t2809 * t3125) * t2988) * t2990 + t2993 * t2765;
t2758 = ((t2782 * t2994 + t2878 * t2991) * t2992 + (-t2806 * t2989 - t2807 * t3125) * t2988) * t2990 + t2993 * t2764;
t1 = [-g(1) * m(4) + ((-t2818 * t2878 - t2819 * t2879 - t2820 * t2880 - t2821 * t2881 - t2822 * t2882 - t2823 * t2883) * t3072 + ((t2764 * t3124 + t2765 * t3123 + t2766 * t3122 + t2767 * t3121 + t2768 * t3120 + t2769 * t3119) * t3071 + (-t2758 * t3118 - t2759 * t3116 - t2760 * t3114 - t2761 * t3112 - t2762 * t3110 - t2763 * t3108) * m(3)) * t2985) * t2984; -g(2) * m(4) + ((-t2789 * t2878 - t2791 * t2879 - t2793 * t2880 - t2795 * t2881 - t2797 * t2882 - t2799 * t2883) * t3072 + ((t2764 * t2776 + t2765 * t2777 + t2766 * t2778 + t2767 * t2779 + t2768 * t2780 + t2769 * t2781) * t3071 + (-t2758 * t3037 - t2759 * t3036 - t2760 * t3035 - t2761 * t3034 - t2762 * t3033 - t2763 * t3032) * m(3)) * t2985) * t2984; -g(3) * m(4) + ((-t2788 * t2878 - t2790 * t2879 - t2792 * t2880 - t2794 * t2881 - t2796 * t2882 - t2798 * t2883) * t3072 + ((t2764 * t2770 + t2765 * t2771 + t2766 * t2772 + t2767 * t2773 + t2768 * t2774 + t2769 * t2775) * t3071 + (t2758 * t3057 + t2759 * t3056 + t2760 * t3055 + t2761 * t3054 + t2762 * t3053 + t2763 * t3052) * m(3)) * t2985) * t2984; -(-g(2) * t3138 + t3039 * g(3)) * t2983 + t2980 * (t3039 * g(2) + g(3) * t3138) + ((-(-t2798 * t2844 - t2799 * t2845) * t2883 - (-t2796 * t2840 - t2797 * t2841) * t2882 - (-t2794 * t2836 - t2795 * t2837) * t2881 - (-t2792 * t2829 - t2793 * t2826) * t2880 - (-t2790 * t2828 - t2791 * t2825) * t2879 - (-t2788 * t2827 - t2789 * t2824) * t2878) * t3072 + (((-t2844 * t3052 + t2845 * t3032) * t2763 + (-t2840 * t3053 + t2841 * t3033) * t2762 + (-t2836 * t3054 + t2837 * t3034) * t2761 + (t2826 * t3035 - t2829 * t3055) * t2760 + (t2825 * t3036 - t2828 * t3056) * t2759 + (t2824 * t3037 - t2827 * t3057) * t2758) * m(3) + ((-t2775 * t2844 - t2781 * t2845) * t2769 + (-t2774 * t2840 - t2780 * t2841) * t2768 + (-t2773 * t2836 - t2779 * t2837) * t2767 + (-t2772 * t2829 - t2778 * t2826) * t2766 + (-t2771 * t2828 - t2777 * t2825) * t2765 + (-t2770 * t2827 - t2776 * t2824) * t2764) * t3071) * t2985) * t2984; -t3145 * g(3) + (-t3039 * t2980 - t2983 * t3138) * g(1) + ((-(-t2798 * t2877 + t2823 * t2845) * t2883 - (-t2796 * t2876 + t2822 * t2841) * t2882 - (-t2794 * t2875 + t2821 * t2837) * t2881 - (-t2792 * t2874 + t2820 * t2826) * t2880 - (-t2790 * t2873 + t2819 * t2825) * t2879 - (-t2788 * t2872 + t2818 * t2824) * t2878) * t3072 + (((-t2845 * t3108 - t2877 * t3052) * t2763 + (-t2841 * t3110 - t2876 * t3053) * t2762 + (-t2837 * t3112 - t2875 * t3054) * t2761 + (-t2826 * t3114 - t2874 * t3055) * t2760 + (-t2825 * t3116 - t2873 * t3056) * t2759 + (-t2824 * t3118 - t2872 * t3057) * t2758) * m(3) + ((-t2775 * t2877 + t2845 * t3119) * t2769 + (-t2774 * t2876 + t2841 * t3120) * t2768 + (-t2773 * t2875 + t2837 * t3121) * t2767 + (-t2772 * t2874 + t2826 * t3122) * t2766 + (-t2771 * t2873 + t2825 * t3123) * t2765 + (-t2770 * t2872 + t2824 * t3124) * t2764) * t3071) * t2985) * t2984; t3145 * g(2) + (-t2980 * t3074 + (t2983 * t3018 + t3019 * t3082) * t2981 + (t2983 * t3019 - t3018 * t3082) * t2978) * g(1) + ((-(t2799 * t2877 + t2823 * t2844) * t2883 - (t2797 * t2876 + t2822 * t2840) * t2882 - (t2795 * t2875 + t2821 * t2836) * t2881 - (t2793 * t2874 + t2820 * t2829) * t2880 - (t2791 * t2873 + t2819 * t2828) * t2879 - (t2789 * t2872 + t2818 * t2827) * t2878) * t3072 + (((-t2844 * t3108 - t2877 * t3032) * t2763 + (-t2840 * t3110 - t2876 * t3033) * t2762 + (-t2836 * t3112 - t2875 * t3034) * t2761 + (-t2829 * t3114 - t2874 * t3035) * t2760 + (-t2828 * t3116 - t2873 * t3036) * t2759 + (-t2827 * t3118 - t2872 * t3037) * t2758) * m(3) + ((t2781 * t2877 + t2844 * t3119) * t2769 + (t2780 * t2876 + t2840 * t3120) * t2768 + (t2779 * t2875 + t2836 * t3121) * t2767 + (t2778 * t2874 + t2829 * t3122) * t2766 + (t2777 * t2873 + t2828 * t3123) * t2765 + (t2776 * t2872 + t2827 * t3124) * t2764) * t3071) * t2985) * t2984;];
taugX  = t1;
