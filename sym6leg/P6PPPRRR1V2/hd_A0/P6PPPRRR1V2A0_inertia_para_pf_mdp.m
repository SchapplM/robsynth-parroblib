% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P6PPPRRR1V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d4,theta1,theta2,theta3]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P6PPPRRR1V2G1P1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [6x6]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 19:43
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P6PPPRRR1V2G1P1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPPRRR1V2G1P1A0_inertia_para_pf_mdp: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPPRRR1V2G1P1A0_inertia_para_pf_mdp: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPPRRR1V2G1P1A0_inertia_para_pf_mdp: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPPRRR1V2G1P1A0_inertia_para_pf_mdp: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPPRRR1V2G1P1A0_inertia_para_pf_mdp: Koppelpunkt has to be [6x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P6PPPRRR1V2G1P1A0_inertia_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 19:38:22
% EndTime: 2019-05-16 19:40:52
% DurationCPUTime: 164.72s
% Computational Cost: add. (113140->2418), mult. (276400->3710), div. (17244->5), fcn. (343196->50), ass. (0->1057)
t7109 = xP(5);
t7073 = sin(t7109);
t7111 = koppelP(6,3);
t7076 = cos(t7109);
t7108 = xP(6);
t7072 = sin(t7108);
t7075 = cos(t7108);
t7117 = koppelP(6,2);
t7568 = koppelP(6,1);
t7592 = -t7072 * t7117 + t7568 * t7075;
t7512 = t7076 * t7592;
t6872 = t7073 * t7111 + t7512;
t7090 = legFrame(6,3);
t7036 = sin(t7090);
t7048 = cos(t7090);
t7084 = sin(pkin(8));
t7096 = legFrame(6,1);
t7054 = cos(t7096);
t7567 = cos(pkin(8));
t7245 = t7567 * t7054;
t7407 = t7084 * t7054;
t7102 = legFrame(6,2);
t7066 = cos(t7102);
t7042 = sin(t7096);
t7060 = sin(t7102);
t7499 = t7042 * t7060;
t7110 = xP(4);
t7077 = cos(t7110);
t7357 = t7077 * t7568;
t7074 = sin(t7110);
t7363 = t7074 * t7568;
t7438 = t7077 * t7117;
t7446 = t7074 * t7117;
t6830 = (t7073 * t7363 + t7438) * t7075 + t7072 * (-t7073 * t7446 + t7357);
t7020 = t7076 * t7111;
t7594 = t7074 * t7020 - t6830;
t7609 = t6872 * t7499 + t7066 * t7594;
t6332 = t7048 * (t6872 * t7407 + t7567 * t7609) + t7036 * (t6872 * t7245 - t7084 * t7609);
t7112 = koppelP(5,3);
t7118 = koppelP(5,2);
t7569 = koppelP(5,1);
t7591 = -t7072 * t7118 + t7569 * t7075;
t7511 = t7076 * t7591;
t6873 = t7073 * t7112 + t7511;
t7091 = legFrame(5,3);
t7037 = sin(t7091);
t7049 = cos(t7091);
t7097 = legFrame(5,1);
t7055 = cos(t7097);
t7269 = t7055 * t7567;
t7488 = t7055 * t7084;
t7103 = legFrame(5,2);
t7067 = cos(t7103);
t7043 = sin(t7097);
t7061 = sin(t7103);
t7498 = t7043 * t7061;
t7358 = t7077 * t7569;
t7364 = t7074 * t7569;
t7437 = t7077 * t7118;
t7445 = t7074 * t7118;
t6831 = (t7073 * t7364 + t7437) * t7075 + t7072 * (-t7073 * t7445 + t7358);
t7021 = t7076 * t7112;
t7595 = t7074 * t7021 - t6831;
t7608 = t6873 * t7498 + t7067 * t7595;
t6333 = t7049 * (t6873 * t7488 + t7567 * t7608) + t7037 * (t6873 * t7269 - t7084 * t7608);
t7113 = koppelP(4,3);
t7119 = koppelP(4,2);
t7570 = koppelP(4,1);
t7590 = -t7072 * t7119 + t7570 * t7075;
t7510 = t7076 * t7590;
t6874 = t7073 * t7113 + t7510;
t7092 = legFrame(4,3);
t7038 = sin(t7092);
t7050 = cos(t7092);
t7098 = legFrame(4,1);
t7056 = cos(t7098);
t7268 = t7056 * t7567;
t7486 = t7056 * t7084;
t7104 = legFrame(4,2);
t7068 = cos(t7104);
t7044 = sin(t7098);
t7062 = sin(t7104);
t7496 = t7044 * t7062;
t7359 = t7077 * t7570;
t7365 = t7074 * t7570;
t7436 = t7077 * t7119;
t7444 = t7074 * t7119;
t6832 = (t7073 * t7365 + t7436) * t7075 + t7072 * (-t7073 * t7444 + t7359);
t7022 = t7076 * t7113;
t7596 = t7074 * t7022 - t6832;
t7607 = t6874 * t7496 + t7068 * t7596;
t6334 = t7050 * (t6874 * t7486 + t7567 * t7607) + t7038 * (t6874 * t7268 - t7084 * t7607);
t7114 = koppelP(3,3);
t7120 = koppelP(3,2);
t7571 = koppelP(3,1);
t7589 = -t7072 * t7120 + t7571 * t7075;
t7509 = t7076 * t7589;
t6875 = t7073 * t7114 + t7509;
t7093 = legFrame(3,3);
t7039 = sin(t7093);
t7051 = cos(t7093);
t7099 = legFrame(3,1);
t7057 = cos(t7099);
t7244 = t7567 * t7057;
t7406 = t7084 * t7057;
t7105 = legFrame(3,2);
t7069 = cos(t7105);
t7045 = sin(t7099);
t7063 = sin(t7105);
t7494 = t7045 * t7063;
t7360 = t7077 * t7571;
t7366 = t7074 * t7571;
t7435 = t7077 * t7120;
t7443 = t7074 * t7120;
t6833 = (t7073 * t7366 + t7435) * t7075 + t7072 * (-t7073 * t7443 + t7360);
t7023 = t7076 * t7114;
t7597 = t7074 * t7023 - t6833;
t7606 = t6875 * t7494 + t7069 * t7597;
t6335 = t7051 * (t6875 * t7406 + t7567 * t7606) + t7039 * (t6875 * t7244 - t7084 * t7606);
t7115 = koppelP(2,3);
t7121 = koppelP(2,2);
t7572 = koppelP(2,1);
t7588 = -t7072 * t7121 + t7572 * t7075;
t7508 = t7076 * t7588;
t6876 = t7073 * t7115 + t7508;
t7094 = legFrame(2,3);
t7040 = sin(t7094);
t7052 = cos(t7094);
t7100 = legFrame(2,1);
t7058 = cos(t7100);
t7267 = t7058 * t7567;
t7483 = t7058 * t7084;
t7106 = legFrame(2,2);
t7070 = cos(t7106);
t7046 = sin(t7100);
t7064 = sin(t7106);
t7493 = t7046 * t7064;
t7361 = t7077 * t7572;
t7367 = t7074 * t7572;
t7434 = t7077 * t7121;
t7442 = t7074 * t7121;
t6834 = (t7073 * t7367 + t7434) * t7075 + t7072 * (-t7073 * t7442 + t7361);
t7024 = t7076 * t7115;
t7598 = t7074 * t7024 - t6834;
t7605 = t6876 * t7493 + t7070 * t7598;
t6336 = t7052 * (t6876 * t7483 + t7567 * t7605) + t7040 * (t6876 * t7267 - t7084 * t7605);
t7116 = koppelP(1,3);
t7122 = koppelP(1,2);
t7573 = koppelP(1,1);
t7587 = -t7072 * t7122 + t7573 * t7075;
t7507 = t7076 * t7587;
t6877 = t7073 * t7116 + t7507;
t7095 = legFrame(1,3);
t7041 = sin(t7095);
t7053 = cos(t7095);
t7101 = legFrame(1,1);
t7059 = cos(t7101);
t7243 = t7567 * t7059;
t7481 = t7059 * t7084;
t7107 = legFrame(1,2);
t7071 = cos(t7107);
t7047 = sin(t7101);
t7065 = sin(t7107);
t7491 = t7047 * t7065;
t7362 = t7077 * t7573;
t7368 = t7074 * t7573;
t7433 = t7077 * t7122;
t7441 = t7074 * t7122;
t6835 = (t7073 * t7368 + t7433) * t7075 + t7072 * (-t7073 * t7441 + t7362);
t7025 = t7076 * t7116;
t7593 = t7074 * t7025 - t6835;
t7604 = t6877 * t7491 + t7071 * t7593;
t6337 = t7053 * (t6877 * t7481 + t7567 * t7604) + t7041 * (t6877 * t7243 - t7084 * t7604);
t6996 = t7072 * t7568 + t7075 * t7117;
t7241 = -t7073 * t7592 + t7020;
t7586 = t7074 * t6996 + t7077 * t7241;
t6997 = t7072 * t7569 + t7075 * t7118;
t7240 = -t7073 * t7591 + t7021;
t7585 = t7074 * t6997 + t7077 * t7240;
t6998 = t7072 * t7570 + t7075 * t7119;
t7239 = -t7073 * t7590 + t7022;
t7584 = t7074 * t6998 + t7077 * t7239;
t6999 = t7072 * t7571 + t7075 * t7120;
t7238 = -t7073 * t7589 + t7023;
t7583 = t7074 * t6999 + t7077 * t7238;
t7000 = t7072 * t7572 + t7075 * t7121;
t7237 = -t7073 * t7588 + t7024;
t7582 = t7074 * t7000 + t7077 * t7237;
t7001 = t7072 * t7573 + t7075 * t7122;
t7236 = -t7073 * t7587 + t7025;
t7581 = t7074 * t7001 + t7077 * t7236;
t6797 = -t7077 * t6996 + t7074 * t7241;
t6798 = -t7077 * t6997 + t7074 * t7240;
t6799 = -t7077 * t6998 + t7074 * t7239;
t6806 = -t7077 * t6999 + t7074 * t7238;
t6810 = -t7077 * t7000 + t7074 * t7237;
t6814 = -t7077 * t7001 + t7074 * t7236;
t7035 = t7076 ^ 2;
t7449 = t7074 * t7072;
t7002 = t7035 * t7449;
t7448 = t7074 * t7075;
t7330 = t7035 * t7448;
t7464 = t7072 * t7077;
t6918 = t7073 * t7448 + t7464;
t7542 = t6918 * t7073;
t7543 = t6918 * t7072;
t7439 = t7077 * t7075;
t6916 = t7073 * t7449 - t7439;
t7544 = t6916 * t7075;
t7545 = t6916 * t7073;
t7564 = MDP(12) * t7076;
t7602 = (-t7543 + t7544) * t7564 + (-t7002 - t7545) * MDP(10) - (t7330 + t7542) * MDP(11);
t7003 = t7035 * t7439;
t7331 = t7035 * t7464;
t6920 = t7073 * t7439 - t7449;
t7537 = t6920 * t7073;
t7538 = t6920 * t7072;
t7456 = t7073 * t7077;
t6919 = t7072 * t7456 + t7448;
t7539 = t6919 * t7075;
t7540 = t6919 * t7073;
t7601 = -(-t7538 + t7539) * t7564 + (t7331 + t7540) * MDP(10) + (t7003 + t7537) * MDP(11);
t7159 = t7036 * t7567 + t7048 * t7084;
t7146 = t7066 * t7159;
t7158 = t7037 * t7567 + t7049 * t7084;
t7145 = t7067 * t7158;
t7157 = t7038 * t7567 + t7050 * t7084;
t7144 = t7068 * t7157;
t7156 = t7039 * t7567 + t7051 * t7084;
t7143 = t7069 * t7156;
t7155 = t7040 * t7567 + t7052 * t7084;
t7142 = t7070 * t7155;
t7154 = t7041 * t7567 + t7053 * t7084;
t7141 = t7071 * t7154;
t6878 = t6918 * t7075;
t7546 = t6916 * t7072;
t7600 = t6878 + t7546;
t6879 = t6920 * t7075;
t7541 = t6919 * t7072;
t7599 = -t6879 - t7541;
t7266 = t7060 * t7567;
t7428 = t7084 * t7586;
t7549 = t6797 * t7084;
t7580 = t7054 * ((t7060 * t7549 + t7567 * t7586) * t7036 + (-t6797 * t7266 + t7428) * t7048) + ((t7266 * t7586 + t7549) * t7048 - (-t6797 * t7567 + t7060 * t7428) * t7036) * t7042;
t7265 = t7061 * t7567;
t7427 = t7084 * t7585;
t7478 = t7061 * t7084;
t7579 = t7055 * ((t6798 * t7478 + t7567 * t7585) * t7037 + (-t6798 * t7265 + t7427) * t7049) + ((t6798 * t7084 + t7265 * t7585) * t7049 - t7037 * (-t6798 * t7567 + t7061 * t7427)) * t7043;
t7264 = t7062 * t7567;
t7426 = t7084 * t7584;
t7476 = t7062 * t7084;
t7578 = t7056 * ((t6799 * t7476 + t7567 * t7584) * t7038 + (-t6799 * t7264 + t7426) * t7050) + ((t6799 * t7084 + t7264 * t7584) * t7050 - t7038 * (-t6799 * t7567 + t7062 * t7426)) * t7044;
t7263 = t7063 * t7567;
t7425 = t7084 * t7583;
t7548 = t6806 * t7084;
t7577 = t7057 * ((t7063 * t7548 + t7567 * t7583) * t7039 + (-t6806 * t7263 + t7425) * t7051) + ((t7263 * t7583 + t7548) * t7051 - t7039 * (-t6806 * t7567 + t7063 * t7425)) * t7045;
t7262 = t7064 * t7567;
t7424 = t7084 * t7582;
t7473 = t7064 * t7084;
t7576 = t7058 * ((t6810 * t7473 + t7567 * t7582) * t7040 + (-t6810 * t7262 + t7424) * t7052) + ((t6810 * t7084 + t7262 * t7582) * t7052 - t7040 * (-t6810 * t7567 + t7064 * t7424)) * t7046;
t7261 = t7065 * t7567;
t7423 = t7084 * t7581;
t7471 = t7065 * t7084;
t7575 = t7059 * ((t6814 * t7471 + t7567 * t7581) * t7041 + (-t6814 * t7261 + t7423) * t7053) + ((t6814 * t7084 + t7261 * t7581) * t7053 - (-t6814 * t7567 + t7065 * t7423) * t7041) * t7047;
t7574 = (t6916 * t6920 - t6918 * t6919) * MDP(12) + ((t6918 * t7077 - t6920 * t7074) * MDP(11) - (-t6916 * t7077 + t6919 * t7074) * MDP(10)) * t7076;
t7085 = sin(pkin(5));
t7080 = 0.1e1 / t7085;
t7566 = MDP(3) * t7080;
t7563 = MDP(13) * t7076;
t6984 = t7036 * t7084 - t7048 * t7567;
t7083 = sin(pkin(9));
t7087 = cos(pkin(9));
t7089 = cos(pkin(4));
t7396 = t7087 * t7089;
t6982 = t7083 * t7567 + t7084 * t7396;
t6983 = t7083 * t7084 - t7396 * t7567;
t7176 = t6982 * t7036 + t6983 * t7048;
t7086 = sin(pkin(4));
t7088 = cos(pkin(5));
t7397 = t7086 * t7088;
t7556 = (t6984 * t7397 + t7085 * t7176) * t7066;
t6985 = t7037 * t7084 - t7049 * t7567;
t7174 = t6982 * t7037 + t6983 * t7049;
t7555 = (t6985 * t7397 + t7085 * t7174) * t7067;
t6986 = t7038 * t7084 - t7050 * t7567;
t7172 = t6982 * t7038 + t6983 * t7050;
t7554 = (t6986 * t7397 + t7085 * t7172) * t7068;
t6987 = t7039 * t7084 - t7051 * t7567;
t7170 = t6982 * t7039 + t6983 * t7051;
t7553 = (t6987 * t7397 + t7085 * t7170) * t7069;
t6988 = t7040 * t7084 - t7052 * t7567;
t7168 = t6982 * t7040 + t6983 * t7052;
t7552 = (t6988 * t7397 + t7085 * t7168) * t7070;
t6989 = t7041 * t7084 - t7053 * t7567;
t7166 = t6982 * t7041 + t6983 * t7053;
t7551 = (t6989 * t7397 + t7085 * t7166) * t7071;
t7536 = t6982 * t7060;
t7535 = t6982 * t7061;
t7534 = t6982 * t7062;
t7533 = t6982 * t7063;
t7532 = t6982 * t7064;
t7531 = t6982 * t7065;
t7530 = t6983 * t7060;
t7529 = t6983 * t7061;
t7528 = t6983 * t7062;
t7527 = t6983 * t7063;
t7526 = t6983 * t7064;
t7525 = t6983 * t7065;
t7524 = t6984 * t7066;
t7523 = t6984 * t7089;
t7522 = t6985 * t7067;
t7521 = t6985 * t7089;
t7520 = t6986 * t7068;
t7519 = t6986 * t7089;
t7518 = t6987 * t7069;
t7517 = t6987 * t7089;
t7516 = t6988 * t7070;
t7515 = t6988 * t7089;
t7514 = t6989 * t7071;
t7513 = t6989 * t7089;
t7032 = t7072 ^ 2;
t7506 = t7032 * t7076;
t7497 = t7043 * t7084;
t7495 = t7044 * t7084;
t7492 = t7046 * t7084;
t7490 = t7054 * t7060;
t7489 = t7055 * t7061;
t7487 = t7056 * t7062;
t7485 = t7057 * t7063;
t7484 = t7058 * t7064;
t7482 = t7059 * t7065;
t7480 = t7060 * t7083;
t7479 = t7061 * t7083;
t7477 = t7062 * t7083;
t7475 = t7063 * t7083;
t7474 = t7064 * t7083;
t7472 = t7065 * t7083;
t7470 = t7066 * t7083;
t7469 = t7067 * t7083;
t7468 = t7068 * t7083;
t7467 = t7069 * t7083;
t7466 = t7070 * t7083;
t7465 = t7071 * t7083;
t7457 = t7073 * t7074;
t7447 = t7074 * t7076;
t7440 = t7076 * t7077;
t7078 = 0.1e1 / t7083;
t7432 = t7078 * t7080;
t7081 = 0.1e1 / t7086;
t7431 = t7078 * t7081;
t7430 = t7083 * t7086;
t7429 = t7083 * t7089;
t7422 = t7084 * t7241;
t7421 = t7084 * t7240;
t7420 = t7084 * t7239;
t7419 = t7084 * t7238;
t7418 = t7084 * t7237;
t7417 = t7084 * t7236;
t7416 = t7084 * t6996;
t7415 = t7084 * t6997;
t7414 = t7084 * t6998;
t7413 = t7084 * t6999;
t7412 = t7084 * t7000;
t7411 = t7084 * t7001;
t7410 = t7084 * t7042;
t7409 = t7084 * t7045;
t7408 = t7084 * t7047;
t7405 = t7085 * t7087;
t7404 = t7086 * t7066;
t7403 = t7086 * t7067;
t7402 = t7086 * t7068;
t7401 = t7086 * t7069;
t7400 = t7086 * t7070;
t7399 = t7086 * t7071;
t7398 = t7086 * t7087;
t7140 = t7089 * t7159;
t6850 = t7060 * t7140 + t7404;
t7208 = t6984 * t7490 + t7042 * t7159;
t6578 = (t6850 * t7054 - t7042 * t7523) * t7083 + t7087 * t7208;
t7128 = t6984 * t7499 - t7054 * t7159;
t6579 = (-t6850 * t7042 - t7054 * t7523) * t7083 - t7128 * t7087;
t7139 = t7089 * t7158;
t6851 = t7061 * t7139 + t7403;
t7207 = t6985 * t7489 + t7043 * t7158;
t6580 = (t6851 * t7055 - t7043 * t7521) * t7083 + t7087 * t7207;
t7127 = t6985 * t7498 - t7055 * t7158;
t6581 = (-t6851 * t7043 - t7055 * t7521) * t7083 - t7127 * t7087;
t7138 = t7089 * t7157;
t6852 = t7062 * t7138 + t7402;
t7206 = t6986 * t7487 + t7044 * t7157;
t6582 = (t6852 * t7056 - t7044 * t7519) * t7083 + t7087 * t7206;
t7126 = t6986 * t7496 - t7056 * t7157;
t6583 = (-t6852 * t7044 - t7056 * t7519) * t7083 - t7126 * t7087;
t7137 = t7089 * t7156;
t6853 = t7063 * t7137 + t7401;
t7205 = t6987 * t7485 + t7045 * t7156;
t6584 = (t6853 * t7057 - t7045 * t7517) * t7083 + t7087 * t7205;
t7125 = t6987 * t7494 - t7057 * t7156;
t6585 = (-t6853 * t7045 - t7057 * t7517) * t7083 - t7125 * t7087;
t7136 = t7089 * t7155;
t6854 = t7064 * t7136 + t7400;
t7204 = t6988 * t7484 + t7046 * t7155;
t6586 = (t6854 * t7058 - t7046 * t7515) * t7083 + t7087 * t7204;
t7124 = t6988 * t7493 - t7058 * t7155;
t6587 = (-t6854 * t7046 - t7058 * t7515) * t7083 - t7124 * t7087;
t7135 = t7089 * t7154;
t6855 = t7065 * t7135 + t7399;
t7203 = t6989 * t7482 + t7047 * t7154;
t6588 = (t6855 * t7059 - t7047 * t7513) * t7083 + t7087 * t7203;
t7123 = t6989 * t7491 - t7059 * t7154;
t6589 = (-t6855 * t7047 - t7059 * t7513) * t7083 - t7123 * t7087;
t7350 = MDP(1) / t7083 ^ 2 / t7086 ^ 2;
t7395 = (t6578 * t6579 + t6580 * t6581 + t6582 * t6583 + t6584 * t6585 + t6586 * t6587 + t6588 * t6589) * t7350 + (-t7035 * t7074 * t7077 - t6916 * t6919 - t6918 * t6920) * MDP(13);
t6725 = (-t7087 * t6984 - t7083 * t7140) * t7066 + t7060 * t7430;
t6726 = (-t7087 * t6985 - t7083 * t7139) * t7067 + t7061 * t7430;
t6727 = (-t7087 * t6986 - t7083 * t7138) * t7068 + t7062 * t7430;
t6728 = (-t7087 * t6987 - t7083 * t7137) * t7069 + t7063 * t7430;
t6729 = (-t7087 * t6988 - t7083 * t7136) * t7070 + t7064 * t7430;
t6730 = (-t7087 * t6989 - t7083 * t7135) * t7071 + t7065 * t7430;
t7394 = (t6578 * t6725 + t6580 * t6726 + t6582 * t6727 + t6584 * t6728 + t6586 * t6729 + t6588 * t6730) * t7350 + (t7456 + t7599) * t7563;
t7393 = (t6579 * t6725 + t6581 * t6726 + t6583 * t6727 + t6585 * t6728 + t6587 * t6729 + t6589 * t6730) * t7350 + (-t7457 + t7600) * t7563;
t7177 = t6982 * t7048 - t6983 * t7036;
t6488 = (-t7042 * t7177 - t7176 * t7490) * t7085 - t7208 * t7397;
t7301 = t7080 * t7431;
t6464 = t6488 * t7301;
t6494 = (-t7054 * t7177 + t7176 * t7499) * t7085 + t7128 * t7397;
t6470 = t6494 * t7301;
t7392 = -t6464 * t6797 - t6470 * t7586;
t7175 = t6982 * t7049 - t6983 * t7037;
t6489 = (-t7043 * t7175 - t7174 * t7489) * t7085 - t7207 * t7397;
t6465 = t6489 * t7301;
t6495 = (-t7055 * t7175 + t7174 * t7498) * t7085 + t7127 * t7397;
t6471 = t6495 * t7301;
t7391 = -t6465 * t6798 - t6471 * t7585;
t7173 = t6982 * t7050 - t6983 * t7038;
t6490 = (-t7044 * t7173 - t7172 * t7487) * t7085 - t7206 * t7397;
t6466 = t6490 * t7301;
t6496 = (-t7056 * t7173 + t7172 * t7496) * t7085 + t7126 * t7397;
t6472 = t6496 * t7301;
t7390 = -t6466 * t6799 - t6472 * t7584;
t7171 = t6982 * t7051 - t6983 * t7039;
t6491 = (-t7045 * t7171 - t7170 * t7485) * t7085 - t7205 * t7397;
t6467 = t6491 * t7301;
t6497 = (-t7057 * t7171 + t7170 * t7494) * t7085 + t7125 * t7397;
t6473 = t6497 * t7301;
t7389 = -t6467 * t6806 - t6473 * t7583;
t7169 = t6982 * t7052 - t6983 * t7040;
t6492 = (-t7046 * t7169 - t7168 * t7484) * t7085 - t7204 * t7397;
t6468 = t6492 * t7301;
t6498 = (-t7058 * t7169 + t7168 * t7493) * t7085 + t7124 * t7397;
t6474 = t6498 * t7301;
t7388 = -t6468 * t6810 - t6474 * t7582;
t7167 = t6982 * t7053 - t6983 * t7041;
t6493 = (-t7047 * t7167 - t7166 * t7482) * t7085 - t7203 * t7397;
t6469 = t6493 * t7301;
t6499 = (-t7059 * t7167 + t7166 * t7491) * t7085 + t7123 * t7397;
t6475 = t6499 * t7301;
t7387 = -t6469 * t6814 - t6475 * t7581;
t6572 = t6584 * t7431;
t6573 = t6585 * t7431;
t6290 = -t6572 * t6806 - t6573 * t7583;
t6574 = t6586 * t7431;
t6575 = t6587 * t7431;
t6291 = -t6574 * t6810 - t6575 * t7582;
t6576 = t6588 * t7431;
t6577 = t6589 * t7431;
t6292 = -t6576 * t6814 - t6577 * t7581;
t6566 = t6578 * t7431;
t6567 = t6579 * t7431;
t6293 = -t6566 * t6797 - t6567 * t7586;
t6568 = t6580 * t7431;
t6569 = t6581 * t7431;
t6294 = -t6568 * t6798 - t6569 * t7585;
t6570 = t6582 * t7431;
t6571 = t6583 * t7431;
t6295 = -t6570 * t6799 - t6571 * t7584;
t7339 = t7124 * t7432;
t7345 = t7204 * t7432;
t6404 = -t6810 * t7345 + t7339 * t7582;
t7338 = t7123 * t7432;
t7344 = t7203 * t7432;
t6405 = -t6814 * t7344 + t7338 * t7581;
t7343 = t7128 * t7432;
t7349 = t7208 * t7432;
t6406 = -t6797 * t7349 + t7343 * t7586;
t7342 = t7127 * t7432;
t7348 = t7207 * t7432;
t6407 = -t6798 * t7348 + t7342 * t7585;
t7341 = t7126 * t7432;
t7347 = t7206 * t7432;
t6408 = -t6799 * t7347 + t7341 * t7584;
t7340 = t7125 * t7432;
t7346 = t7205 * t7432;
t6409 = -t6806 * t7346 + t7340 * t7583;
t7300 = t7088 * t7432;
t7386 = t7208 * t7300 + t6464;
t7385 = t7207 * t7300 + t6465;
t7384 = t7206 * t7300 + t6466;
t7383 = t7205 * t7300 + t6467;
t7382 = t7204 * t7300 + t6468;
t7381 = t7203 * t7300 + t6469;
t7380 = -t7128 * t7300 + t6470;
t7379 = -t7127 * t7300 + t6471;
t7378 = -t7126 * t7300 + t6472;
t7377 = -t7125 * t7300 + t6473;
t7376 = -t7124 * t7300 + t6474;
t7375 = -t7123 * t7300 + t6475;
t6699 = t7301 * t7556;
t7337 = t7080 * t7524;
t7235 = t7078 * t7337;
t7374 = -t7088 * t7235 + t6699;
t6700 = t7301 * t7555;
t7336 = t7080 * t7522;
t7234 = t7078 * t7336;
t7373 = -t7088 * t7234 + t6700;
t6701 = t7301 * t7554;
t7335 = t7080 * t7520;
t7233 = t7078 * t7335;
t7372 = -t7088 * t7233 + t6701;
t6702 = t7301 * t7553;
t7334 = t7080 * t7518;
t7232 = t7078 * t7334;
t7371 = -t7088 * t7232 + t6702;
t6703 = t7301 * t7552;
t7333 = t7080 * t7516;
t7231 = t7078 * t7333;
t7370 = -t7088 * t7231 + t6703;
t6704 = t7301 * t7551;
t7332 = t7080 * t7514;
t7230 = t7078 * t7332;
t7369 = -t7088 * t7230 + t6704;
t6719 = t6725 * t7431;
t6720 = t6726 * t7431;
t6721 = t6727 * t7431;
t6722 = t6728 * t7431;
t6723 = t6729 * t7431;
t6724 = t6730 * t7431;
t7328 = t7060 * t7396;
t7326 = t7061 * t7396;
t7324 = t7062 * t7396;
t7322 = t7063 * t7396;
t7320 = t7064 * t7396;
t7318 = t7065 * t7396;
t7317 = t7066 * t7396;
t7316 = t7067 * t7396;
t7315 = t7068 * t7396;
t7314 = t7069 * t7396;
t7313 = t7070 * t7396;
t7312 = t7071 * t7396;
t7305 = t7074 * t7432;
t7304 = t7074 * t7431;
t7303 = t7077 * t7432;
t7302 = t7077 * t7431;
t7299 = t7089 * t7431;
t7298 = t7078 * t7398;
t7291 = t7085 * t7398;
t7290 = t7088 * t6404 + t7388;
t7289 = t7088 * t6405 + t7387;
t7288 = t7088 * t6406 + t7392;
t7287 = t7088 * t6407 + t7391;
t7286 = t7088 * t6408 + t7390;
t7285 = t7088 * t6409 + t7389;
t6614 = (t6797 * t7077 - t7074 * t7586) * t7076;
t6675 = -t6797 * t7073 + t6872 * t7447;
t6676 = t6872 * t7440 - t7073 * t7586;
t7284 = t6675 * t6464 + t6676 * t6470 + t6614 * t6699;
t6615 = (t6798 * t7077 - t7074 * t7585) * t7076;
t6677 = -t6798 * t7073 + t6873 * t7447;
t6678 = t6873 * t7440 - t7073 * t7585;
t7283 = t6677 * t6465 + t6678 * t6471 + t6615 * t6700;
t6616 = (t6799 * t7077 - t7074 * t7584) * t7076;
t6679 = -t6799 * t7073 + t6874 * t7447;
t6680 = t6874 * t7440 - t7073 * t7584;
t7282 = t6679 * t6466 + t6680 * t6472 + t6616 * t6701;
t6617 = (t6806 * t7077 - t7074 * t7583) * t7076;
t6681 = -t6806 * t7073 + t6875 * t7447;
t6682 = t6875 * t7440 - t7073 * t7583;
t7281 = t6681 * t6467 + t6682 * t6473 + t6617 * t6702;
t6618 = (t6810 * t7077 - t7074 * t7582) * t7076;
t6683 = -t6810 * t7073 + t6876 * t7447;
t6684 = t6876 * t7440 - t7073 * t7582;
t7280 = t6683 * t6468 + t6684 * t6474 + t6618 * t6703;
t6619 = (t6814 * t7077 - t7074 * t7581) * t7076;
t6685 = -t6814 * t7073 + t6877 * t7447;
t6686 = t6877 * t7440 - t7073 * t7581;
t7279 = t6685 * t6469 + t6686 * t6475 + t6619 * t6704;
t6644 = t6797 * t7074 + t7077 * t7586;
t7228 = t7077 * t7301;
t7229 = t7074 * t7301;
t7278 = t6644 * t6699 + (-t6488 * t7228 + t6494 * t7229) * t6872;
t6645 = t6798 * t7074 + t7077 * t7585;
t7277 = t6645 * t6700 + (-t6489 * t7228 + t6495 * t7229) * t6873;
t6646 = t6799 * t7074 + t7077 * t7584;
t7276 = t6646 * t6701 + (-t6490 * t7228 + t6496 * t7229) * t6874;
t6647 = t6806 * t7074 + t7077 * t7583;
t7275 = t6647 * t6702 + (-t6491 * t7228 + t6497 * t7229) * t6875;
t6648 = t6810 * t7074 + t7077 * t7582;
t7274 = t6648 * t6703 + (-t6492 * t7228 + t6498 * t7229) * t6876;
t6649 = t6814 * t7074 + t7077 * t7581;
t7273 = t6649 * t6704 + (-t6493 * t7228 + t6499 * t7229) * t6877;
t6200 = t6675 * t6566 + t6676 * t6567 + t6614 * t6719;
t6201 = t6677 * t6568 + t6678 * t6569 + t6615 * t6720;
t6202 = t6679 * t6570 + t6680 * t6571 + t6616 * t6721;
t6203 = t6681 * t6572 + t6682 * t6573 + t6617 * t6722;
t6204 = t6683 * t6574 + t6684 * t6575 + t6618 * t6723;
t6205 = t6685 * t6576 + t6686 * t6577 + t6619 * t6724;
t6236 = t6644 * t6719 + (-t6578 * t7302 + t6579 * t7304) * t6872;
t6237 = t6645 * t6720 + (-t6580 * t7302 + t6581 * t7304) * t6873;
t6238 = t6646 * t6721 + (-t6582 * t7302 + t6583 * t7304) * t6874;
t6239 = t6647 * t6722 + (-t6584 * t7302 + t6585 * t7304) * t6875;
t6240 = t6648 * t6723 + (-t6586 * t7302 + t6587 * t7304) * t6876;
t6241 = t6649 * t6724 + (-t6588 * t7302 + t6589 * t7304) * t6877;
t6254 = -t6614 * t7235 + t6675 * t7349 - t6676 * t7343;
t6255 = -t6615 * t7234 + t6677 * t7348 - t6678 * t7342;
t6256 = -t6616 * t7233 + t6679 * t7347 - t6680 * t7341;
t6257 = -t6617 * t7232 + t6681 * t7346 - t6682 * t7340;
t6258 = -t6618 * t7231 + t6683 * t7345 - t6684 * t7339;
t6259 = -t6619 * t7230 + t6685 * t7344 - t6686 * t7338;
t6326 = -t6644 * t7235 + (-t7128 * t7305 - t7208 * t7303) * t6872;
t6327 = -t6645 * t7234 + (-t7127 * t7305 - t7207 * t7303) * t6873;
t6328 = -t6646 * t7233 + (-t7126 * t7305 - t7206 * t7303) * t6874;
t6329 = -t6647 * t7232 + (-t7125 * t7305 - t7205 * t7303) * t6875;
t6330 = -t6648 * t7231 + (-t7124 * t7305 - t7204 * t7303) * t6876;
t6331 = -t6649 * t7230 + (-t7123 * t7305 - t7203 * t7303) * t6877;
t7272 = t7043 * t7567;
t7271 = t7044 * t7567;
t7270 = t7046 * t7567;
t7260 = t7567 * t7241;
t7259 = t7567 * t7240;
t7258 = t7567 * t7239;
t7257 = t7567 * t7238;
t7256 = t7567 * t7237;
t7255 = t7567 * t7236;
t7254 = t7567 * t6996;
t7253 = t7567 * t6997;
t7252 = t7567 * t6998;
t7251 = t7567 * t6999;
t7250 = t7567 * t7000;
t7249 = t7567 * t7001;
t7248 = t7567 * t7042;
t7247 = t7567 * t7045;
t7246 = t7567 * t7047;
t7227 = t7080 * t7299;
t7226 = t7088 * t6254 + t7284;
t7225 = t7088 * t6255 + t7283;
t7224 = t7088 * t6256 + t7282;
t7223 = t7088 * t6257 + t7281;
t7222 = t7088 * t6258 + t7280;
t7221 = t7088 * t6259 + t7279;
t7220 = t7088 * t6326 + t7278;
t7219 = t7088 * t6327 + t7277;
t7218 = t7088 * t6328 + t7276;
t7217 = t7088 * t6329 + t7275;
t7216 = t7088 * t6330 + t7274;
t7215 = t7088 * t6331 + t7273;
t6836 = -(t7073 * t7438 + t7363) * t7072 + (t7073 * t7357 - t7446) * t7075;
t6752 = t7020 * t7077 - t6836;
t6837 = -(t7073 * t7437 + t7364) * t7072 + (t7073 * t7358 - t7445) * t7075;
t6753 = t7021 * t7077 - t6837;
t6838 = -(t7073 * t7436 + t7365) * t7072 + (t7073 * t7359 - t7444) * t7075;
t6754 = t7022 * t7077 - t6838;
t6839 = -(t7073 * t7435 + t7366) * t7072 + (t7073 * t7360 - t7443) * t7075;
t6755 = t7023 * t7077 - t6839;
t6840 = -(t7073 * t7434 + t7367) * t7072 + (t7073 * t7361 - t7442) * t7075;
t6756 = t7024 * t7077 - t6840;
t6841 = -(t7073 * t7433 + t7368) * t7072 + (t7073 * t7362 - t7441) * t7075;
t6757 = t7025 * t7077 - t6841;
t7202 = MDP(10) * t7075 - MDP(11) * t7072;
t6922 = -t7060 * t7410 + t7245;
t6934 = t7060 * t7248 + t7407;
t7189 = t6922 * t7048 - t6934 * t7036;
t6923 = t7060 * t7407 + t7248;
t6935 = t7060 * t7245 - t7410;
t7188 = t6923 * t7048 + t6935 * t7036;
t6924 = -t7043 * t7478 + t7269;
t6936 = t7043 * t7265 + t7488;
t7187 = t6924 * t7049 - t6936 * t7037;
t6925 = t7055 * t7478 + t7272;
t6937 = t7055 * t7265 - t7497;
t7186 = t6925 * t7049 + t6937 * t7037;
t6926 = -t7044 * t7476 + t7268;
t6938 = t7044 * t7264 + t7486;
t7185 = t6926 * t7050 - t6938 * t7038;
t6927 = t7056 * t7476 + t7271;
t6939 = t7056 * t7264 - t7495;
t7184 = t6927 * t7050 + t6939 * t7038;
t6928 = -t7063 * t7409 + t7244;
t6940 = t7063 * t7247 + t7406;
t7183 = t6928 * t7051 - t6940 * t7039;
t6929 = t7063 * t7406 + t7247;
t6941 = t7063 * t7244 - t7409;
t7182 = t6929 * t7051 + t6941 * t7039;
t6930 = -t7046 * t7473 + t7267;
t6942 = t7046 * t7262 + t7483;
t7181 = t6930 * t7052 - t6942 * t7040;
t6931 = t7058 * t7473 + t7270;
t6943 = t7058 * t7262 - t7492;
t7180 = t6931 * t7052 + t6943 * t7040;
t6932 = -t7065 * t7408 + t7243;
t6944 = t7065 * t7246 + t7481;
t7179 = t6932 * t7053 - t6944 * t7041;
t6933 = t7059 * t7471 + t7246;
t6945 = t7065 * t7243 - t7408;
t7178 = t6933 * t7053 + t6945 * t7041;
t7153 = (MDP(6) * t7075 - MDP(8) * t7072) * t7076;
t7152 = t7066 * t6872;
t7151 = t7067 * t6873;
t7150 = t7068 * t6874;
t7149 = t7069 * t6875;
t7148 = t7070 * t6876;
t7147 = t7071 * t6877;
t7134 = t7076 * t7146;
t7133 = t7076 * t7145;
t7132 = t7076 * t7144;
t7131 = t7076 * t7143;
t7130 = t7076 * t7142;
t7129 = t7076 * t7141;
t7034 = t7075 ^ 2;
t7033 = t7073 ^ 2;
t7012 = t7076 * t7034;
t6781 = t7065 * t7249 + t7417;
t6780 = t7064 * t7250 + t7418;
t6779 = t7063 * t7251 + t7419;
t6778 = t7062 * t7252 + t7420;
t6777 = t7061 * t7253 + t7421;
t6776 = t7060 * t7254 + t7422;
t6775 = t7065 * t7255 - t7411;
t6774 = t7064 * t7256 - t7412;
t6773 = t7063 * t7257 - t7413;
t6772 = t7062 * t7258 - t7414;
t6771 = t7061 * t7259 - t7415;
t6770 = t7060 * t7260 - t7416;
t6769 = -t7065 * t7411 + t7255;
t6768 = -t7064 * t7412 + t7256;
t6767 = -t7063 * t7413 + t7257;
t6766 = -t7062 * t7414 + t7258;
t6765 = -t7061 * t7415 + t7259;
t6764 = -t7060 * t7416 + t7260;
t6763 = t7065 * t7417 + t7249;
t6762 = t7064 * t7418 + t7250;
t6761 = t7063 * t7419 + t7251;
t6760 = t7062 * t7420 + t7252;
t6759 = t7061 * t7421 + t7253;
t6758 = t7060 * t7422 + t7254;
t6718 = t6730 * t7299;
t6717 = t6729 * t7299;
t6716 = t6728 * t7299;
t6715 = t6727 * t7299;
t6714 = t6726 * t7299;
t6713 = t6725 * t7299;
t6674 = t6757 * t7071 + t6877 * t7482;
t6673 = t6756 * t7070 + t6876 * t7484;
t6672 = t6755 * t7069 + t6875 * t7485;
t6671 = t6754 * t7068 + t6874 * t7487;
t6670 = t6753 * t7067 + t6873 * t7489;
t6669 = t6752 * t7066 + t6872 * t7490;
t6643 = t6757 * t7465 + t6877 * (t7047 * t7396 + t7059 * t7472);
t6642 = t6756 * t7466 + t6876 * (t7046 * t7396 + t7058 * t7474);
t6641 = t6755 * t7467 + t6875 * (t7045 * t7396 + t7057 * t7475);
t6640 = t6754 * t7468 + t6874 * (t7044 * t7396 + t7056 * t7477);
t6639 = t6753 * t7469 + t6873 * (t7043 * t7396 + t7055 * t7479);
t6638 = t6752 * t7470 + t6872 * (t7042 * t7396 + t7054 * t7480);
t6637 = -t7593 * t7465 + t6877 * (-t7047 * t7472 + t7059 * t7396);
t6636 = -t7598 * t7466 + t6876 * (-t7046 * t7474 + t7058 * t7396);
t6635 = -t7597 * t7467 + t6875 * (-t7045 * t7475 + t7057 * t7396);
t6634 = -t7596 * t7468 + t6874 * (-t7044 * t7477 + t7056 * t7396);
t6633 = -t7595 * t7469 + t6873 * (-t7043 * t7479 + t7055 * t7396);
t6632 = -t7594 * t7470 + t6872 * (-t7042 * t7480 + t7054 * t7396);
t6613 = t6757 * t7312 + t6877 * (-t7047 * t7083 + t7059 * t7318);
t6612 = t6756 * t7313 + t6876 * (-t7046 * t7083 + t7058 * t7320);
t6611 = t6755 * t7314 + t6875 * (-t7045 * t7083 + t7057 * t7322);
t6610 = t6754 * t7315 + t6874 * (-t7044 * t7083 + t7056 * t7324);
t6609 = t6753 * t7316 + t6873 * (-t7043 * t7083 + t7055 * t7326);
t6608 = t6752 * t7317 + t6872 * (-t7042 * t7083 + t7054 * t7328);
t6607 = -t7593 * t7312 - t6877 * (t7047 * t7318 + t7059 * t7083);
t6606 = -t7598 * t7313 - t6876 * (t7046 * t7320 + t7058 * t7083);
t6605 = -t7597 * t7314 - t6875 * (t7045 * t7322 + t7057 * t7083);
t6604 = -t7596 * t7315 - t6874 * (t7044 * t7324 + t7056 * t7083);
t6603 = -t7595 * t7316 - t6873 * (t7043 * t7326 + t7055 * t7083);
t6602 = -t7594 * t7317 - t6872 * (t7042 * t7328 + t7054 * t7083);
t6601 = t6769 * t7041 + t6781 * t7053;
t6600 = t6768 * t7040 + t6780 * t7052;
t6599 = t6767 * t7039 + t6779 * t7051;
t6598 = t6766 * t7038 + t6778 * t7050;
t6597 = t6765 * t7037 + t6777 * t7049;
t6596 = t6764 * t7036 + t6776 * t7048;
t6595 = -t6763 * t7041 + t6775 * t7053;
t6594 = -t6762 * t7040 + t6774 * t7052;
t6593 = -t6761 * t7039 + t6773 * t7051;
t6592 = -t6760 * t7038 + t6772 * t7050;
t6591 = -t6759 * t7037 + t6771 * t7049;
t6590 = -t6758 * t7036 + t6770 * t7048;
t6553 = t6589 * t7299;
t6552 = t6588 * t7299;
t6551 = t6587 * t7299;
t6550 = t6586 * t7299;
t6549 = t6585 * t7299;
t6548 = t6584 * t7299;
t6547 = t6583 * t7299;
t6546 = t6582 * t7299;
t6545 = t6581 * t7299;
t6544 = t6580 * t7299;
t6543 = t6579 * t7299;
t6542 = t6578 * t7299;
t6523 = -t7001 * t7399 + (t6769 * t7053 - t6781 * t7041) * t7089;
t6522 = -t7000 * t7400 + (t6768 * t7052 - t6780 * t7040) * t7089;
t6521 = -t6999 * t7401 + (t6767 * t7051 - t6779 * t7039) * t7089;
t6520 = -t6998 * t7402 + (t6766 * t7050 - t6778 * t7038) * t7089;
t6519 = -t6997 * t7403 + (t6765 * t7049 - t6777 * t7037) * t7089;
t6518 = -t6996 * t7404 + (t6764 * t7048 - t6776 * t7036) * t7089;
t6517 = t6704 * t7089 + t6724;
t6516 = t6703 * t7089 + t6723;
t6515 = t6702 * t7089 + t6722;
t6514 = t6701 * t7089 + t6721;
t6513 = t6700 * t7089 + t6720;
t6512 = t6699 * t7089 + t6719;
t6511 = t6718 + t6704;
t6510 = t6717 + t6703;
t6509 = t6716 + t6702;
t6508 = t6715 + t6701;
t6507 = t6714 + t6700;
t6506 = t6713 + t6699;
t6505 = t7236 * t7399 + (t6763 * t7053 + t6775 * t7041) * t7089;
t6504 = t7237 * t7400 + (t6762 * t7052 + t6774 * t7040) * t7089;
t6503 = t7238 * t7401 + (t6761 * t7051 + t6773 * t7039) * t7089;
t6502 = t7239 * t7402 + (t6760 * t7050 + t6772 * t7038) * t7089;
t6501 = t7240 * t7403 + (t6759 * t7049 + t6771 * t7037) * t7089;
t6500 = t7241 * t7404 + (t6758 * t7048 + t6770 * t7036) * t7089;
t6439 = t6718 + t7369;
t6438 = t6717 + t7370;
t6437 = t6716 + t7371;
t6436 = t6715 + t7372;
t6435 = t6714 + t7373;
t6434 = t6713 + t7374;
t6397 = t7089 * t7369 + t7298 * t7514 + t6724;
t6396 = t7089 * t7370 + t7298 * t7516 + t6723;
t6395 = t7089 * t7371 + t7298 * t7518 + t6722;
t6394 = t7089 * t7372 + t7298 * t7520 + t6721;
t6393 = t7089 * t7373 + t7298 * t7522 + t6720;
t6392 = t7089 * t7374 + t7298 * t7524 + t6719;
t6361 = t6511 * t7088 + (-t6730 * t7405 - t7332) * t7078;
t6360 = t6510 * t7088 + (-t6729 * t7405 - t7333) * t7078;
t6359 = t6509 * t7088 + (-t6728 * t7405 - t7334) * t7078;
t6358 = t6508 * t7088 + (-t6727 * t7405 - t7335) * t7078;
t6357 = t6507 * t7088 + (-t6726 * t7405 - t7336) * t7078;
t6356 = t6506 * t7088 + (-t6725 * t7405 - t7337) * t7078;
t6343 = (t6674 * t7567 - t6877 * t7408) * t7053 - t7041 * (t7084 * t6674 + t6877 * t7246);
t6342 = (t6673 * t7567 - t6876 * t7492) * t7052 - t7040 * (t7084 * t6673 + t6876 * t7270);
t6341 = (t6672 * t7567 - t6875 * t7409) * t7051 - t7039 * (t7084 * t6672 + t6875 * t7247);
t6340 = (t6671 * t7567 - t6874 * t7495) * t7050 - t7038 * (t7084 * t6671 + t6874 * t7271);
t6339 = (t6670 * t7567 - t6873 * t7497) * t7049 - t7037 * (t7084 * t6670 + t6873 * t7272);
t6338 = (t6669 * t7567 - t6872 * t7410) * t7048 - t7036 * (t7084 * t6669 + t6872 * t7248);
t6325 = t6499 * t7227 + t6577;
t6324 = t6493 * t7227 + t6576;
t6323 = t6498 * t7227 + t6575;
t6322 = t6492 * t7227 + t6574;
t6321 = t6497 * t7227 + t6573;
t6320 = t6491 * t7227 + t6572;
t6319 = t6496 * t7227 + t6571;
t6318 = t6490 * t7227 + t6570;
t6317 = t6495 * t7227 + t6569;
t6316 = t6489 * t7227 + t6568;
t6315 = t6494 * t7227 + t6567;
t6314 = t6488 * t7227 + t6566;
t6313 = t6553 + t6475;
t6312 = t6552 + t6469;
t6311 = t6551 + t6474;
t6310 = t6550 + t6468;
t6309 = t6549 + t6473;
t6308 = t6548 + t6467;
t6307 = t6547 + t6472;
t6306 = t6546 + t6466;
t6305 = t6545 + t6471;
t6304 = t6544 + t6465;
t6303 = t6543 + t6470;
t6302 = t6542 + t6464;
t6289 = t7089 * t6295;
t6288 = t7089 * t6294;
t6287 = t7089 * t6293;
t6286 = t7089 * t6292;
t6285 = t7089 * t6291;
t6284 = t7089 * t6290;
t6283 = t6553 + t7375;
t6282 = t6551 + t7376;
t6281 = t6549 + t7377;
t6280 = t6547 + t7378;
t6279 = t6545 + t7379;
t6278 = t6543 + t7380;
t6277 = t6552 + t7381;
t6276 = t6550 + t7382;
t6275 = t6548 + t7383;
t6274 = t6546 + t7384;
t6273 = t6544 + t7385;
t6272 = t6542 + t7386;
t6271 = t7089 * t7375 + t7123 * t7298 + t6577;
t6270 = t7089 * t7376 + t7124 * t7298 + t6575;
t6269 = t7089 * t7377 + t7125 * t7298 + t6573;
t6268 = t7089 * t7378 + t7126 * t7298 + t6571;
t6267 = t7089 * t7379 + t7127 * t7298 + t6569;
t6266 = t7089 * t7380 + t7128 * t7298 + t6567;
t6265 = t7089 * t7381 - t7203 * t7298 + t6576;
t6264 = t7089 * t7382 - t7204 * t7298 + t6574;
t6263 = t7089 * t7383 - t7205 * t7298 + t6572;
t6262 = t7089 * t7384 - t7206 * t7298 + t6570;
t6261 = t7089 * t7385 - t7207 * t7298 + t6568;
t6260 = t7089 * t7386 - t7208 * t7298 + t6566;
t6235 = t6313 * t7088 + (-t6589 * t7405 - t7080 * t7123) * t7078;
t6234 = t6312 * t7088 + (-t6588 * t7405 + t7080 * t7203) * t7078;
t6233 = t6311 * t7088 + (-t6587 * t7405 - t7080 * t7124) * t7078;
t6232 = t6310 * t7088 + (-t6586 * t7405 + t7080 * t7204) * t7078;
t6231 = t6309 * t7088 + (-t6585 * t7405 - t7080 * t7125) * t7078;
t6230 = t6308 * t7088 + (-t6584 * t7405 + t7080 * t7205) * t7078;
t6229 = t6307 * t7088 + (-t6583 * t7405 - t7080 * t7126) * t7078;
t6228 = t6306 * t7088 + (-t6582 * t7405 + t7080 * t7206) * t7078;
t6227 = t6305 * t7088 + (-t6581 * t7405 - t7080 * t7127) * t7078;
t6226 = t6304 * t7088 + (-t6580 * t7405 + t7080 * t7207) * t7078;
t6225 = t6303 * t7088 + (-t6579 * t7405 - t7080 * t7128) * t7078;
t6224 = t6302 * t7088 + (-t6578 * t7405 + t7080 * t7208) * t7078;
t6223 = t7089 * t6241;
t6222 = t7089 * t6240;
t6221 = t7089 * t6239;
t6220 = t7089 * t6238;
t6219 = t7089 * t6237;
t6218 = t7089 * t6236;
t6217 = t7087 * (-t6756 * t7516 + (-t6931 * t7040 + t6943 * t7052) * t6876) + (t6756 * t7064 - t7058 * t7148) * t7430 + (-t7180 * t7508 + t6840 * t7142 + (-t7073 * t7180 - t7077 * t7130) * t7115) * t7429;
t6216 = t7087 * (-t6755 * t7518 + (-t6929 * t7039 + t6941 * t7051) * t6875) + (t6755 * t7063 - t7057 * t7149) * t7430 + (-t7182 * t7509 + t6839 * t7143 + (-t7073 * t7182 - t7077 * t7131) * t7114) * t7429;
t6215 = t7087 * (-t6754 * t7520 + (-t6927 * t7038 + t6939 * t7050) * t6874) + (t6754 * t7062 - t7056 * t7150) * t7430 + (-t7184 * t7510 + t6838 * t7144 + (-t7073 * t7184 - t7077 * t7132) * t7113) * t7429;
t6214 = t7087 * (-t6753 * t7522 + (-t6925 * t7037 + t6937 * t7049) * t6873) + (t6753 * t7061 - t7055 * t7151) * t7430 + (-t7186 * t7511 + t6837 * t7145 + (-t7073 * t7186 - t7077 * t7133) * t7112) * t7429;
t6213 = t7087 * (-t6752 * t7524 + (-t6923 * t7036 + t6935 * t7048) * t6872) + (t6752 * t7060 - t7054 * t7152) * t7430 + (-t7188 * t7512 + t6836 * t7146 + (-t7073 * t7188 - t7077 * t7134) * t7111) * t7429;
t6212 = t7087 * (-t6757 * t7514 + (-t6933 * t7041 + t6945 * t7053) * t6877) + (t6757 * t7065 - t7059 * t7147) * t7430 + (-t7178 * t7507 + t6841 * t7141 + (-t7073 * t7178 - t7077 * t7129) * t7116) * t7429;
t6211 = -t7087 * (t7598 * t7516 - (t6930 * t7040 + t6942 * t7052) * t6876) + (-t7046 * t7148 + t7064 * t7598) * t7430 + (t7181 * t7508 + t6834 * t7142 + (t7073 * t7181 - t7074 * t7130) * t7115) * t7429;
t6210 = -t7087 * (t7597 * t7518 - (t6928 * t7039 + t6940 * t7051) * t6875) + (-t7045 * t7149 + t7063 * t7597) * t7430 + (t7183 * t7509 + t6833 * t7143 + (t7073 * t7183 - t7074 * t7131) * t7114) * t7429;
t6209 = -t7087 * (t7596 * t7520 - (t6926 * t7038 + t6938 * t7050) * t6874) + (-t7044 * t7150 + t7062 * t7596) * t7430 + (t7185 * t7510 + t6832 * t7144 + (t7073 * t7185 - t7074 * t7132) * t7113) * t7429;
t6208 = -t7087 * (t7595 * t7522 - (t6924 * t7037 + t6936 * t7049) * t6873) + (-t7043 * t7151 + t7061 * t7595) * t7430 + (t7187 * t7511 + t6831 * t7145 + (t7073 * t7187 - t7074 * t7133) * t7112) * t7429;
t6207 = -t7087 * (t7594 * t7524 - (t6922 * t7036 + t6934 * t7048) * t6872) + (-t7042 * t7152 + t7060 * t7594) * t7430 + (t7189 * t7512 + t6830 * t7146 + (t7073 * t7189 - t7074 * t7134) * t7111) * t7429;
t6206 = -t7087 * (t7593 * t7514 - (t6932 * t7041 + t6944 * t7053) * t6877) + (-t7047 * t7147 + t7065 * t7593) * t7430 + (t7179 * t7507 + t6835 * t7141 + (t7073 * t7179 - t7074 * t7129) * t7116) * t7429;
t6199 = t7089 * t6205;
t6198 = t7089 * t6204;
t6197 = t7089 * t6203;
t6196 = t7089 * t6202;
t6195 = t7089 * t6201;
t6194 = t7089 * t6200;
t6193 = ((-t6613 * t7567 + t6643 * t7084) * t7053 + (t7084 * t6613 + t6643 * t7567) * t7041) * t7085 - t6343 * t7397;
t6192 = ((-t6612 * t7567 + t6642 * t7084) * t7052 + (t7084 * t6612 + t6642 * t7567) * t7040) * t7085 - t6342 * t7397;
t6191 = ((-t6611 * t7567 + t6641 * t7084) * t7051 + (t7084 * t6611 + t6641 * t7567) * t7039) * t7085 - t6341 * t7397;
t6190 = ((-t6610 * t7567 + t6640 * t7084) * t7050 + (t7084 * t6610 + t6640 * t7567) * t7038) * t7085 - t6340 * t7397;
t6189 = ((-t6609 * t7567 + t6639 * t7084) * t7049 + (t7084 * t6609 + t6639 * t7567) * t7037) * t7085 - t6339 * t7397;
t6188 = ((-t6608 * t7567 + t6638 * t7084) * t7048 + (t7084 * t6608 + t6638 * t7567) * t7036) * t7085 - t6338 * t7397;
t6187 = ((t6607 * t7567 - t6637 * t7084) * t7053 - (t7084 * t6607 + t6637 * t7567) * t7041) * t7085 - t6337 * t7397;
t6186 = ((t6606 * t7567 - t6636 * t7084) * t7052 - (t7084 * t6606 + t6636 * t7567) * t7040) * t7085 - t6336 * t7397;
t6185 = ((t6605 * t7567 - t6635 * t7084) * t7051 - (t7084 * t6605 + t6635 * t7567) * t7039) * t7085 - t6335 * t7397;
t6184 = ((t6604 * t7567 - t6634 * t7084) * t7050 - (t7084 * t6604 + t6634 * t7567) * t7038) * t7085 - t6334 * t7397;
t6183 = ((t6603 * t7567 - t6633 * t7084) * t7049 - (t7084 * t6603 + t6633 * t7567) * t7037) * t7085 - t6333 * t7397;
t6182 = ((t6602 * t7567 - t6632 * t7084) * t7048 - (t7084 * t6602 + t6632 * t7567) * t7036) * t7085 - t6332 * t7397;
t6181 = t6289 + t7390;
t6180 = t6288 + t7391;
t6179 = t6287 + t7392;
t6178 = t6286 + t7387;
t6177 = t6285 + t7388;
t6176 = t6284 + t7389;
t6175 = t7089 * t7390 + t6295;
t6174 = t7089 * t7391 + t6294;
t6173 = t7089 * t7392 + t6293;
t6172 = t7089 * t7387 + t6292;
t6171 = t7089 * t7388 + t6291;
t6170 = t7089 * t7389 + t6290;
t6169 = t6284 + t7285;
t6168 = t6289 + t7286;
t6167 = t6288 + t7287;
t6166 = t6287 + t7288;
t6165 = t6286 + t7289;
t6164 = t6285 + t7290;
t6163 = (((t6814 * t7525 + t6982 * t7581) * t7053 + (t6814 * t7531 - t6983 * t7581) * t7041) * t7059 + t7047 * ((t6814 * t6982 - t7525 * t7581) * t7053 - (t6814 * t6983 + t7531 * t7581) * t7041)) * t7085 + t7575 * t7397;
t6162 = (((t6810 * t7526 + t6982 * t7582) * t7052 + (t6810 * t7532 - t6983 * t7582) * t7040) * t7058 + t7046 * ((t6810 * t6982 - t7526 * t7582) * t7052 - (t6810 * t6983 + t7532 * t7582) * t7040)) * t7085 + t7576 * t7397;
t6161 = (((t6806 * t7527 + t6982 * t7583) * t7051 + (t6806 * t7533 - t6983 * t7583) * t7039) * t7057 + t7045 * ((t6806 * t6982 - t7527 * t7583) * t7051 - (t6806 * t6983 + t7533 * t7583) * t7039)) * t7085 + t7577 * t7397;
t6160 = (((t6799 * t7528 + t6982 * t7584) * t7050 + (t6799 * t7534 - t6983 * t7584) * t7038) * t7056 + t7044 * ((t6799 * t6982 - t7528 * t7584) * t7050 - (t6799 * t6983 + t7534 * t7584) * t7038)) * t7085 + t7578 * t7397;
t6159 = (((t6798 * t7529 + t6982 * t7585) * t7049 + (t6798 * t7535 - t6983 * t7585) * t7037) * t7055 + t7043 * ((t6798 * t6982 - t7529 * t7585) * t7049 - (t6798 * t6983 + t7535 * t7585) * t7037)) * t7085 + t7579 * t7397;
t6158 = (((t6797 * t7530 + t6982 * t7586) * t7048 + (t6797 * t7536 - t6983 * t7586) * t7036) * t7054 + t7042 * ((t6797 * t6982 - t7530 * t7586) * t7048 - (t6797 * t6983 + t7536 * t7586) * t7036)) * t7085 + t7580 * t7397;
t6157 = t6223 + t7273;
t6156 = t6222 + t7274;
t6155 = t6221 + t7275;
t6154 = t6220 + t7276;
t6153 = t6219 + t7277;
t6152 = t6218 + t7278;
t6151 = t7089 * t7273 + t6241;
t6150 = t7089 * t7274 + t6240;
t6149 = t7089 * t7275 + t6239;
t6148 = t7089 * t7276 + t6238;
t6147 = t7089 * t7277 + t6237;
t6146 = t7089 * t7278 + t6236;
t6145 = ((-t6505 * t7074 - t6523 * t7077) * t7059 + t7047 * (t6505 * t7077 - t6523 * t7074)) * t7083 - t7087 * ((-t6595 * t7074 + t6601 * t7077) * t7059 + (t6595 * t7077 + t6601 * t7074) * t7047);
t6144 = ((-t6504 * t7074 - t6522 * t7077) * t7058 + t7046 * (t6504 * t7077 - t6522 * t7074)) * t7083 - t7087 * ((-t6594 * t7074 + t6600 * t7077) * t7058 + (t6594 * t7077 + t6600 * t7074) * t7046);
t6143 = ((-t6503 * t7074 - t6521 * t7077) * t7057 + t7045 * (t6503 * t7077 - t6521 * t7074)) * t7083 - t7087 * ((-t6593 * t7074 + t6599 * t7077) * t7057 + (t6593 * t7077 + t6599 * t7074) * t7045);
t6142 = ((-t6502 * t7074 - t6520 * t7077) * t7056 + t7044 * (t6502 * t7077 - t6520 * t7074)) * t7083 - t7087 * ((-t6592 * t7074 + t6598 * t7077) * t7056 + (t6592 * t7077 + t6598 * t7074) * t7044);
t6141 = ((-t6501 * t7074 - t6519 * t7077) * t7055 + t7043 * (t6501 * t7077 - t6519 * t7074)) * t7083 - t7087 * ((-t6591 * t7074 + t6597 * t7077) * t7055 + (t6591 * t7077 + t6597 * t7074) * t7043);
t6140 = ((-t6500 * t7074 - t6518 * t7077) * t7054 + t7042 * (t6500 * t7077 - t6518 * t7074)) * t7083 - t7087 * ((-t6590 * t7074 + t6596 * t7077) * t7054 + (t6590 * t7077 + t6596 * t7074) * t7042);
t6137 = -t6409 * t7291 + t7089 * t7285 + t6290;
t6136 = -t6408 * t7291 + t7089 * t7286 + t6295;
t6135 = -t6407 * t7291 + t7089 * t7287 + t6294;
t6134 = -t6406 * t7291 + t7089 * t7288 + t6293;
t6133 = -t6405 * t7291 + t7089 * t7289 + t6292;
t6132 = -t6404 * t7291 + t7089 * t7290 + t6291;
t6131 = t6199 + t7279;
t6130 = t6198 + t7280;
t6129 = t6197 + t7281;
t6128 = t6196 + t7282;
t6127 = t6195 + t7283;
t6126 = t6194 + t7284;
t6125 = t7089 * t7279 + t6205;
t6124 = t7089 * t7280 + t6204;
t6123 = t7089 * t7281 + t6203;
t6122 = t7089 * t7282 + t6202;
t6121 = t7089 * t7283 + t6201;
t6120 = t7089 * t7284 + t6200;
t6119 = t6181 * t7088 - t6295 * t7291 + t6408;
t6118 = t6180 * t7088 - t6294 * t7291 + t6407;
t6117 = t6179 * t7088 - t6293 * t7291 + t6406;
t6116 = t6178 * t7088 - t6292 * t7291 + t6405;
t6115 = t6177 * t7088 - t6291 * t7291 + t6404;
t6114 = t6176 * t7088 - t6290 * t7291 + t6409;
t6113 = t6223 + t7215;
t6112 = t6222 + t7216;
t6111 = t6221 + t7217;
t6110 = t6220 + t7218;
t6109 = t6219 + t7219;
t6108 = t6218 + t7220;
t6106 = -t6331 * t7291 + t7089 * t7215 + t6241;
t6105 = -t6330 * t7291 + t7089 * t7216 + t6240;
t6104 = -t6329 * t7291 + t7089 * t7217 + t6239;
t6103 = -t6328 * t7291 + t7089 * t7218 + t6238;
t6102 = -t6327 * t7291 + t7089 * t7219 + t6237;
t6101 = -t6326 * t7291 + t7089 * t7220 + t6236;
t6100 = t6199 + t7221;
t6099 = t6198 + t7222;
t6098 = t6197 + t7223;
t6097 = t6196 + t7224;
t6096 = t6195 + t7225;
t6095 = t6194 + t7226;
t6094 = t6157 * t7088 - t6241 * t7291 + t6331;
t6093 = t6156 * t7088 - t6240 * t7291 + t6330;
t6092 = t6155 * t7088 - t6239 * t7291 + t6329;
t6091 = t6154 * t7088 - t6238 * t7291 + t6328;
t6090 = t6153 * t7088 - t6237 * t7291 + t6327;
t6089 = t6152 * t7088 - t6236 * t7291 + t6326;
t6088 = -t6259 * t7291 + t7089 * t7221 + t6205;
t6087 = -t6258 * t7291 + t7089 * t7222 + t6204;
t6086 = -t6257 * t7291 + t7089 * t7223 + t6203;
t6085 = -t6256 * t7291 + t7089 * t7224 + t6202;
t6084 = -t6255 * t7291 + t7089 * t7225 + t6201;
t6083 = -t6254 * t7291 + t7089 * t7226 + t6200;
t6082 = t6131 * t7088 - t6205 * t7291 + t6259;
t6081 = t6130 * t7088 - t6204 * t7291 + t6258;
t6080 = t6129 * t7088 - t6203 * t7291 + t6257;
t6079 = t6128 * t7088 - t6202 * t7291 + t6256;
t6078 = t6127 * t7088 - t6201 * t7291 + t6255;
t6077 = t6126 * t7088 - t6200 * t7291 + t6254;
t1 = [(t7033 + (t7032 + t7034) * t7035) * MDP(13) + (t6725 ^ 2 + t6726 ^ 2 + t6727 ^ 2 + t6728 ^ 2 + t6729 ^ 2 + t6730 ^ 2) * t7350 + ((-t6356 * t7524 - t6357 * t7522 - t6358 * t7520 - t6359 * t7518 - t6360 * t7516 - t6361 * t7514) * t7566 + ((t6725 * t6512 + t6726 * t6513 + t6727 * t6514 + t6728 * t6515 + t6729 * t6516 + t6730 * t6517) * MDP(2) + (t6392 * t6725 + t6393 * t6726 + t6394 * t6727 + t6395 * t6728 + t6396 * t6729 + t6397 * t6730) * MDP(3) + ((t6506 * t7556 + t6507 * t7555 + t6508 * t7554 + t6509 * t7553 + t6510 * t7552 + t6511 * t7551) * MDP(2) + (t6434 * t7556 + t6435 * t7555 + t6436 * t7554 + t6437 * t7553 + t6438 * t7552 + t6439 * t7551) * MDP(3)) * t7080) * t7081) * t7078; ((-t6225 * t7524 - t6227 * t7522 - t6229 * t7520 - t6231 * t7518 - t6233 * t7516 - t6235 * t7514) * t7566 + ((t6315 * t6725 + t6317 * t6726 + t6319 * t6727 + t6321 * t6728 + t6323 * t6729 + t6325 * t6730) * MDP(2) + (t6266 * t6725 + t6267 * t6726 + t6268 * t6727 + t6269 * t6728 + t6270 * t6729 + t6271 * t6730) * MDP(3) + ((t6303 * t7556 + t6305 * t7555 + t6307 * t7554 + t6309 * t7553 + t6311 * t7552 + t6313 * t7551) * MDP(2) + (t6278 * t7556 + t6279 * t7555 + t6280 * t7554 + t6281 * t7553 + t6282 * t7552 + t6283 * t7551) * MDP(3)) * t7080) * t7081) * t7078 + t7393; ((-t6224 * t7524 - t6226 * t7522 - t6228 * t7520 - t6230 * t7518 - t6232 * t7516 - t6234 * t7514) * t7566 + ((t6725 * t6314 + t6726 * t6316 + t6727 * t6318 + t6728 * t6320 + t6729 * t6322 + t6730 * t6324) * MDP(2) + (t6725 * t6260 + t6726 * t6261 + t6727 * t6262 + t6728 * t6263 + t6729 * t6264 + t6730 * t6265) * MDP(3) + ((t6302 * t7556 + t6304 * t7555 + t6306 * t7554 + t6308 * t7553 + t6310 * t7552 + t6312 * t7551) * MDP(2) + (t6272 * t7556 + t6273 * t7555 + t6274 * t7554 + t6275 * t7553 + t6276 * t7552 + t6277 * t7551) * MDP(3)) * t7080) * t7081) * t7078 + t7394; ((-t6114 * t7518 - t6115 * t7516 - t6116 * t7514 - t6117 * t7524 - t6118 * t7522 - t6119 * t7520) * t7566 + ((t6290 * t6728 + t6291 * t6729 + t6292 * t6730 + t6293 * t6725 + t6294 * t6726 + t6295 * t6727) * MDP(1) + (t6728 * t6170 + t6729 * t6171 + t6730 * t6172 + t6725 * t6173 + t6726 * t6174 + t6727 * t6175) * MDP(2) + (t6132 * t6729 + t6133 * t6730 + t6134 * t6725 + t6135 * t6726 + t6136 * t6727 + t6137 * t6728) * MDP(3) + ((t6176 * t7553 + t6177 * t7552 + t6178 * t7551 + t6179 * t7556 + t6180 * t7555 + t6181 * t7554) * MDP(2) + (t6164 * t7552 + t6165 * t7551 + t6166 * t7556 + t6167 * t7555 + t6168 * t7554 + t6169 * t7553) * MDP(3)) * t7080) * t7081) * t7078; (t7012 + t7506) * MDP(12) - t7202 * t7073 + ((-t6089 * t7524 - t6090 * t7522 - t6091 * t7520 - t6092 * t7518 - t6093 * t7516 - t6094 * t7514) * t7566 + ((t6236 * t6725 + t6237 * t6726 + t6238 * t6727 + t6239 * t6728 + t6240 * t6729 + t6241 * t6730) * MDP(1) + (t6725 * t6146 + t6726 * t6147 + t6727 * t6148 + t6728 * t6149 + t6729 * t6150 + t6730 * t6151) * MDP(2) + (t6725 * t6101 + t6726 * t6102 + t6727 * t6103 + t6728 * t6104 + t6729 * t6105 + t6730 * t6106) * MDP(3) + ((t6152 * t7556 + t6153 * t7555 + t6154 * t7554 + t6155 * t7553 + t6156 * t7552 + t6157 * t7551) * MDP(2) + (t6108 * t7556 + t6109 * t7555 + t6110 * t7554 + t6111 * t7553 + t6112 * t7552 + t6113 * t7551) * MDP(3)) * t7080) * t7081) * t7078; (-MDP(10) * t7072 - MDP(11) * t7075) * t7076 + ((-t6077 * t7524 - t6078 * t7522 - t6079 * t7520 - t6080 * t7518 - t6081 * t7516 - t6082 * t7514) * t7566 + ((t6200 * t6725 + t6201 * t6726 + t6202 * t6727 + t6203 * t6728 + t6204 * t6729 + t6205 * t6730) * MDP(1) + (t6725 * t6120 + t6726 * t6121 + t6727 * t6122 + t6728 * t6123 + t6729 * t6124 + t6730 * t6125) * MDP(2) + (t6083 * t6725 + t6084 * t6726 + t6085 * t6727 + t6086 * t6728 + t6087 * t6729 + t6088 * t6730) * MDP(3) + ((t6126 * t7556 + t6127 * t7555 + t6128 * t7554 + t6129 * t7553 + t6130 * t7552 + t6131 * t7551) * MDP(2) + (t6095 * t7556 + t6096 * t7555 + t6097 * t7554 + t6098 * t7553 + t6099 * t7552 + t6100 * t7551) * MDP(3)) * t7080) * t7081) * t7078; ((-t6356 * t7128 - t6357 * t7127 - t6358 * t7126 - t6359 * t7125 - t6360 * t7124 - t6361 * t7123) * t7566 + ((t6512 * t6579 + t6513 * t6581 + t6514 * t6583 + t6515 * t6585 + t6516 * t6587 + t6517 * t6589) * MDP(2) + (t6392 * t6579 + t6393 * t6581 + t6394 * t6583 + t6395 * t6585 + t6396 * t6587 + t6397 * t6589) * MDP(3) + ((t6494 * t6506 + t6495 * t6507 + t6496 * t6508 + t6497 * t6509 + t6498 * t6510 + t6499 * t6511) * MDP(2) + (t6434 * t6494 + t6435 * t6495 + t6436 * t6496 + t6437 * t6497 + t6438 * t6498 + t6439 * t6499) * MDP(3)) * t7080) * t7081) * t7078 + t7393; (t7035 * t7074 ^ 2 + t6916 ^ 2 + t6918 ^ 2) * MDP(13) + (t6579 ^ 2 + t6581 ^ 2 + t6583 ^ 2 + t6585 ^ 2 + t6587 ^ 2 + t6589 ^ 2) * t7350 + ((-t6225 * t7128 - t6227 * t7127 - t6229 * t7126 - t6231 * t7125 - t6233 * t7124 - t6235 * t7123) * t7566 + ((t6315 * t6579 + t6317 * t6581 + t6319 * t6583 + t6321 * t6585 + t6323 * t6587 + t6325 * t6589) * MDP(2) + (t6266 * t6579 + t6267 * t6581 + t6268 * t6583 + t6269 * t6585 + t6270 * t6587 + t6271 * t6589) * MDP(3) + ((t6303 * t6494 + t6305 * t6495 + t6307 * t6496 + t6309 * t6497 + t6311 * t6498 + t6313 * t6499) * MDP(2) + (t6278 * t6494 + t6279 * t6495 + t6280 * t6496 + t6281 * t6497 + t6282 * t6498 + t6283 * t6499) * MDP(3)) * t7080) * t7081) * t7078; ((-t6224 * t7128 - t6226 * t7127 - t6228 * t7126 - t6230 * t7125 - t6232 * t7124 - t6234 * t7123) * t7566 + ((t6314 * t6579 + t6316 * t6581 + t6318 * t6583 + t6320 * t6585 + t6322 * t6587 + t6324 * t6589) * MDP(2) + (t6260 * t6579 + t6261 * t6581 + t6262 * t6583 + t6263 * t6585 + t6264 * t6587 + t6265 * t6589) * MDP(3) + ((t6302 * t6494 + t6304 * t6495 + t6306 * t6496 + t6308 * t6497 + t6310 * t6498 + t6312 * t6499) * MDP(2) + (t6272 * t6494 + t6273 * t6495 + t6274 * t6496 + t6275 * t6497 + t6276 * t6498 + t6277 * t6499) * MDP(3)) * t7080) * t7081) * t7078 + t7395; ((-t6114 * t7125 - t6115 * t7124 - t6116 * t7123 - t6117 * t7128 - t6118 * t7127 - t6119 * t7126) * t7566 + ((t6290 * t6585 + t6291 * t6587 + t6292 * t6589 + t6293 * t6579 + t6294 * t6581 + t6295 * t6583) * MDP(1) + (t6170 * t6585 + t6171 * t6587 + t6172 * t6589 + t6173 * t6579 + t6174 * t6581 + t6175 * t6583) * MDP(2) + (t6132 * t6587 + t6133 * t6589 + t6134 * t6579 + t6135 * t6581 + t6136 * t6583 + t6137 * t6585) * MDP(3) + ((t6176 * t6497 + t6177 * t6498 + t6178 * t6499 + t6179 * t6494 + t6180 * t6495 + t6181 * t6496) * MDP(2) + (t6164 * t6498 + t6165 * t6499 + t6166 * t6494 + t6167 * t6495 + t6168 * t6496 + t6169 * t6497) * MDP(3)) * t7080) * t7081) * t7078 + t7602; t7600 * MDP(12) + t7202 * t7447 + ((-t6089 * t7128 - t6090 * t7127 - t6091 * t7126 - t6092 * t7125 - t6093 * t7124 - t6094 * t7123) * t7566 + ((t6236 * t6579 + t6237 * t6581 + t6238 * t6583 + t6239 * t6585 + t6240 * t6587 + t6241 * t6589) * MDP(1) + (t6146 * t6579 + t6147 * t6581 + t6148 * t6583 + t6149 * t6585 + t6150 * t6587 + t6151 * t6589) * MDP(2) + (t6101 * t6579 + t6102 * t6581 + t6103 * t6583 + t6104 * t6585 + t6105 * t6587 + t6106 * t6589) * MDP(3) + ((t6152 * t6494 + t6153 * t6495 + t6154 * t6496 + t6155 * t6497 + t6156 * t6498 + t6157 * t6499) * MDP(2) + (t6108 * t6494 + t6109 * t6495 + t6110 * t6496 + t6111 * t6497 + t6112 * t6498 + t6113 * t6499) * MDP(3)) * t7080) * t7081) * t7078; -t6916 * MDP(10) - t6918 * MDP(11) + ((-t6077 * t7128 - t6078 * t7127 - t6079 * t7126 - t6080 * t7125 - t6081 * t7124 - t6082 * t7123) * t7566 + ((t6200 * t6579 + t6201 * t6581 + t6202 * t6583 + t6203 * t6585 + t6204 * t6587 + t6205 * t6589) * MDP(1) + (t6120 * t6579 + t6121 * t6581 + t6122 * t6583 + t6123 * t6585 + t6124 * t6587 + t6125 * t6589) * MDP(2) + (t6083 * t6579 + t6084 * t6581 + t6085 * t6583 + t6086 * t6585 + t6087 * t6587 + t6088 * t6589) * MDP(3) + ((t6126 * t6494 + t6127 * t6495 + t6128 * t6496 + t6129 * t6497 + t6130 * t6498 + t6131 * t6499) * MDP(2) + (t6095 * t6494 + t6096 * t6495 + t6097 * t6496 + t6098 * t6497 + t6099 * t6498 + t6100 * t6499) * MDP(3)) * t7080) * t7081) * t7078; ((t6356 * t7208 + t6357 * t7207 + t6358 * t7206 + t6359 * t7205 + t6360 * t7204 + t6361 * t7203) * t7566 + ((t6512 * t6578 + t6513 * t6580 + t6514 * t6582 + t6515 * t6584 + t6516 * t6586 + t6517 * t6588) * MDP(2) + (t6392 * t6578 + t6393 * t6580 + t6394 * t6582 + t6395 * t6584 + t6396 * t6586 + t6397 * t6588) * MDP(3) + ((t6488 * t6506 + t6489 * t6507 + t6490 * t6508 + t6491 * t6509 + t6492 * t6510 + t6493 * t6511) * MDP(2) + (t6434 * t6488 + t6435 * t6489 + t6436 * t6490 + t6437 * t6491 + t6438 * t6492 + t6439 * t6493) * MDP(3)) * t7080) * t7081) * t7078 + t7394; ((t6225 * t7208 + t6227 * t7207 + t6229 * t7206 + t6231 * t7205 + t6233 * t7204 + t6235 * t7203) * t7566 + ((t6315 * t6578 + t6317 * t6580 + t6319 * t6582 + t6321 * t6584 + t6323 * t6586 + t6325 * t6588) * MDP(2) + (t6266 * t6578 + t6267 * t6580 + t6268 * t6582 + t6269 * t6584 + t6270 * t6586 + t6271 * t6588) * MDP(3) + ((t6303 * t6488 + t6305 * t6489 + t6307 * t6490 + t6309 * t6491 + t6311 * t6492 + t6313 * t6493) * MDP(2) + (t6278 * t6488 + t6279 * t6489 + t6280 * t6490 + t6281 * t6491 + t6282 * t6492 + t6283 * t6493) * MDP(3)) * t7080) * t7081) * t7078 + t7395; (t7035 * t7077 ^ 2 + t6919 ^ 2 + t6920 ^ 2) * MDP(13) + (t6578 ^ 2 + t6580 ^ 2 + t6582 ^ 2 + t6584 ^ 2 + t6586 ^ 2 + t6588 ^ 2) * t7350 + ((t6224 * t7208 + t6226 * t7207 + t6228 * t7206 + t6230 * t7205 + t6232 * t7204 + t6234 * t7203) * t7566 + ((t6314 * t6578 + t6316 * t6580 + t6318 * t6582 + t6320 * t6584 + t6322 * t6586 + t6324 * t6588) * MDP(2) + (t6260 * t6578 + t6261 * t6580 + t6262 * t6582 + t6263 * t6584 + t6264 * t6586 + t6265 * t6588) * MDP(3) + ((t6302 * t6488 + t6304 * t6489 + t6306 * t6490 + t6308 * t6491 + t6310 * t6492 + t6312 * t6493) * MDP(2) + (t6272 * t6488 + t6273 * t6489 + t6274 * t6490 + t6275 * t6491 + t6276 * t6492 + t6277 * t6493) * MDP(3)) * t7080) * t7081) * t7078; ((t6114 * t7205 + t6115 * t7204 + t6116 * t7203 + t6117 * t7208 + t6118 * t7207 + t6119 * t7206) * t7566 + ((t6290 * t6584 + t6291 * t6586 + t6292 * t6588 + t6293 * t6578 + t6294 * t6580 + t6295 * t6582) * MDP(1) + (t6170 * t6584 + t6171 * t6586 + t6172 * t6588 + t6173 * t6578 + t6174 * t6580 + t6175 * t6582) * MDP(2) + (t6132 * t6586 + t6133 * t6588 + t6134 * t6578 + t6135 * t6580 + t6136 * t6582 + t6137 * t6584) * MDP(3) + ((t6176 * t6491 + t6177 * t6492 + t6178 * t6493 + t6179 * t6488 + t6180 * t6489 + t6181 * t6490) * MDP(2) + (t6164 * t6492 + t6165 * t6493 + t6166 * t6488 + t6167 * t6489 + t6168 * t6490 + t6169 * t6491) * MDP(3)) * t7080) * t7081) * t7078 + t7601; t7599 * MDP(12) - t7202 * t7440 + ((t6089 * t7208 + t6090 * t7207 + t6091 * t7206 + t6092 * t7205 + t6093 * t7204 + t6094 * t7203) * t7566 + ((t6236 * t6578 + t6237 * t6580 + t6238 * t6582 + t6239 * t6584 + t6240 * t6586 + t6241 * t6588) * MDP(1) + (t6146 * t6578 + t6147 * t6580 + t6148 * t6582 + t6149 * t6584 + t6150 * t6586 + t6151 * t6588) * MDP(2) + (t6101 * t6578 + t6102 * t6580 + t6103 * t6582 + t6104 * t6584 + t6105 * t6586 + t6106 * t6588) * MDP(3) + ((t6152 * t6488 + t6153 * t6489 + t6154 * t6490 + t6155 * t6491 + t6156 * t6492 + t6157 * t6493) * MDP(2) + (t6108 * t6488 + t6109 * t6489 + t6110 * t6490 + t6111 * t6491 + t6112 * t6492 + t6113 * t6493) * MDP(3)) * t7080) * t7081) * t7078; t6919 * MDP(10) + t6920 * MDP(11) + ((t6077 * t7208 + t6078 * t7207 + t6079 * t7206 + t6080 * t7205 + t6081 * t7204 + t6082 * t7203) * t7566 + ((t6200 * t6578 + t6201 * t6580 + t6202 * t6582 + t6203 * t6584 + t6204 * t6586 + t6205 * t6588) * MDP(1) + (t6120 * t6578 + t6121 * t6580 + t6122 * t6582 + t6123 * t6584 + t6124 * t6586 + t6125 * t6588) * MDP(2) + (t6083 * t6578 + t6084 * t6580 + t6085 * t6582 + t6086 * t6584 + t6087 * t6586 + t6088 * t6588) * MDP(3) + ((t6126 * t6488 + t6127 * t6489 + t6128 * t6490 + t6129 * t6491 + t6130 * t6492 + t6131 * t6493) * MDP(2) + (t6095 * t6488 + t6096 * t6489 + t6097 * t6490 + t6098 * t6491 + t6099 * t6492 + t6100 * t6493) * MDP(3)) * t7080) * t7081) * t7078; (t6140 * t6725 + t6141 * t6726 + t6142 * t6727 + t6143 * t6728 + t6144 * t6729 + t6145 * t6730) * t7350 + ((-t6356 * t7580 - t6357 * t7579 - t6358 * t7578 - t6359 * t7577 - t6360 * t7576 - t6361 * t7575) * t7566 + ((t6140 * t6512 + t6141 * t6513 + t6142 * t6514 + t6143 * t6515 + t6144 * t6516 + t6145 * t6517) * MDP(2) + (t6140 * t6392 + t6141 * t6393 + t6142 * t6394 + t6143 * t6395 + t6144 * t6396 + t6145 * t6397) * MDP(3) + ((t6158 * t6506 + t6159 * t6507 + t6160 * t6508 + t6161 * t6509 + t6162 * t6510 + t6163 * t6511) * MDP(2) + (t6158 * t6434 + t6159 * t6435 + t6160 * t6436 + t6161 * t6437 + t6162 * t6438 + t6163 * t6439) * MDP(3)) * t7080) * t7081) * t7078; (t6140 * t6579 + t6141 * t6581 + t6142 * t6583 + t6143 * t6585 + t6144 * t6587 + t6145 * t6589) * t7350 + ((-t6225 * t7580 - t6227 * t7579 - t6229 * t7578 - t6231 * t7577 - t6233 * t7576 - t6235 * t7575) * t7566 + ((t6140 * t6315 + t6141 * t6317 + t6142 * t6319 + t6143 * t6321 + t6144 * t6323 + t6145 * t6325) * MDP(2) + (t6140 * t6266 + t6141 * t6267 + t6142 * t6268 + t6143 * t6269 + t6144 * t6270 + t6145 * t6271) * MDP(3) + ((t6158 * t6303 + t6159 * t6305 + t6160 * t6307 + t6161 * t6309 + t6162 * t6311 + t6163 * t6313) * MDP(2) + (t6158 * t6278 + t6159 * t6279 + t6160 * t6280 + t6161 * t6281 + t6162 * t6282 + t6163 * t6283) * MDP(3)) * t7080) * t7081) * t7078 + t7602; (t6140 * t6578 + t6141 * t6580 + t6142 * t6582 + t6143 * t6584 + t6144 * t6586 + t6145 * t6588) * t7350 + ((-t6224 * t7580 - t6226 * t7579 - t6228 * t7578 - t6230 * t7577 - t6232 * t7576 - t6234 * t7575) * t7566 + ((t6140 * t6314 + t6141 * t6316 + t6142 * t6318 + t6143 * t6320 + t6144 * t6322 + t6145 * t6324) * MDP(2) + (t6140 * t6260 + t6141 * t6261 + t6142 * t6262 + t6143 * t6263 + t6144 * t6264 + t6145 * t6265) * MDP(3) + ((t6158 * t6302 + t6159 * t6304 + t6160 * t6306 + t6161 * t6308 + t6162 * t6310 + t6163 * t6312) * MDP(2) + (t6158 * t6272 + t6159 * t6273 + t6160 * t6274 + t6161 * t6275 + t6162 * t6276 + t6163 * t6277) * MDP(3)) * t7080) * t7081) * t7078 + t7601; t7033 * MDP(9) + 0.2e1 * t7073 * t7153 + (-0.2e1 * MDP(5) * t7072 * t7075 + MDP(4) * t7034 + MDP(7) * t7032) * t7035 + ((-t6114 * t7577 - t6115 * t7576 - t6116 * t7575 - t6117 * t7580 - t6118 * t7579 - t6119 * t7578) * t7566 + ((t6140 * t6293 + t6141 * t6294 + t6142 * t6295 + t6143 * t6290 + t6144 * t6291 + t6145 * t6292) * MDP(1) + (t6140 * t6173 + t6141 * t6174 + t6142 * t6175 + t6143 * t6170 + t6144 * t6171 + t6145 * t6172) * MDP(2) + (t6132 * t6144 + t6133 * t6145 + t6134 * t6140 + t6135 * t6141 + t6136 * t6142 + t6137 * t6143) * MDP(3) + ((t6158 * t6179 + t6159 * t6180 + t6160 * t6181 + t6161 * t6176 + t6162 * t6177 + t6163 * t6178) * MDP(2) + (t6158 * t6166 + t6159 * t6167 + t6160 * t6168 + t6161 * t6169 + t6162 * t6164 + t6163 * t6165) * MDP(3)) * t7080) * t7081) * t7078; (t7012 - t7506) * MDP(5) + t7073 * t7075 * MDP(8) + (t7073 * MDP(6) + (MDP(4) - MDP(7)) * t7076 * t7075) * t7072 + ((-t6089 * t7580 - t6090 * t7579 - t6091 * t7578 - t6092 * t7577 - t6093 * t7576 - t6094 * t7575) * t7566 + ((t6140 * t6236 + t6141 * t6237 + t6142 * t6238 + t6143 * t6239 + t6144 * t6240 + t6145 * t6241) * MDP(1) + (t6140 * t6146 + t6141 * t6147 + t6142 * t6148 + t6143 * t6149 + t6144 * t6150 + t6145 * t6151) * MDP(2) + (t6101 * t6140 + t6102 * t6141 + t6103 * t6142 + t6104 * t6143 + t6105 * t6144 + t6106 * t6145) * MDP(3) + ((t6152 * t6158 + t6153 * t6159 + t6154 * t6160 + t6155 * t6161 + t6156 * t6162 + t6157 * t6163) * MDP(2) + (t6108 * t6158 + t6109 * t6159 + t6110 * t6160 + t6111 * t6161 + t6112 * t6162 + t6113 * t6163) * MDP(3)) * t7080) * t7081) * t7078; t7073 * MDP(9) + t7153 + ((-t6077 * t7580 - t6078 * t7579 - t6079 * t7578 - t6080 * t7577 - t6081 * t7576 - t6082 * t7575) * t7566 + ((t6140 * t6200 + t6141 * t6201 + t6142 * t6202 + t6143 * t6203 + t6144 * t6204 + t6145 * t6205) * MDP(1) + (t6120 * t6140 + t6121 * t6141 + t6122 * t6142 + t6123 * t6143 + t6124 * t6144 + t6125 * t6145) * MDP(2) + (t6083 * t6140 + t6084 * t6141 + t6085 * t6142 + t6086 * t6143 + t6087 * t6144 + t6088 * t6145) * MDP(3) + ((t6126 * t6158 + t6127 * t6159 + t6128 * t6160 + t6129 * t6161 + t6130 * t6162 + t6131 * t6163) * MDP(2) + (t6095 * t6158 + t6096 * t6159 + t6097 * t6160 + t6098 * t6161 + t6099 * t6162 + t6100 * t6163) * MDP(3)) * t7080) * t7081) * t7078; (t6212 * t6730 + t6213 * t6725 + t6214 * t6726 + t6215 * t6727 + t6216 * t6728 + t6217 * t6729) * t7350 + ((t6338 * t6356 + t6339 * t6357 + t6340 * t6358 + t6341 * t6359 + t6342 * t6360 + t6343 * t6361) * t7566 + ((t6212 * t6517 + t6213 * t6512 + t6214 * t6513 + t6215 * t6514 + t6216 * t6515 + t6217 * t6516) * MDP(2) + (t6212 * t6397 + t6213 * t6392 + t6214 * t6393 + t6215 * t6394 + t6216 * t6395 + t6217 * t6396) * MDP(3) + ((t6188 * t6506 + t6189 * t6507 + t6190 * t6508 + t6191 * t6509 + t6192 * t6510 + t6193 * t6511) * MDP(2) + (t6188 * t6434 + t6189 * t6435 + t6190 * t6436 + t6191 * t6437 + t6192 * t6438 + t6193 * t6439) * MDP(3)) * t7080) * t7081) * t7078 - t7602; (t6212 * t6589 + t6213 * t6579 + t6214 * t6581 + t6215 * t6583 + t6216 * t6585 + t6217 * t6587) * t7350 + ((t6225 * t6338 + t6227 * t6339 + t6229 * t6340 + t6231 * t6341 + t6233 * t6342 + t6235 * t6343) * t7566 + ((t6212 * t6325 + t6213 * t6315 + t6214 * t6317 + t6215 * t6319 + t6216 * t6321 + t6217 * t6323) * MDP(2) + (t6212 * t6271 + t6213 * t6266 + t6214 * t6267 + t6215 * t6268 + t6216 * t6269 + t6217 * t6270) * MDP(3) + ((t6188 * t6303 + t6189 * t6305 + t6190 * t6307 + t6191 * t6309 + t6192 * t6311 + t6193 * t6313) * MDP(2) + (t6188 * t6278 + t6189 * t6279 + t6190 * t6280 + t6191 * t6281 + t6192 * t6282 + t6193 * t6283) * MDP(3)) * t7080) * t7081) * t7078; (t6212 * t6588 + t6213 * t6578 + t6214 * t6580 + t6215 * t6582 + t6216 * t6584 + t6217 * t6586) * t7350 + ((t6338 * t6224 + t6339 * t6226 + t6340 * t6228 + t6341 * t6230 + t6342 * t6232 + t6343 * t6234) * t7566 + ((t6212 * t6324 + t6213 * t6314 + t6214 * t6316 + t6215 * t6318 + t6216 * t6320 + t6217 * t6322) * MDP(2) + (t6212 * t6265 + t6213 * t6260 + t6214 * t6261 + t6215 * t6262 + t6216 * t6263 + t6217 * t6264) * MDP(3) + ((t6188 * t6302 + t6189 * t6304 + t6190 * t6306 + t6191 * t6308 + t6192 * t6310 + t6193 * t6312) * MDP(2) + (t6188 * t6272 + t6189 * t6273 + t6190 * t6274 + t6191 * t6275 + t6192 * t6276 + t6193 * t6277) * MDP(3)) * t7080) * t7081) * t7078 + t7574; (-t7330 + t7542) * MDP(6) + (t7002 - t7545) * MDP(8) + (MDP(4) * t6878 + (-t7543 - t7544) * MDP(5) + MDP(7) * t7546 - MDP(9) * t7457) * t7076 + ((t6341 * t6114 + t6342 * t6115 + t6343 * t6116 + t6338 * t6117 + t6339 * t6118 + t6340 * t6119) * t7566 + ((t6212 * t6292 + t6213 * t6293 + t6214 * t6294 + t6215 * t6295 + t6216 * t6290 + t6217 * t6291) * MDP(1) + (t6170 * t6216 + t6171 * t6217 + t6172 * t6212 + t6173 * t6213 + t6174 * t6214 + t6175 * t6215) * MDP(2) + (t6132 * t6217 + t6133 * t6212 + t6134 * t6213 + t6135 * t6214 + t6136 * t6215 + t6137 * t6216) * MDP(3) + ((t6176 * t6191 + t6177 * t6192 + t6178 * t6193 + t6179 * t6188 + t6180 * t6189 + t6181 * t6190) * MDP(2) + (t6164 * t6192 + t6165 * t6193 + t6166 * t6188 + t6167 * t6189 + t6168 * t6190 + t6169 * t6191) * MDP(3)) * t7080) * t7081) * t7078; t6878 * MDP(5) + (-MDP(7) * t6916 - MDP(8) * t7447) * t7075 + (MDP(4) * t6918 - MDP(5) * t6916 - MDP(6) * t7447) * t7072 + ((t6338 * t6089 + t6339 * t6090 + t6340 * t6091 + t6341 * t6092 + t6342 * t6093 + t6343 * t6094) * t7566 + ((t6212 * t6241 + t6213 * t6236 + t6214 * t6237 + t6215 * t6238 + t6216 * t6239 + t6217 * t6240) * MDP(1) + (t6146 * t6213 + t6147 * t6214 + t6148 * t6215 + t6149 * t6216 + t6150 * t6217 + t6151 * t6212) * MDP(2) + (t6101 * t6213 + t6102 * t6214 + t6103 * t6215 + t6104 * t6216 + t6105 * t6217 + t6106 * t6212) * MDP(3) + ((t6152 * t6188 + t6153 * t6189 + t6154 * t6190 + t6155 * t6191 + t6156 * t6192 + t6157 * t6193) * MDP(2) + (t6108 * t6188 + t6109 * t6189 + t6110 * t6190 + t6111 * t6191 + t6112 * t6192 + t6113 * t6193) * MDP(3)) * t7080) * t7081) * t7078; -MDP(9) * t7447 + t6918 * MDP(6) - t6916 * MDP(8) + ((t6077 * t6338 + t6078 * t6339 + t6079 * t6340 + t6080 * t6341 + t6081 * t6342 + t6082 * t6343) * t7566 + ((t6200 * t6213 + t6201 * t6214 + t6202 * t6215 + t6203 * t6216 + t6204 * t6217 + t6205 * t6212) * MDP(1) + (t6120 * t6213 + t6121 * t6214 + t6122 * t6215 + t6123 * t6216 + t6124 * t6217 + t6125 * t6212) * MDP(2) + (t6083 * t6213 + t6084 * t6214 + t6085 * t6215 + t6086 * t6216 + t6087 * t6217 + t6088 * t6212) * MDP(3) + ((t6126 * t6188 + t6127 * t6189 + t6128 * t6190 + t6129 * t6191 + t6130 * t6192 + t6131 * t6193) * MDP(2) + (t6095 * t6188 + t6096 * t6189 + t6097 * t6190 + t6098 * t6191 + t6099 * t6192 + t6100 * t6193) * MDP(3)) * t7080) * t7081) * t7078; (t6206 * t6730 + t6207 * t6725 + t6208 * t6726 + t6209 * t6727 + t6210 * t6728 + t6211 * t6729) * t7350 + ((t6332 * t6356 + t6333 * t6357 + t6334 * t6358 + t6335 * t6359 + t6336 * t6360 + t6337 * t6361) * t7566 + ((t6206 * t6517 + t6207 * t6512 + t6208 * t6513 + t6209 * t6514 + t6210 * t6515 + t6211 * t6516) * MDP(2) + (t6206 * t6397 + t6207 * t6392 + t6208 * t6393 + t6209 * t6394 + t6210 * t6395 + t6211 * t6396) * MDP(3) + ((t6182 * t6506 + t6183 * t6507 + t6184 * t6508 + t6185 * t6509 + t6186 * t6510 + t6187 * t6511) * MDP(2) + (t6182 * t6434 + t6183 * t6435 + t6184 * t6436 + t6185 * t6437 + t6186 * t6438 + t6187 * t6439) * MDP(3)) * t7080) * t7081) * t7078 - t7601; (t6206 * t6589 + t6207 * t6579 + t6208 * t6581 + t6209 * t6583 + t6210 * t6585 + t6211 * t6587) * t7350 + ((t6225 * t6332 + t6227 * t6333 + t6229 * t6334 + t6231 * t6335 + t6233 * t6336 + t6235 * t6337) * t7566 + ((t6206 * t6325 + t6207 * t6315 + t6208 * t6317 + t6209 * t6319 + t6210 * t6321 + t6211 * t6323) * MDP(2) + (t6206 * t6271 + t6207 * t6266 + t6208 * t6267 + t6209 * t6268 + t6210 * t6269 + t6211 * t6270) * MDP(3) + ((t6182 * t6303 + t6183 * t6305 + t6184 * t6307 + t6185 * t6309 + t6186 * t6311 + t6187 * t6313) * MDP(2) + (t6182 * t6278 + t6183 * t6279 + t6184 * t6280 + t6185 * t6281 + t6186 * t6282 + t6187 * t6283) * MDP(3)) * t7080) * t7081) * t7078 - t7574; (t6206 * t6588 + t6207 * t6578 + t6208 * t6580 + t6209 * t6582 + t6210 * t6584 + t6211 * t6586) * t7350 + ((t6224 * t6332 + t6226 * t6333 + t6228 * t6334 + t6230 * t6335 + t6232 * t6336 + t6234 * t6337) * t7566 + ((t6206 * t6324 + t6207 * t6314 + t6208 * t6316 + t6209 * t6318 + t6210 * t6320 + t6211 * t6322) * MDP(2) + (t6206 * t6265 + t6207 * t6260 + t6208 * t6261 + t6209 * t6262 + t6210 * t6263 + t6211 * t6264) * MDP(3) + ((t6182 * t6302 + t6183 * t6304 + t6184 * t6306 + t6185 * t6308 + t6186 * t6310 + t6187 * t6312) * MDP(2) + (t6182 * t6272 + t6183 * t6273 + t6184 * t6274 + t6185 * t6275 + t6186 * t6276 + t6187 * t6277) * MDP(3)) * t7080) * t7081) * t7078; (t7003 - t7537) * MDP(6) + (-t7331 + t7540) * MDP(8) + (-MDP(4) * t6879 + (t7538 + t7539) * MDP(5) - MDP(7) * t7541 + MDP(9) * t7456) * t7076 + ((t6114 * t6335 + t6115 * t6336 + t6116 * t6337 + t6117 * t6332 + t6118 * t6333 + t6119 * t6334) * t7566 + ((t6206 * t6292 + t6207 * t6293 + t6208 * t6294 + t6209 * t6295 + t6210 * t6290 + t6211 * t6291) * MDP(1) + (t6170 * t6210 + t6171 * t6211 + t6172 * t6206 + t6173 * t6207 + t6174 * t6208 + t6175 * t6209) * MDP(2) + (t6132 * t6211 + t6133 * t6206 + t6134 * t6207 + t6135 * t6208 + t6136 * t6209 + t6137 * t6210) * MDP(3) + ((t6176 * t6185 + t6177 * t6186 + t6178 * t6187 + t6179 * t6182 + t6180 * t6183 + t6181 * t6184) * MDP(2) + (t6164 * t6186 + t6165 * t6187 + t6166 * t6182 + t6167 * t6183 + t6168 * t6184 + t6169 * t6185) * MDP(3)) * t7080) * t7081) * t7078; -t6879 * MDP(5) + (MDP(7) * t6919 + MDP(8) * t7440) * t7075 + (-MDP(4) * t6920 + MDP(5) * t6919 + MDP(6) * t7440) * t7072 + ((t6089 * t6332 + t6090 * t6333 + t6091 * t6334 + t6092 * t6335 + t6093 * t6336 + t6094 * t6337) * t7566 + ((t6206 * t6241 + t6207 * t6236 + t6208 * t6237 + t6209 * t6238 + t6210 * t6239 + t6211 * t6240) * MDP(1) + (t6146 * t6207 + t6147 * t6208 + t6148 * t6209 + t6149 * t6210 + t6150 * t6211 + t6151 * t6206) * MDP(2) + (t6101 * t6207 + t6102 * t6208 + t6103 * t6209 + t6104 * t6210 + t6105 * t6211 + t6106 * t6206) * MDP(3) + ((t6152 * t6182 + t6153 * t6183 + t6154 * t6184 + t6155 * t6185 + t6156 * t6186 + t6157 * t6187) * MDP(2) + (t6108 * t6182 + t6109 * t6183 + t6110 * t6184 + t6111 * t6185 + t6112 * t6186 + t6113 * t6187) * MDP(3)) * t7080) * t7081) * t7078; MDP(9) * t7440 - t6920 * MDP(6) + t6919 * MDP(8) + ((t6332 * t6077 + t6333 * t6078 + t6334 * t6079 + t6335 * t6080 + t6336 * t6081 + t6337 * t6082) * t7566 + ((t6200 * t6207 + t6201 * t6208 + t6202 * t6209 + t6203 * t6210 + t6204 * t6211 + t6205 * t6206) * MDP(1) + (t6120 * t6207 + t6121 * t6208 + t6122 * t6209 + t6123 * t6210 + t6124 * t6211 + t6125 * t6206) * MDP(2) + (t6083 * t6207 + t6084 * t6208 + t6085 * t6209 + t6086 * t6210 + t6087 * t6211 + t6088 * t6206) * MDP(3) + ((t6126 * t6182 + t6127 * t6183 + t6128 * t6184 + t6129 * t6185 + t6130 * t6186 + t6131 * t6187) * MDP(2) + (t6095 * t6182 + t6096 * t6183 + t6097 * t6184 + t6098 * t6185 + t6099 * t6186 + t6100 * t6187) * MDP(3)) * t7080) * t7081) * t7078;];
%% Postprocessing: Reshape Output
% From vec2mat_6_matlab.m
res = [t1(1), t1(2), t1(3), t1(4), t1(5), t1(6); t1(7), t1(8), t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16), t1(17), t1(18); t1(19), t1(20), t1(21), t1(22), t1(23), t1(24); t1(25), t1(26), t1(27), t1(28), t1(29), t1(30); t1(31), t1(32), t1(33), t1(34), t1(35), t1(36);];
MMX  = res;
