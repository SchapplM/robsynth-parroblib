% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P6PPRRRR3V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d3,d4,theta1,theta2]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P6PPRRRR3V2G1P1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [6x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 22:25
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [6x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 22:20:45
% EndTime: 2019-05-16 22:24:20
% DurationCPUTime: 276.98s
% Computational Cost: add. (276052->1838), mult. (649171->3497), div. (5436->19), fcn. (566195->64), ass. (0->1186)
t12410 = sin(pkin(9));
t12414 = cos(pkin(10));
t12415 = cos(pkin(9));
t12409 = sin(pkin(10));
t12418 = cos(pkin(4));
t12765 = t12409 * t12418;
t12289 = t12410 * t12765 - t12414 * t12415;
t12752 = t12415 * t12418;
t12294 = t12409 * t12752 + t12410 * t12414;
t12419 = legFrame(6,3);
t12366 = sin(t12419);
t12378 = cos(t12419);
t12050 = -t12289 * t12366 + t12294 * t12378;
t12437 = legFrame(6,2);
t12396 = cos(t12437);
t12431 = sin(qJ(3,6));
t12434 = cos(qJ(3,6));
t13077 = pkin(8) * sin(pkin(6));
t12417 = cos(pkin(5));
t12753 = t12414 * t12418;
t12412 = sin(pkin(5));
t12413 = sin(pkin(4));
t12756 = t12412 * t12413;
t12121 = (t12409 * t12415 + t12410 * t12753) * t12417 - t12410 * t12756;
t12122 = (t12409 * t12410 - t12414 * t12752) * t12417 + t12415 * t12756;
t13145 = t12121 * t12366 + t12122 * t12378;
t13206 = t12396 * (pkin(3) * (t12431 * t12050 + t12434 * t13145) - (t12050 * t12434 - t12431 * t13145) * t13077);
t12420 = legFrame(5,3);
t12367 = sin(t12420);
t12379 = cos(t12420);
t12051 = -t12289 * t12367 + t12294 * t12379;
t12438 = legFrame(5,2);
t12397 = cos(t12438);
t12432 = sin(qJ(3,5));
t12435 = cos(qJ(3,5));
t13144 = t12121 * t12367 + t12122 * t12379;
t13205 = t12397 * (pkin(3) * (t12432 * t12051 + t12435 * t13144) - (t12051 * t12435 - t12432 * t13144) * t13077);
t12421 = legFrame(4,3);
t12368 = sin(t12421);
t12380 = cos(t12421);
t12052 = -t12289 * t12368 + t12294 * t12380;
t12439 = legFrame(4,2);
t12398 = cos(t12439);
t12433 = sin(qJ(3,4));
t12436 = cos(qJ(3,4));
t13143 = t12121 * t12368 + t12122 * t12380;
t13204 = t12398 * (pkin(3) * (t12433 * t12052 + t12436 * t13143) - (t12052 * t12436 - t12433 * t13143) * t13077);
t12455 = xP(6);
t12402 = sin(t12455);
t12469 = koppelP(1,2);
t12405 = cos(t12455);
t12475 = koppelP(1,1);
t12797 = t12405 * t12475;
t12330 = t12402 * t12469 - t12797;
t12456 = xP(5);
t12406 = cos(t12456);
t12403 = sin(t12456);
t12463 = koppelP(1,3);
t12821 = t12403 * t12463;
t12164 = t12330 * t12406 - t12821;
t12336 = t12402 * t12475 + t12405 * t12469;
t12457 = xP(4);
t12407 = cos(t12457);
t12258 = t12407 * t12336;
t12404 = sin(t12457);
t12449 = xDP(6);
t12450 = xDP(5);
t12781 = t12407 * t12450;
t12788 = t12406 * t12463;
t12548 = t12330 * t12403 + t12788;
t11973 = -t12548 * t12404 + t12258;
t12451 = xDP(4);
t13197 = t12451 * t11973;
t11843 = -(t12258 * t12403 - t12330 * t12404) * t12449 - t12164 * t12781 - t13197;
t12468 = koppelP(2,2);
t12474 = koppelP(2,1);
t12798 = t12405 * t12474;
t12329 = t12402 * t12468 - t12798;
t12462 = koppelP(2,3);
t12822 = t12403 * t12462;
t12163 = t12329 * t12406 - t12822;
t12335 = t12402 * t12474 + t12405 * t12468;
t12257 = t12407 * t12335;
t12789 = t12406 * t12462;
t12549 = t12329 * t12403 + t12789;
t11972 = -t12549 * t12404 + t12257;
t13196 = t12451 * t11972;
t11841 = -(t12257 * t12403 - t12329 * t12404) * t12449 - t12163 * t12781 - t13196;
t12467 = koppelP(3,2);
t12473 = koppelP(3,1);
t12799 = t12405 * t12473;
t12328 = t12402 * t12467 - t12799;
t12461 = koppelP(3,3);
t12823 = t12403 * t12461;
t12162 = t12328 * t12406 - t12823;
t12334 = t12402 * t12473 + t12405 * t12467;
t12256 = t12407 * t12334;
t12790 = t12406 * t12461;
t12550 = t12328 * t12403 + t12790;
t11971 = -t12550 * t12404 + t12256;
t13195 = t12451 * t11971;
t11839 = -(t12256 * t12403 - t12328 * t12404) * t12449 - t12162 * t12781 - t13195;
t12466 = koppelP(4,2);
t12472 = koppelP(4,1);
t12800 = t12405 * t12472;
t12327 = t12402 * t12466 - t12800;
t12460 = koppelP(4,3);
t12824 = t12403 * t12460;
t12161 = t12327 * t12406 - t12824;
t12333 = t12402 * t12472 + t12405 * t12466;
t12255 = t12407 * t12333;
t12791 = t12406 * t12460;
t12551 = t12327 * t12403 + t12791;
t11970 = -t12551 * t12404 + t12255;
t13194 = t12451 * t11970;
t11837 = -(t12255 * t12403 - t12327 * t12404) * t12449 - t12161 * t12781 - t13194;
t12465 = koppelP(5,2);
t12471 = koppelP(5,1);
t12801 = t12405 * t12471;
t12326 = t12402 * t12465 - t12801;
t12459 = koppelP(5,3);
t12825 = t12403 * t12459;
t12160 = t12326 * t12406 - t12825;
t12332 = t12402 * t12471 + t12405 * t12465;
t12254 = t12407 * t12332;
t12792 = t12406 * t12459;
t12552 = t12326 * t12403 + t12792;
t11969 = -t12552 * t12404 + t12254;
t13193 = t12451 * t11969;
t11835 = -(t12254 * t12403 - t12326 * t12404) * t12449 - t12160 * t12781 - t13193;
t12464 = koppelP(6,2);
t12470 = koppelP(6,1);
t12802 = t12405 * t12470;
t12325 = t12402 * t12464 - t12802;
t12458 = koppelP(6,3);
t12826 = t12403 * t12458;
t12159 = t12325 * t12406 - t12826;
t12331 = t12402 * t12470 + t12405 * t12464;
t12253 = t12407 * t12331;
t12793 = t12406 * t12458;
t12553 = t12325 * t12403 + t12793;
t11968 = -t12553 * t12404 + t12253;
t13192 = t12451 * t11968;
t11833 = -(t12253 * t12403 - t12325 * t12404) * t12449 - t12159 * t12781 - t13192;
t12751 = t12417 * t12418;
t12293 = t12414 * t12751 - t12756;
t12766 = t12409 * t12417;
t12120 = t12293 * t12410 + t12415 * t12766;
t12123 = t12293 * t12415 - t12410 * t12766;
t11910 = t12120 * t12380 + t12123 * t12368;
t11916 = -t12120 * t12368 + t12123 * t12380;
t12427 = legFrame(4,1);
t12386 = cos(t12427);
t12374 = sin(t12427);
t12392 = sin(t12439);
t12901 = t12374 * t12392;
t11765 = t11910 * t12386 + t11916 * t12901;
t12040 = t12289 * t12380 + t12294 * t12368;
t11903 = t12040 * t12386 + t12052 * t12901;
t11642 = pkin(3) * (-t11765 * t12436 + t12433 * t11903) - (t11765 * t12433 + t11903 * t12436) * t13077;
t11909 = t12120 * t12379 + t12123 * t12367;
t11915 = -t12120 * t12367 + t12123 * t12379;
t12426 = legFrame(5,1);
t12385 = cos(t12426);
t12373 = sin(t12426);
t12391 = sin(t12438);
t12904 = t12373 * t12391;
t11764 = t11909 * t12385 + t11915 * t12904;
t12039 = t12289 * t12379 + t12294 * t12367;
t11902 = t12039 * t12385 + t12051 * t12904;
t11641 = pkin(3) * (-t11764 * t12435 + t12432 * t11902) - (t11764 * t12432 + t11902 * t12435) * t13077;
t11908 = t12120 * t12378 + t12123 * t12366;
t11914 = -t12120 * t12366 + t12123 * t12378;
t12425 = legFrame(6,1);
t12384 = cos(t12425);
t12372 = sin(t12425);
t12390 = sin(t12437);
t12907 = t12372 * t12390;
t11763 = t11908 * t12384 + t11914 * t12907;
t12038 = t12289 * t12378 + t12294 * t12366;
t11901 = t12038 * t12384 + t12050 * t12907;
t11640 = pkin(3) * (-t11763 * t12434 + t12431 * t11901) - (t11763 * t12431 + t11901 * t12434) * t13077;
t12889 = t12384 * t12390;
t12773 = t12407 * t12470;
t12779 = t12407 * t12464;
t12811 = t12404 * t12470;
t12817 = t12404 * t12464;
t12044 = -(t12403 * t12773 - t12817) * t12405 + t12402 * (t12403 * t12779 + t12811);
t13160 = t12407 * t12793 + t12044;
t13191 = -t12159 * t12889 + t12396 * t13160;
t12032 = (t12403 * t12811 + t12779) * t12405 - (t12403 * t12817 - t12773) * t12402;
t13166 = -t12404 * t12793 + t12032;
t13190 = t12159 * t12907 + t12396 * t13166;
t12886 = t12385 * t12391;
t12772 = t12407 * t12471;
t12778 = t12407 * t12465;
t12810 = t12404 * t12471;
t12816 = t12404 * t12465;
t12045 = -(t12403 * t12772 - t12816) * t12405 + t12402 * (t12403 * t12778 + t12810);
t13159 = t12407 * t12792 + t12045;
t13189 = -t12160 * t12886 + t12397 * t13159;
t12033 = (t12403 * t12810 + t12778) * t12405 - (t12403 * t12816 - t12772) * t12402;
t13165 = -t12404 * t12792 + t12033;
t13188 = t12160 * t12904 + t12397 * t13165;
t12883 = t12386 * t12392;
t12771 = t12407 * t12472;
t12777 = t12407 * t12466;
t12809 = t12404 * t12472;
t12815 = t12404 * t12466;
t12046 = -(t12403 * t12771 - t12815) * t12405 + t12402 * (t12403 * t12777 + t12809);
t13158 = t12407 * t12791 + t12046;
t13187 = -t12161 * t12883 + t12398 * t13158;
t12034 = (t12403 * t12809 + t12777) * t12405 - (t12403 * t12815 - t12771) * t12402;
t13164 = -t12404 * t12791 + t12034;
t13186 = t12161 * t12901 + t12398 * t13164;
t12440 = legFrame(3,2);
t12399 = cos(t12440);
t12428 = legFrame(3,1);
t12387 = cos(t12428);
t12393 = sin(t12440);
t12880 = t12387 * t12393;
t12770 = t12407 * t12473;
t12776 = t12407 * t12467;
t12808 = t12404 * t12473;
t12814 = t12404 * t12467;
t12047 = -(t12403 * t12770 - t12814) * t12405 + t12402 * (t12403 * t12776 + t12808);
t13157 = t12407 * t12790 + t12047;
t13185 = -t12162 * t12880 + t12399 * t13157;
t12375 = sin(t12428);
t12898 = t12375 * t12393;
t12035 = (t12403 * t12808 + t12776) * t12405 - (t12403 * t12814 - t12770) * t12402;
t13163 = -t12404 * t12790 + t12035;
t13184 = t12162 * t12898 + t12399 * t13163;
t12441 = legFrame(2,2);
t12400 = cos(t12441);
t12429 = legFrame(2,1);
t12388 = cos(t12429);
t12394 = sin(t12441);
t12877 = t12388 * t12394;
t12769 = t12407 * t12474;
t12775 = t12407 * t12468;
t12807 = t12404 * t12474;
t12813 = t12404 * t12468;
t12048 = -(t12403 * t12769 - t12813) * t12405 + t12402 * (t12403 * t12775 + t12807);
t13156 = t12407 * t12789 + t12048;
t13183 = -t12163 * t12877 + t12400 * t13156;
t12376 = sin(t12429);
t12895 = t12376 * t12394;
t12036 = (t12403 * t12807 + t12775) * t12405 - (t12403 * t12813 - t12769) * t12402;
t13162 = -t12404 * t12789 + t12036;
t13182 = t12163 * t12895 + t12400 * t13162;
t12442 = legFrame(1,2);
t12401 = cos(t12442);
t12430 = legFrame(1,1);
t12389 = cos(t12430);
t12395 = sin(t12442);
t12874 = t12389 * t12395;
t12768 = t12407 * t12475;
t12774 = t12407 * t12469;
t12806 = t12404 * t12475;
t12812 = t12404 * t12469;
t12049 = -(t12403 * t12768 - t12812) * t12405 + t12402 * (t12403 * t12774 + t12806);
t13155 = t12407 * t12788 + t12049;
t13181 = -t12164 * t12874 + t12401 * t13155;
t12377 = sin(t12430);
t12892 = t12377 * t12395;
t12037 = (t12403 * t12806 + t12774) * t12405 - (t12403 * t12812 - t12768) * t12402;
t13161 = -t12404 * t12788 + t12037;
t13180 = t12164 * t12892 + t12401 * t13161;
t12795 = t12406 * t12449;
t11993 = t12331 * t12795 - t12450 * t12553;
t13179 = t11993 * t12404;
t13178 = t11993 * t12407;
t11994 = t12332 * t12795 - t12450 * t12552;
t13177 = t11994 * t12404;
t13176 = t11994 * t12407;
t11995 = t12333 * t12795 - t12450 * t12551;
t13175 = t11995 * t12404;
t13174 = t11995 * t12407;
t11996 = t12334 * t12795 - t12450 * t12550;
t13173 = t11996 * t12404;
t13172 = t11996 * t12407;
t11997 = t12335 * t12795 - t12450 * t12549;
t13171 = t11997 * t12404;
t13170 = t11997 * t12407;
t11998 = t12336 * t12795 - t12450 * t12548;
t13169 = t11998 * t12404;
t13168 = t11998 * t12407;
t12794 = t12406 * t12451;
t12803 = t12405 * t12450;
t12238 = t12402 * t12794 - t12803;
t12827 = t12402 * t12450;
t12240 = t12405 * t12794 + t12827;
t12349 = t12403 * t12451 + t12449;
t13167 = (MDP(8) * t12349 + t12240 * (MDP(6) - MDP(9))) * t12238;
t12241 = t12404 * t12331;
t13154 = t12553 * t12407 + t12241;
t12242 = t12404 * t12332;
t13153 = t12552 * t12407 + t12242;
t12243 = t12404 * t12333;
t13152 = t12551 * t12407 + t12243;
t12244 = t12404 * t12334;
t13151 = t12550 * t12407 + t12244;
t12245 = t12404 * t12335;
t13150 = t12549 * t12407 + t12245;
t12246 = t12404 * t12336;
t13149 = t12548 * t12407 + t12246;
t12819 = t12404 * t12450;
t13012 = t13149 * t12451;
t11842 = -(t12246 * t12403 + t12330 * t12407) * t12449 - t12164 * t12819 - t13012;
t13013 = t13150 * t12451;
t11840 = -(t12245 * t12403 + t12329 * t12407) * t12449 - t12163 * t12819 - t13013;
t13014 = t13151 * t12451;
t11838 = -(t12244 * t12403 + t12328 * t12407) * t12449 - t12162 * t12819 - t13014;
t13015 = t13152 * t12451;
t11836 = -(t12243 * t12403 + t12327 * t12407) * t12449 - t12161 * t12819 - t13015;
t13016 = t13153 * t12451;
t11834 = -(t12242 * t12403 + t12326 * t12407) * t12449 - t12160 * t12819 - t13016;
t13017 = t13154 * t12451;
t11832 = -(t12241 * t12403 + t12325 * t12407) * t12449 - t12159 * t12819 - t13017;
t12422 = legFrame(3,3);
t12369 = sin(t12422);
t12381 = cos(t12422);
t13142 = t12121 * t12369 + t12122 * t12381;
t12423 = legFrame(2,3);
t12370 = sin(t12423);
t12382 = cos(t12423);
t13141 = t12121 * t12370 + t12122 * t12382;
t12424 = legFrame(1,3);
t12371 = sin(t12424);
t12383 = cos(t12424);
t13140 = t12121 * t12371 + t12122 * t12383;
t12189 = -t12403 * t12781 - t12404 * t12794;
t12780 = t12407 * t12451;
t12190 = t12403 * t12819 - t12406 * t12780;
t11604 = (-t11971 * t12189 + t12190 * t13151) * t12449 + ((-t11839 - t13195) * t12407 + (-t11838 - t13014) * t12404) * t12450 + (-t11838 * t12407 + t11839 * t12404) * t12795;
t12784 = t12406 * t12467;
t12150 = -t12402 * t12784 + t12406 * t12799 + t12823;
t11655 = t11839 * t12451 + (t12150 * t12780 - t13173) * t12450 + (t11839 * t12403 + t12150 * t12189 + (-t12450 * t13151 - t13172) * t12406) * t12449;
t12818 = t12404 * t12451;
t11656 = t11838 * t12451 + (t12150 * t12818 + t13172) * t12450 + (t11838 * t12403 - t12150 * t12190 + (t11971 * t12450 - t13173) * t12406) * t12449;
t12835 = t12399 * t12413;
t12298 = t12369 * t12415 + t12381 * t12410;
t13121 = t12298 * t12418;
t12085 = t12393 * t13121 + t12835;
t12304 = -t12369 * t12410 + t12381 * t12415;
t12443 = sin(qJ(3,3));
t12446 = cos(qJ(3,3));
t12346 = pkin(3) * t12443 - t12446 * t13077;
t12853 = t12393 * t12414;
t12856 = t12393 * t12409;
t12343 = pkin(3) * t12446 + t12443 * t13077;
t12912 = t12343 * t12417;
t11754 = (t12085 * t12409 - t12304 * t12853) * t12912 + t12346 * (t12085 * t12414 + t12304 * t12856);
t11856 = (t12298 * t12414 + t12304 * t12765) * t12912 + (-t12298 * t12409 + t12304 * t12753) * t12346;
t11703 = t11754 * t12387 + t11856 * t12375;
t11704 = -t11754 * t12375 + t11856 * t12387;
t12114 = t12343 * t12766 + t12346 * t12414;
t12854 = t12393 * t12413;
t11748 = (-(t12298 * t12765 - t12304 * t12414) * t12912 - t12346 * (t12298 * t12753 + t12304 * t12409)) * t12399 + t12114 * t12854;
t12105 = 0.1e1 / t12114;
t12408 = 0.1e1 / t12413;
t12416 = cos(pkin(6));
t12476 = pkin(8) ^ 2;
t12908 = (-t12416 ^ 2 * t12476 + pkin(3) ^ 2 + t12476) * t12408;
t12563 = t12402 * t12349;
t12002 = -t12349 * t12799 + t12451 * t12790 + t12467 * t12563;
t12453 = xDP(2);
t12595 = -t12403 * t12449 - t12451;
t12717 = t12450 * t12473;
t12723 = t12450 * t12467;
t12729 = t12450 * t12461;
t12736 = t12449 * t12473;
t12515 = (t12406 * t12717 + t12467 * t12595) * t12405 - (t12402 * t12736 - t12729) * t12403 - (t12406 * t12723 + t12451 * t12473) * t12402;
t11817 = t12002 * t12407 - t12404 * t12515 - t12453;
t12452 = xDP(3);
t11823 = t12002 * t12404 + t12407 * t12515 - t12452;
t12454 = xDP(1);
t11694 = -((-t12403 * t12717 - t12449 * t12784) * t12405 + t12406 * t12729 + t12454 + (t12403 * t12723 - t12406 * t12736) * t12402) * t12399 + (t11817 * t12375 - t11823 * t12387) * t12393;
t11730 = t11817 * t12387 + t11823 * t12375;
t11550 = (t11694 * t12415 + t11730 * t12410) * t12381 + t12369 * (-t11694 * t12410 + t11730 * t12415);
t13059 = t11550 ^ 2 / t12114 ^ 2;
t13058 = t12105 * t13059;
t12591 = t12908 * t13058;
t11502 = t12417 * t12591 + (t11604 * t11748 + t11655 * t11704 + t11656 * t11703) * t12105 * t12408;
t11911 = t12120 * t12381 + t12123 * t12369;
t11917 = -t12120 * t12369 + t12123 * t12381;
t11760 = -t11911 * t12375 + t11917 * t12880;
t12041 = t12289 * t12381 + t12294 * t12369;
t12053 = -t12289 * t12369 + t12294 * t12381;
t11898 = -t12041 * t12375 + t12053 * t12880;
t11643 = (t11760 * t12443 + t11898 * t12446) * t13077 - (-t11760 * t12446 + t11898 * t12443) * pkin(3);
t11904 = t12041 * t12387 + t12053 * t12898;
t13088 = t11911 * t12387 + t11917 * t12898;
t11646 = -(t11904 * t12446 + t12443 * t13088) * t13077 + pkin(3) * (t12443 * t11904 - t12446 * t13088);
t12754 = t12413 * t12414;
t12290 = -t12412 * t12754 + t12751;
t12758 = t12409 * t12446;
t12761 = t12409 * t12443;
t12572 = 0.1e1 / ((-t12414 * t12446 + t12417 * t12761) * t13077 + pkin(3) * (t12414 * t12443 + t12417 * t12758));
t13136 = (-(t12053 * t12446 - t12443 * t13142) * t13077 + pkin(3) * (t12443 * t12053 + t12446 * t13142)) * t12399;
t12700 = t12572 * t13136;
t12509 = -t12290 * t12591 + (t11604 * t12700 + (t11643 * t11656 + t11646 * t11655) * t12572) * t12408;
t11496 = t11502 * t12418 + t12509;
t13139 = t11496 * t12572;
t11605 = (-t11972 * t12189 + t12190 * t13150) * t12449 + ((-t11841 - t13196) * t12407 + (-t11840 - t13013) * t12404) * t12450 + (-t11840 * t12407 + t11841 * t12404) * t12795;
t12783 = t12406 * t12468;
t12151 = -t12402 * t12783 + t12406 * t12798 + t12822;
t11657 = t11841 * t12451 + (t12151 * t12780 - t13171) * t12450 + (t11841 * t12403 + t12151 * t12189 + (-t12450 * t13150 - t13170) * t12406) * t12449;
t11658 = t11840 * t12451 + (t12151 * t12818 + t13170) * t12450 + (t11840 * t12403 - t12151 * t12190 + (t11972 * t12450 - t13171) * t12406) * t12449;
t12833 = t12400 * t12413;
t12299 = t12370 * t12415 + t12382 * t12410;
t13120 = t12299 * t12418;
t12086 = t12394 * t13120 + t12833;
t12305 = -t12370 * t12410 + t12382 * t12415;
t12444 = sin(qJ(3,2));
t12447 = cos(qJ(3,2));
t12347 = pkin(3) * t12444 - t12447 * t13077;
t12848 = t12394 * t12414;
t12851 = t12394 * t12409;
t12344 = pkin(3) * t12447 + t12444 * t13077;
t12911 = t12344 * t12417;
t11755 = (t12086 * t12409 - t12305 * t12848) * t12911 + t12347 * (t12086 * t12414 + t12305 * t12851);
t11857 = (t12299 * t12414 + t12305 * t12765) * t12911 + (-t12299 * t12409 + t12305 * t12753) * t12347;
t11705 = t11755 * t12388 + t11857 * t12376;
t11706 = -t11755 * t12376 + t11857 * t12388;
t12115 = t12344 * t12766 + t12347 * t12414;
t12849 = t12394 * t12413;
t11749 = (-(t12299 * t12765 - t12305 * t12414) * t12911 - t12347 * (t12299 * t12753 + t12305 * t12409)) * t12400 + t12115 * t12849;
t12108 = 0.1e1 / t12115;
t12003 = -t12349 * t12798 + t12451 * t12789 + t12468 * t12563;
t12716 = t12450 * t12474;
t12722 = t12450 * t12468;
t12728 = t12450 * t12462;
t12735 = t12449 * t12474;
t12514 = (t12406 * t12716 + t12468 * t12595) * t12405 - (t12402 * t12735 - t12728) * t12403 - (t12406 * t12722 + t12451 * t12474) * t12402;
t11818 = t12003 * t12407 - t12404 * t12514 - t12453;
t11824 = t12003 * t12404 + t12407 * t12514 - t12452;
t11695 = -((-t12403 * t12716 - t12449 * t12783) * t12405 + t12406 * t12728 + t12454 + (t12403 * t12722 - t12406 * t12735) * t12402) * t12400 + (t11818 * t12376 - t11824 * t12388) * t12394;
t11731 = t11818 * t12388 + t11824 * t12376;
t11551 = (t11695 * t12415 + t11731 * t12410) * t12382 + t12370 * (-t11695 * t12410 + t11731 * t12415);
t13057 = t11551 ^ 2 / t12115 ^ 2;
t13056 = t12108 * t13057;
t12590 = t12908 * t13056;
t11503 = t12417 * t12590 + (t11605 * t11749 + t11657 * t11706 + t11658 * t11705) * t12108 * t12408;
t11912 = t12120 * t12382 + t12123 * t12370;
t11918 = -t12120 * t12370 + t12123 * t12382;
t11761 = -t11912 * t12376 + t11918 * t12877;
t12042 = t12289 * t12382 + t12294 * t12370;
t12054 = -t12289 * t12370 + t12294 * t12382;
t11899 = -t12042 * t12376 + t12054 * t12877;
t11644 = (t11761 * t12444 + t11899 * t12447) * t13077 - (-t11761 * t12447 + t11899 * t12444) * pkin(3);
t11905 = t12042 * t12388 + t12054 * t12895;
t13089 = t11912 * t12388 + t11918 * t12895;
t11647 = -(t11905 * t12447 + t12444 * t13089) * t13077 + pkin(3) * (t12444 * t11905 - t12447 * t13089);
t12747 = t12417 * t12447;
t12760 = t12409 * t12444;
t12571 = 0.1e1 / ((-t12414 * t12447 + t12417 * t12760) * t13077 + pkin(3) * (t12409 * t12747 + t12414 * t12444));
t13135 = (-(t12054 * t12447 - t12444 * t13141) * t13077 + pkin(3) * (t12444 * t12054 + t12447 * t13141)) * t12400;
t12699 = t12571 * t13135;
t12508 = -t12290 * t12590 + (t11605 * t12699 + (t11644 * t11658 + t11647 * t11657) * t12571) * t12408;
t11497 = t11503 * t12418 + t12508;
t13138 = t11497 * t12571;
t11606 = (-t11973 * t12189 + t12190 * t13149) * t12449 + ((-t11843 - t13197) * t12407 + (-t11842 - t13012) * t12404) * t12450 + (-t11842 * t12407 + t11843 * t12404) * t12795;
t12782 = t12406 * t12469;
t12152 = -t12402 * t12782 + t12406 * t12797 + t12821;
t11659 = t11843 * t12451 + (t12152 * t12780 - t13169) * t12450 + (t11843 * t12403 + t12152 * t12189 + (-t12450 * t13149 - t13168) * t12406) * t12449;
t11660 = t11842 * t12451 + (t12152 * t12818 + t13168) * t12450 + (t11842 * t12403 - t12152 * t12190 + (t11973 * t12450 - t13169) * t12406) * t12449;
t12831 = t12401 * t12413;
t12300 = t12371 * t12415 + t12383 * t12410;
t13119 = t12300 * t12418;
t12087 = t12395 * t13119 + t12831;
t12306 = -t12371 * t12410 + t12383 * t12415;
t12445 = sin(qJ(3,1));
t12448 = cos(qJ(3,1));
t12348 = pkin(3) * t12445 - t12448 * t13077;
t12843 = t12395 * t12414;
t12846 = t12395 * t12409;
t12345 = pkin(3) * t12448 + t12445 * t13077;
t12910 = t12345 * t12417;
t11756 = (t12087 * t12409 - t12306 * t12843) * t12910 + t12348 * (t12087 * t12414 + t12306 * t12846);
t11858 = (t12300 * t12414 + t12306 * t12765) * t12910 + (-t12300 * t12409 + t12306 * t12753) * t12348;
t11707 = t11756 * t12389 + t11858 * t12377;
t11708 = -t11756 * t12377 + t11858 * t12389;
t12116 = t12345 * t12766 + t12348 * t12414;
t12844 = t12395 * t12413;
t11750 = (-(t12300 * t12765 - t12306 * t12414) * t12910 - t12348 * (t12300 * t12753 + t12306 * t12409)) * t12401 + t12116 * t12844;
t12111 = 0.1e1 / t12116;
t12004 = -t12349 * t12797 + t12451 * t12788 + t12469 * t12563;
t12715 = t12450 * t12475;
t12721 = t12450 * t12469;
t12727 = t12450 * t12463;
t12734 = t12449 * t12475;
t12513 = (t12406 * t12715 + t12469 * t12595) * t12405 - (t12402 * t12734 - t12727) * t12403 - (t12406 * t12721 + t12451 * t12475) * t12402;
t11819 = t12004 * t12407 - t12404 * t12513 - t12453;
t11825 = t12004 * t12404 + t12407 * t12513 - t12452;
t11696 = -((-t12403 * t12715 - t12449 * t12782) * t12405 + t12406 * t12727 + t12454 + (t12403 * t12721 - t12406 * t12734) * t12402) * t12401 + (t11819 * t12377 - t11825 * t12389) * t12395;
t11732 = t11819 * t12389 + t11825 * t12377;
t11552 = (t11696 * t12415 + t11732 * t12410) * t12383 + t12371 * (-t11696 * t12410 + t11732 * t12415);
t13055 = t11552 ^ 2 / t12116 ^ 2;
t13054 = t12111 * t13055;
t12589 = t12908 * t13054;
t11504 = t12417 * t12589 + (t11606 * t11750 + t11659 * t11708 + t11660 * t11707) * t12111 * t12408;
t11913 = t12120 * t12383 + t12123 * t12371;
t11919 = -t12120 * t12371 + t12123 * t12383;
t11762 = -t11913 * t12377 + t11919 * t12874;
t12043 = t12289 * t12383 + t12294 * t12371;
t12055 = -t12289 * t12371 + t12294 * t12383;
t11900 = -t12043 * t12377 + t12055 * t12874;
t11645 = (t11762 * t12445 + t11900 * t12448) * t13077 - (-t11762 * t12448 + t11900 * t12445) * pkin(3);
t11906 = t12043 * t12389 + t12055 * t12892;
t13090 = t11913 * t12389 + t11919 * t12892;
t11648 = -(t11906 * t12448 + t12445 * t13090) * t13077 + pkin(3) * (t12445 * t11906 - t12448 * t13090);
t12757 = t12409 * t12448;
t12759 = t12409 * t12445;
t12570 = 0.1e1 / ((-t12414 * t12448 + t12417 * t12759) * t13077 + pkin(3) * (t12414 * t12445 + t12417 * t12757));
t13134 = (-(t12055 * t12448 - t12445 * t13140) * t13077 + pkin(3) * (t12445 * t12055 + t12448 * t13140)) * t12401;
t12698 = t12570 * t13134;
t12507 = -t12290 * t12589 + (t11606 * t12698 + (t11645 * t11660 + t11648 * t11659) * t12570) * t12408;
t11498 = t11504 * t12418 + t12507;
t13137 = t11498 * t12570;
t11999 = -t12349 * t12802 + t12451 * t12793 + t12464 * t12563;
t12720 = t12450 * t12470;
t12726 = t12450 * t12464;
t12732 = t12450 * t12458;
t12739 = t12449 * t12470;
t12518 = (t12406 * t12720 + t12464 * t12595) * t12405 - (t12402 * t12739 - t12732) * t12403 - (t12406 * t12726 + t12451 * t12470) * t12402;
t11814 = t11999 * t12407 - t12404 * t12518 - t12453;
t11820 = t11999 * t12404 + t12407 * t12518 - t12452;
t12787 = t12406 * t12464;
t11691 = -((-t12403 * t12720 - t12449 * t12787) * t12405 + t12406 * t12732 + t12454 + (t12403 * t12726 - t12406 * t12739) * t12402) * t12396 + (t11814 * t12372 - t11820 * t12384) * t12390;
t11727 = t11814 * t12384 + t11820 * t12372;
t11547 = (t11691 * t12415 + t11727 * t12410) * t12378 + t12366 * (-t11691 * t12410 + t11727 * t12415);
t12337 = pkin(3) * t12434 + t12431 * t13077;
t12340 = pkin(3) * t12431 - t12434 * t13077;
t12102 = t12337 * t12766 + t12340 * t12414;
t13065 = t11547 ^ 2 / t12102 ^ 2;
t12000 = -t12349 * t12801 + t12451 * t12792 + t12465 * t12563;
t12719 = t12450 * t12471;
t12725 = t12450 * t12465;
t12731 = t12450 * t12459;
t12738 = t12449 * t12471;
t12517 = (t12406 * t12719 + t12465 * t12595) * t12405 - (t12402 * t12738 - t12731) * t12403 - (t12406 * t12725 + t12451 * t12471) * t12402;
t11815 = t12000 * t12407 - t12404 * t12517 - t12453;
t11821 = t12000 * t12404 + t12407 * t12517 - t12452;
t12786 = t12406 * t12465;
t11692 = -((-t12403 * t12719 - t12449 * t12786) * t12405 + t12406 * t12731 + t12454 + (t12403 * t12725 - t12406 * t12738) * t12402) * t12397 + (t11815 * t12373 - t11821 * t12385) * t12391;
t11728 = t11815 * t12385 + t11821 * t12373;
t11548 = (t11692 * t12415 + t11728 * t12410) * t12379 + t12367 * (-t11692 * t12410 + t11728 * t12415);
t12338 = pkin(3) * t12435 + t12432 * t13077;
t12341 = pkin(3) * t12432 - t12435 * t13077;
t12103 = t12338 * t12766 + t12341 * t12414;
t13063 = t11548 ^ 2 / t12103 ^ 2;
t12001 = -t12349 * t12800 + t12451 * t12791 + t12466 * t12563;
t12718 = t12450 * t12472;
t12724 = t12450 * t12466;
t12730 = t12450 * t12460;
t12737 = t12449 * t12472;
t12516 = (t12406 * t12718 + t12466 * t12595) * t12405 - (t12402 * t12737 - t12730) * t12403 - (t12406 * t12724 + t12451 * t12472) * t12402;
t11816 = t12001 * t12407 - t12404 * t12516 - t12453;
t11822 = t12001 * t12404 + t12407 * t12516 - t12452;
t12785 = t12406 * t12466;
t11693 = -((-t12403 * t12718 - t12449 * t12785) * t12405 + t12406 * t12730 + t12454 + (t12403 * t12724 - t12406 * t12737) * t12402) * t12398 + (t11816 * t12374 - t11822 * t12386) * t12392;
t11729 = t11816 * t12386 + t11822 * t12374;
t11549 = (t11693 * t12415 + t11729 * t12410) * t12380 + t12368 * (-t11693 * t12410 + t11729 * t12415);
t12339 = pkin(3) * t12436 + t12433 * t13077;
t12342 = pkin(3) * t12433 - t12436 * t13077;
t12104 = t12339 * t12766 + t12342 * t12414;
t13061 = t11549 ^ 2 / t12104 ^ 2;
t13130 = t12159 * t12413;
t13129 = t12160 * t12413;
t13128 = t12161 * t12413;
t13127 = t12162 * t12413;
t13126 = t12163 * t12413;
t13125 = t12164 * t12413;
t12295 = t12366 * t12415 + t12378 * t12410;
t13124 = t12295 * t12418;
t12296 = t12367 * t12415 + t12379 * t12410;
t13123 = t12296 * t12418;
t12297 = t12368 * t12415 + t12380 * t12410;
t13122 = t12297 * t12418;
t12804 = t12405 * t12407;
t12829 = t12402 * t12404;
t12213 = -t12403 * t12804 + t12829;
t12733 = t12450 * t12451;
t12955 = t12238 * t12349;
t13118 = t12406 * (t12213 * t12733 + t12407 * t12955);
t12022 = -t12300 * t12377 + t12306 * t12874;
t12028 = -t12300 * t12389 - t12306 * t12892;
t12922 = t12306 * t12401;
t11510 = (-t12345 * t12414 + t12348 * t12766) * t13054 + (-t11606 * t12922 + t11659 * t12028 + t11660 * t12022) * t12111;
t13111 = t12570 * ((t11510 * t12448 - t12445 * t13055) * MDP(4) + (-t11510 * t12445 - t12448 * t13055) * MDP(5));
t12021 = -t12299 * t12376 + t12305 * t12877;
t12027 = -t12299 * t12388 - t12305 * t12895;
t12923 = t12305 * t12400;
t11509 = (-t12344 * t12414 + t12347 * t12766) * t13056 + (-t11605 * t12923 + t11657 * t12027 + t11658 * t12021) * t12108;
t13110 = t12571 * ((t11509 * t12447 - t12444 * t13057) * MDP(4) + (-t11509 * t12444 - t12447 * t13057) * MDP(5));
t12020 = -t12298 * t12375 + t12304 * t12880;
t12026 = -t12298 * t12387 - t12304 * t12898;
t12924 = t12304 * t12399;
t11508 = (-t12343 * t12414 + t12346 * t12766) * t13058 + (-t11604 * t12924 + t11655 * t12026 + t11656 * t12020) * t12105;
t13109 = t12572 * ((t11508 * t12446 - t12443 * t13059) * MDP(4) + (-t11508 * t12443 - t12446 * t13059) * MDP(5));
t11757 = -t11908 * t12372 + t11914 * t12889;
t11895 = -t12038 * t12372 + t12050 * t12889;
t11637 = pkin(3) * (t11757 * t12434 - t11895 * t12431) + (t11757 * t12431 + t11895 * t12434) * t13077;
t11758 = -t11909 * t12373 + t11915 * t12886;
t11896 = -t12039 * t12373 + t12051 * t12886;
t11638 = pkin(3) * (t11758 * t12435 - t11896 * t12432) + (t11758 * t12432 + t11896 * t12435) * t13077;
t11759 = -t11910 * t12374 + t11916 * t12883;
t11897 = -t12040 * t12374 + t12052 * t12883;
t11639 = pkin(3) * (t11759 * t12436 - t11897 * t12433) + (t11759 * t12433 + t11897 * t12436) * t13077;
t12870 = t12390 * t12410;
t11942 = t12331 * t12415 + t12553 * t12870;
t12867 = t12390 * t12415;
t11954 = -t12331 * t12410 + t12553 * t12867;
t11859 = t11942 * t12366 - t11954 * t12378;
t11948 = -t12331 * t12870 + t12415 * t12553;
t11960 = t12331 * t12867 + t12410 * t12553;
t11865 = t11948 * t12366 + t11960 * t12378;
t13086 = t12384 * (t11859 * t12404 + t11865 * t12407) - (t11859 * t12407 - t11865 * t12404) * t12372;
t12865 = t12391 * t12410;
t11943 = t12332 * t12415 + t12552 * t12865;
t12862 = t12391 * t12415;
t11955 = -t12332 * t12410 + t12552 * t12862;
t11860 = t11943 * t12367 - t11955 * t12379;
t11949 = -t12332 * t12865 + t12415 * t12552;
t11961 = t12332 * t12862 + t12410 * t12552;
t11866 = t11949 * t12367 + t11961 * t12379;
t13085 = t12385 * (t11860 * t12404 + t11866 * t12407) - (t11860 * t12407 - t11866 * t12404) * t12373;
t12860 = t12392 * t12410;
t11944 = t12333 * t12415 + t12551 * t12860;
t12857 = t12392 * t12415;
t11956 = -t12333 * t12410 + t12551 * t12857;
t11861 = t11944 * t12368 - t11956 * t12380;
t11950 = -t12333 * t12860 + t12415 * t12551;
t11962 = t12333 * t12857 + t12410 * t12551;
t11867 = t11950 * t12368 + t11962 * t12380;
t13084 = t12386 * (t11861 * t12404 + t11867 * t12407) - (t11861 * t12407 - t11867 * t12404) * t12374;
t12855 = t12393 * t12410;
t11945 = t12334 * t12415 + t12550 * t12855;
t12852 = t12393 * t12415;
t11957 = -t12334 * t12410 + t12550 * t12852;
t11862 = t11945 * t12369 - t11957 * t12381;
t11951 = -t12334 * t12855 + t12415 * t12550;
t11963 = t12334 * t12852 + t12410 * t12550;
t11868 = t11951 * t12369 + t11963 * t12381;
t13083 = t12387 * (t11862 * t12404 + t11868 * t12407) - (t11862 * t12407 - t11868 * t12404) * t12375;
t12850 = t12394 * t12410;
t11946 = t12335 * t12415 + t12549 * t12850;
t12847 = t12394 * t12415;
t11958 = -t12335 * t12410 + t12549 * t12847;
t11863 = t11946 * t12370 - t11958 * t12382;
t11952 = -t12335 * t12850 + t12415 * t12549;
t11964 = t12335 * t12847 + t12410 * t12549;
t11869 = t11952 * t12370 + t11964 * t12382;
t13082 = t12388 * (t11863 * t12404 + t11869 * t12407) - (t11863 * t12407 - t11869 * t12404) * t12376;
t12845 = t12395 * t12410;
t11947 = t12336 * t12415 + t12548 * t12845;
t12842 = t12395 * t12415;
t11959 = -t12336 * t12410 + t12548 * t12842;
t11864 = t11947 * t12371 - t11959 * t12383;
t11953 = -t12336 * t12845 + t12415 * t12548;
t11965 = t12336 * t12842 + t12410 * t12548;
t11870 = t11953 * t12371 + t11965 * t12383;
t13081 = t12389 * (t11864 * t12404 + t11870 * t12407) - (t11864 * t12407 - t11870 * t12404) * t12377;
t11603 = (-t11970 * t12189 + t12190 * t13152) * t12449 + ((-t11837 - t13194) * t12407 + (-t11836 - t13015) * t12404) * t12450 + (-t11836 * t12407 + t11837 * t12404) * t12795;
t12149 = -t12402 * t12785 + t12406 * t12800 + t12824;
t11653 = t11837 * t12451 + (t12149 * t12780 - t13175) * t12450 + (t11837 * t12403 + t12149 * t12189 + (-t12450 * t13152 - t13174) * t12406) * t12449;
t11654 = t11836 * t12451 + (t12149 * t12818 + t13174) * t12450 + (t11836 * t12403 - t12149 * t12190 + (t11970 * t12450 - t13175) * t12406) * t12449;
t12303 = -t12368 * t12410 + t12380 * t12415;
t12019 = -t12297 * t12374 + t12303 * t12883;
t12025 = -t12297 * t12386 - t12303 * t12901;
t12099 = 0.1e1 / t12104;
t12925 = t12303 * t12398;
t13060 = t12099 * t13061;
t11507 = (-t12339 * t12414 + t12342 * t12766) * t13060 + (-t11603 * t12925 + t11653 * t12025 + t11654 * t12019) * t12099;
t13080 = MDP(4) * (-t11507 * t12436 + t12433 * t13061) + MDP(5) * (t11507 * t12433 + t12436 * t13061);
t11602 = (-t11969 * t12189 + t12190 * t13153) * t12449 + ((-t11835 - t13193) * t12407 + (-t11834 - t13016) * t12404) * t12450 + (-t11834 * t12407 + t11835 * t12404) * t12795;
t12148 = -t12402 * t12786 + t12406 * t12801 + t12825;
t11651 = t11835 * t12451 + (t12148 * t12780 - t13177) * t12450 + (t11835 * t12403 + t12148 * t12189 + (-t12450 * t13153 - t13176) * t12406) * t12449;
t11652 = t11834 * t12451 + (t12148 * t12818 + t13176) * t12450 + (t11834 * t12403 - t12148 * t12190 + (t11969 * t12450 - t13177) * t12406) * t12449;
t12302 = -t12367 * t12410 + t12379 * t12415;
t12018 = -t12296 * t12373 + t12302 * t12886;
t12024 = -t12296 * t12385 - t12302 * t12904;
t12096 = 0.1e1 / t12103;
t12926 = t12302 * t12397;
t13062 = t12096 * t13063;
t11506 = (-t12338 * t12414 + t12341 * t12766) * t13062 + (-t11602 * t12926 + t11651 * t12024 + t11652 * t12018) * t12096;
t13079 = MDP(4) * (-t11506 * t12435 + t12432 * t13063) + MDP(5) * (t11506 * t12432 + t12435 * t13063);
t11601 = (-t11968 * t12189 + t12190 * t13154) * t12449 + ((-t11833 - t13192) * t12407 + (-t11832 - t13017) * t12404) * t12450 + (-t11832 * t12407 + t11833 * t12404) * t12795;
t12147 = -t12402 * t12787 + t12406 * t12802 + t12826;
t11649 = t11833 * t12451 + (t12147 * t12780 - t13179) * t12450 + (t11833 * t12403 + t12147 * t12189 + (-t12450 * t13154 - t13178) * t12406) * t12449;
t11650 = t11832 * t12451 + (t12147 * t12818 + t13178) * t12450 + (t11832 * t12403 - t12147 * t12190 + (t11968 * t12450 - t13179) * t12406) * t12449;
t12301 = -t12366 * t12410 + t12378 * t12415;
t12017 = -t12295 * t12372 + t12301 * t12889;
t12023 = -t12295 * t12384 - t12301 * t12907;
t12093 = 0.1e1 / t12102;
t12927 = t12301 * t12396;
t13064 = t12093 * t13065;
t11505 = (-t12337 * t12414 + t12340 * t12766) * t13064 + (-t11601 * t12927 + t11649 * t12023 + t11650 * t12017) * t12093;
t13078 = MDP(4) * (-t11505 * t12434 + t12431 * t13065) + MDP(5) * (t11505 * t12431 + t12434 * t13065);
t12088 = t12238 ^ 2;
t12089 = t12240 ^ 2;
t12209 = t12349 ^ 2;
t12841 = t12396 * t12413;
t12082 = t12390 * t13124 + t12841;
t12868 = t12390 * t12414;
t12871 = t12390 * t12409;
t12915 = t12337 * t12417;
t11751 = (t12082 * t12409 - t12301 * t12868) * t12915 + t12340 * (t12082 * t12414 + t12301 * t12871);
t11853 = (t12295 * t12414 + t12301 * t12765) * t12915 + (-t12295 * t12409 + t12301 * t12753) * t12340;
t11697 = t11751 * t12384 + t11853 * t12372;
t11698 = -t11751 * t12372 + t11853 * t12384;
t12869 = t12390 * t12413;
t11745 = (-(t12295 * t12765 - t12301 * t12414) * t12915 - t12340 * (t12295 * t12753 + t12301 * t12409)) * t12396 + t12102 * t12869;
t12594 = t12908 * t13064;
t11499 = t12417 * t12594 + (t11601 * t11745 + t11649 * t11698 + t11650 * t11697) * t12093 * t12408;
t12750 = t12417 * t12434;
t12764 = t12409 * t12431;
t12575 = 0.1e1 / ((-t12414 * t12434 + t12417 * t12764) * t13077 + pkin(3) * (t12409 * t12750 + t12414 * t12431));
t12512 = -t12290 * t12594 + (t11601 * t13206 + t11637 * t11650 + t11640 * t11649) * t12575 * t12408;
t11490 = t11499 * t12418 + t12512;
t13074 = t11490 * t12575;
t12839 = t12397 * t12413;
t12083 = t12391 * t13123 + t12839;
t12863 = t12391 * t12414;
t12866 = t12391 * t12409;
t12914 = t12338 * t12417;
t11752 = (t12083 * t12409 - t12302 * t12863) * t12914 + t12341 * (t12083 * t12414 + t12302 * t12866);
t11854 = (t12296 * t12414 + t12302 * t12765) * t12914 + (-t12296 * t12409 + t12302 * t12753) * t12341;
t11699 = t11752 * t12385 + t11854 * t12373;
t11700 = -t11752 * t12373 + t11854 * t12385;
t12864 = t12391 * t12413;
t11746 = (-(t12296 * t12765 - t12302 * t12414) * t12914 - t12341 * (t12296 * t12753 + t12302 * t12409)) * t12397 + t12103 * t12864;
t12593 = t12908 * t13062;
t11500 = t12417 * t12593 + (t11602 * t11746 + t11651 * t11700 + t11652 * t11699) * t12096 * t12408;
t12749 = t12417 * t12435;
t12763 = t12409 * t12432;
t12574 = 0.1e1 / ((-t12414 * t12435 + t12417 * t12763) * t13077 + pkin(3) * (t12409 * t12749 + t12414 * t12432));
t12511 = -t12290 * t12593 + (t11602 * t13205 + t11638 * t11652 + t11641 * t11651) * t12574 * t12408;
t11491 = t11500 * t12418 + t12511;
t13073 = t11491 * t12574;
t12837 = t12398 * t12413;
t12084 = t12392 * t13122 + t12837;
t12858 = t12392 * t12414;
t12861 = t12392 * t12409;
t12913 = t12339 * t12417;
t11753 = (t12084 * t12409 - t12303 * t12858) * t12913 + t12342 * (t12084 * t12414 + t12303 * t12861);
t11855 = (t12297 * t12414 + t12303 * t12765) * t12913 + (-t12297 * t12409 + t12303 * t12753) * t12342;
t11701 = t11753 * t12386 + t11855 * t12374;
t11702 = -t11753 * t12374 + t11855 * t12386;
t12859 = t12392 * t12413;
t11747 = (-(t12297 * t12765 - t12303 * t12414) * t12913 - t12342 * (t12297 * t12753 + t12303 * t12409)) * t12398 + t12104 * t12859;
t12592 = t12908 * t13060;
t11501 = t12417 * t12592 + (t11603 * t11747 + t11653 * t11702 + t11654 * t11701) * t12099 * t12408;
t12748 = t12417 * t12436;
t12762 = t12409 * t12433;
t12573 = 0.1e1 / ((-t12414 * t12436 + t12417 * t12762) * t13077 + pkin(3) * (t12409 * t12748 + t12414 * t12433));
t12510 = -t12290 * t12592 + (t11603 * t13204 + t11639 * t11654 + t11642 * t11653) * t12573 * t12408;
t11492 = t11501 * t12418 + t12510;
t13072 = t11492 * t12573;
t13053 = (((t11971 * t12852 + t12410 * t13151) * t12381 + t12369 * (-t11971 * t12855 + t12415 * t13151)) * t12387 + ((-t11971 * t12410 + t12852 * t13151) * t12381 + (-t11971 * t12415 - t12855 * t13151) * t12369) * t12375) * t12105;
t13052 = (((t11968 * t12867 + t12410 * t13154) * t12378 + t12366 * (-t11968 * t12870 + t12415 * t13154)) * t12384 + t12372 * ((-t11968 * t12410 + t12867 * t13154) * t12378 + (-t11968 * t12415 - t12870 * t13154) * t12366)) * t12093;
t13051 = (((t11969 * t12862 + t12410 * t13153) * t12379 + (-t11969 * t12865 + t12415 * t13153) * t12367) * t12385 + ((-t11969 * t12410 + t12862 * t13153) * t12379 + t12367 * (-t11969 * t12415 - t12865 * t13153)) * t12373) * t12096;
t13050 = (((t11970 * t12857 + t12410 * t13152) * t12380 + (-t11970 * t12860 + t12415 * t13152) * t12368) * t12386 + ((-t11970 * t12410 + t12857 * t13152) * t12380 + t12368 * (-t11970 * t12415 - t12860 * t13152)) * t12374) * t12099;
t13049 = (((t11972 * t12847 + t12410 * t13150) * t12382 + t12370 * (-t11972 * t12850 + t12415 * t13150)) * t12388 + ((-t11972 * t12410 + t12847 * t13150) * t12382 + (-t11972 * t12415 - t12850 * t13150) * t12370) * t12376) * t12108;
t13048 = (((t11973 * t12842 + t12410 * t13149) * t12383 + t12371 * (-t11973 * t12845 + t12415 * t13149)) * t12389 + t12377 * ((-t11973 * t12410 + t12842 * t13149) * t12383 + t12371 * (-t11973 * t12415 - t12845 * t13149))) * t12111;
t12887 = t12384 * t12415;
t12888 = t12384 * t12410;
t13047 = ((t12159 * t12888 + t12415 * t13190) * t12378 - (-t12159 * t12887 + t12410 * t13190) * t12366) * t12093;
t12905 = t12372 * t12415;
t12906 = t12372 * t12410;
t13046 = ((-t12159 * t12906 - t12415 * t13191) * t12378 + (-t12159 * t12905 + t12410 * t13191) * t12366) * t12093;
t12884 = t12385 * t12415;
t12885 = t12385 * t12410;
t13045 = ((t12160 * t12885 + t12415 * t13188) * t12379 - (-t12160 * t12884 + t12410 * t13188) * t12367) * t12096;
t12902 = t12373 * t12415;
t12903 = t12373 * t12410;
t13044 = ((-t12160 * t12903 - t12415 * t13189) * t12379 + (-t12160 * t12902 + t12410 * t13189) * t12367) * t12096;
t12881 = t12386 * t12415;
t12882 = t12386 * t12410;
t13043 = ((t12161 * t12882 + t12415 * t13186) * t12380 - (-t12161 * t12881 + t12410 * t13186) * t12368) * t12099;
t12899 = t12374 * t12415;
t12900 = t12374 * t12410;
t13042 = ((-t12161 * t12900 - t12415 * t13187) * t12380 + (-t12161 * t12899 + t12410 * t13187) * t12368) * t12099;
t12878 = t12387 * t12415;
t12879 = t12387 * t12410;
t13041 = ((t12162 * t12879 + t12415 * t13184) * t12381 - (-t12162 * t12878 + t12410 * t13184) * t12369) * t12105;
t12896 = t12375 * t12415;
t12897 = t12375 * t12410;
t13040 = ((-t12162 * t12897 - t12415 * t13185) * t12381 + (-t12162 * t12896 + t12410 * t13185) * t12369) * t12105;
t12875 = t12388 * t12415;
t12876 = t12388 * t12410;
t13039 = ((t12163 * t12876 + t12415 * t13182) * t12382 - (-t12163 * t12875 + t12410 * t13182) * t12370) * t12108;
t12893 = t12376 * t12415;
t12894 = t12376 * t12410;
t13038 = ((-t12163 * t12894 - t12415 * t13183) * t12382 + (-t12163 * t12893 + t12410 * t13183) * t12370) * t12108;
t12872 = t12389 * t12415;
t12873 = t12389 * t12410;
t13037 = ((t12164 * t12873 + t12415 * t13180) * t12383 - (-t12164 * t12872 + t12410 * t13180) * t12371) * t12111;
t12890 = t12377 * t12415;
t12891 = t12377 * t12410;
t13036 = ((-t12164 * t12891 - t12415 * t13181) * t12383 + (-t12164 * t12890 + t12410 * t13181) * t12371) * t12111;
t13011 = t12017 * t12093;
t13010 = t12018 * t12096;
t13009 = t12019 * t12099;
t13008 = t12020 * t12105;
t13007 = t12021 * t12108;
t13006 = t12022 * t12111;
t13005 = t12023 * t12093;
t13004 = t12024 * t12096;
t13003 = t12025 * t12099;
t13002 = t12026 * t12105;
t13001 = t12027 * t12108;
t13000 = t12028 * t12111;
t12740 = t12449 * t12450;
t12091 = (t12403 * t12827 - t12405 * t12795) * t12451 - t12402 * t12740;
t12993 = t12091 * t12403;
t12986 = t12120 * t12390;
t12985 = t12120 * t12391;
t12984 = t12120 * t12392;
t12983 = t12120 * t12393;
t12982 = t12120 * t12394;
t12981 = t12120 * t12395;
t12974 = t12123 * t12390;
t12973 = t12123 * t12391;
t12972 = t12123 * t12392;
t12971 = t12123 * t12393;
t12970 = t12123 * t12394;
t12969 = t12123 * t12395;
t12956 = t12238 * t12240;
t12954 = t12238 * t12405;
t12953 = t12240 * t12349;
t12952 = t12240 * t12402;
t12945 = t12289 * t12390;
t12944 = t12289 * t12391;
t12943 = t12289 * t12392;
t12942 = t12289 * t12393;
t12941 = t12289 * t12394;
t12940 = t12289 * t12395;
t12939 = t12293 * t12396;
t12938 = t12293 * t12397;
t12937 = t12293 * t12398;
t12936 = t12293 * t12399;
t12935 = t12293 * t12400;
t12934 = t12293 * t12401;
t12933 = t12294 * t12390;
t12932 = t12294 * t12391;
t12931 = t12294 * t12392;
t12930 = t12294 * t12393;
t12929 = t12294 * t12394;
t12928 = t12294 * t12395;
t12921 = t12325 * t12418;
t12920 = t12326 * t12418;
t12919 = t12327 * t12418;
t12918 = t12328 * t12418;
t12917 = t12329 * t12418;
t12916 = t12330 * t12418;
t12909 = t12349 * t12403;
t12840 = t12396 * t12414;
t12838 = t12397 * t12414;
t12836 = t12398 * t12414;
t12834 = t12399 * t12414;
t12832 = t12400 * t12414;
t12830 = t12401 * t12414;
t12828 = t12402 * t12407;
t12820 = t12404 * t12405;
t12805 = t12405 * t12406;
t12796 = t12406 * t12407;
t12767 = t12409 * t12413;
t12755 = t12412 * t12418;
t12210 = -t12403 * t12829 + t12804;
t12211 = t12403 * t12820 + t12828;
t12714 = t12211 * t12091 - t12210 * t12955;
t12212 = t12403 * t12828 + t12820;
t12713 = t12213 * t12091 - t12212 * t12955;
t12092 = (-t12402 * t12795 - t12403 * t12803) * t12451 + t12405 * t12740;
t12712 = t12092 * t12796 - t12213 * t12956;
t12711 = t12403 * t12092 - t12805 * t12956;
t12621 = t12406 * t12733;
t12678 = t12240 * t12796;
t12710 = t12212 * t12621 + t12349 * t12678;
t12703 = t12575 * t13206;
t12702 = t12574 * t13205;
t12701 = t12573 * t13204;
t12691 = t12093 * t12927;
t12690 = t12096 * t12926;
t12689 = t12099 * t12925;
t12688 = t12105 * t12924;
t12687 = t12108 * t12923;
t12686 = t12111 * t12922;
t12680 = t12210 * t12956;
t12679 = t12211 * t12733;
t12677 = t12406 ^ 2 * t12733;
t12669 = t12390 * t12765;
t12668 = t12458 * t12869;
t12667 = t12390 * t12753;
t12666 = t12391 * t12765;
t12665 = t12459 * t12864;
t12664 = t12391 * t12753;
t12663 = t12392 * t12765;
t12662 = t12460 * t12859;
t12661 = t12392 * t12753;
t12660 = t12393 * t12765;
t12659 = t12461 * t12854;
t12658 = t12393 * t12753;
t12657 = t12394 * t12765;
t12656 = t12462 * t12849;
t12655 = t12394 * t12753;
t12654 = t12395 * t12765;
t12653 = t12463 * t12844;
t12652 = t12395 * t12753;
t12651 = t12396 * t12766;
t12650 = t12396 * t12765;
t12649 = t12397 * t12766;
t12648 = t12397 * t12765;
t12647 = t12398 * t12766;
t12646 = t12398 * t12765;
t12645 = t12399 * t12766;
t12644 = t12399 * t12765;
t12643 = t12400 * t12766;
t12642 = t12400 * t12765;
t12641 = t12401 * t12766;
t12640 = t12401 * t12765;
t12639 = t12418 * t12826;
t12638 = t12418 * t12825;
t12637 = t12418 * t12824;
t12636 = t12418 * t12823;
t12635 = t12418 * t12822;
t12634 = t12418 * t12821;
t12620 = t12413 * t12764;
t12619 = t12413 * t12763;
t12618 = t12413 * t12762;
t12617 = t12434 * t12767;
t12616 = t12435 * t12767;
t12615 = t12436 * t12767;
t12614 = t12413 * t12761;
t12613 = t12413 * t12760;
t12612 = t12413 * t12759;
t12611 = t12413 * t12758;
t12610 = t12447 * t12767;
t12609 = t12413 * t12757;
t12608 = t12372 * t12756;
t12607 = t12373 * t12756;
t12606 = t12374 * t12756;
t12605 = t12375 * t12756;
t12604 = t12376 * t12756;
t12603 = t12377 * t12756;
t12602 = t12384 * t12756;
t12601 = t12385 * t12756;
t12600 = t12386 * t12756;
t12599 = t12387 * t12756;
t12598 = t12388 * t12756;
t12597 = t12389 * t12756;
t12596 = t12417 * t12754;
t12588 = t12405 * t12677;
t12587 = t12366 * t12639;
t12586 = t12367 * t12638;
t12585 = t12368 * t12637;
t12584 = t12369 * t12636;
t12583 = t12370 * t12635;
t12582 = t12371 * t12634;
t12581 = t12378 * t12639;
t12580 = t12379 * t12638;
t12579 = t12380 * t12637;
t12578 = t12381 * t12636;
t12577 = t12382 * t12635;
t12576 = t12383 * t12634;
t12547 = t12240 * t12909 - t12402 * t12677;
t12528 = t12092 * t12210 - t12211 * t12953;
t12527 = -t12092 * t12212 + t12213 * t12953;
t12520 = -t12091 * t12796 - t12212 * t12956;
t12503 = t12575 * t13078;
t12502 = t12574 * t13079;
t12501 = t12573 * t13080;
t12292 = t12596 + t12755;
t12125 = t12292 * t12431 + t12617;
t12494 = (-MDP(4) * t12125 - MDP(5) * (t12292 * t12434 - t12620)) * t13064 + (t11499 * MDP(1) + (t12418 * t12512 + t11499) * MDP(2) + (MDP(4) * ((t12414 * t12750 - t12764) * t12413 + t12434 * t12755) - MDP(5) * t12125) * t11505) * t12093;
t12126 = t12292 * t12432 + t12616;
t12493 = (-MDP(4) * t12126 - MDP(5) * (t12292 * t12435 - t12619)) * t13062 + (t11500 * MDP(1) + (t12418 * t12511 + t11500) * MDP(2) + (MDP(4) * ((t12414 * t12749 - t12763) * t12413 + t12435 * t12755) - MDP(5) * t12126) * t11506) * t12096;
t12127 = t12292 * t12433 + t12615;
t12492 = (-MDP(4) * t12127 - MDP(5) * (t12292 * t12436 - t12618)) * t13060 + (t11501 * MDP(1) + (t12418 * t12510 + t11501) * MDP(2) + (MDP(4) * ((t12414 * t12748 - t12762) * t12413 + t12436 * t12755) - MDP(5) * t12127) * t11507) * t12099;
t12134 = t12292 * t12443 + t12611;
t12137 = t12292 * t12446 - t12614;
t12491 = (-MDP(4) * t12134 - MDP(5) * t12137) * t13058 + (t11502 * MDP(1) + (t12418 * t12509 + t11502) * MDP(2) + (MDP(4) * t12137 - MDP(5) * t12134) * t11508) * t12105;
t12135 = t12292 * t12444 + t12610;
t12490 = (-MDP(4) * t12135 - MDP(5) * (t12292 * t12447 - t12613)) * t13056 + (t11503 * MDP(1) + (t12418 * t12508 + t11503) * MDP(2) + (MDP(4) * ((t12414 * t12747 - t12760) * t12413 + t12447 * t12755) - MDP(5) * t12135) * t11509) * t12108;
t12136 = t12292 * t12445 + t12609;
t12139 = t12292 * t12448 - t12612;
t12489 = (-MDP(4) * t12136 - MDP(5) * t12139) * t13054 + (t11504 * MDP(1) + (t12418 * t12507 + t11504) * MDP(2) + (MDP(4) * t12139 - MDP(5) * t12136) * t11510) * t12111;
t12237 = t12389 * t12842 - t12891;
t12236 = t12377 * t12842 + t12873;
t12235 = t12388 * t12847 - t12894;
t12234 = t12376 * t12847 + t12876;
t12233 = t12387 * t12852 - t12897;
t12232 = t12375 * t12852 + t12879;
t12231 = t12386 * t12857 - t12900;
t12230 = t12374 * t12857 + t12882;
t12229 = t12385 * t12862 - t12903;
t12228 = t12373 * t12862 + t12885;
t12227 = t12384 * t12867 - t12906;
t12226 = t12372 * t12867 + t12888;
t12225 = t12389 * t12845 + t12890;
t12224 = -t12377 * t12845 + t12872;
t12223 = t12388 * t12850 + t12893;
t12222 = -t12376 * t12850 + t12875;
t12221 = t12387 * t12855 + t12896;
t12220 = -t12375 * t12855 + t12878;
t12219 = t12386 * t12860 + t12899;
t12218 = -t12374 * t12860 + t12881;
t12217 = t12385 * t12865 + t12902;
t12216 = -t12373 * t12865 + t12884;
t12215 = t12384 * t12870 + t12905;
t12214 = -t12372 * t12870 + t12887;
t12118 = t12210 * t12621;
t12056 = -t12209 + t12088;
t12030 = t12091 * t12805;
t11986 = -t12089 + t12209;
t11927 = -t12088 + t12089;
t11925 = t12211 * t12956;
t11924 = -t12209 - t12089;
t11923 = -t12209 - t12088;
t11907 = -t12088 - t12089;
t11894 = t13155 * t12830 + (t12377 * t12765 - t12389 * t12843) * t12164;
t11893 = t13161 * t12830 + t12164 * (t12377 * t12843 + t12389 * t12765);
t11892 = t13156 * t12832 + t12163 * (t12376 * t12765 - t12388 * t12848);
t11891 = t13162 * t12832 + t12163 * (t12376 * t12848 + t12388 * t12765);
t11890 = t13157 * t12834 + t12162 * (t12375 * t12765 - t12387 * t12853);
t11889 = t13163 * t12834 + t12162 * (t12375 * t12853 + t12387 * t12765);
t11888 = t13158 * t12836 + t12161 * (t12374 * t12765 - t12386 * t12858);
t11887 = t13159 * t12838 + t12160 * (t12373 * t12765 - t12385 * t12863);
t11886 = t13165 * t12838 + t12160 * (t12373 * t12863 + t12385 * t12765);
t11885 = t13160 * t12840 + t12159 * (t12372 * t12765 - t12384 * t12868);
t11884 = t13166 * t12840 + t12159 * (t12372 * t12868 + t12384 * t12765);
t11883 = t13164 * t12836 + t12161 * (t12374 * t12858 + t12386 * t12765);
t11882 = t13161 * t12640 + (t12377 * t12654 - t12389 * t12414) * t12164;
t11881 = t13162 * t12642 + t12163 * (t12376 * t12657 - t12388 * t12414);
t11880 = t13163 * t12644 + t12162 * (t12375 * t12660 - t12387 * t12414);
t11879 = t13165 * t12648 + t12160 * (t12373 * t12666 - t12385 * t12414);
t11878 = t13166 * t12650 + t12159 * (t12372 * t12669 - t12384 * t12414);
t11877 = t13155 * t12640 - t12164 * (t12377 * t12414 + t12389 * t12654);
t11876 = t13156 * t12642 - t12163 * (t12376 * t12414 + t12388 * t12657);
t11875 = t13157 * t12644 - t12162 * (t12375 * t12414 + t12387 * t12660);
t11874 = t13158 * t12646 - t12161 * (t12374 * t12414 + t12386 * t12663);
t11873 = t13159 * t12648 - (t12373 * t12414 + t12385 * t12666) * t12160;
t11872 = t13160 * t12650 - t12159 * (t12372 * t12414 + t12384 * t12669);
t11871 = t13164 * t12646 + t12161 * (t12374 * t12663 - t12386 * t12414);
t11813 = -t13161 * t12641 + ((-t12377 * t12846 + t12389 * t12753) * t12417 - t12597) * t12164;
t11812 = -t13162 * t12643 + t12163 * ((-t12376 * t12851 + t12388 * t12753) * t12417 - t12598);
t11811 = -t13163 * t12645 + t12162 * ((-t12375 * t12856 + t12387 * t12753) * t12417 - t12599);
t11810 = -t13165 * t12649 + t12160 * ((-t12373 * t12866 + t12385 * t12753) * t12417 - t12601);
t11809 = -t13166 * t12651 + t12159 * ((-t12372 * t12871 + t12384 * t12753) * t12417 - t12602);
t11808 = -t13155 * t12641 + ((t12377 * t12753 + t12389 * t12846) * t12417 - t12603) * t12164;
t11807 = -t13156 * t12643 + t12163 * ((t12376 * t12753 + t12388 * t12851) * t12417 - t12604);
t11806 = -t13157 * t12645 + t12162 * ((t12375 * t12753 + t12387 * t12856) * t12417 - t12605);
t11805 = -t13158 * t12647 + t12161 * ((t12374 * t12753 + t12386 * t12861) * t12417 - t12606);
t11804 = -t13164 * t12647 + t12161 * ((-t12374 * t12861 + t12386 * t12753) * t12417 - t12600);
t11803 = -t13159 * t12649 + t12160 * ((t12373 * t12753 + t12385 * t12866) * t12417 - t12607);
t11802 = -t13160 * t12651 + t12159 * ((t12372 * t12753 + t12384 * t12871) * t12417 - t12608);
t11801 = t12336 * t12831 + (-t11953 * t12383 + t11965 * t12371) * t12418;
t11800 = t12335 * t12833 + (-t11952 * t12382 + t11964 * t12370) * t12418;
t11799 = t12334 * t12835 + (-t11951 * t12381 + t11963 * t12369) * t12418;
t11798 = t12333 * t12837 + (-t11950 * t12380 + t11962 * t12368) * t12418;
t11797 = t12332 * t12839 + (-t11949 * t12379 + t11961 * t12367) * t12418;
t11796 = t12331 * t12841 + (-t11948 * t12378 + t11960 * t12366) * t12418;
t11795 = t13155 * t12934 - ((-t12377 * t12409 + t12389 * t12652) * t12417 - t12395 * t12597) * t12164;
t11794 = t13157 * t12936 - t12162 * ((-t12375 * t12409 + t12387 * t12658) * t12417 - t12393 * t12599);
t11793 = t13163 * t12936 + t12162 * ((t12375 * t12658 + t12387 * t12409) * t12417 - t12393 * t12605);
t11792 = t13164 * t12937 + ((t12374 * t12661 + t12386 * t12409) * t12417 - t12392 * t12606) * t12161;
t11791 = t13159 * t12938 - ((-t12373 * t12409 + t12385 * t12664) * t12417 - t12391 * t12601) * t12160;
t11790 = t13160 * t12939 - t12159 * ((-t12372 * t12409 + t12384 * t12667) * t12417 - t12390 * t12602);
t11789 = t13161 * t12934 + ((t12377 * t12652 + t12389 * t12409) * t12417 - t12395 * t12603) * t12164;
t11788 = t13156 * t12935 - t12163 * ((-t12376 * t12409 + t12388 * t12655) * t12417 - t12394 * t12598);
t11787 = t13162 * t12935 + ((t12376 * t12655 + t12388 * t12409) * t12417 - t12394 * t12604) * t12163;
t11786 = t13158 * t12937 - t12161 * ((-t12374 * t12409 + t12386 * t12661) * t12417 - t12392 * t12600);
t11785 = t13165 * t12938 + ((t12373 * t12664 + t12385 * t12409) * t12417 - t12391 * t12607) * t12160;
t11784 = t13166 * t12939 + t12159 * ((t12372 * t12667 + t12384 * t12409) * t12417 - t12390 * t12608);
t11783 = t13155 * t12922 - (-t12225 * t12371 + t12237 * t12383) * t12164;
t11782 = t13156 * t12923 - (-t12223 * t12370 + t12235 * t12382) * t12163;
t11781 = t13157 * t12924 - (-t12221 * t12369 + t12233 * t12381) * t12162;
t11780 = t13158 * t12925 - (-t12219 * t12368 + t12231 * t12380) * t12161;
t11779 = t13159 * t12926 - (-t12217 * t12367 + t12229 * t12379) * t12160;
t11778 = t13160 * t12927 - (-t12215 * t12366 + t12227 * t12378) * t12159;
t11777 = t13161 * t12922 + t12164 * (t12224 * t12371 + t12236 * t12383);
t11776 = t13162 * t12923 + t12163 * (t12222 * t12370 + t12234 * t12382);
t11775 = t13163 * t12924 + t12162 * (t12220 * t12369 + t12232 * t12381);
t11774 = t13164 * t12925 + t12161 * (t12218 * t12368 + t12230 * t12380);
t11773 = t13165 * t12926 + t12160 * (t12216 * t12367 + t12228 * t12379);
t11772 = t13166 * t12927 + t12159 * (t12214 * t12366 + t12226 * t12378);
t11771 = t12548 * t12831 + (t11947 * t12383 + t11959 * t12371) * t12418;
t11770 = t12549 * t12833 + (t11946 * t12382 + t11958 * t12370) * t12418;
t11769 = t12550 * t12835 + (t11945 * t12381 + t11957 * t12369) * t12418;
t11768 = t12551 * t12837 + (t11944 * t12380 + t11956 * t12368) * t12418;
t11767 = t12552 * t12839 + (t11943 * t12379 + t11955 * t12367) * t12418;
t11766 = t12553 * t12841 + (t11942 * t12378 + t11954 * t12366) * t12418;
t11690 = (-t12389 * t13125 + t13119 * t13155) * t12401 + (-t12407 * t12653 + (-t12225 * t12383 - t12237 * t12371) * t12916) * t12406 + t12225 * t12576 + t12237 * t12582 - t12049 * t12844;
t11689 = (t12377 * t13125 + t13119 * t13161) * t12401 + (t12404 * t12653 + (-t12224 * t12383 + t12236 * t12371) * t12916) * t12406 + t12224 * t12576 - t12236 * t12582 - t12037 * t12844;
t11688 = (-t12388 * t13126 + t13120 * t13156) * t12400 + (-t12407 * t12656 + (-t12223 * t12382 - t12235 * t12370) * t12917) * t12406 + t12223 * t12577 + t12235 * t12583 - t12048 * t12849;
t11687 = (t12376 * t13126 + t13120 * t13162) * t12400 + (t12404 * t12656 + (-t12222 * t12382 + t12234 * t12370) * t12917) * t12406 + t12222 * t12577 - t12234 * t12583 - t12036 * t12849;
t11686 = (-t12387 * t13127 + t13121 * t13157) * t12399 + (-t12407 * t12659 + (-t12221 * t12381 - t12233 * t12369) * t12918) * t12406 + t12221 * t12578 + t12233 * t12584 - t12047 * t12854;
t11685 = (t12375 * t13127 + t13121 * t13163) * t12399 + (t12404 * t12659 + (-t12220 * t12381 + t12232 * t12369) * t12918) * t12406 + t12220 * t12578 - t12232 * t12584 - t12035 * t12854;
t11684 = (-t12386 * t13128 + t13122 * t13158) * t12398 + (-t12407 * t12662 + (-t12219 * t12380 - t12231 * t12368) * t12919) * t12406 + t12219 * t12579 + t12231 * t12585 - t12046 * t12859;
t11683 = (t12374 * t13128 + t13122 * t13164) * t12398 + (t12404 * t12662 + (-t12218 * t12380 + t12230 * t12368) * t12919) * t12406 + t12218 * t12579 - t12230 * t12585 - t12034 * t12859;
t11682 = (-t12385 * t13129 + t13123 * t13159) * t12397 + (-t12407 * t12665 + (-t12217 * t12379 - t12229 * t12367) * t12920) * t12406 + t12217 * t12580 + t12229 * t12586 - t12045 * t12864;
t11681 = (t12373 * t13129 + t13123 * t13165) * t12397 + (t12404 * t12665 + (-t12216 * t12379 + t12228 * t12367) * t12920) * t12406 + t12216 * t12580 - t12228 * t12586 - t12033 * t12864;
t11680 = (-t12384 * t13130 + t13124 * t13160) * t12396 + (-t12407 * t12668 + (-t12215 * t12378 - t12227 * t12366) * t12921) * t12406 + t12215 * t12581 + t12227 * t12587 - t12044 * t12869;
t11679 = (t12372 * t13130 + t13124 * t13166) * t12396 + (t12404 * t12668 + (-t12214 * t12378 + t12226 * t12366) * t12921) * t12406 + t12214 * t12581 - t12226 * t12587 - t12032 * t12869;
t11678 = (t11882 * t12415 + t11893 * t12410) * t12383 + (-t11882 * t12410 + t11893 * t12415) * t12371;
t11677 = (t11881 * t12415 + t11891 * t12410) * t12382 + (-t11881 * t12410 + t11891 * t12415) * t12370;
t11676 = (t11880 * t12415 + t11889 * t12410) * t12381 + (-t11880 * t12410 + t11889 * t12415) * t12369;
t11675 = (t11879 * t12415 + t11886 * t12410) * t12379 + (-t11879 * t12410 + t11886 * t12415) * t12367;
t11674 = (t11878 * t12415 + t11884 * t12410) * t12378 + (-t11878 * t12410 + t11884 * t12415) * t12366;
t11673 = (t11877 * t12415 + t11894 * t12410) * t12383 + (-t11877 * t12410 + t11894 * t12415) * t12371;
t11672 = (t11876 * t12415 + t11892 * t12410) * t12382 + t12370 * (-t11876 * t12410 + t11892 * t12415);
t11671 = (t11875 * t12415 + t11890 * t12410) * t12381 + t12369 * (-t11875 * t12410 + t11890 * t12415);
t11670 = (t11874 * t12415 + t11888 * t12410) * t12380 + t12368 * (-t11874 * t12410 + t11888 * t12415);
t11669 = (t11873 * t12415 + t11887 * t12410) * t12379 + t12367 * (-t11873 * t12410 + t11887 * t12415);
t11668 = (t11872 * t12415 + t11885 * t12410) * t12378 + (-t11872 * t12410 + t11885 * t12415) * t12366;
t11667 = (t11871 * t12415 + t11883 * t12410) * t12380 + (-t11871 * t12410 + t11883 * t12415) * t12368;
t11636 = (t11795 * t12415 + t11808 * t12410) * t12383 + (-t11795 * t12410 + t11808 * t12415) * t12371;
t11635 = (t11794 * t12415 + t11806 * t12410) * t12381 + t12369 * (-t11794 * t12410 + t11806 * t12415);
t11634 = (t11793 * t12415 + t11811 * t12410) * t12381 + (-t11793 * t12410 + t11811 * t12415) * t12369;
t11633 = (t11792 * t12415 + t11804 * t12410) * t12380 + (-t11792 * t12410 + t11804 * t12415) * t12368;
t11632 = (t11791 * t12415 + t11803 * t12410) * t12379 + (-t11791 * t12410 + t11803 * t12415) * t12367;
t11631 = (t11790 * t12415 + t11802 * t12410) * t12378 + (-t11790 * t12410 + t11802 * t12415) * t12366;
t11630 = (t11789 * t12415 + t11813 * t12410) * t12383 + (-t11789 * t12410 + t11813 * t12415) * t12371;
t11629 = (t11788 * t12415 + t11807 * t12410) * t12382 + t12370 * (-t11788 * t12410 + t11807 * t12415);
t11628 = (t11787 * t12415 + t11812 * t12410) * t12382 + (-t11787 * t12410 + t11812 * t12415) * t12370;
t11627 = (t11786 * t12415 + t11805 * t12410) * t12380 + (-t11786 * t12410 + t11805 * t12415) * t12368;
t11626 = (t11785 * t12415 + t11810 * t12410) * t12379 + (-t11785 * t12410 + t11810 * t12415) * t12367;
t11625 = (t11784 * t12415 + t11809 * t12410) * t12378 + (-t11784 * t12410 + t11809 * t12415) * t12366;
t11624 = ((t11973 * t12928 + t12289 * t13149) * t12383 + t12371 * (-t11973 * t12940 + t12294 * t13149)) * t12389 - ((t11973 * t12289 - t12928 * t13149) * t12383 + (t11973 * t12294 + t12940 * t13149) * t12371) * t12377;
t11623 = ((t11972 * t12929 + t12289 * t13150) * t12382 + t12370 * (-t11972 * t12941 + t12294 * t13150)) * t12388 - t12376 * ((t11972 * t12289 - t12929 * t13150) * t12382 + (t11972 * t12294 + t12941 * t13150) * t12370);
t11622 = ((t11971 * t12930 + t12289 * t13151) * t12381 + t12369 * (-t11971 * t12942 + t12294 * t13151)) * t12387 - ((t11971 * t12289 - t12930 * t13151) * t12381 + t12369 * (t11971 * t12294 + t12942 * t13151)) * t12375;
t11621 = ((t11969 * t12932 + t12289 * t13153) * t12379 + t12367 * (-t11969 * t12944 + t12294 * t13153)) * t12385 - ((t11969 * t12289 - t12932 * t13153) * t12379 + t12367 * (t11969 * t12294 + t12944 * t13153)) * t12373;
t11620 = ((t11968 * t12933 + t12289 * t13154) * t12378 + t12366 * (-t11968 * t12945 + t12294 * t13154)) * t12384 - ((t11968 * t12289 - t12933 * t13154) * t12378 + t12366 * (t11968 * t12294 + t12945 * t13154)) * t12372;
t11619 = ((t11970 * t12931 + t12289 * t13152) * t12380 + t12368 * (-t11970 * t12943 + t12294 * t13152)) * t12386 - ((t11970 * t12289 - t12931 * t13152) * t12380 + t12368 * (t11970 * t12294 + t12943 * t13152)) * t12374;
t11618 = (-t11771 * t12404 + t11801 * t12407) * t12389 + t12377 * (t11771 * t12407 + t11801 * t12404);
t11617 = (-t11770 * t12404 + t11800 * t12407) * t12388 + t12376 * (t11770 * t12407 + t11800 * t12404);
t11616 = (-t11769 * t12404 + t11799 * t12407) * t12387 + t12375 * (t11769 * t12407 + t11799 * t12404);
t11615 = (-t11768 * t12404 + t11798 * t12407) * t12386 + t12374 * (t11768 * t12407 + t11798 * t12404);
t11614 = (-t11767 * t12404 + t11797 * t12407) * t12385 + t12373 * (t11767 * t12407 + t11797 * t12404);
t11613 = (-t11766 * t12404 + t11796 * t12407) * t12384 + t12372 * (t11766 * t12407 + t11796 * t12404);
t11612 = ((t11970 * t12972 + t12120 * t13152) * t12380 + (-t11970 * t12984 + t12123 * t13152) * t12368) * t12386 - t12374 * ((t11970 * t12120 - t12972 * t13152) * t12380 + t12368 * (t11970 * t12123 + t12984 * t13152));
t11611 = ((t11973 * t12969 + t12120 * t13149) * t12383 + t12371 * (-t11973 * t12981 + t12123 * t13149)) * t12389 - ((t11973 * t12120 - t12969 * t13149) * t12383 + t12371 * (t11973 * t12123 + t12981 * t13149)) * t12377;
t11610 = ((t11972 * t12970 + t12120 * t13150) * t12382 + t12370 * (-t11972 * t12982 + t12123 * t13150)) * t12388 - t12376 * ((t11972 * t12120 - t12970 * t13150) * t12382 + t12370 * (t11972 * t12123 + t12982 * t13150));
t11609 = ((t11971 * t12971 + t12120 * t13151) * t12381 + t12369 * (-t11971 * t12983 + t12123 * t13151)) * t12387 - ((t11971 * t12120 - t12971 * t13151) * t12381 + t12369 * (t11971 * t12123 + t12983 * t13151)) * t12375;
t11608 = ((t11969 * t12973 + t12120 * t13153) * t12379 + t12367 * (-t11969 * t12985 + t12123 * t13153)) * t12385 - ((t11969 * t12120 - t12973 * t13153) * t12379 + t12367 * (t11969 * t12123 + t12985 * t13153)) * t12373;
t11607 = ((t11968 * t12974 + t12120 * t13154) * t12378 + t12366 * (-t11968 * t12986 + t12123 * t13154)) * t12384 - ((t11968 * t12120 - t12974 * t13154) * t12378 + t12366 * (t11968 * t12123 + t12986 * t13154)) * t12372;
t11534 = (t11630 * t12445 + t11678 * t12448) * t13077 + pkin(3) * (t11630 * t12448 - t11678 * t12445);
t11533 = (t11628 * t12444 + t11677 * t12447) * t13077 + pkin(3) * (t11628 * t12447 - t11677 * t12444);
t11532 = (t11634 * t12443 + t11676 * t12446) * t13077 + (t11634 * t12446 - t11676 * t12443) * pkin(3);
t11531 = -(t11636 * t12445 + t11673 * t12448) * t13077 - pkin(3) * (t11636 * t12448 - t11673 * t12445);
t11530 = -(t11629 * t12444 + t11672 * t12447) * t13077 - (t11629 * t12447 - t11672 * t12444) * pkin(3);
t11529 = -(t11635 * t12443 + t11671 * t12446) * t13077 - pkin(3) * (t11635 * t12446 - t11671 * t12443);
t11528 = (t11625 * t12431 + t11674 * t12434) * t13077 + pkin(3) * (t11625 * t12434 - t11674 * t12431);
t11527 = -(t11631 * t12431 + t11668 * t12434) * t13077 - (t11631 * t12434 - t11668 * t12431) * pkin(3);
t11526 = (t11626 * t12432 + t11675 * t12435) * t13077 + pkin(3) * (t11626 * t12435 - t11675 * t12432);
t11525 = -(t11627 * t12433 + t11670 * t12436) * t13077 - pkin(3) * (t11627 * t12436 - t11670 * t12433);
t11524 = -(t11632 * t12432 + t11669 * t12435) * t13077 - pkin(3) * (t11632 * t12435 - t11669 * t12432);
t11523 = (t11633 * t12433 + t11667 * t12436) * t13077 + pkin(3) * (t11633 * t12436 - t11667 * t12433);
t11516 = (t11610 * t12444 + t11623 * t12447) * t13077 + pkin(3) * (t11610 * t12447 - t11623 * t12444);
t11515 = (t11611 * t12445 + t11624 * t12448) * t13077 + pkin(3) * (t11611 * t12448 - t11624 * t12445);
t11514 = (t11609 * t12443 + t11622 * t12446) * t13077 + (t11609 * t12446 - t11622 * t12443) * pkin(3);
t11513 = (t11608 * t12432 + t11621 * t12435) * t13077 + pkin(3) * (t11608 * t12435 - t11621 * t12432);
t11512 = (t11607 * t12431 + t11620 * t12434) * t13077 + pkin(3) * (t11607 * t12434 - t11620 * t12431);
t11511 = (t11612 * t12433 + t11619 * t12436) * t13077 + pkin(3) * (t11612 * t12436 - t11619 * t12433);
t11486 = t11498 * t12412 + t11504 * t12596;
t11485 = t11497 * t12412 + t11503 * t12596;
t11484 = t11496 * t12412 + t11502 * t12596;
t11483 = t11492 * t12412 + t11501 * t12596;
t11482 = t11491 * t12412 + t11500 * t12596;
t11481 = t11490 * t12412 + t11499 * t12596;
t11480 = -t11486 * t12445 - t11504 * t12609;
t11479 = t11486 * t12448 - t11504 * t12612;
t11478 = -t11485 * t12444 - t11503 * t12610;
t11477 = t11485 * t12447 - t11503 * t12613;
t11476 = -t11484 * t12443 - t11502 * t12611;
t11475 = t11484 * t12446 - t11502 * t12614;
t11474 = -t11483 * t12433 - t11501 * t12615;
t11473 = t11483 * t12436 - t11501 * t12618;
t11472 = -t11482 * t12432 - t11500 * t12616;
t11471 = t11482 * t12435 - t11500 * t12619;
t11470 = -t11481 * t12431 - t11499 * t12617;
t11469 = t11481 * t12434 - t11499 * t12620;
t1 = [(-t11505 * t12691 - t11506 * t12690 - t11507 * t12689 - t11508 * t12688 - t11509 * t12687 - t11510 * t12686) * MDP(3) + (-t11469 * t12691 - t11471 * t12690 - t11473 * t12689 - t11475 * t12688 - t11477 * t12687 - t11479 * t12686) * MDP(4) + (-t11470 * t12691 - t11472 * t12690 - t11474 * t12689 - t11476 * t12688 - t11478 * t12687 - t11480 * t12686) * MDP(5) + (t12547 - t12993) * MDP(12) + (-t12238 * t12909 - t12588 + t12711) * MDP(13) + (t11907 * t12403 + t12030) * MDP(14) + ((MDP(12) * t11923 + MDP(14) * t12953) * t12405 + (MDP(12) * t12956 - t11924 * MDP(13) + (t12092 + t12955) * MDP(14)) * t12402) * t12406 + ((t11490 * t12703 + t11491 * t12702 + t11492 * t12701 + t11496 * t12700 + t11497 * t12699 + t11498 * t12698) * MDP(2) + t12489 * t11750 + t12490 * t11749 + t12491 * t11748 + t12492 * t11747 + t12493 * t11746 + t12494 * t11745 + (-t12701 * t13080 - t12702 * t13079 - t12703 * t13078 + t13109 * t13136 + t13110 * t13135 + t13111 * t13134) * t12412) * t12408; (t11505 * t13005 + t11506 * t13004 + t11507 * t13003 + t11508 * t13002 + t11509 * t13001 + t11510 * t13000) * MDP(3) + (t11469 * t13005 + t11471 * t13004 + t11473 * t13003 + t11475 * t13002 + t11477 * t13001 + t11479 * t13000) * MDP(4) + (t11470 * t13005 + t11472 * t13004 + t11474 * t13003 + t11476 * t13002 + t11478 * t13001 + t11480 * t13000) * MDP(5) + (t11923 * t12211 + t12118 - t12680) * MDP(12) + (t11924 * t12210 - t11925) * MDP(13) + (-t12528 + t12714) * MDP(14) + (-MDP(13) * t12679 + ((t12091 - t12953) * MDP(12) + (-t12092 + t12955) * MDP(13) - t11907 * MDP(14)) * t12404) * t12406 + ((t11640 * t13074 + t11641 * t13073 + t11642 * t13072 + t11646 * t13139 + t11647 * t13138 + t11648 * t13137) * MDP(2) + t12489 * t11708 + t12490 * t11706 + t12491 * t11704 + t12492 * t11702 + t12493 * t11700 + t12494 * t11698 + (-t11640 * t12503 - t11641 * t12502 - t11642 * t12501 + t11646 * t13109 + t11647 * t13110 + t11648 * t13111) * t12412) * t12408; (t11505 * t13011 + t11506 * t13010 + t11507 * t13009 + t11508 * t13008 + t11509 * t13007 + t11510 * t13006) * MDP(3) + (t11469 * t13011 + t11471 * t13010 + t11473 * t13009 + t11475 * t13008 + t11477 * t13007 + t11479 * t13006) * MDP(4) + (t11470 * t13011 + t11472 * t13010 + t11474 * t13009 + t11476 * t13008 + t11478 * t13007 + t11480 * t13006) * MDP(5) + (t11923 * t12213 + t12520 + t12710) * MDP(12) + (t11924 * t12212 + t12712 - t13118) * MDP(13) + (t11907 * t12796 + t12527 + t12713) * MDP(14) + ((t11637 * t13074 + t11638 * t13073 + t11639 * t13072 + t11643 * t13139 + t11644 * t13138 + t11645 * t13137) * MDP(2) + t12489 * t11707 + t12490 * t11705 + t12491 * t11703 + t12492 * t11701 + t12493 * t11699 + t12494 * t11697 + (-t11637 * t12503 - t11638 * t12502 - t11639 * t12501 + t11643 * t13109 + t11644 * t13110 + t11645 * t13111) * t12412) * t12408; (t11505 * t13052 + t11506 * t13051 + t11507 * t13050 + t11508 * t13053 + t11509 * t13049 + t11510 * t13048) * MDP(3) + (t11469 * t13052 + t11471 * t13051 + t11473 * t13050 + t11475 * t13053 + t11477 * t13049 + t11479 * t13048) * MDP(4) + (t11470 * t13052 + t11472 * t13051 + t11474 * t13050 + t11476 * t13053 + t11478 * t13049 + t11480 * t13048) * MDP(5) + (t11927 * t12403 + t12030) * MDP(7) + (t12588 + t12711) * MDP(8) + (t12547 + t12993) * MDP(10) + t12403 * t13167 + (t12403 * MDP(11) * t12733 + (MDP(10) * t12056 + MDP(6) * t12092) * t12405 + (-MDP(10) * t12956 - MDP(7) * t12092 - MDP(8) * t11986 - MDP(9) * t12091) * t12402 + (-MDP(6) * t12952 + (t12238 * t12402 - t12240 * t12405) * MDP(7) + MDP(9) * t12954 + (t12952 - t12954) * MDP(11)) * t12349) * t12406 + ((t11511 * t13072 + t11512 * t13074 + t11513 * t13073 + t11514 * t13139 + t11515 * t13137 + t11516 * t13138) * MDP(2) + t12489 * ((t11618 * t12409 - t12414 * t13081) * t12910 + t12348 * (t11618 * t12414 + t12409 * t13081)) + t12490 * ((t11617 * t12409 - t12414 * t13082) * t12911 + t12347 * (t11617 * t12414 + t12409 * t13082)) + t12491 * ((t11616 * t12409 - t12414 * t13083) * t12912 + t12346 * (t11616 * t12414 + t12409 * t13083)) + t12492 * ((t11615 * t12409 - t12414 * t13084) * t12913 + t12342 * (t11615 * t12414 + t12409 * t13084)) + t12493 * ((t11614 * t12409 - t12414 * t13085) * t12914 + t12341 * (t11614 * t12414 + t12409 * t13085)) + t12494 * ((t11613 * t12409 - t12414 * t13086) * t12915 + t12340 * (t11613 * t12414 + t12409 * t13086)) + (-t11511 * t12501 - t11512 * t12503 - t11513 * t12502 + t11514 * t13109 + t11515 * t13111 + t11516 * t13110) * t12412) * t12408; (t11505 * t13046 + t11506 * t13044 + t11507 * t13042 + t11508 * t13040 + t11509 * t13038 + t11510 * t13036) * MDP(3) + (t11469 * t13046 + t11471 * t13044 + t11473 * t13042 + t11475 * t13040 + t11477 * t13038 + t11479 * t13036) * MDP(4) + (t11470 * t13046 + t11472 * t13044 + t11474 * t13042 + t11476 * t13040 + t11478 * t13038 + t11480 * t13036) * MDP(5) + (t12092 * t12211 + t12210 * t12953) * MDP(6) + (t12528 + t12714) * MDP(7) + (t11986 * t12210 - t11925) * MDP(8) + (t12091 * t12210 + t12211 * t12955) * MDP(9) + (t12056 * t12211 + t12118 + t12680) * MDP(10) + (-t12404 * t12677 + (-t12210 * t12240 - t12211 * t12238) * t12349) * MDP(11) + (MDP(8) * t12679 + (-t11927 * MDP(7) - t12092 * MDP(8) + (-t12091 - t12953) * MDP(10) - t13167) * t12404) * t12406 + ((t11524 * t13073 + t11525 * t13072 + t11527 * t13074 + t11529 * t13139 + t11530 * t13138 + t11531 * t13137) * MDP(2) + t12489 * (-(t11690 * t12409 - t11783 * t12414) * t12910 - t12348 * (t11690 * t12414 + t11783 * t12409)) + t12490 * (-(t11688 * t12409 - t11782 * t12414) * t12911 - t12347 * (t11688 * t12414 + t11782 * t12409)) + t12491 * (-(t11686 * t12409 - t11781 * t12414) * t12912 - t12346 * (t11686 * t12414 + t11781 * t12409)) + t12492 * (-(t11684 * t12409 - t11780 * t12414) * t12913 - t12342 * (t11684 * t12414 + t11780 * t12409)) + t12493 * (-(t11682 * t12409 - t11779 * t12414) * t12914 - t12341 * (t11682 * t12414 + t11779 * t12409)) + t12494 * (-(t11680 * t12409 - t11778 * t12414) * t12915 - t12340 * (t11680 * t12414 + t11778 * t12409)) + (-t11524 * t12502 - t11525 * t12501 - t11527 * t12503 + t11529 * t13109 + t11530 * t13110 + t11531 * t13111) * t12412) * t12408; (t11505 * t13047 + t11506 * t13045 + t11507 * t13043 + t11508 * t13041 + t11509 * t13039 + t11510 * t13037) * MDP(3) + (t11469 * t13047 + t11471 * t13045 + t11473 * t13043 + t11475 * t13041 + t11477 * t13039 + t11479 * t13037) * MDP(4) + (t11470 * t13047 + t11472 * t13045 + t11474 * t13043 + t11476 * t13041 + t11478 * t13039 + t11480 * t13037) * MDP(5) + (t12092 * t12213 + (t12212 * t12349 + t12238 * t12796) * t12240) * MDP(6) + (t11927 * t12796 - t12527 + t12713) * MDP(7) + (t11986 * t12212 + t12712 + t13118) * MDP(8) + (t12091 * t12212 + (t12213 * t12349 - t12678) * t12238) * MDP(9) + (t12056 * t12213 - t12520 + t12710) * MDP(10) + (t12407 * t12677 + (-t12212 * t12240 - t12213 * t12238) * t12349) * MDP(11) + ((t11523 * t13072 + t11526 * t13073 + t11528 * t13074 + t11532 * t13139 + t11533 * t13138 + t11534 * t13137) * MDP(2) + t12489 * ((t11689 * t12409 - t11777 * t12414) * t12910 + (t11689 * t12414 + t11777 * t12409) * t12348) + t12490 * ((t11687 * t12409 - t11776 * t12414) * t12911 + (t11687 * t12414 + t11776 * t12409) * t12347) + t12491 * ((t11685 * t12409 - t11775 * t12414) * t12912 + (t11685 * t12414 + t11775 * t12409) * t12346) + t12492 * ((t11683 * t12409 - t11774 * t12414) * t12913 + (t11683 * t12414 + t11774 * t12409) * t12342) + t12493 * ((t11681 * t12409 - t11773 * t12414) * t12914 + (t11681 * t12414 + t11773 * t12409) * t12341) + t12494 * ((t11679 * t12409 - t11772 * t12414) * t12915 + (t11679 * t12414 + t11772 * t12409) * t12340) + (-t11523 * t12501 - t11526 * t12502 - t11528 * t12503 + t11532 * t13109 + t11533 * t13110 + t11534 * t13111) * t12412) * t12408;];
taucX  = t1;
