% Calculate Gravitation load for parallel robot
% P6PPRRRR3V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d3,d4,theta1,theta2]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 22:25
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 21:49:05
% EndTime: 2019-05-16 21:49:18
% DurationCPUTime: 14.84s
% Computational Cost: add. (8717->613), mult. (22656->1172), div. (270->13), fcn. (25907->63), ass. (0->421)
t3863 = sin(pkin(10));
t3864 = sin(pkin(9));
t3869 = cos(pkin(9));
t3870 = cos(pkin(5));
t3866 = sin(pkin(5));
t3867 = sin(pkin(4));
t3966 = t3866 * t3867;
t3947 = t3864 * t3966;
t3868 = cos(pkin(10));
t3871 = cos(pkin(4));
t3962 = t3868 * t3871;
t3744 = (t3863 * t3869 + t3864 * t3962) * t3870 - t3947;
t3948 = t3869 * t3966;
t3961 = t3869 * t3871;
t3745 = (t3863 * t3864 - t3868 * t3961) * t3870 + t3948;
t3872 = legFrame(6,3);
t3819 = sin(t3872);
t3831 = cos(t3872);
t4109 = t3744 * t3819 + t3745 * t3831;
t3873 = legFrame(5,3);
t3820 = sin(t3873);
t3832 = cos(t3873);
t4108 = t3744 * t3820 + t3745 * t3832;
t3874 = legFrame(4,3);
t3821 = sin(t3874);
t3833 = cos(t3874);
t4107 = t3744 * t3821 + t3745 * t3833;
t3875 = legFrame(3,3);
t3822 = sin(t3875);
t3834 = cos(t3875);
t4106 = t3744 * t3822 + t3745 * t3834;
t3876 = legFrame(2,3);
t3823 = sin(t3876);
t3835 = cos(t3876);
t4105 = t3744 * t3823 + t3745 * t3835;
t3877 = legFrame(1,3);
t3824 = sin(t3877);
t3836 = cos(t3877);
t4104 = t3744 * t3824 + t3745 * t3836;
t3904 = xP(5);
t3856 = sin(t3904);
t3859 = cos(t3904);
t3909 = koppelP(6,3);
t3903 = xP(6);
t3855 = sin(t3903);
t3858 = cos(t3903);
t3915 = koppelP(6,1);
t4072 = koppelP(6,2);
t4090 = t3855 * t4072 - t3858 * t3915;
t3760 = t3856 * t4090 + t3859 * t3909;
t3795 = t3855 * t3915 + t3858 * t4072;
t3905 = xP(4);
t3857 = sin(t3905);
t3860 = cos(t3905);
t3671 = t3760 * t3857 - t3795 * t3860;
t3672 = t3760 * t3860 + t3795 * t3857;
t3910 = koppelP(5,3);
t3916 = koppelP(5,1);
t4073 = koppelP(5,2);
t4089 = t3855 * t4073 - t3858 * t3916;
t3762 = t3856 * t4089 + t3859 * t3910;
t3796 = t3855 * t3916 + t3858 * t4073;
t3675 = t3762 * t3857 - t3796 * t3860;
t3676 = t3762 * t3860 + t3796 * t3857;
t3911 = koppelP(4,3);
t3917 = koppelP(4,1);
t4074 = koppelP(4,2);
t4088 = t3855 * t4074 - t3858 * t3917;
t3764 = t3856 * t4088 + t3859 * t3911;
t3797 = t3855 * t3917 + t3858 * t4074;
t3679 = t3764 * t3857 - t3797 * t3860;
t3680 = t3764 * t3860 + t3797 * t3857;
t3912 = koppelP(3,3);
t3918 = koppelP(3,1);
t4075 = koppelP(3,2);
t4087 = t3855 * t4075 - t3858 * t3918;
t3766 = t3856 * t4087 + t3859 * t3912;
t3798 = t3855 * t3918 + t3858 * t4075;
t3683 = t3766 * t3857 - t3798 * t3860;
t3684 = t3766 * t3860 + t3798 * t3857;
t3913 = koppelP(2,3);
t3919 = koppelP(2,1);
t4076 = koppelP(2,2);
t4086 = t3855 * t4076 - t3858 * t3919;
t3768 = t3856 * t4086 + t3859 * t3913;
t3799 = t3855 * t3919 + t3858 * t4076;
t3687 = t3768 * t3857 - t3799 * t3860;
t3688 = t3768 * t3860 + t3799 * t3857;
t3914 = koppelP(1,3);
t3920 = koppelP(1,1);
t4077 = koppelP(1,2);
t4085 = t3855 * t4077 - t3858 * t3920;
t3770 = t3856 * t4085 + t3859 * t3914;
t3800 = t3855 * t3920 + t3858 * t4077;
t3691 = t3770 * t3857 - t3800 * t3860;
t3692 = t3770 * t3860 + t3800 * t3857;
t3907 = mrSges(4,2);
t3908 = mrSges(4,1);
t3945 = t3855 * t3907 - t3858 * t3908;
t3906 = mrSges(4,3);
t3972 = t3859 * t3906;
t4084 = t3856 * t3945 + t3972;
t4103 = -t3856 * t3906 + t3859 * t3945;
t3883 = legFrame(1,1);
t3830 = sin(t3883);
t3842 = cos(t3883);
t3895 = legFrame(1,2);
t3848 = sin(t3895);
t3981 = t3842 * t3848;
t3987 = t3830 * t3848;
t3854 = cos(t3895);
t4065 = g(1) * t3854;
t3669 = -t3824 * t4065 + (-t3824 * t3987 + t3836 * t3842) * g(2) + (t3824 * t3981 + t3830 * t3836) * g(3);
t3670 = t3836 * t4065 + (t3824 * t3842 + t3836 * t3987) * g(2) + (t3824 * t3830 - t3836 * t3981) * g(3);
t3628 = t3669 * t3869 - t3670 * t3864;
t3759 = g(1) * t3848 + (-g(2) * t3830 + g(3) * t3842) * t3854;
t3964 = t3868 * t3869;
t3967 = t3864 * t3868;
t4102 = t3669 * t3967 + t3670 * t3964 + t3863 * (t3628 * t3871 + t3867 * t3759);
t3882 = legFrame(2,1);
t3829 = sin(t3882);
t3841 = cos(t3882);
t3894 = legFrame(2,2);
t3847 = sin(t3894);
t3982 = t3841 * t3847;
t3988 = t3829 * t3847;
t3853 = cos(t3894);
t4066 = g(1) * t3853;
t3667 = -t3823 * t4066 + (-t3823 * t3988 + t3835 * t3841) * g(2) + (t3823 * t3982 + t3829 * t3835) * g(3);
t3668 = t3835 * t4066 + (t3823 * t3841 + t3835 * t3988) * g(2) + (t3823 * t3829 - t3835 * t3982) * g(3);
t3627 = t3667 * t3869 - t3668 * t3864;
t3758 = g(1) * t3847 + (-g(2) * t3829 + g(3) * t3841) * t3853;
t4101 = t3667 * t3967 + t3668 * t3964 + t3863 * (t3627 * t3871 + t3867 * t3758);
t3881 = legFrame(3,1);
t3828 = sin(t3881);
t3840 = cos(t3881);
t3893 = legFrame(3,2);
t3846 = sin(t3893);
t3983 = t3840 * t3846;
t3989 = t3828 * t3846;
t3852 = cos(t3893);
t4067 = g(1) * t3852;
t3665 = -t3822 * t4067 + (-t3822 * t3989 + t3834 * t3840) * g(2) + (t3822 * t3983 + t3828 * t3834) * g(3);
t3666 = t3834 * t4067 + (t3822 * t3840 + t3834 * t3989) * g(2) + (t3822 * t3828 - t3834 * t3983) * g(3);
t3626 = t3665 * t3869 - t3666 * t3864;
t3757 = g(1) * t3846 + (-g(2) * t3828 + g(3) * t3840) * t3852;
t4100 = t3665 * t3967 + t3666 * t3964 + t3863 * (t3626 * t3871 + t3867 * t3757);
t3880 = legFrame(4,1);
t3827 = sin(t3880);
t3839 = cos(t3880);
t3892 = legFrame(4,2);
t3845 = sin(t3892);
t3984 = t3839 * t3845;
t3990 = t3827 * t3845;
t3851 = cos(t3892);
t4068 = g(1) * t3851;
t3663 = -t3821 * t4068 + (-t3821 * t3990 + t3833 * t3839) * g(2) + (t3821 * t3984 + t3827 * t3833) * g(3);
t3664 = t3833 * t4068 + (t3821 * t3839 + t3833 * t3990) * g(2) + (t3821 * t3827 - t3833 * t3984) * g(3);
t3625 = t3663 * t3869 - t3664 * t3864;
t3756 = g(1) * t3845 + (-g(2) * t3827 + g(3) * t3839) * t3851;
t4099 = t3663 * t3967 + t3664 * t3964 + t3863 * (t3625 * t3871 + t3867 * t3756);
t3879 = legFrame(5,1);
t3826 = sin(t3879);
t3838 = cos(t3879);
t3891 = legFrame(5,2);
t3844 = sin(t3891);
t3985 = t3838 * t3844;
t3991 = t3826 * t3844;
t3850 = cos(t3891);
t4069 = g(1) * t3850;
t3661 = -t3820 * t4069 + (-t3820 * t3991 + t3832 * t3838) * g(2) + (t3820 * t3985 + t3826 * t3832) * g(3);
t3662 = t3832 * t4069 + (t3820 * t3838 + t3832 * t3991) * g(2) + (t3820 * t3826 - t3832 * t3985) * g(3);
t3624 = t3661 * t3869 - t3662 * t3864;
t3755 = g(1) * t3844 + (-g(2) * t3826 + g(3) * t3838) * t3850;
t4098 = t3661 * t3967 + t3662 * t3964 + t3863 * (t3624 * t3871 + t3867 * t3755);
t3878 = legFrame(6,1);
t3825 = sin(t3878);
t3837 = cos(t3878);
t3890 = legFrame(6,2);
t3843 = sin(t3890);
t3986 = t3837 * t3843;
t3992 = t3825 * t3843;
t3849 = cos(t3890);
t4070 = g(1) * t3849;
t3659 = -t3819 * t4070 + (-t3819 * t3992 + t3831 * t3837) * g(2) + (t3819 * t3986 + t3825 * t3831) * g(3);
t3660 = t3831 * t4070 + (t3819 * t3837 + t3831 * t3992) * g(2) + (t3819 * t3825 - t3831 * t3986) * g(3);
t3623 = t3659 * t3869 - t3660 * t3864;
t3754 = g(1) * t3843 + (-g(2) * t3825 + g(3) * t3837) * t3849;
t4097 = t3659 * t3967 + t3660 * t3964 + t3863 * (t3623 * t3871 + t3867 * t3754);
t3774 = t3870 * t3962 - t3966;
t3969 = t3863 * t3870;
t3743 = t3774 * t3864 + t3869 * t3969;
t3746 = t3774 * t3869 - t3864 * t3969;
t3652 = t3743 * t3836 + t3746 * t3824;
t3658 = -t3743 * t3824 + t3746 * t3836;
t4096 = t3652 * t3842 + t3658 * t3987;
t3651 = t3743 * t3835 + t3746 * t3823;
t3657 = -t3743 * t3823 + t3746 * t3835;
t4095 = t3651 * t3841 + t3657 * t3988;
t3650 = t3743 * t3834 + t3746 * t3822;
t3656 = -t3743 * t3822 + t3746 * t3834;
t4094 = t3650 * t3840 + t3656 * t3989;
t3649 = t3743 * t3833 + t3746 * t3821;
t3655 = -t3743 * t3821 + t3746 * t3833;
t4093 = t3649 * t3839 + t3655 * t3990;
t3648 = t3743 * t3832 + t3746 * t3820;
t3654 = -t3743 * t3820 + t3746 * t3832;
t4092 = t3648 * t3838 + t3654 * t3991;
t3647 = t3743 * t3831 + t3746 * t3819;
t3653 = -t3743 * t3819 + t3746 * t3831;
t4091 = t3647 * t3837 + t3653 * t3992;
t3963 = t3868 * t3870;
t3965 = t3867 * t3868;
t4083 = t3871 * (t3628 * t3963 + t3759 * t3866) - (-t3759 * t3965 + (t3669 * t3864 + t3670 * t3869) * t3863) * t3870 - t3669 * t3948 + t3670 * t3947;
t4082 = t3871 * (t3627 * t3963 + t3758 * t3866) - (-t3758 * t3965 + (t3667 * t3864 + t3668 * t3869) * t3863) * t3870 - t3667 * t3948 + t3668 * t3947;
t4081 = t3871 * (t3626 * t3963 + t3757 * t3866) - (-t3757 * t3965 + (t3665 * t3864 + t3666 * t3869) * t3863) * t3870 - t3665 * t3948 + t3666 * t3947;
t4080 = t3871 * (t3625 * t3963 + t3756 * t3866) - (-t3756 * t3965 + (t3663 * t3864 + t3664 * t3869) * t3863) * t3870 - t3663 * t3948 + t3664 * t3947;
t4079 = t3871 * (t3624 * t3963 + t3755 * t3866) - (-t3755 * t3965 + (t3661 * t3864 + t3662 * t3869) * t3863) * t3870 - t3661 * t3948 + t3662 * t3947;
t4078 = t3871 * (t3623 * t3963 + t3754 * t3866) - (-t3754 * t3965 + (t3659 * t3864 + t3660 * t3869) * t3863) * t3870 - t3659 * t3948 + t3660 * t3947;
t3902 = m(2) + m(3);
t4071 = pkin(8) * sin(pkin(6));
t3884 = sin(qJ(3,6));
t3887 = cos(qJ(3,6));
t3801 = pkin(3) * t3887 + t3884 * t4071;
t3804 = pkin(3) * t3884 - t3887 * t4071;
t3734 = t3801 * t3969 + t3804 * t3868;
t3731 = 0.1e1 / t3734;
t4064 = ((t3884 * t4078 + t3887 * t4097) * mrSges(3,2) + (t3884 * t4097 - t3887 * t4078) * mrSges(3,1)) * t3731;
t3885 = sin(qJ(3,5));
t3888 = cos(qJ(3,5));
t3802 = pkin(3) * t3888 + t3885 * t4071;
t3805 = pkin(3) * t3885 - t3888 * t4071;
t3735 = t3802 * t3969 + t3805 * t3868;
t3732 = 0.1e1 / t3735;
t4063 = ((t3885 * t4079 + t3888 * t4098) * mrSges(3,2) + (t3885 * t4098 - t3888 * t4079) * mrSges(3,1)) * t3732;
t3886 = sin(qJ(3,4));
t3889 = cos(qJ(3,4));
t3803 = pkin(3) * t3889 + t3886 * t4071;
t3806 = pkin(3) * t3886 - t3889 * t4071;
t3736 = t3803 * t3969 + t3806 * t3868;
t3733 = 0.1e1 / t3736;
t4062 = ((t3886 * t4080 + t3889 * t4099) * mrSges(3,2) + (t3886 * t4099 - t3889 * t4080) * mrSges(3,1)) * t3733;
t3896 = sin(qJ(3,3));
t3899 = cos(qJ(3,3));
t3807 = pkin(3) * t3899 + t3896 * t4071;
t3810 = pkin(3) * t3896 - t3899 * t4071;
t3740 = t3807 * t3969 + t3810 * t3868;
t3737 = 0.1e1 / t3740;
t4061 = ((t3896 * t4081 + t3899 * t4100) * mrSges(3,2) + (t3896 * t4100 - t3899 * t4081) * mrSges(3,1)) * t3737;
t3897 = sin(qJ(3,2));
t3900 = cos(qJ(3,2));
t3808 = pkin(3) * t3900 + t3897 * t4071;
t3811 = pkin(3) * t3897 - t3900 * t4071;
t3741 = t3808 * t3969 + t3811 * t3868;
t3738 = 0.1e1 / t3741;
t4060 = ((t3897 * t4082 + t3900 * t4101) * mrSges(3,2) + (t3897 * t4101 - t3900 * t4082) * mrSges(3,1)) * t3738;
t3898 = sin(qJ(3,1));
t3901 = cos(qJ(3,1));
t3809 = pkin(3) * t3901 + t3898 * t4071;
t3812 = pkin(3) * t3898 - t3901 * t4071;
t3742 = t3809 * t3969 + t3812 * t3868;
t3739 = 0.1e1 / t3742;
t4059 = ((t4083 * t3898 + t3901 * t4102) * mrSges(3,2) + (t3898 * t4102 - t4083 * t3901) * mrSges(3,1)) * t3739;
t3968 = t3863 * t3871;
t3772 = t3864 * t3968 - t3964;
t3775 = t3863 * t3961 + t3967;
t3713 = -t3772 * t3819 + t3775 * t3831;
t4058 = (-(t3713 * t3887 - t3884 * t4109) * t4071 + pkin(3) * (t3884 * t3713 + t3887 * t4109)) * t3849;
t3714 = -t3772 * t3820 + t3775 * t3832;
t4057 = (-(t3714 * t3888 - t3885 * t4108) * t4071 + pkin(3) * (t3885 * t3714 + t3888 * t4108)) * t3850;
t3715 = -t3772 * t3821 + t3775 * t3833;
t4056 = (-(t3715 * t3889 - t3886 * t4107) * t4071 + pkin(3) * (t3886 * t3715 + t3889 * t4107)) * t3851;
t3716 = -t3772 * t3822 + t3775 * t3834;
t4055 = (-(t3716 * t3899 - t3896 * t4106) * t4071 + pkin(3) * (t3896 * t3716 + t3899 * t4106)) * t3852;
t3717 = -t3772 * t3823 + t3775 * t3835;
t4054 = (-(t3717 * t3900 - t3897 * t4105) * t4071 + pkin(3) * (t3897 * t3717 + t3900 * t4105)) * t3853;
t3718 = -t3772 * t3824 + t3775 * t3836;
t4053 = (-(t3718 * t3901 - t3898 * t4104) * t4071 + pkin(3) * (t3898 * t3718 + t3901 * t4104)) * t3854;
t4052 = (t3623 * t3867 - t3754 * t3871) / ((-t3868 * t3887 + t3884 * t3969) * t4071 + pkin(3) * (t3868 * t3884 + t3887 * t3969));
t4051 = (t3624 * t3867 - t3755 * t3871) / ((-t3868 * t3888 + t3885 * t3969) * t4071 + pkin(3) * (t3868 * t3885 + t3888 * t3969));
t4050 = (t3625 * t3867 - t3756 * t3871) / ((-t3868 * t3889 + t3886 * t3969) * t4071 + pkin(3) * (t3868 * t3886 + t3889 * t3969));
t4049 = (t3626 * t3867 - t3757 * t3871) / ((-t3868 * t3899 + t3896 * t3969) * t4071 + pkin(3) * (t3868 * t3896 + t3899 * t3969));
t4048 = (t3627 * t3867 - t3758 * t3871) / ((-t3868 * t3900 + t3897 * t3969) * t4071 + pkin(3) * (t3868 * t3897 + t3900 * t3969));
t4047 = (t3628 * t3867 - t3759 * t3871) / ((-t3868 * t3901 + t3898 * t3969) * t4071 + pkin(3) * (t3868 * t3898 + t3901 * t3969));
t4040 = t3731 * t3754;
t4039 = t3732 * t3755;
t4038 = t3733 * t3756;
t4037 = t3737 * t3757;
t4036 = t3738 * t3758;
t4035 = t3739 * t3759;
t3782 = -t3819 * t3864 + t3831 * t3869;
t4028 = t3782 * t3849;
t4027 = t3782 * t3863;
t4026 = t3782 * t3868;
t3783 = -t3820 * t3864 + t3832 * t3869;
t4025 = t3783 * t3850;
t4024 = t3783 * t3863;
t4023 = t3783 * t3868;
t3784 = -t3821 * t3864 + t3833 * t3869;
t4022 = t3784 * t3851;
t4021 = t3784 * t3863;
t4020 = t3784 * t3868;
t3785 = -t3822 * t3864 + t3834 * t3869;
t4019 = t3785 * t3852;
t4018 = t3785 * t3863;
t4017 = t3785 * t3868;
t3786 = -t3823 * t3864 + t3835 * t3869;
t4016 = t3786 * t3853;
t4015 = t3786 * t3863;
t4014 = t3786 * t3868;
t3787 = -t3824 * t3864 + t3836 * t3869;
t4013 = t3787 * t3854;
t4012 = t3787 * t3863;
t4011 = t3787 * t3868;
t3998 = t3801 * t3870;
t3997 = t3802 * t3870;
t3996 = t3803 * t3870;
t3995 = t3807 * t3870;
t3994 = t3808 * t3870;
t3993 = t3809 * t3870;
t3980 = t3856 * t3857;
t3776 = t3819 * t3869 + t3831 * t3864;
t3777 = t3820 * t3869 + t3832 * t3864;
t3778 = t3821 * t3869 + t3833 * t3864;
t3779 = t3822 * t3869 + t3834 * t3864;
t3780 = t3823 * t3869 + t3835 * t3864;
t3781 = t3824 * t3869 + t3836 * t3864;
t3946 = t3855 * t3908 + t3858 * t3907;
t3862 = m(1) + t3902;
t3861 = 0.1e1 / t3867;
t3753 = t3856 * t3914 - t3859 * t4085;
t3752 = t3856 * t3913 - t3859 * t4086;
t3751 = t3856 * t3912 - t3859 * t4087;
t3750 = t3856 * t3911 - t3859 * t4088;
t3749 = t3856 * t3910 - t3859 * t4089;
t3748 = t3856 * t3909 - t3859 * t4090;
t3730 = t3781 * t3848 * t3871 + t3854 * t3867;
t3729 = t3780 * t3847 * t3871 + t3853 * t3867;
t3728 = t3779 * t3846 * t3871 + t3852 * t3867;
t3727 = t3778 * t3845 * t3871 + t3851 * t3867;
t3726 = t3777 * t3844 * t3871 + t3850 * t3867;
t3725 = t3776 * t3843 * t3871 + t3849 * t3867;
t3712 = t3772 * t3836 + t3775 * t3824;
t3711 = t3772 * t3835 + t3775 * t3823;
t3710 = t3772 * t3834 + t3775 * t3822;
t3709 = t3772 * t3833 + t3775 * t3821;
t3708 = t3772 * t3832 + t3775 * t3820;
t3707 = t3772 * t3831 + t3775 * t3819;
t3706 = -t3781 * t3842 - t3787 * t3987;
t3705 = -t3780 * t3841 - t3786 * t3988;
t3704 = -t3779 * t3840 - t3785 * t3989;
t3703 = -t3778 * t3839 - t3784 * t3990;
t3702 = -t3777 * t3838 - t3783 * t3991;
t3701 = -t3776 * t3837 - t3782 * t3992;
t3700 = -t3781 * t3830 + t3787 * t3981;
t3699 = -t3780 * t3829 + t3786 * t3982;
t3698 = -t3779 * t3828 + t3785 * t3983;
t3697 = -t3778 * t3827 + t3784 * t3984;
t3696 = -t3777 * t3826 + t3783 * t3985;
t3695 = -t3776 * t3825 + t3782 * t3986;
t3646 = t3712 * t3842 + t3718 * t3987;
t3645 = t3711 * t3841 + t3717 * t3988;
t3644 = t3710 * t3840 + t3716 * t3989;
t3643 = t3709 * t3839 + t3715 * t3990;
t3642 = t3708 * t3838 + t3714 * t3991;
t3641 = t3707 * t3837 + t3713 * t3992;
t3640 = -t3712 * t3830 + t3718 * t3981;
t3639 = -t3711 * t3829 + t3717 * t3982;
t3638 = -t3710 * t3828 + t3716 * t3983;
t3637 = -t3709 * t3827 + t3715 * t3984;
t3636 = -t3708 * t3826 + t3714 * t3985;
t3635 = -t3707 * t3825 + t3713 * t3986;
t3634 = (t3781 * t3868 + t3787 * t3968) * t3993 + (-t3781 * t3863 + t3787 * t3962) * t3812;
t3633 = (t3780 * t3868 + t3786 * t3968) * t3994 + (-t3780 * t3863 + t3786 * t3962) * t3811;
t3632 = (t3779 * t3868 + t3785 * t3968) * t3995 + (-t3779 * t3863 + t3785 * t3962) * t3810;
t3631 = (t3778 * t3868 + t3784 * t3968) * t3996 + (-t3778 * t3863 + t3784 * t3962) * t3806;
t3630 = (t3777 * t3868 + t3783 * t3968) * t3997 + (-t3777 * t3863 + t3783 * t3962) * t3805;
t3629 = (t3776 * t3868 + t3782 * t3968) * t3998 + (-t3776 * t3863 + t3782 * t3962) * t3804;
t3622 = -t3652 * t3830 + t3658 * t3981;
t3621 = -t3651 * t3829 + t3657 * t3982;
t3620 = -t3650 * t3828 + t3656 * t3983;
t3619 = -t3649 * t3827 + t3655 * t3984;
t3618 = -t3648 * t3826 + t3654 * t3985;
t3617 = -t3647 * t3825 + t3653 * t3986;
t3616 = (t3730 * t3863 - t3848 * t4011) * t3993 + t3812 * (t3730 * t3868 + t3848 * t4012);
t3615 = (t3729 * t3863 - t3847 * t4014) * t3994 + t3811 * (t3729 * t3868 + t3847 * t4015);
t3614 = (t3728 * t3863 - t3846 * t4017) * t3995 + t3810 * (t3728 * t3868 + t3846 * t4018);
t3613 = (t3727 * t3863 - t3845 * t4020) * t3996 + t3806 * (t3727 * t3868 + t3845 * t4021);
t3612 = (t3726 * t3863 - t3844 * t4023) * t3997 + t3805 * (t3726 * t3868 + t3844 * t4024);
t3611 = (t3725 * t3863 - t3843 * t4026) * t3998 + t3804 * (t3725 * t3868 + t3843 * t4027);
t3610 = (-(t3781 * t3968 - t4011) * t3993 - t3812 * (t3781 * t3962 + t4012)) * t3854 + t3848 * t3742 * t3867;
t3609 = (-(t3780 * t3968 - t4014) * t3994 - t3811 * (t3780 * t3962 + t4015)) * t3853 + t3847 * t3741 * t3867;
t3608 = (-(t3779 * t3968 - t4017) * t3995 - t3810 * (t3779 * t3962 + t4018)) * t3852 + t3846 * t3740 * t3867;
t3601 = (-(t3778 * t3968 - t4020) * t3996 - t3806 * (t3778 * t3962 + t4021)) * t3851 + t3845 * t3736 * t3867;
t3600 = (-(t3777 * t3968 - t4023) * t3997 - t3805 * (t3777 * t3962 + t4024)) * t3850 + t3844 * t3735 * t3867;
t3599 = (-(t3776 * t3968 - t4026) * t3998 - t3804 * (t3776 * t3962 + t4027)) * t3849 + t3843 * t3734 * t3867;
t3586 = -t3616 * t3830 + t3634 * t3842;
t3585 = t3616 * t3842 + t3634 * t3830;
t3584 = -t3615 * t3829 + t3633 * t3841;
t3583 = t3615 * t3841 + t3633 * t3829;
t3582 = -t3614 * t3828 + t3632 * t3840;
t3581 = t3614 * t3840 + t3632 * t3828;
t3580 = -t3613 * t3827 + t3631 * t3839;
t3579 = t3613 * t3839 + t3631 * t3827;
t3578 = -t3612 * t3826 + t3630 * t3838;
t3577 = t3612 * t3838 + t3630 * t3826;
t3576 = -t3611 * t3825 + t3629 * t3837;
t3575 = t3611 * t3837 + t3629 * t3825;
t3574 = -(t3646 * t3901 + t3898 * t4096) * t4071 + pkin(3) * (t3898 * t3646 - t3901 * t4096);
t3573 = -(t3645 * t3900 + t3897 * t4095) * t4071 + pkin(3) * (t3897 * t3645 - t3900 * t4095);
t3572 = -(t3644 * t3899 + t3896 * t4094) * t4071 + pkin(3) * (t3896 * t3644 - t3899 * t4094);
t3571 = (t3622 * t3898 + t3640 * t3901) * t4071 - (-t3622 * t3901 + t3640 * t3898) * pkin(3);
t3570 = (t3621 * t3897 + t3639 * t3900) * t4071 - (-t3621 * t3900 + t3639 * t3897) * pkin(3);
t3569 = (t3620 * t3896 + t3638 * t3899) * t4071 - (-t3620 * t3899 + t3638 * t3896) * pkin(3);
t3568 = -(t3643 * t3889 + t3886 * t4093) * t4071 + pkin(3) * (t3886 * t3643 - t3889 * t4093);
t3567 = -(t3642 * t3888 + t3885 * t4092) * t4071 + pkin(3) * (t3885 * t3642 - t3888 * t4092);
t3566 = -(t3641 * t3887 + t3884 * t4091) * t4071 + pkin(3) * (t3884 * t3641 - t3887 * t4091);
t3565 = (t3619 * t3886 + t3637 * t3889) * t4071 - (-t3619 * t3889 + t3637 * t3886) * pkin(3);
t3564 = (t3618 * t3885 + t3636 * t3888) * t4071 - (-t3618 * t3888 + t3636 * t3885) * pkin(3);
t3563 = (t3617 * t3884 + t3635 * t3887) * t4071 - (-t3617 * t3887 + t3635 * t3884) * pkin(3);
t1 = [-t4028 * t4064 - t4025 * t4063 - t4022 * t4062 - t4019 * t4061 - t4016 * t4060 - t4013 * t4059 - g(1) * m(4) + ((t4047 * t4053 + t4048 * t4054 + t4049 * t4055 + t4050 * t4056 + t4051 * t4057 + t4052 * t4058) * t3902 + (-t3599 * t4040 - t3600 * t4039 - t3601 * t4038 - t3608 * t4037 - t3609 * t4036 - t3610 * t4035) * t3862) * t3861; t3701 * t4064 + t3702 * t4063 + t3703 * t4062 + t3704 * t4061 + t3705 * t4060 + t3706 * t4059 - g(2) * m(4) + ((t3566 * t4052 + t3567 * t4051 + t3568 * t4050 + t3572 * t4049 + t3573 * t4048 + t3574 * t4047) * t3902 + (-t3576 * t4040 - t3578 * t4039 - t3580 * t4038 - t3582 * t4037 - t3584 * t4036 - t3586 * t4035) * t3862) * t3861; t3695 * t4064 + t3696 * t4063 + t3697 * t4062 + t3698 * t4061 + t3699 * t4060 + t3700 * t4059 - g(3) * m(4) + ((t3563 * t4052 + t3564 * t4051 + t3565 * t4050 + t3569 * t4049 + t3570 * t4048 + t3571 * t4047) * t3902 + (-t3575 * t4040 - t3577 * t4039 - t3579 * t4038 - t3581 * t4037 - t3583 * t4036 - t3585 * t4035) * t3862) * t3861; (-t3691 * t3700 - t3692 * t3706) * t4059 + (-t3687 * t3699 - t3688 * t3705) * t4060 + (-t3683 * t3698 - t3684 * t3704) * t4061 + (-t3679 * t3697 - t3680 * t3703) * t4062 + (-t3675 * t3696 - t3676 * t3702) * t4063 + (-t3671 * t3695 - t3672 * t3701) * t4064 - (-g(2) * t4084 + t3946 * g(3)) * t3860 + (t3946 * g(2) + g(3) * t4084) * t3857 + ((-(-t3585 * t3691 - t3586 * t3692) * t4035 - (-t3583 * t3687 - t3584 * t3688) * t4036 - (-t3581 * t3683 - t3582 * t3684) * t4037 - (-t3579 * t3679 - t3580 * t3680) * t4038 - (-t3577 * t3675 - t3578 * t3676) * t4039 - (-t3575 * t3671 - t3576 * t3672) * t4040) * t3862 + ((-t3571 * t3691 - t3574 * t3692) * t4047 + (-t3570 * t3687 - t3573 * t3688) * t4048 + (-t3569 * t3683 - t3572 * t3684) * t4049 + (-t3565 * t3679 - t3568 * t3680) * t4050 + (-t3564 * t3675 - t3567 * t3676) * t4051 + (-t3563 * t3671 - t3566 * t3672) * t4052) * t3902) * t3861; (-t3692 * t4013 - t3700 * t3753) * t4059 + (-t3688 * t4016 - t3699 * t3752) * t4060 + (-t3684 * t4019 - t3698 * t3751) * t4061 + (-t3680 * t4022 - t3697 * t3750) * t4062 + (-t3676 * t4025 - t3696 * t3749) * t4063 + (-t3672 * t4028 - t3695 * t3748) * t4064 - t4103 * g(3) + (-t3946 * t3857 - t3860 * t4084) * g(1) + (((-t3571 * t3753 + t3692 * t4053) * t4047 + (-t3570 * t3752 + t3688 * t4054) * t4048 + (-t3569 * t3751 + t3684 * t4055) * t4049 + (-t3565 * t3750 + t3680 * t4056) * t4050 + (-t3564 * t3749 + t3676 * t4057) * t4051 + (-t3563 * t3748 + t3672 * t4058) * t4052) * t3902 + (-(-t3585 * t3753 + t3610 * t3692) * t4035 - (-t3583 * t3752 + t3609 * t3688) * t4036 - (-t3581 * t3751 + t3608 * t3684) * t4037 - (-t3579 * t3750 + t3601 * t3680) * t4038 - (-t3577 * t3749 + t3600 * t3676) * t4039 - (-t3575 * t3748 + t3599 * t3672) * t4040) * t3862) * t3861; (-t3691 * t4013 + t3706 * t3753) * t4059 + (-t3687 * t4016 + t3705 * t3752) * t4060 + (-t3683 * t4019 + t3704 * t3751) * t4061 + (-t3679 * t4022 + t3703 * t3750) * t4062 + (-t3675 * t4025 + t3702 * t3749) * t4063 + (-t3671 * t4028 + t3701 * t3748) * t4064 + t4103 * g(2) + (-t3857 * t3972 + (t3860 * t3907 + t3908 * t3980) * t3858 + (t3860 * t3908 - t3907 * t3980) * t3855) * g(1) + (((t3574 * t3753 + t3691 * t4053) * t4047 + (t3573 * t3752 + t3687 * t4054) * t4048 + (t3572 * t3751 + t3683 * t4055) * t4049 + (t3568 * t3750 + t3679 * t4056) * t4050 + (t3567 * t3749 + t3675 * t4057) * t4051 + (t3566 * t3748 + t3671 * t4058) * t4052) * t3902 + (-(t3586 * t3753 + t3610 * t3691) * t4035 - (t3584 * t3752 + t3609 * t3687) * t4036 - (t3582 * t3751 + t3608 * t3683) * t4037 - (t3580 * t3750 + t3601 * t3679) * t4038 - (t3578 * t3749 + t3600 * t3675) * t4039 - (t3576 * t3748 + t3599 * t3671) * t4040) * t3862) * t3861;];
taugX  = t1;
