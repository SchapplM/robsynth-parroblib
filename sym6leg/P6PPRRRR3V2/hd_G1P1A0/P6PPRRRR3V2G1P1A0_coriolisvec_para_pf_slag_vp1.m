% Calculate vector of centrifugal and coriolis load on the joints for
% P6PPRRRR3V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d3,d4,theta1,theta2]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [6x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 22:25
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 21:43:46
% EndTime: 2019-05-16 21:45:29
% DurationCPUTime: 111.13s
% Computational Cost: add. (177465->1824), mult. (447741->3189), div. (11106->13), fcn. (517560->64), ass. (0->1144)
t3157 = xP(4);
t3099 = sin(t3157);
t3102 = cos(t3157);
t3377 = t3099 * t3102;
t3691 = 0.2e1 * t3377;
t3159 = rSges(4,2);
t3160 = rSges(4,1);
t3569 = m(4) * t3160;
t3212 = (t3159 * t3569 - Icges(4,4));
t3674 = 2 * t3212;
t3156 = xP(5);
t3098 = sin(t3156);
t3101 = cos(t3156);
t3586 = koppelP(6,3);
t3155 = xP(6);
t3097 = sin(t3155);
t3100 = cos(t3155);
t3592 = koppelP(6,2);
t3598 = koppelP(6,1);
t3619 = -t3097 * t3592 + t3100 * t3598;
t2930 = t3098 * t3586 + t3101 * t3619;
t3149 = xDP(5);
t3367 = t3102 * t3149;
t3150 = xDP(4);
t2995 = t3097 * t3598 + t3100 * t3592;
t3610 = -t3098 * t3619 + t3101 * t3586;
t3647 = t2995 * t3102 - t3099 * t3610;
t3505 = t3647 * t3150;
t3690 = t2930 * t3367 - t3505;
t3376 = t3099 * t3149;
t3384 = t3099 * t2995;
t2821 = t3102 * t3610 + t3384;
t3499 = t2821 * t3150;
t3689 = -t2930 * t3376 + t3499;
t3587 = koppelP(5,3);
t3593 = koppelP(5,2);
t3599 = koppelP(5,1);
t3618 = -t3097 * t3593 + t3100 * t3599;
t2931 = t3098 * t3587 + t3101 * t3618;
t2996 = t3097 * t3599 + t3100 * t3593;
t3609 = -t3098 * t3618 + t3101 * t3587;
t3648 = t2996 * t3102 - t3099 * t3609;
t3504 = t3648 * t3150;
t3688 = t2931 * t3367 - t3504;
t3383 = t3099 * t2996;
t2824 = t3102 * t3609 + t3383;
t3498 = t2824 * t3150;
t3687 = -t2931 * t3376 + t3498;
t3588 = koppelP(4,3);
t3594 = koppelP(4,2);
t3600 = koppelP(4,1);
t3617 = -t3097 * t3594 + t3100 * t3600;
t2932 = t3098 * t3588 + t3101 * t3617;
t2997 = t3097 * t3600 + t3100 * t3594;
t3608 = -t3098 * t3617 + t3101 * t3588;
t3649 = t2997 * t3102 - t3099 * t3608;
t3503 = t3649 * t3150;
t3686 = t2932 * t3367 - t3503;
t3382 = t3099 * t2997;
t2827 = t3102 * t3608 + t3382;
t3497 = t2827 * t3150;
t3685 = -t2932 * t3376 + t3497;
t3589 = koppelP(3,3);
t3595 = koppelP(3,2);
t3601 = koppelP(3,1);
t3616 = -t3097 * t3595 + t3100 * t3601;
t2933 = t3098 * t3589 + t3101 * t3616;
t2998 = t3097 * t3601 + t3100 * t3595;
t3607 = -t3098 * t3616 + t3101 * t3589;
t3650 = t2998 * t3102 - t3099 * t3607;
t3502 = t3650 * t3150;
t3684 = t2933 * t3367 - t3502;
t3381 = t3099 * t2998;
t2830 = t3102 * t3607 + t3381;
t3496 = t2830 * t3150;
t3683 = -t2933 * t3376 + t3496;
t3590 = koppelP(2,3);
t3596 = koppelP(2,2);
t3602 = koppelP(2,1);
t3615 = -t3097 * t3596 + t3100 * t3602;
t2934 = t3098 * t3590 + t3101 * t3615;
t2999 = t3097 * t3602 + t3100 * t3596;
t3606 = -t3098 * t3615 + t3101 * t3590;
t3651 = t2999 * t3102 - t3099 * t3606;
t3501 = t3651 * t3150;
t3682 = t2934 * t3367 - t3501;
t3380 = t3099 * t2999;
t2833 = t3102 * t3606 + t3380;
t3495 = t2833 * t3150;
t3681 = -t2934 * t3376 + t3495;
t3591 = koppelP(1,3);
t3597 = koppelP(1,2);
t3603 = koppelP(1,1);
t3614 = -t3097 * t3597 + t3100 * t3603;
t2935 = t3098 * t3591 + t3101 * t3614;
t3000 = t3097 * t3603 + t3100 * t3597;
t3605 = -t3098 * t3614 + t3101 * t3591;
t3652 = t3000 * t3102 - t3099 * t3605;
t3500 = t3652 * t3150;
t3680 = t2935 * t3367 - t3500;
t3379 = t3099 * t3000;
t2836 = t3102 * t3605 + t3379;
t3494 = t2836 * t3150;
t3679 = -t2935 * t3376 + t3494;
t3158 = rSges(4,3);
t3049 = t3158 * t3569 - Icges(4,5);
t3411 = t3049 * t3101;
t2985 = t3097 * t3411;
t3058 = t3100 ^ 2;
t3583 = 0.2e1 * t3058;
t3319 = t3212 * t3583;
t3390 = t3098 * t3212;
t3048 = m(4) * t3158 * t3159 - Icges(4,6);
t3414 = t3048 * t3101;
t3116 = t3159 ^ 2;
t3117 = t3160 ^ 2;
t3612 = (-t3116 + t3117) * m(4) + Icges(4,2) - Icges(4,1);
t3424 = t3612 * t3097;
t3660 = t3100 * (-t3098 * t3424 + t3414);
t2771 = -t3098 * t3319 + t2985 + t3390 + t3660;
t3060 = t3102 ^ 2;
t3059 = t3101 ^ 2;
t3320 = 0.2e1 * t3411;
t3224 = t3098 * t3320;
t3410 = t3212 * t3097;
t3425 = t3612 * t3058;
t3582 = 0.2e1 * t3059;
t3579 = t3582 - 0.4e1;
t3416 = t3048 * t3097;
t3115 = t3158 ^ 2;
t3630 = (-t3115 + t3116) * m(4) + Icges(4,3) - Icges(4,2);
t3388 = t3098 * t3101;
t3677 = -0.2e1 * t3388;
t3631 = t3630 * t3059 + t3416 * t3677;
t3675 = (-t3410 * t3579 + t3224) * t3100 + (t3059 - 0.2e1) * t3425 + t3612 + t3631;
t3678 = t2771 * t3691 - t3060 * t3675;
t3394 = t3097 * t3100;
t3174 = t3394 * t3674 - t3425;
t3053 = t3098 * t3150;
t3148 = xDP(6);
t3629 = t3053 + t3148;
t3645 = t3097 * t3629;
t3183 = t3612 * t3645;
t3352 = t3149 * t3049;
t3393 = t3097 * t3148;
t2926 = -t3393 * t3612 + 0.2e1 * t3352;
t3223 = t2926 * t3059 - t3352;
t3676 = 0.2e1 * t3183 + t3223;
t3391 = t3097 * t3160;
t2993 = t3100 * t3159 + t3391;
t3374 = t3100 * t3160;
t2992 = t3097 * t3159 - t3374;
t3370 = t3101 * t3158;
t3611 = t2992 * t3098 + t3370;
t2786 = -t2993 * t3102 + t3099 * t3611;
t3354 = t3148 * t3212;
t3673 = -0.2e1 * t3354;
t3372 = t3101 * t3148;
t2809 = t2995 * t3372 - t3149 * t3610;
t3672 = t2809 * t3099;
t3671 = t2809 * t3102;
t2810 = t2996 * t3372 - t3149 * t3609;
t3670 = t2810 * t3099;
t3669 = t2810 * t3102;
t2811 = t2997 * t3372 - t3149 * t3608;
t3668 = t2811 * t3099;
t3667 = t2811 * t3102;
t2812 = t2998 * t3372 - t3149 * t3607;
t3666 = t2812 * t3099;
t3665 = t2812 * t3102;
t2813 = t2999 * t3372 - t3149 * t3606;
t3664 = t2813 * t3099;
t3663 = t2813 * t3102;
t2814 = t3000 * t3372 - t3149 * t3605;
t3662 = t2814 * t3099;
t3661 = t2814 * t3102;
t3392 = t3097 * t3149;
t2991 = t3048 * t3392;
t3584 = 0.2e1 * t2991;
t2937 = t3584 - t3354;
t3659 = -t2937 * t3059 + t2991;
t3105 = sin(pkin(10));
t3106 = sin(pkin(9));
t3111 = cos(pkin(9));
t3113 = cos(pkin(5));
t3110 = cos(pkin(10));
t3114 = cos(pkin(4));
t3358 = t3110 * t3114;
t3108 = sin(pkin(5));
t3109 = sin(pkin(4));
t3361 = t3108 * t3109;
t2915 = (t3105 * t3111 + t3106 * t3358) * t3113 - t3106 * t3361;
t3357 = t3111 * t3114;
t2916 = (t3105 * t3106 - t3110 * t3357) * t3113 + t3111 * t3361;
t3118 = legFrame(6,3);
t3061 = sin(t3118);
t3073 = cos(t3118);
t3658 = t2915 * t3061 + t2916 * t3073;
t3119 = legFrame(5,3);
t3062 = sin(t3119);
t3074 = cos(t3119);
t3657 = t2915 * t3062 + t2916 * t3074;
t3120 = legFrame(4,3);
t3063 = sin(t3120);
t3075 = cos(t3120);
t3656 = t2915 * t3063 + t2916 * t3075;
t3121 = legFrame(3,3);
t3064 = sin(t3121);
t3076 = cos(t3121);
t3655 = t2915 * t3064 + t2916 * t3076;
t3122 = legFrame(2,3);
t3065 = sin(t3122);
t3077 = cos(t3122);
t3654 = t2915 * t3065 + t2916 * t3077;
t3123 = legFrame(1,3);
t3066 = sin(t3123);
t3078 = cos(t3123);
t3653 = t2915 * t3066 + t2916 * t3078;
t2994 = t3630 * t3149;
t3235 = t3049 * t3393;
t2925 = t2994 + t3235;
t3228 = t3212 * t3392;
t3413 = t3048 * t3148;
t2939 = -0.2e1 * t3228 + t3413;
t2772 = -t2939 * t3100 - t3149 * t3425 - t2925;
t3646 = t2772 * t3102;
t3130 = sin(qJ(3,6));
t3133 = cos(qJ(3,6));
t3570 = pkin(8) * sin(pkin(6));
t3003 = pkin(3) * t3133 + t3130 * t3570;
t3006 = pkin(3) * t3130 - t3133 * t3570;
t3363 = t3105 * t3113;
t2896 = -t3003 * t3110 + t3006 * t3363;
t3356 = t3113 * t3114;
t2968 = -t3110 * t3361 + t3356;
t3154 = m(2) + m(3);
t3104 = m(1) + t3154;
t3355 = t3114 * t3154;
t3112 = cos(pkin(6));
t3162 = pkin(8) ^ 2;
t3041 = -t3112 ^ 2 * t3162 + pkin(3) ^ 2 + t3162;
t3103 = 0.1e1 / t3109;
t3417 = t3041 * t3103;
t3170 = (-t2968 * t3355 + t3104 * t3113) * t3417;
t2972 = t3061 * t3111 + t3073 * t3106;
t2978 = -t3061 * t3106 + t3073 * t3111;
t3124 = legFrame(6,1);
t3067 = sin(t3124);
t3079 = cos(t3124);
t3136 = legFrame(6,2);
t3085 = sin(t3136);
t3400 = t3079 * t3085;
t2839 = -t2972 * t3067 + t2978 * t3400;
t3406 = t3067 * t3085;
t2845 = -t2972 * t3079 - t2978 * t3406;
t2893 = t3003 * t3363 + t3006 * t3110;
t2890 = 0.1e1 / t2893;
t2959 = t3102 * t3372 + t3376;
t2960 = -t3099 * t3372 + t3367;
t3386 = t3098 * t3148;
t3020 = t3150 + t3386;
t3151 = xDP(3);
t3152 = xDP(2);
t3153 = xDP(1);
t3091 = cos(t3136);
t3456 = t2978 * t3091;
t2598 = (-(t2821 * t2960 - t2959 * t3647 + t3153) * t3456 + t2845 * (-t2821 * t3020 + t2930 * t2959 + t3152) + t2839 * (-t2930 * t2960 + t3020 * t3647 + t3151)) * t2890;
t3250 = t2890 * t3456;
t3373 = t3101 * t3102;
t3378 = t3099 * t3101;
t3487 = t2845 * t2890;
t3493 = t2839 * t2890;
t3305 = (-(t3153 + (t2821 * t3102 - t3099 * t3647) * t3149 + (-t2821 * t3099 - t3102 * t3647) * t3372) * t3250 + (t3152 + (-t2821 * t3098 + t2930 * t3373) * t3148 - t3689) * t3487 + (t3151 + (t2930 * t3378 + t3098 * t3647) * t3148 - t3690) * t3493) * t2598 * t2890;
t3359 = t3110 * t3113;
t3001 = rSges(3,1) * t3105 + rSges(3,2) * t3359;
t3002 = rSges(3,1) * t3359 - rSges(3,2) * t3105;
t3028 = rSges(3,1) * t3133 - rSges(3,2) * t3130;
t3360 = t3108 * t3114;
t2791 = (-t3001 * t3130 + t3002 * t3133) * t3109 + t3028 * t3360;
t3578 = m(3) * t2791;
t2375 = (t2896 * t3578 + t3170) * t3305;
t2595 = t2598 ^ 2;
t3027 = rSges(3,1) * t3130 + rSges(3,2) * t3133;
t3560 = t2595 * ((t3001 * t3133 + t3002 * t3130) * t3109 + t3027 * t3360);
t3644 = -m(3) * t3560 + t2375;
t3131 = sin(qJ(3,5));
t3134 = cos(qJ(3,5));
t3004 = pkin(3) * t3134 + t3131 * t3570;
t3007 = pkin(3) * t3131 - t3134 * t3570;
t2897 = -t3004 * t3110 + t3007 * t3363;
t2973 = t3062 * t3111 + t3074 * t3106;
t2979 = -t3062 * t3106 + t3074 * t3111;
t3125 = legFrame(5,1);
t3068 = sin(t3125);
t3080 = cos(t3125);
t3137 = legFrame(5,2);
t3086 = sin(t3137);
t3399 = t3080 * t3086;
t2840 = -t2973 * t3068 + t2979 * t3399;
t3405 = t3068 * t3086;
t2846 = -t2973 * t3080 - t2979 * t3405;
t2894 = t3004 * t3363 + t3007 * t3110;
t2891 = 0.1e1 / t2894;
t3092 = cos(t3137);
t3453 = t2979 * t3092;
t2599 = (-(t2824 * t2960 - t2959 * t3648 + t3153) * t3453 + t2846 * (-t2824 * t3020 + t2931 * t2959 + t3152) + t2840 * (-t2931 * t2960 + t3020 * t3648 + t3151)) * t2891;
t3249 = t2891 * t3453;
t3486 = t2846 * t2891;
t3492 = t2840 * t2891;
t3304 = (-(t3153 + (t2824 * t3102 - t3099 * t3648) * t3149 + (-t2824 * t3099 - t3102 * t3648) * t3372) * t3249 + (t3152 + (-t2824 * t3098 + t2931 * t3373) * t3148 - t3687) * t3486 + (t3151 + (t2931 * t3378 + t3098 * t3648) * t3148 - t3688) * t3492) * t2599 * t2891;
t3030 = rSges(3,1) * t3134 - rSges(3,2) * t3131;
t2792 = (-t3001 * t3131 + t3002 * t3134) * t3109 + t3030 * t3360;
t3577 = m(3) * t2792;
t2376 = (t2897 * t3577 + t3170) * t3304;
t2596 = t2599 ^ 2;
t3029 = rSges(3,1) * t3131 + rSges(3,2) * t3134;
t3558 = t2596 * ((t3001 * t3134 + t3002 * t3131) * t3109 + t3029 * t3360);
t3643 = -m(3) * t3558 + t2376;
t3132 = sin(qJ(3,4));
t3135 = cos(qJ(3,4));
t3005 = pkin(3) * t3135 + t3132 * t3570;
t3008 = pkin(3) * t3132 - t3135 * t3570;
t2898 = -t3005 * t3110 + t3008 * t3363;
t2974 = t3063 * t3111 + t3075 * t3106;
t2980 = -t3063 * t3106 + t3075 * t3111;
t3126 = legFrame(4,1);
t3069 = sin(t3126);
t3081 = cos(t3126);
t3138 = legFrame(4,2);
t3087 = sin(t3138);
t3398 = t3081 * t3087;
t2841 = -t2974 * t3069 + t2980 * t3398;
t3404 = t3069 * t3087;
t2847 = -t2974 * t3081 - t2980 * t3404;
t2895 = t3005 * t3363 + t3008 * t3110;
t2892 = 0.1e1 / t2895;
t3093 = cos(t3138);
t3450 = t2980 * t3093;
t2600 = (-(t2827 * t2960 - t2959 * t3649 + t3153) * t3450 + t2847 * (-t2827 * t3020 + t2932 * t2959 + t3152) + t2841 * (-t2932 * t2960 + t3020 * t3649 + t3151)) * t2892;
t3248 = t2892 * t3450;
t3485 = t2847 * t2892;
t3491 = t2841 * t2892;
t3303 = (-(t3153 + (t2827 * t3102 - t3099 * t3649) * t3149 + (-t2827 * t3099 - t3102 * t3649) * t3372) * t3248 + (t3152 + (-t2827 * t3098 + t2932 * t3373) * t3148 - t3685) * t3485 + (t3151 + (t2932 * t3378 + t3098 * t3649) * t3148 - t3686) * t3491) * t2600 * t2892;
t3032 = rSges(3,1) * t3135 - rSges(3,2) * t3132;
t2793 = (-t3001 * t3132 + t3002 * t3135) * t3109 + t3032 * t3360;
t3576 = m(3) * t2793;
t2377 = (t2898 * t3576 + t3170) * t3303;
t2597 = t2600 ^ 2;
t3031 = rSges(3,1) * t3132 + rSges(3,2) * t3135;
t3556 = t2597 * ((t3001 * t3135 + t3002 * t3132) * t3109 + t3031 * t3360);
t3642 = -m(3) * t3556 + t2377;
t3142 = sin(qJ(3,3));
t3145 = cos(qJ(3,3));
t3009 = pkin(3) * t3145 + t3142 * t3570;
t3012 = pkin(3) * t3142 - t3145 * t3570;
t2905 = -t3009 * t3110 + t3012 * t3363;
t2975 = t3064 * t3111 + t3076 * t3106;
t2981 = -t3064 * t3106 + t3076 * t3111;
t3127 = legFrame(3,1);
t3070 = sin(t3127);
t3082 = cos(t3127);
t3139 = legFrame(3,2);
t3088 = sin(t3139);
t3397 = t3082 * t3088;
t2842 = -t2975 * t3070 + t2981 * t3397;
t3403 = t3070 * t3088;
t2848 = -t2975 * t3082 - t2981 * t3403;
t2902 = t3009 * t3363 + t3012 * t3110;
t2899 = 0.1e1 / t2902;
t3094 = cos(t3139);
t3447 = t2981 * t3094;
t2607 = (-(t2830 * t2960 - t2959 * t3650 + t3153) * t3447 + t2848 * (-t2830 * t3020 + t2933 * t2959 + t3152) + t2842 * (-t2933 * t2960 + t3020 * t3650 + t3151)) * t2899;
t3247 = t2899 * t3447;
t3484 = t2848 * t2899;
t3490 = t2842 * t2899;
t3302 = (-(t3153 + (t2830 * t3102 - t3099 * t3650) * t3149 + (-t2830 * t3099 - t3102 * t3650) * t3372) * t3247 + (t3152 + (-t2830 * t3098 + t2933 * t3373) * t3148 - t3683) * t3484 + (t3151 + (t2933 * t3378 + t3098 * t3650) * t3148 - t3684) * t3490) * t2607 * t2899;
t3036 = rSges(3,1) * t3145 - rSges(3,2) * t3142;
t2797 = (-t3001 * t3142 + t3002 * t3145) * t3109 + t3036 * t3360;
t3575 = m(3) * t2797;
t2381 = (t2905 * t3575 + t3170) * t3302;
t2601 = t2607 ^ 2;
t3035 = rSges(3,1) * t3142 + rSges(3,2) * t3145;
t3554 = t2601 * ((t3001 * t3145 + t3002 * t3142) * t3109 + t3035 * t3360);
t3641 = -m(3) * t3554 + t2381;
t3143 = sin(qJ(3,2));
t3146 = cos(qJ(3,2));
t3010 = pkin(3) * t3146 + t3143 * t3570;
t3013 = pkin(3) * t3143 - t3146 * t3570;
t2906 = -t3010 * t3110 + t3013 * t3363;
t2976 = t3065 * t3111 + t3077 * t3106;
t2982 = -t3065 * t3106 + t3077 * t3111;
t3128 = legFrame(2,1);
t3071 = sin(t3128);
t3083 = cos(t3128);
t3140 = legFrame(2,2);
t3089 = sin(t3140);
t3396 = t3083 * t3089;
t2843 = -t2976 * t3071 + t2982 * t3396;
t3402 = t3071 * t3089;
t2849 = -t2976 * t3083 - t2982 * t3402;
t2903 = t3010 * t3363 + t3013 * t3110;
t2900 = 0.1e1 / t2903;
t3095 = cos(t3140);
t3444 = t2982 * t3095;
t2608 = (-(t2833 * t2960 - t2959 * t3651 + t3153) * t3444 + t2849 * (-t2833 * t3020 + t2934 * t2959 + t3152) + t2843 * (-t2934 * t2960 + t3020 * t3651 + t3151)) * t2900;
t3246 = t2900 * t3444;
t3483 = t2849 * t2900;
t3489 = t2843 * t2900;
t3301 = (-(t3153 + (t2833 * t3102 - t3099 * t3651) * t3149 + (-t2833 * t3099 - t3102 * t3651) * t3372) * t3246 + (t3152 + (-t2833 * t3098 + t2934 * t3373) * t3148 - t3681) * t3483 + (t3151 + (t2934 * t3378 + t3098 * t3651) * t3148 - t3682) * t3489) * t2608 * t2900;
t3038 = rSges(3,1) * t3146 - rSges(3,2) * t3143;
t2798 = (-t3001 * t3143 + t3002 * t3146) * t3109 + t3038 * t3360;
t3574 = m(3) * t2798;
t2382 = (t2906 * t3574 + t3170) * t3301;
t2602 = t2608 ^ 2;
t3037 = rSges(3,1) * t3143 + rSges(3,2) * t3146;
t3552 = t2602 * ((t3001 * t3146 + t3002 * t3143) * t3109 + t3037 * t3360);
t3640 = -m(3) * t3552 + t2382;
t3144 = sin(qJ(3,1));
t3147 = cos(qJ(3,1));
t3011 = pkin(3) * t3147 + t3144 * t3570;
t3014 = pkin(3) * t3144 - t3147 * t3570;
t2907 = -t3011 * t3110 + t3014 * t3363;
t2977 = t3066 * t3111 + t3078 * t3106;
t2983 = -t3066 * t3106 + t3078 * t3111;
t3129 = legFrame(1,1);
t3072 = sin(t3129);
t3084 = cos(t3129);
t3141 = legFrame(1,2);
t3090 = sin(t3141);
t3395 = t3084 * t3090;
t2844 = -t2977 * t3072 + t2983 * t3395;
t3401 = t3072 * t3090;
t2850 = -t2977 * t3084 - t2983 * t3401;
t2904 = t3011 * t3363 + t3014 * t3110;
t2901 = 0.1e1 / t2904;
t3096 = cos(t3141);
t3441 = t2983 * t3096;
t2609 = (-(t2836 * t2960 - t2959 * t3652 + t3153) * t3441 + t2850 * (-t2836 * t3020 + t2935 * t2959 + t3152) + t2844 * (-t2935 * t2960 + t3020 * t3652 + t3151)) * t2901;
t3245 = t2901 * t3441;
t3482 = t2850 * t2901;
t3488 = t2844 * t2901;
t3300 = (-(t3153 + (t2836 * t3102 - t3099 * t3652) * t3149 + (-t2836 * t3099 - t3102 * t3652) * t3372) * t3245 + (t3152 + (-t2836 * t3098 + t2935 * t3373) * t3148 - t3679) * t3482 + (t3151 + (t2935 * t3378 + t3098 * t3652) * t3148 - t3680) * t3488) * t2609 * t2901;
t3040 = rSges(3,1) * t3147 - rSges(3,2) * t3144;
t2799 = (-t3001 * t3144 + t3002 * t3147) * t3109 + t3040 * t3360;
t3573 = m(3) * t2799;
t2383 = (t2907 * t3573 + t3170) * t3300;
t2603 = t2609 ^ 2;
t3039 = rSges(3,1) * t3144 + rSges(3,2) * t3147;
t3550 = t2603 * ((t3001 * t3147 + t3002 * t3144) * t3109 + t3039 * t3360);
t3639 = -m(3) * t3550 + t2383;
t3364 = t3103 * t3154;
t3173 = (-t2968 + t3356) * t3041 * t3364;
t3423 = t3028 * t3108;
t3312 = m(3) * t3423;
t2384 = (t2896 * t3312 + t3173) * t3305;
t3559 = t2595 * t3027;
t3571 = m(3) * t3108;
t3638 = -t3559 * t3571 + t2384;
t3422 = t3030 * t3108;
t3311 = m(3) * t3422;
t2385 = (t2897 * t3311 + t3173) * t3304;
t3557 = t2596 * t3029;
t3637 = -t3557 * t3571 + t2385;
t3421 = t3032 * t3108;
t3310 = m(3) * t3421;
t2386 = (t2898 * t3310 + t3173) * t3303;
t3555 = t2597 * t3031;
t3636 = -t3555 * t3571 + t2386;
t3420 = t3036 * t3108;
t3309 = m(3) * t3420;
t2387 = (t2905 * t3309 + t3173) * t3302;
t3553 = t2601 * t3035;
t3635 = -t3553 * t3571 + t2387;
t3419 = t3038 * t3108;
t3308 = m(3) * t3419;
t2388 = (t2906 * t3308 + t3173) * t3301;
t3551 = t2602 * t3037;
t3634 = -t3551 * t3571 + t2388;
t3418 = t3040 * t3108;
t3307 = m(3) * t3418;
t2389 = (t2907 * t3307 + t3173) * t3300;
t3549 = t2603 * t3039;
t3633 = -t3549 * t3571 + t2389;
t3371 = t3101 * t3149;
t3243 = t3612 * t3371;
t3199 = t3098 * t3243;
t3348 = t3150 * t3212;
t3226 = t3098 * t3348;
t3353 = t3148 * t3059;
t3632 = (-t3199 - (-0.4e1 * t3629 + 0.2e1 * t3353) * t3212) * t3058 - 0.2e1 * t3226 + t3673 + t3659;
t3387 = t3098 * t3102;
t2732 = -(t3000 * t3387 + t3099 * t3614) * t3148 + t3680;
t2730 = -(t2999 * t3387 + t3099 * t3615) * t3148 + t3682;
t2728 = -(t2998 * t3387 + t3099 * t3616) * t3148 + t3684;
t2726 = -(t2997 * t3387 + t3099 * t3617) * t3148 + t3686;
t2724 = -(t2996 * t3387 + t3099 * t3618) * t3148 + t3688;
t2722 = -(t2995 * t3387 + t3099 * t3619) * t3148 + t3690;
t2908 = t2925 * t3098;
t3412 = t3049 * t3097;
t3225 = t3150 * t3412;
t3627 = 0.2e1 * t3225 + t2908;
t2970 = t3110 * t3356 - t3361;
t2914 = t2970 * t3106 + t3111 * t3363;
t2917 = t2970 * t3111 - t3106 * t3363;
t2778 = t2914 * t3078 + t2917 * t3066;
t2784 = -t2914 * t3066 + t2917 * t3078;
t3625 = t2778 * t3084 + t2784 * t3401;
t2777 = t2914 * t3077 + t2917 * t3065;
t2783 = -t2914 * t3065 + t2917 * t3077;
t3624 = t2777 * t3083 + t2783 * t3402;
t2776 = t2914 * t3076 + t2917 * t3064;
t2782 = -t2914 * t3064 + t2917 * t3076;
t3623 = t2776 * t3082 + t2782 * t3403;
t2775 = t2914 * t3075 + t2917 * t3063;
t2781 = -t2914 * t3063 + t2917 * t3075;
t3622 = t2775 * t3081 + t2781 * t3404;
t2774 = t2914 * t3074 + t2917 * t3062;
t2780 = -t2914 * t3062 + t2917 * t3074;
t3621 = t2774 * t3080 + t2780 * t3405;
t2773 = t2914 * t3073 + t2917 * t3061;
t2779 = -t2914 * t3061 + t2917 * t3073;
t3620 = t2773 * t3079 + t2779 * t3406;
t2913 = t2939 * t3098;
t3349 = t3150 * t3048;
t3613 = 0.2e1 * t3349 + t2913;
t3350 = t3150 * t3612;
t3604 = t3212 * (t3020 * t3583 - t3150) - t3100 * (t2926 * t3098 - t3097 * t3350) + t2937 * t3098;
t2954 = t3049 * t3100 - t3416;
t3585 = 0.2e1 * t2954;
t3572 = m(3) * t3103;
t3034 = Icges(4,2) + m(4) * (t3115 + t3117);
t3033 = m(4) * (t3115 + t3116) + Icges(4,1);
t3567 = m(4) * (t3116 + t3117) + Icges(4,3);
t3566 = t2375 * t2890;
t3565 = t2376 * t2891;
t3564 = t2377 * t2892;
t3563 = t2381 * t2899;
t3562 = t2382 * t2900;
t3561 = t2383 * t2901;
t3362 = t3105 * t3114;
t2967 = t3106 * t3362 - t3110 * t3111;
t2971 = t3105 * t3357 + t3106 * t3110;
t2852 = t2967 * t3073 + t2971 * t3061;
t2858 = -t2967 * t3061 + t2971 * t3073;
t2752 = t2852 * t3079 + t2858 * t3406;
t2613 = -(t2752 * t3133 + t3130 * t3620) * t3570 + pkin(3) * (t3130 * t2752 - t3133 * t3620);
t2877 = 0.1e1 / ((-t3110 * t3133 + t3130 * t3363) * t3570 + pkin(3) * (t3110 * t3130 + t3133 * t3363));
t3548 = t2613 * t2877;
t2853 = t2967 * t3074 + t2971 * t3062;
t2859 = -t2967 * t3062 + t2971 * t3074;
t2753 = t2853 * t3080 + t2859 * t3405;
t2614 = -(t2753 * t3134 + t3131 * t3621) * t3570 + pkin(3) * (t3131 * t2753 - t3134 * t3621);
t2878 = 0.1e1 / ((-t3110 * t3134 + t3131 * t3363) * t3570 + pkin(3) * (t3110 * t3131 + t3134 * t3363));
t3547 = t2614 * t2878;
t2854 = t2967 * t3075 + t2971 * t3063;
t2860 = -t2967 * t3063 + t2971 * t3075;
t2754 = t2854 * t3081 + t2860 * t3404;
t2615 = -(t2754 * t3135 + t3132 * t3622) * t3570 + pkin(3) * (t3132 * t2754 - t3135 * t3622);
t2879 = 0.1e1 / ((-t3110 * t3135 + t3132 * t3363) * t3570 + pkin(3) * (t3110 * t3132 + t3135 * t3363));
t3546 = t2615 * t2879;
t2855 = t2967 * t3076 + t2971 * t3064;
t2861 = -t2967 * t3064 + t2971 * t3076;
t2755 = t2855 * t3082 + t2861 * t3403;
t2619 = -(t2755 * t3145 + t3142 * t3623) * t3570 + pkin(3) * (t3142 * t2755 - t3145 * t3623);
t2880 = 0.1e1 / ((-t3110 * t3145 + t3142 * t3363) * t3570 + pkin(3) * (t3110 * t3142 + t3145 * t3363));
t3545 = t2619 * t2880;
t2856 = t2967 * t3077 + t2971 * t3065;
t2862 = -t2967 * t3065 + t2971 * t3077;
t2756 = t2856 * t3083 + t2862 * t3402;
t2620 = -(t2756 * t3146 + t3143 * t3624) * t3570 + pkin(3) * (t3143 * t2756 - t3146 * t3624);
t2881 = 0.1e1 / ((-t3110 * t3146 + t3143 * t3363) * t3570 + pkin(3) * (t3110 * t3143 + t3146 * t3363));
t3544 = t2620 * t2881;
t2857 = t2967 * t3078 + t2971 * t3066;
t2863 = -t2967 * t3066 + t2971 * t3078;
t2757 = t2857 * t3084 + t2863 * t3401;
t2621 = -(t2757 * t3147 + t3144 * t3625) * t3570 + pkin(3) * (t3144 * t2757 - t3147 * t3625);
t2882 = 0.1e1 / ((-t3110 * t3147 + t3144 * t3363) * t3570 + pkin(3) * (t3110 * t3144 + t3147 * t3363));
t3543 = t2621 * t2882;
t2883 = t2972 * t3085 * t3114 + t3091 * t3109;
t3431 = t3003 * t3113;
t3454 = t2978 * t3110;
t3455 = t2978 * t3105;
t2701 = (t2883 * t3105 - t3085 * t3454) * t3431 + t3006 * (t2883 * t3110 + t3085 * t3455);
t2739 = (t2972 * t3110 + t2978 * t3362) * t3431 + (-t2972 * t3105 + t2978 * t3358) * t3006;
t2653 = t2701 * t3079 + t2739 * t3067;
t3542 = t2653 * t3103;
t2654 = -t2701 * t3067 + t2739 * t3079;
t3541 = t2654 * t3103;
t2884 = t2973 * t3086 * t3114 + t3092 * t3109;
t3430 = t3004 * t3113;
t3451 = t2979 * t3110;
t3452 = t2979 * t3105;
t2702 = (t2884 * t3105 - t3086 * t3451) * t3430 + t3007 * (t2884 * t3110 + t3086 * t3452);
t2740 = (t2973 * t3110 + t2979 * t3362) * t3430 + (-t2973 * t3105 + t2979 * t3358) * t3007;
t2655 = t2702 * t3080 + t2740 * t3068;
t3540 = t2655 * t3103;
t2656 = -t2702 * t3068 + t2740 * t3080;
t3539 = t2656 * t3103;
t2885 = t2974 * t3087 * t3114 + t3093 * t3109;
t3429 = t3005 * t3113;
t3448 = t2980 * t3110;
t3449 = t2980 * t3105;
t2703 = (t2885 * t3105 - t3087 * t3448) * t3429 + t3008 * (t2885 * t3110 + t3087 * t3449);
t2741 = (t2974 * t3110 + t2980 * t3362) * t3429 + (-t2974 * t3105 + t2980 * t3358) * t3008;
t2657 = t2703 * t3081 + t2741 * t3069;
t3538 = t2657 * t3103;
t2658 = -t2703 * t3069 + t2741 * t3081;
t3537 = t2658 * t3103;
t2886 = t2975 * t3088 * t3114 + t3094 * t3109;
t3428 = t3009 * t3113;
t3445 = t2981 * t3110;
t3446 = t2981 * t3105;
t2704 = (t2886 * t3105 - t3088 * t3445) * t3428 + t3012 * (t2886 * t3110 + t3088 * t3446);
t2742 = (t2975 * t3110 + t2981 * t3362) * t3428 + (-t2975 * t3105 + t2981 * t3358) * t3012;
t2660 = t2704 * t3082 + t2742 * t3070;
t3536 = t2660 * t3103;
t2661 = -t2704 * t3070 + t2742 * t3082;
t3535 = t2661 * t3103;
t2887 = t2976 * t3089 * t3114 + t3095 * t3109;
t3427 = t3010 * t3113;
t3442 = t2982 * t3110;
t3443 = t2982 * t3105;
t2705 = (t2887 * t3105 - t3089 * t3442) * t3427 + t3013 * (t2887 * t3110 + t3089 * t3443);
t2743 = (t2976 * t3110 + t2982 * t3362) * t3427 + (-t2976 * t3105 + t2982 * t3358) * t3013;
t2662 = t2705 * t3083 + t2743 * t3071;
t3534 = t2662 * t3103;
t2663 = -t2705 * t3071 + t2743 * t3083;
t3533 = t2663 * t3103;
t2888 = t2977 * t3090 * t3114 + t3096 * t3109;
t3426 = t3011 * t3113;
t3439 = t2983 * t3110;
t3440 = t2983 * t3105;
t2706 = (t2888 * t3105 - t3090 * t3439) * t3426 + t3014 * (t2888 * t3110 + t3090 * t3440);
t2744 = (t2977 * t3110 + t2983 * t3362) * t3426 + (-t2977 * t3105 + t2983 * t3358) * t3014;
t2664 = t2706 * t3084 + t2744 * t3072;
t3532 = t2664 * t3103;
t2665 = -t2706 * t3072 + t2744 * t3084;
t3531 = t2665 * t3103;
t2673 = -(t2858 * t3133 - t3130 * t3658) * t3570 + pkin(3) * (t3130 * t2858 + t3133 * t3658);
t3530 = t2673 * t3091;
t2674 = -(t2859 * t3134 - t3131 * t3657) * t3570 + pkin(3) * (t3131 * t2859 + t3134 * t3657);
t3529 = t2674 * t3092;
t2675 = -(t2860 * t3135 - t3132 * t3656) * t3570 + pkin(3) * (t3132 * t2860 + t3135 * t3656);
t3528 = t2675 * t3093;
t2676 = -(t2861 * t3145 - t3142 * t3655) * t3570 + pkin(3) * (t3142 * t2861 + t3145 * t3655);
t3527 = t2676 * t3094;
t2677 = -(t2862 * t3146 - t3143 * t3654) * t3570 + pkin(3) * (t3143 * t2862 + t3146 * t3654);
t3526 = t2677 * t3095;
t2678 = -(t2863 * t3147 - t3144 * t3653) * t3570 + pkin(3) * (t3144 * t2863 + t3147 * t3653);
t3525 = t2678 * t3096;
t2695 = (-(t2972 * t3362 - t3454) * t3431 - t3006 * (t2972 * t3358 + t3455)) * t3091 + t3085 * t2893 * t3109;
t3524 = t2695 * t3103;
t2696 = (-(t2973 * t3362 - t3451) * t3430 - t3007 * (t2973 * t3358 + t3452)) * t3092 + t3086 * t2894 * t3109;
t3523 = t2696 * t3103;
t2697 = (-(t2974 * t3362 - t3448) * t3429 - t3008 * (t2974 * t3358 + t3449)) * t3093 + t3087 * t2895 * t3109;
t3522 = t2697 * t3103;
t2698 = (-(t2975 * t3362 - t3445) * t3428 - t3012 * (t2975 * t3358 + t3446)) * t3094 + t3088 * t2902 * t3109;
t3521 = t2698 * t3103;
t2699 = (-(t2976 * t3362 - t3442) * t3427 - t3013 * (t2976 * t3358 + t3443)) * t3095 + t3089 * t2903 * t3109;
t3520 = t2699 * t3103;
t2700 = (-(t2977 * t3362 - t3439) * t3426 - t3014 * (t2977 * t3358 + t3440)) * t3096 + t3090 * t2904 * t3109;
t3519 = t2700 * t3103;
t3512 = t2791 * t2890;
t3511 = t2792 * t2891;
t3510 = t2793 * t2892;
t3509 = t2797 * t2899;
t3508 = t2798 * t2900;
t3507 = t2799 * t2901;
t3351 = t3149 * t3158;
t3385 = t3098 * t3149;
t2801 = (t2993 * t3148 - t3351) * t3101 - t2992 * t3385;
t3506 = t2801 * t3099;
t3481 = t2877 * t3103;
t3480 = t2878 * t3103;
t3479 = t2879 * t3103;
t3478 = t2880 * t3103;
t3477 = t2881 * t3103;
t3476 = t2882 * t3103;
t3052 = (rSges(3,1) ^ 2 + rSges(3,2) ^ 2) * m(3) + Icges(3,3);
t3475 = t2890 * t3052;
t3474 = t2890 * t3103;
t3473 = t2891 * t3052;
t3472 = t2891 * t3103;
t3471 = t2892 * t3052;
t3470 = t2892 * t3103;
t3469 = t2899 * t3052;
t3468 = t2899 * t3103;
t3467 = t2900 * t3052;
t3466 = t2900 * t3103;
t3465 = t2901 * t3052;
t3464 = t2901 * t3103;
t3415 = t3048 * t3100;
t3409 = t3058 * t3148;
t3408 = t3059 * t3099;
t3407 = t3059 * t3150;
t3389 = t3098 * t3099;
t3375 = t3099 * t3150;
t3369 = t3102 * t2954;
t3368 = t3102 * t3212;
t3366 = t3102 * t3150;
t3365 = t3103 * t3104;
t3219 = t3148 + 0.2e1 * t3053;
t3227 = t3212 * t3371;
t3236 = t3097 * t3352;
t3244 = t3630 * t3407;
t2659 = (0.2e1 * t3227 - (-0.2e1 * t3020 + t3407) * t3612) * t3058 + ((-t3049 * t3219 + t3392 * t3612) * t3101 + t3048 * t3385 - (-t3150 * t3579 + 0.4e1 * t3386) * t3410) * t3100 - t3244 + (-t3149 * t3212 + t3219 * t3416) * t3101 + (-t3148 * t3612 + t3236) * t3098 - t3350;
t2936 = t2991 - t3354 / 0.2e1;
t3182 = t3226 + t3354;
t3347 = ((t3199 / 0.2e1 - (0.2e1 * t3629 - t3353) * t3212) * t3058 + (((-t3228 + t3413 / 0.2e1) * t3098 + t3349) * t3101 + (-t3059 + 0.1e1 / 0.2e1) * t3352 - (-t3353 / 0.2e1 + t3629) * t3424) * t3100 + t2936 * t3059 + ((t3235 / 0.2e1 + t2994 / 0.2e1) * t3098 + t3225) * t3101 - t2991 / 0.2e1 + t3182) * t3691 + t2659 * t3060;
t3321 = t3150 * t3585;
t3306 = m(3) * t3417;
t3299 = t2890 * t3560;
t3298 = t2891 * t3558;
t3297 = t2892 * t3556;
t3296 = t2899 * t3554;
t3295 = t2900 * t3552;
t3294 = t2901 * t3550;
t2707 = -t2773 * t3067 + t2779 * t3400;
t2746 = -t2852 * t3067 + t2858 * t3400;
t2610 = (t2707 * t3130 + t2746 * t3133) * t3570 - (-t2707 * t3133 + t2746 * t3130) * pkin(3);
t3293 = t2610 * t3481;
t2708 = -t2774 * t3068 + t2780 * t3399;
t2747 = -t2853 * t3068 + t2859 * t3399;
t2611 = (t2708 * t3131 + t2747 * t3134) * t3570 - (-t2708 * t3134 + t2747 * t3131) * pkin(3);
t3292 = t2611 * t3480;
t2709 = -t2775 * t3069 + t2781 * t3398;
t2748 = -t2854 * t3069 + t2860 * t3398;
t2612 = (t2709 * t3132 + t2748 * t3135) * t3570 - (-t2709 * t3135 + t2748 * t3132) * pkin(3);
t3291 = t2612 * t3479;
t3290 = t2613 * t3481;
t3289 = t2614 * t3480;
t3288 = t2615 * t3479;
t2710 = -t2776 * t3070 + t2782 * t3397;
t2749 = -t2855 * t3070 + t2861 * t3397;
t2616 = (t2710 * t3142 + t2749 * t3145) * t3570 - (-t2710 * t3145 + t2749 * t3142) * pkin(3);
t3287 = t2616 * t3478;
t2711 = -t2777 * t3071 + t2783 * t3396;
t2750 = -t2856 * t3071 + t2862 * t3396;
t2617 = (t2711 * t3143 + t2750 * t3146) * t3570 - (-t2711 * t3146 + t2750 * t3143) * pkin(3);
t3286 = t2617 * t3477;
t2712 = -t2778 * t3072 + t2784 * t3395;
t2751 = -t2857 * t3072 + t2863 * t3395;
t2618 = (t2712 * t3144 + t2751 * t3147) * t3570 - (-t2712 * t3147 + t2751 * t3144) * pkin(3);
t3285 = t2618 * t3476;
t3284 = t2619 * t3478;
t3283 = t2620 * t3477;
t3282 = t2621 * t3476;
t3278 = t2659 * t3377;
t3274 = t2877 * t3530;
t3273 = t2878 * t3529;
t3272 = t2879 * t3528;
t3271 = t2880 * t3527;
t3270 = t2881 * t3526;
t3269 = t2882 * t3525;
t3262 = t2877 * t3423;
t3261 = t2877 * t3364;
t3260 = t2878 * t3422;
t3259 = t2878 * t3364;
t3258 = t2879 * t3421;
t3257 = t2879 * t3364;
t3256 = t2880 * t3420;
t3255 = t2880 * t3364;
t3254 = t2881 * t3419;
t3253 = t2881 * t3364;
t3252 = t2882 * t3418;
t3251 = t2882 * t3364;
t3242 = t3091 * t3423;
t3241 = t3092 * t3422;
t3240 = t3093 * t3421;
t3239 = t3094 * t3420;
t3238 = t3095 * t3419;
t3237 = t3096 * t3418;
t3232 = t3212 * t3389;
t3231 = t3098 * t3368;
t3229 = t3103 * t3355;
t3221 = -t3020 + t3407;
t3211 = t3103 * t3274;
t3210 = t3103 * t3273;
t3209 = t3103 * t3272;
t3208 = t3103 * t3271;
t3207 = t3103 * t3270;
t3206 = t3103 * t3269;
t3205 = t2877 * t3229;
t3204 = t2878 * t3229;
t3203 = t2879 * t3229;
t3202 = t2880 * t3229;
t3201 = t2881 * t3229;
t3200 = t2882 * t3229;
t3195 = t3154 * t3211;
t3194 = t3154 * t3210;
t3193 = t3154 * t3209;
t3192 = t3154 * t3208;
t3191 = t3154 * t3207;
t3190 = t3154 * t3206;
t2940 = t2992 * t3101 - t3098 * t3158;
t3171 = (t3020 * t3159 - t3160 * t3371) * t3100 + (t3148 * t3391 - t3351) * t3098 + (t3150 * t3160 + t3159 * t3371) * t3097;
t2733 = (t3098 * t3384 - t3102 * t3619) * t3148 + t3689;
t2734 = (t3098 * t3383 - t3102 * t3618) * t3148 + t3687;
t2735 = (t3098 * t3382 - t3102 * t3617) * t3148 + t3685;
t2736 = (t3098 * t3381 - t3102 * t3616) * t3148 + t3683;
t2737 = (t3098 * t3380 - t3102 * t3615) * t3148 + t3681;
t2738 = (t3098 * t3379 - t3102 * t3614) * t3148 + t3679;
t3016 = t3053 + t3148 / 0.2e1;
t2958 = t3612 * t3389;
t2956 = t3098 * t3376 - t3101 * t3366;
t2955 = -t3098 * t3367 - t3101 * t3375;
t2938 = t3048 * t3149 + t3097 * t3673;
t2929 = t3033 * t3148 + t3236;
t2911 = -t3099 * t3612 - 0.2e1 * t3231;
t2910 = -t3102 * t3612 + 0.2e1 * t3232;
t2864 = t3174 - t3630;
t2802 = -t3150 * t3370 - t3159 * t3645 + t3374 * t3629;
t2800 = t2993 * t3099 + t3102 * t3611;
t2785 = t3049 * t3645 + t3149 * t3567 + t3415 * t3629;
t2770 = t3034 * t3148 - t3053 * t3630 + t3174 * t3629;
t2769 = t2935 * t3375 + t3661;
t2768 = t2935 * t3366 - t3662;
t2767 = t2934 * t3375 + t3663;
t2766 = t2934 * t3366 - t3664;
t2765 = t2933 * t3375 + t3665;
t2764 = t2933 * t3366 - t3666;
t2763 = t2932 * t3375 + t3667;
t2762 = t2932 * t3366 - t3668;
t2761 = t2931 * t3375 + t3669;
t2760 = t2931 * t3366 - t3670;
t2759 = t2930 * t3375 + t3671;
t2758 = t2930 * t3366 - t3672;
t2714 = t2802 * t3102 - t3099 * t3171;
t2713 = t2802 * t3099 + t3102 * t3171;
t2694 = (-t2926 * t3100 + t3584 - (-0.2e1 * t3058 + 0.1e1) * t3354) * t3059 - t2772 * t3388 + t2954 * t3149;
t2693 = (-t2864 * t3387 + t3099 * (-t3058 * t3674 - t3394 * t3612 + t3212)) * t3101 - (t3412 + t3415) * t3389 + (-0.2e1 * t3059 + 0.1e1) * t3369;
t2692 = t3408 * t3585 + ((-t2958 - 0.2e1 * t3368) * t3058 + t2910 * t3394 - t3630 * t3389 + t3368) * t3101 + (-t3048 * t3387 - t3049 * t3099) * t3100 - t3097 * (-t3048 * t3099 + t3049 * t3387);
t2691 = (-t2836 * t3441 - t2844 * t2935) * t2901;
t2690 = (t2850 * t2935 + t3441 * t3652) * t2901;
t2689 = (-t2833 * t3444 - t2843 * t2934) * t2900;
t2688 = (t2849 * t2934 + t3444 * t3651) * t2900;
t2687 = (-t2830 * t3447 - t2842 * t2933) * t2899;
t2686 = (t2848 * t2933 + t3447 * t3650) * t2899;
t2685 = (-t2827 * t3450 - t2841 * t2932) * t2892;
t2684 = (t2847 * t2932 + t3450 * t3649) * t2892;
t2683 = (-t2824 * t3453 - t2840 * t2931) * t2891;
t2682 = (t2846 * t2931 + t3453 * t3648) * t2891;
t2681 = (-t2821 * t3456 - t2839 * t2930) * t2890;
t2680 = (t2845 * t2930 + t3456 * t3647) * t2890;
t2679 = t3033 - t3174 - t3678;
t2672 = (-t2836 * t2850 + t2844 * t3652) * t2901;
t2671 = (-t2833 * t2849 + t2843 * t3651) * t2900;
t2670 = (-t2830 * t2848 + t2842 * t3650) * t2899;
t2669 = (-t2827 * t2847 + t2841 * t3649) * t2892;
t2668 = (-t2824 * t2846 + t2840 * t3648) * t2891;
t2667 = (-t2821 * t2845 + t2839 * t3647) * t2890;
t2666 = (-0.2e1 * t3660 - 0.2e1 * t2985 - (-0.4e1 * t3058 + 0.2e1) * t3390) * t3060 - t3675 * t3377 + t2771;
t2651 = t2732 * t3098 + t2935 * t2955 + (-t2836 * t3149 - t3661) * t3101;
t2650 = -t2738 * t3098 - t2935 * t2956 + (t3149 * t3652 - t3662) * t3101;
t2649 = t2730 * t3098 + t2934 * t2955 + (-t2833 * t3149 - t3663) * t3101;
t2648 = -t2737 * t3098 - t2934 * t2956 + (t3149 * t3651 - t3664) * t3101;
t2647 = t2728 * t3098 + t2933 * t2955 + (-t2830 * t3149 - t3665) * t3101;
t2646 = -t2736 * t3098 - t2933 * t2956 + (t3149 * t3650 - t3666) * t3101;
t2645 = t2726 * t3098 + t2932 * t2955 + (-t2827 * t3149 - t3667) * t3101;
t2644 = -t2735 * t3098 - t2932 * t2956 + (t3149 * t3649 - t3668) * t3101;
t2643 = t2724 * t3098 + t2931 * t2955 + (-t2824 * t3149 - t3669) * t3101;
t2642 = -t2734 * t3098 - t2931 * t2956 + (t3149 * t3648 - t3670) * t3101;
t2641 = t2722 * t3098 + t2930 * t2955 + (-t2821 * t3149 - t3671) * t3101;
t2640 = -t2733 * t3098 - t2930 * t2956 + (t3149 * t3647 - t3672) * t3101;
t2639 = -t3425 + (t3224 - (t3582 - 0.2e1) * t3410) * t3100 + t3034 + t3425 * t3059 + t3631 + t3678;
t2637 = (-t2732 - t3500) * t3102 + (t2738 - t3494) * t3099;
t2636 = (-t2730 - t3501) * t3102 + (t2737 - t3495) * t3099;
t2635 = (-t2728 - t3502) * t3102 + (t2736 - t3496) * t3099;
t2634 = (-t2726 - t3503) * t3102 + (t2735 - t3497) * t3099;
t2633 = (-t2724 - t3504) * t3102 + (t2734 - t3498) * t3099;
t2632 = (-t2722 - t3505) * t3102 + (t2733 - t3499) * t3099;
t2631 = -t3059 * t3646 + (t2911 * t3409 + (t2926 * t3387 - t2938 * t3099) * t3100 - 0.2e1 * t2936 * t3387 - t3099 * t2929) * t3101 + (t2910 * t3058 - (-t3102 * t3674 - t2958) * t3394 + t3034 * t3102 - t3232) * t3149;
t2630 = t2772 * t3408 + (t2910 * t3409 + (-t2926 * t3389 - t2938 * t3102) * t3100 + 0.2e1 * t2936 * t3389 - t2929 * t3102) * t3101 - (t2911 * t3058 + (t3099 * t3674 - t3387 * t3612) * t3394 + t3034 * t3099 + t3231) * t3149;
t2629 = -t3652 * t2955 + t2836 * t2956 + (t2732 * t3099 + t2738 * t3102) * t3101;
t2628 = -t3651 * t2955 + t2833 * t2956 + (t2730 * t3099 + t2737 * t3102) * t3101;
t2627 = -t3650 * t2955 + t2830 * t2956 + (t2728 * t3099 + t2736 * t3102) * t3101;
t2626 = -t3649 * t2955 + t2827 * t2956 + (t2726 * t3099 + t2735 * t3102) * t3101;
t2625 = -t3648 * t2955 + t2824 * t2956 + (t2724 * t3099 + t2734 * t3102) * t3101;
t2624 = -t3647 * t2955 + t2821 * t2956 + (t2722 * t3099 + t2733 * t3102) * t3101;
t2623 = (t3099 * t3321 - t3646) * t3059 + (t3099 * t2770 - t3102 * t3604) * t3101 - t2785 * t3102 - t3020 * t3099 * t2954;
t2622 = (t2772 * t3099 + t3102 * t3321) * t3059 + (t3102 * t2770 + t3099 * t3604) * t3101 + t2785 * t3099 - t3020 * t3369;
t2606 = t3190 + (-m(3) * t2983 * t3237 + t2700 * t3229) * t2901;
t2605 = t3191 + (-m(3) * t2982 * t3238 + t2699 * t3229) * t2900;
t2604 = t3192 + (-m(3) * t2981 * t3239 + t2698 * t3229) * t2899;
t2594 = t3193 + (-m(3) * t2980 * t3240 + t2697 * t3229) * t2892;
t2593 = t3194 + (-m(3) * t2979 * t3241 + t2696 * t3229) * t2891;
t2592 = t3195 + (-m(3) * t2978 * t3242 + t2695 * t3229) * t2890;
t2591 = (-t2664 * t2935 + t2700 * t2836) * t3464;
t2590 = (t2665 * t2935 - t2700 * t3652) * t3464;
t2589 = (-t2662 * t2934 + t2699 * t2833) * t3466;
t2588 = (t2663 * t2934 - t2699 * t3651) * t3466;
t2587 = (-t2660 * t2933 + t2698 * t2830) * t3468;
t2586 = (t2661 * t2933 - t2698 * t3650) * t3468;
t2585 = (-t2657 * t2932 + t2697 * t2827) * t3470;
t2584 = (t2658 * t2932 - t2697 * t3649) * t3470;
t2583 = (-t2655 * t2931 + t2696 * t2824) * t3472;
t2582 = (t2656 * t2931 - t2696 * t3648) * t3472;
t2581 = (-t2653 * t2930 + t2695 * t2821) * t3474;
t2580 = (t2654 * t2930 - t2695 * t3647) * t3474;
t2579 = t3114 * t3190 + (t2700 * t3365 - t3441 * t3573) * t2901;
t2578 = t3114 * t3191 + (t2699 * t3365 - t3444 * t3574) * t2900;
t2577 = t3114 * t3192 + (t2698 * t3365 - t3447 * t3575) * t2899;
t2576 = t3114 * t3193 + (t2697 * t3365 - t3450 * t3576) * t2892;
t2575 = t3114 * t3194 + (t2696 * t3365 - t3453 * t3577) * t2891;
t2574 = t3114 * t3195 + (t2695 * t3365 - t3456 * t3578) * t2890;
t2573 = -t3052 * t3245 + (t2678 * t2882 * t3237 + t2700 * t3507) * t3572;
t2572 = -t3052 * t3246 + (t2677 * t2881 * t3238 + t2699 * t3508) * t3572;
t2571 = -t3052 * t3247 + (t2676 * t2880 * t3239 + t2698 * t3509) * t3572;
t2570 = -t3052 * t3248 + (t2675 * t2879 * t3240 + t2697 * t3510) * t3572;
t2569 = -t3052 * t3249 + (t2674 * t2878 * t3241 + t2696 * t3511) * t3572;
t2568 = -t3052 * t3250 + (t2673 * t2877 * t3242 + t2695 * t3512) * t3572;
t2567 = (t3676 * t3100 + t3632) * t3060 + t3278 + ((-t3100 * t3613 - t3627) * t3060 + t3349 * t3100 + t3225) * t3101 + (-t3100 * t3424 + t3212 - t3319) * t3629;
t2566 = (t2664 * t3652 - t2665 * t2836) * t3464;
t2565 = (t2662 * t3651 - t2663 * t2833) * t3466;
t2564 = (t2660 * t3650 - t2661 * t2830) * t3468;
t2563 = (t2657 * t3649 - t2658 * t2827) * t3470;
t2562 = (t2655 * t3648 - t2656 * t2824) * t3472;
t2561 = (t2653 * t3647 - t2654 * t2821) * t3474;
t2560 = t3221 * t3425 + t3016 * t3100 * t3320 + t3244 + t3020 * t3034 + (-t3100 * t3221 * t3674 - 0.2e1 * t3016 * t3414) * t3097 + t3347;
t2559 = (-t3020 * t3612 - 0.2e1 * t3227) * t3058 + (-t2938 * t3098 + (-t3243 + 0.2e1 * t3348) * t3097) * t3100 + t3227 - t2929 * t3098 - t3150 * t3033 + t3347;
t2552 = ((t3101 * t3613 - t3676) * t3100 + t3627 * t3101 - t3632) * t3060 - t3278 + (-t3199 - (-t3629 + t3353) * t3674) * t3058 + ((-t2913 - t3349) * t3101 + t3183 + t3223) * t3100 + (-t2908 - t3225) * t3101 - t3182 + t3659;
t2551 = (-t2618 * t2935 + t2836 * t3525) * t3476;
t2550 = (t2621 * t2935 - t3525 * t3652) * t3476;
t2549 = (-t2617 * t2934 + t2833 * t3526) * t3477;
t2548 = (t2620 * t2934 - t3526 * t3651) * t3477;
t2547 = (-t2616 * t2933 + t2830 * t3527) * t3478;
t2546 = (t2619 * t2933 - t3527 * t3650) * t3478;
t2545 = (-t2612 * t2932 + t2827 * t3528) * t3479;
t2544 = (t2615 * t2932 - t3528 * t3649) * t3479;
t2543 = (-t2611 * t2931 + t2824 * t3529) * t3480;
t2542 = (t2614 * t2931 - t3529 * t3648) * t3480;
t2541 = (-t2610 * t2930 + t2821 * t3530) * t3481;
t2540 = (t2613 * t2930 - t3530 * t3647) * t3481;
t2539 = t2621 * t3251 + (t2665 * t3229 + t2850 * t3307) * t2901;
t2538 = t2618 * t3251 + (t2664 * t3229 + t2844 * t3307) * t2901;
t2537 = t2620 * t3253 + (t2663 * t3229 + t2849 * t3308) * t2900;
t2536 = t2617 * t3253 + (t2662 * t3229 + t2843 * t3308) * t2900;
t2535 = t2619 * t3255 + (t2661 * t3229 + t2848 * t3309) * t2899;
t2534 = t2616 * t3255 + (t2660 * t3229 + t2842 * t3309) * t2899;
t2533 = t2615 * t3257 + (t2658 * t3229 + t2847 * t3310) * t2892;
t2532 = t2612 * t3257 + (t2657 * t3229 + t2841 * t3310) * t2892;
t2531 = t2614 * t3259 + (t2656 * t3229 + t2846 * t3311) * t2891;
t2530 = t2611 * t3259 + (t2655 * t3229 + t2840 * t3311) * t2891;
t2529 = t2613 * t3261 + (t2654 * t3229 + t2845 * t3312) * t2890;
t2528 = t2610 * t3261 + (t2653 * t3229 + t2839 * t3312) * t2890;
t2527 = t2621 * t3200 + (t2665 * t3365 + t2850 * t3573) * t2901;
t2526 = t2618 * t3200 + (t2664 * t3365 + t2844 * t3573) * t2901;
t2525 = t2620 * t3201 + (t2663 * t3365 + t2849 * t3574) * t2900;
t2524 = t2617 * t3201 + (t2662 * t3365 + t2843 * t3574) * t2900;
t2523 = t2619 * t3202 + (t2661 * t3365 + t2848 * t3575) * t2899;
t2522 = t2616 * t3202 + (t2660 * t3365 + t2842 * t3575) * t2899;
t2521 = t2615 * t3203 + (t2658 * t3365 + t2847 * t3576) * t2892;
t2520 = t2612 * t3203 + (t2657 * t3365 + t2841 * t3576) * t2892;
t2519 = t2614 * t3204 + (t2656 * t3365 + t2846 * t3577) * t2891;
t2518 = t2611 * t3204 + (t2655 * t3365 + t2840 * t3577) * t2891;
t2517 = t2613 * t3205 + (t2654 * t3365 + t2845 * t3578) * t2890;
t2516 = t2610 * t3205 + (t2653 * t3365 + t2839 * t3578) * t2890;
t2515 = t2850 * t3465 + (t2621 * t3252 + t2665 * t3507) * t3572;
t2514 = t2844 * t3465 + (t2618 * t3252 + t2664 * t3507) * t3572;
t2513 = t2849 * t3467 + (t2620 * t3254 + t2663 * t3508) * t3572;
t2512 = t2843 * t3467 + (t2617 * t3254 + t2662 * t3508) * t3572;
t2511 = t2848 * t3469 + (t2619 * t3256 + t2661 * t3509) * t3572;
t2510 = t2842 * t3469 + (t2616 * t3256 + t2660 * t3509) * t3572;
t2509 = t2847 * t3471 + (t2615 * t3258 + t2658 * t3510) * t3572;
t2508 = t2841 * t3471 + (t2612 * t3258 + t2657 * t3510) * t3572;
t2507 = t2846 * t3473 + (t2614 * t3260 + t2656 * t3511) * t3572;
t2506 = t2840 * t3473 + (t2611 * t3260 + t2655 * t3511) * t3572;
t2505 = t2845 * t3475 + (t2613 * t3262 + t2654 * t3512) * t3572;
t2504 = t2839 * t3475 + (t2610 * t3262 + t2653 * t3512) * t3572;
t2503 = (t2618 * t3652 - t2621 * t2836) * t3476;
t2502 = (t2617 * t3651 - t2620 * t2833) * t3477;
t2501 = (t2616 * t3650 - t2619 * t2830) * t3478;
t2500 = (t2612 * t3649 - t2615 * t2827) * t3479;
t2499 = (t2611 * t3648 - t2614 * t2824) * t3480;
t2498 = (t2610 * t3647 - t2613 * t2821) * t3481;
t2497 = t2691 * t3307 + (t2591 * t3114 + t2551) * t3154;
t2496 = t2690 * t3307 + (t2590 * t3114 + t2550) * t3154;
t2495 = t2689 * t3308 + (t2589 * t3114 + t2549) * t3154;
t2494 = t2688 * t3308 + (t2588 * t3114 + t2548) * t3154;
t2493 = t2687 * t3309 + (t2587 * t3114 + t2547) * t3154;
t2492 = t2686 * t3309 + (t2586 * t3114 + t2546) * t3154;
t2491 = t2685 * t3310 + (t2585 * t3114 + t2545) * t3154;
t2490 = t2684 * t3310 + (t2584 * t3114 + t2544) * t3154;
t2489 = t2683 * t3311 + (t2583 * t3114 + t2543) * t3154;
t2488 = t2682 * t3311 + (t2582 * t3114 + t2542) * t3154;
t2487 = t2681 * t3312 + (t2581 * t3114 + t2541) * t3154;
t2486 = t2680 * t3312 + (t2580 * t3114 + t2540) * t3154;
t2485 = t2551 * t3355 + t2591 * t3104 + t2691 * t3573;
t2484 = t2550 * t3355 + t2590 * t3104 + t2690 * t3573;
t2483 = t2549 * t3355 + t2589 * t3104 + t2689 * t3574;
t2482 = t2548 * t3355 + t2588 * t3104 + t2688 * t3574;
t2481 = t2547 * t3355 + t2587 * t3104 + t2687 * t3575;
t2480 = t2546 * t3355 + t2586 * t3104 + t2686 * t3575;
t2479 = t2545 * t3355 + t2585 * t3104 + t2685 * t3576;
t2478 = t2544 * t3355 + t2584 * t3104 + t2684 * t3576;
t2477 = t2543 * t3355 + t2583 * t3104 + t2683 * t3577;
t2476 = t2542 * t3355 + t2582 * t3104 + t2682 * t3577;
t2475 = t2541 * t3355 + t2581 * t3104 + t2681 * t3578;
t2474 = t2540 * t3355 + t2580 * t3104 + t2680 * t3578;
t2473 = t2691 * t3052 + (t2551 * t3418 + t2591 * t2799) * m(3);
t2472 = t2690 * t3052 + (t2550 * t3418 + t2590 * t2799) * m(3);
t2471 = t2689 * t3052 + (t2549 * t3419 + t2589 * t2798) * m(3);
t2470 = t2688 * t3052 + (t2548 * t3419 + t2588 * t2798) * m(3);
t2469 = t2687 * t3052 + (t2547 * t3420 + t2587 * t2797) * m(3);
t2468 = t2686 * t3052 + (t2546 * t3420 + t2586 * t2797) * m(3);
t2467 = t2685 * t3052 + (t2545 * t3421 + t2585 * t2793) * m(3);
t2466 = t2684 * t3052 + (t2544 * t3421 + t2584 * t2793) * m(3);
t2465 = t2683 * t3052 + (t2543 * t3422 + t2583 * t2792) * m(3);
t2464 = t2682 * t3052 + (t2542 * t3422 + t2582 * t2792) * m(3);
t2463 = t2681 * t3052 + (t2541 * t3423 + t2581 * t2791) * m(3);
t2462 = t2680 * t3052 + (t2540 * t3423 + t2580 * t2791) * m(3);
t2461 = t2672 * t3307 + (t2566 * t3114 + t2503) * t3154;
t2460 = t2671 * t3308 + (t2565 * t3114 + t2502) * t3154;
t2459 = t2670 * t3309 + (t2564 * t3114 + t2501) * t3154;
t2458 = t2669 * t3310 + (t2563 * t3114 + t2500) * t3154;
t2457 = t2668 * t3311 + (t2562 * t3114 + t2499) * t3154;
t2456 = t2667 * t3312 + (t2561 * t3114 + t2498) * t3154;
t2455 = t2503 * t3355 + t2566 * t3104 + t2672 * t3573;
t2454 = t2502 * t3355 + t2565 * t3104 + t2671 * t3574;
t2453 = t2501 * t3355 + t2564 * t3104 + t2670 * t3575;
t2452 = t2500 * t3355 + t2563 * t3104 + t2669 * t3576;
t2451 = t2499 * t3355 + t2562 * t3104 + t2668 * t3577;
t2450 = t2498 * t3355 + t2561 * t3104 + t2667 * t3578;
t2449 = t2672 * t3052 + (t2503 * t3418 + t2566 * t2799) * m(3);
t2448 = t2671 * t3052 + (t2502 * t3419 + t2565 * t2798) * m(3);
t2447 = t2670 * t3052 + (t2501 * t3420 + t2564 * t2797) * m(3);
t2446 = t2669 * t3052 + (t2500 * t3421 + t2563 * t2793) * m(3);
t2445 = t2668 * t3052 + (t2499 * t3422 + t2562 * t2792) * m(3);
t2444 = t2667 * t3052 + (t2498 * t3423 + t2561 * t2791) * m(3);
t2443 = t2606 * t3206 + (-t2573 * t3441 + t2579 * t3519) * t2901;
t2442 = t2605 * t3207 + (-t2572 * t3444 + t2578 * t3520) * t2900;
t2441 = t2604 * t3208 + (-t2571 * t3447 + t2577 * t3521) * t2899;
t2440 = t2594 * t3209 + (-t2570 * t3450 + t2576 * t3522) * t2892;
t2439 = t2593 * t3210 + (-t2569 * t3453 + t2575 * t3523) * t2891;
t2438 = t2592 * t3211 + (-t2568 * t3456 + t2574 * t3524) * t2890;
t2437 = t2606 * t3282 + (t2573 * t2850 + t2579 * t3531) * t2901;
t2436 = t2606 * t3285 + (t2573 * t2844 + t2579 * t3532) * t2901;
t2435 = t2605 * t3283 + (t2572 * t2849 + t2578 * t3533) * t2900;
t2434 = t2605 * t3286 + (t2572 * t2843 + t2578 * t3534) * t2900;
t2433 = t2604 * t3284 + (t2571 * t2848 + t2577 * t3535) * t2899;
t2432 = t2604 * t3287 + (t2571 * t2842 + t2577 * t3536) * t2899;
t2431 = t2594 * t3288 + (t2570 * t2847 + t2576 * t3537) * t2892;
t2430 = t2594 * t3291 + (t2570 * t2841 + t2576 * t3538) * t2892;
t2429 = t2593 * t3289 + (t2569 * t2846 + t2575 * t3539) * t2891;
t2428 = t2593 * t3292 + (t2569 * t2840 + t2575 * t3540) * t2891;
t2427 = t2592 * t3290 + (t2568 * t2845 + t2574 * t3541) * t2890;
t2426 = t2592 * t3293 + (t2568 * t2839 + t2574 * t3542) * t2890;
t2425 = t2539 * t3206 + (-t2515 * t3441 + t2527 * t3519) * t2901;
t2424 = t2538 * t3206 + (-t2514 * t3441 + t2526 * t3519) * t2901;
t2423 = t2537 * t3207 + (-t2513 * t3444 + t2525 * t3520) * t2900;
t2422 = t2536 * t3207 + (-t2512 * t3444 + t2524 * t3520) * t2900;
t2421 = t2535 * t3208 + (-t2511 * t3447 + t2523 * t3521) * t2899;
t2420 = t2534 * t3208 + (-t2510 * t3447 + t2522 * t3521) * t2899;
t2419 = t2533 * t3209 + (-t2509 * t3450 + t2521 * t3522) * t2892;
t2418 = t2532 * t3209 + (-t2508 * t3450 + t2520 * t3522) * t2892;
t2417 = t2531 * t3210 + (-t2507 * t3453 + t2519 * t3523) * t2891;
t2416 = t2530 * t3210 + (-t2506 * t3453 + t2518 * t3523) * t2891;
t2415 = t2529 * t3211 + (-t2505 * t3456 + t2517 * t3524) * t2890;
t2414 = t2528 * t3211 + (-t2504 * t3456 + t2516 * t3524) * t2890;
t2413 = t2539 * t3282 + (t2515 * t2850 + t2527 * t3531) * t2901;
t2412 = t2539 * t3285 + (t2515 * t2844 + t2527 * t3532) * t2901;
t2411 = t2538 * t3282 + (t2514 * t2850 + t2526 * t3531) * t2901;
t2410 = t2538 * t3285 + (t2514 * t2844 + t2526 * t3532) * t2901;
t2409 = t2537 * t3283 + (t2513 * t2849 + t2525 * t3533) * t2900;
t2408 = t2537 * t3286 + (t2513 * t2843 + t2525 * t3534) * t2900;
t2407 = t2536 * t3283 + (t2512 * t2849 + t2524 * t3533) * t2900;
t2406 = t2536 * t3286 + (t2512 * t2843 + t2524 * t3534) * t2900;
t2405 = t2535 * t3284 + (t2511 * t2848 + t2523 * t3535) * t2899;
t2404 = t2535 * t3287 + (t2511 * t2842 + t2523 * t3536) * t2899;
t2403 = t2534 * t3284 + (t2510 * t2848 + t2522 * t3535) * t2899;
t2402 = t2534 * t3287 + (t2510 * t2842 + t2522 * t3536) * t2899;
t2401 = t2533 * t3288 + (t2509 * t2847 + t2521 * t3537) * t2892;
t2400 = t2533 * t3291 + (t2509 * t2841 + t2521 * t3538) * t2892;
t2399 = t2532 * t3288 + (t2508 * t2847 + t2520 * t3537) * t2892;
t2398 = t2532 * t3291 + (t2508 * t2841 + t2520 * t3538) * t2892;
t2397 = t2531 * t3289 + (t2507 * t2846 + t2519 * t3539) * t2891;
t2396 = t2531 * t3292 + (t2507 * t2840 + t2519 * t3540) * t2891;
t2395 = t2530 * t3289 + (t2506 * t2846 + t2518 * t3539) * t2891;
t2394 = t2530 * t3292 + (t2506 * t2840 + t2518 * t3540) * t2891;
t2393 = t2529 * t3290 + (t2505 * t2845 + t2517 * t3541) * t2890;
t2392 = t2529 * t3293 + (t2505 * t2839 + t2517 * t3542) * t2890;
t2391 = t2528 * t3290 + (t2504 * t2845 + t2516 * t3541) * t2890;
t2390 = t2528 * t3293 + (t2504 * t2839 + t2516 * t3542) * t2890;
t2380 = (t2907 * t3052 + (t2799 * t3113 - t2968 * t3418) * t3306) * t3300;
t2379 = (t2906 * t3052 + (t2798 * t3113 - t2968 * t3419) * t3306) * t3301;
t2378 = (t2905 * t3052 + (t2797 * t3113 - t2968 * t3420) * t3306) * t3302;
t2374 = (t2898 * t3052 + (t2793 * t3113 - t2968 * t3421) * t3306) * t3303;
t2373 = (t2897 * t3052 + (t2792 * t3113 - t2968 * t3422) * t3306) * t3304;
t2372 = (t2896 * t3052 + (t2791 * t3113 - t2968 * t3423) * t3306) * t3305;
t2371 = t2497 * t3206 + (-t2473 * t3441 + t2485 * t3519) * t2901;
t2370 = t2496 * t3206 + (-t2472 * t3441 + t2484 * t3519) * t2901;
t2369 = t2495 * t3207 + (-t2471 * t3444 + t2483 * t3520) * t2900;
t2368 = t2494 * t3207 + (-t2470 * t3444 + t2482 * t3520) * t2900;
t2367 = t2493 * t3208 + (-t2469 * t3447 + t2481 * t3521) * t2899;
t2366 = t2492 * t3208 + (-t2468 * t3447 + t2480 * t3521) * t2899;
t2365 = t2491 * t3209 + (-t2467 * t3450 + t2479 * t3522) * t2892;
t2364 = t2490 * t3209 + (-t2466 * t3450 + t2478 * t3522) * t2892;
t2363 = t2489 * t3210 + (-t2465 * t3453 + t2477 * t3523) * t2891;
t2362 = t2488 * t3210 + (-t2464 * t3453 + t2476 * t3523) * t2891;
t2361 = t2487 * t3211 + (-t2463 * t3456 + t2475 * t3524) * t2890;
t2360 = t2486 * t3211 + (-t2462 * t3456 + t2474 * t3524) * t2890;
t2359 = t2497 * t3282 + (t2473 * t2850 + t2485 * t3531) * t2901;
t2358 = t2497 * t3285 + (t2473 * t2844 + t2485 * t3532) * t2901;
t2357 = t2496 * t3282 + (t2472 * t2850 + t2484 * t3531) * t2901;
t2356 = t2496 * t3285 + (t2472 * t2844 + t2484 * t3532) * t2901;
t2355 = t2495 * t3283 + (t2471 * t2849 + t2483 * t3533) * t2900;
t2354 = t2495 * t3286 + (t2471 * t2843 + t2483 * t3534) * t2900;
t2353 = t2494 * t3283 + (t2470 * t2849 + t2482 * t3533) * t2900;
t2352 = t2494 * t3286 + (t2470 * t2843 + t2482 * t3534) * t2900;
t2351 = t2493 * t3284 + (t2469 * t2848 + t2481 * t3535) * t2899;
t2350 = t2493 * t3287 + (t2469 * t2842 + t2481 * t3536) * t2899;
t2349 = t2492 * t3284 + (t2468 * t2848 + t2480 * t3535) * t2899;
t2348 = t2492 * t3287 + (t2468 * t2842 + t2480 * t3536) * t2899;
t2347 = t2491 * t3288 + (t2467 * t2847 + t2479 * t3537) * t2892;
t2346 = t2491 * t3291 + (t2467 * t2841 + t2479 * t3538) * t2892;
t2345 = t2490 * t3288 + (t2466 * t2847 + t2478 * t3537) * t2892;
t2344 = t2490 * t3291 + (t2466 * t2841 + t2478 * t3538) * t2892;
t2343 = t2489 * t3289 + (t2465 * t2846 + t2477 * t3539) * t2891;
t2342 = t2489 * t3292 + (t2465 * t2840 + t2477 * t3540) * t2891;
t2341 = t2488 * t3289 + (t2464 * t2846 + t2476 * t3539) * t2891;
t2340 = t2488 * t3292 + (t2464 * t2840 + t2476 * t3540) * t2891;
t2339 = t2487 * t3290 + (t2463 * t2845 + t2475 * t3541) * t2890;
t2338 = t2487 * t3293 + (t2463 * t2839 + t2475 * t3542) * t2890;
t2337 = t2486 * t3290 + (t2462 * t2845 + t2474 * t3541) * t2890;
t2336 = t2486 * t3293 + (t2462 * t2839 + t2474 * t3542) * t2890;
t2335 = t2461 * t3206 + (-t2449 * t3441 + t2455 * t3519) * t2901;
t2334 = t2460 * t3207 + (-t2448 * t3444 + t2454 * t3520) * t2900;
t2333 = t2459 * t3208 + (-t2447 * t3447 + t2453 * t3521) * t2899;
t2332 = t2458 * t3209 + (-t2446 * t3450 + t2452 * t3522) * t2892;
t2331 = t2457 * t3210 + (-t2445 * t3453 + t2451 * t3523) * t2891;
t2330 = t2456 * t3211 + (-t2444 * t3456 + t2450 * t3524) * t2890;
t2329 = t2461 * t3282 + (t2449 * t2850 + t2455 * t3531) * t2901;
t2328 = t2461 * t3285 + (t2449 * t2844 + t2455 * t3532) * t2901;
t2327 = t2460 * t3283 + (t2448 * t2849 + t2454 * t3533) * t2900;
t2326 = t2460 * t3286 + (t2448 * t2843 + t2454 * t3534) * t2900;
t2325 = t2459 * t3284 + (t2447 * t2848 + t2453 * t3535) * t2899;
t2324 = t2459 * t3287 + (t2447 * t2842 + t2453 * t3536) * t2899;
t2323 = t2458 * t3288 + (t2446 * t2847 + t2452 * t3537) * t2892;
t2322 = t2458 * t3291 + (t2446 * t2841 + t2452 * t3538) * t2892;
t2321 = t2457 * t3289 + (t2445 * t2846 + t2451 * t3539) * t2891;
t2320 = t2457 * t3292 + (t2445 * t2840 + t2451 * t3540) * t2891;
t2319 = t2456 * t3290 + (t2444 * t2845 + t2450 * t3541) * t2890;
t2318 = t2456 * t3293 + (t2444 * t2839 + t2450 * t3542) * t2890;
t1 = [-t2372 * t3250 - t2373 * t3249 - t2374 * t3248 - t2378 * t3247 - t2379 * t3246 - t2380 * t3245 + (-t2426 * t2733 + t2427 * t2722 - t2428 * t2734 + t2429 * t2724 - t2430 * t2735 + t2431 * t2726 - t2432 * t2736 + t2433 * t2728 - t2434 * t2737 + t2435 * t2730 - t2436 * t2738 + t2437 * t2732) * t3150 + (t2436 * t2769 + t2437 * t2768 + t2443 * t2637 + t2434 * t2767 + t2435 * t2766 + t2442 * t2636 + t2428 * t2761 + t2429 * t2760 + t2439 * t2633 + t2430 * t2763 + t2431 * t2762 + t2440 * t2634 + t2432 * t2765 + t2433 * t2764 + t2441 * t2635 + t2426 * t2759 + t2427 * t2758 + t2438 * t2632) * t3149 + (t2434 * t2648 + t2435 * t2649 + t2442 * t2628 + t2436 * t2650 + t2437 * t2651 + t2443 * t2629 + t2426 * t2640 + t2427 * t2641 + t2438 * t2624 + t2428 * t2642 + t2429 * t2643 + t2439 * t2625 + t2430 * t2644 + t2431 * t2645 + t2440 * t2626 + t2432 * t2646 + t2433 * t2647 + t2441 * t2627) * t3148 + ((t2713 * t3102 - t2714 * t3099 + t2786 * t3366 - t2800 * t3375) * t3149 + (-t2713 * t3378 - t2714 * t3373 + t2786 * t2955 + t2800 * t2956) * t3148) * m(4) + (t2700 * t3561 + t2699 * t3562 + t2698 * t3563 + t2697 * t3564 + t2696 * t3565 + t2695 * t3566 + t2384 * t3274 + t2385 * t3273 + t2386 * t3272 + t2387 * t3271 + t2388 * t3270 + t2389 * t3269 + (-t2695 * t3299 - t2696 * t3298 - t2697 * t3297 - t2698 * t3296 - t2699 * t3295 - t2700 * t3294 + (-t3269 * t3549 - t3270 * t3551 - t3271 * t3553 - t3272 * t3555 - t3273 * t3557 - t3274 * t3559) * t3108) * m(3)) * t3103; t2372 * t3487 + t2373 * t3486 + t2374 * t3485 + t2378 * t3484 + t2379 * t3483 + t2380 * t3482 + (-t2392 * t2733 + t2393 * t2722 - t2396 * t2734 + t2397 * t2724 - t2400 * t2735 + t2401 * t2726 - t2404 * t2736 + t2405 * t2728 - t2408 * t2737 + t2409 * t2730 - t2412 * t2738 + t2413 * t2732) * t3150 + (t2412 * t2769 + t2413 * t2768 + t2425 * t2637 + t2408 * t2767 + t2409 * t2766 + t2423 * t2636 + t2396 * t2761 + t2397 * t2760 + t2417 * t2633 + t2400 * t2763 + t2401 * t2762 + t2419 * t2634 + t2404 * t2765 + t2405 * t2764 + t2421 * t2635 + t2392 * t2759 + t2393 * t2758 + t2415 * t2632) * t3149 + (t2408 * t2648 + t2409 * t2649 + t2423 * t2628 + t2412 * t2650 + t2413 * t2651 + t2425 * t2629 + t2392 * t2640 + t2393 * t2641 + t2415 * t2624 + t2396 * t2642 + t2397 * t2643 + t2417 * t2625 + t2400 * t2644 + t2401 * t2645 + t2419 * t2626 + t2404 * t2646 + t2405 * t2647 + t2421 * t2627) * t3148 + ((-t2713 * t3098 - t2800 * t3371 - t2801 * t3373 - t2940 * t2955) * t3148 - t2713 * t3150 + (-t2940 * t3366 - t3506) * t3149) * m(4) + (t2665 * t3561 + t2663 * t3562 + t2661 * t3563 + t2658 * t3564 + t2656 * t3565 + t2654 * t3566 + t2389 * t3543 + t2388 * t3544 + t2387 * t3545 + t2385 * t3547 + t2386 * t3546 + t2384 * t3548 + (-t2654 * t3299 - t2656 * t3298 - t2658 * t3297 - t2661 * t3296 - t2663 * t3295 - t2665 * t3294 + (-t3543 * t3549 - t3544 * t3551 - t3545 * t3553 - t3546 * t3555 - t3547 * t3557 - t3548 * t3559) * t3108) * m(3)) * t3103; t2372 * t3493 + t2373 * t3492 + t2374 * t3491 + t2378 * t3490 + t2379 * t3489 + t2380 * t3488 + t3638 * t3293 + t3637 * t3292 + t3636 * t3291 + t3635 * t3287 + t3634 * t3286 + t3633 * t3285 + t3644 * t2653 * t3474 + t3643 * t2655 * t3472 + t3642 * t2657 * t3470 + t3641 * t2660 * t3468 + t3640 * t2662 * t3466 + t3639 * t2664 * t3464 + (m(4) * t2714 - t2390 * t2733 + t2391 * t2722 - t2394 * t2734 + t2395 * t2724 - t2398 * t2735 + t2399 * t2726 - t2402 * t2736 + t2403 * t2728 - t2406 * t2737 + t2407 * t2730 - t2410 * t2738 + t2411 * t2732) * t3150 + (t2410 * t2769 + t2411 * t2768 + t2424 * t2637 + t2406 * t2767 + t2407 * t2766 + t2422 * t2636 + t2394 * t2761 + t2395 * t2760 + t2416 * t2633 + t2398 * t2763 + t2399 * t2762 + t2418 * t2634 + t2402 * t2765 + t2403 * t2764 + t2420 * t2635 + t2390 * t2759 + t2391 * t2758 + t2414 * t2632 + (t2801 * t3102 - t2940 * t3375) * m(4)) * t3149 + ((t2714 * t3098 + t2940 * t2956 + (-t2786 * t3149 - t3506) * t3101) * m(4) + t2406 * t2648 + t2407 * t2649 + t2422 * t2628 + t2410 * t2650 + t2411 * t2651 + t2424 * t2629 + t2390 * t2640 + t2391 * t2641 + t2414 * t2624 + t2394 * t2642 + t2395 * t2643 + t2416 * t2625 + t2398 * t2644 + t2399 * t2645 + t2418 * t2626 + t2402 * t2646 + t2403 * t2647 + t2420 * t2627) * t3148; t2667 * t2372 + t2668 * t2373 + t2669 * t2374 + t2670 * t2378 + t2671 * t2379 + t2672 * t2380 + t3639 * t2566 + t3640 * t2565 + t3641 * t2564 + t3642 * t2563 + t3643 * t2562 + t3644 * t2561 + t3633 * t2503 + t3634 * t2502 + t3635 * t2501 + t3636 * t2500 + t3637 * t2499 + t3638 * t2498 + (-t2318 * t2733 + t2319 * t2722 - t2320 * t2734 + t2321 * t2724 - t2322 * t2735 + t2323 * t2726 - t2324 * t2736 + t2325 * t2728 - t2326 * t2737 + t2327 * t2730 - t2328 * t2738 + t2329 * t2732 + t2694) * t3150 + (t2328 * t2769 + t2329 * t2768 + t2335 * t2637 + t2320 * t2761 + t2321 * t2760 + t2331 * t2633 + t2322 * t2763 + t2323 * t2762 + t2332 * t2634 + t2324 * t2765 + t2325 * t2764 + t2333 * t2635 + t2326 * t2767 + t2327 * t2766 + t2334 * t2636 + t2318 * t2759 + t2319 * t2758 + t2330 * t2632 + (t2693 * t3150 + t2630) * t3102 + (-t2692 * t3150 + t2631) * t3099) * t3149 + (t2692 * t2956 + t2693 * t2955 + t2694 * t3098 + (-t2630 * t3099 + t2631 * t3102 + (t2864 * t3059 + t2954 * t3677 + t3567) * t3149) * t3101 + t2326 * t2648 + t2327 * t2649 + t2334 * t2628 + t2328 * t2650 + t2329 * t2651 + t2335 * t2629 + t2318 * t2640 + t2319 * t2641 + t2330 * t2624 + t2320 * t2642 + t2321 * t2643 + t2331 * t2625 + t2322 * t2644 + t2323 * t2645 + t2332 * t2626 + t2324 * t2646 + t2325 * t2647 + t2333 * t2627) * t3148; t2685 * t2374 + t2687 * t2378 + t2689 * t2379 + t2691 * t2380 + t2587 * t2381 + t2589 * t2382 + t2591 * t2383 + t2585 * t2377 + t2581 * t2375 + t2583 * t2376 + t2681 * t2372 + t2683 * t2373 + t2549 * t2388 + t2551 * t2389 + t2545 * t2386 + t2547 * t2387 + t2541 * t2384 + t2543 * t2385 + (t2358 * t2769 + t2359 * t2768 + t2371 * t2637 + t2342 * t2761 + t2343 * t2760 + t2363 * t2633 + t2346 * t2763 + t2347 * t2762 + t2365 * t2634 + t2350 * t2765 + t2351 * t2764 + t2367 * t2635 + t2354 * t2767 + t2355 * t2766 + t2369 * t2636 + t2338 * t2759 + t2339 * t2758 + t2361 * t2632 + t2552 * t3102 + t2559 * t3099) * t3149 + (t2622 * t3098 + t2639 * t2956 + t2666 * t2955 + t2354 * t2648 + t2355 * t2649 + t2369 * t2628 + t2358 * t2650 + t2359 * t2651 + t2371 * t2629 + t2338 * t2640 + t2339 * t2641 + t2361 * t2624 + t2342 * t2642 + t2343 * t2643 + t2363 * t2625 + t2346 * t2644 + t2347 * t2645 + t2365 * t2626 + t2350 * t2646 + t2351 * t2647 + t2367 * t2627 + (-t2552 * t3099 + t2559 * t3102 + t2692 * t3149) * t3101) * t3148 + (t2622 + (-t2639 * t3099 + t2666 * t3102) * t3149 - t2350 * t2736 + t2351 * t2728 - t2354 * t2737 + t2355 * t2730 - t2358 * t2738 + t2359 * t2732 - t2342 * t2734 + t2343 * t2724 - t2346 * t2735 + t2347 * t2726 - t2338 * t2733 + t2339 * t2722) * t3150 + (-t2581 * t3560 - t2583 * t3558 - t2585 * t3556 - t2587 * t3554 - t2589 * t3552 - t2591 * t3550 + (-t2541 * t3559 - t2543 * t3557 - t2545 * t3555 - t2547 * t3553 - t2549 * t3551 - t2551 * t3549) * t3108) * m(3); t2686 * t2378 + t2688 * t2379 + t2690 * t2380 + t2588 * t2382 + t2590 * t2383 + t2584 * t2377 + t2586 * t2381 + t2580 * t2375 + t2582 * t2376 + t2680 * t2372 + t2682 * t2373 + t2684 * t2374 + t2548 * t2388 + t2550 * t2389 + t2544 * t2386 + t2546 * t2387 + t2540 * t2384 + t2542 * t2385 + (t2356 * t2769 + t2357 * t2768 + t2370 * t2637 + t2340 * t2761 + t2341 * t2760 + t2362 * t2633 + t2344 * t2763 + t2345 * t2762 + t2364 * t2634 + t2348 * t2765 + t2349 * t2764 + t2366 * t2635 + t2352 * t2767 + t2353 * t2766 + t2368 * t2636 + t2336 * t2759 + t2337 * t2758 + t2360 * t2632 + t2560 * t3102 + t2567 * t3099) * t3149 + (t2623 * t3098 + t2666 * t2956 + t2679 * t2955 + t2352 * t2648 + t2353 * t2649 + t2368 * t2628 + t2356 * t2650 + t2357 * t2651 + t2370 * t2629 + t2336 * t2640 + t2337 * t2641 + t2360 * t2624 + t2340 * t2642 + t2341 * t2643 + t2362 * t2625 + t2344 * t2644 + t2345 * t2645 + t2364 * t2626 + t2348 * t2646 + t2349 * t2647 + t2366 * t2627 + (-t2560 * t3099 + t2567 * t3102 + t2693 * t3149) * t3101) * t3148 + ((-t2666 * t3099 + t2679 * t3102) * t3149 - t2348 * t2736 + t2349 * t2728 - t2352 * t2737 + t2353 * t2730 - t2356 * t2738 + t2357 * t2732 + t2623 - t2340 * t2734 + t2341 * t2724 - t2344 * t2735 + t2345 * t2726 - t2336 * t2733 + t2337 * t2722) * t3150 + (-t2580 * t3560 - t2582 * t3558 - t2584 * t3556 - t2586 * t3554 - t2588 * t3552 - t2590 * t3550 + (-t2540 * t3559 - t2542 * t3557 - t2544 * t3555 - t2546 * t3553 - t2548 * t3551 - t2550 * t3549) * t3108) * m(3);];
taucX  = t1;
