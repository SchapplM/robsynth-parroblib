% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P6PPRRRR3V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d3,d4,theta1,theta2]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x15]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 22:25
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6PPRRRR3V2G1P1A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_regmin: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPRRRR3V2G1P1A0_gravload_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 22:06:50
% EndTime: 2019-05-16 22:08:11
% DurationCPUTime: 104.84s
% Computational Cost: add. (14937->1421), mult. (39978->2815), div. (288->13), fcn. (42810->63), ass. (0->873)
t6727 = xP(6);
t6681 = sin(t6727);
t6684 = cos(t6727);
t6736 = koppelP(6,2);
t6742 = koppelP(6,1);
t6604 = t6681 * t6736 - t6684 * t6742;
t6728 = xP(5);
t6685 = cos(t6728);
t6682 = sin(t6728);
t6730 = koppelP(6,3);
t6948 = t6682 * t6730;
t6483 = t6604 * t6685 - t6948;
t6715 = legFrame(6,2);
t6675 = cos(t6715);
t6703 = legFrame(6,1);
t6663 = cos(t6703);
t6669 = sin(t6715);
t7010 = t6663 * t6669;
t6729 = xP(4);
t6686 = cos(t6729);
t6913 = t6686 * t6742;
t6919 = t6686 * t6736;
t6683 = sin(t6729);
t6934 = t6683 * t6742;
t6940 = t6683 * t6736;
t6403 = -(t6682 * t6913 - t6940) * t6684 + t6681 * (t6682 * t6919 + t6934);
t6925 = t6685 * t6730;
t7203 = t6686 * t6925 + t6403;
t7221 = -t6483 * t7010 + t6675 * t7203;
t6651 = sin(t6703);
t7028 = t6651 * t6669;
t6391 = (t6682 * t6934 + t6919) * t6684 - (t6682 * t6940 - t6913) * t6681;
t7209 = -t6683 * t6925 + t6391;
t7220 = t6483 * t7028 + t6675 * t7209;
t6737 = koppelP(5,2);
t6743 = koppelP(5,1);
t6605 = t6681 * t6737 - t6684 * t6743;
t6731 = koppelP(5,3);
t6947 = t6682 * t6731;
t6484 = t6605 * t6685 - t6947;
t6716 = legFrame(5,2);
t6676 = cos(t6716);
t6704 = legFrame(5,1);
t6664 = cos(t6704);
t6670 = sin(t6716);
t7007 = t6664 * t6670;
t6912 = t6686 * t6743;
t6918 = t6686 * t6737;
t6933 = t6683 * t6743;
t6939 = t6683 * t6737;
t6404 = -(t6682 * t6912 - t6939) * t6684 + t6681 * (t6682 * t6918 + t6933);
t6924 = t6685 * t6731;
t7202 = t6686 * t6924 + t6404;
t7219 = -t6484 * t7007 + t6676 * t7202;
t6652 = sin(t6704);
t7025 = t6652 * t6670;
t6392 = (t6682 * t6933 + t6918) * t6684 - (t6682 * t6939 - t6912) * t6681;
t7208 = -t6683 * t6924 + t6392;
t7218 = t6484 * t7025 + t6676 * t7208;
t6738 = koppelP(4,2);
t6744 = koppelP(4,1);
t6606 = t6681 * t6738 - t6684 * t6744;
t6732 = koppelP(4,3);
t6946 = t6682 * t6732;
t6485 = t6606 * t6685 - t6946;
t6717 = legFrame(4,2);
t6677 = cos(t6717);
t6705 = legFrame(4,1);
t6665 = cos(t6705);
t6671 = sin(t6717);
t7004 = t6665 * t6671;
t6911 = t6686 * t6744;
t6917 = t6686 * t6738;
t6932 = t6683 * t6744;
t6938 = t6683 * t6738;
t6405 = -(t6682 * t6911 - t6938) * t6684 + t6681 * (t6682 * t6917 + t6932);
t6923 = t6685 * t6732;
t7201 = t6686 * t6923 + t6405;
t7217 = -t6485 * t7004 + t6677 * t7201;
t6653 = sin(t6705);
t7022 = t6653 * t6671;
t6393 = (t6682 * t6932 + t6917) * t6684 - (t6682 * t6938 - t6911) * t6681;
t7207 = -t6683 * t6923 + t6393;
t7216 = t6485 * t7022 + t6677 * t7207;
t6739 = koppelP(3,2);
t6745 = koppelP(3,1);
t6607 = t6681 * t6739 - t6684 * t6745;
t6733 = koppelP(3,3);
t6945 = t6682 * t6733;
t6486 = t6607 * t6685 - t6945;
t6718 = legFrame(3,2);
t6678 = cos(t6718);
t6706 = legFrame(3,1);
t6666 = cos(t6706);
t6672 = sin(t6718);
t7001 = t6666 * t6672;
t6910 = t6686 * t6745;
t6916 = t6686 * t6739;
t6931 = t6683 * t6745;
t6937 = t6683 * t6739;
t6406 = -(t6682 * t6910 - t6937) * t6684 + t6681 * (t6682 * t6916 + t6931);
t6922 = t6685 * t6733;
t7200 = t6686 * t6922 + t6406;
t7215 = -t6486 * t7001 + t6678 * t7200;
t6654 = sin(t6706);
t7019 = t6654 * t6672;
t6394 = (t6682 * t6931 + t6916) * t6684 - (t6682 * t6937 - t6910) * t6681;
t7206 = -t6683 * t6922 + t6394;
t7214 = t6486 * t7019 + t6678 * t7206;
t6740 = koppelP(2,2);
t6746 = koppelP(2,1);
t6608 = t6681 * t6740 - t6684 * t6746;
t6734 = koppelP(2,3);
t6944 = t6682 * t6734;
t6487 = t6608 * t6685 - t6944;
t6719 = legFrame(2,2);
t6679 = cos(t6719);
t6707 = legFrame(2,1);
t6667 = cos(t6707);
t6673 = sin(t6719);
t6998 = t6667 * t6673;
t6909 = t6686 * t6746;
t6915 = t6686 * t6740;
t6930 = t6683 * t6746;
t6936 = t6683 * t6740;
t6407 = -(t6682 * t6909 - t6936) * t6684 + t6681 * (t6682 * t6915 + t6930);
t6921 = t6685 * t6734;
t7199 = t6686 * t6921 + t6407;
t7213 = -t6487 * t6998 + t6679 * t7199;
t6655 = sin(t6707);
t7016 = t6655 * t6673;
t6395 = (t6682 * t6930 + t6915) * t6684 - (t6682 * t6936 - t6909) * t6681;
t7205 = -t6683 * t6921 + t6395;
t7212 = t6487 * t7016 + t6679 * t7205;
t6741 = koppelP(1,2);
t6747 = koppelP(1,1);
t6609 = t6681 * t6741 - t6684 * t6747;
t6735 = koppelP(1,3);
t6943 = t6682 * t6735;
t6488 = t6609 * t6685 - t6943;
t6720 = legFrame(1,2);
t6680 = cos(t6720);
t6708 = legFrame(1,1);
t6668 = cos(t6708);
t6674 = sin(t6720);
t6995 = t6668 * t6674;
t6908 = t6686 * t6747;
t6914 = t6686 * t6741;
t6929 = t6683 * t6747;
t6935 = t6683 * t6741;
t6408 = -(t6682 * t6908 - t6935) * t6684 + t6681 * (t6682 * t6914 + t6929);
t6920 = t6685 * t6735;
t7198 = t6686 * t6920 + t6408;
t7211 = -t6488 * t6995 + t6680 * t7198;
t6656 = sin(t6708);
t7013 = t6656 * t6674;
t6396 = (t6682 * t6929 + t6914) * t6684 - (t6682 * t6935 - t6908) * t6681;
t7204 = -t6683 * t6920 + t6396;
t7210 = t6488 * t7013 + t6680 * t7204;
t6688 = sin(pkin(10));
t6689 = sin(pkin(9));
t6694 = cos(pkin(9));
t6695 = cos(pkin(5));
t6693 = cos(pkin(10));
t6696 = cos(pkin(4));
t6902 = t6693 * t6696;
t6691 = sin(pkin(5));
t6692 = sin(pkin(4));
t6904 = t6691 * t6692;
t6467 = (t6688 * t6694 + t6689 * t6902) * t6695 - t6689 * t6904;
t6901 = t6694 * t6696;
t6468 = (t6688 * t6689 - t6693 * t6901) * t6695 + t6694 * t6904;
t6700 = legFrame(3,3);
t6648 = sin(t6700);
t6660 = cos(t6700);
t7197 = t6467 * t6648 + t6468 * t6660;
t6701 = legFrame(2,3);
t6649 = sin(t6701);
t6661 = cos(t6701);
t7196 = t6467 * t6649 + t6468 * t6661;
t6702 = legFrame(1,3);
t6650 = sin(t6702);
t6662 = cos(t6702);
t7195 = t6467 * t6650 + t6468 * t6662;
t6480 = g(1) * t6672 + (-g(2) * t6654 + g(3) * t6666) * t6678;
t6642 = t6689 * g(3);
t6643 = t6694 * g(3);
t6644 = t6694 * g(2);
t6721 = sin(qJ(3,3));
t6724 = cos(qJ(3,3));
t6906 = t6688 * t6695;
t6973 = t6672 * t6694;
t6976 = t6672 * t6689;
t7148 = g(2) * t6689;
t7150 = g(1) * t6694;
t7151 = g(1) * t6689;
t7152 = pkin(8) * sin(pkin(6));
t7194 = ((((g(3) * t6976 + t6644) * t6660 + t6648 * (g(3) * t6973 - t7148)) * t6666 + ((-g(2) * t6976 + t6643) * t6654 - t6678 * t7151) * t6660 - ((g(2) * t6973 + t6642) * t6654 + t6678 * t7150) * t6648) * t6692 - t6480 * t6696) / ((-t6693 * t6724 + t6721 * t6906) * t7152 + pkin(3) * (t6693 * t6721 + t6724 * t6906));
t6481 = g(1) * t6673 + (-g(2) * t6655 + g(3) * t6667) * t6679;
t6722 = sin(qJ(3,2));
t6725 = cos(qJ(3,2));
t6969 = t6673 * t6694;
t6971 = t6673 * t6689;
t7193 = ((((g(3) * t6971 + t6644) * t6661 + t6649 * (g(3) * t6969 - t7148)) * t6667 + ((-g(2) * t6971 + t6643) * t6655 - t6679 * t7151) * t6661 - t6649 * ((g(2) * t6969 + t6642) * t6655 + t6679 * t7150)) * t6692 - t6481 * t6696) / ((-t6693 * t6725 + t6722 * t6906) * t7152 + pkin(3) * (t6693 * t6722 + t6725 * t6906));
t6482 = g(1) * t6674 + (-g(2) * t6656 + g(3) * t6668) * t6680;
t6723 = sin(qJ(3,1));
t6726 = cos(qJ(3,1));
t6964 = t6674 * t6694;
t6967 = t6674 * t6689;
t7192 = ((((g(3) * t6967 + t6644) * t6662 + t6650 * (g(3) * t6964 - t7148)) * t6668 + ((-g(2) * t6967 + t6643) * t6656 - t6680 * t7151) * t6662 - ((g(2) * t6964 + t6642) * t6656 + t6680 * t7150) * t6650) * t6692 - t6482 * t6696) / ((-t6693 * t6726 + t6723 * t6906) * t7152 + pkin(3) * (t6693 * t6723 + t6726 * t6906));
t7191 = t6483 * t6692;
t7190 = t6484 * t6692;
t7189 = t6485 * t6692;
t7188 = t6486 * t6692;
t7187 = t6487 * t6692;
t7186 = t6488 * t6692;
t6697 = legFrame(6,3);
t6645 = sin(t6697);
t6657 = cos(t6697);
t6589 = t6645 * t6694 + t6657 * t6689;
t7185 = t6589 * t6696;
t6698 = legFrame(5,3);
t6646 = sin(t6698);
t6658 = cos(t6698);
t6590 = t6646 * t6694 + t6658 * t6689;
t7184 = t6590 * t6696;
t6699 = legFrame(4,3);
t6647 = sin(t6699);
t6659 = cos(t6699);
t6591 = t6647 * t6694 + t6659 * t6689;
t7183 = t6591 * t6696;
t6592 = t6648 * t6694 + t6660 * t6689;
t7182 = t6592 * t6696;
t6593 = t6649 * t6694 + t6661 * t6689;
t7181 = t6593 * t6696;
t6594 = t6650 * t6694 + t6662 * t6689;
t7180 = t6594 * t6696;
t6581 = t6695 * t6902 - t6904;
t6454 = t6581 * t6689 + t6694 * t6906;
t6469 = t6581 * t6694 - t6689 * t6906;
t6307 = t6454 * t6662 + t6469 * t6650;
t6313 = -t6454 * t6650 + t6469 * t6662;
t7167 = t6307 * t6668 + t6313 * t7013;
t6306 = t6454 * t6661 + t6469 * t6649;
t6312 = -t6454 * t6649 + t6469 * t6661;
t7166 = t6306 * t6667 + t6312 * t7016;
t6305 = t6454 * t6660 + t6469 * t6648;
t6311 = -t6454 * t6648 + t6469 * t6660;
t7165 = t6305 * t6666 + t6311 * t7019;
t6471 = t6604 * t6682 + t6925;
t6610 = t6681 * t6742 + t6684 * t6736;
t6991 = t6669 * t6689;
t6337 = t6471 * t6991 + t6610 * t6694;
t6988 = t6669 * t6694;
t6349 = t6471 * t6988 - t6610 * t6689;
t6242 = t6337 * t6645 - t6349 * t6657;
t6343 = t6471 * t6694 - t6610 * t6991;
t6355 = t6471 * t6689 + t6610 * t6988;
t6248 = t6343 * t6645 + t6355 * t6657;
t7164 = t6663 * (t6242 * t6683 + t6248 * t6686) - (t6242 * t6686 - t6248 * t6683) * t6651;
t6472 = t6605 * t6682 + t6924;
t6611 = t6681 * t6743 + t6684 * t6737;
t6986 = t6670 * t6689;
t6338 = t6472 * t6986 + t6611 * t6694;
t6983 = t6670 * t6694;
t6350 = t6472 * t6983 - t6611 * t6689;
t6243 = t6338 * t6646 - t6350 * t6658;
t6344 = t6472 * t6694 - t6611 * t6986;
t6356 = t6472 * t6689 + t6611 * t6983;
t6249 = t6344 * t6646 + t6356 * t6658;
t7163 = t6664 * (t6243 * t6683 + t6249 * t6686) - (t6243 * t6686 - t6249 * t6683) * t6652;
t6473 = t6606 * t6682 + t6923;
t6612 = t6681 * t6744 + t6684 * t6738;
t6981 = t6671 * t6689;
t6339 = t6473 * t6981 + t6612 * t6694;
t6978 = t6671 * t6694;
t6351 = t6473 * t6978 - t6612 * t6689;
t6244 = t6339 * t6647 - t6351 * t6659;
t6345 = t6473 * t6694 - t6612 * t6981;
t6357 = t6473 * t6689 + t6612 * t6978;
t6250 = t6345 * t6647 + t6357 * t6659;
t7162 = t6665 * (t6244 * t6683 + t6250 * t6686) - (t6244 * t6686 - t6250 * t6683) * t6653;
t6474 = t6607 * t6682 + t6922;
t6613 = t6681 * t6745 + t6684 * t6739;
t6340 = t6474 * t6976 + t6613 * t6694;
t6352 = t6474 * t6973 - t6613 * t6689;
t6245 = t6340 * t6648 - t6352 * t6660;
t6346 = t6474 * t6694 - t6613 * t6976;
t6358 = t6474 * t6689 + t6613 * t6973;
t6251 = t6346 * t6648 + t6358 * t6660;
t7161 = t6666 * (t6245 * t6683 + t6251 * t6686) - (t6245 * t6686 - t6251 * t6683) * t6654;
t6475 = t6608 * t6682 + t6921;
t6614 = t6681 * t6746 + t6684 * t6740;
t6341 = t6475 * t6971 + t6614 * t6694;
t6353 = t6475 * t6969 - t6614 * t6689;
t6246 = t6341 * t6649 - t6353 * t6661;
t6347 = t6475 * t6694 - t6614 * t6971;
t6359 = t6475 * t6689 + t6614 * t6969;
t6252 = t6347 * t6649 + t6359 * t6661;
t7160 = t6667 * (t6246 * t6683 + t6252 * t6686) - (t6246 * t6686 - t6252 * t6683) * t6655;
t6476 = t6609 * t6682 + t6920;
t6615 = t6681 * t6747 + t6684 * t6741;
t6342 = t6476 * t6967 + t6615 * t6694;
t6354 = t6476 * t6964 - t6615 * t6689;
t6247 = t6342 * t6650 - t6354 * t6662;
t6348 = t6476 * t6694 - t6615 * t6967;
t6360 = t6476 * t6689 + t6615 * t6964;
t6253 = t6348 * t6650 + t6360 * t6662;
t7159 = t6668 * (t6247 * t6683 + t6253 * t6686) - (t6247 * t6686 - t6253 * t6683) * t6656;
t6635 = g(2) * t6906;
t6899 = g(3) * t6906;
t7058 = t6581 * t6675;
t7064 = t6581 * t6669;
t6290 = g(1) * t7058 - (g(3) * t7064 - t6635) * t6663 + (g(2) * t7064 + t6899) * t6651;
t6544 = g(3) * t6581;
t6846 = t6675 * t6906;
t6870 = t6669 * t6906;
t7149 = g(2) * t6581;
t6296 = g(1) * t6846 - (g(3) * t6870 + t7149) * t6663 + (g(2) * t6870 - t6544) * t6651;
t6477 = g(1) * t6669 + (-g(2) * t6651 + g(3) * t6663) * t6675;
t6574 = t6692 * t6693 * t6695 + t6691 * t6696;
t7158 = t6645 * (t6290 * t6694 - t6689 * t6296) + t6657 * (t6689 * t6290 + t6296 * t6694) - t6574 * t6477;
t7057 = t6581 * t6676;
t7063 = t6581 * t6670;
t6291 = g(1) * t7057 - (g(3) * t7063 - t6635) * t6664 + (g(2) * t7063 + t6899) * t6652;
t6844 = t6676 * t6906;
t6866 = t6670 * t6906;
t6297 = g(1) * t6844 - (g(3) * t6866 + t7149) * t6664 + (g(2) * t6866 - t6544) * t6652;
t6478 = g(1) * t6670 + (-g(2) * t6652 + g(3) * t6664) * t6676;
t7157 = t6646 * (t6291 * t6694 - t6689 * t6297) + t6658 * (t6689 * t6291 + t6297 * t6694) - t6574 * t6478;
t7056 = t6581 * t6677;
t7062 = t6581 * t6671;
t6292 = g(1) * t7056 - (g(3) * t7062 - t6635) * t6665 + (g(2) * t7062 + t6899) * t6653;
t6842 = t6677 * t6906;
t6862 = t6671 * t6906;
t6298 = g(1) * t6842 - (g(3) * t6862 + t7149) * t6665 + (g(2) * t6862 - t6544) * t6653;
t6479 = g(1) * t6671 + (-g(2) * t6653 + g(3) * t6665) * t6677;
t7156 = t6647 * (t6292 * t6694 - t6689 * t6298) + t6659 * (t6689 * t6292 + t6298 * t6694) - t6574 * t6479;
t7055 = t6581 * t6678;
t7061 = t6581 * t6672;
t6293 = g(1) * t7055 - (g(3) * t7061 - t6635) * t6666 + (g(2) * t7061 + t6899) * t6654;
t6840 = t6678 * t6906;
t6858 = t6672 * t6906;
t6299 = g(1) * t6840 - (g(3) * t6858 + t7149) * t6666 + (g(2) * t6858 - t6544) * t6654;
t7155 = t6648 * (t6293 * t6694 - t6689 * t6299) + t6660 * (t6689 * t6293 + t6299 * t6694) - t6574 * t6480;
t7054 = t6581 * t6679;
t7060 = t6581 * t6673;
t6294 = g(1) * t7054 - (g(3) * t7060 - t6635) * t6667 + (g(2) * t7060 + t6899) * t6655;
t6838 = t6679 * t6906;
t6854 = t6673 * t6906;
t6300 = g(1) * t6838 - (g(3) * t6854 + t7149) * t6667 + (g(2) * t6854 - t6544) * t6655;
t7154 = t6649 * (t6294 * t6694 - t6689 * t6300) + t6661 * (t6689 * t6294 + t6300 * t6694) - t6574 * t6481;
t7053 = t6581 * t6680;
t7059 = t6581 * t6674;
t6295 = g(1) * t7053 - (g(3) * t7059 - t6635) * t6668 + (g(2) * t7059 + t6899) * t6656;
t6836 = t6680 * t6906;
t6850 = t6674 * t6906;
t6301 = g(1) * t6836 - (g(3) * t6850 + t7149) * t6668 + (g(2) * t6850 - t6544) * t6656;
t7153 = t6650 * (t6295 * t6694 - t6689 * t6301) + t6662 * (t6689 * t6295 + t6301 * t6694) - t6574 * t6482;
t7147 = g(2) * t6693;
t7146 = g(3) * t6693;
t6370 = t6474 * t6686 + t6613 * t6683;
t6376 = t6474 * t6683 - t6613 * t6686;
t6622 = pkin(3) * t6724 + t6721 * t7152;
t6625 = pkin(3) * t6721 - t6724 * t7152;
t6439 = t6622 * t6906 + t6625 * t6693;
t6436 = 0.1e1 / t6439;
t7145 = (((t6370 * t6689 - t6376 * t6973) * t6660 + t6648 * (t6370 * t6694 + t6376 * t6976)) * t6666 + ((t6370 * t6973 + t6376 * t6689) * t6660 + (-t6370 * t6976 + t6376 * t6694) * t6648) * t6654) * t6436;
t6367 = t6471 * t6686 + t6610 * t6683;
t6373 = t6471 * t6683 - t6610 * t6686;
t6709 = sin(qJ(3,6));
t6712 = cos(qJ(3,6));
t6616 = pkin(3) * t6712 + t6709 * t7152;
t6619 = pkin(3) * t6709 - t6712 * t7152;
t6433 = t6616 * t6906 + t6619 * t6693;
t6430 = 0.1e1 / t6433;
t7144 = (((t6367 * t6689 - t6373 * t6988) * t6657 + t6645 * (t6367 * t6694 + t6373 * t6991)) * t6663 + t6651 * ((t6367 * t6988 + t6373 * t6689) * t6657 + (-t6367 * t6991 + t6373 * t6694) * t6645)) * t6430;
t6368 = t6472 * t6686 + t6611 * t6683;
t6374 = t6472 * t6683 - t6611 * t6686;
t6710 = sin(qJ(3,5));
t6713 = cos(qJ(3,5));
t6617 = pkin(3) * t6713 + t6710 * t7152;
t6620 = pkin(3) * t6710 - t6713 * t7152;
t6434 = t6617 * t6906 + t6620 * t6693;
t6431 = 0.1e1 / t6434;
t7143 = (((t6368 * t6689 - t6374 * t6983) * t6658 + (t6368 * t6694 + t6374 * t6986) * t6646) * t6664 + ((t6368 * t6983 + t6374 * t6689) * t6658 + t6646 * (-t6368 * t6986 + t6374 * t6694)) * t6652) * t6431;
t6369 = t6473 * t6686 + t6612 * t6683;
t6375 = t6473 * t6683 - t6612 * t6686;
t6711 = sin(qJ(3,4));
t6714 = cos(qJ(3,4));
t6618 = pkin(3) * t6714 + t6711 * t7152;
t6621 = pkin(3) * t6711 - t6714 * t7152;
t6435 = t6618 * t6906 + t6621 * t6693;
t6432 = 0.1e1 / t6435;
t7142 = (((t6369 * t6689 - t6375 * t6978) * t6659 + (t6369 * t6694 + t6375 * t6981) * t6647) * t6665 + ((t6369 * t6978 + t6375 * t6689) * t6659 + t6647 * (-t6369 * t6981 + t6375 * t6694)) * t6653) * t6432;
t6371 = t6475 * t6686 + t6614 * t6683;
t6377 = t6475 * t6683 - t6614 * t6686;
t6623 = pkin(3) * t6725 + t6722 * t7152;
t6626 = pkin(3) * t6722 - t6725 * t7152;
t6440 = t6623 * t6906 + t6626 * t6693;
t6437 = 0.1e1 / t6440;
t7141 = (((t6371 * t6689 - t6377 * t6969) * t6661 + t6649 * (t6371 * t6694 + t6377 * t6971)) * t6667 + ((t6371 * t6969 + t6377 * t6689) * t6661 + (-t6371 * t6971 + t6377 * t6694) * t6649) * t6655) * t6437;
t6372 = t6476 * t6686 + t6615 * t6683;
t6378 = t6476 * t6683 - t6615 * t6686;
t6624 = pkin(3) * t6726 + t6723 * t7152;
t6627 = pkin(3) * t6723 - t6726 * t7152;
t6441 = t6624 * t6906 + t6627 * t6693;
t6438 = 0.1e1 / t6441;
t7140 = (((t6372 * t6689 - t6378 * t6964) * t6662 + t6650 * (t6372 * t6694 + t6378 * t6967)) * t6668 + t6656 * ((t6372 * t6964 + t6378 * t6689) * t6662 + t6650 * (-t6372 * t6967 + t6378 * t6694))) * t6438;
t7008 = t6663 * t6694;
t7009 = t6663 * t6689;
t7139 = ((t6483 * t7009 + t6694 * t7220) * t6657 - (-t6483 * t7008 + t6689 * t7220) * t6645) * t6430;
t7026 = t6651 * t6694;
t7027 = t6651 * t6689;
t7138 = ((-t6483 * t7027 - t6694 * t7221) * t6657 + (-t6483 * t7026 + t6689 * t7221) * t6645) * t6430;
t7005 = t6664 * t6694;
t7006 = t6664 * t6689;
t7137 = ((t6484 * t7006 + t6694 * t7218) * t6658 - (-t6484 * t7005 + t6689 * t7218) * t6646) * t6431;
t7023 = t6652 * t6694;
t7024 = t6652 * t6689;
t7136 = ((-t6484 * t7024 - t6694 * t7219) * t6658 + (-t6484 * t7023 + t6689 * t7219) * t6646) * t6431;
t7002 = t6665 * t6694;
t7003 = t6665 * t6689;
t7135 = ((t6485 * t7003 + t6694 * t7216) * t6659 - (-t6485 * t7002 + t6689 * t7216) * t6647) * t6432;
t7020 = t6653 * t6694;
t7021 = t6653 * t6689;
t7134 = ((-t6485 * t7021 - t6694 * t7217) * t6659 + (-t6485 * t7020 + t6689 * t7217) * t6647) * t6432;
t6999 = t6666 * t6694;
t7000 = t6666 * t6689;
t7133 = ((t6486 * t7000 + t6694 * t7214) * t6660 - (-t6486 * t6999 + t6689 * t7214) * t6648) * t6436;
t7017 = t6654 * t6694;
t7018 = t6654 * t6689;
t7132 = ((-t6486 * t7018 - t6694 * t7215) * t6660 + (-t6486 * t7017 + t6689 * t7215) * t6648) * t6436;
t6996 = t6667 * t6694;
t6997 = t6667 * t6689;
t7131 = ((t6487 * t6997 + t6694 * t7212) * t6661 - (-t6487 * t6996 + t6689 * t7212) * t6649) * t6437;
t7014 = t6655 * t6694;
t7015 = t6655 * t6689;
t7130 = ((-t6487 * t7015 - t6694 * t7213) * t6661 + (-t6487 * t7014 + t6689 * t7213) * t6649) * t6437;
t6993 = t6668 * t6694;
t6994 = t6668 * t6689;
t7129 = ((t6488 * t6994 + t6694 * t7210) * t6662 - (-t6488 * t6993 + t6689 * t7210) * t6650) * t6438;
t7011 = t6656 * t6694;
t7012 = t6656 * t6689;
t7128 = ((-t6488 * t7012 - t6694 * t7211) * t6662 + (-t6488 * t7011 + t6689 * t7211) * t6650) * t6438;
t7121 = ((((g(3) * t6991 + t6644) * t6657 + t6645 * (g(3) * t6988 - t7148)) * t6663 + ((-g(2) * t6991 + t6643) * t6651 - t6675 * t7151) * t6657 - ((g(2) * t6988 + t6642) * t6651 + t6675 * t7150) * t6645) * t6692 - t6477 * t6696) / (-(t6693 * t6712 - t6709 * t6906) * t7152 + pkin(3) * (t6693 * t6709 + t6712 * t6906));
t7120 = ((((g(3) * t6986 + t6644) * t6658 + t6646 * (g(3) * t6983 - t7148)) * t6664 + ((-g(2) * t6986 + t6643) * t6652 - t6676 * t7151) * t6658 - t6646 * ((g(2) * t6983 + t6642) * t6652 + t6676 * t7150)) * t6692 - t6478 * t6696) / (-(t6693 * t6713 - t6710 * t6906) * t7152 + pkin(3) * (t6693 * t6710 + t6713 * t6906));
t7119 = ((((g(3) * t6981 + t6644) * t6659 + t6647 * (g(3) * t6978 - t7148)) * t6665 + ((-g(2) * t6981 + t6643) * t6653 - t6677 * t7151) * t6659 - ((g(2) * t6978 + t6642) * t6653 + t6677 * t7150) * t6647) * t6692 - t6479 * t6696) / (-(t6693 * t6714 - t6711 * t6906) * t7152 + pkin(3) * (t6693 * t6711 + t6714 * t6906));
t6595 = -t6645 * t6689 + t6657 * t6694;
t7109 = (-t6589 * t6651 + t6595 * t7010) * t6430;
t6596 = -t6646 * t6689 + t6658 * t6694;
t7108 = (-t6590 * t6652 + t6596 * t7007) * t6431;
t6597 = -t6647 * t6689 + t6659 * t6694;
t7107 = (-t6591 * t6653 + t6597 * t7004) * t6432;
t6598 = -t6648 * t6689 + t6660 * t6694;
t7106 = (-t6592 * t6654 + t6598 * t7001) * t6436;
t6599 = -t6649 * t6689 + t6661 * t6694;
t7105 = (-t6593 * t6655 + t6599 * t6998) * t6437;
t6600 = -t6650 * t6689 + t6662 * t6694;
t7104 = (-t6594 * t6656 + t6600 * t6995) * t6438;
t7103 = (-t6589 * t6663 - t6595 * t7028) * t6430;
t7102 = (-t6590 * t6664 - t6596 * t7025) * t6431;
t7101 = (-t6591 * t6665 - t6597 * t7022) * t6432;
t7100 = (-t6592 * t6666 - t6598 * t7019) * t6436;
t7099 = (-t6593 * t6667 - t6599 * t7016) * t6437;
t7098 = (-t6594 * t6668 - t6600 * t7013) * t6438;
t7097 = t6454 * t6669;
t7096 = t6454 * t6670;
t7095 = t6454 * t6671;
t7094 = t6454 * t6672;
t7093 = t6454 * t6673;
t7092 = t6454 * t6674;
t7088 = t6469 * t6669;
t7087 = t6469 * t6670;
t7086 = t6469 * t6671;
t7085 = t6469 * t6672;
t7084 = t6469 * t6673;
t7083 = t6469 * t6674;
t6905 = t6688 * t6696;
t6572 = t6689 * t6905 - t6693 * t6694;
t7076 = t6572 * t6669;
t7075 = t6572 * t6670;
t7074 = t6572 * t6671;
t7073 = t6572 * t6672;
t7072 = t6572 * t6673;
t7071 = t6572 * t6674;
t6588 = t6688 * t6901 + t6689 * t6693;
t7052 = t6588 * t6669;
t7051 = t6588 * t6670;
t7050 = t6588 * t6671;
t7049 = t6588 * t6672;
t7048 = t6588 * t6673;
t7047 = t6588 * t6674;
t7046 = t6595 * t6675;
t7045 = t6596 * t6676;
t7044 = t6597 * t6677;
t7043 = t6598 * t6678;
t7042 = t6599 * t6679;
t7041 = t6600 * t6680;
t7040 = t6604 * t6696;
t7039 = t6605 * t6696;
t7038 = t6606 * t6696;
t7037 = t6607 * t6696;
t7036 = t6608 * t6696;
t7035 = t6609 * t6696;
t7034 = t6616 * t6695;
t7033 = t6617 * t6695;
t7032 = t6618 * t6695;
t7031 = t6622 * t6695;
t7030 = t6623 * t6695;
t7029 = t6624 * t6695;
t6992 = t6669 * t6688;
t6990 = t6669 * t6692;
t6989 = t6669 * t6693;
t6987 = t6670 * t6688;
t6985 = t6670 * t6692;
t6984 = t6670 * t6693;
t6982 = t6671 * t6688;
t6980 = t6671 * t6692;
t6979 = t6671 * t6693;
t6977 = t6672 * t6688;
t6975 = t6672 * t6692;
t6974 = t6672 * t6693;
t6972 = t6673 * t6688;
t6970 = t6673 * t6693;
t6968 = t6674 * t6688;
t6966 = t6674 * t6692;
t6965 = t6674 * t6693;
t6963 = t6675 * t6692;
t6962 = t6675 * t6693;
t6961 = t6676 * t6692;
t6960 = t6676 * t6693;
t6959 = t6677 * t6692;
t6958 = t6677 * t6693;
t6957 = t6678 * t6692;
t6956 = t6678 * t6693;
t6955 = t6679 * t6692;
t6954 = t6679 * t6693;
t6953 = t6680 * t6692;
t6952 = t6680 * t6693;
t6951 = t6681 * t6683;
t6950 = t6681 * t6685;
t6949 = t6681 * t6686;
t6942 = t6683 * t6684;
t6941 = t6683 * t6685;
t6928 = t6684 * t6685;
t6927 = t6684 * t6686;
t6926 = t6685 * t6686;
t6907 = t6688 * t6692;
t6903 = t6692 * t6673;
t6900 = g(2) * t6905;
t6898 = g(3) * t6905;
t6687 = 0.1e1 / t6692;
t6894 = t6430 * t6477 * t6687;
t6893 = t6430 * t7046;
t6892 = t6431 * t6478 * t6687;
t6891 = t6431 * t7045;
t6890 = t6432 * t6479 * t6687;
t6889 = t6432 * t7044;
t6888 = t6436 * t6480 * t6687;
t6887 = t6436 * t7043;
t6886 = t6437 * t6481 * t6687;
t6885 = t6437 * t7042;
t6884 = t6438 * t6482 * t6687;
t6883 = t6438 * t7041;
t6869 = t6669 * t6905;
t6868 = t6730 * t6990;
t6867 = t6669 * t6902;
t6865 = t6670 * t6905;
t6864 = t6731 * t6985;
t6863 = t6670 * t6902;
t6861 = t6671 * t6905;
t6860 = t6732 * t6980;
t6859 = t6671 * t6902;
t6857 = t6672 * t6905;
t6856 = t6733 * t6975;
t6855 = t6672 * t6902;
t6853 = t6673 * t6905;
t6852 = t6734 * t6903;
t6851 = t6673 * t6902;
t6849 = t6674 * t6905;
t6848 = t6735 * t6966;
t6847 = t6674 * t6902;
t6845 = t6675 * t6905;
t6843 = t6676 * t6905;
t6841 = t6677 * t6905;
t6839 = t6678 * t6905;
t6837 = t6679 * t6905;
t6835 = t6680 * t6905;
t6834 = t6696 * t6948;
t6833 = t6696 * t6947;
t6832 = t6696 * t6946;
t6831 = t6696 * t6945;
t6830 = t6696 * t6944;
t6829 = t6696 * t6943;
t6816 = t6651 * t6904;
t6815 = t6652 * t6904;
t6814 = t6653 * t6904;
t6813 = t6654 * t6904;
t6812 = t6655 * t6904;
t6811 = t6656 * t6904;
t6810 = t6663 * t6904;
t6809 = t6664 * t6904;
t6808 = t6665 * t6904;
t6807 = t6666 * t6904;
t6806 = t6667 * t6904;
t6805 = t6668 * t6904;
t6804 = t6645 * t6834;
t6803 = t6646 * t6833;
t6802 = t6647 * t6832;
t6801 = t6648 * t6831;
t6800 = t6649 * t6830;
t6799 = t6650 * t6829;
t6798 = t6657 * t6834;
t6797 = t6658 * t6833;
t6796 = t6659 * t6832;
t6795 = t6660 * t6831;
t6794 = t6661 * t6830;
t6793 = t6662 * t6829;
t6182 = t6471 * t6963 + (t6337 * t6657 + t6349 * t6645) * t6696;
t6218 = t6610 * t6963 + (-t6343 * t6657 + t6355 * t6645) * t6696;
t6071 = (-t6182 * t6683 + t6218 * t6686) * t6663 + t6651 * (t6182 * t6686 + t6218 * t6683);
t6183 = t6472 * t6961 + (t6338 * t6658 + t6350 * t6646) * t6696;
t6219 = t6611 * t6961 + (-t6344 * t6658 + t6356 * t6646) * t6696;
t6072 = (-t6183 * t6683 + t6219 * t6686) * t6664 + t6652 * (t6183 * t6686 + t6219 * t6683);
t6184 = t6473 * t6959 + (t6339 * t6659 + t6351 * t6647) * t6696;
t6220 = t6612 * t6959 + (-t6345 * t6659 + t6357 * t6647) * t6696;
t6073 = (-t6184 * t6683 + t6220 * t6686) * t6665 + t6653 * (t6184 * t6686 + t6220 * t6683);
t6185 = t6474 * t6957 + (t6340 * t6660 + t6352 * t6648) * t6696;
t6221 = t6613 * t6957 + (-t6346 * t6660 + t6358 * t6648) * t6696;
t6074 = (-t6185 * t6683 + t6221 * t6686) * t6666 + t6654 * (t6185 * t6686 + t6221 * t6683);
t6186 = t6475 * t6955 + (t6341 * t6661 + t6353 * t6649) * t6696;
t6222 = t6614 * t6955 + (-t6347 * t6661 + t6359 * t6649) * t6696;
t6075 = (-t6186 * t6683 + t6222 * t6686) * t6667 + t6655 * (t6186 * t6686 + t6222 * t6683);
t6187 = t6476 * t6953 + (t6342 * t6662 + t6354 * t6650) * t6696;
t6223 = t6615 * t6953 + (-t6348 * t6662 + t6360 * t6650) * t6696;
t6076 = (-t6187 * t6683 + t6223 * t6686) * t6668 + t6656 * (t6187 * t6686 + t6223 * t6683);
t6765 = -((t6076 * t6688 - t6693 * t7159) * t7029 + t6627 * (t6076 * t6693 + t6688 * t7159)) * t6884 - ((t6075 * t6688 - t6693 * t7160) * t7030 + t6626 * (t6075 * t6693 + t6688 * t7160)) * t6886 - ((t6074 * t6688 - t6693 * t7161) * t7031 + t6625 * (t6074 * t6693 + t6688 * t7161)) * t6888 - ((t6073 * t6688 - t6693 * t7162) * t7032 + t6621 * (t6073 * t6693 + t6688 * t7162)) * t6890 - ((t6072 * t6688 - t6693 * t7163) * t7033 + t6620 * (t6072 * t6693 + t6688 * t7163)) * t6892 - ((t6071 * t6688 - t6693 * t7164) * t7034 + t6619 * (t6071 * t6693 + t6688 * t7164)) * t6894;
t6520 = -t6651 * t6991 + t7008;
t6532 = t6651 * t6988 + t7009;
t6113 = (t6651 * t7191 + t7185 * t7209) * t6675 + (t6683 * t6868 + (-t6520 * t6657 + t6532 * t6645) * t7040) * t6685 + t6520 * t6798 - t6532 * t6804 - t6391 * t6990;
t6522 = -t6652 * t6986 + t7005;
t6534 = t6652 * t6983 + t7006;
t6115 = (t6652 * t7190 + t7184 * t7208) * t6676 + (t6683 * t6864 + (-t6522 * t6658 + t6534 * t6646) * t7039) * t6685 + t6522 * t6797 - t6534 * t6803 - t6392 * t6985;
t6524 = -t6653 * t6981 + t7002;
t6536 = t6653 * t6978 + t7003;
t6117 = (t6653 * t7189 + t7183 * t7207) * t6677 + (t6683 * t6860 + (-t6524 * t6659 + t6536 * t6647) * t7038) * t6685 + t6524 * t6796 - t6536 * t6802 - t6393 * t6980;
t6526 = -t6654 * t6976 + t6999;
t6538 = t6654 * t6973 + t7000;
t6119 = (t6654 * t7188 + t7182 * t7206) * t6678 + (t6683 * t6856 + (-t6526 * t6660 + t6538 * t6648) * t7037) * t6685 + t6526 * t6795 - t6538 * t6801 - t6394 * t6975;
t6528 = -t6655 * t6971 + t6996;
t6540 = t6655 * t6969 + t6997;
t6121 = (t6655 * t7187 + t7181 * t7205) * t6679 + (t6683 * t6852 + (-t6528 * t6661 + t6540 * t6649) * t7036) * t6685 + t6528 * t6794 - t6540 * t6800 - t6395 * t6903;
t6530 = -t6656 * t6967 + t6993;
t6542 = t6656 * t6964 + t6994;
t6123 = (t6656 * t7186 + t7180 * t7204) * t6680 + (t6683 * t6848 + (-t6530 * t6662 + t6542 * t6650) * t7035) * t6685 + t6530 * t6793 - t6542 * t6799 - t6396 * t6966;
t6188 = t7209 * t7046 + t6483 * (t6520 * t6645 + t6532 * t6657);
t6189 = t7208 * t7045 + t6484 * (t6522 * t6646 + t6534 * t6658);
t6190 = t7207 * t7044 + t6485 * (t6524 * t6647 + t6536 * t6659);
t6191 = t7206 * t7043 + t6486 * (t6526 * t6648 + t6538 * t6660);
t6192 = t7205 * t7042 + t6487 * (t6528 * t6649 + t6540 * t6661);
t6193 = t7204 * t7041 + t6488 * (t6530 * t6650 + t6542 * t6662);
t6764 = -((t6123 * t6688 - t6193 * t6693) * t7029 + (t6123 * t6693 + t6193 * t6688) * t6627) * t6884 - ((t6121 * t6688 - t6192 * t6693) * t7030 + (t6121 * t6693 + t6192 * t6688) * t6626) * t6886 - ((t6119 * t6688 - t6191 * t6693) * t7031 + (t6119 * t6693 + t6191 * t6688) * t6625) * t6888 - ((t6117 * t6688 - t6190 * t6693) * t7032 + (t6117 * t6693 + t6190 * t6688) * t6621) * t6890 - ((t6115 * t6688 - t6189 * t6693) * t7033 + (t6115 * t6693 + t6189 * t6688) * t6620) * t6892 - ((t6113 * t6688 - t6188 * t6693) * t7034 + (t6113 * t6693 + t6188 * t6688) * t6619) * t6894;
t6521 = t6663 * t6991 + t7026;
t6533 = t6663 * t6988 - t7027;
t6114 = (-t6663 * t7191 + t7185 * t7203) * t6675 + (-t6686 * t6868 + (-t6521 * t6657 - t6533 * t6645) * t7040) * t6685 + t6521 * t6798 + t6533 * t6804 - t6403 * t6990;
t6523 = t6664 * t6986 + t7023;
t6535 = t6664 * t6983 - t7024;
t6116 = (-t6664 * t7190 + t7184 * t7202) * t6676 + (-t6686 * t6864 + (-t6523 * t6658 - t6535 * t6646) * t7039) * t6685 + t6523 * t6797 + t6535 * t6803 - t6404 * t6985;
t6525 = t6665 * t6981 + t7020;
t6537 = t6665 * t6978 - t7021;
t6118 = (-t6665 * t7189 + t7183 * t7201) * t6677 + (-t6686 * t6860 + (-t6525 * t6659 - t6537 * t6647) * t7038) * t6685 + t6525 * t6796 + t6537 * t6802 - t6405 * t6980;
t6527 = t6666 * t6976 + t7017;
t6539 = t6666 * t6973 - t7018;
t6120 = (-t6666 * t7188 + t7182 * t7200) * t6678 + (-t6686 * t6856 + (-t6527 * t6660 - t6539 * t6648) * t7037) * t6685 + t6527 * t6795 + t6539 * t6801 - t6406 * t6975;
t6529 = t6667 * t6971 + t7014;
t6541 = t6667 * t6969 - t7015;
t6122 = (-t6667 * t7187 + t7181 * t7199) * t6679 + (-t6686 * t6852 + (-t6529 * t6661 - t6541 * t6649) * t7036) * t6685 + t6529 * t6794 + t6541 * t6800 - t6407 * t6903;
t6531 = t6668 * t6967 + t7011;
t6543 = t6668 * t6964 - t7012;
t6124 = (-t6668 * t7186 + t7180 * t7198) * t6680 + (-t6686 * t6848 + (-t6531 * t6662 - t6543 * t6650) * t7035) * t6685 + t6531 * t6793 + t6543 * t6799 - t6408 * t6966;
t6194 = t7203 * t7046 - (-t6521 * t6645 + t6533 * t6657) * t6483;
t6195 = t7202 * t7045 - (-t6523 * t6646 + t6535 * t6658) * t6484;
t6196 = t7201 * t7044 - (-t6525 * t6647 + t6537 * t6659) * t6485;
t6197 = t7200 * t7043 - (-t6527 * t6648 + t6539 * t6660) * t6486;
t6198 = t7199 * t7042 - (-t6529 * t6649 + t6541 * t6661) * t6487;
t6199 = t7198 * t7041 - (-t6531 * t6650 + t6543 * t6662) * t6488;
t6763 = -(-(t6124 * t6688 - t6199 * t6693) * t7029 - t6627 * (t6124 * t6693 + t6199 * t6688)) * t6884 - (-(t6122 * t6688 - t6198 * t6693) * t7030 - t6626 * (t6122 * t6693 + t6198 * t6688)) * t6886 - (-(t6120 * t6688 - t6197 * t6693) * t7031 - t6625 * (t6120 * t6693 + t6197 * t6688)) * t6888 - (-(t6118 * t6688 - t6196 * t6693) * t7032 - t6621 * (t6118 * t6693 + t6196 * t6688)) * t6890 - (-(t6116 * t6688 - t6195 * t6693) * t7033 - t6620 * (t6116 * t6693 + t6195 * t6688)) * t6892 - (-(t6114 * t6688 - t6194 * t6693) * t7034 - t6619 * (t6114 * t6693 + t6194 * t6688)) * t6894;
t6424 = t6669 * t7185 + t6963;
t6167 = (t6424 * t6688 - t6595 * t6989) * t7034 + t6619 * (t6424 * t6693 + t6595 * t6992);
t6425 = t6670 * t7184 + t6961;
t6168 = (t6425 * t6688 - t6596 * t6984) * t7033 + t6620 * (t6425 * t6693 + t6596 * t6987);
t6426 = t6671 * t7183 + t6959;
t6169 = (t6426 * t6688 - t6597 * t6979) * t7032 + t6621 * (t6426 * t6693 + t6597 * t6982);
t6427 = t6672 * t7182 + t6957;
t6170 = (t6427 * t6688 - t6598 * t6974) * t7031 + t6625 * (t6427 * t6693 + t6598 * t6977);
t6428 = t6673 * t7181 + t6955;
t6171 = (t6428 * t6688 - t6599 * t6970) * t7030 + t6626 * (t6428 * t6693 + t6599 * t6972);
t6429 = t6674 * t7180 + t6953;
t6172 = (t6429 * t6688 - t6600 * t6965) * t7029 + t6627 * (t6429 * t6693 + t6600 * t6968);
t6236 = (t6589 * t6693 + t6595 * t6905) * t7034 + (-t6589 * t6688 + t6595 * t6902) * t6619;
t6237 = (t6590 * t6693 + t6596 * t6905) * t7033 + (-t6590 * t6688 + t6596 * t6902) * t6620;
t6238 = (t6591 * t6693 + t6597 * t6905) * t7032 + (-t6591 * t6688 + t6597 * t6902) * t6621;
t6239 = (t6592 * t6693 + t6598 * t6905) * t7031 + (-t6592 * t6688 + t6598 * t6902) * t6625;
t6240 = (t6593 * t6693 + t6599 * t6905) * t7030 + (-t6593 * t6688 + t6599 * t6902) * t6626;
t6241 = (t6594 * t6693 + t6600 * t6905) * t7029 + (-t6594 * t6688 + t6600 * t6902) * t6627;
t6762 = -(t6172 * t6668 + t6241 * t6656) * t6884 - (t6171 * t6667 + t6240 * t6655) * t6886 - (t6170 * t6666 + t6239 * t6654) * t6888 - (t6169 * t6665 + t6238 * t6653) * t6890 - (t6168 * t6664 + t6237 * t6652) * t6892 - (t6167 * t6663 + t6236 * t6651) * t6894;
t6761 = -(-t6172 * t6656 + t6241 * t6668) * t6884 - (-t6171 * t6655 + t6240 * t6667) * t6886 - (-t6170 * t6654 + t6239 * t6666) * t6888 - (-t6169 * t6653 + t6238 * t6665) * t6890 - (-t6168 * t6652 + t6237 * t6664) * t6892 - (-t6167 * t6651 + t6236 * t6663) * t6894;
t6760 = -((-(t6594 * t6905 - t6600 * t6693) * t7029 - t6627 * (t6594 * t6902 + t6600 * t6688)) * t6680 + t6441 * t6966) * t6884 - ((-(t6593 * t6905 - t6599 * t6693) * t7030 - t6626 * (t6593 * t6902 + t6599 * t6688)) * t6679 + t6440 * t6903) * t6886 - ((-(t6592 * t6905 - t6598 * t6693) * t7031 - t6625 * (t6592 * t6902 + t6598 * t6688)) * t6678 + t6439 * t6975) * t6888 - ((-(t6591 * t6905 - t6597 * t6693) * t7032 - t6621 * (t6591 * t6902 + t6597 * t6688)) * t6677 + t6435 * t6980) * t6890 - ((-(t6590 * t6905 - t6596 * t6693) * t7033 - t6620 * (t6590 * t6902 + t6596 * t6688)) * t6676 + t6434 * t6985) * t6892 - ((-(t6589 * t6905 - t6595 * t6693) * t7034 - t6619 * (t6589 * t6902 + t6595 * t6688)) * t6675 + t6433 * t6990) * t6894;
t6753 = g(1) * t6962 + (g(2) * t6989 + t6898) * t6651 + (-g(3) * t6989 + t6900) * t6663;
t6752 = g(1) * t6960 + (g(2) * t6984 + t6898) * t6652 + (-g(3) * t6984 + t6900) * t6664;
t6751 = g(1) * t6958 + (g(2) * t6979 + t6898) * t6653 + (-g(3) * t6979 + t6900) * t6665;
t6750 = g(1) * t6956 + (g(2) * t6974 + t6898) * t6654 + (-g(3) * t6974 + t6900) * t6666;
t6749 = g(1) * t6954 + (g(2) * t6970 + t6898) * t6655 + (-g(3) * t6970 + t6900) * t6667;
t6748 = g(1) * t6952 + (g(2) * t6965 + t6898) * t6656 + (-g(3) * t6965 + t6900) * t6668;
t6519 = -t6682 * t6927 + t6951;
t6518 = t6682 * t6949 + t6942;
t6517 = t6682 * t6942 + t6949;
t6516 = -t6682 * t6951 + t6927;
t6495 = g(1) * t6682 - g(2) * t6941 + g(3) * t6926;
t6414 = -t6572 * t6650 + t6588 * t6662;
t6413 = -t6572 * t6649 + t6588 * t6661;
t6412 = -t6572 * t6648 + t6588 * t6660;
t6411 = -t6572 * t6647 + t6588 * t6659;
t6410 = -t6572 * t6646 + t6588 * t6658;
t6409 = -t6572 * t6645 + t6588 * t6657;
t6402 = t6572 * t6662 + t6588 * t6650;
t6401 = t6572 * t6661 + t6588 * t6649;
t6400 = t6572 * t6660 + t6588 * t6648;
t6399 = t6572 * t6659 + t6588 * t6647;
t6398 = t6572 * t6658 + t6588 * t6646;
t6397 = t6572 * t6657 + t6588 * t6645;
t6324 = g(1) * t6928 + g(2) * t6517 + g(3) * t6519;
t6323 = g(1) * t6950 - t6516 * g(2) - t6518 * g(3);
t6322 = (-g(3) * t6849 - t7147) * t6668 + (g(2) * t6849 - t7146) * t6656 + g(1) * t6835;
t6321 = (-g(3) * t6853 - t7147) * t6667 + (g(2) * t6853 - t7146) * t6655 + g(1) * t6837;
t6320 = (-g(3) * t6857 - t7147) * t6666 + (g(2) * t6857 - t7146) * t6654 + g(1) * t6839;
t6319 = (-g(3) * t6861 - t7147) * t6665 + (g(2) * t6861 - t7146) * t6653 + g(1) * t6841;
t6318 = (-g(3) * t6865 - t7147) * t6664 + (g(2) * t6865 - t7146) * t6652 + g(1) * t6843;
t6317 = (-g(3) * t6869 - t7147) * t6663 + (g(2) * t6869 - t7146) * t6651 + g(1) * t6845;
t6316 = -t6467 * t6647 - t6468 * t6659;
t6315 = -t6467 * t6646 - t6468 * t6658;
t6314 = -t6467 * t6645 - t6468 * t6657;
t6310 = -t6454 * t6647 + t6469 * t6659;
t6309 = -t6454 * t6646 + t6469 * t6658;
t6308 = -t6454 * t6645 + t6469 * t6657;
t6304 = t6454 * t6659 + t6469 * t6647;
t6303 = t6454 * t6658 + t6469 * t6646;
t6302 = t6454 * t6657 + t6469 * t6645;
t6289 = t6402 * t6668 + t6414 * t7013;
t6288 = t6401 * t6667 + t6413 * t7016;
t6287 = t6400 * t6666 + t6412 * t7019;
t6286 = t6399 * t6665 + t6411 * t7022;
t6285 = t6398 * t6664 + t6410 * t7025;
t6284 = t6397 * t6663 + t6409 * t7028;
t6283 = -t6402 * t6656 + t6414 * t6995;
t6282 = -t6401 * t6655 + t6413 * t6998;
t6281 = -t6400 * t6654 + t6412 * t7001;
t6280 = -t6399 * t6653 + t6411 * t7004;
t6279 = -t6398 * t6652 + t6410 * t7007;
t6278 = -t6397 * t6651 + t6409 * t7010;
t6277 = t7198 * t6952 + (t6656 * t6905 - t6668 * t6965) * t6488;
t6276 = t7204 * t6952 + t6488 * (t6656 * t6965 + t6668 * t6905);
t6275 = t7199 * t6954 + t6487 * (t6655 * t6905 - t6667 * t6970);
t6274 = t7205 * t6954 + t6487 * (t6655 * t6970 + t6667 * t6905);
t6273 = t7200 * t6956 + t6486 * (t6654 * t6905 - t6666 * t6974);
t6272 = t7206 * t6956 + t6486 * (t6654 * t6974 + t6666 * t6905);
t6271 = t7201 * t6958 + t6485 * (t6653 * t6905 - t6665 * t6979);
t6270 = t7202 * t6960 + t6484 * (t6652 * t6905 - t6664 * t6984);
t6269 = t7208 * t6960 + t6484 * (t6652 * t6984 + t6664 * t6905);
t6268 = t7203 * t6962 + t6483 * (t6651 * t6905 - t6663 * t6989);
t6267 = t7209 * t6962 + t6483 * (t6651 * t6989 + t6663 * t6905);
t6266 = t7207 * t6958 + t6485 * (t6653 * t6979 + t6665 * t6905);
t6265 = t7204 * t6835 + (t6656 * t6849 - t6668 * t6693) * t6488;
t6264 = t7205 * t6837 + t6487 * (t6655 * t6853 - t6667 * t6693);
t6263 = t7206 * t6839 + t6486 * (t6654 * t6857 - t6666 * t6693);
t6262 = t7208 * t6843 + t6484 * (t6652 * t6865 - t6664 * t6693);
t6261 = t7209 * t6845 + t6483 * (t6651 * t6869 - t6663 * t6693);
t6260 = t7198 * t6835 - t6488 * (t6656 * t6693 + t6668 * t6849);
t6259 = t7199 * t6837 - t6487 * (t6655 * t6693 + t6667 * t6853);
t6258 = t7200 * t6839 - t6486 * (t6654 * t6693 + t6666 * t6857);
t6257 = t7201 * t6841 - t6485 * (t6653 * t6693 + t6665 * t6861);
t6256 = t7202 * t6843 - (t6652 * t6693 + t6664 * t6865) * t6484;
t6255 = t7203 * t6845 - t6483 * (t6651 * t6693 + t6663 * t6869);
t6254 = t7207 * t6841 + t6485 * (t6653 * t6861 - t6665 * t6693);
t6235 = -t7204 * t6836 + ((-t6656 * t6968 + t6668 * t6902) * t6695 - t6805) * t6488;
t6234 = -t7205 * t6838 + t6487 * ((-t6655 * t6972 + t6667 * t6902) * t6695 - t6806);
t6233 = -t7206 * t6840 + t6486 * ((-t6654 * t6977 + t6666 * t6902) * t6695 - t6807);
t6232 = -t7208 * t6844 + t6484 * ((-t6652 * t6987 + t6664 * t6902) * t6695 - t6809);
t6231 = -t7209 * t6846 + t6483 * ((-t6651 * t6992 + t6663 * t6902) * t6695 - t6810);
t6230 = -t7198 * t6836 + ((t6656 * t6902 + t6668 * t6968) * t6695 - t6811) * t6488;
t6229 = -t7199 * t6838 + t6487 * ((t6655 * t6902 + t6667 * t6972) * t6695 - t6812);
t6228 = -t7200 * t6840 + t6486 * ((t6654 * t6902 + t6666 * t6977) * t6695 - t6813);
t6227 = -t7201 * t6842 + t6485 * ((t6653 * t6902 + t6665 * t6982) * t6695 - t6814);
t6226 = -t7207 * t6842 + t6485 * ((-t6653 * t6982 + t6665 * t6902) * t6695 - t6808);
t6225 = -t7202 * t6844 + t6484 * ((t6652 * t6902 + t6664 * t6987) * t6695 - t6815);
t6224 = -t7203 * t6846 + t6483 * ((t6651 * t6902 + t6663 * t6992) * t6695 - t6816);
t6211 = t7198 * t7053 - ((-t6656 * t6688 + t6668 * t6847) * t6695 - t6674 * t6805) * t6488;
t6210 = t7200 * t7055 - t6486 * ((-t6654 * t6688 + t6666 * t6855) * t6695 - t6672 * t6807);
t6209 = t7206 * t7055 + t6486 * ((t6654 * t6855 + t6666 * t6688) * t6695 - t6672 * t6813);
t6208 = t7207 * t7056 + ((t6653 * t6859 + t6665 * t6688) * t6695 - t6671 * t6814) * t6485;
t6207 = t7202 * t7057 - ((-t6652 * t6688 + t6664 * t6863) * t6695 - t6670 * t6809) * t6484;
t6206 = t7203 * t7058 - t6483 * ((-t6651 * t6688 + t6663 * t6867) * t6695 - t6669 * t6810);
t6205 = t7204 * t7053 + ((t6656 * t6847 + t6668 * t6688) * t6695 - t6674 * t6811) * t6488;
t6204 = t7199 * t7054 - t6487 * ((-t6655 * t6688 + t6667 * t6851) * t6695 - t6673 * t6806);
t6203 = t7205 * t7054 + ((t6655 * t6851 + t6667 * t6688) * t6695 - t6673 * t6812) * t6487;
t6202 = t7201 * t7056 - t6485 * ((-t6653 * t6688 + t6665 * t6859) * t6695 - t6671 * t6808);
t6201 = t7208 * t7057 + ((t6652 * t6863 + t6664 * t6688) * t6695 - t6670 * t6815) * t6484;
t6200 = t7209 * t7058 + t6483 * ((t6651 * t6867 + t6663 * t6688) * t6695 - t6669 * t6816);
t6181 = t6304 * t6665 + t6310 * t7022;
t6180 = t6303 * t6664 + t6309 * t7025;
t6179 = t6302 * t6663 + t6308 * t7028;
t6178 = -t6307 * t6656 + t6313 * t6995;
t6177 = -t6306 * t6655 + t6312 * t6998;
t6176 = -t6305 * t6654 + t6311 * t7001;
t6175 = -t6304 * t6653 + t6310 * t7004;
t6174 = -t6303 * t6652 + t6309 * t7007;
t6173 = -t6302 * t6651 + t6308 * t7010;
t6142 = (t6689 * t6322 - t6694 * t6748) * t6662 + (t6322 * t6694 + t6689 * t6748) * t6650 - t6482 * t6907;
t6141 = (t6689 * t6321 - t6694 * t6749) * t6661 + (t6321 * t6694 + t6689 * t6749) * t6649 - t6481 * t6907;
t6140 = (t6689 * t6320 - t6694 * t6750) * t6660 + (t6320 * t6694 + t6689 * t6750) * t6648 - t6480 * t6907;
t6139 = (t6689 * t6319 - t6694 * t6751) * t6659 + (t6319 * t6694 + t6689 * t6751) * t6647 - t6479 * t6907;
t6138 = (t6689 * t6318 - t6694 * t6752) * t6658 + (t6318 * t6694 + t6689 * t6752) * t6646 - t6478 * t6907;
t6137 = (t6689 * t6317 - t6694 * t6753) * t6657 + (t6317 * t6694 + t6689 * t6753) * t6645 - t6477 * t6907;
t6112 = (t6265 * t6694 + t6276 * t6689) * t6662 + (-t6265 * t6689 + t6276 * t6694) * t6650;
t6111 = (t6264 * t6694 + t6274 * t6689) * t6661 + (-t6264 * t6689 + t6274 * t6694) * t6649;
t6110 = (t6263 * t6694 + t6272 * t6689) * t6660 + (-t6263 * t6689 + t6272 * t6694) * t6648;
t6109 = (t6262 * t6694 + t6269 * t6689) * t6658 + (-t6262 * t6689 + t6269 * t6694) * t6646;
t6108 = (t6261 * t6694 + t6267 * t6689) * t6657 + (-t6261 * t6689 + t6267 * t6694) * t6645;
t6107 = (t6260 * t6694 + t6277 * t6689) * t6662 + (-t6260 * t6689 + t6277 * t6694) * t6650;
t6106 = (t6259 * t6694 + t6275 * t6689) * t6661 + t6649 * (-t6259 * t6689 + t6275 * t6694);
t6105 = (t6258 * t6694 + t6273 * t6689) * t6660 + t6648 * (-t6258 * t6689 + t6273 * t6694);
t6104 = (t6257 * t6694 + t6271 * t6689) * t6659 + t6647 * (-t6257 * t6689 + t6271 * t6694);
t6103 = (t6256 * t6694 + t6270 * t6689) * t6658 + t6646 * (-t6256 * t6689 + t6270 * t6694);
t6102 = (t6255 * t6694 + t6268 * t6689) * t6657 + (-t6255 * t6689 + t6268 * t6694) * t6645;
t6101 = (t6254 * t6694 + t6266 * t6689) * t6659 + (-t6254 * t6689 + t6266 * t6694) * t6647;
t6094 = (t6211 * t6694 + t6230 * t6689) * t6662 + (-t6211 * t6689 + t6230 * t6694) * t6650;
t6093 = (t6210 * t6694 + t6228 * t6689) * t6660 + t6648 * (-t6210 * t6689 + t6228 * t6694);
t6092 = (t6209 * t6694 + t6233 * t6689) * t6660 + (-t6209 * t6689 + t6233 * t6694) * t6648;
t6091 = (t6208 * t6694 + t6226 * t6689) * t6659 + (-t6208 * t6689 + t6226 * t6694) * t6647;
t6090 = (t6207 * t6694 + t6225 * t6689) * t6658 + (-t6207 * t6689 + t6225 * t6694) * t6646;
t6089 = (t6206 * t6694 + t6224 * t6689) * t6657 + (-t6206 * t6689 + t6224 * t6694) * t6645;
t6088 = (t6205 * t6694 + t6235 * t6689) * t6662 + (-t6205 * t6689 + t6235 * t6694) * t6650;
t6087 = (t6204 * t6694 + t6229 * t6689) * t6661 + t6649 * (-t6204 * t6689 + t6229 * t6694);
t6086 = (t6203 * t6694 + t6234 * t6689) * t6661 + (-t6203 * t6689 + t6234 * t6694) * t6649;
t6085 = (t6202 * t6694 + t6227 * t6689) * t6659 + (-t6202 * t6689 + t6227 * t6694) * t6647;
t6084 = (t6201 * t6694 + t6232 * t6689) * t6658 + (-t6201 * t6689 + t6232 * t6694) * t6646;
t6083 = (t6200 * t6694 + t6231 * t6689) * t6657 + (-t6200 * t6689 + t6231 * t6694) * t6645;
t6082 = ((t6372 * t6572 - t6378 * t7047) * t6662 + t6650 * (t6372 * t6588 + t6378 * t7071)) * t6668 - ((-t6372 * t7047 - t6378 * t6572) * t6662 + (t6372 * t7071 - t6378 * t6588) * t6650) * t6656;
t6081 = ((t6371 * t6572 - t6377 * t7048) * t6661 + t6649 * (t6371 * t6588 + t6377 * t7072)) * t6667 - t6655 * ((-t6371 * t7048 - t6377 * t6572) * t6661 + (t6371 * t7072 - t6377 * t6588) * t6649);
t6080 = ((t6370 * t6572 - t6376 * t7049) * t6660 + t6648 * (t6370 * t6588 + t6376 * t7073)) * t6666 - ((-t6370 * t7049 - t6376 * t6572) * t6660 + t6648 * (t6370 * t7073 - t6376 * t6588)) * t6654;
t6079 = ((t6368 * t6572 - t6374 * t7051) * t6658 + t6646 * (t6368 * t6588 + t6374 * t7075)) * t6664 - ((-t6368 * t7051 - t6374 * t6572) * t6658 + t6646 * (t6368 * t7075 - t6374 * t6588)) * t6652;
t6078 = ((t6367 * t6572 - t6373 * t7052) * t6657 + t6645 * (t6367 * t6588 + t6373 * t7076)) * t6663 - ((-t6367 * t7052 - t6373 * t6572) * t6657 + t6645 * (t6367 * t7076 - t6373 * t6588)) * t6651;
t6077 = ((t6369 * t6572 - t6375 * t7050) * t6659 + t6647 * (t6369 * t6588 + t6375 * t7074)) * t6665 - ((-t6369 * t7050 - t6375 * t6572) * t6659 + t6647 * (t6369 * t7074 - t6375 * t6588)) * t6653;
t6070 = ((t6369 * t6454 - t6375 * t7086) * t6659 + (t6369 * t6469 + t6375 * t7095) * t6647) * t6665 - t6653 * ((-t6369 * t7086 - t6375 * t6454) * t6659 + t6647 * (t6369 * t7095 - t6375 * t6469));
t6069 = ((t6372 * t6454 - t6378 * t7083) * t6662 + t6650 * (t6372 * t6469 + t6378 * t7092)) * t6668 - ((-t6372 * t7083 - t6378 * t6454) * t6662 + t6650 * (t6372 * t7092 - t6378 * t6469)) * t6656;
t6068 = ((t6371 * t6454 - t6377 * t7084) * t6661 + t6649 * (t6371 * t6469 + t6377 * t7093)) * t6667 - t6655 * ((-t6371 * t7084 - t6377 * t6454) * t6661 + t6649 * (t6371 * t7093 - t6377 * t6469));
t6067 = ((t6370 * t6454 - t6376 * t7085) * t6660 + t6648 * (t6370 * t6469 + t6376 * t7094)) * t6666 - ((-t6370 * t7085 - t6376 * t6454) * t6660 + t6648 * (t6370 * t7094 - t6376 * t6469)) * t6654;
t6066 = ((t6368 * t6454 - t6374 * t7087) * t6658 + t6646 * (t6368 * t6469 + t6374 * t7096)) * t6664 - ((-t6368 * t7087 - t6374 * t6454) * t6658 + t6646 * (t6368 * t7096 - t6374 * t6469)) * t6652;
t6065 = ((t6367 * t6454 - t6373 * t7088) * t6657 + t6645 * (t6367 * t6469 + t6373 * t7097)) * t6663 - ((-t6367 * t7088 - t6373 * t6454) * t6657 + t6645 * (t6367 * t7097 - t6373 * t6469)) * t6651;
t6064 = -t6723 * t6142 + t6726 * t7153;
t6063 = -t6726 * t6142 - t6723 * t7153;
t6062 = -t6141 * t6722 + t6725 * t7154;
t6061 = -t6141 * t6725 - t6722 * t7154;
t6060 = -t6721 * t6140 + t6724 * t7155;
t6059 = -t6724 * t6140 - t6721 * t7155;
t6058 = -t6139 * t6711 + t6714 * t7156;
t6057 = -t6139 * t6714 - t6711 * t7156;
t6056 = -t6138 * t6710 + t6713 * t7157;
t6055 = -t6138 * t6713 - t6710 * t7157;
t6054 = -t6137 * t6709 + t6712 * t7158;
t6053 = -t6137 * t6712 - t6709 * t7158;
t1 = [t6760, (t6680 * (-(t6414 * t6726 - t6723 * t7195) * t7152 + pkin(3) * (t6723 * t6414 + t6726 * t7195)) * t7192 + t6679 * (-(t6413 * t6725 - t6722 * t7196) * t7152 + pkin(3) * (t6722 * t6413 + t6725 * t7196)) * t7193 + t6678 * (-(t6412 * t6724 - t6721 * t7197) * t7152 + pkin(3) * (t6721 * t6412 + t6724 * t7197)) * t7194 - t6677 * ((t6316 * t6711 + t6411 * t6714) * t7152 + (t6316 * t6714 - t6411 * t6711) * pkin(3)) * t7119 - t6676 * ((t6315 * t6710 + t6410 * t6713) * t7152 + pkin(3) * (t6315 * t6713 - t6410 * t6710)) * t7120 - t6675 * ((t6314 * t6709 + t6409 * t6712) * t7152 + pkin(3) * (t6314 * t6712 - t6409 * t6709)) * t7121) * t6687 + t6760, 0, -t6054 * t6893 - t6056 * t6891 - t6058 * t6889 - t6060 * t6887 - t6062 * t6885 - t6064 * t6883, -t6053 * t6893 - t6055 * t6891 - t6057 * t6889 - t6059 * t6887 - t6061 * t6885 - t6063 * t6883, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6495 * t6682 + (-t6323 * t6681 - t6324 * t6684) * t6685; t6761, ((-(t6289 * t6726 + t6723 * t7167) * t7152 + pkin(3) * (t6723 * t6289 - t6726 * t7167)) * t7192 + (-(t6288 * t6725 + t6722 * t7166) * t7152 + pkin(3) * (t6722 * t6288 - t6725 * t7166)) * t7193 + (-(t6287 * t6724 + t6721 * t7165) * t7152 + pkin(3) * (t6721 * t6287 - t6724 * t7165)) * t7194 + (-(t6181 * t6711 + t6286 * t6714) * t7152 - pkin(3) * (t6181 * t6714 - t6286 * t6711)) * t7119 + (-(t6180 * t6710 + t6285 * t6713) * t7152 - pkin(3) * (t6180 * t6713 - t6285 * t6710)) * t7120 + (-(t6179 * t6709 + t6284 * t6712) * t7152 - pkin(3) * (t6179 * t6712 - t6284 * t6709)) * t7121) * t6687 + t6761, 0, t6054 * t7103 + t6056 * t7102 + t6058 * t7101 + t6060 * t7100 + t6062 * t7099 + t6064 * t7098, t6053 * t7103 + t6055 * t7102 + t6057 * t7101 + t6059 * t7100 + t6061 * t7099 + t6063 * t7098, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6323 * t6516 - t6324 * t6517 + t6495 * t6941; t6762, (((t6178 * t6723 + t6283 * t6726) * t7152 - (-t6178 * t6726 + t6283 * t6723) * pkin(3)) * t7192 + ((t6177 * t6722 + t6282 * t6725) * t7152 - (-t6177 * t6725 + t6282 * t6722) * pkin(3)) * t7193 + ((t6176 * t6721 + t6281 * t6724) * t7152 - (-t6176 * t6724 + t6281 * t6721) * pkin(3)) * t7194 + ((t6175 * t6711 + t6280 * t6714) * t7152 + pkin(3) * (t6175 * t6714 - t6280 * t6711)) * t7119 + ((t6174 * t6710 + t6279 * t6713) * t7152 + pkin(3) * (t6174 * t6713 - t6279 * t6710)) * t7120 + ((t6173 * t6709 + t6278 * t6712) * t7152 + pkin(3) * (t6173 * t6712 - t6278 * t6709)) * t7121) * t6687 + t6762, 0, t6054 * t7109 + t6056 * t7108 + t6058 * t7107 + t6060 * t7106 + t6062 * t7105 + t6064 * t7104, t6053 * t7109 + t6055 * t7108 + t6057 * t7107 + t6059 * t7106 + t6061 * t7105 + t6063 * t7104, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6323 * t6518 - t6324 * t6519 - t6495 * t6926; t6765, (((t6069 * t6723 + t6082 * t6726) * t7152 + pkin(3) * (t6069 * t6726 - t6082 * t6723)) * t7192 + ((t6068 * t6722 + t6081 * t6725) * t7152 + pkin(3) * (t6068 * t6725 - t6081 * t6722)) * t7193 + ((t6067 * t6721 + t6080 * t6724) * t7152 + (t6067 * t6724 - t6080 * t6721) * pkin(3)) * t7194 + ((t6070 * t6711 + t6077 * t6714) * t7152 + pkin(3) * (t6070 * t6714 - t6077 * t6711)) * t7119 + ((t6066 * t6710 + t6079 * t6713) * t7152 + pkin(3) * (t6066 * t6713 - t6079 * t6710)) * t7120 + ((t6065 * t6709 + t6078 * t6712) * t7152 + pkin(3) * (t6065 * t6712 - t6078 * t6709)) * t7121) * t6687 + t6765, 0, t6054 * t7144 + t6056 * t7143 + t6058 * t7142 + t6060 * t7145 + t6062 * t7141 + t6064 * t7140, t6053 * t7144 + t6055 * t7143 + t6057 * t7142 + t6059 * t7145 + t6061 * t7141 + t6063 * t7140, 0, 0, 0, 0, 0, 0, t6323 * t6682 - t6495 * t6950, t6324 * t6682 - t6495 * t6928, (-t6323 * t6684 + t6324 * t6681) * t6685, 0; t6763, ((-(t6094 * t6723 + t6107 * t6726) * t7152 - pkin(3) * (t6094 * t6726 - t6107 * t6723)) * t7192 + (-(t6087 * t6722 + t6106 * t6725) * t7152 - (t6087 * t6725 - t6106 * t6722) * pkin(3)) * t7193 + (-(t6093 * t6721 + t6105 * t6724) * t7152 - pkin(3) * (t6093 * t6724 - t6105 * t6721)) * t7194 + (-(t6085 * t6711 + t6104 * t6714) * t7152 - pkin(3) * (t6085 * t6714 - t6104 * t6711)) * t7119 + (-(t6090 * t6710 + t6103 * t6713) * t7152 - pkin(3) * (t6090 * t6713 - t6103 * t6710)) * t7120 + (-(t6089 * t6709 + t6102 * t6712) * t7152 - (t6089 * t6712 - t6102 * t6709) * pkin(3)) * t7121) * t6687 + t6763, 0, t6054 * t7138 + t6056 * t7136 + t6058 * t7134 + t6060 * t7132 + t6062 * t7130 + t6064 * t7128, t6053 * t7138 + t6055 * t7136 + t6057 * t7134 + t6059 * t7132 + t6061 * t7130 + t6063 * t7128, 0, 0, 0, 0, 0, 0, -t6323 * t6941 + t6495 * t6516, -t6324 * t6941 - t6495 * t6517, -t6323 * t6517 - t6324 * t6516, 0; t6764, (((t6088 * t6723 + t6112 * t6726) * t7152 + pkin(3) * (t6088 * t6726 - t6112 * t6723)) * t7192 + ((t6086 * t6722 + t6111 * t6725) * t7152 + pkin(3) * (t6086 * t6725 - t6111 * t6722)) * t7193 + ((t6092 * t6721 + t6110 * t6724) * t7152 + (t6092 * t6724 - t6110 * t6721) * pkin(3)) * t7194 + ((t6091 * t6711 + t6101 * t6714) * t7152 + pkin(3) * (t6091 * t6714 - t6101 * t6711)) * t7119 + ((t6084 * t6710 + t6109 * t6713) * t7152 + pkin(3) * (t6084 * t6713 - t6109 * t6710)) * t7120 + ((t6083 * t6709 + t6108 * t6712) * t7152 + pkin(3) * (t6083 * t6712 - t6108 * t6709)) * t7121) * t6687 + t6764, 0, t6054 * t7139 + t6056 * t7137 + t6058 * t7135 + t6060 * t7133 + t6062 * t7131 + t6064 * t7129, t6053 * t7139 + t6055 * t7137 + t6057 * t7135 + t6059 * t7133 + t6061 * t7131 + t6063 * t7129, 0, 0, 0, 0, 0, 0, t6323 * t6926 + t6495 * t6518, t6324 * t6926 - t6495 * t6519, -t6323 * t6519 - t6324 * t6518, 0;];
tau_reg  = t1;
