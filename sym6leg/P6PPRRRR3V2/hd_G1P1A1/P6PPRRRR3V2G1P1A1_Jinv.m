% Analytische Jacobi-Matrix für parallelen Roboter
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorpose und aktiven Gelenkkoordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d3,d4,theta1,theta2]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% Jinv [6x6]
%   Analytische Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 22:31
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function Jinv = P6PPRRRR3V2G1P1A1_Jinv(xP, qJ, pkin, koppelP, ...
legFrame)


%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(10,1),zeros(6,3),zeros(6,3)}
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPRRRR3V2G1P1A1_Jinv: qJ has to be [3x6] (double)');
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A1_Jinv: xP has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPRRRR3V2G1P1A1_Jinv: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPRRRR3V2G1P1A1_Jinv: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPRRRR3V2G1P1A1_Jinv: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From Jinv_para_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 22:29:23
% EndTime: 2019-05-16 22:29:29
% DurationCPUTime: 6.18s
% Computational Cost: add. (2496->462), mult. (6720->988), div. (72->7), fcn. (7116->62), ass. (0->442)
t280 = legFrame(6,1);
t229 = sin(t280);
t241 = cos(t280);
t306 = xP(4);
t261 = sin(t306);
t264 = cos(t306);
t274 = legFrame(6,3);
t223 = sin(t274);
t235 = cos(t274);
t304 = xP(6);
t259 = sin(t304);
t262 = cos(t304);
t313 = koppelP(6,2);
t319 = koppelP(6,1);
t199 = t259 * t313 - t262 * t319;
t305 = xP(5);
t260 = sin(t305);
t263 = cos(t305);
t307 = koppelP(6,3);
t381 = t263 * t307;
t127 = t199 * t260 + t381;
t205 = t259 * t319 + t262 * t313;
t271 = cos(pkin(9));
t292 = legFrame(6,2);
t247 = sin(t292);
t267 = sin(pkin(9));
t423 = t247 * t267;
t73 = t127 * t423 + t205 * t271;
t421 = t247 * t271;
t85 = t127 * t421 - t205 * t267;
t61 = t223 * t73 - t235 * t85;
t79 = t127 * t271 - t205 * t423;
t91 = t127 * t267 + t205 * t421;
t67 = t223 * t79 + t235 * t91;
t514 = t241 * (t261 * t61 + t264 * t67) - t229 * (-t261 * t67 + t264 * t61);
t281 = legFrame(5,1);
t230 = sin(t281);
t242 = cos(t281);
t275 = legFrame(5,3);
t224 = sin(t275);
t236 = cos(t275);
t314 = koppelP(5,2);
t320 = koppelP(5,1);
t200 = t259 * t314 - t262 * t320;
t308 = koppelP(5,3);
t380 = t263 * t308;
t128 = t200 * t260 + t380;
t206 = t259 * t320 + t262 * t314;
t293 = legFrame(5,2);
t248 = sin(t293);
t420 = t248 * t267;
t74 = t128 * t420 + t206 * t271;
t418 = t248 * t271;
t86 = t128 * t418 - t206 * t267;
t62 = t224 * t74 - t236 * t86;
t80 = t128 * t271 - t206 * t420;
t92 = t128 * t267 + t206 * t418;
t68 = t224 * t80 + t236 * t92;
t513 = t242 * (t261 * t62 + t264 * t68) - t230 * (-t261 * t68 + t264 * t62);
t282 = legFrame(4,1);
t231 = sin(t282);
t243 = cos(t282);
t276 = legFrame(4,3);
t225 = sin(t276);
t237 = cos(t276);
t315 = koppelP(4,2);
t321 = koppelP(4,1);
t201 = t259 * t315 - t262 * t321;
t309 = koppelP(4,3);
t379 = t263 * t309;
t129 = t201 * t260 + t379;
t207 = t259 * t321 + t262 * t315;
t294 = legFrame(4,2);
t249 = sin(t294);
t417 = t249 * t267;
t75 = t129 * t417 + t207 * t271;
t415 = t249 * t271;
t87 = t129 * t415 - t207 * t267;
t63 = t225 * t75 - t237 * t87;
t81 = t129 * t271 - t207 * t417;
t93 = t129 * t267 + t207 * t415;
t69 = t225 * t81 + t237 * t93;
t512 = t243 * (t261 * t63 + t264 * t69) - t231 * (-t261 * t69 + t264 * t63);
t283 = legFrame(3,1);
t232 = sin(t283);
t244 = cos(t283);
t277 = legFrame(3,3);
t226 = sin(t277);
t238 = cos(t277);
t316 = koppelP(3,2);
t322 = koppelP(3,1);
t202 = t259 * t316 - t262 * t322;
t310 = koppelP(3,3);
t378 = t263 * t310;
t130 = t202 * t260 + t378;
t208 = t259 * t322 + t262 * t316;
t295 = legFrame(3,2);
t250 = sin(t295);
t414 = t250 * t267;
t76 = t130 * t414 + t208 * t271;
t412 = t250 * t271;
t88 = t130 * t412 - t208 * t267;
t64 = t226 * t76 - t238 * t88;
t82 = t130 * t271 - t208 * t414;
t94 = t130 * t267 + t208 * t412;
t70 = t226 * t82 + t238 * t94;
t511 = t244 * (t261 * t64 + t264 * t70) - t232 * (-t261 * t70 + t264 * t64);
t284 = legFrame(2,1);
t233 = sin(t284);
t245 = cos(t284);
t278 = legFrame(2,3);
t227 = sin(t278);
t239 = cos(t278);
t317 = koppelP(2,2);
t323 = koppelP(2,1);
t203 = t259 * t317 - t262 * t323;
t311 = koppelP(2,3);
t377 = t263 * t311;
t131 = t203 * t260 + t377;
t209 = t259 * t323 + t262 * t317;
t296 = legFrame(2,2);
t251 = sin(t296);
t411 = t251 * t267;
t77 = t131 * t411 + t209 * t271;
t409 = t251 * t271;
t89 = t131 * t409 - t209 * t267;
t65 = t227 * t77 - t239 * t89;
t83 = t131 * t271 - t209 * t411;
t95 = t131 * t267 + t209 * t409;
t71 = t227 * t83 + t239 * t95;
t510 = t245 * (t261 * t65 + t264 * t71) - t233 * (-t261 * t71 + t264 * t65);
t285 = legFrame(1,1);
t234 = sin(t285);
t246 = cos(t285);
t279 = legFrame(1,3);
t228 = sin(t279);
t240 = cos(t279);
t318 = koppelP(1,2);
t324 = koppelP(1,1);
t204 = t259 * t318 - t262 * t324;
t312 = koppelP(1,3);
t376 = t263 * t312;
t132 = t204 * t260 + t376;
t210 = t259 * t324 + t262 * t318;
t297 = legFrame(1,2);
t252 = sin(t297);
t408 = t252 * t267;
t78 = t132 * t408 + t210 * t271;
t406 = t252 * t271;
t90 = t132 * t406 - t210 * t267;
t66 = t228 * t78 - t240 * t90;
t84 = t132 * t271 - t210 * t408;
t96 = t132 * t267 + t210 * t406;
t72 = t228 * t84 + t240 * t96;
t509 = t246 * (t261 * t66 + t264 * t72) - t234 * (-t261 * t72 + t264 * t66);
t369 = t264 * t319;
t375 = t264 * t313;
t387 = t261 * t319;
t393 = t261 * t313;
t97 = -(t260 * t393 - t369) * t259 + (t260 * t387 + t375) * t262;
t508 = -t261 * t381 + t97;
t368 = t264 * t320;
t374 = t264 * t314;
t386 = t261 * t320;
t392 = t261 * t314;
t98 = -(t260 * t392 - t368) * t259 + (t260 * t386 + t374) * t262;
t507 = -t261 * t380 + t98;
t367 = t264 * t321;
t373 = t264 * t315;
t385 = t261 * t321;
t391 = t261 * t315;
t99 = -(t260 * t391 - t367) * t259 + (t260 * t385 + t373) * t262;
t506 = -t261 * t379 + t99;
t399 = t260 * t307;
t133 = t199 * t263 - t399;
t269 = sin(pkin(4));
t505 = t133 * t269;
t398 = t260 * t308;
t134 = t200 * t263 - t398;
t504 = t134 * t269;
t397 = t260 * t309;
t135 = t201 * t263 - t397;
t503 = t135 * t269;
t396 = t260 * t310;
t136 = t202 * t263 - t396;
t502 = t136 * t269;
t395 = t260 * t311;
t137 = t203 * t263 - t395;
t501 = t137 * t269;
t394 = t260 * t312;
t138 = t204 * t263 - t394;
t500 = t138 * t269;
t187 = t223 * t271 + t235 * t267;
t273 = cos(pkin(4));
t499 = t187 * t273;
t188 = t224 * t271 + t236 * t267;
t498 = t188 * t273;
t189 = t225 * t271 + t237 * t267;
t497 = t189 * t273;
t190 = t271 * t226 + t267 * t238;
t496 = t190 * t273;
t191 = t271 * t227 + t267 * t239;
t495 = t191 * t273;
t192 = t271 * t228 + t267 * t240;
t494 = t192 * t273;
t366 = t264 * t322;
t372 = t264 * t316;
t384 = t261 * t322;
t390 = t261 * t316;
t100 = -(t260 * t390 - t366) * t259 + (t260 * t384 + t372) * t262;
t493 = -t261 * t378 + t100;
t365 = t264 * t323;
t371 = t264 * t317;
t383 = t261 * t323;
t389 = t261 * t317;
t101 = -(t260 * t389 - t365) * t259 + (t260 * t383 + t371) * t262;
t492 = -t261 * t377 + t101;
t364 = t264 * t324;
t370 = t264 * t318;
t382 = t261 * t324;
t388 = t261 * t318;
t102 = -(t260 * t388 - t364) * t259 + (t260 * t382 + t370) * t262;
t491 = -t261 * t376 + t102;
t108 = (-t260 * t364 + t388) * t262 + t259 * (t260 * t370 + t382);
t490 = t264 * t376 + t108;
t107 = (-t260 * t365 + t389) * t262 + t259 * (t260 * t371 + t383);
t489 = t264 * t377 + t107;
t106 = (-t260 * t366 + t390) * t262 + t259 * (t260 * t372 + t384);
t488 = t264 * t378 + t106;
t105 = (-t260 * t367 + t391) * t262 + t259 * (t260 * t373 + t385);
t487 = t264 * t379 + t105;
t104 = (-t260 * t368 + t392) * t262 + t259 * (t260 * t374 + t386);
t486 = t264 * t380 + t104;
t103 = (-t260 * t369 + t393) * t262 + t259 * (t260 * t375 + t387);
t485 = t264 * t381 + t103;
t478 = pkin(8) * sin(pkin(6));
t286 = sin(qJ(3,6));
t289 = cos(qJ(3,6));
t211 = pkin(3) * t289 + t286 * t478;
t214 = pkin(3) * t286 - t289 * t478;
t270 = cos(pkin(10));
t266 = sin(pkin(10));
t272 = cos(pkin(5));
t363 = t266 * t272;
t118 = t211 * t363 + t214 * t270;
t265 = 0.1e1 / t269;
t459 = 0.1e1 / t118 * t265;
t287 = sin(qJ(3,5));
t290 = cos(qJ(3,5));
t212 = pkin(3) * t290 + t287 * t478;
t215 = pkin(3) * t287 - t290 * t478;
t119 = t212 * t363 + t215 * t270;
t458 = 0.1e1 / t119 * t265;
t288 = sin(qJ(3,4));
t291 = cos(qJ(3,4));
t213 = pkin(3) * t291 + t288 * t478;
t216 = pkin(3) * t288 - t291 * t478;
t120 = t213 * t363 + t216 * t270;
t457 = 0.1e1 / t120 * t265;
t298 = sin(qJ(3,3));
t301 = cos(qJ(3,3));
t217 = pkin(3) * t301 + t298 * t478;
t220 = pkin(3) * t298 - t301 * t478;
t124 = t217 * t363 + t220 * t270;
t456 = 0.1e1 / t124 * t265;
t299 = sin(qJ(3,2));
t302 = cos(qJ(3,2));
t218 = pkin(3) * t302 + t299 * t478;
t221 = pkin(3) * t299 - t302 * t478;
t125 = t218 * t363 + t221 * t270;
t455 = 0.1e1 / t125 * t265;
t300 = sin(qJ(3,1));
t303 = cos(qJ(3,1));
t219 = pkin(3) * t303 + t300 * t478;
t222 = pkin(3) * t300 - t303 * t478;
t126 = t219 * t363 + t222 * t270;
t454 = 0.1e1 / t126 * t265;
t193 = -t223 * t267 + t235 * t271;
t253 = cos(t292);
t453 = t193 * t253;
t452 = t193 * t266;
t451 = t193 * t270;
t194 = -t224 * t267 + t236 * t271;
t254 = cos(t293);
t450 = t194 * t254;
t449 = t194 * t266;
t448 = t194 * t270;
t195 = -t225 * t267 + t237 * t271;
t255 = cos(t294);
t447 = t195 * t255;
t446 = t195 * t266;
t445 = t195 * t270;
t196 = -t226 * t267 + t238 * t271;
t256 = cos(t295);
t444 = t196 * t256;
t443 = t196 * t266;
t442 = t196 * t270;
t197 = -t227 * t267 + t239 * t271;
t257 = cos(t296);
t441 = t197 * t257;
t440 = t197 * t266;
t439 = t197 * t270;
t198 = -t228 * t267 + t240 * t271;
t258 = cos(t297);
t438 = t198 * t258;
t437 = t198 * t266;
t436 = t198 * t270;
t435 = t199 * t273;
t434 = t200 * t273;
t433 = t201 * t273;
t432 = t202 * t273;
t431 = t203 * t273;
t430 = t204 * t273;
t429 = t211 * t272;
t428 = t212 * t272;
t427 = t213 * t272;
t426 = t217 * t272;
t425 = t218 * t272;
t424 = t219 * t272;
t422 = t247 * t269;
t419 = t248 * t269;
t416 = t249 * t269;
t413 = t250 * t269;
t410 = t251 * t269;
t407 = t252 * t269;
t405 = t253 * t269;
t404 = t254 * t269;
t403 = t255 * t269;
t402 = t256 * t269;
t401 = t257 * t269;
t400 = t258 * t269;
t362 = t266 * t273;
t361 = t270 * t273;
t360 = t307 * t422;
t359 = t308 * t419;
t358 = t309 * t416;
t357 = t310 * t413;
t356 = t311 * t410;
t355 = t312 * t407;
t354 = t273 * t399;
t353 = t273 * t398;
t352 = t273 * t397;
t351 = t273 * t396;
t350 = t273 * t395;
t349 = t273 * t394;
t336 = t223 * t354;
t335 = t224 * t353;
t334 = t225 * t352;
t333 = t226 * t351;
t332 = t227 * t350;
t331 = t228 * t349;
t330 = t235 * t354;
t329 = t236 * t353;
t328 = t237 * t352;
t327 = t238 * t351;
t326 = t239 * t350;
t325 = t240 * t349;
t180 = -t234 * t267 + t246 * t406;
t179 = t234 * t406 + t246 * t267;
t178 = -t233 * t267 + t245 * t409;
t177 = t233 * t409 + t245 * t267;
t176 = -t232 * t267 + t244 * t412;
t175 = t232 * t412 + t244 * t267;
t174 = -t231 * t267 + t243 * t415;
t173 = t231 * t415 + t243 * t267;
t172 = -t230 * t267 + t242 * t418;
t171 = t230 * t418 + t242 * t267;
t170 = -t229 * t267 + t241 * t421;
t169 = t229 * t421 + t241 * t267;
t168 = t234 * t271 + t246 * t408;
t167 = -t234 * t408 + t246 * t271;
t166 = t233 * t271 + t245 * t411;
t165 = -t233 * t411 + t245 * t271;
t164 = t232 * t271 + t244 * t414;
t163 = -t232 * t414 + t244 * t271;
t162 = t231 * t271 + t243 * t417;
t161 = -t231 * t417 + t243 * t271;
t160 = t230 * t271 + t242 * t420;
t159 = -t230 * t420 + t242 * t271;
t158 = t229 * t271 + t241 * t423;
t157 = -t229 * t423 + t241 * t271;
t114 = t252 * t494 + t400;
t113 = t251 * t495 + t401;
t112 = t250 * t496 + t402;
t111 = t249 * t497 + t403;
t110 = t248 * t498 + t404;
t109 = t247 * t499 + t405;
t60 = (t192 * t270 + t198 * t362) * t424 + (-t192 * t266 + t198 * t361) * t222;
t59 = (t191 * t270 + t197 * t362) * t425 + (-t191 * t266 + t197 * t361) * t221;
t58 = (t190 * t270 + t196 * t362) * t426 + (-t190 * t266 + t196 * t361) * t220;
t57 = (t189 * t270 + t195 * t362) * t427 + (-t189 * t266 + t195 * t361) * t216;
t56 = (t188 * t270 + t194 * t362) * t428 + (-t188 * t266 + t194 * t361) * t215;
t55 = (t187 * t270 + t193 * t362) * t429 + (-t187 * t266 + t193 * t361) * t214;
t54 = t210 * t400 + (t228 * t96 - t240 * t84) * t273;
t53 = t209 * t401 + (t227 * t95 - t239 * t83) * t273;
t52 = t208 * t402 + (t226 * t94 - t238 * t82) * t273;
t51 = t207 * t403 + (t225 * t93 - t237 * t81) * t273;
t50 = t206 * t404 + (t224 * t92 - t236 * t80) * t273;
t49 = t205 * t405 + (t223 * t91 - t235 * t79) * t273;
t48 = t490 * t438 - (-t168 * t228 + t180 * t240) * t138;
t47 = t491 * t438 + (t167 * t228 + t179 * t240) * t138;
t46 = t489 * t441 - (-t166 * t227 + t178 * t239) * t137;
t45 = t492 * t441 + (t165 * t227 + t177 * t239) * t137;
t44 = t488 * t444 - (-t164 * t226 + t176 * t238) * t136;
t43 = t493 * t444 + (t163 * t226 + t175 * t238) * t136;
t42 = t487 * t447 - (-t162 * t225 + t174 * t237) * t135;
t41 = t506 * t447 + (t161 * t225 + t173 * t237) * t135;
t40 = t486 * t450 - (-t160 * t224 + t172 * t236) * t134;
t39 = t507 * t450 + (t159 * t224 + t171 * t236) * t134;
t38 = t485 * t453 - (-t158 * t223 + t170 * t235) * t133;
t37 = t508 * t453 + (t157 * t223 + t169 * t235) * t133;
t36 = t132 * t400 + (t228 * t90 + t240 * t78) * t273;
t35 = t131 * t401 + (t227 * t89 + t239 * t77) * t273;
t34 = t130 * t402 + (t226 * t88 + t238 * t76) * t273;
t33 = t129 * t403 + (t225 * t87 + t237 * t75) * t273;
t32 = t128 * t404 + (t224 * t86 + t236 * t74) * t273;
t31 = t127 * t405 + (t223 * t85 + t235 * t73) * t273;
t30 = (t114 * t266 - t252 * t436) * t424 + (t114 * t270 + t252 * t437) * t222;
t29 = (t113 * t266 - t251 * t439) * t425 + (t113 * t270 + t251 * t440) * t221;
t28 = (t112 * t266 - t250 * t442) * t426 + (t112 * t270 + t250 * t443) * t220;
t27 = (t111 * t266 - t249 * t445) * t427 + (t111 * t270 + t249 * t446) * t216;
t26 = (t110 * t266 - t248 * t448) * t428 + (t110 * t270 + t248 * t449) * t215;
t25 = (t109 * t266 - t247 * t451) * t429 + (t109 * t270 + t247 * t452) * t214;
t18 = (-t246 * t500 + t490 * t494) * t258 + (-t264 * t355 + (-t168 * t240 - t180 * t228) * t430) * t263 + t168 * t325 + t180 * t331 - t108 * t407;
t17 = (t234 * t500 + t491 * t494) * t258 + (t261 * t355 + (-t167 * t240 + t179 * t228) * t430) * t263 + t167 * t325 - t179 * t331 - t102 * t407;
t16 = (-t245 * t501 + t489 * t495) * t257 + (-t264 * t356 + (-t166 * t239 - t178 * t227) * t431) * t263 + t166 * t326 + t178 * t332 - t107 * t410;
t15 = (t233 * t501 + t492 * t495) * t257 + (t261 * t356 + (-t165 * t239 + t177 * t227) * t431) * t263 + t165 * t326 - t177 * t332 - t101 * t410;
t14 = (-t244 * t502 + t488 * t496) * t256 + (-t264 * t357 + (-t164 * t238 - t176 * t226) * t432) * t263 + t164 * t327 + t176 * t333 - t106 * t413;
t13 = (t232 * t502 + t493 * t496) * t256 + (t261 * t357 + (-t163 * t238 + t175 * t226) * t432) * t263 + t163 * t327 - t175 * t333 - t100 * t413;
t12 = (-t243 * t503 + t487 * t497) * t255 + (-t264 * t358 + (-t162 * t237 - t174 * t225) * t433) * t263 + t162 * t328 + t174 * t334 - t105 * t416;
t11 = (t231 * t503 + t497 * t506) * t255 + (t261 * t358 + (-t161 * t237 + t173 * t225) * t433) * t263 + t161 * t328 - t173 * t334 - t99 * t416;
t10 = (-t242 * t504 + t486 * t498) * t254 + (-t264 * t359 + (-t160 * t236 - t172 * t224) * t434) * t263 + t160 * t329 + t172 * t335 - t104 * t419;
t9 = (t230 * t504 + t498 * t507) * t254 + (t261 * t359 + (-t159 * t236 + t171 * t224) * t434) * t263 + t159 * t329 - t171 * t335 - t98 * t419;
t8 = (-t241 * t505 + t485 * t499) * t253 + (-t264 * t360 + (-t158 * t235 - t170 * t223) * t435) * t263 + t158 * t330 + t170 * t336 - t103 * t422;
t7 = (t229 * t505 + t499 * t508) * t253 + (t261 * t360 + (-t157 * t235 + t169 * t223) * t435) * t263 + t157 * t330 - t169 * t336 - t97 * t422;
t6 = (-t261 * t36 + t264 * t54) * t246 + t234 * (t261 * t54 + t264 * t36);
t5 = (-t261 * t35 + t264 * t53) * t245 + t233 * (t261 * t53 + t264 * t35);
t4 = (-t261 * t34 + t264 * t52) * t244 + t232 * (t261 * t52 + t264 * t34);
t3 = (-t261 * t33 + t264 * t51) * t243 + t231 * (t261 * t51 + t264 * t33);
t2 = (-t261 * t32 + t264 * t50) * t242 + t230 * (t261 * t50 + t264 * t32);
t1 = (-t261 * t31 + t264 * t49) * t241 + t229 * (t261 * t49 + t264 * t31);
t19 = [((-(t192 * t362 - t436) * t424 - t222 * (t192 * t361 + t437)) * t258 + t126 * t407) * t454, (-t234 * t30 + t246 * t60) * t454, (t234 * t60 + t246 * t30) * t454, ((t266 * t6 - t509 * t270) * t424 + (t509 * t266 + t6 * t270) * t222) * t454, (-(t18 * t266 - t270 * t48) * t424 - (t18 * t270 + t266 * t48) * t222) * t454, ((t17 * t266 - t270 * t47) * t424 + t222 * (t17 * t270 + t266 * t47)) * t454; ((-(t191 * t362 - t439) * t425 - t221 * (t191 * t361 + t440)) * t257 + t125 * t410) * t455, (-t233 * t29 + t245 * t59) * t455, (t233 * t59 + t245 * t29) * t455, ((t266 * t5 - t510 * t270) * t425 + (t510 * t266 + t5 * t270) * t221) * t455, (-(t16 * t266 - t270 * t46) * t425 - (t16 * t270 + t266 * t46) * t221) * t455, ((t15 * t266 - t270 * t45) * t425 + t221 * (t15 * t270 + t266 * t45)) * t455; ((-(t190 * t362 - t442) * t426 - t220 * (t190 * t361 + t443)) * t256 + t124 * t413) * t456, (-t232 * t28 + t244 * t58) * t456, (t232 * t58 + t244 * t28) * t456, ((t266 * t4 - t511 * t270) * t426 + (t511 * t266 + t4 * t270) * t220) * t456, (-(t14 * t266 - t270 * t44) * t426 - (t14 * t270 + t266 * t44) * t220) * t456, ((t13 * t266 - t270 * t43) * t426 + t220 * (t13 * t270 + t266 * t43)) * t456; ((-(t189 * t362 - t445) * t427 - t216 * (t189 * t361 + t446)) * t255 + t120 * t416) * t457, (-t231 * t27 + t243 * t57) * t457, (t231 * t57 + t243 * t27) * t457, ((t266 * t3 - t512 * t270) * t427 + (t512 * t266 + t3 * t270) * t216) * t457, (-(t12 * t266 - t270 * t42) * t427 - (t12 * t270 + t266 * t42) * t216) * t457, ((t11 * t266 - t270 * t41) * t427 + (t11 * t270 + t266 * t41) * t216) * t457; ((-(t188 * t362 - t448) * t428 - t215 * (t188 * t361 + t449)) * t254 + t119 * t419) * t458, (-t230 * t26 + t242 * t56) * t458, (t230 * t56 + t242 * t26) * t458, ((t266 * t2 - t513 * t270) * t428 + (t2 * t270 + t513 * t266) * t215) * t458, (-(t10 * t266 - t270 * t40) * t428 - (t10 * t270 + t266 * t40) * t215) * t458, ((t266 * t9 - t270 * t39) * t428 + (t266 * t39 + t270 * t9) * t215) * t458; ((-(t187 * t362 - t451) * t429 - t214 * (t187 * t361 + t452)) * t253 + t118 * t422) * t459, (-t229 * t25 + t241 * t55) * t459, (t229 * t55 + t241 * t25) * t459, ((t266 * t1 - t514 * t270) * t429 + (t1 * t270 + t514 * t266) * t214) * t459, (-(t266 * t8 - t270 * t38) * t429 - (t266 * t38 + t270 * t8) * t214) * t459, ((t266 * t7 - t270 * t37) * t429 + (t266 * t37 + t270 * t7) * t214) * t459;];
Jinv  = t19;
