% Analytische Jacobi-Matrix für parallelen Roboter
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorpose und aktiven Gelenkkoordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d3,d4,theta1,theta2]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% Jinv [6x6]
%   Analytische Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-16 22:35
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function Jinv = P6PPRRRR3V2G1P1A2_Jinv(xP, qJ, pkin, koppelP, ...
legFrame)


%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(10,1),zeros(6,3),zeros(6,3)}
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PPRRRR3V2G1P1A2_Jinv: qJ has to be [3x6] (double)');
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PPRRRR3V2G1P1A2_Jinv: xP has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PPRRRR3V2G1P1A2_Jinv: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PPRRRR3V2G1P1A2_Jinv: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PPRRRR3V2G1P1A2_Jinv: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From Jinv_para_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-16 22:33:34
% EndTime: 2019-05-16 22:33:41
% DurationCPUTime: 7.68s
% Computational Cost: add. (3795->552), mult. (9966->1223), div. (72->7), fcn. (11226->63), ass. (0->439)
t242 = sin(pkin(10));
t243 = sin(pkin(9));
t248 = cos(pkin(9));
t249 = cos(pkin(5));
t247 = cos(pkin(10));
t250 = cos(pkin(4));
t351 = t247 * t250;
t246 = sin(pkin(4));
t352 = sin(pkin(5)) * t246;
t167 = (t242 * t248 + t243 * t351) * t249 - t243 * t352;
t350 = t248 * t250;
t168 = (t242 * t243 - t247 * t350) * t249 + t248 * t352;
t254 = legFrame(3,3);
t202 = sin(t254);
t214 = cos(t254);
t475 = t167 * t202 + t168 * t214;
t255 = legFrame(2,3);
t203 = sin(t255);
t215 = cos(t255);
t474 = t167 * t203 + t168 * t215;
t256 = legFrame(1,3);
t204 = sin(t256);
t216 = cos(t256);
t473 = t167 * t204 + t168 * t216;
t241 = 0.1e1 / t246;
t277 = sin(qJ(3,1));
t280 = cos(qJ(3,1));
t354 = t242 * t249;
t466 = pkin(8) * sin(pkin(6));
t472 = 0.1e1 / ((-t247 * t280 + t277 * t354) * t466 + pkin(3) * (t247 * t277 + t280 * t354)) * t241;
t276 = sin(qJ(3,2));
t279 = cos(qJ(3,2));
t471 = 0.1e1 / ((-t247 * t279 + t276 * t354) * t466 + pkin(3) * (t247 * t276 + t279 * t354)) * t241;
t275 = sin(qJ(3,3));
t278 = cos(qJ(3,3));
t470 = 0.1e1 / ((-t247 * t278 + t275 * t354) * t466 + pkin(3) * (t247 * t275 + t278 * t354)) * t241;
t188 = t249 * t351 - t352;
t166 = t188 * t243 + t248 * t354;
t169 = t188 * t248 - t243 * t354;
t111 = t166 * t216 + t169 * t204;
t117 = -t166 * t204 + t169 * t216;
t262 = legFrame(1,1);
t222 = cos(t262);
t210 = sin(t262);
t274 = legFrame(1,2);
t228 = sin(t274);
t415 = t210 * t228;
t469 = t111 * t222 + t117 * t415;
t110 = t166 * t215 + t169 * t203;
t116 = -t166 * t203 + t169 * t215;
t261 = legFrame(2,1);
t221 = cos(t261);
t209 = sin(t261);
t273 = legFrame(2,2);
t227 = sin(t273);
t416 = t209 * t227;
t468 = t110 * t221 + t116 * t416;
t109 = t166 * t214 + t169 * t202;
t115 = -t166 * t202 + t169 * t214;
t260 = legFrame(3,1);
t220 = cos(t260);
t208 = sin(t260);
t272 = legFrame(3,2);
t226 = sin(t272);
t417 = t208 * t226;
t467 = t109 * t220 + t115 * t417;
t263 = sin(qJ(3,6));
t266 = cos(qJ(3,6));
t462 = 0.1e1 / (-(t247 * t266 - t263 * t354) * t466 + pkin(3) * (t247 * t263 + t266 * t354)) * t241;
t264 = sin(qJ(3,5));
t267 = cos(qJ(3,5));
t461 = 0.1e1 / (-(t247 * t267 - t264 * t354) * t466 + pkin(3) * (t247 * t264 + t267 * t354)) * t241;
t265 = sin(qJ(3,4));
t268 = cos(qJ(3,4));
t460 = 0.1e1 / (-(t247 * t268 - t265 * t354) * t466 + pkin(3) * (t247 * t265 + t268 * t354)) * t241;
t269 = legFrame(6,2);
t223 = sin(t269);
t453 = t166 * t223;
t270 = legFrame(5,2);
t224 = sin(t270);
t452 = t166 * t224;
t271 = legFrame(4,2);
t225 = sin(t271);
t451 = t166 * t225;
t450 = t166 * t226;
t449 = t166 * t227;
t448 = t166 * t228;
t444 = t169 * t223;
t443 = t169 * t224;
t442 = t169 * t225;
t441 = t169 * t226;
t440 = t169 * t227;
t439 = t169 * t228;
t353 = t242 * t250;
t186 = t243 * t353 - t247 * t248;
t438 = t186 * t223;
t437 = t186 * t224;
t436 = t186 * t225;
t435 = t186 * t226;
t434 = t186 * t227;
t433 = t186 * t228;
t229 = cos(t269);
t432 = t188 * t229;
t230 = cos(t270);
t431 = t188 * t230;
t231 = cos(t271);
t430 = t188 * t231;
t232 = cos(t272);
t429 = t188 * t232;
t233 = cos(t273);
t428 = t188 * t233;
t234 = cos(t274);
t427 = t188 * t234;
t189 = t242 * t350 + t243 * t247;
t426 = t189 * t223;
t425 = t189 * t224;
t424 = t189 * t225;
t423 = t189 * t226;
t422 = t189 * t227;
t421 = t189 * t228;
t257 = legFrame(6,1);
t205 = sin(t257);
t420 = t205 * t223;
t258 = legFrame(5,1);
t206 = sin(t258);
t419 = t206 * t224;
t259 = legFrame(4,1);
t207 = sin(t259);
t418 = t207 * t225;
t217 = cos(t257);
t414 = t217 * t223;
t218 = cos(t258);
t413 = t218 * t224;
t219 = cos(t259);
t412 = t219 * t225;
t411 = t220 * t226;
t410 = t221 * t227;
t409 = t222 * t228;
t408 = t223 * t242;
t407 = t223 * t247;
t406 = t224 * t242;
t405 = t224 * t247;
t404 = t225 * t242;
t403 = t225 * t247;
t402 = t226 * t242;
t401 = t226 * t247;
t400 = t227 * t242;
t399 = t227 * t247;
t398 = t228 * t242;
t397 = t228 * t247;
t396 = t229 * t242;
t395 = t229 * t247;
t394 = t230 * t242;
t393 = t230 * t247;
t392 = t231 * t242;
t391 = t231 * t247;
t390 = t232 * t242;
t389 = t232 * t247;
t388 = t233 * t242;
t387 = t233 * t247;
t386 = t234 * t242;
t385 = t234 * t247;
t283 = xP(4);
t237 = sin(t283);
t290 = koppelP(6,2);
t384 = t237 * t290;
t291 = koppelP(5,2);
t383 = t237 * t291;
t292 = koppelP(4,2);
t382 = t237 * t292;
t293 = koppelP(3,2);
t381 = t237 * t293;
t294 = koppelP(2,2);
t380 = t237 * t294;
t295 = koppelP(1,2);
t379 = t237 * t295;
t296 = koppelP(6,1);
t378 = t237 * t296;
t297 = koppelP(5,1);
t377 = t237 * t297;
t298 = koppelP(4,1);
t376 = t237 * t298;
t299 = koppelP(3,1);
t375 = t237 * t299;
t300 = koppelP(2,1);
t374 = t237 * t300;
t301 = koppelP(1,1);
t373 = t237 * t301;
t282 = xP(5);
t239 = cos(t282);
t284 = koppelP(6,3);
t372 = t239 * t284;
t285 = koppelP(5,3);
t371 = t239 * t285;
t286 = koppelP(4,3);
t370 = t239 * t286;
t287 = koppelP(3,3);
t369 = t239 * t287;
t288 = koppelP(2,3);
t368 = t239 * t288;
t289 = koppelP(1,3);
t367 = t239 * t289;
t240 = cos(t283);
t366 = t240 * t290;
t365 = t240 * t291;
t364 = t240 * t292;
t363 = t240 * t293;
t362 = t240 * t294;
t361 = t240 * t295;
t360 = t240 * t296;
t359 = t240 * t297;
t358 = t240 * t298;
t357 = t240 * t299;
t356 = t240 * t300;
t355 = t240 * t301;
t281 = xP(6);
t235 = sin(t281);
t236 = sin(t282);
t238 = cos(t281);
t121 = -t237 * t372 + (t236 * t378 + t366) * t238 - t235 * (t236 * t384 - t360);
t349 = t121 * t396;
t123 = -t237 * t371 + (t236 * t377 + t365) * t238 - t235 * (t236 * t383 - t359);
t348 = t123 * t394;
t125 = -t237 * t370 + (t236 * t376 + t364) * t238 - t235 * (t236 * t382 - t358);
t347 = t125 * t392;
t127 = -t237 * t369 + (t236 * t375 + t363) * t238 - t235 * (t236 * t381 - t357);
t346 = t127 * t390;
t129 = -t237 * t368 + (t236 * t374 + t362) * t238 - t235 * (t236 * t380 - t356);
t345 = t129 * t388;
t131 = -t237 * t367 + (t236 * t373 + t361) * t238 - t235 * (t236 * t379 - t355);
t344 = t131 * t386;
t340 = t223 * t353;
t339 = t223 * t351;
t338 = t224 * t353;
t337 = t224 * t351;
t336 = t225 * t353;
t335 = t225 * t351;
t334 = t226 * t353;
t333 = t226 * t351;
t332 = t227 * t353;
t331 = t227 * t351;
t330 = t228 * t353;
t329 = t228 * t351;
t122 = t240 * t372 + (-t236 * t360 + t384) * t238 + t235 * (t236 * t366 + t378);
t328 = t122 * t396;
t124 = t240 * t371 + (-t236 * t359 + t383) * t238 + t235 * (t236 * t365 + t377);
t327 = t124 * t394;
t126 = t240 * t370 + (-t236 * t358 + t382) * t238 + t235 * (t236 * t364 + t376);
t326 = t126 * t392;
t128 = t240 * t369 + (-t236 * t357 + t381) * t238 + t235 * (t236 * t363 + t375);
t325 = t128 * t390;
t130 = t240 * t368 + (-t236 * t356 + t380) * t238 + t235 * (t236 * t362 + t374);
t324 = t130 * t388;
t132 = t240 * t367 + (-t236 * t355 + t379) * t238 + t235 * (t236 * t361 + t373);
t323 = t132 * t386;
t322 = t205 * t352;
t321 = t206 * t352;
t320 = t207 * t352;
t319 = t208 * t352;
t318 = t209 * t352;
t317 = t210 * t352;
t316 = t217 * t352;
t315 = t218 * t352;
t314 = t219 * t352;
t313 = t220 * t352;
t312 = t221 * t352;
t311 = t222 * t352;
t307 = t235 * t290 - t238 * t296;
t306 = t235 * t291 - t238 * t297;
t305 = t235 * t292 - t238 * t298;
t304 = t235 * t293 - t238 * t299;
t303 = t235 * t294 - t238 * t300;
t302 = t235 * t295 - t238 * t301;
t253 = legFrame(4,3);
t252 = legFrame(5,3);
t251 = legFrame(6,3);
t213 = cos(t253);
t212 = cos(t252);
t211 = cos(t251);
t201 = sin(t253);
t200 = sin(t252);
t199 = sin(t251);
t198 = t235 * t301 + t238 * t295;
t197 = t235 * t300 + t238 * t294;
t196 = t235 * t299 + t238 * t293;
t195 = t235 * t298 + t238 * t292;
t194 = t235 * t297 + t238 * t291;
t193 = t235 * t296 + t238 * t290;
t182 = -t236 * t289 + t239 * t302;
t181 = -t236 * t288 + t239 * t303;
t180 = -t236 * t287 + t239 * t304;
t179 = -t236 * t286 + t239 * t305;
t178 = -t236 * t285 + t239 * t306;
t177 = -t236 * t284 + t239 * t307;
t176 = t302 * t236 + t367;
t175 = t303 * t236 + t368;
t174 = t304 * t236 + t369;
t173 = t305 * t236 + t370;
t172 = t306 * t236 + t371;
t171 = t307 * t236 + t372;
t156 = -t186 * t204 + t189 * t216;
t155 = -t186 * t203 + t189 * t215;
t154 = -t186 * t202 + t189 * t214;
t153 = -t186 * t201 + t189 * t213;
t152 = -t186 * t200 + t189 * t212;
t151 = -t186 * t199 + t189 * t211;
t150 = t186 * t216 + t189 * t204;
t149 = t186 * t215 + t189 * t203;
t148 = t186 * t214 + t189 * t202;
t147 = t186 * t213 + t189 * t201;
t146 = t186 * t212 + t189 * t200;
t145 = t186 * t211 + t189 * t199;
t144 = t176 * t240 + t198 * t237;
t143 = t175 * t240 + t197 * t237;
t142 = t174 * t240 + t196 * t237;
t141 = t173 * t240 + t195 * t237;
t140 = t172 * t240 + t194 * t237;
t139 = t171 * t240 + t193 * t237;
t138 = -t176 * t237 + t198 * t240;
t137 = -t175 * t237 + t197 * t240;
t136 = -t174 * t237 + t196 * t240;
t135 = -t173 * t237 + t195 * t240;
t134 = -t172 * t237 + t194 * t240;
t133 = -t171 * t237 + t193 * t240;
t120 = -t167 * t201 - t168 * t213;
t119 = -t167 * t200 - t168 * t212;
t118 = -t167 * t199 - t168 * t211;
t114 = -t166 * t201 + t169 * t213;
t113 = -t166 * t200 + t169 * t212;
t112 = -t166 * t199 + t169 * t211;
t108 = t166 * t213 + t169 * t201;
t107 = t166 * t212 + t169 * t200;
t106 = t166 * t211 + t169 * t199;
t105 = t150 * t222 + t156 * t415;
t104 = t149 * t221 + t155 * t416;
t103 = t148 * t220 + t154 * t417;
t102 = t147 * t219 + t153 * t418;
t101 = t146 * t218 + t152 * t419;
t100 = t145 * t217 + t151 * t420;
t99 = -t150 * t210 + t156 * t409;
t98 = -t149 * t209 + t155 * t410;
t97 = -t148 * t208 + t154 * t411;
t96 = -t147 * t207 + t153 * t412;
t95 = -t146 * t206 + t152 * t413;
t94 = -t145 * t205 + t151 * t414;
t93 = t131 * t385 + (t210 * t397 + t222 * t353) * t182;
t92 = t129 * t387 + (t209 * t399 + t221 * t353) * t181;
t91 = t127 * t389 + (t208 * t401 + t220 * t353) * t180;
t90 = t125 * t391 + (t207 * t403 + t219 * t353) * t179;
t89 = t123 * t393 + (t206 * t405 + t218 * t353) * t178;
t88 = t121 * t395 + (t205 * t407 + t217 * t353) * t177;
t87 = t132 * t385 + (t210 * t353 - t222 * t397) * t182;
t86 = t130 * t387 + (t209 * t353 - t221 * t399) * t181;
t85 = t128 * t389 + (t208 * t353 - t220 * t401) * t180;
t84 = t126 * t391 + (t207 * t353 - t219 * t403) * t179;
t83 = t124 * t393 + (t206 * t353 - t218 * t405) * t178;
t82 = t122 * t395 + (t205 * t353 - t217 * t407) * t177;
t81 = t250 * t344 + (t210 * t330 - t222 * t247) * t182;
t80 = t250 * t345 + (t209 * t332 - t221 * t247) * t181;
t79 = t250 * t346 + (t208 * t334 - t220 * t247) * t180;
t78 = t250 * t347 + (t207 * t336 - t219 * t247) * t179;
t77 = t250 * t348 + (t206 * t338 - t218 * t247) * t178;
t76 = t250 * t349 + (t205 * t340 - t217 * t247) * t177;
t75 = t250 * t323 - (t210 * t247 + t222 * t330) * t182;
t74 = t250 * t324 - (t209 * t247 + t221 * t332) * t181;
t73 = t250 * t325 - (t208 * t247 + t220 * t334) * t180;
t72 = t250 * t326 - (t207 * t247 + t219 * t336) * t179;
t71 = t250 * t327 - (t206 * t247 + t218 * t338) * t178;
t70 = t250 * t328 - (t205 * t247 + t217 * t340) * t177;
t69 = -t249 * t344 + ((-t210 * t398 + t222 * t351) * t249 - t311) * t182;
t68 = -t249 * t345 + ((-t209 * t400 + t221 * t351) * t249 - t312) * t181;
t67 = -t249 * t346 + ((-t208 * t402 + t220 * t351) * t249 - t313) * t180;
t66 = -t249 * t347 + ((-t207 * t404 + t219 * t351) * t249 - t314) * t179;
t65 = -t249 * t348 + ((-t206 * t406 + t218 * t351) * t249 - t315) * t178;
t64 = -t249 * t349 + ((-t205 * t408 + t217 * t351) * t249 - t316) * t177;
t63 = -t249 * t323 + ((t210 * t351 + t222 * t398) * t249 - t317) * t182;
t62 = -t249 * t324 + ((t209 * t351 + t221 * t400) * t249 - t318) * t181;
t61 = -t249 * t325 + ((t208 * t351 + t220 * t402) * t249 - t319) * t180;
t60 = -t249 * t326 + ((t207 * t351 + t219 * t404) * t249 - t320) * t179;
t59 = -t249 * t327 + ((t206 * t351 + t218 * t406) * t249 - t321) * t178;
t58 = -t249 * t328 + ((t205 * t351 + t217 * t408) * t249 - t322) * t177;
t57 = t132 * t427 - ((-t210 * t242 + t222 * t329) * t249 - t228 * t311) * t182;
t56 = t130 * t428 - ((-t209 * t242 + t221 * t331) * t249 - t227 * t312) * t181;
t55 = t128 * t429 - ((-t208 * t242 + t220 * t333) * t249 - t226 * t313) * t180;
t54 = t126 * t430 - ((-t207 * t242 + t219 * t335) * t249 - t225 * t314) * t179;
t53 = t124 * t431 - ((-t206 * t242 + t218 * t337) * t249 - t224 * t315) * t178;
t52 = t122 * t432 - ((-t205 * t242 + t217 * t339) * t249 - t223 * t316) * t177;
t51 = t131 * t427 + ((t210 * t329 + t222 * t242) * t249 - t228 * t317) * t182;
t50 = t129 * t428 + ((t209 * t331 + t221 * t242) * t249 - t227 * t318) * t181;
t49 = t127 * t429 + ((t208 * t333 + t220 * t242) * t249 - t226 * t319) * t180;
t48 = t125 * t430 + ((t207 * t335 + t219 * t242) * t249 - t225 * t320) * t179;
t47 = t123 * t431 + ((t206 * t337 + t218 * t242) * t249 - t224 * t321) * t178;
t46 = t121 * t432 + ((t205 * t339 + t217 * t242) * t249 - t223 * t322) * t177;
t45 = t108 * t219 + t114 * t418;
t44 = t107 * t218 + t113 * t419;
t43 = t106 * t217 + t112 * t420;
t42 = -t111 * t210 + t117 * t409;
t41 = -t110 * t209 + t116 * t410;
t40 = -t109 * t208 + t115 * t411;
t39 = -t108 * t207 + t114 * t412;
t38 = -t107 * t206 + t113 * t413;
t37 = -t106 * t205 + t112 * t414;
t36 = (t243 * t93 + t248 * t81) * t216 + t204 * (-t243 * t81 + t248 * t93);
t35 = (t243 * t92 + t248 * t80) * t215 + t203 * (-t243 * t80 + t248 * t92);
t34 = (t243 * t91 + t248 * t79) * t214 + t202 * (-t243 * t79 + t248 * t91);
t33 = (t243 * t90 + t248 * t78) * t213 + t201 * (-t243 * t78 + t248 * t90);
t32 = (t243 * t89 + t248 * t77) * t212 + t200 * (-t243 * t77 + t248 * t89);
t31 = (t243 * t88 + t248 * t76) * t211 + t199 * (-t243 * t76 + t248 * t88);
t30 = (t243 * t87 + t248 * t75) * t216 + t204 * (-t243 * t75 + t248 * t87);
t29 = (t243 * t86 + t248 * t74) * t215 + t203 * (-t243 * t74 + t248 * t86);
t28 = (t243 * t85 + t248 * t73) * t214 + t202 * (-t243 * t73 + t248 * t85);
t27 = (t243 * t84 + t248 * t72) * t213 + t201 * (-t243 * t72 + t248 * t84);
t26 = (t243 * t83 + t248 * t71) * t212 + t200 * (-t243 * t71 + t248 * t83);
t25 = (t243 * t82 + t248 * t70) * t211 + t199 * (-t243 * t70 + t248 * t82);
t24 = (t243 * t63 + t248 * t57) * t216 + (-t243 * t57 + t248 * t63) * t204;
t23 = (t243 * t62 + t248 * t56) * t215 + (-t243 * t56 + t248 * t62) * t203;
t22 = (t243 * t61 + t248 * t55) * t214 + (-t243 * t55 + t248 * t61) * t202;
t21 = (t243 * t60 + t248 * t54) * t213 + (-t243 * t54 + t248 * t60) * t201;
t20 = (t243 * t59 + t248 * t53) * t212 + (-t243 * t53 + t248 * t59) * t200;
t19 = (t243 * t58 + t248 * t52) * t211 + (-t243 * t52 + t248 * t58) * t199;
t18 = (t243 * t69 + t248 * t51) * t216 + t204 * (-t243 * t51 + t248 * t69);
t17 = (t243 * t68 + t248 * t50) * t215 + t203 * (-t243 * t50 + t248 * t68);
t16 = (t243 * t67 + t248 * t49) * t214 + t202 * (-t243 * t49 + t248 * t67);
t15 = (t243 * t66 + t248 * t48) * t213 + t201 * (-t243 * t48 + t248 * t66);
t14 = (t243 * t65 + t248 * t47) * t212 + t200 * (-t243 * t47 + t248 * t65);
t13 = (t243 * t64 + t248 * t46) * t211 + t199 * (-t243 * t46 + t248 * t64);
t12 = ((t138 * t421 + t144 * t186) * t216 + (-t138 * t433 + t144 * t189) * t204) * t222 - t210 * ((t138 * t186 - t144 * t421) * t216 + (t138 * t189 + t144 * t433) * t204);
t11 = ((t137 * t422 + t143 * t186) * t215 + (-t137 * t434 + t143 * t189) * t203) * t221 - t209 * ((t137 * t186 - t143 * t422) * t215 + (t137 * t189 + t143 * t434) * t203);
t10 = ((t136 * t423 + t142 * t186) * t214 + (-t136 * t435 + t142 * t189) * t202) * t220 - t208 * ((t136 * t186 - t142 * t423) * t214 + (t136 * t189 + t142 * t435) * t202);
t9 = ((t135 * t424 + t141 * t186) * t213 + (-t135 * t436 + t141 * t189) * t201) * t219 - t207 * ((t135 * t186 - t141 * t424) * t213 + (t135 * t189 + t141 * t436) * t201);
t8 = ((t134 * t425 + t140 * t186) * t212 + (-t134 * t437 + t140 * t189) * t200) * t218 - t206 * ((t134 * t186 - t140 * t425) * t212 + (t134 * t189 + t140 * t437) * t200);
t7 = ((t133 * t426 + t139 * t186) * t211 + (-t133 * t438 + t139 * t189) * t199) * t217 - t205 * ((t133 * t186 - t139 * t426) * t211 + (t133 * t189 + t139 * t438) * t199);
t6 = ((t138 * t439 + t144 * t166) * t216 + (-t138 * t448 + t144 * t169) * t204) * t222 - t210 * ((t138 * t166 - t144 * t439) * t216 + (t138 * t169 + t144 * t448) * t204);
t5 = ((t137 * t440 + t143 * t166) * t215 + t203 * (-t137 * t449 + t143 * t169)) * t221 - t209 * ((t137 * t166 - t143 * t440) * t215 + (t137 * t169 + t143 * t449) * t203);
t4 = ((t136 * t441 + t142 * t166) * t214 + t202 * (-t136 * t450 + t142 * t169)) * t220 - t208 * ((t136 * t166 - t142 * t441) * t214 + (t136 * t169 + t142 * t450) * t202);
t3 = ((t135 * t442 + t141 * t166) * t213 + t201 * (-t135 * t451 + t141 * t169)) * t219 - t207 * ((t135 * t166 - t141 * t442) * t213 + (t135 * t169 + t141 * t451) * t201);
t2 = ((t134 * t443 + t140 * t166) * t212 + t200 * (-t134 * t452 + t140 * t169)) * t218 - t206 * ((t134 * t166 - t140 * t443) * t212 + (t134 * t169 + t140 * t452) * t200);
t1 = ((t133 * t444 + t139 * t166) * t211 + t199 * (-t133 * t453 + t139 * t169)) * t217 - t205 * ((t133 * t166 - t139 * t444) * t211 + (t133 * t169 + t139 * t453) * t199);
t157 = [(-(t156 * t280 - t473 * t277) * t466 + (t277 * t156 + t473 * t280) * pkin(3)) * t234 * t472, (-(t105 * t280 + t277 * t469) * t466 + (t277 * t105 - t469 * t280) * pkin(3)) * t472, ((t277 * t42 + t280 * t99) * t466 - pkin(3) * (t277 * t99 - t280 * t42)) * t472, ((t12 * t280 + t277 * t6) * t466 + (-t12 * t277 + t280 * t6) * pkin(3)) * t472, (-(t24 * t277 + t280 * t30) * t466 - (t24 * t280 - t277 * t30) * pkin(3)) * t472, ((t18 * t277 + t280 * t36) * t466 + (t18 * t280 - t277 * t36) * pkin(3)) * t472; (-(t155 * t279 - t474 * t276) * t466 + (t276 * t155 + t474 * t279) * pkin(3)) * t233 * t471, (-(t104 * t279 + t276 * t468) * t466 + (t276 * t104 - t468 * t279) * pkin(3)) * t471, ((t276 * t41 + t279 * t98) * t466 - pkin(3) * (t276 * t98 - t279 * t41)) * t471, ((t11 * t279 + t276 * t5) * t466 + (-t11 * t276 + t279 * t5) * pkin(3)) * t471, (-(t23 * t276 + t279 * t29) * t466 - (t23 * t279 - t276 * t29) * pkin(3)) * t471, ((t17 * t276 + t279 * t35) * t466 + (t17 * t279 - t276 * t35) * pkin(3)) * t471; (-(t154 * t278 - t475 * t275) * t466 + (t275 * t154 + t475 * t278) * pkin(3)) * t232 * t470, (-(t103 * t278 + t275 * t467) * t466 + (t275 * t103 - t467 * t278) * pkin(3)) * t470, ((t275 * t40 + t278 * t97) * t466 - pkin(3) * (t275 * t97 - t278 * t40)) * t470, ((t10 * t278 + t275 * t4) * t466 + (-t10 * t275 + t278 * t4) * pkin(3)) * t470, (-(t22 * t275 + t278 * t28) * t466 - (t22 * t278 - t275 * t28) * pkin(3)) * t470, ((t16 * t275 + t278 * t34) * t466 + (t16 * t278 - t275 * t34) * pkin(3)) * t470; -((t120 * t265 + t153 * t268) * t466 + (t120 * t268 - t153 * t265) * pkin(3)) * t231 * t460, (-(t102 * t268 + t265 * t45) * t466 - (-t102 * t265 + t268 * t45) * pkin(3)) * t460, ((t265 * t39 + t268 * t96) * t466 + (-t265 * t96 + t268 * t39) * pkin(3)) * t460, ((t265 * t3 + t268 * t9) * t466 + pkin(3) * (-t265 * t9 + t268 * t3)) * t460, (-(t21 * t265 + t268 * t27) * t466 - (t21 * t268 - t265 * t27) * pkin(3)) * t460, ((t15 * t265 + t268 * t33) * t466 + pkin(3) * (t15 * t268 - t265 * t33)) * t460; -((t119 * t264 + t152 * t267) * t466 + (t119 * t267 - t152 * t264) * pkin(3)) * t230 * t461, (-(t101 * t267 + t264 * t44) * t466 - (-t101 * t264 + t267 * t44) * pkin(3)) * t461, ((t264 * t38 + t267 * t95) * t466 + (-t264 * t95 + t267 * t38) * pkin(3)) * t461, ((t2 * t264 + t267 * t8) * t466 + pkin(3) * (t2 * t267 - t264 * t8)) * t461, (-(t20 * t264 + t26 * t267) * t466 - (t20 * t267 - t26 * t264) * pkin(3)) * t461, ((t14 * t264 + t267 * t32) * t466 + pkin(3) * (t14 * t267 - t264 * t32)) * t461; -((t118 * t263 + t151 * t266) * t466 + (t118 * t266 - t151 * t263) * pkin(3)) * t229 * t462, (-(t100 * t266 + t263 * t43) * t466 - (-t100 * t263 + t266 * t43) * pkin(3)) * t462, ((t263 * t37 + t266 * t94) * t466 + (-t263 * t94 + t266 * t37) * pkin(3)) * t462, ((t1 * t263 + t266 * t7) * t466 + pkin(3) * (t1 * t266 - t263 * t7)) * t462, (-(t19 * t263 + t25 * t266) * t466 - (t19 * t266 - t25 * t263) * pkin(3)) * t462, ((t13 * t263 + t266 * t31) * t466 + pkin(3) * (t13 * t266 - t263 * t31)) * t462;];
Jinv  = t157;
