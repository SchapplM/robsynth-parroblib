% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P6PRPRRR7V2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d4,theta1,theta3]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x18]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-17 04:21
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6PRPRRR7V2A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_regmin: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-17 03:39:49
% EndTime: 2019-05-17 03:42:05
% DurationCPUTime: 151.57s
% Computational Cost: add. (38019->1706), mult. (89088->3171), div. (324->18), fcn. (89244->64), ass. (0->1103)
t9150 = sin(qJ(2,3));
t9153 = cos(qJ(2,3));
t9147 = legFrame(3,2);
t9101 = sin(t9147);
t9135 = legFrame(3,1);
t9095 = cos(t9135);
t9107 = cos(t9147);
t9492 = t9095 * t9107;
t9083 = sin(t9135);
t9525 = t9083 * t9107;
t8881 = g(1) * t9101 - g(2) * t9525 + g(3) * t9492;
t9120 = sin(pkin(4));
t9125 = cos(pkin(4));
t9493 = t9095 * t9101;
t9526 = t9083 * t9101;
t8875 = -t9107 * g(1) - g(2) * t9526 + g(3) * t9493;
t9039 = g(2) * t9095 + g(3) * t9083;
t9117 = sin(pkin(9));
t9122 = cos(pkin(9));
t8782 = t8875 * t9117 + t9039 * t9122;
t9129 = legFrame(3,3);
t9077 = sin(t9129);
t9089 = cos(t9129);
t9276 = t8875 * t9122 - t9039 * t9117;
t9279 = -t8782 * t9089 - t9276 * t9077;
t9795 = -t8881 * t9120 + t9125 * t9279;
t9800 = -t8782 * t9077 + t9089 * t9276;
t9830 = t9150 * t9795 + t9153 * t9800;
t9151 = sin(qJ(2,2));
t9154 = cos(qJ(2,2));
t9148 = legFrame(2,2);
t9102 = sin(t9148);
t9136 = legFrame(2,1);
t9096 = cos(t9136);
t9108 = cos(t9148);
t9487 = t9096 * t9108;
t9084 = sin(t9136);
t9520 = t9084 * t9108;
t8882 = g(1) * t9102 - g(2) * t9520 + g(3) * t9487;
t9488 = t9096 * t9102;
t9521 = t9084 * t9102;
t8876 = -t9108 * g(1) - g(2) * t9521 + g(3) * t9488;
t9040 = g(2) * t9096 + g(3) * t9084;
t8784 = t8876 * t9117 + t9040 * t9122;
t9130 = legFrame(2,3);
t9078 = sin(t9130);
t9090 = cos(t9130);
t9275 = t8876 * t9122 - t9040 * t9117;
t9278 = -t8784 * t9090 - t9275 * t9078;
t9796 = -t8882 * t9120 + t9125 * t9278;
t9799 = -t8784 * t9078 + t9090 * t9275;
t9829 = t9151 * t9796 + t9154 * t9799;
t9152 = sin(qJ(2,1));
t9155 = cos(qJ(2,1));
t9149 = legFrame(1,2);
t9103 = sin(t9149);
t9137 = legFrame(1,1);
t9097 = cos(t9137);
t9109 = cos(t9149);
t9482 = t9097 * t9109;
t9085 = sin(t9137);
t9515 = t9085 * t9109;
t8883 = g(1) * t9103 - g(2) * t9515 + g(3) * t9482;
t9483 = t9097 * t9103;
t9516 = t9085 * t9103;
t8877 = -t9109 * g(1) - g(2) * t9516 + g(3) * t9483;
t9041 = g(2) * t9097 + g(3) * t9085;
t8786 = t8877 * t9117 + t9041 * t9122;
t9131 = legFrame(1,3);
t9079 = sin(t9131);
t9091 = cos(t9131);
t9274 = t8877 * t9122 - t9041 * t9117;
t9277 = -t8786 * t9091 - t9274 * t9079;
t9797 = -t8883 * t9120 + t9125 * t9277;
t9798 = -t8786 * t9079 + t9091 * t9274;
t9828 = t9152 * t9797 + t9155 * t9798;
t8336 = -t9150 * t9800 + t9153 * t9795;
t8340 = -t9151 * t9799 + t9154 * t9796;
t8338 = -t9152 * t9798 + t9155 * t9797;
t9138 = sin(qJ(2,6));
t9141 = cos(qJ(2,6));
t9144 = legFrame(6,2);
t9098 = sin(t9144);
t9104 = cos(t9144);
t9132 = legFrame(6,1);
t9080 = sin(t9132);
t9092 = cos(t9132);
t9719 = -g(2) * t9080 + g(3) * t9092;
t8872 = g(1) * t9104 - t9098 * t9719;
t9036 = g(2) * t9092 + g(3) * t9080;
t8770 = t8872 * t9122 + t9036 * t9117;
t8777 = t8872 * t9117 - t9036 * t9122;
t9126 = legFrame(6,3);
t9074 = sin(t9126);
t9086 = cos(t9126);
t9764 = t8770 * t9086 - t8777 * t9074;
t8878 = g(1) * t9098 + t9104 * t9719;
t9282 = t8770 * t9074 + t8777 * t9086;
t9792 = -t8878 * t9120 + t9125 * t9282;
t8324 = t9138 * t9792 - t9141 * t9764;
t9139 = sin(qJ(2,5));
t9142 = cos(qJ(2,5));
t9145 = legFrame(5,2);
t9099 = sin(t9145);
t9105 = cos(t9145);
t9133 = legFrame(5,1);
t9081 = sin(t9133);
t9093 = cos(t9133);
t9720 = -g(2) * t9081 + g(3) * t9093;
t8873 = g(1) * t9105 - t9099 * t9720;
t9037 = g(2) * t9093 + g(3) * t9081;
t8771 = t8873 * t9122 + t9037 * t9117;
t8779 = t8873 * t9117 - t9037 * t9122;
t9127 = legFrame(5,3);
t9075 = sin(t9127);
t9087 = cos(t9127);
t9763 = t8771 * t9087 - t8779 * t9075;
t8879 = g(1) * t9099 + t9105 * t9720;
t9281 = t8771 * t9075 + t8779 * t9087;
t9793 = -t8879 * t9120 + t9125 * t9281;
t8327 = t9139 * t9793 - t9142 * t9763;
t9140 = sin(qJ(2,4));
t9143 = cos(qJ(2,4));
t9146 = legFrame(4,2);
t9100 = sin(t9146);
t9106 = cos(t9146);
t9134 = legFrame(4,1);
t9082 = sin(t9134);
t9094 = cos(t9134);
t9721 = -g(2) * t9082 + g(3) * t9094;
t8874 = g(1) * t9106 - t9100 * t9721;
t9038 = g(2) * t9094 + g(3) * t9082;
t8772 = t8874 * t9122 + t9038 * t9117;
t8781 = t8874 * t9117 - t9038 * t9122;
t9128 = legFrame(4,3);
t9076 = sin(t9128);
t9088 = cos(t9128);
t9762 = t8772 * t9088 - t8781 * t9076;
t8880 = g(1) * t9100 + t9106 * t9721;
t9280 = t8772 * t9076 + t8781 * t9088;
t9794 = -t8880 * t9120 + t9125 * t9280;
t8330 = t9140 * t9794 - t9143 * t9762;
t8325 = t9138 * t9764 + t9141 * t9792;
t8328 = t9139 * t9763 + t9142 * t9793;
t8331 = t9140 * t9762 + t9143 * t9794;
t9156 = xP(6);
t9110 = sin(t9156);
t9113 = cos(t9156);
t9166 = koppelP(5,2);
t9172 = koppelP(5,1);
t9018 = -t9110 * t9166 + t9113 * t9172;
t9157 = xP(5);
t9111 = sin(t9157);
t9114 = cos(t9157);
t9160 = koppelP(5,3);
t9415 = t9114 * t9160;
t8861 = t9018 * t9111 - t9415;
t9024 = t9110 * t9172 + t9113 * t9166;
t9158 = xP(4);
t9112 = sin(t9158);
t9115 = cos(t9158);
t8717 = t8861 * t9112 + t9024 * t9115;
t8723 = t8861 * t9115 - t9024 * t9112;
t9472 = t9099 * t9117;
t8487 = t8717 * t9472 + t8723 * t9122;
t8493 = -t8717 * t9122 + t8723 * t9472;
t9470 = t9099 * t9122;
t8499 = t8717 * t9470 - t8723 * t9117;
t8507 = t8717 * t9117 + t8723 * t9470;
t8283 = (t8487 * t9075 - t8499 * t9087) * t9093 + t9081 * (-t8493 * t9075 + t8507 * t9087);
t9365 = t9125 * t9142;
t9380 = t9122 * t9139;
t8985 = t9117 * t9365 + t9380;
t9395 = t9117 * t9139;
t8994 = t9122 * t9365 - t9395;
t9119 = sin(pkin(5));
t9124 = cos(pkin(5));
t9389 = t9120 * t9124;
t9581 = t8994 * t9099;
t9584 = t8985 * t9099;
t8216 = (((t8717 * t9581 - t8723 * t8985) * t9087 - (t8717 * t9584 + t8723 * t8994) * t9075) * t9093 - ((t8717 * t8985 + t8723 * t9581) * t9087 + t9075 * (t8717 * t8994 - t8723 * t9584)) * t9081) * t9119 - t8283 * t9389;
t9167 = koppelP(4,2);
t9173 = koppelP(4,1);
t9019 = -t9110 * t9167 + t9113 * t9173;
t9161 = koppelP(4,3);
t9414 = t9114 * t9161;
t8862 = t9019 * t9111 - t9414;
t9025 = t9110 * t9173 + t9113 * t9167;
t8718 = t8862 * t9112 + t9025 * t9115;
t8724 = t8862 * t9115 - t9025 * t9112;
t9467 = t9100 * t9117;
t8488 = t8718 * t9467 + t8724 * t9122;
t8494 = -t8718 * t9122 + t8724 * t9467;
t9465 = t9100 * t9122;
t8500 = t8718 * t9465 - t8724 * t9117;
t8503 = t8718 * t9117 + t8724 * t9465;
t8284 = (t8488 * t9076 - t8500 * t9088) * t9094 + t9082 * (-t8494 * t9076 + t8503 * t9088);
t9364 = t9125 * t9143;
t9379 = t9122 * t9140;
t8986 = t9117 * t9364 + t9379;
t9394 = t9117 * t9140;
t8995 = t9122 * t9364 - t9394;
t9580 = t8995 * t9100;
t9583 = t8986 * t9100;
t8217 = (((t8718 * t9580 - t8724 * t8986) * t9088 - t9076 * (t8718 * t9583 + t8724 * t8995)) * t9094 - t9082 * ((t8718 * t8986 + t8724 * t9580) * t9088 + (t8718 * t8995 - t8724 * t9583) * t9076)) * t9119 - t8284 * t9389;
t9165 = koppelP(6,2);
t9171 = koppelP(6,1);
t9017 = -t9110 * t9165 + t9113 * t9171;
t9159 = koppelP(6,3);
t9416 = t9114 * t9159;
t8860 = t9017 * t9111 - t9416;
t9023 = t9110 * t9171 + t9113 * t9165;
t8716 = t8860 * t9112 + t9023 * t9115;
t8722 = t8860 * t9115 - t9023 * t9112;
t9477 = t9098 * t9117;
t8486 = t8716 * t9477 + t8722 * t9122;
t8492 = -t8716 * t9122 + t8722 * t9477;
t9475 = t9098 * t9122;
t8498 = t8716 * t9475 - t8722 * t9117;
t8506 = t8716 * t9117 + t8722 * t9475;
t8282 = (t8486 * t9074 - t8498 * t9086) * t9092 + t9080 * (-t8492 * t9074 + t8506 * t9086);
t9366 = t9125 * t9141;
t9381 = t9122 * t9138;
t8984 = t9117 * t9366 + t9381;
t9396 = t9117 * t9138;
t8993 = t9122 * t9366 - t9396;
t9582 = t8993 * t9098;
t9585 = t8984 * t9098;
t8218 = (((t8716 * t9582 - t8722 * t8984) * t9086 - t9074 * (t8716 * t9585 + t8722 * t8993)) * t9092 - t9080 * ((t8716 * t8984 + t8722 * t9582) * t9086 + t9074 * (t8716 * t8993 - t8722 * t9585))) * t9119 - t8282 * t9389;
t9169 = koppelP(2,2);
t9175 = koppelP(2,1);
t9021 = -t9110 * t9169 + t9113 * t9175;
t9163 = koppelP(2,3);
t9412 = t9114 * t9163;
t8864 = t9021 * t9111 - t9412;
t9027 = t9110 * t9175 + t9113 * t9169;
t8720 = t8864 * t9112 + t9027 * t9115;
t8726 = t8864 * t9115 - t9027 * t9112;
t9459 = t9102 * t9117;
t8490 = t8720 * t9459 + t8726 * t9122;
t8496 = -t8720 * t9122 + t8726 * t9459;
t9457 = t9102 * t9122;
t8501 = t8720 * t9457 - t8726 * t9117;
t8504 = t8720 * t9117 + t8726 * t9457;
t8285 = (t8490 * t9078 - t8501 * t9090) * t9096 + t9084 * (-t8496 * t9078 + t8504 * t9090);
t9362 = t9125 * t9154;
t9377 = t9122 * t9151;
t9005 = t9117 * t9362 + t9377;
t9392 = t9117 * t9151;
t9014 = t9122 * t9362 - t9392;
t9575 = t9014 * t9102;
t9578 = t9005 * t9102;
t8219 = (((t8720 * t9575 - t8726 * t9005) * t9090 - t9078 * (t8720 * t9578 + t8726 * t9014)) * t9096 - t9084 * ((t8720 * t9005 + t8726 * t9575) * t9090 + (t8720 * t9014 - t8726 * t9578) * t9078)) * t9119 - t8285 * t9389;
t9170 = koppelP(1,2);
t9176 = koppelP(1,1);
t9022 = -t9110 * t9170 + t9113 * t9176;
t9164 = koppelP(1,3);
t9411 = t9114 * t9164;
t8865 = t9022 * t9111 - t9411;
t9028 = t9110 * t9176 + t9113 * t9170;
t8721 = t8865 * t9112 + t9028 * t9115;
t8727 = t8865 * t9115 - t9028 * t9112;
t9455 = t9103 * t9117;
t8491 = t8721 * t9455 + t8727 * t9122;
t8497 = -t8721 * t9122 + t8727 * t9455;
t9453 = t9103 * t9122;
t8502 = t8721 * t9453 - t8727 * t9117;
t8509 = t8721 * t9117 + t8727 * t9453;
t8286 = (t8491 * t9079 - t8502 * t9091) * t9097 + t9085 * (-t8497 * t9079 + t8509 * t9091);
t9361 = t9125 * t9155;
t9376 = t9122 * t9152;
t9006 = t9117 * t9361 + t9376;
t9391 = t9117 * t9152;
t9015 = t9122 * t9361 - t9391;
t9574 = t9015 * t9103;
t9577 = t9006 * t9103;
t8220 = (((t8721 * t9574 - t8727 * t9006) * t9091 - t9079 * (t8721 * t9577 + t8727 * t9015)) * t9097 - t9085 * ((t8721 * t9006 + t8727 * t9574) * t9091 + t9079 * (t8721 * t9015 - t8727 * t9577))) * t9119 - t8286 * t9389;
t9168 = koppelP(3,2);
t9174 = koppelP(3,1);
t9020 = -t9110 * t9168 + t9113 * t9174;
t9162 = koppelP(3,3);
t9413 = t9114 * t9162;
t8863 = t9020 * t9111 - t9413;
t9026 = t9110 * t9174 + t9113 * t9168;
t8719 = t8863 * t9112 + t9026 * t9115;
t8725 = t8863 * t9115 - t9026 * t9112;
t9463 = t9101 * t9117;
t8489 = t8719 * t9463 + t8725 * t9122;
t8495 = -t8719 * t9122 + t8725 * t9463;
t9461 = t9101 * t9122;
t8505 = t8719 * t9461 - t8725 * t9117;
t8508 = t8719 * t9117 + t8725 * t9461;
t8287 = (t8489 * t9077 - t8505 * t9089) * t9095 + t9083 * (-t8495 * t9077 + t8508 * t9089);
t9363 = t9125 * t9153;
t9378 = t9122 * t9150;
t9004 = t9117 * t9363 + t9378;
t9393 = t9117 * t9150;
t9013 = t9122 * t9363 - t9393;
t9576 = t9013 * t9101;
t9579 = t9004 * t9101;
t8221 = (((t8719 * t9576 - t8725 * t9004) * t9089 - (t8719 * t9579 + t8725 * t9013) * t9077) * t9095 - t9083 * ((t8719 * t9004 + t8725 * t9576) * t9089 + (t8719 * t9013 - t8725 * t9579) * t9077)) * t9119 - t8287 * t9389;
t9121 = cos(pkin(10));
t9692 = sin(pkin(10));
t9700 = sin(pkin(6)) * pkin(8);
t9016 = pkin(3) * t9121 + t9692 * t9700 + pkin(2);
t8956 = t9140 * t9016;
t9032 = -pkin(3) * t9692 + t9121 * t9700;
t8996 = t9125 * t9032;
t9699 = cos(pkin(6)) * pkin(8);
t9066 = qJ(3,4) + t9699;
t9044 = t9125 * t9066;
t9116 = t9124 ^ 2;
t9386 = t9120 * t9143;
t9724 = t9032 * t9386 - t9044;
t9358 = -t9116 * t9724 - t9044;
t9204 = 0.1e1 / ((-(t9066 * t9386 + t8996) * t9119 + t8956 * t9120) * t9124 + t9358);
t9783 = t8330 * t9204;
t8955 = t9139 * t9016;
t9065 = qJ(3,5) + t9699;
t9043 = t9125 * t9065;
t9387 = t9120 * t9142;
t9723 = t9032 * t9387 - t9043;
t9359 = -t9116 * t9723 - t9043;
t9205 = 0.1e1 / ((-(t9065 * t9387 + t8996) * t9119 + t8955 * t9120) * t9124 + t9359);
t9784 = t8327 * t9205;
t8954 = t9138 * t9016;
t9064 = qJ(3,6) + t9699;
t9042 = t9125 * t9064;
t9388 = t9120 * t9141;
t9722 = t9032 * t9388 - t9042;
t9360 = -t9116 * t9722 - t9042;
t9206 = 0.1e1 / ((-(t9064 * t9388 + t8996) * t9119 + t8954 * t9120) * t9124 + t9360);
t9785 = t8324 * t9206;
t8962 = t9152 * t9016;
t9069 = qJ(3,1) + t9699;
t9059 = t9125 * t9069;
t9383 = t9120 * t9155;
t9727 = t9032 * t9383 - t9059;
t9355 = -t9116 * t9727 - t9059;
t9201 = 0.1e1 / ((-(t9069 * t9383 + t8996) * t9119 + t8962 * t9120) * t9124 + t9355);
t9819 = t9828 * t9201;
t8961 = t9151 * t9016;
t9068 = qJ(3,2) + t9699;
t9058 = t9125 * t9068;
t9384 = t9120 * t9154;
t9726 = t9032 * t9384 - t9058;
t9356 = -t9116 * t9726 - t9058;
t9202 = 0.1e1 / ((-(t9068 * t9384 + t8996) * t9119 + t8961 * t9120) * t9124 + t9356);
t9820 = t9829 * t9202;
t8960 = t9150 * t9016;
t9067 = qJ(3,3) + t9699;
t9057 = t9125 * t9067;
t9385 = t9120 * t9153;
t9725 = t9032 * t9385 - t9057;
t9357 = -t9116 * t9725 - t9057;
t9203 = 0.1e1 / ((-(t9067 * t9385 + t8996) * t9119 + t8960 * t9120) * t9124 + t9357);
t9821 = t9830 * t9203;
t9824 = t8216 * t9784 + t8217 * t9783 + t8218 * t9785 + t8219 * t9820 + t8220 * t9819 + t8221 * t9821;
t9404 = t9115 * t9171;
t9410 = t9115 * t9165;
t9425 = t9112 * t9171;
t9431 = t9112 * t9165;
t9354 = (t9111 * t9425 + t9410) * t9113 + t9110 * (-t9111 * t9431 + t9404);
t8662 = -t9112 * t9416 + t9354;
t9573 = t9017 * t9114;
t8884 = t9111 * t9159 + t9573;
t9538 = t9080 * t9098;
t8594 = t8662 * t9104 - t8884 * t9538;
t9502 = t9092 * t9122;
t8447 = t8594 * t9117 + t8884 * t9502;
t9504 = t9092 * t9117;
t8456 = t8594 * t9122 - t8884 * t9504;
t8306 = -t8447 * t9074 + t8456 * t9086;
t9323 = t9098 * t9366;
t9251 = t9080 * t9323 + t9092 * t9138;
t9317 = t9104 * t9366;
t8474 = t8662 * t9317 - t8884 * t9251;
t9474 = t9098 * t9138;
t9253 = t9080 * t9474 - t9092 * t9366;
t9449 = t9104 * t9138;
t8510 = t8662 * t9449 - t8884 * t9253;
t8234 = ((t8474 * t9122 - t8510 * t9117) * t9086 - (t8474 * t9117 + t8510 * t9122) * t9074) * t9119 + t8306 * t9389;
t9403 = t9115 * t9172;
t9409 = t9115 * t9166;
t9424 = t9112 * t9172;
t9430 = t9112 * t9166;
t9353 = (t9111 * t9424 + t9409) * t9113 + t9110 * (-t9111 * t9430 + t9403);
t8664 = -t9112 * t9415 + t9353;
t9572 = t9018 * t9114;
t8885 = t9111 * t9160 + t9572;
t9534 = t9081 * t9099;
t8596 = t8664 * t9105 - t8885 * t9534;
t9498 = t9093 * t9122;
t8448 = t8596 * t9117 + t8885 * t9498;
t9500 = t9093 * t9117;
t8458 = t8596 * t9122 - t8885 * t9500;
t8308 = -t8448 * t9075 + t8458 * t9087;
t9322 = t9099 * t9365;
t9247 = t9081 * t9322 + t9093 * t9139;
t9316 = t9105 * t9365;
t8475 = t8664 * t9316 - t8885 * t9247;
t9469 = t9099 * t9139;
t9249 = t9081 * t9469 - t9093 * t9365;
t9446 = t9105 * t9139;
t8512 = t8664 * t9446 - t8885 * t9249;
t8235 = ((t8475 * t9122 - t8512 * t9117) * t9087 - (t8475 * t9117 + t8512 * t9122) * t9075) * t9119 + t8308 * t9389;
t9402 = t9115 * t9173;
t9408 = t9115 * t9167;
t9423 = t9112 * t9173;
t9429 = t9112 * t9167;
t9352 = (t9111 * t9423 + t9408) * t9113 + t9110 * (-t9111 * t9429 + t9402);
t8666 = -t9112 * t9414 + t9352;
t9571 = t9019 * t9114;
t8886 = t9111 * t9161 + t9571;
t9530 = t9082 * t9100;
t8598 = t8666 * t9106 - t8886 * t9530;
t9494 = t9094 * t9122;
t8449 = t8598 * t9117 + t8886 * t9494;
t9496 = t9094 * t9117;
t8460 = t8598 * t9122 - t8886 * t9496;
t8310 = -t8449 * t9076 + t8460 * t9088;
t9321 = t9100 * t9364;
t9243 = t9082 * t9321 + t9094 * t9140;
t9315 = t9106 * t9364;
t8478 = t8666 * t9315 - t8886 * t9243;
t9464 = t9100 * t9140;
t9245 = t9082 * t9464 - t9094 * t9364;
t9443 = t9106 * t9140;
t8513 = t8666 * t9443 - t8886 * t9245;
t8238 = ((t8478 * t9122 - t8513 * t9117) * t9088 - (t8478 * t9117 + t8513 * t9122) * t9076) * t9119 + t8310 * t9389;
t9401 = t9115 * t9174;
t9407 = t9115 * t9168;
t9422 = t9112 * t9174;
t9428 = t9112 * t9168;
t9351 = (t9111 * t9422 + t9407) * t9113 + t9110 * (-t9111 * t9428 + t9401);
t8668 = -t9112 * t9413 + t9351;
t9570 = t9020 * t9114;
t8887 = t9111 * t9162 + t9570;
t8600 = t8668 * t9107 - t8887 * t9526;
t9489 = t9095 * t9122;
t8451 = t8600 * t9117 + t8887 * t9489;
t9491 = t9095 * t9117;
t8462 = t8600 * t9122 - t8887 * t9491;
t8312 = -t8451 * t9077 + t8462 * t9089;
t9320 = t9101 * t9363;
t9239 = t9083 * t9320 + t9095 * t9150;
t9314 = t9107 * t9363;
t8480 = t8668 * t9314 - t8887 * t9239;
t9460 = t9101 * t9150;
t9241 = t9083 * t9460 - t9095 * t9363;
t9441 = t9107 * t9150;
t8516 = t8668 * t9441 - t8887 * t9241;
t8240 = ((t8480 * t9122 - t8516 * t9117) * t9089 - (t8480 * t9117 + t8516 * t9122) * t9077) * t9119 + t8312 * t9389;
t9400 = t9115 * t9175;
t9406 = t9115 * t9169;
t9421 = t9112 * t9175;
t9427 = t9112 * t9169;
t9350 = (t9111 * t9421 + t9406) * t9113 + t9110 * (-t9111 * t9427 + t9400);
t8670 = -t9112 * t9412 + t9350;
t9569 = t9021 * t9114;
t8888 = t9111 * t9163 + t9569;
t8602 = t8670 * t9108 - t8888 * t9521;
t9484 = t9096 * t9122;
t8453 = t8602 * t9117 + t8888 * t9484;
t9486 = t9096 * t9117;
t8464 = t8602 * t9122 - t8888 * t9486;
t8314 = -t8453 * t9078 + t8464 * t9090;
t9319 = t9102 * t9362;
t9235 = t9084 * t9319 + t9096 * t9151;
t9313 = t9108 * t9362;
t8482 = t8670 * t9313 - t8888 * t9235;
t9456 = t9102 * t9151;
t9237 = t9084 * t9456 - t9096 * t9362;
t9439 = t9108 * t9151;
t8518 = t8670 * t9439 - t8888 * t9237;
t8242 = ((t8482 * t9122 - t8518 * t9117) * t9090 - (t8482 * t9117 + t8518 * t9122) * t9078) * t9119 + t8314 * t9389;
t9399 = t9115 * t9176;
t9405 = t9115 * t9170;
t9420 = t9112 * t9176;
t9426 = t9112 * t9170;
t9349 = (t9111 * t9420 + t9405) * t9113 + t9110 * (-t9111 * t9426 + t9399);
t8672 = -t9112 * t9411 + t9349;
t9568 = t9022 * t9114;
t8889 = t9111 * t9164 + t9568;
t8604 = t8672 * t9109 - t8889 * t9516;
t9479 = t9097 * t9122;
t8455 = t8604 * t9117 + t8889 * t9479;
t9481 = t9097 * t9117;
t8466 = t8604 * t9122 - t8889 * t9481;
t8316 = -t8455 * t9079 + t8466 * t9091;
t9318 = t9103 * t9361;
t9231 = t9085 * t9318 + t9097 * t9152;
t9312 = t9109 * t9361;
t8484 = t8672 * t9312 - t8889 * t9231;
t9452 = t9103 * t9152;
t9233 = t9085 * t9452 - t9097 * t9361;
t9437 = t9109 * t9152;
t8520 = t8672 * t9437 - t8889 * t9233;
t8244 = ((t8484 * t9122 - t8520 * t9117) * t9091 - (t8484 * t9117 + t8520 * t9122) * t9079) * t9119 + t8316 * t9389;
t9823 = t8234 * t9785 + t8235 * t9784 + t8238 * t9783 + t8240 * t9821 + t8242 * t9820 + t8244 * t9819;
t9300 = -(t9111 * t9410 + t9425) * t9110 + (t9111 * t9404 - t9431) * t9113;
t8663 = -t9115 * t9416 + t9300;
t9505 = t9092 * t9098;
t8595 = t8663 * t9104 - t8884 * t9505;
t9535 = t9080 * t9122;
t8444 = -t8595 * t9117 + t8884 * t9535;
t9537 = t9080 * t9117;
t8457 = t8595 * t9122 + t8884 * t9537;
t8307 = t8444 * t9074 + t8457 * t9086;
t9252 = -t9080 * t9138 + t9092 * t9323;
t8476 = t8663 * t9317 - t8884 * t9252;
t9254 = t9080 * t9366 + t9092 * t9474;
t8511 = -t8663 * t9449 + t8884 * t9254;
t8236 = ((t8476 * t9122 + t8511 * t9117) * t9086 + (-t8476 * t9117 + t8511 * t9122) * t9074) * t9119 + t8307 * t9389;
t9299 = -(t9111 * t9409 + t9424) * t9110 + (t9111 * t9403 - t9430) * t9113;
t8665 = -t9115 * t9415 + t9299;
t9501 = t9093 * t9099;
t8597 = t8665 * t9105 - t8885 * t9501;
t9531 = t9081 * t9122;
t8445 = -t8597 * t9117 + t8885 * t9531;
t9533 = t9081 * t9117;
t8459 = t8597 * t9122 + t8885 * t9533;
t8309 = t8445 * t9075 + t8459 * t9087;
t9248 = -t9081 * t9139 + t9093 * t9322;
t8477 = t8665 * t9316 - t8885 * t9248;
t9250 = t9081 * t9365 + t9093 * t9469;
t8515 = -t8665 * t9446 + t8885 * t9250;
t8237 = ((t8477 * t9122 + t8515 * t9117) * t9087 + (-t8477 * t9117 + t8515 * t9122) * t9075) * t9119 + t8309 * t9389;
t9298 = -(t9111 * t9408 + t9423) * t9110 + (t9111 * t9402 - t9429) * t9113;
t8667 = -t9115 * t9414 + t9298;
t9497 = t9094 * t9100;
t8599 = t8667 * t9106 - t8886 * t9497;
t9527 = t9082 * t9122;
t8446 = -t8599 * t9117 + t8886 * t9527;
t9529 = t9082 * t9117;
t8461 = t8599 * t9122 + t8886 * t9529;
t8311 = t8446 * t9076 + t8461 * t9088;
t9244 = -t9082 * t9140 + t9094 * t9321;
t8479 = t8667 * t9315 - t8886 * t9244;
t9246 = t9082 * t9364 + t9094 * t9464;
t8514 = -t8667 * t9443 + t8886 * t9246;
t8239 = ((t8479 * t9122 + t8514 * t9117) * t9088 + (-t8479 * t9117 + t8514 * t9122) * t9076) * t9119 + t8311 * t9389;
t9297 = -(t9111 * t9407 + t9422) * t9110 + (t9111 * t9401 - t9428) * t9113;
t8669 = -t9115 * t9413 + t9297;
t8601 = t8669 * t9107 - t8887 * t9493;
t9522 = t9083 * t9122;
t8450 = -t8601 * t9117 + t8887 * t9522;
t9524 = t9083 * t9117;
t8463 = t8601 * t9122 + t8887 * t9524;
t8313 = t8450 * t9077 + t8463 * t9089;
t9240 = -t9083 * t9150 + t9095 * t9320;
t8481 = t8669 * t9314 - t8887 * t9240;
t9242 = t9083 * t9363 + t9095 * t9460;
t8517 = -t8669 * t9441 + t8887 * t9242;
t8241 = ((t8481 * t9122 + t8517 * t9117) * t9089 + (-t8481 * t9117 + t8517 * t9122) * t9077) * t9119 + t8313 * t9389;
t9296 = -(t9111 * t9406 + t9421) * t9110 + (t9111 * t9400 - t9427) * t9113;
t8671 = -t9115 * t9412 + t9296;
t8603 = t8671 * t9108 - t8888 * t9488;
t9517 = t9084 * t9122;
t8452 = -t8603 * t9117 + t8888 * t9517;
t9519 = t9084 * t9117;
t8465 = t8603 * t9122 + t8888 * t9519;
t8315 = t8452 * t9078 + t8465 * t9090;
t9236 = -t9084 * t9151 + t9096 * t9319;
t8483 = t8671 * t9313 - t8888 * t9236;
t9238 = t9084 * t9362 + t9096 * t9456;
t8519 = -t8671 * t9439 + t8888 * t9238;
t8243 = ((t8483 * t9122 + t8519 * t9117) * t9090 + (-t8483 * t9117 + t8519 * t9122) * t9078) * t9119 + t8315 * t9389;
t9295 = -(t9111 * t9405 + t9420) * t9110 + (t9111 * t9399 - t9426) * t9113;
t8673 = -t9115 * t9411 + t9295;
t8605 = t8673 * t9109 - t8889 * t9483;
t9512 = t9085 * t9122;
t8454 = -t8605 * t9117 + t8889 * t9512;
t9514 = t9085 * t9117;
t8467 = t8605 * t9122 + t8889 * t9514;
t8317 = t8454 * t9079 + t8467 * t9091;
t9232 = -t9085 * t9152 + t9097 * t9318;
t8485 = t8673 * t9312 - t8889 * t9232;
t9234 = t9085 * t9361 + t9097 * t9452;
t8521 = -t8673 * t9437 + t8889 * t9234;
t8245 = ((t8485 * t9122 + t8521 * t9117) * t9091 + (-t8485 * t9117 + t8521 * t9122) * t9079) * t9119 + t8317 * t9389;
t9822 = t8236 * t9785 + t8237 * t9784 + t8239 * t9783 + t8241 * t9821 + t8243 * t9820 + t8245 * t9819;
t9552 = t9064 * t9119;
t8830 = -t9141 * t9552 + t8954;
t8941 = t9119 * t8996;
t9348 = t8830 * t9120 - t8941;
t8552 = 0.1e1 / (t9124 * t9348 + t9360);
t9633 = t8552 * t8878;
t9551 = t9065 * t9119;
t8831 = -t9142 * t9551 + t8955;
t9347 = t8831 * t9120 - t8941;
t8555 = 0.1e1 / (t9124 * t9347 + t9359);
t9631 = t8555 * t8879;
t9550 = t9066 * t9119;
t8832 = -t9143 * t9550 + t8956;
t9346 = t8832 * t9120 - t8941;
t8558 = 0.1e1 / (t9124 * t9346 + t9358);
t9629 = t8558 * t8880;
t9549 = t9067 * t9119;
t8836 = -t9153 * t9549 + t8960;
t9345 = t8836 * t9120 - t8941;
t8567 = 0.1e1 / (t9124 * t9345 + t9357);
t9627 = t8567 * t8881;
t9548 = t9068 * t9119;
t8837 = -t9154 * t9548 + t8961;
t9344 = t8837 * t9120 - t8941;
t8570 = 0.1e1 / (t9124 * t9344 + t9356);
t9625 = t8570 * t8882;
t9547 = t9069 * t9119;
t8838 = -t9155 * t9547 + t8962;
t9343 = t8838 * t9120 - t8941;
t8573 = 0.1e1 / (t9124 * t9343 + t9355);
t9623 = t8573 * t8883;
t9266 = t9032 * t9366 + t9064 * t9120;
t9761 = -t9032 * t9381 - t9117 * t9266;
t9818 = t9086 * t9761;
t9265 = t9032 * t9365 + t9065 * t9120;
t9760 = -t9032 * t9380 - t9117 * t9265;
t9817 = t9087 * t9760;
t9264 = t9032 * t9364 + t9066 * t9120;
t9759 = -t9032 * t9379 - t9117 * t9264;
t9816 = t9088 * t9759;
t9263 = t9032 * t9363 + t9067 * t9120;
t9758 = -t9032 * t9378 - t9117 * t9263;
t9815 = t9089 * t9758;
t9262 = t9032 * t9362 + t9068 * t9120;
t9757 = -t9032 * t9377 - t9117 * t9262;
t9814 = t9090 * t9757;
t9261 = t9032 * t9361 + t9069 * t9120;
t9756 = -t9032 * t9376 - t9117 * t9261;
t9813 = t9091 * t9756;
t9806 = t9722 * t9098;
t9805 = t9723 * t9099;
t9804 = t9724 * t9100;
t9803 = t9725 * t9101;
t9802 = t9726 * t9102;
t9801 = t9727 * t9103;
t9212 = g(1) * t9317 - (-g(2) * t9138 + g(3) * t9323) * t9092 + (g(2) * t9323 + g(3) * t9138) * t9080;
t9218 = g(1) * t9449 + (-g(2) * t9366 - g(3) * t9474) * t9092 + (g(2) * t9474 - g(3) * t9366) * t9080;
t8997 = t9032 * t9124;
t9731 = -t9119 * t8997 - t9699;
t8866 = -t8997 - t9552;
t9776 = t8866 * t9141 + t8954;
t9673 = (((-t9117 * t9212 - t9122 * t9218) * t9086 + (t9117 * t9218 - t9122 * t9212) * t9074 + t8878 * t9388) * t9119 - (t8878 * t9125 + t9120 * t9282) * t9124) / (t9389 * t9776 + (t9064 * t9116 - qJ(3,6) + t9731) * t9125);
t9211 = g(1) * t9316 - (-g(2) * t9139 + g(3) * t9322) * t9093 + (g(2) * t9322 + g(3) * t9139) * t9081;
t9217 = g(1) * t9446 + (-g(2) * t9365 - g(3) * t9469) * t9093 + (g(2) * t9469 - g(3) * t9365) * t9081;
t8867 = -t8997 - t9551;
t9775 = t8867 * t9142 + t8955;
t9672 = (((-t9117 * t9211 - t9122 * t9217) * t9087 + (t9117 * t9217 - t9122 * t9211) * t9075 + t8879 * t9387) * t9119 - (t8879 * t9125 + t9120 * t9281) * t9124) / (t9389 * t9775 + (t9065 * t9116 - qJ(3,5) + t9731) * t9125);
t9210 = g(1) * t9315 - (-g(2) * t9140 + g(3) * t9321) * t9094 + (g(2) * t9321 + g(3) * t9140) * t9082;
t9216 = g(1) * t9443 + (-g(2) * t9364 - g(3) * t9464) * t9094 + (g(2) * t9464 - g(3) * t9364) * t9082;
t8868 = -t8997 - t9550;
t9774 = t8868 * t9143 + t8956;
t9671 = (((-t9117 * t9210 - t9122 * t9216) * t9088 + (t9117 * t9216 - t9122 * t9210) * t9076 + t8880 * t9386) * t9119 - t9124 * (t8880 * t9125 + t9120 * t9280)) / (t9389 * t9774 + (t9066 * t9116 - qJ(3,4) + t9731) * t9125);
t9209 = g(1) * t9314 - (-g(2) * t9150 + g(3) * t9320) * t9095 + (g(2) * t9320 + g(3) * t9150) * t9083;
t9215 = g(1) * t9441 - (-g(2) * t9460 + g(3) * t9363) * t9083 - (g(2) * t9363 + g(3) * t9460) * t9095;
t8869 = -t8997 - t9549;
t9773 = t8869 * t9153 + t8960;
t9670 = (((-t9117 * t9209 - t9122 * t9215) * t9089 + (t9117 * t9215 - t9122 * t9209) * t9077 + t8881 * t9385) * t9119 - t9124 * (t8881 * t9125 + t9120 * t9279)) / (t9389 * t9773 + (t9067 * t9116 - qJ(3,3) + t9731) * t9125);
t9208 = g(1) * t9313 - (-g(2) * t9151 + g(3) * t9319) * t9096 + (g(2) * t9319 + g(3) * t9151) * t9084;
t9214 = g(1) * t9439 - (-g(2) * t9456 + g(3) * t9362) * t9084 - (g(2) * t9362 + g(3) * t9456) * t9096;
t8870 = -t8997 - t9548;
t9772 = t8870 * t9154 + t8961;
t9669 = (((-t9117 * t9208 - t9122 * t9214) * t9090 + (t9117 * t9214 - t9122 * t9208) * t9078 + t8882 * t9384) * t9119 - t9124 * (t8882 * t9125 + t9120 * t9278)) / (t9389 * t9772 + (t9068 * t9116 - qJ(3,2) + t9731) * t9125);
t9207 = g(1) * t9312 - (-g(2) * t9152 + g(3) * t9318) * t9097 + (g(2) * t9318 + g(3) * t9152) * t9085;
t9213 = g(1) * t9437 - (-g(2) * t9452 + g(3) * t9361) * t9085 - (g(2) * t9361 + g(3) * t9452) * t9097;
t8871 = -t8997 - t9547;
t9771 = t8871 * t9155 + t8962;
t9668 = (((-t9117 * t9207 - t9122 * t9213) * t9091 + (t9117 * t9213 - t9122 * t9207) * t9079 + t8883 * t9383) * t9119 - (t8883 * t9125 + t9120 * t9277) * t9124) / (t9389 * t9771 + (t9069 * t9116 - qJ(3,1) + t9731) * t9125);
t8971 = t9079 * t9122 + t9091 * t9117;
t8977 = -t9079 * t9117 + t9091 * t9122;
t9624 = t8573 * (t8977 * t9389 + t9119 * (-t8971 * t9152 + t8977 * t9361));
t9337 = t9109 * t9624;
t8970 = t9078 * t9122 + t9090 * t9117;
t8976 = -t9078 * t9117 + t9090 * t9122;
t9626 = t8570 * (t8976 * t9389 + t9119 * (-t8970 * t9151 + t8976 * t9362));
t9338 = t9108 * t9626;
t8969 = t9077 * t9122 + t9089 * t9117;
t8975 = -t9077 * t9117 + t9089 * t9122;
t9628 = t8567 * (t8975 * t9389 + t9119 * (-t8969 * t9150 + t8975 * t9363));
t9339 = t9107 * t9628;
t8968 = t9076 * t9122 + t9088 * t9117;
t8974 = -t9076 * t9117 + t9088 * t9122;
t9630 = t8558 * (t8974 * t9389 + t9119 * (-t8968 * t9140 + t8974 * t9364));
t9340 = t9106 * t9630;
t8967 = t9075 * t9122 + t9087 * t9117;
t8973 = -t9075 * t9117 + t9087 * t9122;
t9632 = t8555 * (t8973 * t9389 + t9119 * (-t8967 * t9139 + t8973 * t9365));
t9341 = t9105 * t9632;
t8966 = t9074 * t9122 + t9086 * t9117;
t8972 = -t9074 * t9117 + t9086 * t9122;
t9634 = t8552 * (t8972 * t9389 + t9119 * (-t8966 * t9138 + t8972 * t9366));
t9342 = t9104 * t9634;
t9788 = t8324 * t9342 + t8327 * t9341 + t8330 * t9340 + t9337 * t9828 + t9338 * t9829 + t9339 * t9830;
t8757 = t8971 * t9097 + t8977 * t9516;
t8763 = t8971 * t9516 - t8977 * t9097;
t9638 = (-t8757 * t9389 - t9119 * (t8757 * t9361 - t8763 * t9152)) * t9201;
t8756 = t8970 * t9096 + t8976 * t9521;
t8762 = t8970 * t9521 - t8976 * t9096;
t9639 = (-t8756 * t9389 - t9119 * (t8756 * t9362 - t8762 * t9151)) * t9202;
t8755 = t8969 * t9095 + t8975 * t9526;
t8761 = t8969 * t9526 - t8975 * t9095;
t9640 = (-t8755 * t9389 - t9119 * (t8755 * t9363 - t8761 * t9150)) * t9203;
t8754 = t8968 * t9094 + t8974 * t9530;
t8760 = t8968 * t9530 - t8974 * t9094;
t9644 = (-t8754 * t9389 - t9119 * (t8754 * t9364 - t8760 * t9140)) * t9204;
t8753 = t8967 * t9093 + t8973 * t9534;
t8759 = t8967 * t9534 - t8973 * t9093;
t9645 = (-t8753 * t9389 - t9119 * (t8753 * t9365 - t8759 * t9139)) * t9205;
t8752 = t8966 * t9092 + t8972 * t9538;
t8758 = t8966 * t9538 - t8972 * t9092;
t9646 = (-t8752 * t9389 - t9119 * (t8752 * t9366 - t8758 * t9138)) * t9206;
t9787 = t8324 * t9646 + t8327 * t9645 + t8330 * t9644 + t9638 * t9828 + t9639 * t9829 + t9640 * t9830;
t8750 = t8971 * t9483 + t8977 * t9085;
t8751 = -t8971 * t9085 + t8977 * t9483;
t9641 = (t8751 * t9389 + t9119 * (-t8750 * t9152 + t8751 * t9361)) * t9201;
t8748 = t8970 * t9488 + t8976 * t9084;
t8749 = -t8970 * t9084 + t8976 * t9488;
t9642 = (t8749 * t9389 + t9119 * (-t8748 * t9151 + t8749 * t9362)) * t9202;
t8746 = t8969 * t9493 + t8975 * t9083;
t8747 = -t8969 * t9083 + t8975 * t9493;
t9643 = (t8747 * t9389 + t9119 * (-t8746 * t9150 + t8747 * t9363)) * t9203;
t8744 = t8968 * t9497 + t8974 * t9082;
t8745 = -t8968 * t9082 + t8974 * t9497;
t9647 = (t8745 * t9389 + t9119 * (-t8744 * t9140 + t8745 * t9364)) * t9204;
t8742 = t8967 * t9501 + t8973 * t9081;
t8743 = -t8967 * t9081 + t8973 * t9501;
t9648 = (t8743 * t9389 + t9119 * (-t8742 * t9139 + t8743 * t9365)) * t9205;
t8740 = t8966 * t9505 + t8972 * t9080;
t8741 = -t8966 * t9080 + t8972 * t9505;
t9649 = (t8741 * t9389 + t9119 * (-t8740 * t9138 + t8741 * t9366)) * t9206;
t9786 = t8324 * t9649 + t8327 * t9648 + t8330 * t9647 + t9641 * t9828 + t9642 * t9829 + t9643 * t9830;
t9336 = t9032 * t9119 * t9120;
t8684 = t8830 * t9125 + t9336;
t8957 = t9016 * t9141;
t8833 = t9138 * t9552 + t8957;
t8812 = t8833 * t9122;
t8612 = -t8684 * t9117 + t8812;
t8701 = t9032 * t9396 - t9122 * t9266;
t9375 = t9125 * t9098;
t9390 = t9120 * t9122;
t9398 = t9117 * t9120;
t9622 = t9348 * t9098;
t9309 = t8684 * t9122 + t9117 * t8833;
t9743 = t9074 * t9309;
t9188 = t9064 * (t9104 * (t9074 * t9390 + t9086 * t9398) + t9375) + t9116 * (t9104 * (t8701 * t9074 + t9818) + t9806) - t9124 * (t9104 * (t8612 * t9086 - t9743) + t9622);
t8686 = t8831 * t9125 + t9336;
t8958 = t9016 * t9142;
t8834 = t9139 * t9551 + t8958;
t8813 = t8834 * t9122;
t8613 = -t8686 * t9117 + t8813;
t8702 = t9032 * t9395 - t9122 * t9265;
t9374 = t9125 * t9099;
t9621 = t9347 * t9099;
t9308 = t8686 * t9122 + t9117 * t8834;
t9742 = t9075 * t9308;
t9187 = t9065 * (t9105 * (t9075 * t9390 + t9087 * t9398) + t9374) + t9116 * (t9105 * (t8702 * t9075 + t9817) + t9805) - t9124 * (t9105 * (t8613 * t9087 - t9742) + t9621);
t8688 = t8832 * t9125 + t9336;
t8959 = t9016 * t9143;
t8835 = t9140 * t9550 + t8959;
t8814 = t8835 * t9122;
t8614 = -t8688 * t9117 + t8814;
t8703 = t9032 * t9394 - t9122 * t9264;
t9373 = t9125 * t9100;
t9620 = t9346 * t9100;
t9307 = t8688 * t9122 + t9117 * t8835;
t9741 = t9076 * t9307;
t9186 = t9066 * (t9106 * (t9076 * t9390 + t9088 * t9398) + t9373) + t9116 * (t9106 * (t8703 * t9076 + t9816) + t9804) - t9124 * (t9106 * (t8614 * t9088 - t9741) + t9620);
t8693 = t8836 * t9125 + t9336;
t8963 = t9016 * t9153;
t8839 = t9150 * t9549 + t8963;
t8821 = t8839 * t9122;
t8618 = -t8693 * t9117 + t8821;
t8707 = t9032 * t9393 - t9122 * t9263;
t9372 = t9125 * t9101;
t9619 = t9345 * t9101;
t9306 = t8693 * t9122 + t9117 * t8839;
t9740 = t9077 * t9306;
t9185 = t9067 * (t9107 * (t9077 * t9390 + t9089 * t9398) + t9372) + t9116 * ((t8707 * t9077 + t9815) * t9107 + t9803) - t9124 * (t9107 * (t8618 * t9089 - t9740) + t9619);
t8695 = t8837 * t9125 + t9336;
t8964 = t9016 * t9154;
t8840 = t9151 * t9548 + t8964;
t8822 = t8840 * t9122;
t8619 = -t8695 * t9117 + t8822;
t8708 = t9032 * t9392 - t9122 * t9262;
t9371 = t9125 * t9102;
t9618 = t9344 * t9102;
t9305 = t8695 * t9122 + t9117 * t8840;
t9739 = t9078 * t9305;
t9184 = t9068 * (t9108 * (t9078 * t9390 + t9090 * t9398) + t9371) + t9116 * (t9108 * (t8708 * t9078 + t9814) + t9802) - t9124 * (t9108 * (t8619 * t9090 - t9739) + t9618);
t8697 = t8838 * t9125 + t9336;
t8965 = t9016 * t9155;
t8841 = t9152 * t9547 + t8965;
t8823 = t8841 * t9122;
t8620 = -t8697 * t9117 + t8823;
t8709 = t9032 * t9391 - t9122 * t9261;
t9370 = t9125 * t9103;
t9617 = t9343 * t9103;
t9304 = t8697 * t9122 + t9117 * t8841;
t9738 = t9079 * t9304;
t9183 = t9069 * (t9109 * (t9079 * t9390 + t9091 * t9398) + t9370) + t9116 * (t9109 * (t8709 * t9079 + t9813) + t9801) - t9124 * (t9109 * (t8620 * t9091 - t9738) + t9617);
t9311 = t9124 * t9692;
t8258 = -t8327 * t9311 + t8328 * t9121;
t9691 = t8258 * t9205;
t8259 = -t8324 * t9311 + t8325 * t9121;
t9690 = t8259 * t9206;
t9382 = t9121 * t9124;
t8260 = -t8324 * t9382 - t8325 * t9692;
t9689 = t8260 * t9206;
t8261 = -t8327 * t9382 - t8328 * t9692;
t9688 = t8261 * t9205;
t8262 = -t8330 * t9311 + t8331 * t9121;
t9687 = t8262 * t9204;
t8263 = -t8330 * t9382 - t8331 * t9692;
t9686 = t8263 * t9204;
t8264 = t8338 * t9121 - t9311 * t9828;
t9685 = t8264 * t9201;
t8265 = -t8338 * t9692 - t9382 * t9828;
t9684 = t8265 * t9201;
t8266 = t8336 * t9121 - t9311 * t9830;
t9683 = t8266 * t9203;
t8267 = -t8336 * t9692 - t9382 * t9830;
t9682 = t8267 * t9203;
t8268 = t8340 * t9121 - t9311 * t9829;
t9681 = t8268 * t9202;
t8269 = -t8340 * t9692 - t9382 * t9829;
t9680 = t8269 * t9202;
t8273 = qJ(3,6) * t8324 * t9119 + pkin(2) * t8325;
t9679 = t8273 * t9206;
t8274 = qJ(3,5) * t8327 * t9119 + pkin(2) * t8328;
t9678 = t8274 * t9205;
t8275 = qJ(3,4) * t8330 * t9119 + pkin(2) * t8331;
t9677 = t8275 * t9204;
t8276 = qJ(3,3) * t9119 * t9830 + t8336 * pkin(2);
t9676 = t8276 * t9203;
t8277 = qJ(3,2) * t9119 * t9829 + pkin(2) * t8340;
t9675 = t8277 * t9202;
t8278 = qJ(3,1) * t9119 * t9828 + pkin(2) * t8338;
t9674 = t8278 * t9201;
t9666 = t8325 * t9206;
t9663 = t8328 * t9205;
t9660 = t8331 * t9204;
t9655 = t8336 * t9203;
t9653 = t8338 * t9201;
t9651 = t8340 * t9202;
t9616 = (-t8866 * t9138 + t8957) * t9125;
t9615 = (-t8867 * t9139 + t8958) * t9125;
t9614 = (-t8868 * t9140 + t8959) * t9125;
t9613 = (-t8869 * t9150 + t8963) * t9125;
t9612 = (-t8870 * t9151 + t8964) * t9125;
t9611 = (-t8871 * t9152 + t8965) * t9125;
t9600 = t8860 * t9098;
t9599 = t8861 * t9099;
t9598 = t8862 * t9100;
t9597 = t8863 * t9101;
t9596 = t8863 * t9107;
t9595 = t8864 * t9102;
t9594 = t8864 * t9108;
t9593 = t8865 * t9103;
t9592 = t8865 * t9109;
t9567 = t9023 * t9098;
t9566 = t9024 * t9099;
t9565 = t9025 * t9100;
t9564 = t9026 * t9101;
t9563 = t9026 * t9107;
t9562 = t9027 * t9102;
t9561 = t9027 * t9108;
t9560 = t9028 * t9103;
t9559 = t9028 * t9109;
t9558 = t9032 * t9138;
t9557 = t9032 * t9139;
t9556 = t9032 * t9140;
t9555 = t9032 * t9150;
t9554 = t9032 * t9151;
t9553 = t9032 * t9152;
t9546 = t9074 * t9120;
t9545 = t9075 * t9120;
t9544 = t9076 * t9120;
t9542 = t9077 * t9120;
t9541 = t9078 * t9120;
t9539 = t9079 * t9120;
t9536 = t9080 * t9120;
t9532 = t9081 * t9120;
t9528 = t9082 * t9120;
t9523 = t9083 * t9120;
t9518 = t9084 * t9120;
t9513 = t9085 * t9120;
t9511 = t9086 * t9120;
t9510 = t9087 * t9120;
t9509 = t9088 * t9120;
t9508 = t9089 * t9120;
t9507 = t9090 * t9120;
t9506 = t9091 * t9120;
t9503 = t9092 * t9120;
t9499 = t9093 * t9120;
t9495 = t9094 * t9120;
t9490 = t9095 * t9120;
t9485 = t9096 * t9120;
t9480 = t9097 * t9120;
t9476 = t9098 * t9120;
t9471 = t9099 * t9120;
t9466 = t9100 * t9120;
t9462 = t9101 * t9120;
t9458 = t9102 * t9120;
t9454 = t9103 * t9120;
t9451 = t9104 * t9348;
t9450 = t9104 * t9722;
t9448 = t9105 * t9347;
t9447 = t9105 * t9723;
t9445 = t9106 * t9346;
t9444 = t9106 * t9724;
t9442 = t9107 * t9125;
t9440 = t9108 * t9125;
t9438 = t9109 * t9125;
t9436 = t9110 * t9112;
t9435 = t9110 * t9114;
t9434 = t9110 * t9115;
t9433 = t9112 * t9113;
t9432 = t9112 * t9114;
t9419 = t9113 * t9114;
t9418 = t9113 * t9115;
t9417 = t9114 * t9115;
t9397 = t9117 * t9125;
t9369 = t9125 * t9104;
t9368 = t9125 * t9105;
t9367 = t9125 * t9106;
t9329 = t9064 * t9476;
t9328 = t9065 * t9471;
t9327 = t9066 * t9466;
t9326 = t9067 * t9462;
t9325 = t9068 * t9458;
t9324 = t9069 * t9454;
t8246 = (t8612 * t9600 + t9023 * t9309) * t9086 + (t8612 * t9023 - t9309 * t9600) * t9074 - t8860 * t9451;
t8247 = (t8613 * t9599 + t9024 * t9308) * t9087 + (t8613 * t9024 - t9308 * t9599) * t9075 - t8861 * t9448;
t8248 = (t8614 * t9598 + t9025 * t9307) * t9088 + (t8614 * t9025 - t9307 * t9598) * t9076 - t8862 * t9445;
t8249 = (t8618 * t9597 + t9026 * t9306) * t9089 + (t8618 * t9026 - t9306 * t9597) * t9077 - t9345 * t9596;
t8250 = (t8619 * t9595 + t9027 * t9305) * t9090 + (t8619 * t9027 - t9305 * t9595) * t9078 - t9344 * t9594;
t8251 = (t8620 * t9593 + t9028 * t9304) * t9091 + (t8620 * t9028 - t9304 * t9593) * t9079 - t9343 * t9592;
t8252 = (-t8612 * t9567 + t8860 * t9309) * t9086 + (t8612 * t8860 + t9309 * t9567) * t9074 + t9023 * t9451;
t8253 = (-t8613 * t9566 + t8861 * t9308) * t9087 + (t8613 * t8861 + t9308 * t9566) * t9075 + t9024 * t9448;
t8254 = (-t8614 * t9565 + t8862 * t9307) * t9088 + (t8614 * t8862 + t9307 * t9565) * t9076 + t9025 * t9445;
t8255 = (-t8618 * t9564 + t8863 * t9306) * t9089 + (t8618 * t8863 + t9306 * t9564) * t9077 + t9345 * t9563;
t8256 = (-t8619 * t9562 + t8864 * t9305) * t9090 + (t8619 * t8864 + t9305 * t9562) * t9078 + t9344 * t9561;
t8257 = (-t8620 * t9560 + t8865 * t9304) * t9091 + (t8620 * t8865 + t9304 * t9560) * t9079 + t9343 * t9559;
t8294 = (-t8701 * t9023 + t9600 * t9761) * t9086 + (t8701 * t9600 + t9023 * t9761) * t9074 - t8860 * t9450;
t8295 = (-t8702 * t9024 + t9599 * t9760) * t9087 + (t8702 * t9599 + t9024 * t9760) * t9075 - t8861 * t9447;
t8296 = (-t8703 * t9025 + t9598 * t9759) * t9088 + (t8703 * t9598 + t9025 * t9759) * t9076 - t8862 * t9444;
t8297 = (-t8707 * t9026 + t9597 * t9758) * t9089 + (t8707 * t9597 + t9026 * t9758) * t9077 - t9725 * t9596;
t8298 = (-t8708 * t9027 + t9595 * t9757) * t9090 + (t8708 * t9595 + t9027 * t9757) * t9078 - t9726 * t9594;
t8299 = (-t8709 * t9028 + t9593 * t9756) * t9091 + (t8709 * t9593 + t9028 * t9756) * t9079 - t9727 * t9592;
t8300 = (t8701 * t8860 + t9567 * t9761) * t9086 + (t8701 * t9567 - t8860 * t9761) * t9074 - t9023 * t9450;
t8301 = (t8702 * t8861 + t9566 * t9760) * t9087 + (t8702 * t9566 - t8861 * t9760) * t9075 - t9024 * t9447;
t8302 = (t8703 * t8862 + t9565 * t9759) * t9088 + (t8703 * t9565 - t8862 * t9759) * t9076 - t9025 * t9444;
t8303 = (t8707 * t8863 + t9564 * t9758) * t9089 + (t8707 * t9564 - t8863 * t9758) * t9077 - t9725 * t9563;
t8304 = (t8708 * t8864 + t9562 * t9757) * t9090 + (t8708 * t9562 - t8864 * t9757) * t9078 - t9726 * t9561;
t8305 = (t8709 * t8865 + t9560 * t9756) * t9091 + (t8709 * t9560 - t8865 * t9756) * t9079 - t9727 * t9559;
t8393 = t8860 * t9369 + ((-t8860 * t9477 + t9023 * t9122) * t9086 - (t8860 * t9475 + t9023 * t9117) * t9074) * t9120;
t8394 = t8861 * t9368 + ((-t8861 * t9472 + t9024 * t9122) * t9087 - (t8861 * t9470 + t9024 * t9117) * t9075) * t9120;
t8395 = t8862 * t9367 + ((-t8862 * t9467 + t9025 * t9122) * t9088 - (t8862 * t9465 + t9025 * t9117) * t9076) * t9120;
t8396 = t8863 * t9442 + ((-t8863 * t9463 + t9026 * t9122) * t9089 - (t8863 * t9461 + t9026 * t9117) * t9077) * t9120;
t8397 = t8864 * t9440 + ((-t8864 * t9459 + t9027 * t9122) * t9090 - (t8864 * t9457 + t9027 * t9117) * t9078) * t9120;
t8398 = t8865 * t9438 + ((-t8865 * t9455 + t9028 * t9122) * t9091 - (t8865 * t9453 + t9028 * t9117) * t9079) * t9120;
t8399 = -t9023 * t9369 + ((t8860 * t9122 + t9023 * t9477) * t9086 + (-t8860 * t9117 + t9023 * t9475) * t9074) * t9120;
t8400 = -t9024 * t9368 + ((t8861 * t9122 + t9024 * t9472) * t9087 + (-t8861 * t9117 + t9024 * t9470) * t9075) * t9120;
t8401 = -t9025 * t9367 + ((t8862 * t9122 + t9025 * t9467) * t9088 + (-t8862 * t9117 + t9025 * t9465) * t9076) * t9120;
t8402 = -t9026 * t9442 + ((t8863 * t9122 + t9026 * t9463) * t9089 + (-t8863 * t9117 + t9026 * t9461) * t9077) * t9120;
t8403 = -t9027 * t9440 + ((t8864 * t9122 + t9027 * t9459) * t9090 + (-t8864 * t9117 + t9027 * t9457) * t9078) * t9120;
t8404 = -t9028 * t9438 + ((t8865 * t9122 + t9028 * t9455) * t9091 + (-t8865 * t9117 + t9028 * t9453) * t9079) * t9120;
t9272 = -(((t8299 * t9112 + t8305 * t9115) * t9097 - t9085 * (t8299 * t9115 - t8305 * t9112)) * t9116 + ((-t8251 * t9112 + t8257 * t9115) * t9097 + (t8251 * t9115 + t8257 * t9112) * t9085) * t9124 + ((-t8398 * t9112 + t8404 * t9115) * t9097 + t9085 * (t8398 * t9115 + t8404 * t9112)) * t9069) * t9623 - (((t8298 * t9112 + t8304 * t9115) * t9096 - t9084 * (t8298 * t9115 - t8304 * t9112)) * t9116 + ((-t8250 * t9112 + t8256 * t9115) * t9096 + (t8250 * t9115 + t8256 * t9112) * t9084) * t9124 + ((-t8397 * t9112 + t8403 * t9115) * t9096 + t9084 * (t8397 * t9115 + t8403 * t9112)) * t9068) * t9625 - (((t8297 * t9112 + t8303 * t9115) * t9095 - t9083 * (t8297 * t9115 - t8303 * t9112)) * t9116 + ((-t8249 * t9112 + t8255 * t9115) * t9095 + (t8249 * t9115 + t8255 * t9112) * t9083) * t9124 + ((-t8396 * t9112 + t8402 * t9115) * t9095 + t9083 * (t8396 * t9115 + t8402 * t9112)) * t9067) * t9627 - (((t8296 * t9112 + t8302 * t9115) * t9094 - t9082 * (t8296 * t9115 - t8302 * t9112)) * t9116 + ((-t8248 * t9112 + t8254 * t9115) * t9094 + (t8248 * t9115 + t8254 * t9112) * t9082) * t9124 + ((-t8395 * t9112 + t8401 * t9115) * t9094 + t9082 * (t8395 * t9115 + t8401 * t9112)) * t9066) * t9629 - (((t8295 * t9112 + t8301 * t9115) * t9093 - t9081 * (t8295 * t9115 - t8301 * t9112)) * t9116 + ((-t8247 * t9112 + t8253 * t9115) * t9093 + (t8247 * t9115 + t8253 * t9112) * t9081) * t9124 + ((-t8394 * t9112 + t8400 * t9115) * t9093 + t9081 * (t8394 * t9115 + t8400 * t9112)) * t9065) * t9631 - (((t8294 * t9112 + t8300 * t9115) * t9092 - t9080 * (t8294 * t9115 - t8300 * t9112)) * t9116 + ((-t8246 * t9112 + t8252 * t9115) * t9092 + (t8246 * t9115 + t8252 * t9112) * t9080) * t9124 + ((-t8393 * t9112 + t8399 * t9115) * t9092 + t9080 * (t8393 * t9115 + t8399 * t9112)) * t9064) * t9633;
t9177 = t9114 * t9183;
t9178 = t9114 * t9184;
t9179 = t9114 * t9185;
t9180 = t9114 * t9186;
t9181 = t9114 * t9187;
t9182 = t9114 * t9188;
t9219 = t8697 * t9097;
t8536 = t8841 * t9085 + t9103 * t9219;
t9220 = t8697 * t9085;
t8578 = t8841 * t9483 - t9220;
t8641 = -t9032 * t9232 - t9097 * t9324;
t8652 = -t9032 * t9234 - t9069 * t9513;
t9189 = (-(t8641 * t9122 - t8652 * t9117) * t9079 - (t8641 * t9117 + t8652 * t9122) * t9091 + t9727 * t9482) * t9116 + (-(t8536 * t9122 + t8578 * t9117) * t9079 + (-t8536 * t9117 + t8578 * t9122) * t9091 - t9343 * t9482) * t9124 + (-(t9097 * t9455 + t9512) * t9506 - (t9097 * t9453 - t9514) * t9539 + t9097 * t9438) * t9069;
t9221 = t8695 * t9096;
t8535 = t8840 * t9084 + t9102 * t9221;
t9222 = t8695 * t9084;
t8577 = t8840 * t9488 - t9222;
t8639 = -t9032 * t9236 - t9096 * t9325;
t8650 = -t9032 * t9238 - t9068 * t9518;
t9191 = (-(t8639 * t9122 - t8650 * t9117) * t9078 - (t8639 * t9117 + t8650 * t9122) * t9090 + t9726 * t9487) * t9116 + (-(t8535 * t9122 + t8577 * t9117) * t9078 + (-t8535 * t9117 + t8577 * t9122) * t9090 - t9344 * t9487) * t9124 + (-(t9096 * t9459 + t9517) * t9507 - (t9096 * t9457 - t9519) * t9541 + t9096 * t9440) * t9068;
t9223 = t8693 * t9095;
t8534 = t8839 * t9083 + t9101 * t9223;
t9224 = t8693 * t9083;
t8576 = t8839 * t9493 - t9224;
t8637 = -t9032 * t9240 - t9095 * t9326;
t8648 = -t9032 * t9242 - t9067 * t9523;
t9193 = (-(t8637 * t9122 - t8648 * t9117) * t9077 - (t8637 * t9117 + t8648 * t9122) * t9089 + t9725 * t9492) * t9116 + (-(t8534 * t9122 + t8576 * t9117) * t9077 + (-t8534 * t9117 + t8576 * t9122) * t9089 - t9345 * t9492) * t9124 + (-(t9095 * t9463 + t9522) * t9508 - (t9095 * t9461 - t9524) * t9542 + t9095 * t9442) * t9067;
t9225 = t8688 * t9094;
t8530 = t8835 * t9082 + t9100 * t9225;
t9226 = t8688 * t9082;
t8563 = t8835 * t9497 - t9226;
t8635 = -t9032 * t9244 - t9094 * t9327;
t8646 = -t9032 * t9246 - t9066 * t9528;
t9195 = (-(t8635 * t9122 - t8646 * t9117) * t9076 - (t8635 * t9117 + t8646 * t9122) * t9088 + t9094 * t9444) * t9116 + (-(t8530 * t9122 + t8563 * t9117) * t9076 + (-t8530 * t9117 + t8563 * t9122) * t9088 - t9094 * t9445) * t9124 + (-(t9094 * t9467 + t9527) * t9509 - (t9094 * t9465 - t9529) * t9544 + t9094 * t9367) * t9066;
t9227 = t8686 * t9093;
t8529 = t8834 * t9081 + t9099 * t9227;
t9228 = t8686 * t9081;
t8562 = t8834 * t9501 - t9228;
t8633 = -t9032 * t9248 - t9093 * t9328;
t8644 = -t9032 * t9250 - t9065 * t9532;
t9197 = (-(t8633 * t9122 - t8644 * t9117) * t9075 - (t8633 * t9117 + t8644 * t9122) * t9087 + t9093 * t9447) * t9116 + (-(t8529 * t9122 + t8562 * t9117) * t9075 + (-t8529 * t9117 + t8562 * t9122) * t9087 - t9093 * t9448) * t9124 + (-(t9093 * t9472 + t9531) * t9510 - (t9093 * t9470 - t9533) * t9545 + t9093 * t9368) * t9065;
t9229 = t8684 * t9092;
t8528 = t8833 * t9080 + t9098 * t9229;
t9230 = t8684 * t9080;
t8561 = t8833 * t9505 - t9230;
t8631 = -t9032 * t9252 - t9092 * t9329;
t8642 = -t9032 * t9254 - t9064 * t9536;
t9199 = (-(t8631 * t9122 - t8642 * t9117) * t9074 - (t8631 * t9117 + t8642 * t9122) * t9086 + t9092 * t9450) * t9116 + (-(t8528 * t9122 + t8561 * t9117) * t9074 + (-t8528 * t9117 + t8561 * t9122) * t9086 - t9092 * t9451) * t9124 + (-(t9092 * t9477 + t9535) * t9511 - (t9092 * t9475 - t9537) * t9546 + t9092 * t9369) * t9064;
t9271 = -(t9189 * t9568 + t9183 * t9295 + (t9111 * t9189 - t9115 * t9177) * t9164) * t9623 - (t9191 * t9569 + t9184 * t9296 + (t9111 * t9191 - t9115 * t9178) * t9163) * t9625 - (t9193 * t9570 + t9185 * t9297 + (t9111 * t9193 - t9115 * t9179) * t9162) * t9627 - (t9195 * t9571 + t9186 * t9298 + (t9111 * t9195 - t9115 * t9180) * t9161) * t9629 - (t9197 * t9572 + t9187 * t9299 + (t9111 * t9197 - t9115 * t9181) * t9160) * t9631 - (t9199 * t9573 + t9188 * t9300 + (t9111 * t9199 - t9115 * t9182) * t9159) * t9633;
t8533 = t8841 * t9097 - t9103 * t9220;
t8581 = t8841 * t9516 + t9219;
t8640 = -t9032 * t9231 - t9085 * t9324;
t8653 = t9032 * t9233 - t9069 * t9480;
t9190 = (-(t8640 * t9122 + t8653 * t9117) * t9079 + (-t8640 * t9117 + t8653 * t9122) * t9091 + t9727 * t9515) * t9116 + ((t8533 * t9122 - t8581 * t9117) * t9079 + (t8533 * t9117 + t8581 * t9122) * t9091 - t9343 * t9515) * t9124 + ((-t9085 * t9455 + t9479) * t9506 - (t9085 * t9453 + t9481) * t9539 + t9085 * t9438) * t9069;
t8532 = t8840 * t9096 - t9102 * t9222;
t8580 = t8840 * t9521 + t9221;
t8638 = -t9032 * t9235 - t9084 * t9325;
t8651 = t9032 * t9237 - t9068 * t9485;
t9192 = (-(t8638 * t9122 + t8651 * t9117) * t9078 + (-t8638 * t9117 + t8651 * t9122) * t9090 + t9726 * t9520) * t9116 + ((t8532 * t9122 - t8580 * t9117) * t9078 + (t8532 * t9117 + t8580 * t9122) * t9090 - t9344 * t9520) * t9124 + ((-t9084 * t9459 + t9484) * t9507 - (t9084 * t9457 + t9486) * t9541 + t9084 * t9440) * t9068;
t8531 = t8839 * t9095 - t9101 * t9224;
t8579 = t8839 * t9526 + t9223;
t8636 = -t9032 * t9239 - t9083 * t9326;
t8649 = t9032 * t9241 - t9067 * t9490;
t9194 = (-(t8636 * t9122 + t8649 * t9117) * t9077 + (-t8636 * t9117 + t8649 * t9122) * t9089 + t9725 * t9525) * t9116 + ((t8531 * t9122 - t8579 * t9117) * t9077 + (t8531 * t9117 + t8579 * t9122) * t9089 - t9345 * t9525) * t9124 + ((-t9083 * t9463 + t9489) * t9508 - (t9083 * t9461 + t9491) * t9542 + t9083 * t9442) * t9067;
t8527 = t8835 * t9094 - t9100 * t9226;
t8566 = t8835 * t9530 + t9225;
t8634 = -t9032 * t9243 - t9082 * t9327;
t8647 = t9032 * t9245 - t9066 * t9495;
t9196 = (-(t8634 * t9122 + t8647 * t9117) * t9076 + (-t8634 * t9117 + t8647 * t9122) * t9088 + t9082 * t9444) * t9116 + ((t8527 * t9122 - t8566 * t9117) * t9076 + (t8527 * t9117 + t8566 * t9122) * t9088 - t9082 * t9445) * t9124 + ((-t9082 * t9467 + t9494) * t9509 - (t9082 * t9465 + t9496) * t9544 + t9082 * t9367) * t9066;
t8526 = t8834 * t9093 - t9099 * t9228;
t8565 = t8834 * t9534 + t9227;
t8632 = -t9032 * t9247 - t9081 * t9328;
t8645 = t9032 * t9249 - t9065 * t9499;
t9198 = (-(t8632 * t9122 + t8645 * t9117) * t9075 + (-t8632 * t9117 + t8645 * t9122) * t9087 + t9081 * t9447) * t9116 + ((t8526 * t9122 - t8565 * t9117) * t9075 + (t8526 * t9117 + t8565 * t9122) * t9087 - t9081 * t9448) * t9124 + ((-t9081 * t9472 + t9498) * t9510 - (t9081 * t9470 + t9500) * t9545 + t9081 * t9368) * t9065;
t8525 = t8833 * t9092 - t9098 * t9230;
t8564 = t8833 * t9538 + t9229;
t8630 = -t9032 * t9251 - t9080 * t9329;
t8643 = t9032 * t9253 - t9064 * t9503;
t9200 = (-(t8630 * t9122 + t8643 * t9117) * t9074 + (-t8630 * t9117 + t8643 * t9122) * t9086 + t9080 * t9450) * t9116 + ((t8525 * t9122 - t8564 * t9117) * t9074 + (t8525 * t9117 + t8564 * t9122) * t9086 - t9080 * t9451) * t9124 + ((-t9080 * t9477 + t9502) * t9511 - (t9080 * t9475 + t9504) * t9546 + t9080 * t9369) * t9064;
t9270 = -(t9190 * t9568 + t9183 * t9349 + (t9111 * t9190 - t9112 * t9177) * t9164) * t9623 - (t9192 * t9569 + t9184 * t9350 + (t9111 * t9192 - t9112 * t9178) * t9163) * t9625 - (t9194 * t9570 + t9185 * t9351 + (t9111 * t9194 - t9112 * t9179) * t9162) * t9627 - (t9196 * t9571 + t9186 * t9352 + (t9111 * t9196 - t9112 * t9180) * t9161) * t9629 - (t9198 * t9572 + t9187 * t9353 + (t9111 * t9198 - t9112 * t9181) * t9160) * t9631 - (t9200 * t9573 + t9188 * t9354 + (t9111 * t9200 - t9112 * t9182) * t9159) * t9633;
t8893 = t9117 * t9336;
t8588 = -t8830 * t9397 + t8812 - t8893;
t8318 = -t9451 + (t8588 * t9086 - t9743) * t9098;
t8589 = -t8831 * t9397 + t8813 - t8893;
t8319 = -t9448 + (t8589 * t9087 - t9742) * t9099;
t8590 = -t8832 * t9397 + t8814 - t8893;
t8320 = -t9445 + (t8590 * t9088 - t9741) * t9100;
t8606 = -t8836 * t9397 + t8821 - t8893;
t8321 = -t9345 * t9107 + (t8606 * t9089 - t9740) * t9101;
t8607 = -t8837 * t9397 + t8822 - t8893;
t8322 = -t9344 * t9108 + (t8607 * t9090 - t9739) * t9102;
t8608 = -t8838 * t9397 + t8823 - t8893;
t8323 = -t9343 * t9109 + (t8608 * t9091 - t9738) * t9103;
t8369 = t8588 * t9074 + t9086 * t9309;
t8370 = t8589 * t9075 + t9087 * t9308;
t8371 = t8590 * t9076 + t9088 * t9307;
t8372 = t8606 * t9077 + t9089 * t9306;
t8373 = t8607 * t9078 + t9090 * t9305;
t8374 = t8608 * t9079 + t9091 * t9304;
t8657 = -t8993 * t9032 - t9064 * t9390;
t8387 = -t9450 + (t8657 * t9074 + t9818) * t9098;
t8659 = -t8994 * t9032 - t9065 * t9390;
t8388 = -t9447 + (t8659 * t9075 + t9817) * t9099;
t8661 = -t8995 * t9032 - t9066 * t9390;
t8389 = -t9444 + (t8661 * t9076 + t9816) * t9100;
t8675 = -t9013 * t9032 - t9067 * t9390;
t8390 = -t9725 * t9107 + (t8675 * t9077 + t9815) * t9101;
t8677 = -t9014 * t9032 - t9068 * t9390;
t8391 = -t9726 * t9108 + (t8677 * t9078 + t9814) * t9102;
t8679 = -t9015 * t9032 - t9069 * t9390;
t8392 = -t9727 * t9109 + (t8679 * t9079 + t9813) * t9103;
t8468 = t8657 * t9086 - t9074 * t9761;
t8469 = t8659 * t9087 - t9075 * t9760;
t8470 = t8661 * t9088 - t9076 * t9759;
t8471 = t8675 * t9089 - t9077 * t9758;
t8472 = t8677 * t9090 - t9078 * t9757;
t8473 = t8679 * t9091 - t9079 * t9756;
t8800 = -t8966 * t9476 + t9369;
t8801 = -t8967 * t9471 + t9368;
t8802 = -t8968 * t9466 + t9367;
t8803 = -t8969 * t9462 + t9442;
t8804 = -t8970 * t9458 + t9440;
t8805 = -t8971 * t9454 + t9438;
t9269 = -((t8392 * t9097 + t8473 * t9085) * t9116 + (-t8323 * t9097 + t8374 * t9085) * t9124 - t9069 * (t8805 * t9097 - t8977 * t9513)) * t9623 - ((t8391 * t9096 + t8472 * t9084) * t9116 + (-t8322 * t9096 + t8373 * t9084) * t9124 - t9068 * (t8804 * t9096 - t8976 * t9518)) * t9625 - ((t8390 * t9095 + t8471 * t9083) * t9116 + (-t8321 * t9095 + t8372 * t9083) * t9124 - t9067 * (t8803 * t9095 - t8975 * t9523)) * t9627 - ((t8389 * t9094 + t8470 * t9082) * t9116 + (-t8320 * t9094 + t8371 * t9082) * t9124 - t9066 * (t8802 * t9094 - t8974 * t9528)) * t9629 - ((t8388 * t9093 + t8469 * t9081) * t9116 + (-t8319 * t9093 + t8370 * t9081) * t9124 - t9065 * (t8801 * t9093 - t8973 * t9532)) * t9631 - ((t8387 * t9092 + t8468 * t9080) * t9116 + (-t8318 * t9092 + t8369 * t9080) * t9124 - t9064 * (t8800 * t9092 - t8972 * t9536)) * t9633;
t9268 = -((-t8392 * t9085 + t8473 * t9097) * t9116 + (t8323 * t9085 + t8374 * t9097) * t9124 + t9069 * (t8805 * t9085 + t8977 * t9480)) * t9623 - ((-t8391 * t9084 + t8472 * t9096) * t9116 + (t8322 * t9084 + t8373 * t9096) * t9124 + t9068 * (t8804 * t9084 + t8976 * t9485)) * t9625 - ((-t8390 * t9083 + t8471 * t9095) * t9116 + (t8321 * t9083 + t8372 * t9095) * t9124 + t9067 * (t8803 * t9083 + t8975 * t9490)) * t9627 - ((-t8389 * t9082 + t8470 * t9094) * t9116 + (t8320 * t9082 + t8371 * t9094) * t9124 + t9066 * (t8802 * t9082 + t8974 * t9495)) * t9629 - ((-t8388 * t9081 + t8469 * t9093) * t9116 + (t8319 * t9081 + t8370 * t9093) * t9124 + t9065 * (t8801 * t9081 + t8973 * t9499)) * t9631 - ((-t8387 * t9080 + t8468 * t9092) * t9116 + (t8318 * t9080 + t8369 * t9092) * t9124 + t9064 * (t8800 * t9080 + t8972 * t9503)) * t9633;
t9267 = -(((t8971 * t9261 + t8977 * t9553) * t9109 - t9801) * t9116 + ((-t8697 * t8971 + t8841 * t8977) * t9109 + t9617) * t9124 - t9069 * (t8971 * t9109 * t9120 + t9370)) * t9623 - (((t8970 * t9262 + t8976 * t9554) * t9108 - t9802) * t9116 + ((-t8695 * t8970 + t8840 * t8976) * t9108 + t9618) * t9124 - t9068 * (t8970 * t9108 * t9120 + t9371)) * t9625 - (((t8969 * t9263 + t8975 * t9555) * t9107 - t9803) * t9116 + ((-t8693 * t8969 + t8839 * t8975) * t9107 + t9619) * t9124 - t9067 * (t8969 * t9107 * t9120 + t9372)) * t9627 - (((t8968 * t9264 + t8974 * t9556) * t9106 - t9804) * t9116 + ((-t8688 * t8968 + t8835 * t8974) * t9106 + t9620) * t9124 - t9066 * (t8968 * t9106 * t9120 + t9373)) * t9629 - (((t8967 * t9265 + t8973 * t9557) * t9105 - t9805) * t9116 + ((-t8686 * t8967 + t8834 * t8973) * t9105 + t9621) * t9124 - t9065 * (t8967 * t9105 * t9120 + t9374)) * t9631 - (((t8966 * t9266 + t8972 * t9558) * t9104 - t9806) * t9116 + ((-t8684 * t8966 + t8833 * t8972) * t9104 + t9622) * t9124 - t9064 * (t8966 * t9104 * t9120 + t9375)) * t9633;
t8915 = -t9111 * t9418 + t9436;
t8914 = t9111 * t9434 + t9433;
t8913 = t9111 * t9433 + t9434;
t8912 = -t9111 * t9436 + t9418;
t8890 = g(1) * t9111 - g(2) * t9432 + g(3) * t9417;
t8655 = g(1) * t9419 + g(2) * t8913 + g(3) * t8915;
t8654 = g(1) * t9435 - t8912 * g(2) - t8914 * g(3);
t1 = [t9267, 0, -t8325 * t9342 - t8328 * t9341 - t8331 * t9340 - t8336 * t9339 - t8338 * t9337 - t8340 * t9338, t9788, -t8258 * t9341 - t8259 * t9342 - t8262 * t9340 - t8264 * t9337 - t8266 * t9339 - t8268 * t9338, -t8260 * t9342 - t8261 * t9341 - t8263 * t9340 - t8265 * t9337 - t8267 * t9339 - t8269 * t9338, -t9788 * t9119, (-t8278 * t9624 - (t8977 * (t9124 * t9553 + t8841) * t9125 - t9771 * t8971) * t9668) * t9109 + (-t8277 * t9626 - (t8976 * (t9124 * t9554 + t8840) * t9125 - t9772 * t8970) * t9669) * t9108 + (-t8276 * t9628 - (t8975 * (t9124 * t9555 + t8839) * t9125 - t9773 * t8969) * t9670) * t9107 + (-t8275 * t9630 - (t8974 * (t9124 * t9556 + t8835) * t9125 - t9774 * t8968) * t9671) * t9106 + (-t8274 * t9632 - (t8973 * (t9124 * t9557 + t8834) * t9125 - t9775 * t8967) * t9672) * t9105 + (-t8273 * t9634 - (t8972 * (t9124 * t9558 + t8833) * t9125 - t9776 * t8966) * t9673) * t9104 + t9267, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t8890 * t9111 + (-t8654 * t9110 - t8655 * t9113) * t9114; t9268, 0, t8325 * t9646 + t8328 * t9645 + t8331 * t9644 + t8336 * t9640 + t8338 * t9638 + t8340 * t9639, -t9787, t8258 * t9645 + t8259 * t9646 + t8262 * t9644 + t8264 * t9638 + t8266 * t9640 + t8268 * t9639, t8260 * t9646 + t8261 * t9645 + t8263 * t9644 + t8265 * t9638 + t8267 * t9640 + t8269 * t9639, t9787 * t9119, t9268 + (-t8757 * t9611 + t8763 * t9771) * t9668 + (-t8756 * t9612 + t8762 * t9772) * t9669 + (-t8755 * t9613 + t8761 * t9773) * t9670 + (-t8754 * t9614 + t8760 * t9774) * t9671 + (-t8753 * t9615 + t8759 * t9775) * t9672 + (-t8752 * t9616 + t8758 * t9776) * t9673 + t8276 * t9640 + t8277 * t9639 + t8278 * t9638 + t8275 * t9644 + t8273 * t9646 + t8274 * t9645, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8654 * t8912 - t8655 * t8913 + t8890 * t9432; t9269, 0, t8325 * t9649 + t8328 * t9648 + t8331 * t9647 + t8336 * t9643 + t8338 * t9641 + t8340 * t9642, -t9786, t8258 * t9648 + t8259 * t9649 + t8262 * t9647 + t8264 * t9641 + t8266 * t9643 + t8268 * t9642, t8260 * t9649 + t8261 * t9648 + t8263 * t9647 + t8265 * t9641 + t8267 * t9643 + t8269 * t9642, t9786 * t9119, t9269 + (-t8750 * t9771 + t8751 * t9611) * t9668 + (-t8748 * t9772 + t8749 * t9612) * t9669 + (-t8746 * t9773 + t8747 * t9613) * t9670 + (-t8744 * t9774 + t8745 * t9614) * t9671 + (-t8742 * t9775 + t8743 * t9615) * t9672 + (-t8740 * t9776 + t8741 * t9616) * t9673 + t8276 * t9643 + t8277 * t9642 + t8278 * t9641 + t8275 * t9647 + t8273 * t9649 + t8274 * t9648, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8654 * t8914 - t8655 * t8915 - t8890 * t9417; t9272, 0, t8216 * t9663 + t8217 * t9660 + t8218 * t9666 + t8219 * t9651 + t8220 * t9653 + t8221 * t9655, -t9824, t8216 * t9691 + t8217 * t9687 + t8218 * t9690 + t8219 * t9681 + t8220 * t9685 + t8221 * t9683, t8216 * t9688 + t8217 * t9686 + t8218 * t9689 + t8219 * t9680 + t8220 * t9684 + t8221 * t9682, t9824 * t9119, t9272 + (-t8282 * t9616 + t9776 * ((-t8486 * t9086 - t8498 * t9074) * t9092 + t9080 * (t8492 * t9086 + t8506 * t9074))) * t9673 + (-t8286 * t9611 + ((-t8491 * t9091 - t8502 * t9079) * t9097 + (t8497 * t9091 + t8509 * t9079) * t9085) * t9771) * t9668 + (-t8285 * t9612 + ((-t8490 * t9090 - t8501 * t9078) * t9096 + (t8496 * t9090 + t8504 * t9078) * t9084) * t9772) * t9669 + (-t8287 * t9613 + ((-t8489 * t9089 - t8505 * t9077) * t9095 + t9083 * (t8495 * t9089 + t8508 * t9077)) * t9773) * t9670 + (-t8284 * t9614 + ((-t8488 * t9088 - t8500 * t9076) * t9094 + t9082 * (t8494 * t9088 + t8503 * t9076)) * t9774) * t9671 + (-t8283 * t9615 + ((-t8487 * t9087 - t8499 * t9075) * t9093 + t9081 * (t8493 * t9087 + t8507 * t9075)) * t9775) * t9672 + t8221 * t9676 + t8217 * t9677 + t8216 * t9678 + t8219 * t9675 + t8220 * t9674 + t8218 * t9679, 0, 0, 0, 0, 0, 0, t8654 * t9111 - t8890 * t9435, t8655 * t9111 - t8890 * t9419, (-t8654 * t9113 + t8655 * t9110) * t9114, 0; t9271, 0, t8236 * t9666 + t8237 * t9663 + t8239 * t9660 + t8241 * t9655 + t8243 * t9651 + t8245 * t9653, -t9822, t8236 * t9690 + t8237 * t9691 + t8239 * t9687 + t8241 * t9683 + t8243 * t9681 + t8245 * t9685, t8236 * t9689 + t8237 * t9688 + t8239 * t9686 + t8241 * t9682 + t8243 * t9680 + t8245 * t9684, t9822 * t9119, t9271 + (t8317 * t9611 - t9771 * (-t8454 * t9091 + t8467 * t9079)) * t9668 + (t8315 * t9612 - (-t8452 * t9090 + t8465 * t9078) * t9772) * t9669 + (t8313 * t9613 - (-t8450 * t9089 + t8463 * t9077) * t9773) * t9670 + (t8311 * t9614 - (-t8446 * t9088 + t8461 * t9076) * t9774) * t9671 + (t8309 * t9615 - (-t8445 * t9087 + t8459 * t9075) * t9775) * t9672 + (t8307 * t9616 - t9776 * (-t8444 * t9086 + t8457 * t9074)) * t9673 + t8241 * t9676 + t8239 * t9677 + t8237 * t9678 + t8243 * t9675 + t8245 * t9674 + t8236 * t9679, 0, 0, 0, 0, 0, 0, -t8654 * t9432 + t8890 * t8912, -t8655 * t9432 - t8890 * t8913, -t8654 * t8913 - t8655 * t8912, 0; t9270, 0, t8234 * t9666 + t8235 * t9663 + t8238 * t9660 + t8240 * t9655 + t8242 * t9651 + t8244 * t9653, -t9823, t8234 * t9690 + t8235 * t9691 + t8238 * t9687 + t8240 * t9683 + t8242 * t9681 + t8244 * t9685, t8234 * t9689 + t8235 * t9688 + t8238 * t9686 + t8240 * t9682 + t8242 * t9680 + t8244 * t9684, t9823 * t9119, t9270 + (t8316 * t9611 - t9771 * (t8455 * t9091 + t8466 * t9079)) * t9668 + (t8314 * t9612 - (t8453 * t9090 + t8464 * t9078) * t9772) * t9669 + (t8312 * t9613 - (t8451 * t9089 + t8462 * t9077) * t9773) * t9670 + (t8310 * t9614 - (t8449 * t9088 + t8460 * t9076) * t9774) * t9671 + (t8308 * t9615 - (t8448 * t9087 + t8458 * t9075) * t9775) * t9672 + (t8306 * t9616 - t9776 * (t8447 * t9086 + t8456 * t9074)) * t9673 + t8240 * t9676 + t8238 * t9677 + t8235 * t9678 + t8242 * t9675 + t8244 * t9674 + t8234 * t9679, 0, 0, 0, 0, 0, 0, t8654 * t9417 + t8890 * t8914, t8655 * t9417 - t8890 * t8915, -t8654 * t8915 - t8655 * t8914, 0;];
tau_reg  = t1;
