% Calculate Gravitation load for parallel robot
% P6PRPRRR7V2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d4,theta1,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-17 04:21
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PRPRRR7V2A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRPRRR7V2A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-17 02:59:02
% EndTime: 2019-05-17 02:59:22
% DurationCPUTime: 21.72s
% Computational Cost: add. (11813->732), mult. (25518->1356), div. (162->18), fcn. (26501->64), ass. (0->549)
t5249 = cos(pkin(6)) * pkin(8);
t4956 = qJ(3,3) + t5249;
t5011 = cos(pkin(5));
t5002 = t5011 ^ 2;
t5012 = cos(pkin(4));
t5007 = sin(pkin(4));
t5138 = t5007 * t5011;
t5008 = cos(pkin(10));
t5242 = sin(pkin(10));
t5250 = pkin(8) * sin(pkin(6));
t4931 = -pkin(3) * t5242 + t5008 * t5250;
t4911 = t4931 * t5011;
t5006 = sin(pkin(5));
t5273 = -t5006 * t4911 - t5249;
t5165 = t4956 * t5006;
t4856 = -t4911 - t5165;
t4915 = pkin(3) * t5008 + t5242 * t5250 + pkin(2);
t5037 = sin(qJ(2,3));
t4892 = t5037 * t4915;
t5040 = cos(qJ(2,3));
t5310 = t4856 * t5040 + t4892;
t4682 = 0.1e1 / (t5138 * t5310 + (t4956 * t5002 - qJ(3,3) + t5273) * t5012);
t4957 = qJ(3,2) + t5249;
t5164 = t4957 * t5006;
t4857 = -t4911 - t5164;
t5038 = sin(qJ(2,2));
t4893 = t5038 * t4915;
t5041 = cos(qJ(2,2));
t5309 = t4857 * t5041 + t4893;
t4683 = 0.1e1 / (t5138 * t5309 + (t4957 * t5002 - qJ(3,2) + t5273) * t5012);
t4958 = qJ(3,1) + t5249;
t5163 = t4958 * t5006;
t4858 = -t4911 - t5163;
t5039 = sin(qJ(2,1));
t4894 = t5039 * t4915;
t5042 = cos(qJ(2,1));
t5308 = t4858 * t5042 + t4894;
t4684 = 0.1e1 / (t5138 * t5308 + (t4958 * t5002 - qJ(3,1) + t5273) * t5012);
t4953 = qJ(3,6) + t5249;
t5168 = t4953 * t5006;
t4853 = -t4911 - t5168;
t5025 = sin(qJ(2,6));
t4886 = t5025 * t4915;
t5028 = cos(qJ(2,6));
t5313 = t4853 * t5028 + t4886;
t4679 = 0.1e1 / (t5138 * t5313 + (t4953 * t5002 - qJ(3,6) + t5273) * t5012);
t4954 = qJ(3,5) + t5249;
t5167 = t4954 * t5006;
t4854 = -t4911 - t5167;
t5026 = sin(qJ(2,5));
t4887 = t5026 * t4915;
t5029 = cos(qJ(2,5));
t5312 = t4854 * t5029 + t4887;
t4680 = 0.1e1 / (t5138 * t5312 + (t4954 * t5002 - qJ(3,5) + t5273) * t5012);
t4955 = qJ(3,4) + t5249;
t5166 = t4955 * t5006;
t4855 = -t4911 - t5166;
t5027 = sin(qJ(2,4));
t4888 = t5027 * t4915;
t5030 = cos(qJ(2,4));
t5311 = t4855 * t5030 + t4888;
t4681 = 0.1e1 / (t5138 * t5311 + (t4955 * t5002 - qJ(3,4) + t5273) * t5012);
t4837 = -t5042 * t5163 + t4894;
t4910 = t5012 * t4931;
t4885 = t5006 * t4910;
t5114 = t4837 * t5007 - t4885;
t4949 = t5012 * t4958;
t5132 = t5007 * t5042;
t5269 = t4931 * t5132 - t4949;
t5120 = -t5002 * t5269 - t4949;
t5307 = 0.1e1 / (t5011 * t5114 + t5120);
t4836 = -t5041 * t5164 + t4893;
t5115 = t4836 * t5007 - t4885;
t4948 = t5012 * t4957;
t5133 = t5007 * t5041;
t5268 = t4931 * t5133 - t4948;
t5121 = -t5002 * t5268 - t4948;
t5306 = 0.1e1 / (t5011 * t5115 + t5121);
t4835 = -t5040 * t5165 + t4892;
t5116 = t4835 * t5007 - t4885;
t4947 = t5012 * t4956;
t5134 = t5007 * t5040;
t5267 = t4931 * t5134 - t4947;
t5122 = -t5002 * t5267 - t4947;
t5305 = 0.1e1 / (t5011 * t5116 + t5122);
t4831 = -t5030 * t5166 + t4888;
t5117 = t4831 * t5007 - t4885;
t4943 = t5012 * t4955;
t5135 = t5007 * t5030;
t5266 = t4931 * t5135 - t4943;
t5123 = -t5002 * t5266 - t4943;
t5304 = 0.1e1 / (t5011 * t5117 + t5123);
t4830 = -t5029 * t5167 + t4887;
t5118 = t4830 * t5007 - t4885;
t4942 = t5012 * t4954;
t5136 = t5007 * t5029;
t5265 = t4931 * t5136 - t4942;
t5124 = -t5002 * t5265 - t4942;
t5303 = 0.1e1 / (t5011 * t5118 + t5124);
t4829 = -t5028 * t5168 + t4886;
t5119 = t4829 * t5007 - t4885;
t4941 = t5012 * t4953;
t5137 = t5007 * t5028;
t5264 = t4931 * t5137 - t4941;
t5125 = -t5002 * t5264 - t4941;
t5302 = 0.1e1 / (t5011 * t5119 + t5125);
t5044 = xP(5);
t4997 = sin(t5044);
t5000 = cos(t5044);
t5049 = koppelP(6,3);
t5043 = xP(6);
t4996 = sin(t5043);
t4999 = cos(t5043);
t5055 = koppelP(6,1);
t5251 = koppelP(6,2);
t5263 = t4996 * t5251 - t4999 * t5055;
t4865 = t4997 * t5263 + t5000 * t5049;
t4922 = t4996 * t5055 + t4999 * t5251;
t5045 = xP(4);
t4998 = sin(t5045);
t5001 = cos(t5045);
t4757 = t4865 * t4998 - t4922 * t5001;
t4758 = t4865 * t5001 + t4922 * t4998;
t5050 = koppelP(5,3);
t5056 = koppelP(5,1);
t5252 = koppelP(5,2);
t5262 = t4996 * t5252 - t4999 * t5056;
t4867 = t4997 * t5262 + t5000 * t5050;
t4923 = t4996 * t5056 + t4999 * t5252;
t4761 = t4867 * t4998 - t4923 * t5001;
t4762 = t4867 * t5001 + t4923 * t4998;
t5051 = koppelP(4,3);
t5057 = koppelP(4,1);
t5253 = koppelP(4,2);
t5261 = t4996 * t5253 - t4999 * t5057;
t4869 = t4997 * t5261 + t5000 * t5051;
t4924 = t4996 * t5057 + t4999 * t5253;
t4765 = t4869 * t4998 - t4924 * t5001;
t4766 = t4869 * t5001 + t4924 * t4998;
t5052 = koppelP(3,3);
t5058 = koppelP(3,1);
t5254 = koppelP(3,2);
t5260 = t4996 * t5254 - t4999 * t5058;
t4871 = t4997 * t5260 + t5000 * t5052;
t4925 = t4996 * t5058 + t4999 * t5254;
t4769 = t4871 * t4998 - t4925 * t5001;
t4770 = t4871 * t5001 + t4925 * t4998;
t5053 = koppelP(2,3);
t5059 = koppelP(2,1);
t5255 = koppelP(2,2);
t5259 = t4996 * t5255 - t4999 * t5059;
t4873 = t4997 * t5259 + t5000 * t5053;
t4926 = t4996 * t5059 + t4999 * t5255;
t4773 = t4873 * t4998 - t4926 * t5001;
t4774 = t4873 * t5001 + t4926 * t4998;
t5054 = koppelP(1,3);
t5060 = koppelP(1,1);
t5256 = koppelP(1,2);
t5258 = t4996 * t5256 - t4999 * t5060;
t4875 = t4997 * t5258 + t5000 * t5054;
t4927 = t4996 * t5060 + t4999 * t5256;
t4777 = t4875 * t4998 - t4927 * t5001;
t4778 = t4875 * t5001 + t4927 * t4998;
t5047 = mrSges(4,2);
t5048 = mrSges(4,1);
t5074 = t4996 * t5047 - t4999 * t5048;
t5046 = mrSges(4,3);
t5142 = t5000 * t5046;
t5257 = t4997 * t5074 + t5142;
t5295 = -t4997 * t5046 + t5000 * t5074;
t5013 = legFrame(6,3);
t4960 = sin(t5013);
t4972 = cos(t5013);
t5004 = sin(pkin(9));
t5009 = cos(pkin(9));
t4898 = t4960 * t5009 + t4972 * t5004;
t5285 = t4898 * t5007;
t5014 = legFrame(5,3);
t4961 = sin(t5014);
t4973 = cos(t5014);
t4899 = t4961 * t5009 + t4973 * t5004;
t5284 = t4899 * t5007;
t5015 = legFrame(4,3);
t4962 = sin(t5015);
t4974 = cos(t5015);
t4900 = t4962 * t5009 + t4974 * t5004;
t5283 = t4900 * t5007;
t5016 = legFrame(3,3);
t4963 = sin(t5016);
t4975 = cos(t5016);
t4901 = t4963 * t5009 + t4975 * t5004;
t5282 = t4901 * t5007;
t5017 = legFrame(2,3);
t4964 = sin(t5017);
t4976 = cos(t5017);
t4902 = t4964 * t5009 + t4976 * t5004;
t5281 = t4902 * t5007;
t5018 = legFrame(1,3);
t4965 = sin(t5018);
t4977 = cos(t5018);
t4903 = t4965 * t5009 + t4977 * t5004;
t5280 = t4903 * t5007;
t5031 = legFrame(6,2);
t4990 = cos(t5031);
t5248 = g(1) * t4990;
t5032 = legFrame(5,2);
t4991 = cos(t5032);
t5247 = g(1) * t4991;
t5033 = legFrame(4,2);
t4992 = cos(t5033);
t5246 = g(1) * t4992;
t5034 = legFrame(3,2);
t4993 = cos(t5034);
t5245 = g(1) * t4993;
t5035 = legFrame(2,2);
t4994 = cos(t5035);
t5244 = g(1) * t4994;
t5036 = legFrame(1,2);
t4995 = cos(t5036);
t5243 = g(1) * t4995;
t5241 = (-mrSges(3,1) * t5242 - t5008 * mrSges(3,2)) * t5011 - mrSges(2,2);
t4914 = m(3) * pkin(2) + t5008 * mrSges(3,1) - mrSges(3,2) * t5242 + mrSges(2,1);
t5019 = legFrame(6,1);
t4966 = sin(t5019);
t4978 = cos(t5019);
t4984 = sin(t5031);
t5156 = t4978 * t4984;
t5162 = t4966 * t4984;
t4709 = -t4960 * t5248 + (-t4960 * t5162 + t4972 * t4978) * g(2) + (t4960 * t5156 + t4966 * t4972) * g(3);
t4710 = t4972 * t5248 + (t4960 * t4978 + t4972 * t5162) * g(2) + (t4960 * t4966 - t4972 * t5156) * g(3);
t5081 = t4709 * t5004 + t4710 * t5009;
t4643 = -t5009 * t4709 + t4710 * t5004;
t4859 = t4984 * g(1) + (-g(2) * t4966 + g(3) * t4978) * t4990;
t5087 = t4643 * t5012 - t4859 * t5007;
t5066 = t5025 * t5081 + t5028 * t5087;
t4577 = t5066 * t4914 + (t5025 * t5087 - t5028 * t5081) * ((m(3) * qJ(3,6) + mrSges(3,3)) * t5006 + t5241);
t4657 = 0.1e1 / (((-t4953 * t5137 - t4910) * t5006 + t5007 * t4886) * t5011 + t5125);
t5240 = t4577 * t4657;
t5020 = legFrame(5,1);
t4967 = sin(t5020);
t4979 = cos(t5020);
t4985 = sin(t5032);
t5155 = t4979 * t4985;
t5161 = t4967 * t4985;
t4711 = -t4961 * t5247 + (-t4961 * t5161 + t4973 * t4979) * g(2) + (t4961 * t5155 + t4967 * t4973) * g(3);
t4712 = t4973 * t5247 + (t4961 * t4979 + t4973 * t5161) * g(2) + (t4961 * t4967 - t4973 * t5155) * g(3);
t5080 = t4711 * t5004 + t4712 * t5009;
t4644 = -t5009 * t4711 + t4712 * t5004;
t4860 = t4985 * g(1) + (-g(2) * t4967 + g(3) * t4979) * t4991;
t5086 = t4644 * t5012 - t4860 * t5007;
t5065 = t5026 * t5080 + t5029 * t5086;
t4578 = t5065 * t4914 + (t5026 * t5086 - t5029 * t5080) * ((m(3) * qJ(3,5) + mrSges(3,3)) * t5006 + t5241);
t4660 = 0.1e1 / (((-t4954 * t5136 - t4910) * t5006 + t5007 * t4887) * t5011 + t5124);
t5239 = t4578 * t4660;
t5021 = legFrame(4,1);
t4968 = sin(t5021);
t4980 = cos(t5021);
t4986 = sin(t5033);
t5154 = t4980 * t4986;
t5160 = t4968 * t4986;
t4713 = -t4962 * t5246 + (-t4962 * t5160 + t4974 * t4980) * g(2) + (t4962 * t5154 + t4968 * t4974) * g(3);
t4714 = t4974 * t5246 + (t4962 * t4980 + t4974 * t5160) * g(2) + (t4962 * t4968 - t4974 * t5154) * g(3);
t5079 = t4713 * t5004 + t4714 * t5009;
t4645 = -t5009 * t4713 + t4714 * t5004;
t4861 = t4986 * g(1) + (-g(2) * t4968 + g(3) * t4980) * t4992;
t5085 = t4645 * t5012 - t4861 * t5007;
t5064 = t5027 * t5079 + t5030 * t5085;
t4579 = t5064 * t4914 + (t5027 * t5085 - t5030 * t5079) * ((m(3) * qJ(3,4) + mrSges(3,3)) * t5006 + t5241);
t4663 = 0.1e1 / (((-t4955 * t5135 - t4910) * t5006 + t5007 * t4888) * t5011 + t5123);
t5238 = t4579 * t4663;
t5022 = legFrame(3,1);
t4969 = sin(t5022);
t4981 = cos(t5022);
t4987 = sin(t5034);
t5153 = t4981 * t4987;
t5159 = t4969 * t4987;
t4715 = -t4963 * t5245 + (-t4963 * t5159 + t4975 * t4981) * g(2) + (t4963 * t5153 + t4969 * t4975) * g(3);
t4716 = t4975 * t5245 + (t4963 * t4981 + t4975 * t5159) * g(2) + (t4963 * t4969 - t4975 * t5153) * g(3);
t5078 = t4715 * t5004 + t4716 * t5009;
t4646 = -t5009 * t4715 + t4716 * t5004;
t4862 = t4987 * g(1) + (-g(2) * t4969 + g(3) * t4981) * t4993;
t5084 = t4646 * t5012 - t4862 * t5007;
t5063 = t5037 * t5078 + t5040 * t5084;
t4580 = t5063 * t4914 + (t5037 * t5084 - t5040 * t5078) * ((m(3) * qJ(3,3) + mrSges(3,3)) * t5006 + t5241);
t4666 = 0.1e1 / (((-t4956 * t5134 - t4910) * t5006 + t5007 * t4892) * t5011 + t5122);
t5237 = t4580 * t4666;
t5023 = legFrame(2,1);
t4970 = sin(t5023);
t4982 = cos(t5023);
t4988 = sin(t5035);
t5152 = t4982 * t4988;
t5158 = t4970 * t4988;
t4717 = -t4964 * t5244 + (-t4964 * t5158 + t4976 * t4982) * g(2) + (t4964 * t5152 + t4970 * t4976) * g(3);
t4718 = t4976 * t5244 + (t4964 * t4982 + t4976 * t5158) * g(2) + (t4964 * t4970 - t4976 * t5152) * g(3);
t5077 = t4717 * t5004 + t4718 * t5009;
t4647 = -t5009 * t4717 + t4718 * t5004;
t4863 = t4988 * g(1) + (-g(2) * t4970 + g(3) * t4982) * t4994;
t5083 = t4647 * t5012 - t4863 * t5007;
t5062 = t5038 * t5077 + t5041 * t5083;
t4581 = t5062 * t4914 + (t5038 * t5083 - t5041 * t5077) * ((m(3) * qJ(3,2) + mrSges(3,3)) * t5006 + t5241);
t4669 = 0.1e1 / (((-t4957 * t5133 - t4910) * t5006 + t5007 * t4893) * t5011 + t5121);
t5236 = t4581 * t4669;
t5024 = legFrame(1,1);
t4971 = sin(t5024);
t4983 = cos(t5024);
t4989 = sin(t5036);
t5151 = t4983 * t4989;
t5157 = t4971 * t4989;
t4719 = -t4965 * t5243 + (-t4965 * t5157 + t4977 * t4983) * g(2) + (t4965 * t5151 + t4971 * t4977) * g(3);
t4720 = t4977 * t5243 + (t4965 * t4983 + t4977 * t5157) * g(2) + (t4965 * t4971 - t4977 * t5151) * g(3);
t5076 = t4719 * t5004 + t4720 * t5009;
t4648 = -t5009 * t4719 + t4720 * t5004;
t4864 = t4989 * g(1) + (-g(2) * t4971 + g(3) * t4983) * t4995;
t5082 = t4648 * t5012 - t4864 * t5007;
t5061 = t5039 * t5076 + t5042 * t5082;
t4582 = t5061 * t4914 + (t5039 * t5082 - t5042 * t5076) * ((m(3) * qJ(3,1) + mrSges(3,3)) * t5006 + t5241);
t4672 = 0.1e1 / (((-t4958 * t5132 - t4910) * t5006 + t5007 * t4894) * t5011 + t5120);
t5235 = t4582 * t4672;
t4583 = t5066 * t5006 + (t4643 * t5007 + t4859 * t5012) * t5011;
t5234 = t4583 * t4679;
t4584 = t5065 * t5006 + (t4644 * t5007 + t4860 * t5012) * t5011;
t5233 = t4584 * t4680;
t4585 = t5064 * t5006 + (t4645 * t5007 + t4861 * t5012) * t5011;
t5232 = t4585 * t4681;
t4586 = t5063 * t5006 + (t4646 * t5007 + t4862 * t5012) * t5011;
t5231 = t4586 * t4682;
t4587 = t5062 * t5006 + (t4647 * t5007 + t4863 * t5012) * t5011;
t5230 = t4587 * t4683;
t4588 = t5061 * t5006 + (t4648 * t5007 + t4864 * t5012) * t5011;
t5229 = t4588 * t4684;
t4889 = t4915 * t5028;
t4832 = t5025 * t5168 + t4889;
t4904 = -t4960 * t5004 + t4972 * t5009;
t5095 = t4931 * t5006 * t5007;
t5072 = t4829 * t5012 + t5095;
t5131 = t5012 * t5028;
t5174 = t4931 * t5025;
t5228 = (((t4904 * t5174 + (t4931 * t5131 + t4953 * t5007) * t4898) * t4990 - t5264 * t4984) * t5002 + ((t4832 * t4904 - t4898 * t5072) * t4990 + t5119 * t4984) * t5011 - t4953 * (t4984 * t5012 + t4990 * t5285)) * t5302;
t4890 = t4915 * t5029;
t4833 = t5026 * t5167 + t4890;
t4905 = -t4961 * t5004 + t4973 * t5009;
t5071 = t4830 * t5012 + t5095;
t5130 = t5012 * t5029;
t5173 = t4931 * t5026;
t5227 = (((t4905 * t5173 + (t4931 * t5130 + t4954 * t5007) * t4899) * t4991 - t5265 * t4985) * t5002 + ((t4833 * t4905 - t4899 * t5071) * t4991 + t5118 * t4985) * t5011 - t4954 * (t4985 * t5012 + t4991 * t5284)) * t5303;
t4891 = t4915 * t5030;
t4834 = t5027 * t5166 + t4891;
t4906 = -t4962 * t5004 + t4974 * t5009;
t5070 = t4831 * t5012 + t5095;
t5129 = t5012 * t5030;
t5172 = t4931 * t5027;
t5226 = (((t4906 * t5172 + (t4931 * t5129 + t4955 * t5007) * t4900) * t4992 - t5266 * t4986) * t5002 + ((t4834 * t4906 - t4900 * t5070) * t4992 + t5117 * t4986) * t5011 - t4955 * (t4986 * t5012 + t4992 * t5283)) * t5304;
t4895 = t4915 * t5040;
t4838 = t5037 * t5165 + t4895;
t4907 = -t4963 * t5004 + t4975 * t5009;
t5069 = t4835 * t5012 + t5095;
t5128 = t5012 * t5040;
t5171 = t4931 * t5037;
t5225 = (((t4907 * t5171 + (t4931 * t5128 + t4956 * t5007) * t4901) * t4993 - t5267 * t4987) * t5002 + ((t4838 * t4907 - t4901 * t5069) * t4993 + t5116 * t4987) * t5011 - t4956 * (t4987 * t5012 + t4993 * t5282)) * t5305;
t4896 = t4915 * t5041;
t4839 = t5038 * t5164 + t4896;
t4908 = -t4964 * t5004 + t4976 * t5009;
t5068 = t4836 * t5012 + t5095;
t5127 = t5012 * t5041;
t5170 = t4931 * t5038;
t5224 = (((t4908 * t5170 + (t4931 * t5127 + t4957 * t5007) * t4902) * t4994 - t5268 * t4988) * t5002 + ((t4839 * t4908 - t4902 * t5068) * t4994 + t5115 * t4988) * t5011 - t4957 * (t4988 * t5012 + t4994 * t5281)) * t5306;
t4897 = t4915 * t5042;
t4840 = t5039 * t5163 + t4897;
t4909 = -t4965 * t5004 + t4977 * t5009;
t5067 = t4837 * t5012 + t5095;
t5126 = t5012 * t5042;
t5169 = t4931 * t5039;
t5223 = (((t4909 * t5169 + (t4931 * t5126 + t4958 * t5007) * t4903) * t4995 - t5269 * t4989) * t5002 + ((t4840 * t4909 - t4903 * t5067) * t4995 + t5114 * t4989) * t5011 - t4958 * (t4989 * t5012 + t4995 * t5280)) * t5307;
t4847 = t4997 * t5049 - t5000 * t5263;
t5222 = t5302 * t4847;
t5221 = t5302 * t4859;
t5220 = t4657 * t4847;
t4848 = t4997 * t5050 - t5000 * t5262;
t5219 = t5303 * t4848;
t5218 = t5303 * t4860;
t5217 = t4660 * t4848;
t4849 = t4997 * t5051 - t5000 * t5261;
t5216 = t5304 * t4849;
t5215 = t5304 * t4861;
t5214 = t4663 * t4849;
t4850 = t4997 * t5052 - t5000 * t5260;
t5213 = t5305 * t4850;
t5212 = t5305 * t4862;
t5211 = t4666 * t4850;
t4851 = t4997 * t5053 - t5000 * t5259;
t5210 = t5306 * t4851;
t5209 = t5306 * t4863;
t5208 = t4669 * t4851;
t4852 = t4997 * t5054 - t5000 * t5258;
t5207 = t5307 * t4852;
t5206 = t5307 * t4864;
t5205 = t4672 * t4852;
t5204 = t4679 * t4847;
t5203 = t4680 * t4848;
t5202 = t4681 * t4849;
t5201 = t4682 * t4850;
t5200 = t4683 * t4851;
t5199 = t4684 * t4852;
t5198 = (-t4853 * t5025 + t4889) * t5012;
t5197 = (-t4854 * t5026 + t4890) * t5012;
t5196 = (-t4855 * t5027 + t4891) * t5012;
t5195 = (-t4856 * t5037 + t4895) * t5012;
t5194 = (-t4857 * t5038 + t4896) * t5012;
t5193 = (-t4858 * t5039 + t4897) * t5012;
t5192 = t4904 * t5007;
t5191 = t4905 * t5007;
t5190 = t4906 * t5007;
t5189 = t4907 * t5007;
t5188 = t4908 * t5007;
t5187 = t4909 * t5007;
t5150 = t4997 * t4998;
t5141 = t5004 * t5007;
t5140 = t5004 * t5012;
t5139 = t5007 * t5009;
t5107 = (t4904 * (t5011 * t5174 + t4832) * t5012 - t5313 * t4898) * t4679 * t4990;
t5106 = (t4905 * (t5011 * t5173 + t4833) * t5012 - t5312 * t4899) * t4680 * t4991;
t5105 = (t4906 * (t5011 * t5172 + t4834) * t5012 - t5311 * t4900) * t4681 * t4992;
t5104 = (t4907 * (t5011 * t5171 + t4838) * t5012 - t5310 * t4901) * t4682 * t4993;
t5103 = (t4908 * (t5011 * t5170 + t4839) * t5012 - t5309 * t4902) * t4683 * t4994;
t5102 = (t4909 * (t5011 * t5169 + t4840) * t5012 - t5308 * t4903) * t4684 * t4995;
t5101 = t5302 * (t4904 * t5138 + t5006 * (-t4898 * t5025 + t4904 * t5131)) * t4990;
t5100 = t5303 * (t4905 * t5138 + t5006 * (-t4899 * t5026 + t4905 * t5130)) * t4991;
t5099 = t5304 * (t4906 * t5138 + t5006 * (-t4900 * t5027 + t4906 * t5129)) * t4992;
t5098 = t5305 * (t4907 * t5138 + t5006 * (-t4901 * t5037 + t4907 * t5128)) * t4993;
t5097 = t5306 * (t4908 * t5138 + t5006 * (-t4902 * t5038 + t4908 * t5127)) * t4994;
t5096 = t5307 * (t4909 * t5138 + t5006 * (-t4903 * t5039 + t4909 * t5126)) * t4995;
t5075 = t4996 * t5048 + t4999 * t5047;
t5003 = m(1) + m(2) + m(3);
t4883 = t5004 * t5095;
t4816 = -t4989 * t5280 + t5012 * t4995;
t4815 = -t4988 * t5281 + t5012 * t4994;
t4814 = -t4987 * t5282 + t5012 * t4993;
t4813 = -t4986 * t5283 + t5012 * t4992;
t4812 = -t4985 * t5284 + t5012 * t4991;
t4811 = -t4984 * t5285 + t5012 * t4990;
t4804 = t4903 * t5157 - t4909 * t4983;
t4803 = t4902 * t5158 - t4908 * t4982;
t4802 = t4901 * t5159 - t4907 * t4981;
t4801 = t4900 * t5160 - t4906 * t4980;
t4800 = t4899 * t5161 - t4905 * t4979;
t4799 = t4898 * t5162 - t4904 * t4978;
t4798 = t4903 * t4983 + t4909 * t5157;
t4797 = t4902 * t4982 + t4908 * t5158;
t4796 = t4901 * t4981 + t4907 * t5159;
t4795 = t4900 * t4980 + t4906 * t5160;
t4794 = t4899 * t4979 + t4905 * t5161;
t4793 = t4898 * t4978 + t4904 * t5162;
t4792 = -t4903 * t4971 + t4909 * t5151;
t4791 = t4903 * t5151 + t4909 * t4971;
t4790 = -t4902 * t4970 + t4908 * t5152;
t4789 = t4902 * t5152 + t4908 * t4970;
t4788 = -t4901 * t4969 + t4907 * t5153;
t4787 = t4901 * t5153 + t4907 * t4969;
t4786 = -t4900 * t4968 + t4906 * t5154;
t4785 = t4900 * t5154 + t4906 * t4968;
t4784 = -t4899 * t4967 + t4905 * t5155;
t4783 = t4899 * t5155 + t4905 * t4967;
t4782 = -t4898 * t4966 + t4904 * t5156;
t4781 = t4898 * t5156 + t4904 * t4966;
t4732 = -t4958 * t5139 + (t5004 * t5039 - t5009 * t5126) * t4931;
t4731 = -t4958 * t5141 + (-t5004 * t5126 - t5009 * t5039) * t4931;
t4730 = -t4957 * t5139 + (t5004 * t5038 - t5009 * t5127) * t4931;
t4729 = -t4957 * t5141 + (-t5004 * t5127 - t5009 * t5038) * t4931;
t4728 = -t4956 * t5139 + (t5004 * t5037 - t5009 * t5128) * t4931;
t4727 = -t4956 * t5141 + (-t5004 * t5128 - t5009 * t5037) * t4931;
t4726 = -t4955 * t5139 + (t5004 * t5027 - t5009 * t5129) * t4931;
t4725 = -t4955 * t5141 + (-t5004 * t5129 - t5009 * t5027) * t4931;
t4724 = -t4954 * t5139 + (t5004 * t5026 - t5009 * t5130) * t4931;
t4723 = -t4954 * t5141 + (-t5004 * t5130 - t5009 * t5026) * t4931;
t4722 = -t4953 * t5139 + (t5004 * t5025 - t5009 * t5131) * t4931;
t4721 = -t4953 * t5141 + (-t5004 * t5131 - t5009 * t5025) * t4931;
t4696 = t5004 * t4840 + t5009 * t5067;
t4695 = t5004 * t4839 + t5009 * t5068;
t4694 = t5004 * t4838 + t5009 * t5069;
t4693 = -t4837 * t5140 + t4840 * t5009 - t4883;
t4692 = -t4836 * t5140 + t4839 * t5009 - t4883;
t4691 = -t4835 * t5140 + t4838 * t5009 - t4883;
t4690 = t5004 * t4834 + t5009 * t5070;
t4689 = t5004 * t4833 + t5009 * t5071;
t4688 = t5004 * t4832 + t5009 * t5072;
t4687 = -t4831 * t5140 + t4834 * t5009 - t4883;
t4686 = -t4830 * t5140 + t4833 * t5009 - t4883;
t4685 = -t4829 * t5140 + t4832 * t5009 - t4883;
t4654 = -t4731 * t4965 + t4732 * t4977;
t4653 = -t4729 * t4964 + t4730 * t4976;
t4652 = -t4727 * t4963 + t4728 * t4975;
t4651 = -t4725 * t4962 + t4726 * t4974;
t4650 = -t4723 * t4961 + t4724 * t4973;
t4649 = -t4721 * t4960 + t4722 * t4972;
t4636 = -t5269 * t4995 + (t4731 * t4977 + t4732 * t4965) * t4989;
t4635 = -t5268 * t4994 + (t4729 * t4976 + t4730 * t4964) * t4988;
t4634 = -t5267 * t4993 + (t4727 * t4975 + t4728 * t4963) * t4987;
t4633 = -t5266 * t4992 + (t4725 * t4974 + t4726 * t4962) * t4986;
t4632 = -t5265 * t4991 + (t4723 * t4973 + t4724 * t4961) * t4985;
t4631 = -t5264 * t4990 + (t4721 * t4972 + t4722 * t4960) * t4984;
t4630 = -t4798 * t5138 - t5006 * (t4798 * t5126 - t4804 * t5039);
t4629 = -t4797 * t5138 - t5006 * (t4797 * t5127 - t4803 * t5038);
t4628 = -t4796 * t5138 - t5006 * (t4796 * t5128 - t4802 * t5037);
t4627 = t4792 * t5138 + t5006 * (-t4791 * t5039 + t4792 * t5126);
t4626 = t4790 * t5138 + t5006 * (-t4789 * t5038 + t4790 * t5127);
t4625 = t4788 * t5138 + t5006 * (-t4787 * t5037 + t4788 * t5128);
t4624 = -t4795 * t5138 - t5006 * (t4795 * t5129 - t4801 * t5027);
t4623 = -t4794 * t5138 - t5006 * (t4794 * t5130 - t4800 * t5026);
t4622 = -t4793 * t5138 - t5006 * (t4793 * t5131 - t4799 * t5025);
t4621 = t4786 * t5138 + t5006 * (-t4785 * t5027 + t4786 * t5129);
t4620 = t4784 * t5138 + t5006 * (-t4783 * t5026 + t4784 * t5130);
t4619 = t4782 * t5138 + t5006 * (-t4781 * t5025 + t4782 * t5131);
t4618 = -t4798 * t5193 + t4804 * t5308;
t4617 = -t4791 * t5308 + t4792 * t5193;
t4616 = -t4797 * t5194 + t4803 * t5309;
t4615 = -t4789 * t5309 + t4790 * t5194;
t4614 = -t4796 * t5195 + t4802 * t5310;
t4613 = -t4787 * t5310 + t4788 * t5195;
t4612 = t4693 * t4965 + t4696 * t4977;
t4611 = t4692 * t4964 + t4695 * t4976;
t4610 = t4691 * t4963 + t4694 * t4975;
t4609 = -t4795 * t5196 + t4801 * t5311;
t4608 = -t4785 * t5311 + t4786 * t5196;
t4607 = -t4794 * t5197 + t4800 * t5312;
t4606 = -t4783 * t5312 + t4784 * t5197;
t4605 = -t4793 * t5198 + t4799 * t5313;
t4604 = -t4781 * t5313 + t4782 * t5198;
t4603 = t4687 * t4962 + t4690 * t4974;
t4602 = t4686 * t4961 + t4689 * t4973;
t4601 = t4685 * t4960 + t4688 * t4972;
t4600 = -t5114 * t4995 + (t4693 * t4977 - t4696 * t4965) * t4989;
t4599 = -t5115 * t4994 + (t4692 * t4976 - t4695 * t4964) * t4988;
t4598 = -t5116 * t4993 + (t4691 * t4975 - t4694 * t4963) * t4987;
t4597 = -t5117 * t4992 + (t4687 * t4974 - t4690 * t4962) * t4986;
t4596 = -t5118 * t4991 + (t4686 * t4973 - t4689 * t4961) * t4985;
t4595 = -t5119 * t4990 + (t4685 * t4972 - t4688 * t4960) * t4984;
t4576 = (-t4636 * t4971 + t4654 * t4983) * t5002 + (t4600 * t4971 + t4612 * t4983) * t5011 + t4958 * (t4816 * t4971 + t4983 * t5187);
t4575 = (t4636 * t4983 + t4654 * t4971) * t5002 + (-t4600 * t4983 + t4612 * t4971) * t5011 - t4958 * (t4816 * t4983 - t4971 * t5187);
t4574 = (-t4635 * t4970 + t4653 * t4982) * t5002 + (t4599 * t4970 + t4611 * t4982) * t5011 + t4957 * (t4815 * t4970 + t4982 * t5188);
t4573 = (t4635 * t4982 + t4653 * t4970) * t5002 + (-t4599 * t4982 + t4611 * t4970) * t5011 - t4957 * (t4815 * t4982 - t4970 * t5188);
t4572 = (-t4634 * t4969 + t4652 * t4981) * t5002 + (t4598 * t4969 + t4610 * t4981) * t5011 + t4956 * (t4814 * t4969 + t4981 * t5189);
t4571 = (t4634 * t4981 + t4652 * t4969) * t5002 + (-t4598 * t4981 + t4610 * t4969) * t5011 - t4956 * (t4814 * t4981 - t4969 * t5189);
t4570 = (-t4633 * t4968 + t4651 * t4980) * t5002 + (t4597 * t4968 + t4603 * t4980) * t5011 + t4955 * (t4813 * t4968 + t4980 * t5190);
t4569 = (t4633 * t4980 + t4651 * t4968) * t5002 + (-t4597 * t4980 + t4603 * t4968) * t5011 - t4955 * (t4813 * t4980 - t4968 * t5190);
t4568 = (-t4632 * t4967 + t4650 * t4979) * t5002 + (t4596 * t4967 + t4602 * t4979) * t5011 + t4954 * (t4812 * t4967 + t4979 * t5191);
t4567 = (t4632 * t4979 + t4650 * t4967) * t5002 + (-t4596 * t4979 + t4602 * t4967) * t5011 - t4954 * (t4812 * t4979 - t4967 * t5191);
t4566 = (-t4631 * t4966 + t4649 * t4978) * t5002 + (t4595 * t4966 + t4601 * t4978) * t5011 + t4953 * (t4811 * t4966 + t4978 * t5192);
t4565 = (t4631 * t4978 + t4649 * t4966) * t5002 + (-t4595 * t4978 + t4601 * t4966) * t5011 - t4953 * (t4811 * t4978 - t4966 * t5192);
t1 = [-t4577 * t5101 - t4578 * t5100 - t4579 * t5099 - t4580 * t5098 - t4581 * t5097 - t4582 * t5096 - g(1) * m(4) + (-t4859 * t5228 - t4860 * t5227 - t4861 * t5226 - t4862 * t5225 - t4863 * t5224 - t4864 * t5223) * t5003 + (t4583 * t5107 + t4584 * t5106 + t4585 * t5105 + t4586 * t5104 + t4587 * t5103 + t4588 * t5102) * m(3); t4622 * t5240 + t4623 * t5239 + t4624 * t5238 + t4628 * t5237 + t4629 * t5236 + t4630 * t5235 - g(2) * m(4) + (-t4566 * t5221 - t4568 * t5218 - t4570 * t5215 - t4572 * t5212 - t4574 * t5209 - t4576 * t5206) * t5003 + (-t4605 * t5234 - t4607 * t5233 - t4609 * t5232 - t4614 * t5231 - t4616 * t5230 - t4618 * t5229) * m(3); t4619 * t5240 + t4620 * t5239 + t4621 * t5238 + t4625 * t5237 + t4626 * t5236 + t4627 * t5235 - g(3) * m(4) + (-t4565 * t5221 - t4567 * t5218 - t4569 * t5215 - t4571 * t5212 - t4573 * t5209 - t4575 * t5206) * t5003 + (-t4604 * t5234 - t4606 * t5233 - t4608 * t5232 - t4613 * t5231 - t4615 * t5230 - t4617 * t5229) * m(3); (-t4627 * t4777 - t4630 * t4778) * t5235 + (-t4626 * t4773 - t4629 * t4774) * t5236 + (-t4625 * t4769 - t4628 * t4770) * t5237 + (-t4621 * t4765 - t4624 * t4766) * t5238 + (-t4620 * t4761 - t4623 * t4762) * t5239 + (-t4619 * t4757 - t4622 * t4758) * t5240 - (-g(2) * t5257 + t5075 * g(3)) * t5001 + (t5075 * g(2) + g(3) * t5257) * t4998 + (-(-t4575 * t4777 - t4576 * t4778) * t5206 - (-t4573 * t4773 - t4574 * t4774) * t5209 - (-t4571 * t4769 - t4572 * t4770) * t5212 - (-t4569 * t4765 - t4570 * t4766) * t5215 - (-t4567 * t4761 - t4568 * t4762) * t5218 - (-t4565 * t4757 - t4566 * t4758) * t5221) * t5003 + (-(-t4617 * t4777 - t4618 * t4778) * t5229 - (-t4615 * t4773 - t4616 * t4774) * t5230 - (-t4613 * t4769 - t4614 * t4770) * t5231 - (-t4608 * t4765 - t4609 * t4766) * t5232 - (-t4606 * t4761 - t4607 * t4762) * t5233 - (-t4604 * t4757 - t4605 * t4758) * t5234) * m(3); (-t4627 * t5205 - t4778 * t5096) * t4582 + (-t4626 * t5208 - t4774 * t5097) * t4581 + (-t4625 * t5211 - t4770 * t5098) * t4580 + (-t4621 * t5214 - t4766 * t5099) * t4579 + (-t4620 * t5217 - t4762 * t5100) * t4578 + (-t4619 * t5220 - t4758 * t5101) * t4577 - t5295 * g(3) + (-t5075 * t4998 - t5001 * t5257) * g(1) + (-(-t4575 * t5207 + t4778 * t5223) * t4864 - (-t4573 * t5210 + t4774 * t5224) * t4863 - (-t4571 * t5213 + t4770 * t5225) * t4862 - (-t4569 * t5216 + t4766 * t5226) * t4861 - (-t4567 * t5219 + t4762 * t5227) * t4860 - (-t4565 * t5222 + t4758 * t5228) * t4859) * t5003 + (-(-t4617 * t5199 - t4778 * t5102) * t4588 - (-t4615 * t5200 - t4774 * t5103) * t4587 - (-t4613 * t5201 - t4770 * t5104) * t4586 - (-t4608 * t5202 - t4766 * t5105) * t4585 - (-t4606 * t5203 - t4762 * t5106) * t4584 - (-t4604 * t5204 - t4758 * t5107) * t4583) * m(3); (t4630 * t5205 - t4777 * t5096) * t4582 + (t4629 * t5208 - t4773 * t5097) * t4581 + (t4628 * t5211 - t4769 * t5098) * t4580 + (t4624 * t5214 - t4765 * t5099) * t4579 + (t4623 * t5217 - t4761 * t5100) * t4578 + (t4622 * t5220 - t4757 * t5101) * t4577 + t5295 * g(2) + (-t4998 * t5142 + (t5001 * t5047 + t5048 * t5150) * t4999 + (t5001 * t5048 - t5047 * t5150) * t4996) * g(1) + (-(t4576 * t5207 + t4777 * t5223) * t4864 - (t4574 * t5210 + t4773 * t5224) * t4863 - (t4572 * t5213 + t4769 * t5225) * t4862 - (t4570 * t5216 + t4765 * t5226) * t4861 - (t4568 * t5219 + t4761 * t5227) * t4860 - (t4566 * t5222 + t4757 * t5228) * t4859) * t5003 + (-(t4618 * t5199 - t4777 * t5102) * t4588 - (t4616 * t5200 - t4773 * t5103) * t4587 - (t4614 * t5201 - t4769 * t5104) * t4586 - (t4609 * t5202 - t4765 * t5105) * t4585 - (t4607 * t5203 - t4761 * t5106) * t4584 - (t4605 * t5204 - t4757 * t5107) * t4583) * m(3);];
taugX  = t1;
