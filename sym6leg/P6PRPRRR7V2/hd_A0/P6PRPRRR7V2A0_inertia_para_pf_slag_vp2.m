% Calculate inertia matrix for parallel robot
% P6PRPRRR7V2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d4,theta1,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% MX [6x6]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-17 04:21
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P6PRPRRR7V2A0_inertia_para_pf_slag_vp2(xP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRPRRR7V2A0_inertia_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-17 02:55:33
% EndTime: 2019-05-17 02:56:25
% DurationCPUTime: 56.10s
% Computational Cost: add. (301149->1488), mult. (651477->2323), div. (5994->18), fcn. (666898->64), ass. (0->844)
t2832 = (m(3) * qJ(3,1));
t2831 = (m(3) * qJ(3,2));
t2830 = (m(3) * qJ(3,3));
t2829 = (m(3) * qJ(3,4));
t2828 = (m(3) * qJ(3,5));
t2827 = (m(3) * qJ(3,6));
t2738 = cos(pkin(6)) * pkin(8);
t2321 = qJ(3,3) + t2738;
t2384 = cos(pkin(5));
t2374 = t2384 ^ 2;
t2385 = cos(pkin(4));
t2380 = sin(pkin(4));
t2565 = t2380 * t2384;
t2381 = cos(pkin(10));
t2737 = sin(pkin(10));
t2739 = pkin(8) * sin(pkin(6));
t2286 = -pkin(3) * t2737 + t2381 * t2739;
t2379 = sin(pkin(5));
t2567 = t2379 * t2384;
t2784 = -t2286 * t2567 - t2738;
t2264 = t2286 * t2384;
t2604 = t2321 * t2379;
t2209 = -t2264 - t2604;
t2270 = pkin(3) * t2381 + t2737 * t2739 + pkin(2);
t2411 = sin(qJ(2,3));
t2239 = t2411 * t2270;
t2414 = cos(qJ(2,3));
t2822 = t2209 * t2414 + t2239;
t2037 = 0.1e1 / (t2565 * t2822 + (t2321 * t2374 - qJ(3,3) + t2784) * t2385);
t2322 = qJ(3,2) + t2738;
t2603 = t2322 * t2379;
t2210 = -t2264 - t2603;
t2412 = sin(qJ(2,2));
t2240 = t2412 * t2270;
t2415 = cos(qJ(2,2));
t2821 = t2210 * t2415 + t2240;
t2038 = 0.1e1 / (t2565 * t2821 + (t2322 * t2374 - qJ(3,2) + t2784) * t2385);
t2323 = qJ(3,1) + t2738;
t2602 = t2323 * t2379;
t2211 = -t2264 - t2602;
t2413 = sin(qJ(2,1));
t2241 = t2413 * t2270;
t2416 = cos(qJ(2,1));
t2820 = t2211 * t2416 + t2241;
t2039 = 0.1e1 / (t2565 * t2820 + (t2323 * t2374 - qJ(3,1) + t2784) * t2385);
t2317 = qJ(3,6) + t2738;
t2607 = t2317 * t2379;
t2206 = -t2264 - t2607;
t2398 = sin(qJ(2,6));
t2233 = t2398 * t2270;
t2401 = cos(qJ(2,6));
t2825 = t2206 * t2401 + t2233;
t2034 = 0.1e1 / (t2565 * t2825 + (t2317 * t2374 - qJ(3,6) + t2784) * t2385);
t2318 = qJ(3,5) + t2738;
t2606 = t2318 * t2379;
t2207 = -t2264 - t2606;
t2399 = sin(qJ(2,5));
t2234 = t2399 * t2270;
t2402 = cos(qJ(2,5));
t2824 = t2207 * t2402 + t2234;
t2035 = 0.1e1 / (t2565 * t2824 + (t2318 * t2374 - qJ(3,5) + t2784) * t2385);
t2319 = qJ(3,4) + t2738;
t2605 = t2319 * t2379;
t2208 = -t2264 - t2605;
t2400 = sin(qJ(2,4));
t2235 = t2400 * t2270;
t2403 = cos(qJ(2,4));
t2823 = t2208 * t2403 + t2235;
t2036 = 0.1e1 / (t2565 * t2823 + (t2319 * t2374 - qJ(3,4) + t2784) * t2385);
t2826 = -2 * mrSges(3,3);
t2419 = xP(6);
t2367 = sin(t2419);
t2370 = cos(t2419);
t2423 = mrSges(4,2);
t2424 = mrSges(4,1);
t2267 = -t2367 * t2423 + t2370 * t2424;
t2188 = -t2416 * t2602 + t2241;
t2263 = t2385 * t2286;
t2228 = t2379 * t2263;
t2539 = t2188 * t2380 - t2228;
t2310 = t2385 * t2323;
t2559 = t2380 * t2416;
t2780 = t2286 * t2559 - t2310;
t2546 = -t2374 * t2780 - t2310;
t2819 = 0.1e1 / (t2384 * t2539 + t2546);
t2187 = -t2415 * t2603 + t2240;
t2540 = t2187 * t2380 - t2228;
t2309 = t2385 * t2322;
t2560 = t2380 * t2415;
t2779 = t2286 * t2560 - t2309;
t2547 = -t2374 * t2779 - t2309;
t2818 = 0.1e1 / (t2384 * t2540 + t2547);
t2186 = -t2414 * t2604 + t2239;
t2541 = t2186 * t2380 - t2228;
t2308 = t2385 * t2321;
t2561 = t2380 * t2414;
t2778 = t2286 * t2561 - t2308;
t2548 = -t2374 * t2778 - t2308;
t2817 = 0.1e1 / (t2384 * t2541 + t2548);
t2182 = -t2403 * t2605 + t2235;
t2542 = t2182 * t2380 - t2228;
t2304 = t2385 * t2319;
t2562 = t2380 * t2403;
t2777 = t2286 * t2562 - t2304;
t2549 = -t2374 * t2777 - t2304;
t2816 = 0.1e1 / (t2384 * t2542 + t2549);
t2181 = -t2402 * t2606 + t2234;
t2543 = t2181 * t2380 - t2228;
t2303 = t2385 * t2318;
t2563 = t2380 * t2402;
t2776 = t2286 * t2563 - t2303;
t2550 = -t2374 * t2776 - t2303;
t2815 = 0.1e1 / (t2384 * t2543 + t2550);
t2180 = -t2401 * t2607 + t2233;
t2544 = t2180 * t2380 - t2228;
t2302 = t2385 * t2317;
t2564 = t2380 * t2401;
t2775 = t2286 * t2564 - t2302;
t2551 = -t2374 * t2775 - t2302;
t2814 = 0.1e1 / (t2384 * t2544 + t2551);
t2420 = xP(5);
t2368 = sin(t2420);
t2371 = cos(t2420);
t2431 = koppelP(6,3);
t2437 = koppelP(6,1);
t2756 = koppelP(6,2);
t2774 = t2367 * t2756 - t2370 * t2437;
t2213 = t2368 * t2774 + t2371 * t2431;
t2277 = t2367 * t2437 + t2370 * t2756;
t2421 = xP(4);
t2369 = sin(t2421);
t2372 = cos(t2421);
t2100 = t2213 * t2369 - t2277 * t2372;
t2101 = t2213 * t2372 + t2277 * t2369;
t2432 = koppelP(5,3);
t2438 = koppelP(5,1);
t2757 = koppelP(5,2);
t2773 = t2367 * t2757 - t2370 * t2438;
t2215 = t2368 * t2773 + t2371 * t2432;
t2278 = t2367 * t2438 + t2370 * t2757;
t2104 = t2215 * t2369 - t2278 * t2372;
t2105 = t2215 * t2372 + t2278 * t2369;
t2433 = koppelP(4,3);
t2439 = koppelP(4,1);
t2758 = koppelP(4,2);
t2772 = t2367 * t2758 - t2370 * t2439;
t2217 = t2368 * t2772 + t2371 * t2433;
t2279 = t2367 * t2439 + t2370 * t2758;
t2108 = t2217 * t2369 - t2279 * t2372;
t2109 = t2217 * t2372 + t2279 * t2369;
t2434 = koppelP(3,3);
t2440 = koppelP(3,1);
t2759 = koppelP(3,2);
t2771 = t2367 * t2759 - t2370 * t2440;
t2219 = t2368 * t2771 + t2371 * t2434;
t2280 = t2367 * t2440 + t2370 * t2759;
t2112 = t2219 * t2369 - t2280 * t2372;
t2113 = t2219 * t2372 + t2280 * t2369;
t2435 = koppelP(2,3);
t2441 = koppelP(2,1);
t2760 = koppelP(2,2);
t2770 = t2367 * t2760 - t2370 * t2441;
t2221 = t2368 * t2770 + t2371 * t2435;
t2281 = t2367 * t2441 + t2370 * t2760;
t2116 = t2221 * t2369 - t2281 * t2372;
t2117 = t2221 * t2372 + t2281 * t2369;
t2436 = koppelP(1,3);
t2442 = koppelP(1,1);
t2761 = koppelP(1,2);
t2769 = t2367 * t2761 - t2370 * t2442;
t2223 = t2368 * t2769 + t2371 * t2436;
t2282 = t2367 * t2442 + t2370 * t2761;
t2120 = t2223 * t2369 - t2282 * t2372;
t2121 = t2223 * t2372 + t2282 * t2369;
t2807 = Ifges(3,1) - (Ifges(3,1) - Ifges(3,2)) * t2381 ^ 2;
t2236 = t2270 * t2401;
t2183 = t2398 * t2607 + t2236;
t2386 = legFrame(6,3);
t2331 = sin(t2386);
t2343 = cos(t2386);
t2377 = sin(pkin(9));
t2382 = cos(pkin(9));
t2248 = t2331 * t2382 + t2343 * t2377;
t2254 = -t2331 * t2377 + t2343 * t2382;
t2614 = t2286 * t2398;
t2803 = (t2254 * (t2384 * t2614 + t2183) * t2385 - t2825 * t2248) * t2034;
t2237 = t2270 * t2402;
t2184 = t2399 * t2606 + t2237;
t2387 = legFrame(5,3);
t2332 = sin(t2387);
t2344 = cos(t2387);
t2249 = t2332 * t2382 + t2344 * t2377;
t2255 = -t2332 * t2377 + t2344 * t2382;
t2613 = t2286 * t2399;
t2802 = (t2255 * (t2384 * t2613 + t2184) * t2385 - t2824 * t2249) * t2035;
t2238 = t2270 * t2403;
t2185 = t2400 * t2605 + t2238;
t2388 = legFrame(4,3);
t2333 = sin(t2388);
t2345 = cos(t2388);
t2250 = t2333 * t2382 + t2345 * t2377;
t2256 = -t2333 * t2377 + t2345 * t2382;
t2612 = t2286 * t2400;
t2801 = (t2256 * (t2384 * t2612 + t2185) * t2385 - t2823 * t2250) * t2036;
t2242 = t2270 * t2414;
t2189 = t2411 * t2604 + t2242;
t2389 = legFrame(3,3);
t2334 = sin(t2389);
t2346 = cos(t2389);
t2251 = t2334 * t2382 + t2346 * t2377;
t2257 = -t2334 * t2377 + t2346 * t2382;
t2611 = t2286 * t2411;
t2800 = (t2257 * (t2384 * t2611 + t2189) * t2385 - t2822 * t2251) * t2037;
t2243 = t2270 * t2415;
t2190 = t2412 * t2603 + t2243;
t2390 = legFrame(2,3);
t2335 = sin(t2390);
t2347 = cos(t2390);
t2252 = t2335 * t2382 + t2347 * t2377;
t2258 = -t2335 * t2377 + t2347 * t2382;
t2610 = t2286 * t2412;
t2799 = (t2258 * (t2384 * t2610 + t2190) * t2385 - t2821 * t2252) * t2038;
t2244 = t2270 * t2416;
t2191 = t2413 * t2602 + t2244;
t2391 = legFrame(1,3);
t2336 = sin(t2391);
t2348 = cos(t2391);
t2253 = t2336 * t2382 + t2348 * t2377;
t2259 = -t2336 * t2377 + t2348 * t2382;
t2609 = t2286 * t2413;
t2798 = (t2259 * (t2384 * t2609 + t2191) * t2385 - t2820 * t2253) * t2039;
t2292 = t2370 * Ifges(4,5) - t2367 * Ifges(4,6);
t2791 = t2292 * t2368;
t2422 = mrSges(4,3);
t2198 = t2267 * t2368 - t2371 * t2422;
t2266 = t2367 * t2424 + t2370 * t2423;
t2230 = t2372 * t2266;
t2545 = t2198 * t2369 + t2230;
t2179 = t2198 * t2372;
t2578 = t2369 * t2266;
t2768 = t2578 - t2179;
t2767 = (t2826 - t2827) * qJ(3,6);
t2766 = (t2826 - t2828) * qJ(3,5);
t2765 = (t2826 - t2829) * qJ(3,4);
t2764 = (t2826 - t2830) * qJ(3,3);
t2763 = (t2826 - t2831) * qJ(3,2);
t2762 = (t2826 - t2832) * qJ(3,1);
t2755 = 2 * Ifges(4,4);
t2320 = t2385 * t2384;
t2245 = -t2379 * t2564 + t2320;
t2754 = m(3) * t2245;
t2246 = -t2379 * t2563 + t2320;
t2753 = m(3) * t2246;
t2247 = -t2379 * t2562 + t2320;
t2752 = m(3) * t2247;
t2260 = -t2379 * t2561 + t2320;
t2751 = m(3) * t2260;
t2261 = -t2379 * t2560 + t2320;
t2750 = m(3) * t2261;
t2262 = -t2379 * t2559 + t2320;
t2749 = m(3) * t2262;
t2733 = Ifges(4,2) - Ifges(4,3);
t2732 = (-mrSges(3,1) * t2737 - t2381 * mrSges(3,2)) * t2384 - mrSges(2,2);
t2731 = Ifges(4,4) * t2368;
t2730 = Ifges(4,5) * t2367;
t2729 = t2372 * Ifges(4,4);
t2486 = t2286 * t2379 * t2380;
t2225 = t2377 * t2486;
t2568 = t2377 * t2385;
t2040 = -t2180 * t2568 + t2183 * t2382 - t2225;
t2454 = t2180 * t2385 + t2486;
t2043 = t2377 * t2183 + t2382 * t2454;
t2405 = legFrame(6,2);
t2355 = sin(t2405);
t2361 = cos(t2405);
t1956 = -t2544 * t2361 + (t2040 * t2343 - t2043 * t2331) * t2355;
t1962 = t2040 * t2331 + t2043 * t2343;
t2558 = t2385 * t2401;
t2569 = t2377 * t2380;
t2064 = -t2317 * t2569 + (-t2377 * t2558 - t2382 * t2398) * t2286;
t2566 = t2380 * t2382;
t2065 = -t2317 * t2566 + (t2377 * t2398 - t2382 * t2558) * t2286;
t1992 = -t2775 * t2361 + (t2064 * t2343 + t2065 * t2331) * t2355;
t2004 = -t2064 * t2331 + t2065 * t2343;
t2160 = -t2248 * t2355 * t2380 + t2385 * t2361;
t2392 = legFrame(6,1);
t2337 = sin(t2392);
t2349 = cos(t2392);
t2632 = t2254 * t2380;
t1902 = (t1992 * t2349 + t2004 * t2337) * t2374 + (-t1956 * t2349 + t1962 * t2337) * t2384 - t2317 * (t2160 * t2349 - t2337 * t2632);
t2728 = t1902 * t2814;
t1903 = (-t1992 * t2337 + t2004 * t2349) * t2374 + (t1956 * t2337 + t1962 * t2349) * t2384 + t2317 * (t2160 * t2337 + t2349 * t2632);
t2727 = t1903 * t2814;
t2041 = -t2181 * t2568 + t2184 * t2382 - t2225;
t2453 = t2181 * t2385 + t2486;
t2044 = t2377 * t2184 + t2382 * t2453;
t2406 = legFrame(5,2);
t2356 = sin(t2406);
t2362 = cos(t2406);
t1957 = -t2543 * t2362 + (t2041 * t2344 - t2044 * t2332) * t2356;
t1963 = t2041 * t2332 + t2044 * t2344;
t2557 = t2385 * t2402;
t2066 = -t2318 * t2569 + (-t2377 * t2557 - t2382 * t2399) * t2286;
t2067 = -t2318 * t2566 + (t2377 * t2399 - t2382 * t2557) * t2286;
t1993 = -t2776 * t2362 + (t2066 * t2344 + t2067 * t2332) * t2356;
t2005 = -t2066 * t2332 + t2067 * t2344;
t2161 = -t2249 * t2356 * t2380 + t2385 * t2362;
t2393 = legFrame(5,1);
t2338 = sin(t2393);
t2350 = cos(t2393);
t2631 = t2255 * t2380;
t1904 = (t1993 * t2350 + t2005 * t2338) * t2374 + (-t1957 * t2350 + t1963 * t2338) * t2384 - t2318 * (t2161 * t2350 - t2338 * t2631);
t2726 = t1904 * t2815;
t1905 = (-t1993 * t2338 + t2005 * t2350) * t2374 + (t1957 * t2338 + t1963 * t2350) * t2384 + t2318 * (t2161 * t2338 + t2350 * t2631);
t2725 = t1905 * t2815;
t2042 = -t2182 * t2568 + t2185 * t2382 - t2225;
t2452 = t2182 * t2385 + t2486;
t2045 = t2377 * t2185 + t2382 * t2452;
t2407 = legFrame(4,2);
t2357 = sin(t2407);
t2363 = cos(t2407);
t1958 = -t2542 * t2363 + (t2042 * t2345 - t2045 * t2333) * t2357;
t1964 = t2042 * t2333 + t2045 * t2345;
t2556 = t2385 * t2403;
t2068 = -t2319 * t2569 + (-t2377 * t2556 - t2382 * t2400) * t2286;
t2069 = -t2319 * t2566 + (t2377 * t2400 - t2382 * t2556) * t2286;
t1994 = -t2777 * t2363 + (t2068 * t2345 + t2069 * t2333) * t2357;
t2006 = -t2068 * t2333 + t2069 * t2345;
t2162 = -t2250 * t2357 * t2380 + t2385 * t2363;
t2394 = legFrame(4,1);
t2339 = sin(t2394);
t2351 = cos(t2394);
t2630 = t2256 * t2380;
t1906 = (t1994 * t2351 + t2006 * t2339) * t2374 + (-t1958 * t2351 + t1964 * t2339) * t2384 - t2319 * (t2162 * t2351 - t2339 * t2630);
t2724 = t1906 * t2816;
t1907 = (-t1994 * t2339 + t2006 * t2351) * t2374 + (t1958 * t2339 + t1964 * t2351) * t2384 + t2319 * (t2162 * t2339 + t2351 * t2630);
t2723 = t1907 * t2816;
t2046 = -t2186 * t2568 + t2189 * t2382 - t2225;
t2451 = t2186 * t2385 + t2486;
t2049 = t2377 * t2189 + t2382 * t2451;
t2408 = legFrame(3,2);
t2358 = sin(t2408);
t2364 = cos(t2408);
t1959 = -t2541 * t2364 + (t2046 * t2346 - t2049 * t2334) * t2358;
t1971 = t2046 * t2334 + t2049 * t2346;
t2555 = t2385 * t2414;
t2070 = -t2321 * t2569 + (-t2377 * t2555 - t2382 * t2411) * t2286;
t2071 = -t2321 * t2566 + (t2377 * t2411 - t2382 * t2555) * t2286;
t1995 = -t2778 * t2364 + (t2070 * t2346 + t2071 * t2334) * t2358;
t2007 = -t2070 * t2334 + t2071 * t2346;
t2163 = -t2251 * t2358 * t2380 + t2385 * t2364;
t2395 = legFrame(3,1);
t2340 = sin(t2395);
t2352 = cos(t2395);
t2629 = t2257 * t2380;
t1908 = (t1995 * t2352 + t2007 * t2340) * t2374 + (-t1959 * t2352 + t1971 * t2340) * t2384 - t2321 * (t2163 * t2352 - t2340 * t2629);
t2722 = t1908 * t2817;
t1909 = (-t1995 * t2340 + t2007 * t2352) * t2374 + (t1959 * t2340 + t1971 * t2352) * t2384 + t2321 * (t2163 * t2340 + t2352 * t2629);
t2721 = t1909 * t2817;
t2047 = -t2187 * t2568 + t2190 * t2382 - t2225;
t2450 = t2187 * t2385 + t2486;
t2050 = t2377 * t2190 + t2382 * t2450;
t2409 = legFrame(2,2);
t2359 = sin(t2409);
t2365 = cos(t2409);
t1960 = -t2540 * t2365 + (t2047 * t2347 - t2050 * t2335) * t2359;
t1972 = t2047 * t2335 + t2050 * t2347;
t2554 = t2385 * t2415;
t2072 = -t2322 * t2569 + (-t2377 * t2554 - t2382 * t2412) * t2286;
t2073 = -t2322 * t2566 + (t2377 * t2412 - t2382 * t2554) * t2286;
t1996 = -t2779 * t2365 + (t2072 * t2347 + t2073 * t2335) * t2359;
t2008 = -t2072 * t2335 + t2073 * t2347;
t2164 = -t2252 * t2359 * t2380 + t2385 * t2365;
t2396 = legFrame(2,1);
t2341 = sin(t2396);
t2353 = cos(t2396);
t2628 = t2258 * t2380;
t1910 = (t1996 * t2353 + t2008 * t2341) * t2374 + (-t1960 * t2353 + t1972 * t2341) * t2384 - t2322 * (t2164 * t2353 - t2341 * t2628);
t2720 = t1910 * t2818;
t1911 = (-t1996 * t2341 + t2008 * t2353) * t2374 + (t1960 * t2341 + t1972 * t2353) * t2384 + t2322 * (t2164 * t2341 + t2353 * t2628);
t2719 = t1911 * t2818;
t2048 = -t2188 * t2568 + t2191 * t2382 - t2225;
t2449 = t2188 * t2385 + t2486;
t2051 = t2377 * t2191 + t2382 * t2449;
t2410 = legFrame(1,2);
t2360 = sin(t2410);
t2366 = cos(t2410);
t1961 = -t2539 * t2366 + (t2048 * t2348 - t2051 * t2336) * t2360;
t1973 = t2048 * t2336 + t2051 * t2348;
t2553 = t2385 * t2416;
t2074 = -t2323 * t2569 + (-t2377 * t2553 - t2382 * t2413) * t2286;
t2075 = -t2323 * t2566 + (t2377 * t2413 - t2382 * t2553) * t2286;
t1997 = -t2780 * t2366 + (t2074 * t2348 + t2075 * t2336) * t2360;
t2009 = -t2074 * t2336 + t2075 * t2348;
t2165 = -t2253 * t2360 * t2380 + t2385 * t2366;
t2397 = legFrame(1,1);
t2342 = sin(t2397);
t2354 = cos(t2397);
t2627 = t2259 * t2380;
t1912 = (t1997 * t2354 + t2009 * t2342) * t2374 + (-t1961 * t2354 + t1973 * t2342) * t2384 - t2323 * (t2165 * t2354 - t2342 * t2627);
t2718 = t1912 * t2819;
t1913 = (-t1997 * t2342 + t2009 * t2354) * t2374 + (t1961 * t2342 + t1973 * t2354) * t2384 + t2323 * (t2165 * t2342 + t2354 * t2627);
t2717 = t1913 * t2819;
t2589 = t2361 * t2380;
t1950 = ((t2254 * t2614 + (t2286 * t2558 + t2317 * t2380) * t2248) * t2361 - t2775 * t2355) * t2374 + ((t2183 * t2254 - t2248 * t2454) * t2361 + t2544 * t2355) * t2384 - t2317 * (t2248 * t2589 + t2385 * t2355);
t2716 = t1950 * t2814;
t2588 = t2362 * t2380;
t1951 = ((t2255 * t2613 + (t2286 * t2557 + t2318 * t2380) * t2249) * t2362 - t2776 * t2356) * t2374 + ((t2184 * t2255 - t2249 * t2453) * t2362 + t2543 * t2356) * t2384 - t2318 * (t2249 * t2588 + t2356 * t2385);
t2715 = t1951 * t2815;
t2587 = t2363 * t2380;
t1952 = ((t2256 * t2612 + (t2286 * t2556 + t2319 * t2380) * t2250) * t2363 - t2777 * t2357) * t2374 + ((t2185 * t2256 - t2250 * t2452) * t2363 + t2542 * t2357) * t2384 - t2319 * (t2250 * t2587 + t2357 * t2385);
t2714 = t1952 * t2816;
t2586 = t2364 * t2380;
t1953 = ((t2257 * t2611 + (t2286 * t2555 + t2321 * t2380) * t2251) * t2364 - t2778 * t2358) * t2374 + ((t2189 * t2257 - t2251 * t2451) * t2364 + t2541 * t2358) * t2384 - t2321 * (t2251 * t2586 + t2385 * t2358);
t2713 = t1953 * t2817;
t2585 = t2365 * t2380;
t1954 = ((t2258 * t2610 + (t2286 * t2554 + t2322 * t2380) * t2252) * t2365 - t2779 * t2359) * t2374 + ((t2190 * t2258 - t2252 * t2450) * t2365 + t2540 * t2359) * t2384 - t2322 * (t2252 * t2585 + t2359 * t2385);
t2712 = t1954 * t2818;
t2584 = t2366 * t2380;
t1955 = ((t2259 * t2609 + (t2286 * t2553 + t2323 * t2380) * t2253) * t2366 - t2780 * t2360) * t2374 + ((t2191 * t2259 - t2253 * t2449) * t2366 + t2539 * t2360) * t2384 - t2323 * (t2253 * t2584 + t2360 * t2385);
t2711 = t1955 * t2819;
t2595 = t2349 * t2355;
t2124 = t2248 * t2595 + t2254 * t2337;
t2125 = -t2248 * t2337 + t2254 * t2595;
t2644 = (-t2206 * t2398 + t2236) * t2385;
t1965 = -t2124 * t2825 + t2125 * t2644;
t2710 = t1965 * t2034;
t2601 = t2337 * t2355;
t2136 = t2248 * t2349 + t2254 * t2601;
t2142 = t2248 * t2601 - t2254 * t2349;
t1966 = -t2136 * t2644 + t2142 * t2825;
t2709 = t1966 * t2034;
t2594 = t2350 * t2356;
t2126 = t2249 * t2594 + t2255 * t2338;
t2127 = -t2249 * t2338 + t2255 * t2594;
t2643 = (-t2207 * t2399 + t2237) * t2385;
t1967 = -t2126 * t2824 + t2127 * t2643;
t2708 = t1967 * t2035;
t2600 = t2338 * t2356;
t2137 = t2249 * t2350 + t2255 * t2600;
t2143 = t2249 * t2600 - t2255 * t2350;
t1968 = -t2137 * t2643 + t2143 * t2824;
t2707 = t1968 * t2035;
t2593 = t2351 * t2357;
t2128 = t2250 * t2593 + t2256 * t2339;
t2129 = -t2250 * t2339 + t2256 * t2593;
t2642 = (-t2208 * t2400 + t2238) * t2385;
t1969 = -t2128 * t2823 + t2129 * t2642;
t2706 = t1969 * t2036;
t2599 = t2339 * t2357;
t2138 = t2250 * t2351 + t2256 * t2599;
t2144 = t2250 * t2599 - t2256 * t2351;
t1970 = -t2138 * t2642 + t2144 * t2823;
t2705 = t1970 * t2036;
t2592 = t2352 * t2358;
t2130 = t2251 * t2592 + t2257 * t2340;
t2131 = -t2251 * t2340 + t2257 * t2592;
t2641 = (-t2209 * t2411 + t2242) * t2385;
t1974 = -t2130 * t2822 + t2131 * t2641;
t2704 = t1974 * t2037;
t2598 = t2340 * t2358;
t2139 = t2251 * t2352 + t2257 * t2598;
t2145 = t2251 * t2598 - t2257 * t2352;
t1975 = -t2139 * t2641 + t2145 * t2822;
t2703 = t1975 * t2037;
t2591 = t2353 * t2359;
t2132 = t2252 * t2591 + t2258 * t2341;
t2133 = -t2252 * t2341 + t2258 * t2591;
t2640 = (-t2210 * t2412 + t2243) * t2385;
t1976 = -t2132 * t2821 + t2133 * t2640;
t2702 = t1976 * t2038;
t2597 = t2341 * t2359;
t2140 = t2252 * t2353 + t2258 * t2597;
t2146 = t2252 * t2597 - t2258 * t2353;
t1977 = -t2140 * t2640 + t2146 * t2821;
t2701 = t1977 * t2038;
t2590 = t2354 * t2360;
t2134 = t2253 * t2590 + t2259 * t2342;
t2135 = -t2253 * t2342 + t2259 * t2590;
t2639 = (-t2211 * t2413 + t2244) * t2385;
t1978 = -t2134 * t2820 + t2135 * t2639;
t2700 = t1978 * t2039;
t2596 = t2342 * t2360;
t2141 = t2253 * t2354 + t2259 * t2596;
t2147 = t2253 * t2596 - t2259 * t2354;
t1979 = -t2141 * t2639 + t2147 * t2820;
t2699 = t1979 * t2039;
t1980 = t2125 * t2565 + t2379 * (-t2124 * t2398 + t2125 * t2558);
t2012 = 0.1e1 / (((-t2317 * t2564 - t2263) * t2379 + t2380 * t2233) * t2384 + t2551);
t2698 = t1980 * t2012;
t1981 = t2127 * t2565 + t2379 * (-t2126 * t2399 + t2127 * t2557);
t2015 = 0.1e1 / (((-t2318 * t2563 - t2263) * t2379 + t2380 * t2234) * t2384 + t2550);
t2697 = t1981 * t2015;
t1982 = t2129 * t2565 + t2379 * (-t2128 * t2400 + t2129 * t2556);
t2018 = 0.1e1 / (((-t2319 * t2562 - t2263) * t2379 + t2380 * t2235) * t2384 + t2549);
t2696 = t1982 * t2018;
t1983 = -t2136 * t2565 - t2379 * (t2136 * t2558 - t2142 * t2398);
t2695 = t1983 * t2012;
t1984 = -t2137 * t2565 - t2379 * (t2137 * t2557 - t2143 * t2399);
t2694 = t1984 * t2015;
t1985 = -t2138 * t2565 - t2379 * (t2138 * t2556 - t2144 * t2400);
t2693 = t1985 * t2018;
t1986 = t2131 * t2565 + t2379 * (-t2130 * t2411 + t2131 * t2555);
t2021 = 0.1e1 / (((-t2321 * t2561 - t2263) * t2379 + t2380 * t2239) * t2384 + t2548);
t2692 = t1986 * t2021;
t1987 = t2133 * t2565 + t2379 * (-t2132 * t2412 + t2133 * t2554);
t2024 = 0.1e1 / (((-t2322 * t2560 - t2263) * t2379 + t2380 * t2240) * t2384 + t2547);
t2691 = t1987 * t2024;
t1988 = t2135 * t2565 + t2379 * (-t2134 * t2413 + t2135 * t2553);
t2027 = 0.1e1 / (((-t2323 * t2559 - t2263) * t2379 + t2380 * t2241) * t2384 + t2546);
t2690 = t1988 * t2027;
t1989 = -t2139 * t2565 - t2379 * (t2139 * t2555 - t2145 * t2411);
t2689 = t1989 * t2021;
t1990 = -t2140 * t2565 - t2379 * (t2140 * t2554 - t2146 * t2412);
t2688 = t1990 * t2024;
t1991 = -t2141 * t2565 - t2379 * (t2141 * t2553 - t2147 * t2413);
t2687 = t1991 * t2027;
t2200 = t2368 * t2431 - t2371 * t2774;
t2686 = t2814 * t2200;
t2685 = t2814 * t2245;
t2375 = m(1) + m(2) + m(3);
t2684 = t2814 * t2375;
t2524 = t2737 * Ifges(3,4);
t2525 = t2737 * mrSges(3,2);
t2470 = Ifges(2,3) + 0.2e1 * (pkin(2) * mrSges(3,1) + t2524) * t2381 - 0.2e1 * pkin(2) * t2525 + m(3) * pkin(2) ^ 2 + t2807;
t2472 = -0.2e1 * t2381 * t2524 + Ifges(3,3) - t2807;
t2532 = 0.2e1 * t2567;
t2052 = (t2472 + t2767) * t2374 + ((-mrSges(3,2) * qJ(3,6) + Ifges(3,6)) * t2381 - t2737 * (mrSges(3,1) * qJ(3,6) - Ifges(3,5))) * t2532 + t2470 - t2767;
t2683 = t2012 * t2052;
t2682 = t2012 * t2200;
t2201 = t2368 * t2432 - t2371 * t2773;
t2681 = t2815 * t2201;
t2680 = t2815 * t2246;
t2679 = t2815 * t2375;
t2053 = (t2472 + t2766) * t2374 + ((-mrSges(3,2) * qJ(3,5) + Ifges(3,6)) * t2381 - t2737 * (mrSges(3,1) * qJ(3,5) - Ifges(3,5))) * t2532 + t2470 - t2766;
t2678 = t2015 * t2053;
t2677 = t2015 * t2201;
t2202 = t2368 * t2433 - t2371 * t2772;
t2676 = t2816 * t2202;
t2675 = t2816 * t2247;
t2674 = t2816 * t2375;
t2054 = (t2472 + t2765) * t2374 + ((-mrSges(3,2) * qJ(3,4) + Ifges(3,6)) * t2381 - t2737 * (mrSges(3,1) * qJ(3,4) - Ifges(3,5))) * t2532 + t2470 - t2765;
t2673 = t2018 * t2054;
t2672 = t2018 * t2202;
t2203 = t2368 * t2434 - t2371 * t2771;
t2671 = t2817 * t2203;
t2670 = t2817 * t2260;
t2669 = t2817 * t2375;
t2055 = (t2472 + t2764) * t2374 + ((-mrSges(3,2) * qJ(3,3) + Ifges(3,6)) * t2381 - t2737 * (mrSges(3,1) * qJ(3,3) - Ifges(3,5))) * t2532 + t2470 - t2764;
t2668 = t2021 * t2055;
t2667 = t2021 * t2203;
t2204 = t2368 * t2435 - t2371 * t2770;
t2666 = t2818 * t2204;
t2665 = t2818 * t2261;
t2664 = t2818 * t2375;
t2056 = (t2472 + t2763) * t2374 + ((-mrSges(3,2) * qJ(3,2) + Ifges(3,6)) * t2381 - t2737 * (mrSges(3,1) * qJ(3,2) - Ifges(3,5))) * t2532 + t2470 - t2763;
t2663 = t2024 * t2056;
t2662 = t2024 * t2204;
t2205 = t2368 * t2436 - t2371 * t2769;
t2661 = t2819 * t2205;
t2660 = t2819 * t2262;
t2659 = t2819 * t2375;
t2057 = (t2472 + t2762) * t2374 + ((-mrSges(3,2) * qJ(3,1) + Ifges(3,6)) * t2381 - t2737 * (mrSges(3,1) * qJ(3,1) - Ifges(3,5))) * t2532 + t2470 - t2762;
t2658 = t2027 * t2057;
t2657 = t2027 * t2205;
t2656 = t2034 * t2200;
t2655 = t2035 * t2201;
t2654 = t2036 * t2202;
t2653 = t2037 * t2203;
t2652 = t2038 * t2204;
t2651 = t2039 * t2205;
t2058 = t2254 * t2565 + t2379 * (-t2248 * t2398 + t2254 * t2558);
t2650 = t2058 * t2361;
t2059 = t2255 * t2565 + t2379 * (-t2249 * t2399 + t2255 * t2557);
t2649 = t2059 * t2362;
t2060 = t2256 * t2565 + t2379 * (-t2250 * t2400 + t2256 * t2556);
t2648 = t2060 * t2363;
t2061 = t2257 * t2565 + t2379 * (-t2251 * t2411 + t2257 * t2555);
t2647 = t2061 * t2364;
t2062 = t2258 * t2565 + t2379 * (-t2252 * t2412 + t2258 * t2554);
t2646 = t2062 * t2365;
t2063 = t2259 * t2565 + t2379 * (-t2253 * t2413 + t2259 * t2553);
t2645 = t2063 * t2366;
t2290 = m(3) * pkin(2) + t2381 * mrSges(3,1) - t2525;
t2269 = mrSges(2,1) + t2290;
t2154 = ((mrSges(3,3) + t2827) * t2379 + t2732) * t2398 + t2401 * t2269;
t2638 = t2154 * t2380;
t2155 = ((mrSges(3,3) + t2828) * t2379 + t2732) * t2399 + t2402 * t2269;
t2637 = t2155 * t2380;
t2156 = ((mrSges(3,3) + t2829) * t2379 + t2732) * t2400 + t2403 * t2269;
t2636 = t2156 * t2380;
t2157 = ((mrSges(3,3) + t2830) * t2379 + t2732) * t2411 + t2414 * t2269;
t2635 = t2157 * t2380;
t2158 = ((mrSges(3,3) + t2831) * t2379 + t2732) * t2412 + t2415 * t2269;
t2634 = t2158 * t2380;
t2159 = ((mrSges(3,3) + t2832) * t2379 + t2732) * t2413 + t2416 * t2269;
t2633 = t2159 * t2380;
t2608 = t2290 * t2379;
t2583 = t2367 * t2370;
t2581 = t2368 * t2369;
t2580 = t2368 * t2372;
t2376 = Ifges(4,1) - Ifges(4,2);
t2579 = t2368 * t2376;
t2291 = Ifges(4,6) * t2370 + t2730;
t2577 = t2369 * t2291;
t2531 = t2034 * t2754;
t2530 = t2035 * t2753;
t2529 = t2036 * t2752;
t2528 = t2037 * t2751;
t2527 = t2038 * t2750;
t2526 = t2039 * t2749;
t2523 = Ifges(4,4) * t2583;
t2522 = t2361 * t2803;
t2521 = t2362 * t2802;
t2520 = t2363 * t2801;
t2519 = t2364 * t2800;
t2518 = t2365 * t2799;
t2517 = t2366 * t2798;
t2516 = t2814 * t2650;
t2515 = t2814 * t2638;
t2514 = t2012 * t2638;
t2513 = t2012 * t2608;
t2512 = t2815 * t2649;
t2511 = t2815 * t2637;
t2510 = t2015 * t2637;
t2509 = t2015 * t2608;
t2508 = t2816 * t2648;
t2507 = t2816 * t2636;
t2506 = t2018 * t2636;
t2505 = t2018 * t2608;
t2504 = t2817 * t2647;
t2503 = t2817 * t2635;
t2502 = t2021 * t2635;
t2501 = t2021 * t2608;
t2500 = t2818 * t2646;
t2499 = t2818 * t2634;
t2498 = t2024 * t2634;
t2497 = t2024 * t2608;
t2496 = t2819 * t2645;
t2495 = t2819 * t2633;
t2494 = t2027 * t2633;
t2493 = t2027 * t2608;
t2492 = t2034 * t2608;
t2491 = t2035 * t2608;
t2490 = t2036 * t2608;
t2489 = t2037 * t2608;
t2488 = t2038 * t2608;
t2487 = t2039 * t2608;
t2479 = t2361 * t2608;
t2478 = t2362 * t2608;
t2477 = t2363 * t2608;
t2476 = t2364 * t2608;
t2475 = t2365 * t2608;
t2474 = t2366 * t2608;
t2471 = -(Ifges(4,6) * t2371 - t2367 * t2579) * t2370 - t2371 * t2730 - t2731;
t2469 = -t2267 * t2371 - t2368 * t2422;
t2329 = t2370 ^ 2;
t2467 = t2329 * t2376 - 0.2e1 * t2523;
t1818 = (-t1902 * t2100 - t1903 * t2101) * t2814;
t1914 = (-t1965 * t2100 - t1966 * t2101) * t2034;
t1920 = (-t1980 * t2100 - t1983 * t2101) * t2012;
t1710 = t1818 * t2638 - t1914 * t2608 + t1920 * t2052;
t1819 = (-t1904 * t2104 - t1905 * t2105) * t2815;
t1915 = (-t1967 * t2104 - t1968 * t2105) * t2035;
t1921 = (-t1981 * t2104 - t1984 * t2105) * t2015;
t1711 = t1819 * t2637 - t1915 * t2608 + t1921 * t2053;
t1820 = (-t1906 * t2108 - t1907 * t2109) * t2816;
t1916 = (-t1969 * t2108 - t1970 * t2109) * t2036;
t1922 = (-t1982 * t2108 - t1985 * t2109) * t2018;
t1712 = t1820 * t2636 - t1916 * t2608 + t1922 * t2054;
t1821 = (-t1908 * t2112 - t1909 * t2113) * t2817;
t1917 = (-t1974 * t2112 - t1975 * t2113) * t2037;
t1923 = (-t1986 * t2112 - t1989 * t2113) * t2021;
t1713 = t1821 * t2635 - t1917 * t2608 + t1923 * t2055;
t1822 = (-t1910 * t2116 - t1911 * t2117) * t2818;
t1918 = (-t1976 * t2116 - t1977 * t2117) * t2038;
t1924 = (-t1987 * t2116 - t1990 * t2117) * t2024;
t1714 = t1822 * t2634 - t1918 * t2608 + t1924 * t2056;
t1823 = (-t1912 * t2120 - t1913 * t2121) * t2819;
t1919 = (-t1978 * t2120 - t1979 * t2121) * t2039;
t1925 = (-t1988 * t2120 - t1991 * t2121) * t2027;
t1715 = t1823 * t2633 - t1919 * t2608 + t1925 * t2057;
t1728 = t1818 * t2375 + t1914 * t2754 + t1920 * t2638;
t1729 = t1819 * t2375 + t1915 * t2753 + t1921 * t2637;
t1730 = t1820 * t2375 + t1916 * t2752 + t1922 * t2636;
t1731 = t1821 * t2375 + t1917 * t2751 + t1923 * t2635;
t1732 = t1822 * t2375 + t1918 * t2750 + t1924 * t2634;
t1733 = t1823 * t2375 + t1919 * t2749 + t1925 * t2633;
t1740 = -t1920 * t2608 + (t1818 * t2245 + t1914) * m(3);
t1741 = -t1921 * t2608 + (t1819 * t2246 + t1915) * m(3);
t1742 = -t1922 * t2608 + (t1820 * t2247 + t1916) * m(3);
t1749 = -t1923 * t2608 + (t1821 * t2260 + t1917) * m(3);
t1750 = -t1924 * t2608 + (t1822 * t2261 + t1918) * m(3);
t1751 = -t1925 * t2608 + (t1823 * t2262 + t1919) * m(3);
t1872 = t1903 * t2686 + t2100 * t2716;
t1874 = t1905 * t2681 + t2104 * t2715;
t1876 = t1907 * t2676 + t2108 * t2714;
t1878 = t1909 * t2671 + t2112 * t2713;
t1880 = t1911 * t2666 + t2116 * t2712;
t1882 = t1913 * t2661 + t2120 * t2711;
t1926 = t1966 * t2656 - t2100 * t2522;
t1928 = t1968 * t2655 - t2104 * t2521;
t1930 = t1970 * t2654 - t2108 * t2520;
t1932 = t1975 * t2653 - t2112 * t2519;
t1934 = t1977 * t2652 - t2116 * t2518;
t1936 = t1979 * t2651 - t2120 * t2517;
t1938 = t1983 * t2682 - t2100 * t2516;
t1940 = t1984 * t2677 - t2104 * t2512;
t1942 = t1985 * t2672 - t2108 * t2508;
t1944 = t1989 * t2667 - t2112 * t2504;
t1946 = t1990 * t2662 - t2116 * t2500;
t1948 = t1991 * t2657 - t2120 * t2496;
t2466 = t1710 * t1938 + t1711 * t1940 + t1712 * t1942 + t1713 * t1944 + t1714 * t1946 + t1728 * t1872 + t1729 * t1874 + t1730 * t1876 + t1731 * t1878 + t1732 * t1880 + t1740 * t1926 + t1741 * t1928 + t1742 * t1930 + t1749 * t1932 + t1750 * t1934 + t1715 * t1948 + t1733 * t1882 + t1751 * t1936;
t1873 = -t1902 * t2686 + t2101 * t2716;
t1875 = -t1904 * t2681 + t2105 * t2715;
t1877 = -t1906 * t2676 + t2109 * t2714;
t1879 = -t1908 * t2671 + t2113 * t2713;
t1881 = -t1910 * t2666 + t2117 * t2712;
t1883 = -t1912 * t2661 + t2121 * t2711;
t1927 = -t1965 * t2656 - t2101 * t2522;
t1929 = -t1967 * t2655 - t2105 * t2521;
t1931 = -t1969 * t2654 - t2109 * t2520;
t1933 = -t1974 * t2653 - t2113 * t2519;
t1935 = -t1976 * t2652 - t2117 * t2518;
t1937 = -t1978 * t2651 - t2121 * t2517;
t1939 = -t1980 * t2682 - t2101 * t2516;
t1941 = -t1981 * t2677 - t2105 * t2512;
t1943 = -t1982 * t2672 - t2109 * t2508;
t1945 = -t1986 * t2667 - t2113 * t2504;
t1947 = -t1987 * t2662 - t2117 * t2500;
t1949 = -t1988 * t2657 - t2121 * t2496;
t2465 = t1710 * t1939 + t1711 * t1941 + t1712 * t1943 + t1713 * t1945 + t1714 * t1947 + t1728 * t1873 + t1729 * t1875 + t1730 * t1877 + t1731 * t1879 + t1732 * t1881 + t1740 * t1927 + t1741 * t1929 + t1742 * t1931 + t1749 * t1933 + t1750 * t1935 + t1715 * t1949 + t1733 * t1883 + t1751 * t1937;
t1758 = t1872 * t2638 - t1926 * t2608 + t1938 * t2052;
t1760 = t1874 * t2637 - t1928 * t2608 + t1940 * t2053;
t1762 = t1876 * t2636 - t1930 * t2608 + t1942 * t2054;
t1764 = t1878 * t2635 - t1932 * t2608 + t1944 * t2055;
t1766 = t1880 * t2634 - t1934 * t2608 + t1946 * t2056;
t1768 = t1882 * t2633 - t1936 * t2608 + t1948 * t2057;
t1770 = t1872 * t2375 + t1926 * t2754 + t1938 * t2638;
t1772 = t1874 * t2375 + t1928 * t2753 + t1940 * t2637;
t1774 = t1876 * t2375 + t1930 * t2752 + t1942 * t2636;
t1776 = t1878 * t2375 + t1932 * t2751 + t1944 * t2635;
t1778 = t1880 * t2375 + t1934 * t2750 + t1946 * t2634;
t1780 = t1882 * t2375 + t1936 * t2749 + t1948 * t2633;
t1782 = -t1938 * t2608 + (t1872 * t2245 + t1926) * m(3);
t1784 = -t1940 * t2608 + (t1874 * t2246 + t1928) * m(3);
t1786 = -t1942 * t2608 + (t1876 * t2247 + t1930) * m(3);
t1788 = -t1944 * t2608 + (t1878 * t2260 + t1932) * m(3);
t1790 = -t1946 * t2608 + (t1880 * t2261 + t1934) * m(3);
t1792 = -t1948 * t2608 + (t1882 * t2262 + t1936) * m(3);
t2464 = t1758 * t1938 + t1760 * t1940 + t1762 * t1942 + t1764 * t1944 + t1766 * t1946 + t1770 * t1872 + t1772 * t1874 + t1774 * t1876 + t1776 * t1878 + t1778 * t1880 + t1782 * t1926 + t1784 * t1928 + t1786 * t1930 + t1788 * t1932 + t1790 * t1934 + t1768 * t1948 + t1780 * t1882 + t1792 * t1936;
t2463 = -t1758 * t1939 - t1760 * t1941 - t1762 * t1943 - t1764 * t1945 - t1766 * t1947 - t1770 * t1873 - t1772 * t1875 - t1774 * t1877 - t1776 * t1879 - t1778 * t1881 - t1782 * t1927 - t1784 * t1929 - t1786 * t1931 - t1788 * t1933 - t1790 * t1935 - t1768 * t1949 - t1780 * t1883 - t1792 * t1937;
t1759 = t1873 * t2638 - t1927 * t2608 + t1939 * t2052;
t1761 = t1875 * t2637 - t1929 * t2608 + t1941 * t2053;
t1763 = t1877 * t2636 - t1931 * t2608 + t1943 * t2054;
t1765 = t1879 * t2635 - t1933 * t2608 + t1945 * t2055;
t1767 = t1881 * t2634 - t1935 * t2608 + t1947 * t2056;
t1769 = t1883 * t2633 - t1937 * t2608 + t1949 * t2057;
t1771 = t1873 * t2375 + t1927 * t2754 + t1939 * t2638;
t1773 = t1875 * t2375 + t1929 * t2753 + t1941 * t2637;
t1775 = t1877 * t2375 + t1931 * t2752 + t1943 * t2636;
t1777 = t1879 * t2375 + t1933 * t2751 + t1945 * t2635;
t1779 = t1881 * t2375 + t1935 * t2750 + t1947 * t2634;
t1781 = t1883 * t2375 + t1937 * t2749 + t1949 * t2633;
t1783 = -t1939 * t2608 + (t1873 * t2245 + t1927) * m(3);
t1785 = -t1941 * t2608 + (t1875 * t2246 + t1929) * m(3);
t1787 = -t1943 * t2608 + (t1877 * t2247 + t1931) * m(3);
t1789 = -t1945 * t2608 + (t1879 * t2260 + t1933) * m(3);
t1791 = -t1947 * t2608 + (t1881 * t2261 + t1935) * m(3);
t1793 = -t1949 * t2608 + (t1883 * t2262 + t1937) * m(3);
t2462 = t1759 * t1938 + t1761 * t1940 + t1763 * t1942 + t1765 * t1944 + t1767 * t1946 + t1771 * t1872 + t1773 * t1874 + t1775 * t1876 + t1777 * t1878 + t1779 * t1880 + t1783 * t1926 + t1785 * t1928 + t1787 * t1930 + t1789 * t1932 + t1791 * t1934 + t1769 * t1948 + t1781 * t1882 + t1793 * t1936;
t2461 = -t1759 * t1939 - t1761 * t1941 - t1763 * t1943 - t1765 * t1945 - t1767 * t1947 - t1771 * t1873 - t1773 * t1875 - t1775 * t1877 - t1777 * t1879 - t1779 * t1881 - t1783 * t1927 - t1785 * t1929 - t1787 * t1931 - t1789 * t1933 - t1791 * t1935 - t1769 * t1949 - t1781 * t1883 - t1793 * t1937;
t1830 = t1902 * t2515 - t1965 * t2492 + t1980 * t2683;
t1832 = t1904 * t2511 - t1967 * t2491 + t1981 * t2678;
t1834 = t1906 * t2507 - t1969 * t2490 + t1982 * t2673;
t1836 = t1908 * t2503 - t1974 * t2489 + t1986 * t2668;
t1838 = t1910 * t2499 - t1976 * t2488 + t1987 * t2663;
t1840 = t1912 * t2495 - t1978 * t2487 + t1988 * t2658;
t1848 = t1902 * t2684 + t1965 * t2531 + t1980 * t2514;
t1850 = t1904 * t2679 + t1967 * t2530 + t1981 * t2510;
t1852 = t1906 * t2674 + t1969 * t2529 + t1982 * t2506;
t1854 = t1908 * t2669 + t1974 * t2528 + t1986 * t2502;
t1856 = t1910 * t2664 + t1976 * t2527 + t1987 * t2498;
t1858 = t1912 * t2659 + t1978 * t2526 + t1988 * t2494;
t1860 = -t1980 * t2513 + (t1902 * t2685 + t2710) * m(3);
t1862 = -t1981 * t2509 + (t1904 * t2680 + t2708) * m(3);
t1864 = -t1982 * t2505 + (t1906 * t2675 + t2706) * m(3);
t1866 = -t1986 * t2501 + (t1908 * t2670 + t2704) * m(3);
t1868 = -t1987 * t2497 + (t1910 * t2665 + t2702) * m(3);
t1870 = -t1988 * t2493 + (t1912 * t2660 + t2700) * m(3);
t2460 = t1830 * t1938 + t1832 * t1940 + t1834 * t1942 + t1836 * t1944 + t1838 * t1946 + t1848 * t1872 + t1850 * t1874 + t1852 * t1876 + t1854 * t1878 + t1856 * t1880 + t1860 * t1926 + t1862 * t1928 + t1864 * t1930 + t1866 * t1932 + t1868 * t1934 + t1840 * t1948 + t1858 * t1882 + t1870 * t1936;
t2459 = -t1830 * t1939 - t1832 * t1941 - t1834 * t1943 - t1836 * t1945 - t1838 * t1947 - t1848 * t1873 - t1850 * t1875 - t1852 * t1877 - t1854 * t1879 - t1856 * t1881 - t1860 * t1927 - t1862 * t1929 - t1864 * t1931 - t1866 * t1933 - t1868 * t1935 - t1840 * t1949 - t1858 * t1883 - t1870 * t1937;
t1831 = t1903 * t2515 - t1966 * t2492 + t1983 * t2683;
t1833 = t1905 * t2511 - t1968 * t2491 + t1984 * t2678;
t1835 = t1907 * t2507 - t1970 * t2490 + t1985 * t2673;
t1837 = t1909 * t2503 - t1975 * t2489 + t1989 * t2668;
t1839 = t1911 * t2499 - t1977 * t2488 + t1990 * t2663;
t1841 = t1913 * t2495 - t1979 * t2487 + t1991 * t2658;
t1849 = t1903 * t2684 + t1966 * t2531 + t1983 * t2514;
t1851 = t1905 * t2679 + t1968 * t2530 + t1984 * t2510;
t1853 = t1907 * t2674 + t1970 * t2529 + t1985 * t2506;
t1855 = t1909 * t2669 + t1975 * t2528 + t1989 * t2502;
t1857 = t1911 * t2664 + t1977 * t2527 + t1990 * t2498;
t1859 = t1913 * t2659 + t1979 * t2526 + t1991 * t2494;
t1861 = -t1983 * t2513 + (t1903 * t2685 + t2709) * m(3);
t1863 = -t1984 * t2509 + (t1905 * t2680 + t2707) * m(3);
t1865 = -t1985 * t2505 + (t1907 * t2675 + t2705) * m(3);
t1867 = -t1989 * t2501 + (t1909 * t2670 + t2703) * m(3);
t1869 = -t1990 * t2497 + (t1911 * t2665 + t2701) * m(3);
t1871 = -t1991 * t2493 + (t1913 * t2660 + t2699) * m(3);
t2458 = t1831 * t1938 + t1833 * t1940 + t1835 * t1942 + t1837 * t1944 + t1839 * t1946 + t1849 * t1872 + t1851 * t1874 + t1853 * t1876 + t1855 * t1878 + t1857 * t1880 + t1861 * t1926 + t1863 * t1928 + t1865 * t1930 + t1867 * t1932 + t1869 * t1934 + t1841 * t1948 + t1859 * t1882 + t1871 * t1936;
t2457 = t1831 * t1939 + t1833 * t1941 + t1835 * t1943 + t1837 * t1945 + t1839 * t1947 + t1849 * t1873 + t1851 * t1875 + t1853 * t1877 + t1855 * t1879 + t1857 * t1881 + t1861 * t1927 + t1863 * t1929 + t1865 * t1931 + t1867 * t1933 + t1869 * t1935 + t1841 * t1949 + t1859 * t1883 + t1871 * t1937;
t1884 = t2479 * t2803 + (t1950 * t2638 - t2052 * t2650) * t2814;
t1885 = t2478 * t2802 + (t1951 * t2637 - t2053 * t2649) * t2815;
t1886 = t2477 * t2801 + (t1952 * t2636 - t2054 * t2648) * t2816;
t1887 = t2476 * t2800 + (t1953 * t2635 - t2055 * t2647) * t2817;
t1888 = t2475 * t2799 + (t1954 * t2634 - t2056 * t2646) * t2818;
t1889 = t2474 * t2798 + (t1955 * t2633 - t2057 * t2645) * t2819;
t1890 = -t2522 * t2754 + (-t2058 * t2154 * t2589 + t1950 * t2375) * t2814;
t1891 = -t2521 * t2753 + (-t2059 * t2155 * t2588 + t1951 * t2375) * t2815;
t1892 = -t2520 * t2752 + (-t2060 * t2156 * t2587 + t1952 * t2375) * t2816;
t1893 = -t2519 * t2751 + (-t2061 * t2157 * t2586 + t1953 * t2375) * t2817;
t1894 = -t2518 * t2750 + (-t2062 * t2158 * t2585 + t1954 * t2375) * t2818;
t1895 = -t2517 * t2749 + (-t2063 * t2159 * t2584 + t1955 * t2375) * t2819;
t1896 = t2058 * t2814 * t2479 + (t2245 * t2716 - t2522) * m(3);
t1897 = t2059 * t2815 * t2478 + (t2246 * t2715 - t2521) * m(3);
t1898 = t2060 * t2816 * t2477 + (t2247 * t2714 - t2520) * m(3);
t1899 = t2061 * t2817 * t2476 + (t2260 * t2713 - t2519) * m(3);
t1900 = t2062 * t2818 * t2475 + (t2261 * t2712 - t2518) * m(3);
t1901 = t2063 * t2819 * t2474 + (t2262 * t2711 - t2517) * m(3);
t2456 = t1872 * t1890 + t1874 * t1891 + t1876 * t1892 + t1878 * t1893 + t1880 * t1894 + t1884 * t1938 + t1885 * t1940 + t1886 * t1942 + t1887 * t1944 + t1888 * t1946 + t1896 * t1926 + t1897 * t1928 + t1898 * t1930 + t1899 * t1932 + t1900 * t1934 + t1882 * t1895 + t1889 * t1948 + t1901 * t1936;
t2455 = t1873 * t1890 + t1875 * t1891 + t1877 * t1892 + t1879 * t1893 + t1881 * t1894 + t1884 * t1939 + t1885 * t1941 + t1886 * t1943 + t1887 * t1945 + t1888 * t1947 + t1896 * t1927 + t1897 * t1929 + t1898 * t1931 + t1899 * t1933 + t1900 * t1935 + t1883 * t1895 + t1889 * t1949 + t1901 * t1937;
t2448 = t1758 * t1920 + t1760 * t1921 + t1762 * t1922 + t1764 * t1923 + t1766 * t1924 + t1768 * t1925 + t1770 * t1818 + t1772 * t1819 + t1774 * t1820 + t1776 * t1821 + t1778 * t1822 + t1780 * t1823 + t1782 * t1914 + t1784 * t1915 + t1786 * t1916 + t1788 * t1917 + t1790 * t1918 + t1792 * t1919;
t2447 = t1759 * t1920 + t1761 * t1921 + t1763 * t1922 + t1765 * t1923 + t1767 * t1924 + t1769 * t1925 + t1771 * t1818 + t1773 * t1819 + t1775 * t1820 + t1777 * t1821 + t1779 * t1822 + t1781 * t1823 + t1783 * t1914 + t1785 * t1915 + t1787 * t1916 + t1789 * t1917 + t1791 * t1918 + t1793 * t1919;
t2446 = t1848 * t1818 + t1850 * t1819 + t1852 * t1820 + t1854 * t1821 + t1856 * t1822 + t1858 * t1823 + t1830 * t1920 + t1832 * t1921 + t1834 * t1922 + t1836 * t1923 + t1838 * t1924 + t1840 * t1925 + t1860 * t1914 + t1862 * t1915 + t1864 * t1916 + t1866 * t1917 + t1868 * t1918 + t1870 * t1919;
t2445 = t1890 * t1818 + t1891 * t1819 + t1892 * t1820 + t1893 * t1821 + t1894 * t1822 + t1895 * t1823 + t1884 * t1920 + t1885 * t1921 + t1886 * t1922 + t1887 * t1923 + t1888 * t1924 + t1889 * t1925 + t1896 * t1914 + t1897 * t1915 + t1898 * t1916 + t1899 * t1917 + t1900 * t1918 + t1901 * t1919;
t2444 = t1710 * t1920 + t1711 * t1921 + t1712 * t1922 + t1713 * t1923 + t1714 * t1924 + t1715 * t1925 + t1728 * t1818 + t1729 * t1819 + t1730 * t1820 + t1731 * t1821 + t1732 * t1822 + t1733 * t1823 + Ifges(4,3) + t1740 * t1914 + t1741 * t1915 + t1742 * t1916 + t1749 * t1917 + t1750 * t1918 + t1751 * t1919;
t2443 = t1849 * t1818 + t1851 * t1819 + t1853 * t1820 + t1855 * t1821 + t1857 * t1822 + t1859 * t1823 + t1831 * t1920 + t1833 * t1921 + t1835 * t1922 + t1837 * t1923 + t1839 * t1924 + t1841 * t1925 + t1861 * t1914 + t1863 * t1915 + t1865 * t1916 + t1867 * t1917 + t1869 * t1918 + t1871 * t1919 - t2578;
t2330 = t2371 ^ 2;
t2232 = -t2372 * t2376 + t2581 * t2755;
t2229 = t2329 * t2755 + t2376 * t2583 - Ifges(4,4);
t2226 = t2467 + t2733;
t2212 = -Ifges(4,3) * t2371 + t2791;
t1 = [-t1896 * t2522 - t1897 * t2521 - t1898 * t2520 - t1899 * t2519 - t1900 * t2518 - t1901 * t2517 + m(4) + (-t1889 * t2645 + t1895 * t1955) * t2819 + (-t1888 * t2646 + t1894 * t1954) * t2818 + (-t1887 * t2647 + t1893 * t1953) * t2817 + (-t1886 * t2648 + t1892 * t1952) * t2816 + (-t1885 * t2649 + t1891 * t1951) * t2815 + (-t1884 * t2650 + t1890 * t1950) * t2814, t1895 * t2717 + t1889 * t2687 + t1901 * t2699 + t1894 * t2719 + t1888 * t2688 + t1900 * t2701 + t1893 * t2721 + t1887 * t2689 + t1899 * t2703 + t1892 * t2723 + t1886 * t2693 + t1898 * t2705 + t1891 * t2725 + t1885 * t2694 + t1897 * t2707 + t1890 * t2727 + t1884 * t2695 + t1896 * t2709, t1895 * t2718 + t1889 * t2690 + t1901 * t2700 + t1894 * t2720 + t1888 * t2691 + t1900 * t2702 + t1893 * t2722 + t1887 * t2692 + t1899 * t2704 + t1892 * t2724 + t1886 * t2696 + t1898 * t2706 + t1891 * t2726 + t1885 * t2697 + t1897 * t2708 + t1890 * t2728 + t1884 * t2698 + t1896 * t2710, t2445, t2369 * t2456 + t2372 * t2455 - t2198, t2445 * t2368 + (-t2369 * t2455 + t2372 * t2456 - t2266) * t2371; -t1861 * t2522 - t1863 * t2521 - t1865 * t2520 - t1867 * t2519 - t1869 * t2518 - t1871 * t2517 + (-t1841 * t2645 + t1859 * t1955) * t2819 + (-t1839 * t2646 + t1857 * t1954) * t2818 + (-t1837 * t2647 + t1855 * t1953) * t2817 + (-t1835 * t2648 + t1853 * t1952) * t2816 + (-t1833 * t2649 + t1851 * t1951) * t2815 + (-t1831 * t2650 + t1849 * t1950) * t2814, t1859 * t2717 + t1841 * t2687 + t1871 * t2699 + t1857 * t2719 + t1839 * t2688 + t1869 * t2701 + t1855 * t2721 + t1837 * t2689 + t1867 * t2703 + t1853 * t2723 + t1835 * t2693 + t1865 * t2705 + t1851 * t2725 + t1833 * t2694 + t1863 * t2707 + t1849 * t2727 + t1831 * t2695 + t1861 * t2709 + m(4), t1859 * t2718 + t1841 * t2690 + t1871 * t2700 + t1857 * t2720 + t1839 * t2691 + t1869 * t2702 + t1855 * t2722 + t1837 * t2692 + t1867 * t2704 + t1853 * t2724 + t1835 * t2696 + t1865 * t2706 + t1851 * t2726 + t1833 * t2697 + t1863 * t2708 + t1849 * t2728 + t1831 * t2698 + t1861 * t2710, t2179 + t2443, t2457 * t2372 + (-t2469 + t2458) * t2369, t2267 * t2372 + t2443 * t2368 + (-t2369 * t2457 + t2372 * t2458) * t2371; -t1860 * t2522 - t1862 * t2521 - t1864 * t2520 - t1866 * t2519 - t1868 * t2518 - t1870 * t2517 + (-t1840 * t2645 + t1858 * t1955) * t2819 + (-t1838 * t2646 + t1856 * t1954) * t2818 + (-t1836 * t2647 + t1854 * t1953) * t2817 + (-t1834 * t2648 + t1852 * t1952) * t2816 + (-t1832 * t2649 + t1850 * t1951) * t2815 + (-t1830 * t2650 + t1848 * t1950) * t2814, t1858 * t2717 + t1840 * t2687 + t1870 * t2699 + t1856 * t2719 + t1838 * t2688 + t1868 * t2701 + t1854 * t2721 + t1836 * t2689 + t1866 * t2703 + t1852 * t2723 + t1834 * t2693 + t1864 * t2705 + t1850 * t2725 + t1832 * t2694 + t1862 * t2707 + t1848 * t2727 + t1830 * t2695 + t1860 * t2709, t1858 * t2718 + t1840 * t2690 + t1870 * t2700 + t1856 * t2720 + t1838 * t2691 + t1868 * t2702 + t1854 * t2722 + t1836 * t2692 + t1866 * t2704 + t1852 * t2724 + t1834 * t2696 + t1864 * t2706 + t1850 * t2726 + t1832 * t2697 + t1862 * t2708 + t1848 * t2728 + t1830 * t2698 + t1860 * t2710 + m(4), t2446 + t2545, t2460 * t2369 + (t2469 - t2459) * t2372, t2369 * t2267 + (t2446 + t2230) * t2368 + (t2369 * t2459 + t2372 * t2460) * t2371; -t1740 * t2522 - t1741 * t2521 - t1742 * t2520 - t1749 * t2519 - t1750 * t2518 - t1751 * t2517 + (-t1715 * t2645 + t1733 * t1955) * t2819 + (-t1714 * t2646 + t1732 * t1954) * t2818 + (-t1713 * t2647 + t1731 * t1953) * t2817 + (-t1712 * t2648 + t1730 * t1952) * t2816 + (-t1711 * t2649 + t1729 * t1951) * t2815 + (-t1710 * t2650 + t1728 * t1950) * t2814, t1733 * t2717 + t1715 * t2687 + t1751 * t2699 + t1732 * t2719 + t1714 * t2688 + t1750 * t2701 + t1731 * t2721 + t1713 * t2689 + t1749 * t2703 + t1730 * t2723 + t1712 * t2693 + t1742 * t2705 + t1729 * t2725 + t1711 * t2694 + t1741 * t2707 + t1728 * t2727 + t1710 * t2695 + t1740 * t2709 - t2768, t1733 * t2718 + t1715 * t2690 + t1751 * t2700 + t1732 * t2720 + t1714 * t2691 + t1750 * t2702 + t1731 * t2722 + t1713 * t2692 + t1749 * t2704 + t1730 * t2724 + t1712 * t2696 + t1742 * t2706 + t1729 * t2726 + t1711 * t2697 + t1741 * t2708 + t1728 * t2728 + t1710 * t2698 + t1740 * t2710 + t2545, t2226 * t2330 + 0.2e1 * t2371 * t2791 + t2444, t2229 * t2371 + t2368 * t2291 + t2369 * t2466 + t2372 * t2465, t2444 * t2368 + (-t2369 * t2465 + t2372 * t2466 + t2292) * t2371; -t1783 * t2522 - t1785 * t2521 - t1787 * t2520 - t1789 * t2519 - t1791 * t2518 - t1793 * t2517 + (-t1769 * t2645 + t1781 * t1955) * t2819 + (-t1767 * t2646 + t1779 * t1954) * t2818 + (-t1765 * t2647 + t1777 * t1953) * t2817 + (-t1763 * t2648 + t1775 * t1952) * t2816 + (-t1761 * t2649 + t1773 * t1951) * t2815 + (-t1759 * t2650 + t1771 * t1950) * t2814 + t2768, t1781 * t2717 + t1769 * t2687 + t1793 * t2699 + t1779 * t2719 + t1767 * t2688 + t1791 * t2701 + t1777 * t2721 + t1765 * t2689 + t1789 * t2703 + t1775 * t2723 + t1763 * t2693 + t1787 * t2705 + t1773 * t2725 + t1761 * t2694 + t1785 * t2707 + t1771 * t2727 + t1759 * t2695 + t1783 * t2709, t2469 + t1793 * t2700 + t1791 * t2702 + t1787 * t2706 + t1789 * t2704 + t1783 * t2710 + t1785 * t2708 + t1767 * t2691 + t1781 * t2718 + t1769 * t2690 + t1765 * t2692 + t1779 * t2720 + t1777 * t2722 + t1775 * t2724 + t1763 * t2696 + t1773 * t2726 + t1761 * t2697 + t1771 * t2728 + t1759 * t2698, t2447 + (Ifges(4,5) * t2369 + Ifges(4,6) * t2580) * t2370 + t2367 * (Ifges(4,5) * t2580 - Ifges(4,6) * t2369) - 0.2e1 * t2369 * t2292 * t2330 + ((t2369 * t2579 + 0.2e1 * t2729) * t2329 - t2232 * t2583 + t2733 * t2581 - t2729) * t2371, t2232 * t2329 + (Ifges(4,1) - t2461 + 0.2e1 * t2523) * t2372 + (t2462 + t2471) * t2369, t2212 * t2369 + t2372 * t2291 + t2447 * t2368 + (t2369 * t2461 + t2372 * t2462) * t2371; -t1782 * t2522 - t1784 * t2521 - t1786 * t2520 - t1788 * t2519 - t1790 * t2518 - t1792 * t2517 + (-t1768 * t2645 + t1780 * t1955) * t2819 + (-t1766 * t2646 + t1778 * t1954) * t2818 + (-t1764 * t2647 + t1776 * t1953) * t2817 + (-t1762 * t2648 + t1774 * t1952) * t2816 + (-t1760 * t2649 + t1772 * t1951) * t2815 + (-t1758 * t2650 + t1770 * t1950) * t2814 - t2545, -t2469 + t1792 * t2699 + t1790 * t2701 + t1786 * t2705 + t1788 * t2703 + t1782 * t2709 + t1784 * t2707 + t1768 * t2687 + t1766 * t2688 + t1780 * t2717 + t1764 * t2689 + t1778 * t2719 + t1776 * t2721 + t1774 * t2723 + t1762 * t2693 + t1772 * t2725 + t1760 * t2694 + t1770 * t2727 + t1758 * t2695, t1780 * t2718 + t1768 * t2690 + t1792 * t2700 + t1778 * t2720 + t1766 * t2691 + t1790 * t2702 + t1776 * t2722 + t1764 * t2692 + t1788 * t2704 + t1774 * t2724 + t1762 * t2696 + t1786 * t2706 + t1772 * t2726 + t1760 * t2697 + t1784 * t2708 + t1770 * t2728 + t1758 * t2698 + t1782 * t2710, (0.2e1 * t2330 - 0.1e1) * t2372 * t2292 + t2448 + (-t2226 * t2580 + t2229 * t2369) * t2371 + t2368 * t2577, (-0.2e1 * t2329 * t2731 - t2463 - t2471) * t2372 + (Ifges(4,1) + t2464 - t2467) * t2369, -t2212 * t2372 + t2577 + t2448 * t2368 + (t2369 * t2463 + t2372 * t2464) * t2371;];
MX  = t1;
