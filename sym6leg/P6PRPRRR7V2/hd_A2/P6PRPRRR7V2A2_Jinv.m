% Analytische Jacobi-Matrix für parallelen Roboter
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorpose und aktiven Gelenkkoordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d4,theta1,theta3]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% Jinv [6x6]
%   Analytische Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-17 04:47
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function Jinv = P6PRPRRR7V2A2_Jinv(xP, qJ, pkin, koppelP, ...
legFrame)


%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(10,1),zeros(6,3),zeros(6,3)}
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRPRRR7V2A2_Jinv: qJ has to be [3x6] (double)');
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRPRRR7V2A2_Jinv: xP has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRPRRR7V2A2_Jinv: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRPRRR7V2A2_Jinv: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRPRRR7V2A2_Jinv: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From Jinv_para_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-17 04:40:56
% EndTime: 2019-05-17 04:41:01
% DurationCPUTime: 5.77s
% Computational Cost: add. (1806->465), mult. (4302->982), div. (36->12), fcn. (4542->64), ass. (0->386)
t203 = cos(pkin(10));
t404 = sin(pkin(10));
t405 = sin(pkin(6)) * pkin(8);
t141 = -pkin(3) * t404 + t203 * t405;
t154 = cos(pkin(6)) * pkin(8);
t148 = t154 + qJ(3,6);
t206 = cos(pkin(4));
t142 = t206 * t148;
t205 = cos(pkin(5));
t198 = t205 ^ 2;
t202 = sin(pkin(4));
t222 = cos(qJ(2,6));
t318 = t202 * t222;
t411 = (-t141 * t318 + t142) * t198 - t142;
t149 = t154 + qJ(3,5);
t143 = t206 * t149;
t223 = cos(qJ(2,5));
t317 = t202 * t223;
t410 = (-t141 * t317 + t143) * t198 - t143;
t150 = t154 + qJ(3,4);
t144 = t206 * t150;
t224 = cos(qJ(2,4));
t316 = t202 * t224;
t409 = (-t141 * t316 + t144) * t198 - t144;
t151 = t154 + qJ(3,3);
t145 = t206 * t151;
t234 = cos(qJ(2,3));
t315 = t202 * t234;
t408 = (-t141 * t315 + t145) * t198 - t145;
t152 = t154 + qJ(3,2);
t146 = t206 * t152;
t235 = cos(qJ(2,2));
t314 = t202 * t235;
t407 = (-t141 * t314 + t146) * t198 - t146;
t153 = t154 + qJ(3,1);
t147 = t206 * t153;
t236 = cos(qJ(2,1));
t313 = t202 * t236;
t406 = (-t141 * t313 + t147) * t198 - t147;
t238 = xP(5);
t193 = sin(t238);
t196 = cos(t238);
t240 = koppelP(6,3);
t237 = xP(6);
t192 = sin(t237);
t195 = cos(t237);
t246 = koppelP(6,2);
t252 = koppelP(6,1);
t269 = -t192 * t246 + t195 * t252;
t103 = t193 * t240 + t269 * t196;
t199 = sin(pkin(9));
t403 = t103 * t199;
t204 = cos(pkin(9));
t402 = t103 * t204;
t241 = koppelP(5,3);
t247 = koppelP(5,2);
t253 = koppelP(5,1);
t268 = -t192 * t247 + t195 * t253;
t104 = t193 * t241 + t268 * t196;
t401 = t104 * t199;
t400 = t104 * t204;
t242 = koppelP(4,3);
t248 = koppelP(4,2);
t254 = koppelP(4,1);
t267 = -t192 * t248 + t195 * t254;
t105 = t193 * t242 + t267 * t196;
t399 = t105 * t199;
t398 = t105 * t204;
t243 = koppelP(3,3);
t249 = koppelP(3,2);
t255 = koppelP(3,1);
t266 = -t192 * t249 + t195 * t255;
t106 = t193 * t243 + t266 * t196;
t397 = t106 * t199;
t396 = t106 * t204;
t244 = koppelP(2,3);
t250 = koppelP(2,2);
t256 = koppelP(2,1);
t265 = -t192 * t250 + t195 * t256;
t107 = t193 * t244 + t265 * t196;
t395 = t107 * t199;
t394 = t107 * t204;
t245 = koppelP(1,3);
t251 = koppelP(1,2);
t257 = koppelP(1,1);
t264 = -t192 * t251 + t195 * t257;
t108 = t193 * t245 + t264 * t196;
t393 = t108 * t199;
t392 = t108 * t204;
t219 = sin(qJ(2,6));
t312 = t206 * t222;
t121 = t199 * t312 + t204 * t219;
t225 = legFrame(6,2);
t180 = sin(t225);
t391 = t121 * t180;
t220 = sin(qJ(2,5));
t311 = t206 * t223;
t122 = t199 * t311 + t204 * t220;
t226 = legFrame(5,2);
t181 = sin(t226);
t390 = t122 * t181;
t221 = sin(qJ(2,4));
t310 = t206 * t224;
t123 = t199 * t310 + t204 * t221;
t227 = legFrame(4,2);
t182 = sin(t227);
t389 = t123 * t182;
t124 = -t199 * t219 + t204 * t312;
t388 = t124 * t180;
t125 = -t199 * t220 + t204 * t311;
t387 = t125 * t181;
t126 = -t199 * t221 + t204 * t310;
t386 = t126 * t182;
t231 = sin(qJ(2,3));
t309 = t206 * t234;
t128 = t199 * t309 + t204 * t231;
t228 = legFrame(3,2);
t183 = sin(t228);
t385 = t128 * t183;
t232 = sin(qJ(2,2));
t308 = t206 * t235;
t129 = t199 * t308 + t204 * t232;
t229 = legFrame(2,2);
t184 = sin(t229);
t384 = t129 * t184;
t233 = sin(qJ(2,1));
t307 = t206 * t236;
t130 = t199 * t307 + t204 * t233;
t230 = legFrame(1,2);
t185 = sin(t230);
t383 = t130 * t185;
t131 = -t199 * t231 + t204 * t309;
t382 = t131 * t183;
t132 = -t199 * t232 + t204 * t308;
t381 = t132 * t184;
t133 = -t199 * t233 + t204 * t307;
t380 = t133 * t185;
t213 = legFrame(6,1);
t162 = sin(t213);
t379 = t162 * t180;
t214 = legFrame(5,1);
t163 = sin(t214);
t378 = t163 * t181;
t215 = legFrame(4,1);
t164 = sin(t215);
t377 = t164 * t182;
t216 = legFrame(3,1);
t165 = sin(t216);
t376 = t165 * t183;
t217 = legFrame(2,1);
t166 = sin(t217);
t375 = t166 * t184;
t218 = legFrame(1,1);
t167 = sin(t218);
t374 = t167 * t185;
t174 = cos(t213);
t373 = t174 * t180;
t175 = cos(t214);
t372 = t175 * t181;
t176 = cos(t215);
t371 = t176 * t182;
t177 = cos(t216);
t370 = t177 * t183;
t178 = cos(t217);
t369 = t178 * t184;
t179 = cos(t218);
t368 = t179 * t185;
t367 = t180 * t199;
t366 = t180 * t204;
t365 = t181 * t199;
t364 = t181 * t204;
t363 = t182 * t199;
t362 = t182 * t204;
t361 = t183 * t199;
t360 = t183 * t204;
t359 = t184 * t199;
t358 = t184 * t204;
t357 = t185 * t199;
t356 = t185 * t204;
t186 = cos(t225);
t355 = t186 * t219;
t187 = cos(t226);
t354 = t187 * t220;
t188 = cos(t227);
t353 = t188 * t221;
t189 = cos(t228);
t352 = t189 * t231;
t190 = cos(t229);
t351 = t190 * t232;
t191 = cos(t230);
t350 = t191 * t233;
t239 = xP(4);
t194 = sin(t239);
t349 = t194 * t246;
t348 = t194 * t247;
t347 = t194 * t248;
t346 = t194 * t249;
t345 = t194 * t250;
t344 = t194 * t251;
t343 = t194 * t252;
t342 = t194 * t253;
t341 = t194 * t254;
t340 = t194 * t255;
t339 = t194 * t256;
t338 = t194 * t257;
t337 = t196 * t240;
t336 = t196 * t241;
t335 = t196 * t242;
t334 = t196 * t243;
t333 = t196 * t244;
t332 = t196 * t245;
t197 = cos(t239);
t331 = t197 * t246;
t330 = t197 * t247;
t329 = t197 * t248;
t328 = t197 * t249;
t327 = t197 * t250;
t326 = t197 * t251;
t325 = t197 * t252;
t324 = t197 * t253;
t323 = t197 * t254;
t322 = t197 * t255;
t321 = t197 * t256;
t320 = t197 * t257;
t319 = t202 * t205;
t127 = t206 * t141;
t134 = pkin(3) * t203 + t404 * t405 + pkin(2);
t306 = t219 * t134;
t305 = t219 * t162;
t304 = t219 * t174;
t303 = t220 * t134;
t302 = t220 * t163;
t301 = t220 * t175;
t300 = t221 * t134;
t299 = t221 * t164;
t298 = t221 * t176;
t297 = t231 * t134;
t296 = t231 * t165;
t295 = t231 * t177;
t294 = t232 * t134;
t293 = t232 * t166;
t292 = t232 * t178;
t291 = t233 * t134;
t290 = t233 * t167;
t289 = t233 * t179;
t288 = t186 * t312;
t287 = t187 * t311;
t286 = t188 * t310;
t285 = t189 * t309;
t284 = t190 * t308;
t283 = t191 * t307;
t201 = sin(pkin(5));
t282 = t201 * t127;
t281 = t162 * t312;
t280 = t174 * t312;
t279 = t163 * t311;
t278 = t175 * t311;
t277 = t164 * t310;
t276 = t176 * t310;
t275 = t165 * t309;
t274 = t177 * t309;
t273 = t166 * t308;
t272 = t178 * t308;
t271 = t167 * t307;
t270 = t179 * t307;
t263 = 0.1e1 / ((-(t148 * t318 + t127) * t201 + t202 * t306) * t205 + t411);
t262 = 0.1e1 / ((-(t149 * t317 + t127) * t201 + t202 * t303) * t205 + t410);
t261 = 0.1e1 / ((-(t150 * t316 + t127) * t201 + t202 * t300) * t205 + t409);
t260 = 0.1e1 / ((-(t151 * t315 + t127) * t201 + t202 * t297) * t205 + t408);
t259 = 0.1e1 / ((-(t152 * t314 + t127) * t201 + t202 * t294) * t205 + t407);
t258 = 0.1e1 / ((-(t153 * t313 + t127) * t201 + t202 * t291) * t205 + t406);
t212 = legFrame(1,3);
t211 = legFrame(2,3);
t210 = legFrame(3,3);
t209 = legFrame(4,3);
t208 = legFrame(5,3);
t207 = legFrame(6,3);
t173 = cos(t212);
t172 = cos(t211);
t171 = cos(t210);
t170 = cos(t209);
t169 = cos(t208);
t168 = cos(t207);
t161 = sin(t212);
t160 = sin(t211);
t159 = sin(t210);
t158 = sin(t209);
t157 = sin(t208);
t156 = sin(t207);
t140 = t192 * t257 + t195 * t251;
t139 = t192 * t256 + t195 * t250;
t138 = t192 * t255 + t195 * t249;
t137 = t192 * t254 + t195 * t248;
t136 = t192 * t253 + t195 * t247;
t135 = t192 * t252 + t195 * t246;
t120 = -t199 * t161 + t204 * t173;
t119 = -t199 * t160 + t204 * t172;
t118 = -t199 * t159 + t204 * t171;
t117 = -t199 * t158 + t204 * t170;
t116 = -t199 * t157 + t204 * t169;
t115 = -t199 * t156 + t204 * t168;
t114 = t204 * t161 + t199 * t173;
t113 = t204 * t160 + t199 * t172;
t112 = t204 * t159 + t199 * t171;
t111 = t204 * t158 + t199 * t170;
t110 = t204 * t157 + t199 * t169;
t109 = t204 * t156 + t199 * t168;
t102 = t264 * t193 - t332;
t101 = t265 * t193 - t333;
t100 = t266 * t193 - t334;
t99 = t267 * t193 - t335;
t98 = t268 * t193 - t336;
t97 = t269 * t193 - t337;
t84 = t114 * t179 + t120 * t374;
t83 = t113 * t178 + t119 * t375;
t82 = t112 * t177 + t118 * t376;
t81 = t111 * t176 + t117 * t377;
t80 = t110 * t175 + t116 * t378;
t79 = t109 * t174 + t115 * t379;
t78 = -t167 * t114 + t120 * t368;
t77 = -t166 * t113 + t119 * t369;
t76 = -t165 * t112 + t118 * t370;
t75 = -t164 * t111 + t117 * t371;
t74 = -t163 * t110 + t116 * t372;
t73 = -t162 * t109 + t115 * t373;
t72 = t102 * t197 - t194 * t140;
t71 = t101 * t197 - t194 * t139;
t70 = t100 * t197 - t194 * t138;
t69 = -t194 * t137 + t99 * t197;
t68 = -t194 * t136 + t98 * t197;
t67 = -t194 * t135 + t97 * t197;
t66 = t194 * t102 + t197 * t140;
t65 = t194 * t101 + t197 * t139;
t64 = t194 * t100 + t197 * t138;
t63 = t197 * t137 + t194 * t99;
t62 = t197 * t136 + t194 * t98;
t61 = t197 * t135 + t194 * t97;
t60 = -t197 * t332 + (t193 * t320 - t344) * t195 - t192 * (t193 * t326 + t338);
t59 = -t194 * t332 + (t193 * t338 + t326) * t195 + t192 * (-t193 * t344 + t320);
t58 = -t197 * t333 + (t193 * t321 - t345) * t195 - t192 * (t193 * t327 + t339);
t57 = -t194 * t333 + (t193 * t339 + t327) * t195 + t192 * (-t193 * t345 + t321);
t56 = -t197 * t334 + (t193 * t322 - t346) * t195 - t192 * (t193 * t328 + t340);
t55 = -t194 * t334 + (t193 * t340 + t328) * t195 + t192 * (-t193 * t346 + t322);
t54 = -t197 * t335 + (t193 * t323 - t347) * t195 - t192 * (t193 * t329 + t341);
t53 = -t194 * t335 + (t193 * t341 + t329) * t195 + t192 * (-t193 * t347 + t323);
t52 = -t197 * t336 + (t193 * t324 - t348) * t195 - t192 * (t193 * t330 + t342);
t51 = -t194 * t336 + (t193 * t342 + t330) * t195 + t192 * (-t193 * t348 + t324);
t50 = -t197 * t337 + (t193 * t325 - t349) * t195 - t192 * (t193 * t331 + t343);
t49 = -t194 * t337 + (t193 * t343 + t331) * t195 + t192 * (-t193 * t349 + t325);
t48 = -t108 * t368 + t60 * t191;
t47 = -t108 * t374 + t59 * t191;
t46 = -t107 * t369 + t58 * t190;
t45 = -t107 * t375 + t57 * t190;
t44 = -t106 * t370 + t56 * t189;
t43 = -t106 * t376 + t55 * t189;
t42 = -t105 * t371 + t54 * t188;
t41 = -t105 * t377 + t53 * t188;
t40 = -t104 * t372 + t52 * t187;
t39 = -t104 * t378 + t51 * t187;
t38 = -t103 * t373 + t50 * t186;
t37 = -t103 * t379 + t49 * t186;
t24 = t59 * t350 + t108 * (-t185 * t290 + t270);
t23 = t57 * t351 + t107 * (-t184 * t293 + t272);
t22 = t55 * t352 + t106 * (-t183 * t296 + t274);
t21 = -t60 * t350 + t108 * (t185 * t289 + t271);
t20 = -t58 * t351 + t107 * (t184 * t292 + t273);
t19 = -t56 * t352 + t106 * (t183 * t295 + t275);
t18 = -t54 * t353 + (t182 * t298 + t277) * t105;
t17 = t53 * t353 + (-t182 * t299 + t276) * t105;
t16 = -t52 * t354 + (t181 * t301 + t279) * t104;
t15 = t51 * t354 + (-t181 * t302 + t278) * t104;
t14 = -t50 * t355 + (t180 * t304 + t281) * t103;
t13 = t49 * t355 + (-t180 * t305 + t280) * t103;
t12 = t59 * t283 - (t185 * t271 + t289) * t108;
t11 = t57 * t284 - (t184 * t273 + t292) * t107;
t10 = t55 * t285 - (t183 * t275 + t295) * t106;
t9 = t60 * t283 - t108 * (t185 * t270 - t290);
t8 = t58 * t284 - t107 * (t184 * t272 - t293);
t7 = t56 * t285 - t106 * (t183 * t274 - t296);
t6 = t53 * t286 - t105 * (t182 * t277 + t298);
t5 = t51 * t287 - t104 * (t181 * t279 + t301);
t4 = t49 * t288 - t103 * (t180 * t281 + t304);
t3 = t54 * t286 - t105 * (t182 * t276 - t299);
t2 = t52 * t287 - t104 * (t181 * t278 - t302);
t1 = t50 * t288 - t103 * (t180 * t280 - t305);
t25 = [-(t120 * t319 + (-t233 * t114 + t120 * t307) * t201) * t191 / ((t202 * (-t201 * t153 * t236 + t291) - t282) * t205 + t406), (-t84 * t319 - (t84 * t307 - (t114 * t374 - t120 * t179) * t233) * t201) * t258, (t78 * t319 + t201 * (t78 * t307 - (t114 * t368 + t167 * t120) * t233)) * t258, ((((-t72 * t130 + t66 * t380) * t173 - t161 * (t72 * t133 + t66 * t383)) * t179 - t167 * ((t66 * t130 + t72 * t380) * t173 + t161 * (t66 * t133 - t72 * t383))) * t201 - (((t199 * t72 - t356 * t66) * t173 + t161 * (t72 * t204 + t357 * t66)) * t179 + ((t66 * t199 + t356 * t72) * t173 + t161 * (t66 * t204 - t357 * t72)) * t167) * t319) * t258, (((t21 * t199 + t9 * t204) * t173 + t161 * (-t9 * t199 + t21 * t204)) * t201 + ((t167 * t393 + t48 * t204) * t173 + t161 * (t167 * t392 - t48 * t199)) * t319) * t258, (((t12 * t204 - t24 * t199) * t173 - t161 * (t12 * t199 + t24 * t204)) * t201 + ((-t179 * t393 + t47 * t204) * t173 - t161 * (t179 * t392 + t47 * t199)) * t319) * t258; -(t119 * t319 + (-t232 * t113 + t119 * t308) * t201) * t190 / ((t202 * (-t201 * t152 * t235 + t294) - t282) * t205 + t407), (-t83 * t319 - (t83 * t308 - (t113 * t375 - t119 * t178) * t232) * t201) * t259, (t77 * t319 + t201 * (t77 * t308 - (t113 * t369 + t166 * t119) * t232)) * t259, ((((-t71 * t129 + t65 * t381) * t172 - t160 * (t71 * t132 + t65 * t384)) * t178 - t166 * ((t65 * t129 + t71 * t381) * t172 + t160 * (t65 * t132 - t71 * t384))) * t201 - (((t199 * t71 - t358 * t65) * t172 + t160 * (t71 * t204 + t359 * t65)) * t178 + ((t65 * t199 + t358 * t71) * t172 + t160 * (t65 * t204 - t359 * t71)) * t166) * t319) * t259, (((t20 * t199 + t8 * t204) * t172 + t160 * (-t8 * t199 + t20 * t204)) * t201 + ((t166 * t395 + t46 * t204) * t172 + t160 * (t166 * t394 - t46 * t199)) * t319) * t259, (((t11 * t204 - t23 * t199) * t172 - t160 * (t11 * t199 + t23 * t204)) * t201 + ((-t178 * t395 + t45 * t204) * t172 - t160 * (t178 * t394 + t45 * t199)) * t319) * t259; -(t118 * t319 + (-t231 * t112 + t118 * t309) * t201) * t189 / ((t202 * (-t201 * t151 * t234 + t297) - t282) * t205 + t408), (-t82 * t319 - (t82 * t309 - (t112 * t376 - t118 * t177) * t231) * t201) * t260, (t76 * t319 + t201 * (t76 * t309 - (t112 * t370 + t165 * t118) * t231)) * t260, ((((-t70 * t128 + t64 * t382) * t171 - t159 * (t70 * t131 + t64 * t385)) * t177 - t165 * ((t64 * t128 + t70 * t382) * t171 + t159 * (t64 * t131 - t70 * t385))) * t201 - (((t199 * t70 - t360 * t64) * t171 + t159 * (t70 * t204 + t361 * t64)) * t177 + ((t64 * t199 + t360 * t70) * t171 + t159 * (t64 * t204 - t361 * t70)) * t165) * t319) * t260, (((t19 * t199 + t7 * t204) * t171 + t159 * (t19 * t204 - t7 * t199)) * t201 + ((t165 * t397 + t44 * t204) * t171 + t159 * (t165 * t396 - t44 * t199)) * t319) * t260, (((t10 * t204 - t22 * t199) * t171 - t159 * (t10 * t199 + t22 * t204)) * t201 + ((-t177 * t397 + t43 * t204) * t171 - t159 * (t177 * t396 + t43 * t199)) * t319) * t260; -(t117 * t319 + (-t221 * t111 + t117 * t310) * t201) * t188 / ((t202 * (-t201 * t150 * t224 + t300) - t282) * t205 + t409), (-t81 * t319 - (t81 * t310 - (t111 * t377 - t117 * t176) * t221) * t201) * t261, (t75 * t319 + t201 * (t75 * t310 - (t111 * t371 + t164 * t117) * t221)) * t261, ((((-t123 * t69 + t63 * t386) * t170 - t158 * (t126 * t69 + t63 * t389)) * t176 - t164 * ((t63 * t123 + t69 * t386) * t170 + t158 * (t63 * t126 - t69 * t389))) * t201 - (((t199 * t69 - t362 * t63) * t170 + t158 * (t69 * t204 + t363 * t63)) * t176 + ((t63 * t199 + t362 * t69) * t170 + t158 * (t63 * t204 - t363 * t69)) * t164) * t319) * t261, (((t199 * t18 + t3 * t204) * t170 + (t18 * t204 - t199 * t3) * t158) * t201 + ((t164 * t399 + t42 * t204) * t170 + t158 * (t164 * t398 - t42 * t199)) * t319) * t261, (((-t199 * t17 + t6 * t204) * t170 - t158 * (t17 * t204 + t199 * t6)) * t201 + ((-t176 * t399 + t41 * t204) * t170 - t158 * (t176 * t398 + t41 * t199)) * t319) * t261; -(t116 * t319 + (-t220 * t110 + t116 * t311) * t201) * t187 / ((t202 * (-t201 * t149 * t223 + t303) - t282) * t205 + t410), (-t80 * t319 - (t80 * t311 - (t110 * t378 - t116 * t175) * t220) * t201) * t262, (t74 * t319 + t201 * (t74 * t311 - (t110 * t372 + t163 * t116) * t220)) * t262, ((((-t122 * t68 + t62 * t387) * t169 - t157 * (t125 * t68 + t62 * t390)) * t175 - t163 * ((t62 * t122 + t68 * t387) * t169 + t157 * (t62 * t125 - t68 * t390))) * t201 - (((t199 * t68 - t364 * t62) * t169 + t157 * (t68 * t204 + t365 * t62)) * t175 + ((t62 * t199 + t364 * t68) * t169 + t157 * (t62 * t204 - t365 * t68)) * t163) * t319) * t262, (((t199 * t16 + t2 * t204) * t169 + (t16 * t204 - t199 * t2) * t157) * t201 + ((t163 * t401 + t40 * t204) * t169 + t157 * (t163 * t400 - t40 * t199)) * t319) * t262, (((-t199 * t15 + t5 * t204) * t169 - t157 * (t15 * t204 + t199 * t5)) * t201 + ((-t175 * t401 + t39 * t204) * t169 - t157 * (t175 * t400 + t39 * t199)) * t319) * t262; -(t115 * t319 + (-t219 * t109 + t115 * t312) * t201) * t186 / ((t202 * (-t201 * t148 * t222 + t306) - t282) * t205 + t411), (-t79 * t319 - (t79 * t312 - (t109 * t379 - t115 * t174) * t219) * t201) * t263, (t73 * t319 + t201 * (t73 * t312 - (t109 * t373 + t162 * t115) * t219)) * t263, ((((-t121 * t67 + t61 * t388) * t168 - t156 * (t124 * t67 + t61 * t391)) * t174 - t162 * ((t61 * t121 + t67 * t388) * t168 + t156 * (t61 * t124 - t67 * t391))) * t201 - (((t199 * t67 - t366 * t61) * t168 + t156 * (t67 * t204 + t367 * t61)) * t174 + ((t61 * t199 + t366 * t67) * t168 + t156 * (t61 * t204 - t367 * t67)) * t162) * t319) * t263, (((t1 * t204 + t199 * t14) * t168 + (-t199 * t1 + t14 * t204) * t156) * t201 + ((t162 * t403 + t38 * t204) * t168 + t156 * (t162 * t402 - t38 * t199)) * t319) * t263, (((-t199 * t13 + t4 * t204) * t168 - t156 * (t13 * t204 + t199 * t4)) * t201 + ((-t174 * t403 + t37 * t204) * t168 - t156 * (t174 * t402 + t37 * t199)) * t319) * t263;];
Jinv  = t25;
