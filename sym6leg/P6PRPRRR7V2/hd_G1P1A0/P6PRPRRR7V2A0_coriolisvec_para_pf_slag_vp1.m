% Calculate vector of centrifugal and coriolis load on the joints for
% P6PRPRRR7V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d4,theta1,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [6x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-17 04:21
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRPRRR7V2G1P1A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-17 02:50:01
% EndTime: 2019-05-17 02:52:42
% DurationCPUTime: 172.71s
% Computational Cost: add. (666267->2278), mult. (1411245->3607), div. (16200->27), fcn. (1443048->64), ass. (0->1376)
t3924 = xP(4);
t3861 = sin(t3924);
t3864 = cos(t3924);
t4207 = t3861 * t3864;
t4587 = 0.2e1 * t4207;
t3923 = xP(5);
t3860 = sin(t3923);
t3863 = cos(t3923);
t4446 = koppelP(6,3);
t3922 = xP(6);
t3859 = sin(t3922);
t3862 = cos(t3922);
t4452 = koppelP(6,2);
t4458 = koppelP(6,1);
t4483 = -t3859 * t4452 + t3862 * t4458;
t3628 = t3860 * t4446 + t3863 * t4483;
t3917 = xDP(5);
t4197 = t3864 * t3917;
t3918 = xDP(4);
t3739 = t3859 * t4458 + t3862 * t4452;
t4474 = -t3860 * t4483 + t3863 * t4446;
t4531 = t3739 * t3864 - t3861 * t4474;
t4307 = t4531 * t3918;
t4586 = t3628 * t4197 - t4307;
t4206 = t3861 * t3917;
t4214 = t3861 * t3739;
t3512 = t3864 * t4474 + t4214;
t4298 = t3512 * t3918;
t4585 = -t3628 * t4206 + t4298;
t4447 = koppelP(5,3);
t4453 = koppelP(5,2);
t4459 = koppelP(5,1);
t4482 = -t3859 * t4453 + t3862 * t4459;
t3629 = t3860 * t4447 + t3863 * t4482;
t3740 = t3859 * t4459 + t3862 * t4453;
t4473 = -t3860 * t4482 + t3863 * t4447;
t4532 = t3740 * t3864 - t3861 * t4473;
t4306 = t4532 * t3918;
t4584 = t3629 * t4197 - t4306;
t4213 = t3861 * t3740;
t3515 = t3864 * t4473 + t4213;
t4297 = t3515 * t3918;
t4583 = -t3629 * t4206 + t4297;
t4448 = koppelP(4,3);
t4454 = koppelP(4,2);
t4460 = koppelP(4,1);
t4481 = -t3859 * t4454 + t3862 * t4460;
t3630 = t3860 * t4448 + t3863 * t4481;
t3741 = t3859 * t4460 + t3862 * t4454;
t4472 = -t3860 * t4481 + t3863 * t4448;
t4533 = t3741 * t3864 - t3861 * t4472;
t4305 = t4533 * t3918;
t4582 = t3630 * t4197 - t4305;
t4212 = t3861 * t3741;
t3518 = t3864 * t4472 + t4212;
t4296 = t3518 * t3918;
t4581 = -t3630 * t4206 + t4296;
t4449 = koppelP(3,3);
t4455 = koppelP(3,2);
t4461 = koppelP(3,1);
t4480 = -t3859 * t4455 + t3862 * t4461;
t3631 = t3860 * t4449 + t3863 * t4480;
t3742 = t3859 * t4461 + t3862 * t4455;
t4471 = -t3860 * t4480 + t3863 * t4449;
t4534 = t3742 * t3864 - t3861 * t4471;
t4304 = t4534 * t3918;
t4580 = t3631 * t4197 - t4304;
t4211 = t3861 * t3742;
t3521 = t3864 * t4471 + t4211;
t4295 = t3521 * t3918;
t4579 = -t3631 * t4206 + t4295;
t4450 = koppelP(2,3);
t4456 = koppelP(2,2);
t4462 = koppelP(2,1);
t4479 = -t3859 * t4456 + t3862 * t4462;
t3632 = t3860 * t4450 + t3863 * t4479;
t3743 = t3859 * t4462 + t3862 * t4456;
t4470 = -t3860 * t4479 + t3863 * t4450;
t4535 = t3743 * t3864 - t3861 * t4470;
t4303 = t4535 * t3918;
t4578 = t3632 * t4197 - t4303;
t4210 = t3861 * t3743;
t3524 = t3864 * t4470 + t4210;
t4294 = t3524 * t3918;
t4577 = -t3632 * t4206 + t4294;
t4451 = koppelP(1,3);
t4457 = koppelP(1,2);
t4463 = koppelP(1,1);
t4478 = -t3859 * t4457 + t3862 * t4463;
t3633 = t3860 * t4451 + t3863 * t4478;
t3744 = t3859 * t4463 + t3862 * t4457;
t4469 = -t3860 * t4478 + t3863 * t4451;
t4536 = t3744 * t3864 - t3861 * t4469;
t4302 = t4536 * t3918;
t4576 = t3633 * t4197 - t4302;
t4209 = t3861 * t3744;
t3527 = t3864 * t4469 + t4209;
t4293 = t3527 * t3918;
t4575 = -t3633 * t4206 + t4293;
t3925 = rSges(4,3);
t3927 = rSges(4,1);
t4421 = m(4) * t3927;
t3796 = t3925 * t4421 - Icges(4,5);
t4259 = t3796 * t3863;
t3727 = t3859 * t4259;
t3926 = rSges(4,2);
t4007 = t3926 * t4421 - Icges(4,4);
t3818 = t3862 ^ 2;
t4443 = 0.2e1 * t3818;
t4122 = t4007 * t4443;
t4220 = t3860 * t4007;
t3795 = m(4) * t3925 * t3926 - Icges(4,6);
t4262 = t3795 * t3863;
t3884 = t3926 ^ 2;
t3885 = t3927 ^ 2;
t4476 = (-t3884 + t3885) * m(4) + Icges(4,2) - Icges(4,1);
t4266 = t4476 * t3859;
t4552 = t3862 * (-t3860 * t4266 + t4262);
t3438 = -t3860 * t4122 + t3727 + t4220 + t4552;
t3820 = t3864 ^ 2;
t4267 = t4476 * t3818;
t3819 = t3863 ^ 2;
t4123 = 0.2e1 * t4259;
t4033 = t3860 * t4123;
t4258 = t4007 * t3859;
t4442 = 0.2e1 * t3819;
t4437 = t4442 - 0.4e1;
t4264 = t3795 * t3859;
t3883 = t3925 ^ 2;
t4503 = (-t3883 + t3884) * m(4) + Icges(4,3) - Icges(4,2);
t4218 = t3860 * t3863;
t4573 = -0.2e1 * t4218;
t4511 = t4503 * t3819 + t4264 * t4573;
t4567 = (-t4258 * t4437 + t4033) * t3862 + (t3819 - 0.2e1) * t4267 + t4476 + t4511;
t4574 = t3438 * t4587 - t3820 * t4567 - t4267;
t3873 = sin(pkin(5));
t3878 = cos(pkin(5));
t4190 = t3873 * t3878;
t3875 = cos(pkin(10));
t4418 = sin(pkin(10));
t4422 = pkin(8) * sin(pkin(6));
t4543 = pkin(3) * t4418 - t3875 * t4422;
t3681 = t4543 * t4190;
t3874 = sin(pkin(4));
t4185 = t3874 * t3878;
t3726 = t4543 * t3878;
t3877 = cos(pkin(6));
t3816 = t3877 * pkin(8);
t3809 = t3816 + qJ(3,4);
t4253 = t3809 * t3873;
t3636 = t3726 - t4253;
t3900 = sin(qJ(2,4));
t3799 = t4418 * t4422;
t3785 = t3799 + pkin(2);
t4423 = pkin(3) * t3875;
t4504 = t3785 + t4423;
t3694 = t3900 * t4504;
t3903 = cos(qJ(2,4));
t4548 = t3636 * t3903 + t3694;
t4571 = t4548 * t4185;
t3808 = t3816 + qJ(3,5);
t4255 = t3808 * t3873;
t3635 = t3726 - t4255;
t3899 = sin(qJ(2,5));
t3693 = t3899 * t4504;
t3902 = cos(qJ(2,5));
t4549 = t3635 * t3902 + t3693;
t4570 = t4549 * t4185;
t3807 = t3816 + qJ(3,6);
t4257 = t3807 * t3873;
t3634 = t3726 - t4257;
t3898 = sin(qJ(2,6));
t3692 = t3898 * t4504;
t3901 = cos(qJ(2,6));
t4550 = t3634 * t3901 + t3692;
t4569 = t4550 * t4185;
t3803 = t3860 * t3918;
t3916 = xDP(6);
t4502 = t3803 + t3916;
t4522 = t3859 * t4502;
t3974 = t4476 * t4522;
t4170 = t3917 * t3796;
t4223 = t3859 * t3916;
t3624 = -t4223 * t4476 + 0.2e1 * t4170;
t4031 = t3624 * t3819 - t4170;
t4568 = 0.2e1 * t3974 + t4031;
t4221 = t3859 * t3927;
t3735 = t3862 * t3926 + t4221;
t4204 = t3862 * t3927;
t3734 = t3859 * t3926 - t4204;
t4200 = t3863 * t3925;
t4475 = t3734 * t3860 + t4200;
t3447 = -t3735 * t3864 + t3861 * t4475;
t3812 = t3816 + qJ(3,3);
t3866 = t3878 ^ 2;
t3879 = cos(pkin(4));
t3991 = t3681 - t3816;
t4251 = t3812 * t3873;
t3638 = t3726 - t4251;
t3910 = sin(qJ(2,3));
t3699 = t3910 * t4504;
t3913 = cos(qJ(2,3));
t4547 = t3638 * t3913 + t3699;
t3410 = 0.1e1 / (t4185 * t4547 + (t3812 * t3866 - qJ(3,3) + t3991) * t3879);
t3813 = t3816 + qJ(3,2);
t4249 = t3813 * t3873;
t3639 = t3726 - t4249;
t3911 = sin(qJ(2,2));
t3700 = t3911 * t4504;
t3914 = cos(qJ(2,2));
t4546 = t3639 * t3914 + t3700;
t3411 = 0.1e1 / (t4185 * t4546 + (t3813 * t3866 - qJ(3,2) + t3991) * t3879);
t3814 = t3816 + qJ(3,1);
t4247 = t3814 * t3873;
t3640 = t3726 - t4247;
t3912 = sin(qJ(2,1));
t3701 = t3912 * t4504;
t3915 = cos(qJ(2,1));
t4545 = t3640 * t3915 + t3701;
t3412 = 0.1e1 / (t4185 * t4545 + (t3814 * t3866 - qJ(3,1) + t3991) * t3879);
t4566 = 0.2e1 * t4007;
t4172 = t3916 * t4007;
t4565 = -0.2e1 * t4172;
t4202 = t3863 * t3916;
t3488 = t3739 * t4202 - t3917 * t4474;
t4564 = t3488 * t3861;
t4563 = t3488 * t3864;
t3489 = t3740 * t4202 - t3917 * t4473;
t4562 = t3489 * t3861;
t4561 = t3489 * t3864;
t3490 = t3741 * t4202 - t3917 * t4472;
t4560 = t3490 * t3861;
t4559 = t3490 * t3864;
t3491 = t3742 * t4202 - t3917 * t4471;
t4558 = t3491 * t3861;
t4557 = t3491 * t3864;
t3492 = t3743 * t4202 - t3917 * t4470;
t4556 = t3492 * t3861;
t4555 = t3492 * t3864;
t3493 = t3744 * t4202 - t3917 * t4469;
t4554 = t3493 * t3861;
t4553 = t3493 * t3864;
t4551 = t4504 * t3873;
t4222 = t3859 * t3917;
t3733 = t3795 * t4222;
t4444 = 0.2e1 * t3733;
t3644 = t4444 - t4172;
t4544 = -t3644 * t3819 + t3733;
t3607 = -t3915 * t4247 + t3701;
t3810 = t3879 * t3873;
t3682 = t4543 * t3810;
t4153 = t3607 * t3874 + t3682;
t3779 = t3879 * t3814;
t4179 = t3874 * t3915;
t4494 = -t4179 * t4543 - t3779;
t4159 = -t3866 * t4494 - t3779;
t4542 = 0.1e1 / (t3878 * t4153 + t4159);
t3606 = -t3914 * t4249 + t3700;
t4154 = t3606 * t3874 + t3682;
t3778 = t3879 * t3813;
t4180 = t3874 * t3914;
t4493 = -t4180 * t4543 - t3778;
t4160 = -t3866 * t4493 - t3778;
t4541 = 0.1e1 / (t3878 * t4154 + t4160);
t3605 = -t3913 * t4251 + t3699;
t4155 = t3605 * t3874 + t3682;
t3777 = t3879 * t3812;
t4181 = t3874 * t3913;
t4492 = -t4181 * t4543 - t3777;
t4161 = -t3866 * t4492 - t3777;
t4540 = 0.1e1 / (t3878 * t4155 + t4161);
t3601 = -t3903 * t4253 + t3694;
t4156 = t3601 * t3874 + t3682;
t3772 = t3879 * t3809;
t4182 = t3874 * t3903;
t4491 = -t4182 * t4543 - t3772;
t4162 = -t3866 * t4491 - t3772;
t4539 = 0.1e1 / (t3878 * t4156 + t4162);
t3600 = -t3902 * t4255 + t3693;
t4157 = t3600 * t3874 + t3682;
t3771 = t3879 * t3808;
t4183 = t3874 * t3902;
t4490 = -t4183 * t4543 - t3771;
t4163 = -t3866 * t4490 - t3771;
t4538 = 0.1e1 / (t3878 * t4157 + t4163);
t3599 = -t3901 * t4257 + t3692;
t4158 = t3599 * t3874 + t3682;
t3770 = t3879 * t3807;
t4184 = t3874 * t3901;
t4489 = -t4184 * t4543 - t3770;
t4164 = -t3866 * t4489 - t3770;
t4537 = 0.1e1 / (t3878 * t4158 + t4164);
t3865 = t3875 ^ 2;
t3935 = rSges(3,2) ^ 2;
t4530 = Icges(3,1) + (m(3) * (rSges(3,1) ^ 2 - t3935) - Icges(3,1) + Icges(3,2)) * t3865;
t3736 = t4503 * t3917;
t4050 = t3796 * t4223;
t3623 = t3736 + t4050;
t4046 = t4007 * t4222;
t4261 = t3795 * t3916;
t3646 = -0.2e1 * t4046 + t4261;
t3439 = -t3646 * t3862 - t3917 * t4267 - t3623;
t4529 = t3439 * t3864;
t3921 = xDP(1);
t3262 = t3921 + (t3527 * t3864 - t3861 * t4536) * t3917 + (-t3527 * t3861 - t3864 * t4536) * t4202;
t3891 = legFrame(1,3);
t3826 = sin(t3891);
t3838 = cos(t3891);
t3871 = sin(pkin(9));
t3876 = cos(pkin(9));
t3713 = t3826 * t3876 + t3838 * t3871;
t3719 = -t3826 * t3871 + t3838 * t3876;
t3897 = legFrame(1,1);
t3832 = sin(t3897);
t3844 = cos(t3897);
t3909 = legFrame(1,2);
t3850 = sin(t3909);
t4231 = t3844 * t3850;
t3540 = t3713 * t4231 + t3719 * t3832;
t3541 = -t3713 * t3832 + t3719 * t4231;
t3704 = t4504 * t3915;
t4290 = (-t3640 * t3912 + t3704) * t3879;
t3280 = -t3540 * t4545 + t3541 * t4290;
t4237 = t3832 * t3850;
t3547 = t3713 * t3844 + t3719 * t4237;
t3553 = t3713 * t4237 - t3719 * t3844;
t3281 = -t3547 * t4290 + t3553 * t4545;
t3919 = xDP(3);
t4208 = t3861 * t3863;
t3289 = t3919 + (t3633 * t4208 + t3860 * t4536) * t3916 - t4576;
t3920 = xDP(2);
t4203 = t3863 * t3864;
t3295 = t3920 + (-t3527 * t3860 + t3633 * t4203) * t3916 - t4575;
t4246 = t3814 * t3912;
t3610 = t3873 * t4246 + t3704;
t3856 = cos(t3909);
t4269 = t4543 * t3912;
t4086 = (t3719 * (-t3878 * t4269 + t3610) * t3879 - t4545 * t3713) * t3412 * t3856;
t3116 = -t3262 * t4086 + (t3280 * t3289 + t3281 * t3295) * t3412;
t4173 = t3879 * t3915;
t3304 = t3541 * t4185 + t3873 * (-t3540 * t3912 + t3541 * t4173);
t3307 = -t3547 * t4185 - t3873 * (t3547 * t4173 - t3553 * t3912);
t3725 = t3879 * t4543;
t3400 = 0.1e1 / (((-t3814 * t4179 + t3725) * t3873 + t3874 * t3701) * t3878 + t4159);
t3445 = t3719 * t4185 + t3873 * (-t3713 * t3912 + t3719 * t4173);
t4315 = t3445 * t3856;
t4065 = t4542 * t4315;
t3122 = -t3262 * t4065 + (t3289 * t3304 + t3295 * t3307) * t3400;
t3684 = t3864 * t4202 + t4206;
t3685 = -t3861 * t4202 + t4197;
t3319 = t3527 * t3685 - t3684 * t4536 + t3921;
t4216 = t3860 * t3916;
t3763 = t3918 + t4216;
t3376 = -t3633 * t3685 + t3763 * t4536 + t3919;
t3382 = -t3527 * t3763 + t3633 * t3684 + t3920;
t3128 = t3412 * (t3280 * t3376 + t3281 * t3382) - t3319 * t4086;
t3146 = -t3319 * t4065 + (t3304 * t3376 + t3307 * t3382) * t3400;
t4093 = t3146 * t4551;
t4399 = t3146 * t3874;
t2876 = (((t3128 * t3879 - t4269 * t4399) * t3866 + ((-t3128 * t3915 + t3146 * t4246) * t3873 + t3146 * t3704) * t4185 + (-t3128 + t4093) * t3879) * t3122 - t3873 * (t3878 * t4179 + t3810) * t3146 * t3116) * t4542;
t3800 = t3879 * t3816;
t3933 = qJ(3,1) ^ 2;
t3937 = pkin(8) ^ 2;
t3756 = (t3877 ^ 2 * t3937 + pkin(3) ^ 2 - t3937) * t3865;
t3938 = pkin(2) ^ 2;
t3998 = 0.2e1 * t3799;
t3953 = pkin(2) * t3998 + 0.2e1 * t3785 * t4423 + t3756 + t3937 + t3938;
t3954 = t4543 * t3866;
t3955 = t3879 * t3681;
t3989 = t3878 * t4504;
t4032 = -0.2e1 * t3681;
t4150 = 0.2e1 * t3816;
t4152 = t3998 * t4423 + t3756;
t3947 = -(-t3128 * t4551 + (-((-pkin(3) + t3814) * (pkin(3) + t3814) + t4152) * t3866 + t3814 * t4032 + qJ(3,1) * t4150 + t3933 + t3953) * t3146) * t3122 / ((t3879 * qJ(3,1) + t3800) * t3866 - t3779 + t3955 + (t3912 * t3989 + (-t3814 * t4190 + t3954) * t3915) * t3874) + t3116 * t4542 * t4093;
t2879 = t3947 * t3878;
t2882 = t3947 * t3879;
t3867 = m(1) + m(2) + m(3);
t4439 = m(2) * rSges(2,2);
t3737 = t3878 * (rSges(3,1) * t4418 + t3875 * rSges(3,2));
t3882 = qJ(3,1) + rSges(3,3);
t4510 = -t3873 * t3882 + t3737;
t3656 = m(3) * t4510 + t4439;
t4111 = t4418 * rSges(3,2);
t3759 = t3875 * rSges(3,1) + pkin(2) - t4111;
t3698 = m(2) * rSges(2,1) + m(3) * t3759;
t3496 = -t3656 * t3912 + t3698 * t3915;
t4308 = t3496 * t3874;
t3811 = t3879 * t3878;
t3724 = -t3873 * t4179 + t3811;
t4431 = m(3) * t3724;
t2861 = -t2876 * t4308 - t2879 * t3867 + t2882 * t4431;
t4427 = m(3) * t3873;
t4151 = -0.2e1 * t4427;
t3014 = t3146 * t3656 * t3915 + t3912 * (t3128 * t4151 + t3146 * t3698);
t4515 = -t3014 * t4399 + t2861;
t3261 = t3921 + (t3524 * t3864 - t3861 * t4535) * t3917 + (-t3524 * t3861 - t3864 * t4535) * t4202;
t3890 = legFrame(2,3);
t3825 = sin(t3890);
t3837 = cos(t3890);
t3712 = t3825 * t3876 + t3837 * t3871;
t3718 = -t3825 * t3871 + t3837 * t3876;
t3896 = legFrame(2,1);
t3831 = sin(t3896);
t3843 = cos(t3896);
t3908 = legFrame(2,2);
t3849 = sin(t3908);
t4232 = t3843 * t3849;
t3538 = t3712 * t4232 + t3718 * t3831;
t3539 = -t3712 * t3831 + t3718 * t4232;
t3703 = t4504 * t3914;
t4291 = (-t3639 * t3911 + t3703) * t3879;
t3278 = -t3538 * t4546 + t3539 * t4291;
t4238 = t3831 * t3849;
t3546 = t3712 * t3843 + t3718 * t4238;
t3552 = t3712 * t4238 - t3718 * t3843;
t3279 = -t3546 * t4291 + t3552 * t4546;
t3288 = t3919 + (t3632 * t4208 + t3860 * t4535) * t3916 - t4578;
t3294 = t3920 + (-t3524 * t3860 + t3632 * t4203) * t3916 - t4577;
t4248 = t3813 * t3911;
t3609 = t3873 * t4248 + t3703;
t3855 = cos(t3908);
t4270 = t4543 * t3911;
t4087 = (t3718 * (-t3878 * t4270 + t3609) * t3879 - t4546 * t3712) * t3411 * t3855;
t3115 = -t3261 * t4087 + (t3278 * t3288 + t3279 * t3294) * t3411;
t4174 = t3879 * t3914;
t3303 = t3539 * t4185 + t3873 * (-t3538 * t3911 + t3539 * t4174);
t3306 = -t3546 * t4185 - t3873 * (t3546 * t4174 - t3552 * t3911);
t3397 = 0.1e1 / (((-t3813 * t4180 + t3725) * t3873 + t3874 * t3700) * t3878 + t4160);
t3444 = t3718 * t4185 + t3873 * (-t3712 * t3911 + t3718 * t4174);
t4316 = t3444 * t3855;
t4069 = t4541 * t4316;
t3121 = -t3261 * t4069 + (t3288 * t3303 + t3294 * t3306) * t3397;
t3318 = t3524 * t3685 - t3684 * t4535 + t3921;
t3375 = -t3632 * t3685 + t3763 * t4535 + t3919;
t3381 = -t3524 * t3763 + t3632 * t3684 + t3920;
t3127 = t3411 * (t3278 * t3375 + t3279 * t3381) - t3318 * t4087;
t3145 = -t3318 * t4069 + (t3303 * t3375 + t3306 * t3381) * t3397;
t4094 = t3145 * t4551;
t4400 = t3145 * t3874;
t2875 = (((t3127 * t3879 - t4270 * t4400) * t3866 + ((-t3127 * t3914 + t3145 * t4248) * t3873 + t3145 * t3703) * t4185 + (-t3127 + t4094) * t3879) * t3121 - t3873 * (t3878 * t4180 + t3810) * t3145 * t3115) * t4541;
t3932 = qJ(3,2) ^ 2;
t3948 = -(-t3127 * t4551 + (-((-pkin(3) + t3813) * (pkin(3) + t3813) + t4152) * t3866 + t3813 * t4032 + qJ(3,2) * t4150 + t3932 + t3953) * t3145) * t3121 / ((t3879 * qJ(3,2) + t3800) * t3866 - t3778 + t3955 + (t3911 * t3989 + (-t3813 * t4190 + t3954) * t3914) * t3874) + t3115 * t4541 * t4094;
t2878 = t3948 * t3878;
t2881 = t3948 * t3879;
t3723 = -t3873 * t4180 + t3811;
t4268 = t3759 * t3873;
t2863 = (t2875 * t4268 - t2878 * t3723 + t2881) * m(3);
t3881 = qJ(3,2) + rSges(3,3);
t4509 = -t3873 * t3881 + t3737;
t4403 = t3145 ^ 2 * t4509;
t4514 = t4403 * t4427 + t2863;
t2864 = (t2876 * t4268 - t2879 * t3724 + t2882) * m(3);
t4402 = t3146 ^ 2 * t4510;
t4513 = t4402 * t4427 + t2864;
t4201 = t3863 * t3917;
t4052 = t4476 * t4201;
t4000 = t3860 * t4052;
t4166 = t3918 * t4007;
t4043 = t3860 * t4166;
t4171 = t3916 * t3819;
t4512 = (-t4000 - (-0.4e1 * t4502 + 0.2e1 * t4171) * t4007) * t3818 - 0.2e1 * t4043 + t4565 + t4544;
t3880 = qJ(3,3) + rSges(3,3);
t4508 = -t3873 * t3880 + t3737;
t3870 = qJ(3,4) + rSges(3,3);
t4507 = -t3870 * t3873 + t3737;
t3869 = qJ(3,5) + rSges(3,3);
t4506 = -t3869 * t3873 + t3737;
t3868 = qJ(3,6) + rSges(3,3);
t4505 = -t3868 * t3873 + t3737;
t4217 = t3860 * t3864;
t3345 = -(t3744 * t4217 + t3861 * t4478) * t3916 + t4576;
t3343 = -(t3743 * t4217 + t3861 * t4479) * t3916 + t4578;
t3341 = -(t3742 * t4217 + t3861 * t4480) * t3916 + t4580;
t3339 = -(t3741 * t4217 + t3861 * t4481) * t3916 + t4582;
t3337 = -(t3740 * t4217 + t3861 * t4482) * t3916 + t4584;
t3335 = -(t3739 * t4217 + t3861 * t4483) * t3916 + t4586;
t3260 = t3921 + (t3521 * t3864 - t3861 * t4534) * t3917 + (-t3521 * t3861 - t3864 * t4534) * t4202;
t3889 = legFrame(3,3);
t3824 = sin(t3889);
t3836 = cos(t3889);
t3711 = t3824 * t3876 + t3836 * t3871;
t3717 = -t3824 * t3871 + t3836 * t3876;
t3895 = legFrame(3,1);
t3830 = sin(t3895);
t3842 = cos(t3895);
t3907 = legFrame(3,2);
t3848 = sin(t3907);
t4233 = t3842 * t3848;
t3536 = t3711 * t4233 + t3717 * t3830;
t3537 = -t3711 * t3830 + t3717 * t4233;
t3702 = t4504 * t3913;
t4292 = (-t3638 * t3910 + t3702) * t3879;
t3276 = -t3536 * t4547 + t3537 * t4292;
t4239 = t3830 * t3848;
t3545 = t3711 * t3842 + t3717 * t4239;
t3551 = t3711 * t4239 - t3717 * t3842;
t3277 = -t3545 * t4292 + t3551 * t4547;
t3287 = t3919 + (t3631 * t4208 + t3860 * t4534) * t3916 - t4580;
t3293 = t3920 + (-t3521 * t3860 + t3631 * t4203) * t3916 - t4579;
t4250 = t3812 * t3910;
t3608 = t3873 * t4250 + t3702;
t3854 = cos(t3907);
t4271 = t4543 * t3910;
t4088 = (t3717 * (-t3878 * t4271 + t3608) * t3879 - t4547 * t3711) * t3410 * t3854;
t3114 = -t3260 * t4088 + (t3276 * t3287 + t3277 * t3293) * t3410;
t4175 = t3879 * t3913;
t3302 = t3537 * t4185 + t3873 * (-t3536 * t3910 + t3537 * t4175);
t3305 = -t3545 * t4185 - t3873 * (t3545 * t4175 - t3551 * t3910);
t3394 = 0.1e1 / (((-t3812 * t4181 + t3725) * t3873 + t3874 * t3699) * t3878 + t4161);
t3443 = t3717 * t4185 + t3873 * (-t3711 * t3910 + t3717 * t4175);
t4317 = t3443 * t3854;
t4073 = t4540 * t4317;
t3120 = -t3260 * t4073 + (t3287 * t3302 + t3293 * t3305) * t3394;
t3317 = t3521 * t3685 - t3684 * t4534 + t3921;
t3374 = -t3631 * t3685 + t3763 * t4534 + t3919;
t3380 = -t3521 * t3763 + t3631 * t3684 + t3920;
t3126 = t3410 * (t3276 * t3374 + t3277 * t3380) - t3317 * t4088;
t3144 = -t3317 * t4073 + (t3302 * t3374 + t3305 * t3380) * t3394;
t4095 = t3144 * t4551;
t4401 = t3144 * t3874;
t2874 = (((t3126 * t3879 - t4271 * t4401) * t3866 + ((-t3126 * t3913 + t3144 * t4250) * t3873 + t3144 * t3702) * t4185 + (-t3126 + t4095) * t3879) * t3120 - t3873 * (t3878 * t4181 + t3810) * t3144 * t3114) * t4540;
t3931 = qJ(3,3) ^ 2;
t3949 = -(-t3126 * t4551 + (-((-pkin(3) + t3812) * (pkin(3) + t3812) + t4152) * t3866 + t3812 * t4032 + qJ(3,3) * t4150 + t3931 + t3953) * t3144) * t3120 / ((t3879 * qJ(3,3) + t3800) * t3866 - t3777 + t3955 + (t3910 * t3989 + (-t3812 * t4190 + t3954) * t3913) * t3874) + t3114 * t4540 * t4095;
t2877 = t3949 * t3878;
t2880 = t3949 * t3879;
t3722 = -t3873 * t4181 + t3811;
t2862 = (t2874 * t4268 - t2877 * t3722 + t2880) * m(3);
t4404 = t3144 ^ 2 * t4508;
t4500 = t4404 * t4427 + t2862;
t3259 = t3921 + (t3518 * t3864 - t3861 * t4533) * t3917 + (-t3518 * t3861 - t3864 * t4533) * t4202;
t3888 = legFrame(4,3);
t3823 = sin(t3888);
t3835 = cos(t3888);
t3710 = t3823 * t3876 + t3835 * t3871;
t3716 = -t3823 * t3871 + t3835 * t3876;
t3894 = legFrame(4,1);
t3829 = sin(t3894);
t3841 = cos(t3894);
t3906 = legFrame(4,2);
t3847 = sin(t3906);
t4234 = t3841 * t3847;
t3534 = t3710 * t4234 + t3716 * t3829;
t3535 = -t3710 * t3829 + t3716 * t4234;
t3697 = t4504 * t3903;
t4299 = (-t3636 * t3900 + t3697) * t3879;
t3271 = -t3534 * t4548 + t3535 * t4299;
t4240 = t3829 * t3847;
t3544 = t3710 * t3841 + t3716 * t4240;
t3550 = t3710 * t4240 - t3716 * t3841;
t3272 = -t3544 * t4299 + t3550 * t4548;
t3286 = t3919 + (t3630 * t4208 + t3860 * t4533) * t3916 - t4582;
t3292 = t3920 + (-t3518 * t3860 + t3630 * t4203) * t3916 - t4581;
t3775 = t3809 * t3866;
t3409 = 0.1e1 / ((t3775 + t3681 - t3809) * t3879 + t4571);
t4252 = t3809 * t3900;
t3604 = t3873 * t4252 + t3697;
t3853 = cos(t3906);
t4272 = t4543 * t3900;
t4089 = (t3716 * (-t3878 * t4272 + t3604) * t3879 - t4548 * t3710) / ((-qJ(3,4) + t3775 + t3991) * t3879 + t4571) * t3853;
t3113 = -t3259 * t4089 + (t3271 * t3286 + t3272 * t3292) * t3409;
t4176 = t3879 * t3903;
t3298 = t3535 * t4185 + t3873 * (-t3534 * t3900 + t3535 * t4176);
t3301 = -t3544 * t4185 - t3873 * (t3544 * t4176 - t3550 * t3900);
t3391 = 0.1e1 / (((-t3809 * t4182 + t3725) * t3873 + t3874 * t3694) * t3878 + t4162);
t3442 = t3716 * t4185 + t3873 * (-t3710 * t3900 + t3716 * t4176);
t4318 = t3442 * t3853;
t4077 = t4539 * t4318;
t3119 = -t3259 * t4077 + (t3286 * t3298 + t3292 * t3301) * t3391;
t3316 = t3518 * t3685 - t3684 * t4533 + t3921;
t3373 = -t3630 * t3685 + t3763 * t4533 + t3919;
t3379 = -t3518 * t3763 + t3630 * t3684 + t3920;
t3125 = t3409 * (t3271 * t3373 + t3272 * t3379) - t3316 * t4089;
t3140 = -t3316 * t4077 + (t3298 * t3373 + t3301 * t3379) * t3391;
t4096 = t3140 * t4551;
t4405 = t3140 * t3874;
t2867 = (((t3125 * t3879 - t4272 * t4405) * t3866 + ((-t3125 * t3903 + t3140 * t4252) * t3873 + t3140 * t3697) * t4185 + t3879 * (-t3125 + t4096)) * t3119 - t3873 * (t3878 * t4182 + t3810) * t3140 * t3113) * t4539;
t3930 = qJ(3,4) ^ 2;
t3950 = -(-t3125 * t4551 + (-((-pkin(3) + t3809) * (pkin(3) + t3809) + t4152) * t3866 + t3809 * t4032 + qJ(3,4) * t4150 + t3930 + t3953) * t3140) * t3119 / ((t3879 * qJ(3,4) + t3800) * t3866 - t3772 + t3955 + (t3900 * t3989 + (-t3809 * t4190 + t3954) * t3903) * t3874) + t3113 * t4539 * t4096;
t2870 = t3950 * t3878;
t2873 = t3950 * t3879;
t3707 = -t3873 * t4182 + t3811;
t2858 = (t2867 * t4268 - t2870 * t3707 + t2873) * m(3);
t4408 = t3140 ^ 2 * t4507;
t4499 = t4408 * t4427 + t2858;
t3258 = t3921 + (t3515 * t3864 - t3861 * t4532) * t3917 + (-t3515 * t3861 - t3864 * t4532) * t4202;
t3887 = legFrame(5,3);
t3822 = sin(t3887);
t3834 = cos(t3887);
t3709 = t3822 * t3876 + t3834 * t3871;
t3715 = -t3822 * t3871 + t3834 * t3876;
t3893 = legFrame(5,1);
t3828 = sin(t3893);
t3840 = cos(t3893);
t3905 = legFrame(5,2);
t3846 = sin(t3905);
t4235 = t3840 * t3846;
t3532 = t3709 * t4235 + t3715 * t3828;
t3533 = -t3709 * t3828 + t3715 * t4235;
t3696 = t4504 * t3902;
t4300 = (-t3635 * t3899 + t3696) * t3879;
t3269 = -t3532 * t4549 + t3533 * t4300;
t4241 = t3828 * t3846;
t3543 = t3709 * t3840 + t3715 * t4241;
t3549 = t3709 * t4241 - t3715 * t3840;
t3270 = -t3543 * t4300 + t3549 * t4549;
t3285 = t3919 + (t3629 * t4208 + t3860 * t4532) * t3916 - t4584;
t3291 = t3920 + (-t3515 * t3860 + t3629 * t4203) * t3916 - t4583;
t3774 = t3808 * t3866;
t3408 = 0.1e1 / ((t3774 + t3681 - t3808) * t3879 + t4570);
t4254 = t3808 * t3899;
t3603 = t3873 * t4254 + t3696;
t3852 = cos(t3905);
t4273 = t4543 * t3899;
t4090 = (t3715 * (-t3878 * t4273 + t3603) * t3879 - t4549 * t3709) / ((-qJ(3,5) + t3774 + t3991) * t3879 + t4570) * t3852;
t3112 = -t3258 * t4090 + (t3269 * t3285 + t3270 * t3291) * t3408;
t4177 = t3879 * t3902;
t3297 = t3533 * t4185 + t3873 * (-t3532 * t3899 + t3533 * t4177);
t3300 = -t3543 * t4185 - t3873 * (t3543 * t4177 - t3549 * t3899);
t3388 = 0.1e1 / (((-t3808 * t4183 + t3725) * t3873 + t3874 * t3693) * t3878 + t4163);
t3441 = t3715 * t4185 + t3873 * (-t3709 * t3899 + t3715 * t4177);
t4319 = t3441 * t3852;
t4081 = t4538 * t4319;
t3118 = -t3258 * t4081 + (t3285 * t3297 + t3291 * t3300) * t3388;
t3315 = t3515 * t3685 - t3684 * t4532 + t3921;
t3372 = -t3629 * t3685 + t3763 * t4532 + t3919;
t3378 = -t3515 * t3763 + t3629 * t3684 + t3920;
t3124 = t3408 * (t3269 * t3372 + t3270 * t3378) - t3315 * t4090;
t3139 = -t3315 * t4081 + (t3297 * t3372 + t3300 * t3378) * t3388;
t4097 = t3139 * t4551;
t4406 = t3139 * t3874;
t2866 = (((t3124 * t3879 - t4273 * t4406) * t3866 + ((-t3124 * t3902 + t3139 * t4254) * t3873 + t3139 * t3696) * t4185 + t3879 * (-t3124 + t4097)) * t3118 - t3873 * (t3878 * t4183 + t3810) * t3139 * t3112) * t4538;
t3929 = qJ(3,5) ^ 2;
t3951 = -(-t3124 * t4551 + (-((-pkin(3) + t3808) * (pkin(3) + t3808) + t4152) * t3866 + t3808 * t4032 + qJ(3,5) * t4150 + t3929 + t3953) * t3139) * t3118 / ((t3879 * qJ(3,5) + t3800) * t3866 - t3771 + t3955 + (t3899 * t3989 + (-t3808 * t4190 + t3954) * t3902) * t3874) + t3112 * t4538 * t4097;
t2869 = t3951 * t3878;
t2872 = t3951 * t3879;
t3706 = -t3873 * t4183 + t3811;
t2857 = (t2866 * t4268 - t2869 * t3706 + t2872) * m(3);
t4409 = t3139 ^ 2 * t4506;
t4498 = t4409 * t4427 + t2857;
t3257 = t3921 + (t3512 * t3864 - t3861 * t4531) * t3917 + (-t3512 * t3861 - t3864 * t4531) * t4202;
t3886 = legFrame(6,3);
t3821 = sin(t3886);
t3833 = cos(t3886);
t3708 = t3821 * t3876 + t3833 * t3871;
t3714 = -t3821 * t3871 + t3833 * t3876;
t3892 = legFrame(6,1);
t3827 = sin(t3892);
t3839 = cos(t3892);
t3904 = legFrame(6,2);
t3845 = sin(t3904);
t4236 = t3839 * t3845;
t3530 = t3708 * t4236 + t3714 * t3827;
t3531 = -t3708 * t3827 + t3714 * t4236;
t3695 = t4504 * t3901;
t4301 = (-t3634 * t3898 + t3695) * t3879;
t3267 = -t3530 * t4550 + t3531 * t4301;
t4242 = t3827 * t3845;
t3542 = t3708 * t3839 + t3714 * t4242;
t3548 = t3708 * t4242 - t3714 * t3839;
t3268 = -t3542 * t4301 + t3548 * t4550;
t3284 = t3919 + (t3628 * t4208 + t3860 * t4531) * t3916 - t4586;
t3290 = t3920 + (-t3512 * t3860 + t3628 * t4203) * t3916 - t4585;
t3773 = t3807 * t3866;
t3407 = 0.1e1 / ((t3773 + t3681 - t3807) * t3879 + t4569);
t4256 = t3807 * t3898;
t3602 = t3873 * t4256 + t3695;
t3851 = cos(t3904);
t4274 = t4543 * t3898;
t4091 = (t3714 * (-t3878 * t4274 + t3602) * t3879 - t4550 * t3708) / ((-qJ(3,6) + t3773 + t3991) * t3879 + t4569) * t3851;
t3111 = -t3257 * t4091 + (t3267 * t3284 + t3268 * t3290) * t3407;
t4178 = t3879 * t3901;
t3296 = t3531 * t4185 + t3873 * (-t3530 * t3898 + t3531 * t4178);
t3299 = -t3542 * t4185 - t3873 * (t3542 * t4178 - t3548 * t3898);
t3385 = 0.1e1 / (((-t3807 * t4184 + t3725) * t3873 + t3874 * t3692) * t3878 + t4164);
t3440 = t3714 * t4185 + t3873 * (-t3708 * t3898 + t3714 * t4178);
t4320 = t3440 * t3851;
t4085 = t4537 * t4320;
t3117 = -t3257 * t4085 + (t3284 * t3296 + t3290 * t3299) * t3385;
t3314 = t3512 * t3685 - t3684 * t4531 + t3921;
t3371 = -t3628 * t3685 + t3763 * t4531 + t3919;
t3377 = -t3512 * t3763 + t3628 * t3684 + t3920;
t3123 = t3407 * (t3267 * t3371 + t3268 * t3377) - t3314 * t4091;
t3138 = -t3314 * t4085 + (t3296 * t3371 + t3299 * t3377) * t3385;
t4098 = t3138 * t4551;
t4407 = t3138 * t3874;
t2865 = (((t3123 * t3879 - t4274 * t4407) * t3866 + ((-t3123 * t3901 + t3138 * t4256) * t3873 + t3138 * t3695) * t4185 + t3879 * (-t3123 + t4098)) * t3117 - t3873 * (t3878 * t4184 + t3810) * t3138 * t3111) * t4537;
t3928 = qJ(3,6) ^ 2;
t3952 = -(-t3123 * t4551 + (-((-pkin(3) + t3807) * (pkin(3) + t3807) + t4152) * t3866 + t3807 * t4032 + qJ(3,6) * t4150 + t3928 + t3953) * t3138) * t3117 / ((t3879 * qJ(3,6) + t3800) * t3866 - t3770 + t3955 + (t3898 * t3989 + (-t3807 * t4190 + t3954) * t3901) * t3874) + t3111 * t4537 * t4098;
t2868 = t3952 * t3878;
t2871 = t3952 * t3879;
t3705 = -t3873 * t4184 + t3811;
t2856 = (t2865 * t4268 - t2868 * t3705 + t2871) * m(3);
t4410 = t3138 ^ 2 * t4505;
t4497 = t4410 * t4427 + t2856;
t3587 = t3623 * t3860;
t4260 = t3796 * t3859;
t4042 = t3918 * t4260;
t4496 = 0.2e1 * t4042 + t3587;
t3655 = m(3) * t4509 + t4439;
t3495 = -t3655 * t3911 + t3698 * t3914;
t4309 = t3495 * t3874;
t4432 = m(3) * t3723;
t2860 = -t2875 * t4309 - t2878 * t3867 + t2881 * t4432;
t3013 = t3145 * t3655 * t3914 + t3911 * (t3127 * t4151 + t3145 * t3698);
t4488 = -t3013 * t4400 + t2860;
t3654 = m(3) * t4508 + t4439;
t3494 = -t3654 * t3910 + t3698 * t3913;
t4310 = t3494 * t3874;
t4433 = m(3) * t3722;
t2859 = -t2874 * t4310 - t2877 * t3867 + t2880 * t4433;
t3012 = t3144 * t3654 * t3913 + t3910 * (t3126 * t4151 + t3144 * t3698);
t4487 = -t3012 * t4401 + t2859;
t3653 = m(3) * t4507 + t4439;
t3477 = -t3653 * t3900 + t3698 * t3903;
t4311 = t3477 * t3874;
t4434 = m(3) * t3707;
t2852 = -t2867 * t4311 - t2870 * t3867 + t2873 * t4434;
t3008 = t3140 * t3653 * t3903 + t3900 * (t3125 * t4151 + t3140 * t3698);
t4486 = -t3008 * t4405 + t2852;
t3652 = m(3) * t4506 + t4439;
t3476 = -t3652 * t3899 + t3698 * t3902;
t4312 = t3476 * t3874;
t4435 = m(3) * t3706;
t2851 = -t2866 * t4312 - t2869 * t3867 + t2872 * t4435;
t3007 = t3139 * t3652 * t3902 + t3899 * (t3124 * t4151 + t3139 * t3698);
t4485 = -t3007 * t4406 + t2851;
t3651 = m(3) * t4505 + t4439;
t3475 = -t3651 * t3898 + t3698 * t3901;
t4313 = t3475 * t3874;
t4436 = m(3) * t3705;
t2850 = -t2865 * t4313 - t2868 * t3867 + t2871 * t4436;
t3006 = t3138 * t3651 * t3901 + t3898 * (t3123 * t4151 + t3138 * t3698);
t4484 = -t3006 * t4407 + t2850;
t3598 = t3646 * t3860;
t4167 = t3918 * t3795;
t4477 = 0.2e1 * t4167 + t3598;
t4168 = t3918 * t4476;
t4465 = t4007 * (t3763 * t4443 - t3918) - t3862 * (t3624 * t3860 - t3859 * t4168) + t3644 * t3860;
t4464 = 0.2e1 * rSges(3,3);
t3670 = t3796 * t3862 - t4264;
t4445 = 0.2e1 * t3670;
t4438 = m(3) * rSges(3,1);
t4430 = m(3) * t3868;
t4429 = m(3) * t3869;
t4428 = m(3) * t3870;
t4426 = m(3) * t3880;
t4425 = m(3) * t3881;
t4424 = m(3) * t3882;
t3784 = Icges(4,2) + m(4) * (t3883 + t3885);
t3783 = m(4) * (t3883 + t3884) + Icges(4,1);
t4419 = m(4) * (t3884 + t3885) + Icges(4,3);
t4417 = t3873 * t3737 - rSges(3,3);
t4416 = t3006 * t3138;
t4415 = t3007 * t3139;
t4414 = t3008 * t3140;
t4413 = t3012 * t3144;
t4412 = t3013 * t3145;
t4411 = t3014 * t3146;
t4060 = t4543 * t3873 * t3874;
t3673 = t3871 * t4060;
t4191 = t3871 * t3879;
t3413 = -t3599 * t4191 + t3602 * t3876 + t3673;
t3966 = t3599 * t3879 - t4060;
t3416 = t3602 * t3871 + t3876 * t3966;
t3250 = -t4158 * t3851 + (t3413 * t3833 - t3416 * t3821) * t3845;
t3264 = t3413 * t3821 + t3416 * t3833;
t4192 = t3871 * t3874;
t3449 = -t3807 * t4192 - (-t3871 * t4178 - t3876 * t3898) * t4543;
t4186 = t3874 * t3876;
t3450 = -t3807 * t4186 - (t3871 * t3898 - t3876 * t4178) * t4543;
t3308 = -t4489 * t3851 + (t3449 * t3833 + t3450 * t3821) * t3845;
t3364 = -t3449 * t3821 + t3450 * t3833;
t3574 = -t3708 * t3845 * t3874 + t3851 * t3879;
t4288 = t3714 * t3874;
t3160 = (t3308 * t3839 + t3364 * t3827) * t3866 + (-t3250 * t3839 + t3264 * t3827) * t3878 - t3807 * (t3574 * t3839 - t3827 * t4288);
t4398 = t3160 * t4537;
t3161 = (-t3308 * t3827 + t3364 * t3839) * t3866 + (t3250 * t3827 + t3264 * t3839) * t3878 + t3807 * (t3574 * t3827 + t3839 * t4288);
t4397 = t3161 * t4537;
t3414 = -t3600 * t4191 + t3603 * t3876 + t3673;
t3965 = t3600 * t3879 - t4060;
t3417 = t3603 * t3871 + t3876 * t3965;
t3251 = -t4157 * t3852 + (t3414 * t3834 - t3417 * t3822) * t3846;
t3265 = t3414 * t3822 + t3417 * t3834;
t3451 = -t3808 * t4192 - (-t3871 * t4177 - t3876 * t3899) * t4543;
t3452 = -t3808 * t4186 - (t3871 * t3899 - t3876 * t4177) * t4543;
t3309 = -t4490 * t3852 + (t3451 * t3834 + t3452 * t3822) * t3846;
t3365 = -t3451 * t3822 + t3452 * t3834;
t3575 = -t3709 * t3846 * t3874 + t3852 * t3879;
t4287 = t3715 * t3874;
t3162 = (t3309 * t3840 + t3365 * t3828) * t3866 + (-t3251 * t3840 + t3265 * t3828) * t3878 - t3808 * (t3575 * t3840 - t3828 * t4287);
t4396 = t3162 * t4538;
t3163 = (-t3309 * t3828 + t3365 * t3840) * t3866 + (t3251 * t3828 + t3265 * t3840) * t3878 + t3808 * (t3575 * t3828 + t3840 * t4287);
t4395 = t3163 * t4538;
t3415 = -t3601 * t4191 + t3604 * t3876 + t3673;
t3964 = t3601 * t3879 - t4060;
t3418 = t3604 * t3871 + t3876 * t3964;
t3252 = -t4156 * t3853 + (t3415 * t3835 - t3418 * t3823) * t3847;
t3266 = t3415 * t3823 + t3418 * t3835;
t3453 = -t3809 * t4192 - (-t3871 * t4176 - t3876 * t3900) * t4543;
t3454 = -t3809 * t4186 - (t3871 * t3900 - t3876 * t4176) * t4543;
t3310 = -t4491 * t3853 + (t3453 * t3835 + t3454 * t3823) * t3847;
t3366 = -t3453 * t3823 + t3454 * t3835;
t3576 = -t3710 * t3847 * t3874 + t3853 * t3879;
t4286 = t3716 * t3874;
t3164 = (t3310 * t3841 + t3366 * t3829) * t3866 + (-t3252 * t3841 + t3266 * t3829) * t3878 - t3809 * (t3576 * t3841 - t3829 * t4286);
t4394 = t3164 * t4539;
t3165 = (-t3310 * t3829 + t3366 * t3841) * t3866 + (t3252 * t3829 + t3266 * t3841) * t3878 + t3809 * (t3576 * t3829 + t3841 * t4286);
t4393 = t3165 * t4539;
t3419 = -t3605 * t4191 + t3608 * t3876 + t3673;
t3963 = t3605 * t3879 - t4060;
t3422 = t3608 * t3871 + t3876 * t3963;
t3253 = -t4155 * t3854 + (t3419 * t3836 - t3422 * t3824) * t3848;
t3273 = t3419 * t3824 + t3422 * t3836;
t3455 = -t3812 * t4192 - (-t3871 * t4175 - t3876 * t3910) * t4543;
t3456 = -t3812 * t4186 - (t3871 * t3910 - t3876 * t4175) * t4543;
t3311 = -t4492 * t3854 + (t3455 * t3836 + t3456 * t3824) * t3848;
t3367 = -t3455 * t3824 + t3456 * t3836;
t3577 = -t3711 * t3848 * t3874 + t3854 * t3879;
t4285 = t3717 * t3874;
t3166 = (t3311 * t3842 + t3367 * t3830) * t3866 + (-t3253 * t3842 + t3273 * t3830) * t3878 - t3812 * (t3577 * t3842 - t3830 * t4285);
t4392 = t3166 * t4540;
t3167 = (-t3311 * t3830 + t3367 * t3842) * t3866 + (t3253 * t3830 + t3273 * t3842) * t3878 + t3812 * (t3577 * t3830 + t3842 * t4285);
t4391 = t3167 * t4540;
t3420 = -t3606 * t4191 + t3609 * t3876 + t3673;
t3962 = t3606 * t3879 - t4060;
t3423 = t3609 * t3871 + t3876 * t3962;
t3254 = -t4154 * t3855 + (t3420 * t3837 - t3423 * t3825) * t3849;
t3274 = t3420 * t3825 + t3423 * t3837;
t3457 = -t3813 * t4192 - (-t3871 * t4174 - t3876 * t3911) * t4543;
t3458 = -t3813 * t4186 - (t3871 * t3911 - t3876 * t4174) * t4543;
t3312 = -t4493 * t3855 + (t3457 * t3837 + t3458 * t3825) * t3849;
t3368 = -t3457 * t3825 + t3458 * t3837;
t3578 = -t3712 * t3849 * t3874 + t3855 * t3879;
t4284 = t3718 * t3874;
t3168 = (t3312 * t3843 + t3368 * t3831) * t3866 + (-t3254 * t3843 + t3274 * t3831) * t3878 - t3813 * (t3578 * t3843 - t3831 * t4284);
t4390 = t3168 * t4541;
t3169 = (-t3312 * t3831 + t3368 * t3843) * t3866 + (t3254 * t3831 + t3274 * t3843) * t3878 + t3813 * (t3578 * t3831 + t3843 * t4284);
t4389 = t3169 * t4541;
t3421 = -t3607 * t4191 + t3610 * t3876 + t3673;
t3961 = t3607 * t3879 - t4060;
t3424 = t3610 * t3871 + t3876 * t3961;
t3255 = -t4153 * t3856 + (t3421 * t3838 - t3424 * t3826) * t3850;
t3275 = t3421 * t3826 + t3424 * t3838;
t3459 = -t3814 * t4192 - (-t3871 * t4173 - t3876 * t3912) * t4543;
t3460 = -t3814 * t4186 - (t3871 * t3912 - t3876 * t4173) * t4543;
t3313 = -t4494 * t3856 + (t3459 * t3838 + t3460 * t3826) * t3850;
t3369 = -t3459 * t3826 + t3460 * t3838;
t3579 = -t3713 * t3850 * t3874 + t3856 * t3879;
t4283 = t3719 * t3874;
t3170 = (t3313 * t3844 + t3369 * t3832) * t3866 + (-t3255 * t3844 + t3275 * t3832) * t3878 - t3814 * (t3579 * t3844 - t3832 * t4283);
t4388 = t3170 * t4542;
t3171 = (-t3313 * t3832 + t3369 * t3844) * t3866 + (t3255 * t3832 + t3275 * t3844) * t3878 + t3814 * (t3579 * t3832 + t3844 * t4283);
t4387 = t3171 * t4542;
t4230 = t3851 * t3874;
t3219 = ((-t3714 * t4274 + (t3807 * t3874 - t4178 * t4543) * t3708) * t3851 - t4489 * t3845) * t3866 + ((t3602 * t3714 - t3708 * t3966) * t3851 + t4158 * t3845) * t3878 - t3807 * (t3708 * t4230 + t3845 * t3879);
t4386 = t3219 * t4537;
t4229 = t3852 * t3874;
t3220 = ((-t3715 * t4273 + (t3808 * t3874 - t4177 * t4543) * t3709) * t3852 - t4490 * t3846) * t3866 + ((t3603 * t3715 - t3709 * t3965) * t3852 + t4157 * t3846) * t3878 - t3808 * (t3709 * t4229 + t3846 * t3879);
t4385 = t3220 * t4538;
t4228 = t3853 * t3874;
t3221 = ((-t3716 * t4272 + (t3809 * t3874 - t4176 * t4543) * t3710) * t3853 - t4491 * t3847) * t3866 + ((t3604 * t3716 - t3710 * t3964) * t3853 + t4156 * t3847) * t3878 - t3809 * (t3710 * t4228 + t3847 * t3879);
t4384 = t3221 * t4539;
t4227 = t3854 * t3874;
t3224 = ((-t3717 * t4271 + (t3812 * t3874 - t4175 * t4543) * t3711) * t3854 - t4492 * t3848) * t3866 + ((t3608 * t3717 - t3711 * t3963) * t3854 + t4155 * t3848) * t3878 - t3812 * (t3711 * t4227 + t3848 * t3879);
t4383 = t3224 * t4540;
t4226 = t3855 * t3874;
t3225 = ((-t3718 * t4270 + (t3813 * t3874 - t4174 * t4543) * t3712) * t3855 - t4493 * t3849) * t3866 + ((t3609 * t3718 - t3712 * t3962) * t3855 + t4154 * t3849) * t3878 - t3813 * (t3712 * t4226 + t3849 * t3879);
t4382 = t3225 * t4541;
t4225 = t3856 * t3874;
t3226 = ((-t3719 * t4269 + (t3814 * t3874 - t4173 * t4543) * t3713) * t3856 - t4494 * t3850) * t3866 + ((t3610 * t3719 - t3713 * t3961) * t3856 + t4153 * t3850) * t3878 - t3814 * (t3713 * t4225 + t3850 * t3879);
t4381 = t3226 * t4542;
t4380 = t3267 * t3407;
t4379 = t3268 * t3407;
t4378 = t3269 * t3408;
t4377 = t3270 * t3408;
t4376 = t3271 * t3409;
t4375 = t3272 * t3409;
t4374 = t3276 * t3410;
t4373 = t3277 * t3410;
t4372 = t3278 * t3411;
t4371 = t3279 * t3411;
t4370 = t3280 * t3412;
t4369 = t3281 * t3412;
t4368 = t3296 * t3385;
t4367 = t3297 * t3388;
t4366 = t3298 * t3391;
t4365 = t3299 * t3385;
t4364 = t3300 * t3388;
t4363 = t3301 * t3391;
t4362 = t3302 * t3394;
t4361 = t3303 * t3397;
t4360 = t3304 * t3400;
t4359 = t3305 * t3394;
t4358 = t3306 * t3397;
t4357 = t3307 * t3400;
t3958 = (-rSges(3,2) * t4438 + Icges(3,4)) * t4418;
t3939 = -0.2e1 * m(3) * pkin(2) * t4111 + (rSges(2,1) ^ 2 + rSges(2,2) ^ 2) * m(2) + 0.2e1 * (pkin(2) * t4438 + t3958) * t3875 + Icges(2,3) + t4530;
t4008 = -0.2e1 * t3875 * t3958 + Icges(3,3) - t4530;
t4041 = rSges(3,3) ^ 2 + t3935 + t3938;
t4121 = 0.2e1 * t4190;
t3352 = (-(rSges(3,1) + t3868) * (-rSges(3,1) + t3868) * m(3) + t4008) * t3866 + ((-rSges(3,2) * t4430 + Icges(3,6)) * t3875 + (-rSges(3,1) * t4430 + Icges(3,5)) * t4418) * t4121 + (qJ(3,6) * t4464 + t3928 + t4041) * m(3) + t3939;
t4356 = t3352 * t3385;
t3353 = (-(rSges(3,1) + t3869) * (-rSges(3,1) + t3869) * m(3) + t4008) * t3866 + ((-rSges(3,2) * t4429 + Icges(3,6)) * t3875 + (-rSges(3,1) * t4429 + Icges(3,5)) * t4418) * t4121 + (qJ(3,5) * t4464 + t3929 + t4041) * m(3) + t3939;
t4355 = t3353 * t3388;
t3354 = (-(rSges(3,1) + t3870) * (-rSges(3,1) + t3870) * m(3) + t4008) * t3866 + ((-rSges(3,2) * t4428 + Icges(3,6)) * t3875 + (-rSges(3,1) * t4428 + Icges(3,5)) * t4418) * t4121 + (qJ(3,4) * t4464 + t3930 + t4041) * m(3) + t3939;
t4354 = t3354 * t3391;
t3355 = (-(rSges(3,1) + t3880) * (-rSges(3,1) + t3880) * m(3) + t4008) * t3866 + ((-rSges(3,2) * t4426 + Icges(3,6)) * t3875 + (-rSges(3,1) * t4426 + Icges(3,5)) * t4418) * t4121 + (qJ(3,3) * t4464 + t3931 + t4041) * m(3) + t3939;
t4353 = t3355 * t3394;
t3356 = (-(rSges(3,1) + t3881) * (-rSges(3,1) + t3881) * m(3) + t4008) * t3866 + ((-rSges(3,2) * t4425 + Icges(3,6)) * t3875 + (-rSges(3,1) * t4425 + Icges(3,5)) * t4418) * t4121 + (qJ(3,2) * t4464 + t3932 + t4041) * m(3) + t3939;
t4352 = t3356 * t3397;
t3357 = (-(rSges(3,1) + t3882) * (-rSges(3,1) + t3882) * m(3) + t4008) * t3866 + ((-rSges(3,2) * t4424 + Icges(3,6)) * t3875 + (-rSges(3,1) * t4424 + Icges(3,5)) * t4418) * t4121 + (qJ(3,1) * t4464 + t3933 + t4041) * m(3) + t3939;
t4351 = t3357 * t3400;
t4350 = t4537 * t3628;
t4349 = t4537 * t3705;
t4348 = t4537 * t3867;
t4347 = t3385 * t3628;
t4346 = t4538 * t3629;
t4345 = t4538 * t3706;
t4344 = t4538 * t3867;
t4343 = t3388 * t3629;
t4342 = t4539 * t3630;
t4341 = t4539 * t3707;
t4340 = t4539 * t3867;
t4339 = t3391 * t3630;
t4338 = t4540 * t3631;
t4337 = t4540 * t3722;
t4336 = t4540 * t3867;
t4335 = t3394 * t3631;
t4334 = t4541 * t3632;
t4333 = t4541 * t3723;
t4332 = t4541 * t3867;
t4331 = t3397 * t3632;
t4330 = t4542 * t3633;
t4329 = t4542 * t3724;
t4328 = t4542 * t3867;
t4327 = t3400 * t3633;
t4326 = t3407 * t3628;
t4325 = t3408 * t3629;
t4324 = t3409 * t3630;
t4323 = t3410 * t3631;
t4322 = t3411 * t3632;
t4321 = t3412 * t3633;
t4169 = t3917 * t3925;
t4215 = t3860 * t3917;
t3474 = (t3735 * t3916 - t4169) * t3863 - t3734 * t4215;
t4314 = t3474 * t3861;
t4263 = t3795 * t3862;
t4245 = t3818 * t3916;
t4244 = t3819 * t3861;
t4243 = t3819 * t3918;
t4224 = t3859 * t3862;
t4219 = t3860 * t3861;
t4205 = t3861 * t3918;
t4199 = t3864 * t3670;
t4198 = t3864 * t4007;
t4196 = t3864 * t3918;
t4027 = t3916 + 0.2e1 * t3803;
t4044 = t4503 * t4243;
t4045 = t4007 * t4201;
t4051 = t3859 * t4170;
t3248 = (0.2e1 * t4045 - (-0.2e1 * t3763 + t4243) * t4476) * t3818 + ((-t3796 * t4027 + t4222 * t4476) * t3863 + t3795 * t4215 - (-t3918 * t4437 + 0.4e1 * t4216) * t4258) * t3862 - t4044 + (-t3917 * t4007 + t4027 * t4264) * t3863 + (-t3916 * t4476 + t4051) * t3860 - t4168;
t3637 = t3733 - t4172 / 0.2e1;
t3973 = t4043 + t4172;
t4165 = ((t4000 / 0.2e1 - (0.2e1 * t4502 - t4171) * t4007) * t3818 + (((-t4046 + t4261 / 0.2e1) * t3860 + t4167) * t3863 + (-t3819 + 0.1e1 / 0.2e1) * t4170 - (-t4171 / 0.2e1 + t4502) * t4266) * t3862 + t3637 * t3819 + ((t4050 / 0.2e1 + t3736 / 0.2e1) * t3860 + t4042) * t3863 - t3733 / 0.2e1 + t3973) * t4587 + t3248 * t3820;
t4124 = t3918 * t4445;
t4120 = t3407 * t4436;
t4119 = t3408 * t4435;
t4118 = t3409 * t4434;
t4117 = t3410 * t4433;
t4116 = t3411 * t4432;
t4115 = t3412 * t4431;
t4114 = m(3) * t4268;
t4104 = t3123 * t3138 * (t3866 * t3868 - qJ(3,6) + t4417);
t4103 = t3124 * t3139 * (t3866 * t3869 - qJ(3,5) + t4417);
t4102 = t3125 * t3140 * (t3866 * t3870 - qJ(3,4) + t4417);
t4101 = t3126 * t3144 * (t3866 * t3880 - qJ(3,3) + t4417);
t4100 = t3127 * t3145 * (t3866 * t3881 - qJ(3,2) + t4417);
t4099 = t3128 * t3146 * (t3866 * t3882 - qJ(3,1) + t4417);
t4092 = t3248 * t4207;
t4084 = t4537 * t4313;
t4083 = t3385 * t4313;
t4082 = t3385 * t4268;
t4080 = t4538 * t4312;
t4079 = t3388 * t4312;
t4078 = t3388 * t4268;
t4076 = t4539 * t4311;
t4075 = t3391 * t4311;
t4074 = t3391 * t4268;
t4072 = t4540 * t4310;
t4071 = t3394 * t4310;
t4070 = t3394 * t4268;
t4068 = t4541 * t4309;
t4067 = t3397 * t4309;
t4066 = t3397 * t4268;
t4064 = t4542 * t4308;
t4063 = t3400 * t4308;
t4062 = t3400 * t4268;
t4049 = t4007 * t4224;
t4048 = t4007 * t4219;
t4047 = t3860 * t4198;
t4039 = -0.2e1 * t4104;
t4038 = -0.2e1 * t4103;
t4037 = -0.2e1 * t4102;
t4036 = -0.2e1 * t4101;
t4035 = -0.2e1 * t4100;
t4034 = -0.2e1 * t4099;
t4029 = -t3763 + t4243;
t4020 = m(3) * t4091;
t4019 = m(3) * t4090;
t4018 = m(3) * t4089;
t4017 = m(3) * t4088;
t4016 = m(3) * t4087;
t4015 = m(3) * t4086;
t4014 = t3407 * t4114;
t4013 = t3408 * t4114;
t4012 = t3409 * t4114;
t4011 = t3410 * t4114;
t4010 = t3411 * t4114;
t4009 = t3412 * t4114;
t3997 = t3385 * t4039;
t3996 = t3388 * t4038;
t3995 = t3391 * t4037;
t3994 = t3394 * t4036;
t3993 = t3397 * t4035;
t3992 = t3400 * t4034;
t3650 = t3734 * t3863 - t3860 * t3925;
t3959 = 0.2e1 * t4049 - t4267;
t3956 = (t3763 * t3926 - t3927 * t4201) * t3862 + (t3916 * t4221 - t4169) * t3860 + (t3918 * t3927 + t3926 * t4201) * t3859;
t3346 = (t3860 * t4214 - t3864 * t4483) * t3916 + t4585;
t3347 = (t3860 * t4213 - t3864 * t4482) * t3916 + t4583;
t3348 = (t3860 * t4212 - t3864 * t4481) * t3916 + t4581;
t3349 = (t3860 * t4211 - t3864 * t4480) * t3916 + t4579;
t3350 = (t3860 * t4210 - t3864 * t4479) * t3916 + t4577;
t3351 = (t3860 * t4209 - t3864 * t4478) * t3916 + t4575;
t3758 = t3803 + t3916 / 0.2e1;
t3683 = t4476 * t4219;
t3672 = t3860 * t4206 - t3863 * t4196;
t3671 = -t3860 * t4197 - t3863 * t4205;
t3645 = t3795 * t3917 + t3859 * t4565;
t3627 = t3783 * t3916 + t4051;
t3596 = -t3861 * t4476 - 0.2e1 * t4047;
t3595 = -t3864 * t4476 + 0.2e1 * t4048;
t3561 = t3959 - t4503;
t3478 = -t3918 * t4200 - t3926 * t4522 + t4204 * t4502;
t3473 = t3735 * t3861 + t3864 * t4475;
t3446 = t3796 * t4522 + t3917 * t4419 + t4263 * t4502;
t3437 = t3784 * t3916 - t3803 * t4503 + t3959 * t4502;
t3436 = t3633 * t4205 + t4553;
t3435 = t3633 * t4196 - t4554;
t3434 = t3632 * t4205 + t4555;
t3433 = t3632 * t4196 - t4556;
t3432 = t3631 * t4205 + t4557;
t3431 = t3631 * t4196 - t4558;
t3430 = t3630 * t4205 + t4559;
t3429 = t3630 * t4196 - t4560;
t3428 = t3629 * t4205 + t4561;
t3427 = t3629 * t4196 - t4562;
t3426 = t3628 * t4205 + t4563;
t3425 = t3628 * t4196 - t4564;
t3327 = t3864 * t3478 - t3861 * t3956;
t3326 = t3861 * t3478 + t3864 * t3956;
t3283 = (-t3624 * t3862 + t4444 - (-0.2e1 * t3818 + 0.1e1) * t4172) * t3819 - t3439 * t4218 + t3670 * t3917;
t3282 = (-t3561 * t4217 + (-t3818 * t4566 - t4224 * t4476 + t4007) * t3861) * t3863 - (t4260 + t4263) * t4219 + (-0.2e1 * t3819 + 0.1e1) * t4199;
t3263 = t4244 * t4445 + ((-t3683 - 0.2e1 * t4198) * t3818 + t3595 * t4224 - t4503 * t4219 + t4198) * t3863 + (-t3795 * t4217 - t3796 * t3861) * t3862 - (-t3795 * t3861 + t3796 * t4217) * t3859;
t3256 = t3783 - 0.2e1 * t4049 - t4574;
t3249 = (-0.2e1 * t4552 - 0.2e1 * t3727 - (-0.4e1 * t3818 + 0.2e1) * t4220) * t3820 - t4567 * t4207 + t3438;
t3246 = t3345 * t3860 + t3633 * t3671 + (-t3527 * t3917 - t4553) * t3863;
t3245 = -t3351 * t3860 - t3633 * t3672 + (t3917 * t4536 - t4554) * t3863;
t3244 = t3343 * t3860 + t3632 * t3671 + (-t3524 * t3917 - t4555) * t3863;
t3243 = -t3350 * t3860 - t3632 * t3672 + (t3917 * t4535 - t4556) * t3863;
t3242 = t3341 * t3860 + t3631 * t3671 + (-t3521 * t3917 - t4557) * t3863;
t3241 = -t3349 * t3860 - t3631 * t3672 + (t3917 * t4534 - t4558) * t3863;
t3240 = t3339 * t3860 + t3630 * t3671 + (-t3518 * t3917 - t4559) * t3863;
t3239 = -t3348 * t3860 - t3630 * t3672 + (t3917 * t4533 - t4560) * t3863;
t3238 = t3337 * t3860 + t3629 * t3671 + (-t3515 * t3917 - t4561) * t3863;
t3237 = -t3347 * t3860 - t3629 * t3672 + (t3917 * t4532 - t4562) * t3863;
t3236 = t3335 * t3860 + t3628 * t3671 + (-t3512 * t3917 - t4563) * t3863;
t3235 = -t3346 * t3860 - t3628 * t3672 + (t3917 * t4531 - t4564) * t3863;
t3234 = (t4033 - (t4442 - 0.2e1) * t4258) * t3862 + t3784 + t4267 * t3819 + t4511 + t4574;
t3232 = (-t3345 - t4302) * t3864 + (t3351 - t4293) * t3861;
t3231 = (-t3343 - t4303) * t3864 + (t3350 - t4294) * t3861;
t3230 = (-t3341 - t4304) * t3864 + (t3349 - t4295) * t3861;
t3229 = (-t3339 - t4305) * t3864 + (t3348 - t4296) * t3861;
t3228 = (-t3337 - t4306) * t3864 + (t3347 - t4297) * t3861;
t3227 = (-t3335 - t4307) * t3864 + (t3346 - t4298) * t3861;
t3223 = -t3819 * t4529 + (t3596 * t4245 + (t3624 * t4217 - t3645 * t3861) * t3862 - 0.2e1 * t3637 * t4217 - t3627 * t3861) * t3863 + t3917 * (t3595 * t3818 - (-t3864 * t4566 - t3683) * t4224 + t3784 * t3864 - t4048);
t3222 = t3439 * t4244 + (t3595 * t4245 + (-t3624 * t4219 - t3645 * t3864) * t3862 + 0.2e1 * t3637 * t4219 - t3627 * t3864) * t3863 - t3917 * (t3596 * t3818 + (t3861 * t4566 - t4217 * t4476) * t4224 + t3784 * t3861 + t4047);
t3218 = -t4536 * t3671 + t3527 * t3672 + (t3345 * t3861 + t3351 * t3864) * t3863;
t3217 = -t4535 * t3671 + t3524 * t3672 + (t3343 * t3861 + t3350 * t3864) * t3863;
t3216 = -t4534 * t3671 + t3521 * t3672 + (t3341 * t3861 + t3349 * t3864) * t3863;
t3215 = -t4533 * t3671 + t3518 * t3672 + (t3339 * t3861 + t3348 * t3864) * t3863;
t3214 = -t4532 * t3671 + t3515 * t3672 + (t3337 * t3861 + t3347 * t3864) * t3863;
t3213 = -t4531 * t3671 + t3512 * t3672 + (t3335 * t3861 + t3346 * t3864) * t3863;
t3212 = (t3861 * t4124 - t4529) * t3819 + (t3861 * t3437 - t3864 * t4465) * t3863 - t3446 * t3864 - t3861 * t3763 * t3670;
t3211 = (t3439 * t3861 + t3864 * t4124) * t3819 + (t3864 * t3437 + t3861 * t4465) * t3863 + t3446 * t3861 - t3763 * t4199;
t3210 = -t3304 * t4327 - t3527 * t4065;
t3209 = t3307 * t4327 + t4065 * t4536;
t3208 = -t3303 * t4331 - t3524 * t4069;
t3207 = t3306 * t4331 + t4069 * t4535;
t3206 = -t3302 * t4335 - t3521 * t4073;
t3205 = t3305 * t4335 + t4073 * t4534;
t3204 = -t3298 * t4339 - t3518 * t4077;
t3203 = t3301 * t4339 + t4077 * t4533;
t3202 = -t3297 * t4343 - t3515 * t4081;
t3201 = t3300 * t4343 + t4081 * t4532;
t3200 = -t3296 * t4347 - t3512 * t4085;
t3199 = t3299 * t4347 + t4085 * t4531;
t3198 = -t3280 * t4321 - t3527 * t4086;
t3197 = t3281 * t4321 + t4086 * t4536;
t3196 = -t3278 * t4322 - t3524 * t4087;
t3195 = t3279 * t4322 + t4087 * t4535;
t3194 = -t3276 * t4323 - t3521 * t4088;
t3193 = t3277 * t4323 + t4088 * t4534;
t3192 = -t3271 * t4324 - t3518 * t4089;
t3191 = t3272 * t4324 + t4089 * t4533;
t3190 = -t3269 * t4325 - t3515 * t4090;
t3189 = t3270 * t4325 + t4090 * t4532;
t3188 = -t3267 * t4326 - t3512 * t4091;
t3187 = t3268 * t4326 + t4091 * t4531;
t3186 = (t3304 * t4536 - t3307 * t3527) * t3400;
t3185 = (t3303 * t4535 - t3306 * t3524) * t3397;
t3184 = (t3302 * t4534 - t3305 * t3521) * t3394;
t3183 = (t3298 * t4533 - t3301 * t3518) * t3391;
t3182 = (t3297 * t4532 - t3300 * t3515) * t3388;
t3181 = (t3296 * t4531 - t3299 * t3512) * t3385;
t3180 = (t3280 * t4536 - t3281 * t3527) * t3412;
t3179 = (t3278 * t4535 - t3279 * t3524) * t3411;
t3178 = (t3276 * t4534 - t3277 * t3521) * t3410;
t3177 = (t3271 * t4533 - t3272 * t3518) * t3409;
t3176 = (t3269 * t4532 - t3270 * t3515) * t3408;
t3175 = (t3267 * t4531 - t3268 * t3512) * t3407;
t3174 = (t4568 * t3862 + t4512) * t3820 + t4092 + ((-t3862 * t4477 - t4496) * t3820 + t4167 * t3862 + t4042) * t3863 + (-t3862 * t4266 + t4007 - t4122) * t4502;
t3173 = t4029 * t4267 + t3758 * t3862 * t4123 + t4044 + t3784 * t3763 + (-t3862 * t4029 * t4566 - 0.2e1 * t3758 * t4262) * t3859 + t4165;
t3172 = (-t3763 * t4476 - 0.2e1 * t4045) * t3818 + (-t3645 * t3860 + (-t4052 + 0.2e1 * t4166) * t3859) * t3862 + t4045 - t3627 * t3860 - t3918 * t3783 + t4165;
t3159 = (-t4086 + (t3226 * t3724 + t4268 * t4315) * t4542) * m(3);
t3158 = (-t4087 + (t3225 * t3723 + t4268 * t4316) * t4541) * m(3);
t3157 = (-t4088 + (t3224 * t3722 + t4268 * t4317) * t4540) * m(3);
t3156 = (-t4089 + (t3221 * t3707 + t4268 * t4318) * t4539) * m(3);
t3155 = (-t4090 + (t3220 * t3706 + t4268 * t4319) * t4538) * m(3);
t3154 = (-t4091 + (t3219 * t3705 + t4268 * t4320) * t4537) * m(3);
t3153 = ((t3863 * t4477 - t4568) * t3862 + t4496 * t3863 - t4512) * t3820 - t4092 + (-t4000 - (-t4502 + t4171) * t4566) * t3818 + ((-t3598 - t4167) * t3863 + t3974 + t4031) * t3862 + (-t3587 - t4042) * t3863 - t3973 + t4544;
t3152 = -t3724 * t4015 + (-t3445 * t3496 * t4225 + t3226 * t3867) * t4542;
t3151 = -t3723 * t4016 + (-t3444 * t3495 * t4226 + t3225 * t3867) * t4541;
t3150 = -t3722 * t4017 + (-t3443 * t3494 * t4227 + t3224 * t3867) * t4540;
t3149 = -t3707 * t4018 + (-t3442 * t3477 * t4228 + t3221 * t3867) * t4539;
t3148 = -t3706 * t4019 + (-t3441 * t3476 * t4229 + t3220 * t3867) * t4538;
t3147 = -t3705 * t4020 + (-t3440 * t3475 * t4230 + t3219 * t3867) * t4537;
t3134 = t4015 * t4268 + (t3226 * t4308 - t3357 * t4315) * t4542;
t3133 = t4016 * t4268 + (t3225 * t4309 - t3356 * t4316) * t4541;
t3132 = t4017 * t4268 + (t3224 * t4310 - t3355 * t4317) * t4540;
t3131 = t4018 * t4268 + (t3221 * t4311 - t3354 * t4318) * t4539;
t3130 = t4019 * t4268 + (t3220 * t4312 - t3353 * t4319) * t4538;
t3129 = t4020 * t4268 + (t3219 * t4313 - t3352 * t4320) * t4537;
t3110 = -t3170 * t4330 + t3527 * t4381;
t3109 = t3171 * t4330 - t4381 * t4536;
t3108 = -t3168 * t4334 + t3524 * t4382;
t3107 = t3169 * t4334 - t4382 * t4535;
t3106 = -t3166 * t4338 + t3521 * t4383;
t3105 = t3167 * t4338 - t4383 * t4534;
t3104 = -t3164 * t4342 + t3518 * t4384;
t3103 = t3165 * t4342 - t4384 * t4533;
t3102 = -t3162 * t4346 + t3515 * t4385;
t3101 = t3163 * t4346 - t4385 * t4532;
t3100 = -t3160 * t4350 + t3512 * t4386;
t3099 = t3161 * t4350 - t4386 * t4531;
t3098 = (t3171 * t4329 - t3307 * t4062 + t4369) * m(3);
t3097 = (t3170 * t4329 - t3304 * t4062 + t4370) * m(3);
t3096 = (t3169 * t4333 - t3306 * t4066 + t4371) * m(3);
t3095 = (t3168 * t4333 - t3303 * t4066 + t4372) * m(3);
t3094 = (t3167 * t4337 - t3305 * t4070 + t4373) * m(3);
t3093 = (t3166 * t4337 - t3302 * t4070 + t4374) * m(3);
t3092 = (t3165 * t4341 - t3301 * t4074 + t4375) * m(3);
t3091 = (t3164 * t4341 - t3298 * t4074 + t4376) * m(3);
t3090 = (t3163 * t4345 - t3300 * t4078 + t4377) * m(3);
t3089 = (t3162 * t4345 - t3297 * t4078 + t4378) * m(3);
t3088 = (t3161 * t4349 - t3299 * t4082 + t4379) * m(3);
t3087 = (t3160 * t4349 - t3296 * t4082 + t4380) * m(3);
t3086 = t3171 * t4328 + t3281 * t4115 + t3307 * t4063;
t3085 = t3170 * t4328 + t3280 * t4115 + t3304 * t4063;
t3084 = t3169 * t4332 + t3279 * t4116 + t3306 * t4067;
t3083 = t3168 * t4332 + t3278 * t4116 + t3303 * t4067;
t3082 = t3167 * t4336 + t3277 * t4117 + t3305 * t4071;
t3081 = t3166 * t4336 + t3276 * t4117 + t3302 * t4071;
t3080 = t3165 * t4340 + t3272 * t4118 + t3301 * t4075;
t3079 = t3164 * t4340 + t3271 * t4118 + t3298 * t4075;
t3078 = t3163 * t4344 + t3270 * t4119 + t3300 * t4079;
t3077 = t3162 * t4344 + t3269 * t4119 + t3297 * t4079;
t3076 = t3161 * t4348 + t3268 * t4120 + t3299 * t4083;
t3075 = t3160 * t4348 + t3267 * t4120 + t3296 * t4083;
t3074 = t3171 * t4064 - t3281 * t4009 + t3307 * t4351;
t3073 = t3170 * t4064 - t3280 * t4009 + t3304 * t4351;
t3072 = t3169 * t4068 - t3279 * t4010 + t3306 * t4352;
t3071 = t3168 * t4068 - t3278 * t4010 + t3303 * t4352;
t3070 = t3167 * t4072 - t3277 * t4011 + t3305 * t4353;
t3069 = t3166 * t4072 - t3276 * t4011 + t3302 * t4353;
t3068 = t3165 * t4076 - t3272 * t4012 + t3301 * t4354;
t3067 = t3164 * t4076 - t3271 * t4012 + t3298 * t4354;
t3066 = t3163 * t4080 - t3270 * t4013 + t3300 * t4355;
t3065 = t3162 * t4080 - t3269 * t4013 + t3297 * t4355;
t3064 = t3161 * t4084 - t3268 * t4014 + t3299 * t4356;
t3063 = t3160 * t4084 - t3267 * t4014 + t3296 * t4356;
t3062 = (t3170 * t4536 - t3171 * t3527) * t4542;
t3061 = (t3168 * t4535 - t3169 * t3524) * t4541;
t3060 = (t3166 * t4534 - t3167 * t3521) * t4540;
t3059 = (t3164 * t4533 - t3165 * t3518) * t4539;
t3058 = (t3162 * t4532 - t3163 * t3515) * t4538;
t3057 = (t3160 * t4531 - t3161 * t3512) * t4537;
t3056 = (t3110 * t3724 - t3210 * t4268 + t3198) * m(3);
t3055 = (t3109 * t3724 - t3209 * t4268 + t3197) * m(3);
t3054 = (t3108 * t3723 - t3208 * t4268 + t3196) * m(3);
t3053 = (t3107 * t3723 - t3207 * t4268 + t3195) * m(3);
t3052 = (t3106 * t3722 - t3206 * t4268 + t3194) * m(3);
t3051 = (t3105 * t3722 - t3205 * t4268 + t3193) * m(3);
t3050 = (t3104 * t3707 - t3204 * t4268 + t3192) * m(3);
t3049 = (t3103 * t3707 - t3203 * t4268 + t3191) * m(3);
t3048 = (t3102 * t3706 - t3202 * t4268 + t3190) * m(3);
t3047 = (t3101 * t3706 - t3201 * t4268 + t3189) * m(3);
t3046 = (t3100 * t3705 - t3200 * t4268 + t3188) * m(3);
t3045 = (t3099 * t3705 - t3199 * t4268 + t3187) * m(3);
t3044 = t3110 * t3867 + t3198 * t4431 + t3210 * t4308;
t3043 = t3109 * t3867 + t3197 * t4431 + t3209 * t4308;
t3042 = t3108 * t3867 + t3196 * t4432 + t3208 * t4309;
t3041 = t3107 * t3867 + t3195 * t4432 + t3207 * t4309;
t3040 = t3106 * t3867 + t3194 * t4433 + t3206 * t4310;
t3039 = t3105 * t3867 + t3193 * t4433 + t3205 * t4310;
t3038 = t3104 * t3867 + t3192 * t4434 + t3204 * t4311;
t3037 = t3103 * t3867 + t3191 * t4434 + t3203 * t4311;
t3036 = t3102 * t3867 + t3190 * t4435 + t3202 * t4312;
t3035 = t3101 * t3867 + t3189 * t4435 + t3201 * t4312;
t3034 = t3100 * t3867 + t3188 * t4436 + t3200 * t4313;
t3033 = t3099 * t3867 + t3187 * t4436 + t3199 * t4313;
t3032 = t3110 * t4308 - t3198 * t4114 + t3210 * t3357;
t3031 = t3109 * t4308 - t3197 * t4114 + t3209 * t3357;
t3030 = t3108 * t4309 - t3196 * t4114 + t3208 * t3356;
t3029 = t3107 * t4309 - t3195 * t4114 + t3207 * t3356;
t3028 = t3106 * t4310 - t3194 * t4114 + t3206 * t3355;
t3027 = t3105 * t4310 - t3193 * t4114 + t3205 * t3355;
t3026 = t3104 * t4311 - t3192 * t4114 + t3204 * t3354;
t3025 = t3103 * t4311 - t3191 * t4114 + t3203 * t3354;
t3024 = t3102 * t4312 - t3190 * t4114 + t3202 * t3353;
t3023 = t3101 * t4312 - t3189 * t4114 + t3201 * t3353;
t3022 = t3100 * t4313 - t3188 * t4114 + t3200 * t3352;
t3021 = t3099 * t4313 - t3187 * t4114 + t3199 * t3352;
t3020 = (t3062 * t3724 - t3186 * t4268 + t3180) * m(3);
t3019 = (t3061 * t3723 - t3185 * t4268 + t3179) * m(3);
t3018 = (t3060 * t3722 - t3184 * t4268 + t3178) * m(3);
t3017 = (t3059 * t3707 - t3183 * t4268 + t3177) * m(3);
t3016 = (t3058 * t3706 - t3182 * t4268 + t3176) * m(3);
t3015 = (t3057 * t3705 - t3181 * t4268 + t3175) * m(3);
t3011 = t3062 * t3867 + t3180 * t4431 + t3186 * t4308;
t3010 = t3061 * t3867 + t3179 * t4432 + t3185 * t4309;
t3009 = t3060 * t3867 + t3178 * t4433 + t3184 * t4310;
t3005 = t3059 * t3867 + t3177 * t4434 + t3183 * t4311;
t3004 = t3058 * t3867 + t3176 * t4435 + t3182 * t4312;
t3003 = t3057 * t3867 + t3175 * t4436 + t3181 * t4313;
t3002 = t3062 * t4308 - t3180 * t4114 + t3186 * t3357;
t3001 = t3061 * t4309 - t3179 * t4114 + t3185 * t3356;
t3000 = t3060 * t4310 - t3178 * t4114 + t3184 * t3355;
t2999 = t3059 * t4311 - t3177 * t4114 + t3183 * t3354;
t2998 = t3058 * t4312 - t3176 * t4114 + t3182 * t3353;
t2997 = t3057 * t4313 - t3175 * t4114 + t3181 * t3352;
t2996 = -t3159 * t4086 + (-t3134 * t4315 + t3152 * t3226) * t4542;
t2995 = -t3158 * t4087 + (-t3133 * t4316 + t3151 * t3225) * t4541;
t2994 = -t3157 * t4088 + (-t3132 * t4317 + t3150 * t3224) * t4540;
t2993 = -t3156 * t4089 + (-t3131 * t4318 + t3149 * t3221) * t4539;
t2992 = -t3155 * t4090 + (-t3130 * t4319 + t3148 * t3220) * t4538;
t2991 = -t3154 * t4091 + (-t3129 * t4320 + t3147 * t3219) * t4537;
t2990 = t3134 * t4357 + t3152 * t4387 + t3159 * t4369;
t2989 = t3134 * t4360 + t3152 * t4388 + t3159 * t4370;
t2988 = t3133 * t4358 + t3151 * t4389 + t3158 * t4371;
t2987 = t3133 * t4361 + t3151 * t4390 + t3158 * t4372;
t2986 = t3132 * t4359 + t3150 * t4391 + t3157 * t4373;
t2985 = t3132 * t4362 + t3150 * t4392 + t3157 * t4374;
t2984 = t3131 * t4363 + t3149 * t4393 + t3156 * t4375;
t2983 = t3131 * t4366 + t3149 * t4394 + t3156 * t4376;
t2982 = t3130 * t4364 + t3148 * t4395 + t3155 * t4377;
t2981 = t3130 * t4367 + t3148 * t4396 + t3155 * t4378;
t2980 = t3129 * t4365 + t3147 * t4397 + t3154 * t4379;
t2979 = t3129 * t4368 + t3147 * t4398 + t3154 * t4380;
t2978 = -t3098 * t4086 + (-t3074 * t4315 + t3086 * t3226) * t4542;
t2977 = -t3097 * t4086 + (-t3073 * t4315 + t3085 * t3226) * t4542;
t2976 = -t3096 * t4087 + (-t3072 * t4316 + t3084 * t3225) * t4541;
t2975 = -t3095 * t4087 + (-t3071 * t4316 + t3083 * t3225) * t4541;
t2974 = -t3094 * t4088 + (-t3070 * t4317 + t3082 * t3224) * t4540;
t2973 = -t3093 * t4088 + (-t3069 * t4317 + t3081 * t3224) * t4540;
t2972 = -t3092 * t4089 + (-t3068 * t4318 + t3080 * t3221) * t4539;
t2971 = -t3091 * t4089 + (-t3067 * t4318 + t3079 * t3221) * t4539;
t2970 = -t3090 * t4090 + (-t3066 * t4319 + t3078 * t3220) * t4538;
t2969 = -t3089 * t4090 + (-t3065 * t4319 + t3077 * t3220) * t4538;
t2968 = -t3088 * t4091 + (-t3064 * t4320 + t3076 * t3219) * t4537;
t2967 = -t3087 * t4091 + (-t3063 * t4320 + t3075 * t3219) * t4537;
t2966 = t3074 * t4357 + t3086 * t4387 + t3098 * t4369;
t2965 = t3074 * t4360 + t3086 * t4388 + t3098 * t4370;
t2964 = t3073 * t4357 + t3085 * t4387 + t3097 * t4369;
t2963 = t3073 * t4360 + t3085 * t4388 + t3097 * t4370;
t2962 = t3072 * t4358 + t3084 * t4389 + t3096 * t4371;
t2961 = t3072 * t4361 + t3084 * t4390 + t3096 * t4372;
t2960 = t3071 * t4358 + t3083 * t4389 + t3095 * t4371;
t2959 = t3071 * t4361 + t3083 * t4390 + t3095 * t4372;
t2958 = t3070 * t4359 + t3082 * t4391 + t3094 * t4373;
t2957 = t3070 * t4362 + t3082 * t4392 + t3094 * t4374;
t2956 = t3069 * t4359 + t3081 * t4391 + t3093 * t4373;
t2955 = t3069 * t4362 + t3081 * t4392 + t3093 * t4374;
t2954 = t3068 * t4363 + t3080 * t4393 + t3092 * t4375;
t2953 = t3068 * t4366 + t3080 * t4394 + t3092 * t4376;
t2952 = t3067 * t4363 + t3079 * t4393 + t3091 * t4375;
t2951 = t3067 * t4366 + t3079 * t4394 + t3091 * t4376;
t2950 = t3066 * t4364 + t3078 * t4395 + t3090 * t4377;
t2949 = t3066 * t4367 + t3078 * t4396 + t3090 * t4378;
t2948 = t3065 * t4364 + t3077 * t4395 + t3089 * t4377;
t2947 = t3065 * t4367 + t3077 * t4396 + t3089 * t4378;
t2946 = t3064 * t4365 + t3076 * t4397 + t3088 * t4379;
t2945 = t3064 * t4368 + t3076 * t4398 + t3088 * t4380;
t2944 = t3063 * t4365 + t3075 * t4397 + t3087 * t4379;
t2943 = t3063 * t4368 + t3075 * t4398 + t3087 * t4380;
t2936 = -t3056 * t4086 + (-t3032 * t4315 + t3044 * t3226) * t4542;
t2935 = -t3055 * t4086 + (-t3031 * t4315 + t3043 * t3226) * t4542;
t2934 = -t3054 * t4087 + (-t3030 * t4316 + t3042 * t3225) * t4541;
t2933 = -t3053 * t4087 + (-t3029 * t4316 + t3041 * t3225) * t4541;
t2932 = -t3052 * t4088 + (-t3028 * t4317 + t3040 * t3224) * t4540;
t2931 = -t3051 * t4088 + (-t3027 * t4317 + t3039 * t3224) * t4540;
t2930 = -t3050 * t4089 + (-t3026 * t4318 + t3038 * t3221) * t4539;
t2929 = -t3049 * t4089 + (-t3025 * t4318 + t3037 * t3221) * t4539;
t2928 = -t3048 * t4090 + (-t3024 * t4319 + t3036 * t3220) * t4538;
t2927 = -t3047 * t4090 + (-t3023 * t4319 + t3035 * t3220) * t4538;
t2926 = -t3046 * t4091 + (-t3022 * t4320 + t3034 * t3219) * t4537;
t2925 = -t3045 * t4091 + (-t3021 * t4320 + t3033 * t3219) * t4537;
t2924 = t3032 * t4357 + t3044 * t4387 + t3056 * t4369;
t2923 = t3032 * t4360 + t3044 * t4388 + t3056 * t4370;
t2922 = t3031 * t4357 + t3043 * t4387 + t3055 * t4369;
t2921 = t3031 * t4360 + t3043 * t4388 + t3055 * t4370;
t2920 = t3030 * t4358 + t3042 * t4389 + t3054 * t4371;
t2919 = t3030 * t4361 + t3042 * t4390 + t3054 * t4372;
t2918 = t3029 * t4358 + t3041 * t4389 + t3053 * t4371;
t2917 = t3029 * t4361 + t3041 * t4390 + t3053 * t4372;
t2916 = t3028 * t4359 + t3040 * t4391 + t3052 * t4373;
t2915 = t3028 * t4362 + t3040 * t4392 + t3052 * t4374;
t2914 = t3027 * t4359 + t3039 * t4391 + t3051 * t4373;
t2913 = t3027 * t4362 + t3039 * t4392 + t3051 * t4374;
t2912 = t3026 * t4363 + t3038 * t4393 + t3050 * t4375;
t2911 = t3026 * t4366 + t3038 * t4394 + t3050 * t4376;
t2910 = t3025 * t4363 + t3037 * t4393 + t3049 * t4375;
t2909 = t3025 * t4366 + t3037 * t4394 + t3049 * t4376;
t2908 = t3024 * t4364 + t3036 * t4395 + t3048 * t4377;
t2907 = t3024 * t4367 + t3036 * t4396 + t3048 * t4378;
t2906 = t3023 * t4364 + t3035 * t4395 + t3047 * t4377;
t2905 = t3023 * t4367 + t3035 * t4396 + t3047 * t4378;
t2904 = t3022 * t4365 + t3034 * t4397 + t3046 * t4379;
t2903 = t3022 * t4368 + t3034 * t4398 + t3046 * t4380;
t2902 = t3021 * t4365 + t3033 * t4397 + t3045 * t4379;
t2901 = t3021 * t4368 + t3033 * t4398 + t3045 * t4380;
t2900 = -t3020 * t4086 + (-t3002 * t4315 + t3011 * t3226) * t4542;
t2899 = -t3019 * t4087 + (-t3001 * t4316 + t3010 * t3225) * t4541;
t2898 = -t3018 * t4088 + (-t3000 * t4317 + t3009 * t3224) * t4540;
t2897 = -t3017 * t4089 + (-t2999 * t4318 + t3005 * t3221) * t4539;
t2896 = -t3016 * t4090 + (-t2998 * t4319 + t3004 * t3220) * t4538;
t2895 = -t3015 * t4091 + (-t2997 * t4320 + t3003 * t3219) * t4537;
t2894 = t3002 * t4357 + t3011 * t4387 + t3020 * t4369;
t2893 = t3002 * t4360 + t3011 * t4388 + t3020 * t4370;
t2892 = t3001 * t4358 + t3010 * t4389 + t3019 * t4371;
t2891 = t3001 * t4361 + t3010 * t4390 + t3019 * t4372;
t2890 = t3000 * t4359 + t3009 * t4391 + t3018 * t4373;
t2889 = t3000 * t4362 + t3009 * t4392 + t3018 * t4374;
t2888 = t2999 * t4363 + t3005 * t4393 + t3017 * t4375;
t2887 = t2999 * t4366 + t3005 * t4394 + t3017 * t4376;
t2886 = t2998 * t4364 + t3004 * t4395 + t3016 * t4377;
t2885 = t2998 * t4367 + t3004 * t4396 + t3016 * t4378;
t2884 = t2997 * t4365 + t3003 * t4397 + t3015 * t4379;
t2883 = t2997 * t4368 + t3003 * t4398 + t3015 * t4380;
t2855 = -t2876 * t3357 - t2879 * t4308 - t2882 * t4114;
t2854 = -t2875 * t3356 - t2878 * t4309 - t2881 * t4114;
t2853 = -t2874 * t3355 - t2877 * t4310 - t2880 * t4114;
t2849 = -t2867 * t3354 - t2870 * t4311 - t2873 * t4114;
t2848 = -t2866 * t3353 - t2869 * t4312 - t2872 * t4114;
t2847 = -t2865 * t3352 - t2868 * t4313 - t2871 * t4114;
t1 = [-t2856 * t4091 - t2857 * t4090 - t2858 * t4089 - t2862 * t4088 - t2863 * t4087 - t2864 * t4086 + (-t2855 * t4315 + t2861 * t3226) * t4542 + (-t2854 * t4316 + t2860 * t3225) * t4541 + (-t2853 * t4317 + t2859 * t3224) * t4540 + (-t2849 * t4318 + t2852 * t3221) * t4539 + (-t2848 * t4319 + t2851 * t3220) * t4538 + (-t2847 * t4320 + t2850 * t3219) * t4537 + (-t2979 * t3346 + t2980 * t3335 - t2981 * t3347 + t2982 * t3337 - t2983 * t3348 + t2984 * t3339 - t2985 * t3349 + t2986 * t3341 - t2987 * t3350 + t2988 * t3343 - t2989 * t3351 + t2990 * t3345) * t3918 + (t2979 * t3426 + t2980 * t3425 + t2991 * t3227 + t2981 * t3428 + t2982 * t3427 + t2992 * t3228 + t2983 * t3430 + t2984 * t3429 + t2993 * t3229 + t2985 * t3432 + t2986 * t3431 + t2994 * t3230 + t2987 * t3434 + t2988 * t3433 + t2995 * t3231 + t2989 * t3436 + t2990 * t3435 + t2996 * t3232) * t3917 + (t2979 * t3235 + t2980 * t3236 + t2991 * t3213 + t2981 * t3237 + t2982 * t3238 + t2992 * t3214 + t2983 * t3239 + t2984 * t3240 + t2993 * t3215 + t2985 * t3241 + t2986 * t3242 + t2994 * t3216 + t2987 * t3243 + t2988 * t3244 + t2995 * t3217 + t2989 * t3245 + t2990 * t3246 + t2996 * t3218) * t3916 + (-t4381 * t4411 - t4382 * t4412 - t4383 * t4413 - t4384 * t4414 - t4385 * t4415 - t4386 * t4416) * t3874 + ((-t3326 * t4208 - t3327 * t4203 + t3447 * t3671 + t3473 * t3672) * t3916 + (t3326 * t3864 - t3327 * t3861 + t3447 * t4196 - t3473 * t4205) * t3917) * m(4) + (0.2e1 * t4069 * t4100 + 0.2e1 * t4065 * t4099 + 0.2e1 * t4085 * t4104 + 0.2e1 * t4081 * t4103 + 0.2e1 * t4077 * t4102 + 0.2e1 * t4073 * t4101 + (-t4086 * t4402 - t4087 * t4403 - t4088 * t4404 - t4089 * t4408 - t4090 * t4409 - t4091 * t4410) * t3873) * m(3); t2864 * t4369 + t2862 * t4373 + t2863 * t4371 + t2858 * t4375 + t2857 * t4377 + t2856 * t4379 + t2855 * t4357 + t2861 * t4387 + t2854 * t4358 + t2860 * t4389 + t2853 * t4359 + t2859 * t4391 + t2849 * t4363 + t2852 * t4393 + t2851 * t4395 + t2848 * t4364 + t2847 * t4365 + t2850 * t4397 + (-t2945 * t3346 + t2946 * t3335 - t2949 * t3347 + t2950 * t3337 - t2953 * t3348 + t2954 * t3339 - t2957 * t3349 + t2958 * t3341 - t2961 * t3350 + t2962 * t3343 - t2965 * t3351 + t2966 * t3345) * t3918 + (t2945 * t3426 + t2946 * t3425 + t2968 * t3227 + t2949 * t3428 + t2950 * t3427 + t2970 * t3228 + t2953 * t3430 + t2954 * t3429 + t2972 * t3229 + t2957 * t3432 + t2958 * t3431 + t2974 * t3230 + t2961 * t3434 + t2962 * t3433 + t2976 * t3231 + t2965 * t3436 + t2966 * t3435 + t2978 * t3232) * t3917 + (t2945 * t3235 + t2946 * t3236 + t2968 * t3213 + t2949 * t3237 + t2950 * t3238 + t2970 * t3214 + t2953 * t3239 + t2954 * t3240 + t2972 * t3215 + t2957 * t3241 + t2958 * t3242 + t2974 * t3216 + t2961 * t3243 + t2962 * t3244 + t2976 * t3217 + t2965 * t3245 + t2966 * t3246 + t2978 * t3218) * t3916 + (-t4387 * t4411 - t4389 * t4412 - t4391 * t4413 - t4393 * t4414 - t4395 * t4415 - t4397 * t4416) * t3874 + ((-t3326 * t3860 - t3473 * t4201 - t3474 * t4203 - t3650 * t3671) * t3916 + (-t3650 * t4196 - t4314) * t3917 - t3326 * t3918) * m(4) + (t3299 * t3997 + t3300 * t3996 + t3301 * t3995 + t3305 * t3994 + t3306 * t3993 + t3307 * t3992 + (t4369 * t4402 + t4371 * t4403 + t4373 * t4404 + t4375 * t4408 + t4377 * t4409 + t4379 * t4410) * t3873) * m(3); t2847 * t4368 + t2848 * t4367 + t2849 * t4366 + t2853 * t4362 + t2854 * t4361 + t2855 * t4360 + t4484 * t4398 + t4485 * t4396 + t4486 * t4394 + t4487 * t4392 + t4488 * t4390 + t4515 * t4388 + t4497 * t4380 + t4498 * t4378 + t4499 * t4376 + t4500 * t4374 + t4514 * t4372 + t4513 * t4370 + (t3296 * t3997 + t3297 * t3996 + t3298 * t3995 + t3302 * t3994 + t3303 * t3993 + t3304 * t3992) * m(3) + (m(4) * t3327 - t2943 * t3346 + t2944 * t3335 - t2947 * t3347 + t2948 * t3337 - t2951 * t3348 + t2952 * t3339 - t2955 * t3349 + t2956 * t3341 - t2959 * t3350 + t2960 * t3343 - t2963 * t3351 + t2964 * t3345) * t3918 + (t2943 * t3426 + t2944 * t3425 + t2967 * t3227 + t2947 * t3428 + t2948 * t3427 + t2969 * t3228 + t2951 * t3430 + t2952 * t3429 + t2971 * t3229 + t2955 * t3432 + t2956 * t3431 + t2973 * t3230 + t2959 * t3434 + t2960 * t3433 + t2975 * t3231 + t2963 * t3436 + t2964 * t3435 + t2977 * t3232 + (t3474 * t3864 - t3650 * t4205) * m(4)) * t3917 + (t2951 * t3239 + t2952 * t3240 + t2971 * t3215 + t2955 * t3241 + t2956 * t3242 + t2973 * t3216 + t2959 * t3243 + t2960 * t3244 + t2975 * t3217 + t2963 * t3245 + t2964 * t3246 + t2977 * t3218 + t2943 * t3235 + t2944 * t3236 + t2967 * t3213 + t2947 * t3237 + t2948 * t3238 + t2969 * t3214 + (t3327 * t3860 + t3650 * t3672 + (-t3447 * t3917 - t4314) * t3863) * m(4)) * t3916; t3181 * t2847 + t3182 * t2848 + t3183 * t2849 + t3184 * t2853 + t3185 * t2854 + t3186 * t2855 + t4513 * t3180 + t4514 * t3179 + t4500 * t3178 + t4499 * t3177 + t4498 * t3176 + t4497 * t3175 + t4515 * t3062 + t4488 * t3061 + t4487 * t3060 + t4486 * t3059 + t4485 * t3058 + t4484 * t3057 + (t3181 * t4039 + t3182 * t4038 + t3183 * t4037 + t3184 * t4036 + t3185 * t4035 + t3186 * t4034) * m(3) + (-t2883 * t3346 + t2884 * t3335 - t2885 * t3347 + t2886 * t3337 - t2887 * t3348 + t2888 * t3339 - t2889 * t3349 + t2890 * t3341 - t2891 * t3350 + t2892 * t3343 - t2893 * t3351 + t2894 * t3345 + t3283) * t3918 + (t2883 * t3426 + t2884 * t3425 + t2895 * t3227 + t2885 * t3428 + t2886 * t3427 + t2896 * t3228 + t2887 * t3430 + t2888 * t3429 + t2897 * t3229 + t2889 * t3432 + t2890 * t3431 + t2898 * t3230 + t2891 * t3434 + t2892 * t3433 + t2899 * t3231 + t2893 * t3436 + t2894 * t3435 + t2900 * t3232 + (t3282 * t3918 + t3222) * t3864 + (-t3263 * t3918 + t3223) * t3861) * t3917 + (t3263 * t3672 + t3282 * t3671 + t3283 * t3860 + (-t3222 * t3861 + t3223 * t3864 + (t3561 * t3819 + t3670 * t4573 + t4419) * t3917) * t3863 + t2883 * t3235 + t2884 * t3236 + t2895 * t3213 + t2885 * t3237 + t2886 * t3238 + t2896 * t3214 + t2887 * t3239 + t2888 * t3240 + t2897 * t3215 + t2889 * t3241 + t2890 * t3242 + t2898 * t3216 + t2891 * t3243 + t2892 * t3244 + t2899 * t3217 + t2893 * t3245 + t2894 * t3246 + t2900 * t3218) * t3916; t3102 * t2851 + t3190 * t2857 + t3192 * t2858 + t3106 * t2859 + t3208 * t2854 + t3210 * t2855 + t3188 * t2856 + t3108 * t2860 + t3100 * t2850 + t3194 * t2862 + t3196 * t2863 + t3198 * t2864 + t3200 * t2847 + t3202 * t2848 + t3204 * t2849 + t3206 * t2853 + t3110 * t2861 + t3104 * t2852 + (-t3100 * t4416 - t3102 * t4415 - t3104 * t4414 - t3106 * t4413 - t3108 * t4412 - t3110 * t4411) * t3874 + (t2903 * t3426 + t2904 * t3425 + t2926 * t3227 + t2907 * t3428 + t2908 * t3427 + t2928 * t3228 + t2911 * t3430 + t2912 * t3429 + t2930 * t3229 + t2915 * t3432 + t2916 * t3431 + t2932 * t3230 + t2919 * t3434 + t2920 * t3433 + t2934 * t3231 + t2923 * t3436 + t2924 * t3435 + t2936 * t3232 + t3153 * t3864 + t3172 * t3861) * t3917 + (t3211 * t3860 + t3234 * t3672 + t3249 * t3671 + t2903 * t3235 + t2904 * t3236 + t2926 * t3213 + t2907 * t3237 + t2908 * t3238 + t2928 * t3214 + t2911 * t3239 + t2912 * t3240 + t2930 * t3215 + t2915 * t3241 + t2916 * t3242 + t2932 * t3216 + t2919 * t3243 + t2920 * t3244 + t2934 * t3217 + t2923 * t3245 + t2924 * t3246 + t2936 * t3218 + (-t3153 * t3861 + t3172 * t3864 + t3263 * t3917) * t3863) * t3916 + (-t2919 * t3350 + t2920 * t3343 + t3211 - t2903 * t3346 + t2904 * t3335 - t2907 * t3347 + t2908 * t3337 - t2911 * t3348 + t2912 * t3339 + (-t3234 * t3861 + t3249 * t3864) * t3917 - t2923 * t3351 + t2924 * t3345 - t2915 * t3349 + t2916 * t3341) * t3918 + (t3200 * t4039 + t3202 * t4038 + t3204 * t4037 + t3206 * t4036 + t3208 * t4035 + t3210 * t4034 + (t3188 * t4410 + t3190 * t4409 + t3192 * t4408 + t3194 * t4404 + t3196 * t4403 + t3198 * t4402) * t3873) * m(3); t3103 * t2852 + t3189 * t2857 + t3191 * t2858 + t3193 * t2862 + t3105 * t2859 + t3209 * t2855 + t3187 * t2856 + t3109 * t2861 + t3195 * t2863 + t3197 * t2864 + t3101 * t2851 + t3199 * t2847 + t3201 * t2848 + t3203 * t2849 + t3205 * t2853 + t3207 * t2854 + t3107 * t2860 + t3099 * t2850 + (-t3099 * t4416 - t3101 * t4415 - t3103 * t4414 - t3105 * t4413 - t3107 * t4412 - t3109 * t4411) * t3874 + (t2901 * t3426 + t2902 * t3425 + t2925 * t3227 + t2905 * t3428 + t2906 * t3427 + t2927 * t3228 + t2909 * t3430 + t2910 * t3429 + t2929 * t3229 + t2913 * t3432 + t2914 * t3431 + t2931 * t3230 + t2917 * t3434 + t2918 * t3433 + t2933 * t3231 + t2921 * t3436 + t2922 * t3435 + t2935 * t3232 + t3173 * t3864 + t3174 * t3861) * t3917 + (t3212 * t3860 + t3249 * t3672 + t3256 * t3671 + t2901 * t3235 + t2902 * t3236 + t2925 * t3213 + t2905 * t3237 + t2906 * t3238 + t2927 * t3214 + t2909 * t3239 + t2910 * t3240 + t2929 * t3215 + t2913 * t3241 + t2914 * t3242 + t2931 * t3216 + t2917 * t3243 + t2918 * t3244 + t2933 * t3217 + t2921 * t3245 + t2922 * t3246 + t2935 * t3218 + (-t3173 * t3861 + t3174 * t3864 + t3282 * t3917) * t3863) * t3916 + ((-t3249 * t3861 + t3256 * t3864) * t3917 - t2921 * t3351 + t2922 * t3345 - t2913 * t3349 + t2914 * t3341 - t2917 * t3350 + t2918 * t3343 + t3212 - t2901 * t3346 + t2902 * t3335 - t2905 * t3347 + t2906 * t3337 - t2909 * t3348 + t2910 * t3339) * t3918 + (t3199 * t4039 + t3201 * t4038 + t3203 * t4037 + t3205 * t4036 + t3207 * t4035 + t3209 * t4034 + (t3187 * t4410 + t3189 * t4409 + t3191 * t4408 + t3193 * t4404 + t3195 * t4403 + t3197 * t4402) * t3873) * m(3);];
taucX  = t1;
