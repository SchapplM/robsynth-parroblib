% Calculate inertia matrix for parallel robot
% P6PRRRRR6V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% MX [6x6]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-18 12:11
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1(xP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-18 04:21:14
% EndTime: 2019-05-18 04:23:48
% DurationCPUTime: 182.06s
% Computational Cost: add. (666830->2262), mult. (1758518->3675), div. (5994->30), fcn. (1616420->74), ass. (0->1256)
t3669 = xP(4);
t3599 = cos(t3669);
t3667 = xP(6);
t3594 = sin(t3667);
t3597 = cos(t3667);
t3671 = rSges(4,2);
t3672 = rSges(4,1);
t3444 = t3594 * t3672 + t3597 * t3671;
t3596 = sin(t3669);
t4077 = t3444 * t3596;
t3443 = t3594 * t3671 - t3597 * t3672;
t3668 = xP(5);
t3595 = sin(t3668);
t3598 = cos(t3668);
t3670 = rSges(4,3);
t4288 = t3443 * t3595 + t3598 * t3670;
t3145 = (t3599 * t4288 + t4077) * m(4);
t3617 = cos(pkin(5));
t3603 = t3617 ^ 2;
t4246 = t3603 - 0.1e1;
t3685 = rSges(3,2) ^ 2;
t3686 = rSges(3,1) ^ 2;
t3497 = m(3) * (-t3685 + t3686) - Icges(3,1) + Icges(3,2);
t3640 = cos(qJ(3,6));
t3604 = t3640 ^ 2;
t4295 = t3497 * t3604;
t3642 = cos(qJ(3,5));
t3605 = t3642 ^ 2;
t4294 = t3497 * t3605;
t3644 = cos(qJ(3,4));
t3606 = t3644 ^ 2;
t4293 = t3497 * t3606;
t3658 = cos(qJ(3,3));
t3608 = t3658 ^ 2;
t4292 = t3497 * t3608;
t3660 = cos(qJ(3,2));
t3609 = t3660 ^ 2;
t4291 = t3497 * t3609;
t3662 = cos(qJ(3,1));
t3610 = t3662 ^ 2;
t4290 = t3497 * t3610;
t3515 = m(4) * t3670 * t3671 - Icges(4,6);
t4211 = m(4) * t3672;
t3516 = t3670 * t4211 - Icges(4,5);
t3760 = t3594 * t3515 - t3516 * t3597;
t4289 = t3595 * t3760;
t3673 = koppelP(6,3);
t3679 = koppelP(6,1);
t4257 = koppelP(6,2);
t4281 = t3594 * t4257 - t3597 * t3679;
t3347 = t3595 * t4281 + t3598 * t3673;
t3451 = t3594 * t3679 + t3597 * t4257;
t3199 = t3347 * t3596 - t3451 * t3599;
t3200 = t3347 * t3599 + t3451 * t3596;
t3674 = koppelP(5,3);
t3680 = koppelP(5,1);
t4258 = koppelP(5,2);
t4280 = t3594 * t4258 - t3597 * t3680;
t3349 = t3595 * t4280 + t3598 * t3674;
t3452 = t3594 * t3680 + t3597 * t4258;
t3203 = t3349 * t3596 - t3452 * t3599;
t3204 = t3349 * t3599 + t3452 * t3596;
t3675 = koppelP(4,3);
t3681 = koppelP(4,1);
t4259 = koppelP(4,2);
t4279 = t3594 * t4259 - t3597 * t3681;
t3351 = t3595 * t4279 + t3598 * t3675;
t3453 = t3594 * t3681 + t3597 * t4259;
t3207 = t3351 * t3596 - t3453 * t3599;
t3208 = t3351 * t3599 + t3453 * t3596;
t3676 = koppelP(3,3);
t3682 = koppelP(3,1);
t4260 = koppelP(3,2);
t4278 = t3594 * t4260 - t3597 * t3682;
t3353 = t3595 * t4278 + t3598 * t3676;
t3454 = t3594 * t3682 + t3597 * t4260;
t3211 = t3353 * t3596 - t3454 * t3599;
t3212 = t3353 * t3599 + t3454 * t3596;
t3677 = koppelP(2,3);
t3683 = koppelP(2,1);
t4261 = koppelP(2,2);
t4277 = t3594 * t4261 - t3597 * t3683;
t3355 = t3595 * t4277 + t3598 * t3677;
t3455 = t3594 * t3683 + t3597 * t4261;
t3215 = t3355 * t3596 - t3455 * t3599;
t3216 = t3355 * t3599 + t3455 * t3596;
t3678 = koppelP(1,3);
t3684 = koppelP(1,1);
t4262 = koppelP(1,2);
t4276 = t3594 * t4262 - t3597 * t3684;
t3357 = t3595 * t4276 + t3598 * t3678;
t3456 = t3594 * t3684 + t3597 * t4262;
t3219 = t3357 * t3596 - t3456 * t3599;
t3220 = t3357 * t3599 + t3456 * t3596;
t3517 = t3671 * t4211 - Icges(4,4);
t4286 = -0.2e1 * t3517;
t3551 = t3598 ^ 2;
t4285 = -0.2e1 * t3551;
t4284 = m(4) * t3443;
t4212 = (t3443 * t3598 - t3595 * t3670) * m(4);
t3611 = sin(pkin(10));
t3615 = cos(pkin(10));
t3635 = sin(qJ(2,6));
t3618 = cos(pkin(4));
t3641 = cos(qJ(2,6));
t3976 = t3618 * t3641;
t3411 = t3611 * t3976 + t3615 * t3635;
t3414 = -t3611 * t3635 + t3615 * t3976;
t3622 = legFrame(6,3);
t3552 = sin(t3622);
t3564 = cos(t3622);
t3646 = legFrame(6,2);
t3580 = sin(t3646);
t3586 = cos(t3646);
t3614 = sin(pkin(4));
t3997 = t3614 * t3641;
t3146 = t3586 * t3997 + (t3411 * t3564 + t3414 * t3552) * t3580;
t3979 = t3618 * t3635;
t3417 = t3611 * t3641 + t3615 * t3979;
t3420 = -t3611 * t3979 + t3615 * t3641;
t4002 = t3614 * t3635;
t3147 = -t3586 * t4002 + (-t3417 * t3552 + t3420 * t3564) * t3580;
t3399 = t3552 * t3615 + t3564 * t3611;
t4096 = t3399 * t3614;
t3301 = -t3580 * t4096 + t3618 * t3586;
t3616 = cos(pkin(6));
t3602 = t3616 ^ 2;
t3917 = (-t3602 + 0.1e1) * pkin(9);
t3612 = sin(pkin(6));
t3634 = sin(qJ(3,6));
t4018 = t3612 * t3634;
t3458 = pkin(2) * t4018 + t3917;
t4019 = t3612 * t3617;
t3543 = pkin(9) * t3616 + pkin(8);
t4054 = t3543 * t3634;
t3025 = -(pkin(3) * t3146 + t3301 * t4054) * t4019 + t3147 * t3458;
t3275 = -t3411 * t3552 + t3414 * t3564;
t3687 = pkin(9) ^ 2;
t3511 = pkin(3) ^ 2 + t3602 * t3687 - t3687;
t3914 = t3543 * t4246;
t3830 = pkin(3) * t3914;
t3913 = t3634 * t4246;
t3549 = t3612 * pkin(9);
t3957 = pkin(2) * t3549;
t3405 = -t3552 * t3611 + t3564 * t3615;
t4090 = t3405 * t3614;
t3034 = t3275 * t3830 + (t3511 * t3913 + t3957) * t4090;
t4223 = pkin(3) * t3614;
t3958 = pkin(2) * t4223;
t3847 = t3634 * t3958;
t3928 = pkin(3) * t4090;
t4275 = t3549 * t4246;
t3043 = t3405 * t3847 - (t3275 * t4054 + t3928) * t4275;
t3919 = pkin(9) * t4019;
t3838 = pkin(3) * t3919;
t3820 = 0.2e1 * t3838;
t3067 = t3146 * t3820 + t3147 * t3511;
t3278 = t3417 * t3564 + t3420 * t3552;
t4063 = t3511 * t3634;
t3521 = pkin(9) * t4018;
t3499 = 0.2e1 * t3521 + pkin(2);
t4231 = pkin(3) * t3499;
t3070 = (t3275 * t4063 - t3543 * t3928) * t3617 + t3278 * t4231;
t4003 = t3614 * t3634;
t3867 = t3543 * t4003;
t3076 = (pkin(3) * t3275 - t3405 * t3867) * t4019 + t3278 * t3458;
t3628 = legFrame(6,1);
t3558 = sin(t3628);
t3570 = cos(t3628);
t3613 = sin(pkin(5));
t4225 = pkin(3) * t3543;
t3746 = -(t3146 * t4063 + t3301 * t4225) * t3617 + t3147 * t4231;
t3956 = pkin(3) * t3549;
t4030 = (t3617 + 0.1e1) * (t3617 - 0.1e1);
t3800 = t3956 * t4030;
t3773 = -0.2e1 * t3800;
t4214 = pkin(9) * t3613;
t4247 = -t3511 / 0.2e1;
t4256 = -0.2e1 * t3275 * t3838 - 0.2e1 * t3278 * t4247;
t3922 = t3543 * t3549;
t4237 = pkin(3) * t3301;
t4263 = ((t3146 * t4054 - t4237) * t3603 + t4237) * t3549 - (-pkin(2) * t4237 + t3146 * t3922) * t3634;
t3139 = t3146 * t4225;
t4274 = t3301 * (t3957 - t4063) + (t3301 * t4063 - t3139) * t3603 + t3139;
t2917 = ((t3067 * t3558 + t3570 * t4256) * t3613 + (t3301 * t3558 + t3570 * t4090) * t3773) * t3604 + ((t3570 * t3070 + t3558 * t3746) * t3613 + t4274 * t3558 + t3034 * t3570) * t3640 + (t3025 * t3558 + t3076 * t3570) * t4214 - t4263 * t3558 - t3043 * t3570;
t3772 = 0.2e1 * t3800;
t2918 = ((-t3067 * t3570 + t3558 * t4256) * t3613 + (t3301 * t3570 - t3558 * t4090) * t3772) * t3604 + ((t3558 * t3070 - t3570 * t3746) * t3613 - t4274 * t3570 + t3558 * t3034) * t3640 - (t3025 * t3570 - t3076 * t3558) * t4214 + t4263 * t3570 - t3558 * t3043;
t4221 = pkin(3) * t3618;
t3480 = t3543 * t4221;
t3915 = t3511 * t4246;
t3705 = -t3634 * t3915 - t3957;
t3818 = t3641 * t3914;
t3855 = t3634 * t3997;
t4009 = t3613 * t3635;
t3877 = t3499 * t4009;
t4011 = t3613 * t3617;
t3088 = (t3511 * t3855 + t3480) * t4011 + (t3818 + t3877) * t4223 + t3705 * t3618;
t3759 = t3618 * t3800;
t3383 = 0.2e1 * t3759;
t3827 = t3641 * t3919;
t4012 = t3613 * t3614;
t3883 = (pkin(3) * t3827 + t3635 * t4247) * t4012;
t3175 = (t3383 - 0.2e1 * t3883) * t3604;
t3520 = t3612 * t4221;
t3512 = pkin(9) * t3520;
t3548 = pkin(2) * t4221;
t3920 = t3614 * t3549;
t3829 = t3543 * t3920;
t3921 = t3603 * t3549;
t3806 = ((pkin(3) * t3997 + t3618 * t4054) * t4019 + t3458 * t4002) * t4214 + (t3543 * t3855 - t4221) * t3921 + (-t3641 * t3829 + t3548) * t3634 + t3512;
t2989 = 0.1e1 / (t3088 * t3640 + t3175 + t3806);
t2821 = (-t2917 * t3200 - t2918 * t3199) * t2989;
t4036 = t3570 * t3580;
t3223 = t3399 * t4036 + t3405 * t3558;
t3224 = -t3399 * t3558 + t3405 * t4036;
t3055 = (-t3223 * t3635 + t3224 * t3976) * t3617 - t3224 * t4012;
t3121 = t3223 * t3641 + t3224 * t3979;
t2971 = (-pkin(3) * t3055 - t3121 * t3549) * t3640 - t3634 * (-pkin(3) * t3121 + t3055 * t3549);
t4042 = t3558 * t3580;
t3235 = t3399 * t3570 + t3405 * t4042;
t3241 = t3399 * t4042 - t3405 * t3570;
t3056 = (t3235 * t3976 - t3241 * t3635) * t3617 - t3235 * t4012;
t3124 = t3235 * t3979 + t3241 * t3641;
t2974 = (pkin(3) * t3056 + t3124 * t3549) * t3640 + t3634 * (-pkin(3) * t3124 + t3056 * t3549);
t3868 = t3543 * t4011;
t3436 = t3618 * t3868;
t3527 = pkin(2) * t4009;
t3162 = t3436 + (t3527 + t3818) * t3614;
t3837 = t4246 * t3618;
t3985 = t3617 * t3641;
t3861 = t3613 * t3985;
t3367 = t3614 * t3861 - t3837;
t3871 = t3511 * t4012;
t3384 = t3635 * t3871;
t3771 = 0.2e1 * pkin(3) * t3613 * t3920;
t3437 = t3635 * t3771;
t3828 = (t3616 + 0.1e1) * (t3616 - 0.1e1) * t4214;
t3785 = t3635 * t3828;
t3840 = t3618 * t3957;
t3918 = -0.2e1 * t3956;
t4224 = pkin(3) * t3612;
t2995 = 0.1e1 / ((t3367 * t3918 + t3384) * t3604 + ((t3367 * t3511 + t3437) * t3634 - t3840 + pkin(3) * t3162) * t3640 + (t3162 * t3549 + t3548) * t3634 + (t3367 * t4224 - t3614 * t3785) * pkin(9));
t2929 = (-t2971 * t3199 - t2974 * t3200) * t2995;
t3457 = pkin(3) * t3868;
t3257 = t3457 + t3705;
t3870 = t3511 * t4011;
t3812 = t3634 * t3870;
t3848 = t4246 * t4225;
t3307 = t3812 + t3848;
t3519 = pkin(3) * t4011;
t3315 = t3543 * t3913 + t3519;
t3849 = -0.2e1 * t3519;
t3948 = 0.2e1 * t4030;
t3786 = t3868 * t3549;
t3966 = t3634 * t3786 + pkin(3) * (pkin(2) * t3634 + t3549);
t4220 = pkin(3) * t3640;
t3007 = 0.1e1 / ((t3257 * t3640 + (t3604 * t3948 - t3603) * t3956 + t3966) * t3618 + ((t3307 * t3640 + (t3604 * t3849 + t3315) * t3549) * t3641 + (pkin(9) * t3458 + t3499 * t4220 + t3511 * t3604) * t4009) * t3614);
t4055 = t3543 * t3613;
t4222 = pkin(3) * t3617;
t3380 = t3634 * t4222 - t4055;
t3323 = t3640 * t3919 - t3380;
t3500 = t3521 + pkin(2);
t3461 = t3500 + t4220;
t3190 = -t3323 * t3641 + t3461 * t3635;
t4108 = (t3323 * t3635 + t3461 * t3641) * t3618;
t3019 = -t3190 * t3223 + t3224 * t4108;
t3022 = t3190 * t3241 - t3235 * t4108;
t2953 = (-t3019 * t3199 - t3022 * t3200) * t3007;
t4248 = m(3) * rSges(3,2);
t3546 = (-rSges(3,1) * t4248 + Icges(3,4));
t3547 = 2 * t3546;
t3666 = m(3) * pkin(2);
t3593 = 0.2e1 * rSges(3,1) * t3666;
t3664 = pkin(8) + rSges(3,3);
t4238 = m(3) * t3664;
t3530 = -rSges(3,2) * t4238 + Icges(3,6);
t3531 = rSges(3,1) * t4238 - Icges(3,5);
t3768 = (t3530 * t3640 - t3531 * t3634) * t3613;
t3769 = -m(3) * (rSges(3,1) + t3664) * (-rSges(3,1) + t3664) - Icges(3,1) + Icges(3,3);
t3819 = Icges(3,1) + Icges(2,3) + (pkin(2) ^ 2 + pkin(8) ^ 2 + t3685 + (0.2e1 * pkin(8) + rSges(3,3)) * rSges(3,3)) * m(3) + (rSges(2,1) ^ 2 + rSges(2,2) ^ 2) * m(2);
t3947 = -0.2e1 * pkin(2) * t4248;
t4249 = 0.2e1 * t3617;
t4250 = -2 * t3546;
t3085 = (t3634 * t3640 * t4250 + t3769 - t4295) * t3603 + t3768 * t4249 + t4295 + (t3547 * t3634 + t3593) * t3640 + t3634 * t3947 + t3819;
t3518 = (t3685 + t3686) * m(3) + Icges(3,3);
t3799 = rSges(3,1) * t3640 - rSges(3,2) * t3634;
t3752 = t3799 * m(3);
t3184 = t3768 + t3617 * (pkin(2) * t3752 + t3518);
t3916 = -m(2) * rSges(2,2) + t3613 * t4238;
t3959 = m(2) * rSges(2,1) + t3666;
t4239 = m(3) * t3617;
t4105 = ((-(rSges(3,1) * t3634 + rSges(3,2) * t3640) * t4239 + t3916) * t3635 + (t3752 + t3959) * t3641) * t3614;
t2737 = t2821 * t4105 + t2929 * t3085 + t2953 * t3184;
t3637 = sin(qJ(2,5));
t3643 = cos(qJ(2,5));
t3975 = t3618 * t3643;
t3412 = t3611 * t3975 + t3615 * t3637;
t3415 = -t3611 * t3637 + t3615 * t3975;
t3623 = legFrame(5,3);
t3553 = sin(t3623);
t3565 = cos(t3623);
t3647 = legFrame(5,2);
t3581 = sin(t3647);
t3587 = cos(t3647);
t3996 = t3614 * t3643;
t3148 = t3587 * t3996 + (t3412 * t3565 + t3415 * t3553) * t3581;
t3978 = t3618 * t3637;
t3418 = t3611 * t3643 + t3615 * t3978;
t3421 = -t3611 * t3978 + t3615 * t3643;
t4000 = t3614 * t3637;
t3149 = -t3587 * t4000 + (-t3418 * t3553 + t3421 * t3565) * t3581;
t3400 = t3553 * t3615 + t3565 * t3611;
t4095 = t3400 * t3614;
t3302 = -t3581 * t4095 + t3618 * t3587;
t3636 = sin(qJ(3,5));
t4017 = t3612 * t3636;
t3459 = pkin(2) * t4017 + t3917;
t4053 = t3543 * t3636;
t3026 = -(pkin(3) * t3148 + t3302 * t4053) * t4019 + t3149 * t3459;
t3276 = -t3412 * t3553 + t3415 * t3565;
t3912 = t3636 * t4246;
t3406 = -t3553 * t3611 + t3565 * t3615;
t4088 = t3406 * t3614;
t3035 = t3276 * t3830 + (t3511 * t3912 + t3957) * t4088;
t3846 = t3636 * t3958;
t3927 = pkin(3) * t4088;
t3044 = t3406 * t3846 - (t3276 * t4053 + t3927) * t4275;
t3068 = t3148 * t3820 + t3149 * t3511;
t3279 = t3418 * t3565 + t3421 * t3553;
t4062 = t3511 * t3636;
t3523 = pkin(9) * t4017;
t3501 = 0.2e1 * t3523 + pkin(2);
t4230 = pkin(3) * t3501;
t3071 = (t3276 * t4062 - t3543 * t3927) * t3617 + t3279 * t4230;
t4001 = t3614 * t3636;
t3866 = t3543 * t4001;
t3077 = (pkin(3) * t3276 - t3406 * t3866) * t4019 + t3279 * t3459;
t3629 = legFrame(5,1);
t3559 = sin(t3629);
t3571 = cos(t3629);
t3745 = -(t3148 * t4062 + t3302 * t4225) * t3617 + t3149 * t4230;
t4255 = -0.2e1 * t3276 * t3838 - 0.2e1 * t3279 * t4247;
t4236 = pkin(3) * t3302;
t4264 = ((t3148 * t4053 - t4236) * t3603 + t4236) * t3549 - (-pkin(2) * t4236 + t3148 * t3922) * t3636;
t3140 = t3148 * t4225;
t4273 = t3302 * (t3957 - t4062) + (t3302 * t4062 - t3140) * t3603 + t3140;
t2919 = ((t3068 * t3559 + t3571 * t4255) * t3613 + (t3302 * t3559 + t3571 * t4088) * t3773) * t3605 + ((t3571 * t3071 + t3559 * t3745) * t3613 + t4273 * t3559 + t3035 * t3571) * t3642 + (t3026 * t3559 + t3077 * t3571) * t4214 - t4264 * t3559 - t3044 * t3571;
t2920 = ((-t3068 * t3571 + t3559 * t4255) * t3613 + (t3302 * t3571 - t3559 * t4088) * t3772) * t3605 + ((t3559 * t3071 - t3571 * t3745) * t3613 - t4273 * t3571 + t3559 * t3035) * t3642 - (t3026 * t3571 - t3077 * t3559) * t4214 + t4264 * t3571 - t3559 * t3044;
t3704 = -t3636 * t3915 - t3957;
t3817 = t3643 * t3914;
t3854 = t3636 * t3996;
t4008 = t3613 * t3637;
t3876 = t3501 * t4008;
t3089 = (t3511 * t3854 + t3480) * t4011 + (t3817 + t3876) * t4223 + t3704 * t3618;
t3826 = t3643 * t3919;
t3882 = (pkin(3) * t3826 + t3637 * t4247) * t4012;
t3176 = (t3383 - 0.2e1 * t3882) * t3605;
t3805 = ((pkin(3) * t3996 + t3618 * t4053) * t4019 + t3459 * t4000) * t4214 + (t3543 * t3854 - t4221) * t3921 + (-t3643 * t3829 + t3548) * t3636 + t3512;
t2990 = 0.1e1 / (t3089 * t3642 + t3176 + t3805);
t2822 = (-t2919 * t3204 - t2920 * t3203) * t2990;
t4035 = t3571 * t3581;
t3225 = t3400 * t4035 + t3406 * t3559;
t3226 = -t3400 * t3559 + t3406 * t4035;
t3057 = (-t3225 * t3637 + t3226 * t3975) * t3617 - t3226 * t4012;
t3122 = t3225 * t3643 + t3226 * t3978;
t2972 = (-pkin(3) * t3057 - t3122 * t3549) * t3642 - t3636 * (-pkin(3) * t3122 + t3057 * t3549);
t4041 = t3559 * t3581;
t3236 = t3400 * t3571 + t3406 * t4041;
t3242 = t3400 * t4041 - t3406 * t3571;
t3058 = (t3236 * t3975 - t3242 * t3637) * t3617 - t3236 * t4012;
t3125 = t3236 * t3978 + t3242 * t3643;
t2975 = (pkin(3) * t3058 + t3125 * t3549) * t3642 + t3636 * (-pkin(3) * t3125 + t3058 * t3549);
t3528 = pkin(2) * t4008;
t3163 = t3436 + (t3528 + t3817) * t3614;
t3984 = t3617 * t3643;
t3860 = t3613 * t3984;
t3368 = t3614 * t3860 - t3837;
t3385 = t3637 * t3871;
t3438 = t3637 * t3771;
t3784 = t3637 * t3828;
t2996 = 0.1e1 / ((t3368 * t3918 + t3385) * t3605 + ((t3368 * t3511 + t3438) * t3636 - t3840 + pkin(3) * t3163) * t3642 + (t3163 * t3549 + t3548) * t3636 + (t3368 * t4224 - t3614 * t3784) * pkin(9));
t2930 = (-t2972 * t3203 - t2975 * t3204) * t2996;
t3258 = t3457 + t3704;
t3811 = t3636 * t3870;
t3308 = t3811 + t3848;
t3316 = t3543 * t3912 + t3519;
t3965 = t3636 * t3786 + pkin(3) * (pkin(2) * t3636 + t3549);
t4219 = pkin(3) * t3642;
t3008 = 0.1e1 / ((t3258 * t3642 + (t3605 * t3948 - t3603) * t3956 + t3965) * t3618 + ((t3308 * t3642 + (t3605 * t3849 + t3316) * t3549) * t3643 + (pkin(9) * t3459 + t3501 * t4219 + t3511 * t3605) * t4008) * t3614);
t3381 = t3636 * t4222 - t4055;
t3324 = t3642 * t3919 - t3381;
t3502 = t3523 + pkin(2);
t3462 = t3502 + t4219;
t3191 = -t3324 * t3643 + t3462 * t3637;
t4107 = (t3324 * t3637 + t3462 * t3643) * t3618;
t3020 = -t3191 * t3225 + t3226 * t4107;
t3023 = t3191 * t3242 - t3236 * t4107;
t2954 = (-t3020 * t3203 - t3023 * t3204) * t3008;
t3767 = (t3530 * t3642 - t3531 * t3636) * t3613;
t3086 = (t3636 * t3642 * t4250 + t3769 - t4294) * t3603 + t3767 * t4249 + t4294 + (t3547 * t3636 + t3593) * t3642 + t3636 * t3947 + t3819;
t3798 = rSges(3,1) * t3642 - rSges(3,2) * t3636;
t3751 = t3798 * m(3);
t3185 = t3767 + t3617 * (pkin(2) * t3751 + t3518);
t4104 = ((-(rSges(3,1) * t3636 + rSges(3,2) * t3642) * t4239 + t3916) * t3637 + (t3751 + t3959) * t3643) * t3614;
t2738 = t2822 * t4104 + t2930 * t3086 + t2954 * t3185;
t3639 = sin(qJ(2,4));
t3645 = cos(qJ(2,4));
t3974 = t3618 * t3645;
t3413 = t3611 * t3974 + t3615 * t3639;
t3416 = -t3611 * t3639 + t3615 * t3974;
t3624 = legFrame(4,3);
t3554 = sin(t3624);
t3566 = cos(t3624);
t3648 = legFrame(4,2);
t3582 = sin(t3648);
t3588 = cos(t3648);
t3995 = t3614 * t3645;
t3150 = t3588 * t3995 + (t3413 * t3566 + t3416 * t3554) * t3582;
t3977 = t3618 * t3639;
t3419 = t3611 * t3645 + t3615 * t3977;
t3422 = -t3611 * t3977 + t3615 * t3645;
t3998 = t3614 * t3639;
t3151 = -t3588 * t3998 + (-t3419 * t3554 + t3422 * t3566) * t3582;
t3401 = t3554 * t3615 + t3566 * t3611;
t4094 = t3401 * t3614;
t3303 = -t3582 * t4094 + t3618 * t3588;
t3638 = sin(qJ(3,4));
t4016 = t3612 * t3638;
t3460 = pkin(2) * t4016 + t3917;
t4052 = t3543 * t3638;
t3027 = -(pkin(3) * t3150 + t3303 * t4052) * t4019 + t3151 * t3460;
t3277 = -t3413 * t3554 + t3416 * t3566;
t3911 = t3638 * t4246;
t3407 = -t3554 * t3611 + t3566 * t3615;
t4086 = t3407 * t3614;
t3036 = t3277 * t3830 + (t3511 * t3911 + t3957) * t4086;
t3845 = t3638 * t3958;
t3926 = pkin(3) * t4086;
t3045 = t3407 * t3845 - (t3277 * t4052 + t3926) * t4275;
t3069 = t3150 * t3820 + t3151 * t3511;
t3280 = t3419 * t3566 + t3422 * t3554;
t4061 = t3511 * t3638;
t3525 = pkin(9) * t4016;
t3503 = 0.2e1 * t3525 + pkin(2);
t4229 = pkin(3) * t3503;
t3072 = (t3277 * t4061 - t3543 * t3926) * t3617 + t3280 * t4229;
t3999 = t3614 * t3638;
t3865 = t3543 * t3999;
t3078 = (pkin(3) * t3277 - t3407 * t3865) * t4019 + t3280 * t3460;
t3630 = legFrame(4,1);
t3560 = sin(t3630);
t3572 = cos(t3630);
t3744 = -(t3150 * t4061 + t3303 * t4225) * t3617 + t3151 * t4229;
t4254 = -0.2e1 * t3277 * t3838 - 0.2e1 * t3280 * t4247;
t4235 = pkin(3) * t3303;
t4265 = ((t3150 * t4052 - t4235) * t3603 + t4235) * t3549 - (-pkin(2) * t4235 + t3150 * t3922) * t3638;
t3141 = t3150 * t4225;
t4272 = t3303 * (t3957 - t4061) + (t3303 * t4061 - t3141) * t3603 + t3141;
t2921 = ((t3069 * t3560 + t3572 * t4254) * t3613 + (t3303 * t3560 + t3572 * t4086) * t3773) * t3606 + ((t3572 * t3072 + t3560 * t3744) * t3613 + t4272 * t3560 + t3036 * t3572) * t3644 + (t3027 * t3560 + t3078 * t3572) * t4214 - t4265 * t3560 - t3045 * t3572;
t2922 = ((-t3069 * t3572 + t3560 * t4254) * t3613 + (t3303 * t3572 - t3560 * t4086) * t3772) * t3606 + ((t3560 * t3072 - t3572 * t3744) * t3613 - t4272 * t3572 + t3560 * t3036) * t3644 - (t3027 * t3572 - t3078 * t3560) * t4214 + t4265 * t3572 - t3560 * t3045;
t3703 = -t3638 * t3915 - t3957;
t3816 = t3645 * t3914;
t3853 = t3638 * t3995;
t4007 = t3613 * t3639;
t3875 = t3503 * t4007;
t3090 = (t3511 * t3853 + t3480) * t4011 + (t3816 + t3875) * t4223 + t3703 * t3618;
t3825 = t3645 * t3919;
t3881 = (pkin(3) * t3825 + t3639 * t4247) * t4012;
t3177 = (t3383 - 0.2e1 * t3881) * t3606;
t3804 = ((pkin(3) * t3995 + t3618 * t4052) * t4019 + t3460 * t3998) * t4214 + (t3543 * t3853 - t4221) * t3921 + (-t3645 * t3829 + t3548) * t3638 + t3512;
t2991 = 0.1e1 / (t3090 * t3644 + t3177 + t3804);
t2823 = (-t2921 * t3208 - t2922 * t3207) * t2991;
t4034 = t3572 * t3582;
t3227 = t3401 * t4034 + t3407 * t3560;
t3228 = -t3401 * t3560 + t3407 * t4034;
t3059 = (-t3227 * t3639 + t3228 * t3974) * t3617 - t3228 * t4012;
t3123 = t3227 * t3645 + t3228 * t3977;
t2973 = (-pkin(3) * t3059 - t3123 * t3549) * t3644 - t3638 * (-pkin(3) * t3123 + t3059 * t3549);
t4040 = t3560 * t3582;
t3237 = t3401 * t3572 + t3407 * t4040;
t3243 = t3401 * t4040 - t3407 * t3572;
t3060 = (t3237 * t3974 - t3243 * t3639) * t3617 - t3237 * t4012;
t3126 = t3237 * t3977 + t3243 * t3645;
t2976 = (pkin(3) * t3060 + t3126 * t3549) * t3644 + t3638 * (-pkin(3) * t3126 + t3060 * t3549);
t3529 = pkin(2) * t4007;
t3164 = t3436 + (t3529 + t3816) * t3614;
t3983 = t3617 * t3645;
t3859 = t3613 * t3983;
t3369 = t3614 * t3859 - t3837;
t3386 = t3639 * t3871;
t3439 = t3639 * t3771;
t3783 = t3639 * t3828;
t2997 = 0.1e1 / ((t3369 * t3918 + t3386) * t3606 + ((t3369 * t3511 + t3439) * t3638 - t3840 + pkin(3) * t3164) * t3644 + (t3164 * t3549 + t3548) * t3638 + (t3369 * t4224 - t3614 * t3783) * pkin(9));
t2931 = (-t2973 * t3207 - t2976 * t3208) * t2997;
t3259 = t3457 + t3703;
t3810 = t3638 * t3870;
t3309 = t3810 + t3848;
t3317 = t3543 * t3911 + t3519;
t3964 = t3638 * t3786 + pkin(3) * (pkin(2) * t3638 + t3549);
t4218 = pkin(3) * t3644;
t3009 = 0.1e1 / ((t3259 * t3644 + (t3606 * t3948 - t3603) * t3956 + t3964) * t3618 + ((t3309 * t3644 + (t3606 * t3849 + t3317) * t3549) * t3645 + (pkin(9) * t3460 + t3503 * t4218 + t3511 * t3606) * t4007) * t3614);
t3382 = t3638 * t4222 - t4055;
t3325 = t3644 * t3919 - t3382;
t3504 = t3525 + pkin(2);
t3463 = t3504 + t4218;
t3192 = -t3325 * t3645 + t3463 * t3639;
t4106 = (t3325 * t3639 + t3463 * t3645) * t3618;
t3021 = -t3192 * t3227 + t3228 * t4106;
t3024 = t3192 * t3243 - t3237 * t4106;
t2955 = (-t3021 * t3207 - t3024 * t3208) * t3009;
t3766 = (t3530 * t3644 - t3531 * t3638) * t3613;
t3087 = (t3638 * t3644 * t4250 + t3769 - t4293) * t3603 + t3766 * t4249 + t4293 + (t3547 * t3638 + t3593) * t3644 + t3638 * t3947 + t3819;
t3797 = rSges(3,1) * t3644 - rSges(3,2) * t3638;
t3750 = t3797 * m(3);
t3186 = t3766 + t3617 * (pkin(2) * t3750 + t3518);
t4103 = ((-(rSges(3,1) * t3638 + rSges(3,2) * t3644) * t4239 + t3916) * t3639 + (t3750 + t3959) * t3645) * t3614;
t2739 = t2823 * t4103 + t2931 * t3087 + t2955 * t3186;
t3653 = sin(qJ(2,3));
t3659 = cos(qJ(2,3));
t3970 = t3618 * t3659;
t3424 = t3611 * t3970 + t3615 * t3653;
t3427 = -t3611 * t3653 + t3615 * t3970;
t3625 = legFrame(3,3);
t3555 = sin(t3625);
t3567 = cos(t3625);
t3649 = legFrame(3,2);
t3583 = sin(t3649);
t3589 = cos(t3649);
t3988 = t3614 * t3659;
t3152 = t3589 * t3988 + (t3424 * t3567 + t3427 * t3555) * t3583;
t3973 = t3618 * t3653;
t3430 = t3611 * t3659 + t3615 * t3973;
t3433 = -t3611 * t3973 + t3615 * t3659;
t3993 = t3614 * t3653;
t3153 = -t3589 * t3993 + (-t3430 * t3555 + t3433 * t3567) * t3583;
t3402 = t3555 * t3615 + t3567 * t3611;
t4093 = t3402 * t3614;
t3304 = -t3583 * t4093 + t3618 * t3589;
t3652 = sin(qJ(3,3));
t4015 = t3612 * t3652;
t3464 = pkin(2) * t4015 + t3917;
t4048 = t3543 * t3652;
t3037 = -(pkin(3) * t3152 + t3304 * t4048) * t4019 + t3153 * t3464;
t3293 = -t3424 * t3555 + t3427 * t3567;
t3910 = t3652 * t4246;
t3408 = -t3555 * t3611 + t3567 * t3615;
t4084 = t3408 * t3614;
t3040 = t3293 * t3830 + (t3511 * t3910 + t3957) * t4084;
t3844 = t3652 * t3958;
t3925 = pkin(3) * t4084;
t3046 = t3408 * t3844 - (t3293 * t4048 + t3925) * t4275;
t3073 = t3152 * t3820 + t3153 * t3511;
t3296 = t3430 * t3567 + t3433 * t3555;
t4060 = t3511 * t3652;
t3532 = pkin(9) * t4015;
t3505 = 0.2e1 * t3532 + pkin(2);
t4228 = pkin(3) * t3505;
t3079 = (t3293 * t4060 - t3543 * t3925) * t3617 + t3296 * t4228;
t3994 = t3614 * t3652;
t3864 = t3543 * t3994;
t3082 = (pkin(3) * t3293 - t3408 * t3864) * t4019 + t3296 * t3464;
t3631 = legFrame(3,1);
t3561 = sin(t3631);
t3573 = cos(t3631);
t3743 = -(t3152 * t4060 + t3304 * t4225) * t3617 + t3153 * t4228;
t4253 = -0.2e1 * t3293 * t3838 - 0.2e1 * t3296 * t4247;
t4234 = pkin(3) * t3304;
t4266 = ((t3152 * t4048 - t4234) * t3603 + t4234) * t3549 - (-pkin(2) * t4234 + t3152 * t3922) * t3652;
t3142 = t3152 * t4225;
t4271 = t3304 * (t3957 - t4060) + (t3304 * t4060 - t3142) * t3603 + t3142;
t2923 = ((t3073 * t3561 + t3573 * t4253) * t3613 + (t3304 * t3561 + t3573 * t4084) * t3773) * t3608 + ((t3573 * t3079 + t3561 * t3743) * t3613 + t4271 * t3561 + t3040 * t3573) * t3658 + (t3037 * t3561 + t3082 * t3573) * t4214 - t4266 * t3561 - t3046 * t3573;
t2924 = ((-t3073 * t3573 + t3561 * t4253) * t3613 + (t3304 * t3573 - t3561 * t4084) * t3772) * t3608 + ((t3561 * t3079 - t3573 * t3743) * t3613 - t4271 * t3573 + t3561 * t3040) * t3658 - (t3037 * t3573 - t3082 * t3561) * t4214 + t4266 * t3573 - t3561 * t3046;
t3702 = -t3652 * t3915 - t3957;
t3815 = t3659 * t3914;
t3852 = t3652 * t3988;
t4006 = t3613 * t3653;
t3874 = t3505 * t4006;
t3100 = (t3511 * t3852 + t3480) * t4011 + (t3815 + t3874) * t4223 + t3702 * t3618;
t3824 = t3659 * t3919;
t3880 = (pkin(3) * t3824 + t3653 * t4247) * t4012;
t3178 = (t3383 - 0.2e1 * t3880) * t3608;
t3803 = ((pkin(3) * t3988 + t3618 * t4048) * t4019 + t3464 * t3993) * t4214 + (t3543 * t3852 - t4221) * t3921 + (-t3659 * t3829 + t3548) * t3652 + t3512;
t2992 = 0.1e1 / (t3100 * t3658 + t3178 + t3803);
t2830 = (-t2923 * t3212 - t2924 * t3211) * t2992;
t4033 = t3573 * t3583;
t3229 = t3402 * t4033 + t3408 * t3561;
t3230 = -t3402 * t3561 + t3408 * t4033;
t3061 = (-t3229 * t3653 + t3230 * t3970) * t3617 - t3230 * t4012;
t3127 = t3229 * t3659 + t3230 * t3973;
t2977 = (-pkin(3) * t3061 - t3127 * t3549) * t3658 - t3652 * (-pkin(3) * t3127 + t3061 * t3549);
t4039 = t3561 * t3583;
t3238 = t3402 * t3573 + t3408 * t4039;
t3244 = t3402 * t4039 - t3408 * t3573;
t3062 = (t3238 * t3970 - t3244 * t3653) * t3617 - t3238 * t4012;
t3130 = t3238 * t3973 + t3244 * t3659;
t2980 = (pkin(3) * t3062 + t3130 * t3549) * t3658 + t3652 * (-pkin(3) * t3130 + t3062 * t3549);
t3538 = pkin(2) * t4006;
t3166 = t3436 + (t3538 + t3815) * t3614;
t3982 = t3617 * t3659;
t3858 = t3613 * t3982;
t3370 = t3614 * t3858 - t3837;
t3393 = t3653 * t3871;
t3440 = t3653 * t3771;
t3782 = t3653 * t3828;
t2998 = 0.1e1 / ((t3370 * t3918 + t3393) * t3608 + ((t3370 * t3511 + t3440) * t3652 - t3840 + pkin(3) * t3166) * t3658 + (t3166 * t3549 + t3548) * t3652 + (t3370 * t4224 - t3614 * t3782) * pkin(9));
t2932 = (-t2977 * t3211 - t2980 * t3212) * t2998;
t3260 = t3457 + t3702;
t3809 = t3652 * t3870;
t3310 = t3809 + t3848;
t3318 = t3543 * t3910 + t3519;
t3963 = t3652 * t3786 + pkin(3) * (pkin(2) * t3652 + t3549);
t4217 = pkin(3) * t3658;
t3013 = 0.1e1 / ((t3260 * t3658 + (t3608 * t3948 - t3603) * t3956 + t3963) * t3618 + ((t3310 * t3658 + (t3608 * t3849 + t3318) * t3549) * t3659 + (pkin(9) * t3464 + t3505 * t4217 + t3511 * t3608) * t4006) * t3614);
t3387 = t3652 * t4222 - t4055;
t3329 = t3658 * t3919 - t3387;
t3506 = t3532 + pkin(2);
t3467 = t3506 + t4217;
t3247 = -t3329 * t3659 + t3467 * t3653;
t4102 = (t3329 * t3653 + t3467 * t3659) * t3618;
t3028 = -t3229 * t3247 + t3230 * t4102;
t3031 = -t3238 * t4102 + t3244 * t3247;
t2956 = (-t3028 * t3211 - t3031 * t3212) * t3013;
t3765 = (t3530 * t3658 - t3531 * t3652) * t3613;
t3091 = (t3652 * t3658 * t4250 + t3769 - t4292) * t3603 + t3765 * t4249 + t4292 + (t3547 * t3652 + t3593) * t3658 + t3652 * t3947 + t3819;
t3796 = rSges(3,1) * t3658 - rSges(3,2) * t3652;
t3749 = t3796 * m(3);
t3187 = t3765 + t3617 * (pkin(2) * t3749 + t3518);
t4099 = ((-(rSges(3,1) * t3652 + rSges(3,2) * t3658) * t4239 + t3916) * t3653 + (t3749 + t3959) * t3659) * t3614;
t2740 = t2830 * t4099 + t2932 * t3091 + t2956 * t3187;
t3655 = sin(qJ(2,2));
t3661 = cos(qJ(2,2));
t3969 = t3618 * t3661;
t3425 = t3611 * t3969 + t3615 * t3655;
t3428 = -t3611 * t3655 + t3615 * t3969;
t3626 = legFrame(2,3);
t3556 = sin(t3626);
t3568 = cos(t3626);
t3650 = legFrame(2,2);
t3584 = sin(t3650);
t3590 = cos(t3650);
t3987 = t3614 * t3661;
t3154 = t3590 * t3987 + (t3425 * t3568 + t3428 * t3556) * t3584;
t3972 = t3618 * t3655;
t3431 = t3611 * t3661 + t3615 * t3972;
t3434 = -t3611 * t3972 + t3615 * t3661;
t3991 = t3614 * t3655;
t3155 = -t3590 * t3991 + (-t3431 * t3556 + t3434 * t3568) * t3584;
t3403 = t3556 * t3615 + t3568 * t3611;
t4092 = t3403 * t3614;
t3305 = -t3584 * t4092 + t3618 * t3590;
t3654 = sin(qJ(3,2));
t4014 = t3612 * t3654;
t3465 = pkin(2) * t4014 + t3917;
t4047 = t3543 * t3654;
t3038 = -(pkin(3) * t3154 + t3305 * t4047) * t4019 + t3155 * t3465;
t3294 = -t3425 * t3556 + t3428 * t3568;
t3908 = t4246 * t3654;
t3409 = -t3556 * t3611 + t3568 * t3615;
t4082 = t3409 * t3614;
t3041 = t3294 * t3830 + (t3511 * t3908 + t3957) * t4082;
t3843 = t3654 * t3958;
t3924 = pkin(3) * t4082;
t3047 = t3409 * t3843 - (t3294 * t4047 + t3924) * t4275;
t3074 = t3154 * t3820 + t3155 * t3511;
t3297 = t3431 * t3568 + t3434 * t3556;
t4059 = t3511 * t3654;
t3534 = pkin(9) * t4014;
t3507 = 0.2e1 * t3534 + pkin(2);
t4227 = pkin(3) * t3507;
t3080 = (t3294 * t4059 - t3543 * t3924) * t3617 + t3297 * t4227;
t3992 = t3614 * t3654;
t3863 = t3543 * t3992;
t3083 = (pkin(3) * t3294 - t3409 * t3863) * t4019 + t3297 * t3465;
t3632 = legFrame(2,1);
t3562 = sin(t3632);
t3574 = cos(t3632);
t3742 = -(t3154 * t4059 + t3305 * t4225) * t3617 + t3155 * t4227;
t4252 = -0.2e1 * t3294 * t3838 - 0.2e1 * t3297 * t4247;
t4233 = pkin(3) * t3305;
t4267 = ((t3154 * t4047 - t4233) * t3603 + t4233) * t3549 - (-pkin(2) * t4233 + t3154 * t3922) * t3654;
t3143 = t3154 * t4225;
t4270 = t3305 * (t3957 - t4059) + (t3305 * t4059 - t3143) * t3603 + t3143;
t2925 = ((t3074 * t3562 + t3574 * t4252) * t3613 + (t3305 * t3562 + t3574 * t4082) * t3773) * t3609 + ((t3574 * t3080 + t3562 * t3742) * t3613 + t4270 * t3562 + t3041 * t3574) * t3660 + (t3038 * t3562 + t3083 * t3574) * t4214 - t4267 * t3562 - t3047 * t3574;
t2926 = ((-t3074 * t3574 + t3562 * t4252) * t3613 + (t3305 * t3574 - t3562 * t4082) * t3772) * t3609 + ((t3562 * t3080 - t3574 * t3742) * t3613 - t4270 * t3574 + t3562 * t3041) * t3660 - (t3038 * t3574 - t3083 * t3562) * t4214 + t4267 * t3574 - t3562 * t3047;
t3701 = -t3654 * t3915 - t3957;
t3814 = t3661 * t3914;
t3851 = t3654 * t3987;
t4005 = t3613 * t3655;
t3873 = t3507 * t4005;
t3101 = (t3511 * t3851 + t3480) * t4011 + (t3814 + t3873) * t4223 + t3701 * t3618;
t3823 = t3661 * t3919;
t3879 = (pkin(3) * t3823 + t3655 * t4247) * t4012;
t3179 = (t3383 - 0.2e1 * t3879) * t3609;
t3802 = ((pkin(3) * t3987 + t3618 * t4047) * t4019 + t3465 * t3991) * t4214 + (t3543 * t3851 - t4221) * t3921 + (-t3661 * t3829 + t3548) * t3654 + t3512;
t2993 = 0.1e1 / (t3101 * t3660 + t3179 + t3802);
t2831 = (-t2925 * t3216 - t2926 * t3215) * t2993;
t4032 = t3574 * t3584;
t3231 = t3403 * t4032 + t3409 * t3562;
t3232 = -t3403 * t3562 + t3409 * t4032;
t3063 = (-t3231 * t3655 + t3232 * t3969) * t3617 - t3232 * t4012;
t3128 = t3231 * t3661 + t3232 * t3972;
t2978 = (-pkin(3) * t3063 - t3128 * t3549) * t3660 - t3654 * (-pkin(3) * t3128 + t3063 * t3549);
t4038 = t3562 * t3584;
t3239 = t3403 * t3574 + t3409 * t4038;
t3245 = t3403 * t4038 - t3409 * t3574;
t3064 = (t3239 * t3969 - t3245 * t3655) * t3617 - t3239 * t4012;
t3131 = t3239 * t3972 + t3245 * t3661;
t2981 = (pkin(3) * t3064 + t3131 * t3549) * t3660 + t3654 * (-pkin(3) * t3131 + t3064 * t3549);
t3539 = pkin(2) * t4005;
t3167 = t3436 + (t3539 + t3814) * t3614;
t3981 = t3617 * t3661;
t3857 = t3613 * t3981;
t3371 = t3614 * t3857 - t3837;
t3394 = t3655 * t3871;
t3441 = t3655 * t3771;
t3781 = t3655 * t3828;
t2999 = 0.1e1 / ((t3371 * t3918 + t3394) * t3609 + ((t3371 * t3511 + t3441) * t3654 - t3840 + pkin(3) * t3167) * t3660 + (t3167 * t3549 + t3548) * t3654 + (t3371 * t4224 - t3614 * t3781) * pkin(9));
t2933 = (-t2978 * t3215 - t2981 * t3216) * t2999;
t3261 = t3457 + t3701;
t3808 = t3654 * t3870;
t3311 = t3808 + t3848;
t3319 = t3543 * t3908 + t3519;
t3962 = t3654 * t3786 + pkin(3) * (pkin(2) * t3654 + t3549);
t4216 = pkin(3) * t3660;
t3014 = 0.1e1 / ((t3261 * t3660 + (t3609 * t3948 - t3603) * t3956 + t3962) * t3618 + ((t3311 * t3660 + (t3609 * t3849 + t3319) * t3549) * t3661 + (pkin(9) * t3465 + t3507 * t4216 + t3511 * t3609) * t4005) * t3614);
t3388 = t3654 * t4222 - t4055;
t3330 = t3660 * t3919 - t3388;
t3508 = t3534 + pkin(2);
t3468 = t3508 + t4216;
t3248 = -t3330 * t3661 + t3468 * t3655;
t4101 = (t3330 * t3655 + t3468 * t3661) * t3618;
t3029 = -t3231 * t3248 + t3232 * t4101;
t3032 = -t3239 * t4101 + t3245 * t3248;
t2957 = (-t3029 * t3215 - t3032 * t3216) * t3014;
t3764 = (t3530 * t3660 - t3531 * t3654) * t3613;
t3092 = (t3654 * t3660 * t4250 + t3769 - t4291) * t3603 + t3764 * t4249 + t4291 + (t3547 * t3654 + t3593) * t3660 + t3654 * t3947 + t3819;
t3795 = rSges(3,1) * t3660 - rSges(3,2) * t3654;
t3748 = t3795 * m(3);
t3188 = t3764 + t3617 * (pkin(2) * t3748 + t3518);
t4098 = ((-(rSges(3,1) * t3654 + rSges(3,2) * t3660) * t4239 + t3916) * t3655 + (t3748 + t3959) * t3661) * t3614;
t2741 = t2831 * t4098 + t2933 * t3092 + t2957 * t3188;
t3657 = sin(qJ(2,1));
t3663 = cos(qJ(2,1));
t3968 = t3618 * t3663;
t3426 = t3611 * t3968 + t3615 * t3657;
t3429 = -t3611 * t3657 + t3615 * t3968;
t3627 = legFrame(1,3);
t3557 = sin(t3627);
t3569 = cos(t3627);
t3651 = legFrame(1,2);
t3585 = sin(t3651);
t3591 = cos(t3651);
t3986 = t3614 * t3663;
t3156 = t3591 * t3986 + (t3426 * t3569 + t3429 * t3557) * t3585;
t3971 = t3618 * t3657;
t3432 = t3611 * t3663 + t3615 * t3971;
t3435 = -t3611 * t3971 + t3615 * t3663;
t3989 = t3614 * t3657;
t3157 = -t3591 * t3989 + (-t3432 * t3557 + t3435 * t3569) * t3585;
t3404 = t3557 * t3615 + t3569 * t3611;
t4091 = t3404 * t3614;
t3306 = -t3585 * t4091 + t3618 * t3591;
t3656 = sin(qJ(3,1));
t4013 = t3612 * t3656;
t3466 = pkin(2) * t4013 + t3917;
t4046 = t3543 * t3656;
t3039 = -(pkin(3) * t3156 + t3306 * t4046) * t4019 + t3157 * t3466;
t3295 = -t3426 * t3557 + t3429 * t3569;
t3909 = t3656 * t4246;
t3410 = -t3557 * t3611 + t3569 * t3615;
t4080 = t3410 * t3614;
t3042 = t3295 * t3830 + (t3511 * t3909 + t3957) * t4080;
t3842 = t3656 * t3958;
t3923 = pkin(3) * t4080;
t3048 = t3410 * t3842 - (t3295 * t4046 + t3923) * t4275;
t3075 = t3156 * t3820 + t3157 * t3511;
t3298 = t3432 * t3569 + t3435 * t3557;
t4058 = t3511 * t3656;
t3536 = pkin(9) * t4013;
t3509 = 0.2e1 * t3536 + pkin(2);
t4226 = pkin(3) * t3509;
t3081 = (t3295 * t4058 - t3543 * t3923) * t3617 + t3298 * t4226;
t3990 = t3614 * t3656;
t3862 = t3543 * t3990;
t3084 = (pkin(3) * t3295 - t3410 * t3862) * t4019 + t3298 * t3466;
t3633 = legFrame(1,1);
t3563 = sin(t3633);
t3575 = cos(t3633);
t3741 = -(t3156 * t4058 + t3306 * t4225) * t3617 + t3157 * t4226;
t4251 = -0.2e1 * t3295 * t3838 - 0.2e1 * t3298 * t4247;
t4232 = pkin(3) * t3306;
t4268 = ((t3156 * t4046 - t4232) * t3603 + t4232) * t3549 - (-pkin(2) * t4232 + t3156 * t3922) * t3656;
t3144 = t3156 * t4225;
t4269 = t3306 * (t3957 - t4058) + (t3306 * t4058 - t3144) * t3603 + t3144;
t2927 = ((t3075 * t3563 + t3575 * t4251) * t3613 + (t3306 * t3563 + t3575 * t4080) * t3773) * t3610 + ((t3575 * t3081 + t3563 * t3741) * t3613 + t4269 * t3563 + t3042 * t3575) * t3662 + (t3039 * t3563 + t3084 * t3575) * t4214 - t4268 * t3563 - t3048 * t3575;
t2928 = ((-t3075 * t3575 + t3563 * t4251) * t3613 + (t3306 * t3575 - t3563 * t4080) * t3772) * t3610 + ((t3563 * t3081 - t3575 * t3741) * t3613 - t4269 * t3575 + t3563 * t3042) * t3662 - (t3039 * t3575 - t3084 * t3563) * t4214 + t4268 * t3575 - t3563 * t3048;
t3700 = -t3656 * t3915 - t3957;
t3813 = t3663 * t3914;
t3850 = t3656 * t3986;
t4004 = t3613 * t3657;
t3872 = t3509 * t4004;
t3102 = (t3511 * t3850 + t3480) * t4011 + (t3813 + t3872) * t4223 + t3700 * t3618;
t3822 = t3663 * t3919;
t3878 = (pkin(3) * t3822 + t3657 * t4247) * t4012;
t3180 = (t3383 - 0.2e1 * t3878) * t3610;
t3801 = ((pkin(3) * t3986 + t3618 * t4046) * t4019 + t3466 * t3989) * t4214 + (t3543 * t3850 - t4221) * t3921 + (-t3663 * t3829 + t3548) * t3656 + t3512;
t2994 = 0.1e1 / (t3102 * t3662 + t3180 + t3801);
t2832 = (-t2927 * t3220 - t2928 * t3219) * t2994;
t4031 = t3575 * t3585;
t3233 = t3404 * t4031 + t3410 * t3563;
t3234 = -t3404 * t3563 + t3410 * t4031;
t3065 = (-t3233 * t3657 + t3234 * t3968) * t3617 - t3234 * t4012;
t3129 = t3233 * t3663 + t3234 * t3971;
t2979 = (-pkin(3) * t3065 - t3129 * t3549) * t3662 - t3656 * (-pkin(3) * t3129 + t3065 * t3549);
t4037 = t3563 * t3585;
t3240 = t3404 * t3575 + t3410 * t4037;
t3246 = t3404 * t4037 - t3410 * t3575;
t3066 = (t3240 * t3968 - t3246 * t3657) * t3617 - t3240 * t4012;
t3132 = t3240 * t3971 + t3246 * t3663;
t2982 = (pkin(3) * t3066 + t3132 * t3549) * t3662 + t3656 * (-pkin(3) * t3132 + t3066 * t3549);
t3540 = pkin(2) * t4004;
t3168 = t3436 + (t3540 + t3813) * t3614;
t3980 = t3617 * t3663;
t3856 = t3613 * t3980;
t3372 = t3614 * t3856 - t3837;
t3395 = t3657 * t3871;
t3442 = t3657 * t3771;
t3780 = t3657 * t3828;
t3000 = 0.1e1 / ((t3372 * t3918 + t3395) * t3610 + ((t3372 * t3511 + t3442) * t3656 - t3840 + pkin(3) * t3168) * t3662 + (t3168 * t3549 + t3548) * t3656 + (t3372 * t4224 - t3614 * t3780) * pkin(9));
t2934 = (-t2979 * t3219 - t2982 * t3220) * t3000;
t3262 = t3457 + t3700;
t3807 = t3656 * t3870;
t3312 = t3807 + t3848;
t3320 = t3543 * t3909 + t3519;
t3961 = t3656 * t3786 + pkin(3) * (pkin(2) * t3656 + t3549);
t4215 = pkin(3) * t3662;
t3015 = 0.1e1 / ((t3262 * t3662 + (t3610 * t3948 - t3603) * t3956 + t3961) * t3618 + ((t3312 * t3662 + (t3610 * t3849 + t3320) * t3549) * t3663 + (pkin(9) * t3466 + t3509 * t4215 + t3511 * t3610) * t4004) * t3614);
t3389 = t3656 * t4222 - t4055;
t3331 = t3662 * t3919 - t3389;
t3510 = t3536 + pkin(2);
t3469 = t3510 + t4215;
t3249 = -t3331 * t3663 + t3469 * t3657;
t4100 = (t3331 * t3657 + t3469 * t3663) * t3618;
t3030 = -t3233 * t3249 + t3234 * t4100;
t3033 = -t3240 * t4100 + t3246 * t3249;
t2958 = (-t3030 * t3219 - t3033 * t3220) * t3015;
t3763 = (t3530 * t3662 - t3531 * t3656) * t3613;
t3093 = (t3656 * t3662 * t4250 + t3769 - t4290) * t3603 + t3763 * t4249 + t4290 + (t3547 * t3656 + t3593) * t3662 + t3656 * t3947 + t3819;
t3794 = rSges(3,1) * t3662 - rSges(3,2) * t3656;
t3747 = t3794 * m(3);
t3189 = t3763 + t3617 * (pkin(2) * t3747 + t3518);
t4097 = ((-(rSges(3,1) * t3656 + rSges(3,2) * t3662) * t4239 + t3916) * t3657 + (t3747 + t3959) * t3663) * t3614;
t2742 = t2832 * t4097 + t2934 * t3093 + t2958 * t3189;
t4010 = t3613 * t3618;
t4245 = m(3) * (((-rSges(3,1) * t3985 + rSges(3,2) * t3635) * t3640 + t3634 * (rSges(3,1) * t3635 + rSges(3,2) * t3985)) * t3614 - t3799 * t4010);
t2743 = -t2821 * t4245 + t2929 * t3184 + t2953 * t3518;
t4244 = m(3) * (((-rSges(3,1) * t3984 + rSges(3,2) * t3637) * t3642 + t3636 * (rSges(3,1) * t3637 + rSges(3,2) * t3984)) * t3614 - t3798 * t4010);
t2744 = -t2822 * t4244 + t2930 * t3185 + t2954 * t3518;
t4243 = m(3) * (((-rSges(3,1) * t3983 + rSges(3,2) * t3639) * t3644 + t3638 * (rSges(3,1) * t3639 + rSges(3,2) * t3983)) * t3614 - t3797 * t4010);
t2745 = -t2823 * t4243 + t2931 * t3186 + t2955 * t3518;
t3607 = m(1) + m(2) + m(3);
t2746 = t2821 * t3607 + t2929 * t4105 - t2953 * t4245;
t2747 = t2822 * t3607 + t2930 * t4104 - t2954 * t4244;
t2748 = t2823 * t3607 + t2931 * t4103 - t2955 * t4243;
t4242 = m(3) * (((-rSges(3,1) * t3982 + rSges(3,2) * t3653) * t3658 + t3652 * (rSges(3,1) * t3653 + rSges(3,2) * t3982)) * t3614 - t3796 * t4010);
t2749 = -t2830 * t4242 + t2932 * t3187 + t2956 * t3518;
t4241 = m(3) * (((-rSges(3,1) * t3981 + rSges(3,2) * t3655) * t3660 + t3654 * (rSges(3,1) * t3655 + rSges(3,2) * t3981)) * t3614 - t3795 * t4010);
t2750 = -t2831 * t4241 + t2933 * t3188 + t2957 * t3518;
t4240 = m(3) * (((-rSges(3,1) * t3980 + rSges(3,2) * t3657) * t3662 + t3656 * (rSges(3,1) * t3657 + rSges(3,2) * t3980)) * t3614 - t3794 * t4010);
t2751 = -t2832 * t4240 + t2934 * t3189 + t2958 * t3518;
t2752 = t2830 * t3607 + t2932 * t4099 - t2956 * t4242;
t2753 = t2831 * t3607 + t2933 * t4098 - t2957 * t4241;
t2754 = t2832 * t3607 + t2934 * t4097 - t2958 * t4240;
t3620 = t3671 ^ 2;
t3621 = t3672 ^ 2;
t3495 = m(4) * (t3620 + t3621) + Icges(4,3);
t4282 = t2737 * t2929 + t2738 * t2930 + t2739 * t2931 + t2740 * t2932 + t2741 * t2933 + t2742 * t2934 + t2743 * t2953 + t2746 * t2821 + t2747 * t2822 + t2748 * t2823 + t2752 * t2830 + t2753 * t2831 + t2754 * t2832 + t2744 * t2954 + t2745 * t2955 + t2749 * t2956 + t2750 * t2957 + t2751 * t2958 + t3495;
t4213 = pkin(9) * t3614;
t4210 = t2917 * t2989;
t4209 = t2918 * t2989;
t4208 = t2919 * t2990;
t4207 = t2920 * t2990;
t4206 = t2921 * t2991;
t4205 = t2922 * t2991;
t4204 = t2923 * t2992;
t4203 = t2924 * t2992;
t4202 = t2925 * t2993;
t4201 = t2926 * t2993;
t4200 = t2927 * t2994;
t4199 = t2928 * t2994;
t3263 = -t3399 * t3979 + t3405 * t3641;
t3269 = t3399 * t3976 + t3405 * t3635;
t3699 = -t3399 * t3511 * t4003 - t3269 * t4225;
t3934 = pkin(3) * t4096;
t3717 = t3269 * t4054 + t3934;
t3740 = t3614 * t3772;
t3841 = pkin(2) * t3920;
t2947 = (((t3263 * t3511 + t3269 * t3820) * t3613 + t3399 * t3740) * t3586 - 0.2e1 * (-t3759 + t3883) * t3580) * t3604 + ((((-t3269 * t4063 + t3543 * t3934) * t3617 + t3263 * t4231) * t3613 + t3699 * t3603 - t3399 * t3841 - t3699) * t3586 + t3088 * t3580) * t3640 + (t3399 * t3847 + (t3263 * t3458 * t3613 + (-(pkin(3) * t3269 - t3399 * t3867) * t4011 - t3717 * t3603 + t3717) * t3612) * pkin(9)) * t3586 + t3580 * t3806;
t4198 = t2947 * t2989;
t3265 = -t3400 * t3978 + t3406 * t3643;
t3271 = t3400 * t3975 + t3406 * t3637;
t3698 = -t3400 * t3511 * t4001 - t3271 * t4225;
t3933 = pkin(3) * t4095;
t3716 = t3271 * t4053 + t3933;
t2948 = (((t3265 * t3511 + t3271 * t3820) * t3613 + t3400 * t3740) * t3587 - 0.2e1 * (-t3759 + t3882) * t3581) * t3605 + ((((-t3271 * t4062 + t3543 * t3933) * t3617 + t3265 * t4230) * t3613 + t3698 * t3603 - t3400 * t3841 - t3698) * t3587 + t3089 * t3581) * t3642 + (t3400 * t3846 + (t3265 * t3459 * t3613 + (-(pkin(3) * t3271 - t3400 * t3866) * t4011 - t3716 * t3603 + t3716) * t3612) * pkin(9)) * t3587 + t3581 * t3805;
t4197 = t2948 * t2990;
t3267 = -t3401 * t3977 + t3407 * t3645;
t3273 = t3401 * t3974 + t3407 * t3639;
t3697 = -t3401 * t3511 * t3999 - t3273 * t4225;
t3932 = pkin(3) * t4094;
t3715 = t3273 * t4052 + t3932;
t2949 = (((t3267 * t3511 + t3273 * t3820) * t3613 + t3401 * t3740) * t3588 - 0.2e1 * (-t3759 + t3881) * t3582) * t3606 + ((((-t3273 * t4061 + t3543 * t3932) * t3617 + t3267 * t4229) * t3613 + t3697 * t3603 - t3401 * t3841 - t3697) * t3588 + t3090 * t3582) * t3644 + (t3401 * t3845 + (t3267 * t3460 * t3613 + (-(pkin(3) * t3273 - t3401 * t3865) * t4011 - t3715 * t3603 + t3715) * t3612) * pkin(9)) * t3588 + t3582 * t3804;
t4196 = t2949 * t2991;
t3281 = -t3402 * t3973 + t3408 * t3659;
t3287 = t3402 * t3970 + t3408 * t3653;
t3696 = -t3402 * t3511 * t3994 - t3287 * t4225;
t3931 = pkin(3) * t4093;
t3711 = t3287 * t4048 + t3931;
t2950 = (((t3281 * t3511 + t3287 * t3820) * t3613 + t3402 * t3740) * t3589 - 0.2e1 * (-t3759 + t3880) * t3583) * t3608 + ((((-t3287 * t4060 + t3543 * t3931) * t3617 + t3281 * t4228) * t3613 + t3696 * t3603 - t3402 * t3841 - t3696) * t3589 + t3100 * t3583) * t3658 + (t3402 * t3844 + (t3281 * t3464 * t3613 + (-(pkin(3) * t3287 - t3402 * t3864) * t4011 - t3711 * t3603 + t3711) * t3612) * pkin(9)) * t3589 + t3583 * t3803;
t4195 = t2950 * t2992;
t3283 = -t3403 * t3972 + t3409 * t3661;
t3289 = t3403 * t3969 + t3409 * t3655;
t3695 = -t3403 * t3511 * t3992 - t3289 * t4225;
t3930 = pkin(3) * t4092;
t3710 = t3289 * t4047 + t3930;
t2951 = (((t3283 * t3511 + t3289 * t3820) * t3613 + t3403 * t3740) * t3590 - 0.2e1 * (-t3759 + t3879) * t3584) * t3609 + ((((-t3289 * t4059 + t3543 * t3930) * t3617 + t3283 * t4227) * t3613 + t3695 * t3603 - t3403 * t3841 - t3695) * t3590 + t3101 * t3584) * t3660 + (t3403 * t3843 + (t3283 * t3465 * t3613 + (-(pkin(3) * t3289 - t3403 * t3863) * t4011 - t3710 * t3603 + t3710) * t3612) * pkin(9)) * t3590 + t3584 * t3802;
t4194 = t2951 * t2993;
t3285 = -t3404 * t3971 + t3410 * t3663;
t3291 = t3404 * t3968 + t3410 * t3657;
t3694 = -t3404 * t3511 * t3990 - t3291 * t4225;
t3929 = pkin(3) * t4091;
t3709 = t3291 * t4046 + t3929;
t2952 = (((t3285 * t3511 + t3291 * t3820) * t3613 + t3404 * t3740) * t3591 - 0.2e1 * (-t3759 + t3878) * t3585) * t3610 + ((((-t3291 * t4058 + t3543 * t3929) * t3617 + t3285 * t4226) * t3613 + t3694 * t3603 - t3404 * t3841 - t3694) * t3591 + t3102 * t3585) * t3662 + (t3404 * t3842 + (t3285 * t3466 * t3613 + (-(pkin(3) * t3291 - t3404 * t3862) * t4011 - t3709 * t3603 + t3709) * t3612) * pkin(9)) * t3591 + t3585 * t3801;
t4193 = t2952 * t2994;
t4192 = t2971 * t2995;
t4191 = t2972 * t2996;
t4190 = t2973 * t2997;
t4189 = t2974 * t2995;
t4188 = t2975 * t2996;
t4187 = t2976 * t2997;
t4186 = t2977 * t2998;
t4185 = t2978 * t2999;
t4184 = t2979 * t3000;
t4183 = t2980 * t2998;
t4182 = t2981 * t2999;
t4181 = t2982 * t3000;
t3264 = t3399 * t3641 + t3405 * t3979;
t3821 = t3603 * t3520;
t3719 = (t3520 - t3821) * pkin(9);
t3727 = (-t3399 * t3635 + t3405 * t3976) * t3617 - t3405 * t4012;
t3770 = pkin(3) * t3436 - t3840;
t3787 = t3511 * t3837;
t4051 = t3543 * t3641;
t3793 = t3603 * t4051 + t3527 - t4051;
t3960 = 0.2e1 * pkin(9) * t3821 - 0.2e1 * t3512;
t3967 = t3618 * t3786 + t3548;
t4180 = 0.1e1 / ((t3384 + t3960) * t3604 + ((t3437 - t3787) * t3634 + t3770) * t3640 + t3967 * t3634 + t3719 + ((pkin(3) * t3793 + t3641 * t3812) * t3640 + (-t3785 + (t3793 * t3634 + (-0.2e1 * t3604 + 0.1e1) * pkin(3) * t3861) * t3612) * pkin(9)) * t3614) * ((pkin(3) * t3727 + t3264 * t3549) * t3640 + t3634 * (-pkin(3) * t3264 + t3549 * t3727));
t3266 = t3400 * t3643 + t3406 * t3978;
t3726 = (-t3400 * t3637 + t3406 * t3975) * t3617 - t3406 * t4012;
t4050 = t3543 * t3643;
t3792 = t3603 * t4050 + t3528 - t4050;
t4179 = 0.1e1 / ((t3385 + t3960) * t3605 + ((t3438 - t3787) * t3636 + t3770) * t3642 + t3967 * t3636 + t3719 + ((pkin(3) * t3792 + t3643 * t3811) * t3642 + (-t3784 + (t3792 * t3636 + (-0.2e1 * t3605 + 0.1e1) * pkin(3) * t3860) * t3612) * pkin(9)) * t3614) * ((pkin(3) * t3726 + t3266 * t3549) * t3642 + t3636 * (-pkin(3) * t3266 + t3549 * t3726));
t3268 = t3401 * t3645 + t3407 * t3977;
t3725 = (-t3401 * t3639 + t3407 * t3974) * t3617 - t3407 * t4012;
t4049 = t3543 * t3645;
t3791 = t3603 * t4049 + t3529 - t4049;
t4178 = 0.1e1 / ((t3386 + t3960) * t3606 + ((t3439 - t3787) * t3638 + t3770) * t3644 + t3967 * t3638 + t3719 + ((pkin(3) * t3791 + t3645 * t3810) * t3644 + (-t3783 + (t3791 * t3638 + (-0.2e1 * t3606 + 0.1e1) * pkin(3) * t3859) * t3612) * pkin(9)) * t3614) * ((pkin(3) * t3725 + t3268 * t3549) * t3644 + t3638 * (-pkin(3) * t3268 + t3549 * t3725));
t3282 = t3402 * t3659 + t3408 * t3973;
t3724 = (-t3402 * t3653 + t3408 * t3970) * t3617 - t3408 * t4012;
t4045 = t3543 * t3659;
t3790 = t3603 * t4045 + t3538 - t4045;
t4177 = 0.1e1 / ((t3393 + t3960) * t3608 + ((t3440 - t3787) * t3652 + t3770) * t3658 + t3967 * t3652 + t3719 + ((pkin(3) * t3790 + t3659 * t3809) * t3658 + (-t3782 + (t3790 * t3652 + (-0.2e1 * t3608 + 0.1e1) * pkin(3) * t3858) * t3612) * pkin(9)) * t3614) * ((pkin(3) * t3724 + t3282 * t3549) * t3658 + t3652 * (-pkin(3) * t3282 + t3549 * t3724));
t3284 = t3403 * t3661 + t3409 * t3972;
t3723 = (-t3403 * t3655 + t3409 * t3969) * t3617 - t3409 * t4012;
t4044 = t3543 * t3661;
t3789 = t3603 * t4044 + t3539 - t4044;
t4176 = 0.1e1 / ((t3394 + t3960) * t3609 + ((t3441 - t3787) * t3654 + t3770) * t3660 + t3967 * t3654 + t3719 + ((pkin(3) * t3789 + t3661 * t3808) * t3660 + (-t3781 + (t3789 * t3654 + (-0.2e1 * t3609 + 0.1e1) * pkin(3) * t3857) * t3612) * pkin(9)) * t3614) * ((pkin(3) * t3723 + t3284 * t3549) * t3660 + t3654 * (-pkin(3) * t3284 + t3549 * t3723));
t3286 = t3404 * t3663 + t3410 * t3971;
t3722 = (-t3404 * t3657 + t3410 * t3968) * t3617 - t3410 * t4012;
t4043 = t3543 * t3663;
t3788 = t3603 * t4043 + t3540 - t4043;
t4175 = 0.1e1 / ((t3395 + t3960) * t3610 + ((t3442 - t3787) * t3656 + t3770) * t3662 + t3967 * t3656 + t3719 + ((pkin(3) * t3788 + t3663 * t3807) * t3662 + (-t3780 + (t3788 * t3656 + (-0.2e1 * t3610 + 0.1e1) * pkin(3) * t3856) * t3612) * pkin(9)) * t3614) * ((pkin(3) * t3722 + t3286 * t3549) * t3662 + t3656 * (-pkin(3) * t3286 + t3549 * t3722));
t4174 = t2989 * t3607;
t4173 = t2990 * t3607;
t4172 = t2991 * t3607;
t4171 = t2992 * t3607;
t4170 = t2993 * t3607;
t4169 = t2994 * t3607;
t4168 = t2995 * t3085;
t4167 = t2995 * t3184;
t3332 = t3595 * t3673 - t3598 * t4281;
t4166 = t2995 * t3332;
t4165 = t2996 * t3086;
t4164 = t2996 * t3185;
t3333 = t3595 * t3674 - t3598 * t4280;
t4163 = t2996 * t3333;
t4162 = t2997 * t3087;
t4161 = t2997 * t3186;
t3334 = t3595 * t3675 - t3598 * t4279;
t4160 = t2997 * t3334;
t4159 = t2998 * t3091;
t4158 = t2998 * t3187;
t3335 = t3595 * t3676 - t3598 * t4278;
t4157 = t2998 * t3335;
t4156 = t2999 * t3092;
t4155 = t2999 * t3188;
t3336 = t3595 * t3677 - t3598 * t4277;
t4154 = t2999 * t3336;
t4153 = t3000 * t3093;
t4152 = t3000 * t3189;
t3337 = t3595 * t3678 - t3598 * t4276;
t4151 = t3000 * t3337;
t3839 = pkin(3) * t3921;
t4089 = t3405 * t3618;
t4150 = 0.1e1 / (t3175 + (t3257 * t3618 + t3614 * (pkin(3) * t3877 + t3307 * t3641)) * t3640 + (-t3839 + t3966) * t3618 + (t3315 * t3612 * t3641 + t3458 * t4009) * t4213) * (((pkin(3) * t3641 + t3635 * t3919) * t4089 + t3399 * (-pkin(3) * t3635 + t3827)) * t3640 + (-t3380 * t3635 + t3500 * t3641) * t4089 - t3399 * (t3380 * t3641 + t3500 * t3635));
t4087 = t3406 * t3618;
t4149 = 0.1e1 / (t3176 + (t3258 * t3618 + t3614 * (pkin(3) * t3876 + t3308 * t3643)) * t3642 + (-t3839 + t3965) * t3618 + (t3316 * t3612 * t3643 + t3459 * t4008) * t4213) * (((pkin(3) * t3643 + t3637 * t3919) * t4087 + t3400 * (-pkin(3) * t3637 + t3826)) * t3642 + (-t3381 * t3637 + t3502 * t3643) * t4087 - t3400 * (t3381 * t3643 + t3502 * t3637));
t4085 = t3407 * t3618;
t4148 = 0.1e1 / (t3177 + (t3259 * t3618 + t3614 * (pkin(3) * t3875 + t3309 * t3645)) * t3644 + (-t3839 + t3964) * t3618 + (t3317 * t3612 * t3645 + t3460 * t4007) * t4213) * (((pkin(3) * t3645 + t3639 * t3919) * t4085 + t3401 * (-pkin(3) * t3639 + t3825)) * t3644 + (-t3382 * t3639 + t3504 * t3645) * t4085 - t3401 * (t3382 * t3645 + t3504 * t3639));
t4083 = t3408 * t3618;
t4147 = 0.1e1 / (t3178 + (t3260 * t3618 + t3614 * (pkin(3) * t3874 + t3310 * t3659)) * t3658 + (-t3839 + t3963) * t3618 + (t3318 * t3612 * t3659 + t3464 * t4006) * t4213) * (((pkin(3) * t3659 + t3653 * t3919) * t4083 + t3402 * (-pkin(3) * t3653 + t3824)) * t3658 + (-t3387 * t3653 + t3506 * t3659) * t4083 - t3402 * (t3387 * t3659 + t3506 * t3653));
t4081 = t3409 * t3618;
t4146 = 0.1e1 / (t3179 + (t3261 * t3618 + t3614 * (pkin(3) * t3873 + t3311 * t3661)) * t3660 + (-t3839 + t3962) * t3618 + (t3319 * t3612 * t3661 + t3465 * t4005) * t4213) * (((pkin(3) * t3661 + t3655 * t3919) * t4081 + t3403 * (-pkin(3) * t3655 + t3823)) * t3660 + (-t3388 * t3655 + t3508 * t3661) * t4081 - t3403 * (t3388 * t3661 + t3508 * t3655));
t4079 = t3410 * t3618;
t4145 = 0.1e1 / (t3180 + (t3262 * t3618 + t3614 * (pkin(3) * t3872 + t3312 * t3663)) * t3662 + (-t3839 + t3961) * t3618 + (t3320 * t3612 * t3663 + t3466 * t4004) * t4213) * (((pkin(3) * t3663 + t3657 * t3919) * t4079 + t3404 * (-pkin(3) * t3657 + t3822)) * t3662 + (-t3389 * t3657 + t3510 * t3663) * t4079 - t3404 * (t3389 * t3663 + t3510 * t3657));
t4144 = t3007 * t3019;
t4143 = t3007 * t3022;
t4142 = t3007 * t3184;
t4141 = t3007 * t3332;
t4140 = t3007 * t3518;
t4139 = t3008 * t3020;
t4138 = t3008 * t3023;
t4137 = t3008 * t3185;
t4136 = t3008 * t3333;
t4135 = t3008 * t3518;
t4134 = t3009 * t3021;
t4133 = t3009 * t3024;
t4132 = t3009 * t3186;
t4131 = t3009 * t3334;
t4130 = t3009 * t3518;
t4129 = t3013 * t3028;
t4128 = t3013 * t3031;
t4127 = t3013 * t3187;
t4126 = t3013 * t3335;
t4125 = t3013 * t3518;
t4124 = t3014 * t3029;
t4123 = t3014 * t3032;
t4122 = t3014 * t3188;
t4121 = t3014 * t3336;
t4120 = t3014 * t3518;
t4119 = t3015 * t3030;
t4118 = t3015 * t3033;
t4117 = t3015 * t3189;
t4116 = t3015 * t3337;
t4115 = t3015 * t3518;
t4076 = t3444 * t3599;
t4057 = t3516 * t3594;
t4056 = t3517 * t3595;
t4029 = t3594 * t3597;
t4028 = t3595 * t3596;
t4027 = t3595 * t3599;
t4020 = t3599 * t3517;
t3619 = t3670 ^ 2;
t3955 = (t3619 - t3620) * m(4) + Icges(4,2) - Icges(4,3);
t3946 = t2989 * t4245;
t3945 = t2990 * t4244;
t3944 = t2991 * t4243;
t3943 = t2992 * t4242;
t3942 = t2993 * t4241;
t3941 = t2994 * t4240;
t3940 = t3007 * t4245;
t3939 = t3008 * t4244;
t3938 = t3009 * t4243;
t3937 = t3013 * t4242;
t3936 = t3014 * t4241;
t3935 = t3015 * t4240;
t3907 = t3586 * t4180;
t3906 = t3587 * t4179;
t3905 = t3588 * t4178;
t3904 = t3589 * t4177;
t3903 = t3590 * t4176;
t3902 = t3591 * t4175;
t3901 = t2989 * t4105;
t3900 = t2990 * t4104;
t3899 = t2991 * t4103;
t3898 = t2992 * t4099;
t3897 = t2993 * t4098;
t3896 = t2994 * t4097;
t3895 = t2995 * t4105;
t3894 = t2996 * t4104;
t3893 = t2997 * t4103;
t3892 = t2998 * t4099;
t3891 = t2999 * t4098;
t3890 = t3000 * t4097;
t3889 = t3586 * t4150;
t3888 = t3587 * t4149;
t3887 = t3588 * t4148;
t3886 = t3589 * t4147;
t3885 = t3590 * t4146;
t3884 = t3591 * t4145;
t3869 = t3517 * t4029;
t3761 = t3515 * t3597 + t4057;
t2851 = (t2917 * t3332 + t2947 * t3199) * t2989;
t2853 = (t2919 * t3333 + t2948 * t3203) * t2990;
t2855 = (t2921 * t3334 + t2949 * t3207) * t2991;
t2863 = (t2923 * t3335 + t2950 * t3211) * t2992;
t2865 = (t2925 * t3336 + t2951 * t3215) * t2993;
t2867 = (t2927 * t3337 + t2952 * t3219) * t2994;
t2935 = t2974 * t4166 + t3199 * t3907;
t2937 = t2975 * t4163 + t3203 * t3906;
t2939 = t2976 * t4160 + t3207 * t3905;
t2941 = t2980 * t4157 + t3211 * t3904;
t2943 = t2981 * t4154 + t3215 * t3903;
t2945 = t2982 * t4151 + t3219 * t3902;
t2959 = t3022 * t4141 - t3199 * t3889;
t2961 = t3023 * t4136 - t3203 * t3888;
t2963 = t3024 * t4131 - t3207 * t3887;
t2965 = t3031 * t4126 - t3211 * t3886;
t2967 = t3032 * t4121 - t3215 * t3885;
t2969 = t3033 * t4116 - t3219 * t3884;
t3739 = t2737 * t2935 + t2738 * t2937 + t2739 * t2939 + t2740 * t2941 + t2741 * t2943 + t2743 * t2959 + t2744 * t2961 + t2745 * t2963 + t2746 * t2851 + t2747 * t2853 + t2748 * t2855 + t2749 * t2965 + t2750 * t2967 + t2752 * t2863 + t2753 * t2865 + t2742 * t2945 + t2751 * t2969 + t2754 * t2867;
t2852 = (-t2918 * t3332 + t2947 * t3200) * t2989;
t2854 = (-t2920 * t3333 + t2948 * t3204) * t2990;
t2856 = (-t2922 * t3334 + t2949 * t3208) * t2991;
t2864 = (-t2924 * t3335 + t2950 * t3212) * t2992;
t2866 = (-t2926 * t3336 + t2951 * t3216) * t2993;
t2868 = (-t2928 * t3337 + t2952 * t3220) * t2994;
t2936 = -t2971 * t4166 + t3200 * t3907;
t2938 = -t2972 * t4163 + t3204 * t3906;
t2940 = -t2973 * t4160 + t3208 * t3905;
t2942 = -t2977 * t4157 + t3212 * t3904;
t2944 = -t2978 * t4154 + t3216 * t3903;
t2946 = -t2979 * t4151 + t3220 * t3902;
t2960 = -t3019 * t4141 - t3200 * t3889;
t2962 = -t3020 * t4136 - t3204 * t3888;
t2964 = -t3021 * t4131 - t3208 * t3887;
t2966 = -t3028 * t4126 - t3212 * t3886;
t2968 = -t3029 * t4121 - t3216 * t3885;
t2970 = -t3030 * t4116 - t3220 * t3884;
t3738 = t2737 * t2936 + t2738 * t2938 + t2739 * t2940 + t2740 * t2942 + t2741 * t2944 + t2743 * t2960 + t2744 * t2962 + t2745 * t2964 + t2746 * t2852 + t2747 * t2854 + t2748 * t2856 + t2749 * t2966 + t2750 * t2968 + t2752 * t2864 + t2753 * t2866 + t2742 * t2946 + t2751 * t2970 + t2754 * t2868;
t2773 = t2851 * t4105 + t2935 * t3085 + t2959 * t3184;
t2775 = t2853 * t4104 + t2937 * t3086 + t2961 * t3185;
t2777 = t2855 * t4103 + t2939 * t3087 + t2963 * t3186;
t2779 = t2863 * t4099 + t2941 * t3091 + t2965 * t3187;
t2781 = t2865 * t4098 + t2943 * t3092 + t2967 * t3188;
t2783 = t2867 * t4097 + t2945 * t3093 + t2969 * t3189;
t2785 = -t2851 * t4245 + t2935 * t3184 + t2959 * t3518;
t2787 = -t2853 * t4244 + t2937 * t3185 + t2961 * t3518;
t2789 = -t2855 * t4243 + t2939 * t3186 + t2963 * t3518;
t2791 = t2851 * t3607 + t2935 * t4105 - t2959 * t4245;
t2793 = t2853 * t3607 + t2937 * t4104 - t2961 * t4244;
t2795 = t2855 * t3607 + t2939 * t4103 - t2963 * t4243;
t2797 = -t2863 * t4242 + t2941 * t3187 + t2965 * t3518;
t2799 = -t2865 * t4241 + t2943 * t3188 + t2967 * t3518;
t2801 = -t2867 * t4240 + t2945 * t3189 + t2969 * t3518;
t2803 = t2863 * t3607 + t2941 * t4099 - t2965 * t4242;
t2805 = t2865 * t3607 + t2943 * t4098 - t2967 * t4241;
t2807 = t2867 * t3607 + t2945 * t4097 - t2969 * t4240;
t3737 = t2773 * t2935 + t2775 * t2937 + t2777 * t2939 + t2779 * t2941 + t2781 * t2943 + t2785 * t2959 + t2787 * t2961 + t2789 * t2963 + t2791 * t2851 + t2793 * t2853 + t2795 * t2855 + t2797 * t2965 + t2799 * t2967 + t2803 * t2863 + t2805 * t2865 + t2783 * t2945 + t2801 * t2969 + t2807 * t2867;
t3736 = -t2773 * t2936 - t2775 * t2938 - t2777 * t2940 - t2779 * t2942 - t2781 * t2944 - t2785 * t2960 - t2787 * t2962 - t2789 * t2964 - t2791 * t2852 - t2793 * t2854 - t2795 * t2856 - t2797 * t2966 - t2799 * t2968 - t2803 * t2864 - t2805 * t2866 - t2783 * t2946 - t2801 * t2970 - t2807 * t2868;
t2774 = t2852 * t4105 + t2936 * t3085 + t2960 * t3184;
t2776 = t2854 * t4104 + t2938 * t3086 + t2962 * t3185;
t2778 = t2856 * t4103 + t2940 * t3087 + t2964 * t3186;
t2780 = t2864 * t4099 + t2942 * t3091 + t2966 * t3187;
t2782 = t2866 * t4098 + t2944 * t3092 + t2968 * t3188;
t2784 = t2868 * t4097 + t2946 * t3093 + t2970 * t3189;
t2786 = -t2852 * t4245 + t2936 * t3184 + t2960 * t3518;
t2788 = -t2854 * t4244 + t2938 * t3185 + t2962 * t3518;
t2790 = -t2856 * t4243 + t2940 * t3186 + t2964 * t3518;
t2792 = t2852 * t3607 + t2936 * t4105 - t2960 * t4245;
t2794 = t2854 * t3607 + t2938 * t4104 - t2962 * t4244;
t2796 = t2856 * t3607 + t2940 * t4103 - t2964 * t4243;
t2798 = -t2864 * t4242 + t2942 * t3187 + t2966 * t3518;
t2800 = -t2866 * t4241 + t2944 * t3188 + t2968 * t3518;
t2802 = -t2868 * t4240 + t2946 * t3189 + t2970 * t3518;
t2804 = t2864 * t3607 + t2942 * t4099 - t2966 * t4242;
t2806 = t2866 * t3607 + t2944 * t4098 - t2968 * t4241;
t2808 = t2868 * t3607 + t2946 * t4097 - t2970 * t4240;
t3735 = t2774 * t2935 + t2776 * t2937 + t2778 * t2939 + t2780 * t2941 + t2782 * t2943 + t2786 * t2959 + t2788 * t2961 + t2790 * t2963 + t2792 * t2851 + t2794 * t2853 + t2796 * t2855 + t2798 * t2965 + t2800 * t2967 + t2804 * t2863 + t2806 * t2865 + t2784 * t2945 + t2802 * t2969 + t2808 * t2867;
t3734 = -t2774 * t2936 - t2776 * t2938 - t2778 * t2940 - t2780 * t2942 - t2782 * t2944 - t2786 * t2960 - t2788 * t2962 - t2790 * t2964 - t2792 * t2852 - t2794 * t2854 - t2796 * t2856 - t2798 * t2966 - t2800 * t2968 - t2804 * t2864 - t2806 * t2866 - t2784 * t2946 - t2802 * t2970 - t2808 * t2868;
t2845 = t2917 * t3901 + t2974 * t4168 + t3022 * t4142;
t2847 = t2919 * t3900 + t2975 * t4165 + t3023 * t4137;
t2849 = t2921 * t3899 + t2976 * t4162 + t3024 * t4132;
t2857 = t2923 * t3898 + t2980 * t4159 + t3031 * t4127;
t2859 = t2925 * t3897 + t2981 * t4156 + t3032 * t4122;
t2861 = t2927 * t3896 + t2982 * t4153 + t3033 * t4117;
t2869 = -t2917 * t3946 + t2974 * t4167 + t3022 * t4140;
t2871 = -t2919 * t3945 + t2975 * t4164 + t3023 * t4135;
t2873 = -t2921 * t3944 + t2976 * t4161 + t3024 * t4130;
t2875 = t2917 * t4174 + t2974 * t3895 - t3022 * t3940;
t2877 = t2919 * t4173 + t2975 * t3894 - t3023 * t3939;
t2879 = t2921 * t4172 + t2976 * t3893 - t3024 * t3938;
t2881 = -t2923 * t3943 + t2980 * t4158 + t3031 * t4125;
t2883 = -t2925 * t3942 + t2981 * t4155 + t3032 * t4120;
t2885 = -t2927 * t3941 + t2982 * t4152 + t3033 * t4115;
t2887 = t2923 * t4171 + t2980 * t3892 - t3031 * t3937;
t2889 = t2925 * t4170 + t2981 * t3891 - t3032 * t3936;
t2891 = t2927 * t4169 + t2982 * t3890 - t3033 * t3935;
t3733 = t2845 * t2935 + t2847 * t2937 + t2849 * t2939 + t2851 * t2875 + t2853 * t2877 + t2855 * t2879 + t2857 * t2941 + t2859 * t2943 + t2863 * t2887 + t2865 * t2889 + t2869 * t2959 + t2871 * t2961 + t2873 * t2963 + t2881 * t2965 + t2883 * t2967 + t2861 * t2945 + t2867 * t2891 + t2885 * t2969;
t3732 = t2845 * t2936 + t2847 * t2938 + t2849 * t2940 + t2852 * t2875 + t2854 * t2877 + t2856 * t2879 + t2857 * t2942 + t2859 * t2944 + t2864 * t2887 + t2866 * t2889 + t2869 * t2960 + t2871 * t2962 + t2873 * t2964 + t2881 * t2966 + t2883 * t2968 + t2861 * t2946 + t2868 * t2891 + t2885 * t2970;
t2846 = t2918 * t3901 + t2971 * t4168 + t3019 * t4142;
t2848 = t2920 * t3900 + t2972 * t4165 + t3020 * t4137;
t2850 = t2922 * t3899 + t2973 * t4162 + t3021 * t4132;
t2858 = t2924 * t3898 + t2977 * t4159 + t3028 * t4127;
t2860 = t2926 * t3897 + t2978 * t4156 + t3029 * t4122;
t2862 = t2928 * t3896 + t2979 * t4153 + t3030 * t4117;
t2870 = -t2918 * t3946 + t2971 * t4167 + t3019 * t4140;
t2872 = -t2920 * t3945 + t2972 * t4164 + t3020 * t4135;
t2874 = -t2922 * t3944 + t2973 * t4161 + t3021 * t4130;
t2876 = t2918 * t4174 + t2971 * t3895 - t3019 * t3940;
t2878 = t2920 * t4173 + t2972 * t3894 - t3020 * t3939;
t2880 = t2922 * t4172 + t2973 * t3893 - t3021 * t3938;
t2882 = -t2924 * t3943 + t2977 * t4158 + t3028 * t4125;
t2884 = -t2926 * t3942 + t2978 * t4155 + t3029 * t4120;
t2886 = -t2928 * t3941 + t2979 * t4152 + t3030 * t4115;
t2888 = t2924 * t4171 + t2977 * t3892 - t3028 * t3937;
t2890 = t2926 * t4170 + t2978 * t3891 - t3029 * t3936;
t2892 = t2928 * t4169 + t2979 * t3890 - t3030 * t3935;
t3731 = t2846 * t2935 + t2848 * t2937 + t2850 * t2939 + t2851 * t2876 + t2853 * t2878 + t2855 * t2880 + t2858 * t2941 + t2860 * t2943 + t2863 * t2888 + t2865 * t2890 + t2870 * t2959 + t2872 * t2961 + t2874 * t2963 + t2882 * t2965 + t2884 * t2967 + t2862 * t2945 + t2867 * t2892 + t2886 * t2969;
t3730 = -t2846 * t2936 - t2848 * t2938 - t2850 * t2940 - t2852 * t2876 - t2854 * t2878 - t2856 * t2880 - t2858 * t2942 - t2860 * t2944 - t2864 * t2888 - t2866 * t2890 - t2870 * t2960 - t2872 * t2962 - t2874 * t2964 - t2882 * t2966 - t2884 * t2968 - t2862 * t2946 - t2868 * t2892 - t2886 * t2970;
t2899 = t2947 * t3901 + (t3085 * t4180 - t3184 * t4150) * t3586;
t2900 = t2948 * t3900 + (t3086 * t4179 - t3185 * t4149) * t3587;
t2901 = t2949 * t3899 + (t3087 * t4178 - t3186 * t4148) * t3588;
t2902 = t2950 * t3898 + (t3091 * t4177 - t3187 * t4147) * t3589;
t2903 = t2951 * t3897 + (t3092 * t4176 - t3188 * t4146) * t3590;
t2904 = t2952 * t3896 + (t3093 * t4175 - t3189 * t4145) * t3591;
t2905 = -t2947 * t3946 + (t3184 * t4180 - t3518 * t4150) * t3586;
t2906 = -t2948 * t3945 + (t3185 * t4179 - t3518 * t4149) * t3587;
t2907 = -t2949 * t3944 + (t3186 * t4178 - t3518 * t4148) * t3588;
t2908 = t2947 * t4174 + (t4105 * t4180 + t4150 * t4245) * t3586;
t2909 = t2948 * t4173 + (t4104 * t4179 + t4149 * t4244) * t3587;
t2910 = t2949 * t4172 + (t4103 * t4178 + t4148 * t4243) * t3588;
t2911 = -t2950 * t3943 + (t3187 * t4177 - t3518 * t4147) * t3589;
t2912 = -t2951 * t3942 + (t3188 * t4176 - t3518 * t4146) * t3590;
t2913 = -t2952 * t3941 + (t3189 * t4175 - t3518 * t4145) * t3591;
t2914 = t2950 * t4171 + (t4099 * t4177 + t4147 * t4242) * t3589;
t2915 = t2951 * t4170 + (t4098 * t4176 + t4146 * t4241) * t3590;
t2916 = t2952 * t4169 + (t4097 * t4175 + t4145 * t4240) * t3591;
t3729 = t2851 * t2908 + t2853 * t2909 + t2855 * t2910 + t2863 * t2914 + t2865 * t2915 + t2899 * t2935 + t2900 * t2937 + t2901 * t2939 + t2902 * t2941 + t2903 * t2943 + t2905 * t2959 + t2906 * t2961 + t2907 * t2963 + t2911 * t2965 + t2912 * t2967 + t2867 * t2916 + t2904 * t2945 + t2913 * t2969;
t3728 = t2852 * t2908 + t2854 * t2909 + t2856 * t2910 + t2864 * t2914 + t2866 * t2915 + t2899 * t2936 + t2900 * t2938 + t2901 * t2940 + t2902 * t2942 + t2903 * t2944 + t2905 * t2960 + t2906 * t2962 + t2907 * t2964 + t2911 * t2966 + t2912 * t2968 + t2868 * t2916 + t2904 * t2946 + t2913 * t2970;
t3479 = (t3620 - t3621) * m(4) + Icges(4,1) - Icges(4,2);
t3721 = -(t3479 * t3594 * t3595 + t3515 * t3598) * t3597 - t3598 * t4057;
t3550 = t3597 ^ 2;
t3720 = t3479 * t3550 + 0.2e1 * t3869;
t3692 = t2773 * t2929 + t2775 * t2930 + t2777 * t2931 + t2779 * t2932 + t2781 * t2933 + t2783 * t2934 + t2785 * t2953 + t2791 * t2821 + t2793 * t2822 + t2795 * t2823 + t2803 * t2830 + t2805 * t2831 + t2807 * t2832 + t2787 * t2954 + t2789 * t2955 + t2797 * t2956 + t2799 * t2957 + t2801 * t2958;
t3691 = t2774 * t2929 + t2776 * t2930 + t2778 * t2931 + t2780 * t2932 + t2782 * t2933 + t2784 * t2934 + t2786 * t2953 + t2792 * t2821 + t2794 * t2822 + t2796 * t2823 + t2804 * t2830 + t2806 * t2831 + t2808 * t2832 + t2788 * t2954 + t2790 * t2955 + t2798 * t2956 + t2800 * t2957 + t2802 * t2958;
t3690 = t2875 * t2821 + t2877 * t2822 + t2879 * t2823 + t2887 * t2830 + t2889 * t2831 + t2891 * t2832 + t2845 * t2929 + t2847 * t2930 + t2849 * t2931 + t2857 * t2932 + t2859 * t2933 + t2861 * t2934 + t2869 * t2953 + t2871 * t2954 + t2873 * t2955 + t2881 * t2956 + t2883 * t2957 + t2885 * t2958;
t3689 = t2876 * t2821 + t2878 * t2822 + t2880 * t2823 + t2888 * t2830 + t2890 * t2831 + t2892 * t2832 + t2846 * t2929 + t2848 * t2930 + t2850 * t2931 + t2858 * t2932 + t2860 * t2933 + t2862 * t2934 + t2870 * t2953 + t2872 * t2954 + t2874 * t2955 + t2882 * t2956 + t2884 * t2957 + t2886 * t2958;
t3688 = t2908 * t2821 + t2909 * t2822 + t2910 * t2823 + t2914 * t2830 + t2915 * t2831 + t2916 * t2832 + t2899 * t2929 + t2900 * t2930 + t2901 * t2931 + t2902 * t2932 + t2903 * t2933 + t2904 * t2934 + t2905 * t2953 + t2906 * t2954 + t2907 * t2955 + t2911 * t2956 + t2912 * t2957 + t2913 * t2958;
t3494 = m(4) * (t3619 + t3620) + Icges(4,1);
t3314 = -t3479 * t3599 + t4028 * t4286;
t3300 = t3479 * t4029 + t3550 * t4286 + t3517;
t3299 = t3720 + t3955;
t3256 = -t3598 * t3495 + t4289;
t3158 = (-t3596 * t4288 + t4076) * m(4);
t1 = [t2908 * t4198 + t2909 * t4197 + t2910 * t4196 + t2914 * t4195 + t2915 * t4194 + t2916 * t4193 + m(4) + (t2904 * t4175 - t2913 * t4145) * t3591 + (t2903 * t4176 - t2912 * t4146) * t3590 + (t2902 * t4177 - t2911 * t4147) * t3589 + (t2901 * t4178 - t2907 * t4148) * t3588 + (t2900 * t4179 - t2906 * t4149) * t3587 + (t2899 * t4180 - t2905 * t4150) * t3586, t2916 * t4200 + t2904 * t4181 + t2913 * t4118 + t2915 * t4202 + t2903 * t4182 + t2912 * t4123 + t2914 * t4204 + t2902 * t4183 + t2911 * t4128 + t2910 * t4206 + t2901 * t4187 + t2907 * t4133 + t2909 * t4208 + t2900 * t4188 + t2906 * t4138 + t2908 * t4210 + t2899 * t4189 + t2905 * t4143, t2916 * t4199 + t2904 * t4184 + t2913 * t4119 + t2915 * t4201 + t2903 * t4185 + t2912 * t4124 + t2914 * t4203 + t2902 * t4186 + t2911 * t4129 + t2910 * t4205 + t2901 * t4190 + t2907 * t4134 + t2909 * t4207 + t2900 * t4191 + t2906 * t4139 + t2908 * t4209 + t2899 * t4192 + t2905 * t4144, t3688, m(4) * t4288 + t3729 * t3596 + t3728 * t3599, t3688 * t3595 + (-m(4) * t3444 - t3596 * t3728 + t3599 * t3729) * t3598; t2875 * t4198 + t2877 * t4197 + t2879 * t4196 + t2887 * t4195 + t2889 * t4194 + t2891 * t4193 + (t2861 * t4175 - t2885 * t4145) * t3591 + (t2859 * t4176 - t2883 * t4146) * t3590 + (t2857 * t4177 - t2881 * t4147) * t3589 + (t2849 * t4178 - t2873 * t4148) * t3588 + (t2847 * t4179 - t2871 * t4149) * t3587 + (t2845 * t4180 - t2869 * t4150) * t3586, t2891 * t4200 + t2861 * t4181 + t2885 * t4118 + t2889 * t4202 + t2859 * t4182 + t2883 * t4123 + t2887 * t4204 + t2857 * t4183 + t2881 * t4128 + t2879 * t4206 + t2849 * t4187 + t2873 * t4133 + t2877 * t4208 + t2847 * t4188 + t2871 * t4138 + t2875 * t4210 + t2845 * t4189 + t2869 * t4143 + m(4), t2891 * t4199 + t2861 * t4184 + t2885 * t4119 + t2889 * t4201 + t2859 * t4185 + t2883 * t4124 + t2887 * t4203 + t2857 * t4186 + t2881 * t4129 + t2879 * t4205 + t2849 * t4190 + t2873 * t4134 + t2877 * t4207 + t2847 * t4191 + t2871 * t4139 + t2875 * t4209 + t2845 * t4192 + t2869 * t4144, -t3145 + t3690, t3732 * t3599 + (t3733 - t4212) * t3596, -t3599 * t4284 + (-m(4) * t4077 + t3690) * t3595 + (-t3596 * t3732 + t3599 * t3733) * t3598; t2876 * t4198 + t2878 * t4197 + t2880 * t4196 + t2888 * t4195 + t2890 * t4194 + t2892 * t4193 + (t2862 * t4175 - t2886 * t4145) * t3591 + (t2860 * t4176 - t2884 * t4146) * t3590 + (t2858 * t4177 - t2882 * t4147) * t3589 + (t2850 * t4178 - t2874 * t4148) * t3588 + (t2848 * t4179 - t2872 * t4149) * t3587 + (t2846 * t4180 - t2870 * t4150) * t3586, t2892 * t4200 + t2862 * t4181 + t2886 * t4118 + t2890 * t4202 + t2860 * t4182 + t2884 * t4123 + t2888 * t4204 + t2858 * t4183 + t2882 * t4128 + t2880 * t4206 + t2850 * t4187 + t2874 * t4133 + t2878 * t4208 + t2848 * t4188 + t2872 * t4138 + t2876 * t4210 + t2846 * t4189 + t2870 * t4143, t2892 * t4199 + t2862 * t4184 + t2886 * t4119 + t2890 * t4201 + t2860 * t4185 + t2884 * t4124 + t2888 * t4203 + t2858 * t4186 + t2882 * t4129 + t2880 * t4205 + t2850 * t4190 + t2874 * t4134 + t2878 * t4207 + t2848 * t4191 + t2872 * t4139 + t2876 * t4209 + t2846 * t4192 + t2870 * t4144 + m(4), t3689 + t3158, t3731 * t3596 + (-t3730 + t4212) * t3599, -t3596 * t4284 + (m(4) * t4076 + t3689) * t3595 + (t3596 * t3730 + t3599 * t3731) * t3598; t2746 * t4198 + t2747 * t4197 + t2748 * t4196 + t2752 * t4195 + t2753 * t4194 + t2754 * t4193 + (t2742 * t4175 - t2751 * t4145) * t3591 + (t2741 * t4176 - t2750 * t4146) * t3590 + (t2740 * t4177 - t2749 * t4147) * t3589 + (t2739 * t4178 - t2745 * t4148) * t3588 + (t2738 * t4179 - t2744 * t4149) * t3587 + (t2737 * t4180 - t2743 * t4150) * t3586, t2754 * t4200 + t2742 * t4181 + t2751 * t4118 + t2753 * t4202 + t2741 * t4182 + t2750 * t4123 + t2752 * t4204 + t2740 * t4183 + t2749 * t4128 + t2748 * t4206 + t2739 * t4187 + t2745 * t4133 + t2747 * t4208 + t2738 * t4188 + t2744 * t4138 + t2746 * t4210 + t2737 * t4189 + t2743 * t4143 - t3145, t2754 * t4199 + t2742 * t4184 + t2751 * t4119 + t2753 * t4201 + t2741 * t4185 + t2750 * t4124 + t2752 * t4203 + t2740 * t4186 + t2749 * t4129 + t2748 * t4205 + t2739 * t4190 + t2745 * t4134 + t2747 * t4207 + t2738 * t4191 + t2744 * t4139 + t2746 * t4209 + t2737 * t4192 + t2743 * t4144 + t3158, t3299 * t3551 + 0.2e1 * t3598 * t4289 + t4282, t3300 * t3598 - t3595 * t3761 + t3596 * t3739 + t3599 * t3738, t4282 * t3595 + (-t3596 * t3738 + t3599 * t3739 + t3760) * t3598; t2808 * t4193 + t2806 * t4194 + t2804 * t4195 + t2796 * t4196 + t2794 * t4197 + t2792 * t4198 + t3145 + (t2784 * t4175 - t2802 * t4145) * t3591 + (t2782 * t4176 - t2800 * t4146) * t3590 + (t2780 * t4177 - t2798 * t4147) * t3589 + (t2778 * t4178 - t2790 * t4148) * t3588 + (t2776 * t4179 - t2788 * t4149) * t3587 + (t2774 * t4180 - t2786 * t4150) * t3586, t2808 * t4200 + t2784 * t4181 + t2802 * t4118 + t2806 * t4202 + t2782 * t4182 + t2800 * t4123 + t2804 * t4204 + t2780 * t4183 + t2798 * t4128 + t2796 * t4206 + t2778 * t4187 + t2790 * t4133 + t2794 * t4208 + t2776 * t4188 + t2788 * t4138 + t2792 * t4210 + t2774 * t4189 + t2786 * t4143, t2808 * t4199 + t2784 * t4184 + t2802 * t4119 + t2806 * t4201 + t2782 * t4185 + t2800 * t4124 + t2804 * t4203 + t2780 * t4186 + t2798 * t4129 + t2796 * t4205 + t2778 * t4190 + t2790 * t4134 + t2794 * t4207 + t2776 * t4191 + t2788 * t4139 + t2792 * t4209 + t2774 * t4192 + t2786 * t4144 + t4212, ((t3479 * t4028 - 0.2e1 * t4020) * t3550 - t3314 * t4029 + t3955 * t4028 + t4020) * t3598 + (-t3515 * t4027 - t3516 * t3596) * t3597 - t3594 * (-t3515 * t3596 + t3516 * t4027) + t3760 * t3596 * t4285 + t3691, t3314 * t3550 + (t3494 - t3734 - 0.2e1 * t3869) * t3599 + (-t3721 + t3735 + t4056) * t3596, t3256 * t3596 - t3599 * t3761 + t3691 * t3595 + (t3596 * t3734 + t3599 * t3735) * t3598; t2791 * t4198 + t2793 * t4197 + t2795 * t4196 + t2803 * t4195 + t2805 * t4194 + t2807 * t4193 - t3158 + (t2783 * t4175 - t2801 * t4145) * t3591 + (t2781 * t4176 - t2799 * t4146) * t3590 + (t2779 * t4177 - t2797 * t4147) * t3589 + (t2777 * t4178 - t2789 * t4148) * t3588 + (t2775 * t4179 - t2787 * t4149) * t3587 + (t2773 * t4180 - t2785 * t4150) * t3586, t2807 * t4200 + t2783 * t4181 + t2801 * t4118 + t2805 * t4202 + t2781 * t4182 + t2799 * t4123 + t2803 * t4204 + t2779 * t4183 + t2797 * t4128 + t2795 * t4206 + t2777 * t4187 + t2789 * t4133 + t2793 * t4208 + t2775 * t4188 + t2787 * t4138 + t2791 * t4210 + t2773 * t4189 + t2785 * t4143 - t4212, t2807 * t4199 + t2783 * t4184 + t2801 * t4119 + t2805 * t4201 + t2781 * t4185 + t2799 * t4124 + t2803 * t4203 + t2779 * t4186 + t2797 * t4129 + t2795 * t4205 + t2777 * t4190 + t2789 * t4134 + t2793 * t4207 + t2775 * t4191 + t2787 * t4139 + t2791 * t4209 + t2773 * t4192 + t2785 * t4144, (-t3299 * t4027 + t3300 * t3596) * t3598 - t3761 * t4028 + t3692 - (t4285 + 0.1e1) * t3599 * t3760, ((0.2e1 * t3550 - 0.1e1) * t4056 + t3721 - t3736) * t3599 + (t3494 - t3720 + t3737) * t3596, -t3256 * t3599 - t3596 * t3761 + t3692 * t3595 + (t3596 * t3736 + t3599 * t3737) * t3598;];
MX  = t1;
