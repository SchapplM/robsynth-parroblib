% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P6PRRRRR6V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x21]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-09-11 16:13
% Revision: 7993d029b5937b704dcf3fc7d8ae322038cdcbdd (2019-09-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6PRRRRR6V2G1P1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A0_coriolisvec_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A0_coriolisvec_para_pf_regmin: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A0_coriolisvec_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A0_coriolisvec_para_pf_regmin: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_coriolisvec_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-09-11 14:37:38
% EndTime: 2019-09-11 15:03:50
% DurationCPUTime: 1622.38s
% Computational Cost: add. (16316707->3471), mult. (40768669->5618), div. (61500->84), fcn. (27296567->50), ass. (0->2284)
t7624 = xP(5);
t7556 = sin(t7624);
t7618 = xDP(6);
t7620 = xDP(4);
t7450 = t7556 * t7620 + t7618;
t7623 = xP(6);
t7555 = sin(t7623);
t7625 = xP(4);
t7557 = sin(t7625);
t7558 = cos(t7623);
t7559 = cos(t7624);
t7560 = cos(t7625);
t7621 = xDP(2);
t7633 = koppelP(6,2);
t7639 = koppelP(6,1);
t7957 = t7555 * t7450;
t8158 = -t7556 * t7618 - t7620;
t7619 = xDP(5);
t8563 = t7619 * t7639;
t8569 = t7619 * t7633;
t7627 = koppelP(6,3);
t8575 = t7619 * t7627;
t8582 = t7618 * t7639;
t8723 = t7559 * t7627;
t8733 = t7558 * t7639;
t6759 = t7621 + ((t7559 * t8563 + t7633 * t8158) * t7558 + (-t7555 * t8582 + t8575) * t7556 - t7555 * (t7559 * t8569 + t7620 * t7639)) * t7557 + (t7450 * t8733 - t7620 * t8723 - t7633 * t7957) * t7560;
t7584 = cos(pkin(5));
t7595 = sin(qJ(2,6));
t7585 = cos(pkin(4));
t7601 = cos(qJ(2,6));
t8633 = t7585 * t7601;
t7580 = sin(pkin(5));
t7581 = sin(pkin(4));
t8677 = t7580 * t7581;
t7622 = xDP(1);
t8717 = t7559 * t7633;
t9032 = t7555 * (t7556 * t8569 - t7559 * t8582) - (t7556 * t8563 + t7618 * t8717) * t7558 + t7559 * t8575 + t7622;
t6579 = (t6759 * t8633 - t7595 * t9032) * t7584 - t6759 * t8677;
t6621 = (t6759 * t7595 + t8633 * t9032) * t7584 - t9032 * t8677;
t7588 = legFrame(6,3);
t7527 = sin(t7588);
t7533 = cos(t7588);
t7578 = sin(pkin(10));
t7582 = cos(pkin(10));
t6471 = (t6579 * t7578 + t6621 * t7582) * t7533 + (t6579 * t7582 - t6621 * t7578) * t7527;
t8637 = t7585 * t7595;
t6705 = t6759 * t7601 - t8637 * t9032;
t6708 = t6759 * t8637 + t7601 * t9032;
t6519 = (t6705 * t7582 - t6708 * t7578) * t7533 - t7527 * (t6705 * t7578 + t6708 * t7582);
t7579 = sin(pkin(6));
t7525 = t7579 * pkin(9);
t7594 = sin(qJ(3,6));
t7600 = cos(qJ(3,6));
t6438 = (pkin(3) * t6471 - t6519 * t7525) * t7600 + t7594 * (pkin(3) * t6519 + t6471 * t7525);
t7583 = cos(pkin(6));
t8974 = pkin(9) * t7583;
t7512 = pkin(8) + t8974;
t8676 = t7580 * t7584;
t8285 = t7512 * t8676;
t7339 = t7585 * t8285;
t8673 = t7580 * t7595;
t7497 = pkin(2) * t8673;
t7564 = t7584 ^ 2;
t9020 = t7564 - 0.1e1;
t8435 = t7512 * t9020;
t6905 = t7339 + (t7601 * t8435 + t7497) * t7581;
t8171 = t9020 * t7585;
t8646 = t7584 * t7601;
t8258 = t7580 * t8646;
t7192 = t7581 * t8258 - t8171;
t7647 = pkin(3) ^ 2;
t7645 = pkin(9) ^ 2;
t7562 = t7583 ^ 2;
t8557 = t7645 * t7562;
t8172 = -t7645 + t8557;
t7480 = t7647 + t8172;
t8306 = t7480 * t8677;
t7263 = t7595 * t8306;
t8446 = t7581 * t7525;
t8134 = t7580 * t8446;
t8023 = 0.2e1 * t8134;
t7960 = pkin(3) * t8023;
t7377 = t7595 * t7960;
t8991 = pkin(3) * t7585;
t7522 = pkin(2) * t8991;
t7568 = t7600 ^ 2;
t8769 = (t7583 + 0.1e1) * (t7583 - 0.1e1);
t8448 = pkin(9) * t8769;
t8141 = t7580 * t8448;
t7970 = t7595 * t8141;
t7888 = t7581 * t7970;
t7523 = pkin(2) * t7525;
t8194 = t7585 * t7523;
t8513 = pkin(3) * t7525;
t8438 = -0.2e1 * t8513;
t8993 = pkin(3) * t7579;
t6639 = (t7192 * t8438 + t7263) * t7568 + ((t7192 * t7480 + t7377) * t7594 - t8194 + pkin(3) * t6905) * t7600 + (t6905 * t7525 + t7522) * t7594 + pkin(9) * (t7192 * t8993 - t7888);
t6429 = t6438 ^ 2 / t6639 ^ 2;
t9018 = 0.2e1 * t7568 - 0.1e1;
t6399 = t9018 * t6429;
t7289 = t7527 * t7582 + t7533 * t7578;
t7295 = -t7527 * t7578 + t7533 * t7582;
t6989 = -t7289 * t8637 + t7295 * t7601;
t7814 = (t7289 * t8633 + t7295 * t7595) * t7584 - t7289 * t8677;
t6672 = (pkin(3) * t7814 - t6989 * t7525) * t7600 + t7594 * (pkin(3) * t6989 + t7814 * t7525);
t8696 = t7579 * t7584;
t8445 = pkin(9) * t8696;
t8133 = t7580 * t8445;
t9024 = -0.2e1 * pkin(3);
t7959 = t8133 * t9024;
t7875 = t7581 * t7959;
t7489 = t7579 * t8991;
t7482 = pkin(9) * t7489;
t8149 = t7564 * t7489;
t9023 = 0.2e1 * pkin(9);
t8520 = t8149 * t9023 - 0.2e1 * t7482;
t6878 = (t7601 * t7875 + t7263 + t8520) * t7568;
t8649 = t7584 * t7594;
t8261 = t7580 * t8649;
t7262 = t7480 * t8261;
t7208 = t7601 * t7262;
t7794 = pkin(9) * (t7489 - t8149);
t7958 = pkin(3) * t7339 - t8194;
t7433 = t7585 * t7480;
t7975 = t9020 * t7433;
t8778 = t7512 * t7601;
t7271 = t7497 - t8778;
t8291 = t7564 * t8778;
t7981 = t7271 + t8291;
t8126 = pkin(3) * t8258;
t7971 = t7512 * t8133;
t8527 = t7585 * t7971 + t7522;
t6588 = 0.1e1 / (t6878 + ((t7377 - t7975) * t7594 + t7958) * t7600 + t8527 * t7594 + t7794 + ((pkin(3) * t7981 + t7208) * t7600 + (-t7970 + (t7594 * t7981 + t8126) * t7579) * pkin(9)) * t7581);
t8931 = t6438 / t6639;
t8376 = t7580 * t8931;
t8087 = t7512 * t8376;
t6423 = t8087 * t7525;
t7395 = t7555 * t7633 - t8733;
t8763 = t7556 * t7627;
t7162 = t7395 * t7559 - t8763;
t8749 = t7557 * t7619;
t7401 = t7555 * t7639 + t7558 * t7633;
t8757 = t7557 * t7401;
t7908 = t7395 * t7556 + t8723;
t6959 = t7560 * t7908 + t8757;
t8835 = t6959 * t7620;
t6783 = -(t7395 * t7560 + t7556 * t8757) * t7618 - t7162 * t8749 - t8835;
t8711 = t7560 * t7619;
t8764 = t7556 * t7560;
t9026 = t7401 * t7560 - t7557 * t7908;
t8841 = t9026 * t7620;
t6784 = -(-t7395 * t7557 + t7401 * t8764) * t7618 - t7162 * t8711 - t8841;
t8724 = t7559 * t7620;
t7195 = -t7556 * t8711 - t7557 * t8724;
t8710 = t7560 * t7620;
t7196 = t7556 * t8749 - t7559 * t8710;
t8726 = t7559 * t7618;
t6537 = (t6959 * t7196 - t7195 * t9026) * t7618 + ((-t6784 - t8841) * t7560 + (-t6783 - t8835) * t7557) * t7619 + (-t6783 * t7560 + t6784 * t7557) * t8726;
t6938 = t7401 * t8726 - t7619 * t7908;
t7141 = -t7555 * t8717 + t7559 * t8733 + t8763;
t6555 = t6784 * t7620 + (-t6938 * t7557 + t7141 * t8710) * t7619 + (t6784 * t7556 + t7141 * t7195 + (-t6938 * t7560 - t6959 * t7619) * t7559) * t7618;
t8533 = pkin(3) * t8291 + t7208;
t8695 = t7579 * t7594;
t7491 = pkin(9) * t8695;
t7467 = 0.2e1 * t7491 + pkin(2);
t8231 = t7467 * t8673;
t9038 = t8231 - t8778;
t6862 = (pkin(3) * t9038 + t8533) * t7581;
t8768 = (t7584 + 0.1e1) * (t7584 - 0.1e1);
t8018 = t8513 * t8768;
t7895 = t7585 * t8018;
t7261 = 0.2e1 * t7895;
t8268 = t7579 * t8646;
t8132 = pkin(9) * t8268;
t8017 = pkin(3) * t8132;
t8616 = t7595 * t7480;
t8334 = (t8017 - t8616 / 0.2e1) * t8677;
t6911 = (t7261 - 0.2e1 * t8334) * t7568;
t7225 = t7594 * t7971;
t8292 = t7512 * t8768;
t7323 = pkin(3) * t8292;
t8977 = pkin(9) * t7562;
t8437 = pkin(9) - t8977;
t7408 = pkin(2) * t8695 + t8437;
t7546 = pkin(2) * t7594;
t7481 = -t7647 + t8172;
t7483 = pkin(2) * t7491;
t8782 = t7512 * t7580;
t8475 = pkin(3) * t8782;
t7703 = ((-t7481 + t7483) * t7584 - t7594 * t8475) * t8931;
t8283 = t7645 * t8769;
t7792 = (t7564 * t8283 - t7647) * t7585;
t7793 = -t7564 * t8172 + t7647;
t8515 = 0.2e1 * t7525;
t8029 = t8515 * t8931;
t7964 = pkin(3) * t8029;
t6717 = t6759 * t7582 - t7578 * t9032;
t6723 = t6759 * t7578 + t7582 * t9032;
t7258 = pkin(3) * t8649 - t8782;
t7132 = t7600 * t8445 - t7258;
t7468 = t7491 + pkin(2);
t8990 = pkin(3) * t7600;
t7414 = t7468 + t8990;
t6950 = -t7132 * t7601 + t7414 * t7595;
t7956 = t7585 * (t7132 * t7595 + t7601 * t7414);
t6510 = -(t6717 * t7527 + t6723 * t7533) * t7956 - (t6717 * t7533 - t6723 * t7527) * t6950;
t8983 = pkin(9) * t7408;
t7046 = t7467 * t8990 + t7480 * t7568 + t8983;
t6968 = t7046 * t8673;
t8436 = t7480 * t9020;
t7407 = pkin(3) * t8285;
t8518 = t7523 - t7407;
t6972 = -t7594 * t8436 - t8518;
t8994 = pkin(3) * t7512;
t8208 = t9020 * t8994;
t7067 = t7262 + t8208;
t7490 = pkin(3) * t8676;
t7108 = t7594 * t8435 + t7490;
t7961 = 0.2e1 * t8018;
t7274 = t7568 * t7961;
t7380 = t7568 * t7959;
t7459 = t7546 + t7525;
t8447 = t7564 * t7525;
t8193 = pkin(3) * t8447;
t7868 = pkin(3) * t7459 + t7225 - t8193;
t6669 = (t6972 * t7600 + t7274 + t7868) * t7585 + ((t7067 * t7600 + t7108 * t7525 + t7380) * t7601 + t6968) * t7581;
t6663 = 0.1e1 / t6669;
t8922 = t6510 * t6663;
t8148 = t8922 * t7525;
t8021 = pkin(3) * t8148;
t8022 = t7525 - t8447;
t8030 = t7584 * t8283;
t8617 = t7594 * t7601;
t8783 = t7512 * t7579;
t8036 = t8617 * t8783;
t8042 = t7595 * t8292;
t8043 = t7433 * t8768;
t8140 = t7601 * t8448;
t8694 = t7579 * t7595;
t8444 = pkin(9) * t8694;
t8192 = pkin(3) * t8444;
t8487 = pkin(3) * t8931;
t8197 = pkin(2) * t8487;
t7217 = t7408 * t8673;
t8526 = t7564 * t8036 + t7579 * t8126;
t7037 = t7868 * t7585;
t8542 = t6911 + t7037;
t8975 = pkin(9) * t7581;
t8219 = (t7217 - t8036 + t8526) * t8975 + t8542;
t8243 = t7584 * t8931;
t8299 = t7480 * t8646;
t8360 = t7580 * t8922;
t8361 = t7481 * t8922;
t8362 = t7480 * t8922;
t8377 = t7480 * t8931;
t8973 = t7595 * pkin(3);
t8466 = t7584 * t8973;
t8481 = t7467 * t8973;
t8618 = t7594 * t7600;
t8499 = 0.2e1 * t8618;
t8650 = t7584 * t7585;
t8659 = t7581 * t7601;
t7434 = t7594 * t7480;
t8318 = t7564 * t7434;
t8829 = (-t7434 + t8318 + t8518) * t7585;
t8847 = (-t8043 + (0.2e1 * t8192 + t8299) * t8677) * t7568;
t8895 = t6588 * t6672;
t9019 = 0.2e1 * t7564 - 0.2e1;
t6990 = t7289 * t7601 + t7295 * t8637;
t6996 = -t7289 * t7595 + t7295 * t8633;
t7150 = t7295 * t8134;
t8170 = (-pkin(3) * t6990 + t6996 * t8445 - t7150) * t7594 + (t6990 * t7525 + (t6996 * t7584 - t7295 * t8677) * pkin(3)) * t7600;
t9075 = t6588 * t8170;
t6285 = -((((t7595 * t7964 + t7601 * t8362) * t7584 + 0.2e1 * t7595 * t8021 + t7601 * t8377) * t8677 - t8043 * t8922) * t7568 + (((t7601 * t8197 + (-(t7595 * t8377 - 0.2e1 * t7601 * t8021) * t7584 + t7601 * t7964 - t7595 * t8362) * t7594) * t7580 - t8042 * t8487) * t7581 - t7585 * (t6423 + pkin(3) * (t9019 * t7594 * t8148 + pkin(2) * t8243))) * t7600 + ((-pkin(3) * t8694 - t7584 * t8140) * t8360 + (-t7580 * t8140 + ((pkin(2) * t8617 - t8466) * t7580 - t7594 * t8042) * t7579) * t8931) * t8975 - (t7793 * t8922 + t7703) * t7585) / (t6911 + (((t7594 * t8299 + t8481) * t7580 + t7601 * t7323) * t7581 - t8829) * t7600 + ((pkin(3) * t8268 + t7408 * t7595) * t7580 + t8036 * t8768) * t8975 + t7585 * (t7225 + pkin(3) * (t7546 + t8022))) * t8931 - ((-t7580 * t8659 + t8650) * t8361 + (t8847 + (-t7895 + t8334) * t8499 - (t7601 * t8030 + t8192) * t8677 + t7792) * t8931) / ((t6862 - t8829) * t7600 + t8219) * t8922 + t6537 * t9075 + t6555 * t8895;
t8088 = t8922 * t8931;
t7715 = t6285 * t8499 + 0.4e1 * (t7568 - 0.1e1 / 0.2e1) * t8088;
t7685 = t6588 * t7715;
t6944 = t6972 * t7585;
t8689 = t7579 * t7601;
t6651 = 0.1e1 / ((t6944 + t7581 * (pkin(3) * t8231 + t7067 * t7601)) * t7600 + (t7108 * t8689 + t7217) * t8975 + t8542);
t7082 = t7258 * t7601 + t7468 * t7595;
t7348 = t8132 - t8973;
t7342 = pkin(3) * t7601 + t7584 * t8444;
t8809 = t7342 * t7585;
t8821 = (-t7258 * t7595 + t7468 * t7601) * t7585;
t6735 = (t7289 * t8809 - t7295 * t7348) * t7600 + t7082 * t7295 + t7289 * t8821;
t9117 = t6651 * t6735;
t9129 = t6399 * t9117 + t6672 * t7685;
t7634 = koppelP(5,2);
t7640 = koppelP(5,1);
t8562 = t7619 * t7640;
t8568 = t7619 * t7634;
t7628 = koppelP(5,3);
t8574 = t7619 * t7628;
t8581 = t7618 * t7640;
t8722 = t7559 * t7628;
t8732 = t7558 * t7640;
t6760 = t7621 + ((t7559 * t8562 + t7634 * t8158) * t7558 + (-t7555 * t8581 + t8574) * t7556 - t7555 * (t7559 * t8568 + t7620 * t7640)) * t7557 + (t7450 * t8732 - t7620 * t8722 - t7634 * t7957) * t7560;
t7597 = sin(qJ(2,5));
t7603 = cos(qJ(2,5));
t8631 = t7585 * t7603;
t8716 = t7559 * t7634;
t9033 = t7555 * (t7556 * t8568 - t7559 * t8581) - (t7556 * t8562 + t7618 * t8716) * t7558 + t7559 * t8574 + t7622;
t6580 = (t6760 * t8631 - t7597 * t9033) * t7584 - t6760 * t8677;
t6622 = (t6760 * t7597 + t8631 * t9033) * t7584 - t9033 * t8677;
t7589 = legFrame(5,3);
t7528 = sin(t7589);
t7534 = cos(t7589);
t6472 = (t6580 * t7578 + t6622 * t7582) * t7534 + (t6580 * t7582 - t6622 * t7578) * t7528;
t8636 = t7585 * t7597;
t6706 = t6760 * t7603 - t8636 * t9033;
t6709 = t6760 * t8636 + t7603 * t9033;
t6520 = (t6706 * t7582 - t6709 * t7578) * t7534 - t7528 * (t6706 * t7578 + t6709 * t7582);
t7596 = sin(qJ(3,5));
t7602 = cos(qJ(3,5));
t6439 = (pkin(3) * t6472 - t6520 * t7525) * t7602 + t7596 * (pkin(3) * t6520 + t6472 * t7525);
t8671 = t7580 * t7597;
t7498 = pkin(2) * t8671;
t6906 = t7339 + (t7603 * t8435 + t7498) * t7581;
t8645 = t7584 * t7603;
t8257 = t7580 * t8645;
t7193 = t7581 * t8257 - t8171;
t7265 = t7597 * t8306;
t7378 = t7597 * t7960;
t7569 = t7602 ^ 2;
t7969 = t7597 * t8141;
t7887 = t7581 * t7969;
t6640 = (t7193 * t8438 + t7265) * t7569 + ((t7193 * t7480 + t7378) * t7596 - t8194 + pkin(3) * t6906) * t7602 + (t6906 * t7525 + t7522) * t7596 + pkin(9) * (t7193 * t8993 - t7887);
t6430 = t6439 ^ 2 / t6640 ^ 2;
t9017 = 0.2e1 * t7569 - 0.1e1;
t6400 = t9017 * t6430;
t7290 = t7528 * t7582 + t7534 * t7578;
t7296 = -t7528 * t7578 + t7534 * t7582;
t6991 = -t7290 * t8636 + t7296 * t7603;
t7813 = (t7290 * t8631 + t7296 * t7597) * t7584 - t7290 * t8677;
t6675 = (pkin(3) * t7813 - t6991 * t7525) * t7602 + t7596 * (pkin(3) * t6991 + t7813 * t7525);
t6879 = (t7603 * t7875 + t7265 + t8520) * t7569;
t8648 = t7584 * t7596;
t8260 = t7580 * t8648;
t7264 = t7480 * t8260;
t7209 = t7603 * t7264;
t8777 = t7512 * t7603;
t7272 = t7498 - t8777;
t8290 = t7564 * t8777;
t7980 = t7272 + t8290;
t8124 = pkin(3) * t8257;
t6589 = 0.1e1 / (t6879 + ((t7378 - t7975) * t7596 + t7958) * t7602 + t8527 * t7596 + t7794 + ((pkin(3) * t7980 + t7209) * t7602 + (-t7969 + (t7596 * t7980 + t8124) * t7579) * pkin(9)) * t7581);
t8930 = t6439 / t6640;
t8374 = t7580 * t8930;
t8085 = t7512 * t8374;
t6424 = t8085 * t7525;
t7396 = t7555 * t7634 - t8732;
t8762 = t7556 * t7628;
t7163 = t7396 * t7559 - t8762;
t7402 = t7555 * t7640 + t7558 * t7634;
t8756 = t7557 * t7402;
t7907 = t7396 * t7556 + t8722;
t6960 = t7560 * t7907 + t8756;
t8834 = t6960 * t7620;
t6785 = -(t7396 * t7560 + t7556 * t8756) * t7618 - t7163 * t8749 - t8834;
t9027 = t7402 * t7560 - t7557 * t7907;
t8840 = t9027 * t7620;
t6786 = -(-t7396 * t7557 + t7402 * t8764) * t7618 - t7163 * t8711 - t8840;
t6538 = (t6960 * t7196 - t7195 * t9027) * t7618 + ((-t6786 - t8840) * t7560 + (-t6785 - t8834) * t7557) * t7619 + (-t6785 * t7560 + t6786 * t7557) * t8726;
t6939 = t7402 * t8726 - t7619 * t7907;
t7142 = -t7555 * t8716 + t7559 * t8732 + t8762;
t6556 = t6786 * t7620 + (-t6939 * t7557 + t7142 * t8710) * t7619 + (t6786 * t7556 + t7142 * t7195 + (-t6939 * t7560 - t6960 * t7619) * t7559) * t7618;
t8532 = pkin(3) * t8290 + t7209;
t8693 = t7579 * t7596;
t7493 = pkin(9) * t8693;
t7469 = 0.2e1 * t7493 + pkin(2);
t8230 = t7469 * t8671;
t9039 = t8230 - t8777;
t6863 = (pkin(3) * t9039 + t8532) * t7581;
t8267 = t7579 * t8645;
t8131 = pkin(9) * t8267;
t8016 = pkin(3) * t8131;
t8611 = t7597 * t7480;
t8333 = (t8016 - t8611 / 0.2e1) * t8677;
t6912 = (t7261 - 0.2e1 * t8333) * t7569;
t7226 = t7596 * t7971;
t7409 = pkin(2) * t8693 + t8437;
t7547 = pkin(2) * t7596;
t7484 = pkin(2) * t7493;
t7702 = ((-t7481 + t7484) * t7584 - t7596 * t8475) * t8930;
t8028 = t8515 * t8930;
t7963 = pkin(3) * t8028;
t6718 = t6760 * t7582 - t7578 * t9033;
t6724 = t6760 * t7578 + t7582 * t9033;
t7259 = pkin(3) * t8648 - t8782;
t7133 = t7602 * t8445 - t7259;
t7470 = t7493 + pkin(2);
t8989 = pkin(3) * t7602;
t7415 = t7470 + t8989;
t6951 = -t7133 * t7603 + t7415 * t7597;
t7955 = t7585 * (t7133 * t7597 + t7603 * t7415);
t6511 = -(t6718 * t7528 + t6724 * t7534) * t7955 - t6951 * (t6718 * t7534 - t6724 * t7528);
t8982 = pkin(9) * t7409;
t7047 = t7469 * t8989 + t7480 * t7569 + t8982;
t6969 = t7047 * t8671;
t6974 = -t7596 * t8436 - t8518;
t7068 = t7264 + t8208;
t7109 = t7596 * t8435 + t7490;
t7275 = t7569 * t7961;
t7381 = t7569 * t7959;
t7460 = t7547 + t7525;
t7867 = pkin(3) * t7460 + t7226 - t8193;
t6670 = (t6974 * t7602 + t7275 + t7867) * t7585 + ((t7068 * t7602 + t7109 * t7525 + t7381) * t7603 + t6969) * t7581;
t6665 = 0.1e1 / t6670;
t8921 = t6511 * t6665;
t8147 = t8921 * t7525;
t8020 = pkin(3) * t8147;
t8612 = t7596 * t7603;
t8035 = t8612 * t8783;
t8041 = t7597 * t8292;
t8139 = t7603 * t8448;
t8692 = t7579 * t7597;
t8443 = pkin(9) * t8692;
t8191 = pkin(3) * t8443;
t8486 = pkin(3) * t8930;
t8196 = pkin(2) * t8486;
t7218 = t7409 * t8671;
t8525 = t7564 * t8035 + t7579 * t8124;
t7038 = t7867 * t7585;
t8541 = t6912 + t7038;
t8218 = (t7218 - t8035 + t8525) * t8975 + t8541;
t8242 = t7584 * t8930;
t8298 = t7480 * t8645;
t8357 = t7580 * t8921;
t8358 = t7481 * t8921;
t8359 = t7480 * t8921;
t8375 = t7480 * t8930;
t8972 = t7597 * pkin(3);
t8465 = t7584 * t8972;
t8480 = t7469 * t8972;
t8613 = t7596 * t7602;
t8498 = 0.2e1 * t8613;
t8658 = t7581 * t7603;
t7435 = t7596 * t7480;
t8317 = t7564 * t7435;
t8828 = (-t7435 + t8317 + t8518) * t7585;
t8846 = (-t8043 + (0.2e1 * t8191 + t8298) * t8677) * t7569;
t8891 = t6589 * t6675;
t6992 = t7290 * t7603 + t7296 * t8636;
t6998 = -t7290 * t7597 + t7296 * t8631;
t7151 = t7296 * t8134;
t8169 = (-pkin(3) * t6992 + t6998 * t8445 - t7151) * t7596 + (t6992 * t7525 + (t6998 * t7584 - t7296 * t8677) * pkin(3)) * t7602;
t9074 = t6589 * t8169;
t6286 = -((((t7597 * t7963 + t7603 * t8359) * t7584 + 0.2e1 * t7597 * t8020 + t7603 * t8375) * t8677 - t8043 * t8921) * t7569 + (((t7603 * t8196 + (-(t7597 * t8375 - 0.2e1 * t7603 * t8020) * t7584 + t7603 * t7963 - t7597 * t8359) * t7596) * t7580 - t8041 * t8486) * t7581 - t7585 * (t6424 + pkin(3) * (t9019 * t7596 * t8147 + pkin(2) * t8242))) * t7602 + ((-pkin(3) * t8692 - t7584 * t8139) * t8357 + (-t7580 * t8139 + ((pkin(2) * t8612 - t8465) * t7580 - t7596 * t8041) * t7579) * t8930) * t8975 - (t7793 * t8921 + t7702) * t7585) / (t6912 + (((t7596 * t8298 + t8480) * t7580 + t7603 * t7323) * t7581 - t8828) * t7602 + ((pkin(3) * t8267 + t7409 * t7597) * t7580 + t8035 * t8768) * t8975 + t7585 * (t7226 + pkin(3) * (t7547 + t8022))) * t8930 - ((-t7580 * t8658 + t8650) * t8358 + (t8846 + (-t7895 + t8333) * t8498 - (t7603 * t8030 + t8191) * t8677 + t7792) * t8930) / ((t6863 - t8828) * t7602 + t8218) * t8921 + t6538 * t9074 + t6556 * t8891;
t8086 = t8921 * t8930;
t7713 = t6286 * t8498 + 0.4e1 * (t7569 - 0.1e1 / 0.2e1) * t8086;
t7683 = t6589 * t7713;
t6945 = t6974 * t7585;
t8688 = t7579 * t7603;
t6652 = 0.1e1 / ((t6945 + t7581 * (pkin(3) * t8230 + t7068 * t7603)) * t7602 + (t7109 * t8688 + t7218) * t8975 + t8541);
t7084 = t7259 * t7603 + t7470 * t7597;
t7350 = t8131 - t8972;
t7344 = pkin(3) * t7603 + t7584 * t8443;
t8808 = t7344 * t7585;
t8820 = (-t7259 * t7597 + t7470 * t7603) * t7585;
t6737 = (t7290 * t8808 - t7296 * t7350) * t7602 + t7084 * t7296 + t7290 * t8820;
t9116 = t6652 * t6737;
t9128 = t6400 * t9116 + t6675 * t7683;
t7635 = koppelP(4,2);
t7641 = koppelP(4,1);
t8561 = t7619 * t7641;
t8567 = t7619 * t7635;
t7629 = koppelP(4,3);
t8573 = t7619 * t7629;
t8580 = t7618 * t7641;
t8721 = t7559 * t7629;
t8731 = t7558 * t7641;
t6761 = t7621 + ((t7559 * t8561 + t7635 * t8158) * t7558 + (-t7555 * t8580 + t8573) * t7556 - t7555 * (t7559 * t8567 + t7620 * t7641)) * t7557 + (t7450 * t8731 - t7620 * t8721 - t7635 * t7957) * t7560;
t7599 = sin(qJ(2,4));
t7605 = cos(qJ(2,4));
t8629 = t7585 * t7605;
t8715 = t7559 * t7635;
t9034 = t7555 * (t7556 * t8567 - t7559 * t8580) - (t7556 * t8561 + t7618 * t8715) * t7558 + t7559 * t8573 + t7622;
t6581 = (t6761 * t8629 - t7599 * t9034) * t7584 - t6761 * t8677;
t6623 = (t6761 * t7599 + t8629 * t9034) * t7584 - t9034 * t8677;
t7590 = legFrame(4,3);
t7529 = sin(t7590);
t7535 = cos(t7590);
t6473 = (t6581 * t7578 + t6623 * t7582) * t7535 + t7529 * (t6581 * t7582 - t6623 * t7578);
t8635 = t7585 * t7599;
t6707 = t6761 * t7605 - t8635 * t9034;
t6710 = t6761 * t8635 + t7605 * t9034;
t6521 = (t6707 * t7582 - t6710 * t7578) * t7535 - t7529 * (t6707 * t7578 + t6710 * t7582);
t7598 = sin(qJ(3,4));
t7604 = cos(qJ(3,4));
t6440 = (pkin(3) * t6473 - t6521 * t7525) * t7604 + (pkin(3) * t6521 + t6473 * t7525) * t7598;
t8669 = t7580 * t7599;
t7499 = pkin(2) * t8669;
t6907 = t7339 + (t7605 * t8435 + t7499) * t7581;
t8644 = t7584 * t7605;
t8256 = t7580 * t8644;
t7194 = t7581 * t8256 - t8171;
t7267 = t7599 * t8306;
t7379 = t7599 * t7960;
t7570 = t7604 ^ 2;
t7968 = t7599 * t8141;
t7886 = t7581 * t7968;
t6641 = (t7194 * t8438 + t7267) * t7570 + ((t7194 * t7480 + t7379) * t7598 - t8194 + pkin(3) * t6907) * t7604 + (t6907 * t7525 + t7522) * t7598 + pkin(9) * (t7194 * t8993 - t7886);
t6431 = t6440 ^ 2 / t6641 ^ 2;
t9016 = 0.2e1 * t7570 - 0.1e1;
t6401 = t9016 * t6431;
t7291 = t7529 * t7582 + t7535 * t7578;
t7297 = -t7529 * t7578 + t7535 * t7582;
t6993 = -t7291 * t8635 + t7297 * t7605;
t7812 = (t7291 * t8629 + t7297 * t7599) * t7584 - t7291 * t8677;
t6678 = (pkin(3) * t7812 - t6993 * t7525) * t7604 + t7598 * (pkin(3) * t6993 + t7812 * t7525);
t6880 = (t7605 * t7875 + t7267 + t8520) * t7570;
t8647 = t7584 * t7598;
t8259 = t7580 * t8647;
t7266 = t7480 * t8259;
t7210 = t7605 * t7266;
t8776 = t7512 * t7605;
t7273 = t7499 - t8776;
t8289 = t7564 * t8776;
t7979 = t7273 + t8289;
t8122 = pkin(3) * t8256;
t6590 = 0.1e1 / (t6880 + ((t7379 - t7975) * t7598 + t7958) * t7604 + t8527 * t7598 + t7794 + ((pkin(3) * t7979 + t7210) * t7604 + (-t7968 + (t7598 * t7979 + t8122) * t7579) * pkin(9)) * t7581);
t8929 = t6440 / t6641;
t8372 = t7580 * t8929;
t8083 = t7512 * t8372;
t6425 = t8083 * t7525;
t7397 = t7555 * t7635 - t8731;
t8761 = t7556 * t7629;
t7164 = t7397 * t7559 - t8761;
t7403 = t7555 * t7641 + t7558 * t7635;
t8755 = t7557 * t7403;
t7906 = t7397 * t7556 + t8721;
t6961 = t7560 * t7906 + t8755;
t8833 = t6961 * t7620;
t6787 = -(t7397 * t7560 + t7556 * t8755) * t7618 - t7164 * t8749 - t8833;
t9028 = t7403 * t7560 - t7557 * t7906;
t8839 = t9028 * t7620;
t6788 = -(-t7397 * t7557 + t7403 * t8764) * t7618 - t7164 * t8711 - t8839;
t6539 = (t6961 * t7196 - t7195 * t9028) * t7618 + ((-t6788 - t8839) * t7560 + (-t6787 - t8833) * t7557) * t7619 + (-t6787 * t7560 + t6788 * t7557) * t8726;
t6940 = t7403 * t8726 - t7619 * t7906;
t7143 = -t7555 * t8715 + t7559 * t8731 + t8761;
t6557 = t6788 * t7620 + (-t6940 * t7557 + t7143 * t8710) * t7619 + (t6788 * t7556 + t7143 * t7195 + (-t6940 * t7560 - t6961 * t7619) * t7559) * t7618;
t8531 = pkin(3) * t8289 + t7210;
t8691 = t7579 * t7598;
t7495 = pkin(9) * t8691;
t7471 = 0.2e1 * t7495 + pkin(2);
t8229 = t7471 * t8669;
t9040 = t8229 - t8776;
t6864 = (pkin(3) * t9040 + t8531) * t7581;
t8266 = t7579 * t8644;
t8130 = pkin(9) * t8266;
t8015 = pkin(3) * t8130;
t8606 = t7599 * t7480;
t8332 = (t8015 - t8606 / 0.2e1) * t8677;
t6913 = (t7261 - 0.2e1 * t8332) * t7570;
t7227 = t7598 * t7971;
t7410 = pkin(2) * t8691 + t8437;
t7548 = pkin(2) * t7598;
t7485 = pkin(2) * t7495;
t7701 = ((-t7481 + t7485) * t7584 - t7598 * t8475) * t8929;
t8027 = t8515 * t8929;
t7962 = pkin(3) * t8027;
t6719 = t6761 * t7582 - t7578 * t9034;
t6725 = t6761 * t7578 + t7582 * t9034;
t7260 = pkin(3) * t8647 - t8782;
t7134 = t7604 * t8445 - t7260;
t7472 = t7495 + pkin(2);
t8988 = pkin(3) * t7604;
t7416 = t7472 + t8988;
t6952 = -t7134 * t7605 + t7416 * t7599;
t7954 = t7585 * (t7134 * t7599 + t7605 * t7416);
t6512 = -(t6719 * t7529 + t6725 * t7535) * t7954 - t6952 * (t6719 * t7535 - t6725 * t7529);
t8981 = pkin(9) * t7410;
t7048 = t7471 * t8988 + t7480 * t7570 + t8981;
t6970 = t7048 * t8669;
t6976 = -t7598 * t8436 - t8518;
t7069 = t7266 + t8208;
t7110 = t7598 * t8435 + t7490;
t7276 = t7570 * t7961;
t7382 = t7570 * t7959;
t7461 = t7548 + t7525;
t7866 = pkin(3) * t7461 + t7227 - t8193;
t6671 = (t6976 * t7604 + t7276 + t7866) * t7585 + ((t7069 * t7604 + t7110 * t7525 + t7382) * t7605 + t6970) * t7581;
t6667 = 0.1e1 / t6671;
t8920 = t6512 * t6667;
t8146 = t8920 * t7525;
t8019 = pkin(3) * t8146;
t8607 = t7598 * t7605;
t8034 = t8607 * t8783;
t8040 = t7599 * t8292;
t8138 = t7605 * t8448;
t8690 = t7579 * t7599;
t8442 = pkin(9) * t8690;
t8190 = pkin(3) * t8442;
t8485 = pkin(3) * t8929;
t8195 = pkin(2) * t8485;
t7219 = t7410 * t8669;
t8524 = t7564 * t8034 + t7579 * t8122;
t7039 = t7866 * t7585;
t8540 = t6913 + t7039;
t8217 = (t7219 - t8034 + t8524) * t8975 + t8540;
t8241 = t7584 * t8929;
t8297 = t7480 * t8644;
t8354 = t7580 * t8920;
t8355 = t7481 * t8920;
t8356 = t7480 * t8920;
t8373 = t7480 * t8929;
t8971 = t7599 * pkin(3);
t8464 = t7584 * t8971;
t8479 = t7471 * t8971;
t8608 = t7598 * t7604;
t8497 = 0.2e1 * t8608;
t8657 = t7581 * t7605;
t7436 = t7598 * t7480;
t8316 = t7564 * t7436;
t8827 = (-t7436 + t8316 + t8518) * t7585;
t8845 = (-t8043 + (0.2e1 * t8190 + t8297) * t8677) * t7570;
t8887 = t6590 * t6678;
t6994 = t7291 * t7605 + t7297 * t8635;
t7000 = -t7291 * t7599 + t7297 * t8629;
t7152 = t7297 * t8134;
t8168 = (-pkin(3) * t6994 + t7000 * t8445 - t7152) * t7598 + (t6994 * t7525 + (t7000 * t7584 - t7297 * t8677) * pkin(3)) * t7604;
t9073 = t6590 * t8168;
t6287 = -((((t7599 * t7962 + t7605 * t8356) * t7584 + 0.2e1 * t7599 * t8019 + t7605 * t8373) * t8677 - t8043 * t8920) * t7570 + (((t7605 * t8195 + (-(t7599 * t8373 - 0.2e1 * t7605 * t8019) * t7584 + t7605 * t7962 - t7599 * t8356) * t7598) * t7580 - t8040 * t8485) * t7581 - t7585 * (t6425 + pkin(3) * (t9019 * t7598 * t8146 + pkin(2) * t8241))) * t7604 + ((-pkin(3) * t8690 - t7584 * t8138) * t8354 + (-t7580 * t8138 + ((pkin(2) * t8607 - t8464) * t7580 - t7598 * t8040) * t7579) * t8929) * t8975 - (t7793 * t8920 + t7701) * t7585) / (t6913 + (((t7598 * t8297 + t8479) * t7580 + t7605 * t7323) * t7581 - t8827) * t7604 + ((pkin(3) * t8266 + t7410 * t7599) * t7580 + t8034 * t8768) * t8975 + t7585 * (t7227 + pkin(3) * (t7548 + t8022))) * t8929 - ((-t7580 * t8657 + t8650) * t8355 + (t8845 + (-t7895 + t8332) * t8497 - (t7605 * t8030 + t8190) * t8677 + t7792) * t8929) / ((t6864 - t8827) * t7604 + t8217) * t8920 + t6539 * t9073 + t6557 * t8887;
t8084 = t8920 * t8929;
t7711 = t6287 * t8497 + 0.4e1 * (t7570 - 0.1e1 / 0.2e1) * t8084;
t7681 = t6590 * t7711;
t6946 = t6976 * t7585;
t8687 = t7579 * t7605;
t6653 = 0.1e1 / ((t6946 + t7581 * (pkin(3) * t8229 + t7069 * t7605)) * t7604 + (t7110 * t8687 + t7219) * t8975 + t8540);
t7086 = t7260 * t7605 + t7472 * t7599;
t7352 = t8130 - t8971;
t7346 = pkin(3) * t7605 + t7584 * t8442;
t8807 = t7346 * t7585;
t8819 = (-t7260 * t7599 + t7472 * t7605) * t7585;
t6739 = (t7291 * t8807 - t7297 * t7352) * t7604 + t7086 * t7297 + t7291 * t8819;
t9115 = t6653 * t6739;
t9127 = t6401 * t9115 + t6678 * t7681;
t7636 = koppelP(3,2);
t7642 = koppelP(3,1);
t8560 = t7619 * t7642;
t8566 = t7619 * t7636;
t7630 = koppelP(3,3);
t8572 = t7619 * t7630;
t8579 = t7618 * t7642;
t8720 = t7559 * t7630;
t8730 = t7558 * t7642;
t6762 = t7621 + ((t7559 * t8560 + t7636 * t8158) * t7558 + (-t7555 * t8579 + t8572) * t7556 - t7555 * (t7559 * t8566 + t7620 * t7642)) * t7557 + (t7450 * t8730 - t7620 * t8720 - t7636 * t7957) * t7560;
t7607 = sin(qJ(2,3));
t7613 = cos(qJ(2,3));
t8624 = t7585 * t7613;
t8714 = t7559 * t7636;
t9035 = t7555 * (t7556 * t8566 - t7559 * t8579) - (t7556 * t8560 + t7618 * t8714) * t7558 + t7559 * t8572 + t7622;
t6583 = (t6762 * t8624 - t7607 * t9035) * t7584 - t6762 * t8677;
t6624 = (t6762 * t7607 + t8624 * t9035) * t7584 - t9035 * t8677;
t7591 = legFrame(3,3);
t7530 = sin(t7591);
t7536 = cos(t7591);
t6474 = (t6583 * t7578 + t6624 * t7582) * t7536 + t7530 * (t6583 * t7582 - t6624 * t7578);
t8628 = t7585 * t7607;
t6711 = t6762 * t7613 - t8628 * t9035;
t6715 = t6762 * t8628 + t7613 * t9035;
t6522 = (t6711 * t7582 - t6715 * t7578) * t7536 - t7530 * (t6711 * t7578 + t6715 * t7582);
t7606 = sin(qJ(3,3));
t7612 = cos(qJ(3,3));
t6444 = (pkin(3) * t6474 - t6522 * t7525) * t7612 + (pkin(3) * t6522 + t6474 * t7525) * t7606;
t8667 = t7580 * t7607;
t7506 = pkin(2) * t8667;
t6908 = t7339 + (t7613 * t8435 + t7506) * t7581;
t8640 = t7584 * t7613;
t8252 = t7580 * t8640;
t7197 = t7581 * t8252 - t8171;
t7278 = t7607 * t8306;
t7386 = t7607 * t7960;
t7574 = t7612 ^ 2;
t7967 = t7607 * t8141;
t7885 = t7581 * t7967;
t6648 = (t7197 * t8438 + t7278) * t7574 + ((t7197 * t7480 + t7386) * t7606 - t8194 + pkin(3) * t6908) * t7612 + (t6908 * t7525 + t7522) * t7606 + pkin(9) * (t7197 * t8993 - t7885);
t6432 = t6444 ^ 2 / t6648 ^ 2;
t9015 = 0.2e1 * t7574 - 0.1e1;
t6402 = t9015 * t6432;
t7292 = t7530 * t7582 + t7536 * t7578;
t7298 = -t7530 * t7578 + t7536 * t7582;
t7013 = -t7292 * t8628 + t7298 * t7613;
t7811 = (t7292 * t8624 + t7298 * t7607) * t7584 - t7292 * t8677;
t6687 = (pkin(3) * t7811 - t7013 * t7525) * t7612 + t7606 * (pkin(3) * t7013 + t7811 * t7525);
t6884 = (t7613 * t7875 + t7278 + t8520) * t7574;
t8643 = t7584 * t7606;
t8255 = t7580 * t8643;
t7277 = t7480 * t8255;
t7214 = t7613 * t7277;
t8772 = t7512 * t7613;
t7286 = t7506 - t8772;
t8288 = t7564 * t8772;
t7978 = t7286 + t8288;
t8120 = pkin(3) * t8252;
t6594 = 0.1e1 / (t6884 + ((t7386 - t7975) * t7606 + t7958) * t7612 + t8527 * t7606 + t7794 + ((pkin(3) * t7978 + t7214) * t7612 + (-t7967 + (t7606 * t7978 + t8120) * t7579) * pkin(9)) * t7581);
t8928 = t6444 / t6648;
t8367 = t7580 * t8928;
t8072 = t7512 * t8367;
t6426 = t8072 * t7525;
t7398 = t7555 * t7636 - t8730;
t8760 = t7556 * t7630;
t7165 = t7398 * t7559 - t8760;
t7404 = t7555 * t7642 + t7558 * t7636;
t8754 = t7557 * t7404;
t7905 = t7398 * t7556 + t8720;
t6962 = t7560 * t7905 + t8754;
t8832 = t6962 * t7620;
t6789 = -(t7398 * t7560 + t7556 * t8754) * t7618 - t7165 * t8749 - t8832;
t9029 = t7404 * t7560 - t7557 * t7905;
t8838 = t9029 * t7620;
t6790 = -(-t7398 * t7557 + t7404 * t8764) * t7618 - t7165 * t8711 - t8838;
t6540 = (t6962 * t7196 - t7195 * t9029) * t7618 + ((-t6790 - t8838) * t7560 + (-t6789 - t8832) * t7557) * t7619 + (-t6789 * t7560 + t6790 * t7557) * t8726;
t6941 = t7404 * t8726 - t7619 * t7905;
t7144 = -t7555 * t8714 + t7559 * t8730 + t8760;
t6558 = t6790 * t7620 + (-t6941 * t7557 + t7144 * t8710) * t7619 + (t6790 * t7556 + t7144 * t7195 + (-t6941 * t7560 - t6962 * t7619) * t7559) * t7618;
t8530 = pkin(3) * t8288 + t7214;
t8686 = t7579 * t7606;
t7500 = pkin(9) * t8686;
t7473 = 0.2e1 * t7500 + pkin(2);
t8228 = t7473 * t8667;
t9041 = t8228 - t8772;
t6865 = (pkin(3) * t9041 + t8530) * t7581;
t8265 = t7579 * t8640;
t8129 = pkin(9) * t8265;
t8014 = pkin(3) * t8129;
t8598 = t7607 * t7480;
t8331 = (t8014 - t8598 / 0.2e1) * t8677;
t6917 = (t7261 - 0.2e1 * t8331) * t7574;
t7228 = t7606 * t7971;
t7417 = pkin(2) * t8686 + t8437;
t7552 = pkin(2) * t7606;
t7486 = pkin(2) * t7500;
t7700 = ((-t7481 + t7486) * t7584 - t7606 * t8475) * t8928;
t8026 = t8515 * t8928;
t8599 = t7606 * t7613;
t8033 = t8599 * t8783;
t8039 = t7607 * t8292;
t8685 = t7579 * t7607;
t8441 = pkin(9) * t8685;
t8189 = pkin(3) * t8441;
t8114 = 0.2e1 * t8189;
t8137 = t7613 * t8448;
t6720 = t6762 * t7582 - t7578 * t9035;
t6726 = t6762 * t7578 + t7582 * t9035;
t7268 = pkin(3) * t8643 - t8782;
t7138 = t7612 * t8445 - t7268;
t7474 = t7500 + pkin(2);
t8987 = pkin(3) * t7612;
t7429 = t7474 + t8987;
t6965 = -t7138 * t7613 + t7429 * t7607;
t7953 = t7585 * (t7138 * t7607 + t7613 * t7429);
t6516 = -(t6720 * t7530 + t6726 * t7536) * t7953 - t6965 * (t6720 * t7536 - t6726 * t7530);
t8980 = pkin(9) * t7417;
t7061 = t7473 * t8987 + t7480 * t7574 + t8980;
t6977 = t7061 * t8667;
t6981 = -t7606 * t8436 - t8518;
t7070 = t7277 + t8208;
t7111 = t7606 * t8435 + t7490;
t7283 = t7574 * t7961;
t7389 = t7574 * t7959;
t7462 = t7552 + t7525;
t7865 = pkin(3) * t7462 + t7228 - t8193;
t6696 = (t6981 * t7612 + t7283 + t7865) * t7585 + ((t7070 * t7612 + t7111 * t7525 + t7389) * t7613 + t6977) * t7581;
t6681 = 0.1e1 / t6696;
t8916 = t6516 * t6681;
t8145 = t8916 * t7525;
t8150 = 0.2e1 * t8513;
t8484 = pkin(3) * t8928;
t8207 = pkin(2) * t8484;
t7222 = t7417 * t8667;
t8523 = t7564 * t8033 + t7579 * t8120;
t7040 = t7865 * t7585;
t8539 = t6917 + t7040;
t8216 = (t7222 - t8033 + t8523) * t8975 + t8539;
t8234 = t7584 * t8916;
t8240 = t7584 * t8928;
t8296 = t7480 * t8640;
t8352 = t7580 * t8916;
t8353 = t7481 * t8916;
t8368 = t7480 * t8928;
t8970 = t7607 * pkin(3);
t8463 = t7584 * t8970;
t8478 = t7473 * t8970;
t8600 = t7606 * t7612;
t8496 = 0.2e1 * t8600;
t8653 = t7581 * t7613;
t7437 = t7606 * t7480;
t8315 = t7564 * t7437;
t8826 = (-t7437 + t8315 + t8518) * t7585;
t8844 = (-t8043 + (t8114 + t8296) * t8677) * t7574;
t8883 = t6594 * t6687;
t7014 = t7292 * t7613 + t7298 * t8628;
t7020 = -t7292 * t7607 + t7298 * t8624;
t7153 = t7298 * t8134;
t8167 = (-pkin(3) * t7014 + t7020 * t8445 - t7153) * t7606 + (t7014 * t7525 + (t7020 * t7584 - t7298 * t8677) * pkin(3)) * t7612;
t9072 = t6594 * t8167;
t6288 = -((((t7480 * t7613 * t8916 + t8026 * t8970) * t7584 + t8114 * t8916 + t7613 * t8368) * t8677 - t8043 * t8916) * t7574 + (((t7613 * t8207 + ((-t8240 - t8916) * t8598 + (t8234 + t8928) * t7613 * t8150) * t7606) * t7580 - t8039 * t8484) * t7581 - t7585 * (t6426 + pkin(3) * (t9019 * t7606 * t8145 + pkin(2) * t8240))) * t7612 + ((-pkin(3) * t8685 - t7584 * t8137) * t8352 + (-t7580 * t8137 + ((pkin(2) * t8599 - t8463) * t7580 - t7606 * t8039) * t7579) * t8928) * t8975 - (t7793 * t8916 + t7700) * t7585) / (t6917 + (((t7606 * t8296 + t8478) * t7580 + t7613 * t7323) * t7581 - t8826) * t7612 + ((pkin(3) * t8265 + t7417 * t7607) * t7580 + t8033 * t8768) * t8975 + t7585 * (t7228 + pkin(3) * (t7552 + t8022))) * t8928 - ((-t7580 * t8653 + t8650) * t8353 + (t8844 + (-t7895 + t8331) * t8496 - (t7613 * t8030 + t8189) * t8677 + t7792) * t8928) / ((t6865 - t8826) * t7612 + t8216) * t8916 + t6540 * t9072 + t6558 * t8883;
t8073 = t8916 * t8928;
t7709 = t6288 * t8496 + 0.4e1 * (t7574 - 0.1e1 / 0.2e1) * t8073;
t7679 = t6594 * t7709;
t6947 = t6981 * t7585;
t8680 = t7579 * t7613;
t6654 = 0.1e1 / ((t6947 + t7581 * (pkin(3) * t8228 + t7070 * t7613)) * t7612 + (t7111 * t8680 + t7222) * t8975 + t8539);
t7089 = t7268 * t7613 + t7474 * t7607;
t7365 = t8129 - t8970;
t7360 = pkin(3) * t7613 + t7584 * t8441;
t8803 = t7360 * t7585;
t8818 = (-t7268 * t7607 + t7474 * t7613) * t7585;
t6747 = (t7292 * t8803 - t7298 * t7365) * t7612 + t7089 * t7298 + t7292 * t8818;
t9114 = t6654 * t6747;
t9126 = t6402 * t9114 + t6687 * t7679;
t7637 = koppelP(2,2);
t7643 = koppelP(2,1);
t8559 = t7619 * t7643;
t8565 = t7619 * t7637;
t7631 = koppelP(2,3);
t8571 = t7619 * t7631;
t8578 = t7618 * t7643;
t8719 = t7559 * t7631;
t8729 = t7558 * t7643;
t6763 = t7621 + ((t7559 * t8559 + t7637 * t8158) * t7558 + (-t7555 * t8578 + t8571) * t7556 - t7555 * (t7559 * t8565 + t7620 * t7643)) * t7557 + (t7450 * t8729 - t7620 * t8719 - t7637 * t7957) * t7560;
t7609 = sin(qJ(2,2));
t7615 = cos(qJ(2,2));
t8622 = t7585 * t7615;
t8713 = t7559 * t7637;
t9036 = t7555 * (t7556 * t8565 - t7559 * t8578) - (t7556 * t8559 + t7618 * t8713) * t7558 + t7559 * t8571 + t7622;
t6584 = (t6763 * t8622 - t7609 * t9036) * t7584 - t6763 * t8677;
t6625 = (t6763 * t7609 + t8622 * t9036) * t7584 - t9036 * t8677;
t7592 = legFrame(2,3);
t7531 = sin(t7592);
t7537 = cos(t7592);
t6475 = (t6584 * t7578 + t6625 * t7582) * t7537 + t7531 * (t6584 * t7582 - t6625 * t7578);
t8627 = t7585 * t7609;
t6712 = t6763 * t7615 - t8627 * t9036;
t6716 = t6763 * t8627 + t7615 * t9036;
t6523 = (t6712 * t7582 - t6716 * t7578) * t7537 - t7531 * (t6712 * t7578 + t6716 * t7582);
t7608 = sin(qJ(3,2));
t7614 = cos(qJ(3,2));
t6445 = (pkin(3) * t6475 - t6523 * t7525) * t7614 + t7608 * (pkin(3) * t6523 + t6475 * t7525);
t8665 = t7580 * t7609;
t7507 = pkin(2) * t8665;
t6909 = t7339 + (t7615 * t8435 + t7507) * t7581;
t8639 = t7584 * t7615;
t8251 = t7580 * t8639;
t7198 = t7581 * t8251 - t8171;
t7280 = t7609 * t8306;
t7387 = t7609 * t7960;
t7575 = t7614 ^ 2;
t7966 = t7609 * t8141;
t7884 = t7581 * t7966;
t6649 = (t7198 * t8438 + t7280) * t7575 + ((t7198 * t7480 + t7387) * t7608 - t8194 + pkin(3) * t6909) * t7614 + (t6909 * t7525 + t7522) * t7608 + pkin(9) * (t7198 * t8993 - t7884);
t6433 = t6445 ^ 2 / t6649 ^ 2;
t9014 = 0.2e1 * t7575 - 0.1e1;
t6403 = t9014 * t6433;
t7293 = t7531 * t7582 + t7537 * t7578;
t7299 = -t7531 * t7578 + t7537 * t7582;
t7015 = -t7293 * t8627 + t7299 * t7615;
t7810 = (t7293 * t8622 + t7299 * t7609) * t7584 - t7293 * t8677;
t6690 = (pkin(3) * t7810 - t7015 * t7525) * t7614 + t7608 * (pkin(3) * t7015 + t7810 * t7525);
t6885 = (t7615 * t7875 + t7280 + t8520) * t7575;
t8642 = t7584 * t7608;
t8254 = t7580 * t8642;
t7279 = t7480 * t8254;
t7215 = t7615 * t7279;
t8771 = t7512 * t7615;
t7287 = t7507 - t8771;
t8287 = t7564 * t8771;
t7977 = t7287 + t8287;
t8118 = pkin(3) * t8251;
t6595 = 0.1e1 / (t6885 + ((t7387 - t7975) * t7608 + t7958) * t7614 + t8527 * t7608 + t7794 + ((pkin(3) * t7977 + t7215) * t7614 + (-t7966 + (t7608 * t7977 + t8118) * t7579) * pkin(9)) * t7581);
t8927 = t6445 / t6649;
t8365 = t7580 * t8927;
t8070 = t7512 * t8365;
t6427 = t8070 * t7525;
t7399 = t7555 * t7637 - t8729;
t8759 = t7556 * t7631;
t7166 = t7399 * t7559 - t8759;
t7405 = t7555 * t7643 + t7558 * t7637;
t8753 = t7557 * t7405;
t7904 = t7399 * t7556 + t8719;
t6963 = t7560 * t7904 + t8753;
t8831 = t6963 * t7620;
t6791 = -(t7399 * t7560 + t7556 * t8753) * t7618 - t7166 * t8749 - t8831;
t9030 = t7405 * t7560 - t7557 * t7904;
t8837 = t9030 * t7620;
t6792 = -(-t7399 * t7557 + t7405 * t8764) * t7618 - t7166 * t8711 - t8837;
t6541 = (t6963 * t7196 - t7195 * t9030) * t7618 + ((-t6792 - t8837) * t7560 + (-t6791 - t8831) * t7557) * t7619 + (-t6791 * t7560 + t6792 * t7557) * t8726;
t6942 = t7405 * t8726 - t7619 * t7904;
t7145 = -t7555 * t8713 + t7559 * t8729 + t8759;
t6559 = t6792 * t7620 + (-t6942 * t7557 + t7145 * t8710) * t7619 + (t6792 * t7556 + t7145 * t7195 + (-t6942 * t7560 - t6963 * t7619) * t7559) * t7618;
t8529 = pkin(3) * t8287 + t7215;
t8684 = t7579 * t7608;
t7502 = pkin(9) * t8684;
t7475 = 0.2e1 * t7502 + pkin(2);
t8227 = t7475 * t8665;
t9042 = t8227 - t8771;
t6866 = (pkin(3) * t9042 + t8529) * t7581;
t8264 = t7579 * t8639;
t8128 = pkin(9) * t8264;
t8013 = pkin(3) * t8128;
t8593 = t7609 * t7480;
t8330 = (t8013 - t8593 / 0.2e1) * t8677;
t6918 = (t7261 - 0.2e1 * t8330) * t7575;
t7229 = t7608 * t7971;
t7418 = pkin(2) * t8684 + t8437;
t7553 = pkin(2) * t7608;
t7487 = pkin(2) * t7502;
t7699 = ((-t7481 + t7487) * t7584 - t7608 * t8475) * t8927;
t8025 = t8515 * t8927;
t8594 = t7608 * t7615;
t8032 = t8594 * t8783;
t8038 = t7609 * t8292;
t8683 = t7579 * t7609;
t8440 = pkin(9) * t8683;
t8188 = pkin(3) * t8440;
t8113 = 0.2e1 * t8188;
t8136 = t7615 * t8448;
t6721 = t6763 * t7582 - t7578 * t9036;
t6727 = t6763 * t7578 + t7582 * t9036;
t7269 = pkin(3) * t8642 - t8782;
t7139 = t7614 * t8445 - t7269;
t7476 = t7502 + pkin(2);
t8986 = pkin(3) * t7614;
t7430 = t7476 + t8986;
t6966 = -t7139 * t7615 + t7430 * t7609;
t7952 = t7585 * (t7139 * t7609 + t7615 * t7430);
t6517 = -(t6721 * t7531 + t6727 * t7537) * t7952 - (t6721 * t7537 - t6727 * t7531) * t6966;
t8979 = pkin(9) * t7418;
t7062 = t7475 * t8986 + t7480 * t7575 + t8979;
t6978 = t7062 * t8665;
t6983 = -t7608 * t8436 - t8518;
t7071 = t7279 + t8208;
t7112 = t7608 * t8435 + t7490;
t7284 = t7575 * t7961;
t7390 = t7575 * t7959;
t7463 = t7553 + t7525;
t7864 = pkin(3) * t7463 + t7229 - t8193;
t6697 = (t6983 * t7614 + t7284 + t7864) * t7585 + ((t7071 * t7614 + t7112 * t7525 + t7390) * t7615 + t6978) * t7581;
t6683 = 0.1e1 / t6697;
t8915 = t6517 * t6683;
t8144 = t8915 * t7525;
t8483 = pkin(3) * t8927;
t8206 = pkin(2) * t8483;
t7223 = t7418 * t8665;
t8522 = t7564 * t8032 + t7579 * t8118;
t7041 = t7864 * t7585;
t8538 = t6918 + t7041;
t8215 = (t7223 - t8032 + t8522) * t8975 + t8538;
t8233 = t7584 * t8915;
t8239 = t7584 * t8927;
t8295 = t7480 * t8639;
t8350 = t7580 * t8915;
t8351 = t7481 * t8915;
t8366 = t7480 * t8927;
t8969 = t7609 * pkin(3);
t8462 = t7584 * t8969;
t8477 = t7475 * t8969;
t8595 = t7608 * t7614;
t8495 = 0.2e1 * t8595;
t8652 = t7581 * t7615;
t7438 = t7608 * t7480;
t8314 = t7564 * t7438;
t8825 = (-t7438 + t8314 + t8518) * t7585;
t8843 = (-t8043 + (t8113 + t8295) * t8677) * t7575;
t8879 = t6595 * t6690;
t7016 = t7293 * t7615 + t7299 * t8627;
t7022 = -t7293 * t7609 + t7299 * t8622;
t7154 = t7299 * t8134;
t8166 = (-pkin(3) * t7016 + t7022 * t8445 - t7154) * t7608 + (t7016 * t7525 + (t7022 * t7584 - t7299 * t8677) * pkin(3)) * t7614;
t9071 = t6595 * t8166;
t6289 = -((((t7480 * t7615 * t8915 + t8025 * t8969) * t7584 + t8113 * t8915 + t7615 * t8366) * t8677 - t8043 * t8915) * t7575 + (((t7615 * t8206 + ((-t8239 - t8915) * t8593 + (t8233 + t8927) * t7615 * t8150) * t7608) * t7580 - t8038 * t8483) * t7581 - t7585 * (t6427 + pkin(3) * (t9019 * t7608 * t8144 + pkin(2) * t8239))) * t7614 + ((-pkin(3) * t8683 - t7584 * t8136) * t8350 + (-t7580 * t8136 + ((pkin(2) * t8594 - t8462) * t7580 - t7608 * t8038) * t7579) * t8927) * t8975 - (t7793 * t8915 + t7699) * t7585) / (t6918 + (((t7608 * t8295 + t8477) * t7580 + t7615 * t7323) * t7581 - t8825) * t7614 + ((pkin(3) * t8264 + t7418 * t7609) * t7580 + t8032 * t8768) * t8975 + t7585 * (t7229 + pkin(3) * (t7553 + t8022))) * t8927 - ((-t7580 * t8652 + t8650) * t8351 + (t8843 + (-t7895 + t8330) * t8495 - (t7615 * t8030 + t8188) * t8677 + t7792) * t8927) / ((t6866 - t8825) * t7614 + t8215) * t8915 + t6541 * t9071 + t6559 * t8879;
t8071 = t8915 * t8927;
t7707 = t6289 * t8495 + 0.4e1 * (t7575 - 0.1e1 / 0.2e1) * t8071;
t7677 = t6595 * t7707;
t6948 = t6983 * t7585;
t8679 = t7579 * t7615;
t6655 = 0.1e1 / ((t6948 + t7581 * (pkin(3) * t8227 + t7071 * t7615)) * t7614 + (t7112 * t8679 + t7223) * t8975 + t8538);
t7091 = t7269 * t7615 + t7476 * t7609;
t7367 = t8128 - t8969;
t7362 = pkin(3) * t7615 + t7584 * t8440;
t8802 = t7362 * t7585;
t8817 = (-t7269 * t7609 + t7476 * t7615) * t7585;
t6749 = (t7293 * t8802 - t7299 * t7367) * t7614 + t7091 * t7299 + t7293 * t8817;
t9113 = t6655 * t6749;
t9125 = t6403 * t9113 + t6690 * t7677;
t7638 = koppelP(1,2);
t7644 = koppelP(1,1);
t8558 = t7619 * t7644;
t8564 = t7619 * t7638;
t7632 = koppelP(1,3);
t8570 = t7619 * t7632;
t8577 = t7618 * t7644;
t8718 = t7559 * t7632;
t8728 = t7558 * t7644;
t6764 = t7621 + ((t7559 * t8558 + t7638 * t8158) * t7558 + (-t7555 * t8577 + t8570) * t7556 - t7555 * (t7559 * t8564 + t7620 * t7644)) * t7557 + (t7450 * t8728 - t7620 * t8718 - t7638 * t7957) * t7560;
t7611 = sin(qJ(2,1));
t7617 = cos(qJ(2,1));
t8620 = t7585 * t7617;
t8712 = t7559 * t7638;
t9037 = t7555 * (t7556 * t8564 - t7559 * t8577) - (t7556 * t8558 + t7618 * t8712) * t7558 + t7559 * t8570 + t7622;
t6582 = (t6764 * t8620 - t7611 * t9037) * t7584 - t6764 * t8677;
t6626 = (t6764 * t7611 + t8620 * t9037) * t7584 - t9037 * t8677;
t7593 = legFrame(1,3);
t7532 = sin(t7593);
t7538 = cos(t7593);
t6476 = (t6582 * t7578 + t6626 * t7582) * t7538 + t7532 * (t6582 * t7582 - t6626 * t7578);
t8626 = t7585 * t7611;
t6713 = t6764 * t8626 + t7617 * t9037;
t6714 = t6764 * t7617 - t8626 * t9037;
t6524 = (-t6713 * t7578 + t6714 * t7582) * t7538 - t7532 * (t6713 * t7582 + t6714 * t7578);
t7610 = sin(qJ(3,1));
t7616 = cos(qJ(3,1));
t6446 = (pkin(3) * t6476 - t6524 * t7525) * t7616 + t7610 * (pkin(3) * t6524 + t6476 * t7525);
t8663 = t7580 * t7611;
t7508 = pkin(2) * t8663;
t6910 = t7339 + (t7617 * t8435 + t7508) * t7581;
t8638 = t7584 * t7617;
t8250 = t7580 * t8638;
t7199 = t7581 * t8250 - t8171;
t7282 = t7611 * t8306;
t7388 = t7611 * t7960;
t7576 = t7616 ^ 2;
t7965 = t7611 * t8141;
t7883 = t7581 * t7965;
t6650 = (t7199 * t8438 + t7282) * t7576 + ((t7199 * t7480 + t7388) * t7610 - t8194 + pkin(3) * t6910) * t7616 + (t6910 * t7525 + t7522) * t7610 + pkin(9) * (t7199 * t8993 - t7883);
t6434 = t6446 ^ 2 / t6650 ^ 2;
t9013 = 0.2e1 * t7576 - 0.1e1;
t6404 = t9013 * t6434;
t7294 = t7532 * t7582 + t7538 * t7578;
t7300 = -t7532 * t7578 + t7538 * t7582;
t7017 = -t7294 * t8626 + t7300 * t7617;
t7809 = (t7294 * t8620 + t7300 * t7611) * t7584 - t7294 * t8677;
t6693 = (pkin(3) * t7809 - t7017 * t7525) * t7616 + t7610 * (pkin(3) * t7017 + t7809 * t7525);
t6886 = (t7617 * t7875 + t7282 + t8520) * t7576;
t8641 = t7584 * t7610;
t8253 = t7580 * t8641;
t7281 = t7480 * t8253;
t7216 = t7617 * t7281;
t8770 = t7512 * t7617;
t7288 = t7508 - t8770;
t8286 = t7564 * t8770;
t7976 = t7288 + t8286;
t8116 = pkin(3) * t8250;
t6596 = 0.1e1 / (t6886 + ((t7388 - t7975) * t7610 + t7958) * t7616 + t8527 * t7610 + t7794 + ((pkin(3) * t7976 + t7216) * t7616 + (-t7965 + (t7610 * t7976 + t8116) * t7579) * pkin(9)) * t7581);
t8926 = t6446 / t6650;
t8363 = t7580 * t8926;
t8068 = t7512 * t8363;
t6428 = t8068 * t7525;
t7400 = t7555 * t7638 - t8728;
t8758 = t7556 * t7632;
t7167 = t7400 * t7559 - t8758;
t7406 = t7555 * t7644 + t7558 * t7638;
t8752 = t7557 * t7406;
t7903 = t7400 * t7556 + t8718;
t6964 = t7560 * t7903 + t8752;
t8830 = t6964 * t7620;
t6793 = -(t7400 * t7560 + t7556 * t8752) * t7618 - t7167 * t8749 - t8830;
t9031 = t7406 * t7560 - t7557 * t7903;
t8836 = t9031 * t7620;
t6794 = -(-t7400 * t7557 + t7406 * t8764) * t7618 - t7167 * t8711 - t8836;
t6542 = (t6964 * t7196 - t7195 * t9031) * t7618 + ((-t6794 - t8836) * t7560 + (-t6793 - t8830) * t7557) * t7619 + (-t6793 * t7560 + t6794 * t7557) * t8726;
t6943 = t7406 * t8726 - t7619 * t7903;
t7146 = -t7555 * t8712 + t7559 * t8728 + t8758;
t6560 = t6794 * t7620 + (-t6943 * t7557 + t7146 * t8710) * t7619 + (t6794 * t7556 + t7146 * t7195 + (-t6943 * t7560 - t6964 * t7619) * t7559) * t7618;
t8528 = pkin(3) * t8286 + t7216;
t8682 = t7579 * t7610;
t7504 = pkin(9) * t8682;
t7477 = 0.2e1 * t7504 + pkin(2);
t8226 = t7477 * t8663;
t9043 = t8226 - t8770;
t6867 = (pkin(3) * t9043 + t8528) * t7581;
t8263 = t7579 * t8638;
t8127 = pkin(9) * t8263;
t8012 = pkin(3) * t8127;
t8588 = t7611 * t7480;
t8329 = (t8012 - t8588 / 0.2e1) * t8677;
t6919 = (t7261 - 0.2e1 * t8329) * t7576;
t7230 = t7610 * t7971;
t7419 = pkin(2) * t8682 + t8437;
t7554 = pkin(2) * t7610;
t7488 = pkin(2) * t7504;
t7698 = ((-t7481 + t7488) * t7584 - t7610 * t8475) * t8926;
t8024 = t8515 * t8926;
t8589 = t7610 * t7617;
t8031 = t8589 * t8783;
t8037 = t7611 * t8292;
t8681 = t7579 * t7611;
t8439 = pkin(9) * t8681;
t8187 = pkin(3) * t8439;
t8112 = 0.2e1 * t8187;
t8135 = t7617 * t8448;
t6722 = t6764 * t7582 - t7578 * t9037;
t6728 = t7578 * t6764 + t7582 * t9037;
t7270 = pkin(3) * t8641 - t8782;
t7140 = t7616 * t8445 - t7270;
t7478 = t7504 + pkin(2);
t8985 = pkin(3) * t7616;
t7431 = t7478 + t8985;
t6967 = -t7140 * t7617 + t7431 * t7611;
t7951 = t7585 * (t7140 * t7611 + t7617 * t7431);
t6518 = -(t6722 * t7532 + t6728 * t7538) * t7951 - (t6722 * t7538 - t6728 * t7532) * t6967;
t8978 = pkin(9) * t7419;
t7063 = t7477 * t8985 + t7480 * t7576 + t8978;
t6979 = t7063 * t8663;
t6985 = -t7610 * t8436 - t8518;
t7072 = t7281 + t8208;
t7113 = t7610 * t8435 + t7490;
t7285 = t7576 * t7961;
t7391 = t7576 * t7959;
t7464 = t7554 + t7525;
t7863 = pkin(3) * t7464 + t7230 - t8193;
t6698 = (t6985 * t7616 + t7285 + t7863) * t7585 + ((t7072 * t7616 + t7113 * t7525 + t7391) * t7617 + t6979) * t7581;
t6685 = 0.1e1 / t6698;
t8914 = t6518 * t6685;
t8143 = t8914 * t7525;
t8482 = pkin(3) * t8926;
t8205 = pkin(2) * t8482;
t7224 = t7419 * t8663;
t8521 = t7564 * t8031 + t7579 * t8116;
t7042 = t7863 * t7585;
t8537 = t6919 + t7042;
t8214 = (t7224 - t8031 + t8521) * t8975 + t8537;
t8232 = t7584 * t8914;
t8238 = t7584 * t8926;
t8294 = t7480 * t8638;
t8348 = t7580 * t8914;
t8349 = t7481 * t8914;
t8364 = t7480 * t8926;
t8968 = t7611 * pkin(3);
t8461 = t7584 * t8968;
t8476 = t7477 * t8968;
t8590 = t7610 * t7616;
t8494 = 0.2e1 * t8590;
t8651 = t7581 * t7617;
t7439 = t7610 * t7480;
t8313 = t7564 * t7439;
t8824 = (-t7439 + t8313 + t8518) * t7585;
t8842 = (-t8043 + (t8112 + t8294) * t8677) * t7576;
t8875 = t6596 * t6693;
t7018 = t7294 * t7617 + t7300 * t8626;
t7024 = -t7294 * t7611 + t7300 * t8620;
t7155 = t7300 * t8134;
t8165 = (-pkin(3) * t7018 + t7024 * t8445 - t7155) * t7610 + (t7018 * t7525 + (t7024 * t7584 - t7300 * t8677) * pkin(3)) * t7616;
t9070 = t6596 * t8165;
t6290 = -((((t7480 * t7617 * t8914 + t8024 * t8968) * t7584 + t8112 * t8914 + t7617 * t8364) * t8677 - t8043 * t8914) * t7576 + (((t7617 * t8205 + ((-t8238 - t8914) * t8588 + (t8232 + t8926) * t7617 * t8150) * t7610) * t7580 - t8037 * t8482) * t7581 - t7585 * (t6428 + pkin(3) * (t9019 * t7610 * t8143 + pkin(2) * t8238))) * t7616 + ((-pkin(3) * t8681 - t7584 * t8135) * t8348 + (-t7580 * t8135 + ((pkin(2) * t8589 - t8461) * t7580 - t7610 * t8037) * t7579) * t8926) * t8975 - (t7793 * t8914 + t7698) * t7585) / (t6919 + (((t7610 * t8294 + t8476) * t7580 + t7617 * t7323) * t7581 - t8824) * t7616 + ((pkin(3) * t8263 + t7419 * t7611) * t7580 + t8031 * t8768) * t8975 + t7585 * (t7230 + pkin(3) * (t7554 + t8022))) * t8926 - ((-t7580 * t8651 + t8650) * t8349 + (t8842 + (-t7895 + t8329) * t8494 - (t7617 * t8030 + t8187) * t8677 + t7792) * t8926) / ((t6867 - t8824) * t7616 + t8214) * t8914 + t6542 * t9070 + t6560 * t8875;
t8069 = t8914 * t8926;
t7705 = t6290 * t8494 + 0.4e1 * (t7576 - 0.1e1 / 0.2e1) * t8069;
t7675 = t6596 * t7705;
t6949 = t6985 * t7585;
t8678 = t7579 * t7617;
t6656 = 0.1e1 / ((t6949 + t7581 * (pkin(3) * t8226 + t7072 * t7617)) * t7616 + (t7113 * t8678 + t7224) * t8975 + t8537);
t7093 = t7270 * t7617 + t7478 * t7611;
t7368 = t8127 - t8968;
t7363 = pkin(3) * t7617 + t7584 * t8439;
t8801 = t7363 * t7585;
t8816 = (-t7270 * t7611 + t7478 * t7617) * t7585;
t6751 = (t7294 * t8801 - t7300 * t7368) * t7616 + t7093 * t7300 + t7294 * t8816;
t9112 = t6656 * t6751;
t9124 = t6404 * t9112 + t6693 * t7675;
t6741 = (t7289 * t7348 + t7295 * t8809) * t7600 - t7082 * t7289 + t7295 * t8821;
t8869 = t6651 * t6741;
t9123 = t6399 * t8869;
t6743 = (t7290 * t7350 + t7296 * t8808) * t7602 - t7084 * t7290 + t7296 * t8820;
t8866 = t6652 * t6743;
t9122 = t6400 * t8866;
t6745 = (t7291 * t7352 + t7297 * t8807) * t7604 - t7086 * t7291 + t7297 * t8819;
t8863 = t6653 * t6745;
t9121 = t6401 * t8863;
t6753 = (t7292 * t7365 + t7298 * t8803) * t7612 - t7089 * t7292 + t7298 * t8818;
t8860 = t6654 * t6753;
t9120 = t6402 * t8860;
t6755 = (t7293 * t7367 + t7299 * t8802) * t7614 - t7091 * t7293 + t7299 * t8817;
t8857 = t6655 * t6755;
t9119 = t6403 * t8857;
t6757 = (t7294 * t7368 + t7300 * t8801) * t7616 - t7093 * t7294 + t7300 * t8816;
t8854 = t6656 * t6757;
t9118 = t6404 * t8854;
t7457 = pkin(2) * t7480;
t8157 = t9019 * t7525;
t7043 = t8676 * t7457 - t8157 * t8994;
t7448 = t7512 * t8991;
t8249 = t7581 * t8617;
t7126 = t7480 * t8249 + t7448;
t7075 = t7126 * t8676;
t7440 = pkin(2) * t8448;
t7156 = t7481 * t8695 + t7440;
t8212 = -t8557 / 0.2e1 + t7645 / 0.2e1 + t7647 / 0.2e1;
t7240 = t7483 + t8212;
t9044 = (-0.2e1 * t8974 - pkin(8)) * pkin(8);
t8213 = pkin(2) ^ 2 - t9044;
t7741 = -(t7647 + (t7562 - 0.2e1) * t7645 + t9044) * t7564 + 0.2e1 * t8557 - 0.3e1 * t7645 - t8213;
t7383 = t7585 * t7434;
t8472 = pkin(3) * t8659;
t8125 = t7512 * t8472;
t7094 = (-t7383 + t8125) * t7564;
t7874 = t7094 + t7383 - t8194;
t7876 = t7579 * (-pkin(8) * pkin(9) - t7583 * t7645);
t7135 = (t7512 * t8249 - t8991) * t8447;
t8781 = t7512 * t7594;
t7205 = t7585 * t8781 + t8472;
t7894 = t7205 * t8133 + t7522 * t7594 + t6878 + t7135;
t7972 = t9020 * pkin(3) * t8783;
t7447 = t7645 + t8213;
t8293 = (pkin(3) + t7512) * (-pkin(3) + t7512) * t7564;
t7974 = -t7447 + t8293;
t7563 = t7584 * t7564;
t8516 = t7563 - t7584;
t8110 = 0.4e1 * t8516;
t8111 = 0.2e1 * t8516;
t8237 = t7584 * t8922;
t8156 = pkin(2) * t8237;
t8173 = t9020 * (0.3e1 * t7647 + t8172);
t8174 = 0.3e1 * (t7647 / 0.3e1 + t8172) * t8768;
t8211 = -0.2e1 * t7490;
t8324 = t7512 * t7434;
t9021 = 0.2e1 * t7584;
t8517 = -0.2e1 * t7563 + t9021;
t8519 = (-0.2e1 * t8977 + t9023) * pkin(2);
t8725 = t7559 * t7619;
t8750 = t7557 * t7559;
t7307 = t7578 * t8633 + t7582 * t7595;
t7310 = -t7578 * t7595 + t7582 * t8633;
t7001 = t7307 * t7533 + t7310 * t7527;
t7313 = t7578 * t7601 + t7582 * t8637;
t7316 = -t7578 * t8637 + t7582 * t7601;
t7010 = -t7313 * t7527 + t7316 * t7533;
t8305 = t7581 * t7434;
t7740 = -t7001 * t8994 - t7289 * t8305;
t8992 = pkin(3) * t7581;
t8514 = pkin(2) * t8992;
t8203 = t7594 * t8514;
t8262 = t7581 * t8676;
t8784 = t7480 * t7580;
t8312 = t7568 * t8784;
t8474 = t7512 * t8992;
t9006 = pkin(2) * t7600;
t8493 = t7581 * t9006;
t8791 = t7408 * t7580;
t9000 = pkin(3) * t7467;
t9057 = t8676 * t9018;
t8282 = t7568 * t8768;
t9063 = t7581 * (0.2e1 * t8282 - t9020);
t6528 = t7010 * t8312 + (((-t7001 * t7434 + t7289 * t8474) * t7584 + t7010 * t9000) * t7580 + t7740 * t7564 - t7740) * t7600 + t7289 * t8203 + (t7010 * t8791 + (-t7289 * t8493 + (-t7001 * t7564 + t7289 * t8262 + t7001) * t8781 + (t7001 * t9057 + t7289 * t9063) * pkin(3)) * t7579) * pkin(9);
t8142 = t7512 * t8446;
t8662 = t7581 * t7595;
t8976 = pkin(9) * t7580;
t6606 = 0.1e1 / (t6911 + ((t7126 * t7584 + t7581 * t8481) * t7580 - t8125 + t7874) * t7600 + (t7205 * t8696 + t7408 * t8662) * t8976 + t7135 + (-t7601 * t8142 + t7522) * t7594 + t7482);
t8910 = t6528 * t6606;
t7004 = -t7307 * t7527 + t7310 * t7533;
t7007 = t7313 * t7533 + t7316 * t7527;
t7737 = t7004 * t8994 + t7295 * t8305;
t6525 = t7007 * t8312 + (((t7004 * t7434 - t7295 * t8474) * t7584 + t7007 * t9000) * t7580 + t7737 * t7564 - t7737) * t7600 - t7295 * t8203 + (t7007 * t8791 + (t7295 * t8493 + (t7004 * t7564 - t7295 * t8262 - t7004) * t8781 + (-t7004 * t9057 - t7295 * t9063) * pkin(3)) * t7579) * pkin(9);
t8913 = t6525 * t6606;
t9022 = -0.2e1 * t7457;
t7661 = t6537 * t8910 + t6555 * t8913 + t6783 * t7620 + t6938 * t8711 + (-((-t8111 * t8931 - t9020 * t8922) * t7600 * t8324 + ((-t7480 * t8156 + t8931 * t9022) * t7568 + (-0.2e1 * t7240 * t8237 + (t7568 * t8174 - 0.4e1 * t7483 + t7741) * t8931) * t8990) * t7580 + ((t7156 * t8237 - t8519 * t8931) * t7580 + ((t7568 * t8173 + t7974) * t7594 * t8376 + ((t9019 * t7568 - t9020) * t8922 + (t7568 * t8110 + t8517) * t8931) * t8994) * t7579) * pkin(9)) * t8931 - (t7414 * t7481 * t8360 + (-t7043 * t7568 + (t7240 * t8211 - t7512 * t8318 + t8324) * t7600 + (t7156 * t8676 - t7972) * pkin(9)) * t8931) * t8922) / ((t7075 + t7874) * t7600 + t7482 + (pkin(9) * t7217 + t7876 * t8617 + t8990 * t9038) * t7581 + t7894) + (t6783 * t7556 - t6938 * t8750 - t7141 * t7196 + t8725 * t9026) * t7618;
t8576 = t7619 * t7620;
t8270 = t7557 * t8576;
t6294 = t7141 * t8270 + t7661;
t6291 = t6294 * t8662;
t8984 = pkin(8) * t7580;
t8460 = t6285 * t8984;
t6250 = t6291 + t8460;
t8408 = t6294 * t8659;
t8675 = t7580 * t7585;
t9012 = pkin(2) * t6285;
t7838 = (t8408 + t9012) * t7584 + t6294 * t8675;
t7992 = -t7600 * t6250 + (-pkin(8) * t8261 + t9006) * t6429 - t7594 * t7838;
t7849 = t6651 * t7992;
t9111 = t6741 * t7849;
t8454 = t7600 * t8984;
t7993 = -t7594 * t6250 + (t7584 * t8454 + t7546) * t6429 + t7600 * t7838;
t7850 = t6651 * t7993;
t9110 = t6741 * t7850;
t8967 = t6285 * t6651;
t8426 = t7600 * t8967;
t9109 = t6741 * t8426;
t8427 = t7594 * t8967;
t9108 = t6741 * t8427;
t8248 = t7581 * t8612;
t7127 = t7480 * t8248 + t7448;
t7076 = t7127 * t8676;
t7157 = t7481 * t8693 + t7440;
t7241 = t7484 + t8212;
t7384 = t7585 * t7435;
t8471 = pkin(3) * t8658;
t8123 = t7512 * t8471;
t7095 = (-t7384 + t8123) * t7564;
t7873 = t7095 + t7384 - t8194;
t7136 = (t7512 * t8248 - t8991) * t8447;
t8780 = t7512 * t7596;
t7206 = t7585 * t8780 + t8471;
t7893 = t7206 * t8133 + t7522 * t7596 + t6879 + t7136;
t8236 = t7584 * t8921;
t8155 = pkin(2) * t8236;
t8323 = t7512 * t7435;
t7308 = t7578 * t8631 + t7582 * t7597;
t7311 = -t7578 * t7597 + t7582 * t8631;
t7002 = t7308 * t7534 + t7311 * t7528;
t7314 = t7578 * t7603 + t7582 * t8636;
t7317 = -t7578 * t8636 + t7582 * t7603;
t7011 = -t7314 * t7528 + t7317 * t7534;
t8304 = t7581 * t7435;
t7739 = -t7002 * t8994 - t7290 * t8304;
t8202 = t7596 * t8514;
t8311 = t7569 * t8784;
t9005 = pkin(2) * t7602;
t8492 = t7581 * t9005;
t8790 = t7409 * t7580;
t8999 = pkin(3) * t7469;
t9058 = t8676 * t9017;
t8281 = t7569 * t8768;
t9064 = t7581 * (0.2e1 * t8281 - t9020);
t6529 = t7011 * t8311 + (((-t7002 * t7435 + t7290 * t8474) * t7584 + t7011 * t8999) * t7580 + t7739 * t7564 - t7739) * t7602 + t7290 * t8202 + (t7011 * t8790 + (-t7290 * t8492 + (-t7002 * t7564 + t7290 * t8262 + t7002) * t8780 + (t7002 * t9058 + t7290 * t9064) * pkin(3)) * t7579) * pkin(9);
t8661 = t7581 * t7597;
t6607 = 0.1e1 / (t6912 + ((t7127 * t7584 + t7581 * t8480) * t7580 - t8123 + t7873) * t7602 + (t7206 * t8696 + t7409 * t8661) * t8976 + t7136 + (-t7603 * t8142 + t7522) * t7596 + t7482);
t8909 = t6529 * t6607;
t7005 = -t7308 * t7528 + t7311 * t7534;
t7008 = t7314 * t7534 + t7317 * t7528;
t7736 = t7005 * t8994 + t7296 * t8304;
t6526 = t7008 * t8311 + (((t7005 * t7435 - t7296 * t8474) * t7584 + t7008 * t8999) * t7580 + t7736 * t7564 - t7736) * t7602 - t7296 * t8202 + (t7008 * t8790 + (t7296 * t8492 + (t7005 * t7564 - t7296 * t8262 - t7005) * t8780 + (-t7005 * t9058 - t7296 * t9064) * pkin(3)) * t7579) * pkin(9);
t8912 = t6526 * t6607;
t7660 = t6538 * t8909 + t6556 * t8912 + t6785 * t7620 + t6939 * t8711 + (-((-t8111 * t8930 - t9020 * t8921) * t7602 * t8323 + ((-t7480 * t8155 + t8930 * t9022) * t7569 + (-0.2e1 * t7241 * t8236 + (t7569 * t8174 - 0.4e1 * t7484 + t7741) * t8930) * t8989) * t7580 + ((t7157 * t8236 - t8519 * t8930) * t7580 + ((t7569 * t8173 + t7974) * t7596 * t8374 + ((t9019 * t7569 - t9020) * t8921 + (t7569 * t8110 + t8517) * t8930) * t8994) * t7579) * pkin(9)) * t8930 - (t7415 * t7481 * t8357 + (-t7043 * t7569 + (t7241 * t8211 - t7512 * t8317 + t8323) * t7602 + (t7157 * t8676 - t7972) * pkin(9)) * t8930) * t8921) / ((t7076 + t7873) * t7602 + t7482 + (pkin(9) * t7218 + t7876 * t8612 + t8989 * t9039) * t7581 + t7893) + (t6785 * t7556 - t6939 * t8750 - t7142 * t7196 + t8725 * t9027) * t7618;
t6295 = t7142 * t8270 + t7660;
t6292 = t6295 * t8661;
t8459 = t6286 * t8984;
t6252 = t6292 + t8459;
t8405 = t6295 * t8658;
t9011 = pkin(2) * t6286;
t7837 = (t8405 + t9011) * t7584 + t6295 * t8675;
t7990 = -t7602 * t6252 + (-pkin(8) * t8260 + t9005) * t6430 - t7596 * t7837;
t7847 = t6652 * t7990;
t9107 = t6743 * t7847;
t8453 = t7602 * t8984;
t7991 = -t7596 * t6252 + (t7584 * t8453 + t7547) * t6430 + t7602 * t7837;
t7848 = t6652 * t7991;
t9106 = t6743 * t7848;
t8965 = t6286 * t6652;
t8423 = t7602 * t8965;
t9105 = t6743 * t8423;
t8424 = t7596 * t8965;
t9104 = t6743 * t8424;
t8247 = t7581 * t8607;
t7128 = t7480 * t8247 + t7448;
t7077 = t7128 * t8676;
t7158 = t7481 * t8691 + t7440;
t7242 = t7485 + t8212;
t7385 = t7585 * t7436;
t8470 = pkin(3) * t8657;
t8121 = t7512 * t8470;
t7096 = (-t7385 + t8121) * t7564;
t7872 = t7096 + t7385 - t8194;
t7137 = (t7512 * t8247 - t8991) * t8447;
t8779 = t7512 * t7598;
t7207 = t7585 * t8779 + t8470;
t7892 = t7207 * t8133 + t7522 * t7598 + t6880 + t7137;
t8235 = t7584 * t8920;
t8154 = pkin(2) * t8235;
t8322 = t7512 * t7436;
t7309 = t7578 * t8629 + t7582 * t7599;
t7312 = -t7578 * t7599 + t7582 * t8629;
t7003 = t7309 * t7535 + t7312 * t7529;
t7315 = t7578 * t7605 + t7582 * t8635;
t7318 = -t7578 * t8635 + t7582 * t7605;
t7012 = -t7315 * t7529 + t7318 * t7535;
t8303 = t7581 * t7436;
t7738 = -t7003 * t8994 - t7291 * t8303;
t8201 = t7598 * t8514;
t8310 = t7570 * t8784;
t9004 = pkin(2) * t7604;
t8491 = t7581 * t9004;
t8789 = t7410 * t7580;
t8998 = pkin(3) * t7471;
t9059 = t8676 * t9016;
t8280 = t7570 * t8768;
t9065 = t7581 * (0.2e1 * t8280 - t9020);
t6530 = t7012 * t8310 + (((-t7003 * t7436 + t7291 * t8474) * t7584 + t7012 * t8998) * t7580 + t7738 * t7564 - t7738) * t7604 + t7291 * t8201 + (t7012 * t8789 + (-t7291 * t8491 + (-t7003 * t7564 + t7291 * t8262 + t7003) * t8779 + (t7003 * t9059 + t7291 * t9065) * pkin(3)) * t7579) * pkin(9);
t8660 = t7581 * t7599;
t6608 = 0.1e1 / (t6913 + ((t7128 * t7584 + t7581 * t8479) * t7580 - t8121 + t7872) * t7604 + (t7207 * t8696 + t7410 * t8660) * t8976 + t7137 + (-t7605 * t8142 + t7522) * t7598 + t7482);
t8908 = t6530 * t6608;
t7006 = -t7309 * t7529 + t7312 * t7535;
t7009 = t7315 * t7535 + t7318 * t7529;
t7735 = t7006 * t8994 + t7297 * t8303;
t6527 = t7009 * t8310 + (((t7006 * t7436 - t7297 * t8474) * t7584 + t7009 * t8998) * t7580 + t7735 * t7564 - t7735) * t7604 - t7297 * t8201 + (t7009 * t8789 + (t7297 * t8491 + (t7006 * t7564 - t7297 * t8262 - t7006) * t8779 + (-t7006 * t9059 - t7297 * t9065) * pkin(3)) * t7579) * pkin(9);
t8911 = t6527 * t6608;
t7659 = t6539 * t8908 + t6557 * t8911 + t6787 * t7620 + t6940 * t8711 + (-((-t8111 * t8929 - t9020 * t8920) * t7604 * t8322 + ((-t7480 * t8154 + t8929 * t9022) * t7570 + (-0.2e1 * t7242 * t8235 + (t7570 * t8174 - 0.4e1 * t7485 + t7741) * t8929) * t8988) * t7580 + ((t7158 * t8235 - t8519 * t8929) * t7580 + ((t7570 * t8173 + t7974) * t7598 * t8372 + ((t9019 * t7570 - t9020) * t8920 + (t7570 * t8110 + t8517) * t8929) * t8994) * t7579) * pkin(9)) * t8929 - (t7416 * t7481 * t8354 + (-t7043 * t7570 + (t7242 * t8211 - t7512 * t8316 + t8322) * t7604 + (t7158 * t8676 - t7972) * pkin(9)) * t8929) * t8920) / ((t7077 + t7872) * t7604 + t7482 + (pkin(9) * t7219 + t7876 * t8607 + t8988 * t9040) * t7581 + t7892) + (t6787 * t7556 - t6940 * t8750 - t7143 * t7196 + t8725 * t9028) * t7618;
t6296 = t7143 * t8270 + t7659;
t6293 = t6296 * t8660;
t8458 = t6287 * t8984;
t6254 = t6293 + t8458;
t8402 = t6296 * t8657;
t9010 = pkin(2) * t6287;
t7836 = (t8402 + t9010) * t7584 + t6296 * t8675;
t7988 = -t7604 * t6254 + (-pkin(8) * t8259 + t9004) * t6431 - t7598 * t7836;
t7845 = t6653 * t7988;
t9103 = t6745 * t7845;
t8452 = t7604 * t8984;
t7989 = -t7598 * t6254 + (t7584 * t8452 + t7548) * t6431 + t7604 * t7836;
t7846 = t6653 * t7989;
t9102 = t6745 * t7846;
t8963 = t6287 * t6653;
t8420 = t7604 * t8963;
t9101 = t6745 * t8420;
t8421 = t7598 * t8963;
t9100 = t6745 * t8421;
t8246 = t7581 * t8599;
t7129 = t7480 * t8246 + t7448;
t7078 = t7129 * t8676;
t7159 = t7481 * t8686 + t7440;
t7243 = t7486 + t8212;
t7392 = t7585 * t7437;
t8469 = pkin(3) * t8653;
t8119 = t7512 * t8469;
t7097 = (-t7392 + t8119) * t7564;
t7871 = t7097 + t7392 - t8194;
t7147 = (t7512 * t8246 - t8991) * t8447;
t8775 = t7512 * t7606;
t7211 = t7585 * t8775 + t8469;
t7891 = t7211 * t8133 + t7522 * t7606 + t6884 + t7147;
t8153 = pkin(2) * t8234;
t8321 = t7512 * t7437;
t7324 = t7578 * t8624 + t7582 * t7607;
t7327 = -t7578 * t7607 + t7582 * t8624;
t7025 = t7324 * t7536 + t7327 * t7530;
t7330 = t7578 * t7613 + t7582 * t8628;
t7333 = -t7578 * t8628 + t7582 * t7613;
t7034 = -t7330 * t7530 + t7333 * t7536;
t8302 = t7581 * t7437;
t7734 = -t7025 * t8994 - t7292 * t8302;
t8200 = t7606 * t8514;
t8309 = t7574 * t8784;
t9003 = pkin(2) * t7612;
t8490 = t7581 * t9003;
t8788 = t7417 * t7580;
t8997 = pkin(3) * t7473;
t9060 = t8676 * t9015;
t8279 = t7574 * t8768;
t9066 = t7581 * (0.2e1 * t8279 - t9020);
t6534 = t7034 * t8309 + (((-t7025 * t7437 + t7292 * t8474) * t7584 + t7034 * t8997) * t7580 + t7734 * t7564 - t7734) * t7612 + t7292 * t8200 + (t7034 * t8788 + (-t7292 * t8490 + (-t7025 * t7564 + t7292 * t8262 + t7025) * t8775 + (t7025 * t9060 + t7292 * t9066) * pkin(3)) * t7579) * pkin(9);
t8656 = t7581 * t7607;
t6612 = 0.1e1 / (t6917 + ((t7129 * t7584 + t7581 * t8478) * t7580 - t8119 + t7871) * t7612 + (t7211 * t8696 + t7417 * t8656) * t8976 + t7147 + (-t7613 * t8142 + t7522) * t7606 + t7482);
t8904 = t6534 * t6612;
t7028 = -t7324 * t7530 + t7327 * t7536;
t7031 = t7330 * t7536 + t7333 * t7530;
t7731 = t7028 * t8994 + t7298 * t8302;
t6531 = t7031 * t8309 + (((t7028 * t7437 - t7298 * t8474) * t7584 + t7031 * t8997) * t7580 + t7731 * t7564 - t7731) * t7612 - t7298 * t8200 + (t7031 * t8788 + (t7298 * t8490 + (t7028 * t7564 - t7298 * t8262 - t7028) * t8775 + (-t7028 * t9060 - t7298 * t9066) * pkin(3)) * t7579) * pkin(9);
t8907 = t6531 * t6612;
t7658 = t6540 * t8904 + t6558 * t8907 + t6789 * t7620 + t6941 * t8711 + (-((-t8111 * t8928 - t9020 * t8916) * t7612 * t8321 + ((-t7480 * t8153 + t8928 * t9022) * t7574 + (-0.2e1 * t7243 * t8234 + (t7574 * t8174 - 0.4e1 * t7486 + t7741) * t8928) * t8987) * t7580 + ((t7159 * t8234 - t8519 * t8928) * t7580 + ((t7574 * t8173 + t7974) * t7606 * t8367 + ((t9019 * t7574 - t9020) * t8916 + (t7574 * t8110 + t8517) * t8928) * t8994) * t7579) * pkin(9)) * t8928 - (t7429 * t7481 * t8352 + (-t7043 * t7574 + (t7243 * t8211 - t7512 * t8315 + t8321) * t7612 + (t7159 * t8676 - t7972) * pkin(9)) * t8928) * t8916) / ((t7078 + t7871) * t7612 + t7482 + (pkin(9) * t7222 + t7876 * t8599 + t8987 * t9041) * t7581 + t7891) + (t6789 * t7556 - t6941 * t8750 - t7144 * t7196 + t8725 * t9029) * t7618;
t6300 = t7144 * t8270 + t7658;
t6297 = t6300 * t8656;
t8457 = t6288 * t8984;
t6259 = t6297 + t8457;
t8399 = t6300 * t8653;
t9009 = pkin(2) * t6288;
t7835 = (t8399 + t9009) * t7584 + t6300 * t8675;
t7986 = -t7612 * t6259 + (-pkin(8) * t8255 + t9003) * t6432 - t7606 * t7835;
t7843 = t6654 * t7986;
t9099 = t6753 * t7843;
t8451 = t7612 * t8984;
t7987 = -t7606 * t6259 + (t7584 * t8451 + t7552) * t6432 + t7612 * t7835;
t7844 = t6654 * t7987;
t9098 = t6753 * t7844;
t8961 = t6288 * t6654;
t8417 = t7612 * t8961;
t9097 = t6753 * t8417;
t8418 = t7606 * t8961;
t9096 = t6753 * t8418;
t8245 = t7581 * t8594;
t7130 = t7480 * t8245 + t7448;
t7079 = t7130 * t8676;
t7160 = t7481 * t8684 + t7440;
t7244 = t7487 + t8212;
t7393 = t7585 * t7438;
t8468 = pkin(3) * t8652;
t8117 = t7512 * t8468;
t7098 = (-t7393 + t8117) * t7564;
t7870 = t7098 + t7393 - t8194;
t7148 = (t7512 * t8245 - t8991) * t8447;
t8774 = t7512 * t7608;
t7212 = t7585 * t8774 + t8468;
t7890 = t7212 * t8133 + t7522 * t7608 + t6885 + t7148;
t8152 = pkin(2) * t8233;
t8320 = t7512 * t7438;
t7325 = t7578 * t8622 + t7582 * t7609;
t7328 = -t7578 * t7609 + t7582 * t8622;
t7026 = t7325 * t7537 + t7328 * t7531;
t7331 = t7578 * t7615 + t7582 * t8627;
t7334 = -t7578 * t8627 + t7582 * t7615;
t7035 = -t7331 * t7531 + t7334 * t7537;
t8301 = t7581 * t7438;
t7733 = -t7026 * t8994 - t7293 * t8301;
t8199 = t7608 * t8514;
t8308 = t7575 * t8784;
t9002 = pkin(2) * t7614;
t8489 = t7581 * t9002;
t8787 = t7418 * t7580;
t8996 = pkin(3) * t7475;
t9061 = t8676 * t9014;
t8278 = t7575 * t8768;
t9067 = t7581 * (0.2e1 * t8278 - t9020);
t6535 = t7035 * t8308 + (((-t7026 * t7438 + t7293 * t8474) * t7584 + t7035 * t8996) * t7580 + t7733 * t7564 - t7733) * t7614 + t7293 * t8199 + (t7035 * t8787 + (-t7293 * t8489 + (-t7026 * t7564 + t7293 * t8262 + t7026) * t8774 + (t7026 * t9061 + t7293 * t9067) * pkin(3)) * t7579) * pkin(9);
t8655 = t7581 * t7609;
t6613 = 0.1e1 / (t6918 + ((t7130 * t7584 + t7581 * t8477) * t7580 - t8117 + t7870) * t7614 + (t7212 * t8696 + t7418 * t8655) * t8976 + t7148 + (-t7615 * t8142 + t7522) * t7608 + t7482);
t8903 = t6535 * t6613;
t7029 = -t7325 * t7531 + t7328 * t7537;
t7032 = t7331 * t7537 + t7334 * t7531;
t7730 = t7029 * t8994 + t7299 * t8301;
t6532 = t7032 * t8308 + (((t7029 * t7438 - t7299 * t8474) * t7584 + t7032 * t8996) * t7580 + t7730 * t7564 - t7730) * t7614 - t7299 * t8199 + (t7032 * t8787 + (t7299 * t8489 + (t7029 * t7564 - t7299 * t8262 - t7029) * t8774 + (-t7029 * t9061 - t7299 * t9067) * pkin(3)) * t7579) * pkin(9);
t8906 = t6532 * t6613;
t7657 = t6541 * t8903 + t6559 * t8906 + t6791 * t7620 + t6942 * t8711 + (-((-t8111 * t8927 - t9020 * t8915) * t7614 * t8320 + ((-t7480 * t8152 + t8927 * t9022) * t7575 + (-0.2e1 * t7244 * t8233 + (t7575 * t8174 - 0.4e1 * t7487 + t7741) * t8927) * t8986) * t7580 + ((t7160 * t8233 - t8519 * t8927) * t7580 + ((t7575 * t8173 + t7974) * t7608 * t8365 + ((t9019 * t7575 - t9020) * t8915 + (t7575 * t8110 + t8517) * t8927) * t8994) * t7579) * pkin(9)) * t8927 - (t7430 * t7481 * t8350 + (-t7043 * t7575 + (t7244 * t8211 - t7512 * t8314 + t8320) * t7614 + (t7160 * t8676 - t7972) * pkin(9)) * t8927) * t8915) / ((t7079 + t7870) * t7614 + t7482 + (pkin(9) * t7223 + t7876 * t8594 + t8986 * t9042) * t7581 + t7890) + (t6791 * t7556 - t6942 * t8750 - t7145 * t7196 + t8725 * t9030) * t7618;
t6301 = t7145 * t8270 + t7657;
t6298 = t6301 * t8655;
t8456 = t6289 * t8984;
t6261 = t6298 + t8456;
t8396 = t6301 * t8652;
t9008 = pkin(2) * t6289;
t7834 = (t8396 + t9008) * t7584 + t6301 * t8675;
t7984 = -t7614 * t6261 + (-pkin(8) * t8254 + t9002) * t6433 - t7608 * t7834;
t7841 = t6655 * t7984;
t9095 = t6755 * t7841;
t8450 = t7614 * t8984;
t7985 = -t7608 * t6261 + (t7584 * t8450 + t7553) * t6433 + t7614 * t7834;
t7842 = t6655 * t7985;
t9094 = t6755 * t7842;
t8959 = t6289 * t6655;
t8414 = t7614 * t8959;
t9093 = t6755 * t8414;
t8415 = t7608 * t8959;
t9092 = t6755 * t8415;
t8244 = t7581 * t8589;
t7131 = t7480 * t8244 + t7448;
t7080 = t7131 * t8676;
t7161 = t7481 * t8682 + t7440;
t7245 = t7488 + t8212;
t7394 = t7585 * t7439;
t8467 = pkin(3) * t8651;
t8115 = t7512 * t8467;
t7099 = (-t7394 + t8115) * t7564;
t7869 = t7099 + t7394 - t8194;
t7149 = (t7512 * t8244 - t8991) * t8447;
t8773 = t7512 * t7610;
t7213 = t7585 * t8773 + t8467;
t7889 = t7213 * t8133 + t7522 * t7610 + t6886 + t7149;
t8151 = pkin(2) * t8232;
t8319 = t7512 * t7439;
t7326 = t7578 * t8620 + t7582 * t7611;
t7329 = -t7578 * t7611 + t7582 * t8620;
t7027 = t7326 * t7538 + t7329 * t7532;
t7332 = t7578 * t7617 + t7582 * t8626;
t7335 = -t7578 * t8626 + t7582 * t7617;
t7036 = -t7332 * t7532 + t7335 * t7538;
t8300 = t7581 * t7439;
t7732 = -t7027 * t8994 - t7294 * t8300;
t8198 = t7610 * t8514;
t8307 = t7576 * t8784;
t9001 = pkin(2) * t7616;
t8488 = t7581 * t9001;
t8786 = t7419 * t7580;
t8995 = pkin(3) * t7477;
t9062 = t8676 * t9013;
t8277 = t7576 * t8768;
t9068 = t7581 * (0.2e1 * t8277 - t9020);
t6536 = t7036 * t8307 + (((-t7027 * t7439 + t7294 * t8474) * t7584 + t7036 * t8995) * t7580 + t7732 * t7564 - t7732) * t7616 + t7294 * t8198 + (t7036 * t8786 + (-t7294 * t8488 + (-t7027 * t7564 + t7294 * t8262 + t7027) * t8773 + (t7027 * t9062 + t7294 * t9068) * pkin(3)) * t7579) * pkin(9);
t8654 = t7581 * t7611;
t6614 = 0.1e1 / (t6919 + ((t7131 * t7584 + t7581 * t8476) * t7580 - t8115 + t7869) * t7616 + (t7213 * t8696 + t7419 * t8654) * t8976 + t7149 + (-t7617 * t8142 + t7522) * t7610 + t7482);
t8902 = t6536 * t6614;
t7030 = -t7326 * t7532 + t7329 * t7538;
t7033 = t7332 * t7538 + t7335 * t7532;
t7729 = t7030 * t8994 + t7300 * t8300;
t6533 = t7033 * t8307 + (((t7030 * t7439 - t7300 * t8474) * t7584 + t7033 * t8995) * t7580 + t7729 * t7564 - t7729) * t7616 - t7300 * t8198 + (t7033 * t8786 + (t7300 * t8488 + (t7030 * t7564 - t7300 * t8262 - t7030) * t8773 + (-t7030 * t9062 - t7300 * t9068) * pkin(3)) * t7579) * pkin(9);
t8905 = t6533 * t6614;
t7656 = t6542 * t8902 + t6560 * t8905 + t6793 * t7620 + t6943 * t8711 + (-((-t8111 * t8926 - t9020 * t8914) * t7616 * t8319 + ((-t7480 * t8151 + t8926 * t9022) * t7576 + (-0.2e1 * t7245 * t8232 + (t7576 * t8174 - 0.4e1 * t7488 + t7741) * t8926) * t8985) * t7580 + ((t7161 * t8232 - t8519 * t8926) * t7580 + ((t7576 * t8173 + t7974) * t7610 * t8363 + ((t9019 * t7576 - t9020) * t8914 + (t7576 * t8110 + t8517) * t8926) * t8994) * t7579) * pkin(9)) * t8926 - (t7431 * t7481 * t8348 + (-t7043 * t7576 + (t7245 * t8211 - t7512 * t8313 + t8319) * t7616 + (t7161 * t8676 - t7972) * pkin(9)) * t8926) * t8914) / ((t7080 + t7869) * t7616 + t7482 + (pkin(9) * t7224 + t7876 * t8589 + t8985 * t9043) * t7581 + t7889) + (t6793 * t7556 - t6943 * t8750 - t7146 * t7196 + t8725 * t9031) * t7618;
t6302 = t7146 * t8270 + t7656;
t6299 = t6302 * t8654;
t8455 = t6290 * t8984;
t6263 = t6299 + t8455;
t8393 = t6302 * t8651;
t9007 = pkin(2) * t6290;
t7833 = (t8393 + t9007) * t7584 + t6302 * t8675;
t7982 = -t7616 * t6263 + (-pkin(8) * t8253 + t9001) * t6434 - t7610 * t7833;
t7839 = t6656 * t7982;
t9091 = t6757 * t7839;
t8449 = t7616 * t8984;
t7983 = -t7610 * t6263 + (t7584 * t8449 + t7554) * t6434 + t7616 * t7833;
t7840 = t6656 * t7983;
t9090 = t6757 * t7840;
t8957 = t6290 * t6656;
t8411 = t7616 * t8957;
t9089 = t6757 * t8411;
t8412 = t7610 * t8957;
t9088 = t6757 * t8412;
t8064 = t7512 * t8360;
t6483 = t8064 * t7525;
t7896 = t7584 * t8023;
t7973 = t8435 * t7525;
t8473 = pkin(3) * t8677;
t8204 = pkin(2) * t8473;
t8210 = -0.2e1 * t8447;
t8634 = t7585 * t7600;
t8697 = t7564 * t7647;
t9025 = 0.2e1 * pkin(2);
t6306 = -(-t8282 * t8377 + (t6423 * t9021 + t6483 + (t8156 + (-t7594 * t8157 + t9025) * t8931) * pkin(3)) * t7600 - t8293 * t8931 + ((pkin(2) * t8148 + t8087 * t9024) * t7594 - t8361) * t7584 + (pkin(2) * t8029 - pkin(3) * t8064) * t7594 + t7447 * t8931) / ((t7094 + t7075 + (t7377 + t7433) * t7594 + t7595 * t8204 - t8125) * t7600 + (-t7888 + t7489 + (t7271 * t7581 * t7594 - pkin(2) * t8634) * t7579) * pkin(9) + t7894) * t7585 * t8931 - ((((t6483 + t8197) * t7584 + t6423) * t7600 + t7703) * t7585 + (t8847 + (((-t7434 + t7523) * t8673 + t7601 * t7973) * t7581 + ((t7594 * t8210 + t7467) * t7585 + t7896 * t8617) * pkin(3)) * t7600 + (-t7407 * t7594 + t8697 + t8983) * t7585 - (t7108 * t7601 + t7459 * t8673) * t8992) * t8922) / ((t6944 + t6862) * t7600 + t8219) * t8922 - t6537 * t8869 - t6555 * t9117;
t8966 = t6285 * t7584;
t6270 = t6306 + 0.2e1 * t8966;
t8386 = (0.2e1 * t8243 + t8922) * t8922;
t7778 = -t6270 * t7600 + t7594 * t8386;
t7726 = t6588 * t7778;
t9087 = -t6672 * t7726 - t6735 * t8426;
t7779 = t6270 * t7594 + t7600 * t8386;
t7727 = t6588 * t7779;
t9086 = t6672 * t7727 - t6735 * t8427;
t8063 = t7512 * t8357;
t6484 = t8063 * t7525;
t8632 = t7585 * t7602;
t6307 = -(-t8281 * t8375 + (t6424 * t9021 + t6484 + (t8155 + (-t7596 * t8157 + t9025) * t8930) * pkin(3)) * t7602 - t8293 * t8930 + ((pkin(2) * t8147 + t8085 * t9024) * t7596 - t8358) * t7584 + (pkin(2) * t8028 - pkin(3) * t8063) * t7596 + t7447 * t8930) / ((t7095 + t7076 + (t7378 + t7433) * t7596 + t7597 * t8204 - t8123) * t7602 + (-t7887 + t7489 + (t7272 * t7581 * t7596 - pkin(2) * t8632) * t7579) * pkin(9) + t7893) * t7585 * t8930 - ((((t6484 + t8196) * t7584 + t6424) * t7602 + t7702) * t7585 + (t8846 + (((-t7435 + t7523) * t8671 + t7603 * t7973) * t7581 + ((t7596 * t8210 + t7469) * t7585 + t7896 * t8612) * pkin(3)) * t7602 + (-t7407 * t7596 + t8697 + t8982) * t7585 - (t7109 * t7603 + t7460 * t8671) * t8992) * t8921) / ((t6945 + t6863) * t7602 + t8218) * t8921 - t6538 * t8866 - t6556 * t9116;
t8964 = t6286 * t7584;
t6272 = t6307 + 0.2e1 * t8964;
t8385 = (0.2e1 * t8242 + t8921) * t8921;
t7776 = -t6272 * t7602 + t7596 * t8385;
t7724 = t6589 * t7776;
t9085 = -t6675 * t7724 - t6737 * t8423;
t7777 = t6272 * t7596 + t7602 * t8385;
t7725 = t6589 * t7777;
t9084 = t6675 * t7725 - t6737 * t8424;
t8062 = t7512 * t8354;
t6485 = t8062 * t7525;
t8630 = t7585 * t7604;
t6308 = -(-t8280 * t8373 + (t6425 * t9021 + t6485 + (t8154 + (-t7598 * t8157 + t9025) * t8929) * pkin(3)) * t7604 - t8293 * t8929 + ((pkin(2) * t8146 + t8083 * t9024) * t7598 - t8355) * t7584 + (pkin(2) * t8027 - pkin(3) * t8062) * t7598 + t7447 * t8929) / ((t7096 + t7077 + (t7379 + t7433) * t7598 + t7599 * t8204 - t8121) * t7604 + (-t7886 + t7489 + (t7273 * t7581 * t7598 - pkin(2) * t8630) * t7579) * pkin(9) + t7892) * t7585 * t8929 - ((((t6485 + t8195) * t7584 + t6425) * t7604 + t7701) * t7585 + (t8845 + (((-t7436 + t7523) * t8669 + t7605 * t7973) * t7581 + ((t7598 * t8210 + t7471) * t7585 + t7896 * t8607) * pkin(3)) * t7604 + (-t7407 * t7598 + t8697 + t8981) * t7585 - (t7110 * t7605 + t7461 * t8669) * t8992) * t8920) / ((t6946 + t6864) * t7604 + t8217) * t8920 - t6539 * t8863 - t6557 * t9115;
t8962 = t6287 * t7584;
t6274 = t6308 + 0.2e1 * t8962;
t8384 = (0.2e1 * t8241 + t8920) * t8920;
t7774 = -t6274 * t7604 + t7598 * t8384;
t7722 = t6590 * t7774;
t9083 = -t6678 * t7722 - t6739 * t8420;
t7775 = t6274 * t7598 + t7604 * t8384;
t7723 = t6590 * t7775;
t9082 = t6678 * t7723 - t6739 * t8421;
t8058 = t7512 * t8352;
t6486 = t8058 * t7525;
t8625 = t7585 * t7612;
t6312 = -(-t8279 * t8368 + (t6426 * t9021 + t6486 + (t8153 + (-t7606 * t8157 + t9025) * t8928) * pkin(3)) * t7612 - t8293 * t8928 + ((pkin(2) * t8145 + t8072 * t9024) * t7606 - t8353) * t7584 + (pkin(2) * t8026 - pkin(3) * t8058) * t7606 + t7447 * t8928) / ((t7097 + t7078 + (t7386 + t7433) * t7606 + t7607 * t8204 - t8119) * t7612 + (-t7885 + t7489 + (t7286 * t7581 * t7606 - pkin(2) * t8625) * t7579) * pkin(9) + t7891) * t7585 * t8928 - ((((t6486 + t8207) * t7584 + t6426) * t7612 + t7700) * t7585 + (t8844 + (((-t7437 + t7523) * t8667 + t7613 * t7973) * t7581 + ((t7606 * t8210 + t7473) * t7585 + t7896 * t8599) * pkin(3)) * t7612 + (-t7407 * t7606 + t8697 + t8980) * t7585 - (t7111 * t7613 + t7462 * t8667) * t8992) * t8916) / ((t6947 + t6865) * t7612 + t8216) * t8916 - t6540 * t8860 - t6558 * t9114;
t8960 = t6288 * t7584;
t6279 = t6312 + 0.2e1 * t8960;
t8383 = (0.2e1 * t8240 + t8916) * t8916;
t7772 = -t6279 * t7612 + t7606 * t8383;
t7720 = t6594 * t7772;
t9081 = -t6687 * t7720 - t6747 * t8417;
t7773 = t6279 * t7606 + t7612 * t8383;
t7721 = t6594 * t7773;
t9080 = t6687 * t7721 - t6747 * t8418;
t8057 = t7512 * t8350;
t6487 = t8057 * t7525;
t8623 = t7585 * t7614;
t6313 = -(-t8278 * t8366 + (t6427 * t9021 + t6487 + (t8152 + (-t7608 * t8157 + t9025) * t8927) * pkin(3)) * t7614 - t8293 * t8927 + ((pkin(2) * t8144 + t8070 * t9024) * t7608 - t8351) * t7584 + (pkin(2) * t8025 - pkin(3) * t8057) * t7608 + t7447 * t8927) / ((t7098 + t7079 + (t7387 + t7433) * t7608 + t7609 * t8204 - t8117) * t7614 + (-t7884 + t7489 + (t7287 * t7581 * t7608 - pkin(2) * t8623) * t7579) * pkin(9) + t7890) * t7585 * t8927 - ((((t6487 + t8206) * t7584 + t6427) * t7614 + t7699) * t7585 + (t8843 + (((-t7438 + t7523) * t8665 + t7615 * t7973) * t7581 + ((t7608 * t8210 + t7475) * t7585 + t7896 * t8594) * pkin(3)) * t7614 + (-t7407 * t7608 + t8697 + t8979) * t7585 - (t7112 * t7615 + t7463 * t8665) * t8992) * t8915) / ((t6948 + t6866) * t7614 + t8215) * t8915 - t6541 * t8857 - t6559 * t9113;
t8958 = t6289 * t7584;
t6281 = t6313 + 0.2e1 * t8958;
t8382 = (0.2e1 * t8239 + t8915) * t8915;
t7770 = -t6281 * t7614 + t7608 * t8382;
t7718 = t6595 * t7770;
t9079 = -t6690 * t7718 - t6749 * t8414;
t7771 = t6281 * t7608 + t7614 * t8382;
t7719 = t6595 * t7771;
t9078 = t6690 * t7719 - t6749 * t8415;
t8056 = t7512 * t8348;
t6488 = t8056 * t7525;
t8621 = t7585 * t7616;
t6314 = -(-t8277 * t8364 + (t6428 * t9021 + t6488 + (t8151 + (-t7610 * t8157 + t9025) * t8926) * pkin(3)) * t7616 - t8293 * t8926 + ((pkin(2) * t8143 + t8068 * t9024) * t7610 - t8349) * t7584 + (pkin(2) * t8024 - pkin(3) * t8056) * t7610 + t7447 * t8926) / ((t7099 + t7080 + (t7388 + t7433) * t7610 + t7611 * t8204 - t8115) * t7616 + (-t7883 + t7489 + (t7288 * t7581 * t7610 - pkin(2) * t8621) * t7579) * pkin(9) + t7889) * t7585 * t8926 - ((((t6488 + t8205) * t7584 + t6428) * t7616 + t7698) * t7585 + (t8842 + (((-t7439 + t7523) * t8663 + t7617 * t7973) * t7581 + ((t7610 * t8210 + t7477) * t7585 + t7896 * t8589) * pkin(3)) * t7616 + (-t7407 * t7610 + t8697 + t8978) * t7585 - (t7113 * t7617 + t7464 * t8663) * t8992) * t8914) / ((t6949 + t6867) * t7616 + t8214) * t8914 - t6542 * t8854 - t6560 * t9112;
t8956 = t6290 * t7584;
t6283 = t6314 + 0.2e1 * t8956;
t8381 = (0.2e1 * t8238 + t8914) * t8914;
t7768 = -t6283 * t7616 + t7610 * t8381;
t7716 = t6596 * t7768;
t9077 = -t6693 * t7716 - t6751 * t8411;
t7769 = t6283 * t7610 + t7616 * t8381;
t7717 = t6596 * t7769;
t9076 = t6693 * t7717 - t6751 * t8412;
t8735 = t7558 * t7560;
t8767 = t7555 * t7557;
t7204 = -t7556 * t8735 + t8767;
t8734 = t7558 * t7619;
t7231 = t7555 * t8724 - t8734;
t8813 = t7231 * t7450;
t9069 = t7559 * (t7204 * t8576 + t7560 * t8813);
t8942 = t6306 * t7584;
t6267 = t6285 + t8942;
t6271 = t6306 + t8966;
t8925 = t6510 ^ 2 / t6669 ^ 2;
t6381 = t7584 * t8088 + t6429 / 0.2e1 + t8925 / 0.2e1;
t8011 = 0.2e1 * t8088;
t6384 = (t6429 + t8925) * t7584 + t8011;
t8604 = t7600 * t7601;
t8615 = t7595 * t7600;
t8619 = t7594 * t7595;
t8943 = t6306 * t7580;
t9056 = t8634 * t8943 + (t6267 * t8604 - t6271 * t8619 - 0.2e1 * t6381 * t8615 - t6384 * t8617) * t7581;
t8940 = t6307 * t7584;
t6268 = t6286 + t8940;
t6273 = t6307 + t8964;
t8924 = t6511 ^ 2 / t6670 ^ 2;
t6382 = t7584 * t8086 + t6430 / 0.2e1 + t8924 / 0.2e1;
t8010 = 0.2e1 * t8086;
t6385 = (t6430 + t8924) * t7584 + t8010;
t8603 = t7602 * t7603;
t8610 = t7597 * t7602;
t8614 = t7596 * t7597;
t8941 = t6307 * t7580;
t9055 = t8632 * t8941 + (t6268 * t8603 - t6273 * t8614 - 0.2e1 * t6382 * t8610 - t6385 * t8612) * t7581;
t8938 = t6308 * t7584;
t6269 = t6287 + t8938;
t6275 = t6308 + t8962;
t8923 = t6512 ^ 2 / t6671 ^ 2;
t6383 = t7584 * t8084 + t6431 / 0.2e1 + t8923 / 0.2e1;
t8009 = 0.2e1 * t8084;
t6386 = (t6431 + t8923) * t7584 + t8009;
t8602 = t7604 * t7605;
t8605 = t7599 * t7604;
t8609 = t7598 * t7599;
t8939 = t6308 * t7580;
t9054 = t8630 * t8939 + (t6269 * t8602 - t6275 * t8609 - 0.2e1 * t6383 * t8605 - t6386 * t8607) * t7581;
t8936 = t6312 * t7584;
t6276 = t6288 + t8936;
t6280 = t6312 + t8960;
t8919 = t6516 ^ 2 / t6696 ^ 2;
t6393 = t7584 * t8073 + t6432 / 0.2e1 + t8919 / 0.2e1;
t8008 = 0.2e1 * t8073;
t6396 = (t6432 + t8919) * t7584 + t8008;
t8586 = t7612 * t7613;
t8597 = t7607 * t7612;
t8601 = t7606 * t7607;
t8937 = t6312 * t7580;
t9053 = t8625 * t8937 + (t6276 * t8586 - t6280 * t8601 - 0.2e1 * t6393 * t8597 - t6396 * t8599) * t7581;
t8934 = t6313 * t7584;
t6277 = t6289 + t8934;
t6282 = t6313 + t8958;
t8918 = t6517 ^ 2 / t6697 ^ 2;
t6394 = t7584 * t8071 + t6433 / 0.2e1 + t8918 / 0.2e1;
t8007 = 0.2e1 * t8071;
t6397 = (t6433 + t8918) * t7584 + t8007;
t8585 = t7614 * t7615;
t8592 = t7609 * t7614;
t8596 = t7608 * t7609;
t8935 = t6313 * t7580;
t9052 = t8623 * t8935 + (t6277 * t8585 - t6282 * t8596 - 0.2e1 * t6394 * t8592 - t6397 * t8594) * t7581;
t8932 = t6314 * t7584;
t6278 = t6290 + t8932;
t6284 = t6314 + t8956;
t8917 = t6518 ^ 2 / t6698 ^ 2;
t6395 = t7584 * t8069 + t6434 / 0.2e1 + t8917 / 0.2e1;
t8006 = 0.2e1 * t8069;
t6398 = (t6434 + t8917) * t7584 + t8006;
t8584 = t7616 * t7617;
t8587 = t7611 * t7616;
t8591 = t7610 * t7611;
t8933 = t6314 * t7580;
t9051 = t8621 * t8933 + (t6278 * t8584 - t6284 * t8591 - 0.2e1 * t6395 * t8587 - t6398 * t8589) * t7581;
t9050 = (-t6267 * t8617 - t6271 * t8615 + 0.2e1 * t6381 * t8619 - t6384 * t8604) * t7581;
t9049 = (-t6268 * t8612 - t6273 * t8610 + 0.2e1 * t6382 * t8614 - t6385 * t8603) * t7581;
t9048 = (-t6269 * t8607 - t6275 * t8605 + 0.2e1 * t6383 * t8609 - t6386 * t8602) * t7581;
t9047 = (-t6276 * t8599 - t6280 * t8597 + 0.2e1 * t6393 * t8601 - t6396 * t8586) * t7581;
t9046 = (-t6277 * t8594 - t6282 * t8592 + 0.2e1 * t6394 * t8596 - t6397 * t8585) * t7581;
t9045 = (-t6278 * t8589 - t6284 * t8587 + 0.2e1 * t6395 * t8591 - t6398 * t8584) * t7581;
t7064 = t7231 ^ 2;
t8765 = t7555 * t7619;
t7233 = t7558 * t8724 + t8765;
t7065 = t7233 ^ 2;
t7200 = t7450 ^ 2;
t8955 = t6294 * t7595;
t8954 = t6294 * t7601;
t8953 = t6295 * t7597;
t8952 = t6295 * t7603;
t8951 = t6296 * t7599;
t8950 = t6296 * t7605;
t8949 = t6300 * t7607;
t8948 = t6300 * t7613;
t8947 = t6301 * t7609;
t8946 = t6301 * t7615;
t8945 = t6302 * t7611;
t8944 = t6302 * t7617;
t8703 = t7560 * t7639;
t8709 = t7560 * t7633;
t8742 = t7557 * t7639;
t8748 = t7557 * t7633;
t6893 = -t7557 * t8723 + (t7556 * t8742 + t8709) * t7558 + t7555 * (-t7556 * t8748 + t8703);
t6825 = t6893 * t7582 + t7162 * t7578;
t6831 = t6893 * t7578 - t7162 * t7582;
t6561 = (t6825 * t7533 - t6831 * t7527) * t7956 - (t6825 * t7527 + t6831 * t7533) * t6950;
t8901 = t6561 * t6663;
t8702 = t7560 * t7640;
t8708 = t7560 * t7634;
t8741 = t7557 * t7640;
t8747 = t7557 * t7634;
t6894 = -t7557 * t8722 + (t7556 * t8741 + t8708) * t7558 + t7555 * (-t7556 * t8747 + t8702);
t6826 = t6894 * t7582 + t7163 * t7578;
t6832 = t6894 * t7578 - t7163 * t7582;
t6562 = (t6826 * t7534 - t6832 * t7528) * t7955 - t6951 * (t6826 * t7528 + t6832 * t7534);
t8900 = t6562 * t6665;
t8701 = t7560 * t7641;
t8707 = t7560 * t7635;
t8740 = t7557 * t7641;
t8746 = t7557 * t7635;
t6895 = -t7557 * t8721 + (t7556 * t8740 + t8707) * t7558 + t7555 * (-t7556 * t8746 + t8701);
t6827 = t6895 * t7582 + t7164 * t7578;
t6833 = t6895 * t7578 - t7164 * t7582;
t6563 = (t6827 * t7535 - t6833 * t7529) * t7954 - t6952 * (t6827 * t7529 + t6833 * t7535);
t8899 = t6563 * t6667;
t8700 = t7560 * t7642;
t8706 = t7560 * t7636;
t8739 = t7557 * t7642;
t8745 = t7557 * t7636;
t6896 = -t7557 * t8720 + (t7556 * t8739 + t8706) * t7558 + t7555 * (-t7556 * t8745 + t8700);
t6828 = t6896 * t7582 + t7165 * t7578;
t6834 = t6896 * t7578 - t7165 * t7582;
t6564 = (t6828 * t7536 - t6834 * t7530) * t7953 - (t6828 * t7530 + t6834 * t7536) * t6965;
t8898 = t6564 * t6681;
t8699 = t7560 * t7643;
t8705 = t7560 * t7637;
t8738 = t7557 * t7643;
t8744 = t7557 * t7637;
t6897 = -t7557 * t8719 + (t7556 * t8738 + t8705) * t7558 + t7555 * (-t7556 * t8744 + t8699);
t6829 = t6897 * t7582 + t7166 * t7578;
t6835 = t6897 * t7578 - t7166 * t7582;
t6565 = (t6829 * t7537 - t6835 * t7531) * t7952 - t6966 * (t6829 * t7531 + t6835 * t7537);
t8897 = t6565 * t6683;
t8698 = t7560 * t7644;
t8704 = t7560 * t7638;
t8737 = t7557 * t7644;
t8743 = t7557 * t7638;
t6898 = -t7557 * t8718 + (t7556 * t8737 + t8704) * t7558 + t7555 * (-t7556 * t8743 + t8698);
t6830 = t6898 * t7582 + t7167 * t7578;
t6836 = t6898 * t7578 - t7167 * t7582;
t6566 = (t6830 * t7538 - t6836 * t7532) * t7951 - t6967 * (t6830 * t7532 + t6836 * t7538);
t8896 = t6566 * t6685;
t8892 = t6588 * t6959;
t8888 = t6589 * t6960;
t8884 = t6590 * t6961;
t8880 = t6594 * t6962;
t8876 = t6595 * t6963;
t8872 = t6596 * t6964;
t8276 = t7594 * t8768;
t6837 = t7380 + (t7262 + t7323) * t7600 + (t7512 * t8276 + t7490) * t7525;
t6765 = t6837 * t7601 + t6968;
t7220 = pkin(2) * pkin(3) + t7971;
t6819 = t7274 + (-t7480 * t8276 - t8518) * t7600 + t7220 * t7594 - t8018;
t6699 = 0.1e1 / (t6765 * t7581 + t6819 * t7585);
t8853 = t6699 * ((t7556 * t8703 - t8748) * t7558 + (-t7556 * t8709 - t8742) * t7555 - t7560 * t8723);
t8275 = t7596 * t8768;
t6838 = t7381 + (t7264 + t7323) * t7602 + (t7512 * t8275 + t7490) * t7525;
t6766 = t6838 * t7603 + t6969;
t6820 = t7275 + (-t7480 * t8275 - t8518) * t7602 + t7220 * t7596 - t8018;
t6700 = 0.1e1 / (t6766 * t7581 + t6820 * t7585);
t8852 = t6700 * ((t7556 * t8702 - t8747) * t7558 + (-t7556 * t8708 - t8741) * t7555 - t7560 * t8722);
t8274 = t7598 * t8768;
t6839 = t7382 + (t7266 + t7323) * t7604 + (t7512 * t8274 + t7490) * t7525;
t6767 = t6839 * t7605 + t6970;
t6821 = t7276 + (-t7480 * t8274 - t8518) * t7604 + t7220 * t7598 - t8018;
t6701 = 0.1e1 / (t6767 * t7581 + t6821 * t7585);
t8851 = t6701 * ((t7556 * t8701 - t8746) * t7558 + (-t7556 * t8707 - t8740) * t7555 - t7560 * t8721);
t8273 = t7606 * t8768;
t6840 = t7389 + (t7277 + t7323) * t7612 + (t7512 * t8273 + t7490) * t7525;
t6768 = t6840 * t7613 + t6977;
t6822 = t7283 + (-t7480 * t8273 - t8518) * t7612 + t7220 * t7606 - t8018;
t6702 = 0.1e1 / (t6768 * t7581 + t6822 * t7585);
t8850 = t6702 * ((t7556 * t8700 - t8745) * t7558 + (-t7556 * t8706 - t8739) * t7555 - t7560 * t8720);
t8272 = t7608 * t8768;
t6841 = t7390 + (t7279 + t7323) * t7614 + (t7512 * t8272 + t7490) * t7525;
t6769 = t6841 * t7615 + t6978;
t6823 = t7284 + (-t7480 * t8272 - t8518) * t7614 + t7220 * t7608 - t8018;
t6703 = 0.1e1 / (t6769 * t7581 + t6823 * t7585);
t8849 = t6703 * ((t7556 * t8699 - t8744) * t7558 + (-t7556 * t8705 - t8738) * t7555 - t7560 * t8719);
t8271 = t7610 * t8768;
t6842 = t7391 + (t7281 + t7323) * t7616 + (t7512 * t8271 + t7490) * t7525;
t6770 = t6842 * t7617 + t6979;
t6824 = t7285 + (-t7480 * t8271 - t8518) * t7616 + t7220 * t7610 - t8018;
t6704 = 0.1e1 / (t6770 * t7581 + t6824 * t7585);
t8848 = t6704 * ((t7556 * t8698 - t8743) * t7558 + (-t7556 * t8704 - t8737) * t7555 - t7560 * t8718);
t8583 = t7618 * t7619;
t7073 = (t7556 * t8765 - t7558 * t8726) * t7620 - t7555 * t8583;
t8823 = t7073 * t7556;
t7074 = (-t7555 * t8726 - t7556 * t8734) * t7620 + t7558 * t8583;
t8822 = t7074 * t7555;
t7201 = -t7556 * t8767 + t8735;
t8815 = t7201 * t7231;
t8814 = t7231 * t7233;
t8812 = t7231 * t7555;
t8811 = t7233 * t7450;
t8810 = t7233 * t7558;
t8806 = t7348 * t7585;
t8805 = t7350 * t7585;
t8804 = t7352 * t7585;
t8800 = t7365 * t7585;
t8799 = t7367 * t7585;
t8798 = t7368 * t7585;
t8785 = t7450 * t7556;
t8766 = t7555 * t7559;
t8751 = t7557 * t7558;
t8736 = t7558 * t7559;
t8727 = t7559 * t7560;
t8674 = t7580 * t7594;
t8672 = t7580 * t7596;
t8670 = t7580 * t7598;
t8668 = t7580 * t7606;
t8666 = t7580 * t7608;
t8664 = t7580 * t7610;
t8067 = t8675 * t8925;
t8392 = t6306 * t8674;
t8556 = -t7585 * t8392 - t7600 * t8067 + t9050;
t8066 = t8675 * t8924;
t8391 = t6307 * t8672;
t8555 = -t7585 * t8391 - t7602 * t8066 + t9049;
t8554 = -t7596 * t8066 + t9055;
t8065 = t8675 * t8923;
t8390 = t6308 * t8670;
t8553 = -t7585 * t8390 - t7604 * t8065 + t9048;
t8552 = -t7598 * t8065 + t9054;
t8061 = t8675 * t8919;
t8389 = t6312 * t8668;
t8551 = -t7585 * t8389 - t7612 * t8061 + t9047;
t8550 = -t7606 * t8061 + t9053;
t8060 = t8675 * t8918;
t8388 = t6313 * t8666;
t8549 = -t7585 * t8388 - t7614 * t8060 + t9046;
t8548 = -t7608 * t8060 + t9052;
t8059 = t8675 * t8917;
t8387 = t6314 * t8664;
t8547 = -t7585 * t8387 - t7616 * t8059 + t9045;
t8546 = -t7610 * t8059 + t9051;
t8545 = -t7594 * t8067 + t9056;
t7202 = t7555 * t7560 + t7556 * t8751;
t8544 = t7202 * t7073 - t7201 * t8813;
t7203 = t7555 * t8764 + t8751;
t8543 = t7204 * t7073 - t7203 * t8813;
t8536 = t7074 * t8727 - t7204 * t8814;
t8327 = t7559 * t8814;
t8535 = t7556 * t7074 - t7558 * t8327;
t8269 = t7559 * t8576;
t8326 = t7233 * t8727;
t8534 = t7203 * t8269 + t7450 * t8326;
t7354 = -pkin(9) * t8688 + t8465;
t7881 = (pkin(3) * t8645 + t8443) * t7585 - t8473;
t8209 = t7580 * t8515;
t6495 = (-t6894 * ((-t7290 * t7354 + t7296 * t7881) * t7602 - t7596 * (t7290 * t7344 - t7296 * t8805 + t7151)) - ((t7344 * t7596 + t7354 * t7602) * t7296 + (t7881 * t7602 + (-t8134 + t8805) * t7596) * t7290) * t7163) / (((-0.2e1 * t8016 + t8611) * t8677 + t7261) * t7569 + ((pkin(3) * (t8209 * t8614 + t7272) + t8532) * t7581 - t8828) * t7602 + (t7272 * t8693 - t7969 + t8525) * t8975 + t7038);
t8511 = -0.2e1 * t6495 * t6511;
t7355 = -pkin(9) * t8687 + t8464;
t7880 = (pkin(3) * t8644 + t8442) * t7585 - t8473;
t6496 = (-t6895 * ((-t7291 * t7355 + t7297 * t7880) * t7604 - t7598 * (t7291 * t7346 - t7297 * t8804 + t7152)) - t7164 * ((t7346 * t7598 + t7355 * t7604) * t7297 + (t7880 * t7604 + (-t8134 + t8804) * t7598) * t7291)) / (((-0.2e1 * t8015 + t8606) * t8677 + t7261) * t7570 + ((pkin(3) * (t8209 * t8609 + t7273) + t8531) * t7581 - t8827) * t7604 + (t7273 * t8691 - t7968 + t8524) * t8975 + t7039);
t8510 = -0.2e1 * t6496 * t6512;
t7353 = -pkin(9) * t8689 + t8466;
t7882 = (pkin(3) * t8646 + t8444) * t7585 - t8473;
t6497 = (-((-t7289 * t7353 + t7295 * t7882) * t7600 - t7594 * (t7289 * t7342 - t7295 * t8806 + t7150)) * t6893 - t7162 * ((t7342 * t7594 + t7353 * t7600) * t7295 + (t7882 * t7600 + (-t8134 + t8806) * t7594) * t7289)) / (((-0.2e1 * t8017 + t8616) * t8677 + t7261) * t7568 + ((pkin(3) * (t8209 * t8619 + t7271) + t8533) * t7581 - t8829) * t7600 + (t7271 * t8695 - t7970 + t8526) * t8975 + t7037);
t8509 = -0.2e1 * t6497 * t6510;
t7372 = -pkin(9) * t8679 + t8462;
t7878 = (pkin(3) * t8639 + t8440) * t7585 - t8473;
t6498 = (-t6897 * ((-t7293 * t7372 + t7299 * t7878) * t7614 - t7608 * (t7293 * t7362 - t7299 * t8799 + t7154)) - t7166 * ((t7362 * t7608 + t7372 * t7614) * t7299 + (t7878 * t7614 + (-t8134 + t8799) * t7608) * t7293)) / (((-0.2e1 * t8013 + t8593) * t8677 + t7261) * t7575 + (((t8209 * t8596 + t7287) * pkin(3) + t8529) * t7581 - t8825) * t7614 + (t7287 * t8684 - t7966 + t8522) * t8975 + t7041);
t8508 = -0.2e1 * t6498 * t6517;
t7371 = -pkin(9) * t8680 + t8463;
t7879 = (pkin(3) * t8640 + t8441) * t7585 - t8473;
t6499 = (-((-t7292 * t7371 + t7298 * t7879) * t7612 - t7606 * (t7292 * t7360 - t7298 * t8800 + t7153)) * t6896 - ((t7360 * t7606 + t7371 * t7612) * t7298 + (t7879 * t7612 + (-t8134 + t8800) * t7606) * t7292) * t7165) / (((-0.2e1 * t8014 + t8598) * t8677 + t7261) * t7574 + ((pkin(3) * (t8209 * t8601 + t7286) + t8530) * t7581 - t8826) * t7612 + (t7286 * t8686 - t7967 + t8523) * t8975 + t7040);
t8507 = -0.2e1 * t6499 * t6516;
t7373 = -pkin(9) * t8678 + t8461;
t7877 = (pkin(3) * t8638 + t8439) * t7585 - t8473;
t6500 = (-((-t7294 * t7373 + t7300 * t7877) * t7616 - (t7294 * t7363 - t7300 * t8798 + t7155) * t7610) * t6898 - ((t7363 * t7610 + t7373 * t7616) * t7300 + (t7877 * t7616 + t7610 * (-t8134 + t8798)) * t7294) * t7167) / (((-0.2e1 * t8012 + t8588) * t8677 + t7261) * t7576 + (((t8209 * t8591 + t7288) * pkin(3) + t8528) * t7581 - t8824) * t7616 + (t7288 * t8682 - t7965 + t8521) * t8975 + t7042);
t8506 = -0.2e1 * t6500 * t6518;
t8505 = 0.2e1 * t8922;
t8504 = 0.2e1 * t8921;
t8503 = 0.2e1 * t8920;
t8502 = 0.2e1 * t8916;
t8501 = 0.2e1 * t8915;
t8500 = 0.2e1 * t8914;
t8434 = t6271 * t6651 * t6959;
t8433 = t6273 * t6652 * t6960;
t8432 = t6275 * t6653 * t6961;
t8431 = t6280 * t6654 * t6962;
t8430 = t6282 * t6655 * t6963;
t8429 = t6284 * t6656 * t6964;
t8428 = t6285 * t8901;
t8425 = t6286 * t8900;
t8422 = t6287 * t8899;
t8419 = t6288 * t8898;
t8416 = t6289 * t8897;
t8413 = t6290 * t8896;
t8410 = t6588 * t8955;
t8409 = t6588 * t8954;
t8407 = t6589 * t8953;
t8406 = t6589 * t8952;
t8404 = t6590 * t8951;
t8403 = t6590 * t8950;
t8401 = t6594 * t8949;
t8400 = t6594 * t8948;
t8398 = t6595 * t8947;
t8397 = t6595 * t8946;
t8395 = t6596 * t8945;
t8394 = t6596 * t8944;
t8380 = t6651 * t6429;
t8379 = t6652 * t6430;
t8378 = t6653 * t6431;
t8371 = t6654 * t6432;
t8370 = t6655 * t6433;
t8369 = t6656 * t6434;
t8347 = t6672 * t8892;
t8346 = t8170 * t8892;
t8345 = t6675 * t8888;
t8344 = t8169 * t8888;
t8343 = t6678 * t8884;
t8342 = t8168 * t8884;
t8341 = t6687 * t8880;
t8340 = t8167 * t8880;
t8339 = t6690 * t8876;
t8338 = t8166 * t8876;
t8337 = t6693 * t8872;
t8336 = t8165 * t8872;
t8335 = t7073 * t8750;
t8328 = t7202 * t8576;
t8325 = t7450 * t8750;
t7526 = t7559 ^ 2;
t8284 = t7526 * t8576;
t8225 = t8922 / 0.2e1;
t8224 = t8921 / 0.2e1;
t8223 = t8920 / 0.2e1;
t8222 = t8916 / 0.2e1;
t8221 = t8915 / 0.2e1;
t8220 = t8914 / 0.2e1;
t8186 = t6606 * t8556;
t8185 = t6606 * t8545;
t8184 = t6607 * t8555;
t8183 = t6607 * t8554;
t8182 = t6608 * t8553;
t8181 = t6608 * t8552;
t8180 = t6612 * t8551;
t8179 = t6612 * t8550;
t8178 = t6613 * t8549;
t8177 = t6613 * t8548;
t8176 = t6614 * t8547;
t8175 = t6614 * t8546;
t8103 = t6294 * t8346;
t8102 = t6295 * t8344;
t8101 = t6296 * t8342;
t8100 = t6300 * t8340;
t8099 = t6301 * t8338;
t8098 = t6302 * t8336;
t8097 = t8901 * t6429;
t8096 = t7594 * t8380;
t8095 = t7600 * t8380;
t8094 = t8900 * t6430;
t8093 = t7596 * t8379;
t8092 = t7602 * t8379;
t8091 = t8899 * t6431;
t8090 = t7598 * t8378;
t8089 = t7604 * t8378;
t8082 = t8898 * t6432;
t8081 = t7606 * t8371;
t8080 = t7612 * t8371;
t8079 = t8897 * t6433;
t8078 = t7608 * t8370;
t8077 = t7614 * t8370;
t8076 = t8896 * t6434;
t8075 = t7610 * t8369;
t8074 = t7616 * t8369;
t8055 = t6672 * t8410;
t8054 = t6672 * t8409;
t8053 = t6675 * t8407;
t8052 = t6675 * t8406;
t8051 = t6678 * t8404;
t8050 = t6678 * t8403;
t8049 = t6687 * t8401;
t8048 = t6687 * t8400;
t8047 = t6690 * t8398;
t8046 = t6690 * t8397;
t8045 = t6693 * t8395;
t8044 = t6693 * t8394;
t6249 = t6291 + 0.2e1 * t8460;
t6201 = (-t6249 * t7594 + t6306 * t9006) * t7584 + (t8408 + 0.2e1 * t9012) * t7600 - pkin(8) * t8392;
t6405 = t7584 * t8225 + t8931;
t6408 = t8225 + t8243;
t6375 = t6405 * t7546 + t6408 * t8454;
t8005 = t6375 * t8505 - t6201;
t6251 = t6292 + 0.2e1 * t8459;
t6202 = (-t6251 * t7596 + t6307 * t9005) * t7584 + (t8405 + 0.2e1 * t9011) * t7602 - pkin(8) * t8391;
t6406 = t7584 * t8224 + t8930;
t6409 = t8224 + t8242;
t6376 = t6406 * t7547 + t6409 * t8453;
t8004 = t6376 * t8504 - t6202;
t6253 = t6293 + 0.2e1 * t8458;
t6203 = (-t6253 * t7598 + t6308 * t9004) * t7584 + (t8402 + 0.2e1 * t9010) * t7604 - pkin(8) * t8390;
t6407 = t7584 * t8223 + t8929;
t6410 = t8223 + t8241;
t6377 = t6407 * t7548 + t6410 * t8452;
t8003 = t6377 * t8503 - t6203;
t6204 = (-t8408 + (-0.2e1 * t6285 - t8942) * pkin(2)) * t7594 - t7600 * (pkin(8) * t8943 + t6249 * t7584);
t6379 = -pkin(8) * t6408 * t8674 + t6405 * t9006;
t8002 = t6379 * t8505 - t6204;
t6205 = (-t8405 + (-0.2e1 * t6286 - t8940) * pkin(2)) * t7596 - t7602 * (pkin(8) * t8941 + t6251 * t7584);
t6380 = -pkin(8) * t6409 * t8672 + t6406 * t9005;
t8001 = t6380 * t8504 - t6205;
t6206 = (-t8402 + (-0.2e1 * t6287 - t8938) * pkin(2)) * t7598 - t7604 * (pkin(8) * t8939 + t6253 * t7584);
t6378 = -pkin(8) * t6410 * t8670 + t6407 * t9004;
t8000 = t6378 * t8503 - t6206;
t6258 = t6297 + 0.2e1 * t8457;
t6207 = (-t6258 * t7606 + t6312 * t9003) * t7584 + (t8399 + 0.2e1 * t9009) * t7612 - pkin(8) * t8389;
t6414 = t7584 * t8222 + t8928;
t6417 = t8222 + t8240;
t6387 = t6414 * t7552 + t6417 * t8451;
t7999 = t6387 * t8502 - t6207;
t6260 = t6298 + 0.2e1 * t8456;
t6208 = (-t6260 * t7608 + t6313 * t9002) * t7584 + (t8396 + 0.2e1 * t9008) * t7614 - pkin(8) * t8388;
t6415 = t7584 * t8221 + t8927;
t6418 = t8221 + t8239;
t6388 = t6415 * t7553 + t6418 * t8450;
t7998 = t6388 * t8501 - t6208;
t6262 = t6299 + 0.2e1 * t8455;
t6209 = (-t6262 * t7610 + t6314 * t9001) * t7584 + (t8393 + 0.2e1 * t9007) * t7616 - pkin(8) * t8387;
t6416 = t7584 * t8220 + t8926;
t6419 = t8220 + t8238;
t6389 = t6416 * t7554 + t6419 * t8449;
t7997 = t6389 * t8500 - t6209;
t6210 = (-t8399 + (-0.2e1 * t6288 - t8936) * pkin(2)) * t7606 - t7612 * (pkin(8) * t8937 + t6258 * t7584);
t6390 = -pkin(8) * t6417 * t8668 + t6414 * t9003;
t7996 = t6390 * t8502 - t6210;
t6211 = (-t8396 + (-0.2e1 * t6289 - t8934) * pkin(2)) * t7608 - t7614 * (pkin(8) * t8935 + t6260 * t7584);
t6391 = -pkin(8) * t6418 * t8666 + t6415 * t9002;
t7995 = t6391 * t8501 - t6211;
t6212 = (-t8393 + (-0.2e1 * t6290 - t8932) * pkin(2)) * t7610 - t7616 * (pkin(8) * t8933 + t6262 * t7584);
t6392 = -pkin(8) * t6419 * t8664 + t6416 * t9001;
t7994 = t6392 * t8500 - t6212;
t7950 = t7600 * t8097;
t7949 = t6959 * t8096;
t7948 = t6959 * t8095;
t7947 = t7594 * t8095;
t7946 = t7602 * t8094;
t7945 = t6960 * t8093;
t7944 = t6960 * t8092;
t7943 = t7596 * t8092;
t7942 = t7604 * t8091;
t7941 = t6961 * t8090;
t7940 = t6961 * t8089;
t7939 = t7598 * t8089;
t7938 = t7612 * t8082;
t7937 = t6962 * t8081;
t7936 = t6962 * t8080;
t7935 = t7606 * t8080;
t7934 = t7614 * t8079;
t7933 = t6963 * t8078;
t7932 = t6963 * t8077;
t7931 = t7608 * t8077;
t7930 = t7616 * t8076;
t7929 = t6964 * t8075;
t7928 = t6964 * t8074;
t7927 = t7610 * t8074;
t7926 = t6735 * t8095;
t7925 = t6737 * t8092;
t7924 = t6739 * t8089;
t7923 = t6741 * t8095;
t7922 = t6743 * t8092;
t7921 = t6745 * t8089;
t7920 = t6747 * t8080;
t7919 = t6749 * t8077;
t7918 = t6751 * t8074;
t7917 = t6753 * t8080;
t7916 = t6755 * t8077;
t7915 = t6757 * t8074;
t7914 = t6765 * t7585 - t6819 * t7581;
t7913 = t6766 * t7585 - t6820 * t7581;
t7912 = t6767 * t7585 - t6821 * t7581;
t7911 = t6768 * t7585 - t6822 * t7581;
t7910 = t6769 * t7585 - t6823 * t7581;
t7909 = t6770 * t7585 - t6824 * t7581;
t7862 = t6588 * t8005;
t7861 = t6588 * t8002;
t7860 = t6589 * t8004;
t7859 = t6589 * t8001;
t7858 = t6590 * t8003;
t7857 = t6590 * t8000;
t7856 = t6594 * t7999;
t7855 = t6594 * t7996;
t7854 = t6595 * t7998;
t7853 = t6595 * t7995;
t7852 = t6596 * t7997;
t7851 = t6596 * t7994;
t7832 = -t6285 * t7595 - t7601 * t6429;
t7831 = t6285 * t7601 - t7595 * t6429;
t7830 = -t6286 * t7597 - t7603 * t6430;
t7829 = t6286 * t7603 - t7597 * t6430;
t7828 = -t6287 * t7599 - t7605 * t6431;
t7827 = t6287 * t7605 - t7599 * t6431;
t7826 = -t6288 * t7607 - t7613 * t6432;
t7825 = t6288 * t7613 - t7607 * t6432;
t7824 = -t6289 * t7609 - t7615 * t6433;
t7823 = t6289 * t7615 - t7609 * t6433;
t7822 = -t6290 * t7611 - t7617 * t6434;
t7821 = t6290 * t7617 - t7611 * t6434;
t7820 = t7046 * t7580 * t7601 - t6837 * t7595;
t7819 = t7047 * t7580 * t7603 - t6838 * t7597;
t7818 = t7048 * t7580 * t7605 - t6839 * t7599;
t7817 = t7061 * t7580 * t7613 - t6840 * t7607;
t7816 = t7062 * t7580 * t7615 - t6841 * t7609;
t7815 = t7063 * t7580 * t7617 - t6842 * t7611;
t7796 = -t7074 * t7201 + t7202 * t8811;
t7795 = -t7074 * t7203 + t7204 * t8811;
t7791 = t6672 * t7862;
t7790 = t6675 * t7860;
t7789 = t6678 * t7858;
t7788 = t6672 * t7861;
t7787 = t6675 * t7859;
t7786 = t6678 * t7857;
t7785 = t6687 * t7856;
t7784 = t6690 * t7854;
t7783 = t6693 * t7852;
t7782 = t6687 * t7855;
t7781 = t6690 * t7853;
t7780 = t6693 * t7851;
t7767 = -t7073 * t8727 - t7203 * t8814;
t7753 = t6606 * t7832;
t7752 = t6606 * t7831;
t7751 = t6607 * t7830;
t7750 = t6607 * t7829;
t7749 = t6608 * t7828;
t7748 = t6608 * t7827;
t7747 = t6612 * t7826;
t7746 = t6612 * t7825;
t7745 = t6613 * t7824;
t7744 = t6613 * t7823;
t7743 = t6614 * t7822;
t7742 = t6614 * t7821;
t7728 = -t7231 * t8785 - t7558 * t8284;
t7714 = t6285 * t7594 ^ 2 + t8011 * t8618;
t7712 = t6286 * t7596 ^ 2 + t8010 * t8613;
t7710 = t6287 * t7598 ^ 2 + t8009 * t8608;
t7708 = t6288 * t7606 ^ 2 + t8008 * t8600;
t7706 = t6289 * t7608 ^ 2 + t8007 * t8595;
t7704 = t6290 * t7610 ^ 2 + t8006 * t8590;
t7684 = t6588 * t7714;
t7682 = t6589 * t7712;
t7680 = t6590 * t7710;
t7678 = t6594 * t7708;
t7676 = t6595 * t7706;
t7674 = t6596 * t7704;
t7672 = t6672 * t7684;
t7670 = t6675 * t7682;
t7668 = t6678 * t7680;
t7666 = t6687 * t7678;
t7664 = t6690 * t7676;
t7662 = t6693 * t7674;
t7561 = t7580 ^ 2;
t7103 = t7201 * t8269;
t7087 = t7233 * t8785;
t7044 = -t7200 + t7064;
t6987 = t7073 * t8736;
t6931 = -t7065 + t7200;
t6881 = -t7064 + t7065;
t6876 = t7202 * t8814;
t6875 = -t7200 - t7065;
t6874 = -t7200 - t7064;
t6843 = -t7064 - t7065;
t6578 = t7294 * t7815 + t7300 * t7909;
t6577 = -t7294 * t7909 + t7300 * t7815;
t6576 = -t7293 * t7910 + t7299 * t7816;
t6575 = -t7292 * t7911 + t7298 * t7817;
t6574 = t7293 * t7816 + t7299 * t7910;
t6573 = t7292 * t7817 + t7298 * t7911;
t6572 = -t7291 * t7912 + t7297 * t7818;
t6571 = -t7290 * t7913 + t7296 * t7819;
t6570 = -t7289 * t7914 + t7295 * t7820;
t6569 = t7291 * t7818 + t7297 * t7912;
t6568 = t7290 * t7819 + t7296 * t7913;
t6567 = t7289 * t7820 + t7295 * t7914;
t6554 = -t6576 * t8849 - t7145;
t6553 = -t6575 * t8850 - t7144;
t6552 = -t6577 * t8848 - t7146;
t6551 = -t6572 * t8851 - t7143;
t6550 = -t6571 * t8852 - t7142;
t6549 = -t6570 * t8853 - t7141;
t6548 = t6578 * t8848 + t9031;
t6547 = t6574 * t8849 + t9030;
t6546 = t6573 * t8850 + t9029;
t6545 = t6569 * t8851 + t9028;
t6544 = t6568 * t8852 + t9027;
t6543 = t6567 * t8853 + t9026;
t6464 = (-t6577 * t6898 - t6578 * t7167) * t6704;
t6463 = (-t6574 * t7166 - t6576 * t6897) * t6703;
t6462 = (-t6573 * t7165 - t6575 * t6896) * t6702;
t6461 = (-t6569 * t7164 - t6572 * t6895) * t6701;
t6460 = (-t6568 * t7163 - t6571 * t6894) * t6700;
t6459 = (-t6567 * t7162 - t6570 * t6893) * t6699;
t1 = [t6294 * t8910 + t6295 * t8909 + t6296 * t8908 + t6300 * t8904 + t6301 * t8903 + t6302 * t8902, t6285 * t9075 + t6286 * t9074 + t6287 * t9073 + t6288 * t9072 + t6289 * t9071 + t6290 * t9070, (t6528 * t7752 + t6529 * t7750 + t6530 * t7748 + t6534 * t7746 + t6535 * t7744 + t6536 * t7742 + t8165 * t8394 + t8166 * t8397 + t8167 * t8400 + t8168 * t8403 + t8169 * t8406 + t8170 * t8409) * t7581, (t6528 * t7753 + t6529 * t7751 + t6530 * t7749 + t6534 * t7747 + t6535 * t7745 + t6536 * t7743 - t8165 * t8395 - t8166 * t8398 - t8167 * t8401 - t8168 * t8404 - t8169 * t8407 - t8170 * t8410) * t7581, (t7594 * t7923 + t7596 * t7922 + t7598 * t7921 + t7606 * t7917 + t7608 * t7916 + t7610 * t7915 + t7674 * t8165 + t7676 * t8166 + t7678 * t8167 + t7680 * t8168 + t7682 * t8169 + t7684 * t8170) * t7561, (t7675 * t8165 + t7677 * t8166 + t7679 * t8167 + t7681 * t8168 + t7683 * t8169 + t7685 * t8170 + t9118 + t9119 + t9120 + t9121 + t9122 + t9123) * t7561, (-t9108 - t9104 - t9100 - t9096 - t9092 - t9088 + t8165 * t7717 + t8166 * t7719 + t8167 * t7721 + t8168 * t7723 + t8169 * t7725 + t8170 * t7727 + (t7915 + t7916 + t7917 + t7921 + t7922 + t7923) * t7584) * t7580, (-t9109 - t9105 - t9101 - t9097 - t9093 - t9089 - t8165 * t7716 - t8166 * t7718 - t8167 * t7720 - t8168 * t7722 - t8169 * t7724 - t8170 * t7726 + (-t6741 * t8096 - t6743 * t8093 - t6745 * t8090 - t6753 * t8081 - t6755 * t8078 - t6757 * t8075) * t7584) * t7580, -t6271 * t8869 - t6273 * t8866 - t6275 * t8863 - t6280 * t8860 - t6282 * t8857 - t6284 * t8854 + (t6271 * t9075 + t6273 * t9074 + t6275 * t9073 + t6280 * t9072 + t6282 * t9071 + t6284 * t9070) * t7584, t6528 * t8185 + t6529 * t8183 + t6530 * t8181 + t6534 * t8179 + t6535 * t8177 + t6536 * t8175 - t8165 * t7852 - t8166 * t7854 - t8167 * t7856 - t8168 * t7858 - t8169 * t7860 - t8170 * t7862 - t9090 - t9094 - t9098 - t9102 - t9106 - t9110, t6528 * t8186 + t6529 * t8184 + t6530 * t8182 + t6534 * t8180 + t6535 * t8178 + t6536 * t8176 - t8165 * t7851 - t8166 * t7853 - t8167 * t7855 - t8168 * t7857 - t8169 * t7859 - t8170 * t7861 - t9091 - t9095 - t9099 - t9103 - t9107 - t9111, 0, 0, 0, 0, 0, 0, t6874 * t8736 - t8823 + t7087 + (-t8284 + t8327) * t7555, -t6875 * t8766 + t7728 + t8535, t6843 * t7556 + t6987 + (t8822 + (t8810 + t8812) * t7450) * t7559, 0; t6294 * t8913 + t6295 * t8912 + t6296 * t8911 + t6300 * t8907 + t6301 * t8906 + t6302 * t8905, t6285 * t8895 + t6286 * t8891 + t6287 * t8887 + t6288 * t8883 + t6289 * t8879 + t6290 * t8875, (t6525 * t7752 + t6526 * t7750 + t6527 * t7748 + t6531 * t7746 + t6532 * t7744 + t6533 * t7742 + t8044 + t8046 + t8048 + t8050 + t8052 + t8054) * t7581, (t6525 * t7753 + t6526 * t7751 + t6527 * t7749 + t6531 * t7747 + t6532 * t7745 + t6533 * t7743 - t8045 - t8047 - t8049 - t8051 - t8053 - t8055) * t7581, (t7594 * t7926 + t7596 * t7925 + t7598 * t7924 + t7606 * t7920 + t7608 * t7919 + t7610 * t7918 + t7662 + t7664 + t7666 + t7668 + t7670 + t7672) * t7561, (t9124 + t9125 + t9126 + t9127 + t9128 + t9129) * t7561, ((t7918 + t7919 + t7920 + t7924 + t7925 + t7926) * t7584 + t9076 + t9078 + t9080 + t9082 + t9084 + t9086) * t7580, ((-t6735 * t8096 - t6737 * t8093 - t6739 * t8090 - t6747 * t8081 - t6749 * t8078 - t6751 * t8075) * t7584 + t9077 + t9079 + t9081 + t9083 + t9085 + t9087) * t7580, -t6271 * t9117 - t6273 * t9116 - t6275 * t9115 - t6280 * t9114 - t6282 * t9113 - t6284 * t9112 + (t6271 * t8895 + t6273 * t8891 + t6275 * t8887 + t6280 * t8883 + t6282 * t8879 + t6284 * t8875) * t7584, t6525 * t8185 + t6526 * t8183 + t6527 * t8181 + t6531 * t8179 + t6532 * t8177 + t6533 * t8175 - t6735 * t7850 - t6737 * t7848 - t6739 * t7846 - t6747 * t7844 - t6749 * t7842 - t6751 * t7840 - t7783 - t7784 - t7785 - t7789 - t7790 - t7791, t6525 * t8186 + t6526 * t8184 + t6527 * t8182 + t6531 * t8180 + t6532 * t8178 + t6533 * t8176 - t6735 * t7849 - t6737 * t7847 - t6739 * t7845 - t6747 * t7843 - t6749 * t7841 - t6751 * t7839 - t7780 - t7781 - t7782 - t7786 - t7787 - t7788, 0, 0, 0, 0, 0, 0, t8335 + t6874 * t7202 + t7103 + (-t8325 - t8815) * t7233, t6875 * t7201 - t6876 + (-t8328 + (-t7074 + t8813) * t7557) * t7559, -t6843 * t8750 + t7796 + t8544, 0; t7656 + t7657 + t7658 + t7659 + t7660 + (t7141 + t7142 + t7143 + t7144 + t7145 + t7146) * t8270 + t7661, 0, (t7821 + t7823 + t7825 + t7827 + t7829 + t7831) * t7581, (t7822 + t7824 + t7826 + t7828 + t7830 + t7832) * t7581, 0, 0, 0, 0, 0, (-t7594 * t8925 - t7596 * t8924 - t7598 * t8923 - t7606 * t8919 - t7608 * t8918 - t7610 * t8917) * t8675 + t9051 + t9052 + t9053 + t9054 + t9055 + t9056, (-t6306 * t7594 - t6307 * t7596 - t6308 * t7598 - t6312 * t7606 - t6313 * t7608 - t6314 * t7610 - t7600 * t8925 - t7602 * t8924 - t7604 * t8923 - t7612 * t8919 - t7614 * t8918 - t7616 * t8917) * t8675 + t9045 + t9046 + t9047 + t9048 + t9049 + t9050, 0, 0, 0, 0, 0, 0, t6874 * t7204 + t7767 + t8534, t6875 * t7203 + t8536 - t9069, t6843 * t8727 + t7795 + t8543, 0; t6294 * t6543 + t6295 * t6544 + t6296 * t6545 + t6300 * t6546 + t6301 * t6547 + t6302 * t6548, -t6285 * t8347 - t6286 * t8345 - t6287 * t8343 - t6288 * t8341 - t6289 * t8339 - t6290 * t8337, (t6543 * t7831 + t6544 * t7829 + t6545 * t7827 + t6546 * t7825 + t6547 * t7823 + t6548 * t7821 - t6959 * t8054 - t6960 * t8052 - t6961 * t8050 - t6962 * t8048 - t6963 * t8046 - t6964 * t8044) * t7581, (t6543 * t7832 + t6544 * t7830 + t6545 * t7828 + t6546 * t7826 + t6547 * t7824 + t6548 * t7822 + t6959 * t8055 + t6960 * t8053 + t6961 * t8051 + t6962 * t8049 + t6963 * t8047 + t6964 * t8045) * t7581, (-(t6751 * t7927 + t7662) * t6964 - (t6749 * t7931 + t7664) * t6963 - (t6747 * t7935 + t7666) * t6962 - (t6739 * t7939 + t7668) * t6961 - (t6737 * t7943 + t7670) * t6960 - (t6735 * t7947 + t7672) * t6959) * t7561, (-t9129 * t6959 - t9128 * t6960 - t9127 * t6961 - t9126 * t6962 - t9125 * t6963 - t9124 * t6964) * t7561, (-t9076 * t6964 - t9078 * t6963 - t9080 * t6962 - t9082 * t6961 - t9084 * t6960 - t9086 * t6959 + (-t6735 * t7948 - t6737 * t7944 - t6739 * t7940 - t6747 * t7936 - t6749 * t7932 - t6751 * t7928) * t7584) * t7580, (-t9077 * t6964 - t9079 * t6963 - t9081 * t6962 - t9083 * t6961 - t9085 * t6960 - t9087 * t6959 + (t6735 * t7949 + t6737 * t7945 + t6739 * t7941 + t6747 * t7937 + t6749 * t7933 + t6751 * t7929) * t7584) * t7580, t6735 * t8434 + t6737 * t8433 + t6739 * t8432 + t6747 * t8431 + t6749 * t8430 + t6751 * t8429 + (-t6271 * t8347 - t6273 * t8345 - t6275 * t8343 - t6280 * t8341 - t6282 * t8339 - t6284 * t8337) * t7584, t8546 * t6548 + t8548 * t6547 + t8550 * t6546 + t8552 * t6545 + t8554 * t6544 + t8545 * t6543 - (-t7983 * t9112 - t7783) * t6964 - (-t7985 * t9113 - t7784) * t6963 - (-t7987 * t9114 - t7785) * t6962 - (-t7989 * t9115 - t7789) * t6961 - (-t7991 * t9116 - t7790) * t6960 - (-t7993 * t9117 - t7791) * t6959, t8547 * t6548 + t8549 * t6547 + t8551 * t6546 + t8553 * t6545 + t8555 * t6544 + t8556 * t6543 - (-t7982 * t9112 - t7780) * t6964 - (-t7984 * t9113 - t7781) * t6963 - (-t7986 * t9114 - t7782) * t6962 - (-t7988 * t9115 - t7786) * t6961 - (-t7990 * t9116 - t7787) * t6960 - (-t7992 * t9117 - t7788) * t6959, t7074 * t8736 + (t7231 * t7556 - t7450 * t8766) * t7233, t6881 * t7556 + t6987 + (-t8822 + (-t8810 + t8812) * t7450) * t7559, -t6931 * t8766 - t7728 + t8535, -t7073 * t8766 + (-t7233 * t7556 + t7450 * t8736) * t7231, t7044 * t8736 + t8823 + t7087 + (-t8284 - t8327) * t7555, (t7556 * t8576 + (-t7231 * t7558 + t7233 * t7555) * t7450) * t7559, 0, 0, 0, 0; t6294 * t6549 + t6295 * t6550 + t6296 * t6551 + t6300 * t6553 + t6301 * t6554 + t6302 * t6552, t6285 * t8346 + t6286 * t8344 + t6287 * t8342 + t6288 * t8340 + t6289 * t8338 + t6290 * t8336, (t6549 * t7831 + t6550 * t7829 + t6551 * t7827 + t6552 * t7821 + t6553 * t7825 + t6554 * t7823 + t7601 * t8103 + t7603 * t8102 + t7605 * t8101 + t7613 * t8100 + t7615 * t8099 + t7617 * t8098) * t7581, (t6549 * t7832 + t6550 * t7830 + t6551 * t7828 + t6552 * t7822 + t6553 * t7826 + t6554 * t7824 - t7595 * t8103 - t7597 * t8102 - t7599 * t8101 - t7607 * t8100 - t7609 * t8099 - t7611 * t8098) * t7581, (-(-t6757 * t7927 - t7704 * t9070) * t6964 - (-t6755 * t7931 - t7706 * t9071) * t6963 - (-t6753 * t7935 - t7708 * t9072) * t6962 - (-t6745 * t7939 - t7710 * t9073) * t6961 - (-t6743 * t7943 - t7712 * t9074) * t6960 - (-t6741 * t7947 - t7714 * t9075) * t6959) * t7561, (-(-t7705 * t9070 - t9118) * t6964 - (-t7707 * t9071 - t9119) * t6963 - (-t7709 * t9072 - t9120) * t6962 - (-t7711 * t9073 - t9121) * t6961 - (-t7713 * t9074 - t9122) * t6960 - (-t7715 * t9075 - t9123) * t6959) * t7561, (-(-t7769 * t9070 + t9088) * t6964 - (-t7771 * t9071 + t9092) * t6963 - (-t7773 * t9072 + t9096) * t6962 - (-t7775 * t9073 + t9100) * t6961 - (-t7777 * t9074 + t9104) * t6960 - (-t7779 * t9075 + t9108) * t6959 + (t6741 * t7948 + t6743 * t7944 + t6745 * t7940 + t6753 * t7936 + t6755 * t7932 + t6757 * t7928) * t7584) * t7580, (-(t7768 * t9070 + t9089) * t6964 - (t7770 * t9071 + t9093) * t6963 - (t7772 * t9072 + t9097) * t6962 - (t7774 * t9073 + t9101) * t6961 - (t7776 * t9074 + t9105) * t6960 - (t7778 * t9075 + t9109) * t6959 + (-t6741 * t7949 - t6743 * t7945 - t6745 * t7941 - t6753 * t7937 - t6755 * t7933 - t6757 * t7929) * t7584) * t7580, -t6741 * t8434 - t6743 * t8433 - t6745 * t8432 - t6753 * t8431 - t6755 * t8430 - t6757 * t8429 + (t6271 * t8346 + t6273 * t8344 + t6275 * t8342 + t6280 * t8340 + t6282 * t8338 + t6284 * t8336) * t7584, t8548 * t6554 + t8550 * t6553 + t8546 * t6552 + t8552 * t6551 + t8554 * t6550 + t8545 * t6549 - (t7997 * t9070 + t9090) * t6964 - (t7998 * t9071 + t9094) * t6963 - (t7999 * t9072 + t9098) * t6962 - (t8003 * t9073 + t9102) * t6961 - (t8004 * t9074 + t9106) * t6960 - (t8005 * t9075 + t9110) * t6959, t8549 * t6554 + t8551 * t6553 + t8547 * t6552 + t8553 * t6551 + t8555 * t6550 + t8556 * t6549 - (t7994 * t9070 + t9091) * t6964 - (t7995 * t9071 + t9095) * t6963 - (t7996 * t9072 + t9099) * t6962 - (t8000 * t9073 + t9103) * t6961 - (t8001 * t9074 + t9107) * t6960 - (t8002 * t9075 + t9111) * t6959, t7074 * t7202 + (t7201 * t7450 - t7231 * t8750) * t7233, -t6881 * t8750 - t7796 + t8544, t6931 * t7201 - t6876 + (t8328 + (-t7074 - t8813) * t7557) * t7559, t7073 * t7201 + (t7202 * t7450 + t7233 * t8750) * t7231, -t8335 + t7044 * t7202 + t7103 + (-t8325 + t8815) * t7233, -t7526 * t8270 + (-t7201 * t7233 - t7202 * t7231) * t7450, 0, 0, 0, 0; t6294 * t6459 + t6295 * t6460 + t6296 * t6461 + t6300 * t6462 + t6301 * t6463 + t6302 * t6464, t6285 * t6497 + t6286 * t6495 + t6287 * t6496 + t6288 * t6499 + t6289 * t6498 + t6290 * t6500, (t6459 * t7831 + t6460 * t7829 + t6461 * t7827 + t6462 * t7825 + t6463 * t7823 + t6464 * t7821 + t6495 * t8952 + t6496 * t8950 + t6497 * t8954 + t6498 * t8946 + t6499 * t8948 + t6500 * t8944) * t7581, (t6459 * t7832 + t6460 * t7830 + t6461 * t7828 + t6462 * t7826 + t6463 * t7824 + t6464 * t7822 - t6495 * t8953 - t6496 * t8951 - t6497 * t8955 - t6498 * t8947 - t6499 * t8949 - t6500 * t8945) * t7581, (t6495 * t7712 + t6496 * t7710 + t6497 * t7714 + t6498 * t7706 + t6499 * t7708 + t6500 * t7704 - t7594 * t7950 - t7596 * t7946 - t7598 * t7942 - t7606 * t7938 - t7608 * t7934 - t7610 * t7930) * t7561, (-t6399 * t8901 - t6400 * t8900 - t6401 * t8899 - t6402 * t8898 - t6403 * t8897 - t6404 * t8896 + t6495 * t7713 + t6496 * t7711 + t6497 * t7715 + t6498 * t7707 + t6499 * t7709 + t6500 * t7705) * t7561, (t7594 * t8428 + t7596 * t8425 + t7598 * t8422 + t7606 * t8419 + t7608 * t8416 + t7610 * t8413 + t7769 * t6500 + t7773 * t6499 + t7771 * t6498 + t7779 * t6497 + t7775 * t6496 + t7777 * t6495 + (-t7930 - t7934 - t7938 - t7942 - t7946 - t7950) * t7584) * t7580, (t7600 * t8428 + t7602 * t8425 + t7604 * t8422 + t7612 * t8419 + t7614 * t8416 + t7616 * t8413 - t7768 * t6500 - t7772 * t6499 - t7770 * t6498 - t7778 * t6497 - t7774 * t6496 - t7776 * t6495 + (t7594 * t8097 + t7596 * t8094 + t7598 * t8091 + t7606 * t8082 + t7608 * t8079 + t7610 * t8076) * t7584) * t7580, t6271 * t8901 + t6273 * t8900 + t6275 * t8899 + t6280 * t8898 + t6282 * t8897 + t6284 * t8896 + (t6271 * t6497 + t6273 * t6495 + t6275 * t6496 + t6280 * t6499 + t6282 * t6498 + t6284 * t6500) * t7584, t6497 * t6201 + t6495 * t6202 + t6496 * t6203 + t6499 * t6207 + t6498 * t6208 + t6500 * t6209 + t8546 * t6464 + t8548 * t6463 + t8550 * t6462 + t8552 * t6461 + t8554 * t6460 + t8545 * t6459 + (t6389 * t8506 + t6566 * t7983) * t6685 + (t6388 * t8508 + t6565 * t7985) * t6683 + (t6387 * t8507 + t6564 * t7987) * t6681 + (t6377 * t8510 + t6563 * t7989) * t6667 + (t6376 * t8511 + t6562 * t7991) * t6665 + (t6375 * t8509 + t6561 * t7993) * t6663, t6497 * t6204 + t6495 * t6205 + t6496 * t6206 + t6499 * t6210 + t6498 * t6211 + t6500 * t6212 + t8547 * t6464 + t8549 * t6463 + t8551 * t6462 + t8553 * t6461 + t8555 * t6460 + t8556 * t6459 + (t6392 * t8506 + t6566 * t7982) * t6685 + (t6391 * t8508 + t6565 * t7984) * t6683 + (t6390 * t8507 + t6564 * t7986) * t6681 + (t6378 * t8510 + t6563 * t7988) * t6667 + (t6380 * t8511 + t6562 * t7990) * t6665 + (t6379 * t8509 + t6561 * t7992) * t6663, t7074 * t7204 + (t7203 * t7450 + t7231 * t8727) * t7233, t6881 * t8727 - t7795 + t8543, t6931 * t7203 + t8536 + t9069, t7073 * t7203 + (t7204 * t7450 - t8326) * t7231, t7044 * t7204 - t7767 + t8534, t7560 * t8284 + (-t7203 * t7233 - t7204 * t7231) * t7450, 0, 0, 0, 0;];
tau_reg  = t1;
