% Calculate Gravitation load for parallel robot
% P6PRRRRR6V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-09-11 16:13
% Revision: 7993d029b5937b704dcf3fc7d8ae322038cdcbdd (2019-09-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-09-11 13:17:43
% EndTime: 2019-09-11 13:18:24
% DurationCPUTime: 41.71s
% Computational Cost: add. (11222->1016), mult. (28997->1754), div. (108->18), fcn. (23825->50), ass. (0->693)
t6131 = cos(pkin(5));
t6117 = t6131 ^ 2;
t6576 = t6117 - 0.1e1;
t6130 = cos(pkin(6));
t6116 = t6130 ^ 2;
t6191 = pkin(9) ^ 2;
t6085 = pkin(3) ^ 2 + t6116 * t6191 - t6191;
t6355 = t6085 * t6576;
t6140 = sin(qJ(2,6));
t6132 = cos(pkin(4));
t6133 = legFrame(6,3);
t6094 = sin(t6133);
t6100 = cos(t6133);
t6056 = -g(1) * t6094 + g(2) * t6100;
t6062 = g(1) * t6100 + g(2) * t6094;
t6125 = sin(pkin(10));
t6129 = cos(pkin(10));
t6241 = t6129 * t6056 - t6062 * t6125;
t6128 = sin(pkin(4));
t6554 = t6128 * g(3);
t6248 = t6132 * t6241 + t6554;
t6619 = t6140 * t6248;
t6142 = sin(qJ(2,5));
t6134 = legFrame(5,3);
t6095 = sin(t6134);
t6101 = cos(t6134);
t6057 = -g(1) * t6095 + g(2) * t6101;
t6063 = g(1) * t6101 + g(2) * t6095;
t6239 = t6129 * t6057 - t6063 * t6125;
t6247 = t6132 * t6239 + t6554;
t6618 = t6142 * t6247;
t6144 = sin(qJ(2,4));
t6135 = legFrame(4,3);
t6096 = sin(t6135);
t6102 = cos(t6135);
t6058 = -g(1) * t6096 + g(2) * t6102;
t6064 = g(1) * t6102 + g(2) * t6096;
t6237 = t6129 * t6058 - t6064 * t6125;
t6246 = t6132 * t6237 + t6554;
t6617 = t6144 * t6246;
t6152 = sin(qJ(2,3));
t6136 = legFrame(3,3);
t6097 = sin(t6136);
t6103 = cos(t6136);
t6059 = -g(1) * t6097 + g(2) * t6103;
t6065 = g(1) * t6103 + g(2) * t6097;
t6235 = t6129 * t6059 - t6065 * t6125;
t6245 = t6132 * t6235 + t6554;
t6616 = t6152 * t6245;
t6154 = sin(qJ(2,2));
t6137 = legFrame(2,3);
t6098 = sin(t6137);
t6104 = cos(t6137);
t6060 = -g(1) * t6098 + g(2) * t6104;
t6066 = g(1) * t6104 + g(2) * t6098;
t6233 = t6129 * t6060 - t6066 * t6125;
t6244 = t6132 * t6233 + t6554;
t6615 = t6154 * t6244;
t6156 = sin(qJ(2,1));
t6138 = legFrame(1,3);
t6099 = sin(t6138);
t6105 = cos(t6138);
t6061 = -g(1) * t6099 + g(2) * t6105;
t6067 = g(1) * t6105 + g(2) * t6099;
t6231 = t6129 * t6061 - t6067 * t6125;
t6243 = t6132 * t6231 + t6554;
t6614 = t6156 * t6243;
t6155 = sin(qJ(3,1));
t6161 = cos(qJ(3,1));
t6613 = rSges(3,1) * t6155 + rSges(3,2) * t6161;
t6153 = sin(qJ(3,2));
t6159 = cos(qJ(3,2));
t6612 = rSges(3,1) * t6153 + rSges(3,2) * t6159;
t6151 = sin(qJ(3,3));
t6157 = cos(qJ(3,3));
t6611 = rSges(3,1) * t6151 + rSges(3,2) * t6157;
t6143 = sin(qJ(3,4));
t6149 = cos(qJ(3,4));
t6610 = rSges(3,1) * t6143 + rSges(3,2) * t6149;
t6141 = sin(qJ(3,5));
t6147 = cos(qJ(3,5));
t6609 = rSges(3,1) * t6141 + rSges(3,2) * t6147;
t6139 = sin(qJ(3,6));
t6145 = cos(qJ(3,6));
t6608 = rSges(3,1) * t6139 + rSges(3,2) * t6145;
t6167 = xP(6);
t6110 = sin(t6167);
t6113 = cos(t6167);
t6179 = koppelP(6,2);
t6185 = koppelP(6,1);
t6037 = t6110 * t6179 - t6113 * t6185;
t6168 = xP(5);
t6111 = sin(t6168);
t6114 = cos(t6168);
t6173 = koppelP(6,3);
t5943 = t6037 * t6111 + t6114 * t6173;
t6043 = t6110 * t6185 + t6113 * t6179;
t6169 = xP(4);
t6112 = sin(t6169);
t6115 = cos(t6169);
t5848 = t5943 * t6115 + t6043 * t6112;
t6180 = koppelP(5,2);
t6186 = koppelP(5,1);
t6038 = t6110 * t6180 - t6113 * t6186;
t6174 = koppelP(5,3);
t5945 = t6038 * t6111 + t6114 * t6174;
t6044 = t6110 * t6186 + t6113 * t6180;
t5851 = t5945 * t6115 + t6044 * t6112;
t6181 = koppelP(4,2);
t6187 = koppelP(4,1);
t6039 = t6110 * t6181 - t6113 * t6187;
t6175 = koppelP(4,3);
t5947 = t6039 * t6111 + t6114 * t6175;
t6045 = t6110 * t6187 + t6113 * t6181;
t5854 = t5947 * t6115 + t6045 * t6112;
t6182 = koppelP(3,2);
t6188 = koppelP(3,1);
t6040 = t6110 * t6182 - t6113 * t6188;
t6176 = koppelP(3,3);
t5949 = t6040 * t6111 + t6114 * t6176;
t6046 = t6110 * t6188 + t6113 * t6182;
t5857 = t5949 * t6115 + t6046 * t6112;
t6183 = koppelP(2,2);
t6189 = koppelP(2,1);
t6041 = t6110 * t6183 - t6113 * t6189;
t6177 = koppelP(2,3);
t5951 = t6041 * t6111 + t6114 * t6177;
t6047 = t6110 * t6189 + t6113 * t6183;
t5860 = t5951 * t6115 + t6047 * t6112;
t6184 = koppelP(1,2);
t6190 = koppelP(1,1);
t6042 = t6110 * t6184 - t6113 * t6190;
t6178 = koppelP(1,3);
t5953 = t6042 * t6111 + t6114 * t6178;
t6048 = t6110 * t6190 + t6113 * t6184;
t5863 = t5953 * t6115 + t6048 * t6112;
t6170 = rSges(4,3);
t6171 = rSges(4,2);
t6172 = rSges(4,1);
t6229 = t6110 * t6171 - t6113 * t6172;
t6607 = -t6111 * t6170 + t6114 * t6229;
t6124 = t6161 ^ 2;
t6448 = (t6131 + 0.1e1) * (t6131 - 0.1e1);
t6374 = 0.2e1 * t6448;
t6606 = t6128 * (t6124 * t6374 - t6576);
t6123 = t6159 ^ 2;
t6605 = t6128 * (t6123 * t6374 - t6576);
t6122 = t6157 ^ 2;
t6604 = t6128 * (t6122 * t6374 - t6576);
t6120 = t6149 ^ 2;
t6603 = t6128 * (t6120 * t6374 - t6576);
t6119 = t6147 ^ 2;
t6602 = t6128 * (t6119 * t6374 - t6576);
t6118 = t6145 ^ 2;
t6601 = t6128 * (t6118 * t6374 - t6576);
t6240 = t6056 * t6125 + t6062 * t6129;
t6600 = t6140 * t6240;
t6238 = t6057 * t6125 + t6063 * t6129;
t6599 = t6142 * t6238;
t6236 = t6058 * t6125 + t6064 * t6129;
t6598 = t6144 * t6236;
t6234 = t6059 * t6125 + t6065 * t6129;
t6597 = t6152 * t6234;
t6232 = t6060 * t6125 + t6066 * t6129;
t6596 = t6154 * t6232;
t6230 = t6061 * t6125 + t6067 * t6129;
t6595 = t6156 * t6230;
t6127 = sin(pkin(5));
t6429 = t6127 * t6131;
t6577 = 0.2e1 * t6124;
t6594 = t6429 * (t6577 - 0.1e1);
t6578 = 0.2e1 * t6123;
t6593 = t6429 * (t6578 - 0.1e1);
t6579 = 0.2e1 * t6122;
t6592 = t6429 * (t6579 - 0.1e1);
t6580 = 0.2e1 * t6120;
t6591 = t6429 * (t6580 - 0.1e1);
t6581 = 0.2e1 * t6119;
t6590 = t6429 * (t6581 - 0.1e1);
t6582 = 0.2e1 * t6118;
t6589 = t6429 * (t6582 - 0.1e1);
t6569 = pkin(2) * t6128;
t6126 = sin(pkin(6));
t6436 = t6126 * t6139;
t6363 = pkin(9) * t6436;
t6073 = pkin(2) + 0.2e1 * t6363;
t6568 = pkin(3) * t6073;
t6435 = t6126 * t6141;
t6362 = pkin(9) * t6435;
t6075 = pkin(2) + 0.2e1 * t6362;
t6567 = pkin(3) * t6075;
t6434 = t6126 * t6143;
t6361 = pkin(9) * t6434;
t6077 = pkin(2) + 0.2e1 * t6361;
t6566 = pkin(3) * t6077;
t6433 = t6126 * t6151;
t6360 = pkin(9) * t6433;
t6079 = pkin(2) + 0.2e1 * t6360;
t6565 = pkin(3) * t6079;
t6432 = t6126 * t6153;
t6359 = pkin(9) * t6432;
t6081 = pkin(2) + 0.2e1 * t6359;
t6564 = pkin(3) * t6081;
t6431 = t6126 * t6155;
t6358 = pkin(9) * t6431;
t6083 = pkin(2) + 0.2e1 * t6358;
t6563 = pkin(3) * t6083;
t6089 = pkin(9) * t6130 + pkin(8);
t6562 = pkin(3) * t6089;
t6561 = pkin(3) * t6128;
t6560 = pkin(3) * t6131;
t6559 = pkin(3) * t6132;
t6558 = pkin(9) * t6127;
t6557 = pkin(9) * t6128;
t6121 = m(1) + m(2) + m(3);
t6556 = g(3) * t6121;
t6555 = g(3) * t6127;
t6093 = t6126 * pkin(9);
t6146 = cos(qJ(2,6));
t6395 = t6146 * t6125;
t5990 = t6129 * t6140 + t6132 * t6395;
t6394 = t6146 * t6129;
t5993 = -t6125 * t6140 + t6132 * t6394;
t5886 = -t5990 * t6094 + t5993 * t6100;
t6410 = t6132 * t6140;
t5996 = t6129 * t6410 + t6395;
t5999 = -t6125 * t6410 + t6394;
t5889 = t5996 * t6100 + t5999 * t6094;
t5981 = -t6094 * t6125 + t6100 * t6129;
t6468 = t6085 * t6139;
t6303 = t6128 * t6468;
t6200 = t5886 * t6562 + t5981 * t6303;
t6376 = pkin(2) * t6561;
t6277 = t6139 * t6376;
t6290 = t6128 * t6429;
t6469 = t6085 * t6127;
t6310 = t6118 * t6469;
t6461 = t6089 * t6128;
t6367 = pkin(3) * t6461;
t6373 = t6145 * t6569;
t6460 = t6089 * t6139;
t6356 = (-t6116 + 0.1e1) * pkin(9);
t6050 = pkin(2) * t6436 + t6356;
t6487 = t6050 * t6127;
t5775 = t5889 * t6310 + (((t5886 * t6468 - t5981 * t6367) * t6131 + t5889 * t6568) * t6127 + t6200 * t6117 - t6200) * t6145 - t5981 * t6277 + (t5889 * t6487 + (t5981 * t6373 + (t5886 * t6117 - t5981 * t6290 - t5886) * t6460 + (-t5886 * t6589 - t5981 * t6601) * pkin(3)) * t6126) * pkin(9);
t6087 = t6126 * t6559;
t6086 = pkin(9) * t6087;
t5974 = t6086 * t6448;
t6416 = t6131 * t6146;
t6296 = t6126 * t6416;
t6270 = pkin(9) * t6296;
t6262 = pkin(3) * t6270;
t6398 = t6140 * t6085;
t6430 = t6127 * t6128;
t5841 = (t5974 - (t6262 - t6398 / 0.2e1) * t6430) * t6582;
t6070 = t6089 * t6559;
t6092 = pkin(2) * t6559;
t6375 = pkin(2) * t6093;
t6209 = -t6139 * t6355 - t6375;
t6271 = t6461 * t6093;
t6428 = t6127 * t6140;
t6283 = t6073 * t6428;
t6422 = t6128 * t6146;
t6289 = t6139 * t6422;
t6354 = t6089 * t6576;
t6365 = t6117 * t6093;
t6437 = t6126 * t6131;
t5805 = 0.1e1 / (t5841 + ((t6085 * t6289 + t6070) * t6429 + (t6146 * t6354 + t6283) * t6561 + t6209 * t6132) * t6145 + ((pkin(3) * t6422 + t6132 * t6460) * t6437 + t6140 * t6128 * t6050) * t6558 + (t6089 * t6289 - t6559) * t6365 + (-t6146 * t6271 + t6092) * t6139 + t6086);
t6541 = t5775 * t5805;
t6148 = cos(qJ(2,5));
t6393 = t6148 * t6125;
t5991 = t6129 * t6142 + t6132 * t6393;
t6392 = t6148 * t6129;
t5994 = -t6125 * t6142 + t6132 * t6392;
t5887 = -t5991 * t6095 + t5994 * t6101;
t6409 = t6132 * t6142;
t5997 = t6129 * t6409 + t6393;
t6000 = -t6125 * t6409 + t6392;
t5890 = t5997 * t6101 + t6000 * t6095;
t5982 = -t6095 * t6125 + t6101 * t6129;
t6467 = t6085 * t6141;
t6302 = t6128 * t6467;
t6199 = t5887 * t6562 + t5982 * t6302;
t6276 = t6141 * t6376;
t6309 = t6119 * t6469;
t6372 = t6147 * t6569;
t6459 = t6089 * t6141;
t6051 = pkin(2) * t6435 + t6356;
t6486 = t6051 * t6127;
t5776 = t5890 * t6309 + (((t5887 * t6467 - t5982 * t6367) * t6131 + t5890 * t6567) * t6127 + t6199 * t6117 - t6199) * t6147 - t5982 * t6276 + (t5890 * t6486 + (t5982 * t6372 + (t5887 * t6117 - t5982 * t6290 - t5887) * t6459 + (-t5887 * t6590 - t5982 * t6602) * pkin(3)) * t6126) * pkin(9);
t6415 = t6131 * t6148;
t6295 = t6126 * t6415;
t6269 = pkin(9) * t6295;
t6261 = pkin(3) * t6269;
t6397 = t6142 * t6085;
t5842 = (t5974 - (t6261 - t6397 / 0.2e1) * t6430) * t6581;
t6208 = -t6141 * t6355 - t6375;
t6427 = t6127 * t6142;
t6282 = t6075 * t6427;
t6421 = t6128 * t6148;
t6288 = t6141 * t6421;
t5806 = 0.1e1 / (t5842 + ((t6085 * t6288 + t6070) * t6429 + (t6148 * t6354 + t6282) * t6561 + t6208 * t6132) * t6147 + ((pkin(3) * t6421 + t6132 * t6459) * t6437 + t6142 * t6128 * t6051) * t6558 + (t6089 * t6288 - t6559) * t6365 + (-t6148 * t6271 + t6092) * t6141 + t6086);
t6540 = t5776 * t5806;
t6150 = cos(qJ(2,4));
t6391 = t6150 * t6125;
t5992 = t6129 * t6144 + t6132 * t6391;
t6390 = t6150 * t6129;
t5995 = -t6125 * t6144 + t6132 * t6390;
t5888 = -t5992 * t6096 + t5995 * t6102;
t6408 = t6132 * t6144;
t5998 = t6129 * t6408 + t6391;
t6001 = -t6125 * t6408 + t6390;
t5891 = t5998 * t6102 + t6001 * t6096;
t5983 = -t6096 * t6125 + t6102 * t6129;
t6466 = t6085 * t6143;
t6301 = t6128 * t6466;
t6198 = t5888 * t6562 + t5983 * t6301;
t6275 = t6143 * t6376;
t6308 = t6120 * t6469;
t6371 = t6149 * t6569;
t6458 = t6089 * t6143;
t6052 = pkin(2) * t6434 + t6356;
t6485 = t6052 * t6127;
t5777 = t5891 * t6308 + (((t5888 * t6466 - t5983 * t6367) * t6131 + t5891 * t6566) * t6127 + t6198 * t6117 - t6198) * t6149 - t5983 * t6275 + (t5891 * t6485 + (t5983 * t6371 + (t5888 * t6117 - t5983 * t6290 - t5888) * t6458 + (-t5888 * t6591 - t5983 * t6603) * pkin(3)) * t6126) * pkin(9);
t6414 = t6131 * t6150;
t6294 = t6126 * t6414;
t6268 = pkin(9) * t6294;
t6260 = pkin(3) * t6268;
t6396 = t6144 * t6085;
t5843 = (t5974 - (t6260 - t6396 / 0.2e1) * t6430) * t6580;
t6207 = -t6143 * t6355 - t6375;
t6426 = t6127 * t6144;
t6281 = t6077 * t6426;
t6420 = t6128 * t6150;
t6287 = t6143 * t6420;
t5807 = 0.1e1 / (t5843 + ((t6085 * t6287 + t6070) * t6429 + (t6150 * t6354 + t6281) * t6561 + t6207 * t6132) * t6149 + ((pkin(3) * t6420 + t6132 * t6458) * t6437 + t6144 * t6128 * t6052) * t6558 + (t6089 * t6287 - t6559) * t6365 + (-t6150 * t6271 + t6092) * t6143 + t6086);
t6539 = t5777 * t5807;
t5883 = t5990 * t6100 + t5993 * t6094;
t5892 = -t5996 * t6094 + t5999 * t6100;
t5975 = t6094 * t6129 + t6100 * t6125;
t6203 = -t5883 * t6562 - t5975 * t6303;
t5778 = t5892 * t6310 + (((-t5883 * t6468 + t5975 * t6367) * t6131 + t5892 * t6568) * t6127 + t6203 * t6117 - t6203) * t6145 + t5975 * t6277 + (t5892 * t6487 + (-t5975 * t6373 + (-t5883 * t6117 + t5975 * t6290 + t5883) * t6460 + (t5883 * t6589 + t5975 * t6601) * pkin(3)) * t6126) * pkin(9);
t6538 = t5778 * t5805;
t5884 = t5991 * t6101 + t5994 * t6095;
t5893 = -t5997 * t6095 + t6000 * t6101;
t5976 = t6095 * t6129 + t6101 * t6125;
t6202 = -t5884 * t6562 - t5976 * t6302;
t5779 = t5893 * t6309 + (((-t5884 * t6467 + t5976 * t6367) * t6131 + t5893 * t6567) * t6127 + t6202 * t6117 - t6202) * t6147 + t5976 * t6276 + (t5893 * t6486 + (-t5976 * t6372 + (-t5884 * t6117 + t5976 * t6290 + t5884) * t6459 + (t5884 * t6590 + t5976 * t6602) * pkin(3)) * t6126) * pkin(9);
t6537 = t5779 * t5806;
t5885 = t5992 * t6102 + t5995 * t6096;
t5894 = -t5998 * t6096 + t6001 * t6102;
t5977 = t6096 * t6129 + t6102 * t6125;
t6201 = -t5885 * t6562 - t5977 * t6301;
t5780 = t5894 * t6308 + (((-t5885 * t6466 + t5977 * t6367) * t6131 + t5894 * t6566) * t6127 + t6201 * t6117 - t6201) * t6149 + t5977 * t6275 + (t5894 * t6485 + (-t5977 * t6371 + (-t5885 * t6117 + t5977 * t6290 + t5885) * t6458 + (t5885 * t6591 + t5977 * t6603) * pkin(3)) * t6126) * pkin(9);
t6536 = t5780 * t5807;
t6158 = cos(qJ(2,3));
t6386 = t6158 * t6125;
t6006 = t6129 * t6152 + t6132 * t6386;
t6385 = t6158 * t6129;
t6009 = -t6125 * t6152 + t6132 * t6385;
t5910 = -t6006 * t6097 + t6009 * t6103;
t6404 = t6132 * t6152;
t6012 = t6129 * t6404 + t6386;
t6015 = -t6125 * t6404 + t6385;
t5913 = t6012 * t6103 + t6015 * t6097;
t5984 = -t6097 * t6125 + t6103 * t6129;
t6465 = t6085 * t6151;
t6300 = t6128 * t6465;
t6194 = t5910 * t6562 + t5984 * t6300;
t6274 = t6151 * t6376;
t6307 = t6122 * t6469;
t6370 = t6157 * t6569;
t6454 = t6089 * t6151;
t6053 = pkin(2) * t6433 + t6356;
t6484 = t6053 * t6127;
t5781 = t5913 * t6307 + (((t5910 * t6465 - t5984 * t6367) * t6131 + t5913 * t6565) * t6127 + t6194 * t6117 - t6194) * t6157 - t5984 * t6274 + (t5913 * t6484 + (t5984 * t6370 + (t5910 * t6117 - t5984 * t6290 - t5910) * t6454 + (-t5910 * t6592 - t5984 * t6604) * pkin(3)) * t6126) * pkin(9);
t6413 = t6131 * t6158;
t6293 = t6126 * t6413;
t6267 = pkin(9) * t6293;
t6259 = pkin(3) * t6267;
t6389 = t6152 * t6085;
t5844 = (t5974 - (t6259 - t6389 / 0.2e1) * t6430) * t6579;
t6206 = -t6151 * t6355 - t6375;
t6425 = t6127 * t6152;
t6280 = t6079 * t6425;
t6419 = t6128 * t6158;
t6286 = t6151 * t6419;
t5808 = 0.1e1 / (t5844 + ((t6085 * t6286 + t6070) * t6429 + (t6158 * t6354 + t6280) * t6561 + t6206 * t6132) * t6157 + ((pkin(3) * t6419 + t6132 * t6454) * t6437 + t6152 * t6128 * t6053) * t6558 + (t6089 * t6286 - t6559) * t6365 + (-t6158 * t6271 + t6092) * t6151 + t6086);
t6535 = t5781 * t5808;
t6160 = cos(qJ(2,2));
t6384 = t6160 * t6125;
t6007 = t6129 * t6154 + t6132 * t6384;
t6383 = t6160 * t6129;
t6010 = -t6125 * t6154 + t6132 * t6383;
t5911 = -t6007 * t6098 + t6010 * t6104;
t6403 = t6132 * t6154;
t6013 = t6129 * t6403 + t6384;
t6016 = -t6125 * t6403 + t6383;
t5914 = t6013 * t6104 + t6016 * t6098;
t5985 = -t6098 * t6125 + t6104 * t6129;
t6464 = t6085 * t6153;
t6299 = t6128 * t6464;
t6193 = t5911 * t6562 + t5985 * t6299;
t6273 = t6153 * t6376;
t6306 = t6123 * t6469;
t6369 = t6159 * t6569;
t6453 = t6089 * t6153;
t6054 = pkin(2) * t6432 + t6356;
t6483 = t6054 * t6127;
t5782 = t5914 * t6306 + (((t5911 * t6464 - t5985 * t6367) * t6131 + t5914 * t6564) * t6127 + t6193 * t6117 - t6193) * t6159 - t5985 * t6273 + (t5914 * t6483 + (t5985 * t6369 + (t5911 * t6117 - t5985 * t6290 - t5911) * t6453 + (-t5911 * t6593 - t5985 * t6605) * pkin(3)) * t6126) * pkin(9);
t6412 = t6131 * t6160;
t6292 = t6126 * t6412;
t6266 = pkin(9) * t6292;
t6258 = pkin(3) * t6266;
t6388 = t6154 * t6085;
t5845 = (t5974 - (t6258 - t6388 / 0.2e1) * t6430) * t6578;
t6205 = -t6153 * t6355 - t6375;
t6424 = t6127 * t6154;
t6279 = t6081 * t6424;
t6418 = t6128 * t6160;
t6285 = t6153 * t6418;
t5809 = 0.1e1 / (t5845 + ((t6085 * t6285 + t6070) * t6429 + (t6160 * t6354 + t6279) * t6561 + t6205 * t6132) * t6159 + ((pkin(3) * t6418 + t6132 * t6453) * t6437 + t6154 * t6128 * t6054) * t6558 + (t6089 * t6285 - t6559) * t6365 + (-t6160 * t6271 + t6092) * t6153 + t6086);
t6534 = t5782 * t5809;
t6162 = cos(qJ(2,1));
t6382 = t6162 * t6125;
t6008 = t6129 * t6156 + t6132 * t6382;
t6381 = t6162 * t6129;
t6011 = -t6125 * t6156 + t6132 * t6381;
t5912 = -t6008 * t6099 + t6011 * t6105;
t6402 = t6132 * t6156;
t6014 = t6129 * t6402 + t6382;
t6017 = -t6125 * t6402 + t6381;
t5915 = t6014 * t6105 + t6017 * t6099;
t5986 = -t6099 * t6125 + t6105 * t6129;
t6463 = t6085 * t6155;
t6298 = t6128 * t6463;
t6192 = t5912 * t6562 + t5986 * t6298;
t6272 = t6155 * t6376;
t6305 = t6124 * t6469;
t6368 = t6161 * t6569;
t6452 = t6089 * t6155;
t6055 = pkin(2) * t6431 + t6356;
t6482 = t6055 * t6127;
t5783 = t5915 * t6305 + (((t5912 * t6463 - t5986 * t6367) * t6131 + t5915 * t6563) * t6127 + t6192 * t6117 - t6192) * t6161 - t5986 * t6272 + (t5915 * t6482 + (t5986 * t6368 + (t5912 * t6117 - t5986 * t6290 - t5912) * t6452 + (-t5912 * t6594 - t5986 * t6606) * pkin(3)) * t6126) * pkin(9);
t6411 = t6131 * t6162;
t6291 = t6126 * t6411;
t6265 = pkin(9) * t6291;
t6257 = pkin(3) * t6265;
t6387 = t6156 * t6085;
t5846 = (t5974 - (t6257 - t6387 / 0.2e1) * t6430) * t6577;
t6204 = -t6155 * t6355 - t6375;
t6417 = t6128 * t6162;
t6284 = t6155 * t6417;
t6423 = t6127 * t6156;
t6311 = t6083 * t6423;
t5810 = 0.1e1 / (t5846 + ((t6085 * t6284 + t6070) * t6429 + (t6162 * t6354 + t6311) * t6561 + t6204 * t6132) * t6161 + ((pkin(3) * t6417 + t6132 * t6452) * t6437 + t6156 * t6128 * t6055) * t6558 + (t6089 * t6284 - t6559) * t6365 + (-t6162 * t6271 + t6092) * t6155 + t6086);
t6533 = t5783 * t5810;
t5907 = t6006 * t6103 + t6009 * t6097;
t5916 = -t6012 * t6097 + t6015 * t6103;
t5978 = t6097 * t6129 + t6103 * t6125;
t6197 = -t5907 * t6562 - t5978 * t6300;
t5784 = t5916 * t6307 + (((-t5907 * t6465 + t5978 * t6367) * t6131 + t5916 * t6565) * t6127 + t6197 * t6117 - t6197) * t6157 + t5978 * t6274 + (t5916 * t6484 + (-t5978 * t6370 + (-t5907 * t6117 + t5978 * t6290 + t5907) * t6454 + (t5907 * t6592 + t5978 * t6604) * pkin(3)) * t6126) * pkin(9);
t6532 = t5784 * t5808;
t5908 = t6007 * t6104 + t6010 * t6098;
t5917 = -t6013 * t6098 + t6016 * t6104;
t5979 = t6098 * t6129 + t6104 * t6125;
t6196 = -t5908 * t6562 - t5979 * t6299;
t5785 = t5917 * t6306 + (((-t5908 * t6464 + t5979 * t6367) * t6131 + t5917 * t6564) * t6127 + t6196 * t6117 - t6196) * t6159 + t5979 * t6273 + (t5917 * t6483 + (-t5979 * t6369 + (-t5908 * t6117 + t5979 * t6290 + t5908) * t6453 + (t5908 * t6593 + t5979 * t6605) * pkin(3)) * t6126) * pkin(9);
t6531 = t5785 * t5809;
t5909 = t6008 * t6105 + t6011 * t6099;
t5918 = -t6014 * t6099 + t6017 * t6105;
t5980 = t6099 * t6129 + t6105 * t6125;
t6195 = -t5909 * t6562 - t5980 * t6298;
t5786 = t5918 * t6305 + (((-t5909 * t6463 + t5980 * t6367) * t6131 + t5918 * t6563) * t6127 + t6195 * t6117 - t6195) * t6161 + t5980 * t6272 + (t5918 * t6482 + (-t5980 * t6368 + (-t5909 * t6117 + t5980 * t6290 + t5909) * t6452 + (t5909 * t6594 + t5980 * t6606) * pkin(3)) * t6126) * pkin(9);
t6530 = t5786 * t5810;
t6297 = t6089 * t6429;
t6049 = pkin(3) * t6297;
t6088 = pkin(3) * t6429;
t6090 = rSges(3,2) * t6555;
t6091 = rSges(3,1) * t6555;
t6249 = t6297 * t6093;
t6263 = t6093 - t6365;
t6278 = t6576 * t6562;
t6304 = t6085 * t6429;
t6317 = t6062 * t6430;
t6323 = t6056 * t6430;
t6329 = t6241 * t6416;
t6475 = t6062 * t6146;
t6481 = t6056 * t6146;
t6517 = (g(3) * t6422 - t6600) * t6131;
t6529 = (((rSges(3,1) * t6329 + t6091) * t6132 + rSges(3,1) * t6517 + (-rSges(3,1) * t6323 - rSges(3,2) * t6475) * t6129 + (rSges(3,1) * t6317 - rSges(3,2) * t6481) * t6125) * t6145 - ((rSges(3,2) * t6329 + t6090) * t6132 + rSges(3,2) * t6517 + (rSges(3,1) * t6475 - rSges(3,2) * t6323) * t6129 + (rSges(3,1) * t6481 + rSges(3,2) * t6317) * t6125) * t6139 - t6608 * t6619) / (t5841 + ((t6049 + t6209) * t6132 + t6128 * ((t6139 * t6304 + t6278) * t6146 + pkin(3) * t6283)) * t6145 + (t6139 * t6249 + (pkin(2) * t6139 + t6263) * pkin(3)) * t6132 + (t6126 * (t6139 * t6354 + t6088) * t6146 + t6050 * t6428) * t6557);
t6316 = t6063 * t6430;
t6322 = t6057 * t6430;
t6328 = t6239 * t6415;
t6474 = t6063 * t6148;
t6480 = t6057 * t6148;
t6516 = (g(3) * t6421 - t6599) * t6131;
t6528 = (((rSges(3,1) * t6328 + t6091) * t6132 + rSges(3,1) * t6516 + (-rSges(3,1) * t6322 - rSges(3,2) * t6474) * t6129 + (rSges(3,1) * t6316 - rSges(3,2) * t6480) * t6125) * t6147 - ((rSges(3,2) * t6328 + t6090) * t6132 + rSges(3,2) * t6516 + (rSges(3,1) * t6474 - rSges(3,2) * t6322) * t6129 + (rSges(3,1) * t6480 + rSges(3,2) * t6316) * t6125) * t6141 - t6609 * t6618) / (t5842 + ((t6049 + t6208) * t6132 + t6128 * ((t6141 * t6304 + t6278) * t6148 + pkin(3) * t6282)) * t6147 + (t6141 * t6249 + (pkin(2) * t6141 + t6263) * pkin(3)) * t6132 + (t6126 * (t6141 * t6354 + t6088) * t6148 + t6051 * t6427) * t6557);
t6315 = t6064 * t6430;
t6321 = t6058 * t6430;
t6327 = t6237 * t6414;
t6473 = t6064 * t6150;
t6479 = t6058 * t6150;
t6515 = (g(3) * t6420 - t6598) * t6131;
t6527 = (((rSges(3,1) * t6327 + t6091) * t6132 + rSges(3,1) * t6515 + (-rSges(3,1) * t6321 - rSges(3,2) * t6473) * t6129 + (rSges(3,1) * t6315 - rSges(3,2) * t6479) * t6125) * t6149 - ((rSges(3,2) * t6327 + t6090) * t6132 + rSges(3,2) * t6515 + (rSges(3,1) * t6473 - rSges(3,2) * t6321) * t6129 + (rSges(3,1) * t6479 + rSges(3,2) * t6315) * t6125) * t6143 - t6610 * t6617) / (t5843 + ((t6049 + t6207) * t6132 + t6128 * ((t6143 * t6304 + t6278) * t6150 + pkin(3) * t6281)) * t6149 + (t6143 * t6249 + (pkin(2) * t6143 + t6263) * pkin(3)) * t6132 + (t6126 * (t6143 * t6354 + t6088) * t6150 + t6052 * t6426) * t6557);
t6314 = t6065 * t6430;
t6320 = t6059 * t6430;
t6326 = t6235 * t6413;
t6472 = t6065 * t6158;
t6478 = t6059 * t6158;
t6514 = (g(3) * t6419 - t6597) * t6131;
t6526 = (((rSges(3,1) * t6326 + t6091) * t6132 + rSges(3,1) * t6514 + (-rSges(3,1) * t6320 - rSges(3,2) * t6472) * t6129 + (rSges(3,1) * t6314 - rSges(3,2) * t6478) * t6125) * t6157 - ((rSges(3,2) * t6326 + t6090) * t6132 + rSges(3,2) * t6514 + (rSges(3,1) * t6472 - rSges(3,2) * t6320) * t6129 + (rSges(3,1) * t6478 + rSges(3,2) * t6314) * t6125) * t6151 - t6611 * t6616) / (t5844 + ((t6049 + t6206) * t6132 + t6128 * ((t6151 * t6304 + t6278) * t6158 + pkin(3) * t6280)) * t6157 + (t6151 * t6249 + (pkin(2) * t6151 + t6263) * pkin(3)) * t6132 + (t6126 * (t6151 * t6354 + t6088) * t6158 + t6053 * t6425) * t6557);
t6313 = t6066 * t6430;
t6319 = t6060 * t6430;
t6325 = t6233 * t6412;
t6471 = t6066 * t6160;
t6477 = t6060 * t6160;
t6513 = (g(3) * t6418 - t6596) * t6131;
t6525 = (((rSges(3,1) * t6325 + t6091) * t6132 + rSges(3,1) * t6513 + (-rSges(3,1) * t6319 - rSges(3,2) * t6471) * t6129 + (rSges(3,1) * t6313 - rSges(3,2) * t6477) * t6125) * t6159 - ((rSges(3,2) * t6325 + t6090) * t6132 + rSges(3,2) * t6513 + (rSges(3,1) * t6471 - rSges(3,2) * t6319) * t6129 + (rSges(3,1) * t6477 + rSges(3,2) * t6313) * t6125) * t6153 - t6612 * t6615) / (t5845 + ((t6049 + t6205) * t6132 + t6128 * ((t6153 * t6304 + t6278) * t6160 + pkin(3) * t6279)) * t6159 + (t6153 * t6249 + (pkin(2) * t6153 + t6263) * pkin(3)) * t6132 + (t6126 * (t6153 * t6354 + t6088) * t6160 + t6054 * t6424) * t6557);
t6312 = t6067 * t6430;
t6318 = t6061 * t6430;
t6324 = t6231 * t6411;
t6470 = t6067 * t6162;
t6476 = t6061 * t6162;
t6512 = (g(3) * t6417 - t6595) * t6131;
t6524 = (((rSges(3,1) * t6324 + t6091) * t6132 + rSges(3,1) * t6512 + (-rSges(3,1) * t6318 - rSges(3,2) * t6470) * t6129 + (rSges(3,1) * t6312 - rSges(3,2) * t6476) * t6125) * t6161 - ((rSges(3,2) * t6324 + t6090) * t6132 + rSges(3,2) * t6512 + (rSges(3,1) * t6470 - rSges(3,2) * t6318) * t6129 + (rSges(3,1) * t6476 + rSges(3,2) * t6312) * t6125) * t6155 - t6613 * t6614) / (t5846 + ((t6049 + t6204) * t6132 + t6128 * ((t6155 * t6304 + t6278) * t6162 + pkin(3) * t6311)) * t6161 + (t6155 * t6249 + (pkin(2) * t6155 + t6263) * pkin(3)) * t6132 + (t6126 * (t6155 * t6354 + t6088) * t6162 + t6055 * t6423) * t6557);
t6164 = m(2) * rSges(2,2);
t6264 = t6117 * t6087;
t6210 = pkin(9) * (t6087 - t6264);
t6242 = (t6049 - t6375) * t6132;
t6250 = t6132 * t6355;
t6357 = 0.2e1 * pkin(3) * t6093;
t6366 = pkin(9) * (t6130 + 0.1e1) * (t6130 - 0.1e1);
t6377 = m(2) * rSges(2,1) + pkin(2) * m(3);
t6378 = 0.2e1 * pkin(9) * t6264 - 0.2e1 * t6086;
t6379 = t6132 * t6249 + t6092;
t6380 = (pkin(8) + rSges(3,3)) * t6127;
t6457 = t6089 * t6146;
t6523 = 0.1e1 / (t6378 * t6118 + (-t6139 * t6250 + t6242) * t6145 + t6379 * t6139 + t6210 + (((-0.2e1 * t6262 + t6398) * t6118 + (t6085 * t6416 + t6140 * t6357) * t6139 * t6145 + pkin(9) * (pkin(3) * t6296 - t6140 * t6366)) * t6127 + (pkin(3) * t6145 + t6363) * (pkin(2) * t6428 + t6117 * t6457 - t6457)) * t6128) * ((-t6146 * t6248 + t6600) * ((rSges(3,1) * t6145 - rSges(3,2) * t6139) * m(3) + t6377) + (t6146 * t6240 + t6619) * (t6164 + (t6608 * t6131 - t6380) * m(3)));
t6456 = t6089 * t6148;
t6522 = 0.1e1 / (t6378 * t6119 + (-t6141 * t6250 + t6242) * t6147 + t6379 * t6141 + t6210 + (((-0.2e1 * t6261 + t6397) * t6119 + (t6085 * t6415 + t6142 * t6357) * t6141 * t6147 + pkin(9) * (pkin(3) * t6295 - t6142 * t6366)) * t6127 + (pkin(3) * t6147 + t6362) * (pkin(2) * t6427 + t6117 * t6456 - t6456)) * t6128) * ((-t6148 * t6247 + t6599) * ((rSges(3,1) * t6147 - rSges(3,2) * t6141) * m(3) + t6377) + (t6148 * t6238 + t6618) * (t6164 + (t6609 * t6131 - t6380) * m(3)));
t6455 = t6089 * t6150;
t6521 = 0.1e1 / (t6378 * t6120 + (-t6143 * t6250 + t6242) * t6149 + t6379 * t6143 + t6210 + (((-0.2e1 * t6260 + t6396) * t6120 + (t6085 * t6414 + t6144 * t6357) * t6143 * t6149 + pkin(9) * (pkin(3) * t6294 - t6144 * t6366)) * t6127 + (pkin(3) * t6149 + t6361) * (pkin(2) * t6426 + t6117 * t6455 - t6455)) * t6128) * ((-t6150 * t6246 + t6598) * ((rSges(3,1) * t6149 - rSges(3,2) * t6143) * m(3) + t6377) + (t6150 * t6236 + t6617) * (t6164 + (t6610 * t6131 - t6380) * m(3)));
t6451 = t6089 * t6158;
t6520 = 0.1e1 / (t6378 * t6122 + (-t6151 * t6250 + t6242) * t6157 + t6379 * t6151 + t6210 + (((-0.2e1 * t6259 + t6389) * t6122 + (t6085 * t6413 + t6152 * t6357) * t6151 * t6157 + pkin(9) * (pkin(3) * t6293 - t6152 * t6366)) * t6127 + (pkin(3) * t6157 + t6360) * (pkin(2) * t6425 + t6117 * t6451 - t6451)) * t6128) * ((-t6158 * t6245 + t6597) * ((rSges(3,1) * t6157 - rSges(3,2) * t6151) * m(3) + t6377) + (t6158 * t6234 + t6616) * (t6164 + (t6611 * t6131 - t6380) * m(3)));
t6450 = t6089 * t6160;
t6519 = 0.1e1 / (t6378 * t6123 + (-t6153 * t6250 + t6242) * t6159 + t6379 * t6153 + t6210 + (((-0.2e1 * t6258 + t6388) * t6123 + (t6085 * t6412 + t6154 * t6357) * t6153 * t6159 + pkin(9) * (pkin(3) * t6292 - t6154 * t6366)) * t6127 + (pkin(3) * t6159 + t6359) * (pkin(2) * t6424 + t6117 * t6450 - t6450)) * t6128) * ((-t6160 * t6244 + t6596) * ((rSges(3,1) * t6159 - rSges(3,2) * t6153) * m(3) + t6377) + (t6160 * t6232 + t6615) * (t6164 + (t6612 * t6131 - t6380) * m(3)));
t6449 = t6089 * t6162;
t6518 = 0.1e1 / (t6378 * t6124 + (-t6155 * t6250 + t6242) * t6161 + t6379 * t6155 + t6210 + (((-0.2e1 * t6257 + t6387) * t6124 + (t6085 * t6411 + t6156 * t6357) * t6155 * t6161 + pkin(9) * (pkin(3) * t6291 - t6156 * t6366)) * t6127 + (pkin(3) * t6161 + t6358) * (pkin(2) * t6423 + t6117 * t6449 - t6449)) * t6128) * ((-t6162 * t6243 + t6595) * ((rSges(3,1) * t6161 - rSges(3,2) * t6155) * m(3) + t6377) + (t6162 * t6230 + t6614) * (t6164 + (t6613 * t6131 - t6380) * m(3)));
t6462 = t6089 * t6127;
t5962 = t6139 * t6560 - t6462;
t6074 = pkin(2) + t6363;
t6511 = (-t5962 * t6140 + t6074 * t6146) * t6132;
t5963 = t6141 * t6560 - t6462;
t6076 = pkin(2) + t6362;
t6510 = (-t5963 * t6142 + t6076 * t6148) * t6132;
t5964 = t6143 * t6560 - t6462;
t6078 = pkin(2) + t6361;
t6509 = (-t5964 * t6144 + t6078 * t6150) * t6132;
t5965 = t6151 * t6560 - t6462;
t6080 = pkin(2) + t6360;
t6508 = (-t5965 * t6152 + t6080 * t6158) * t6132;
t5966 = t6153 * t6560 - t6462;
t6082 = pkin(2) + t6359;
t6507 = (-t5966 * t6154 + t6082 * t6160) * t6132;
t5967 = t6155 * t6560 - t6462;
t6084 = pkin(2) + t6358;
t6506 = (-t5967 * t6156 + t6084 * t6162) * t6132;
t6364 = pkin(9) * t6437;
t6505 = (pkin(3) * t6146 + t6140 * t6364) * t6132;
t6504 = (pkin(3) * t6148 + t6142 * t6364) * t6132;
t6503 = (pkin(3) * t6150 + t6144 * t6364) * t6132;
t6502 = (pkin(3) * t6158 + t6152 * t6364) * t6132;
t6501 = (pkin(3) * t6160 + t6154 * t6364) * t6132;
t6500 = (pkin(3) * t6162 + t6156 * t6364) * t6132;
t6498 = t6043 * t6115;
t6496 = t6044 * t6115;
t6494 = t6045 * t6115;
t6492 = t6046 * t6115;
t6490 = t6047 * t6115;
t6488 = t6048 * t6115;
t6446 = t6111 * t6171;
t6445 = t6111 * t6172;
t6444 = t6111 * t6173;
t6443 = t6111 * t6174;
t6442 = t6111 * t6175;
t6441 = t6111 * t6176;
t6440 = t6111 * t6177;
t6439 = t6111 * t6178;
t6438 = t6114 * t6170;
t6407 = t6132 * t6146;
t6406 = t6132 * t6148;
t6405 = t6132 * t6150;
t6401 = t6132 * t6158;
t6400 = t6132 * t6160;
t6399 = t6132 * t6162;
t5871 = -t5975 * t6410 + t5981 * t6146;
t6222 = (t5975 * t6407 + t5981 * t6140) * t6131 - t5975 * t6430;
t5817 = (pkin(3) * t6222 - t5871 * t6093) * t6145 + t6139 * (pkin(3) * t5871 + t6222 * t6093);
t6353 = t5817 * t6523;
t5872 = t5975 * t6146 + t5981 * t6410;
t6221 = (-t5975 * t6140 + t5981 * t6407) * t6131 - t5981 * t6430;
t5818 = (pkin(3) * t6221 + t5872 * t6093) * t6145 + t6139 * (-pkin(3) * t5872 + t6221 * t6093);
t6352 = t5818 * t6523;
t5873 = -t5976 * t6409 + t5982 * t6148;
t6220 = (t5976 * t6406 + t5982 * t6142) * t6131 - t5976 * t6430;
t5819 = (pkin(3) * t6220 - t5873 * t6093) * t6147 + t6141 * (pkin(3) * t5873 + t6220 * t6093);
t6351 = t5819 * t6522;
t5874 = t5976 * t6148 + t5982 * t6409;
t6219 = (-t5976 * t6142 + t5982 * t6406) * t6131 - t5982 * t6430;
t5820 = (pkin(3) * t6219 + t5874 * t6093) * t6147 + t6141 * (-pkin(3) * t5874 + t6219 * t6093);
t6350 = t5820 * t6522;
t5875 = -t5977 * t6408 + t5983 * t6150;
t6218 = (t5977 * t6405 + t5983 * t6144) * t6131 - t5977 * t6430;
t5821 = (pkin(3) * t6218 - t5875 * t6093) * t6149 + t6143 * (pkin(3) * t5875 + t6218 * t6093);
t6349 = t5821 * t6521;
t5876 = t5977 * t6150 + t5983 * t6408;
t6217 = (-t5977 * t6144 + t5983 * t6405) * t6131 - t5983 * t6430;
t5822 = (pkin(3) * t6217 + t5876 * t6093) * t6149 + t6143 * (-pkin(3) * t5876 + t6217 * t6093);
t6348 = t5822 * t6521;
t5895 = -t5978 * t6404 + t5984 * t6158;
t6216 = (t5978 * t6401 + t5984 * t6152) * t6131 - t5978 * t6430;
t5823 = (pkin(3) * t6216 - t5895 * t6093) * t6157 + t6151 * (pkin(3) * t5895 + t6216 * t6093);
t6347 = t5823 * t6520;
t5896 = t5978 * t6158 + t5984 * t6404;
t6215 = (-t5978 * t6152 + t5984 * t6401) * t6131 - t5984 * t6430;
t5824 = (pkin(3) * t6215 + t5896 * t6093) * t6157 + t6151 * (-pkin(3) * t5896 + t6215 * t6093);
t6346 = t5824 * t6520;
t5897 = -t5979 * t6403 + t5985 * t6160;
t6214 = (t5979 * t6400 + t5985 * t6154) * t6131 - t5979 * t6430;
t5825 = (pkin(3) * t6214 - t5897 * t6093) * t6159 + t6153 * (pkin(3) * t5897 + t6214 * t6093);
t6345 = t5825 * t6519;
t5898 = t5979 * t6160 + t5985 * t6403;
t6213 = (-t5979 * t6154 + t5985 * t6400) * t6131 - t5985 * t6430;
t5826 = (pkin(3) * t6213 + t5898 * t6093) * t6159 + t6153 * (-pkin(3) * t5898 + t6213 * t6093);
t6344 = t5826 * t6519;
t5899 = -t5980 * t6402 + t5986 * t6162;
t6212 = (t5980 * t6399 + t5986 * t6156) * t6131 - t5980 * t6430;
t5827 = (pkin(3) * t6212 - t5899 * t6093) * t6161 + t6155 * (pkin(3) * t5899 + t6212 * t6093);
t6343 = t5827 * t6518;
t5900 = t5980 * t6162 + t5986 * t6402;
t6211 = (-t5980 * t6156 + t5986 * t6399) * t6131 - t5986 * t6430;
t5828 = (pkin(3) * t6211 + t5900 * t6093) * t6161 + t6155 * (-pkin(3) * t5900 + t6211 * t6093);
t6342 = t5828 * t6518;
t5920 = t5962 * t6146 + t6074 * t6140;
t6027 = -pkin(3) * t6140 + t6270;
t5829 = (-t5975 * t6505 + t5981 * t6027) * t6145 - t5975 * t6511 - t5981 * t5920;
t6341 = t5829 * t6529;
t5922 = t5963 * t6148 + t6076 * t6142;
t6028 = -pkin(3) * t6142 + t6269;
t5830 = (-t5976 * t6504 + t5982 * t6028) * t6147 - t5976 * t6510 - t5982 * t5922;
t6340 = t5830 * t6528;
t5924 = t5964 * t6150 + t6078 * t6144;
t6029 = -pkin(3) * t6144 + t6268;
t5831 = (-t5977 * t6503 + t5983 * t6029) * t6149 - t5977 * t6509 - t5983 * t5924;
t6339 = t5831 * t6527;
t5832 = (-t5975 * t6027 - t5981 * t6505) * t6145 - t5981 * t6511 + t5975 * t5920;
t6338 = t5832 * t6529;
t5833 = (-t5976 * t6028 - t5982 * t6504) * t6147 - t5982 * t6510 + t5976 * t5922;
t6337 = t5833 * t6528;
t5834 = (-t5977 * t6029 - t5983 * t6503) * t6149 - t5983 * t6509 + t5977 * t5924;
t6336 = t5834 * t6527;
t5926 = t5965 * t6158 + t6080 * t6152;
t6033 = -pkin(3) * t6152 + t6267;
t5835 = (-t5978 * t6502 + t5984 * t6033) * t6157 - t5978 * t6508 - t5984 * t5926;
t6335 = t5835 * t6526;
t5928 = t5966 * t6160 + t6082 * t6154;
t6034 = -pkin(3) * t6154 + t6266;
t5836 = (-t5979 * t6501 + t5985 * t6034) * t6159 - t5979 * t6507 - t5985 * t5928;
t6334 = t5836 * t6525;
t5930 = t5967 * t6162 + t6084 * t6156;
t6035 = -pkin(3) * t6156 + t6265;
t5837 = (-t5980 * t6500 + t5986 * t6035) * t6161 - t5980 * t6506 - t5986 * t5930;
t6333 = t5837 * t6524;
t5838 = (-t5978 * t6033 - t5984 * t6502) * t6157 - t5984 * t6508 + t5978 * t5926;
t6332 = t5838 * t6526;
t5839 = (-t5979 * t6034 - t5985 * t6501) * t6159 - t5985 * t6507 + t5979 * t5928;
t6331 = t5839 * t6525;
t5840 = (-t5980 * t6035 - t5986 * t6500) * t6161 - t5986 * t6506 + t5980 * t5930;
t6330 = t5840 * t6524;
t5942 = -t6042 * t6114 + t6439;
t5941 = -t6041 * t6114 + t6440;
t5940 = -t6040 * t6114 + t6441;
t5939 = -t6039 * t6114 + t6442;
t5938 = -t6038 * t6114 + t6443;
t5937 = -t6037 * t6114 + t6444;
t5862 = t5953 * t6112 - t6488;
t5859 = t5951 * t6112 - t6490;
t5856 = t5949 * t6112 - t6492;
t5853 = t5947 * t6112 - t6494;
t5850 = t5945 * t6112 - t6496;
t5847 = t5943 * t6112 - t6498;
t1 = [t6352 + t6350 + t6348 + t6346 + t6344 + t6342 - m(4) * g(1) + (-t6530 - t6531 - t6532 - t6536 - t6537 - t6538) * t6556 + (-t6330 - t6331 - t6332 - t6336 - t6337 - t6338) * m(3); t6353 + t6351 + t6349 + t6347 + t6345 + t6343 - m(4) * g(2) + (-t6533 - t6534 - t6535 - t6539 - t6540 - t6541) * t6556 + (-t6333 - t6334 - t6335 - t6339 - t6340 - t6341) * m(3); (-m(4) - 0.6e1 * t6121) * g(3); -t5863 * t6343 - t5860 * t6345 - t5857 * t6347 - t5854 * t6349 - t5851 * t6351 - t5848 * t6353 + (((-g(2) * t6445 - g(3) * t6171) * t6113 + g(2) * t6438) * t6115 + t6112 * ((g(2) * t6171 - g(3) * t6445) * t6113 + g(3) * t6438) + ((g(2) * t6446 - g(3) * t6172) * t6115 + t6112 * (g(2) * t6172 + g(3) * t6446)) * t6110) * m(4) + (t5848 * t6541 + t5851 * t6540 + t5854 * t6539 + t5857 * t6535 + t5860 * t6534 + t5863 * t6533 - t6488 - t6490 - t6492 - t6494 - t6496 - t6498 + (t5943 + t5945 + t5947 + t5949 + t5951 + t5953) * t6112) * t6556 + (t5848 * t6341 + t5851 * t6340 + t5854 * t6339 + t5857 * t6335 + t5860 * t6334 + t5863 * t6333) * m(3); t5863 * t6342 + t5860 * t6344 + t5857 * t6346 + t5854 * t6348 + t5851 * t6350 + t5848 * t6352 - (t6607 * g(3) + ((t6111 * t6229 + t6438) * t6115 + (t6110 * t6172 + t6171 * t6113) * t6112) * g(1)) * m(4) + (-t5848 * t6538 - t5851 * t6537 - t5854 * t6536 - t5857 * t6532 - t5860 * t6531 - t5863 * t6530 + t6439 + t6440 + t6441 + t6442 + t6443 + t6444 + (-t6037 - t6038 - t6039 - t6040 - t6041 - t6042) * t6114) * t6556 + (-t5848 * t6338 - t5851 * t6337 - t5854 * t6336 - t5857 * t6332 - t5860 * t6331 - t5863 * t6330) * m(3); (t5827 * t5942 + t5828 * t5862) * t6518 + (t5825 * t5941 + t5826 * t5859) * t6519 + (t5823 * t5940 + t5824 * t5856) * t6520 + (t5821 * t5939 + t5822 * t5853) * t6521 + (t5819 * t5938 + t5820 * t5850) * t6522 + (t5817 * t5937 + t5818 * t5847) * t6523 + (t6607 * g(2) + (-t6112 * t6438 + (t6112 * t6445 + t6115 * t6171) * t6113 + (-t6112 * t6446 + t6115 * t6172) * t6110) * g(1)) * m(4) + (-(t5783 * t5942 + t5786 * t5862) * t5810 - (t5782 * t5941 + t5785 * t5859) * t5809 - (t5781 * t5940 + t5784 * t5856) * t5808 - (t5777 * t5939 + t5780 * t5853) * t5807 - (t5776 * t5938 + t5779 * t5850) * t5806 - (t5775 * t5937 + t5778 * t5847) * t5805) * t6556 + (-(t5837 * t5942 + t5840 * t5862) * t6524 - (t5836 * t5941 + t5839 * t5859) * t6525 - (t5835 * t5940 + t5838 * t5856) * t6526 - (t5831 * t5939 + t5834 * t5853) * t6527 - (t5830 * t5938 + t5833 * t5850) * t6528 - (t5829 * t5937 + t5832 * t5847) * t6529) * m(3);];
taugX  = t1;
