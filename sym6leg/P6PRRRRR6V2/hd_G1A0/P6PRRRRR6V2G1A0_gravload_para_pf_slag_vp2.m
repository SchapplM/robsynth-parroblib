% Calculate Gravitation load for parallel robot
% P6PRRRRR6V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-09-11 16:13
% Revision: 7993d029b5937b704dcf3fc7d8ae322038cdcbdd (2019-09-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-09-11 13:34:54
% EndTime: 2019-09-11 13:35:31
% DurationCPUTime: 38.52s
% Computational Cost: add. (11222->994), mult. (28364->1672), div. (108->18), fcn. (23825->50), ass. (0->646)
t6007 = sin(qJ(2,6));
t5999 = cos(pkin(4));
t6000 = legFrame(6,3);
t5961 = sin(t6000);
t5967 = cos(t6000);
t5923 = -g(1) * t5961 + g(2) * t5967;
t5929 = g(1) * t5967 + g(2) * t5961;
t5992 = sin(pkin(10));
t5996 = cos(pkin(10));
t6118 = t5996 * t5923 - t5929 * t5992;
t5995 = sin(pkin(4));
t6378 = t5995 * g(3);
t6432 = t5999 * t6118 + t6378;
t6061 = t6007 * t6432;
t6009 = sin(qJ(2,5));
t6001 = legFrame(5,3);
t5962 = sin(t6001);
t5968 = cos(t6001);
t5924 = -g(1) * t5962 + g(2) * t5968;
t5930 = g(1) * t5968 + g(2) * t5962;
t6116 = t5996 * t5924 - t5930 * t5992;
t6433 = t5999 * t6116 + t6378;
t6060 = t6009 * t6433;
t6011 = sin(qJ(2,4));
t6002 = legFrame(4,3);
t5963 = sin(t6002);
t5969 = cos(t6002);
t5925 = -g(1) * t5963 + g(2) * t5969;
t5931 = g(1) * t5969 + g(2) * t5963;
t6114 = t5996 * t5925 - t5931 * t5992;
t6434 = t5999 * t6114 + t6378;
t6059 = t6011 * t6434;
t6019 = sin(qJ(2,3));
t6003 = legFrame(3,3);
t5964 = sin(t6003);
t5970 = cos(t6003);
t5926 = -g(1) * t5964 + g(2) * t5970;
t5932 = g(1) * t5970 + g(2) * t5964;
t6112 = t5996 * t5926 - t5932 * t5992;
t6435 = t5999 * t6112 + t6378;
t6058 = t6019 * t6435;
t6021 = sin(qJ(2,2));
t6004 = legFrame(2,3);
t5965 = sin(t6004);
t5971 = cos(t6004);
t5927 = -g(1) * t5965 + g(2) * t5971;
t5933 = g(1) * t5971 + g(2) * t5965;
t6110 = t5996 * t5927 - t5933 * t5992;
t6436 = t5999 * t6110 + t6378;
t6057 = t6021 * t6436;
t6023 = sin(qJ(2,1));
t6005 = legFrame(1,3);
t5966 = sin(t6005);
t5972 = cos(t6005);
t5928 = -g(1) * t5966 + g(2) * t5972;
t5934 = g(1) * t5972 + g(2) * t5966;
t6108 = t5996 * t5928 - t5934 * t5992;
t6437 = t5999 * t6108 + t6378;
t6056 = t6023 * t6437;
t5998 = cos(pkin(5));
t5984 = t5998 ^ 2;
t6400 = t5984 - 0.1e1;
t5997 = cos(pkin(6));
t5983 = t5997 ^ 2;
t6055 = pkin(9) ^ 2;
t5952 = pkin(3) ^ 2 + t5983 * t6055 - t6055;
t6204 = t5952 * t6400;
t6031 = xP(6);
t5977 = sin(t6031);
t5980 = cos(t6031);
t6043 = koppelP(6,2);
t6049 = koppelP(6,1);
t5898 = t5977 * t6043 - t5980 * t6049;
t6032 = xP(5);
t5978 = sin(t6032);
t5981 = cos(t6032);
t6037 = koppelP(6,3);
t5810 = t5898 * t5978 + t5981 * t6037;
t5904 = t5977 * t6049 + t5980 * t6043;
t6033 = xP(4);
t5979 = sin(t6033);
t5982 = cos(t6033);
t5715 = t5810 * t5982 + t5904 * t5979;
t6044 = koppelP(5,2);
t6050 = koppelP(5,1);
t5899 = t5977 * t6044 - t5980 * t6050;
t6038 = koppelP(5,3);
t5812 = t5899 * t5978 + t5981 * t6038;
t5905 = t5977 * t6050 + t5980 * t6044;
t5718 = t5812 * t5982 + t5905 * t5979;
t6045 = koppelP(4,2);
t6051 = koppelP(4,1);
t5900 = t5977 * t6045 - t5980 * t6051;
t6039 = koppelP(4,3);
t5814 = t5900 * t5978 + t5981 * t6039;
t5906 = t5977 * t6051 + t5980 * t6045;
t5721 = t5814 * t5982 + t5906 * t5979;
t6046 = koppelP(3,2);
t6052 = koppelP(3,1);
t5901 = t5977 * t6046 - t5980 * t6052;
t6040 = koppelP(3,3);
t5816 = t5901 * t5978 + t5981 * t6040;
t5907 = t5977 * t6052 + t5980 * t6046;
t5724 = t5816 * t5982 + t5907 * t5979;
t6047 = koppelP(2,2);
t6053 = koppelP(2,1);
t5902 = t5977 * t6047 - t5980 * t6053;
t6041 = koppelP(2,3);
t5818 = t5902 * t5978 + t5981 * t6041;
t5908 = t5977 * t6053 + t5980 * t6047;
t5727 = t5818 * t5982 + t5908 * t5979;
t6048 = koppelP(1,2);
t6054 = koppelP(1,1);
t5903 = t5977 * t6048 - t5980 * t6054;
t6042 = koppelP(1,3);
t5820 = t5903 * t5978 + t5981 * t6042;
t5909 = t5977 * t6054 + t5980 * t6048;
t5730 = t5820 * t5982 + t5909 * t5979;
t6035 = mrSges(4,2);
t6036 = mrSges(4,1);
t6105 = t5977 * t6035 - t5980 * t6036;
t6034 = mrSges(4,3);
t6291 = t5981 * t6034;
t6407 = t5978 * t6105 + t6291;
t6028 = cos(qJ(3,1));
t5991 = t6028 ^ 2;
t6294 = (t5998 + 0.1e1) * (t5998 - 0.1e1);
t6223 = 0.2e1 * t6294;
t6431 = t5995 * (t5991 * t6223 - t6400);
t6026 = cos(qJ(3,2));
t5990 = t6026 ^ 2;
t6430 = t5995 * (t5990 * t6223 - t6400);
t6024 = cos(qJ(3,3));
t5989 = t6024 ^ 2;
t6429 = t5995 * (t5989 * t6223 - t6400);
t6016 = cos(qJ(3,4));
t5987 = t6016 ^ 2;
t6428 = t5995 * (t5987 * t6223 - t6400);
t6014 = cos(qJ(3,5));
t5986 = t6014 ^ 2;
t6427 = t5995 * (t5986 * t6223 - t6400);
t6012 = cos(qJ(3,6));
t5985 = t6012 ^ 2;
t6426 = t5995 * (t5985 * t6223 - t6400);
t6117 = t5923 * t5992 + t5929 * t5996;
t6425 = t6007 * t6117;
t6115 = t5924 * t5992 + t5930 * t5996;
t6424 = t6009 * t6115;
t6113 = t5925 * t5992 + t5931 * t5996;
t6423 = t6011 * t6113;
t6111 = t5926 * t5992 + t5932 * t5996;
t6422 = t6019 * t6111;
t6109 = t5927 * t5992 + t5933 * t5996;
t6421 = t6021 * t6109;
t6107 = t5928 * t5992 + t5934 * t5996;
t6420 = t6023 * t6107;
t5994 = sin(pkin(5));
t6276 = t5994 * t5998;
t6401 = 0.2e1 * t5991;
t6419 = t6276 * (t6401 - 0.1e1);
t6402 = 0.2e1 * t5990;
t6418 = t6276 * (t6402 - 0.1e1);
t6403 = 0.2e1 * t5989;
t6417 = t6276 * (t6403 - 0.1e1);
t6404 = 0.2e1 * t5987;
t6416 = t6276 * (t6404 - 0.1e1);
t6405 = 0.2e1 * t5986;
t6415 = t6276 * (t6405 - 0.1e1);
t6406 = 0.2e1 * t5985;
t6414 = t6276 * (t6406 - 0.1e1);
t5847 = t5966 * t5996 + t5972 * t5992;
t5853 = -t5966 * t5992 + t5972 * t5996;
t6029 = cos(qJ(2,1));
t6237 = t5999 * t6023;
t5766 = -t5847 * t6237 + t5853 * t6029;
t5993 = sin(pkin(6));
t5960 = t5993 * pkin(9);
t6022 = sin(qJ(3,1));
t6234 = t5999 * t6029;
t6277 = t5994 * t5995;
t6088 = (t5847 * t6234 + t5853 * t6023) * t5998 - t5847 * t6277;
t5694 = (pkin(3) * t6088 - t5766 * t5960) * t6028 + t6022 * (pkin(3) * t5766 + t5960 * t6088);
t5957 = pkin(9) * t5997 + pkin(8);
t6308 = t5957 * t5994;
t6384 = pkin(3) * t5998;
t5834 = t6022 * t6384 - t6308;
t6278 = t5993 * t6022;
t6207 = pkin(9) * t6278;
t5951 = pkin(2) + t6207;
t5797 = t5834 * t6029 + t5951 * t6023;
t6252 = t5998 * t6029;
t6170 = t5993 * t6252;
t6142 = pkin(9) * t6170;
t5896 = -pkin(3) * t6023 + t6142;
t6284 = t5993 * t5998;
t6213 = pkin(9) * t6284;
t6334 = (pkin(3) * t6029 + t6023 * t6213) * t5999;
t6340 = (-t5834 * t6023 + t5951 * t6029) * t5999;
t5704 = (-t5847 * t6334 + t5853 * t5896) * t6028 - t5847 * t6340 - t5853 * t5797;
t6383 = pkin(3) * t5999;
t5955 = t5993 * t6383;
t6141 = t5984 * t5955;
t6086 = pkin(9) * (t5955 - t6141);
t6177 = t5957 * t6276;
t5910 = pkin(3) * t6177;
t6224 = pkin(2) * t5960;
t6119 = (t5910 - t6224) * t5999;
t6127 = t5999 * t6204;
t6134 = pkin(3) * t6142;
t6206 = 0.2e1 * pkin(3) * t5960;
t6215 = pkin(9) * (t5997 + 0.1e1) * (t5997 - 0.1e1);
t5953 = pkin(9) * t5955;
t6226 = 0.2e1 * pkin(9) * t6141 - 0.2e1 * t5953;
t5959 = pkin(2) * t6383;
t6126 = t6177 * t5960;
t6227 = t5999 * t6126 + t5959;
t6228 = t6023 * t5952;
t6270 = t5994 * t6023;
t6295 = t5957 * t6029;
t6376 = (m(3) * pkin(8) + mrSges(3,3)) * t5994 - mrSges(2,2);
t6377 = m(3) * pkin(2) + mrSges(2,1);
t6352 = 0.1e1 / (t6226 * t5991 + (-t6127 * t6022 + t6119) * t6028 + t6227 * t6022 + t6086 + (((-0.2e1 * t6134 + t6228) * t5991 + (t5952 * t6252 + t6023 * t6206) * t6022 * t6028 + pkin(9) * (pkin(3) * t6170 - t6023 * t6215)) * t5994 + (pkin(3) * t6028 + t6207) * (pkin(2) * t6270 + t5984 * t6295 - t6295)) * t5995) * ((-t6029 * t6437 + t6420) * (mrSges(3,1) * t6028 - mrSges(3,2) * t6022 + t6377) + (-t6029 * t6107 - t6056) * ((-mrSges(3,1) * t6022 - mrSges(3,2) * t6028) * t5998 + t6376));
t5841 = t5953 * t6294;
t5713 = (t5841 - (t6134 - t6228 / 0.2e1) * t6277) * t6401;
t6205 = (-t5983 + 0.1e1) * pkin(9);
t5919 = pkin(2) * t6278 + t6205;
t5956 = pkin(3) * t6276;
t6379 = g(3) * t5994;
t5958 = mrSges(3,2) * t6379;
t6074 = -t6022 * t6204 - t6224;
t6214 = t5984 * t5960;
t6140 = t5960 - t6214;
t6386 = pkin(3) * t5957;
t6155 = t6400 * t6386;
t5950 = pkin(2) + 0.2e1 * t6207;
t6156 = t5950 * t6270;
t6169 = t5996 * t6277;
t6176 = t5992 * t6277;
t6184 = t5952 * t6276;
t6203 = t5957 * t6400;
t6238 = t5999 * t6022;
t6258 = t5996 * t6029;
t6285 = t5992 * t6029;
t6264 = t5995 * t6029;
t6346 = (g(3) * t6264 - t6420) * t5998;
t6381 = pkin(9) * t5995;
t6358 = (t5958 * t6238 + ((-t6108 * t6277 + t6346) * t6022 + (t5998 * t6108 * t6238 + t6028 * t6107) * t6029 + t6028 * t6056) * mrSges(3,2) + (((-t6108 * t6252 - t6379) * t5999 - t6346 + t5928 * t6169 - t5934 * t6176) * t6028 + (t5928 * t6285 + t5934 * t6258 + t6056) * t6022) * mrSges(3,1)) / (t5713 + ((t5910 + t6074) * t5999 + t5995 * ((t6022 * t6184 + t6155) * t6029 + pkin(3) * t6156)) * t6028 + (t6022 * t6126 + (pkin(2) * t6022 + t6140) * pkin(3)) * t5999 + (t5993 * (t6022 * t6203 + t5956) * t6029 + t5919 * t6270) * t6381);
t6413 = t5694 * t6352 + t5704 * t6358;
t5846 = t5965 * t5996 + t5971 * t5992;
t5852 = -t5965 * t5992 + t5971 * t5996;
t6027 = cos(qJ(2,2));
t6239 = t5999 * t6021;
t5764 = -t5846 * t6239 + t5852 * t6027;
t6020 = sin(qJ(3,2));
t6235 = t5999 * t6027;
t6090 = (t5846 * t6235 + t5852 * t6021) * t5998 - t5846 * t6277;
t5692 = (pkin(3) * t6090 - t5764 * t5960) * t6026 + t6020 * (pkin(3) * t5764 + t5960 * t6090);
t5833 = t6020 * t6384 - t6308;
t6279 = t5993 * t6020;
t6208 = pkin(9) * t6279;
t5949 = pkin(2) + t6208;
t5795 = t5833 * t6027 + t5949 * t6021;
t6253 = t5998 * t6027;
t6171 = t5993 * t6253;
t6143 = pkin(9) * t6171;
t5895 = -pkin(3) * t6021 + t6143;
t6335 = (pkin(3) * t6027 + t6021 * t6213) * t5999;
t6341 = (-t5833 * t6021 + t5949 * t6027) * t5999;
t5703 = (-t5846 * t6335 + t5852 * t5895) * t6026 - t5846 * t6341 - t5852 * t5795;
t6135 = pkin(3) * t6143;
t6229 = t6021 * t5952;
t6271 = t5994 * t6021;
t6296 = t5957 * t6027;
t6353 = 0.1e1 / (t6226 * t5990 + (-t6127 * t6020 + t6119) * t6026 + t6227 * t6020 + t6086 + (((-0.2e1 * t6135 + t6229) * t5990 + (t5952 * t6253 + t6021 * t6206) * t6020 * t6026 + pkin(9) * (pkin(3) * t6171 - t6021 * t6215)) * t5994 + (pkin(3) * t6026 + t6208) * (pkin(2) * t6271 + t5984 * t6296 - t6296)) * t5995) * ((-t6027 * t6436 + t6421) * (mrSges(3,1) * t6026 - mrSges(3,2) * t6020 + t6377) + (-t6027 * t6109 - t6057) * ((-mrSges(3,1) * t6020 - mrSges(3,2) * t6026) * t5998 + t6376));
t5712 = (t5841 - (t6135 - t6229 / 0.2e1) * t6277) * t6402;
t5918 = pkin(2) * t6279 + t6205;
t6075 = -t6020 * t6204 - t6224;
t5948 = pkin(2) + 0.2e1 * t6208;
t6157 = t5948 * t6271;
t6240 = t5999 * t6020;
t6259 = t5996 * t6027;
t6286 = t5992 * t6027;
t6265 = t5995 * t6027;
t6347 = (g(3) * t6265 - t6421) * t5998;
t6359 = (t5958 * t6240 + ((-t6110 * t6277 + t6347) * t6020 + (t5998 * t6110 * t6240 + t6026 * t6109) * t6027 + t6026 * t6057) * mrSges(3,2) + (((-t6110 * t6253 - t6379) * t5999 - t6347 + t5927 * t6169 - t5933 * t6176) * t6026 + (t5927 * t6286 + t5933 * t6259 + t6057) * t6020) * mrSges(3,1)) / (t5712 + ((t5910 + t6075) * t5999 + t5995 * ((t6020 * t6184 + t6155) * t6027 + pkin(3) * t6157)) * t6026 + (t6020 * t6126 + (pkin(2) * t6020 + t6140) * pkin(3)) * t5999 + (t5993 * (t6020 * t6203 + t5956) * t6027 + t5918 * t6271) * t6381);
t6412 = t5692 * t6353 + t5703 * t6359;
t5845 = t5964 * t5996 + t5970 * t5992;
t5851 = -t5964 * t5992 + t5970 * t5996;
t6025 = cos(qJ(2,3));
t6241 = t5999 * t6019;
t5762 = -t5845 * t6241 + t5851 * t6025;
t6018 = sin(qJ(3,3));
t6236 = t5999 * t6025;
t6092 = (t5845 * t6236 + t5851 * t6019) * t5998 - t5845 * t6277;
t5690 = (pkin(3) * t6092 - t5762 * t5960) * t6024 + t6018 * (pkin(3) * t5762 + t5960 * t6092);
t5832 = t6018 * t6384 - t6308;
t6280 = t5993 * t6018;
t6209 = pkin(9) * t6280;
t5947 = pkin(2) + t6209;
t5793 = t5832 * t6025 + t5947 * t6019;
t6254 = t5998 * t6025;
t6172 = t5993 * t6254;
t6144 = pkin(9) * t6172;
t5894 = -pkin(3) * t6019 + t6144;
t6336 = (pkin(3) * t6025 + t6019 * t6213) * t5999;
t6342 = (-t5832 * t6019 + t5947 * t6025) * t5999;
t5702 = (-t5845 * t6336 + t5851 * t5894) * t6024 - t5845 * t6342 - t5851 * t5793;
t6136 = pkin(3) * t6144;
t6230 = t6019 * t5952;
t6272 = t5994 * t6019;
t6297 = t5957 * t6025;
t6354 = 0.1e1 / (t6226 * t5989 + (-t6127 * t6018 + t6119) * t6024 + t6227 * t6018 + t6086 + (((-0.2e1 * t6136 + t6230) * t5989 + (t5952 * t6254 + t6019 * t6206) * t6018 * t6024 + pkin(9) * (pkin(3) * t6172 - t6019 * t6215)) * t5994 + (pkin(3) * t6024 + t6209) * (pkin(2) * t6272 + t5984 * t6297 - t6297)) * t5995) * ((-t6025 * t6435 + t6422) * (mrSges(3,1) * t6024 - mrSges(3,2) * t6018 + t6377) + (-t6025 * t6111 - t6058) * ((-mrSges(3,1) * t6018 - mrSges(3,2) * t6024) * t5998 + t6376));
t5711 = (t5841 - (t6136 - t6230 / 0.2e1) * t6277) * t6403;
t5917 = pkin(2) * t6280 + t6205;
t6076 = -t6018 * t6204 - t6224;
t5946 = pkin(2) + 0.2e1 * t6209;
t6158 = t5946 * t6272;
t6242 = t5999 * t6018;
t6260 = t5996 * t6025;
t6287 = t5992 * t6025;
t6266 = t5995 * t6025;
t6348 = (g(3) * t6266 - t6422) * t5998;
t6360 = (t5958 * t6242 + ((-t6112 * t6277 + t6348) * t6018 + (t5998 * t6112 * t6242 + t6024 * t6111) * t6025 + t6024 * t6058) * mrSges(3,2) + (((-t6112 * t6254 - t6379) * t5999 - t6348 + t5926 * t6169 - t5932 * t6176) * t6024 + (t5926 * t6287 + t5932 * t6260 + t6058) * t6018) * mrSges(3,1)) / (t5711 + ((t5910 + t6076) * t5999 + t5995 * ((t6018 * t6184 + t6155) * t6025 + pkin(3) * t6158)) * t6024 + (t6018 * t6126 + (pkin(2) * t6018 + t6140) * pkin(3)) * t5999 + (t5993 * (t6018 * t6203 + t5956) * t6025 + t5917 * t6272) * t6381);
t6411 = t5690 * t6354 + t5702 * t6360;
t5844 = t5963 * t5996 + t5969 * t5992;
t5850 = -t5963 * t5992 + t5969 * t5996;
t6017 = cos(qJ(2,4));
t6246 = t5999 * t6011;
t5742 = -t5844 * t6246 + t5850 * t6017;
t6010 = sin(qJ(3,4));
t6243 = t5999 * t6017;
t6094 = (t5844 * t6243 + t5850 * t6011) * t5998 - t5844 * t6277;
t5688 = (pkin(3) * t6094 - t5742 * t5960) * t6016 + t6010 * (pkin(3) * t5742 + t5960 * t6094);
t5831 = t6010 * t6384 - t6308;
t6281 = t5993 * t6010;
t6210 = pkin(9) * t6281;
t5945 = pkin(2) + t6210;
t5791 = t5831 * t6017 + t5945 * t6011;
t6255 = t5998 * t6017;
t6173 = t5993 * t6255;
t6145 = pkin(9) * t6173;
t5890 = -pkin(3) * t6011 + t6145;
t6337 = (pkin(3) * t6017 + t6011 * t6213) * t5999;
t6343 = (-t5831 * t6011 + t5945 * t6017) * t5999;
t5698 = (-t5844 * t6337 + t5850 * t5890) * t6016 - t5844 * t6343 - t5850 * t5791;
t6137 = pkin(3) * t6145;
t6231 = t6011 * t5952;
t6273 = t5994 * t6011;
t6301 = t5957 * t6017;
t6355 = 0.1e1 / (t6226 * t5987 + (-t6127 * t6010 + t6119) * t6016 + t6227 * t6010 + t6086 + (((-0.2e1 * t6137 + t6231) * t5987 + (t5952 * t6255 + t6011 * t6206) * t6010 * t6016 + pkin(9) * (pkin(3) * t6173 - t6011 * t6215)) * t5994 + (pkin(3) * t6016 + t6210) * (pkin(2) * t6273 + t5984 * t6301 - t6301)) * t5995) * ((-t6017 * t6434 + t6423) * (mrSges(3,1) * t6016 - mrSges(3,2) * t6010 + t6377) + (-t6017 * t6113 - t6059) * ((-mrSges(3,1) * t6010 - mrSges(3,2) * t6016) * t5998 + t6376));
t5710 = (t5841 - (t6137 - t6231 / 0.2e1) * t6277) * t6404;
t5913 = pkin(2) * t6281 + t6205;
t6077 = -t6010 * t6204 - t6224;
t5944 = pkin(2) + 0.2e1 * t6210;
t6159 = t5944 * t6273;
t6247 = t5999 * t6010;
t6261 = t5996 * t6017;
t6288 = t5992 * t6017;
t6267 = t5995 * t6017;
t6349 = (g(3) * t6267 - t6423) * t5998;
t6361 = (t5958 * t6247 + ((-t6114 * t6277 + t6349) * t6010 + (t5998 * t6114 * t6247 + t6016 * t6113) * t6017 + t6016 * t6059) * mrSges(3,2) + (((-t6114 * t6255 - t6379) * t5999 - t6349 + t5925 * t6169 - t5931 * t6176) * t6016 + (t5925 * t6288 + t5931 * t6261 + t6059) * t6010) * mrSges(3,1)) / (t5710 + ((t5910 + t6077) * t5999 + t5995 * ((t6010 * t6184 + t6155) * t6017 + pkin(3) * t6159)) * t6016 + (t6010 * t6126 + (pkin(2) * t6010 + t6140) * pkin(3)) * t5999 + (t5993 * (t6010 * t6203 + t5956) * t6017 + t5913 * t6273) * t6381);
t6410 = t5688 * t6355 + t5698 * t6361;
t5843 = t5962 * t5996 + t5968 * t5992;
t5849 = -t5962 * t5992 + t5968 * t5996;
t6015 = cos(qJ(2,5));
t6248 = t5999 * t6009;
t5740 = -t5843 * t6248 + t5849 * t6015;
t6008 = sin(qJ(3,5));
t6244 = t5999 * t6015;
t6096 = (t5843 * t6244 + t5849 * t6009) * t5998 - t5843 * t6277;
t5686 = (pkin(3) * t6096 - t5740 * t5960) * t6014 + t6008 * (pkin(3) * t5740 + t5960 * t6096);
t5830 = t6008 * t6384 - t6308;
t6282 = t5993 * t6008;
t6211 = pkin(9) * t6282;
t5943 = pkin(2) + t6211;
t5789 = t5830 * t6015 + t5943 * t6009;
t6256 = t5998 * t6015;
t6174 = t5993 * t6256;
t6146 = pkin(9) * t6174;
t5889 = -pkin(3) * t6009 + t6146;
t6338 = (pkin(3) * t6015 + t6009 * t6213) * t5999;
t6344 = (-t5830 * t6009 + t5943 * t6015) * t5999;
t5697 = (-t5843 * t6338 + t5849 * t5889) * t6014 - t5843 * t6344 - t5849 * t5789;
t6138 = pkin(3) * t6146;
t6232 = t6009 * t5952;
t6274 = t5994 * t6009;
t6302 = t5957 * t6015;
t6356 = 0.1e1 / (t6226 * t5986 + (-t6127 * t6008 + t6119) * t6014 + t6227 * t6008 + t6086 + (((-0.2e1 * t6138 + t6232) * t5986 + (t5952 * t6256 + t6009 * t6206) * t6008 * t6014 + pkin(9) * (pkin(3) * t6174 - t6009 * t6215)) * t5994 + (pkin(3) * t6014 + t6211) * (pkin(2) * t6274 + t5984 * t6302 - t6302)) * t5995) * ((-t6015 * t6433 + t6424) * (mrSges(3,1) * t6014 - mrSges(3,2) * t6008 + t6377) + (-t6015 * t6115 - t6060) * ((-mrSges(3,1) * t6008 - mrSges(3,2) * t6014) * t5998 + t6376));
t5709 = (t5841 - (t6138 - t6232 / 0.2e1) * t6277) * t6405;
t5912 = pkin(2) * t6282 + t6205;
t6078 = -t6008 * t6204 - t6224;
t5942 = pkin(2) + 0.2e1 * t6211;
t6160 = t5942 * t6274;
t6249 = t5999 * t6008;
t6262 = t5996 * t6015;
t6289 = t5992 * t6015;
t6268 = t5995 * t6015;
t6350 = (g(3) * t6268 - t6424) * t5998;
t6362 = (t5958 * t6249 + ((-t6116 * t6277 + t6350) * t6008 + (t5998 * t6116 * t6249 + t6014 * t6115) * t6015 + t6014 * t6060) * mrSges(3,2) + (((-t6116 * t6256 - t6379) * t5999 - t6350 + t5924 * t6169 - t5930 * t6176) * t6014 + (t5924 * t6289 + t5930 * t6262 + t6060) * t6008) * mrSges(3,1)) / (t5709 + ((t5910 + t6078) * t5999 + t5995 * ((t6008 * t6184 + t6155) * t6015 + pkin(3) * t6160)) * t6014 + (t6008 * t6126 + (pkin(2) * t6008 + t6140) * pkin(3)) * t5999 + (t5993 * (t6008 * t6203 + t5956) * t6015 + t5912 * t6274) * t6381);
t6409 = t5686 * t6356 + t5697 * t6362;
t5842 = t5961 * t5996 + t5967 * t5992;
t5848 = -t5961 * t5992 + t5967 * t5996;
t6013 = cos(qJ(2,6));
t6250 = t5999 * t6007;
t5738 = -t5842 * t6250 + t5848 * t6013;
t6006 = sin(qJ(3,6));
t6245 = t5999 * t6013;
t6098 = (t5842 * t6245 + t5848 * t6007) * t5998 - t5842 * t6277;
t5684 = (pkin(3) * t6098 - t5738 * t5960) * t6012 + t6006 * (pkin(3) * t5738 + t5960 * t6098);
t5829 = t6006 * t6384 - t6308;
t6283 = t5993 * t6006;
t6212 = pkin(9) * t6283;
t5941 = pkin(2) + t6212;
t5787 = t5829 * t6013 + t5941 * t6007;
t6257 = t5998 * t6013;
t6175 = t5993 * t6257;
t6147 = pkin(9) * t6175;
t5888 = -pkin(3) * t6007 + t6147;
t6339 = (pkin(3) * t6013 + t6007 * t6213) * t5999;
t6345 = (-t5829 * t6007 + t5941 * t6013) * t5999;
t5696 = (-t5842 * t6339 + t5848 * t5888) * t6012 - t5842 * t6345 - t5848 * t5787;
t6139 = pkin(3) * t6147;
t6233 = t6007 * t5952;
t6275 = t5994 * t6007;
t6303 = t5957 * t6013;
t6357 = 0.1e1 / (t6226 * t5985 + (-t6127 * t6006 + t6119) * t6012 + t6227 * t6006 + t6086 + (((-0.2e1 * t6139 + t6233) * t5985 + (t5952 * t6257 + t6007 * t6206) * t6006 * t6012 + pkin(9) * (pkin(3) * t6175 - t6007 * t6215)) * t5994 + (pkin(3) * t6012 + t6212) * (pkin(2) * t6275 + t5984 * t6303 - t6303)) * t5995) * ((-t6013 * t6432 + t6425) * (mrSges(3,1) * t6012 - mrSges(3,2) * t6006 + t6377) + (-t6013 * t6117 - t6061) * ((-mrSges(3,1) * t6006 - mrSges(3,2) * t6012) * t5998 + t6376));
t5708 = (t5841 - (t6139 - t6233 / 0.2e1) * t6277) * t6406;
t5911 = pkin(2) * t6283 + t6205;
t6079 = -t6006 * t6204 - t6224;
t5940 = pkin(2) + 0.2e1 * t6212;
t6161 = t5940 * t6275;
t6251 = t5999 * t6006;
t6263 = t5996 * t6013;
t6290 = t5992 * t6013;
t6269 = t5995 * t6013;
t6351 = (g(3) * t6269 - t6425) * t5998;
t6363 = (t5958 * t6251 + ((-t6118 * t6277 + t6351) * t6006 + (t5998 * t6118 * t6251 + t6012 * t6117) * t6013 + t6012 * t6061) * mrSges(3,2) + (((-t6118 * t6257 - t6379) * t5999 - t6351 + t5923 * t6169 - t5929 * t6176) * t6012 + (t5923 * t6290 + t5929 * t6263 + t6061) * t6006) * mrSges(3,1)) / (t5708 + ((t5910 + t6079) * t5999 + t5995 * ((t6006 * t6184 + t6155) * t6013 + pkin(3) * t6161)) * t6012 + (t6006 * t6126 + (pkin(2) * t6006 + t6140) * pkin(3)) * t5999 + (t5993 * (t6006 * t6203 + t5956) * t6013 + t5911 * t6275) * t6381);
t6408 = t5684 * t6357 + t5696 * t6363;
t6393 = pkin(2) * t5995;
t6392 = pkin(3) * t5940;
t6391 = pkin(3) * t5942;
t6390 = pkin(3) * t5944;
t6389 = pkin(3) * t5946;
t6388 = pkin(3) * t5948;
t6387 = pkin(3) * t5950;
t6385 = pkin(3) * t5995;
t6382 = pkin(9) * t5994;
t5988 = m(1) + m(2) + m(3);
t6380 = g(3) * t5988;
t5854 = t5992 * t6245 + t5996 * t6007;
t5857 = -t5992 * t6007 + t5996 * t6245;
t5753 = -t5854 * t5961 + t5857 * t5967;
t5860 = t5996 * t6250 + t6290;
t5863 = -t5992 * t6250 + t6263;
t5756 = t5860 * t5967 + t5863 * t5961;
t6314 = t5952 * t6006;
t6183 = t5995 * t6314;
t6070 = t5753 * t6386 + t5848 * t6183;
t6225 = pkin(2) * t6385;
t6154 = t6006 * t6225;
t6168 = t5995 * t6276;
t6315 = t5952 * t5994;
t6190 = t5985 * t6315;
t6307 = t5957 * t5995;
t6216 = pkin(3) * t6307;
t6222 = t6012 * t6393;
t6306 = t5957 * t6006;
t6321 = t5911 * t5994;
t5642 = t5756 * t6190 + (((t5753 * t6314 - t5848 * t6216) * t5998 + t5756 * t6392) * t5994 + t6070 * t5984 - t6070) * t6012 - t5848 * t6154 + (t5756 * t6321 + (t5848 * t6222 + (t5753 * t5984 - t5848 * t6168 - t5753) * t6306 + (-t5753 * t6414 - t5848 * t6426) * pkin(3)) * t5993) * pkin(9);
t5937 = t5957 * t6383;
t6148 = t6307 * t5960;
t6167 = t6006 * t6269;
t5672 = 0.1e1 / (t5708 + ((t5952 * t6167 + t5937) * t6276 + (t6013 * t6203 + t6161) * t6385 + t6079 * t5999) * t6012 + ((pkin(3) * t6269 + t5957 * t6251) * t6284 + t6007 * t5995 * t5911) * t6382 + (t5957 * t6167 - t6383) * t6214 + (-t6013 * t6148 + t5959) * t6006 + t5953);
t6375 = t5642 * t5672;
t5855 = t5992 * t6244 + t5996 * t6009;
t5858 = -t5992 * t6009 + t5996 * t6244;
t5754 = -t5855 * t5962 + t5858 * t5968;
t5861 = t5996 * t6248 + t6289;
t5864 = -t5992 * t6248 + t6262;
t5757 = t5861 * t5968 + t5864 * t5962;
t6313 = t5952 * t6008;
t6182 = t5995 * t6313;
t6069 = t5754 * t6386 + t5849 * t6182;
t6153 = t6008 * t6225;
t6189 = t5986 * t6315;
t6221 = t6014 * t6393;
t6305 = t5957 * t6008;
t6320 = t5912 * t5994;
t5643 = t5757 * t6189 + (((t5754 * t6313 - t5849 * t6216) * t5998 + t5757 * t6391) * t5994 + t6069 * t5984 - t6069) * t6014 - t5849 * t6153 + (t5757 * t6320 + (t5849 * t6221 + (t5754 * t5984 - t5849 * t6168 - t5754) * t6305 + (-t5754 * t6415 - t5849 * t6427) * pkin(3)) * t5993) * pkin(9);
t6166 = t6008 * t6268;
t5673 = 0.1e1 / (t5709 + ((t5952 * t6166 + t5937) * t6276 + (t6015 * t6203 + t6160) * t6385 + t6078 * t5999) * t6014 + ((pkin(3) * t6268 + t5957 * t6249) * t6284 + t6009 * t5995 * t5912) * t6382 + (t5957 * t6166 - t6383) * t6214 + (-t6015 * t6148 + t5959) * t6008 + t5953);
t6374 = t5643 * t5673;
t5856 = t5992 * t6243 + t5996 * t6011;
t5859 = -t5992 * t6011 + t5996 * t6243;
t5755 = -t5856 * t5963 + t5859 * t5969;
t5862 = t5996 * t6246 + t6288;
t5865 = -t5992 * t6246 + t6261;
t5758 = t5862 * t5969 + t5865 * t5963;
t6312 = t5952 * t6010;
t6181 = t5995 * t6312;
t6068 = t5755 * t6386 + t5850 * t6181;
t6152 = t6010 * t6225;
t6188 = t5987 * t6315;
t6220 = t6016 * t6393;
t6304 = t5957 * t6010;
t6319 = t5913 * t5994;
t5644 = t5758 * t6188 + (((t5755 * t6312 - t5850 * t6216) * t5998 + t5758 * t6390) * t5994 + t6068 * t5984 - t6068) * t6016 - t5850 * t6152 + (t5758 * t6319 + (t5850 * t6220 + (t5755 * t5984 - t5850 * t6168 - t5755) * t6304 + (-t5755 * t6416 - t5850 * t6428) * pkin(3)) * t5993) * pkin(9);
t6165 = t6010 * t6267;
t5674 = 0.1e1 / (t5710 + ((t5952 * t6165 + t5937) * t6276 + (t6017 * t6203 + t6159) * t6385 + t6077 * t5999) * t6016 + ((pkin(3) * t6267 + t5957 * t6247) * t6284 + t6011 * t5995 * t5913) * t6382 + (t5957 * t6165 - t6383) * t6214 + (-t6017 * t6148 + t5959) * t6010 + t5953);
t6373 = t5644 * t5674;
t5750 = t5854 * t5967 + t5857 * t5961;
t5759 = -t5860 * t5961 + t5863 * t5967;
t6073 = -t5750 * t6386 - t5842 * t6183;
t5645 = t5759 * t6190 + (((-t5750 * t6314 + t5842 * t6216) * t5998 + t5759 * t6392) * t5994 + t6073 * t5984 - t6073) * t6012 + t5842 * t6154 + (t5759 * t6321 + (-t5842 * t6222 + (-t5750 * t5984 + t5842 * t6168 + t5750) * t6306 + (t5750 * t6414 + t5842 * t6426) * pkin(3)) * t5993) * pkin(9);
t6372 = t5645 * t5672;
t5751 = t5855 * t5968 + t5858 * t5962;
t5760 = -t5861 * t5962 + t5864 * t5968;
t6072 = -t5751 * t6386 - t5843 * t6182;
t5646 = t5760 * t6189 + (((-t5751 * t6313 + t5843 * t6216) * t5998 + t5760 * t6391) * t5994 + t6072 * t5984 - t6072) * t6014 + t5843 * t6153 + (t5760 * t6320 + (-t5843 * t6221 + (-t5751 * t5984 + t5843 * t6168 + t5751) * t6305 + (t5751 * t6415 + t5843 * t6427) * pkin(3)) * t5993) * pkin(9);
t6371 = t5646 * t5673;
t5752 = t5856 * t5969 + t5859 * t5963;
t5761 = -t5862 * t5963 + t5865 * t5969;
t6071 = -t5752 * t6386 - t5844 * t6181;
t5647 = t5761 * t6188 + (((-t5752 * t6312 + t5844 * t6216) * t5998 + t5761 * t6390) * t5994 + t6071 * t5984 - t6071) * t6016 + t5844 * t6152 + (t5761 * t6319 + (-t5844 * t6220 + (-t5752 * t5984 + t5844 * t6168 + t5752) * t6304 + (t5752 * t6416 + t5844 * t6428) * pkin(3)) * t5993) * pkin(9);
t6370 = t5647 * t5674;
t5867 = t5992 * t6236 + t5996 * t6019;
t5870 = -t5992 * t6019 + t5996 * t6236;
t5777 = -t5867 * t5964 + t5870 * t5970;
t5873 = t5996 * t6241 + t6287;
t5876 = -t5992 * t6241 + t6260;
t5780 = t5873 * t5970 + t5876 * t5964;
t6311 = t5952 * t6018;
t6180 = t5995 * t6311;
t6064 = t5777 * t6386 + t5851 * t6180;
t6151 = t6018 * t6225;
t6187 = t5989 * t6315;
t6219 = t6024 * t6393;
t6300 = t5957 * t6018;
t6318 = t5917 * t5994;
t5648 = t5780 * t6187 + (((t5777 * t6311 - t5851 * t6216) * t5998 + t5780 * t6389) * t5994 + t6064 * t5984 - t6064) * t6024 - t5851 * t6151 + (t5780 * t6318 + (t5851 * t6219 + (t5777 * t5984 - t5851 * t6168 - t5777) * t6300 + (-t5777 * t6417 - t5851 * t6429) * pkin(3)) * t5993) * pkin(9);
t6164 = t6018 * t6266;
t5675 = 0.1e1 / (t5711 + ((t5952 * t6164 + t5937) * t6276 + (t6025 * t6203 + t6158) * t6385 + t6076 * t5999) * t6024 + ((pkin(3) * t6266 + t5957 * t6242) * t6284 + t6019 * t5995 * t5917) * t6382 + (t5957 * t6164 - t6383) * t6214 + (-t6025 * t6148 + t5959) * t6018 + t5953);
t6369 = t5648 * t5675;
t5868 = t5992 * t6235 + t5996 * t6021;
t5871 = -t5992 * t6021 + t5996 * t6235;
t5778 = -t5868 * t5965 + t5871 * t5971;
t5874 = t5996 * t6239 + t6286;
t5877 = -t5992 * t6239 + t6259;
t5781 = t5874 * t5971 + t5877 * t5965;
t6310 = t5952 * t6020;
t6179 = t5995 * t6310;
t6063 = t5778 * t6386 + t5852 * t6179;
t6150 = t6020 * t6225;
t6186 = t5990 * t6315;
t6218 = t6026 * t6393;
t6299 = t5957 * t6020;
t6317 = t5918 * t5994;
t5649 = t5781 * t6186 + (((t5778 * t6310 - t5852 * t6216) * t5998 + t5781 * t6388) * t5994 + t6063 * t5984 - t6063) * t6026 - t5852 * t6150 + (t5781 * t6317 + (t5852 * t6218 + (t5778 * t5984 - t5852 * t6168 - t5778) * t6299 + (-t5778 * t6418 - t5852 * t6430) * pkin(3)) * t5993) * pkin(9);
t6163 = t6020 * t6265;
t5676 = 0.1e1 / (t5712 + ((t5952 * t6163 + t5937) * t6276 + (t6027 * t6203 + t6157) * t6385 + t6075 * t5999) * t6026 + ((pkin(3) * t6265 + t5957 * t6240) * t6284 + t6021 * t5995 * t5918) * t6382 + (t5957 * t6163 - t6383) * t6214 + (-t6027 * t6148 + t5959) * t6020 + t5953);
t6368 = t5649 * t5676;
t5869 = t5992 * t6234 + t5996 * t6023;
t5872 = -t5992 * t6023 + t5996 * t6234;
t5779 = -t5869 * t5966 + t5872 * t5972;
t5875 = t5996 * t6237 + t6285;
t5878 = -t5992 * t6237 + t6258;
t5782 = t5875 * t5972 + t5878 * t5966;
t6309 = t5952 * t6022;
t6178 = t5995 * t6309;
t6062 = t5779 * t6386 + t5853 * t6178;
t6149 = t6022 * t6225;
t6185 = t5991 * t6315;
t6217 = t6028 * t6393;
t6298 = t5957 * t6022;
t6316 = t5919 * t5994;
t5650 = t5782 * t6185 + (((t5779 * t6309 - t5853 * t6216) * t5998 + t5782 * t6387) * t5994 + t6062 * t5984 - t6062) * t6028 - t5853 * t6149 + (t5782 * t6316 + (t5853 * t6217 + (t5779 * t5984 - t5853 * t6168 - t5779) * t6298 + (-t5779 * t6419 - t5853 * t6431) * pkin(3)) * t5993) * pkin(9);
t6162 = t6022 * t6264;
t5677 = 0.1e1 / (t5713 + ((t5952 * t6162 + t5937) * t6276 + (t6029 * t6203 + t6156) * t6385 + t6074 * t5999) * t6028 + ((pkin(3) * t6264 + t5957 * t6238) * t6284 + t6023 * t5995 * t5919) * t6382 + (t5957 * t6162 - t6383) * t6214 + (-t6029 * t6148 + t5959) * t6022 + t5953);
t6367 = t5650 * t5677;
t5774 = t5867 * t5970 + t5870 * t5964;
t5783 = -t5873 * t5964 + t5876 * t5970;
t6067 = -t5774 * t6386 - t5845 * t6180;
t5651 = t5783 * t6187 + (((-t5774 * t6311 + t5845 * t6216) * t5998 + t5783 * t6389) * t5994 + t6067 * t5984 - t6067) * t6024 + t5845 * t6151 + (t5783 * t6318 + (-t5845 * t6219 + (-t5774 * t5984 + t5845 * t6168 + t5774) * t6300 + (t5774 * t6417 + t5845 * t6429) * pkin(3)) * t5993) * pkin(9);
t6366 = t5651 * t5675;
t5775 = t5868 * t5971 + t5871 * t5965;
t5784 = -t5874 * t5965 + t5877 * t5971;
t6066 = -t5775 * t6386 - t5846 * t6179;
t5652 = t5784 * t6186 + (((-t5775 * t6310 + t5846 * t6216) * t5998 + t5784 * t6388) * t5994 + t6066 * t5984 - t6066) * t6026 + t5846 * t6150 + (t5784 * t6317 + (-t5846 * t6218 + (-t5775 * t5984 + t5846 * t6168 + t5775) * t6299 + (t5775 * t6418 + t5846 * t6430) * pkin(3)) * t5993) * pkin(9);
t6365 = t5652 * t5676;
t5776 = t5869 * t5972 + t5872 * t5966;
t5785 = -t5875 * t5966 + t5878 * t5972;
t6065 = -t5776 * t6386 - t5847 * t6178;
t5653 = t5785 * t6185 + (((-t5776 * t6309 + t5847 * t6216) * t5998 + t5785 * t6387) * t5994 + t6065 * t5984 - t6065) * t6028 + t5847 * t6149 + (t5785 * t6316 + (-t5847 * t6217 + (-t5776 * t5984 + t5847 * t6168 + t5776) * t6298 + (t5776 * t6419 + t5847 * t6431) * pkin(3)) * t5993) * pkin(9);
t6364 = t5653 * t5677;
t6332 = t5904 * t5982;
t6330 = t5905 * t5982;
t6328 = t5906 * t5982;
t6326 = t5907 * t5982;
t6324 = t5908 * t5982;
t6322 = t5909 * t5982;
t6293 = t5978 * t5979;
t6292 = t5978 * t6034;
t6106 = t5977 * t6036 + t6035 * t5980;
t6097 = (-t5842 * t6007 + t5848 * t6245) * t5998 - t5848 * t6277;
t6095 = (-t5843 * t6009 + t5849 * t6244) * t5998 - t5849 * t6277;
t6093 = (-t5844 * t6011 + t5850 * t6243) * t5998 - t5850 * t6277;
t6091 = (-t5845 * t6019 + t5851 * t6236) * t5998 - t5851 * t6277;
t6089 = (-t5846 * t6021 + t5852 * t6235) * t5998 - t5852 * t6277;
t6087 = (-t5847 * t6023 + t5853 * t6234) * t5998 - t5853 * t6277;
t5739 = t5842 * t6013 + t5848 * t6250;
t5685 = (pkin(3) * t6097 + t5739 * t5960) * t6012 + t6006 * (-pkin(3) * t5739 + t5960 * t6097);
t5699 = (-t5842 * t5888 - t5848 * t6339) * t6012 - t5848 * t6345 + t5842 * t5787;
t6085 = t5685 * t6357 + t5699 * t6363;
t5741 = t5843 * t6015 + t5849 * t6248;
t5687 = (pkin(3) * t6095 + t5741 * t5960) * t6014 + t6008 * (-pkin(3) * t5741 + t5960 * t6095);
t5700 = (-t5843 * t5889 - t5849 * t6338) * t6014 - t5849 * t6344 + t5843 * t5789;
t6084 = t5687 * t6356 + t5700 * t6362;
t5743 = t5844 * t6017 + t5850 * t6246;
t5689 = (pkin(3) * t6093 + t5743 * t5960) * t6016 + t6010 * (-pkin(3) * t5743 + t5960 * t6093);
t5701 = (-t5844 * t5890 - t5850 * t6337) * t6016 - t5850 * t6343 + t5844 * t5791;
t6083 = t5689 * t6355 + t5701 * t6361;
t5763 = t5845 * t6025 + t5851 * t6241;
t5691 = (pkin(3) * t6091 + t5763 * t5960) * t6024 + t6018 * (-pkin(3) * t5763 + t5960 * t6091);
t5705 = (-t5845 * t5894 - t5851 * t6336) * t6024 - t5851 * t6342 + t5845 * t5793;
t6082 = t5691 * t6354 + t5705 * t6360;
t5765 = t5846 * t6027 + t5852 * t6239;
t5693 = (pkin(3) * t6089 + t5765 * t5960) * t6026 + t6020 * (-pkin(3) * t5765 + t5960 * t6089);
t5706 = (-t5846 * t5895 - t5852 * t6335) * t6026 - t5852 * t6341 + t5846 * t5795;
t6081 = t5693 * t6353 + t5706 * t6359;
t5767 = t5847 * t6029 + t5853 * t6237;
t5695 = (pkin(3) * t6087 + t5767 * t5960) * t6028 + t6022 * (-pkin(3) * t5767 + t5960 * t6087);
t5707 = (-t5847 * t5896 - t5853 * t6334) * t6028 - t5853 * t6340 + t5847 * t5797;
t6080 = t5695 * t6352 + t5707 * t6358;
t5809 = -t5903 * t5981 + t5978 * t6042;
t5808 = -t5902 * t5981 + t5978 * t6041;
t5807 = -t5901 * t5981 + t5978 * t6040;
t5806 = -t5900 * t5981 + t5978 * t6039;
t5805 = -t5899 * t5981 + t5978 * t6038;
t5804 = -t5898 * t5981 + t5978 * t6037;
t5729 = t5820 * t5979 - t6322;
t5726 = t5818 * t5979 - t6324;
t5723 = t5816 * t5979 - t6326;
t5720 = t5814 * t5979 - t6328;
t5717 = t5812 * t5979 - t6330;
t5714 = t5810 * t5979 - t6332;
t1 = [-g(1) * m(4) + (-t6364 - t6365 - t6366 - t6370 - t6371 - t6372) * t6380 + t6080 + t6081 + t6082 + t6083 + t6084 + t6085; -g(2) * m(4) + (-t6367 - t6368 - t6369 - t6373 - t6374 - t6375) * t6380 + t6408 + t6409 + t6410 + t6411 + t6412 + t6413; (-m(4) - 0.6e1 * t5988) * g(3); -(-g(2) * t6407 + t6106 * g(3)) * t5982 + t5979 * (t6106 * g(2) + g(3) * t6407) - t6413 * t5730 - t6412 * t5727 - t6411 * t5724 - t6410 * t5721 - t6409 * t5718 - t6408 * t5715 + (t5715 * t6375 + t5718 * t6374 + t5721 * t6373 + t5724 * t6369 + t5727 * t6368 + t5730 * t6367 - t6322 - t6324 - t6326 - t6328 - t6330 - t6332 + (t5820 + t5818 + t5816 + t5814 + t5812 + t5810) * t5979) * t6380; t6080 * t5730 + t6081 * t5727 + t6082 * t5724 + t6083 * t5721 + t6084 * t5718 + t6085 * t5715 + (-t6106 * t5979 - t5982 * t6407) * g(1) + (t6292 + (-t5715 * t6372 - t5718 * t6371 - t5721 * t6370 - t5724 * t6366 - t5727 * t6365 - t5730 * t6364 + (t6037 + t6038 + t6039 + t6040 + t6041 + t6042) * t5978) * t5988 + (-t6105 + ((t6049 + t6050 + t6051 + t6052 + t6053 + t6054) * t5980 + (-t6043 - t6044 - t6045 - t6046 - t6047 - t6048) * t5977) * t5988) * t5981) * g(3); (t5704 * t5809 + t5707 * t5729) * t6358 + (t5703 * t5808 + t5706 * t5726) * t6359 + (t5702 * t5807 + t5705 * t5723) * t6360 + (t5698 * t5806 + t5701 * t5720) * t6361 + (t5697 * t5805 + t5700 * t5717) * t6362 + (t5696 * t5804 + t5699 * t5714) * t6363 + (t5694 * t5809 + t5695 * t5729) * t6352 + (t5692 * t5808 + t5693 * t5726) * t6353 + (t5690 * t5807 + t5691 * t5723) * t6354 + (t5688 * t5806 + t5689 * t5720) * t6355 + (t5686 * t5805 + t5687 * t5717) * t6356 + (t5684 * t5804 + t5685 * t5714) * t6357 + (t5981 * t6105 - t6292) * g(2) + (-t5979 * t6291 + (t5982 * t6035 + t6036 * t6293) * t5980 + (t6036 * t5982 - t6035 * t6293) * t5977) * g(1) + ((-t5650 * t5809 - t5653 * t5729) * t5677 + (-t5649 * t5808 - t5652 * t5726) * t5676 + (-t5648 * t5807 - t5651 * t5723) * t5675 + (-t5644 * t5806 - t5647 * t5720) * t5674 + (-t5643 * t5805 - t5646 * t5717) * t5673 + (-t5642 * t5804 - t5645 * t5714) * t5672) * t6380;];
taugX  = t1;
