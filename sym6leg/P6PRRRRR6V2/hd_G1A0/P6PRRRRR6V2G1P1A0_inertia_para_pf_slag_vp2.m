% Calculate inertia matrix for parallel robot
% P6PRRRRR6V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% MX [6x6]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-09-11 16:13
% Revision: 7993d029b5937b704dcf3fc7d8ae322038cdcbdd (2019-09-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2(xP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-09-11 13:26:36
% EndTime: 2019-09-11 13:27:49
% DurationCPUTime: 76.92s
% Computational Cost: add. (310812->1486), mult. (822162->2372), div. (3780->18), fcn. (694642->50), ass. (0->929)
t3472 = m(3) * pkin(8);
t2905 = cos(pkin(5));
t2887 = t2905 ^ 2;
t3438 = t2887 - 0.1e1;
t2900 = sin(pkin(6));
t2853 = t2900 * pkin(9);
t2904 = cos(pkin(6));
t2886 = t2904 ^ 2;
t2965 = pkin(9) ^ 2;
t2845 = pkin(3) ^ 2 + t2886 * t2965 - t2965;
t3175 = t2845 * t3438;
t2907 = legFrame(6,3);
t2859 = sin(t2907);
t2865 = cos(t2907);
t2899 = sin(pkin(10));
t2903 = cos(pkin(10));
t2747 = t2859 * t2903 + t2865 * t2899;
t2753 = -t2859 * t2899 + t2865 * t2903;
t2920 = cos(qJ(2,6));
t2906 = cos(pkin(4));
t2914 = sin(qJ(2,6));
t3231 = t2906 * t2914;
t2635 = -t2747 * t3231 + t2753 * t2920;
t2913 = sin(qJ(3,6));
t2919 = cos(qJ(3,6));
t3228 = t2906 * t2920;
t2901 = sin(pkin(5));
t2902 = sin(pkin(4));
t3252 = t2901 * t2902;
t3056 = (t2747 * t3228 + t2753 * t2914) * t2905 - t2747 * t3252;
t2575 = (pkin(3) * t3056 - t2635 * t2853) * t2919 + t2913 * (pkin(3) * t2635 + t3056 * t2853);
t2851 = pkin(9) * t2904 + pkin(8);
t3289 = t2851 * t2901;
t3422 = pkin(3) * t2905;
t2734 = t2913 * t3422 - t3289;
t3258 = t2900 * t2913;
t3184 = pkin(9) * t3258;
t2834 = pkin(2) + t3184;
t2696 = t2734 * t2920 + t2834 * t2914;
t3237 = t2905 * t2920;
t3135 = t2900 * t3237;
t3100 = pkin(9) * t3135;
t2794 = -pkin(3) * t2914 + t3100;
t3259 = t2900 * t2905;
t3185 = pkin(9) * t3259;
t3320 = (pkin(3) * t2920 + t2914 * t3185) * t2906;
t3326 = (-t2734 * t2914 + t2834 * t2920) * t2906;
t2587 = (-t2747 * t3320 + t2753 * t2794) * t2919 - t2747 * t3326 - t2753 * t2696;
t2888 = t2919 ^ 2;
t3421 = pkin(3) * t2906;
t2846 = t3421 * t2853;
t3044 = t3438 * t2846;
t3251 = t2901 * t2905;
t3136 = t2851 * t3251;
t2817 = pkin(3) * t3136;
t3198 = pkin(2) * t2853;
t3077 = (t2817 - t3198) * t2906;
t3079 = t2906 * t3175;
t3092 = pkin(3) * t3100;
t3178 = 0.2e1 * pkin(3) * t2853;
t3187 = pkin(9) * (t2904 + 0.1e1) * (t2904 - 0.1e1);
t3094 = 0.2e1 * t2846;
t3200 = t2887 * t3094 - 0.2e1 * t2846;
t2852 = pkin(2) * t3421;
t3078 = t3136 * t2853;
t3201 = t2906 * t3078 + t2852;
t3218 = t2914 * t2845;
t3219 = t2913 * t2919;
t3249 = t2901 * t2914;
t3284 = t2851 * t2920;
t2557 = 0.1e1 / (t3200 * t2888 + (-t2913 * t3079 + t3077) * t2919 + t3201 * t2913 - t3044 + (((-0.2e1 * t3092 + t3218) * t2888 + (t2845 * t3237 + t2914 * t3178) * t3219 + pkin(9) * (pkin(3) * t3135 - t2914 * t3187)) * t2901 + (pkin(3) * t2919 + t3184) * (pkin(2) * t3249 + t2887 * t3284 - t3284)) * t2902);
t3109 = mrSges(3,1) * t2919 - mrSges(3,2) * t2913;
t3409 = (mrSges(3,3) + t3472) * t2901 - mrSges(2,2);
t3412 = m(3) * pkin(2) + mrSges(2,1);
t3332 = (((-mrSges(3,1) * t2913 - mrSges(3,2) * t2919) * t2905 + t3409) * t2914 + t2920 * (t3109 + t3412)) * t2902;
t3172 = t2557 * t3332;
t3275 = (t2905 + 0.1e1) * (t2905 - 0.1e1);
t2737 = t3094 * t3275;
t3196 = -0.2e1 * t3252;
t2611 = (t2737 + (t3092 - t3218 / 0.2e1) * t3196) * t2888;
t3177 = (-t2886 + 0.1e1) * pkin(9);
t2818 = pkin(2) * t3258 + t3177;
t2849 = pkin(3) * t3251;
t2989 = -t2913 * t3175 - t3198;
t3186 = t2887 * t2853;
t3093 = t2853 - t3186;
t3424 = pkin(3) * t2851;
t3116 = t3438 * t3424;
t2833 = pkin(2) + 0.2e1 * t3184;
t3122 = t2833 * t3249;
t3143 = t2845 * t3251;
t3174 = t2851 * t3438;
t3419 = pkin(9) * t2902;
t2569 = 0.1e1 / (t2611 + ((t2817 + t2989) * t2906 + t2902 * ((t2913 * t3143 + t3116) * t2920 + pkin(3) * t3122)) * t2919 + (t2913 * t3078 + (pkin(2) * t2913 + t3093) * pkin(3)) * t2906 + (t2900 * (t2913 * t3174 + t2849) * t2920 + t2818 * t3249) * t3419);
t3250 = t2901 * t2906;
t2605 = (t2919 * (mrSges(3,1) * t3237 - mrSges(3,2) * t2914) - t2913 * (mrSges(3,1) * t2914 + mrSges(3,2) * t3237)) * t2902 + t3109 * t3250;
t3354 = t2569 * t2605;
t3471 = t2575 * t3172 + t2587 * t3354;
t2636 = t2747 * t2920 + t2753 * t3231;
t3055 = (-t2747 * t2914 + t2753 * t3228) * t2905 - t2753 * t3252;
t2576 = (pkin(3) * t3055 + t2636 * t2853) * t2919 + t2913 * (-pkin(3) * t2636 + t3055 * t2853);
t2590 = (-t2747 * t2794 - t2753 * t3320) * t2919 - t2753 * t3326 + t2747 * t2696;
t3470 = t2576 * t3172 + t2590 * t3354;
t2908 = legFrame(5,3);
t2860 = sin(t2908);
t2866 = cos(t2908);
t2748 = t2860 * t2903 + t2866 * t2899;
t2754 = -t2860 * t2899 + t2866 * t2903;
t2922 = cos(qJ(2,5));
t2916 = sin(qJ(2,5));
t3230 = t2906 * t2916;
t2637 = -t2748 * t3230 + t2754 * t2922;
t2915 = sin(qJ(3,5));
t2921 = cos(qJ(3,5));
t3227 = t2906 * t2922;
t3054 = (t2748 * t3227 + t2754 * t2916) * t2905 - t2748 * t3252;
t2577 = (pkin(3) * t3054 - t2637 * t2853) * t2921 + t2915 * (pkin(3) * t2637 + t3054 * t2853);
t2735 = t2915 * t3422 - t3289;
t3257 = t2900 * t2915;
t3183 = pkin(9) * t3257;
t2836 = pkin(2) + t3183;
t2698 = t2735 * t2922 + t2836 * t2916;
t3236 = t2905 * t2922;
t3134 = t2900 * t3236;
t3099 = pkin(9) * t3134;
t2795 = -pkin(3) * t2916 + t3099;
t3319 = (pkin(3) * t2922 + t2916 * t3185) * t2906;
t3325 = (-t2735 * t2916 + t2836 * t2922) * t2906;
t2588 = (-t2748 * t3319 + t2754 * t2795) * t2921 - t2748 * t3325 - t2754 * t2698;
t2889 = t2921 ^ 2;
t3091 = pkin(3) * t3099;
t3216 = t2916 * t2845;
t3217 = t2915 * t2921;
t3248 = t2901 * t2916;
t3283 = t2851 * t2922;
t2558 = 0.1e1 / (t3200 * t2889 + (-t2915 * t3079 + t3077) * t2921 + t3201 * t2915 - t3044 + (((-0.2e1 * t3091 + t3216) * t2889 + (t2845 * t3236 + t2916 * t3178) * t3217 + pkin(9) * (pkin(3) * t3134 - t2916 * t3187)) * t2901 + (pkin(3) * t2921 + t3183) * (pkin(2) * t3248 + t2887 * t3283 - t3283)) * t2902);
t3108 = mrSges(3,1) * t2921 - mrSges(3,2) * t2915;
t3331 = (((-mrSges(3,1) * t2915 - mrSges(3,2) * t2921) * t2905 + t3409) * t2916 + t2922 * (t3108 + t3412)) * t2902;
t3170 = t2558 * t3331;
t2612 = (t2737 + (t3091 - t3216 / 0.2e1) * t3196) * t2889;
t2819 = pkin(2) * t3257 + t3177;
t2988 = -t2915 * t3175 - t3198;
t2835 = pkin(2) + 0.2e1 * t3183;
t3121 = t2835 * t3248;
t2570 = 0.1e1 / (t2612 + ((t2817 + t2988) * t2906 + t2902 * ((t2915 * t3143 + t3116) * t2922 + pkin(3) * t3121)) * t2921 + (t2915 * t3078 + (pkin(2) * t2915 + t3093) * pkin(3)) * t2906 + (t2900 * (t2915 * t3174 + t2849) * t2922 + t2819 * t3248) * t3419);
t2606 = (t2921 * (mrSges(3,1) * t3236 - mrSges(3,2) * t2916) - t2915 * (mrSges(3,1) * t2916 + mrSges(3,2) * t3236)) * t2902 + t3108 * t3250;
t3350 = t2570 * t2606;
t3469 = t2577 * t3170 + t2588 * t3350;
t2638 = t2748 * t2922 + t2754 * t3230;
t3053 = (-t2748 * t2916 + t2754 * t3227) * t2905 - t2754 * t3252;
t2578 = (pkin(3) * t3053 + t2638 * t2853) * t2921 + t2915 * (-pkin(3) * t2638 + t3053 * t2853);
t2591 = (-t2748 * t2795 - t2754 * t3319) * t2921 - t2754 * t3325 + t2748 * t2698;
t3468 = t2578 * t3170 + t2591 * t3350;
t2909 = legFrame(4,3);
t2861 = sin(t2909);
t2867 = cos(t2909);
t2749 = t2861 * t2903 + t2867 * t2899;
t2755 = -t2861 * t2899 + t2867 * t2903;
t2924 = cos(qJ(2,4));
t2918 = sin(qJ(2,4));
t3229 = t2906 * t2918;
t2639 = -t2749 * t3229 + t2755 * t2924;
t2917 = sin(qJ(3,4));
t2923 = cos(qJ(3,4));
t3226 = t2906 * t2924;
t3052 = (t2749 * t3226 + t2755 * t2918) * t2905 - t2749 * t3252;
t2579 = (pkin(3) * t3052 - t2639 * t2853) * t2923 + t2917 * (pkin(3) * t2639 + t3052 * t2853);
t2736 = t2917 * t3422 - t3289;
t3256 = t2900 * t2917;
t3182 = pkin(9) * t3256;
t2838 = pkin(2) + t3182;
t2700 = t2736 * t2924 + t2838 * t2918;
t3235 = t2905 * t2924;
t3133 = t2900 * t3235;
t3098 = pkin(9) * t3133;
t2796 = -pkin(3) * t2918 + t3098;
t3318 = (pkin(3) * t2924 + t2918 * t3185) * t2906;
t3324 = (-t2736 * t2918 + t2838 * t2924) * t2906;
t2589 = (-t2749 * t3318 + t2755 * t2796) * t2923 - t2749 * t3324 - t2755 * t2700;
t2890 = t2923 ^ 2;
t3090 = pkin(3) * t3098;
t3214 = t2918 * t2845;
t3215 = t2917 * t2923;
t3247 = t2901 * t2918;
t3282 = t2851 * t2924;
t2559 = 0.1e1 / (t3200 * t2890 + (-t2917 * t3079 + t3077) * t2923 + t3201 * t2917 - t3044 + (((-0.2e1 * t3090 + t3214) * t2890 + (t2845 * t3235 + t2918 * t3178) * t3215 + pkin(9) * (pkin(3) * t3133 - t2918 * t3187)) * t2901 + (pkin(3) * t2923 + t3182) * (pkin(2) * t3247 + t2887 * t3282 - t3282)) * t2902);
t3107 = mrSges(3,1) * t2923 - mrSges(3,2) * t2917;
t3330 = (((-mrSges(3,1) * t2917 - mrSges(3,2) * t2923) * t2905 + t3409) * t2918 + t2924 * (t3107 + t3412)) * t2902;
t3168 = t2559 * t3330;
t2613 = (t2737 + (t3090 - t3214 / 0.2e1) * t3196) * t2890;
t2820 = pkin(2) * t3256 + t3177;
t2987 = -t2917 * t3175 - t3198;
t2837 = pkin(2) + 0.2e1 * t3182;
t3120 = t2837 * t3247;
t2571 = 0.1e1 / (t2613 + ((t2817 + t2987) * t2906 + t2902 * ((t2917 * t3143 + t3116) * t2924 + pkin(3) * t3120)) * t2923 + (t2917 * t3078 + (pkin(2) * t2917 + t3093) * pkin(3)) * t2906 + (t2900 * (t2917 * t3174 + t2849) * t2924 + t2820 * t3247) * t3419);
t2607 = (t2923 * (mrSges(3,1) * t3235 - mrSges(3,2) * t2918) - t2917 * (mrSges(3,1) * t2918 + mrSges(3,2) * t3235)) * t2902 + t3107 * t3250;
t3346 = t2571 * t2607;
t3467 = t2579 * t3168 + t2589 * t3346;
t2640 = t2749 * t2924 + t2755 * t3229;
t3051 = (-t2749 * t2918 + t2755 * t3226) * t2905 - t2755 * t3252;
t2580 = (pkin(3) * t3051 + t2640 * t2853) * t2923 + t2917 * (-pkin(3) * t2640 + t3051 * t2853);
t2592 = (-t2749 * t2796 - t2755 * t3318) * t2923 - t2755 * t3324 + t2749 * t2700;
t3466 = t2580 * t3168 + t2592 * t3346;
t2910 = legFrame(3,3);
t2862 = sin(t2910);
t2868 = cos(t2910);
t2750 = t2862 * t2903 + t2868 * t2899;
t2756 = -t2862 * t2899 + t2868 * t2903;
t2933 = cos(qJ(2,3));
t2927 = sin(qJ(2,3));
t3225 = t2906 * t2927;
t2662 = -t2750 * t3225 + t2756 * t2933;
t2926 = sin(qJ(3,3));
t2932 = cos(qJ(3,3));
t3222 = t2906 * t2933;
t3050 = (t2750 * t3222 + t2756 * t2927) * t2905 - t2750 * t3252;
t2581 = (pkin(3) * t3050 - t2662 * t2853) * t2932 + t2926 * (pkin(3) * t2662 + t3050 * t2853);
t2738 = t2926 * t3422 - t3289;
t3255 = t2900 * t2926;
t3181 = pkin(9) * t3255;
t2840 = pkin(2) + t3181;
t2702 = t2738 * t2933 + t2840 * t2927;
t3234 = t2905 * t2933;
t3132 = t2900 * t3234;
t3097 = pkin(9) * t3132;
t2800 = -pkin(3) * t2927 + t3097;
t3317 = (pkin(3) * t2933 + t2927 * t3185) * t2906;
t3323 = (-t2738 * t2927 + t2840 * t2933) * t2906;
t2593 = (-t2750 * t3317 + t2756 * t2800) * t2932 - t2750 * t3323 - t2756 * t2702;
t2895 = t2932 ^ 2;
t3089 = pkin(3) * t3097;
t3206 = t2927 * t2845;
t3207 = t2926 * t2932;
t3246 = t2901 * t2927;
t3278 = t2851 * t2933;
t2560 = 0.1e1 / (t3200 * t2895 + (-t2926 * t3079 + t3077) * t2932 + t3201 * t2926 - t3044 + (((-0.2e1 * t3089 + t3206) * t2895 + (t2845 * t3234 + t2927 * t3178) * t3207 + pkin(9) * (pkin(3) * t3132 - t2927 * t3187)) * t2901 + (pkin(3) * t2932 + t3181) * (pkin(2) * t3246 + t2887 * t3278 - t3278)) * t2902);
t3106 = mrSges(3,1) * t2932 - mrSges(3,2) * t2926;
t3329 = (((-mrSges(3,1) * t2926 - mrSges(3,2) * t2932) * t2905 + t3409) * t2927 + t2933 * (t3106 + t3412)) * t2902;
t3166 = t2560 * t3329;
t2614 = (t2737 + (t3089 - t3206 / 0.2e1) * t3196) * t2895;
t2821 = pkin(2) * t3255 + t3177;
t2986 = -t2926 * t3175 - t3198;
t2839 = pkin(2) + 0.2e1 * t3181;
t3119 = t2839 * t3246;
t2572 = 0.1e1 / (t2614 + ((t2817 + t2986) * t2906 + t2902 * ((t2926 * t3143 + t3116) * t2933 + pkin(3) * t3119)) * t2932 + (t2926 * t3078 + (pkin(2) * t2926 + t3093) * pkin(3)) * t2906 + (t2900 * (t2926 * t3174 + t2849) * t2933 + t2821 * t3246) * t3419);
t2608 = (t2932 * (mrSges(3,1) * t3234 - mrSges(3,2) * t2927) - t2926 * (mrSges(3,1) * t2927 + mrSges(3,2) * t3234)) * t2902 + t3106 * t3250;
t3342 = t2572 * t2608;
t3465 = t2581 * t3166 + t2593 * t3342;
t2663 = t2750 * t2933 + t2756 * t3225;
t3049 = (-t2750 * t2927 + t2756 * t3222) * t2905 - t2756 * t3252;
t2582 = (pkin(3) * t3049 + t2663 * t2853) * t2932 + t2926 * (-pkin(3) * t2663 + t3049 * t2853);
t2596 = (-t2750 * t2800 - t2756 * t3317) * t2932 - t2756 * t3323 + t2750 * t2702;
t3464 = t2582 * t3166 + t2596 * t3342;
t2911 = legFrame(2,3);
t2863 = sin(t2911);
t2869 = cos(t2911);
t2751 = t2863 * t2903 + t2869 * t2899;
t2757 = -t2863 * t2899 + t2869 * t2903;
t2935 = cos(qJ(2,2));
t2929 = sin(qJ(2,2));
t3224 = t2906 * t2929;
t2664 = -t2751 * t3224 + t2757 * t2935;
t2928 = sin(qJ(3,2));
t2934 = cos(qJ(3,2));
t3221 = t2906 * t2935;
t3048 = (t2751 * t3221 + t2757 * t2929) * t2905 - t2751 * t3252;
t2583 = (pkin(3) * t3048 - t2664 * t2853) * t2934 + t2928 * (pkin(3) * t2664 + t3048 * t2853);
t2739 = t2928 * t3422 - t3289;
t3254 = t2900 * t2928;
t3180 = pkin(9) * t3254;
t2842 = pkin(2) + t3180;
t2704 = t2739 * t2935 + t2842 * t2929;
t3233 = t2905 * t2935;
t3131 = t2900 * t3233;
t3096 = pkin(9) * t3131;
t2801 = -pkin(3) * t2929 + t3096;
t3316 = (pkin(3) * t2935 + t2929 * t3185) * t2906;
t3322 = (-t2739 * t2929 + t2842 * t2935) * t2906;
t2594 = (-t2751 * t3316 + t2757 * t2801) * t2934 - t2751 * t3322 - t2757 * t2704;
t2896 = t2934 ^ 2;
t3088 = pkin(3) * t3096;
t3204 = t2929 * t2845;
t3205 = t2928 * t2934;
t3245 = t2901 * t2929;
t3277 = t2851 * t2935;
t2561 = 0.1e1 / (t3200 * t2896 + (-t2928 * t3079 + t3077) * t2934 + t3201 * t2928 - t3044 + (((-0.2e1 * t3088 + t3204) * t2896 + (t2845 * t3233 + t2929 * t3178) * t3205 + pkin(9) * (pkin(3) * t3131 - t2929 * t3187)) * t2901 + (pkin(3) * t2934 + t3180) * (pkin(2) * t3245 + t2887 * t3277 - t3277)) * t2902);
t3105 = mrSges(3,1) * t2934 - mrSges(3,2) * t2928;
t3328 = (((-mrSges(3,1) * t2928 - mrSges(3,2) * t2934) * t2905 + t3409) * t2929 + t2935 * (t3105 + t3412)) * t2902;
t3164 = t2561 * t3328;
t2615 = (t2737 + (t3088 - t3204 / 0.2e1) * t3196) * t2896;
t2822 = pkin(2) * t3254 + t3177;
t2985 = -t2928 * t3175 - t3198;
t2841 = pkin(2) + 0.2e1 * t3180;
t3118 = t2841 * t3245;
t2573 = 0.1e1 / (t2615 + ((t2817 + t2985) * t2906 + t2902 * ((t2928 * t3143 + t3116) * t2935 + pkin(3) * t3118)) * t2934 + (t2928 * t3078 + (pkin(2) * t2928 + t3093) * pkin(3)) * t2906 + (t2900 * (t2928 * t3174 + t2849) * t2935 + t2822 * t3245) * t3419);
t2609 = (t2934 * (mrSges(3,1) * t3233 - mrSges(3,2) * t2929) - t2928 * (mrSges(3,1) * t2929 + mrSges(3,2) * t3233)) * t2902 + t3105 * t3250;
t3338 = t2573 * t2609;
t3463 = t2583 * t3164 + t2594 * t3338;
t2665 = t2751 * t2935 + t2757 * t3224;
t3047 = (-t2751 * t2929 + t2757 * t3221) * t2905 - t2757 * t3252;
t2584 = (pkin(3) * t3047 + t2665 * t2853) * t2934 + t2928 * (-pkin(3) * t2665 + t3047 * t2853);
t2597 = (-t2751 * t2801 - t2757 * t3316) * t2934 - t2757 * t3322 + t2751 * t2704;
t3462 = t2584 * t3164 + t2597 * t3338;
t2912 = legFrame(1,3);
t2864 = sin(t2912);
t2870 = cos(t2912);
t2752 = t2864 * t2903 + t2870 * t2899;
t2758 = -t2864 * t2899 + t2870 * t2903;
t2937 = cos(qJ(2,1));
t2931 = sin(qJ(2,1));
t3223 = t2906 * t2931;
t2666 = -t2752 * t3223 + t2758 * t2937;
t2930 = sin(qJ(3,1));
t2936 = cos(qJ(3,1));
t3220 = t2906 * t2937;
t3046 = (t2752 * t3220 + t2758 * t2931) * t2905 - t2752 * t3252;
t2585 = (pkin(3) * t3046 - t2666 * t2853) * t2936 + t2930 * (pkin(3) * t2666 + t3046 * t2853);
t2740 = t2930 * t3422 - t3289;
t3253 = t2900 * t2930;
t3179 = pkin(9) * t3253;
t2844 = pkin(2) + t3179;
t2706 = t2740 * t2937 + t2844 * t2931;
t3232 = t2905 * t2937;
t3130 = t2900 * t3232;
t3095 = pkin(9) * t3130;
t2802 = -pkin(3) * t2931 + t3095;
t3315 = (pkin(3) * t2937 + t2931 * t3185) * t2906;
t3321 = (-t2740 * t2931 + t2844 * t2937) * t2906;
t2595 = (-t2752 * t3315 + t2758 * t2802) * t2936 - t2752 * t3321 - t2758 * t2706;
t2897 = t2936 ^ 2;
t3087 = pkin(3) * t3095;
t3202 = t2931 * t2845;
t3203 = t2930 * t2936;
t3244 = t2901 * t2931;
t3276 = t2851 * t2937;
t2562 = 0.1e1 / (t3200 * t2897 + (-t2930 * t3079 + t3077) * t2936 + t3201 * t2930 - t3044 + (((-0.2e1 * t3087 + t3202) * t2897 + (t2845 * t3232 + t2931 * t3178) * t3203 + pkin(9) * (pkin(3) * t3130 - t2931 * t3187)) * t2901 + (pkin(3) * t2936 + t3179) * (pkin(2) * t3244 + t2887 * t3276 - t3276)) * t2902);
t3104 = mrSges(3,1) * t2936 - mrSges(3,2) * t2930;
t3327 = (((-mrSges(3,1) * t2930 - mrSges(3,2) * t2936) * t2905 + t3409) * t2931 + t2937 * (t3104 + t3412)) * t2902;
t3162 = t2562 * t3327;
t2616 = (t2737 + (t3087 - t3202 / 0.2e1) * t3196) * t2897;
t2823 = pkin(2) * t3253 + t3177;
t2984 = -t2930 * t3175 - t3198;
t2843 = pkin(2) + 0.2e1 * t3179;
t3117 = t2843 * t3244;
t2574 = 0.1e1 / (t2616 + ((t2817 + t2984) * t2906 + t2902 * ((t2930 * t3143 + t3116) * t2937 + pkin(3) * t3117)) * t2936 + (t2930 * t3078 + (pkin(2) * t2930 + t3093) * pkin(3)) * t2906 + (t2900 * (t2930 * t3174 + t2849) * t2937 + t2823 * t3244) * t3419);
t2610 = (t2936 * (mrSges(3,1) * t3232 - mrSges(3,2) * t2931) - t2930 * (mrSges(3,1) * t2931 + mrSges(3,2) * t3232)) * t2902 + t3104 * t3250;
t3334 = t2574 * t2610;
t3461 = t2585 * t3162 + t2595 * t3334;
t2667 = t2752 * t2937 + t2758 * t3223;
t3045 = (-t2752 * t2931 + t2758 * t3220) * t2905 - t2758 * t3252;
t2586 = (pkin(3) * t3045 + t2667 * t2853) * t2936 + t2930 * (-pkin(3) * t2667 + t3045 * t2853);
t2598 = (-t2752 * t2802 - t2758 * t3315) * t2936 - t2758 * t3321 + t2752 * t2706;
t3460 = t2586 * t3162 + t2598 * t3334;
t2941 = xP(6);
t2880 = sin(t2941);
t2883 = cos(t2941);
t2945 = mrSges(4,2);
t2946 = mrSges(4,1);
t2804 = -t2880 * t2945 + t2883 * t2946;
t2953 = koppelP(6,2);
t2959 = koppelP(6,1);
t2805 = t2880 * t2953 - t2883 * t2959;
t2942 = xP(5);
t2881 = sin(t2942);
t2884 = cos(t2942);
t2947 = koppelP(6,3);
t2717 = t2805 * t2881 + t2884 * t2947;
t2811 = t2880 * t2959 + t2883 * t2953;
t2943 = xP(4);
t2882 = sin(t2943);
t2885 = cos(t2943);
t2617 = t2717 * t2882 - t2811 * t2885;
t2618 = t2717 * t2885 + t2811 * t2882;
t2954 = koppelP(5,2);
t2960 = koppelP(5,1);
t2806 = t2880 * t2954 - t2883 * t2960;
t2948 = koppelP(5,3);
t2719 = t2806 * t2881 + t2884 * t2948;
t2812 = t2880 * t2960 + t2883 * t2954;
t2620 = t2719 * t2882 - t2812 * t2885;
t2621 = t2719 * t2885 + t2812 * t2882;
t2955 = koppelP(4,2);
t2961 = koppelP(4,1);
t2807 = t2880 * t2955 - t2883 * t2961;
t2949 = koppelP(4,3);
t2721 = t2807 * t2881 + t2884 * t2949;
t2813 = t2880 * t2961 + t2883 * t2955;
t2623 = t2721 * t2882 - t2813 * t2885;
t2624 = t2721 * t2885 + t2813 * t2882;
t2956 = koppelP(3,2);
t2962 = koppelP(3,1);
t2808 = t2880 * t2956 - t2883 * t2962;
t2950 = koppelP(3,3);
t2723 = t2808 * t2881 + t2884 * t2950;
t2814 = t2880 * t2962 + t2883 * t2956;
t2626 = t2723 * t2882 - t2814 * t2885;
t2627 = t2723 * t2885 + t2814 * t2882;
t2957 = koppelP(2,2);
t2963 = koppelP(2,1);
t2809 = t2880 * t2957 - t2883 * t2963;
t2951 = koppelP(2,3);
t2725 = t2809 * t2881 + t2884 * t2951;
t2815 = t2880 * t2963 + t2883 * t2957;
t2629 = t2725 * t2882 - t2815 * t2885;
t2630 = t2725 * t2885 + t2815 * t2882;
t2958 = koppelP(1,2);
t2964 = koppelP(1,1);
t2810 = t2880 * t2958 - t2883 * t2964;
t2952 = koppelP(1,3);
t2727 = t2810 * t2881 + t2884 * t2952;
t2816 = t2880 * t2964 + t2883 * t2958;
t2632 = t2727 * t2882 - t2816 * t2885;
t2633 = t2727 * t2885 + t2816 * t2882;
t2825 = t2883 * Ifges(4,5) - t2880 * Ifges(4,6);
t3459 = t2825 * t2881;
t3197 = 0.2e1 * t3275;
t3458 = t2902 * (t2897 * t3197 - t3438);
t3457 = t2902 * (t2896 * t3197 - t3438);
t3456 = t2902 * (t2895 * t3197 - t3438);
t3455 = t2902 * (t2890 * t3197 - t3438);
t3454 = t2902 * (t2889 * t3197 - t3438);
t3453 = t2902 * (t2888 * t3197 - t3438);
t3452 = t3251 * (0.2e1 * t2897 - 0.1e1);
t3451 = t3251 * (0.2e1 * t2896 - 0.1e1);
t3450 = t3251 * (0.2e1 * t2895 - 0.1e1);
t3449 = t3251 * (0.2e1 * t2890 - 0.1e1);
t3448 = t3251 * (0.2e1 * t2889 - 0.1e1);
t3447 = t3251 * (0.2e1 * t2888 - 0.1e1);
t2944 = mrSges(4,3);
t2708 = t2804 * t2881 - t2884 * t2944;
t2707 = t2708 * t2885;
t2803 = t2880 * t2946 + t2883 * t2945;
t3263 = t2882 * t2803;
t3446 = t2707 - t3263;
t2709 = t2804 * t2884 + t2881 * t2944;
t2710 = -t2805 * t2884 + t2881 * t2947;
t2759 = t2899 * t3228 + t2903 * t2914;
t2762 = -t2899 * t2914 + t2903 * t3228;
t2650 = t2759 * t2865 + t2762 * t2859;
t2765 = t2899 * t2920 + t2903 * t3231;
t2768 = -t2899 * t3231 + t2903 * t2920;
t2659 = -t2765 * t2859 + t2768 * t2865;
t3295 = t2845 * t2913;
t3142 = t2902 * t3295;
t2983 = -t2650 * t3424 - t2747 * t3142;
t3423 = pkin(3) * t2902;
t3199 = pkin(2) * t3423;
t3115 = t2913 * t3199;
t3129 = t2902 * t3251;
t3296 = t2845 * t2901;
t3149 = t2888 * t3296;
t3288 = t2851 * t2902;
t3188 = pkin(3) * t3288;
t3431 = pkin(2) * t2902;
t3194 = t2919 * t3431;
t3287 = t2851 * t2913;
t3302 = t2818 * t2901;
t3430 = pkin(3) * t2833;
t2500 = t2659 * t3149 + (((-t2650 * t3295 + t2747 * t3188) * t2905 + t2659 * t3430) * t2901 + t2983 * t2887 - t2983) * t2919 + t2747 * t3115 + (t2659 * t3302 + (-t2747 * t3194 + (-t2650 * t2887 + t2747 * t3129 + t2650) * t3287 + (t2650 * t3447 + t2747 * t3453) * pkin(3)) * t2900) * pkin(9);
t2830 = t2851 * t3421;
t3101 = t3288 * t2853;
t3243 = t2902 * t2920;
t3128 = t2913 * t3243;
t3420 = pkin(9) * t2901;
t2563 = 0.1e1 / (t2611 + ((t2845 * t3128 + t2830) * t3251 + (t2920 * t3174 + t3122) * t3423 + t2989 * t2906) * t2919 + ((pkin(3) * t3243 + t2906 * t3287) * t3259 + t2914 * t2902 * t2818) * t3420 + (t2851 * t3128 - t3421) * t3186 + (-t2920 * t3101 + t2852) * t2913 + t2846);
t3401 = t2500 * t2563;
t2464 = t2618 * t3401 - t2710;
t2891 = m(1) + m(2) + m(3);
t2371 = t2464 * t2891 + t2618 * t3470;
t2711 = -t2806 * t2884 + t2881 * t2948;
t2760 = t2899 * t3227 + t2903 * t2916;
t2763 = -t2899 * t2916 + t2903 * t3227;
t2651 = t2760 * t2866 + t2763 * t2860;
t2766 = t2899 * t2922 + t2903 * t3230;
t2769 = -t2899 * t3230 + t2903 * t2922;
t2660 = -t2766 * t2860 + t2769 * t2866;
t3294 = t2845 * t2915;
t3141 = t2902 * t3294;
t2982 = -t2651 * t3424 - t2748 * t3141;
t3114 = t2915 * t3199;
t3148 = t2889 * t3296;
t3193 = t2921 * t3431;
t3286 = t2851 * t2915;
t3301 = t2819 * t2901;
t3429 = pkin(3) * t2835;
t2501 = t2660 * t3148 + (((-t2651 * t3294 + t2748 * t3188) * t2905 + t2660 * t3429) * t2901 + t2982 * t2887 - t2982) * t2921 + t2748 * t3114 + (t2660 * t3301 + (-t2748 * t3193 + (-t2651 * t2887 + t2748 * t3129 + t2651) * t3286 + (t2651 * t3448 + t2748 * t3454) * pkin(3)) * t2900) * pkin(9);
t3242 = t2902 * t2922;
t3127 = t2915 * t3242;
t2564 = 0.1e1 / (t2612 + ((t2845 * t3127 + t2830) * t3251 + (t2922 * t3174 + t3121) * t3423 + t2988 * t2906) * t2921 + ((pkin(3) * t3242 + t2906 * t3286) * t3259 + t2916 * t2902 * t2819) * t3420 + (t2851 * t3127 - t3421) * t3186 + (-t2922 * t3101 + t2852) * t2915 + t2846);
t3400 = t2501 * t2564;
t2465 = t2621 * t3400 - t2711;
t2372 = t2465 * t2891 + t2621 * t3468;
t2712 = -t2807 * t2884 + t2881 * t2949;
t2761 = t2899 * t3226 + t2903 * t2918;
t2764 = -t2899 * t2918 + t2903 * t3226;
t2652 = t2761 * t2867 + t2764 * t2861;
t2767 = t2899 * t2924 + t2903 * t3229;
t2770 = -t2899 * t3229 + t2903 * t2924;
t2661 = -t2767 * t2861 + t2770 * t2867;
t3293 = t2845 * t2917;
t3140 = t2902 * t3293;
t2981 = -t2652 * t3424 - t2749 * t3140;
t3113 = t2917 * t3199;
t3147 = t2890 * t3296;
t3192 = t2923 * t3431;
t3285 = t2851 * t2917;
t3300 = t2820 * t2901;
t3428 = pkin(3) * t2837;
t2502 = t2661 * t3147 + (((-t2652 * t3293 + t2749 * t3188) * t2905 + t2661 * t3428) * t2901 + t2981 * t2887 - t2981) * t2923 + t2749 * t3113 + (t2661 * t3300 + (-t2749 * t3192 + (-t2652 * t2887 + t2749 * t3129 + t2652) * t3285 + (t2652 * t3449 + t2749 * t3455) * pkin(3)) * t2900) * pkin(9);
t3241 = t2902 * t2924;
t3126 = t2917 * t3241;
t2565 = 0.1e1 / (t2613 + ((t2845 * t3126 + t2830) * t3251 + (t2924 * t3174 + t3120) * t3423 + t2987 * t2906) * t2923 + ((pkin(3) * t3241 + t2906 * t3285) * t3259 + t2918 * t2902 * t2820) * t3420 + (t2851 * t3126 - t3421) * t3186 + (-t2924 * t3101 + t2852) * t2917 + t2846);
t3399 = t2502 * t2565;
t2466 = t2624 * t3399 - t2712;
t2373 = t2466 * t2891 + t2624 * t3466;
t2713 = -t2808 * t2884 + t2881 * t2950;
t2775 = t2899 * t3222 + t2903 * t2927;
t2778 = -t2899 * t2927 + t2903 * t3222;
t2674 = t2775 * t2868 + t2778 * t2862;
t2781 = t2899 * t2933 + t2903 * t3225;
t2784 = -t2899 * t3225 + t2903 * t2933;
t2683 = -t2781 * t2862 + t2784 * t2868;
t3292 = t2845 * t2926;
t3139 = t2902 * t3292;
t2977 = -t2674 * t3424 - t2750 * t3139;
t3112 = t2926 * t3199;
t3146 = t2895 * t3296;
t3191 = t2932 * t3431;
t3281 = t2851 * t2926;
t3299 = t2821 * t2901;
t3427 = pkin(3) * t2839;
t2506 = t2683 * t3146 + (((-t2674 * t3292 + t2750 * t3188) * t2905 + t2683 * t3427) * t2901 + t2977 * t2887 - t2977) * t2932 + t2750 * t3112 + (t2683 * t3299 + (-t2750 * t3191 + (-t2674 * t2887 + t2750 * t3129 + t2674) * t3281 + (t2674 * t3450 + t2750 * t3456) * pkin(3)) * t2900) * pkin(9);
t3240 = t2902 * t2933;
t3125 = t2926 * t3240;
t2566 = 0.1e1 / (t2614 + ((t2845 * t3125 + t2830) * t3251 + (t2933 * t3174 + t3119) * t3423 + t2986 * t2906) * t2932 + ((pkin(3) * t3240 + t2906 * t3281) * t3259 + t2927 * t2902 * t2821) * t3420 + (t2851 * t3125 - t3421) * t3186 + (-t2933 * t3101 + t2852) * t2926 + t2846);
t3395 = t2506 * t2566;
t2470 = t2627 * t3395 - t2713;
t2383 = t2470 * t2891 + t2627 * t3464;
t2714 = -t2809 * t2884 + t2881 * t2951;
t2776 = t2899 * t3221 + t2903 * t2929;
t2779 = -t2899 * t2929 + t2903 * t3221;
t2675 = t2776 * t2869 + t2779 * t2863;
t2782 = t2899 * t2935 + t2903 * t3224;
t2785 = -t2899 * t3224 + t2903 * t2935;
t2684 = -t2782 * t2863 + t2785 * t2869;
t3291 = t2845 * t2928;
t3138 = t2902 * t3291;
t2976 = -t2675 * t3424 - t2751 * t3138;
t3111 = t2928 * t3199;
t3145 = t2896 * t3296;
t3190 = t2934 * t3431;
t3280 = t2851 * t2928;
t3298 = t2822 * t2901;
t3426 = pkin(3) * t2841;
t2507 = t2684 * t3145 + (((-t2675 * t3291 + t2751 * t3188) * t2905 + t2684 * t3426) * t2901 + t2976 * t2887 - t2976) * t2934 + t2751 * t3111 + (t2684 * t3298 + (-t2751 * t3190 + (-t2675 * t2887 + t2751 * t3129 + t2675) * t3280 + (t2675 * t3451 + t2751 * t3457) * pkin(3)) * t2900) * pkin(9);
t3239 = t2902 * t2935;
t3124 = t2928 * t3239;
t2567 = 0.1e1 / (t2615 + ((t2845 * t3124 + t2830) * t3251 + (t2935 * t3174 + t3118) * t3423 + t2985 * t2906) * t2934 + ((pkin(3) * t3239 + t2906 * t3280) * t3259 + t2929 * t2902 * t2822) * t3420 + (t2851 * t3124 - t3421) * t3186 + (-t2935 * t3101 + t2852) * t2928 + t2846);
t3394 = t2507 * t2567;
t2471 = t2630 * t3394 - t2714;
t2384 = t2471 * t2891 + t2630 * t3462;
t2715 = -t2810 * t2884 + t2881 * t2952;
t2777 = t2899 * t3220 + t2903 * t2931;
t2780 = -t2899 * t2931 + t2903 * t3220;
t2676 = t2777 * t2870 + t2780 * t2864;
t2783 = t2899 * t2937 + t2903 * t3223;
t2786 = -t2899 * t3223 + t2903 * t2937;
t2685 = -t2783 * t2864 + t2786 * t2870;
t3290 = t2845 * t2930;
t3137 = t2902 * t3290;
t2975 = -t2676 * t3424 - t2752 * t3137;
t3110 = t2930 * t3199;
t3144 = t2897 * t3296;
t3189 = t2936 * t3431;
t3279 = t2851 * t2930;
t3297 = t2823 * t2901;
t3425 = pkin(3) * t2843;
t2508 = t2685 * t3144 + (((-t2676 * t3290 + t2752 * t3188) * t2905 + t2685 * t3425) * t2901 + t2975 * t2887 - t2975) * t2936 + t2752 * t3110 + (t2685 * t3297 + (-t2752 * t3189 + (-t2676 * t2887 + t2752 * t3129 + t2676) * t3279 + (t2676 * t3452 + t2752 * t3458) * pkin(3)) * t2900) * pkin(9);
t3238 = t2902 * t2937;
t3123 = t2930 * t3238;
t2568 = 0.1e1 / (t2616 + ((t2845 * t3123 + t2830) * t3251 + (t2937 * t3174 + t3117) * t3423 + t2984 * t2906) * t2936 + ((pkin(3) * t3238 + t2906 * t3279) * t3259 + t2931 * t2902 * t2823) * t3420 + (t2851 * t3123 - t3421) * t3186 + (-t2937 * t3101 + t2852) * t2930 + t2846);
t3393 = t2508 * t2568;
t2472 = t2633 * t3393 - t2715;
t2385 = t2472 * t2891 + t2633 * t3460;
t3057 = -t2371 - t2372 - t2373 - t2383 - t2384 - t2385;
t3445 = -t2709 - t3057;
t3444 = -Ifges(3,1) + (-0.2e1 * mrSges(3,3) - t3472) * pkin(8);
t2653 = -t2759 * t2859 + t2762 * t2865;
t2656 = t2765 * t2865 + t2768 * t2859;
t2980 = t2653 * t3424 + t2753 * t3142;
t2497 = t2656 * t3149 + (((t2653 * t3295 - t2753 * t3188) * t2905 + t2656 * t3430) * t2901 + t2980 * t2887 - t2980) * t2919 - t2753 * t3115 + (t2656 * t3302 + (t2753 * t3194 + (t2653 * t2887 - t2753 * t3129 - t2653) * t3287 + (-t2653 * t3447 - t2753 * t3453) * pkin(3)) * t2900) * pkin(9);
t2392 = (t2497 * t2710 + t2500 * t2617) * t2563;
t2443 = (t2575 * t2710 + t2576 * t2617) * t2557;
t2491 = (t2587 * t2710 + t2590 * t2617) * t2569;
t2269 = t2392 * t2891 + t2443 * t3332 + t2491 * t2605;
t2654 = -t2760 * t2860 + t2763 * t2866;
t2657 = t2766 * t2866 + t2769 * t2860;
t2979 = t2654 * t3424 + t2754 * t3141;
t2498 = t2657 * t3148 + (((t2654 * t3294 - t2754 * t3188) * t2905 + t2657 * t3429) * t2901 + t2979 * t2887 - t2979) * t2921 - t2754 * t3114 + (t2657 * t3301 + (t2754 * t3193 + (t2654 * t2887 - t2754 * t3129 - t2654) * t3286 + (-t2654 * t3448 - t2754 * t3454) * pkin(3)) * t2900) * pkin(9);
t2393 = (t2498 * t2711 + t2501 * t2620) * t2564;
t2444 = (t2577 * t2711 + t2578 * t2620) * t2558;
t2492 = (t2588 * t2711 + t2591 * t2620) * t2570;
t2270 = t2393 * t2891 + t2444 * t3331 + t2492 * t2606;
t2655 = -t2761 * t2861 + t2764 * t2867;
t2658 = t2767 * t2867 + t2770 * t2861;
t2978 = t2655 * t3424 + t2755 * t3140;
t2499 = t2658 * t3147 + (((t2655 * t3293 - t2755 * t3188) * t2905 + t2658 * t3428) * t2901 + t2978 * t2887 - t2978) * t2923 - t2755 * t3113 + (t2658 * t3300 + (t2755 * t3192 + (t2655 * t2887 - t2755 * t3129 - t2655) * t3285 + (-t2655 * t3449 - t2755 * t3455) * pkin(3)) * t2900) * pkin(9);
t2394 = (t2499 * t2712 + t2502 * t2623) * t2565;
t2445 = (t2579 * t2712 + t2580 * t2623) * t2559;
t2493 = (t2589 * t2712 + t2592 * t2623) * t2571;
t2271 = t2394 * t2891 + t2445 * t3330 + t2493 * t2607;
t2677 = -t2775 * t2862 + t2778 * t2868;
t2680 = t2781 * t2868 + t2784 * t2862;
t2974 = t2677 * t3424 + t2756 * t3139;
t2503 = t2680 * t3146 + (((t2677 * t3292 - t2756 * t3188) * t2905 + t2680 * t3427) * t2901 + t2974 * t2887 - t2974) * t2932 - t2756 * t3112 + (t2680 * t3299 + (t2756 * t3191 + (t2677 * t2887 - t2756 * t3129 - t2677) * t3281 + (-t2677 * t3450 - t2756 * t3456) * pkin(3)) * t2900) * pkin(9);
t2404 = (t2503 * t2713 + t2506 * t2626) * t2566;
t2449 = (t2581 * t2713 + t2582 * t2626) * t2560;
t2494 = (t2593 * t2713 + t2596 * t2626) * t2572;
t2275 = t2404 * t2891 + t2449 * t3329 + t2494 * t2608;
t2678 = -t2776 * t2863 + t2779 * t2869;
t2681 = t2782 * t2869 + t2785 * t2863;
t2973 = t2678 * t3424 + t2757 * t3138;
t2504 = t2681 * t3145 + (((t2678 * t3291 - t2757 * t3188) * t2905 + t2681 * t3426) * t2901 + t2973 * t2887 - t2973) * t2934 - t2757 * t3111 + (t2681 * t3298 + (t2757 * t3190 + (t2678 * t2887 - t2757 * t3129 - t2678) * t3280 + (-t2678 * t3451 - t2757 * t3457) * pkin(3)) * t2900) * pkin(9);
t2405 = (t2504 * t2714 + t2507 * t2629) * t2567;
t2450 = (t2583 * t2714 + t2584 * t2629) * t2561;
t2495 = (t2594 * t2714 + t2597 * t2629) * t2573;
t2276 = t2405 * t2891 + t2450 * t3328 + t2495 * t2609;
t2679 = -t2777 * t2864 + t2780 * t2870;
t2682 = t2783 * t2870 + t2786 * t2864;
t2972 = t2679 * t3424 + t2758 * t3137;
t2505 = t2682 * t3144 + (((t2679 * t3290 - t2758 * t3188) * t2905 + t2682 * t3425) * t2901 + t2972 * t2887 - t2972) * t2936 - t2758 * t3110 + (t2682 * t3297 + (t2758 * t3189 + (t2679 * t2887 - t2758 * t3129 - t2679) * t3279 + (-t2679 * t3452 - t2758 * t3458) * pkin(3)) * t2900) * pkin(9);
t2406 = (t2505 * t2715 + t2508 * t2632) * t2568;
t2451 = (t2585 * t2715 + t2586 * t2632) * t2562;
t2496 = (t2595 * t2715 + t2598 * t2632) * t2574;
t2277 = t2406 * t2891 + t2451 * t3327 + t2496 * t2610;
t3058 = t2269 + t2270 + t2271 + t2275 + t2276 + t2277;
t3404 = t2497 * t2563;
t2452 = -t2618 * t3404 - t2617;
t2365 = t2452 * t2891 - t2618 * t3471;
t3403 = t2498 * t2564;
t2453 = -t2621 * t3403 - t2620;
t2366 = t2453 * t2891 - t2621 * t3469;
t3402 = t2499 * t2565;
t2454 = -t2624 * t3402 - t2623;
t2367 = t2454 * t2891 - t2624 * t3467;
t3398 = t2503 * t2566;
t2458 = -t2627 * t3398 - t2626;
t2374 = t2458 * t2891 - t2627 * t3465;
t3397 = t2504 * t2567;
t2459 = -t2630 * t3397 - t2629;
t2375 = t2459 * t2891 - t2630 * t3463;
t3396 = t2505 * t2568;
t2460 = -t2633 * t3396 - t2632;
t2376 = t2460 * t2891 - t2633 * t3461;
t3443 = t2365 + t2366 + t2367 + t2374 + t2375 + t2376;
t3442 = -2 * Ifges(3,4);
t3441 = 2 * Ifges(3,4);
t3440 = 2 * Ifges(4,4);
t3410 = Ifges(4,2) - Ifges(4,3);
t3408 = Ifges(4,4) * t2881;
t3407 = Ifges(4,5) * t2880;
t3406 = t2885 * Ifges(4,4);
t3405 = -0.2e1 * pkin(2) * mrSges(3,2);
t3392 = t2557 * t2575;
t3391 = t2557 * t2576;
t2871 = -mrSges(3,2) * pkin(8) + Ifges(3,6);
t2872 = pkin(8) * mrSges(3,1) - Ifges(3,5);
t2772 = t2871 * t2919 - t2872 * t2913;
t2894 = 0.2e1 * mrSges(3,1) * pkin(2);
t3086 = m(3) * pkin(2) ^ 2 + Ifges(2,3) - t3444;
t3103 = Ifges(3,3) + t3444;
t3195 = 0.2e1 * t3251;
t2925 = Ifges(3,1) - Ifges(3,2);
t3213 = t2925 * t2888;
t2599 = (t3219 * t3442 + t3103 + t3213) * t2887 + t2772 * t3195 - t3213 + (t2913 * t3441 + t2894) * t2919 + t2913 * t3405 + t3086;
t3390 = t2557 * t2599;
t2689 = t2772 * t2901 + t2905 * (t3109 * pkin(2) + Ifges(3,3));
t3389 = t2557 * t2689;
t3388 = t2558 * t2577;
t3387 = t2558 * t2578;
t2773 = t2871 * t2921 - t2872 * t2915;
t3212 = t2925 * t2889;
t2600 = (t3217 * t3442 + t3103 + t3212) * t2887 + t2773 * t3195 - t3212 + (t2915 * t3441 + t2894) * t2921 + t2915 * t3405 + t3086;
t3386 = t2558 * t2600;
t2690 = t2773 * t2901 + t2905 * (t3108 * pkin(2) + Ifges(3,3));
t3385 = t2558 * t2690;
t3384 = t2559 * t2579;
t3383 = t2559 * t2580;
t2774 = t2871 * t2923 - t2872 * t2917;
t3211 = t2925 * t2890;
t2601 = (t3215 * t3442 + t3103 + t3211) * t2887 + t2774 * t3195 - t3211 + (t2917 * t3441 + t2894) * t2923 + t2917 * t3405 + t3086;
t3382 = t2559 * t2601;
t2691 = t2774 * t2901 + t2905 * (t3107 * pkin(2) + Ifges(3,3));
t3381 = t2559 * t2691;
t3380 = t2560 * t2581;
t3379 = t2560 * t2582;
t2788 = t2871 * t2932 - t2872 * t2926;
t3210 = t2925 * t2895;
t2602 = (t3207 * t3442 + t3103 + t3210) * t2887 + t2788 * t3195 - t3210 + (t2926 * t3441 + t2894) * t2932 + t2926 * t3405 + t3086;
t3378 = t2560 * t2602;
t2692 = t2788 * t2901 + t2905 * (t3106 * pkin(2) + Ifges(3,3));
t3377 = t2560 * t2692;
t3376 = t2561 * t2583;
t3375 = t2561 * t2584;
t2789 = t2871 * t2934 - t2872 * t2928;
t3209 = t2925 * t2896;
t2603 = (t3205 * t3442 + t3103 + t3209) * t2887 + t2789 * t3195 - t3209 + (t2928 * t3441 + t2894) * t2934 + t2928 * t3405 + t3086;
t3374 = t2561 * t2603;
t2693 = t2789 * t2901 + t2905 * (t3105 * pkin(2) + Ifges(3,3));
t3373 = t2561 * t2693;
t3372 = t2562 * t2585;
t3371 = t2562 * t2586;
t2790 = t2871 * t2936 - t2872 * t2930;
t3208 = t2925 * t2897;
t2604 = (t3203 * t3442 + t3103 + t3208) * t2887 + t2790 * t3195 - t3208 + (t2930 * t3441 + t2894) * t2936 + t2930 * t3405 + t3086;
t3370 = t2562 * t2604;
t2694 = t2790 * t2901 + t2905 * (t3104 * pkin(2) + Ifges(3,3));
t3369 = t2562 * t2694;
t3368 = t2563 * t2605;
t3367 = t2563 * t2891;
t3366 = t2564 * t2606;
t3365 = t2564 * t2891;
t3364 = t2565 * t2607;
t3363 = t2565 * t2891;
t3362 = t2566 * t2608;
t3361 = t2566 * t2891;
t3360 = t2567 * t2609;
t3359 = t2567 * t2891;
t3358 = t2568 * t2610;
t3357 = t2568 * t2891;
t3356 = t2569 * t2587;
t3355 = t2569 * t2590;
t3353 = t2569 * t2689;
t3352 = t2570 * t2588;
t3351 = t2570 * t2591;
t3349 = t2570 * t2690;
t3348 = t2571 * t2589;
t3347 = t2571 * t2592;
t3345 = t2571 * t2691;
t3344 = t2572 * t2593;
t3343 = t2572 * t2596;
t3341 = t2572 * t2692;
t3340 = t2573 * t2594;
t3339 = t2573 * t2597;
t3337 = t2573 * t2693;
t3336 = t2574 * t2595;
t3335 = t2574 * t2598;
t3333 = t2574 * t2694;
t3274 = t2880 * t2883;
t3272 = t2881 * t2882;
t3271 = t2881 * t2885;
t2898 = Ifges(4,1) - Ifges(4,2);
t3270 = t2881 * t2898;
t2824 = Ifges(4,6) * t2883 + t3407;
t3262 = t2882 * t2824;
t3260 = t2885 * t2803;
t3176 = Ifges(4,4) * t3274;
t3173 = t2618 * t3392;
t3171 = t2621 * t3388;
t3169 = t2624 * t3384;
t3167 = t2627 * t3380;
t3165 = t2630 * t3376;
t3163 = t2633 * t3372;
t3161 = t2563 * t3332;
t3160 = t2564 * t3331;
t3159 = t2565 * t3330;
t3158 = t2566 * t3329;
t3157 = t2567 * t3328;
t3156 = t2568 * t3327;
t3155 = t2618 * t3356;
t3154 = t2621 * t3352;
t3153 = t2624 * t3348;
t3152 = t2627 * t3344;
t3151 = t2630 * t3340;
t3150 = t2633 * t3336;
t2413 = t2497 * t3367 + t3471;
t2414 = t2498 * t3365 + t3469;
t2415 = t2499 * t3363 + t3467;
t2416 = t2500 * t3367 + t3470;
t2417 = t2501 * t3365 + t3468;
t2418 = t2502 * t3363 + t3466;
t2425 = t2503 * t3361 + t3465;
t2426 = t2504 * t3359 + t3463;
t2427 = t2505 * t3357 + t3461;
t2428 = t2506 * t3361 + t3464;
t2429 = t2507 * t3359 + t3462;
t2430 = t2508 * t3357 + t3460;
t3102 = -(Ifges(4,6) * t2884 - t2880 * t3270) * t2883 - t2884 * t3407 - t3408;
t3076 = -t2708 * t2882 - t3260;
t2857 = t2883 ^ 2;
t3069 = t2898 * t2857 - 0.2e1 * t3176;
t2263 = t2392 * t3332 + t2443 * t2599 + t2491 * t2689;
t2264 = t2393 * t3331 + t2444 * t2600 + t2492 * t2690;
t2265 = t2394 * t3330 + t2445 * t2601 + t2493 * t2691;
t2266 = t2404 * t3329 + t2449 * t2602 + t2494 * t2692;
t2267 = t2405 * t3328 + t2450 * t2603 + t2495 * t2693;
t2268 = t2406 * t3327 + t2451 * t2604 + t2496 * t2694;
t2272 = Ifges(3,3) * t2491 + t2392 * t2605 + t2443 * t2689;
t2273 = Ifges(3,3) * t2492 + t2393 * t2606 + t2444 * t2690;
t2274 = Ifges(3,3) * t2493 + t2394 * t2607 + t2445 * t2691;
t2278 = Ifges(3,3) * t2494 + t2404 * t2608 + t2449 * t2692;
t2279 = Ifges(3,3) * t2495 + t2405 * t2609 + t2450 * t2693;
t2280 = Ifges(3,3) * t2496 + t2406 * t2610 + t2451 * t2694;
t3068 = t2263 * t2443 + t2264 * t2444 + t2265 * t2445 + t2266 * t2449 + t2267 * t2450 + t2269 * t2392 + t2270 * t2393 + t2271 * t2394 + t2272 * t2491 + t2273 * t2492 + t2274 * t2493 + t2275 * t2404 + t2276 * t2405 + t2278 * t2494 + t2279 * t2495 + t2268 * t2451 + t2277 * t2406 + t2280 * t2496;
t3026 = t2268 * t3371 + t2280 * t3335;
t3027 = t2267 * t3375 + t2279 * t3339;
t3028 = t2266 * t3379 + t2278 * t3343;
t3029 = t2265 * t3383 + t2274 * t3347;
t3030 = t2264 * t3387 + t2273 * t3351;
t3031 = t2263 * t3391 + t2272 * t3355;
t3067 = -t2269 * t2464 - t2270 * t2465 - t2271 * t2466 - t2275 * t2470 - t2276 * t2471 - t2277 * t2472 - t2618 * t3031 - t2621 * t3030 - t2624 * t3029 - t2627 * t3028 - t2630 * t3027 - t2633 * t3026;
t3001 = t2575 * t3390 + t2587 * t3353;
t2353 = t2452 * t3332 - t2618 * t3001;
t2999 = t2577 * t3386 + t2588 * t3349;
t2354 = t2453 * t3331 - t2621 * t2999;
t2997 = t2579 * t3382 + t2589 * t3345;
t2355 = t2454 * t3330 - t2624 * t2997;
t2995 = t2581 * t3378 + t2593 * t3341;
t2359 = t2458 * t3329 - t2627 * t2995;
t2993 = t2583 * t3374 + t2594 * t3337;
t2360 = t2459 * t3328 - t2630 * t2993;
t2991 = t2585 * t3370 + t2595 * t3333;
t2361 = t2460 * t3327 - t2633 * t2991;
t3043 = Ifges(3,3) * t3356 + t2575 * t3389;
t2368 = t2452 * t2605 - t2618 * t3043;
t3041 = Ifges(3,3) * t3352 + t2577 * t3385;
t2369 = t2453 * t2606 - t2621 * t3041;
t3039 = Ifges(3,3) * t3348 + t2579 * t3381;
t2370 = t2454 * t2607 - t2624 * t3039;
t3037 = Ifges(3,3) * t3344 + t2581 * t3377;
t2380 = t2458 * t2608 - t2627 * t3037;
t3035 = Ifges(3,3) * t3340 + t2583 * t3373;
t2381 = t2459 * t2609 - t2630 * t3035;
t3033 = Ifges(3,3) * t3336 + t2585 * t3369;
t2382 = t2460 * t2610 - t2633 * t3033;
t3066 = t2353 * t2443 + t2354 * t2444 + t2355 * t2445 + t2359 * t2449 + t2360 * t2450 + t2365 * t2392 + t2366 * t2393 + t2367 * t2394 + t2368 * t2491 + t2369 * t2492 + t2370 * t2493 + t2374 * t2404 + t2375 * t2405 + t2380 * t2494 + t2381 * t2495 + t2361 * t2451 + t2376 * t2406 + t2382 * t2496;
t3000 = t2576 * t3390 + t2590 * t3353;
t2356 = t2464 * t3332 + t2618 * t3000;
t2998 = t2578 * t3386 + t2591 * t3349;
t2357 = t2465 * t3331 + t2621 * t2998;
t2996 = t2580 * t3382 + t2592 * t3345;
t2358 = t2466 * t3330 + t2624 * t2996;
t2994 = t2582 * t3378 + t2596 * t3341;
t2362 = t2470 * t3329 + t2627 * t2994;
t2992 = t2584 * t3374 + t2597 * t3337;
t2363 = t2471 * t3328 + t2630 * t2992;
t2990 = t2586 * t3370 + t2598 * t3333;
t2364 = t2472 * t3327 + t2633 * t2990;
t3042 = Ifges(3,3) * t3355 + t2576 * t3389;
t2377 = t2464 * t2605 + t2618 * t3042;
t3040 = Ifges(3,3) * t3351 + t2578 * t3385;
t2378 = t2465 * t2606 + t2621 * t3040;
t3038 = Ifges(3,3) * t3347 + t2580 * t3381;
t2379 = t2466 * t2607 + t2624 * t3038;
t3036 = Ifges(3,3) * t3343 + t2582 * t3377;
t2386 = t2470 * t2608 + t2627 * t3036;
t3034 = Ifges(3,3) * t3339 + t2584 * t3373;
t2387 = t2471 * t2609 + t2630 * t3034;
t3032 = Ifges(3,3) * t3335 + t2586 * t3369;
t2388 = t2472 * t2610 + t2633 * t3032;
t3065 = t2356 * t2443 + t2357 * t2444 + t2358 * t2445 + t2362 * t2449 + t2363 * t2450 + t2371 * t2392 + t2372 * t2393 + t2373 * t2394 + t2377 * t2491 + t2378 * t2492 + t2379 * t2493 + t2383 * t2404 + t2384 * t2405 + t2386 * t2494 + t2387 * t2495 + t2364 * t2451 + t2385 * t2406 + t2388 * t2496;
t2395 = t2497 * t3161 + t3001;
t2396 = t2498 * t3160 + t2999;
t2397 = t2499 * t3159 + t2997;
t2407 = t2503 * t3158 + t2995;
t2408 = t2504 * t3157 + t2993;
t2409 = t2505 * t3156 + t2991;
t2419 = t2497 * t3368 + t3043;
t2420 = t2498 * t3366 + t3041;
t2421 = t2499 * t3364 + t3039;
t2431 = t2503 * t3362 + t3037;
t2432 = t2504 * t3360 + t3035;
t2433 = t2505 * t3358 + t3033;
t3064 = t2392 * t2413 + t2393 * t2414 + t2394 * t2415 + t2395 * t2443 + t2396 * t2444 + t2397 * t2445 + t2404 * t2425 + t2405 * t2426 + t2407 * t2449 + t2408 * t2450 + t2419 * t2491 + t2420 * t2492 + t2421 * t2493 + t2431 * t2494 + t2432 * t2495 + t2406 * t2427 + t2409 * t2451 + t2433 * t2496;
t2398 = t2500 * t3161 + t3000;
t2399 = t2501 * t3160 + t2998;
t2400 = t2502 * t3159 + t2996;
t2410 = t2506 * t3158 + t2994;
t2411 = t2507 * t3157 + t2992;
t2412 = t2508 * t3156 + t2990;
t2422 = t2500 * t3368 + t3042;
t2423 = t2501 * t3366 + t3040;
t2424 = t2502 * t3364 + t3038;
t2434 = t2506 * t3362 + t3036;
t2435 = t2507 * t3360 + t3034;
t2436 = t2508 * t3358 + t3032;
t3063 = t2392 * t2416 + t2393 * t2417 + t2394 * t2418 + t2398 * t2443 + t2399 * t2444 + t2400 * t2445 + t2404 * t2428 + t2405 * t2429 + t2410 * t2449 + t2411 * t2450 + t2422 * t2491 + t2423 * t2492 + t2424 * t2493 + t2434 * t2494 + t2435 * t2495 + t2406 * t2430 + t2412 * t2451 + t2436 * t2496;
t3017 = t2361 * t3371 + t2382 * t3335;
t3018 = t2360 * t3375 + t2381 * t3339;
t3019 = t2359 * t3379 + t2380 * t3343;
t3023 = t2355 * t3383 + t2370 * t3347;
t3024 = t2354 * t3387 + t2369 * t3351;
t3025 = t2353 * t3391 + t2368 * t3355;
t3062 = t2365 * t2464 + t2366 * t2465 + t2367 * t2466 + t2374 * t2470 + t2375 * t2471 + t2376 * t2472 + t2618 * t3025 + t2621 * t3024 + t2624 * t3023 + t2627 * t3019 + t2630 * t3018 + t2633 * t3017;
t3014 = t2364 * t3371 + t2388 * t3335;
t3015 = t2363 * t3375 + t2387 * t3339;
t3016 = t2362 * t3379 + t2386 * t3343;
t3020 = t2358 * t3383 + t2379 * t3347;
t3021 = t2357 * t3387 + t2378 * t3351;
t3022 = t2356 * t3391 + t2377 * t3355;
t3061 = -t2371 * t2464 - t2372 * t2465 - t2373 * t2466 - t2383 * t2470 - t2384 * t2471 - t2385 * t2472 - t2618 * t3022 - t2621 * t3021 - t2624 * t3020 - t2627 * t3016 - t2630 * t3015 - t2633 * t3014;
t3005 = t2409 * t3371 + t2433 * t3335;
t3006 = t2408 * t3375 + t2432 * t3339;
t3007 = t2407 * t3379 + t2431 * t3343;
t3011 = t2397 * t3383 + t2421 * t3347;
t3012 = t2396 * t3387 + t2420 * t3351;
t3013 = t2395 * t3391 + t2419 * t3355;
t3060 = t2413 * t2464 + t2414 * t2465 + t2415 * t2466 + t2425 * t2470 + t2426 * t2471 + t2427 * t2472 + t2618 * t3013 + t2621 * t3012 + t2624 * t3011 + t2627 * t3007 + t2630 * t3006 + t2633 * t3005;
t3002 = t2412 * t3371 + t2436 * t3335;
t3003 = t2411 * t3375 + t2435 * t3339;
t3004 = t2410 * t3379 + t2434 * t3343;
t3008 = t2400 * t3383 + t2424 * t3347;
t3009 = t2399 * t3387 + t2423 * t3351;
t3010 = t2398 * t3391 + t2422 * t3355;
t3059 = t2416 * t2464 + t2417 * t2465 + t2418 * t2466 + t2428 * t2470 + t2429 * t2471 + t2430 * t2472 + t2618 * t3010 + t2621 * t3009 + t2624 * t3008 + t2627 * t3004 + t2630 * t3003 + t2633 * t3002;
t2971 = -t2263 * t3173 - t2264 * t3171 - t2265 * t3169 - t2266 * t3167 - t2267 * t3165 - t2268 * t3163 + t2269 * t2452 + t2270 * t2453 + t2271 * t2454 - t2272 * t3155 + t2275 * t2458 + t2276 * t2459 + t2277 * t2460 - t2273 * t3154 - t2274 * t3153 - t2278 * t3152 - t2279 * t3151 - t2280 * t3150;
t2970 = -t2356 * t3173 - t2357 * t3171 - t2358 * t3169 - t2362 * t3167 - t2363 * t3165 - t2364 * t3163 + t2371 * t2452 + t2372 * t2453 + t2373 * t2454 - t2377 * t3155 + t2383 * t2458 + t2384 * t2459 + t2385 * t2460 - t2378 * t3154 - t2379 * t3153 - t2386 * t3152 - t2387 * t3151 - t2388 * t3150;
t2969 = -t2398 * t3173 - t2399 * t3171 - t2400 * t3169 - t2410 * t3167 - t2411 * t3165 - t2412 * t3163 + t2416 * t2452 + t2417 * t2453 + t2418 * t2454 - t2422 * t3155 + t2428 * t2458 + t2429 * t2459 + t2430 * t2460 - t2423 * t3154 - t2424 * t3153 - t2434 * t3152 - t2435 * t3151 - t2436 * t3150;
t2968 = -t2353 * t3173 - t2354 * t3171 - t2355 * t3169 - t2359 * t3167 - t2360 * t3165 - t2361 * t3163 + t2365 * t2452 + t2366 * t2453 + t2367 * t2454 + t2374 * t2458 + t2375 * t2459 + t2376 * t2460 + Ifges(4,3) - t2368 * t3155 - t2369 * t3154 - t2370 * t3153 - t2380 * t3152 - t2381 * t3151 - t2382 * t3150;
t2967 = -t2395 * t3173 - t2396 * t3171 - t2397 * t3169 - t2407 * t3167 - t2408 * t3165 - t2409 * t3163 + t2413 * t2452 + t2414 * t2453 + t2415 * t2454 + t2425 * t2458 + t2426 * t2459 + t2427 * t2460 - t2419 * t3155 - t2420 * t3154 - t2421 * t3153 - t2431 * t3152 - t2432 * t3151 - t2433 * t3150 - t3263;
t2858 = t2884 ^ 2;
t2733 = -t2885 * t2898 + t3272 * t3440;
t2731 = t2857 * t3440 + t2898 * t3274 - Ifges(4,4);
t2729 = t3069 + t3410;
t2716 = -Ifges(4,3) * t2884 + t3459;
t2196 = t2430 + t2429 + t2428 + t2418 + t2417 + t2416;
t2195 = t2427 + t2426 + t2425 + t2415 + t2414 + t2413;
t2194 = -t3076 + t3443;
t1 = [t2416 * t3401 + t2417 * t3400 + t2418 * t3399 + t2428 * t3395 + t2429 * t3394 + t2430 * t3393 + m(4) + t3002 + t3003 + t3004 + t3008 + t3009 + t3010, t2430 * t3396 + t2412 * t3372 + t2436 * t3336 + t2429 * t3397 + t2411 * t3376 + t2435 * t3340 + t2428 * t3398 + t2410 * t3380 + t2434 * t3344 + t2418 * t3402 + t2400 * t3384 + t2424 * t3348 + t2417 * t3403 + t2399 * t3388 + t2423 * t3352 + t2416 * t3404 + t2398 * t3392 + t2422 * t3356, t2196, t2969, t2882 * t3063 + t2885 * t3059 - t2708, t2969 * t2881 + (-t2882 * t3059 + t2885 * t3063 - t2803) * t2884; t2413 * t3401 + t2414 * t3400 + t2415 * t3399 + t2425 * t3395 + t2426 * t3394 + t2427 * t3393 + t3005 + t3006 + t3007 + t3011 + t3012 + t3013, t2427 * t3396 + t2409 * t3372 + t2433 * t3336 + t2426 * t3397 + t2408 * t3376 + t2432 * t3340 + t2425 * t3398 + t2407 * t3380 + t2431 * t3344 + t2415 * t3402 + t2397 * t3384 + t2421 * t3348 + t2414 * t3403 + t2396 * t3388 + t2420 * t3352 + t2413 * t3404 + t2395 * t3392 + t2419 * t3356 + m(4), t2195, t2707 + t2967, t3060 * t2885 + (t2709 + t3064) * t2882, t2804 * t2885 + t2967 * t2881 + (-t2882 * t3060 + t2885 * t3064) * t2884; t2196, t2195, 0.6e1 * m(1) + 0.6e1 * m(2) + 0.6e1 * m(3) + m(4), t2194, t3058 * t2882 + t2885 * t3445, t2804 * t2882 + (t3260 + t3443) * t2881 + (t2882 * t3057 + t2885 * t3058) * t2884; t2365 * t3401 + t2366 * t3400 + t2367 * t3399 + t2374 * t3395 + t2375 * t3394 + t2376 * t3393 + t3017 + t3018 + t3019 + t3023 + t3024 + t3025, t2376 * t3396 + t2361 * t3372 + t2382 * t3336 + t2375 * t3397 + t2360 * t3376 + t2381 * t3340 + t2374 * t3398 + t2359 * t3380 + t2380 * t3344 + t2367 * t3402 + t2355 * t3384 + t2370 * t3348 + t2366 * t3403 + t2354 * t3388 + t2369 * t3352 + t2365 * t3404 + t2353 * t3392 + t2368 * t3356 + t3446, t2194, t2729 * t2858 + 0.2e1 * t2884 * t3459 + t2968, t2731 * t2884 + t2881 * t2824 + t2882 * t3066 + t2885 * t3062, t2968 * t2881 + (-t2882 * t3062 + t2885 * t3066 + t2825) * t2884; t2371 * t3401 + t2372 * t3400 + t2373 * t3399 + t2383 * t3395 + t2384 * t3394 + t2385 * t3393 + t3014 + t3015 + t3016 + t3020 + t3021 + t3022 - t3446, t2385 * t3396 + t2364 * t3372 + t2388 * t3336 + t2384 * t3397 + t2363 * t3376 + t2387 * t3340 + t2383 * t3398 + t2362 * t3380 + t2386 * t3344 + t2373 * t3402 + t2358 * t3384 + t2379 * t3348 + t2372 * t3403 + t2357 * t3388 + t2378 * t3352 + t2371 * t3404 + t2356 * t3392 + t2377 * t3356, t3445, t2970 + ((t2882 * t3270 + 0.2e1 * t3406) * t2857 - t2733 * t3274 + t3410 * t3272 - t3406) * t2884 - 0.2e1 * t2882 * t2825 * t2858 + (Ifges(4,5) * t2882 + Ifges(4,6) * t3271) * t2883 + t2880 * (Ifges(4,5) * t3271 - Ifges(4,6) * t2882), t2733 * t2857 + (Ifges(4,1) - t3061 + 0.2e1 * t3176) * t2885 + (t3065 + t3102) * t2882, t2716 * t2882 + t2885 * t2824 + t2970 * t2881 + (t2882 * t3061 + t2885 * t3065) * t2884; t2269 * t3401 + t2270 * t3400 + t2271 * t3399 + t2275 * t3395 + t2276 * t3394 + t2277 * t3393 + t3026 + t3027 + t3028 + t3029 + t3030 + t3031 + t3076, t2263 * t3392 + t2264 * t3388 + t2269 * t3404 + t2270 * t3403 + t2271 * t3402 + t2275 * t3398 + t2272 * t3356 + t2273 * t3352 + t2274 * t3348 + t2278 * t3344 + t2268 * t3372 + t2279 * t3340 + t2280 * t3336 + t2276 * t3397 + t2277 * t3396 + t2709 + t2265 * t3384 + t2266 * t3380 + t2267 * t3376, t3058, t2881 * t3262 + t2971 + (-t2729 * t3271 + t2731 * t2882) * t2884 + (0.2e1 * t2858 - 0.1e1) * t2885 * t2825, (-0.2e1 * t2857 * t3408 - t3067 - t3102) * t2885 + (Ifges(4,1) + t3068 - t3069) * t2882, -t2716 * t2885 + t3262 + t2971 * t2881 + (t2882 * t3067 + t2885 * t3068) * t2884;];
MX  = t1;
