% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P6PRRRRR6V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x21]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-09-11 16:13
% Revision: 7993d029b5937b704dcf3fc7d8ae322038cdcbdd (2019-09-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6PRRRRR6V2G1P1A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_regmin: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_gravload_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2019-09-11 15:03:50
% EndTime: 2019-09-11 15:04:56
% DurationCPUTime: 68.36s
% Computational Cost: add. (17960->1523), mult. (47779->2596), div. (240->36), fcn. (40632->50), ass. (0->1088)
t9731 = cos(pkin(5));
t9718 = t9731 ^ 2;
t10338 = t9718 - 0.1e1;
t9727 = sin(pkin(5));
t10160 = t9727 * t9731;
t9665 = pkin(3) * t10160;
t9730 = cos(pkin(6));
t9685 = t9730 * pkin(9) + pkin(8);
t9726 = sin(pkin(6));
t9688 = t9726 * pkin(9);
t9687 = pkin(2) * t9688;
t10043 = t9685 * t9665 - t9687;
t9717 = t9730 ^ 2;
t9784 = pkin(9) ^ 2;
t9662 = pkin(3) ^ 2 + t9784 * t9717 - t9784;
t10013 = t9662 * t10338;
t9756 = sin(qJ(2,1));
t10154 = t9727 * t9756;
t9762 = cos(qJ(2,1));
t10163 = t9726 * t9762;
t9728 = sin(pkin(4));
t10314 = pkin(9) * t9728;
t10063 = t9756 * t9662;
t10161 = t9727 * t9728;
t9761 = cos(qJ(3,1));
t9724 = t9761 ^ 2;
t10339 = 0.2e1 * t9724;
t9732 = cos(pkin(4));
t10214 = (t9731 + 0.1e1) * (t9731 - 0.1e1);
t10032 = pkin(3) * t10214;
t9864 = t10032 * t9688;
t9508 = t9732 * t9864;
t10135 = t9731 * t9762;
t9945 = t9726 * t10135;
t9877 = pkin(9) * t9945;
t9858 = pkin(3) * t9877;
t9341 = (t9508 - (t9858 - t10063 / 0.2e1) * t10161) * t10339;
t9755 = sin(qJ(3,1));
t9871 = t9755 * t10013;
t9359 = -t9871 + t10043;
t10175 = t9726 * t9731;
t10021 = pkin(9) * t10175;
t9884 = t9727 * t10021;
t9850 = t9685 * t9884;
t10023 = t9718 * t9688;
t9899 = pkin(3) * t10023;
t9823 = t9755 * t9850 + pkin(3) * (pkin(2) * t9755 + t9688) - t9899;
t9413 = t9823 * t9732;
t9963 = t9662 * t10160;
t9501 = t9755 * t9963;
t10324 = pkin(3) * t9685;
t9906 = t10338 * t10324;
t9425 = t9501 + t9906;
t10009 = t9755 * t10338;
t9446 = t9685 * t10009 + t9665;
t10014 = (-t9717 + 0.1e1) * pkin(9);
t10166 = t9726 * t9755;
t9622 = pkin(2) * t10166 + t10014;
t9679 = pkin(9) * t10166;
t9660 = 0.2e1 * t9679 + pkin(2);
t9970 = t9660 * t10154;
t9177 = 0.1e1 / (t9341 + (t9359 * t9732 + t9728 * (pkin(3) * t9970 + t9425 * t9762)) * t9761 + t9413 + (t9622 * t10154 + t9446 * t10163) * t10314);
t10066 = t9755 * t9756;
t10122 = t9732 * t9762;
t9535 = t9731 * t10122 - t10161;
t9449 = -t9732 * t10066 + t9535 * t9761;
t9684 = t9732 * t9727;
t9532 = t9728 * t10135 + t9684;
t10045 = t9762 * t9755;
t10062 = t9756 * t9761;
t9569 = t9731 * t10062 + t10045;
t9738 = legFrame(1,3);
t9694 = sin(t9738);
t9700 = cos(t9738);
t9631 = t9694 * g(1) - t9700 * g(2);
t9637 = t9700 * g(1) + t9694 * g(2);
t9725 = sin(pkin(10));
t9729 = cos(pkin(10));
t9242 = t9637 * (t9449 * t9725 + t9729 * t9569) + (t9449 * t9729 - t9725 * t9569) * t9631 - (-t9728 * t10066 + t9532 * t9761) * g(3);
t10258 = t9177 * t9242;
t10306 = t9732 * pkin(3);
t9664 = t9726 * t10306;
t9663 = pkin(9) * t9664;
t9883 = t9718 * t9664;
t10042 = 0.2e1 * pkin(9) * t9883 - 0.2e1 * t9663;
t9686 = pkin(2) * t10306;
t10044 = t9732 * t9850 + t9686;
t10316 = pkin(3) * t9761;
t9797 = -0.2e1 * t9858 + t10063;
t9803 = pkin(9) * (t9664 - t9883);
t10046 = t9762 * t9685;
t9683 = pkin(2) * t10154;
t9852 = t9718 * t10046 - t10046 + t9683;
t9817 = t9852 * t9755;
t9847 = t10043 * t9732;
t9851 = t9732 * t10013;
t10024 = pkin(9) * (t9730 + 0.1e1) * (t9730 - 0.1e1);
t9886 = t9756 * t10024;
t10015 = t9756 * t9688;
t9907 = 0.2e1 * t10015;
t9159 = 0.1e1 / (t10042 * t9724 + (-t9851 * t9755 + t9847) * t9761 + t10044 * t9755 + t9803 + (t9817 * t9688 + t9852 * t10316 + (t9797 * t9724 + (pkin(3) * t9907 + t9662 * t10135) * t9755 * t9761 + pkin(9) * (pkin(3) * t9945 - t9886)) * t9727) * t9728);
t10049 = t9761 * t9729;
t10050 = t9761 * t9725;
t10067 = t9755 * t9729;
t10138 = t9731 * t9755;
t10307 = g(3) * t9728;
t9570 = -t9731 * t10066 + t9762 * t9761;
t9913 = t9732 * t10049;
t9914 = t9732 * t10050;
t9919 = t9732 * t10067;
t10126 = t9732 * t9755;
t9920 = t9725 * t10126;
t9250 = t9637 * ((-t9731 * t9920 + t10049) * t9756 + t9762 * (t9731 * t10067 + t9914)) + t9631 * ((-t9731 * t9919 - t10050) * t9756 + t9762 * (-t9725 * t10138 + t9913)) - t9570 * t10307;
t10273 = t9159 * t9250;
t9526 = -t9725 * t9694 + t9729 * t9700;
t10047 = t9762 * t9526;
t9520 = t9729 * t9694 + t9725 * t9700;
t10065 = t9756 * t9520;
t9388 = -t9732 * t10065 + t10047;
t10048 = t9762 * t9520;
t10064 = t9756 * t9526;
t9804 = -t9520 * t10161 + (t9732 * t10048 + t10064) * t9731;
t9199 = (pkin(3) * t9804 - t9388 * t9688) * t9761 + t9755 * (t9388 * pkin(3) + t9804 * t9688);
t9585 = t9762 * pkin(3) + t9731 * t10015;
t10237 = t9585 * t9732;
t10162 = t9727 * t9685;
t9492 = pkin(3) * t10138 - t10162;
t9661 = t9679 + pkin(2);
t10246 = (-t9492 * t9756 + t9661 * t9762) * t9732;
t9437 = t9492 * t9762 + t9756 * t9661;
t10300 = t9756 * pkin(3);
t9588 = t9877 - t10300;
t9224 = t9520 * t10246 + (t9520 * t10237 - t9526 * t9588) * t9761 + t9526 * t9437;
t10392 = -t10258 * t9224 + t9199 * t10273;
t9558 = t9729 * t10122 - t9725 * t9756;
t10125 = t9732 * t9756;
t9561 = t9729 * t10125 + t9725 * t9762;
t9944 = t9729 * t10161;
t9239 = t9637 * ((-t9732 * t10062 - t9755 * t9535) * t9725 + t9729 * t9570) + t9631 * (-t9561 * t9761 + (-t9558 * t9731 + t9944) * t9755) + g(3) * (t9728 * t10062 + t9532 * t9755);
t10259 = t9177 * t9239;
t9251 = t9637 * ((-t9731 * t9914 - t10067) * t9756 + t9762 * (t9731 * t10049 - t9920)) - ((-t9725 * t9755 + t9731 * t9913) * t9756 + t9762 * (t9731 * t10050 + t9919)) * t9631 + t9569 * t10307;
t10272 = t9159 * t9251;
t10391 = -t10259 * t9224 + t9199 * t10272;
t9754 = sin(qJ(2,2));
t10155 = t9727 * t9754;
t9760 = cos(qJ(2,2));
t10164 = t9726 * t9760;
t10069 = t9754 * t9662;
t9759 = cos(qJ(3,2));
t9723 = t9759 ^ 2;
t10340 = 0.2e1 * t9723;
t10136 = t9731 * t9760;
t9946 = t9726 * t10136;
t9878 = pkin(9) * t9946;
t9859 = pkin(3) * t9878;
t9340 = (t9508 - (t9859 - t10069 / 0.2e1) * t10161) * t10340;
t9753 = sin(qJ(3,2));
t9872 = t9753 * t10013;
t9358 = -t9872 + t10043;
t9824 = t9753 * t9850 + pkin(3) * (pkin(2) * t9753 + t9688) - t9899;
t9412 = t9824 * t9732;
t9500 = t9753 * t9963;
t9424 = t9500 + t9906;
t10006 = t10338 * t9753;
t9445 = t9685 * t10006 + t9665;
t10167 = t9726 * t9753;
t9621 = pkin(2) * t10167 + t10014;
t9677 = pkin(9) * t10167;
t9658 = 0.2e1 * t9677 + pkin(2);
t9971 = t9658 * t10155;
t9176 = 0.1e1 / (t9340 + (t9358 * t9732 + t9728 * (pkin(3) * t9971 + t9424 * t9760)) * t9759 + t9412 + (t9621 * t10155 + t9445 * t10164) * t10314);
t10073 = t9753 * t9754;
t10123 = t9732 * t9760;
t9534 = t9731 * t10123 - t10161;
t9448 = -t9732 * t10073 + t9534 * t9759;
t9531 = t9728 * t10136 + t9684;
t10068 = t9754 * t9759;
t10072 = t9753 * t9760;
t9567 = t9731 * t10068 + t10072;
t9737 = legFrame(2,3);
t9693 = sin(t9737);
t9699 = cos(t9737);
t9630 = t9693 * g(1) - t9699 * g(2);
t9636 = t9699 * g(1) + t9693 * g(2);
t9241 = t9636 * (t9448 * t9725 + t9729 * t9567) + t9630 * (t9448 * t9729 - t9725 * t9567) - (-t9728 * t10073 + t9531 * t9759) * g(3);
t10260 = t9176 * t9241;
t10317 = pkin(3) * t9759;
t9798 = -0.2e1 * t9859 + t10069;
t10051 = t9760 * t9685;
t9682 = pkin(2) * t10155;
t9853 = t9718 * t10051 - t10051 + t9682;
t9818 = t9853 * t9753;
t9887 = t9754 * t10024;
t10016 = t9754 * t9688;
t9908 = 0.2e1 * t10016;
t9158 = 0.1e1 / (t10042 * t9723 + (-t9851 * t9753 + t9847) * t9759 + t10044 * t9753 + t9803 + (t9818 * t9688 + t9853 * t10317 + (t9798 * t9723 + (pkin(3) * t9908 + t9662 * t10136) * t9753 * t9759 + pkin(9) * (pkin(3) * t9946 - t9887)) * t9727) * t9728);
t10054 = t9759 * t9729;
t10055 = t9759 * t9725;
t10074 = t9753 * t9729;
t10075 = t9753 * t9725;
t9568 = -t9731 * t10073 + t9759 * t9760;
t9915 = t9732 * t10054;
t9916 = t9732 * t10055;
t9921 = t9732 * t10074;
t9922 = t9732 * t10075;
t9253 = ((-t9731 * t9922 + t10054) * t9754 + t9760 * (t9731 * t10074 + t9916)) * t9636 + ((-t9731 * t9921 - t10055) * t9754 + t9760 * (-t9731 * t10075 + t9915)) * t9630 - t9568 * t10307;
t10277 = t9158 * t9253;
t9525 = -t9725 * t9693 + t9729 * t9699;
t10052 = t9760 * t9525;
t9519 = t9729 * t9693 + t9725 * t9699;
t10071 = t9754 * t9519;
t9386 = -t9732 * t10071 + t10052;
t10053 = t9760 * t9519;
t10070 = t9754 * t9525;
t9805 = -t9519 * t10161 + (t9732 * t10053 + t10070) * t9731;
t9196 = (pkin(3) * t9805 - t9386 * t9688) * t9759 + t9753 * (t9386 * pkin(3) + t9805 * t9688);
t9584 = t9760 * pkin(3) + t9731 * t10016;
t10238 = t9584 * t9732;
t10322 = pkin(3) * t9731;
t9491 = t9753 * t10322 - t10162;
t9659 = t9677 + pkin(2);
t10247 = (-t9491 * t9754 + t9659 * t9760) * t9732;
t9435 = t9491 * t9760 + t9754 * t9659;
t10301 = t9754 * pkin(3);
t9587 = t9878 - t10301;
t9222 = t9519 * t10247 + (t9519 * t10238 - t9525 * t9587) * t9759 + t9525 * t9435;
t10390 = -t10260 * t9222 + t9196 * t10277;
t9557 = t9729 * t10123 - t9725 * t9754;
t10127 = t9732 * t9754;
t9560 = t9729 * t10127 + t9725 * t9760;
t9238 = t9636 * ((-t9732 * t10068 - t9753 * t9534) * t9725 + t9729 * t9568) + t9630 * (-t9560 * t9759 + (-t9557 * t9731 + t9944) * t9753) + (t9728 * t10068 + t9531 * t9753) * g(3);
t10261 = t9176 * t9238;
t9255 = ((-t9731 * t9916 - t10074) * t9754 + t9760 * (t9731 * t10054 - t9922)) * t9636 - ((t9731 * t9915 - t10075) * t9754 + t9760 * (t9731 * t10055 + t9921)) * t9630 + t9567 * t10307;
t10276 = t9158 * t9255;
t10389 = -t10261 * t9222 + t9196 * t10276;
t9752 = sin(qJ(2,3));
t10156 = t9727 * t9752;
t9758 = cos(qJ(2,3));
t10165 = t9726 * t9758;
t10077 = t9752 * t9662;
t9757 = cos(qJ(3,3));
t9722 = t9757 ^ 2;
t10341 = 0.2e1 * t9722;
t10137 = t9731 * t9758;
t9947 = t9726 * t10137;
t9879 = pkin(9) * t9947;
t9860 = pkin(3) * t9879;
t9339 = (t9508 - (t9860 - t10077 / 0.2e1) * t10161) * t10341;
t9751 = sin(qJ(3,3));
t9873 = t9751 * t10013;
t9357 = -t9873 + t10043;
t9825 = t9751 * t9850 + pkin(3) * (pkin(2) * t9751 + t9688) - t9899;
t9411 = t9825 * t9732;
t9499 = t9751 * t9963;
t9423 = t9499 + t9906;
t10007 = t10338 * t9751;
t9444 = t9685 * t10007 + t9665;
t10168 = t9726 * t9751;
t9620 = pkin(2) * t10168 + t10014;
t9675 = pkin(9) * t10168;
t9656 = 0.2e1 * t9675 + pkin(2);
t9972 = t9656 * t10156;
t9175 = 0.1e1 / (t9339 + (t9357 * t9732 + t9728 * (pkin(3) * t9972 + t9423 * t9758)) * t9757 + t9411 + (t9620 * t10156 + t9444 * t10165) * t10314);
t10080 = t9751 * t9752;
t10124 = t9732 * t9758;
t9533 = t9731 * t10124 - t10161;
t9447 = -t9732 * t10080 + t9533 * t9757;
t9530 = t9728 * t10137 + t9684;
t10056 = t9758 * t9751;
t10076 = t9752 * t9757;
t9565 = t9731 * t10076 + t10056;
t9736 = legFrame(3,3);
t9692 = sin(t9736);
t9698 = cos(t9736);
t9629 = t9692 * g(1) - t9698 * g(2);
t9635 = t9698 * g(1) + t9692 * g(2);
t9243 = (t9447 * t9725 + t9729 * t9565) * t9635 + t9629 * (t9447 * t9729 - t9725 * t9565) - (-t9728 * t10080 + t9530 * t9757) * g(3);
t10262 = t9175 * t9243;
t10318 = pkin(3) * t9757;
t9799 = -0.2e1 * t9860 + t10077;
t10057 = t9758 * t9685;
t9681 = pkin(2) * t10156;
t9854 = t9718 * t10057 - t10057 + t9681;
t9819 = t9854 * t9751;
t9888 = t9752 * t10024;
t10017 = t9752 * t9688;
t9909 = 0.2e1 * t10017;
t9157 = 0.1e1 / (t10042 * t9722 + (-t9851 * t9751 + t9847) * t9757 + t10044 * t9751 + t9803 + (t9819 * t9688 + t9854 * t10318 + (t9799 * t9722 + (pkin(3) * t9909 + t9662 * t10137) * t9751 * t9757 + pkin(9) * (pkin(3) * t9947 - t9888)) * t9727) * t9728);
t10060 = t9757 * t9729;
t10061 = t9757 * t9725;
t10081 = t9751 * t9729;
t10082 = t9751 * t9725;
t9566 = -t9731 * t10080 + t9758 * t9757;
t9917 = t9732 * t10060;
t9918 = t9732 * t10061;
t9923 = t9732 * t10081;
t9924 = t9732 * t10082;
t9252 = ((-t9731 * t9924 + t10060) * t9752 + t9758 * (t9731 * t10081 + t9918)) * t9635 + ((-t9731 * t9923 - t10061) * t9752 + t9758 * (-t9731 * t10082 + t9917)) * t9629 - t9566 * t10307;
t10281 = t9157 * t9252;
t9524 = -t9725 * t9692 + t9729 * t9698;
t10058 = t9758 * t9524;
t9518 = t9729 * t9692 + t9725 * t9698;
t10079 = t9752 * t9518;
t9384 = -t9732 * t10079 + t10058;
t10059 = t9758 * t9518;
t10078 = t9752 * t9524;
t9806 = -t9518 * t10161 + (t9732 * t10059 + t10078) * t9731;
t9193 = (t9806 * pkin(3) - t9384 * t9688) * t9757 + t9751 * (t9384 * pkin(3) + t9806 * t9688);
t9583 = t9758 * pkin(3) + t9731 * t10017;
t10239 = t9583 * t9732;
t9490 = t9751 * t10322 - t10162;
t9657 = t9675 + pkin(2);
t10248 = (-t9490 * t9752 + t9657 * t9758) * t9732;
t9433 = t9490 * t9758 + t9752 * t9657;
t10302 = t9752 * pkin(3);
t9586 = t9879 - t10302;
t9220 = t9518 * t10248 + (t9518 * t10239 - t9524 * t9586) * t9757 + t9524 * t9433;
t10388 = -t10262 * t9220 + t9193 * t10281;
t9556 = t9729 * t10124 - t9725 * t9752;
t10128 = t9732 * t9752;
t9559 = t9729 * t10128 + t9725 * t9758;
t9240 = ((-t9732 * t10076 - t9751 * t9533) * t9725 + t9729 * t9566) * t9635 + t9629 * (-t9559 * t9757 + (-t9556 * t9731 + t9944) * t9751) + (t9728 * t10076 + t9530 * t9751) * g(3);
t10263 = t9175 * t9240;
t9254 = ((-t9731 * t9918 - t10081) * t9752 + t9758 * (t9731 * t10060 - t9924)) * t9635 - ((t9731 * t9917 - t10082) * t9752 + t9758 * (t9731 * t10061 + t9923)) * t9629 + t9565 * t10307;
t10280 = t9157 * t9254;
t10387 = -t10263 * t9220 + t9193 * t10280;
t9744 = sin(qJ(2,4));
t10157 = t9727 * t9744;
t9750 = cos(qJ(2,4));
t10169 = t9726 * t9750;
t10102 = t9744 * t9662;
t9749 = cos(qJ(3,4));
t9721 = t9749 ^ 2;
t10342 = 0.2e1 * t9721;
t10139 = t9731 * t9750;
t9948 = t9726 * t10139;
t9880 = pkin(9) * t9948;
t9861 = pkin(3) * t9880;
t9338 = (t9508 - (t9861 - t10102 / 0.2e1) * t10161) * t10342;
t9743 = sin(qJ(3,4));
t9874 = t9743 * t10013;
t9353 = -t9874 + t10043;
t9826 = t9743 * t9850 + pkin(3) * (pkin(2) * t9743 + t9688) - t9899;
t9410 = t9826 * t9732;
t9489 = t9743 * t9963;
t9422 = t9489 + t9906;
t10010 = t9743 * t10338;
t9440 = t9685 * t10010 + t9665;
t10172 = t9726 * t9743;
t9616 = pkin(2) * t10172 + t10014;
t9670 = pkin(9) * t10172;
t9654 = 0.2e1 * t9670 + pkin(2);
t9973 = t9654 * t10157;
t9174 = 0.1e1 / (t9338 + (t9353 * t9732 + t9728 * (pkin(3) * t9973 + t9422 * t9750)) * t9749 + t9410 + (t9616 * t10157 + t9440 * t10169) * t10314);
t10105 = t9743 * t9744;
t10129 = t9732 * t9750;
t9514 = t9731 * t10129 - t10161;
t9443 = -t9732 * t10105 + t9514 * t9749;
t9511 = t9728 * t10139 + t9684;
t10083 = t9750 * t9743;
t10101 = t9744 * t9749;
t9554 = t9731 * t10101 + t10083;
t9735 = legFrame(4,3);
t9691 = sin(t9735);
t9697 = cos(t9735);
t9628 = t9691 * g(1) - t9697 * g(2);
t9634 = t9697 * g(1) + t9691 * g(2);
t9235 = t9634 * (t9443 * t9725 + t9729 * t9554) + (t9443 * t9729 - t9725 * t9554) * t9628 - g(3) * (-t9728 * t10105 + t9511 * t9749);
t10264 = t9174 * t9235;
t10319 = pkin(3) * t9749;
t9800 = -0.2e1 * t9861 + t10102;
t10084 = t9750 * t9685;
t9674 = pkin(2) * t10157;
t9855 = t9718 * t10084 - t10084 + t9674;
t9820 = t9855 * t9743;
t9889 = t9744 * t10024;
t10018 = t9744 * t9688;
t9910 = 0.2e1 * t10018;
t9156 = 0.1e1 / (t10042 * t9721 + (-t9851 * t9743 + t9847) * t9749 + t10044 * t9743 + t9803 + (t9820 * t9688 + t9855 * t10319 + (t9800 * t9721 + (pkin(3) * t9910 + t9662 * t10139) * t9743 * t9749 + (pkin(3) * t9948 - t9889) * pkin(9)) * t9727) * t9728);
t10087 = t9749 * t9729;
t10088 = t9749 * t9725;
t10106 = t9743 * t9729;
t10107 = t9743 * t9725;
t9555 = -t9731 * t10105 + t9750 * t9749;
t9925 = t9732 * t10087;
t9926 = t9732 * t10088;
t9931 = t9732 * t10106;
t9932 = t9732 * t10107;
t9247 = ((-t9731 * t9932 + t10087) * t9744 + t9750 * (t9731 * t10106 + t9926)) * t9634 + ((-t9731 * t9931 - t10088) * t9744 + t9750 * (-t9731 * t10107 + t9925)) * t9628 - t9555 * t10307;
t10285 = t9156 * t9247;
t9523 = -t9725 * t9691 + t9729 * t9697;
t10085 = t9750 * t9523;
t9517 = t9729 * t9691 + t9725 * t9697;
t10104 = t9744 * t9517;
t9364 = -t9732 * t10104 + t10085;
t10086 = t9750 * t9517;
t10103 = t9744 * t9523;
t9807 = -t9517 * t10161 + (t9732 * t10086 + t10103) * t9731;
t9187 = (t9807 * pkin(3) - t9364 * t9688) * t9749 + t9743 * (t9364 * pkin(3) + t9807 * t9688);
t9573 = t9750 * pkin(3) + t9731 * t10018;
t10243 = t9573 * t9732;
t9485 = t9743 * t10322 - t10162;
t9655 = t9670 + pkin(2);
t10249 = (-t9485 * t9744 + t9655 * t9750) * t9732;
t9431 = t9485 * t9750 + t9744 * t9655;
t10303 = t9744 * pkin(3);
t9576 = t9880 - t10303;
t9212 = t9517 * t10249 + (t9517 * t10243 - t9523 * t9576) * t9749 + t9523 * t9431;
t10386 = -t10264 * t9212 + t9187 * t10285;
t9538 = t9729 * t10129 - t9725 * t9744;
t10132 = t9732 * t9744;
t9541 = t9729 * t10132 + t9725 * t9750;
t9234 = ((-t9732 * t10101 - t9743 * t9514) * t9725 + t9729 * t9555) * t9634 + t9628 * (-t9541 * t9749 + (-t9538 * t9731 + t9944) * t9743) + (t9728 * t10101 + t9511 * t9743) * g(3);
t10265 = t9174 * t9234;
t9249 = ((-t9731 * t9926 - t10106) * t9744 + t9750 * (t9731 * t10087 - t9932)) * t9634 - t9628 * ((t9731 * t9925 - t10107) * t9744 + t9750 * (t9731 * t10088 + t9931)) + t9554 * t10307;
t10284 = t9156 * t9249;
t10385 = -t10265 * t9212 + t9187 * t10284;
t9742 = sin(qJ(2,5));
t10158 = t9727 * t9742;
t9748 = cos(qJ(2,5));
t10170 = t9726 * t9748;
t10109 = t9742 * t9662;
t9747 = cos(qJ(3,5));
t9720 = t9747 ^ 2;
t10343 = 0.2e1 * t9720;
t10140 = t9731 * t9748;
t9949 = t9726 * t10140;
t9881 = pkin(9) * t9949;
t9862 = pkin(3) * t9881;
t9337 = (t9508 - (t9862 - t10109 / 0.2e1) * t10161) * t10343;
t9741 = sin(qJ(3,5));
t9875 = t9741 * t10013;
t9352 = -t9875 + t10043;
t9827 = t9741 * t9850 + pkin(3) * (pkin(2) * t9741 + t9688) - t9899;
t9409 = t9827 * t9732;
t9488 = t9741 * t9963;
t9421 = t9488 + t9906;
t10008 = t10338 * t9741;
t9439 = t9685 * t10008 + t9665;
t10173 = t9726 * t9741;
t9615 = pkin(2) * t10173 + t10014;
t9668 = pkin(9) * t10173;
t9652 = 0.2e1 * t9668 + pkin(2);
t9974 = t9652 * t10158;
t9173 = 0.1e1 / (t9337 + (t9352 * t9732 + t9728 * (pkin(3) * t9974 + t9421 * t9748)) * t9747 + t9409 + (t9615 * t10158 + t9439 * t10170) * t10314);
t10112 = t9741 * t9742;
t10130 = t9732 * t9748;
t9513 = t9731 * t10130 - t10161;
t9442 = -t9732 * t10112 + t9513 * t9747;
t9510 = t9728 * t10140 + t9684;
t10089 = t9748 * t9741;
t10108 = t9742 * t9747;
t9552 = t9731 * t10108 + t10089;
t9734 = legFrame(5,3);
t9690 = sin(t9734);
t9696 = cos(t9734);
t9627 = t9690 * g(1) - t9696 * g(2);
t9633 = t9696 * g(1) + t9690 * g(2);
t9237 = (t9442 * t9725 + t9729 * t9552) * t9633 + (t9442 * t9729 - t9725 * t9552) * t9627 - (-t9728 * t10112 + t9510 * t9747) * g(3);
t10266 = t9173 * t9237;
t10320 = pkin(3) * t9747;
t9801 = -0.2e1 * t9862 + t10109;
t10090 = t9748 * t9685;
t9673 = pkin(2) * t10158;
t9856 = t9718 * t10090 - t10090 + t9673;
t9821 = t9856 * t9741;
t9890 = t9742 * t10024;
t10019 = t9742 * t9688;
t9911 = 0.2e1 * t10019;
t9155 = 0.1e1 / (t10042 * t9720 + (-t9851 * t9741 + t9847) * t9747 + t10044 * t9741 + t9803 + (t9821 * t9688 + t9856 * t10320 + (t9801 * t9720 + (pkin(3) * t9911 + t9662 * t10140) * t9741 * t9747 + pkin(9) * (pkin(3) * t9949 - t9890)) * t9727) * t9728);
t10093 = t9747 * t9729;
t10094 = t9747 * t9725;
t10113 = t9741 * t9729;
t10114 = t9741 * t9725;
t9553 = -t9731 * t10112 + t9748 * t9747;
t9927 = t9732 * t10093;
t9928 = t9732 * t10094;
t9933 = t9732 * t10113;
t9934 = t9732 * t10114;
t9245 = t9633 * ((-t9731 * t9934 + t10093) * t9742 + t9748 * (t9731 * t10113 + t9928)) + t9627 * ((-t9731 * t9933 - t10094) * t9742 + t9748 * (-t9731 * t10114 + t9927)) - t9553 * t10307;
t10289 = t9155 * t9245;
t9522 = -t9725 * t9690 + t9729 * t9696;
t10091 = t9748 * t9522;
t9516 = t9729 * t9690 + t9725 * t9696;
t10111 = t9742 * t9516;
t9362 = -t9732 * t10111 + t10091;
t10092 = t9748 * t9516;
t10110 = t9742 * t9522;
t9808 = -t9516 * t10161 + (t9732 * t10092 + t10110) * t9731;
t9184 = (t9808 * pkin(3) - t9362 * t9688) * t9747 + t9741 * (t9362 * pkin(3) + t9808 * t9688);
t9572 = t9748 * pkin(3) + t9731 * t10019;
t10244 = t9572 * t9732;
t9484 = t9741 * t10322 - t10162;
t9653 = t9668 + pkin(2);
t10250 = (-t9484 * t9742 + t9653 * t9748) * t9732;
t9429 = t9484 * t9748 + t9742 * t9653;
t10304 = t9742 * pkin(3);
t9575 = t9881 - t10304;
t9210 = t9516 * t10250 + (t9516 * t10244 - t9522 * t9575) * t9747 + t9522 * t9429;
t10384 = -t10266 * t9210 + t9184 * t10289;
t9537 = t9729 * t10130 - t9725 * t9742;
t10133 = t9732 * t9742;
t9540 = t9729 * t10133 + t9725 * t9748;
t9233 = ((-t9732 * t10108 - t9741 * t9513) * t9725 + t9729 * t9553) * t9633 + t9627 * (-t9540 * t9747 + (-t9537 * t9731 + t9944) * t9741) + (t9728 * t10108 + t9510 * t9741) * g(3);
t10267 = t9173 * t9233;
t9246 = t9633 * ((-t9731 * t9928 - t10113) * t9742 + t9748 * (t9731 * t10093 - t9934)) - ((t9731 * t9927 - t10114) * t9742 + t9748 * (t9731 * t10094 + t9933)) * t9627 + t9552 * t10307;
t10288 = t9155 * t9246;
t10383 = -t10267 * t9210 + t9184 * t10288;
t9740 = sin(qJ(2,6));
t10159 = t9727 * t9740;
t9746 = cos(qJ(2,6));
t10171 = t9726 * t9746;
t10116 = t9740 * t9662;
t9745 = cos(qJ(3,6));
t9719 = t9745 ^ 2;
t10344 = 0.2e1 * t9719;
t10141 = t9731 * t9746;
t9950 = t9726 * t10141;
t9882 = pkin(9) * t9950;
t9863 = pkin(3) * t9882;
t9336 = (t9508 - (t9863 - t10116 / 0.2e1) * t10161) * t10344;
t9739 = sin(qJ(3,6));
t9876 = t9739 * t10013;
t9351 = -t9876 + t10043;
t9828 = t9739 * t9850 + pkin(3) * (pkin(2) * t9739 + t9688) - t9899;
t9408 = t9828 * t9732;
t9487 = t9739 * t9963;
t9420 = t9487 + t9906;
t10011 = t9739 * t10338;
t9438 = t9685 * t10011 + t9665;
t10174 = t9726 * t9739;
t9614 = pkin(2) * t10174 + t10014;
t9666 = pkin(9) * t10174;
t9650 = 0.2e1 * t9666 + pkin(2);
t9975 = t9650 * t10159;
t9172 = 0.1e1 / (t9336 + (t9351 * t9732 + t9728 * (pkin(3) * t9975 + t9420 * t9746)) * t9745 + t9408 + (t9614 * t10159 + t9438 * t10171) * t10314);
t10119 = t9739 * t9740;
t10131 = t9732 * t9746;
t9512 = t9731 * t10131 - t10161;
t9441 = -t9732 * t10119 + t9512 * t9745;
t9509 = t9728 * t10141 + t9684;
t10095 = t9746 * t9739;
t10115 = t9740 * t9745;
t9550 = t9731 * t10115 + t10095;
t9733 = legFrame(6,3);
t9689 = sin(t9733);
t9695 = cos(t9733);
t9626 = t9689 * g(1) - t9695 * g(2);
t9632 = t9695 * g(1) + t9689 * g(2);
t9236 = (t9441 * t9725 + t9729 * t9550) * t9632 + t9626 * (t9441 * t9729 - t9725 * t9550) - (-t9728 * t10119 + t9509 * t9745) * g(3);
t10268 = t9172 * t9236;
t10321 = pkin(3) * t9745;
t9802 = -0.2e1 * t9863 + t10116;
t10096 = t9746 * t9685;
t9672 = pkin(2) * t10159;
t9857 = t9718 * t10096 - t10096 + t9672;
t9822 = t9857 * t9739;
t9891 = t9740 * t10024;
t10020 = t9740 * t9688;
t9912 = 0.2e1 * t10020;
t9154 = 0.1e1 / (t10042 * t9719 + (-t9851 * t9739 + t9847) * t9745 + t10044 * t9739 + t9803 + (t9822 * t9688 + t9857 * t10321 + (t9802 * t9719 + (pkin(3) * t9912 + t9662 * t10141) * t9739 * t9745 + pkin(9) * (pkin(3) * t9950 - t9891)) * t9727) * t9728);
t10099 = t9745 * t9729;
t10100 = t9745 * t9725;
t10120 = t9739 * t9729;
t10121 = t9739 * t9725;
t9551 = -t9731 * t10119 + t9746 * t9745;
t9929 = t9732 * t10099;
t9930 = t9732 * t10100;
t9935 = t9732 * t10120;
t9936 = t9732 * t10121;
t9244 = t9632 * ((-t9731 * t9936 + t10099) * t9740 + t9746 * (t9731 * t10120 + t9930)) + t9626 * ((-t9731 * t9935 - t10100) * t9740 + t9746 * (-t9731 * t10121 + t9929)) - t9551 * t10307;
t10293 = t9154 * t9244;
t9521 = -t9725 * t9689 + t9729 * t9695;
t10097 = t9746 * t9521;
t9515 = t9729 * t9689 + t9725 * t9695;
t10118 = t9740 * t9515;
t9360 = -t9732 * t10118 + t10097;
t10098 = t9746 * t9515;
t10117 = t9740 * t9521;
t9809 = -t9515 * t10161 + (t9732 * t10098 + t10117) * t9731;
t9181 = (t9809 * pkin(3) - t9360 * t9688) * t9745 + t9739 * (t9360 * pkin(3) + t9809 * t9688);
t9571 = t9746 * pkin(3) + t9731 * t10020;
t10245 = t9571 * t9732;
t9483 = t9739 * t10322 - t10162;
t9651 = t9666 + pkin(2);
t10251 = (-t9483 * t9740 + t9651 * t9746) * t9732;
t9427 = t9483 * t9746 + t9740 * t9651;
t10305 = t9740 * pkin(3);
t9574 = t9882 - t10305;
t9208 = t9515 * t10251 + (t9515 * t10245 - t9521 * t9574) * t9745 + t9521 * t9427;
t10382 = -t10268 * t9208 + t9181 * t10293;
t9536 = t9729 * t10131 - t9725 * t9740;
t10134 = t9732 * t9740;
t9539 = t9729 * t10134 + t9725 * t9746;
t9232 = t9632 * ((-t9732 * t10115 - t9739 * t9512) * t9725 + t9729 * t9551) + t9626 * (-t9539 * t9745 + (-t9536 * t9731 + t9944) * t9739) + (t9728 * t10115 + t9509 * t9739) * g(3);
t10269 = t9172 * t9232;
t9248 = ((-t9731 * t9930 - t10120) * t9740 + t9746 * (t9731 * t10099 - t9936)) * t9632 - t9626 * ((t9731 * t9929 - t10121) * t9740 + t9746 * (t9731 * t10100 + t9935)) + t9550 * t10307;
t10292 = t9154 * t9248;
t10381 = -t10269 * t9208 + t9181 * t10292;
t9230 = t9526 * t10246 + (t9526 * t10237 + t9520 * t9588) * t9761 - t9520 * t9437;
t9389 = t9732 * t10064 + t10048;
t9395 = t9732 * t10047 - t10065;
t10022 = t9728 * t9688;
t9885 = t9727 * t10022;
t9461 = t9526 * t9885;
t9893 = t9755 * (-t9389 * pkin(3) + t9395 * t10021 - t9461) + (t9389 * t9688 + (-t9526 * t10161 + t9395 * t9731) * pkin(3)) * t9761;
t10380 = t10258 * t9230 - t10273 * t9893;
t10379 = t10259 * t9230 - t10272 * t9893;
t9228 = t9525 * t10247 + (t9525 * t10238 + t9519 * t9587) * t9759 - t9519 * t9435;
t9387 = t9732 * t10070 + t10053;
t9393 = t9732 * t10052 - t10071;
t9460 = t9525 * t9885;
t9894 = t9753 * (-t9387 * pkin(3) + t9393 * t10021 - t9460) + (t9387 * t9688 + (-t9525 * t10161 + t9393 * t9731) * pkin(3)) * t9759;
t10378 = t10260 * t9228 - t10277 * t9894;
t10377 = t10261 * t9228 - t10276 * t9894;
t9226 = t9524 * t10248 + (t9524 * t10239 + t9518 * t9586) * t9757 - t9518 * t9433;
t9385 = t9732 * t10078 + t10059;
t9391 = t9732 * t10058 - t10079;
t9459 = t9524 * t9885;
t9895 = t9751 * (-t9385 * pkin(3) + t9391 * t10021 - t9459) + (t9385 * t9688 + (-t9524 * t10161 + t9391 * t9731) * pkin(3)) * t9757;
t10376 = t10262 * t9226 - t10281 * t9895;
t10375 = t10263 * t9226 - t10280 * t9895;
t9218 = t9523 * t10249 + (t9523 * t10243 + t9517 * t9576) * t9749 - t9517 * t9431;
t9365 = t9732 * t10103 + t10086;
t9371 = t9732 * t10085 - t10104;
t9458 = t9523 * t9885;
t9896 = t9743 * (-t9365 * pkin(3) + t9371 * t10021 - t9458) + (t9365 * t9688 + (-t9523 * t10161 + t9371 * t9731) * pkin(3)) * t9749;
t10374 = t10264 * t9218 - t10285 * t9896;
t10373 = t10265 * t9218 - t10284 * t9896;
t9216 = t9522 * t10250 + (t9522 * t10244 + t9516 * t9575) * t9747 - t9516 * t9429;
t9363 = t9732 * t10110 + t10092;
t9369 = t9732 * t10091 - t10111;
t9457 = t9522 * t9885;
t9897 = t9741 * (-t9363 * pkin(3) + t9369 * t10021 - t9457) + (t9363 * t9688 + (-t9522 * t10161 + t9369 * t9731) * pkin(3)) * t9747;
t10372 = t10266 * t9216 - t10289 * t9897;
t10371 = t10267 * t9216 - t10288 * t9897;
t9214 = t9521 * t10251 + (t9521 * t10245 + t9515 * t9574) * t9745 - t9515 * t9427;
t9361 = t9732 * t10117 + t10098;
t9367 = t9732 * t10097 - t10118;
t9456 = t9521 * t9885;
t9898 = t9739 * (-t9361 * pkin(3) + t9367 * t10021 - t9456) + (t9361 * t9688 + (-t9521 * t10161 + t9367 * t9731) * pkin(3)) * t9745;
t10370 = t10268 * t9214 - t10293 * t9898;
t10369 = t10269 * t9214 - t10292 * t9898;
t10040 = 0.2e1 * t10214;
t10368 = t9728 * (t9724 * t10040 - t10338);
t10367 = t9728 * (t9723 * t10040 - t10338);
t10366 = t9728 * (t9722 * t10040 - t10338);
t10365 = t9728 * (t9721 * t10040 - t10338);
t10364 = t9728 * (t9720 * t10040 - t10338);
t10363 = t9728 * (t9719 * t10040 - t10338);
t10350 = t10160 * (t10339 - 0.1e1);
t10349 = t10160 * (t10340 - 0.1e1);
t10348 = t10160 * (t10341 - 0.1e1);
t10347 = t10160 * (t10342 - 0.1e1);
t10346 = t10160 * (t10343 - 0.1e1);
t10345 = t10160 * (t10344 - 0.1e1);
t10331 = pkin(2) * t9728;
t10330 = pkin(3) * t9650;
t10329 = pkin(3) * t9652;
t10328 = pkin(3) * t9654;
t10327 = pkin(3) * t9656;
t10326 = pkin(3) * t9658;
t10325 = pkin(3) * t9660;
t10323 = pkin(3) * t9728;
t10315 = pkin(9) * t9727;
t10150 = t9728 * t9746;
t10153 = t9728 * t9740;
t10220 = t9685 * t9739;
t9646 = t9685 * t10306;
t10012 = t9685 * t10338;
t9870 = t9746 * t10012;
t9892 = t9685 * t10022;
t9942 = t9728 * t10095;
t10313 = g(3) / (t9336 + ((t9662 * t9942 + t9646) * t10160 + (t9870 + t9975) * t10323 + (-t9876 - t9687) * t9732) * t9745 + ((pkin(3) * t10150 + t9732 * t10220) * t10175 + t9614 * t10153) * t10315 + (t9685 * t9942 - t10306) * t10023 + (-t9746 * t9892 + t9686) * t9739 + t9663);
t10149 = t9728 * t9748;
t10152 = t9728 * t9742;
t10219 = t9685 * t9741;
t9869 = t9748 * t10012;
t9941 = t9728 * t10089;
t10312 = g(3) / (t9337 + ((t9662 * t9941 + t9646) * t10160 + (t9869 + t9974) * t10323 + (-t9875 - t9687) * t9732) * t9747 + ((pkin(3) * t10149 + t9732 * t10219) * t10175 + t9615 * t10152) * t10315 + (t9685 * t9941 - t10306) * t10023 + (-t9748 * t9892 + t9686) * t9741 + t9663);
t10148 = t9728 * t9750;
t10151 = t9728 * t9744;
t10218 = t9685 * t9743;
t9868 = t9750 * t10012;
t9940 = t9728 * t10083;
t10311 = g(3) / (t9338 + ((t9662 * t9940 + t9646) * t10160 + (t9868 + t9973) * t10323 + (-t9874 - t9687) * t9732) * t9749 + ((pkin(3) * t10148 + t9732 * t10218) * t10175 + t9616 * t10151) * t10315 + (t9685 * t9940 - t10306) * t10023 + (-t9750 * t9892 + t9686) * t9743 + t9663);
t10144 = t9728 * t9758;
t10147 = t9728 * t9752;
t10217 = t9685 * t9751;
t9867 = t9758 * t10012;
t9939 = t9728 * t10056;
t10310 = g(3) / (t9339 + ((t9662 * t9939 + t9646) * t10160 + (t9867 + t9972) * t10323 + (-t9873 - t9687) * t9732) * t9757 + ((pkin(3) * t10144 + t9732 * t10217) * t10175 + t9620 * t10147) * t10315 + (t9685 * t9939 - t10306) * t10023 + (-t9758 * t9892 + t9686) * t9751 + t9663);
t10143 = t9728 * t9760;
t10146 = t9728 * t9754;
t10216 = t9685 * t9753;
t9866 = t9760 * t10012;
t9938 = t9728 * t10072;
t10309 = g(3) / (t9340 + ((t9662 * t9938 + t9646) * t10160 + (t9866 + t9971) * t10323 + (-t9872 - t9687) * t9732) * t9759 + ((pkin(3) * t10143 + t9732 * t10216) * t10175 + t9621 * t10146) * t10315 + (t9685 * t9938 - t10306) * t10023 + (-t9760 * t9892 + t9686) * t9753 + t9663);
t10142 = t9728 * t9762;
t10145 = t9728 * t9756;
t9865 = t9762 * t10012;
t9937 = t9728 * t10045;
t10308 = g(3) / (t9341 + ((t9662 * t9937 + t9646) * t10160 + (t9865 + t9970) * t10323 + (-t9871 - t9687) * t9732) * t9761 + ((pkin(3) * t10142 + t9685 * t10126) * t10175 + t9622 * t10145) * t10315 + (t9685 * t9937 - t10306) * t10023 + (-t9762 * t9892 + t9686) * t9755 + t9663);
t9765 = xP(4);
t9716 = cos(t9765);
t9778 = koppelP(6,1);
t10181 = t9716 * t9778;
t9772 = koppelP(6,2);
t10187 = t9716 * t9772;
t9764 = xP(5);
t9715 = cos(t9764);
t9766 = koppelP(6,3);
t10195 = t9715 * t9766;
t9713 = sin(t9765);
t10203 = t9713 * t9778;
t10209 = t9713 * t9772;
t9763 = xP(6);
t9711 = sin(t9763);
t9712 = sin(t9764);
t9714 = cos(t9763);
t9324 = -t9713 * t10195 + (t9712 * t10203 + t10187) * t9714 + t9711 * (-t9712 * t10209 + t10181);
t9601 = -t9711 * t9772 + t9714 * t9778;
t9462 = t9601 * t9715 + t9712 * t9766;
t9280 = t9324 * t9729 - t9725 * t9462;
t9286 = t9725 * t9324 + t9462 * t9729;
t9414 = pkin(9) * t9614 + t9650 * t10321 + t9662 * t9719;
t9348 = t9414 * t10159;
t9450 = t9745 * t10021 - t9483;
t9849 = 0.2e1 * t9864;
t9496 = t9719 * t9849;
t9848 = -0.2e1 * pkin(3) * t9884;
t9595 = t9719 * t9848;
t9617 = t9651 + t10321;
t10299 = ((t9450 * t9740 + t9746 * t9617) * (t9280 * t9695 - t9689 * t9286) * t9732 - (t9280 * t9689 + t9286 * t9695) * (-t9450 * t9746 + t9740 * t9617)) / ((t9351 * t9745 + t9496 + t9828) * t9732 + ((t9420 * t9745 + t9438 * t9688 + t9595) * t9746 + t9348) * t9728);
t9779 = koppelP(5,1);
t10180 = t9716 * t9779;
t9773 = koppelP(5,2);
t10186 = t9716 * t9773;
t9767 = koppelP(5,3);
t10194 = t9715 * t9767;
t10202 = t9713 * t9779;
t10208 = t9713 * t9773;
t9325 = -t9713 * t10194 + (t9712 * t10202 + t10186) * t9714 + t9711 * (-t9712 * t10208 + t10180);
t9602 = -t9711 * t9773 + t9714 * t9779;
t9463 = t9602 * t9715 + t9712 * t9767;
t9281 = t9325 * t9729 - t9725 * t9463;
t9287 = t9725 * t9325 + t9463 * t9729;
t9415 = pkin(9) * t9615 + t9652 * t10320 + t9662 * t9720;
t9349 = t9415 * t10158;
t9451 = t9747 * t10021 - t9484;
t9497 = t9720 * t9849;
t9596 = t9720 * t9848;
t9618 = t9653 + t10320;
t10298 = ((t9742 * t9451 + t9748 * t9618) * (t9281 * t9696 - t9690 * t9287) * t9732 - (-t9451 * t9748 + t9742 * t9618) * (t9281 * t9690 + t9287 * t9696)) / ((t9352 * t9747 + t9497 + t9827) * t9732 + ((t9421 * t9747 + t9439 * t9688 + t9596) * t9748 + t9349) * t9728);
t9780 = koppelP(4,1);
t10179 = t9716 * t9780;
t9774 = koppelP(4,2);
t10185 = t9716 * t9774;
t9768 = koppelP(4,3);
t10193 = t9715 * t9768;
t10201 = t9713 * t9780;
t10207 = t9713 * t9774;
t9326 = -t9713 * t10193 + (t9712 * t10201 + t10185) * t9714 + t9711 * (-t9712 * t10207 + t10179);
t9603 = -t9711 * t9774 + t9714 * t9780;
t9464 = t9603 * t9715 + t9712 * t9768;
t9282 = t9326 * t9729 - t9725 * t9464;
t9288 = t9725 * t9326 + t9464 * t9729;
t9416 = pkin(9) * t9616 + t9654 * t10319 + t9662 * t9721;
t9350 = t9416 * t10157;
t9452 = t9749 * t10021 - t9485;
t9498 = t9721 * t9849;
t9597 = t9721 * t9848;
t9619 = t9655 + t10319;
t10297 = ((t9744 * t9452 + t9750 * t9619) * (t9282 * t9697 - t9288 * t9691) * t9732 - (-t9452 * t9750 + t9744 * t9619) * (t9282 * t9691 + t9288 * t9697)) / ((t9353 * t9749 + t9498 + t9826) * t9732 + ((t9422 * t9749 + t9440 * t9688 + t9597) * t9750 + t9350) * t9728);
t9781 = koppelP(3,1);
t10178 = t9716 * t9781;
t9775 = koppelP(3,2);
t10184 = t9716 * t9775;
t9769 = koppelP(3,3);
t10192 = t9715 * t9769;
t10200 = t9713 * t9781;
t10206 = t9713 * t9775;
t9327 = -t9713 * t10192 + (t9712 * t10200 + t10184) * t9714 + t9711 * (-t9712 * t10206 + t10178);
t9604 = -t9711 * t9775 + t9714 * t9781;
t9465 = t9604 * t9715 + t9712 * t9769;
t9283 = t9327 * t9729 - t9465 * t9725;
t9289 = t9327 * t9725 + t9465 * t9729;
t9417 = pkin(9) * t9620 + t9656 * t10318 + t9662 * t9722;
t9354 = t9417 * t10156;
t9453 = t9757 * t10021 - t9490;
t9502 = t9722 * t9849;
t9598 = t9722 * t9848;
t9623 = t9657 + t10318;
t10296 = ((t9453 * t9752 + t9758 * t9623) * (t9283 * t9698 - t9289 * t9692) * t9732 - (t9692 * t9283 + t9289 * t9698) * (-t9453 * t9758 + t9752 * t9623)) / ((t9357 * t9757 + t9502 + t9825) * t9732 + ((t9423 * t9757 + t9444 * t9688 + t9598) * t9758 + t9354) * t9728);
t9782 = koppelP(2,1);
t10177 = t9716 * t9782;
t9776 = koppelP(2,2);
t10183 = t9716 * t9776;
t9770 = koppelP(2,3);
t10191 = t9715 * t9770;
t10199 = t9713 * t9782;
t10205 = t9713 * t9776;
t9328 = -t9713 * t10191 + (t9712 * t10199 + t10183) * t9714 + t9711 * (-t9712 * t10205 + t10177);
t9605 = -t9711 * t9776 + t9714 * t9782;
t9466 = t9605 * t9715 + t9712 * t9770;
t9284 = t9328 * t9729 - t9725 * t9466;
t9290 = t9725 * t9328 + t9466 * t9729;
t9418 = pkin(9) * t9621 + t9658 * t10317 + t9662 * t9723;
t9355 = t9418 * t10155;
t9454 = t9759 * t10021 - t9491;
t9503 = t9723 * t9849;
t9599 = t9723 * t9848;
t9624 = t9659 + t10317;
t10295 = ((t9454 * t9754 + t9760 * t9624) * (t9284 * t9699 - t9290 * t9693) * t9732 - (-t9454 * t9760 + t9754 * t9624) * (t9284 * t9693 + t9290 * t9699)) / ((t9358 * t9759 + t9503 + t9824) * t9732 + ((t9424 * t9759 + t9445 * t9688 + t9599) * t9760 + t9355) * t9728);
t9783 = koppelP(1,1);
t10176 = t9716 * t9783;
t9777 = koppelP(1,2);
t10182 = t9716 * t9777;
t9771 = koppelP(1,3);
t10190 = t9715 * t9771;
t10198 = t9713 * t9783;
t10204 = t9713 * t9777;
t9329 = -t9713 * t10190 + (t9712 * t10198 + t10182) * t9714 + t9711 * (-t9712 * t10204 + t10176);
t9606 = -t9711 * t9777 + t9714 * t9783;
t9467 = t9606 * t9715 + t9712 * t9771;
t9285 = t9329 * t9729 - t9725 * t9467;
t9291 = t9725 * t9329 + t9467 * t9729;
t9419 = pkin(9) * t9622 + t9660 * t10316 + t9662 * t9724;
t9356 = t9419 * t10154;
t9455 = t9761 * t10021 - t9492;
t9504 = t9724 * t9849;
t9600 = t9724 * t9848;
t9625 = t9661 + t10316;
t10294 = ((t9285 * t9700 - t9291 * t9694) * (t9756 * t9455 + t9762 * t9625) * t9732 - (-t9455 * t9762 + t9756 * t9625) * (t9285 * t9694 + t9291 * t9700)) / ((t9359 * t9761 + t9504 + t9823) * t9732 + ((t9425 * t9761 + t9446 * t9688 + t9600) * t9762 + t9356) * t9728);
t9527 = t9725 * t10131 + t9729 * t9740;
t9310 = -g(3) * t10150 + t9632 * t9527 + t9626 * t9536;
t10291 = t9154 * t9310;
t9542 = -t9725 * t10134 + t9729 * t9746;
t9311 = g(3) * t10153 - t9626 * t9539 + t9632 * t9542;
t10290 = t9154 * t9311;
t9528 = t9725 * t10130 + t9729 * t9742;
t9312 = -g(3) * t10149 + t9633 * t9528 + t9627 * t9537;
t10287 = t9155 * t9312;
t9543 = -t9725 * t10133 + t9729 * t9748;
t9313 = g(3) * t10152 - t9627 * t9540 + t9633 * t9543;
t10286 = t9155 * t9313;
t9529 = t9725 * t10129 + t9729 * t9744;
t9314 = -g(3) * t10148 + t9634 * t9529 + t9628 * t9538;
t10283 = t9156 * t9314;
t9544 = -t9725 * t10132 + t9729 * t9750;
t9315 = g(3) * t10151 - t9628 * t9541 + t9634 * t9544;
t10282 = t9156 * t9315;
t9547 = t9725 * t10124 + t9729 * t9752;
t9316 = -g(3) * t10144 + t9635 * t9547 + t9629 * t9556;
t10279 = t9157 * t9316;
t9562 = -t9725 * t10128 + t9729 * t9758;
t9317 = g(3) * t10147 - t9629 * t9559 + t9635 * t9562;
t10278 = t9157 * t9317;
t9548 = t9725 * t10123 + t9729 * t9754;
t9318 = -g(3) * t10143 + t9636 * t9548 + t9630 * t9557;
t10275 = t9158 * t9318;
t9563 = -t9725 * t10127 + t9729 * t9760;
t9319 = g(3) * t10146 - t9630 * t9560 + t9636 * t9563;
t10274 = t9158 * t9319;
t9549 = t9725 * t10122 + t9729 * t9756;
t9320 = -g(3) * t10142 + t9637 * t9549 + t9631 * t9558;
t10271 = t9159 * t9320;
t9564 = -t9725 * t10125 + t9729 * t9762;
t9321 = g(3) * t10145 - t9631 * t9561 + t9637 * t9564;
t10270 = t9159 * t9321;
t9546 = t9685 * t10032;
t9956 = t9739 * t10214;
t9292 = t9595 + (t9487 + t9546) * t9745 + (t9685 * t9956 + t9665) * t9688;
t9256 = t9292 * t9746 + t9348;
t9475 = pkin(2) * pkin(3) + t9850;
t9274 = t9496 + (-t9662 * t9956 + t10043) * t9745 + t9475 * t9739 - t9864;
t9202 = 0.1e1 / (t9728 * t9256 + t9274 * t9732);
t10257 = t9202 * ((t9712 * t10181 - t10209) * t9714 + (-t9712 * t10187 - t10203) * t9711 - t9716 * t10195);
t9955 = t9741 * t10214;
t9293 = t9596 + (t9488 + t9546) * t9747 + (t9685 * t9955 + t9665) * t9688;
t9257 = t9293 * t9748 + t9349;
t9275 = t9497 + (-t9662 * t9955 + t10043) * t9747 + t9475 * t9741 - t9864;
t9203 = 0.1e1 / (t9728 * t9257 + t9275 * t9732);
t10256 = t9203 * ((t9712 * t10180 - t10208) * t9714 + (-t9712 * t10186 - t10202) * t9711 - t9716 * t10194);
t9954 = t9743 * t10214;
t9294 = t9597 + (t9489 + t9546) * t9749 + (t9685 * t9954 + t9665) * t9688;
t9258 = t9294 * t9750 + t9350;
t9276 = t9498 + (-t9662 * t9954 + t10043) * t9749 + t9475 * t9743 - t9864;
t9204 = 0.1e1 / (t9728 * t9258 + t9276 * t9732);
t10255 = t9204 * ((t9712 * t10179 - t10207) * t9714 + (-t9712 * t10185 - t10201) * t9711 - t9716 * t10193);
t9953 = t9751 * t10214;
t9295 = t9598 + (t9499 + t9546) * t9757 + (t9685 * t9953 + t9665) * t9688;
t9259 = t9295 * t9758 + t9354;
t9277 = t9502 + (-t9662 * t9953 + t10043) * t9757 + t9475 * t9751 - t9864;
t9205 = 0.1e1 / (t9728 * t9259 + t9277 * t9732);
t10254 = t9205 * ((t9712 * t10178 - t10206) * t9714 + (-t9712 * t10184 - t10200) * t9711 - t9716 * t10192);
t9952 = t9753 * t10214;
t9296 = t9599 + (t9500 + t9546) * t9759 + (t9685 * t9952 + t9665) * t9688;
t9260 = t9296 * t9760 + t9355;
t9278 = t9503 + (-t9662 * t9952 + t10043) * t9759 + t9475 * t9753 - t9864;
t9206 = 0.1e1 / (t9728 * t9260 + t9278 * t9732);
t10253 = t9206 * ((t9712 * t10177 - t10205) * t9714 + (-t9712 * t10183 - t10199) * t9711 - t9716 * t10191);
t9951 = t9755 * t10214;
t9297 = t9600 + (t9501 + t9546) * t9761 + (t9685 * t9951 + t9665) * t9688;
t9261 = t9297 * t9762 + t9356;
t9279 = t9504 + (-t9662 * t9951 + t10043) * t9761 + t9475 * t9755 - t9864;
t9207 = 0.1e1 / (t9728 * t9261 + t9279 * t9732);
t10252 = t9207 * ((t9712 * t10176 - t10204) * t9714 + (-t9712 * t10182 - t10198) * t9711 - t9716 * t10190);
t10242 = t9574 * t9732;
t10241 = t9575 * t9732;
t10240 = t9576 * t9732;
t10236 = t9586 * t9732;
t10235 = t9587 * t9732;
t10234 = t9588 * t9732;
t10233 = t9614 * t9727;
t10232 = t9615 * t9727;
t10231 = t9616 * t9727;
t10230 = t9620 * t9727;
t10229 = t9621 * t9727;
t10228 = t9622 * t9727;
t10227 = t9662 * t9727;
t10226 = t9662 * t9739;
t10225 = t9662 * t9741;
t10224 = t9662 * t9743;
t10223 = t9662 * t9751;
t10222 = t9662 * t9753;
t10221 = t9662 * t9755;
t10215 = t9685 * t9755;
t10213 = t9711 * t9715;
t10212 = t9713 * t9711;
t10211 = t9713 * t9714;
t10210 = t9713 * t9715;
t10197 = t9714 * t9715;
t10196 = t9715 * t9716;
t10189 = t9716 * t9711;
t10188 = t9716 * t9714;
t10041 = pkin(2) * t10323;
t10039 = t9745 * t10331;
t10038 = t9747 * t10331;
t10037 = t9749 * t10331;
t10036 = t9757 * t10331;
t10035 = t9759 * t10331;
t10034 = t9761 * t10331;
t10033 = t9685 * t10323;
t10031 = pkin(3) * t10161;
t10030 = pkin(3) * t10141;
t10029 = pkin(3) * t10140;
t10028 = pkin(3) * t10139;
t10027 = pkin(3) * t10137;
t10026 = pkin(3) * t10136;
t10025 = pkin(3) * t10135;
t9607 = t9711 * t9778 + t9714 * t9772;
t9342 = (t9601 * t9712 - t10195) * t9716 - t9713 * t9607;
t10005 = t9154 * t9898 * t9342;
t9608 = t9711 * t9779 + t9714 * t9773;
t9343 = (t9602 * t9712 - t10194) * t9716 - t9713 * t9608;
t10004 = t9155 * t9897 * t9343;
t9609 = t9711 * t9780 + t9714 * t9774;
t9344 = (t9603 * t9712 - t10193) * t9716 - t9713 * t9609;
t10003 = t9156 * t9896 * t9344;
t9610 = t9711 * t9781 + t9714 * t9775;
t9345 = (t9604 * t9712 - t10192) * t9716 - t9713 * t9610;
t10002 = t9157 * t9895 * t9345;
t9611 = t9711 * t9782 + t9714 * t9776;
t9346 = (t9605 * t9712 - t10191) * t9716 - t9713 * t9611;
t10001 = t9158 * t9894 * t9346;
t9612 = t9711 * t9783 + t9714 * t9777;
t9347 = (t9606 * t9712 - t10190) * t9716 - t9713 * t9612;
t10000 = t9159 * t9893 * t9347;
t9997 = t9181 * t10291;
t9996 = t9181 * t10290;
t9993 = t9184 * t10287;
t9992 = t9184 * t10286;
t9989 = t9187 * t10283;
t9988 = t9187 * t10282;
t9985 = t9193 * t10279;
t9984 = t9193 * t10278;
t9981 = t9196 * t10275;
t9980 = t9196 * t10274;
t9977 = t9199 * t10271;
t9976 = t9199 * t10270;
t9969 = t9719 * t10227;
t9968 = t9720 * t10227;
t9967 = t9721 * t10227;
t9966 = t9722 * t10227;
t9965 = t9723 * t10227;
t9964 = t9724 * t10227;
t9962 = t9728 * t10226;
t9961 = t9728 * t10225;
t9960 = t9728 * t10224;
t9959 = t9728 * t10223;
t9958 = t9728 * t10222;
t9957 = t9728 * t10221;
t9943 = t9728 * t10160;
t9905 = t9739 * t10041;
t9904 = t9741 * t10041;
t9903 = t9743 * t10041;
t9902 = t9751 * t10041;
t9901 = t9753 * t10041;
t9900 = t9755 * t10041;
t9846 = t9256 * t9732 - t9274 * t9728;
t9845 = t9257 * t9732 - t9275 * t9728;
t9844 = t9258 * t9732 - t9276 * t9728;
t9843 = t9259 * t9732 - t9277 * t9728;
t9842 = t9260 * t9732 - t9278 * t9728;
t9841 = t9261 * t9732 - t9279 * t9728;
t9834 = (t10020 + t10030) * t9732 - t10031;
t9833 = (t10019 + t10029) * t9732 - t10031;
t9832 = (t10018 + t10028) * t9732 - t10031;
t9831 = (t10017 + t10027) * t9732 - t10031;
t9830 = (t10016 + t10026) * t9732 - t10031;
t9829 = (t10015 + t10025) * t9732 - t10031;
t9816 = t9766 + t9767 + t9768 + t9769 + t9770 + t9771;
t9815 = t9414 * t9727 * t9746 - t9292 * t9740;
t9814 = t9415 * t9727 * t9748 - t9293 * t9742;
t9813 = t9416 * t9727 * t9750 - t9294 * t9744;
t9812 = t9417 * t9727 * t9758 - t9295 * t9752;
t9811 = t9418 * t9727 * t9760 - t9296 * t9754;
t9810 = t9419 * t9727 * t9762 - t9297 * t9756;
t9372 = t9527 * t9695 + t9689 * t9536;
t9796 = -t9372 * t10324 - t9515 * t9962;
t9373 = t9528 * t9696 + t9690 * t9537;
t9795 = -t9373 * t10324 - t9516 * t9961;
t9374 = t9529 * t9697 + t9691 * t9538;
t9794 = -t9374 * t10324 - t9517 * t9960;
t9375 = -t9689 * t9527 + t9536 * t9695;
t9793 = t9375 * t10324 + t9521 * t9962;
t9376 = -t9690 * t9528 + t9537 * t9696;
t9792 = t9376 * t10324 + t9522 * t9961;
t9377 = -t9691 * t9529 + t9538 * t9697;
t9791 = t9377 * t10324 + t9523 * t9960;
t9396 = t9547 * t9698 + t9692 * t9556;
t9790 = -t9396 * t10324 - t9518 * t9959;
t9397 = t9548 * t9699 + t9693 * t9557;
t9789 = -t9397 * t10324 - t9519 * t9958;
t9398 = t9549 * t9700 + t9694 * t9558;
t9788 = -t9398 * t10324 - t9520 * t9957;
t9399 = -t9692 * t9547 + t9556 * t9698;
t9787 = t9399 * t10324 + t9524 * t9959;
t9400 = -t9693 * t9548 + t9557 * t9699;
t9786 = t9400 * t10324 + t9525 * t9958;
t9401 = -t9694 * t9549 + t9558 * t9700;
t9785 = t9401 * t10324 + t9526 * t9957;
t9591 = -pkin(9) * t10163 + t9731 * t10300;
t9590 = -pkin(9) * t10164 + t9731 * t10301;
t9589 = -pkin(9) * t10165 + t9731 * t10302;
t9579 = -pkin(9) * t10169 + t9731 * t10303;
t9578 = -pkin(9) * t10170 + t9731 * t10304;
t9577 = -pkin(9) * t10171 + t9731 * t10305;
t9486 = 0.2e1 * t9508;
t9474 = -t9712 * t10188 + t10212;
t9473 = t9712 * t10189 + t10211;
t9472 = t9712 * t10211 + t10189;
t9471 = -t9712 * t10212 + t10188;
t9468 = t9712 * g(1) - g(2) * t10210 + g(3) * t10196;
t9407 = -t9694 * t9561 + t9564 * t9700;
t9406 = -t9693 * t9560 + t9563 * t9699;
t9405 = -t9692 * t9559 + t9562 * t9698;
t9404 = t9561 * t9700 + t9694 * t9564;
t9403 = t9560 * t9699 + t9693 * t9563;
t9402 = t9559 * t9698 + t9692 * t9562;
t9383 = -t9691 * t9541 + t9544 * t9697;
t9382 = -t9690 * t9540 + t9543 * t9696;
t9381 = -t9689 * t9539 + t9542 * t9695;
t9380 = t9541 * t9697 + t9691 * t9544;
t9379 = t9540 * t9696 + t9690 * t9543;
t9378 = t9539 * t9695 + t9689 * t9542;
t9323 = g(1) * t10197 + t9472 * g(2) + t9474 * g(3);
t9322 = g(1) * t10213 - t9471 * g(2) - t9473 * g(3);
t9153 = t9810 * t9520 + t9841 * t9526;
t9152 = -t9841 * t9520 + t9810 * t9526;
t9151 = -t9842 * t9519 + t9811 * t9525;
t9150 = -t9843 * t9518 + t9812 * t9524;
t9149 = t9811 * t9519 + t9842 * t9525;
t9148 = t9812 * t9518 + t9843 * t9524;
t9147 = -t9844 * t9517 + t9813 * t9523;
t9146 = -t9845 * t9516 + t9814 * t9522;
t9145 = -t9846 * t9515 + t9815 * t9521;
t9144 = t9813 * t9517 + t9844 * t9523;
t9143 = t9814 * t9516 + t9845 * t9522;
t9142 = t9815 * t9515 + t9846 * t9521;
t9135 = (-((-t9520 * t9591 + t9829 * t9526) * t9761 - (-t9526 * t10234 + t9520 * t9585 + t9461) * t9755) * t9329 + ((t9585 * t9755 + t9591 * t9761) * t9526 + (t9829 * t9761 + t9755 * (-t9885 + t10234)) * t9520) * t9467) / ((t9797 * t10161 + t9486) * t9724 + ((t9762 * t9501 + (t9727 * t9755 * t9907 + t9683 + t9865) * pkin(3)) * t9728 - (t9662 * t10009 - t10043) * t9732) * t9761 + (-t9727 * t9886 + (t9727 * t10025 + t9817) * t9726) * t10314 + t9413);
t9134 = (-((-t9518 * t9589 + t9831 * t9524) * t9757 - t9751 * (-t9524 * t10236 + t9518 * t9583 + t9459)) * t9327 + ((t9751 * t9583 + t9589 * t9757) * t9524 + (t9831 * t9757 + (-t9885 + t10236) * t9751) * t9518) * t9465) / ((t9799 * t10161 + t9486) * t9722 + ((t9758 * t9499 + (t9727 * t9751 * t9909 + t9681 + t9867) * pkin(3)) * t9728 - (t9662 * t10007 - t10043) * t9732) * t9757 + (-t9727 * t9888 + (t9727 * t10027 + t9819) * t9726) * t10314 + t9411);
t9133 = (-t9328 * ((-t9519 * t9590 + t9830 * t9525) * t9759 - t9753 * (-t9525 * t10235 + t9519 * t9584 + t9460)) + t9466 * ((t9753 * t9584 + t9590 * t9759) * t9525 + (t9830 * t9759 + (-t9885 + t10235) * t9753) * t9519)) / ((t9798 * t10161 + t9486) * t9723 + ((t9760 * t9500 + (t9727 * t9753 * t9908 + t9682 + t9866) * pkin(3)) * t9728 - (t9662 * t10006 - t10043) * t9732) * t9759 + (-t9727 * t9887 + (t9727 * t10026 + t9818) * t9726) * t10314 + t9412);
t9132 = (-((-t9515 * t9577 + t9834 * t9521) * t9745 - t9739 * (-t9521 * t10242 + t9515 * t9571 + t9456)) * t9324 + t9462 * ((t9739 * t9571 + t9577 * t9745) * t9521 + (t9834 * t9745 + (-t9885 + t10242) * t9739) * t9515)) / ((t9802 * t10161 + t9486) * t9719 + ((t9746 * t9487 + (t9727 * t9739 * t9912 + t9672 + t9870) * pkin(3)) * t9728 - (t9662 * t10011 - t10043) * t9732) * t9745 + (-t9727 * t9891 + (t9727 * t10030 + t9822) * t9726) * t10314 + t9408);
t9131 = (-t9326 * ((-t9517 * t9579 + t9832 * t9523) * t9749 - t9743 * (-t9523 * t10240 + t9517 * t9573 + t9458)) + t9464 * ((t9743 * t9573 + t9579 * t9749) * t9523 + (t9832 * t9749 + (-t9885 + t10240) * t9743) * t9517)) / ((t9800 * t10161 + t9486) * t9721 + ((t9750 * t9489 + (t9727 * t9743 * t9910 + t9674 + t9868) * pkin(3)) * t9728 - (t9662 * t10010 - t10043) * t9732) * t9749 + (-t9727 * t9889 + (t9727 * t10028 + t9820) * t9726) * t10314 + t9410);
t9130 = (-t9325 * ((-t9516 * t9578 + t9833 * t9522) * t9747 - t9741 * (-t9522 * t10241 + t9516 * t9572 + t9457)) + ((t9741 * t9572 + t9578 * t9747) * t9522 + (t9833 * t9747 + (-t9885 + t10241) * t9741) * t9516) * t9463) / ((t9801 * t10161 + t9486) * t9720 + ((t9748 * t9488 + (t9727 * t9741 * t9911 + t9673 + t9869) * pkin(3)) * t9728 - (t9662 * t10008 - t10043) * t9732) * t9747 + (-t9727 * t9890 + (t9727 * t10029 + t9821) * t9726) * t10314 + t9409);
t1 = [-(t9407 * t9964 + (((t9520 * t10033 - t9398 * t10221) * t9731 + t9407 * t10325) * t9727 + t9788 * t9718 - t9788) * t9761 + t9520 * t9900 + (t9407 * t10228 + (-t9520 * t10034 + (-t9398 * t9718 + t9520 * t9943 + t9398) * t10215 + (t9398 * t10350 + t9520 * t10368) * pkin(3)) * t9726) * pkin(9)) * t10308 - (t9406 * t9965 + (((t9519 * t10033 - t9397 * t10222) * t9731 + t9406 * t10326) * t9727 + t9789 * t9718 - t9789) * t9759 + t9519 * t9901 + (t9406 * t10229 + (-t9519 * t10035 + (-t9397 * t9718 + t9519 * t9943 + t9397) * t10216 + (t9397 * t10349 + t9519 * t10367) * pkin(3)) * t9726) * pkin(9)) * t10309 - (t9405 * t9966 + (((t9518 * t10033 - t9396 * t10223) * t9731 + t9405 * t10327) * t9727 + t9790 * t9718 - t9790) * t9757 + t9518 * t9902 + (t9405 * t10230 + (-t9518 * t10036 + (-t9396 * t9718 + t9518 * t9943 + t9396) * t10217 + (t9396 * t10348 + t9518 * t10366) * pkin(3)) * t9726) * pkin(9)) * t10310 - (t9383 * t9967 + (((t9517 * t10033 - t9374 * t10224) * t9731 + t9383 * t10328) * t9727 + t9794 * t9718 - t9794) * t9749 + t9517 * t9903 + (t9383 * t10231 + (-t9517 * t10037 + (-t9374 * t9718 + t9517 * t9943 + t9374) * t10218 + (t9374 * t10347 + t9517 * t10365) * pkin(3)) * t9726) * pkin(9)) * t10311 - (t9382 * t9968 + (((t9516 * t10033 - t9373 * t10225) * t9731 + t9382 * t10329) * t9727 + t9795 * t9718 - t9795) * t9747 + t9516 * t9904 + (t9382 * t10232 + (-t9516 * t10038 + (-t9373 * t9718 + t9516 * t9943 + t9373) * t10219 + (t9373 * t10346 + t9516 * t10364) * pkin(3)) * t9726) * pkin(9)) * t10312 - (t9381 * t9969 + (((t9515 * t10033 - t9372 * t10226) * t9731 + t9381 * t10330) * t9727 + t9796 * t9718 - t9796) * t9745 + t9515 * t9905 + (t9381 * t10233 + (-t9515 * t10039 + (-t9372 * t9718 + t9515 * t9943 + t9372) * t10220 + (t9372 * t10345 + t9515 * t10363) * pkin(3)) * t9726) * pkin(9)) * t10313, 0, t10271 * t9893 + t10275 * t9894 + t10279 * t9895 + t10283 * t9896 + t10287 * t9897 + t10291 * t9898, t10270 * t9893 + t10274 * t9894 + t10278 * t9895 + t10282 * t9896 + t10286 * t9897 + t10290 * t9898, 0, 0, 0, 0, 0, -t10370 - t10372 - t10374 - t10376 - t10378 - t10380, -t10369 - t10371 - t10373 - t10375 - t10377 - t10379, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9712 * t9468 + (-t9322 * t9711 - t9323 * t9714) * t9715; -(t9404 * t9964 + (((-t10033 * t9526 + t9401 * t10221) * t9731 + t9404 * t10325) * t9727 + t9785 * t9718 - t9785) * t9761 - t9526 * t9900 + (t9404 * t10228 + (t9526 * t10034 + (t9401 * t9718 - t9526 * t9943 - t9401) * t10215 + (-t9401 * t10350 - t9526 * t10368) * pkin(3)) * t9726) * pkin(9)) * t10308 - (t9403 * t9965 + (((-t10033 * t9525 + t9400 * t10222) * t9731 + t9403 * t10326) * t9727 + t9786 * t9718 - t9786) * t9759 - t9525 * t9901 + (t9403 * t10229 + (t9525 * t10035 + (t9400 * t9718 - t9525 * t9943 - t9400) * t10216 + (-t9400 * t10349 - t9525 * t10367) * pkin(3)) * t9726) * pkin(9)) * t10309 - (t9402 * t9966 + (((-t10033 * t9524 + t9399 * t10223) * t9731 + t9402 * t10327) * t9727 + t9787 * t9718 - t9787) * t9757 - t9524 * t9902 + (t9402 * t10230 + (t9524 * t10036 + (t9399 * t9718 - t9524 * t9943 - t9399) * t10217 + (-t9399 * t10348 - t9524 * t10366) * pkin(3)) * t9726) * pkin(9)) * t10310 - (t9380 * t9967 + (((-t10033 * t9523 + t9377 * t10224) * t9731 + t9380 * t10328) * t9727 + t9791 * t9718 - t9791) * t9749 - t9523 * t9903 + (t9380 * t10231 + (t9523 * t10037 + (t9377 * t9718 - t9523 * t9943 - t9377) * t10218 + (-t9377 * t10347 - t9523 * t10365) * pkin(3)) * t9726) * pkin(9)) * t10311 - (t9379 * t9968 + (((-t10033 * t9522 + t9376 * t10225) * t9731 + t9379 * t10329) * t9727 + t9792 * t9718 - t9792) * t9747 - t9522 * t9904 + (t9379 * t10232 + (t9522 * t10038 + (t9376 * t9718 - t9522 * t9943 - t9376) * t10219 + (-t9376 * t10346 - t9522 * t10364) * pkin(3)) * t9726) * pkin(9)) * t10312 - (t9378 * t9969 + (((-t10033 * t9521 + t9375 * t10226) * t9731 + t9378 * t10330) * t9727 + t9793 * t9718 - t9793) * t9745 - t9521 * t9905 + (t9378 * t10233 + (t9521 * t10039 + (t9375 * t9718 - t9521 * t9943 - t9375) * t10220 + (-t9375 * t10345 - t9521 * t10363) * pkin(3)) * t9726) * pkin(9)) * t10313, 0, t9977 + t9981 + t9985 + t9989 + t9993 + t9997, t9976 + t9980 + t9984 + t9988 + t9992 + t9996, 0, 0, 0, 0, 0, t10382 + t10384 + t10386 + t10388 + t10390 + t10392, t10381 + t10383 + t10385 + t10387 + t10389 + t10391, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10210 * t9468 + t9471 * t9322 - t9472 * t9323; -0.6e1 * g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10196 * t9468 + t9473 * t9322 - t9474 * t9323; (-t9142 * t10257 - t9143 * t10256 - t9144 * t10255 - t9148 * t10254 - t9149 * t10253 - t9153 * t10252 + (-t9612 - t9611 - t9610 - t9609 - t9608 - t9607) * t9716 + (t9816 * t9715 + (-t9601 - t9602 - t9603 - t9604 - t9605 - t9606) * t9712) * t9713) * g(3), 0, t9342 * t9997 + t9343 * t9993 + t9344 * t9989 + t9345 * t9985 + t9346 * t9981 + t9347 * t9977, t9342 * t9996 + t9343 * t9992 + t9344 * t9988 + t9345 * t9984 + t9346 * t9980 + t9347 * t9976, 0, 0, 0, 0, 0, t10382 * t9342 + t10384 * t9343 + t10386 * t9344 + t10388 * t9345 + t10390 * t9346 + t10392 * t9347, t10381 * t9342 + t10383 * t9343 + t10385 * t9344 + t10387 * t9345 + t10389 * t9346 + t10391 * t9347, 0, 0, 0, 0, 0, 0, -t10213 * t9468 + t9712 * t9322, -t10197 * t9468 + t9712 * t9323, (-t9322 * t9714 + t9323 * t9711) * t9715, 0; (t9145 * t10257 + t9146 * t10256 + t9147 * t10255 + t9150 * t10254 + t9151 * t10253 + t9152 * t10252 + t9816 * t9712 + ((t9778 + t9779 + t9780 + t9781 + t9782 + t9783) * t9714 + (-t9772 - t9773 - t9774 - t9775 - t9776 - t9777) * t9711) * t9715) * g(3), 0, -t10000 * t9320 - t10001 * t9318 - t10002 * t9316 - t10003 * t9314 - t10004 * t9312 - t10005 * t9310, -t10000 * t9321 - t10001 * t9319 - t10002 * t9317 - t10003 * t9315 - t10004 * t9313 - t10005 * t9311, 0, 0, 0, 0, 0, t10370 * t9342 + t10372 * t9343 + t10374 * t9344 + t10376 * t9345 + t10378 * t9346 + t10380 * t9347, t10369 * t9342 + t10371 * t9343 + t10373 * t9344 + t10375 * t9345 + t10377 * t9346 + t10379 * t9347, 0, 0, 0, 0, 0, 0, -t10210 * t9322 + t9471 * t9468, -t10210 * t9323 - t9472 * t9468, -t9472 * t9322 - t9471 * t9323, 0; ((t9152 * t9329 - t9153 * t9467) * t9207 + (-t9149 * t9466 + t9151 * t9328) * t9206 + (-t9148 * t9465 + t9150 * t9327) * t9205 + (-t9144 * t9464 + t9147 * t9326) * t9204 + (-t9143 * t9463 + t9146 * t9325) * t9203 + (-t9142 * t9462 + t9145 * t9324) * t9202) * g(3), 0, t9130 * t9312 + t9131 * t9314 + t9132 * t9310 + t9133 * t9318 + t9134 * t9316 + t9135 * t9320, t9130 * t9313 + t9131 * t9315 + t9132 * t9311 + t9133 * t9319 + t9134 * t9317 + t9135 * t9321, 0, 0, 0, 0, 0, t10294 * t9242 + t10295 * t9241 + t10296 * t9243 + t10297 * t9235 + t10298 * t9237 + t10299 * t9236 + t9130 * t9245 + t9131 * t9247 + t9132 * t9244 + t9133 * t9253 + t9134 * t9252 + t9135 * t9250, t10294 * t9239 + t10295 * t9238 + t10296 * t9240 + t10297 * t9234 + t10298 * t9233 + t10299 * t9232 + t9130 * t9246 + t9131 * t9249 + t9132 * t9248 + t9133 * t9255 + t9134 * t9254 + t9135 * t9251, 0, 0, 0, 0, 0, 0, t10196 * t9322 + t9473 * t9468, t10196 * t9323 - t9474 * t9468, -t9474 * t9322 - t9473 * t9323, 0;];
tau_reg  = t1;
