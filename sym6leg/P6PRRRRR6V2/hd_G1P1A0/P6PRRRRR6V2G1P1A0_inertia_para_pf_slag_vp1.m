% Calculate inertia matrix for parallel robot
% P6PRRRRR6V2G1P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% MX [6x6]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2019-09-11 16:13
% Revision: 7993d029b5937b704dcf3fc7d8ae322038cdcbdd (2019-09-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1(xP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A0_inertia_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-09-11 13:08:08
% EndTime: 2019-09-11 13:09:40
% DurationCPUTime: 92.24s
% Computational Cost: add. (316895->1580), mult. (833830->2471), div. (3780->18), fcn. (694639->50), ass. (0->1020)
t2949 = cos(pkin(5));
t2935 = t2949 ^ 2;
t3560 = t2935 - 0.1e1;
t2944 = sin(pkin(6));
t2905 = t2944 * pkin(9);
t3011 = rSges(3,2) ^ 2;
t3012 = rSges(3,1) ^ 2;
t2871 = m(3) * (-t3011 + t3012) - Icges(3,1) + Icges(3,2);
t2966 = cos(qJ(3,6));
t2936 = t2966 ^ 2;
t3587 = t2871 * t2936;
t2968 = cos(qJ(3,5));
t2937 = t2968 ^ 2;
t3586 = t2871 * t2937;
t2970 = cos(qJ(3,4));
t2938 = t2970 ^ 2;
t3585 = t2871 * t2938;
t2978 = cos(qJ(3,3));
t2940 = t2978 ^ 2;
t3584 = t2871 * t2940;
t2980 = cos(qJ(3,2));
t2941 = t2980 ^ 2;
t3583 = t2871 * t2941;
t2982 = cos(qJ(3,1));
t2942 = t2982 ^ 2;
t3582 = t2871 * t2942;
t2948 = cos(pkin(6));
t2934 = t2948 ^ 2;
t3013 = pkin(9) ^ 2;
t2885 = pkin(3) ^ 2 + t2934 * t3013 - t3013;
t3261 = t2885 * t3560;
t2988 = xP(5);
t2927 = sin(t2988);
t2990 = rSges(4,3);
t2991 = rSges(4,2);
t2889 = m(4) * t2990 * t2991 - Icges(4,6);
t2992 = rSges(4,1);
t3528 = m(4) * t2992;
t2890 = t2990 * t3528 - Icges(4,5);
t2987 = xP(6);
t2926 = sin(t2987);
t2929 = cos(t2987);
t3130 = t2889 * t2926 - t2890 * t2929;
t3581 = t2927 * t3130;
t2999 = koppelP(6,2);
t3005 = koppelP(6,1);
t2837 = t2926 * t2999 - t2929 * t3005;
t2930 = cos(t2988);
t2993 = koppelP(6,3);
t2758 = t2837 * t2927 + t2930 * t2993;
t2843 = t2926 * t3005 + t2929 * t2999;
t2989 = xP(4);
t2928 = sin(t2989);
t2931 = cos(t2989);
t2663 = t2758 * t2928 - t2843 * t2931;
t2664 = t2758 * t2931 + t2843 * t2928;
t3000 = koppelP(5,2);
t3006 = koppelP(5,1);
t2838 = t2926 * t3000 - t2929 * t3006;
t2994 = koppelP(5,3);
t2760 = t2838 * t2927 + t2930 * t2994;
t2844 = t2926 * t3006 + t2929 * t3000;
t2666 = t2760 * t2928 - t2844 * t2931;
t2667 = t2760 * t2931 + t2844 * t2928;
t3001 = koppelP(4,2);
t3007 = koppelP(4,1);
t2839 = t2926 * t3001 - t2929 * t3007;
t2995 = koppelP(4,3);
t2762 = t2839 * t2927 + t2930 * t2995;
t2845 = t2926 * t3007 + t2929 * t3001;
t2669 = t2762 * t2928 - t2845 * t2931;
t2670 = t2762 * t2931 + t2845 * t2928;
t3002 = koppelP(3,2);
t3008 = koppelP(3,1);
t2840 = t2926 * t3002 - t2929 * t3008;
t2996 = koppelP(3,3);
t2764 = t2840 * t2927 + t2930 * t2996;
t2846 = t2926 * t3008 + t2929 * t3002;
t2672 = t2764 * t2928 - t2846 * t2931;
t2673 = t2764 * t2931 + t2846 * t2928;
t3003 = koppelP(2,2);
t3009 = koppelP(2,1);
t2841 = t2926 * t3003 - t2929 * t3009;
t2997 = koppelP(2,3);
t2766 = t2841 * t2927 + t2930 * t2997;
t2847 = t2926 * t3009 + t2929 * t3003;
t2675 = t2766 * t2928 - t2847 * t2931;
t2676 = t2766 * t2931 + t2847 * t2928;
t3004 = koppelP(1,2);
t3010 = koppelP(1,1);
t2842 = t2926 * t3004 - t2929 * t3010;
t2998 = koppelP(1,3);
t2768 = t2842 * t2927 + t2930 * t2998;
t2848 = t2926 * t3010 + t2929 * t3004;
t2678 = t2768 * t2928 - t2848 * t2931;
t2679 = t2768 * t2931 + t2848 * t2928;
t2891 = (t2991 * t3528 - Icges(4,4));
t3580 = -2 * t2891;
t2907 = t2930 ^ 2;
t3579 = -0.2e1 * t2907;
t3578 = 0.2e1 * t2949;
t2950 = cos(pkin(4));
t3535 = pkin(3) * t2950;
t2886 = t3535 * t2905;
t2835 = t2926 * t2991 - t2992 * t2929;
t3577 = m(4) * (t2835 * t2930 - t2927 * t2990);
t3576 = m(4) * t2835;
t2946 = sin(pkin(4));
t3388 = (t2949 + 0.1e1) * (t2949 - 0.1e1);
t3289 = 0.2e1 * t3388;
t3575 = t2946 * (t2942 * t3289 - t3560);
t3574 = t2946 * (t2941 * t3289 - t3560);
t3573 = t2946 * (t2940 * t3289 - t3560);
t3572 = t2946 * (t2938 * t3289 - t3560);
t3571 = t2946 * (t2937 * t3289 - t3560);
t3570 = t2946 * (t2936 * t3289 - t3560);
t2945 = sin(pkin(5));
t3369 = t2945 * t2949;
t3569 = t3369 * (0.2e1 * t2942 - 0.1e1);
t3568 = t3369 * (0.2e1 * t2941 - 0.1e1);
t3567 = t3369 * (0.2e1 * t2940 - 0.1e1);
t3566 = t3369 * (0.2e1 * t2938 - 0.1e1);
t3565 = t3369 * (0.2e1 * t2937 - 0.1e1);
t3564 = t3369 * (0.2e1 * t2936 - 0.1e1);
t2943 = sin(pkin(10));
t2947 = cos(pkin(10));
t2961 = sin(qJ(2,6));
t2967 = cos(qJ(2,6));
t3346 = t2950 * t2967;
t2798 = t2943 * t3346 + t2947 * t2961;
t2801 = -t2943 * t2961 + t2947 * t3346;
t2954 = legFrame(6,3);
t2908 = sin(t2954);
t2914 = cos(t2954);
t2700 = -t2798 * t2908 + t2801 * t2914;
t3349 = t2950 * t2961;
t2804 = t2943 * t2967 + t2947 * t3349;
t2807 = -t2943 * t3349 + t2947 * t2967;
t2703 = t2804 * t2914 + t2807 * t2908;
t2792 = -t2908 * t2943 + t2914 * t2947;
t2960 = sin(qJ(3,6));
t3410 = t2885 * t2960;
t3216 = t2946 * t3410;
t2899 = pkin(9) * t2948 + pkin(8);
t3538 = pkin(3) * t2899;
t3027 = t2700 * t3538 + t2792 * t3216;
t3537 = pkin(3) * t2946;
t3292 = pkin(2) * t3537;
t3188 = t2960 * t3292;
t3202 = t2946 * t3369;
t3411 = t2885 * t2945;
t3223 = t2936 * t3411;
t3401 = t2899 * t2946;
t3274 = pkin(3) * t3401;
t3545 = pkin(2) * t2946;
t3280 = t2966 * t3545;
t3400 = t2899 * t2960;
t3263 = (-t2934 + 0.1e1) * pkin(9);
t3376 = t2944 * t2960;
t2850 = pkin(2) * t3376 + t3263;
t3417 = t2850 * t2945;
t3270 = pkin(9) * t3376;
t2873 = pkin(2) + 0.2e1 * t3270;
t3544 = pkin(3) * t2873;
t2556 = t2703 * t3223 + (((t2700 * t3410 - t2792 * t3274) * t2949 + t2703 * t3544) * t2945 + t3027 * t2935 - t3027) * t2966 - t2792 * t3188 + (t2703 * t3417 + (t2792 * t3280 + (t2700 * t2935 - t2792 * t3202 - t2700) * t3400 + (-t2700 * t3564 - t2792 * t3570) * pkin(3)) * t2944) * pkin(9);
t3174 = 0.2e1 * t2886;
t2776 = t3174 * t3388;
t3355 = t2949 * t2967;
t3208 = t2944 * t3355;
t3180 = pkin(9) * t3208;
t3159 = pkin(3) * t3180;
t3370 = t2945 * t2946;
t3288 = -0.2e1 * t3370;
t3336 = t2961 * t2885;
t2648 = (t2776 + (t3159 - t3336 / 0.2e1) * t3288) * t2936;
t2860 = t2899 * t3535;
t2904 = pkin(2) * t3535;
t3291 = pkin(2) * t2905;
t3036 = -t2960 * t3261 - t3291;
t3181 = t3401 * t2905;
t3367 = t2945 * t2961;
t3195 = t2873 * t3367;
t3361 = t2946 * t2967;
t3201 = t2960 * t3361;
t3260 = t2899 * t3560;
t3272 = t2935 * t2905;
t3377 = t2944 * t2949;
t3534 = pkin(9) * t2945;
t2598 = 0.1e1 / (t2648 + ((t2885 * t3201 + t2860) * t3369 + (t2967 * t3260 + t3195) * t3537 + t3036 * t2950) * t2966 + ((pkin(3) * t3361 + t2950 * t3400) * t3377 + t2961 * t2946 * t2850) * t3534 + (t2899 * t3201 - t3535) * t3272 + (-t2967 * t3181 + t2904) * t2960 + t2886);
t3521 = t2556 * t2598;
t2517 = -t2664 * t3521 - t2663;
t2786 = t2908 * t2947 + t2914 * t2943;
t2685 = -t2786 * t3349 + t2792 * t2967;
t3105 = (t2786 * t3346 + t2792 * t2961) * t2949 - t2786 * t3370;
t2610 = (pkin(3) * t3105 - t2685 * t2905) * t2966 + t2960 * (pkin(3) * t2685 + t3105 * t2905);
t3402 = t2899 * t2945;
t3536 = pkin(3) * t2949;
t2773 = t2960 * t3536 - t3402;
t2874 = pkin(2) + t3270;
t2736 = t2773 * t2967 + t2874 * t2961;
t2826 = -pkin(3) * t2961 + t3180;
t3271 = pkin(9) * t3377;
t3437 = (pkin(3) * t2967 + t2961 * t3271) * t2950;
t3443 = (-t2773 * t2961 + t2874 * t2967) * t2950;
t2622 = (-t2786 * t3437 + t2792 * t2826) * t2966 - t2786 * t3443 - t2792 * t2736;
t3209 = t2899 * t3369;
t2849 = pkin(3) * t3209;
t2894 = pkin(3) * t3369;
t3140 = t3209 * t2905;
t3160 = t2905 - t3272;
t3189 = t3560 * t3538;
t3217 = t2885 * t3369;
t3533 = pkin(9) * t2946;
t2604 = 0.1e1 / (t2648 + ((t2849 + t3036) * t2950 + t2946 * ((t2960 * t3217 + t3189) * t2967 + pkin(3) * t3195)) * t2966 + (t2960 * t3140 + (pkin(2) * t2960 + t3160) * pkin(3)) * t2950 + (t2944 * (t2960 * t3260 + t2894) * t2967 + t2850 * t3367) * t3533);
t2892 = (t3011 + t3012) * m(3) + Icges(3,3);
t3153 = rSges(3,1) * t2966 - rSges(3,2) * t2960;
t3123 = t3153 * m(3);
t2984 = pkin(8) + rSges(3,3);
t3546 = m(3) * t2984;
t2895 = -rSges(3,2) * t3546 + Icges(3,6);
t2896 = rSges(3,1) * t3546 - Icges(3,5);
t3137 = (t2895 * t2966 - t2896 * t2960) * t2945;
t2654 = t3137 + (pkin(2) * t3123 + t2892) * t2949;
t3476 = t2604 * t2654;
t3091 = t3560 * t2886;
t3139 = (t2849 - t3291) * t2950;
t3141 = t2950 * t3261;
t3264 = 0.2e1 * pkin(3) * t2905;
t3273 = pkin(9) * (t2948 + 0.1e1) * (t2948 - 0.1e1);
t3294 = t2935 * t3174 - 0.2e1 * t2886;
t3295 = t2950 * t3140 + t2904;
t3337 = t2960 * t2966;
t3397 = t2899 * t2967;
t2592 = 0.1e1 / (t3294 * t2936 + (-t2960 * t3141 + t3139) * t2966 + t3295 * t2960 - t3091 + (((-0.2e1 * t3159 + t3336) * t2936 + (t2885 * t3355 + t2961 * t3264) * t3337 + pkin(9) * (pkin(3) * t3208 - t2961 * t3273)) * t2945 + (pkin(3) * t2966 + t3270) * (pkin(2) * t3367 + t2935 * t3397 - t3397)) * t2946);
t3561 = m(3) * rSges(3,2);
t2902 = -rSges(3,1) * t3561 + Icges(3,4);
t2903 = 0.2e1 * t2902;
t2986 = pkin(2) * m(3);
t2925 = 0.2e1 * rSges(3,1) * t2986;
t3138 = -m(3) * (rSges(3,1) + t2984) * (-rSges(3,1) + t2984) - Icges(3,1) + Icges(3,3);
t3173 = Icges(3,1) + Icges(2,3) + (pkin(2) ^ 2 + pkin(8) ^ 2 + t3011 + (0.2e1 * pkin(8) + rSges(3,3)) * rSges(3,3)) * m(3) + (rSges(2,1) ^ 2 + rSges(2,2) ^ 2) * m(2);
t3287 = -0.2e1 * pkin(2) * t3561;
t3562 = -0.2e1 * t2902;
t2634 = (t3337 * t3562 + t3138 - t3587) * t2935 + t3137 * t3578 + t3587 + (t2903 * t2960 + t2925) * t2966 + t2960 * t3287 + t3173;
t3507 = t2592 * t2634;
t3060 = t2610 * t3507 + t2622 * t3476;
t3262 = -m(2) * rSges(2,2) + t2945 * t3546;
t3293 = m(2) * rSges(2,1) + t2986;
t3547 = m(3) * t2949;
t3449 = ((-(rSges(3,1) * t2960 + rSges(3,2) * t2966) * t3547 + t3262) * t2961 + t2967 * (t3123 + t3293)) * t2946;
t2418 = t2517 * t3449 - t2664 * t3060;
t2963 = sin(qJ(2,5));
t2969 = cos(qJ(2,5));
t3345 = t2950 * t2969;
t2799 = t2943 * t3345 + t2947 * t2963;
t2802 = -t2943 * t2963 + t2947 * t3345;
t2955 = legFrame(5,3);
t2909 = sin(t2955);
t2915 = cos(t2955);
t2701 = -t2799 * t2909 + t2802 * t2915;
t3348 = t2950 * t2963;
t2805 = t2943 * t2969 + t2947 * t3348;
t2808 = -t2943 * t3348 + t2947 * t2969;
t2704 = t2805 * t2915 + t2808 * t2909;
t2793 = -t2909 * t2943 + t2915 * t2947;
t2962 = sin(qJ(3,5));
t3409 = t2885 * t2962;
t3215 = t2946 * t3409;
t3026 = t2701 * t3538 + t2793 * t3215;
t3187 = t2962 * t3292;
t3222 = t2937 * t3411;
t3279 = t2968 * t3545;
t3399 = t2899 * t2962;
t3375 = t2944 * t2962;
t2851 = pkin(2) * t3375 + t3263;
t3416 = t2851 * t2945;
t3269 = pkin(9) * t3375;
t2875 = pkin(2) + 0.2e1 * t3269;
t3543 = pkin(3) * t2875;
t2557 = t2704 * t3222 + (((t2701 * t3409 - t2793 * t3274) * t2949 + t2704 * t3543) * t2945 + t3026 * t2935 - t3026) * t2968 - t2793 * t3187 + (t2704 * t3416 + (t2793 * t3279 + (t2701 * t2935 - t2793 * t3202 - t2701) * t3399 + (-t2701 * t3565 - t2793 * t3571) * pkin(3)) * t2944) * pkin(9);
t3354 = t2949 * t2969;
t3207 = t2944 * t3354;
t3179 = pkin(9) * t3207;
t3158 = pkin(3) * t3179;
t3334 = t2963 * t2885;
t2649 = (t2776 + (t3158 - t3334 / 0.2e1) * t3288) * t2937;
t3035 = -t2962 * t3261 - t3291;
t3366 = t2945 * t2963;
t3194 = t2875 * t3366;
t3360 = t2946 * t2969;
t3200 = t2962 * t3360;
t2599 = 0.1e1 / (t2649 + ((t2885 * t3200 + t2860) * t3369 + (t2969 * t3260 + t3194) * t3537 + t3035 * t2950) * t2968 + ((pkin(3) * t3360 + t2950 * t3399) * t3377 + t2963 * t2946 * t2851) * t3534 + (t2899 * t3200 - t3535) * t3272 + (-t2969 * t3181 + t2904) * t2962 + t2886);
t3520 = t2557 * t2599;
t2518 = -t2667 * t3520 - t2666;
t2787 = t2909 * t2947 + t2915 * t2943;
t2687 = -t2787 * t3348 + t2793 * t2969;
t3103 = (t2787 * t3345 + t2793 * t2963) * t2949 - t2787 * t3370;
t2612 = (pkin(3) * t3103 - t2687 * t2905) * t2968 + t2962 * (pkin(3) * t2687 + t3103 * t2905);
t2774 = t2962 * t3536 - t3402;
t2876 = pkin(2) + t3269;
t2738 = t2774 * t2969 + t2876 * t2963;
t2827 = -pkin(3) * t2963 + t3179;
t3436 = (pkin(3) * t2969 + t2963 * t3271) * t2950;
t3442 = (-t2774 * t2963 + t2876 * t2969) * t2950;
t2623 = (-t2787 * t3436 + t2793 * t2827) * t2968 - t2787 * t3442 - t2793 * t2738;
t2605 = 0.1e1 / (t2649 + ((t2849 + t3035) * t2950 + t2946 * ((t2962 * t3217 + t3189) * t2969 + pkin(3) * t3194)) * t2968 + (t2962 * t3140 + (pkin(2) * t2962 + t3160) * pkin(3)) * t2950 + (t2944 * (t2962 * t3260 + t2894) * t2969 + t2851 * t3366) * t3533);
t3152 = rSges(3,1) * t2968 - rSges(3,2) * t2962;
t3122 = t3152 * m(3);
t3136 = (t2895 * t2968 - t2896 * t2962) * t2945;
t2655 = t3136 + (pkin(2) * t3122 + t2892) * t2949;
t3471 = t2605 * t2655;
t3335 = t2962 * t2968;
t3396 = t2899 * t2969;
t2593 = 0.1e1 / (t3294 * t2937 + (-t2962 * t3141 + t3139) * t2968 + t3295 * t2962 - t3091 + (((-0.2e1 * t3158 + t3334) * t2937 + (t2885 * t3354 + t2963 * t3264) * t3335 + pkin(9) * (pkin(3) * t3207 - t2963 * t3273)) * t2945 + (pkin(3) * t2968 + t3269) * (pkin(2) * t3366 + t2935 * t3396 - t3396)) * t2946);
t2635 = (t3335 * t3562 + t3138 - t3586) * t2935 + t3136 * t3578 + t3586 + (t2903 * t2962 + t2925) * t2968 + t2962 * t3287 + t3173;
t3503 = t2593 * t2635;
t3056 = t2612 * t3503 + t2623 * t3471;
t3448 = ((-(rSges(3,1) * t2962 + rSges(3,2) * t2968) * t3547 + t3262) * t2963 + t2969 * (t3122 + t3293)) * t2946;
t2419 = t2518 * t3448 - t2667 * t3056;
t2965 = sin(qJ(2,4));
t2971 = cos(qJ(2,4));
t3344 = t2950 * t2971;
t2800 = t2943 * t3344 + t2947 * t2965;
t2803 = -t2943 * t2965 + t2947 * t3344;
t2956 = legFrame(4,3);
t2910 = sin(t2956);
t2916 = cos(t2956);
t2702 = -t2800 * t2910 + t2803 * t2916;
t3347 = t2950 * t2965;
t2806 = t2943 * t2971 + t2947 * t3347;
t2809 = -t2943 * t3347 + t2947 * t2971;
t2705 = t2806 * t2916 + t2809 * t2910;
t2794 = -t2910 * t2943 + t2916 * t2947;
t2964 = sin(qJ(3,4));
t3408 = t2885 * t2964;
t3214 = t2946 * t3408;
t3025 = t2702 * t3538 + t2794 * t3214;
t3186 = t2964 * t3292;
t3221 = t2938 * t3411;
t3278 = t2970 * t3545;
t3398 = t2899 * t2964;
t3374 = t2944 * t2964;
t2852 = pkin(2) * t3374 + t3263;
t3415 = t2852 * t2945;
t3268 = pkin(9) * t3374;
t2877 = pkin(2) + 0.2e1 * t3268;
t3542 = pkin(3) * t2877;
t2558 = t2705 * t3221 + (((t2702 * t3408 - t2794 * t3274) * t2949 + t2705 * t3542) * t2945 + t3025 * t2935 - t3025) * t2970 - t2794 * t3186 + (t2705 * t3415 + (t2794 * t3278 + (t2702 * t2935 - t2794 * t3202 - t2702) * t3398 + (-t2702 * t3566 - t2794 * t3572) * pkin(3)) * t2944) * pkin(9);
t3353 = t2949 * t2971;
t3206 = t2944 * t3353;
t3178 = pkin(9) * t3206;
t3157 = pkin(3) * t3178;
t3332 = t2965 * t2885;
t2650 = (t2776 + (t3157 - t3332 / 0.2e1) * t3288) * t2938;
t3034 = -t2964 * t3261 - t3291;
t3365 = t2945 * t2965;
t3193 = t2877 * t3365;
t3359 = t2946 * t2971;
t3199 = t2964 * t3359;
t2600 = 0.1e1 / (t2650 + ((t2885 * t3199 + t2860) * t3369 + (t2971 * t3260 + t3193) * t3537 + t3034 * t2950) * t2970 + ((pkin(3) * t3359 + t2950 * t3398) * t3377 + t2965 * t2946 * t2852) * t3534 + (t2899 * t3199 - t3535) * t3272 + (-t2971 * t3181 + t2904) * t2964 + t2886);
t3519 = t2558 * t2600;
t2519 = -t2670 * t3519 - t2669;
t2788 = t2910 * t2947 + t2916 * t2943;
t2689 = -t2788 * t3347 + t2794 * t2971;
t3101 = (t2788 * t3344 + t2794 * t2965) * t2949 - t2788 * t3370;
t2614 = (pkin(3) * t3101 - t2689 * t2905) * t2970 + t2964 * (pkin(3) * t2689 + t3101 * t2905);
t2775 = t2964 * t3536 - t3402;
t2878 = pkin(2) + t3268;
t2740 = t2775 * t2971 + t2878 * t2965;
t2828 = -pkin(3) * t2965 + t3178;
t3435 = (pkin(3) * t2971 + t2965 * t3271) * t2950;
t3441 = (-t2775 * t2965 + t2878 * t2971) * t2950;
t2624 = (-t2788 * t3435 + t2794 * t2828) * t2970 - t2788 * t3441 - t2794 * t2740;
t2606 = 0.1e1 / (t2650 + ((t2849 + t3034) * t2950 + t2946 * ((t2964 * t3217 + t3189) * t2971 + pkin(3) * t3193)) * t2970 + (t2964 * t3140 + (pkin(2) * t2964 + t3160) * pkin(3)) * t2950 + (t2944 * (t2964 * t3260 + t2894) * t2971 + t2852 * t3365) * t3533);
t3151 = rSges(3,1) * t2970 - rSges(3,2) * t2964;
t3121 = t3151 * m(3);
t3135 = (t2895 * t2970 - t2896 * t2964) * t2945;
t2656 = t3135 + (pkin(2) * t3121 + t2892) * t2949;
t3466 = t2606 * t2656;
t3333 = t2964 * t2970;
t3395 = t2899 * t2971;
t2594 = 0.1e1 / (t3294 * t2938 + (-t2964 * t3141 + t3139) * t2970 + t3295 * t2964 - t3091 + (((-0.2e1 * t3157 + t3332) * t2938 + (t2885 * t3353 + t2965 * t3264) * t3333 + pkin(9) * (pkin(3) * t3206 - t2965 * t3273)) * t2945 + (pkin(3) * t2970 + t3268) * (pkin(2) * t3365 + t2935 * t3395 - t3395)) * t2946);
t2636 = (t3333 * t3562 + t3138 - t3585) * t2935 + t3135 * t3578 + t3585 + (t2903 * t2964 + t2925) * t2970 + t2964 * t3287 + t3173;
t3499 = t2594 * t2636;
t3052 = t2614 * t3499 + t2624 * t3466;
t3447 = ((-(rSges(3,1) * t2964 + rSges(3,2) * t2970) * t3547 + t3262) * t2965 + t2971 * (t3121 + t3293)) * t2946;
t2420 = t2519 * t3447 - t2670 * t3052;
t2973 = sin(qJ(2,3));
t2979 = cos(qJ(2,3));
t3340 = t2950 * t2979;
t2811 = t2943 * t3340 + t2947 * t2973;
t2814 = -t2943 * t2973 + t2947 * t3340;
t2957 = legFrame(3,3);
t2911 = sin(t2957);
t2917 = cos(t2957);
t2724 = -t2811 * t2911 + t2814 * t2917;
t3343 = t2950 * t2973;
t2817 = t2943 * t2979 + t2947 * t3343;
t2820 = -t2943 * t3343 + t2947 * t2979;
t2727 = t2817 * t2917 + t2820 * t2911;
t2795 = -t2911 * t2943 + t2917 * t2947;
t2972 = sin(qJ(3,3));
t3407 = t2885 * t2972;
t3213 = t2946 * t3407;
t3021 = t2724 * t3538 + t2795 * t3213;
t3185 = t2972 * t3292;
t3220 = t2940 * t3411;
t3277 = t2978 * t3545;
t3394 = t2899 * t2972;
t3373 = t2944 * t2972;
t2853 = pkin(2) * t3373 + t3263;
t3414 = t2853 * t2945;
t3267 = pkin(9) * t3373;
t2879 = pkin(2) + 0.2e1 * t3267;
t3541 = pkin(3) * t2879;
t2562 = t2727 * t3220 + (((t2724 * t3407 - t2795 * t3274) * t2949 + t2727 * t3541) * t2945 + t3021 * t2935 - t3021) * t2978 - t2795 * t3185 + (t2727 * t3414 + (t2795 * t3277 + (t2724 * t2935 - t2795 * t3202 - t2724) * t3394 + (-t2724 * t3567 - t2795 * t3573) * pkin(3)) * t2944) * pkin(9);
t3352 = t2949 * t2979;
t3205 = t2944 * t3352;
t3177 = pkin(9) * t3205;
t3156 = pkin(3) * t3177;
t3330 = t2973 * t2885;
t2651 = (t2776 + (t3156 - t3330 / 0.2e1) * t3288) * t2940;
t3033 = -t2972 * t3261 - t3291;
t3364 = t2945 * t2973;
t3192 = t2879 * t3364;
t3358 = t2946 * t2979;
t3198 = t2972 * t3358;
t2601 = 0.1e1 / (t2651 + ((t2885 * t3198 + t2860) * t3369 + (t2979 * t3260 + t3192) * t3537 + t3033 * t2950) * t2978 + ((pkin(3) * t3358 + t2950 * t3394) * t3377 + t2973 * t2946 * t2853) * t3534 + (t2899 * t3198 - t3535) * t3272 + (-t2979 * t3181 + t2904) * t2972 + t2886);
t3515 = t2562 * t2601;
t2523 = -t2673 * t3515 - t2672;
t2789 = t2911 * t2947 + t2917 * t2943;
t2709 = -t2789 * t3343 + t2795 * t2979;
t3099 = (t2789 * t3340 + t2795 * t2973) * t2949 - t2789 * t3370;
t2616 = (pkin(3) * t3099 - t2709 * t2905) * t2978 + t2972 * (pkin(3) * t2709 + t3099 * t2905);
t2777 = t2972 * t3536 - t3402;
t2880 = pkin(2) + t3267;
t2742 = t2777 * t2979 + t2880 * t2973;
t2832 = -pkin(3) * t2973 + t3177;
t3434 = (pkin(3) * t2979 + t2973 * t3271) * t2950;
t3440 = (-t2777 * t2973 + t2880 * t2979) * t2950;
t2628 = (-t2789 * t3434 + t2795 * t2832) * t2978 - t2789 * t3440 - t2795 * t2742;
t2607 = 0.1e1 / (t2651 + ((t2849 + t3033) * t2950 + t2946 * ((t2972 * t3217 + t3189) * t2979 + pkin(3) * t3192)) * t2978 + (t2972 * t3140 + (pkin(2) * t2972 + t3160) * pkin(3)) * t2950 + (t2944 * (t2972 * t3260 + t2894) * t2979 + t2853 * t3364) * t3533);
t3150 = rSges(3,1) * t2978 - rSges(3,2) * t2972;
t3120 = t3150 * m(3);
t3134 = (t2895 * t2978 - t2896 * t2972) * t2945;
t2657 = t3134 + (pkin(2) * t3120 + t2892) * t2949;
t3461 = t2607 * t2657;
t3331 = t2972 * t2978;
t3391 = t2899 * t2979;
t2595 = 0.1e1 / (t3294 * t2940 + (-t2972 * t3141 + t3139) * t2978 + t3295 * t2972 - t3091 + (((-0.2e1 * t3156 + t3330) * t2940 + (t2885 * t3352 + t2973 * t3264) * t3331 + pkin(9) * (pkin(3) * t3205 - t2973 * t3273)) * t2945 + (pkin(3) * t2978 + t3267) * (pkin(2) * t3364 + t2935 * t3391 - t3391)) * t2946);
t2637 = (t3331 * t3562 + t3138 - t3584) * t2935 + t3134 * t3578 + t3584 + (t2903 * t2972 + t2925) * t2978 + t2972 * t3287 + t3173;
t3495 = t2595 * t2637;
t3048 = t2616 * t3495 + t2628 * t3461;
t3446 = ((-(rSges(3,1) * t2972 + rSges(3,2) * t2978) * t3547 + t3262) * t2973 + t2979 * (t3120 + t3293)) * t2946;
t2424 = t2523 * t3446 - t2673 * t3048;
t2975 = sin(qJ(2,2));
t2981 = cos(qJ(2,2));
t3339 = t2950 * t2981;
t2812 = t2943 * t3339 + t2947 * t2975;
t2815 = -t2943 * t2975 + t2947 * t3339;
t2958 = legFrame(2,3);
t2912 = sin(t2958);
t2918 = cos(t2958);
t2725 = -t2812 * t2912 + t2815 * t2918;
t3342 = t2950 * t2975;
t2818 = t2943 * t2981 + t2947 * t3342;
t2821 = -t2943 * t3342 + t2947 * t2981;
t2728 = t2818 * t2918 + t2821 * t2912;
t2796 = -t2912 * t2943 + t2918 * t2947;
t2974 = sin(qJ(3,2));
t3406 = t2885 * t2974;
t3212 = t2946 * t3406;
t3020 = t2725 * t3538 + t2796 * t3212;
t3184 = t2974 * t3292;
t3219 = t2941 * t3411;
t3276 = t2980 * t3545;
t3393 = t2899 * t2974;
t3372 = t2944 * t2974;
t2854 = pkin(2) * t3372 + t3263;
t3413 = t2854 * t2945;
t3266 = pkin(9) * t3372;
t2881 = pkin(2) + 0.2e1 * t3266;
t3540 = pkin(3) * t2881;
t2563 = t2728 * t3219 + (((t2725 * t3406 - t2796 * t3274) * t2949 + t2728 * t3540) * t2945 + t3020 * t2935 - t3020) * t2980 - t2796 * t3184 + (t2728 * t3413 + (t2796 * t3276 + (t2725 * t2935 - t2796 * t3202 - t2725) * t3393 + (-t2725 * t3568 - t2796 * t3574) * pkin(3)) * t2944) * pkin(9);
t3351 = t2949 * t2981;
t3204 = t2944 * t3351;
t3176 = pkin(9) * t3204;
t3155 = pkin(3) * t3176;
t3328 = t2975 * t2885;
t2652 = (t2776 + (t3155 - t3328 / 0.2e1) * t3288) * t2941;
t3032 = -t2974 * t3261 - t3291;
t3363 = t2945 * t2975;
t3191 = t2881 * t3363;
t3357 = t2946 * t2981;
t3197 = t2974 * t3357;
t2602 = 0.1e1 / (t2652 + ((t2885 * t3197 + t2860) * t3369 + (t2981 * t3260 + t3191) * t3537 + t3032 * t2950) * t2980 + ((pkin(3) * t3357 + t2950 * t3393) * t3377 + t2975 * t2946 * t2854) * t3534 + (t2899 * t3197 - t3535) * t3272 + (-t2981 * t3181 + t2904) * t2974 + t2886);
t3514 = t2563 * t2602;
t2524 = -t2676 * t3514 - t2675;
t2790 = t2912 * t2947 + t2918 * t2943;
t2711 = -t2790 * t3342 + t2796 * t2981;
t3097 = (t2790 * t3339 + t2796 * t2975) * t2949 - t2790 * t3370;
t2618 = (pkin(3) * t3097 - t2711 * t2905) * t2980 + t2974 * (pkin(3) * t2711 + t3097 * t2905);
t2778 = t2974 * t3536 - t3402;
t2882 = pkin(2) + t3266;
t2744 = t2778 * t2981 + t2882 * t2975;
t2833 = -pkin(3) * t2975 + t3176;
t3433 = (pkin(3) * t2981 + t2975 * t3271) * t2950;
t3439 = (-t2778 * t2975 + t2882 * t2981) * t2950;
t2629 = (-t2790 * t3433 + t2796 * t2833) * t2980 - t2790 * t3439 - t2796 * t2744;
t2608 = 0.1e1 / (t2652 + ((t2849 + t3032) * t2950 + t2946 * ((t2974 * t3217 + t3189) * t2981 + pkin(3) * t3191)) * t2980 + (t2974 * t3140 + (pkin(2) * t2974 + t3160) * pkin(3)) * t2950 + (t2944 * (t2974 * t3260 + t2894) * t2981 + t2854 * t3363) * t3533);
t3149 = rSges(3,1) * t2980 - rSges(3,2) * t2974;
t3119 = t3149 * m(3);
t3133 = (t2895 * t2980 - t2896 * t2974) * t2945;
t2658 = t3133 + (pkin(2) * t3119 + t2892) * t2949;
t3456 = t2608 * t2658;
t3329 = t2974 * t2980;
t3390 = t2899 * t2981;
t2596 = 0.1e1 / (t3294 * t2941 + (-t2974 * t3141 + t3139) * t2980 + t3295 * t2974 - t3091 + (((-0.2e1 * t3155 + t3328) * t2941 + (t2885 * t3351 + t2975 * t3264) * t3329 + pkin(9) * (pkin(3) * t3204 - t2975 * t3273)) * t2945 + (pkin(3) * t2980 + t3266) * (pkin(2) * t3363 + t2935 * t3390 - t3390)) * t2946);
t2638 = (t3329 * t3562 + t3138 - t3583) * t2935 + t3133 * t3578 + t3583 + (t2903 * t2974 + t2925) * t2980 + t2974 * t3287 + t3173;
t3491 = t2596 * t2638;
t3044 = t2618 * t3491 + t2629 * t3456;
t3445 = ((-(rSges(3,1) * t2974 + rSges(3,2) * t2980) * t3547 + t3262) * t2975 + t2981 * (t3119 + t3293)) * t2946;
t2425 = t2524 * t3445 - t2676 * t3044;
t2977 = sin(qJ(2,1));
t2983 = cos(qJ(2,1));
t3338 = t2950 * t2983;
t2813 = t2943 * t3338 + t2947 * t2977;
t2816 = -t2943 * t2977 + t2947 * t3338;
t2959 = legFrame(1,3);
t2913 = sin(t2959);
t2919 = cos(t2959);
t2726 = -t2813 * t2913 + t2816 * t2919;
t3341 = t2950 * t2977;
t2819 = t2943 * t2983 + t2947 * t3341;
t2822 = -t2943 * t3341 + t2947 * t2983;
t2729 = t2819 * t2919 + t2822 * t2913;
t2797 = -t2913 * t2943 + t2919 * t2947;
t2976 = sin(qJ(3,1));
t3405 = t2885 * t2976;
t3211 = t2946 * t3405;
t3019 = t2726 * t3538 + t2797 * t3211;
t3183 = t2976 * t3292;
t3218 = t2942 * t3411;
t3275 = t2982 * t3545;
t3392 = t2899 * t2976;
t3371 = t2944 * t2976;
t2855 = pkin(2) * t3371 + t3263;
t3412 = t2855 * t2945;
t3265 = pkin(9) * t3371;
t2883 = pkin(2) + 0.2e1 * t3265;
t3539 = pkin(3) * t2883;
t2564 = t2729 * t3218 + (((t2726 * t3405 - t2797 * t3274) * t2949 + t2729 * t3539) * t2945 + t3019 * t2935 - t3019) * t2982 - t2797 * t3183 + (t2729 * t3412 + (t2797 * t3275 + (t2726 * t2935 - t2797 * t3202 - t2726) * t3392 + (-t2726 * t3569 - t2797 * t3575) * pkin(3)) * t2944) * pkin(9);
t3350 = t2949 * t2983;
t3203 = t2944 * t3350;
t3175 = pkin(9) * t3203;
t3154 = pkin(3) * t3175;
t3326 = t2977 * t2885;
t2653 = (t2776 + (t3154 - t3326 / 0.2e1) * t3288) * t2942;
t3031 = -t2976 * t3261 - t3291;
t3362 = t2945 * t2977;
t3190 = t2883 * t3362;
t3356 = t2946 * t2983;
t3196 = t2976 * t3356;
t2603 = 0.1e1 / (t2653 + ((t2885 * t3196 + t2860) * t3369 + (t2983 * t3260 + t3190) * t3537 + t3031 * t2950) * t2982 + ((pkin(3) * t3356 + t2950 * t3392) * t3377 + t2977 * t2946 * t2855) * t3534 + (t2899 * t3196 - t3535) * t3272 + (-t2983 * t3181 + t2904) * t2976 + t2886);
t3513 = t2564 * t2603;
t2525 = -t2679 * t3513 - t2678;
t2791 = t2913 * t2947 + t2919 * t2943;
t2713 = -t2791 * t3341 + t2797 * t2983;
t3095 = (t2791 * t3338 + t2797 * t2977) * t2949 - t2791 * t3370;
t2620 = (pkin(3) * t3095 - t2713 * t2905) * t2982 + t2976 * (pkin(3) * t2713 + t3095 * t2905);
t2779 = t2976 * t3536 - t3402;
t2884 = pkin(2) + t3265;
t2746 = t2779 * t2983 + t2884 * t2977;
t2834 = -pkin(3) * t2977 + t3175;
t3432 = (pkin(3) * t2983 + t2977 * t3271) * t2950;
t3438 = (-t2779 * t2977 + t2884 * t2983) * t2950;
t2630 = (-t2791 * t3432 + t2797 * t2834) * t2982 - t2791 * t3438 - t2797 * t2746;
t2609 = 0.1e1 / (t2653 + ((t2849 + t3031) * t2950 + t2946 * ((t2976 * t3217 + t3189) * t2983 + pkin(3) * t3190)) * t2982 + (t2976 * t3140 + (pkin(2) * t2976 + t3160) * pkin(3)) * t2950 + (t2944 * (t2976 * t3260 + t2894) * t2983 + t2855 * t3362) * t3533);
t3148 = rSges(3,1) * t2982 - rSges(3,2) * t2976;
t3118 = t3148 * m(3);
t3132 = (t2895 * t2982 - t2896 * t2976) * t2945;
t2659 = t3132 + (pkin(2) * t3118 + t2892) * t2949;
t3451 = t2609 * t2659;
t3327 = t2976 * t2982;
t3389 = t2899 * t2983;
t2597 = 0.1e1 / (t3294 * t2942 + (-t2976 * t3141 + t3139) * t2982 + t3295 * t2976 - t3091 + (((-0.2e1 * t3154 + t3326) * t2942 + (t2885 * t3350 + t2977 * t3264) * t3327 + pkin(9) * (pkin(3) * t3203 - t2977 * t3273)) * t2945 + (pkin(3) * t2982 + t3265) * (pkin(2) * t3362 + t2935 * t3389 - t3389)) * t2946);
t2639 = (t3327 * t3562 + t3138 - t3582) * t2935 + t3132 * t3578 + t3582 + (t2903 * t2976 + t2925) * t2982 + t2976 * t3287 + t3173;
t3487 = t2597 * t2639;
t3040 = t2620 * t3487 + t2630 * t3451;
t3444 = ((-(rSges(3,1) * t2976 + rSges(3,2) * t2982) * t3547 + t3262) * t2977 + t2983 * (t3118 + t3293)) * t2946;
t2426 = t2525 * t3444 - t2679 * t3040;
t3475 = t2604 * t2892;
t3506 = t2592 * t2654;
t3059 = t2610 * t3506 + t2622 * t3475;
t3368 = t2945 * t2950;
t2640 = ((-rSges(3,1) * t3355 + rSges(3,2) * t2961) * t2966 + t2960 * (rSges(3,1) * t2961 + rSges(3,2) * t3355)) * t2946 - t3153 * t3368;
t3553 = m(3) * t2640;
t2430 = -t2517 * t3553 - t2664 * t3059;
t3470 = t2605 * t2892;
t3502 = t2593 * t2655;
t3055 = t2612 * t3502 + t2623 * t3470;
t2641 = ((-rSges(3,1) * t3354 + rSges(3,2) * t2963) * t2968 + t2962 * (rSges(3,1) * t2963 + rSges(3,2) * t3354)) * t2946 - t3152 * t3368;
t3552 = m(3) * t2641;
t2431 = -t2518 * t3552 - t2667 * t3055;
t3465 = t2606 * t2892;
t3498 = t2594 * t2656;
t3051 = t2614 * t3498 + t2624 * t3465;
t2642 = ((-rSges(3,1) * t3353 + rSges(3,2) * t2965) * t2970 + t2964 * (rSges(3,1) * t2965 + rSges(3,2) * t3353)) * t2946 - t3151 * t3368;
t3551 = m(3) * t2642;
t2432 = -t2519 * t3551 - t2670 * t3051;
t3477 = t2604 * t2640;
t3235 = t2622 * t3477;
t3171 = t2664 * t3235;
t3258 = t2592 * t3449;
t2580 = t2610 * t3258;
t2939 = m(1) + m(2) + m(3);
t3319 = t2517 * t2939 - t2580 * t2664;
t2433 = m(3) * t3171 + t3319;
t3472 = t2605 * t2641;
t3234 = t2623 * t3472;
t3169 = t2667 * t3234;
t3256 = t2593 * t3448;
t2582 = t2612 * t3256;
t3318 = t2518 * t2939 - t2582 * t2667;
t2434 = m(3) * t3169 + t3318;
t3467 = t2606 * t2642;
t3233 = t2624 * t3467;
t3167 = t2670 * t3233;
t3254 = t2594 * t3447;
t2584 = t2614 * t3254;
t3317 = t2519 * t2939 - t2584 * t2670;
t2435 = m(3) * t3167 + t3317;
t3460 = t2607 * t2892;
t3494 = t2595 * t2657;
t3047 = t2616 * t3494 + t2628 * t3460;
t2645 = ((-rSges(3,1) * t3352 + rSges(3,2) * t2973) * t2978 + t2972 * (rSges(3,1) * t2973 + rSges(3,2) * t3352)) * t2946 - t3150 * t3368;
t3550 = m(3) * t2645;
t2442 = -t2523 * t3550 - t2673 * t3047;
t3455 = t2608 * t2892;
t3490 = t2596 * t2658;
t3043 = t2618 * t3490 + t2629 * t3455;
t2646 = ((-rSges(3,1) * t3351 + rSges(3,2) * t2975) * t2980 + t2974 * (rSges(3,1) * t2975 + rSges(3,2) * t3351)) * t2946 - t3149 * t3368;
t3549 = m(3) * t2646;
t2443 = -t2524 * t3549 - t2676 * t3043;
t3450 = t2609 * t2892;
t3486 = t2597 * t2659;
t3039 = t2620 * t3486 + t2630 * t3450;
t2647 = ((-rSges(3,1) * t3350 + rSges(3,2) * t2977) * t2982 + t2976 * (rSges(3,1) * t2977 + rSges(3,2) * t3350)) * t2946 - t3148 * t3368;
t3548 = m(3) * t2647;
t2444 = -t2525 * t3548 - t2679 * t3039;
t3462 = t2607 * t2645;
t3229 = t2628 * t3462;
t3165 = t2673 * t3229;
t3252 = t2595 * t3446;
t2586 = t2616 * t3252;
t3316 = t2523 * t2939 - t2586 * t2673;
t2445 = m(3) * t3165 + t3316;
t3457 = t2608 * t2646;
t3228 = t2629 * t3457;
t3163 = t2676 * t3228;
t3250 = t2596 * t3445;
t2588 = t2618 * t3250;
t3315 = t2524 * t2939 - t2588 * t2676;
t2446 = m(3) * t3163 + t3315;
t3452 = t2609 * t2647;
t3227 = t2630 * t3452;
t3161 = t2679 * t3227;
t3248 = t2597 * t3444;
t2590 = t2620 * t3248;
t3314 = t2525 * t2939 - t2590 * t2679;
t2447 = m(3) * t3161 + t3314;
t2952 = t2991 ^ 2;
t2953 = t2992 ^ 2;
t2869 = m(4) * (t2952 + t2953) + Icges(4,3);
t3454 = t2609 * t2630;
t3236 = t2679 * t3454;
t3459 = t2608 * t2629;
t3237 = t2676 * t3459;
t3464 = t2607 * t2628;
t3238 = t2673 * t3464;
t3469 = t2606 * t2624;
t3239 = t2670 * t3469;
t3474 = t2605 * t2623;
t3240 = t2667 * t3474;
t3479 = t2604 * t2622;
t3241 = t2664 * t3479;
t3489 = t2597 * t2620;
t3249 = t2679 * t3489;
t3493 = t2596 * t2618;
t3251 = t2676 * t3493;
t3497 = t2595 * t2616;
t3253 = t2673 * t3497;
t3501 = t2594 * t2614;
t3255 = t2670 * t3501;
t3505 = t2593 * t2612;
t3257 = t2667 * t3505;
t3509 = t2592 * t2610;
t3259 = t2664 * t3509;
t3563 = -t2418 * t3259 - t2419 * t3257 - t2420 * t3255 - t2424 * t3253 - t2425 * t3251 - t2426 * t3249 - t2430 * t3241 + t2433 * t2517 + t2434 * t2518 + t2435 * t2519 + t2445 * t2523 + t2446 * t2524 + t2447 * t2525 - t2431 * t3240 - t2432 * t3239 - t2442 * t3238 - t2443 * t3237 - t2444 * t3236 + t2869;
t2751 = -t2837 * t2930 + t2927 * t2993;
t2752 = -t2838 * t2930 + t2927 * t2994;
t2753 = -t2839 * t2930 + t2927 * t2995;
t2754 = -t2840 * t2930 + t2927 * t2996;
t2755 = -t2841 * t2930 + t2927 * t2997;
t2756 = -t2842 * t2930 + t2927 * t2998;
t3182 = t2835 * t2927 + t2930 * t2990;
t2836 = t2926 * t2992 + t2929 * t2991;
t3430 = t2836 * t2931;
t3532 = m(4) * (-t2928 * t3182 + t3430);
t3431 = t2836 * t2928;
t3531 = m(4) * (t2931 * t3182 + t3431);
t2625 = (-t2786 * t2826 - t2792 * t3437) * t2966 - t2792 * t3443 + t2786 * t2736;
t2550 = (t2622 * t2751 + t2625 * t2663) * t2604;
t3527 = t2550 * t2640;
t2626 = (-t2787 * t2827 - t2793 * t3436) * t2968 - t2793 * t3442 + t2787 * t2738;
t2551 = (t2623 * t2752 + t2626 * t2666) * t2605;
t3526 = t2551 * t2641;
t2627 = (-t2788 * t2828 - t2794 * t3435) * t2970 - t2794 * t3441 + t2788 * t2740;
t2552 = (t2624 * t2753 + t2627 * t2669) * t2606;
t3525 = t2552 * t2642;
t2631 = (-t2789 * t2832 - t2795 * t3434) * t2978 - t2795 * t3440 + t2789 * t2742;
t2553 = (t2628 * t2754 + t2631 * t2672) * t2607;
t3524 = t2553 * t2645;
t2632 = (-t2790 * t2833 - t2796 * t3433) * t2980 - t2796 * t3439 + t2790 * t2744;
t2554 = (t2629 * t2755 + t2632 * t2675) * t2608;
t3523 = t2554 * t2646;
t2633 = (-t2791 * t2834 - t2797 * t3432) * t2982 - t2797 * t3438 + t2791 * t2746;
t2555 = (t2630 * t2756 + t2633 * t2678) * t2609;
t3522 = t2555 * t2647;
t2697 = t2798 * t2914 + t2801 * t2908;
t2706 = -t2804 * t2908 + t2807 * t2914;
t3030 = -t2697 * t3538 - t2786 * t3216;
t2559 = t2706 * t3223 + (((-t2697 * t3410 + t2786 * t3274) * t2949 + t2706 * t3544) * t2945 + t3030 * t2935 - t3030) * t2966 + t2786 * t3188 + (t2706 * t3417 + (-t2786 * t3280 + (-t2697 * t2935 + t2786 * t3202 + t2697) * t3400 + (t2697 * t3564 + t2786 * t3570) * pkin(3)) * t2944) * pkin(9);
t3518 = t2559 * t2598;
t2698 = t2799 * t2915 + t2802 * t2909;
t2707 = -t2805 * t2909 + t2808 * t2915;
t3029 = -t2698 * t3538 - t2787 * t3215;
t2560 = t2707 * t3222 + (((-t2698 * t3409 + t2787 * t3274) * t2949 + t2707 * t3543) * t2945 + t3029 * t2935 - t3029) * t2968 + t2787 * t3187 + (t2707 * t3416 + (-t2787 * t3279 + (-t2698 * t2935 + t2787 * t3202 + t2698) * t3399 + (t2698 * t3565 + t2787 * t3571) * pkin(3)) * t2944) * pkin(9);
t3517 = t2560 * t2599;
t2699 = t2800 * t2916 + t2803 * t2910;
t2708 = -t2806 * t2910 + t2809 * t2916;
t3028 = -t2699 * t3538 - t2788 * t3214;
t2561 = t2708 * t3221 + (((-t2699 * t3408 + t2788 * t3274) * t2949 + t2708 * t3542) * t2945 + t3028 * t2935 - t3028) * t2970 + t2788 * t3186 + (t2708 * t3415 + (-t2788 * t3278 + (-t2699 * t2935 + t2788 * t3202 + t2699) * t3398 + (t2699 * t3566 + t2788 * t3572) * pkin(3)) * t2944) * pkin(9);
t3516 = t2561 * t2600;
t2721 = t2811 * t2917 + t2814 * t2911;
t2730 = -t2817 * t2911 + t2820 * t2917;
t3024 = -t2721 * t3538 - t2789 * t3213;
t2565 = t2730 * t3220 + (((-t2721 * t3407 + t2789 * t3274) * t2949 + t2730 * t3541) * t2945 + t3024 * t2935 - t3024) * t2978 + t2789 * t3185 + (t2730 * t3414 + (-t2789 * t3277 + (-t2721 * t2935 + t2789 * t3202 + t2721) * t3394 + (t2721 * t3567 + t2789 * t3573) * pkin(3)) * t2944) * pkin(9);
t3512 = t2565 * t2601;
t2722 = t2812 * t2918 + t2815 * t2912;
t2731 = -t2818 * t2912 + t2821 * t2918;
t3023 = -t2722 * t3538 - t2790 * t3212;
t2566 = t2731 * t3219 + (((-t2722 * t3406 + t2790 * t3274) * t2949 + t2731 * t3540) * t2945 + t3023 * t2935 - t3023) * t2980 + t2790 * t3184 + (t2731 * t3413 + (-t2790 * t3276 + (-t2722 * t2935 + t2790 * t3202 + t2722) * t3393 + (t2722 * t3568 + t2790 * t3574) * pkin(3)) * t2944) * pkin(9);
t3511 = t2566 * t2602;
t2723 = t2813 * t2919 + t2816 * t2913;
t2732 = -t2819 * t2913 + t2822 * t2919;
t3022 = -t2723 * t3538 - t2791 * t3211;
t2567 = t2732 * t3218 + (((-t2723 * t3405 + t2791 * t3274) * t2949 + t2732 * t3539) * t2945 + t3022 * t2935 - t3022) * t2982 + t2791 * t3183 + (t2732 * t3412 + (-t2791 * t3275 + (-t2723 * t2935 + t2791 * t3202 + t2723) * t3392 + (t2723 * t3569 + t2791 * t3575) * pkin(3)) * t2944) * pkin(9);
t3510 = t2567 * t2603;
t2686 = t2786 * t2967 + t2792 * t3349;
t3104 = (-t2786 * t2961 + t2792 * t3346) * t2949 - t2792 * t3370;
t2611 = (pkin(3) * t3104 + t2686 * t2905) * t2966 + t2960 * (-pkin(3) * t2686 + t3104 * t2905);
t3508 = t2592 * t2611;
t2688 = t2787 * t2969 + t2793 * t3348;
t3102 = (-t2787 * t2963 + t2793 * t3345) * t2949 - t2793 * t3370;
t2613 = (pkin(3) * t3102 + t2688 * t2905) * t2968 + t2962 * (-pkin(3) * t2688 + t3102 * t2905);
t3504 = t2593 * t2613;
t2690 = t2788 * t2971 + t2794 * t3347;
t3100 = (-t2788 * t2965 + t2794 * t3344) * t2949 - t2794 * t3370;
t2615 = (pkin(3) * t3100 + t2690 * t2905) * t2970 + t2964 * (-pkin(3) * t2690 + t3100 * t2905);
t3500 = t2594 * t2615;
t2710 = t2789 * t2979 + t2795 * t3343;
t3098 = (-t2789 * t2973 + t2795 * t3340) * t2949 - t2795 * t3370;
t2617 = (pkin(3) * t3098 + t2710 * t2905) * t2978 + t2972 * (-pkin(3) * t2710 + t3098 * t2905);
t3496 = t2595 * t2617;
t2712 = t2790 * t2981 + t2796 * t3342;
t3096 = (-t2790 * t2975 + t2796 * t3339) * t2949 - t2796 * t3370;
t2619 = (pkin(3) * t3096 + t2712 * t2905) * t2980 + t2974 * (-pkin(3) * t2712 + t3096 * t2905);
t3492 = t2596 * t2619;
t2714 = t2791 * t2983 + t2797 * t3341;
t3094 = (-t2791 * t2977 + t2797 * t3338) * t2949 - t2797 * t3370;
t2621 = (pkin(3) * t3094 + t2714 * t2905) * t2982 + t2976 * (-pkin(3) * t2714 + t3094 * t2905);
t3488 = t2597 * t2621;
t3485 = t2598 * t2939;
t3484 = t2599 * t2939;
t3483 = t2600 * t2939;
t3482 = t2601 * t2939;
t3481 = t2602 * t2939;
t3480 = t2603 * t2939;
t3478 = t2604 * t2625;
t3473 = t2605 * t2626;
t3468 = t2606 * t2627;
t3463 = t2607 * t2631;
t3458 = t2608 * t2632;
t3453 = t2609 * t2633;
t3404 = t2890 * t2926;
t3403 = t2891 * t2927;
t3387 = t2926 * t2929;
t3386 = t2927 * t2928;
t3385 = t2927 * t2931;
t3378 = t2931 * t2891;
t2469 = (t2556 * t2751 + t2559 * t2663) * t2598;
t2508 = (t2610 * t2751 + t2611 * t2663) * t2592;
t3325 = t2469 * t2939 + t2508 * t3449;
t2470 = (t2557 * t2752 + t2560 * t2666) * t2599;
t2509 = (t2612 * t2752 + t2613 * t2666) * t2593;
t3324 = t2470 * t2939 + t2509 * t3448;
t2471 = (t2558 * t2753 + t2561 * t2669) * t2600;
t2510 = (t2614 * t2753 + t2615 * t2669) * t2594;
t3323 = t2471 * t2939 + t2510 * t3447;
t2475 = (t2562 * t2754 + t2565 * t2672) * t2601;
t2514 = (t2616 * t2754 + t2617 * t2672) * t2595;
t3322 = t2475 * t2939 + t2514 * t3446;
t2476 = (t2563 * t2755 + t2566 * t2675) * t2602;
t2515 = (t2618 * t2755 + t2619 * t2675) * t2596;
t3321 = t2476 * t2939 + t2515 * t3445;
t2477 = (t2564 * t2756 + t2567 * t2678) * t2603;
t2516 = (t2620 * t2756 + t2621 * t2678) * t2597;
t3320 = t2477 * t2939 + t2516 * t3444;
t2529 = t2664 * t3518 - t2751;
t2581 = t2611 * t3258;
t3313 = t2529 * t2939 + t2664 * t2581;
t2530 = t2667 * t3517 - t2752;
t2583 = t2613 * t3256;
t3312 = t2530 * t2939 + t2667 * t2583;
t2531 = t2670 * t3516 - t2753;
t2585 = t2615 * t3254;
t3311 = t2531 * t2939 + t2670 * t2585;
t2535 = t2673 * t3512 - t2754;
t2587 = t2617 * t3252;
t3310 = t2535 * t2939 + t2673 * t2587;
t2536 = t2676 * t3511 - t2755;
t2589 = t2619 * t3250;
t3309 = t2536 * t2939 + t2676 * t2589;
t2537 = t2679 * t3510 - t2756;
t2591 = t2621 * t3248;
t3308 = t2537 * t2939 + t2679 * t2591;
t3307 = t2556 * t3485 + t2580;
t3306 = t2557 * t3484 + t2582;
t3305 = t2558 * t3483 + t2584;
t3304 = t2559 * t3485 + t2581;
t3303 = t2560 * t3484 + t2583;
t3302 = t2561 * t3483 + t2585;
t3301 = t2562 * t3482 + t2586;
t3300 = t2563 * t3481 + t2588;
t3299 = t2564 * t3480 + t2590;
t3298 = t2565 * t3482 + t2587;
t3297 = t2566 * t3481 + t2589;
t3296 = t2567 * t3480 + t2591;
t2951 = t2990 ^ 2;
t3290 = (t2951 - t2952) * m(4) + Icges(4,2) - Icges(4,3);
t3286 = t2598 * t3553;
t3285 = t2599 * t3552;
t3284 = t2600 * t3551;
t3283 = t2601 * t3550;
t3282 = t2602 * t3549;
t3281 = t2603 * t3548;
t3247 = t2598 * t3449;
t3246 = t2599 * t3448;
t3245 = t2600 * t3447;
t3244 = t2601 * t3446;
t3243 = t2602 * t3445;
t3242 = t2603 * t3444;
t3232 = t2625 * t3477;
t3231 = t2626 * t3472;
t3230 = t2627 * t3467;
t3226 = t2631 * t3462;
t3225 = t2632 * t3457;
t3224 = t2633 * t3452;
t3210 = t2891 * t3387;
t3172 = t2664 * t3232;
t3170 = t2667 * t3231;
t3168 = t2670 * t3230;
t3166 = t2673 * t3226;
t3164 = t2676 * t3225;
t3162 = t2679 * t3224;
t3131 = t2889 * t2929 + t3404;
t2328 = t2469 * t3449 + t2508 * t2634 + t2550 * t2654;
t2329 = t2470 * t3448 + t2509 * t2635 + t2551 * t2655;
t2330 = t2471 * t3447 + t2510 * t2636 + t2552 * t2656;
t2331 = t2475 * t3446 + t2514 * t2637 + t2553 * t2657;
t2332 = t2476 * t3445 + t2515 * t2638 + t2554 * t2658;
t2333 = t2477 * t3444 + t2516 * t2639 + t2555 * t2659;
t2334 = -t2469 * t3553 + t2508 * t2654 + t2550 * t2892;
t2335 = -t2470 * t3552 + t2509 * t2655 + t2551 * t2892;
t2336 = -t2471 * t3551 + t2510 * t2656 + t2552 * t2892;
t2337 = -m(3) * t3527 + t3325;
t2338 = -m(3) * t3526 + t3324;
t2339 = -m(3) * t3525 + t3323;
t2340 = -t2475 * t3550 + t2514 * t2657 + t2553 * t2892;
t2341 = -t2476 * t3549 + t2515 * t2658 + t2554 * t2892;
t2342 = -t2477 * t3548 + t2516 * t2659 + t2555 * t2892;
t2343 = -m(3) * t3524 + t3322;
t2344 = -m(3) * t3523 + t3321;
t2345 = -m(3) * t3522 + t3320;
t3117 = t2328 * t2508 + t2329 * t2509 + t2330 * t2510 + t2331 * t2514 + t2332 * t2515 + t2334 * t2550 + t2335 * t2551 + t2336 * t2552 + t2337 * t2469 + t2338 * t2470 + t2339 * t2471 + t2340 * t2553 + t2341 * t2554 + t2343 * t2475 + t2344 * t2476 + t2333 * t2516 + t2342 * t2555 + t2345 * t2477;
t3085 = t2333 * t3488 + t2342 * t3453;
t3086 = t2332 * t3492 + t2341 * t3458;
t3087 = t2331 * t3496 + t2340 * t3463;
t3088 = t2330 * t3500 + t2336 * t3468;
t3089 = t2329 * t3504 + t2335 * t3473;
t3090 = t2328 * t3508 + t2334 * t3478;
t3116 = -t2337 * t2529 - t2338 * t2530 - t2339 * t2531 - t2343 * t2535 - t2344 * t2536 - t2345 * t2537 - t2664 * t3090 - t2667 * t3089 - t2670 * t3088 - t2673 * t3087 - t2676 * t3086 - t2679 * t3085;
t3115 = t2418 * t2508 + t2419 * t2509 + t2420 * t2510 + t2424 * t2514 + t2425 * t2515 + t2430 * t2550 + t2431 * t2551 + t2432 * t2552 + t2433 * t2469 + t2434 * t2470 + t2435 * t2471 + t2442 * t2553 + t2443 * t2554 + t2445 * t2475 + t2446 * t2476 + t2426 * t2516 + t2444 * t2555 + t2447 * t2477;
t3058 = t2611 * t3507 + t2625 * t3476;
t2421 = t2529 * t3449 + t2664 * t3058;
t3054 = t2613 * t3503 + t2626 * t3471;
t2422 = t2530 * t3448 + t2667 * t3054;
t3050 = t2615 * t3499 + t2627 * t3466;
t2423 = t2531 * t3447 + t2670 * t3050;
t3046 = t2617 * t3495 + t2631 * t3461;
t2427 = t2535 * t3446 + t2673 * t3046;
t3042 = t2619 * t3491 + t2632 * t3456;
t2428 = t2536 * t3445 + t2676 * t3042;
t3038 = t2621 * t3487 + t2633 * t3451;
t2429 = t2537 * t3444 + t2679 * t3038;
t3057 = t2611 * t3506 + t2625 * t3475;
t2436 = -t2529 * t3553 + t2664 * t3057;
t3053 = t2613 * t3502 + t2626 * t3470;
t2437 = -t2530 * t3552 + t2667 * t3053;
t3049 = t2615 * t3498 + t2627 * t3465;
t2438 = -t2531 * t3551 + t2670 * t3049;
t2439 = -m(3) * t3172 + t3313;
t2440 = -m(3) * t3170 + t3312;
t2441 = -m(3) * t3168 + t3311;
t3045 = t2617 * t3494 + t2631 * t3460;
t2448 = -t2535 * t3550 + t2673 * t3045;
t3041 = t2619 * t3490 + t2632 * t3455;
t2449 = -t2536 * t3549 + t2676 * t3041;
t3037 = t2621 * t3486 + t2633 * t3450;
t2450 = -t2537 * t3548 + t2679 * t3037;
t2451 = -m(3) * t3166 + t3310;
t2452 = -m(3) * t3164 + t3309;
t2453 = -m(3) * t3162 + t3308;
t3114 = t2421 * t2508 + t2422 * t2509 + t2423 * t2510 + t2427 * t2514 + t2428 * t2515 + t2436 * t2550 + t2437 * t2551 + t2438 * t2552 + t2439 * t2469 + t2440 * t2470 + t2441 * t2471 + t2448 * t2553 + t2449 * t2554 + t2451 * t2475 + t2452 * t2476 + t2429 * t2516 + t2450 * t2555 + t2453 * t2477;
t2454 = t2556 * t3247 + t3060;
t2455 = t2557 * t3246 + t3056;
t2456 = t2558 * t3245 + t3052;
t2460 = t2562 * t3244 + t3048;
t2461 = t2563 * t3243 + t3044;
t2462 = t2564 * t3242 + t3040;
t2478 = -t2556 * t3286 + t3059;
t2479 = -t2557 * t3285 + t3055;
t2480 = -t2558 * t3284 + t3051;
t2484 = -m(3) * t3235 + t3307;
t2485 = -m(3) * t3234 + t3306;
t2486 = -m(3) * t3233 + t3305;
t2490 = -t2562 * t3283 + t3047;
t2491 = -t2563 * t3282 + t3043;
t2492 = -t2564 * t3281 + t3039;
t2496 = -m(3) * t3229 + t3301;
t2497 = -m(3) * t3228 + t3300;
t2498 = -m(3) * t3227 + t3299;
t3113 = t2454 * t2508 + t2455 * t2509 + t2456 * t2510 + t2460 * t2514 + t2461 * t2515 + t2469 * t2484 + t2470 * t2485 + t2471 * t2486 + t2475 * t2496 + t2476 * t2497 + t2478 * t2550 + t2479 * t2551 + t2480 * t2552 + t2490 * t2553 + t2491 * t2554 + t2462 * t2516 + t2477 * t2498 + t2492 * t2555;
t2457 = t2559 * t3247 + t3058;
t2458 = t2560 * t3246 + t3054;
t2459 = t2561 * t3245 + t3050;
t2463 = t2565 * t3244 + t3046;
t2464 = t2566 * t3243 + t3042;
t2465 = t2567 * t3242 + t3038;
t2481 = -t2559 * t3286 + t3057;
t2482 = -t2560 * t3285 + t3053;
t2483 = -t2561 * t3284 + t3049;
t2487 = -m(3) * t3232 + t3304;
t2488 = -m(3) * t3231 + t3303;
t2489 = -m(3) * t3230 + t3302;
t2493 = -t2565 * t3283 + t3045;
t2494 = -t2566 * t3282 + t3041;
t2495 = -t2567 * t3281 + t3037;
t2499 = -m(3) * t3226 + t3298;
t2500 = -m(3) * t3225 + t3297;
t2501 = -m(3) * t3224 + t3296;
t3112 = t2457 * t2508 + t2458 * t2509 + t2459 * t2510 + t2463 * t2514 + t2464 * t2515 + t2469 * t2487 + t2470 * t2488 + t2471 * t2489 + t2475 * t2499 + t2476 * t2500 + t2481 * t2550 + t2482 * t2551 + t2483 * t2552 + t2493 * t2553 + t2494 * t2554 + t2465 * t2516 + t2477 * t2501 + t2495 * t2555;
t3076 = t2426 * t3488 + t2444 * t3453;
t3077 = t2425 * t3492 + t2443 * t3458;
t3078 = t2424 * t3496 + t2442 * t3463;
t3082 = t2420 * t3500 + t2432 * t3468;
t3083 = t2419 * t3504 + t2431 * t3473;
t3084 = t2418 * t3508 + t2430 * t3478;
t3111 = t2433 * t2529 + t2434 * t2530 + t2435 * t2531 + t2445 * t2535 + t2446 * t2536 + t2447 * t2537 + t2664 * t3084 + t2667 * t3083 + t2670 * t3082 + t2673 * t3078 + t2676 * t3077 + t2679 * t3076;
t3073 = t2429 * t3488 + t2450 * t3453;
t3074 = t2428 * t3492 + t2449 * t3458;
t3075 = t2427 * t3496 + t2448 * t3463;
t3079 = t2423 * t3500 + t2438 * t3468;
t3080 = t2422 * t3504 + t2437 * t3473;
t3081 = t2421 * t3508 + t2436 * t3478;
t3110 = -t2439 * t2529 - t2440 * t2530 - t2441 * t2531 - t2451 * t2535 - t2452 * t2536 - t2453 * t2537 - t2664 * t3081 - t2667 * t3080 - t2670 * t3079 - t2673 * t3075 - t2676 * t3074 - t2679 * t3073;
t3064 = t2462 * t3488 + t2492 * t3453;
t3065 = t2461 * t3492 + t2491 * t3458;
t3066 = t2460 * t3496 + t2490 * t3463;
t3070 = t2456 * t3500 + t2480 * t3468;
t3071 = t2455 * t3504 + t2479 * t3473;
t3072 = t2454 * t3508 + t2478 * t3478;
t3109 = t2484 * t2529 + t2485 * t2530 + t2486 * t2531 + t2496 * t2535 + t2497 * t2536 + t2498 * t2537 + t2664 * t3072 + t2667 * t3071 + t2670 * t3070 + t2673 * t3066 + t2676 * t3065 + t2679 * t3064;
t3061 = t2465 * t3488 + t2495 * t3453;
t3062 = t2464 * t3492 + t2494 * t3458;
t3063 = t2463 * t3496 + t2493 * t3463;
t3067 = t2459 * t3500 + t2483 * t3468;
t3068 = t2458 * t3504 + t2482 * t3473;
t3069 = t2457 * t3508 + t2481 * t3478;
t3108 = t2487 * t2529 + t2488 * t2530 + t2489 * t2531 + t2499 * t2535 + t2500 * t2536 + t2501 * t2537 + t2664 * t3069 + t2667 * t3068 + t2670 * t3067 + t2673 * t3063 + t2676 * t3062 + t2679 * t3061;
t3107 = t2337 + t2338 + t2339 + t2343 + t2344 + t2345;
t3106 = -t2439 - t2440 - t2441 - t2451 - t2452 - t2453;
t2859 = (t2952 - t2953) * m(4) + Icges(4,1) - Icges(4,2);
t3093 = -(t2859 * t2926 * t2927 + t2889 * t2930) * t2929 - t2930 * t3404;
t2906 = t2929 ^ 2;
t3092 = t2859 * t2906 + 0.2e1 * t3210;
t3018 = -t2328 * t3259 - t2329 * t3257 - t2330 * t3255 - t2331 * t3253 - t2332 * t3251 - t2333 * t3249 - t2334 * t3241 + t2337 * t2517 + t2338 * t2518 + t2339 * t2519 + t2343 * t2523 + t2344 * t2524 + t2345 * t2525 - t2335 * t3240 - t2336 * t3239 - t2340 * t3238 - t2341 * t3237 - t2342 * t3236;
t3016 = -t2421 * t3259 - t2422 * t3257 - t2423 * t3255 - t2427 * t3253 - t2428 * t3251 - t2429 * t3249 - t2436 * t3241 + t2439 * t2517 + t2440 * t2518 + t2441 * t2519 + t2451 * t2523 + t2452 * t2524 + t2453 * t2525 - t2437 * t3240 - t2438 * t3239 - t2448 * t3238 - t2449 * t3237 - t2450 * t3236;
t3015 = -t2454 * t3259 - t2455 * t3257 - t2456 * t3255 - t2460 * t3253 - t2461 * t3251 - t2462 * t3249 - t2478 * t3241 + t2484 * t2517 + t2485 * t2518 + t2486 * t2519 + t2496 * t2523 + t2497 * t2524 + t2498 * t2525 - t2479 * t3240 - t2480 * t3239 - t2490 * t3238 - t2491 * t3237 - t2492 * t3236;
t3014 = -t2457 * t3259 - t2458 * t3257 - t2459 * t3255 - t2463 * t3253 - t2464 * t3251 - t2465 * t3249 - t2481 * t3241 + t2487 * t2517 + t2488 * t2518 + t2489 * t2519 + t2499 * t2523 + t2500 * t2524 + t2501 * t2525 - t2482 * t3240 - t2483 * t3239 - t2493 * t3238 - t2494 * t3237 - t2495 * t3236;
t2868 = m(4) * (t2951 + t2952) + Icges(4,1);
t2747 = -t2859 * t2931 + t3386 * t3580;
t2734 = t2859 * t3387 + t2906 * t3580 + t2891;
t2733 = t3092 + t3290;
t2684 = -t2869 * t2930 + t3581;
t2261 = (-t3224 - t3225 - t3226 - t3230 - t3231 - t3232) * m(3) + t3296 + t3297 + t3298 + t3302 + t3303 + t3304;
t2260 = (-t3227 - t3228 - t3229 - t3233 - t3234 - t3235) * m(3) + t3299 + t3300 + t3301 + t3305 + t3306 + t3307;
t2259 = t3532 + (t3161 + t3163 + t3165 + t3167 + t3169 + t3171) * m(3) + t3314 + t3315 + t3316 + t3317 + t3318 + t3319;
t1 = [t2487 * t3518 + t2488 * t3517 + t2489 * t3516 + t2499 * t3512 + t2500 * t3511 + t2501 * t3510 + m(4) + t3061 + t3062 + t3063 + t3067 + t3068 + t3069, t2501 * t3513 + t2465 * t3489 + t2495 * t3454 + t2500 * t3514 + t2464 * t3493 + t2494 * t3459 + t2499 * t3515 + t2463 * t3497 + t2493 * t3464 + t2489 * t3519 + t2459 * t3501 + t2483 * t3469 + t2488 * t3520 + t2458 * t3505 + t2482 * t3474 + t2487 * t3521 + t2457 * t3509 + t2481 * t3479, t2261, t3014, m(4) * t3182 + t2928 * t3112 + t2931 * t3108, t3014 * t2927 + (-m(4) * t2836 - t2928 * t3108 + t2931 * t3112) * t2930; t2484 * t3518 + t2485 * t3517 + t2486 * t3516 + t2496 * t3512 + t2497 * t3511 + t2498 * t3510 + t3064 + t3065 + t3066 + t3070 + t3071 + t3072, t2498 * t3513 + t2462 * t3489 + t2492 * t3454 + t2497 * t3514 + t2461 * t3493 + t2491 * t3459 + t2496 * t3515 + t2460 * t3497 + t2490 * t3464 + t2486 * t3519 + t2456 * t3501 + t2480 * t3469 + t2485 * t3520 + t2455 * t3505 + t2479 * t3474 + t2484 * t3521 + t2454 * t3509 + t2478 * t3479 + m(4), t2260, t3015 - t3531, t3109 * t2931 + (t3113 - t3577) * t2928, -t2931 * t3576 + (-m(4) * t3431 + t3015) * t2927 + (-t2928 * t3109 + t2931 * t3113) * t2930; t2261, t2260, 0.6e1 * m(1) + 0.6e1 * m(2) + 0.6e1 * m(3) + m(4), t2259, t3107 * t2928 + (-t3106 + t3577) * t2931, -t2928 * t3576 + (m(4) * t3430 + t2433 + t2434 + t2435 + t2445 + t2446 + t2447) * t2927 + (t2928 * t3106 + t2931 * t3107) * t2930; t2433 * t3518 + t2434 * t3517 + t2435 * t3516 + t2445 * t3512 + t2446 * t3511 + t2447 * t3510 + t3076 + t3077 + t3078 + t3082 + t3083 + t3084, t2447 * t3513 + t2426 * t3489 + t2444 * t3454 + t2446 * t3514 + t2425 * t3493 + t2443 * t3459 + t2445 * t3515 + t2424 * t3497 + t2442 * t3464 + t2435 * t3519 + t2420 * t3501 + t2432 * t3469 + t2434 * t3520 + t2419 * t3505 + t2431 * t3474 + t2433 * t3521 + t2418 * t3509 + t2430 * t3479 - t3531, t2259, t2733 * t2907 + 0.2e1 * t2930 * t3581 + t3563, t2734 * t2930 - t2927 * t3131 + t2928 * t3115 + t2931 * t3111, t3563 * t2927 + (-t2928 * t3111 + t2931 * t3115 + t3130) * t2930; t2439 * t3518 + t2440 * t3517 + t2441 * t3516 + t2451 * t3512 + t2452 * t3511 + t2453 * t3510 + t3073 + t3074 + t3075 + t3079 + t3080 + t3081 + t3531, t2453 * t3513 + t2429 * t3489 + t2450 * t3454 + t2452 * t3514 + t2428 * t3493 + t2449 * t3459 + t2451 * t3515 + t2427 * t3497 + t2448 * t3464 + t2441 * t3519 + t2423 * t3501 + t2438 * t3469 + t2440 * t3520 + t2422 * t3505 + t2437 * t3474 + t2439 * t3521 + t2421 * t3509 + t2436 * t3479, t3577 + (-t3162 - t3164 - t3166 - t3168 - t3170 - t3172) * m(3) + t3308 + t3309 + t3310 + t3311 + t3312 + t3313, t3016 + ((t2859 * t3386 - 0.2e1 * t3378) * t2906 - t2747 * t3387 + t3290 * t3386 + t3378) * t2930 + (-t2889 * t3385 - t2890 * t2928) * t2929 - (-t2889 * t2928 + t2890 * t3385) * t2926 + t2928 * t3130 * t3579, t2747 * t2906 + (t2868 - t3110 - 0.2e1 * t3210) * t2931 + (-t3093 + t3114 + t3403) * t2928, t2684 * t2928 - t2931 * t3131 + t3016 * t2927 + (t2928 * t3110 + t2931 * t3114) * t2930; t2337 * t3518 + t2338 * t3517 + t2339 * t3516 + t2343 * t3512 + t2344 * t3511 + t2345 * t3510 + t3085 + t3086 + t3087 + t3088 + t3089 + t3090 - t3532, t2345 * t3513 + t2333 * t3489 + t2342 * t3454 + t2344 * t3514 + t2332 * t3493 + t2341 * t3459 + t2343 * t3515 + t2331 * t3497 + t2340 * t3464 + t2339 * t3519 + t2330 * t3501 + t2336 * t3469 + t2338 * t3520 + t2329 * t3505 + t2335 * t3474 + t2337 * t3521 + t2328 * t3509 + t2334 * t3479 - t3577, (-t3522 - t3523 - t3524 - t3525 - t3526 - t3527) * m(3) + t3320 + t3321 + t3322 + t3323 + t3324 + t3325, t3018 + (-t2733 * t3385 + t2734 * t2928) * t2930 - (t3579 + 0.1e1) * t2931 * t3130 - t3131 * t3386, ((0.2e1 * t2906 - 0.1e1) * t3403 + t3093 - t3116) * t2931 + (t2868 - t3092 + t3117) * t2928, -t2684 * t2931 - t3131 * t2928 + t3018 * t2927 + (t2928 * t3116 + t2931 * t3117) * t2930;];
MX  = t1;
