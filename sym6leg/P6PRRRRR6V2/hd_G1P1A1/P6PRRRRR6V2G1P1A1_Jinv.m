% Analytische Jacobi-Matrix für parallelen Roboter
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorpose und aktiven Gelenkkoordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% Jinv [6x6]
%   Analytische Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-09-11 17:10
% Revision: 7993d029b5937b704dcf3fc7d8ae322038cdcbdd (2019-09-11)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function Jinv = P6PRRRRR6V2G1P1A1_Jinv(xP, qJ, pkin, koppelP, ...
legFrame)


%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(10,1),zeros(6,3),zeros(6,3)}
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A1_Jinv: qJ has to be [3x6] (double)');
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A1_Jinv: xP has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A1_Jinv: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A1_Jinv: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A1_Jinv: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From Jinv_para_matlab.m
% OptimizationMode: 2
% StartTime: 2019-09-11 16:48:37
% EndTime: 2019-09-11 16:48:46
% DurationCPUTime: 9.04s
% Computational Cost: add. (3866->562), mult. (9946->1053), div. (36->12), fcn. (7638->50), ass. (0->438)
t230 = pkin(9) ^ 2;
t176 = cos(pkin(6));
t462 = t176 ^ 2 - 0.1e1;
t271 = t462 * t230;
t138 = pkin(3) ^ 2 + t271;
t177 = cos(pkin(5));
t164 = t177 ^ 2;
t440 = t164 - 0.1e1;
t283 = t138 * t440;
t210 = xP(5);
t158 = sin(t210);
t161 = cos(t210);
t217 = koppelP(1,3);
t209 = xP(6);
t157 = sin(t209);
t160 = cos(t209);
t223 = koppelP(1,2);
t229 = koppelP(1,1);
t256 = t157 * t223 - t160 * t229;
t468 = t158 * t217 - t256 * t161;
t216 = koppelP(2,3);
t222 = koppelP(2,2);
t228 = koppelP(2,1);
t257 = t157 * t222 - t160 * t228;
t467 = t158 * t216 - t257 * t161;
t215 = koppelP(3,3);
t221 = koppelP(3,2);
t227 = koppelP(3,1);
t258 = t157 * t221 - t160 * t227;
t466 = t158 * t215 - t258 * t161;
t214 = koppelP(4,3);
t220 = koppelP(4,2);
t226 = koppelP(4,1);
t259 = t157 * t220 - t160 * t226;
t465 = t158 * t214 - t259 * t161;
t213 = koppelP(5,3);
t219 = koppelP(5,2);
t225 = koppelP(5,1);
t260 = t157 * t219 - t160 * t225;
t464 = t158 * t213 - t260 * t161;
t212 = koppelP(6,3);
t218 = koppelP(6,2);
t224 = koppelP(6,1);
t261 = t157 * t218 - t160 * t224;
t463 = t158 * t212 - t261 * t161;
t207 = cos(qJ(3,1));
t170 = t207 ^ 2;
t174 = sin(pkin(4));
t393 = (t177 + 0.1e1) * (t177 - 0.1e1);
t324 = 0.2e1 * t393;
t461 = t174 * (t170 * t324 - t440);
t205 = cos(qJ(3,2));
t169 = t205 ^ 2;
t460 = t174 * (t169 * t324 - t440);
t203 = cos(qJ(3,3));
t168 = t203 ^ 2;
t459 = t174 * (t168 * t324 - t440);
t195 = cos(qJ(3,4));
t167 = t195 ^ 2;
t458 = t174 * (t167 * t324 - t440);
t193 = cos(qJ(3,5));
t166 = t193 ^ 2;
t457 = t174 * (t166 * t324 - t440);
t191 = cos(qJ(3,6));
t165 = t191 ^ 2;
t456 = t174 * (t165 * t324 - t440);
t173 = sin(pkin(5));
t353 = t173 * t177;
t444 = 0.2e1 * t170;
t434 = t444 - 0.1e1;
t455 = t353 * t434;
t445 = 0.2e1 * t169;
t435 = t445 - 0.1e1;
t454 = t353 * t435;
t446 = 0.2e1 * t168;
t436 = t446 - 0.1e1;
t453 = t353 * t436;
t447 = 0.2e1 * t167;
t437 = t447 - 0.1e1;
t452 = t353 * t437;
t448 = 0.2e1 * t166;
t438 = t448 - 0.1e1;
t451 = t353 * t438;
t449 = 0.2e1 * t165;
t439 = t449 - 0.1e1;
t450 = t353 * t439;
t443 = pkin(2) * pkin(3);
t178 = cos(pkin(4));
t172 = sin(pkin(6));
t422 = pkin(9) * t172;
t325 = pkin(3) * t422;
t139 = t178 * t325;
t201 = sin(qJ(3,1));
t202 = sin(qJ(2,1));
t208 = cos(qJ(2,1));
t355 = t172 * t201;
t314 = pkin(9) * t355;
t279 = 0.2e1 * t314;
t281 = t440 * t176;
t291 = t207 * t353;
t293 = t172 * t353;
t313 = t440 * pkin(8);
t326 = pkin(2) * t422;
t401 = t138 * t201;
t408 = t138 * t170;
t423 = pkin(3) * t207;
t1 = 0.1e1 / (t139 + (-t207 * t326 + (pkin(8) * t291 + (t176 * t291 + (-t164 + (0.2e1 * t164 - 0.2e1) * t170) * t172) * pkin(9)) * pkin(3) + (t443 + (pkin(8) * pkin(9) + t176 * t230) * t293 - t207 * t283) * t201) * t178 + (((pkin(9) * t313 + t230 * t281) * t355 + (pkin(9) * t281 + t313) * t423) * t208 + ((t207 * t401 - t434 * t325) * t208 * t177 + (t279 * t423 + (t314 + t423) * pkin(2) + t408 - t271) * t202) * t173) * t174);
t211 = xP(4);
t162 = cos(t211);
t357 = t162 * t229;
t363 = t162 * t223;
t369 = t161 * t217;
t159 = sin(t211);
t375 = t159 * t229;
t381 = t159 * t223;
t442 = t1 * ((t158 * t357 - t381) * t160 + (-t158 * t363 - t375) * t157 - t162 * t369);
t441 = -t138 / 0.2e1;
t433 = pkin(2) * t172;
t432 = pkin(2) * t174;
t185 = sin(qJ(3,6));
t328 = 0.2e1 * t422;
t132 = t185 * t328 + pkin(2);
t431 = pkin(3) * t132;
t187 = sin(qJ(3,5));
t133 = t187 * t328 + pkin(2);
t430 = pkin(3) * t133;
t189 = sin(qJ(3,4));
t134 = t189 * t328 + pkin(2);
t429 = pkin(3) * t134;
t197 = sin(qJ(3,3));
t135 = t197 * t328 + pkin(2);
t428 = pkin(3) * t135;
t199 = sin(qJ(3,2));
t136 = t199 * t328 + pkin(2);
t427 = pkin(3) * t136;
t137 = pkin(2) + t279;
t426 = pkin(3) * t137;
t141 = t176 * pkin(9) + pkin(8);
t425 = pkin(3) * t141;
t424 = pkin(3) * t174;
t421 = pkin(9) * t173;
t420 = t178 * pkin(3);
t192 = cos(qJ(2,6));
t186 = sin(qJ(2,6));
t352 = t173 * t186;
t316 = pkin(3) * t393;
t105 = t141 * t316;
t140 = pkin(3) * t353;
t280 = -0.2e1 * t140;
t299 = t185 * t393;
t306 = t138 * t353;
t37 = (t185 * t306 + t105) * t191 + (t141 * t299 + t165 * t280 + t140) * t422;
t284 = t462 * pkin(9);
t125 = t185 * t433 - t284;
t73 = pkin(9) * t125 + t138 * t165 + t191 * t431;
t25 = t37 * t192 + t73 * t352;
t268 = t316 * t422;
t269 = t141 * t140 - t326;
t79 = pkin(9) * t141 * t293 + t443;
t31 = (-t138 * t299 + t269) * t191 + t79 * t185 + t439 * t268;
t20 = 0.1e1 / (t174 * t25 + t31 * t178);
t362 = t162 * t224;
t368 = t162 * t218;
t374 = t161 * t212;
t380 = t159 * t224;
t386 = t159 * t218;
t419 = t20 * ((t158 * t362 - t386) * t160 + (-t158 * t368 - t380) * t157 - t162 * t374);
t194 = cos(qJ(2,5));
t188 = sin(qJ(2,5));
t351 = t173 * t188;
t298 = t187 * t393;
t38 = (t187 * t306 + t105) * t193 + (t141 * t298 + t166 * t280 + t140) * t422;
t126 = t187 * t433 - t284;
t74 = pkin(9) * t126 + t138 * t166 + t193 * t430;
t26 = t38 * t194 + t74 * t351;
t32 = (-t138 * t298 + t269) * t193 + t79 * t187 + t438 * t268;
t21 = 0.1e1 / (t174 * t26 + t32 * t178);
t361 = t162 * t225;
t367 = t162 * t219;
t373 = t161 * t213;
t379 = t159 * t225;
t385 = t159 * t219;
t418 = t21 * ((t158 * t361 - t385) * t160 + (-t158 * t367 - t379) * t157 - t162 * t373);
t196 = cos(qJ(2,4));
t190 = sin(qJ(2,4));
t350 = t173 * t190;
t297 = t189 * t393;
t39 = (t189 * t306 + t105) * t195 + (t141 * t297 + t167 * t280 + t140) * t422;
t127 = t189 * t433 - t284;
t75 = pkin(9) * t127 + t138 * t167 + t195 * t429;
t27 = t39 * t196 + t75 * t350;
t33 = (-t138 * t297 + t269) * t195 + t79 * t189 + t437 * t268;
t22 = 0.1e1 / (t174 * t27 + t33 * t178);
t360 = t162 * t226;
t366 = t162 * t220;
t372 = t161 * t214;
t378 = t159 * t226;
t384 = t159 * t220;
t417 = t22 * ((t158 * t360 - t384) * t160 + (-t158 * t366 - t378) * t157 - t162 * t372);
t204 = cos(qJ(2,3));
t198 = sin(qJ(2,3));
t349 = t173 * t198;
t296 = t197 * t393;
t40 = (t197 * t306 + t105) * t203 + (t141 * t296 + t168 * t280 + t140) * t422;
t128 = t197 * t433 - t284;
t76 = pkin(9) * t128 + t138 * t168 + t203 * t428;
t28 = t40 * t204 + t76 * t349;
t34 = (-t138 * t296 + t269) * t203 + t79 * t197 + t436 * t268;
t23 = 0.1e1 / (t174 * t28 + t34 * t178);
t359 = t162 * t227;
t365 = t162 * t221;
t371 = t161 * t215;
t377 = t159 * t227;
t383 = t159 * t221;
t416 = t23 * ((t158 * t359 - t383) * t160 + (-t158 * t365 - t377) * t157 - t162 * t371);
t206 = cos(qJ(2,2));
t200 = sin(qJ(2,2));
t348 = t173 * t200;
t295 = t199 * t393;
t41 = (t199 * t306 + t105) * t205 + (t141 * t295 + t169 * t280 + t140) * t422;
t129 = t199 * t433 - t284;
t77 = pkin(9) * t129 + t138 * t169 + t205 * t427;
t29 = t41 * t206 + t77 * t348;
t35 = (-t138 * t295 + t269) * t205 + t79 * t199 + t435 * t268;
t24 = 0.1e1 / (t174 * t29 + t35 * t178);
t358 = t162 * t228;
t364 = t162 * t222;
t370 = t161 * t216;
t376 = t159 * t228;
t382 = t159 * t222;
t415 = t24 * ((t158 * t358 - t382) * t160 + (-t158 * t364 - t376) * t157 - t162 * t370);
t414 = t125 * t173;
t413 = t126 * t173;
t412 = t127 * t173;
t411 = t128 * t173;
t410 = t129 * t173;
t130 = pkin(2) * t355 - t284;
t409 = t130 * t173;
t407 = t138 * t173;
t406 = t138 * t185;
t405 = t138 * t187;
t404 = t138 * t189;
t403 = t138 * t197;
t402 = t138 * t199;
t400 = t141 * t174;
t399 = t141 * t185;
t398 = t141 * t187;
t397 = t141 * t189;
t396 = t141 * t197;
t395 = t141 * t199;
t394 = t141 * t201;
t356 = t172 * t177;
t354 = t173 * t174;
t347 = t173 * t202;
t346 = t174 * t192;
t345 = t174 * t194;
t344 = t174 * t196;
t343 = t174 * t204;
t342 = t174 * t206;
t341 = t174 * t208;
t340 = t178 * t186;
t339 = t178 * t188;
t338 = t178 * t190;
t337 = t178 * t192;
t336 = t178 * t194;
t335 = t178 * t196;
t334 = t178 * t198;
t333 = t178 * t200;
t332 = t178 * t202;
t331 = t178 * t204;
t330 = t178 * t206;
t329 = t178 * t208;
t327 = pkin(2) * t424;
t323 = t191 * t432;
t322 = t193 * t432;
t321 = t195 * t432;
t320 = t203 * t432;
t319 = t205 * t432;
t318 = t207 * t432;
t317 = pkin(3) * t400;
t315 = t164 * t422;
t312 = t165 * t407;
t311 = t166 * t407;
t310 = t167 * t407;
t309 = t168 * t407;
t308 = t169 * t407;
t307 = t170 * t407;
t305 = t174 * t406;
t304 = t174 * t405;
t303 = t174 * t404;
t302 = t174 * t403;
t301 = t174 * t402;
t300 = t174 * t401;
t294 = t201 * t393;
t292 = t174 * t353;
t290 = t185 * t346;
t289 = t187 * t345;
t288 = t189 * t344;
t287 = t197 * t343;
t286 = t199 * t342;
t285 = t201 * t341;
t282 = t141 * t440;
t278 = t185 * t327;
t277 = t187 * t327;
t276 = t189 * t327;
t275 = t197 * t327;
t274 = t199 * t327;
t273 = t201 * t327;
t272 = t177 * t325;
t270 = t400 * t422;
t267 = t174 * t31 - t178 * t25;
t266 = t174 * t32 - t178 * t26;
t265 = t174 * t33 - t178 * t27;
t264 = t174 * t34 - t178 * t28;
t263 = t174 * t35 - t178 * t29;
t42 = (t201 * t306 + t105) * t207 + (t141 * t294 + t170 * t280 + t140) * t422;
t78 = pkin(9) * t130 + t137 * t423 + t408;
t262 = t174 * ((-t138 * t294 + t269) * t207 + t79 * t201 + t434 * t268) - t178 * (t42 * t208 + t78 * t347);
t249 = t173 * t192 * t73 - t186 * t37;
t248 = t173 * t194 * t74 - t188 * t38;
t247 = t173 * t196 * t75 - t190 * t39;
t246 = t173 * t204 * t76 - t198 * t40;
t245 = t173 * t206 * t77 - t200 * t41;
t244 = t173 * t208 * t78 - t202 * t42;
t179 = legFrame(6,3);
t143 = sin(t179);
t149 = cos(t179);
t171 = sin(pkin(10));
t175 = cos(pkin(10));
t93 = t171 * t337 + t175 * t186;
t96 = -t171 * t186 + t175 * t337;
t49 = t143 * t96 + t93 * t149;
t81 = t175 * t143 + t171 * t149;
t243 = -t81 * t305 - t49 * t425;
t52 = -t143 * t93 + t96 * t149;
t87 = -t171 * t143 + t175 * t149;
t242 = t87 * t305 + t52 * t425;
t180 = legFrame(5,3);
t144 = sin(t180);
t150 = cos(t180);
t94 = t171 * t336 + t175 * t188;
t97 = -t171 * t188 + t175 * t336;
t50 = t144 * t97 + t94 * t150;
t82 = t175 * t144 + t171 * t150;
t241 = -t82 * t304 - t50 * t425;
t53 = -t144 * t94 + t97 * t150;
t88 = -t171 * t144 + t175 * t150;
t240 = t88 * t304 + t53 * t425;
t181 = legFrame(4,3);
t145 = sin(t181);
t151 = cos(t181);
t95 = t171 * t335 + t175 * t190;
t98 = -t171 * t190 + t175 * t335;
t51 = t145 * t98 + t95 * t151;
t83 = t175 * t145 + t171 * t151;
t239 = -t83 * t303 - t51 * t425;
t54 = -t145 * t95 + t98 * t151;
t89 = -t171 * t145 + t175 * t151;
t238 = t89 * t303 + t54 * t425;
t106 = t171 * t331 + t175 * t198;
t109 = -t171 * t198 + t175 * t331;
t182 = legFrame(3,3);
t146 = sin(t182);
t152 = cos(t182);
t61 = t106 * t152 + t146 * t109;
t84 = t175 * t146 + t171 * t152;
t237 = -t84 * t302 - t61 * t425;
t64 = -t146 * t106 + t109 * t152;
t90 = -t171 * t146 + t175 * t152;
t236 = t90 * t302 + t64 * t425;
t107 = t171 * t330 + t175 * t200;
t110 = -t171 * t200 + t175 * t330;
t183 = legFrame(2,3);
t147 = sin(t183);
t153 = cos(t183);
t62 = t107 * t153 + t147 * t110;
t85 = t175 * t147 + t171 * t153;
t235 = -t85 * t301 - t62 * t425;
t65 = -t147 * t107 + t110 * t153;
t91 = -t171 * t147 + t175 * t153;
t234 = t91 * t301 + t65 * t425;
t108 = t171 * t329 + t175 * t202;
t111 = -t171 * t202 + t175 * t329;
t184 = legFrame(1,3);
t148 = sin(t184);
t154 = cos(t184);
t63 = t108 * t154 + t148 * t111;
t86 = t175 * t148 + t171 * t154;
t233 = -t86 * t300 - t63 * t425;
t66 = -t148 * t108 + t111 * t154;
t92 = -t171 * t148 + t175 * t154;
t232 = t92 * t300 + t66 * t425;
t142 = pkin(2) * t420;
t131 = t141 * t420;
t117 = -t171 * t332 + t175 * t208;
t116 = -t171 * t333 + t175 * t206;
t115 = -t171 * t334 + t175 * t204;
t114 = t171 * t208 + t175 * t332;
t113 = t171 * t206 + t175 * t333;
t112 = t171 * t204 + t175 * t334;
t104 = -t171 * t338 + t175 * t196;
t103 = -t171 * t339 + t175 * t194;
t102 = -t171 * t340 + t175 * t192;
t101 = t171 * t196 + t175 * t338;
t100 = t171 * t194 + t175 * t339;
t99 = t171 * t192 + t175 * t340;
t80 = t178 * t268;
t72 = -t148 * t114 + t117 * t154;
t71 = -t147 * t113 + t116 * t153;
t70 = -t146 * t112 + t115 * t152;
t69 = t114 * t154 + t148 * t117;
t68 = t113 * t153 + t147 * t116;
t67 = t112 * t152 + t146 * t115;
t60 = -t145 * t101 + t104 * t151;
t59 = -t144 * t100 + t103 * t150;
t58 = t102 * t149 - t143 * t99;
t57 = t101 * t151 + t145 * t104;
t56 = t100 * t150 + t144 * t103;
t55 = t143 * t102 + t99 * t149;
t19 = 0.1e1 / ((t80 - (t202 * t441 + t208 * t272) * t354) * t444 + ((t138 * t285 + t131) * t353 + (t137 * t347 + t208 * t282) * t424 + (-t201 * t283 - t326) * t178) * t207 + ((pkin(3) * t341 + t178 * t394) * t356 + t202 * t174 * t130) * t421 + (t141 * t285 - t420) * t315 + (-t208 * t270 + t142) * t201 + t139);
t18 = 0.1e1 / ((t80 - (t200 * t441 + t206 * t272) * t354) * t445 + ((t138 * t286 + t131) * t353 + (t136 * t348 + t206 * t282) * t424 + (-t199 * t283 - t326) * t178) * t205 + ((pkin(3) * t342 + t178 * t395) * t356 + t200 * t174 * t129) * t421 + (t141 * t286 - t420) * t315 + (-t206 * t270 + t142) * t199 + t139);
t17 = 0.1e1 / ((t80 - (t198 * t441 + t204 * t272) * t354) * t446 + ((t138 * t287 + t131) * t353 + (t135 * t349 + t204 * t282) * t424 + (-t197 * t283 - t326) * t178) * t203 + ((pkin(3) * t343 + t178 * t396) * t356 + t198 * t174 * t128) * t421 + (t141 * t287 - t420) * t315 + (-t204 * t270 + t142) * t197 + t139);
t16 = 0.1e1 / ((t80 - (t190 * t441 + t196 * t272) * t354) * t447 + ((t138 * t288 + t131) * t353 + (t134 * t350 + t196 * t282) * t424 + (-t189 * t283 - t326) * t178) * t195 + ((pkin(3) * t344 + t178 * t397) * t356 + t190 * t174 * t127) * t421 + (t141 * t288 - t420) * t315 + (-t196 * t270 + t142) * t189 + t139);
t15 = 0.1e1 / ((t80 - (t188 * t441 + t194 * t272) * t354) * t448 + ((t138 * t289 + t131) * t353 + (t133 * t351 + t194 * t282) * t424 + (-t187 * t283 - t326) * t178) * t193 + ((pkin(3) * t345 + t178 * t398) * t356 + t188 * t174 * t126) * t421 + (t141 * t289 - t420) * t315 + (-t194 * t270 + t142) * t187 + t139);
t14 = 0.1e1 / ((t80 - (t186 * t441 + t192 * t272) * t354) * t449 + ((t138 * t290 + t131) * t353 + (t132 * t352 + t192 * t282) * t424 + (-t185 * t283 - t326) * t178) * t191 + ((pkin(3) * t346 + t178 * t399) * t356 + t186 * t174 * t125) * t421 + (t141 * t290 - t420) * t315 + (-t192 * t270 + t142) * t185 + t139);
t13 = t244 * t86 - t262 * t92;
t12 = t244 * t92 + t262 * t86;
t11 = t245 * t85 - t263 * t91;
t10 = t246 * t84 - t264 * t90;
t9 = t245 * t91 + t263 * t85;
t8 = t246 * t90 + t264 * t84;
t7 = t247 * t83 - t265 * t89;
t6 = t248 * t82 - t266 * t88;
t5 = t249 * t81 - t267 * t87;
t4 = t247 * t89 + t265 * t83;
t3 = t248 * t88 + t266 * t82;
t2 = t249 * t87 + t267 * t81;
t30 = [(t72 * t307 + (((t86 * t317 - t63 * t401) * t177 + t72 * t426) * t173 + t233 * t164 - t233) * t207 + t86 * t273 + (t72 * t409 + (-t86 * t318 + (-t164 * t63 + t86 * t292 + t63) * t394 + (t63 * t455 + t86 * t461) * pkin(3)) * t172) * pkin(9)) * t19, (t69 * t307 + (((-t92 * t317 + t66 * t401) * t177 + t69 * t426) * t173 + t232 * t164 - t232) * t207 - t92 * t273 + (t69 * t409 + (t92 * t318 + (t164 * t66 - t92 * t292 - t66) * t394 + (-t66 * t455 - t92 * t461) * pkin(3)) * t172) * pkin(9)) * t19, 1, t13 * t442 + (-t158 * t256 - t369) * t159 + t162 * (t157 * t229 + t160 * t223), -t12 * t442 - t468, (-t12 * (-t159 * t369 + (t158 * t375 + t363) * t160 + t157 * (-t158 * t381 + t357)) + t468 * t13) * t1; (t71 * t308 + (((t85 * t317 - t62 * t402) * t177 + t71 * t427) * t173 + t235 * t164 - t235) * t205 + t85 * t274 + (t71 * t410 + (-t85 * t319 + (-t164 * t62 + t85 * t292 + t62) * t395 + (t62 * t454 + t85 * t460) * pkin(3)) * t172) * pkin(9)) * t18, (t68 * t308 + (((-t91 * t317 + t65 * t402) * t177 + t68 * t427) * t173 + t234 * t164 - t234) * t205 - t91 * t274 + (t68 * t410 + (t91 * t319 + (t164 * t65 - t91 * t292 - t65) * t395 + (-t65 * t454 - t91 * t460) * pkin(3)) * t172) * pkin(9)) * t18, 1, t11 * t415 + (-t158 * t257 - t370) * t159 + t162 * (t157 * t228 + t160 * t222), -t9 * t415 - t467, (-t9 * (-t159 * t370 + (t158 * t376 + t364) * t160 + t157 * (-t158 * t382 + t358)) + t467 * t11) * t24; (t70 * t309 + (((t84 * t317 - t61 * t403) * t177 + t70 * t428) * t173 + t237 * t164 - t237) * t203 + t84 * t275 + (t70 * t411 + (-t84 * t320 + (-t164 * t61 + t84 * t292 + t61) * t396 + (t61 * t453 + t84 * t459) * pkin(3)) * t172) * pkin(9)) * t17, (t67 * t309 + (((-t90 * t317 + t64 * t403) * t177 + t67 * t428) * t173 + t236 * t164 - t236) * t203 - t90 * t275 + (t67 * t411 + (t90 * t320 + (t164 * t64 - t90 * t292 - t64) * t396 + (-t64 * t453 - t90 * t459) * pkin(3)) * t172) * pkin(9)) * t17, 1, t10 * t416 + (-t158 * t258 - t371) * t159 + t162 * (t157 * t227 + t160 * t221), -t8 * t416 - t466, (-t8 * (-t159 * t371 + (t158 * t377 + t365) * t160 + t157 * (-t158 * t383 + t359)) + t466 * t10) * t23; (t60 * t310 + (((t83 * t317 - t51 * t404) * t177 + t60 * t429) * t173 + t239 * t164 - t239) * t195 + t83 * t276 + (t60 * t412 + (-t83 * t321 + (-t164 * t51 + t83 * t292 + t51) * t397 + (t51 * t452 + t83 * t458) * pkin(3)) * t172) * pkin(9)) * t16, (t57 * t310 + (((-t89 * t317 + t54 * t404) * t177 + t57 * t429) * t173 + t238 * t164 - t238) * t195 - t89 * t276 + (t57 * t412 + (t89 * t321 + (t164 * t54 - t89 * t292 - t54) * t397 + (-t54 * t452 - t89 * t458) * pkin(3)) * t172) * pkin(9)) * t16, 1, t7 * t417 + (-t158 * t259 - t372) * t159 + t162 * (t157 * t226 + t160 * t220), -t4 * t417 - t465, (-t4 * (-t159 * t372 + (t158 * t378 + t366) * t160 + t157 * (-t158 * t384 + t360)) + t465 * t7) * t22; (t59 * t311 + (((t82 * t317 - t50 * t405) * t177 + t59 * t430) * t173 + t241 * t164 - t241) * t193 + t82 * t277 + (t59 * t413 + (-t82 * t322 + (-t164 * t50 + t82 * t292 + t50) * t398 + (t50 * t451 + t82 * t457) * pkin(3)) * t172) * pkin(9)) * t15, (t56 * t311 + (((-t88 * t317 + t53 * t405) * t177 + t56 * t430) * t173 + t240 * t164 - t240) * t193 - t88 * t277 + (t56 * t413 + (t88 * t322 + (t164 * t53 - t88 * t292 - t53) * t398 + (-t53 * t451 - t88 * t457) * pkin(3)) * t172) * pkin(9)) * t15, 1, t6 * t418 + (-t158 * t260 - t373) * t159 + t162 * (t157 * t225 + t160 * t219), -t3 * t418 - t464, (-t3 * (-t159 * t373 + (t158 * t379 + t367) * t160 + t157 * (-t158 * t385 + t361)) + t464 * t6) * t21; (t58 * t312 + (((t81 * t317 - t49 * t406) * t177 + t58 * t431) * t173 + t243 * t164 - t243) * t191 + t81 * t278 + (t58 * t414 + (-t81 * t323 + (-t164 * t49 + t81 * t292 + t49) * t399 + (t49 * t450 + t81 * t456) * pkin(3)) * t172) * pkin(9)) * t14, (t55 * t312 + (((-t87 * t317 + t52 * t406) * t177 + t55 * t431) * t173 + t242 * t164 - t242) * t191 - t87 * t278 + (t55 * t414 + (t87 * t323 + (t164 * t52 - t87 * t292 - t52) * t399 + (-t52 * t450 - t87 * t456) * pkin(3)) * t172) * pkin(9)) * t14, 1, t5 * t419 + (-t158 * t261 - t374) * t159 + t162 * (t157 * t224 + t160 * t218), -t2 * t419 - t463, (-t2 * (-t159 * t374 + (t158 * t380 + t368) * t160 + t157 * (-t158 * t386 + t362)) + t463 * t5) * t20;];
Jinv  = t30;
