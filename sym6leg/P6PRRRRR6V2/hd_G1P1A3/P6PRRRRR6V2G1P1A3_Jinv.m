% Analytische Jacobi-Matrix für parallelen Roboter
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorpose und aktiven Gelenkkoordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% Jinv [6x6]
%   Analytische Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-18 18:51
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function Jinv = P6PRRRRR6V2G1P1A3_Jinv(xP, qJ, pkin, koppelP, ...
legFrame)


%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(10,1),zeros(6,3),zeros(6,3)}
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G1P1A3_Jinv: qJ has to be [3x6] (double)');
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G1P1A3_Jinv: xP has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G1P1A3_Jinv: pkin has to be [10x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G1P1A3_Jinv: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G1P1A3_Jinv: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From Jinv_para_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-18 17:59:20
% EndTime: 2019-05-18 17:59:28
% DurationCPUTime: 9.03s
% Computational Cost: add. (2874->512), mult. (6936->1008), div. (36->12), fcn. (5604->74), ass. (0->437)
t263 = cos(pkin(6));
t204 = t263 * pkin(9) + pkin(8);
t264 = cos(pkin(5));
t251 = t264 ^ 2;
t464 = t251 - 0.1e1;
t347 = t204 * t464;
t250 = t263 ^ 2;
t329 = pkin(9) ^ 2;
t190 = pkin(3) ^ 2 + t250 * t329 - t329;
t465 = -t190 / 0.2e1;
t462 = pkin(3) * t264;
t259 = sin(pkin(6));
t205 = t259 * pkin(9);
t261 = sin(pkin(4));
t461 = t261 * pkin(9);
t284 = cos(qJ(3,6));
t460 = t284 * pkin(3);
t286 = cos(qJ(3,5));
t459 = t286 * pkin(3);
t288 = cos(qJ(3,4));
t458 = t288 * pkin(3);
t302 = cos(qJ(3,3));
t457 = t302 * pkin(3);
t304 = cos(qJ(3,2));
t456 = t304 * pkin(3);
t306 = cos(qJ(3,1));
t455 = t306 * pkin(3);
t278 = sin(qJ(3,6));
t375 = t259 * t278;
t192 = pkin(9) * t375;
t179 = t192 + pkin(2);
t280 = sin(qJ(3,5));
t374 = t259 * t280;
t194 = pkin(9) * t374;
t181 = t194 + pkin(2);
t282 = sin(qJ(3,4));
t373 = t259 * t282;
t196 = pkin(9) * t373;
t183 = t196 + pkin(2);
t296 = sin(qJ(3,3));
t372 = t259 * t296;
t198 = pkin(9) * t372;
t185 = t198 + pkin(2);
t298 = sin(qJ(3,2));
t371 = t259 * t298;
t200 = pkin(9) * t371;
t187 = t200 + pkin(2);
t300 = sin(qJ(3,1));
t370 = t259 * t300;
t202 = pkin(9) * t370;
t189 = t202 + pkin(2);
t260 = sin(pkin(5));
t369 = t260 * t204;
t133 = t278 * t462 - t369;
t352 = t264 * t205;
t109 = t284 * t352 - t133;
t162 = t179 + t460;
t265 = cos(pkin(4));
t279 = sin(qJ(2,6));
t285 = cos(qJ(2,6));
t454 = t265 * (t279 * t109 + t162 * t285);
t134 = t280 * t462 - t369;
t110 = t286 * t352 - t134;
t163 = t181 + t459;
t281 = sin(qJ(2,5));
t287 = cos(qJ(2,5));
t453 = t265 * (t281 * t110 + t163 * t287);
t135 = t282 * t462 - t369;
t111 = t288 * t352 - t135;
t164 = t183 + t458;
t283 = sin(qJ(2,4));
t289 = cos(qJ(2,4));
t452 = t265 * (t283 * t111 + t164 * t289);
t136 = t296 * t462 - t369;
t112 = t302 * t352 - t136;
t168 = t185 + t457;
t297 = sin(qJ(2,3));
t303 = cos(qJ(2,3));
t451 = t265 * (t297 * t112 + t168 * t303);
t137 = t298 * t462 - t369;
t113 = t304 * t352 - t137;
t169 = t187 + t456;
t299 = sin(qJ(2,2));
t305 = cos(qJ(2,2));
t450 = t265 * (t299 * t113 + t169 * t305);
t138 = t300 * t462 - t369;
t114 = t306 * t352 - t138;
t170 = t189 + t455;
t301 = sin(qJ(2,1));
t307 = cos(qJ(2,1));
t449 = t265 * (t301 * t114 + t170 * t307);
t309 = xP(5);
t245 = sin(t309);
t248 = cos(t309);
t311 = koppelP(6,3);
t308 = xP(6);
t244 = sin(t308);
t247 = cos(t308);
t317 = koppelP(6,2);
t323 = koppelP(6,1);
t335 = -t244 * t317 + t247 * t323;
t121 = t245 * t311 + t335 * t248;
t258 = sin(pkin(10));
t448 = t121 * t258;
t262 = cos(pkin(10));
t447 = t121 * t262;
t312 = koppelP(5,3);
t318 = koppelP(5,2);
t324 = koppelP(5,1);
t334 = -t244 * t318 + t247 * t324;
t122 = t245 * t312 + t334 * t248;
t446 = t122 * t258;
t445 = t122 * t262;
t313 = koppelP(4,3);
t319 = koppelP(4,2);
t325 = koppelP(4,1);
t333 = -t244 * t319 + t247 * t325;
t123 = t245 * t313 + t333 * t248;
t444 = t123 * t258;
t443 = t123 * t262;
t314 = koppelP(3,3);
t320 = koppelP(3,2);
t326 = koppelP(3,1);
t332 = -t244 * t320 + t247 * t326;
t124 = t245 * t314 + t332 * t248;
t442 = t124 * t258;
t441 = t124 * t262;
t315 = koppelP(2,3);
t321 = koppelP(2,2);
t327 = koppelP(2,1);
t331 = -t244 * t321 + t247 * t327;
t125 = t245 * t315 + t331 * t248;
t440 = t125 * t258;
t439 = t125 * t262;
t316 = koppelP(1,3);
t322 = koppelP(1,2);
t328 = koppelP(1,1);
t330 = -t244 * t322 + t247 * t328;
t126 = t245 * t316 + t330 * t248;
t438 = t126 * t258;
t437 = t126 * t262;
t266 = legFrame(6,3);
t206 = sin(t266);
t218 = cos(t266);
t146 = -t258 * t206 + t262 * t218;
t436 = t146 * t265;
t267 = legFrame(5,3);
t207 = sin(t267);
t219 = cos(t267);
t147 = -t258 * t207 + t262 * t219;
t435 = t147 * t265;
t268 = legFrame(4,3);
t208 = sin(t268);
t220 = cos(t268);
t148 = -t258 * t208 + t262 * t220;
t434 = t148 * t265;
t269 = legFrame(3,3);
t209 = sin(t269);
t221 = cos(t269);
t149 = -t258 * t209 + t262 * t221;
t433 = t149 * t265;
t270 = legFrame(2,3);
t210 = sin(t270);
t222 = cos(t270);
t150 = -t258 * t210 + t262 * t222;
t432 = t150 * t265;
t271 = legFrame(1,3);
t211 = sin(t271);
t223 = cos(t271);
t151 = -t258 * t211 + t262 * t223;
t431 = t151 * t265;
t272 = legFrame(6,1);
t212 = sin(t272);
t290 = legFrame(6,2);
t232 = sin(t290);
t430 = t212 * t232;
t273 = legFrame(5,1);
t213 = sin(t273);
t291 = legFrame(5,2);
t233 = sin(t291);
t429 = t213 * t233;
t274 = legFrame(4,1);
t214 = sin(t274);
t292 = legFrame(4,2);
t234 = sin(t292);
t428 = t214 * t234;
t275 = legFrame(3,1);
t215 = sin(t275);
t293 = legFrame(3,2);
t235 = sin(t293);
t427 = t215 * t235;
t276 = legFrame(2,1);
t216 = sin(t276);
t294 = legFrame(2,2);
t236 = sin(t294);
t426 = t216 * t236;
t277 = legFrame(1,1);
t217 = sin(t277);
t295 = legFrame(1,2);
t237 = sin(t295);
t425 = t217 * t237;
t224 = cos(t272);
t424 = t224 * t232;
t225 = cos(t273);
t423 = t225 * t233;
t226 = cos(t274);
t422 = t226 * t234;
t227 = cos(t275);
t421 = t227 * t235;
t228 = cos(t276);
t420 = t228 * t236;
t229 = cos(t277);
t419 = t229 * t237;
t418 = (t264 + 0.1e1) * (t264 - 0.1e1);
t417 = t232 * t258;
t416 = t232 * t262;
t415 = t233 * t258;
t414 = t233 * t262;
t413 = t234 * t258;
t412 = t234 * t262;
t411 = t235 * t258;
t410 = t235 * t262;
t409 = t236 * t258;
t408 = t236 * t262;
t407 = t237 * t258;
t406 = t237 * t262;
t310 = xP(4);
t246 = sin(t310);
t405 = t246 * t317;
t404 = t246 * t318;
t403 = t246 * t319;
t402 = t246 * t320;
t401 = t246 * t321;
t400 = t246 * t322;
t399 = t246 * t323;
t398 = t246 * t324;
t397 = t246 * t325;
t396 = t246 * t326;
t395 = t246 * t327;
t394 = t246 * t328;
t393 = t248 * t311;
t392 = t248 * t312;
t391 = t248 * t313;
t390 = t248 * t314;
t389 = t248 * t315;
t388 = t248 * t316;
t249 = cos(t310);
t387 = t249 * t317;
t386 = t249 * t318;
t385 = t249 * t319;
t384 = t249 * t320;
t383 = t249 * t321;
t382 = t249 * t322;
t381 = t249 * t323;
t380 = t249 * t324;
t379 = t249 * t325;
t378 = t249 * t326;
t377 = t249 * t327;
t376 = t249 * t328;
t368 = t260 * t261;
t367 = t260 * t264;
t366 = t279 * t260;
t365 = t281 * t260;
t364 = t283 * t260;
t363 = t297 * t260;
t362 = t299 * t260;
t361 = t301 * t260;
t350 = t204 * t367;
t336 = t350 * t205;
t360 = t278 * t336 + pkin(3) * (pkin(2) * t278 + t205);
t359 = t280 * t336 + pkin(3) * (pkin(2) * t280 + t205);
t358 = t282 * t336 + pkin(3) * (pkin(2) * t282 + t205);
t357 = t296 * t336 + pkin(3) * (pkin(2) * t296 + t205);
t356 = t298 * t336 + pkin(3) * (pkin(2) * t298 + t205);
t355 = t300 * t336 + pkin(3) * (pkin(2) * t300 + t205);
t354 = pkin(3) * t205;
t353 = 0.2e1 * t418;
t191 = pkin(3) * t367;
t351 = t190 * t367;
t349 = (-t250 + 0.1e1) * pkin(9);
t348 = t190 * t464;
t346 = -0.2e1 * t191;
t345 = pkin(3) * t347;
t344 = t251 * t354;
t343 = t285 * t352;
t342 = t287 * t352;
t341 = t289 * t352;
t340 = t303 * t352;
t339 = t305 * t352;
t338 = t307 * t352;
t337 = -pkin(2) * t205 + pkin(3) * t350;
t257 = t306 ^ 2;
t256 = t304 ^ 2;
t255 = t302 ^ 2;
t254 = t288 ^ 2;
t253 = t286 ^ 2;
t252 = t284 ^ 2;
t243 = cos(t295);
t242 = cos(t294);
t241 = cos(t293);
t240 = cos(t292);
t239 = cos(t291);
t238 = cos(t290);
t188 = 0.2e1 * t202 + pkin(2);
t186 = 0.2e1 * t200 + pkin(2);
t184 = 0.2e1 * t198 + pkin(2);
t182 = 0.2e1 * t196 + pkin(2);
t180 = 0.2e1 * t194 + pkin(2);
t178 = 0.2e1 * t192 + pkin(2);
t167 = pkin(2) * t370 + t349;
t166 = pkin(2) * t371 + t349;
t165 = pkin(2) * t372 + t349;
t161 = pkin(2) * t373 + t349;
t160 = pkin(2) * t374 + t349;
t159 = pkin(2) * t375 + t349;
t157 = t244 * t328 + t247 * t322;
t156 = t244 * t327 + t247 * t321;
t155 = t244 * t326 + t247 * t320;
t154 = t244 * t325 + t247 * t319;
t153 = t244 * t324 + t247 * t318;
t152 = t244 * t323 + t247 * t317;
t145 = t262 * t211 + t258 * t223;
t144 = t262 * t210 + t258 * t222;
t143 = t262 * t209 + t258 * t221;
t142 = t262 * t208 + t258 * t220;
t141 = t262 * t207 + t258 * t219;
t140 = t262 * t206 + t258 * t218;
t139 = t265 * t354 * t418;
t120 = t330 * t245 - t388;
t119 = t331 * t245 - t389;
t118 = t332 * t245 - t390;
t117 = t333 * t245 - t391;
t116 = t334 * t245 - t392;
t115 = t335 * t245 - t393;
t108 = t300 * t347 + t191;
t107 = t298 * t347 + t191;
t106 = t296 * t347 + t191;
t105 = t282 * t347 + t191;
t104 = t280 * t347 + t191;
t103 = t278 * t347 + t191;
t102 = t300 * t351 + t345;
t101 = t298 * t351 + t345;
t100 = t296 * t351 + t345;
t99 = t282 * t351 + t345;
t98 = t280 * t351 + t345;
t97 = t278 * t351 + t345;
t96 = -t300 * t348 + t337;
t95 = -t298 * t348 + t337;
t94 = -t296 * t348 + t337;
t93 = -t282 * t348 + t337;
t92 = -t280 * t348 + t337;
t91 = -t278 * t348 + t337;
t87 = -t114 * t307 + t301 * t170;
t86 = -t113 * t305 + t299 * t169;
t85 = -t112 * t303 + t297 * t168;
t81 = -t111 * t289 + t283 * t164;
t80 = -t110 * t287 + t281 * t163;
t79 = -t109 * t285 + t279 * t162;
t78 = t120 * t249 - t246 * t157;
t77 = t119 * t249 - t246 * t156;
t76 = t118 * t249 - t246 * t155;
t75 = t117 * t249 - t246 * t154;
t74 = t116 * t249 - t246 * t153;
t73 = t115 * t249 - t246 * t152;
t72 = t246 * t120 + t249 * t157;
t71 = t246 * t119 + t249 * t156;
t70 = t246 * t118 + t249 * t155;
t69 = t246 * t117 + t249 * t154;
t68 = t246 * t116 + t249 * t153;
t67 = t246 * t115 + t249 * t152;
t66 = (-t249 * t388 + (t245 * t376 - t400) * t247 - t244 * (t245 * t382 + t394)) * t243 - t126 * t419;
t65 = (-t246 * t388 + (t245 * t394 + t382) * t247 + t244 * (-t245 * t400 + t376)) * t243 - t126 * t425;
t64 = (-t249 * t389 + (t245 * t377 - t401) * t247 - t244 * (t245 * t383 + t395)) * t242 - t125 * t420;
t63 = (-t246 * t389 + (t245 * t395 + t383) * t247 + t244 * (-t245 * t401 + t377)) * t242 - t125 * t426;
t62 = (-t249 * t390 + (t245 * t378 - t402) * t247 - t244 * (t245 * t384 + t396)) * t241 - t124 * t421;
t61 = (-t246 * t390 + (t245 * t396 + t384) * t247 + t244 * (-t245 * t402 + t378)) * t241 - t124 * t427;
t60 = (-t249 * t391 + (t245 * t379 - t403) * t247 - t244 * (t245 * t385 + t397)) * t240 - t123 * t422;
t59 = (-t246 * t391 + (t245 * t397 + t385) * t247 + t244 * (-t245 * t403 + t379)) * t240 - t123 * t428;
t58 = (-t249 * t392 + (t245 * t380 - t404) * t247 - t244 * (t245 * t386 + t398)) * t239 - t122 * t423;
t57 = (-t246 * t392 + (t245 * t398 + t386) * t247 + t244 * (-t245 * t404 + t380)) * t239 - t122 * t429;
t56 = (-t249 * t393 + (t245 * t381 - t405) * t247 - t244 * (t245 * t387 + t399)) * t238 - t121 * t424;
t55 = (-t246 * t393 + (t245 * t399 + t387) * t247 + t244 * (-t245 * t405 + t381)) * t238 - t121 * t430;
t54 = -t258 * t78 + t72 * t406;
t53 = t262 * t78 + t72 * t407;
t52 = -t258 * t77 + t71 * t408;
t51 = t262 * t77 + t71 * t409;
t50 = -t258 * t76 + t70 * t410;
t49 = t262 * t76 + t70 * t411;
t48 = -t258 * t75 + t69 * t412;
t47 = t262 * t75 + t69 * t413;
t46 = -t258 * t74 + t68 * t414;
t45 = t262 * t74 + t68 * t415;
t44 = -t258 * t73 + t67 * t416;
t43 = t262 * t73 + t67 * t417;
t42 = t72 * t258 + t78 * t406;
t41 = t71 * t258 + t77 * t408;
t40 = t70 * t258 + t76 * t410;
t39 = t69 * t258 + t75 * t412;
t38 = t68 * t258 + t74 * t414;
t37 = t67 * t258 + t73 * t416;
t36 = -t72 * t262 + t78 * t407;
t35 = -t71 * t262 + t77 * t409;
t34 = -t70 * t262 + t76 * t411;
t33 = -t69 * t262 + t75 * t413;
t32 = -t68 * t262 + t74 * t415;
t31 = -t67 * t262 + t73 * t417;
t30 = t217 * t438 + t66 * t262;
t29 = -t229 * t438 + t65 * t262;
t28 = t216 * t440 + t64 * t262;
t27 = -t228 * t440 + t63 * t262;
t26 = t215 * t442 + t62 * t262;
t25 = -t227 * t442 + t61 * t262;
t24 = t214 * t444 + t60 * t262;
t23 = -t226 * t444 + t59 * t262;
t22 = t213 * t446 + t58 * t262;
t21 = -t225 * t446 + t57 * t262;
t20 = t212 * t448 + t56 * t262;
t19 = -t224 * t448 + t55 * t262;
t18 = t229 * t437 + t65 * t258;
t17 = t228 * t439 + t63 * t258;
t16 = t227 * t441 + t61 * t258;
t15 = t226 * t443 + t59 * t258;
t14 = t225 * t445 + t57 * t258;
t13 = t224 * t447 + t55 * t258;
t12 = t217 * t437 - t258 * t66;
t11 = t216 * t439 - t258 * t64;
t10 = t215 * t441 - t258 * t62;
t9 = t214 * t443 - t258 * t60;
t8 = t213 * t445 - t258 * t58;
t7 = t212 * t447 - t258 * t56;
t6 = 0.1e1 / ((t96 * t306 + (t257 * t353 - t251) * t354 + t355) * t265 + t261 * ((t102 * t306 + (t257 * t346 + t108) * t205) * t307 + (pkin(9) * t167 + t188 * t455 + t190 * t257) * t361));
t5 = 0.1e1 / ((t95 * t304 + (t256 * t353 - t251) * t354 + t356) * t265 + t261 * ((t101 * t304 + (t256 * t346 + t107) * t205) * t305 + (pkin(9) * t166 + t186 * t456 + t190 * t256) * t362));
t4 = 0.1e1 / ((t94 * t302 + (t255 * t353 - t251) * t354 + t357) * t265 + t261 * ((t100 * t302 + (t255 * t346 + t106) * t205) * t303 + (pkin(9) * t165 + t184 * t457 + t190 * t255) * t363));
t3 = 0.1e1 / ((t93 * t288 + (t254 * t353 - t251) * t354 + t358) * t265 + t261 * ((t99 * t288 + (t254 * t346 + t105) * t205) * t289 + (pkin(9) * t161 + t182 * t458 + t190 * t254) * t364));
t2 = 0.1e1 / ((t92 * t286 + (t253 * t353 - t251) * t354 + t359) * t265 + t261 * ((t98 * t286 + (t253 * t346 + t104) * t205) * t287 + (pkin(9) * t160 + t180 * t459 + t190 * t253) * t365));
t1 = 0.1e1 / ((t91 * t284 + (t252 * t353 - t251) * t354 + t360) * t265 + t261 * ((t97 * t284 + (t252 * t346 + t103) * t205) * t285 + (pkin(9) * t159 + t178 * t460 + t190 * t252) * t366));
t82 = [-(((t307 * pkin(3) + t301 * t352) * t431 + t145 * (-t301 * pkin(3) + t338)) * t306 + (-t301 * t138 + t189 * t307) * t431 - t145 * (t138 * t307 + t301 * t189)) * t243 / (0.2e1 * (-(pkin(3) * t338 + t301 * t465) * t368 + t139) * t257 + (t96 * t265 + t261 * (pkin(3) * t188 * t361 + t102 * t307)) * t306 + (-t344 + t355) * t265 + (t259 * t108 * t307 + t167 * t361) * t461), (-(t145 * t229 + t151 * t425) * t449 + (t145 * t425 - t151 * t229) * t87) * t6, ((-t217 * t145 + t151 * t419) * t449 - t87 * (t145 * t419 + t217 * t151)) * t6, (-((t53 * t211 - t54 * t223) * t229 + (-t36 * t211 + t42 * t223) * t217) * t449 + t87 * ((-t211 * t54 - t53 * t223) * t229 + (t211 * t42 + t36 * t223) * t217)) * t6, ((t211 * t12 + t30 * t223) * t449 - t87 * (-t12 * t223 + t211 * t30)) * t6, ((-t211 * t18 + t29 * t223) * t449 - t87 * (t18 * t223 + t211 * t29)) * t6; -(((t305 * pkin(3) + t299 * t352) * t432 + t144 * (-t299 * pkin(3) + t339)) * t304 + (-t299 * t137 + t187 * t305) * t432 - t144 * (t137 * t305 + t299 * t187)) * t242 / (0.2e1 * (-(pkin(3) * t339 + t299 * t465) * t368 + t139) * t256 + (t95 * t265 + t261 * (pkin(3) * t186 * t362 + t101 * t305)) * t304 + (-t344 + t356) * t265 + (t259 * t107 * t305 + t166 * t362) * t461), (-(t144 * t228 + t150 * t426) * t450 + (t144 * t426 - t150 * t228) * t86) * t5, ((-t216 * t144 + t150 * t420) * t450 - t86 * (t144 * t420 + t216 * t150)) * t5, (-((t210 * t51 - t52 * t222) * t228 + (-t35 * t210 + t41 * t222) * t216) * t450 + t86 * ((-t210 * t52 - t51 * t222) * t228 + (t210 * t41 + t35 * t222) * t216)) * t5, ((t210 * t11 + t28 * t222) * t450 - t86 * (-t11 * t222 + t210 * t28)) * t5, ((-t210 * t17 + t27 * t222) * t450 - t86 * (t17 * t222 + t210 * t27)) * t5; -(((t303 * pkin(3) + t297 * t352) * t433 + t143 * (-t297 * pkin(3) + t340)) * t302 + (-t297 * t136 + t185 * t303) * t433 - t143 * (t136 * t303 + t297 * t185)) * t241 / (0.2e1 * (-(pkin(3) * t340 + t297 * t465) * t368 + t139) * t255 + (t94 * t265 + t261 * (pkin(3) * t184 * t363 + t100 * t303)) * t302 + (-t344 + t357) * t265 + (t259 * t106 * t303 + t165 * t363) * t461), (-(t143 * t227 + t149 * t427) * t451 + (t143 * t427 - t149 * t227) * t85) * t4, ((-t215 * t143 + t149 * t421) * t451 - t85 * (t143 * t421 + t215 * t149)) * t4, (-((t209 * t49 - t50 * t221) * t227 + (-t34 * t209 + t40 * t221) * t215) * t451 + t85 * ((-t209 * t50 - t49 * t221) * t227 + (t209 * t40 + t34 * t221) * t215)) * t4, ((t209 * t10 + t26 * t221) * t451 - t85 * (-t10 * t221 + t209 * t26)) * t4, ((-t209 * t16 + t25 * t221) * t451 - t85 * (t16 * t221 + t209 * t25)) * t4; -(((t289 * pkin(3) + t283 * t352) * t434 + t142 * (-t283 * pkin(3) + t341)) * t288 + (-t283 * t135 + t183 * t289) * t434 - t142 * (t135 * t289 + t283 * t183)) * t240 / (0.2e1 * (-(pkin(3) * t341 + t283 * t465) * t368 + t139) * t254 + (t93 * t265 + t261 * (pkin(3) * t182 * t364 + t99 * t289)) * t288 + (-t344 + t358) * t265 + (t259 * t105 * t289 + t161 * t364) * t461), (-(t142 * t226 + t148 * t428) * t452 + (t142 * t428 - t148 * t226) * t81) * t3, ((-t214 * t142 + t148 * t422) * t452 - t81 * (t142 * t422 + t214 * t148)) * t3, (-((t208 * t47 - t48 * t220) * t226 + (-t33 * t208 + t39 * t220) * t214) * t452 + ((-t208 * t48 - t47 * t220) * t226 + (t208 * t39 + t33 * t220) * t214) * t81) * t3, ((t208 * t9 + t24 * t220) * t452 - (t208 * t24 - t9 * t220) * t81) * t3, ((-t208 * t15 + t23 * t220) * t452 - (t15 * t220 + t208 * t23) * t81) * t3; -(((t287 * pkin(3) + t281 * t352) * t435 + t141 * (-t281 * pkin(3) + t342)) * t286 + (-t281 * t134 + t181 * t287) * t435 - t141 * (t134 * t287 + t281 * t181)) * t239 / (0.2e1 * (-(pkin(3) * t342 + t281 * t465) * t368 + t139) * t253 + (t92 * t265 + t261 * (pkin(3) * t180 * t365 + t98 * t287)) * t286 + (-t344 + t359) * t265 + (t259 * t104 * t287 + t160 * t365) * t461), (-(t141 * t225 + t147 * t429) * t453 + (t141 * t429 - t147 * t225) * t80) * t2, ((-t213 * t141 + t147 * t423) * t453 - t80 * (t141 * t423 + t213 * t147)) * t2, (-((t207 * t45 - t46 * t219) * t225 + (-t32 * t207 + t38 * t219) * t213) * t453 + ((-t207 * t46 - t45 * t219) * t225 + (t207 * t38 + t32 * t219) * t213) * t80) * t2, ((t207 * t8 + t22 * t219) * t453 - (t207 * t22 - t8 * t219) * t80) * t2, ((-t207 * t14 + t21 * t219) * t453 - (t14 * t219 + t207 * t21) * t80) * t2; -(((t285 * pkin(3) + t279 * t352) * t436 + t140 * (-t279 * pkin(3) + t343)) * t284 + (-t279 * t133 + t179 * t285) * t436 - t140 * (t133 * t285 + t279 * t179)) * t238 / (0.2e1 * (-(pkin(3) * t343 + t279 * t465) * t368 + t139) * t252 + (t91 * t265 + t261 * (pkin(3) * t178 * t366 + t97 * t285)) * t284 + (-t344 + t360) * t265 + (t259 * t103 * t285 + t159 * t366) * t461), (-(t140 * t224 + t146 * t430) * t454 + (t140 * t430 - t146 * t224) * t79) * t1, ((-t212 * t140 + t146 * t424) * t454 - t79 * (t140 * t424 + t212 * t146)) * t1, (-((t206 * t43 - t44 * t218) * t224 + (-t31 * t206 + t37 * t218) * t212) * t454 + ((-t206 * t44 - t43 * t218) * t224 + (t206 * t37 + t31 * t218) * t212) * t79) * t1, ((t20 * t218 + t206 * t7) * t454 - (t206 * t20 - t7 * t218) * t79) * t1, ((-t206 * t13 + t19 * t218) * t454 - (t13 * t218 + t206 * t19) * t79) * t1;];
Jinv  = t82;
