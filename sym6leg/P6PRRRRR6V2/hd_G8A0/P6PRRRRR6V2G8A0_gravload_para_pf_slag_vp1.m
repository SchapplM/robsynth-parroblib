% Calculate Gravitation load for parallel robot
% P6PRRRRR6V2G8A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-18 12:11
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G8A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-18 04:35:13
% EndTime: 2019-05-18 04:36:47
% DurationCPUTime: 113.28s
% Computational Cost: add. (24287->1500), mult. (63411->2679), div. (162->30), fcn. (60179->74), ass. (0->981)
t7616 = sin(qJ(2,6));
t7609 = legFrame(6,1);
t7546 = sin(t7609);
t7558 = cos(t7609);
t7627 = legFrame(6,2);
t7568 = sin(t7627);
t7574 = cos(t7627);
t7348 = t7568 * g(1) + (-g(2) * t7546 + g(3) * t7558) * t7574;
t7598 = sin(pkin(4));
t7602 = cos(pkin(4));
t7603 = legFrame(6,3);
t7540 = sin(t7603);
t7552 = cos(t7603);
t7994 = t7558 * t7568;
t8000 = t7546 * t7568;
t8097 = g(1) * t7574;
t7174 = -t7540 * t8097 + (-t7540 * t8000 + t7552 * t7558) * g(2) + (t7540 * t7994 + t7546 * t7552) * g(3);
t7175 = t7552 * t8097 + (t7540 * t7558 + t7552 * t8000) * g(2) + (t7540 * t7546 - t7552 * t7994) * g(3);
t7595 = sin(pkin(10));
t7599 = cos(pkin(10));
t7736 = t7599 * t7174 - t7175 * t7595;
t8143 = t7598 * t7348 + t7602 * t7736;
t8186 = t7616 * t8143;
t7618 = sin(qJ(2,5));
t7610 = legFrame(5,1);
t7547 = sin(t7610);
t7559 = cos(t7610);
t7628 = legFrame(5,2);
t7569 = sin(t7628);
t7575 = cos(t7628);
t7349 = t7569 * g(1) + (-g(2) * t7547 + g(3) * t7559) * t7575;
t7604 = legFrame(5,3);
t7541 = sin(t7604);
t7553 = cos(t7604);
t7993 = t7559 * t7569;
t7999 = t7547 * t7569;
t8096 = g(1) * t7575;
t7176 = -t7541 * t8096 + (-t7541 * t7999 + t7553 * t7559) * g(2) + (t7541 * t7993 + t7547 * t7553) * g(3);
t7177 = t7553 * t8096 + (t7541 * t7559 + t7553 * t7999) * g(2) + (t7541 * t7547 - t7553 * t7993) * g(3);
t7734 = t7599 * t7176 - t7177 * t7595;
t8144 = t7598 * t7349 + t7602 * t7734;
t8185 = t7618 * t8144;
t7620 = sin(qJ(2,4));
t7611 = legFrame(4,1);
t7548 = sin(t7611);
t7560 = cos(t7611);
t7629 = legFrame(4,2);
t7570 = sin(t7629);
t7576 = cos(t7629);
t7350 = t7570 * g(1) + (-g(2) * t7548 + g(3) * t7560) * t7576;
t7605 = legFrame(4,3);
t7542 = sin(t7605);
t7554 = cos(t7605);
t7992 = t7560 * t7570;
t7998 = t7548 * t7570;
t8095 = g(1) * t7576;
t7178 = -t7542 * t8095 + (-t7542 * t7998 + t7554 * t7560) * g(2) + (t7542 * t7992 + t7548 * t7554) * g(3);
t7179 = t7554 * t8095 + (t7542 * t7560 + t7554 * t7998) * g(2) + (t7542 * t7548 - t7554 * t7992) * g(3);
t7732 = t7599 * t7178 - t7179 * t7595;
t8145 = t7598 * t7350 + t7602 * t7732;
t8184 = t7620 * t8145;
t7634 = sin(qJ(2,3));
t7612 = legFrame(3,1);
t7549 = sin(t7612);
t7561 = cos(t7612);
t7630 = legFrame(3,2);
t7571 = sin(t7630);
t7577 = cos(t7630);
t7351 = t7571 * g(1) + (-g(2) * t7549 + g(3) * t7561) * t7577;
t7606 = legFrame(3,3);
t7543 = sin(t7606);
t7555 = cos(t7606);
t7991 = t7561 * t7571;
t7997 = t7549 * t7571;
t8094 = g(1) * t7577;
t7180 = -t7543 * t8094 + (-t7543 * t7997 + t7555 * t7561) * g(2) + (t7543 * t7991 + t7549 * t7555) * g(3);
t7181 = t7555 * t8094 + (t7543 * t7561 + t7555 * t7997) * g(2) + (t7543 * t7549 - t7555 * t7991) * g(3);
t7730 = t7599 * t7180 - t7181 * t7595;
t8146 = t7598 * t7351 + t7602 * t7730;
t8183 = t7634 * t8146;
t7636 = sin(qJ(2,2));
t7613 = legFrame(2,1);
t7550 = sin(t7613);
t7562 = cos(t7613);
t7631 = legFrame(2,2);
t7572 = sin(t7631);
t7578 = cos(t7631);
t7352 = t7572 * g(1) + (-g(2) * t7550 + g(3) * t7562) * t7578;
t7607 = legFrame(2,3);
t7544 = sin(t7607);
t7556 = cos(t7607);
t7990 = t7562 * t7572;
t7996 = t7550 * t7572;
t8093 = g(1) * t7578;
t7182 = -t7544 * t8093 + (-t7544 * t7996 + t7556 * t7562) * g(2) + (t7544 * t7990 + t7550 * t7556) * g(3);
t7183 = t7556 * t8093 + (t7544 * t7562 + t7556 * t7996) * g(2) + (t7544 * t7550 - t7556 * t7990) * g(3);
t7728 = t7599 * t7182 - t7183 * t7595;
t8147 = t7598 * t7352 + t7602 * t7728;
t8182 = t7636 * t8147;
t7638 = sin(qJ(2,1));
t7614 = legFrame(1,1);
t7551 = sin(t7614);
t7563 = cos(t7614);
t7632 = legFrame(1,2);
t7573 = sin(t7632);
t7579 = cos(t7632);
t7353 = t7573 * g(1) + (-g(2) * t7551 + g(3) * t7563) * t7579;
t7608 = legFrame(1,3);
t7545 = sin(t7608);
t7557 = cos(t7608);
t7989 = t7563 * t7573;
t7995 = t7551 * t7573;
t8092 = g(1) * t7579;
t7184 = -t7545 * t8092 + (-t7545 * t7995 + t7557 * t7563) * g(2) + (t7545 * t7989 + t7551 * t7557) * g(3);
t7185 = t7557 * t8092 + (t7545 * t7563 + t7557 * t7995) * g(2) + (t7545 * t7551 - t7557 * t7989) * g(3);
t7726 = t7599 * t7184 - t7185 * t7595;
t8148 = t7598 * t7353 + t7602 * t7726;
t8181 = t7638 * t8148;
t7601 = cos(pkin(5));
t7587 = t7601 ^ 2;
t8129 = t7587 - 0.1e1;
t7650 = xP(5);
t7581 = sin(t7650);
t7584 = cos(t7650);
t7655 = koppelP(6,3);
t7649 = xP(6);
t7580 = sin(t7649);
t7583 = cos(t7649);
t7661 = koppelP(6,1);
t8137 = koppelP(6,2);
t8167 = t7580 * t8137 - t7583 * t7661;
t7360 = t7581 * t8167 + t7584 * t7655;
t7467 = t7580 * t7661 + t7583 * t8137;
t7651 = xP(4);
t7582 = sin(t7651);
t7585 = cos(t7651);
t7213 = t7360 * t7582 - t7467 * t7585;
t7214 = t7360 * t7585 + t7467 * t7582;
t7656 = koppelP(5,3);
t7662 = koppelP(5,1);
t8138 = koppelP(5,2);
t8166 = t7580 * t8138 - t7583 * t7662;
t7362 = t7581 * t8166 + t7584 * t7656;
t7468 = t7580 * t7662 + t7583 * t8138;
t7217 = t7362 * t7582 - t7468 * t7585;
t7218 = t7362 * t7585 + t7468 * t7582;
t7657 = koppelP(4,3);
t7663 = koppelP(4,1);
t8139 = koppelP(4,2);
t8165 = t7580 * t8139 - t7583 * t7663;
t7364 = t7581 * t8165 + t7584 * t7657;
t7469 = t7580 * t7663 + t7583 * t8139;
t7221 = t7364 * t7582 - t7469 * t7585;
t7222 = t7364 * t7585 + t7469 * t7582;
t7658 = koppelP(3,3);
t7664 = koppelP(3,1);
t8140 = koppelP(3,2);
t8164 = t7580 * t8140 - t7583 * t7664;
t7366 = t7581 * t8164 + t7584 * t7658;
t7470 = t7580 * t7664 + t7583 * t8140;
t7225 = t7366 * t7582 - t7470 * t7585;
t7226 = t7366 * t7585 + t7470 * t7582;
t7659 = koppelP(2,3);
t7665 = koppelP(2,1);
t8141 = koppelP(2,2);
t8163 = t7580 * t8141 - t7583 * t7665;
t7368 = t7581 * t8163 + t7584 * t7659;
t7471 = t7580 * t7665 + t7583 * t8141;
t7229 = t7368 * t7582 - t7471 * t7585;
t7230 = t7368 * t7585 + t7471 * t7582;
t7660 = koppelP(1,3);
t7666 = koppelP(1,1);
t8142 = koppelP(1,2);
t8162 = t7580 * t8142 - t7583 * t7666;
t7370 = t7581 * t8162 + t7584 * t7660;
t7472 = t7580 * t7666 + t7583 * t8142;
t7233 = t7370 * t7582 - t7472 * t7585;
t7234 = t7370 * t7585 + t7472 * t7582;
t7652 = rSges(4,3);
t7653 = rSges(4,2);
t7654 = rSges(4,1);
t7724 = t7580 * t7653 - t7583 * t7654;
t8180 = -t7581 * t7652 + t7584 * t7724;
t7622 = cos(qJ(2,6));
t7932 = t7599 * t7622;
t7977 = t7595 * t7622;
t8179 = -t7174 * t7977 - t7175 * t7932 - t8186;
t7624 = cos(qJ(2,5));
t7931 = t7599 * t7624;
t7976 = t7595 * t7624;
t8178 = -t7176 * t7976 - t7177 * t7931 - t8185;
t7626 = cos(qJ(2,4));
t7930 = t7599 * t7626;
t7975 = t7595 * t7626;
t8177 = -t7178 * t7975 - t7179 * t7930 - t8184;
t7640 = cos(qJ(2,3));
t7929 = t7599 * t7640;
t7974 = t7595 * t7640;
t8176 = -t7180 * t7974 - t7181 * t7929 - t8183;
t7642 = cos(qJ(2,2));
t7928 = t7599 * t7642;
t7973 = t7595 * t7642;
t8175 = -t7182 * t7973 - t7183 * t7928 - t8182;
t7644 = cos(qJ(2,1));
t7927 = t7599 * t7644;
t7972 = t7595 * t7644;
t8174 = -t7184 * t7972 - t7185 * t7927 - t8181;
t7735 = t7174 * t7595 + t7175 * t7599;
t8173 = t7616 * t7735;
t7733 = t7176 * t7595 + t7177 * t7599;
t8172 = t7618 * t7733;
t7731 = t7178 * t7595 + t7179 * t7599;
t8171 = t7620 * t7731;
t7729 = t7180 * t7595 + t7181 * t7599;
t8170 = t7634 * t7729;
t7727 = t7182 * t7595 + t7183 * t7599;
t8169 = t7636 * t7727;
t7725 = t7184 * t7595 + t7185 * t7599;
t8168 = t7638 * t7725;
t7596 = sin(pkin(6));
t7539 = t7596 * pkin(9);
t8161 = t7539 * t8129;
t7803 = t8129 * t7602;
t7917 = t7602 * t7622;
t7425 = t7595 * t7917 + t7599 * t7616;
t7428 = -t7595 * t7616 + t7599 * t7917;
t7944 = t7598 * t7622;
t7162 = t7574 * t7944 + (t7425 * t7552 + t7428 * t7540) * t7568;
t7600 = cos(pkin(6));
t7537 = pkin(9) * t7600 + pkin(8);
t8110 = pkin(3) * t7537;
t7150 = t7162 * t8110;
t7410 = t7540 * t7599 + t7552 * t7595;
t8049 = t7410 * t7598;
t7312 = -t7568 * t8049 + t7602 * t7574;
t7897 = pkin(2) * t7539;
t7586 = t7600 ^ 2;
t7667 = pkin(9) ^ 2;
t7515 = pkin(3) ^ 2 + t7586 * t7667 - t7667;
t7615 = sin(qJ(3,6));
t8019 = t7515 * t7615;
t8160 = t7312 * (t7897 - t8019) + (t7312 * t8019 - t7150) * t7587 + t7150;
t7916 = t7602 * t7624;
t7426 = t7595 * t7916 + t7599 * t7618;
t7429 = -t7595 * t7618 + t7599 * t7916;
t7943 = t7598 * t7624;
t7164 = t7575 * t7943 + (t7426 * t7553 + t7429 * t7541) * t7569;
t7151 = t7164 * t8110;
t7411 = t7541 * t7599 + t7553 * t7595;
t8048 = t7411 * t7598;
t7313 = -t7569 * t8048 + t7602 * t7575;
t7617 = sin(qJ(3,5));
t8018 = t7515 * t7617;
t8159 = t7313 * (t7897 - t8018) + (t7313 * t8018 - t7151) * t7587 + t7151;
t7915 = t7602 * t7626;
t7427 = t7595 * t7915 + t7599 * t7620;
t7430 = -t7595 * t7620 + t7599 * t7915;
t7942 = t7598 * t7626;
t7166 = t7576 * t7942 + (t7427 * t7554 + t7430 * t7542) * t7570;
t7152 = t7166 * t8110;
t7412 = t7542 * t7599 + t7554 * t7595;
t8047 = t7412 * t7598;
t7314 = -t7570 * t8047 + t7602 * t7576;
t7619 = sin(qJ(3,4));
t8017 = t7515 * t7619;
t8158 = t7314 * (t7897 - t8017) + (t7314 * t8017 - t7152) * t7587 + t7152;
t7911 = t7602 * t7640;
t7441 = t7595 * t7911 + t7599 * t7634;
t7444 = -t7595 * t7634 + t7599 * t7911;
t7935 = t7598 * t7640;
t7168 = t7577 * t7935 + (t7441 * t7555 + t7444 * t7543) * t7571;
t7153 = t7168 * t8110;
t7413 = t7543 * t7599 + t7555 * t7595;
t8046 = t7413 * t7598;
t7315 = -t7571 * t8046 + t7602 * t7577;
t7633 = sin(qJ(3,3));
t8016 = t7515 * t7633;
t8157 = t7315 * (t7897 - t8016) + (t7315 * t8016 - t7153) * t7587 + t7153;
t7910 = t7602 * t7642;
t7442 = t7595 * t7910 + t7599 * t7636;
t7445 = -t7595 * t7636 + t7599 * t7910;
t7934 = t7598 * t7642;
t7170 = t7578 * t7934 + (t7442 * t7556 + t7445 * t7544) * t7572;
t7154 = t7170 * t8110;
t7414 = t7544 * t7599 + t7556 * t7595;
t8045 = t7414 * t7598;
t7316 = -t7572 * t8045 + t7602 * t7578;
t7635 = sin(qJ(3,2));
t8015 = t7515 * t7635;
t8156 = t7316 * (t7897 - t8015) + (t7316 * t8015 - t7154) * t7587 + t7154;
t7909 = t7602 * t7644;
t7443 = t7595 * t7909 + t7599 * t7638;
t7446 = -t7595 * t7638 + t7599 * t7909;
t7933 = t7598 * t7644;
t7172 = t7579 * t7933 + (t7443 * t7557 + t7446 * t7545) * t7573;
t7155 = t7172 * t8110;
t7415 = t7545 * t7599 + t7557 * t7595;
t8044 = t7415 * t7598;
t7317 = -t7573 * t8044 + t7602 * t7579;
t7637 = sin(qJ(3,1));
t8014 = t7515 * t7637;
t8155 = t7317 * (t7897 - t8014) + (t7317 * t8014 - t7155) * t7587 + t7155;
t7876 = t7537 * t7539;
t8004 = t7537 * t7637;
t8117 = pkin(3) * t7317;
t8154 = ((t7172 * t8004 - t8117) * t7587 + t8117) * t7539 - (-pkin(2) * t8117 + t7172 * t7876) * t7637;
t8005 = t7537 * t7635;
t8118 = pkin(3) * t7316;
t8153 = ((t7170 * t8005 - t8118) * t7587 + t8118) * t7539 - (-pkin(2) * t8118 + t7170 * t7876) * t7635;
t8006 = t7537 * t7633;
t8119 = pkin(3) * t7315;
t8152 = ((t7168 * t8006 - t8119) * t7587 + t8119) * t7539 - (-pkin(2) * t8119 + t7168 * t7876) * t7633;
t8010 = t7537 * t7619;
t8120 = pkin(3) * t7314;
t8151 = ((t7166 * t8010 - t8120) * t7587 + t8120) * t7539 - (-pkin(2) * t8120 + t7166 * t7876) * t7619;
t8011 = t7537 * t7617;
t8121 = pkin(3) * t7313;
t8150 = ((t7164 * t8011 - t8121) * t7587 + t8121) * t7539 - (-pkin(2) * t8121 + t7164 * t7876) * t7617;
t8012 = t7537 * t7615;
t8122 = pkin(3) * t7312;
t8149 = ((t7162 * t8012 - t8122) * t7587 + t8122) * t7539 - (-pkin(2) * t8122 + t7162 * t7876) * t7615;
t7288 = -t7425 * t7540 + t7428 * t7552;
t7920 = t7602 * t7616;
t7431 = t7599 * t7920 + t7977;
t7434 = -t7595 * t7920 + t7932;
t7291 = t7431 * t7552 + t7434 * t7540;
t7971 = t7596 * t7601;
t7873 = pkin(9) * t7971;
t7804 = pkin(3) * t7873;
t8130 = -t7515 / 0.2e1;
t8136 = -0.2e1 * t7288 * t7804 - 0.2e1 * t7291 * t8130;
t7289 = -t7426 * t7541 + t7429 * t7553;
t7919 = t7602 * t7618;
t7432 = t7599 * t7919 + t7976;
t7435 = -t7595 * t7919 + t7931;
t7292 = t7432 * t7553 + t7435 * t7541;
t8135 = -0.2e1 * t7289 * t7804 - 0.2e1 * t7292 * t8130;
t7290 = -t7427 * t7542 + t7430 * t7554;
t7918 = t7602 * t7620;
t7433 = t7599 * t7918 + t7975;
t7436 = -t7595 * t7918 + t7930;
t7293 = t7433 * t7554 + t7436 * t7542;
t8134 = -0.2e1 * t7290 * t7804 - 0.2e1 * t7293 * t8130;
t7306 = -t7441 * t7543 + t7444 * t7555;
t7914 = t7602 * t7634;
t7447 = t7599 * t7914 + t7974;
t7450 = -t7595 * t7914 + t7929;
t7309 = t7447 * t7555 + t7450 * t7543;
t8133 = -0.2e1 * t7306 * t7804 - 0.2e1 * t7309 * t8130;
t7307 = -t7442 * t7544 + t7445 * t7556;
t7913 = t7602 * t7636;
t7448 = t7599 * t7913 + t7973;
t7451 = -t7595 * t7913 + t7928;
t7310 = t7448 * t7556 + t7451 * t7544;
t8132 = -0.2e1 * t7307 * t7804 - 0.2e1 * t7310 * t8130;
t7308 = -t7443 * t7545 + t7446 * t7557;
t7912 = t7602 * t7638;
t7449 = t7599 * t7912 + t7972;
t7452 = -t7595 * t7912 + t7927;
t7311 = t7449 * t7557 + t7452 * t7545;
t8131 = -0.2e1 * t7308 * t7804 - 0.2e1 * t7311 * t8130;
t7621 = cos(qJ(3,6));
t7597 = sin(pkin(5));
t7964 = t7597 * t7598;
t7828 = t7599 * t7964;
t7829 = t7595 * t7964;
t7926 = t7601 * t7622;
t7673 = (t7348 * t7597 + t7736 * t7926) * t7602 + (t7348 * t7944 - t8173) * t7601 - t7174 * t7828 + t7175 * t7829;
t6958 = (-t7673 * t7615 + t7621 * t8179) * rSges(3,2) + (t7615 * t8179 + t7673 * t7621) * rSges(3,1);
t8128 = m(3) * t6958;
t7623 = cos(qJ(3,5));
t7925 = t7601 * t7624;
t7672 = (t7349 * t7597 + t7734 * t7925) * t7602 + (t7349 * t7943 - t8172) * t7601 - t7176 * t7828 + t7177 * t7829;
t6959 = (-t7672 * t7617 + t7623 * t8178) * rSges(3,2) + (t7617 * t8178 + t7672 * t7623) * rSges(3,1);
t8127 = m(3) * t6959;
t7625 = cos(qJ(3,4));
t7924 = t7601 * t7626;
t7671 = (t7350 * t7597 + t7732 * t7924) * t7602 + (t7350 * t7942 - t8171) * t7601 - t7178 * t7828 + t7179 * t7829;
t6960 = (-t7671 * t7619 + t7625 * t8177) * rSges(3,2) + (t7619 * t8177 + t7671 * t7625) * rSges(3,1);
t8126 = m(3) * t6960;
t7639 = cos(qJ(3,3));
t7923 = t7601 * t7640;
t7670 = (t7351 * t7597 + t7730 * t7923) * t7602 + (t7351 * t7935 - t8170) * t7601 - t7180 * t7828 + t7181 * t7829;
t6961 = (-t7670 * t7633 + t7639 * t8176) * rSges(3,2) + (t7633 * t8176 + t7670 * t7639) * rSges(3,1);
t8125 = m(3) * t6961;
t7641 = cos(qJ(3,2));
t7922 = t7601 * t7642;
t7669 = (t7352 * t7597 + t7728 * t7922) * t7602 + (t7352 * t7934 - t8169) * t7601 - t7182 * t7828 + t7183 * t7829;
t6962 = (-t7669 * t7635 + t7641 * t8175) * rSges(3,2) + (t7635 * t8175 + t7669 * t7641) * rSges(3,1);
t8124 = m(3) * t6962;
t7643 = cos(qJ(3,1));
t7921 = t7601 * t7644;
t7668 = (t7353 * t7597 + t7726 * t7921) * t7602 + (t7353 * t7933 - t8168) * t7601 - t7184 * t7828 + t7185 * t7829;
t6963 = (-t7668 * t7637 + t7643 * t8174) * rSges(3,2) + (t7637 * t8174 + t7668 * t7643) * rSges(3,1);
t8123 = m(3) * t6963;
t7970 = t7596 * t7615;
t7519 = pkin(9) * t7970;
t7503 = 0.2e1 * t7519 + pkin(2);
t8116 = pkin(3) * t7503;
t7969 = t7596 * t7617;
t7521 = pkin(9) * t7969;
t7505 = 0.2e1 * t7521 + pkin(2);
t8115 = pkin(3) * t7505;
t7968 = t7596 * t7619;
t7523 = pkin(9) * t7968;
t7507 = 0.2e1 * t7523 + pkin(2);
t8114 = pkin(3) * t7507;
t7967 = t7596 * t7633;
t7528 = pkin(9) * t7967;
t7509 = 0.2e1 * t7528 + pkin(2);
t8113 = pkin(3) * t7509;
t7966 = t7596 * t7635;
t7530 = pkin(9) * t7966;
t7511 = 0.2e1 * t7530 + pkin(2);
t8112 = pkin(3) * t7511;
t7965 = t7596 * t7637;
t7532 = pkin(9) * t7965;
t7513 = 0.2e1 * t7532 + pkin(2);
t8111 = pkin(3) * t7513;
t8109 = pkin(3) * t7596;
t8108 = pkin(3) * t7598;
t8107 = pkin(3) * t7601;
t8106 = pkin(3) * t7602;
t8105 = pkin(3) * t7621;
t8104 = pkin(3) * t7623;
t8103 = pkin(3) * t7625;
t8102 = pkin(3) * t7639;
t8101 = pkin(3) * t7641;
t8100 = pkin(3) * t7643;
t8099 = pkin(9) * t7597;
t8098 = pkin(9) * t7598;
t7504 = t7519 + pkin(2);
t7506 = t7521 + pkin(2);
t7508 = t7523 + pkin(2);
t7510 = t7528 + pkin(2);
t7512 = t7530 + pkin(2);
t7514 = t7532 + pkin(2);
t7963 = t7597 * t7601;
t7836 = t7537 * t7963;
t7473 = pkin(3) * t7836;
t7870 = t7515 * t8129;
t7685 = -t7615 * t7870 - t7897;
t7270 = t7473 + t7685;
t7837 = t7515 * t7963;
t7779 = t7615 * t7837;
t7814 = t8129 * t8110;
t7318 = t7779 + t7814;
t7517 = pkin(3) * t7963;
t7868 = t7615 * t8129;
t7324 = t7537 * t7868 + t7517;
t7871 = (-t7586 + 0.1e1) * pkin(9);
t7474 = pkin(2) * t7970 + t7871;
t7588 = t7621 ^ 2;
t7815 = -0.2e1 * t7517;
t7988 = (t7601 + 0.1e1) * (t7601 - 0.1e1);
t7889 = 0.2e1 * t7988;
t7896 = pkin(3) * t7539;
t7759 = t7836 * t7539;
t7906 = t7615 * t7759 + pkin(3) * (pkin(2) * t7615 + t7539);
t7962 = t7597 * t7616;
t7012 = 0.1e1 / ((t7270 * t7621 + (t7588 * t7889 - t7587) * t7896 + t7906) * t7602 + ((t7318 * t7621 + (t7588 * t7815 + t7324) * t7539) * t7622 + (pkin(9) * t7474 + t7503 * t8105 + t7515 * t7588) * t7962) * t7598);
t8091 = t6958 * t7012;
t7684 = -t7617 * t7870 - t7897;
t7271 = t7473 + t7684;
t7778 = t7617 * t7837;
t7319 = t7778 + t7814;
t7867 = t7617 * t8129;
t7325 = t7537 * t7867 + t7517;
t7475 = pkin(2) * t7969 + t7871;
t7589 = t7623 ^ 2;
t7905 = t7617 * t7759 + pkin(3) * (pkin(2) * t7617 + t7539);
t7961 = t7597 * t7618;
t7013 = 0.1e1 / ((t7271 * t7623 + (t7589 * t7889 - t7587) * t7896 + t7905) * t7602 + ((t7319 * t7623 + (t7589 * t7815 + t7325) * t7539) * t7624 + (pkin(9) * t7475 + t7505 * t8104 + t7515 * t7589) * t7961) * t7598);
t8090 = t6959 * t7013;
t7683 = -t7619 * t7870 - t7897;
t7272 = t7473 + t7683;
t7777 = t7619 * t7837;
t7320 = t7777 + t7814;
t7866 = t7619 * t8129;
t7326 = t7537 * t7866 + t7517;
t7476 = pkin(2) * t7968 + t7871;
t7590 = t7625 ^ 2;
t7904 = t7619 * t7759 + pkin(3) * (pkin(2) * t7619 + t7539);
t7960 = t7597 * t7620;
t7014 = 0.1e1 / ((t7272 * t7625 + (t7590 * t7889 - t7587) * t7896 + t7904) * t7602 + ((t7320 * t7625 + (t7590 * t7815 + t7326) * t7539) * t7626 + (pkin(9) * t7476 + t7507 * t8103 + t7515 * t7590) * t7960) * t7598);
t8089 = t6960 * t7014;
t7682 = -t7633 * t7870 - t7897;
t7273 = t7473 + t7682;
t7776 = t7633 * t7837;
t7321 = t7776 + t7814;
t7865 = t7633 * t8129;
t7327 = t7537 * t7865 + t7517;
t7480 = pkin(2) * t7967 + t7871;
t7592 = t7639 ^ 2;
t7903 = t7633 * t7759 + pkin(3) * (pkin(2) * t7633 + t7539);
t7959 = t7597 * t7634;
t7018 = 0.1e1 / ((t7273 * t7639 + (t7592 * t7889 - t7587) * t7896 + t7903) * t7602 + ((t7321 * t7639 + (t7592 * t7815 + t7327) * t7539) * t7640 + (pkin(9) * t7480 + t7509 * t8102 + t7515 * t7592) * t7959) * t7598);
t8088 = t6961 * t7018;
t7681 = -t7635 * t7870 - t7897;
t7274 = t7473 + t7681;
t7775 = t7635 * t7837;
t7322 = t7775 + t7814;
t7864 = t7635 * t8129;
t7328 = t7537 * t7864 + t7517;
t7481 = pkin(2) * t7966 + t7871;
t7593 = t7641 ^ 2;
t7902 = t7635 * t7759 + pkin(3) * (pkin(2) * t7635 + t7539);
t7958 = t7597 * t7636;
t7019 = 0.1e1 / ((t7274 * t7641 + (t7593 * t7889 - t7587) * t7896 + t7902) * t7602 + ((t7322 * t7641 + (t7593 * t7815 + t7328) * t7539) * t7642 + (pkin(9) * t7481 + t7511 * t8101 + t7515 * t7593) * t7958) * t7598);
t8087 = t6962 * t7019;
t7680 = -t7637 * t7870 - t7897;
t7275 = t7473 + t7680;
t7774 = t7637 * t7837;
t7323 = t7774 + t7814;
t7863 = t7637 * t8129;
t7329 = t7537 * t7863 + t7517;
t7482 = pkin(2) * t7965 + t7871;
t7594 = t7643 ^ 2;
t7901 = t7637 * t7759 + pkin(3) * (pkin(2) * t7637 + t7539);
t7957 = t7597 * t7638;
t7020 = 0.1e1 / ((t7275 * t7643 + (t7594 * t7889 - t7587) * t7896 + t7901) * t7602 + ((t7323 * t7643 + (t7594 * t7815 + t7329) * t7539) * t7644 + (pkin(9) * t7482 + t7513 * t8100 + t7515 * t7594) * t7957) * t7598);
t8086 = t6963 * t7020;
t7646 = m(2) * rSges(2,2);
t7899 = m(2) * rSges(2,1) + m(3) * pkin(2);
t7908 = (pkin(8) + rSges(3,3)) * t7597;
t6970 = (-t7622 * t8143 + t8173) * ((rSges(3,1) * t7621 - rSges(3,2) * t7615) * m(3) + t7899) + (t7622 * t7735 + t8186) * (t7646 + ((rSges(3,1) * t7615 + rSges(3,2) * t7621) * t7601 - t7908) * m(3));
t7453 = t7602 * t7836;
t7525 = pkin(2) * t7962;
t7869 = t7537 * t8129;
t7785 = t7622 * t7869;
t7192 = t7453 + (t7525 + t7785) * t7598;
t7827 = t7597 * t7926;
t7378 = t7598 * t7827 - t7803;
t7838 = t7515 * t7964;
t7394 = t7616 * t7838;
t7874 = t7598 * t7539;
t7744 = 0.2e1 * pkin(3) * t7597 * t7874;
t7454 = t7616 * t7744;
t7538 = pkin(2) * t8106;
t7794 = (t7600 + 0.1e1) * (t7600 - 0.1e1) * t8099;
t7758 = t7616 * t7794;
t7806 = t7602 * t7897;
t7872 = -0.2e1 * t7896;
t7000 = 0.1e1 / ((t7378 * t7872 + t7394) * t7588 + ((t7378 * t7515 + t7454) * t7615 - t7806 + pkin(3) * t7192) * t7621 + (t7192 * t7539 + t7538) * t7615 + (t7378 * t8109 - t7598 * t7758) * pkin(9));
t8085 = t6970 * t7000;
t6971 = (-t7624 * t8144 + t8172) * ((rSges(3,1) * t7623 - rSges(3,2) * t7617) * m(3) + t7899) + (t7624 * t7733 + t8185) * (t7646 + ((rSges(3,1) * t7617 + rSges(3,2) * t7623) * t7601 - t7908) * m(3));
t7526 = pkin(2) * t7961;
t7784 = t7624 * t7869;
t7193 = t7453 + (t7526 + t7784) * t7598;
t7826 = t7597 * t7925;
t7379 = t7598 * t7826 - t7803;
t7395 = t7618 * t7838;
t7455 = t7618 * t7744;
t7757 = t7618 * t7794;
t7001 = 0.1e1 / ((t7379 * t7872 + t7395) * t7589 + ((t7379 * t7515 + t7455) * t7617 - t7806 + pkin(3) * t7193) * t7623 + (t7193 * t7539 + t7538) * t7617 + (t7379 * t8109 - t7598 * t7757) * pkin(9));
t8084 = t6971 * t7001;
t6972 = (-t7626 * t8145 + t8171) * ((rSges(3,1) * t7625 - rSges(3,2) * t7619) * m(3) + t7899) + (t7626 * t7731 + t8184) * (t7646 + ((rSges(3,1) * t7619 + rSges(3,2) * t7625) * t7601 - t7908) * m(3));
t7527 = pkin(2) * t7960;
t7783 = t7626 * t7869;
t7194 = t7453 + (t7527 + t7783) * t7598;
t7825 = t7597 * t7924;
t7380 = t7598 * t7825 - t7803;
t7396 = t7620 * t7838;
t7456 = t7620 * t7744;
t7756 = t7620 * t7794;
t7002 = 0.1e1 / ((t7380 * t7872 + t7396) * t7590 + ((t7380 * t7515 + t7456) * t7619 - t7806 + pkin(3) * t7194) * t7625 + (t7194 * t7539 + t7538) * t7619 + (t7380 * t8109 - t7598 * t7756) * pkin(9));
t8083 = t6972 * t7002;
t6973 = (-t7640 * t8146 + t8170) * ((rSges(3,1) * t7639 - rSges(3,2) * t7633) * m(3) + t7899) + (t7640 * t7729 + t8183) * (t7646 + ((rSges(3,1) * t7633 + rSges(3,2) * t7639) * t7601 - t7908) * m(3));
t7534 = pkin(2) * t7959;
t7782 = t7640 * t7869;
t7195 = t7453 + (t7534 + t7782) * t7598;
t7824 = t7597 * t7923;
t7381 = t7598 * t7824 - t7803;
t7403 = t7634 * t7838;
t7457 = t7634 * t7744;
t7755 = t7634 * t7794;
t7003 = 0.1e1 / ((t7381 * t7872 + t7403) * t7592 + ((t7381 * t7515 + t7457) * t7633 - t7806 + pkin(3) * t7195) * t7639 + (t7195 * t7539 + t7538) * t7633 + (t7381 * t8109 - t7598 * t7755) * pkin(9));
t8082 = t6973 * t7003;
t6974 = (-t7642 * t8147 + t8169) * ((rSges(3,1) * t7641 - rSges(3,2) * t7635) * m(3) + t7899) + (t7642 * t7727 + t8182) * (t7646 + ((rSges(3,1) * t7635 + rSges(3,2) * t7641) * t7601 - t7908) * m(3));
t7535 = pkin(2) * t7958;
t7781 = t7642 * t7869;
t7196 = t7453 + (t7535 + t7781) * t7598;
t7823 = t7597 * t7922;
t7382 = t7598 * t7823 - t7803;
t7404 = t7636 * t7838;
t7458 = t7636 * t7744;
t7754 = t7636 * t7794;
t7004 = 0.1e1 / ((t7382 * t7872 + t7404) * t7593 + ((t7382 * t7515 + t7458) * t7635 - t7806 + pkin(3) * t7196) * t7641 + (t7196 * t7539 + t7538) * t7635 + (t7382 * t8109 - t7598 * t7754) * pkin(9));
t8081 = t6974 * t7004;
t6975 = (-t7644 * t8148 + t8168) * ((rSges(3,1) * t7643 - rSges(3,2) * t7637) * m(3) + t7899) + (t7644 * t7725 + t8181) * (t7646 + ((rSges(3,1) * t7637 + rSges(3,2) * t7643) * t7601 - t7908) * m(3));
t7536 = pkin(2) * t7957;
t7780 = t7644 * t7869;
t7197 = t7453 + (t7536 + t7780) * t7598;
t7822 = t7597 * t7921;
t7383 = t7598 * t7822 - t7803;
t7405 = t7638 * t7838;
t7459 = t7638 * t7744;
t7753 = t7638 * t7794;
t7005 = 0.1e1 / ((t7383 * t7872 + t7405) * t7594 + ((t7383 * t7515 + t7459) * t7637 - t7806 + pkin(3) * t7197) * t7643 + (t7197 * t7539 + t7538) * t7637 + (t7383 * t8109 - t7598 * t7753) * pkin(9));
t8080 = t6975 * t7005;
t7494 = t7537 * t8106;
t7821 = t7615 * t7944;
t7844 = t7503 * t7962;
t7102 = (t7515 * t7821 + t7494) * t7963 + (t7785 + t7844) * t8108 + t7685 * t7602;
t7767 = t7896 * t7988;
t7409 = t7602 * t7767;
t7793 = t7622 * t7873;
t7210 = (pkin(3) * t7793 + t7616 * t8130) * t7964 - t7409;
t7186 = 0.2e1 * t7210 * t7588;
t7518 = t7596 * t8106;
t7516 = pkin(9) * t7518;
t7795 = t7537 * t7874;
t7875 = t7587 * t7539;
t7949 = t7598 * t7616;
t7773 = ((pkin(3) * t7944 + t7602 * t8012) * t7971 + t7474 * t7949) * t8099 + (t7537 * t7821 - t8106) * t7875 + (-t7622 * t7795 + t7538) * t7615 + t7516;
t8079 = 0.1e1 / (t7102 * t7621 - t7186 + t7773) * t7348;
t7820 = t7617 * t7943;
t7843 = t7505 * t7961;
t7103 = (t7515 * t7820 + t7494) * t7963 + (t7784 + t7843) * t8108 + t7684 * t7602;
t7792 = t7624 * t7873;
t7211 = (pkin(3) * t7792 + t7618 * t8130) * t7964 - t7409;
t7187 = 0.2e1 * t7211 * t7589;
t7947 = t7598 * t7618;
t7772 = ((pkin(3) * t7943 + t7602 * t8011) * t7971 + t7475 * t7947) * t8099 + (t7537 * t7820 - t8106) * t7875 + (-t7624 * t7795 + t7538) * t7617 + t7516;
t8078 = 0.1e1 / (t7103 * t7623 - t7187 + t7772) * t7349;
t7819 = t7619 * t7942;
t7842 = t7507 * t7960;
t7104 = (t7515 * t7819 + t7494) * t7963 + (t7783 + t7842) * t8108 + t7683 * t7602;
t7791 = t7626 * t7873;
t7212 = (pkin(3) * t7791 + t7620 * t8130) * t7964 - t7409;
t7188 = 0.2e1 * t7212 * t7590;
t7945 = t7598 * t7620;
t7771 = ((pkin(3) * t7942 + t7602 * t8010) * t7971 + t7476 * t7945) * t8099 + (t7537 * t7819 - t8106) * t7875 + (-t7626 * t7795 + t7538) * t7619 + t7516;
t8077 = 0.1e1 / (t7104 * t7625 - t7188 + t7771) * t7350;
t7818 = t7633 * t7935;
t7841 = t7509 * t7959;
t7111 = (t7515 * t7818 + t7494) * t7963 + (t7782 + t7841) * t8108 + t7682 * t7602;
t7790 = t7640 * t7873;
t7249 = (pkin(3) * t7790 + t7634 * t8130) * t7964 - t7409;
t7189 = 0.2e1 * t7249 * t7592;
t7940 = t7598 * t7634;
t7770 = ((pkin(3) * t7935 + t7602 * t8006) * t7971 + t7480 * t7940) * t8099 + (t7537 * t7818 - t8106) * t7875 + (-t7640 * t7795 + t7538) * t7633 + t7516;
t8076 = 0.1e1 / (t7111 * t7639 - t7189 + t7770) * t7351;
t7817 = t7635 * t7934;
t7840 = t7511 * t7958;
t7112 = (t7515 * t7817 + t7494) * t7963 + (t7781 + t7840) * t8108 + t7681 * t7602;
t7789 = t7642 * t7873;
t7250 = (pkin(3) * t7789 + t7636 * t8130) * t7964 - t7409;
t7190 = 0.2e1 * t7250 * t7593;
t7938 = t7598 * t7636;
t7769 = ((pkin(3) * t7934 + t7602 * t8005) * t7971 + t7481 * t7938) * t8099 + (t7537 * t7817 - t8106) * t7875 + (-t7642 * t7795 + t7538) * t7635 + t7516;
t8075 = 0.1e1 / (t7112 * t7641 - t7190 + t7769) * t7352;
t7816 = t7637 * t7933;
t7839 = t7513 * t7957;
t7113 = (t7515 * t7816 + t7494) * t7963 + (t7780 + t7839) * t8108 + t7680 * t7602;
t7788 = t7644 * t7873;
t7251 = (pkin(3) * t7788 + t7638 * t8130) * t7964 - t7409;
t7191 = 0.2e1 * t7251 * t7594;
t7936 = t7598 * t7638;
t7768 = ((pkin(3) * t7933 + t7602 * t8004) * t7971 + t7482 * t7936) * t8099 + (t7537 * t7816 - t8106) * t7875 + (-t7644 * t7795 + t7538) * t7637 + t7516;
t8074 = 0.1e1 / (t7113 * t7643 - t7191 + t7768) * t7353;
t7339 = t7581 * t7655 - t7584 * t8167;
t8073 = t7000 * t7339;
t7340 = t7581 * t7656 - t7584 * t8166;
t8072 = t7001 * t7340;
t7341 = t7581 * t7657 - t7584 * t8165;
t8071 = t7002 * t7341;
t7342 = t7581 * t7658 - t7584 * t8164;
t8070 = t7003 * t7342;
t7343 = t7581 * t7659 - t7584 * t8163;
t8069 = t7004 * t7343;
t7344 = t7581 * t7660 - t7584 * t8162;
t8068 = t7005 * t7344;
t8067 = t7012 * t7339;
t8066 = t7013 * t7340;
t8065 = t7014 * t7341;
t8064 = t7018 * t7342;
t8063 = t7019 * t7343;
t8062 = t7020 * t7344;
t8013 = t7537 * t7597;
t7391 = t7615 * t8107 - t8013;
t7330 = t7621 * t7873 - t7391;
t7477 = t7504 + t8105;
t8055 = (t7330 * t7616 + t7477 * t7622) * t7602;
t7392 = t7617 * t8107 - t8013;
t7331 = t7623 * t7873 - t7392;
t7478 = t7506 + t8104;
t8054 = (t7331 * t7618 + t7478 * t7624) * t7602;
t7393 = t7619 * t8107 - t8013;
t7332 = t7625 * t7873 - t7393;
t7479 = t7508 + t8103;
t8053 = (t7332 * t7620 + t7479 * t7626) * t7602;
t7397 = t7633 * t8107 - t8013;
t7336 = t7639 * t7873 - t7397;
t7483 = t7510 + t8102;
t8052 = (t7336 * t7634 + t7483 * t7640) * t7602;
t7398 = t7635 * t8107 - t8013;
t7337 = t7641 * t7873 - t7398;
t7484 = t7512 + t8101;
t8051 = (t7337 * t7636 + t7484 * t7642) * t7602;
t7399 = t7637 * t8107 - t8013;
t7338 = t7643 * t7873 - t7399;
t7485 = t7514 + t8100;
t8050 = (t7338 * t7638 + t7485 * t7644) * t7602;
t7416 = -t7540 * t7595 + t7552 * t7599;
t8043 = t7416 * t7598;
t8042 = t7416 * t7602;
t7417 = -t7541 * t7595 + t7553 * t7599;
t8041 = t7417 * t7598;
t8040 = t7417 * t7602;
t7418 = -t7542 * t7595 + t7554 * t7599;
t8039 = t7418 * t7598;
t8038 = t7418 * t7602;
t7419 = -t7543 * t7595 + t7555 * t7599;
t8037 = t7419 * t7598;
t8036 = t7419 * t7602;
t7420 = -t7544 * t7595 + t7556 * t7599;
t8035 = t7420 * t7598;
t8034 = t7420 * t7602;
t7421 = -t7545 * t7595 + t7557 * t7599;
t8033 = t7421 * t7598;
t8032 = t7421 * t7602;
t8009 = t7537 * t7622;
t8008 = t7537 * t7624;
t8007 = t7537 * t7626;
t8003 = t7537 * t7640;
t8002 = t7537 * t7642;
t8001 = t7537 * t7644;
t7986 = t7581 * t7653;
t7985 = t7581 * t7654;
t7978 = t7584 * t7652;
t7950 = t7598 * t7615;
t7948 = t7598 * t7617;
t7946 = t7598 * t7619;
t7941 = t7598 * t7633;
t7939 = t7598 * t7635;
t7937 = t7598 * t7637;
t7907 = t7602 * t7759 + t7538;
t7787 = t7587 * t7518;
t7900 = 0.2e1 * pkin(9) * t7787 - 0.2e1 * t7516;
t7898 = pkin(2) * t8108;
t7888 = pkin(3) * t8049;
t7887 = pkin(3) * t8048;
t7886 = pkin(3) * t8047;
t7885 = pkin(3) * t8046;
t7884 = pkin(3) * t8045;
t7883 = pkin(3) * t8044;
t7882 = pkin(3) * t8043;
t7881 = pkin(3) * t8041;
t7880 = pkin(3) * t8039;
t7879 = pkin(3) * t8037;
t7878 = pkin(3) * t8035;
t7877 = pkin(3) * t8033;
t7277 = t7410 * t7622 + t7416 * t7920;
t7704 = (t7518 - t7787) * pkin(9);
t7710 = (-t7410 * t7616 + t7416 * t7917) * t7601 - t7416 * t7964;
t7743 = pkin(3) * t7453 - t7806;
t7760 = t7515 * t7803;
t7766 = t7587 * t8009 + t7525 - t8009;
t7862 = 0.1e1 / ((t7394 + t7900) * t7588 + ((t7454 - t7760) * t7615 + t7743) * t7621 + t7907 * t7615 + t7704 + ((pkin(3) * t7766 + t7622 * t7779) * t7621 + (-t7758 + (t7766 * t7615 + (-0.2e1 * t7588 + 0.1e1) * pkin(3) * t7827) * t7596) * pkin(9)) * t7598) * ((pkin(3) * t7710 + t7277 * t7539) * t7621 + t7615 * (-pkin(3) * t7277 + t7539 * t7710)) * t7574;
t7279 = t7411 * t7624 + t7417 * t7919;
t7709 = (-t7411 * t7618 + t7417 * t7916) * t7601 - t7417 * t7964;
t7765 = t7587 * t8008 + t7526 - t8008;
t7861 = 0.1e1 / ((t7395 + t7900) * t7589 + ((t7455 - t7760) * t7617 + t7743) * t7623 + t7907 * t7617 + t7704 + ((pkin(3) * t7765 + t7624 * t7778) * t7623 + (-t7757 + (t7765 * t7617 + (-0.2e1 * t7589 + 0.1e1) * pkin(3) * t7826) * t7596) * pkin(9)) * t7598) * ((pkin(3) * t7709 + t7279 * t7539) * t7623 + t7617 * (-pkin(3) * t7279 + t7539 * t7709)) * t7575;
t7281 = t7412 * t7626 + t7418 * t7918;
t7708 = (-t7412 * t7620 + t7418 * t7915) * t7601 - t7418 * t7964;
t7764 = t7587 * t8007 + t7527 - t8007;
t7860 = 0.1e1 / ((t7396 + t7900) * t7590 + ((t7456 - t7760) * t7619 + t7743) * t7625 + t7907 * t7619 + t7704 + ((pkin(3) * t7764 + t7626 * t7777) * t7625 + (-t7756 + (t7764 * t7619 + (-0.2e1 * t7590 + 0.1e1) * pkin(3) * t7825) * t7596) * pkin(9)) * t7598) * ((pkin(3) * t7708 + t7281 * t7539) * t7625 + t7619 * (-pkin(3) * t7281 + t7539 * t7708)) * t7576;
t7295 = t7413 * t7640 + t7419 * t7914;
t7707 = (-t7413 * t7634 + t7419 * t7911) * t7601 - t7419 * t7964;
t7763 = t7587 * t8003 + t7534 - t8003;
t7859 = 0.1e1 / ((t7403 + t7900) * t7592 + ((t7457 - t7760) * t7633 + t7743) * t7639 + t7907 * t7633 + t7704 + ((pkin(3) * t7763 + t7640 * t7776) * t7639 + (-t7755 + (t7763 * t7633 + (-0.2e1 * t7592 + 0.1e1) * pkin(3) * t7824) * t7596) * pkin(9)) * t7598) * ((pkin(3) * t7707 + t7295 * t7539) * t7639 + t7633 * (-pkin(3) * t7295 + t7539 * t7707)) * t7577;
t7297 = t7414 * t7642 + t7420 * t7913;
t7706 = (-t7414 * t7636 + t7420 * t7910) * t7601 - t7420 * t7964;
t7762 = t7587 * t8002 + t7535 - t8002;
t7858 = 0.1e1 / ((t7404 + t7900) * t7593 + ((t7458 - t7760) * t7635 + t7743) * t7641 + t7907 * t7635 + t7704 + ((pkin(3) * t7762 + t7642 * t7775) * t7641 + (-t7754 + (t7762 * t7635 + (-0.2e1 * t7593 + 0.1e1) * pkin(3) * t7823) * t7596) * pkin(9)) * t7598) * ((pkin(3) * t7706 + t7297 * t7539) * t7641 + t7635 * (-pkin(3) * t7297 + t7539 * t7706)) * t7578;
t7299 = t7415 * t7644 + t7421 * t7912;
t7705 = (-t7415 * t7638 + t7421 * t7909) * t7601 - t7421 * t7964;
t7761 = t7587 * t8001 + t7536 - t8001;
t7857 = 0.1e1 / ((t7405 + t7900) * t7594 + ((t7459 - t7760) * t7637 + t7743) * t7643 + t7907 * t7637 + t7704 + ((pkin(3) * t7761 + t7644 * t7774) * t7643 + (-t7753 + (t7761 * t7637 + (-0.2e1 * t7594 + 0.1e1) * pkin(3) * t7822) * t7596) * pkin(9)) * t7598) * ((pkin(3) * t7705 + t7299 * t7539) * t7643 + t7637 * (-pkin(3) * t7299 + t7539 * t7705)) * t7579;
t7591 = m(1) + m(2) + m(3);
t7856 = t7591 * t8079;
t7855 = t7591 * t8078;
t7854 = t7591 * t8077;
t7853 = t7591 * t8076;
t7852 = t7591 * t8075;
t7851 = t7591 * t8074;
t7805 = pkin(3) * t7875;
t7850 = 0.1e1 / (-t7186 + (t7270 * t7602 + t7598 * (pkin(3) * t7844 + t7318 * t7622)) * t7621 + (-t7805 + t7906) * t7602 + (t7324 * t7596 * t7622 + t7474 * t7962) * t8098) * (((pkin(3) * t7622 + t7616 * t7873) * t8042 + t7410 * (-pkin(3) * t7616 + t7793)) * t7621 + (-t7391 * t7616 + t7504 * t7622) * t8042 - t7410 * (t7391 * t7622 + t7504 * t7616)) * t7574;
t7849 = 0.1e1 / (-t7187 + (t7271 * t7602 + t7598 * (pkin(3) * t7843 + t7319 * t7624)) * t7623 + (-t7805 + t7905) * t7602 + (t7325 * t7596 * t7624 + t7475 * t7961) * t8098) * (((pkin(3) * t7624 + t7618 * t7873) * t8040 + t7411 * (-pkin(3) * t7618 + t7792)) * t7623 + (-t7392 * t7618 + t7506 * t7624) * t8040 - t7411 * (t7392 * t7624 + t7506 * t7618)) * t7575;
t7848 = 0.1e1 / (-t7188 + (t7272 * t7602 + t7598 * (pkin(3) * t7842 + t7320 * t7626)) * t7625 + (-t7805 + t7904) * t7602 + (t7326 * t7596 * t7626 + t7476 * t7960) * t8098) * (((pkin(3) * t7626 + t7620 * t7873) * t8038 + t7412 * (-pkin(3) * t7620 + t7791)) * t7625 + (-t7393 * t7620 + t7508 * t7626) * t8038 - t7412 * (t7393 * t7626 + t7508 * t7620)) * t7576;
t7847 = 0.1e1 / (-t7189 + (t7273 * t7602 + t7598 * (pkin(3) * t7841 + t7321 * t7640)) * t7639 + (-t7805 + t7903) * t7602 + (t7327 * t7596 * t7640 + t7480 * t7959) * t8098) * (((pkin(3) * t7640 + t7634 * t7873) * t8036 + t7413 * (-pkin(3) * t7634 + t7790)) * t7639 + (-t7397 * t7634 + t7510 * t7640) * t8036 - t7413 * (t7397 * t7640 + t7510 * t7634)) * t7577;
t7846 = 0.1e1 / (-t7190 + (t7274 * t7602 + t7598 * (pkin(3) * t7840 + t7322 * t7642)) * t7641 + (-t7805 + t7902) * t7602 + (t7328 * t7596 * t7642 + t7481 * t7958) * t8098) * (((pkin(3) * t7642 + t7636 * t7873) * t8034 + t7414 * (-pkin(3) * t7636 + t7789)) * t7641 + (-t7398 * t7636 + t7512 * t7642) * t8034 - t7414 * (t7398 * t7642 + t7512 * t7636)) * t7578;
t7845 = 0.1e1 / (-t7191 + (t7275 * t7602 + t7598 * (pkin(3) * t7839 + t7323 * t7644)) * t7643 + (-t7805 + t7901) * t7602 + (t7329 * t7596 * t7644 + t7482 * t7957) * t8098) * (((pkin(3) * t7644 + t7638 * t7873) * t8032 + t7415 * (-pkin(3) * t7638 + t7788)) * t7643 + (-t7399 * t7638 + t7514 * t7644) * t8032 - t7415 * (t7399 * t7644 + t7514 * t7638)) * t7579;
t7835 = t7537 * t7950;
t7834 = t7537 * t7948;
t7833 = t7537 * t7946;
t7832 = t7537 * t7941;
t7831 = t7537 * t7939;
t7830 = t7537 * t7937;
t7813 = t7615 * t7898;
t7812 = t7617 * t7898;
t7811 = t7619 * t7898;
t7810 = t7633 * t7898;
t7809 = t7635 * t7898;
t7808 = t7637 * t7898;
t7807 = pkin(2) * t7874;
t7796 = pkin(3) * t7869;
t7786 = 0.2e1 * t7804;
t7746 = -0.2e1 * t7767;
t7745 = 0.2e1 * t7767;
t7163 = -t7574 * t7949 + (-t7431 * t7540 + t7434 * t7552) * t7568;
t7717 = -(t7162 * t8019 + t7312 * t8110) * t7601 + t7163 * t8116;
t7165 = -t7575 * t7947 + (-t7432 * t7541 + t7435 * t7553) * t7569;
t7716 = -(t7164 * t8018 + t7313 * t8110) * t7601 + t7165 * t8115;
t7167 = -t7576 * t7945 + (-t7433 * t7542 + t7436 * t7554) * t7570;
t7715 = -(t7166 * t8017 + t7314 * t8110) * t7601 + t7167 * t8114;
t7169 = -t7577 * t7940 + (-t7447 * t7543 + t7450 * t7555) * t7571;
t7714 = -(t7168 * t8016 + t7315 * t8110) * t7601 + t7169 * t8113;
t7171 = -t7578 * t7938 + (-t7448 * t7544 + t7451 * t7556) * t7572;
t7713 = -(t7170 * t8015 + t7316 * t8110) * t7601 + t7171 * t8112;
t7173 = -t7579 * t7936 + (-t7449 * t7545 + t7452 * t7557) * t7573;
t7712 = -(t7172 * t8014 + t7317 * t8110) * t7601 + t7173 * t8111;
t7711 = t7598 * t7745;
t7282 = t7410 * t7917 + t7416 * t7616;
t7703 = t7282 * t8012 + t7888;
t7284 = t7411 * t7916 + t7417 * t7618;
t7702 = t7284 * t8011 + t7887;
t7286 = t7412 * t7915 + t7418 * t7620;
t7701 = t7286 * t8010 + t7886;
t7300 = t7413 * t7911 + t7419 * t7634;
t7697 = t7300 * t8006 + t7885;
t7302 = t7414 * t7910 + t7420 * t7636;
t7696 = t7302 * t8005 + t7884;
t7304 = t7415 * t7909 + t7421 * t7638;
t7695 = t7304 * t8004 + t7883;
t7679 = -t7410 * t7515 * t7950 - t7282 * t8110;
t7678 = -t7411 * t7515 * t7948 - t7284 * t8110;
t7677 = -t7412 * t7515 * t7946 - t7286 * t8110;
t7676 = -t7413 * t7515 * t7941 - t7300 * t8110;
t7675 = -t7414 * t7515 * t7939 - t7302 * t8110;
t7674 = -t7415 * t7515 * t7937 - t7304 * t8110;
t7298 = -t7415 * t7912 + t7421 * t7644;
t7296 = -t7414 * t7913 + t7420 * t7642;
t7294 = -t7413 * t7914 + t7419 * t7640;
t7280 = -t7412 * t7918 + t7418 * t7626;
t7278 = -t7411 * t7919 + t7417 * t7624;
t7276 = -t7410 * t7920 + t7416 * t7622;
t7266 = -t7338 * t7644 + t7485 * t7638;
t7265 = -t7337 * t7642 + t7484 * t7636;
t7264 = -t7336 * t7640 + t7483 * t7634;
t7263 = t7415 * t7995 - t7421 * t7563;
t7262 = t7414 * t7996 - t7420 * t7562;
t7261 = t7413 * t7997 - t7419 * t7561;
t7260 = t7412 * t7998 - t7418 * t7560;
t7259 = t7411 * t7999 - t7417 * t7559;
t7258 = t7410 * t8000 - t7416 * t7558;
t7257 = t7415 * t7563 + t7421 * t7995;
t7256 = t7414 * t7562 + t7420 * t7996;
t7255 = t7413 * t7561 + t7419 * t7997;
t7254 = t7412 * t7560 + t7418 * t7998;
t7253 = t7411 * t7559 + t7417 * t7999;
t7252 = t7410 * t7558 + t7416 * t8000;
t7248 = -t7415 * t7551 + t7421 * t7989;
t7247 = t7415 * t7989 + t7421 * t7551;
t7246 = -t7414 * t7550 + t7420 * t7990;
t7245 = t7414 * t7990 + t7420 * t7550;
t7244 = -t7413 * t7549 + t7419 * t7991;
t7243 = t7413 * t7991 + t7419 * t7549;
t7242 = -t7412 * t7548 + t7418 * t7992;
t7241 = t7412 * t7992 + t7418 * t7548;
t7240 = -t7411 * t7547 + t7417 * t7993;
t7239 = t7411 * t7993 + t7417 * t7547;
t7238 = -t7410 * t7546 + t7416 * t7994;
t7237 = t7410 * t7994 + t7416 * t7546;
t7206 = -t7332 * t7626 + t7479 * t7620;
t7205 = -t7331 * t7624 + t7478 * t7618;
t7204 = -t7330 * t7622 + t7477 * t7616;
t7143 = t7257 * t7912 + t7263 * t7644;
t7142 = t7256 * t7913 + t7262 * t7642;
t7141 = t7255 * t7914 + t7261 * t7640;
t7140 = t7247 * t7644 + t7248 * t7912;
t7139 = t7245 * t7642 + t7246 * t7913;
t7138 = t7243 * t7640 + t7244 * t7914;
t7137 = t7254 * t7918 + t7260 * t7626;
t7136 = t7253 * t7919 + t7259 * t7624;
t7135 = t7252 * t7920 + t7258 * t7622;
t7134 = t7241 * t7626 + t7242 * t7918;
t7133 = t7239 * t7624 + t7240 * t7919;
t7132 = t7237 * t7622 + t7238 * t7920;
t7095 = (pkin(3) * t7308 - t7421 * t7830) * t7971 + t7311 * t7482;
t7094 = (pkin(3) * t7307 - t7420 * t7831) * t7971 + t7310 * t7481;
t7093 = (pkin(3) * t7306 - t7419 * t7832) * t7971 + t7309 * t7480;
t7092 = (t7308 * t8014 - t7537 * t7877) * t7601 + t7311 * t8111;
t7091 = (t7307 * t8015 - t7537 * t7878) * t7601 + t7310 * t8112;
t7090 = (t7306 * t8016 - t7537 * t7879) * t7601 + t7309 * t8113;
t7089 = (pkin(3) * t7290 - t7418 * t7833) * t7971 + t7293 * t7476;
t7088 = (pkin(3) * t7289 - t7417 * t7834) * t7971 + t7292 * t7475;
t7087 = (pkin(3) * t7288 - t7416 * t7835) * t7971 + t7291 * t7474;
t7086 = t7172 * t7786 + t7173 * t7515;
t7085 = t7170 * t7786 + t7171 * t7515;
t7084 = t7168 * t7786 + t7169 * t7515;
t7083 = (t7290 * t8017 - t7537 * t7880) * t7601 + t7293 * t8114;
t7082 = (t7289 * t8018 - t7537 * t7881) * t7601 + t7292 * t8115;
t7081 = (t7288 * t8019 - t7537 * t7882) * t7601 + t7291 * t8116;
t7080 = t7166 * t7786 + t7167 * t7515;
t7079 = t7164 * t7786 + t7165 * t7515;
t7078 = t7162 * t7786 + t7163 * t7515;
t7077 = (t7257 * t7909 - t7263 * t7638) * t7601 - t7257 * t7964;
t7076 = (-t7247 * t7638 + t7248 * t7909) * t7601 - t7248 * t7964;
t7075 = (t7256 * t7910 - t7262 * t7636) * t7601 - t7256 * t7964;
t7074 = (-t7245 * t7636 + t7246 * t7910) * t7601 - t7246 * t7964;
t7073 = (t7255 * t7911 - t7261 * t7634) * t7601 - t7255 * t7964;
t7072 = (-t7243 * t7634 + t7244 * t7911) * t7601 - t7244 * t7964;
t7071 = (t7254 * t7915 - t7260 * t7620) * t7601 - t7254 * t7964;
t7070 = (-t7241 * t7620 + t7242 * t7915) * t7601 - t7242 * t7964;
t7069 = (t7253 * t7916 - t7259 * t7618) * t7601 - t7253 * t7964;
t7068 = (-t7239 * t7618 + t7240 * t7916) * t7601 - t7240 * t7964;
t7067 = (t7252 * t7917 - t7258 * t7616) * t7601 - t7252 * t7964;
t7066 = (-t7237 * t7616 + t7238 * t7917) * t7601 - t7238 * t7964;
t7053 = t7421 * t7808 - (t7308 * t8004 + t7877) * t8161;
t7052 = t7420 * t7809 - (t7307 * t8005 + t7878) * t8161;
t7051 = t7419 * t7810 - (t7306 * t8006 + t7879) * t8161;
t7050 = t7418 * t7811 - (t7290 * t8010 + t7880) * t8161;
t7049 = t7417 * t7812 - (t7289 * t8011 + t7881) * t8161;
t7048 = t7416 * t7813 - (t7288 * t8012 + t7882) * t8161;
t7047 = t7308 * t7796 + (t7515 * t7863 + t7897) * t8033;
t7046 = t7307 * t7796 + (t7515 * t7864 + t7897) * t8035;
t7045 = t7306 * t7796 + (t7515 * t7865 + t7897) * t8037;
t7044 = -(pkin(3) * t7172 + t7317 * t8004) * t7971 + t7173 * t7482;
t7043 = -(pkin(3) * t7170 + t7316 * t8005) * t7971 + t7171 * t7481;
t7042 = -(pkin(3) * t7168 + t7315 * t8006) * t7971 + t7169 * t7480;
t7041 = t7290 * t7796 + (t7515 * t7866 + t7897) * t8039;
t7040 = t7289 * t7796 + (t7515 * t7867 + t7897) * t8041;
t7039 = t7288 * t7796 + (t7515 * t7868 + t7897) * t8043;
t7038 = -t7257 * t8050 + t7263 * t7266;
t7037 = -t7256 * t8051 + t7262 * t7265;
t7036 = -t7255 * t8052 + t7261 * t7264;
t7035 = -t7247 * t7266 + t7248 * t8050;
t7034 = -t7245 * t7265 + t7246 * t8051;
t7033 = -t7243 * t7264 + t7244 * t8052;
t7032 = -(pkin(3) * t7166 + t7314 * t8010) * t7971 + t7167 * t7476;
t7031 = -(pkin(3) * t7164 + t7313 * t8011) * t7971 + t7165 * t7475;
t7030 = -(pkin(3) * t7162 + t7312 * t8012) * t7971 + t7163 * t7474;
t7029 = t7206 * t7260 - t7254 * t8053;
t7028 = t7205 * t7259 - t7253 * t8054;
t7027 = t7204 * t7258 - t7252 * t8055;
t7026 = -t7206 * t7241 + t7242 * t8053;
t7025 = -t7205 * t7239 + t7240 * t8054;
t7024 = -t7204 * t7237 + t7238 * t8055;
t6987 = (pkin(3) * t7077 + t7143 * t7539) * t7643 + t7637 * (-pkin(3) * t7143 + t7077 * t7539);
t6986 = (pkin(3) * t7075 + t7142 * t7539) * t7641 + t7635 * (-pkin(3) * t7142 + t7075 * t7539);
t6985 = (pkin(3) * t7073 + t7141 * t7539) * t7639 + t7633 * (-pkin(3) * t7141 + t7073 * t7539);
t6984 = (-pkin(3) * t7076 - t7140 * t7539) * t7643 - t7637 * (-pkin(3) * t7140 + t7076 * t7539);
t6983 = (-pkin(3) * t7074 - t7139 * t7539) * t7641 - t7635 * (-pkin(3) * t7139 + t7074 * t7539);
t6982 = (-pkin(3) * t7072 - t7138 * t7539) * t7639 - t7633 * (-pkin(3) * t7138 + t7072 * t7539);
t6981 = (pkin(3) * t7071 + t7137 * t7539) * t7625 + t7619 * (-pkin(3) * t7137 + t7071 * t7539);
t6980 = (pkin(3) * t7069 + t7136 * t7539) * t7623 + t7617 * (-pkin(3) * t7136 + t7069 * t7539);
t6979 = (pkin(3) * t7067 + t7135 * t7539) * t7621 + t7615 * (-pkin(3) * t7135 + t7067 * t7539);
t6978 = (-pkin(3) * t7070 - t7134 * t7539) * t7625 - t7619 * (-pkin(3) * t7134 + t7070 * t7539);
t6977 = (-pkin(3) * t7068 - t7133 * t7539) * t7623 - t7617 * (-pkin(3) * t7133 + t7068 * t7539);
t6976 = (-pkin(3) * t7066 - t7132 * t7539) * t7621 - t7615 * (-pkin(3) * t7132 + t7066 * t7539);
t6969 = (((t7298 * t7515 + t7304 * t7786) * t7597 + t7415 * t7711) * t7579 - 0.2e1 * t7251 * t7573) * t7594 + ((((-t7304 * t8014 + t7537 * t7883) * t7601 + t7298 * t8111) * t7597 + t7674 * t7587 - t7415 * t7807 - t7674) * t7579 + t7113 * t7573) * t7643 + (t7415 * t7808 + (t7298 * t7482 * t7597 + (-(pkin(3) * t7304 - t7415 * t7830) * t7963 - t7695 * t7587 + t7695) * t7596) * pkin(9)) * t7579 + t7573 * t7768;
t6968 = (((t7296 * t7515 + t7302 * t7786) * t7597 + t7414 * t7711) * t7578 - 0.2e1 * t7250 * t7572) * t7593 + ((((-t7302 * t8015 + t7537 * t7884) * t7601 + t7296 * t8112) * t7597 + t7675 * t7587 - t7414 * t7807 - t7675) * t7578 + t7112 * t7572) * t7641 + (t7414 * t7809 + (t7296 * t7481 * t7597 + (-(pkin(3) * t7302 - t7414 * t7831) * t7963 - t7696 * t7587 + t7696) * t7596) * pkin(9)) * t7578 + t7572 * t7769;
t6967 = (((t7294 * t7515 + t7300 * t7786) * t7597 + t7413 * t7711) * t7577 - 0.2e1 * t7249 * t7571) * t7592 + ((((-t7300 * t8016 + t7537 * t7885) * t7601 + t7294 * t8113) * t7597 + t7676 * t7587 - t7413 * t7807 - t7676) * t7577 + t7111 * t7571) * t7639 + (t7413 * t7810 + (t7294 * t7480 * t7597 + (-(pkin(3) * t7300 - t7413 * t7832) * t7963 - t7697 * t7587 + t7697) * t7596) * pkin(9)) * t7577 + t7571 * t7770;
t6966 = (((t7280 * t7515 + t7286 * t7786) * t7597 + t7412 * t7711) * t7576 - 0.2e1 * t7212 * t7570) * t7590 + ((((-t7286 * t8017 + t7537 * t7886) * t7601 + t7280 * t8114) * t7597 + t7677 * t7587 - t7412 * t7807 - t7677) * t7576 + t7104 * t7570) * t7625 + (t7412 * t7811 + (t7280 * t7476 * t7597 + (-(pkin(3) * t7286 - t7412 * t7833) * t7963 - t7701 * t7587 + t7701) * t7596) * pkin(9)) * t7576 + t7570 * t7771;
t6965 = (((t7278 * t7515 + t7284 * t7786) * t7597 + t7411 * t7711) * t7575 - 0.2e1 * t7211 * t7569) * t7589 + ((((-t7284 * t8018 + t7537 * t7887) * t7601 + t7278 * t8115) * t7597 + t7678 * t7587 - t7411 * t7807 - t7678) * t7575 + t7103 * t7569) * t7623 + (t7411 * t7812 + (t7278 * t7475 * t7597 + (-(pkin(3) * t7284 - t7411 * t7834) * t7963 - t7702 * t7587 + t7702) * t7596) * pkin(9)) * t7575 + t7569 * t7772;
t6964 = (((t7276 * t7515 + t7282 * t7786) * t7597 + t7410 * t7711) * t7574 - 0.2e1 * t7210 * t7568) * t7588 + ((((-t7282 * t8019 + t7537 * t7888) * t7601 + t7276 * t8116) * t7597 + t7679 * t7587 - t7410 * t7807 - t7679) * t7574 + t7102 * t7568) * t7621 + (t7410 * t7813 + (t7276 * t7474 * t7597 + (-(pkin(3) * t7282 - t7410 * t7835) * t7963 - t7703 * t7587 + t7703) * t7596) * pkin(9)) * t7574 + t7568 * t7773;
t6957 = ((-t7086 * t7563 + t7551 * t8131) * t7597 + (t7317 * t7563 - t7551 * t8033) * t7745) * t7594 + ((t7551 * t7092 - t7563 * t7712) * t7597 - t8155 * t7563 + t7551 * t7047) * t7643 - (t7044 * t7563 - t7095 * t7551) * t8099 + t8154 * t7563 - t7551 * t7053;
t6956 = ((t7086 * t7551 + t7563 * t8131) * t7597 + (t7317 * t7551 + t7563 * t8033) * t7746) * t7594 + ((t7563 * t7092 + t7551 * t7712) * t7597 + t8155 * t7551 + t7047 * t7563) * t7643 + (t7044 * t7551 + t7095 * t7563) * t8099 - t8154 * t7551 - t7053 * t7563;
t6955 = ((-t7085 * t7562 + t7550 * t8132) * t7597 + (t7316 * t7562 - t7550 * t8035) * t7745) * t7593 + ((t7550 * t7091 - t7562 * t7713) * t7597 - t8156 * t7562 + t7550 * t7046) * t7641 - (t7043 * t7562 - t7094 * t7550) * t8099 + t8153 * t7562 - t7550 * t7052;
t6954 = ((t7085 * t7550 + t7562 * t8132) * t7597 + (t7316 * t7550 + t7562 * t8035) * t7746) * t7593 + ((t7562 * t7091 + t7550 * t7713) * t7597 + t8156 * t7550 + t7046 * t7562) * t7641 + (t7043 * t7550 + t7094 * t7562) * t8099 - t8153 * t7550 - t7052 * t7562;
t6953 = ((-t7084 * t7561 + t7549 * t8133) * t7597 + (t7315 * t7561 - t7549 * t8037) * t7745) * t7592 + ((t7549 * t7090 - t7561 * t7714) * t7597 - t8157 * t7561 + t7549 * t7045) * t7639 - (t7042 * t7561 - t7093 * t7549) * t8099 + t8152 * t7561 - t7549 * t7051;
t6952 = ((t7084 * t7549 + t7561 * t8133) * t7597 + (t7315 * t7549 + t7561 * t8037) * t7746) * t7592 + ((t7561 * t7090 + t7549 * t7714) * t7597 + t8157 * t7549 + t7045 * t7561) * t7639 + (t7042 * t7549 + t7093 * t7561) * t8099 - t8152 * t7549 - t7051 * t7561;
t6951 = ((-t7080 * t7560 + t7548 * t8134) * t7597 + (t7314 * t7560 - t7548 * t8039) * t7745) * t7590 + ((t7548 * t7083 - t7560 * t7715) * t7597 - t8158 * t7560 + t7548 * t7041) * t7625 - (t7032 * t7560 - t7089 * t7548) * t8099 + t8151 * t7560 - t7548 * t7050;
t6950 = ((t7080 * t7548 + t7560 * t8134) * t7597 + (t7314 * t7548 + t7560 * t8039) * t7746) * t7590 + ((t7560 * t7083 + t7548 * t7715) * t7597 + t8158 * t7548 + t7041 * t7560) * t7625 + (t7032 * t7548 + t7089 * t7560) * t8099 - t8151 * t7548 - t7050 * t7560;
t6949 = ((-t7079 * t7559 + t7547 * t8135) * t7597 + (t7313 * t7559 - t7547 * t8041) * t7745) * t7589 + ((t7547 * t7082 - t7559 * t7716) * t7597 - t8159 * t7559 + t7547 * t7040) * t7623 - (t7031 * t7559 - t7088 * t7547) * t8099 + t8150 * t7559 - t7547 * t7049;
t6948 = ((t7079 * t7547 + t7559 * t8135) * t7597 + (t7313 * t7547 + t7559 * t8041) * t7746) * t7589 + ((t7559 * t7082 + t7547 * t7716) * t7597 + t8159 * t7547 + t7040 * t7559) * t7623 + (t7031 * t7547 + t7088 * t7559) * t8099 - t8150 * t7547 - t7049 * t7559;
t6947 = ((-t7078 * t7558 + t7546 * t8136) * t7597 + (t7312 * t7558 - t7546 * t8043) * t7745) * t7588 + ((t7546 * t7081 - t7558 * t7717) * t7597 - t8160 * t7558 + t7546 * t7039) * t7621 - (t7030 * t7558 - t7087 * t7546) * t8099 + t8149 * t7558 - t7546 * t7048;
t6946 = ((t7078 * t7546 + t7558 * t8136) * t7597 + (t7312 * t7546 + t7558 * t8043) * t7746) * t7588 + ((t7558 * t7081 + t7546 * t7717) * t7597 + t8160 * t7546 + t7039 * t7558) * t7621 + (t7030 * t7546 + t7087 * t7558) * t8099 - t8149 * t7546 - t7048 * t7558;
t1 = [t6970 * t7862 + t6971 * t7861 + t6972 * t7860 + t6973 * t7859 + t6974 * t7858 + t6975 * t7857 - m(4) * g(1) + (-t6964 * t8079 - t6965 * t8078 - t6966 * t8077 - t6967 * t8076 - t6968 * t8075 - t6969 * t8074) * t7591 + (t6958 * t7850 + t6959 * t7849 + t6960 * t7848 + t6961 * t7847 + t6962 * t7846 + t6963 * t7845) * m(3); t6979 * t8085 + t6980 * t8084 + t6981 * t8083 + t6985 * t8082 + t6986 * t8081 + t6987 * t8080 - m(4) * g(2) + (-t6946 * t8079 - t6948 * t8078 - t6950 * t8077 - t6952 * t8076 - t6954 * t8075 - t6956 * t8074) * t7591 + (-t7027 * t8091 - t7028 * t8090 - t7029 * t8089 - t7036 * t8088 - t7037 * t8087 - t7038 * t8086) * m(3); t6976 * t8085 + t6977 * t8084 + t6978 * t8083 + t6982 * t8082 + t6983 * t8081 + t6984 * t8080 - m(4) * g(3) + (-t6947 * t8079 - t6949 * t8078 - t6951 * t8077 - t6953 * t8076 - t6955 * t8075 - t6957 * t8074) * t7591 + (-t7024 * t8091 - t7025 * t8090 - t7026 * t8089 - t7033 * t8088 - t7034 * t8087 - t7035 * t8086) * m(3); -(-t6956 * t7234 - t6957 * t7233) * t7851 + (-t6984 * t7233 - t6987 * t7234) * t8080 - (-t6954 * t7230 - t6955 * t7229) * t7852 + (-t6983 * t7229 - t6986 * t7230) * t8081 - (-t6952 * t7226 - t6953 * t7225) * t7853 + (-t6982 * t7225 - t6985 * t7226) * t8082 - (-t6950 * t7222 - t6951 * t7221) * t7854 + (-t6978 * t7221 - t6981 * t7222) * t8083 - (-t6948 * t7218 - t6949 * t7217) * t7855 + (-t6977 * t7217 - t6980 * t7218) * t8084 - (-t6946 * t7214 - t6947 * t7213) * t7856 + (-t6976 * t7213 - t6979 * t7214) * t8085 + (((-g(2) * t7985 - g(3) * t7653) * t7583 + g(2) * t7978) * t7585 + ((g(2) * t7653 - g(3) * t7985) * t7583 + g(3) * t7978) * t7582 + ((g(2) * t7986 - g(3) * t7654) * t7585 + (g(2) * t7654 + g(3) * t7986) * t7582) * t7580) * m(4) + (-(-t7035 * t7233 - t7038 * t7234) * t8086 - (-t7034 * t7229 - t7037 * t7230) * t8087 - (-t7033 * t7225 - t7036 * t7226) * t8088 - (-t7026 * t7221 - t7029 * t7222) * t8089 - (-t7025 * t7217 - t7028 * t7218) * t8090 - (-t7024 * t7213 - t7027 * t7214) * t8091) * m(3); -(-t6957 * t7344 + t6969 * t7234) * t7851 + (-t6984 * t8068 + t7234 * t7857) * t6975 - (-t7035 * t8062 - t7234 * t7845) * t8123 - (-t6955 * t7343 + t6968 * t7230) * t7852 + (-t6983 * t8069 + t7230 * t7858) * t6974 - (-t7034 * t8063 - t7230 * t7846) * t8124 - (-t6953 * t7342 + t6967 * t7226) * t7853 + (-t6982 * t8070 + t7226 * t7859) * t6973 - (-t7033 * t8064 - t7226 * t7847) * t8125 - (-t6951 * t7341 + t6966 * t7222) * t7854 + (-t6978 * t8071 + t7222 * t7860) * t6972 - (-t7026 * t8065 - t7222 * t7848) * t8126 - (-t6949 * t7340 + t6965 * t7218) * t7855 + (-t6977 * t8072 + t7218 * t7861) * t6971 - (-t7025 * t8066 - t7218 * t7849) * t8127 - (-t6947 * t7339 + t6964 * t7214) * t7856 + (-t6976 * t8073 + t7214 * t7862) * t6970 - (-t7024 * t8067 - t7214 * t7850) * t8128 - (t8180 * g(3) + ((t7581 * t7724 + t7978) * t7585 + (t7580 * t7654 + t7583 * t7653) * t7582) * g(1)) * m(4); -(t6956 * t7344 + t6969 * t7233) * t7851 + (t6987 * t8068 + t7233 * t7857) * t6975 - (t7038 * t8062 - t7233 * t7845) * t8123 - (t6954 * t7343 + t6968 * t7229) * t7852 + (t6986 * t8069 + t7229 * t7858) * t6974 - (t7037 * t8063 - t7229 * t7846) * t8124 - (t6952 * t7342 + t6967 * t7225) * t7853 + (t6985 * t8070 + t7225 * t7859) * t6973 - (t7036 * t8064 - t7225 * t7847) * t8125 - (t6950 * t7341 + t6966 * t7221) * t7854 + (t6981 * t8071 + t7221 * t7860) * t6972 - (t7029 * t8065 - t7221 * t7848) * t8126 - (t6948 * t7340 + t6965 * t7217) * t7855 + (t6980 * t8072 + t7217 * t7861) * t6971 - (t7028 * t8066 - t7217 * t7849) * t8127 - (t6946 * t7339 + t6964 * t7213) * t7856 + (t6979 * t8073 + t7213 * t7862) * t6970 - (t7027 * t8067 - t7213 * t7850) * t8128 + (t8180 * g(2) + (-t7582 * t7978 + (t7582 * t7985 + t7585 * t7653) * t7583 + (-t7582 * t7986 + t7585 * t7654) * t7580) * g(1)) * m(4);];
taugX  = t1;
