% Calculate Gravitation load for parallel robot
% P6PRRRRR6V2G8P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-18 12:11
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G8P1A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-18 05:00:18
% EndTime: 2019-05-18 05:01:47
% DurationCPUTime: 107.29s
% Computational Cost: add. (24287->1489), mult. (62652->2644), div. (162->30), fcn. (60179->74), ass. (0->981)
t7515 = sin(qJ(2,6));
t7508 = legFrame(6,1);
t7445 = sin(t7508);
t7457 = cos(t7508);
t7526 = legFrame(6,2);
t7467 = sin(t7526);
t7473 = cos(t7526);
t7246 = t7467 * g(1) + (-g(2) * t7445 + g(3) * t7457) * t7473;
t7497 = sin(pkin(4));
t7501 = cos(pkin(4));
t7502 = legFrame(6,3);
t7439 = sin(t7502);
t7451 = cos(t7502);
t7894 = t7457 * t7467;
t7900 = t7445 * t7467;
t8011 = g(1) * t7473;
t7072 = -t7439 * t8011 + (-t7439 * t7900 + t7451 * t7457) * g(2) + (t7439 * t7894 + t7445 * t7451) * g(3);
t7073 = t7451 * t8011 + (t7439 * t7457 + t7451 * t7900) * g(2) + (t7439 * t7445 - t7451 * t7894) * g(3);
t7494 = sin(pkin(10));
t7498 = cos(pkin(10));
t7645 = t7498 * t7072 - t7073 * t7494;
t8089 = t7497 * t7246 + t7501 * t7645;
t8101 = t7515 * t8089;
t7517 = sin(qJ(2,5));
t7509 = legFrame(5,1);
t7446 = sin(t7509);
t7458 = cos(t7509);
t7527 = legFrame(5,2);
t7468 = sin(t7527);
t7474 = cos(t7527);
t7247 = t7468 * g(1) + (-g(2) * t7446 + g(3) * t7458) * t7474;
t7503 = legFrame(5,3);
t7440 = sin(t7503);
t7452 = cos(t7503);
t7893 = t7458 * t7468;
t7899 = t7446 * t7468;
t8010 = g(1) * t7474;
t7074 = -t7440 * t8010 + (-t7440 * t7899 + t7452 * t7458) * g(2) + (t7440 * t7893 + t7446 * t7452) * g(3);
t7075 = t7452 * t8010 + (t7440 * t7458 + t7452 * t7899) * g(2) + (t7440 * t7446 - t7452 * t7893) * g(3);
t7643 = t7498 * t7074 - t7075 * t7494;
t8090 = t7497 * t7247 + t7501 * t7643;
t8100 = t7517 * t8090;
t7519 = sin(qJ(2,4));
t7510 = legFrame(4,1);
t7447 = sin(t7510);
t7459 = cos(t7510);
t7528 = legFrame(4,2);
t7469 = sin(t7528);
t7475 = cos(t7528);
t7248 = t7469 * g(1) + (-g(2) * t7447 + g(3) * t7459) * t7475;
t7504 = legFrame(4,3);
t7441 = sin(t7504);
t7453 = cos(t7504);
t7892 = t7459 * t7469;
t7898 = t7447 * t7469;
t8009 = g(1) * t7475;
t7076 = -t7441 * t8009 + (-t7441 * t7898 + t7453 * t7459) * g(2) + (t7441 * t7892 + t7447 * t7453) * g(3);
t7077 = t7453 * t8009 + (t7441 * t7459 + t7453 * t7898) * g(2) + (t7441 * t7447 - t7453 * t7892) * g(3);
t7641 = t7498 * t7076 - t7077 * t7494;
t8091 = t7497 * t7248 + t7501 * t7641;
t8099 = t7519 * t8091;
t7533 = sin(qJ(2,3));
t7511 = legFrame(3,1);
t7448 = sin(t7511);
t7460 = cos(t7511);
t7529 = legFrame(3,2);
t7470 = sin(t7529);
t7476 = cos(t7529);
t7249 = t7470 * g(1) + (-g(2) * t7448 + g(3) * t7460) * t7476;
t7505 = legFrame(3,3);
t7442 = sin(t7505);
t7454 = cos(t7505);
t7891 = t7460 * t7470;
t7897 = t7448 * t7470;
t8008 = g(1) * t7476;
t7078 = -t7442 * t8008 + (-t7442 * t7897 + t7454 * t7460) * g(2) + (t7442 * t7891 + t7448 * t7454) * g(3);
t7079 = t7454 * t8008 + (t7442 * t7460 + t7454 * t7897) * g(2) + (t7442 * t7448 - t7454 * t7891) * g(3);
t7639 = t7498 * t7078 - t7079 * t7494;
t8092 = t7497 * t7249 + t7501 * t7639;
t8098 = t7533 * t8092;
t7535 = sin(qJ(2,2));
t7512 = legFrame(2,1);
t7449 = sin(t7512);
t7461 = cos(t7512);
t7530 = legFrame(2,2);
t7471 = sin(t7530);
t7477 = cos(t7530);
t7250 = t7471 * g(1) + (-g(2) * t7449 + g(3) * t7461) * t7477;
t7506 = legFrame(2,3);
t7443 = sin(t7506);
t7455 = cos(t7506);
t7890 = t7461 * t7471;
t7896 = t7449 * t7471;
t8007 = g(1) * t7477;
t7080 = -t7443 * t8007 + (-t7443 * t7896 + t7455 * t7461) * g(2) + (t7443 * t7890 + t7449 * t7455) * g(3);
t7081 = t7455 * t8007 + (t7443 * t7461 + t7455 * t7896) * g(2) + (t7443 * t7449 - t7455 * t7890) * g(3);
t7637 = t7498 * t7080 - t7081 * t7494;
t8093 = t7497 * t7250 + t7501 * t7637;
t8097 = t7535 * t8093;
t7537 = sin(qJ(2,1));
t7513 = legFrame(1,1);
t7450 = sin(t7513);
t7462 = cos(t7513);
t7531 = legFrame(1,2);
t7472 = sin(t7531);
t7478 = cos(t7531);
t7251 = t7472 * g(1) + (-g(2) * t7450 + g(3) * t7462) * t7478;
t7507 = legFrame(1,3);
t7444 = sin(t7507);
t7456 = cos(t7507);
t7889 = t7462 * t7472;
t7895 = t7450 * t7472;
t8006 = g(1) * t7478;
t7082 = -t7444 * t8006 + (-t7444 * t7895 + t7456 * t7462) * g(2) + (t7444 * t7889 + t7450 * t7456) * g(3);
t7083 = t7456 * t8006 + (t7444 * t7462 + t7456 * t7895) * g(2) + (t7444 * t7450 - t7456 * t7889) * g(3);
t7635 = t7498 * t7082 - t7083 * t7494;
t8094 = t7497 * t7251 + t7501 * t7635;
t8096 = t7537 * t8094;
t7500 = cos(pkin(5));
t7486 = t7500 ^ 2;
t8037 = t7486 - 0.1e1;
t7546 = xP(5);
t7480 = sin(t7546);
t7483 = cos(t7546);
t7551 = koppelP(6,3);
t7545 = xP(6);
t7479 = sin(t7545);
t7482 = cos(t7545);
t7557 = koppelP(6,1);
t8045 = koppelP(6,2);
t8076 = t7479 * t8045 - t7482 * t7557;
t7258 = t7480 * t8076 + t7483 * t7551;
t7359 = t7479 * t7557 + t7482 * t8045;
t7547 = xP(4);
t7481 = sin(t7547);
t7484 = cos(t7547);
t7111 = t7258 * t7481 - t7359 * t7484;
t7112 = t7258 * t7484 + t7359 * t7481;
t7552 = koppelP(5,3);
t7558 = koppelP(5,1);
t8046 = koppelP(5,2);
t8075 = t7479 * t8046 - t7482 * t7558;
t7260 = t7480 * t8075 + t7483 * t7552;
t7360 = t7479 * t7558 + t7482 * t8046;
t7115 = t7260 * t7481 - t7360 * t7484;
t7116 = t7260 * t7484 + t7360 * t7481;
t7553 = koppelP(4,3);
t7559 = koppelP(4,1);
t8047 = koppelP(4,2);
t8074 = t7479 * t8047 - t7482 * t7559;
t7262 = t7480 * t8074 + t7483 * t7553;
t7361 = t7479 * t7559 + t7482 * t8047;
t7119 = t7262 * t7481 - t7361 * t7484;
t7120 = t7262 * t7484 + t7361 * t7481;
t7554 = koppelP(3,3);
t7560 = koppelP(3,1);
t8048 = koppelP(3,2);
t8073 = t7479 * t8048 - t7482 * t7560;
t7264 = t7480 * t8073 + t7483 * t7554;
t7362 = t7479 * t7560 + t7482 * t8048;
t7123 = t7264 * t7481 - t7362 * t7484;
t7124 = t7264 * t7484 + t7362 * t7481;
t7555 = koppelP(2,3);
t7561 = koppelP(2,1);
t8049 = koppelP(2,2);
t8072 = t7479 * t8049 - t7482 * t7561;
t7266 = t7480 * t8072 + t7483 * t7555;
t7363 = t7479 * t7561 + t7482 * t8049;
t7127 = t7266 * t7481 - t7363 * t7484;
t7128 = t7266 * t7484 + t7363 * t7481;
t7556 = koppelP(1,3);
t7562 = koppelP(1,1);
t8050 = koppelP(1,2);
t8071 = t7479 * t8050 - t7482 * t7562;
t7268 = t7480 * t8071 + t7483 * t7556;
t7364 = t7479 * t7562 + t7482 * t8050;
t7131 = t7268 * t7481 - t7364 * t7484;
t7132 = t7268 * t7484 + t7364 * t7481;
t7549 = mrSges(4,2);
t7550 = mrSges(4,1);
t7632 = t7479 * t7549 - t7482 * t7550;
t7548 = mrSges(4,3);
t7879 = t7483 * t7548;
t8057 = t7480 * t7632 + t7879;
t8095 = -t7480 * t7548 + t7483 * t7632;
t7644 = t7072 * t7494 + t7073 * t7498;
t8088 = t7515 * t7644;
t7642 = t7074 * t7494 + t7075 * t7498;
t8087 = t7517 * t7642;
t7640 = t7076 * t7494 + t7077 * t7498;
t8086 = t7519 * t7640;
t7638 = t7078 * t7494 + t7079 * t7498;
t8085 = t7533 * t7638;
t7636 = t7080 * t7494 + t7081 * t7498;
t8084 = t7535 * t7636;
t7634 = t7082 * t7494 + t7083 * t7498;
t8083 = t7537 * t7634;
t7543 = cos(qJ(2,1));
t7828 = t7498 * t7543;
t7873 = t7494 * t7543;
t8082 = t7082 * t7873 + t7083 * t7828 + t8096;
t7541 = cos(qJ(2,2));
t7829 = t7498 * t7541;
t7874 = t7494 * t7541;
t8081 = t7080 * t7874 + t7081 * t7829 + t8097;
t7539 = cos(qJ(2,3));
t7830 = t7498 * t7539;
t7875 = t7494 * t7539;
t8080 = t7078 * t7875 + t7079 * t7830 + t8098;
t7525 = cos(qJ(2,4));
t7831 = t7498 * t7525;
t7876 = t7494 * t7525;
t8079 = t7076 * t7876 + t7077 * t7831 + t8099;
t7523 = cos(qJ(2,5));
t7832 = t7498 * t7523;
t7877 = t7494 * t7523;
t8078 = t7074 * t7877 + t7075 * t7832 + t8100;
t7521 = cos(qJ(2,6));
t7833 = t7498 * t7521;
t7878 = t7494 * t7521;
t8077 = t7072 * t7878 + t7073 * t7833 + t8101;
t7495 = sin(pkin(6));
t7438 = t7495 * pkin(9);
t8070 = t7438 * t8037;
t7712 = t8037 * t7501;
t7818 = t7501 * t7521;
t7320 = t7494 * t7818 + t7498 * t7515;
t7323 = -t7494 * t7515 + t7498 * t7818;
t7845 = t7497 * t7521;
t7060 = t7473 * t7845 + (t7320 * t7451 + t7323 * t7439) * t7467;
t7499 = cos(pkin(6));
t7436 = pkin(9) * t7499 + pkin(8);
t8024 = pkin(3) * t7436;
t7048 = t7060 * t8024;
t7308 = t7439 * t7498 + t7451 * t7494;
t7949 = t7308 * t7497;
t7210 = -t7467 * t7949 + t7501 * t7473;
t7800 = pkin(2) * t7438;
t7485 = t7499 ^ 2;
t7563 = pkin(9) ^ 2;
t7413 = pkin(3) ^ 2 + t7485 * t7563 - t7563;
t7514 = sin(qJ(3,6));
t7919 = t7413 * t7514;
t8069 = t7210 * (t7800 - t7919) + (t7210 * t7919 - t7048) * t7486 + t7048;
t7817 = t7501 * t7523;
t7321 = t7494 * t7817 + t7498 * t7517;
t7324 = -t7494 * t7517 + t7498 * t7817;
t7844 = t7497 * t7523;
t7062 = t7474 * t7844 + (t7321 * t7452 + t7324 * t7440) * t7468;
t7049 = t7062 * t8024;
t7309 = t7440 * t7498 + t7452 * t7494;
t7948 = t7309 * t7497;
t7211 = -t7468 * t7948 + t7501 * t7474;
t7516 = sin(qJ(3,5));
t7918 = t7413 * t7516;
t8068 = t7211 * (t7800 - t7918) + (t7211 * t7918 - t7049) * t7486 + t7049;
t7816 = t7501 * t7525;
t7322 = t7494 * t7816 + t7498 * t7519;
t7325 = -t7494 * t7519 + t7498 * t7816;
t7843 = t7497 * t7525;
t7064 = t7475 * t7843 + (t7322 * t7453 + t7325 * t7441) * t7469;
t7050 = t7064 * t8024;
t7310 = t7441 * t7498 + t7453 * t7494;
t7947 = t7310 * t7497;
t7212 = -t7469 * t7947 + t7501 * t7475;
t7518 = sin(qJ(3,4));
t7917 = t7413 * t7518;
t8067 = t7212 * (t7800 - t7917) + (t7212 * t7917 - t7050) * t7486 + t7050;
t7812 = t7501 * t7539;
t7333 = t7494 * t7812 + t7498 * t7533;
t7336 = -t7494 * t7533 + t7498 * t7812;
t7836 = t7497 * t7539;
t7066 = t7476 * t7836 + (t7333 * t7454 + t7336 * t7442) * t7470;
t7051 = t7066 * t8024;
t7311 = t7442 * t7498 + t7454 * t7494;
t7946 = t7311 * t7497;
t7213 = -t7470 * t7946 + t7501 * t7476;
t7532 = sin(qJ(3,3));
t7916 = t7413 * t7532;
t8066 = t7213 * (t7800 - t7916) + (t7213 * t7916 - t7051) * t7486 + t7051;
t7811 = t7501 * t7541;
t7334 = t7494 * t7811 + t7498 * t7535;
t7337 = -t7494 * t7535 + t7498 * t7811;
t7835 = t7497 * t7541;
t7068 = t7477 * t7835 + (t7334 * t7455 + t7337 * t7443) * t7471;
t7052 = t7068 * t8024;
t7312 = t7443 * t7498 + t7455 * t7494;
t7945 = t7312 * t7497;
t7214 = -t7471 * t7945 + t7501 * t7477;
t7534 = sin(qJ(3,2));
t7915 = t7413 * t7534;
t8065 = t7214 * (t7800 - t7915) + (t7214 * t7915 - t7052) * t7486 + t7052;
t7810 = t7501 * t7543;
t7335 = t7494 * t7810 + t7498 * t7537;
t7338 = -t7494 * t7537 + t7498 * t7810;
t7834 = t7497 * t7543;
t7070 = t7478 * t7834 + (t7335 * t7456 + t7338 * t7444) * t7472;
t7053 = t7070 * t8024;
t7313 = t7444 * t7498 + t7456 * t7494;
t7944 = t7313 * t7497;
t7215 = -t7472 * t7944 + t7501 * t7478;
t7536 = sin(qJ(3,1));
t7914 = t7413 * t7536;
t8064 = t7215 * (t7800 - t7914) + (t7215 * t7914 - t7053) * t7486 + t7053;
t7779 = t7436 * t7438;
t7904 = t7436 * t7536;
t8031 = pkin(3) * t7215;
t8063 = ((t7070 * t7904 - t8031) * t7486 + t8031) * t7438 - (-pkin(2) * t8031 + t7070 * t7779) * t7536;
t7905 = t7436 * t7534;
t8032 = pkin(3) * t7214;
t8062 = ((t7068 * t7905 - t8032) * t7486 + t8032) * t7438 - (-pkin(2) * t8032 + t7068 * t7779) * t7534;
t7906 = t7436 * t7532;
t8033 = pkin(3) * t7213;
t8061 = ((t7066 * t7906 - t8033) * t7486 + t8033) * t7438 - (-pkin(2) * t8033 + t7066 * t7779) * t7532;
t7910 = t7436 * t7518;
t8034 = pkin(3) * t7212;
t8060 = ((t7064 * t7910 - t8034) * t7486 + t8034) * t7438 - (-pkin(2) * t8034 + t7064 * t7779) * t7518;
t7911 = t7436 * t7516;
t8035 = pkin(3) * t7211;
t8059 = ((t7062 * t7911 - t8035) * t7486 + t8035) * t7438 - (-pkin(2) * t8035 + t7062 * t7779) * t7516;
t7912 = t7436 * t7514;
t8036 = pkin(3) * t7210;
t8058 = ((t7060 * t7912 - t8036) * t7486 + t8036) * t7438 - (-pkin(2) * t8036 + t7060 * t7779) * t7514;
t7496 = sin(pkin(5));
t7865 = t7496 * t7497;
t7737 = t7498 * t7865;
t7738 = t7494 * t7865;
t7822 = t7500 * t7543;
t8056 = t7501 * (-t7251 * t7496 - t7635 * t7822) - (t7251 * t7834 - t8083) * t7500 + t7082 * t7737 - t7083 * t7738;
t7823 = t7500 * t7541;
t8055 = t7501 * (-t7250 * t7496 - t7637 * t7823) - (t7250 * t7835 - t8084) * t7500 + t7080 * t7737 - t7081 * t7738;
t7824 = t7500 * t7539;
t8054 = t7501 * (-t7249 * t7496 - t7639 * t7824) - (t7249 * t7836 - t8085) * t7500 + t7078 * t7737 - t7079 * t7738;
t7825 = t7500 * t7525;
t8053 = t7501 * (-t7248 * t7496 - t7641 * t7825) - (t7248 * t7843 - t8086) * t7500 + t7076 * t7737 - t7077 * t7738;
t7826 = t7500 * t7523;
t8052 = t7501 * (-t7247 * t7496 - t7643 * t7826) - (t7247 * t7844 - t8087) * t7500 + t7074 * t7737 - t7075 * t7738;
t7827 = t7500 * t7521;
t8051 = t7501 * (-t7246 * t7496 - t7645 * t7827) - (t7246 * t7845 - t8088) * t7500 + t7072 * t7737 - t7073 * t7738;
t7186 = -t7320 * t7439 + t7323 * t7451;
t7821 = t7501 * t7515;
t7326 = t7498 * t7821 + t7878;
t7329 = -t7494 * t7821 + t7833;
t7189 = t7326 * t7451 + t7329 * t7439;
t7872 = t7495 * t7500;
t7776 = pkin(9) * t7872;
t7713 = pkin(3) * t7776;
t8038 = -t7413 / 0.2e1;
t8044 = -0.2e1 * t7186 * t7713 - 0.2e1 * t7189 * t8038;
t7187 = -t7321 * t7440 + t7324 * t7452;
t7820 = t7501 * t7517;
t7327 = t7498 * t7820 + t7877;
t7330 = -t7494 * t7820 + t7832;
t7190 = t7327 * t7452 + t7330 * t7440;
t8043 = -0.2e1 * t7187 * t7713 - 0.2e1 * t7190 * t8038;
t7188 = -t7322 * t7441 + t7325 * t7453;
t7819 = t7501 * t7519;
t7328 = t7498 * t7819 + t7876;
t7331 = -t7494 * t7819 + t7831;
t7191 = t7328 * t7453 + t7331 * t7441;
t8042 = -0.2e1 * t7188 * t7713 - 0.2e1 * t7191 * t8038;
t7204 = -t7333 * t7442 + t7336 * t7454;
t7815 = t7501 * t7533;
t7339 = t7498 * t7815 + t7875;
t7342 = -t7494 * t7815 + t7830;
t7207 = t7339 * t7454 + t7342 * t7442;
t8041 = -0.2e1 * t7204 * t7713 - 0.2e1 * t7207 * t8038;
t7205 = -t7334 * t7443 + t7337 * t7455;
t7814 = t7501 * t7535;
t7340 = t7498 * t7814 + t7874;
t7343 = -t7494 * t7814 + t7829;
t7208 = t7340 * t7455 + t7343 * t7443;
t8040 = -0.2e1 * t7205 * t7713 - 0.2e1 * t7208 * t8038;
t7206 = -t7335 * t7444 + t7338 * t7456;
t7813 = t7501 * t7537;
t7341 = t7498 * t7813 + t7873;
t7344 = -t7494 * t7813 + t7828;
t7209 = t7341 * t7456 + t7344 * t7444;
t8039 = -0.2e1 * t7206 * t7713 - 0.2e1 * t7209 * t8038;
t7871 = t7495 * t7514;
t7418 = pkin(9) * t7871;
t7401 = 0.2e1 * t7418 + pkin(2);
t8030 = pkin(3) * t7401;
t7870 = t7495 * t7516;
t7420 = pkin(9) * t7870;
t7403 = 0.2e1 * t7420 + pkin(2);
t8029 = pkin(3) * t7403;
t7869 = t7495 * t7518;
t7422 = pkin(9) * t7869;
t7405 = 0.2e1 * t7422 + pkin(2);
t8028 = pkin(3) * t7405;
t7868 = t7495 * t7532;
t7427 = pkin(9) * t7868;
t7407 = 0.2e1 * t7427 + pkin(2);
t8027 = pkin(3) * t7407;
t7867 = t7495 * t7534;
t7429 = pkin(9) * t7867;
t7409 = 0.2e1 * t7429 + pkin(2);
t8026 = pkin(3) * t7409;
t7866 = t7495 * t7536;
t7431 = pkin(9) * t7866;
t7411 = 0.2e1 * t7431 + pkin(2);
t8025 = pkin(3) * t7411;
t8023 = pkin(3) * t7495;
t8022 = pkin(3) * t7497;
t8021 = pkin(3) * t7500;
t8020 = pkin(3) * t7501;
t7520 = cos(qJ(3,6));
t8019 = pkin(3) * t7520;
t7522 = cos(qJ(3,5));
t8018 = pkin(3) * t7522;
t7524 = cos(qJ(3,4));
t8017 = pkin(3) * t7524;
t7538 = cos(qJ(3,3));
t8016 = pkin(3) * t7538;
t7540 = cos(qJ(3,2));
t8015 = pkin(3) * t7540;
t7542 = cos(qJ(3,1));
t8014 = pkin(3) * t7542;
t8013 = pkin(9) * t7496;
t8012 = pkin(9) * t7497;
t7402 = t7418 + pkin(2);
t7404 = t7420 + pkin(2);
t7406 = t7422 + pkin(2);
t7408 = t7427 + pkin(2);
t7410 = t7429 + pkin(2);
t7412 = t7431 + pkin(2);
t8005 = m(3) * pkin(2) + mrSges(2,1);
t8004 = (m(3) * pkin(8) + mrSges(3,3)) * t7496 - mrSges(2,2);
t6856 = (-t7514 * t8051 + t7520 * t8077) * mrSges(3,2) + (t7514 * t8077 + t7520 * t8051) * mrSges(3,1);
t7864 = t7496 * t7500;
t7745 = t7436 * t7864;
t7365 = pkin(3) * t7745;
t7773 = t7413 * t8037;
t7587 = -t7514 * t7773 - t7800;
t7168 = t7365 + t7587;
t7746 = t7413 * t7864;
t7688 = t7514 * t7746;
t7723 = t8037 * t8024;
t7216 = t7688 + t7723;
t7416 = pkin(3) * t7864;
t7771 = t7514 * t8037;
t7222 = t7436 * t7771 + t7416;
t7774 = (-t7485 + 0.1e1) * pkin(9);
t7366 = pkin(2) * t7871 + t7774;
t7487 = t7520 ^ 2;
t7724 = -0.2e1 * t7416;
t7888 = (t7500 + 0.1e1) * (t7500 - 0.1e1);
t7792 = 0.2e1 * t7888;
t7799 = pkin(3) * t7438;
t7668 = t7745 * t7438;
t7808 = t7514 * t7668 + pkin(3) * (pkin(2) * t7514 + t7438);
t7863 = t7496 * t7515;
t6910 = 0.1e1 / ((t7168 * t7520 + (t7487 * t7792 - t7486) * t7799 + t7808) * t7501 + ((t7216 * t7520 + (t7487 * t7724 + t7222) * t7438) * t7521 + (pkin(9) * t7366 + t7401 * t8019 + t7413 * t7487) * t7863) * t7497);
t8003 = t6856 * t6910;
t6857 = (-t7516 * t8052 + t7522 * t8078) * mrSges(3,2) + (t7516 * t8078 + t7522 * t8052) * mrSges(3,1);
t7586 = -t7516 * t7773 - t7800;
t7169 = t7365 + t7586;
t7687 = t7516 * t7746;
t7217 = t7687 + t7723;
t7770 = t7516 * t8037;
t7223 = t7436 * t7770 + t7416;
t7367 = pkin(2) * t7870 + t7774;
t7488 = t7522 ^ 2;
t7807 = t7516 * t7668 + pkin(3) * (pkin(2) * t7516 + t7438);
t7862 = t7496 * t7517;
t6911 = 0.1e1 / ((t7169 * t7522 + (t7488 * t7792 - t7486) * t7799 + t7807) * t7501 + ((t7217 * t7522 + (t7488 * t7724 + t7223) * t7438) * t7523 + (pkin(9) * t7367 + t7403 * t8018 + t7413 * t7488) * t7862) * t7497);
t8002 = t6857 * t6911;
t6858 = (-t7518 * t8053 + t7524 * t8079) * mrSges(3,2) + (t7518 * t8079 + t7524 * t8053) * mrSges(3,1);
t7585 = -t7518 * t7773 - t7800;
t7170 = t7365 + t7585;
t7686 = t7518 * t7746;
t7218 = t7686 + t7723;
t7769 = t7518 * t8037;
t7224 = t7436 * t7769 + t7416;
t7368 = pkin(2) * t7869 + t7774;
t7489 = t7524 ^ 2;
t7806 = t7518 * t7668 + pkin(3) * (pkin(2) * t7518 + t7438);
t7861 = t7496 * t7519;
t6912 = 0.1e1 / ((t7170 * t7524 + (t7489 * t7792 - t7486) * t7799 + t7806) * t7501 + ((t7218 * t7524 + (t7489 * t7724 + t7224) * t7438) * t7525 + (pkin(9) * t7368 + t7405 * t8017 + t7413 * t7489) * t7861) * t7497);
t8001 = t6858 * t6912;
t6859 = (-t7532 * t8054 + t7538 * t8080) * mrSges(3,2) + (t7532 * t8080 + t7538 * t8054) * mrSges(3,1);
t7584 = -t7532 * t7773 - t7800;
t7171 = t7365 + t7584;
t7685 = t7532 * t7746;
t7219 = t7685 + t7723;
t7768 = t7532 * t8037;
t7225 = t7436 * t7768 + t7416;
t7375 = pkin(2) * t7868 + t7774;
t7491 = t7538 ^ 2;
t7805 = t7532 * t7668 + pkin(3) * (pkin(2) * t7532 + t7438);
t7860 = t7496 * t7533;
t6916 = 0.1e1 / ((t7171 * t7538 + (t7491 * t7792 - t7486) * t7799 + t7805) * t7501 + ((t7219 * t7538 + (t7491 * t7724 + t7225) * t7438) * t7539 + (pkin(9) * t7375 + t7407 * t8016 + t7413 * t7491) * t7860) * t7497);
t8000 = t6859 * t6916;
t6860 = (-t7534 * t8055 + t7540 * t8081) * mrSges(3,2) + (t7534 * t8081 + t7540 * t8055) * mrSges(3,1);
t7583 = -t7534 * t7773 - t7800;
t7172 = t7365 + t7583;
t7684 = t7534 * t7746;
t7220 = t7684 + t7723;
t7767 = t7534 * t8037;
t7226 = t7436 * t7767 + t7416;
t7376 = pkin(2) * t7867 + t7774;
t7492 = t7540 ^ 2;
t7804 = t7534 * t7668 + pkin(3) * (pkin(2) * t7534 + t7438);
t7859 = t7496 * t7535;
t6917 = 0.1e1 / ((t7172 * t7540 + (t7492 * t7792 - t7486) * t7799 + t7804) * t7501 + ((t7220 * t7540 + (t7492 * t7724 + t7226) * t7438) * t7541 + (pkin(9) * t7376 + t7409 * t8015 + t7413 * t7492) * t7859) * t7497);
t7999 = t6860 * t6917;
t6861 = (-t7536 * t8056 + t7542 * t8082) * mrSges(3,2) + (t7536 * t8082 + t7542 * t8056) * mrSges(3,1);
t7582 = -t7536 * t7773 - t7800;
t7173 = t7365 + t7582;
t7683 = t7536 * t7746;
t7221 = t7683 + t7723;
t7766 = t7536 * t8037;
t7227 = t7436 * t7766 + t7416;
t7377 = pkin(2) * t7866 + t7774;
t7493 = t7542 ^ 2;
t7803 = t7536 * t7668 + pkin(3) * (pkin(2) * t7536 + t7438);
t7858 = t7496 * t7537;
t6918 = 0.1e1 / ((t7173 * t7542 + (t7493 * t7792 - t7486) * t7799 + t7803) * t7501 + ((t7221 * t7542 + (t7493 * t7724 + t7227) * t7438) * t7543 + (pkin(9) * t7377 + t7411 * t8014 + t7413 * t7493) * t7858) * t7497);
t7998 = t6861 * t6918;
t6868 = (-t7521 * t8089 + t8088) * (mrSges(3,1) * t7520 - mrSges(3,2) * t7514 + t8005) + (-t7521 * t7644 - t8101) * ((-mrSges(3,1) * t7514 - mrSges(3,2) * t7520) * t7500 + t8004);
t7345 = t7501 * t7745;
t7424 = pkin(2) * t7863;
t7772 = t7436 * t8037;
t7694 = t7521 * t7772;
t7090 = t7345 + (t7424 + t7694) * t7497;
t7736 = t7496 * t7827;
t7273 = t7497 * t7736 - t7712;
t7747 = t7413 * t7865;
t7292 = t7515 * t7747;
t7777 = t7497 * t7438;
t7653 = 0.2e1 * pkin(3) * t7496 * t7777;
t7346 = t7515 * t7653;
t7437 = pkin(2) * t8020;
t7703 = (t7499 + 0.1e1) * (t7499 - 0.1e1) * t8013;
t7667 = t7515 * t7703;
t7715 = t7501 * t7800;
t7775 = -0.2e1 * t7799;
t6898 = 0.1e1 / ((t7273 * t7775 + t7292) * t7487 + ((t7273 * t7413 + t7346) * t7514 - t7715 + pkin(3) * t7090) * t7520 + (t7090 * t7438 + t7437) * t7514 + (t7273 * t8023 - t7497 * t7667) * pkin(9));
t7997 = t6868 * t6898;
t6869 = (-t7523 * t8090 + t8087) * (mrSges(3,1) * t7522 - mrSges(3,2) * t7516 + t8005) + (-t7523 * t7642 - t8100) * ((-mrSges(3,1) * t7516 - mrSges(3,2) * t7522) * t7500 + t8004);
t7425 = pkin(2) * t7862;
t7693 = t7523 * t7772;
t7091 = t7345 + (t7425 + t7693) * t7497;
t7735 = t7496 * t7826;
t7274 = t7497 * t7735 - t7712;
t7293 = t7517 * t7747;
t7347 = t7517 * t7653;
t7666 = t7517 * t7703;
t6899 = 0.1e1 / ((t7274 * t7775 + t7293) * t7488 + ((t7274 * t7413 + t7347) * t7516 - t7715 + pkin(3) * t7091) * t7522 + (t7091 * t7438 + t7437) * t7516 + (t7274 * t8023 - t7497 * t7666) * pkin(9));
t7996 = t6869 * t6899;
t6870 = (-t7525 * t8091 + t8086) * (mrSges(3,1) * t7524 - mrSges(3,2) * t7518 + t8005) + (-t7525 * t7640 - t8099) * ((-mrSges(3,1) * t7518 - mrSges(3,2) * t7524) * t7500 + t8004);
t7426 = pkin(2) * t7861;
t7692 = t7525 * t7772;
t7092 = t7345 + (t7426 + t7692) * t7497;
t7734 = t7496 * t7825;
t7275 = t7497 * t7734 - t7712;
t7294 = t7519 * t7747;
t7348 = t7519 * t7653;
t7665 = t7519 * t7703;
t6900 = 0.1e1 / ((t7275 * t7775 + t7294) * t7489 + ((t7275 * t7413 + t7348) * t7518 - t7715 + pkin(3) * t7092) * t7524 + (t7092 * t7438 + t7437) * t7518 + (t7275 * t8023 - t7497 * t7665) * pkin(9));
t7995 = t6870 * t6900;
t6871 = (-t7539 * t8092 + t8085) * (mrSges(3,1) * t7538 - mrSges(3,2) * t7532 + t8005) + (-t7539 * t7638 - t8098) * ((-mrSges(3,1) * t7532 - mrSges(3,2) * t7538) * t7500 + t8004);
t7433 = pkin(2) * t7860;
t7691 = t7539 * t7772;
t7093 = t7345 + (t7433 + t7691) * t7497;
t7733 = t7496 * t7824;
t7279 = t7497 * t7733 - t7712;
t7301 = t7533 * t7747;
t7349 = t7533 * t7653;
t7664 = t7533 * t7703;
t6901 = 0.1e1 / ((t7279 * t7775 + t7301) * t7491 + ((t7279 * t7413 + t7349) * t7532 - t7715 + pkin(3) * t7093) * t7538 + (t7093 * t7438 + t7437) * t7532 + (t7279 * t8023 - t7497 * t7664) * pkin(9));
t7994 = t6871 * t6901;
t6872 = (-t7541 * t8093 + t8084) * (mrSges(3,1) * t7540 - mrSges(3,2) * t7534 + t8005) + (-t7541 * t7636 - t8097) * ((-mrSges(3,1) * t7534 - mrSges(3,2) * t7540) * t7500 + t8004);
t7434 = pkin(2) * t7859;
t7690 = t7541 * t7772;
t7094 = t7345 + (t7434 + t7690) * t7497;
t7732 = t7496 * t7823;
t7280 = t7497 * t7732 - t7712;
t7302 = t7535 * t7747;
t7350 = t7535 * t7653;
t7663 = t7535 * t7703;
t6902 = 0.1e1 / ((t7280 * t7775 + t7302) * t7492 + ((t7280 * t7413 + t7350) * t7534 - t7715 + pkin(3) * t7094) * t7540 + (t7094 * t7438 + t7437) * t7534 + (t7280 * t8023 - t7497 * t7663) * pkin(9));
t7993 = t6872 * t6902;
t6873 = (-t7543 * t8094 + t8083) * (mrSges(3,1) * t7542 - mrSges(3,2) * t7536 + t8005) + (-t7543 * t7634 - t8096) * ((-mrSges(3,1) * t7536 - mrSges(3,2) * t7542) * t7500 + t8004);
t7435 = pkin(2) * t7858;
t7689 = t7543 * t7772;
t7095 = t7345 + (t7435 + t7689) * t7497;
t7731 = t7496 * t7822;
t7281 = t7497 * t7731 - t7712;
t7303 = t7537 * t7747;
t7351 = t7537 * t7653;
t7662 = t7537 * t7703;
t6903 = 0.1e1 / ((t7281 * t7775 + t7303) * t7493 + ((t7281 * t7413 + t7351) * t7536 - t7715 + pkin(3) * t7095) * t7542 + (t7095 * t7438 + t7437) * t7536 + (t7281 * t8023 - t7497 * t7662) * pkin(9));
t7992 = t6873 * t6903;
t7314 = -t7439 * t7494 + t7451 * t7498;
t7175 = t7308 * t7521 + t7314 * t7821;
t7417 = t7495 * t8020;
t7696 = t7486 * t7417;
t7606 = (t7417 - t7696) * pkin(9);
t7612 = (-t7308 * t7515 + t7314 * t7818) * t7500 - t7314 * t7865;
t7652 = pkin(3) * t7345 - t7715;
t7669 = t7413 * t7712;
t7909 = t7436 * t7521;
t7675 = t7486 * t7909 + t7424 - t7909;
t7414 = pkin(9) * t7417;
t7802 = 0.2e1 * pkin(9) * t7696 - 0.2e1 * t7414;
t7809 = t7501 * t7668 + t7437;
t7991 = 0.1e1 / ((t7292 + t7802) * t7487 + ((t7346 - t7669) * t7514 + t7652) * t7520 + t7809 * t7514 + t7606 + ((pkin(3) * t7675 + t7521 * t7688) * t7520 + (-t7667 + (t7675 * t7514 + (-0.2e1 * t7487 + 0.1e1) * pkin(3) * t7736) * t7495) * pkin(9)) * t7497) * ((pkin(3) * t7612 + t7175 * t7438) * t7520 + t7514 * (-pkin(3) * t7175 + t7438 * t7612));
t7315 = -t7440 * t7494 + t7452 * t7498;
t7177 = t7309 * t7523 + t7315 * t7820;
t7611 = (-t7309 * t7517 + t7315 * t7817) * t7500 - t7315 * t7865;
t7908 = t7436 * t7523;
t7674 = t7486 * t7908 + t7425 - t7908;
t7990 = 0.1e1 / ((t7293 + t7802) * t7488 + ((t7347 - t7669) * t7516 + t7652) * t7522 + t7809 * t7516 + t7606 + ((pkin(3) * t7674 + t7523 * t7687) * t7522 + (-t7666 + (t7674 * t7516 + (-0.2e1 * t7488 + 0.1e1) * pkin(3) * t7735) * t7495) * pkin(9)) * t7497) * ((pkin(3) * t7611 + t7177 * t7438) * t7522 + t7516 * (-pkin(3) * t7177 + t7438 * t7611));
t7316 = -t7441 * t7494 + t7453 * t7498;
t7179 = t7310 * t7525 + t7316 * t7819;
t7610 = (-t7310 * t7519 + t7316 * t7816) * t7500 - t7316 * t7865;
t7907 = t7436 * t7525;
t7673 = t7486 * t7907 + t7426 - t7907;
t7989 = 0.1e1 / ((t7294 + t7802) * t7489 + ((t7348 - t7669) * t7518 + t7652) * t7524 + t7809 * t7518 + t7606 + ((pkin(3) * t7673 + t7525 * t7686) * t7524 + (-t7665 + (t7673 * t7518 + (-0.2e1 * t7489 + 0.1e1) * pkin(3) * t7734) * t7495) * pkin(9)) * t7497) * ((pkin(3) * t7610 + t7179 * t7438) * t7524 + t7518 * (-pkin(3) * t7179 + t7438 * t7610));
t7317 = -t7442 * t7494 + t7454 * t7498;
t7193 = t7311 * t7539 + t7317 * t7815;
t7609 = (-t7311 * t7533 + t7317 * t7812) * t7500 - t7317 * t7865;
t7903 = t7436 * t7539;
t7672 = t7486 * t7903 + t7433 - t7903;
t7988 = 0.1e1 / ((t7301 + t7802) * t7491 + ((t7349 - t7669) * t7532 + t7652) * t7538 + t7809 * t7532 + t7606 + ((pkin(3) * t7672 + t7539 * t7685) * t7538 + (-t7664 + (t7672 * t7532 + (-0.2e1 * t7491 + 0.1e1) * pkin(3) * t7733) * t7495) * pkin(9)) * t7497) * ((pkin(3) * t7609 + t7193 * t7438) * t7538 + t7532 * (-pkin(3) * t7193 + t7438 * t7609));
t7318 = -t7443 * t7494 + t7455 * t7498;
t7195 = t7312 * t7541 + t7318 * t7814;
t7608 = (-t7312 * t7535 + t7318 * t7811) * t7500 - t7318 * t7865;
t7902 = t7436 * t7541;
t7671 = t7486 * t7902 + t7434 - t7902;
t7987 = 0.1e1 / ((t7302 + t7802) * t7492 + ((t7350 - t7669) * t7534 + t7652) * t7540 + t7809 * t7534 + t7606 + ((pkin(3) * t7671 + t7541 * t7684) * t7540 + (-t7663 + (t7671 * t7534 + (-0.2e1 * t7492 + 0.1e1) * pkin(3) * t7732) * t7495) * pkin(9)) * t7497) * ((pkin(3) * t7608 + t7195 * t7438) * t7540 + t7534 * (-pkin(3) * t7195 + t7438 * t7608));
t7319 = -t7444 * t7494 + t7456 * t7498;
t7197 = t7313 * t7543 + t7319 * t7813;
t7607 = (-t7313 * t7537 + t7319 * t7810) * t7500 - t7319 * t7865;
t7901 = t7436 * t7543;
t7670 = t7486 * t7901 + t7435 - t7901;
t7986 = 0.1e1 / ((t7303 + t7802) * t7493 + ((t7351 - t7669) * t7536 + t7652) * t7542 + t7809 * t7536 + t7606 + ((pkin(3) * t7670 + t7543 * t7683) * t7542 + (-t7662 + (t7670 * t7536 + (-0.2e1 * t7493 + 0.1e1) * pkin(3) * t7731) * t7495) * pkin(9)) * t7497) * ((pkin(3) * t7607 + t7197 * t7438) * t7542 + t7536 * (-pkin(3) * t7197 + t7438 * t7607));
t7392 = t7436 * t8020;
t7730 = t7514 * t7845;
t7753 = t7401 * t7863;
t7000 = (t7413 * t7730 + t7392) * t7864 + (t7694 + t7753) * t8022 + t7587 * t7501;
t7676 = t7799 * t7888;
t7307 = t7501 * t7676;
t7702 = t7521 * t7776;
t7108 = (pkin(3) * t7702 + t7515 * t8038) * t7865 - t7307;
t7084 = 0.2e1 * t7108 * t7487;
t7704 = t7436 * t7777;
t7778 = t7486 * t7438;
t7850 = t7497 * t7515;
t7682 = ((pkin(3) * t7845 + t7501 * t7912) * t7872 + t7366 * t7850) * t8013 + (t7436 * t7730 - t8020) * t7778 + (-t7521 * t7704 + t7437) * t7514 + t7414;
t7985 = 0.1e1 / (t7000 * t7520 - t7084 + t7682) * t7246;
t7729 = t7516 * t7844;
t7752 = t7403 * t7862;
t7001 = (t7413 * t7729 + t7392) * t7864 + (t7693 + t7752) * t8022 + t7586 * t7501;
t7701 = t7523 * t7776;
t7109 = (pkin(3) * t7701 + t7517 * t8038) * t7865 - t7307;
t7085 = 0.2e1 * t7109 * t7488;
t7848 = t7497 * t7517;
t7681 = ((pkin(3) * t7844 + t7501 * t7911) * t7872 + t7367 * t7848) * t8013 + (t7436 * t7729 - t8020) * t7778 + (-t7523 * t7704 + t7437) * t7516 + t7414;
t7984 = 0.1e1 / (t7001 * t7522 - t7085 + t7681) * t7247;
t7728 = t7518 * t7843;
t7751 = t7405 * t7861;
t7002 = (t7413 * t7728 + t7392) * t7864 + (t7692 + t7751) * t8022 + t7585 * t7501;
t7700 = t7525 * t7776;
t7110 = (pkin(3) * t7700 + t7519 * t8038) * t7865 - t7307;
t7086 = 0.2e1 * t7110 * t7489;
t7846 = t7497 * t7519;
t7680 = ((pkin(3) * t7843 + t7501 * t7910) * t7872 + t7368 * t7846) * t8013 + (t7436 * t7728 - t8020) * t7778 + (-t7525 * t7704 + t7437) * t7518 + t7414;
t7983 = 0.1e1 / (t7002 * t7524 - t7086 + t7680) * t7248;
t7727 = t7532 * t7836;
t7750 = t7407 * t7860;
t7009 = (t7413 * t7727 + t7392) * t7864 + (t7691 + t7750) * t8022 + t7584 * t7501;
t7699 = t7539 * t7776;
t7147 = (pkin(3) * t7699 + t7533 * t8038) * t7865 - t7307;
t7087 = 0.2e1 * t7147 * t7491;
t7841 = t7497 * t7533;
t7679 = ((pkin(3) * t7836 + t7501 * t7906) * t7872 + t7375 * t7841) * t8013 + (t7436 * t7727 - t8020) * t7778 + (-t7539 * t7704 + t7437) * t7532 + t7414;
t7982 = 0.1e1 / (t7009 * t7538 - t7087 + t7679) * t7249;
t7726 = t7534 * t7835;
t7749 = t7409 * t7859;
t7010 = (t7413 * t7726 + t7392) * t7864 + (t7690 + t7749) * t8022 + t7583 * t7501;
t7698 = t7541 * t7776;
t7148 = (pkin(3) * t7698 + t7535 * t8038) * t7865 - t7307;
t7088 = 0.2e1 * t7148 * t7492;
t7839 = t7497 * t7535;
t7678 = ((pkin(3) * t7835 + t7501 * t7905) * t7872 + t7376 * t7839) * t8013 + (t7436 * t7726 - t8020) * t7778 + (-t7541 * t7704 + t7437) * t7534 + t7414;
t7981 = 0.1e1 / (t7010 * t7540 - t7088 + t7678) * t7250;
t7725 = t7536 * t7834;
t7748 = t7411 * t7858;
t7011 = (t7413 * t7725 + t7392) * t7864 + (t7689 + t7748) * t8022 + t7582 * t7501;
t7697 = t7543 * t7776;
t7149 = (pkin(3) * t7697 + t7537 * t8038) * t7865 - t7307;
t7089 = 0.2e1 * t7149 * t7493;
t7837 = t7497 * t7537;
t7677 = ((pkin(3) * t7834 + t7501 * t7904) * t7872 + t7377 * t7837) * t8013 + (t7436 * t7725 - t8020) * t7778 + (-t7543 * t7704 + t7437) * t7536 + t7414;
t7980 = 0.1e1 / (t7011 * t7542 - t7089 + t7677) * t7251;
t7237 = t7480 * t7551 - t7483 * t8076;
t7979 = t6898 * t7237;
t7238 = t7480 * t7552 - t7483 * t8075;
t7978 = t6899 * t7238;
t7239 = t7480 * t7553 - t7483 * t8074;
t7977 = t6900 * t7239;
t7240 = t7480 * t7554 - t7483 * t8073;
t7976 = t6901 * t7240;
t7241 = t7480 * t7555 - t7483 * t8072;
t7975 = t6902 * t7241;
t7242 = t7480 * t7556 - t7483 * t8071;
t7974 = t6903 * t7242;
t7913 = t7436 * t7496;
t7289 = t7514 * t8021 - t7913;
t7714 = pkin(3) * t7778;
t7942 = t7314 * t7501;
t7973 = 0.1e1 / (-t7084 + (t7168 * t7501 + t7497 * (pkin(3) * t7753 + t7216 * t7521)) * t7520 + (-t7714 + t7808) * t7501 + (t7222 * t7495 * t7521 + t7366 * t7863) * t8012) * (((pkin(3) * t7521 + t7515 * t7776) * t7942 + t7308 * (-pkin(3) * t7515 + t7702)) * t7520 + (-t7289 * t7515 + t7402 * t7521) * t7942 - t7308 * (t7289 * t7521 + t7402 * t7515));
t7290 = t7516 * t8021 - t7913;
t7940 = t7315 * t7501;
t7972 = 0.1e1 / (-t7085 + (t7169 * t7501 + t7497 * (pkin(3) * t7752 + t7217 * t7523)) * t7522 + (-t7714 + t7807) * t7501 + (t7223 * t7495 * t7523 + t7367 * t7862) * t8012) * (((pkin(3) * t7523 + t7517 * t7776) * t7940 + t7309 * (-pkin(3) * t7517 + t7701)) * t7522 + (-t7290 * t7517 + t7404 * t7523) * t7940 - t7309 * (t7290 * t7523 + t7404 * t7517));
t7291 = t7518 * t8021 - t7913;
t7938 = t7316 * t7501;
t7971 = 0.1e1 / (-t7086 + (t7170 * t7501 + t7497 * (pkin(3) * t7751 + t7218 * t7525)) * t7524 + (-t7714 + t7806) * t7501 + (t7224 * t7495 * t7525 + t7368 * t7861) * t8012) * (((pkin(3) * t7525 + t7519 * t7776) * t7938 + t7310 * (-pkin(3) * t7519 + t7700)) * t7524 + (-t7291 * t7519 + t7406 * t7525) * t7938 - t7310 * (t7291 * t7525 + t7406 * t7519));
t7295 = t7532 * t8021 - t7913;
t7936 = t7317 * t7501;
t7970 = 0.1e1 / (-t7087 + (t7171 * t7501 + t7497 * (pkin(3) * t7750 + t7219 * t7539)) * t7538 + (-t7714 + t7805) * t7501 + (t7225 * t7495 * t7539 + t7375 * t7860) * t8012) * (((pkin(3) * t7539 + t7533 * t7776) * t7936 + t7311 * (-pkin(3) * t7533 + t7699)) * t7538 + (-t7295 * t7533 + t7408 * t7539) * t7936 - t7311 * (t7295 * t7539 + t7408 * t7533));
t7296 = t7534 * t8021 - t7913;
t7934 = t7318 * t7501;
t7969 = 0.1e1 / (-t7088 + (t7172 * t7501 + t7497 * (pkin(3) * t7749 + t7220 * t7541)) * t7540 + (-t7714 + t7804) * t7501 + (t7226 * t7495 * t7541 + t7376 * t7859) * t8012) * (((pkin(3) * t7541 + t7535 * t7776) * t7934 + t7312 * (-pkin(3) * t7535 + t7698)) * t7540 + (-t7296 * t7535 + t7410 * t7541) * t7934 - t7312 * (t7296 * t7541 + t7410 * t7535));
t7297 = t7536 * t8021 - t7913;
t7932 = t7319 * t7501;
t7968 = 0.1e1 / (-t7089 + (t7173 * t7501 + t7497 * (pkin(3) * t7748 + t7221 * t7543)) * t7542 + (-t7714 + t7803) * t7501 + (t7227 * t7495 * t7543 + t7377 * t7858) * t8012) * (((pkin(3) * t7543 + t7537 * t7776) * t7932 + t7313 * (-pkin(3) * t7537 + t7697)) * t7542 + (-t7297 * t7537 + t7412 * t7543) * t7932 - t7313 * (t7297 * t7543 + t7412 * t7537));
t7967 = t6910 * t7237;
t7966 = t6911 * t7238;
t7965 = t6912 * t7239;
t7964 = t6916 * t7240;
t7963 = t6917 * t7241;
t7962 = t6918 * t7242;
t7228 = t7520 * t7776 - t7289;
t7372 = t7402 + t8019;
t7955 = (t7228 * t7515 + t7372 * t7521) * t7501;
t7229 = t7522 * t7776 - t7290;
t7373 = t7404 + t8018;
t7954 = (t7229 * t7517 + t7373 * t7523) * t7501;
t7230 = t7524 * t7776 - t7291;
t7374 = t7406 + t8017;
t7953 = (t7230 * t7519 + t7374 * t7525) * t7501;
t7234 = t7538 * t7776 - t7295;
t7381 = t7408 + t8016;
t7952 = (t7234 * t7533 + t7381 * t7539) * t7501;
t7235 = t7540 * t7776 - t7296;
t7382 = t7410 + t8015;
t7951 = (t7235 * t7535 + t7382 * t7541) * t7501;
t7236 = t7542 * t7776 - t7297;
t7383 = t7412 + t8014;
t7950 = (t7236 * t7537 + t7383 * t7543) * t7501;
t7943 = t7314 * t7497;
t7941 = t7315 * t7497;
t7939 = t7316 * t7497;
t7937 = t7317 * t7497;
t7935 = t7318 * t7497;
t7933 = t7319 * t7497;
t7887 = t7480 * t7481;
t7851 = t7497 * t7514;
t7849 = t7497 * t7516;
t7847 = t7497 * t7518;
t7842 = t7497 * t7532;
t7840 = t7497 * t7534;
t7838 = t7497 * t7536;
t7801 = pkin(2) * t8022;
t7791 = pkin(3) * t7949;
t7790 = pkin(3) * t7948;
t7789 = pkin(3) * t7947;
t7788 = pkin(3) * t7946;
t7787 = pkin(3) * t7945;
t7786 = pkin(3) * t7944;
t7785 = pkin(3) * t7943;
t7784 = pkin(3) * t7941;
t7783 = pkin(3) * t7939;
t7782 = pkin(3) * t7937;
t7781 = pkin(3) * t7935;
t7780 = pkin(3) * t7933;
t7765 = t7473 * t7991;
t7764 = t7474 * t7990;
t7763 = t7475 * t7989;
t7762 = t7476 * t7988;
t7761 = t7477 * t7987;
t7760 = t7478 * t7986;
t7759 = t7473 * t7973;
t7758 = t7474 * t7972;
t7757 = t7475 * t7971;
t7756 = t7476 * t7970;
t7755 = t7477 * t7969;
t7754 = t7478 * t7968;
t7744 = t7436 * t7851;
t7743 = t7436 * t7849;
t7742 = t7436 * t7847;
t7741 = t7436 * t7842;
t7740 = t7436 * t7840;
t7739 = t7436 * t7838;
t7722 = t7514 * t7801;
t7721 = t7516 * t7801;
t7720 = t7518 * t7801;
t7719 = t7532 * t7801;
t7718 = t7534 * t7801;
t7717 = t7536 * t7801;
t7716 = pkin(2) * t7777;
t7705 = pkin(3) * t7772;
t7695 = 0.2e1 * t7713;
t7655 = -0.2e1 * t7676;
t7654 = 0.2e1 * t7676;
t7633 = t7479 * t7550 + t7482 * t7549;
t7061 = -t7473 * t7850 + (-t7326 * t7439 + t7329 * t7451) * t7467;
t7625 = -(t7060 * t7919 + t7210 * t8024) * t7500 + t7061 * t8030;
t7063 = -t7474 * t7848 + (-t7327 * t7440 + t7330 * t7452) * t7468;
t7624 = -(t7062 * t7918 + t7211 * t8024) * t7500 + t7063 * t8029;
t7065 = -t7475 * t7846 + (-t7328 * t7441 + t7331 * t7453) * t7469;
t7623 = -(t7064 * t7917 + t7212 * t8024) * t7500 + t7065 * t8028;
t7067 = -t7476 * t7841 + (-t7339 * t7442 + t7342 * t7454) * t7470;
t7622 = -(t7066 * t7916 + t7213 * t8024) * t7500 + t7067 * t8027;
t7069 = -t7477 * t7839 + (-t7340 * t7443 + t7343 * t7455) * t7471;
t7621 = -(t7068 * t7915 + t7214 * t8024) * t7500 + t7069 * t8026;
t7071 = -t7478 * t7837 + (-t7341 * t7444 + t7344 * t7456) * t7472;
t7620 = -(t7070 * t7914 + t7215 * t8024) * t7500 + t7071 * t8025;
t7619 = t7497 * t7654;
t7180 = t7308 * t7818 + t7314 * t7515;
t7605 = t7180 * t7912 + t7791;
t7182 = t7309 * t7817 + t7315 * t7517;
t7604 = t7182 * t7911 + t7790;
t7184 = t7310 * t7816 + t7316 * t7519;
t7603 = t7184 * t7910 + t7789;
t7198 = t7311 * t7812 + t7317 * t7533;
t7599 = t7198 * t7906 + t7788;
t7200 = t7312 * t7811 + t7318 * t7535;
t7598 = t7200 * t7905 + t7787;
t7202 = t7313 * t7810 + t7319 * t7537;
t7597 = t7202 * t7904 + t7786;
t7581 = -t7308 * t7413 * t7851 - t7180 * t8024;
t7580 = -t7309 * t7413 * t7849 - t7182 * t8024;
t7579 = -t7310 * t7413 * t7847 - t7184 * t8024;
t7578 = -t7311 * t7413 * t7842 - t7198 * t8024;
t7577 = -t7312 * t7413 * t7840 - t7200 * t8024;
t7576 = -t7313 * t7413 * t7838 - t7202 * t8024;
t7490 = m(1) + m(2) + m(3);
t7196 = -t7313 * t7813 + t7319 * t7543;
t7194 = -t7312 * t7814 + t7318 * t7541;
t7192 = -t7311 * t7815 + t7317 * t7539;
t7178 = -t7310 * t7819 + t7316 * t7525;
t7176 = -t7309 * t7820 + t7315 * t7523;
t7174 = -t7308 * t7821 + t7314 * t7521;
t7164 = -t7236 * t7543 + t7383 * t7537;
t7163 = -t7235 * t7541 + t7382 * t7535;
t7162 = -t7234 * t7539 + t7381 * t7533;
t7161 = t7313 * t7895 - t7319 * t7462;
t7160 = t7312 * t7896 - t7318 * t7461;
t7159 = t7311 * t7897 - t7317 * t7460;
t7158 = t7310 * t7898 - t7316 * t7459;
t7157 = t7309 * t7899 - t7315 * t7458;
t7156 = t7308 * t7900 - t7314 * t7457;
t7155 = t7313 * t7462 + t7319 * t7895;
t7154 = t7312 * t7461 + t7318 * t7896;
t7153 = t7311 * t7460 + t7317 * t7897;
t7152 = t7310 * t7459 + t7316 * t7898;
t7151 = t7309 * t7458 + t7315 * t7899;
t7150 = t7308 * t7457 + t7314 * t7900;
t7146 = -t7313 * t7450 + t7319 * t7889;
t7145 = t7313 * t7889 + t7319 * t7450;
t7144 = -t7312 * t7449 + t7318 * t7890;
t7143 = t7312 * t7890 + t7318 * t7449;
t7142 = -t7311 * t7448 + t7317 * t7891;
t7141 = t7311 * t7891 + t7317 * t7448;
t7140 = -t7310 * t7447 + t7316 * t7892;
t7139 = t7310 * t7892 + t7316 * t7447;
t7138 = -t7309 * t7446 + t7315 * t7893;
t7137 = t7309 * t7893 + t7315 * t7446;
t7136 = -t7308 * t7445 + t7314 * t7894;
t7135 = t7308 * t7894 + t7314 * t7445;
t7104 = -t7230 * t7525 + t7374 * t7519;
t7103 = -t7229 * t7523 + t7373 * t7517;
t7102 = -t7228 * t7521 + t7372 * t7515;
t7041 = t7155 * t7813 + t7161 * t7543;
t7040 = t7154 * t7814 + t7160 * t7541;
t7039 = t7153 * t7815 + t7159 * t7539;
t7038 = t7145 * t7543 + t7146 * t7813;
t7037 = t7143 * t7541 + t7144 * t7814;
t7036 = t7141 * t7539 + t7142 * t7815;
t7035 = t7152 * t7819 + t7158 * t7525;
t7034 = t7151 * t7820 + t7157 * t7523;
t7033 = t7150 * t7821 + t7156 * t7521;
t7032 = t7139 * t7525 + t7140 * t7819;
t7031 = t7137 * t7523 + t7138 * t7820;
t7030 = t7135 * t7521 + t7136 * t7821;
t6993 = (pkin(3) * t7206 - t7319 * t7739) * t7872 + t7209 * t7377;
t6992 = (pkin(3) * t7205 - t7318 * t7740) * t7872 + t7208 * t7376;
t6991 = (pkin(3) * t7204 - t7317 * t7741) * t7872 + t7207 * t7375;
t6990 = (t7206 * t7914 - t7436 * t7780) * t7500 + t7209 * t8025;
t6989 = (t7205 * t7915 - t7436 * t7781) * t7500 + t7208 * t8026;
t6988 = (t7204 * t7916 - t7436 * t7782) * t7500 + t7207 * t8027;
t6987 = (pkin(3) * t7188 - t7316 * t7742) * t7872 + t7191 * t7368;
t6986 = (pkin(3) * t7187 - t7315 * t7743) * t7872 + t7190 * t7367;
t6985 = (pkin(3) * t7186 - t7314 * t7744) * t7872 + t7189 * t7366;
t6984 = t7070 * t7695 + t7071 * t7413;
t6983 = t7068 * t7695 + t7069 * t7413;
t6982 = t7066 * t7695 + t7067 * t7413;
t6981 = (t7188 * t7917 - t7436 * t7783) * t7500 + t7191 * t8028;
t6980 = (t7187 * t7918 - t7436 * t7784) * t7500 + t7190 * t8029;
t6979 = (t7186 * t7919 - t7436 * t7785) * t7500 + t7189 * t8030;
t6978 = t7064 * t7695 + t7065 * t7413;
t6977 = t7062 * t7695 + t7063 * t7413;
t6976 = t7060 * t7695 + t7061 * t7413;
t6975 = (t7155 * t7810 - t7161 * t7537) * t7500 - t7155 * t7865;
t6974 = (-t7145 * t7537 + t7146 * t7810) * t7500 - t7146 * t7865;
t6973 = (t7154 * t7811 - t7160 * t7535) * t7500 - t7154 * t7865;
t6972 = (-t7143 * t7535 + t7144 * t7811) * t7500 - t7144 * t7865;
t6971 = (t7153 * t7812 - t7159 * t7533) * t7500 - t7153 * t7865;
t6970 = (-t7141 * t7533 + t7142 * t7812) * t7500 - t7142 * t7865;
t6969 = (t7152 * t7816 - t7158 * t7519) * t7500 - t7152 * t7865;
t6968 = (-t7139 * t7519 + t7140 * t7816) * t7500 - t7140 * t7865;
t6967 = (t7151 * t7817 - t7157 * t7517) * t7500 - t7151 * t7865;
t6966 = (-t7137 * t7517 + t7138 * t7817) * t7500 - t7138 * t7865;
t6965 = (t7150 * t7818 - t7156 * t7515) * t7500 - t7150 * t7865;
t6964 = (-t7135 * t7515 + t7136 * t7818) * t7500 - t7136 * t7865;
t6951 = t7319 * t7717 - (t7206 * t7904 + t7780) * t8070;
t6950 = t7318 * t7718 - (t7205 * t7905 + t7781) * t8070;
t6949 = t7317 * t7719 - (t7204 * t7906 + t7782) * t8070;
t6948 = t7316 * t7720 - (t7188 * t7910 + t7783) * t8070;
t6947 = t7315 * t7721 - (t7187 * t7911 + t7784) * t8070;
t6946 = t7314 * t7722 - (t7186 * t7912 + t7785) * t8070;
t6945 = t7206 * t7705 + (t7413 * t7766 + t7800) * t7933;
t6944 = t7205 * t7705 + (t7413 * t7767 + t7800) * t7935;
t6943 = t7204 * t7705 + (t7413 * t7768 + t7800) * t7937;
t6942 = -(pkin(3) * t7070 + t7215 * t7904) * t7872 + t7071 * t7377;
t6941 = -(pkin(3) * t7068 + t7214 * t7905) * t7872 + t7069 * t7376;
t6940 = -(pkin(3) * t7066 + t7213 * t7906) * t7872 + t7067 * t7375;
t6939 = t7188 * t7705 + (t7413 * t7769 + t7800) * t7939;
t6938 = t7187 * t7705 + (t7413 * t7770 + t7800) * t7941;
t6937 = t7186 * t7705 + (t7413 * t7771 + t7800) * t7943;
t6936 = -t7155 * t7950 + t7161 * t7164;
t6935 = -t7154 * t7951 + t7160 * t7163;
t6934 = -t7153 * t7952 + t7159 * t7162;
t6933 = -t7145 * t7164 + t7146 * t7950;
t6932 = -t7143 * t7163 + t7144 * t7951;
t6931 = -t7141 * t7162 + t7142 * t7952;
t6930 = -(pkin(3) * t7064 + t7212 * t7910) * t7872 + t7065 * t7368;
t6929 = -(pkin(3) * t7062 + t7211 * t7911) * t7872 + t7063 * t7367;
t6928 = -(pkin(3) * t7060 + t7210 * t7912) * t7872 + t7061 * t7366;
t6927 = t7104 * t7158 - t7152 * t7953;
t6926 = t7103 * t7157 - t7151 * t7954;
t6925 = t7102 * t7156 - t7150 * t7955;
t6924 = -t7104 * t7139 + t7140 * t7953;
t6923 = -t7103 * t7137 + t7138 * t7954;
t6922 = -t7102 * t7135 + t7136 * t7955;
t6885 = (pkin(3) * t6975 + t7041 * t7438) * t7542 + t7536 * (-pkin(3) * t7041 + t6975 * t7438);
t6884 = (pkin(3) * t6973 + t7040 * t7438) * t7540 + t7534 * (-pkin(3) * t7040 + t6973 * t7438);
t6883 = (pkin(3) * t6971 + t7039 * t7438) * t7538 + t7532 * (-pkin(3) * t7039 + t6971 * t7438);
t6882 = (-pkin(3) * t6974 - t7038 * t7438) * t7542 - t7536 * (-pkin(3) * t7038 + t6974 * t7438);
t6881 = (-pkin(3) * t6972 - t7037 * t7438) * t7540 - t7534 * (-pkin(3) * t7037 + t6972 * t7438);
t6880 = (-pkin(3) * t6970 - t7036 * t7438) * t7538 - t7532 * (-pkin(3) * t7036 + t6970 * t7438);
t6879 = (pkin(3) * t6969 + t7035 * t7438) * t7524 + t7518 * (-pkin(3) * t7035 + t6969 * t7438);
t6878 = (pkin(3) * t6967 + t7034 * t7438) * t7522 + t7516 * (-pkin(3) * t7034 + t6967 * t7438);
t6877 = (pkin(3) * t6965 + t7033 * t7438) * t7520 + t7514 * (-pkin(3) * t7033 + t6965 * t7438);
t6876 = (-pkin(3) * t6968 - t7032 * t7438) * t7524 - t7518 * (-pkin(3) * t7032 + t6968 * t7438);
t6875 = (-pkin(3) * t6966 - t7031 * t7438) * t7522 - t7516 * (-pkin(3) * t7031 + t6966 * t7438);
t6874 = (-pkin(3) * t6964 - t7030 * t7438) * t7520 - t7514 * (-pkin(3) * t7030 + t6964 * t7438);
t6867 = (((t7196 * t7413 + t7202 * t7695) * t7496 + t7313 * t7619) * t7478 - 0.2e1 * t7149 * t7472) * t7493 + ((((-t7202 * t7914 + t7436 * t7786) * t7500 + t7196 * t8025) * t7496 + t7576 * t7486 - t7313 * t7716 - t7576) * t7478 + t7011 * t7472) * t7542 + (t7313 * t7717 + (t7196 * t7377 * t7496 + (-(pkin(3) * t7202 - t7313 * t7739) * t7864 - t7597 * t7486 + t7597) * t7495) * pkin(9)) * t7478 + t7472 * t7677;
t6866 = (((t7194 * t7413 + t7200 * t7695) * t7496 + t7312 * t7619) * t7477 - 0.2e1 * t7148 * t7471) * t7492 + ((((-t7200 * t7915 + t7436 * t7787) * t7500 + t7194 * t8026) * t7496 + t7577 * t7486 - t7312 * t7716 - t7577) * t7477 + t7010 * t7471) * t7540 + (t7312 * t7718 + (t7194 * t7376 * t7496 + (-(pkin(3) * t7200 - t7312 * t7740) * t7864 - t7598 * t7486 + t7598) * t7495) * pkin(9)) * t7477 + t7471 * t7678;
t6865 = (((t7192 * t7413 + t7198 * t7695) * t7496 + t7311 * t7619) * t7476 - 0.2e1 * t7147 * t7470) * t7491 + ((((-t7198 * t7916 + t7436 * t7788) * t7500 + t7192 * t8027) * t7496 + t7578 * t7486 - t7311 * t7716 - t7578) * t7476 + t7009 * t7470) * t7538 + (t7311 * t7719 + (t7192 * t7375 * t7496 + (-(pkin(3) * t7198 - t7311 * t7741) * t7864 - t7599 * t7486 + t7599) * t7495) * pkin(9)) * t7476 + t7470 * t7679;
t6864 = (((t7178 * t7413 + t7184 * t7695) * t7496 + t7310 * t7619) * t7475 - 0.2e1 * t7110 * t7469) * t7489 + ((((-t7184 * t7917 + t7436 * t7789) * t7500 + t7178 * t8028) * t7496 + t7579 * t7486 - t7310 * t7716 - t7579) * t7475 + t7002 * t7469) * t7524 + (t7310 * t7720 + (t7178 * t7368 * t7496 + (-(pkin(3) * t7184 - t7310 * t7742) * t7864 - t7603 * t7486 + t7603) * t7495) * pkin(9)) * t7475 + t7469 * t7680;
t6863 = (((t7176 * t7413 + t7182 * t7695) * t7496 + t7309 * t7619) * t7474 - 0.2e1 * t7109 * t7468) * t7488 + ((((-t7182 * t7918 + t7436 * t7790) * t7500 + t7176 * t8029) * t7496 + t7580 * t7486 - t7309 * t7716 - t7580) * t7474 + t7001 * t7468) * t7522 + (t7309 * t7721 + (t7176 * t7367 * t7496 + (-(pkin(3) * t7182 - t7309 * t7743) * t7864 - t7604 * t7486 + t7604) * t7495) * pkin(9)) * t7474 + t7468 * t7681;
t6862 = (((t7174 * t7413 + t7180 * t7695) * t7496 + t7308 * t7619) * t7473 - 0.2e1 * t7108 * t7467) * t7487 + ((((-t7180 * t7919 + t7436 * t7791) * t7500 + t7174 * t8030) * t7496 + t7581 * t7486 - t7308 * t7716 - t7581) * t7473 + t7000 * t7467) * t7520 + (t7308 * t7722 + (t7174 * t7366 * t7496 + (-(pkin(3) * t7180 - t7308 * t7744) * t7864 - t7605 * t7486 + t7605) * t7495) * pkin(9)) * t7473 + t7467 * t7682;
t6855 = ((-t6984 * t7462 + t7450 * t8039) * t7496 + (t7215 * t7462 - t7450 * t7933) * t7654) * t7493 + ((t7450 * t6990 - t7462 * t7620) * t7496 - t8064 * t7462 + t7450 * t6945) * t7542 - (t6942 * t7462 - t6993 * t7450) * t8013 + t8063 * t7462 - t7450 * t6951;
t6854 = ((t6984 * t7450 + t7462 * t8039) * t7496 + (t7215 * t7450 + t7462 * t7933) * t7655) * t7493 + ((t7462 * t6990 + t7450 * t7620) * t7496 + t8064 * t7450 + t6945 * t7462) * t7542 + (t6942 * t7450 + t6993 * t7462) * t8013 - t8063 * t7450 - t6951 * t7462;
t6853 = ((-t6983 * t7461 + t7449 * t8040) * t7496 + (t7214 * t7461 - t7449 * t7935) * t7654) * t7492 + ((t7449 * t6989 - t7461 * t7621) * t7496 - t8065 * t7461 + t7449 * t6944) * t7540 - (t6941 * t7461 - t6992 * t7449) * t8013 + t8062 * t7461 - t7449 * t6950;
t6852 = ((t6983 * t7449 + t7461 * t8040) * t7496 + (t7214 * t7449 + t7461 * t7935) * t7655) * t7492 + ((t7461 * t6989 + t7449 * t7621) * t7496 + t8065 * t7449 + t6944 * t7461) * t7540 + (t6941 * t7449 + t6992 * t7461) * t8013 - t8062 * t7449 - t6950 * t7461;
t6851 = ((-t6982 * t7460 + t7448 * t8041) * t7496 + (t7213 * t7460 - t7448 * t7937) * t7654) * t7491 + ((t7448 * t6988 - t7460 * t7622) * t7496 - t8066 * t7460 + t7448 * t6943) * t7538 - (t6940 * t7460 - t6991 * t7448) * t8013 + t8061 * t7460 - t7448 * t6949;
t6850 = ((t6982 * t7448 + t7460 * t8041) * t7496 + (t7213 * t7448 + t7460 * t7937) * t7655) * t7491 + ((t7460 * t6988 + t7448 * t7622) * t7496 + t8066 * t7448 + t6943 * t7460) * t7538 + (t6940 * t7448 + t6991 * t7460) * t8013 - t8061 * t7448 - t6949 * t7460;
t6849 = ((-t6978 * t7459 + t7447 * t8042) * t7496 + (t7212 * t7459 - t7447 * t7939) * t7654) * t7489 + ((t7447 * t6981 - t7459 * t7623) * t7496 - t8067 * t7459 + t7447 * t6939) * t7524 - (t6930 * t7459 - t6987 * t7447) * t8013 + t8060 * t7459 - t7447 * t6948;
t6848 = ((t6978 * t7447 + t7459 * t8042) * t7496 + (t7212 * t7447 + t7459 * t7939) * t7655) * t7489 + ((t7459 * t6981 + t7447 * t7623) * t7496 + t8067 * t7447 + t6939 * t7459) * t7524 + (t6930 * t7447 + t6987 * t7459) * t8013 - t8060 * t7447 - t6948 * t7459;
t6847 = ((-t6977 * t7458 + t7446 * t8043) * t7496 + (t7211 * t7458 - t7446 * t7941) * t7654) * t7488 + ((t7446 * t6980 - t7458 * t7624) * t7496 - t8068 * t7458 + t7446 * t6938) * t7522 - (t6929 * t7458 - t6986 * t7446) * t8013 + t8059 * t7458 - t7446 * t6947;
t6846 = ((t6977 * t7446 + t7458 * t8043) * t7496 + (t7211 * t7446 + t7458 * t7941) * t7655) * t7488 + ((t7458 * t6980 + t7446 * t7624) * t7496 + t8068 * t7446 + t6938 * t7458) * t7522 + (t6929 * t7446 + t6986 * t7458) * t8013 - t8059 * t7446 - t6947 * t7458;
t6845 = ((-t6976 * t7457 + t7445 * t8044) * t7496 + (t7210 * t7457 - t7445 * t7943) * t7654) * t7487 + ((t7445 * t6979 - t7457 * t7625) * t7496 - t8069 * t7457 + t7445 * t6937) * t7520 - (t6928 * t7457 - t6985 * t7445) * t8013 + t8058 * t7457 - t7445 * t6946;
t6844 = ((t6976 * t7445 + t7457 * t8044) * t7496 + (t7210 * t7445 + t7457 * t7943) * t7655) * t7487 + ((t7457 * t6979 + t7445 * t7625) * t7496 + t8069 * t7445 + t6937 * t7457) * t7520 + (t6928 * t7445 + t6985 * t7457) * t8013 - t8058 * t7445 - t6946 * t7457;
t1 = [-g(1) * m(4) + (-t6861 * t7968 + t6873 * t7986) * t7478 + (-t6860 * t7969 + t6872 * t7987) * t7477 + (-t6859 * t7970 + t6871 * t7988) * t7476 + (-t6858 * t7971 + t6870 * t7989) * t7475 + (-t6857 * t7972 + t6869 * t7990) * t7474 + (-t6856 * t7973 + t6868 * t7991) * t7473 + (-t6862 * t7985 - t6863 * t7984 - t6864 * t7983 - t6865 * t7982 - t6866 * t7981 - t6867 * t7980) * t7490; t6885 * t7992 + t6936 * t7998 + t6884 * t7993 + t6935 * t7999 + t6883 * t7994 + t6934 * t8000 + t6879 * t7995 + t6927 * t8001 + t6878 * t7996 + t6926 * t8002 + t6877 * t7997 + t6925 * t8003 - g(2) * m(4) + (-t6844 * t7985 - t6846 * t7984 - t6848 * t7983 - t6850 * t7982 - t6852 * t7981 - t6854 * t7980) * t7490; t6882 * t7992 + t6933 * t7998 + t6881 * t7993 + t6932 * t7999 + t6880 * t7994 + t6931 * t8000 + t6876 * t7995 + t6924 * t8001 + t6875 * t7996 + t6923 * t8002 + t6874 * t7997 + t6922 * t8003 - g(3) * m(4) + (-t6845 * t7985 - t6847 * t7984 - t6849 * t7983 - t6851 * t7982 - t6853 * t7981 - t6855 * t7980) * t7490; (-t6882 * t7131 - t6885 * t7132) * t7992 + (-t6933 * t7131 - t6936 * t7132) * t7998 + (-t6881 * t7127 - t6884 * t7128) * t7993 + (-t6932 * t7127 - t6935 * t7128) * t7999 + (-t6880 * t7123 - t6883 * t7124) * t7994 + (-t6931 * t7123 - t6934 * t7124) * t8000 + (-t6876 * t7119 - t6879 * t7120) * t7995 + (-t6924 * t7119 - t6927 * t7120) * t8001 + (-t6875 * t7115 - t6878 * t7116) * t7996 + (-t6923 * t7115 - t6926 * t7116) * t8002 + (-t6874 * t7111 - t6877 * t7112) * t7997 + (-t6922 * t7111 - t6925 * t7112) * t8003 - (-g(2) * t8057 + t7633 * g(3)) * t7484 + (t7633 * g(2) + g(3) * t8057) * t7481 + (-(-t6854 * t7132 - t6855 * t7131) * t7980 - (-t6852 * t7128 - t6853 * t7127) * t7981 - (-t6850 * t7124 - t6851 * t7123) * t7982 - (-t6848 * t7120 - t6849 * t7119) * t7983 - (-t6846 * t7116 - t6847 * t7115) * t7984 - (-t6844 * t7112 - t6845 * t7111) * t7985) * t7490; (-t6882 * t7974 + t7132 * t7760) * t6873 + (-t6933 * t7962 - t7132 * t7754) * t6861 + (-t6881 * t7975 + t7128 * t7761) * t6872 + (-t6932 * t7963 - t7128 * t7755) * t6860 + (-t6880 * t7976 + t7124 * t7762) * t6871 + (-t6931 * t7964 - t7124 * t7756) * t6859 + (-t6876 * t7977 + t7120 * t7763) * t6870 + (-t6924 * t7965 - t7120 * t7757) * t6858 + (-t6875 * t7978 + t7116 * t7764) * t6869 + (-t6923 * t7966 - t7116 * t7758) * t6857 + (-t6874 * t7979 + t7112 * t7765) * t6868 + (-t6922 * t7967 - t7112 * t7759) * t6856 - t8095 * g(3) + (-t7633 * t7481 - t7484 * t8057) * g(1) + (-(-t6855 * t7242 + t6867 * t7132) * t7980 - (-t6853 * t7241 + t6866 * t7128) * t7981 - (-t6851 * t7240 + t6865 * t7124) * t7982 - (-t6849 * t7239 + t6864 * t7120) * t7983 - (-t6847 * t7238 + t6863 * t7116) * t7984 - (-t6845 * t7237 + t6862 * t7112) * t7985) * t7490; (t6885 * t7974 + t7131 * t7760) * t6873 + (t6936 * t7962 - t7131 * t7754) * t6861 + (t6884 * t7975 + t7127 * t7761) * t6872 + (t6935 * t7963 - t7127 * t7755) * t6860 + (t6883 * t7976 + t7123 * t7762) * t6871 + (t6934 * t7964 - t7123 * t7756) * t6859 + (t6879 * t7977 + t7119 * t7763) * t6870 + (t6927 * t7965 - t7119 * t7757) * t6858 + (t6878 * t7978 + t7115 * t7764) * t6869 + (t6926 * t7966 - t7115 * t7758) * t6857 + (t6877 * t7979 + t7111 * t7765) * t6868 + (t6925 * t7967 - t7111 * t7759) * t6856 + t8095 * g(2) + (-t7481 * t7879 + (t7484 * t7549 + t7550 * t7887) * t7482 + (t7484 * t7550 - t7549 * t7887) * t7479) * g(1) + (-(t6854 * t7242 + t6867 * t7131) * t7980 - (t6852 * t7241 + t6866 * t7127) * t7981 - (t6850 * t7240 + t6865 * t7123) * t7982 - (t6848 * t7239 + t6864 * t7119) * t7983 - (t6846 * t7238 + t6863 * t7115) * t7984 - (t6844 * t7237 + t6862 * t7111) * t7985) * t7490;];
taugX  = t1;
