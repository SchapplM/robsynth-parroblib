% Calculate vector of centrifugal and coriolis load on the joints for
% P6RRPRRR14V3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [6x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-04-15 09:53
% Revision: 3acd05283b8979b361f80d69cfa1c98d98241298 (2019-04-12)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(1,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: pkin has to be [1x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V3A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-04-15 09:47:44
% EndTime: 2019-04-15 09:48:59
% DurationCPUTime: 81.44s
% Computational Cost: add. (129333->1656), mult. (252993->2632), div. (11046->12), fcn. (227424->42), ass. (0->1081)
t2886 = xP(4);
t2809 = sin(t2886);
t2812 = cos(t2886);
t3196 = t2809 * t2812;
t3404 = 0.2e1 * t3196;
t2888 = rSges(4,2);
t2889 = rSges(4,1);
t3281 = m(4) * t2889;
t3042 = (t2888 * t3281 - Icges(4,4));
t3381 = 2 * t3042;
t2885 = xP(5);
t2808 = sin(t2885);
t2811 = cos(t2885);
t3310 = koppelP(6,3);
t2884 = xP(6);
t2807 = sin(t2884);
t2810 = cos(t2884);
t3316 = koppelP(6,2);
t3322 = koppelP(6,1);
t3344 = -t2807 * t3316 + t2810 * t3322;
t2656 = t2808 * t3310 + t2811 * t3344;
t2879 = xDP(5);
t3186 = t2812 * t2879;
t2880 = xDP(4);
t2734 = t2807 * t3322 + t2810 * t3316;
t3335 = -t2808 * t3344 + t2811 * t3310;
t3360 = t2734 * t2812 - t2809 * t3335;
t3253 = t3360 * t2880;
t3403 = t2656 * t3186 - t3253;
t3195 = t2809 * t2879;
t3203 = t2809 * t2734;
t2582 = t2812 * t3335 + t3203;
t3257 = t2582 * t2880;
t3402 = -t2656 * t3195 + t3257;
t3311 = koppelP(5,3);
t3317 = koppelP(5,2);
t3323 = koppelP(5,1);
t3343 = -t2807 * t3317 + t2810 * t3323;
t2657 = t2808 * t3311 + t2811 * t3343;
t2735 = t2807 * t3323 + t2810 * t3317;
t3334 = -t2808 * t3343 + t2811 * t3311;
t3361 = t2735 * t2812 - t2809 * t3334;
t3252 = t3361 * t2880;
t3401 = t2657 * t3186 - t3252;
t3202 = t2809 * t2735;
t2583 = t2812 * t3334 + t3202;
t3256 = t2583 * t2880;
t3400 = -t2657 * t3195 + t3256;
t3312 = koppelP(4,3);
t3318 = koppelP(4,2);
t3324 = koppelP(4,1);
t3342 = -t2807 * t3318 + t2810 * t3324;
t2658 = t2808 * t3312 + t2811 * t3342;
t2736 = t2807 * t3324 + t2810 * t3318;
t3333 = -t2808 * t3342 + t2811 * t3312;
t3362 = t2736 * t2812 - t2809 * t3333;
t3251 = t3362 * t2880;
t3399 = t2658 * t3186 - t3251;
t3201 = t2809 * t2736;
t2584 = t2812 * t3333 + t3201;
t3255 = t2584 * t2880;
t3398 = -t2658 * t3195 + t3255;
t3313 = koppelP(3,3);
t3319 = koppelP(3,2);
t3325 = koppelP(3,1);
t3341 = -t2807 * t3319 + t2810 * t3325;
t2659 = t2808 * t3313 + t2811 * t3341;
t2737 = t2807 * t3325 + t2810 * t3319;
t3332 = -t2808 * t3341 + t2811 * t3313;
t3363 = t2737 * t2812 - t2809 * t3332;
t3250 = t3363 * t2880;
t3397 = t2659 * t3186 - t3250;
t3200 = t2809 * t2737;
t2585 = t2812 * t3332 + t3200;
t3254 = t2585 * t2880;
t3396 = -t2659 * t3195 + t3254;
t3314 = koppelP(2,3);
t3320 = koppelP(2,2);
t3326 = koppelP(2,1);
t3340 = -t2807 * t3320 + t2810 * t3326;
t2660 = t2808 * t3314 + t2811 * t3340;
t2738 = t2807 * t3326 + t2810 * t3320;
t3331 = -t2808 * t3340 + t2811 * t3314;
t3364 = t2738 * t2812 - t2809 * t3331;
t3249 = t3364 * t2880;
t3395 = t2660 * t3186 - t3249;
t3199 = t2809 * t2738;
t2600 = t2812 * t3331 + t3199;
t3247 = t2600 * t2880;
t3394 = -t2660 * t3195 + t3247;
t3315 = koppelP(1,3);
t3321 = koppelP(1,2);
t3327 = koppelP(1,1);
t3339 = -t2807 * t3321 + t2810 * t3327;
t2661 = t2808 * t3315 + t2811 * t3339;
t2739 = t2807 * t3327 + t2810 * t3321;
t3330 = -t2808 * t3339 + t2811 * t3315;
t3365 = t2739 * t2812 - t2809 * t3330;
t3248 = t3365 * t2880;
t3393 = t2661 * t3186 - t3248;
t3198 = t2809 * t2739;
t2603 = t2812 * t3330 + t3198;
t3246 = t2603 * t2880;
t3392 = -t2661 * t3195 + t3246;
t2887 = rSges(4,3);
t2780 = t2887 * t3281 - Icges(4,5);
t3218 = t2780 * t2811;
t2718 = t2807 * t3218;
t2789 = t2810 ^ 2;
t3307 = 0.2e1 * t2789;
t3107 = t3042 * t3307;
t3209 = t2808 * t3042;
t2779 = m(4) * t2887 * t2888 - Icges(4,6);
t3221 = t2779 * t2811;
t2846 = t2888 ^ 2;
t2847 = t2889 ^ 2;
t3337 = (-t2846 + t2847) * m(4) + Icges(4,2) - Icges(4,1);
t3224 = t3337 * t2807;
t3367 = t2810 * (-t2808 * t3224 + t3221);
t2538 = -t2808 * t3107 + t2718 + t3209 + t3367;
t2791 = t2812 ^ 2;
t2790 = t2811 ^ 2;
t3108 = 0.2e1 * t3218;
t3048 = t2808 * t3108;
t3217 = t3042 * t2807;
t3225 = t3337 * t2789;
t3306 = 0.2e1 * t2790;
t3300 = t3306 - 0.4e1;
t3223 = t2779 * t2807;
t2845 = t2887 ^ 2;
t3349 = (-t2845 + t2846) * m(4) + Icges(4,3) - Icges(4,2);
t3207 = t2808 * t2811;
t3390 = -0.2e1 * t3207;
t3350 = t3349 * t2790 + t3223 * t3390;
t3382 = (-t3217 * t3300 + t3048) * t2810 + (t2790 - 0.2e1) * t3225 + t3337 + t3350;
t3391 = t2538 * t3404 - t2791 * t3382;
t2860 = cos(qJ(2,6));
t3389 = t2582 * t2860;
t2862 = cos(qJ(2,5));
t3388 = t2583 * t2862;
t2864 = cos(qJ(2,4));
t3387 = t2584 * t2864;
t2872 = cos(qJ(2,3));
t3386 = t2585 * t2872;
t2874 = cos(qJ(2,2));
t3385 = t2600 * t2874;
t2876 = cos(qJ(2,1));
t3384 = t2603 * t2876;
t3213 = t2807 * t2810;
t2930 = t3213 * t3381 - t3225;
t2783 = t2808 * t2880;
t2878 = xDP(6);
t3348 = t2783 + t2878;
t3358 = t2807 * t3348;
t2975 = t3337 * t3358;
t3158 = t2879 * t2780;
t3212 = t2807 * t2878;
t2652 = -t3212 * t3337 + 0.2e1 * t3158;
t3047 = t2652 * t2790 - t3158;
t3383 = 0.2e1 * t2975 + t3047;
t3210 = t2807 * t2889;
t2726 = t2810 * t2888 + t3210;
t3193 = t2810 * t2889;
t2725 = t2807 * t2888 - t3193;
t3189 = t2811 * t2887;
t3336 = t2725 * t2808 + t3189;
t2559 = -t2726 * t2812 + t2809 * t3336;
t3160 = t2878 * t3042;
t3380 = -0.2e1 * t3160;
t3191 = t2811 * t2878;
t2573 = t2734 * t3191 - t2879 * t3335;
t3379 = t2573 * t2809;
t3378 = t2573 * t2812;
t2574 = t2735 * t3191 - t2879 * t3334;
t3377 = t2574 * t2809;
t3376 = t2574 * t2812;
t2575 = t2736 * t3191 - t2879 * t3333;
t3375 = t2575 * t2809;
t3374 = t2575 * t2812;
t2576 = t2737 * t3191 - t2879 * t3332;
t3373 = t2576 * t2809;
t3372 = t2576 * t2812;
t2577 = t2738 * t3191 - t2879 * t3331;
t3371 = t2577 * t2809;
t3370 = t2577 * t2812;
t2578 = t2739 * t3191 - t2879 * t3330;
t3369 = t2578 * t2809;
t3368 = t2578 * t2812;
t3211 = t2807 * t2879;
t2724 = t2779 * t3211;
t3308 = 0.2e1 * t2724;
t2663 = t3308 - t3160;
t3366 = -t2663 * t2790 + t2724;
t2730 = t3349 * t2879;
t3072 = t2780 * t3212;
t2651 = t2730 + t3072;
t3065 = t3042 * t3211;
t3220 = t2779 * t2878;
t2665 = -0.2e1 * t3065 + t3220;
t2539 = -t2665 * t2810 - t2879 * t3225 - t2651;
t3359 = t2539 * t2812;
t2854 = sin(qJ(2,6));
t2822 = 0.1e1 / t2854;
t2881 = xDP(3);
t3197 = t2809 * t2811;
t2390 = t2881 + (t2656 * t3197 + t2808 * t3360) * t2878 - t3403;
t2891 = 0.1e1 / qJ(3,6);
t2883 = xDP(1);
t2369 = t2883 + (t2582 * t2812 - t2809 * t3360) * t2879 + (-t2582 * t2809 - t2812 * t3360) * t3191;
t2882 = xDP(2);
t3192 = t2811 * t2812;
t2396 = t2882 + (-t2582 * t2808 + t2656 * t3192) * t2878 - t3402;
t2848 = legFrame(6,3);
t2792 = sin(t2848);
t2798 = cos(t2848);
t2855 = sin(qJ(1,6));
t2861 = cos(qJ(1,6));
t2706 = -t2792 * t2855 + t2798 * t2861;
t2707 = t2792 * t2861 + t2798 * t2855;
t2999 = t2369 * t2706 + t2396 * t2707;
t2197 = (t2390 * t2854 + t2860 * t2999) * t2891;
t2203 = -t2390 * t2860 + t2854 * t2999;
t3184 = t2822 * t2891;
t2221 = (-t2369 * t2707 + t2396 * t2706) * t3184;
t2698 = -t2809 * t3191 + t3186;
t3205 = t2808 * t2878;
t2764 = t2880 + t3205;
t2501 = -t2656 * t2698 + t2764 * t3360 + t2881;
t2697 = t2812 * t3191 + t3195;
t2426 = t2582 * t2698 - t2697 * t3360 + t2883;
t2507 = -t2582 * t2764 + t2656 * t2697 + t2882;
t2993 = t2426 * t2706 + t2507 * t2707;
t2265 = (t2501 * t2854 + t2860 * t2993) * t2891;
t2277 = -t2501 * t2860 + t2854 * t2993;
t2352 = (-t2426 * t2707 + t2507 * t2706) * t3184;
t2115 = (qJ(3,6) * t2265 * t2860 + t2277 * t2854) * t2221 * t3184 + (t2197 * t2822 * t2860 + t2203 * t2891) * t2352;
t3178 = t2854 * t2860;
t2121 = -t2221 * t2352 * t3178 + (t2197 * t2277 + t2203 * t2265) * t2891;
t2827 = t2860 ^ 2;
t3264 = t2352 * t2827;
t2127 = ((-t2352 + t3264) * t2221 - t2265 * t2197) * qJ(3,6);
t3088 = -m(2) * rSges(2,1) * rSges(2,2) + Icges(2,4) - Icges(3,5);
t2839 = rSges(3,3) + qJ(3,6);
t3293 = m(3) * t2839;
t2743 = rSges(3,1) * t3293 + t3088;
t2232 = t2743 * t2265;
t2262 = t2265 ^ 2;
t2904 = rSges(2,2) ^ 2;
t2906 = rSges(2,1) ^ 2;
t3266 = -Icges(2,1) - Icges(3,1);
t3002 = Icges(2,2) + Icges(3,3) + (-t2904 + t2906) * m(2) + t3266;
t2683 = -(rSges(3,1) + t2839) * (-rSges(3,1) + t2839) * m(3) + t3002;
t2903 = rSges(3,2) ^ 2;
t2917 = (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) + (rSges(2,3) ^ 2 + t2904) * m(2) + Icges(1,3) - t3266;
t2902 = rSges(3,3) ^ 2;
t3328 = 0.2e1 * rSges(3,3);
t3060 = t2902 + (t3328 + qJ(3,6)) * qJ(3,6);
t2540 = t2683 * t2827 + 0.2e1 * t2743 * t3178 + (t2903 + t3060) * m(3) + t2917;
t3303 = m(2) * rSges(2,3);
t3087 = -rSges(2,2) * t3303 + Icges(2,6) - Icges(3,6);
t2740 = rSges(3,2) * t3293 + t3087;
t3301 = m(3) * rSges(3,2);
t2762 = rSges(2,1) * t3303 + rSges(3,1) * t3301 - Icges(3,4) - Icges(2,5);
t2636 = t2740 * t2860 - t2854 * t2762;
t3106 = t2277 * t3293;
t3278 = rSges(3,2) * t2854;
t3115 = m(3) * t3278;
t3265 = -0.2e1 * t3301;
t3302 = m(3) * rSges(3,1);
t3153 = -t2115 * t2540 - t2121 * t2636 - t2127 * t3115 - 0.4e1 * (-t2232 + t3106 / 0.2e1) * t3264 + (-0.2e1 * (t2265 * t2683 - t2277 * t3302) * t2352 * t2854 - t2265 * (t2265 * t2762 + t2277 * t3265)) * t2860 - t2262 * t2740 * t2854 + 0.2e1 * (-t2232 + t3106) * t2352;
t3357 = t2822 * t3153;
t2856 = sin(qJ(2,5));
t2824 = 0.1e1 / t2856;
t2391 = t2881 + (t2657 * t3197 + t2808 * t3361) * t2878 - t3401;
t2893 = 0.1e1 / qJ(3,5);
t2370 = t2883 + (t2583 * t2812 - t2809 * t3361) * t2879 + (-t2583 * t2809 - t2812 * t3361) * t3191;
t2397 = t2882 + (-t2583 * t2808 + t2657 * t3192) * t2878 - t3400;
t2849 = legFrame(5,3);
t2793 = sin(t2849);
t2799 = cos(t2849);
t2857 = sin(qJ(1,5));
t2863 = cos(qJ(1,5));
t2708 = -t2793 * t2857 + t2799 * t2863;
t2709 = t2793 * t2863 + t2799 * t2857;
t2998 = t2370 * t2708 + t2397 * t2709;
t2198 = (t2391 * t2856 + t2862 * t2998) * t2893;
t2204 = -t2391 * t2862 + t2856 * t2998;
t3183 = t2824 * t2893;
t2222 = (-t2370 * t2709 + t2397 * t2708) * t3183;
t2502 = -t2657 * t2698 + t2764 * t3361 + t2881;
t2427 = t2583 * t2698 - t2697 * t3361 + t2883;
t2508 = -t2583 * t2764 + t2657 * t2697 + t2882;
t2992 = t2427 * t2708 + t2508 * t2709;
t2266 = (t2502 * t2856 + t2862 * t2992) * t2893;
t2278 = -t2502 * t2862 + t2856 * t2992;
t2353 = (-t2427 * t2709 + t2508 * t2708) * t3183;
t2116 = (qJ(3,5) * t2266 * t2862 + t2278 * t2856) * t2222 * t3183 + (t2198 * t2824 * t2862 + t2204 * t2893) * t2353;
t3176 = t2856 * t2862;
t2122 = -t2222 * t2353 * t3176 + (t2198 * t2278 + t2204 * t2266) * t2893;
t2828 = t2862 ^ 2;
t3263 = t2353 * t2828;
t2128 = ((-t2353 + t3263) * t2222 - t2266 * t2198) * qJ(3,5);
t2840 = rSges(3,3) + qJ(3,5);
t3292 = m(3) * t2840;
t2744 = rSges(3,1) * t3292 + t3088;
t2233 = t2744 * t2266;
t2263 = t2266 ^ 2;
t2684 = -(rSges(3,1) + t2840) * (-rSges(3,1) + t2840) * m(3) + t3002;
t3059 = t2902 + (t3328 + qJ(3,5)) * qJ(3,5);
t2541 = t2684 * t2828 + 0.2e1 * t2744 * t3176 + (t2903 + t3059) * m(3) + t2917;
t2741 = rSges(3,2) * t3292 + t3087;
t2637 = t2741 * t2862 - t2856 * t2762;
t3105 = t2278 * t3292;
t3277 = rSges(3,2) * t2856;
t3114 = m(3) * t3277;
t3152 = -t2116 * t2541 - t2122 * t2637 - t2128 * t3114 - 0.4e1 * (-t2233 + t3105 / 0.2e1) * t3263 + (-0.2e1 * (t2266 * t2684 - t2278 * t3302) * t2353 * t2856 - t2266 * (t2266 * t2762 + t2278 * t3265)) * t2862 - t2263 * t2741 * t2856 + 0.2e1 * (-t2233 + t3105) * t2353;
t3356 = t2824 * t3152;
t2858 = sin(qJ(2,4));
t2826 = 0.1e1 / t2858;
t2392 = t2881 + (t2658 * t3197 + t2808 * t3362) * t2878 - t3399;
t2895 = 0.1e1 / qJ(3,4);
t2371 = t2883 + (t2584 * t2812 - t2809 * t3362) * t2879 + (-t2584 * t2809 - t2812 * t3362) * t3191;
t2398 = t2882 + (-t2584 * t2808 + t2658 * t3192) * t2878 - t3398;
t2850 = legFrame(4,3);
t2794 = sin(t2850);
t2800 = cos(t2850);
t2859 = sin(qJ(1,4));
t2865 = cos(qJ(1,4));
t2710 = -t2794 * t2859 + t2800 * t2865;
t2711 = t2794 * t2865 + t2800 * t2859;
t2997 = t2371 * t2710 + t2398 * t2711;
t2199 = (t2392 * t2858 + t2864 * t2997) * t2895;
t2205 = -t2392 * t2864 + t2858 * t2997;
t3182 = t2826 * t2895;
t2223 = (-t2371 * t2711 + t2398 * t2710) * t3182;
t2503 = -t2658 * t2698 + t2764 * t3362 + t2881;
t2428 = t2584 * t2698 - t2697 * t3362 + t2883;
t2509 = -t2584 * t2764 + t2658 * t2697 + t2882;
t2991 = t2428 * t2710 + t2509 * t2711;
t2267 = (t2503 * t2858 + t2864 * t2991) * t2895;
t2279 = -t2503 * t2864 + t2858 * t2991;
t2354 = (-t2428 * t2711 + t2509 * t2710) * t3182;
t2117 = (qJ(3,4) * t2267 * t2864 + t2279 * t2858) * t2223 * t3182 + (t2199 * t2826 * t2864 + t2205 * t2895) * t2354;
t3174 = t2858 * t2864;
t2123 = -t2223 * t2354 * t3174 + (t2199 * t2279 + t2205 * t2267) * t2895;
t2829 = t2864 ^ 2;
t3262 = t2354 * t2829;
t2129 = ((-t2354 + t3262) * t2223 - t2267 * t2199) * qJ(3,4);
t2841 = rSges(3,3) + qJ(3,4);
t3291 = m(3) * t2841;
t2745 = rSges(3,1) * t3291 + t3088;
t2234 = t2745 * t2267;
t2264 = t2267 ^ 2;
t2685 = -(rSges(3,1) + t2841) * (-rSges(3,1) + t2841) * m(3) + t3002;
t3058 = t2902 + (t3328 + qJ(3,4)) * qJ(3,4);
t2542 = t2685 * t2829 + 0.2e1 * t2745 * t3174 + (t2903 + t3058) * m(3) + t2917;
t2742 = rSges(3,2) * t3291 + t3087;
t2638 = t2742 * t2864 - t2858 * t2762;
t3104 = t2279 * t3291;
t3276 = rSges(3,2) * t2858;
t3113 = m(3) * t3276;
t3151 = -t2117 * t2542 - t2123 * t2638 - t2129 * t3113 - 0.4e1 * (-t2234 + t3104 / 0.2e1) * t3262 + (-0.2e1 * (t2267 * t2685 - t2279 * t3302) * t2354 * t2858 - t2267 * (t2267 * t2762 + t2279 * t3265)) * t2864 - t2264 * t2742 * t2858 + 0.2e1 * (-t2234 + t3104) * t2354;
t3355 = t2826 * t3151;
t2866 = sin(qJ(2,3));
t2831 = 0.1e1 / t2866;
t2393 = t2881 + (t2659 * t3197 + t2808 * t3363) * t2878 - t3397;
t2897 = 0.1e1 / qJ(3,3);
t2372 = t2883 + (t2585 * t2812 - t2809 * t3363) * t2879 + (-t2585 * t2809 - t2812 * t3363) * t3191;
t2399 = t2882 + (-t2585 * t2808 + t2659 * t3192) * t2878 - t3396;
t2851 = legFrame(3,3);
t2795 = sin(t2851);
t2801 = cos(t2851);
t2867 = sin(qJ(1,3));
t2873 = cos(qJ(1,3));
t2712 = -t2795 * t2867 + t2801 * t2873;
t2713 = t2795 * t2873 + t2801 * t2867;
t2996 = t2372 * t2712 + t2399 * t2713;
t2200 = (t2393 * t2866 + t2872 * t2996) * t2897;
t2206 = -t2393 * t2872 + t2866 * t2996;
t3181 = t2831 * t2897;
t2224 = (-t2372 * t2713 + t2399 * t2712) * t3181;
t2504 = -t2659 * t2698 + t2764 * t3363 + t2881;
t2429 = t2585 * t2698 - t2697 * t3363 + t2883;
t2510 = -t2585 * t2764 + t2659 * t2697 + t2882;
t2990 = t2429 * t2712 + t2510 * t2713;
t2271 = (t2504 * t2866 + t2872 * t2990) * t2897;
t2280 = -t2504 * t2872 + t2866 * t2990;
t2359 = (-t2429 * t2713 + t2510 * t2712) * t3181;
t2118 = (qJ(3,3) * t2271 * t2872 + t2280 * t2866) * t2224 * t3181 + (t2200 * t2831 * t2872 + t2206 * t2897) * t2359;
t3169 = t2866 * t2872;
t2124 = -t2224 * t2359 * t3169 + (t2200 * t2280 + t2206 * t2271) * t2897;
t2836 = t2872 ^ 2;
t3261 = t2359 * t2836;
t2130 = ((-t2359 + t3261) * t2224 - t2271 * t2200) * qJ(3,3);
t2842 = rSges(3,3) + qJ(3,3);
t3290 = m(3) * t2842;
t2749 = rSges(3,1) * t3290 + t3088;
t2241 = t2749 * t2271;
t2268 = t2271 ^ 2;
t2686 = -(rSges(3,1) + t2842) * (-rSges(3,1) + t2842) * m(3) + t3002;
t3057 = t2902 + (t3328 + qJ(3,3)) * qJ(3,3);
t2544 = t2686 * t2836 + 0.2e1 * t2749 * t3169 + (t2903 + t3057) * m(3) + t2917;
t2746 = rSges(3,2) * t3290 + t3087;
t2639 = t2746 * t2872 - t2866 * t2762;
t3103 = t2280 * t3290;
t3275 = rSges(3,2) * t2866;
t3112 = m(3) * t3275;
t3150 = -t2118 * t2544 - t2124 * t2639 - t2130 * t3112 - 0.4e1 * (-t2241 + t3103 / 0.2e1) * t3261 + (-0.2e1 * (t2271 * t2686 - t2280 * t3302) * t2359 * t2866 - t2271 * (t2271 * t2762 + t2280 * t3265)) * t2872 - t2268 * t2746 * t2866 + 0.2e1 * (-t2241 + t3103) * t2359;
t3354 = t2831 * t3150;
t2868 = sin(qJ(2,2));
t2833 = 0.1e1 / t2868;
t2394 = t2881 + (t2660 * t3197 + t2808 * t3364) * t2878 - t3395;
t2899 = 0.1e1 / qJ(3,2);
t2373 = t2883 + (t2600 * t2812 - t2809 * t3364) * t2879 + (-t2600 * t2809 - t2812 * t3364) * t3191;
t2400 = t2882 + (-t2600 * t2808 + t2660 * t3192) * t2878 - t3394;
t2852 = legFrame(2,3);
t2796 = sin(t2852);
t2802 = cos(t2852);
t2869 = sin(qJ(1,2));
t2875 = cos(qJ(1,2));
t2714 = -t2796 * t2869 + t2802 * t2875;
t2715 = t2796 * t2875 + t2802 * t2869;
t2995 = t2373 * t2714 + t2400 * t2715;
t2201 = (t2394 * t2868 + t2874 * t2995) * t2899;
t2207 = -t2394 * t2874 + t2868 * t2995;
t3180 = t2833 * t2899;
t2225 = (-t2373 * t2715 + t2400 * t2714) * t3180;
t2505 = -t2660 * t2698 + t2764 * t3364 + t2881;
t2430 = t2600 * t2698 - t2697 * t3364 + t2883;
t2511 = -t2600 * t2764 + t2660 * t2697 + t2882;
t2989 = t2430 * t2714 + t2511 * t2715;
t2272 = (t2505 * t2868 + t2874 * t2989) * t2899;
t2281 = -t2505 * t2874 + t2868 * t2989;
t2360 = (-t2430 * t2715 + t2511 * t2714) * t3180;
t2119 = (qJ(3,2) * t2272 * t2874 + t2281 * t2868) * t2225 * t3180 + (t2201 * t2833 * t2874 + t2207 * t2899) * t2360;
t3167 = t2868 * t2874;
t2125 = -t2225 * t2360 * t3167 + (t2201 * t2281 + t2207 * t2272) * t2899;
t2837 = t2874 ^ 2;
t3260 = t2360 * t2837;
t2131 = ((-t2360 + t3260) * t2225 - t2272 * t2201) * qJ(3,2);
t2843 = rSges(3,3) + qJ(3,2);
t3289 = m(3) * t2843;
t2750 = rSges(3,1) * t3289 + t3088;
t2242 = t2750 * t2272;
t2269 = t2272 ^ 2;
t2687 = -(rSges(3,1) + t2843) * (-rSges(3,1) + t2843) * m(3) + t3002;
t3056 = t2902 + (t3328 + qJ(3,2)) * qJ(3,2);
t2545 = t2687 * t2837 + 0.2e1 * t2750 * t3167 + (t2903 + t3056) * m(3) + t2917;
t2747 = rSges(3,2) * t3289 + t3087;
t2640 = t2747 * t2874 - t2868 * t2762;
t3102 = t2281 * t3289;
t3274 = rSges(3,2) * t2868;
t3111 = m(3) * t3274;
t3149 = -t2119 * t2545 - t2125 * t2640 - t2131 * t3111 - 0.4e1 * (-t2242 + t3102 / 0.2e1) * t3260 + (-0.2e1 * (t2272 * t2687 - t2281 * t3302) * t2360 * t2868 - t2272 * (t2272 * t2762 + t2281 * t3265)) * t2874 - t2269 * t2747 * t2868 + 0.2e1 * (-t2242 + t3102) * t2360;
t3353 = t2833 * t3149;
t2870 = sin(qJ(2,1));
t2835 = 0.1e1 / t2870;
t2395 = t2881 + (t2661 * t3197 + t2808 * t3365) * t2878 - t3393;
t2901 = 0.1e1 / qJ(3,1);
t2374 = t2883 + (t2603 * t2812 - t2809 * t3365) * t2879 + (-t2603 * t2809 - t2812 * t3365) * t3191;
t2401 = t2882 + (-t2603 * t2808 + t2661 * t3192) * t2878 - t3392;
t2853 = legFrame(1,3);
t2797 = sin(t2853);
t2803 = cos(t2853);
t2871 = sin(qJ(1,1));
t2877 = cos(qJ(1,1));
t2716 = -t2797 * t2871 + t2803 * t2877;
t2717 = t2797 * t2877 + t2803 * t2871;
t2994 = t2374 * t2716 + t2401 * t2717;
t2202 = (t2395 * t2870 + t2876 * t2994) * t2901;
t2208 = -t2395 * t2876 + t2870 * t2994;
t3179 = t2835 * t2901;
t2226 = (-t2374 * t2717 + t2401 * t2716) * t3179;
t2506 = -t2661 * t2698 + t2764 * t3365 + t2881;
t2431 = t2603 * t2698 - t2697 * t3365 + t2883;
t2512 = -t2603 * t2764 + t2661 * t2697 + t2882;
t2988 = t2431 * t2716 + t2512 * t2717;
t2273 = (t2506 * t2870 + t2876 * t2988) * t2901;
t2282 = -t2506 * t2876 + t2870 * t2988;
t2361 = (-t2431 * t2717 + t2512 * t2716) * t3179;
t2120 = (qJ(3,1) * t2273 * t2876 + t2282 * t2870) * t2226 * t3179 + (t2202 * t2835 * t2876 + t2208 * t2901) * t2361;
t3165 = t2870 * t2876;
t2126 = -t2226 * t2361 * t3165 + (t2202 * t2282 + t2208 * t2273) * t2901;
t2838 = t2876 ^ 2;
t3259 = t2361 * t2838;
t2132 = ((-t2361 + t3259) * t2226 - t2273 * t2202) * qJ(3,1);
t2844 = rSges(3,3) + qJ(3,1);
t3288 = m(3) * t2844;
t2751 = rSges(3,1) * t3288 + t3088;
t2243 = t2751 * t2273;
t2270 = t2273 ^ 2;
t2688 = -(rSges(3,1) + t2844) * (-rSges(3,1) + t2844) * m(3) + t3002;
t3055 = t2902 + (t3328 + qJ(3,1)) * qJ(3,1);
t2546 = t2688 * t2838 + 0.2e1 * t2751 * t3165 + (t2903 + t3055) * m(3) + t2917;
t2748 = rSges(3,2) * t3288 + t3087;
t2641 = t2748 * t2876 - t2870 * t2762;
t3101 = t2282 * t3288;
t3273 = rSges(3,2) * t2870;
t3110 = m(3) * t3273;
t3148 = -t2120 * t2546 - t2126 * t2641 - t2132 * t3110 - 0.4e1 * (-t2243 + t3101 / 0.2e1) * t3259 + (-0.2e1 * (t2273 * t2688 - t2282 * t3302) * t2361 * t2870 - t2273 * (t2273 * t2762 + t2282 * t3265)) * t2876 - t2270 * t2748 * t2870 + 0.2e1 * (-t2243 + t3101) * t2361;
t3352 = t2835 * t3148;
t2349 = t2352 ^ 2;
t2905 = rSges(3,1) ^ 2;
t3041 = (t2904 + t2906) * m(2) + Icges(3,2) + Icges(2,3);
t2690 = (t2905 + t3060) * m(3) + t3041;
t3147 = -t2115 * t2636 - t2121 * t2690 + t2127 * t3302 + 0.2e1 * t2265 * t3106 + (t2683 * t3178 - 0.2e1 * t2743 * t2827 + t2743) * t2349;
t2350 = t2353 ^ 2;
t2691 = (t2905 + t3059) * m(3) + t3041;
t3146 = -t2116 * t2637 - t2122 * t2691 + t2128 * t3302 + 0.2e1 * t2266 * t3105 + (t2684 * t3176 - 0.2e1 * t2744 * t2828 + t2744) * t2350;
t2351 = t2354 ^ 2;
t2692 = (t2905 + t3058) * m(3) + t3041;
t3145 = -t2117 * t2638 - t2123 * t2692 + t2129 * t3302 + 0.2e1 * t2267 * t3104 + (t2685 * t3174 - 0.2e1 * t2745 * t2829 + t2745) * t2351;
t2355 = t2359 ^ 2;
t2693 = (t2905 + t3057) * m(3) + t3041;
t3144 = -t2118 * t2639 - t2124 * t2693 + t2130 * t3302 + 0.2e1 * t2271 * t3103 + (t2686 * t3169 - 0.2e1 * t2749 * t2836 + t2749) * t2355;
t2356 = t2360 ^ 2;
t2694 = (t2905 + t3056) * m(3) + t3041;
t3143 = -t2119 * t2640 - t2125 * t2694 + t2131 * t3302 + 0.2e1 * t2272 * t3102 + (t2687 * t3167 - 0.2e1 * t2750 * t2837 + t2750) * t2356;
t2357 = t2361 ^ 2;
t2695 = (t2905 + t3055) * m(3) + t3041;
t3142 = -t2120 * t2641 - t2126 * t2695 + t2132 * t3302 + 0.2e1 * t2273 * t3101 + (t2688 * t3165 - 0.2e1 * t2751 * t2838 + t2751) * t2357;
t3190 = t2811 * t2879;
t3074 = t3337 * t3190;
t3016 = t2808 * t3074;
t3154 = t2880 * t3042;
t3062 = t2808 * t3154;
t3159 = t2878 * t2790;
t3351 = (-t3016 - (-0.4e1 * t3348 + 0.2e1 * t3159) * t3042) * t2789 - 0.2e1 * t3062 + t3380 + t3366;
t3206 = t2808 * t2812;
t2455 = -(t2739 * t3206 + t2809 * t3339) * t2878 + t3393;
t2453 = -(t2738 * t3206 + t2809 * t3340) * t2878 + t3395;
t2451 = -(t2737 * t3206 + t2809 * t3341) * t2878 + t3397;
t2449 = -(t2736 * t3206 + t2809 * t3342) * t2878 + t3399;
t2447 = -(t2735 * t3206 + t2809 * t3343) * t2878 + t3401;
t2445 = -(t2734 * t3206 + t2809 * t3344) * t2878 + t3403;
t2627 = t2651 * t2808;
t3219 = t2780 * t2807;
t3061 = t2880 * t3219;
t3346 = 0.2e1 * t3061 + t2627;
t2632 = t2665 * t2808;
t3155 = t2880 * t2779;
t3338 = 0.2e1 * t3155 + t2632;
t3156 = t2880 * t3337;
t3329 = t3042 * (t2764 * t3307 - t2880) - t2810 * (t2652 * t2808 - t2807 * t3156) + t2663 * t2808;
t2680 = t2780 * t2810 - t3223;
t3309 = 0.2e1 * t2680;
t3243 = t2707 * t2854;
t2464 = -t2582 * t3243 - t2860 * t3360;
t3299 = m(3) * t2464;
t3241 = t2709 * t2856;
t2465 = -t2583 * t3241 - t2862 * t3361;
t3298 = m(3) * t2465;
t3239 = t2711 * t2858;
t2466 = -t2584 * t3239 - t2864 * t3362;
t3297 = m(3) * t2466;
t3237 = t2713 * t2866;
t2467 = -t2585 * t3237 - t2872 * t3363;
t3296 = m(3) * t2467;
t3235 = t2715 * t2868;
t2468 = -t2600 * t3235 - t2874 * t3364;
t3295 = m(3) * t2468;
t3233 = t2717 * t2870;
t2469 = -t2603 * t3233 - t2876 * t3365;
t3294 = m(3) * t2469;
t3287 = m(3) * t2860;
t3286 = m(3) * t2862;
t3285 = m(3) * t2864;
t3284 = m(3) * t2872;
t3283 = m(3) * t2874;
t3282 = m(3) * t2876;
t2772 = Icges(4,2) + m(4) * (t2845 + t2847);
t2771 = m(4) * (t2845 + t2846) + Icges(4,1);
t3279 = m(4) * (t2846 + t2847) + Icges(4,3);
t3272 = rSges(3,2) * t2891;
t3271 = rSges(3,2) * t2893;
t3270 = rSges(3,2) * t2895;
t3269 = rSges(3,2) * t2897;
t3268 = rSges(3,2) * t2899;
t3267 = rSges(3,2) * t2901;
t3157 = t2879 * t2887;
t3204 = t2808 * t2879;
t2565 = (t2726 * t2878 - t3157) * t2811 - t2725 * t3204;
t3258 = t2565 * t2809;
t3244 = t2706 * t2854;
t3242 = t2708 * t2856;
t3240 = t2710 * t2858;
t3238 = t2712 * t2866;
t3236 = t2714 * t2868;
t3234 = t2716 * t2870;
t3222 = t2779 * t2810;
t3216 = t2789 * t2878;
t3215 = t2790 * t2809;
t3214 = t2790 * t2880;
t3208 = t2808 * t2809;
t3194 = t2809 * t2880;
t3188 = t2812 * t2680;
t3187 = t2812 * t3042;
t3185 = t2812 * t2880;
t3177 = t2854 * t2891;
t3175 = t2856 * t2893;
t3173 = t2858 * t2895;
t3172 = t2860 * t2891;
t3171 = t2862 * t2893;
t3170 = t2864 * t2895;
t3168 = t2866 * t2897;
t3166 = t2868 * t2899;
t3164 = t2870 * t2901;
t3163 = t2872 * t2897;
t3162 = t2874 * t2899;
t3161 = t2876 * t2901;
t3043 = t2878 + 0.2e1 * t2783;
t3063 = t3349 * t3214;
t3064 = t3042 * t3190;
t3073 = t2807 * t3158;
t2348 = (0.2e1 * t3064 - (-0.2e1 * t2764 + t3214) * t3337) * t2789 + ((-t2780 * t3043 + t3211 * t3337) * t2811 + t2779 * t3204 - (-t2880 * t3300 + 0.4e1 * t3205) * t3217) * t2810 - t3063 + (-t2879 * t3042 + t3043 * t3223) * t2811 + (-t2878 * t3337 + t3073) * t2808 - t3156;
t2662 = t2724 - t3160 / 0.2e1;
t2974 = t3062 + t3160;
t3141 = ((t3016 / 0.2e1 - (0.2e1 * t3348 - t3159) * t3042) * t2789 + (((-t3065 + t3220 / 0.2e1) * t2808 + t3155) * t2811 + (-t2790 + 0.1e1 / 0.2e1) * t3158 - (-t3159 / 0.2e1 + t3348) * t3224) * t2810 + t2662 * t2790 + ((t3072 / 0.2e1 + t2730 / 0.2e1) * t2808 + t3061) * t2811 - t2724 / 0.2e1 + t2974) * t3404 + t2348 * t2791;
t3109 = t2880 * t3309;
t3100 = t2706 * t3272;
t3099 = t2707 * t3272;
t3098 = t2708 * t3271;
t3097 = t2709 * t3271;
t3096 = t2710 * t3270;
t3095 = t2711 * t3270;
t3094 = t2712 * t3269;
t3093 = t2713 * t3269;
t3092 = t2714 * t3268;
t3091 = t2715 * t3268;
t3090 = t2716 * t3267;
t3089 = t2717 * t3267;
t3086 = t2706 * t3184;
t3085 = t2707 * t3184;
t3084 = t2708 * t3183;
t3083 = t2709 * t3183;
t3082 = t2710 * t3182;
t3081 = t2711 * t3182;
t3080 = t2712 * t3181;
t3079 = t2713 * t3181;
t3078 = t2714 * t3180;
t3077 = t2715 * t3180;
t3076 = t2716 * t3179;
t3075 = t2717 * t3179;
t3069 = t3042 * t3208;
t3068 = t2808 * t3187;
t3067 = t2348 * t3196;
t3054 = t2860 * t3147;
t3053 = t2862 * t3146;
t3052 = t2864 * t3145;
t3051 = t2872 * t3144;
t3050 = t2874 * t3143;
t3049 = t2876 * t3142;
t3045 = -t2764 + t3214;
t3040 = t2540 * t3085;
t3039 = t2541 * t3083;
t3038 = t2542 * t3081;
t3037 = t2544 * t3079;
t3036 = t2545 * t3077;
t3035 = t2546 * t3075;
t3034 = t2582 * t3086;
t3033 = t2583 * t3084;
t3032 = t2584 * t3082;
t3031 = t2585 * t3080;
t3030 = t2600 * t3078;
t3029 = t2603 * t3076;
t3028 = t2636 * t3086;
t3027 = t2636 * t3085;
t3026 = t2637 * t3084;
t3025 = t2637 * t3083;
t3024 = t2638 * t3082;
t3023 = t2638 * t3081;
t3022 = t2639 * t3080;
t3021 = t2639 * t3079;
t3020 = t2640 * t3078;
t3019 = t2640 * t3077;
t3018 = t2641 * t3076;
t3017 = t2641 * t3075;
t3014 = -rSges(3,1) * t3172 + t2854;
t3013 = -rSges(3,1) * t3171 + t2856;
t3012 = -rSges(3,1) * t3170 + t2858;
t3011 = -rSges(3,1) * t3163 + t2866;
t3010 = -rSges(3,1) * t3162 + t2868;
t3009 = -rSges(3,1) * t3161 + t2870;
t3008 = t2707 * t3357;
t3007 = t2709 * t3356;
t3006 = t2711 * t3355;
t3005 = t2713 * t3354;
t3004 = t2715 * t3353;
t3003 = t2717 * t3352;
t2987 = t2656 * t2707 - t2706 * t3360;
t2986 = t2657 * t2709 - t2708 * t3361;
t2985 = t2658 * t2711 - t2710 * t3362;
t2984 = t2659 * t2713 - t2712 * t3363;
t2983 = t2660 * t2715 - t2714 * t3364;
t2982 = t2661 * t2717 - t2716 * t3365;
t2666 = t2725 * t2811 - t2808 * t2887;
t2470 = t2987 * t3172;
t2471 = (t2656 * t2706 + t2707 * t3360) * t3184;
t2482 = t2987 * t2854;
t2247 = t2470 * t2690 + t2471 * t2636 - t2482 * t3302;
t2315 = (-rSges(3,1) * t2470 + t2471 * t3278 + t2482) * m(3);
t2973 = t2247 * t3172 + t2315 * t2854;
t2472 = t2986 * t3171;
t2473 = (t2657 * t2708 + t2709 * t3361) * t3183;
t2483 = t2986 * t2856;
t2248 = t2472 * t2691 + t2473 * t2637 - t2483 * t3302;
t2316 = (-rSges(3,1) * t2472 + t2473 * t3277 + t2483) * m(3);
t2972 = t2248 * t3171 + t2316 * t2856;
t2474 = t2985 * t3170;
t2475 = (t2658 * t2710 + t2711 * t3362) * t3182;
t2484 = t2985 * t2858;
t2249 = t2474 * t2692 + t2475 * t2638 - t2484 * t3302;
t2317 = (-rSges(3,1) * t2474 + t2475 * t3276 + t2484) * m(3);
t2971 = t2249 * t3170 + t2317 * t2858;
t2476 = t2984 * t3163;
t2477 = (t2659 * t2712 + t2713 * t3363) * t3181;
t2486 = t2984 * t2866;
t2274 = t2476 * t2693 + t2477 * t2639 - t2486 * t3302;
t2318 = (-rSges(3,1) * t2476 + t2477 * t3275 + t2486) * m(3);
t2970 = t2274 * t3163 + t2318 * t2866;
t2478 = t2983 * t3162;
t2479 = (t2660 * t2714 + t2715 * t3364) * t3180;
t2487 = t2983 * t2868;
t2275 = t2478 * t2694 + t2479 * t2640 - t2487 * t3302;
t2319 = (-rSges(3,1) * t2478 + t2479 * t3274 + t2487) * m(3);
t2969 = t2275 * t3162 + t2319 * t2868;
t2480 = t2982 * t3161;
t2481 = (t2661 * t2716 + t2717 * t3365) * t3179;
t2488 = t2982 * t2870;
t2276 = t2480 * t2695 + t2481 * t2641 - t2488 * t3302;
t2320 = (-rSges(3,1) * t2480 + t2481 * t3273 + t2488) * m(3);
t2968 = t2276 * t3161 + t2320 * t2870;
t2458 = (-t2707 * t3389 + t2854 * t3360) * t2891;
t2309 = -rSges(3,1) * t3299 + t2458 * t2690 - t2582 * t3028;
t2329 = (-rSges(3,1) * t2458 - t2582 * t3100 + t2464) * m(3);
t2967 = t2309 * t3172 + t2329 * t2854;
t2459 = (-t2709 * t3388 + t2856 * t3361) * t2893;
t2310 = -rSges(3,1) * t3298 + t2459 * t2691 - t2583 * t3026;
t2330 = (-rSges(3,1) * t2459 - t2583 * t3098 + t2465) * m(3);
t2966 = t2310 * t3171 + t2330 * t2856;
t2460 = (-t2711 * t3387 + t2858 * t3362) * t2895;
t2311 = -rSges(3,1) * t3297 + t2460 * t2692 - t2584 * t3024;
t2331 = (-rSges(3,1) * t2460 - t2584 * t3096 + t2466) * m(3);
t2965 = t2311 * t3170 + t2331 * t2858;
t2461 = (-t2713 * t3386 + t2866 * t3363) * t2897;
t2312 = -rSges(3,1) * t3296 + t2461 * t2693 - t2585 * t3022;
t2332 = (-rSges(3,1) * t2461 - t2585 * t3094 + t2467) * m(3);
t2964 = t2312 * t3163 + t2332 * t2866;
t2462 = (-t2715 * t3385 + t2868 * t3364) * t2899;
t2313 = -rSges(3,1) * t3295 + t2462 * t2694 - t2600 * t3020;
t2333 = (-rSges(3,1) * t2462 - t2600 * t3092 + t2468) * m(3);
t2963 = t2313 * t3162 + t2333 * t2868;
t2463 = (-t2717 * t3384 + t2870 * t3365) * t2901;
t2314 = -rSges(3,1) * t3294 + t2463 * t2695 - t2603 * t3018;
t2334 = (-rSges(3,1) * t2463 - t2603 * t3090 + t2469) * m(3);
t2962 = t2314 * t3161 + t2334 * t2870;
t2513 = (-t2656 * t2854 + t2706 * t3389) * t2891;
t2519 = t2582 * t3244 + t2656 * t2860;
t2323 = t2513 * t2690 - t2519 * t3302 - t2582 * t3027;
t2362 = (-rSges(3,1) * t2513 - t2582 * t3099 + t2519) * m(3);
t2961 = t2323 * t3172 + t2362 * t2854;
t2514 = (-t2657 * t2856 + t2708 * t3388) * t2893;
t2520 = t2583 * t3242 + t2657 * t2862;
t2324 = t2514 * t2691 - t2520 * t3302 - t2583 * t3025;
t2363 = (-rSges(3,1) * t2514 - t2583 * t3097 + t2520) * m(3);
t2960 = t2324 * t3171 + t2363 * t2856;
t2515 = (-t2658 * t2858 + t2710 * t3387) * t2895;
t2521 = t2584 * t3240 + t2658 * t2864;
t2325 = t2515 * t2692 - t2521 * t3302 - t2584 * t3023;
t2364 = (-rSges(3,1) * t2515 - t2584 * t3095 + t2521) * m(3);
t2959 = t2325 * t3170 + t2364 * t2858;
t2516 = (-t2659 * t2866 + t2712 * t3386) * t2897;
t2522 = t2585 * t3238 + t2659 * t2872;
t2326 = t2516 * t2693 - t2522 * t3302 - t2585 * t3021;
t2365 = (-rSges(3,1) * t2516 - t2585 * t3093 + t2522) * m(3);
t2958 = t2326 * t3163 + t2365 * t2866;
t2517 = (-t2660 * t2868 + t2714 * t3385) * t2899;
t2523 = t2600 * t3236 + t2660 * t2874;
t2327 = t2517 * t2694 - t2523 * t3302 - t2600 * t3019;
t2366 = (-rSges(3,1) * t2517 - t2600 * t3091 + t2523) * m(3);
t2957 = t2327 * t3162 + t2366 * t2868;
t2518 = (-t2661 * t2870 + t2716 * t3384) * t2901;
t2524 = t2603 * t3234 + t2661 * t2876;
t2328 = t2518 * t2695 - t2524 * t3302 - t2603 * t3017;
t2367 = (-rSges(3,1) * t2518 - t2603 * t3089 + t2524) * m(3);
t2956 = t2328 * t3161 + t2367 * t2870;
t2929 = t2690 * t3172 - t2854 * t3302;
t2489 = t2707 * t2929 + t3028;
t2547 = (t2707 * t3014 + t3100) * m(3);
t2955 = t2489 * t3172 + t2547 * t2854;
t2490 = t2706 * t2929 - t3027;
t2548 = (t2706 * t3014 - t3099) * m(3);
t2954 = t2490 * t3172 + t2548 * t2854;
t2928 = t2691 * t3171 - t2856 * t3302;
t2491 = t2709 * t2928 + t3026;
t2549 = (t2709 * t3013 + t3098) * m(3);
t2953 = t2491 * t3171 + t2549 * t2856;
t2492 = t2708 * t2928 - t3025;
t2550 = (t2708 * t3013 - t3097) * m(3);
t2952 = t2492 * t3171 + t2550 * t2856;
t2927 = t2692 * t3170 - t2858 * t3302;
t2493 = t2711 * t2927 + t3024;
t2551 = (t2711 * t3012 + t3096) * m(3);
t2951 = t2493 * t3170 + t2551 * t2858;
t2494 = t2710 * t2927 - t3023;
t2552 = (t2710 * t3012 - t3095) * m(3);
t2950 = t2494 * t3170 + t2552 * t2858;
t2926 = t2693 * t3163 - t2866 * t3302;
t2495 = t2713 * t2926 + t3022;
t2553 = (t2713 * t3011 + t3094) * m(3);
t2949 = t2495 * t3163 + t2553 * t2866;
t2496 = t2712 * t2926 - t3021;
t2554 = (t2712 * t3011 - t3093) * m(3);
t2948 = t2496 * t3163 + t2554 * t2866;
t2925 = t2694 * t3162 - t2868 * t3302;
t2497 = t2715 * t2925 + t3020;
t2555 = (t2715 * t3010 + t3092) * m(3);
t2947 = t2497 * t3162 + t2555 * t2868;
t2498 = t2714 * t2925 - t3019;
t2556 = (t2714 * t3010 - t3091) * m(3);
t2946 = t2498 * t3162 + t2556 * t2868;
t2924 = t2695 * t3161 - t2870 * t3302;
t2499 = t2717 * t2924 + t3018;
t2557 = (t2717 * t3009 + t3090) * m(3);
t2945 = t2499 * t3161 + t2557 * t2870;
t2500 = t2716 * t2924 - t3017;
t2558 = (t2716 * t3009 - t3089) * m(3);
t2944 = t2500 * t3161 + t2558 * t2870;
t2633 = rSges(3,1) * t3287 + t2690 * t3177;
t2752 = (-rSges(3,1) * t3177 - t2860) * m(3);
t2937 = t2633 * t3172 + t2752 * t2854;
t2634 = rSges(3,1) * t3286 + t2691 * t3175;
t2753 = (-rSges(3,1) * t3175 - t2862) * m(3);
t2936 = t2634 * t3171 + t2753 * t2856;
t2635 = rSges(3,1) * t3285 + t2692 * t3173;
t2754 = (-rSges(3,1) * t3173 - t2864) * m(3);
t2935 = t2635 * t3170 + t2754 * t2858;
t2642 = rSges(3,1) * t3284 + t2693 * t3168;
t2756 = (-rSges(3,1) * t3168 - t2872) * m(3);
t2934 = t2642 * t3163 + t2756 * t2866;
t2643 = rSges(3,1) * t3283 + t2694 * t3166;
t2757 = (-rSges(3,1) * t3166 - t2874) * m(3);
t2933 = t2643 * t3162 + t2757 * t2868;
t2644 = rSges(3,1) * t3282 + t2695 * t3164;
t2758 = (-rSges(3,1) * t3164 - t2876) * m(3);
t2932 = t2644 * t3161 + t2758 * t2870;
t2923 = t2854 ^ 2 * t3301 + t2636 * t3172;
t2922 = t2856 ^ 2 * t3301 + t2637 * t3171;
t2921 = t2858 ^ 2 * t3301 + t2638 * t3170;
t2920 = t2866 ^ 2 * t3301 + t2639 * t3163;
t2919 = t2868 ^ 2 * t3301 + t2640 * t3162;
t2918 = t2870 ^ 2 * t3301 + t2641 * t3161;
t2915 = (t2764 * t2888 - t2889 * t3190) * t2810 + (t2878 * t3210 - t3157) * t2808 + (t2880 * t2889 + t2888 * t3190) * t2807;
t2434 = (t2808 * t3203 - t2812 * t3344) * t2878 + t3402;
t2435 = (t2808 * t3202 - t2812 * t3343) * t2878 + t3400;
t2436 = (t2808 * t3201 - t2812 * t3342) * t2878 + t3398;
t2437 = (t2808 * t3200 - t2812 * t3341) * t2878 + t3396;
t2456 = (t2808 * t3199 - t2812 * t3340) * t2878 + t3394;
t2457 = (t2808 * t3198 - t2812 * t3339) * t2878 + t3392;
t2759 = t2783 + t2878 / 0.2e1;
t2696 = t3337 * t3208;
t2682 = t2808 * t3195 - t2811 * t3185;
t2681 = -t2808 * t3186 - t2811 * t3194;
t2664 = t2779 * t2879 + t2807 * t3380;
t2655 = t2771 * t2878 + t3073;
t2630 = -t2809 * t3337 - 0.2e1 * t3068;
t2629 = -t2812 * t3337 + 0.2e1 * t3069;
t2613 = t2930 - t3349;
t2612 = (-rSges(3,2) * t3282 + t2641 * t2901) * t2870;
t2611 = (-rSges(3,2) * t3283 + t2640 * t2899) * t2868;
t2610 = (-rSges(3,2) * t3284 + t2639 * t2897) * t2866;
t2609 = (-rSges(3,2) * t3285 + t2638 * t2895) * t2858;
t2608 = (-rSges(3,2) * t3286 + t2637 * t2893) * t2856;
t2607 = (-rSges(3,2) * t3287 + t2636 * t2891) * t2854;
t2581 = t2644 * t3164 - t2758 * t2876;
t2580 = t2643 * t3166 - t2757 * t2874;
t2579 = t2642 * t3168 - t2756 * t2872;
t2566 = -t2880 * t3189 - t2888 * t3358 + t3193 * t3348;
t2564 = t2635 * t3173 - t2754 * t2864;
t2563 = t2634 * t3175 - t2753 * t2862;
t2562 = t2633 * t3177 - t2752 * t2860;
t2561 = t2726 * t2809 + t2812 * t3336;
t2543 = t2780 * t3358 + t2879 * t3279 + t3222 * t3348;
t2537 = t2772 * t2878 - t2783 * t3349 + t2930 * t3348;
t2536 = t2661 * t3194 + t3368;
t2535 = t2661 * t3185 - t3369;
t2534 = t2660 * t3194 + t3370;
t2533 = t2660 * t3185 - t3371;
t2532 = t2659 * t3194 + t3372;
t2531 = t2659 * t3185 - t3373;
t2530 = t2658 * t3194 + t3374;
t2529 = t2658 * t3185 - t3375;
t2528 = t2657 * t3194 + t3376;
t2527 = t2657 * t3185 - t3377;
t2526 = t2656 * t3194 + t3378;
t2525 = t2656 * t3185 - t3379;
t2433 = t2566 * t2812 - t2809 * t2915;
t2432 = t2809 * t2566 + t2812 * t2915;
t2425 = -t2612 * t3075 + t2716 * t2932;
t2424 = t2612 * t3076 + t2717 * t2932;
t2423 = -t2611 * t3077 + t2714 * t2933;
t2422 = t2611 * t3078 + t2715 * t2933;
t2421 = -t2610 * t3079 + t2712 * t2934;
t2420 = t2610 * t3080 + t2713 * t2934;
t2419 = -t2609 * t3081 + t2710 * t2935;
t2418 = t2609 * t3082 + t2711 * t2935;
t2417 = -t2608 * t3083 + t2708 * t2936;
t2416 = t2608 * t3084 + t2709 * t2936;
t2415 = -t2607 * t3085 + t2706 * t2937;
t2414 = t2607 * t3086 + t2707 * t2937;
t2413 = t2716 * t2918 - t3035;
t2412 = t2546 * t3076 + t2717 * t2918;
t2411 = t2714 * t2919 - t3036;
t2410 = t2545 * t3078 + t2715 * t2919;
t2409 = t2712 * t2920 - t3037;
t2408 = t2544 * t3080 + t2713 * t2920;
t2407 = t2710 * t2921 - t3038;
t2406 = t2542 * t3082 + t2711 * t2921;
t2405 = t2708 * t2922 - t3039;
t2404 = t2541 * t3084 + t2709 * t2922;
t2403 = t2706 * t2923 - t3040;
t2402 = t2540 * t3086 + t2707 * t2923;
t2389 = t2500 * t3164 - t2558 * t2876;
t2388 = t2499 * t3164 - t2557 * t2876;
t2387 = t2498 * t3166 - t2556 * t2874;
t2386 = t2497 * t3166 - t2555 * t2874;
t2385 = t2496 * t3168 - t2554 * t2872;
t2384 = t2495 * t3168 - t2553 * t2872;
t2383 = t2494 * t3173 - t2552 * t2864;
t2382 = t2493 * t3173 - t2551 * t2864;
t2381 = t2492 * t3175 - t2550 * t2862;
t2380 = t2491 * t3175 - t2549 * t2862;
t2379 = t2490 * t3177 - t2548 * t2860;
t2378 = t2489 * t3177 - t2547 * t2860;
t2377 = (-t2652 * t2810 + t3308 - (-0.2e1 * t2789 + 0.1e1) * t3160) * t2790 - t2539 * t3207 + t2879 * t2680;
t2376 = (-t2613 * t3206 + (-t2789 * t3381 - t3213 * t3337 + t3042) * t2809) * t2811 - (t3219 + t3222) * t3208 + (-0.2e1 * t2790 + 0.1e1) * t3188;
t2375 = t3215 * t3309 + ((-t2696 - 0.2e1 * t3187) * t2789 + t2629 * t3213 - t3349 * t3208 + t3187) * t2811 + (-t2779 * t3206 - t2780 * t2809) * t2810 - t2807 * (-t2779 * t2809 + t2780 * t3206);
t2368 = t2771 - t2930 - t3391;
t2358 = (-0.2e1 * t3367 - 0.2e1 * t2718 - (-0.4e1 * t2789 + 0.2e1) * t3209) * t2791 - t3382 * t3196 + t2538;
t2346 = t2455 * t2808 + t2661 * t2681 + (-t2603 * t2879 - t3368) * t2811;
t2345 = -t2457 * t2808 - t2661 * t2682 + (t2879 * t3365 - t3369) * t2811;
t2344 = t2453 * t2808 + t2660 * t2681 + (-t2600 * t2879 - t3370) * t2811;
t2343 = -t2456 * t2808 - t2660 * t2682 + (t2879 * t3364 - t3371) * t2811;
t2342 = t2451 * t2808 + t2659 * t2681 + (-t2585 * t2879 - t3372) * t2811;
t2341 = -t2437 * t2808 - t2659 * t2682 + (t2879 * t3363 - t3373) * t2811;
t2340 = t2449 * t2808 + t2658 * t2681 + (-t2584 * t2879 - t3374) * t2811;
t2339 = -t2436 * t2808 - t2658 * t2682 + (t2879 * t3362 - t3375) * t2811;
t2338 = t2447 * t2808 + t2657 * t2681 + (-t2583 * t2879 - t3376) * t2811;
t2337 = -t2435 * t2808 - t2657 * t2682 + (t2879 * t3361 - t3377) * t2811;
t2336 = t2445 * t2808 + t2656 * t2681 + (-t2582 * t2879 - t3378) * t2811;
t2335 = -t2434 * t2808 - t2656 * t2682 + (t2879 * t3360 - t3379) * t2811;
t2322 = -t3225 + (t3048 - (t3306 - 0.2e1) * t3217) * t2810 + t2772 + t3225 * t2790 + t3350 + t3391;
t2308 = t2518 * t2641 + t2524 * t3110 - t2603 * t3035;
t2307 = t2517 * t2640 + t2523 * t3111 - t2600 * t3036;
t2306 = t2516 * t2639 + t2522 * t3112 - t2585 * t3037;
t2305 = (-t2455 - t3248) * t2812 + (t2457 - t3246) * t2809;
t2304 = (-t2453 - t3249) * t2812 + (t2456 - t3247) * t2809;
t2303 = (-t2451 - t3250) * t2812 + (t2437 - t3254) * t2809;
t2302 = (-t2449 - t3251) * t2812 + (t2436 - t3255) * t2809;
t2301 = (-t2447 - t3252) * t2812 + (t2435 - t3256) * t2809;
t2300 = (-t2445 - t3253) * t2812 + (t2434 - t3257) * t2809;
t2299 = t2515 * t2638 + t2521 * t3113 - t2584 * t3038;
t2298 = t2514 * t2637 + t2520 * t3114 - t2583 * t3039;
t2297 = t2513 * t2636 + t2519 * t3115 - t2582 * t3040;
t2296 = -t2790 * t3359 + (t2630 * t3216 + (t2652 * t3206 - t2664 * t2809) * t2810 - 0.2e1 * t2662 * t3206 - t2655 * t2809) * t2811 + t2879 * (t2629 * t2789 - (-t2812 * t3381 - t2696) * t3213 + t2772 * t2812 - t3069);
t2295 = t2539 * t3215 + (t2629 * t3216 + (-t2652 * t3208 - t2664 * t2812) * t2810 + 0.2e1 * t2662 * t3208 - t2655 * t2812) * t2811 - t2879 * (t2630 * t2789 + (t2809 * t3381 - t3206 * t3337) * t3213 + t2772 * t2809 + t3068);
t2294 = -t2413 * t3075 + t2716 * t2944;
t2293 = t2413 * t3076 + t2717 * t2944;
t2292 = -t2412 * t3075 + t2716 * t2945;
t2291 = t2412 * t3076 + t2717 * t2945;
t2290 = -t2411 * t3077 + t2714 * t2946;
t2289 = t2411 * t3078 + t2715 * t2946;
t2288 = -t2410 * t3077 + t2714 * t2947;
t2287 = t2410 * t3078 + t2715 * t2947;
t2286 = -t2409 * t3079 + t2712 * t2948;
t2285 = t2409 * t3080 + t2713 * t2948;
t2284 = -t2408 * t3079 + t2712 * t2949;
t2283 = t2408 * t3080 + t2713 * t2949;
t2261 = -t2407 * t3081 + t2710 * t2950;
t2260 = t2407 * t3082 + t2711 * t2950;
t2259 = -t2406 * t3081 + t2710 * t2951;
t2258 = t2406 * t3082 + t2711 * t2951;
t2257 = -t2405 * t3083 + t2708 * t2952;
t2256 = t2405 * t3084 + t2709 * t2952;
t2255 = -t2404 * t3083 + t2708 * t2953;
t2254 = t2404 * t3084 + t2709 * t2953;
t2253 = -t2403 * t3085 + t2706 * t2954;
t2252 = t2403 * t3086 + t2707 * t2954;
t2251 = -t2402 * t3085 + t2706 * t2955;
t2250 = t2402 * t3086 + t2707 * t2955;
t2246 = t2463 * t2641 + t2469 * t3110 - t2546 * t3029;
t2245 = t2462 * t2640 + t2468 * t3111 - t2545 * t3030;
t2244 = t2461 * t2639 + t2467 * t3112 - t2544 * t3031;
t2240 = -t3365 * t2681 + t2603 * t2682 + (t2455 * t2809 + t2457 * t2812) * t2811;
t2239 = -t3364 * t2681 + t2600 * t2682 + (t2453 * t2809 + t2456 * t2812) * t2811;
t2238 = t2585 * t2682 - t3363 * t2681 + (t2437 * t2812 + t2451 * t2809) * t2811;
t2237 = t2584 * t2682 - t3362 * t2681 + (t2436 * t2812 + t2449 * t2809) * t2811;
t2236 = t2583 * t2682 - t3361 * t2681 + (t2435 * t2812 + t2447 * t2809) * t2811;
t2235 = t2582 * t2682 - t3360 * t2681 + (t2434 * t2812 + t2445 * t2809) * t2811;
t2231 = t2460 * t2638 + t2466 * t3113 - t2542 * t3032;
t2230 = t2459 * t2637 + t2465 * t3114 - t2541 * t3033;
t2229 = t2458 * t2636 + t2464 * t3115 - t2540 * t3034;
t2228 = (t2809 * t3109 - t3359) * t2790 + (t2809 * t2537 - t2812 * t3329) * t2811 - t2543 * t2812 - t2809 * t2680 * t2764;
t2227 = (t2539 * t2809 + t2812 * t3109) * t2790 + (t2812 * t2537 + t2809 * t3329) * t2811 + t2543 * t2809 - t2764 * t3188;
t2220 = t2480 * t2641 + t2481 * t2546 + t2488 * t3110;
t2219 = t2478 * t2640 + t2479 * t2545 + t2487 * t3111;
t2218 = t2476 * t2639 + t2477 * t2544 + t2486 * t3112;
t2217 = t2474 * t2638 + t2475 * t2542 + t2484 * t3113;
t2216 = t2472 * t2637 + t2473 * t2541 + t2483 * t3114;
t2215 = t2470 * t2636 + t2471 * t2540 + t2482 * t3115;
t2214 = t2328 * t3164 - t2367 * t2876;
t2213 = t2327 * t3166 - t2366 * t2874;
t2212 = t2326 * t3168 - t2365 * t2872;
t2211 = t2325 * t3173 - t2364 * t2864;
t2210 = t2324 * t3175 - t2363 * t2862;
t2209 = t2323 * t3177 - t2362 * t2860;
t2196 = t2314 * t3164 - t2334 * t2876;
t2195 = t2313 * t3166 - t2333 * t2874;
t2194 = t2312 * t3168 - t2332 * t2872;
t2193 = t2311 * t3173 - t2331 * t2864;
t2192 = t2310 * t3175 - t2330 * t2862;
t2191 = t2309 * t3177 - t2329 * t2860;
t2190 = (t3383 * t2810 + t3351) * t2791 + t3067 + ((-t2810 * t3338 - t3346) * t2791 + t3155 * t2810 + t3061) * t2811 + (-t3224 * t2810 + t3042 - t3107) * t3348;
t2189 = t2276 * t3164 - t2320 * t2876;
t2188 = t2275 * t3166 - t2319 * t2874;
t2187 = t2274 * t3168 - t2318 * t2872;
t2186 = t2249 * t3173 - t2317 * t2864;
t2185 = t2248 * t3175 - t2316 * t2862;
t2184 = t2247 * t3177 - t2315 * t2860;
t2183 = t3045 * t3225 + t2759 * t2810 * t3108 + t3063 + t2772 * t2764 + (-t2810 * t3045 * t3381 - 0.2e1 * t2759 * t3221) * t2807 + t3141;
t2182 = (-t2764 * t3337 - 0.2e1 * t3064) * t2789 + (-t2664 * t2808 + (-t3074 + 0.2e1 * t3154) * t2807) * t2810 + t3064 - t2655 * t2808 - t2880 * t2771 + t3141;
t2181 = ((t2811 * t3338 - t3383) * t2810 + t3346 * t2811 - t3351) * t2791 - t3067 + (-t3016 - (-t3348 + t3159) * t3381) * t2789 + ((-t2632 - t3155) * t2811 + t2975 + t3047) * t2810 + (-t2627 - t3061) * t2811 - t2974 + t3366;
t2180 = -t2308 * t3075 + t2716 * t2956;
t2179 = t2308 * t3076 + t2717 * t2956;
t2178 = -t2307 * t3077 + t2714 * t2957;
t2177 = t2307 * t3078 + t2715 * t2957;
t2176 = -t2306 * t3079 + t2712 * t2958;
t2175 = t2306 * t3080 + t2713 * t2958;
t2174 = -t2299 * t3081 + t2710 * t2959;
t2173 = t2299 * t3082 + t2711 * t2959;
t2172 = -t2298 * t3083 + t2708 * t2960;
t2171 = t2298 * t3084 + t2709 * t2960;
t2170 = -t2297 * t3085 + t2706 * t2961;
t2169 = t2297 * t3086 + t2707 * t2961;
t2168 = -t2246 * t3075 + t2716 * t2962;
t2167 = t2246 * t3076 + t2717 * t2962;
t2166 = -t2245 * t3077 + t2714 * t2963;
t2165 = t2245 * t3078 + t2715 * t2963;
t2164 = -t2244 * t3079 + t2712 * t2964;
t2163 = t2244 * t3080 + t2713 * t2964;
t2162 = -t2231 * t3081 + t2710 * t2965;
t2161 = t2231 * t3082 + t2711 * t2965;
t2160 = -t2230 * t3083 + t2708 * t2966;
t2159 = t2230 * t3084 + t2709 * t2966;
t2158 = -t2229 * t3085 + t2706 * t2967;
t2157 = t2229 * t3086 + t2707 * t2967;
t2156 = -t2220 * t3075 + t2716 * t2968;
t2155 = t2220 * t3076 + t2717 * t2968;
t2154 = -t2219 * t3077 + t2714 * t2969;
t2153 = t2219 * t3078 + t2715 * t2969;
t2152 = -t2218 * t3079 + t2712 * t2970;
t2151 = t2218 * t3080 + t2713 * t2970;
t2150 = t2270 * t2844 + (rSges(3,1) * t3165 - t2838 * t2844 + t2844) * t2357;
t2149 = t2269 * t2843 + (rSges(3,1) * t3167 - t2837 * t2843 + t2843) * t2356;
t2148 = t2268 * t2842 + (rSges(3,1) * t3169 - t2836 * t2842 + t2842) * t2355;
t2147 = -t2217 * t3081 + t2710 * t2971;
t2146 = t2217 * t3082 + t2711 * t2971;
t2145 = -t2216 * t3083 + t2708 * t2972;
t2144 = t2216 * t3084 + t2709 * t2972;
t2143 = -t2215 * t3085 + t2706 * t2973;
t2142 = t2215 * t3086 + t2707 * t2973;
t2141 = t2264 * t2841 + (rSges(3,1) * t3174 - t2829 * t2841 + t2841) * t2351;
t2140 = t2263 * t2840 + (rSges(3,1) * t3176 - t2828 * t2840 + t2840) * t2350;
t2139 = t2262 * t2839 + (rSges(3,1) * t3178 - t2827 * t2839 + t2839) * t2349;
t2108 = (rSges(3,1) * t2126 - t2120 * t3273 - t2132) * m(3);
t2107 = (rSges(3,1) * t2125 - t2119 * t3274 - t2131) * m(3);
t2106 = (rSges(3,1) * t2124 - t2118 * t3275 - t2130) * m(3);
t2105 = (rSges(3,1) * t2123 - t2117 * t3276 - t2129) * m(3);
t2104 = (rSges(3,1) * t2122 - t2116 * t3277 - t2128) * m(3);
t2103 = (rSges(3,1) * t2121 - t2115 * t3278 - t2127) * m(3);
t1 = [t2103 * t3244 + t2104 * t3242 + t2105 * t3240 + t2106 * t3238 + t2107 * t3236 + t2108 * t3234 + (t2716 * t3049 - t3003) * t2901 + (t2714 * t3050 - t3004) * t2899 + (t2712 * t3051 - t3005) * t2897 + (t2710 * t3052 - t3006) * t2895 + (t2708 * t3053 - t3007) * t2893 + (t2706 * t3054 - t3008) * t2891 + (t2252 * t2445 + t2256 * t2447 + t2260 * t2449 + t2285 * t2451 + t2289 * t2453 + t2293 * t2455 - t2379 * t2434 - t2381 * t2435 - t2383 * t2436 - t2385 * t2437 - t2387 * t2456 - t2389 * t2457) * t2880 + (t2293 * t2535 + t2294 * t2305 + t2389 * t2536 + t2260 * t2529 + t2261 * t2302 + t2383 * t2530 + t2285 * t2531 + t2286 * t2303 + t2385 * t2532 + t2289 * t2533 + t2290 * t2304 + t2387 * t2534 + t2252 * t2525 + t2253 * t2300 + t2379 * t2526 + t2256 * t2527 + t2257 * t2301 + t2381 * t2528) * t2879 + (t2294 * t2240 + t2293 * t2346 + t2389 * t2345 + t2286 * t2238 + t2285 * t2342 + t2385 * t2341 + t2290 * t2239 + t2289 * t2344 + t2387 * t2343 + t2253 * t2235 + t2252 * t2336 + t2379 * t2335 + t2257 * t2236 + t2256 * t2338 + t2381 * t2337 + t2261 * t2237 + t2260 * t2340 + t2383 * t2339) * t2878 + (-t2139 * t3244 - t2140 * t3242 - t2141 * t3240 - t2148 * t3238 - t2149 * t3236 - t2150 * t3234) * m(3) + ((t2432 * t2812 - t2433 * t2809 + t2559 * t3185 - t2561 * t3194) * t2879 + (-t2432 * t3197 - t2433 * t3192 + t2559 * t2681 + t2561 * t2682) * t2878) * m(4); t2103 * t3243 + t2104 * t3241 + t2105 * t3239 + t2106 * t3237 + t2107 * t3235 + t2108 * t3233 + (t2716 * t3352 + t2717 * t3049) * t2901 + (t2714 * t3353 + t2715 * t3050) * t2899 + (t2712 * t3354 + t2713 * t3051) * t2897 + (t2710 * t3355 + t2711 * t3052) * t2895 + (t2708 * t3356 + t2709 * t3053) * t2893 + (t2706 * t3357 + t2707 * t3054) * t2891 + (t2250 * t2445 + t2254 * t2447 + t2258 * t2449 + t2283 * t2451 + t2287 * t2453 + t2291 * t2455 - t2378 * t2434 - t2380 * t2435 - t2382 * t2436 - t2384 * t2437 - t2386 * t2456 - t2388 * t2457) * t2880 + (t2291 * t2535 + t2292 * t2305 + t2388 * t2536 + t2258 * t2529 + t2259 * t2302 + t2382 * t2530 + t2283 * t2531 + t2284 * t2303 + t2384 * t2532 + t2287 * t2533 + t2288 * t2304 + t2386 * t2534 + t2250 * t2525 + t2251 * t2300 + t2378 * t2526 + t2254 * t2527 + t2255 * t2301 + t2380 * t2528) * t2879 + (t2238 * t2284 + t2283 * t2342 + t2341 * t2384 + t2239 * t2288 + t2287 * t2344 + t2343 * t2386 + t2240 * t2292 + t2291 * t2346 + t2345 * t2388 + t2235 * t2251 + t2250 * t2336 + t2335 * t2378 + t2236 * t2255 + t2254 * t2338 + t2337 * t2380 + t2237 * t2259 + t2258 * t2340 + t2339 * t2382) * t2878 + (-t2139 * t3243 - t2140 * t3241 - t2141 * t3239 - t2148 * t3237 - t2149 * t3235 - t2150 * t3233) * m(3) + ((-t2666 * t3185 - t3258) * t2879 + (-t2432 * t2808 - t2561 * t3190 - t2565 * t3192 - t2666 * t2681) * t2878 - t2432 * t2880) * m(4); -t2860 * t2103 - t2862 * t2104 - t2864 * t2105 - t2872 * t2106 - t2874 * t2107 - t2876 * t2108 + t2139 * t3287 + t2140 * t3286 + t2141 * t3285 + t2148 * t3284 + t2149 * t3283 + t2150 * t3282 + t3147 * t3177 + t3146 * t3175 + t3145 * t3173 + t3144 * t3168 + t3143 * t3166 + t3142 * t3164 + (m(4) * t2433 + t2414 * t2445 + t2416 * t2447 + t2418 * t2449 + t2420 * t2451 + t2422 * t2453 + t2424 * t2455 - t2434 * t2562 - t2435 * t2563 - t2436 * t2564 - t2437 * t2579 - t2456 * t2580 - t2457 * t2581) * t2880 + (t2303 * t2421 + t2420 * t2531 + t2532 * t2579 + t2304 * t2423 + t2422 * t2533 + t2534 * t2580 + t2305 * t2425 + t2424 * t2535 + t2536 * t2581 + t2301 * t2417 + t2416 * t2527 + t2528 * t2563 + t2302 * t2419 + t2418 * t2529 + t2530 * t2564 + t2300 * t2415 + t2414 * t2525 + t2526 * t2562 + (t2565 * t2812 - t2666 * t3194) * m(4)) * t2879 + (t2238 * t2421 + t2341 * t2579 + t2342 * t2420 + t2239 * t2423 + t2343 * t2580 + t2344 * t2422 + t2240 * t2425 + t2345 * t2581 + t2346 * t2424 + t2235 * t2415 + t2335 * t2562 + t2336 * t2414 + t2236 * t2417 + t2337 * t2563 + t2338 * t2416 + t2237 * t2419 + t2339 * t2564 + t2340 * t2418 + (t2433 * t2808 + t2666 * t2682 + (-t2559 * t2879 - t3258) * t2811) * m(4)) * t2878; ((t2376 * t2880 + t2295) * t2812 + (-t2375 * t2880 + t2296) * t2809 + t2167 * t2535 + t2168 * t2305 + t2196 * t2536 + t2161 * t2529 + t2162 * t2302 + t2193 * t2530 + t2163 * t2531 + t2164 * t2303 + t2194 * t2532 + t2165 * t2533 + t2166 * t2304 + t2195 * t2534 + t2157 * t2525 + t2158 * t2300 + t2191 * t2526 + t2159 * t2527 + t2160 * t2301 + t2192 * t2528) * t2879 + t2468 * t2107 + t2469 * t2108 + t2464 * t2103 + t2465 * t2104 + t2466 * t2105 + t2467 * t2106 + (t2157 * t2445 + t2159 * t2447 + t2161 * t2449 + t2163 * t2451 + t2165 * t2453 + t2167 * t2455 - t2191 * t2434 - t2192 * t2435 - t2193 * t2436 - t2194 * t2437 - t2195 * t2456 - t2196 * t2457 + t2377) * t2880 + t3142 * t2463 + t3143 * t2462 + t3144 * t2461 + t3145 * t2460 + t3146 * t2459 + t3147 * t2458 - t3148 * t3029 - t3149 * t3030 - t3150 * t3031 - t3151 * t3032 - t3152 * t3033 - t3153 * t3034 - t2139 * t3299 - t2148 * t3296 - t2149 * t3295 - t2150 * t3294 - t2140 * t3298 - t2141 * t3297 + (t2167 * t2346 + t2168 * t2240 + t2196 * t2345 + t2161 * t2340 + t2162 * t2237 + t2193 * t2339 + t2163 * t2342 + t2164 * t2238 + t2194 * t2341 + t2165 * t2344 + t2166 * t2239 + t2195 * t2343 + t2157 * t2336 + t2158 * t2235 + t2191 * t2335 + t2159 * t2338 + t2160 * t2236 + t2192 * t2337 + t2375 * t2682 + t2376 * t2681 + t2377 * t2808 + (-t2295 * t2809 + t2296 * t2812 + (t2613 * t2790 + t2680 * t3390 + t3279) * t2879) * t2811) * t2878; t2519 * t2103 + t2520 * t2104 + t2521 * t2105 + t2522 * t2106 + t2523 * t2107 + t2524 * t2108 - t2901 * t2603 * t3003 - t2899 * t2600 * t3004 - t2897 * t2585 * t3005 - t2895 * t2584 * t3006 - t2893 * t2583 * t3007 - t2891 * t2582 * t3008 + t3142 * t2518 + t3143 * t2517 + t3144 * t2516 + t3145 * t2515 + t3146 * t2514 + t3147 * t2513 + (-t2139 * t2519 - t2140 * t2520 - t2141 * t2521 - t2148 * t2522 - t2149 * t2523 - t2150 * t2524) * m(3) + (t2179 * t2535 + t2180 * t2305 + t2214 * t2536 + t2173 * t2529 + t2174 * t2302 + t2211 * t2530 + t2175 * t2531 + t2176 * t2303 + t2212 * t2532 + t2177 * t2533 + t2178 * t2304 + t2213 * t2534 + t2169 * t2525 + t2170 * t2300 + t2209 * t2526 + t2171 * t2527 + t2172 * t2301 + t2210 * t2528 + t2181 * t2812 + t2182 * t2809) * t2879 + (t2227 * t2808 + t2322 * t2682 + t2358 * t2681 + t2179 * t2346 + t2180 * t2240 + t2214 * t2345 + t2173 * t2340 + t2174 * t2237 + t2211 * t2339 + t2175 * t2342 + t2176 * t2238 + t2212 * t2341 + t2177 * t2344 + t2178 * t2239 + t2213 * t2343 + t2169 * t2336 + t2170 * t2235 + t2209 * t2335 + t2171 * t2338 + t2172 * t2236 + t2210 * t2337 + (-t2181 * t2809 + t2182 * t2812 + t2375 * t2879) * t2811) * t2878 + ((-t2322 * t2809 + t2358 * t2812) * t2879 + t2175 * t2451 - t2212 * t2437 + t2177 * t2453 - t2213 * t2456 + t2179 * t2455 - t2214 * t2457 + t2171 * t2447 - t2210 * t2435 + t2173 * t2449 - t2211 * t2436 + t2169 * t2445 - t2209 * t2434 + t2227) * t2880; t2482 * t2103 + t2483 * t2104 + t2484 * t2105 + t2486 * t2106 + t2487 * t2107 + t2488 * t2108 + t3148 * t2481 + t3142 * t2480 + t3149 * t2479 + t3143 * t2478 + t3150 * t2477 + t3144 * t2476 + t3151 * t2475 + t3145 * t2474 + t3152 * t2473 + t3146 * t2472 + t3153 * t2471 + t3147 * t2470 + (-t2139 * t2482 - t2140 * t2483 - t2141 * t2484 - t2148 * t2486 - t2149 * t2487 - t2150 * t2488) * m(3) + (t2155 * t2535 + t2156 * t2305 + t2189 * t2536 + t2146 * t2529 + t2147 * t2302 + t2186 * t2530 + t2151 * t2531 + t2152 * t2303 + t2187 * t2532 + t2153 * t2533 + t2154 * t2304 + t2188 * t2534 + t2142 * t2525 + t2143 * t2300 + t2184 * t2526 + t2144 * t2527 + t2145 * t2301 + t2185 * t2528 + t2183 * t2812 + t2190 * t2809) * t2879 + (t2228 * t2808 + t2358 * t2682 + t2368 * t2681 + t2155 * t2346 + t2156 * t2240 + t2189 * t2345 + t2146 * t2340 + t2147 * t2237 + t2186 * t2339 + t2151 * t2342 + t2152 * t2238 + t2187 * t2341 + t2153 * t2344 + t2154 * t2239 + t2188 * t2343 + t2142 * t2336 + t2143 * t2235 + t2184 * t2335 + t2144 * t2338 + t2145 * t2236 + t2185 * t2337 + (-t2183 * t2809 + t2190 * t2812 + t2376 * t2879) * t2811) * t2878 + ((-t2358 * t2809 + t2368 * t2812) * t2879 + t2151 * t2451 - t2187 * t2437 + t2153 * t2453 - t2188 * t2456 + t2155 * t2455 - t2189 * t2457 + t2144 * t2447 - t2185 * t2435 + t2146 * t2449 - t2186 * t2436 + t2142 * t2445 - t2184 * t2434 + t2228) * t2880;];
taucX  = t1;
