% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P6RRPRRR14V3G1P4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x24]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-12 23:28
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6RRPRRR14V3G1P4A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(1,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V3G1P4A0_coriolisvec_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6RRPRRR14V3G1P4A0_coriolisvec_para_pf_regmin: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V3G1P4A0_coriolisvec_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'P6RRPRRR14V3G1P4A0_coriolisvec_para_pf_regmin: pkin has to be [1x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V3G1P4A0_coriolisvec_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V3G1P4A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 1
% StartTime: 2020-03-12 23:27:49
% EndTime: 2020-03-12 23:28:05
% DurationCPUTime: 16.78s
% Computational Cost: add. (298275->2139), mult. (714694->4110), div. (7308->36), fcn. (526391->42), ass. (0->1424)
unknown=NaN(6,24);
t1 = sin(legFrame(1,3));
t2 = cos(qJ(1,1));
t4 = sin(qJ(1,1));
t5 = cos(legFrame(1,3));
t7 = -t2 * t1 - t5 * t4;
t8 = sin(qJ(2,1));
t9 = 0.1e1 / t8;
t10 = t9 * t7;
t11 = 0.1e1 / qJ(3,1);
t12 = sin(xP(6));
t13 = koppelP(1,2) * t12;
t14 = cos(xP(6));
t16 = -t14 * koppelP(1,1) + t13;
t17 = sin(xP(5));
t19 = cos(xP(5));
t20 = koppelP(1,3) * t19;
t21 = t17 * t16 + t20;
t22 = cos(xP(4));
t23 = t22 * t21;
t24 = sin(xP(4));
t25 = koppelP(1,1) * t12;
t27 = koppelP(1,2) * t14 + t25;
t28 = t27 * t24;
t29 = t23 + t28;
t30 = xDP(4) * t29;
t32 = t24 * t21;
t33 = t27 * t22;
t34 = t32 - t33;
t39 = t22 * xDP(4);
t41 = xDP(5) * t24;
t43 = t17 * t41 - t19 * t39;
t47 = xDP(5) * t22;
t49 = -t19 * t24 * xDP(4) - t17 * t47;
t54 = t27 * t17;
t57 = -t16 * t24 + t22 * t54;
t59 = koppelP(1,3) * t17;
t61 = t16 * t19 - t59;
t62 = t61 * t47;
t63 = -xDP(4) * t34 + xDP(6) * t57 + t62;
t67 = t16 * t22 + t24 * t54;
t69 = t61 * t41;
t70 = xDP(6) * t67 + t30 + t69;
t80 = xDP(5) * (t22 * xDP(4) * t34 - t24 * t30) + xDP(6) * (t43 * t29 + t49 * t34) + xDP(5) * (t22 * t63 + t24 * t70) + xDP(6) * (t19 * t22 * t70 - t19 * t24 * t63);
t81 = t80 * t11;
t85 = -t4 * t1 + t5 * t2;
t86 = t9 * t85;
t87 = t14 * t19;
t89 = t12 * t19;
t91 = koppelP(1,1) * t87 - koppelP(1,2) * t89 + t59;
t95 = -t17 * t16 - t20;
t107 = xDP(4) * (-t27 * t22 + t32) - xDP(6) * t57 - t62;
t110 = t19 * xDP(6);
t111 = t27 * t110;
t112 = -xDP(5) * t95 - t111;
t120 = t47 * xDP(4) * t91 + xDP(6) * (t19 * xDP(5) * (t22 * t95 - t28) + t49 * t91) + xDP(4) * t107 + xDP(5) * t24 * t112 + xDP(6) * (t19 * t22 * t112 + t17 * t107);
t123 = t19 * xDP(5);
t125 = koppelP(1,2) * xDP(6);
t128 = -koppelP(1,1) * t123 + t17 * t125 + xDP(4) * koppelP(1,2);
t134 = t22 * t4 * xDP(4) - t2 * xDP(5);
t137 = t19 * t2;
t139 = t22 * t4;
t145 = t12 * xDP(6);
t148 = koppelP(1,1) * t145 - xDP(5) * koppelP(1,3);
t152 = koppelP(1,2) * t123 + xDP(4) * koppelP(1,1);
t153 = t152 * t12;
t154 = t17 * t148 + t153;
t164 = koppelP(1,3) * t123;
t165 = t164 + xDP(1);
t167 = t20 * t39;
t168 = -t167 + xDP(2);
t171 = t5 * (t14 * (-t24 * t128 * t4 + t17 * t134 * koppelP(1,1) - (koppelP(1,2) * t137 - koppelP(1,1) * t139) * xDP(6)) - t24 * t154 * t4 - t17 * t134 * t13 - t12 * (koppelP(1,1) * t137 + koppelP(1,2) * t139) * xDP(6) + t2 * t165 + t168 * t4);
t177 = t22 * t2 * xDP(4) + t4 * xDP(5);
t180 = t22 * t2;
t182 = t19 * t4;
t186 = t24 * t128 * t2 - t17 * t177 * koppelP(1,1) - (koppelP(1,1) * t180 + koppelP(1,2) * t182) * xDP(6);
t189 = t24 * t154 * t2;
t191 = t17 * t177 * t13;
t196 = t12 * (koppelP(1,2) * t180 - koppelP(1,1) * t182) * xDP(6);
t198 = t165 * t4;
t202 = cos(qJ(2,1));
t203 = t202 * (t171 - (t14 * t186 - t2 * t168 + t189 + t191 + t196 + t198) * t1);
t204 = xDP(4) * t17;
t205 = t204 + xDP(6);
t212 = t19 * xDP(4);
t221 = t14 * (t24 * t205 * koppelP(1,1) + t128 * t22) + t24 * (-t12 * t125 - t13 * t204 - koppelP(1,3) * t212) + t17 * t148 * t22 + t12 * t152 * t22 + xDP(3);
t222 = t221 * t8;
t223 = t203 + t222;
t224 = t202 * t223;
t232 = t8 * (t171 + t1 * (-t14 * t186 + t2 * t168 - t189 - t191 - t196 - t198)) - t202 * t221;
t233 = t232 * t8;
t234 = t224 + t233;
t235 = t8 ^ 2;
t236 = 0.1e1 / t235;
t238 = qJ(3,1) ^ 2;
t239 = 0.1e1 / t238;
t241 = koppelP(1,1) * t22;
t248 = t12 * t17;
t249 = koppelP(1,2) * t248;
t251 = t22 * xDP(6);
t253 = t14 * (-t24 * t128 + t205 * t241) + t24 * (-t17 * t148 - t153) - t249 * t39 - t167 - t13 * t251 + xDP(2);
t255 = t17 * xDP(5);
t262 = t14 * (-koppelP(1,2) * t110 - koppelP(1,1) * t255) + t13 * t255 - t25 * t110 + t164 + xDP(1);
t270 = t5 * (t2 * t253 - t4 * t262) - (t2 * t262 + t4 * t253) * t1;
t271 = t270 * t239;
t274 = t239 * t236;
t277 = t9 * t270;
t278 = t232 * t239;
t280 = -t223 * t274 * t270 * t202 + t120 * t11 * t86 - t271 * t236 * t234 + t81 * t10 - t278 * t277;
t281 = t280 * t11;
t283 = sin(legFrame(2,3));
t284 = cos(qJ(1,2));
t286 = sin(qJ(1,2));
t287 = cos(legFrame(2,3));
t289 = -t284 * t283 - t287 * t286;
t290 = sin(qJ(2,2));
t291 = 0.1e1 / t290;
t292 = t291 * t289;
t293 = 0.1e1 / qJ(3,2);
t294 = koppelP(2,2) * t12;
t296 = -t14 * koppelP(2,1) + t294;
t298 = koppelP(2,3) * t19;
t299 = t17 * t296 + t298;
t300 = t22 * t299;
t301 = koppelP(2,1) * t12;
t303 = koppelP(2,2) * t14 + t301;
t304 = t303 * t24;
t305 = t300 + t304;
t306 = xDP(4) * t305;
t308 = t24 * t299;
t309 = t303 * t22;
t310 = t308 - t309;
t320 = t303 * t17;
t323 = t22 * t320 - t296 * t24;
t325 = koppelP(2,3) * t17;
t327 = t296 * t19 - t325;
t328 = t327 * t47;
t329 = -xDP(4) * t310 + xDP(6) * t323 + t328;
t333 = t296 * t22 + t24 * t320;
t335 = t327 * t41;
t336 = xDP(6) * t333 + t306 + t335;
t346 = xDP(5) * (t22 * xDP(4) * t310 - t24 * t306) + xDP(6) * (t43 * t305 + t49 * t310) + xDP(5) * (t22 * t329 + t24 * t336) + xDP(6) * (t19 * t22 * t336 - t19 * t24 * t329);
t347 = t346 * t293;
t351 = -t286 * t283 + t287 * t284;
t352 = t291 * t351;
t355 = koppelP(2,1) * t87 - koppelP(2,2) * t89 + t325;
t359 = -t17 * t296 - t298;
t371 = xDP(4) * (-t303 * t22 + t308) - xDP(6) * t323 - t328;
t374 = t303 * t110;
t375 = -xDP(5) * t359 - t374;
t383 = t47 * xDP(4) * t355 + xDP(6) * (t19 * xDP(5) * (t22 * t359 - t304) + t49 * t355) + xDP(4) * t371 + xDP(5) * t24 * t375 + xDP(6) * (t19 * t22 * t375 + t17 * t371);
t387 = koppelP(2,2) * xDP(6);
t390 = -koppelP(2,1) * t123 + t17 * t387 + xDP(4) * koppelP(2,2);
t396 = t22 * t286 * xDP(4) - t284 * xDP(5);
t399 = t19 * t284;
t401 = t22 * t286;
t409 = koppelP(2,1) * t145 - xDP(5) * koppelP(2,3);
t413 = koppelP(2,2) * t123 + xDP(4) * koppelP(2,1);
t414 = t413 * t12;
t415 = t17 * t409 + t414;
t425 = koppelP(2,3) * t123;
t426 = t425 + xDP(1);
t428 = t298 * t39;
t429 = -t428 + xDP(2);
t432 = t287 * (t14 * (-t24 * t390 * t286 + t17 * t396 * koppelP(2,1) - (koppelP(2,2) * t399 - koppelP(2,1) * t401) * xDP(6)) - t24 * t415 * t286 - t17 * t396 * t294 - t12 * (koppelP(2,1) * t399 + koppelP(2,2) * t401) * xDP(6) + t284 * t426 + t429 * t286);
t438 = t22 * t284 * xDP(4) + t286 * xDP(5);
t441 = t22 * t284;
t443 = t19 * t286;
t447 = t24 * t390 * t284 - t17 * t438 * koppelP(2,1) - (koppelP(2,1) * t441 + koppelP(2,2) * t443) * xDP(6);
t450 = t24 * t415 * t284;
t452 = t17 * t438 * t294;
t457 = t12 * (koppelP(2,2) * t441 - koppelP(2,1) * t443) * xDP(6);
t459 = t426 * t286;
t463 = cos(qJ(2,2));
t464 = t463 * (t432 - (t14 * t447 - t284 * t429 + t450 + t452 + t457 + t459) * t283);
t479 = t14 * (t24 * t205 * koppelP(2,1) + t390 * t22) + t24 * (-t12 * t387 - t294 * t204 - koppelP(2,3) * t212) + t17 * t409 * t22 + t12 * t413 * t22 + xDP(3);
t480 = t479 * t290;
t481 = t464 + t480;
t482 = t463 * t481;
t490 = t290 * (t432 + t283 * (-t14 * t447 + t284 * t429 - t450 - t452 - t457 - t459)) - t463 * t479;
t491 = t490 * t290;
t492 = t482 + t491;
t493 = t290 ^ 2;
t494 = 0.1e1 / t493;
t496 = qJ(3,2) ^ 2;
t497 = 0.1e1 / t496;
t499 = koppelP(2,1) * t22;
t506 = koppelP(2,2) * t248;
t509 = t14 * (t205 * t499 - t24 * t390) + t24 * (-t17 * t409 - t414) - t506 * t39 - t428 - t294 * t251 + xDP(2);
t517 = t14 * (-koppelP(2,2) * t110 - koppelP(2,1) * t255) + t294 * t255 - t301 * t110 + t425 + xDP(1);
t525 = t287 * (t284 * t509 - t286 * t517) - (t284 * t517 + t286 * t509) * t283;
t526 = t525 * t497;
t529 = t497 * t494;
t532 = t291 * t525;
t533 = t490 * t497;
t535 = -t481 * t529 * t525 * t463 + t383 * t293 * t352 - t526 * t494 * t492 + t347 * t292 - t533 * t532;
t536 = t535 * t293;
t538 = sin(legFrame(3,3));
t539 = cos(qJ(1,3));
t541 = sin(qJ(1,3));
t542 = cos(legFrame(3,3));
t544 = -t539 * t538 - t542 * t541;
t545 = sin(qJ(2,3));
t546 = 0.1e1 / t545;
t547 = t546 * t544;
t548 = 0.1e1 / qJ(3,3);
t549 = koppelP(3,2) * t12;
t551 = -t14 * koppelP(3,1) + t549;
t553 = koppelP(3,3) * t19;
t554 = t17 * t551 + t553;
t555 = t22 * t554;
t556 = koppelP(3,1) * t12;
t558 = koppelP(3,2) * t14 + t556;
t559 = t558 * t24;
t560 = t555 + t559;
t561 = xDP(4) * t560;
t563 = t24 * t554;
t564 = t558 * t22;
t565 = t563 - t564;
t575 = t558 * t17;
t578 = t22 * t575 - t551 * t24;
t580 = koppelP(3,3) * t17;
t582 = t551 * t19 - t580;
t583 = t582 * t47;
t584 = -xDP(4) * t565 + xDP(6) * t578 + t583;
t588 = t551 * t22 + t24 * t575;
t590 = t582 * t41;
t591 = xDP(6) * t588 + t561 + t590;
t601 = xDP(5) * (t22 * xDP(4) * t565 - t24 * t561) + xDP(6) * (t43 * t560 + t49 * t565) + xDP(5) * (t22 * t584 + t24 * t591) + xDP(6) * (t19 * t22 * t591 - t19 * t24 * t584);
t602 = t601 * t548;
t606 = -t541 * t538 + t542 * t539;
t607 = t546 * t606;
t610 = koppelP(3,1) * t87 - koppelP(3,2) * t89 + t580;
t614 = -t17 * t551 - t553;
t626 = xDP(4) * (-t558 * t22 + t563) - xDP(6) * t578 - t583;
t629 = t558 * t110;
t630 = -xDP(5) * t614 - t629;
t638 = t47 * xDP(4) * t610 + xDP(6) * (t19 * xDP(5) * (t22 * t614 - t559) + t49 * t610) + xDP(4) * t626 + xDP(5) * t24 * t630 + xDP(6) * (t19 * t22 * t630 + t17 * t626);
t642 = koppelP(3,2) * xDP(6);
t645 = -koppelP(3,1) * t123 + t17 * t642 + xDP(4) * koppelP(3,2);
t651 = t22 * t541 * xDP(4) - t539 * xDP(5);
t654 = t19 * t539;
t656 = t22 * t541;
t664 = koppelP(3,1) * t145 - xDP(5) * koppelP(3,3);
t668 = koppelP(3,2) * t123 + xDP(4) * koppelP(3,1);
t669 = t668 * t12;
t670 = t17 * t664 + t669;
t680 = koppelP(3,3) * t123;
t681 = t680 + xDP(1);
t683 = t553 * t39;
t684 = -t683 + xDP(2);
t687 = t542 * (t14 * (-t24 * t645 * t541 + t17 * t651 * koppelP(3,1) - (koppelP(3,2) * t654 - koppelP(3,1) * t656) * xDP(6)) - t24 * t670 * t541 - t17 * t651 * t549 - t12 * (koppelP(3,1) * t654 + koppelP(3,2) * t656) * xDP(6) + t539 * t681 + t684 * t541);
t693 = t22 * t539 * xDP(4) + t541 * xDP(5);
t696 = t22 * t539;
t698 = t19 * t541;
t702 = t24 * t645 * t539 - t17 * t693 * koppelP(3,1) - (koppelP(3,1) * t696 + koppelP(3,2) * t698) * xDP(6);
t705 = t24 * t670 * t539;
t707 = t17 * t693 * t549;
t712 = t12 * (koppelP(3,2) * t696 - koppelP(3,1) * t698) * xDP(6);
t714 = t681 * t541;
t718 = cos(qJ(2,3));
t719 = t718 * (t687 - (t14 * t702 - t539 * t684 + t705 + t707 + t712 + t714) * t538);
t734 = t14 * (t24 * t205 * koppelP(3,1) + t645 * t22) + t24 * (-t12 * t642 - t549 * t204 - koppelP(3,3) * t212) + t17 * t664 * t22 + t12 * t668 * t22 + xDP(3);
t735 = t734 * t545;
t736 = t719 + t735;
t737 = t718 * t736;
t745 = t545 * (t687 + t538 * (-t14 * t702 + t539 * t684 - t705 - t707 - t712 - t714)) - t718 * t734;
t746 = t745 * t545;
t747 = t737 + t746;
t748 = t545 ^ 2;
t749 = 0.1e1 / t748;
t751 = qJ(3,3) ^ 2;
t752 = 0.1e1 / t751;
t754 = koppelP(3,1) * t22;
t761 = koppelP(3,2) * t248;
t764 = t14 * (t205 * t754 - t24 * t645) + t24 * (-t17 * t664 - t669) - t761 * t39 - t683 - t549 * t251 + xDP(2);
t772 = t14 * (-koppelP(3,2) * t110 - koppelP(3,1) * t255) + t549 * t255 - t556 * t110 + t680 + xDP(1);
t780 = t542 * (t539 * t764 - t541 * t772) - (t539 * t772 + t541 * t764) * t538;
t781 = t780 * t752;
t784 = t752 * t749;
t787 = t546 * t780;
t788 = t745 * t752;
t790 = -t736 * t784 * t780 * t718 + t638 * t548 * t607 - t781 * t749 * t747 + t602 * t547 - t788 * t787;
t791 = t790 * t548;
t793 = sin(legFrame(4,3));
t794 = cos(qJ(1,4));
t796 = sin(qJ(1,4));
t797 = cos(legFrame(4,3));
t799 = -t794 * t793 - t797 * t796;
t800 = sin(qJ(2,4));
t801 = 0.1e1 / t800;
t802 = t801 * t799;
t803 = 0.1e1 / qJ(3,4);
t804 = koppelP(4,2) * t12;
t806 = -t14 * koppelP(4,1) + t804;
t808 = koppelP(4,3) * t19;
t809 = t17 * t806 + t808;
t810 = t22 * t809;
t811 = koppelP(4,1) * t12;
t813 = koppelP(4,2) * t14 + t811;
t814 = t813 * t24;
t815 = t810 + t814;
t816 = xDP(4) * t815;
t818 = t24 * t809;
t819 = t813 * t22;
t820 = t818 - t819;
t830 = t813 * t17;
t833 = t22 * t830 - t806 * t24;
t835 = koppelP(4,3) * t17;
t837 = t806 * t19 - t835;
t838 = t837 * t47;
t839 = -xDP(4) * t820 + xDP(6) * t833 + t838;
t843 = t806 * t22 + t24 * t830;
t845 = t837 * t41;
t846 = xDP(6) * t843 + t816 + t845;
t856 = xDP(5) * (t22 * xDP(4) * t820 - t24 * t816) + xDP(6) * (t43 * t815 + t49 * t820) + xDP(5) * (t22 * t839 + t24 * t846) + xDP(6) * (t19 * t22 * t846 - t19 * t24 * t839);
t857 = t856 * t803;
t861 = -t796 * t793 + t797 * t794;
t862 = t801 * t861;
t865 = koppelP(4,1) * t87 - koppelP(4,2) * t89 + t835;
t869 = -t17 * t806 - t808;
t881 = xDP(4) * (-t813 * t22 + t818) - xDP(6) * t833 - t838;
t884 = t813 * t110;
t885 = -xDP(5) * t869 - t884;
t893 = t47 * xDP(4) * t865 + xDP(6) * (t19 * xDP(5) * (t22 * t869 - t814) + t49 * t865) + xDP(4) * t881 + xDP(5) * t24 * t885 + xDP(6) * (t19 * t22 * t885 + t17 * t881);
t897 = koppelP(4,2) * xDP(6);
t900 = -koppelP(4,1) * t123 + t17 * t897 + xDP(4) * koppelP(4,2);
t906 = t22 * t796 * xDP(4) - t794 * xDP(5);
t909 = t19 * t794;
t911 = t22 * t796;
t919 = koppelP(4,1) * t145 - xDP(5) * koppelP(4,3);
t923 = koppelP(4,2) * t123 + xDP(4) * koppelP(4,1);
t924 = t923 * t12;
t925 = t17 * t919 + t924;
t935 = koppelP(4,3) * t123;
t936 = t935 + xDP(1);
t938 = t808 * t39;
t939 = -t938 + xDP(2);
t942 = t797 * (t14 * (-t24 * t900 * t796 + t17 * t906 * koppelP(4,1) - (koppelP(4,2) * t909 - koppelP(4,1) * t911) * xDP(6)) - t24 * t925 * t796 - t17 * t906 * t804 - t12 * (koppelP(4,1) * t909 + koppelP(4,2) * t911) * xDP(6) + t794 * t936 + t939 * t796);
t948 = t22 * t794 * xDP(4) + t796 * xDP(5);
t951 = t22 * t794;
t953 = t19 * t796;
t957 = t24 * t900 * t794 - t17 * t948 * koppelP(4,1) - (koppelP(4,1) * t951 + koppelP(4,2) * t953) * xDP(6);
t960 = t24 * t925 * t794;
t962 = t17 * t948 * t804;
t967 = t12 * (koppelP(4,2) * t951 - koppelP(4,1) * t953) * xDP(6);
t969 = t936 * t796;
t973 = cos(qJ(2,4));
t974 = t973 * (t942 - (t14 * t957 - t794 * t939 + t960 + t962 + t967 + t969) * t793);
t989 = t14 * (t24 * t205 * koppelP(4,1) + t900 * t22) + t24 * (-t12 * t897 - t804 * t204 - koppelP(4,3) * t212) + t17 * t919 * t22 + t12 * t923 * t22 + xDP(3);
t990 = t989 * t800;
t991 = t974 + t990;
t992 = t973 * t991;
t1000 = t800 * (t942 + t793 * (-t14 * t957 + t794 * t939 - t960 - t962 - t967 - t969)) - t973 * t989;
t1001 = t1000 * t800;
t1002 = t992 + t1001;
t1003 = t800 ^ 2;
t1004 = 0.1e1 / t1003;
t1006 = qJ(3,4) ^ 2;
t1007 = 0.1e1 / t1006;
t1009 = koppelP(4,1) * t22;
t1016 = koppelP(4,2) * t248;
t1019 = t14 * (t205 * t1009 - t24 * t900) + t24 * (-t17 * t919 - t924) - t1016 * t39 - t938 - t804 * t251 + xDP(2);
t1027 = t14 * (-koppelP(4,2) * t110 - koppelP(4,1) * t255) + t804 * t255 - t811 * t110 + t935 + xDP(1);
t1035 = t797 * (t794 * t1019 - t796 * t1027) - (t796 * t1019 + t794 * t1027) * t793;
t1036 = t1035 * t1007;
t1039 = t1007 * t1004;
t1042 = t801 * t1035;
t1043 = t1000 * t1007;
t1045 = -t991 * t1039 * t1035 * t973 - t1036 * t1004 * t1002 + t893 * t803 * t862 - t1043 * t1042 + t857 * t802;
t1046 = t1045 * t803;
t1048 = sin(legFrame(5,3));
t1049 = cos(qJ(1,5));
t1051 = sin(qJ(1,5));
t1052 = cos(legFrame(5,3));
t1054 = -t1049 * t1048 - t1052 * t1051;
t1055 = sin(qJ(2,5));
t1056 = 0.1e1 / t1055;
t1057 = t1056 * t1054;
t1058 = 0.1e1 / qJ(3,5);
t1059 = koppelP(5,2) * t12;
t1061 = -t14 * koppelP(5,1) + t1059;
t1063 = koppelP(5,3) * t19;
t1064 = t17 * t1061 + t1063;
t1065 = t22 * t1064;
t1066 = koppelP(5,1) * t12;
t1068 = koppelP(5,2) * t14 + t1066;
t1069 = t1068 * t24;
t1070 = t1065 + t1069;
t1071 = xDP(4) * t1070;
t1073 = t24 * t1064;
t1074 = t1068 * t22;
t1075 = t1073 - t1074;
t1085 = t1068 * t17;
t1088 = -t1061 * t24 + t22 * t1085;
t1090 = koppelP(5,3) * t17;
t1092 = t1061 * t19 - t1090;
t1093 = t1092 * t47;
t1094 = -xDP(4) * t1075 + xDP(6) * t1088 + t1093;
t1098 = t1061 * t22 + t24 * t1085;
t1100 = t1092 * t41;
t1101 = xDP(6) * t1098 + t1071 + t1100;
t1111 = xDP(5) * (t22 * xDP(4) * t1075 - t24 * t1071) + xDP(6) * (t43 * t1070 + t49 * t1075) + xDP(5) * (t22 * t1094 + t24 * t1101) + xDP(6) * (-t19 * t24 * t1094 + t19 * t22 * t1101);
t1112 = t1111 * t1058;
t1116 = -t1051 * t1048 + t1052 * t1049;
t1117 = t1056 * t1116;
t1120 = koppelP(5,1) * t87 - koppelP(5,2) * t89 + t1090;
t1124 = -t17 * t1061 - t1063;
t1136 = xDP(4) * (-t1068 * t22 + t1073) - xDP(6) * t1088 - t1093;
t1139 = t1068 * t110;
t1140 = -xDP(5) * t1124 - t1139;
t1148 = t47 * xDP(4) * t1120 + xDP(6) * (t19 * xDP(5) * (t22 * t1124 - t1069) + t49 * t1120) + xDP(4) * t1136 + xDP(5) * t24 * t1140 + xDP(6) * (t19 * t22 * t1140 + t17 * t1136);
t1152 = koppelP(5,2) * xDP(6);
t1155 = t17 * t1152 - koppelP(5,1) * t123 + xDP(4) * koppelP(5,2);
t1161 = t22 * t1051 * xDP(4) - t1049 * xDP(5);
t1164 = t19 * t1049;
t1166 = t22 * t1051;
t1174 = koppelP(5,1) * t145 - xDP(5) * koppelP(5,3);
t1178 = koppelP(5,2) * t123 + xDP(4) * koppelP(5,1);
t1179 = t1178 * t12;
t1180 = t17 * t1174 + t1179;
t1190 = koppelP(5,3) * t123;
t1191 = t1190 + xDP(1);
t1193 = t1063 * t39;
t1194 = -t1193 + xDP(2);
t1197 = t1052 * (t14 * (-t24 * t1155 * t1051 + t17 * t1161 * koppelP(5,1) - (koppelP(5,2) * t1164 - koppelP(5,1) * t1166) * xDP(6)) - t24 * t1180 * t1051 - t17 * t1161 * t1059 - t12 * (koppelP(5,1) * t1164 + koppelP(5,2) * t1166) * xDP(6) + t1049 * t1191 + t1194 * t1051);
t1203 = t22 * t1049 * xDP(4) + t1051 * xDP(5);
t1206 = t22 * t1049;
t1208 = t19 * t1051;
t1212 = t24 * t1155 * t1049 - t17 * t1203 * koppelP(5,1) - (koppelP(5,1) * t1206 + koppelP(5,2) * t1208) * xDP(6);
t1215 = t24 * t1180 * t1049;
t1217 = t17 * t1203 * t1059;
t1222 = t12 * (koppelP(5,2) * t1206 - koppelP(5,1) * t1208) * xDP(6);
t1224 = t1191 * t1051;
t1228 = cos(qJ(2,5));
t1229 = t1228 * (t1197 - (-t1049 * t1194 + t14 * t1212 + t1215 + t1217 + t1222 + t1224) * t1048);
t1244 = t14 * (t24 * t205 * koppelP(5,1) + t1155 * t22) + t24 * (-t1059 * t204 - t12 * t1152 - koppelP(5,3) * t212) + t17 * t1174 * t22 + t12 * t1178 * t22 + xDP(3);
t1245 = t1244 * t1055;
t1246 = t1229 + t1245;
t1247 = t1228 * t1246;
t1255 = t1055 * (t1197 + t1048 * (t1049 * t1194 - t14 * t1212 - t1215 - t1217 - t1222 - t1224)) - t1228 * t1244;
t1256 = t1255 * t1055;
t1257 = t1247 + t1256;
t1258 = t1055 ^ 2;
t1259 = 0.1e1 / t1258;
t1261 = qJ(3,5) ^ 2;
t1262 = 0.1e1 / t1261;
t1264 = koppelP(5,1) * t22;
t1271 = koppelP(5,2) * t248;
t1274 = t14 * (-t24 * t1155 + t205 * t1264) + t24 * (-t17 * t1174 - t1179) - t1271 * t39 - t1193 - t1059 * t251 + xDP(2);
t1282 = t14 * (-koppelP(5,2) * t110 - koppelP(5,1) * t255) + t1059 * t255 - t1066 * t110 + t1190 + xDP(1);
t1290 = t1052 * (t1049 * t1274 - t1051 * t1282) - (t1049 * t1282 + t1051 * t1274) * t1048;
t1291 = t1290 * t1262;
t1294 = t1262 * t1259;
t1297 = t1056 * t1290;
t1298 = t1255 * t1262;
t1300 = -t1246 * t1294 * t1290 * t1228 + t1148 * t1058 * t1117 - t1291 * t1259 * t1257 + t1112 * t1057 - t1298 * t1297;
t1301 = t1300 * t1058;
t1303 = sin(legFrame(6,3));
t1304 = cos(qJ(1,6));
t1306 = sin(qJ(1,6));
t1307 = cos(legFrame(6,3));
t1309 = -t1304 * t1303 - t1307 * t1306;
t1310 = sin(qJ(2,6));
t1311 = 0.1e1 / t1310;
t1312 = t1311 * t1309;
t1313 = 0.1e1 / qJ(3,6);
t1314 = koppelP(6,2) * t12;
t1316 = -t14 * koppelP(6,1) + t1314;
t1318 = koppelP(6,3) * t19;
t1319 = t17 * t1316 + t1318;
t1320 = t22 * t1319;
t1321 = koppelP(6,1) * t12;
t1323 = t14 * koppelP(6,2) + t1321;
t1324 = t1323 * t24;
t1325 = t1320 + t1324;
t1326 = xDP(4) * t1325;
t1328 = t24 * t1319;
t1329 = t1323 * t22;
t1330 = t1328 - t1329;
t1340 = t1323 * t17;
t1343 = -t1316 * t24 + t22 * t1340;
t1345 = koppelP(6,3) * t17;
t1347 = t1316 * t19 - t1345;
t1348 = t1347 * t47;
t1349 = -xDP(4) * t1330 + xDP(6) * t1343 + t1348;
t1353 = t1316 * t22 + t24 * t1340;
t1355 = t1347 * t41;
t1356 = xDP(6) * t1353 + t1326 + t1355;
t1366 = xDP(5) * (t22 * xDP(4) * t1330 - t24 * t1326) + xDP(6) * (t43 * t1325 + t49 * t1330) + xDP(5) * (t22 * t1349 + t24 * t1356) + xDP(6) * (-t19 * t24 * t1349 + t19 * t22 * t1356);
t1367 = t1366 * t1313;
t1371 = -t1306 * t1303 + t1307 * t1304;
t1372 = t1311 * t1371;
t1375 = koppelP(6,1) * t87 - koppelP(6,2) * t89 + t1345;
t1379 = -t17 * t1316 - t1318;
t1391 = xDP(4) * (-t1323 * t22 + t1328) - xDP(6) * t1343 - t1348;
t1394 = t1323 * t110;
t1395 = -xDP(5) * t1379 - t1394;
t1403 = t47 * xDP(4) * t1375 + xDP(6) * (t19 * xDP(5) * (t22 * t1379 - t1324) + t49 * t1375) + xDP(4) * t1391 + xDP(5) * t24 * t1395 + xDP(6) * (t19 * t22 * t1395 + t17 * t1391);
t1407 = koppelP(6,2) * xDP(6);
t1410 = -koppelP(6,1) * t123 + t17 * t1407 + xDP(4) * koppelP(6,2);
t1416 = t22 * t1306 * xDP(4) - t1304 * xDP(5);
t1419 = t19 * t1304;
t1421 = t22 * t1306;
t1429 = koppelP(6,1) * t145 - xDP(5) * koppelP(6,3);
t1433 = koppelP(6,2) * t123 + xDP(4) * koppelP(6,1);
t1434 = t1433 * t12;
t1435 = t17 * t1429 + t1434;
t1445 = koppelP(6,3) * t123;
t1446 = t1445 + xDP(1);
t1448 = t1318 * t39;
t1449 = -t1448 + xDP(2);
t1452 = t1307 * (t14 * (-t24 * t1410 * t1306 + t17 * t1416 * koppelP(6,1) - (koppelP(6,2) * t1419 - koppelP(6,1) * t1421) * xDP(6)) - t24 * t1435 * t1306 - t17 * t1416 * t1314 - t12 * (koppelP(6,1) * t1419 + koppelP(6,2) * t1421) * xDP(6) + t1304 * t1446 + t1449 * t1306);
t1458 = t22 * t1304 * xDP(4) + t1306 * xDP(5);
t1461 = t22 * t1304;
t1463 = t19 * t1306;
t1467 = t24 * t1410 * t1304 - t17 * t1458 * koppelP(6,1) - (koppelP(6,1) * t1461 + koppelP(6,2) * t1463) * xDP(6);
t1470 = t24 * t1435 * t1304;
t1472 = t17 * t1458 * t1314;
t1477 = t12 * (koppelP(6,2) * t1461 - koppelP(6,1) * t1463) * xDP(6);
t1479 = t1446 * t1306;
t1483 = cos(qJ(2,6));
t1484 = t1483 * (t1452 - (-t1304 * t1449 + t14 * t1467 + t1470 + t1472 + t1477 + t1479) * t1303);
t1499 = t14 * (t24 * t205 * koppelP(6,1) + t1410 * t22) + t24 * (-t12 * t1407 - t1314 * t204 - koppelP(6,3) * t212) + t17 * t1429 * t22 + t12 * t1433 * t22 + xDP(3);
t1500 = t1499 * t1310;
t1501 = t1484 + t1500;
t1502 = t1483 * t1501;
t1510 = t1310 * (t1452 + t1303 * (t1304 * t1449 - t14 * t1467 - t1470 - t1472 - t1477 - t1479)) - t1483 * t1499;
t1511 = t1510 * t1310;
t1512 = t1502 + t1511;
t1513 = t1310 ^ 2;
t1514 = 0.1e1 / t1513;
t1516 = qJ(3,6) ^ 2;
t1517 = 0.1e1 / t1516;
t1519 = koppelP(6,1) * t22;
t1526 = koppelP(6,2) * t248;
t1529 = t14 * (-t24 * t1410 + t205 * t1519) + t24 * (-t17 * t1429 - t1434) - t1526 * t39 - t1448 - t1314 * t251 + xDP(2);
t1537 = t14 * (-koppelP(6,2) * t110 - koppelP(6,1) * t255) + t1314 * t255 - t1321 * t110 + t1445 + xDP(1);
t1545 = t1307 * (t1304 * t1529 - t1306 * t1537) - (t1304 * t1537 + t1306 * t1529) * t1303;
t1546 = t1545 * t1517;
t1549 = t1517 * t1514;
t1552 = t1311 * t1545;
t1553 = t1510 * t1517;
t1555 = -t1501 * t1549 * t1545 * t1483 + t1403 * t1313 * t1372 - t1546 * t1514 * t1512 + t1367 * t1312 - t1553 * t1552;
t1556 = t1555 * t1313;
t1560 = 0.1e1 / t238 / qJ(3,1);
t1561 = t1560 * t7;
t1564 = t202 * t223 * t9;
t1567 = t202 ^ 2;
t1568 = t1567 * t85;
t1570 = t270 ^ 2;
t1574 = 0.1e1 / t496 / qJ(3,2);
t1575 = t1574 * t289;
t1578 = t463 * t481 * t291;
t1581 = t463 ^ 2;
t1582 = t1581 * t351;
t1584 = t525 ^ 2;
t1588 = 0.1e1 / t751 / qJ(3,3);
t1589 = t1588 * t544;
t1592 = t718 * t736 * t546;
t1595 = t718 ^ 2;
t1596 = t1595 * t606;
t1598 = t780 ^ 2;
t1602 = 0.1e1 / t1006 / qJ(3,4);
t1603 = t1602 * t799;
t1606 = t973 * t991 * t801;
t1609 = t973 ^ 2;
t1610 = t1609 * t861;
t1612 = t1035 ^ 2;
t1616 = 0.1e1 / t1261 / qJ(3,5);
t1617 = t1616 * t1054;
t1620 = t1228 * t1246 * t1056;
t1623 = t1228 ^ 2;
t1624 = t1623 * t1116;
t1626 = t1290 ^ 2;
t1630 = 0.1e1 / t1516 / qJ(3,6);
t1631 = t1630 * t1309;
t1634 = t1483 * t1501 * t1311;
t1637 = t1483 ^ 2;
t1638 = t1637 * t1371;
t1640 = t1545 ^ 2;
t1643 = t8 * t7;
t1645 = t290 * t289;
t1647 = t545 * t544;
t1649 = t800 * t799;
t1651 = t1055 * t1054;
t1653 = t1310 * t1309;
t1655 = 0.2e1 * t1564 * t270 * t1561 - t1570 * t9 * t1560 * t1568 + 0.2e1 * t1578 * t525 * t1575 - t1584 * t291 * t1574 * t1582 + 0.2e1 * t1592 * t780 * t1589 - t1598 * t546 * t1588 * t1596 + 0.2e1 * t1606 * t1035 * t1603 - t1612 * t801 * t1602 * t1610 + 0.2e1 * t1620 * t1290 * t1617 - t1626 * t1056 * t1616 * t1624 + 0.2e1 * t1634 * t1545 * t1631 - t1640 * t1311 * t1630 * t1638 + t281 * t1643 + t536 * t1645 + t791 * t1647 + t1046 * t1649 + t1301 * t1651 + t1556 * t1653;
t1656 = t236 * t7;
t1660 = 0.2e1 * t1567 - 0.1e1;
t1661 = t1660 * t223 * t270;
t1664 = t202 * t85;
t1666 = t274 * t1570 * t1567;
t1669 = t239 * t236 * t1570;
t1670 = -0.2e1 * t1666 + t1669;
t1673 = t494 * t289;
t1677 = 0.2e1 * t1581 - 0.1e1;
t1678 = t1677 * t481 * t525;
t1681 = t463 * t351;
t1683 = t529 * t1584 * t1581;
t1686 = t497 * t494 * t1584;
t1687 = -0.2e1 * t1683 + t1686;
t1690 = t749 * t544;
t1694 = 0.2e1 * t1595 - 0.1e1;
t1695 = t1694 * t736 * t780;
t1698 = t718 * t606;
t1700 = t784 * t1598 * t1595;
t1703 = t752 * t749 * t1598;
t1704 = -0.2e1 * t1700 + t1703;
t1707 = t1004 * t799;
t1711 = 0.2e1 * t1609 - 0.1e1;
t1712 = t1711 * t991 * t1035;
t1715 = t973 * t861;
t1717 = t1039 * t1612 * t1609;
t1720 = t1007 * t1004 * t1612;
t1721 = -0.2e1 * t1717 + t1720;
t1724 = t1259 * t1054;
t1728 = 0.2e1 * t1623 - 0.1e1;
t1729 = t1728 * t1246 * t1290;
t1732 = t1228 * t1116;
t1734 = t1294 * t1626 * t1623;
t1737 = t1262 * t1259 * t1626;
t1738 = -0.2e1 * t1734 + t1737;
t1741 = t1514 * t1309;
t1745 = 0.2e1 * t1637 - 0.1e1;
t1746 = t1745 * t1501 * t1545;
t1749 = t1483 * t1371;
t1751 = t1549 * t1640 * t1637;
t1754 = t1517 * t1514 * t1640;
t1755 = -0.2e1 * t1751 + t1754;
t1758 = t11 * t7;
t1759 = t202 * t280;
t1762 = t293 * t289;
t1763 = t463 * t535;
t1766 = t548 * t544;
t1767 = t718 * t790;
t1770 = t803 * t799;
t1771 = t973 * t1045;
t1774 = t1058 * t1054;
t1775 = t1228 * t1300;
t1778 = t1313 * t1309;
t1779 = t1483 * t1555;
t1782 = 0.2e1 * t1661 * t1560 * t1656 + t1670 * t11 * t1664 + 0.2e1 * t1678 * t1574 * t1673 + t1687 * t293 * t1681 + 0.2e1 * t1695 * t1588 * t1690 + t1704 * t548 * t1698 + 0.2e1 * t1712 * t1602 * t1707 + t1721 * t803 * t1715 + 0.2e1 * t1729 * t1616 * t1724 + t1738 * t1058 * t1732 + 0.2e1 * t1746 * t1630 * t1741 + t1755 * t1313 * t1749 + 0.2e1 * t1759 * t1758 + 0.2e1 * t1763 * t1762 + 0.2e1 * t1767 * t1766 + 0.2e1 * t1771 * t1770 + 0.2e1 * t1775 * t1774 + 0.2e1 * t1779 * t1778;
t1783 = t223 ^ 2;
t1784 = t1783 * t1560;
t1785 = t202 * t1784;
t1787 = t481 ^ 2;
t1788 = t1787 * t1574;
t1789 = t463 * t1788;
t1791 = t736 ^ 2;
t1792 = t1791 * t1588;
t1793 = t718 * t1792;
t1795 = t991 ^ 2;
t1796 = t1795 * t1602;
t1797 = t973 * t1796;
t1799 = t1246 ^ 2;
t1800 = t1799 * t1616;
t1801 = t1228 * t1800;
t1803 = t1501 ^ 2;
t1804 = t1803 * t1630;
t1805 = t1483 * t1804;
t1808 = -t11 * t7;
t1811 = t8 * t11;
t1825 = xDP(4) * (-t27 * t24 - t23) - xDP(6) * t67 - t69;
t1828 = xDP(5) * t95 + t111;
t1836 = t41 * xDP(4) * t91 + xDP(6) * (t19 * xDP(5) * (t24 * t95 + t33) - t43 * t91) + xDP(4) * t1825 + xDP(5) * t22 * t1828 + xDP(6) * (-t19 * t24 * t1828 + t17 * t1825);
t1838 = t1570 * t9;
t1839 = t202 * t239;
t1843 = t120 * t202 * t1808 + t81 * t1664 + t1836 * t1811 + t1839 * t1838 - 0.2e1 * t223 * t278;
t1845 = t280 * t1811;
t1848 = -t293 * t289;
t1851 = t290 * t293;
t1865 = xDP(4) * (-t303 * t24 - t300) - xDP(6) * t333 - t335;
t1868 = xDP(5) * t359 + t374;
t1876 = t41 * xDP(4) * t355 + xDP(6) * (t19 * xDP(5) * (t24 * t359 + t309) - t43 * t355) + xDP(4) * t1865 + xDP(5) * t22 * t1868 + xDP(6) * (-t19 * t24 * t1868 + t17 * t1865);
t1878 = t1584 * t291;
t1879 = t463 * t497;
t1883 = t383 * t463 * t1848 + t347 * t1681 + t1876 * t1851 + t1879 * t1878 - 0.2e1 * t481 * t533;
t1885 = t535 * t1851;
t1888 = -t548 * t544;
t1891 = t545 * t548;
t1905 = xDP(4) * (-t558 * t24 - t555) - xDP(6) * t588 - t590;
t1908 = xDP(5) * t614 + t629;
t1916 = t41 * xDP(4) * t610 + xDP(6) * (t19 * xDP(5) * (t24 * t614 + t564) - t43 * t610) + xDP(4) * t1905 + xDP(5) * t22 * t1908 + xDP(6) * (-t19 * t24 * t1908 + t17 * t1905);
t1918 = t1598 * t546;
t1919 = t718 * t752;
t1923 = t638 * t718 * t1888 + t602 * t1698 + t1916 * t1891 + t1919 * t1918 - 0.2e1 * t736 * t788;
t1925 = t790 * t1891;
t1928 = -t803 * t799;
t1931 = t800 * t803;
t1945 = xDP(4) * (-t813 * t24 - t810) - xDP(6) * t843 - t845;
t1948 = xDP(5) * t869 + t884;
t1956 = t41 * xDP(4) * t865 + xDP(6) * (t19 * xDP(5) * (t24 * t869 + t819) - t43 * t865) + xDP(4) * t1945 + xDP(5) * t22 * t1948 + xDP(6) * (-t19 * t24 * t1948 + t17 * t1945);
t1958 = t1612 * t801;
t1959 = t973 * t1007;
t1963 = t893 * t973 * t1928 - 0.2e1 * t991 * t1043 + t857 * t1715 + t1956 * t1931 + t1959 * t1958;
t1965 = t1045 * t1931;
t1968 = -t1058 * t1054;
t1971 = t1055 * t1058;
t1985 = xDP(4) * (-t1068 * t24 - t1065) - xDP(6) * t1098 - t1100;
t1988 = xDP(5) * t1124 + t1139;
t1996 = t41 * xDP(4) * t1120 + xDP(6) * (t19 * xDP(5) * (t24 * t1124 + t1074) - t43 * t1120) + xDP(4) * t1985 + xDP(5) * t22 * t1988 + xDP(6) * (-t19 * t24 * t1988 + t17 * t1985);
t1998 = t1626 * t1056;
t1999 = t1228 * t1262;
t2003 = t1148 * t1228 * t1968 + t1112 * t1732 - 0.2e1 * t1246 * t1298 + t1996 * t1971 + t1999 * t1998;
t2005 = t1300 * t1971;
t2008 = -t1313 * t1309;
t2011 = t1310 * t1313;
t2025 = xDP(4) * (-t1323 * t24 - t1320) - xDP(6) * t1353 - t1355;
t2028 = xDP(5) * t1379 + t1394;
t2036 = t41 * xDP(4) * t1375 + xDP(6) * (t19 * xDP(5) * (t24 * t1379 + t1329) - t43 * t1375) + xDP(4) * t2025 + xDP(5) * t22 * t2028 + xDP(6) * (-t19 * t24 * t2028 + t17 * t2025);
t2038 = t1640 * t1311;
t2039 = t1483 * t1517;
t2043 = t1403 * t1483 * t2008 + t1367 * t1749 - 0.2e1 * t1501 * t1553 + t2036 * t2011 + t2039 * t2038;
t2045 = t1555 * t2011;
t2047 = t1785 * t10 + t1789 * t292 + t1793 * t547 + t1797 * t802 + t1801 * t1057 + t1805 * t1312 + t1843 * t1758 + t1845 * t1664 + t1883 * t1762 + t1885 * t1681 + t1923 * t1766 + t1925 * t1698 + t1963 * t1770 + t1965 * t1715 + t2003 * t1774 + t2005 * t1732 + t2043 * t1778 + t2045 * t1749;
t2054 = t1843 * t11;
t2055 = t202 * t2054;
t2058 = t1883 * t293;
t2059 = t463 * t2058;
t2062 = t1923 * t548;
t2063 = t718 * t2062;
t2066 = t1963 * t803;
t2067 = t973 * t2066;
t2070 = t2003 * t1058;
t2071 = t1228 * t2070;
t2074 = t2043 * t1313;
t2075 = t1483 * t2074;
t2078 = -t1783 * t1561 - t1787 * t1575 - t1791 * t1589 - t1795 * t1603 - t1799 * t1617 - t1803 * t1631 + t2055 * t10 + t281 * t1568 + t2059 * t292 + t536 * t1582 + t2063 * t547 + t791 * t1596 + t2067 * t802 + t1046 * t1610 + t2071 * t1057 + t1301 * t1624 + t2075 * t1312 + t1556 * t1638;
t2087 = -t1745 * t1549;
t2090 = -t1677 * t529;
t2093 = t1694 * t784;
t2096 = -t1711 * t1039;
t2099 = t1728 * t1294;
t2102 = t1660 * t274;
t2106 = t8 * t202;
t2108 = 0.2e1 * t223 * t1567 + t232 * t2106 - t203 - t222;
t2109 = t2108 * t271;
t2114 = t463 * t290;
t2116 = 0.2e1 * t481 * t1581 + t490 * t2114 - t464 - t480;
t2117 = t2116 * t526;
t2122 = t545 * t718;
t2124 = 0.2e1 * t736 * t1595 + t745 * t2122 - t719 - t735;
t2125 = t2124 * t781;
t2130 = t1483 * t1310;
t2132 = 0.2e1 * t1501 * t1637 + t1510 * t2130 - t1484 - t1500;
t2133 = t2132 * t1546;
t2139 = t8 * t85;
t2144 = t290 * t351;
t2149 = t545 * t606;
t2154 = t800 * t861;
t2156 = t2087 * t1640 * t1749 + t2090 * t1584 * t1681 - t2093 * t1598 * t1698 + t2096 * t1612 * t1715 - t2099 * t1626 * t1732 - t2102 * t1570 * t1664 + 0.2e1 * t2109 * t1656 + 0.2e1 * t2117 * t1673 + 0.2e1 * t2125 * t1690 + 0.2e1 * t2133 * t1741 + 0.2e1 * t202 * t280 * t7 - t1843 * t2139 + 0.2e1 * t463 * t535 * t289 - t1883 * t2144 + 0.2e1 * t718 * t790 * t544 - t1923 * t2149 + 0.2e1 * t973 * t1045 * t799 - t1963 * t2154;
t2160 = t1055 * t1116;
t2165 = t1310 * t1371;
t2169 = t1055 * t1228;
t2171 = 0.2e1 * t1246 * t1623 + t1255 * t2169 - t1229 - t1245;
t2172 = t2171 * t1291;
t2177 = t973 * t800;
t2179 = t1000 * t2177 + 0.2e1 * t991 * t1609 - t974 - t990;
t2180 = t2179 * t1036;
t2184 = -t8 * t7;
t2191 = t11 * t9;
t2194 = t80 * t2139 + t120 * t2184 - t1836 * t202 - t2191 * t270 * (t9 * t270 * t1567 - t277) + t11 * t1783;
t2198 = -t290 * t289;
t2205 = t293 * t291;
t2208 = t346 * t2144 + t383 * t2198 - t1876 * t463 - t2205 * t525 * (t291 * t525 * t1581 - t532) + t293 * t1787;
t2212 = -t545 * t544;
t2219 = t548 * t546;
t2222 = t601 * t2149 + t638 * t2212 - t1916 * t718 - t2219 * t780 * (t546 * t780 * t1595 - t787) + t548 * t1791;
t2230 = -t800 * t799;
t2237 = t803 * t801;
t2240 = t856 * t2154 + t893 * t2230 - t1956 * t973 - t2237 * t1035 * (t801 * t1035 * t1609 - t1042) + t803 * t1795;
t2244 = -t1055 * t1054;
t2251 = t1058 * t1056;
t2254 = t1111 * t2160 + t1148 * t2244 - t1996 * t1228 - t2251 * t1290 * (t1056 * t1290 * t1623 - t1297) + t1058 * t1799;
t2258 = -t1310 * t1309;
t2265 = t1313 * t1311;
t2268 = t1366 * t2165 + t1403 * t2258 - t2036 * t1483 - t2265 * t1545 * (t1311 * t1545 * t1637 - t1552) + t1313 * t1803;
t2279 = 0.2e1 * t1228 * t1300 * t1054 - t2003 * t2160 + 0.2e1 * t1483 * t1555 * t1309 - t2043 * t2165 + 0.2e1 * t2172 * t1724 + 0.2e1 * t2180 * t1707 - t2194 * t11 * t1664 - t2208 * t293 * t1681 - t2222 * t548 * t1698 - t1999 * t1626 * t1116 - t2039 * t1640 * t1371 - t2240 * t803 * t1715 - t2254 * t1058 * t1732 - t2268 * t1313 * t1749 - t1879 * t1584 * t351 - t1919 * t1598 * t606 - t1959 * t1612 * t861 - t1839 * t1570 * t85;
t2281 = t223 * t239;
t2285 = 0.2e1 * t202 * t232 - t8 * t223;
t2286 = t2285 * t2281;
t2288 = t481 * t497;
t2292 = t290 * t481 - 0.2e1 * t463 * t490;
t2293 = t2292 * t2288;
t2295 = t736 * t752;
t2299 = -t545 * t736 + 0.2e1 * t718 * t745;
t2300 = t2299 * t2295;
t2302 = t991 * t1007;
t2306 = -0.2e1 * t973 * t1000 + t800 * t991;
t2307 = t2306 * t2302;
t2309 = t1246 * t1262;
t2313 = -t1055 * t1246 + 0.2e1 * t1228 * t1255;
t2314 = t2313 * t2309;
t2316 = t1501 * t1517;
t2320 = t1310 * t1501 - 0.2e1 * t1483 * t1510;
t2321 = t2320 * t2316;
t2323 = qJ(3,1) * t1843;
t2326 = t202 * t2323 + t8 * t2194;
t2327 = t2326 * t11;
t2332 = qJ(3,2) * t1883;
t2335 = t2208 * t290 + t463 * t2332;
t2336 = t2335 * t293;
t2341 = t280 * t235 * t85 + t535 * t493 * t351 + t2286 * t10 + t2327 * t10 + t2314 * t1057 - t2321 * t1312 + t280 * t1568 + t535 * t1582 - t2293 * t292 + t2300 * t547 - t2307 * t802 + t2336 * t292;
t2342 = qJ(3,3) * t1923;
t2345 = t545 * t2222 + t718 * t2342;
t2346 = t2345 * t548;
t2351 = qJ(3,4) * t1963;
t2354 = t800 * t2240 + t973 * t2351;
t2355 = t2354 * t803;
t2360 = qJ(3,5) * t2003;
t2363 = t1055 * t2254 + t1228 * t2360;
t2364 = t2363 * t1058;
t2369 = qJ(3,6) * t2043;
t2372 = t1310 * t2268 + t1483 * t2369;
t2373 = t2372 * t1313;
t2378 = t1045 * t1003 * t861 + t1300 * t1258 * t1116 + t1555 * t1513 * t1371 + t790 * t748 * t606 + t1045 * t1610 + t2364 * t1057 + t1300 * t1624 + t2373 * t1312 + t1555 * t1638 + t790 * t1596 + t2346 * t547 + t2355 * t802;
t2382 = 0.2e1 * t224 + t233;
t2383 = t2382 * t277;
t2388 = 0.2e1 * t482 + t491;
t2389 = t2388 * t532;
t2394 = 0.2e1 * t737 + t746;
t2395 = t2394 * t787;
t2400 = 0.2e1 * t992 + t1001;
t2401 = t2400 * t1042;
t2406 = 0.2e1 * t1502 + t1511;
t2407 = t2406 * t1552;
t2412 = 0.2e1 * t1247 + t1256;
t2413 = t2412 * t1297;
t2431 = -t1517 * t1803 + t1751 - t1754;
t2434 = -t1007 * t1795 + t1717 - t1720;
t2436 = 0.2e1 * t2383 * t239 * t7 + 0.2e1 * t2389 * t497 * t289 + 0.2e1 * t2395 * t752 * t544 + 0.2e1 * t2401 * t1007 * t799 + 0.2e1 * t2407 * t1517 * t1309 + 0.2e1 * t2413 * t1262 * t1054 + 0.2e1 * t1923 * t1698 + 0.2e1 * t1045 * t1649 + 0.2e1 * t1963 * t1715 + 0.2e1 * t1300 * t1651 + 0.2e1 * t2003 * t1732 + 0.2e1 * t1555 * t1653 + 0.2e1 * t2043 * t1749 + t2431 * t2165 + t2434 * t2154;
t2438 = -t1262 * t1799 + t1734 - t1737;
t2441 = -t239 * t1783 + t1666 - t1669;
t2444 = -t497 * t1787 + t1683 - t1686;
t2447 = -t752 * t1791 + t1700 - t1703;
t2460 = t11 * t223 * t232;
t2462 = t202 * t11 * t1838;
t2463 = t2460 - t2462;
t2467 = t293 * t481 * t490;
t2469 = t463 * t293 * t1878;
t2470 = t2467 - t2469;
t2474 = t1058 * t1246 * t1255;
t2476 = t1228 * t1058 * t1998;
t2477 = t2474 - t2476;
t2481 = t1313 * t1501 * t1510;
t2483 = t1483 * t1313 * t2038;
t2484 = t2481 - t2483;
t2488 = t548 * t736 * t745;
t2490 = t718 * t548 * t1918;
t2491 = t2488 - t2490;
t2495 = t803 * t991 * t1000;
t2497 = t973 * t803 * t1958;
t2498 = t2495 - t2497;
t2501 = t2438 * t2160 + t2441 * t2139 + t2444 * t2144 + t2447 * t2149 + 0.2e1 * t280 * t1643 + 0.2e1 * t1843 * t1664 + 0.2e1 * t535 * t1645 + 0.2e1 * t1883 * t1681 + 0.2e1 * t790 * t1647 + 0.2e1 * t2463 * t11 * t1664 + 0.2e1 * t2470 * t293 * t1681 + 0.2e1 * t2477 * t1058 * t1732 + 0.2e1 * t2484 * t1313 * t1749 + 0.2e1 * t2491 * t548 * t1698 + 0.2e1 * t2498 * t803 * t1715;
t2504 = t1257 * t2251;
t2508 = t234 * t2191;
t2512 = t492 * t2205;
t2516 = t747 * t2219;
t2520 = t1512 * t2265;
t2524 = t1002 * t2237;
t2534 = t2462 - 0.2e1 * t2460;
t2537 = t2469 - 0.2e1 * t2467;
t2540 = t2490 - 0.2e1 * t2488;
t2543 = t2483 - 0.2e1 * t2481;
t2546 = t2497 - 0.2e1 * t2495;
t2549 = t2476 - 0.2e1 * t2474;
t2551 = 0.2e1 * t2504 * t1290 * t1054 + 0.2e1 * t2508 * t270 * t7 + 0.2e1 * t2512 * t525 * t289 + 0.2e1 * t2516 * t780 * t544 + 0.2e1 * t2520 * t1545 * t1309 + 0.2e1 * t2524 * t1035 * t799 + t2194 * t2139 + t2208 * t2144 + t2222 * t2149 + t2240 * t2154 + t2254 * t2160 + t2268 * t2165 - t2534 * t1664 - t2537 * t1681 - t2540 * t1698 - t2543 * t1749 - t2546 * t1715 - t2549 * t1732;
t2552 = t2434 * qJ(3,4);
t2554 = t2438 * qJ(3,5);
t2556 = t2431 * qJ(3,6);
t2558 = t280 * qJ(3,1);
t2561 = t535 * qJ(3,2);
t2564 = t790 * qJ(3,3);
t2567 = t1045 * qJ(3,4);
t2570 = t1300 * qJ(3,5);
t2573 = t1555 * qJ(3,6);
t2576 = t2441 * qJ(3,1);
t2578 = t2444 * qJ(3,2);
t2580 = t2447 * qJ(3,3);
t2582 = t2552 * t2154 + t2554 * t2160 + t2556 * t2165 + t2558 * t1643 + t2323 * t1664 + t2561 * t1645 + t2332 * t1681 + t2564 * t1647 + t2342 * t1698 + t2567 * t1649 + t2351 * t1715 + t2570 * t1651 + t2360 * t1732 + t2573 * t1653 + t2369 * t1749 + t2576 * t2139 + t2578 * t2144 + t2580 * t2149;
t2584 = -t205 ^ 2;
t2587 = xDP(5) * t14 - xDP(4) * t89;
t2588 = -t2587 ^ 2;
t2589 = t2584 + t2588;
t2593 = -xDP(5) * t12 - xDP(4) * t87;
t2594 = -t2587 * t2593;
t2597 = -t205 * t2593 * t17;
t2598 = t19 ^ 2;
t2600 = xDP(5) * xDP(4);
t2601 = t2600 * t12 * t2598;
t2607 = -xDP(4) * (-t14 * t110 + t12 * t255) + xDP(5) * t145;
t2610 = t2594 * t87;
t2611 = -t2593 ^ 2;
t2612 = t2584 + t2611;
t2614 = -t2587 * t17;
t2617 = t2600 * t14 * t2598;
t2624 = xDP(4) * (-t12 * t110 - t14 * t255) + xDP(5) * t14 * xDP(6);
t2625 = t2624 * t17;
t2627 = -t2593 * t205;
t2629 = t2587 * t205;
t2630 = t2629 * t89;
t2631 = t2588 + t2611;
t2633 = -t2607 * t87;
t2643 = t1560 * t85;
t2648 = t9 * t1567;
t2651 = t1574 * t351;
t2656 = t291 * t1581;
t2659 = t1588 * t606;
t2664 = t546 * t1595;
t2667 = t1602 * t861;
t2672 = t801 * t1609;
t2675 = t1616 * t1116;
t2680 = t1056 * t1623;
t2683 = t1630 * t1371;
t2688 = t1311 * t1637;
t2697 = 0.2e1 * t1564 * t270 * t2643 + t1570 * t2648 * t1560 * t7 + 0.2e1 * t1578 * t525 * t2651 + t1584 * t2656 * t1574 * t289 + 0.2e1 * t1592 * t780 * t2659 + t1598 * t2664 * t1588 * t544 + 0.2e1 * t1606 * t1035 * t2667 + t1612 * t2672 * t1602 * t799 + 0.2e1 * t1620 * t1290 * t2675 + t1626 * t2680 * t1616 * t1054 + 0.2e1 * t1634 * t1545 * t2683 + t1640 * t2688 * t1630 * t1309 + t281 * t2139 + t536 * t2144 + t791 * t2149 + t1046 * t2154 + t1301 * t2160 + t1556 * t2165;
t2698 = t236 * t85;
t2704 = t494 * t351;
t2710 = t749 * t606;
t2716 = t1004 * t861;
t2722 = t1259 * t1116;
t2728 = t1514 * t1371;
t2734 = t11 * t85;
t2737 = t293 * t351;
t2740 = t548 * t606;
t2743 = t803 * t861;
t2746 = t1058 * t1116;
t2749 = t1313 * t1371;
t2752 = 0.2e1 * t1661 * t1560 * t2698 + t1670 * t202 * t1808 + 0.2e1 * t1678 * t1574 * t2704 + t1687 * t463 * t1848 + 0.2e1 * t1695 * t1588 * t2710 + t1704 * t718 * t1888 + 0.2e1 * t1712 * t1602 * t2716 + t1721 * t973 * t1928 + 0.2e1 * t1729 * t1616 * t2722 + t1738 * t1228 * t1968 + 0.2e1 * t1746 * t1630 * t2728 + t1755 * t1483 * t2008 + 0.2e1 * t1759 * t2734 + 0.2e1 * t1763 * t2737 + 0.2e1 * t1767 * t2740 + 0.2e1 * t1771 * t2743 + 0.2e1 * t1775 * t2746 + 0.2e1 * t1779 * t2749;
t2777 = t1785 * t86 + t1789 * t352 + t1793 * t607 + t1797 * t862 + t1801 * t1117 + t1805 * t1372 + t1843 * t2734 + t280 * t2106 * t1808 + t1883 * t2737 + t535 * t2114 * t1848 + t1923 * t2740 + t790 * t2122 * t1888 + t1963 * t2743 + t1045 * t2177 * t1928 + t2003 * t2746 + t1300 * t2169 * t1968 + t2043 * t2749 + t1555 * t2130 * t2008;
t2802 = -t1783 * t2643 - t1787 * t2651 - t1791 * t2659 - t1795 * t2667 - t1799 * t2675 - t1803 * t2683 + t2055 * t86 + t280 * t1567 * t1808 + t2059 * t352 + t535 * t1581 * t1848 + t2063 * t607 + t790 * t1595 * t1888 + t2067 * t862 + t1045 * t1609 * t1928 + t2071 * t1117 + t1300 * t1623 * t1968 + t2075 * t1372 + t1555 * t1637 * t2008;
t2803 = t202 * t1843;
t2805 = t463 * t1883;
t2807 = t718 * t1923;
t2809 = t973 * t1963;
t2811 = t1228 * t2003;
t2813 = t1483 * t2043;
t2816 = -t1228 * t1054;
t2819 = -t1483 * t1309;
t2822 = -t202 * t7;
t2825 = -t463 * t289;
t2828 = -t718 * t544;
t2831 = -t973 * t799;
t2858 = -t2099 * t1626 * t2816 + t2087 * t1640 * t2819 - t2102 * t1570 * t2822 + t2090 * t1584 * t2825 - t2093 * t1598 * t2828 + t2096 * t1612 * t2831 + 0.2e1 * t2180 * t2716 + 0.2e1 * t2172 * t2722 + 0.2e1 * t2125 * t2710 + 0.2e1 * t2109 * t2698 + 0.2e1 * t2117 * t2704 + 0.2e1 * t2133 * t2728 - t1883 * t2198 + 0.2e1 * t718 * t790 * t606 - t1923 * t2212 + 0.2e1 * t973 * t1045 * t861 - t1963 * t2230 + 0.2e1 * t1228 * t1300 * t1116;
t2875 = t2254 * t1228;
t2877 = t2268 * t1483;
t2879 = t2194 * t202;
t2881 = t2208 * t463;
t2883 = t2222 * t718;
t2885 = t2240 * t973;
t2895 = -t2003 * t2244 + 0.2e1 * t1483 * t1555 * t1371 - t2043 * t2258 + 0.2e1 * t202 * t280 * t85 - t1843 * t2184 + 0.2e1 * t463 * t535 * t351 + t1999 * t1626 * t1054 + t2039 * t1640 * t1309 - t2875 * t1968 - t2877 * t2008 - t2879 * t1808 - t2881 * t1848 - t2883 * t1888 - t2885 * t1928 + t1839 * t1570 * t7 + t1879 * t1584 * t289 + t1919 * t1598 * t544 + t1959 * t1612 * t799;
t2913 = -t280 * t1567 * t7 - t535 * t1581 * t289 - t280 * t7 * t235 - t535 * t289 * t493 + t2314 * t1117 - t2321 * t1372 + t2286 * t86 - t2293 * t352 + t2300 * t607 - t2307 * t862 + t2327 * t86 + t2336 * t352;
t2934 = -t1045 * t799 * t1003 - t1045 * t1609 * t799 - t1300 * t1054 * t1258 - t1300 * t1623 * t1054 - t1555 * t1309 * t1513 - t1555 * t1637 * t1309 - t790 * t1595 * t544 - t790 * t544 * t748 + t2364 * t1117 + t2373 * t1372 + t2346 * t607 + t2355 * t862;
t2967 = 0.2e1 * t2383 * t239 * t85 + 0.2e1 * t2389 * t497 * t351 + 0.2e1 * t2395 * t752 * t606 + 0.2e1 * t2401 * t1007 * t861 + 0.2e1 * t2413 * t1262 * t1116 + 0.2e1 * t2407 * t1517 * t1371 + t2441 * t2184 + t2444 * t2198 + t2447 * t2212 + t2434 * t2230 + t2431 * t2258 + 0.2e1 * t280 * t2139 + 0.2e1 * t1843 * t2822 + 0.2e1 * t535 * t2144 + 0.2e1 * t1883 * t2825;
t2997 = 0.2e1 * t790 * t2149 + 0.2e1 * t1923 * t2828 + 0.2e1 * t1045 * t2154 + 0.2e1 * t1963 * t2831 + 0.2e1 * t1300 * t2160 + 0.2e1 * t2003 * t2816 + 0.2e1 * t1555 * t2165 + 0.2e1 * t2043 * t2819 + t2438 * t2244 + 0.2e1 * t2463 * t202 * t1808 + 0.2e1 * t2484 * t1483 * t2008 + 0.2e1 * t2477 * t1228 * t1968 + 0.2e1 * t2470 * t463 * t1848 + 0.2e1 * t2491 * t718 * t1888 + 0.2e1 * t2498 * t973 * t1928;
t3029 = 0.2e1 * t2504 * t1290 * t1116 + 0.2e1 * t2520 * t1545 * t1371 + 0.2e1 * t2516 * t780 * t606 + 0.2e1 * t2524 * t1035 * t861 + 0.2e1 * t2512 * t525 * t351 + 0.2e1 * t2508 * t270 * t85 - t2549 * t2816 - t2540 * t2828 - t2546 * t2831 - t2537 * t2825 - t2534 * t2822 - t2543 * t2819 + t2268 * t2258 + t2194 * t2184 + t2208 * t2198 + t2222 * t2212 + t2240 * t2230 + t2254 * t2244;
t3054 = t2580 * t2212 + t2576 * t2184 + t2578 * t2198 + t2552 * t2230 + t2554 * t2244 - t2809 * t799 * qJ(3,4) + t2570 * t2160 - t2811 * t1054 * qJ(3,5) + t2573 * t2165 - t2813 * t1309 * qJ(3,6) + t2556 * t2258 + t2558 * t2139 - t2803 * t7 * qJ(3,1) + t2561 * t2144 - t2805 * t289 * qJ(3,2) + t2564 * t2149 - t2807 * t544 * qJ(3,3) + t2567 * t2154;
t3056 = t17 * t24;
t3059 = t12 * t22 + t14 * t3056;
t3063 = -t12 * t3056 + t14 * t22;
t3064 = t2593 * t3063;
t3066 = t19 * t24;
t3067 = t2627 * t3066;
t3069 = t212 * xDP(5) * t3063;
t3073 = -t2593 * t2587 * t3059;
t3077 = t212 * xDP(5) * t3059;
t3078 = t2624 * t3066;
t3080 = -t205 * t3059;
t3083 = t2587 * t205 * t3063;
t3085 = -t2607 * t3059;
t3137 = t239 * t1570;
t3141 = t497 * t1584;
t3145 = t752 * t1598;
t3149 = t1007 * t1612;
t3153 = t1262 * t1626;
t3157 = t1517 * t1640;
t3159 = -t1711 * t1007 * t1958 - t1728 * t1262 * t1998 - t1745 * t1517 * t2038 - t1660 * t239 * t1838 - t1677 * t497 * t1878 - t1694 * t752 * t1918 + t3137 * t2648 + t3141 * t2656 + t3145 * t2664 + t3149 * t2672 + t3153 * t2680 + t3157 * t2688;
t3166 = -t2194 * t1811 - t2208 * t1851 - t2222 * t1891 - t2240 * t1931 - t2254 * t1971 - t2268 * t2011 + t2803 + t2805 + t2807 + t2809 + t2811 + t2813;
t3192 = 0.2e1 * t2463 * t1811 - t2441 * t202 + 0.2e1 * t2470 * t1851 - t2444 * t463 + 0.2e1 * t2491 * t1891 - t2447 * t718 + 0.2e1 * t2498 * t1931 - t2434 * t973 + 0.2e1 * t2477 * t1971 - t2438 * t1228 + 0.2e1 * t2484 * t2011 - t2431 * t1483 + 0.2e1 * t8 * t1843 + 0.2e1 * t290 * t1883 + 0.2e1 * t545 * t1923 + 0.2e1 * t800 * t1963 + 0.2e1 * t1055 * t2003 + 0.2e1 * t1310 * t2043;
t3211 = -t2434 * qJ(3,4) * t973 - t2438 * qJ(3,5) * t1228 - t2431 * qJ(3,6) * t1483 - t2441 * qJ(3,1) * t202 - t2444 * qJ(3,2) * t463 - t2447 * qJ(3,3) * t718 - t2549 * t1055 - t2543 * t1310 - t2534 * t8 - t2537 * t290 - t2540 * t545 - t2546 * t800;
t3212 = t8 * qJ(3,1);
t3214 = t290 * qJ(3,2);
t3216 = t545 * qJ(3,3);
t3218 = t800 * qJ(3,4);
t3220 = t1055 * qJ(3,5);
t3222 = t1310 * qJ(3,6);
t3224 = t1843 * t3212 + t1883 * t3214 + t1923 * t3216 + t1963 * t3218 + t2003 * t3220 + t2043 * t3222 - t2875 - t2877 - t2879 - t2881 - t2883 - t2885;
t3226 = t17 * t22;
t3229 = t12 * t24 - t14 * t3226;
t3233 = t12 * t3226 + t14 * t24;
t3234 = t2593 * t3233;
t3236 = t19 * t22;
t3237 = t2627 * t3236;
t3239 = t212 * xDP(5) * t3233;
t3243 = -t2593 * t2587 * t3229;
t3247 = t212 * xDP(5) * t3229;
t3248 = t2624 * t3236;
t3250 = -t205 * t3229;
t3253 = t2587 * t205 * t3233;
t3255 = -t2607 * t3229;
t3258 = t17 * t14;
t3260 = -koppelP(1,1) * t3258 + t20 + t249;
t3262 = t22 * t3260 + t28;
t3263 = t3262 * t85;
t3264 = t280 * t2191;
t3267 = -koppelP(2,1) * t3258 + t298 + t506;
t3269 = t22 * t3267 + t304;
t3270 = t3269 * t351;
t3271 = t535 * t2205;
t3274 = -koppelP(3,1) * t3258 + t553 + t761;
t3276 = t22 * t3274 + t559;
t3277 = t3276 * t606;
t3278 = t790 * t2219;
t3281 = -koppelP(4,1) * t3258 + t1016 + t808;
t3283 = t22 * t3281 + t814;
t3284 = t3283 * t861;
t3285 = t1045 * t2237;
t3288 = -koppelP(5,1) * t3258 + t1063 + t1271;
t3290 = t22 * t3288 + t1069;
t3291 = t3290 * t1116;
t3292 = t1300 * t2251;
t3295 = -koppelP(6,1) * t3258 + t1318 + t1526;
t3297 = t22 * t3295 + t1324;
t3298 = t1371 * t3297;
t3299 = t1555 * t2265;
t3303 = t224 * t277;
t3306 = -t7 * t3262;
t3309 = -t3260 * t24 + t33;
t3311 = -t202 * t3306 + t8 * t3309;
t3313 = t202 * t1838;
t3316 = t482 * t532;
t3319 = -t289 * t3269;
t3322 = -t3267 * t24 + t309;
t3324 = t290 * t3322 - t463 * t3319;
t3326 = t463 * t1878;
t3329 = t737 * t787;
t3332 = -t544 * t3276;
t3335 = -t3274 * t24 + t564;
t3337 = -t718 * t3332 + t545 * t3335;
t3339 = t718 * t1918;
t3342 = t992 * t1042;
t3345 = -t799 * t3283;
t3348 = -t3281 * t24 + t819;
t3350 = -t973 * t3345 + t800 * t3348;
t3352 = t973 * t1958;
t3355 = t1247 * t1297;
t3358 = -t3290 * t1054;
t3361 = -t3288 * t24 + t1074;
t3363 = t1055 * t3361 - t1228 * t3358;
t3365 = t1228 * t1998;
t3368 = t1502 * t1552;
t3371 = -t3297 * t1309;
t3374 = -t3295 * t24 + t1329;
t3376 = t1310 * t3374 - t1483 * t3371;
t3378 = t1483 * t2038;
t3386 = -0.2e1 * t3303 * t1560 * t3263 - t3313 * t1560 * t3311 - 0.2e1 * t3316 * t1574 * t3270 - t3326 * t1574 * t3324 - 0.2e1 * t3329 * t1588 * t3277 - t3339 * t1588 * t3337 - 0.2e1 * t3342 * t1602 * t3284 - t3352 * t1602 * t3350 - 0.2e1 * t3355 * t1616 * t3291 - t3365 * t1616 * t3363 - 0.2e1 * t3368 * t1630 * t3298 - t3378 * t1630 * t3376 - t1845 * t3263 - t1885 * t3270 - t1925 * t3277 - t1965 * t3284 - t2005 * t3291 - t2045 * t3298;
t3387 = t236 * t3263;
t3390 = t1660 * t223 * t270 * t1560;
t3393 = t11 * t3311;
t3395 = t494 * t3270;
t3398 = t1677 * t481 * t525 * t1574;
t3401 = t293 * t3324;
t3403 = t749 * t3277;
t3406 = t1694 * t736 * t780 * t1588;
t3409 = t548 * t3337;
t3411 = t1004 * t3284;
t3414 = t1711 * t991 * t1035 * t1602;
t3417 = t803 * t3350;
t3419 = t1259 * t3291;
t3422 = t1728 * t1246 * t1290 * t1616;
t3425 = t1058 * t3363;
t3427 = t1514 * t3298;
t3430 = t1745 * t1501 * t1545 * t1630;
t3433 = t1313 * t3376;
t3435 = t202 * t281;
t3438 = t463 * t536;
t3441 = t718 * t791;
t3444 = t973 * t1046;
t3447 = t1228 * t1301;
t3450 = t1483 * t1556;
t3453 = -0.2e1 * t3390 * t3387 + t1670 * t3393 - 0.2e1 * t3398 * t3395 + t1687 * t3401 - 0.2e1 * t3406 * t3403 + t1704 * t3409 - 0.2e1 * t3414 * t3411 + t1721 * t3417 - 0.2e1 * t3422 * t3419 + t1738 * t3425 - 0.2e1 * t3430 * t3427 + t1755 * t3433 - 0.2e1 * t3435 * t3263 - 0.2e1 * t3438 * t3270 - 0.2e1 * t3441 * t3277 - 0.2e1 * t3444 * t3284 - 0.2e1 * t3447 * t3291 - 0.2e1 * t3450 * t3298;
t3454 = t9 * t3263;
t3456 = t291 * t3270;
t3458 = t546 * t3277;
t3460 = t801 * t3284;
t3462 = t1056 * t3291;
t3464 = t1311 * t3298;
t3467 = t280 * t8;
t3470 = t535 * t290;
t3473 = t790 * t545;
t3476 = t1045 * t800;
t3479 = t1300 * t1055;
t3482 = t1555 * t1310;
t3484 = -t1785 * t3454 - t1789 * t3456 - t1793 * t3458 - t1797 * t3460 - t1801 * t3462 - t1805 * t3464 - t2054 * t3263 + t3467 * t3393 - t2058 * t3270 + t3470 * t3401 - t2062 * t3277 + t3473 * t3409 - t2066 * t3284 + t3476 * t3417 - t2070 * t3291 + t3479 * t3425 - t2074 * t3298 + t3482 * t3433;
t3503 = t1784 * t3263 + t1788 * t3270 + t1792 * t3277 + t1796 * t3284 + t1800 * t3291 + t1804 * t3298 - t2055 * t3454 + t1759 * t3393 - t2059 * t3456 + t1763 * t3401 - t2063 * t3458 + t1767 * t3409 - t2067 * t3460 + t1771 * t3417 - t2071 * t3462 + t1775 * t3425 - t2075 * t3464 + t1779 * t3433;
t3513 = -t3309 * t202 - t8 * t3306;
t3517 = -t290 * t3319 - t3322 * t463;
t3521 = -t545 * t3332 - t3335 * t718;
t3525 = -t800 * t3345 - t3348 * t973;
t3529 = -t1055 * t3358 - t3361 * t1228;
t3533 = -t1310 * t3371 - t3374 * t1483;
t3556 = t202 * t3137;
t3559 = t463 * t3141;
t3561 = -t1843 * t3513 - t1883 * t3517 - t1923 * t3521 - t1963 * t3525 - t2003 * t3529 - t2043 * t3533 - 0.2e1 * t2109 * t3387 - 0.2e1 * t2117 * t3395 - 0.2e1 * t2125 * t3403 - 0.2e1 * t2180 * t3411 - 0.2e1 * t2172 * t3419 - 0.2e1 * t2133 * t3427 - t2093 * t1598 * t3337 + t2096 * t1612 * t3350 - t2102 * t1570 * t3311 + t2090 * t1584 * t3324 - t3556 * t9 * t3513 - t3559 * t291 * t3517;
t3563 = t718 * t3145;
t3570 = t973 * t3149;
t3573 = t1228 * t3153;
t3576 = t1483 * t3157;
t3596 = -t3563 * t546 * t3521 - t2099 * t1626 * t3363 + t2087 * t1640 * t3376 - t3570 * t801 * t3525 - t3573 * t1056 * t3529 - t3576 * t1311 * t3533 - t2268 * t3433 - t2194 * t3393 - t2208 * t3401 - t2222 * t3409 - t2240 * t3417 - t2254 * t3425 - 0.2e1 * t1759 * t3263 - 0.2e1 * t1763 * t3270 - 0.2e1 * t1767 * t3277 - 0.2e1 * t1771 * t3284 - 0.2e1 * t1775 * t3291 - 0.2e1 * t1779 * t3298;
t3604 = t2326 * t2191;
t3610 = t2335 * t2205;
t3616 = t280 * t202 * t3311 + t280 * t8 * t3513 + t535 * t290 * t3517 + t535 * t463 * t3324 - t2286 * t3454 + t2293 * t3456 - t2300 * t3458 + t2307 * t3460 - t2314 * t3462 + t2321 * t3464 - t3604 * t3263 - t3610 * t3270;
t3617 = t2345 * t2219;
t3623 = t2354 * t2237;
t3629 = t2363 * t2251;
t3635 = t2372 * t2265;
t3641 = t1045 * t973 * t3350 + t1045 * t800 * t3525 + t1300 * t1055 * t3529 + t1300 * t1228 * t3363 + t1555 * t1310 * t3533 + t1555 * t1483 * t3376 + t790 * t718 * t3337 + t790 * t545 * t3521 - t3617 * t3277 - t3623 * t3284 - t3629 * t3291 - t3635 * t3298;
t3670 = 0.2e1 * t1843 * t3311 + 0.2e1 * t1883 * t3324 + 0.2e1 * t1923 * t3337 + 0.2e1 * t1963 * t3350 + 0.2e1 * t2003 * t3363 + 0.2e1 * t2043 * t3376 + t2441 * t3513 + t2444 * t3517 + t2447 * t3521 + t2434 * t3525 + t2438 * t3529 + t2431 * t3533 - 0.2e1 * t2383 * t239 * t3263 - 0.2e1 * t2389 * t497 * t3270 - 0.2e1 * t2395 * t752 * t3277;
t3698 = -0.2e1 * t2401 * t1007 * t3284 - 0.2e1 * t2413 * t1262 * t3291 - 0.2e1 * t2407 * t1517 * t3298 + 0.2e1 * t2463 * t3393 + 0.2e1 * t2470 * t3401 + 0.2e1 * t2477 * t3425 + 0.2e1 * t2484 * t3433 + 0.2e1 * t2491 * t3409 + 0.2e1 * t2498 * t3417 - 0.2e1 * t3467 * t3263 - 0.2e1 * t3470 * t3270 - 0.2e1 * t3473 * t3277 - 0.2e1 * t3476 * t3284 - 0.2e1 * t3479 * t3291 - 0.2e1 * t3482 * t3298;
t3730 = -t2540 * t3337 - t2546 * t3350 - t2534 * t3311 - t2537 * t3324 - t2549 * t3363 - t2543 * t3376 + t2194 * t3513 + t2208 * t3517 + t2222 * t3521 + t2240 * t3525 + t2254 * t3529 + t2268 * t3533 - 0.2e1 * t2508 * t270 * t3263 - 0.2e1 * t2512 * t525 * t3270 - 0.2e1 * t2516 * t780 * t3277 - 0.2e1 * t2524 * t1035 * t3284 - 0.2e1 * t2504 * t1290 * t3291 - 0.2e1 * t2520 * t1545 * t3298;
t3731 = t280 * t3212;
t3733 = t535 * t3214;
t3735 = t790 * t3216;
t3737 = t1045 * t3218;
t3739 = t1300 * t3220;
t3741 = t1555 * t3222;
t3767 = -t3731 * t3263 - t3733 * t3270 - t3735 * t3277 - t3737 * t3284 - t3739 * t3291 - t3741 * t3298 + t2441 * qJ(3,1) * t3513 + t2447 * qJ(3,3) * t3521 + t2434 * qJ(3,4) * t3525 + t1843 * qJ(3,1) * t3311 + t1883 * qJ(3,2) * t3324 + t1923 * qJ(3,3) * t3337 + t1963 * qJ(3,4) * t3350 + t2003 * qJ(3,5) * t3363 + t2043 * qJ(3,6) * t3376 + t2444 * qJ(3,2) * t3517 + t2438 * qJ(3,5) * t3529 + t2431 * qJ(3,6) * t3533;
t3773 = t2593 * t205;
t3775 = t2593 ^ 2;
t3776 = t2588 + t3775;
t3780 = t205 ^ 2;
t3781 = t3780 + t2611;
t3785 = -t2587 * t205;
t3791 = t2587 ^ 2;
t3792 = t2584 + t3791;
t3794 = t2587 * t2593;
t3814 = t202 * t3263 - t91 * t8;
t3822 = -t355 * t290 + t463 * t3270;
t3830 = t718 * t3277 - t610 * t545;
t3838 = t973 * t3284 - t865 * t800;
t3846 = -t1120 * t1055 + t1228 * t3291;
t3854 = -t1375 * t1310 + t1483 * t3298;
t3863 = -0.2e1 * t3303 * t1560 * t3306 - t3313 * t1560 * t3814 - 0.2e1 * t3316 * t1574 * t3319 - t3326 * t1574 * t3822 - 0.2e1 * t3329 * t1588 * t3332 - t3339 * t1588 * t3830 - 0.2e1 * t3342 * t1602 * t3345 - t3352 * t1602 * t3838 - 0.2e1 * t3355 * t1616 * t3358 - t3365 * t1616 * t3846 - 0.2e1 * t3368 * t1630 * t3371 - t3378 * t1630 * t3854 - t1845 * t3306 - t1885 * t3319 - t1925 * t3332 - t1965 * t3345 - t2005 * t3358 - t2045 * t3371;
t3864 = t236 * t3306;
t3867 = t11 * t3814;
t3869 = t494 * t3319;
t3872 = t293 * t3822;
t3874 = t749 * t3332;
t3877 = t548 * t3830;
t3879 = t1004 * t3345;
t3882 = t803 * t3838;
t3884 = t1259 * t3358;
t3887 = t1058 * t3846;
t3889 = t1514 * t3371;
t3892 = t1313 * t3854;
t3906 = -0.2e1 * t3390 * t3864 + t1670 * t3867 - 0.2e1 * t3398 * t3869 + t1687 * t3872 - 0.2e1 * t3406 * t3874 + t1704 * t3877 - 0.2e1 * t3414 * t3879 + t1721 * t3882 - 0.2e1 * t3422 * t3884 + t1738 * t3887 - 0.2e1 * t3430 * t3889 + t1755 * t3892 - 0.2e1 * t3435 * t3306 - 0.2e1 * t3438 * t3319 - 0.2e1 * t3441 * t3332 - 0.2e1 * t3444 * t3345 - 0.2e1 * t3447 * t3358 - 0.2e1 * t3450 * t3371;
t3907 = t9 * t3306;
t3909 = t291 * t3319;
t3911 = t546 * t3332;
t3913 = t801 * t3345;
t3915 = t1056 * t3358;
t3917 = t1311 * t3371;
t3931 = -t1785 * t3907 - t1789 * t3909 - t1793 * t3911 - t1797 * t3913 - t1801 * t3915 - t1805 * t3917 - t2054 * t3306 + t3467 * t3867 - t2058 * t3319 + t3470 * t3872 - t2062 * t3332 + t3473 * t3877 - t2066 * t3345 + t3476 * t3882 - t2070 * t3358 + t3479 * t3887 - t2074 * t3371 + t3482 * t3892;
t3950 = t1784 * t3306 + t1788 * t3319 + t1792 * t3332 + t1796 * t3345 + t1800 * t3358 + t1804 * t3371 - t2055 * t3907 + t1759 * t3867 - t2059 * t3909 + t1763 * t3872 - t2063 * t3911 + t1767 * t3877 - t2067 * t3913 + t1771 * t3882 - t2071 * t3915 + t1775 * t3887 - t2075 * t3917 + t1779 * t3892;
t3961 = t8 * t3262 * t85 + t91 * t202;
t3966 = t290 * t3269 * t351 + t355 * t463;
t3971 = t545 * t3276 * t606 + t610 * t718;
t3976 = t800 * t3283 * t861 + t865 * t973;
t3981 = t1055 * t3290 * t1116 + t1120 * t1228;
t3986 = t1310 * t1371 * t3297 + t1375 * t1483;
t4009 = -t1843 * t3961 - t1883 * t3966 - t1923 * t3971 - t1963 * t3976 - t2003 * t3981 - t2043 * t3986 - 0.2e1 * t2133 * t3889 - 0.2e1 * t2125 * t3874 - 0.2e1 * t2180 * t3879 - 0.2e1 * t2172 * t3884 - 0.2e1 * t2109 * t3864 - 0.2e1 * t2117 * t3869 - t2240 * t3882 - t2254 * t3887 - t2268 * t3892 - t2099 * t1626 * t3846 + t2087 * t1640 * t3854 + t2096 * t1612 * t3838;
t4043 = -t2093 * t1598 * t3830 + t2090 * t1584 * t3822 - t3576 * t1311 * t3986 - t3563 * t546 * t3971 - t3570 * t801 * t3976 - t3573 * t1056 * t3981 - t3556 * t9 * t3961 - t3559 * t291 * t3966 - t2102 * t1570 * t3814 - t2194 * t3867 - t2208 * t3872 - t2222 * t3877 - 0.2e1 * t1759 * t3306 - 0.2e1 * t1763 * t3319 - 0.2e1 * t1767 * t3332 - 0.2e1 * t1771 * t3345 - 0.2e1 * t1775 * t3358 - 0.2e1 * t1779 * t3371;
t4061 = t280 * t202 * t3814 + t280 * t8 * t3961 + t535 * t290 * t3966 + t535 * t463 * t3822 - t2286 * t3907 + t2293 * t3909 - t2300 * t3911 + t2307 * t3913 - t2314 * t3915 + t2321 * t3917 - t3604 * t3306 - t3610 * t3319;
t4082 = t1045 * t973 * t3838 + t1045 * t800 * t3976 + t1300 * t1055 * t3981 + t1300 * t1228 * t3846 + t1555 * t1310 * t3986 + t1555 * t1483 * t3854 + t790 * t718 * t3830 + t790 * t545 * t3971 - t3617 * t3332 - t3623 * t3345 - t3629 * t3358 - t3635 * t3371;
t4111 = 0.2e1 * t1843 * t3814 + 0.2e1 * t1883 * t3822 + 0.2e1 * t1923 * t3830 + 0.2e1 * t1963 * t3838 + 0.2e1 * t2003 * t3846 + 0.2e1 * t2043 * t3854 + t2434 * t3976 + t2438 * t3981 + t2431 * t3986 + t2441 * t3961 + t2444 * t3966 + t2447 * t3971 - 0.2e1 * t2407 * t1517 * t3371 - 0.2e1 * t2395 * t752 * t3332 - 0.2e1 * t2401 * t1007 * t3345;
t4139 = -0.2e1 * t2413 * t1262 * t3358 - 0.2e1 * t2383 * t239 * t3306 - 0.2e1 * t2389 * t497 * t3319 + 0.2e1 * t2463 * t3867 + 0.2e1 * t2470 * t3872 + 0.2e1 * t2477 * t3887 + 0.2e1 * t2484 * t3892 + 0.2e1 * t2491 * t3877 + 0.2e1 * t2498 * t3882 - 0.2e1 * t3467 * t3306 - 0.2e1 * t3470 * t3319 - 0.2e1 * t3473 * t3332 - 0.2e1 * t3476 * t3345 - 0.2e1 * t3479 * t3358 - 0.2e1 * t3482 * t3371;
t4171 = t2208 * t3966 + t2222 * t3971 + t2240 * t3976 + t2254 * t3981 + t2268 * t3986 + t2194 * t3961 - t2549 * t3846 - t2543 * t3854 - t2540 * t3830 - t2546 * t3838 - t2534 * t3814 - t2537 * t3822 - 0.2e1 * t2520 * t1545 * t3371 - 0.2e1 * t2516 * t780 * t3332 - 0.2e1 * t2524 * t1035 * t3345 - 0.2e1 * t2504 * t1290 * t3358 - 0.2e1 * t2508 * t270 * t3306 - 0.2e1 * t2512 * t525 * t3319;
t4202 = t1923 * qJ(3,3) * t3830 + t1963 * qJ(3,4) * t3838 + t2003 * qJ(3,5) * t3846 + t2043 * qJ(3,6) * t3854 + t1843 * qJ(3,1) * t3814 + t1883 * qJ(3,2) * t3822 + t2431 * qJ(3,6) * t3986 + t2434 * qJ(3,4) * t3976 + t2438 * qJ(3,5) * t3981 + t2447 * qJ(3,3) * t3971 + t2441 * qJ(3,1) * t3961 + t2444 * qJ(3,2) * t3966 - t3731 * t3306 - t3733 * t3319 - t3735 * t3332 - t3737 * t3345 - t3739 * t3358 - t3741 * t3371;
t4231 = t19 * koppelP(1,3) * t24;
t4234 = t22 * koppelP(1,2) + koppelP(1,1) * t3056;
t4238 = (-koppelP(1,2) * t3056 + t241) * t12;
t4239 = t14 * t4234 - t4231 + t4238;
t4244 = -t2191 * t7 * t4239 + t2191 * t85 * t91;
t4247 = t19 * koppelP(2,3) * t24;
t4250 = koppelP(2,2) * t22 + koppelP(2,1) * t3056;
t4255 = (-t24 * koppelP(2,2) * t17 + t499) * t12;
t4256 = t14 * t4250 - t4247 + t4255;
t4261 = -t2205 * t289 * t4256 + t2205 * t351 * t355;
t4264 = t19 * koppelP(3,3) * t24;
t4267 = koppelP(3,2) * t22 + koppelP(3,1) * t3056;
t4272 = (-t24 * koppelP(3,2) * t17 + t754) * t12;
t4273 = t14 * t4267 - t4264 + t4272;
t4278 = -t2219 * t544 * t4273 + t2219 * t606 * t610;
t4281 = t19 * koppelP(4,3) * t24;
t4284 = koppelP(4,2) * t22 + koppelP(4,1) * t3056;
t4289 = (-t24 * koppelP(4,2) * t17 + t1009) * t12;
t4290 = t14 * t4284 - t4281 + t4289;
t4295 = -t2237 * t799 * t4290 + t2237 * t861 * t865;
t4298 = t19 * koppelP(5,3) * t24;
t4301 = koppelP(5,2) * t22 + koppelP(5,1) * t3056;
t4306 = (-t24 * koppelP(5,2) * t17 + t1264) * t12;
t4307 = t14 * t4301 - t4298 + t4306;
t4312 = -t2251 * t1054 * t4307 + t2251 * t1116 * t1120;
t4315 = t19 * koppelP(6,3) * t24;
t4318 = koppelP(6,2) * t22 + koppelP(6,1) * t3056;
t4323 = (-t24 * koppelP(6,2) * t17 + t1519) * t12;
t4324 = t14 * t4318 - t4315 + t4323;
t4329 = -t2265 * t1309 * t4324 + t2265 * t1371 * t1375;
t4332 = t270 * t4244;
t4340 = t2822 * t11 * t91 - t2734 * t4239 * t202;
t4343 = t525 * t4261;
t4351 = -t2737 * t4256 * t463 + t2825 * t293 * t355;
t4354 = t780 * t4278;
t4362 = -t2740 * t4273 * t718 + t2828 * t548 * t610;
t4365 = t1035 * t4295;
t4373 = -t2743 * t4290 * t973 + t2831 * t803 * t865;
t4376 = t1290 * t4312;
t4384 = t2816 * t1058 * t1120 - t2746 * t4307 * t1228;
t4387 = t1545 * t4329;
t4395 = t2819 * t1313 * t1375 - t2749 * t4324 * t1483;
t4398 = t235 * t4244;
t4400 = t493 * t4261;
t4402 = t748 * t4278;
t4404 = t1003 * t4295;
t4406 = t1258 * t4312;
t4408 = t1513 * t4329;
t4410 = 0.2e1 * t202 * t2281 * t4332 - t3556 * t9 * t4340 + 0.2e1 * t463 * t2288 * t4343 - t3559 * t291 * t4351 + 0.2e1 * t718 * t2295 * t4354 - t3563 * t546 * t4362 + 0.2e1 * t973 * t2302 * t4365 - t3570 * t801 * t4373 + 0.2e1 * t1228 * t2309 * t4376 - t3573 * t1056 * t4384 + 0.2e1 * t1483 * t2316 * t4387 - t3576 * t1311 * t4395 + t280 * t4398 + t535 * t4400 + t790 * t4402 + t1045 * t4404 + t1300 * t4406 + t1555 * t4408;
t4441 = t8 * t4244;
t4444 = t290 * t4261;
t4447 = t545 * t4278;
t4450 = t800 * t4295;
t4453 = t1055 * t4312;
t4456 = t1310 * t4329;
t4459 = 0.2e1 * t1660 * t2281 * t9 * t4332 + t1670 * t4340 + 0.2e1 * t1677 * t2288 * t291 * t4343 + t1687 * t4351 + 0.2e1 * t1694 * t2295 * t546 * t4354 + t1704 * t4362 + 0.2e1 * t1711 * t2302 * t801 * t4365 + t1721 * t4373 + 0.2e1 * t1728 * t2309 * t1056 * t4376 + t1738 * t4384 + 0.2e1 * t1745 * t2316 * t1311 * t4387 + t1755 * t4395 + 0.2e1 * t1759 * t4441 + 0.2e1 * t1763 * t4444 + 0.2e1 * t1767 * t4447 + 0.2e1 * t1771 * t4450 + 0.2e1 * t1775 * t4453 + 0.2e1 * t1779 * t4456;
t4460 = t1783 * t4244;
t4462 = t1787 * t4261;
t4464 = t1791 * t4278;
t4466 = t1795 * t4295;
t4468 = t1799 * t4312;
t4470 = t1803 * t4329;
t4472 = t1843 * t4244;
t4476 = t1883 * t4261;
t4480 = t1923 * t4278;
t4484 = t1963 * t4295;
t4488 = t2003 * t4312;
t4492 = t2043 * t4329;
t4496 = t1839 * t4460 + t1879 * t4462 + t1919 * t4464 + t1959 * t4466 + t1999 * t4468 + t2039 * t4470 + t8 * t4472 + t280 * t8 * t4340 + t290 * t4476 + t535 * t290 * t4351 + t545 * t4480 + t790 * t545 * t4362 + t800 * t4484 + t1045 * t800 * t4373 + t1055 * t4488 + t1300 * t1055 * t4384 + t1310 * t4492 + t1555 * t1310 * t4395;
t4527 = -t8 * t239 * t4460 - t290 * t497 * t4462 - t545 * t752 * t4464 - t800 * t1007 * t4466 - t1055 * t1262 * t4468 - t1310 * t1517 * t4470 + t202 * t4472 + t280 * t202 * t4340 + t463 * t4476 + t535 * t463 * t4351 + t718 * t4480 + t790 * t718 * t4362 + t973 * t4484 + t1045 * t973 * t4373 + t1228 * t4488 + t1300 * t1228 * t4384 + t1483 * t4492 + t1555 * t1483 * t4395;
t4545 = -t296 * t19 + t325;
t4553 = t287 * (t284 * (-t14 * t4250 + t4247 - t4255) + t4545 * t286) + t283 * (t284 * t4545 + t4256 * t286);
t4554 = t290 * t4553;
t4560 = -t551 * t19 + t580;
t4568 = t542 * (t539 * (-t14 * t4267 + t4264 - t4272) + t4560 * t541) + t538 * (t4273 * t541 + t539 * t4560);
t4569 = t545 * t4568;
t4575 = -t806 * t19 + t835;
t4583 = t797 * (t794 * (-t14 * t4284 + t4281 - t4289) + t4575 * t796) + t793 * (t4290 * t796 + t794 * t4575);
t4584 = t800 * t4583;
t4590 = -t1061 * t19 + t1090;
t4598 = t1052 * (t1049 * (-t14 * t4301 + t4298 - t4306) + t4590 * t1051) + t1048 * (t1049 * t4590 + t4307 * t1051);
t4599 = t1055 * t4598;
t4605 = -t1316 * t19 + t1345;
t4613 = t1307 * (t1304 * (-t14 * t4318 + t4315 - t4323) + t4605 * t1306) + t1303 * (t1304 * t4605 + t4324 * t1306);
t4614 = t1310 * t4613;
t4620 = -t16 * t19 + t59;
t4628 = t5 * (t2 * (-t14 * t4234 + t4231 - t4238) + t4620 * t4) + t1 * (t2 * t4620 + t4239 * t4);
t4629 = t8 * t4628;
t4649 = -t2194 * t4340 - t2208 * t4351 - t2222 * t4362 - t2240 * t4373 - t2254 * t4384 - t2268 * t4395 - t1883 * t4554 - t1923 * t4569 - t1963 * t4584 - t2003 * t4599 - t2043 * t4614 - t1843 * t4629 + 0.2e1 * t1228 * t2570 * t4453 + 0.2e1 * t1483 * t2573 * t4456 + 0.2e1 * t2132 * t2265 * t4387 + 0.2e1 * t2171 * t2251 * t4376 + 0.2e1 * t2179 * t2237 * t4365 + 0.2e1 * t2124 * t2219 * t4354;
t4704 = 0.2e1 * t2116 * t2205 * t4343 - t1745 * t1313 * t1514 * t1640 * t4395 - t1677 * t293 * t494 * t1584 * t4351 - t1694 * t548 * t749 * t1598 * t4362 - t1711 * t803 * t1004 * t1612 * t4373 - t1728 * t1058 * t1259 * t1626 * t4384 + 0.2e1 * t2108 * t2191 * t4332 - t1660 * t11 * t236 * t1570 * t4340 - t1999 * t1626 * t4598 - t2039 * t1640 * t4613 - t1879 * t1584 * t4553 - t1919 * t1598 * t4568 - t1959 * t1612 * t4583 - t1839 * t1570 * t4628 + 0.2e1 * t202 * t2558 * t4441 + 0.2e1 * t463 * t2561 * t4444 + 0.2e1 * t718 * t2564 * t4447 + 0.2e1 * t973 * t2567 * t4450;
t4725 = qJ(3,1) * t4340;
t4730 = qJ(3,2) * t4351;
t4734 = t2285 * t11 * t223 * t4244 - t2292 * t293 * t481 * t4261 + t2299 * t548 * t736 * t4278 - t2306 * t803 * t991 * t4295 + t2313 * t1058 * t1246 * t4312 - t2320 * t1313 * t1501 * t4329 + t2326 * t4244 + t1759 * t4725 + t280 * t235 * t4628 + t2335 * t4261 + t1763 * t4730 + t535 * t493 * t4553;
t4736 = qJ(3,3) * t4362;
t4741 = qJ(3,4) * t4373;
t4746 = qJ(3,5) * t4384;
t4751 = qJ(3,6) * t4395;
t4755 = t1045 * t1003 * t4583 + t1300 * t1258 * t4598 + t1555 * t1513 * t4613 + t790 * t748 * t4568 + t1767 * t4736 + t1771 * t4741 + t1775 * t4746 + t1779 * t4751 + t2345 * t4278 + t2354 * t4295 + t2363 * t4312 + t2372 * t4329;
t4775 = 0.2e1 * t1843 * t4725 + 0.2e1 * t1883 * t4730 + 0.2e1 * t1923 * t4736 + t2431 * t4614 + t2434 * t4584 + t2438 * t4599 + t2441 * t4629 + t2444 * t4554 + t2447 * t4569 + 0.2e1 * t2463 * t4340 + 0.2e1 * t2470 * t4351 + 0.2e1 * t2477 * t4384 + 0.2e1 * t2484 * t4395 + 0.2e1 * t2491 * t4362 + 0.2e1 * t2498 * t4373;
t4797 = t1963 * t4741 + t2003 * t4746 + t2043 * t4751 + t2382 * t11 * t4332 + t2388 * t293 * t4343 + t2570 * t4406 + t2573 * t4408 + t2558 * t4398 + t2561 * t4400 + t2564 * t4402 + t2567 * t4404 + t2412 * t1058 * t4376 + t2406 * t1313 * t4387 + t2400 * t803 * t4365 + t2394 * t548 * t4354;
t4826 = 0.2e1 * t1257 * t4376 - t2549 * t4746 + 0.2e1 * t1512 * t4387 - t2543 * t4751 + 0.2e1 * t492 * t4343 - t2537 * t4730 + t2222 * t4569 + t1963 * t1006 * t4373 + t2240 * t4584 + t2003 * t1261 * t4384 + t2254 * t4599 + t2043 * t1516 * t4395 + t2268 * t4614 + t1843 * t238 * t4340 + t2194 * t4629 + t1883 * t496 * t4351 + t2208 * t4554 + t1923 * t751 * t4362;
t4854 = 0.2e1 * t747 * t4354 - t2540 * t4736 + 0.2e1 * t1002 * t4365 - t2546 * t4741 + 0.2e1 * t234 * t4332 - t2534 * t4725 + t238 * t280 * t4398 + t496 * t535 * t4400 + t2556 * t4614 + t2554 * t4599 + t2552 * t4584 + t2578 * t4554 + t2580 * t4569 + t2576 * t4629 + t751 * t790 * t4402 + t1006 * t1045 * t4404 + t1261 * t1300 * t4406 + t1516 * t1555 * t4408;
unknown(1,1) = t281 * t10 + t1046 * t802 + t1301 * t1057 + t1556 * t1312 + t536 * t292 + t791 * t547;
unknown(1,2) = 0.0e0;
unknown(1,3) = 0.0e0;
unknown(1,4) = t1655;
unknown(1,5) = t1782;
unknown(1,6) = t2047;
unknown(1,7) = t2078;
unknown(1,8) = t2054 * t1664 + t2058 * t1681 + t2062 * t1698 + t2066 * t1715 + t2070 * t1732 + t2074 * t1749;
unknown(1,9) = 0.0e0;
unknown(1,10) = 0.0e0;
unknown(1,11) = t2156 + t2279;
unknown(1,12) = t2341 + t2378;
unknown(1,13) = t2436 + t2501;
unknown(1,14) = t2551 + t2582;
unknown(1,15) = 0.0e0;
unknown(1,16) = 0.0e0;
unknown(1,17) = 0.0e0;
unknown(1,18) = 0.0e0;
unknown(1,19) = 0.0e0;
unknown(1,20) = 0.0e0;
unknown(1,21) = t2607 * t17 + t2589 * t87 - t2594 * t89 + t2597 - t2601;
unknown(1,22) = -t205 * t2614 - t2612 * t89 + t2610 - t2617 + t2625;
unknown(1,23) = t2631 * t17 + t2624 * t89 + t2627 * t87 - t2630 + t2633;
unknown(1,24) = 0.0e0;
unknown(2,1) = t1046 * t862 + t1301 * t1117 + t1556 * t1372 + t281 * t86 + t536 * t352 + t791 * t607;
unknown(2,2) = 0.0e0;
unknown(2,3) = 0.0e0;
unknown(2,4) = t2697;
unknown(2,5) = t2752;
unknown(2,6) = t2777;
unknown(2,7) = t2802;
unknown(2,8) = t2803 * t1808 + t2805 * t1848 + t2807 * t1888 + t2809 * t1928 + t2811 * t1968 + t2813 * t2008;
unknown(2,9) = 0.0e0;
unknown(2,10) = 0.0e0;
unknown(2,11) = t2858 + t2895;
unknown(2,12) = t2913 + t2934;
unknown(2,13) = t2967 + t2997;
unknown(2,14) = t3029 + t3054;
unknown(2,15) = 0.0e0;
unknown(2,16) = 0.0e0;
unknown(2,17) = 0.0e0;
unknown(2,18) = 0.0e0;
unknown(2,19) = 0.0e0;
unknown(2,20) = 0.0e0;
unknown(2,21) = -t2587 * t3064 + t2589 * t3059 - t2607 * t3066 - t3067 + t3069;
unknown(2,22) = t2612 * t3063 - t2629 * t3066 + t3073 - t3077 - t3078;
unknown(2,23) = t2593 * t3080 - t2624 * t3063 - t2631 * t3066 + t3083 + t3085;
unknown(2,24) = 0.0e0;
unknown(3,1) = 0.0e0;
unknown(3,2) = 0.0e0;
unknown(3,3) = 0.0e0;
unknown(3,4) = -t1228 * t1626 * t1616 - t1483 * t1640 * t1630 - t202 * t1570 * t1560 - t463 * t1584 * t1574 - t718 * t1598 * t1588 - t973 * t1612 * t1602;
unknown(3,5) = t1670 * t1811 + t1687 * t1851 + t1704 * t1891 + t1721 * t1931 + t1738 * t1971 + t1755 * t2011;
unknown(3,6) = t1045 * t1003 * t803 + t1300 * t1258 * t1058 + t280 * t235 * t11 + t1555 * t1513 * t1313 + t535 * t493 * t293 + t790 * t748 * t548;
unknown(3,7) = t1759 * t1811 + t1763 * t1851 + t1767 * t1891 + t1771 * t1931 + t1775 * t1971 + t1779 * t2011;
unknown(3,8) = t1843 * t1811 + t1883 * t1851 + t1923 * t1891 + t1963 * t1931 + t2003 * t1971 + t2043 * t2011;
unknown(3,9) = 0.0e0;
unknown(3,10) = 0.0e0;
unknown(3,11) = t3159 + t3166;
unknown(3,12) = 0.0e0;
unknown(3,13) = t3192;
unknown(3,14) = t3211 + t3224;
unknown(3,15) = 0.0e0;
unknown(3,16) = 0.0e0;
unknown(3,17) = 0.0e0;
unknown(3,18) = 0.0e0;
unknown(3,19) = 0.0e0;
unknown(3,20) = 0.0e0;
unknown(3,21) = -t2587 * t3234 + t2589 * t3229 + t2607 * t3236 + t3237 + t3239;
unknown(3,22) = t2612 * t3233 + t2629 * t3236 + t3243 - t3247 + t3248;
unknown(3,23) = t2593 * t3250 - t2624 * t3233 + t2631 * t3236 + t3253 + t3255;
unknown(3,24) = 0.0e0;
unknown(4,1) = -t3264 * t3263 - t3271 * t3270 - t3278 * t3277 - t3285 * t3284 - t3292 * t3291 - t3299 * t3298;
unknown(4,2) = 0.0e0;
unknown(4,3) = 0.0e0;
unknown(4,4) = t3386;
unknown(4,5) = t3453;
unknown(4,6) = t3484;
unknown(4,7) = t3503;
unknown(4,8) = t1843 * t3393 + t1883 * t3401 + t1923 * t3409 + t1963 * t3417 + t2003 * t3425 + t2043 * t3433;
unknown(4,9) = 0.0e0;
unknown(4,10) = 0.0e0;
unknown(4,11) = t3561 + t3596;
unknown(4,12) = t3616 + t3641;
unknown(4,13) = t3670 + t3698;
unknown(4,14) = t3730 + t3767;
unknown(4,15) = -t2593 * t2614 + t2624 * t87 - t2627 * t89;
unknown(4,16) = t3776 * t17 - t2624 * t89 + t3773 * t87 - t2630 + t2633;
unknown(4,17) = t205 * t2614 - t3781 * t89 + t2610 + t2617 + t2625;
unknown(4,18) = -t2593 * t2587 * t17 + t2607 * t89 + t3785 * t87;
unknown(4,19) = -t2607 * t17 + t3792 * t87 - t3794 * t89 + t2597 - t2601;
unknown(4,20) = t212 * t255 + t2629 * t87 - t3773 * t89;
unknown(4,21) = 0.0e0;
unknown(4,22) = 0.0e0;
unknown(4,23) = 0.0e0;
unknown(4,24) = 0.0e0;
unknown(5,1) = -t3264 * t3306 - t3271 * t3319 - t3278 * t3332 - t3285 * t3345 - t3292 * t3358 - t3299 * t3371;
unknown(5,2) = 0.0e0;
unknown(5,3) = 0.0e0;
unknown(5,4) = t3863;
unknown(5,5) = t3906;
unknown(5,6) = t3931;
unknown(5,7) = t3950;
unknown(5,8) = t1843 * t3867 + t1883 * t3872 + t1923 * t3877 + t1963 * t3882 + t2003 * t3887 + t2043 * t3892;
unknown(5,9) = 0.0e0;
unknown(5,10) = 0.0e0;
unknown(5,11) = t4009 + t4043;
unknown(5,12) = t4061 + t4082;
unknown(5,13) = t4111 + t4139;
unknown(5,14) = t4171 + t4202;
unknown(5,15) = -t205 * t2593 * t3063 + t2624 * t3059 - t3794 * t3066;
unknown(5,16) = -t2593 * t3080 + t2624 * t3063 - t3776 * t3066 + t3083 + t3085;
unknown(5,17) = t3781 * t3063 - t3785 * t3066 + t3073 + t3077 - t3078;
unknown(5,18) = t2587 * t3080 - t2594 * t3066 - t2607 * t3063;
unknown(5,19) = t2587 * t3064 + t2607 * t3066 + t3792 * t3059 - t3067 + t3069;
unknown(5,20) = t2587 * t205 * t3059 - t2600 * t2598 * t24 + t205 * t3064;
unknown(5,21) = 0.0e0;
unknown(5,22) = 0.0e0;
unknown(5,23) = 0.0e0;
unknown(5,24) = 0.0e0;
unknown(6,1) = t1045 * t4295 + t1300 * t4312 + t1555 * t4329 + t280 * t4244 + t535 * t4261 + t790 * t4278;
unknown(6,2) = 0.0e0;
unknown(6,3) = 0.0e0;
unknown(6,4) = t4410;
unknown(6,5) = t4459;
unknown(6,6) = t4496;
unknown(6,7) = t4527;
unknown(6,8) = t1843 * t4340 + t1883 * t4351 + t1923 * t4362 + t1963 * t4373 + t2003 * t4384 + t2043 * t4395;
unknown(6,9) = 0.0e0;
unknown(6,10) = 0.0e0;
unknown(6,11) = t4649 + t4704;
unknown(6,12) = t4734 + t4755;
unknown(6,13) = t4775 + 0.2e1 * t4797;
unknown(6,14) = t4826 + t4854;
unknown(6,15) = -t205 * t2593 * t3233 + t2624 * t3229 + t3794 * t3236;
unknown(6,16) = -t2593 * t3250 + t2624 * t3233 + t3776 * t3236 + t3253 + t3255;
unknown(6,17) = t3781 * t3233 + t3785 * t3236 + t3243 + t3247 + t3248;
unknown(6,18) = t2587 * t3250 + t2594 * t3236 - t2607 * t3233;
unknown(6,19) = t2587 * t3234 - t2607 * t3236 + t3792 * t3229 + t3237 + t3239;
unknown(6,20) = t2587 * t205 * t3229 + t2600 * t2598 * t22 + t205 * t3234;
unknown(6,21) = 0.0e0;
unknown(6,22) = 0.0e0;
unknown(6,23) = 0.0e0;
unknown(6,24) = 0.0e0;
tau_reg  = unknown;
