% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P6RRPRRR14V3G1P4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [6x24]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-12 23:28
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P6RRPRRR14V3G1P4A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(1,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V3G1P4A0_gravload_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V3G1P4A0_gravload_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6RRPRRR14V3G1P4A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'P6RRPRRR14V3G1P4A0_gravload_para_pf_regmin: pkin has to be [1x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V3G1P4A0_gravload_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V3G1P4A0_gravload_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 1
% StartTime: 2020-03-12 23:28:05
% EndTime: 2020-03-12 23:28:05
% DurationCPUTime: 0.72s
% Computational Cost: add. (4200->628), mult. (8994->1077), div. (660->12), fcn. (9486->42), ass. (0->577)
unknown=NaN(6,24);
t1 = sin(legFrame(1,3));
t2 = cos(qJ(1,1));
t4 = sin(qJ(1,1));
t5 = cos(legFrame(1,3));
t7 = -t2 * t1 - t5 * t4;
t8 = sin(qJ(2,1));
t9 = 0.1e1 / t8;
t10 = t9 * t7;
t11 = 0.1e1 / qJ(3,1);
t14 = g(1) * t1 - g(2) * t5;
t18 = g(1) * t5 + g(2) * t1;
t20 = t2 * t14 + t4 * t18;
t21 = t20 * t11;
t23 = sin(legFrame(2,3));
t24 = cos(qJ(1,2));
t26 = sin(qJ(1,2));
t27 = cos(legFrame(2,3));
t29 = -t24 * t23 - t27 * t26;
t30 = sin(qJ(2,2));
t31 = 0.1e1 / t30;
t32 = t31 * t29;
t33 = 0.1e1 / qJ(3,2);
t36 = g(1) * t23 - g(2) * t27;
t40 = g(1) * t27 + g(2) * t23;
t42 = t24 * t36 + t26 * t40;
t43 = t42 * t33;
t45 = sin(legFrame(3,3));
t46 = cos(qJ(1,3));
t48 = sin(qJ(1,3));
t49 = cos(legFrame(3,3));
t51 = -t46 * t45 - t49 * t48;
t52 = sin(qJ(2,3));
t53 = 0.1e1 / t52;
t54 = t53 * t51;
t55 = 0.1e1 / qJ(3,3);
t58 = g(1) * t45 - g(2) * t49;
t62 = g(1) * t49 + g(2) * t45;
t64 = t46 * t58 + t48 * t62;
t65 = t64 * t55;
t67 = sin(legFrame(4,3));
t68 = cos(qJ(1,4));
t70 = sin(qJ(1,4));
t71 = cos(legFrame(4,3));
t73 = -t68 * t67 - t71 * t70;
t74 = sin(qJ(2,4));
t75 = 0.1e1 / t74;
t76 = t75 * t73;
t77 = 0.1e1 / qJ(3,4);
t80 = g(1) * t67 - g(2) * t71;
t84 = g(1) * t71 + g(2) * t67;
t86 = t68 * t80 + t70 * t84;
t87 = t86 * t77;
t89 = sin(legFrame(5,3));
t90 = cos(qJ(1,5));
t92 = sin(qJ(1,5));
t93 = cos(legFrame(5,3));
t95 = -t90 * t89 - t93 * t92;
t96 = sin(qJ(2,5));
t97 = 0.1e1 / t96;
t98 = t97 * t95;
t99 = 0.1e1 / qJ(3,5);
t102 = g(1) * t89 - g(2) * t93;
t106 = g(1) * t93 + g(2) * t89;
t108 = t90 * t102 + t92 * t106;
t109 = t108 * t99;
t111 = sin(legFrame(6,3));
t112 = cos(qJ(1,6));
t114 = sin(qJ(1,6));
t115 = cos(legFrame(6,3));
t117 = -t112 * t111 - t115 * t114;
t118 = sin(qJ(2,6));
t119 = 0.1e1 / t118;
t120 = t119 * t117;
t121 = 0.1e1 / qJ(3,6);
t124 = g(1) * t111 - g(2) * t115;
t128 = g(1) * t115 + g(2) * t111;
t130 = t112 * t124 + t114 * t128;
t131 = t130 * t121;
t134 = t2 * t18;
t136 = -t4 * t14 + t134;
t137 = t136 * t11;
t139 = t24 * t40;
t141 = -t26 * t36 + t139;
t142 = t141 * t33;
t144 = t46 * t62;
t146 = -t48 * t58 + t144;
t147 = t146 * t55;
t149 = t68 * t84;
t151 = -t70 * t80 + t149;
t152 = t151 * t77;
t154 = t90 * t106;
t156 = -t92 * t102 + t154;
t157 = t156 * t99;
t159 = t112 * t128;
t161 = -t114 * t124 + t159;
t162 = t161 * t121;
t165 = cos(qJ(2,1));
t167 = t20 * t165 * t11;
t171 = -t4 * t1 + t5 * t2;
t172 = t165 * t171;
t175 = t2 * g(1) + t4 * g(2);
t180 = (t4 * g(1) - t2 * g(2)) * t1;
t181 = t5 * t175 - t180;
t183 = t165 * g(3);
t184 = t8 * t181 - t183;
t187 = cos(qJ(2,2));
t189 = t42 * t187 * t33;
t193 = -t26 * t23 + t27 * t24;
t194 = t187 * t193;
t197 = t24 * g(1) + g(2) * t26;
t202 = (t26 * g(1) - t24 * g(2)) * t23;
t203 = t27 * t197 - t202;
t205 = t187 * g(3);
t206 = t30 * t203 - t205;
t209 = cos(qJ(2,3));
t211 = t64 * t209 * t55;
t215 = -t48 * t45 + t49 * t46;
t216 = t209 * t215;
t219 = t46 * g(1) + g(2) * t48;
t224 = (t48 * g(1) - t46 * g(2)) * t45;
t225 = t49 * t219 - t224;
t227 = t209 * g(3);
t228 = t52 * t225 - t227;
t231 = cos(qJ(2,4));
t233 = t86 * t231 * t77;
t237 = -t70 * t67 + t71 * t68;
t238 = t231 * t237;
t241 = t68 * g(1) + g(2) * t70;
t246 = (t70 * g(1) - t68 * g(2)) * t67;
t247 = t71 * t241 - t246;
t249 = t231 * g(3);
t250 = t74 * t247 - t249;
t253 = cos(qJ(2,5));
t255 = t108 * t253 * t99;
t259 = -t92 * t89 + t93 * t90;
t260 = t253 * t259;
t263 = t90 * g(1) + g(2) * t92;
t268 = (t92 * g(1) - t90 * g(2)) * t89;
t269 = t93 * t263 - t268;
t271 = t253 * g(3);
t272 = t96 * t269 - t271;
t275 = cos(qJ(2,6));
t277 = t130 * t275 * t121;
t281 = -t114 * t111 + t115 * t112;
t282 = t275 * t281;
t285 = t112 * g(1) + g(2) * t114;
t290 = (t114 * g(1) - t112 * g(2)) * t111;
t291 = t115 * t285 - t290;
t293 = t275 * g(3);
t294 = t118 * t291 - t293;
t297 = t184 * t11 * t172 + t294 * t121 * t282 + t206 * t33 * t194 + t228 * t55 * t216 + t250 * t77 * t238 + t272 * t99 * t260 + t167 * t10 + t277 * t120 + t189 * t32 + t211 * t54 + t233 * t76 + t255 * t98;
t299 = t20 * t11 * t7;
t301 = t8 * g(3);
t302 = t165 * t181 + t301;
t306 = t42 * t33 * t29;
t308 = t30 * g(3);
t309 = t187 * t203 + t308;
t313 = t64 * t55 * t51;
t315 = t52 * g(3);
t316 = t209 * t225 + t315;
t320 = t86 * t77 * t73;
t322 = t74 * g(3);
t323 = t231 * t247 + t322;
t327 = t108 * t99 * t95;
t329 = t96 * g(3);
t330 = t253 * t269 + t329;
t334 = t130 * t121 * t117;
t336 = t118 * g(3);
t337 = t275 * t291 + t336;
t340 = t302 * t11 * t172 + t337 * t121 * t282 + t309 * t33 * t194 + t316 * t55 * t216 + t323 * t77 * t238 + t330 * t99 * t260 - t299 - t306 - t313 - t320 - t327 - t334;
t342 = t4 * t14 - t134;
t343 = t342 * t11;
t346 = t26 * t36 - t139;
t347 = t346 * t33;
t350 = t48 * t58 - t144;
t351 = t350 * t55;
t354 = t70 * t80 - t149;
t355 = t354 * t77;
t358 = t92 * t102 - t154;
t359 = t358 * t99;
t362 = t114 * t124 - t159;
t363 = t362 * t121;
t367 = -t5 * t175 + t180;
t369 = t165 * t367 - t301;
t373 = -t27 * t197 + t202;
t375 = t187 * t373 - t308;
t379 = -t49 * t219 + t224;
t381 = t209 * t379 - t315;
t385 = -t71 * t241 + t246;
t387 = t231 * t385 - t322;
t391 = -t93 * t263 + t268;
t393 = t253 * t391 - t329;
t397 = -t115 * t285 + t290;
t399 = t275 * t397 - t336;
t402 = t369 * t11 * t172 + t399 * t121 * t282 + t375 * t33 * t194 + t381 * t55 * t216 + t387 * t77 * t238 + t393 * t99 * t260 + t299 + t306 + t313 + t320 + t327 + t334;
t407 = t8 * t367 + t183;
t413 = t30 * t373 + t205;
t419 = t52 * t379 + t227;
t425 = t74 * t385 + t249;
t431 = t96 * t391 + t271;
t437 = t118 * t397 + t293;
t439 = t20 * t7 - t302 * t172 + t407 * t8 * t171 + t42 * t29 - t309 * t194 + t413 * t30 * t193 + t64 * t51 - t316 * t216 + t419 * t52 * t215 + t86 * t73 - t323 * t238 + t425 * t74 * t237 + t108 * t95 - t330 * t260 + t431 * t96 * t259 + t130 * t117 - t337 * t282 + t437 * t118 * t281;
t440 = cos(xP(5));
t441 = cos(xP(6));
t442 = t441 * t440;
t444 = sin(xP(4));
t445 = sin(xP(5));
t446 = t445 * t444;
t448 = cos(xP(4));
t449 = sin(xP(6));
t451 = t441 * t446 + t449 * t448;
t453 = t445 * t448;
t456 = -t441 * t453 + t449 * t444;
t458 = -g(1) * t442 - g(2) * t451 - g(3) * t456;
t460 = t449 * t440;
t464 = t441 * t448 - t449 * t446;
t468 = t441 * t444 + t449 * t453;
t470 = g(1) * t460 - g(2) * t464 - g(3) * t468;
t473 = t444 * t440;
t475 = t448 * t440;
t477 = -g(1) * t445 + g(2) * t473 - g(3) * t475;
t480 = t9 * t171;
t482 = t31 * t193;
t484 = t53 * t215;
t486 = t75 * t237;
t488 = t97 * t259;
t490 = t119 * t281;
t501 = -t11 * t7;
t505 = -t33 * t29;
t509 = -t55 * t51;
t513 = -t77 * t73;
t517 = -t99 * t95;
t521 = -t121 * t117;
t524 = t184 * t165 * t501 + t206 * t187 * t505 + t228 * t209 * t509 + t250 * t231 * t513 + t272 * t253 * t517 + t294 * t275 * t521 + t167 * t480 + t189 * t482 + t211 * t484 + t233 * t486 + t255 * t488 + t277 * t490;
t525 = t11 * t171;
t526 = t20 * t525;
t529 = t33 * t193;
t530 = t42 * t529;
t533 = t55 * t215;
t534 = t64 * t533;
t537 = t77 * t237;
t538 = t86 * t537;
t541 = t99 * t259;
t542 = t108 * t541;
t545 = t121 * t281;
t546 = t130 * t545;
t549 = t302 * t165 * t501 + t309 * t187 * t505 + t316 * t209 * t509 + t323 * t231 * t513 + t330 * t253 * t517 + t337 * t275 * t521 - t526 - t530 - t534 - t538 - t542 - t546;
t569 = t369 * t165 * t501 + t375 * t187 * t505 + t381 * t209 * t509 + t387 * t231 * t513 + t393 * t253 * t517 + t399 * t275 * t521 + t526 + t530 + t534 + t538 + t542 + t546;
t571 = -t165 * t7;
t576 = -t187 * t29;
t581 = -t209 * t51;
t586 = -t231 * t73;
t591 = -t253 * t95;
t596 = -t275 * t117;
t600 = t20 * t171 - t302 * t571 - t407 * t8 * t7 + t42 * t193 - t309 * t576 - t413 * t29 * t30 + t64 * t215 - t316 * t581 - t419 * t51 * t52 + t86 * t237 - t323 * t586 - t425 * t73 * t74 + t108 * t259 - t330 * t591 - t431 * t95 * t96 + t130 * t281 - t337 * t596 - t437 * t117 * t118;
t605 = t8 * t11;
t607 = t30 * t33;
t609 = t52 * t55;
t611 = t74 * t77;
t613 = t96 * t99;
t615 = t118 * t121;
t617 = t184 * t605 + t206 * t607 + t228 * t609 + t250 * t611 + t272 * t613 + t294 * t615;
t644 = -t337 * t118 - t407 * t165 - t413 * t187 - t419 * t209 - t425 * t231 - t431 * t253 - t437 * t275 - t309 * t30 - t302 * t8 - t316 * t52 - t323 * t74 - t330 * t96;
t649 = t445 * t441;
t651 = t449 * t445;
t654 = koppelP(1,3) * t440 - koppelP(1,1) * t649 + koppelP(1,2) * t651;
t658 = koppelP(1,2) * t441 + koppelP(1,1) * t449;
t660 = t658 * t444 + t448 * t654;
t661 = t660 * t171;
t662 = t11 * t9;
t663 = t20 * t662;
t668 = koppelP(2,3) * t440 - koppelP(2,1) * t649 + koppelP(2,2) * t651;
t672 = koppelP(2,2) * t441 + koppelP(2,1) * t449;
t674 = t672 * t444 + t448 * t668;
t675 = t674 * t193;
t676 = t33 * t31;
t677 = t42 * t676;
t682 = koppelP(3,3) * t440 - koppelP(3,1) * t649 + koppelP(3,2) * t651;
t686 = koppelP(3,2) * t441 + koppelP(3,1) * t449;
t688 = t686 * t444 + t448 * t682;
t689 = t688 * t215;
t690 = t55 * t53;
t691 = t64 * t690;
t696 = koppelP(4,3) * t440 - koppelP(4,1) * t649 + koppelP(4,2) * t651;
t700 = koppelP(4,2) * t441 + koppelP(4,1) * t449;
t702 = t700 * t444 + t448 * t696;
t703 = t702 * t237;
t704 = t77 * t75;
t705 = t86 * t704;
t710 = koppelP(5,3) * t440 - koppelP(5,1) * t649 + koppelP(5,2) * t651;
t714 = koppelP(5,2) * t441 + koppelP(5,1) * t449;
t716 = t714 * t444 + t448 * t710;
t717 = t716 * t259;
t718 = t99 * t97;
t719 = t108 * t718;
t724 = koppelP(6,3) * t440 - koppelP(6,1) * t649 + koppelP(6,2) * t651;
t728 = t441 * koppelP(6,2) + koppelP(6,1) * t449;
t730 = t728 * t444 + t448 * t724;
t731 = t281 * t730;
t732 = t121 * t119;
t733 = t130 * t732;
t736 = t136 * t662;
t738 = t141 * t676;
t740 = t146 * t690;
t742 = t151 * t704;
t744 = t156 * t718;
t746 = t161 * t732;
t751 = -t7 * t660;
t755 = -t654 * t444 + t658 * t448;
t757 = -t165 * t751 + t8 * t755;
t758 = t11 * t757;
t762 = -t29 * t674;
t766 = -t668 * t444 + t672 * t448;
t768 = -t187 * t762 + t30 * t766;
t769 = t33 * t768;
t773 = -t51 * t688;
t777 = -t682 * t444 + t686 * t448;
t779 = -t209 * t773 + t52 * t777;
t780 = t55 * t779;
t784 = -t73 * t702;
t788 = -t696 * t444 + t700 * t448;
t790 = -t231 * t784 + t74 * t788;
t791 = t77 * t790;
t795 = -t716 * t95;
t799 = -t710 * t444 + t714 * t448;
t801 = -t253 * t795 + t96 * t799;
t802 = t99 * t801;
t806 = -t730 * t117;
t810 = -t724 * t444 + t728 * t448;
t812 = t118 * t810 - t275 * t806;
t813 = t121 * t812;
t815 = -t277 * t119 * t731 - t167 * t9 * t661 - t189 * t31 * t675 - t211 * t53 * t689 - t233 * t75 * t703 - t255 * t97 * t717 + t184 * t758 + t206 * t769 + t228 * t780 + t250 * t791 + t272 * t802 + t294 * t813;
t816 = t21 * t661;
t818 = t43 * t675;
t820 = t65 * t689;
t822 = t87 * t703;
t824 = t109 * t717;
t826 = t131 * t731;
t828 = t302 * t758 + t309 * t769 + t316 * t780 + t323 * t791 + t330 * t802 + t337 * t813 + t816 + t818 + t820 + t822 + t824 + t826;
t829 = t342 * t662;
t831 = t346 * t676;
t833 = t350 * t690;
t835 = t354 * t704;
t837 = t358 * t718;
t839 = t362 * t732;
t848 = t369 * t758 + t375 * t769 + t381 * t780 + t387 * t791 + t393 * t802 + t399 * t813 - t816 - t818 - t820 - t822 - t824 - t826;
t885 = -t20 * t661 - t302 * t757 + t407 * (-t755 * t165 - t8 * t751) - t42 * t675 - t309 * t768 + t413 * (-t766 * t187 - t30 * t762) - t64 * t689 - t316 * t779 + t419 * (-t777 * t209 - t52 * t773) - t86 * t703 - t323 * t790 + t425 * (-t788 * t231 - t74 * t784) - t108 * t717 - t330 * t801 + t431 * (-t799 * t253 - t96 * t795) - t130 * t731 - t337 * t812 + t437 * (-t118 * t806 - t810 * t275);
t914 = koppelP(1,3) * t445;
t915 = koppelP(1,1) * t442 - koppelP(1,2) * t460 + t914;
t917 = t165 * t661 - t915 * t8;
t918 = t11 * t917;
t925 = koppelP(2,3) * t445;
t926 = koppelP(2,1) * t442 - koppelP(2,2) * t460 + t925;
t928 = t187 * t675 - t926 * t30;
t929 = t33 * t928;
t936 = koppelP(3,3) * t445;
t937 = koppelP(3,1) * t442 - koppelP(3,2) * t460 + t936;
t939 = t209 * t689 - t937 * t52;
t940 = t55 * t939;
t947 = koppelP(4,3) * t445;
t948 = koppelP(4,1) * t442 - koppelP(4,2) * t460 + t947;
t950 = t231 * t703 - t948 * t74;
t951 = t77 * t950;
t958 = koppelP(5,3) * t445;
t959 = koppelP(5,1) * t442 - koppelP(5,2) * t460 + t958;
t961 = t253 * t717 - t959 * t96;
t962 = t99 * t961;
t969 = koppelP(6,3) * t445;
t970 = koppelP(6,1) * t442 - koppelP(6,2) * t460 + t969;
t972 = -t970 * t118 + t275 * t731;
t973 = t121 * t972;
t975 = -t277 * t119 * t806 - t167 * t9 * t751 - t189 * t31 * t762 - t211 * t53 * t773 - t233 * t75 * t784 - t255 * t97 * t795 + t184 * t918 + t206 * t929 + t228 * t940 + t250 * t951 + t272 * t962 + t294 * t973;
t976 = t21 * t751;
t978 = t43 * t762;
t980 = t65 * t773;
t982 = t87 * t784;
t984 = t109 * t795;
t986 = t131 * t806;
t988 = t302 * t918 + t309 * t929 + t316 * t940 + t323 * t951 + t330 * t962 + t337 * t973 + t976 + t978 + t980 + t982 + t984 + t986;
t1002 = t369 * t918 + t375 * t929 + t381 * t940 + t387 * t951 + t393 * t962 + t399 * t973 - t976 - t978 - t980 - t982 - t984 - t986;
t1045 = -t20 * t751 - t302 * t917 + t407 * (t8 * t660 * t171 + t915 * t165) - t42 * t762 - t309 * t928 + t413 * (t30 * t674 * t193 + t926 * t187) - t64 * t773 - t316 * t939 + t419 * (t52 * t688 * t215 + t937 * t209) - t86 * t784 - t323 * t950 + t425 * (t74 * t702 * t237 + t948 * t231) - t108 * t795 - t330 * t961 + t431 * (t96 * t716 * t259 + t959 * t253) - t130 * t806 - t337 * t972 + t437 * (t118 * t281 * t730 + t970 * t275);
t1056 = t440 * koppelP(1,3) * t444;
t1059 = koppelP(1,1) * t446 + t448 * koppelP(1,2);
t1064 = (-koppelP(1,2) * t446 + koppelP(1,1) * t448) * t449;
t1065 = t441 * t1059 - t1056 + t1064;
t1070 = -t662 * t7 * t1065 + t662 * t171 * t915;
t1073 = t440 * koppelP(2,3) * t444;
t1076 = koppelP(2,1) * t446 + koppelP(2,2) * t448;
t1082 = (-t444 * koppelP(2,2) * t445 + koppelP(2,1) * t448) * t449;
t1083 = t441 * t1076 - t1073 + t1082;
t1088 = -t676 * t29 * t1083 + t676 * t193 * t926;
t1091 = t440 * koppelP(3,3) * t444;
t1094 = koppelP(3,1) * t446 + koppelP(3,2) * t448;
t1100 = (-t444 * koppelP(3,2) * t445 + koppelP(3,1) * t448) * t449;
t1101 = t441 * t1094 - t1091 + t1100;
t1106 = -t690 * t51 * t1101 + t690 * t215 * t937;
t1109 = t440 * koppelP(4,3) * t444;
t1112 = koppelP(4,1) * t446 + koppelP(4,2) * t448;
t1118 = (-t444 * koppelP(4,2) * t445 + koppelP(4,1) * t448) * t449;
t1119 = t441 * t1112 - t1109 + t1118;
t1124 = -t704 * t73 * t1119 + t704 * t237 * t948;
t1127 = t440 * koppelP(5,3) * t444;
t1130 = koppelP(5,1) * t446 + koppelP(5,2) * t448;
t1136 = (-t444 * koppelP(5,2) * t445 + koppelP(5,1) * t448) * t449;
t1137 = t441 * t1130 - t1127 + t1136;
t1142 = -t718 * t95 * t1137 + t718 * t259 * t959;
t1145 = t440 * koppelP(6,3) * t444;
t1148 = koppelP(6,1) * t446 + koppelP(6,2) * t448;
t1154 = (-t444 * koppelP(6,2) * t445 + koppelP(6,1) * t448) * t449;
t1155 = t441 * t1148 - t1145 + t1154;
t1160 = -t732 * t117 * t1155 + t732 * t281 * t970;
t1176 = -t525 * t1065 * t165 + t571 * t11 * t915;
t1184 = -t529 * t1083 * t187 + t576 * t33 * t926;
t1192 = -t533 * t1101 * t209 + t581 * t55 * t937;
t1200 = -t537 * t1119 * t231 + t586 * t77 * t948;
t1208 = -t541 * t1137 * t253 + t591 * t99 * t959;
t1216 = -t545 * t1155 * t275 + t596 * t121 * t970;
t1218 = t20 * t165 * t1070 + t108 * t253 * t1142 + t42 * t187 * t1088 + t64 * t209 * t1106 + t86 * t231 * t1124 + t130 * t275 * t1160 + t184 * t1176 + t206 * t1184 + t228 * t1192 + t250 * t1200 + t272 * t1208 + t294 * t1216;
t1220 = t20 * t8 * t1070;
t1223 = t42 * t30 * t1088;
t1226 = t64 * t52 * t1106;
t1229 = t86 * t74 * t1124;
t1232 = t108 * t96 * t1142;
t1235 = t130 * t118 * t1160;
t1237 = t302 * t1176 + t309 * t1184 + t316 * t1192 + t323 * t1200 + t330 * t1208 + t337 * t1216 - t1220 - t1223 - t1226 - t1229 - t1232 - t1235;
t1251 = t369 * t1176 + t375 * t1184 + t381 * t1192 + t387 * t1200 + t393 * t1208 + t399 * t1216 + t1220 + t1223 + t1226 + t1229 + t1232 + t1235;
t1264 = t440 * (t441 * koppelP(1,1) - koppelP(1,2) * t449) + t914;
t1287 = t440 * (t441 * koppelP(2,1) - koppelP(2,2) * t449) + t925;
t1310 = t440 * (t441 * koppelP(3,1) - koppelP(3,2) * t449) + t936;
t1333 = t440 * (t441 * koppelP(4,1) - koppelP(4,2) * t449) + t947;
t1356 = t440 * (t441 * koppelP(5,1) - koppelP(5,2) * t449) + t958;
t1379 = t440 * (t441 * koppelP(6,1) - koppelP(6,2) * t449) + t969;
t1390 = t20 * t8 * qJ(3,1) * t1070 - t302 * qJ(3,1) * t1176 + t407 * t8 * (t5 * (t2 * (-t441 * t1059 + t1056 - t1064) + t1264 * t4) + t1 * (t1065 * t4 + t2 * t1264)) + t42 * t30 * qJ(3,2) * t1088 - t309 * qJ(3,2) * t1184 + t413 * t30 * (t27 * (t24 * (-t441 * t1076 + t1073 - t1082) + t1287 * t26) + t23 * (t1083 * t26 + t24 * t1287)) + t64 * t52 * qJ(3,3) * t1106 - t316 * qJ(3,3) * t1192 + t419 * t52 * (t49 * (t46 * (-t441 * t1094 + t1091 - t1100) + t1310 * t48) + t45 * (t1101 * t48 + t46 * t1310)) + t86 * t74 * qJ(3,4) * t1124 - t323 * qJ(3,4) * t1200 + t425 * t74 * (t71 * (t68 * (-t441 * t1112 + t1109 - t1118) + t1333 * t70) + t67 * (t1119 * t70 + t68 * t1333)) + t108 * t96 * qJ(3,5) * t1142 - t330 * qJ(3,5) * t1208 + t431 * t96 * (t93 * (t90 * (-t441 * t1130 + t1127 - t1136) + t1356 * t92) + t89 * (t1137 * t92 + t90 * t1356)) + t130 * t118 * qJ(3,6) * t1160 - t337 * qJ(3,6) * t1216 + t437 * t118 * (t115 * (t112 * (-t441 * t1148 + t1145 - t1154) + t1379 * t114) + t111 * (t112 * t1379 + t1155 * t114));
unknown(1,1) = 0;
unknown(1,2) = (t21 * t10 + t109 * t98 + t131 * t120 + t43 * t32 + t65 * t54 + t87 * t76);
unknown(1,3) = (t137 * t10 + t162 * t120 + t142 * t32 + t147 * t54 + t152 * t76 + t157 * t98);
unknown(1,4) = 0;
unknown(1,5) = 0;
unknown(1,6) = 0;
unknown(1,7) = 0;
unknown(1,8) = 0;
unknown(1,9) = t297;
unknown(1,10) = t340;
unknown(1,11) = t297;
unknown(1,12) = (t343 * t10 + t363 * t120 + t347 * t32 + t351 * t54 + t355 * t76 + t359 * t98);
unknown(1,13) = t402;
unknown(1,14) = t439;
unknown(1,15) = 0;
unknown(1,16) = 0;
unknown(1,17) = 0;
unknown(1,18) = 0;
unknown(1,19) = 0;
unknown(1,20) = 0;
unknown(1,21) = 0;
unknown(1,22) = 0;
unknown(1,23) = 0;
unknown(1,24) = (t458 * t442 + t477 * t445 - t470 * t460);
unknown(2,1) = 0;
unknown(2,2) = (t109 * t488 + t131 * t490 + t21 * t480 + t43 * t482 + t65 * t484 + t87 * t486);
unknown(2,3) = (t137 * t480 + t142 * t482 + t147 * t484 + t152 * t486 + t157 * t488 + t162 * t490);
unknown(2,4) = 0;
unknown(2,5) = 0;
unknown(2,6) = 0;
unknown(2,7) = 0;
unknown(2,8) = 0;
unknown(2,9) = t524;
unknown(2,10) = t549;
unknown(2,11) = t524;
unknown(2,12) = (t343 * t480 + t347 * t482 + t351 * t484 + t355 * t486 + t359 * t488 + t363 * t490);
unknown(2,13) = t569;
unknown(2,14) = t600;
unknown(2,15) = 0;
unknown(2,16) = 0;
unknown(2,17) = 0;
unknown(2,18) = 0;
unknown(2,19) = 0;
unknown(2,20) = 0;
unknown(2,21) = 0;
unknown(2,22) = 0;
unknown(2,23) = 0;
unknown(2,24) = (t458 * t451 + t470 * t464 - t477 * t473);
unknown(3,1) = 0;
unknown(3,2) = 0;
unknown(3,3) = 0;
unknown(3,4) = 0;
unknown(3,5) = 0;
unknown(3,6) = 0;
unknown(3,7) = 0;
unknown(3,8) = 0;
unknown(3,9) = t617;
unknown(3,10) = (t302 * t605 + t309 * t607 + t316 * t609 + t323 * t611 + t330 * t613 + t337 * t615);
unknown(3,11) = t617;
unknown(3,12) = 0;
unknown(3,13) = (t369 * t605 + t375 * t607 + t381 * t609 + t387 * t611 + t393 * t613 + t399 * t615);
unknown(3,14) = t644;
unknown(3,15) = 0;
unknown(3,16) = 0;
unknown(3,17) = 0;
unknown(3,18) = 0;
unknown(3,19) = 0;
unknown(3,20) = 0;
unknown(3,21) = 0;
unknown(3,22) = 0;
unknown(3,23) = 0;
unknown(3,24) = (t458 * t456 + t470 * t468 + t477 * t475);
unknown(4,1) = 0;
unknown(4,2) = (-t663 * t661 - t677 * t675 - t691 * t689 - t705 * t703 - t719 * t717 - t733 * t731);
unknown(4,3) = (-t736 * t661 - t738 * t675 - t740 * t689 - t742 * t703 - t744 * t717 - t746 * t731);
unknown(4,4) = 0;
unknown(4,5) = 0;
unknown(4,6) = 0;
unknown(4,7) = 0;
unknown(4,8) = 0;
unknown(4,9) = t815;
unknown(4,10) = t828;
unknown(4,11) = t815;
unknown(4,12) = (-t829 * t661 - t831 * t675 - t833 * t689 - t835 * t703 - t837 * t717 - t839 * t731);
unknown(4,13) = t848;
unknown(4,14) = t885;
unknown(4,15) = 0;
unknown(4,16) = 0;
unknown(4,17) = 0;
unknown(4,18) = 0;
unknown(4,19) = 0;
unknown(4,20) = 0;
unknown(4,21) = (t470 * t445 + t477 * t460);
unknown(4,22) = (t477 * t442 - t458 * t445);
unknown(4,23) = (-t470 * t442 - t458 * t460);
unknown(4,24) = 0;
unknown(5,1) = 0;
unknown(5,2) = (-t663 * t751 - t677 * t762 - t691 * t773 - t705 * t784 - t719 * t795 - t733 * t806);
unknown(5,3) = (-t736 * t751 - t738 * t762 - t740 * t773 - t742 * t784 - t744 * t795 - t746 * t806);
unknown(5,4) = 0;
unknown(5,5) = 0;
unknown(5,6) = 0;
unknown(5,7) = 0;
unknown(5,8) = 0;
unknown(5,9) = t975;
unknown(5,10) = t988;
unknown(5,11) = t975;
unknown(5,12) = (-t829 * t751 - t831 * t762 - t833 * t773 - t835 * t784 - t837 * t795 - t839 * t806);
unknown(5,13) = t1002;
unknown(5,14) = t1045;
unknown(5,15) = 0;
unknown(5,16) = 0;
unknown(5,17) = 0;
unknown(5,18) = 0;
unknown(5,19) = 0;
unknown(5,20) = 0;
unknown(5,21) = (-t477 * t464 - t470 * t473);
unknown(5,22) = (t477 * t451 + t458 * t473);
unknown(5,23) = (-t470 * t451 + t458 * t464);
unknown(5,24) = 0;
unknown(6,1) = 0;
unknown(6,2) = (t20 * t1070 + t108 * t1142 + t42 * t1088 + t64 * t1106 + t86 * t1124 + t130 * t1160);
unknown(6,3) = (t136 * t1070 + t141 * t1088 + t146 * t1106 + t151 * t1124 + t156 * t1142 + t161 * t1160);
unknown(6,4) = 0;
unknown(6,5) = 0;
unknown(6,6) = 0;
unknown(6,7) = 0;
unknown(6,8) = 0;
unknown(6,9) = t1218;
unknown(6,10) = t1237;
unknown(6,11) = t1218;
unknown(6,12) = (t342 * t1070 + t346 * t1088 + t350 * t1106 + t354 * t1124 + t358 * t1142 + t362 * t1160);
unknown(6,13) = t1251;
unknown(6,14) = t1390;
unknown(6,15) = 0;
unknown(6,16) = 0;
unknown(6,17) = 0;
unknown(6,18) = 0;
unknown(6,19) = 0;
unknown(6,20) = 0;
unknown(6,21) = (-t477 * t468 + t470 * t475);
unknown(6,22) = (t477 * t456 - t458 * t475);
unknown(6,23) = (-t470 * t456 + t458 * t468);
unknown(6,24) = 0;
tau_reg  = unknown;
