% Calculate minimal parameter regressor of inverse dynamics forces for
% P6RRPRRR14V3G8P1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% xDDP [6x1]
%   Generalized platform accelerations
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [6x24]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-12 23:36
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(1,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: xDP has to be [6x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [6 1]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: xDDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: pkin has to be [1x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V3G8P1A0_invdyn_para_pf_regmin: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 1
% StartTime: 2020-03-12 23:33:24
% EndTime: 2020-03-12 23:34:01
% DurationCPUTime: 39.05s
% Computational Cost: add. (823917->2755), mult. (1870545->4547), div. (9360->36), fcn. (1289172->66), ass. (0->1780)
unknown=NaN(6,24);
t1 = 0.1e1 / qJ(3,1);
t2 = sin(qJ(1,1));
t3 = cos(legFrame(1,3));
t5 = cos(qJ(1,1));
t6 = sin(legFrame(1,3));
t8 = t3 * t2 + t6 * t5;
t9 = t8 * t1;
t10 = cos(legFrame(1,2));
t11 = sin(qJ(2,1));
t12 = 0.1e1 / t11;
t13 = t12 * t10;
t14 = sin(xP(6));
t15 = koppelP(1,2) * t14;
t16 = cos(xP(6));
t18 = -t16 * koppelP(1,1) + t15;
t19 = sin(xP(5));
t21 = cos(xP(5));
t22 = koppelP(1,3) * t21;
t23 = t19 * t18 + t22;
t24 = cos(xP(4));
t25 = t24 * t23;
t26 = sin(xP(4));
t27 = koppelP(1,1) * t14;
t29 = t16 * koppelP(1,2) + t27;
t30 = t29 * t26;
t31 = t25 + t30;
t33 = t26 * t23;
t34 = t29 * t24;
t35 = t33 - t34;
t45 = xDP(4) * t31;
t53 = xDP(5) * t26;
t55 = -t21 * t24 * xDP(4) + t19 * t53;
t59 = xDP(5) * t24;
t61 = -t21 * t26 * xDP(4) - t19 * t59;
t66 = t29 * t19;
t69 = -t18 * t26 + t24 * t66;
t71 = koppelP(1,3) * t19;
t73 = t18 * t21 - t71;
t75 = xDP(5) * t24 * t73;
t76 = -xDP(4) * t35 + xDP(6) * t69 + t75;
t80 = t18 * t24 + t26 * t66;
t83 = t26 * xDP(5) * t73;
t84 = xDP(6) * t80 + t45 + t83;
t94 = xDDP(1) + xDDP(5) * (t24 * t31 + t26 * t35) + xDDP(6) * (t21 * t24 * t35 - t21 * t26 * t31) + xDP(5) * (t24 * xDP(4) * t35 - t26 * t45) + xDP(6) * (t55 * t31 + t61 * t35) + xDP(5) * (t24 * t76 + t26 * t84) + xDP(6) * (t21 * t24 * t84 - t21 * t26 * t76);
t98 = t2 * t6;
t99 = t5 * t3 - t98;
t100 = cos(legFrame(1,1));
t102 = sin(legFrame(1,2));
t103 = sin(legFrame(1,1));
t104 = t103 * t102;
t106 = t100 * t99 - t8 * t104;
t107 = t1 * t106;
t109 = -t19 * t18 - t22;
t111 = t24 * t109 - t30;
t113 = t16 * t21;
t115 = t14 * t21;
t117 = koppelP(1,1) * t113 - koppelP(1,2) * t115 + t71;
t136 = xDP(4) * (-t29 * t24 + t33) - xDP(6) * t69 - t75;
t139 = t21 * xDP(6);
t140 = t29 * t139;
t141 = -xDP(5) * t109 - t140;
t149 = xDDP(2) + xDDP(4) * t111 + xDDP(5) * t26 * t117 + xDDP(6) * (t21 * t24 * t117 + t19 * t111) + t59 * xDP(4) * t117 + xDP(6) * (t21 * xDP(5) * t111 + t61 * t117) + xDP(4) * t136 + xDP(5) * t26 * t141 + xDP(6) * (t21 * t24 * t141 + t19 * t136);
t155 = t100 * t8 * t102 + t99 * t103;
t156 = t1 * t155;
t158 = t26 * t109 + t34;
t178 = xDP(4) * (-t29 * t26 - t25) - xDP(6) * t80 - t83;
t181 = xDP(5) * t109 + t140;
t189 = xDDP(3) + xDDP(4) * t158 - xDDP(5) * t24 * t117 + xDDP(6) * (t21 * t26 * t117 + t19 * t158) + t53 * xDP(4) * t117 + xDP(6) * (t21 * xDP(5) * t158 - t55 * t117) + xDP(4) * t178 + xDP(5) * t24 * t181 + xDP(6) * (-t21 * t26 * t181 + t19 * t178);
t192 = cos(qJ(2,1));
t193 = t21 * xDP(5);
t195 = koppelP(1,2) * xDP(6);
t198 = t19 * t195 - koppelP(1,1) * t193 + xDP(4) * koppelP(1,2);
t200 = t14 * xDP(6);
t203 = koppelP(1,1) * t200 - xDP(5) * koppelP(1,3);
t208 = (koppelP(1,2) * t193 + xDP(4) * koppelP(1,1)) * t14;
t209 = t16 * t198 + t19 * t203 + t208;
t210 = t209 * t5;
t212 = xDP(4) * t19;
t213 = t212 + xDP(6);
t217 = t21 * xDP(4);
t220 = -t16 * t213 * koppelP(1,1) + t14 * t195 + t15 * t212 + koppelP(1,3) * t217;
t221 = t2 * t220;
t224 = t209 * t2;
t226 = t220 * t5;
t229 = t3 * (-t102 * t210 - t221) - t6 * (-t102 * t224 + t226);
t232 = t102 * t226 - t224;
t236 = t6 * (t102 * t221 + t210);
t239 = t5 * xDP(3);
t241 = t2 * xDP(2);
t244 = t2 * xDP(3);
t246 = t5 * xDP(2);
t264 = t19 * xDP(5);
t272 = t16 * (-koppelP(1,2) * t139 - koppelP(1,1) * t264) + t15 * t264 - t27 * t139 + koppelP(1,3) * t193 + xDP(1);
t274 = t100 * (t24 * t229 + t26 * (t3 * t232 - t236) + t3 * (-t102 * t239 + t241) + (t102 * t244 + t246) * t6) + t103 * (t24 * (-t3 * t232 + t236) + t26 * t229 + t3 * (t102 * t246 + t244) - (t102 * t241 - t239) * t6) + t272 * t10 * t99;
t278 = t24 * t209 - t26 * t220 + xDP(3);
t286 = -t24 * t220 + t26 * (-t16 * t198 - t19 * t203 - t208) + xDP(2);
t290 = t100 * t278 * t10 - t103 * t286 * t10 + t272 * t102;
t292 = t11 * t290 + t192 * t274;
t293 = t292 * t192;
t296 = t11 * t274 - t290 * t192;
t299 = qJ(3,1) ^ 2;
t300 = 0.1e1 / t299;
t302 = t11 ^ 2;
t303 = 0.1e1 / t302;
t306 = t100 * t286 + t278 * t103;
t313 = -t100 * t102 * t278 + t103 * t286 * t102 + t10 * t272;
t321 = t3 * (-t313 * t2 + t5 * t306) - (t2 * t306 + t5 * t313) * t6;
t324 = t321 * t192;
t325 = t303 * t300;
t328 = t300 * t321;
t329 = t296 * t12;
t331 = -t94 * t13 * t9 + t149 * t12 * t107 + t189 * t12 * t156 - t321 * t303 * t300 * (t11 * t296 + t293) - t292 * t325 * t324 - t329 * t328;
t334 = 0.1e1 / qJ(3,2);
t335 = sin(qJ(1,2));
t336 = cos(legFrame(2,3));
t338 = cos(qJ(1,2));
t339 = sin(legFrame(2,3));
t341 = t336 * t335 + t339 * t338;
t342 = t341 * t334;
t343 = cos(legFrame(2,2));
t344 = sin(qJ(2,2));
t345 = 0.1e1 / t344;
t346 = t345 * t343;
t347 = koppelP(2,2) * t14;
t349 = -t16 * koppelP(2,1) + t347;
t351 = koppelP(2,3) * t21;
t352 = t19 * t349 + t351;
t353 = t24 * t352;
t354 = koppelP(2,1) * t14;
t356 = t16 * koppelP(2,2) + t354;
t357 = t356 * t26;
t358 = t353 + t357;
t360 = t26 * t352;
t361 = t356 * t24;
t362 = t360 - t361;
t372 = xDP(4) * t358;
t383 = t356 * t19;
t386 = t24 * t383 - t349 * t26;
t388 = koppelP(2,3) * t19;
t390 = t349 * t21 - t388;
t392 = xDP(5) * t24 * t390;
t393 = -xDP(4) * t362 + xDP(6) * t386 + t392;
t397 = t349 * t24 + t26 * t383;
t400 = t26 * xDP(5) * t390;
t401 = xDP(6) * t397 + t372 + t400;
t411 = xDDP(1) + xDDP(5) * (t24 * t358 + t26 * t362) + xDDP(6) * (t21 * t24 * t362 - t21 * t26 * t358) + xDP(5) * (t24 * xDP(4) * t362 - t26 * t372) + xDP(6) * (t55 * t358 + t61 * t362) + xDP(5) * (t24 * t393 + t26 * t401) + xDP(6) * (t21 * t24 * t401 - t21 * t26 * t393);
t415 = t335 * t339;
t416 = t338 * t336 - t415;
t417 = cos(legFrame(2,1));
t419 = sin(legFrame(2,2));
t420 = sin(legFrame(2,1));
t421 = t420 * t419;
t423 = -t341 * t421 + t417 * t416;
t424 = t334 * t423;
t426 = -t19 * t349 - t351;
t428 = t24 * t426 - t357;
t432 = koppelP(2,1) * t113 - koppelP(2,2) * t115 + t388;
t451 = xDP(4) * (-t356 * t24 + t360) - xDP(6) * t386 - t392;
t454 = t356 * t139;
t455 = -xDP(5) * t426 - t454;
t463 = xDDP(2) + xDDP(4) * t428 + xDDP(5) * t26 * t432 + xDDP(6) * (t21 * t24 * t432 + t19 * t428) + t59 * xDP(4) * t432 + xDP(6) * (t21 * xDP(5) * t428 + t61 * t432) + xDP(4) * t451 + xDP(5) * t26 * t455 + xDP(6) * (t21 * t24 * t455 + t19 * t451);
t469 = t417 * t341 * t419 + t416 * t420;
t470 = t334 * t469;
t472 = t26 * t426 + t361;
t492 = xDP(4) * (-t356 * t26 - t353) - xDP(6) * t397 - t400;
t495 = xDP(5) * t426 + t454;
t503 = xDDP(3) + xDDP(4) * t472 - xDDP(5) * t24 * t432 + xDDP(6) * (t21 * t26 * t432 + t19 * t472) + t53 * xDP(4) * t432 + xDP(6) * (t21 * xDP(5) * t472 - t55 * t432) + xDP(4) * t492 + xDP(5) * t24 * t495 + xDP(6) * (-t21 * t26 * t495 + t19 * t492);
t506 = cos(qJ(2,2));
t508 = koppelP(2,2) * xDP(6);
t511 = t19 * t508 - koppelP(2,1) * t193 + xDP(4) * koppelP(2,2);
t515 = koppelP(2,1) * t200 - xDP(5) * koppelP(2,3);
t520 = (koppelP(2,2) * t193 + xDP(4) * koppelP(2,1)) * t14;
t521 = t16 * t511 + t19 * t515 + t520;
t522 = t521 * t338;
t529 = -t16 * t213 * koppelP(2,1) + t14 * t508 + t347 * t212 + koppelP(2,3) * t217;
t530 = t335 * t529;
t533 = t521 * t335;
t535 = t529 * t338;
t538 = t336 * (-t419 * t522 - t530) - t339 * (-t419 * t533 + t535);
t541 = t419 * t535 - t533;
t545 = t339 * (t419 * t530 + t522);
t548 = t338 * xDP(3);
t550 = t335 * xDP(2);
t553 = t335 * xDP(3);
t555 = t338 * xDP(2);
t580 = t16 * (-koppelP(2,2) * t139 - koppelP(2,1) * t264) + t347 * t264 - t354 * t139 + koppelP(2,3) * t193 + xDP(1);
t582 = t417 * (t24 * t538 + t26 * (t336 * t541 - t545) + t336 * (-t419 * t548 + t550) + (t419 * t553 + t555) * t339) + t420 * (t24 * (-t336 * t541 + t545) + t26 * t538 + t336 * (t419 * t555 + t553) - (t419 * t550 - t548) * t339) + t580 * t343 * t416;
t586 = t24 * t521 - t26 * t529 + xDP(3);
t594 = -t24 * t529 + t26 * (-t16 * t511 - t19 * t515 - t520) + xDP(2);
t598 = t417 * t586 * t343 - t420 * t594 * t343 + t580 * t419;
t600 = t344 * t598 + t506 * t582;
t601 = t600 * t506;
t604 = t344 * t582 - t598 * t506;
t607 = qJ(3,2) ^ 2;
t608 = 0.1e1 / t607;
t610 = t344 ^ 2;
t611 = 0.1e1 / t610;
t614 = t417 * t594 + t586 * t420;
t621 = -t417 * t419 * t586 + t420 * t594 * t419 + t343 * t580;
t629 = t336 * (-t621 * t335 + t338 * t614) - (t335 * t614 + t338 * t621) * t339;
t632 = t629 * t506;
t633 = t611 * t608;
t636 = t608 * t629;
t637 = t604 * t345;
t639 = -t411 * t346 * t342 + t463 * t345 * t424 + t503 * t345 * t470 - t629 * t611 * t608 * (t344 * t604 + t601) - t600 * t633 * t632 - t637 * t636;
t642 = 0.1e1 / qJ(3,3);
t643 = sin(qJ(1,3));
t644 = cos(legFrame(3,3));
t646 = cos(qJ(1,3));
t647 = sin(legFrame(3,3));
t649 = t644 * t643 + t647 * t646;
t650 = t649 * t642;
t651 = cos(legFrame(3,2));
t652 = sin(qJ(2,3));
t653 = 0.1e1 / t652;
t654 = t653 * t651;
t655 = koppelP(3,2) * t14;
t657 = -t16 * koppelP(3,1) + t655;
t659 = koppelP(3,3) * t21;
t660 = t19 * t657 + t659;
t661 = t24 * t660;
t662 = koppelP(3,1) * t14;
t664 = t16 * koppelP(3,2) + t662;
t665 = t664 * t26;
t666 = t661 + t665;
t668 = t26 * t660;
t669 = t664 * t24;
t670 = t668 - t669;
t680 = xDP(4) * t666;
t691 = t664 * t19;
t694 = t24 * t691 - t657 * t26;
t696 = koppelP(3,3) * t19;
t698 = t657 * t21 - t696;
t700 = xDP(5) * t24 * t698;
t701 = -xDP(4) * t670 + xDP(6) * t694 + t700;
t705 = t657 * t24 + t26 * t691;
t708 = t26 * xDP(5) * t698;
t709 = xDP(6) * t705 + t680 + t708;
t719 = xDDP(1) + xDDP(5) * (t24 * t666 + t26 * t670) + xDDP(6) * (t21 * t24 * t670 - t21 * t26 * t666) + xDP(5) * (t24 * xDP(4) * t670 - t26 * t680) + xDP(6) * (t55 * t666 + t61 * t670) + xDP(5) * (t24 * t701 + t26 * t709) + xDP(6) * (t21 * t24 * t709 - t21 * t26 * t701);
t723 = t643 * t647;
t724 = t646 * t644 - t723;
t725 = cos(legFrame(3,1));
t727 = sin(legFrame(3,2));
t728 = sin(legFrame(3,1));
t729 = t728 * t727;
t731 = -t649 * t729 + t725 * t724;
t732 = t642 * t731;
t734 = -t19 * t657 - t659;
t736 = t24 * t734 - t665;
t740 = koppelP(3,1) * t113 - koppelP(3,2) * t115 + t696;
t759 = xDP(4) * (-t664 * t24 + t668) - xDP(6) * t694 - t700;
t762 = t664 * t139;
t763 = -xDP(5) * t734 - t762;
t771 = xDDP(2) + xDDP(4) * t736 + xDDP(5) * t26 * t740 + xDDP(6) * (t21 * t24 * t740 + t19 * t736) + t59 * xDP(4) * t740 + xDP(6) * (t21 * xDP(5) * t736 + t61 * t740) + xDP(4) * t759 + xDP(5) * t26 * t763 + xDP(6) * (t21 * t24 * t763 + t19 * t759);
t777 = t725 * t649 * t727 + t724 * t728;
t778 = t642 * t777;
t780 = t26 * t734 + t669;
t800 = xDP(4) * (-t664 * t26 - t661) - xDP(6) * t705 - t708;
t803 = xDP(5) * t734 + t762;
t811 = xDDP(3) + xDDP(4) * t780 - xDDP(5) * t24 * t740 + xDDP(6) * (t21 * t26 * t740 + t19 * t780) + t53 * xDP(4) * t740 + xDP(6) * (t21 * xDP(5) * t780 - t55 * t740) + xDP(4) * t800 + xDP(5) * t24 * t803 + xDP(6) * (-t21 * t26 * t803 + t19 * t800);
t814 = cos(qJ(2,3));
t816 = koppelP(3,2) * xDP(6);
t819 = t19 * t816 - koppelP(3,1) * t193 + xDP(4) * koppelP(3,2);
t823 = koppelP(3,1) * t200 - xDP(5) * koppelP(3,3);
t828 = (koppelP(3,2) * t193 + xDP(4) * koppelP(3,1)) * t14;
t829 = t16 * t819 + t19 * t823 + t828;
t830 = t829 * t646;
t837 = -t16 * t213 * koppelP(3,1) + t14 * t816 + t655 * t212 + koppelP(3,3) * t217;
t838 = t643 * t837;
t841 = t829 * t643;
t843 = t837 * t646;
t846 = t644 * (-t727 * t830 - t838) - t647 * (-t727 * t841 + t843);
t849 = t727 * t843 - t841;
t853 = t647 * (t727 * t838 + t830);
t856 = t646 * xDP(3);
t858 = t643 * xDP(2);
t861 = t643 * xDP(3);
t863 = t646 * xDP(2);
t888 = t16 * (-koppelP(3,2) * t139 - koppelP(3,1) * t264) + t655 * t264 - t662 * t139 + koppelP(3,3) * t193 + xDP(1);
t890 = t725 * (t24 * t846 + t26 * (t644 * t849 - t853) + t644 * (-t727 * t856 + t858) + (t727 * t861 + t863) * t647) + t728 * (t24 * (-t644 * t849 + t853) + t26 * t846 + t644 * (t727 * t863 + t861) - (t727 * t858 - t856) * t647) + t888 * t651 * t724;
t894 = t24 * t829 - t26 * t837 + xDP(3);
t902 = -t24 * t837 + t26 * (-t16 * t819 - t19 * t823 - t828) + xDP(2);
t906 = t725 * t894 * t651 - t728 * t902 * t651 + t888 * t727;
t908 = t652 * t906 + t814 * t890;
t909 = t908 * t814;
t912 = t652 * t890 - t906 * t814;
t915 = qJ(3,3) ^ 2;
t916 = 0.1e1 / t915;
t918 = t652 ^ 2;
t919 = 0.1e1 / t918;
t922 = t725 * t902 + t894 * t728;
t929 = -t725 * t727 * t894 + t728 * t902 * t727 + t651 * t888;
t937 = t644 * (-t929 * t643 + t646 * t922) - (t643 * t922 + t646 * t929) * t647;
t940 = t937 * t814;
t941 = t919 * t916;
t944 = t916 * t937;
t945 = t912 * t653;
t947 = -t719 * t654 * t650 + t771 * t653 * t732 + t811 * t653 * t778 - t937 * t919 * t916 * (t652 * t912 + t909) - t908 * t941 * t940 - t945 * t944;
t950 = 0.1e1 / qJ(3,4);
t951 = sin(qJ(1,4));
t952 = cos(legFrame(4,3));
t954 = cos(qJ(1,4));
t955 = sin(legFrame(4,3));
t957 = t952 * t951 + t955 * t954;
t958 = t957 * t950;
t959 = cos(legFrame(4,2));
t960 = sin(qJ(2,4));
t961 = 0.1e1 / t960;
t962 = t961 * t959;
t963 = koppelP(4,2) * t14;
t965 = -t16 * koppelP(4,1) + t963;
t967 = koppelP(4,3) * t21;
t968 = t19 * t965 + t967;
t969 = t24 * t968;
t970 = koppelP(4,1) * t14;
t972 = t16 * koppelP(4,2) + t970;
t973 = t972 * t26;
t974 = t969 + t973;
t976 = t26 * t968;
t977 = t972 * t24;
t978 = t976 - t977;
t988 = xDP(4) * t974;
t999 = t972 * t19;
t1002 = t24 * t999 - t965 * t26;
t1004 = koppelP(4,3) * t19;
t1006 = t965 * t21 - t1004;
t1008 = xDP(5) * t24 * t1006;
t1009 = xDP(6) * t1002 - xDP(4) * t978 + t1008;
t1013 = t965 * t24 + t26 * t999;
t1016 = t26 * xDP(5) * t1006;
t1017 = xDP(6) * t1013 + t1016 + t988;
t1027 = xDDP(1) + xDDP(5) * (t24 * t974 + t26 * t978) + xDDP(6) * (t21 * t24 * t978 - t21 * t26 * t974) + xDP(5) * (t24 * xDP(4) * t978 - t26 * t988) + xDP(6) * (t55 * t974 + t61 * t978) + xDP(5) * (t24 * t1009 + t26 * t1017) + xDP(6) * (-t21 * t26 * t1009 + t21 * t24 * t1017);
t1032 = -t951 * t955 + t954 * t952;
t1033 = cos(legFrame(4,1));
t1035 = sin(legFrame(4,2));
t1036 = sin(legFrame(4,1));
t1039 = -t957 * t1036 * t1035 + t1033 * t1032;
t1040 = t950 * t1039;
t1042 = -t19 * t965 - t967;
t1044 = t24 * t1042 - t973;
t1048 = koppelP(4,1) * t113 - koppelP(4,2) * t115 + t1004;
t1067 = xDP(4) * (-t972 * t24 + t976) - xDP(6) * t1002 - t1008;
t1070 = t972 * t139;
t1071 = -xDP(5) * t1042 - t1070;
t1079 = xDDP(2) + xDDP(4) * t1044 + xDDP(5) * t26 * t1048 + xDDP(6) * (t21 * t24 * t1048 + t19 * t1044) + t59 * xDP(4) * t1048 + xDP(6) * (t21 * xDP(5) * t1044 + t61 * t1048) + xDP(4) * t1067 + xDP(5) * t26 * t1071 + xDP(6) * (t21 * t24 * t1071 + t19 * t1067);
t1085 = t1033 * t957 * t1035 + t1032 * t1036;
t1086 = t950 * t1085;
t1088 = t26 * t1042 + t977;
t1108 = xDP(4) * (-t972 * t26 - t969) - xDP(6) * t1013 - t1016;
t1111 = xDP(5) * t1042 + t1070;
t1119 = xDDP(3) + xDDP(4) * t1088 - xDDP(5) * t24 * t1048 + xDDP(6) * (t21 * t26 * t1048 + t19 * t1088) + t53 * xDP(4) * t1048 + xDP(6) * (t21 * xDP(5) * t1088 - t55 * t1048) + xDP(4) * t1108 + xDP(5) * t24 * t1111 + xDP(6) * (-t21 * t26 * t1111 + t19 * t1108);
t1122 = cos(qJ(2,4));
t1124 = koppelP(4,2) * xDP(6);
t1127 = t19 * t1124 - koppelP(4,1) * t193 + xDP(4) * koppelP(4,2);
t1131 = koppelP(4,1) * t200 - xDP(5) * koppelP(4,3);
t1136 = (koppelP(4,2) * t193 + xDP(4) * koppelP(4,1)) * t14;
t1137 = t16 * t1127 + t19 * t1131 + t1136;
t1138 = t1137 * t954;
t1145 = -t16 * t213 * koppelP(4,1) + t14 * t1124 + t963 * t212 + koppelP(4,3) * t217;
t1146 = t1145 * t951;
t1149 = t1137 * t951;
t1151 = t1145 * t954;
t1154 = t952 * (-t1035 * t1138 - t1146) - (-t1035 * t1149 + t1151) * t955;
t1157 = t1035 * t1151 - t1149;
t1161 = (t1035 * t1146 + t1138) * t955;
t1164 = t954 * xDP(3);
t1166 = t951 * xDP(2);
t1169 = t951 * xDP(3);
t1171 = t954 * xDP(2);
t1196 = t16 * (-koppelP(4,2) * t139 - koppelP(4,1) * t264) + t963 * t264 - t970 * t139 + koppelP(4,3) * t193 + xDP(1);
t1198 = t1033 * (t24 * t1154 + t26 * (t952 * t1157 - t1161) + t952 * (-t1035 * t1164 + t1166) + (t1035 * t1169 + t1171) * t955) + t1036 * (t24 * (-t952 * t1157 + t1161) + t26 * t1154 + t952 * (t1035 * t1171 + t1169) - (t1035 * t1166 - t1164) * t955) + t1196 * t1032 * t959;
t1202 = t24 * t1137 - t26 * t1145 + xDP(3);
t1210 = -t24 * t1145 + t26 * (-t16 * t1127 - t19 * t1131 - t1136) + xDP(2);
t1214 = t1033 * t1202 * t959 - t1036 * t1210 * t959 + t1196 * t1035;
t1216 = t1122 * t1198 + t1214 * t960;
t1217 = t1216 * t1122;
t1220 = -t1122 * t1214 + t960 * t1198;
t1223 = qJ(3,4) ^ 2;
t1224 = 0.1e1 / t1223;
t1226 = t960 ^ 2;
t1227 = 0.1e1 / t1226;
t1230 = t1033 * t1210 + t1202 * t1036;
t1237 = -t1033 * t1035 * t1202 + t1036 * t1210 * t1035 + t959 * t1196;
t1245 = t952 * (t954 * t1230 - t1237 * t951) - t955 * (t951 * t1230 + t1237 * t954);
t1248 = t1245 * t1122;
t1249 = t1224 * t1227;
t1252 = t961 * t1245;
t1253 = t1220 * t1224;
t1255 = -t1027 * t962 * t958 + t1079 * t961 * t1040 + t1119 * t961 * t1086 - t1245 * t1227 * t1224 * (t960 * t1220 + t1217) - t1216 * t1249 * t1248 - t1253 * t1252;
t1258 = 0.1e1 / qJ(3,5);
t1259 = sin(qJ(1,5));
t1260 = cos(legFrame(5,3));
t1262 = cos(qJ(1,5));
t1263 = sin(legFrame(5,3));
t1265 = t1260 * t1259 + t1263 * t1262;
t1266 = t1265 * t1258;
t1267 = cos(legFrame(5,2));
t1268 = sin(qJ(2,5));
t1269 = 0.1e1 / t1268;
t1270 = t1269 * t1267;
t1271 = koppelP(5,2) * t14;
t1273 = -t16 * koppelP(5,1) + t1271;
t1275 = koppelP(5,3) * t21;
t1276 = t19 * t1273 + t1275;
t1277 = t24 * t1276;
t1278 = koppelP(5,1) * t14;
t1280 = t16 * koppelP(5,2) + t1278;
t1281 = t1280 * t26;
t1282 = t1277 + t1281;
t1284 = t26 * t1276;
t1285 = t1280 * t24;
t1286 = t1284 - t1285;
t1296 = xDP(4) * t1282;
t1307 = t1280 * t19;
t1310 = -t1273 * t26 + t24 * t1307;
t1312 = koppelP(5,3) * t19;
t1314 = t1273 * t21 - t1312;
t1316 = xDP(5) * t24 * t1314;
t1317 = -xDP(4) * t1286 + xDP(6) * t1310 + t1316;
t1321 = t1273 * t24 + t26 * t1307;
t1324 = t26 * xDP(5) * t1314;
t1325 = xDP(6) * t1321 + t1296 + t1324;
t1335 = xDDP(1) + xDDP(5) * (t24 * t1282 + t26 * t1286) + xDDP(6) * (-t21 * t26 * t1282 + t21 * t24 * t1286) + xDP(5) * (t24 * xDP(4) * t1286 - t26 * t1296) + xDP(6) * (t55 * t1282 + t61 * t1286) + xDP(5) * (t24 * t1317 + t26 * t1325) + xDP(6) * (-t21 * t26 * t1317 + t21 * t24 * t1325);
t1339 = t1259 * t1263;
t1340 = t1262 * t1260 - t1339;
t1341 = cos(legFrame(5,1));
t1343 = sin(legFrame(5,2));
t1344 = sin(legFrame(5,1));
t1347 = -t1265 * t1344 * t1343 + t1341 * t1340;
t1348 = t1258 * t1347;
t1350 = -t19 * t1273 - t1275;
t1352 = t24 * t1350 - t1281;
t1356 = koppelP(5,1) * t113 - koppelP(5,2) * t115 + t1312;
t1375 = xDP(4) * (-t1280 * t24 + t1284) - xDP(6) * t1310 - t1316;
t1378 = t1280 * t139;
t1379 = -xDP(5) * t1350 - t1378;
t1387 = xDDP(2) + xDDP(4) * t1352 + xDDP(5) * t26 * t1356 + xDDP(6) * (t21 * t24 * t1356 + t19 * t1352) + t59 * xDP(4) * t1356 + xDP(6) * (t21 * xDP(5) * t1352 + t61 * t1356) + xDP(4) * t1375 + xDP(5) * t26 * t1379 + xDP(6) * (t21 * t24 * t1379 + t19 * t1375);
t1393 = t1341 * t1265 * t1343 + t1340 * t1344;
t1394 = t1258 * t1393;
t1396 = t26 * t1350 + t1285;
t1416 = xDP(4) * (-t1280 * t26 - t1277) - xDP(6) * t1321 - t1324;
t1419 = xDP(5) * t1350 + t1378;
t1427 = xDDP(3) + xDDP(4) * t1396 - xDDP(5) * t24 * t1356 + xDDP(6) * (t21 * t26 * t1356 + t19 * t1396) + t53 * xDP(4) * t1356 + xDP(6) * (t21 * xDP(5) * t1396 - t55 * t1356) + xDP(4) * t1416 + xDP(5) * t24 * t1419 + xDP(6) * (-t21 * t26 * t1419 + t19 * t1416);
t1430 = cos(qJ(2,5));
t1432 = koppelP(5,2) * xDP(6);
t1435 = t19 * t1432 - koppelP(5,1) * t193 + xDP(4) * koppelP(5,2);
t1439 = koppelP(5,1) * t200 - xDP(5) * koppelP(5,3);
t1444 = (koppelP(5,2) * t193 + xDP(4) * koppelP(5,1)) * t14;
t1445 = t16 * t1435 + t19 * t1439 + t1444;
t1446 = t1445 * t1262;
t1453 = -t16 * t213 * koppelP(5,1) + t1271 * t212 + t14 * t1432 + koppelP(5,3) * t217;
t1454 = t1453 * t1259;
t1457 = t1445 * t1259;
t1459 = t1453 * t1262;
t1462 = t1260 * (-t1343 * t1446 - t1454) - (-t1343 * t1457 + t1459) * t1263;
t1465 = t1343 * t1459 - t1457;
t1469 = (t1343 * t1454 + t1446) * t1263;
t1472 = t1262 * xDP(3);
t1474 = t1259 * xDP(2);
t1477 = t1259 * xDP(3);
t1479 = t1262 * xDP(2);
t1504 = t16 * (-koppelP(5,2) * t139 - koppelP(5,1) * t264) + t1271 * t264 - t1278 * t139 + koppelP(5,3) * t193 + xDP(1);
t1506 = t1341 * (t24 * t1462 + t26 * (t1260 * t1465 - t1469) + t1260 * (-t1343 * t1472 + t1474) + (t1343 * t1477 + t1479) * t1263) + t1344 * (t24 * (-t1260 * t1465 + t1469) + t26 * t1462 + t1260 * (t1343 * t1479 + t1477) - (t1343 * t1474 - t1472) * t1263) + t1504 * t1340 * t1267;
t1510 = t24 * t1445 - t26 * t1453 + xDP(3);
t1518 = -t24 * t1453 + t26 * (-t16 * t1435 - t19 * t1439 - t1444) + xDP(2);
t1522 = t1341 * t1510 * t1267 - t1344 * t1518 * t1267 + t1504 * t1343;
t1524 = t1522 * t1268 + t1430 * t1506;
t1525 = t1524 * t1430;
t1528 = t1268 * t1506 - t1430 * t1522;
t1531 = qJ(3,5) ^ 2;
t1532 = 0.1e1 / t1531;
t1534 = t1268 ^ 2;
t1535 = 0.1e1 / t1534;
t1538 = t1341 * t1518 + t1510 * t1344;
t1545 = -t1341 * t1343 * t1510 + t1344 * t1518 * t1343 + t1267 * t1504;
t1553 = t1260 * (-t1545 * t1259 + t1262 * t1538) - t1263 * (t1259 * t1538 + t1262 * t1545);
t1556 = t1553 * t1430;
t1557 = t1532 * t1535;
t1560 = t1269 * t1553;
t1561 = t1528 * t1532;
t1563 = -t1335 * t1270 * t1266 + t1387 * t1269 * t1348 + t1427 * t1269 * t1394 - t1553 * t1535 * t1532 * (t1268 * t1528 + t1525) - t1524 * t1557 * t1556 - t1561 * t1560;
t1566 = 0.1e1 / qJ(3,6);
t1567 = sin(qJ(1,6));
t1568 = cos(legFrame(6,3));
t1570 = cos(qJ(1,6));
t1571 = sin(legFrame(6,3));
t1573 = t1568 * t1567 + t1571 * t1570;
t1574 = t1573 * t1566;
t1575 = cos(legFrame(6,2));
t1576 = sin(qJ(2,6));
t1577 = 0.1e1 / t1576;
t1578 = t1577 * t1575;
t1579 = koppelP(6,2) * t14;
t1581 = -t16 * koppelP(6,1) + t1579;
t1583 = koppelP(6,3) * t21;
t1584 = t19 * t1581 + t1583;
t1585 = t24 * t1584;
t1586 = koppelP(6,1) * t14;
t1588 = t16 * koppelP(6,2) + t1586;
t1589 = t1588 * t26;
t1590 = t1585 + t1589;
t1592 = t26 * t1584;
t1593 = t1588 * t24;
t1594 = t1592 - t1593;
t1604 = xDP(4) * t1590;
t1615 = t1588 * t19;
t1618 = -t1581 * t26 + t24 * t1615;
t1620 = koppelP(6,3) * t19;
t1622 = t1581 * t21 - t1620;
t1624 = xDP(5) * t24 * t1622;
t1625 = -xDP(4) * t1594 + xDP(6) * t1618 + t1624;
t1629 = t1581 * t24 + t26 * t1615;
t1632 = t26 * xDP(5) * t1622;
t1633 = xDP(6) * t1629 + t1604 + t1632;
t1643 = xDDP(1) + xDDP(5) * (t24 * t1590 + t26 * t1594) + xDDP(6) * (-t21 * t26 * t1590 + t21 * t24 * t1594) + xDP(5) * (t24 * xDP(4) * t1594 - t26 * t1604) + xDP(6) * (t55 * t1590 + t61 * t1594) + xDP(5) * (t24 * t1625 + t26 * t1633) + xDP(6) * (-t21 * t26 * t1625 + t21 * t24 * t1633);
t1647 = t1567 * t1571;
t1648 = t1570 * t1568 - t1647;
t1649 = cos(legFrame(6,1));
t1651 = sin(legFrame(6,2));
t1652 = sin(legFrame(6,1));
t1655 = -t1573 * t1652 * t1651 + t1649 * t1648;
t1656 = t1566 * t1655;
t1658 = -t19 * t1581 - t1583;
t1660 = t24 * t1658 - t1589;
t1664 = koppelP(6,1) * t113 - koppelP(6,2) * t115 + t1620;
t1683 = xDP(4) * (-t1588 * t24 + t1592) - xDP(6) * t1618 - t1624;
t1686 = t1588 * t139;
t1687 = -xDP(5) * t1658 - t1686;
t1695 = xDDP(2) + xDDP(4) * t1660 + xDDP(5) * t26 * t1664 + xDDP(6) * (t21 * t24 * t1664 + t19 * t1660) + t59 * xDP(4) * t1664 + xDP(6) * (t21 * xDP(5) * t1660 + t61 * t1664) + xDP(4) * t1683 + xDP(5) * t26 * t1687 + xDP(6) * (t21 * t24 * t1687 + t19 * t1683);
t1701 = t1649 * t1573 * t1651 + t1648 * t1652;
t1702 = t1566 * t1701;
t1704 = t26 * t1658 + t1593;
t1724 = xDP(4) * (-t1588 * t26 - t1585) - xDP(6) * t1629 - t1632;
t1727 = xDP(5) * t1658 + t1686;
t1735 = xDDP(3) + xDDP(4) * t1704 - xDDP(5) * t24 * t1664 + xDDP(6) * (t21 * t26 * t1664 + t19 * t1704) + t53 * xDP(4) * t1664 + xDP(6) * (t21 * xDP(5) * t1704 - t55 * t1664) + xDP(4) * t1724 + xDP(5) * t24 * t1727 + xDP(6) * (-t21 * t26 * t1727 + t19 * t1724);
t1738 = cos(qJ(2,6));
t1740 = koppelP(6,2) * xDP(6);
t1743 = t19 * t1740 - koppelP(6,1) * t193 + xDP(4) * koppelP(6,2);
t1747 = koppelP(6,1) * t200 - xDP(5) * koppelP(6,3);
t1752 = (koppelP(6,2) * t193 + xDP(4) * koppelP(6,1)) * t14;
t1753 = t16 * t1743 + t19 * t1747 + t1752;
t1754 = t1753 * t1570;
t1761 = -t16 * t213 * koppelP(6,1) + t14 * t1740 + t1579 * t212 + koppelP(6,3) * t217;
t1762 = t1761 * t1567;
t1765 = t1753 * t1567;
t1767 = t1761 * t1570;
t1770 = t1568 * (-t1651 * t1754 - t1762) - (-t1651 * t1765 + t1767) * t1571;
t1773 = t1651 * t1767 - t1765;
t1777 = (t1651 * t1762 + t1754) * t1571;
t1780 = t1570 * xDP(3);
t1782 = t1567 * xDP(2);
t1785 = t1567 * xDP(3);
t1787 = t1570 * xDP(2);
t1812 = t16 * (-koppelP(6,2) * t139 - koppelP(6,1) * t264) + t1579 * t264 - t1586 * t139 + koppelP(6,3) * t193 + xDP(1);
t1814 = t1649 * (t24 * t1770 + t26 * (t1568 * t1773 - t1777) + t1568 * (-t1651 * t1780 + t1782) + (t1651 * t1785 + t1787) * t1571) + t1652 * (t24 * (-t1568 * t1773 + t1777) + t26 * t1770 + t1568 * (t1651 * t1787 + t1785) - (t1651 * t1782 - t1780) * t1571) + t1812 * t1648 * t1575;
t1818 = t24 * t1753 - t26 * t1761 + xDP(3);
t1826 = -t24 * t1761 + t26 * (-t16 * t1743 - t19 * t1747 - t1752) + xDP(2);
t1830 = t1649 * t1818 * t1575 - t1652 * t1826 * t1575 + t1812 * t1651;
t1832 = t1830 * t1576 + t1738 * t1814;
t1833 = t1832 * t1738;
t1836 = t1576 * t1814 - t1738 * t1830;
t1839 = qJ(3,6) ^ 2;
t1840 = 0.1e1 / t1839;
t1842 = t1576 ^ 2;
t1843 = 0.1e1 / t1842;
t1846 = t1649 * t1826 + t1818 * t1652;
t1853 = -t1649 * t1651 * t1818 + t1652 * t1826 * t1651 + t1575 * t1812;
t1861 = t1568 * (-t1853 * t1567 + t1570 * t1846) - t1571 * (t1567 * t1846 + t1570 * t1853);
t1864 = t1861 * t1738;
t1865 = t1840 * t1843;
t1868 = t1577 * t1861;
t1869 = t1836 * t1840;
t1871 = -t1643 * t1578 * t1574 + t1695 * t1577 * t1656 + t1735 * t1577 * t1702 - t1861 * t1843 * t1840 * (t1576 * t1836 + t1833) - t1832 * t1865 * t1864 - t1869 * t1868;
t1877 = -t100 * g(2) - g(3) * t103;
t1879 = g(2) * t102;
t1881 = g(3) * t102;
t1883 = t10 * g(1);
t1884 = -t100 * t1881 + t103 * t1879 + t1883;
t1886 = t5 * t1877 + t1884 * t2;
t1887 = t3 * t1886;
t1889 = -t1877 * t2;
t1890 = t5 * t1884 + t1889;
t1891 = t6 * t1890;
t1892 = t1887 + t1891;
t1897 = -t417 * g(2) - g(3) * t420;
t1899 = g(2) * t419;
t1901 = t417 * t419;
t1903 = t343 * g(1);
t1904 = -g(3) * t1901 + t420 * t1899 + t1903;
t1906 = t338 * t1897 + t1904 * t335;
t1907 = t336 * t1906;
t1909 = -t1897 * t335;
t1910 = t338 * t1904 + t1909;
t1911 = t339 * t1910;
t1912 = t1907 + t1911;
t1917 = -t725 * g(2) - g(3) * t728;
t1919 = g(2) * t727;
t1921 = g(3) * t727;
t1923 = t651 * g(1);
t1924 = t728 * t1919 - t725 * t1921 + t1923;
t1926 = t646 * t1917 + t1924 * t643;
t1927 = t644 * t1926;
t1929 = -t1917 * t643;
t1930 = t646 * t1924 + t1929;
t1931 = t647 * t1930;
t1932 = t1927 + t1931;
t1937 = -t1033 * g(2) - g(3) * t1036;
t1944 = t1036 * g(2) * t1035 - g(3) * t1033 * t1035 + t959 * g(1);
t1946 = t954 * t1937 + t1944 * t951;
t1947 = t952 * t1946;
t1949 = -t1937 * t951;
t1950 = t954 * t1944 + t1949;
t1951 = t955 * t1950;
t1952 = t1947 + t1951;
t1957 = -t1341 * g(2) - g(3) * t1344;
t1963 = t1267 * g(1);
t1964 = t1344 * g(2) * t1343 - g(3) * t1341 * t1343 + t1963;
t1966 = t1964 * t1259 + t1262 * t1957;
t1967 = t1260 * t1966;
t1969 = -t1957 * t1259;
t1970 = t1262 * t1964 + t1969;
t1971 = t1263 * t1970;
t1972 = t1967 + t1971;
t1977 = -t1649 * g(2) - g(3) * t1652;
t1983 = t1575 * g(1);
t1984 = t1652 * g(2) * t1651 - g(3) * t1649 * t1651 + t1983;
t1986 = t1984 * t1567 + t1570 * t1977;
t1987 = t1568 * t1986;
t1989 = -t1977 * t1567;
t1990 = t1570 * t1984 + t1989;
t1991 = t1571 * t1990;
t1992 = t1987 + t1991;
t1997 = t6 * t1886;
t1998 = t3 * t1890 - t1997;
t2002 = t339 * t1906;
t2003 = t336 * t1910 - t2002;
t2007 = t647 * t1926;
t2008 = t644 * t1930 - t2007;
t2012 = t955 * t1946;
t2013 = t952 * t1950 - t2012;
t2017 = t1263 * t1966;
t2018 = t1260 * t1970 - t2017;
t2022 = t1571 * t1986;
t2023 = t1568 * t1990 - t2022;
t2030 = 0.2e1 * t293 * t328 + t331 * t302;
t2035 = t102 * t11;
t2036 = t10 * t99 * t192 + t2035;
t2038 = 0.1e1 / t299 / qJ(3,1);
t2040 = t321 ^ 2;
t2041 = t2040 * t12;
t2042 = t192 * t2041;
t2047 = 0.2e1 * t601 * t636 + t639 * t610;
t2052 = t419 * t344;
t2053 = t343 * t416 * t506 + t2052;
t2055 = 0.1e1 / t607 / qJ(3,2);
t2057 = t629 ^ 2;
t2058 = t2057 * t345;
t2059 = t506 * t2058;
t2064 = 0.2e1 * t909 * t944 + t947 * t918;
t2069 = t727 * t652;
t2070 = t651 * t724 * t814 + t2069;
t2072 = 0.1e1 / t915 / qJ(3,3);
t2074 = t937 ^ 2;
t2075 = t2074 * t653;
t2076 = t814 * t2075;
t2082 = 0.2e1 * t1217 * t1224 * t1245 + t1255 * t1226;
t2087 = t1035 * t960;
t2088 = t959 * t1032 * t1122 + t2087;
t2090 = 0.1e1 / t1223 / qJ(3,4);
t2092 = t1245 ^ 2;
t2093 = t2092 * t961;
t2094 = t1122 * t2093;
t2100 = 0.2e1 * t1525 * t1532 * t1553 + t1563 * t1534;
t2105 = t1343 * t1268;
t2106 = t1267 * t1340 * t1430 + t2105;
t2108 = 0.1e1 / t1531 / qJ(3,5);
t2110 = t1553 ^ 2;
t2111 = t2110 * t1269;
t2112 = t1430 * t2111;
t2118 = 0.2e1 * t1833 * t1840 * t1861 + t1871 * t1842;
t2123 = t1651 * t1576;
t2124 = t1575 * t1648 * t1738 + t2123;
t2126 = 0.1e1 / t1839 / qJ(3,6);
t2128 = t1861 ^ 2;
t2129 = t2128 * t1577;
t2130 = t1738 * t2129;
t2132 = -t2030 * t13 * t9 - t2042 * t2038 * t2036 - t2047 * t346 * t342 - t2059 * t2055 * t2053 - t2064 * t654 * t650 - t2076 * t2072 * t2070 - t2082 * t962 * t958 - t2094 * t2090 * t2088 - t2100 * t1270 * t1266 - t2112 * t2108 * t2106 - t2118 * t1578 * t1574 - t2130 * t2126 * t2124;
t2134 = t192 ^ 2;
t2136 = t12 * t321 * t2134;
t2139 = t331 * t11;
t2145 = -0.2e1 * t292 * t12 * t328 + 0.4e1 * t2136 * t300 * t292 + 0.2e1 * t192 * t2139;
t2148 = t1 * t2036;
t2149 = t2040 * t2134;
t2150 = t325 * t2149;
t2153 = t303 * t300 * t2040;
t2154 = -0.2e1 * t2150 + t2153;
t2157 = t506 ^ 2;
t2159 = t345 * t629 * t2157;
t2162 = t639 * t344;
t2168 = 0.4e1 * t2159 * t608 * t600 - 0.2e1 * t600 * t345 * t636 + 0.2e1 * t506 * t2162;
t2171 = t334 * t2053;
t2172 = t2057 * t2157;
t2173 = t633 * t2172;
t2176 = t611 * t608 * t2057;
t2177 = -0.2e1 * t2173 + t2176;
t2180 = t814 ^ 2;
t2182 = t653 * t937 * t2180;
t2185 = t947 * t652;
t2191 = 0.4e1 * t2182 * t916 * t908 - 0.2e1 * t908 * t653 * t944 + 0.2e1 * t814 * t2185;
t2194 = t642 * t2070;
t2195 = t2074 * t2180;
t2196 = t941 * t2195;
t2199 = t919 * t916 * t2074;
t2200 = -0.2e1 * t2196 + t2199;
t2202 = t1224 * t1216;
t2203 = t1122 ^ 2;
t2205 = t961 * t1245 * t2203;
t2208 = t1255 * t960;
t2213 = 0.2e1 * t1122 * t2208 - 0.2e1 * t2202 * t1252 + 0.4e1 * t2205 * t2202;
t2216 = t950 * t2088;
t2217 = t2092 * t2203;
t2218 = t1249 * t2217;
t2220 = t1227 * t2092;
t2221 = t1224 * t2220;
t2222 = -0.2e1 * t2218 + t2221;
t2224 = t1532 * t1524;
t2225 = t1430 ^ 2;
t2227 = t1269 * t1553 * t2225;
t2230 = t1563 * t1268;
t2235 = 0.2e1 * t1430 * t2230 - 0.2e1 * t2224 * t1560 + 0.4e1 * t2227 * t2224;
t2238 = t1258 * t2106;
t2239 = t2110 * t2225;
t2240 = t1557 * t2239;
t2242 = t1535 * t2110;
t2243 = t1532 * t2242;
t2244 = -0.2e1 * t2240 + t2243;
t2246 = t1840 * t1832;
t2247 = t1738 ^ 2;
t2249 = t1577 * t1861 * t2247;
t2252 = t1871 * t1576;
t2257 = 0.2e1 * t1738 * t2252 - 0.2e1 * t2246 * t1868 + 0.4e1 * t2249 * t2246;
t2260 = t1566 * t2124;
t2261 = t2128 * t2247;
t2262 = t1865 * t2261;
t2264 = t1843 * t2128;
t2265 = t1840 * t2264;
t2266 = -0.2e1 * t2262 + t2265;
t2268 = -t2235 * t1270 * t1266 - t2145 * t13 * t9 - t2257 * t1578 * t1574 - t2168 * t346 * t342 - t2191 * t654 * t650 - t2213 * t962 * t958 + t2154 * t2148 + t2177 * t2171 + t2200 * t2194 + t2222 * t2216 + t2244 * t2238 + t2266 * t2260;
t2269 = t94 * t2148;
t2270 = t99 * t102;
t2273 = t8 * t100 + t103 * t2270;
t2277 = -t10 * t11 * t103 + t192 * t2273;
t2278 = t1 * t2277;
t2279 = t149 * t2278;
t2282 = -t100 * t2270 + t8 * t103;
t2284 = t11 * t100;
t2286 = t10 * t2284 + t192 * t2282;
t2287 = t1 * t2286;
t2288 = t189 * t2287;
t2290 = t192 * t300 * t2041;
t2293 = 0.2e1 * t292 * t296 * t300;
t2294 = t2269 + t2279 + t2288 + t2290 - t2293;
t2296 = t292 ^ 2;
t2297 = t300 * t2296;
t2299 = t11 * t2294 + t192 * t2297;
t2303 = t411 * t2171;
t2304 = t416 * t419;
t2307 = t420 * t2304 + t341 * t417;
t2311 = -t343 * t344 * t420 + t506 * t2307;
t2312 = t334 * t2311;
t2313 = t463 * t2312;
t2316 = -t417 * t2304 + t341 * t420;
t2318 = t344 * t417;
t2320 = t506 * t2316 + t343 * t2318;
t2321 = t334 * t2320;
t2322 = t503 * t2321;
t2324 = t506 * t608 * t2058;
t2327 = 0.2e1 * t600 * t604 * t608;
t2328 = t2303 + t2313 + t2322 + t2324 - t2327;
t2330 = t600 ^ 2;
t2331 = t608 * t2330;
t2333 = t344 * t2328 + t506 * t2331;
t2337 = t719 * t2194;
t2338 = t724 * t727;
t2341 = t728 * t2338 + t649 * t725;
t2345 = -t651 * t652 * t728 + t814 * t2341;
t2346 = t642 * t2345;
t2347 = t771 * t2346;
t2350 = -t725 * t2338 + t649 * t728;
t2352 = t652 * t725;
t2354 = t814 * t2350 + t651 * t2352;
t2355 = t642 * t2354;
t2356 = t811 * t2355;
t2358 = t814 * t916 * t2075;
t2361 = 0.2e1 * t908 * t912 * t916;
t2362 = t2337 + t2347 + t2356 + t2358 - t2361;
t2364 = t908 ^ 2;
t2365 = t916 * t2364;
t2367 = t652 * t2362 + t814 * t2365;
t2371 = t1027 * t2216;
t2372 = t1032 * t1035;
t2375 = t957 * t1033 + t1036 * t2372;
t2377 = t960 * t1036;
t2379 = t1122 * t2375 - t959 * t2377;
t2380 = t950 * t2379;
t2381 = t1079 * t2380;
t2384 = -t1033 * t2372 + t957 * t1036;
t2386 = t960 * t1033;
t2388 = t1122 * t2384 + t959 * t2386;
t2389 = t950 * t2388;
t2390 = t1119 * t2389;
t2392 = t1122 * t1224 * t2093;
t2394 = 0.2e1 * t1216 * t1253;
t2395 = t2371 + t2381 + t2390 + t2392 - t2394;
t2397 = t1216 ^ 2;
t2398 = t1224 * t2397;
t2400 = t1122 * t2398 + t960 * t2395;
t2404 = t1335 * t2238;
t2405 = t1340 * t1343;
t2408 = t1265 * t1341 + t1344 * t2405;
t2410 = t1268 * t1344;
t2412 = -t1267 * t2410 + t1430 * t2408;
t2413 = t1258 * t2412;
t2414 = t1387 * t2413;
t2417 = t1265 * t1344 - t1341 * t2405;
t2419 = t1268 * t1341;
t2421 = t1267 * t2419 + t1430 * t2417;
t2422 = t1258 * t2421;
t2423 = t1427 * t2422;
t2425 = t1430 * t1532 * t2111;
t2427 = 0.2e1 * t1524 * t1561;
t2428 = t2404 + t2414 + t2423 + t2425 - t2427;
t2430 = t1524 ^ 2;
t2431 = t1532 * t2430;
t2433 = t1268 * t2428 + t1430 * t2431;
t2437 = t1643 * t2260;
t2438 = t1648 * t1651;
t2441 = t1573 * t1649 + t1652 * t2438;
t2443 = t1576 * t1652;
t2445 = -t1575 * t2443 + t1738 * t2441;
t2446 = t1566 * t2445;
t2447 = t1695 * t2446;
t2450 = t1573 * t1652 - t1649 * t2438;
t2452 = t1576 * t1649;
t2454 = t1575 * t2452 + t1738 * t2450;
t2455 = t1566 * t2454;
t2456 = t1735 * t2455;
t2458 = t1738 * t1840 * t2129;
t2460 = 0.2e1 * t1832 * t1869;
t2461 = t2437 + t2447 + t2456 + t2458 - t2460;
t2463 = t1832 ^ 2;
t2464 = t1840 * t2463;
t2466 = t1576 * t2461 + t1738 * t2464;
t2470 = -t2433 * t1270 * t1266 - t2299 * t13 * t9 - t2466 * t1578 * t1574 - t2333 * t346 * t342 - t2367 * t654 * t650 - t2400 * t962 * t958 + t2139 * t2148 + t2162 * t2171 + t2185 * t2194 + t2208 * t2216 + t2230 * t2238 + t2252 * t2260;
t2473 = -t11 * t2297 + t192 * t2294;
t2476 = t331 * t192;
t2480 = t506 * t2328 - t344 * t2331;
t2483 = t639 * t506;
t2487 = t814 * t2362 - t652 * t2365;
t2490 = t947 * t814;
t2494 = t1122 * t2395 - t960 * t2398;
t2497 = t1255 * t1122;
t2501 = -t1268 * t2431 + t1430 * t2428;
t2504 = t1563 * t1430;
t2508 = -t1576 * t2464 + t1738 * t2461;
t2511 = t1871 * t1738;
t2513 = -t2501 * t1270 * t1266 - t2473 * t13 * t9 - t2508 * t1578 * t1574 - t2480 * t346 * t342 - t2487 * t654 * t650 - t2494 * t962 * t958 + t2476 * t2148 + t2483 * t2171 + t2490 * t2194 + t2497 * t2216 + t2504 * t2238 + t2511 * t2260;
t2523 = t1892 * t192 * t12;
t2527 = t2 * g(2) - t5 * t1881;
t2529 = t102 * t2;
t2533 = (t5 * g(2) + g(3) * t2529) * t6;
t2535 = t100 * (t3 * t2527 + t2533);
t2538 = g(3) * t2 + t5 * t1879;
t2540 = t5 * t1883;
t2542 = t3 * (t103 * t2538 + t2540);
t2545 = g(2) * t2529 - t5 * g(3);
t2550 = t6 * (t10 * t2 * g(1) + t103 * t2545);
t2551 = t2535 + t2542 - t2550;
t2552 = t11 * t2551;
t2554 = t10 * t103;
t2556 = t10 * t100;
t2558 = g(1) * t102 - g(2) * t2554 + g(3) * t2556;
t2560 = -t192 * t2558 + t2552;
t2564 = t1912 * t506 * t345;
t2569 = -t338 * g(3) * t419 + g(2) * t335;
t2571 = t419 * t335;
t2575 = (t338 * g(2) + g(3) * t2571) * t339;
t2577 = t417 * (t336 * t2569 + t2575);
t2580 = g(3) * t335 + t338 * t1899;
t2582 = t338 * t1903;
t2584 = t336 * (t420 * t2580 + t2582);
t2587 = g(2) * t2571 - t338 * g(3);
t2592 = t339 * (t343 * t335 * g(1) + t420 * t2587);
t2593 = t2577 + t2584 - t2592;
t2594 = t344 * t2593;
t2596 = t343 * t420;
t2598 = t343 * t417;
t2600 = g(1) * t419 - g(2) * t2596 + g(3) * t2598;
t2602 = -t506 * t2600 + t2594;
t2606 = t1932 * t814 * t653;
t2610 = g(2) * t643 - t646 * t1921;
t2612 = t727 * t643;
t2616 = (t646 * g(2) + g(3) * t2612) * t647;
t2618 = t725 * (t644 * t2610 + t2616);
t2621 = g(3) * t643 + t646 * t1919;
t2623 = t646 * t1923;
t2625 = t644 * (t728 * t2621 + t2623);
t2628 = g(2) * t2612 - t646 * g(3);
t2633 = t647 * (t651 * t643 * g(1) + t728 * t2628);
t2634 = t2618 + t2625 - t2633;
t2635 = t652 * t2634;
t2637 = t651 * t728;
t2639 = t651 * t725;
t2641 = g(1) * t727 - g(2) * t2637 + g(3) * t2639;
t2643 = -t814 * t2641 + t2635;
t2647 = t1952 * t1122 * t961;
t2649 = t1035 * t954;
t2652 = g(2) * t951 - g(3) * t2649;
t2654 = t1035 * t951;
t2658 = (g(2) * t954 + g(3) * t2654) * t955;
t2660 = t1033 * (t952 * t2652 + t2658);
t2663 = g(2) * t2649 + g(3) * t951;
t2666 = t959 * t954 * g(1);
t2668 = t952 * (t1036 * t2663 + t2666);
t2671 = g(2) * t2654 - g(3) * t954;
t2673 = t951 * g(1);
t2676 = t955 * (t1036 * t2671 + t959 * t2673);
t2677 = t2660 + t2668 - t2676;
t2678 = t960 * t2677;
t2680 = t959 * t1036;
t2682 = t959 * t1033;
t2684 = g(1) * t1035 - g(2) * t2680 + g(3) * t2682;
t2686 = -t1122 * t2684 + t2678;
t2690 = t1972 * t1430 * t1269;
t2692 = t1343 * t1262;
t2695 = g(2) * t1259 - g(3) * t2692;
t2697 = t1343 * t1259;
t2701 = (g(2) * t1262 + g(3) * t2697) * t1263;
t2703 = t1341 * (t1260 * t2695 + t2701);
t2706 = g(2) * t2692 + g(3) * t1259;
t2709 = t1267 * t1262 * g(1);
t2711 = t1260 * (t1344 * t2706 + t2709);
t2714 = g(2) * t2697 - g(3) * t1262;
t2719 = t1263 * (t1267 * t1259 * g(1) + t1344 * t2714);
t2720 = t2703 + t2711 - t2719;
t2721 = t1268 * t2720;
t2723 = t1267 * t1344;
t2725 = t1267 * t1341;
t2727 = g(1) * t1343 - g(2) * t2723 + g(3) * t2725;
t2729 = -t1430 * t2727 + t2721;
t2733 = t1992 * t1738 * t1577;
t2735 = t1651 * t1570;
t2738 = g(2) * t1567 - g(3) * t2735;
t2740 = t1651 * t1567;
t2744 = (g(2) * t1570 + g(3) * t2740) * t1571;
t2746 = t1649 * (t1568 * t2738 + t2744);
t2749 = g(2) * t2735 + g(3) * t1567;
t2752 = t1575 * t1570 * g(1);
t2754 = t1568 * (t1652 * t2749 + t2752);
t2757 = g(2) * t2740 - g(3) * t1570;
t2762 = t1571 * (t1575 * t1567 * g(1) + t1652 * t2757);
t2763 = t2746 + t2754 - t2762;
t2764 = t1576 * t2763;
t2766 = t1575 * t1652;
t2768 = t1575 * t1649;
t2770 = g(1) * t1651 - g(2) * t2766 + g(3) * t2768;
t2772 = -t1738 * t2770 + t2764;
t2774 = -t2523 * t10 * t9 - t2690 * t1267 * t1266 - t2733 * t1575 * t1574 - t2564 * t343 * t342 - t2606 * t651 * t650 - t2647 * t959 * t958 + t2560 * t2148 + t2602 * t2171 + t2643 * t2194 + t2686 * t2216 + t2729 * t2238 + t2772 * t2260;
t2779 = t11 * t2558 + t192 * t2551;
t2785 = t506 * t2593 + t344 * t2600;
t2791 = t814 * t2634 + t652 * t2641;
t2797 = t1122 * t2677 + t960 * t2684;
t2803 = t1268 * t2727 + t1430 * t2720;
t2809 = t1576 * t2770 + t1738 * t2763;
t2811 = t1892 * t10 * t9 + t1972 * t1267 * t1266 + t1992 * t1575 * t1574 + t1912 * t343 * t342 + t1932 * t651 * t650 + t1952 * t959 * t958 + t2779 * t2148 + t2785 * t2171 + t2791 * t2194 + t2797 * t2216 + t2803 * t2238 + t2809 * t2260;
t2812 = t1 * t292;
t2815 = t331 * qJ(3,1);
t2817 = t329 * t1 * t321;
t2818 = t2815 + t2817;
t2826 = 0.4e1 * t2136 * t2812 + t192 * (0.2e1 * t2818 * t11 + t1887 + t1891) - 0.2e1 * t2812 * t12 * t321;
t2830 = t303 * t1 * t2149;
t2832 = t10 * t192;
t2833 = g(3) * t100;
t2834 = t2833 * t2832;
t2835 = g(2) * t103;
t2836 = t2835 * t2832;
t2837 = t192 * t102;
t2838 = g(1) * t2837;
t2839 = t1 * t2040;
t2843 = t10 * t99 * t11 - t2837;
t2844 = t94 * t2843;
t2847 = t11 * t2273 + t192 * t2554;
t2848 = t149 * t2847;
t2851 = t11 * t2282 - t192 * t2556;
t2852 = t189 * t2851;
t2853 = t1 * t2296;
t2854 = t303 * t2839 + t2552 - 0.2e1 * t2830 - t2834 + t2836 - t2838 - t2839 - t2844 - t2848 - t2852 - t2853;
t2857 = -t2269 - t2279 - t2288 - 0.2e1 * t2290 + t2293;
t2859 = t334 * t600;
t2862 = t639 * qJ(3,2);
t2864 = t637 * t334 * t629;
t2865 = t2862 + t2864;
t2873 = 0.4e1 * t2159 * t2859 + t506 * (0.2e1 * t2865 * t344 + t1907 + t1911) - 0.2e1 * t2859 * t345 * t629;
t2877 = t611 * t334 * t2172;
t2879 = t343 * t506;
t2880 = g(3) * t417;
t2881 = t2880 * t2879;
t2882 = g(2) * t420;
t2883 = t2882 * t2879;
t2884 = t506 * t419;
t2885 = g(1) * t2884;
t2886 = t334 * t2057;
t2890 = t343 * t416 * t344 - t2884;
t2891 = t411 * t2890;
t2894 = t344 * t2307 + t506 * t2596;
t2895 = t463 * t2894;
t2898 = t344 * t2316 - t506 * t2598;
t2899 = t503 * t2898;
t2900 = t334 * t2330;
t2901 = t611 * t2886 + t2594 - 0.2e1 * t2877 - t2881 + t2883 - t2885 - t2886 - t2891 - t2895 - t2899 - t2900;
t2904 = -t2303 - t2313 - t2322 - 0.2e1 * t2324 + t2327;
t2906 = t642 * t908;
t2909 = t947 * qJ(3,3);
t2911 = t945 * t642 * t937;
t2912 = t2909 + t2911;
t2920 = 0.4e1 * t2182 * t2906 + t814 * (0.2e1 * t2912 * t652 + t1927 + t1931) - 0.2e1 * t653 * t937 * t2906;
t2924 = t919 * t642 * t2195;
t2926 = t651 * t814;
t2928 = g(3) * t725 * t2926;
t2930 = g(2) * t728 * t2926;
t2931 = t814 * t727;
t2932 = g(1) * t2931;
t2933 = t642 * t2074;
t2937 = t651 * t724 * t652 - t2931;
t2938 = t719 * t2937;
t2941 = t652 * t2341 + t814 * t2637;
t2942 = t771 * t2941;
t2945 = t652 * t2350 - t814 * t2639;
t2946 = t811 * t2945;
t2947 = t642 * t2364;
t2948 = t919 * t2933 + t2635 - 0.2e1 * t2924 - t2928 + t2930 - t2932 - t2933 - t2938 - t2942 - t2946 - t2947;
t2951 = -t2337 - t2347 - t2356 - 0.2e1 * t2358 + t2361;
t2953 = t950 * t1216;
t2956 = t1255 * qJ(3,4);
t2958 = t1220 * t950 * t1252;
t2959 = t2956 + t2958;
t2966 = 0.4e1 * t2205 * t2953 + t1122 * (0.2e1 * t2959 * t960 + t1947 + t1951) - 0.2e1 * t2953 * t1252;
t2970 = t950 * t1227 * t2217;
t2972 = t959 * t1122;
t2973 = g(3) * t1033;
t2974 = t2973 * t2972;
t2975 = g(2) * t1036;
t2976 = t2975 * t2972;
t2977 = t1122 * t1035;
t2978 = g(1) * t2977;
t2982 = t959 * t1032 * t960 - t2977;
t2983 = t1027 * t2982;
t2986 = t1122 * t2680 + t960 * t2375;
t2987 = t1079 * t2986;
t2990 = -t1122 * t2682 + t960 * t2384;
t2991 = t1119 * t2990;
t2992 = t950 * t2092;
t2993 = t950 * t2397;
t2994 = t950 * t2220 + t2678 - 0.2e1 * t2970 - t2974 + t2976 - t2978 - t2983 - t2987 - t2991 - t2992 - t2993;
t2997 = -t2371 - t2381 - t2390 - 0.2e1 * t2392 + t2394;
t2999 = t1258 * t1524;
t3002 = t1563 * qJ(3,5);
t3004 = t1528 * t1258 * t1560;
t3005 = t3002 + t3004;
t3012 = 0.4e1 * t2227 * t2999 + t1430 * (0.2e1 * t3005 * t1268 + t1967 + t1971) - 0.2e1 * t2999 * t1560;
t3016 = t1258 * t1535 * t2239;
t3018 = t1267 * t1430;
t3019 = g(3) * t1341;
t3020 = t3019 * t3018;
t3021 = g(2) * t1344;
t3022 = t3021 * t3018;
t3023 = t1430 * t1343;
t3024 = g(1) * t3023;
t3028 = t1267 * t1340 * t1268 - t3023;
t3029 = t1335 * t3028;
t3032 = t1268 * t2408 + t1430 * t2723;
t3033 = t1387 * t3032;
t3036 = t1268 * t2417 - t1430 * t2725;
t3037 = t1427 * t3036;
t3038 = t1258 * t2110;
t3039 = t1258 * t2430;
t3040 = t1258 * t2242 + t2721 - 0.2e1 * t3016 - t3020 + t3022 - t3024 - t3029 - t3033 - t3037 - t3038 - t3039;
t3043 = -t2404 - t2414 - t2423 - 0.2e1 * t2425 + t2427;
t3045 = t1566 * t1832;
t3048 = t1871 * qJ(3,6);
t3050 = t1836 * t1566 * t1868;
t3051 = t3048 + t3050;
t3058 = 0.4e1 * t2249 * t3045 + t1738 * (0.2e1 * t3051 * t1576 + t1987 + t1991) - 0.2e1 * t3045 * t1868;
t3062 = t1566 * t1843 * t2261;
t3064 = t1575 * t1738;
t3065 = g(3) * t1649;
t3066 = t3065 * t3064;
t3067 = g(2) * t1652;
t3068 = t3067 * t3064;
t3069 = t1738 * t1651;
t3070 = g(1) * t3069;
t3074 = t1575 * t1648 * t1576 - t3069;
t3075 = t1643 * t3074;
t3078 = t1576 * t2441 + t1738 * t2766;
t3079 = t1695 * t3078;
t3082 = t1576 * t2450 - t1738 * t2768;
t3083 = t1735 * t3082;
t3084 = t1566 * t2128;
t3085 = t1566 * t2463;
t3086 = t1566 * t2264 + t2764 - 0.2e1 * t3062 - t3066 + t3068 - t3070 - t3075 - t3079 - t3083 - t3084 - t3085;
t3089 = -t2437 - t2447 - t2456 - 0.2e1 * t2458 + t2460;
t3091 = -t2826 * t13 * t9 + t2854 * t2148 + t2857 * t2843 - t2873 * t346 * t342 + t2901 * t2171 + t2904 * t2890 - t2920 * t654 * t650 + t2948 * t2194 + t2951 * t2937 - t2966 * t962 * t958 + t2994 * t2216 + t2997 * t2982 - t3012 * t1270 * t1266 + t3040 * t2238 + t3043 * t3028 - t3058 * t1578 * t1574 + t3086 * t2260 + t3089 * t3074;
t3095 = t2294 * qJ(3,1);
t3098 = 0.2e1 * t1 * t292 * t296;
t3103 = t3 * (-t5 * t1884 - t1889) + t1997 + t192 * (t3095 + t3098) + (t2844 + t2848 + t2852 + t2839) * t11;
t3113 = t2328 * qJ(3,2);
t3116 = 0.2e1 * t334 * t600 * t604;
t3121 = t336 * (-t338 * t1904 - t1909) + t2002 + t506 * (t3113 + t3116) + (t2891 + t2895 + t2899 + t2886) * t344;
t3131 = t2362 * qJ(3,3);
t3134 = 0.2e1 * t642 * t908 * t912;
t3139 = t644 * (-t646 * t1924 - t1929) + t2007 + t814 * (t3131 + t3134) + (t2938 + t2942 + t2946 + t2933) * t652;
t3149 = t2395 * qJ(3,4);
t3152 = 0.2e1 * t950 * t1216 * t1220;
t3157 = t952 * (-t954 * t1944 - t1949) + t2012 + t1122 * (t3149 + t3152) + (t2983 + t2987 + t2991 + t2992) * t960;
t3167 = t2428 * qJ(3,5);
t3170 = 0.2e1 * t1258 * t1524 * t1528;
t3175 = t1260 * (-t1262 * t1964 - t1969) + t2017 + t1430 * (t3167 + t3170) + (t3029 + t3033 + t3037 + t3038) * t1268;
t3185 = t2461 * qJ(3,6);
t3188 = 0.2e1 * t1566 * t1832 * t1836;
t3193 = t1568 * (-t1570 * t1984 - t1989) + t2022 + t1738 * (t3185 + t3188) + (t3075 + t3079 + t3083 + t3084) * t1576;
t3200 = -t3103 * t13 * t9 + t331 * t192 * t2036 + t331 * t11 * t2843 - t3121 * t346 * t342 + t639 * t506 * t2053 + t639 * t344 * t2890 - t3139 * t654 * t650 + t947 * t814 * t2070 + t947 * t652 * t2937 - t3157 * t962 * t958 + t1255 * t1122 * t2088 + t1255 * t960 * t2982 - t3175 * t1270 * t1266 + t1563 * t1430 * t2106 + t1563 * t1268 * t3028 - t3193 * t1578 * t1574 + t1871 * t1738 * t2124 + t1871 * t1576 * t3074;
t3203 = t12 * t324 * t2812;
t3205 = 0.2e1 * t2818 * t11 + t1887 + t1891 + 0.4e1 * t3203;
t3210 = t100 * (-t3 * t2527 - t2533);
t3213 = t3 * (-t103 * t2538 - t2540);
t3215 = -t103 * t2545 * t6;
t3216 = t1883 * t98;
t3217 = t12 * t2839;
t3221 = t10 * t11;
t3222 = t2835 * t3221;
t3223 = t2833 * t3221;
t3224 = g(1) * t2035;
t3226 = t192 * (t3210 + t3213 - t3215 + t3216 - 0.2e1 * t3217) + t3222 - t3223 - t3224 + 0.2e1 * t3095 + t3098;
t3228 = t2150 - t2153 - t2297;
t3232 = t345 * t632 * t2859;
t3234 = 0.2e1 * t2865 * t344 + t1907 + t1911 + 0.4e1 * t3232;
t3239 = t417 * (-t336 * t2569 - t2575);
t3242 = t336 * (-t420 * t2580 - t2582);
t3244 = -t420 * t2587 * t339;
t3245 = t1903 * t415;
t3246 = t345 * t2886;
t3250 = t343 * t344;
t3251 = t2882 * t3250;
t3252 = t2880 * t3250;
t3253 = g(1) * t2052;
t3255 = t506 * (t3239 + t3242 - t3244 + t3245 - 0.2e1 * t3246) + t3251 - t3252 - t3253 + 0.2e1 * t3113 + t3116;
t3257 = t2173 - t2176 - t2331;
t3261 = t653 * t940 * t2906;
t3263 = 0.2e1 * t2912 * t652 + t1927 + t1931 + 0.4e1 * t3261;
t3268 = t725 * (-t644 * t2610 - t2616);
t3271 = t644 * (-t728 * t2621 - t2623);
t3273 = -t728 * t2628 * t647;
t3274 = t1923 * t723;
t3275 = t653 * t2933;
t3280 = g(2) * t652 * t2637;
t3282 = g(3) * t652 * t2639;
t3283 = g(1) * t2069;
t3285 = t814 * (t3268 + t3271 - t3273 + t3274 - 0.2e1 * t3275) + t3280 - t3282 - t3283 + 0.2e1 * t3131 + t3134;
t3287 = t2196 - t2199 - t2365;
t3291 = t961 * t1248 * t2953;
t3293 = 0.2e1 * t2959 * t960 + t1947 + t1951 + 0.4e1 * t3291;
t3298 = t1033 * (-t952 * t2652 - t2658);
t3301 = t952 * (-t1036 * t2663 - t2666);
t3303 = -t1036 * t2671 * t955;
t3304 = t955 * t959;
t3305 = t3304 * t2673;
t3306 = t950 * t961;
t3307 = t2092 * t3306;
t3311 = t959 * t960;
t3312 = t2975 * t3311;
t3313 = t2973 * t3311;
t3314 = g(1) * t2087;
t3316 = t1122 * (t3298 + t3301 - t3303 + t3305 - 0.2e1 * t3307) + t3312 - t3313 - t3314 + 0.2e1 * t3149 + t3152;
t3318 = t2218 - t2221 - t2398;
t3322 = t1269 * t1556 * t2999;
t3324 = 0.2e1 * t3005 * t1268 + t1967 + t1971 + 0.4e1 * t3322;
t3329 = t1341 * (-t1260 * t2695 - t2701);
t3332 = t1260 * (-t1344 * t2706 - t2709);
t3334 = -t1344 * t2714 * t1263;
t3335 = t1963 * t1339;
t3336 = t1258 * t2111;
t3340 = t1267 * t1268;
t3341 = t3021 * t3340;
t3342 = t3019 * t3340;
t3343 = g(1) * t2105;
t3345 = t1430 * (t3329 + t3332 - t3334 + t3335 - 0.2e1 * t3336) + t3341 - t3342 - t3343 + 0.2e1 * t3167 + t3170;
t3347 = t2240 - t2243 - t2431;
t3351 = t1577 * t1864 * t3045;
t3353 = 0.2e1 * t3051 * t1576 + t1987 + t1991 + 0.4e1 * t3351;
t3358 = t1649 * (-t1568 * t2738 - t2744);
t3361 = t1568 * (-t1652 * t2749 - t2752);
t3363 = -t1652 * t2757 * t1571;
t3364 = t1983 * t1647;
t3365 = t1566 * t2129;
t3369 = t1575 * t1576;
t3370 = t3067 * t3369;
t3371 = t3065 * t3369;
t3372 = g(1) * t2123;
t3374 = t1738 * (t3358 + t3361 - t3363 + t3364 - 0.2e1 * t3365) + t3370 - t3371 - t3372 + 0.2e1 * t3185 + t3188;
t3376 = t2262 - t2265 - t2464;
t3378 = -t3205 * t10 * t9 + t3226 * t2148 + t3228 * t2843 - t3234 * t343 * t342 + t3255 * t2171 + t3257 * t2890 - t3263 * t651 * t650 + t3285 * t2194 + t3287 * t2937 - t3293 * t959 * t958 + t3316 * t2216 + t3318 * t2982 - t3324 * t1267 * t1266 + t3345 * t2238 + t3347 * t3028 - t3353 * t1575 * t1574 + t3374 * t2260 + t3376 * t3074;
t3379 = t10 * t8;
t3384 = t1887 + t1891 + t11 * (t2815 + 0.2e1 * t2817) + 0.2e1 * t3203;
t3388 = t192 * (t2535 + t2542 + t3215 - t3216 + t3217) - t3222 + t3223 + t3224 - t3095 - t3098;
t3394 = t11 * (t3210 + t3213 + t2550) + t2834 - t2836 + t2838 + t2830 + qJ(3,1) * (-t2153 - t2297) + t2844 + t2848 + t2852 + t2839 + t2853;
t3396 = t343 * t341;
t3401 = t1907 + t1911 + t344 * (t2862 + 0.2e1 * t2864) + 0.2e1 * t3232;
t3405 = t506 * (t2577 + t2584 + t3244 - t3245 + t3246) - t3251 + t3252 + t3253 - t3113 - t3116;
t3411 = t344 * (t3239 + t3242 + t2592) + t2881 - t2883 + t2885 + t2877 + qJ(3,2) * (-t2176 - t2331) + t2891 + t2895 + t2899 + t2886 + t2900;
t3413 = t651 * t649;
t3418 = t1927 + t1931 + t652 * (t2909 + 0.2e1 * t2911) + 0.2e1 * t3261;
t3422 = t814 * (t2618 + t2625 + t3273 - t3274 + t3275) - t3280 + t3282 + t3283 - t3131 - t3134;
t3428 = t652 * (t3268 + t3271 + t2633) + t2928 - t2930 + t2932 + t2924 + qJ(3,3) * (-t2199 - t2365) + t2938 + t2942 + t2946 + t2933 + t2947;
t3430 = t959 * t957;
t3435 = t1947 + t1951 + t960 * (t2956 + 0.2e1 * t2958) + 0.2e1 * t3291;
t3439 = t1122 * (t2660 + t2668 + t3303 - t3305 + t3307) - t3312 + t3313 + t3314 - t3149 - t3152;
t3445 = t960 * (t3298 + t3301 + t2676) + t2974 - t2976 + t2978 + t2970 + qJ(3,4) * (-t2221 - t2398) + t2983 + t2987 + t2991 + t2992 + t2993;
t3447 = t1267 * t1265;
t3452 = t1967 + t1971 + t1268 * (t3002 + 0.2e1 * t3004) + 0.2e1 * t3322;
t3456 = t1430 * (t2703 + t2711 + t3334 - t3335 + t3336) - t3341 + t3342 + t3343 - t3167 - t3170;
t3462 = t1268 * (t3329 + t3332 + t2719) + t3020 - t3022 + t3024 + t3016 + qJ(3,5) * (-t2243 - t2431) + t3029 + t3033 + t3037 + t3038 + t3039;
t3464 = t1575 * t1573;
t3469 = t1987 + t1991 + t1576 * (t3048 + 0.2e1 * t3050) + 0.2e1 * t3351;
t3473 = t1738 * (t2746 + t2754 + t3363 - t3364 + t3365) - t3370 + t3371 + t3372 - t3185 - t3188;
t3479 = t1576 * (t3358 + t3361 + t2762) + t3066 - t3068 + t3070 + t3062 + qJ(3,6) * (-t2265 - t2464) + t3075 + t3079 + t3083 + t3084 + t3085;
t3481 = -t3384 * t3379 - t3388 * t2036 + t3394 * t2843 - t3401 * t3396 - t3405 * t2053 + t3411 * t2890 - t3418 * t3413 - t3422 * t2070 + t3428 * t2937 - t3435 * t3430 - t3439 * t2088 + t3445 * t2982 - t3452 * t3447 - t3456 * t2106 + t3462 * t3028 - t3469 * t3464 - t3473 * t2124 + t3479 * t3074;
t3482 = -t213 ^ 2;
t3485 = -xDP(4) * t115 + xDP(5) * t16;
t3486 = -t3485 ^ 2;
t3487 = t3482 + t3486;
t3489 = xDP(4) * t193;
t3490 = xDDP(4) * t19;
t3493 = -xDP(4) * t113 - xDP(5) * t14;
t3494 = -t3485 * t3493;
t3495 = t3489 + t3490 + xDDP(6) + t3494;
t3500 = xDP(4) * (-t16 * t139 + t14 * t264);
t3501 = xDP(5) * t200;
t3502 = xDDP(4) * t115;
t3503 = xDDP(5) * t16;
t3504 = -t213 * t3493;
t3505 = -t3500 + t3501 + t3502 - t3503 + t3504;
t3508 = -t3489 - t3490 - xDDP(6) + t3494;
t3510 = -t3493 ^ 2;
t3511 = t3482 + t3510;
t3516 = xDP(4) * (-t14 * t139 - t16 * t264);
t3518 = xDP(5) * t16 * xDP(6);
t3519 = xDDP(4) * t113;
t3520 = xDDP(5) * t14;
t3521 = t213 * t3485;
t3522 = t3516 + t3518 + t3519 + t3520 + t3521;
t3525 = t3500 - t3501 - t3502 + t3503 + t3504;
t3527 = -t3516 - t3518 - t3519 - t3520 + t3521;
t3529 = t3486 + t3510;
t3532 = xDDP(1) - g(1);
t3534 = t19 * t26;
t3537 = t14 * t24 + t16 * t3534;
t3538 = xDDP(2) - g(2);
t3540 = t19 * t24;
t3543 = t14 * t26 - t16 * t3540;
t3544 = xDDP(3) - g(3);
t3546 = t3532 * t113 + t3538 * t3537 + t3544 * t3543;
t3551 = -t14 * t3534 + t16 * t24;
t3555 = t14 * t3540 + t16 * t26;
t3557 = -t3532 * t115 + t3538 * t3551 + t3544 * t3555;
t3560 = t21 * t26;
t3562 = t21 * t24;
t3564 = t3532 * t19 - t3538 * t3560 + t3544 * t3562;
t3567 = t331 * t12;
t3569 = t639 * t345;
t3571 = t947 * t653;
t3573 = t1255 * t961;
t3575 = t1563 * t1269;
t3577 = t1871 * t1577;
t3580 = t1892 * t12;
t3582 = t1912 * t345;
t3584 = t1932 * t653;
t3586 = t1952 * t961;
t3588 = t1972 * t1269;
t3590 = t1992 * t1577;
t3593 = t1998 * t12;
t3595 = t2003 * t345;
t3597 = t2008 * t653;
t3599 = t2013 * t961;
t3601 = t2018 * t1269;
t3603 = t2023 * t1577;
t3606 = t2030 * t12;
t3610 = t2047 * t345;
t3614 = t2064 * t653;
t3618 = t2082 * t961;
t3622 = t2100 * t1269;
t3626 = t2118 * t1577;
t3630 = -t2042 * t2038 * t2277 - t2059 * t2055 * t2311 - t2076 * t2072 * t2345 - t2094 * t2090 * t2379 - t2112 * t2108 * t2412 - t2130 * t2126 * t2445 + t3618 * t1040 + t3606 * t107 + t3622 * t1348 + t3626 * t1656 + t3610 * t424 + t3614 * t732;
t3631 = t2145 * t12;
t3634 = t2168 * t345;
t3637 = t2191 * t653;
t3640 = t2213 * t961;
t3643 = t2235 * t1269;
t3646 = t2257 * t1577;
t3649 = t3640 * t1040 + t3631 * t107 + t3643 * t1348 + t3646 * t1656 + t2154 * t2278 + t2177 * t2312 + t2200 * t2346 + t2222 * t2380 + t2244 * t2413 + t2266 * t2446 + t3634 * t424 + t3637 * t732;
t3650 = t2299 * t12;
t3653 = t2333 * t345;
t3656 = t2367 * t653;
t3659 = t2400 * t961;
t3662 = t2433 * t1269;
t3665 = t2466 * t1577;
t3668 = t3659 * t1040 + t3650 * t107 + t3662 * t1348 + t3665 * t1656 + t2139 * t2278 + t2162 * t2312 + t2185 * t2346 + t2208 * t2380 + t2230 * t2413 + t2252 * t2446 + t3653 * t424 + t3656 * t732;
t3669 = t2473 * t12;
t3672 = t2480 * t345;
t3675 = t2487 * t653;
t3678 = t2494 * t961;
t3681 = t2501 * t1269;
t3684 = t2508 * t1577;
t3687 = t3678 * t1040 + t3669 * t107 + t3681 * t1348 + t3684 * t1656 + t2476 * t2278 + t2483 * t2312 + t2490 * t2346 + t2497 * t2380 + t2504 * t2413 + t2511 * t2446 + t3672 * t424 + t3675 * t732;
t3707 = t2647 * t1040 + t2523 * t107 + t2690 * t1348 + t2733 * t1656 + t2560 * t2278 + t2602 * t2312 + t2643 * t2346 + t2686 * t2380 + t2729 * t2413 + t2772 * t2446 + t2564 * t424 + t2606 * t732;
t3720 = -t1952 * t1040 - t1892 * t107 - t1972 * t1348 - t1992 * t1656 - t1912 * t424 - t1932 * t732 + t2779 * t2278 + t2785 * t2312 + t2791 * t2346 + t2797 * t2380 + t2803 * t2413 + t2809 * t2446;
t3721 = t2826 * t12;
t3725 = t2873 * t345;
t3729 = t2920 * t653;
t3733 = t2966 * t961;
t3737 = t3012 * t1269;
t3741 = t3058 * t1577;
t3745 = t3721 * t107 + t2854 * t2278 + t2857 * t2847 + t3725 * t424 + t2901 * t2312 + t2904 * t2894 + t3729 * t732 + t2948 * t2346 + t2951 * t2941 + t3733 * t1040 + t2994 * t2380 + t2997 * t2986 + t3737 * t1348 + t3040 * t2413 + t3043 * t3032 + t3741 * t1656 + t3086 * t2446 + t3089 * t3078;
t3746 = t3103 * t12;
t3752 = t3121 * t345;
t3758 = t3139 * t653;
t3764 = t3157 * t961;
t3770 = t3175 * t1269;
t3776 = t3193 * t1577;
t3782 = t3746 * t107 + t331 * t192 * t2277 + t331 * t11 * t2847 + t3752 * t424 + t639 * t506 * t2311 + t639 * t344 * t2894 + t3758 * t732 + t947 * t814 * t2345 + t947 * t652 * t2941 + t3764 * t1040 + t1255 * t1122 * t2379 + t1255 * t960 * t2986 + t3770 * t1348 + t1563 * t1430 * t2412 + t1563 * t1268 * t3032 + t3776 * t1656 + t1871 * t1738 * t2445 + t1871 * t1576 * t3078;
t3801 = t3205 * t107 + t3226 * t2278 + t3228 * t2847 + t3234 * t424 + t3255 * t2312 + t3257 * t2894 + t3263 * t732 + t3285 * t2346 + t3287 * t2941 + t3293 * t1040 + t3316 * t2380 + t3318 * t2986 + t3324 * t1348 + t3345 * t2413 + t3347 * t3032 + t3353 * t1656 + t3374 * t2446 + t3376 * t3078;
t3820 = t3384 * t106 - t3388 * t2277 + t3394 * t2847 + t3401 * t423 - t3405 * t2311 + t3411 * t2894 + t3418 * t731 - t3422 * t2345 + t3428 * t2941 + t3435 * t1039 - t3439 * t2379 + t3445 * t2986 + t3452 * t1347 - t3456 * t2412 + t3462 * t3032 + t3469 * t1655 - t3473 * t2445 + t3479 * t3078;
t3876 = -t2042 * t2038 * t2286 - t2059 * t2055 * t2320 - t2076 * t2072 * t2354 - t2094 * t2090 * t2388 - t2112 * t2108 * t2421 - t2130 * t2126 * t2454 + t3618 * t1086 + t3622 * t1394 + t3606 * t156 + t3626 * t1702 + t3610 * t470 + t3614 * t778;
t3889 = t3640 * t1086 + t3643 * t1394 + t3631 * t156 + t3646 * t1702 + t2154 * t2287 + t2177 * t2321 + t2200 * t2355 + t2222 * t2389 + t2244 * t2422 + t2266 * t2455 + t3634 * t470 + t3637 * t778;
t3902 = t3659 * t1086 + t3662 * t1394 + t3650 * t156 + t3665 * t1702 + t2139 * t2287 + t2162 * t2321 + t2185 * t2355 + t2208 * t2389 + t2230 * t2422 + t2252 * t2455 + t3653 * t470 + t3656 * t778;
t3915 = t3678 * t1086 + t3681 * t1394 + t3669 * t156 + t3684 * t1702 + t2476 * t2287 + t2483 * t2321 + t2490 * t2355 + t2497 * t2389 + t2504 * t2422 + t2511 * t2455 + t3672 * t470 + t3675 * t778;
t3935 = t2647 * t1086 + t2690 * t1394 + t2523 * t156 + t2733 * t1702 + t2560 * t2287 + t2602 * t2321 + t2643 * t2355 + t2686 * t2389 + t2729 * t2422 + t2772 * t2455 + t2564 * t470 + t2606 * t778;
t3948 = -t1952 * t1086 - t1972 * t1394 - t1892 * t156 - t1992 * t1702 - t1912 * t470 - t1932 * t778 + t2779 * t2287 + t2785 * t2321 + t2791 * t2355 + t2797 * t2389 + t2803 * t2422 + t2809 * t2455;
t3967 = t3721 * t156 + t2854 * t2287 + t2857 * t2851 + t3725 * t470 + t2901 * t2321 + t2904 * t2898 + t3729 * t778 + t2948 * t2355 + t2951 * t2945 + t3733 * t1086 + t2994 * t2389 + t2997 * t2990 + t3737 * t1394 + t3040 * t2422 + t3043 * t3036 + t3741 * t1702 + t3086 * t2455 + t3089 * t3082;
t3998 = t3746 * t156 + t331 * t192 * t2286 + t331 * t11 * t2851 + t3752 * t470 + t639 * t506 * t2320 + t639 * t344 * t2898 + t3758 * t778 + t947 * t814 * t2354 + t947 * t652 * t2945 + t3764 * t1086 + t1255 * t1122 * t2388 + t1255 * t960 * t2990 + t3770 * t1394 + t1563 * t1430 * t2421 + t1563 * t1268 * t3036 + t3776 * t1702 + t1871 * t1738 * t2454 + t1871 * t1576 * t3082;
t4017 = t3205 * t156 + t3226 * t2287 + t3228 * t2851 + t3234 * t470 + t3255 * t2321 + t3257 * t2898 + t3263 * t778 + t3285 * t2355 + t3287 * t2945 + t3293 * t1086 + t3316 * t2389 + t3318 * t2990 + t3324 * t1394 + t3345 * t2422 + t3347 * t3036 + t3353 * t1702 + t3374 * t2455 + t3376 * t3082;
t4036 = t3384 * t155 - t3388 * t2286 + t3394 * t2851 + t3401 * t469 - t3405 * t2320 + t3411 * t2898 + t3418 * t777 - t3422 * t2354 + t3428 * t2945 + t3435 * t1085 - t3439 * t2388 + t3445 * t2990 + t3452 * t1393 - t3456 * t2421 + t3462 * t3036 + t3469 * t1701 - t3473 * t2454 + t3479 * t3082;
t4053 = t24 * koppelP(1,2);
t4055 = t26 * koppelP(1,1);
t4056 = -t19 * t4053 - t4055;
t4058 = t24 * koppelP(1,1);
t4060 = t26 * koppelP(1,2);
t4061 = t19 * t4058 - t4060;
t4064 = t21 * t24 * koppelP(1,3);
t4065 = t14 * t4056 + t16 * t4061 - t4064;
t4068 = -t100 * t5 + t103 * t2529;
t4072 = t100 * t2 + t5 * t104;
t4076 = t12 * t1;
t4078 = t100 * t102;
t4081 = t103 * t5 + t2 * t4078;
t4085 = -t103 * t2 + t5 * t4078;
t4095 = t14 * (-t19 * t4060 + t4058) + t16 * (t19 * t4055 + t4053) - t26 * t22;
t4098 = -t4076 * (t3 * t4068 + t4072 * t6) * t4065 + t4076 * t4095 * (t3 * t4081 + t4085 * t6);
t4101 = koppelP(2,2) * t26;
t4102 = koppelP(2,1) * t3540 - t4101;
t4106 = -koppelP(2,1) * t26 - koppelP(2,2) * t3540;
t4108 = koppelP(2,3) * t3562;
t4109 = t14 * t4106 + t16 * t4102 - t4108;
t4112 = t420 * t2571 - t338 * t417;
t4116 = t417 * t335 + t338 * t421;
t4120 = t345 * t334;
t4124 = t417 * t2571 + t338 * t420;
t4127 = t420 * t335;
t4128 = t338 * t1901 - t4127;
t4141 = -t21 * koppelP(2,3) * t26 + t16 * (koppelP(2,2) * t24 + koppelP(2,1) * t3534) + (-t19 * t4101 + koppelP(2,1) * t24) * t14;
t4144 = -t4120 * (t336 * t4112 + t4116 * t339) * t4109 + t4120 * t4141 * (t336 * t4124 + t4128 * t339);
t4147 = koppelP(3,2) * t26;
t4148 = koppelP(3,1) * t3540 - t4147;
t4152 = -koppelP(3,1) * t26 - koppelP(3,2) * t3540;
t4154 = koppelP(3,3) * t3562;
t4155 = t14 * t4152 + t16 * t4148 - t4154;
t4158 = t728 * t2612 - t646 * t725;
t4162 = t725 * t643 + t646 * t729;
t4166 = t653 * t642;
t4170 = t725 * t2612 + t646 * t728;
t4174 = t643 * t728;
t4175 = t646 * t725 * t727 - t4174;
t4188 = -t21 * koppelP(3,3) * t26 + t16 * (koppelP(3,2) * t24 + koppelP(3,1) * t3534) + (-t19 * t4147 + koppelP(3,1) * t24) * t14;
t4191 = -t4166 * (t644 * t4158 + t4162 * t647) * t4155 + t4166 * t4188 * (t644 * t4170 + t4175 * t647);
t4195 = -t1033 * t954 + t1036 * t2654;
t4199 = t1033 * t951 + t1036 * t2649;
t4203 = koppelP(4,2) * t26;
t4204 = koppelP(4,1) * t3540 - t4203;
t4208 = -koppelP(4,1) * t26 - koppelP(4,2) * t3540;
t4210 = koppelP(4,3) * t3562;
t4211 = t14 * t4208 + t16 * t4204 - t4210;
t4216 = t1033 * t2654 + t1036 * t954;
t4220 = t1033 * t2649 - t1036 * t951;
t4233 = -t21 * koppelP(4,3) * t26 + t16 * (koppelP(4,2) * t24 + koppelP(4,1) * t3534) + (-t19 * t4203 + koppelP(4,1) * t24) * t14;
t4236 = -t3306 * t4211 * (t952 * t4195 + t4199 * t955) + t3306 * t4233 * (t952 * t4216 + t4220 * t955);
t4240 = -t1341 * t1262 + t1344 * t2697;
t4244 = t1341 * t1259 + t1344 * t2692;
t4248 = koppelP(5,2) * t26;
t4249 = koppelP(5,1) * t3540 - t4248;
t4253 = -koppelP(5,1) * t26 - koppelP(5,2) * t3540;
t4255 = koppelP(5,3) * t3562;
t4256 = t14 * t4253 + t16 * t4249 - t4255;
t4258 = t1269 * t1258;
t4270 = -t21 * koppelP(5,3) * t26 + t16 * (koppelP(5,2) * t24 + koppelP(5,1) * t3534) + (-t19 * t4248 + koppelP(5,1) * t24) * t14;
t4273 = t1344 * t1262 + t1341 * t2697;
t4277 = -t1344 * t1259 + t1341 * t2692;
t4282 = -t4258 * t4256 * (t1260 * t4240 + t4244 * t1263) + t4258 * (t1260 * t4273 + t4277 * t1263) * t4270;
t4285 = koppelP(6,2) * t26;
t4286 = koppelP(6,1) * t3540 - t4285;
t4290 = -koppelP(6,1) * t26 - koppelP(6,2) * t3540;
t4292 = koppelP(6,3) * t3562;
t4293 = t14 * t4290 + t16 * t4286 - t4292;
t4296 = -t1649 * t1570 + t1652 * t2740;
t4300 = t1649 * t1567 + t1652 * t2735;
t4304 = t1577 * t1566;
t4316 = -t21 * koppelP(6,3) * t26 + t16 * (koppelP(6,2) * t24 + koppelP(6,1) * t3534) + (-t19 * t4285 + koppelP(6,1) * t24) * t14;
t4319 = t1652 * t1570 + t1649 * t2740;
t4323 = -t1652 * t1567 + t1649 * t2735;
t4328 = -t4304 * (t1568 * t4296 + t4300 * t1571) * t4293 + t4304 * (t1568 * t4319 + t4323 * t1571) * t4316;
t4333 = t1932 * t4191;
t4346 = t29 * t5;
t4350 = t14 * t19;
t4352 = -t16 * koppelP(1,1) * t19 + koppelP(1,2) * t4350 + t22;
t4353 = t4352 * t2;
t4354 = -t102 * t4346 - t4353;
t4356 = t29 * t2;
t4358 = t4352 * t5;
t4360 = t6 * (-t102 * t4356 + t4358);
t4369 = t3 * (t102 * t4358 - t4356) - (t102 * t4353 + t4346) * t6;
t4389 = t192 * (t100 * (t24 * (t3 * t4354 - t4360) + t4369 * t26) - t103 * (t24 * t4369 + (-t3 * t4354 + t4360) * t26)) + (t100 * (-t4352 * t26 + t34) + (t24 * t4352 + t30) * t103) * t3221;
t4393 = t356 * t338;
t4398 = -t16 * koppelP(2,1) * t19 + koppelP(2,2) * t4350 + t351;
t4399 = t4398 * t335;
t4400 = -t419 * t4393 - t4399;
t4402 = t356 * t335;
t4404 = t4398 * t338;
t4406 = (-t419 * t4402 + t4404) * t339;
t4415 = t336 * (t419 * t4404 - t4402) - (t419 * t4399 + t4393) * t339;
t4435 = t506 * (t417 * (t24 * (t336 * t4400 - t4406) + t4415 * t26) - t420 * (t24 * t4415 + (-t336 * t4400 + t4406) * t26)) + (t417 * (-t4398 * t26 + t361) + (t24 * t4398 + t357) * t420) * t3250;
t4439 = t664 * t646;
t4444 = -t16 * koppelP(3,1) * t19 + koppelP(3,2) * t4350 + t659;
t4445 = t4444 * t643;
t4446 = -t727 * t4439 - t4445;
t4448 = t664 * t643;
t4450 = t4444 * t646;
t4452 = (-t727 * t4448 + t4450) * t647;
t4461 = t644 * (t727 * t4450 - t4448) - (t727 * t4445 + t4439) * t647;
t4482 = t814 * (t725 * (t24 * (t644 * t4446 - t4452) + t4461 * t26) - t728 * (t24 * t4461 + (-t644 * t4446 + t4452) * t26)) + (t725 * (-t4444 * t26 + t669) + (t24 * t4444 + t665) * t728) * t652 * t651;
t4486 = t972 * t954;
t4491 = -t16 * koppelP(4,1) * t19 + koppelP(4,2) * t4350 + t967;
t4492 = t4491 * t951;
t4493 = -t1035 * t4486 - t4492;
t4495 = t972 * t951;
t4497 = t4491 * t954;
t4499 = (-t1035 * t4495 + t4497) * t955;
t4508 = t952 * (t1035 * t4497 - t4495) - (t1035 * t4492 + t4486) * t955;
t4528 = t1122 * (t1033 * (t24 * (t952 * t4493 - t4499) + t26 * t4508) - t1036 * (t24 * t4508 + t26 * (-t952 * t4493 + t4499))) + (t1033 * (-t4491 * t26 + t977) + (t24 * t4491 + t973) * t1036) * t3311;
t4532 = t1280 * t1262;
t4537 = -t16 * koppelP(5,1) * t19 + koppelP(5,2) * t4350 + t1275;
t4538 = t4537 * t1259;
t4539 = -t1343 * t4532 - t4538;
t4541 = t1280 * t1259;
t4543 = t4537 * t1262;
t4545 = (-t1343 * t4541 + t4543) * t1263;
t4554 = t1260 * (t1343 * t4543 - t4541) - (t1343 * t4538 + t4532) * t1263;
t4574 = t1430 * (t1341 * (t24 * (t1260 * t4539 - t4545) + t26 * t4554) - t1344 * (t24 * t4554 + t26 * (-t1260 * t4539 + t4545))) + (t1341 * (-t4537 * t26 + t1285) + (t24 * t4537 + t1281) * t1344) * t3340;
t4578 = t1588 * t1570;
t4583 = -t16 * koppelP(6,1) * t19 + koppelP(6,2) * t4350 + t1583;
t4584 = t4583 * t1567;
t4585 = -t1651 * t4578 - t4584;
t4587 = t1588 * t1567;
t4589 = t4583 * t1570;
t4591 = (-t1651 * t4587 + t4589) * t1571;
t4600 = t1568 * (t1651 * t4589 - t4587) - (t1651 * t4584 + t4578) * t1571;
t4620 = t1738 * (t1649 * (t24 * (t1568 * t4585 - t4591) + t26 * t4600) - t1652 * (t24 * t4600 + t26 * (-t1568 * t4585 + t4591))) + (t1649 * (-t4583 * t26 + t1593) + (t24 * t4583 + t1589) * t1652) * t3369;
t4623 = -t2042 * t2038 * t4389 - t2059 * t2055 * t4435 - t2076 * t2072 * t4482 - t2094 * t2090 * t4528 - t2112 * t2108 * t4574 - t2130 * t2126 * t4620 + t2030 * t4098 + t2047 * t4144 + t2064 * t4191 + t2082 * t4236 + t2100 * t4282 + t2118 * t4328;
t4625 = t1 * t4389;
t4628 = t334 * t4435;
t4631 = t642 * t4482;
t4634 = t950 * t4528;
t4637 = t1258 * t4574;
t4640 = t1566 * t4620;
t4642 = t2145 * t4098 + t2154 * t4625 + t2168 * t4144 + t2177 * t4628 + t2191 * t4191 + t2200 * t4631 + t2213 * t4236 + t2222 * t4634 + t2235 * t4282 + t2244 * t4637 + t2257 * t4328 + t2266 * t4640;
t4655 = t2139 * t4625 + t2162 * t4628 + t2185 * t4631 + t2208 * t4634 + t2230 * t4637 + t2252 * t4640 + t2299 * t4098 + t2333 * t4144 + t2367 * t4191 + t2400 * t4236 + t2433 * t4282 + t2466 * t4328;
t4668 = t2473 * t4098 + t2476 * t4625 + t2480 * t4144 + t2483 * t4628 + t2487 * t4191 + t2490 * t4631 + t2494 * t4236 + t2497 * t4634 + t2501 * t4282 + t2504 * t4637 + t2508 * t4328 + t2511 * t4640;
t4694 = t1952 * t1122 * t4236 + t1972 * t1430 * t4282 + t1992 * t1738 * t4328 + t1892 * t192 * t4098 + t1912 * t506 * t4144 + t1932 * t814 * t4191 + t2560 * t4625 + t2602 * t4628 + t2643 * t4631 + t2686 * t4634 + t2729 * t4637 + t2772 * t4640;
t4712 = -t1892 * t11 * t4098 - t1972 * t1268 * t4282 - t1992 * t1576 * t4328 - t1912 * t344 * t4144 - t1952 * t960 * t4236 + t2779 * t4625 + t2785 * t4628 + t2791 * t4631 + t2797 * t4634 + t2803 * t4637 + t2809 * t4640 - t652 * t4333;
t4717 = t3 * t102 * t11 * t5;
t4718 = t11 * t2;
t4724 = t103 * (-t6 * t102 * t4718 + t2832 + t4717) + t8 * t2284;
t4732 = -t6 * t4081 * t11 - t4718 * t103 * t3 + (t4717 + t2832) * t100;
t4734 = t4724 * t4065 - t4095 * t4732;
t4740 = t336 * t419 * t344 * t338;
t4747 = t420 * (-t339 * t419 * t344 * t335 + t2879 + t4740) + t341 * t2318;
t4755 = -t339 * t4124 * t344 - t4127 * t336 * t344 + (t4740 + t2879) * t417;
t4757 = t4747 * t4109 - t4141 * t4755;
t4763 = t644 * t727 * t652 * t646;
t4770 = t728 * (-t647 * t727 * t652 * t643 + t2926 + t4763) + t649 * t2352;
t4778 = -t647 * t4170 * t652 - t4174 * t644 * t652 + (t4763 + t2926) * t725;
t4780 = t4770 * t4155 - t4188 * t4778;
t4786 = t960 * t951;
t4788 = t955 * t1035 * t4786;
t4791 = t960 * t954;
t4798 = t952 * t1035 * t4791 + t2972 - t4788;
t4801 = t1033 * t4798 - t957 * t2377;
t4803 = (t952 * t4199 * t960 + t1036 * (-t4788 + t2972) + t955 * t1033 * t4791) * t4211 - t4233 * t4801;
t4809 = t1268 * t1259;
t4811 = t1263 * t1343 * t4809;
t4814 = t1268 * t1262;
t4821 = t1260 * t1343 * t4814 + t3018 - t4811;
t4824 = -t1265 * t2410 + t1341 * t4821;
t4826 = (t1260 * t4244 * t1268 + t1344 * (-t4811 + t3018) + t1263 * t1341 * t4814) * t4256 - t4270 * t4824;
t4834 = t1571 * t1651 * t1576 * t1567;
t4837 = t1576 * t1570;
t4844 = t1568 * t1651 * t4837 + t3064 - t4834;
t4847 = -t1573 * t2443 + t1649 * t4844;
t4849 = (t1568 * t4300 * t1576 + t1652 * (-t4834 + t3064) + t1571 * t1649 * t4837) * t4293 - t4316 * t4847;
t4851 = t2826 * t4098 + t2854 * t4625 + t2857 * t4734 + t2873 * t4144 + t2901 * t4628 + t2904 * t4757 + t2920 * t4191 + t2948 * t4631 + t2951 * t4780 + t2966 * t4236 + t2994 * t4634 + t2997 * t4803 + t3012 * t4282 + t3040 * t4637 + t3043 * t4826 + t3058 * t4328 + t3086 * t4640 + t3089 * t4849;
t4882 = t3103 * t4098 + t331 * t192 * t4389 + t331 * t11 * t4734 + t3121 * t4144 + t639 * t506 * t4435 + t639 * t344 * t4757 + t3139 * t4191 + t947 * t814 * t4482 + t947 * t652 * t4780 + t3157 * t4236 + t1255 * t1122 * t4528 + t1255 * t960 * t4803 + t3175 * t4282 + t1563 * t1430 * t4574 + t1563 * t1268 * t4826 + t3193 * t4328 + t1871 * t1738 * t4620 + t1871 * t1576 * t4849;
t4907 = t11 * t3205 * t4098 + t3226 * t4625 + t3228 * t4734 + t344 * t3234 * t4144 + t3255 * t4628 + t3257 * t4757 + t652 * t3263 * t4191 + t3285 * t4631 + t3287 * t4780 + t960 * t3293 * t4236 + t3316 * t4634 + t3318 * t4803 + t1268 * t3324 * t4282 + t3345 * t4637 + t3347 * t4826 + t1576 * t3353 * t4328 + t3374 * t4640 + t3376 * t4849;
t4909 = t11 * qJ(3,1);
t4914 = t344 * qJ(3,2);
t4919 = t652 * t3418;
t4924 = t960 * t3435;
t4929 = t1268 * t3452;
t4934 = t1576 * t3469;
t4938 = t4909 * t3384 * t4098 - t3388 * t4389 + t3394 * t4734 + t4914 * t3401 * t4144 - t3405 * t4435 + t3411 * t4757 + t4919 * qJ(3,3) * t4191 - t3422 * t4482 + t3428 * t4780 + t4924 * qJ(3,4) * t4236 - t3439 * t4528 + t3445 * t4803 + t4929 * qJ(3,5) * t4282 - t3456 * t4574 + t3462 * t4826 + t4934 * qJ(3,6) * t4328 - t3473 * t4620 + t3479 * t4849;
t4939 = t3516 + t3518 + t3519 + t3520;
t4945 = t213 * t3493;
t4946 = t3500 - t3501 - t3502 + t3503 + t4945;
t4949 = t3493 ^ 2;
t4950 = t3486 + t4949;
t4954 = t213 ^ 2;
t4955 = t4954 + t3510;
t4957 = -t213 * t3485;
t4958 = t3516 + t3518 + t3519 + t3520 + t4957;
t4962 = t3500 - t3501 - t3502 + t3503;
t4967 = t3485 ^ 2;
t4968 = t3482 + t4967;
t4970 = t3485 * t3493;
t4971 = t3489 + t3490 + xDDP(6) + t4970;
t4977 = t3489 + t3490 + xDDP(6);
t4994 = t12 * t1 * t4065 * t3379 - t4076 * t155 * t117;
t5001 = t345 * t334 * t4109 * t3396 - t4120 * t469 * t432;
t5008 = t653 * t642 * t4155 * t3413 - t4166 * t777 * t740;
t5015 = t961 * t950 * t4211 * t3430 - t3306 * t1085 * t1048;
t5022 = t1269 * t1258 * t4256 * t3447 - t4258 * t1393 * t1356;
t5029 = t1577 * t1566 * t4293 * t3464 - t4304 * t1701 * t1664;
t5034 = t1932 * t5008;
t5049 = -t14 * t4056 - t16 * t4061 + t4064;
t5053 = -t18 * t21 + t71;
t5065 = t192 * (t10 * t99 * t5049 + (t3 * t4085 - t4081 * t6) * t5053) + t11 * (-t10 * t100 * t5053 + t5049 * t102);
t5071 = -t14 * t4106 - t16 * t4102 + t4108;
t5075 = -t349 * t21 + t388;
t5087 = t506 * (t343 * t416 * t5071 + (t336 * t4128 - t4124 * t339) * t5075) + t344 * (-t343 * t417 * t5075 + t5071 * t419);
t5093 = -t14 * t4152 - t16 * t4148 + t4154;
t5097 = -t657 * t21 + t696;
t5109 = t814 * (t651 * t724 * t5093 + (-t4170 * t647 + t644 * t4175) * t5097) + t652 * (-t651 * t725 * t5097 + t5093 * t727);
t5115 = -t14 * t4208 - t16 * t4204 + t4210;
t5119 = -t965 * t21 + t1004;
t5131 = t1122 * (t959 * t5115 * t1032 + (-t4216 * t955 + t952 * t4220) * t5119) + (-t959 * t1033 * t5119 + t5115 * t1035) * t960;
t5137 = -t14 * t4253 - t16 * t4249 + t4255;
t5141 = -t1273 * t21 + t1312;
t5153 = t1430 * (t1267 * t5137 * t1340 + (t1260 * t4277 - t4273 * t1263) * t5141) + (-t1267 * t1341 * t5141 + t5137 * t1343) * t1268;
t5159 = -t14 * t4290 - t16 * t4286 + t4292;
t5163 = -t1581 * t21 + t1620;
t5175 = t1738 * (t1575 * t5159 * t1648 + (t1568 * t4323 - t4319 * t1571) * t5163) + (-t1575 * t1649 * t5163 + t5159 * t1651) * t1576;
t5178 = -t2042 * t2038 * t5065 - t2059 * t2055 * t5087 - t2076 * t2072 * t5109 - t2094 * t2090 * t5131 - t2112 * t2108 * t5153 - t2130 * t2126 * t5175 + t2030 * t4994 + t2047 * t5001 + t2064 * t5008 + t2082 * t5015 + t2100 * t5022 + t2118 * t5029;
t5180 = t1 * t5065;
t5183 = t334 * t5087;
t5186 = t642 * t5109;
t5189 = t950 * t5131;
t5192 = t1258 * t5153;
t5195 = t1566 * t5175;
t5197 = t2145 * t4994 + t2154 * t5180 + t2168 * t5001 + t2177 * t5183 + t2191 * t5008 + t2200 * t5186 + t2213 * t5015 + t2222 * t5189 + t2235 * t5022 + t2244 * t5192 + t2257 * t5029 + t2266 * t5195;
t5210 = t2139 * t5180 + t2162 * t5183 + t2185 * t5186 + t2208 * t5189 + t2230 * t5192 + t2252 * t5195 + t2299 * t4994 + t2333 * t5001 + t2367 * t5008 + t2400 * t5015 + t2433 * t5022 + t2466 * t5029;
t5223 = t2473 * t4994 + t2476 * t5180 + t2480 * t5001 + t2483 * t5183 + t2487 * t5008 + t2490 * t5186 + t2494 * t5015 + t2497 * t5189 + t2501 * t5022 + t2504 * t5192 + t2508 * t5029 + t2511 * t5195;
t5249 = t1952 * t1122 * t5015 + t1972 * t1430 * t5022 + t1992 * t1738 * t5029 + t1892 * t192 * t4994 + t1912 * t506 * t5001 + t1932 * t814 * t5008 + t2560 * t5180 + t2602 * t5183 + t2643 * t5186 + t2686 * t5189 + t2729 * t5192 + t2772 * t5195;
t5267 = -t1892 * t11 * t4994 - t1972 * t1268 * t5022 - t1992 * t1576 * t5029 - t1912 * t344 * t5001 - t1952 * t960 * t5015 + t2779 * t5180 + t2785 * t5183 + t2791 * t5186 + t2797 * t5189 + t2803 * t5192 + t2809 * t5195 - t652 * t5034;
t5272 = -t2843 * t4065 + t4732 * t5053;
t5278 = -t2890 * t4109 + t4755 * t5075;
t5284 = -t2937 * t4155 + t4778 * t5097;
t5291 = t952 * t959 * t4791 - t3304 * t4786 - t2977;
t5294 = -t4211 * t5291 + t4801 * t5119;
t5302 = t1260 * t1267 * t4814 - t1263 * t1267 * t4809 - t3023;
t5305 = -t4256 * t5302 + t4824 * t5141;
t5315 = -t1575 * t1567 * t1571 * t1576 + t1575 * t1570 * t1568 * t1576 - t3069;
t5318 = -t4293 * t5315 + t4847 * t5163;
t5320 = t2826 * t4994 + t2854 * t5180 + t2857 * t5272 + t2873 * t5001 + t2901 * t5183 + t2904 * t5278 + t2920 * t5008 + t2948 * t5186 + t2951 * t5284 + t2966 * t5015 + t2994 * t5189 + t2997 * t5294 + t3012 * t5022 + t3040 * t5192 + t3043 * t5305 + t3058 * t5029 + t3086 * t5195 + t3089 * t5318;
t5351 = t3103 * t4994 + t331 * t192 * t5065 + t331 * t11 * t5272 + t3121 * t5001 + t639 * t506 * t5087 + t639 * t344 * t5278 + t3139 * t5008 + t947 * t814 * t5109 + t947 * t652 * t5284 + t3157 * t5015 + t1255 * t1122 * t5131 + t1255 * t960 * t5294 + t3175 * t5022 + t1563 * t1430 * t5153 + t1563 * t1268 * t5305 + t3193 * t5029 + t1871 * t1738 * t5175 + t1871 * t1576 * t5318;
t5376 = t11 * t3205 * t4994 + t3226 * t5180 + t3228 * t5272 + t344 * t3234 * t5001 + t3255 * t5183 + t3257 * t5278 + t652 * t3263 * t5008 + t3285 * t5186 + t3287 * t5284 + t960 * t3293 * t5015 + t3316 * t5189 + t3318 * t5294 + t1268 * t3324 * t5022 + t3345 * t5192 + t3347 * t5305 + t1576 * t3353 * t5029 + t3374 * t5195 + t3376 * t5318;
t5401 = t4909 * t3384 * t4994 - t3388 * t5065 + t3394 * t5272 + t4914 * t3401 * t5001 - t3405 * t5087 + t3411 * t5278 + t4919 * qJ(3,3) * t5008 - t3422 * t5109 + t3428 * t5284 + t4924 * qJ(3,4) * t5015 - t3439 * t5131 + t3445 * t5294 + t4929 * qJ(3,5) * t5022 - t3456 * t5153 + t3462 * t5305 + t4934 * qJ(3,6) * t5029 - t3473 * t5175 + t3479 * t5318;
t5444 = t12 * t1 * t4095 * t3379 + t4076 * t106 * t117;
t5451 = t345 * t334 * t4141 * t3396 + t4120 * t423 * t432;
t5458 = t653 * t642 * t4188 * t3413 + t4166 * t731 * t740;
t5465 = t961 * t950 * t4233 * t3430 + t3306 * t1039 * t1048;
t5472 = t1269 * t1258 * t4270 * t3447 + t4258 * t1347 * t1356;
t5479 = t1577 * t1566 * t4316 * t3464 + t4304 * t1655 * t1664;
t5484 = t1932 * t5458;
t5510 = t192 * (-t10 * t99 * t4095 + t5053 * (t3 * t4072 - t4068 * t6)) - (t10 * t103 * t5053 + t4095 * t102) * t11;
t5527 = t506 * (-t343 * t416 * t4141 + (t336 * t4116 - t4112 * t339) * t5075) - (t343 * t420 * t5075 + t4141 * t419) * t344;
t5544 = t814 * (-t651 * t724 * t4188 + (-t4158 * t647 + t644 * t4162) * t5097) - (t651 * t728 * t5097 + t4188 * t727) * t652;
t5561 = t1122 * (-t959 * t1032 * t4233 + (-t4195 * t955 + t952 * t4199) * t5119) - t960 * (t959 * t1036 * t5119 + t4233 * t1035);
t5578 = t1430 * (-t1267 * t1340 * t4270 + (t1260 * t4244 - t4240 * t1263) * t5141) - t1268 * (t1267 * t1344 * t5141 + t4270 * t1343);
t5595 = t1738 * (-t1575 * t1648 * t4316 + (t1568 * t4300 - t4296 * t1571) * t5163) - t1576 * (t1575 * t1652 * t5163 + t4316 * t1651);
t5598 = -t2042 * t2038 * t5510 - t2059 * t2055 * t5527 - t2076 * t2072 * t5544 - t2094 * t2090 * t5561 - t2112 * t2108 * t5578 - t2130 * t2126 * t5595 + t2030 * t5444 + t2047 * t5451 + t2064 * t5458 + t2082 * t5465 + t2100 * t5472 + t2118 * t5479;
t5600 = t1 * t5510;
t5603 = t334 * t5527;
t5606 = t642 * t5544;
t5609 = t950 * t5561;
t5612 = t1258 * t5578;
t5615 = t1566 * t5595;
t5617 = t2145 * t5444 + t2154 * t5600 + t2168 * t5451 + t2177 * t5603 + t2191 * t5458 + t2200 * t5606 + t2213 * t5465 + t2222 * t5609 + t2235 * t5472 + t2244 * t5612 + t2257 * t5479 + t2266 * t5615;
t5630 = t2139 * t5600 + t2162 * t5603 + t2185 * t5606 + t2208 * t5609 + t2230 * t5612 + t2252 * t5615 + t2299 * t5444 + t2333 * t5451 + t2367 * t5458 + t2400 * t5465 + t2433 * t5472 + t2466 * t5479;
t5643 = t2473 * t5444 + t2476 * t5600 + t2480 * t5451 + t2483 * t5603 + t2487 * t5458 + t2490 * t5606 + t2494 * t5465 + t2497 * t5609 + t2501 * t5472 + t2504 * t5612 + t2508 * t5479 + t2511 * t5615;
t5669 = t1952 * t1122 * t5465 + t1972 * t1430 * t5472 + t1992 * t1738 * t5479 + t1892 * t192 * t5444 + t1912 * t506 * t5451 + t1932 * t814 * t5458 + t2560 * t5600 + t2602 * t5603 + t2643 * t5606 + t2686 * t5609 + t2729 * t5612 + t2772 * t5615;
t5687 = -t1892 * t11 * t5444 - t1972 * t1268 * t5472 - t1992 * t1576 * t5479 - t1912 * t344 * t5451 - t1952 * t960 * t5465 + t2779 * t5600 + t2785 * t5603 + t2791 * t5606 + t2797 * t5609 + t2803 * t5612 + t2809 * t5615 - t652 * t5484;
t5692 = -t2843 * t4095 + t4724 * t5053;
t5698 = -t2890 * t4141 + t4747 * t5075;
t5704 = -t2937 * t4188 + t4770 * t5097;
t5713 = -t5291 * t4233 + t5119 * (t1036 * t4798 + t957 * t2386);
t5722 = -t5302 * t4270 + t5141 * (t1265 * t2419 + t1344 * t4821);
t5731 = -t5315 * t4316 + t5163 * (t1573 * t2452 + t1652 * t4844);
t5733 = t2826 * t5444 + t2854 * t5600 + t2857 * t5692 + t2873 * t5451 + t2901 * t5603 + t2904 * t5698 + t2920 * t5458 + t2948 * t5606 + t2951 * t5704 + t2966 * t5465 + t2994 * t5609 + t2997 * t5713 + t3012 * t5472 + t3040 * t5612 + t3043 * t5722 + t3058 * t5479 + t3086 * t5615 + t3089 * t5731;
t5764 = t3103 * t5444 + t331 * t192 * t5510 + t331 * t11 * t5692 + t3121 * t5451 + t639 * t506 * t5527 + t639 * t344 * t5698 + t3139 * t5458 + t947 * t814 * t5544 + t947 * t652 * t5704 + t3157 * t5465 + t1255 * t1122 * t5561 + t1255 * t960 * t5713 + t3175 * t5472 + t1563 * t1430 * t5578 + t1563 * t1268 * t5722 + t3193 * t5479 + t1871 * t1738 * t5595 + t1871 * t1576 * t5731;
t5789 = t11 * t3205 * t5444 + t3226 * t5600 + t3228 * t5692 + t344 * t3234 * t5451 + t3255 * t5603 + t3257 * t5698 + t652 * t3263 * t5458 + t3285 * t5606 + t3287 * t5704 + t960 * t3293 * t5465 + t3316 * t5609 + t3318 * t5713 + t1268 * t3324 * t5472 + t3345 * t5612 + t3347 * t5722 + t1576 * t3353 * t5479 + t3374 * t5615 + t3376 * t5731;
t5814 = t4909 * t3384 * t5444 - t3388 * t5510 + t3394 * t5692 + t4914 * t3401 * t5451 - t3405 * t5527 + t3411 * t5698 + t4919 * qJ(3,3) * t5458 - t3422 * t5544 + t3428 * t5704 + t4924 * qJ(3,4) * t5465 - t3439 * t5561 + t3445 * t5713 + t4929 * qJ(3,5) * t5472 - t3456 * t5578 + t3462 * t5722 + t4934 * qJ(3,6) * t5479 - t3473 * t5595 + t3479 * t5731;
unknown(1,1) = -t1255 * t962 * t958 - t1563 * t1270 * t1266 - t331 * t13 * t9 - t1871 * t1578 * t1574 - t639 * t346 * t342 - t947 * t654 * t650;
unknown(1,2) = -t1972 * t1270 * t1266 - t1892 * t13 * t9 - t1992 * t1578 * t1574 - t1912 * t346 * t342 - t1932 * t654 * t650 - t1952 * t962 * t958;
unknown(1,3) = -t2018 * t1270 * t1266 - t1998 * t13 * t9 - t2023 * t1578 * t1574 - t2003 * t346 * t342 - t2008 * t654 * t650 - t2013 * t962 * t958;
unknown(1,4) = t2132;
unknown(1,5) = t2268;
unknown(1,6) = t2470;
unknown(1,7) = t2513;
unknown(1,8) = t2294 * t2148 + t2328 * t2171 + t2362 * t2194 + t2395 * t2216 + t2428 * t2238 + t2461 * t2260;
unknown(1,9) = t2774;
unknown(1,10) = t2811;
unknown(1,11) = t3091;
unknown(1,12) = t3200;
unknown(1,13) = t3378;
unknown(1,14) = t3481;
unknown(1,15) = 0.0e0;
unknown(1,16) = 0.0e0;
unknown(1,17) = 0.0e0;
unknown(1,18) = 0.0e0;
unknown(1,19) = 0.0e0;
unknown(1,20) = 0.0e0;
unknown(1,21) = t3487 * t113 - t3495 * t115 + t3505 * t19;
unknown(1,22) = t3508 * t113 - t3511 * t115 + t3522 * t19;
unknown(1,23) = t3525 * t113 - t3527 * t115 + t3529 * t19;
unknown(1,24) = t3546 * t113 - t3557 * t115 + t3564 * t19;
unknown(2,1) = t3573 * t1040 + t3567 * t107 + t3575 * t1348 + t3577 * t1656 + t3569 * t424 + t3571 * t732;
unknown(2,2) = t3586 * t1040 + t3580 * t107 + t3588 * t1348 + t3590 * t1656 + t3582 * t424 + t3584 * t732;
unknown(2,3) = t3599 * t1040 + t3593 * t107 + t3601 * t1348 + t3603 * t1656 + t3595 * t424 + t3597 * t732;
unknown(2,4) = t3630;
unknown(2,5) = t3649;
unknown(2,6) = t3668;
unknown(2,7) = t3687;
unknown(2,8) = t2294 * t2278 + t2328 * t2312 + t2362 * t2346 + t2395 * t2380 + t2428 * t2413 + t2461 * t2446;
unknown(2,9) = t3707;
unknown(2,10) = t3720;
unknown(2,11) = t3745;
unknown(2,12) = t3782;
unknown(2,13) = t3801;
unknown(2,14) = t3820;
unknown(2,15) = 0.0e0;
unknown(2,16) = 0.0e0;
unknown(2,17) = 0.0e0;
unknown(2,18) = 0.0e0;
unknown(2,19) = 0.0e0;
unknown(2,20) = 0.0e0;
unknown(2,21) = t3487 * t3537 + t3495 * t3551 - t3505 * t3560;
unknown(2,22) = t3508 * t3537 + t3511 * t3551 - t3522 * t3560;
unknown(2,23) = t3525 * t3537 + t3527 * t3551 - t3529 * t3560;
unknown(2,24) = t3546 * t3537 + t3557 * t3551 - t3564 * t3560;
unknown(3,1) = t3573 * t1086 + t3575 * t1394 + t3567 * t156 + t3577 * t1702 + t3569 * t470 + t3571 * t778;
unknown(3,2) = t3586 * t1086 + t3588 * t1394 + t3580 * t156 + t3590 * t1702 + t3582 * t470 + t3584 * t778;
unknown(3,3) = t3599 * t1086 + t3601 * t1394 + t3593 * t156 + t3603 * t1702 + t3595 * t470 + t3597 * t778;
unknown(3,4) = t3876;
unknown(3,5) = t3889;
unknown(3,6) = t3902;
unknown(3,7) = t3915;
unknown(3,8) = t2294 * t2287 + t2328 * t2321 + t2362 * t2355 + t2395 * t2389 + t2428 * t2422 + t2461 * t2455;
unknown(3,9) = t3935;
unknown(3,10) = t3948;
unknown(3,11) = t3967;
unknown(3,12) = t3998;
unknown(3,13) = t4017;
unknown(3,14) = t4036;
unknown(3,15) = 0.0e0;
unknown(3,16) = 0.0e0;
unknown(3,17) = 0.0e0;
unknown(3,18) = 0.0e0;
unknown(3,19) = 0.0e0;
unknown(3,20) = 0.0e0;
unknown(3,21) = t3487 * t3543 + t3495 * t3555 + t3505 * t3562;
unknown(3,22) = t3508 * t3543 + t3511 * t3555 + t3522 * t3562;
unknown(3,23) = t3525 * t3543 + t3527 * t3555 + t3529 * t3562;
unknown(3,24) = t3546 * t3543 + t3557 * t3555 + t3564 * t3562;
unknown(4,1) = t1255 * t4236 + t1563 * t4282 + t1871 * t4328 + t331 * t4098 + t639 * t4144 + t947 * t4191;
unknown(4,2) = t1892 * t4098 + t1912 * t4144 + t1952 * t4236 + t1972 * t4282 + t1992 * t4328 + t4333;
unknown(4,3) = t1998 * t4098 + t2003 * t4144 + t2008 * t4191 + t2013 * t4236 + t2018 * t4282 + t2023 * t4328;
unknown(4,4) = t4623;
unknown(4,5) = t4642;
unknown(4,6) = t4655;
unknown(4,7) = t4668;
unknown(4,8) = t2294 * t4625 + t2328 * t4628 + t2362 * t4631 + t2395 * t4634 + t2428 * t4637 + t2461 * t4640;
unknown(4,9) = t4694;
unknown(4,10) = t4712;
unknown(4,11) = t4851;
unknown(4,12) = t4882;
unknown(4,13) = t4907;
unknown(4,14) = t4938;
unknown(4,15) = t3493 * t3485 * t19 + t4939 * t113 - t3504 * t115;
unknown(4,16) = t4946 * t113 - t3522 * t115 + t4950 * t19;
unknown(4,17) = t3495 * t113 - t4955 * t115 + t4958 * t19;
unknown(4,18) = -t3493 * t3485 * t19 + t4957 * t113 - t4962 * t115;
unknown(4,19) = t4968 * t113 - t4971 * t115 + t3525 * t19;
unknown(4,20) = t3521 * t113 - t4945 * t115 + t4977 * t19;
unknown(4,21) = t3564 * t115 + t3557 * t19;
unknown(4,22) = t3564 * t113 - t3546 * t19;
unknown(4,23) = -t3557 * t113 - t3546 * t115;
unknown(4,24) = 0.0e0;
unknown(5,1) = t1255 * t5015 + t1563 * t5022 + t1871 * t5029 + t331 * t4994 + t639 * t5001 + t947 * t5008;
unknown(5,2) = t1892 * t4994 + t1912 * t5001 + t1952 * t5015 + t1972 * t5022 + t1992 * t5029 + t5034;
unknown(5,3) = t1998 * t4994 + t2003 * t5001 + t2008 * t5008 + t2013 * t5015 + t2018 * t5022 + t2023 * t5029;
unknown(5,4) = t5178;
unknown(5,5) = t5197;
unknown(5,6) = t5210;
unknown(5,7) = t5223;
unknown(5,8) = t2294 * t5180 + t2328 * t5183 + t2362 * t5186 + t2395 * t5189 + t2428 * t5192 + t2461 * t5195;
unknown(5,9) = t5249;
unknown(5,10) = t5267;
unknown(5,11) = t5320;
unknown(5,12) = t5351;
unknown(5,13) = t5376;
unknown(5,14) = t5401;
unknown(5,15) = -t213 * t3493 * t3551 + t4939 * t3537 - t4970 * t3560;
unknown(5,16) = t3522 * t3551 + t4946 * t3537 - t4950 * t3560;
unknown(5,17) = t3495 * t3537 + t4955 * t3551 - t4958 * t3560;
unknown(5,18) = -t3485 * t213 * t3537 - t3494 * t3560 + t4962 * t3551;
unknown(5,19) = -t3525 * t3560 + t4968 * t3537 + t4971 * t3551;
unknown(5,20) = t3485 * t213 * t3537 + t213 * t3493 * t3551 - t4977 * t3560;
unknown(5,21) = -t3564 * t3551 - t3557 * t3560;
unknown(5,22) = t3564 * t3537 + t3546 * t3560;
unknown(5,23) = -t3557 * t3537 + t3546 * t3551;
unknown(5,24) = 0.0e0;
unknown(6,1) = t1255 * t5465 + t1563 * t5472 + t1871 * t5479 + t331 * t5444 + t639 * t5451 + t947 * t5458;
unknown(6,2) = t1892 * t5444 + t1912 * t5451 + t1952 * t5465 + t1972 * t5472 + t1992 * t5479 + t5484;
unknown(6,3) = t1998 * t5444 + t2003 * t5451 + t2008 * t5458 + t2013 * t5465 + t2018 * t5472 + t2023 * t5479;
unknown(6,4) = t5598;
unknown(6,5) = t5617;
unknown(6,6) = t5630;
unknown(6,7) = t5643;
unknown(6,8) = t2294 * t5600 + t2328 * t5603 + t2362 * t5606 + t2395 * t5609 + t2428 * t5612 + t2461 * t5615;
unknown(6,9) = t5669;
unknown(6,10) = t5687;
unknown(6,11) = t5733;
unknown(6,12) = t5764;
unknown(6,13) = t5789;
unknown(6,14) = t5814;
unknown(6,15) = -t213 * t3493 * t3555 + t4939 * t3543 + t4970 * t3562;
unknown(6,16) = t3522 * t3555 + t4946 * t3543 + t4950 * t3562;
unknown(6,17) = t3495 * t3543 + t4955 * t3555 + t4958 * t3562;
unknown(6,18) = -t3485 * t213 * t3543 + t3494 * t3562 + t4962 * t3555;
unknown(6,19) = t3525 * t3562 + t4968 * t3543 + t4971 * t3555;
unknown(6,20) = t3485 * t213 * t3543 + t213 * t3493 * t3555 + t4977 * t3562;
unknown(6,21) = -t3564 * t3555 + t3557 * t3562;
unknown(6,22) = t3564 * t3543 - t3546 * t3562;
unknown(6,23) = -t3557 * t3543 + t3546 * t3555;
unknown(6,24) = 0.0e0;
tauX_reg  = unknown;
