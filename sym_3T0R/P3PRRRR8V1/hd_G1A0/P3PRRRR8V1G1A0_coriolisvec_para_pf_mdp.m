% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 16:50
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 16:50:41
% EndTime: 2020-08-06 16:50:51
% DurationCPUTime: 9.77s
% Computational Cost: add. (28615->376), mult. (72096->830), div. (4004->21), fcn. (70550->22), ass. (0->352)
t2287 = cos(qJ(3,2));
t2265 = 0.1e1 / t2287;
t2281 = sin(qJ(3,2));
t2452 = t2265 * t2281;
t2288 = cos(qJ(2,2));
t2282 = sin(qJ(2,2));
t2428 = t2282 * t2287;
t2242 = pkin(2) * t2428 - pkin(5) * t2288;
t2273 = sin(pkin(3));
t2275 = cos(pkin(3));
t2440 = t2275 * t2281;
t2364 = pkin(2) * t2440 + t2242 * t2273;
t2511 = 0.1e1 / t2364;
t2513 = t2511 * t2452;
t2516 = pkin(5) * t2513;
t2272 = sin(pkin(6));
t2274 = cos(pkin(6));
t2291 = xDP(2);
t2292 = xDP(1);
t2239 = -t2272 * t2292 + t2274 * t2291;
t2240 = t2272 * t2291 + t2274 * t2292;
t2277 = legFrame(2,3);
t2252 = sin(t2277);
t2255 = cos(t2277);
t2187 = t2239 * t2255 - t2240 * t2252;
t2190 = t2239 * t2252 + t2240 * t2255;
t2435 = t2275 * t2288;
t2439 = t2275 * t2282;
t2500 = pkin(2) * t2287;
t2150 = -(t2187 * t2282 + t2190 * t2435) * t2500 - pkin(5) * (-t2187 * t2288 + t2190 * t2439);
t2293 = pkin(5) ^ 2;
t2294 = pkin(2) ^ 2;
t2433 = t2275 * t2291;
t2235 = t2282 * t2433 + t2288 * t2292;
t2432 = t2275 * t2292;
t2236 = t2282 * t2432 - t2288 * t2291;
t2446 = t2273 * t2287;
t2160 = ((-t2235 * t2272 - t2236 * t2274) * t2255 - (t2235 * t2274 - t2236 * t2272) * t2252) * t2281 - t2190 * t2446;
t2470 = t2160 * t2511;
t2134 = -t2150 * t2516 + (t2265 * t2293 + t2287 * t2294) * t2470;
t2152 = t2160 * t2516;
t2514 = t2511 * t2265;
t2137 = t2150 * t2514 - t2152;
t2382 = t2511 * t2470;
t2512 = 0.1e1 / t2364 ^ 2;
t2476 = t2150 * t2512;
t2118 = (t2134 * t2382 + t2137 * t2476) * t2265;
t2515 = t2118 * t2514;
t2264 = t2287 ^ 2;
t2266 = 0.1e1 / t2287 ^ 2;
t2295 = 0.1e1 / pkin(2);
t2465 = t2511 * t2295;
t2391 = t2150 * t2465;
t2322 = t2265 * t2273 * t2391;
t2370 = t2273 * t2428;
t2429 = t2281 * t2282;
t2371 = t2273 * t2429;
t2377 = t2275 * t2465;
t2457 = t2511 * t2288;
t2381 = t2160 * t2457;
t2477 = t2150 * t2511;
t2112 = (-(-t2275 * t2137 + (pkin(2) * (t2150 * t2377 + t2273 * t2381) * t2264 - (-pkin(5) * t2470 + t2281 * t2477) * t2370) * t2265) * t2382 - (t2288 * t2322 + (-t2371 + (-t2265 + t2287) * t2275) * t2470) * t2476) * t2266;
t2489 = t2112 * t2511;
t2208 = t2511 * t2512;
t2285 = cos(qJ(3,3));
t2261 = 0.1e1 / t2285;
t2279 = sin(qJ(3,3));
t2276 = legFrame(3,3);
t2251 = sin(t2276);
t2254 = cos(t2276);
t2189 = t2239 * t2251 + t2240 * t2254;
t2280 = sin(qJ(2,3));
t2286 = cos(qJ(2,3));
t2233 = t2280 * t2433 + t2286 * t2292;
t2234 = t2280 * t2432 - t2286 * t2291;
t2448 = t2273 * t2285;
t2159 = ((-t2233 * t2272 - t2234 * t2274) * t2254 - (t2233 * t2274 - t2234 * t2272) * t2251) * t2279 - t2189 * t2448;
t2430 = t2280 * t2285;
t2241 = pkin(2) * t2430 - pkin(5) * t2286;
t2442 = t2275 * t2279;
t2212 = pkin(2) * t2442 + t2241 * t2273;
t2203 = 0.1e1 / t2212;
t2471 = t2159 * t2203;
t2416 = pkin(5) * t2471;
t2363 = t2279 * t2416;
t2186 = t2239 * t2254 - t2240 * t2251;
t2436 = t2275 * t2286;
t2441 = t2275 * t2280;
t2501 = pkin(2) * t2285;
t2149 = -(t2186 * t2280 + t2189 * t2436) * t2501 - pkin(5) * (-t2186 * t2286 + t2189 * t2441);
t2372 = t2273 * t2430;
t2229 = t2372 + t2442;
t2447 = t2273 * t2286;
t2200 = t2229 * pkin(2) - pkin(5) * t2447;
t2504 = 0.1e1 / t2200;
t2478 = t2149 * t2504;
t2136 = (t2363 - t2478) * t2261;
t2260 = t2285 ^ 2;
t2262 = 0.1e1 / t2285 ^ 2;
t2467 = t2504 * t2295;
t2392 = t2149 * t2467;
t2323 = t2261 * t2273 * t2392;
t2431 = t2279 * t2280;
t2373 = t2273 * t2431;
t2393 = t2504 * t2478;
t2110 = (-(t2275 * t2136 + (pkin(2) * (t2275 * t2392 + t2447 * t2471) * t2260 - (t2279 * t2478 - t2416) * t2372) * t2261) * t2504 * t2471 - (t2286 * t2323 + (-t2373 + (-t2261 + t2285) * t2275) * t2471) * t2393) * t2262;
t2454 = t2261 * t2279;
t2379 = t2504 * t2454;
t2133 = -pkin(5) * t2149 * t2379 + (t2261 * t2293 + t2285 * t2294) * t2471;
t2380 = t2203 * t2467;
t2334 = t2159 * t2380;
t2113 = (-t2275 * t2133 * t2334 - (-t2279 * t2241 * t2323 + t2275 * (-t2261 * t2363 + t2285 * t2478)) * t2149 * t2380) * t2262;
t2105 = t2110 * t2447 + t2113 * t2275;
t2204 = 0.1e1 / t2212 ^ 2;
t2156 = t2159 ^ 2;
t2474 = t2156 * t2262;
t2153 = t2204 * t2474;
t2296 = 0.1e1 / pkin(2) ^ 2;
t2481 = t2149 ^ 2 / t2200 ^ 2;
t2398 = t2296 * t2481;
t2139 = t2262 * t2398 + t2153;
t2314 = -0.2e1 * t2149 * t2286 * t2334;
t2453 = t2262 * t2279;
t2510 = t2105 * t2285 + (-t2139 * t2430 + t2314 * t2453) * t2273;
t2289 = cos(qJ(3,1));
t2269 = 0.1e1 / t2289;
t2283 = sin(qJ(3,1));
t2278 = legFrame(1,3);
t2253 = sin(t2278);
t2256 = cos(t2278);
t2191 = t2239 * t2253 + t2240 * t2256;
t2284 = sin(qJ(2,1));
t2290 = cos(qJ(2,1));
t2237 = t2284 * t2433 + t2290 * t2292;
t2238 = t2284 * t2432 - t2290 * t2291;
t2444 = t2273 * t2289;
t2161 = ((-t2237 * t2272 - t2238 * t2274) * t2256 - (t2237 * t2274 - t2238 * t2272) * t2253) * t2283 - t2191 * t2444;
t2426 = t2284 * t2289;
t2243 = pkin(2) * t2426 - pkin(5) * t2290;
t2438 = t2275 * t2283;
t2214 = pkin(2) * t2438 + t2243 * t2273;
t2209 = 0.1e1 / t2214;
t2469 = t2161 * t2209;
t2415 = pkin(5) * t2469;
t2362 = t2283 * t2415;
t2188 = t2239 * t2256 - t2240 * t2253;
t2434 = t2275 * t2290;
t2437 = t2275 * t2284;
t2499 = pkin(2) * t2289;
t2151 = -(t2188 * t2284 + t2191 * t2434) * t2499 - pkin(5) * (-t2188 * t2290 + t2191 * t2437);
t2368 = t2273 * t2426;
t2232 = t2368 + t2438;
t2443 = t2273 * t2290;
t2202 = t2232 * pkin(2) - pkin(5) * t2443;
t2503 = 0.1e1 / t2202;
t2475 = t2151 * t2503;
t2138 = (t2362 - t2475) * t2269;
t2268 = t2289 ^ 2;
t2270 = 0.1e1 / t2289 ^ 2;
t2463 = t2503 * t2295;
t2389 = t2151 * t2463;
t2321 = t2269 * t2273 * t2389;
t2427 = t2283 * t2284;
t2369 = t2273 * t2427;
t2390 = t2503 * t2475;
t2111 = (-(t2275 * t2138 + (pkin(2) * (t2275 * t2389 + t2443 * t2469) * t2268 - (t2283 * t2475 - t2415) * t2368) * t2269) * t2503 * t2469 - (t2290 * t2321 + (-t2369 + (-t2269 + t2289) * t2275) * t2469) * t2390) * t2270;
t2450 = t2269 * t2283;
t2375 = t2503 * t2450;
t2135 = -pkin(5) * t2151 * t2375 + (t2269 * t2293 + t2289 * t2294) * t2469;
t2376 = t2209 * t2463;
t2333 = t2161 * t2376;
t2115 = (-t2275 * t2135 * t2333 - (-t2283 * t2243 * t2321 + t2275 * (-t2269 * t2362 + t2289 * t2475)) * t2151 * t2376) * t2270;
t2106 = t2111 * t2443 + t2115 * t2275;
t2210 = 0.1e1 / t2214 ^ 2;
t2158 = t2161 ^ 2;
t2472 = t2158 * t2270;
t2155 = t2210 * t2472;
t2479 = t2151 ^ 2 / t2202 ^ 2;
t2394 = t2296 * t2479;
t2141 = t2270 * t2394 + t2155;
t2312 = -0.2e1 * t2151 * t2290 * t2333;
t2449 = t2270 * t2283;
t2509 = t2106 * t2289 + (-t2141 * t2426 + t2312 * t2449) * t2273;
t2458 = t2511 * t2266;
t2114 = (-t2134 * t2160 * t2377 - (-t2281 * t2242 * t2322 + t2275 * (t2287 * t2477 - t2152)) * t2391) * t2458;
t2445 = t2273 * t2288;
t2109 = t2112 * t2445 + t2114 * t2275;
t2157 = t2160 ^ 2;
t2473 = t2157 * t2266;
t2154 = t2512 * t2473;
t2480 = t2150 ^ 2 * t2512;
t2396 = t2296 * t2480;
t2140 = t2266 * t2396 + t2154;
t2313 = -0.2e1 * t2381 * t2391;
t2451 = t2266 * t2281;
t2508 = t2109 * t2287 + (-t2140 * t2428 + t2313 * t2451) * t2273;
t2507 = -t2105 * t2279 + (t2139 * t2431 + t2261 * t2314) * t2273;
t2506 = -t2109 * t2281 + (t2140 * t2429 + t2265 * t2313) * t2273;
t2505 = -t2106 * t2283 + (t2141 * t2427 + t2269 * t2312) * t2273;
t2502 = pkin(2) * t2273;
t2498 = MDP(3) * t2273;
t2497 = MDP(4) * t2273;
t2496 = MDP(9) * t2295;
t2495 = t2110 * t2504;
t2494 = t2110 * t2280;
t2493 = t2110 * t2286;
t2492 = t2111 * t2503;
t2491 = t2111 * t2284;
t2490 = t2111 * t2290;
t2488 = t2112 * t2282;
t2461 = t2203 * t2261;
t2116 = t2133 * t2159 * t2461 * t2504 - t2136 * t2261 * t2393;
t2487 = t2116 * t2203;
t2455 = t2209 * t2269;
t2117 = t2135 * t2161 * t2455 * t2503 - t2138 * t2269 * t2390;
t2486 = t2117 * t2209;
t2485 = t2118 * t2511;
t2484 = (-0.2e1 * t2156 * t2204 + t2153) * t2261;
t2483 = (-0.2e1 * t2157 * t2512 + t2154) * t2265;
t2482 = (-0.2e1 * t2158 * t2210 + t2155) * t2269;
t2468 = t2504 * t2261;
t2464 = t2503 * t2269;
t2462 = t2203 * t2113;
t2460 = t2511 * t2114;
t2456 = t2209 * t2115;
t2339 = t2275 * t2398;
t2425 = -t2113 * t2373 - t2339 * t2453 + t2510;
t2424 = -t2113 * t2372 - t2261 * t2339 + t2507;
t2335 = t2275 * t2394;
t2423 = -t2115 * t2369 - t2335 * t2449 + t2509;
t2422 = -t2115 * t2368 - t2269 * t2335 + t2505;
t2337 = t2275 * t2396;
t2421 = -t2114 * t2371 - t2337 * t2451 + t2508;
t2420 = -t2114 * t2370 - t2265 * t2337 + t2506;
t2419 = 0.2e1 * t2149 * t2159;
t2418 = 0.2e1 * t2150 * t2160;
t2417 = 0.2e1 * t2151 * t2161;
t2414 = t2110 * t2461;
t2413 = t2111 * t2455;
t2412 = t2112 * t2514;
t2411 = t2113 * t2468;
t2410 = t2114 * t2514;
t2409 = t2115 * t2464;
t2408 = t2116 * t2468;
t2407 = t2116 * t2461;
t2406 = t2116 * t2447;
t2405 = t2117 * t2464;
t2404 = t2117 * t2455;
t2403 = t2117 * t2443;
t2400 = t2118 * t2445;
t2399 = t2279 * t2481;
t2397 = t2281 * t2480;
t2395 = t2283 * t2479;
t2388 = t2280 * t2474;
t2387 = t2286 * t2474;
t2386 = t2282 * t2473;
t2385 = t2288 * t2473;
t2384 = t2284 * t2472;
t2383 = t2290 * t2472;
t2367 = 0.2e1 * t2110 * t2203 * t2279;
t2366 = 0.2e1 * t2111 * t2209 * t2283;
t2365 = 0.2e1 * t2281 * t2489;
t2361 = t2110 * t2379;
t2360 = t2279 ^ 2 * t2414;
t2359 = t2111 * t2375;
t2358 = t2283 ^ 2 * t2413;
t2357 = t2112 * t2513;
t2356 = t2281 ^ 2 * t2412;
t2355 = t2454 * t2462;
t2354 = t2114 * t2513;
t2353 = t2450 * t2456;
t2352 = (t2275 * t2285 - t2373) * t2408;
t2351 = t2229 * t2408;
t2350 = t2280 * t2407;
t2349 = t2286 * t2407;
t2348 = (t2275 * t2289 - t2369) * t2405;
t2347 = t2232 * t2405;
t2346 = t2284 * t2404;
t2345 = t2290 * t2404;
t2344 = (t2275 * t2287 - t2371) * t2515;
t2343 = (t2370 + t2440) * t2515;
t2342 = t2282 * t2515;
t2341 = t2288 * t2515;
t2340 = t2203 * t2262 * t2481;
t2338 = t2458 * t2480;
t2336 = t2209 * t2270 * t2479;
t2332 = t2504 * t2204 * t2453;
t2331 = t2451 * t2208;
t2330 = t2503 * t2210 * t2449;
t2329 = t2406 * t2454;
t2328 = t2403 * t2450;
t2327 = t2400 * t2452;
t2263 = t2261 / t2260;
t2326 = t2203 * t2263 * t2399;
t2267 = t2265 / t2264;
t2325 = t2511 * t2267 * t2397;
t2271 = t2269 / t2268;
t2324 = t2209 * t2271 * t2395;
t2320 = t2204 * (0.2e1 * t2260 - 0.1e1) * t2263 * t2419;
t2319 = t2512 * (0.2e1 * t2264 - 0.1e1) * t2267 * t2418;
t2318 = t2210 * (0.2e1 * t2268 - 0.1e1) * t2271 * t2417;
t2317 = -t2241 * t2275 + t2279 * t2502;
t2316 = -t2242 * t2275 + t2281 * t2502;
t2315 = -t2243 * t2275 + t2283 * t2502;
t2205 = t2203 * t2204;
t2311 = -t2203 * t2494 - t2205 * t2387;
t2310 = t2203 * t2493 - t2205 * t2388;
t2211 = t2209 * t2210;
t2309 = -t2209 * t2491 - t2211 * t2383;
t2308 = t2209 * t2490 - t2211 * t2384;
t2307 = -t2208 * t2385 - t2488 * t2511;
t2306 = t2112 * t2457 - t2208 * t2386;
t2246 = pkin(5) * t2284 + t2290 * t2499;
t2245 = pkin(5) * t2282 + t2288 * t2500;
t2244 = pkin(5) * t2280 + t2286 * t2501;
t2226 = -t2272 * t2439 + t2274 * t2288;
t2225 = -t2272 * t2441 + t2274 * t2286;
t2224 = t2272 * t2290 + t2274 * t2437;
t2223 = t2272 * t2288 + t2274 * t2439;
t2222 = t2272 * t2286 + t2274 * t2441;
t2221 = t2272 * t2437 - t2274 * t2290;
t2220 = t2253 * t2274 + t2256 * t2272;
t2219 = t2252 * t2274 + t2255 * t2272;
t2218 = t2251 * t2274 + t2254 * t2272;
t2217 = -t2253 * t2272 + t2256 * t2274;
t2216 = -t2252 * t2272 + t2255 * t2274;
t2215 = -t2251 * t2272 + t2254 * t2274;
t2185 = t2246 * t2272 - t2315 * t2274;
t2184 = t2245 * t2272 - t2316 * t2274;
t2183 = t2244 * t2272 - t2317 * t2274;
t2182 = t2246 * t2274 + t2315 * t2272;
t2181 = t2245 * t2274 + t2316 * t2272;
t2180 = t2244 * t2274 + t2317 * t2272;
t2179 = (-t2221 * t2256 - t2224 * t2253) * t2283 - t2220 * t2444;
t2178 = (-t2223 * t2252 + t2226 * t2255) * t2281 - t2219 * t2446;
t2177 = (-t2222 * t2251 + t2225 * t2254) * t2279 - t2218 * t2448;
t2176 = (t2221 * t2253 - t2224 * t2256) * t2283 - t2217 * t2444;
t2175 = (-t2223 * t2255 - t2226 * t2252) * t2281 - t2216 * t2446;
t2174 = (-t2222 * t2254 - t2225 * t2251) * t2279 - t2215 * t2448;
t2173 = -(t2217 * t2284 + t2220 * t2434) * t2499 - (-t2217 * t2290 + t2220 * t2437) * pkin(5);
t2172 = -(t2217 * t2434 - t2220 * t2284) * t2499 - pkin(5) * (t2217 * t2437 + t2220 * t2290);
t2171 = -(t2216 * t2282 + t2219 * t2435) * t2500 - (-t2216 * t2288 + t2219 * t2439) * pkin(5);
t2170 = -(t2216 * t2435 - t2219 * t2282) * t2500 - pkin(5) * (t2216 * t2439 + t2219 * t2288);
t2169 = -(t2215 * t2280 + t2218 * t2436) * t2501 - (-t2215 * t2286 + t2218 * t2441) * pkin(5);
t2168 = -(t2215 * t2436 - t2218 * t2280) * t2501 - pkin(5) * (t2215 * t2441 + t2218 * t2286);
t2167 = t2182 * t2253 + t2185 * t2256;
t2166 = t2181 * t2252 + t2184 * t2255;
t2165 = t2180 * t2251 + t2183 * t2254;
t2164 = t2182 * t2256 - t2185 * t2253;
t2163 = t2181 * t2255 - t2184 * t2252;
t2162 = t2180 * t2254 - t2183 * t2251;
t1 = [(t2162 * t2487 + t2163 * t2485 + t2164 * t2486) * MDP(1) + (t2174 * t2414 + t2175 * t2412 + t2176 * t2413) * MDP(2) + (t2310 * t2162 + t2306 * t2163 + t2308 * t2164 + t2174 * t2349 + t2175 * t2341 + t2176 * t2345) * t2498 + (t2311 * t2162 + t2307 * t2163 + t2309 * t2164 - t2174 * t2350 - t2175 * t2342 - t2176 * t2346) * t2497 + (t2174 * t2360 + t2176 * t2358 + t2175 * t2356 + ((-t2158 * t2172 + t2176 * t2417) * t2330 + (-t2157 * t2170 + t2175 * t2418) * t2331 + (-t2156 * t2168 + t2174 * t2419) * t2332) * t2295) * MDP(5) + (t2174 * t2367 + t2176 * t2366 + t2175 * t2365 + ((t2172 * t2482 + t2176 * t2318) * t2503 + (t2170 * t2483 + t2175 * t2319) * t2511 + (t2168 * t2484 + t2174 * t2320) * t2504) * t2295) * MDP(6) + (t2174 * t2355 + t2175 * t2354 + t2176 * t2353 + (t2174 * t2340 + t2175 * t2338 + t2176 * t2336) * t2296 + (t2168 * t2361 + t2170 * t2357 + t2172 * t2359) * t2295) * MDP(7) + (t2174 * t2462 + t2175 * t2460 + t2176 * t2456 + (-t2174 * t2326 - t2175 * t2325 - t2176 * t2324) * t2296 + (t2168 * t2495 + t2170 * t2489 + t2172 * t2492) * t2295) * MDP(8) + (t2168 * t2411 + t2170 * t2410 + t2172 * t2409) * t2496 + ((t2168 * t2352 + t2170 * t2344 + t2172 * t2348) * t2295 + (t2423 * t2164 + t2176 * t2403) * t2209 + (t2421 * t2163 + t2175 * t2400) * t2511 + (t2425 * t2162 + t2174 * t2406) * t2203) * MDP(10) + ((-t2168 * t2351 - t2170 * t2343 - t2172 * t2347) * t2295 + (t2422 * t2164 - t2176 * t2328) * t2209 + (t2420 * t2163 - t2175 * t2327) * t2511 + (t2424 * t2162 - t2174 * t2329) * t2203) * MDP(11); (t2165 * t2487 + t2166 * t2485 + t2167 * t2486) * MDP(1) + (t2177 * t2414 + t2178 * t2412 + t2179 * t2413) * MDP(2) + (t2310 * t2165 + t2306 * t2166 + t2308 * t2167 + t2177 * t2349 + t2178 * t2341 + t2179 * t2345) * t2498 + (t2311 * t2165 + t2307 * t2166 + t2309 * t2167 - t2177 * t2350 - t2178 * t2342 - t2179 * t2346) * t2497 + (t2177 * t2360 + t2179 * t2358 + t2178 * t2356 + ((-t2158 * t2173 + t2179 * t2417) * t2330 + (-t2157 * t2171 + t2178 * t2418) * t2331 + (-t2156 * t2169 + t2177 * t2419) * t2332) * t2295) * MDP(5) + (t2177 * t2367 + t2179 * t2366 + t2178 * t2365 + ((t2173 * t2482 + t2179 * t2318) * t2503 + (t2171 * t2483 + t2178 * t2319) * t2511 + (t2169 * t2484 + t2177 * t2320) * t2504) * t2295) * MDP(6) + (t2177 * t2355 + t2178 * t2354 + t2179 * t2353 + (t2177 * t2340 + t2178 * t2338 + t2179 * t2336) * t2296 + (t2169 * t2361 + t2171 * t2357 + t2173 * t2359) * t2295) * MDP(7) + (t2177 * t2462 + t2178 * t2460 + t2179 * t2456 + (-t2177 * t2326 - t2178 * t2325 - t2179 * t2324) * t2296 + (t2169 * t2495 + t2171 * t2489 + t2173 * t2492) * t2295) * MDP(8) + (t2169 * t2411 + t2171 * t2410 + t2173 * t2409) * t2496 + ((t2169 * t2352 + t2171 * t2344 + t2173 * t2348) * t2295 + (t2423 * t2167 + t2179 * t2403) * t2209 + (t2421 * t2166 + t2178 * t2400) * t2511 + (t2425 * t2165 + t2177 * t2406) * t2203) * MDP(10) + ((-t2169 * t2351 - t2171 * t2343 - t2173 * t2347) * t2295 + (t2422 * t2167 - t2179 * t2328) * t2209 + (t2420 * t2166 - t2178 * t2327) * t2511 + (t2424 * t2165 - t2177 * t2329) * t2203) * MDP(11); (t2116 + t2117 + t2118) * MDP(1) + (t2508 + t2509 + t2510) * MDP(10) + (t2505 + t2506 + t2507) * MDP(11) + ((-t2262 * t2399 - t2266 * t2397 - t2270 * t2395) * MDP(10) + (-t2261 * t2481 - t2265 * t2480 - t2269 * t2479) * MDP(11)) * t2296 * t2275 + ((t2112 * t2288 - t2204 * t2388 - t2210 * t2384 - t2386 * t2512 + t2490 + t2493) * MDP(3) + (-t2204 * t2387 - t2210 * t2383 - t2385 * t2512 - t2488 - t2491 - t2494) * MDP(4) + (-t2113 * t2431 - t2114 * t2429 - t2115 * t2427) * MDP(10) + (-t2113 * t2430 - t2114 * t2428 - t2115 * t2426) * MDP(11)) * t2273;];
taucX  = t1;
