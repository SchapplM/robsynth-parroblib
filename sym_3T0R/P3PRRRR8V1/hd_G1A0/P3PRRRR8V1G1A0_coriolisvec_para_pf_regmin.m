% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 16:50
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V1G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 16:50:18
% EndTime: 2020-08-06 16:50:26
% DurationCPUTime: 8.50s
% Computational Cost: add. (28591->352), mult. (72069->806), div. (4004->21), fcn. (70550->22), ass. (0->366)
t938 = cos(qJ(3,2));
t916 = 0.1e1 / t938;
t932 = sin(qJ(3,2));
t1117 = t916 * t932;
t926 = cos(pkin(3));
t1105 = t926 * t932;
t933 = sin(qJ(2,2));
t1091 = t933 * t938;
t939 = cos(qJ(2,2));
t893 = pkin(2) * t1091 - pkin(5) * t939;
t924 = sin(pkin(3));
t1018 = pkin(2) * t1105 + t893 * t924;
t1173 = 0.1e1 / t1018;
t1175 = t1173 * t1117;
t1178 = pkin(5) * t1175;
t1176 = t1173 * t916;
t1111 = t924 * t938;
t923 = sin(pkin(6));
t925 = cos(pkin(6));
t942 = xDP(2);
t943 = xDP(1);
t890 = -t923 * t943 + t925 * t942;
t891 = t923 * t942 + t925 * t943;
t928 = legFrame(2,3);
t903 = sin(t928);
t906 = cos(t928);
t841 = t890 * t903 + t891 * t906;
t1101 = t926 * t942;
t886 = t1101 * t933 + t939 * t943;
t1100 = t926 * t943;
t887 = t1100 * t933 - t939 * t942;
t811 = ((-t886 * t923 - t887 * t925) * t906 - (t886 * t925 - t887 * t923) * t903) * t932 - t841 * t1111;
t1132 = t811 * t1173;
t1036 = t1173 * t1132;
t1174 = 0.1e1 / t1018 ^ 2;
t1104 = t926 * t933;
t1162 = pkin(2) * t938;
t838 = t890 * t906 - t891 * t903;
t801 = -(t841 * t926 * t939 + t838 * t933) * t1162 - pkin(5) * (t1104 * t841 - t838 * t939);
t1138 = t801 * t1174;
t944 = pkin(5) ^ 2;
t945 = pkin(2) ^ 2;
t785 = -t801 * t1178 + (t916 * t944 + t938 * t945) * t1132;
t1045 = t801 * t1176;
t803 = t811 * t1178;
t788 = -t803 + t1045;
t769 = (t1036 * t785 + t1138 * t788) * t916;
t1177 = t769 * t1176;
t1094 = t932 * t933;
t1022 = t924 * t1094;
t1026 = t924 * t1091;
t946 = 0.1e1 / pkin(2);
t1127 = t1173 * t946;
t1031 = t926 * t1127;
t1121 = t1173 * t939;
t1035 = t811 * t1121;
t1139 = t801 * t1173;
t915 = t938 ^ 2;
t917 = 0.1e1 / t938 ^ 2;
t973 = t924 * t946 * t1045;
t763 = (-(-t926 * t788 + (pkin(2) * (t1031 * t801 + t1035 * t924) * t915 - (-pkin(5) * t1132 + t1139 * t932) * t1026) * t916) * t1036 - (t939 * t973 + (-t1022 + (-t916 + t938) * t926) * t1132) * t1138) * t917;
t1154 = t763 * t1173;
t859 = t1173 * t1174;
t931 = sin(qJ(2,3));
t936 = cos(qJ(3,3));
t1095 = t931 * t936;
t913 = 0.1e1 / t936 ^ 2;
t930 = sin(qJ(3,3));
t1118 = t913 * t930;
t937 = cos(qJ(2,3));
t1112 = t924 * t937;
t1098 = t930 * t931;
t1023 = t924 * t1098;
t1027 = t924 * t1095;
t1107 = t926 * t930;
t880 = t1027 + t1107;
t851 = pkin(2) * t880 - pkin(5) * t1112;
t1166 = 0.1e1 / t851;
t1129 = t1166 * t946;
t1106 = t926 * t931;
t1163 = pkin(2) * t936;
t927 = legFrame(3,3);
t902 = sin(t927);
t905 = cos(t927);
t837 = t890 * t905 - t891 * t902;
t840 = t890 * t902 + t891 * t905;
t800 = -(t840 * t926 * t937 + t837 * t931) * t1163 - pkin(5) * (t1106 * t840 - t837 * t937);
t1047 = t800 * t1129;
t1140 = t800 * t1166;
t1048 = t1166 * t1140;
t1113 = t924 * t936;
t884 = t1101 * t931 + t937 * t943;
t885 = t1100 * t931 - t937 * t942;
t810 = ((-t884 * t923 - t885 * t925) * t905 - (t884 * t925 - t885 * t923) * t902) * t930 - t840 * t1113;
t892 = pkin(2) * t1095 - pkin(5) * t937;
t863 = pkin(2) * t1107 + t892 * t924;
t854 = 0.1e1 / t863;
t1133 = t810 * t854;
t1071 = pkin(5) * t1133;
t1017 = t930 * t1071;
t912 = 0.1e1 / t936;
t787 = (t1017 - t1140) * t912;
t911 = t936 ^ 2;
t974 = t912 * t924 * t1047;
t761 = (-(t926 * t787 + (pkin(2) * (t1047 * t926 + t1112 * t1133) * t911 - (t1140 * t930 - t1071) * t1027) * t912) * t1166 * t1133 - (t937 * t974 + (-t1023 + (-t912 + t936) * t926) * t1133) * t1048) * t913;
t1034 = t854 * t1129;
t1119 = t912 * t930;
t1033 = t1166 * t1119;
t784 = -pkin(5) * t800 * t1033 + (t912 * t944 + t936 * t945) * t1133;
t991 = t810 * t1034;
t764 = (-t926 * t784 * t991 - (-t930 * t892 * t974 + t926 * (-t1017 * t912 + t1140 * t936)) * t800 * t1034) * t913;
t756 = t1112 * t761 + t764 * t926;
t807 = t810 ^ 2;
t1136 = t807 * t913;
t855 = 0.1e1 / t863 ^ 2;
t804 = t855 * t1136;
t1143 = t800 ^ 2 / t851 ^ 2;
t947 = 0.1e1 / pkin(2) ^ 2;
t1053 = t947 * t1143;
t996 = t913 * t1053;
t790 = t804 + t996;
t965 = -0.2e1 * t800 * t937 * t991;
t1172 = t756 * t936 + (-t1095 * t790 + t1118 * t965) * t924;
t935 = sin(qJ(2,1));
t940 = cos(qJ(3,1));
t1087 = t935 * t940;
t921 = 0.1e1 / t940 ^ 2;
t934 = sin(qJ(3,1));
t1114 = t921 * t934;
t941 = cos(qJ(2,1));
t1108 = t924 * t941;
t1024 = t924 * t1087;
t1090 = t934 * t935;
t1025 = t924 * t1090;
t1103 = t926 * t934;
t883 = t1024 + t1103;
t853 = pkin(2) * t883 - pkin(5) * t1108;
t1165 = 0.1e1 / t853;
t1125 = t1165 * t946;
t1102 = t926 * t935;
t1161 = pkin(2) * t940;
t929 = legFrame(1,3);
t904 = sin(t929);
t907 = cos(t929);
t839 = t890 * t907 - t891 * t904;
t842 = t890 * t904 + t891 * t907;
t802 = -(t842 * t926 * t941 + t839 * t935) * t1161 - pkin(5) * (t1102 * t842 - t839 * t941);
t1043 = t802 * t1125;
t1137 = t802 * t1165;
t1044 = t1165 * t1137;
t1109 = t924 * t940;
t888 = t1101 * t935 + t941 * t943;
t889 = t1100 * t935 - t941 * t942;
t812 = ((-t888 * t923 - t889 * t925) * t907 - (t888 * t925 - t889 * t923) * t904) * t934 - t842 * t1109;
t894 = pkin(2) * t1087 - pkin(5) * t941;
t865 = pkin(2) * t1103 + t894 * t924;
t860 = 0.1e1 / t865;
t1131 = t812 * t860;
t1070 = pkin(5) * t1131;
t1016 = t934 * t1070;
t920 = 0.1e1 / t940;
t789 = (t1016 - t1137) * t920;
t919 = t940 ^ 2;
t972 = t920 * t924 * t1043;
t762 = (-(t926 * t789 + (pkin(2) * (t1043 * t926 + t1108 * t1131) * t919 - (t1137 * t934 - t1070) * t1024) * t920) * t1165 * t1131 - (t941 * t972 + (-t1025 + (-t920 + t940) * t926) * t1131) * t1044) * t921;
t1030 = t860 * t1125;
t1115 = t920 * t934;
t1029 = t1165 * t1115;
t786 = -pkin(5) * t802 * t1029 + (t920 * t944 + t940 * t945) * t1131;
t990 = t812 * t1030;
t766 = (-t926 * t786 * t990 - (-t934 * t894 * t972 + t926 * (-t1016 * t920 + t1137 * t940)) * t802 * t1030) * t921;
t757 = t1108 * t762 + t766 * t926;
t809 = t812 ^ 2;
t1134 = t809 * t921;
t861 = 0.1e1 / t865 ^ 2;
t806 = t861 * t1134;
t1141 = t802 ^ 2 / t853 ^ 2;
t1049 = t947 * t1141;
t992 = t921 * t1049;
t792 = t806 + t992;
t963 = -0.2e1 * t802 * t941 * t990;
t1171 = t757 * t940 + (-t1087 * t792 + t1114 * t963) * t924;
t1116 = t917 * t932;
t1110 = t924 * t939;
t1046 = t801 * t1127;
t1122 = t1173 * t917;
t765 = (-t785 * t811 * t1031 - (-t932 * t893 * t973 + t926 * (t1139 * t938 - t803)) * t1046) * t1122;
t760 = t1110 * t763 + t765 * t926;
t808 = t811 ^ 2;
t1135 = t808 * t917;
t805 = t1174 * t1135;
t1142 = t801 ^ 2 * t1174;
t1051 = t947 * t1142;
t994 = t917 * t1051;
t791 = t805 + t994;
t964 = -0.2e1 * t1035 * t1046;
t1170 = t760 * t938 + (-t1091 * t791 + t1116 * t964) * t924;
t1169 = -t756 * t930 + (t1098 * t790 + t912 * t965) * t924;
t1168 = -t760 * t932 + (t1094 * t791 + t916 * t964) * t924;
t1167 = -t757 * t934 + (t1090 * t792 + t920 * t963) * t924;
t1164 = pkin(2) * t924;
t1160 = t761 * t1166;
t1159 = t761 * t931;
t1158 = t761 * t937;
t1157 = t762 * t1165;
t1156 = t762 * t935;
t1155 = t762 * t941;
t1153 = t763 * t933;
t1152 = t764 * t854;
t1151 = t765 * t1173;
t1150 = t766 * t860;
t1124 = t854 * t912;
t767 = t1124 * t1166 * t784 * t810 - t1048 * t787 * t912;
t1149 = t767 * t854;
t1120 = t860 * t920;
t768 = t1120 * t1165 * t786 * t812 - t1044 * t789 * t920;
t1148 = t768 * t860;
t1147 = t769 * t1173;
t1146 = (-0.2e1 * t807 * t855 + t804) * t912;
t1145 = (-0.2e1 * t1174 * t808 + t805) * t916;
t1144 = (-0.2e1 * t809 * t861 + t806) * t920;
t1130 = t1166 * t912;
t1126 = t1165 * t920;
t1099 = t926 * t947;
t866 = -t902 * t923 + t905 * t925;
t1097 = t931 * t866;
t869 = t902 * t925 + t905 * t923;
t1096 = t931 * t869;
t867 = -t903 * t923 + t906 * t925;
t1093 = t933 * t867;
t870 = t903 * t925 + t906 * t923;
t1092 = t933 * t870;
t868 = -t904 * t923 + t907 * t925;
t1089 = t935 * t868;
t871 = t904 * t925 + t907 * t923;
t1088 = t935 * t871;
t1086 = t937 * t866;
t1085 = t937 * t869;
t1084 = t939 * t867;
t1083 = t939 * t870;
t1082 = t941 * t868;
t1081 = t941 * t871;
t1080 = -t1023 * t764 - t1107 * t996 + t1172;
t1079 = -t1053 * t912 * t926 - t1027 * t764 + t1169;
t1078 = -t1025 * t766 - t1103 * t992 + t1171;
t1077 = -t1049 * t920 * t926 - t1024 * t766 + t1167;
t1076 = -t1022 * t765 - t1105 * t994 + t1170;
t1075 = -t1051 * t916 * t926 - t1026 * t765 + t1168;
t1074 = 0.2e1 * t800 * t810;
t1073 = 0.2e1 * t801 * t811;
t1072 = 0.2e1 * t802 * t812;
t1069 = t761 * t1124;
t1068 = t762 * t1120;
t1067 = t763 * t1176;
t1066 = t764 * t1130;
t1065 = t765 * t1176;
t1064 = t766 * t1126;
t1063 = t767 * t1130;
t1062 = t767 * t1124;
t1061 = t767 * t1112;
t1060 = t768 * t1126;
t1059 = t768 * t1120;
t1058 = t768 * t1108;
t1055 = t769 * t1110;
t1054 = t930 * t1143;
t1052 = t932 * t1142;
t1050 = t934 * t1141;
t1042 = t931 * t1136;
t1041 = t937 * t1136;
t1040 = t933 * t1135;
t1039 = t939 * t1135;
t1038 = t935 * t1134;
t1037 = t941 * t1134;
t1021 = 0.2e1 * t761 * t854 * t930;
t1020 = 0.2e1 * t762 * t860 * t934;
t1019 = 0.2e1 * t932 * t1154;
t1015 = t761 * t1033;
t1014 = t762 * t1029;
t1013 = t763 * t1175;
t1012 = t1119 * t1152;
t1011 = t765 * t1175;
t1010 = t1115 * t1150;
t1009 = (t926 * t936 - t1023) * t1063;
t1008 = t880 * t1063;
t1007 = t931 * t1062;
t1006 = t937 * t1062;
t1005 = (t926 * t940 - t1025) * t1060;
t1004 = t883 * t1060;
t1003 = t935 * t1059;
t1002 = t941 * t1059;
t1001 = (t926 * t938 - t1022) * t1177;
t1000 = (t1026 + t1105) * t1177;
t999 = t933 * t1177;
t998 = t939 * t1177;
t997 = t854 * t913 * t1143;
t995 = t1122 * t1142;
t993 = t860 * t921 * t1141;
t873 = t1106 * t925 + t923 * t937;
t876 = -t1106 * t923 + t925 * t937;
t825 = (-t873 * t905 - t876 * t902) * t930 - t866 * t1113;
t989 = t825 * t1069;
t874 = t1104 * t925 + t923 * t939;
t877 = -t1104 * t923 + t925 * t939;
t826 = (-t874 * t906 - t877 * t903) * t932 - t867 * t1111;
t988 = t826 * t1067;
t872 = t1102 * t923 - t925 * t941;
t875 = t1102 * t925 + t923 * t941;
t827 = (t872 * t904 - t875 * t907) * t934 - t868 * t1109;
t987 = t827 * t1068;
t828 = (-t873 * t902 + t876 * t905) * t930 - t869 * t1113;
t986 = t828 * t1069;
t829 = (-t874 * t903 + t877 * t906) * t932 - t870 * t1111;
t985 = t829 * t1067;
t830 = (-t872 * t907 - t875 * t904) * t934 - t871 * t1109;
t984 = t830 * t1068;
t983 = t1166 * t855 * t1118;
t982 = t1116 * t859;
t981 = t1165 * t861 * t1114;
t980 = t1061 * t1119;
t979 = t1058 * t1115;
t978 = t1055 * t1117;
t914 = t912 / t911;
t977 = t854 * t914 * t1054;
t918 = t916 / t915;
t976 = t1173 * t918 * t1052;
t922 = t920 / t919;
t975 = t860 * t922 * t1050;
t971 = t855 * (0.2e1 * t911 - 0.1e1) * t914 * t1074;
t970 = t1174 * (0.2e1 * t915 - 0.1e1) * t918 * t1073;
t969 = t861 * (0.2e1 * t919 - 0.1e1) * t922 * t1072;
t968 = t1164 * t930 - t892 * t926;
t967 = t1164 * t932 - t893 * t926;
t966 = t1164 * t934 - t894 * t926;
t856 = t854 * t855;
t962 = -t1041 * t856 - t1159 * t854;
t961 = -t1042 * t856 + t1158 * t854;
t862 = t860 * t861;
t960 = -t1037 * t862 - t1156 * t860;
t959 = -t1038 * t862 + t1155 * t860;
t958 = -t1039 * t859 - t1153 * t1173;
t957 = -t1040 * t859 + t1121 * t763;
t910 = t934 ^ 2;
t909 = t932 ^ 2;
t908 = t930 ^ 2;
t897 = pkin(5) * t935 + t1161 * t941;
t896 = pkin(5) * t933 + t1162 * t939;
t895 = pkin(5) * t931 + t1163 * t937;
t836 = t923 * t897 - t925 * t966;
t835 = t923 * t896 - t925 * t967;
t834 = t923 * t895 - t925 * t968;
t833 = t897 * t925 + t923 * t966;
t832 = t896 * t925 + t923 * t967;
t831 = t895 * t925 + t923 * t968;
t824 = -(t1081 * t926 + t1089) * t1161 - (t1088 * t926 - t1082) * pkin(5);
t823 = -(t1082 * t926 - t1088) * t1161 - pkin(5) * (t1089 * t926 + t1081);
t822 = -(t1083 * t926 + t1093) * t1162 - (t1092 * t926 - t1084) * pkin(5);
t821 = -(t1084 * t926 - t1092) * t1162 - pkin(5) * (t1093 * t926 + t1083);
t820 = -(t1085 * t926 + t1097) * t1163 - (t1096 * t926 - t1086) * pkin(5);
t819 = -(t1086 * t926 - t1096) * t1163 - pkin(5) * (t1097 * t926 + t1085);
t818 = t833 * t904 + t836 * t907;
t817 = t832 * t903 + t835 * t906;
t816 = t831 * t902 + t834 * t905;
t815 = t833 * t907 - t836 * t904;
t814 = t832 * t906 - t835 * t903;
t813 = t831 * t905 - t834 * t902;
t1 = [t1147 * t814 + t1148 * t815 + t1149 * t813, t987 + t988 + t989, (t1002 * t827 + t1006 * t825 + t813 * t961 + t814 * t957 + t815 * t959 + t826 * t998) * t924, (-t1003 * t827 - t1007 * t825 + t813 * t962 + t814 * t958 + t815 * t960 - t826 * t999) * t924, t908 * t989 + t910 * t987 + t909 * t988 + ((t1072 * t827 - t809 * t823) * t981 + (t1073 * t826 - t808 * t821) * t982 + (t1074 * t825 - t807 * t819) * t983) * t946, t825 * t1021 + t827 * t1020 + t826 * t1019 + ((t1144 * t823 + t827 * t969) * t1165 + (t1145 * t821 + t826 * t970) * t1173 + (t1146 * t819 + t825 * t971) * t1166) * t946, t825 * t1012 + t826 * t1011 + t827 * t1010 + (t825 * t997 + t826 * t995 + t827 * t993) * t947 + (t1013 * t821 + t1014 * t823 + t1015 * t819) * t946, t825 * t1152 + t826 * t1151 + t827 * t1150 + (-t825 * t977 - t826 * t976 - t827 * t975) * t947 + (t1154 * t821 + t1157 * t823 + t1160 * t819) * t946, (t1064 * t823 + t1065 * t821 + t1066 * t819) * t946, (t1001 * t821 + t1005 * t823 + t1009 * t819) * t946 + (t1058 * t827 + t1078 * t815) * t860 + (t1055 * t826 + t1076 * t814) * t1173 + (t1061 * t825 + t1080 * t813) * t854, (-t1000 * t821 - t1004 * t823 - t1008 * t819) * t946 + (t1077 * t815 - t827 * t979) * t860 + (t1075 * t814 - t826 * t978) * t1173 + (t1079 * t813 - t825 * t980) * t854, 0; t1147 * t817 + t1148 * t818 + t1149 * t816, t984 + t985 + t986, (t1002 * t830 + t1006 * t828 + t816 * t961 + t817 * t957 + t818 * t959 + t829 * t998) * t924, (-t1003 * t830 - t1007 * t828 + t816 * t962 + t817 * t958 + t818 * t960 - t829 * t999) * t924, t908 * t986 + t910 * t984 + t909 * t985 + ((t1072 * t830 - t809 * t824) * t981 + (t1073 * t829 - t808 * t822) * t982 + (t1074 * t828 - t807 * t820) * t983) * t946, t828 * t1021 + t830 * t1020 + t829 * t1019 + ((t1144 * t824 + t830 * t969) * t1165 + (t1145 * t822 + t829 * t970) * t1173 + (t1146 * t820 + t828 * t971) * t1166) * t946, t828 * t1012 + t829 * t1011 + t830 * t1010 + (t828 * t997 + t829 * t995 + t830 * t993) * t947 + (t1013 * t822 + t1014 * t824 + t1015 * t820) * t946, t828 * t1152 + t829 * t1151 + t830 * t1150 + (-t828 * t977 - t829 * t976 - t830 * t975) * t947 + (t1154 * t822 + t1157 * t824 + t1160 * t820) * t946, (t1064 * t824 + t1065 * t822 + t1066 * t820) * t946, (t1001 * t822 + t1005 * t824 + t1009 * t820) * t946 + (t1058 * t830 + t1078 * t818) * t860 + (t1055 * t829 + t1076 * t817) * t1173 + (t1061 * t828 + t1080 * t816) * t854, (-t1000 * t822 - t1004 * t824 - t1008 * t820) * t946 + (t1077 * t818 - t830 * t979) * t860 + (t1075 * t817 - t829 * t978) * t1173 + (t1079 * t816 - t828 * t980) * t854, 0; t767 + t768 + t769, 0, (-t1038 * t861 - t1040 * t1174 - t1042 * t855 + t763 * t939 + t1155 + t1158) * t924, (-t1037 * t861 - t1039 * t1174 - t1041 * t855 - t1153 - t1156 - t1159) * t924, 0, 0, 0, 0, 0, (-t1050 * t921 - t1052 * t917 - t1054 * t913) * t1099 + (-t1090 * t766 - t1094 * t765 - t1098 * t764) * t924 + t1170 + t1171 + t1172, (-t1141 * t920 - t1142 * t916 - t1143 * t912) * t1099 + (-t1087 * t766 - t1091 * t765 - t1095 * t764) * t924 + t1167 + t1168 + t1169, 0;];
tau_reg  = t1;
