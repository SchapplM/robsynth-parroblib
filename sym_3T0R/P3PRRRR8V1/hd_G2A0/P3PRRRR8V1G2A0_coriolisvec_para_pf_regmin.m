% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:03:18
% EndTime: 2020-08-06 17:03:27
% DurationCPUTime: 8.90s
% Computational Cost: add. (27448->358), mult. (71037->848), div. (4898->17), fcn. (68618->22), ass. (0->381)
t1054 = cos(qJ(2,3));
t1048 = sin(qJ(2,3));
t1053 = cos(qJ(3,3));
t1251 = t1048 * t1053;
t1006 = pkin(2) * t1251 - pkin(5) * t1054;
t1041 = sin(pkin(3));
t1043 = cos(pkin(3));
t1047 = sin(qJ(3,3));
t1264 = t1043 * t1047;
t1178 = pkin(2) * t1264 + t1006 * t1041;
t1338 = 0.1e1 / t1178 ^ 2;
t1044 = legFrame(3,2);
t1019 = sin(t1044);
t1022 = cos(t1044);
t1060 = xDP(2);
t1061 = xDP(1);
t1003 = -t1019 * t1060 + t1022 * t1061;
t1040 = sin(pkin(6));
t1042 = cos(pkin(6));
t1059 = xDP(3);
t1255 = t1043 * t1059;
t1263 = t1043 * t1048;
t1270 = t1041 * t1053;
t1015 = t1059 * t1042;
t969 = t1003 * t1040 + t1015;
t938 = ((-t1003 * t1263 - t1054 * t1059) * t1040 + (t1003 * t1054 - t1048 * t1255) * t1042) * t1047 - t969 * t1270;
t1309 = t938 ^ 2 * t1338;
t1056 = cos(qJ(2,2));
t1050 = sin(qJ(2,2));
t1055 = cos(qJ(3,2));
t1248 = t1050 * t1055;
t1007 = pkin(2) * t1248 - pkin(5) * t1056;
t1049 = sin(qJ(3,2));
t1262 = t1043 * t1049;
t1177 = pkin(2) * t1262 + t1007 * t1041;
t1340 = 0.1e1 / t1177 ^ 2;
t1045 = legFrame(2,2);
t1020 = sin(t1045);
t1023 = cos(t1045);
t1004 = -t1020 * t1060 + t1023 * t1061;
t1261 = t1043 * t1050;
t1268 = t1041 * t1055;
t970 = t1004 * t1040 + t1015;
t939 = ((-t1004 * t1261 - t1056 * t1059) * t1040 + (t1004 * t1056 - t1050 * t1255) * t1042) * t1049 - t970 * t1268;
t1308 = t939 ^ 2 * t1340;
t1058 = cos(qJ(2,1));
t1052 = sin(qJ(2,1));
t1057 = cos(qJ(3,1));
t1245 = t1052 * t1057;
t1008 = pkin(2) * t1245 - pkin(5) * t1058;
t1051 = sin(qJ(3,1));
t1260 = t1043 * t1051;
t1176 = pkin(2) * t1260 + t1008 * t1041;
t1342 = 0.1e1 / t1176 ^ 2;
t1046 = legFrame(1,2);
t1021 = sin(t1046);
t1024 = cos(t1046);
t1005 = -t1021 * t1060 + t1024 * t1061;
t1259 = t1043 * t1052;
t1266 = t1041 * t1057;
t971 = t1005 * t1040 + t1015;
t940 = ((-t1005 * t1259 - t1058 * t1059) * t1040 + (t1005 * t1058 - t1052 * t1255) * t1042) * t1051 - t971 * t1266;
t937 = t940 ^ 2;
t1307 = t937 * t1342;
t1341 = 0.1e1 / t1176;
t1343 = t1341 * t1342;
t1339 = 0.1e1 / t1177;
t1337 = 0.1e1 / t1178;
t1028 = t1053 ^ 2;
t1029 = 0.1e1 / t1053;
t1030 = 0.1e1 / t1053 ^ 2;
t1064 = 0.1e1 / pkin(2);
t1278 = t1064 * t1337;
t1258 = t1043 * t1054;
t1321 = pkin(2) * t1053;
t1271 = t1040 * t1059;
t966 = t1003 * t1042 - t1271;
t929 = -(t1048 * t966 + t969 * t1258) * t1321 + (t1054 * t966 - t969 * t1263) * pkin(5);
t1212 = t929 * t1278;
t1117 = t1029 * t1041 * t1212;
t1193 = t1041 * t1251;
t1253 = t1047 * t1048;
t1194 = t1041 * t1253;
t1282 = t1047 * t1337;
t1222 = t929 * t1282;
t1306 = t938 * t1337;
t1237 = t1337 * t1306;
t1243 = pkin(5) * t1306;
t1269 = t1041 * t1054;
t1314 = t929 * t1338;
t1181 = t1047 * t1243;
t1315 = t929 * t1337;
t917 = (t1181 - t1315) * t1029;
t899 = (-(t1043 * t917 + (pkin(2) * (t1043 * t1212 + t1269 * t1306) * t1028 - (t1222 - t1243) * t1193) * t1029) * t1237 + (-t1054 * t1117 + (t1194 + (t1029 - t1053) * t1043) * t1306) * t1314) * t1030;
t953 = -(-t1040 * t1048 + t1042 * t1258) * t1321 - pkin(5) * (t1040 * t1054 + t1042 * t1263);
t1336 = t899 * t953;
t1032 = t1055 ^ 2;
t1033 = 0.1e1 / t1055;
t1034 = 0.1e1 / t1055 ^ 2;
t1277 = t1064 * t1339;
t1257 = t1043 * t1056;
t1320 = pkin(2) * t1055;
t967 = t1004 * t1042 - t1271;
t930 = -(t1050 * t967 + t970 * t1257) * t1320 + (t1056 * t967 - t970 * t1261) * pkin(5);
t1211 = t930 * t1277;
t1115 = t1033 * t1041 * t1211;
t1191 = t1041 * t1248;
t1250 = t1049 * t1050;
t1192 = t1041 * t1250;
t1281 = t1049 * t1339;
t1220 = t930 * t1281;
t1305 = t939 * t1339;
t1236 = t1339 * t1305;
t1242 = pkin(5) * t1305;
t1267 = t1041 * t1056;
t1312 = t930 * t1340;
t1180 = t1049 * t1242;
t1313 = t930 * t1339;
t918 = (t1180 - t1313) * t1033;
t900 = (-(t1043 * t918 + (pkin(2) * (t1043 * t1211 + t1267 * t1305) * t1032 - (t1220 - t1242) * t1191) * t1033) * t1236 + (-t1056 * t1115 + (t1192 + (t1033 - t1055) * t1043) * t1305) * t1312) * t1034;
t954 = -(-t1040 * t1050 + t1042 * t1257) * t1320 - pkin(5) * (t1040 * t1056 + t1042 * t1261);
t1335 = t900 * t954;
t1036 = t1057 ^ 2;
t1037 = 0.1e1 / t1057;
t1038 = 0.1e1 / t1057 ^ 2;
t1276 = t1064 * t1341;
t1256 = t1043 * t1058;
t1319 = pkin(2) * t1057;
t968 = t1005 * t1042 - t1271;
t931 = -(t1052 * t968 + t971 * t1256) * t1319 + (t1058 * t968 - t971 * t1259) * pkin(5);
t1210 = t931 * t1276;
t1113 = t1037 * t1041 * t1210;
t1189 = t1041 * t1245;
t1247 = t1051 * t1052;
t1190 = t1041 * t1247;
t1280 = t1051 * t1341;
t1219 = t931 * t1280;
t1304 = t940 * t1341;
t1235 = t1341 * t1304;
t1241 = pkin(5) * t1304;
t1265 = t1041 * t1058;
t1310 = t931 * t1342;
t1179 = t1051 * t1241;
t1311 = t931 * t1341;
t919 = (t1179 - t1311) * t1037;
t901 = (-(t1043 * t919 + (pkin(2) * (t1043 * t1210 + t1265 * t1304) * t1036 - (t1219 - t1241) * t1189) * t1037) * t1235 + (-t1058 * t1113 + (t1190 + (t1037 - t1057) * t1043) * t1304) * t1310) * t1038;
t955 = -(-t1040 * t1052 + t1042 * t1256) * t1319 - pkin(5) * (t1040 * t1058 + t1042 * t1259);
t1334 = t901 * t955;
t1096 = -t1043 * t1247 - t1266;
t1246 = t1051 * t1058;
t964 = -t1040 * t1246 + t1096 * t1042;
t1333 = t964 * t1343;
t961 = t1096 * t1040 + t1042 * t1246;
t1332 = t1024 * t961;
t1062 = pkin(5) ^ 2;
t1063 = pkin(2) ^ 2;
t914 = t1053 * t1063 * t1306 + (-pkin(5) * t1222 + t1062 * t1306) * t1029;
t905 = (t914 * t1237 - t917 * t1314) * t1029;
t1331 = t1054 * t905;
t915 = t1055 * t1063 * t1305 + (-pkin(5) * t1220 + t1062 * t1305) * t1033;
t906 = (t915 * t1236 - t918 * t1312) * t1033;
t1330 = t1056 * t906;
t996 = t1040 * t1259 - t1042 * t1058;
t965 = t1040 * t1266 + t1051 * t996;
t1293 = t1021 * t965;
t916 = t1057 * t1063 * t1304 + (-pkin(5) * t1219 + t1062 * t1304) * t1037;
t907 = (t916 * t1235 - t919 * t1310) * t1037;
t1011 = pkin(5) * t1052 + t1058 * t1319;
t1322 = pkin(2) * t1041;
t1105 = -t1008 * t1043 + t1051 * t1322;
t949 = -t1011 * t1040 + t1105 * t1042;
t945 = t1021 * t949 + t1024 * t1176;
t1329 = (t1037 * t907 * t1293 + t901 * t945) * t1341;
t932 = t1030 * t1309;
t933 = t1034 * t1308;
t934 = t1038 * t1307;
t1133 = 0.2e1 * t1305 * t1312;
t1239 = t1339 * t1308;
t1274 = t1034 * t1049;
t957 = (t1040 * t1257 + t1042 * t1050) * t1320 + (t1040 * t1261 - t1042 * t1056) * pkin(5);
t1097 = t1043 * t1250 + t1268;
t1249 = t1049 * t1056;
t960 = t1097 * t1040 - t1042 * t1249;
t1328 = (t960 * t1133 - t957 * t1239) * t1274;
t1134 = 0.2e1 * t1306 * t1314;
t1240 = t1337 * t1309;
t1275 = t1030 * t1047;
t956 = (t1040 * t1258 + t1042 * t1048) * t1321 + (t1040 * t1263 - t1042 * t1054) * pkin(5);
t1098 = t1043 * t1253 + t1270;
t1252 = t1047 * t1054;
t959 = t1098 * t1040 - t1042 * t1252;
t1327 = (t959 * t1134 - t956 * t1240) * t1275;
t1065 = 0.1e1 / pkin(2) ^ 2;
t1035 = t1033 / t1032;
t927 = t930 ^ 2;
t977 = t1339 * t1340;
t1142 = t1035 * t1049 * t927 * t977;
t1214 = t1064 * t900 * t957;
t1208 = t1339 * t1277;
t1162 = t939 * t1208;
t903 = (-t1043 * t915 * t1162 - (-t1049 * t1007 * t1115 + t1043 * (-t1033 * t1180 + t1055 * t1313)) * t930 * t1208) * t1034;
t1317 = t903 * t1339;
t1326 = (t1065 * t1142 - t1317) * t960 - t1339 * t1214;
t1031 = t1029 / t1028;
t926 = t929 ^ 2;
t974 = t1337 * t1338;
t1145 = t1031 * t1047 * t926 * t974;
t1215 = t1064 * t899 * t956;
t1209 = t1337 * t1278;
t1163 = t938 * t1209;
t902 = (-t1043 * t914 * t1163 - (-t1047 * t1006 * t1117 + t1043 * (-t1029 * t1181 + t1053 * t1315)) * t929 * t1209) * t1030;
t1318 = t902 * t1337;
t1325 = (t1065 * t1145 - t1318) * t959 - t1337 * t1215;
t1287 = t1034 * t927;
t1198 = t1065 * t1287;
t1199 = t1033 * t1281;
t1324 = (t903 * t960 + t1214) * t1199 + t960 * t977 * t1198;
t1290 = t1030 * t926;
t1200 = t1065 * t1290;
t1201 = t1029 * t1282;
t1323 = (t902 * t959 + t1215) * t1201 + t959 * t974 * t1200;
t1207 = t1341 * t1276;
t1161 = t940 * t1207;
t904 = (-t1043 * t916 * t1161 - (-t1051 * t1008 * t1113 + t1043 * (-t1037 * t1179 + t1057 * t1311)) * t931 * t1207) * t1038;
t1316 = t904 * t1341;
t1009 = pkin(5) * t1048 + t1054 * t1321;
t1107 = -t1006 * t1043 + t1047 * t1322;
t947 = -t1009 * t1040 + t1107 * t1042;
t941 = t1019 * t947 + t1022 * t1178;
t1303 = t941 * t1337;
t942 = t1019 * t1178 - t1022 * t947;
t1302 = t942 * t1337;
t1010 = pkin(5) * t1050 + t1056 * t1320;
t1106 = -t1007 * t1043 + t1049 * t1322;
t948 = -t1010 * t1040 + t1106 * t1042;
t943 = t1020 * t948 + t1023 * t1177;
t1301 = t943 * t1339;
t944 = t1020 * t1177 - t1023 * t948;
t1300 = t944 * t1339;
t946 = t1021 * t1176 - t1024 * t949;
t1299 = t946 * t1341;
t950 = t1009 * t1042 + t1107 * t1040;
t1298 = t950 * t1337;
t951 = t1010 * t1042 + t1106 * t1040;
t1297 = t951 * t1339;
t952 = t1011 * t1042 + t1105 * t1040;
t1296 = t952 * t1341;
t1295 = t965 * t1341;
t1292 = t1021 * t1341;
t1291 = t1029 * t1337;
t1288 = t1033 * t1339;
t1285 = t1037 * t1341;
t928 = t931 ^ 2;
t1284 = t1038 * t928;
t1279 = t1058 * t907;
t1273 = t1037 * t1051;
t1272 = t1038 * t1051;
t1254 = t1043 * t1065;
t1244 = 0.2e1 * t931 * t940;
t1238 = t1341 * t1307;
t1234 = t1341 * t1293;
t1233 = t953 * t1291;
t962 = -t1040 * t1252 - t1098 * t1042;
t1232 = t962 * t1291;
t1231 = t1337 * t932;
t1230 = t954 * t1288;
t963 = -t1040 * t1249 - t1097 * t1042;
t1229 = t963 * t1288;
t1228 = t1339 * t933;
t1227 = t955 * t1285;
t958 = (t1040 * t1256 + t1042 * t1052) * t1319 + t996 * pkin(5);
t1226 = t958 * t1285;
t1225 = t964 * t1285;
t1224 = t1341 * t934;
t1223 = t899 * t1282;
t1221 = t900 * t1281;
t1218 = t1337 * t1331;
t1217 = t1339 * t1330;
t1216 = t1341 * t1279;
t1213 = t1064 * t901 * t958;
t1206 = t1019 * t1291;
t1205 = t1020 * t1288;
t1204 = t1022 * t1291;
t1203 = t1023 * t1288;
t1202 = t1024 * t1285;
t1197 = t1341 * t1273;
t1196 = t1065 * t1284;
t1039 = t1037 / t1036;
t1195 = t1039 * t1051 * t928;
t1101 = -0.2e1 * t1054 * t929 * t1163;
t1138 = t926 * t1338 * t1254;
t896 = t1043 * t902 + t899 * t1269;
t920 = t1200 * t1338 + t932;
t1188 = (t1053 * t896 - t902 * t1194 + (t1101 * t1275 - t920 * t1251) * t1041 - t1138 * t1275) * t1337;
t1187 = (-t1047 * t896 - t902 * t1193 + (t1029 * t1101 + t920 * t1253) * t1041 - t1029 * t1138) * t1337;
t1100 = -0.2e1 * t1056 * t930 * t1162;
t1137 = t927 * t1340 * t1254;
t897 = t1043 * t903 + t900 * t1267;
t921 = t1198 * t1340 + t933;
t1186 = (t1055 * t897 - t903 * t1192 + (t1100 * t1274 - t921 * t1248) * t1041 - t1137 * t1274) * t1339;
t1185 = (-t1049 * t897 - t903 * t1191 + (t1033 * t1100 + t921 * t1250) * t1041 - t1033 * t1137) * t1339;
t1099 = -0.2e1 * t1058 * t931 * t1161;
t1136 = t928 * t1342 * t1254;
t898 = t1043 * t904 + t901 * t1265;
t1139 = t1342 * t1196;
t922 = t934 + t1139;
t1184 = (t1057 * t898 - t904 * t1190 + (t1099 * t1272 - t922 * t1245) * t1041 - t1136 * t1272) * t1341;
t1183 = (-t1051 * t898 - t904 * t1189 + (t1037 * t1099 + t922 * t1247) * t1041 - t1037 * t1136) * t1341;
t1182 = 0.2e1 * t901 * t1280;
t1175 = t901 * t1234;
t1174 = t905 * t1233;
t1173 = t906 * t1230;
t1172 = t901 * t1225;
t1171 = t907 * t1227;
t1170 = t959 * t1223;
t1169 = t960 * t1221;
t1168 = t959 * t1218;
t1167 = t960 * t1217;
t1164 = t1341 * t1213;
t1160 = t956 * t1206;
t1159 = t959 * t1206;
t1158 = t957 * t1205;
t1157 = t960 * t1205;
t1156 = t1021 * t1226;
t1155 = t956 * t1204;
t1154 = t959 * t1204;
t1153 = t957 * t1203;
t1152 = t960 * t1203;
t1151 = t958 * t1202;
t1150 = t961 * t1202;
t1149 = t1047 ^ 2 * t899 * t1291;
t1148 = t1049 ^ 2 * t900 * t1288;
t1147 = t1048 * t1231;
t1146 = t1054 * t1231;
t1144 = t1050 * t1228;
t1143 = t1056 * t1228;
t1141 = t1052 * t1224;
t1140 = t1058 * t1224;
t1135 = t1065 * t1195;
t1132 = t1244 * t1343;
t1131 = (0.2e1 * t1036 - 0.1e1) * t1039 * t1244;
t1130 = t905 * t1160;
t1129 = t906 * t1158;
t1128 = t1037 * t1175;
t1127 = t907 * t1156;
t1126 = t905 * t1155;
t1125 = t906 * t1153;
t1124 = t901 * t1150;
t1123 = t907 * t1151;
t1122 = t959 * t1149;
t1121 = t960 * t1148;
t1118 = t1234 * t1279;
t1116 = t1201 * t1331;
t1114 = t1199 * t1330;
t1112 = t1197 * t1279;
t1109 = t959 * t1116;
t1108 = t960 * t1114;
t1104 = (0.2e1 * t1028 - 0.1e1) * t1031 * t1134;
t1103 = (0.2e1 * t1032 - 0.1e1) * t1035 * t1133;
t1102 = t1131 * t1343;
t1094 = t905 * t1232 + t899 * t1298;
t1093 = t906 * t1229 + t900 * t1297;
t1092 = t907 * t1225 + t901 * t1296;
t1089 = t905 * t1159 + t899 * t1303;
t1088 = t906 * t1157 + t900 * t1301;
t1087 = t905 * t1154 - t899 * t1302;
t1086 = t906 * t1152 - t900 * t1300;
t1085 = t907 * t1150 + t901 * t1299;
t923 = t932 - 0.2e1 * t1309;
t1082 = t956 * t923 * t1291 + t959 * t1104;
t924 = t933 - 0.2e1 * t1308;
t1081 = t957 * t924 * t1288 + t960 * t1103;
t1027 = t1051 ^ 2;
t1002 = t1189 + t1260;
t1001 = t1043 * t1057 - t1190;
t1000 = t1191 + t1262;
t999 = t1043 * t1055 - t1192;
t998 = t1193 + t1264;
t997 = t1043 * t1053 - t1194;
t925 = t934 - 0.2e1 * t1307;
t1 = [t907 * t1299 + t906 * t1300 + t905 * t1302, -t900 * t1152 - t899 * t1154 + t1124, (-t1054 * t1087 - t1056 * t1086 + t1058 * t1085 - t1141 * t946 - t1144 * t944 - t1147 * t942) * t1041, (t1048 * t1087 + t1050 * t1086 - t1052 * t1085 - t1140 * t946 - t1143 * t944 - t1146 * t942) * t1041, -t1022 * t1122 - t1023 * t1121 + t1027 * t1124 + ((t1132 * t961 + t958 * t1238) * t1024 * t1272 - t1023 * t1328 - t1022 * t1327) * t1064, -0.2e1 * t1022 * t1170 - 0.2e1 * t1023 * t1169 + t1182 * t1332 + ((t1102 * t961 - t925 * t1226) * t1024 - t1081 * t1023 - t1082 * t1022) * t1064, (t961 * t1343 * t1196 + (t904 * t961 - t1213) * t1197) * t1024 - t1324 * t1023 - t1323 * t1022, (-t1164 + (-t1135 * t1343 + t1316) * t961) * t1024 + t1326 * t1023 + t1325 * t1022, (-t1151 * t904 - t1153 * t903 - t1155 * t902) * t1064, t946 * t1184 + t944 * t1186 + t942 * t1188 + (-t1001 * t1123 - t1125 * t999 - t1126 * t997) * t1064 + (-t1022 * t1168 - t1023 * t1167 + t1216 * t1332) * t1041, t946 * t1183 + t944 * t1185 + t942 * t1187 + (t1000 * t1125 + t1002 * t1123 + t1126 * t998) * t1064 + (t1022 * t1109 + t1023 * t1108 - t1112 * t1332) * t1041, 0; t1341 * t907 * t945 + t906 * t1301 + t905 * t1303, t900 * t1157 + t1159 * t899 + t1128, (t1054 * t1089 + t1056 * t1088 + t1058 * t1329 - t1141 * t945 - t1144 * t943 - t1147 * t941) * t1041, (-t1048 * t1089 - t1050 * t1088 - t1052 * t1329 - t1140 * t945 - t1143 * t943 - t1146 * t941) * t1041, t1019 * t1122 + t1020 * t1121 + t1027 * t1128 + ((t965 * t1244 - t937 * t958) * t1342 * t1272 * t1292 + t1020 * t1328 + t1019 * t1327) * t1064, 0.2e1 * t1019 * t1170 + 0.2e1 * t1020 * t1169 + 0.2e1 * t1051 * t1175 + ((t1037 * t925 * t958 + t1131 * t1342 * t965) * t1292 + t1081 * t1020 + t1082 * t1019) * t1064, (t1139 * t1295 + (t904 * t1295 + t1164) * t1273) * t1021 + t1324 * t1020 + t1323 * t1019, (t1164 + (-t1135 * t1342 + t904) * t1295) * t1021 - t1326 * t1020 - t1325 * t1019, (t1156 * t904 + t1158 * t903 + t1160 * t902) * t1064, t945 * t1184 + t943 * t1186 + t941 * t1188 + (t1001 * t1127 + t1129 * t999 + t1130 * t997) * t1064 + (t1019 * t1168 + t1020 * t1167 + t1118) * t1041, t945 * t1183 + t943 * t1185 + t941 * t1187 + (-t1000 * t1129 - t1002 * t1127 - t1130 * t998) * t1064 + (-t1019 * t1109 - t1020 * t1108 - t1118 * t1273) * t1041, 0; t907 * t1296 + t906 * t1297 + t905 * t1298, t900 * t1229 + t899 * t1232 + t1172, (t1054 * t1094 + t1056 * t1093 + t1058 * t1092 - t1141 * t952 - t1144 * t951 - t1147 * t950) * t1041, (-t1048 * t1094 - t1050 * t1093 - t1052 * t1092 - t1140 * t952 - t1143 * t951 - t1146 * t950) * t1041, t962 * t1149 + t963 * t1148 + t1027 * t1172 + ((t1132 * t964 - t955 * t1238) * t1272 + (t1133 * t963 - t954 * t1239) * t1274 + (t1134 * t962 - t953 * t1240) * t1275) * t1064, 0.2e1 * t962 * t1223 + 0.2e1 * t963 * t1221 + t964 * t1182 + (t1102 * t964 + t1103 * t963 + t1104 * t962 + t925 * t1227 + t924 * t1230 + t923 * t1233) * t1064, t962 * t902 * t1201 + t963 * t903 * t1199 + t964 * t904 * t1197 + (t963 * t977 * t1287 + t962 * t974 * t1290 + t1284 * t1333) * t1065 + (t1197 * t1334 + t1199 * t1335 + t1201 * t1336) * t1064, t962 * t1318 + t963 * t1317 + t964 * t1316 + (-t1142 * t963 - t1145 * t962 - t1195 * t1333) * t1065 + (t1334 * t1341 + t1335 * t1339 + t1336 * t1337) * t1064, (t1227 * t904 + t1230 * t903 + t1233 * t902) * t1064, t952 * t1184 + t951 * t1186 + t950 * t1188 + (t1001 * t1171 + t1173 * t999 + t1174 * t997) * t1064 + (t1216 * t964 + t1217 * t963 + t1218 * t962) * t1041, t952 * t1183 + t951 * t1185 + t950 * t1187 + (-t1000 * t1173 - t1002 * t1171 - t1174 * t998) * t1064 + (-t1112 * t964 - t1114 * t963 - t1116 * t962) * t1041, 0;];
tau_reg  = t1;
