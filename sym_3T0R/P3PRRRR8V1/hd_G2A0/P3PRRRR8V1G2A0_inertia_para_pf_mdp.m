% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3PRRRR8V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:03:37
% EndTime: 2020-08-06 17:03:46
% DurationCPUTime: 8.69s
% Computational Cost: add. (5826->421), mult. (18835->919), div. (1623->14), fcn. (20143->22), ass. (0->407)
t2112 = sin(pkin(6));
t2114 = cos(pkin(6));
t2122 = sin(qJ(2,2));
t2128 = cos(qJ(2,2));
t2115 = cos(pkin(3));
t2344 = t2115 * t2128;
t2348 = t2115 * t2122;
t2127 = cos(qJ(3,2));
t2410 = pkin(2) * t2127;
t2039 = -(-t2112 * t2122 + t2114 * t2344) * t2410 - pkin(5) * (t2112 * t2128 + t2114 * t2348);
t2042 = (t2112 * t2344 + t2114 * t2122) * t2410 + (t2112 * t2348 - t2114 * t2128) * pkin(5);
t2113 = sin(pkin(3));
t2121 = sin(qJ(3,2));
t2338 = t2121 * t2122;
t2183 = t2113 * t2127 + t2115 * t2338;
t2337 = t2121 * t2128;
t2050 = t2183 * t2112 - t2114 * t2337;
t2053 = -t2112 * t2337 - t2183 * t2114;
t2442 = t2039 * t2050 + t2042 * t2053;
t2120 = sin(qJ(2,3));
t2126 = cos(qJ(2,3));
t2345 = t2115 * t2126;
t2350 = t2115 * t2120;
t2125 = cos(qJ(3,3));
t2411 = pkin(2) * t2125;
t2038 = -(-t2112 * t2120 + t2114 * t2345) * t2411 - pkin(5) * (t2112 * t2126 + t2114 * t2350);
t2041 = (t2112 * t2345 + t2114 * t2120) * t2411 + (t2112 * t2350 - t2114 * t2126) * pkin(5);
t2119 = sin(qJ(3,3));
t2341 = t2119 * t2120;
t2184 = t2113 * t2125 + t2115 * t2341;
t2340 = t2119 * t2126;
t2049 = t2184 * t2112 - t2114 * t2340;
t2052 = -t2112 * t2340 - t2184 * t2114;
t2441 = t2038 * t2049 + t2041 * t2052;
t2130 = cos(qJ(2,1));
t2124 = sin(qJ(2,1));
t2129 = cos(qJ(3,1));
t2333 = t2124 * t2129;
t2083 = pkin(2) * t2333 - pkin(5) * t2130;
t2123 = sin(qJ(3,1));
t2347 = t2115 * t2123;
t2281 = pkin(2) * t2347 + t2083 * t2113;
t2440 = 0.1e1 / t2281 ^ 2;
t2439 = 0.1e1 / t2281;
t2336 = t2122 * t2127;
t2082 = pkin(2) * t2336 - pkin(5) * t2128;
t2349 = t2115 * t2121;
t2282 = pkin(2) * t2349 + t2082 * t2113;
t2438 = 0.1e1 / t2282 ^ 2;
t2437 = 0.1e1 / t2282;
t2339 = t2120 * t2125;
t2081 = pkin(2) * t2339 - pkin(5) * t2126;
t2351 = t2115 * t2119;
t2283 = pkin(2) * t2351 + t2081 * t2113;
t2436 = 0.1e1 / t2283 ^ 2;
t2435 = 0.1e1 / t2283;
t2116 = legFrame(3,2);
t2097 = sin(t2116);
t2091 = t2097 ^ 2;
t2434 = 0.2e1 * t2091;
t2117 = legFrame(2,2);
t2098 = sin(t2117);
t2092 = t2098 ^ 2;
t2433 = 0.2e1 * t2092;
t2432 = t2038 * t2052;
t2431 = t2039 * t2053;
t2343 = t2115 * t2130;
t2346 = t2115 * t2124;
t2409 = pkin(2) * t2129;
t2040 = -(-t2112 * t2124 + t2114 * t2343) * t2409 - pkin(5) * (t2112 * t2130 + t2114 * t2346);
t2335 = t2123 * t2124;
t2354 = t2113 * t2129;
t2182 = t2115 * t2335 + t2354;
t2334 = t2123 * t2130;
t2054 = -t2112 * t2334 - t2182 * t2114;
t2430 = t2040 * t2054;
t2429 = t2041 * t2049;
t2428 = t2042 * t2050;
t2427 = t2049 * t2052;
t2426 = t2050 * t2053;
t2051 = t2182 * t2112 - t2114 * t2334;
t2425 = t2051 * t2054;
t2118 = legFrame(1,2);
t2099 = sin(t2118);
t2093 = t2099 ^ 2;
t2424 = t2051 * t2093;
t2106 = 0.1e1 / t2125;
t2131 = 0.1e1 / pkin(2);
t2290 = (-t2113 * t2341 + t2115 * t2125) * t2106 * t2131;
t2356 = t2113 * t2126;
t2318 = t2049 * t2356;
t2423 = t2435 * (t2041 * t2290 + t2318);
t2108 = 0.1e1 / t2127;
t2289 = (-t2113 * t2338 + t2115 * t2127) * t2108 * t2131;
t2355 = t2113 * t2128;
t2317 = t2050 * t2355;
t2422 = t2437 * (t2042 * t2289 + t2317);
t2100 = cos(t2116);
t2421 = t2097 * t2100;
t2101 = cos(t2117);
t2420 = t2098 * t2101;
t2107 = 0.1e1 / t2125 ^ 2;
t2419 = t2107 * t2119;
t2109 = 0.1e1 / t2127 ^ 2;
t2418 = t2109 * t2121;
t2285 = t2113 * t2337;
t2369 = (t2113 * t2336 + t2349) * t2131;
t2376 = t2437 * t2108;
t2417 = (t2042 * t2369 + t2050 * t2285) * t2376;
t2286 = t2113 * t2340;
t2370 = (t2113 * t2339 + t2351) * t2131;
t2379 = t2435 * t2106;
t2416 = (t2041 * t2370 + t2049 * t2286) * t2379;
t2086 = pkin(5) * t2124 + t2130 * t2409;
t2412 = pkin(2) * t2113;
t2207 = -t2083 * t2115 + t2123 * t2412;
t2031 = -t2086 * t2112 + t2207 * t2114;
t2102 = cos(t2118);
t2027 = t2031 * t2099 + t2102 * t2281;
t2373 = t2439 ^ 2;
t2316 = t2051 * t2373;
t2110 = 0.1e1 / t2129;
t2364 = t2099 * t2110;
t2074 = t2112 * t2346 - t2114 * t2130;
t2055 = t2074 * t2123 + t2112 * t2354;
t2381 = t2055 * t2440;
t2415 = (t2316 + t2381) * t2027 * t2364;
t2414 = 2 * MDP(6);
t2413 = t2051 ^ 2;
t2408 = MDP(3) * t2113;
t2407 = MDP(4) * t2113;
t2406 = MDP(7) * t2131;
t2405 = MDP(8) * t2131;
t2404 = MDP(9) / pkin(2) ^ 2;
t2084 = pkin(5) * t2120 + t2126 * t2411;
t2209 = -t2081 * t2115 + t2119 * t2412;
t2029 = -t2084 * t2112 + t2209 * t2114;
t2023 = t2029 * t2097 + t2100 * t2283;
t2403 = t2023 * t2435;
t2024 = -t2029 * t2100 + t2097 * t2283;
t2402 = t2024 * t2435;
t2085 = pkin(5) * t2122 + t2128 * t2410;
t2208 = -t2082 * t2115 + t2121 * t2412;
t2030 = -t2085 * t2112 + t2208 * t2114;
t2025 = t2030 * t2098 + t2101 * t2282;
t2401 = t2025 * t2437;
t2026 = -t2030 * t2101 + t2098 * t2282;
t2400 = t2026 * t2437;
t2399 = t2027 * t2054;
t2398 = t2027 * t2439;
t2397 = t2027 * t2102;
t2028 = -t2031 * t2102 + t2099 * t2281;
t2396 = t2028 * t2439;
t2032 = t2084 * t2114 + t2209 * t2112;
t2395 = t2032 * t2435;
t2394 = t2032 * t2436;
t2033 = t2085 * t2114 + t2208 * t2112;
t2393 = t2033 * t2437;
t2392 = t2033 * t2438;
t2034 = t2086 * t2114 + t2207 * t2112;
t2391 = t2034 * t2439;
t2390 = t2034 * t2440;
t2387 = t2040 * t2051;
t2043 = (t2112 * t2343 + t2114 * t2124) * t2409 + t2074 * pkin(5);
t2384 = t2043 * t2054;
t2383 = t2051 * t2440;
t2382 = t2051 * t2102;
t2380 = t2055 * t2099;
t2378 = t2436 * t2106;
t2377 = t2436 * t2107;
t2375 = t2438 * t2108;
t2374 = t2438 * t2109;
t2372 = t2439 * t2110;
t2111 = 0.1e1 / t2129 ^ 2;
t2371 = t2440 * t2111;
t2080 = t2113 * t2333 + t2347;
t2368 = t2080 * t2131;
t2367 = t2097 * t2131;
t2366 = t2098 * t2131;
t2365 = t2099 * t2102;
t2363 = t2099 * t2131;
t2362 = t2106 * t2119;
t2361 = t2108 * t2121;
t2360 = t2110 * t2123;
t2359 = t2110 * t2124;
t2358 = t2110 * t2131;
t2357 = t2111 * t2123;
t2353 = t2113 * t2130;
t2352 = t2113 * t2131;
t2342 = t2115 * t2131;
t2035 = t2041 ^ 2;
t2036 = t2042 ^ 2;
t2037 = t2043 ^ 2;
t2249 = t2365 * t2371;
t2254 = t2374 * t2420;
t2259 = t2377 * t2421;
t2332 = (t2023 * t2024 * t2436 + t2025 * t2026 * t2438 + t2027 * t2028 * t2440) * MDP(1) + (-t2035 * t2259 - t2036 * t2254 - t2037 * t2249) * t2404;
t2278 = t2040 * t2043 * t2371;
t2279 = t2039 * t2042 * t2374;
t2280 = t2038 * t2041 * t2377;
t2331 = (t2023 * t2394 + t2025 * t2392 + t2027 * t2390) * MDP(1) + (t2097 * t2280 + t2098 * t2279 + t2099 * t2278) * t2404;
t2302 = t2437 * t2376;
t2257 = t2122 * t2302;
t2231 = t2050 * t2257;
t2199 = t2101 * t2231;
t2172 = t2113 * t2199;
t2309 = t2435 * t2379;
t2262 = t2120 * t2309;
t2235 = t2049 * t2262;
t2203 = t2100 * t2235;
t2174 = t2113 * t2203;
t2330 = t2023 * t2174 + t2025 * t2172;
t2256 = t2128 * t2302;
t2230 = t2050 * t2256;
t2200 = t2098 * t2230;
t2173 = t2113 * t2200;
t2261 = t2126 * t2309;
t2234 = t2049 * t2261;
t2204 = t2097 * t2234;
t2175 = t2113 * t2204;
t2329 = t2024 * t2175 + t2026 * t2173;
t2299 = t2438 * t2366;
t2180 = -0.2e1 * t2101 * t2299 * t2428;
t2306 = t2436 * t2367;
t2181 = -0.2e1 * t2100 * t2306 * t2429;
t2328 = t2180 * t2418 + t2181 * t2419;
t2327 = t2106 * t2181 + t2108 * t2180;
t2268 = t2377 * t2427;
t2021 = t2097 * t2268;
t2267 = t2374 * t2426;
t2022 = t2098 * t2267;
t2103 = t2119 ^ 2;
t2104 = t2121 ^ 2;
t2326 = t2103 * t2021 + t2104 * t2022;
t2297 = t2438 * t2361;
t2232 = t2297 * t2426;
t2304 = t2436 * t2362;
t2236 = t2304 * t2427;
t2325 = t2097 * t2236 + t2098 * t2232;
t2324 = t2021 + t2022;
t2320 = t2034 * t2051 * t2099;
t2048 = t2054 ^ 2;
t2319 = t2048 * t2371;
t2315 = t2051 * t2353;
t2314 = t2052 * t2356;
t2313 = t2053 * t2355;
t2312 = t2054 * t2353;
t2311 = t2055 * t2373;
t2310 = t2440 * t2380;
t2308 = t2091 * t2377;
t2094 = t2100 ^ 2;
t2307 = t2094 * t2377;
t2305 = t2103 * t2377;
t2303 = t2119 * t2377;
t2301 = t2092 * t2374;
t2095 = t2101 ^ 2;
t2300 = t2095 * t2374;
t2298 = t2104 * t2374;
t2296 = t2121 * t2374;
t2295 = t2439 * t2372;
t2294 = t2131 * t2373;
t2096 = t2102 ^ 2;
t2293 = t2096 * t2371;
t2292 = t2440 * t2360;
t2291 = t2440 * t2357;
t2079 = -t2113 * t2335 + t2115 * t2129;
t2288 = t2079 * t2358;
t2287 = t2099 * t2358;
t2284 = t2113 * t2334;
t2277 = t2378 * t2429;
t2276 = t2375 * t2428;
t2275 = t2043 * t2096 * t2383;
t2274 = t2043 * t2288;
t2273 = t2043 * t2102 * t2363;
t2044 = t2049 ^ 2;
t2272 = t2044 * t2305;
t2271 = t2044 * t2304;
t2045 = t2050 ^ 2;
t2270 = t2045 * t2298;
t2269 = t2045 * t2297;
t2266 = t2371 * t2425;
t2265 = t2413 * t2293;
t2264 = t2111 * t2311;
t2263 = t2353 * t2381;
t2260 = t2435 * t2120 * t2352;
t2255 = t2437 * t2122 * t2352;
t2252 = t2124 * t2295;
t2251 = t2130 * t2295;
t2250 = t2439 * t2124 * t2352;
t2248 = t2440 * t2287;
t2247 = t2413 * t2292;
t2246 = t2034 * t2054 * t2295;
t2245 = t2303 * t2429;
t2244 = t2041 * t2260;
t2243 = t2296 * t2428;
t2242 = t2042 * t2255;
t2241 = t2043 * t2439 * t2287;
t2240 = t2043 * t2250;
t2239 = t2044 * t2259;
t2238 = t2045 * t2254;
t2237 = t2100 * t2268;
t2233 = t2101 * t2267;
t2105 = t2123 ^ 2;
t2229 = t2105 * t2266;
t2228 = t2292 * t2425;
t2227 = t2051 * t2252;
t2226 = t2051 * t2251;
t2225 = t2413 * t2249;
t2224 = t2052 * t2262;
t2223 = t2052 * t2261;
t2222 = t2053 * t2257;
t2221 = t2053 * t2256;
t2220 = t2099 * t2264;
t2219 = t2055 * t2123 * t2295;
t2218 = t2099 * t2263;
t2215 = t2113 * t2251;
t2214 = t2291 * t2363;
t2192 = t2054 * t2215;
t2194 = t2113 * t2221;
t2195 = t2113 * t2223;
t2213 = t2023 * t2195 + t2025 * t2194 + t2027 * t2192 + t2032 * t2175 + t2033 * t2173;
t2212 = t2442 * t2296 * t2366 + t2441 * t2303 * t2367 + t2214 * t2384;
t2211 = t2441 * t2106 * t2306 + t2442 * t2108 * t2299 + t2248 * t2384;
t2210 = -t2028 * t2099 + t2397;
t2206 = t2040 * t2294 * t2380;
t2205 = t2097 * t2235;
t2202 = t2100 * t2234;
t2201 = t2098 * t2231;
t2198 = t2101 * t2230;
t2197 = t2264 * t2424;
t2196 = t2102 * t2226;
t2193 = t2054 * t2220;
t2191 = t2099 * t2219;
t2190 = t2110 * t2218;
t2189 = t2260 * t2362;
t2188 = t2255 * t2361;
t2187 = t2250 * t2360;
t2186 = t2311 + t2383;
t2179 = -0.2e1 * t2273 * t2383;
t2178 = t2041 * t2189;
t2177 = t2042 * t2188;
t2176 = t2043 * t2187;
t2171 = t2220 * t2382;
t2170 = t2436 * t2100 * t2441;
t2169 = t2438 * t2101 * t2442;
t2168 = t2440 * t2102 * (-t2384 - t2387);
t2163 = t2043 * t2093 * t2186;
t2162 = (t2038 * t2290 + t2314) * t2435;
t2161 = (t2039 * t2289 + t2313) * t2437;
t2160 = (t2040 * t2288 + t2312) * t2439;
t2159 = (t2041 * t2342 + t2318) * t2379;
t2158 = (t2042 * t2342 + t2317) * t2376;
t2157 = (t2043 * t2342 + t2315) * t2372;
t2156 = -t2028 * t2310 + t2316 * t2397;
t2155 = (-t2038 * t2370 - t2052 * t2286) * t2379;
t2154 = (-t2039 * t2369 - t2053 * t2285) * t2376;
t2153 = (-t2040 * t2368 - t2054 * t2284) * t2372;
t2152 = t2100 * t2423;
t2151 = t2097 * t2423;
t2150 = t2101 * t2422;
t2149 = t2098 * t2422;
t2148 = (-t2274 - t2315) * t2102 * t2439;
t2147 = t2186 * t2273;
t2146 = -t2238 - t2239;
t2145 = t2097 * t2416;
t2144 = t2100 * t2416;
t2143 = t2098 * t2417;
t2142 = t2101 * t2417;
t2141 = (t2043 * t2368 + t2051 * t2284) * t2102 * t2372;
t2140 = t2099 * (t2274 * t2373 + t2263);
t2139 = -t2103 * t2239 - t2104 * t2238;
t2138 = -t2269 * t2420 - t2271 * t2421;
t2137 = (-t2043 * t2080 * t2294 - t2123 * t2263) * t2364;
t2136 = -t2023 * t2202 - t2025 * t2198;
t2135 = -t2024 * t2205 - t2026 * t2201;
t2134 = (-t2032 * t2049 * t2097 - t2023 * t2052) * t2262 + (-t2033 * t2050 * t2098 - t2025 * t2053) * t2257;
t2133 = (t2024 * t2394 + t2026 * t2392 + t2028 * t2390) * MDP(1) + (-t2100 * t2280 - t2101 * t2279 - t2102 * t2278) * t2404 + (t2032 * t2174 + t2033 * t2172 + (-t2024 * t2224 - t2026 * t2222 + (-t2028 * t2054 + t2034 * t2382) * t2252) * t2113) * MDP(4) + (t2024 * t2195 + t2026 * t2194 + t2028 * t2192 + (-t2032 * t2202 - t2033 * t2198 - t2034 * t2196) * t2113) * MDP(3) + (-t2102 * t2266 - t2233 - t2237) * MDP(2) + (-t2102 * t2229 - t2103 * t2237 - t2104 * t2233) * MDP(5) + (-t2106 * t2170 - t2108 * t2169 + t2110 * t2168) * t2405 + (t2168 * t2357 - t2169 * t2418 - t2170 * t2419) * t2406 + (-t2100 * t2236 - t2101 * t2232 - t2102 * t2228) * t2414;
t2047 = t2053 ^ 2;
t2046 = t2052 ^ 2;
t2002 = (t2040 * t2342 + t2312) * t2372;
t2001 = (t2039 * t2342 + t2313) * t2376;
t2000 = (t2038 * t2342 + t2314) * t2379;
t1995 = t2102 * t2157;
t1994 = t2099 * t2157;
t1993 = t2101 * t2158;
t1992 = t2098 * t2158;
t1991 = t2100 * t2159;
t1990 = t2097 * t2159;
t1979 = -t2002 * t2123 - t2040 * t2250;
t1978 = -t2001 * t2121 - t2039 * t2255;
t1977 = -t2000 * t2119 - t2038 * t2260;
t1976 = t2002 * t2129 - t2040 * t2187;
t1975 = t2001 * t2127 - t2039 * t2188;
t1974 = t2000 * t2125 - t2038 * t2189;
t1973 = t1995 * t2123 + t2102 * t2240;
t1972 = -t1994 * t2123 - t2099 * t2240;
t1971 = t1993 * t2121 + t2101 * t2242;
t1970 = -t1992 * t2121 - t2098 * t2242;
t1969 = t1991 * t2119 + t2100 * t2244;
t1968 = -t1990 * t2119 - t2097 * t2244;
t1967 = -t1995 * t2129 + t2102 * t2176;
t1966 = t1994 * t2129 - t2099 * t2176;
t1965 = -t1993 * t2127 + t2101 * t2177;
t1964 = t1992 * t2127 - t2098 * t2177;
t1963 = -t1991 * t2125 + t2100 * t2178;
t1962 = t1990 * t2125 - t2097 * t2178;
t1 = [(t2024 ^ 2 * t2436 + t2026 ^ 2 * t2438 + t2028 ^ 2 * t2440) * MDP(1) + (t2044 * t2307 + t2045 * t2300 + t2265) * MDP(2) + (t2094 * t2272 + t2095 * t2270 + t2105 * t2265) * MDP(5) + (t2094 * t2271 + t2095 * t2269 + t2096 * t2247) * t2414 + (t2035 * t2307 + t2036 * t2300 + t2037 * t2293) * t2404 + ((t1967 + t2148) * t2396 + (t1965 - t2150) * t2400 + (t1963 - t2152) * t2402) * MDP(10) + ((t1973 + t2141) * t2396 + (t1971 + t2142) * t2400 + (t1969 + t2144) * t2402) * MDP(11) + MDP(12) + 0.2e1 * ((-t2024 * t2202 - t2026 * t2198 - t2028 * t2196) * MDP(3) + (t2028 * t2102 * t2227 + t2024 * t2203 + t2026 * t2199) * MDP(4)) * t2113 + 0.2e1 * ((t2094 * t2245 + t2095 * t2243 + t2275 * t2357) * MDP(7) + (t2094 * t2277 + t2095 * t2276 + t2110 * t2275) * MDP(8)) * t2131; (t2146 - t2225) * MDP(2) + ((-t2210 * t2226 + t2136) * t2113 + t2329) * MDP(3) + ((t2210 * t2227 + t2135) * t2113 + t2330) * MDP(4) + (-t2105 * t2225 + t2139) * MDP(5) + (-t2247 * t2365 + t2138) * t2414 + (t2179 * t2357 + t2328) * MDP(7) + (t2110 * t2179 + t2327) * MDP(8) + ((t2028 * t1966 + t2027 * t2148) * t2439 + (t2026 * t1964 - t2025 * t2150) * t2437 + (t2024 * t1962 - t2023 * t2152) * t2435) * MDP(10) + ((t2028 * t1972 + t2027 * t2141) * t2439 + (t2026 * t1970 + t2025 * t2142) * t2437 + (t2024 * t1968 + t2023 * t2144) * t2435) * MDP(11) + t2332; ((t2028 * t1976 + t2034 * t2148) * t2439 + (t2026 * t1975 - t2033 * t2150) * t2437 + (t2024 * t1974 - t2032 * t2152) * t2435) * MDP(10) + ((t2028 * t1979 + t2034 * t2141) * t2439 + (t2026 * t1978 + t2033 * t2142) * t2437 + (t2024 * t1977 + t2032 * t2144) * t2435) * MDP(11) + t2133; (t2146 - t2171) * MDP(2) + ((-t2156 * t2130 * t2110 + t2136) * t2113 + t2329) * MDP(3) + ((t2156 * t2359 + t2135) * t2113 + t2330) * MDP(4) + (-t2105 * t2171 + t2139) * MDP(5) + (-t2191 * t2382 + t2138) * t2414 + (-t2147 * t2357 + t2328) * MDP(7) + (-t2110 * t2147 + t2327) * MDP(8) + (t1967 * t2398 + t2028 * t2140 + (t2025 * t1965 + t2026 * t2149) * t2437 + (t2023 * t1963 + t2024 * t2151) * t2435) * MDP(10) + (t1973 * t2398 + t2028 * t2137 + (t2025 * t1971 - t2026 * t2143) * t2437 + (t2023 * t1969 - t2024 * t2145) * t2435) * MDP(11) + t2332; (t2023 ^ 2 * t2436 + t2025 ^ 2 * t2438 + t2027 ^ 2 * t2440) * MDP(1) + (t2044 * t2308 + t2045 * t2301 + t2197) * MDP(2) + (0.2e1 * t2023 * t2204 + 0.2e1 * t2025 * t2200 + t2130 * t2415) * t2408 + (-0.2e1 * t2023 * t2205 - 0.2e1 * t2025 * t2201 - t2124 * t2415) * t2407 + (t2091 * t2272 + t2092 * t2270 + t2105 * t2197) * MDP(5) + (t2091 * t2271 + t2092 * t2269 + t2219 * t2424) * t2414 + (t2163 * t2357 + t2243 * t2433 + t2245 * t2434) * t2406 + (t2110 * t2163 + t2276 * t2433 + t2277 * t2434) * t2405 + (t2037 * t2093 * t2371 + t2035 * t2308 + t2036 * t2301) * t2404 + ((t2218 + (t2079 * t2241 + t1966) * t2439) * t2027 + (t1964 + t2149) * t2401 + (t1962 + t2151) * t2403) * MDP(10) + ((-t2123 * t2190 + (-t2080 * t2241 + t1972) * t2439) * t2027 + (t1970 - t2143) * t2401 + (t1968 - t2145) * t2403) * MDP(11) + MDP(12); (t2193 + t2324) * MDP(2) + (t2034 * t2190 + t2213) * MDP(3) + ((-t2034 * t2310 - t2373 * t2399) * t2359 + t2134) * t2407 + (t2105 * t2193 + t2326) * MDP(5) + (t2054 * t2191 + t2325) * t2414 + (t2206 * t2357 + t2212) * MDP(7) + (t2110 * t2206 + t2211) * MDP(8) + (t1976 * t2398 + t2034 * t2140 + (t2025 * t1975 + t2033 * t2149) * t2437 + (t2023 * t1974 + t2032 * t2151) * t2435) * MDP(10) + (t1979 * t2398 + t2034 * t2137 + (t2025 * t1978 - t2033 * t2143) * t2437 + (t2023 * t1977 - t2032 * t2145) * t2435) * MDP(11) + t2331; ((t2034 * t1967 + t2028 * t2160) * t2439 + (t2033 * t1965 + t2026 * t2161) * t2437 + (t2032 * t1963 + t2024 * t2162) * t2435) * MDP(10) + ((t2034 * t1973 + t2028 * t2153) * t2439 + (t2033 * t1971 + t2026 * t2154) * t2437 + (t2032 * t1969 + t2024 * t2155) * t2435) * MDP(11) + t2133; (t2099 * t2266 + t2324) * MDP(2) + (t2215 * t2320 + t2213) * MDP(3) + ((-t2320 - t2399) * t2252 + t2134) * t2407 + (t2099 * t2229 + t2326) * MDP(5) + (t2099 * t2228 + t2325) * t2414 + (t2214 * t2387 + t2212) * MDP(7) + (t2248 * t2387 + t2211) * MDP(8) + ((t2034 * t1966 + t2027 * t2160) * t2439 + (t2033 * t1964 + t2025 * t2161) * t2437 + (t2032 * t1962 + t2023 * t2162) * t2435) * MDP(10) + ((t2034 * t1972 + t2027 * t2153) * t2439 + (t2033 * t1970 + t2025 * t2154) * t2437 + (t2032 * t1968 + t2023 * t2155) * t2435) * MDP(11) + t2331; (t2032 ^ 2 * t2436 + t2033 ^ 2 * t2438 + t2034 ^ 2 * t2440) * MDP(1) + (t2046 * t2377 + t2047 * t2374 + t2319) * MDP(2) + 0.2e1 * (t2032 * t2223 + t2033 * t2221 + t2130 * t2246) * t2408 + 0.2e1 * (-t2032 * t2224 - t2033 * t2222 - t2124 * t2246) * t2407 + (t2046 * t2305 + t2047 * t2298 + t2105 * t2319) * MDP(5) + (t2046 * t2304 + t2047 * t2297 + t2048 * t2292) * t2414 + 0.2e1 * (t2291 * t2430 + t2296 * t2431 + t2303 * t2432) * t2406 + 0.2e1 * (t2110 * t2430 * t2440 + t2375 * t2431 + t2378 * t2432) * t2405 + (t2038 ^ 2 * t2377 + t2039 ^ 2 * t2374 + t2040 ^ 2 * t2371) * t2404 + ((t1976 + t2160) * t2391 + (t1975 + t2161) * t2393 + (t1974 + t2162) * t2395) * MDP(10) + ((t1979 + t2153) * t2391 + (t1978 + t2154) * t2393 + (t1977 + t2155) * t2395) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
