% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V1G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:03:11
% EndTime: 2020-08-06 17:03:18
% DurationCPUTime: 7.18s
% Computational Cost: add. (5733->338), mult. (18736->864), div. (1623->14), fcn. (20143->22), ass. (0->414)
t557 = sin(pkin(6));
t559 = cos(pkin(6));
t567 = sin(qJ(2,2));
t573 = cos(qJ(2,2));
t560 = cos(pkin(3));
t793 = t560 * t573;
t797 = t560 * t567;
t572 = cos(qJ(3,2));
t854 = pkin(2) * t572;
t484 = -(-t557 * t567 + t559 * t793) * t854 - pkin(5) * (t557 * t573 + t559 * t797);
t487 = (t557 * t793 + t559 * t567) * t854 + (t557 * t797 - t559 * t573) * pkin(5);
t558 = sin(pkin(3));
t566 = sin(qJ(3,2));
t787 = t566 * t567;
t634 = t558 * t572 + t560 * t787;
t786 = t566 * t573;
t495 = t634 * t557 - t559 * t786;
t498 = -t557 * t786 - t634 * t559;
t889 = t484 * t495 + t487 * t498;
t565 = sin(qJ(2,3));
t571 = cos(qJ(2,3));
t794 = t560 * t571;
t799 = t560 * t565;
t570 = cos(qJ(3,3));
t855 = pkin(2) * t570;
t483 = -(-t557 * t565 + t559 * t794) * t855 - pkin(5) * (t557 * t571 + t559 * t799);
t486 = (t557 * t794 + t559 * t565) * t855 + (t557 * t799 - t559 * t571) * pkin(5);
t564 = sin(qJ(3,3));
t790 = t564 * t565;
t635 = t558 * t570 + t560 * t790;
t789 = t564 * t571;
t494 = t635 * t557 - t559 * t789;
t497 = -t557 * t789 - t635 * t559;
t888 = t483 * t494 + t486 * t497;
t575 = cos(qJ(2,1));
t569 = sin(qJ(2,1));
t574 = cos(qJ(3,1));
t782 = t569 * t574;
t528 = pkin(2) * t782 - pkin(5) * t575;
t568 = sin(qJ(3,1));
t796 = t560 * t568;
t732 = pkin(2) * t796 + t528 * t558;
t887 = 0.1e1 / t732 ^ 2;
t886 = 0.1e1 / t732;
t785 = t567 * t572;
t527 = pkin(2) * t785 - pkin(5) * t573;
t798 = t560 * t566;
t733 = pkin(2) * t798 + t527 * t558;
t885 = 0.1e1 / t733 ^ 2;
t884 = 0.1e1 / t733;
t788 = t565 * t570;
t526 = pkin(2) * t788 - pkin(5) * t571;
t800 = t560 * t564;
t734 = pkin(2) * t800 + t526 * t558;
t883 = 0.1e1 / t734 ^ 2;
t882 = 0.1e1 / t734;
t561 = legFrame(3,2);
t542 = sin(t561);
t536 = t542 ^ 2;
t881 = 0.2e1 * t536;
t562 = legFrame(2,2);
t543 = sin(t562);
t537 = t543 ^ 2;
t880 = 0.2e1 * t537;
t879 = 0.2e1 * t558;
t576 = 0.1e1 / pkin(2);
t878 = 0.2e1 * t576;
t877 = t483 * t497;
t876 = t484 * t498;
t792 = t560 * t575;
t795 = t560 * t569;
t853 = pkin(2) * t574;
t485 = -(-t557 * t569 + t559 * t792) * t853 - pkin(5) * (t557 * t575 + t559 * t795);
t784 = t568 * t569;
t803 = t558 * t574;
t633 = t560 * t784 + t803;
t783 = t568 * t575;
t499 = -t557 * t783 - t633 * t559;
t875 = t485 * t499;
t874 = t486 * t494;
t873 = t487 * t495;
t872 = t494 * t497;
t871 = t495 * t498;
t496 = t633 * t557 - t559 * t783;
t870 = t496 * t499;
t563 = legFrame(1,2);
t544 = sin(t563);
t538 = t544 ^ 2;
t869 = t496 * t538;
t551 = 0.1e1 / t570;
t741 = (-t558 * t790 + t560 * t570) * t551 * t576;
t805 = t558 * t571;
t769 = t494 * t805;
t868 = t882 * (t486 * t741 + t769);
t553 = 0.1e1 / t572;
t740 = (-t558 * t787 + t560 * t572) * t553 * t576;
t804 = t558 * t573;
t768 = t495 * t804;
t867 = t884 * (t487 * t740 + t768);
t545 = cos(t561);
t866 = t542 * t545;
t546 = cos(t562);
t865 = t543 * t546;
t552 = 0.1e1 / t570 ^ 2;
t864 = t552 * t564;
t554 = 0.1e1 / t572 ^ 2;
t863 = t554 * t566;
t736 = t558 * t786;
t818 = (t558 * t785 + t798) * t576;
t825 = t884 * t553;
t862 = (t487 * t818 + t495 * t736) * t825;
t737 = t558 * t789;
t819 = (t558 * t788 + t800) * t576;
t828 = t882 * t551;
t861 = (t486 * t819 + t494 * t737) * t828;
t531 = pkin(5) * t569 + t575 * t853;
t856 = pkin(2) * t558;
t658 = -t528 * t560 + t568 * t856;
t476 = -t531 * t557 + t559 * t658;
t547 = cos(t563);
t472 = t476 * t544 + t547 * t732;
t822 = t886 ^ 2;
t767 = t496 * t822;
t555 = 0.1e1 / t574;
t813 = t544 * t555;
t519 = t557 * t795 - t559 * t575;
t500 = t519 * t568 + t557 * t803;
t830 = t500 * t887;
t860 = (t767 + t830) * t472 * t813;
t859 = t496 ^ 2;
t529 = pkin(5) * t565 + t571 * t855;
t660 = -t526 * t560 + t564 * t856;
t474 = -t529 * t557 + t559 * t660;
t468 = t474 * t542 + t545 * t734;
t852 = t468 * t882;
t469 = -t474 * t545 + t542 * t734;
t851 = t469 * t882;
t530 = pkin(5) * t567 + t573 * t854;
t659 = -t527 * t560 + t566 * t856;
t475 = -t530 * t557 + t559 * t659;
t470 = t475 * t543 + t546 * t733;
t850 = t470 * t884;
t471 = -t475 * t546 + t543 * t733;
t849 = t471 * t884;
t848 = t472 * t499;
t847 = t472 * t886;
t846 = t472 * t547;
t473 = -t476 * t547 + t544 * t732;
t845 = t473 * t886;
t477 = t529 * t559 + t557 * t660;
t844 = t477 * t882;
t843 = t477 * t883;
t478 = t530 * t559 + t557 * t659;
t842 = t478 * t884;
t841 = t478 * t885;
t479 = t531 * t559 + t557 * t658;
t840 = t479 * t886;
t839 = t479 * t887;
t836 = t485 * t496;
t488 = (t557 * t792 + t559 * t569) * t853 + t519 * pkin(5);
t833 = t488 * t499;
t832 = t496 * t887;
t831 = t496 * t547;
t829 = t500 * t544;
t827 = t883 * t551;
t826 = t883 * t552;
t824 = t885 * t553;
t823 = t885 * t554;
t821 = t886 * t555;
t556 = 0.1e1 / t574 ^ 2;
t820 = t887 * t556;
t525 = t558 * t782 + t796;
t817 = t525 * t576;
t816 = t542 * t576;
t815 = t543 * t576;
t814 = t544 * t547;
t812 = t544 * t576;
t811 = t551 * t564;
t810 = t553 * t566;
t809 = t555 * t568;
t808 = t555 * t569;
t807 = t555 * t576;
t806 = t556 * t568;
t802 = t558 * t575;
t801 = t558 * t576;
t791 = t560 * t576;
t753 = t884 * t825;
t708 = t567 * t753;
t682 = t495 * t708;
t650 = t546 * t682;
t623 = t558 * t650;
t760 = t882 * t828;
t713 = t565 * t760;
t686 = t494 * t713;
t654 = t545 * t686;
t625 = t558 * t654;
t781 = t468 * t625 + t470 * t623;
t707 = t573 * t753;
t681 = t495 * t707;
t651 = t543 * t681;
t624 = t558 * t651;
t712 = t571 * t760;
t685 = t494 * t712;
t655 = t542 * t685;
t626 = t558 * t655;
t780 = t469 * t626 + t471 * t624;
t750 = t885 * t815;
t631 = -0.2e1 * t546 * t750 * t873;
t757 = t883 * t816;
t632 = -0.2e1 * t545 * t757 * t874;
t779 = t631 * t863 + t632 * t864;
t778 = t551 * t632 + t553 * t631;
t719 = t826 * t872;
t466 = t542 * t719;
t718 = t823 * t871;
t467 = t543 * t718;
t548 = t564 ^ 2;
t549 = t566 ^ 2;
t777 = t548 * t466 + t549 * t467;
t748 = t885 * t810;
t683 = t748 * t871;
t755 = t883 * t811;
t687 = t755 * t872;
t776 = t542 * t687 + t543 * t683;
t775 = t466 + t467;
t771 = t479 * t496 * t544;
t493 = t499 ^ 2;
t770 = t493 * t820;
t766 = t496 * t802;
t765 = t497 * t805;
t764 = t498 * t804;
t763 = t499 * t802;
t762 = t500 * t822;
t761 = t887 * t829;
t759 = t536 * t826;
t539 = t545 ^ 2;
t758 = t539 * t826;
t756 = t548 * t826;
t754 = t564 * t826;
t752 = t537 * t823;
t540 = t546 ^ 2;
t751 = t540 * t823;
t749 = t549 * t823;
t747 = t566 * t823;
t746 = t886 * t821;
t745 = t576 * t822;
t541 = t547 ^ 2;
t744 = t541 * t820;
t743 = t887 * t809;
t742 = t887 * t806;
t524 = -t558 * t784 + t560 * t574;
t739 = t524 * t807;
t738 = t544 * t807;
t735 = t558 * t783;
t731 = t483 * t486 * t826;
t730 = t484 * t487 * t823;
t729 = t485 * t488 * t820;
t728 = t827 * t874;
t727 = t824 * t873;
t726 = t488 * t541 * t832;
t725 = t488 * t739;
t724 = t488 * t547 * t812;
t489 = t494 ^ 2;
t723 = t489 * t756;
t722 = t489 * t755;
t490 = t495 ^ 2;
t721 = t490 * t749;
t720 = t490 * t748;
t717 = t820 * t870;
t716 = t859 * t744;
t715 = t556 * t762;
t714 = t802 * t830;
t711 = t882 * t565 * t801;
t710 = t826 * t866;
t706 = t884 * t567 * t801;
t705 = t823 * t865;
t703 = t569 * t746;
t702 = t575 * t746;
t701 = t886 * t569 * t801;
t700 = t814 * t820;
t699 = t887 * t738;
t698 = t859 * t743;
t697 = t479 * t499 * t746;
t696 = t754 * t874;
t695 = t486 * t711;
t694 = t747 * t873;
t693 = t487 * t706;
t692 = t488 * t886 * t738;
t691 = t488 * t701;
t690 = t489 * t710;
t689 = t490 * t705;
t688 = t545 * t719;
t684 = t546 * t718;
t550 = t568 ^ 2;
t680 = t550 * t717;
t679 = t743 * t870;
t678 = t496 * t703;
t677 = t496 * t702;
t676 = t859 * t700;
t675 = t497 * t713;
t674 = t497 * t712;
t673 = t498 * t708;
t672 = t498 * t707;
t671 = t544 * t715;
t670 = t500 * t568 * t746;
t669 = t544 * t714;
t666 = t558 * t702;
t665 = t742 * t812;
t643 = t499 * t666;
t645 = t558 * t672;
t646 = t558 * t674;
t664 = t468 * t646 + t470 * t645 + t472 * t643 + t477 * t626 + t478 * t624;
t663 = t889 * t747 * t815 + t888 * t754 * t816 + t665 * t833;
t662 = t888 * t551 * t757 + t889 * t553 * t750 + t699 * t833;
t661 = -t473 * t544 + t846;
t657 = t485 * t745 * t829;
t656 = t542 * t686;
t653 = t545 * t685;
t652 = t543 * t682;
t649 = t546 * t681;
t648 = t715 * t869;
t647 = t547 * t677;
t644 = t499 * t671;
t642 = t544 * t670;
t641 = t555 * t669;
t640 = t711 * t811;
t639 = t706 * t810;
t638 = t701 * t809;
t637 = t762 + t832;
t630 = -0.2e1 * t724 * t832;
t629 = t486 * t640;
t628 = t487 * t639;
t627 = t488 * t638;
t622 = t671 * t831;
t621 = t883 * t545 * t888;
t620 = t885 * t546 * t889;
t619 = t887 * t547 * (-t833 - t836);
t614 = t488 * t538 * t637;
t613 = (t483 * t741 + t765) * t882;
t612 = (t484 * t740 + t764) * t884;
t611 = (t485 * t739 + t763) * t886;
t610 = (t486 * t791 + t769) * t828;
t609 = (t487 * t791 + t768) * t825;
t608 = (t488 * t791 + t766) * t821;
t607 = -t473 * t761 + t767 * t846;
t606 = (-t483 * t819 - t497 * t737) * t828;
t605 = (-t484 * t818 - t498 * t736) * t825;
t604 = (-t485 * t817 - t499 * t735) * t821;
t603 = t545 * t868;
t602 = t542 * t868;
t601 = t546 * t867;
t600 = t543 * t867;
t599 = (-t725 - t766) * t547 * t886;
t598 = t637 * t724;
t597 = -t689 - t690;
t596 = t542 * t861;
t595 = t545 * t861;
t594 = t543 * t862;
t593 = t546 * t862;
t592 = (t488 * t817 + t496 * t735) * t547 * t821;
t591 = (t725 * t822 + t714) * t544;
t590 = -t548 * t690 - t549 * t689;
t589 = -t720 * t865 - t722 * t866;
t588 = (-t488 * t525 * t745 - t568 * t714) * t813;
t587 = -t468 * t653 - t470 * t649;
t586 = -t469 * t656 - t471 * t652;
t585 = -t547 * t717 - t684 - t688;
t584 = -t547 * t680 - t548 * t688 - t549 * t684;
t583 = -0.2e1 * t545 * t687 - 0.2e1 * t546 * t683 - 0.2e1 * t547 * t679;
t582 = (-t477 * t494 * t542 - t468 * t497) * t713 + (-t478 * t495 * t543 - t470 * t498) * t708;
t581 = t469 * t646 + t471 * t645 + t473 * t643 + (-t477 * t653 - t478 * t649 - t479 * t647) * t558;
t580 = t477 * t625 + t478 * t623 + (-t469 * t675 - t471 * t673 + (-t473 * t499 + t479 * t831) * t703) * t558;
t579 = (-t551 * t621 - t553 * t620 + t555 * t619) * t576;
t578 = (t619 * t806 - t620 * t863 - t621 * t864) * t576;
t577 = 0.1e1 / pkin(2) ^ 2;
t492 = t498 ^ 2;
t491 = t497 ^ 2;
t482 = t488 ^ 2;
t481 = t487 ^ 2;
t480 = t486 ^ 2;
t447 = (t485 * t791 + t763) * t821;
t446 = (t484 * t791 + t764) * t825;
t445 = (t483 * t791 + t765) * t828;
t440 = t547 * t608;
t439 = t544 * t608;
t438 = t546 * t609;
t437 = t543 * t609;
t436 = t545 * t610;
t435 = t542 * t610;
t424 = -t447 * t568 - t485 * t701;
t423 = -t446 * t566 - t484 * t706;
t422 = -t445 * t564 - t483 * t711;
t421 = t447 * t574 - t485 * t638;
t420 = t446 * t572 - t484 * t639;
t419 = t445 * t570 - t483 * t640;
t418 = t440 * t568 + t547 * t691;
t417 = -t439 * t568 - t544 * t691;
t416 = t438 * t566 + t546 * t693;
t415 = -t437 * t566 - t543 * t693;
t414 = t436 * t564 + t545 * t695;
t413 = -t435 * t564 - t542 * t695;
t412 = -t440 * t574 + t547 * t627;
t411 = t439 * t574 - t544 * t627;
t410 = -t438 * t572 + t546 * t628;
t409 = t437 * t572 - t543 * t628;
t408 = -t436 * t570 + t545 * t629;
t407 = t435 * t570 - t542 * t629;
t406 = (-t480 * t710 - t481 * t705 - t482 * t700) * t577;
t405 = (-t545 * t731 - t546 * t730 - t547 * t729) * t577;
t404 = (t542 * t731 + t543 * t730 + t544 * t729) * t577;
t403 = t469 * t843 + t471 * t841 + t473 * t839;
t402 = t468 * t843 + t470 * t841 + t472 * t839;
t401 = t468 * t469 * t883 + t470 * t471 * t885 + t472 * t473 * t887;
t1 = [t469 ^ 2 * t883 + t471 ^ 2 * t885 + t473 ^ 2 * t887, t489 * t758 + t490 * t751 + t716, (-t469 * t653 - t471 * t649 - t473 * t647) * t879, (t473 * t547 * t678 + t469 * t654 + t471 * t650) * t879, t539 * t723 + t540 * t721 + t550 * t716, 0.2e1 * t539 * t722 + 0.2e1 * t540 * t720 + 0.2e1 * t541 * t698, (t539 * t696 + t540 * t694 + t726 * t806) * t878, (t539 * t728 + t540 * t727 + t555 * t726) * t878, (t480 * t758 + t481 * t751 + t482 * t744) * t577, (t412 + t599) * t845 + (t410 - t601) * t849 + (t408 - t603) * t851, (t418 + t592) * t845 + (t416 + t593) * t849 + (t414 + t595) * t851, 1; t401, t597 - t676, (-t661 * t677 + t587) * t558 + t780, (t661 * t678 + t586) * t558 + t781, -t550 * t676 + t590, -0.2e1 * t698 * t814 + 0.2e1 * t589, t630 * t806 + t779, t555 * t630 + t778, t406, (t473 * t411 + t472 * t599) * t886 + (t471 * t409 - t470 * t601) * t884 + (t469 * t407 - t468 * t603) * t882, (t473 * t417 + t472 * t592) * t886 + (t471 * t415 + t470 * t593) * t884 + (t469 * t413 + t468 * t595) * t882, 0; t403, t585, t581, t580, t584, t583, t578, t579, t405, (t473 * t421 + t479 * t599) * t886 + (t471 * t420 - t478 * t601) * t884 + (t469 * t419 - t477 * t603) * t882, (t473 * t424 + t479 * t592) * t886 + (t471 * t423 + t478 * t593) * t884 + (t469 * t422 + t477 * t595) * t882, 0; t401, t597 - t622, (-t555 * t575 * t607 + t587) * t558 + t780, (t607 * t808 + t586) * t558 + t781, -t550 * t622 + t590, -0.2e1 * t642 * t831 + 0.2e1 * t589, -t598 * t806 + t779, -t555 * t598 + t778, t406, t412 * t847 + t473 * t591 + (t470 * t410 + t471 * t600) * t884 + (t468 * t408 + t469 * t602) * t882, t418 * t847 + t473 * t588 + (t470 * t416 - t471 * t594) * t884 + (t468 * t414 - t469 * t596) * t882, 0; t468 ^ 2 * t883 + t470 ^ 2 * t885 + t472 ^ 2 * t887, t489 * t759 + t490 * t752 + t648, (0.2e1 * t468 * t655 + 0.2e1 * t470 * t651 + t575 * t860) * t558, (-0.2e1 * t468 * t656 - 0.2e1 * t470 * t652 - t569 * t860) * t558, t536 * t723 + t537 * t721 + t550 * t648, 0.2e1 * t536 * t722 + 0.2e1 * t537 * t720 + 0.2e1 * t670 * t869, (t614 * t806 + t694 * t880 + t696 * t881) * t576, (t555 * t614 + t727 * t880 + t728 * t881) * t576, (t482 * t538 * t820 + t480 * t759 + t481 * t752) * t577, (t669 + (t524 * t692 + t411) * t886) * t472 + (t409 + t600) * t850 + (t407 + t602) * t852, (-t568 * t641 + (-t525 * t692 + t417) * t886) * t472 + (t415 - t594) * t850 + (t413 - t596) * t852, 1; t402, t644 + t775, t479 * t641 + t664, ((-t479 * t761 - t822 * t848) * t808 + t582) * t558, t550 * t644 + t777, 0.2e1 * t499 * t642 + 0.2e1 * t776, t657 * t806 + t663, t555 * t657 + t662, t404, t421 * t847 + t479 * t591 + (t420 * t470 + t478 * t600) * t884 + (t419 * t468 + t477 * t602) * t882, t424 * t847 + t479 * t588 + (t470 * t423 - t478 * t594) * t884 + (t468 * t422 - t477 * t596) * t882, 0; t403, t585, t581, t580, t584, t583, t578, t579, t405, (t479 * t412 + t473 * t611) * t886 + (t478 * t410 + t471 * t612) * t884 + (t477 * t408 + t469 * t613) * t882, (t479 * t418 + t473 * t604) * t886 + (t478 * t416 + t471 * t605) * t884 + (t477 * t414 + t469 * t606) * t882, 0; t402, t544 * t717 + t775, t666 * t771 + t664, ((-t771 - t848) * t703 + t582) * t558, t544 * t680 + t777, 0.2e1 * t544 * t679 + 0.2e1 * t776, t665 * t836 + t663, t699 * t836 + t662, t404, (t479 * t411 + t472 * t611) * t886 + (t478 * t409 + t470 * t612) * t884 + (t477 * t407 + t468 * t613) * t882, (t479 * t417 + t472 * t604) * t886 + (t478 * t415 + t470 * t605) * t884 + (t477 * t413 + t468 * t606) * t882, 0; t477 ^ 2 * t883 + t478 ^ 2 * t885 + t479 ^ 2 * t887, t491 * t826 + t492 * t823 + t770, (t477 * t674 + t478 * t672 + t575 * t697) * t879, (-t477 * t675 - t478 * t673 - t569 * t697) * t879, t491 * t756 + t492 * t749 + t550 * t770, 0.2e1 * t491 * t755 + 0.2e1 * t492 * t748 + 0.2e1 * t493 * t743, (t742 * t875 + t747 * t876 + t754 * t877) * t878, (t555 * t875 * t887 + t824 * t876 + t827 * t877) * t878, (t483 ^ 2 * t826 + t484 ^ 2 * t823 + t485 ^ 2 * t820) * t577, (t421 + t611) * t840 + (t420 + t612) * t842 + (t419 + t613) * t844, (t424 + t604) * t840 + (t423 + t605) * t842 + (t422 + t606) * t844, 1;];
tau_reg  = t1;
