% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G3A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:17:06
% EndTime: 2020-08-06 17:17:18
% DurationCPUTime: 11.51s
% Computational Cost: add. (27474->378), mult. (71103->834), div. (4896->17), fcn. (68635->22), ass. (0->370)
t2448 = sin(pkin(6));
t2450 = cos(pkin(6));
t2456 = sin(qJ(2,3));
t2462 = cos(qJ(2,3));
t2451 = cos(pkin(3));
t2668 = t2451 * t2462;
t2673 = t2451 * t2456;
t2461 = cos(qJ(3,3));
t2728 = pkin(2) * t2461;
t2363 = pkin(5) * (t2448 * t2462 + t2450 * t2673) + (-t2448 * t2456 + t2450 * t2668) * t2728;
t2455 = sin(qJ(3,3));
t2663 = t2455 * t2456;
t2449 = sin(pkin(3));
t2680 = t2449 * t2461;
t2513 = t2451 * t2663 + t2680;
t2662 = t2455 * t2462;
t2372 = t2448 * t2662 + t2513 * t2450;
t2452 = legFrame(3,2);
t2427 = sin(t2452);
t2430 = cos(t2452);
t2468 = xDP(2);
t2469 = xDP(1);
t2411 = -t2427 * t2468 + t2430 * t2469;
t2467 = xDP(3);
t2681 = t2448 * t2467;
t2375 = t2411 * t2450 - t2681;
t2665 = t2451 * t2467;
t2347 = ((-t2411 * t2673 - t2462 * t2467) * t2450 - (t2411 * t2462 - t2456 * t2665) * t2448) * t2455 - t2375 * t2680;
t2661 = t2456 * t2461;
t2414 = pkin(2) * t2661 - pkin(5) * t2462;
t2674 = t2451 * t2455;
t2601 = pkin(2) * t2674 + t2414 * t2449;
t2741 = 0.1e1 / t2601;
t2698 = t2347 * t2741;
t2423 = t2467 * t2450;
t2378 = t2411 * t2448 + t2423;
t2338 = -(t2375 * t2668 - t2378 * t2456) * t2728 - (t2375 * t2673 + t2378 * t2462) * pkin(5);
t2742 = 0.1e1 / t2601 ^ 2;
t2709 = t2338 * t2742;
t2564 = t2698 * t2709;
t2704 = t2347 ^ 2 * t2742;
t2635 = t2741 * t2704;
t2438 = 0.1e1 / t2461 ^ 2;
t2686 = t2438 * t2455;
t2752 = t2686 * (t2363 * t2635 - 0.2e1 * t2372 * t2564);
t2341 = t2438 * t2704;
t2332 = t2341 - 0.2e1 * t2704;
t2436 = t2461 ^ 2;
t2437 = 0.1e1 / t2461;
t2439 = t2437 / t2436;
t2524 = (0.2e1 * t2436 - 0.1e1) * t2439 * t2564;
t2695 = t2741 * t2437;
t2750 = t2363 * t2695;
t2751 = t2332 * t2750 + 0.2e1 * t2372 * t2524;
t2383 = t2741 * t2742;
t2472 = 0.1e1 / pkin(2);
t2470 = pkin(5) ^ 2;
t2471 = pkin(2) ^ 2;
t2694 = t2741 * t2455;
t2618 = t2437 * t2694;
t2323 = -pkin(5) * t2338 * t2618 + (t2437 * t2470 + t2461 * t2471) * t2698;
t2693 = t2741 * t2472;
t2638 = t2338 * t2693;
t2533 = t2437 * t2449 * t2638;
t2619 = t2741 * t2693;
t2563 = t2347 * t2619;
t2654 = pkin(5) * t2698;
t2598 = t2455 * t2654;
t2710 = t2338 * t2741;
t2311 = (-t2451 * t2323 * t2563 - (-t2455 * t2414 * t2533 + t2451 * (-t2437 * t2598 + t2461 * t2710)) * t2338 * t2619) * t2438;
t2585 = t2311 * t2618;
t2326 = (t2598 - t2710) * t2437;
t2612 = t2449 * t2661;
t2613 = t2449 * t2663;
t2629 = t2741 * t2698;
t2679 = t2449 * t2462;
t2308 = (-(t2451 * t2326 + (pkin(2) * (t2451 * t2638 + t2679 * t2698) * t2436 - (t2338 * t2694 - t2654) * t2612) * t2437) * t2629 + (-t2462 * t2533 + (t2613 + (t2437 - t2461) * t2451) * t2698) * t2709) * t2438;
t2592 = t2308 * t2618;
t2473 = 0.1e1 / pkin(2) ^ 2;
t2335 = t2338 ^ 2;
t2713 = t2335 * t2438;
t2641 = t2473 * t2713;
t2748 = t2363 * t2472 * t2592 + (t2383 * t2641 + t2585) * t2372;
t2569 = t2335 * t2383 * t2439 * t2455;
t2719 = t2311 * t2741;
t2747 = t2308 * t2363 * t2693 - (t2473 * t2569 - t2719) * t2372;
t2722 = t2308 * t2741;
t2314 = (t2323 * t2629 - t2326 * t2709) * t2437;
t2716 = t2314 * t2741;
t2453 = legFrame(2,2);
t2428 = sin(t2453);
t2431 = cos(t2453);
t2412 = -t2428 * t2468 + t2431 * t2469;
t2376 = t2412 * t2450 - t2681;
t2379 = t2412 * t2448 + t2423;
t2458 = sin(qJ(2,2));
t2464 = cos(qJ(2,2));
t2667 = t2451 * t2464;
t2671 = t2451 * t2458;
t2463 = cos(qJ(3,2));
t2727 = pkin(2) * t2463;
t2339 = -(t2376 * t2667 - t2379 * t2458) * t2727 - (t2376 * t2671 + t2379 * t2464) * pkin(5);
t2441 = 0.1e1 / t2463;
t2457 = sin(qJ(3,2));
t2685 = t2441 * t2457;
t2658 = t2458 * t2463;
t2415 = pkin(2) * t2658 - pkin(5) * t2464;
t2672 = t2451 * t2457;
t2600 = pkin(2) * t2672 + t2415 * t2449;
t2743 = 0.1e1 / t2600;
t2616 = t2743 * t2685;
t2678 = t2449 * t2463;
t2348 = ((-t2412 * t2671 - t2464 * t2467) * t2450 - (t2412 * t2464 - t2458 * t2665) * t2448) * t2457 - t2376 * t2678;
t2697 = t2348 * t2743;
t2324 = -pkin(5) * t2339 * t2616 + (t2441 * t2470 + t2463 * t2471) * t2697;
t2653 = pkin(5) * t2697;
t2597 = t2457 * t2653;
t2708 = t2339 * t2743;
t2327 = (t2597 - t2708) * t2441;
t2628 = t2743 * t2697;
t2744 = 0.1e1 / t2600 ^ 2;
t2707 = t2339 * t2744;
t2315 = (t2324 * t2628 - t2327 * t2707) * t2441;
t2715 = t2315 * t2743;
t2454 = legFrame(1,2);
t2429 = sin(t2454);
t2432 = cos(t2454);
t2413 = -t2429 * t2468 + t2432 * t2469;
t2377 = t2413 * t2450 - t2681;
t2380 = t2413 * t2448 + t2423;
t2460 = sin(qJ(2,1));
t2466 = cos(qJ(2,1));
t2666 = t2451 * t2466;
t2669 = t2451 * t2460;
t2465 = cos(qJ(3,1));
t2726 = pkin(2) * t2465;
t2340 = -(t2377 * t2666 - t2380 * t2460) * t2726 - (t2377 * t2669 + t2380 * t2466) * pkin(5);
t2445 = 0.1e1 / t2465;
t2459 = sin(qJ(3,1));
t2683 = t2445 * t2459;
t2655 = t2460 * t2465;
t2416 = pkin(2) * t2655 - pkin(5) * t2466;
t2670 = t2451 * t2459;
t2599 = pkin(2) * t2670 + t2416 * t2449;
t2745 = 0.1e1 / t2599;
t2614 = t2745 * t2683;
t2676 = t2449 * t2465;
t2349 = ((-t2413 * t2669 - t2466 * t2467) * t2450 - (t2413 * t2466 - t2460 * t2665) * t2448) * t2459 - t2377 * t2676;
t2696 = t2349 * t2745;
t2325 = -pkin(5) * t2340 * t2614 + (t2445 * t2470 + t2465 * t2471) * t2696;
t2652 = pkin(5) * t2696;
t2596 = t2459 * t2652;
t2706 = t2340 * t2745;
t2328 = (t2596 - t2706) * t2445;
t2627 = t2745 * t2696;
t2746 = 0.1e1 / t2599 ^ 2;
t2705 = t2340 * t2746;
t2316 = (t2325 * t2627 - t2328 * t2705) * t2445;
t2714 = t2316 * t2745;
t2702 = t2348 ^ 2 * t2744;
t2700 = t2349 ^ 2 * t2746;
t2440 = t2463 ^ 2;
t2442 = 0.1e1 / t2463 ^ 2;
t2690 = t2743 * t2472;
t2637 = t2339 * t2690;
t2532 = t2441 * t2449 * t2637;
t2610 = t2449 * t2658;
t2660 = t2457 * t2458;
t2611 = t2449 * t2660;
t2677 = t2449 * t2464;
t2691 = t2743 * t2457;
t2309 = (-(t2451 * t2327 + (pkin(2) * (t2451 * t2637 + t2677 * t2697) * t2440 - (t2339 * t2691 - t2653) * t2610) * t2441) * t2628 - (t2464 * t2532 + (-t2611 + (-t2441 + t2463) * t2451) * t2697) * t2707) * t2442;
t2367 = (t2448 * t2667 + t2450 * t2458) * t2727 + (t2448 * t2671 - t2450 * t2464) * pkin(5);
t2740 = t2309 * t2367;
t2444 = t2465 ^ 2;
t2446 = 0.1e1 / t2465 ^ 2;
t2687 = t2745 * t2472;
t2636 = t2340 * t2687;
t2531 = t2445 * t2449 * t2636;
t2608 = t2449 * t2655;
t2657 = t2459 * t2460;
t2609 = t2449 * t2657;
t2675 = t2449 * t2466;
t2688 = t2745 * t2459;
t2310 = (-(t2451 * t2328 + (pkin(2) * (t2451 * t2636 + t2675 * t2696) * t2444 - (t2340 * t2688 - t2652) * t2608) * t2445) * t2627 + (-t2466 * t2531 + (t2609 + (t2445 - t2465) * t2451) * t2696) * t2705) * t2446;
t2368 = (t2448 * t2666 + t2450 * t2460) * t2726 + (t2448 * t2669 - t2450 * t2466) * pkin(5);
t2739 = t2310 * t2368;
t2342 = t2442 * t2702;
t2343 = t2446 * t2700;
t2365 = (-t2448 * t2460 + t2450 * t2666) * t2726 + pkin(5) * (t2448 * t2466 + t2450 * t2669);
t2511 = t2451 * t2657 + t2676;
t2656 = t2459 * t2466;
t2374 = t2448 * t2656 + t2511 * t2450;
t2551 = 0.2e1 * t2696 * t2705;
t2631 = t2745 * t2700;
t2682 = t2446 * t2459;
t2738 = (-t2365 * t2631 + t2374 * t2551) * t2682;
t2364 = (-t2448 * t2458 + t2450 * t2667) * t2727 + pkin(5) * (t2448 * t2464 + t2450 * t2671);
t2512 = t2451 * t2660 + t2678;
t2659 = t2457 * t2464;
t2373 = t2448 * t2659 + t2512 * t2450;
t2552 = 0.2e1 * t2697 * t2707;
t2633 = t2743 * t2702;
t2684 = t2442 * t2457;
t2737 = (-t2364 * t2633 + t2373 * t2552) * t2684;
t2386 = t2743 * t2744;
t2556 = t2364 * t2309 * t2690;
t2617 = t2743 * t2690;
t2562 = t2348 * t2617;
t2312 = (-t2451 * t2324 * t2562 - (-t2457 * t2415 * t2532 + t2451 * (-t2441 * t2597 + t2463 * t2708)) * t2339 * t2617) * t2442;
t2584 = t2312 * t2616;
t2336 = t2339 ^ 2;
t2712 = t2336 * t2442;
t2640 = t2473 * t2712;
t2734 = (t2386 * t2640 + t2584) * t2373 + t2556 * t2685;
t2443 = t2441 / t2440;
t2567 = t2336 * t2386 * t2443 * t2457;
t2718 = t2312 * t2743;
t2733 = (t2473 * t2567 - t2718) * t2373 - t2556;
t2389 = t2745 * t2746;
t2553 = t2365 * t2310 * t2687;
t2615 = t2745 * t2687;
t2561 = t2349 * t2615;
t2313 = (-t2451 * t2325 * t2561 - (-t2459 * t2416 * t2531 + t2451 * (-t2445 * t2596 + t2465 * t2706)) * t2340 * t2615) * t2446;
t2583 = t2313 * t2614;
t2337 = t2340 ^ 2;
t2711 = t2337 * t2446;
t2639 = t2473 * t2711;
t2732 = (t2389 * t2639 + t2583) * t2374 + t2553 * t2683;
t2447 = t2445 / t2444;
t2565 = t2337 * t2389 * t2447 * t2459;
t2717 = t2313 * t2745;
t2731 = (t2473 * t2565 - t2717) * t2374 - t2553;
t2369 = t2513 * t2448 - t2450 * t2662;
t2730 = 0.2e1 * t2369;
t2729 = pkin(2) * t2449;
t2725 = MDP(3) * t2449;
t2724 = MDP(4) * t2449;
t2723 = MDP(9) * t2472;
t2721 = t2309 * t2743;
t2720 = t2310 * t2745;
t2692 = t2743 * t2441;
t2689 = t2745 * t2445;
t2664 = t2451 * t2473;
t2651 = t2308 * t2695;
t2650 = t2308 * t2694;
t2648 = t2309 * t2692;
t2647 = t2309 * t2691;
t2646 = t2310 * t2689;
t2645 = t2310 * t2688;
t2644 = t2462 * t2716;
t2643 = t2464 * t2715;
t2642 = t2466 * t2714;
t2634 = t2741 * t2341;
t2632 = t2743 * t2342;
t2630 = t2745 * t2343;
t2624 = t2364 * t2692;
t2623 = t2365 * t2689;
t2366 = (t2448 * t2668 + t2450 * t2456) * t2728 + (t2448 * t2673 - t2450 * t2462) * pkin(5);
t2622 = t2366 * t2695;
t2621 = t2367 * t2692;
t2620 = t2368 * t2689;
t2305 = t2308 * t2679 + t2311 * t2451;
t2329 = t2641 * t2742 + t2341;
t2510 = -0.2e1 * t2338 * t2462 * t2563;
t2570 = t2335 * t2742 * t2664;
t2607 = t2741 * (t2305 * t2461 - t2311 * t2613 + (-t2329 * t2661 + t2510 * t2686) * t2449 - t2570 * t2686);
t2606 = (-t2305 * t2455 - t2311 * t2612 + (t2329 * t2663 + t2437 * t2510) * t2449 - t2437 * t2570) * t2741;
t2306 = t2309 * t2677 + t2312 * t2451;
t2330 = t2640 * t2744 + t2342;
t2509 = -0.2e1 * t2339 * t2464 * t2562;
t2568 = t2336 * t2744 * t2664;
t2605 = (t2306 * t2463 - t2312 * t2611 + (-t2330 * t2658 + t2509 * t2684) * t2449 - t2568 * t2684) * t2743;
t2604 = (-t2306 * t2457 - t2312 * t2610 + (t2330 * t2660 + t2441 * t2509) * t2449 - t2441 * t2568) * t2743;
t2307 = t2310 * t2675 + t2313 * t2451;
t2331 = t2639 * t2746 + t2343;
t2507 = -0.2e1 * t2340 * t2466 * t2561;
t2566 = t2337 * t2746 * t2664;
t2603 = (t2307 * t2465 - t2313 * t2609 + (-t2331 * t2655 + t2507 * t2682) * t2449 - t2566 * t2682) * t2745;
t2602 = (-t2307 * t2459 - t2313 * t2608 + (t2331 * t2657 + t2445 * t2507) * t2449 - t2445 * t2566) * t2745;
t2595 = t2372 * t2651;
t2594 = t2372 * t2650;
t2593 = t2455 ^ 2 * t2651;
t2591 = t2373 * t2648;
t2590 = t2373 * t2647;
t2589 = t2457 ^ 2 * t2648;
t2588 = t2374 * t2646;
t2587 = t2374 * t2645;
t2586 = t2459 ^ 2 * t2646;
t2582 = t2314 * t2622;
t2581 = t2372 * t2644;
t2580 = t2314 * t2456 * t2695;
t2579 = t2437 * t2644;
t2578 = t2315 * t2621;
t2577 = t2373 * t2643;
t2576 = t2315 * t2458 * t2692;
t2575 = t2441 * t2643;
t2574 = t2316 * t2620;
t2573 = t2374 * t2642;
t2572 = t2316 * t2460 * t2689;
t2571 = t2445 * t2642;
t2560 = t2430 * t2750;
t2559 = t2427 * t2750;
t2558 = t2428 * t2624;
t2557 = t2431 * t2624;
t2555 = t2429 * t2623;
t2554 = t2432 * t2623;
t2550 = t2372 * t2593;
t2548 = t2373 * t2589;
t2547 = t2374 * t2586;
t2546 = t2314 * t2560;
t2545 = t2314 * t2559;
t2544 = t2372 * t2580;
t2543 = t2372 * t2579;
t2542 = t2315 * t2558;
t2541 = t2315 * t2557;
t2540 = t2373 * t2576;
t2539 = t2373 * t2575;
t2538 = t2316 * t2555;
t2537 = t2316 * t2554;
t2536 = t2374 * t2572;
t2535 = t2374 * t2571;
t2530 = t2369 * t2579;
t2370 = t2512 * t2448 - t2450 * t2659;
t2529 = t2370 * t2575;
t2371 = t2511 * t2448 - t2450 * t2656;
t2528 = t2371 * t2571;
t2527 = -t2414 * t2451 + t2455 * t2729;
t2526 = -t2415 * t2451 + t2457 * t2729;
t2525 = -t2416 * t2451 + t2459 * t2729;
t2521 = t2427 * t2543;
t2520 = t2428 * t2539;
t2519 = t2429 * t2535;
t2518 = t2430 * t2543;
t2517 = t2431 * t2539;
t2516 = t2432 * t2535;
t2508 = (0.2e1 * t2440 - 0.1e1) * t2443 * t2552;
t2506 = (0.2e1 * t2444 - 0.1e1) * t2447 * t2551;
t2504 = -t2456 * t2722 - t2462 * t2634;
t2503 = -t2456 * t2634 + t2462 * t2722;
t2502 = -t2458 * t2721 - t2464 * t2632;
t2501 = -t2458 * t2632 + t2464 * t2721;
t2500 = -t2460 * t2720 - t2466 * t2630;
t2499 = -t2460 * t2630 + t2466 * t2720;
t2333 = t2342 - 0.2e1 * t2702;
t2490 = t2333 * t2624 + t2373 * t2508;
t2334 = t2343 - 0.2e1 * t2700;
t2489 = t2334 * t2623 + t2374 * t2506;
t2419 = pkin(5) * t2460 + t2466 * t2726;
t2418 = pkin(5) * t2458 + t2464 * t2727;
t2417 = pkin(5) * t2456 + t2462 * t2728;
t2410 = t2608 + t2670;
t2409 = t2451 * t2465 - t2609;
t2408 = t2610 + t2672;
t2407 = t2451 * t2463 - t2611;
t2406 = t2612 + t2674;
t2405 = t2451 * t2461 - t2613;
t2361 = -t2419 * t2448 + t2525 * t2450;
t2360 = -t2418 * t2448 + t2526 * t2450;
t2359 = -t2417 * t2448 + t2527 * t2450;
t2358 = t2419 * t2450 + t2525 * t2448;
t2357 = t2418 * t2450 + t2526 * t2448;
t2356 = t2417 * t2450 + t2527 * t2448;
t2355 = -t2358 * t2429 + t2432 * t2599;
t2354 = t2358 * t2432 + t2429 * t2599;
t2353 = -t2357 * t2428 + t2431 * t2600;
t2352 = t2357 * t2431 + t2428 * t2600;
t2351 = -t2356 * t2427 + t2430 * t2601;
t2350 = t2356 * t2430 + t2427 * t2601;
t1 = [(t2350 * t2716 + t2352 * t2715 + t2354 * t2714) * MDP(1) + (-t2430 * t2595 - t2431 * t2591 - t2432 * t2588) * MDP(2) + (t2503 * t2350 + t2501 * t2352 + t2499 * t2354 - t2516 - t2517 - t2518) * t2725 + (t2504 * t2350 + t2502 * t2352 + t2500 * t2354 + t2430 * t2544 + t2431 * t2540 + t2432 * t2536) * t2724 + (-t2430 * t2550 - t2431 * t2548 - t2432 * t2547 + (t2430 * t2752 - t2431 * t2737 - t2432 * t2738) * t2472) * MDP(5) + (-0.2e1 * t2430 * t2594 - 0.2e1 * t2431 * t2590 - 0.2e1 * t2432 * t2587 + (-t2751 * t2430 - t2490 * t2431 - t2489 * t2432) * t2472) * MDP(6) + (-t2748 * t2430 - t2734 * t2431 - t2732 * t2432) * MDP(7) + (-t2747 * t2430 + t2733 * t2431 + t2731 * t2432) * MDP(8) + (-t2311 * t2560 - t2312 * t2557 - t2313 * t2554) * t2723 + (t2354 * t2603 + t2352 * t2605 + t2350 * t2607 + (-t2405 * t2546 - t2407 * t2541 - t2409 * t2537) * t2472 + (-t2430 * t2581 - t2431 * t2577 - t2432 * t2573) * t2449) * MDP(10) + (t2354 * t2602 + t2352 * t2604 + t2350 * t2606 + (t2406 * t2546 + t2408 * t2541 + t2410 * t2537) * t2472 + (t2455 * t2518 + t2457 * t2517 + t2459 * t2516) * t2449) * MDP(11); (t2351 * t2716 + t2353 * t2715 + t2355 * t2714) * MDP(1) + (t2427 * t2595 + t2428 * t2591 + t2429 * t2588) * MDP(2) + (t2351 * t2503 + t2353 * t2501 + t2355 * t2499 + t2519 + t2520 + t2521) * t2725 + (t2351 * t2504 + t2353 * t2502 + t2355 * t2500 - t2427 * t2544 - t2428 * t2540 - t2429 * t2536) * t2724 + (t2427 * t2550 + t2428 * t2548 + t2429 * t2547 + (-t2427 * t2752 + t2428 * t2737 + t2429 * t2738) * t2472) * MDP(5) + (0.2e1 * t2427 * t2594 + 0.2e1 * t2428 * t2590 + 0.2e1 * t2429 * t2587 + (t2751 * t2427 + t2490 * t2428 + t2489 * t2429) * t2472) * MDP(6) + (t2748 * t2427 + t2734 * t2428 + t2732 * t2429) * MDP(7) + (t2747 * t2427 - t2733 * t2428 - t2731 * t2429) * MDP(8) + (t2311 * t2559 + t2312 * t2558 + t2313 * t2555) * t2723 + (t2355 * t2603 + t2353 * t2605 + t2351 * t2607 + (t2405 * t2545 + t2407 * t2542 + t2409 * t2538) * t2472 + (t2427 * t2581 + t2428 * t2577 + t2429 * t2573) * t2449) * MDP(10) + (t2355 * t2602 + t2353 * t2604 + t2351 * t2606 + (-t2406 * t2545 - t2408 * t2542 - t2410 * t2538) * t2472 + (-t2455 * t2521 - t2457 * t2520 - t2459 * t2519) * t2449) * MDP(11); (t2359 * t2716 + t2360 * t2715 + t2361 * t2714) * MDP(1) + (t2369 * t2651 + t2370 * t2648 + t2371 * t2646) * MDP(2) + (t2359 * t2503 + t2360 * t2501 + t2361 * t2499 + t2528 + t2529 + t2530) * t2725 + (t2359 * t2504 + t2360 * t2502 + t2361 * t2500 - t2369 * t2580 - t2370 * t2576 - t2371 * t2572) * t2724 + (t2369 * t2593 + t2370 * t2589 + t2371 * t2586 + ((-t2368 * t2631 + t2371 * t2551) * t2682 + (-t2367 * t2633 + t2370 * t2552) * t2684 + (-t2366 * t2635 + t2564 * t2730) * t2686) * t2472) * MDP(5) + (t2650 * t2730 + 0.2e1 * t2370 * t2647 + 0.2e1 * t2371 * t2645 + (t2332 * t2622 + t2333 * t2621 + t2334 * t2620 + t2370 * t2508 + t2371 * t2506 + t2524 * t2730) * t2472) * MDP(6) + (t2369 * t2585 + t2370 * t2584 + t2371 * t2583 + (t2369 * t2383 * t2713 + t2370 * t2386 * t2712 + t2371 * t2389 * t2711) * t2473 + (t2366 * t2592 + t2614 * t2739 + t2616 * t2740) * t2472) * MDP(7) + (t2369 * t2719 + t2370 * t2718 + t2371 * t2717 + (-t2369 * t2569 - t2370 * t2567 - t2371 * t2565) * t2473 + (t2366 * t2722 + t2739 * t2745 + t2740 * t2743) * t2472) * MDP(8) + (t2311 * t2622 + t2312 * t2621 + t2313 * t2620) * t2723 + (t2361 * t2603 + t2360 * t2605 + t2359 * t2607 + (t2405 * t2582 + t2407 * t2578 + t2409 * t2574) * t2472 + (t2369 * t2644 + t2370 * t2643 + t2371 * t2642) * t2449) * MDP(10) + (t2361 * t2602 + t2360 * t2604 + t2359 * t2606 + (-t2406 * t2582 - t2408 * t2578 - t2410 * t2574) * t2472 + (-t2455 * t2530 - t2457 * t2529 - t2459 * t2528) * t2449) * MDP(11);];
taucX  = t1;
