% Calculate minimal parameter regressor of inverse dynamics forces for
% P3PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G3A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3PRRRR8V1G3A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G3A0_invdyn_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:16:47
% EndTime: 2020-08-06 17:16:57
% DurationCPUTime: 9.66s
% Computational Cost: add. (33969->434), mult. (88341->867), div. (6471->14), fcn. (86599->22), ass. (0->363)
t1664 = cos(qJ(2,1));
t1658 = sin(qJ(2,1));
t1663 = cos(qJ(3,1));
t1787 = t1658 * t1663;
t1614 = pkin(2) * t1787 - t1664 * pkin(5);
t1644 = sin(pkin(3));
t1646 = cos(pkin(3));
t1657 = sin(qJ(3,1));
t1859 = pkin(2) * t1657;
t1743 = t1614 * t1644 + t1646 * t1859;
t1588 = 0.1e1 / t1743 ^ 2;
t1872 = 0.1e1 / t1743;
t1662 = cos(qJ(2,2));
t1656 = sin(qJ(2,2));
t1661 = cos(qJ(3,2));
t1790 = t1656 * t1661;
t1613 = pkin(2) * t1790 - t1662 * pkin(5);
t1655 = sin(qJ(3,2));
t1860 = pkin(2) * t1655;
t1744 = t1613 * t1644 + t1646 * t1860;
t1586 = 0.1e1 / t1744 ^ 2;
t1871 = 0.1e1 / t1744;
t1660 = cos(qJ(2,3));
t1654 = sin(qJ(2,3));
t1659 = cos(qJ(3,3));
t1793 = t1654 * t1659;
t1612 = pkin(2) * t1793 - t1660 * pkin(5);
t1653 = sin(qJ(3,3));
t1861 = pkin(2) * t1653;
t1745 = t1612 * t1644 + t1646 * t1861;
t1584 = 0.1e1 / t1745 ^ 2;
t1870 = 0.1e1 / t1745;
t1647 = legFrame(3,2);
t1631 = sin(t1647);
t1634 = cos(t1647);
t1666 = xDP(2);
t1667 = xDP(1);
t1607 = -t1631 * t1666 + t1634 * t1667;
t1645 = cos(pkin(6));
t1643 = sin(pkin(6));
t1665 = xDP(3);
t1807 = t1643 * t1665;
t1574 = t1607 * t1645 - t1807;
t1622 = t1665 * t1645;
t1577 = t1643 * t1607 + t1622;
t1800 = t1646 * t1660;
t1803 = t1646 * t1654;
t1858 = pkin(2) * t1659;
t1540 = -(t1574 * t1800 - t1654 * t1577) * t1858 - (t1574 * t1803 + t1660 * t1577) * pkin(5);
t1797 = t1646 * t1665;
t1806 = t1644 * t1659;
t1546 = ((-t1607 * t1803 - t1660 * t1665) * t1645 - (t1660 * t1607 - t1654 * t1797) * t1643) * t1653 - t1574 * t1806;
t1670 = 0.1e1 / pkin(2);
t1821 = t1870 * t1670;
t1760 = t1870 * t1821;
t1737 = t1546 * t1760;
t1708 = t1540 * t1737;
t1637 = 0.1e1 / t1659;
t1835 = t1546 * t1870;
t1783 = pkin(5) * t1835;
t1742 = t1653 * t1783;
t1844 = t1540 * t1870;
t1528 = (t1742 - t1844) * t1637;
t1672 = t1659 ^ 2;
t1638 = 0.1e1 / t1672;
t1650 = xDDP(3);
t1651 = xDDP(2);
t1652 = xDDP(1);
t1756 = t1637 * t1821;
t1707 = t1540 * t1644 * t1756;
t1795 = t1653 * t1654;
t1680 = t1646 * t1795 + t1806;
t1794 = t1653 * t1660;
t1571 = t1643 * t1794 + t1680 * t1645;
t1823 = t1870 * t1637;
t1758 = t1634 * t1823;
t1724 = t1571 * t1758;
t1759 = t1631 * t1823;
t1725 = t1571 * t1759;
t1568 = t1680 * t1643 - t1645 * t1794;
t1763 = t1568 * t1823;
t1769 = t1870 * t1835;
t1796 = t1646 * t1670;
t1822 = t1870 * t1653;
t1843 = t1540 * t1584;
t1486 = t1650 * t1763 + t1651 * t1725 - t1652 * t1724 + (-(t1646 * t1528 + (pkin(2) * (t1644 * t1660 * t1835 + t1796 * t1844) * t1672 - t1644 * (t1540 * t1822 - t1783) * t1793) * t1637) * t1769 + (-t1660 * t1707 + (t1644 * t1795 + (t1637 - t1659) * t1646) * t1835) * t1843) * t1638;
t1852 = t1486 * t1653;
t1864 = t1638 - 0.2e1;
t1474 = t1659 * t1852 - t1864 * t1708;
t1869 = 0.2e1 * t1474;
t1648 = legFrame(2,2);
t1632 = sin(t1648);
t1635 = cos(t1648);
t1608 = -t1632 * t1666 + t1635 * t1667;
t1575 = t1608 * t1645 - t1807;
t1578 = t1643 * t1608 + t1622;
t1799 = t1646 * t1662;
t1802 = t1646 * t1656;
t1857 = pkin(2) * t1661;
t1541 = -(t1575 * t1799 - t1656 * t1578) * t1857 - (t1575 * t1802 + t1662 * t1578) * pkin(5);
t1805 = t1644 * t1661;
t1547 = ((-t1608 * t1802 - t1662 * t1665) * t1645 - (t1662 * t1608 - t1656 * t1797) * t1643) * t1655 - t1575 * t1805;
t1818 = t1871 * t1670;
t1755 = t1871 * t1818;
t1736 = t1547 * t1755;
t1706 = t1541 * t1736;
t1639 = 0.1e1 / t1661;
t1834 = t1547 * t1871;
t1782 = pkin(5) * t1834;
t1741 = t1655 * t1782;
t1842 = t1541 * t1871;
t1529 = (t1741 - t1842) * t1639;
t1673 = t1661 ^ 2;
t1640 = 0.1e1 / t1673;
t1751 = t1639 * t1818;
t1705 = t1541 * t1644 * t1751;
t1792 = t1655 * t1656;
t1679 = t1646 * t1792 + t1805;
t1791 = t1655 * t1662;
t1572 = t1643 * t1791 + t1679 * t1645;
t1820 = t1871 * t1639;
t1753 = t1635 * t1820;
t1722 = t1572 * t1753;
t1754 = t1632 * t1820;
t1723 = t1572 * t1754;
t1569 = t1679 * t1643 - t1645 * t1791;
t1762 = t1569 * t1820;
t1768 = t1871 * t1834;
t1819 = t1871 * t1655;
t1841 = t1541 * t1586;
t1487 = t1650 * t1762 + t1651 * t1723 - t1652 * t1722 + (-(t1646 * t1529 + (pkin(2) * (t1644 * t1662 * t1834 + t1796 * t1842) * t1673 - t1644 * (t1541 * t1819 - t1782) * t1790) * t1639) * t1768 - (t1662 * t1705 + (-t1644 * t1792 + (-t1639 + t1661) * t1646) * t1834) * t1841) * t1640;
t1850 = t1487 * t1655;
t1863 = t1640 - 0.2e1;
t1475 = t1661 * t1850 - t1863 * t1706;
t1868 = 0.2e1 * t1475;
t1649 = legFrame(1,2);
t1633 = sin(t1649);
t1636 = cos(t1649);
t1609 = -t1633 * t1666 + t1636 * t1667;
t1576 = t1609 * t1645 - t1807;
t1579 = t1643 * t1609 + t1622;
t1798 = t1646 * t1664;
t1801 = t1646 * t1658;
t1856 = pkin(2) * t1663;
t1542 = -(t1576 * t1798 - t1658 * t1579) * t1856 - (t1576 * t1801 + t1664 * t1579) * pkin(5);
t1804 = t1644 * t1663;
t1548 = ((-t1609 * t1801 - t1664 * t1665) * t1645 - (t1664 * t1609 - t1658 * t1797) * t1643) * t1657 - t1576 * t1804;
t1815 = t1872 * t1670;
t1750 = t1872 * t1815;
t1735 = t1548 * t1750;
t1704 = t1542 * t1735;
t1641 = 0.1e1 / t1663;
t1833 = t1548 * t1872;
t1781 = pkin(5) * t1833;
t1740 = t1657 * t1781;
t1840 = t1542 * t1872;
t1530 = (t1740 - t1840) * t1641;
t1674 = t1663 ^ 2;
t1642 = 0.1e1 / t1674;
t1746 = t1641 * t1815;
t1703 = t1542 * t1644 * t1746;
t1789 = t1657 * t1658;
t1678 = t1646 * t1789 + t1804;
t1788 = t1657 * t1664;
t1573 = t1643 * t1788 + t1678 * t1645;
t1817 = t1872 * t1641;
t1748 = t1636 * t1817;
t1720 = t1573 * t1748;
t1749 = t1633 * t1817;
t1721 = t1573 * t1749;
t1570 = t1678 * t1643 - t1645 * t1788;
t1761 = t1570 * t1817;
t1767 = t1872 * t1833;
t1816 = t1872 * t1657;
t1839 = t1542 * t1588;
t1488 = t1650 * t1761 + t1651 * t1721 - t1652 * t1720 + (-(t1646 * t1530 + (pkin(2) * (t1644 * t1664 * t1833 + t1796 * t1840) * t1674 - t1644 * (t1542 * t1816 - t1781) * t1787) * t1641) * t1767 + (-t1664 * t1703 + (t1644 * t1789 + (t1641 - t1663) * t1646) * t1833) * t1839) * t1642;
t1848 = t1488 * t1657;
t1862 = t1642 - 0.2e1;
t1476 = t1663 * t1848 - t1862 * t1704;
t1867 = 0.2e1 * t1476;
t1562 = pkin(5) * (t1643 * t1660 + t1645 * t1803) + (-t1643 * t1654 + t1645 * t1800) * t1858;
t1866 = t1562 * t1634;
t1865 = t1562 * t1631;
t1855 = t1643 * g(3);
t1630 = t1645 * g(3);
t1854 = MDP(9) * t1670;
t1853 = t1486 * t1870;
t1851 = t1487 * t1871;
t1849 = t1488 * t1872;
t1713 = g(1) * t1634 - g(2) * t1631;
t1604 = t1713 * t1645 - t1855;
t1668 = pkin(5) ^ 2;
t1669 = pkin(2) ^ 2;
t1757 = t1637 * t1822;
t1525 = -pkin(5) * t1540 * t1757 + (t1637 * t1668 + t1659 * t1669) * t1835;
t1615 = pkin(5) * t1654 + t1660 * t1858;
t1687 = -t1612 * t1646 + t1644 * t1861;
t1555 = t1645 * t1615 + t1687 * t1643;
t1549 = t1555 * t1634 + t1631 * t1745;
t1550 = -t1555 * t1631 + t1634 * t1745;
t1558 = -t1643 * t1615 + t1687 * t1645;
t1516 = (t1549 * t1652 + t1550 * t1651 + t1558 * t1650) * t1870 + (t1525 * t1769 - t1528 * t1843) * t1637;
t1808 = t1643 * t1646;
t1610 = t1644 * g(1) + g(2) * t1808;
t1611 = g(1) * t1808 - t1644 * g(2);
t1618 = t1646 * t1630;
t1677 = t1516 * t1644 - t1610 * t1631 + t1611 * t1634 + t1618;
t1501 = t1654 * t1604 + t1677 * t1660;
t1847 = t1501 * t1870;
t1712 = g(1) * t1635 - g(2) * t1632;
t1605 = t1712 * t1645 - t1855;
t1752 = t1639 * t1819;
t1526 = -pkin(5) * t1541 * t1752 + (t1639 * t1668 + t1661 * t1669) * t1834;
t1616 = pkin(5) * t1656 + t1662 * t1857;
t1686 = -t1613 * t1646 + t1644 * t1860;
t1556 = t1645 * t1616 + t1686 * t1643;
t1551 = t1556 * t1635 + t1632 * t1744;
t1552 = -t1556 * t1632 + t1635 * t1744;
t1559 = -t1643 * t1616 + t1686 * t1645;
t1517 = (t1551 * t1652 + t1552 * t1651 + t1559 * t1650) * t1871 + (t1526 * t1768 - t1529 * t1841) * t1639;
t1676 = t1517 * t1644 - t1610 * t1632 + t1611 * t1635 + t1618;
t1502 = t1656 * t1605 + t1676 * t1662;
t1846 = t1502 * t1871;
t1711 = g(1) * t1636 - g(2) * t1633;
t1606 = t1711 * t1645 - t1855;
t1747 = t1641 * t1816;
t1527 = -pkin(5) * t1542 * t1747 + (t1641 * t1668 + t1663 * t1669) * t1833;
t1617 = pkin(5) * t1658 + t1664 * t1856;
t1685 = -t1614 * t1646 + t1644 * t1859;
t1557 = t1645 * t1617 + t1685 * t1643;
t1553 = t1557 * t1636 + t1633 * t1743;
t1554 = -t1557 * t1633 + t1636 * t1743;
t1560 = -t1643 * t1617 + t1685 * t1645;
t1518 = (t1553 * t1652 + t1554 * t1651 + t1560 * t1650) * t1872 + (t1527 * t1767 - t1530 * t1839) * t1641;
t1675 = t1518 * t1644 - t1610 * t1633 + t1611 * t1636 + t1618;
t1503 = t1658 * t1606 + t1675 * t1664;
t1845 = t1503 * t1872;
t1838 = t1546 ^ 2 * t1584;
t1837 = t1547 ^ 2 * t1586;
t1836 = t1548 ^ 2 * t1588;
t1832 = t1549 * t1870;
t1831 = t1550 * t1870;
t1830 = t1551 * t1871;
t1829 = t1552 * t1871;
t1828 = t1553 * t1872;
t1827 = t1554 * t1872;
t1826 = t1558 * t1870;
t1825 = t1559 * t1871;
t1824 = t1560 * t1872;
t1565 = (t1643 * t1800 + t1645 * t1654) * t1858 + (t1643 * t1803 - t1645 * t1660) * pkin(5);
t1498 = (-t1646 * t1525 * t1737 - (-t1653 * t1612 * t1707 + t1646 * (-t1637 * t1742 + t1659 * t1844)) * t1540 * t1760) * t1638 + (t1565 * t1650 + (t1631 * t1651 - t1634 * t1652) * t1562) * t1756;
t1690 = 0.2e1 * t1708;
t1489 = t1638 * t1660 * t1690 + t1654 * t1498;
t1671 = 0.1e1 / pkin(2) ^ 2;
t1775 = t1540 ^ 2 * t1584 * t1671;
t1492 = -t1638 * t1653 * t1775 + t1498 * t1659;
t1786 = t1660 * t1486;
t1693 = -(t1775 + t1838) * t1638 * t1654 + t1786;
t1814 = t1870 * ((-t1653 * t1489 + t1693 * t1659) * t1644 + t1646 * t1492);
t1495 = t1498 * t1653 + t1637 * t1775;
t1813 = t1870 * ((-t1659 * t1489 - t1693 * t1653) * t1644 - t1646 * t1495);
t1563 = (-t1643 * t1656 + t1645 * t1799) * t1857 + pkin(5) * (t1643 * t1662 + t1645 * t1802);
t1566 = (t1643 * t1799 + t1645 * t1656) * t1857 + (t1643 * t1802 - t1645 * t1662) * pkin(5);
t1499 = (-t1646 * t1526 * t1736 - (-t1655 * t1613 * t1705 + t1646 * (-t1639 * t1741 + t1661 * t1842)) * t1541 * t1755) * t1640 + (t1566 * t1650 + (t1632 * t1651 - t1635 * t1652) * t1563) * t1751;
t1689 = 0.2e1 * t1706;
t1490 = t1640 * t1662 * t1689 + t1656 * t1499;
t1774 = t1541 ^ 2 * t1586 * t1671;
t1493 = -t1640 * t1655 * t1774 + t1499 * t1661;
t1785 = t1662 * t1487;
t1692 = -(t1774 + t1837) * t1640 * t1656 + t1785;
t1812 = t1871 * ((-t1655 * t1490 + t1692 * t1661) * t1644 + t1646 * t1493);
t1496 = t1499 * t1655 + t1639 * t1774;
t1811 = t1871 * ((-t1661 * t1490 - t1692 * t1655) * t1644 - t1646 * t1496);
t1564 = (-t1643 * t1658 + t1645 * t1798) * t1856 + pkin(5) * (t1643 * t1664 + t1645 * t1801);
t1567 = (t1643 * t1798 + t1645 * t1658) * t1856 + (t1643 * t1801 - t1645 * t1664) * pkin(5);
t1500 = (-t1646 * t1527 * t1735 - (-t1657 * t1614 * t1703 + t1646 * (-t1641 * t1740 + t1663 * t1840)) * t1542 * t1750) * t1642 + (t1567 * t1650 + (t1633 * t1651 - t1636 * t1652) * t1564) * t1746;
t1688 = 0.2e1 * t1704;
t1491 = t1642 * t1664 * t1688 + t1658 * t1500;
t1773 = t1542 ^ 2 * t1588 * t1671;
t1494 = -t1642 * t1657 * t1773 + t1500 * t1663;
t1784 = t1664 * t1488;
t1691 = -(t1773 + t1836) * t1642 * t1658 + t1784;
t1810 = t1872 * ((-t1657 * t1491 + t1691 * t1663) * t1644 + t1646 * t1494);
t1497 = t1500 * t1657 + t1641 * t1773;
t1809 = t1872 * ((-t1663 * t1491 - t1691 * t1657) * t1644 - t1646 * t1497);
t1780 = t1563 * t1851;
t1779 = t1564 * t1849;
t1778 = t1571 * t1847;
t1777 = t1572 * t1846;
t1776 = t1573 * t1845;
t1772 = t1638 * t1838;
t1771 = t1640 * t1837;
t1770 = t1642 * t1836;
t1766 = t1565 * t1823;
t1765 = t1566 * t1820;
t1764 = t1567 * t1817;
t1739 = t1487 * t1752;
t1738 = t1488 * t1747;
t1734 = t1562 * t1758;
t1733 = t1562 * t1759;
t1732 = t1563 * t1754;
t1731 = t1563 * t1753;
t1730 = t1564 * t1749;
t1729 = t1564 * t1748;
t1728 = t1501 * t1763;
t1727 = t1502 * t1762;
t1726 = t1503 * t1761;
t1719 = t1631 * t1778;
t1718 = t1632 * t1777;
t1717 = t1633 * t1776;
t1716 = t1634 * t1778;
t1715 = t1635 * t1777;
t1714 = t1636 * t1776;
t1710 = t1563 * t1739;
t1709 = t1564 * t1738;
t1702 = t1772 * t1822;
t1701 = t1771 * t1819;
t1700 = t1770 * t1816;
t1699 = t1637 * t1719;
t1698 = t1639 * t1718;
t1697 = t1641 * t1717;
t1696 = t1637 * t1716;
t1695 = t1639 * t1715;
t1694 = t1641 * t1714;
t1684 = t1563 * t1701;
t1683 = t1564 * t1700;
t1603 = t1711 * t1643 + t1630;
t1602 = t1712 * t1643 + t1630;
t1601 = t1713 * t1643 + t1630;
t1582 = t1664 * t1606;
t1581 = t1662 * t1605;
t1580 = t1660 * t1604;
t1536 = t1862 * t1836;
t1535 = t1863 * t1837;
t1534 = t1864 * t1838;
t1515 = -t1633 * g(1) - t1636 * g(2) + t1518;
t1514 = -t1632 * g(1) - t1635 * g(2) + t1517;
t1513 = -t1631 * g(1) - t1634 * g(2) + t1516;
t1512 = -t1515 * t1646 + t1644 * t1603;
t1511 = -t1514 * t1646 + t1644 * t1602;
t1510 = -t1513 * t1646 + t1644 * t1601;
t1509 = t1582 + (-t1515 * t1644 - t1603 * t1646) * t1658;
t1508 = t1581 + (-t1514 * t1644 - t1602 * t1646) * t1656;
t1507 = t1580 + (-t1513 * t1644 - t1601 * t1646) * t1654;
t1506 = -t1675 * t1658 + t1582;
t1505 = -t1676 * t1656 + t1581;
t1504 = -t1677 * t1654 + t1580;
t1485 = t1656 * t1487 + t1662 * t1771;
t1484 = t1656 * t1771 - t1785;
t1483 = t1658 * t1488 + t1664 * t1770;
t1482 = t1654 * t1486 + t1660 * t1772;
t1481 = t1658 * t1770 - t1784;
t1480 = t1654 * t1772 - t1786;
t1479 = (t1641 * t1688 + t1848) * t1657;
t1478 = (t1639 * t1689 + t1850) * t1655;
t1477 = (t1637 * t1690 + t1852) * t1653;
t1473 = t1509 * t1663 + t1512 * t1657;
t1472 = t1509 * t1657 - t1663 * t1512;
t1471 = t1508 * t1661 + t1511 * t1655;
t1470 = t1508 * t1655 - t1661 * t1511;
t1469 = t1507 * t1659 + t1510 * t1653;
t1468 = t1507 * t1653 - t1659 * t1510;
t1 = [(t1513 * t1832 + t1514 * t1830 + t1515 * t1828) * MDP(1) + (-t1486 * t1724 - t1487 * t1722 - t1488 * t1720) * MDP(2) + (-t1696 - t1695 - t1694 + (-t1480 * t1832 - t1481 * t1828 - t1484 * t1830) * t1644) * MDP(3) + (-t1504 * t1724 - t1505 * t1722 - t1506 * t1720 + (-t1482 * t1832 - t1483 * t1828 - t1485 * t1830) * t1644) * MDP(4) + (-t1477 * t1724 - t1478 * t1722 - t1479 * t1720 + (t1635 * t1684 + t1636 * t1683 + t1702 * t1866) * t1670) * MDP(5) + ((-t1534 * t1734 - t1535 * t1731 - t1536 * t1729) * t1670 - 0.2e1 * t1474 * t1724 - 0.2e1 * t1475 * t1722 - 0.2e1 * t1476 * t1720) * MDP(6) + (-t1495 * t1724 - t1496 * t1722 - t1497 * t1720 + (-t1635 * t1710 - t1636 * t1709 - t1734 * t1852) * t1670) * MDP(7) + (-t1492 * t1724 - t1493 * t1722 - t1494 * t1720 + (-t1635 * t1780 - t1636 * t1779 - t1853 * t1866) * t1670) * MDP(8) + (-t1498 * t1734 - t1499 * t1731 - t1500 * t1729) * t1854 + (-t1716 - t1715 - t1714 + t1549 * t1814 + t1551 * t1812 + t1553 * t1810 + (-t1468 * t1734 - t1470 * t1731 - t1472 * t1729) * t1670) * MDP(10) + (t1653 * t1696 + t1655 * t1695 + t1657 * t1694 + t1549 * t1813 + t1551 * t1811 + t1553 * t1809 + (-t1469 * t1734 - t1471 * t1731 - t1473 * t1729) * t1670) * MDP(11) + (t1652 - g(1)) * MDP(12); (t1513 * t1831 + t1514 * t1829 + t1515 * t1827) * MDP(1) + (t1486 * t1725 + t1487 * t1723 + t1488 * t1721) * MDP(2) + (t1699 + t1698 + t1697 + (-t1480 * t1831 - t1481 * t1827 - t1484 * t1829) * t1644) * MDP(3) + (t1504 * t1725 + t1505 * t1723 + t1506 * t1721 + (-t1482 * t1831 - t1483 * t1827 - t1485 * t1829) * t1644) * MDP(4) + (t1477 * t1725 + t1478 * t1723 + t1479 * t1721 + (-t1632 * t1684 - t1633 * t1683 - t1702 * t1865) * t1670) * MDP(5) + ((t1534 * t1733 + t1535 * t1732 + t1536 * t1730) * t1670 + t1725 * t1869 + t1723 * t1868 + t1721 * t1867) * MDP(6) + (t1495 * t1725 + t1496 * t1723 + t1497 * t1721 + (t1632 * t1710 + t1633 * t1709 + t1733 * t1852) * t1670) * MDP(7) + (t1492 * t1725 + t1493 * t1723 + t1494 * t1721 + (t1632 * t1780 + t1633 * t1779 + t1853 * t1865) * t1670) * MDP(8) + (t1498 * t1733 + t1499 * t1732 + t1500 * t1730) * t1854 + (t1719 + t1718 + t1717 + t1550 * t1814 + t1552 * t1812 + t1554 * t1810 + (t1468 * t1733 + t1470 * t1732 + t1472 * t1730) * t1670) * MDP(10) + (-t1653 * t1699 - t1655 * t1698 - t1657 * t1697 + t1550 * t1813 + t1552 * t1811 + t1554 * t1809 + (t1469 * t1733 + t1471 * t1732 + t1473 * t1730) * t1670) * MDP(11) + (t1651 - g(2)) * MDP(12); (t1513 * t1826 + t1514 * t1825 + t1515 * t1824) * MDP(1) + (t1486 * t1763 + t1487 * t1762 + t1488 * t1761) * MDP(2) + (t1728 + t1727 + t1726 + (-t1480 * t1826 - t1481 * t1824 - t1484 * t1825) * t1644) * MDP(3) + (t1504 * t1763 + t1505 * t1762 + t1506 * t1761 + (-t1482 * t1826 - t1483 * t1824 - t1485 * t1825) * t1644) * MDP(4) + (t1477 * t1763 + t1478 * t1762 + t1479 * t1761 + (-t1565 * t1702 - t1566 * t1701 - t1567 * t1700) * t1670) * MDP(5) + ((t1534 * t1766 + t1535 * t1765 + t1536 * t1764) * t1670 + t1763 * t1869 + t1762 * t1868 + t1761 * t1867) * MDP(6) + (t1495 * t1763 + t1496 * t1762 + t1497 * t1761 + (t1486 * t1565 * t1757 + t1566 * t1739 + t1567 * t1738) * t1670) * MDP(7) + (t1492 * t1763 + t1493 * t1762 + t1494 * t1761 + (t1565 * t1853 + t1566 * t1851 + t1567 * t1849) * t1670) * MDP(8) + (t1498 * t1766 + t1499 * t1765 + t1500 * t1764) * t1854 + (t1558 * t1814 + t1559 * t1812 + t1560 * t1810 + t1568 * t1847 + t1569 * t1846 + t1570 * t1845 + (t1468 * t1766 + t1470 * t1765 + t1472 * t1764) * t1670) * MDP(10) + (-t1653 * t1728 - t1655 * t1727 - t1657 * t1726 + t1558 * t1813 + t1559 * t1811 + t1560 * t1809 + (t1469 * t1766 + t1471 * t1765 + t1473 * t1764) * t1670) * MDP(11) + (t1650 - g(3)) * MDP(12);];
tauX  = t1;
