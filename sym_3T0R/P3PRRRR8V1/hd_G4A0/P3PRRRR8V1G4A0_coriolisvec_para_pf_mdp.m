% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V1G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G4A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:27
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:26:58
% EndTime: 2020-08-06 17:27:15
% DurationCPUTime: 16.26s
% Computational Cost: add. (80955->495), mult. (207993->1101), div. (5058->23), fcn. (207189->34), ass. (0->475)
t3174 = legFrame(3,1);
t3137 = sin(t3174);
t3143 = cos(t3174);
t3177 = legFrame(3,2);
t3146 = sin(t3177);
t3192 = xDP(3);
t3193 = xDP(2);
t3149 = cos(t3177);
t3194 = xDP(1);
t3405 = t3149 * t3194;
t3075 = t3405 + (t3137 * t3193 - t3143 * t3192) * t3146;
t3114 = t3137 * t3192 + t3143 * t3193;
t3167 = sin(pkin(6));
t3169 = cos(pkin(6));
t3051 = t3075 * t3169 + t3114 * t3167;
t3171 = legFrame(3,3);
t3134 = sin(t3171);
t3140 = cos(t3171);
t3228 = t3075 * t3167 - t3114 * t3169;
t3027 = t3051 * t3140 - t3134 * t3228;
t3181 = sin(qJ(2,3));
t3170 = cos(pkin(3));
t3380 = t3170 * t3193;
t3308 = t3181 * t3380;
t3381 = t3170 * t3192;
t3309 = t3181 * t3381;
t3187 = cos(qJ(2,3));
t3371 = t3187 * t3193;
t3372 = t3187 * t3192;
t3379 = t3170 * t3194;
t3045 = (t3146 * t3309 + t3371) * t3143 + (-t3146 * t3308 + t3372) * t3137 - t3181 * t3149 * t3379;
t3048 = (-t3146 * t3372 + t3308) * t3143 + (t3146 * t3371 + t3309) * t3137 + t3187 * t3405;
t3180 = sin(qJ(3,3));
t3168 = sin(pkin(3));
t3186 = cos(qJ(3,3));
t3396 = t3168 * t3186;
t3003 = ((t3045 * t3169 - t3048 * t3167) * t3140 - (t3045 * t3167 + t3048 * t3169) * t3134) * t3180 - t3027 * t3396;
t3000 = t3003 ^ 2;
t3377 = t3181 * t3186;
t3123 = pkin(2) * t3377 - pkin(5) * t3187;
t3390 = t3170 * t3180;
t3099 = pkin(2) * t3390 + t3123 * t3168;
t3091 = 0.1e1 / t3099 ^ 2;
t3475 = t3000 * t3091;
t3175 = legFrame(2,1);
t3138 = sin(t3175);
t3144 = cos(t3175);
t3178 = legFrame(2,2);
t3147 = sin(t3178);
t3150 = cos(t3178);
t3404 = t3150 * t3194;
t3076 = t3404 + (t3138 * t3193 - t3144 * t3192) * t3147;
t3115 = t3138 * t3192 + t3144 * t3193;
t3052 = t3076 * t3169 + t3115 * t3167;
t3172 = legFrame(2,3);
t3135 = sin(t3172);
t3141 = cos(t3172);
t3227 = t3076 * t3167 - t3115 * t3169;
t3028 = t3052 * t3141 - t3135 * t3227;
t3183 = sin(qJ(2,2));
t3306 = t3183 * t3380;
t3307 = t3183 * t3381;
t3189 = cos(qJ(2,2));
t3369 = t3189 * t3193;
t3370 = t3189 * t3192;
t3046 = (t3147 * t3307 + t3369) * t3144 + (-t3147 * t3306 + t3370) * t3138 - t3183 * t3150 * t3379;
t3049 = (-t3147 * t3370 + t3306) * t3144 + (t3147 * t3369 + t3307) * t3138 + t3189 * t3404;
t3182 = sin(qJ(3,2));
t3188 = cos(qJ(3,2));
t3394 = t3168 * t3188;
t3004 = ((t3046 * t3169 - t3049 * t3167) * t3141 - (t3046 * t3167 + t3049 * t3169) * t3135) * t3182 - t3028 * t3394;
t3001 = t3004 ^ 2;
t3375 = t3183 * t3188;
t3124 = pkin(2) * t3375 - pkin(5) * t3189;
t3388 = t3170 * t3182;
t3100 = pkin(2) * t3388 + t3124 * t3168;
t3094 = 0.1e1 / t3100 ^ 2;
t3474 = t3001 * t3094;
t3176 = legFrame(1,1);
t3139 = sin(t3176);
t3145 = cos(t3176);
t3179 = legFrame(1,2);
t3148 = sin(t3179);
t3151 = cos(t3179);
t3403 = t3151 * t3194;
t3077 = t3403 + (t3139 * t3193 - t3145 * t3192) * t3148;
t3116 = t3139 * t3192 + t3145 * t3193;
t3053 = t3077 * t3169 + t3116 * t3167;
t3173 = legFrame(1,3);
t3136 = sin(t3173);
t3142 = cos(t3173);
t3226 = t3077 * t3167 - t3116 * t3169;
t3029 = t3053 * t3142 - t3136 * t3226;
t3185 = sin(qJ(2,1));
t3304 = t3185 * t3380;
t3305 = t3185 * t3381;
t3191 = cos(qJ(2,1));
t3367 = t3191 * t3193;
t3368 = t3191 * t3192;
t3047 = (t3148 * t3305 + t3367) * t3145 + (-t3148 * t3304 + t3368) * t3139 - t3185 * t3151 * t3379;
t3050 = (-t3148 * t3368 + t3304) * t3145 + (t3148 * t3367 + t3305) * t3139 + t3191 * t3403;
t3184 = sin(qJ(3,1));
t3190 = cos(qJ(3,1));
t3392 = t3168 * t3190;
t3005 = ((t3047 * t3169 - t3050 * t3167) * t3142 - (t3047 * t3167 + t3050 * t3169) * t3136) * t3184 - t3029 * t3392;
t3002 = t3005 ^ 2;
t3373 = t3185 * t3190;
t3125 = pkin(2) * t3373 - pkin(5) * t3191;
t3386 = t3170 * t3184;
t3101 = pkin(2) * t3386 + t3125 * t3168;
t3097 = 0.1e1 / t3101 ^ 2;
t3473 = t3002 * t3097;
t3157 = 0.1e1 / t3186 ^ 2;
t2997 = t3157 * t3475;
t3161 = 0.1e1 / t3188 ^ 2;
t2998 = t3161 * t3474;
t3165 = 0.1e1 / t3190 ^ 2;
t2999 = t3165 * t3473;
t3164 = 0.1e1 / t3190;
t3310 = t3168 * t3373;
t3122 = t3310 + t3386;
t3391 = t3168 * t3191;
t3089 = pkin(2) * t3122 - pkin(5) * t3391;
t3470 = 0.1e1 / t3089;
t3416 = t3470 * t3164;
t3160 = 0.1e1 / t3188;
t3312 = t3168 * t3375;
t3120 = t3312 + t3388;
t3393 = t3168 * t3189;
t3088 = pkin(2) * t3120 - pkin(5) * t3393;
t3471 = 0.1e1 / t3088;
t3418 = t3471 * t3160;
t3156 = 0.1e1 / t3186;
t3314 = t3168 * t3377;
t3118 = t3314 + t3390;
t3395 = t3168 * t3187;
t3087 = pkin(2) * t3118 - pkin(5) * t3395;
t3472 = 0.1e1 / t3087;
t3420 = t3472 * t3156;
t3090 = 0.1e1 / t3099;
t3093 = 0.1e1 / t3100;
t3096 = 0.1e1 / t3101;
t3389 = t3170 * t3181;
t3109 = t3167 * t3187 + t3169 * t3389;
t3112 = -t3167 * t3389 + t3169 * t3187;
t3072 = t3109 * t3140 + t3112 * t3134;
t3105 = -t3134 * t3167 + t3140 * t3169;
t3042 = t3072 * t3180 + t3105 * t3396;
t3469 = -0.2e1 * t3042;
t3387 = t3170 * t3183;
t3110 = t3167 * t3189 + t3169 * t3387;
t3113 = -t3167 * t3387 + t3169 * t3189;
t3073 = t3110 * t3141 + t3113 * t3135;
t3106 = -t3135 * t3167 + t3141 * t3169;
t3043 = t3073 * t3182 + t3106 * t3394;
t3468 = -0.2e1 * t3043;
t3385 = t3170 * t3185;
t3108 = t3167 * t3385 - t3169 * t3191;
t3111 = t3167 * t3191 + t3169 * t3385;
t3074 = -t3108 * t3136 + t3111 * t3142;
t3107 = -t3136 * t3167 + t3142 * t3169;
t3044 = t3074 * t3184 + t3107 * t3392;
t3467 = -0.2e1 * t3044;
t3466 = pkin(2) * t3168;
t3465 = pkin(2) * t3186;
t3464 = pkin(2) * t3188;
t3463 = pkin(2) * t3190;
t3462 = MDP(3) * t3168;
t3461 = MDP(4) * t3168;
t3197 = 0.1e1 / pkin(2);
t3460 = MDP(9) * t3197;
t3429 = t3003 * t3090;
t3357 = pkin(5) * t3429;
t3300 = t3180 * t3357;
t3030 = t3051 * t3134 + t3140 * t3228;
t3384 = t3170 * t3187;
t2994 = -(t3027 * t3384 - t3030 * t3181) * t3465 - (t3027 * t3389 + t3030 * t3187) * pkin(5);
t3437 = t2994 * t3472;
t2982 = (t3300 - t3437) * t3156;
t3155 = t3186 ^ 2;
t3419 = t3472 * t3197;
t3330 = t2994 * t3419;
t3236 = t3156 * t3168 * t3330;
t3378 = t3180 * t3181;
t3315 = t3168 * t3378;
t2964 = (-(t3170 * t2982 + (pkin(2) * (t3170 * t3330 + t3395 * t3429) * t3155 - (t3180 * t3437 - t3357) * t3314) * t3156) * t3429 - (t3187 * t3236 + (-t3315 + (-t3156 + t3186) * t3170) * t3429) * t3437) * t3472 * t3157;
t3459 = t2964 * t3472;
t3458 = t2964 * t3090;
t3457 = t2964 * t3180;
t3428 = t3004 * t3093;
t3356 = pkin(5) * t3428;
t3299 = t3182 * t3356;
t3031 = t3052 * t3135 + t3141 * t3227;
t3383 = t3170 * t3189;
t2995 = -(t3028 * t3383 - t3031 * t3183) * t3464 - (t3028 * t3387 + t3031 * t3189) * pkin(5);
t3435 = t2995 * t3471;
t2983 = (t3299 - t3435) * t3160;
t3159 = t3188 ^ 2;
t3417 = t3471 * t3197;
t3329 = t2995 * t3417;
t3234 = t3160 * t3168 * t3329;
t3376 = t3182 * t3183;
t3313 = t3168 * t3376;
t2965 = (-(t3170 * t2983 + (pkin(2) * (t3170 * t3329 + t3393 * t3428) * t3159 - (t3182 * t3435 - t3356) * t3312) * t3160) * t3428 - (t3189 * t3234 + (-t3313 + (-t3160 + t3188) * t3170) * t3428) * t3435) * t3471 * t3161;
t3456 = t2965 * t3471;
t3455 = t2965 * t3093;
t3454 = t2965 * t3182;
t3427 = t3005 * t3096;
t3355 = pkin(5) * t3427;
t3298 = t3184 * t3355;
t3032 = t3053 * t3136 + t3142 * t3226;
t3382 = t3170 * t3191;
t2996 = -(t3029 * t3382 - t3032 * t3185) * t3463 - (t3029 * t3385 + t3032 * t3191) * pkin(5);
t3433 = t2996 * t3470;
t2984 = (t3298 - t3433) * t3164;
t3163 = t3190 ^ 2;
t3415 = t3470 * t3197;
t3328 = t2996 * t3415;
t3232 = t3164 * t3168 * t3328;
t3374 = t3184 * t3185;
t3311 = t3168 * t3374;
t2966 = (-(t3170 * t2984 + (pkin(2) * (t3170 * t3328 + t3391 * t3427) * t3163 - (t3184 * t3433 - t3355) * t3310) * t3164) * t3427 - (t3191 * t3232 + (-t3311 + (-t3164 + t3190) * t3170) * t3427) * t3433) * t3470 * t3165;
t3453 = t2966 * t3470;
t3452 = t2966 * t3096;
t3451 = t2966 * t3184;
t3195 = pkin(5) ^ 2;
t3196 = pkin(2) ^ 2;
t3402 = t3156 * t3180;
t3320 = t3472 * t3402;
t2979 = -pkin(5) * t2994 * t3320 + (t3156 * t3195 + t3186 * t3196) * t3429;
t3321 = t3090 * t3419;
t3267 = t3003 * t3321;
t2967 = (-t3170 * t2979 * t3267 - (-t3180 * t3123 * t3236 + t3170 * (-t3156 * t3300 + t3186 * t3437)) * t2994 * t3321) * t3157;
t3450 = t2967 * t3090;
t3400 = t3160 * t3182;
t3318 = t3471 * t3400;
t2980 = -pkin(5) * t2995 * t3318 + (t3160 * t3195 + t3188 * t3196) * t3428;
t3319 = t3093 * t3417;
t3266 = t3004 * t3319;
t2968 = (-t3170 * t2980 * t3266 - (-t3182 * t3124 * t3234 + t3170 * (-t3160 * t3299 + t3188 * t3435)) * t2995 * t3319) * t3161;
t3449 = t2968 * t3093;
t3398 = t3164 * t3184;
t3316 = t3470 * t3398;
t2981 = -pkin(5) * t2996 * t3316 + (t3164 * t3195 + t3190 * t3196) * t3427;
t3317 = t3096 * t3415;
t3265 = t3005 * t3317;
t2969 = (-t3170 * t2981 * t3265 - (-t3184 * t3125 * t3232 + t3170 * (-t3164 * t3298 + t3190 * t3433)) * t2996 * t3317) * t3165;
t3448 = t2969 * t3096;
t2970 = (-t2979 * t3429 + t2982 * t3437) * t3420;
t3447 = t2970 * t3090;
t2971 = (-t2980 * t3428 + t2983 * t3435) * t3418;
t3446 = t2971 * t3093;
t2972 = (-t2981 * t3427 + t2984 * t3433) * t3416;
t3445 = t2972 * t3096;
t3444 = (t2997 - 0.2e1 * t3475) * t3156;
t3443 = (t2998 - 0.2e1 * t3474) * t3160;
t3442 = (t2999 - 0.2e1 * t3473) * t3164;
t3441 = t2994 ^ 2 / t3087 ^ 2;
t3440 = t2995 ^ 2 / t3088 ^ 2;
t3439 = t2996 ^ 2 / t3089 ^ 2;
t3438 = t2994 * t3003;
t3436 = t2995 * t3004;
t3434 = t2996 * t3005;
t3426 = t3042 * t3090;
t3425 = t3042 * t3149;
t3424 = t3043 * t3093;
t3423 = t3043 * t3150;
t3422 = t3044 * t3096;
t3421 = t3044 * t3151;
t3414 = t3090 * t3156;
t3413 = t3093 * t3160;
t3412 = t3096 * t3164;
t3411 = t3137 * t3146;
t3410 = t3138 * t3147;
t3409 = t3139 * t3148;
t3408 = t3143 * t3146;
t3407 = t3144 * t3147;
t3406 = t3145 * t3148;
t3401 = t3157 * t3180;
t3399 = t3161 * t3182;
t3397 = t3165 * t3184;
t2961 = t2964 * t3395 + t2967 * t3170;
t3198 = 0.1e1 / pkin(2) ^ 2;
t3335 = t3198 * t3441;
t3275 = t3157 * t3335;
t2985 = t2997 + t3275;
t3216 = -0.2e1 * t2994 * t3187 * t3267;
t3274 = t3180 * t3335;
t3366 = t2961 * t3186 - t2967 * t3315 + (-t2985 * t3377 + t3216 * t3401) * t3168 - t3170 * t3157 * t3274;
t3365 = -t2961 * t3180 - t2967 * t3314 + (t2985 * t3378 + t3156 * t3216) * t3168 - t3156 * t3170 * t3335;
t2962 = t2965 * t3393 + t2968 * t3170;
t3333 = t3198 * t3440;
t3272 = t3161 * t3333;
t2986 = t2998 + t3272;
t3215 = -0.2e1 * t2995 * t3189 * t3266;
t3271 = t3182 * t3333;
t3364 = t2962 * t3188 - t2968 * t3313 + (-t2986 * t3375 + t3215 * t3399) * t3168 - t3170 * t3161 * t3271;
t3363 = -t2962 * t3182 - t2968 * t3312 + (t2986 * t3376 + t3160 * t3215) * t3168 - t3160 * t3170 * t3333;
t2963 = t2966 * t3391 + t2969 * t3170;
t3331 = t3198 * t3439;
t3269 = t3165 * t3331;
t2987 = t2999 + t3269;
t3214 = -0.2e1 * t2996 * t3191 * t3265;
t3268 = t3184 * t3331;
t3362 = t2963 * t3190 - t2969 * t3311 + (-t2987 * t3373 + t3214 * t3397) * t3168 - t3170 * t3165 * t3268;
t3361 = -t2963 * t3184 - t2969 * t3310 + (t2987 * t3374 + t3164 * t3214) * t3168 - t3170 * t3164 * t3331;
t3360 = 0.2e1 * t3438;
t3359 = 0.2e1 * t3436;
t3358 = 0.2e1 * t3434;
t3354 = t2964 * t3414;
t3353 = t2965 * t3413;
t3352 = t2966 * t3412;
t3351 = t2967 * t3420;
t3350 = t2967 * t3402;
t3349 = t2968 * t3418;
t3348 = t2968 * t3400;
t3347 = t2969 * t3416;
t3346 = t2969 * t3398;
t3345 = t2970 * t3420;
t3344 = t2970 * t3414;
t3343 = t2970 * t3395;
t3342 = t2971 * t3418;
t3341 = t2971 * t3413;
t3340 = t2971 * t3393;
t3339 = t2972 * t3416;
t3338 = t2972 * t3412;
t3337 = t2972 * t3391;
t3336 = t3090 * t3441;
t3334 = t3093 * t3440;
t3332 = t3096 * t3439;
t3327 = t3090 * t2997;
t3326 = t3093 * t2998;
t3325 = t3096 * t2999;
t3324 = t3090 * t3425;
t3323 = t3093 * t3423;
t3322 = t3096 * t3421;
t3303 = 0.2e1 * t3090 * t3457;
t3302 = 0.2e1 * t3093 * t3454;
t3301 = 0.2e1 * t3096 * t3451;
t3297 = t2964 * t3320;
t3152 = t3180 ^ 2;
t3296 = t3152 * t3354;
t3295 = t2965 * t3318;
t3153 = t3182 ^ 2;
t3294 = t3153 * t3353;
t3293 = t2966 * t3316;
t3154 = t3184 ^ 2;
t3292 = t3154 * t3352;
t3291 = t3090 * t3350;
t3290 = t3093 * t3348;
t3289 = t3096 * t3346;
t3117 = t3170 * t3186 - t3315;
t3288 = t3117 * t3345;
t3287 = t3118 * t3345;
t3286 = t3181 * t3344;
t3285 = t3187 * t3344;
t3119 = t3170 * t3188 - t3313;
t3284 = t3119 * t3342;
t3283 = t3120 * t3342;
t3282 = t3183 * t3341;
t3281 = t3189 * t3341;
t3121 = t3170 * t3190 - t3311;
t3280 = t3121 * t3339;
t3279 = t3122 * t3339;
t3278 = t3185 * t3338;
t3277 = t3191 * t3338;
t3276 = t3157 * t3336;
t3273 = t3161 * t3334;
t3270 = t3165 * t3332;
t3102 = t3134 * t3169 + t3140 * t3167;
t3039 = (-t3102 * t3181 + t3105 * t3384) * t3465 + pkin(5) * (t3102 * t3187 + t3105 * t3389);
t3264 = t3039 * t3149 * t3420;
t3263 = t3039 * t2964 * t3419;
t3103 = t3135 * t3169 + t3141 * t3167;
t3040 = (-t3103 * t3183 + t3106 * t3383) * t3464 + pkin(5) * (t3103 * t3189 + t3106 * t3387);
t3262 = t3040 * t3150 * t3418;
t3261 = t3040 * t2965 * t3417;
t3104 = t3136 * t3169 + t3142 * t3167;
t3041 = (-t3104 * t3185 + t3107 * t3382) * t3463 + pkin(5) * (t3104 * t3191 + t3107 * t3385);
t3260 = t3041 * t3151 * t3416;
t3259 = t3041 * t2966 * t3415;
t3258 = t3156 * t3324;
t3257 = t3160 * t3323;
t3256 = t3164 * t3322;
t3255 = t3472 * t3091 * t3401;
t3254 = t3471 * t3094 * t3399;
t3253 = t3470 * t3097 * t3397;
t3252 = t2964 * t3258;
t3251 = t2965 * t3257;
t3250 = t2966 * t3256;
t3249 = t2970 * t3264;
t3248 = t2970 * t3258;
t3247 = t3343 * t3402;
t3246 = t2971 * t3262;
t3245 = t2971 * t3257;
t3244 = t3340 * t3400;
t3243 = t2972 * t3260;
t3242 = t2972 * t3256;
t3241 = t3337 * t3398;
t3158 = t3156 / t3155;
t3240 = t3158 * t3180 * t3336;
t3162 = t3160 / t3159;
t3239 = t3162 * t3182 * t3334;
t3166 = t3164 / t3163;
t3238 = t3166 * t3184 * t3332;
t3237 = t3091 * (0.2e1 * t3155 - 0.1e1) * t3158 * t3438;
t3235 = t3094 * (0.2e1 * t3159 - 0.1e1) * t3162 * t3436;
t3233 = t3097 * (0.2e1 * t3163 - 0.1e1) * t3166 * t3434;
t3231 = t3343 * t3425;
t3230 = t3340 * t3423;
t3229 = t3337 * t3421;
t3225 = t3108 * t3142 + t3111 * t3136;
t3224 = t3109 * t3134 - t3112 * t3140;
t3223 = t3110 * t3135 - t3113 * t3141;
t3222 = 0.2e1 * t3237;
t3221 = 0.2e1 * t3235;
t3220 = 0.2e1 * t3233;
t3219 = -t3123 * t3170 + t3180 * t3466;
t3218 = -t3124 * t3170 + t3182 * t3466;
t3217 = -t3125 * t3170 + t3184 * t3466;
t3213 = -t3181 * t3458 - t3187 * t3327;
t3212 = -t3181 * t3327 + t3187 * t3458;
t3211 = -t3183 * t3455 - t3189 * t3326;
t3210 = -t3183 * t3326 + t3189 * t3455;
t3209 = -t3185 * t3452 - t3191 * t3325;
t3208 = -t3185 * t3325 + t3191 * t3452;
t3128 = pkin(5) * t3185 + t3191 * t3463;
t3127 = pkin(5) * t3183 + t3189 * t3464;
t3126 = pkin(5) * t3181 + t3187 * t3465;
t3071 = -t3128 * t3167 + t3169 * t3217;
t3070 = -t3127 * t3167 + t3169 * t3218;
t3069 = -t3126 * t3167 + t3169 * t3219;
t3068 = t3128 * t3169 + t3167 * t3217;
t3067 = t3127 * t3169 + t3167 * t3218;
t3066 = t3126 * t3169 + t3167 * t3219;
t3065 = t3104 * t3409 - t3107 * t3145;
t3064 = t3103 * t3410 - t3106 * t3144;
t3063 = t3102 * t3411 - t3105 * t3143;
t3062 = t3104 * t3145 + t3107 * t3409;
t3061 = t3103 * t3144 + t3106 * t3410;
t3060 = t3102 * t3143 + t3105 * t3411;
t3059 = -t3104 * t3139 + t3107 * t3406;
t3058 = t3104 * t3406 + t3107 * t3139;
t3057 = -t3103 * t3138 + t3106 * t3407;
t3056 = t3103 * t3407 + t3106 * t3138;
t3055 = -t3102 * t3137 + t3105 * t3408;
t3054 = t3102 * t3408 + t3105 * t3137;
t3038 = -t3068 * t3136 + t3071 * t3142;
t3037 = -t3067 * t3135 + t3070 * t3141;
t3036 = -t3066 * t3134 + t3069 * t3140;
t3035 = (t3104 * t3217 + t3107 * t3128) * t3151 + t3148 * t3101;
t3034 = (t3103 * t3218 + t3106 * t3127) * t3150 + t3147 * t3100;
t3033 = (t3102 * t3219 + t3105 * t3126) * t3149 + t3146 * t3099;
t3026 = -t3101 * t3151 + (t3068 * t3142 + t3071 * t3136) * t3148;
t3025 = -t3100 * t3150 + (t3067 * t3141 + t3070 * t3135) * t3147;
t3024 = -t3099 * t3149 + (t3066 * t3140 + t3069 * t3134) * t3146;
t3023 = (-t3074 * t3409 - t3145 * t3225) * t3184 - t3062 * t3392;
t3022 = (-t3073 * t3410 - t3144 * t3223) * t3182 - t3061 * t3394;
t3021 = (-t3072 * t3411 - t3143 * t3224) * t3180 - t3060 * t3396;
t3020 = (t3074 * t3406 - t3139 * t3225) * t3184 + t3059 * t3392;
t3019 = (t3073 * t3407 - t3138 * t3223) * t3182 + t3057 * t3394;
t3018 = (t3072 * t3408 - t3137 * t3224) * t3180 + t3055 * t3396;
t3017 = -(t3062 * t3382 - t3065 * t3185) * t3463 - pkin(5) * (t3062 * t3385 + t3065 * t3191);
t3016 = (-t3058 * t3185 + t3059 * t3382) * t3463 + pkin(5) * (t3058 * t3191 + t3059 * t3385);
t3015 = -(t3061 * t3383 - t3064 * t3183) * t3464 - pkin(5) * (t3061 * t3387 + t3064 * t3189);
t3014 = (-t3056 * t3183 + t3057 * t3383) * t3464 + pkin(5) * (t3056 * t3189 + t3057 * t3387);
t3013 = -(t3060 * t3384 - t3063 * t3181) * t3465 - pkin(5) * (t3060 * t3389 + t3063 * t3187);
t3012 = (-t3054 * t3181 + t3055 * t3384) * t3465 + pkin(5) * (t3054 * t3187 + t3055 * t3389);
t3011 = -t3026 * t3145 - t3038 * t3139;
t3010 = t3026 * t3139 - t3038 * t3145;
t3009 = -t3025 * t3144 - t3037 * t3138;
t3008 = t3025 * t3138 - t3037 * t3144;
t3007 = -t3024 * t3143 - t3036 * t3137;
t3006 = t3024 * t3137 - t3036 * t3143;
t1 = [(-t3033 * t3447 - t3034 * t3446 - t3035 * t3445) * MDP(1) + (-t3250 - t3251 - t3252) * MDP(2) + (t3033 * t3212 + t3034 * t3210 + t3035 * t3208 + t3187 * t3248 + t3189 * t3245 + t3191 * t3242) * t3462 + (t3033 * t3213 + t3034 * t3211 + t3035 * t3209 - t3181 * t3248 - t3183 * t3245 - t3185 * t3242) * t3461 + (-t3152 * t3252 - t3153 * t3251 - t3154 * t3250 + ((t3002 * t3041 + t3434 * t3467) * t3151 * t3253 + (t3001 * t3040 + t3436 * t3468) * t3150 * t3254 + (t3000 * t3039 + t3438 * t3469) * t3149 * t3255) * t3197) * MDP(5) + (-0.2e1 * t3324 * t3457 - 0.2e1 * t3323 * t3454 - 0.2e1 * t3322 * t3451 + ((-t3041 * t3442 + t3233 * t3467) * t3151 * t3470 + (-t3040 * t3443 + t3235 * t3468) * t3150 * t3471 + (-t3039 * t3444 + t3237 * t3469) * t3149 * t3472) * t3197) * MDP(6) + ((-t3259 * t3398 + (-t3269 - t3346) * t3422) * t3151 + (-t3261 * t3400 + (-t3272 - t3348) * t3424) * t3150 + (-t3263 * t3402 + (-t3275 - t3350) * t3426) * t3149) * MDP(7) + ((-t3259 + (t3166 * t3268 - t2969) * t3422) * t3151 + (-t3261 + (t3162 * t3271 - t2968) * t3424) * t3150 + (-t3263 + (t3158 * t3274 - t2967) * t3426) * t3149) * MDP(8) + (-t2967 * t3264 - t2968 * t3262 - t2969 * t3260) * t3460 + ((t3117 * t3249 + t3119 * t3246 + t3121 * t3243) * t3197 + (t3035 * t3362 + t3229) * t3096 + (t3034 * t3364 + t3230) * t3093 + (t3033 * t3366 + t3231) * t3090) * MDP(10) + ((-t3118 * t3249 - t3120 * t3246 - t3122 * t3243) * t3197 + (t3035 * t3361 - t3229 * t3398) * t3096 + (t3034 * t3363 - t3230 * t3400) * t3093 + (t3033 * t3365 - t3231 * t3402) * t3090) * MDP(11); (-t3006 * t3447 - t3008 * t3446 - t3010 * t3445) * MDP(1) + (t3021 * t3354 + t3022 * t3353 + t3023 * t3352) * MDP(2) + (t3006 * t3212 + t3008 * t3210 + t3010 * t3208 - t3021 * t3285 - t3022 * t3281 - t3023 * t3277) * t3462 + (t3006 * t3213 + t3008 * t3211 + t3010 * t3209 + t3021 * t3286 + t3022 * t3282 + t3023 * t3278) * t3461 + (t3021 * t3296 + t3022 * t3294 + t3023 * t3292 + ((-t3002 * t3017 + t3023 * t3358) * t3253 + (-t3001 * t3015 + t3022 * t3359) * t3254 + (-t3000 * t3013 + t3021 * t3360) * t3255) * t3197) * MDP(5) + (t3021 * t3303 + t3022 * t3302 + t3023 * t3301 + ((t3017 * t3442 + t3023 * t3220) * t3470 + (t3015 * t3443 + t3022 * t3221) * t3471 + (t3013 * t3444 + t3021 * t3222) * t3472) * t3197) * MDP(6) + (t3021 * t3291 + t3022 * t3290 + t3023 * t3289 + (t3021 * t3276 + t3022 * t3273 + t3023 * t3270) * t3198 + (t3013 * t3297 + t3015 * t3295 + t3017 * t3293) * t3197) * MDP(7) + (t3021 * t3450 + t3022 * t3449 + t3023 * t3448 + (-t3021 * t3240 - t3022 * t3239 - t3023 * t3238) * t3198 + (t3013 * t3459 + t3015 * t3456 + t3017 * t3453) * t3197) * MDP(8) + (t3013 * t3351 + t3015 * t3349 + t3017 * t3347) * t3460 + ((-t3013 * t3288 - t3015 * t3284 - t3017 * t3280) * t3197 + (t3010 * t3362 - t3023 * t3337) * t3096 + (t3008 * t3364 - t3022 * t3340) * t3093 + (t3006 * t3366 - t3021 * t3343) * t3090) * MDP(10) + ((t3013 * t3287 + t3015 * t3283 + t3017 * t3279) * t3197 + (t3010 * t3361 + t3023 * t3241) * t3096 + (t3008 * t3363 + t3022 * t3244) * t3093 + (t3006 * t3365 + t3021 * t3247) * t3090) * MDP(11); (-t3007 * t3447 - t3009 * t3446 - t3011 * t3445) * MDP(1) + (t3018 * t3354 + t3019 * t3353 + t3020 * t3352) * MDP(2) + (t3007 * t3212 + t3009 * t3210 + t3011 * t3208 - t3018 * t3285 - t3019 * t3281 - t3020 * t3277) * t3462 + (t3007 * t3213 + t3009 * t3211 + t3011 * t3209 + t3018 * t3286 + t3019 * t3282 + t3020 * t3278) * t3461 + (t3018 * t3296 + t3019 * t3294 + t3020 * t3292 + ((-t3002 * t3016 + t3020 * t3358) * t3253 + (-t3001 * t3014 + t3019 * t3359) * t3254 + (-t3000 * t3012 + t3018 * t3360) * t3255) * t3197) * MDP(5) + (t3018 * t3303 + t3019 * t3302 + t3020 * t3301 + ((t3016 * t3442 + t3020 * t3220) * t3470 + (t3014 * t3443 + t3019 * t3221) * t3471 + (t3012 * t3444 + t3018 * t3222) * t3472) * t3197) * MDP(6) + (t3018 * t3291 + t3019 * t3290 + t3020 * t3289 + (t3018 * t3276 + t3019 * t3273 + t3020 * t3270) * t3198 + (t3012 * t3297 + t3014 * t3295 + t3016 * t3293) * t3197) * MDP(7) + (t3018 * t3450 + t3019 * t3449 + t3020 * t3448 + (-t3018 * t3240 - t3019 * t3239 - t3020 * t3238) * t3198 + (t3012 * t3459 + t3014 * t3456 + t3016 * t3453) * t3197) * MDP(8) + (t3012 * t3351 + t3014 * t3349 + t3016 * t3347) * t3460 + ((-t3012 * t3288 - t3014 * t3284 - t3016 * t3280) * t3197 + (t3011 * t3362 - t3020 * t3337) * t3096 + (t3009 * t3364 - t3019 * t3340) * t3093 + (t3007 * t3366 - t3018 * t3343) * t3090) * MDP(10) + ((t3012 * t3287 + t3014 * t3283 + t3016 * t3279) * t3197 + (t3011 * t3361 + t3020 * t3241) * t3096 + (t3009 * t3363 + t3019 * t3244) * t3093 + (t3007 * t3365 + t3018 * t3247) * t3090) * MDP(11);];
taucX  = t1;
