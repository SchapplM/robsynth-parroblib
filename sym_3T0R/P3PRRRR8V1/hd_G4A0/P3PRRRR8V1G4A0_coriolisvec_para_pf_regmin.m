% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V1G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:27
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V1G4A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G4A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:26:05
% EndTime: 2020-08-06 17:26:20
% DurationCPUTime: 14.24s
% Computational Cost: add. (80925->465), mult. (207960->1065), div. (5058->23), fcn. (207189->34), ass. (0->472)
t1279 = legFrame(3,1);
t1242 = sin(t1279);
t1248 = cos(t1279);
t1282 = legFrame(3,2);
t1251 = sin(t1282);
t1297 = xDP(3);
t1298 = xDP(2);
t1254 = cos(t1282);
t1299 = xDP(1);
t1510 = t1254 * t1299;
t1180 = t1510 + (t1242 * t1298 - t1248 * t1297) * t1251;
t1219 = t1242 * t1297 + t1248 * t1298;
t1272 = sin(pkin(6));
t1274 = cos(pkin(6));
t1156 = t1180 * t1274 + t1272 * t1219;
t1276 = legFrame(3,3);
t1239 = sin(t1276);
t1245 = cos(t1276);
t1333 = t1272 * t1180 - t1219 * t1274;
t1132 = t1156 * t1245 - t1333 * t1239;
t1286 = sin(qJ(2,3));
t1275 = cos(pkin(3));
t1485 = t1275 * t1298;
t1416 = t1286 * t1485;
t1486 = t1275 * t1297;
t1417 = t1286 * t1486;
t1292 = cos(qJ(2,3));
t1476 = t1292 * t1298;
t1477 = t1292 * t1297;
t1484 = t1275 * t1299;
t1150 = (t1251 * t1417 + t1476) * t1248 + (-t1251 * t1416 + t1477) * t1242 - t1286 * t1254 * t1484;
t1153 = (-t1251 * t1477 + t1416) * t1248 + (t1251 * t1476 + t1417) * t1242 + t1292 * t1510;
t1285 = sin(qJ(3,3));
t1273 = sin(pkin(3));
t1291 = cos(qJ(3,3));
t1501 = t1273 * t1291;
t1108 = ((t1150 * t1274 - t1272 * t1153) * t1245 - (t1272 * t1150 + t1153 * t1274) * t1239) * t1285 - t1132 * t1501;
t1105 = t1108 ^ 2;
t1482 = t1286 * t1291;
t1228 = pkin(2) * t1482 - t1292 * pkin(5);
t1495 = t1275 * t1285;
t1204 = pkin(2) * t1495 + t1228 * t1273;
t1196 = 0.1e1 / t1204 ^ 2;
t1577 = t1105 * t1196;
t1280 = legFrame(2,1);
t1243 = sin(t1280);
t1249 = cos(t1280);
t1283 = legFrame(2,2);
t1252 = sin(t1283);
t1255 = cos(t1283);
t1509 = t1255 * t1299;
t1181 = t1509 + (t1243 * t1298 - t1249 * t1297) * t1252;
t1220 = t1243 * t1297 + t1249 * t1298;
t1157 = t1181 * t1274 + t1272 * t1220;
t1277 = legFrame(2,3);
t1240 = sin(t1277);
t1246 = cos(t1277);
t1332 = t1272 * t1181 - t1220 * t1274;
t1133 = t1157 * t1246 - t1332 * t1240;
t1288 = sin(qJ(2,2));
t1414 = t1288 * t1485;
t1415 = t1288 * t1486;
t1294 = cos(qJ(2,2));
t1474 = t1294 * t1298;
t1475 = t1294 * t1297;
t1151 = (t1252 * t1415 + t1474) * t1249 + (-t1252 * t1414 + t1475) * t1243 - t1288 * t1255 * t1484;
t1154 = (-t1252 * t1475 + t1414) * t1249 + (t1252 * t1474 + t1415) * t1243 + t1294 * t1509;
t1287 = sin(qJ(3,2));
t1293 = cos(qJ(3,2));
t1499 = t1273 * t1293;
t1109 = ((t1151 * t1274 - t1272 * t1154) * t1246 - (t1272 * t1151 + t1154 * t1274) * t1240) * t1287 - t1133 * t1499;
t1106 = t1109 ^ 2;
t1480 = t1288 * t1293;
t1229 = pkin(2) * t1480 - t1294 * pkin(5);
t1493 = t1275 * t1287;
t1205 = pkin(2) * t1493 + t1229 * t1273;
t1199 = 0.1e1 / t1205 ^ 2;
t1576 = t1106 * t1199;
t1281 = legFrame(1,1);
t1244 = sin(t1281);
t1250 = cos(t1281);
t1284 = legFrame(1,2);
t1253 = sin(t1284);
t1256 = cos(t1284);
t1508 = t1256 * t1299;
t1182 = t1508 + (t1244 * t1298 - t1250 * t1297) * t1253;
t1221 = t1244 * t1297 + t1250 * t1298;
t1158 = t1182 * t1274 + t1272 * t1221;
t1278 = legFrame(1,3);
t1241 = sin(t1278);
t1247 = cos(t1278);
t1331 = t1272 * t1182 - t1221 * t1274;
t1134 = t1158 * t1247 - t1331 * t1241;
t1290 = sin(qJ(2,1));
t1412 = t1290 * t1485;
t1413 = t1290 * t1486;
t1296 = cos(qJ(2,1));
t1472 = t1296 * t1298;
t1473 = t1296 * t1297;
t1152 = (t1253 * t1413 + t1472) * t1250 + (-t1253 * t1412 + t1473) * t1244 - t1290 * t1256 * t1484;
t1155 = (-t1253 * t1473 + t1412) * t1250 + (t1253 * t1472 + t1413) * t1244 + t1296 * t1508;
t1289 = sin(qJ(3,1));
t1295 = cos(qJ(3,1));
t1497 = t1273 * t1295;
t1110 = ((t1152 * t1274 - t1272 * t1155) * t1247 - (t1272 * t1152 + t1155 * t1274) * t1241) * t1289 - t1134 * t1497;
t1107 = t1110 ^ 2;
t1478 = t1290 * t1295;
t1230 = pkin(2) * t1478 - t1296 * pkin(5);
t1491 = t1275 * t1289;
t1206 = pkin(2) * t1491 + t1230 * t1273;
t1202 = 0.1e1 / t1206 ^ 2;
t1575 = t1107 * t1202;
t1262 = 0.1e1 / t1291 ^ 2;
t1102 = t1262 * t1577;
t1266 = 0.1e1 / t1293 ^ 2;
t1103 = t1266 * t1576;
t1270 = 0.1e1 / t1295 ^ 2;
t1104 = t1270 * t1575;
t1269 = 0.1e1 / t1295;
t1418 = t1273 * t1478;
t1227 = t1418 + t1491;
t1496 = t1273 * t1296;
t1194 = t1227 * pkin(2) - pkin(5) * t1496;
t1572 = 0.1e1 / t1194;
t1521 = t1572 * t1269;
t1265 = 0.1e1 / t1293;
t1420 = t1273 * t1480;
t1225 = t1420 + t1493;
t1498 = t1273 * t1294;
t1193 = t1225 * pkin(2) - pkin(5) * t1498;
t1573 = 0.1e1 / t1193;
t1523 = t1573 * t1265;
t1261 = 0.1e1 / t1291;
t1422 = t1273 * t1482;
t1223 = t1422 + t1495;
t1500 = t1273 * t1292;
t1192 = t1223 * pkin(2) - pkin(5) * t1500;
t1574 = 0.1e1 / t1192;
t1525 = t1574 * t1261;
t1195 = 0.1e1 / t1204;
t1198 = 0.1e1 / t1205;
t1201 = 0.1e1 / t1206;
t1494 = t1275 * t1286;
t1214 = t1272 * t1292 + t1274 * t1494;
t1217 = -t1272 * t1494 + t1274 * t1292;
t1177 = t1214 * t1245 + t1239 * t1217;
t1210 = -t1239 * t1272 + t1245 * t1274;
t1147 = t1177 * t1285 + t1210 * t1501;
t1571 = -0.2e1 * t1147;
t1492 = t1275 * t1288;
t1215 = t1272 * t1294 + t1274 * t1492;
t1218 = -t1272 * t1492 + t1274 * t1294;
t1178 = t1215 * t1246 + t1240 * t1218;
t1211 = -t1240 * t1272 + t1246 * t1274;
t1148 = t1178 * t1287 + t1211 * t1499;
t1570 = -0.2e1 * t1148;
t1490 = t1275 * t1290;
t1213 = t1272 * t1490 - t1274 * t1296;
t1216 = t1272 * t1296 + t1274 * t1490;
t1179 = -t1241 * t1213 + t1216 * t1247;
t1212 = -t1241 * t1272 + t1247 * t1274;
t1149 = t1179 * t1289 + t1212 * t1497;
t1569 = -0.2e1 * t1149;
t1568 = pkin(2) * t1273;
t1567 = pkin(2) * t1291;
t1566 = pkin(2) * t1293;
t1565 = pkin(2) * t1295;
t1534 = t1108 * t1195;
t1462 = pkin(5) * t1534;
t1408 = t1285 * t1462;
t1135 = t1239 * t1156 + t1333 * t1245;
t1489 = t1275 * t1292;
t1099 = -(t1132 * t1489 - t1286 * t1135) * t1567 - (t1132 * t1494 + t1292 * t1135) * pkin(5);
t1542 = t1099 * t1574;
t1087 = (t1408 - t1542) * t1261;
t1260 = t1291 ^ 2;
t1302 = 0.1e1 / pkin(2);
t1524 = t1574 * t1302;
t1438 = t1099 * t1524;
t1344 = t1261 * t1273 * t1438;
t1483 = t1285 * t1286;
t1423 = t1273 * t1483;
t1069 = (-(t1275 * t1087 + (pkin(2) * (t1275 * t1438 + t1500 * t1534) * t1260 - (t1285 * t1542 - t1462) * t1422) * t1261) * t1534 - (t1292 * t1344 + (-t1423 + (-t1261 + t1291) * t1275) * t1534) * t1542) * t1574 * t1262;
t1564 = t1069 * t1574;
t1563 = t1069 * t1195;
t1562 = t1069 * t1285;
t1533 = t1109 * t1198;
t1461 = pkin(5) * t1533;
t1407 = t1287 * t1461;
t1136 = t1240 * t1157 + t1332 * t1246;
t1488 = t1275 * t1294;
t1100 = -(t1133 * t1488 - t1288 * t1136) * t1566 - (t1133 * t1492 + t1294 * t1136) * pkin(5);
t1540 = t1100 * t1573;
t1088 = (t1407 - t1540) * t1265;
t1264 = t1293 ^ 2;
t1522 = t1573 * t1302;
t1437 = t1100 * t1522;
t1342 = t1265 * t1273 * t1437;
t1481 = t1287 * t1288;
t1421 = t1273 * t1481;
t1070 = (-(t1275 * t1088 + (pkin(2) * (t1275 * t1437 + t1498 * t1533) * t1264 - (t1287 * t1540 - t1461) * t1420) * t1265) * t1533 - (t1294 * t1342 + (-t1421 + (-t1265 + t1293) * t1275) * t1533) * t1540) * t1573 * t1266;
t1561 = t1070 * t1573;
t1560 = t1070 * t1198;
t1559 = t1070 * t1287;
t1532 = t1110 * t1201;
t1460 = pkin(5) * t1532;
t1406 = t1289 * t1460;
t1137 = t1241 * t1158 + t1331 * t1247;
t1487 = t1275 * t1296;
t1101 = -(t1134 * t1487 - t1290 * t1137) * t1565 - (t1134 * t1490 + t1296 * t1137) * pkin(5);
t1538 = t1101 * t1572;
t1089 = (t1406 - t1538) * t1269;
t1268 = t1295 ^ 2;
t1520 = t1572 * t1302;
t1436 = t1101 * t1520;
t1340 = t1269 * t1273 * t1436;
t1479 = t1289 * t1290;
t1419 = t1273 * t1479;
t1071 = (-(t1275 * t1089 + (pkin(2) * (t1275 * t1436 + t1496 * t1532) * t1268 - (t1289 * t1538 - t1460) * t1418) * t1269) * t1532 - (t1296 * t1340 + (-t1419 + (-t1269 + t1295) * t1275) * t1532) * t1538) * t1572 * t1270;
t1558 = t1071 * t1572;
t1557 = t1071 * t1201;
t1556 = t1071 * t1289;
t1300 = pkin(5) ^ 2;
t1301 = pkin(2) ^ 2;
t1507 = t1261 * t1285;
t1428 = t1574 * t1507;
t1084 = -pkin(5) * t1099 * t1428 + (t1261 * t1300 + t1291 * t1301) * t1534;
t1429 = t1195 * t1524;
t1378 = t1108 * t1429;
t1072 = (-t1275 * t1084 * t1378 - (-t1285 * t1228 * t1344 + t1275 * (-t1261 * t1408 + t1291 * t1542)) * t1099 * t1429) * t1262;
t1555 = t1072 * t1195;
t1505 = t1265 * t1287;
t1426 = t1573 * t1505;
t1085 = -pkin(5) * t1100 * t1426 + (t1265 * t1300 + t1293 * t1301) * t1533;
t1427 = t1198 * t1522;
t1377 = t1109 * t1427;
t1073 = (-t1275 * t1085 * t1377 - (-t1287 * t1229 * t1342 + t1275 * (-t1265 * t1407 + t1293 * t1540)) * t1100 * t1427) * t1266;
t1554 = t1073 * t1198;
t1503 = t1269 * t1289;
t1424 = t1572 * t1503;
t1086 = -pkin(5) * t1101 * t1424 + (t1269 * t1300 + t1295 * t1301) * t1532;
t1425 = t1201 * t1520;
t1376 = t1110 * t1425;
t1074 = (-t1275 * t1086 * t1376 - (-t1289 * t1230 * t1340 + t1275 * (-t1269 * t1406 + t1295 * t1538)) * t1101 * t1425) * t1270;
t1553 = t1074 * t1201;
t1075 = (-t1084 * t1534 + t1087 * t1542) * t1525;
t1552 = t1075 * t1195;
t1076 = (-t1085 * t1533 + t1088 * t1540) * t1523;
t1551 = t1076 * t1198;
t1077 = (-t1086 * t1532 + t1089 * t1538) * t1521;
t1550 = t1077 * t1201;
t1549 = (t1102 - 0.2e1 * t1577) * t1261;
t1548 = (t1103 - 0.2e1 * t1576) * t1265;
t1547 = (t1104 - 0.2e1 * t1575) * t1269;
t1546 = t1099 ^ 2 / t1192 ^ 2;
t1545 = t1100 ^ 2 / t1193 ^ 2;
t1544 = t1101 ^ 2 / t1194 ^ 2;
t1543 = t1099 * t1108;
t1541 = t1100 * t1109;
t1539 = t1101 * t1110;
t1531 = t1147 * t1195;
t1530 = t1147 * t1254;
t1529 = t1148 * t1198;
t1528 = t1148 * t1255;
t1527 = t1149 * t1201;
t1526 = t1149 * t1256;
t1519 = t1195 * t1261;
t1518 = t1198 * t1265;
t1517 = t1201 * t1269;
t1516 = t1242 * t1251;
t1515 = t1243 * t1252;
t1514 = t1244 * t1253;
t1513 = t1248 * t1251;
t1512 = t1249 * t1252;
t1511 = t1250 * t1253;
t1506 = t1262 * t1285;
t1504 = t1266 * t1287;
t1502 = t1270 * t1289;
t1066 = t1069 * t1500 + t1275 * t1072;
t1303 = 0.1e1 / pkin(2) ^ 2;
t1441 = t1303 * t1546;
t1385 = t1262 * t1441;
t1090 = t1102 + t1385;
t1321 = -0.2e1 * t1099 * t1292 * t1378;
t1471 = t1066 * t1291 - t1072 * t1423 + (-t1090 * t1482 + t1321 * t1506) * t1273 - t1385 * t1495;
t1470 = -t1066 * t1285 - t1072 * t1422 + (t1090 * t1483 + t1261 * t1321) * t1273 - t1261 * t1275 * t1441;
t1067 = t1070 * t1498 + t1275 * t1073;
t1440 = t1303 * t1545;
t1382 = t1266 * t1440;
t1091 = t1103 + t1382;
t1320 = -0.2e1 * t1100 * t1294 * t1377;
t1469 = t1067 * t1293 - t1073 * t1421 + (-t1091 * t1480 + t1320 * t1504) * t1273 - t1382 * t1493;
t1468 = -t1067 * t1287 - t1073 * t1420 + (t1091 * t1481 + t1265 * t1320) * t1273 - t1265 * t1275 * t1440;
t1068 = t1071 * t1496 + t1275 * t1074;
t1439 = t1303 * t1544;
t1379 = t1270 * t1439;
t1092 = t1104 + t1379;
t1319 = -0.2e1 * t1101 * t1296 * t1376;
t1467 = t1068 * t1295 - t1074 * t1419 + (-t1092 * t1478 + t1319 * t1502) * t1273 - t1379 * t1491;
t1466 = -t1068 * t1289 - t1074 * t1418 + (t1092 * t1479 + t1269 * t1319) * t1273 - t1275 * t1269 * t1439;
t1465 = 0.2e1 * t1543;
t1464 = 0.2e1 * t1541;
t1463 = 0.2e1 * t1539;
t1459 = t1069 * t1519;
t1458 = t1070 * t1518;
t1457 = t1071 * t1517;
t1456 = t1072 * t1525;
t1455 = t1072 * t1507;
t1454 = t1073 * t1523;
t1453 = t1073 * t1505;
t1452 = t1074 * t1521;
t1451 = t1074 * t1503;
t1450 = t1075 * t1525;
t1449 = t1075 * t1519;
t1448 = t1075 * t1500;
t1447 = t1076 * t1523;
t1446 = t1076 * t1518;
t1445 = t1076 * t1498;
t1444 = t1077 * t1521;
t1443 = t1077 * t1517;
t1442 = t1077 * t1496;
t1435 = t1195 * t1102;
t1434 = t1198 * t1103;
t1433 = t1201 * t1104;
t1432 = t1195 * t1530;
t1431 = t1198 * t1528;
t1430 = t1201 * t1526;
t1411 = 0.2e1 * t1195 * t1562;
t1410 = 0.2e1 * t1198 * t1559;
t1409 = 0.2e1 * t1201 * t1556;
t1405 = t1069 * t1428;
t1404 = t1070 * t1426;
t1403 = t1071 * t1424;
t1402 = t1195 * t1455;
t1401 = t1198 * t1453;
t1400 = t1201 * t1451;
t1222 = t1275 * t1291 - t1423;
t1399 = t1222 * t1450;
t1398 = t1223 * t1450;
t1397 = t1286 * t1449;
t1396 = t1292 * t1449;
t1224 = t1275 * t1293 - t1421;
t1395 = t1224 * t1447;
t1394 = t1225 * t1447;
t1393 = t1288 * t1446;
t1392 = t1294 * t1446;
t1226 = t1275 * t1295 - t1419;
t1391 = t1226 * t1444;
t1390 = t1227 * t1444;
t1389 = t1290 * t1443;
t1388 = t1296 * t1443;
t1387 = t1195 * t1262 * t1546;
t1263 = t1261 / t1260;
t1386 = t1263 * t1285 * t1546;
t1384 = t1198 * t1266 * t1545;
t1267 = t1265 / t1264;
t1383 = t1267 * t1287 * t1545;
t1381 = t1201 * t1270 * t1544;
t1271 = t1269 / t1268;
t1380 = t1271 * t1289 * t1544;
t1207 = t1239 * t1274 + t1245 * t1272;
t1160 = -t1242 * t1207 + t1210 * t1513;
t1329 = t1239 * t1214 - t1217 * t1245;
t1123 = (t1177 * t1513 - t1329 * t1242) * t1285 + t1160 * t1501;
t1375 = t1123 * t1459;
t1208 = t1240 * t1274 + t1246 * t1272;
t1162 = -t1243 * t1208 + t1211 * t1512;
t1328 = t1240 * t1215 - t1218 * t1246;
t1124 = (t1178 * t1512 - t1328 * t1243) * t1287 + t1162 * t1499;
t1374 = t1124 * t1458;
t1209 = t1241 * t1274 + t1247 * t1272;
t1164 = -t1244 * t1209 + t1212 * t1511;
t1330 = t1213 * t1247 + t1241 * t1216;
t1125 = (t1179 * t1511 - t1330 * t1244) * t1289 + t1164 * t1497;
t1373 = t1125 * t1457;
t1165 = t1207 * t1248 + t1210 * t1516;
t1126 = (-t1177 * t1516 - t1329 * t1248) * t1285 - t1165 * t1501;
t1372 = t1126 * t1459;
t1166 = t1208 * t1249 + t1211 * t1515;
t1127 = (-t1178 * t1515 - t1328 * t1249) * t1287 - t1166 * t1499;
t1371 = t1127 * t1458;
t1167 = t1209 * t1250 + t1212 * t1514;
t1128 = (-t1179 * t1514 - t1330 * t1250) * t1289 - t1167 * t1497;
t1370 = t1128 * t1457;
t1144 = (-t1286 * t1207 + t1210 * t1489) * t1567 + pkin(5) * (t1292 * t1207 + t1210 * t1494);
t1369 = t1144 * t1254 * t1525;
t1368 = t1144 * t1069 * t1524;
t1145 = (-t1288 * t1208 + t1211 * t1488) * t1566 + pkin(5) * (t1294 * t1208 + t1211 * t1492);
t1367 = t1145 * t1255 * t1523;
t1366 = t1145 * t1070 * t1522;
t1146 = (-t1290 * t1209 + t1212 * t1487) * t1565 + pkin(5) * (t1296 * t1209 + t1212 * t1490);
t1365 = t1146 * t1256 * t1521;
t1364 = t1146 * t1071 * t1520;
t1363 = t1261 * t1432;
t1362 = t1265 * t1431;
t1361 = t1269 * t1430;
t1360 = t1574 * t1196 * t1506;
t1359 = t1573 * t1199 * t1504;
t1358 = t1572 * t1202 * t1502;
t1357 = t1075 * t1369;
t1356 = t1075 * t1363;
t1355 = t1448 * t1507;
t1354 = t1076 * t1367;
t1353 = t1076 * t1362;
t1352 = t1445 * t1505;
t1351 = t1077 * t1365;
t1350 = t1077 * t1361;
t1349 = t1442 * t1503;
t1348 = t1195 * t1386;
t1347 = t1198 * t1383;
t1346 = t1201 * t1380;
t1345 = t1196 * (0.2e1 * t1260 - 0.1e1) * t1263 * t1543;
t1343 = t1199 * (0.2e1 * t1264 - 0.1e1) * t1267 * t1541;
t1341 = t1202 * (0.2e1 * t1268 - 0.1e1) * t1271 * t1539;
t1339 = t1069 * t1363;
t1338 = t1448 * t1530;
t1337 = t1070 * t1362;
t1336 = t1445 * t1528;
t1335 = t1071 * t1361;
t1334 = t1442 * t1526;
t1327 = 0.2e1 * t1345;
t1326 = 0.2e1 * t1343;
t1325 = 0.2e1 * t1341;
t1324 = -t1228 * t1275 + t1285 * t1568;
t1323 = -t1229 * t1275 + t1287 * t1568;
t1322 = -t1230 * t1275 + t1289 * t1568;
t1318 = -t1286 * t1563 - t1292 * t1435;
t1317 = -t1286 * t1435 + t1292 * t1563;
t1316 = -t1288 * t1560 - t1294 * t1434;
t1315 = -t1288 * t1434 + t1294 * t1560;
t1314 = -t1290 * t1557 - t1296 * t1433;
t1313 = -t1290 * t1433 + t1296 * t1557;
t1259 = t1289 ^ 2;
t1258 = t1287 ^ 2;
t1257 = t1285 ^ 2;
t1233 = pkin(5) * t1290 + t1296 * t1565;
t1232 = pkin(5) * t1288 + t1294 * t1566;
t1231 = pkin(5) * t1286 + t1292 * t1567;
t1176 = -t1272 * t1233 + t1322 * t1274;
t1175 = -t1272 * t1232 + t1323 * t1274;
t1174 = -t1272 * t1231 + t1324 * t1274;
t1173 = t1233 * t1274 + t1322 * t1272;
t1172 = t1232 * t1274 + t1323 * t1272;
t1171 = t1231 * t1274 + t1324 * t1272;
t1170 = t1209 * t1514 - t1212 * t1250;
t1169 = t1208 * t1515 - t1211 * t1249;
t1168 = t1207 * t1516 - t1210 * t1248;
t1163 = t1209 * t1511 + t1244 * t1212;
t1161 = t1208 * t1512 + t1243 * t1211;
t1159 = t1207 * t1513 + t1242 * t1210;
t1143 = -t1173 * t1241 + t1176 * t1247;
t1142 = -t1172 * t1240 + t1175 * t1246;
t1141 = -t1171 * t1239 + t1174 * t1245;
t1140 = (t1322 * t1209 + t1212 * t1233) * t1256 + t1253 * t1206;
t1139 = (t1323 * t1208 + t1211 * t1232) * t1255 + t1252 * t1205;
t1138 = (t1324 * t1207 + t1210 * t1231) * t1254 + t1251 * t1204;
t1131 = -t1256 * t1206 + (t1173 * t1247 + t1176 * t1241) * t1253;
t1130 = -t1255 * t1205 + (t1172 * t1246 + t1175 * t1240) * t1252;
t1129 = -t1254 * t1204 + (t1171 * t1245 + t1174 * t1239) * t1251;
t1122 = -(t1167 * t1487 - t1170 * t1290) * t1565 - pkin(5) * (t1167 * t1490 + t1296 * t1170);
t1121 = (-t1290 * t1163 + t1164 * t1487) * t1565 + pkin(5) * (t1296 * t1163 + t1164 * t1490);
t1120 = -(t1166 * t1488 - t1169 * t1288) * t1566 - pkin(5) * (t1166 * t1492 + t1294 * t1169);
t1119 = (-t1288 * t1161 + t1162 * t1488) * t1566 + pkin(5) * (t1294 * t1161 + t1162 * t1492);
t1118 = -(t1165 * t1489 - t1168 * t1286) * t1567 - pkin(5) * (t1165 * t1494 + t1292 * t1168);
t1117 = (-t1286 * t1159 + t1160 * t1489) * t1567 + pkin(5) * (t1292 * t1159 + t1160 * t1494);
t1116 = -t1131 * t1250 - t1244 * t1143;
t1115 = t1131 * t1244 - t1250 * t1143;
t1114 = -t1130 * t1249 - t1243 * t1142;
t1113 = t1130 * t1243 - t1249 * t1142;
t1112 = -t1129 * t1248 - t1242 * t1141;
t1111 = t1129 * t1242 - t1248 * t1141;
t1 = [-t1138 * t1552 - t1139 * t1551 - t1140 * t1550, -t1335 - t1337 - t1339, (t1317 * t1138 + t1315 * t1139 + t1313 * t1140 + t1292 * t1356 + t1294 * t1353 + t1296 * t1350) * t1273, (t1138 * t1318 + t1139 * t1316 + t1140 * t1314 - t1286 * t1356 - t1288 * t1353 - t1290 * t1350) * t1273, -t1257 * t1339 - t1258 * t1337 - t1259 * t1335 + ((t1107 * t1146 + t1539 * t1569) * t1256 * t1358 + (t1106 * t1145 + t1541 * t1570) * t1255 * t1359 + (t1105 * t1144 + t1543 * t1571) * t1254 * t1360) * t1302, -0.2e1 * t1432 * t1562 - 0.2e1 * t1431 * t1559 - 0.2e1 * t1430 * t1556 + ((-t1146 * t1547 + t1341 * t1569) * t1256 * t1572 + (-t1145 * t1548 + t1343 * t1570) * t1255 * t1573 + (-t1144 * t1549 + t1345 * t1571) * t1254 * t1574) * t1302, (-t1364 * t1503 + (-t1379 - t1451) * t1527) * t1256 + (-t1366 * t1505 + (-t1382 - t1453) * t1529) * t1255 + (-t1368 * t1507 + (-t1385 - t1455) * t1531) * t1254, (-t1364 + (t1303 * t1380 - t1074) * t1527) * t1256 + (-t1366 + (t1303 * t1383 - t1073) * t1529) * t1255 + (-t1368 + (t1303 * t1386 - t1072) * t1531) * t1254, (-t1072 * t1369 - t1073 * t1367 - t1074 * t1365) * t1302, (t1222 * t1357 + t1224 * t1354 + t1226 * t1351) * t1302 + (t1140 * t1467 + t1334) * t1201 + (t1139 * t1469 + t1336) * t1198 + (t1138 * t1471 + t1338) * t1195, (-t1223 * t1357 - t1225 * t1354 - t1227 * t1351) * t1302 + (t1140 * t1466 - t1334 * t1503) * t1201 + (t1139 * t1468 - t1336 * t1505) * t1198 + (t1138 * t1470 - t1338 * t1507) * t1195, 0; -t1111 * t1552 - t1113 * t1551 - t1115 * t1550, t1370 + t1371 + t1372, (t1317 * t1111 + t1315 * t1113 + t1313 * t1115 - t1126 * t1396 - t1127 * t1392 - t1128 * t1388) * t1273, (t1111 * t1318 + t1113 * t1316 + t1115 * t1314 + t1126 * t1397 + t1127 * t1393 + t1128 * t1389) * t1273, t1257 * t1372 + t1258 * t1371 + t1259 * t1370 + ((-t1107 * t1122 + t1128 * t1463) * t1358 + (-t1106 * t1120 + t1127 * t1464) * t1359 + (-t1105 * t1118 + t1126 * t1465) * t1360) * t1302, t1126 * t1411 + t1127 * t1410 + t1128 * t1409 + ((t1122 * t1547 + t1128 * t1325) * t1572 + (t1120 * t1548 + t1127 * t1326) * t1573 + (t1118 * t1549 + t1126 * t1327) * t1574) * t1302, t1126 * t1402 + t1127 * t1401 + t1128 * t1400 + (t1126 * t1387 + t1127 * t1384 + t1128 * t1381) * t1303 + (t1118 * t1405 + t1120 * t1404 + t1122 * t1403) * t1302, t1126 * t1555 + t1127 * t1554 + t1128 * t1553 + (-t1126 * t1348 - t1127 * t1347 - t1128 * t1346) * t1303 + (t1118 * t1564 + t1120 * t1561 + t1122 * t1558) * t1302, (t1118 * t1456 + t1120 * t1454 + t1122 * t1452) * t1302, (-t1118 * t1399 - t1120 * t1395 - t1122 * t1391) * t1302 + (t1115 * t1467 - t1128 * t1442) * t1201 + (t1113 * t1469 - t1127 * t1445) * t1198 + (t1111 * t1471 - t1126 * t1448) * t1195, (t1118 * t1398 + t1120 * t1394 + t1122 * t1390) * t1302 + (t1115 * t1466 + t1128 * t1349) * t1201 + (t1113 * t1468 + t1127 * t1352) * t1198 + (t1111 * t1470 + t1126 * t1355) * t1195, 0; -t1112 * t1552 - t1114 * t1551 - t1116 * t1550, t1373 + t1374 + t1375, (t1112 * t1317 + t1114 * t1315 + t1116 * t1313 - t1123 * t1396 - t1124 * t1392 - t1125 * t1388) * t1273, (t1112 * t1318 + t1114 * t1316 + t1116 * t1314 + t1123 * t1397 + t1124 * t1393 + t1125 * t1389) * t1273, t1257 * t1375 + t1258 * t1374 + t1259 * t1373 + ((-t1107 * t1121 + t1125 * t1463) * t1358 + (-t1106 * t1119 + t1124 * t1464) * t1359 + (-t1105 * t1117 + t1123 * t1465) * t1360) * t1302, t1123 * t1411 + t1124 * t1410 + t1125 * t1409 + ((t1121 * t1547 + t1125 * t1325) * t1572 + (t1119 * t1548 + t1124 * t1326) * t1573 + (t1117 * t1549 + t1123 * t1327) * t1574) * t1302, t1123 * t1402 + t1124 * t1401 + t1125 * t1400 + (t1123 * t1387 + t1124 * t1384 + t1125 * t1381) * t1303 + (t1117 * t1405 + t1119 * t1404 + t1121 * t1403) * t1302, t1123 * t1555 + t1124 * t1554 + t1125 * t1553 + (-t1123 * t1348 - t1124 * t1347 - t1125 * t1346) * t1303 + (t1117 * t1564 + t1119 * t1561 + t1121 * t1558) * t1302, (t1117 * t1456 + t1119 * t1454 + t1121 * t1452) * t1302, (-t1117 * t1399 - t1119 * t1395 - t1121 * t1391) * t1302 + (t1116 * t1467 - t1125 * t1442) * t1201 + (t1114 * t1469 - t1124 * t1445) * t1198 + (t1112 * t1471 - t1123 * t1448) * t1195, (t1117 * t1398 + t1119 * t1394 + t1121 * t1390) * t1302 + (t1116 * t1466 + t1125 * t1349) * t1201 + (t1114 * t1468 + t1124 * t1352) * t1198 + (t1112 * t1470 + t1123 * t1355) * t1195, 0;];
tau_reg  = t1;
