% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3PRRRR8V1G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:27
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V1G4A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G4A0_gravload_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G4A0_gravload_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V1G4A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G4A0_gravload_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G4A0_gravload_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G4A0_gravload_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:26:20
% EndTime: 2020-08-06 17:26:23
% DurationCPUTime: 2.90s
% Computational Cost: add. (1857->252), mult. (4572->528), div. (126->7), fcn. (5253->34), ass. (0->237)
t1750 = legFrame(3,2);
t1731 = sin(t1750);
t1734 = cos(t1750);
t1747 = legFrame(3,1);
t1722 = sin(t1747);
t1728 = cos(t1747);
t1874 = -g(2) * t1722 + g(3) * t1728;
t1659 = t1731 * g(1) + t1874 * t1734;
t1751 = legFrame(2,2);
t1732 = sin(t1751);
t1735 = cos(t1751);
t1748 = legFrame(2,1);
t1723 = sin(t1748);
t1729 = cos(t1748);
t1875 = -g(2) * t1723 + g(3) * t1729;
t1660 = t1732 * g(1) + t1875 * t1735;
t1752 = legFrame(1,2);
t1733 = sin(t1752);
t1736 = cos(t1752);
t1749 = legFrame(1,1);
t1724 = sin(t1749);
t1730 = cos(t1749);
t1876 = -g(2) * t1724 + g(3) * t1730;
t1661 = t1733 * g(1) + t1876 * t1736;
t1763 = cos(qJ(3,1));
t1739 = 0.1e1 / t1763;
t1764 = cos(qJ(2,1));
t1758 = sin(qJ(2,1));
t1808 = t1758 * t1763;
t1703 = pkin(2) * t1808 - t1764 * pkin(5);
t1741 = sin(pkin(3));
t1743 = cos(pkin(3));
t1757 = sin(qJ(3,1));
t1824 = t1743 * t1757;
t1673 = pkin(2) * t1824 + t1703 * t1741;
t1865 = 0.1e1 / t1673;
t1879 = t1865 * t1739;
t1761 = cos(qJ(3,2));
t1738 = 0.1e1 / t1761;
t1762 = cos(qJ(2,2));
t1756 = sin(qJ(2,2));
t1812 = t1756 * t1761;
t1702 = pkin(2) * t1812 - t1762 * pkin(5);
t1755 = sin(qJ(3,2));
t1826 = t1743 * t1755;
t1672 = pkin(2) * t1826 + t1702 * t1741;
t1866 = 0.1e1 / t1672;
t1878 = t1866 * t1738;
t1759 = cos(qJ(3,3));
t1737 = 0.1e1 / t1759;
t1760 = cos(qJ(2,3));
t1754 = sin(qJ(2,3));
t1816 = t1754 * t1759;
t1701 = pkin(2) * t1816 - t1760 * pkin(5);
t1753 = sin(qJ(3,3));
t1828 = t1743 * t1753;
t1671 = pkin(2) * t1828 + t1701 * t1741;
t1867 = 0.1e1 / t1671;
t1877 = t1867 * t1737;
t1695 = t1728 * g(2) + t1722 * g(3);
t1744 = legFrame(3,3);
t1719 = sin(t1744);
t1725 = cos(t1744);
t1786 = t1734 * g(1) - t1731 * t1874;
t1873 = t1719 * t1695 + t1725 * t1786;
t1696 = t1729 * g(2) + t1723 * g(3);
t1745 = legFrame(2,3);
t1720 = sin(t1745);
t1726 = cos(t1745);
t1785 = t1735 * g(1) - t1732 * t1875;
t1872 = t1720 * t1696 + t1726 * t1785;
t1697 = t1730 * g(2) + t1724 * g(3);
t1746 = legFrame(1,3);
t1721 = sin(t1746);
t1727 = cos(t1746);
t1784 = t1736 * g(1) - t1733 * t1876;
t1871 = t1721 * t1697 + t1727 * t1784;
t1870 = -t1725 * t1695 + t1719 * t1786;
t1869 = -t1726 * t1696 + t1720 * t1785;
t1868 = -t1727 * t1697 + t1721 * t1784;
t1864 = pkin(2) * t1759;
t1863 = pkin(2) * t1761;
t1862 = pkin(2) * t1763;
t1740 = sin(pkin(6));
t1742 = cos(pkin(6));
t1635 = t1740 * t1695 + t1742 * t1786;
t1638 = -t1695 * t1742 + t1740 * t1786;
t1831 = t1741 * t1659;
t1578 = (-t1831 + (t1635 * t1719 + t1638 * t1725) * t1743) * t1760 + t1754 * (t1635 * t1725 - t1638 * t1719);
t1852 = t1578 * t1867;
t1636 = t1740 * t1696 + t1742 * t1785;
t1639 = -t1696 * t1742 + t1740 * t1785;
t1830 = t1741 * t1660;
t1579 = (-t1830 + (t1636 * t1720 + t1639 * t1726) * t1743) * t1762 + t1756 * (t1636 * t1726 - t1639 * t1720);
t1851 = t1579 * t1866;
t1637 = t1740 * t1697 + t1742 * t1784;
t1640 = -t1697 * t1742 + t1740 * t1784;
t1829 = t1741 * t1661;
t1580 = (-t1829 + (t1637 * t1721 + t1640 * t1727) * t1743) * t1764 + t1758 * (t1637 * t1727 - t1640 * t1721);
t1850 = t1580 * t1865;
t1849 = t1659 * t1867;
t1848 = t1660 * t1866;
t1847 = t1661 * t1865;
t1840 = t1722 * t1731;
t1839 = t1723 * t1732;
t1838 = t1724 * t1733;
t1834 = t1728 * t1731;
t1833 = t1729 * t1732;
t1832 = t1730 * t1733;
t1827 = t1743 * t1754;
t1825 = t1743 * t1756;
t1823 = t1743 * t1758;
t1822 = t1743 * t1760;
t1821 = t1743 * t1762;
t1820 = t1743 * t1764;
t1819 = t1753 * t1741;
t1818 = t1753 * t1754;
t1817 = t1753 * t1760;
t1815 = t1755 * t1741;
t1814 = t1755 * t1756;
t1813 = t1755 * t1762;
t1811 = t1757 * t1741;
t1810 = t1757 * t1758;
t1809 = t1757 * t1764;
t1807 = t1759 * t1741;
t1806 = t1759 * t1760;
t1805 = t1761 * t1741;
t1804 = t1761 * t1762;
t1803 = t1763 * t1741;
t1802 = t1763 * t1764;
t1689 = t1743 * t1818 + t1807;
t1587 = t1873 * (-t1689 * t1740 + t1742 * t1817) - t1870 * (t1689 * t1742 + t1740 * t1817) - t1659 * (-t1741 * t1818 + t1743 * t1759);
t1801 = t1587 * t1877;
t1690 = t1743 * t1814 + t1805;
t1588 = t1872 * (-t1690 * t1740 + t1742 * t1813) - t1869 * (t1690 * t1742 + t1740 * t1813) - t1660 * (-t1741 * t1814 + t1743 * t1761);
t1800 = t1588 * t1878;
t1691 = t1743 * t1810 + t1803;
t1589 = t1871 * (-t1691 * t1740 + t1742 * t1809) - (t1691 * t1742 + t1740 * t1809) * t1868 - t1661 * (-t1741 * t1810 + t1743 * t1763);
t1799 = t1589 * t1879;
t1692 = t1743 * t1816 - t1819;
t1590 = (-t1692 * t1740 + t1742 * t1806) * t1873 - (t1692 * t1742 + t1740 * t1806) * t1870 + t1659 * (t1754 * t1807 + t1828);
t1798 = t1590 * t1877;
t1693 = t1743 * t1812 - t1815;
t1591 = (-t1693 * t1740 + t1742 * t1804) * t1872 - (t1693 * t1742 + t1740 * t1804) * t1869 + t1660 * (t1756 * t1805 + t1826);
t1797 = t1591 * t1878;
t1694 = t1743 * t1808 - t1811;
t1592 = t1871 * (-t1694 * t1740 + t1742 * t1802) - (t1694 * t1742 + t1740 * t1802) * t1868 + (t1758 * t1803 + t1824) * t1661;
t1796 = t1592 * t1879;
t1677 = t1719 * t1742 + t1725 * t1740;
t1680 = -t1719 * t1740 + t1725 * t1742;
t1624 = -t1722 * t1677 + t1680 * t1834;
t1684 = t1740 * t1760 + t1742 * t1827;
t1687 = -t1740 * t1827 + t1742 * t1760;
t1653 = t1684 * t1725 + t1719 * t1687;
t1770 = t1719 * t1684 - t1687 * t1725;
t1599 = (t1653 * t1834 - t1770 * t1722) * t1753 + t1624 * t1807;
t1795 = t1599 * t1877;
t1678 = t1720 * t1742 + t1726 * t1740;
t1681 = -t1720 * t1740 + t1726 * t1742;
t1626 = -t1723 * t1678 + t1681 * t1833;
t1685 = t1740 * t1762 + t1742 * t1825;
t1688 = -t1740 * t1825 + t1742 * t1762;
t1654 = t1685 * t1726 + t1720 * t1688;
t1769 = t1720 * t1685 - t1688 * t1726;
t1600 = (t1654 * t1833 - t1769 * t1723) * t1755 + t1626 * t1805;
t1794 = t1600 * t1878;
t1679 = t1721 * t1742 + t1727 * t1740;
t1682 = -t1721 * t1740 + t1727 * t1742;
t1628 = -t1724 * t1679 + t1682 * t1832;
t1683 = t1740 * t1823 - t1742 * t1764;
t1686 = t1740 * t1764 + t1742 * t1823;
t1655 = -t1721 * t1683 + t1686 * t1727;
t1771 = t1683 * t1727 + t1721 * t1686;
t1601 = (t1655 * t1832 - t1771 * t1724) * t1757 + t1628 * t1803;
t1793 = t1601 * t1879;
t1629 = t1677 * t1728 + t1680 * t1840;
t1602 = (-t1653 * t1840 - t1770 * t1728) * t1753 - t1629 * t1807;
t1792 = t1602 * t1877;
t1630 = t1678 * t1729 + t1681 * t1839;
t1603 = (-t1654 * t1839 - t1769 * t1729) * t1755 - t1630 * t1805;
t1791 = t1603 * t1878;
t1631 = t1679 * t1730 + t1682 * t1838;
t1604 = (-t1655 * t1838 - t1771 * t1730) * t1757 - t1631 * t1803;
t1790 = t1604 * t1879;
t1789 = (t1653 * t1753 + t1680 * t1807) * t1867 * t1734;
t1788 = (t1654 * t1755 + t1681 * t1805) * t1866 * t1735;
t1787 = (t1655 * t1757 + t1682 * t1803) * t1865 * t1736;
t1783 = t1578 * t1753 * t1877;
t1782 = t1579 * t1755 * t1878;
t1781 = t1580 * t1757 * t1879;
t1780 = ((-t1754 * t1677 + t1680 * t1822) * t1864 + pkin(5) * (t1760 * t1677 + t1680 * t1827)) * t1734 * t1877;
t1779 = ((-t1756 * t1678 + t1681 * t1821) * t1863 + pkin(5) * (t1762 * t1678 + t1681 * t1825)) * t1735 * t1878;
t1778 = ((-t1758 * t1679 + t1682 * t1820) * t1862 + pkin(5) * (t1764 * t1679 + t1682 * t1823)) * t1736 * t1879;
t1777 = t1737 * t1789;
t1776 = t1578 * t1789;
t1775 = t1738 * t1788;
t1774 = t1579 * t1788;
t1773 = t1739 * t1787;
t1772 = t1580 * t1787;
t1768 = pkin(2) * t1819 - t1701 * t1743;
t1767 = pkin(2) * t1815 - t1702 * t1743;
t1766 = pkin(2) * t1811 - t1703 * t1743;
t1765 = 0.1e1 / pkin(2);
t1706 = pkin(2) * t1802 + pkin(5) * t1758;
t1705 = pkin(2) * t1804 + pkin(5) * t1756;
t1704 = pkin(2) * t1806 + pkin(5) * t1754;
t1652 = -t1740 * t1706 + t1766 * t1742;
t1651 = -t1740 * t1705 + t1767 * t1742;
t1650 = -t1740 * t1704 + t1768 * t1742;
t1649 = t1706 * t1742 + t1766 * t1740;
t1648 = t1705 * t1742 + t1767 * t1740;
t1647 = t1704 * t1742 + t1768 * t1740;
t1634 = t1679 * t1838 - t1682 * t1730;
t1633 = t1678 * t1839 - t1681 * t1729;
t1632 = t1677 * t1840 - t1680 * t1728;
t1627 = t1679 * t1832 + t1724 * t1682;
t1625 = t1678 * t1833 + t1723 * t1681;
t1623 = t1677 * t1834 + t1722 * t1680;
t1610 = -t1649 * t1721 + t1652 * t1727;
t1609 = -t1648 * t1720 + t1651 * t1726;
t1608 = -t1647 * t1719 + t1650 * t1725;
t1607 = -t1736 * t1673 + (t1649 * t1727 + t1652 * t1721) * t1733;
t1606 = -t1735 * t1672 + (t1648 * t1726 + t1651 * t1720) * t1732;
t1605 = -t1734 * t1671 + (t1647 * t1725 + t1650 * t1719) * t1731;
t1598 = t1871 * (t1740 * t1820 + t1742 * t1758) + t1868 * (-t1740 * t1758 + t1742 * t1820) - t1764 * t1829;
t1597 = t1872 * (t1740 * t1821 + t1742 * t1756) + t1869 * (-t1740 * t1756 + t1742 * t1821) - t1762 * t1830;
t1596 = -t1683 * t1871 - t1686 * t1868 + t1758 * t1829;
t1595 = -t1685 * t1869 + t1688 * t1872 + t1756 * t1830;
t1594 = -t1684 * t1870 + t1687 * t1873 + t1754 * t1831;
t1593 = (t1740 * t1822 + t1742 * t1754) * t1873 + t1870 * (-t1740 * t1754 + t1742 * t1822) - t1760 * t1831;
t1586 = -(t1631 * t1820 - t1634 * t1758) * t1862 - pkin(5) * (t1631 * t1823 + t1764 * t1634);
t1585 = (-t1758 * t1627 + t1628 * t1820) * t1862 + pkin(5) * (t1764 * t1627 + t1628 * t1823);
t1584 = -(t1630 * t1821 - t1633 * t1756) * t1863 - pkin(5) * (t1630 * t1825 + t1762 * t1633);
t1583 = (-t1756 * t1625 + t1626 * t1821) * t1863 + pkin(5) * (t1762 * t1625 + t1626 * t1825);
t1582 = -(t1629 * t1822 - t1632 * t1754) * t1864 - pkin(5) * (t1629 * t1827 + t1760 * t1632);
t1581 = (-t1754 * t1623 + t1624 * t1822) * t1864 + pkin(5) * (t1760 * t1623 + t1624 * t1827);
t1 = [-((t1766 * t1679 + t1682 * t1706) * t1736 + t1733 * t1673) * t1847 - ((t1767 * t1678 + t1681 * t1705) * t1735 + t1732 * t1672) * t1848 - ((t1768 * t1677 + t1680 * t1704) * t1734 + t1731 * t1671) * t1849, 0, -t1593 * t1777 - t1597 * t1775 - t1598 * t1773, -t1594 * t1777 - t1595 * t1775 - t1596 * t1773, 0, 0, 0, 0, 0, -t1776 - t1774 - t1772 + (-t1587 * t1780 - t1588 * t1779 - t1589 * t1778) * t1765, t1737 * t1753 * t1776 + t1738 * t1755 * t1774 + t1739 * t1757 * t1772 + (-t1590 * t1780 - t1591 * t1779 - t1592 * t1778) * t1765, -g(1); -(t1607 * t1724 - t1730 * t1610) * t1847 - (t1606 * t1723 - t1729 * t1609) * t1848 - (t1605 * t1722 - t1728 * t1608) * t1849, 0, t1593 * t1792 + t1597 * t1791 + t1598 * t1790, t1594 * t1792 + t1595 * t1791 + t1596 * t1790, 0, 0, 0, 0, 0, t1602 * t1852 + t1603 * t1851 + t1604 * t1850 + (t1582 * t1801 + t1584 * t1800 + t1586 * t1799) * t1765, -t1602 * t1783 - t1603 * t1782 - t1604 * t1781 + (t1582 * t1798 + t1584 * t1797 + t1586 * t1796) * t1765, -g(2); -(-t1607 * t1730 - t1724 * t1610) * t1847 - (-t1606 * t1729 - t1723 * t1609) * t1848 - (-t1605 * t1728 - t1722 * t1608) * t1849, 0, t1593 * t1795 + t1597 * t1794 + t1598 * t1793, t1594 * t1795 + t1595 * t1794 + t1596 * t1793, 0, 0, 0, 0, 0, t1599 * t1852 + t1600 * t1851 + t1601 * t1850 + (t1581 * t1801 + t1583 * t1800 + t1585 * t1799) * t1765, -t1599 * t1783 - t1600 * t1782 - t1601 * t1781 + (t1581 * t1798 + t1583 * t1797 + t1585 * t1796) * t1765, -g(3);];
tau_reg  = t1;
