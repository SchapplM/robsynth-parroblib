% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V1G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G4A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:27
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3PRRRR8V1G4A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:26:47
% EndTime: 2020-08-06 17:26:58
% DurationCPUTime: 11.14s
% Computational Cost: add. (15015->483), mult. (41376->1062), div. (1566->14), fcn. (48711->34), ass. (0->447)
t2662 = cos(qJ(3,3));
t2638 = 0.1e1 / t2662 ^ 2;
t2663 = cos(qJ(2,3));
t2657 = sin(qJ(2,3));
t2841 = t2657 * t2662;
t2602 = pkin(2) * t2841 - pkin(5) * t2663;
t2644 = sin(pkin(3));
t2646 = cos(pkin(3));
t2656 = sin(qJ(3,3));
t2851 = t2646 * t2656;
t2798 = pkin(2) * t2851 + t2602 * t2644;
t2944 = 0.1e1 / t2798 ^ 2;
t2951 = t2944 * t2638;
t2664 = cos(qJ(3,2));
t2640 = 0.1e1 / t2664 ^ 2;
t2665 = cos(qJ(2,2));
t2659 = sin(qJ(2,2));
t2840 = t2659 * t2664;
t2603 = pkin(2) * t2840 - pkin(5) * t2665;
t2658 = sin(qJ(3,2));
t2849 = t2646 * t2658;
t2797 = pkin(2) * t2849 + t2603 * t2644;
t2946 = 0.1e1 / t2797 ^ 2;
t2950 = t2946 * t2640;
t2666 = cos(qJ(3,1));
t2642 = 0.1e1 / t2666 ^ 2;
t2667 = cos(qJ(2,1));
t2661 = sin(qJ(2,1));
t2839 = t2661 * t2666;
t2604 = pkin(2) * t2839 - pkin(5) * t2667;
t2660 = sin(qJ(3,1));
t2847 = t2646 * t2660;
t2796 = pkin(2) * t2847 + t2604 * t2644;
t2948 = 0.1e1 / t2796 ^ 2;
t2949 = t2948 * t2642;
t2655 = legFrame(1,2);
t2633 = cos(t2655);
t2615 = t2633 ^ 2;
t2954 = t2615 * t2949;
t2654 = legFrame(2,2);
t2632 = cos(t2654);
t2614 = t2632 ^ 2;
t2953 = t2614 * t2950;
t2653 = legFrame(3,2);
t2631 = cos(t2653);
t2613 = t2631 ^ 2;
t2952 = t2613 * t2951;
t2947 = 0.1e1 / t2796;
t2945 = 0.1e1 / t2797;
t2943 = 0.1e1 / t2798;
t2647 = legFrame(3,3);
t2616 = sin(t2647);
t2622 = cos(t2647);
t2643 = sin(pkin(6));
t2645 = cos(pkin(6));
t2584 = t2616 * t2645 + t2622 * t2643;
t2587 = -t2616 * t2643 + t2622 * t2645;
t2650 = legFrame(3,1);
t2619 = sin(t2650);
t2625 = cos(t2650);
t2628 = sin(t2653);
t2870 = t2625 * t2628;
t2546 = -t2584 * t2619 + t2587 * t2870;
t2850 = t2646 * t2657;
t2591 = t2643 * t2663 + t2645 * t2850;
t2594 = -t2643 * t2850 + t2645 * t2663;
t2563 = t2591 * t2622 + t2594 * t2616;
t2704 = t2591 * t2616 - t2594 * t2622;
t2858 = t2644 * t2662;
t2521 = (t2563 * t2870 - t2704 * t2619) * t2656 + t2546 * t2858;
t2873 = t2619 * t2628;
t2551 = t2584 * t2625 + t2587 * t2873;
t2524 = (-t2563 * t2873 - t2704 * t2625) * t2656 - t2551 * t2858;
t2942 = t2521 * t2524;
t2648 = legFrame(2,3);
t2617 = sin(t2648);
t2623 = cos(t2648);
t2585 = t2617 * t2645 + t2623 * t2643;
t2588 = -t2617 * t2643 + t2623 * t2645;
t2651 = legFrame(2,1);
t2620 = sin(t2651);
t2626 = cos(t2651);
t2629 = sin(t2654);
t2869 = t2626 * t2629;
t2548 = -t2585 * t2620 + t2588 * t2869;
t2848 = t2646 * t2659;
t2592 = t2643 * t2665 + t2645 * t2848;
t2595 = -t2643 * t2848 + t2645 * t2665;
t2564 = t2592 * t2623 + t2595 * t2617;
t2703 = t2592 * t2617 - t2595 * t2623;
t2856 = t2644 * t2664;
t2522 = (t2564 * t2869 - t2703 * t2620) * t2658 + t2548 * t2856;
t2872 = t2620 * t2629;
t2552 = t2585 * t2626 + t2588 * t2872;
t2525 = (-t2564 * t2872 - t2703 * t2626) * t2658 - t2552 * t2856;
t2941 = t2522 * t2525;
t2649 = legFrame(1,3);
t2618 = sin(t2649);
t2624 = cos(t2649);
t2586 = t2618 * t2645 + t2624 * t2643;
t2589 = -t2618 * t2643 + t2624 * t2645;
t2652 = legFrame(1,1);
t2621 = sin(t2652);
t2627 = cos(t2652);
t2630 = sin(t2655);
t2868 = t2627 * t2630;
t2550 = -t2586 * t2621 + t2589 * t2868;
t2846 = t2646 * t2661;
t2590 = t2643 * t2846 - t2645 * t2667;
t2593 = t2643 * t2667 + t2645 * t2846;
t2565 = -t2590 * t2618 + t2593 * t2624;
t2705 = t2590 * t2624 + t2593 * t2618;
t2854 = t2644 * t2666;
t2523 = (t2565 * t2868 - t2705 * t2621) * t2660 + t2550 * t2854;
t2871 = t2621 * t2630;
t2553 = t2586 * t2627 + t2589 * t2871;
t2526 = (-t2565 * t2871 - t2705 * t2627) * t2660 - t2553 * t2854;
t2940 = t2523 * t2526;
t2939 = t2638 * t2656;
t2938 = t2640 * t2658;
t2937 = t2642 * t2660;
t2936 = 2 * MDP(6);
t2935 = pkin(2) * t2662;
t2934 = pkin(2) * t2664;
t2933 = pkin(2) * t2666;
t2932 = MDP(3) * t2644;
t2931 = MDP(4) * t2644;
t2668 = 0.1e1 / pkin(2);
t2930 = MDP(7) * t2668;
t2929 = MDP(8) * t2668;
t2928 = MDP(9) / pkin(2) ^ 2;
t2605 = pkin(5) * t2657 + t2663 * t2935;
t2861 = t2644 * t2656;
t2702 = pkin(2) * t2861 - t2602 * t2646;
t2557 = t2605 * t2645 + t2702 * t2643;
t2560 = -t2605 * t2643 + t2702 * t2645;
t2527 = -t2798 * t2631 + (t2557 * t2622 + t2560 * t2616) * t2628;
t2533 = -t2557 * t2616 + t2560 * t2622;
t2500 = t2527 * t2619 - t2533 * t2625;
t2927 = t2500 * t2521;
t2501 = -t2527 * t2625 - t2533 * t2619;
t2926 = t2501 * t2524;
t2925 = t2501 * t2943;
t2606 = pkin(5) * t2659 + t2665 * t2934;
t2860 = t2644 * t2658;
t2701 = pkin(2) * t2860 - t2603 * t2646;
t2558 = t2606 * t2645 + t2701 * t2643;
t2561 = -t2606 * t2643 + t2701 * t2645;
t2528 = -t2797 * t2632 + (t2558 * t2623 + t2561 * t2617) * t2629;
t2534 = -t2558 * t2617 + t2561 * t2623;
t2502 = t2528 * t2620 - t2534 * t2626;
t2924 = t2502 * t2522;
t2503 = -t2528 * t2626 - t2534 * t2620;
t2923 = t2503 * t2525;
t2922 = t2503 * t2945;
t2607 = pkin(5) * t2661 + t2667 * t2933;
t2859 = t2644 * t2660;
t2700 = pkin(2) * t2859 - t2604 * t2646;
t2559 = t2607 * t2645 + t2700 * t2643;
t2562 = -t2607 * t2643 + t2700 * t2645;
t2529 = -t2796 * t2633 + (t2559 * t2624 + t2562 * t2618) * t2630;
t2535 = -t2559 * t2618 + t2562 * t2624;
t2504 = t2529 * t2621 - t2535 * t2627;
t2921 = t2504 * t2523;
t2505 = -t2529 * t2627 - t2535 * t2621;
t2920 = t2505 * t2526;
t2919 = t2505 * t2947;
t2530 = (t2702 * t2584 + t2587 * t2605) * t2631 + t2628 * t2798;
t2918 = t2530 * t2943;
t2917 = t2530 * t2944;
t2531 = (t2701 * t2585 + t2588 * t2606) * t2632 + t2629 * t2797;
t2916 = t2531 * t2945;
t2915 = t2531 * t2946;
t2532 = (t2700 * t2586 + t2589 * t2607) * t2633 + t2630 * t2796;
t2914 = t2532 * t2947;
t2913 = t2532 * t2948;
t2845 = t2646 * t2663;
t2536 = (-t2584 * t2657 + t2587 * t2845) * t2935 + pkin(5) * (t2584 * t2663 + t2587 * t2850);
t2912 = t2536 * t2631;
t2844 = t2646 * t2665;
t2537 = (-t2585 * t2659 + t2588 * t2844) * t2934 + pkin(5) * (t2585 * t2665 + t2588 * t2848);
t2911 = t2537 * t2632;
t2843 = t2646 * t2667;
t2538 = (-t2586 * t2661 + t2589 * t2843) * t2933 + pkin(5) * (t2586 * t2667 + t2589 * t2846);
t2910 = t2538 * t2633;
t2542 = t2563 * t2656 + t2587 * t2858;
t2909 = t2542 * t2631;
t2543 = t2564 * t2658 + t2588 * t2856;
t2908 = t2543 * t2632;
t2544 = t2565 * t2660 + t2589 * t2854;
t2907 = t2544 * t2633;
t2906 = t2943 ^ 2;
t2637 = 0.1e1 / t2662;
t2905 = t2943 * t2637;
t2903 = t2945 ^ 2;
t2639 = 0.1e1 / t2664;
t2902 = t2945 * t2639;
t2900 = t2947 ^ 2;
t2641 = 0.1e1 / t2666;
t2899 = t2947 * t2641;
t2545 = t2584 * t2870 + t2587 * t2619;
t2509 = (-t2545 * t2657 + t2546 * t2845) * t2935 + pkin(5) * (t2545 * t2663 + t2546 * t2850);
t2857 = t2644 * t2663;
t2816 = t2943 * t2857;
t2842 = t2646 * t2668;
t2825 = t2943 * t2842;
t2488 = (t2509 * t2825 + t2521 * t2816) * t2637;
t2852 = t2644 * t2668;
t2756 = t2943 * t2657 * t2852;
t2864 = t2637 * t2656;
t2690 = t2756 * t2864;
t2476 = t2488 * t2662 - t2509 * t2690;
t2897 = t2943 * t2476;
t2482 = -t2488 * t2656 - t2509 * t2756;
t2896 = t2943 * t2482;
t2867 = t2631 * t2637;
t2506 = (t2536 * t2825 + t2542 * t2816) * t2867;
t2494 = -t2506 * t2662 + t2690 * t2912;
t2895 = t2943 * t2494;
t2497 = t2506 * t2656 + t2756 * t2912;
t2894 = t2943 * t2497;
t2893 = t2944 * t2637;
t2891 = t2944 * t2663;
t2547 = t2585 * t2869 + t2588 * t2620;
t2511 = (-t2547 * t2659 + t2548 * t2844) * t2934 + pkin(5) * (t2547 * t2665 + t2548 * t2848);
t2855 = t2644 * t2665;
t2810 = t2945 * t2855;
t2821 = t2945 * t2842;
t2490 = (t2511 * t2821 + t2522 * t2810) * t2639;
t2752 = t2945 * t2659 * t2852;
t2863 = t2639 * t2658;
t2689 = t2752 * t2863;
t2478 = t2490 * t2664 - t2511 * t2689;
t2890 = t2945 * t2478;
t2484 = -t2490 * t2658 - t2511 * t2752;
t2889 = t2945 * t2484;
t2866 = t2632 * t2639;
t2507 = (t2537 * t2821 + t2543 * t2810) * t2866;
t2495 = -t2507 * t2664 + t2689 * t2911;
t2888 = t2945 * t2495;
t2498 = t2507 * t2658 + t2752 * t2911;
t2887 = t2945 * t2498;
t2886 = t2946 * t2639;
t2884 = t2946 * t2665;
t2549 = t2586 * t2868 + t2589 * t2621;
t2513 = (-t2549 * t2661 + t2550 * t2843) * t2933 + pkin(5) * (t2549 * t2667 + t2550 * t2846);
t2853 = t2644 * t2667;
t2804 = t2947 * t2853;
t2817 = t2947 * t2842;
t2492 = (t2513 * t2817 + t2523 * t2804) * t2641;
t2748 = t2947 * t2661 * t2852;
t2862 = t2641 * t2660;
t2688 = t2748 * t2862;
t2480 = t2492 * t2666 - t2513 * t2688;
t2883 = t2947 * t2480;
t2486 = -t2492 * t2660 - t2513 * t2748;
t2882 = t2947 * t2486;
t2865 = t2633 * t2641;
t2508 = (t2538 * t2817 + t2544 * t2804) * t2865;
t2496 = -t2508 * t2666 + t2688 * t2910;
t2881 = t2947 * t2496;
t2499 = t2508 * t2660 + t2748 * t2910;
t2880 = t2947 * t2499;
t2879 = t2948 * t2641;
t2877 = t2948 * t2667;
t2838 = 0.2e1 * t2932;
t2837 = 0.2e1 * t2931;
t2836 = 0.2e1 * t2930;
t2835 = 0.2e1 * t2929;
t2834 = t2530 * t2891;
t2833 = t2531 * t2884;
t2832 = t2532 * t2877;
t2831 = t2944 * t2909;
t2830 = t2946 * t2908;
t2829 = t2948 * t2907;
t2828 = t2631 * t2906;
t2827 = t2943 * t2905;
t2826 = t2668 * t2905;
t2824 = t2632 * t2903;
t2823 = t2945 * t2902;
t2822 = t2668 * t2902;
t2820 = t2633 * t2900;
t2819 = t2947 * t2899;
t2818 = t2668 * t2899;
t2634 = t2656 ^ 2;
t2815 = t2634 * t2951;
t2814 = t2944 * t2864;
t2813 = t2657 * t2893;
t2812 = t2637 * t2891;
t2811 = t2944 * t2857;
t2635 = t2658 ^ 2;
t2809 = t2635 * t2950;
t2808 = t2946 * t2863;
t2807 = t2659 * t2886;
t2806 = t2639 * t2884;
t2805 = t2946 * t2855;
t2636 = t2660 ^ 2;
t2803 = t2636 * t2949;
t2802 = t2948 * t2862;
t2801 = t2661 * t2879;
t2800 = t2641 * t2877;
t2799 = t2948 * t2853;
t2795 = t2500 * t2524 * t2893;
t2794 = t2501 * t2521 * t2893;
t2793 = t2502 * t2525 * t2886;
t2792 = t2503 * t2522 * t2886;
t2791 = t2504 * t2526 * t2879;
t2790 = t2505 * t2523 * t2879;
t2789 = t2509 * t2827;
t2554 = t2584 * t2873 - t2587 * t2625;
t2510 = -(t2551 * t2845 - t2554 * t2657) * t2935 - pkin(5) * (t2551 * t2850 + t2554 * t2663);
t2788 = t2510 * t2827;
t2787 = t2511 * t2823;
t2555 = t2585 * t2872 - t2588 * t2626;
t2512 = -(t2552 * t2844 - t2555 * t2659) * t2934 - pkin(5) * (t2552 * t2848 + t2555 * t2665);
t2786 = t2512 * t2823;
t2785 = t2513 * t2819;
t2556 = t2586 * t2871 - t2589 * t2627;
t2514 = -(t2553 * t2843 - t2556 * t2661) * t2933 - pkin(5) * (t2553 * t2846 + t2556 * t2667);
t2784 = t2514 * t2819;
t2783 = t2951 * t2942;
t2782 = t2950 * t2941;
t2781 = t2949 * t2940;
t2780 = t2530 * t2827;
t2779 = t2531 * t2823;
t2778 = t2532 * t2819;
t2777 = t2536 * t2943 * t2867;
t2776 = t2951 * t2912;
t2775 = t2537 * t2945 * t2866;
t2774 = t2950 * t2911;
t2773 = t2538 * t2947 * t2865;
t2772 = t2949 * t2910;
t2539 = t2542 ^ 2;
t2771 = t2539 * t2952;
t2540 = t2543 ^ 2;
t2770 = t2540 * t2953;
t2541 = t2544 ^ 2;
t2769 = t2541 * t2954;
t2768 = t2637 * t2831;
t2767 = t2638 * t2831;
t2766 = t2663 * t2831;
t2765 = t2639 * t2830;
t2764 = t2640 * t2830;
t2763 = t2665 * t2830;
t2762 = t2641 * t2829;
t2761 = t2642 * t2829;
t2760 = t2667 * t2829;
t2759 = t2906 * t2939;
t2596 = t2646 * t2662 - t2657 * t2861;
t2758 = t2596 * t2826;
t2597 = t2644 * t2841 + t2851;
t2757 = t2597 * t2826;
t2755 = t2903 * t2938;
t2598 = t2646 * t2664 - t2659 * t2860;
t2754 = t2598 * t2822;
t2599 = t2644 * t2840 + t2849;
t2753 = t2599 * t2822;
t2751 = t2900 * t2937;
t2600 = t2646 * t2666 - t2661 * t2859;
t2750 = t2600 * t2818;
t2601 = t2644 * t2839 + t2847;
t2749 = t2601 * t2818;
t2747 = t2656 * t2812;
t2746 = t2658 * t2806;
t2745 = t2660 * t2800;
t2744 = t2500 * t2789;
t2743 = t2501 * t2788;
t2742 = t2502 * t2787;
t2741 = t2503 * t2786;
t2740 = t2504 * t2785;
t2739 = t2505 * t2784;
t2738 = t2596 * t2780;
t2737 = t2597 * t2780;
t2736 = t2530 * t2747;
t2735 = t2598 * t2779;
t2734 = t2599 * t2779;
t2733 = t2531 * t2746;
t2732 = t2600 * t2778;
t2731 = t2601 * t2778;
t2730 = t2532 * t2745;
t2729 = t2536 * t2542 * t2613 * t2906;
t2728 = t2943 * t2777;
t2727 = t2668 * t2777;
t2726 = t2537 * t2543 * t2614 * t2903;
t2725 = t2945 * t2775;
t2724 = t2668 * t2775;
t2723 = t2538 * t2544 * t2615 * t2900;
t2722 = t2947 * t2773;
t2721 = t2668 * t2773;
t2720 = t2634 * t2767;
t2719 = t2656 * t2768;
t2718 = t2637 * t2766;
t2717 = t2635 * t2764;
t2716 = t2658 * t2765;
t2715 = t2639 * t2763;
t2714 = t2636 * t2761;
t2713 = t2660 * t2762;
t2712 = t2641 * t2760;
t2711 = t2644 * t2747;
t2710 = t2644 * t2746;
t2709 = t2644 * t2745;
t2708 = t2926 + t2927;
t2707 = t2923 + t2924;
t2706 = t2920 + t2921;
t2699 = t2596 * t2728;
t2698 = t2597 * t2728;
t2697 = t2598 * t2725;
t2696 = t2599 * t2725;
t2695 = t2600 * t2722;
t2694 = t2601 * t2722;
t2693 = t2656 * t2718;
t2692 = t2658 * t2715;
t2691 = t2660 * t2712;
t2687 = t2500 * t2909 - t2524 * t2530;
t2686 = t2501 * t2909 - t2521 * t2530;
t2685 = t2502 * t2908 - t2525 * t2531;
t2684 = t2503 * t2908 - t2522 * t2531;
t2683 = t2504 * t2907 - t2526 * t2532;
t2682 = t2505 * t2907 - t2523 * t2532;
t2681 = (t2509 * t2524 + t2510 * t2521) * t2906;
t2680 = (t2511 * t2525 + t2512 * t2522) * t2903;
t2679 = (t2513 * t2526 + t2514 * t2523) * t2900;
t2678 = (-t2509 * t2542 - t2521 * t2536) * t2828;
t2677 = (-t2510 * t2542 - t2524 * t2536) * t2828;
t2676 = (-t2511 * t2543 - t2522 * t2537) * t2824;
t2675 = (-t2512 * t2543 - t2525 * t2537) * t2824;
t2674 = (-t2513 * t2544 - t2523 * t2538) * t2820;
t2673 = (-t2514 * t2544 - t2526 * t2538) * t2820;
t2672 = (-t2706 * t2801 - t2707 * t2807 - t2708 * t2813) * t2931 + (t2706 * t2800 + t2707 * t2806 + t2708 * t2812) * t2932 + (t2679 * t2937 + t2680 * t2938 + t2681 * t2939) * t2930 + (t2637 * t2681 + t2639 * t2680 + t2641 * t2679) * t2929 + (t2500 * t2501 * t2944 + t2502 * t2503 * t2946 + t2504 * t2505 * t2948) * MDP(1) + (t2509 * t2510 * t2951 + t2511 * t2512 * t2950 + t2513 * t2514 * t2949) * t2928 + (t2802 * t2940 + t2808 * t2941 + t2814 * t2942) * t2936 + (t2634 * t2783 + t2635 * t2782 + t2636 * t2781) * MDP(5) + (t2781 + t2782 + t2783) * MDP(2);
t2671 = (t2682 * t2801 + t2684 * t2807 + t2686 * t2813) * t2931 + (-t2682 * t2800 - t2684 * t2806 - t2686 * t2812) * t2932 + (t2674 * t2937 + t2676 * t2938 + t2678 * t2939) * t2930 + (t2637 * t2678 + t2639 * t2676 + t2641 * t2674) * t2929 + (t2501 * t2917 + t2503 * t2915 + t2505 * t2913) * MDP(1) + (-t2509 * t2776 - t2511 * t2774 - t2513 * t2772) * t2928 + (-t2521 * t2719 - t2522 * t2716 - t2523 * t2713) * t2936 + (-t2521 * t2720 - t2522 * t2717 - t2523 * t2714) * MDP(5) + (-t2521 * t2767 - t2522 * t2764 - t2523 * t2761) * MDP(2);
t2670 = (t2683 * t2801 + t2685 * t2807 + t2687 * t2813) * t2931 + (-t2683 * t2800 - t2685 * t2806 - t2687 * t2812) * t2932 + (t2673 * t2937 + t2675 * t2938 + t2677 * t2939) * t2930 + (t2637 * t2677 + t2639 * t2675 + t2641 * t2673) * t2929 + (t2500 * t2917 + t2502 * t2915 + t2504 * t2913) * MDP(1) + (-t2510 * t2776 - t2512 * t2774 - t2514 * t2772) * t2928 + (-t2524 * t2719 - t2525 * t2716 - t2526 * t2713) * t2936 + (-t2524 * t2720 - t2525 * t2717 - t2526 * t2714) * MDP(5) + (-t2524 * t2767 - t2525 * t2764 - t2526 * t2761) * MDP(2);
t2520 = t2526 ^ 2;
t2519 = t2525 ^ 2;
t2518 = t2524 ^ 2;
t2517 = t2523 ^ 2;
t2516 = t2522 ^ 2;
t2515 = t2521 ^ 2;
t2493 = (t2514 * t2817 + t2526 * t2804) * t2641;
t2491 = (t2512 * t2821 + t2525 * t2810) * t2639;
t2489 = (t2510 * t2825 + t2524 * t2816) * t2637;
t2487 = -t2493 * t2660 - t2514 * t2748;
t2485 = -t2491 * t2658 - t2512 * t2752;
t2483 = -t2489 * t2656 - t2510 * t2756;
t2481 = t2493 * t2666 - t2514 * t2688;
t2479 = t2491 * t2664 - t2512 * t2689;
t2477 = t2489 * t2662 - t2510 * t2690;
t1 = [(t2530 ^ 2 * t2944 + t2531 ^ 2 * t2946 + t2532 ^ 2 * t2948) * MDP(1) + (t2769 + t2770 + t2771) * MDP(2) + (-t2530 * t2718 - t2531 * t2715 - t2532 * t2712) * t2838 + (t2530 * t2657 * t2768 + t2531 * t2659 * t2765 + t2532 * t2661 * t2762) * t2837 + (t2634 * t2771 + t2635 * t2770 + t2636 * t2769) * MDP(5) + (t2539 * t2613 * t2814 + t2540 * t2614 * t2808 + t2541 * t2615 * t2802) * t2936 + (t2723 * t2937 + t2726 * t2938 + t2729 * t2939) * t2836 + (t2637 * t2729 + t2639 * t2726 + t2641 * t2723) * t2835 + (t2536 ^ 2 * t2952 + t2537 ^ 2 * t2953 + t2538 ^ 2 * t2954) * t2928 + ((-t2644 * t2760 + (-t2600 * t2721 + t2496) * t2947) * t2532 + (-t2644 * t2763 + (-t2598 * t2724 + t2495) * t2945) * t2531 + (-t2644 * t2766 + (-t2596 * t2727 + t2494) * t2943) * t2530) * MDP(10) + ((t2644 * t2691 + (t2601 * t2721 + t2499) * t2947) * t2532 + (t2644 * t2692 + (t2599 * t2724 + t2498) * t2945) * t2531 + (t2644 * t2693 + (t2597 * t2727 + t2497) * t2943) * t2530) * MDP(11) + MDP(12); (t2477 * t2918 + t2479 * t2916 + t2481 * t2914 + (-t2500 * t2699 - t2502 * t2697 - t2504 * t2695) * t2668 + (-t2500 * t2766 - t2502 * t2763 - t2504 * t2760) * t2644) * MDP(10) + (t2483 * t2918 + t2485 * t2916 + t2487 * t2914 + (t2500 * t2698 + t2502 * t2696 + t2504 * t2694) * t2668 + (t2500 * t2693 + t2502 * t2692 + t2504 * t2691) * t2644) * MDP(11) + t2670; (t2530 * t2897 + t2531 * t2890 + t2532 * t2883 + (-t2501 * t2699 - t2503 * t2697 - t2505 * t2695) * t2668 + (-t2501 * t2766 - t2503 * t2763 - t2505 * t2760) * t2644) * MDP(10) + (t2530 * t2896 + t2531 * t2889 + t2532 * t2882 + (t2501 * t2698 + t2503 * t2696 + t2505 * t2694) * t2668 + (t2501 * t2693 + t2503 * t2692 + t2505 * t2691) * t2644) * MDP(11) + t2671; (t2500 * t2895 + t2502 * t2888 + t2504 * t2881 + (t2510 * t2738 + t2512 * t2735 + t2514 * t2732) * t2668 + (t2524 * t2834 + t2525 * t2833 + t2526 * t2832) * t2644) * MDP(10) + (t2500 * t2894 + t2502 * t2887 + t2504 * t2880 + (-t2510 * t2737 - t2512 * t2734 - t2514 * t2731) * t2668 + (-t2524 * t2736 - t2525 * t2733 - t2526 * t2730) * t2644) * MDP(11) + t2670; (t2500 ^ 2 * t2944 + t2502 ^ 2 * t2946 + t2504 ^ 2 * t2948) * MDP(1) + (t2518 * t2951 + t2519 * t2950 + t2520 * t2949) * MDP(2) + (t2663 * t2795 + t2665 * t2793 + t2667 * t2791) * t2838 + (-t2657 * t2795 - t2659 * t2793 - t2661 * t2791) * t2837 + (t2518 * t2815 + t2519 * t2809 + t2520 * t2803) * MDP(5) + (t2518 * t2814 + t2519 * t2808 + t2520 * t2802) * t2936 + (t2510 * t2524 * t2759 + t2512 * t2525 * t2755 + t2514 * t2526 * t2751) * t2836 + (t2524 * t2788 + t2525 * t2786 + t2526 * t2784) * t2835 + (t2510 ^ 2 * t2951 + t2512 ^ 2 * t2950 + t2514 ^ 2 * t2949) * t2928 + ((t2526 * t2799 + (t2514 * t2750 + t2481) * t2947) * t2504 + (t2525 * t2805 + (t2512 * t2754 + t2479) * t2945) * t2502 + (t2524 * t2811 + (t2510 * t2758 + t2477) * t2943) * t2500) * MDP(10) + ((-t2526 * t2709 + (-t2514 * t2749 + t2487) * t2947) * t2504 + (-t2525 * t2710 + (-t2512 * t2753 + t2485) * t2945) * t2502 + (-t2524 * t2711 + (-t2510 * t2757 + t2483) * t2943) * t2500) * MDP(11) + MDP(12); (t2500 * t2897 + t2502 * t2890 + t2504 * t2883 + (t2596 * t2743 + t2598 * t2741 + t2600 * t2739) * t2668 + (t2877 * t2920 + t2884 * t2923 + t2891 * t2926) * t2644) * MDP(10) + (t2500 * t2896 + t2502 * t2889 + t2504 * t2882 + (-t2597 * t2743 - t2599 * t2741 - t2601 * t2739) * t2668 + (-t2745 * t2920 - t2746 * t2923 - t2747 * t2926) * t2644) * MDP(11) + t2672; (t2501 * t2895 + t2503 * t2888 + t2505 * t2881 + (t2509 * t2738 + t2511 * t2735 + t2513 * t2732) * t2668 + (t2521 * t2834 + t2522 * t2833 + t2523 * t2832) * t2644) * MDP(10) + (t2501 * t2894 + t2503 * t2887 + t2505 * t2880 + (-t2509 * t2737 - t2511 * t2734 - t2513 * t2731) * t2668 + (-t2521 * t2736 - t2522 * t2733 - t2523 * t2730) * t2644) * MDP(11) + t2671; (t2477 * t2925 + t2479 * t2922 + t2481 * t2919 + (t2596 * t2744 + t2598 * t2742 + t2600 * t2740) * t2668 + (t2877 * t2921 + t2884 * t2924 + t2891 * t2927) * t2644) * MDP(10) + (t2483 * t2925 + t2485 * t2922 + t2487 * t2919 + (-t2597 * t2744 - t2599 * t2742 - t2601 * t2740) * t2668 + (-t2745 * t2921 - t2746 * t2924 - t2747 * t2927) * t2644) * MDP(11) + t2672; (t2501 ^ 2 * t2944 + t2503 ^ 2 * t2946 + t2505 ^ 2 * t2948) * MDP(1) + (t2515 * t2951 + t2516 * t2950 + t2517 * t2949) * MDP(2) + (t2663 * t2794 + t2665 * t2792 + t2667 * t2790) * t2838 + (-t2657 * t2794 - t2659 * t2792 - t2661 * t2790) * t2837 + (t2515 * t2815 + t2516 * t2809 + t2517 * t2803) * MDP(5) + (t2515 * t2814 + t2516 * t2808 + t2517 * t2802) * t2936 + (t2509 * t2521 * t2759 + t2511 * t2522 * t2755 + t2513 * t2523 * t2751) * t2836 + (t2521 * t2789 + t2522 * t2787 + t2523 * t2785) * t2835 + (t2509 ^ 2 * t2951 + t2511 ^ 2 * t2950 + t2513 ^ 2 * t2949) * t2928 + ((t2523 * t2799 + (t2513 * t2750 + t2480) * t2947) * t2505 + (t2522 * t2805 + (t2511 * t2754 + t2478) * t2945) * t2503 + (t2521 * t2811 + (t2509 * t2758 + t2476) * t2943) * t2501) * MDP(10) + ((-t2523 * t2709 + (-t2513 * t2749 + t2486) * t2947) * t2505 + (-t2522 * t2710 + (-t2511 * t2753 + t2484) * t2945) * t2503 + (-t2521 * t2711 + (-t2509 * t2757 + t2482) * t2943) * t2501) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
