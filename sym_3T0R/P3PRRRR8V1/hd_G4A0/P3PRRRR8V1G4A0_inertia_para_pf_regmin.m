% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V1G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:27
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V1G4A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G4A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:25:54
% EndTime: 2020-08-06 17:26:05
% DurationCPUTime: 10.23s
% Computational Cost: add. (14922->411), mult. (41277->1028), div. (1566->14), fcn. (48711->34), ass. (0->470)
t773 = cos(qJ(2,3));
t767 = sin(qJ(2,3));
t772 = cos(qJ(3,3));
t950 = t767 * t772;
t712 = pkin(2) * t950 - t773 * pkin(5);
t754 = sin(pkin(3));
t756 = cos(pkin(3));
t766 = sin(qJ(3,3));
t960 = t756 * t766;
t911 = pkin(2) * t960 + t712 * t754;
t1049 = 0.1e1 / t911 ^ 2;
t748 = 0.1e1 / t772 ^ 2;
t1059 = t1049 * t748;
t775 = cos(qJ(2,2));
t769 = sin(qJ(2,2));
t774 = cos(qJ(3,2));
t949 = t769 * t774;
t713 = pkin(2) * t949 - t775 * pkin(5);
t768 = sin(qJ(3,2));
t958 = t756 * t768;
t910 = pkin(2) * t958 + t713 * t754;
t1051 = 0.1e1 / t910 ^ 2;
t750 = 0.1e1 / t774 ^ 2;
t1057 = t1051 * t750;
t777 = cos(qJ(2,1));
t771 = sin(qJ(2,1));
t776 = cos(qJ(3,1));
t948 = t771 * t776;
t714 = pkin(2) * t948 - t777 * pkin(5);
t770 = sin(qJ(3,1));
t956 = t756 * t770;
t909 = pkin(2) * t956 + t714 * t754;
t1053 = 0.1e1 / t909 ^ 2;
t752 = 0.1e1 / t776 ^ 2;
t1055 = t1053 * t752;
t763 = legFrame(3,2);
t741 = cos(t763);
t723 = t741 ^ 2;
t1058 = t723 * t1059;
t764 = legFrame(2,2);
t742 = cos(t764);
t724 = t742 ^ 2;
t1056 = t724 * t1057;
t765 = legFrame(1,2);
t743 = cos(t765);
t725 = t743 ^ 2;
t1054 = t725 * t1055;
t1052 = 0.1e1 / t909;
t1050 = 0.1e1 / t910;
t1048 = 0.1e1 / t911;
t757 = legFrame(3,3);
t726 = sin(t757);
t732 = cos(t757);
t753 = sin(pkin(6));
t755 = cos(pkin(6));
t694 = t726 * t755 + t732 * t753;
t697 = -t726 * t753 + t732 * t755;
t760 = legFrame(3,1);
t729 = sin(t760);
t735 = cos(t760);
t738 = sin(t763);
t979 = t735 * t738;
t656 = -t729 * t694 + t697 * t979;
t959 = t756 * t767;
t701 = t753 * t773 + t755 * t959;
t704 = -t753 * t959 + t755 * t773;
t673 = t701 * t732 + t726 * t704;
t814 = t726 * t701 - t704 * t732;
t967 = t754 * t772;
t631 = (t673 * t979 - t814 * t729) * t766 + t656 * t967;
t982 = t729 * t738;
t661 = t694 * t735 + t697 * t982;
t634 = (-t673 * t982 - t814 * t735) * t766 - t661 * t967;
t1047 = t631 * t634;
t758 = legFrame(2,3);
t727 = sin(t758);
t733 = cos(t758);
t695 = t727 * t755 + t733 * t753;
t698 = -t727 * t753 + t733 * t755;
t761 = legFrame(2,1);
t730 = sin(t761);
t736 = cos(t761);
t739 = sin(t764);
t978 = t736 * t739;
t658 = -t730 * t695 + t698 * t978;
t957 = t756 * t769;
t702 = t753 * t775 + t755 * t957;
t705 = -t753 * t957 + t755 * t775;
t674 = t702 * t733 + t727 * t705;
t813 = t727 * t702 - t705 * t733;
t965 = t754 * t774;
t632 = (t674 * t978 - t813 * t730) * t768 + t658 * t965;
t981 = t730 * t739;
t662 = t695 * t736 + t698 * t981;
t635 = (-t674 * t981 - t813 * t736) * t768 - t662 * t965;
t1046 = t632 * t635;
t759 = legFrame(1,3);
t728 = sin(t759);
t734 = cos(t759);
t696 = t728 * t755 + t734 * t753;
t699 = -t728 * t753 + t734 * t755;
t762 = legFrame(1,1);
t731 = sin(t762);
t737 = cos(t762);
t740 = sin(t765);
t977 = t737 * t740;
t660 = -t731 * t696 + t699 * t977;
t955 = t756 * t771;
t700 = t753 * t955 - t755 * t777;
t703 = t753 * t777 + t755 * t955;
t675 = -t728 * t700 + t703 * t734;
t815 = t700 * t734 + t728 * t703;
t963 = t754 * t776;
t633 = (t675 * t977 - t815 * t731) * t770 + t660 * t963;
t980 = t731 * t740;
t663 = t696 * t737 + t699 * t980;
t636 = (-t675 * t980 - t815 * t737) * t770 - t663 * t963;
t1045 = t633 * t636;
t1044 = t748 * t766;
t1043 = t750 * t768;
t1042 = t752 * t770;
t1041 = 0.2e1 * t754;
t778 = 0.1e1 / pkin(2);
t1040 = 0.2e1 * t778;
t1039 = pkin(2) * t772;
t1038 = pkin(2) * t774;
t1037 = pkin(2) * t776;
t715 = pkin(5) * t767 + t773 * t1039;
t970 = t754 * t766;
t812 = pkin(2) * t970 - t712 * t756;
t667 = t715 * t755 + t812 * t753;
t670 = -t753 * t715 + t812 * t755;
t637 = -t741 * t911 + (t667 * t732 + t670 * t726) * t738;
t643 = -t667 * t726 + t670 * t732;
t610 = t637 * t729 - t735 * t643;
t1036 = t610 * t631;
t611 = -t637 * t735 - t729 * t643;
t1035 = t611 * t634;
t716 = pkin(5) * t769 + t775 * t1038;
t969 = t754 * t768;
t811 = pkin(2) * t969 - t713 * t756;
t668 = t716 * t755 + t811 * t753;
t671 = -t753 * t716 + t811 * t755;
t638 = -t742 * t910 + (t668 * t733 + t671 * t727) * t739;
t644 = -t668 * t727 + t671 * t733;
t612 = t638 * t730 - t736 * t644;
t1034 = t612 * t632;
t613 = -t638 * t736 - t730 * t644;
t1033 = t613 * t635;
t717 = pkin(5) * t771 + t777 * t1037;
t968 = t754 * t770;
t810 = pkin(2) * t968 - t714 * t756;
t669 = t717 * t755 + t810 * t753;
t672 = -t753 * t717 + t810 * t755;
t639 = -t743 * t909 + (t669 * t734 + t672 * t728) * t740;
t645 = -t669 * t728 + t672 * t734;
t614 = t639 * t731 - t737 * t645;
t1032 = t614 * t633;
t615 = -t639 * t737 - t731 * t645;
t1031 = t615 * t636;
t640 = (t812 * t694 + t697 * t715) * t741 + t738 * t911;
t1030 = t640 * t1049;
t641 = (t811 * t695 + t698 * t716) * t742 + t739 * t910;
t1029 = t641 * t1051;
t642 = (t810 * t696 + t699 * t717) * t743 + t740 * t909;
t1028 = t642 * t1053;
t954 = t756 * t773;
t646 = (-t767 * t694 + t697 * t954) * t1039 + pkin(5) * (t773 * t694 + t697 * t959);
t1027 = t646 * t741;
t953 = t756 * t775;
t647 = (-t769 * t695 + t698 * t953) * t1038 + pkin(5) * (t775 * t695 + t698 * t957);
t1026 = t647 * t742;
t952 = t756 * t777;
t648 = (-t771 * t696 + t699 * t952) * t1037 + pkin(5) * (t777 * t696 + t699 * t955);
t1025 = t648 * t743;
t652 = t673 * t766 + t697 * t967;
t1024 = t652 * t741;
t653 = t674 * t768 + t698 * t965;
t1023 = t653 * t742;
t654 = t675 * t770 + t699 * t963;
t1022 = t654 * t743;
t1021 = t1048 ^ 2;
t747 = 0.1e1 / t772;
t1020 = t1048 * t747;
t1018 = t1050 ^ 2;
t749 = 0.1e1 / t774;
t1017 = t1050 * t749;
t1015 = t1052 ^ 2;
t751 = 0.1e1 / t776;
t1014 = t1052 * t751;
t655 = t694 * t979 + t729 * t697;
t619 = (-t767 * t655 + t656 * t954) * t1039 + pkin(5) * (t773 * t655 + t656 * t959);
t966 = t754 * t773;
t929 = t1048 * t966;
t951 = t756 * t778;
t938 = t1048 * t951;
t598 = (t619 * t938 + t631 * t929) * t747;
t961 = t754 * t778;
t869 = t1048 * t767 * t961;
t973 = t747 * t766;
t800 = t869 * t973;
t586 = t598 * t772 - t619 * t800;
t1012 = t1048 * t586;
t664 = t694 * t982 - t697 * t735;
t620 = -(t661 * t954 - t664 * t767) * t1039 - pkin(5) * (t661 * t959 + t773 * t664);
t599 = (t620 * t938 + t634 * t929) * t747;
t587 = t599 * t772 - t620 * t800;
t1011 = t1048 * t587;
t592 = -t598 * t766 - t619 * t869;
t1010 = t1048 * t592;
t593 = -t599 * t766 - t620 * t869;
t1009 = t1048 * t593;
t976 = t741 * t747;
t616 = (t646 * t938 + t652 * t929) * t976;
t797 = t869 * t1027;
t604 = -t616 * t772 + t797 * t973;
t1008 = t1048 * t604;
t607 = t616 * t766 + t797;
t1007 = t1048 * t607;
t1006 = t1049 * t747;
t1004 = t1049 * t773;
t657 = t695 * t978 + t730 * t698;
t621 = (-t769 * t657 + t658 * t953) * t1038 + pkin(5) * (t775 * t657 + t658 * t957);
t964 = t754 * t775;
t923 = t1050 * t964;
t934 = t1050 * t951;
t600 = (t621 * t934 + t632 * t923) * t749;
t865 = t1050 * t769 * t961;
t972 = t749 * t768;
t799 = t865 * t972;
t588 = t600 * t774 - t621 * t799;
t1003 = t1050 * t588;
t665 = t695 * t981 - t698 * t736;
t622 = -(t662 * t953 - t665 * t769) * t1038 - pkin(5) * (t662 * t957 + t775 * t665);
t601 = (t622 * t934 + t635 * t923) * t749;
t589 = t601 * t774 - t622 * t799;
t1002 = t1050 * t589;
t594 = -t600 * t768 - t621 * t865;
t1001 = t1050 * t594;
t595 = -t601 * t768 - t622 * t865;
t1000 = t1050 * t595;
t975 = t742 * t749;
t617 = (t647 * t934 + t653 * t923) * t975;
t796 = t865 * t1026;
t605 = -t617 * t774 + t796 * t972;
t999 = t1050 * t605;
t608 = t617 * t768 + t796;
t998 = t1050 * t608;
t997 = t1051 * t749;
t995 = t1051 * t775;
t659 = t696 * t977 + t731 * t699;
t623 = (-t771 * t659 + t660 * t952) * t1037 + pkin(5) * (t777 * t659 + t660 * t955);
t962 = t754 * t777;
t917 = t1052 * t962;
t930 = t1052 * t951;
t602 = (t623 * t930 + t633 * t917) * t751;
t861 = t1052 * t771 * t961;
t971 = t751 * t770;
t798 = t861 * t971;
t590 = t602 * t776 - t623 * t798;
t994 = t1052 * t590;
t666 = t696 * t980 - t699 * t737;
t624 = -(t663 * t952 - t666 * t771) * t1037 - pkin(5) * (t663 * t955 + t777 * t666);
t603 = (t624 * t930 + t636 * t917) * t751;
t591 = t603 * t776 - t624 * t798;
t993 = t1052 * t591;
t596 = -t602 * t770 - t623 * t861;
t992 = t1052 * t596;
t597 = -t603 * t770 - t624 * t861;
t991 = t1052 * t597;
t974 = t743 * t751;
t618 = (t648 * t930 + t654 * t917) * t974;
t795 = t861 * t1025;
t606 = -t618 * t776 + t795 * t971;
t990 = t1052 * t606;
t609 = t618 * t770 + t795;
t989 = t1052 * t609;
t988 = t1053 * t751;
t986 = t1053 * t777;
t947 = t640 * t1004;
t946 = t641 * t995;
t945 = t642 * t986;
t944 = t1049 * t1024;
t943 = t1051 * t1023;
t942 = t1053 * t1022;
t941 = t741 * t1021;
t940 = t1048 * t1020;
t939 = t778 * t1020;
t937 = t742 * t1018;
t936 = t1050 * t1017;
t935 = t778 * t1017;
t933 = t743 * t1015;
t932 = t1052 * t1014;
t931 = t778 * t1014;
t744 = t766 ^ 2;
t928 = t744 * t1059;
t927 = t1049 * t973;
t926 = t767 * t1006;
t925 = t747 * t1004;
t924 = t1049 * t966;
t745 = t768 ^ 2;
t922 = t745 * t1057;
t921 = t1051 * t972;
t920 = t769 * t997;
t919 = t749 * t995;
t918 = t1051 * t964;
t746 = t770 ^ 2;
t916 = t746 * t1055;
t915 = t1053 * t971;
t914 = t771 * t988;
t913 = t751 * t986;
t912 = t1053 * t962;
t908 = t610 * t634 * t1006;
t907 = t611 * t631 * t1006;
t906 = t612 * t635 * t997;
t905 = t613 * t632 * t997;
t904 = t614 * t636 * t988;
t903 = t615 * t633 * t988;
t902 = t619 * t940;
t901 = t620 * t940;
t900 = t621 * t936;
t899 = t622 * t936;
t898 = t623 * t932;
t897 = t624 * t932;
t896 = t1059 * t1047;
t895 = t1057 * t1046;
t894 = t1055 * t1045;
t893 = t640 * t940;
t892 = t641 * t936;
t891 = t642 * t932;
t890 = t646 * t1048 * t976;
t889 = t1059 * t1027;
t888 = t647 * t1050 * t975;
t887 = t1057 * t1026;
t886 = t648 * t1052 * t974;
t885 = t1055 * t1025;
t649 = t652 ^ 2;
t884 = t649 * t1058;
t650 = t653 ^ 2;
t883 = t650 * t1056;
t651 = t654 ^ 2;
t882 = t651 * t1054;
t881 = t747 * t944;
t880 = t748 * t944;
t879 = t773 * t944;
t878 = t749 * t943;
t877 = t750 * t943;
t876 = t775 * t943;
t875 = t751 * t942;
t874 = t752 * t942;
t873 = t777 * t942;
t872 = t1021 * t1044;
t706 = t756 * t772 - t767 * t970;
t871 = t706 * t939;
t707 = t754 * t950 + t960;
t870 = t707 * t939;
t868 = t1018 * t1043;
t708 = t756 * t774 - t769 * t969;
t867 = t708 * t935;
t709 = t754 * t949 + t958;
t866 = t709 * t935;
t864 = t1015 * t1042;
t710 = t756 * t776 - t771 * t968;
t863 = t710 * t931;
t711 = t754 * t948 + t956;
t862 = t711 * t931;
t860 = t766 * t925;
t859 = t768 * t919;
t858 = t770 * t913;
t857 = t610 * t902;
t856 = t611 * t901;
t855 = t612 * t900;
t854 = t613 * t899;
t853 = t614 * t898;
t852 = t615 * t897;
t851 = t706 * t893;
t850 = t707 * t893;
t849 = t640 * t860;
t848 = t708 * t892;
t847 = t709 * t892;
t846 = t641 * t859;
t845 = t710 * t891;
t844 = t711 * t891;
t843 = t642 * t858;
t842 = t646 * t652 * t723 * t1021;
t841 = t1048 * t890;
t840 = t778 * t890;
t839 = t647 * t653 * t724 * t1018;
t838 = t1050 * t888;
t837 = t778 * t888;
t836 = t648 * t654 * t725 * t1015;
t835 = t1052 * t886;
t834 = t778 * t886;
t833 = t766 * t881;
t832 = t747 * t879;
t831 = t631 * t880;
t830 = t634 * t880;
t829 = t768 * t878;
t828 = t749 * t876;
t827 = t632 * t877;
t826 = t635 * t877;
t825 = t770 * t875;
t824 = t751 * t873;
t823 = t633 * t874;
t822 = t636 * t874;
t821 = t754 * t860;
t820 = t754 * t859;
t819 = t754 * t858;
t818 = t1035 + t1036;
t817 = t1033 + t1034;
t816 = t1031 + t1032;
t809 = t706 * t841;
t808 = t707 * t841;
t807 = t708 * t838;
t806 = t709 * t838;
t805 = t710 * t835;
t804 = t711 * t835;
t803 = t766 * t832;
t802 = t768 * t828;
t801 = t770 * t824;
t794 = t610 * t1024 - t634 * t640;
t793 = t611 * t1024 - t631 * t640;
t792 = t612 * t1023 - t635 * t641;
t791 = t613 * t1023 - t632 * t641;
t790 = t614 * t1022 - t636 * t642;
t789 = t615 * t1022 - t633 * t642;
t788 = (t619 * t634 + t620 * t631) * t1021;
t787 = (t621 * t635 + t622 * t632) * t1018;
t786 = (t623 * t636 + t624 * t633) * t1015;
t785 = (-t619 * t652 - t631 * t646) * t941;
t784 = (-t620 * t652 - t634 * t646) * t941;
t783 = (-t621 * t653 - t632 * t647) * t937;
t782 = (-t622 * t653 - t635 * t647) * t937;
t781 = (-t623 * t654 - t633 * t648) * t933;
t780 = (-t624 * t654 - t636 * t648) * t933;
t779 = 0.1e1 / pkin(2) ^ 2;
t630 = t636 ^ 2;
t629 = t635 ^ 2;
t628 = t634 ^ 2;
t627 = t633 ^ 2;
t626 = t632 ^ 2;
t625 = t631 ^ 2;
t585 = -t822 - t826 - t830;
t584 = -t823 - t827 - t831;
t583 = -t744 * t830 - t745 * t826 - t746 * t822;
t582 = -t744 * t831 - t745 * t827 - t746 * t823;
t581 = -0.2e1 * t634 * t833 - 0.2e1 * t635 * t829 - 0.2e1 * t636 * t825;
t580 = -0.2e1 * t631 * t833 - 0.2e1 * t632 * t829 - 0.2e1 * t633 * t825;
t579 = t894 + t895 + t896;
t578 = (-t620 * t889 - t622 * t887 - t624 * t885) * t779;
t577 = (-t619 * t889 - t621 * t887 - t623 * t885) * t779;
t576 = t744 * t896 + t745 * t895 + t746 * t894;
t575 = 0.2e1 * t915 * t1045 + 0.2e1 * t921 * t1046 + 0.2e1 * t927 * t1047;
t574 = t615 * t1028 + t613 * t1029 + t611 * t1030;
t573 = t614 * t1028 + t612 * t1029 + t610 * t1030;
t572 = (t1055 * t623 * t624 + t1057 * t621 * t622 + t1059 * t619 * t620) * t779;
t571 = t1049 * t610 * t611 + t1051 * t612 * t613 + t1053 * t614 * t615;
t570 = (t747 * t784 + t749 * t782 + t751 * t780) * t778;
t569 = (t747 * t785 + t749 * t783 + t751 * t781) * t778;
t568 = (t780 * t1042 + t782 * t1043 + t784 * t1044) * t778;
t567 = (t781 * t1042 + t783 * t1043 + t785 * t1044) * t778;
t566 = (-t790 * t913 - t792 * t919 - t794 * t925) * t754;
t565 = (-t789 * t913 - t791 * t919 - t793 * t925) * t754;
t564 = (t790 * t914 + t792 * t920 + t794 * t926) * t754;
t563 = (t789 * t914 + t791 * t920 + t793 * t926) * t754;
t562 = (t747 * t788 + t749 * t787 + t751 * t786) * t778;
t561 = (t786 * t1042 + t787 * t1043 + t788 * t1044) * t778;
t560 = (t816 * t913 + t817 * t919 + t818 * t925) * t754;
t559 = (-t816 * t914 - t817 * t920 - t818 * t926) * t754;
t1 = [t1049 * t640 ^ 2 + t1051 * t641 ^ 2 + t1053 * t642 ^ 2, t882 + t883 + t884, (-t640 * t832 - t641 * t828 - t642 * t824) * t1041, (t640 * t767 * t881 + t641 * t769 * t878 + t642 * t771 * t875) * t1041, t744 * t884 + t745 * t883 + t746 * t882, 0.2e1 * t649 * t723 * t927 + 0.2e1 * t650 * t724 * t921 + 0.2e1 * t651 * t725 * t915, (t836 * t1042 + t839 * t1043 + t842 * t1044) * t1040, (t747 * t842 + t749 * t839 + t751 * t836) * t1040, (t1054 * t648 ^ 2 + t647 ^ 2 * t1056 + t646 ^ 2 * t1058) * t779, (-t754 * t873 + (-t710 * t834 + t606) * t1052) * t642 + (-t754 * t876 + (-t708 * t837 + t605) * t1050) * t641 + (-t754 * t879 + (-t706 * t840 + t604) * t1048) * t640, (t754 * t801 + (t711 * t834 + t609) * t1052) * t642 + (t754 * t802 + (t709 * t837 + t608) * t1050) * t641 + (t754 * t803 + (t707 * t840 + t607) * t1048) * t640, 1; t573, t585, t566, t564, t583, t581, t568, t570, t578, t640 * t1011 + t641 * t1002 + t642 * t993 + (-t610 * t809 - t612 * t807 - t614 * t805) * t778 + (-t610 * t879 - t612 * t876 - t614 * t873) * t754, t640 * t1009 + t641 * t1000 + t642 * t991 + (t610 * t808 + t612 * t806 + t614 * t804) * t778 + (t610 * t803 + t612 * t802 + t614 * t801) * t754, 0; t574, t584, t565, t563, t582, t580, t567, t569, t577, t640 * t1012 + t641 * t1003 + t642 * t994 + (-t611 * t809 - t613 * t807 - t615 * t805) * t778 + (-t611 * t879 - t613 * t876 - t615 * t873) * t754, t640 * t1010 + t641 * t1001 + t642 * t992 + (t611 * t808 + t613 * t806 + t615 * t804) * t778 + (t611 * t803 + t613 * t802 + t615 * t801) * t754, 0; t573, t585, t566, t564, t583, t581, t568, t570, t578, t610 * t1008 + t612 * t999 + t614 * t990 + (t620 * t851 + t622 * t848 + t624 * t845) * t778 + (t634 * t947 + t635 * t946 + t636 * t945) * t754, t610 * t1007 + t612 * t998 + t614 * t989 + (-t620 * t850 - t622 * t847 - t624 * t844) * t778 + (-t634 * t849 - t635 * t846 - t636 * t843) * t754, 0; t1049 * t610 ^ 2 + t1051 * t612 ^ 2 + t1053 * t614 ^ 2, t1055 * t630 + t1057 * t629 + t1059 * t628, (t773 * t908 + t775 * t906 + t777 * t904) * t1041, (-t767 * t908 - t769 * t906 - t771 * t904) * t1041, t628 * t928 + t629 * t922 + t630 * t916, 0.2e1 * t628 * t927 + 0.2e1 * t629 * t921 + 0.2e1 * t630 * t915, (t620 * t634 * t872 + t622 * t635 * t868 + t624 * t636 * t864) * t1040, (t634 * t901 + t635 * t899 + t636 * t897) * t1040, (t1055 * t624 ^ 2 + t1057 * t622 ^ 2 + t1059 * t620 ^ 2) * t779, (t636 * t912 + (t624 * t863 + t591) * t1052) * t614 + (t635 * t918 + (t622 * t867 + t589) * t1050) * t612 + (t634 * t924 + (t620 * t871 + t587) * t1048) * t610, (-t636 * t819 + (-t624 * t862 + t597) * t1052) * t614 + (-t635 * t820 + (-t622 * t866 + t595) * t1050) * t612 + (-t634 * t821 + (-t620 * t870 + t593) * t1048) * t610, 1; t571, t579, t560, t559, t576, t575, t561, t562, t572, t610 * t1012 + t612 * t1003 + t614 * t994 + (t706 * t856 + t708 * t854 + t710 * t852) * t778 + (t1004 * t1035 + t986 * t1031 + t995 * t1033) * t754, t610 * t1010 + t612 * t1001 + t614 * t992 + (-t707 * t856 - t709 * t854 - t711 * t852) * t778 + (-t858 * t1031 - t859 * t1033 - t860 * t1035) * t754, 0; t574, t584, t565, t563, t582, t580, t567, t569, t577, t611 * t1008 + t613 * t999 + t615 * t990 + (t619 * t851 + t621 * t848 + t623 * t845) * t778 + (t631 * t947 + t632 * t946 + t633 * t945) * t754, t611 * t1007 + t613 * t998 + t615 * t989 + (-t619 * t850 - t621 * t847 - t623 * t844) * t778 + (-t631 * t849 - t632 * t846 - t633 * t843) * t754, 0; t571, t579, t560, t559, t576, t575, t561, t562, t572, t611 * t1011 + t613 * t1002 + t615 * t993 + (t706 * t857 + t708 * t855 + t710 * t853) * t778 + (t1004 * t1036 + t986 * t1032 + t995 * t1034) * t754, t611 * t1009 + t613 * t1000 + t615 * t991 + (-t707 * t857 - t709 * t855 - t711 * t853) * t778 + (-t858 * t1032 - t859 * t1034 - t860 * t1036) * t754, 0; t1049 * t611 ^ 2 + t1051 * t613 ^ 2 + t1053 * t615 ^ 2, t1055 * t627 + t1057 * t626 + t1059 * t625, (t773 * t907 + t775 * t905 + t777 * t903) * t1041, (-t767 * t907 - t769 * t905 - t771 * t903) * t1041, t625 * t928 + t626 * t922 + t627 * t916, 0.2e1 * t625 * t927 + 0.2e1 * t626 * t921 + 0.2e1 * t627 * t915, (t619 * t631 * t872 + t621 * t632 * t868 + t623 * t633 * t864) * t1040, (t631 * t902 + t632 * t900 + t633 * t898) * t1040, (t1055 * t623 ^ 2 + t1057 * t621 ^ 2 + t1059 * t619 ^ 2) * t779, (t633 * t912 + (t623 * t863 + t590) * t1052) * t615 + (t632 * t918 + (t621 * t867 + t588) * t1050) * t613 + (t631 * t924 + (t619 * t871 + t586) * t1048) * t611, (-t633 * t819 + (-t623 * t862 + t596) * t1052) * t615 + (-t632 * t820 + (-t621 * t866 + t594) * t1050) * t613 + (-t631 * t821 + (-t619 * t870 + t592) * t1048) * t611, 1;];
tau_reg  = t1;
