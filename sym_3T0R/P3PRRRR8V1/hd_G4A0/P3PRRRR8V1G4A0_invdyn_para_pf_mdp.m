% Calculate minimal parameter regressor of inverse dynamics forces for
% P3PRRRR8V1G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V1G4A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:27
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3PRRRR8V1G4A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V1G4A0_invdyn_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:26:23
% EndTime: 2020-08-06 17:26:47
% DurationCPUTime: 23.94s
% Computational Cost: add. (102093->633), mult. (261810->1249), div. (6831->20), fcn. (264252->34), ass. (0->483)
t2175 = legFrame(3,2);
t2153 = sin(t2175);
t2172 = legFrame(3,1);
t2144 = sin(t2172);
t2150 = cos(t2172);
t2193 = xDP(3);
t2194 = xDP(2);
t2214 = t2144 * t2194 - t2150 * t2193;
t2156 = cos(t2175);
t2195 = xDP(1);
t2366 = t2156 * t2195;
t2060 = t2153 * t2214 + t2366;
t2105 = t2144 * t2193 + t2150 * t2194;
t2165 = sin(pkin(6));
t2167 = cos(pkin(6));
t2024 = t2060 * t2167 + t2105 * t2165;
t2169 = legFrame(3,3);
t2141 = sin(t2169);
t2147 = cos(t2169);
t2220 = t2060 * t2165 - t2105 * t2167;
t2000 = t2024 * t2147 - t2141 * t2220;
t2003 = t2141 * t2024 + t2147 * t2220;
t2182 = sin(qJ(2,3));
t2188 = cos(qJ(2,3));
t2168 = cos(pkin(3));
t2343 = t2168 * t2188;
t2348 = t2168 * t2182;
t2187 = cos(qJ(3,3));
t2433 = pkin(2) * t2187;
t1955 = -(t2000 * t2343 - t2003 * t2182) * t2433 - (t2000 * t2348 + t2003 * t2188) * pkin(5);
t2159 = 0.1e1 / t2187;
t2196 = pkin(5) ^ 2;
t2197 = pkin(2) ^ 2;
t2181 = sin(qJ(3,3));
t2363 = t2159 * t2181;
t2166 = sin(pkin(3));
t2334 = t2182 * t2187;
t2259 = t2166 * t2334;
t2349 = t2168 * t2181;
t2112 = t2259 + t2349;
t2354 = t2166 * t2188;
t2078 = pkin(2) * t2112 - pkin(5) * t2354;
t2436 = 0.1e1 / t2078;
t2276 = t2436 * t2363;
t2339 = t2168 * t2194;
t2266 = t2182 * t2339;
t2340 = t2168 * t2193;
t2267 = t2182 * t2340;
t2324 = t2188 * t2194;
t2325 = t2188 * t2193;
t2338 = t2168 * t2195;
t2018 = (t2153 * t2267 + t2324) * t2150 + (-t2153 * t2266 + t2325) * t2144 - t2182 * t2156 * t2338;
t2021 = (-t2153 * t2325 + t2266) * t2150 + (t2153 * t2324 + t2267) * t2144 + t2188 * t2366;
t2355 = t2166 * t2187;
t1961 = ((t2018 * t2167 - t2021 * t2165) * t2147 - (t2018 * t2165 + t2021 * t2167) * t2141) * t2181 - t2000 * t2355;
t2126 = pkin(2) * t2334 - pkin(5) * t2188;
t2090 = pkin(2) * t2349 + t2126 * t2166;
t2084 = 0.1e1 / t2090;
t2405 = t1961 * t2084;
t1940 = -pkin(5) * t1955 * t2276 + (t2159 * t2196 + t2187 * t2197) * t2405;
t2178 = xDDP(3);
t2179 = xDDP(2);
t2180 = xDDP(1);
t2313 = pkin(5) * t2405;
t2250 = t2181 * t2313;
t2411 = t1955 * t2436;
t2205 = t2250 - t2411;
t2304 = t2436 * t2411;
t2093 = t2141 * t2167 + t2147 * t2165;
t2096 = -t2141 * t2165 + t2147 * t2167;
t2326 = t2187 * t2188;
t2430 = pkin(5) * t2182;
t2129 = pkin(2) * t2326 + t2430;
t2360 = t2166 * t2181;
t2375 = t2126 * t2168;
t2208 = pkin(2) * t2360 - t2375;
t2006 = (t2093 * t2208 + t2096 * t2129) * t2156 + t2153 * t2090;
t2396 = t2006 * t2084;
t2051 = t2129 * t2167 + t2165 * t2208;
t2054 = -t2129 * t2165 + t2167 * t2208;
t1991 = -t2090 * t2156 + (t2051 * t2147 + t2054 * t2141) * t2153;
t2009 = -t2051 * t2141 + t2054 * t2147;
t1971 = -t1991 * t2150 - t2009 * t2144;
t2401 = t1971 * t2084;
t1970 = t1991 * t2144 - t2009 * t2150;
t2402 = t1970 * t2084;
t2378 = t2084 * t2159;
t2437 = t1961 * t2378 * t2436;
t2440 = -g(2) * t2144 + g(3) * t2150;
t2448 = t2205 * t2159 ^ 2 * t2304 + g(1) * t2153 - t1940 * t2437 + t2156 * t2440 - t2178 * t2401 - t2179 * t2402 - t2180 * t2396;
t2176 = legFrame(2,2);
t2154 = sin(t2176);
t2173 = legFrame(2,1);
t2145 = sin(t2173);
t2151 = cos(t2173);
t2213 = t2145 * t2194 - t2151 * t2193;
t2157 = cos(t2176);
t2365 = t2157 * t2195;
t2061 = t2154 * t2213 + t2365;
t2106 = t2145 * t2193 + t2151 * t2194;
t2025 = t2061 * t2167 + t2106 * t2165;
t2170 = legFrame(2,3);
t2142 = sin(t2170);
t2148 = cos(t2170);
t2219 = t2061 * t2165 - t2106 * t2167;
t2001 = t2025 * t2148 - t2142 * t2219;
t2004 = t2142 * t2025 + t2148 * t2219;
t2184 = sin(qJ(2,2));
t2190 = cos(qJ(2,2));
t2342 = t2168 * t2190;
t2346 = t2168 * t2184;
t2189 = cos(qJ(3,2));
t2432 = pkin(2) * t2189;
t1956 = -(t2001 * t2342 - t2004 * t2184) * t2432 - (t2001 * t2346 + t2004 * t2190) * pkin(5);
t2161 = 0.1e1 / t2189;
t2183 = sin(qJ(3,2));
t2362 = t2161 * t2183;
t2331 = t2184 * t2189;
t2258 = t2166 * t2331;
t2347 = t2168 * t2183;
t2114 = t2258 + t2347;
t2352 = t2166 * t2190;
t2079 = pkin(2) * t2114 - pkin(5) * t2352;
t2435 = 0.1e1 / t2079;
t2273 = t2435 * t2362;
t2264 = t2184 * t2339;
t2265 = t2184 * t2340;
t2320 = t2190 * t2194;
t2321 = t2190 * t2193;
t2019 = (t2154 * t2265 + t2320) * t2151 + (-t2154 * t2264 + t2321) * t2145 - t2184 * t2157 * t2338;
t2022 = (-t2154 * t2321 + t2264) * t2151 + (t2154 * t2320 + t2265) * t2145 + t2190 * t2365;
t2353 = t2166 * t2189;
t1962 = ((t2019 * t2167 - t2022 * t2165) * t2148 - (t2019 * t2165 + t2022 * t2167) * t2142) * t2183 - t2001 * t2353;
t2127 = pkin(2) * t2331 - pkin(5) * t2190;
t2091 = pkin(2) * t2347 + t2127 * t2166;
t2086 = 0.1e1 / t2091;
t2404 = t1962 * t2086;
t1941 = -pkin(5) * t1956 * t2273 + (t2161 * t2196 + t2189 * t2197) * t2404;
t2312 = pkin(5) * t2404;
t2249 = t2183 * t2312;
t2410 = t1956 * t2435;
t2204 = t2249 - t2410;
t2303 = t2435 * t2410;
t2094 = t2142 * t2167 + t2148 * t2165;
t2097 = -t2142 * t2165 + t2148 * t2167;
t2322 = t2189 * t2190;
t2429 = pkin(5) * t2184;
t2130 = pkin(2) * t2322 + t2429;
t2358 = t2166 * t2183;
t2374 = t2127 * t2168;
t2207 = pkin(2) * t2358 - t2374;
t2007 = (t2094 * t2207 + t2097 * t2130) * t2157 + t2154 * t2091;
t2395 = t2007 * t2086;
t2052 = t2130 * t2167 + t2165 * t2207;
t2055 = -t2130 * t2165 + t2167 * t2207;
t1992 = -t2091 * t2157 + (t2052 * t2148 + t2055 * t2142) * t2154;
t2010 = -t2052 * t2142 + t2055 * t2148;
t1973 = -t1992 * t2151 - t2010 * t2145;
t2399 = t1973 * t2086;
t1972 = t1992 * t2145 - t2010 * t2151;
t2400 = t1972 * t2086;
t2377 = t2086 * t2161;
t2438 = t1962 * t2377 * t2435;
t2441 = -g(2) * t2145 + g(3) * t2151;
t2447 = t2204 * t2161 ^ 2 * t2303 + g(1) * t2154 - t1941 * t2438 + t2157 * t2441 - t2178 * t2399 - t2179 * t2400 - t2180 * t2395;
t2177 = legFrame(1,2);
t2155 = sin(t2177);
t2174 = legFrame(1,1);
t2146 = sin(t2174);
t2152 = cos(t2174);
t2212 = t2146 * t2194 - t2152 * t2193;
t2158 = cos(t2177);
t2364 = t2158 * t2195;
t2062 = t2155 * t2212 + t2364;
t2107 = t2146 * t2193 + t2152 * t2194;
t2026 = t2062 * t2167 + t2107 * t2165;
t2171 = legFrame(1,3);
t2143 = sin(t2171);
t2149 = cos(t2171);
t2218 = t2062 * t2165 - t2107 * t2167;
t2002 = t2026 * t2149 - t2143 * t2218;
t2005 = t2143 * t2026 + t2149 * t2218;
t2186 = sin(qJ(2,1));
t2192 = cos(qJ(2,1));
t2341 = t2168 * t2192;
t2344 = t2168 * t2186;
t2191 = cos(qJ(3,1));
t2431 = pkin(2) * t2191;
t1957 = -(t2002 * t2341 - t2005 * t2186) * t2431 - (t2002 * t2344 + t2005 * t2192) * pkin(5);
t2163 = 0.1e1 / t2191;
t2185 = sin(qJ(3,1));
t2361 = t2163 * t2185;
t2328 = t2186 * t2191;
t2257 = t2166 * t2328;
t2345 = t2168 * t2185;
t2116 = t2257 + t2345;
t2350 = t2166 * t2192;
t2080 = pkin(2) * t2116 - pkin(5) * t2350;
t2434 = 0.1e1 / t2080;
t2270 = t2434 * t2361;
t2262 = t2186 * t2339;
t2263 = t2186 * t2340;
t2317 = t2192 * t2194;
t2318 = t2192 * t2193;
t2020 = (t2155 * t2263 + t2317) * t2152 + (-t2155 * t2262 + t2318) * t2146 - t2186 * t2158 * t2338;
t2023 = (-t2155 * t2318 + t2262) * t2152 + (t2155 * t2317 + t2263) * t2146 + t2192 * t2364;
t2351 = t2166 * t2191;
t1963 = ((t2020 * t2167 - t2023 * t2165) * t2149 - (t2020 * t2165 + t2023 * t2167) * t2143) * t2185 - t2002 * t2351;
t2128 = pkin(2) * t2328 - pkin(5) * t2192;
t2092 = pkin(2) * t2345 + t2128 * t2166;
t2088 = 0.1e1 / t2092;
t2403 = t1963 * t2088;
t1942 = -pkin(5) * t1957 * t2270 + (t2163 * t2196 + t2191 * t2197) * t2403;
t2311 = pkin(5) * t2403;
t2248 = t2185 * t2311;
t2409 = t1957 * t2434;
t2203 = t2248 - t2409;
t2302 = t2434 * t2409;
t2095 = t2143 * t2167 + t2149 * t2165;
t2098 = -t2143 * t2165 + t2149 * t2167;
t2319 = t2191 * t2192;
t2428 = pkin(5) * t2186;
t2131 = pkin(2) * t2319 + t2428;
t2356 = t2166 * t2185;
t2373 = t2128 * t2168;
t2206 = pkin(2) * t2356 - t2373;
t2008 = (t2095 * t2206 + t2098 * t2131) * t2158 + t2155 * t2092;
t2394 = t2008 * t2088;
t2053 = t2131 * t2167 + t2165 * t2206;
t2056 = -t2131 * t2165 + t2167 * t2206;
t1993 = -t2092 * t2158 + (t2053 * t2149 + t2056 * t2143) * t2155;
t2011 = -t2053 * t2143 + t2056 * t2149;
t1975 = -t1993 * t2152 - t2011 * t2146;
t2397 = t1975 * t2088;
t1974 = t1993 * t2146 - t2011 * t2152;
t2398 = t1974 * t2088;
t2376 = t2088 * t2163;
t2439 = t1963 * t2376 * t2434;
t2442 = -g(2) * t2146 + g(3) * t2152;
t2446 = t2203 * t2163 ^ 2 * t2302 + g(1) * t2155 - t1942 * t2439 + t2158 * t2442 - t2178 * t2397 - t2179 * t2398 - t2180 * t2394;
t2198 = 0.1e1 / pkin(2);
t2418 = MDP(9) * t2198;
t2200 = t2187 ^ 2;
t2160 = 0.1e1 / t2200;
t2385 = t2436 * t2198;
t2275 = t2159 * t2385;
t2228 = t1955 * t2166 * t2275;
t2100 = t2165 * t2188 + t2167 * t2348;
t2103 = -t2165 * t2348 + t2167 * t2188;
t2057 = t2100 * t2147 + t2103 * t2141;
t2390 = (t2057 * t2181 + t2096 * t2355) * t2156;
t2280 = t2159 * t2390;
t2235 = t2084 * t2280;
t2336 = t2181 * t2182;
t2261 = t2166 * t2336;
t2372 = t2144 * t2153;
t2033 = t2093 * t2150 + t2096 * t2372;
t2216 = t2100 * t2141 - t2103 * t2147;
t1985 = (-t2057 * t2372 - t2150 * t2216) * t2181 - t2033 * t2355;
t2286 = t1985 * t2378;
t2369 = t2150 * t2153;
t2028 = -t2093 * t2144 + t2096 * t2369;
t1982 = (t2057 * t2369 - t2144 * t2216) * t2181 + t2028 * t2355;
t2289 = t1982 * t2378;
t2337 = t2168 * t2198;
t2386 = t2436 * t2181;
t1907 = t2178 * t2289 + t2179 * t2286 - t2180 * t2235 + (-(pkin(2) * (t2337 * t2411 + t2354 * t2405) * t2200 - (t1955 * t2386 - t2313) * t2259 + t2168 * t2205) * t2437 - (t2188 * t2228 + (-t2261 + (-t2159 + t2187) * t2168) * t2405) * t2304) * t2160;
t2417 = t1907 * t2436;
t2416 = t1907 * t2181;
t2201 = t2189 ^ 2;
t2162 = 0.1e1 / t2201;
t2382 = t2435 * t2198;
t2272 = t2161 * t2382;
t2226 = t1956 * t2166 * t2272;
t2101 = t2165 * t2190 + t2167 * t2346;
t2104 = -t2165 * t2346 + t2167 * t2190;
t2058 = t2101 * t2148 + t2104 * t2142;
t2389 = (t2058 * t2183 + t2097 * t2353) * t2157;
t2279 = t2161 * t2389;
t2234 = t2086 * t2279;
t2333 = t2183 * t2184;
t2260 = t2166 * t2333;
t2371 = t2145 * t2154;
t2034 = t2094 * t2151 + t2097 * t2371;
t2215 = t2101 * t2142 - t2104 * t2148;
t1986 = (-t2058 * t2371 - t2151 * t2215) * t2183 - t2034 * t2353;
t2285 = t1986 * t2377;
t2368 = t2151 * t2154;
t2030 = -t2094 * t2145 + t2097 * t2368;
t1983 = (t2058 * t2368 - t2145 * t2215) * t2183 + t2030 * t2353;
t2288 = t1983 * t2377;
t2383 = t2435 * t2183;
t1908 = t2178 * t2288 + t2179 * t2285 - t2180 * t2234 + (-(pkin(2) * (t2337 * t2410 + t2352 * t2404) * t2201 - (t1956 * t2383 - t2312) * t2258 + t2168 * t2204) * t2438 - (t2190 * t2226 + (-t2260 + (-t2161 + t2189) * t2168) * t2404) * t2303) * t2162;
t2415 = t1908 * t2435;
t2414 = t1908 * t2183;
t2202 = t2191 ^ 2;
t2164 = 0.1e1 / t2202;
t2379 = t2434 * t2198;
t2269 = t2163 * t2379;
t2224 = t1957 * t2166 * t2269;
t2099 = t2165 * t2344 - t2167 * t2192;
t2102 = t2165 * t2192 + t2167 * t2344;
t2059 = -t2099 * t2143 + t2102 * t2149;
t2388 = (t2059 * t2185 + t2098 * t2351) * t2158;
t2278 = t2163 * t2388;
t2233 = t2088 * t2278;
t2329 = t2186 * t2166;
t2268 = t2185 * t2329;
t2370 = t2146 * t2155;
t2035 = t2095 * t2152 + t2098 * t2370;
t2217 = t2099 * t2149 + t2102 * t2143;
t1987 = (-t2059 * t2370 - t2152 * t2217) * t2185 - t2035 * t2351;
t2284 = t1987 * t2376;
t2367 = t2152 * t2155;
t2032 = -t2095 * t2146 + t2098 * t2367;
t1984 = (t2059 * t2367 - t2146 * t2217) * t2185 + t2032 * t2351;
t2287 = t1984 * t2376;
t2380 = t2434 * t2185;
t1909 = t2178 * t2287 + t2179 * t2284 - t2180 * t2233 + (-(pkin(2) * (t2337 * t2409 + t2350 * t2403) * t2202 - (t1957 * t2380 - t2311) * t2257 + t2168 * t2203) * t2439 - (t2192 * t2224 + (-t2268 + (-t2163 + t2191) * t2168) * t2403) * t2302) * t2164;
t2413 = t1909 * t2434;
t2412 = t1909 * t2185;
t2408 = t1961 ^ 2 / t2090 ^ 2;
t2407 = t1962 ^ 2 / t2091 ^ 2;
t2406 = t1963 ^ 2 / t2092 ^ 2;
t2393 = ((-t2093 * t2182 + t2096 * t2343) * t2433 + pkin(5) * (t2093 * t2188 + t2096 * t2348)) * t2156;
t2392 = ((-t2094 * t2184 + t2097 * t2342) * t2432 + pkin(5) * (t2094 * t2190 + t2097 * t2346)) * t2157;
t2391 = ((-t2095 * t2186 + t2098 * t2341) * t2431 + pkin(5) * (t2095 * t2192 + t2098 * t2344)) * t2158;
t2387 = t2436 * t2159;
t2384 = t2435 * t2161;
t2381 = t2434 * t2163;
t2359 = t2166 * t2182;
t2357 = t2166 * t2184;
t2335 = t2181 * t2188;
t2332 = t2183 * t2190;
t2330 = t2185 * t2192;
t2327 = t2187 * t2168;
t2323 = t2189 * t2168;
t2120 = g(2) * t2150 + g(3) * t2144;
t2253 = t2156 * g(1) - t2153 * t2440;
t2039 = t2120 * t2165 + t2167 * t2253;
t2042 = -t2120 * t2167 + t2165 * t2253;
t1922 = (-t2448 * t2166 + (t2039 * t2141 + t2042 * t2147) * t2168) * t2188 + t2182 * (t2039 * t2147 - t2042 * t2141);
t2310 = t1922 * t2363;
t2121 = g(2) * t2151 + g(3) * t2145;
t2252 = t2157 * g(1) - t2154 * t2441;
t2040 = t2121 * t2165 + t2167 * t2252;
t2043 = -t2121 * t2167 + t2165 * t2252;
t1923 = (-t2447 * t2166 + (t2040 * t2142 + t2043 * t2148) * t2168) * t2190 + t2184 * (t2040 * t2148 - t2043 * t2142);
t2309 = t1923 * t2362;
t2122 = g(2) * t2152 + g(3) * t2146;
t2251 = t2158 * g(1) - t2155 * t2442;
t2041 = t2122 * t2165 + t2167 * t2251;
t2044 = -t2122 * t2167 + t2165 * t2251;
t1924 = (-t2446 * t2166 + (t2041 * t2143 + t2044 * t2149) * t2168) * t2192 + t2186 * (t2041 * t2149 - t2044 * t2143);
t2308 = t1924 * t2361;
t2199 = 0.1e1 / pkin(2) ^ 2;
t2307 = t1955 ^ 2 / t2078 ^ 2 * t2199;
t2306 = t1956 ^ 2 / t2079 ^ 2 * t2199;
t2305 = t1957 ^ 2 / t2080 ^ 2 * t2199;
t2301 = t2160 * t2408;
t2300 = t2162 * t2407;
t2299 = t2164 * t2406;
t2027 = t2093 * t2369 + t2096 * t2144;
t1976 = (-t2027 * t2182 + t2028 * t2343) * t2433 + pkin(5) * (t2027 * t2188 + t2028 * t2348);
t2295 = t1976 * t2387;
t2036 = t2093 * t2372 - t2096 * t2150;
t1977 = -(t2033 * t2343 - t2036 * t2182) * t2433 - pkin(5) * (t2033 * t2348 + t2036 * t2188);
t2294 = t1977 * t2387;
t2029 = t2094 * t2368 + t2097 * t2145;
t1978 = (-t2029 * t2184 + t2030 * t2342) * t2432 + pkin(5) * (t2029 * t2190 + t2030 * t2346);
t2293 = t1978 * t2384;
t2037 = t2094 * t2371 - t2097 * t2151;
t1979 = -(t2034 * t2342 - t2037 * t2184) * t2432 - pkin(5) * (t2034 * t2346 + t2037 * t2190);
t2292 = t1979 * t2384;
t2031 = t2095 * t2367 + t2098 * t2146;
t1980 = (-t2031 * t2186 + t2032 * t2341) * t2431 + pkin(5) * (t2031 * t2192 + t2032 * t2344);
t2291 = t1980 * t2381;
t2038 = t2095 * t2370 - t2098 * t2152;
t1981 = -(t2035 * t2341 - t2038 * t2186) * t2431 - pkin(5) * (t2035 * t2344 + t2038 * t2192);
t2290 = t1981 * t2381;
t2283 = t2436 * t2393;
t2282 = t2435 * t2392;
t2281 = t2434 * t2391;
t2277 = t2084 * t2385;
t2274 = t2086 * t2382;
t2271 = t2088 * t2379;
t1904 = t2188 * t1907;
t2256 = (t2307 + t2408) * t2160 * t2182 - t1904;
t1905 = t2190 * t1908;
t2255 = (t2306 + t2407) * t2162 * t2184 - t1905;
t1906 = t2192 * t1909;
t2254 = (t2305 + t2406) * t2164 * t2186 - t1906;
t2247 = t1907 * t2276;
t2246 = t1908 * t2273;
t2245 = t1909 * t2270;
t2244 = t1955 * t2277;
t2243 = t1956 * t2274;
t2242 = t1957 * t2271;
t2241 = t1961 * t2277;
t2240 = t1962 * t2274;
t2239 = t1963 * t2271;
t2238 = t2159 * t2283;
t2237 = t2161 * t2282;
t2236 = t2163 * t2281;
t1994 = t2105 * t2430 - t2060 * t2375 + (t2060 * t2360 + t2105 * t2326) * pkin(2);
t1997 = t2060 * t2430 + t2105 * t2375 + (t2060 * t2326 - t2105 * t2360) * pkin(2);
t2232 = ((t1994 * t2165 + t1997 * t2167) * t2147 + (t1994 * t2167 - t1997 * t2165) * t2141 + (t2153 * t2195 - t2156 * t2214) * t2090) * t2244;
t1995 = t2106 * t2429 - t2061 * t2374 + (t2061 * t2358 + t2106 * t2322) * pkin(2);
t1998 = t2061 * t2429 + t2106 * t2374 + (t2061 * t2322 - t2106 * t2358) * pkin(2);
t2231 = ((t1995 * t2165 + t1998 * t2167) * t2148 + (t1995 * t2167 - t1998 * t2165) * t2142 + (t2154 * t2195 - t2157 * t2213) * t2091) * t2243;
t1996 = t2107 * t2428 - t2062 * t2373 + (t2062 * t2356 + t2107 * t2319) * pkin(2);
t1999 = t2062 * t2428 + t2107 * t2373 + (t2062 * t2319 - t2107 * t2356) * pkin(2);
t2230 = ((t1996 * t2165 + t1999 * t2167) * t2149 + (t1996 * t2167 - t1999 * t2165) * t2143 + (t2155 * t2195 - t2158 * t2212) * t2092) * t2242;
t2229 = t1955 * t2241;
t2227 = t1956 * t2240;
t2225 = t1957 * t2239;
t2223 = t2301 * t2386;
t2222 = t2300 * t2383;
t2221 = t2299 * t2380;
t2211 = 0.2e1 * t2229;
t2210 = 0.2e1 * t2227;
t2209 = 0.2e1 * t2225;
t2111 = -t2261 + t2327;
t2113 = -t2260 + t2323;
t2115 = t2168 * t2191 - t2268;
t2119 = t2168 * t2328 - t2356;
t2118 = t2184 * t2323 - t2358;
t2117 = t2182 * t2327 - t2360;
t2110 = t2185 * t2344 + t2351;
t2109 = t2168 * t2333 + t2353;
t2108 = t2168 * t2336 + t2355;
t2050 = t2122 * t2143 + t2149 * t2251;
t2049 = -t2122 * t2149 + t2143 * t2251;
t2048 = t2121 * t2142 + t2148 * t2252;
t2047 = -t2121 * t2148 + t2142 * t2252;
t2046 = t2120 * t2141 + t2147 * t2253;
t2045 = -t2120 * t2147 + t2141 * t2253;
t1948 = (t2164 - 0.2e1) * t2406;
t1947 = (t2162 - 0.2e1) * t2407;
t1946 = (t2160 - 0.2e1) * t2408;
t1930 = (t2165 * t2341 + t2167 * t2186) * t2050 + (-t2165 * t2186 + t2167 * t2341) * t2049 - t2446 * t2350;
t1929 = (t2165 * t2342 + t2167 * t2184) * t2048 + (-t2165 * t2184 + t2167 * t2342) * t2047 - t2447 * t2352;
t1928 = (t2165 * t2343 + t2167 * t2182) * t2046 + t2045 * (-t2165 * t2182 + t2167 * t2343) - t2448 * t2354;
t1927 = -t2049 * t2102 - t2050 * t2099 + t2329 * t2446;
t1926 = -t2047 * t2101 + t2048 * t2104 + t2357 * t2447;
t1925 = -t2045 * t2100 + t2046 * t2103 + t2359 * t2448;
t1921 = (t1980 * t2178 + t1981 * t2179 - t2180 * t2391) * t2269 + (-t2168 * t1942 * t2239 - (-t2185 * t2128 * t2224 + t2168 * (-t2163 * t2248 + t2191 * t2409)) * t2242) * t2164;
t1920 = (t1978 * t2178 + t1979 * t2179 - t2180 * t2392) * t2272 + (-t2168 * t1941 * t2240 - (-t2183 * t2127 * t2226 + t2168 * (-t2161 * t2249 + t2189 * t2410)) * t2243) * t2162;
t1919 = (t1976 * t2178 + t1977 * t2179 - t2180 * t2393) * t2275 + (-t2168 * t1940 * t2241 - (-t2181 * t2126 * t2228 + t2168 * (-t2159 * t2250 + t2187 * t2411)) * t2244) * t2160;
t1918 = t1921 * t2185 + t2163 * t2305;
t1917 = t1920 * t2183 + t2161 * t2306;
t1916 = t1919 * t2181 + t2159 * t2307;
t1915 = -t2164 * t2185 * t2305 + t1921 * t2191;
t1914 = -t2162 * t2183 * t2306 + t1920 * t2189;
t1913 = -t2160 * t2181 * t2307 + t1919 * t2187;
t1912 = t2164 * t2192 * t2209 + t1921 * t2186;
t1911 = t2162 * t2190 * t2210 + t1920 * t2184;
t1910 = t2160 * t2188 * t2211 + t1919 * t2182;
t1903 = t1908 * t2184 + t2190 * t2300;
t1902 = -t2184 * t2300 + t1905;
t1901 = t1909 * t2186 + t2192 * t2299;
t1900 = t1907 * t2182 + t2188 * t2301;
t1899 = -t2186 * t2299 + t1906;
t1898 = -t2182 * t2301 + t1904;
t1897 = (t2163 * t2209 + t2412) * t2185;
t1896 = (t2161 * t2210 + t2414) * t2183;
t1895 = (t2159 * t2211 + t2416) * t2181;
t1894 = 0.2e1 * t2191 * t2412 + (-0.2e1 * t2164 + 0.4e1) * t2225;
t1893 = 0.2e1 * t2189 * t2414 + (-0.2e1 * t2162 + 0.4e1) * t2227;
t1892 = 0.2e1 * t2187 * t2416 + (-0.2e1 * t2160 + 0.4e1) * t2229;
t1891 = t2050 * (-t2119 * t2165 + t2167 * t2319) - (t2119 * t2167 + t2165 * t2319) * t2049 + (-t2168 + (t2115 + t2268) * t2163) * t2230 + t2446 * t2116;
t1890 = (-t2118 * t2165 + t2167 * t2322) * t2048 - (t2118 * t2167 + t2165 * t2322) * t2047 + (-t2168 + (t2113 + t2260) * t2161) * t2231 + t2447 * t2114;
t1889 = (-t2117 * t2165 + t2167 * t2326) * t2046 - (t2117 * t2167 + t2165 * t2326) * t2045 + (-t2168 + (t2111 + t2261) * t2159) * t2232 + t2448 * t2112;
t1888 = t2050 * (-t2110 * t2165 + t2167 * t2330) - (t2110 * t2167 + t2165 * t2330) * t2049 + (-t2329 + (t2116 - t2345) * t2163) * t2230 - t2446 * t2115;
t1887 = t2048 * (-t2109 * t2165 + t2167 * t2332) - t2047 * (t2109 * t2167 + t2165 * t2332) + (-t2357 + (t2114 - t2347) * t2161) * t2231 - t2447 * t2113;
t1886 = t2046 * (-t2108 * t2165 + t2167 * t2335) - t2045 * (t2108 * t2167 + t2165 * t2335) + (-t2359 + (t2112 - t2349) * t2159) * t2232 - t2448 * t2111;
t1885 = (-t2191 * t1912 + t2254 * t2185) * t2166 - t2168 * t1918;
t1884 = (-t2189 * t1911 + t2255 * t2183) * t2166 - t2168 * t1917;
t1883 = (-t2187 * t1910 + t2256 * t2181) * t2166 - t2168 * t1916;
t1882 = (-t2185 * t1912 - t2254 * t2191) * t2166 + t2168 * t1915;
t1881 = (-t2183 * t1911 - t2255 * t2189) * t2166 + t2168 * t1914;
t1880 = (-t2181 * t1910 - t2256 * t2187) * t2166 + t2168 * t1913;
t1 = [(-t2394 * t2446 - t2395 * t2447 - t2396 * t2448) * MDP(1) + (-t1907 * t2235 - t1908 * t2234 - t1909 * t2233) * MDP(2) + (-t1928 * t2235 - t1929 * t2234 - t1930 * t2233 + (t1898 * t2396 + t1899 * t2394 + t1902 * t2395) * t2166) * MDP(3) + (-t1925 * t2235 - t1926 * t2234 - t1927 * t2233 + (-t1900 * t2396 - t1901 * t2394 - t1903 * t2395) * t2166) * MDP(4) + (-t1895 * t2235 - t1896 * t2234 - t1897 * t2233 + (t2221 * t2391 + t2222 * t2392 + t2223 * t2393) * t2198) * MDP(5) + (-t1892 * t2235 - t1893 * t2234 - t1894 * t2233 + (-t1946 * t2238 - t1947 * t2237 - t1948 * t2236) * t2198) * MDP(6) + (-t1916 * t2235 - t1917 * t2234 - t1918 * t2233 + (-t2236 * t2412 - t2237 * t2414 - t2238 * t2416) * t2198) * MDP(7) + (-t1913 * t2235 - t1914 * t2234 - t1915 * t2233 + (-t1907 * t2283 - t1908 * t2282 - t1909 * t2281) * t2198) * MDP(8) + (-t1919 * t2238 - t1920 * t2237 - t1921 * t2236) * t2418 + ((t2008 * t1882 - t1924 * t2388) * t2088 + (t2007 * t1881 - t1923 * t2389) * t2086 + (t2006 * t1880 - t1922 * t2390) * t2084 + (-t1886 * t2238 - t1887 * t2237 - t1888 * t2236) * t2198) * MDP(10) + ((t1924 * t2185 * t2278 + t2008 * t1885) * t2088 + (t1923 * t2183 * t2279 + t2007 * t1884) * t2086 + (t1922 * t2181 * t2280 + t2006 * t1883) * t2084 + (-t1889 * t2238 - t1890 * t2237 - t1891 * t2236) * t2198) * MDP(11) + (t2180 - g(1)) * MDP(12); (-t2398 * t2446 - t2400 * t2447 - t2402 * t2448) * MDP(1) + (t1907 * t2286 + t1908 * t2285 + t1909 * t2284) * MDP(2) + (t1928 * t2286 + t1929 * t2285 + t1930 * t2284 + (t1898 * t2402 + t1899 * t2398 + t1902 * t2400) * t2166) * MDP(3) + (t1925 * t2286 + t1926 * t2285 + t1927 * t2284 + (-t1900 * t2402 - t1901 * t2398 - t1903 * t2400) * t2166) * MDP(4) + (t1895 * t2286 + t1896 * t2285 + t1897 * t2284 + (-t1977 * t2223 - t1979 * t2222 - t1981 * t2221) * t2198) * MDP(5) + (t1892 * t2286 + t1893 * t2285 + t1894 * t2284 + (t1946 * t2294 + t1947 * t2292 + t1948 * t2290) * t2198) * MDP(6) + (t1916 * t2286 + t1917 * t2285 + t1918 * t2284 + (t1977 * t2247 + t1979 * t2246 + t1981 * t2245) * t2198) * MDP(7) + (t1913 * t2286 + t1914 * t2285 + t1915 * t2284 + (t1977 * t2417 + t1979 * t2415 + t1981 * t2413) * t2198) * MDP(8) + (t1919 * t2294 + t1920 * t2292 + t1921 * t2290) * t2418 + ((t1882 * t1974 + t1924 * t1987) * t2088 + (t1881 * t1972 + t1923 * t1986) * t2086 + (t1880 * t1970 + t1922 * t1985) * t2084 + (t1886 * t2294 + t1887 * t2292 + t1888 * t2290) * t2198) * MDP(10) + ((t1974 * t1885 - t1987 * t2308) * t2088 + (t1972 * t1884 - t1986 * t2309) * t2086 + (t1970 * t1883 - t1985 * t2310) * t2084 + (t1889 * t2294 + t1890 * t2292 + t1891 * t2290) * t2198) * MDP(11) + (t2179 - g(2)) * MDP(12); (-t2397 * t2446 - t2399 * t2447 - t2401 * t2448) * MDP(1) + (t1907 * t2289 + t1908 * t2288 + t1909 * t2287) * MDP(2) + (t1928 * t2289 + t1929 * t2288 + t1930 * t2287 + (t1898 * t2401 + t1899 * t2397 + t1902 * t2399) * t2166) * MDP(3) + (t1925 * t2289 + t1926 * t2288 + t1927 * t2287 + (-t1900 * t2401 - t1901 * t2397 - t1903 * t2399) * t2166) * MDP(4) + (t1895 * t2289 + t1896 * t2288 + t1897 * t2287 + (-t1976 * t2223 - t1978 * t2222 - t1980 * t2221) * t2198) * MDP(5) + (t1892 * t2289 + t1893 * t2288 + t1894 * t2287 + (t1946 * t2295 + t1947 * t2293 + t1948 * t2291) * t2198) * MDP(6) + (t1916 * t2289 + t1917 * t2288 + t1918 * t2287 + (t1976 * t2247 + t1978 * t2246 + t1980 * t2245) * t2198) * MDP(7) + (t1913 * t2289 + t1914 * t2288 + t1915 * t2287 + (t1976 * t2417 + t1978 * t2415 + t1980 * t2413) * t2198) * MDP(8) + (t1919 * t2295 + t1920 * t2293 + t1921 * t2291) * t2418 + ((t1882 * t1975 + t1924 * t1984) * t2088 + (t1881 * t1973 + t1923 * t1983) * t2086 + (t1880 * t1971 + t1922 * t1982) * t2084 + (t1886 * t2295 + t1887 * t2293 + t1888 * t2291) * t2198) * MDP(10) + ((t1975 * t1885 - t1984 * t2308) * t2088 + (t1973 * t1884 - t1983 * t2309) * t2086 + (t1971 * t1883 - t1982 * t2310) * t2084 + (t1889 * t2295 + t1890 * t2293 + t1891 * t2291) * t2198) * MDP(11) + (t2178 - g(3)) * MDP(12);];
tauX  = t1;
