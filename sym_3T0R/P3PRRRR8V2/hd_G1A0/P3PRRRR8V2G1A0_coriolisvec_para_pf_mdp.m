% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:36:21
% EndTime: 2020-08-06 17:36:32
% DurationCPUTime: 10.59s
% Computational Cost: add. (51108->439), mult. (99165->898), div. (3834->17), fcn. (93960->22), ass. (0->376)
t2406 = cos(qJ(2,3));
t2413 = pkin(7) + pkin(6);
t2370 = t2406 * t2413;
t2400 = sin(qJ(2,3));
t2352 = pkin(2) * t2400 - t2370;
t2393 = sin(pkin(4));
t2405 = cos(qJ(3,3));
t2395 = cos(pkin(4));
t2399 = sin(qJ(3,3));
t2564 = t2395 * t2399;
t2576 = t2393 * t2400;
t2389 = t2405 ^ 2;
t2623 = pkin(3) * t2389;
t2299 = 0.1e1 / ((pkin(3) * t2564 + t2352 * t2393) * t2405 + pkin(2) * t2564 + t2576 * t2623);
t2392 = sin(pkin(8));
t2394 = cos(pkin(8));
t2411 = xDP(2);
t2412 = xDP(1);
t2347 = t2392 * t2411 + t2394 * t2412;
t2348 = -t2392 * t2412 + t2394 * t2411;
t2396 = legFrame(3,3);
t2377 = sin(t2396);
t2380 = cos(t2396);
t2305 = t2347 * t2380 + t2348 * t2377;
t2563 = t2395 * t2400;
t2571 = t2393 * t2405;
t2278 = ((-t2347 * t2563 + t2348 * t2406) * t2380 - (t2347 * t2406 + t2348 * t2563) * t2377) * t2399 - t2305 * t2571;
t2555 = t2400 * t2405;
t2326 = pkin(3) * t2555 + t2352;
t2367 = pkin(3) * t2405 + pkin(2);
t2349 = t2367 * t2564;
t2314 = t2326 * t2571 + t2349;
t2308 = 0.1e1 / t2314;
t2595 = t2278 * t2308;
t2506 = t2299 * t2595;
t2408 = cos(qJ(2,2));
t2371 = t2408 * t2413;
t2402 = sin(qJ(2,2));
t2353 = pkin(2) * t2402 - t2371;
t2407 = cos(qJ(3,2));
t2401 = sin(qJ(3,2));
t2562 = t2395 * t2401;
t2574 = t2393 * t2402;
t2390 = t2407 ^ 2;
t2622 = pkin(3) * t2390;
t2300 = 0.1e1 / ((pkin(3) * t2562 + t2353 * t2393) * t2407 + pkin(2) * t2562 + t2574 * t2622);
t2397 = legFrame(2,3);
t2378 = sin(t2397);
t2381 = cos(t2397);
t2306 = t2347 * t2381 + t2348 * t2378;
t2561 = t2395 * t2402;
t2569 = t2393 * t2407;
t2279 = ((-t2347 * t2561 + t2348 * t2408) * t2381 - (t2347 * t2408 + t2348 * t2561) * t2378) * t2401 - t2306 * t2569;
t2551 = t2402 * t2407;
t2327 = pkin(3) * t2551 + t2353;
t2368 = pkin(3) * t2407 + pkin(2);
t2350 = t2368 * t2562;
t2315 = t2327 * t2569 + t2350;
t2310 = 0.1e1 / t2315;
t2594 = t2279 * t2310;
t2503 = t2300 * t2594;
t2410 = cos(qJ(2,1));
t2372 = t2410 * t2413;
t2404 = sin(qJ(2,1));
t2354 = pkin(2) * t2404 - t2372;
t2409 = cos(qJ(3,1));
t2403 = sin(qJ(3,1));
t2560 = t2395 * t2403;
t2572 = t2393 * t2404;
t2391 = t2409 ^ 2;
t2621 = pkin(3) * t2391;
t2301 = 0.1e1 / ((pkin(3) * t2560 + t2354 * t2393) * t2409 + pkin(2) * t2560 + t2572 * t2621);
t2398 = legFrame(1,3);
t2379 = sin(t2398);
t2382 = cos(t2398);
t2307 = t2347 * t2382 + t2348 * t2379;
t2559 = t2395 * t2404;
t2567 = t2393 * t2409;
t2280 = ((-t2347 * t2559 + t2348 * t2410) * t2382 - (t2347 * t2410 + t2348 * t2559) * t2379) * t2403 - t2307 * t2567;
t2547 = t2404 * t2409;
t2328 = pkin(3) * t2547 + t2354;
t2369 = pkin(3) * t2409 + pkin(2);
t2351 = t2369 * t2560;
t2316 = t2328 * t2567 + t2351;
t2312 = 0.1e1 / t2316;
t2593 = t2280 * t2312;
t2500 = t2301 * t2593;
t2640 = 0.2e1 * t2389 - 0.1e1;
t2639 = 0.2e1 * t2390 - 0.1e1;
t2638 = 0.2e1 * t2391 - 0.1e1;
t2504 = t2413 * t2595;
t2455 = t2399 * t2504;
t2344 = t2367 * t2400 - t2370;
t2554 = t2400 * t2413;
t2583 = (t2367 * t2406 + t2554) * t2395;
t2284 = -t2305 * t2583 - (-t2347 * t2377 + t2348 * t2380) * t2344;
t2323 = t2344 * t2571 + t2349;
t2317 = 0.1e1 / t2323;
t2589 = t2284 * t2317;
t2260 = t2455 - t2589;
t2415 = 0.1e1 / pkin(3);
t2486 = t2415 * t2589;
t2443 = t2406 * t2486;
t2476 = t2393 * t2555;
t2586 = t2317 * t2399;
t2487 = t2284 * t2586;
t2488 = t2299 * t2589;
t2505 = t2406 * t2595;
t2221 = -((t2393 * t2505 + t2395 * t2486) * t2623 + ((-t2487 + t2504) * t2400 + pkin(2) * t2505) * t2571 + t2260 * t2395) * t2506 - (t2393 * t2443 + (t2389 * t2395 - t2399 * t2476 - t2395) * t2595) * t2488;
t2373 = pkin(2) ^ 2 + t2413 ^ 2;
t2414 = pkin(3) ^ 2;
t2625 = 0.2e1 * pkin(2);
t2620 = pkin(3) * t2625;
t2464 = (-t2413 * t2487 + (t2389 * t2414 + t2405 * t2620 + t2373) * t2595) * t2506;
t2558 = t2395 * t2415;
t2565 = t2393 * t2415;
t2624 = pkin(2) * t2415;
t2224 = -t2464 * t2558 - (-t2395 * t2455 + (-t2326 * t2399 * t2565 + (t2405 * t2624 + t2389) * t2395) * t2589) * t2308 * t2486;
t2570 = t2393 * t2406;
t2215 = t2221 * t2570 + t2224 * t2395;
t2272 = t2278 ^ 2 / t2314 ^ 2;
t2416 = 0.1e1 / pkin(3) ^ 2;
t2592 = t2284 ^ 2 / t2323 ^ 2;
t2495 = t2416 * t2592;
t2263 = t2272 + t2495;
t2419 = -0.2e1 * t2443 * t2595;
t2634 = t2215 * t2405 + (-t2263 * t2555 + t2399 * t2419) * t2393;
t2501 = t2413 * t2594;
t2454 = t2401 * t2501;
t2345 = t2368 * t2402 - t2371;
t2550 = t2402 * t2413;
t2582 = (t2368 * t2408 + t2550) * t2395;
t2285 = -t2306 * t2582 - (-t2347 * t2378 + t2348 * t2381) * t2345;
t2324 = t2345 * t2569 + t2350;
t2319 = 0.1e1 / t2324;
t2588 = t2285 * t2319;
t2261 = t2454 - t2588;
t2483 = t2415 * t2588;
t2442 = t2408 * t2483;
t2475 = t2393 * t2551;
t2585 = t2319 * t2401;
t2484 = t2285 * t2585;
t2485 = t2300 * t2588;
t2502 = t2408 * t2594;
t2222 = -((t2393 * t2502 + t2395 * t2483) * t2622 + ((-t2484 + t2501) * t2402 + pkin(2) * t2502) * t2569 + t2261 * t2395) * t2503 - (t2393 * t2442 + (t2390 * t2395 - t2401 * t2475 - t2395) * t2594) * t2485;
t2463 = (-t2413 * t2484 + (t2390 * t2414 + t2407 * t2620 + t2373) * t2594) * t2503;
t2225 = -t2463 * t2558 - (-t2395 * t2454 + (-t2327 * t2401 * t2565 + (t2407 * t2624 + t2390) * t2395) * t2588) * t2310 * t2483;
t2568 = t2393 * t2408;
t2216 = t2222 * t2568 + t2225 * t2395;
t2273 = t2279 ^ 2 / t2315 ^ 2;
t2591 = t2285 ^ 2 / t2324 ^ 2;
t2492 = t2416 * t2591;
t2264 = t2273 + t2492;
t2418 = -0.2e1 * t2442 * t2594;
t2633 = t2216 * t2407 + (-t2264 * t2551 + t2401 * t2418) * t2393;
t2498 = t2413 * t2593;
t2453 = t2403 * t2498;
t2346 = t2369 * t2404 - t2372;
t2546 = t2404 * t2413;
t2581 = (t2369 * t2410 + t2546) * t2395;
t2286 = -t2307 * t2581 - (-t2347 * t2379 + t2348 * t2382) * t2346;
t2325 = t2346 * t2567 + t2351;
t2321 = 0.1e1 / t2325;
t2587 = t2286 * t2321;
t2262 = t2453 - t2587;
t2480 = t2415 * t2587;
t2441 = t2410 * t2480;
t2474 = t2393 * t2547;
t2584 = t2321 * t2403;
t2481 = t2286 * t2584;
t2482 = t2301 * t2587;
t2499 = t2410 * t2593;
t2223 = -((t2393 * t2499 + t2395 * t2480) * t2621 + ((-t2481 + t2498) * t2404 + pkin(2) * t2499) * t2567 + t2262 * t2395) * t2500 - (t2393 * t2441 + (t2391 * t2395 - t2403 * t2474 - t2395) * t2593) * t2482;
t2462 = (-t2413 * t2481 + (t2391 * t2414 + t2409 * t2620 + t2373) * t2593) * t2500;
t2226 = -t2462 * t2558 - (-t2395 * t2453 + (-t2328 * t2403 * t2565 + (t2409 * t2624 + t2391) * t2395) * t2587) * t2312 * t2480;
t2566 = t2393 * t2410;
t2217 = t2223 * t2566 + t2226 * t2395;
t2274 = t2280 ^ 2 / t2316 ^ 2;
t2590 = t2286 ^ 2 / t2325 ^ 2;
t2489 = t2416 * t2590;
t2265 = t2274 + t2489;
t2417 = -0.2e1 * t2441 * t2593;
t2632 = t2217 * t2409 + (-t2265 * t2547 + t2403 * t2417) * t2393;
t2557 = t2399 * t2400;
t2631 = -t2215 * t2399 + (t2263 * t2557 + t2405 * t2419) * t2393;
t2553 = t2401 * t2402;
t2630 = -t2216 * t2401 + (t2264 * t2553 + t2407 * t2418) * t2393;
t2549 = t2403 * t2404;
t2629 = -t2217 * t2403 + (t2265 * t2549 + t2409 * t2417) * t2393;
t2357 = pkin(2) * t2410 + t2546;
t2573 = t2393 * t2403;
t2426 = pkin(3) * t2573 - t2354 * t2395;
t2628 = t2357 * t2394 + t2426 * t2392;
t2356 = pkin(2) * t2408 + t2550;
t2575 = t2393 * t2401;
t2427 = pkin(3) * t2575 - t2353 * t2395;
t2627 = t2356 * t2394 + t2427 * t2392;
t2355 = pkin(2) * t2406 + t2554;
t2577 = t2393 * t2399;
t2428 = pkin(3) * t2577 - t2352 * t2395;
t2626 = t2355 * t2394 + t2428 * t2392;
t2619 = MDP(3) * t2393;
t2618 = MDP(4) * t2393;
t2617 = MDP(9) * t2415;
t2616 = t2221 * t2299;
t2615 = t2222 * t2300;
t2614 = t2223 * t2301;
t2613 = t2224 * t2317;
t2612 = t2224 * t2399;
t2611 = t2224 * t2405;
t2610 = t2225 * t2319;
t2609 = t2225 * t2401;
t2608 = t2225 * t2407;
t2607 = t2226 * t2321;
t2606 = t2226 * t2403;
t2605 = t2226 * t2409;
t2227 = t2405 * t2464 + (pkin(2) * t2486 - t2260 * t2405) * t2488;
t2604 = t2227 * t2299;
t2603 = t2227 * t2400;
t2602 = t2227 * t2406;
t2228 = t2407 * t2463 + (pkin(2) * t2483 - t2261 * t2407) * t2485;
t2601 = t2228 * t2300;
t2600 = t2228 * t2402;
t2599 = t2228 * t2408;
t2229 = t2409 * t2462 + (pkin(2) * t2480 - t2262 * t2409) * t2482;
t2598 = t2229 * t2301;
t2597 = t2229 * t2404;
t2596 = t2229 * t2410;
t2556 = t2399 * t2405;
t2552 = t2401 * t2407;
t2548 = t2403 * t2409;
t2450 = t2395 * t2495;
t2516 = t2224 * t2557;
t2545 = -t2393 * t2516 - t2399 * t2450 + t2634;
t2544 = -t2224 * t2476 - t2405 * t2450 + t2631;
t2447 = t2395 * t2492;
t2513 = t2225 * t2553;
t2543 = -t2393 * t2513 - t2401 * t2447 + t2633;
t2542 = -t2225 * t2475 - t2407 * t2447 + t2630;
t2444 = t2395 * t2489;
t2510 = t2226 * t2549;
t2541 = -t2393 * t2510 - t2403 * t2444 + t2632;
t2540 = -t2226 * t2474 - t2409 * t2444 + t2629;
t2536 = -0.2e1 * t2284 * t2299;
t2535 = -0.2e1 * t2285 * t2300;
t2534 = -0.2e1 * t2286 * t2301;
t2533 = pkin(2) * t2595;
t2532 = pkin(2) * t2594;
t2531 = pkin(2) * t2593;
t2530 = pkin(2) * t2577;
t2529 = pkin(2) * t2575;
t2528 = pkin(2) * t2573;
t2527 = t2399 ^ 2 * t2616;
t2526 = t2221 * t2586;
t2525 = t2221 * t2317 * t2405;
t2524 = t2401 ^ 2 * t2615;
t2523 = t2222 * t2585;
t2522 = t2222 * t2319 * t2407;
t2521 = t2403 ^ 2 * t2614;
t2520 = t2223 * t2584;
t2519 = t2223 * t2321 * t2409;
t2518 = t2299 * t2612;
t2517 = t2299 * t2611;
t2515 = t2300 * t2609;
t2514 = t2300 * t2608;
t2512 = t2301 * t2606;
t2511 = t2301 * t2605;
t2509 = t2317 * t2272;
t2508 = t2319 * t2273;
t2507 = t2321 * t2274;
t2497 = t2399 * t2592;
t2496 = t2405 * t2592;
t2494 = t2401 * t2591;
t2493 = t2407 * t2591;
t2491 = t2403 * t2590;
t2490 = t2409 * t2590;
t2479 = t2317 * t2556;
t2478 = t2319 * t2552;
t2477 = t2321 * t2548;
t2329 = -t2377 * t2392 + t2380 * t2394;
t2332 = t2377 * t2394 + t2380 * t2392;
t2287 = -t2329 * t2571 - (t2329 * t2563 + t2332 * t2406) * t2399;
t2473 = t2287 * t2536;
t2290 = -t2332 * t2571 - (-t2329 * t2406 + t2332 * t2563) * t2399;
t2472 = t2290 * t2536;
t2330 = -t2378 * t2392 + t2381 * t2394;
t2333 = t2378 * t2394 + t2381 * t2392;
t2288 = -t2330 * t2569 - (t2330 * t2561 + t2333 * t2408) * t2401;
t2471 = t2288 * t2535;
t2291 = -t2333 * t2569 - (-t2330 * t2408 + t2333 * t2561) * t2401;
t2470 = t2291 * t2535;
t2331 = -t2379 * t2392 + t2382 * t2394;
t2334 = t2379 * t2394 + t2382 * t2392;
t2289 = -t2331 * t2567 - (t2331 * t2559 + t2334 * t2410) * t2403;
t2469 = t2289 * t2534;
t2292 = -t2334 * t2567 - (-t2331 * t2410 + t2334 * t2559) * t2403;
t2468 = t2292 * t2534;
t2467 = pkin(6) * t2486;
t2466 = pkin(6) * t2483;
t2465 = pkin(6) * t2480;
t2461 = t2399 * t2509;
t2460 = t2405 * t2509;
t2459 = t2401 * t2508;
t2458 = t2407 * t2508;
t2457 = t2403 * t2507;
t2456 = t2409 * t2507;
t2452 = t2299 * t2497;
t2451 = t2299 * t2496;
t2449 = t2300 * t2494;
t2448 = t2300 * t2493;
t2446 = t2301 * t2491;
t2445 = t2301 * t2490;
t2440 = 0.2e1 * t2556 * t2616;
t2439 = 0.2e1 * t2552 * t2615;
t2438 = 0.2e1 * t2548 * t2614;
t2437 = 0.2e1 * t2284 * t2506;
t2436 = 0.2e1 * t2285 * t2503;
t2435 = 0.2e1 * t2286 * t2500;
t2434 = t2640 * t2437;
t2433 = t2639 * t2436;
t2432 = t2638 * t2435;
t2431 = t2221 * t2625 + t2227 * t2570;
t2430 = t2222 * t2625 + t2228 * t2568;
t2429 = t2223 * t2625 + t2229 * t2566;
t2425 = -t2221 * t2400 - t2406 * t2272;
t2424 = t2221 * t2406 - t2400 * t2272;
t2423 = -t2222 * t2402 - t2408 * t2273;
t2422 = t2222 * t2408 - t2402 * t2273;
t2421 = -t2223 * t2404 - t2410 * t2274;
t2420 = t2223 * t2410 - t2404 * t2274;
t2340 = t2392 * t2410 + t2394 * t2559;
t2339 = t2392 * t2408 + t2394 * t2561;
t2338 = t2392 * t2406 + t2394 * t2563;
t2337 = t2392 * t2559 - t2394 * t2410;
t2336 = t2392 * t2561 - t2394 * t2408;
t2335 = t2392 * t2563 - t2394 * t2406;
t2304 = t2357 * t2392 - t2426 * t2394;
t2303 = t2356 * t2392 - t2427 * t2394;
t2302 = t2355 * t2392 - t2428 * t2394;
t2298 = -t2331 * t2581 + t2334 * t2346;
t2297 = -t2330 * t2582 + t2333 * t2345;
t2296 = -t2329 * t2583 + t2332 * t2344;
t2295 = -t2331 * t2346 - t2334 * t2581;
t2294 = -t2330 * t2345 - t2333 * t2582;
t2293 = -t2329 * t2344 - t2332 * t2583;
t2271 = (-t2337 * t2379 + t2340 * t2382) * t2621 + (t2304 * t2382 + t2628 * t2379) * t2409 - t2331 * t2528;
t2270 = (-t2336 * t2378 + t2339 * t2381) * t2622 + (t2303 * t2381 + t2627 * t2378) * t2407 - t2330 * t2529;
t2269 = (-t2335 * t2377 + t2338 * t2380) * t2623 + (t2302 * t2380 + t2626 * t2377) * t2405 - t2329 * t2530;
t2268 = -(t2337 * t2382 + t2340 * t2379) * t2621 + (-t2304 * t2379 + t2628 * t2382) * t2409 + t2334 * t2528;
t2267 = -(t2336 * t2381 + t2339 * t2378) * t2622 + (-t2303 * t2378 + t2627 * t2381) * t2407 + t2333 * t2529;
t2266 = -(t2335 * t2380 + t2338 * t2377) * t2623 + (-t2302 * t2377 + t2626 * t2380) * t2405 + t2332 * t2530;
t2259 = t2409 * t2531 - t2403 * t2465 / 0.2e1;
t2258 = t2407 * t2532 - t2401 * t2466 / 0.2e1;
t2257 = t2405 * t2533 - t2399 * t2467 / 0.2e1;
t2256 = t2403 * t2531 + t2409 * t2465 / 0.2e1;
t2255 = t2401 * t2532 + t2407 * t2466 / 0.2e1;
t2254 = t2399 * t2533 + t2405 * t2467 / 0.2e1;
t2253 = t2638 * t2274;
t2252 = t2639 * t2273;
t2251 = t2640 * t2272;
t2220 = pkin(6) * t2223 + t2229 * t2572;
t2219 = pkin(6) * t2222 + t2228 * t2574;
t2218 = pkin(6) * t2221 + t2227 * t2576;
t2208 = -t2220 * t2409 - t2229 * t2560;
t2207 = -t2219 * t2407 - t2228 * t2562;
t2206 = -t2218 * t2405 - t2227 * t2564;
t2205 = t2229 * t2395 * t2409 - t2220 * t2403;
t2204 = t2228 * t2395 * t2407 - t2219 * t2401;
t2203 = t2227 * t2395 * t2405 - t2218 * t2399;
t2202 = -pkin(6) * t2605 - t2429 * t2403;
t2201 = -pkin(6) * t2606 + t2429 * t2409;
t2200 = -pkin(6) * t2608 - t2430 * t2401;
t2199 = -pkin(6) * t2609 + t2430 * t2407;
t2198 = -pkin(6) * t2611 - t2431 * t2399;
t2197 = -pkin(6) * t2612 + t2431 * t2405;
t1 = [(t2266 * t2604 + t2267 * t2601 + t2268 * t2598) * MDP(1) + (t2287 * t2616 + t2288 * t2615 + t2289 * t2614) * MDP(2) + ((t2420 * t2268 + t2289 * t2596) * t2301 + (t2422 * t2267 + t2288 * t2599) * t2300 + (t2424 * t2266 + t2287 * t2602) * t2299) * t2619 + ((t2421 * t2268 - t2289 * t2597) * t2301 + (t2423 * t2267 - t2288 * t2600) * t2300 + (t2266 * t2425 - t2287 * t2603) * t2299) * t2618 + (t2287 * t2527 + t2288 * t2524 + t2289 * t2521 + ((-t2298 * t2274 + t2289 * t2435) * t2477 + (-t2297 * t2273 + t2288 * t2436) * t2478 + (-t2296 * t2272 + t2287 * t2437) * t2479) * t2415) * MDP(5) + (t2287 * t2440 + t2288 * t2439 + t2289 * t2438 + ((-t2253 * t2298 + t2289 * t2432) * t2321 + (-t2252 * t2297 + t2288 * t2433) * t2319 + (-t2251 * t2296 + t2287 * t2434) * t2317) * t2415) * MDP(6) + (t2287 * t2518 + t2288 * t2515 + t2289 * t2512 + (t2287 * t2451 + t2288 * t2448 + t2289 * t2445) * t2416 + (t2296 * t2526 + t2297 * t2523 + t2298 * t2520) * t2415) * MDP(7) + (t2287 * t2517 + t2288 * t2514 + t2289 * t2511 + (-t2287 * t2452 - t2288 * t2449 - t2289 * t2446) * t2416 + (t2296 * t2525 + t2297 * t2522 + t2298 * t2519) * t2415) * MDP(8) + (t2296 * t2613 + t2297 * t2610 + t2298 * t2607) * t2617 + ((t2289 * t2201 + t2541 * t2268) * t2301 + (t2288 * t2199 + t2543 * t2267) * t2300 + (t2287 * t2197 + t2545 * t2266) * t2299 + ((t2298 * t2205 + t2256 * t2469) * t2321 + (t2297 * t2204 + t2255 * t2471) * t2319 + (t2296 * t2203 + t2254 * t2473) * t2317 + (t2296 * t2461 + t2297 * t2459 + t2298 * t2457) * pkin(2)) * t2415) * MDP(10) + ((t2289 * t2202 + t2540 * t2268) * t2301 + (t2288 * t2200 + t2542 * t2267) * t2300 + (t2287 * t2198 + t2544 * t2266) * t2299 + ((t2298 * t2208 + t2259 * t2469) * t2321 + (t2297 * t2207 + t2258 * t2471) * t2319 + (t2296 * t2206 + t2257 * t2473) * t2317 + (t2296 * t2460 + t2297 * t2458 + t2298 * t2456) * pkin(2)) * t2415) * MDP(11); (t2269 * t2604 + t2270 * t2601 + t2271 * t2598) * MDP(1) + (t2290 * t2616 + t2291 * t2615 + t2292 * t2614) * MDP(2) + ((t2271 * t2420 + t2292 * t2596) * t2301 + (t2270 * t2422 + t2291 * t2599) * t2300 + (t2269 * t2424 + t2290 * t2602) * t2299) * t2619 + ((t2271 * t2421 - t2292 * t2597) * t2301 + (t2270 * t2423 - t2291 * t2600) * t2300 + (t2269 * t2425 - t2290 * t2603) * t2299) * t2618 + (t2290 * t2527 + t2291 * t2524 + t2292 * t2521 + ((-t2295 * t2274 + t2292 * t2435) * t2477 + (-t2294 * t2273 + t2291 * t2436) * t2478 + (-t2293 * t2272 + t2290 * t2437) * t2479) * t2415) * MDP(5) + (t2290 * t2440 + t2291 * t2439 + t2292 * t2438 + ((-t2253 * t2295 + t2292 * t2432) * t2321 + (-t2252 * t2294 + t2291 * t2433) * t2319 + (-t2251 * t2293 + t2290 * t2434) * t2317) * t2415) * MDP(6) + (t2290 * t2518 + t2291 * t2515 + t2292 * t2512 + (t2290 * t2451 + t2291 * t2448 + t2292 * t2445) * t2416 + (t2293 * t2526 + t2294 * t2523 + t2295 * t2520) * t2415) * MDP(7) + (t2290 * t2517 + t2291 * t2514 + t2292 * t2511 + (-t2290 * t2452 - t2291 * t2449 - t2292 * t2446) * t2416 + (t2293 * t2525 + t2294 * t2522 + t2295 * t2519) * t2415) * MDP(8) + (t2293 * t2613 + t2294 * t2610 + t2295 * t2607) * t2617 + ((t2292 * t2201 + t2541 * t2271) * t2301 + (t2291 * t2199 + t2543 * t2270) * t2300 + (t2290 * t2197 + t2545 * t2269) * t2299 + ((t2205 * t2295 + t2256 * t2468) * t2321 + (t2204 * t2294 + t2255 * t2470) * t2319 + (t2203 * t2293 + t2254 * t2472) * t2317 + (t2293 * t2461 + t2294 * t2459 + t2295 * t2457) * pkin(2)) * t2415) * MDP(10) + ((t2292 * t2202 + t2540 * t2271) * t2301 + (t2291 * t2200 + t2542 * t2270) * t2300 + (t2290 * t2198 + t2544 * t2269) * t2299 + ((t2208 * t2295 + t2259 * t2468) * t2321 + (t2207 * t2294 + t2258 * t2470) * t2319 + (t2206 * t2293 + t2257 * t2472) * t2317 + (t2293 * t2460 + t2294 * t2458 + t2295 * t2456) * pkin(2)) * t2415) * MDP(11); (t2229 + t2228 + t2227) * MDP(1) + (t2632 + t2633 + t2634) * MDP(10) + (t2629 + t2630 + t2631) * MDP(11) + ((-t2491 - t2494 - t2497) * MDP(10) + (-t2490 - t2493 - t2496) * MDP(11)) * t2416 * t2395 + ((t2420 + t2422 + t2424) * MDP(3) + (t2421 + t2423 + t2425) * MDP(4) + (-t2510 - t2513 - t2516) * MDP(10) + (-t2224 * t2555 - t2225 * t2551 - t2226 * t2547) * MDP(11)) * t2393;];
taucX  = t1;
