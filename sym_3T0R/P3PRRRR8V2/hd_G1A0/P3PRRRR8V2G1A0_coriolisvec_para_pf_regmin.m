% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:35:57
% EndTime: 2020-08-06 17:36:06
% DurationCPUTime: 8.82s
% Computational Cost: add. (51084->415), mult. (99138->874), div. (3834->17), fcn. (93960->22), ass. (0->380)
t993 = cos(qJ(3,3));
t977 = t993 ^ 2;
t1229 = 0.2e1 * t977 - 0.1e1;
t995 = cos(qJ(3,2));
t978 = t995 ^ 2;
t1228 = 0.2e1 * t978 - 0.1e1;
t997 = cos(qJ(3,1));
t979 = t997 ^ 2;
t1227 = 0.2e1 * t979 - 0.1e1;
t1003 = 0.1e1 / pkin(3);
t1001 = pkin(7) + pkin(6);
t988 = sin(qJ(2,3));
t1130 = t988 * t1001;
t955 = t993 * pkin(3) + pkin(2);
t983 = cos(pkin(4));
t994 = cos(qJ(2,3));
t1179 = (t955 * t994 + t1130) * t983;
t1000 = xDP(1);
t980 = sin(pkin(8));
t982 = cos(pkin(8));
t999 = xDP(2);
t935 = t1000 * t982 + t980 * t999;
t936 = -t1000 * t980 + t982 * t999;
t984 = legFrame(3,3);
t965 = sin(t984);
t968 = cos(t984);
t893 = t935 * t968 + t965 * t936;
t958 = t994 * t1001;
t932 = t988 * t955 - t958;
t872 = -t893 * t1179 - (-t965 * t935 + t936 * t968) * t932;
t981 = sin(pkin(4));
t1164 = t981 * t993;
t987 = sin(qJ(3,3));
t1158 = t983 * t987;
t937 = t955 * t1158;
t911 = t932 * t1164 + t937;
t905 = 0.1e1 / t911;
t1185 = t872 * t905;
t1070 = t1003 * t1185;
t1037 = t994 * t1070;
t1157 = t983 * t988;
t866 = ((-t935 * t1157 + t994 * t936) * t968 - (t936 * t1157 + t994 * t935) * t965) * t987 - t893 * t1164;
t1150 = t988 * t993;
t940 = pkin(2) * t988 - t958;
t914 = pkin(3) * t1150 + t940;
t902 = t914 * t1164 + t937;
t896 = 0.1e1 / t902;
t1191 = t866 * t896;
t1007 = -0.2e1 * t1037 * t1191;
t1163 = t981 * t994;
t1067 = t1001 * t1191;
t1182 = t905 * t987;
t1073 = t872 * t1182;
t1076 = t981 * t1150;
t1169 = t981 * t988;
t1216 = pkin(3) * t977;
t887 = 0.1e1 / ((pkin(3) * t1158 + t940 * t981) * t993 + pkin(2) * t1158 + t1169 * t1216);
t1088 = t887 * t1185;
t1099 = t994 * t1191;
t1100 = t887 * t1191;
t1031 = t987 * t1067;
t848 = t1031 - t1185;
t809 = -((t1070 * t983 + t1099 * t981) * t1216 + ((t1067 - t1073) * t988 + pkin(2) * t1099) * t1164 + t848 * t983) * t1100 - (t981 * t1037 + (-t1076 * t987 + t977 * t983 - t983) * t1191) * t1088;
t1002 = pkin(3) ^ 2;
t1217 = 0.2e1 * pkin(2);
t1143 = pkin(3) * t1217;
t961 = pkin(2) ^ 2 + t1001 ^ 2;
t1052 = (-t1001 * t1073 + (t1002 * t977 + t993 * t1143 + t961) * t1191) * t1100;
t1132 = t1003 * t983;
t1133 = t1003 * t981;
t1213 = pkin(2) * t1003;
t812 = -t1052 * t1132 - (-t983 * t1031 + (-t914 * t987 * t1133 + (t993 * t1213 + t977) * t983) * t1185) * t896 * t1070;
t803 = t809 * t1163 + t983 * t812;
t1004 = 0.1e1 / pkin(3) ^ 2;
t1188 = t872 ^ 2 / t911 ^ 2;
t1064 = t1004 * t1188;
t860 = t866 ^ 2 / t902 ^ 2;
t851 = t860 + t1064;
t1226 = t803 * t993 + (t1007 * t987 - t851 * t1150) * t981;
t990 = sin(qJ(2,2));
t1129 = t990 * t1001;
t956 = t995 * pkin(3) + pkin(2);
t996 = cos(qJ(2,2));
t1178 = (t956 * t996 + t1129) * t983;
t985 = legFrame(2,3);
t966 = sin(t985);
t969 = cos(t985);
t894 = t935 * t969 + t966 * t936;
t959 = t996 * t1001;
t933 = t990 * t956 - t959;
t873 = -t894 * t1178 - (-t966 * t935 + t936 * t969) * t933;
t1162 = t981 * t995;
t989 = sin(qJ(3,2));
t1156 = t983 * t989;
t938 = t956 * t1156;
t912 = t933 * t1162 + t938;
t907 = 0.1e1 / t912;
t1184 = t873 * t907;
t1069 = t1003 * t1184;
t1036 = t996 * t1069;
t1155 = t983 * t990;
t867 = ((-t935 * t1155 + t996 * t936) * t969 - (t936 * t1155 + t996 * t935) * t966) * t989 - t894 * t1162;
t1147 = t990 * t995;
t941 = pkin(2) * t990 - t959;
t915 = pkin(3) * t1147 + t941;
t903 = t915 * t1162 + t938;
t898 = 0.1e1 / t903;
t1190 = t867 * t898;
t1006 = -0.2e1 * t1036 * t1190;
t1161 = t981 * t996;
t1066 = t1001 * t1190;
t1181 = t907 * t989;
t1072 = t873 * t1181;
t1075 = t981 * t1147;
t1167 = t981 * t990;
t1215 = pkin(3) * t978;
t888 = 0.1e1 / ((pkin(3) * t1156 + t941 * t981) * t995 + pkin(2) * t1156 + t1167 * t1215);
t1087 = t888 * t1184;
t1097 = t996 * t1190;
t1098 = t888 * t1190;
t1030 = t989 * t1066;
t849 = t1030 - t1184;
t810 = -((t1069 * t983 + t1097 * t981) * t1215 + ((t1066 - t1072) * t990 + pkin(2) * t1097) * t1162 + t849 * t983) * t1098 - (t981 * t1036 + (-t1075 * t989 + t978 * t983 - t983) * t1190) * t1087;
t1051 = (-t1001 * t1072 + (t1002 * t978 + t995 * t1143 + t961) * t1190) * t1098;
t813 = -t1051 * t1132 - (-t983 * t1030 + (-t915 * t989 * t1133 + (t995 * t1213 + t978) * t983) * t1184) * t898 * t1069;
t804 = t810 * t1161 + t983 * t813;
t1187 = t873 ^ 2 / t912 ^ 2;
t1063 = t1004 * t1187;
t861 = t867 ^ 2 / t903 ^ 2;
t852 = t861 + t1063;
t1225 = t804 * t995 + (t1006 * t989 - t852 * t1147) * t981;
t992 = sin(qJ(2,1));
t1128 = t992 * t1001;
t957 = t997 * pkin(3) + pkin(2);
t998 = cos(qJ(2,1));
t1177 = (t957 * t998 + t1128) * t983;
t986 = legFrame(1,3);
t967 = sin(t986);
t970 = cos(t986);
t895 = t935 * t970 + t967 * t936;
t960 = t998 * t1001;
t934 = t992 * t957 - t960;
t874 = -t895 * t1177 - (-t967 * t935 + t936 * t970) * t934;
t1160 = t981 * t997;
t991 = sin(qJ(3,1));
t1154 = t983 * t991;
t939 = t957 * t1154;
t913 = t934 * t1160 + t939;
t909 = 0.1e1 / t913;
t1183 = t874 * t909;
t1068 = t1003 * t1183;
t1035 = t998 * t1068;
t1153 = t983 * t992;
t868 = ((-t935 * t1153 + t998 * t936) * t970 - (t936 * t1153 + t998 * t935) * t967) * t991 - t895 * t1160;
t1144 = t992 * t997;
t942 = pkin(2) * t992 - t960;
t916 = pkin(3) * t1144 + t942;
t904 = t916 * t1160 + t939;
t900 = 0.1e1 / t904;
t1189 = t868 * t900;
t1005 = -0.2e1 * t1035 * t1189;
t1159 = t981 * t998;
t1065 = t1001 * t1189;
t1180 = t909 * t991;
t1071 = t874 * t1180;
t1074 = t981 * t1144;
t1165 = t981 * t992;
t1214 = pkin(3) * t979;
t889 = 0.1e1 / ((pkin(3) * t1154 + t942 * t981) * t997 + pkin(2) * t1154 + t1165 * t1214);
t1086 = t889 * t1183;
t1095 = t998 * t1189;
t1096 = t889 * t1189;
t1029 = t991 * t1065;
t850 = t1029 - t1183;
t811 = -((t1068 * t983 + t1095 * t981) * t1214 + ((t1065 - t1071) * t992 + pkin(2) * t1095) * t1160 + t850 * t983) * t1096 - (t981 * t1035 + (-t1074 * t991 + t979 * t983 - t983) * t1189) * t1086;
t1050 = (-t1001 * t1071 + (t1002 * t979 + t997 * t1143 + t961) * t1189) * t1096;
t814 = -t1050 * t1132 - (-t983 * t1029 + (-t916 * t991 * t1133 + (t997 * t1213 + t979) * t983) * t1183) * t900 * t1068;
t805 = t811 * t1159 + t983 * t814;
t1186 = t874 ^ 2 / t913 ^ 2;
t1062 = t1004 * t1186;
t862 = t868 ^ 2 / t904 ^ 2;
t853 = t862 + t1062;
t1224 = t805 * t997 + (t1005 * t991 - t853 * t1144) * t981;
t1152 = t987 * t988;
t1223 = -t803 * t987 + (t1007 * t993 + t851 * t1152) * t981;
t1149 = t989 * t990;
t1222 = -t804 * t989 + (t1006 * t995 + t852 * t1149) * t981;
t1146 = t991 * t992;
t1221 = -t805 * t991 + (t1005 * t997 + t853 * t1146) * t981;
t1166 = t981 * t991;
t1014 = pkin(3) * t1166 - t942 * t983;
t945 = pkin(2) * t998 + t1128;
t1220 = t1014 * t980 + t945 * t982;
t1168 = t981 * t989;
t1015 = pkin(3) * t1168 - t941 * t983;
t944 = pkin(2) * t996 + t1129;
t1219 = t1015 * t980 + t944 * t982;
t1170 = t981 * t987;
t1016 = pkin(3) * t1170 - t940 * t983;
t943 = pkin(2) * t994 + t1130;
t1218 = t1016 * t980 + t943 * t982;
t1212 = t809 * t887;
t1211 = t810 * t888;
t1210 = t811 * t889;
t1209 = t812 * t905;
t1208 = t812 * t987;
t1207 = t812 * t993;
t1206 = t813 * t907;
t1205 = t813 * t989;
t1204 = t813 * t995;
t1203 = t814 * t909;
t1202 = t814 * t991;
t1201 = t814 * t997;
t815 = t993 * t1052 + (pkin(2) * t1070 - t848 * t993) * t1088;
t1200 = t815 * t887;
t1199 = t815 * t988;
t1198 = t815 * t994;
t816 = t995 * t1051 + (pkin(2) * t1069 - t849 * t995) * t1087;
t1197 = t816 * t888;
t1196 = t816 * t990;
t1195 = t816 * t996;
t817 = t997 * t1050 + (pkin(2) * t1068 - t850 * t997) * t1086;
t1194 = t817 * t889;
t1193 = t817 * t992;
t1192 = t817 * t998;
t1151 = t987 * t993;
t1148 = t989 * t995;
t1145 = t991 * t997;
t1034 = t983 * t1064;
t1110 = t812 * t1152;
t1142 = -t1034 * t987 - t1110 * t981 + t1226;
t1141 = -t1034 * t993 - t1076 * t812 + t1223;
t1033 = t983 * t1063;
t1107 = t813 * t1149;
t1140 = -t1033 * t989 - t1107 * t981 + t1225;
t1139 = -t1033 * t995 - t1075 * t813 + t1222;
t1032 = t983 * t1062;
t1104 = t814 * t1146;
t1138 = -t1032 * t991 - t1104 * t981 + t1224;
t1137 = -t1032 * t997 - t1074 * t814 + t1221;
t1131 = t1004 * t983;
t1127 = -0.2e1 * t872 * t887;
t1126 = -0.2e1 * t873 * t888;
t1125 = -0.2e1 * t874 * t889;
t1124 = pkin(2) * t1191;
t1123 = pkin(2) * t1190;
t1122 = pkin(2) * t1189;
t1121 = pkin(2) * t1170;
t1120 = pkin(2) * t1168;
t1119 = pkin(2) * t1166;
t1118 = t809 * t1182;
t1117 = t809 * t905 * t993;
t1116 = t810 * t1181;
t1115 = t810 * t907 * t995;
t1114 = t811 * t1180;
t1113 = t811 * t909 * t997;
t1112 = t887 * t1208;
t1111 = t887 * t1207;
t1109 = t888 * t1205;
t1108 = t888 * t1204;
t1106 = t889 * t1202;
t1105 = t889 * t1201;
t1103 = t905 * t860;
t1102 = t907 * t861;
t1101 = t909 * t862;
t1094 = t987 * t1188;
t1093 = t993 * t1188;
t1092 = t989 * t1187;
t1091 = t995 * t1187;
t1090 = t991 * t1186;
t1089 = t997 * t1186;
t917 = -t980 * t965 + t968 * t982;
t920 = t982 * t965 + t968 * t980;
t875 = -t917 * t1164 - (t917 * t1157 + t994 * t920) * t987;
t1085 = t875 * t1212;
t918 = -t980 * t966 + t969 * t982;
t921 = t982 * t966 + t969 * t980;
t876 = -t918 * t1162 - (t918 * t1155 + t996 * t921) * t989;
t1084 = t876 * t1211;
t919 = -t980 * t967 + t970 * t982;
t922 = t982 * t967 + t970 * t980;
t877 = -t919 * t1160 - (t919 * t1153 + t998 * t922) * t991;
t1083 = t877 * t1210;
t878 = -t920 * t1164 - (t920 * t1157 - t994 * t917) * t987;
t1082 = t878 * t1212;
t879 = -t921 * t1162 - (t921 * t1155 - t996 * t918) * t989;
t1081 = t879 * t1211;
t880 = -t922 * t1160 - (t922 * t1153 - t998 * t919) * t991;
t1080 = t880 * t1210;
t1079 = t905 * t1151;
t1078 = t907 * t1148;
t1077 = t909 * t1145;
t1061 = t875 * t1127;
t1060 = t878 * t1127;
t1059 = t876 * t1126;
t1058 = t879 * t1126;
t1057 = t877 * t1125;
t1056 = t880 * t1125;
t1055 = pkin(6) * t1070;
t1054 = pkin(6) * t1069;
t1053 = pkin(6) * t1068;
t1049 = t987 * t1103;
t1048 = t993 * t1103;
t1047 = t989 * t1102;
t1046 = t995 * t1102;
t1045 = t991 * t1101;
t1044 = t997 * t1101;
t1043 = t887 * t1094;
t1042 = t887 * t1093;
t1041 = t888 * t1092;
t1040 = t888 * t1091;
t1039 = t889 * t1090;
t1038 = t889 * t1089;
t1028 = 0.2e1 * t1151 * t1212;
t1027 = 0.2e1 * t1148 * t1211;
t1026 = 0.2e1 * t1145 * t1210;
t1025 = 0.2e1 * t872 * t1100;
t1024 = 0.2e1 * t873 * t1098;
t1023 = 0.2e1 * t874 * t1096;
t1022 = t1229 * t1025;
t1021 = t1228 * t1024;
t1020 = t1227 * t1023;
t1019 = t815 * t1163 + t809 * t1217;
t1018 = t816 * t1161 + t810 * t1217;
t1017 = t817 * t1159 + t811 * t1217;
t1013 = -t809 * t988 - t994 * t860;
t1012 = t809 * t994 - t988 * t860;
t1011 = -t810 * t990 - t996 * t861;
t1010 = t810 * t996 - t990 * t861;
t1009 = -t811 * t992 - t998 * t862;
t1008 = t811 * t998 - t992 * t862;
t976 = t991 ^ 2;
t975 = t989 ^ 2;
t974 = t987 ^ 2;
t928 = t982 * t1153 + t980 * t998;
t927 = t982 * t1155 + t980 * t996;
t926 = t982 * t1157 + t980 * t994;
t925 = t980 * t1153 - t982 * t998;
t924 = t980 * t1155 - t982 * t996;
t923 = t980 * t1157 - t982 * t994;
t892 = -t1014 * t982 + t980 * t945;
t891 = -t1015 * t982 + t980 * t944;
t890 = -t1016 * t982 + t980 * t943;
t886 = -t919 * t1177 + t934 * t922;
t885 = -t918 * t1178 + t933 * t921;
t884 = -t917 * t1179 + t932 * t920;
t883 = -t922 * t1177 - t934 * t919;
t882 = -t921 * t1178 - t933 * t918;
t881 = -t920 * t1179 - t932 * t917;
t859 = (-t967 * t925 + t928 * t970) * t1214 + (t1220 * t967 + t892 * t970) * t997 - t919 * t1119;
t858 = (-t966 * t924 + t927 * t969) * t1215 + (t1219 * t966 + t891 * t969) * t995 - t918 * t1120;
t857 = (-t965 * t923 + t926 * t968) * t1216 + (t1218 * t965 + t890 * t968) * t993 - t917 * t1121;
t856 = -(t925 * t970 + t967 * t928) * t1214 + (t1220 * t970 - t892 * t967) * t997 + t922 * t1119;
t855 = -(t924 * t969 + t966 * t927) * t1215 + (t1219 * t969 - t891 * t966) * t995 + t921 * t1120;
t854 = -(t923 * t968 + t965 * t926) * t1216 + (t1218 * t968 - t890 * t965) * t993 + t920 * t1121;
t847 = t997 * t1122 - t991 * t1053 / 0.2e1;
t846 = t995 * t1123 - t989 * t1054 / 0.2e1;
t845 = t993 * t1124 - t987 * t1055 / 0.2e1;
t844 = t991 * t1122 + t997 * t1053 / 0.2e1;
t843 = t989 * t1123 + t995 * t1054 / 0.2e1;
t842 = t987 * t1124 + t993 * t1055 / 0.2e1;
t841 = t1227 * t862;
t840 = t1228 * t861;
t839 = t1229 * t860;
t808 = t811 * pkin(6) + t817 * t1165;
t807 = t810 * pkin(6) + t816 * t1167;
t806 = t809 * pkin(6) + t815 * t1169;
t796 = -t817 * t1154 - t997 * t808;
t795 = -t816 * t1156 - t995 * t807;
t794 = -t815 * t1158 - t993 * t806;
t793 = t997 * t983 * t817 - t991 * t808;
t792 = t995 * t983 * t816 - t989 * t807;
t791 = t993 * t983 * t815 - t987 * t806;
t790 = -pkin(6) * t1201 - t1017 * t991;
t789 = -pkin(6) * t1202 + t1017 * t997;
t788 = -pkin(6) * t1204 - t1018 * t989;
t787 = -pkin(6) * t1205 + t1018 * t995;
t786 = -pkin(6) * t1207 - t1019 * t987;
t785 = -pkin(6) * t1208 + t1019 * t993;
t1 = [t856 * t1194 + t855 * t1197 + t854 * t1200, t1083 + t1084 + t1085, ((t1008 * t856 + t877 * t1192) * t889 + (t1010 * t855 + t876 * t1195) * t888 + (t1012 * t854 + t875 * t1198) * t887) * t981, ((t1009 * t856 - t877 * t1193) * t889 + (t1011 * t855 - t876 * t1196) * t888 + (t1013 * t854 - t875 * t1199) * t887) * t981, t974 * t1085 + t975 * t1084 + t976 * t1083 + ((t1023 * t877 - t886 * t862) * t1077 + (t1024 * t876 - t885 * t861) * t1078 + (t1025 * t875 - t884 * t860) * t1079) * t1003, t875 * t1028 + t876 * t1027 + t877 * t1026 + ((t1020 * t877 - t841 * t886) * t909 + (t1021 * t876 - t840 * t885) * t907 + (t1022 * t875 - t839 * t884) * t905) * t1003, t875 * t1112 + t876 * t1109 + t877 * t1106 + (t1038 * t877 + t1040 * t876 + t1042 * t875) * t1004 + (t1114 * t886 + t1116 * t885 + t1118 * t884) * t1003, t875 * t1111 + t876 * t1108 + t877 * t1105 + (-t1039 * t877 - t1041 * t876 - t1043 * t875) * t1004 + (t1113 * t886 + t1115 * t885 + t1117 * t884) * t1003, (t886 * t1203 + t885 * t1206 + t884 * t1209) * t1003, (t1138 * t856 + t877 * t789) * t889 + (t1140 * t855 + t876 * t787) * t888 + (t1142 * t854 + t875 * t785) * t887 + ((t1057 * t844 + t886 * t793) * t909 + (t1059 * t843 + t885 * t792) * t907 + (t1061 * t842 + t884 * t791) * t905 + (t1045 * t886 + t1047 * t885 + t1049 * t884) * pkin(2)) * t1003, (t1137 * t856 + t877 * t790) * t889 + (t1139 * t855 + t876 * t788) * t888 + (t1141 * t854 + t875 * t786) * t887 + ((t1057 * t847 + t886 * t796) * t909 + (t1059 * t846 + t885 * t795) * t907 + (t1061 * t845 + t884 * t794) * t905 + (t1044 * t886 + t1046 * t885 + t1048 * t884) * pkin(2)) * t1003, 0; t859 * t1194 + t858 * t1197 + t857 * t1200, t1080 + t1081 + t1082, ((t1008 * t859 + t880 * t1192) * t889 + (t1010 * t858 + t879 * t1195) * t888 + (t1012 * t857 + t878 * t1198) * t887) * t981, ((t1009 * t859 - t880 * t1193) * t889 + (t1011 * t858 - t879 * t1196) * t888 + (t1013 * t857 - t878 * t1199) * t887) * t981, t974 * t1082 + t975 * t1081 + t976 * t1080 + ((t1023 * t880 - t883 * t862) * t1077 + (t1024 * t879 - t882 * t861) * t1078 + (t1025 * t878 - t881 * t860) * t1079) * t1003, t878 * t1028 + t879 * t1027 + t880 * t1026 + ((t1020 * t880 - t841 * t883) * t909 + (t1021 * t879 - t840 * t882) * t907 + (t1022 * t878 - t839 * t881) * t905) * t1003, t878 * t1112 + t879 * t1109 + t880 * t1106 + (t1038 * t880 + t1040 * t879 + t1042 * t878) * t1004 + (t1114 * t883 + t1116 * t882 + t1118 * t881) * t1003, t878 * t1111 + t879 * t1108 + t880 * t1105 + (-t1039 * t880 - t1041 * t879 - t1043 * t878) * t1004 + (t1113 * t883 + t1115 * t882 + t1117 * t881) * t1003, (t883 * t1203 + t882 * t1206 + t881 * t1209) * t1003, (t1138 * t859 + t880 * t789) * t889 + (t1140 * t858 + t879 * t787) * t888 + (t1142 * t857 + t878 * t785) * t887 + ((t1056 * t844 + t883 * t793) * t909 + (t1058 * t843 + t882 * t792) * t907 + (t1060 * t842 + t881 * t791) * t905 + (t1045 * t883 + t1047 * t882 + t1049 * t881) * pkin(2)) * t1003, (t1137 * t859 + t880 * t790) * t889 + (t1139 * t858 + t879 * t788) * t888 + (t1141 * t857 + t878 * t786) * t887 + ((t1056 * t847 + t883 * t796) * t909 + (t1058 * t846 + t882 * t795) * t907 + (t1060 * t845 + t881 * t794) * t905 + (t1044 * t883 + t1046 * t882 + t1048 * t881) * pkin(2)) * t1003, 0; t817 + t816 + t815, 0, (t1008 + t1010 + t1012) * t981, (t1009 + t1011 + t1013) * t981, 0, 0, 0, 0, 0, (-t1104 - t1107 - t1110) * t981 + (-t1090 - t1092 - t1094) * t1131 + t1224 + t1225 + t1226, (-t1144 * t814 - t1147 * t813 - t1150 * t812) * t981 + (-t1089 - t1091 - t1093) * t1131 + t1221 + t1222 + t1223, 0;];
tau_reg  = t1;
