% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:35:53
% EndTime: 2020-08-06 17:35:57
% DurationCPUTime: 3.89s
% Computational Cost: add. (9254->326), mult. (19104->748), div. (732->14), fcn. (20766->22), ass. (0->338)
t606 = cos(qJ(2,3));
t600 = sin(qJ(2,3));
t611 = pkin(7) + pkin(6);
t698 = t600 * t611;
t571 = pkin(2) * t606 + t698;
t592 = sin(pkin(8));
t594 = cos(pkin(8));
t577 = t611 * t606;
t568 = pkin(2) * t600 - t577;
t595 = cos(pkin(4));
t593 = sin(pkin(4));
t599 = sin(qJ(3,3));
t723 = t593 * t599;
t619 = pkin(3) * t723 - t568 * t595;
t532 = t592 * t571 - t619 * t594;
t596 = legFrame(3,3);
t580 = sin(t596);
t583 = cos(t596);
t547 = t594 * t580 + t583 * t592;
t709 = t595 * t600;
t550 = t592 * t709 - t594 * t606;
t553 = t592 * t606 + t594 * t709;
t605 = cos(qJ(3,3));
t691 = pkin(2) * t723;
t769 = pkin(3) * t605 ^ 2;
t773 = t571 * t594 + t619 * t592;
t499 = -(t550 * t583 + t580 * t553) * t769 + (-t532 * t580 + t773 * t583) * t605 + t547 * t691;
t544 = -t592 * t580 + t583 * t594;
t502 = (-t580 * t550 + t553 * t583) * t769 + (t532 * t583 + t773 * t580) * t605 - t544 * t691;
t717 = t593 * t605;
t511 = -t544 * t717 - (t544 * t709 + t606 * t547) * t599;
t514 = -t547 * t717 - (-t606 * t544 + t547 * t709) * t599;
t710 = t595 * t599;
t722 = t593 * t600;
t529 = t722 * t769 + (pkin(3) * t710 + t568 * t593) * t605 + pkin(2) * t710;
t524 = 0.1e1 / t529 ^ 2;
t778 = t524 * (t499 * t514 + t502 * t511);
t608 = cos(qJ(2,2));
t602 = sin(qJ(2,2));
t695 = t602 * t611;
t572 = pkin(2) * t608 + t695;
t578 = t611 * t608;
t569 = pkin(2) * t602 - t578;
t601 = sin(qJ(3,2));
t721 = t593 * t601;
t618 = pkin(3) * t721 - t569 * t595;
t533 = t592 * t572 - t618 * t594;
t597 = legFrame(2,3);
t581 = sin(t597);
t584 = cos(t597);
t548 = t594 * t581 + t584 * t592;
t707 = t595 * t602;
t551 = t592 * t707 - t594 * t608;
t554 = t592 * t608 + t594 * t707;
t607 = cos(qJ(3,2));
t690 = pkin(2) * t721;
t768 = pkin(3) * t607 ^ 2;
t774 = t572 * t594 + t618 * t592;
t500 = -(t551 * t584 + t581 * t554) * t768 + (-t533 * t581 + t774 * t584) * t607 + t548 * t690;
t545 = -t592 * t581 + t584 * t594;
t503 = (-t581 * t551 + t554 * t584) * t768 + (t533 * t584 + t774 * t581) * t607 - t545 * t690;
t715 = t593 * t607;
t512 = -t545 * t715 - (t545 * t707 + t608 * t548) * t601;
t515 = -t548 * t715 - (-t608 * t545 + t548 * t707) * t601;
t708 = t595 * t601;
t720 = t593 * t602;
t530 = t720 * t768 + (pkin(3) * t708 + t569 * t593) * t607 + pkin(2) * t708;
t526 = 0.1e1 / t530 ^ 2;
t777 = t526 * (t500 * t515 + t503 * t512);
t610 = cos(qJ(2,1));
t604 = sin(qJ(2,1));
t692 = t604 * t611;
t573 = pkin(2) * t610 + t692;
t579 = t611 * t610;
t570 = pkin(2) * t604 - t579;
t603 = sin(qJ(3,1));
t719 = t593 * t603;
t617 = pkin(3) * t719 - t570 * t595;
t534 = t592 * t573 - t617 * t594;
t598 = legFrame(1,3);
t582 = sin(t598);
t585 = cos(t598);
t549 = t594 * t582 + t585 * t592;
t705 = t595 * t604;
t552 = t592 * t705 - t594 * t610;
t555 = t592 * t610 + t594 * t705;
t609 = cos(qJ(3,1));
t689 = pkin(2) * t719;
t767 = pkin(3) * t609 ^ 2;
t775 = t573 * t594 + t617 * t592;
t501 = -(t552 * t585 + t582 * t555) * t767 + (-t534 * t582 + t775 * t585) * t609 + t549 * t689;
t546 = -t592 * t582 + t585 * t594;
t504 = (-t582 * t552 + t555 * t585) * t767 + (t534 * t585 + t775 * t582) * t609 - t546 * t689;
t713 = t593 * t609;
t513 = -t546 * t713 - (t546 * t705 + t610 * t549) * t603;
t516 = -t549 * t713 - (-t610 * t546 + t549 * t705) * t603;
t706 = t595 * t603;
t718 = t593 * t604;
t531 = t718 * t767 + (pkin(3) * t706 + t570 * t593) * t609 + pkin(2) * t706;
t528 = 0.1e1 / t531 ^ 2;
t776 = t528 * (t501 * t516 + t504 * t513);
t772 = 0.2e1 * pkin(2);
t771 = 0.2e1 * t593;
t612 = 0.1e1 / pkin(3);
t770 = 0.2e1 * t612;
t766 = pkin(6) * t612;
t765 = t499 * t524;
t764 = t500 * t526;
t763 = t501 * t528;
t762 = t514 * t524;
t761 = t515 * t526;
t760 = t516 * t528;
t574 = t605 * pkin(3) + pkin(2);
t565 = t600 * t574 - t577;
t729 = (t574 * t606 + t698) * t595;
t517 = -t565 * t544 - t547 * t729;
t541 = t565 * t717 + t574 * t710;
t535 = 0.1e1 / t541;
t759 = t517 * t535;
t575 = t607 * pkin(3) + pkin(2);
t566 = t602 * t575 - t578;
t728 = (t575 * t608 + t695) * t595;
t518 = -t566 * t545 - t548 * t728;
t542 = t566 * t715 + t575 * t708;
t537 = 0.1e1 / t542;
t758 = t518 * t537;
t576 = t609 * pkin(3) + pkin(2);
t567 = t604 * t576 - t579;
t727 = (t576 * t610 + t692) * t595;
t519 = -t567 * t546 - t549 * t727;
t543 = t567 * t713 + t576 * t706;
t539 = 0.1e1 / t543;
t757 = t519 * t539;
t520 = -t544 * t729 + t565 * t547;
t756 = t520 * t535;
t521 = -t545 * t728 + t566 * t548;
t755 = t521 * t537;
t522 = -t546 * t727 + t567 * t549;
t754 = t522 * t539;
t523 = 0.1e1 / t529;
t753 = t523 * t535;
t752 = t523 * t599;
t751 = t523 * t600;
t750 = t523 * t605;
t749 = t523 * t606;
t586 = t599 ^ 2;
t748 = t524 * t586;
t525 = 0.1e1 / t530;
t747 = t525 * t537;
t746 = t525 * t601;
t745 = t525 * t602;
t744 = t525 * t607;
t743 = t525 * t608;
t587 = t601 ^ 2;
t742 = t526 * t587;
t527 = 0.1e1 / t531;
t741 = t527 * t539;
t740 = t527 * t603;
t739 = t527 * t604;
t738 = t527 * t609;
t737 = t527 * t610;
t588 = t603 ^ 2;
t736 = t528 * t588;
t700 = t599 * t600;
t704 = t595 * t605;
t735 = t535 * (-t593 * t700 + t704);
t699 = t600 * t605;
t734 = t535 * (-t593 * t699 - t710);
t697 = t601 * t602;
t703 = t595 * t607;
t733 = t537 * (-t593 * t697 + t703);
t696 = t602 * t607;
t732 = t537 * (-t593 * t696 - t708);
t694 = t603 * t604;
t702 = t595 * t609;
t731 = t539 * (-t593 * t694 + t702);
t693 = t604 * t609;
t730 = t539 * (-t593 * t693 - t706);
t716 = t593 * t606;
t714 = t593 * t608;
t712 = t593 * t610;
t711 = t593 * t612;
t701 = t595 * t612;
t688 = t535 * t766;
t687 = t537 * t766;
t686 = t539 * t766;
t685 = t511 * t765;
t684 = t512 * t764;
t683 = t513 * t763;
t682 = t502 * t762;
t681 = t503 * t761;
t680 = t504 * t760;
t679 = t511 * t762;
t678 = t512 * t761;
t677 = t513 * t760;
t676 = t523 * t716;
t675 = t523 * t710;
t674 = t523 * t704;
t673 = t599 * t749;
t672 = t605 * t749;
t671 = t524 * t599 * t605;
t670 = t525 * t714;
t669 = t525 * t708;
t668 = t525 * t703;
t667 = t601 * t743;
t666 = t607 * t743;
t665 = t526 * t601 * t607;
t664 = t527 * t712;
t663 = t527 * t706;
t662 = t527 * t702;
t661 = t603 * t737;
t660 = t609 * t737;
t659 = t528 * t603 * t609;
t658 = t535 * t701;
t657 = t535 * t700;
t656 = t535 * t699;
t655 = t537 * t701;
t654 = t537 * t697;
t653 = t537 * t696;
t652 = t539 * t701;
t651 = t539 * t694;
t650 = t539 * t693;
t649 = t599 * t688;
t648 = t605 * t688;
t647 = t601 * t687;
t646 = t607 * t687;
t645 = t603 * t686;
t644 = t609 * t686;
t643 = t511 * t520 * t753;
t642 = t512 * t521 * t747;
t641 = t513 * t522 * t741;
t640 = t514 * t517 * t753;
t639 = t515 * t518 * t747;
t638 = t516 * t519 * t741;
t637 = t535 * t600 * t711;
t636 = t537 * t602 * t711;
t635 = t539 * t604 * t711;
t634 = t599 * t637;
t633 = t605 * t637;
t632 = t601 * t636;
t631 = t607 * t636;
t630 = t603 * t635;
t629 = t609 * t635;
t625 = t499 * t716 + t511 * t772;
t624 = t500 * t714 + t512 * t772;
t623 = t501 * t712 + t513 * t772;
t622 = t502 * t716 + t514 * t772;
t621 = t503 * t714 + t515 * t772;
t620 = t504 * t712 + t516 * t772;
t616 = (t511 * t517 + t514 * t520) * t753;
t615 = (t512 * t518 + t515 * t521) * t747;
t614 = (t513 * t519 + t516 * t522) * t741;
t613 = 0.1e1 / pkin(3) ^ 2;
t540 = 0.1e1 / t543 ^ 2;
t538 = 0.1e1 / t542 ^ 2;
t536 = 0.1e1 / t541 ^ 2;
t510 = t516 ^ 2;
t509 = t515 ^ 2;
t508 = t514 ^ 2;
t507 = t513 ^ 2;
t506 = t512 ^ 2;
t505 = t511 ^ 2;
t498 = t516 * t664 + t519 * t652;
t497 = t513 * t664 + t522 * t652;
t496 = t515 * t670 + t518 * t655;
t495 = t512 * t670 + t521 * t655;
t494 = t514 * t676 + t517 * t658;
t493 = t511 * t676 + t520 * t658;
t492 = t498 * t603;
t491 = t498 * t609;
t490 = t497 * t603;
t489 = t497 * t609;
t488 = t496 * t601;
t487 = t496 * t607;
t486 = t495 * t601;
t485 = t495 * t607;
t484 = t494 * t599;
t483 = t494 * t605;
t482 = t493 * t599;
t481 = t493 * t605;
t480 = (pkin(6) * t516 + t504 * t718) * t527;
t479 = (pkin(6) * t513 + t501 * t718) * t527;
t478 = (pkin(6) * t515 + t503 * t720) * t525;
t477 = (pkin(6) * t512 + t500 * t720) * t525;
t476 = (pkin(6) * t514 + t502 * t722) * t523;
t475 = (pkin(6) * t511 + t499 * t722) * t523;
t474 = -t519 * t629 - t492;
t473 = -t519 * t630 + t491;
t472 = -t522 * t629 - t490;
t471 = -t522 * t630 + t489;
t470 = -t518 * t631 - t488;
t469 = -t518 * t632 + t487;
t468 = -t521 * t631 - t486;
t467 = -t521 * t632 + t485;
t466 = -t517 * t633 - t484;
t465 = -t517 * t634 + t483;
t464 = -t520 * t633 - t482;
t463 = -t520 * t634 + t481;
t462 = (-t514 * t751 - t515 * t745 - t516 * t739) * t593;
t461 = (-t511 * t751 - t512 * t745 - t513 * t739) * t593;
t460 = (t514 * t749 + t515 * t743 + t516 * t737) * t593;
t459 = (t511 * t749 + t512 * t743 + t513 * t737) * t593;
t458 = -t519 * t644 - t620 * t740;
t457 = -t522 * t644 - t623 * t740;
t456 = -t519 * t645 + t620 * t738;
t455 = -t522 * t645 + t623 * t738;
t454 = -t518 * t646 - t621 * t746;
t453 = -t521 * t646 - t624 * t746;
t452 = -t518 * t647 + t621 * t744;
t451 = -t521 * t647 + t624 * t744;
t450 = -t517 * t648 - t622 * t752;
t449 = -t520 * t648 - t625 * t752;
t448 = -t517 * t649 + t622 * t750;
t447 = -t520 * t649 + t625 * t750;
t446 = (t517 * t520 * t536 + t518 * t521 * t538 + t519 * t522 * t540) * t613;
t445 = t677 + t678 + t679;
t444 = -t609 * t480 - t504 * t663;
t443 = -t609 * t479 - t501 * t663;
t442 = -t607 * t478 - t503 * t669;
t441 = -t607 * t477 - t500 * t669;
t440 = -t605 * t476 - t502 * t675;
t439 = -t605 * t475 - t499 * t675;
t438 = -t603 * t480 + t504 * t662;
t437 = -t603 * t479 + t501 * t662;
t436 = -t601 * t478 + t503 * t668;
t435 = -t601 * t477 + t500 * t668;
t434 = -t599 * t476 + t502 * t674;
t433 = -t599 * t475 + t499 * t674;
t432 = t586 * t679 + t587 * t678 + t588 * t677;
t431 = 0.2e1 * t511 * t514 * t671 + 0.2e1 * t512 * t515 * t665 + 0.2e1 * t513 * t516 * t659;
t430 = t502 * t523 + t503 * t525 + t504 * t527;
t429 = t499 * t523 + t500 * t525 + t501 * t527;
t428 = t502 * t765 + t503 * t764 + t504 * t763;
t427 = (t605 * t616 + t607 * t615 + t609 * t614) * t612;
t426 = (t599 * t616 + t601 * t615 + t603 * t614) * t612;
t425 = (t606 * t778 + t608 * t777 + t610 * t776) * t593;
t424 = (-t600 * t778 - t602 * t777 - t604 * t776) * t593;
t1 = [t499 ^ 2 * t524 + t500 ^ 2 * t526 + t501 ^ 2 * t528, t505 * t524 + t506 * t526 + t507 * t528, (t606 * t685 + t608 * t684 + t610 * t683) * t771, (-t600 * t685 - t602 * t684 - t604 * t683) * t771, t505 * t748 + t506 * t742 + t507 * t736, 0.2e1 * t505 * t671 + 0.2e1 * t506 * t665 + 0.2e1 * t507 * t659, (t599 * t643 + t601 * t642 + t603 * t641) * t770, (t605 * t643 + t607 * t642 + t609 * t641) * t770, (t520 ^ 2 * t536 + t521 ^ 2 * t538 + t522 ^ 2 * t540) * t613, (t455 * t513 + t471 * t501) * t527 + (t451 * t512 + t467 * t500) * t525 + (t447 * t511 + t463 * t499) * t523 + (t433 * t756 + t435 * t755 + t437 * t754) * t612, (t457 * t513 + t472 * t501) * t527 + (t453 * t512 + t468 * t500) * t525 + (t449 * t511 + t464 * t499) * t523 + (t439 * t756 + t441 * t755 + t443 * t754) * t612, 1; t428, t445, t425, t424, t432, t431, t426, t427, t446, (t456 * t513 + t473 * t501) * t527 + (t452 * t512 + t469 * t500) * t525 + (t448 * t511 + t465 * t499) * t523 + (t434 * t756 + t436 * t755 + t438 * t754) * t612, (t458 * t513 + t474 * t501) * t527 + (t454 * t512 + t470 * t500) * t525 + (t450 * t511 + t466 * t499) * t523 + (t440 * t756 + t442 * t755 + t444 * t754) * t612, 0; t429, 0, t459, t461, 0, 0, 0, 0, 0, (t520 * t735 + t521 * t733 + t522 * t731) * t612 + (t511 * t672 + t512 * t666 + t513 * t660) * t593, (t520 * t734 + t521 * t732 + t522 * t730) * t612 + (-t511 * t673 - t512 * t667 - t513 * t661) * t593, 0; t428, t445, t425, t424, t432, t431, t426, t427, t446, (t455 * t516 + t471 * t504) * t527 + (t451 * t515 + t467 * t503) * t525 + (t447 * t514 + t463 * t502) * t523 + (t433 * t759 + t435 * t758 + t437 * t757) * t612, (t457 * t516 + t472 * t504) * t527 + (t453 * t515 + t468 * t503) * t525 + (t449 * t514 + t464 * t502) * t523 + (t439 * t759 + t441 * t758 + t443 * t757) * t612, 0; t502 ^ 2 * t524 + t503 ^ 2 * t526 + t504 ^ 2 * t528, t508 * t524 + t509 * t526 + t510 * t528, (t606 * t682 + t608 * t681 + t610 * t680) * t771, (-t600 * t682 - t602 * t681 - t604 * t680) * t771, t508 * t748 + t509 * t742 + t510 * t736, 0.2e1 * t508 * t671 + 0.2e1 * t509 * t665 + 0.2e1 * t510 * t659, (t599 * t640 + t601 * t639 + t603 * t638) * t770, (t605 * t640 + t607 * t639 + t609 * t638) * t770, (t517 ^ 2 * t536 + t518 ^ 2 * t538 + t519 ^ 2 * t540) * t613, (t456 * t516 + t473 * t504) * t527 + (t452 * t515 + t469 * t503) * t525 + (t448 * t514 + t465 * t502) * t523 + (t434 * t759 + t436 * t758 + t438 * t757) * t612, (t458 * t516 + t474 * t504) * t527 + (t454 * t515 + t470 * t503) * t525 + (t450 * t514 + t466 * t502) * t523 + (t440 * t759 + t442 * t758 + t444 * t757) * t612, 1; t430, 0, t460, t462, 0, 0, 0, 0, 0, (t517 * t735 + t518 * t733 + t519 * t731) * t612 + (t514 * t672 + t515 * t666 + t516 * t660) * t593, (t517 * t734 + t518 * t732 + t519 * t730) * t612 + (-t514 * t673 - t515 * t667 - t516 * t661) * t593, 0; t429, 0, t459, t461, 0, 0, 0, 0, 0, t481 + t485 + t489 + (-t520 * t657 - t521 * t654 - t522 * t651) * t711, -t482 - t486 - t490 + (-t520 * t656 - t521 * t653 - t522 * t650) * t711, 0; t430, 0, t460, t462, 0, 0, 0, 0, 0, t483 + t487 + t491 + (-t517 * t657 - t518 * t654 - t519 * t651) * t711, -t484 - t488 - t492 + (-t517 * t656 - t518 * t653 - t519 * t650) * t711, 0; 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
tau_reg  = t1;
