% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:50
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:50:03
% EndTime: 2020-08-06 17:50:16
% DurationCPUTime: 12.91s
% Computational Cost: add. (56343->449), mult. (113148->963), div. (4797->17), fcn. (103914->22), ass. (0->420)
t1118 = cos(qJ(2,3));
t1126 = pkin(7) + pkin(6);
t1082 = t1118 * t1126;
t1112 = sin(qJ(2,3));
t1060 = pkin(2) * t1112 - t1082;
t1105 = sin(pkin(4));
t1107 = cos(pkin(4));
t1111 = sin(qJ(3,3));
t1304 = t1107 * t1111;
t1039 = pkin(3) * t1304 + t1060 * t1105;
t1117 = cos(qJ(3,3));
t1320 = t1105 * t1112;
t1101 = t1117 ^ 2;
t1384 = pkin(3) * t1101;
t1012 = pkin(2) * t1304 + t1039 * t1117 + t1320 * t1384;
t1003 = 0.1e1 / t1012;
t1120 = cos(qJ(2,2));
t1083 = t1120 * t1126;
t1114 = sin(qJ(2,2));
t1061 = pkin(2) * t1114 - t1083;
t1113 = sin(qJ(3,2));
t1302 = t1107 * t1113;
t1040 = pkin(3) * t1302 + t1061 * t1105;
t1119 = cos(qJ(3,2));
t1318 = t1105 * t1114;
t1102 = t1119 ^ 2;
t1383 = pkin(3) * t1102;
t1013 = pkin(2) * t1302 + t1040 * t1119 + t1318 * t1383;
t1006 = 0.1e1 / t1013;
t1122 = cos(qJ(2,1));
t1084 = t1122 * t1126;
t1116 = sin(qJ(2,1));
t1062 = pkin(2) * t1116 - t1084;
t1115 = sin(qJ(3,1));
t1300 = t1107 * t1115;
t1041 = pkin(3) * t1300 + t1062 * t1105;
t1121 = cos(qJ(3,1));
t1316 = t1105 * t1116;
t1103 = t1121 ^ 2;
t1382 = pkin(3) * t1103;
t1014 = pkin(2) * t1300 + t1041 * t1121 + t1316 * t1382;
t1009 = 0.1e1 / t1014;
t1403 = 0.2e1 * t1101 - 0.1e1;
t1402 = 0.2e1 * t1102 - 0.1e1;
t1401 = 0.2e1 * t1103 - 0.1e1;
t1004 = 0.1e1 / t1012 ^ 2;
t1108 = legFrame(3,2);
t1089 = sin(t1108);
t1092 = cos(t1108);
t1124 = xDP(2);
t1125 = xDP(1);
t1051 = t1089 * t1124 - t1092 * t1125;
t1104 = sin(pkin(8));
t1123 = xDP(3);
t1075 = t1123 * t1104;
t1106 = cos(pkin(8));
t1033 = t1051 * t1106 + t1075;
t1305 = t1106 * t1123;
t1036 = t1051 * t1104 - t1305;
t1303 = t1107 * t1112;
t1315 = t1105 * t1117;
t985 = t1036 * t1315 - (t1033 * t1118 - t1036 * t1303) * t1111;
t973 = t985 ^ 2 * t1004;
t1007 = 0.1e1 / t1013 ^ 2;
t1109 = legFrame(2,2);
t1090 = sin(t1109);
t1093 = cos(t1109);
t1052 = t1090 * t1124 - t1093 * t1125;
t1034 = t1052 * t1106 + t1075;
t1037 = t1052 * t1104 - t1305;
t1301 = t1107 * t1114;
t1313 = t1105 * t1119;
t986 = t1037 * t1313 - (t1034 * t1120 - t1037 * t1301) * t1113;
t974 = t986 ^ 2 * t1007;
t1010 = 0.1e1 / t1014 ^ 2;
t1110 = legFrame(1,2);
t1091 = sin(t1110);
t1094 = cos(t1110);
t1053 = t1091 * t1124 - t1094 * t1125;
t1035 = t1053 * t1106 + t1075;
t1038 = t1053 * t1104 - t1305;
t1299 = t1107 * t1116;
t1311 = t1105 * t1121;
t987 = t1038 * t1311 - (t1035 * t1122 - t1038 * t1299) * t1115;
t975 = t987 ^ 2 * t1010;
t1081 = t1116 * t1126;
t1065 = pkin(2) * t1122 + t1081;
t1296 = t1107 * t1122;
t1323 = t1104 * t1107;
t1379 = pkin(3) * t1121;
t1002 = (t1104 * t1296 + t1106 * t1116) * t1379 + t1065 * t1323 + t1062 * t1106;
t1047 = t1104 * t1299 - t1106 * t1122;
t1029 = t1047 * t1115 + t1104 * t1311;
t1078 = pkin(2) + t1379;
t1056 = t1078 * t1116 - t1084;
t1059 = t1078 * t1300;
t1026 = t1056 * t1311 + t1059;
t993 = t1038 * (t1078 * t1122 + t1081) * t1107 + t1035 * t1056;
t1351 = 0.1e1 / t1026 * t993;
t1274 = 0.2e1 * t1351;
t1355 = t1010 * t987;
t1178 = t1274 * t1355;
t1285 = t1115 * t1121;
t1354 = t1009 * t975;
t1397 = (-t1002 * t1354 + t1029 * t1178) * t1285;
t1080 = t1114 * t1126;
t1064 = pkin(2) * t1120 + t1080;
t1297 = t1107 * t1120;
t1380 = pkin(3) * t1119;
t1001 = (t1104 * t1297 + t1106 * t1114) * t1380 + t1064 * t1323 + t1061 * t1106;
t1046 = t1104 * t1301 - t1106 * t1120;
t1028 = t1046 * t1113 + t1104 * t1313;
t1077 = pkin(2) + t1380;
t1055 = t1077 * t1114 - t1083;
t1058 = t1077 * t1302;
t1025 = t1055 * t1313 + t1058;
t992 = t1037 * (t1077 * t1120 + t1080) * t1107 + t1034 * t1055;
t1352 = 0.1e1 / t1025 * t992;
t1275 = 0.2e1 * t1352;
t1361 = t1007 * t986;
t1179 = t1275 * t1361;
t1289 = t1113 * t1119;
t1360 = t1006 * t974;
t1396 = (-t1001 * t1360 + t1028 * t1179) * t1289;
t1079 = t1112 * t1126;
t1063 = pkin(2) * t1118 + t1079;
t1298 = t1107 * t1118;
t1381 = pkin(3) * t1117;
t1000 = (t1104 * t1298 + t1106 * t1112) * t1381 + t1063 * t1323 + t1060 * t1106;
t1045 = t1104 * t1303 - t1106 * t1118;
t1027 = t1045 * t1111 + t1104 * t1315;
t1076 = pkin(2) + t1381;
t1054 = t1076 * t1112 - t1082;
t1057 = t1076 * t1304;
t1024 = t1054 * t1315 + t1057;
t991 = t1036 * (t1076 * t1118 + t1079) * t1107 + t1033 * t1054;
t1353 = 0.1e1 / t1024 * t991;
t1276 = 0.2e1 * t1353;
t1367 = t1004 * t985;
t1180 = t1276 * t1367;
t1293 = t1111 * t1117;
t1366 = t1003 * t973;
t1395 = (-t1000 * t1366 + t1027 * t1180) * t1293;
t1129 = 0.1e1 / pkin(3) ^ 2;
t1235 = 0.1e1 / t1024 ^ 2 * t1129 * t991 ^ 2;
t1188 = t1111 * t1235;
t1291 = t1112 * t1117;
t1042 = pkin(3) * t1291 + t1060;
t1369 = t1003 * t985;
t1260 = t1126 * t1369;
t1196 = t1111 * t1260;
t1128 = 0.1e1 / pkin(3);
t1236 = t1128 * t1353;
t1085 = pkin(2) ^ 2 + t1126 ^ 2;
t1127 = pkin(3) ^ 2;
t1237 = t1111 * t1353;
t1388 = 0.2e1 * pkin(2);
t1378 = pkin(3) * t1388;
t1270 = (-t1126 * t1237 + (t1101 * t1127 + t1117 * t1378 + t1085) * t1369) * t1367;
t1282 = t1117 * t1128;
t1292 = t1111 * t1128;
t1295 = t1107 * t1128;
t943 = -t1270 * t1295 - (-t1107 * t1196 + (-t1042 * t1105 * t1292 + t1107 * (pkin(2) * t1282 + t1101)) * t1353) / (t1042 * t1315 + t1057) * t1236;
t1347 = t1117 * t943;
t1146 = t1188 - t1347;
t1189 = t1118 * t1236;
t1222 = t1105 * t1291;
t1338 = t1003 * t1118;
t1261 = t985 * t1338;
t1264 = t1003 * t1353;
t967 = t1196 - t1353;
t940 = -((t1105 * t1261 + t1107 * t1236) * t1384 + ((-t1237 + t1260) * t1112 + pkin(2) * t1261) * t1315 + t1107 * t967) * t1003 * t1369 - (t1105 * t1189 + (t1101 * t1107 - t1111 * t1222 - t1107) * t1369) * t1264;
t1225 = t940 * t1282;
t1394 = -t1000 * t1225 + t1027 * t1146;
t1187 = t1117 * t1235;
t1350 = t1111 * t943;
t1147 = t1187 + t1350;
t1228 = t940 * t1292;
t1393 = t1000 * t1228 + t1027 * t1147;
t1232 = 0.1e1 / t1025 ^ 2 * t1129 * t992 ^ 2;
t1185 = t1113 * t1232;
t1287 = t1114 * t1119;
t1043 = pkin(3) * t1287 + t1061;
t1363 = t1006 * t986;
t1251 = t1126 * t1363;
t1193 = t1113 * t1251;
t1233 = t1128 * t1352;
t1234 = t1113 * t1352;
t1269 = (-t1126 * t1234 + (t1102 * t1127 + t1119 * t1378 + t1085) * t1363) * t1361;
t1281 = t1119 * t1128;
t1288 = t1113 * t1128;
t944 = -t1269 * t1295 - (-t1107 * t1193 + (-t1043 * t1105 * t1288 + t1107 * (pkin(2) * t1281 + t1102)) * t1352) / (t1043 * t1313 + t1058) * t1233;
t1346 = t1119 * t944;
t1144 = t1185 - t1346;
t1186 = t1120 * t1233;
t1221 = t1105 * t1287;
t1334 = t1006 * t1120;
t1252 = t986 * t1334;
t1255 = t1006 * t1352;
t968 = t1193 - t1352;
t941 = -((t1105 * t1252 + t1107 * t1233) * t1383 + ((-t1234 + t1251) * t1114 + pkin(2) * t1252) * t1313 + t1107 * t968) * t1006 * t1363 - (t1105 * t1186 + (t1102 * t1107 - t1113 * t1221 - t1107) * t1363) * t1255;
t1224 = t941 * t1281;
t1392 = -t1001 * t1224 + t1028 * t1144;
t1184 = t1119 * t1232;
t1349 = t1113 * t944;
t1145 = t1184 + t1349;
t1227 = t941 * t1288;
t1391 = t1001 * t1227 + t1028 * t1145;
t1229 = 0.1e1 / t1026 ^ 2 * t1129 * t993 ^ 2;
t1182 = t1115 * t1229;
t1283 = t1116 * t1121;
t1044 = pkin(3) * t1283 + t1062;
t1357 = t1009 * t987;
t1242 = t1126 * t1357;
t1190 = t1115 * t1242;
t1230 = t1128 * t1351;
t1231 = t1115 * t1351;
t1268 = (-t1126 * t1231 + (t1103 * t1127 + t1121 * t1378 + t1085) * t1357) * t1355;
t1280 = t1121 * t1128;
t1284 = t1115 * t1128;
t945 = -t1268 * t1295 - (-t1107 * t1190 + (-t1044 * t1105 * t1284 + t1107 * (pkin(2) * t1280 + t1103)) * t1351) / (t1044 * t1311 + t1059) * t1230;
t1345 = t1121 * t945;
t1142 = t1182 - t1345;
t1183 = t1122 * t1230;
t1220 = t1105 * t1283;
t1330 = t1009 * t1122;
t1243 = t987 * t1330;
t1246 = t1009 * t1351;
t969 = t1190 - t1351;
t942 = -((t1105 * t1243 + t1107 * t1230) * t1382 + ((-t1231 + t1242) * t1116 + pkin(2) * t1243) * t1311 + t1107 * t969) * t1009 * t1357 - (t1105 * t1183 + (t1107 * t1103 - t1115 * t1220 - t1107) * t1357) * t1246;
t1223 = t942 * t1280;
t1390 = -t1002 * t1223 + t1029 * t1142;
t1181 = t1121 * t1229;
t1348 = t1115 * t945;
t1143 = t1181 + t1348;
t1226 = t942 * t1284;
t1389 = t1002 * t1226 + t1029 * t1143;
t1387 = pkin(2) * t1111;
t1386 = pkin(2) * t1113;
t1385 = pkin(2) * t1115;
t1156 = -0.2e1 * t1189 * t1369;
t1294 = t1111 * t1112;
t1314 = t1105 * t1118;
t934 = t1107 * t943 + t940 * t1314;
t970 = t973 + t1235;
t1377 = -t1107 * t1188 + t1117 * t934 + (t1111 * t1156 - t970 * t1291 - t943 * t1294) * t1105;
t1376 = -t1111 * t934 - t943 * t1222 + (t1117 * t1156 + t970 * t1294) * t1105 - t1107 * t1187;
t1155 = -0.2e1 * t1186 * t1363;
t1290 = t1113 * t1114;
t1312 = t1105 * t1120;
t935 = t1107 * t944 + t941 * t1312;
t971 = t974 + t1232;
t1375 = -t1107 * t1185 + t1119 * t935 + (t1113 * t1155 - t971 * t1287 - t944 * t1290) * t1105;
t1374 = -t1113 * t935 - t944 * t1221 + (t1119 * t1155 + t971 * t1290) * t1105 - t1107 * t1184;
t1154 = -0.2e1 * t1183 * t1357;
t1286 = t1115 * t1116;
t1310 = t1105 * t1122;
t936 = t1107 * t945 + t942 * t1310;
t972 = t975 + t1229;
t1373 = -t1107 * t1182 + t1121 * t936 + (t1115 * t1154 - t972 * t1283 - t945 * t1286) * t1105;
t1372 = -t1115 * t936 - t945 * t1220 + (t1121 * t1154 + t972 * t1286) * t1105 - t1107 * t1181;
t1371 = t1003 * t940;
t946 = t1117 * t1270 + (pkin(2) * t1236 - t1117 * t967) * t1264;
t1370 = t1003 * t946;
t1309 = t1106 * t1107;
t997 = (t1104 * t1112 - t1106 * t1298) * t1381 - t1063 * t1309 + t1104 * t1060;
t1368 = t1003 * t997;
t1365 = t1006 * t941;
t947 = t1119 * t1269 + (pkin(2) * t1233 - t1119 * t968) * t1255;
t1364 = t1006 * t947;
t998 = (t1104 * t1114 - t1106 * t1297) * t1380 - t1064 * t1309 + t1104 * t1061;
t1362 = t1006 * t998;
t1359 = t1009 * t942;
t948 = t1121 * t1268 + (pkin(2) * t1230 - t1121 * t969) * t1246;
t1358 = t1009 * t948;
t999 = (t1104 * t1116 - t1106 * t1296) * t1379 - t1065 * t1309 + t1104 * t1062;
t1356 = t1009 * t999;
t1344 = t1000 * t1003;
t1343 = t1001 * t1006;
t1342 = t1002 * t1009;
t1341 = t1003 * t1089;
t1340 = t1003 * t1092;
t1339 = t1003 * t1112;
t1337 = t1006 * t1090;
t1336 = t1006 * t1093;
t1335 = t1006 * t1114;
t1333 = t1009 * t1091;
t1332 = t1009 * t1094;
t1331 = t1009 * t1116;
t1329 = t1027 * t1089;
t1328 = t1027 * t1092;
t1327 = t1028 * t1090;
t1326 = t1028 * t1093;
t1325 = t1029 * t1091;
t1324 = t1029 * t1094;
t1322 = t1105 * t1106;
t1321 = t1105 * t1111;
t1319 = t1105 * t1113;
t1317 = t1105 * t1115;
t1308 = t1106 * t1117;
t1307 = t1106 * t1119;
t1306 = t1106 * t1121;
t1273 = pkin(2) * t1369;
t1272 = pkin(2) * t1363;
t1271 = pkin(2) * t1357;
t1267 = t943 * t1344;
t1266 = t944 * t1343;
t1265 = t945 * t1342;
t1263 = t1027 * t1371;
t1262 = t1111 ^ 2 * t1371;
t1259 = t1111 * t1366;
t1258 = t1112 * t1366;
t1257 = t1117 * t1366;
t1256 = t1118 * t1366;
t1254 = t1028 * t1365;
t1253 = t1113 ^ 2 * t1365;
t1250 = t1113 * t1360;
t1249 = t1114 * t1360;
t1248 = t1119 * t1360;
t1247 = t1120 * t1360;
t1245 = t1029 * t1359;
t1244 = t1115 ^ 2 * t1359;
t1241 = t1115 * t1354;
t1240 = t1116 * t1354;
t1239 = t1121 * t1354;
t1238 = t1122 * t1354;
t1219 = t1027 * t1276;
t1048 = t1104 * t1118 + t1106 * t1303;
t1030 = -t1048 * t1111 - t1105 * t1308;
t1218 = -0.2e1 * t1030 * t1353;
t1217 = t1028 * t1275;
t1049 = t1104 * t1120 + t1106 * t1301;
t1031 = -t1049 * t1113 - t1105 * t1307;
t1216 = -0.2e1 * t1031 * t1352;
t1215 = t1029 * t1274;
t1050 = t1104 * t1122 + t1106 * t1299;
t1032 = -t1050 * t1115 - t1105 * t1306;
t1214 = -0.2e1 * t1032 * t1351;
t1213 = pkin(6) * t1236;
t1212 = pkin(6) * t1233;
t1211 = pkin(6) * t1230;
t1210 = t1000 * t1259;
t1209 = t1000 * t1257;
t1206 = t1001 * t1250;
t1205 = t1001 * t1248;
t1202 = t1002 * t1241;
t1201 = t1002 * t1239;
t1198 = t1027 * t1262;
t1197 = t1293 * t1371;
t1195 = t1028 * t1253;
t1194 = t1289 * t1365;
t1192 = t1029 * t1244;
t1191 = t1285 * t1359;
t1165 = pkin(3) * t1321 - t1060 * t1107;
t994 = -t1045 * t1384 + t1063 * t1308 + (pkin(2) * t1321 + t1165 * t1117) * t1104;
t1177 = t1030 * t946 + t940 * t994;
t1164 = pkin(3) * t1319 - t1061 * t1107;
t995 = -t1046 * t1383 + t1064 * t1307 + (pkin(2) * t1319 + t1164 * t1119) * t1104;
t1176 = t1031 * t947 + t941 * t995;
t1163 = pkin(3) * t1317 - t1062 * t1107;
t996 = -t1047 * t1382 + t1065 * t1306 + (pkin(2) * t1317 + t1163 * t1121) * t1104;
t1175 = t1032 * t948 + t942 * t996;
t1174 = t1027 * t1197;
t1173 = t1028 * t1194;
t1172 = t1029 * t1191;
t1171 = t1403 * t1180;
t1170 = t1402 * t1179;
t1169 = t1401 * t1178;
t1168 = t946 * t1314 + t940 * t1388;
t1167 = t947 * t1312 + t941 * t1388;
t1166 = t948 * t1310 + t942 * t1388;
t1015 = -t1063 * t1104 + t1165 * t1106;
t976 = -(t1048 * t1089 - t1092 * t1320) * t1384 + (t1015 * t1089 + t1039 * t1092) * t1117 + (t1089 * t1322 + t1092 * t1107) * t1387;
t1162 = t946 * t1329 + t940 * t976;
t977 = (t1048 * t1092 + t1089 * t1320) * t1384 + (-t1015 * t1092 + t1039 * t1089) * t1117 + (t1089 * t1107 - t1092 * t1322) * t1387;
t1161 = t946 * t1328 - t940 * t977;
t1016 = -t1064 * t1104 + t1164 * t1106;
t978 = -(t1049 * t1090 - t1093 * t1318) * t1383 + (t1016 * t1090 + t1040 * t1093) * t1119 + (t1090 * t1322 + t1093 * t1107) * t1386;
t1160 = t947 * t1327 + t941 * t978;
t979 = (t1049 * t1093 + t1090 * t1318) * t1383 + (-t1016 * t1093 + t1040 * t1090) * t1119 + (t1090 * t1107 - t1093 * t1322) * t1386;
t1159 = t947 * t1326 - t941 * t979;
t1017 = -t1065 * t1104 + t1163 * t1106;
t980 = -(t1050 * t1091 - t1094 * t1316) * t1382 + (t1017 * t1091 + t1041 * t1094) * t1121 + (t1091 * t1322 + t1094 * t1107) * t1385;
t1158 = t948 * t1325 + t942 * t980;
t981 = (t1050 * t1094 + t1091 * t1316) * t1382 + (-t1017 * t1094 + t1041 * t1091) * t1121 + (t1091 * t1107 - t1094 * t1322) * t1385;
t1157 = t948 * t1324 - t942 * t981;
t937 = pkin(6) * t940 + t946 * t1320;
t928 = t1107 * t1117 * t946 - t1111 * t937;
t961 = t1111 * t1273 + t1117 * t1213 / 0.2e1;
t1153 = -t1000 * t928 + t961 * t1219;
t931 = -t1117 * t937 - t946 * t1304;
t964 = t1117 * t1273 - t1111 * t1213 / 0.2e1;
t1152 = -t1000 * t931 + t964 * t1219;
t938 = pkin(6) * t941 + t947 * t1318;
t929 = t1107 * t1119 * t947 - t1113 * t938;
t962 = t1113 * t1272 + t1119 * t1212 / 0.2e1;
t1151 = -t1001 * t929 + t962 * t1217;
t932 = -t1119 * t938 - t947 * t1302;
t965 = t1119 * t1272 - t1113 * t1212 / 0.2e1;
t1150 = -t1001 * t932 + t965 * t1217;
t939 = pkin(6) * t942 + t948 * t1316;
t930 = t1107 * t1121 * t948 - t1115 * t939;
t963 = t1115 * t1271 + t1121 * t1211 / 0.2e1;
t1149 = -t1002 * t930 + t963 * t1215;
t933 = -t1121 * t939 - t948 * t1300;
t966 = t1121 * t1271 - t1115 * t1211 / 0.2e1;
t1148 = -t1002 * t933 + t966 * t1215;
t958 = t1403 * t973;
t1138 = t1027 * t1171 - t958 * t1344;
t959 = t1402 * t974;
t1137 = t1028 * t1170 - t959 * t1343;
t960 = t1401 * t975;
t1136 = t1029 * t1169 - t960 * t1342;
t927 = -pkin(6) * t1348 + t1166 * t1121;
t926 = -pkin(6) * t1345 - t1166 * t1115;
t925 = -pkin(6) * t1349 + t1167 * t1119;
t924 = -pkin(6) * t1346 - t1167 * t1113;
t923 = -pkin(6) * t1350 + t1168 * t1117;
t922 = -pkin(6) * t1347 - t1168 * t1111;
t1 = [t981 * t1358 + t979 * t1364 + t977 * t1370, -t1092 * t1263 - t1093 * t1254 - t1094 * t1245, (-t1157 * t1330 - t1159 * t1334 - t1161 * t1338 - t981 * t1240 - t979 * t1249 - t977 * t1258) * t1105, (t1157 * t1331 + t1159 * t1335 + t1161 * t1339 - t1238 * t981 - t1247 * t979 - t1256 * t977) * t1105, -t1092 * t1198 - t1093 * t1195 - t1094 * t1192 + (-t1092 * t1395 - t1093 * t1396 - t1094 * t1397) * t1128, -0.2e1 * t1092 * t1174 - 0.2e1 * t1093 * t1173 - 0.2e1 * t1094 * t1172 + (-t1092 * t1138 - t1093 * t1137 - t1094 * t1136) * t1128, -t1389 * t1332 - t1391 * t1336 - t1393 * t1340, t1390 * t1332 + t1392 * t1336 + t1394 * t1340, (-t1092 * t1267 - t1093 * t1266 - t1094 * t1265) * t1128, (-t927 * t1324 + t1373 * t981) * t1009 + (-t925 * t1326 + t1375 * t979) * t1006 + (-t923 * t1328 + t1377 * t977) * t1003 + (t1149 * t1332 + t1151 * t1336 + t1153 * t1340 + (-t1092 * t1210 - t1093 * t1206 - t1094 * t1202) * pkin(2)) * t1128, (-t926 * t1324 + t1372 * t981) * t1009 + (-t924 * t1326 + t1374 * t979) * t1006 + (-t922 * t1328 + t1376 * t977) * t1003 + (t1148 * t1332 + t1150 * t1336 + t1152 * t1340 + (-t1092 * t1209 - t1093 * t1205 - t1094 * t1201) * pkin(2)) * t1128, 0; t980 * t1358 + t978 * t1364 + t976 * t1370, t1089 * t1263 + t1090 * t1254 + t1091 * t1245, (t1158 * t1330 + t1160 * t1334 + t1162 * t1338 - t980 * t1240 - t978 * t1249 - t976 * t1258) * t1105, (-t1158 * t1331 - t1160 * t1335 - t1162 * t1339 - t1238 * t980 - t1247 * t978 - t1256 * t976) * t1105, t1089 * t1198 + t1090 * t1195 + t1091 * t1192 + (t1089 * t1395 + t1090 * t1396 + t1091 * t1397) * t1128, 0.2e1 * t1089 * t1174 + 0.2e1 * t1090 * t1173 + 0.2e1 * t1091 * t1172 + (t1089 * t1138 + t1090 * t1137 + t1091 * t1136) * t1128, t1389 * t1333 + t1391 * t1337 + t1393 * t1341, -t1390 * t1333 - t1392 * t1337 - t1394 * t1341, (t1089 * t1267 + t1090 * t1266 + t1091 * t1265) * t1128, (t927 * t1325 + t1373 * t980) * t1009 + (t925 * t1327 + t1375 * t978) * t1006 + (t923 * t1329 + t1377 * t976) * t1003 + (-t1149 * t1333 - t1151 * t1337 - t1153 * t1341 + (t1089 * t1210 + t1090 * t1206 + t1091 * t1202) * pkin(2)) * t1128, (t926 * t1325 + t1372 * t980) * t1009 + (t924 * t1327 + t1374 * t978) * t1006 + (t922 * t1329 + t1376 * t976) * t1003 + (-t1148 * t1333 - t1150 * t1337 - t1152 * t1341 + (t1089 * t1209 + t1090 * t1205 + t1091 * t1201) * pkin(2)) * t1128, 0; t996 * t1358 + t995 * t1364 + t994 * t1370, t1030 * t1371 + t1031 * t1365 + t1032 * t1359, (t1175 * t1330 + t1176 * t1334 + t1177 * t1338 - t1240 * t996 - t1249 * t995 - t1258 * t994) * t1105, (-t1175 * t1331 - t1176 * t1335 - t1177 * t1339 - t1238 * t996 - t1247 * t995 - t1256 * t994) * t1105, t1030 * t1262 + t1031 * t1253 + t1032 * t1244 + ((t1032 * t1178 - t999 * t1354) * t1285 + (t1031 * t1179 - t998 * t1360) * t1289 + (t1030 * t1180 - t997 * t1366) * t1293) * t1128, 0.2e1 * t1030 * t1197 + 0.2e1 * t1031 * t1194 + 0.2e1 * t1032 * t1191 + (t1030 * t1171 + t1031 * t1170 + t1032 * t1169 - t960 * t1356 - t959 * t1362 - t958 * t1368) * t1128, (t1032 * t1143 + t1226 * t999) * t1009 + (t1031 * t1145 + t1227 * t998) * t1006 + (t1030 * t1147 + t1228 * t997) * t1003, (-t1032 * t1142 + t1223 * t999) * t1009 + (-t1031 * t1144 + t1224 * t998) * t1006 + (-t1030 * t1146 + t1225 * t997) * t1003, (t945 * t1356 + t944 * t1362 + t943 * t1368) * t1128, (t1032 * t927 + t1373 * t996) * t1009 + (t1031 * t925 + t1375 * t995) * t1006 + (t1030 * t923 + t1377 * t994) * t1003 + ((t1214 * t963 + t999 * t930) * t1009 + (t1216 * t962 + t998 * t929) * t1006 + (t1218 * t961 + t997 * t928) * t1003 + (t1241 * t999 + t1250 * t998 + t1259 * t997) * pkin(2)) * t1128, (t1032 * t926 + t1372 * t996) * t1009 + (t1031 * t924 + t1374 * t995) * t1006 + (t1030 * t922 + t1376 * t994) * t1003 + ((t1214 * t966 + t999 * t933) * t1009 + (t1216 * t965 + t998 * t932) * t1006 + (t1218 * t964 + t997 * t931) * t1003 + (t1239 * t999 + t1248 * t998 + t1257 * t997) * pkin(2)) * t1128, 0;];
tau_reg  = t1;
