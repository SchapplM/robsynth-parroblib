% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 17:50
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 17:49:56
% EndTime: 2020-08-06 17:50:03
% DurationCPUTime: 7.16s
% Computational Cost: add. (13341->412), mult. (31200->1017), div. (1272->8), fcn. (31404->22), ass. (0->421)
t672 = sin(qJ(2,3));
t678 = cos(qJ(2,3));
t683 = pkin(7) + pkin(6);
t643 = pkin(2) * t678 + t672 * t683;
t664 = sin(pkin(8));
t666 = cos(pkin(8));
t640 = pkin(2) * t672 - t683 * t678;
t667 = cos(pkin(4));
t665 = sin(pkin(4));
t671 = sin(qJ(3,3));
t853 = t665 * t671;
t733 = pkin(3) * t853 - t640 * t667;
t616 = -t664 * t643 + t733 * t666;
t839 = t667 * t671;
t631 = pkin(3) * t839 + t640 * t665;
t838 = t667 * t672;
t637 = t664 * t678 + t666 * t838;
t668 = legFrame(3,2);
t652 = sin(t668);
t655 = cos(t668);
t677 = cos(qJ(3,3));
t852 = t665 * t672;
t854 = t665 * t666;
t902 = pkin(3) * t677 ^ 2;
t905 = pkin(2) * t671;
t589 = -(t637 * t652 - t655 * t852) * t902 + (t616 * t652 + t655 * t631) * t677 + (t652 * t854 + t655 * t667) * t905;
t590 = (t637 * t655 + t652 * t852) * t902 + (-t616 * t655 + t631 * t652) * t677 + (t667 * t652 - t655 * t854) * t905;
t634 = t664 * t838 - t666 * t678;
t856 = t664 * t665;
t625 = t671 * t634 + t677 * t856;
t915 = t625 * (t589 * t655 - t590 * t652);
t674 = sin(qJ(2,2));
t680 = cos(qJ(2,2));
t644 = pkin(2) * t680 + t674 * t683;
t641 = pkin(2) * t674 - t683 * t680;
t673 = sin(qJ(3,2));
t851 = t665 * t673;
t732 = pkin(3) * t851 - t641 * t667;
t617 = -t664 * t644 + t732 * t666;
t837 = t667 * t673;
t632 = pkin(3) * t837 + t641 * t665;
t836 = t667 * t674;
t638 = t664 * t680 + t666 * t836;
t669 = legFrame(2,2);
t653 = sin(t669);
t656 = cos(t669);
t679 = cos(qJ(3,2));
t850 = t665 * t674;
t901 = pkin(3) * t679 ^ 2;
t904 = pkin(2) * t673;
t591 = -(t638 * t653 - t656 * t850) * t901 + (t617 * t653 + t656 * t632) * t679 + (t653 * t854 + t656 * t667) * t904;
t592 = (t638 * t656 + t653 * t850) * t901 + (-t617 * t656 + t632 * t653) * t679 + (t667 * t653 - t656 * t854) * t904;
t635 = t664 * t836 - t666 * t680;
t626 = t673 * t635 + t679 * t856;
t914 = t626 * (t591 * t656 - t592 * t653);
t676 = sin(qJ(2,1));
t682 = cos(qJ(2,1));
t645 = pkin(2) * t682 + t676 * t683;
t642 = pkin(2) * t676 - t683 * t682;
t675 = sin(qJ(3,1));
t849 = t665 * t675;
t731 = pkin(3) * t849 - t642 * t667;
t618 = -t664 * t645 + t731 * t666;
t835 = t667 * t675;
t633 = pkin(3) * t835 + t642 * t665;
t834 = t667 * t676;
t639 = t664 * t682 + t666 * t834;
t670 = legFrame(1,2);
t654 = sin(t670);
t657 = cos(t670);
t681 = cos(qJ(3,1));
t848 = t665 * t676;
t900 = pkin(3) * t681 ^ 2;
t903 = pkin(2) * t675;
t593 = -(t639 * t654 - t657 * t848) * t900 + (t618 * t654 + t657 * t633) * t681 + (t654 * t854 + t657 * t667) * t903;
t594 = (t639 * t657 + t654 * t848) * t900 + (-t618 * t657 + t633 * t654) * t681 + (t667 * t654 - t657 * t854) * t903;
t636 = t664 * t834 - t666 * t682;
t627 = t675 * t636 + t681 * t856;
t913 = t627 * (t593 * t657 - t594 * t654);
t912 = t671 * t677;
t911 = t673 * t679;
t910 = t675 * t681;
t909 = -0.2e1 * pkin(2);
t908 = 0.2e1 * pkin(2);
t907 = 0.2e1 * t665;
t684 = 0.1e1 / pkin(3);
t906 = 0.2e1 * t684;
t899 = pkin(3) * t677;
t898 = pkin(3) * t679;
t897 = pkin(3) * t681;
t896 = pkin(6) * t684;
t842 = t666 * t677;
t595 = -t634 * t902 + t643 * t842 + (pkin(2) * t853 + t733 * t677) * t664;
t613 = pkin(2) * t839 + t631 * t677 + t852 * t902;
t608 = 0.1e1 / t613 ^ 2;
t895 = t595 * t608;
t841 = t666 * t679;
t596 = -t635 * t901 + t644 * t841 + (pkin(2) * t851 + t732 * t679) * t664;
t614 = pkin(2) * t837 + t632 * t679 + t850 * t901;
t610 = 0.1e1 / t614 ^ 2;
t894 = t596 * t610;
t840 = t666 * t681;
t597 = -t636 * t900 + t645 * t840 + (pkin(2) * t849 + t731 * t681) * t664;
t615 = pkin(2) * t835 + t633 * t681 + t848 * t900;
t612 = 0.1e1 / t615 ^ 2;
t893 = t597 * t612;
t833 = t667 * t678;
t843 = t666 * t667;
t601 = (t664 * t672 - t666 * t833) * t899 - t643 * t843 + t664 * t640;
t892 = t601 * t684;
t832 = t667 * t680;
t602 = (t664 * t674 - t666 * t832) * t898 - t644 * t843 + t664 * t641;
t891 = t602 * t684;
t831 = t667 * t682;
t603 = (t664 * t676 - t666 * t831) * t897 - t645 * t843 + t664 * t642;
t890 = t603 * t684;
t855 = t664 * t667;
t604 = (t664 * t833 + t666 * t672) * t899 + t643 * t855 + t640 * t666;
t889 = t604 * t608;
t888 = t604 * t684;
t605 = (t664 * t832 + t666 * t674) * t898 + t644 * t855 + t641 * t666;
t887 = t605 * t610;
t886 = t605 * t684;
t606 = (t664 * t831 + t666 * t676) * t897 + t645 * t855 + t642 * t666;
t885 = t606 * t612;
t884 = t606 * t684;
t628 = -t671 * t637 - t665 * t842;
t883 = t608 * t628;
t646 = t652 ^ 2;
t882 = t608 * t646;
t649 = t655 ^ 2;
t881 = t608 * t649;
t880 = t608 * t655;
t879 = t608 * t672;
t878 = t608 * t678;
t629 = -t673 * t638 - t665 * t841;
t877 = t610 * t629;
t647 = t653 ^ 2;
t876 = t610 * t647;
t650 = t656 ^ 2;
t875 = t610 * t650;
t874 = t610 * t656;
t873 = t610 * t674;
t872 = t610 * t680;
t630 = -t639 * t675 - t665 * t840;
t871 = t612 * t630;
t648 = t654 ^ 2;
t870 = t612 * t648;
t651 = t657 ^ 2;
t869 = t612 * t651;
t868 = t612 * t657;
t867 = t612 * t676;
t866 = t612 * t682;
t622 = t628 ^ 2;
t865 = t622 * t608;
t623 = t629 ^ 2;
t864 = t623 * t610;
t624 = t630 ^ 2;
t863 = t624 * t612;
t862 = t625 * t652;
t861 = t625 * t655;
t860 = t626 * t653;
t859 = t626 * t656;
t858 = t627 * t654;
t857 = t627 * t657;
t847 = t665 * t678;
t846 = t665 * t680;
t845 = t665 * t682;
t844 = t665 * t684;
t830 = t667 * t684;
t829 = t671 * t896;
t828 = t673 * t896;
t827 = t675 * t896;
t826 = t677 * t896;
t825 = t679 * t896;
t824 = t681 * t896;
t823 = t595 * t883;
t822 = t596 * t877;
t821 = t597 * t871;
t820 = t601 * t889;
t819 = t601 * t883;
t818 = t602 * t887;
t817 = t602 * t877;
t816 = t603 * t885;
t815 = t603 * t871;
t814 = t625 * t889;
t813 = t626 * t887;
t812 = t627 * t885;
t607 = 0.1e1 / t613;
t811 = t607 * t839;
t810 = t607 * t667 * t677;
t809 = t608 * t862;
t808 = t608 * t861;
t807 = t652 * t880;
t806 = t608 * t912;
t609 = 0.1e1 / t614;
t805 = t609 * t837;
t804 = t609 * t667 * t679;
t803 = t610 * t860;
t802 = t610 * t859;
t801 = t653 * t874;
t800 = t610 * t911;
t611 = 0.1e1 / t615;
t799 = t611 * t835;
t798 = t611 * t667 * t681;
t797 = t612 * t858;
t796 = t612 * t857;
t795 = t654 * t868;
t794 = t612 * t910;
t619 = t625 ^ 2;
t793 = t619 * t882;
t792 = t619 * t881;
t620 = t626 ^ 2;
t791 = t620 * t876;
t790 = t620 * t875;
t621 = t627 ^ 2;
t789 = t621 * t870;
t788 = t621 * t869;
t787 = t671 * t847;
t786 = t673 * t846;
t785 = t675 * t845;
t784 = t677 * t847;
t783 = t679 * t846;
t782 = t681 * t845;
t781 = t589 * t809;
t780 = t590 * t808;
t779 = t591 * t803;
t778 = t592 * t802;
t777 = t593 * t797;
t776 = t594 * t796;
t775 = t671 * t814;
t774 = t677 * t814;
t773 = t673 * t813;
t772 = t679 * t813;
t771 = t675 * t812;
t770 = t681 * t812;
t769 = t607 * t672 * t844;
t768 = t619 * t806;
t767 = t609 * t674 * t844;
t766 = t620 * t800;
t765 = t611 * t676 * t844;
t764 = t621 * t794;
t763 = t619 * t807;
t762 = t620 * t801;
t761 = t621 * t795;
t760 = t628 * t809;
t759 = t628 * t808;
t758 = t629 * t803;
t757 = t629 * t802;
t756 = t630 * t797;
t755 = t630 * t796;
t754 = t604 * t625 * t807;
t753 = t605 * t626 * t801;
t752 = t606 * t627 * t795;
t751 = t671 * t769;
t750 = t677 * t769;
t749 = t625 * t628 * t806;
t748 = t673 * t767;
t747 = t679 * t767;
t746 = t626 * t629 * t800;
t745 = t675 * t765;
t744 = t681 * t765;
t743 = t627 * t630 * t794;
t739 = t601 * t625 + t604 * t628;
t738 = t602 * t626 + t605 * t629;
t737 = t603 * t627 + t606 * t630;
t736 = t595 * t847 + t628 * t908;
t735 = t596 * t846 + t629 * t908;
t734 = t597 * t845 + t630 * t908;
t730 = t604 * t751;
t729 = t604 * t750;
t728 = t605 * t748;
t727 = t605 * t747;
t726 = t606 * t745;
t725 = t606 * t744;
t568 = (pkin(6) * t862 + t589 * t852) * t607;
t505 = -t671 * t568 + t589 * t810;
t699 = t625 * t677 * t909 + t604 * t829;
t521 = (t589 * t784 - t699 * t652) * t607;
t724 = t505 * t888 + t521 * t625;
t569 = (-pkin(6) * t861 + t590 * t852) * t607;
t506 = -t671 * t569 + t590 * t810;
t522 = (t590 * t784 + t699 * t655) * t607;
t723 = t506 * t888 + t522 * t625;
t570 = (pkin(6) * t860 + t591 * t850) * t609;
t507 = -t673 * t570 + t591 * t804;
t697 = t626 * t679 * t909 + t605 * t828;
t525 = (t591 * t783 - t697 * t653) * t609;
t722 = t507 * t886 + t525 * t626;
t571 = (-pkin(6) * t859 + t592 * t850) * t609;
t508 = -t673 * t571 + t592 * t804;
t526 = (t592 * t783 + t697 * t656) * t609;
t721 = t508 * t886 + t526 * t626;
t572 = (pkin(6) * t858 + t593 * t848) * t611;
t509 = -t675 * t572 + t593 * t798;
t695 = t627 * t681 * t909 + t606 * t827;
t529 = (t593 * t782 - t695 * t654) * t611;
t720 = t509 * t884 + t529 * t627;
t573 = (-pkin(6) * t857 + t594 * t848) * t611;
t510 = -t675 * t573 + t594 * t798;
t530 = (t594 * t782 + t695 * t657) * t611;
t719 = t510 * t884 + t530 * t627;
t511 = -t677 * t568 - t589 * t811;
t700 = t604 * t826 + 0.2e1 * t625 * t905;
t519 = (-t589 * t787 - t700 * t652) * t607;
t718 = t511 * t888 + t519 * t625;
t512 = -t677 * t569 - t590 * t811;
t520 = (-t590 * t787 + t700 * t655) * t607;
t717 = t512 * t888 + t520 * t625;
t513 = -t679 * t570 - t591 * t805;
t698 = t605 * t825 + 0.2e1 * t626 * t904;
t523 = (-t591 * t786 - t698 * t653) * t609;
t716 = t513 * t886 + t523 * t626;
t514 = -t679 * t571 - t592 * t805;
t524 = (-t592 * t786 + t698 * t656) * t609;
t715 = t514 * t886 + t524 * t626;
t515 = -t681 * t572 - t593 * t799;
t696 = t606 * t824 + 0.2e1 * t627 * t903;
t527 = (-t593 * t785 - t696 * t654) * t611;
t714 = t515 * t884 + t527 * t627;
t516 = -t681 * t573 - t594 * t799;
t528 = (-t594 * t785 + t696 * t657) * t611;
t713 = t516 * t884 + t528 * t627;
t577 = (pkin(6) * t628 + t595 * t852) * t607;
t533 = -t671 * t577 + t595 * t810;
t545 = (-t601 * t829 + t736 * t677) * t607;
t712 = t533 * t888 + t545 * t625;
t578 = (pkin(6) * t629 + t596 * t850) * t609;
t534 = -t673 * t578 + t596 * t804;
t547 = (-t602 * t828 + t735 * t679) * t609;
t711 = t534 * t886 + t547 * t626;
t579 = (pkin(6) * t630 + t597 * t848) * t611;
t535 = -t675 * t579 + t597 * t798;
t549 = (-t603 * t827 + t734 * t681) * t611;
t710 = t535 * t884 + t549 * t627;
t536 = -t677 * t577 - t595 * t811;
t544 = (-t601 * t826 - t736 * t671) * t607;
t709 = t536 * t888 + t544 * t625;
t537 = -t679 * t578 - t596 * t805;
t546 = (-t602 * t825 - t735 * t673) * t609;
t708 = t537 * t886 + t546 * t626;
t538 = -t681 * t579 - t597 * t799;
t548 = (-t603 * t824 - t734 * t675) * t611;
t707 = t538 * t884 + t548 * t627;
t706 = t589 * t628 + t595 * t862;
t705 = -t590 * t628 + t595 * t861;
t704 = t591 * t629 + t596 * t860;
t703 = -t592 * t629 + t596 * t859;
t702 = t593 * t630 + t597 * t858;
t701 = -t594 * t630 + t597 * t857;
t694 = t608 * t652 * t739;
t693 = t739 * t880;
t692 = t610 * t653 * t738;
t691 = t738 * t874;
t690 = t612 * t654 * t737;
t689 = t737 * t868;
t688 = t607 * (t604 * t830 + t625 * t847);
t687 = t609 * (t605 * t830 + t626 * t846);
t686 = t611 * (t606 * t830 + t627 * t845);
t685 = 0.1e1 / pkin(3) ^ 2;
t660 = t675 ^ 2;
t659 = t673 ^ 2;
t658 = t671 ^ 2;
t600 = t606 ^ 2;
t599 = t605 ^ 2;
t598 = t604 ^ 2;
t588 = (t603 * t830 + t630 * t845) * t611;
t587 = (t602 * t830 + t629 * t846) * t609;
t586 = (t601 * t830 + t628 * t847) * t607;
t585 = t657 * t686;
t584 = t654 * t686;
t583 = t656 * t687;
t582 = t653 * t687;
t581 = t655 * t688;
t580 = t652 * t688;
t576 = -t761 - t762 - t763;
t575 = -t658 * t763 - t659 * t762 - t660 * t761;
t574 = -0.2e1 * t761 * t910 - 0.2e1 * t762 * t911 - 0.2e1 * t763 * t912;
t567 = -t588 * t675 - t603 * t744;
t566 = t588 * t681 - t603 * t745;
t565 = -t587 * t673 - t602 * t747;
t564 = t587 * t679 - t602 * t748;
t563 = -t586 * t671 - t601 * t750;
t562 = t586 * t677 - t601 * t751;
t561 = -t585 * t681 + t657 * t726;
t560 = t585 * t675 + t657 * t725;
t559 = -t584 * t675 - t654 * t725;
t558 = t584 * t681 - t654 * t726;
t557 = -t583 * t679 + t656 * t728;
t556 = t583 * t673 + t656 * t727;
t555 = -t582 * t673 - t653 * t727;
t554 = t582 * t679 - t653 * t728;
t553 = -t581 * t677 + t655 * t730;
t552 = t581 * t671 + t655 * t729;
t551 = -t580 * t671 - t652 * t729;
t550 = t580 * t677 - t652 * t730;
t543 = (-t598 * t807 - t599 * t801 - t600 * t795) * t685;
t542 = -t755 - t757 - t759;
t541 = t756 + t758 + t760;
t540 = -t658 * t759 - t659 * t757 - t660 * t755;
t539 = t658 * t760 + t659 * t758 + t660 * t756;
t532 = -0.2e1 * t655 * t749 - 0.2e1 * t656 * t746 - 0.2e1 * t657 * t743;
t531 = 0.2e1 * t652 * t749 + 0.2e1 * t653 * t746 + 0.2e1 * t654 * t743;
t518 = (-t677 * t754 - t679 * t753 - t681 * t752) * t906;
t517 = (-t671 * t754 - t673 * t753 - t675 * t752) * t906;
t504 = (-t655 * t820 - t656 * t818 - t657 * t816) * t685;
t503 = (t652 * t820 + t653 * t818 + t654 * t816) * t685;
t502 = t590 * t895 + t592 * t894 + t594 * t893;
t501 = t589 * t895 + t591 * t894 + t593 * t893;
t500 = (-t677 * t693 - t679 * t691 - t681 * t689) * t684;
t499 = (-t671 * t693 - t673 * t691 - t675 * t689) * t684;
t498 = (t677 * t694 + t679 * t692 + t681 * t690) * t684;
t497 = (t671 * t694 + t673 * t692 + t675 * t690) * t684;
t496 = t590 * t608 * t589 + t592 * t610 * t591 + t594 * t612 * t593;
t495 = (-t701 * t866 - t703 * t872 - t705 * t878) * t665;
t494 = (t701 * t867 + t703 * t873 + t705 * t879) * t665;
t493 = (t702 * t866 + t704 * t872 + t706 * t878) * t665;
t492 = (-t702 * t867 - t704 * t873 - t706 * t879) * t665;
t491 = (-t866 * t913 - t872 * t914 - t878 * t915) * t665;
t490 = (t867 * t913 + t873 * t914 + t879 * t915) * t665;
t1 = [t590 ^ 2 * t608 + t592 ^ 2 * t610 + t594 ^ 2 * t612, t788 + t790 + t792, (-t678 * t780 - t680 * t778 - t682 * t776) * t907, (t672 * t780 + t674 * t778 + t676 * t776) * t907, t658 * t792 + t659 * t790 + t660 * t788, 0.2e1 * t649 * t768 + 0.2e1 * t650 * t766 + 0.2e1 * t651 * t764, (t649 * t775 + t650 * t773 + t651 * t771) * t906, (t649 * t774 + t650 * t772 + t651 * t770) * t906, (t598 * t881 + t599 * t875 + t600 * t869) * t685, (t561 * t594 - t657 * t719) * t611 + (t557 * t592 - t656 * t721) * t609 + (t553 * t590 - t655 * t723) * t607, (t560 * t594 - t657 * t713) * t611 + (t556 * t592 - t656 * t715) * t609 + (t552 * t590 - t655 * t717) * t607, 1; t496, t576, t491, t490, t575, t574, t517, t518, t543, (t558 * t594 - t657 * t720) * t611 + (t554 * t592 - t656 * t722) * t609 + (t550 * t590 - t655 * t724) * t607, (t559 * t594 - t657 * t714) * t611 + (t555 * t592 - t656 * t716) * t609 + (t551 * t590 - t655 * t718) * t607, 0; t502, t542, t495, t494, t540, t532, t499, t500, t504, (t566 * t594 - t657 * t710) * t611 + (t564 * t592 - t656 * t711) * t609 + (t562 * t590 - t655 * t712) * t607, (t567 * t594 - t657 * t707) * t611 + (t565 * t592 - t656 * t708) * t609 + (t563 * t590 - t655 * t709) * t607, 0; t496, t576, t491, t490, t575, t574, t517, t518, t543, (t561 * t593 + t654 * t719) * t611 + (t557 * t591 + t653 * t721) * t609 + (t553 * t589 + t652 * t723) * t607, (t560 * t593 + t654 * t713) * t611 + (t556 * t591 + t653 * t715) * t609 + (t552 * t589 + t652 * t717) * t607, 0; t589 ^ 2 * t608 + t591 ^ 2 * t610 + t593 ^ 2 * t612, t789 + t791 + t793, (t678 * t781 + t680 * t779 + t682 * t777) * t907, (-t672 * t781 - t674 * t779 - t676 * t777) * t907, t658 * t793 + t659 * t791 + t660 * t789, 0.2e1 * t646 * t768 + 0.2e1 * t647 * t766 + 0.2e1 * t648 * t764, (t646 * t775 + t647 * t773 + t648 * t771) * t906, (t646 * t774 + t647 * t772 + t648 * t770) * t906, (t598 * t882 + t599 * t876 + t600 * t870) * t685, (t558 * t593 + t654 * t720) * t611 + (t554 * t591 + t653 * t722) * t609 + (t550 * t589 + t652 * t724) * t607, (t559 * t593 + t654 * t714) * t611 + (t555 * t591 + t653 * t716) * t609 + (t551 * t589 + t652 * t718) * t607, 1; t501, t541, t493, t492, t539, t531, t497, t498, t503, (t566 * t593 + t654 * t710) * t611 + (t564 * t591 + t653 * t711) * t609 + (t562 * t589 + t652 * t712) * t607, (t567 * t593 + t654 * t707) * t611 + (t565 * t591 + t653 * t708) * t609 + (t563 * t589 + t652 * t709) * t607, 0; t502, t542, t495, t494, t540, t532, t499, t500, t504, (t510 * t890 + t530 * t630 + t561 * t597) * t611 + (t508 * t891 + t526 * t629 + t557 * t596) * t609 + (t506 * t892 + t522 * t628 + t553 * t595) * t607, (t516 * t890 + t528 * t630 + t560 * t597) * t611 + (t514 * t891 + t524 * t629 + t556 * t596) * t609 + (t512 * t892 + t520 * t628 + t552 * t595) * t607, 0; t501, t541, t493, t492, t539, t531, t497, t498, t503, (t509 * t890 + t529 * t630 + t558 * t597) * t611 + (t507 * t891 + t525 * t629 + t554 * t596) * t609 + (t505 * t892 + t521 * t628 + t550 * t595) * t607, (t515 * t890 + t527 * t630 + t559 * t597) * t611 + (t513 * t891 + t523 * t629 + t555 * t596) * t609 + (t511 * t892 + t519 * t628 + t551 * t595) * t607, 0; t595 ^ 2 * t608 + t596 ^ 2 * t610 + t597 ^ 2 * t612, t863 + t864 + t865, (t678 * t823 + t680 * t822 + t682 * t821) * t907, (-t672 * t823 - t674 * t822 - t676 * t821) * t907, t658 * t865 + t659 * t864 + t660 * t863, 0.2e1 * t622 * t806 + 0.2e1 * t623 * t800 + 0.2e1 * t624 * t794, (t671 * t819 + t673 * t817 + t675 * t815) * t906, (t677 * t819 + t679 * t817 + t681 * t815) * t906, (t601 ^ 2 * t608 + t602 ^ 2 * t610 + t603 ^ 2 * t612) * t685, (t535 * t890 + t549 * t630 + t566 * t597) * t611 + (t534 * t891 + t547 * t629 + t564 * t596) * t609 + (t533 * t892 + t545 * t628 + t562 * t595) * t607, (t538 * t890 + t548 * t630 + t567 * t597) * t611 + (t537 * t891 + t546 * t629 + t565 * t596) * t609 + (t536 * t892 + t544 * t628 + t563 * t595) * t607, 1;];
tau_reg  = t1;
