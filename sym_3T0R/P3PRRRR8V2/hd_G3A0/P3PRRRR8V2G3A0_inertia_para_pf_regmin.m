% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3PRRRR8V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:05
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G3A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:05:02
% EndTime: 2020-08-06 18:05:08
% DurationCPUTime: 7.00s
% Computational Cost: add. (13341->412), mult. (31200->1018), div. (1272->8), fcn. (31404->22), ass. (0->419)
t660 = sin(qJ(2,3));
t666 = cos(qJ(2,3));
t671 = pkin(7) + pkin(6);
t631 = pkin(2) * t666 + t660 * t671;
t652 = sin(pkin(8));
t654 = cos(pkin(8));
t628 = pkin(2) * t660 - t671 * t666;
t655 = cos(pkin(4));
t653 = sin(pkin(4));
t659 = sin(qJ(3,3));
t841 = t653 * t659;
t721 = pkin(3) * t841 - t628 * t655;
t604 = t654 * t631 + t721 * t652;
t827 = t655 * t659;
t619 = pkin(3) * t827 + t653 * t628;
t826 = t655 * t660;
t622 = t652 * t826 - t654 * t666;
t656 = legFrame(3,2);
t640 = sin(t656);
t643 = cos(t656);
t665 = cos(qJ(3,3));
t840 = t653 * t660;
t843 = t652 * t653;
t889 = pkin(3) * t665 ^ 2;
t892 = pkin(2) * t659;
t577 = -(t622 * t643 - t640 * t840) * t889 + (t604 * t643 + t640 * t619) * t665 + (t655 * t640 + t643 * t843) * t892;
t580 = (t622 * t640 + t643 * t840) * t889 + (-t604 * t640 + t643 * t619) * t665 + (-t640 * t843 + t643 * t655) * t892;
t625 = t652 * t666 + t654 * t826;
t835 = t653 * t665;
t616 = t659 * t625 + t654 * t835;
t901 = t616 * (t577 * t640 - t580 * t643);
t662 = sin(qJ(2,2));
t668 = cos(qJ(2,2));
t632 = pkin(2) * t668 + t662 * t671;
t629 = pkin(2) * t662 - t671 * t668;
t661 = sin(qJ(3,2));
t839 = t653 * t661;
t720 = pkin(3) * t839 - t629 * t655;
t605 = t654 * t632 + t720 * t652;
t825 = t655 * t661;
t620 = pkin(3) * t825 + t653 * t629;
t824 = t655 * t662;
t623 = t652 * t824 - t654 * t668;
t657 = legFrame(2,2);
t641 = sin(t657);
t644 = cos(t657);
t667 = cos(qJ(3,2));
t838 = t653 * t662;
t888 = pkin(3) * t667 ^ 2;
t891 = pkin(2) * t661;
t578 = -(t623 * t644 - t641 * t838) * t888 + (t605 * t644 + t641 * t620) * t667 + (t655 * t641 + t644 * t843) * t891;
t581 = (t623 * t641 + t644 * t838) * t888 + (-t605 * t641 + t644 * t620) * t667 + (-t641 * t843 + t644 * t655) * t891;
t626 = t652 * t668 + t654 * t824;
t833 = t653 * t667;
t617 = t661 * t626 + t654 * t833;
t900 = t617 * (t578 * t641 - t581 * t644);
t664 = sin(qJ(2,1));
t670 = cos(qJ(2,1));
t633 = pkin(2) * t670 + t664 * t671;
t630 = pkin(2) * t664 - t671 * t670;
t663 = sin(qJ(3,1));
t837 = t653 * t663;
t719 = pkin(3) * t837 - t630 * t655;
t606 = t654 * t633 + t719 * t652;
t823 = t655 * t663;
t621 = pkin(3) * t823 + t653 * t630;
t822 = t655 * t664;
t624 = t652 * t822 - t654 * t670;
t658 = legFrame(1,2);
t642 = sin(t658);
t645 = cos(t658);
t669 = cos(qJ(3,1));
t836 = t653 * t664;
t887 = pkin(3) * t669 ^ 2;
t890 = pkin(2) * t663;
t579 = -(t624 * t645 - t642 * t836) * t887 + (t606 * t645 + t642 * t621) * t669 + (t655 * t642 + t645 * t843) * t890;
t582 = (t624 * t642 + t645 * t836) * t887 + (-t606 * t642 + t645 * t621) * t669 + (-t642 * t843 + t645 * t655) * t890;
t627 = t652 * t670 + t654 * t822;
t831 = t653 * t669;
t618 = t627 * t663 + t654 * t831;
t899 = t618 * (t579 * t642 - t582 * t645);
t898 = t659 * t665;
t897 = t661 * t667;
t896 = t663 * t669;
t895 = 0.2e1 * pkin(2);
t894 = 0.2e1 * t653;
t672 = 0.1e1 / pkin(3);
t893 = 0.2e1 * t672;
t886 = pkin(3) * t665;
t885 = pkin(3) * t667;
t884 = pkin(3) * t669;
t883 = pkin(6) * t672;
t583 = -t625 * t889 - t631 * t652 * t665 + (pkin(2) * t841 + t721 * t665) * t654;
t601 = pkin(2) * t827 + t619 * t665 + t840 * t889;
t596 = 0.1e1 / t601 ^ 2;
t882 = t583 * t596;
t584 = -t626 * t888 - t632 * t652 * t667 + (pkin(2) * t839 + t720 * t667) * t654;
t602 = pkin(2) * t825 + t620 * t667 + t838 * t888;
t598 = 0.1e1 / t602 ^ 2;
t881 = t584 * t598;
t585 = -t627 * t887 - t633 * t652 * t669 + (pkin(2) * t837 + t719 * t669) * t654;
t603 = pkin(2) * t823 + t621 * t669 + t836 * t887;
t600 = 0.1e1 / t603 ^ 2;
t880 = t585 * t600;
t821 = t655 * t666;
t828 = t654 * t655;
t589 = (t652 * t660 - t654 * t821) * t886 - t631 * t828 + t628 * t652;
t879 = t589 * t596;
t878 = t589 * t672;
t820 = t655 * t668;
t590 = (t652 * t662 - t654 * t820) * t885 - t632 * t828 + t629 * t652;
t877 = t590 * t598;
t876 = t590 * t672;
t819 = t655 * t670;
t591 = (t652 * t664 - t654 * t819) * t884 - t633 * t828 + t630 * t652;
t875 = t591 * t600;
t874 = t591 * t672;
t842 = t652 * t655;
t592 = (t652 * t821 + t654 * t660) * t886 + t631 * t842 + t628 * t654;
t873 = t592 * t672;
t593 = (t652 * t820 + t654 * t662) * t885 + t632 * t842 + t629 * t654;
t872 = t593 * t672;
t594 = (t652 * t819 + t654 * t664) * t884 + t633 * t842 + t630 * t654;
t871 = t594 * t672;
t614 = t659 * t622 + t652 * t835;
t870 = t596 * t614;
t634 = t640 ^ 2;
t869 = t596 * t634;
t637 = t643 ^ 2;
t868 = t596 * t637;
t867 = t596 * t643;
t866 = t596 * t660;
t865 = t596 * t666;
t615 = t661 * t623 + t652 * t833;
t864 = t598 * t615;
t635 = t641 ^ 2;
t863 = t598 * t635;
t638 = t644 ^ 2;
t862 = t598 * t638;
t861 = t598 * t644;
t860 = t598 * t662;
t859 = t598 * t668;
t613 = t663 * t624 + t652 * t831;
t858 = t600 * t613;
t636 = t642 ^ 2;
t857 = t600 * t636;
t639 = t645 ^ 2;
t856 = t600 * t639;
t855 = t600 * t645;
t854 = t600 * t664;
t853 = t600 * t670;
t607 = t613 ^ 2;
t852 = t607 * t600;
t608 = t614 ^ 2;
t851 = t608 * t596;
t609 = t615 ^ 2;
t850 = t609 * t598;
t849 = t616 * t640;
t848 = t616 * t643;
t847 = t617 * t641;
t846 = t617 * t644;
t845 = t618 * t642;
t844 = t618 * t645;
t834 = t653 * t666;
t832 = t653 * t668;
t830 = t653 * t670;
t829 = t653 * t672;
t818 = t655 * t672;
t817 = t659 * t883;
t816 = t661 * t883;
t815 = t663 * t883;
t814 = t665 * t883;
t813 = t667 * t883;
t812 = t669 * t883;
t811 = t583 * t870;
t810 = t584 * t864;
t809 = t585 * t858;
t808 = t592 * t879;
t807 = t616 * t879;
t806 = t593 * t877;
t805 = t617 * t877;
t804 = t594 * t875;
t803 = t618 * t875;
t802 = t592 * t870;
t801 = t593 * t864;
t800 = t594 * t858;
t595 = 0.1e1 / t601;
t799 = t595 * t827;
t798 = t595 * t655 * t665;
t797 = t596 * t849;
t796 = t596 * t848;
t795 = t640 * t867;
t794 = t596 * t898;
t597 = 0.1e1 / t602;
t793 = t597 * t825;
t792 = t597 * t655 * t667;
t791 = t598 * t847;
t790 = t598 * t846;
t789 = t641 * t861;
t788 = t598 * t897;
t599 = 0.1e1 / t603;
t787 = t599 * t823;
t786 = t599 * t655 * t669;
t785 = t600 * t845;
t784 = t600 * t844;
t783 = t642 * t855;
t782 = t600 * t896;
t610 = t616 ^ 2;
t781 = t610 * t869;
t611 = t617 ^ 2;
t780 = t611 * t863;
t612 = t618 ^ 2;
t779 = t612 * t857;
t778 = t610 * t868;
t777 = t611 * t862;
t776 = t612 * t856;
t775 = t659 * t834;
t774 = t661 * t832;
t773 = t663 * t830;
t772 = t665 * t834;
t771 = t667 * t832;
t770 = t669 * t830;
t769 = t577 * t796;
t768 = t578 * t790;
t767 = t579 * t784;
t766 = t580 * t797;
t765 = t581 * t791;
t764 = t582 * t785;
t763 = t659 * t807;
t762 = t665 * t807;
t761 = t661 * t805;
t760 = t667 * t805;
t759 = t663 * t803;
t758 = t669 * t803;
t757 = t595 * t660 * t829;
t756 = t610 * t794;
t755 = t597 * t662 * t829;
t754 = t611 * t788;
t753 = t599 * t664 * t829;
t752 = t612 * t782;
t751 = t614 * t797;
t750 = t615 * t791;
t749 = t613 * t785;
t748 = t610 * t795;
t747 = t614 * t796;
t746 = t611 * t789;
t745 = t615 * t790;
t744 = t612 * t783;
t743 = t613 * t784;
t742 = t589 * t616 * t795;
t741 = t590 * t617 * t789;
t740 = t591 * t618 * t783;
t739 = t659 * t757;
t738 = t665 * t757;
t737 = t614 * t616 * t794;
t736 = t661 * t755;
t735 = t667 * t755;
t734 = t615 * t617 * t788;
t733 = t663 * t753;
t732 = t669 * t753;
t731 = t613 * t618 * t782;
t727 = t589 * t614 - t592 * t616;
t726 = t590 * t615 - t593 * t617;
t725 = t591 * t613 - t594 * t618;
t724 = t583 * t834 + t614 * t895;
t723 = t584 * t832 + t615 * t895;
t722 = t585 * t830 + t613 * t895;
t718 = t589 * t739;
t717 = t589 * t738;
t716 = t590 * t736;
t715 = t590 * t735;
t714 = t591 * t733;
t713 = t591 * t732;
t556 = (-pkin(6) * t848 + t577 * t840) * t595;
t493 = -t659 * t556 + t577 * t798;
t687 = t616 * t665 * t895 + t589 * t817;
t509 = (t577 * t772 - t687 * t643) * t595;
t712 = t493 * t878 - t509 * t616;
t557 = (pkin(6) * t849 + t580 * t840) * t595;
t494 = -t659 * t557 + t580 * t798;
t510 = (t580 * t772 + t687 * t640) * t595;
t711 = t494 * t878 - t510 * t616;
t558 = (-pkin(6) * t846 + t578 * t838) * t597;
t495 = -t661 * t558 + t578 * t792;
t685 = t617 * t667 * t895 + t590 * t816;
t513 = (t578 * t771 - t685 * t644) * t597;
t710 = t495 * t876 - t513 * t617;
t559 = (pkin(6) * t847 + t581 * t838) * t597;
t496 = -t661 * t559 + t581 * t792;
t514 = (t581 * t771 + t685 * t641) * t597;
t709 = t496 * t876 - t514 * t617;
t560 = (-pkin(6) * t844 + t579 * t836) * t599;
t497 = -t663 * t560 + t579 * t786;
t683 = t618 * t669 * t895 + t591 * t815;
t517 = (t579 * t770 - t683 * t645) * t599;
t708 = t497 * t874 - t517 * t618;
t561 = (pkin(6) * t845 + t582 * t836) * t599;
t498 = -t663 * t561 + t582 * t786;
t518 = (t582 * t770 + t683 * t642) * t599;
t707 = t498 * t874 - t518 * t618;
t499 = -t665 * t556 - t577 * t799;
t688 = t589 * t814 - 0.2e1 * t616 * t892;
t507 = (-t577 * t775 - t688 * t643) * t595;
t706 = t499 * t878 - t507 * t616;
t500 = -t665 * t557 - t580 * t799;
t508 = (-t580 * t775 + t688 * t640) * t595;
t705 = t500 * t878 - t508 * t616;
t501 = -t667 * t558 - t578 * t793;
t686 = t590 * t813 - 0.2e1 * t617 * t891;
t511 = (-t578 * t774 - t686 * t644) * t597;
t704 = t501 * t876 - t511 * t617;
t502 = -t667 * t559 - t581 * t793;
t512 = (-t581 * t774 + t686 * t641) * t597;
t703 = t502 * t876 - t512 * t617;
t503 = -t669 * t560 - t579 * t787;
t684 = t591 * t812 - 0.2e1 * t618 * t890;
t515 = (-t579 * t773 - t684 * t645) * t599;
t702 = t503 * t874 - t515 * t618;
t504 = -t669 * t561 - t582 * t787;
t516 = (-t582 * t773 + t684 * t642) * t599;
t701 = t504 * t874 - t516 * t618;
t565 = (pkin(6) * t614 + t583 * t840) * t595;
t521 = -t659 * t565 + t583 * t798;
t533 = (-t592 * t817 + t724 * t665) * t595;
t700 = t521 * t878 - t533 * t616;
t566 = (pkin(6) * t615 + t584 * t838) * t597;
t522 = -t661 * t566 + t584 * t792;
t535 = (-t593 * t816 + t723 * t667) * t597;
t699 = t522 * t876 - t535 * t617;
t567 = (pkin(6) * t613 + t585 * t836) * t599;
t523 = -t663 * t567 + t585 * t786;
t537 = (-t594 * t815 + t722 * t669) * t599;
t698 = t523 * t874 - t537 * t618;
t524 = -t665 * t565 - t583 * t799;
t532 = (-t592 * t814 - t724 * t659) * t595;
t697 = t524 * t878 - t532 * t616;
t525 = -t667 * t566 - t584 * t793;
t534 = (-t593 * t813 - t723 * t661) * t597;
t696 = t525 * t876 - t534 * t617;
t526 = -t669 * t567 - t585 * t787;
t536 = (-t594 * t812 - t722 * t663) * t599;
t695 = t526 * t874 - t536 * t618;
t694 = -t577 * t614 + t583 * t848;
t693 = -t578 * t615 + t584 * t846;
t692 = -t579 * t613 + t585 * t844;
t691 = t580 * t614 + t583 * t849;
t690 = t581 * t615 + t584 * t847;
t689 = t582 * t613 + t585 * t845;
t682 = t596 * t640 * t727;
t681 = t727 * t867;
t680 = t598 * t641 * t726;
t679 = t726 * t861;
t678 = t600 * t642 * t725;
t677 = t725 * t855;
t676 = t595 * (-t589 * t818 + t616 * t834);
t675 = t597 * (-t590 * t818 + t617 * t832);
t674 = t599 * (-t591 * t818 + t618 * t830);
t673 = 0.1e1 / pkin(3) ^ 2;
t648 = t663 ^ 2;
t647 = t661 ^ 2;
t646 = t659 ^ 2;
t588 = t591 ^ 2;
t587 = t590 ^ 2;
t586 = t589 ^ 2;
t576 = (t594 * t818 + t613 * t830) * t599;
t575 = (t593 * t818 + t615 * t832) * t597;
t574 = (t592 * t818 + t614 * t834) * t595;
t573 = t645 * t674;
t572 = t642 * t674;
t571 = t644 * t675;
t570 = t641 * t675;
t569 = t643 * t676;
t568 = t640 * t676;
t564 = -t744 - t746 - t748;
t563 = -t646 * t748 - t647 * t746 - t648 * t744;
t562 = -0.2e1 * t744 * t896 - 0.2e1 * t746 * t897 - 0.2e1 * t748 * t898;
t555 = -t576 * t663 - t594 * t732;
t554 = t576 * t669 - t594 * t733;
t553 = -t575 * t661 - t593 * t735;
t552 = t575 * t667 - t593 * t736;
t551 = -t574 * t659 - t592 * t738;
t550 = t574 * t665 - t592 * t739;
t549 = -t573 * t669 - t645 * t714;
t548 = t573 * t663 - t645 * t713;
t547 = -t572 * t663 + t642 * t713;
t546 = t572 * t669 + t642 * t714;
t545 = -t571 * t667 - t644 * t716;
t544 = t571 * t661 - t644 * t715;
t543 = -t570 * t661 + t641 * t715;
t542 = t570 * t667 + t641 * t716;
t541 = -t569 * t665 - t643 * t718;
t540 = t569 * t659 - t643 * t717;
t539 = -t568 * t659 + t640 * t717;
t538 = t568 * t665 + t640 * t718;
t531 = (-t586 * t795 - t587 * t789 - t588 * t783) * t673;
t530 = -t743 - t745 - t747;
t529 = t749 + t750 + t751;
t528 = -t646 * t747 - t647 * t745 - t648 * t743;
t527 = t646 * t751 + t647 * t750 + t648 * t749;
t520 = -0.2e1 * t643 * t737 - 0.2e1 * t644 * t734 - 0.2e1 * t645 * t731;
t519 = 0.2e1 * t640 * t737 + 0.2e1 * t641 * t734 + 0.2e1 * t642 * t731;
t506 = (t665 * t742 + t667 * t741 + t669 * t740) * t893;
t505 = (t659 * t742 + t661 * t741 + t663 * t740) * t893;
t492 = (t643 * t808 + t644 * t806 + t645 * t804) * t673;
t491 = (-t640 * t808 - t641 * t806 - t642 * t804) * t673;
t490 = t580 * t882 + t581 * t881 + t582 * t880;
t489 = t577 * t882 + t578 * t881 + t579 * t880;
t488 = (t665 * t681 + t667 * t679 + t669 * t677) * t672;
t487 = (t659 * t681 + t661 * t679 + t663 * t677) * t672;
t486 = (-t665 * t682 - t667 * t680 - t669 * t678) * t672;
t485 = (-t659 * t682 - t661 * t680 - t663 * t678) * t672;
t484 = t577 * t596 * t580 + t578 * t598 * t581 + t579 * t600 * t582;
t483 = (t689 * t853 + t690 * t859 + t691 * t865) * t653;
t482 = (-t689 * t854 - t690 * t860 - t691 * t866) * t653;
t481 = (-t692 * t853 - t693 * t859 - t694 * t865) * t653;
t480 = (t692 * t854 + t693 * t860 + t694 * t866) * t653;
t479 = (t853 * t899 + t859 * t900 + t865 * t901) * t653;
t478 = (-t854 * t899 - t860 * t900 - t866 * t901) * t653;
t1 = [t577 ^ 2 * t596 + t578 ^ 2 * t598 + t579 ^ 2 * t600, t776 + t777 + t778, (-t666 * t769 - t668 * t768 - t670 * t767) * t894, (t660 * t769 + t662 * t768 + t664 * t767) * t894, t646 * t778 + t647 * t777 + t648 * t776, 0.2e1 * t637 * t756 + 0.2e1 * t638 * t754 + 0.2e1 * t639 * t752, (-t637 * t763 - t638 * t761 - t639 * t759) * t893, (-t637 * t762 - t638 * t760 - t639 * t758) * t893, (t586 * t868 + t587 * t862 + t588 * t856) * t673, (t549 * t579 + t645 * t708) * t599 + (t545 * t578 + t644 * t710) * t597 + (t541 * t577 + t643 * t712) * t595, (t548 * t579 + t645 * t702) * t599 + (t544 * t578 + t644 * t704) * t597 + (t540 * t577 + t643 * t706) * t595, 1; t484, t564, t479, t478, t563, t562, t505, t506, t531, (t546 * t579 + t645 * t707) * t599 + (t542 * t578 + t644 * t709) * t597 + (t538 * t577 + t643 * t711) * t595, (t547 * t579 + t645 * t701) * t599 + (t543 * t578 + t644 * t703) * t597 + (t539 * t577 + t643 * t705) * t595, 0; t489, t530, t481, t480, t528, t520, t487, t488, t492, (t554 * t579 + t645 * t698) * t599 + (t552 * t578 + t644 * t699) * t597 + (t550 * t577 + t643 * t700) * t595, (t555 * t579 + t645 * t695) * t599 + (t553 * t578 + t644 * t696) * t597 + (t551 * t577 + t643 * t697) * t595, 0; t484, t564, t479, t478, t563, t562, t505, t506, t531, (t549 * t582 - t642 * t708) * t599 + (t545 * t581 - t641 * t710) * t597 + (t541 * t580 - t640 * t712) * t595, (t548 * t582 - t642 * t702) * t599 + (t544 * t581 - t641 * t704) * t597 + (t540 * t580 - t640 * t706) * t595, 0; t580 ^ 2 * t596 + t581 ^ 2 * t598 + t582 ^ 2 * t600, t779 + t780 + t781, (t666 * t766 + t668 * t765 + t670 * t764) * t894, (-t660 * t766 - t662 * t765 - t664 * t764) * t894, t646 * t781 + t647 * t780 + t648 * t779, 0.2e1 * t634 * t756 + 0.2e1 * t635 * t754 + 0.2e1 * t636 * t752, (-t634 * t763 - t635 * t761 - t636 * t759) * t893, (-t634 * t762 - t635 * t760 - t636 * t758) * t893, (t586 * t869 + t587 * t863 + t588 * t857) * t673, (t546 * t582 - t642 * t707) * t599 + (t542 * t581 - t641 * t709) * t597 + (t538 * t580 - t640 * t711) * t595, (t547 * t582 - t642 * t701) * t599 + (t543 * t581 - t641 * t703) * t597 + (t539 * t580 - t640 * t705) * t595, 1; t490, t529, t483, t482, t527, t519, t485, t486, t491, (t554 * t582 - t642 * t698) * t599 + (t552 * t581 - t641 * t699) * t597 + (t550 * t580 - t640 * t700) * t595, (t555 * t582 - t642 * t695) * t599 + (t553 * t581 - t641 * t696) * t597 + (t551 * t580 - t640 * t697) * t595, 0; t489, t530, t481, t480, t528, t520, t487, t488, t492, (t497 * t871 + t517 * t613 + t549 * t585) * t599 + (t495 * t872 + t513 * t615 + t545 * t584) * t597 + (t493 * t873 + t509 * t614 + t541 * t583) * t595, (t503 * t871 + t515 * t613 + t548 * t585) * t599 + (t501 * t872 + t511 * t615 + t544 * t584) * t597 + (t499 * t873 + t507 * t614 + t540 * t583) * t595, 0; t490, t529, t483, t482, t527, t519, t485, t486, t491, (t498 * t871 + t518 * t613 + t546 * t585) * t599 + (t496 * t872 + t514 * t615 + t542 * t584) * t597 + (t494 * t873 + t510 * t614 + t538 * t583) * t595, (t504 * t871 + t516 * t613 + t547 * t585) * t599 + (t502 * t872 + t512 * t615 + t543 * t584) * t597 + (t500 * t873 + t508 * t614 + t539 * t583) * t595, 0; t583 ^ 2 * t596 + t584 ^ 2 * t598 + t585 ^ 2 * t600, t850 + t851 + t852, (t666 * t811 + t668 * t810 + t670 * t809) * t894, (-t660 * t811 - t662 * t810 - t664 * t809) * t894, t646 * t851 + t647 * t850 + t648 * t852, 0.2e1 * t607 * t782 + 0.2e1 * t608 * t794 + 0.2e1 * t609 * t788, (t659 * t802 + t661 * t801 + t663 * t800) * t893, (t665 * t802 + t667 * t801 + t669 * t800) * t893, (t592 ^ 2 * t596 + t593 ^ 2 * t598 + t594 ^ 2 * t600) * t673, (t523 * t871 + t537 * t613 + t554 * t585) * t599 + (t522 * t872 + t535 * t615 + t552 * t584) * t597 + (t521 * t873 + t533 * t614 + t550 * t583) * t595, (t526 * t871 + t536 * t613 + t555 * t585) * t599 + (t525 * t872 + t534 * t615 + t553 * t584) * t597 + (t524 * t873 + t532 * t614 + t551 * t583) * t595, 1;];
tau_reg  = t1;
