% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V2G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G4A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:17:02
% EndTime: 2020-08-06 18:17:25
% DurationCPUTime: 22.80s
% Computational Cost: add. (120366->605), mult. (277029->1284), div. (5010->17), fcn. (271746->34), ass. (0->538)
t3456 = cos(qJ(2,1));
t3460 = pkin(7) + pkin(6);
t3400 = t3456 * t3460;
t3450 = sin(qJ(2,1));
t3382 = pkin(2) * t3450 - t3400;
t3433 = sin(pkin(4));
t3435 = cos(pkin(4));
t3449 = sin(qJ(3,1));
t3658 = t3435 * t3449;
t3352 = pkin(3) * t3658 + t3382 * t3433;
t3455 = cos(qJ(3,1));
t3670 = t3433 * t3450;
t3431 = t3455 ^ 2;
t3747 = pkin(3) * t3431;
t3316 = 0.1e1 / (pkin(2) * t3658 + t3352 * t3455 + t3670 * t3747);
t3454 = cos(qJ(2,2));
t3399 = t3454 * t3460;
t3448 = sin(qJ(2,2));
t3381 = pkin(2) * t3448 - t3399;
t3447 = sin(qJ(3,2));
t3660 = t3435 * t3447;
t3351 = pkin(3) * t3660 + t3381 * t3433;
t3453 = cos(qJ(3,2));
t3671 = t3433 * t3448;
t3430 = t3453 ^ 2;
t3748 = pkin(3) * t3430;
t3315 = 0.1e1 / (pkin(2) * t3660 + t3351 * t3453 + t3671 * t3748);
t3452 = cos(qJ(2,3));
t3398 = t3452 * t3460;
t3446 = sin(qJ(2,3));
t3380 = pkin(2) * t3446 - t3398;
t3445 = sin(qJ(3,3));
t3662 = t3435 * t3445;
t3350 = pkin(3) * t3662 + t3380 * t3433;
t3451 = cos(qJ(3,3));
t3672 = t3433 * t3446;
t3429 = t3451 ^ 2;
t3749 = pkin(3) * t3429;
t3314 = 0.1e1 / (pkin(2) * t3662 + t3350 * t3451 + t3672 * t3749);
t3441 = legFrame(1,1);
t3410 = sin(t3441);
t3416 = cos(t3441);
t3444 = legFrame(1,2);
t3419 = sin(t3444);
t3457 = xDP(3);
t3458 = xDP(2);
t3422 = cos(t3444);
t3459 = xDP(1);
t3673 = t3422 * t3459;
t3349 = t3673 + (t3410 * t3458 - t3416 * t3457) * t3419;
t3370 = t3410 * t3457 + t3416 * t3458;
t3432 = sin(pkin(8));
t3434 = cos(pkin(8));
t3307 = t3349 * t3434 + t3370 * t3432;
t3438 = legFrame(1,3);
t3407 = sin(t3438);
t3413 = cos(t3438);
t3491 = t3349 * t3432 - t3370 * t3434;
t3286 = t3307 * t3413 - t3491 * t3407;
t3655 = t3435 * t3458;
t3554 = t3450 * t3655;
t3656 = t3435 * t3457;
t3555 = t3450 * t3656;
t3635 = t3456 * t3458;
t3636 = t3456 * t3457;
t3654 = t3435 * t3459;
t3298 = (t3419 * t3555 + t3635) * t3416 + (-t3419 * t3554 + t3636) * t3410 - t3450 * t3422 * t3654;
t3304 = (-t3419 * t3636 + t3554) * t3416 + (t3419 * t3635 + t3555) * t3410 + t3456 * t3673;
t3665 = t3433 * t3455;
t3259 = ((t3298 * t3434 - t3304 * t3432) * t3413 - (t3298 * t3432 + t3304 * t3434) * t3407) * t3449 - t3286 * t3665;
t3642 = t3450 * t3455;
t3355 = pkin(3) * t3642 + t3382;
t3397 = pkin(3) * t3455 + pkin(2);
t3379 = t3397 * t3658;
t3337 = t3355 * t3665 + t3379;
t3333 = 0.1e1 / t3337;
t3724 = t3259 * t3333;
t3763 = -0.2e1 * t3724;
t3440 = legFrame(2,1);
t3409 = sin(t3440);
t3415 = cos(t3440);
t3443 = legFrame(2,2);
t3418 = sin(t3443);
t3421 = cos(t3443);
t3674 = t3421 * t3459;
t3348 = t3674 + (t3409 * t3458 - t3415 * t3457) * t3418;
t3369 = t3409 * t3457 + t3415 * t3458;
t3306 = t3348 * t3434 + t3369 * t3432;
t3437 = legFrame(2,3);
t3406 = sin(t3437);
t3412 = cos(t3437);
t3492 = t3348 * t3432 - t3369 * t3434;
t3285 = t3306 * t3412 - t3492 * t3406;
t3556 = t3448 * t3655;
t3557 = t3448 * t3656;
t3637 = t3454 * t3458;
t3638 = t3454 * t3457;
t3297 = (t3418 * t3557 + t3637) * t3415 + (-t3418 * t3556 + t3638) * t3409 - t3448 * t3421 * t3654;
t3303 = (-t3418 * t3638 + t3556) * t3415 + (t3418 * t3637 + t3557) * t3409 + t3454 * t3674;
t3667 = t3433 * t3453;
t3258 = ((t3297 * t3434 - t3303 * t3432) * t3412 - (t3297 * t3432 + t3303 * t3434) * t3406) * t3447 - t3285 * t3667;
t3646 = t3448 * t3453;
t3354 = pkin(3) * t3646 + t3381;
t3396 = pkin(3) * t3453 + pkin(2);
t3378 = t3396 * t3660;
t3336 = t3354 * t3667 + t3378;
t3331 = 0.1e1 / t3336;
t3725 = t3258 * t3331;
t3762 = -0.2e1 * t3725;
t3439 = legFrame(3,1);
t3408 = sin(t3439);
t3414 = cos(t3439);
t3442 = legFrame(3,2);
t3417 = sin(t3442);
t3420 = cos(t3442);
t3675 = t3420 * t3459;
t3347 = t3675 + (t3408 * t3458 - t3414 * t3457) * t3417;
t3368 = t3408 * t3457 + t3414 * t3458;
t3305 = t3347 * t3434 + t3368 * t3432;
t3436 = legFrame(3,3);
t3405 = sin(t3436);
t3411 = cos(t3436);
t3493 = t3347 * t3432 - t3368 * t3434;
t3284 = t3305 * t3411 - t3493 * t3405;
t3558 = t3446 * t3655;
t3559 = t3446 * t3656;
t3639 = t3452 * t3458;
t3640 = t3452 * t3457;
t3296 = (t3417 * t3559 + t3639) * t3414 + (-t3417 * t3558 + t3640) * t3408 - t3446 * t3420 * t3654;
t3302 = (-t3417 * t3640 + t3558) * t3414 + (t3417 * t3639 + t3559) * t3408 + t3452 * t3675;
t3669 = t3433 * t3451;
t3257 = ((t3296 * t3434 - t3302 * t3432) * t3411 - (t3296 * t3432 + t3302 * t3434) * t3405) * t3445 - t3284 * t3669;
t3650 = t3446 * t3451;
t3353 = pkin(3) * t3650 + t3380;
t3395 = pkin(3) * t3451 + pkin(2);
t3377 = t3395 * t3662;
t3335 = t3353 * t3669 + t3377;
t3329 = 0.1e1 / t3335;
t3726 = t3257 * t3329;
t3761 = -0.2e1 * t3726;
t3402 = 0.2e1 * t3429 - 0.1e1;
t3403 = 0.2e1 * t3430 - 0.1e1;
t3404 = 0.2e1 * t3431 - 0.1e1;
t3359 = t3405 * t3434 + t3411 * t3432;
t3760 = t3359 * t3433;
t3360 = t3406 * t3434 + t3412 * t3432;
t3759 = t3360 * t3433;
t3361 = t3407 * t3434 + t3413 * t3432;
t3758 = t3361 * t3433;
t3754 = 0.2e1 * pkin(2);
t3753 = pkin(2) * t3445;
t3752 = pkin(2) * t3447;
t3751 = pkin(2) * t3449;
t3462 = 0.1e1 / pkin(3);
t3750 = pkin(2) * t3462;
t3746 = pkin(3) * t3433;
t3745 = pkin(3) * t3754;
t3744 = MDP(3) * t3433;
t3743 = MDP(4) * t3433;
t3742 = MDP(9) * t3462;
t3590 = t3460 * t3726;
t3523 = t3445 * t3590;
t3374 = t3395 * t3446 - t3398;
t3649 = t3446 * t3460;
t3684 = (t3395 * t3452 + t3649) * t3435;
t3263 = -t3284 * t3684 + (t3405 * t3305 + t3493 * t3411) * t3374;
t3344 = t3374 * t3669 + t3377;
t3338 = 0.1e1 / t3344;
t3720 = t3263 * t3338;
t3239 = t3523 - t3720;
t3694 = t3338 * t3462;
t3575 = t3263 * t3694;
t3508 = t3452 * t3575;
t3562 = t3433 * t3650;
t3695 = t3338 * t3445;
t3576 = t3263 * t3695;
t3707 = t3329 * t3452;
t3591 = t3257 * t3707;
t3212 = (-((t3433 * t3591 + t3435 * t3575) * t3749 + ((-t3576 + t3590) * t3446 + pkin(2) * t3591) * t3669 + t3239 * t3435) * t3726 - (t3433 * t3508 + (t3429 * t3435 - t3445 * t3562 - t3435) * t3726) * t3720) * t3314;
t3741 = t3212 * t3329;
t3587 = t3460 * t3725;
t3522 = t3447 * t3587;
t3375 = t3396 * t3448 - t3399;
t3645 = t3448 * t3460;
t3683 = (t3396 * t3454 + t3645) * t3435;
t3264 = -t3285 * t3683 + (t3406 * t3306 + t3492 * t3412) * t3375;
t3345 = t3375 * t3667 + t3378;
t3340 = 0.1e1 / t3345;
t3719 = t3264 * t3340;
t3240 = t3522 - t3719;
t3691 = t3340 * t3462;
t3572 = t3264 * t3691;
t3507 = t3454 * t3572;
t3561 = t3433 * t3646;
t3692 = t3340 * t3447;
t3573 = t3264 * t3692;
t3702 = t3331 * t3454;
t3588 = t3258 * t3702;
t3213 = (-((t3433 * t3588 + t3435 * t3572) * t3748 + ((-t3573 + t3587) * t3448 + pkin(2) * t3588) * t3667 + t3240 * t3435) * t3725 - (t3433 * t3507 + (t3430 * t3435 - t3447 * t3561 - t3435) * t3725) * t3719) * t3315;
t3740 = t3213 * t3331;
t3584 = t3460 * t3724;
t3521 = t3449 * t3584;
t3376 = t3397 * t3450 - t3400;
t3641 = t3450 * t3460;
t3682 = (t3397 * t3456 + t3641) * t3435;
t3265 = -t3286 * t3682 + (t3407 * t3307 + t3491 * t3413) * t3376;
t3346 = t3376 * t3665 + t3379;
t3342 = 0.1e1 / t3346;
t3718 = t3265 * t3342;
t3241 = t3521 - t3718;
t3688 = t3342 * t3462;
t3569 = t3265 * t3688;
t3506 = t3456 * t3569;
t3560 = t3433 * t3642;
t3689 = t3342 * t3449;
t3570 = t3265 * t3689;
t3697 = t3333 * t3456;
t3585 = t3259 * t3697;
t3214 = (-((t3433 * t3585 + t3435 * t3569) * t3747 + ((-t3570 + t3584) * t3450 + pkin(2) * t3585) * t3665 + t3241 * t3435) * t3724 - (t3433 * t3506 + (t3431 * t3435 - t3449 * t3560 - t3435) * t3724) * t3718) * t3316;
t3739 = t3214 * t3333;
t3401 = pkin(2) ^ 2 + t3460 ^ 2;
t3461 = pkin(3) ^ 2;
t3227 = -t3460 * t3576 + (t3429 * t3461 + t3451 * t3745 + t3401) * t3726;
t3653 = t3435 * t3462;
t3663 = t3433 * t3462;
t3215 = -t3227 * t3314 * t3653 * t3726 - (-t3435 * t3523 + (-t3445 * t3353 * t3663 + (t3451 * t3750 + t3429) * t3435) * t3720) * t3329 * t3575;
t3738 = t3215 * t3338;
t3737 = t3215 * t3445;
t3736 = t3215 * t3451;
t3228 = -t3460 * t3573 + (t3430 * t3461 + t3453 * t3745 + t3401) * t3725;
t3216 = -t3228 * t3315 * t3653 * t3725 - (-t3435 * t3522 + (-t3447 * t3354 * t3663 + (t3453 * t3750 + t3430) * t3435) * t3719) * t3331 * t3572;
t3735 = t3216 * t3340;
t3734 = t3216 * t3447;
t3733 = t3216 * t3453;
t3229 = -t3460 * t3570 + (t3431 * t3461 + t3455 * t3745 + t3401) * t3724;
t3217 = -t3229 * t3316 * t3653 * t3724 - (-t3435 * t3521 + (-t3449 * t3355 * t3663 + (t3455 * t3750 + t3431) * t3435) * t3718) * t3333 * t3569;
t3732 = t3217 * t3342;
t3731 = t3217 * t3449;
t3730 = t3217 * t3455;
t3708 = t3329 * t3451;
t3592 = t3257 * t3708;
t3218 = (t3227 * t3592 + (pkin(2) * t3575 - t3239 * t3451) * t3720) * t3314;
t3729 = t3218 * t3314;
t3703 = t3331 * t3453;
t3589 = t3258 * t3703;
t3219 = (t3228 * t3589 + (pkin(2) * t3572 - t3240 * t3453) * t3719) * t3315;
t3728 = t3219 * t3315;
t3698 = t3333 * t3455;
t3586 = t3259 * t3698;
t3220 = (t3229 * t3586 + (pkin(2) * t3569 - t3241 * t3455) * t3718) * t3316;
t3727 = t3220 * t3316;
t3254 = t3257 ^ 2;
t3330 = 0.1e1 / t3335 ^ 2;
t3245 = t3254 * t3330;
t3255 = t3258 ^ 2;
t3332 = 0.1e1 / t3336 ^ 2;
t3246 = t3255 * t3332;
t3256 = t3259 ^ 2;
t3334 = 0.1e1 / t3337 ^ 2;
t3247 = t3256 * t3334;
t3723 = t3263 ^ 2 / t3344 ^ 2;
t3722 = t3264 ^ 2 / t3345 ^ 2;
t3721 = t3265 ^ 2 / t3346 ^ 2;
t3356 = -t3405 * t3432 + t3411 * t3434;
t3661 = t3435 * t3446;
t3290 = t3356 * t3669 + t3445 * (t3356 * t3661 + t3359 * t3452);
t3717 = t3290 * t3314;
t3716 = t3290 * t3420;
t3357 = -t3406 * t3432 + t3412 * t3434;
t3659 = t3435 * t3448;
t3291 = t3357 * t3667 + t3447 * (t3357 * t3659 + t3360 * t3454);
t3715 = t3291 * t3315;
t3714 = t3291 * t3421;
t3358 = -t3407 * t3432 + t3413 * t3434;
t3657 = t3435 * t3450;
t3292 = t3358 * t3665 + t3449 * (t3358 * t3657 + t3361 * t3456);
t3713 = t3292 * t3316;
t3712 = t3292 * t3422;
t3668 = t3433 * t3452;
t3484 = t3212 * t3754 + t3218 * t3668;
t3196 = -pkin(6) * t3737 + t3484 * t3451;
t3711 = t3329 * t3196;
t3197 = -pkin(6) * t3736 - t3484 * t3445;
t3710 = t3329 * t3197;
t3709 = t3329 * t3445;
t3666 = t3433 * t3454;
t3483 = t3213 * t3754 + t3219 * t3666;
t3194 = -pkin(6) * t3734 + t3483 * t3453;
t3706 = t3331 * t3194;
t3195 = -pkin(6) * t3733 - t3483 * t3447;
t3705 = t3331 * t3195;
t3704 = t3331 * t3447;
t3664 = t3433 * t3456;
t3482 = t3214 * t3754 + t3220 * t3664;
t3198 = -pkin(6) * t3731 + t3482 * t3455;
t3701 = t3333 * t3198;
t3199 = -pkin(6) * t3730 - t3482 * t3449;
t3700 = t3333 * t3199;
t3699 = t3333 * t3449;
t3696 = t3338 * t3420;
t3693 = t3340 * t3421;
t3690 = t3342 * t3422;
t3687 = t3356 * t3433;
t3686 = t3357 * t3433;
t3685 = t3358 * t3433;
t3681 = t3408 * t3417;
t3680 = t3409 * t3418;
t3679 = t3410 * t3419;
t3678 = t3414 * t3417;
t3677 = t3415 * t3418;
t3676 = t3416 * t3419;
t3652 = t3445 * t3446;
t3651 = t3445 * t3451;
t3648 = t3447 * t3448;
t3647 = t3447 * t3453;
t3644 = t3449 * t3450;
t3643 = t3449 * t3455;
t3206 = t3212 * t3668 + t3215 * t3435;
t3463 = 0.1e1 / pkin(3) ^ 2;
t3582 = t3463 * t3723;
t3242 = t3245 + t3582;
t3472 = t3508 * t3761;
t3518 = t3445 * t3582;
t3634 = t3206 * t3451 - t3435 * t3518 + (-t3215 * t3652 - t3242 * t3650 + t3445 * t3472) * t3433;
t3517 = t3451 * t3582;
t3633 = -t3206 * t3445 - t3215 * t3562 + (t3242 * t3652 + t3451 * t3472) * t3433 - t3435 * t3517;
t3207 = t3213 * t3666 + t3216 * t3435;
t3580 = t3463 * t3722;
t3243 = t3246 + t3580;
t3471 = t3507 * t3762;
t3514 = t3447 * t3580;
t3632 = t3207 * t3453 - t3435 * t3514 + (-t3216 * t3648 - t3243 * t3646 + t3447 * t3471) * t3433;
t3513 = t3453 * t3580;
t3631 = -t3207 * t3447 - t3216 * t3561 + (t3243 * t3648 + t3453 * t3471) * t3433 - t3435 * t3513;
t3208 = t3214 * t3664 + t3217 * t3435;
t3578 = t3463 * t3721;
t3244 = t3247 + t3578;
t3470 = t3506 * t3763;
t3510 = t3449 * t3578;
t3630 = t3208 * t3455 - t3435 * t3510 + (-t3217 * t3644 - t3244 * t3642 + t3449 * t3470) * t3433;
t3509 = t3455 * t3578;
t3629 = -t3208 * t3449 - t3217 * t3560 + (t3244 * t3644 + t3455 * t3470) * t3433 - t3435 * t3509;
t3625 = 0.2e1 * t3257 * t3263;
t3624 = 0.2e1 * t3258 * t3264;
t3623 = 0.2e1 * t3259 * t3265;
t3622 = -0.2e1 * t3263 * t3329;
t3621 = -0.2e1 * t3264 * t3331;
t3620 = -0.2e1 * t3265 * t3333;
t3426 = t3445 ^ 2;
t3619 = t3426 * t3741;
t3618 = t3212 * t3695;
t3617 = t3212 * t3338 * t3451;
t3427 = t3447 ^ 2;
t3616 = t3427 * t3740;
t3615 = t3213 * t3692;
t3614 = t3213 * t3340 * t3453;
t3428 = t3449 ^ 2;
t3613 = t3428 * t3739;
t3612 = t3214 * t3689;
t3611 = t3214 * t3342 * t3455;
t3610 = t3215 * t3709;
t3609 = t3215 * t3708;
t3608 = t3216 * t3704;
t3607 = t3216 * t3703;
t3606 = t3217 * t3699;
t3605 = t3217 * t3698;
t3604 = t3218 * t3716;
t3603 = t3218 * t3329 * t3446;
t3602 = t3218 * t3707;
t3601 = t3219 * t3714;
t3600 = t3219 * t3331 * t3448;
t3599 = t3219 * t3702;
t3598 = t3220 * t3712;
t3597 = t3220 * t3333 * t3450;
t3596 = t3220 * t3697;
t3595 = t3338 * t3245;
t3594 = t3340 * t3246;
t3593 = t3342 * t3247;
t3583 = t3329 * t3723;
t3581 = t3331 * t3722;
t3579 = t3333 * t3721;
t3577 = t3263 * t3717;
t3574 = t3264 * t3715;
t3571 = t3265 * t3713;
t3293 = -t3356 * t3684 + t3359 * t3374;
t3568 = t3293 * t3696;
t3294 = -t3357 * t3683 + t3360 * t3375;
t3567 = t3294 * t3693;
t3295 = -t3358 * t3682 + t3361 * t3376;
t3566 = t3295 * t3690;
t3565 = t3338 * t3651;
t3564 = t3340 * t3647;
t3563 = t3342 * t3643;
t3553 = t3634 * t3314;
t3552 = t3633 * t3314;
t3551 = t3632 * t3315;
t3550 = t3631 * t3315;
t3549 = t3630 * t3316;
t3548 = t3629 * t3316;
t3308 = t3356 * t3678 - t3359 * t3408;
t3362 = t3432 * t3661 - t3434 * t3452;
t3365 = t3432 * t3452 + t3434 * t3661;
t3317 = -t3362 * t3405 + t3365 * t3411;
t3490 = t3362 * t3411 + t3365 * t3405;
t3269 = (t3317 * t3678 - t3408 * t3490) * t3445 + t3308 * t3669;
t3547 = t3269 * t3622;
t3311 = t3356 * t3681 + t3359 * t3414;
t3272 = (-t3317 * t3681 - t3490 * t3414) * t3445 - t3311 * t3669;
t3546 = t3272 * t3622;
t3545 = 0.2e1 * t3577;
t3309 = t3357 * t3677 - t3360 * t3409;
t3363 = t3432 * t3659 - t3434 * t3454;
t3366 = t3432 * t3454 + t3434 * t3659;
t3318 = -t3363 * t3406 + t3366 * t3412;
t3489 = t3363 * t3412 + t3366 * t3406;
t3270 = (t3318 * t3677 - t3409 * t3489) * t3447 + t3309 * t3667;
t3544 = t3270 * t3621;
t3312 = t3357 * t3680 + t3360 * t3415;
t3273 = (-t3318 * t3680 - t3489 * t3415) * t3447 - t3312 * t3667;
t3543 = t3273 * t3621;
t3542 = 0.2e1 * t3574;
t3310 = t3358 * t3676 - t3361 * t3410;
t3364 = t3432 * t3657 - t3434 * t3456;
t3367 = t3432 * t3456 + t3434 * t3657;
t3319 = -t3364 * t3407 + t3367 * t3413;
t3488 = t3364 * t3413 + t3367 * t3407;
t3271 = (t3319 * t3676 - t3410 * t3488) * t3449 + t3310 * t3665;
t3541 = t3271 * t3620;
t3313 = t3358 * t3679 + t3361 * t3416;
t3274 = (-t3319 * t3679 - t3488 * t3416) * t3449 - t3313 * t3665;
t3540 = t3274 * t3620;
t3539 = 0.2e1 * t3571;
t3538 = pkin(6) * t3575;
t3537 = pkin(6) * t3572;
t3536 = pkin(6) * t3569;
t3535 = t3212 * t3314 * t3716;
t3534 = t3212 * t3293 * t3694;
t3533 = t3213 * t3315 * t3714;
t3532 = t3213 * t3294 * t3691;
t3531 = t3214 * t3316 * t3712;
t3530 = t3214 * t3295 * t3688;
t3529 = t3445 * t3595;
t3528 = t3451 * t3595;
t3527 = t3447 * t3594;
t3526 = t3453 * t3594;
t3525 = t3449 * t3593;
t3524 = t3455 * t3593;
t3520 = t3445 * t3583;
t3519 = t3451 * t3583;
t3516 = t3447 * t3581;
t3515 = t3453 * t3581;
t3512 = t3449 * t3579;
t3511 = t3455 * t3579;
t3505 = t3330 * t3565;
t3504 = t3332 * t3564;
t3503 = t3334 * t3563;
t3502 = 0.2e1 * t3651 * t3741;
t3501 = 0.2e1 * t3647 * t3740;
t3500 = 0.2e1 * t3643 * t3739;
t3499 = t3330 * t3402 * t3625;
t3498 = t3332 * t3403 * t3624;
t3497 = t3334 * t3404 * t3623;
t3496 = t3568 * t3245;
t3495 = t3567 * t3246;
t3494 = t3566 * t3247;
t3487 = t3577 * t3761;
t3486 = t3574 * t3762;
t3485 = t3571 * t3763;
t3481 = -t3380 * t3435 + t3445 * t3746;
t3480 = -t3381 * t3435 + t3447 * t3746;
t3479 = -t3382 * t3435 + t3449 * t3746;
t3478 = -t3212 * t3446 - t3452 * t3245;
t3477 = t3212 * t3452 - t3446 * t3245;
t3476 = -t3213 * t3448 - t3454 * t3246;
t3475 = t3213 * t3454 - t3448 * t3246;
t3474 = -t3214 * t3450 - t3456 * t3247;
t3473 = t3214 * t3456 - t3450 * t3247;
t3469 = t3314 * t3478;
t3468 = t3314 * t3477;
t3467 = t3315 * t3476;
t3466 = t3315 * t3475;
t3465 = t3316 * t3474;
t3464 = t3316 * t3473;
t3385 = pkin(2) * t3456 + t3641;
t3384 = pkin(2) * t3454 + t3645;
t3383 = pkin(2) * t3452 + t3649;
t3328 = -t3419 * t3758 + t3422 * t3435;
t3327 = -t3418 * t3759 + t3421 * t3435;
t3326 = -t3417 * t3760 + t3420 * t3435;
t3325 = t3385 * t3432 - t3479 * t3434;
t3324 = t3384 * t3432 - t3480 * t3434;
t3323 = t3383 * t3432 - t3481 * t3434;
t3322 = -t3385 * t3434 - t3479 * t3432;
t3321 = -t3384 * t3434 - t3480 * t3432;
t3320 = -t3383 * t3434 - t3481 * t3432;
t3301 = t3488 * t3419 + t3422 * t3670;
t3300 = t3489 * t3418 + t3421 * t3671;
t3299 = t3490 * t3417 + t3420 * t3672;
t3289 = -t3322 * t3407 + t3325 * t3413;
t3288 = -t3321 * t3406 + t3324 * t3412;
t3287 = -t3320 * t3405 + t3323 * t3411;
t3283 = t3352 * t3422 + (t3322 * t3413 + t3325 * t3407) * t3419;
t3282 = t3351 * t3421 + (t3321 * t3412 + t3324 * t3406) * t3418;
t3281 = t3350 * t3420 + (t3320 * t3411 + t3323 * t3405) * t3417;
t3280 = t3310 * t3682 - (t3358 * t3410 + t3361 * t3676) * t3376;
t3279 = t3309 * t3683 - (t3357 * t3409 + t3360 * t3677) * t3375;
t3278 = t3308 * t3684 - (t3356 * t3408 + t3359 * t3678) * t3374;
t3277 = -t3313 * t3682 + (-t3358 * t3416 + t3361 * t3679) * t3376;
t3276 = -t3312 * t3683 + (-t3357 * t3415 + t3360 * t3680) * t3375;
t3275 = -t3311 * t3684 + (-t3356 * t3414 + t3359 * t3681) * t3374;
t3268 = -((-t3358 * t3456 + t3361 * t3657) * t3422 - t3419 * t3670) * t3747 + ((t3358 * t3385 + t3479 * t3361) * t3422 + t3352 * t3419) * t3455 + (t3419 * t3435 + t3422 * t3758) * t3751;
t3267 = -((-t3357 * t3454 + t3360 * t3659) * t3421 - t3418 * t3671) * t3748 + ((t3357 * t3384 + t3480 * t3360) * t3421 + t3351 * t3418) * t3453 + (t3418 * t3435 + t3421 * t3759) * t3752;
t3266 = -((-t3356 * t3452 + t3359 * t3661) * t3420 - t3417 * t3672) * t3749 + ((t3356 * t3383 + t3481 * t3359) * t3420 + t3350 * t3417) * t3451 + (t3417 * t3435 + t3420 * t3760) * t3753;
t3253 = (t3301 * t3416 + t3319 * t3410) * t3747 + (t3283 * t3416 + t3289 * t3410) * t3455 + (t3328 * t3416 - t3410 * t3685) * t3751;
t3252 = -(t3301 * t3410 - t3319 * t3416) * t3747 + (-t3283 * t3410 + t3289 * t3416) * t3455 - (t3328 * t3410 + t3416 * t3685) * t3751;
t3251 = (t3300 * t3415 + t3318 * t3409) * t3748 + (t3282 * t3415 + t3288 * t3409) * t3453 + (t3327 * t3415 - t3409 * t3686) * t3752;
t3250 = -(t3300 * t3409 - t3318 * t3415) * t3748 + (-t3282 * t3409 + t3288 * t3415) * t3453 - (t3327 * t3409 + t3415 * t3686) * t3752;
t3249 = (t3299 * t3414 + t3317 * t3408) * t3749 + (t3281 * t3414 + t3287 * t3408) * t3451 + (t3326 * t3414 - t3408 * t3687) * t3753;
t3248 = -(t3299 * t3408 - t3317 * t3414) * t3749 + (-t3281 * t3408 + t3287 * t3414) * t3451 - (t3326 * t3408 + t3414 * t3687) * t3753;
t3238 = pkin(2) * t3586 - t3449 * t3536 / 0.2e1;
t3237 = pkin(2) * t3589 - t3447 * t3537 / 0.2e1;
t3236 = pkin(2) * t3592 - t3445 * t3538 / 0.2e1;
t3235 = pkin(2) * t3259 * t3699 + t3455 * t3536 / 0.2e1;
t3234 = pkin(2) * t3258 * t3704 + t3453 * t3537 / 0.2e1;
t3233 = pkin(2) * t3257 * t3709 + t3451 * t3538 / 0.2e1;
t3232 = t3404 * t3247;
t3231 = t3403 * t3246;
t3230 = t3402 * t3245;
t3211 = pkin(6) * t3214 + t3220 * t3670;
t3210 = pkin(6) * t3213 + t3219 * t3671;
t3209 = pkin(6) * t3212 + t3218 * t3672;
t3205 = -t3211 * t3455 - t3220 * t3658;
t3204 = -t3210 * t3453 - t3219 * t3660;
t3203 = -t3209 * t3451 - t3218 * t3662;
t3202 = t3220 * t3435 * t3455 - t3211 * t3449;
t3201 = t3219 * t3435 * t3453 - t3210 * t3447;
t3200 = t3218 * t3435 * t3451 - t3209 * t3445;
t1 = [(t3266 * t3729 + t3267 * t3728 + t3268 * t3727) * MDP(1) + (-t3531 - t3533 - t3535) * MDP(2) + ((t3473 * t3268 - t3456 * t3598) * t3316 + (t3475 * t3267 - t3454 * t3601) * t3315 + (t3477 * t3266 - t3452 * t3604) * t3314) * t3744 + ((t3474 * t3268 + t3450 * t3598) * t3316 + (t3476 * t3267 + t3448 * t3601) * t3315 + (t3478 * t3266 + t3446 * t3604) * t3314) * t3743 + (-t3426 * t3535 - t3427 * t3533 - t3428 * t3531 + ((-t3295 * t3247 + t3485) * t3422 * t3563 + (-t3294 * t3246 + t3486) * t3421 * t3564 + (-t3293 * t3245 + t3487) * t3420 * t3565) * t3462) * MDP(5) + (-0.2e1 * t3535 * t3651 - 0.2e1 * t3533 * t3647 - 0.2e1 * t3531 * t3643 + ((-t3232 * t3295 + t3404 * t3485) * t3690 + (-t3231 * t3294 + t3403 * t3486) * t3693 + (-t3230 * t3293 + t3402 * t3487) * t3696) * t3462) * MDP(6) + ((t3449 * t3530 + (-t3509 - t3731) * t3713) * t3422 + (t3447 * t3532 + (-t3513 - t3734) * t3715) * t3421 + (t3445 * t3534 + (-t3517 - t3737) * t3717) * t3420) * MDP(7) + ((t3455 * t3530 + (t3510 - t3730) * t3713) * t3422 + (t3453 * t3532 + (t3514 - t3733) * t3715) * t3421 + (t3451 * t3534 + (t3518 - t3736) * t3717) * t3420) * MDP(8) + (t3215 * t3568 + t3216 * t3567 + t3217 * t3566) * t3742 + ((-t3198 * t3712 + t3630 * t3268) * t3316 + (-t3194 * t3714 + t3632 * t3267) * t3315 + (-t3196 * t3716 + t3634 * t3266) * t3314 + ((t3202 * t3295 + t3235 * t3539) * t3690 + (t3201 * t3294 + t3234 * t3542) * t3693 + (t3200 * t3293 + t3233 * t3545) * t3696 + (t3445 * t3496 + t3447 * t3495 + t3449 * t3494) * pkin(2)) * t3462) * MDP(10) + ((-t3199 * t3712 + t3629 * t3268) * t3316 + (-t3195 * t3714 + t3631 * t3267) * t3315 + (-t3197 * t3716 + t3633 * t3266) * t3314 + ((t3205 * t3295 + t3238 * t3539) * t3690 + (t3204 * t3294 + t3237 * t3542) * t3693 + (t3203 * t3293 + t3236 * t3545) * t3696 + (t3451 * t3496 + t3453 * t3495 + t3455 * t3494) * pkin(2)) * t3462) * MDP(11); (t3248 * t3729 + t3250 * t3728 + t3252 * t3727) * MDP(1) + (t3272 * t3741 + t3273 * t3740 + t3274 * t3739) * MDP(2) + (t3248 * t3468 + t3250 * t3466 + t3252 * t3464 + t3272 * t3602 + t3273 * t3599 + t3274 * t3596) * t3744 + (t3248 * t3469 + t3250 * t3467 + t3252 * t3465 - t3272 * t3603 - t3273 * t3600 - t3274 * t3597) * t3743 + (t3272 * t3619 + t3273 * t3616 + t3274 * t3613 + ((-t3256 * t3277 + t3274 * t3623) * t3503 + (-t3255 * t3276 + t3273 * t3624) * t3504 + (-t3254 * t3275 + t3272 * t3625) * t3505) * t3462) * MDP(5) + (t3272 * t3502 + t3273 * t3501 + t3274 * t3500 + ((-t3232 * t3277 + t3274 * t3497) * t3342 + (-t3231 * t3276 + t3273 * t3498) * t3340 + (-t3230 * t3275 + t3272 * t3499) * t3338) * t3462) * MDP(6) + (t3272 * t3610 + t3273 * t3608 + t3274 * t3606 + (t3272 * t3519 + t3273 * t3515 + t3274 * t3511) * t3463 + (t3275 * t3618 + t3276 * t3615 + t3277 * t3612) * t3462) * MDP(7) + (t3272 * t3609 + t3273 * t3607 + t3274 * t3605 + (-t3272 * t3520 - t3273 * t3516 - t3274 * t3512) * t3463 + (t3275 * t3617 + t3276 * t3614 + t3277 * t3611) * t3462) * MDP(8) + (t3275 * t3738 + t3276 * t3735 + t3277 * t3732) * t3742 + (t3273 * t3706 + t3272 * t3711 + t3274 * t3701 + t3252 * t3549 + t3250 * t3551 + t3248 * t3553 + ((t3277 * t3202 + t3235 * t3540) * t3342 + (t3276 * t3201 + t3234 * t3543) * t3340 + (t3275 * t3200 + t3233 * t3546) * t3338 + (t3275 * t3529 + t3276 * t3527 + t3277 * t3525) * pkin(2)) * t3462) * MDP(10) + (t3273 * t3705 + t3272 * t3710 + t3274 * t3700 + t3252 * t3548 + t3250 * t3550 + t3248 * t3552 + ((t3277 * t3205 + t3238 * t3540) * t3342 + (t3276 * t3204 + t3237 * t3543) * t3340 + (t3275 * t3203 + t3236 * t3546) * t3338 + (t3275 * t3528 + t3276 * t3526 + t3277 * t3524) * pkin(2)) * t3462) * MDP(11); (t3249 * t3729 + t3251 * t3728 + t3253 * t3727) * MDP(1) + (t3269 * t3741 + t3270 * t3740 + t3271 * t3739) * MDP(2) + (t3249 * t3468 + t3251 * t3466 + t3253 * t3464 + t3269 * t3602 + t3270 * t3599 + t3271 * t3596) * t3744 + (t3249 * t3469 + t3251 * t3467 + t3253 * t3465 - t3269 * t3603 - t3270 * t3600 - t3271 * t3597) * t3743 + (t3269 * t3619 + t3270 * t3616 + t3271 * t3613 + ((-t3256 * t3280 + t3271 * t3623) * t3503 + (-t3255 * t3279 + t3270 * t3624) * t3504 + (-t3254 * t3278 + t3269 * t3625) * t3505) * t3462) * MDP(5) + (t3269 * t3502 + t3270 * t3501 + t3271 * t3500 + ((-t3232 * t3280 + t3271 * t3497) * t3342 + (-t3231 * t3279 + t3270 * t3498) * t3340 + (-t3230 * t3278 + t3269 * t3499) * t3338) * t3462) * MDP(6) + (t3269 * t3610 + t3270 * t3608 + t3271 * t3606 + (t3269 * t3519 + t3270 * t3515 + t3271 * t3511) * t3463 + (t3278 * t3618 + t3279 * t3615 + t3280 * t3612) * t3462) * MDP(7) + (t3269 * t3609 + t3270 * t3607 + t3271 * t3605 + (-t3269 * t3520 - t3270 * t3516 - t3271 * t3512) * t3463 + (t3278 * t3617 + t3279 * t3614 + t3280 * t3611) * t3462) * MDP(8) + (t3278 * t3738 + t3279 * t3735 + t3280 * t3732) * t3742 + (t3270 * t3706 + t3269 * t3711 + t3271 * t3701 + t3253 * t3549 + t3251 * t3551 + t3249 * t3553 + ((t3280 * t3202 + t3235 * t3541) * t3342 + (t3279 * t3201 + t3234 * t3544) * t3340 + (t3278 * t3200 + t3233 * t3547) * t3338 + (t3278 * t3529 + t3279 * t3527 + t3280 * t3525) * pkin(2)) * t3462) * MDP(10) + (t3270 * t3705 + t3269 * t3710 + t3271 * t3700 + t3253 * t3548 + t3251 * t3550 + t3249 * t3552 + ((t3280 * t3205 + t3238 * t3541) * t3342 + (t3279 * t3204 + t3237 * t3544) * t3340 + (t3278 * t3203 + t3236 * t3547) * t3338 + (t3278 * t3528 + t3279 * t3526 + t3280 * t3524) * pkin(2)) * t3462) * MDP(11);];
taucX  = t1;
