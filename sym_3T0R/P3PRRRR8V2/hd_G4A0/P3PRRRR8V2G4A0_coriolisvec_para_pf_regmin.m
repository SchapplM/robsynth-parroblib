% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3PRRRR8V2G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3PRRRR8V2G4A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G4A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:15:58
% EndTime: 2020-08-06 18:16:21
% DurationCPUTime: 20.85s
% Computational Cost: add. (120336->575), mult. (276996->1257), div. (5010->17), fcn. (271746->34), ass. (0->535)
t1411 = cos(qJ(2,1));
t1415 = pkin(7) + pkin(6);
t1355 = t1411 * t1415;
t1405 = sin(qJ(2,1));
t1337 = pkin(2) * t1405 - t1355;
t1388 = sin(pkin(4));
t1390 = cos(pkin(4));
t1404 = sin(qJ(3,1));
t1613 = t1390 * t1404;
t1307 = pkin(3) * t1613 + t1337 * t1388;
t1410 = cos(qJ(3,1));
t1625 = t1388 * t1405;
t1386 = t1410 ^ 2;
t1699 = pkin(3) * t1386;
t1271 = 0.1e1 / (pkin(2) * t1613 + t1307 * t1410 + t1625 * t1699);
t1409 = cos(qJ(2,2));
t1354 = t1409 * t1415;
t1403 = sin(qJ(2,2));
t1336 = pkin(2) * t1403 - t1354;
t1402 = sin(qJ(3,2));
t1615 = t1390 * t1402;
t1306 = pkin(3) * t1615 + t1336 * t1388;
t1408 = cos(qJ(3,2));
t1626 = t1388 * t1403;
t1385 = t1408 ^ 2;
t1700 = pkin(3) * t1385;
t1270 = 0.1e1 / (pkin(2) * t1615 + t1306 * t1408 + t1626 * t1700);
t1407 = cos(qJ(2,3));
t1353 = t1407 * t1415;
t1401 = sin(qJ(2,3));
t1335 = pkin(2) * t1401 - t1353;
t1400 = sin(qJ(3,3));
t1617 = t1390 * t1400;
t1305 = pkin(3) * t1617 + t1335 * t1388;
t1406 = cos(qJ(3,3));
t1627 = t1388 * t1401;
t1384 = t1406 ^ 2;
t1701 = pkin(3) * t1384;
t1269 = 0.1e1 / (pkin(2) * t1617 + t1305 * t1406 + t1627 * t1701);
t1396 = legFrame(1,1);
t1365 = sin(t1396);
t1371 = cos(t1396);
t1399 = legFrame(1,2);
t1374 = sin(t1399);
t1412 = xDP(3);
t1413 = xDP(2);
t1377 = cos(t1399);
t1414 = xDP(1);
t1628 = t1377 * t1414;
t1304 = t1628 + (t1365 * t1413 - t1371 * t1412) * t1374;
t1325 = t1365 * t1412 + t1371 * t1413;
t1387 = sin(pkin(8));
t1389 = cos(pkin(8));
t1262 = t1304 * t1389 + t1325 * t1387;
t1393 = legFrame(1,3);
t1362 = sin(t1393);
t1368 = cos(t1393);
t1446 = t1304 * t1387 - t1325 * t1389;
t1241 = t1262 * t1368 - t1446 * t1362;
t1610 = t1390 * t1413;
t1509 = t1405 * t1610;
t1611 = t1390 * t1412;
t1510 = t1405 * t1611;
t1590 = t1411 * t1413;
t1591 = t1411 * t1412;
t1609 = t1390 * t1414;
t1253 = (t1374 * t1510 + t1590) * t1371 + (-t1374 * t1509 + t1591) * t1365 - t1405 * t1377 * t1609;
t1259 = (-t1374 * t1591 + t1509) * t1371 + (t1374 * t1590 + t1510) * t1365 + t1411 * t1628;
t1620 = t1388 * t1410;
t1214 = ((t1253 * t1389 - t1259 * t1387) * t1368 - (t1253 * t1387 + t1259 * t1389) * t1362) * t1404 - t1241 * t1620;
t1597 = t1405 * t1410;
t1310 = pkin(3) * t1597 + t1337;
t1352 = pkin(3) * t1410 + pkin(2);
t1334 = t1352 * t1613;
t1292 = t1310 * t1620 + t1334;
t1288 = 0.1e1 / t1292;
t1679 = t1214 * t1288;
t1715 = -0.2e1 * t1679;
t1395 = legFrame(2,1);
t1364 = sin(t1395);
t1370 = cos(t1395);
t1398 = legFrame(2,2);
t1373 = sin(t1398);
t1376 = cos(t1398);
t1629 = t1376 * t1414;
t1303 = t1629 + (t1364 * t1413 - t1370 * t1412) * t1373;
t1324 = t1364 * t1412 + t1370 * t1413;
t1261 = t1303 * t1389 + t1324 * t1387;
t1392 = legFrame(2,3);
t1361 = sin(t1392);
t1367 = cos(t1392);
t1447 = t1303 * t1387 - t1324 * t1389;
t1240 = t1261 * t1367 - t1447 * t1361;
t1511 = t1403 * t1610;
t1512 = t1403 * t1611;
t1592 = t1409 * t1413;
t1593 = t1409 * t1412;
t1252 = (t1373 * t1512 + t1592) * t1370 + (-t1373 * t1511 + t1593) * t1364 - t1403 * t1376 * t1609;
t1258 = (-t1373 * t1593 + t1511) * t1370 + (t1373 * t1592 + t1512) * t1364 + t1409 * t1629;
t1622 = t1388 * t1408;
t1213 = ((t1252 * t1389 - t1258 * t1387) * t1367 - (t1252 * t1387 + t1258 * t1389) * t1361) * t1402 - t1240 * t1622;
t1601 = t1403 * t1408;
t1309 = pkin(3) * t1601 + t1336;
t1351 = pkin(3) * t1408 + pkin(2);
t1333 = t1351 * t1615;
t1291 = t1309 * t1622 + t1333;
t1286 = 0.1e1 / t1291;
t1680 = t1213 * t1286;
t1714 = -0.2e1 * t1680;
t1394 = legFrame(3,1);
t1363 = sin(t1394);
t1369 = cos(t1394);
t1397 = legFrame(3,2);
t1372 = sin(t1397);
t1375 = cos(t1397);
t1630 = t1375 * t1414;
t1302 = t1630 + (t1363 * t1413 - t1369 * t1412) * t1372;
t1323 = t1363 * t1412 + t1369 * t1413;
t1260 = t1302 * t1389 + t1323 * t1387;
t1391 = legFrame(3,3);
t1360 = sin(t1391);
t1366 = cos(t1391);
t1448 = t1302 * t1387 - t1323 * t1389;
t1239 = t1260 * t1366 - t1448 * t1360;
t1513 = t1401 * t1610;
t1514 = t1401 * t1611;
t1594 = t1407 * t1413;
t1595 = t1407 * t1412;
t1251 = (t1372 * t1514 + t1594) * t1369 + (-t1372 * t1513 + t1595) * t1363 - t1401 * t1375 * t1609;
t1257 = (-t1372 * t1595 + t1513) * t1369 + (t1372 * t1594 + t1514) * t1363 + t1407 * t1630;
t1624 = t1388 * t1406;
t1212 = ((t1251 * t1389 - t1257 * t1387) * t1366 - (t1251 * t1387 + t1257 * t1389) * t1360) * t1400 - t1239 * t1624;
t1605 = t1401 * t1406;
t1308 = pkin(3) * t1605 + t1335;
t1350 = pkin(3) * t1406 + pkin(2);
t1332 = t1350 * t1617;
t1290 = t1308 * t1624 + t1332;
t1284 = 0.1e1 / t1290;
t1681 = t1212 * t1284;
t1713 = -0.2e1 * t1681;
t1357 = 0.2e1 * t1384 - 0.1e1;
t1358 = 0.2e1 * t1385 - 0.1e1;
t1359 = 0.2e1 * t1386 - 0.1e1;
t1314 = t1360 * t1389 + t1366 * t1387;
t1712 = t1314 * t1388;
t1315 = t1361 * t1389 + t1367 * t1387;
t1711 = t1315 * t1388;
t1316 = t1362 * t1389 + t1368 * t1387;
t1710 = t1316 * t1388;
t1706 = 0.2e1 * pkin(2);
t1705 = pkin(2) * t1400;
t1704 = pkin(2) * t1402;
t1703 = pkin(2) * t1404;
t1417 = 0.1e1 / pkin(3);
t1702 = pkin(2) * t1417;
t1698 = pkin(3) * t1388;
t1697 = pkin(3) * t1706;
t1545 = t1415 * t1681;
t1478 = t1400 * t1545;
t1329 = t1350 * t1401 - t1353;
t1604 = t1401 * t1415;
t1639 = (t1350 * t1407 + t1604) * t1390;
t1218 = -t1239 * t1639 + (t1360 * t1260 + t1448 * t1366) * t1329;
t1299 = t1329 * t1624 + t1332;
t1293 = 0.1e1 / t1299;
t1675 = t1218 * t1293;
t1194 = t1478 - t1675;
t1649 = t1293 * t1417;
t1530 = t1218 * t1649;
t1463 = t1407 * t1530;
t1517 = t1388 * t1605;
t1650 = t1293 * t1400;
t1531 = t1218 * t1650;
t1662 = t1284 * t1407;
t1546 = t1212 * t1662;
t1167 = (-((t1388 * t1546 + t1390 * t1530) * t1701 + ((-t1531 + t1545) * t1401 + pkin(2) * t1546) * t1624 + t1194 * t1390) * t1681 - (t1388 * t1463 + (t1384 * t1390 - t1400 * t1517 - t1390) * t1681) * t1675) * t1269;
t1696 = t1167 * t1284;
t1542 = t1415 * t1680;
t1477 = t1402 * t1542;
t1330 = t1351 * t1403 - t1354;
t1600 = t1403 * t1415;
t1638 = (t1351 * t1409 + t1600) * t1390;
t1219 = -t1240 * t1638 + (t1361 * t1261 + t1447 * t1367) * t1330;
t1300 = t1330 * t1622 + t1333;
t1295 = 0.1e1 / t1300;
t1674 = t1219 * t1295;
t1195 = t1477 - t1674;
t1646 = t1295 * t1417;
t1527 = t1219 * t1646;
t1462 = t1409 * t1527;
t1516 = t1388 * t1601;
t1647 = t1295 * t1402;
t1528 = t1219 * t1647;
t1657 = t1286 * t1409;
t1543 = t1213 * t1657;
t1168 = (-((t1388 * t1543 + t1390 * t1527) * t1700 + ((-t1528 + t1542) * t1403 + pkin(2) * t1543) * t1622 + t1195 * t1390) * t1680 - (t1388 * t1462 + (t1385 * t1390 - t1402 * t1516 - t1390) * t1680) * t1674) * t1270;
t1695 = t1168 * t1286;
t1539 = t1415 * t1679;
t1476 = t1404 * t1539;
t1331 = t1352 * t1405 - t1355;
t1596 = t1405 * t1415;
t1637 = (t1352 * t1411 + t1596) * t1390;
t1220 = -t1241 * t1637 + (t1362 * t1262 + t1446 * t1368) * t1331;
t1301 = t1331 * t1620 + t1334;
t1297 = 0.1e1 / t1301;
t1673 = t1220 * t1297;
t1196 = t1476 - t1673;
t1643 = t1297 * t1417;
t1524 = t1220 * t1643;
t1461 = t1411 * t1524;
t1515 = t1388 * t1597;
t1644 = t1297 * t1404;
t1525 = t1220 * t1644;
t1652 = t1288 * t1411;
t1540 = t1214 * t1652;
t1169 = (-((t1388 * t1540 + t1390 * t1524) * t1699 + ((-t1525 + t1539) * t1405 + pkin(2) * t1540) * t1620 + t1196 * t1390) * t1679 - (t1388 * t1461 + (t1386 * t1390 - t1404 * t1515 - t1390) * t1679) * t1673) * t1271;
t1694 = t1169 * t1288;
t1356 = pkin(2) ^ 2 + t1415 ^ 2;
t1416 = pkin(3) ^ 2;
t1182 = -t1415 * t1531 + (t1384 * t1416 + t1406 * t1697 + t1356) * t1681;
t1608 = t1390 * t1417;
t1618 = t1388 * t1417;
t1170 = -t1182 * t1269 * t1608 * t1681 - (-t1390 * t1478 + (-t1400 * t1308 * t1618 + (t1406 * t1702 + t1384) * t1390) * t1675) * t1284 * t1530;
t1693 = t1170 * t1293;
t1692 = t1170 * t1400;
t1691 = t1170 * t1406;
t1183 = -t1415 * t1528 + (t1385 * t1416 + t1408 * t1697 + t1356) * t1680;
t1171 = -t1183 * t1270 * t1608 * t1680 - (-t1390 * t1477 + (-t1402 * t1309 * t1618 + (t1408 * t1702 + t1385) * t1390) * t1674) * t1286 * t1527;
t1690 = t1171 * t1295;
t1689 = t1171 * t1402;
t1688 = t1171 * t1408;
t1184 = -t1415 * t1525 + (t1386 * t1416 + t1410 * t1697 + t1356) * t1679;
t1172 = -t1184 * t1271 * t1608 * t1679 - (-t1390 * t1476 + (-t1404 * t1310 * t1618 + (t1410 * t1702 + t1386) * t1390) * t1673) * t1288 * t1524;
t1687 = t1172 * t1297;
t1686 = t1172 * t1404;
t1685 = t1172 * t1410;
t1663 = t1284 * t1406;
t1547 = t1212 * t1663;
t1173 = (t1182 * t1547 + (pkin(2) * t1530 - t1194 * t1406) * t1675) * t1269;
t1684 = t1173 * t1269;
t1658 = t1286 * t1408;
t1544 = t1213 * t1658;
t1174 = (t1183 * t1544 + (pkin(2) * t1527 - t1195 * t1408) * t1674) * t1270;
t1683 = t1174 * t1270;
t1653 = t1288 * t1410;
t1541 = t1214 * t1653;
t1175 = (t1184 * t1541 + (pkin(2) * t1524 - t1196 * t1410) * t1673) * t1271;
t1682 = t1175 * t1271;
t1209 = t1212 ^ 2;
t1285 = 0.1e1 / t1290 ^ 2;
t1200 = t1209 * t1285;
t1210 = t1213 ^ 2;
t1287 = 0.1e1 / t1291 ^ 2;
t1201 = t1210 * t1287;
t1211 = t1214 ^ 2;
t1289 = 0.1e1 / t1292 ^ 2;
t1202 = t1211 * t1289;
t1678 = t1218 ^ 2 / t1299 ^ 2;
t1677 = t1219 ^ 2 / t1300 ^ 2;
t1676 = t1220 ^ 2 / t1301 ^ 2;
t1311 = -t1360 * t1387 + t1366 * t1389;
t1616 = t1390 * t1401;
t1245 = t1311 * t1624 + t1400 * (t1311 * t1616 + t1314 * t1407);
t1672 = t1245 * t1269;
t1671 = t1245 * t1375;
t1312 = -t1361 * t1387 + t1367 * t1389;
t1614 = t1390 * t1403;
t1246 = t1312 * t1622 + t1402 * (t1312 * t1614 + t1315 * t1409);
t1670 = t1246 * t1270;
t1669 = t1246 * t1376;
t1313 = -t1362 * t1387 + t1368 * t1389;
t1612 = t1390 * t1405;
t1247 = t1313 * t1620 + t1404 * (t1313 * t1612 + t1316 * t1411);
t1668 = t1247 * t1271;
t1667 = t1247 * t1377;
t1623 = t1388 * t1407;
t1439 = t1167 * t1706 + t1173 * t1623;
t1151 = -pkin(6) * t1692 + t1439 * t1406;
t1666 = t1284 * t1151;
t1152 = -pkin(6) * t1691 - t1439 * t1400;
t1665 = t1284 * t1152;
t1664 = t1284 * t1400;
t1621 = t1388 * t1409;
t1438 = t1168 * t1706 + t1174 * t1621;
t1149 = -pkin(6) * t1689 + t1438 * t1408;
t1661 = t1286 * t1149;
t1150 = -pkin(6) * t1688 - t1438 * t1402;
t1660 = t1286 * t1150;
t1659 = t1286 * t1402;
t1619 = t1388 * t1411;
t1437 = t1169 * t1706 + t1175 * t1619;
t1153 = -pkin(6) * t1686 + t1437 * t1410;
t1656 = t1288 * t1153;
t1154 = -pkin(6) * t1685 - t1437 * t1404;
t1655 = t1288 * t1154;
t1654 = t1288 * t1404;
t1651 = t1293 * t1375;
t1648 = t1295 * t1376;
t1645 = t1297 * t1377;
t1642 = t1311 * t1388;
t1641 = t1312 * t1388;
t1640 = t1313 * t1388;
t1636 = t1363 * t1372;
t1635 = t1364 * t1373;
t1634 = t1365 * t1374;
t1633 = t1369 * t1372;
t1632 = t1370 * t1373;
t1631 = t1371 * t1374;
t1607 = t1400 * t1401;
t1606 = t1400 * t1406;
t1603 = t1402 * t1403;
t1602 = t1402 * t1408;
t1599 = t1404 * t1405;
t1598 = t1404 * t1410;
t1161 = t1167 * t1623 + t1170 * t1390;
t1418 = 0.1e1 / pkin(3) ^ 2;
t1537 = t1418 * t1678;
t1197 = t1200 + t1537;
t1427 = t1463 * t1713;
t1473 = t1400 * t1537;
t1589 = t1161 * t1406 - t1390 * t1473 + (-t1170 * t1607 - t1197 * t1605 + t1400 * t1427) * t1388;
t1472 = t1406 * t1537;
t1588 = -t1161 * t1400 - t1170 * t1517 + (t1197 * t1607 + t1406 * t1427) * t1388 - t1390 * t1472;
t1162 = t1168 * t1621 + t1171 * t1390;
t1535 = t1418 * t1677;
t1198 = t1201 + t1535;
t1426 = t1462 * t1714;
t1469 = t1402 * t1535;
t1587 = t1162 * t1408 - t1390 * t1469 + (-t1171 * t1603 - t1198 * t1601 + t1402 * t1426) * t1388;
t1468 = t1408 * t1535;
t1586 = -t1162 * t1402 - t1171 * t1516 + (t1198 * t1603 + t1408 * t1426) * t1388 - t1390 * t1468;
t1163 = t1169 * t1619 + t1172 * t1390;
t1533 = t1418 * t1676;
t1199 = t1202 + t1533;
t1425 = t1461 * t1715;
t1465 = t1404 * t1533;
t1585 = t1163 * t1410 - t1390 * t1465 + (-t1172 * t1599 - t1199 * t1597 + t1404 * t1425) * t1388;
t1464 = t1410 * t1533;
t1584 = -t1163 * t1404 - t1172 * t1515 + (t1199 * t1599 + t1410 * t1425) * t1388 - t1390 * t1464;
t1580 = 0.2e1 * t1212 * t1218;
t1579 = 0.2e1 * t1213 * t1219;
t1578 = 0.2e1 * t1214 * t1220;
t1577 = -0.2e1 * t1218 * t1284;
t1576 = -0.2e1 * t1219 * t1286;
t1575 = -0.2e1 * t1220 * t1288;
t1381 = t1400 ^ 2;
t1574 = t1381 * t1696;
t1573 = t1167 * t1650;
t1572 = t1167 * t1293 * t1406;
t1382 = t1402 ^ 2;
t1571 = t1382 * t1695;
t1570 = t1168 * t1647;
t1569 = t1168 * t1295 * t1408;
t1383 = t1404 ^ 2;
t1568 = t1383 * t1694;
t1567 = t1169 * t1644;
t1566 = t1169 * t1297 * t1410;
t1565 = t1170 * t1664;
t1564 = t1170 * t1663;
t1563 = t1171 * t1659;
t1562 = t1171 * t1658;
t1561 = t1172 * t1654;
t1560 = t1172 * t1653;
t1559 = t1173 * t1671;
t1558 = t1173 * t1284 * t1401;
t1557 = t1173 * t1662;
t1556 = t1174 * t1669;
t1555 = t1174 * t1286 * t1403;
t1554 = t1174 * t1657;
t1553 = t1175 * t1667;
t1552 = t1175 * t1288 * t1405;
t1551 = t1175 * t1652;
t1550 = t1293 * t1200;
t1549 = t1295 * t1201;
t1548 = t1297 * t1202;
t1538 = t1284 * t1678;
t1536 = t1286 * t1677;
t1534 = t1288 * t1676;
t1532 = t1218 * t1672;
t1529 = t1219 * t1670;
t1526 = t1220 * t1668;
t1248 = -t1311 * t1639 + t1314 * t1329;
t1523 = t1248 * t1651;
t1249 = -t1312 * t1638 + t1315 * t1330;
t1522 = t1249 * t1648;
t1250 = -t1313 * t1637 + t1316 * t1331;
t1521 = t1250 * t1645;
t1520 = t1293 * t1606;
t1519 = t1295 * t1602;
t1518 = t1297 * t1598;
t1508 = t1271 * t1584;
t1507 = t1589 * t1269;
t1506 = t1588 * t1269;
t1505 = t1587 * t1270;
t1504 = t1586 * t1270;
t1503 = t1585 * t1271;
t1263 = t1311 * t1633 - t1314 * t1363;
t1317 = t1387 * t1616 - t1389 * t1407;
t1320 = t1387 * t1407 + t1389 * t1616;
t1272 = -t1317 * t1360 + t1320 * t1366;
t1445 = t1317 * t1366 + t1320 * t1360;
t1224 = (t1272 * t1633 - t1363 * t1445) * t1400 + t1263 * t1624;
t1502 = t1224 * t1577;
t1266 = t1311 * t1636 + t1314 * t1369;
t1227 = (-t1272 * t1636 - t1445 * t1369) * t1400 - t1266 * t1624;
t1501 = t1227 * t1577;
t1500 = 0.2e1 * t1532;
t1264 = t1312 * t1632 - t1315 * t1364;
t1318 = t1387 * t1614 - t1389 * t1409;
t1321 = t1387 * t1409 + t1389 * t1614;
t1273 = -t1318 * t1361 + t1321 * t1367;
t1444 = t1318 * t1367 + t1321 * t1361;
t1225 = (t1273 * t1632 - t1364 * t1444) * t1402 + t1264 * t1622;
t1499 = t1225 * t1576;
t1267 = t1312 * t1635 + t1315 * t1370;
t1228 = (-t1273 * t1635 - t1444 * t1370) * t1402 - t1267 * t1622;
t1498 = t1228 * t1576;
t1497 = 0.2e1 * t1529;
t1265 = t1313 * t1631 - t1316 * t1365;
t1319 = t1387 * t1612 - t1389 * t1411;
t1322 = t1387 * t1411 + t1389 * t1612;
t1274 = -t1319 * t1362 + t1322 * t1368;
t1443 = t1319 * t1368 + t1322 * t1362;
t1226 = (t1274 * t1631 - t1365 * t1443) * t1404 + t1265 * t1620;
t1496 = t1226 * t1575;
t1268 = t1313 * t1634 + t1316 * t1371;
t1229 = (-t1274 * t1634 - t1443 * t1371) * t1404 - t1268 * t1620;
t1495 = t1229 * t1575;
t1494 = 0.2e1 * t1526;
t1493 = pkin(6) * t1530;
t1492 = pkin(6) * t1527;
t1491 = pkin(6) * t1524;
t1490 = t1167 * t1269 * t1671;
t1489 = t1167 * t1248 * t1649;
t1488 = t1168 * t1270 * t1669;
t1487 = t1168 * t1249 * t1646;
t1486 = t1169 * t1271 * t1667;
t1485 = t1169 * t1250 * t1643;
t1484 = t1400 * t1550;
t1483 = t1406 * t1550;
t1482 = t1402 * t1549;
t1481 = t1408 * t1549;
t1480 = t1404 * t1548;
t1479 = t1410 * t1548;
t1475 = t1400 * t1538;
t1474 = t1406 * t1538;
t1471 = t1402 * t1536;
t1470 = t1408 * t1536;
t1467 = t1404 * t1534;
t1466 = t1410 * t1534;
t1460 = t1285 * t1520;
t1459 = t1287 * t1519;
t1458 = t1289 * t1518;
t1457 = 0.2e1 * t1606 * t1696;
t1456 = 0.2e1 * t1602 * t1695;
t1455 = 0.2e1 * t1598 * t1694;
t1454 = t1285 * t1357 * t1580;
t1453 = t1287 * t1358 * t1579;
t1452 = t1289 * t1359 * t1578;
t1451 = t1523 * t1200;
t1450 = t1522 * t1201;
t1449 = t1521 * t1202;
t1442 = t1532 * t1713;
t1441 = t1529 * t1714;
t1440 = t1526 * t1715;
t1436 = -t1335 * t1390 + t1400 * t1698;
t1435 = -t1336 * t1390 + t1402 * t1698;
t1434 = -t1337 * t1390 + t1404 * t1698;
t1433 = -t1167 * t1401 - t1407 * t1200;
t1432 = t1167 * t1407 - t1401 * t1200;
t1431 = -t1168 * t1403 - t1409 * t1201;
t1430 = t1168 * t1409 - t1403 * t1201;
t1429 = -t1169 * t1405 - t1411 * t1202;
t1428 = t1169 * t1411 - t1405 * t1202;
t1424 = t1269 * t1433;
t1423 = t1269 * t1432;
t1422 = t1270 * t1431;
t1421 = t1270 * t1430;
t1420 = t1271 * t1429;
t1419 = t1271 * t1428;
t1340 = pkin(2) * t1411 + t1596;
t1339 = pkin(2) * t1409 + t1600;
t1338 = pkin(2) * t1407 + t1604;
t1283 = -t1374 * t1710 + t1377 * t1390;
t1282 = -t1373 * t1711 + t1376 * t1390;
t1281 = -t1372 * t1712 + t1375 * t1390;
t1280 = t1340 * t1387 - t1434 * t1389;
t1279 = t1339 * t1387 - t1435 * t1389;
t1278 = t1338 * t1387 - t1436 * t1389;
t1277 = -t1340 * t1389 - t1434 * t1387;
t1276 = -t1339 * t1389 - t1435 * t1387;
t1275 = -t1338 * t1389 - t1436 * t1387;
t1256 = t1443 * t1374 + t1377 * t1625;
t1255 = t1444 * t1373 + t1376 * t1626;
t1254 = t1445 * t1372 + t1375 * t1627;
t1244 = -t1277 * t1362 + t1280 * t1368;
t1243 = -t1276 * t1361 + t1279 * t1367;
t1242 = -t1275 * t1360 + t1278 * t1366;
t1238 = t1307 * t1377 + (t1277 * t1368 + t1280 * t1362) * t1374;
t1237 = t1306 * t1376 + (t1276 * t1367 + t1279 * t1361) * t1373;
t1236 = t1305 * t1375 + (t1275 * t1366 + t1278 * t1360) * t1372;
t1235 = t1265 * t1637 - (t1313 * t1365 + t1316 * t1631) * t1331;
t1234 = t1264 * t1638 - (t1312 * t1364 + t1315 * t1632) * t1330;
t1233 = t1263 * t1639 - (t1311 * t1363 + t1314 * t1633) * t1329;
t1232 = -t1268 * t1637 + (-t1313 * t1371 + t1316 * t1634) * t1331;
t1231 = -t1267 * t1638 + (-t1312 * t1370 + t1315 * t1635) * t1330;
t1230 = -t1266 * t1639 + (-t1311 * t1369 + t1314 * t1636) * t1329;
t1223 = -((-t1313 * t1411 + t1316 * t1612) * t1377 - t1374 * t1625) * t1699 + ((t1313 * t1340 + t1434 * t1316) * t1377 + t1307 * t1374) * t1410 + (t1374 * t1390 + t1377 * t1710) * t1703;
t1222 = -((-t1312 * t1409 + t1315 * t1614) * t1376 - t1373 * t1626) * t1700 + ((t1312 * t1339 + t1435 * t1315) * t1376 + t1306 * t1373) * t1408 + (t1373 * t1390 + t1376 * t1711) * t1704;
t1221 = -((-t1311 * t1407 + t1314 * t1616) * t1375 - t1372 * t1627) * t1701 + ((t1311 * t1338 + t1436 * t1314) * t1375 + t1305 * t1372) * t1406 + (t1372 * t1390 + t1375 * t1712) * t1705;
t1208 = (t1256 * t1371 + t1274 * t1365) * t1699 + (t1238 * t1371 + t1244 * t1365) * t1410 + (t1283 * t1371 - t1365 * t1640) * t1703;
t1207 = -(t1256 * t1365 - t1274 * t1371) * t1699 + (-t1238 * t1365 + t1244 * t1371) * t1410 - (t1283 * t1365 + t1371 * t1640) * t1703;
t1206 = (t1255 * t1370 + t1273 * t1364) * t1700 + (t1237 * t1370 + t1243 * t1364) * t1408 + (t1282 * t1370 - t1364 * t1641) * t1704;
t1205 = -(t1255 * t1364 - t1273 * t1370) * t1700 + (-t1237 * t1364 + t1243 * t1370) * t1408 - (t1282 * t1364 + t1370 * t1641) * t1704;
t1204 = (t1254 * t1369 + t1272 * t1363) * t1701 + (t1236 * t1369 + t1242 * t1363) * t1406 + (t1281 * t1369 - t1363 * t1642) * t1705;
t1203 = -(t1254 * t1363 - t1272 * t1369) * t1701 + (-t1236 * t1363 + t1242 * t1369) * t1406 - (t1281 * t1363 + t1369 * t1642) * t1705;
t1193 = pkin(2) * t1541 - t1404 * t1491 / 0.2e1;
t1192 = pkin(2) * t1544 - t1402 * t1492 / 0.2e1;
t1191 = pkin(2) * t1547 - t1400 * t1493 / 0.2e1;
t1190 = pkin(2) * t1214 * t1654 + t1410 * t1491 / 0.2e1;
t1189 = pkin(2) * t1213 * t1659 + t1408 * t1492 / 0.2e1;
t1188 = pkin(2) * t1212 * t1664 + t1406 * t1493 / 0.2e1;
t1187 = t1359 * t1202;
t1186 = t1358 * t1201;
t1185 = t1357 * t1200;
t1166 = pkin(6) * t1169 + t1175 * t1625;
t1165 = pkin(6) * t1168 + t1174 * t1626;
t1164 = pkin(6) * t1167 + t1173 * t1627;
t1160 = -t1166 * t1410 - t1175 * t1613;
t1159 = -t1165 * t1408 - t1174 * t1615;
t1158 = -t1164 * t1406 - t1173 * t1617;
t1157 = t1175 * t1390 * t1410 - t1166 * t1404;
t1156 = t1174 * t1390 * t1408 - t1165 * t1402;
t1155 = t1173 * t1390 * t1406 - t1164 * t1400;
t1 = [t1221 * t1684 + t1222 * t1683 + t1223 * t1682, -t1486 - t1488 - t1490, ((t1223 * t1428 - t1411 * t1553) * t1271 + (t1222 * t1430 - t1409 * t1556) * t1270 + (t1221 * t1432 - t1407 * t1559) * t1269) * t1388, ((t1223 * t1429 + t1405 * t1553) * t1271 + (t1222 * t1431 + t1403 * t1556) * t1270 + (t1221 * t1433 + t1401 * t1559) * t1269) * t1388, -t1381 * t1490 - t1382 * t1488 - t1383 * t1486 + ((-t1202 * t1250 + t1440) * t1377 * t1518 + (-t1201 * t1249 + t1441) * t1376 * t1519 + (-t1200 * t1248 + t1442) * t1375 * t1520) * t1417, -0.2e1 * t1490 * t1606 - 0.2e1 * t1488 * t1602 - 0.2e1 * t1486 * t1598 + ((-t1187 * t1250 + t1359 * t1440) * t1645 + (-t1186 * t1249 + t1358 * t1441) * t1648 + (-t1185 * t1248 + t1357 * t1442) * t1651) * t1417, (t1404 * t1485 + (-t1464 - t1686) * t1668) * t1377 + (t1402 * t1487 + (-t1468 - t1689) * t1670) * t1376 + (t1400 * t1489 + (-t1472 - t1692) * t1672) * t1375, (t1410 * t1485 + (t1465 - t1685) * t1668) * t1377 + (t1408 * t1487 + (t1469 - t1688) * t1670) * t1376 + (t1406 * t1489 + (t1473 - t1691) * t1672) * t1375, (t1170 * t1523 + t1171 * t1522 + t1172 * t1521) * t1417, (-t1153 * t1667 + t1223 * t1585) * t1271 + (-t1149 * t1669 + t1222 * t1587) * t1270 + (-t1151 * t1671 + t1221 * t1589) * t1269 + ((t1157 * t1250 + t1190 * t1494) * t1645 + (t1156 * t1249 + t1189 * t1497) * t1648 + (t1155 * t1248 + t1188 * t1500) * t1651 + (t1400 * t1451 + t1402 * t1450 + t1404 * t1449) * pkin(2)) * t1417, (-t1154 * t1667 + t1223 * t1584) * t1271 + (-t1150 * t1669 + t1222 * t1586) * t1270 + (-t1152 * t1671 + t1221 * t1588) * t1269 + ((t1160 * t1250 + t1193 * t1494) * t1645 + (t1159 * t1249 + t1192 * t1497) * t1648 + (t1158 * t1248 + t1191 * t1500) * t1651 + (t1406 * t1451 + t1408 * t1450 + t1410 * t1449) * pkin(2)) * t1417, 0; t1203 * t1684 + t1205 * t1683 + t1207 * t1682, t1227 * t1696 + t1228 * t1695 + t1229 * t1694, (t1203 * t1423 + t1205 * t1421 + t1207 * t1419 + t1227 * t1557 + t1228 * t1554 + t1229 * t1551) * t1388, (t1203 * t1424 + t1205 * t1422 + t1207 * t1420 - t1227 * t1558 - t1228 * t1555 - t1229 * t1552) * t1388, t1227 * t1574 + t1228 * t1571 + t1229 * t1568 + ((-t1211 * t1232 + t1229 * t1578) * t1458 + (-t1210 * t1231 + t1228 * t1579) * t1459 + (-t1209 * t1230 + t1227 * t1580) * t1460) * t1417, t1227 * t1457 + t1228 * t1456 + t1229 * t1455 + ((-t1187 * t1232 + t1229 * t1452) * t1297 + (-t1186 * t1231 + t1228 * t1453) * t1295 + (-t1185 * t1230 + t1227 * t1454) * t1293) * t1417, t1227 * t1565 + t1228 * t1563 + t1229 * t1561 + (t1227 * t1474 + t1228 * t1470 + t1229 * t1466) * t1418 + (t1230 * t1573 + t1231 * t1570 + t1232 * t1567) * t1417, t1227 * t1564 + t1228 * t1562 + t1229 * t1560 + (-t1227 * t1475 - t1228 * t1471 - t1229 * t1467) * t1418 + (t1230 * t1572 + t1231 * t1569 + t1232 * t1566) * t1417, (t1230 * t1693 + t1231 * t1690 + t1232 * t1687) * t1417, t1228 * t1661 + t1227 * t1666 + t1229 * t1656 + t1207 * t1503 + t1205 * t1505 + t1203 * t1507 + ((t1232 * t1157 + t1190 * t1495) * t1297 + (t1231 * t1156 + t1189 * t1498) * t1295 + (t1230 * t1155 + t1188 * t1501) * t1293 + (t1230 * t1484 + t1231 * t1482 + t1232 * t1480) * pkin(2)) * t1417, t1228 * t1660 + t1227 * t1665 + t1229 * t1655 + t1207 * t1508 + t1205 * t1504 + t1203 * t1506 + ((t1232 * t1160 + t1193 * t1495) * t1297 + (t1231 * t1159 + t1192 * t1498) * t1295 + (t1230 * t1158 + t1191 * t1501) * t1293 + (t1230 * t1483 + t1231 * t1481 + t1232 * t1479) * pkin(2)) * t1417, 0; t1204 * t1684 + t1206 * t1683 + t1208 * t1682, t1224 * t1696 + t1225 * t1695 + t1226 * t1694, (t1204 * t1423 + t1206 * t1421 + t1208 * t1419 + t1224 * t1557 + t1225 * t1554 + t1226 * t1551) * t1388, (t1204 * t1424 + t1206 * t1422 + t1208 * t1420 - t1224 * t1558 - t1225 * t1555 - t1226 * t1552) * t1388, t1224 * t1574 + t1225 * t1571 + t1226 * t1568 + ((-t1211 * t1235 + t1226 * t1578) * t1458 + (-t1210 * t1234 + t1225 * t1579) * t1459 + (-t1209 * t1233 + t1224 * t1580) * t1460) * t1417, t1224 * t1457 + t1225 * t1456 + t1226 * t1455 + ((-t1187 * t1235 + t1226 * t1452) * t1297 + (-t1186 * t1234 + t1225 * t1453) * t1295 + (-t1185 * t1233 + t1224 * t1454) * t1293) * t1417, t1224 * t1565 + t1225 * t1563 + t1226 * t1561 + (t1224 * t1474 + t1225 * t1470 + t1226 * t1466) * t1418 + (t1233 * t1573 + t1234 * t1570 + t1235 * t1567) * t1417, t1224 * t1564 + t1225 * t1562 + t1226 * t1560 + (-t1224 * t1475 - t1225 * t1471 - t1226 * t1467) * t1418 + (t1233 * t1572 + t1234 * t1569 + t1235 * t1566) * t1417, (t1233 * t1693 + t1234 * t1690 + t1235 * t1687) * t1417, t1225 * t1661 + t1224 * t1666 + t1226 * t1656 + t1208 * t1503 + t1206 * t1505 + t1204 * t1507 + ((t1235 * t1157 + t1190 * t1496) * t1297 + (t1234 * t1156 + t1189 * t1499) * t1295 + (t1233 * t1155 + t1188 * t1502) * t1293 + (t1233 * t1484 + t1234 * t1482 + t1235 * t1480) * pkin(2)) * t1417, t1225 * t1660 + t1224 * t1665 + t1226 * t1655 + t1208 * t1508 + t1206 * t1504 + t1204 * t1506 + ((t1235 * t1160 + t1193 * t1496) * t1297 + (t1234 * t1159 + t1192 * t1499) * t1295 + (t1233 * t1158 + t1191 * t1502) * t1293 + (t1233 * t1483 + t1234 * t1481 + t1235 * t1479) * pkin(2)) * t1417, 0;];
tau_reg  = t1;
