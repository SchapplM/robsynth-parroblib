% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3PRRRR8V2G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G4A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3PRRRR8V2G4A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G4A0_gravload_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:17:25
% EndTime: 2020-08-06 18:17:30
% DurationCPUTime: 4.56s
% Computational Cost: add. (2217->319), mult. (4851->639), div. (81->10), fcn. (5409->34), ass. (0->265)
t3957 = legFrame(3,2);
t3935 = sin(t3957);
t3938 = cos(t3957);
t3954 = legFrame(3,1);
t3926 = sin(t3954);
t3932 = cos(t3954);
t4091 = -g(2) * t3926 + g(3) * t3932;
t3857 = t3935 * g(1) + t4091 * t3938;
t3958 = legFrame(2,2);
t3936 = sin(t3958);
t3939 = cos(t3958);
t3955 = legFrame(2,1);
t3927 = sin(t3955);
t3933 = cos(t3955);
t4092 = -g(2) * t3927 + g(3) * t3933;
t3858 = t3936 * g(1) + t4092 * t3939;
t3959 = legFrame(1,2);
t3937 = sin(t3959);
t3940 = cos(t3959);
t3956 = legFrame(1,1);
t3928 = sin(t3956);
t3934 = cos(t3956);
t4093 = -g(2) * t3928 + g(3) * t3934;
t3859 = t3937 * g(1) + t4093 * t3940;
t3951 = legFrame(3,3);
t3923 = sin(t3951);
t3929 = cos(t3951);
t3947 = sin(pkin(8));
t3949 = cos(pkin(8));
t3872 = t3949 * t3923 + t3947 * t3929;
t3948 = sin(pkin(4));
t4096 = t3872 * t3948;
t3952 = legFrame(2,3);
t3924 = sin(t3952);
t3930 = cos(t3952);
t3873 = t3949 * t3924 + t3947 * t3930;
t4095 = t3873 * t3948;
t3953 = legFrame(1,3);
t3925 = sin(t3953);
t3931 = cos(t3953);
t3874 = t3949 * t3925 + t3947 * t3931;
t4094 = t3874 * t3948;
t3893 = t3932 * g(2) + t3926 * g(3);
t3985 = t3938 * g(1) - t3935 * t4091;
t4090 = t3923 * t3893 + t3929 * t3985;
t3894 = t3933 * g(2) + t3927 * g(3);
t3984 = t3939 * g(1) - t3936 * t4092;
t4089 = t3924 * t3894 + t3930 * t3984;
t3895 = t3934 * g(2) + t3928 * g(3);
t3983 = t3940 * g(1) - t3937 * t4093;
t4088 = t3925 * t3895 + t3931 * t3983;
t4087 = -t3929 * t3893 + t3923 * t3985;
t4086 = -t3930 * t3894 + t3924 * t3984;
t4085 = -t3931 * t3895 + t3925 * t3983;
t3966 = cos(qJ(3,3));
t4084 = pkin(3) * t3966 ^ 2;
t3968 = cos(qJ(3,2));
t4083 = pkin(3) * t3968 ^ 2;
t3970 = cos(qJ(3,1));
t4082 = pkin(3) * t3970 ^ 2;
t3960 = sin(qJ(3,3));
t4072 = t3960 * pkin(2);
t3962 = sin(qJ(3,2));
t4071 = t3962 * pkin(2);
t3964 = sin(qJ(3,1));
t4070 = t3964 * pkin(2);
t3823 = t3947 * t3895 + t3949 * t3983;
t3826 = -t3895 * t3949 + t3947 * t3983;
t3950 = cos(pkin(4));
t3965 = sin(qJ(2,1));
t3971 = cos(qJ(2,1));
t4031 = t3948 * t3859;
t3767 = (-t4031 + (t3823 * t3925 + t3826 * t3931) * t3950) * t3971 + t3965 * (t3823 * t3931 - t3925 * t3826);
t3916 = t3970 * pkin(3) + pkin(2);
t4022 = t3950 * t3964;
t3901 = t3916 * t4022;
t3972 = pkin(7) + pkin(6);
t3922 = t3972 * t3971;
t3904 = pkin(2) * t3965 - t3922;
t3999 = t3970 * t3948;
t4004 = t3965 * t3970;
t3850 = 0.1e1 / (t3901 + (pkin(3) * t4004 + t3904) * t3999);
t4069 = t3767 * t3850;
t3821 = t3947 * t3893 + t3949 * t3985;
t3824 = -t3893 * t3949 + t3947 * t3985;
t3961 = sin(qJ(2,3));
t3967 = cos(qJ(2,3));
t4033 = t3948 * t3857;
t3768 = (-t4033 + (t3821 * t3923 + t3824 * t3929) * t3950) * t3967 + (t3821 * t3929 - t3923 * t3824) * t3961;
t3914 = t3966 * pkin(3) + pkin(2);
t4026 = t3950 * t3960;
t3899 = t3914 * t4026;
t3920 = t3972 * t3967;
t3902 = pkin(2) * t3961 - t3920;
t4002 = t3966 * t3948;
t4014 = t3961 * t3966;
t3848 = 0.1e1 / (t3899 + (pkin(3) * t4014 + t3902) * t4002);
t4068 = t3768 * t3848;
t3822 = t3947 * t3894 + t3949 * t3984;
t3825 = -t3894 * t3949 + t3947 * t3984;
t3963 = sin(qJ(2,2));
t3969 = cos(qJ(2,2));
t4032 = t3948 * t3858;
t3769 = (-t4032 + (t3822 * t3924 + t3825 * t3930) * t3950) * t3969 + t3963 * (t3822 * t3930 - t3825 * t3924);
t3915 = t3968 * pkin(3) + pkin(2);
t4024 = t3950 * t3962;
t3900 = t3915 * t4024;
t3921 = t3972 * t3969;
t3903 = pkin(2) * t3963 - t3921;
t4009 = t3963 * t3968;
t4027 = t3948 * t3968;
t3849 = 0.1e1 / (t3900 + (pkin(3) * t4009 + t3903) * t4027);
t4067 = t3769 * t3849;
t3869 = -t3947 * t3923 + t3929 * t3949;
t4036 = t3932 * t3935;
t3815 = t3869 * t4036 - t3926 * t3872;
t4025 = t3950 * t3961;
t3875 = t3947 * t4025 - t3949 * t3967;
t3878 = t3947 * t3967 + t3949 * t4025;
t3836 = -t3923 * t3875 + t3878 * t3929;
t3979 = t3875 * t3929 + t3923 * t3878;
t3782 = (t3836 * t4036 - t3926 * t3979) * t3960 + t3815 * t4002;
t4066 = t3782 * t3848;
t3870 = -t3947 * t3924 + t3930 * t3949;
t4035 = t3933 * t3936;
t3816 = t3870 * t4035 - t3927 * t3873;
t4023 = t3950 * t3963;
t3876 = t3947 * t4023 - t3949 * t3969;
t3879 = t3947 * t3969 + t3949 * t4023;
t3837 = -t3924 * t3876 + t3879 * t3930;
t3978 = t3876 * t3930 + t3924 * t3879;
t3783 = (t3837 * t4035 - t3927 * t3978) * t3962 + t3816 * t4027;
t4065 = t3783 * t3849;
t3871 = -t3947 * t3925 + t3931 * t3949;
t4034 = t3934 * t3937;
t3817 = t3871 * t4034 - t3928 * t3874;
t4021 = t3950 * t3965;
t3877 = t3947 * t4021 - t3949 * t3971;
t3880 = t3947 * t3971 + t3949 * t4021;
t3838 = -t3925 * t3877 + t3880 * t3931;
t3977 = t3877 * t3931 + t3925 * t3880;
t3784 = (t3838 * t4034 - t3928 * t3977) * t3964 + t3817 * t3999;
t4064 = t3784 * t3850;
t4044 = t3926 * t3935;
t3818 = t3869 * t4044 + t3872 * t3932;
t3785 = (-t3836 * t4044 - t3979 * t3932) * t3960 - t3818 * t4002;
t4063 = t3785 * t3848;
t4042 = t3927 * t3936;
t3819 = t3870 * t4042 + t3873 * t3933;
t3786 = (-t3837 * t4042 - t3978 * t3933) * t3962 - t3819 * t4027;
t4062 = t3786 * t3849;
t4040 = t3928 * t3937;
t3820 = t3871 * t4040 + t3874 * t3934;
t3787 = (-t3838 * t4040 - t3977 * t3934) * t3964 - t3820 * t3999;
t4061 = t3787 * t3850;
t3890 = t3961 * t3914 - t3920;
t3851 = 0.1e1 / (t3890 * t4002 + t3899);
t4013 = t3961 * t3972;
t4048 = (t3914 * t3967 + t4013) * t3950;
t4051 = t3869 * t3932;
t4060 = (-t3818 * t4048 + (t3872 * t4044 - t4051) * t3890) * t3851;
t3891 = t3963 * t3915 - t3921;
t3852 = 0.1e1 / (t3891 * t4027 + t3900);
t4008 = t3963 * t3972;
t4047 = (t3915 * t3969 + t4008) * t3950;
t4050 = t3870 * t3933;
t4059 = (-t3819 * t4047 + (t3873 * t4042 - t4050) * t3891) * t3852;
t3892 = t3965 * t3916 - t3922;
t3853 = 0.1e1 / (t3892 * t3999 + t3901);
t4003 = t3965 * t3972;
t4046 = (t3916 * t3971 + t4003) * t3950;
t4049 = t3871 * t3934;
t4058 = (-t3820 * t4046 + (t3874 * t4040 - t4049) * t3892) * t3853;
t4045 = t3926 * t3869;
t4057 = (t3815 * t4048 - (t3872 * t4036 + t4045) * t3890) * t3851;
t4043 = t3927 * t3870;
t4056 = (t3816 * t4047 - (t3873 * t4035 + t4043) * t3891) * t3852;
t4041 = t3928 * t3871;
t4055 = (t3817 * t4046 - (t3874 * t4034 + t4041) * t3892) * t3853;
t3863 = pkin(3) * t4026 + t3902 * t3948;
t4030 = t3948 * t3961;
t3833 = 0.1e1 / (pkin(2) * t4026 + t3863 * t3966 + t4030 * t4084);
t4054 = t3833 * t3857;
t3864 = pkin(3) * t4024 + t3903 * t3948;
t4029 = t3948 * t3963;
t3834 = 0.1e1 / (pkin(2) * t4024 + t3864 * t3968 + t4029 * t4083);
t4053 = t3834 * t3858;
t3865 = pkin(3) * t4022 + t3904 * t3948;
t4028 = t3948 * t3965;
t3835 = 0.1e1 / (pkin(2) * t4022 + t3865 * t3970 + t4028 * t4082);
t4052 = t3835 * t3859;
t4020 = t3950 * t3967;
t4019 = t3950 * t3969;
t4018 = t3950 * t3971;
t4017 = t3960 * t3948;
t4016 = t3960 * t3961;
t4015 = t3960 * t3967;
t4012 = t3962 * t3948;
t4011 = t3962 * t3963;
t4010 = t3962 * t3969;
t4007 = t3964 * t3948;
t4006 = t3964 * t3965;
t4005 = t3964 * t3971;
t4001 = t3966 * t3967;
t4000 = t3968 * t3969;
t3998 = t3970 * t3971;
t3997 = t3964 * t4069;
t3996 = t3970 * t4069;
t3995 = t3960 * t4068;
t3994 = t3966 * t4068;
t3993 = t3962 * t4067;
t3992 = t3968 * t4067;
t3991 = (t3869 * t4002 + t3960 * (t3869 * t4025 + t3967 * t3872)) * t3833 * t3938;
t3990 = (t3870 * t4027 + t3962 * (t3870 * t4023 + t3969 * t3873)) * t3834 * t3939;
t3989 = (t3871 * t3999 + t3964 * (t3871 * t4021 + t3971 * t3874)) * t3835 * t3940;
t3988 = (-t3869 * t4048 + t3872 * t3890) * t3851 * t3938;
t3987 = (-t3870 * t4047 + t3873 * t3891) * t3852 * t3939;
t3986 = (-t3871 * t4046 + t3874 * t3892) * t3853 * t3940;
t3982 = t3767 * t3989;
t3981 = t3768 * t3991;
t3980 = t3769 * t3990;
t3976 = pkin(3) * t4017 - t3902 * t3950;
t3975 = pkin(3) * t4012 - t3903 * t3950;
t3974 = pkin(3) * t4007 - t3904 * t3950;
t3973 = 0.1e1 / pkin(3);
t3907 = pkin(2) * t3971 + t4003;
t3906 = pkin(2) * t3969 + t4008;
t3905 = pkin(2) * t3967 + t4013;
t3886 = t3950 * t4004 - t4007;
t3885 = t3950 * t4009 - t4012;
t3884 = t3950 * t4014 - t4017;
t3883 = t3950 * t4006 + t3999;
t3882 = t3950 * t4011 + t4027;
t3881 = t3950 * t4016 + t4002;
t3847 = -t3937 * t4094 + t3950 * t3940;
t3846 = -t3936 * t4095 + t3950 * t3939;
t3845 = -t3935 * t4096 + t3950 * t3938;
t3844 = t3907 * t3947 - t3974 * t3949;
t3843 = t3906 * t3947 - t3975 * t3949;
t3842 = t3905 * t3947 - t3976 * t3949;
t3841 = -t3907 * t3949 - t3974 * t3947;
t3840 = -t3906 * t3949 - t3975 * t3947;
t3839 = -t3905 * t3949 - t3976 * t3947;
t3808 = t3977 * t3937 + t3940 * t4028;
t3807 = t3978 * t3936 + t3939 * t4029;
t3806 = t3979 * t3935 + t3938 * t4030;
t3799 = -t3925 * t3841 + t3844 * t3931;
t3798 = -t3924 * t3840 + t3843 * t3930;
t3797 = -t3923 * t3839 + t3842 * t3929;
t3796 = t3865 * t3940 + (t3841 * t3931 + t3844 * t3925) * t3937;
t3795 = t3864 * t3939 + (t3840 * t3930 + t3843 * t3924) * t3936;
t3794 = t3863 * t3938 + (t3839 * t3929 + t3842 * t3923) * t3935;
t3781 = t4088 * (t3947 * t4018 + t3949 * t3965) + (-t3947 * t3965 + t3949 * t4018) * t4085 - t3971 * t4031;
t3780 = t3858 * t4029 - t3876 * t4089 - t3879 * t4086;
t3779 = t4089 * (t3947 * t4019 + t3949 * t3963) + (-t3947 * t3963 + t3949 * t4019) * t4086 - t3969 * t4032;
t3778 = t3859 * t4028 - t3877 * t4088 - t3880 * t4085;
t3777 = t3857 * t4030 - t3875 * t4090 - t3878 * t4087;
t3776 = (t3947 * t4020 + t3949 * t3961) * t4090 + (-t3947 * t3961 + t3949 * t4020) * t4087 - t3967 * t4033;
t3775 = (-t3886 * t3947 + t3949 * t3998) * t4088 - (t3886 * t3949 + t3947 * t3998) * t4085 + t3859 * (t3965 * t3999 + t4022);
t3774 = (-t3885 * t3947 + t3949 * t4000) * t4089 - t4086 * (t3885 * t3949 + t3947 * t4000) + t3858 * (t3948 * t4009 + t4024);
t3773 = (-t3884 * t3947 + t3949 * t4001) * t4090 - t4087 * (t3884 * t3949 + t3947 * t4001) + t3857 * (t3961 * t4002 + t4026);
t3772 = t4089 * (-t3882 * t3947 + t3949 * t4010) - t4086 * (t3882 * t3949 + t3947 * t4010) - t3858 * (-t3948 * t4011 + t3950 * t3968);
t3771 = t4090 * (-t3881 * t3947 + t3949 * t4015) - (t3881 * t3949 + t3947 * t4015) * t4087 - t3857 * (-t3948 * t4016 + t3950 * t3966);
t3770 = (-t3883 * t3947 + t3949 * t4005) * t4088 - t4085 * (t3883 * t3949 + t3947 * t4005) - t3859 * (-t3948 * t4006 + t3950 * t3970);
t1 = [(-(-((-t3971 * t3871 + t3874 * t4021) * t3940 - t3937 * t4028) * t4082 + ((t3907 * t3871 + t3974 * t3874) * t3940 + t3865 * t3937) * t3970 + (t3950 * t3937 + t3940 * t4094) * t4070) * t4052 - (-((-t3969 * t3870 + t3873 * t4023) * t3939 - t3936 * t4029) * t4083 + ((t3906 * t3870 + t3975 * t3873) * t3939 + t3864 * t3936) * t3968 + (t3950 * t3936 + t3939 * t4095) * t4071) * t4053 - (-((-t3967 * t3869 + t3872 * t4025) * t3938 - t3935 * t4030) * t4084 + ((t3905 * t3869 + t3976 * t3872) * t3938 + t3863 * t3935) * t3966 + (t3950 * t3935 + t3938 * t4096) * t4072) * t4054) * MDP(1) + (-t3776 * t3991 - t3779 * t3990 - t3781 * t3989) * MDP(3) + (-t3777 * t3991 - t3778 * t3989 - t3780 * t3990) * MDP(4) + (-t3966 * t3981 - t3968 * t3980 - t3970 * t3982) * MDP(10) + (t3960 * t3981 + t3962 * t3980 + t3964 * t3982) * MDP(11) - g(1) * MDP(12) + ((t3770 * t3986 + t3771 * t3988 + t3772 * t3987) * MDP(10) + (t3773 * t3988 + t3774 * t3987 + t3775 * t3986) * MDP(11)) * t3973; (-(-(t3808 * t3928 - t3838 * t3934) * t4082 + (-t3796 * t3928 + t3799 * t3934) * t3970 - (t3847 * t3928 + t3948 * t4049) * t4070) * t4052 - (-(t3807 * t3927 - t3837 * t3933) * t4083 + (-t3795 * t3927 + t3798 * t3933) * t3968 - (t3846 * t3927 + t3948 * t4050) * t4071) * t4053 - (-(t3806 * t3926 - t3836 * t3932) * t4084 + (-t3794 * t3926 + t3797 * t3932) * t3966 - (t3845 * t3926 + t3948 * t4051) * t4072) * t4054) * MDP(1) + (t3776 * t4063 + t3779 * t4062 + t3781 * t4061) * MDP(3) + (t3777 * t4063 + t3778 * t4061 + t3780 * t4062) * MDP(4) + (t3785 * t3994 + t3786 * t3992 + t3787 * t3996) * MDP(10) + (-t3785 * t3995 - t3786 * t3993 - t3787 * t3997) * MDP(11) - g(2) * MDP(12) + ((t3770 * t4058 + t3771 * t4060 + t3772 * t4059) * MDP(10) + (t3773 * t4060 + t3774 * t4059 + t3775 * t4058) * MDP(11)) * t3973; (-((t3808 * t3934 + t3838 * t3928) * t4082 + (t3796 * t3934 + t3928 * t3799) * t3970 + (t3847 * t3934 - t3948 * t4041) * t4070) * t4052 - ((t3807 * t3933 + t3837 * t3927) * t4083 + (t3795 * t3933 + t3927 * t3798) * t3968 + (t3846 * t3933 - t3948 * t4043) * t4071) * t4053 - ((t3806 * t3932 + t3836 * t3926) * t4084 + (t3794 * t3932 + t3926 * t3797) * t3966 + (t3845 * t3932 - t3948 * t4045) * t4072) * t4054) * MDP(1) + (t3776 * t4066 + t3779 * t4065 + t3781 * t4064) * MDP(3) + (t3777 * t4066 + t3778 * t4064 + t3780 * t4065) * MDP(4) + (t3782 * t3994 + t3783 * t3992 + t3784 * t3996) * MDP(10) + (-t3782 * t3995 - t3783 * t3993 - t3784 * t3997) * MDP(11) - g(3) * MDP(12) + ((t3770 * t4055 + t3771 * t4057 + t3772 * t4056) * MDP(10) + (t3773 * t4057 + t3774 * t4056 + t3775 * t4055) * MDP(11)) * t3973;];
taugX  = t1;
