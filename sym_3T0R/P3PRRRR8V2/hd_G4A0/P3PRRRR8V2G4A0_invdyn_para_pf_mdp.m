% Calculate minimal parameter regressor of inverse dynamics forces for
% P3PRRRR8V2G4A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3PRRRR8V2G4A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3PRRRR8V2G4A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3PRRRR8V2G4A0_invdyn_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:16:24
% EndTime: 2020-08-06 18:16:50
% DurationCPUTime: 25.40s
% Computational Cost: add. (154278->725), mult. (349134->1361), div. (6291->17), fcn. (346494->34), ass. (0->480)
t2419 = cos(qJ(2,1));
t2423 = pkin(7) + pkin(6);
t2366 = t2419 * t2423;
t2413 = sin(qJ(2,1));
t2339 = pkin(2) * t2413 - t2366;
t2393 = sin(pkin(4));
t2395 = cos(pkin(4));
t2412 = sin(qJ(3,1));
t2543 = t2395 * t2412;
t2297 = pkin(3) * t2543 + t2339 * t2393;
t2418 = cos(qJ(3,1));
t2555 = t2393 * t2413;
t2391 = t2418 ^ 2;
t2616 = pkin(3) * t2391;
t2249 = 0.1e1 / (pkin(2) * t2543 + t2297 * t2418 + t2555 * t2616);
t2417 = cos(qJ(2,2));
t2365 = t2417 * t2423;
t2411 = sin(qJ(2,2));
t2338 = pkin(2) * t2411 - t2365;
t2410 = sin(qJ(3,2));
t2545 = t2395 * t2410;
t2296 = pkin(3) * t2545 + t2338 * t2393;
t2416 = cos(qJ(3,2));
t2557 = t2393 * t2411;
t2390 = t2416 ^ 2;
t2617 = pkin(3) * t2390;
t2248 = 0.1e1 / (pkin(2) * t2545 + t2296 * t2416 + t2557 * t2617);
t2415 = cos(qJ(2,3));
t2364 = t2415 * t2423;
t2409 = sin(qJ(2,3));
t2337 = pkin(2) * t2409 - t2364;
t2408 = sin(qJ(3,3));
t2547 = t2395 * t2408;
t2295 = pkin(3) * t2547 + t2337 * t2393;
t2414 = cos(qJ(3,3));
t2559 = t2393 * t2409;
t2389 = t2414 ^ 2;
t2618 = pkin(3) * t2389;
t2247 = 0.1e1 / (pkin(2) * t2547 + t2295 * t2414 + t2559 * t2618);
t2402 = legFrame(3,2);
t2380 = sin(t2402);
t2399 = legFrame(3,1);
t2371 = sin(t2399);
t2377 = cos(t2399);
t2420 = xDP(3);
t2421 = xDP(2);
t2438 = t2371 * t2421 - t2377 * t2420;
t2383 = cos(t2402);
t2422 = xDP(1);
t2563 = t2383 * t2422;
t2280 = t2380 * t2438 + t2563;
t2313 = t2371 * t2420 + t2377 * t2421;
t2392 = sin(pkin(8));
t2394 = cos(pkin(8));
t2223 = t2280 * t2394 + t2313 * t2392;
t2396 = legFrame(3,3);
t2368 = sin(t2396);
t2374 = cos(t2396);
t2444 = t2280 * t2392 - t2313 * t2394;
t2650 = t2368 * t2223 + t2374 * t2444;
t2403 = legFrame(2,2);
t2381 = sin(t2403);
t2400 = legFrame(2,1);
t2372 = sin(t2400);
t2378 = cos(t2400);
t2437 = t2372 * t2421 - t2378 * t2420;
t2384 = cos(t2403);
t2562 = t2384 * t2422;
t2281 = t2381 * t2437 + t2562;
t2314 = t2372 * t2420 + t2378 * t2421;
t2224 = t2281 * t2394 + t2314 * t2392;
t2397 = legFrame(2,3);
t2369 = sin(t2397);
t2375 = cos(t2397);
t2443 = t2281 * t2392 - t2314 * t2394;
t2649 = t2369 * t2224 + t2375 * t2443;
t2404 = legFrame(1,2);
t2382 = sin(t2404);
t2401 = legFrame(1,1);
t2373 = sin(t2401);
t2379 = cos(t2401);
t2436 = t2373 * t2421 - t2379 * t2420;
t2385 = cos(t2404);
t2561 = t2385 * t2422;
t2282 = t2382 * t2436 + t2561;
t2315 = t2373 * t2420 + t2379 * t2421;
t2225 = t2282 * t2394 + t2315 * t2392;
t2398 = legFrame(1,3);
t2370 = sin(t2398);
t2376 = cos(t2398);
t2442 = t2282 * t2392 - t2315 * t2394;
t2648 = t2370 * t2225 + t2376 * t2442;
t2529 = t2409 * t2423;
t2340 = pkin(2) * t2415 + t2529;
t2560 = t2393 * t2408;
t2432 = pkin(3) * t2560 - t2337 * t2395;
t2190 = t2280 * t2432 + t2313 * t2340;
t2193 = t2280 * t2340 - t2313 * t2432;
t2546 = t2395 * t2409;
t2217 = -t2280 * t2546 + t2313 * t2415;
t2218 = t2280 * t2415 + t2313 * t2546;
t2283 = -t2380 * t2422 + t2383 * t2438;
t2622 = pkin(2) * t2408;
t2647 = (((t2217 * t2392 + t2218 * t2394) * t2374 + (t2217 * t2394 - t2218 * t2392) * t2368 - t2283 * t2559) * t2618 + ((t2190 * t2392 + t2193 * t2394) * t2374 + (t2190 * t2394 - t2193 * t2392) * t2368 - t2283 * t2295) * t2414 - (t2283 * t2395 - t2650 * t2393) * t2622) * t2247;
t2526 = t2411 * t2423;
t2341 = pkin(2) * t2417 + t2526;
t2558 = t2393 * t2410;
t2431 = pkin(3) * t2558 - t2338 * t2395;
t2191 = t2281 * t2431 + t2314 * t2341;
t2194 = t2281 * t2341 - t2314 * t2431;
t2544 = t2395 * t2411;
t2219 = -t2281 * t2544 + t2314 * t2417;
t2220 = t2281 * t2417 + t2314 * t2544;
t2284 = -t2381 * t2422 + t2384 * t2437;
t2621 = pkin(2) * t2410;
t2646 = (((t2219 * t2392 + t2220 * t2394) * t2375 + (t2219 * t2394 - t2220 * t2392) * t2369 - t2284 * t2557) * t2617 + ((t2191 * t2392 + t2194 * t2394) * t2375 + (t2191 * t2394 - t2194 * t2392) * t2369 - t2284 * t2296) * t2416 - (t2284 * t2395 - t2649 * t2393) * t2621) * t2248;
t2523 = t2413 * t2423;
t2342 = pkin(2) * t2419 + t2523;
t2556 = t2393 * t2412;
t2430 = pkin(3) * t2556 - t2339 * t2395;
t2192 = t2282 * t2430 + t2315 * t2342;
t2195 = t2282 * t2342 - t2315 * t2430;
t2542 = t2395 * t2413;
t2221 = -t2282 * t2542 + t2315 * t2419;
t2222 = t2282 * t2419 + t2315 * t2542;
t2285 = -t2382 * t2422 + t2385 * t2436;
t2620 = pkin(2) * t2412;
t2645 = (((t2221 * t2392 + t2222 * t2394) * t2376 + (t2221 * t2394 - t2222 * t2392) * t2370 - t2285 * t2555) * t2616 + ((t2192 * t2392 + t2195 * t2394) * t2376 + (t2192 * t2394 - t2195 * t2392) * t2370 - t2285 * t2297) * t2418 - (t2285 * t2395 - t2648 * t2393) * t2620) * t2249;
t2301 = -t2368 * t2392 + t2374 * t2394;
t2304 = t2368 * t2394 + t2374 * t2392;
t2355 = pkin(3) * t2414 + pkin(2);
t2325 = t2355 * t2409 - t2364;
t2575 = (t2355 * t2415 + t2529) * t2395;
t2644 = (-t2301 * t2575 + t2304 * t2325) * t2383;
t2302 = -t2369 * t2392 + t2375 * t2394;
t2305 = t2369 * t2394 + t2375 * t2392;
t2356 = pkin(3) * t2416 + pkin(2);
t2326 = t2356 * t2411 - t2365;
t2574 = (t2356 * t2417 + t2526) * t2395;
t2643 = (-t2302 * t2574 + t2305 * t2326) * t2384;
t2303 = -t2370 * t2392 + t2376 * t2394;
t2306 = t2370 * t2394 + t2376 * t2392;
t2357 = pkin(3) * t2418 + pkin(2);
t2327 = t2357 * t2413 - t2366;
t2573 = (t2357 * t2419 + t2523) * t2395;
t2642 = (-t2303 * t2573 + t2306 * t2327) * t2385;
t2641 = t2304 * t2393;
t2640 = t2305 * t2393;
t2639 = t2306 * t2393;
t2196 = t2223 * t2374 - t2368 * t2444;
t2537 = t2395 * t2421;
t2476 = t2409 * t2537;
t2538 = t2395 * t2420;
t2477 = t2409 * t2538;
t2520 = t2415 * t2421;
t2521 = t2415 * t2420;
t2536 = t2395 * t2422;
t2208 = (t2380 * t2477 + t2520) * t2377 + (-t2380 * t2476 + t2521) * t2371 - t2409 * t2383 * t2536;
t2214 = (-t2380 * t2521 + t2476) * t2377 + (t2380 * t2520 + t2477) * t2371 + t2415 * t2563;
t2554 = t2393 * t2414;
t2160 = ((t2208 * t2394 - t2214 * t2392) * t2374 - (t2208 * t2392 + t2214 * t2394) * t2368) * t2408 - t2196 * t2554;
t2530 = t2409 * t2414;
t2298 = pkin(3) * t2530 + t2337;
t2334 = t2355 * t2547;
t2268 = t2298 * t2554 + t2334;
t2262 = 0.1e1 / t2268;
t2605 = t2160 * t2262;
t2500 = t2423 * t2605;
t2459 = t2408 * t2500;
t2166 = -t2196 * t2575 + t2650 * t2325;
t2277 = t2325 * t2554 + t2334;
t2271 = 0.1e1 / t2277;
t2602 = t2166 * t2271;
t2139 = t2459 - t2602;
t2405 = xDDP(3);
t2406 = xDDP(2);
t2407 = xDDP(1);
t2480 = t2393 * t2530;
t2425 = 0.1e1 / pkin(3);
t2491 = t2425 * t2602;
t2581 = t2271 * t2408;
t2492 = t2166 * t2581;
t2501 = t2415 * t2605;
t2553 = t2393 * t2415;
t2584 = (t2301 * t2554 + t2408 * (t2301 * t2546 + t2304 * t2415)) * t2383;
t2569 = t2371 * t2380;
t2232 = t2301 * t2569 + t2304 * t2377;
t2307 = t2392 * t2546 - t2394 * t2415;
t2310 = t2392 * t2415 + t2394 * t2546;
t2250 = -t2307 * t2368 + t2310 * t2374;
t2441 = t2307 * t2374 + t2310 * t2368;
t2593 = ((-t2250 * t2569 - t2377 * t2441) * t2408 - t2232 * t2554) * t2262;
t2566 = t2377 * t2380;
t2229 = t2301 * t2566 - t2304 * t2371;
t2596 = ((t2250 * t2566 - t2371 * t2441) * t2408 + t2229 * t2554) * t2262;
t2085 = t2405 * t2596 + t2406 * t2593 + (-((t2393 * t2501 + t2395 * t2491) * t2618 + ((-t2492 + t2500) * t2409 + pkin(2) * t2501) * t2554 + t2139 * t2395) * t2605 - t2407 * t2584 - (t2491 * t2553 + (t2389 * t2395 - t2408 * t2480 - t2395) * t2605) * t2602) * t2247;
t2367 = pkin(2) ^ 2 + t2423 ^ 2;
t2424 = pkin(3) ^ 2;
t2615 = 0.2e1 * pkin(2) * pkin(3);
t2462 = (-t2423 * t2492 + (t2389 * t2424 + t2414 * t2615 + t2367) * t2605) * t2247 * t2605;
t2172 = -((-t2301 * t2415 + t2304 * t2546) * t2383 - t2380 * t2559) * t2618 + ((t2301 * t2340 + t2304 * t2432) * t2383 + t2295 * t2380) * t2414 + (t2380 * t2395 + t2383 * t2641) * t2622;
t2599 = t2172 * t2247;
t2253 = -t2340 * t2394 - t2392 * t2432;
t2256 = t2340 * t2392 - t2394 * t2432;
t2187 = t2295 * t2383 + (t2253 * t2374 + t2256 * t2368) * t2380;
t2199 = -t2253 * t2368 + t2256 * t2374;
t2211 = t2380 * t2441 + t2383 * t2559;
t2259 = -t2380 * t2641 + t2383 * t2395;
t2578 = t2301 * t2393;
t2613 = ((t2211 * t2377 + t2250 * t2371) * t2618 + (t2187 * t2377 + t2199 * t2371) * t2414 + (t2259 * t2377 - t2371 * t2578) * t2622) * t2247;
t2614 = (-(t2211 * t2371 - t2250 * t2377) * t2618 + (-t2187 * t2371 + t2199 * t2377) * t2414 - (t2259 * t2371 + t2377 * t2578) * t2622) * t2247;
t2106 = t2414 * t2462 + (pkin(2) * t2491 - t2139 * t2414) * t2247 * t2602 + t2406 * t2614 + t2405 * t2613 + t2407 * t2599;
t2635 = -pkin(6) * t2085 - (t2106 * t2409 + t2501 * t2647) * t2393 + (pkin(2) * t2605 + t2553 * t2647) * t2605;
t2197 = t2224 * t2375 - t2369 * t2443;
t2474 = t2411 * t2537;
t2475 = t2411 * t2538;
t2517 = t2417 * t2421;
t2518 = t2417 * t2420;
t2209 = (t2381 * t2475 + t2517) * t2378 + (-t2381 * t2474 + t2518) * t2372 - t2411 * t2384 * t2536;
t2215 = (-t2381 * t2518 + t2474) * t2378 + (t2381 * t2517 + t2475) * t2372 + t2417 * t2562;
t2552 = t2393 * t2416;
t2161 = ((t2209 * t2394 - t2215 * t2392) * t2375 - (t2209 * t2392 + t2215 * t2394) * t2369) * t2410 - t2197 * t2552;
t2527 = t2411 * t2416;
t2299 = pkin(3) * t2527 + t2338;
t2335 = t2356 * t2545;
t2269 = t2299 * t2552 + t2335;
t2264 = 0.1e1 / t2269;
t2604 = t2161 * t2264;
t2498 = t2423 * t2604;
t2454 = t2410 * t2498;
t2167 = -t2197 * t2574 + t2649 * t2326;
t2278 = t2326 * t2552 + t2335;
t2273 = 0.1e1 / t2278;
t2601 = t2167 * t2273;
t2140 = t2454 - t2601;
t2479 = t2393 * t2527;
t2489 = t2425 * t2601;
t2580 = t2273 * t2410;
t2490 = t2167 * t2580;
t2499 = t2417 * t2604;
t2551 = t2393 * t2417;
t2583 = (t2302 * t2552 + t2410 * (t2302 * t2544 + t2305 * t2417)) * t2384;
t2568 = t2372 * t2381;
t2233 = t2302 * t2568 + t2305 * t2378;
t2308 = t2392 * t2544 - t2394 * t2417;
t2311 = t2392 * t2417 + t2394 * t2544;
t2251 = -t2308 * t2369 + t2311 * t2375;
t2440 = t2308 * t2375 + t2311 * t2369;
t2592 = ((-t2251 * t2568 - t2378 * t2440) * t2410 - t2233 * t2552) * t2264;
t2565 = t2378 * t2381;
t2230 = t2302 * t2565 - t2305 * t2372;
t2595 = ((t2251 * t2565 - t2372 * t2440) * t2410 + t2230 * t2552) * t2264;
t2086 = t2405 * t2595 + t2406 * t2592 + (-((t2393 * t2499 + t2395 * t2489) * t2617 + ((-t2490 + t2498) * t2411 + pkin(2) * t2499) * t2552 + t2140 * t2395) * t2604 - t2407 * t2583 - (t2489 * t2551 + (t2390 * t2395 - t2410 * t2479 - t2395) * t2604) * t2601) * t2248;
t2461 = (-t2423 * t2490 + (t2390 * t2424 + t2416 * t2615 + t2367) * t2604) * t2248 * t2604;
t2173 = -((-t2302 * t2417 + t2305 * t2544) * t2384 - t2381 * t2557) * t2617 + ((t2302 * t2341 + t2305 * t2431) * t2384 + t2296 * t2381) * t2416 + (t2381 * t2395 + t2384 * t2640) * t2621;
t2598 = t2173 * t2248;
t2254 = -t2341 * t2394 - t2392 * t2431;
t2257 = t2341 * t2392 - t2394 * t2431;
t2188 = t2296 * t2384 + (t2254 * t2375 + t2257 * t2369) * t2381;
t2200 = -t2254 * t2369 + t2257 * t2375;
t2212 = t2381 * t2440 + t2384 * t2557;
t2260 = -t2381 * t2640 + t2384 * t2395;
t2577 = t2302 * t2393;
t2611 = ((t2212 * t2378 + t2251 * t2372) * t2617 + (t2188 * t2378 + t2200 * t2372) * t2416 + (t2260 * t2378 - t2372 * t2577) * t2621) * t2248;
t2612 = (-(t2212 * t2372 - t2251 * t2378) * t2617 + (-t2188 * t2372 + t2200 * t2378) * t2416 - (t2260 * t2372 + t2378 * t2577) * t2621) * t2248;
t2107 = t2416 * t2461 + (pkin(2) * t2489 - t2140 * t2416) * t2248 * t2601 + t2406 * t2612 + t2405 * t2611 + t2407 * t2598;
t2634 = -pkin(6) * t2086 - (t2107 * t2411 + t2499 * t2646) * t2393 + (pkin(2) * t2604 + t2551 * t2646) * t2604;
t2198 = t2225 * t2376 - t2370 * t2442;
t2472 = t2413 * t2537;
t2473 = t2413 * t2538;
t2514 = t2419 * t2421;
t2515 = t2419 * t2420;
t2210 = (t2382 * t2473 + t2514) * t2379 + (-t2382 * t2472 + t2515) * t2373 - t2413 * t2385 * t2536;
t2216 = (-t2382 * t2515 + t2472) * t2379 + (t2382 * t2514 + t2473) * t2373 + t2419 * t2561;
t2550 = t2393 * t2418;
t2162 = ((t2210 * t2394 - t2216 * t2392) * t2376 - (t2210 * t2392 + t2216 * t2394) * t2370) * t2412 - t2198 * t2550;
t2524 = t2413 * t2418;
t2300 = pkin(3) * t2524 + t2339;
t2336 = t2357 * t2543;
t2270 = t2300 * t2550 + t2336;
t2266 = 0.1e1 / t2270;
t2603 = t2162 * t2266;
t2496 = t2423 * t2603;
t2458 = t2412 * t2496;
t2168 = -t2198 * t2573 + t2648 * t2327;
t2279 = t2327 * t2550 + t2336;
t2275 = 0.1e1 / t2279;
t2600 = t2168 * t2275;
t2141 = t2458 - t2600;
t2478 = t2393 * t2524;
t2487 = t2425 * t2600;
t2579 = t2275 * t2412;
t2488 = t2168 * t2579;
t2497 = t2419 * t2603;
t2549 = t2393 * t2419;
t2582 = (t2303 * t2550 + t2412 * (t2303 * t2542 + t2306 * t2419)) * t2385;
t2567 = t2373 * t2382;
t2234 = t2303 * t2567 + t2306 * t2379;
t2309 = t2392 * t2542 - t2394 * t2419;
t2312 = t2392 * t2419 + t2394 * t2542;
t2252 = -t2309 * t2370 + t2312 * t2376;
t2439 = t2309 * t2376 + t2312 * t2370;
t2591 = ((-t2252 * t2567 - t2379 * t2439) * t2412 - t2234 * t2550) * t2266;
t2564 = t2379 * t2382;
t2231 = t2303 * t2564 - t2306 * t2373;
t2594 = ((t2252 * t2564 - t2373 * t2439) * t2412 + t2231 * t2550) * t2266;
t2087 = t2405 * t2594 + t2406 * t2591 + (-((t2393 * t2497 + t2395 * t2487) * t2616 + ((-t2488 + t2496) * t2413 + pkin(2) * t2497) * t2550 + t2141 * t2395) * t2603 - t2407 * t2582 - (t2487 * t2549 + (t2391 * t2395 - t2412 * t2478 - t2395) * t2603) * t2600) * t2249;
t2460 = (-t2423 * t2488 + (t2391 * t2424 + t2418 * t2615 + t2367) * t2603) * t2249 * t2603;
t2174 = -((-t2303 * t2419 + t2306 * t2542) * t2385 - t2382 * t2555) * t2616 + ((t2303 * t2342 + t2306 * t2430) * t2385 + t2297 * t2382) * t2418 + (t2382 * t2395 + t2385 * t2639) * t2620;
t2597 = t2174 * t2249;
t2255 = -t2342 * t2394 - t2392 * t2430;
t2258 = t2342 * t2392 - t2394 * t2430;
t2189 = t2297 * t2385 + (t2255 * t2376 + t2258 * t2370) * t2382;
t2201 = -t2255 * t2370 + t2258 * t2376;
t2213 = t2382 * t2439 + t2385 * t2555;
t2261 = -t2382 * t2639 + t2385 * t2395;
t2576 = t2303 * t2393;
t2609 = ((t2213 * t2379 + t2252 * t2373) * t2616 + (t2189 * t2379 + t2201 * t2373) * t2418 + (t2261 * t2379 - t2373 * t2576) * t2620) * t2249;
t2610 = (-(t2213 * t2373 - t2252 * t2379) * t2616 + (-t2189 * t2373 + t2201 * t2379) * t2418 - (t2261 * t2373 + t2379 * t2576) * t2620) * t2249;
t2108 = t2418 * t2460 + (pkin(2) * t2487 - t2141 * t2418) * t2249 * t2600 + t2406 * t2610 + t2405 * t2609 + t2407 * t2597;
t2633 = -pkin(6) * t2087 - (t2108 * t2413 + t2497 * t2645) * t2393 + (pkin(2) * t2603 + t2549 * t2645) * t2603;
t2331 = g(2) * t2371 - g(3) * t2377;
t2289 = t2380 * g(1) - t2331 * t2383;
t2103 = t2106 - t2289;
t2328 = g(2) * t2377 + g(3) * t2371;
t2468 = t2383 * g(1) + t2331 * t2380;
t2235 = t2328 * t2392 + t2394 * t2468;
t2238 = t2328 * t2394 - t2392 * t2468;
t2426 = 0.1e1 / pkin(3) ^ 2;
t2495 = t2166 ^ 2 / t2277 ^ 2 * t2426;
t2629 = 0.2e1 * t2085;
t2632 = (t2235 * t2374 + t2238 * t2368) * t2409 + pkin(2) * t2629 - pkin(6) * t2495 - (-t2103 * t2393 + (-t2235 * t2368 + t2238 * t2374) * t2395) * t2415;
t2332 = g(2) * t2372 - g(3) * t2378;
t2290 = t2381 * g(1) - t2332 * t2384;
t2104 = t2107 - t2290;
t2329 = g(2) * t2378 + g(3) * t2372;
t2467 = t2384 * g(1) + t2332 * t2381;
t2236 = t2329 * t2392 + t2394 * t2467;
t2239 = t2329 * t2394 - t2392 * t2467;
t2494 = t2167 ^ 2 / t2278 ^ 2 * t2426;
t2628 = 0.2e1 * t2086;
t2631 = (t2236 * t2375 + t2239 * t2369) * t2411 + pkin(2) * t2628 - pkin(6) * t2494 - (-t2104 * t2393 + (-t2236 * t2369 + t2239 * t2375) * t2395) * t2417;
t2333 = g(2) * t2373 - g(3) * t2379;
t2291 = t2382 * g(1) - t2333 * t2385;
t2105 = t2108 - t2291;
t2330 = g(2) * t2379 + g(3) * t2373;
t2466 = t2385 * g(1) + t2333 * t2382;
t2237 = t2330 * t2392 + t2394 * t2466;
t2240 = t2330 * t2394 - t2392 * t2466;
t2493 = t2168 ^ 2 / t2279 ^ 2 * t2426;
t2627 = 0.2e1 * t2087;
t2630 = (t2237 * t2376 + t2240 * t2370) * t2413 + pkin(2) * t2627 - pkin(6) * t2493 - (-t2105 * t2393 + (-t2237 * t2370 + t2240 * t2376) * t2395) * t2419;
t2457 = t2262 * t2491;
t2483 = t2271 * t2644;
t2532 = t2407 * t2425;
t2533 = t2406 * t2425;
t2534 = t2405 * t2425;
t2535 = t2395 * t2425;
t2548 = t2393 * t2425;
t2184 = t2229 * t2575 - (t2301 * t2371 + t2304 * t2566) * t2325;
t2587 = t2184 * t2271;
t2181 = -t2232 * t2575 + (-t2301 * t2377 + t2304 * t2569) * t2325;
t2590 = t2181 * t2271;
t2619 = pkin(2) * t2425;
t2115 = t2483 * t2532 + t2533 * t2590 + t2534 * t2587 - t2462 * t2535 - (-t2395 * t2459 + (-t2408 * t2298 * t2548 + (t2414 * t2619 + t2389) * t2395) * t2602) * t2457;
t2450 = t2160 * t2457;
t2623 = pkin(6) / 0.2e1;
t2626 = -0.2e1 * pkin(2) * t2450 - 0.2e1 * t2115 * t2623;
t2456 = t2264 * t2489;
t2482 = t2273 * t2643;
t2185 = t2230 * t2574 - (t2302 * t2372 + t2305 * t2565) * t2326;
t2586 = t2185 * t2273;
t2182 = -t2233 * t2574 + (-t2302 * t2378 + t2305 * t2568) * t2326;
t2589 = t2182 * t2273;
t2116 = t2482 * t2532 + t2533 * t2589 + t2534 * t2586 - t2461 * t2535 - (-t2395 * t2454 + (-t2410 * t2299 * t2548 + (t2416 * t2619 + t2390) * t2395) * t2601) * t2456;
t2449 = t2161 * t2456;
t2625 = -0.2e1 * pkin(2) * t2449 - 0.2e1 * t2116 * t2623;
t2455 = t2266 * t2487;
t2481 = t2275 * t2642;
t2186 = t2231 * t2573 - (t2303 * t2373 + t2306 * t2564) * t2327;
t2585 = t2186 * t2275;
t2183 = -t2234 * t2573 + (-t2303 * t2379 + t2306 * t2567) * t2327;
t2588 = t2183 * t2275;
t2117 = t2481 * t2532 + t2533 * t2588 + t2534 * t2585 - t2460 * t2535 - (-t2395 * t2458 + (-t2412 * t2300 * t2548 + (t2418 * t2619 + t2391) * t2395) * t2600) * t2455;
t2448 = t2162 * t2455;
t2624 = -0.2e1 * pkin(2) * t2448 - 0.2e1 * t2117 * t2623;
t2608 = t2160 ^ 2 / t2268 ^ 2;
t2607 = t2161 ^ 2 / t2269 ^ 2;
t2606 = t2162 ^ 2 / t2270 ^ 2;
t2541 = t2395 * t2415;
t2540 = t2395 * t2417;
t2539 = t2395 * t2419;
t2531 = t2408 * t2414;
t2528 = t2410 * t2416;
t2525 = t2412 * t2418;
t2522 = t2414 * t2415;
t2519 = t2416 * t2417;
t2516 = t2418 * t2419;
t2510 = t2085 * t2581;
t2509 = t2085 * t2271 * t2414;
t2508 = t2086 * t2580;
t2507 = t2086 * t2273 * t2416;
t2506 = t2087 * t2579;
t2505 = t2087 * t2275 * t2418;
t2486 = t2247 * t2584;
t2485 = t2248 * t2583;
t2484 = t2249 * t2582;
t2082 = t2415 * t2085;
t2471 = (t2495 + t2608) * t2409 - t2082;
t2083 = t2417 * t2086;
t2470 = (t2494 + t2607) * t2411 - t2083;
t2084 = t2419 * t2087;
t2469 = (t2493 + t2606) * t2413 - t2084;
t2465 = t2085 * t2483;
t2464 = t2086 * t2482;
t2463 = t2087 * t2481;
t2453 = t2271 * t2531 * t2608;
t2452 = t2273 * t2528 * t2607;
t2451 = t2275 * t2525 * t2606;
t2435 = 0.2e1 * t2450;
t2434 = 0.2e1 * t2449;
t2433 = 0.2e1 * t2448;
t2321 = t2395 * t2524 - t2556;
t2320 = t2395 * t2527 - t2558;
t2319 = t2395 * t2530 - t2560;
t2246 = t2330 * t2370 + t2376 * t2466;
t2245 = -t2330 * t2376 + t2370 * t2466;
t2244 = t2329 * t2369 + t2375 * t2467;
t2243 = -t2329 * t2375 + t2369 * t2467;
t2242 = t2328 * t2368 + t2374 * t2468;
t2241 = -t2328 * t2374 + t2368 * t2468;
t2138 = (-0.2e1 * t2391 + 0.1e1) * t2606;
t2137 = (-0.2e1 * t2390 + 0.1e1) * t2607;
t2136 = (-0.2e1 * t2389 + 0.1e1) * t2608;
t2114 = t2117 * t2418 - t2412 * t2493;
t2113 = t2117 * t2412 + t2418 * t2493;
t2112 = t2116 * t2416 - t2410 * t2494;
t2111 = t2116 * t2410 + t2416 * t2494;
t2110 = t2115 * t2414 - t2408 * t2495;
t2109 = t2115 * t2408 + t2414 * t2495;
t2099 = t2246 * (t2392 * t2539 + t2394 * t2413) + t2245 * (-t2392 * t2413 + t2394 * t2539) + t2105 * t2549;
t2098 = t2244 * (t2392 * t2540 + t2394 * t2411) + t2243 * (-t2392 * t2411 + t2394 * t2540) + t2104 * t2551;
t2097 = t2242 * (t2392 * t2541 + t2394 * t2409) + t2241 * (-t2392 * t2409 + t2394 * t2541) + t2103 * t2553;
t2096 = -t2105 * t2555 - t2245 * t2312 - t2246 * t2309;
t2095 = -t2104 * t2557 - t2243 * t2311 - t2244 * t2308;
t2094 = -t2103 * t2559 - t2241 * t2310 - t2242 * t2307;
t2090 = t2117 * t2413 + t2419 * t2433;
t2089 = t2116 * t2411 + t2417 * t2434;
t2088 = t2115 * t2409 + t2415 * t2435;
t2081 = t2086 * t2411 + t2417 * t2607;
t2080 = -t2411 * t2607 + t2083;
t2079 = t2087 * t2413 + t2419 * t2606;
t2078 = t2085 * t2409 + t2415 * t2608;
t2077 = -t2413 * t2606 + t2084;
t2076 = -t2409 * t2608 + t2082;
t2075 = (t2087 * t2412 + t2418 * t2433) * t2412;
t2074 = (t2086 * t2410 + t2416 * t2434) * t2410;
t2073 = (t2085 * t2408 + t2414 * t2435) * t2408;
t2072 = t2525 * t2627 + (0.4e1 * t2391 - 0.2e1) * t2448;
t2071 = t2528 * t2628 + (0.4e1 * t2390 - 0.2e1) * t2449;
t2070 = t2531 * t2629 + (0.4e1 * t2389 - 0.2e1) * t2450;
t2066 = t2412 * t2624 + t2630 * t2418;
t2065 = -t2630 * t2412 + t2418 * t2624;
t2064 = t2408 * t2626 + t2632 * t2414;
t2063 = -t2632 * t2408 + t2414 * t2626;
t2062 = t2410 * t2625 + t2631 * t2416;
t2061 = -t2631 * t2410 + t2416 * t2625;
t2060 = (-t2412 * t2090 - t2418 * t2469) * t2393 + t2395 * t2114;
t2059 = (-t2418 * t2090 + t2412 * t2469) * t2393 - t2395 * t2113;
t2058 = (-t2410 * t2089 - t2416 * t2470) * t2393 + t2395 * t2112;
t2057 = (-t2416 * t2089 + t2410 * t2470) * t2393 - t2395 * t2111;
t2056 = (-t2408 * t2088 - t2414 * t2471) * t2393 + t2395 * t2110;
t2055 = (-t2414 * t2088 + t2408 * t2471) * t2393 - t2395 * t2109;
t2054 = -t2108 * t2543 + (-t2321 * t2392 + t2394 * t2516) * t2246 - (t2321 * t2394 + t2392 * t2516) * t2245 + t2291 * (t2478 + t2543) + t2633 * t2418;
t2053 = -t2107 * t2545 + (-t2320 * t2392 + t2394 * t2519) * t2244 - t2243 * (t2320 * t2394 + t2392 * t2519) + t2290 * (t2479 + t2545) + t2634 * t2416;
t2052 = -t2106 * t2547 + (-t2319 * t2392 + t2394 * t2522) * t2242 - t2241 * (t2319 * t2394 + t2392 * t2522) + t2289 * (t2480 + t2547) + t2635 * t2414;
t2051 = t2105 * t2418 * t2395 + (-t2245 * t2394 - t2246 * t2392) * (t2412 * t2542 + t2550) + (t2291 * t2555 + (-t2245 * t2392 + t2246 * t2394) * t2419 + t2633) * t2412;
t2050 = t2104 * t2416 * t2395 + (-t2243 * t2394 - t2244 * t2392) * (t2410 * t2544 + t2552) + (t2290 * t2557 + (-t2243 * t2392 + t2244 * t2394) * t2417 + t2634) * t2410;
t2049 = t2103 * t2414 * t2395 + (-t2241 * t2394 - t2242 * t2392) * (t2408 * t2546 + t2554) + (t2289 * t2559 + (-t2241 * t2392 + t2242 * t2394) * t2415 + t2635) * t2408;
t1 = [(t2103 * t2599 + t2104 * t2598 + t2105 * t2597) * MDP(1) + (-t2085 * t2486 - t2086 * t2485 - t2087 * t2484) * MDP(2) + (-t2097 * t2486 - t2098 * t2485 - t2099 * t2484 + (t2076 * t2599 + t2077 * t2597 + t2080 * t2598) * t2393) * MDP(3) + (-t2094 * t2486 - t2095 * t2485 - t2096 * t2484 + (-t2078 * t2599 - t2079 * t2597 - t2081 * t2598) * t2393) * MDP(4) + (-t2073 * t2486 - t2074 * t2485 - t2075 * t2484 + (-t2451 * t2642 - t2452 * t2643 - t2453 * t2644) * t2425) * MDP(5) + (-t2070 * t2486 - t2071 * t2485 - t2072 * t2484 + (t2136 * t2483 + t2137 * t2482 + t2138 * t2481) * t2425) * MDP(6) + (-t2109 * t2486 - t2111 * t2485 - t2113 * t2484 + (t2408 * t2465 + t2410 * t2464 + t2412 * t2463) * t2425) * MDP(7) + (-t2110 * t2486 - t2112 * t2485 - t2114 * t2484 + (t2414 * t2465 + t2416 * t2464 + t2418 * t2463) * t2425) * MDP(8) + (t2115 * t2483 + t2116 * t2482 + t2117 * t2481) * t2425 * MDP(9) + ((t2060 * t2174 - t2066 * t2582) * t2249 + (t2058 * t2173 - t2062 * t2583) * t2248 + (t2056 * t2172 - t2064 * t2584) * t2247 + (t2049 * t2483 + t2050 * t2482 + t2051 * t2481) * t2425) * MDP(10) + ((t2059 * t2174 - t2065 * t2582) * t2249 + (t2057 * t2173 - t2061 * t2583) * t2248 + (t2055 * t2172 - t2063 * t2584) * t2247 + (t2052 * t2483 + t2053 * t2482 + t2054 * t2481) * t2425) * MDP(11) + (t2407 - g(1)) * MDP(12); (t2103 * t2614 + t2104 * t2612 + t2105 * t2610) * MDP(1) + (t2085 * t2593 + t2086 * t2592 + t2087 * t2591) * MDP(2) + (t2097 * t2593 + t2098 * t2592 + t2099 * t2591) * MDP(3) + (t2094 * t2593 + t2095 * t2592 + t2096 * t2591) * MDP(4) + (t2073 * t2593 + t2074 * t2592 + t2075 * t2591) * MDP(5) + (t2070 * t2593 + t2071 * t2592 + t2072 * t2591) * MDP(6) + (t2109 * t2593 + t2111 * t2592 + t2113 * t2591) * MDP(7) + (t2110 * t2593 + t2112 * t2592 + t2114 * t2591) * MDP(8) + (t2056 * t2614 + t2058 * t2612 + t2060 * t2610 + t2062 * t2592 + t2064 * t2593 + t2066 * t2591) * MDP(10) + (t2055 * t2614 + t2057 * t2612 + t2059 * t2610 + t2061 * t2592 + t2063 * t2593 + t2065 * t2591) * MDP(11) + (t2406 - g(2)) * MDP(12) + ((t2076 * t2614 + t2077 * t2610 + t2080 * t2612) * MDP(3) + (-t2078 * t2614 - t2079 * t2610 - t2081 * t2612) * MDP(4)) * t2393 + ((-t2181 * t2453 - t2182 * t2452 - t2183 * t2451) * MDP(5) + (t2136 * t2590 + t2137 * t2589 + t2138 * t2588) * MDP(6) + (t2181 * t2510 + t2182 * t2508 + t2183 * t2506) * MDP(7) + (t2181 * t2509 + t2182 * t2507 + t2183 * t2505) * MDP(8) + (t2115 * t2590 + t2116 * t2589 + t2117 * t2588) * MDP(9) + (t2049 * t2590 + t2050 * t2589 + t2051 * t2588) * MDP(10) + (t2052 * t2590 + t2053 * t2589 + t2054 * t2588) * MDP(11)) * t2425; (t2103 * t2613 + t2104 * t2611 + t2105 * t2609) * MDP(1) + (t2085 * t2596 + t2086 * t2595 + t2087 * t2594) * MDP(2) + (t2097 * t2596 + t2098 * t2595 + t2099 * t2594) * MDP(3) + (t2094 * t2596 + t2095 * t2595 + t2096 * t2594) * MDP(4) + (t2073 * t2596 + t2074 * t2595 + t2075 * t2594) * MDP(5) + (t2070 * t2596 + t2071 * t2595 + t2072 * t2594) * MDP(6) + (t2109 * t2596 + t2111 * t2595 + t2113 * t2594) * MDP(7) + (t2110 * t2596 + t2112 * t2595 + t2114 * t2594) * MDP(8) + (t2056 * t2613 + t2058 * t2611 + t2060 * t2609 + t2062 * t2595 + t2064 * t2596 + t2066 * t2594) * MDP(10) + (t2055 * t2613 + t2057 * t2611 + t2059 * t2609 + t2061 * t2595 + t2063 * t2596 + t2065 * t2594) * MDP(11) + (t2405 - g(3)) * MDP(12) + ((t2076 * t2613 + t2077 * t2609 + t2080 * t2611) * MDP(3) + (-t2078 * t2613 - t2079 * t2609 - t2081 * t2611) * MDP(4)) * t2393 + ((-t2184 * t2453 - t2185 * t2452 - t2186 * t2451) * MDP(5) + (t2136 * t2587 + t2137 * t2586 + t2138 * t2585) * MDP(6) + (t2184 * t2510 + t2185 * t2508 + t2186 * t2506) * MDP(7) + (t2184 * t2509 + t2185 * t2507 + t2186 * t2505) * MDP(8) + (t2115 * t2587 + t2116 * t2586 + t2117 * t2585) * MDP(9) + (t2049 * t2587 + t2050 * t2586 + t2051 * t2585) * MDP(10) + (t2052 * t2587 + t2053 * t2586 + t2054 * t2585) * MDP(11)) * t2425;];
tauX  = t1;
