% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR12V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x14]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR12V1G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR12V1G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:24:46
% EndTime: 2020-08-06 18:24:50
% DurationCPUTime: 3.98s
% Computational Cost: add. (2521->357), mult. (4194->760), div. (1038->14), fcn. (3909->18), ass. (0->342)
t518 = sin(qJ(3,3));
t524 = cos(qJ(3,3));
t725 = t518 * t524;
t520 = sin(qJ(3,2));
t526 = cos(qJ(3,2));
t724 = t520 * t526;
t522 = sin(qJ(3,1));
t528 = cos(qJ(3,1));
t723 = t522 * t528;
t530 = pkin(1) + pkin(5);
t499 = pkin(6) + t530;
t519 = sin(qJ(1,3));
t525 = cos(qJ(1,3));
t473 = qJ(2,3) * t525 - t499 * t519;
t515 = legFrame(3,2);
t490 = sin(t515);
t493 = cos(t515);
t645 = t524 * qJ(2,3);
t661 = t493 * t525;
t673 = t490 * t524;
t431 = (pkin(3) * t673 - t473 * t493) * t518 + pkin(3) * (t524 - 0.1e1) * (t524 + 0.1e1) * t661 + t490 * t645;
t481 = t518 * pkin(3) + qJ(2,3);
t475 = 0.1e1 / t481;
t500 = 0.1e1 / t518;
t702 = t475 * t500;
t416 = t431 * t702;
t698 = t475 * t530;
t614 = t519 * t698;
t390 = t493 * t614 - t416;
t722 = t390 * t500;
t521 = sin(qJ(1,2));
t527 = cos(qJ(1,2));
t474 = qJ(2,2) * t527 - t499 * t521;
t516 = legFrame(2,2);
t491 = sin(t516);
t494 = cos(t516);
t644 = t526 * qJ(2,2);
t658 = t494 * t527;
t669 = t491 * t526;
t432 = (pkin(3) * t669 - t474 * t494) * t520 + pkin(3) * (t526 - 0.1e1) * (t526 + 0.1e1) * t658 + t491 * t644;
t482 = t520 * pkin(3) + qJ(2,2);
t477 = 0.1e1 / t482;
t503 = 0.1e1 / t520;
t692 = t477 * t503;
t417 = t432 * t692;
t688 = t477 * t530;
t607 = t521 * t688;
t391 = t494 * t607 - t417;
t721 = t391 * t503;
t523 = sin(qJ(1,1));
t529 = cos(qJ(1,1));
t472 = t529 * qJ(2,1) - t499 * t523;
t517 = legFrame(1,2);
t492 = sin(t517);
t495 = cos(t517);
t643 = t528 * qJ(2,1);
t655 = t495 * t529;
t665 = t492 * t528;
t430 = (pkin(3) * t665 - t472 * t495) * t522 + pkin(3) * (t528 - 0.1e1) * (t528 + 0.1e1) * t655 + t492 * t643;
t483 = t522 * pkin(3) + qJ(2,1);
t479 = 0.1e1 / t483;
t506 = 0.1e1 / t522;
t682 = t479 * t506;
t415 = t430 * t682;
t679 = t479 * t530;
t600 = t523 * t679;
t392 = t495 * t600 - t415;
t720 = t392 * t506;
t509 = t524 ^ 2;
t662 = t493 * t524;
t672 = t490 * t525;
t435 = (pkin(3) * t662 + t473 * t490) * t518 + (-t509 + 0.1e1) * pkin(3) * t672 + t493 * t645;
t420 = t435 * t702;
t402 = -t490 * t614 - t420;
t719 = t402 * t500;
t511 = t526 ^ 2;
t659 = t494 * t526;
t668 = t491 * t527;
t436 = (pkin(3) * t659 + t474 * t491) * t520 + (-t511 + 0.1e1) * pkin(3) * t668 + t494 * t644;
t421 = t436 * t692;
t403 = -t491 * t607 - t421;
t718 = t403 * t503;
t513 = t528 ^ 2;
t656 = t495 * t528;
t664 = t492 * t529;
t434 = (pkin(3) * t656 + t472 * t492) * t522 + (-t513 + 0.1e1) * pkin(3) * t664 + t495 * t643;
t419 = t434 * t682;
t404 = -t492 * t600 - t419;
t717 = t404 * t506;
t716 = t430 * t506;
t715 = t431 * t500;
t714 = t432 * t503;
t713 = t434 * t506;
t712 = t435 * t500;
t711 = t436 * t503;
t469 = t519 * t481 + t499 * t525;
t466 = t469 * t475;
t699 = t475 * t525;
t638 = pkin(1) * t699;
t448 = t466 - t638;
t710 = t448 * t500;
t470 = t521 * t482 + t499 * t527;
t467 = t470 * t477;
t689 = t477 * t527;
t637 = pkin(1) * t689;
t450 = t467 - t637;
t709 = t450 * t503;
t471 = t523 * t483 + t499 * t529;
t468 = t471 * t479;
t680 = t479 * t529;
t636 = pkin(1) * t680;
t452 = t468 - t636;
t708 = t452 * t506;
t476 = 0.1e1 / t481 ^ 2;
t707 = t469 * t476;
t478 = 0.1e1 / t482 ^ 2;
t706 = t470 * t478;
t480 = 0.1e1 / t483 ^ 2;
t705 = t471 * t480;
t704 = t475 * t490;
t703 = t475 * t493;
t501 = 0.1e1 / t518 ^ 2;
t701 = t475 * t501;
t700 = t475 * t519;
t697 = t476 * t500;
t502 = t519 ^ 2;
t696 = t476 * t502;
t695 = t476 * t525;
t694 = t477 * t491;
t693 = t477 * t494;
t504 = 0.1e1 / t520 ^ 2;
t691 = t477 * t504;
t690 = t477 * t521;
t687 = t478 * t503;
t505 = t521 ^ 2;
t686 = t478 * t505;
t685 = t478 * t527;
t684 = t479 * t492;
t683 = t479 * t495;
t507 = 0.1e1 / t522 ^ 2;
t681 = t479 * t507;
t678 = t480 * t506;
t508 = t523 ^ 2;
t677 = t480 * t508;
t676 = t480 * t529;
t675 = t490 * t493;
t674 = t490 * t519;
t671 = t491 * t494;
t670 = t491 * t521;
t667 = t492 * t495;
t666 = t492 * t523;
t663 = t493 * t519;
t660 = t494 * t521;
t657 = t495 * t523;
t533 = pkin(1) ^ 2;
t496 = qJ(2,3) ^ 2 + t533;
t654 = t496 * t519;
t497 = qJ(2,2) ^ 2 + t533;
t653 = t497 * t521;
t498 = qJ(2,1) ^ 2 + t533;
t652 = t498 * t523;
t651 = t500 * t524;
t650 = t503 * t526;
t649 = t506 * t528;
t510 = t525 ^ 2;
t648 = t510 * t476;
t512 = t527 ^ 2;
t647 = t512 * t478;
t514 = t529 ^ 2;
t646 = t514 * t480;
t531 = 0.1e1 / pkin(3);
t642 = t530 * t531;
t484 = t490 ^ 2;
t487 = t493 ^ 2;
t641 = t484 - t487;
t485 = t491 ^ 2;
t488 = t494 ^ 2;
t640 = t485 - t488;
t486 = t492 ^ 2;
t489 = t495 ^ 2;
t639 = t486 - t489;
t635 = t430 * t681;
t634 = t430 * t678;
t633 = t431 * t701;
t632 = t431 * t697;
t631 = t432 * t691;
t630 = t432 * t687;
t629 = t434 * t681;
t628 = t434 * t678;
t627 = t435 * t701;
t626 = t435 * t697;
t625 = t436 * t691;
t624 = t436 * t687;
t445 = t525 * t698 - t466;
t623 = t445 * t651;
t446 = t527 * t688 - t467;
t622 = t446 * t650;
t447 = t529 * t679 - t468;
t621 = t447 * t649;
t620 = t519 * t707;
t619 = t521 * t706;
t618 = t523 * t705;
t617 = t475 * t674;
t616 = t475 * t663;
t615 = t475 * t651;
t613 = t500 * t695;
t612 = t476 * t725;
t611 = t519 * t695;
t610 = t477 * t670;
t609 = t477 * t660;
t608 = t477 * t650;
t606 = t503 * t685;
t605 = t478 * t724;
t604 = t521 * t685;
t603 = t479 * t666;
t602 = t479 * t657;
t601 = t479 * t649;
t599 = t506 * t676;
t598 = t480 * t723;
t597 = t523 * t676;
t596 = t484 * t696;
t595 = t487 * t696;
t594 = t485 * t686;
t593 = t488 * t686;
t592 = t486 * t677;
t591 = t489 * t677;
t590 = qJ(2,3) * t648;
t589 = qJ(2,2) * t647;
t588 = qJ(2,1) * t646;
t549 = 0.2e1 * qJ(2,3) * t616;
t566 = t642 * t651;
t454 = t490 * t566 + t518 * t549;
t587 = t454 * t700;
t550 = -0.2e1 * qJ(2,3) * t617;
t457 = t493 * t566 + t518 * t550;
t586 = t457 * t700;
t551 = 0.2e1 * qJ(2,2) * t609;
t564 = t642 * t650;
t455 = t491 * t564 + t520 * t551;
t585 = t455 * t690;
t584 = pkin(1) * t617;
t583 = pkin(1) * t616;
t582 = pkin(1) * t610;
t581 = pkin(1) * t609;
t580 = pkin(1) * t603;
t579 = pkin(1) * t602;
t578 = t469 * t615;
t577 = t470 * t608;
t576 = t471 * t601;
t575 = t519 * t615;
t574 = t525 * t615;
t573 = t502 * t612;
t572 = t521 * t608;
t571 = t527 * t608;
t570 = t505 * t605;
t569 = t523 * t601;
t568 = t529 * t601;
t567 = t508 * t598;
t565 = t675 * t696;
t563 = t671 * t686;
t562 = t642 * t649;
t561 = t667 * t677;
t560 = t490 * t611;
t559 = t493 * t611;
t558 = t491 * t604;
t557 = t494 * t604;
t556 = t492 * t597;
t555 = t495 * t597;
t554 = -0.2e1 * qJ(2,1) * t603;
t553 = 0.2e1 * qJ(2,1) * t602;
t552 = -0.2e1 * qJ(2,2) * t610;
t548 = t611 * t725;
t547 = t604 * t724;
t546 = t597 * t723;
t545 = qJ(2,3) * t560;
t544 = qJ(2,3) * t559;
t543 = qJ(2,2) * t558;
t542 = qJ(2,2) * t557;
t541 = qJ(2,1) * t556;
t540 = qJ(2,1) * t555;
t539 = -0.2e1 * t545;
t538 = 0.2e1 * t544;
t537 = -0.2e1 * t543;
t536 = 0.2e1 * t542;
t535 = -0.2e1 * t541;
t534 = 0.2e1 * t540;
t532 = 0.1e1 / pkin(3) ^ 2;
t465 = -t495 * t642 + t528 * t554;
t464 = -t494 * t642 + t526 * t552;
t463 = -t493 * t642 + t524 * t550;
t462 = -t492 * t642 + t528 * t553;
t461 = -t491 * t642 + t526 * t551;
t460 = -t490 * t642 + t524 * t549;
t459 = t495 * t562 + t522 * t554;
t458 = t494 * t564 + t520 * t552;
t456 = t492 * t562 + t522 * t553;
t453 = t468 - 0.2e1 * t636;
t451 = t467 - 0.2e1 * t637;
t449 = t466 - 0.2e1 * t638;
t444 = (t501 * t675 + t504 * t671 + t507 * t667) * t532;
t443 = (-pkin(1) * t471 + t498 * t529) * t479;
t442 = (-pkin(1) * t470 + t497 * t527) * t477;
t441 = (-pkin(1) * t469 + t496 * t525) * t475;
t440 = (t475 * t661 + t477 * t658 + t479 * t655) * t531;
t439 = (t475 * t672 + t477 * t668 + t479 * t664) * t531;
t438 = t555 + t557 + t559;
t437 = -t556 - t558 - t560;
t433 = -t561 - t563 - t565;
t429 = 0.2e1 * t540 + 0.2e1 * t542 + 0.2e1 * t544;
t428 = -0.2e1 * t541 - 0.2e1 * t543 - 0.2e1 * t545;
t427 = (t490 * t616 + t491 * t609 + t492 * t602) * t531;
t426 = t509 * t559 + t511 * t557 + t513 * t555;
t425 = -t509 * t560 - t511 * t558 - t513 * t556;
t424 = (-t493 * t574 - t494 * t571 - t495 * t568) * t531;
t423 = (-t490 * t574 - t491 * t571 - t492 * t568) * t531;
t422 = -0.2e1 * qJ(2,1) * t561 - 0.2e1 * qJ(2,2) * t563 - 0.2e1 * qJ(2,3) * t565;
t418 = -t509 * t565 - t511 * t563 - t513 * t561;
t414 = -0.2e1 * t493 * t548 - 0.2e1 * t494 * t547 - 0.2e1 * t495 * t546;
t413 = 0.2e1 * t490 * t548 + 0.2e1 * t491 * t547 + 0.2e1 * t492 * t546;
t412 = 0.2e1 * t561 * t723 + 0.2e1 * t563 * t724 + 0.2e1 * t565 * t725;
t411 = (t569 * t667 + t572 * t671 + t575 * t675) * t531;
t410 = t419 + t580;
t409 = t419 + 0.2e1 * t580;
t408 = t421 + t582;
t407 = t421 + 0.2e1 * t582;
t406 = t420 + t584;
t405 = t420 + 0.2e1 * t584;
t401 = t415 - 0.2e1 * t579;
t400 = t415 - t579;
t399 = t417 - 0.2e1 * t581;
t398 = t417 - t581;
t397 = t416 - 0.2e1 * t583;
t396 = t416 - t583;
t395 = (-pkin(1) * t713 - t492 * t652) * t479;
t394 = (-pkin(1) * t711 - t491 * t653) * t477;
t393 = (-pkin(1) * t712 - t490 * t654) * t475;
t389 = (-pkin(1) * t716 + t495 * t652) * t479;
t388 = (-pkin(1) * t714 + t494 * t653) * t477;
t387 = (-pkin(1) * t715 + t493 * t654) * t475;
t386 = (-t639 * t523 * t479 - t640 * t690 - t641 * t700) * t531;
t385 = (t639 * t569 + t640 * t572 + t641 * t575) * t531;
t1 = [t591 + t593 + t595, 0, 0, (t401 * t479 + t634) * t657 + (t399 * t477 + t630) * t660 + (t397 * t475 + t632) * t663, 0.2e1 * qJ(2,1) * t591 + 0.2e1 * qJ(2,2) * t593 + 0.2e1 * qJ(2,3) * t595, (t389 * t657 + t400 * t716) * t479 + (t388 * t660 + t398 * t714) * t477 + (t387 * t663 + t396 * t715) * t475, t509 * t595 + t511 * t593 + t513 * t591, -0.2e1 * t487 * t573 - 0.2e1 * t488 * t570 - 0.2e1 * t489 * t567, -0.2e1 * t411, 0.2e1 * t427, (t484 * t501 + t485 * t504 + t486 * t507) * t532, t493 * t587 + t494 * t585 + t456 * t602 + ((-t635 + t720) * t665 + (-t631 + t721) * t669 + (-t633 + t722) * t673) * t531, t460 * t616 + t461 * t609 + t462 * t602 + ((-t392 + t415) * t492 + (-t391 + t417) * t491 + (-t390 + t416) * t490) * t531, 1; t433, 0, 0, (t409 * t683 - t492 * t634) * t523 + (t407 * t693 - t491 * t630) * t521 + (t405 * t703 - t490 * t632) * t519, t422, (t395 * t657 + t410 * t716) * t479 + (t394 * t660 + t408 * t714) * t477 + (t393 * t663 + t406 * t715) * t475, t418, t412, t385, t386, t444, t493 * t586 + t458 * t609 + t459 * t602 + ((t492 * t717 - t495 * t635) * t528 + (t491 * t718 - t494 * t631) * t526 + (t490 * t719 - t493 * t633) * t524) * t531, t463 * t616 + t464 * t609 + t465 * t602 + (-t402 * t490 - t403 * t491 - t404 * t492 + t415 * t495 + t416 * t493 + t417 * t494) * t531, 0; t438, 0, 0, t430 * t599 + t431 * t613 + t432 * t606 + t449 * t616 + t451 * t609 + t453 * t602, t429, (t430 * t708 + t443 * t657) * t479 + (t432 * t709 + t442 * t660) * t477 + (t431 * t710 + t441 * t663) * t475, t426, t414, t423, t439, 0, t522 * t534 + t520 * t536 + t518 * t538 + (t490 * t623 + t491 * t622 + t492 * t621) * t531, t528 * t534 + t526 * t536 + t524 * t538 + (-t445 * t490 - t446 * t491 - t447 * t492) * t531, 0; t433, 0, 0, (-t401 * t684 + t495 * t628) * t523 + (-t399 * t694 + t494 * t624) * t521 + (-t397 * t704 + t493 * t626) * t519, t422, (-t389 * t666 + t400 * t713) * t479 + (-t388 * t670 + t398 * t711) * t477 + (-t387 * t674 + t396 * t712) * t475, t418, t412, t385, t386, t444, -t490 * t587 - t491 * t585 - t456 * t603 + ((-t492 * t629 + t495 * t720) * t528 + (-t491 * t625 + t494 * t721) * t526 + (-t490 * t627 + t493 * t722) * t524) * t531, -t460 * t617 - t461 * t610 - t462 * t603 + (-t390 * t493 - t391 * t494 - t392 * t495 + t419 * t492 + t420 * t490 + t421 * t491) * t531, 0; t592 + t594 + t596, 0, 0, (-t409 * t479 - t628) * t666 + (-t407 * t477 - t624) * t670 + (-t405 * t475 - t626) * t674, 0.2e1 * qJ(2,1) * t592 + 0.2e1 * qJ(2,2) * t594 + 0.2e1 * qJ(2,3) * t596, (-t395 * t666 + t410 * t713) * t479 + (-t394 * t670 + t408 * t711) * t477 + (-t393 * t674 + t406 * t712) * t475, t509 * t596 + t511 * t594 + t513 * t592, -0.2e1 * t484 * t573 - 0.2e1 * t485 * t570 - 0.2e1 * t486 * t567, 0.2e1 * t411, -0.2e1 * t427, (t487 * t501 + t488 * t504 + t489 * t507) * t532, -t490 * t586 - t458 * t610 - t459 * t603 + ((-t629 + t717) * t656 + (-t625 + t718) * t659 + (-t627 + t719) * t662) * t531, -t463 * t617 - t464 * t610 - t465 * t603 + ((-t404 + t419) * t495 + (-t403 + t421) * t494 + (-t402 + t420) * t493) * t531, 1; t437, 0, 0, t434 * t599 + t435 * t613 + t436 * t606 - t449 * t617 - t451 * t610 - t453 * t603, t428, (t434 * t708 - t443 * t666) * t479 + (t436 * t709 - t442 * t670) * t477 + (t435 * t710 - t441 * t674) * t475, t425, t413, t424, t440, 0, t522 * t535 + t520 * t537 + t518 * t539 + (t493 * t623 + t494 * t622 + t495 * t621) * t531, t528 * t535 + t526 * t537 + t524 * t539 + (-t445 * t493 - t446 * t494 - t447 * t495) * t531, 0; t438, 0, 0, t397 * t699 + t399 * t689 + t401 * t680 + t493 * t620 + t494 * t619 + t495 * t618, t429, (t389 * t529 + t400 * t471) * t479 + (t388 * t527 + t398 * t470) * t477 + (t387 * t525 + t396 * t469) * t475, t426, t414, t423, t439, 0, t454 * t699 + t455 * t689 + t456 * t680 + (-t490 * t578 - t491 * t577 - t492 * t576) * t531, t460 * t699 + t461 * t689 + t462 * t680 + (t469 * t704 + t470 * t694 + t471 * t684) * t531, 0; t437, 0, 0, t405 * t699 + t407 * t689 + t409 * t680 - t490 * t620 - t491 * t619 - t492 * t618, t428, (t395 * t529 + t410 * t471) * t479 + (t394 * t527 + t408 * t470) * t477 + (t393 * t525 + t406 * t469) * t475, t425, t413, t424, t440, 0, t457 * t699 + t458 * t689 + t459 * t680 + (-t493 * t578 - t494 * t577 - t495 * t576) * t531, t463 * t699 + t464 * t689 + t465 * t680 + (t469 * t703 + t470 * t693 + t471 * t683) * t531, 0; t646 + t647 + t648, 0, 0, (t453 * t479 + t705) * t529 + (t451 * t477 + t706) * t527 + (t449 * t475 + t707) * t525, 0.2e1 * t588 + 0.2e1 * t589 + 0.2e1 * t590, (t443 * t529 + t452 * t471) * t479 + (t442 * t527 + t450 * t470) * t477 + (t441 * t525 + t448 * t469) * t475, t509 * t648 + t511 * t647 + t513 * t646, -0.2e1 * t510 * t612 - 0.2e1 * t512 * t605 - 0.2e1 * t514 * t598, 0, 0, 0, 0.2e1 * t518 * t590 + 0.2e1 * t520 * t589 + 0.2e1 * t522 * t588, 0.2e1 * t524 * t590 + 0.2e1 * t526 * t589 + 0.2e1 * t528 * t588, 1;];
tau_reg  = t1;
