% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR6V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x12]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:37
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR6V1G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR6V1G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR6V1G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR6V1G2A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR6V1G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR6V1G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:36:52
% EndTime: 2020-08-06 18:36:59
% DurationCPUTime: 6.59s
% Computational Cost: add. (8187->389), mult. (9615->820), div. (1260->20), fcn. (8127->53), ass. (0->397)
t735 = sin(pkin(7));
t754 = -pkin(6) - pkin(5);
t691 = t754 * t735 - pkin(1);
t741 = sin(qJ(1,3));
t676 = t691 * t741;
t736 = cos(pkin(7));
t747 = cos(qJ(1,3));
t892 = t747 * t754;
t893 = t747 * t735;
t1013 = t676 - pkin(2) * t893 - (t741 * pkin(2) + t892) * t736;
t743 = sin(qJ(1,2));
t677 = t691 * t743;
t749 = cos(qJ(1,2));
t890 = t749 * t754;
t891 = t749 * t735;
t1012 = t677 - pkin(2) * t891 - (t743 * pkin(2) + t890) * t736;
t745 = sin(qJ(1,1));
t678 = t691 * t745;
t751 = cos(qJ(1,1));
t888 = t751 * t754;
t889 = t751 * t735;
t1011 = t678 - pkin(2) * t889 - (t745 * pkin(2) + t888) * t736;
t746 = cos(qJ(3,3));
t701 = t746 * pkin(3) + pkin(2);
t710 = t736 * pkin(1);
t688 = t710 + t701;
t679 = 0.1e1 / t688;
t1010 = t679 / 0.2e1;
t680 = 0.1e1 / t688 ^ 2;
t1001 = t680 / 0.4e1;
t748 = cos(qJ(3,2));
t702 = t748 * pkin(3) + pkin(2);
t689 = t710 + t702;
t681 = 0.1e1 / t689;
t1009 = t681 / 0.2e1;
t682 = 0.1e1 / t689 ^ 2;
t1000 = t682 / 0.4e1;
t750 = cos(qJ(3,1));
t703 = t750 * pkin(3) + pkin(2);
t690 = t710 + t703;
t683 = 0.1e1 / t690;
t1008 = t683 / 0.2e1;
t684 = 0.1e1 / t690 ^ 2;
t999 = t684 / 0.4e1;
t720 = qJ(1,3) + pkin(7);
t707 = sin(t720);
t1007 = -t707 / 0.2e1;
t721 = qJ(1,2) + pkin(7);
t708 = sin(t721);
t1006 = -t708 / 0.2e1;
t722 = qJ(1,1) + pkin(7);
t709 = sin(t722);
t1005 = -t709 / 0.2e1;
t744 = sin(qJ(3,1));
t915 = t684 * t750;
t819 = t744 * t915;
t1004 = t819 / 0.2e1;
t742 = sin(qJ(3,2));
t924 = t682 * t748;
t824 = t742 * t924;
t1003 = t824 / 0.2e1;
t740 = sin(qJ(3,3));
t933 = t680 * t746;
t829 = t740 * t933;
t1002 = t829 / 0.2e1;
t883 = pkin(7) + qJ(3,1);
t886 = -pkin(7) + qJ(3,1);
t966 = 0.2e1 * t754;
t970 = -0.2e1 * pkin(2);
t971 = -0.2e1 * pkin(1);
t654 = t709 * t966 + cos(t722) * t970 + t751 * t971 + (-cos(qJ(1,1) - t886) - cos(qJ(1,1) + t883)) * pkin(3);
t967 = 0.2e1 * t744;
t660 = pkin(3) * sin(0.2e1 * qJ(3,1)) + pkin(2) * t967 + (sin(t883) + sin(t886)) * pkin(1);
t948 = t654 / t660;
t837 = t750 * t948;
t786 = t683 * t837;
t998 = t786 / 0.2e1;
t838 = t683 * t948;
t787 = t744 * t838;
t997 = t787 / 0.2e1;
t882 = pkin(7) + qJ(3,2);
t885 = -pkin(7) + qJ(3,2);
t653 = t708 * t966 + cos(t721) * t970 + t749 * t971 + (-cos(qJ(1,2) - t885) - cos(qJ(1,2) + t882)) * pkin(3);
t968 = 0.2e1 * t742;
t659 = pkin(3) * sin(0.2e1 * qJ(3,2)) + pkin(2) * t968 + (sin(t882) + sin(t885)) * pkin(1);
t949 = t653 / t659;
t839 = t748 * t949;
t789 = t681 * t839;
t996 = t789 / 0.2e1;
t840 = t681 * t949;
t790 = t742 * t840;
t995 = t790 / 0.2e1;
t881 = pkin(7) + qJ(3,3);
t884 = -pkin(7) + qJ(3,3);
t652 = t707 * t966 + cos(t720) * t970 + t747 * t971 + (-cos(qJ(1,3) - t884) - cos(qJ(1,3) + t881)) * pkin(3);
t969 = 0.2e1 * t740;
t658 = pkin(3) * sin(0.2e1 * qJ(3,3)) + pkin(2) * t969 + (sin(t881) + sin(t884)) * pkin(1);
t950 = t652 / t658;
t841 = t746 * t950;
t792 = t679 * t841;
t994 = t792 / 0.2e1;
t842 = t679 * t950;
t793 = t740 * t842;
t993 = t793 / 0.2e1;
t729 = t744 ^ 2;
t917 = t684 * t729;
t992 = t917 * t1005;
t726 = t742 ^ 2;
t926 = t682 * t726;
t991 = t926 * t1006;
t723 = t740 ^ 2;
t935 = t680 * t723;
t990 = t935 * t1007;
t739 = legFrame(1,2);
t697 = t739 + t722;
t698 = -t739 + t722;
t669 = -sin(t697) + sin(t698);
t672 = cos(t698) + cos(t697);
t972 = t669 * t672;
t989 = t972 * t999;
t738 = legFrame(2,2);
t695 = t738 + t721;
t696 = -t738 + t721;
t668 = -sin(t695) + sin(t696);
t671 = cos(t696) + cos(t695);
t973 = t668 * t671;
t988 = t973 * t1000;
t737 = legFrame(3,2);
t693 = t737 + t720;
t694 = -t737 + t720;
t667 = -sin(t693) + sin(t694);
t670 = cos(t694) + cos(t693);
t974 = t667 * t670;
t987 = t974 * t1001;
t986 = t917 / 0.4e1;
t985 = t684 * t1005;
t984 = t926 / 0.4e1;
t983 = t682 * t1006;
t982 = t935 / 0.4e1;
t981 = t680 * t1007;
t980 = t672 * t1008;
t979 = t671 * t1009;
t978 = t670 * t1010;
t977 = t669 * t1008;
t976 = t668 * t1009;
t975 = t667 * t1010;
t700 = t710 + pkin(2);
t711 = sin(t737);
t732 = t746 ^ 2;
t874 = (t741 * t736 + t893) * t732 * pkin(3);
t714 = cos(t737);
t898 = t740 * t714;
t631 = -t711 * t874 + (pkin(3) * t898 + t1013 * t711) * t746 + t700 * t898;
t699 = t735 * pkin(1) + pkin(5);
t911 = t699 / 0.2e1;
t815 = t746 * t911;
t601 = (-t667 * t815 - t631) * t679;
t965 = t601 * t679;
t712 = sin(t738);
t733 = t748 ^ 2;
t875 = pkin(3) * (t743 * t736 + t891) * t733;
t715 = cos(t738);
t896 = t742 * t715;
t633 = -t712 * t875 + (pkin(3) * t896 + t1012 * t712) * t748 + t700 * t896;
t814 = t748 * t911;
t602 = (-t668 * t814 - t633) * t681;
t964 = t602 * t681;
t713 = sin(t739);
t734 = t750 ^ 2;
t873 = (t745 * t736 + t889) * t734 * pkin(3);
t716 = cos(t739);
t894 = t744 * t716;
t635 = -t713 * t873 + (pkin(3) * t894 + t1011 * t713) * t750 + t700 * t894;
t813 = t750 * t911;
t603 = (-t669 * t813 - t635) * t683;
t963 = t603 * t683;
t899 = t740 * t711;
t632 = t714 * t874 + (pkin(3) * t899 - t1013 * t714) * t746 + t700 * t899;
t604 = (-t670 * t815 - t632) * t679;
t962 = t604 * t679;
t897 = t742 * t712;
t634 = t715 * t875 + (pkin(3) * t897 - t1012 * t715) * t748 + t700 * t897;
t605 = (-t671 * t814 - t634) * t681;
t961 = t605 * t681;
t895 = t744 * t713;
t636 = t716 * t873 + (pkin(3) * t895 - t1011 * t716) * t750 + t700 * t895;
t606 = (-t672 * t813 - t636) * t683;
t960 = t606 * t683;
t908 = t701 * t741;
t646 = (t892 + t908) * t736 - t676 + t701 * t893;
t959 = t646 * t711;
t958 = t646 * t714;
t724 = 0.1e1 / t740;
t957 = t646 * t724;
t907 = t702 * t743;
t648 = (t890 + t907) * t736 - t677 + t702 * t891;
t956 = t648 * t712;
t955 = t648 * t715;
t727 = 0.1e1 / t742;
t954 = t648 * t727;
t906 = t703 * t745;
t650 = (t888 + t906) * t736 - t678 + t703 * t889;
t953 = t650 * t713;
t952 = t650 * t716;
t730 = 0.1e1 / t744;
t951 = t650 * t730;
t941 = t679 * t707;
t940 = t679 * t724;
t939 = t679 * t746;
t937 = t680 * t711;
t936 = t680 * t714;
t725 = 0.1e1 / t740 ^ 2;
t934 = t680 * t725;
t932 = t681 * t708;
t931 = t681 * t727;
t930 = t681 * t748;
t928 = t682 * t712;
t927 = t682 * t715;
t728 = 0.1e1 / t742 ^ 2;
t925 = t682 * t728;
t923 = t683 * t709;
t922 = t683 * t730;
t921 = t683 * t750;
t919 = t684 * t713;
t918 = t684 * t716;
t731 = 0.1e1 / t744 ^ 2;
t916 = t684 * t731;
t914 = t699 * t707;
t913 = t699 * t708;
t912 = t699 * t709;
t755 = 0.1e1 / pkin(3);
t910 = t699 * t755;
t909 = t700 / 0.2e1;
t704 = t707 ^ 2;
t905 = t704 * t680;
t705 = t708 ^ 2;
t904 = t705 * t682;
t706 = t709 ^ 2;
t903 = t706 * t684;
t902 = t724 * t746;
t901 = t727 * t748;
t900 = t730 * t750;
t887 = t755 / 0.2e1;
t878 = 0.2e1 * t755;
t877 = -0.2e1 * t909;
t876 = 0.2e1 * t909;
t818 = t740 * t911;
t594 = (t631 * t902 - t667 * t818) * t679;
t872 = t594 * t940;
t817 = t742 * t911;
t595 = (t633 * t901 - t668 * t817) * t681;
t871 = t595 * t931;
t816 = t744 * t911;
t596 = (t635 * t900 - t669 * t816) * t683;
t870 = t596 * t922;
t597 = (t632 * t902 - t670 * t818) * t679;
t869 = t597 * t940;
t598 = (t634 * t901 - t671 * t817) * t681;
t868 = t598 * t931;
t599 = (t636 * t900 - t672 * t816) * t683;
t867 = t599 * t922;
t866 = t646 ^ 2 * t934;
t865 = t648 ^ 2 * t925;
t864 = t650 ^ 2 * t916;
t863 = t646 * t937;
t862 = t646 * t936;
t861 = t646 * t910;
t860 = t711 * t957;
t859 = t714 * t957;
t858 = t646 * t902;
t647 = (t701 * t747 - t741 * t754) * t736 - t691 * t747 - t735 * t908;
t857 = t647 * t724 * t732;
t856 = t648 * t928;
t855 = t648 * t927;
t854 = t648 * t910;
t853 = t712 * t954;
t852 = t715 * t954;
t851 = t648 * t901;
t649 = (t702 * t749 - t743 * t754) * t736 - t691 * t749 - t735 * t907;
t850 = t649 * t727 * t733;
t849 = t650 * t919;
t848 = t650 * t918;
t847 = t650 * t910;
t846 = t713 * t951;
t845 = t716 * t951;
t844 = t650 * t900;
t651 = (t703 * t751 - t745 * t754) * t736 - t691 * t751 - t735 * t906;
t843 = t651 * t730 * t734;
t833 = t700 * t941;
t831 = t732 * t934;
t830 = t725 * t933;
t828 = t700 * t932;
t826 = t733 * t925;
t825 = t728 * t924;
t823 = t700 * t923;
t821 = t734 * t916;
t820 = t731 * t915;
t812 = t878 / 0.2e1;
t811 = t740 * t877;
t810 = t742 * t877;
t809 = t744 * t877;
t808 = t746 * t876;
t807 = t748 * t876;
t806 = t750 * t876;
t805 = t631 * t830;
t804 = t632 * t830;
t803 = t633 * t825;
t802 = t634 * t825;
t801 = t635 * t820;
t800 = t636 * t820;
t799 = t680 * t858;
t798 = t647 * t830;
t797 = t682 * t851;
t796 = t649 * t825;
t795 = t684 * t844;
t794 = t651 * t820;
t791 = t910 * t950;
t788 = t910 * t949;
t785 = t910 * t948;
t784 = t707 * t829;
t783 = t708 * t824;
t782 = t709 * t819;
t781 = t646 * t647 * t831;
t780 = t842 * t957;
t779 = t711 * t799;
t778 = t714 * t799;
t777 = t858 * t910;
t776 = t648 * t649 * t826;
t775 = t840 * t954;
t774 = t712 * t797;
t773 = t715 * t797;
t772 = t851 * t910;
t771 = t650 * t651 * t821;
t770 = t838 * t951;
t769 = t713 * t795;
t768 = t716 * t795;
t767 = t844 * t910;
t763 = (-t667 * t714 + t670 * t711) * t680 * t646;
t762 = (-t668 * t715 + t671 * t712) * t682 * t648;
t761 = (-t669 * t716 + t672 * t713) * t684 * t650;
t760 = t903 + t904 + t905;
t661 = t667 ^ 2;
t662 = t668 ^ 2;
t663 = t669 ^ 2;
t759 = t662 * t1000 + t661 * t1001 + t663 * t999;
t664 = t670 ^ 2;
t665 = t671 ^ 2;
t666 = t672 ^ 2;
t758 = t665 * t1000 + t664 * t1001 + t666 * t999;
t600 = t989 + t988 + t987;
t623 = t667 * t981 + t668 * t983 + t669 * t985;
t624 = t670 * t981 + t671 * t983 + t672 * t985;
t757 = pkin(1) ^ 2;
t756 = 0.1e1 / pkin(3) ^ 2;
t642 = (-t651 + t912) * t921;
t641 = (-t649 + t913) * t930;
t640 = (-t647 + t914) * t939;
t639 = (t744 * t912 + t843) * t683;
t638 = (t742 * t913 + t850) * t681;
t637 = (t740 * t914 + t857) * t679;
t630 = -t742 * t788 - 0.2e1 * t748 * t828;
t629 = -t740 * t791 - 0.2e1 * t746 * t833;
t628 = -t744 * t785 - 0.2e1 * t750 * t823;
t627 = -t750 * t785 + t823 * t967;
t626 = -t748 * t788 + t828 * t968;
t625 = -t746 * t791 + t833 * t969;
t622 = (t671 * t807 + t715 * t854) * t681;
t621 = (t668 * t807 - t712 * t854) * t681;
t620 = (t670 * t808 + t714 * t861) * t679;
t619 = (t667 * t808 - t711 * t861) * t679;
t618 = (t672 * t806 + t716 * t847) * t683;
t617 = (t669 * t806 - t713 * t847) * t683;
t616 = (t672 * t809 + t716 * t767) * t683;
t615 = (t669 * t809 - t713 * t767) * t683;
t614 = (t671 * t810 + t715 * t772) * t681;
t613 = (t668 * t810 - t712 * t772) * t681;
t612 = (t670 * t811 + t714 * t777) * t679;
t611 = (t667 * t811 - t711 * t777) * t679;
t610 = t670 * t990 + t671 * t991 + t672 * t992;
t609 = t667 * t990 + t668 * t991 + t669 * t992;
t608 = -t670 * t784 - t671 * t783 - t672 * t782;
t607 = -t667 * t784 - t668 * t783 - t669 * t782;
t593 = t723 * t987 + t726 * t988 + t729 * t989;
t592 = t974 * t1002 + t973 * t1003 + t972 * t1004;
t591 = (-t711 * t714 * t866 - t712 * t715 * t865 - t713 * t716 * t864) * t756;
t590 = (-t714 * t780 - t715 * t775 - t716 * t770) * t756;
t589 = (t711 * t780 + t712 * t775 + t713 * t770) * t756;
t588 = (t761 + t762 + t763) * t887;
t587 = (t670 * t993 + t671 * t995 + t672 * t997 + t707 * t862 + t708 * t855 + t709 * t848) * t755;
t586 = (t667 * t993 + t668 * t995 + t669 * t997 - t707 * t863 - t708 * t856 - t709 * t849) * t755;
t585 = (t670 * t994 + t671 * t996 + t672 * t998 + t707 * t778 + t708 * t773 + t709 * t768) * t755;
t584 = (t667 * t994 + t668 * t996 + t669 * t998 - t707 * t779 - t708 * t774 - t709 * t769) * t755;
t583 = (t761 * t900 + t762 * t901 + t763 * t902) * t887;
t582 = t624 * t757 + t632 * t798 + t634 * t796 + t636 * t794;
t581 = t623 * t757 + t631 * t798 + t633 * t796 + t635 * t794;
t580 = t632 * t631 * t934 + t634 * t633 * t925 + t636 * t635 * t916 + t600 * t757;
t1 = [t758, 0, 0, t632 ^ 2 * t934 + t634 ^ 2 * t925 + t636 ^ 2 * t916 + t757 * t758, t664 * t982 + t665 * t984 + t666 * t986, t664 * t1002 + t665 * t1003 + t666 * t1004, (-t670 * t862 - t671 * t855 - t672 * t848) * t812, (-t670 * t778 - t671 * t773 - t672 * t768) * t812, (t714 ^ 2 * t866 + t715 ^ 2 * t865 + t716 ^ 2 * t864) * t756, t618 * t980 + t620 * t978 + t622 * t979 + ((-t800 - t867) * t952 + (-t802 - t868) * t955 + (-t804 - t869) * t958) * t755, t612 * t978 + t614 * t979 + t616 * t980 + ((t636 * t684 - t960) * t845 + (t634 * t682 - t961) * t852 + (t632 * t680 - t962) * t859) * t755, 1; t600, 0, 0, t580, t593, t592, t588, t583, t591, t617 * t980 + t619 * t978 + t621 * t979 + ((t713 * t800 - t716 * t870) * t650 + (t712 * t802 - t715 * t871) * t648 + (t711 * t804 - t714 * t872) * t646) * t755, t611 * t978 + t613 * t979 + t615 * t980 + ((-t636 * t919 - t716 * t963) * t951 + (-t634 * t928 - t715 * t964) * t954 + (-t632 * t937 - t714 * t965) * t957) * t755, 0; t624, 0, 0, t582, t610, t608, t587, t585, t590, t628 * t980 + t629 * t978 + t630 * t979 + ((t636 * t837 - t639 * t952) * t922 + (t634 * t839 - t638 * t955) * t931 + (t632 * t841 - t637 * t958) * t940) * t755, t625 * t978 + t626 * t979 + t627 * t980 + ((-t636 * t948 - t642 * t845) * t683 + (-t634 * t949 - t641 * t852) * t681 + (-t632 * t950 - t640 * t859) * t679) * t755, 0; t600, 0, 0, t580, t593, t592, t588, t583, t591, t618 * t977 + t620 * t975 + t622 * t976 + ((t713 * t867 - t716 * t801) * t650 + (t712 * t868 - t715 * t803) * t648 + (t711 * t869 - t714 * t805) * t646) * t755, t612 * t975 + t614 * t976 + t616 * t977 + ((t635 * t918 + t713 * t960) * t951 + (t633 * t927 + t712 * t961) * t954 + (t631 * t936 + t711 * t962) * t957) * t755, 0; t759, 0, 0, t631 ^ 2 * t934 + t633 ^ 2 * t925 + t635 ^ 2 * t916 + t757 * t759, t661 * t982 + t662 * t984 + t663 * t986, t661 * t1002 + t662 * t1003 + t663 * t1004, (t667 * t863 + t668 * t856 + t669 * t849) * t812, (t667 * t779 + t668 * t774 + t669 * t769) * t812, (t711 ^ 2 * t866 + t712 ^ 2 * t865 + t713 ^ 2 * t864) * t756, t617 * t977 + t619 * t975 + t621 * t976 + ((t801 + t870) * t953 + (t803 + t871) * t956 + (t805 + t872) * t959) * t755, t611 * t975 + t613 * t976 + t615 * t977 + ((-t635 * t684 + t963) * t846 + (-t633 * t682 + t964) * t853 + (-t631 * t680 + t965) * t860) * t755, 1; t623, 0, 0, t581, t609, t607, t586, t584, t589, t628 * t977 + t629 * t975 + t630 * t976 + ((t635 * t837 + t639 * t953) * t922 + (t633 * t839 + t638 * t956) * t931 + (t631 * t841 + t637 * t959) * t940) * t755, t625 * t975 + t626 * t976 + t627 * t977 + ((-t635 * t948 + t642 * t846) * t683 + (-t633 * t949 + t641 * t853) * t681 + (-t631 * t950 + t640 * t860) * t679) * t755, 0; t624, 0, 0, t582, t610, t608, t587, t585, t590, -t618 * t923 - t620 * t941 - t622 * t932 + (t597 * t950 + t598 * t949 + t599 * t948 - t714 * t781 - t715 * t776 - t716 * t771) * t755, -t612 * t941 - t614 * t932 - t616 * t923 + (t604 * t950 + t605 * t949 + t606 * t948 + t647 * t778 + t649 * t773 + t651 * t768) * t755, 0; t623, 0, 0, t581, t609, t607, t586, t584, t589, -t617 * t923 - t619 * t941 - t621 * t932 + (t594 * t950 + t595 * t949 + t596 * t948 + t711 * t781 + t712 * t776 + t713 * t771) * t755, -t611 * t941 - t613 * t932 - t615 * t923 + (t601 * t950 + t602 * t949 + t603 * t948 - t647 * t779 - t649 * t774 - t651 * t769) * t755, 0; t760, 0, 0, t647 ^ 2 * t831 + t649 ^ 2 * t826 + t651 ^ 2 * t821 + t757 * t760, t723 * t905 + t726 * t904 + t729 * t903, 0.2e1 * t704 * t829 + 0.2e1 * t705 * t824 + 0.2e1 * t706 * t819, (-t707 * t793 - t708 * t790 - t709 * t787) * t878, (-t707 * t792 - t708 * t789 - t709 * t786) * t878, (t654 ^ 2 / t660 ^ 2 + t653 ^ 2 / t659 ^ 2 + t652 ^ 2 / t658 ^ 2) * t756, -t628 * t923 - t629 * t941 - t630 * t932 + ((t683 * t843 + t639) * t948 + (t681 * t850 + t638) * t949 + (t679 * t857 + t637) * t950) * t755, -t625 * t941 - t626 * t932 - t627 * t923 + ((-t651 * t921 + t642) * t948 + (-t649 * t930 + t641) * t949 + (-t647 * t939 + t640) * t950) * t755, 1;];
tau_reg  = t1;
