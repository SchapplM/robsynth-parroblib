% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RPRRR6V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [12x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RPRRR6V1G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:37
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RPRRR6V1G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(7,1),zeros(12,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [12 1]), ...
  'P3RPRRR6V1G2A0_invdyn_para_pf_mdp: MDP has to be [12x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:37:15
% EndTime: 2020-08-06 18:37:32
% DurationCPUTime: 17.14s
% Computational Cost: add. (116946->650), mult. (137454->1045), div. (18858->22), fcn. (98790->102), ass. (0->437)
t2083 = sin(pkin(7));
t2111 = -pkin(6) - pkin(5);
t1992 = t2111 * t2083;
t1979 = -t1992 + pkin(1);
t2095 = sin(qJ(1,3));
t1948 = t1979 * t2095;
t2084 = cos(pkin(7));
t2101 = cos(qJ(1,3));
t2259 = t2101 * t2111;
t2266 = t2083 * t2101;
t2393 = t1948 + pkin(2) * t2266 + (pkin(2) * t2095 + t2259) * t2084;
t2097 = sin(qJ(1,2));
t1949 = t1979 * t2097;
t2103 = cos(qJ(1,2));
t2258 = t2103 * t2111;
t2265 = t2083 * t2103;
t2392 = t1949 + pkin(2) * t2265 + (pkin(2) * t2097 + t2258) * t2084;
t2099 = sin(qJ(1,1));
t1950 = t1979 * t2099;
t2105 = cos(qJ(1,1));
t2257 = t2105 * t2111;
t2264 = t2083 * t2105;
t2391 = t1950 + pkin(2) * t2264 + (pkin(2) * t2099 + t2257) * t2084;
t2133 = pkin(2) ^ 2;
t2113 = 0.3e1 * t2133;
t2131 = pkin(3) ^ 2;
t2390 = t2113 + 0.3e1 / 0.4e1 * t2131;
t2051 = qJ(1,3) + pkin(7);
t2088 = legFrame(3,2);
t1983 = t2088 + t2051;
t1984 = -t2088 + t2051;
t1929 = -sin(t1983) + sin(t1984);
t1932 = cos(t1984) + cos(t1983);
t2011 = sin(t2051);
t2109 = xDP(2);
t2110 = xDP(1);
t2108 = xDP(3);
t2331 = -2 * t2108;
t1896 = t1929 * t2109 + t1932 * t2110 + t2011 * t2331;
t2100 = cos(qJ(3,3));
t2030 = t2100 * pkin(3);
t1999 = t2030 + pkin(2);
t2021 = t2084 * pkin(1);
t1963 = t2021 + t1999;
t1951 = 0.1e1 / t1963;
t2321 = pkin(1) * t2083;
t2161 = -t2111 / 0.2e1 + t2321 / 0.2e1;
t2094 = sin(qJ(3,3));
t1991 = t2111 * t2084;
t2024 = sin(t2088);
t2027 = cos(t2088);
t2132 = 0.1e1 / pkin(3);
t2221 = pkin(2) * t2084 + t1979;
t2251 = pkin(2) * t2083 + t1991;
t1989 = t2021 + pkin(2);
t2262 = t2094 * t1989;
t2076 = 0.1e1 / t2094;
t2282 = t1951 * t2076;
t2122 = 0.2e1 * qJ(3,3);
t2060 = sin(t2122);
t2318 = pkin(3) * t2060;
t1875 = (-t2108 * ((t2084 * t2030 + t2221) * t2101 - t2095 * (t2083 * t2030 + t2251)) / (t2318 / 0.2e1 + t2262) + (t2024 * t2109 - t2027 * t2110) * ((t1999 * t2084 + t1979) * t2095 + t2101 * (t1999 * t2083 + t1991)) * t2282) * t2132;
t2312 = t1875 * pkin(3);
t2227 = t2094 * t2312;
t1865 = t1951 * t1896 * t2161 - t2227;
t1952 = 0.1e1 / t1963 ^ 2;
t2092 = xDDP(2);
t2093 = xDDP(1);
t2091 = xDDP(3);
t2281 = t1951 * t2091;
t2298 = t1896 / 0.2e1;
t1862 = -t2011 * t2281 + (t1929 * t2092 + t1932 * t2093) * t1951 / 0.2e1 + (-t1865 + t2227) * t1952 * t2298;
t1872 = t1875 ^ 2;
t1945 = g(1) * t2027 - t2024 * g(2);
t1922 = g(3) * t2101 + t1945 * t2095;
t2324 = pkin(1) * t1862;
t2354 = g(3) * t2095 - t1945 * t2101;
t2375 = 0.2e1 * pkin(2);
t2389 = (t2354 + 0.2e1 * t2324) * t2084 - t1872 * pkin(5) + t1862 * t2375 - (pkin(1) * t1872 - t1922) * t2083;
t2096 = sin(qJ(3,2));
t2102 = cos(qJ(3,2));
t2031 = t2102 * pkin(3);
t2261 = t2096 * t1989;
t2125 = 0.2e1 * qJ(3,2);
t2063 = sin(t2125);
t2317 = pkin(3) * t2063;
t2192 = t2108 * ((t2084 * t2031 + t2221) * t2103 - t2097 * (t2083 * t2031 + t2251)) / (t2317 / 0.2e1 + t2261);
t2000 = t2031 + pkin(2);
t1964 = t2021 + t2000;
t1954 = 0.1e1 / t1964;
t2077 = 0.1e1 / t2096;
t2279 = t1954 * t2077;
t2201 = ((t2000 * t2084 + t1979) * t2097 + t2103 * (t2000 * t2083 + t1991)) * t2279;
t2089 = legFrame(2,2);
t2028 = cos(t2089);
t2270 = t2028 * t2110;
t2025 = sin(t2089);
t2271 = t2025 * t2109;
t1876 = (-t2192 + (-t2270 + t2271) * t2201) * t2132;
t2311 = t1876 * pkin(3);
t2226 = t2096 * t2311;
t2054 = qJ(1,2) + pkin(7);
t1985 = t2089 + t2054;
t1986 = -t2089 + t2054;
t1930 = -sin(t1985) + sin(t1986);
t1933 = cos(t1986) + cos(t1985);
t2012 = sin(t2054);
t1897 = t1930 * t2109 + t1933 * t2110 + t2012 * t2331;
t2362 = t1897 * t1954;
t1866 = t2161 * t2362 - t2226;
t1955 = 0.1e1 / t1964 ^ 2;
t2278 = t1954 * t2091;
t2297 = t1897 / 0.2e1;
t1863 = -t2012 * t2278 + (t1930 * t2092 + t1933 * t2093) * t1954 / 0.2e1 + (-t1866 + t2226) * t1955 * t2297;
t1873 = t1876 ^ 2;
t1946 = g(1) * t2028 - t2025 * g(2);
t1923 = g(3) * t2103 + t1946 * t2097;
t2323 = pkin(1) * t1863;
t2353 = g(3) * t2097 - t1946 * t2103;
t2388 = (t2353 + 0.2e1 * t2323) * t2084 - t1873 * pkin(5) + t1863 * t2375 - (pkin(1) * t1873 - t1923) * t2083;
t2098 = sin(qJ(3,1));
t2104 = cos(qJ(3,1));
t2032 = t2104 * pkin(3);
t2002 = t2032 + pkin(2);
t1909 = (t2002 * t2084 + t1979) * t2099 + t2105 * (t2002 * t2083 + t1991);
t2090 = legFrame(1,2);
t2026 = sin(t2090);
t1965 = t2021 + t2002;
t1957 = 0.1e1 / t1965;
t2078 = 0.1e1 / t2098;
t2276 = t1957 * t2078;
t2193 = t2132 * t2276;
t1892 = t2026 * t2109 * t1909 * t2193;
t2029 = cos(t2090);
t2195 = t2029 * t2276;
t2260 = t2098 * t1989;
t2128 = 0.2e1 * qJ(3,1);
t2066 = sin(t2128);
t2316 = pkin(3) * t2066;
t2355 = (((t2084 * t2032 + t2221) * t2105 - t2099 * (t2083 * t2032 + t2251)) / (t2316 / 0.2e1 + t2260) * t2108 + t1909 * t2110 * t2195) * t2132;
t1877 = t1892 - t2355;
t2310 = t1877 * pkin(3);
t2225 = t2098 * t2310;
t2057 = qJ(1,1) + pkin(7);
t1987 = t2090 + t2057;
t1988 = -t2090 + t2057;
t1931 = -sin(t1987) + sin(t1988);
t1934 = cos(t1988) + cos(t1987);
t2013 = sin(t2057);
t1898 = t1931 * t2109 + t1934 * t2110 + t2013 * t2331;
t2361 = t1898 * t1957;
t1867 = t2161 * t2361 - t2225;
t1958 = 0.1e1 / t1965 ^ 2;
t2275 = t1957 * t2091;
t2296 = t1898 / 0.2e1;
t1864 = -t2013 * t2275 + (t1931 * t2092 + t1934 * t2093) * t1957 / 0.2e1 + (-t1867 + t2225) * t1958 * t2296;
t1874 = t1877 ^ 2;
t1947 = g(1) * t2029 - t2026 * g(2);
t1924 = g(3) * t2105 + t1947 * t2099;
t2322 = pkin(1) * t1864;
t2352 = g(3) * t2099 - t1947 * t2105;
t2387 = (t2352 + 0.2e1 * t2322) * t2084 - t1874 * pkin(5) + t1864 * t2375 - (pkin(1) * t1874 - t1924) * t2083;
t2386 = (t2192 / 0.6e1 + (t2270 / 0.6e1 - t2271 / 0.6e1) * t2201) * t2132;
t2385 = (t2192 / 0.4e1 + (t2270 / 0.4e1 - t2271 / 0.4e1) * t2201) * t2131 * t2132;
t2384 = (t2192 / 0.3e1 + (t2270 / 0.3e1 - t2271 / 0.3e1) * t2201) * t2132;
t2383 = (t2192 / 0.2e1 + (t2270 / 0.2e1 - t2271 / 0.2e1) * t2201) * t2132;
t2382 = -0.2e1 * t1892 + 0.2e1 * t2355;
t1861 = t2352 + t2322;
t1860 = t2353 + t2323;
t1859 = t2354 + t2324;
t2374 = 0.4e1 * pkin(2);
t2306 = 0.2e1 * pkin(3);
t2330 = 0.2e1 * t2111;
t2373 = MDP(1) / 0.2e1;
t2372 = MDP(2) / 0.2e1;
t2371 = MDP(3) / 0.2e1;
t2370 = MDP(5) / 0.2e1;
t2369 = MDP(6) / 0.2e1;
t2368 = MDP(7) / 0.2e1;
t2367 = MDP(8) / 0.2e1;
t2366 = MDP(10) / 0.2e1;
t2365 = MDP(11) / 0.2e1;
t2363 = MDP(4) * pkin(1) / 0.2e1;
t2274 = t1999 * t2095;
t1901 = (t2259 + t2274) * t2084 + t1948 + t1999 * t2266;
t2360 = t1901 * t1951;
t2273 = t2000 * t2097;
t1903 = (t2258 + t2273) * t2084 + t1949 + t2000 * t2265;
t2359 = t1903 * t1954;
t2272 = t2002 * t2099;
t1905 = (t2257 + t2272) * t2084 + t1950 + t2002 * t2264;
t2295 = t1905 * t1957;
t2358 = t1952 * t2100;
t2357 = t1955 * t2102;
t2356 = t1958 * t2104;
t2119 = 0.2e1 * pkin(7);
t2040 = cos(t2119);
t2134 = pkin(1) ^ 2;
t2006 = t2134 * t2040;
t2348 = -t2006 - t2131 / 0.2e1;
t2342 = -0.2e1 * pkin(1);
t2341 = -0.2e1 * pkin(2);
t1890 = t1954 * t2297;
t1889 = t2134 * t1890;
t2228 = pkin(1) * t1991;
t2039 = sin(t2119);
t2252 = t2134 * t2039;
t2184 = -0.2e1 * t2228 + t2252;
t1982 = -t2111 + t2321;
t2319 = pkin(2) * t1982;
t1918 = t2184 + 0.2e1 * t2319;
t2235 = pkin(2) * t2021;
t2114 = 0.2e1 * t2133;
t2244 = t2114 + t2134;
t1941 = 0.4e1 * t2235 + t2006 + t2244;
t2043 = pkin(7) + qJ(3,2);
t1993 = 0.2e1 * t2043;
t2048 = -pkin(7) + qJ(3,2);
t1995 = 0.2e1 * t2048;
t2007 = sin(t2043);
t2009 = sin(t2048);
t2042 = pkin(7) + t2125;
t2014 = cos(t2042);
t2015 = cos(t2043);
t2047 = -pkin(7) + t2125;
t2017 = cos(t2047);
t2018 = cos(t2048);
t2124 = 0.3e1 * qJ(3,2);
t2041 = pkin(7) + t2124;
t2046 = -pkin(7) + t2124;
t2052 = qJ(3,2) + t2119;
t2053 = qJ(3,2) - 0.2e1 * pkin(7);
t2123 = 0.4e1 * qJ(3,2);
t2061 = sin(t2123);
t2062 = sin(t2124);
t2071 = cos(t2124);
t2072 = cos(t2125);
t2130 = pkin(3) * t2131;
t2232 = 0.2e1 * t2252;
t2154 = -0.4e1 * t2228 + t2232;
t2082 = t2111 ^ 2;
t2162 = t1889 + (t2082 + t2390) * t1890;
t2250 = t2082 / 0.2e1 + t2134;
t2167 = 0.3e1 / 0.8e1 * t2131 + t2133 / 0.2e1 + t2250;
t2118 = -0.2e1 * t2134;
t2168 = -0.2e1 * t2006 - 0.4e1 * t2133 + t2118 - t2131;
t2176 = t2096 * t1890;
t2189 = -0.2e1 * t2133 + t2348;
t2191 = -t2132 / 0.4e1;
t2205 = t1903 * t2279;
t2220 = t1982 * t2306;
t2320 = pkin(1) * t2111;
t2236 = pkin(3) * t2320;
t2237 = 0.4e1 * t2311;
t2238 = pkin(3) * t2118;
t2246 = t2071 - t2102;
t2255 = t2131 * cos(t2123);
t2263 = t2091 * t2132;
t2293 = (t2012 * t2330 + cos(t2054) * t2341 + t2103 * t2342 + (-cos(qJ(1,2) - t2048) - cos(qJ(1,2) + t2043)) * pkin(3)) / (t2096 * t2375 + t2317 + (t2007 + t2009) * pkin(1));
t2305 = 0.4e1 * pkin(3);
t2327 = pkin(2) * pkin(3);
t2329 = -0.6e1 * t2131;
t2335 = -0.2e1 * t2084;
t2336 = -0.2e1 * t2131 - 0.2e1 * t1941;
t1834 = t2263 * t2293 + (t2131 * t1876 * t2071 * t2330 + t2232 * t2311 + (t2319 + (-t2021 - t2031 / 0.2e1) * t2111) * t2237 + (-0.8e1 * (t2131 / 0.4e1 + 0.3e1 / 0.2e1 * t2133 + t2250) * t2317 - t2130 * t2061) * t1890 + 0.4e1 * (cos(t2053) - cos(t2052)) * t2111 * t1889 + (sin(t1993) * t2238 + 0.4e1 * t2017 * t2236) * (t1890 - t2383) + (sin(t1995) * t2238 - 0.4e1 * t2014 * t2236) * (t1890 + t2383) + (-0.4e1 * (t2162 - t2385) * t2009 - 0.4e1 * (t2162 + t2385) * t2007 - 0.3e1 * ((t1890 + t2384) * sin(t2046) + (t1890 - t2384) * sin(t2041)) * t2131 - 0.12e2 * ((t1890 + t2386) * sin(t2047) + (t1890 - t2386) * sin(t2042)) * t2327) * pkin(1) + ((t2062 * t2329 + 0.8e1 * (t2018 - t2015) * t2320) * t1890 - 0.4e1 * (sin(t2053) + sin(t2052)) * t1889 + t2111 * t2072 * t2237 - 0.16e2 * t2167 * t2176) * pkin(2)) / (t2114 * t2072 + t2255 / 0.2e1 + (cos(t1995) / 0.2e1 + cos(t1993) / 0.2e1 + t2072 - 0.1e1) * t2134 + t2246 * pkin(2) * t2306 + ((t2014 + t2017 + t2335) * t2375 + (cos(t2046) + cos(t2041) - t2015 - t2018) * pkin(3)) * pkin(1) + t2189) * t2191 * t2362 - (t1866 * t2374 + (t2063 * t2336 - t2131 * t2061 + (-t1989 * t2062 - t2096 * t2021) * t2305) * t1876 + (-0.2e1 * t1918 * t2072 - t2246 * t2220 + t2154) * t1890) / (0.2e1 * t1941 * t2072 + t2255 - 0.4e1 * (t2031 + t2375) * t2021 + (-t2102 * pkin(2) + t1989 * t2071) * t2305 + t2168) * t1876 + (t2025 * t2092 - t2028 * t2093) * t2132 * t2205;
t2181 = t1876 * t1890;
t2325 = t2083 / 0.2e1;
t2328 = pkin(5) / 0.2e1;
t2339 = -0.2e1 * pkin(2) * t2181 - 0.2e1 * t1834 * t2328 - 0.2e1 * (t1834 * t2325 + t2084 * t2181) * pkin(1);
t1891 = t1957 * t2296;
t1870 = t1891 + t2382;
t1871 = t1891 - t2382;
t2045 = pkin(7) + qJ(3,1);
t1994 = 0.2e1 * t2045;
t2050 = -pkin(7) + qJ(3,1);
t1996 = 0.2e1 * t2050;
t2001 = t2032 + t2375;
t2008 = sin(t2045);
t2010 = sin(t2050);
t2044 = pkin(7) + t2128;
t2049 = -pkin(7) + t2128;
t2127 = 0.3e1 * qJ(3,1);
t2055 = t2127 + pkin(7);
t2056 = t2127 - pkin(7);
t2126 = 0.4e1 * qJ(3,1);
t2064 = sin(t2126);
t2065 = sin(t2127);
t2074 = cos(t2127);
t2075 = cos(t2128);
t2117 = 0.2e1 * t2134;
t2229 = pkin(1) * t1992;
t2245 = t2082 + t2134;
t2145 = -0.8e1 * (t2245 + t2390) * t2021 - 0.8e1 * (t2167 - t2229) * t2375 + 0.8e1 * (-pkin(2) * t2040 + t2039 * t2111) * t2134;
t2166 = -t2134 + t2189;
t2188 = pkin(3) * (t2074 - t2104);
t2190 = cos(t2044) + cos(t2049) + t2335;
t2233 = t1989 * t2329;
t2234 = -0.2e1 * t1982 * t2131;
t1980 = -0.2e1 * t2229;
t2240 = -0.4e1 * pkin(3) * (0.6e1 * t2235 + t1980 + t2117 + t2113 + t2082 - t2348);
t2254 = t2131 * cos(t2126);
t2292 = (t2013 * t2330 + cos(t2057) * t2341 + t2105 * t2342 + (-cos(qJ(1,1) - t2050) - cos(qJ(1,1) + t2045)) * pkin(3)) / (t2098 * t2375 + t2316 + (t2008 + t2010) * pkin(1));
t1837 = t2263 * t2292 + ((t2074 * t2234 + (-t1918 * t2075 + t1982 * t2001 + t2184) * t2306) * t1877 + (-t2064 * t2130 + t2065 * t2233 + t2066 * t2240 + t2145 * t2098) * t1891) / (t1941 * t2075 + t2254 / 0.2e1 - 0.2e1 * t2001 * t2021 + (-t2104 * pkin(2) + t1989 * t2074) * t2306 + t2166) * t2191 * t2361 - (t1867 * t2374 + ((t1891 - t1877) * sin(t1996) - (t1891 + t1877) * sin(t1994)) * t2134 + (-0.2e1 * (t2131 + t2244) * t2066 - 0.4e1 * t2065 * t2327 - t2131 * t2064) * t1877 + (t2232 + (t2075 * t2374 + 0.2e1 * t2188) * t2111) * t1891 + ((sin(t2049) * t1870 - sin(t2044) * t1871) * t2375 + t2190 * t1891 * t2330 + ((-sin(t2055) - t2010) * t1871 + (sin(t2056) + t2008) * t1870) * pkin(3)) * pkin(1)) / ((t2117 + 0.4e1 * t2133) * t2075 + t2254 + (cos(t1996) + cos(t1994)) * t2134 + t2188 * t2374 + (t2190 * t2374 + (cos(t2056) + cos(t2055) - cos(t2050) - cos(t2045)) * t2306) * pkin(1) + t2168) * t1877 + (t2026 * t2092 - t2029 * t2093) * t1905 * t2193;
t2180 = t1877 * t1891;
t2338 = -0.2e1 * pkin(2) * t2180 - 0.2e1 * t1837 * t2328 - 0.2e1 * (t1837 * t2325 + t2084 * t2180) * pkin(1);
t1998 = t2030 + t2375;
t2120 = 0.4e1 * qJ(3,3);
t2058 = sin(t2120);
t2121 = 0.3e1 * qJ(3,3);
t2059 = sin(t2121);
t2068 = cos(t2121);
t2150 = pkin(3) * (-pkin(2) * t2100 + t1989 * t2068);
t2207 = t1901 * t2282;
t2208 = t1951 * t2298;
t2230 = t1998 * t2021;
t2256 = t2131 * cos(t2120);
t2069 = cos(t2122);
t2284 = t1941 * t2069;
t2291 = t1918 * t2069;
t2242 = pkin(7) + qJ(3,3);
t2243 = -pkin(7) + qJ(3,3);
t2294 = (t2011 * t2330 + cos(t2051) * t2341 + t2101 * t2342 + (-cos(qJ(1,3) - t2243) - cos(qJ(1,3) + t2242)) * pkin(3)) / (t2094 * t2375 + t2318 + (sin(t2242) + sin(t2243)) * pkin(1));
t1840 = -(t1865 * t2374 + (t2060 * t2336 - t2131 * t2058 + (-t1989 * t2059 - t2094 * t2021) * t2305) * t1875 + (-0.2e1 * t2291 + (-t2068 + t2100) * t2220 + t2154) * t2208) / (0.4e1 * t2150 + t2168 - 0.4e1 * t2230 + t2256 + 0.2e1 * t2284) * t1875 + (t2091 * t2294 - ((t2068 * t2234 + (t1982 * t1998 + t2184 - t2291) * t2306) * t1875 + (-t2058 * t2130 + t2059 * t2233 + t2060 * t2240 + t2145 * t2094) * t2208) / (t2284 + t2256 / 0.2e1 - 0.2e1 * t2230 + 0.2e1 * t2150 + t2166) * t2208 / 0.2e1 + (t2024 * t2092 - t2027 * t2093) * t2207) * t2132;
t2182 = t1875 * t2208;
t2337 = -0.2e1 * pkin(2) * t2182 - 0.2e1 * t1840 * t2328 - 0.2e1 * (t1840 * t2325 + t2084 * t2182) * pkin(1);
t2334 = 0.2e1 * t2100;
t2333 = 0.2e1 * t2102;
t2332 = 0.2e1 * t2104;
t2315 = pkin(3) * t2094;
t2314 = pkin(3) * t2096;
t2313 = pkin(3) * t2098;
t2309 = MDP(5) / 0.4e1;
t2304 = t1862 * t2094;
t2303 = t1863 * t2096;
t2302 = t1864 * t2098;
t1893 = t1896 ^ 2;
t2301 = t1893 * t1952;
t1894 = t1897 ^ 2;
t2300 = t1894 * t1955;
t1895 = t1898 ^ 2;
t2299 = t1895 * t1958;
t2290 = t1929 * t1951;
t2289 = t1930 * t1954;
t2288 = t1931 * t1957;
t2287 = t1932 * t1951;
t2286 = t1933 * t1954;
t2285 = t1934 * t1957;
t2283 = t1951 * t2011;
t2280 = t1954 * t2012;
t2277 = t1957 * t2013;
t2269 = t2076 * t2100;
t2268 = t2077 * t2102;
t2267 = t2078 * t2104;
t2239 = t1989 * t2306;
t2079 = t2100 ^ 2;
t2224 = pkin(3) * (t2084 * t2095 + t2266) * t2079;
t2080 = t2102 ^ 2;
t2223 = pkin(3) * (t2084 * t2097 + t2265) * t2080;
t2081 = t2104 ^ 2;
t2222 = (t2084 * t2099 + t2264) * t2081 * pkin(3);
t2219 = t1862 * t2360;
t2218 = t1863 * t2359;
t1881 = -t2024 * t2224 + (-t2393 * t2024 + t2027 * t2315) * t2100 + t2027 * t2262;
t2217 = t1881 * t2282;
t1882 = t2027 * t2224 + (t2024 * t2315 + t2393 * t2027) * t2100 + t2024 * t2262;
t2216 = t1882 * t2282;
t1883 = -t2025 * t2223 + (-t2392 * t2025 + t2028 * t2314) * t2102 + t2028 * t2261;
t2215 = t1883 * t2279;
t1884 = t2028 * t2223 + (t2025 * t2314 + t2392 * t2028) * t2102 + t2025 * t2261;
t2214 = t1884 * t2279;
t1885 = -t2026 * t2222 + (-t2391 * t2026 + t2029 * t2313) * t2104 + t2029 * t2260;
t2213 = t1885 * t2276;
t1886 = t2029 * t2222 + (t2026 * t2313 + t2391 * t2029) * t2104 + t2026 * t2260;
t2212 = t1886 * t2276;
t2211 = t2301 / 0.4e1;
t2210 = t2300 / 0.4e1;
t2209 = t2299 / 0.4e1;
t1902 = (t1999 * t2101 - t2095 * t2111) * t2084 + t1979 * t2101 - t2083 * t2274;
t2206 = t1902 * t2269;
t1904 = (t2000 * t2103 - t2097 * t2111) * t2084 + t1979 * t2103 - t2083 * t2273;
t2204 = t1904 * t2268;
t2203 = t2026 * t2295;
t1906 = (t2002 * t2105 - t2099 * t2111) * t2084 + t1979 * t2105 - t2083 * t2272;
t2202 = t1906 * t2267;
t2200 = t2100 * t2294;
t2199 = t2102 * t2293;
t2198 = t2104 * t2292;
t2197 = t1951 * t2269;
t2196 = t1954 * t2268;
t2194 = t1957 * t2267;
t2179 = t1893 * t2358 * t2360;
t2178 = t1894 * t2357 * t2359;
t2177 = t1895 * t2356 * t2295;
t2175 = t2024 * t2207;
t2174 = t2027 * t2207;
t2173 = t2025 * t2205;
t2172 = t2028 * t2205;
t2170 = t2078 * t2203;
t2169 = t1905 * t2195;
t2160 = t1862 * t1901 * t2197;
t2159 = t1863 * t1903 * t2196;
t2158 = t1864 * t1905 * t2194;
t1925 = t1980 + t2133 + 0.2e1 * t2235 + t2245;
t1880 = (-0.2e1 * t2081 + 0.1e1) * t2209;
t1879 = (-0.2e1 * t2080 + 0.1e1) * t2210;
t1878 = (-0.2e1 * t2079 + 0.1e1) * t2211;
t1858 = (t2180 * t2332 + t2302) * t2098;
t1857 = (t2181 * t2333 + t2303) * t2096;
t1856 = (t2182 * t2334 + t2304) * t2094;
t1855 = t2302 * t2332 + (0.4e1 * t2081 - 0.2e1) * t2180;
t1854 = t2303 * t2333 + (0.4e1 * t2080 - 0.2e1) * t2181;
t1853 = t2304 * t2334 + (0.4e1 * t2079 - 0.2e1) * t2182;
t1852 = -t2026 * g(1) - t2029 * g(2) + (t1906 * t2104 * t2275 + (-t1982 * t2225 + (t2081 * t2131 + t2104 * t2239 + t1925) * t1891) * t2296 * t2356) * t2078 + (t1886 * t2093 + t1885 * t2092 - ((t1982 * t2098 * t1891 - t2310) * t2104 - t1877 * t1989) * t2310) * t2276;
t1851 = -t2025 * g(1) - t2028 * g(2) + (t1904 * t2102 * t2278 + (-t1982 * t2226 + (t2080 * t2131 + t2102 * t2239 + t1925) * t1890) * t2297 * t2357) * t2077 + (t1884 * t2093 + t1883 * t2092 - ((t1982 * t2176 - t2311) * t2102 - t1876 * t1989) * t2311) * t2279;
t1850 = -t2024 * g(1) - t2027 * g(2) + (t1902 * t2100 * t2281 + (-t1982 * t2227 + (t2079 * t2131 + t2100 * t2239 + t1925) * t2208) * t2298 * t2358) * t2076 + (t1882 * t2093 + t1881 * t2092 - ((t1982 * t2094 * t2208 - t2312) * t2100 - t1875 * t1989) * t2312) * t2282;
t1849 = (pkin(1) * t2209 + t1924) * t2084 - t1861 * t2083 + pkin(2) * t2209 - t1864 * pkin(5);
t1848 = (pkin(1) * t2210 + t1923) * t2084 - t1860 * t2083 + pkin(2) * t2210 - t1863 * pkin(5);
t1847 = (pkin(1) * t2211 + t1922) * t2084 - t1859 * t2083 + pkin(2) * t2211 - t1862 * pkin(5);
t1846 = t1849 * t2104 - t1852 * t2098;
t1845 = t1849 * t2098 + t1852 * t2104;
t1844 = t1848 * t2102 - t1851 * t2096;
t1843 = t1848 * t2096 + t1851 * t2102;
t1842 = t1847 * t2100 - t1850 * t2094;
t1841 = t1847 * t2094 + t1850 * t2100;
t1839 = t1840 * t2100 - t1872 * t2094;
t1838 = t1840 * t2094 + t1872 * t2100;
t1836 = t1837 * t2104 - t1874 * t2098;
t1835 = t1837 * t2098 + t1874 * t2104;
t1833 = t1834 * t2102 - t1873 * t2096;
t1832 = t1834 * t2096 + t1873 * t2102;
t1830 = t2094 * t2337 + t2389 * t2100;
t1829 = -t2389 * t2094 + t2100 * t2337;
t1827 = t2098 * t2338 + t2387 * t2104;
t1826 = -t2387 * t2098 + t2104 * t2338;
t1824 = t2096 * t2339 + t2388 * t2102;
t1823 = -t2388 * t2096 + t2102 * t2339;
t1 = [(t1850 * t2216 + t1851 * t2214 + t1852 * t2212) * MDP(4) + (t1833 * t2214 + t1836 * t2212 + t1839 * t2216) * MDP(10) + (-t1832 * t2214 - t1835 * t2212 - t1838 * t2216) * MDP(11) + (t2093 - g(1)) * MDP(12) + ((-t1878 * t2174 - t1879 * t2172 - t1880 * t2169) * MDP(6) + (-t1864 * t2029 * t2295 - t2027 * t2219 - t2028 * t2218) * MDP(7) + (-t2027 * t2160 - t2028 * t2159 - t2029 * t2158) * MDP(8) + (-t1834 * t2172 - t1837 * t2169 - t1840 * t2174) * MDP(9) + (-t1841 * t2174 - t1843 * t2172 - t1845 * t2169) * MDP(10) + (-t1842 * t2174 - t1844 * t2172 - t1846 * t2169) * MDP(11) + (t2027 * t2179 + t2028 * t2178 + t2029 * t2177) * t2309) * t2132 + (t1862 * t2287 + t1863 * t2286 + t1864 * t2285) * t2373 + (t2285 * t2352 + t2286 * t2353 + t2287 * t2354) * t2372 + (t1922 * t2287 + t1923 * t2286 + t1924 * t2285) * t2371 + (t1856 * t2287 + t1857 * t2286 + t1858 * t2285) * t2370 + (t1853 * t2287 + t1854 * t2286 + t1855 * t2285) * t2369 + (t1832 * t2286 + t1835 * t2285 + t1838 * t2287) * t2368 + (t1833 * t2286 + t1836 * t2285 + t1839 * t2287) * t2367 + (t1824 * t2286 + t1827 * t2285 + t1830 * t2287) * t2366 + (t1823 * t2286 + t1826 * t2285 + t1829 * t2287) * t2365 + (t1859 * t2287 + t1860 * t2286 + t1861 * t2285) * t2363; (t1850 * t2217 + t1851 * t2215 + t1852 * t2213) * MDP(4) + (t1833 * t2215 + t1836 * t2213 + t1839 * t2217) * MDP(10) + (-t1832 * t2215 - t1835 * t2213 - t1838 * t2217) * MDP(11) + (t2092 - g(2)) * MDP(12) + ((t1878 * t2175 + t1879 * t2173 + t1880 * t2170) * MDP(6) + (t1864 * t2203 + t2024 * t2219 + t2025 * t2218) * MDP(7) + (t2024 * t2160 + t2025 * t2159 + t2026 * t2158) * MDP(8) + (t1834 * t2173 + t1837 * t2170 + t1840 * t2175) * MDP(9) + (t1841 * t2175 + t1843 * t2173 + t1845 * t2170) * MDP(10) + (t1842 * t2175 + t1844 * t2173 + t1846 * t2170) * MDP(11) + (-t2024 * t2179 - t2025 * t2178 - t2026 * t2177) * t2309) * t2132 + (t1862 * t2290 + t1863 * t2289 + t1864 * t2288) * t2373 + (t2288 * t2352 + t2289 * t2353 + t2290 * t2354) * t2372 + (t1922 * t2290 + t1923 * t2289 + t1924 * t2288) * t2371 + (t1856 * t2290 + t1857 * t2289 + t1858 * t2288) * t2370 + (t1853 * t2290 + t1854 * t2289 + t1855 * t2288) * t2369 + (t1832 * t2289 + t1835 * t2288 + t1838 * t2290) * t2368 + (t1833 * t2289 + t1836 * t2288 + t1839 * t2290) * t2367 + (t1824 * t2289 + t1827 * t2288 + t1830 * t2290) * t2366 + (t1823 * t2289 + t1826 * t2288 + t1829 * t2290) * t2365 + (t1859 * t2290 + t1860 * t2289 + t1861 * t2288) * t2363; (-t1862 * t2283 - t1863 * t2280 - t1864 * t2277) * MDP(1) + (-t2277 * t2352 - t2280 * t2353 - t2283 * t2354) * MDP(2) + (-t1922 * t2283 - t1923 * t2280 - t1924 * t2277) * MDP(3) + (t1850 * t1902 * t2197 + t1851 * t1904 * t2196 + t1852 * t1906 * t2194 + (-t1859 * t2283 - t1860 * t2280 - t1861 * t2277) * pkin(1)) * MDP(4) + (-t1856 * t2283 - t1857 * t2280 - t1858 * t2277 + (-t2094 * t2200 * t2301 - t2096 * t2199 * t2300 - t2098 * t2198 * t2299) * t2132 / 0.4e1) * MDP(5) + (-t1853 * t2283 - t1854 * t2280 - t1855 * t2277 + (t1878 * t2294 + t1879 * t2293 + t1880 * t2292) * t2132) * MDP(6) + (-t1832 * t2280 - t1835 * t2277 - t1838 * t2283 + (t2292 * t2302 + t2293 * t2303 + t2294 * t2304) * t2132) * MDP(7) + (-t1833 * t2280 - t1836 * t2277 - t1839 * t2283 + (t1862 * t2200 + t1863 * t2199 + t1864 * t2198) * t2132) * MDP(8) + (t1834 * t2293 + t1837 * t2292 + t1840 * t2294) * t2132 * MDP(9) + ((-t1827 * t2013 + t1836 * t2202) * t1957 + (-t1824 * t2012 + t1833 * t2204) * t1954 + (-t1830 * t2011 + t1839 * t2206) * t1951 + (t1841 * t2294 + t1843 * t2293 + t1845 * t2292) * t2132) * MDP(10) + ((-t1826 * t2013 - t1835 * t2202) * t1957 + (-t1823 * t2012 - t1832 * t2204) * t1954 + (-t1829 * t2011 - t1838 * t2206) * t1951 + (t1842 * t2294 + t1844 * t2293 + t1846 * t2292) * t2132) * MDP(11) + (t2091 - g(3)) * MDP(12);];
tauX  = t1;
