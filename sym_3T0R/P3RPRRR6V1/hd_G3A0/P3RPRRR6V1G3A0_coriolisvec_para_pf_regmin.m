% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR6V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x12]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:43
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR6V1G3A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR6V1G3A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:42:21
% EndTime: 2020-08-06 18:42:32
% DurationCPUTime: 10.80s
% Computational Cost: add. (72621->497), mult. (84576->843), div. (11769->22), fcn. (59823->84), ass. (0->419)
t1153 = sin(pkin(7));
t1176 = -pkin(6) - pkin(5);
t1082 = t1176 * t1153;
t1068 = -t1082 + pkin(1);
t1166 = cos(qJ(1,3));
t1037 = t1068 * t1166;
t1154 = cos(pkin(7));
t1160 = sin(qJ(1,3));
t1359 = t1160 * t1176;
t1364 = t1153 * t1160;
t1474 = t1037 - pkin(2) * t1364 + (pkin(2) * t1166 - t1359) * t1154;
t1168 = cos(qJ(1,2));
t1038 = t1068 * t1168;
t1162 = sin(qJ(1,2));
t1356 = t1162 * t1176;
t1363 = t1153 * t1162;
t1473 = t1038 - pkin(2) * t1363 + (pkin(2) * t1168 - t1356) * t1154;
t1170 = cos(qJ(1,1));
t1039 = t1068 * t1170;
t1164 = sin(qJ(1,1));
t1353 = t1164 * t1176;
t1362 = t1153 * t1164;
t1472 = t1039 - pkin(2) * t1362 + (pkin(2) * t1170 - t1353) * t1154;
t1159 = sin(qJ(3,3));
t1165 = cos(qJ(3,3));
t1360 = t1159 * t1165;
t1111 = t1165 * pkin(3);
t1087 = t1111 + pkin(2);
t1104 = t1154 * pkin(1);
t1052 = t1104 + t1087;
t1040 = 0.1e1 / t1052;
t1041 = 0.1e1 / t1052 ^ 2;
t1122 = qJ(1,3) + pkin(7);
t1156 = legFrame(3,2);
t1072 = t1156 + t1122;
t1073 = -t1156 + t1122;
t1027 = -sin(t1072) - sin(t1073);
t1030 = cos(t1073) - cos(t1072);
t1097 = cos(t1122);
t1174 = xDP(2);
t1175 = xDP(1);
t1173 = xDP(3);
t1423 = -2 * t1173;
t996 = t1027 * t1175 + t1030 * t1174 + t1097 * t1423;
t1400 = t996 / 0.2e1;
t1308 = t1041 * t1400;
t1415 = pkin(3) * t1159;
t1019 = t1087 * t1154 + t1068;
t1081 = t1176 * t1154;
t1023 = t1087 * t1153 + t1081;
t1105 = sin(t1156);
t1108 = cos(t1156);
t1197 = 0.1e1 / pkin(3);
t1079 = t1104 + pkin(2);
t1361 = t1159 * t1079;
t1144 = 0.1e1 / t1159;
t1386 = t1040 * t1144;
t1187 = 0.2e1 * qJ(3,3);
t1127 = sin(t1187);
t1418 = pkin(3) * t1127;
t978 = (t1173 * (t1019 * t1160 + t1023 * t1166) / (t1418 / 0.2e1 + t1361) + (t1105 * t1174 - t1108 * t1175) * (t1019 * t1166 - t1023 * t1160) * t1386) * t1197;
t1338 = t978 * t1415;
t1103 = t1153 * pkin(1);
t1254 = -t1176 / 0.2e1 + t1103 / 0.2e1;
t1435 = t1040 * t996;
t964 = t1254 * t1435 - t1338;
t961 = (-t964 + t1338) * t1308;
t1412 = t1040 * t961;
t1273 = t1360 * t1412;
t1149 = t1165 ^ 2;
t1100 = 0.2e1 * t1149 - 0.1e1;
t1322 = t1041 * t978 * t996;
t1282 = t1100 * t1322;
t1471 = t1282 / 0.2e1 + t1273;
t1161 = sin(qJ(3,2));
t1167 = cos(qJ(3,2));
t1357 = t1161 * t1167;
t1112 = t1167 * pkin(3);
t1089 = t1112 + pkin(2);
t1053 = t1104 + t1089;
t1043 = 0.1e1 / t1053;
t1044 = 0.1e1 / t1053 ^ 2;
t1414 = pkin(3) * t1161;
t1020 = t1089 * t1154 + t1068;
t1024 = t1089 * t1153 + t1081;
t1157 = legFrame(2,2);
t1106 = sin(t1157);
t1109 = cos(t1157);
t1358 = t1161 * t1079;
t1146 = 0.1e1 / t1161;
t1384 = t1043 * t1146;
t1190 = 0.2e1 * qJ(3,2);
t1130 = sin(t1190);
t1417 = pkin(3) * t1130;
t979 = (t1173 * (t1020 * t1162 + t1024 * t1168) / (t1417 / 0.2e1 + t1358) + (t1106 * t1174 - t1109 * t1175) * (t1020 * t1168 - t1024 * t1162) * t1384) * t1197;
t1337 = t979 * t1414;
t1123 = qJ(1,2) + pkin(7);
t1074 = t1157 + t1123;
t1075 = -t1157 + t1123;
t1028 = -sin(t1074) - sin(t1075);
t1031 = cos(t1075) - cos(t1074);
t1098 = cos(t1123);
t998 = t1028 * t1175 + t1031 * t1174 + t1098 * t1423;
t1398 = t998 / 0.2e1;
t1434 = t1043 * t998;
t966 = t1254 * t1434 - t1337;
t963 = (-t966 + t1337) * t1044 * t1398;
t1410 = t1043 * t963;
t1271 = t1357 * t1410;
t1150 = t1167 ^ 2;
t1101 = 0.2e1 * t1150 - 0.1e1;
t1321 = t1044 * t979 * t998;
t1281 = t1101 * t1321;
t1470 = t1281 / 0.2e1 + t1271;
t1163 = sin(qJ(3,1));
t1169 = cos(qJ(3,1));
t1354 = t1163 * t1169;
t1113 = t1169 * pkin(3);
t1091 = t1113 + pkin(2);
t1054 = t1104 + t1091;
t1046 = 0.1e1 / t1054;
t1047 = 0.1e1 / t1054 ^ 2;
t1413 = pkin(3) * t1163;
t1021 = t1091 * t1154 + t1068;
t1025 = t1091 * t1153 + t1081;
t1158 = legFrame(1,2);
t1107 = sin(t1158);
t1110 = cos(t1158);
t1355 = t1163 * t1079;
t1148 = 0.1e1 / t1163;
t1382 = t1046 * t1148;
t1193 = 0.2e1 * qJ(3,1);
t1133 = sin(t1193);
t1416 = pkin(3) * t1133;
t980 = (t1173 * (t1021 * t1164 + t1025 * t1170) / (t1416 / 0.2e1 + t1355) + (t1107 * t1174 - t1110 * t1175) * (t1021 * t1170 - t1025 * t1164) * t1382) * t1197;
t1336 = t980 * t1413;
t1124 = qJ(1,1) + pkin(7);
t1076 = t1158 + t1124;
t1077 = -t1158 + t1124;
t1029 = -sin(t1076) - sin(t1077);
t1032 = cos(t1077) - cos(t1076);
t1099 = cos(t1124);
t997 = t1029 * t1175 + t1032 * t1174 + t1099 * t1423;
t1399 = t997 / 0.2e1;
t1433 = t1046 * t997;
t965 = t1254 * t1433 - t1336;
t962 = (-t965 + t1336) * t1047 * t1399;
t1408 = t1046 * t962;
t1269 = t1354 * t1408;
t1151 = t1169 ^ 2;
t1102 = 0.2e1 * t1151 - 0.1e1;
t1320 = t1047 * t980 * t997;
t1280 = t1102 * t1320;
t1469 = t1280 / 0.2e1 + t1269;
t1468 = 0.2e1 * t978;
t1467 = -t1040 / 0.2e1;
t1466 = -t1043 / 0.2e1;
t1465 = -t1046 / 0.2e1;
t1251 = t1322 * t1360;
t1310 = t1159 ^ 2 * t1412;
t1461 = t1310 / 0.2e1 + t1251 / 0.2e1;
t1250 = t1321 * t1357;
t1307 = t1161 ^ 2 * t1410;
t1460 = t1307 / 0.2e1 + t1250 / 0.2e1;
t1249 = t1320 * t1354;
t1304 = t1163 ^ 2 * t1408;
t1459 = t1304 / 0.2e1 + t1249 / 0.2e1;
t1194 = 0.2e1 * pkin(2);
t1458 = 0.4e1 * pkin(2);
t1422 = 0.2e1 * t1176;
t1457 = t1197 / 0.4e1;
t977 = t980 ^ 2;
t1401 = t1169 * t977;
t1078 = t1103 + pkin(5);
t1071 = pkin(6) + t1078;
t1090 = t1113 + t1194;
t1191 = 0.4e1 * qJ(3,1);
t1131 = sin(t1191);
t1192 = 0.3e1 * qJ(3,1);
t1132 = sin(t1192);
t1141 = cos(t1192);
t1196 = pkin(3) ^ 2;
t1195 = pkin(3) * t1196;
t1184 = 0.2e1 * pkin(7);
t1114 = sin(t1184);
t1115 = cos(t1184);
t1152 = t1176 ^ 2;
t1198 = pkin(2) ^ 2;
t1178 = 0.3e1 * t1198;
t1199 = pkin(1) ^ 2;
t1327 = pkin(1) * t1082;
t1348 = t1152 + t1199;
t1210 = -0.8e1 * (0.3e1 / 0.4e1 * t1196 + t1178 + t1348) * t1104 - 0.8e1 * (-t1327 + 0.3e1 / 0.8e1 * t1196 + t1199 + t1198 / 0.2e1 + t1152 / 0.2e1) * t1194 + 0.8e1 * (-pkin(2) * t1115 + t1114 * t1176) * t1199;
t1225 = pkin(3) * (-pkin(2) * t1169 + t1079 * t1141);
t1326 = pkin(1) * t1081;
t1349 = t1199 * t1114;
t1330 = 0.2e1 * t1349;
t1230 = -0.4e1 * t1326 + t1330;
t1347 = 0.2e1 * t1198 + t1199;
t1092 = t1199 * t1115;
t1432 = -t1092 - t1196 / 0.2e1;
t1259 = t1432 - t1347;
t1260 = -0.2e1 * t1092 - 0.4e1 * t1198 - 0.2e1 * t1199 - t1196;
t1283 = -0.2e1 * t1326 + t1349;
t1292 = -t1197 / 0.4e1;
t1396 = 0.2e1 * pkin(3);
t1299 = t1071 * t1396;
t1302 = t1046 * t1399;
t1328 = t1090 * t1104;
t1331 = -0.6e1 * t1079 * t1196;
t1335 = -0.2e1 * t1071 * t1196;
t1069 = -0.2e1 * t1327;
t1182 = 0.2e1 * t1199;
t1341 = pkin(2) * t1104;
t1429 = -0.4e1 * pkin(3);
t1342 = (0.6e1 * t1341 + t1069 + t1182 + t1178 + t1152 - t1432) * t1429;
t1350 = t1196 * cos(t1191);
t1033 = 0.4e1 * t1341 + t1092 + t1347;
t1142 = cos(t1193);
t1388 = t1033 * t1142;
t1017 = t1071 * t1194 + t1283;
t1390 = t1017 * t1142;
t1395 = 0.4e1 * pkin(3);
t1425 = -0.2e1 * t1196 - 0.2e1 * t1033;
t951 = ((t1141 * t1335 + (t1071 * t1090 + t1283 - t1390) * t1396) * t980 + (-t1131 * t1195 + t1132 * t1331 + t1133 * t1342 + t1210 * t1163) * t1302) / (t1388 + t1350 / 0.2e1 - 0.2e1 * t1328 + 0.2e1 * t1225 + t1259) * t1292 * t1433 - (t965 * t1458 + (t1133 * t1425 - t1196 * t1131 + (-t1079 * t1132 - t1163 * t1104) * t1395) * t980 + (-0.2e1 * t1390 + (-t1141 + t1169) * t1299 + t1230) * t1302) / (0.4e1 * t1225 + t1260 - 0.4e1 * t1328 + t1350 + 0.2e1 * t1388) * t980;
t1243 = t1163 * t951 + t1401;
t1456 = t1243 * t1046 / 0.2e1;
t976 = t979 ^ 2;
t1403 = t1167 * t976;
t1088 = t1112 + t1194;
t1188 = 0.4e1 * qJ(3,2);
t1128 = sin(t1188);
t1189 = 0.3e1 * qJ(3,2);
t1129 = sin(t1189);
t1138 = cos(t1189);
t1226 = pkin(3) * (-pkin(2) * t1167 + t1079 * t1138);
t1305 = t1043 * t1398;
t1329 = t1088 * t1104;
t1351 = t1196 * cos(t1188);
t1139 = cos(t1190);
t1389 = t1033 * t1139;
t1391 = t1017 * t1139;
t950 = ((t1138 * t1335 + (t1071 * t1088 + t1283 - t1391) * t1396) * t979 + (-t1128 * t1195 + t1129 * t1331 + t1130 * t1342 + t1210 * t1161) * t1305) / (t1389 + t1351 / 0.2e1 - 0.2e1 * t1329 + 0.2e1 * t1226 + t1259) * t1292 * t1434 - (t966 * t1458 + (t1130 * t1425 - t1196 * t1128 + (-t1079 * t1129 - t1161 * t1104) * t1395) * t979 + (-0.2e1 * t1391 + (-t1138 + t1167) * t1299 + t1230) * t1305) / (0.4e1 * t1226 + t1260 - 0.4e1 * t1329 + t1351 + 0.2e1 * t1389) * t979;
t1245 = t1161 * t950 + t1403;
t1455 = t1245 * t1043 / 0.2e1;
t975 = t978 ^ 2;
t1405 = t1165 * t975;
t1116 = pkin(7) + qJ(3,3);
t1083 = 0.2e1 * t1116;
t1117 = -pkin(7) + qJ(3,3);
t1084 = 0.2e1 * t1117;
t1086 = t1111 + t1194;
t1093 = sin(t1116);
t1094 = sin(t1117);
t1186 = 0.3e1 * qJ(3,3);
t1118 = t1186 + pkin(7);
t1119 = t1186 - pkin(7);
t1120 = t1187 + pkin(7);
t1121 = t1187 - pkin(7);
t1185 = 0.4e1 * qJ(3,3);
t1125 = sin(t1185);
t1126 = sin(t1186);
t1135 = cos(t1186);
t1136 = cos(t1187);
t1290 = pkin(3) * (t1135 - t1165);
t1291 = cos(t1120) + cos(t1121) - 0.2e1 * t1154;
t1352 = t1196 * cos(t1185);
t990 = t1040 * t1400;
t973 = -t1468 + t990;
t974 = t1468 + t990;
t945 = ((t1135 * t1335 + (-t1017 * t1136 + t1071 * t1086 + t1283) * t1396) * t978 + (-t1125 * t1195 + t1126 * t1331 + t1127 * t1342 + t1210 * t1159) * t990) / (t1033 * t1136 + t1352 / 0.2e1 - 0.2e1 * t1086 * t1104 + (-pkin(2) * t1165 + t1079 * t1135) * t1396 + t1259) * t1292 * t1435 - (t964 * t1458 + ((-t978 + t990) * sin(t1084) - (t978 + t990) * sin(t1083)) * t1199 + (-0.2e1 * (t1196 + t1347) * t1127 + pkin(2) * t1126 * t1429 - t1196 * t1125) * t978 + (t1330 + (t1136 * t1458 + 0.2e1 * t1290) * t1176) * t990 + (((-sin(t1118) - t1094) * t974 + (sin(t1119) + t1093) * t973) * pkin(3) + (sin(t1121) * t973 - sin(t1120) * t974) * t1194 + t1291 * t990 * t1422) * pkin(1)) / ((t1182 + 0.4e1 * t1198) * t1136 + t1352 + (cos(t1084) + cos(t1083)) * t1199 + t1290 * t1458 + (t1291 * t1458 + (cos(t1119) + cos(t1118) - cos(t1117) - cos(t1116)) * t1396) * pkin(1) + t1260) * t978;
t1247 = t1159 * t945 + t1405;
t1454 = t1247 * t1040 / 0.2e1;
t1402 = t1169 * t951;
t1244 = t1163 * t977 - t1402;
t1453 = t1244 * t1465;
t1404 = t1167 * t950;
t1246 = t1161 * t976 - t1404;
t1452 = t1246 * t1466;
t1406 = t1165 * t945;
t1248 = t1159 * t975 - t1406;
t1451 = t1248 * t1467;
t1270 = t1161 * t1305;
t1424 = 0.2e1 * t1079;
t1333 = t1167 * t1424;
t1377 = t1078 * t1167;
t1380 = t1078 * t1161;
t1427 = 0.2e1 * t979;
t1284 = -t963 * t1333 + t950 * t1380 + (t979 * t1377 / 0.2e1 + t1079 * t1270) * t1427;
t1447 = t1284 * t1466;
t1301 = t1167 * t1398;
t1287 = 0.2e1 * t963 * t1358 + t950 * t1377 + (t1043 * t1079 * t1301 - t979 * t1380 / 0.2e1) * t1427;
t1446 = t1287 * t1466;
t1268 = t1163 * t1302;
t1332 = t1169 * t1424;
t1376 = t1078 * t1169;
t1379 = t1078 * t1163;
t1426 = 0.2e1 * t980;
t1285 = -t962 * t1332 + t951 * t1379 + (t980 * t1376 / 0.2e1 + t1079 * t1268) * t1426;
t1445 = t1285 * t1465;
t1300 = t1169 * t1399;
t1286 = 0.2e1 * t962 * t1355 + t951 * t1376 + (t1046 * t1079 * t1300 - t980 * t1379 / 0.2e1) * t1426;
t1444 = t1286 * t1465;
t1272 = t1159 * t990;
t1375 = t1079 * t1165;
t1334 = 0.2e1 * t1375;
t1378 = t1078 * t1165;
t1381 = t1078 * t1159;
t1288 = -t961 * t1334 + t945 * t1381 + (t978 * t1378 / 0.2e1 + t1079 * t1272) * t1468;
t1443 = t1288 * t1467;
t1289 = 0.2e1 * t961 * t1361 + t945 * t1378 + (t990 * t1375 - t978 * t1381 / 0.2e1) * t1468;
t1442 = t1289 * t1467;
t1438 = t1408 / 0.2e1;
t1437 = t1410 / 0.2e1;
t1436 = t1412 / 0.2e1;
t1411 = t1041 * t996 ^ 2;
t1409 = t1044 * t998 ^ 2;
t1407 = t1047 * t997 ^ 2;
t1431 = 0.2e1 * pkin(1);
t1421 = t978 * pkin(3);
t1420 = t979 * pkin(3);
t1419 = t980 * pkin(3);
t1394 = (t1097 * t1422 + sin(t1122) * t1194 + t1160 * t1431 + (sin(qJ(1,3) - t1117) + sin(qJ(1,3) + t1116)) * pkin(3)) / (t1159 * t1194 + t1418 + (t1093 + t1094) * pkin(1));
t1343 = pkin(7) + qJ(3,2);
t1345 = -pkin(7) + qJ(3,2);
t1393 = (t1098 * t1422 + sin(t1123) * t1194 + t1162 * t1431 + (sin(qJ(1,2) - t1345) + sin(qJ(1,2) + t1343)) * pkin(3)) / (t1161 * t1194 + t1417 + (sin(t1343) + sin(t1345)) * pkin(1));
t1344 = pkin(7) + qJ(3,1);
t1346 = -pkin(7) + qJ(3,1);
t1392 = (t1099 * t1422 + sin(t1124) * t1194 + t1164 * t1431 + (sin(qJ(1,1) - t1346) + sin(qJ(1,1) + t1344)) * pkin(3)) / (t1163 * t1194 + t1416 + (sin(t1344) + sin(t1346)) * pkin(1));
t1387 = t1040 * t1097;
t1385 = t1043 * t1098;
t1383 = t1046 * t1099;
t1374 = t1079 / 0.4e1;
t1373 = t1087 * t1166;
t1372 = t1089 * t1168;
t1371 = t1091 * t1170;
t1370 = t1144 * t1149;
t1369 = t1144 * t1165;
t1368 = t1146 * t1150;
t1367 = t1146 * t1167;
t1366 = t1148 * t1151;
t1365 = t1148 * t1169;
t1325 = pkin(3) * (-t1154 * t1166 + t1364) * t1149;
t1324 = pkin(3) * (-t1154 * t1168 + t1363) * t1150;
t1323 = pkin(3) * (-t1154 * t1170 + t1362) * t1151;
t1000 = (-t1359 + t1373) * t1154 + t1037 - t1087 * t1364;
t1319 = t1000 * t1412;
t1318 = t1000 * t1040 * t1411;
t1002 = (-t1356 + t1372) * t1154 + t1038 - t1089 * t1363;
t1317 = t1002 * t1410;
t1316 = t1002 * t1043 * t1409;
t1004 = (-t1353 + t1371) * t1154 + t1039 - t1091 * t1362;
t1315 = t1004 * t1408;
t1314 = t1004 * t1046 * t1407;
t1313 = t961 * t1394;
t1312 = t963 * t1393;
t1311 = t962 * t1392;
t1018 = t1069 + t1198 + 0.2e1 * t1341 + t1348;
t958 = (t1165 * (-t1071 * t1338 + (pkin(3) * t1334 + t1149 * t1196 + t1018) * t990) * t1308 - ((t1071 * t1272 - t1421) * t1165 - t978 * t1079) * t1040 * t1421) * t1144;
t1309 = t958 * t1386;
t959 = ((-t1071 * t1337 + (pkin(3) * t1333 + t1150 * t1196 + t1018) * t1305) * t1044 * t1301 - ((t1071 * t1270 - t1420) * t1167 - t979 * t1079) * t1043 * t1420) * t1146;
t1306 = t959 * t1384;
t960 = ((-t1071 * t1336 + (pkin(3) * t1332 + t1151 * t1196 + t1018) * t1302) * t1047 * t1300 - ((t1071 * t1268 - t1419) * t1169 - t980 * t1079) * t1046 * t1419) * t1148;
t1303 = t960 * t1382;
t1298 = t1000 * t1386;
t1297 = t1002 * t1384;
t1296 = t1004 * t1382;
t1295 = t1040 * t1369;
t1294 = t1043 * t1367;
t1293 = t1046 * t1365;
t1279 = t1165 * t1318;
t1278 = t1167 * t1316;
t1277 = t1169 * t1314;
t1276 = t1394 * t1411;
t1275 = t1393 * t1409;
t1274 = t1392 * t1407;
t1267 = t1105 * t1298;
t1266 = t1108 * t1298;
t1265 = t1106 * t1297;
t1264 = t1109 * t1297;
t1263 = t1107 * t1296;
t1262 = t1110 * t1296;
t1242 = t1000 * t961 * t1295;
t1241 = t1144 * t1279;
t1240 = t1002 * t963 * t1294;
t1239 = t1146 * t1278;
t1238 = t1004 * t962 * t1293;
t1237 = t1148 * t1277;
t1236 = t1165 * t1276;
t1235 = t1167 * t1275;
t1234 = t1169 * t1274;
t1224 = t1040 * (-t975 * t1369 - t945);
t1223 = t1040 * (t945 * t1369 - t975);
t1222 = t1043 * (-t976 * t1367 - t950);
t1221 = t1043 * (t950 * t1367 - t976);
t1220 = t1046 * (-t977 * t1365 - t951);
t1219 = t1046 * (t951 * t1365 - t977);
t1209 = -t962 * t1383 - t963 * t1385 - t961 * t1387;
t1208 = t1027 * t1436 + t1028 * t1437 + t1029 * t1438;
t1207 = t1030 * t1436 + t1031 * t1437 + t1032 * t1438;
t1003 = (t1091 * t1164 + t1170 * t1176) * t1154 + t1068 * t1164 + t1153 * t1371;
t1001 = (t1089 * t1162 + t1168 * t1176) * t1154 + t1068 * t1162 + t1153 * t1372;
t999 = (t1087 * t1160 + t1166 * t1176) * t1154 + t1068 * t1160 + t1153 * t1373;
t989 = -t1110 * t1323 + (t1107 * t1413 + t1472 * t1110) * t1169 + t1107 * t1355;
t988 = -t1109 * t1324 + (t1106 * t1414 + t1473 * t1109) * t1167 + t1106 * t1358;
t987 = -t1108 * t1325 + (t1105 * t1415 + t1474 * t1108) * t1165 + t1105 * t1361;
t986 = t1107 * t1323 + (-t1472 * t1107 + t1110 * t1413) * t1169 + t1110 * t1355;
t985 = t1106 * t1324 + (-t1473 * t1106 + t1109 * t1414) * t1167 + t1109 * t1358;
t984 = t1105 * t1325 + (-t1474 * t1105 + t1108 * t1415) * t1165 + t1108 * t1361;
t983 = -t1102 * t1407 / 0.4e1;
t982 = -t1101 * t1409 / 0.4e1;
t981 = -t1100 * t1411 / 0.4e1;
t957 = -t1161 * t959 - t963 * t1377;
t956 = t1167 * t959 - t963 * t1380;
t955 = -t1163 * t960 - t962 * t1376;
t954 = t1169 * t960 - t962 * t1379;
t953 = -t1159 * t958 - t961 * t1378;
t952 = t1165 * t958 - t961 * t1381;
t1 = [t1208, 0, 0, t1199 * t1208 + t989 * t1303 + t988 * t1306 + t987 * t1309, (t1108 * t1279 + t1109 * t1278 + t1110 * t1277) * t1457 + t1459 * t1029 + t1460 * t1028 + t1461 * t1027, (-t1262 * t983 - t1264 * t982 - t1266 * t981) * t1197 + t1469 * t1029 + t1470 * t1028 + t1471 * t1027, (-t1108 * t1319 - t1109 * t1317 - t1110 * t1315) * t1197 + t1027 * t1454 + t1028 * t1455 + t1029 * t1456, (-t1108 * t1242 - t1109 * t1240 - t1110 * t1238) * t1197 + t1027 * t1451 + t1028 * t1452 + t1029 * t1453, (-t1262 * t951 - t1264 * t950 - t1266 * t945) * t1197, t989 * t1219 + t988 * t1221 + t987 * t1223 + (-t952 * t1266 - t956 * t1264 - t954 * t1262 + (-t1108 * t1318 - t1109 * t1316 - t1110 * t1314) * t1374) * t1197 + t1027 * t1443 + t1028 * t1447 + t1029 * t1445, t989 * t1220 + t988 * t1222 + t987 * t1224 + (-t953 * t1266 - t957 * t1264 - t955 * t1262 + (-t1108 * t1241 - t1109 * t1239 - t1110 * t1237) * t1374) * t1197 + t1027 * t1442 + t1028 * t1446 + t1029 * t1444, 0; t1207, 0, 0, t1199 * t1207 + t1303 * t986 + t1306 * t985 + t1309 * t984, (-t1105 * t1279 - t1106 * t1278 - t1107 * t1277) * t1457 + t1459 * t1032 + t1460 * t1031 + t1461 * t1030, (t1263 * t983 + t1265 * t982 + t1267 * t981) * t1197 + t1469 * t1032 + t1470 * t1031 + t1471 * t1030, (t1105 * t1319 + t1106 * t1317 + t1107 * t1315) * t1197 + t1030 * t1454 + t1031 * t1455 + t1032 * t1456, (t1105 * t1242 + t1106 * t1240 + t1107 * t1238) * t1197 + t1030 * t1451 + t1031 * t1452 + t1032 * t1453, (t1263 * t951 + t1265 * t950 + t1267 * t945) * t1197, t986 * t1219 + t985 * t1221 + t984 * t1223 + (t952 * t1267 + t956 * t1265 + t954 * t1263 + (t1105 * t1318 + t1106 * t1316 + t1107 * t1314) * t1374) * t1197 + t1030 * t1443 + t1031 * t1447 + t1032 * t1445, t986 * t1220 + t985 * t1222 + t984 * t1224 + (t953 * t1267 + t957 * t1265 + t955 * t1263 + (t1105 * t1241 + t1106 * t1239 + t1107 * t1237) * t1374) * t1197 + t1030 * t1442 + t1031 * t1446 + t1032 * t1444, 0; t1209, 0, 0, -t1001 * t1294 * t959 - t1003 * t1293 * t960 - t1295 * t958 * t999 + t1199 * t1209, (-t1159 * t1236 - t1161 * t1235 - t1163 * t1234) * t1457 + (-t1304 - t1249) * t1099 + (-t1307 - t1250) * t1098 + (-t1310 - t1251) * t1097, (t1392 * t983 + t1393 * t982 + t1394 * t981) * t1197 + (-0.2e1 * t1269 - t1280) * t1099 + (-0.2e1 * t1271 - t1281) * t1098 + (-0.2e1 * t1273 - t1282) * t1097, -t1243 * t1383 - t1245 * t1385 - t1247 * t1387 + (t1159 * t1313 + t1161 * t1312 + t1163 * t1311) * t1197, t1244 * t1383 + t1246 * t1385 + t1248 * t1387 + (t1165 * t1313 + t1167 * t1312 + t1169 * t1311) * t1197, (t1392 * t951 + t1393 * t950 + t1394 * t945) * t1197, (t1285 * t1099 + (-t1366 * t951 + t1401) * t1003) * t1046 + (t1284 * t1098 + (-t1368 * t950 + t1403) * t1001) * t1043 + ((-t1370 * t945 + t1405) * t999 + t1288 * t1097) * t1040 + (t952 * t1394 + t956 * t1393 + t954 * t1392 + (t1159 * t1276 + t1161 * t1275 + t1163 * t1274) * t1374) * t1197, (t1286 * t1099 + (t1366 * t977 + t1402) * t1003) * t1046 + (t1287 * t1098 + (t1368 * t976 + t1404) * t1001) * t1043 + ((t1370 * t975 + t1406) * t999 + t1289 * t1097) * t1040 + (t953 * t1394 + t957 * t1393 + t955 * t1392 + (t1234 + t1235 + t1236) * t1374) * t1197, 0;];
tau_reg  = t1;
