% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR9V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR9V1G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:47:39
% EndTime: 2020-08-06 18:47:50
% DurationCPUTime: 11.44s
% Computational Cost: add. (102719->574), mult. (104487->999), div. (8196->17), fcn. (47745->107), ass. (0->450)
t1523 = -2 * qJ(2,1);
t1522 = -2 * qJ(2,2);
t1521 = -2 * qJ(2,3);
t1219 = cos(qJ(3,1));
t1199 = t1219 ^ 2;
t1202 = cos(pkin(7));
t1190 = t1202 ^ 2;
t1415 = t1190 - 0.1e1 / 0.2e1;
t1213 = sin(qJ(3,1));
t1424 = t1213 * t1219;
t1201 = sin(pkin(7));
t1431 = t1201 * t1202;
t1067 = (t1199 - 0.1e1 / 0.2e1) * t1431 + t1415 * t1424;
t1520 = -0.4e1 * t1067;
t1215 = cos(qJ(3,3));
t1197 = t1215 ^ 2;
t1209 = sin(qJ(3,3));
t1425 = t1209 * t1215;
t1068 = (t1197 - 0.1e1 / 0.2e1) * t1431 + t1415 * t1425;
t1519 = -0.4e1 * t1068;
t1217 = cos(qJ(3,2));
t1198 = t1217 ^ 2;
t1211 = sin(qJ(3,2));
t1423 = t1217 * t1211;
t1069 = (t1198 - 0.1e1 / 0.2e1) * t1431 + t1415 * t1423;
t1518 = -0.4e1 * t1069;
t1221 = xDP(3);
t1517 = 2 * t1221;
t1412 = 4 * t1221;
t1194 = pkin(7) + qJ(3,3);
t1157 = sin(t1194);
t1160 = cos(t1194);
t1203 = legFrame(3,3);
t1167 = sin(t1203);
t1170 = cos(t1203);
t1210 = sin(qJ(1,3));
t1216 = cos(qJ(1,3));
t1222 = xDP(2);
t1223 = xDP(1);
t1064 = ((t1210 * t1222 + t1216 * t1223) * t1170 + t1167 * (-t1210 * t1223 + t1216 * t1222)) * t1160 + t1157 * t1221;
t1142 = 0.1e1 / t1160;
t1206 = pkin(5) + qJ(2,3);
t1184 = -pkin(6) - t1206;
t1174 = 1 / t1184;
t1451 = t1142 * t1174;
t1387 = t1064 * t1451;
t1195 = pkin(7) + qJ(3,2);
t1158 = sin(t1195);
t1161 = cos(t1195);
t1204 = legFrame(2,3);
t1168 = sin(t1204);
t1171 = cos(t1204);
t1212 = sin(qJ(1,2));
t1218 = cos(qJ(1,2));
t1065 = ((t1212 * t1222 + t1218 * t1223) * t1171 + t1168 * (-t1212 * t1223 + t1218 * t1222)) * t1161 + t1158 * t1221;
t1146 = 0.1e1 / t1161;
t1207 = pkin(5) + qJ(2,2);
t1185 = -pkin(6) - t1207;
t1177 = 1 / t1185;
t1446 = t1146 * t1177;
t1384 = t1065 * t1446;
t1196 = pkin(7) + qJ(3,1);
t1159 = sin(t1196);
t1162 = cos(t1196);
t1205 = legFrame(1,3);
t1169 = sin(t1205);
t1172 = cos(t1205);
t1214 = sin(qJ(1,1));
t1220 = cos(qJ(1,1));
t1066 = ((t1214 * t1222 + t1220 * t1223) * t1172 + t1169 * (-t1214 * t1223 + t1220 * t1222)) * t1162 + t1159 * t1221;
t1150 = 0.1e1 / t1162;
t1208 = pkin(5) + qJ(2,1);
t1186 = -pkin(6) - t1208;
t1180 = 1 / t1186;
t1441 = t1150 * t1180;
t1381 = t1066 * t1441;
t1200 = t1221 ^ 2;
t1230 = (pkin(3) ^ 2);
t1432 = t1200 / t1230;
t1224 = 0.2e1 * pkin(7);
t1193 = t1224 + qJ(3,1);
t1491 = cos(t1193);
t1516 = (t1491 + t1219) * pkin(2);
t1192 = t1224 + qJ(3,2);
t1492 = cos(t1192);
t1515 = (t1492 + t1217) * pkin(2);
t1191 = t1224 + qJ(3,3);
t1493 = cos(t1191);
t1514 = (t1493 + t1215) * pkin(2);
t1136 = 0.2e1 * t1194;
t1124 = sin(t1136);
t1486 = pkin(2) * t1202;
t1135 = pkin(1) + t1486;
t1226 = 1 / pkin(3);
t1422 = t1221 * t1226;
t1232 = t1160 ^ 2;
t1143 = 0.1e1 / t1232;
t1450 = t1143 * t1174;
t1485 = pkin(3) * t1160;
t1049 = (-t1064 * t1124 / 0.2e1 + (t1135 + t1485) * t1422) * t1142 * t1221 * t1450;
t1163 = t1203 + qJ(1,3);
t1400 = t1224 + t1163;
t1506 = 0.2e1 * qJ(3,3);
t1106 = t1506 + t1400;
t1107 = qJ(3,3) + t1400;
t1225 = -0.2e1 * pkin(7);
t1399 = t1225 + t1163;
t1108 = -qJ(3,3) + t1399;
t1109 = -0.2e1 * qJ(3,3) + t1399;
t1131 = qJ(3,3) + t1163;
t1112 = pkin(7) + t1131;
t1132 = -qJ(3,3) + t1163;
t1113 = -pkin(7) + t1132;
t1509 = 0.2e1 * pkin(1);
t1166 = t1222 * t1509;
t1183 = pkin(1) * t1223;
t1414 = pkin(1) * t1412;
t1418 = sin(t1191) + t1209;
t1500 = -0.2e1 * t1223;
t1040 = t1157 * t1414 + (sin(t1113) + sin(t1112)) * (t1184 * t1500 + t1166) + 0.2e1 * (cos(t1113) + cos(t1112)) * (t1184 * t1222 + t1183) + (t1124 * t1517 + (cos(t1109) + cos(t1106) + 0.2e1 * cos(t1163)) * t1223 + (sin(t1109) + sin(t1106) + 0.2e1 * sin(t1163)) * t1222) * pkin(3) + (t1418 * t1517 + (cos(t1108) + cos(t1107) + cos(t1132) + cos(t1131)) * t1223 + (sin(t1108) + sin(t1107) + sin(t1132) + sin(t1131)) * t1222) * pkin(2);
t1241 = t1184 ^ 2;
t1479 = t1064 * pkin(1);
t1276 = 0.4e1 * (t1479 - t1040 / 0.8e1) * t1451;
t1270 = pkin(3) * t1276;
t1341 = pkin(3) * t1387;
t1305 = pkin(2) * t1341;
t1229 = pkin(1) ^ 2;
t1510 = pkin(2) ^ 2;
t1350 = -0.4e1 * t1229 - (3 * t1230) - 0.2e1 * t1510;
t1351 = 0.2e1 * pkin(3) * t1422;
t1368 = t1160 * t1451;
t1175 = 1 / t1241;
t1389 = t1064 * t1143 * t1175;
t1496 = cos(t1136);
t1499 = 0.3e1 * pkin(7);
t1505 = 0.4e1 * t1202;
t1247 = (-t1184 * t1142 * t1124 * t1351 + t1496 * t1270 - ((-(4 * t1241) + t1350) * t1064 + pkin(1) * t1040) * t1368 + t1305 * t1505 + t1270 + 0.2e1 * (cos(t1506 + t1499) + cos(t1506 + pkin(7))) * t1305 + t1276 * t1514 + (t1230 * cos(0.3e1 * t1194) + (cos(qJ(3,3) - pkin(7)) + cos(t1499 + qJ(3,3))) * t1510) * t1387) * t1389;
t1252 = (t1509 + ((t1496 + 0.1e1) * pkin(3) + t1514) * t1142) * t1174 * t1040 * t1389;
t1354 = -t1247 / 0.4e1 + t1252 / 0.8e1 - t1049;
t1137 = 0.2e1 * t1195;
t1125 = sin(t1137);
t1235 = t1161 ^ 2;
t1147 = 0.1e1 / t1235;
t1445 = t1147 * t1177;
t1484 = pkin(3) * t1161;
t1050 = (-t1065 * t1125 / 0.2e1 + (t1135 + t1484) * t1422) * t1146 * t1221 * t1445;
t1164 = t1204 + qJ(1,2);
t1402 = t1224 + t1164;
t1507 = 0.2e1 * qJ(3,2);
t1114 = t1507 + t1402;
t1401 = t1225 + t1164;
t1115 = -0.2e1 * qJ(3,2) + t1401;
t1133 = qJ(3,2) + t1164;
t1116 = pkin(7) + t1133;
t1134 = -qJ(3,2) + t1164;
t1117 = -pkin(7) + t1134;
t1118 = qJ(3,2) + t1402;
t1119 = -qJ(3,2) + t1401;
t1417 = sin(t1192) + t1211;
t1041 = t1158 * t1414 + (sin(t1117) + sin(t1116)) * (t1185 * t1500 + t1166) + 0.2e1 * (cos(t1117) + cos(t1116)) * (t1185 * t1222 + t1183) + (t1125 * t1517 + (cos(t1115) + cos(t1114) + 0.2e1 * cos(t1164)) * t1223 + (sin(t1115) + sin(t1114) + 0.2e1 * sin(t1164)) * t1222) * pkin(3) + (t1417 * t1517 + (cos(t1119) + cos(t1118) + cos(t1134) + cos(t1133)) * t1223 + (sin(t1119) + sin(t1118) + sin(t1134) + sin(t1133)) * t1222) * pkin(2);
t1243 = t1185 ^ 2;
t1478 = t1065 * pkin(1);
t1275 = 0.4e1 * (t1478 - t1041 / 0.8e1) * t1446;
t1269 = pkin(3) * t1275;
t1340 = pkin(3) * t1384;
t1304 = pkin(2) * t1340;
t1366 = t1161 * t1446;
t1178 = 1 / t1243;
t1386 = t1065 * t1147 * t1178;
t1495 = cos(t1137);
t1248 = (-t1185 * t1146 * t1125 * t1351 + t1495 * t1269 - ((-(4 * t1243) + t1350) * t1065 + pkin(1) * t1041) * t1366 + t1304 * t1505 + t1269 + 0.2e1 * (cos(t1507 + t1499) + cos(t1507 + pkin(7))) * t1304 + t1275 * t1515 + (t1230 * cos(0.3e1 * t1195) + (cos(qJ(3,2) - pkin(7)) + cos(t1499 + qJ(3,2))) * t1510) * t1384) * t1386;
t1251 = (t1509 + ((t1495 + 0.1e1) * pkin(3) + t1515) * t1146) * t1177 * t1041 * t1386;
t1353 = -t1248 / 0.4e1 + t1251 / 0.8e1 - t1050;
t1138 = 0.2e1 * t1196;
t1126 = sin(t1138);
t1238 = t1162 ^ 2;
t1151 = 0.1e1 / t1238;
t1440 = t1151 * t1180;
t1483 = pkin(3) * t1162;
t1051 = (-t1066 * t1126 / 0.2e1 + (t1135 + t1483) * t1422) * t1150 * t1221 * t1440;
t1165 = t1205 + qJ(1,1);
t1404 = t1224 + t1165;
t1110 = qJ(3,1) + t1404;
t1403 = t1225 + t1165;
t1111 = -qJ(3,1) + t1403;
t1129 = qJ(3,1) + t1165;
t1120 = pkin(7) + t1129;
t1130 = -qJ(3,1) + t1165;
t1121 = -pkin(7) + t1130;
t1508 = 0.2e1 * qJ(3,1);
t1122 = t1508 + t1404;
t1123 = -0.2e1 * qJ(3,1) + t1403;
t1416 = sin(t1193) + t1213;
t1042 = t1159 * t1414 + (sin(t1120) + sin(t1121)) * (t1186 * t1500 + t1166) + 0.2e1 * (cos(t1120) + cos(t1121)) * (t1186 * t1222 + t1183) + (t1126 * t1517 + (0.2e1 * cos(t1165) + cos(t1123) + cos(t1122)) * t1223 + (0.2e1 * sin(t1165) + sin(t1123) + sin(t1122)) * t1222) * pkin(3) + (t1416 * t1517 + (cos(t1110) + cos(t1130) + cos(t1129) + cos(t1111)) * t1223 + (sin(t1111) + sin(t1110) + sin(t1130) + sin(t1129)) * t1222) * pkin(2);
t1245 = t1186 ^ 2;
t1477 = t1066 * pkin(1);
t1274 = 0.4e1 * (t1477 - t1042 / 0.8e1) * t1441;
t1268 = pkin(3) * t1274;
t1339 = pkin(3) * t1381;
t1303 = pkin(2) * t1339;
t1364 = t1162 * t1441;
t1181 = 1 / t1245;
t1383 = t1066 * t1151 * t1181;
t1494 = cos(t1138);
t1249 = (-t1186 * t1150 * t1126 * t1351 + t1494 * t1268 - ((-(4 * t1245) + t1350) * t1066 + pkin(1) * t1042) * t1364 + t1303 * t1505 + t1268 + 0.2e1 * (cos(t1499 + t1508) + cos(pkin(7) + t1508)) * t1303 + t1274 * t1516 + (t1230 * cos(0.3e1 * t1196) + (cos(qJ(3,1) - pkin(7)) + cos(qJ(3,1) + t1499)) * t1510) * t1381) * t1383;
t1250 = (t1509 + ((t1494 + 0.1e1) * pkin(3) + t1516) * t1150) * t1180 * t1042 * t1383;
t1352 = -t1249 / 0.4e1 + t1250 / 0.8e1 - t1051;
t1144 = t1142 * t1143;
t1176 = t1174 * t1175;
t1449 = t1143 * t1176;
t1463 = t1040 * t1064;
t1325 = t1449 * t1463;
t1344 = pkin(2) * t1387;
t1433 = t1200 * t1226;
t1476 = t1215 * pkin(2);
t1031 = -(t1496 * t1341 + t1493 * t1344 - (-0.2e1 * t1479 + t1040 / 0.2e1) * t1368 + (pkin(3) + t1476) * t1387) * t1389 / 0.2e1 + t1325 / 0.4e1 - t1144 * t1174 * t1433;
t1482 = t1031 * pkin(1);
t1019 = 0.2e1 * t1482 - t1354;
t1148 = t1146 * t1147;
t1179 = t1177 * t1178;
t1444 = t1147 * t1179;
t1462 = t1041 * t1065;
t1317 = t1444 * t1462;
t1343 = pkin(2) * t1384;
t1032 = -(t1495 * t1340 + t1492 * t1343 - (-0.2e1 * t1478 + t1041 / 0.2e1) * t1366 + (t1217 * pkin(2) + pkin(3)) * t1384) * t1386 / 0.2e1 + t1317 / 0.4e1 - t1148 * t1177 * t1433;
t1481 = t1032 * pkin(1);
t1021 = 0.2e1 * t1481 - t1353;
t1152 = t1150 * t1151;
t1182 = t1180 * t1181;
t1439 = t1151 * t1182;
t1461 = t1042 * t1066;
t1309 = t1439 * t1461;
t1342 = pkin(2) * t1381;
t1033 = -(t1494 * t1339 + t1491 * t1342 - (-0.2e1 * t1477 + t1042 / 0.2e1) * t1364 + (pkin(2) * t1219 + pkin(3)) * t1381) * t1383 / 0.2e1 + t1309 / 0.4e1 - t1152 * t1180 * t1433;
t1480 = t1033 * pkin(1);
t1023 = 0.2e1 * t1480 - t1352;
t1076 = t1135 * t1210 + t1184 * t1216;
t1079 = t1135 * t1216 - t1184 * t1210;
t1085 = t1167 * t1216 + t1170 * t1210;
t1055 = t1076 * t1170 + t1079 * t1167 + t1085 * t1485;
t1077 = t1135 * t1212 + t1185 * t1218;
t1080 = t1135 * t1218 - t1185 * t1212;
t1086 = t1168 * t1218 + t1171 * t1212;
t1056 = t1077 * t1171 + t1080 * t1168 + t1086 * t1484;
t1078 = t1135 * t1214 + t1186 * t1220;
t1081 = t1135 * t1220 - t1186 * t1214;
t1087 = t1169 * t1220 + t1172 * t1214;
t1057 = t1078 * t1172 + t1081 * t1169 + t1087 * t1483;
t1513 = t1174 * (t1019 * t1085 - t1031 * t1055) + (t1021 * t1086 - t1032 * t1056) * t1177 + (t1023 * t1087 - t1033 * t1057) * t1180;
t1082 = -t1167 * t1210 + t1170 * t1216;
t1052 = -t1076 * t1167 + t1079 * t1170 + t1082 * t1485;
t1083 = -t1168 * t1212 + t1171 * t1218;
t1053 = -t1077 * t1168 + t1080 * t1171 + t1083 * t1484;
t1084 = -t1169 * t1214 + t1172 * t1220;
t1054 = -t1078 * t1169 + t1081 * t1172 + t1084 * t1483;
t1512 = (t1019 * t1082 - t1031 * t1052) * t1174 + (t1021 * t1083 - t1032 * t1053) * t1177 + (t1023 * t1084 - t1033 * t1054) * t1180;
t1071 = t1417 * pkin(2) + pkin(3) * t1125 + t1158 * t1509;
t1456 = t1071 * t1032;
t1358 = -t1456 / 0.2e1;
t1072 = t1416 * pkin(2) + pkin(3) * t1126 + t1159 * t1509;
t1455 = t1072 * t1033;
t1070 = t1418 * pkin(2) + pkin(3) * t1124 + t1157 * t1509;
t1457 = t1070 * t1031;
t1511 = (t1159 * t1023 - t1455 / 0.2e1) * t1441 + (t1158 * t1021 + t1358) * t1446 + (t1157 * t1019 - t1457 / 0.2e1) * t1451;
t1504 = -0.2e1 * t1209;
t1503 = -0.2e1 * t1211;
t1502 = -0.2e1 * t1213;
t1498 = -0.1e1 + 0.2e1 * t1190;
t1497 = -0.4e1 * t1190 + 0.2e1;
t1490 = pkin(1) * t1215;
t1489 = pkin(1) * t1217;
t1488 = pkin(1) * t1219;
t1487 = pkin(2) * t1190;
t1430 = t1201 * t1209;
t1097 = -t1215 * t1202 + t1430;
t1475 = t1031 * t1097;
t1426 = t1202 * t1209;
t1427 = t1201 * t1215;
t1100 = t1426 + t1427;
t1474 = t1031 * t1100;
t1473 = t1031 * t1142;
t1472 = t1031 * t1174;
t1429 = t1201 * t1211;
t1098 = t1202 * t1217 - t1429;
t1471 = t1032 * t1098;
t1101 = t1201 * t1217 + t1202 * t1211;
t1470 = t1032 * t1101;
t1469 = t1032 * t1146;
t1468 = t1032 * t1177;
t1428 = t1201 * t1213;
t1099 = -t1219 * t1202 + t1428;
t1467 = t1033 * t1099;
t1102 = t1201 * t1219 + t1202 * t1213;
t1466 = t1033 * t1102;
t1465 = t1033 * t1150;
t1464 = t1033 * t1180;
t1460 = t1064 * t1174;
t1459 = t1065 * t1177;
t1458 = t1066 * t1180;
t1145 = 0.1e1 / t1232 ^ 2;
t1454 = t1157 ^ 2 * t1145;
t1149 = 0.1e1 / t1235 ^ 2;
t1453 = t1158 ^ 2 * t1149;
t1153 = 0.1e1 / t1238 ^ 2;
t1452 = t1159 ^ 2 * t1153;
t1448 = t1144 * t1157;
t1447 = t1144 * t1175;
t1443 = t1148 * t1158;
t1442 = t1148 * t1178;
t1438 = t1152 * t1159;
t1437 = t1152 * t1181;
t1436 = t1157 * t1174;
t1435 = t1158 * t1177;
t1434 = t1159 * t1180;
t1355 = t1422 / 0.2e1;
t1308 = t1206 * t1355;
t1327 = t1209 * t1387;
t1421 = t1142 * t1215 * t1308 - pkin(1) * t1327;
t1307 = t1207 * t1355;
t1319 = t1211 * t1384;
t1420 = t1146 * t1217 * t1307 - pkin(1) * t1319;
t1306 = t1208 * t1355;
t1311 = t1213 * t1381;
t1419 = t1150 * t1219 * t1306 - pkin(1) * t1311;
t1411 = 0.4e1 * t1431;
t1410 = t1032 * t1487;
t1409 = t1033 * t1487;
t1408 = t1190 * t1476;
t1407 = qJ(2,1) * t1439;
t1406 = qJ(2,2) * t1444;
t1405 = qJ(2,3) * t1449;
t1091 = t1100 ^ 2;
t1398 = t1091 * t1472;
t1092 = t1101 ^ 2;
t1397 = t1092 * t1468;
t1093 = t1102 ^ 2;
t1396 = t1093 * t1464;
t1061 = t1064 ^ 2;
t1395 = t1061 * t1449;
t1394 = t1061 * t1447;
t1062 = t1065 ^ 2;
t1393 = t1062 * t1444;
t1392 = t1062 * t1442;
t1063 = t1066 ^ 2;
t1391 = t1063 * t1439;
t1390 = t1063 * t1437;
t1388 = t1064 * t1447;
t1385 = t1065 * t1442;
t1382 = t1066 * t1437;
t1380 = t1082 * t1451;
t1379 = t1083 * t1446;
t1378 = t1084 * t1441;
t1377 = t1085 * t1451;
t1376 = t1086 * t1446;
t1375 = t1087 * t1441;
t1374 = t1097 * t1448;
t1373 = t1098 * t1443;
t1372 = t1099 * t1438;
t1371 = t1100 * t1448;
t1370 = t1101 * t1443;
t1369 = t1102 * t1438;
t1367 = t1143 * t1436;
t1365 = t1147 * t1435;
t1363 = t1151 * t1434;
t1362 = t1463 / 0.2e1;
t1361 = t1462 / 0.2e1;
t1360 = t1461 / 0.2e1;
t1359 = t1457 / 0.2e1;
t1357 = t1455 / 0.2e1;
t1356 = -t1422 / 0.2e1;
t1349 = t1226 * t1517;
t1348 = t1226 * t1412;
t1347 = t1472 * t1519;
t1346 = t1468 * t1518;
t1345 = t1464 * t1520;
t1335 = t1436 * t1473;
t1334 = t1435 * t1469;
t1333 = t1434 * t1465;
t1332 = t1070 * t1388;
t1331 = t1082 * t1389;
t1330 = t1085 * t1389;
t1329 = t1097 * t1389;
t1328 = t1100 * t1389;
t1326 = t1157 * t1388;
t1324 = t1071 * t1385;
t1323 = t1083 * t1386;
t1322 = t1086 * t1386;
t1321 = t1098 * t1386;
t1320 = t1101 * t1386;
t1318 = t1158 * t1385;
t1316 = t1072 * t1382;
t1315 = t1084 * t1383;
t1314 = t1087 * t1383;
t1313 = t1099 * t1383;
t1312 = t1102 * t1383;
t1310 = t1159 * t1382;
t1302 = t1217 * t1343;
t1301 = t1219 * t1342;
t1297 = t1206 * t1432 * t1448;
t1296 = t1207 * t1432 * t1443;
t1295 = t1208 * t1432 * t1438;
t1016 = t1482 + t1247 / 0.8e1 - t1252 / 0.16e2 + t1049 / 0.2e1;
t1285 = -0.2e1 * t1031 * t1486 - 0.2e1 * t1016;
t1017 = t1481 + t1248 / 0.8e1 - t1251 / 0.16e2 + t1050 / 0.2e1;
t1284 = -0.2e1 * t1032 * t1486 - 0.2e1 * t1017;
t1018 = t1480 + t1249 / 0.8e1 - t1250 / 0.16e2 + t1051 / 0.2e1;
t1283 = -0.2e1 * t1033 * t1486 - 0.2e1 * t1018;
t1282 = t1215 * t1297;
t1281 = t1217 * t1296;
t1280 = t1219 * t1295;
t1279 = t1209 * t1297;
t1278 = t1211 * t1296;
t1277 = t1213 * t1295;
t1267 = (-t1097 * t1143 + t1371) * t1174;
t1266 = (-t1100 * t1143 - t1374) * t1174;
t1265 = (t1098 * t1147 + t1370) * t1177;
t1264 = (-t1101 * t1147 + t1373) * t1177;
t1263 = (-t1099 * t1151 + t1369) * t1180;
t1262 = (-t1102 * t1151 - t1372) * t1180;
t1261 = -(-t1040 / 0.2e1 + t1135 * t1064) * t1450 * t1387 + t1206 * t1473;
t1260 = (-t1041 / 0.2e1 + t1135 * t1065) * t1445 * t1384 - t1207 * t1469;
t1259 = -(-t1042 / 0.2e1 + t1135 * t1066) * t1440 * t1381 + t1208 * t1465;
t1258 = -t1325 / 0.2e1 + t1472 * t1521;
t1257 = -t1317 / 0.2e1 + t1468 * t1522;
t1256 = -t1309 / 0.2e1 + t1464 * t1523;
t1255 = (t1157 * t1362 - t1070 * t1061 / 0.2e1) * t1176 * t1144;
t1254 = (t1158 * t1361 - t1071 * t1062 / 0.2e1) * t1179 * t1148;
t1253 = (t1159 * t1360 - t1072 * t1063 / 0.2e1) * t1182 * t1152;
t1075 = -0.4e1 * t1423 * t1431 - 0.2e1 * t1198 + 0.1e1 + (0.4e1 * t1198 - 0.2e1) * t1190;
t1074 = t1497 * t1199 + t1411 * t1424 + t1498;
t1073 = t1497 * t1197 + t1411 * t1425 + t1498;
t1048 = t1190 * t1301 + (t1213 * t1306 - (pkin(2) * t1428 - t1488) * t1458) * t1150 * t1202 + t1419 * t1201;
t1047 = t1190 * t1302 + (t1211 * t1307 - (pkin(2) * t1429 - t1489) * t1459) * t1146 * t1202 + t1420 * t1201;
t1046 = t1421 * t1201 + (t1308 * t1426 - (-t1408 + (pkin(2) * t1430 - t1490) * t1202) * t1460) * t1142;
t1045 = -t1327 * t1487 + (-t1344 * t1427 + t1421) * t1202 + (t1209 * t1206 * t1356 - t1460 * t1490) * t1142 * t1201;
t1044 = -t1311 * t1487 + (-t1201 * t1301 + t1419) * t1202 + (t1213 * t1208 * t1356 - t1458 * t1488) * t1150 * t1201;
t1043 = -t1319 * t1487 + (-t1201 * t1302 + t1420) * t1202 + (t1211 * t1207 * t1356 - t1459 * t1489) * t1146 * t1201;
t1024 = t1352 - t1480;
t1022 = t1353 - t1481;
t1020 = t1354 - t1482;
t1015 = ((qJ(2,1) ^ 2) + t1229) * t1033 - pkin(1) * t1352;
t1014 = ((qJ(2,2) ^ 2) + t1229) * t1032 - pkin(1) * t1353;
t1013 = ((qJ(2,3) ^ 2) + t1229) * t1031 - pkin(1) * t1354;
t1012 = 0.2e1 * t1219 * t1409 + (t1023 * t1219 - t1277) * t1202 + (t1213 * t1283 - t1280) * t1201;
t1011 = 0.2e1 * t1217 * t1410 + (t1021 * t1217 - t1278) * t1202 + (t1211 * t1284 - t1281) * t1201;
t1010 = 0.2e1 * t1031 * t1408 + (t1019 * t1215 - t1279) * t1202 + (t1209 * t1285 - t1282) * t1201;
t1009 = t1031 * t1487 * t1504 + (t1016 * t1504 - t1282) * t1202 + (t1215 * t1285 + t1279) * t1201;
t1008 = t1409 * t1502 + (t1018 * t1502 - t1280) * t1202 + (t1219 * t1283 + t1277) * t1201;
t1007 = t1410 * t1503 + (t1017 * t1503 - t1281) * t1202 + (t1217 * t1284 + t1278) * t1201;
t1 = [-t1082 * t1472 - t1083 * t1468 - t1084 * t1464, 0, 0, -t1512 * t1202, t1512 * t1201, t1052 * t1395 + t1053 * t1393 + t1054 * t1391 + t1082 * t1258 + t1083 * t1257 + t1084 * t1256, -(t1084 * t1015 + t1054 * t1024) * t1180 - (t1083 * t1014 + t1053 * t1022) * t1177 - (t1082 * t1013 + t1052 * t1020) * t1174 - (-t1052 * t1061 + t1082 * t1362) * t1405 - (-t1053 * t1062 + t1083 * t1361) * t1406 - (-t1054 * t1063 + t1084 * t1360) * t1407, -t1082 * t1398 - t1083 * t1397 - t1084 * t1396 + (t1067 * t1315 + t1068 * t1331 + t1069 * t1323) * t1348, t1082 * t1347 + t1083 * t1346 + t1084 * t1345 + (-t1073 * t1331 - t1074 * t1315 + t1075 * t1323) * t1349, (-t1082 * t1267 - t1083 * t1265 - t1084 * t1263) * t1432, (-t1082 * t1266 - t1083 * t1264 - t1084 * t1262) * t1432, 0, -(t1084 * t1012 + t1054 * t1467) * t1180 - (t1083 * t1011 - t1053 * t1471) * t1177 - (t1082 * t1010 + t1052 * t1475) * t1174 + (t1043 * t1379 + t1044 * t1378 + t1045 * t1380 + t1052 * t1328 + t1053 * t1320 + t1054 * t1312) * t1349, -(t1084 * t1008 + t1054 * t1466) * t1180 - (t1083 * t1007 + t1053 * t1470) * t1177 - (t1082 * t1009 + t1052 * t1474) * t1174 + (-t1046 * t1380 - t1047 * t1379 - t1048 * t1378 - t1052 * t1329 + t1053 * t1321 - t1054 * t1313) * t1349, 0; -t1085 * t1472 - t1086 * t1468 - t1087 * t1464, 0, 0, -t1513 * t1202, t1513 * t1201, t1055 * t1395 + t1056 * t1393 + t1057 * t1391 + t1085 * t1258 + t1086 * t1257 + t1087 * t1256, -(t1087 * t1015 + t1057 * t1024) * t1180 - (t1086 * t1014 + t1056 * t1022) * t1177 - (t1085 * t1013 + t1055 * t1020) * t1174 - (-t1055 * t1061 + t1085 * t1362) * t1405 - (-t1056 * t1062 + t1086 * t1361) * t1406 - (-t1057 * t1063 + t1087 * t1360) * t1407, -t1085 * t1398 - t1086 * t1397 - t1087 * t1396 + (t1067 * t1314 + t1068 * t1330 + t1069 * t1322) * t1348, t1085 * t1347 + t1086 * t1346 + t1087 * t1345 + (-t1073 * t1330 - t1074 * t1314 + t1075 * t1322) * t1349, (-t1085 * t1267 - t1086 * t1265 - t1087 * t1263) * t1432, (-t1085 * t1266 - t1086 * t1264 - t1087 * t1262) * t1432, 0, -(t1087 * t1012 + t1057 * t1467) * t1180 - (t1086 * t1011 - t1056 * t1471) * t1177 - (t1085 * t1010 + t1055 * t1475) * t1174 + (t1043 * t1376 + t1044 * t1375 + t1045 * t1377 + t1055 * t1328 + t1056 * t1320 + t1057 * t1312) * t1349, -(t1087 * t1008 + t1057 * t1466) * t1180 - (t1086 * t1007 + t1056 * t1470) * t1177 - (t1085 * t1009 + t1055 * t1474) * t1174 + (-t1046 * t1377 - t1047 * t1376 - t1048 * t1375 - t1055 * t1329 + t1056 * t1321 - t1057 * t1313) * t1349, 0; -t1333 - t1334 - t1335, 0, 0, -t1511 * t1202, t1511 * t1201, t1333 * t1523 + t1334 * t1522 + t1335 * t1521 - t1253 - t1254 - t1255, -(t1159 * t1015 + t1072 * t1024 / 0.2e1) * t1441 - (t1158 * t1014 + t1071 * t1022 / 0.2e1) * t1446 - (t1157 * t1013 + t1070 * t1020 / 0.2e1) * t1451 - qJ(2,3) * t1255 - qJ(2,2) * t1254 - qJ(2,1) * t1253, -t1091 * t1335 - t1092 * t1334 - t1093 * t1333 + (-0.2e1 * t1068 * t1394 - 0.2e1 * t1069 * t1392 - 0.2e1 * t1067 * t1390 + (t1067 * t1310 + t1068 * t1326 + t1069 * t1318) * t1412) * t1226, t1335 * t1519 + t1334 * t1518 + t1333 * t1520 + (t1073 * t1394 - t1075 * t1392 + t1074 * t1390 + (-t1073 * t1326 - t1074 * t1310 + t1075 * t1318) * t1517) * t1226, (t1100 * t1473 + t1101 * t1469 + t1102 * t1465) * t1226 + (-(t1102 * t1452 - t1372) * t1180 - (t1101 * t1453 + t1373) * t1177 - (t1100 * t1454 - t1374) * t1174) * t1432, (-t1097 * t1473 + t1098 * t1469 - t1099 * t1465) * t1226 + (-(-t1099 * t1452 - t1369) * t1180 - (t1098 * t1453 - t1370) * t1177 - (-t1097 * t1454 - t1371) * t1174) * t1432, (t1145 * t1157 + t1149 * t1158 + t1153 * t1159) * t1226 * t1432, -(t1159 * t1012 + t1099 * t1357) * t1441 - (t1158 * t1011 + t1098 * t1358) * t1446 - (t1157 * t1010 + t1097 * t1359) * t1451 + (-t1259 * t1102 + t1260 * t1101 - t1261 * t1100 + (0.2e1 * t1043 * t1365 + 0.2e1 * t1044 * t1363 + 0.2e1 * t1045 * t1367 + t1100 * t1332 + t1101 * t1324 + t1102 * t1316) * t1221) * t1226, -(t1159 * t1008 + t1102 * t1357) * t1441 - (t1158 * t1007 + t1101 * t1456 / 0.2e1) * t1446 - (t1157 * t1009 + t1100 * t1359) * t1451 + (t1259 * t1099 + t1260 * t1098 + t1261 * t1097 + (-0.2e1 * t1046 * t1367 - 0.2e1 * t1047 * t1365 - 0.2e1 * t1048 * t1363 - t1097 * t1332 + t1098 * t1324 - t1099 * t1316) * t1221) * t1226, 0;];
tau_reg  = t1;
