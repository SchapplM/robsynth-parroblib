% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR9V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:53
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR9V1G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G2A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:52:06
% EndTime: 2020-08-06 18:52:14
% DurationCPUTime: 8.92s
% Computational Cost: add. (11632->499), mult. (17397->1064), div. (2064->17), fcn. (15720->26), ass. (0->467)
t903 = legFrame(1,2);
t873 = sin(t903);
t909 = sin(qJ(1,1));
t1121 = t873 * t909;
t908 = sin(qJ(3,1));
t914 = cos(qJ(3,1));
t917 = pkin(2) / 0.2e1;
t1145 = (t914 * pkin(3) + t917) * t908;
t896 = sin(pkin(7));
t864 = pkin(1) * t896;
t1148 = (-t908 * pkin(3) + t864) * t914;
t897 = cos(pkin(7));
t886 = t897 ^ 2;
t1204 = 0.2e1 * t886;
t900 = pkin(5) + qJ(2,1);
t885 = pkin(6) + t900;
t915 = cos(qJ(1,1));
t1038 = t909 * pkin(1) - t915 * t885;
t1106 = t908 * t896;
t894 = t914 ^ 2;
t802 = t1038 * t1106 + (t894 - 0.1e1) * t909 * pkin(3);
t1196 = t914 * pkin(2);
t1199 = t894 * pkin(3);
t811 = pkin(1) * t908 + (-pkin(3) + t1196 + 0.2e1 * t1199) * t896;
t916 = -pkin(3) / 0.2e1;
t841 = t1199 + t1196 / 0.2e1 + t916;
t876 = cos(t903);
t1045 = t909 * t1106;
t1205 = 0.2e1 * pkin(3);
t949 = pkin(2) * t1045 + (t1045 * t1205 - t1038) * t914;
t760 = (-t841 * t1121 + t876 * t1145) * t1204 + (t876 * t811 + t873 * t949) * t897 + t802 * t873 + t876 * t1148;
t870 = 0.1e1 / t885 ^ 2;
t1186 = t760 * t870;
t1118 = t876 * t909;
t889 = pkin(7) + qJ(3,1);
t860 = sin(t889);
t863 = cos(t889);
t823 = t863 * t1118 + t873 * t860;
t1085 = t823 * t1186;
t902 = legFrame(2,2);
t872 = sin(t902);
t907 = sin(qJ(1,2));
t1122 = t872 * t907;
t906 = sin(qJ(3,2));
t912 = cos(qJ(3,2));
t1146 = (t912 * pkin(3) + t917) * t906;
t1149 = (-t906 * pkin(3) + t864) * t912;
t899 = pkin(5) + qJ(2,2);
t884 = pkin(6) + t899;
t913 = cos(qJ(1,2));
t1036 = pkin(1) * t907 - t913 * t884;
t1112 = t896 * t906;
t892 = t912 ^ 2;
t801 = t1036 * t1112 + (t892 - 0.1e1) * t907 * pkin(3);
t1197 = t912 * pkin(2);
t1200 = t892 * pkin(3);
t810 = pkin(1) * t906 + (-pkin(3) + t1197 + 0.2e1 * t1200) * t896;
t840 = t1200 + t1197 / 0.2e1 + t916;
t875 = cos(t902);
t1046 = t907 * t1112;
t950 = pkin(2) * t1046 + (t1046 * t1205 - t1036) * t912;
t758 = (-t840 * t1122 + t875 * t1146) * t1204 + (t875 * t810 + t872 * t950) * t897 + t801 * t872 + t875 * t1149;
t868 = 0.1e1 / t884 ^ 2;
t1190 = t758 * t868;
t1119 = t875 * t907;
t888 = pkin(7) + qJ(3,2);
t859 = sin(t888);
t862 = cos(t888);
t821 = t862 * t1119 + t872 * t859;
t1087 = t821 * t1190;
t901 = legFrame(3,2);
t871 = sin(t901);
t905 = sin(qJ(1,3));
t1123 = t871 * t905;
t904 = sin(qJ(3,3));
t910 = cos(qJ(3,3));
t1147 = (t910 * pkin(3) + t917) * t904;
t1150 = (-t904 * pkin(3) + t864) * t910;
t898 = pkin(5) + qJ(2,3);
t883 = pkin(6) + t898;
t911 = cos(qJ(1,3));
t1037 = pkin(1) * t905 - t911 * t883;
t1113 = t896 * t904;
t890 = t910 ^ 2;
t800 = t1037 * t1113 + (t890 - 0.1e1) * t905 * pkin(3);
t1198 = t910 * pkin(2);
t1201 = t890 * pkin(3);
t809 = pkin(1) * t904 + (-pkin(3) + t1198 + 0.2e1 * t1201) * t896;
t839 = t1201 + t1198 / 0.2e1 + t916;
t874 = cos(t901);
t1047 = t905 * t1113;
t951 = pkin(2) * t1047 + (t1047 * t1205 - t1037) * t910;
t756 = (-t839 * t1123 + t874 * t1147) * t1204 + (t874 * t809 + t871 * t951) * t897 + t800 * t871 + t874 * t1150;
t866 = 0.1e1 / t883 ^ 2;
t1194 = t756 * t866;
t1120 = t874 * t905;
t887 = pkin(7) + qJ(3,3);
t858 = sin(t887);
t861 = cos(t887);
t819 = t861 * t1120 + t871 * t858;
t1089 = t819 * t1194;
t822 = -t863 * t1121 + t876 * t860;
t869 = 0.1e1 / t885;
t1164 = t822 * t869;
t820 = -t862 * t1122 + t875 * t859;
t867 = 0.1e1 / t884;
t1170 = t820 * t867;
t818 = -t861 * t1123 + t874 * t858;
t865 = 0.1e1 / t883;
t1176 = t818 * t865;
t852 = 0.1e1 / t861;
t1144 = t852 * t865;
t1073 = t819 * t1144;
t1028 = pkin(1) * t1073;
t1111 = t897 * t910;
t834 = t1111 - t1113;
t828 = 0.1e1 / t834;
t1157 = t828 * t865;
t757 = (t839 * t1120 + t871 * t1147) * t1204 + (t871 * t809 - t874 * t951) * t897 - t800 * t874 + t871 * t1150;
t749 = t757 * t1157;
t735 = -t749 + 0.2e1 * t1028;
t854 = 0.1e1 / t862;
t1139 = t854 * t867;
t1071 = t821 * t1139;
t1026 = pkin(1) * t1071;
t1110 = t897 * t912;
t835 = t1110 - t1112;
t829 = 0.1e1 / t835;
t1155 = t829 * t867;
t759 = (t840 * t1119 + t872 * t1146) * t1204 + (t872 * t810 - t875 * t950) * t897 - t801 * t875 + t872 * t1149;
t751 = t759 * t1155;
t739 = -t751 + 0.2e1 * t1026;
t856 = 0.1e1 / t863;
t1134 = t856 * t869;
t1069 = t823 * t1134;
t1024 = pkin(1) * t1069;
t1102 = t914 * t897;
t833 = t1102 - t1106;
t827 = 0.1e1 / t833;
t1159 = t827 * t869;
t761 = (t841 * t1118 + t873 * t1145) * t1204 + (t873 * t811 - t876 * t949) * t897 - t802 * t876 + t873 * t1148;
t753 = t761 * t1159;
t743 = -t753 + 0.2e1 * t1024;
t1210 = t852 * (t828 * t1089 - t735 * t1176) + t854 * (t829 * t1087 - t739 * t1170) + t856 * (t827 * t1085 - t743 * t1164);
t1184 = t761 * t870;
t1084 = t822 * t1184;
t1188 = t759 * t868;
t1086 = t820 * t1188;
t1192 = t757 * t866;
t1088 = t818 * t1192;
t1161 = t823 * t869;
t1167 = t821 * t867;
t1173 = t819 * t865;
t1074 = t818 * t1144;
t1029 = pkin(1) * t1074;
t748 = t756 * t1157;
t733 = -t748 + 0.2e1 * t1029;
t1072 = t820 * t1139;
t1027 = pkin(1) * t1072;
t750 = t758 * t1155;
t737 = -t750 + 0.2e1 * t1027;
t1070 = t822 * t1134;
t1025 = pkin(1) * t1070;
t752 = t760 * t1159;
t741 = -t752 + 0.2e1 * t1025;
t1209 = t852 * (t828 * t1088 - t733 * t1173) + t854 * (t829 * t1086 - t737 * t1167) + t856 * (t827 * t1084 - t741 * t1161);
t851 = t897 * pkin(2) + pkin(1);
t808 = t909 * t885 + (pkin(3) * t863 + t851) * t915;
t1178 = t808 * t870;
t807 = t907 * t884 + (pkin(3) * t862 + t851) * t913;
t1179 = t807 * t868;
t806 = t905 * t883 + (pkin(3) * t861 + t851) * t911;
t1180 = t806 * t866;
t1129 = t865 * t911;
t1092 = pkin(1) * t1129;
t797 = t806 * t865;
t785 = -t797 + 0.2e1 * t1092;
t1127 = t867 * t913;
t1091 = pkin(1) * t1127;
t798 = t807 * t867;
t787 = -t798 + 0.2e1 * t1091;
t1125 = t869 * t915;
t1090 = pkin(1) * t1125;
t799 = t808 * t869;
t789 = -t799 + 0.2e1 * t1090;
t1208 = (t785 * t865 - t1180) * t911 + (t787 * t867 - t1179) * t913 + (t789 * t869 - t1178) * t915;
t1154 = t829 * t868;
t1156 = t828 * t866;
t1158 = t827 * t870;
t1162 = t823 * t856;
t1168 = t821 * t854;
t1174 = t819 * t852;
t1207 = (t761 * t1158 - t743 * t869) * t1162 + (t759 * t1154 - t739 * t867) * t1168 + (t757 * t1156 - t735 * t865) * t1174;
t1165 = t822 * t856;
t1171 = t820 * t854;
t1177 = t818 * t852;
t1206 = (t760 * t1158 - t741 * t869) * t1165 + (t758 * t1154 - t737 * t867) * t1171 + (t756 * t1156 - t733 * t865) * t1177;
t1203 = -0.2e1 * t896;
t918 = 0.1e1 / pkin(3);
t1202 = 0.2e1 * t918;
t1195 = t756 * t828;
t1193 = t757 * t828;
t1191 = t758 * t829;
t1189 = t759 * t829;
t1187 = t760 * t827;
t1185 = t761 * t827;
t786 = t797 - t1092;
t1183 = t786 * t828;
t788 = t798 - t1091;
t1182 = t788 * t829;
t790 = t799 - t1090;
t1181 = t790 * t827;
t1175 = t818 * t871;
t1172 = t819 * t874;
t1169 = t820 * t872;
t1166 = t821 * t875;
t1163 = t822 * t873;
t1160 = t823 * t876;
t1105 = t910 * t896;
t836 = t904 * t897 + t1105;
t1153 = t836 * t866;
t1104 = t912 * t896;
t837 = t906 * t897 + t1104;
t1152 = t837 * t868;
t1103 = t914 * t896;
t838 = t908 * t897 + t1103;
t1151 = t838 * t870;
t920 = pkin(1) ^ 2;
t877 = qJ(2,3) ^ 2 + t920;
t1143 = t852 * t877;
t853 = 0.1e1 / t861 ^ 2;
t1142 = t853 * t865;
t1141 = t853 * t866;
t1140 = t853 * t874;
t878 = qJ(2,2) ^ 2 + t920;
t1138 = t854 * t878;
t855 = 0.1e1 / t862 ^ 2;
t1137 = t855 * t867;
t1136 = t855 * t868;
t1135 = t855 * t875;
t879 = qJ(2,1) ^ 2 + t920;
t1133 = t856 * t879;
t857 = 0.1e1 / t863 ^ 2;
t1132 = t857 * t869;
t1131 = t857 * t870;
t1130 = t857 * t876;
t1128 = t866 * t911;
t1126 = t868 * t913;
t1124 = t870 * t915;
t1117 = t911 ^ 2 * t866;
t1116 = t913 ^ 2 * t868;
t1115 = t915 ^ 2 * t870;
t1114 = t896 * t897;
t1109 = t898 * t918;
t1108 = t899 * t918;
t1107 = t900 * t918;
t1101 = t886 - 0.1e1 / 0.2e1;
t1100 = pkin(2) * t1204;
t1099 = pkin(2) * t1203;
t1098 = -0.2e1 * t1113;
t1097 = -0.2e1 * t1112;
t1096 = -0.2e1 * t1106;
t1095 = pkin(2) * t1129;
t1094 = pkin(2) * t1127;
t1093 = pkin(2) * t1125;
t1083 = t852 * t1180;
t1082 = t854 * t1179;
t1081 = t856 * t1178;
t812 = t818 ^ 2;
t1080 = t812 * t1141;
t813 = t819 ^ 2;
t1079 = t813 * t1141;
t814 = t820 ^ 2;
t1078 = t814 * t1136;
t815 = t821 ^ 2;
t1077 = t815 * t1136;
t816 = t822 ^ 2;
t1076 = t816 * t1131;
t817 = t823 ^ 2;
t1075 = t817 * t1131;
t1068 = t827 * t1151;
t1067 = t827 * t1124;
t1066 = t828 * t1153;
t1065 = t828 * t1128;
t1064 = t829 * t1152;
t1063 = t829 * t1126;
t830 = t836 ^ 2;
t1062 = t830 * t1141;
t831 = t837 ^ 2;
t1061 = t831 * t1136;
t832 = t838 ^ 2;
t1060 = t832 * t1131;
t1059 = t852 * t1129;
t1058 = t852 * t1128;
t1057 = t898 * t1142;
t1056 = t854 * t1127;
t1055 = t854 * t1126;
t1054 = t899 * t1137;
t1053 = t856 * t1125;
t1052 = t856 * t1124;
t1051 = t900 * t1132;
t1050 = t896 * t1109;
t1049 = t896 * t1108;
t1048 = t896 * t1107;
t1044 = t865 * t1100;
t1043 = t865 * t1099;
t1042 = t867 * t1100;
t1041 = t867 * t1099;
t1040 = t869 * t1100;
t1039 = t869 * t1099;
t1035 = t904 * t1095;
t1034 = t910 * t1095;
t1033 = t906 * t1094;
t1032 = t912 * t1094;
t1031 = t908 * t1093;
t1030 = t914 * t1093;
t1023 = t756 * t1066;
t1022 = t757 * t1066;
t1021 = t758 * t1064;
t1020 = t759 * t1064;
t1019 = t760 * t1068;
t1018 = t761 * t1068;
t1017 = t834 * t1083;
t1016 = t836 * t1083;
t1015 = t835 * t1082;
t1014 = t837 * t1082;
t1013 = t833 * t1081;
t1012 = t838 * t1081;
t1011 = t818 * t1058;
t1010 = t1140 * t1176;
t1009 = t819 * t1058;
t1008 = t819 * t871 * t1142;
t1007 = t819 * t818 * t1141;
t1006 = t820 * t1055;
t1005 = t1135 * t1170;
t1004 = t821 * t1055;
t1003 = t821 * t872 * t1137;
t1002 = t821 * t820 * t1136;
t1001 = t822 * t1052;
t1000 = t1130 * t1164;
t999 = t823 * t1052;
t998 = t823 * t873 * t1132;
t997 = t823 * t822 * t1131;
t996 = t838 * t1067;
t995 = t836 * t1065;
t994 = t837 * t1063;
t993 = t830 * t1058;
t992 = t831 * t1055;
t991 = t832 * t1052;
t990 = t871 * t1059;
t989 = t874 * t1059;
t988 = t898 * t1059;
t987 = t918 * t1057;
t986 = t872 * t1056;
t985 = t875 * t1056;
t984 = t899 * t1056;
t983 = t918 * t1054;
t982 = t873 * t1053;
t981 = t876 * t1053;
t980 = t900 * t1053;
t979 = t918 * t1051;
t978 = t1057 * t1175;
t977 = t1057 * t1172;
t976 = t1054 * t1169;
t975 = t1054 * t1166;
t974 = t1051 * t1163;
t973 = t1051 * t1160;
t972 = t871 * t988;
t971 = t874 * t988;
t970 = t871 * t987;
t969 = t874 * t987;
t968 = t872 * t984;
t967 = t875 * t984;
t966 = t872 * t983;
t965 = t875 * t983;
t964 = t873 * t980;
t963 = t876 * t980;
t962 = t873 * t979;
t961 = t876 * t979;
t948 = 0.2e1 * t836;
t947 = 0.2e1 * t837;
t946 = 0.2e1 * t838;
t945 = (t1172 + t1175) * t1142;
t944 = (t1166 + t1169) * t1137;
t943 = (t1160 + t1163) * t1132;
t936 = t818 * t1044 - t874 * t1050;
t935 = t819 * t1044 - t871 * t1050;
t934 = t820 * t1042 - t875 * t1049;
t933 = t821 * t1042 - t872 * t1049;
t932 = t822 * t1040 - t876 * t1048;
t931 = t823 * t1040 - t873 * t1048;
t930 = t897 * (t818 * t1043 - t874 * t1109);
t929 = t897 * (t819 * t1043 - t871 * t1109);
t928 = t897 * (t820 * t1041 - t875 * t1108);
t927 = t897 * (t821 * t1041 - t872 * t1108);
t926 = t897 * (t822 * t1039 - t876 * t1107);
t925 = t897 * (t823 * t1039 - t873 * t1107);
t924 = t822 * t1081 + t820 * t1082 + t818 * t1083 - t741 * t1125 - t737 * t1127 - t733 * t1129;
t923 = t823 * t1081 + t821 * t1082 + t819 * t1083 - t743 * t1125 - t739 * t1127 - t735 * t1129;
t922 = t758 * t1063 + t756 * t1065 + t760 * t1067 - t789 * t1070 - t787 * t1072 - t785 * t1074;
t921 = t759 * t1063 + t757 * t1065 + t761 * t1067 - t789 * t1069 - t787 * t1071 - t785 * t1073;
t919 = 0.1e1 / pkin(3) ^ 2;
t805 = (t894 - 0.1e1 / 0.2e1) * t1114 + t1101 * t914 * t908;
t804 = (t892 - 0.1e1 / 0.2e1) * t1114 + t1101 * t912 * t906;
t803 = (t890 - 0.1e1 / 0.2e1) * t1114 + t1101 * t910 * t904;
t784 = t1090 - t799 / 0.2e1;
t783 = t1091 - t798 / 0.2e1;
t782 = t1092 - t797 / 0.2e1;
t781 = (-pkin(1) * t808 + t879 * t915) * t869;
t780 = (-pkin(1) * t807 + t878 * t913) * t867;
t779 = (-pkin(1) * t806 + t877 * t911) * t865;
t778 = (t873 * t1130 + t872 * t1135 + t871 * t1140) * t919;
t777 = (t836 * t989 + t837 * t985 + t838 * t981) * t918;
t776 = (t833 * t981 + t834 * t989 + t835 * t985) * t918;
t775 = (t836 * t990 + t837 * t986 + t838 * t982) * t918;
t774 = (t833 * t982 + t834 * t990 + t835 * t986) * t918;
t773 = t1004 + t999 + t1009;
t772 = t1001 + t1006 + t1011;
t771 = 0.2e1 * qJ(2,1) * t999 + 0.2e1 * qJ(2,2) * t1004 + 0.2e1 * qJ(2,3) * t1009;
t770 = 0.2e1 * qJ(2,1) * t1001 + 0.2e1 * qJ(2,2) * t1006 + 0.2e1 * qJ(2,3) * t1011;
t769 = t1030 * t1204 + (t1031 * t1203 + t789 * t914) * t897 + t784 * t1096;
t768 = t1032 * t1204 + (t1033 * t1203 + t787 * t912) * t897 + t783 * t1097;
t767 = t1034 * t1204 + (t1035 * t1203 + t785 * t910) * t897 + t782 * t1098;
t766 = -0.2e1 * t886 * t1031 + 0.2e1 * (-t896 * t1030 - t908 * t784) * t897 - 0.2e1 * t784 * t1103;
t765 = -0.2e1 * t886 * t1033 + 0.2e1 * (-t896 * t1032 - t906 * t783) * t897 - 0.2e1 * t783 * t1104;
t764 = -0.2e1 * t886 * t1035 + 0.2e1 * (-t896 * t1034 - t904 * t782) * t897 - 0.2e1 * t782 * t1105;
t763 = t819 * t993 + t821 * t992 + t823 * t991;
t762 = t818 * t993 + t820 * t992 + t822 * t991;
t755 = t1002 + t997 + t1007;
t754 = 0.2e1 * qJ(2,1) * t997 + 0.2e1 * qJ(2,2) * t1002 + 0.2e1 * qJ(2,3) * t1007;
t747 = 0.4e1 * t804 * t1004 + 0.4e1 * t803 * t1009 + 0.4e1 * t805 * t999;
t746 = 0.4e1 * t805 * t1001 + 0.4e1 * t804 * t1006 + 0.4e1 * t803 * t1011;
t745 = t831 * t1002 + t830 * t1007 + t832 * t997;
t744 = t753 - t1024;
t742 = t752 - t1025;
t740 = t751 - t1026;
t738 = t750 - t1027;
t736 = t749 - t1028;
t734 = t748 - t1029;
t732 = t1024 - t753 / 0.2e1;
t731 = t1025 - t752 / 0.2e1;
t730 = t1026 - t751 / 0.2e1;
t729 = t1027 - t750 / 0.2e1;
t728 = t1028 - t749 / 0.2e1;
t727 = t1029 - t748 / 0.2e1;
t726 = (-pkin(1) * t1185 + t823 * t1133) * t869;
t725 = (-pkin(1) * t1187 + t822 * t1133) * t869;
t724 = (-pkin(1) * t1189 + t821 * t1138) * t867;
t723 = (-pkin(1) * t1191 + t820 * t1138) * t867;
t722 = (-pkin(1) * t1193 + t819 * t1143) * t865;
t721 = (-pkin(1) * t1195 + t818 * t1143) * t865;
t720 = 0.4e1 * t804 * t1002 + 0.4e1 * t803 * t1007 + 0.4e1 * t805 * t997;
t719 = (t836 * t945 + t837 * t944 + t838 * t943) * t918;
t718 = (t833 * t943 + t834 * t945 + t835 * t944) * t918;
t717 = t732 * t1096 + t743 * t1102 + (t908 * t925 + t914 * t931) * t856;
t716 = t731 * t1096 + t741 * t1102 + (t908 * t926 + t914 * t932) * t856;
t715 = t730 * t1097 + t739 * t1110 + (t906 * t927 + t912 * t933) * t854;
t714 = t729 * t1097 + t737 * t1110 + (t906 * t928 + t912 * t934) * t854;
t713 = t728 * t1098 + t735 * t1111 + (t904 * t929 + t910 * t935) * t852;
t712 = t727 * t1098 + t733 * t1111 + (t904 * t930 + t910 * t936) * t852;
t711 = -t732 * t946 + (-t908 * t931 + t914 * t925) * t856;
t710 = -t731 * t946 + (-t908 * t932 + t914 * t926) * t856;
t709 = -t730 * t947 + (-t906 * t933 + t912 * t927) * t854;
t708 = -t729 * t947 + (-t906 * t934 + t912 * t928) * t854;
t707 = -t728 * t948 + (-t904 * t935 + t910 * t929) * t852;
t706 = -t727 * t948 + (-t904 * t936 + t910 * t930) * t852;
t1 = [t1075 + t1077 + t1079, 0, 0, -t1207 * t897, t1207 * t896, 0.2e1 * qJ(2,1) * t1075 + 0.2e1 * qJ(2,2) * t1077 + 0.2e1 * qJ(2,3) * t1079, (t1162 * t726 + t1185 * t744) * t869 + (t1168 * t724 + t1189 * t740) * t867 + (t1174 * t722 + t1193 * t736) * t865, t1060 * t817 + t1061 * t815 + t1062 * t813, 0.4e1 * t1075 * t805 + 0.4e1 * t1077 * t804 + 0.4e1 * t1079 * t803, (t1003 * t837 + t1008 * t836 + t838 * t998) * t1202, (t1003 * t835 + t1008 * t834 + t833 * t998) * t1202, (t853 * t871 ^ 2 + t855 * t872 ^ 2 + t857 * t873 ^ 2) * t919, (-t838 * t962 + (t717 * t869 - t1184) * t856) * t823 + (-t837 * t966 + (t715 * t867 - t1188) * t854) * t821 + (-t836 * t970 + (t713 * t865 - t1192) * t852) * t819, (-t833 * t962 + (t711 * t869 + t1018) * t856) * t823 + (-t835 * t966 + (t709 * t867 + t1020) * t854) * t821 + (-t834 * t970 + (t707 * t865 + t1022) * t852) * t819, 1; t755, 0, 0, -t1209 * t897, t1209 * t896, t754, (t1162 * t725 + t1185 * t742) * t869 + (t1168 * t723 + t1189 * t738) * t867 + (t1174 * t721 + t1193 * t734) * t865, t745, t720, t719, t718, t778, (t1161 * t716 - t1084) * t856 + (t1167 * t714 - t1086) * t854 + (t1173 * t712 - t1088) * t852 + (-t836 * t978 - t837 * t976 - t838 * t974) * t918, (t1018 * t822 + t1161 * t710) * t856 + (t1020 * t820 + t1167 * t708) * t854 + (t1022 * t818 + t1173 * t706) * t852 + (-t833 * t974 - t834 * t978 - t835 * t976) * t918, 0; t773, 0, 0, -t921 * t897, t921 * t896, t771, (t1162 * t781 + t1181 * t761) * t869 + (t1168 * t780 + t1182 * t759) * t867 + (t1174 * t779 + t1183 * t757) * t865, t763, t747, t775, t774, 0, t767 * t1073 + t768 * t1071 + t769 * t1069 - t757 * t1128 - t759 * t1126 - t761 * t1124 + (-t836 * t972 - t837 * t968 - t838 * t964) * t918, t757 * t995 + t759 * t994 + t761 * t996 + t764 * t1073 + t765 * t1071 + t766 * t1069 + (-t833 * t964 - t834 * t972 - t835 * t968) * t918, 0; t755, 0, 0, -t1210 * t897, t1210 * t896, t754, (t1165 * t726 + t1187 * t744) * t869 + (t1171 * t724 + t1191 * t740) * t867 + (t1177 * t722 + t1195 * t736) * t865, t745, t720, t719, t718, t778, (t1164 * t717 - t1085) * t856 + (t1170 * t715 - t1087) * t854 + (t1176 * t713 - t1089) * t852 + (-t836 * t977 - t837 * t975 - t838 * t973) * t918, (t1019 * t823 + t1164 * t711) * t856 + (t1021 * t821 + t1170 * t709) * t854 + (t1023 * t819 + t1176 * t707) * t852 + (-t833 * t973 - t834 * t977 - t835 * t975) * t918, 0; t1076 + t1078 + t1080, 0, 0, -t1206 * t897, t1206 * t896, 0.2e1 * qJ(2,1) * t1076 + 0.2e1 * qJ(2,2) * t1078 + 0.2e1 * qJ(2,3) * t1080, (t1165 * t725 + t1187 * t742) * t869 + (t1171 * t723 + t1191 * t738) * t867 + (t1177 * t721 + t1195 * t734) * t865, t1060 * t816 + t1061 * t814 + t1062 * t812, 0.4e1 * t1076 * t805 + 0.4e1 * t1078 * t804 + 0.4e1 * t1080 * t803, (t1000 * t838 + t1005 * t837 + t1010 * t836) * t1202, (t1000 * t833 + t1005 * t835 + t1010 * t834) * t1202, (t853 * t874 ^ 2 + t855 * t875 ^ 2 + t857 * t876 ^ 2) * t919, (-t838 * t961 + (t716 * t869 - t1186) * t856) * t822 + (-t837 * t965 + (t714 * t867 - t1190) * t854) * t820 + (-t836 * t969 + (t712 * t865 - t1194) * t852) * t818, (-t833 * t961 + (t710 * t869 + t1019) * t856) * t822 + (-t835 * t965 + (t708 * t867 + t1021) * t854) * t820 + (-t834 * t969 + (t706 * t865 + t1023) * t852) * t818, 1; t772, 0, 0, -t922 * t897, t922 * t896, t770, (t1165 * t781 + t1181 * t760) * t869 + (t1171 * t780 + t1182 * t758) * t867 + (t1177 * t779 + t1183 * t756) * t865, t762, t746, t777, t776, 0, t767 * t1074 + t768 * t1072 + t769 * t1070 - t756 * t1128 - t758 * t1126 - t760 * t1124 + (-t836 * t971 - t837 * t967 - t838 * t963) * t918, t756 * t995 + t758 * t994 + t760 * t996 + t764 * t1074 + t765 * t1072 + t766 * t1070 + (-t833 * t963 - t834 * t971 - t835 * t967) * t918, 0; t773, 0, 0, -t923 * t897, t923 * t896, t771, (t726 * t915 + t744 * t808) * t869 + (t724 * t913 + t740 * t807) * t867 + (t722 * t911 + t736 * t806) * t865, t763, t747, t775, t774, 0, -t1013 * t823 - t1015 * t821 - t1017 * t819 + t1125 * t717 + t1127 * t715 + t1129 * t713, t1012 * t823 + t1014 * t821 + t1016 * t819 + t1125 * t711 + t1127 * t709 + t1129 * t707, 0; t772, 0, 0, -t924 * t897, t924 * t896, t770, (t725 * t915 + t742 * t808) * t869 + (t723 * t913 + t738 * t807) * t867 + (t721 * t911 + t734 * t806) * t865, t762, t746, t777, t776, 0, -t1013 * t822 - t1015 * t820 - t1017 * t818 + t1125 * t716 + t1127 * t714 + t1129 * t712, t1012 * t822 + t1014 * t820 + t1016 * t818 + t1125 * t710 + t1127 * t708 + t1129 * t706, 0; t1115 + t1116 + t1117, 0, 0, t1208 * t897, -t1208 * t896, 0.2e1 * qJ(2,1) * t1115 + 0.2e1 * qJ(2,2) * t1116 + 0.2e1 * qJ(2,3) * t1117, (t781 * t915 + t790 * t808) * t869 + (t780 * t913 + t788 * t807) * t867 + (t779 * t911 + t786 * t806) * t865, t1115 * t832 + t1116 * t831 + t1117 * t830, 0.4e1 * t1115 * t805 + 0.4e1 * t1116 * t804 + 0.4e1 * t1117 * t803, 0, 0, 0, (-t1178 * t833 + t769 * t869) * t915 + (-t1179 * t835 + t768 * t867) * t913 + (-t1180 * t834 + t767 * t865) * t911, (t1151 * t808 + t766 * t869) * t915 + (t1152 * t807 + t765 * t867) * t913 + (t1153 * t806 + t764 * t865) * t911, 1;];
tau_reg  = t1;
