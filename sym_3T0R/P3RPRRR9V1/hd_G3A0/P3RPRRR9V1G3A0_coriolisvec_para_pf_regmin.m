% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RPRRR9V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:58
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR9V1G3A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G3A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:57:17
% EndTime: 2020-08-06 18:57:30
% DurationCPUTime: 12.93s
% Computational Cost: add. (69877->567), mult. (111885->1165), div. (6438->21), fcn. (82854->36), ass. (0->509)
t1828 = 2 * pkin(3);
t1437 = legFrame(3,2);
t1410 = sin(t1437);
t1413 = cos(t1437);
t1454 = xDP(2);
t1455 = xDP(1);
t1349 = t1410 * t1455 + t1413 * t1454;
t1835 = 0.2e1 * t1349;
t1438 = legFrame(2,2);
t1411 = sin(t1438);
t1414 = cos(t1438);
t1350 = t1411 * t1455 + t1414 * t1454;
t1834 = 0.2e1 * t1350;
t1439 = legFrame(1,2);
t1412 = sin(t1439);
t1415 = cos(t1439);
t1351 = t1412 * t1455 + t1415 * t1454;
t1833 = 0.2e1 * t1351;
t1433 = cos(pkin(7));
t1398 = t1433 * pkin(2);
t1379 = t1398 + pkin(1);
t1427 = pkin(7) + qJ(3,1);
t1397 = cos(t1427);
t1811 = pkin(3) * t1397;
t1366 = t1379 + t1811;
t1426 = pkin(7) + qJ(3,2);
t1396 = cos(t1426);
t1812 = pkin(3) * t1396;
t1365 = t1379 + t1812;
t1425 = pkin(7) + qJ(3,3);
t1395 = cos(t1425);
t1813 = pkin(3) * t1395;
t1364 = t1379 + t1813;
t1441 = sin(qJ(1,3));
t1447 = cos(qJ(1,3));
t1453 = xDP(3);
t1527 = t1410 * t1454 - t1413 * t1455;
t1331 = -t1441 * t1453 - t1527 * t1447;
t1392 = sin(t1425);
t1711 = t1392 * t1349;
t1307 = t1331 * t1395 + t1711;
t1380 = 0.1e1 / t1395;
t1473 = t1395 ^ 2;
t1381 = 0.1e1 / t1473;
t1434 = pkin(5) + qJ(2,3);
t1421 = pkin(6) + t1434;
t1401 = 0.1e1 / t1421;
t1744 = t1349 * t1401;
t1599 = t1381 * t1744;
t1467 = 1 / pkin(3);
t1742 = t1349 * t1467;
t1823 = 0.2e1 * t1425;
t1295 = (-t1307 * sin(t1823) / 0.2e1 + t1364 * t1742) * t1380 * t1599;
t1402 = 0.1e1 / t1421 ^ 2;
t1403 = t1401 * t1402;
t1424 = t1433 ^ 2;
t1446 = cos(qJ(3,3));
t1428 = t1446 ^ 2;
t1432 = sin(pkin(7));
t1440 = sin(qJ(3,3));
t1419 = pkin(1) * t1453;
t1578 = -(t1527 * t1421 + t1419) * t1441 + (-t1527 * pkin(1) + t1421 * t1453) * t1447;
t1695 = t1446 * t1440;
t1698 = t1432 * t1440;
t1399 = pkin(1) * t1432;
t1735 = (-t1440 * pkin(3) + t1399) * t1446;
t1743 = t1349 * t1440;
t1756 = t1331 * t1428;
t1280 = ((t1331 * t1446 + t1743) * pkin(2) + (t1695 * t1835 - t1331 + 0.2e1 * t1756) * pkin(3)) * t1424 + (t1578 * t1446 + pkin(1) * t1743 + ((-t1331 * t1440 + t1349 * t1446) * pkin(2) + (-0.2e1 * t1331 * t1695 + t1428 * t1835 - t1349) * pkin(3)) * t1432) * t1433 - pkin(3) * t1756 + t1349 * t1735 - t1578 * t1698 + pkin(3) * t1331;
t1359 = t1433 * t1446 - t1698;
t1353 = 0.1e1 / t1359;
t1786 = t1280 * t1353;
t1638 = t1403 * t1786;
t1574 = t1364 * t1638;
t1729 = t1380 * t1401;
t1630 = t1307 * t1729;
t1302 = pkin(1) * t1630;
t1460 = 0.2e1 * pkin(7);
t1463 = (qJ(2,3) ^ 2);
t1466 = pkin(3) ^ 2;
t1470 = pkin(2) ^ 2;
t1471 = pkin(1) ^ 2;
t1497 = -t1470 * cos(t1460) - (2 * pkin(6) ^ 2) - t1466 - t1470 - 0.2e1 * t1471 + ((-4 * pkin(6) - 2 * pkin(5)) * pkin(5));
t1637 = t1401 * t1786;
t1672 = pkin(2) * t1828;
t1768 = t1307 * t1401;
t1817 = -4 * pkin(5) - 4 * pkin(6);
t1829 = 0.2e1 * pkin(1);
t1662 = (t1637 * t1829 + 0.4e1 * (-t1398 - t1813) * (t1302 - t1637 / 0.2e1) + (0.2e1 * t1421 * t1711 + ((qJ(2,3) * t1817) - t1466 * cos(t1823) - (2 * t1463) + (-cos(qJ(3,3) + t1460) - t1446) * t1672 + t1497) * t1768) * t1380) * t1402 / 0.2e1;
t1770 = t1307 * t1380;
t1490 = -(t1574 + t1662) * t1770 + t1295;
t1443 = sin(qJ(1,2));
t1449 = cos(qJ(1,2));
t1526 = t1411 * t1454 - t1414 * t1455;
t1332 = -t1443 * t1453 - t1526 * t1449;
t1393 = sin(t1426);
t1710 = t1393 * t1350;
t1308 = t1332 * t1396 + t1710;
t1384 = 0.1e1 / t1396;
t1476 = t1396 ^ 2;
t1385 = 0.1e1 / t1476;
t1435 = pkin(5) + qJ(2,2);
t1422 = pkin(6) + t1435;
t1404 = 1 / t1422;
t1741 = t1350 * t1404;
t1597 = t1385 * t1741;
t1739 = t1350 * t1467;
t1822 = 0.2e1 * t1426;
t1296 = (-t1308 * sin(t1822) / 0.2e1 + t1365 * t1739) * t1384 * t1597;
t1405 = 1 / t1422 ^ 2;
t1406 = t1404 * t1405;
t1448 = cos(qJ(3,2));
t1429 = t1448 ^ 2;
t1442 = sin(qJ(3,2));
t1577 = -(t1526 * t1422 + t1419) * t1443 + (-t1526 * pkin(1) + t1422 * t1453) * t1449;
t1694 = t1448 * t1442;
t1697 = t1432 * t1442;
t1734 = (-t1442 * pkin(3) + t1399) * t1448;
t1740 = t1350 * t1442;
t1755 = t1332 * t1429;
t1281 = ((t1332 * t1448 + t1740) * pkin(2) + (t1694 * t1834 - t1332 + 0.2e1 * t1755) * pkin(3)) * t1424 + (t1577 * t1448 + pkin(1) * t1740 + ((-t1332 * t1442 + t1350 * t1448) * pkin(2) + (-0.2e1 * t1332 * t1694 + t1429 * t1834 - t1350) * pkin(3)) * t1432) * t1433 - pkin(3) * t1755 + t1350 * t1734 - t1577 * t1697 + pkin(3) * t1332;
t1360 = t1433 * t1448 - t1697;
t1354 = 0.1e1 / t1360;
t1785 = t1281 * t1354;
t1636 = t1406 * t1785;
t1572 = t1365 * t1636;
t1723 = t1384 * t1404;
t1625 = t1308 * t1723;
t1303 = pkin(1) * t1625;
t1464 = qJ(2,2) ^ 2;
t1635 = t1404 * t1785;
t1763 = t1308 * t1404;
t1661 = (t1635 * t1829 + 0.4e1 * (-t1398 - t1812) * (t1303 - t1635 / 0.2e1) + (0.2e1 * t1422 * t1710 + ((qJ(2,2) * t1817) - t1466 * cos(t1822) - (2 * t1464) + (-cos(qJ(3,2) + t1460) - t1448) * t1672 + t1497) * t1763) * t1384) * t1405 / 0.2e1;
t1765 = t1308 * t1384;
t1489 = -(t1572 + t1661) * t1765 + t1296;
t1445 = sin(qJ(1,1));
t1451 = cos(qJ(1,1));
t1525 = t1412 * t1454 - t1415 * t1455;
t1333 = -t1445 * t1453 - t1525 * t1451;
t1394 = sin(t1427);
t1709 = t1394 * t1351;
t1309 = t1333 * t1397 + t1709;
t1388 = 0.1e1 / t1397;
t1479 = t1397 ^ 2;
t1389 = 0.1e1 / t1479;
t1436 = pkin(5) + qJ(2,1);
t1423 = pkin(6) + t1436;
t1407 = 1 / t1423;
t1738 = t1351 * t1407;
t1595 = t1389 * t1738;
t1736 = t1351 * t1467;
t1821 = 0.2e1 * t1427;
t1297 = (-t1309 * sin(t1821) / 0.2e1 + t1366 * t1736) * t1388 * t1595;
t1408 = 1 / t1423 ^ 2;
t1409 = t1407 * t1408;
t1450 = cos(qJ(3,1));
t1430 = t1450 ^ 2;
t1444 = sin(qJ(3,1));
t1576 = -(t1525 * t1423 + t1419) * t1445 + (-t1525 * pkin(1) + t1423 * t1453) * t1451;
t1693 = t1450 * t1444;
t1696 = t1444 * t1432;
t1733 = (-t1444 * pkin(3) + t1399) * t1450;
t1737 = t1351 * t1444;
t1754 = t1333 * t1430;
t1282 = ((t1333 * t1450 + t1737) * pkin(2) + (t1693 * t1833 - t1333 + 0.2e1 * t1754) * pkin(3)) * t1424 + (t1576 * t1450 + pkin(1) * t1737 + ((-t1333 * t1444 + t1351 * t1450) * pkin(2) + (-0.2e1 * t1333 * t1693 + t1430 * t1833 - t1351) * pkin(3)) * t1432) * t1433 - pkin(3) * t1754 + t1351 * t1733 - t1576 * t1696 + pkin(3) * t1333;
t1358 = t1450 * t1433 - t1696;
t1352 = 0.1e1 / t1358;
t1784 = t1282 * t1352;
t1634 = t1409 * t1784;
t1570 = t1366 * t1634;
t1717 = t1388 * t1407;
t1620 = t1309 * t1717;
t1301 = pkin(1) * t1620;
t1465 = qJ(2,1) ^ 2;
t1633 = t1407 * t1784;
t1758 = t1309 * t1407;
t1660 = (t1633 * t1829 + 0.4e1 * (-t1398 - t1811) * (t1301 - t1633 / 0.2e1) + (0.2e1 * t1423 * t1709 + ((qJ(2,1) * t1817) - t1466 * cos(t1821) - (2 * t1465) + (-cos(t1460 + qJ(3,1)) - t1450) * t1672 + t1497) * t1758) * t1388) * t1408 / 0.2e1;
t1760 = t1309 * t1388;
t1488 = -(t1570 + t1660) * t1760 + t1297;
t1390 = t1388 * t1389;
t1571 = t1309 * t1634;
t1716 = t1388 * t1433;
t1666 = pkin(2) * t1716;
t1348 = t1351 ^ 2;
t1745 = t1348 * t1407;
t1757 = t1309 * t1408;
t1271 = t1467 * t1390 * t1745 + (-(-t1301 + (t1784 + (-pkin(3) - t1666) * t1309) * t1407) * t1757 - t1571) * t1388;
t1810 = t1271 * pkin(1);
t1259 = -t1488 + 0.2e1 * t1810;
t1382 = t1380 * t1381;
t1575 = t1307 * t1638;
t1728 = t1380 * t1433;
t1668 = pkin(2) * t1728;
t1346 = t1349 ^ 2;
t1747 = t1346 * t1401;
t1767 = t1307 * t1402;
t1272 = t1467 * t1382 * t1747 + (-(-t1302 + (t1786 + (-pkin(3) - t1668) * t1307) * t1401) * t1767 - t1575) * t1380;
t1809 = t1272 * pkin(1);
t1261 = -t1490 + 0.2e1 * t1809;
t1386 = t1384 * t1385;
t1573 = t1308 * t1636;
t1722 = t1384 * t1433;
t1667 = pkin(2) * t1722;
t1347 = t1350 ^ 2;
t1746 = t1347 * t1404;
t1762 = t1308 * t1405;
t1273 = t1467 * t1386 * t1746 + (-(-t1303 + (t1785 + (-pkin(3) - t1667) * t1308) * t1404) * t1762 - t1573) * t1384;
t1808 = t1273 * pkin(1);
t1263 = -t1489 + 0.2e1 * t1808;
t1700 = t1415 * t1451;
t1342 = t1412 * t1394 + t1397 * t1700;
t1748 = t1342 * t1388;
t1701 = t1414 * t1449;
t1340 = t1411 * t1393 + t1396 * t1701;
t1750 = t1340 * t1384;
t1702 = t1413 * t1447;
t1338 = t1410 * t1392 + t1395 * t1702;
t1752 = t1338 * t1380;
t1689 = t1451 * pkin(1) + t1445 * t1423;
t1312 = t1689 * t1696 + (t1430 - 0.1e1) * t1451 * pkin(3);
t1802 = t1450 * pkin(2);
t1805 = t1430 * pkin(3);
t1336 = pkin(1) * t1444 + (-pkin(3) + t1802 + 0.2e1 * t1805) * t1432;
t1461 = -pkin(3) / 0.2e1;
t1369 = t1805 + t1802 / 0.2e1 + t1461;
t1588 = t1451 * t1696;
t1513 = pkin(2) * t1588 + (t1588 * t1828 - t1689) * t1450;
t1462 = pkin(2) / 0.2e1;
t1730 = (t1450 * pkin(3) + t1462) * t1444;
t1824 = 0.2e1 * t1424;
t1294 = (t1369 * t1700 + t1412 * t1730) * t1824 + (t1412 * t1336 - t1513 * t1415) * t1433 - t1312 * t1415 + t1412 * t1733;
t1778 = t1294 * t1271;
t1687 = pkin(1) * t1449 + t1443 * t1422;
t1311 = t1687 * t1697 + (t1429 - 0.1e1) * t1449 * pkin(3);
t1803 = t1448 * pkin(2);
t1806 = t1429 * pkin(3);
t1335 = pkin(1) * t1442 + (-pkin(3) + t1803 + 0.2e1 * t1806) * t1432;
t1368 = t1806 + t1803 / 0.2e1 + t1461;
t1589 = t1449 * t1697;
t1514 = pkin(2) * t1589 + (t1589 * t1828 - t1687) * t1448;
t1731 = (t1448 * pkin(3) + t1462) * t1442;
t1292 = (t1368 * t1701 + t1411 * t1731) * t1824 + (t1411 * t1335 - t1514 * t1414) * t1433 - t1311 * t1414 + t1411 * t1734;
t1780 = t1292 * t1273;
t1688 = pkin(1) * t1447 + t1441 * t1421;
t1310 = t1688 * t1698 + (t1428 - 0.1e1) * t1447 * pkin(3);
t1804 = t1446 * pkin(2);
t1807 = t1428 * pkin(3);
t1334 = pkin(1) * t1440 + (-pkin(3) + t1804 + 0.2e1 * t1807) * t1432;
t1367 = t1807 + t1804 / 0.2e1 + t1461;
t1590 = t1447 * t1698;
t1515 = pkin(2) * t1590 + (t1590 * t1828 - t1688) * t1446;
t1732 = (t1446 * pkin(3) + t1462) * t1440;
t1290 = (t1367 * t1702 + t1410 * t1732) * t1824 + (t1410 * t1334 - t1515 * t1413) * t1433 - t1310 * t1413 + t1410 * t1735;
t1782 = t1290 * t1272;
t1832 = t1401 * (t1261 * t1752 - t1353 * t1782) + t1404 * (t1263 * t1750 - t1354 * t1780) + t1407 * (t1259 * t1748 - t1352 * t1778);
t1703 = t1412 * t1451;
t1341 = t1415 * t1394 - t1397 * t1703;
t1749 = t1341 * t1388;
t1704 = t1411 * t1449;
t1339 = t1414 * t1393 - t1396 * t1704;
t1751 = t1339 * t1384;
t1705 = t1410 * t1447;
t1337 = t1413 * t1392 - t1395 * t1705;
t1753 = t1337 * t1380;
t1293 = (-t1369 * t1703 + t1415 * t1730) * t1824 + (t1415 * t1336 + t1513 * t1412) * t1433 + t1312 * t1412 + t1415 * t1733;
t1779 = t1293 * t1271;
t1291 = (-t1368 * t1704 + t1414 * t1731) * t1824 + (t1414 * t1335 + t1514 * t1411) * t1433 + t1311 * t1411 + t1414 * t1734;
t1781 = t1291 * t1273;
t1289 = (-t1367 * t1705 + t1413 * t1732) * t1824 + (t1413 * t1334 + t1515 * t1410) * t1433 + t1310 * t1410 + t1413 * t1735;
t1783 = t1289 * t1272;
t1831 = t1401 * (t1261 * t1753 - t1353 * t1783) + t1404 * (t1263 * t1751 - t1354 * t1781) + t1407 * (t1259 * t1749 - t1352 * t1779);
t1329 = -t1365 * t1443 + t1422 * t1449;
t1792 = t1273 * t1329;
t1328 = -t1364 * t1441 + t1421 * t1447;
t1795 = t1272 * t1328;
t1330 = -t1366 * t1445 + t1423 * t1451;
t1798 = t1271 * t1330;
t1830 = t1401 * (t1261 * t1441 + t1795) + t1404 * (t1263 * t1443 + t1792) + t1407 * (t1259 * t1445 + t1798);
t1820 = -0.2e1 * t1440;
t1819 = -0.2e1 * t1442;
t1818 = -0.2e1 * t1444;
t1816 = 0.1e1 - 0.2e1 * t1424;
t1815 = 0.4e1 * t1424 - 0.2e1;
t1814 = pkin(2) * t1424;
t1260 = t1488 - t1810;
t1801 = t1260 * t1407;
t1262 = t1490 - t1809;
t1800 = t1262 * t1401;
t1264 = t1489 - t1808;
t1799 = t1264 * t1404;
t1363 = t1450 * t1432 + t1444 * t1433;
t1797 = t1271 * t1363;
t1796 = t1271 * t1388;
t1361 = t1446 * t1432 + t1440 * t1433;
t1794 = t1272 * t1361;
t1793 = t1272 * t1380;
t1362 = t1448 * t1432 + t1442 * t1433;
t1791 = t1273 * t1362;
t1790 = t1273 * t1384;
t1681 = -0.2e1 * t1786;
t1789 = (t1302 + (t1307 * t1668 + t1681) * t1401) * t1401;
t1679 = -0.2e1 * t1785;
t1788 = (t1303 + (t1308 * t1667 + t1679) * t1404) * t1404;
t1677 = -0.2e1 * t1784;
t1787 = (t1301 + (t1309 * t1666 + t1677) * t1407) * t1407;
t1304 = t1307 ^ 2;
t1777 = t1304 * t1410;
t1776 = t1304 * t1413;
t1305 = t1308 ^ 2;
t1775 = t1305 * t1411;
t1774 = t1305 * t1414;
t1306 = t1309 ^ 2;
t1773 = t1306 * t1412;
t1772 = t1306 * t1415;
t1771 = t1307 * t1349;
t1769 = t1307 * t1381;
t1766 = t1308 * t1350;
t1764 = t1308 * t1385;
t1761 = t1309 * t1351;
t1759 = t1309 * t1389;
t1727 = t1381 * t1403;
t1726 = t1382 * t1392;
t1725 = t1382 * t1402;
t1724 = 0.1e1 / t1473 ^ 2 * t1392;
t1721 = t1385 * t1406;
t1720 = t1386 * t1393;
t1719 = t1386 * t1405;
t1718 = 0.1e1 / t1476 ^ 2 * t1393;
t1715 = t1389 * t1409;
t1714 = t1390 * t1394;
t1713 = t1390 * t1408;
t1712 = 0.1e1 / t1479 ^ 2 * t1394;
t1708 = t1401 * t1441;
t1707 = t1404 * t1443;
t1706 = t1407 * t1445;
t1699 = t1432 * t1433;
t1598 = t1434 * t1742;
t1548 = t1598 / 0.2e1;
t1565 = t1440 * t1630;
t1692 = t1380 * t1446 * t1548 + pkin(1) * t1565;
t1596 = t1435 * t1739;
t1547 = t1596 / 0.2e1;
t1563 = t1442 * t1625;
t1691 = t1384 * t1448 * t1547 + pkin(1) * t1563;
t1594 = t1436 * t1736;
t1546 = t1594 / 0.2e1;
t1561 = t1444 * t1620;
t1690 = t1388 * t1450 * t1546 + pkin(1) * t1561;
t1686 = t1424 - 0.1e1 / 0.2e1;
t1682 = 0.2e1 * t1280 * t1307;
t1680 = 0.2e1 * t1281 * t1308;
t1678 = 0.2e1 * t1282 * t1309;
t1676 = t1402 * t1835;
t1675 = t1405 * t1834;
t1674 = t1408 * t1833;
t1673 = -0.4e1 * t1699;
t1671 = t1271 * t1814;
t1670 = t1272 * t1814;
t1669 = t1273 * t1814;
t1665 = qJ(2,1) * t1715;
t1664 = qJ(2,2) * t1721;
t1663 = qJ(2,3) * t1727;
t1659 = t1352 * t1797;
t1658 = t1271 * t1717;
t1657 = t1412 * t1796;
t1656 = t1415 * t1796;
t1655 = t1436 * t1796;
t1654 = t1353 * t1794;
t1653 = t1272 * t1729;
t1652 = t1410 * t1793;
t1651 = t1413 * t1793;
t1650 = t1434 * t1793;
t1649 = t1354 * t1791;
t1648 = t1273 * t1723;
t1647 = t1411 * t1790;
t1646 = t1414 * t1790;
t1645 = t1435 * t1790;
t1644 = t1410 * t1789;
t1643 = t1413 * t1789;
t1642 = t1411 * t1788;
t1641 = t1414 * t1788;
t1640 = t1412 * t1787;
t1639 = t1415 * t1787;
t1632 = t1337 * t1771;
t1631 = t1338 * t1771;
t1629 = t1381 * t1767;
t1628 = t1446 * t1768;
t1627 = t1339 * t1766;
t1626 = t1340 * t1766;
t1624 = t1385 * t1762;
t1623 = t1448 * t1763;
t1622 = t1341 * t1761;
t1621 = t1342 * t1761;
t1619 = t1389 * t1757;
t1618 = t1450 * t1758;
t1316 = (t1428 - 0.1e1 / 0.2e1) * t1699 + t1686 * t1695;
t1617 = t1316 * t1725;
t1317 = (t1429 - 0.1e1 / 0.2e1) * t1699 + t1686 * t1694;
t1616 = t1317 * t1719;
t1318 = (t1430 - 0.1e1 / 0.2e1) * t1699 + t1686 * t1693;
t1615 = t1318 * t1713;
t1325 = t1815 * t1428 + t1673 * t1695 + t1816;
t1614 = t1325 * t1725;
t1326 = t1815 * t1430 + t1673 * t1693 + t1816;
t1613 = t1326 * t1713;
t1327 = t1815 * t1429 + t1673 * t1694 + t1816;
t1612 = t1327 * t1719;
t1611 = t1337 * t1729;
t1610 = t1338 * t1729;
t1609 = t1339 * t1723;
t1608 = t1340 * t1723;
t1607 = t1341 * t1717;
t1606 = t1342 * t1717;
t1605 = t1346 * t1724;
t1604 = t1346 * t1708;
t1603 = t1347 * t1718;
t1602 = t1347 * t1707;
t1601 = t1348 * t1712;
t1600 = t1348 * t1706;
t1593 = t1380 * t1708;
t1592 = t1384 * t1707;
t1591 = t1388 * t1706;
t1587 = t1272 * t1708;
t1586 = t1273 * t1707;
t1585 = t1271 * t1706;
t1539 = pkin(2) * t1380 * t1628;
t1286 = -t1424 * t1539 + (t1440 * t1548 + (-pkin(1) * t1446 + pkin(2) * t1698) * t1768) * t1728 + t1432 * t1692;
t1584 = 0.2e1 * t1286 * t1744;
t1538 = pkin(2) * t1384 * t1623;
t1287 = -t1424 * t1538 + (t1442 * t1547 + (-pkin(1) * t1448 + pkin(2) * t1697) * t1763) * t1722 + t1691 * t1432;
t1583 = 0.2e1 * t1287 * t1741;
t1537 = pkin(2) * t1388 * t1618;
t1288 = -t1424 * t1537 + (t1444 * t1546 + (-pkin(1) * t1450 + pkin(2) * t1696) * t1758) * t1716 + t1690 * t1432;
t1582 = 0.2e1 * t1288 * t1738;
t1581 = t1353 * t1676;
t1580 = t1354 * t1675;
t1579 = t1352 * t1674;
t1569 = t1304 * t1353 * t1727;
t1568 = t1305 * t1354 * t1721;
t1567 = t1306 * t1352 * t1715;
t1566 = t1328 * t1629;
t1564 = t1329 * t1624;
t1562 = t1330 * t1619;
t1560 = t1272 * t1611;
t1559 = t1272 * t1610;
t1558 = t1273 * t1609;
t1557 = t1273 * t1608;
t1556 = t1271 * t1607;
t1555 = t1271 * t1606;
t1554 = t1410 * t1650;
t1553 = t1411 * t1645;
t1552 = t1412 * t1655;
t1551 = t1413 * t1650;
t1550 = t1414 * t1645;
t1549 = t1415 * t1655;
t1545 = 0.4e1 * t1318 * t1658;
t1544 = 0.4e1 * t1316 * t1653;
t1543 = 0.4e1 * t1317 * t1648;
t1283 = t1565 * t1814 + (t1432 * t1539 + t1692) * t1433 + (pkin(1) * t1628 - t1440 * t1598 / 0.2e1) * t1380 * t1432;
t1542 = -0.2e1 * t1283 * t1599;
t1284 = t1563 * t1814 + (t1432 * t1538 + t1691) * t1433 + (pkin(1) * t1623 - t1442 * t1596 / 0.2e1) * t1384 * t1432;
t1541 = -0.2e1 * t1284 * t1597;
t1285 = t1561 * t1814 + (t1432 * t1537 + t1690) * t1433 + (pkin(1) * t1618 - t1444 * t1594 / 0.2e1) * t1388 * t1432;
t1540 = -0.2e1 * t1285 * t1595;
t1536 = t1349 * t1441 * t1629;
t1535 = t1350 * t1443 * t1624;
t1534 = t1351 * t1445 * t1619;
t1468 = 1 / pkin(3) ^ 2;
t1533 = t1346 * t1434 * t1468 * t1726;
t1532 = t1347 * t1435 * t1468 * t1720;
t1531 = t1348 * t1436 * t1468 * t1714;
t1256 = t1810 - t1297 / 0.2e1 + (t1660 / 0.2e1 + t1570 / 0.2e1) * t1760;
t1524 = -0.2e1 * t1271 * t1398 - 0.2e1 * t1256;
t1257 = t1809 - t1295 / 0.2e1 + (t1662 / 0.2e1 + t1574 / 0.2e1) * t1770;
t1523 = -0.2e1 * t1272 * t1398 - 0.2e1 * t1257;
t1258 = t1808 - t1296 / 0.2e1 + (t1661 / 0.2e1 + t1572 / 0.2e1) * t1765;
t1522 = -0.2e1 * t1273 * t1398 - 0.2e1 * t1258;
t1521 = t1446 * t1533;
t1520 = t1448 * t1532;
t1519 = t1450 * t1531;
t1518 = t1440 * t1533;
t1517 = t1442 * t1532;
t1516 = t1444 * t1531;
t1503 = (t1359 * t1382 + t1361 * t1724) * t1747;
t1502 = (t1359 * t1724 - t1361 * t1382) * t1747;
t1501 = (t1360 * t1386 + t1362 * t1718) * t1746;
t1500 = (t1360 * t1718 - t1362 * t1386) * t1746;
t1499 = (t1358 * t1390 + t1363 * t1712) * t1745;
t1498 = (t1358 * t1712 - t1363 * t1390) * t1745;
t1496 = (-t1328 * t1304 * t1381 + t1441 * t1681 * t1770) * t1403;
t1495 = (-t1329 * t1305 * t1385 + t1443 * t1679 * t1765) * t1406;
t1494 = (-t1330 * t1306 * t1389 + t1445 * t1677 * t1760) * t1409;
t1493 = 0.2e1 * qJ(2,1) * t1658 + 0.2e1 * t1389 * t1571;
t1492 = 0.2e1 * qJ(2,2) * t1648 + 0.2e1 * t1385 * t1573;
t1491 = 0.2e1 * qJ(2,3) * t1653 + 0.2e1 * t1381 * t1575;
t1469 = t1467 / t1466;
t1357 = t1363 ^ 2;
t1356 = t1362 ^ 2;
t1355 = t1361 ^ 2;
t1255 = (t1465 + t1471) * t1271 - pkin(1) * t1488;
t1254 = (t1464 + t1471) * t1273 - pkin(1) * t1489;
t1253 = (t1463 + t1471) * t1272 - pkin(1) * t1490;
t1252 = 0.2e1 * t1450 * t1671 + (t1259 * t1450 - t1516) * t1433 + (t1444 * t1524 - t1519) * t1432;
t1251 = 0.2e1 * t1448 * t1669 + (t1263 * t1448 - t1517) * t1433 + (t1442 * t1522 - t1520) * t1432;
t1250 = 0.2e1 * t1446 * t1670 + (t1261 * t1446 - t1518) * t1433 + (t1440 * t1523 - t1521) * t1432;
t1249 = t1671 * t1818 + (t1256 * t1818 - t1519) * t1433 + (t1450 * t1524 + t1516) * t1432;
t1248 = t1669 * t1819 + (t1258 * t1819 - t1520) * t1433 + (t1448 * t1522 + t1517) * t1432;
t1247 = t1670 * t1820 + (t1257 * t1820 - t1521) * t1433 + (t1446 * t1523 + t1518) * t1432;
t1 = [t1555 + t1557 + t1559, 0, 0, t1832 * t1433, -t1832 * t1432, -t1290 * t1569 - t1292 * t1568 - t1294 * t1567 + t1338 * t1491 + t1340 * t1492 + t1342 * t1493, t1253 * t1610 + t1254 * t1608 + t1255 * t1606 + (t1292 * t1799 + (-t1292 * t1305 + t1340 * t1680) * t1664) * t1354 + (t1290 * t1800 + (-t1290 * t1304 + t1338 * t1682) * t1663) * t1353 + (t1294 * t1801 + (-t1294 * t1306 + t1342 * t1678) * t1665) * t1352, t1357 * t1555 + t1355 * t1559 + t1356 * t1557 + ((0.4e1 * t1621 - 0.2e1 * t1773) * t1615 + (0.4e1 * t1626 - 0.2e1 * t1775) * t1616 + (0.4e1 * t1631 - 0.2e1 * t1777) * t1617) * t1467, t1342 * t1545 + t1338 * t1544 + t1340 * t1543 + ((0.2e1 * t1626 - t1775) * t1612 + (0.2e1 * t1621 - t1773) * t1613 + (0.2e1 * t1631 - t1777) * t1614) * t1467, (t1361 * t1652 + t1362 * t1647 + t1363 * t1657) * t1467 + (t1338 * t1503 + t1340 * t1501 + t1342 * t1499) * t1468, (t1358 * t1657 + t1359 * t1652 + t1360 * t1647) * t1467 + (t1338 * t1502 + t1340 * t1500 + t1342 * t1498) * t1468, (t1410 * t1605 + t1411 * t1603 + t1412 * t1601) * t1469, (t1252 * t1748 - t1778) * t1407 + (t1251 * t1750 - t1780) * t1404 + (t1250 * t1752 - t1782) * t1401 + (t1338 * t1542 + t1340 * t1541 + t1342 * t1540 + (-t1552 + (t1294 * t1579 + t1640) * t1759) * t1363 + (-t1553 + (t1292 * t1580 + t1642) * t1764) * t1362 + (-t1554 + (t1290 * t1581 + t1644) * t1769) * t1361) * t1467, (t1249 * t1748 + t1294 * t1659) * t1407 + (t1248 * t1750 + t1292 * t1649) * t1404 + (t1247 * t1752 + t1290 * t1654) * t1401 + (-t1358 * t1552 - t1359 * t1554 - t1360 * t1553 + (t1342 * t1582 + (t1294 * t1674 + t1358 * t1640) * t1309) * t1389 + (t1340 * t1583 + (t1292 * t1675 + t1360 * t1642) * t1308) * t1385 + (t1338 * t1584 + (t1290 * t1676 + t1359 * t1644) * t1307) * t1381) * t1467, 0; t1556 + t1558 + t1560, 0, 0, t1831 * t1433, -t1831 * t1432, -t1289 * t1569 - t1291 * t1568 - t1293 * t1567 + t1337 * t1491 + t1339 * t1492 + t1341 * t1493, t1253 * t1611 + t1254 * t1609 + t1255 * t1607 + (t1291 * t1799 + (-t1291 * t1305 + t1339 * t1680) * t1664) * t1354 + (t1289 * t1800 + (-t1289 * t1304 + t1337 * t1682) * t1663) * t1353 + (t1293 * t1801 + (-t1293 * t1306 + t1341 * t1678) * t1665) * t1352, t1357 * t1556 + t1355 * t1560 + t1356 * t1558 + ((0.4e1 * t1622 - 0.2e1 * t1772) * t1615 + (0.4e1 * t1627 - 0.2e1 * t1774) * t1616 + (0.4e1 * t1632 - 0.2e1 * t1776) * t1617) * t1467, t1341 * t1545 + t1337 * t1544 + t1339 * t1543 + ((0.2e1 * t1627 - t1774) * t1612 + (0.2e1 * t1622 - t1772) * t1613 + (0.2e1 * t1632 - t1776) * t1614) * t1467, (t1361 * t1651 + t1362 * t1646 + t1363 * t1656) * t1467 + (t1337 * t1503 + t1339 * t1501 + t1341 * t1499) * t1468, (t1358 * t1656 + t1359 * t1651 + t1360 * t1646) * t1467 + (t1337 * t1502 + t1339 * t1500 + t1341 * t1498) * t1468, (t1413 * t1605 + t1414 * t1603 + t1415 * t1601) * t1469, (t1252 * t1749 - t1779) * t1407 + (t1251 * t1751 - t1781) * t1404 + (t1250 * t1753 - t1783) * t1401 + (t1337 * t1542 + t1339 * t1541 + t1341 * t1540 + (-t1549 + (t1293 * t1579 + t1639) * t1759) * t1363 + (-t1550 + (t1291 * t1580 + t1641) * t1764) * t1362 + (-t1551 + (t1289 * t1581 + t1643) * t1769) * t1361) * t1467, (t1249 * t1749 + t1293 * t1659) * t1407 + (t1248 * t1751 + t1291 * t1649) * t1404 + (t1247 * t1753 + t1289 * t1654) * t1401 + (-t1358 * t1549 - t1359 * t1551 - t1360 * t1550 + (t1341 * t1582 + (t1293 * t1674 + t1358 * t1639) * t1309) * t1389 + (t1339 * t1583 + (t1291 * t1675 + t1360 * t1641) * t1308) * t1385 + (t1337 * t1584 + (t1289 * t1676 + t1359 * t1643) * t1307) * t1381) * t1467, 0; -t1585 - t1586 - t1587, 0, 0, -t1830 * t1433, t1830 * t1432, -0.2e1 * qJ(2,1) * t1585 - 0.2e1 * qJ(2,2) * t1586 - 0.2e1 * qJ(2,3) * t1587 + t1494 + t1495 + t1496, (-t1445 * t1255 + t1330 * t1260) * t1407 + (-t1443 * t1254 + t1329 * t1264) * t1404 + (-t1441 * t1253 + t1328 * t1262) * t1401 + qJ(2,3) * t1496 + qJ(2,2) * t1495 + qJ(2,1) * t1494, -t1357 * t1585 - t1355 * t1587 - t1356 * t1586 + 0.4e1 * (-t1316 * t1536 - t1317 * t1535 - t1318 * t1534) * t1467, -0.4e1 * t1318 * t1585 - 0.4e1 * t1316 * t1587 - 0.4e1 * t1317 * t1586 + 0.2e1 * (-t1325 * t1536 - t1326 * t1534 - t1327 * t1535) * t1467, ((-t1358 * t1389 - t1363 * t1714) * t1600 + (-t1360 * t1385 - t1362 * t1720) * t1602 + (-t1359 * t1381 - t1361 * t1726) * t1604) * t1468, ((-t1358 * t1714 + t1363 * t1389) * t1600 + (-t1360 * t1720 + t1362 * t1385) * t1602 + (-t1359 * t1726 + t1361 * t1381) * t1604) * t1468, 0, (-t1445 * t1252 - t1358 * t1798) * t1407 + (-t1443 * t1251 - t1360 * t1792) * t1404 + (-t1441 * t1250 - t1359 * t1795) * t1401 + ((t1285 * t1591 + t1363 * t1562) * t1833 + (t1284 * t1592 + t1362 * t1564) * t1834 + (t1283 * t1593 + t1361 * t1566) * t1835) * t1467, (-t1445 * t1249 + t1330 * t1797) * t1407 + (-t1443 * t1248 + t1329 * t1791) * t1404 + (-t1441 * t1247 + t1328 * t1794) * t1401 + ((-t1288 * t1591 + t1358 * t1562) * t1833 + (-t1287 * t1592 + t1360 * t1564) * t1834 + (-t1286 * t1593 + t1359 * t1566) * t1835) * t1467, 0;];
tau_reg  = t1;
