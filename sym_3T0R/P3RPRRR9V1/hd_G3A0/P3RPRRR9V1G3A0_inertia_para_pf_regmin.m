% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RPRRR9V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 18:58
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RPRRR9V1G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RPRRR9V1G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 18:57:08
% EndTime: 2020-08-06 18:57:17
% DurationCPUTime: 8.66s
% Computational Cost: add. (11632->499), mult. (17397->1071), div. (2064->17), fcn. (15720->26), ass. (0->465)
t932 = cos(pkin(7));
t921 = t932 ^ 2;
t1246 = -0.2e1 * t921;
t938 = legFrame(1,2);
t908 = sin(t938);
t950 = cos(qJ(1,1));
t1153 = t908 * t950;
t943 = sin(qJ(3,1));
t949 = cos(qJ(3,1));
t952 = pkin(2) / 0.2e1;
t1177 = (pkin(3) * t949 + t952) * t943;
t931 = sin(pkin(7));
t899 = pkin(1) * t931;
t1180 = (-pkin(3) * t943 + t899) * t949;
t1239 = 0.2e1 * t921;
t935 = pkin(5) + qJ(2,1);
t920 = pkin(6) + t935;
t944 = sin(qJ(1,1));
t1133 = t950 * pkin(1) + t944 * t920;
t1138 = t943 * t931;
t930 = t949 ^ 2;
t834 = t1133 * t1138 + (t930 - 0.1e1) * t950 * pkin(3);
t1228 = t949 * pkin(2);
t1234 = t930 * pkin(3);
t843 = pkin(1) * t943 + (-pkin(3) + t1228 + 0.2e1 * t1234) * t931;
t951 = -pkin(3) / 0.2e1;
t873 = t1234 + t1228 / 0.2e1 + t951;
t911 = cos(t938);
t1077 = t950 * t1138;
t1240 = 0.2e1 * pkin(3);
t984 = pkin(2) * t1077 + (t1077 * t1240 - t1133) * t949;
t795 = (-t1153 * t873 + t1177 * t911) * t1239 + (t911 * t843 + t908 * t984) * t932 + t834 * t908 + t911 * t1180;
t905 = 0.1e1 / t920 ^ 2;
t1218 = t795 * t905;
t1150 = t911 * t950;
t924 = pkin(7) + qJ(3,1);
t895 = sin(t924);
t898 = cos(t924);
t855 = t1150 * t898 + t895 * t908;
t1117 = t855 * t1218;
t937 = legFrame(2,2);
t907 = sin(t937);
t948 = cos(qJ(1,2));
t1154 = t907 * t948;
t941 = sin(qJ(3,2));
t947 = cos(qJ(3,2));
t1178 = (pkin(3) * t947 + t952) * t941;
t1181 = (-pkin(3) * t941 + t899) * t947;
t934 = pkin(5) + qJ(2,2);
t919 = pkin(6) + t934;
t942 = sin(qJ(1,2));
t1131 = pkin(1) * t948 + t942 * t919;
t1144 = t931 * t941;
t929 = t947 ^ 2;
t833 = t1131 * t1144 + (t929 - 0.1e1) * t948 * pkin(3);
t1229 = t947 * pkin(2);
t1235 = t929 * pkin(3);
t842 = pkin(1) * t941 + (-pkin(3) + t1229 + 0.2e1 * t1235) * t931;
t872 = t1235 + t1229 / 0.2e1 + t951;
t910 = cos(t937);
t1078 = t948 * t1144;
t985 = pkin(2) * t1078 + (t1078 * t1240 - t1131) * t947;
t793 = (-t1154 * t872 + t1178 * t910) * t1239 + (t910 * t842 + t907 * t985) * t932 + t833 * t907 + t910 * t1181;
t903 = 0.1e1 / t919 ^ 2;
t1222 = t793 * t903;
t1151 = t910 * t948;
t923 = pkin(7) + qJ(3,2);
t894 = sin(t923);
t897 = cos(t923);
t853 = t1151 * t897 + t894 * t907;
t1119 = t853 * t1222;
t936 = legFrame(3,2);
t906 = sin(t936);
t946 = cos(qJ(1,3));
t1155 = t906 * t946;
t939 = sin(qJ(3,3));
t945 = cos(qJ(3,3));
t1179 = (pkin(3) * t945 + t952) * t939;
t1182 = (-pkin(3) * t939 + t899) * t945;
t933 = pkin(5) + qJ(2,3);
t918 = pkin(6) + t933;
t940 = sin(qJ(1,3));
t1132 = pkin(1) * t946 + t940 * t918;
t1145 = t931 * t939;
t928 = t945 ^ 2;
t832 = t1132 * t1145 + (t928 - 0.1e1) * t946 * pkin(3);
t1230 = t945 * pkin(2);
t1236 = t928 * pkin(3);
t841 = pkin(1) * t939 + (-pkin(3) + t1230 + 0.2e1 * t1236) * t931;
t871 = t1236 + t1230 / 0.2e1 + t951;
t909 = cos(t936);
t1079 = t946 * t1145;
t986 = pkin(2) * t1079 + (t1079 * t1240 - t1132) * t945;
t791 = (-t1155 * t871 + t1179 * t909) * t1239 + (t909 * t841 + t906 * t986) * t932 + t832 * t906 + t909 * t1182;
t901 = 0.1e1 / t918 ^ 2;
t1226 = t791 * t901;
t1152 = t909 * t946;
t922 = pkin(7) + qJ(3,3);
t893 = sin(t922);
t896 = cos(t922);
t851 = t1152 * t896 + t893 * t906;
t1121 = t851 * t1226;
t854 = -t1153 * t898 + t895 * t911;
t904 = 0.1e1 / t920;
t1196 = t854 * t904;
t852 = -t1154 * t897 + t894 * t910;
t902 = 0.1e1 / t919;
t1202 = t852 * t902;
t850 = -t1155 * t896 + t893 * t909;
t900 = 0.1e1 / t918;
t1208 = t850 * t900;
t887 = 0.1e1 / t896;
t1176 = t887 * t900;
t1105 = t851 * t1176;
t1063 = pkin(1) * t1105;
t1143 = t932 * t945;
t866 = t1143 - t1145;
t860 = 0.1e1 / t866;
t1189 = t860 * t900;
t792 = (t1152 * t871 + t1179 * t906) * t1239 + (t906 * t841 - t909 * t986) * t932 - t832 * t909 + t906 * t1182;
t784 = t792 * t1189;
t770 = -t784 + 0.2e1 * t1063;
t889 = 0.1e1 / t897;
t1171 = t889 * t902;
t1103 = t853 * t1171;
t1061 = pkin(1) * t1103;
t1142 = t932 * t947;
t867 = t1142 - t1144;
t861 = 0.1e1 / t867;
t1187 = t861 * t902;
t794 = (t1151 * t872 + t1178 * t907) * t1239 + (t907 * t842 - t910 * t985) * t932 - t833 * t910 + t907 * t1181;
t786 = t794 * t1187;
t774 = -t786 + 0.2e1 * t1061;
t891 = 0.1e1 / t898;
t1166 = t891 * t904;
t1101 = t855 * t1166;
t1059 = pkin(1) * t1101;
t1134 = t949 * t932;
t865 = t1134 - t1138;
t859 = 0.1e1 / t865;
t1191 = t859 * t904;
t796 = (t1150 * t873 + t1177 * t908) * t1239 + (t908 * t843 - t911 * t984) * t932 - t834 * t911 + t908 * t1180;
t788 = t796 * t1191;
t778 = -t788 + 0.2e1 * t1059;
t1245 = (t1121 * t860 - t1208 * t770) * t887 + (t1119 * t861 - t1202 * t774) * t889 + (t1117 * t859 - t1196 * t778) * t891;
t1216 = t796 * t905;
t1116 = t854 * t1216;
t1220 = t794 * t903;
t1118 = t852 * t1220;
t1224 = t792 * t901;
t1120 = t850 * t1224;
t1193 = t855 * t904;
t1199 = t853 * t902;
t1205 = t851 * t900;
t1106 = t850 * t1176;
t1064 = pkin(1) * t1106;
t783 = t791 * t1189;
t768 = -t783 + 0.2e1 * t1064;
t1104 = t852 * t1171;
t1062 = pkin(1) * t1104;
t785 = t793 * t1187;
t772 = -t785 + 0.2e1 * t1062;
t1102 = t854 * t1166;
t1060 = pkin(1) * t1102;
t787 = t795 * t1191;
t776 = -t787 + 0.2e1 * t1060;
t1244 = (t1120 * t860 - t1205 * t768) * t887 + (t1118 * t861 - t1199 * t772) * t889 + (t1116 * t859 - t1193 * t776) * t891;
t886 = pkin(2) * t932 + pkin(1);
t840 = t920 * t950 + (-pkin(3) * t898 - t886) * t944;
t1210 = t840 * t905;
t839 = t919 * t948 + (-pkin(3) * t897 - t886) * t942;
t1211 = t839 * t903;
t838 = t918 * t946 + (-pkin(3) * t896 - t886) * t940;
t1212 = t838 * t901;
t1233 = t940 * pkin(1);
t820 = (t838 + 0.2e1 * t1233) * t900;
t1232 = t942 * pkin(1);
t822 = (t839 + 0.2e1 * t1232) * t902;
t1231 = t944 * pkin(1);
t824 = (t840 + 0.2e1 * t1231) * t904;
t1243 = t940 * (t820 * t900 + t1212) + t942 * (t822 * t902 + t1211) + t944 * (t824 * t904 + t1210);
t1186 = t861 * t903;
t1188 = t860 * t901;
t1190 = t859 * t905;
t1194 = t855 * t891;
t1200 = t853 * t889;
t1206 = t851 * t887;
t1242 = (t1190 * t796 - t778 * t904) * t1194 + (t1186 * t794 - t774 * t902) * t1200 + (t1188 * t792 - t770 * t900) * t1206;
t1197 = t854 * t891;
t1203 = t852 * t889;
t1209 = t850 * t887;
t1241 = (t1190 * t795 - t776 * t904) * t1197 + (t1186 * t793 - t772 * t902) * t1203 + (t1188 * t791 - t768 * t900) * t1209;
t1238 = 0.2e1 * t931;
t953 = 0.1e1 / pkin(3);
t1237 = 0.2e1 * t953;
t1227 = t791 * t860;
t1225 = t792 * t860;
t1223 = t793 * t861;
t1221 = t794 * t861;
t1219 = t795 * t859;
t1217 = t796 * t859;
t821 = (t838 + t1233) * t900;
t1215 = t821 * t860;
t823 = (t839 + t1232) * t902;
t1214 = t823 * t861;
t825 = (t840 + t1231) * t904;
t1213 = t825 * t859;
t1207 = t850 * t906;
t1204 = t851 * t909;
t1201 = t852 * t907;
t1198 = t853 * t910;
t1195 = t854 * t908;
t1192 = t855 * t911;
t1137 = t945 * t931;
t868 = t932 * t939 + t1137;
t1185 = t868 * t901;
t1136 = t947 * t931;
t869 = t932 * t941 + t1136;
t1184 = t869 * t903;
t1135 = t949 * t931;
t870 = t932 * t943 + t1135;
t1183 = t870 * t905;
t955 = pkin(1) ^ 2;
t912 = qJ(2,3) ^ 2 + t955;
t1175 = t887 * t912;
t888 = 0.1e1 / t896 ^ 2;
t1174 = t888 * t900;
t1173 = t888 * t901;
t1172 = t888 * t909;
t913 = qJ(2,2) ^ 2 + t955;
t1170 = t889 * t913;
t890 = 0.1e1 / t897 ^ 2;
t1169 = t890 * t902;
t1168 = t890 * t903;
t1167 = t890 * t910;
t914 = qJ(2,1) ^ 2 + t955;
t1165 = t891 * t914;
t892 = 0.1e1 / t898 ^ 2;
t1164 = t892 * t904;
t1163 = t892 * t905;
t1162 = t892 * t911;
t1161 = t900 * t940;
t1160 = t901 * t940;
t1159 = t902 * t942;
t1158 = t903 * t942;
t1157 = t904 * t944;
t1156 = t905 * t944;
t1149 = t940 ^ 2 * t901;
t1148 = t942 ^ 2 * t903;
t1147 = t944 ^ 2 * t905;
t1146 = t931 * t932;
t1141 = t933 * t953;
t1140 = t934 * t953;
t1139 = t935 * t953;
t1130 = t921 - 0.1e1 / 0.2e1;
t1129 = pkin(2) * t1239;
t1128 = -0.2e1 * pkin(2) * t931;
t1127 = -0.2e1 * t1145;
t1126 = -0.2e1 * t1144;
t1125 = -0.2e1 * t1138;
t1124 = pkin(2) * t1161;
t1123 = pkin(2) * t1159;
t1122 = pkin(2) * t1157;
t1115 = t887 * t1212;
t1114 = t889 * t1211;
t1113 = t891 * t1210;
t844 = t850 ^ 2;
t1112 = t844 * t1173;
t845 = t851 ^ 2;
t1111 = t845 * t1173;
t846 = t852 ^ 2;
t1110 = t846 * t1168;
t847 = t853 ^ 2;
t1109 = t847 * t1168;
t848 = t854 ^ 2;
t1108 = t848 * t1163;
t849 = t855 ^ 2;
t1107 = t849 * t1163;
t1100 = t859 * t1183;
t1099 = t859 * t1156;
t1098 = t860 * t1185;
t1097 = t860 * t1160;
t1096 = t861 * t1184;
t1095 = t861 * t1158;
t862 = t868 ^ 2;
t1094 = t862 * t1173;
t863 = t869 ^ 2;
t1093 = t863 * t1168;
t864 = t870 ^ 2;
t1092 = t864 * t1163;
t1091 = t887 * t1161;
t1090 = t887 * t1160;
t1089 = t933 * t1174;
t1088 = t889 * t1159;
t1087 = t889 * t1158;
t1086 = t934 * t1169;
t1085 = t891 * t1157;
t1084 = t891 * t1156;
t1083 = t935 * t1164;
t1082 = t931 * t1141;
t1081 = t931 * t1140;
t1080 = t931 * t1139;
t1076 = t900 * t1129;
t1075 = t900 * t1128;
t1074 = t902 * t1129;
t1073 = t902 * t1128;
t1072 = t904 * t1129;
t1071 = t904 * t1128;
t1070 = t939 * t1124;
t1069 = t945 * t1124;
t1068 = t941 * t1123;
t1067 = t947 * t1123;
t1066 = t943 * t1122;
t1065 = t949 * t1122;
t1058 = t791 * t1098;
t1057 = t792 * t1098;
t1056 = t793 * t1096;
t1055 = t794 * t1096;
t1054 = t795 * t1100;
t1053 = t796 * t1100;
t1052 = t866 * t1115;
t1051 = t868 * t1115;
t1050 = t867 * t1114;
t1049 = t869 * t1114;
t1048 = t865 * t1113;
t1047 = t870 * t1113;
t1046 = t850 * t1090;
t1045 = t1172 * t1208;
t1044 = t851 * t1090;
t1043 = t851 * t906 * t1174;
t1042 = t851 * t850 * t1173;
t1041 = t852 * t1087;
t1040 = t1167 * t1202;
t1039 = t853 * t1087;
t1038 = t853 * t907 * t1169;
t1037 = t853 * t852 * t1168;
t1036 = t854 * t1084;
t1035 = t1162 * t1196;
t1034 = t855 * t1084;
t1033 = t855 * t908 * t1164;
t1032 = t855 * t854 * t1163;
t1031 = t870 * t1099;
t1030 = t868 * t1097;
t1029 = t869 * t1095;
t1028 = t862 * t1090;
t1027 = t863 * t1087;
t1026 = t864 * t1084;
t1025 = t906 * t1091;
t1024 = t909 * t1091;
t1023 = t933 * t1091;
t1022 = t953 * t1089;
t1021 = t907 * t1088;
t1020 = t910 * t1088;
t1019 = t934 * t1088;
t1018 = t953 * t1086;
t1017 = t908 * t1085;
t1016 = t911 * t1085;
t1015 = t935 * t1085;
t1014 = t953 * t1083;
t1013 = t1089 * t1207;
t1012 = t1089 * t1204;
t1011 = t1086 * t1201;
t1010 = t1086 * t1198;
t1009 = t1083 * t1195;
t1008 = t1083 * t1192;
t1007 = t906 * t1023;
t1006 = t909 * t1023;
t1005 = t906 * t1022;
t1004 = t909 * t1022;
t1003 = t907 * t1019;
t1002 = t910 * t1019;
t1001 = t907 * t1018;
t1000 = t910 * t1018;
t999 = t908 * t1015;
t998 = t911 * t1015;
t997 = t908 * t1014;
t996 = t911 * t1014;
t983 = 0.2e1 * t868;
t982 = 0.2e1 * t869;
t981 = 0.2e1 * t870;
t980 = (t1204 + t1207) * t1174;
t979 = (t1198 + t1201) * t1169;
t978 = (t1192 + t1195) * t1164;
t971 = t1076 * t850 - t1082 * t909;
t970 = t1076 * t851 - t1082 * t906;
t969 = t1074 * t852 - t1081 * t910;
t968 = t1074 * t853 - t1081 * t907;
t967 = t1072 * t854 - t1080 * t911;
t966 = t1072 * t855 - t1080 * t908;
t965 = t932 * (t1075 * t850 - t1141 * t909);
t964 = t932 * (t1075 * t851 - t1141 * t906);
t963 = t932 * (t1073 * t852 - t1140 * t910);
t962 = t932 * (t1073 * t853 - t1140 * t907);
t961 = t932 * (t1071 * t854 - t1139 * t911);
t960 = t932 * (t1071 * t855 - t1139 * t908);
t959 = t1113 * t854 + t1114 * t852 + t1115 * t850 + t1157 * t776 + t1159 * t772 + t1161 * t768;
t958 = t1113 * t855 + t1114 * t853 + t1115 * t851 + t1157 * t778 + t1159 * t774 + t1161 * t770;
t957 = t1095 * t793 + t1097 * t791 + t1099 * t795 - t1102 * t824 - t1104 * t822 - t1106 * t820;
t956 = t1095 * t794 + t1097 * t792 + t1099 * t796 - t1101 * t824 - t1103 * t822 - t1105 * t820;
t954 = 0.1e1 / pkin(3) ^ 2;
t837 = (t930 - 0.1e1 / 0.2e1) * t1146 + t1130 * t949 * t943;
t836 = (t929 - 0.1e1 / 0.2e1) * t1146 + t1130 * t947 * t941;
t835 = (t928 - 0.1e1 / 0.2e1) * t1146 + t1130 * t945 * t939;
t819 = (-t1231 - t840 / 0.2e1) * t904;
t818 = (-t1232 - t839 / 0.2e1) * t902;
t817 = (-t1233 - t838 / 0.2e1) * t900;
t816 = (-pkin(1) * t840 - t914 * t944) * t904;
t815 = (-pkin(1) * t839 - t913 * t942) * t902;
t814 = (-pkin(1) * t838 - t912 * t940) * t900;
t813 = (t1162 * t908 + t1167 * t907 + t1172 * t906) * t954;
t812 = (-t1016 * t870 - t1020 * t869 - t1024 * t868) * t953;
t811 = (-t1016 * t865 - t1020 * t867 - t1024 * t866) * t953;
t810 = (-t1017 * t870 - t1021 * t869 - t1025 * t868) * t953;
t809 = (-t1017 * t865 - t1021 * t867 - t1025 * t866) * t953;
t808 = -t1034 - t1039 - t1044;
t807 = -t1036 - t1041 - t1046;
t806 = -0.2e1 * qJ(2,1) * t1034 - 0.2e1 * qJ(2,2) * t1039 - 0.2e1 * qJ(2,3) * t1044;
t805 = -0.2e1 * qJ(2,1) * t1036 - 0.2e1 * qJ(2,2) * t1041 - 0.2e1 * qJ(2,3) * t1046;
t804 = t1065 * t1246 + (t1066 * t1238 - t824 * t949) * t932 + t819 * t1125;
t803 = t1067 * t1246 + (t1068 * t1238 - t822 * t947) * t932 + t818 * t1126;
t802 = t1069 * t1246 + (t1070 * t1238 - t820 * t945) * t932 + t817 * t1127;
t801 = 0.2e1 * t921 * t1066 + 0.2e1 * (t1065 * t931 - t819 * t943) * t932 - 0.2e1 * t819 * t1135;
t800 = 0.2e1 * t921 * t1068 + 0.2e1 * (t1067 * t931 - t818 * t941) * t932 - 0.2e1 * t818 * t1136;
t799 = 0.2e1 * t921 * t1070 + 0.2e1 * (t1069 * t931 - t817 * t939) * t932 - 0.2e1 * t817 * t1137;
t798 = -t1026 * t855 - t1027 * t853 - t1028 * t851;
t797 = -t1026 * t854 - t1027 * t852 - t1028 * t850;
t790 = t1032 + t1037 + t1042;
t789 = 0.2e1 * qJ(2,1) * t1032 + 0.2e1 * qJ(2,2) * t1037 + 0.2e1 * qJ(2,3) * t1042;
t782 = -0.4e1 * t1034 * t837 - 0.4e1 * t1039 * t836 - 0.4e1 * t1044 * t835;
t781 = -0.4e1 * t1036 * t837 - 0.4e1 * t1041 * t836 - 0.4e1 * t1046 * t835;
t780 = t1032 * t864 + t1037 * t863 + t1042 * t862;
t779 = t788 - t1059;
t777 = t787 - t1060;
t775 = t786 - t1061;
t773 = t785 - t1062;
t771 = t784 - t1063;
t769 = t783 - t1064;
t767 = t1059 - t788 / 0.2e1;
t766 = t1060 - t787 / 0.2e1;
t765 = t1061 - t786 / 0.2e1;
t764 = t1062 - t785 / 0.2e1;
t763 = t1063 - t784 / 0.2e1;
t762 = t1064 - t783 / 0.2e1;
t761 = (-pkin(1) * t1217 + t1165 * t855) * t904;
t760 = (-pkin(1) * t1219 + t1165 * t854) * t904;
t759 = (-pkin(1) * t1221 + t1170 * t853) * t902;
t758 = (-pkin(1) * t1223 + t1170 * t852) * t902;
t757 = (-pkin(1) * t1225 + t1175 * t851) * t900;
t756 = (-pkin(1) * t1227 + t1175 * t850) * t900;
t755 = 0.4e1 * t1032 * t837 + 0.4e1 * t1037 * t836 + 0.4e1 * t1042 * t835;
t754 = (t868 * t980 + t869 * t979 + t870 * t978) * t953;
t753 = (t865 * t978 + t866 * t980 + t867 * t979) * t953;
t752 = t767 * t1125 + t778 * t1134 + (t943 * t960 + t949 * t966) * t891;
t751 = t766 * t1125 + t776 * t1134 + (t943 * t961 + t949 * t967) * t891;
t750 = t765 * t1126 + t774 * t1142 + (t941 * t962 + t947 * t968) * t889;
t749 = t764 * t1126 + t772 * t1142 + (t941 * t963 + t947 * t969) * t889;
t748 = t763 * t1127 + t770 * t1143 + (t939 * t964 + t945 * t970) * t887;
t747 = t762 * t1127 + t768 * t1143 + (t939 * t965 + t945 * t971) * t887;
t746 = -t767 * t981 + (-t943 * t966 + t949 * t960) * t891;
t745 = -t766 * t981 + (-t943 * t967 + t949 * t961) * t891;
t744 = -t765 * t982 + (-t941 * t968 + t947 * t962) * t889;
t743 = -t764 * t982 + (-t941 * t969 + t947 * t963) * t889;
t742 = -t763 * t983 + (-t939 * t970 + t945 * t964) * t887;
t741 = -t762 * t983 + (-t939 * t971 + t945 * t965) * t887;
t1 = [t1107 + t1109 + t1111, 0, 0, -t1242 * t932, t1242 * t931, 0.2e1 * qJ(2,1) * t1107 + 0.2e1 * qJ(2,2) * t1109 + 0.2e1 * qJ(2,3) * t1111, (t1194 * t761 + t1217 * t779) * t904 + (t1200 * t759 + t1221 * t775) * t902 + (t1206 * t757 + t1225 * t771) * t900, t1092 * t849 + t1093 * t847 + t1094 * t845, 0.4e1 * t1107 * t837 + 0.4e1 * t1109 * t836 + 0.4e1 * t1111 * t835, (t1033 * t870 + t1038 * t869 + t1043 * t868) * t1237, (t1033 * t865 + t1038 * t867 + t1043 * t866) * t1237, (t888 * t906 ^ 2 + t890 * t907 ^ 2 + t892 * t908 ^ 2) * t954, (-t870 * t997 + (t752 * t904 - t1216) * t891) * t855 + (-t869 * t1001 + (t750 * t902 - t1220) * t889) * t853 + (-t868 * t1005 + (t748 * t900 - t1224) * t887) * t851, (-t865 * t997 + (t746 * t904 + t1053) * t891) * t855 + (-t867 * t1001 + (t744 * t902 + t1055) * t889) * t853 + (-t866 * t1005 + (t742 * t900 + t1057) * t887) * t851, 1; t790, 0, 0, -t1244 * t932, t1244 * t931, t789, (t1194 * t760 + t1217 * t777) * t904 + (t1200 * t758 + t1221 * t773) * t902 + (t1206 * t756 + t1225 * t769) * t900, t780, t755, t754, t753, t813, (t1193 * t751 - t1116) * t891 + (t1199 * t749 - t1118) * t889 + (t1205 * t747 - t1120) * t887 + (-t1009 * t870 - t1011 * t869 - t1013 * t868) * t953, (t1053 * t854 + t1193 * t745) * t891 + (t1055 * t852 + t1199 * t743) * t889 + (t1057 * t850 + t1205 * t741) * t887 + (-t1009 * t865 - t1011 * t867 - t1013 * t866) * t953, 0; t808, 0, 0, t956 * t932, -t956 * t931, t806, (t1194 * t816 + t1213 * t796) * t904 + (t1200 * t815 + t1214 * t794) * t902 + (t1206 * t814 + t1215 * t792) * t900, t798, t782, t810, t809, 0, t802 * t1105 + t803 * t1103 + t804 * t1101 + t792 * t1160 + t794 * t1158 + t796 * t1156 + (t1003 * t869 + t1007 * t868 + t870 * t999) * t953, -t792 * t1030 - t794 * t1029 - t796 * t1031 + t799 * t1105 + t800 * t1103 + t801 * t1101 + (t1003 * t867 + t1007 * t866 + t865 * t999) * t953, 0; t790, 0, 0, -t1245 * t932, t1245 * t931, t789, (t1197 * t761 + t1219 * t779) * t904 + (t1203 * t759 + t1223 * t775) * t902 + (t1209 * t757 + t1227 * t771) * t900, t780, t755, t754, t753, t813, (t1196 * t752 - t1117) * t891 + (t1202 * t750 - t1119) * t889 + (t1208 * t748 - t1121) * t887 + (-t1008 * t870 - t1010 * t869 - t1012 * t868) * t953, (t1054 * t855 + t1196 * t746) * t891 + (t1056 * t853 + t1202 * t744) * t889 + (t1058 * t851 + t1208 * t742) * t887 + (-t1008 * t865 - t1010 * t867 - t1012 * t866) * t953, 0; t1108 + t1110 + t1112, 0, 0, -t1241 * t932, t1241 * t931, 0.2e1 * qJ(2,1) * t1108 + 0.2e1 * qJ(2,2) * t1110 + 0.2e1 * qJ(2,3) * t1112, (t1197 * t760 + t1219 * t777) * t904 + (t1203 * t758 + t1223 * t773) * t902 + (t1209 * t756 + t1227 * t769) * t900, t1092 * t848 + t1093 * t846 + t1094 * t844, 0.4e1 * t1108 * t837 + 0.4e1 * t1110 * t836 + 0.4e1 * t1112 * t835, (t1035 * t870 + t1040 * t869 + t1045 * t868) * t1237, (t1035 * t865 + t1040 * t867 + t1045 * t866) * t1237, (t888 * t909 ^ 2 + t890 * t910 ^ 2 + t892 * t911 ^ 2) * t954, (-t870 * t996 + (t751 * t904 - t1218) * t891) * t854 + (-t869 * t1000 + (t749 * t902 - t1222) * t889) * t852 + (-t868 * t1004 + (t747 * t900 - t1226) * t887) * t850, (-t865 * t996 + (t745 * t904 + t1054) * t891) * t854 + (-t867 * t1000 + (t743 * t902 + t1056) * t889) * t852 + (-t866 * t1004 + (t741 * t900 + t1058) * t887) * t850, 1; t807, 0, 0, t957 * t932, -t957 * t931, t805, (t1197 * t816 + t1213 * t795) * t904 + (t1203 * t815 + t1214 * t793) * t902 + (t1209 * t814 + t1215 * t791) * t900, t797, t781, t812, t811, 0, t802 * t1106 + t803 * t1104 + t804 * t1102 + t791 * t1160 + t793 * t1158 + t795 * t1156 + (t1002 * t869 + t1006 * t868 + t870 * t998) * t953, -t791 * t1030 - t793 * t1029 - t795 * t1031 + t799 * t1106 + t800 * t1104 + t801 * t1102 + (t1002 * t867 + t1006 * t866 + t865 * t998) * t953, 0; t808, 0, 0, -t958 * t932, t958 * t931, t806, (-t761 * t944 + t779 * t840) * t904 + (-t759 * t942 + t775 * t839) * t902 + (-t757 * t940 + t771 * t838) * t900, t798, t782, t810, t809, 0, -t1048 * t855 - t1050 * t853 - t1052 * t851 - t1157 * t752 - t1159 * t750 - t1161 * t748, t1047 * t855 + t1049 * t853 + t1051 * t851 - t1157 * t746 - t1159 * t744 - t1161 * t742, 0; t807, 0, 0, -t959 * t932, t959 * t931, t805, (-t760 * t944 + t777 * t840) * t904 + (-t758 * t942 + t773 * t839) * t902 + (-t756 * t940 + t769 * t838) * t900, t797, t781, t812, t811, 0, -t1048 * t854 - t1050 * t852 - t1052 * t850 - t1157 * t751 - t1159 * t749 - t1161 * t747, t1047 * t854 + t1049 * t852 + t1051 * t850 - t1157 * t745 - t1159 * t743 - t1161 * t741, 0; t1147 + t1148 + t1149, 0, 0, t1243 * t932, -t1243 * t931, 0.2e1 * qJ(2,1) * t1147 + 0.2e1 * qJ(2,2) * t1148 + 0.2e1 * qJ(2,3) * t1149, (-t816 * t944 + t825 * t840) * t904 + (-t815 * t942 + t823 * t839) * t902 + (-t814 * t940 + t821 * t838) * t900, t1147 * t864 + t1148 * t863 + t1149 * t862, 0.4e1 * t1147 * t837 + 0.4e1 * t1148 * t836 + 0.4e1 * t1149 * t835, 0, 0, 0, (t1210 * t865 - t804 * t904) * t944 + (t1211 * t867 - t803 * t902) * t942 + (t1212 * t866 - t802 * t900) * t940, (-t1183 * t840 - t801 * t904) * t944 + (-t1184 * t839 - t800 * t902) * t942 + (-t1185 * t838 - t799 * t900) * t940, 1;];
tau_reg  = t1;
