% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR12V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V1G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:02
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:02:36
% EndTime: 2020-08-06 19:02:46
% DurationCPUTime: 10.11s
% Computational Cost: add. (46323->501), mult. (84926->906), div. (4701->12), fcn. (53034->18), ass. (0->413)
t2994 = 2 * MDP(5);
t2729 = sin(qJ(1,1));
t2735 = cos(qJ(1,1));
t2737 = xDP(2);
t2738 = xDP(1);
t2651 = -t2729 * t2738 + t2735 * t2737;
t2652 = t2729 * t2737 + t2735 * t2738;
t2723 = legFrame(1,3);
t2697 = sin(t2723);
t2700 = cos(t2723);
t2739 = pkin(1) + pkin(2);
t2736 = xDP(3);
t2968 = qJ(3,1) * t2736;
t2616 = -t2968 + (t2651 * t2697 + t2652 * t2700) * t2739;
t2734 = cos(qJ(2,1));
t2719 = t2734 ^ 2;
t2728 = sin(qJ(2,1));
t2694 = t2728 * qJ(3,1);
t2970 = pkin(4) * t2738;
t2661 = t2737 * t2694 - t2970;
t2707 = pkin(4) * t2737;
t2662 = t2738 * t2694 + t2707;
t2900 = t2736 * t2739;
t2834 = (t2661 * t2729 + t2662 * t2735) * t2700 + (t2661 * t2735 - t2662 * t2729) * t2697 + t2728 * t2900;
t2586 = t2616 * t2719 + t2834 * t2734 + t2968;
t2902 = t2734 * t2739;
t2679 = t2694 + t2902;
t2671 = 0.1e1 / t2679;
t2945 = t2586 * t2671;
t2993 = 0.2e1 * t2945;
t2727 = sin(qJ(1,2));
t2733 = cos(qJ(1,2));
t2649 = -t2727 * t2738 + t2733 * t2737;
t2650 = t2727 * t2737 + t2733 * t2738;
t2722 = legFrame(2,3);
t2696 = sin(t2722);
t2699 = cos(t2722);
t2966 = qJ(3,2) * t2736;
t2615 = -t2966 + (t2649 * t2696 + t2650 * t2699) * t2739;
t2732 = cos(qJ(2,2));
t2718 = t2732 ^ 2;
t2726 = sin(qJ(2,2));
t2693 = t2726 * qJ(3,2);
t2659 = t2737 * t2693 - t2970;
t2660 = t2738 * t2693 + t2707;
t2835 = (t2659 * t2727 + t2660 * t2733) * t2699 + (t2659 * t2733 - t2660 * t2727) * t2696 + t2726 * t2900;
t2585 = t2615 * t2718 + t2835 * t2732 + t2966;
t2904 = t2732 * t2739;
t2678 = t2693 + t2904;
t2668 = 0.1e1 / t2678;
t2948 = t2585 * t2668;
t2992 = 0.2e1 * t2948;
t2725 = sin(qJ(1,3));
t2731 = cos(qJ(1,3));
t2647 = -t2725 * t2738 + t2731 * t2737;
t2648 = t2725 * t2737 + t2731 * t2738;
t2721 = legFrame(3,3);
t2695 = sin(t2721);
t2698 = cos(t2721);
t2964 = qJ(3,3) * t2736;
t2614 = -t2964 + (t2647 * t2695 + t2648 * t2698) * t2739;
t2730 = cos(qJ(2,3));
t2717 = t2730 ^ 2;
t2724 = sin(qJ(2,3));
t2692 = t2724 * qJ(3,3);
t2655 = t2737 * t2692 - t2970;
t2656 = t2738 * t2692 + t2707;
t2836 = (t2655 * t2725 + t2656 * t2731) * t2698 + (t2655 * t2731 - t2656 * t2725) * t2695 + t2724 * t2900;
t2584 = t2614 * t2717 + t2836 * t2730 + t2964;
t2906 = t2730 * t2739;
t2677 = t2692 + t2906;
t2665 = 0.1e1 / t2677;
t2951 = t2584 * t2665;
t2991 = 0.2e1 * t2951;
t2590 = t2614 * t2730 + t2836;
t2741 = 0.1e1 / qJ(3,3);
t2913 = t2724 * t2741;
t2545 = (-t2739 * t2951 + t2590) * pkin(4) * t2913;
t2626 = t2647 * t2698 - t2648 * t2695;
t2914 = t2724 * t2739;
t2950 = t2584 * t2741;
t2983 = -pkin(4) / 0.2e1;
t2566 = (t2626 * t2914 + t2950 * t2983) * t2665;
t2936 = t2626 * t2665;
t2872 = pkin(4) * t2936;
t2602 = t2724 * t2872;
t2860 = t2665 * t2950;
t2569 = t2739 * t2860 + t2602;
t2740 = qJ(3,3) ^ 2;
t2749 = pkin(4) ^ 2;
t2701 = t2740 + t2749;
t2965 = qJ(3,3) * t2730;
t2794 = -t2914 + t2965;
t2751 = (pkin(1) ^ 2);
t2990 = -2 * pkin(1);
t2833 = -t2751 + (t2990 - pkin(2)) * pkin(2);
t2845 = (qJ(3,3) + t2739) * (-qJ(3,3) + t2739) * t2717;
t2879 = -0.2e1 * t2965;
t2899 = t2739 * t2741;
t2934 = t2626 * t2741;
t2742 = 0.1e1 / qJ(3,3) ^ 2;
t2942 = t2590 * t2742;
t2949 = t2584 * t2742;
t2976 = pkin(4) * t2626;
t2763 = -((t2566 * t2879 + t2545 + (-t2701 - t2845) * t2936) * t2934 + (t2590 * t2899 + ((-t2740 + t2833) * t2950 + t2794 * t2976) * t2665) * t2949) * t2665 - t2569 * t2942;
t2591 = t2615 * t2732 + t2835;
t2744 = 0.1e1 / qJ(3,2);
t2910 = t2726 * t2744;
t2546 = (-t2739 * t2948 + t2591) * pkin(4) * t2910;
t2627 = t2649 * t2699 - t2650 * t2696;
t2911 = t2726 * t2739;
t2947 = t2585 * t2744;
t2567 = (t2627 * t2911 + t2947 * t2983) * t2668;
t2933 = t2627 * t2668;
t2871 = pkin(4) * t2933;
t2603 = t2726 * t2871;
t2859 = t2668 * t2947;
t2570 = t2739 * t2859 + t2603;
t2743 = qJ(3,2) ^ 2;
t2702 = t2743 + t2749;
t2967 = qJ(3,2) * t2732;
t2795 = -t2911 + t2967;
t2844 = (qJ(3,2) + t2739) * (-qJ(3,2) + t2739) * t2718;
t2881 = -0.2e1 * t2967;
t2898 = t2739 * t2744;
t2931 = t2627 * t2744;
t2745 = 0.1e1 / qJ(3,2) ^ 2;
t2941 = t2591 * t2745;
t2946 = t2585 * t2745;
t2975 = pkin(4) * t2627;
t2762 = -((t2567 * t2881 + t2546 + (-t2702 - t2844) * t2933) * t2931 + (t2591 * t2898 + ((-t2743 + t2833) * t2947 + t2795 * t2975) * t2668) * t2946) * t2668 - t2570 * t2941;
t2592 = t2616 * t2734 + t2834;
t2747 = 0.1e1 / qJ(3,1);
t2907 = t2728 * t2747;
t2547 = (-t2739 * t2945 + t2592) * pkin(4) * t2907;
t2628 = t2651 * t2700 - t2652 * t2697;
t2908 = t2728 * t2739;
t2944 = t2586 * t2747;
t2568 = (t2628 * t2908 + t2944 * t2983) * t2671;
t2930 = t2628 * t2671;
t2870 = pkin(4) * t2930;
t2604 = t2728 * t2870;
t2858 = t2671 * t2944;
t2571 = t2739 * t2858 + t2604;
t2746 = qJ(3,1) ^ 2;
t2703 = t2746 + t2749;
t2969 = qJ(3,1) * t2734;
t2796 = -t2908 + t2969;
t2843 = (qJ(3,1) + t2739) * (-qJ(3,1) + t2739) * t2719;
t2883 = -0.2e1 * t2969;
t2897 = t2739 * t2747;
t2928 = t2628 * t2747;
t2748 = 0.1e1 / qJ(3,1) ^ 2;
t2940 = t2592 * t2748;
t2943 = t2586 * t2748;
t2974 = pkin(4) * t2628;
t2761 = -((t2568 * t2883 + t2547 + (-t2703 - t2843) * t2930) * t2928 + (t2592 * t2897 + ((-t2746 + t2833) * t2944 + t2796 * t2974) * t2671) * t2943) * t2671 - t2571 * t2940;
t2666 = 0.1e1 / t2677 ^ 2;
t2669 = 0.1e1 / t2678 ^ 2;
t2672 = 0.1e1 / t2679 ^ 2;
t2639 = t2695 * t2731 + t2698 * t2725;
t2989 = -0.2e1 * t2639;
t2641 = t2696 * t2733 + t2699 * t2727;
t2988 = -0.2e1 * t2641;
t2643 = t2697 * t2735 + t2700 * t2729;
t2987 = -0.2e1 * t2643;
t2986 = -0.2e1 * t2717;
t2985 = -0.2e1 * t2718;
t2984 = -0.2e1 * t2719;
t2689 = 0.2e1 * t2717 - 0.1e1;
t2690 = 0.2e1 * t2718 - 0.1e1;
t2691 = 0.2e1 * t2719 - 0.1e1;
t2926 = t2665 * t2724;
t2572 = t2584 * t2926;
t2576 = pkin(1) * t2860;
t2587 = t2590 * t2741;
t2560 = t2576 - t2587;
t2839 = pkin(2) * t2860 + t2560;
t2880 = qJ(3,3) * t2986;
t2925 = t2665 * t2730;
t2524 = -(t2569 * t2730 + t2572) * t2665 * t2942 + (-(-t2626 * t2845 * t2925 + t2566 * t2880 + (-t2701 * t2936 + t2545) * t2730) * t2934 - (-(t2602 + t2839) * t2906 + (t2717 * t2872 - t2724 * t2839) * qJ(3,3)) * t2949) * t2666;
t2982 = pkin(1) * t2524;
t2923 = t2668 * t2726;
t2573 = t2585 * t2923;
t2578 = pkin(1) * t2859;
t2588 = t2591 * t2744;
t2561 = t2578 - t2588;
t2838 = pkin(2) * t2859 + t2561;
t2882 = qJ(3,2) * t2985;
t2922 = t2668 * t2732;
t2525 = -(t2570 * t2732 + t2573) * t2668 * t2941 + (-(-t2627 * t2844 * t2922 + t2567 * t2882 + (-t2702 * t2933 + t2546) * t2732) * t2931 - (-(t2603 + t2838) * t2904 + (t2718 * t2871 - t2726 * t2838) * qJ(3,2)) * t2946) * t2669;
t2981 = pkin(1) * t2525;
t2920 = t2671 * t2728;
t2574 = t2586 * t2920;
t2580 = pkin(1) * t2858;
t2589 = t2592 * t2747;
t2562 = t2580 - t2589;
t2837 = pkin(2) * t2858 + t2562;
t2884 = qJ(3,1) * t2984;
t2919 = t2671 * t2734;
t2526 = -(t2571 * t2734 + t2574) * t2671 * t2940 + (-(-t2628 * t2843 * t2919 + t2568 * t2884 + (-t2703 * t2930 + t2547) * t2734) * t2928 - (-(t2604 + t2837) * t2902 + (t2719 * t2870 - t2728 * t2837) * qJ(3,1)) * t2943) * t2672;
t2980 = pkin(1) * t2526;
t2979 = pkin(1) * t2724;
t2978 = pkin(1) * t2726;
t2977 = pkin(1) * t2728;
t2973 = pkin(4) * t2725;
t2972 = pkin(4) * t2727;
t2971 = pkin(4) * t2729;
t2667 = t2665 * t2666;
t2808 = t2584 * t2667 * t2934;
t2935 = t2626 * t2666;
t2530 = -t2794 * t2808 + (-t2587 * t2724 - (-t2976 + (-t2724 * t2899 + t2730) * t2584) * t2665 - t2590 * t2913) * t2935;
t2963 = t2530 * t2665;
t2962 = t2530 * (pkin(1) * t2730 + t2692);
t2670 = t2668 * t2669;
t2807 = t2585 * t2670 * t2931;
t2932 = t2627 * t2669;
t2531 = -t2795 * t2807 + (-t2588 * t2726 - (-t2975 + (-t2726 * t2898 + t2732) * t2585) * t2668 - t2591 * t2910) * t2932;
t2961 = t2531 * t2668;
t2960 = t2531 * (pkin(1) * t2732 + t2693);
t2673 = t2671 * t2672;
t2806 = t2586 * t2673 * t2928;
t2929 = t2628 * t2672;
t2532 = -t2796 * t2806 + (-t2589 * t2728 - (-t2974 + (-t2728 * t2897 + t2734) * t2586) * t2671 - t2592 * t2907) * t2929;
t2959 = t2532 * t2671;
t2958 = t2532 * (pkin(1) * t2734 + t2694);
t2617 = t2626 ^ 2;
t2611 = t2617 * t2666;
t2939 = t2617 * t2717;
t2954 = t2584 ^ 2 * t2742;
t2563 = -t2611 + (t2939 - t2954) * t2666;
t2957 = t2563 * t2741;
t2618 = t2627 ^ 2;
t2612 = t2618 * t2669;
t2938 = t2618 * t2718;
t2953 = t2585 ^ 2 * t2745;
t2564 = -t2612 + (t2938 - t2953) * t2669;
t2956 = t2564 * t2744;
t2619 = t2628 ^ 2;
t2613 = t2619 * t2672;
t2937 = t2619 * t2719;
t2952 = t2586 ^ 2 * t2748;
t2565 = -t2613 + (t2937 - t2952) * t2672;
t2955 = t2565 * t2747;
t2519 = t2763 - t2982;
t2927 = t2665 * (t2519 * t2724 + t2524 * t2965);
t2521 = t2762 - t2981;
t2924 = t2668 * (t2521 * t2726 + t2525 * t2967);
t2523 = t2761 - t2980;
t2921 = t2671 * (t2523 * t2728 + t2526 * t2969);
t2918 = t2717 * t2741;
t2917 = t2718 * t2744;
t2916 = t2719 * t2747;
t2915 = t2724 * t2730;
t2912 = t2726 * t2732;
t2909 = t2728 * t2734;
t2905 = t2730 * t2741;
t2903 = t2732 * t2744;
t2901 = t2734 * t2747;
t2896 = t2741 * t2524;
t2895 = t2744 * t2525;
t2894 = t2747 * t2526;
t2823 = t2590 * t2991;
t2887 = -t2740 + t2751;
t2893 = (t2740 + t2751) * t2524 - pkin(1) * t2763 + t2741 * t2823 + (-t2689 * qJ(3,3) * pkin(1) + t2887 * t2915) * t2611;
t2822 = t2591 * t2992;
t2886 = -t2743 + t2751;
t2892 = (t2743 + t2751) * t2525 - pkin(1) * t2762 + t2744 * t2822 + (-t2690 * qJ(3,2) * pkin(1) + t2886 * t2912) * t2612;
t2821 = t2592 * t2993;
t2885 = -t2746 + t2751;
t2891 = (t2746 + t2751) * t2526 - pkin(1) * t2761 + t2747 * t2821 + (-t2691 * qJ(3,1) * pkin(1) + t2885 * t2909) * t2613;
t2856 = t2730 * t2611;
t2890 = t2563 * qJ(3,3) - t2856 * t2979 + t2519;
t2854 = t2732 * t2612;
t2889 = t2564 * qJ(3,2) - t2854 * t2978 + t2521;
t2852 = t2734 * t2613;
t2888 = t2565 * qJ(3,1) - t2852 * t2977 + t2523;
t2878 = 0.2e1 * t2935;
t2877 = 0.2e1 * t2932;
t2876 = 0.2e1 * t2929;
t2875 = 0.2e1 * t2915;
t2874 = 0.2e1 * t2912;
t2873 = 0.2e1 * t2909;
t2869 = (t2572 + (t2576 - 0.2e1 * t2587) * t2730) * t2584 * t2666;
t2868 = (t2573 + (t2578 - 0.2e1 * t2588) * t2732) * t2585 * t2669;
t2867 = (t2574 + (t2580 - 0.2e1 * t2589) * t2734) * t2586 * t2672;
t2863 = t2667 * t2954;
t2862 = t2670 * t2953;
t2861 = t2673 * t2952;
t2857 = t2724 * t2611;
t2855 = t2726 * t2612;
t2853 = t2728 * t2613;
t2680 = t2965 - t2979;
t2851 = t2680 * t2925;
t2850 = t2665 * t2905;
t2682 = t2967 - t2978;
t2849 = t2682 * t2922;
t2848 = t2668 * t2903;
t2684 = t2969 - t2977;
t2847 = t2684 * t2919;
t2846 = t2671 * t2901;
t2842 = t2724 * t2905;
t2841 = t2726 * t2903;
t2840 = t2728 * t2901;
t2832 = pkin(1) * t2875;
t2831 = pkin(1) * t2874;
t2830 = pkin(1) * t2873;
t2638 = -t2695 * t2725 + t2698 * t2731;
t2829 = 0.2e1 * t2638 * t2962;
t2828 = t2962 * t2989;
t2640 = -t2696 * t2727 + t2699 * t2733;
t2827 = 0.2e1 * t2640 * t2960;
t2826 = t2960 * t2988;
t2642 = -t2697 * t2729 + t2700 * t2735;
t2825 = 0.2e1 * t2642 * t2958;
t2824 = t2958 * t2987;
t2820 = t2638 * t2878;
t2819 = t2935 * t2989;
t2818 = t2640 * t2877;
t2817 = t2932 * t2988;
t2816 = t2642 * t2876;
t2815 = t2929 * t2987;
t2814 = t2918 * t2963;
t2813 = t2915 * t2963;
t2812 = t2917 * t2961;
t2811 = t2912 * t2961;
t2810 = t2916 * t2959;
t2809 = t2909 * t2959;
t2704 = t2731 * pkin(4);
t2653 = t2725 * t2692 + t2704;
t2654 = t2731 * t2692 - t2973;
t2596 = t2638 * t2906 - t2653 * t2695 + t2654 * t2698;
t2805 = t2596 * t2850;
t2597 = t2639 * t2906 + t2653 * t2698 + t2654 * t2695;
t2804 = t2597 * t2850;
t2705 = t2733 * pkin(4);
t2657 = t2727 * t2693 + t2705;
t2658 = t2733 * t2693 - t2972;
t2598 = t2640 * t2904 - t2657 * t2696 + t2658 * t2699;
t2803 = t2598 * t2848;
t2599 = t2641 * t2904 + t2657 * t2699 + t2658 * t2696;
t2802 = t2599 * t2848;
t2706 = t2735 * pkin(4);
t2663 = t2729 * t2694 + t2706;
t2664 = t2735 * t2694 - t2971;
t2600 = t2642 * t2902 - t2663 * t2697 + t2664 * t2700;
t2801 = t2600 * t2846;
t2601 = t2643 * t2902 + t2663 * t2700 + t2664 * t2697;
t2800 = t2601 * t2846;
t2799 = t2893 * t2925;
t2798 = t2892 * t2922;
t2797 = t2891 * t2919;
t2551 = t2742 * t2823 + (pkin(1) * t2986 + t2724 * t2879 + pkin(1)) * t2611;
t2793 = (t2551 * t2741 + 0.2e1 * t2524) * t2730;
t2552 = t2745 * t2822 + (pkin(1) * t2985 + t2726 * t2881 + pkin(1)) * t2612;
t2792 = (t2552 * t2744 + 0.2e1 * t2525) * t2732;
t2553 = t2748 * t2821 + (pkin(1) * t2984 + t2728 * t2883 + pkin(1)) * t2613;
t2791 = (t2553 * t2747 + 0.2e1 * t2526) * t2734;
t2790 = t2741 * t2813;
t2789 = t2744 * t2811;
t2788 = t2747 * t2809;
t2787 = t2667 * t2913 * t2939;
t2786 = t2670 * t2910 * t2938;
t2785 = t2673 * t2907 * t2937;
t2518 = -t2763 + 0.2e1 * t2982;
t2644 = qJ(3,3) + t2832 + t2880;
t2784 = t2617 * t2644 * t2667 + t2518 * t2665;
t2520 = -t2762 + 0.2e1 * t2981;
t2645 = qJ(3,2) + t2831 + t2882;
t2783 = t2618 * t2645 * t2670 + t2520 * t2668;
t2522 = -t2761 + 0.2e1 * t2980;
t2646 = qJ(3,1) + t2830 + t2884;
t2782 = t2619 * t2646 * t2673 + t2522 * t2671;
t2781 = ((t2576 - t2587 / 0.2e1) * t2880 + (pkin(1) * t2560 - qJ(3,3) * t2951) * t2915 + qJ(3,3) * t2560) * t2878 - (qJ(3,3) * t2832 + t2887 * t2717 + t2740) * t2963;
t2780 = ((t2578 - t2588 / 0.2e1) * t2882 + (pkin(1) * t2561 - qJ(3,2) * t2948) * t2912 + qJ(3,2) * t2561) * t2877 - (qJ(3,2) * t2831 + t2886 * t2718 + t2743) * t2961;
t2779 = ((t2580 - t2589 / 0.2e1) * t2884 + (pkin(1) * t2562 - qJ(3,1) * t2945) * t2909 + qJ(3,1) * t2562) * t2876 - (qJ(3,1) * t2830 + t2885 * t2719 + t2746) * t2959;
t2775 = t2524 * t2926 + t2730 * t2863;
t2774 = -t2524 * t2925 + t2724 * t2863;
t2773 = t2525 * t2923 + t2732 * t2862;
t2772 = -t2525 * t2922 + t2726 * t2862;
t2771 = t2526 * t2920 + t2734 * t2861;
t2770 = -t2526 * t2919 + t2728 * t2861;
t2769 = t2689 * t2808 + t2813;
t2714 = t2724 ^ 2;
t2768 = t2714 * t2963 + t2808 * t2875;
t2767 = t2690 * t2807 + t2811;
t2715 = t2726 ^ 2;
t2766 = t2715 * t2961 + t2807 * t2874;
t2765 = t2691 * t2806 + t2809;
t2716 = t2728 ^ 2;
t2764 = t2716 * t2959 + t2806 * t2873;
t2634 = t2679 * t2735 - t2971;
t2633 = t2678 * t2733 - t2972;
t2632 = t2677 * t2731 - t2973;
t2631 = t2679 * t2729 + t2706;
t2630 = t2678 * t2727 + t2705;
t2629 = t2677 * t2725 + t2704;
t2610 = t2631 * t2700 + t2634 * t2697;
t2609 = t2630 * t2699 + t2633 * t2696;
t2608 = t2629 * t2698 + t2632 * t2695;
t2607 = -t2631 * t2697 + t2634 * t2700;
t2606 = -t2630 * t2696 + t2633 * t2699;
t2605 = -t2629 * t2695 + t2632 * t2698;
t2595 = -0.2e1 * t2672 * t2937 + t2613;
t2594 = -0.2e1 * t2669 * t2938 + t2612;
t2593 = -0.2e1 * t2666 * t2939 + t2611;
t2541 = t2592 * t2840 + (t2840 * t2990 + t2691) * t2945;
t2540 = t2591 * t2841 + (t2841 * t2990 + t2690) * t2948;
t2539 = t2590 * t2842 + (t2842 * t2990 + t2689) * t2951;
t2538 = -t2592 * t2916 + (pkin(1) * t2916 + t2909) * t2993 - t2562;
t2537 = -t2591 * t2917 + (pkin(1) * t2917 + t2912) * t2992 - t2561;
t2536 = -t2590 * t2918 + (pkin(1) * t2918 + t2915) * t2991 - t2560;
t1 = [(-t2639 * t2963 - t2641 * t2961 - t2643 * t2959) * MDP(1) + (-t2596 * t2787 - t2598 * t2786 - t2600 * t2785 - t2768 * t2639 - t2766 * t2641 - t2764 * t2643) * MDP(4) + (t2593 * t2805 + t2594 * t2803 + t2595 * t2801) * MDP(5) + (t2596 * t2790 + t2598 * t2789 + t2600 * t2788 - t2775 * t2639 - t2773 * t2641 - t2771 * t2643) * MDP(6) + (t2596 * t2814 + t2598 * t2812 + t2600 * t2810 + t2774 * t2639 + t2772 * t2641 + t2770 * t2643) * MDP(7) + (t2524 * t2805 + t2525 * t2803 + t2526 * t2801) * MDP(8) + (t2539 * t2819 + t2540 * t2817 + t2541 * t2815 - t2605 * t2896 - t2606 * t2895 - t2607 * t2894 + (t2671 * t2824 + (t2782 * t2600 - t2607 * t2853) * t2747) * t2734 + (t2668 * t2826 + (t2783 * t2598 - t2606 * t2855) * t2744) * t2732 + (t2665 * t2828 + (t2784 * t2596 - t2605 * t2857) * t2741) * t2730) * MDP(11) + (-t2639 * t2927 - t2641 * t2924 - t2643 * t2921 + (t2643 * t2867 + (t2600 * t2847 + t2607 * t2728) * t2532) * t2747 + (t2641 * t2868 + (t2598 * t2849 + t2606 * t2726) * t2531) * t2744 + (t2639 * t2869 + (t2596 * t2851 + t2605 * t2724) * t2530) * t2741) * MDP(12) + (t2536 * t2819 + t2537 * t2817 + t2538 * t2815 + t2605 * t2957 + t2606 * t2956 + t2607 * t2955 + (t2600 * t2791 + t2728 * t2824) * t2671 + (t2598 * t2792 + t2726 * t2826) * t2668 + (t2596 * t2793 + t2724 * t2828) * t2665) * MDP(13) + (t2779 * t2643 + t2780 * t2641 + t2781 * t2639 + (t2600 * t2797 + t2888 * t2607) * t2747 + (t2598 * t2798 + t2889 * t2606) * t2744 + (t2596 * t2799 + t2890 * t2605) * t2741) * MDP(14) + (-t2639 * t2769 - t2641 * t2767 - t2643 * t2765) * t2994; (t2638 * t2963 + t2640 * t2961 + t2642 * t2959) * MDP(1) + (-t2597 * t2787 - t2599 * t2786 - t2601 * t2785 + t2768 * t2638 + t2766 * t2640 + t2764 * t2642) * MDP(4) + (t2593 * t2804 + t2594 * t2802 + t2595 * t2800) * MDP(5) + (t2597 * t2790 + t2599 * t2789 + t2601 * t2788 + t2775 * t2638 + t2773 * t2640 + t2771 * t2642) * MDP(6) + (t2597 * t2814 + t2599 * t2812 + t2601 * t2810 - t2774 * t2638 - t2772 * t2640 - t2770 * t2642) * MDP(7) + (t2524 * t2804 + t2525 * t2802 + t2526 * t2800) * MDP(8) + (t2539 * t2820 + t2540 * t2818 + t2541 * t2816 - t2608 * t2896 - t2609 * t2895 - t2610 * t2894 + (t2671 * t2825 + (t2782 * t2601 - t2610 * t2853) * t2747) * t2734 + (t2668 * t2827 + (t2783 * t2599 - t2609 * t2855) * t2744) * t2732 + (t2665 * t2829 + (t2784 * t2597 - t2608 * t2857) * t2741) * t2730) * MDP(11) + (t2638 * t2927 + t2640 * t2924 + t2642 * t2921 + (-t2642 * t2867 + (t2601 * t2847 + t2610 * t2728) * t2532) * t2747 + (-t2640 * t2868 + (t2599 * t2849 + t2609 * t2726) * t2531) * t2744 + (-t2638 * t2869 + (t2597 * t2851 + t2608 * t2724) * t2530) * t2741) * MDP(12) + (t2536 * t2820 + t2537 * t2818 + t2538 * t2816 + t2608 * t2957 + t2609 * t2956 + t2610 * t2955 + (t2601 * t2791 + t2728 * t2825) * t2671 + (t2599 * t2792 + t2726 * t2827) * t2668 + (t2597 * t2793 + t2724 * t2829) * t2665) * MDP(13) + (-t2779 * t2642 - t2780 * t2640 - t2781 * t2638 + (t2601 * t2797 + t2888 * t2610) * t2747 + (t2599 * t2798 + t2889 * t2609) * t2744 + (t2597 * t2799 + t2890 * t2608) * t2741) * MDP(14) + (t2638 * t2769 + t2640 * t2767 + t2642 * t2765) * t2994; 0.2e1 * (t2524 * t2724 + t2525 * t2726 + t2526 * t2728) * MDP(13) + ((-MDP(4) * t2852 + MDP(6) * t2532) * t2716 - (-t2526 * MDP(11) + t2565 * MDP(13) + t2888 * MDP(14)) * t2796 + (t2595 * MDP(5) + t2526 * MDP(8) + (t2646 * t2613 + t2796 * t2852 + t2522) * MDP(11) + t2553 * MDP(13) + t2891 * MDP(14) + (t2734 * MDP(7) + (-t2796 + t2684) * MDP(12)) * t2532) * t2728) * t2747 + ((-MDP(4) * t2854 + MDP(6) * t2531) * t2715 - (-t2525 * MDP(11) + t2564 * MDP(13) + t2889 * MDP(14)) * t2795 + (t2594 * MDP(5) + t2525 * MDP(8) + (t2645 * t2612 + t2795 * t2854 + t2520) * MDP(11) + t2552 * MDP(13) + t2892 * MDP(14) + (t2732 * MDP(7) + (-t2795 + t2682) * MDP(12)) * t2531) * t2726) * t2744 + ((-MDP(4) * t2856 + MDP(6) * t2530) * t2714 - (-t2524 * MDP(11) + t2563 * MDP(13) + t2890 * MDP(14)) * t2794 + (t2593 * MDP(5) + t2524 * MDP(8) + (t2644 * t2611 + t2794 * t2856 + t2518) * MDP(11) + t2551 * MDP(13) + t2893 * MDP(14) + (t2730 * MDP(7) + (-t2794 + t2680) * MDP(12)) * t2530) * t2724) * t2741;];
taucX  = t1;
