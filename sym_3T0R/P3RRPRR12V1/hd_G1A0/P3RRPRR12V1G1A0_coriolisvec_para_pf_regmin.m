% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR12V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:02
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V1G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:02:10
% EndTime: 2020-08-06 19:02:19
% DurationCPUTime: 8.76s
% Computational Cost: add. (46297->472), mult. (84897->884), div. (4701->12), fcn. (53034->18), ass. (0->424)
t1131 = legFrame(3,3);
t1105 = sin(t1131);
t1108 = cos(t1131);
t1135 = sin(qJ(1,3));
t1141 = cos(qJ(1,3));
t1048 = -t1105 * t1135 + t1108 * t1141;
t1415 = 0.2e1 * t1048;
t1049 = t1105 * t1141 + t1108 * t1135;
t1408 = -0.2e1 * t1049;
t1132 = legFrame(2,3);
t1106 = sin(t1132);
t1109 = cos(t1132);
t1137 = sin(qJ(1,2));
t1143 = cos(qJ(1,2));
t1050 = -t1106 * t1137 + t1109 * t1143;
t1414 = 0.2e1 * t1050;
t1051 = t1106 * t1143 + t1109 * t1137;
t1407 = -0.2e1 * t1051;
t1133 = legFrame(1,3);
t1107 = sin(t1133);
t1110 = cos(t1133);
t1139 = sin(qJ(1,1));
t1145 = cos(qJ(1,1));
t1052 = -t1107 * t1139 + t1110 * t1145;
t1413 = 0.2e1 * t1052;
t1053 = t1107 * t1145 + t1110 * t1139;
t1406 = -0.2e1 * t1053;
t1138 = sin(qJ(2,1));
t1104 = t1138 * qJ(3,1);
t1144 = cos(qJ(2,1));
t1149 = pkin(1) + pkin(2);
t1306 = t1144 * t1149;
t1089 = t1104 + t1306;
t1081 = 0.1e1 / t1089;
t1147 = xDP(2);
t1148 = xDP(1);
t1061 = -t1139 * t1148 + t1145 * t1147;
t1062 = t1139 * t1147 + t1145 * t1148;
t1146 = xDP(3);
t1381 = qJ(3,1) * t1146;
t1026 = -t1381 + (t1061 * t1107 + t1062 * t1110) * t1149;
t1129 = t1144 ^ 2;
t1389 = pkin(4) * t1148;
t1071 = t1147 * t1104 - t1389;
t1117 = pkin(4) * t1147;
t1072 = t1148 * t1104 + t1117;
t1304 = t1146 * t1149;
t1247 = (t1071 * t1139 + t1072 * t1145) * t1110 + (t1071 * t1145 - t1072 * t1139) * t1107 + t1138 * t1304;
t996 = t1026 * t1129 + t1247 * t1144 + t1381;
t1371 = t1081 * t996;
t1412 = 0.2e1 * t1371;
t1136 = sin(qJ(2,2));
t1103 = t1136 * qJ(3,2);
t1142 = cos(qJ(2,2));
t1308 = t1142 * t1149;
t1088 = t1103 + t1308;
t1078 = 0.1e1 / t1088;
t1059 = -t1137 * t1148 + t1143 * t1147;
t1060 = t1137 * t1147 + t1143 * t1148;
t1379 = qJ(3,2) * t1146;
t1025 = -t1379 + (t1059 * t1106 + t1060 * t1109) * t1149;
t1128 = t1142 ^ 2;
t1069 = t1147 * t1103 - t1389;
t1070 = t1148 * t1103 + t1117;
t1248 = (t1069 * t1137 + t1070 * t1143) * t1109 + (t1069 * t1143 - t1070 * t1137) * t1106 + t1136 * t1304;
t995 = t1025 * t1128 + t1248 * t1142 + t1379;
t1373 = t1078 * t995;
t1411 = 0.2e1 * t1373;
t1134 = sin(qJ(2,3));
t1102 = t1134 * qJ(3,3);
t1140 = cos(qJ(2,3));
t1310 = t1140 * t1149;
t1087 = t1102 + t1310;
t1075 = 0.1e1 / t1087;
t1057 = -t1135 * t1148 + t1141 * t1147;
t1058 = t1135 * t1147 + t1141 * t1148;
t1377 = qJ(3,3) * t1146;
t1024 = -t1377 + (t1057 * t1105 + t1058 * t1108) * t1149;
t1127 = t1140 ^ 2;
t1065 = t1147 * t1102 - t1389;
t1066 = t1148 * t1102 + t1117;
t1249 = (t1065 * t1135 + t1066 * t1141) * t1108 + (t1065 * t1141 - t1066 * t1135) * t1105 + t1134 * t1304;
t994 = t1024 * t1127 + t1249 * t1140 + t1377;
t1375 = t1075 * t994;
t1410 = 0.2e1 * t1375;
t1000 = t1024 * t1140 + t1249;
t1150 = qJ(3,3) ^ 2;
t1159 = pkin(4) ^ 2;
t1111 = t1150 + t1159;
t1318 = t1134 * t1149;
t1378 = qJ(3,3) * t1140;
t1198 = -t1318 + t1378;
t1161 = (pkin(1) ^ 2);
t1409 = -2 * pkin(1);
t1246 = -t1161 + (t1409 - pkin(2)) * pkin(2);
t1255 = (qJ(3,3) + t1149) * (-qJ(3,3) + t1149) * t1127;
t1292 = -0.2e1 * t1378;
t1151 = 0.1e1 / qJ(3,3);
t1303 = t1149 * t1151;
t1036 = t1057 * t1108 - t1058 * t1105;
t1344 = t1036 * t1151;
t1346 = t1036 * t1075;
t1152 = 0.1e1 / qJ(3,3) ^ 2;
t1358 = t1000 * t1152;
t1365 = t1152 * t994;
t1367 = t1151 * t994;
t1395 = pkin(4) * t1036;
t1317 = t1134 * t1151;
t955 = (-t1149 * t1375 + t1000) * pkin(4) * t1317;
t1402 = -pkin(4) / 0.2e1;
t976 = (t1036 * t1318 + t1367 * t1402) * t1075;
t1285 = pkin(4) * t1346;
t1012 = t1134 * t1285;
t1273 = t1075 * t1367;
t979 = t1149 * t1273 + t1012;
t1173 = -((t976 * t1292 + t955 + (-t1111 - t1255) * t1346) * t1344 + (t1000 * t1303 + ((-t1150 + t1246) * t1367 + t1198 * t1395) * t1075) * t1365) * t1075 - t979 * t1358;
t1001 = t1025 * t1142 + t1248;
t1153 = qJ(3,2) ^ 2;
t1112 = t1153 + t1159;
t1315 = t1136 * t1149;
t1380 = qJ(3,2) * t1142;
t1199 = -t1315 + t1380;
t1254 = (qJ(3,2) + t1149) * (-qJ(3,2) + t1149) * t1128;
t1294 = -0.2e1 * t1380;
t1154 = 0.1e1 / qJ(3,2);
t1302 = t1149 * t1154;
t1037 = t1059 * t1109 - t1060 * t1106;
t1341 = t1037 * t1154;
t1343 = t1037 * t1078;
t1155 = 0.1e1 / qJ(3,2) ^ 2;
t1357 = t1001 * t1155;
t1362 = t1155 * t995;
t1364 = t1154 * t995;
t1394 = pkin(4) * t1037;
t1314 = t1136 * t1154;
t956 = (-t1149 * t1373 + t1001) * pkin(4) * t1314;
t977 = (t1037 * t1315 + t1364 * t1402) * t1078;
t1284 = pkin(4) * t1343;
t1013 = t1136 * t1284;
t1271 = t1078 * t1364;
t980 = t1149 * t1271 + t1013;
t1172 = -((t977 * t1294 + t956 + (-t1112 - t1254) * t1343) * t1341 + (t1001 * t1302 + ((-t1153 + t1246) * t1364 + t1199 * t1394) * t1078) * t1362) * t1078 - t980 * t1357;
t1002 = t1026 * t1144 + t1247;
t1156 = qJ(3,1) ^ 2;
t1113 = t1156 + t1159;
t1312 = t1138 * t1149;
t1382 = qJ(3,1) * t1144;
t1200 = -t1312 + t1382;
t1253 = (qJ(3,1) + t1149) * (-qJ(3,1) + t1149) * t1129;
t1296 = -0.2e1 * t1382;
t1157 = 0.1e1 / qJ(3,1);
t1301 = t1149 * t1157;
t1038 = t1061 * t1110 - t1062 * t1107;
t1338 = t1038 * t1157;
t1340 = t1038 * t1081;
t1158 = 0.1e1 / qJ(3,1) ^ 2;
t1356 = t1002 * t1158;
t1359 = t1158 * t996;
t1361 = t1157 * t996;
t1393 = pkin(4) * t1038;
t1311 = t1138 * t1157;
t957 = (-t1149 * t1371 + t1002) * pkin(4) * t1311;
t978 = (t1038 * t1312 + t1361 * t1402) * t1081;
t1283 = pkin(4) * t1340;
t1014 = t1138 * t1283;
t1269 = t1081 * t1361;
t981 = t1149 * t1269 + t1014;
t1171 = -((t978 * t1296 + t957 + (-t1113 - t1253) * t1340) * t1338 + (t1002 * t1301 + ((-t1156 + t1246) * t1361 + t1200 * t1393) * t1081) * t1359) * t1081 - t981 * t1356;
t1076 = 0.1e1 / t1087 ^ 2;
t1079 = 0.1e1 / t1088 ^ 2;
t1082 = 0.1e1 / t1089 ^ 2;
t1405 = -0.2e1 * t1127;
t1404 = -0.2e1 * t1128;
t1403 = -0.2e1 * t1129;
t986 = pkin(1) * t1273;
t997 = t1000 * t1151;
t970 = t986 - t997;
t1282 = pkin(2) * t1273 + t970;
t1293 = qJ(3,3) * t1405;
t1330 = t1075 * t1140;
t1331 = t1075 * t1134;
t982 = t994 * t1331;
t934 = -(t1140 * t979 + t982) * t1075 * t1358 + (-(-t1036 * t1255 * t1330 + t976 * t1293 + (-t1111 * t1346 + t955) * t1140) * t1344 - (-(t1012 + t1282) * t1310 + (t1127 * t1285 - t1134 * t1282) * qJ(3,3)) * t1365) * t1076;
t1401 = pkin(1) * t934;
t988 = pkin(1) * t1271;
t998 = t1001 * t1154;
t971 = t988 - t998;
t1281 = pkin(2) * t1271 + t971;
t1295 = qJ(3,2) * t1404;
t1328 = t1078 * t1142;
t1329 = t1078 * t1136;
t983 = t995 * t1329;
t935 = -(t1142 * t980 + t983) * t1078 * t1357 + (-(-t1037 * t1254 * t1328 + t977 * t1295 + (-t1112 * t1343 + t956) * t1142) * t1341 - (-(t1013 + t1281) * t1308 + (t1128 * t1284 - t1136 * t1281) * qJ(3,2)) * t1362) * t1079;
t1400 = pkin(1) * t935;
t990 = pkin(1) * t1269;
t999 = t1002 * t1157;
t972 = t990 - t999;
t1280 = pkin(2) * t1269 + t972;
t1297 = qJ(3,1) * t1403;
t1326 = t1081 * t1144;
t1327 = t1081 * t1138;
t984 = t996 * t1327;
t936 = -(t1144 * t981 + t984) * t1081 * t1356 + (-(-t1038 * t1253 * t1326 + t978 * t1297 + (-t1113 * t1340 + t957) * t1144) * t1338 - (-(t1014 + t1280) * t1306 + (t1129 * t1283 - t1138 * t1280) * qJ(3,1)) * t1359) * t1082;
t1399 = pkin(1) * t936;
t1099 = 0.2e1 * t1127 - 0.1e1;
t1100 = 0.2e1 * t1128 - 0.1e1;
t1101 = 0.2e1 * t1129 - 0.1e1;
t1398 = pkin(1) * t1134;
t1397 = pkin(1) * t1136;
t1396 = pkin(1) * t1138;
t1392 = pkin(4) * t1135;
t1391 = pkin(4) * t1137;
t1390 = pkin(4) * t1139;
t1027 = t1036 ^ 2;
t1021 = t1027 * t1076;
t1239 = t1000 * t1410;
t1300 = -t1150 + t1161;
t1319 = t1134 * t1140;
t1388 = (t1150 + t1161) * t934 - pkin(1) * t1173 + t1151 * t1239 + (-t1099 * qJ(3,3) * pkin(1) + t1300 * t1319) * t1021;
t1028 = t1037 ^ 2;
t1022 = t1028 * t1079;
t1238 = t1001 * t1411;
t1299 = -t1153 + t1161;
t1316 = t1136 * t1142;
t1387 = (t1153 + t1161) * t935 - pkin(1) * t1172 + t1154 * t1238 + (-t1100 * qJ(3,2) * pkin(1) + t1299 * t1316) * t1022;
t1029 = t1038 ^ 2;
t1023 = t1029 * t1082;
t1237 = t1002 * t1412;
t1298 = -t1156 + t1161;
t1313 = t1138 * t1144;
t1386 = (t1156 + t1161) * t936 - pkin(1) * t1171 + t1157 * t1237 + (-t1101 * qJ(3,1) * pkin(1) + t1298 * t1313) * t1023;
t1266 = t1140 * t1021;
t929 = t1173 - t1401;
t1349 = t1027 * t1127;
t1366 = t1152 * t994 ^ 2;
t973 = -t1021 + (t1349 - t1366) * t1076;
t1385 = qJ(3,3) * t973 - t1266 * t1398 + t929;
t1264 = t1142 * t1022;
t931 = t1172 - t1400;
t1348 = t1028 * t1128;
t1363 = t1155 * t995 ^ 2;
t974 = -t1022 + (t1348 - t1363) * t1079;
t1384 = qJ(3,2) * t974 - t1264 * t1397 + t931;
t1262 = t1144 * t1023;
t933 = t1171 - t1399;
t1347 = t1029 * t1129;
t1360 = t1158 * t996 ^ 2;
t975 = -t1023 + (t1347 - t1360) * t1082;
t1383 = qJ(3,1) * t975 - t1262 * t1396 + t933;
t1077 = t1075 * t1076;
t1224 = t1077 * t994 * t1344;
t1345 = t1036 * t1076;
t940 = -t1198 * t1224 + (-t997 * t1134 - (-t1395 + (-t1134 * t1303 + t1140) * t994) * t1075 - t1000 * t1317) * t1345;
t1376 = t1075 * t940;
t1080 = t1078 * t1079;
t1223 = t1080 * t995 * t1341;
t1342 = t1037 * t1079;
t941 = -t1199 * t1223 + (-t998 * t1136 - (-t1394 + (-t1136 * t1302 + t1142) * t995) * t1078 - t1001 * t1314) * t1342;
t1374 = t1078 * t941;
t1083 = t1081 * t1082;
t1222 = t1083 * t996 * t1338;
t1339 = t1038 * t1082;
t942 = -t1200 * t1222 + (-t999 * t1138 - (-t1393 + (-t1138 * t1301 + t1144) * t996) * t1081 - t1002 * t1311) * t1339;
t1372 = t1081 * t942;
t1370 = (pkin(1) * t1140 + t1102) * t940;
t1369 = (pkin(1) * t1142 + t1103) * t941;
t1368 = (pkin(1) * t1144 + t1104) * t942;
t1114 = t1141 * pkin(4);
t1039 = t1087 * t1135 + t1114;
t1042 = t1087 * t1141 - t1392;
t1015 = -t1039 * t1105 + t1042 * t1108;
t1355 = t1015 * t1151;
t1115 = t1143 * pkin(4);
t1040 = t1088 * t1137 + t1115;
t1043 = t1088 * t1143 - t1391;
t1016 = -t1040 * t1106 + t1043 * t1109;
t1354 = t1016 * t1154;
t1116 = t1145 * pkin(4);
t1041 = t1089 * t1139 + t1116;
t1044 = t1089 * t1145 - t1390;
t1017 = -t1041 * t1107 + t1044 * t1110;
t1353 = t1017 * t1157;
t1018 = t1039 * t1108 + t1042 * t1105;
t1352 = t1018 * t1151;
t1019 = t1040 * t1109 + t1043 * t1106;
t1351 = t1019 * t1154;
t1020 = t1041 * t1110 + t1044 * t1107;
t1350 = t1020 * t1157;
t1337 = t1048 * t1075;
t1336 = t1049 * t1075;
t1335 = t1050 * t1078;
t1334 = t1051 * t1078;
t1333 = t1052 * t1081;
t1332 = t1053 * t1081;
t1124 = t1134 ^ 2;
t1325 = t1124 * t1151;
t1125 = t1136 ^ 2;
t1324 = t1125 * t1154;
t1126 = t1138 ^ 2;
t1323 = t1126 * t1157;
t1322 = t1127 * t1151;
t1321 = t1128 * t1154;
t1320 = t1129 * t1157;
t1309 = t1140 * t1151;
t1307 = t1142 * t1154;
t1305 = t1144 * t1157;
t1291 = 0.2e1 * t1345;
t1290 = 0.2e1 * t1342;
t1289 = 0.2e1 * t1339;
t1288 = 0.2e1 * t1319;
t1287 = 0.2e1 * t1316;
t1286 = 0.2e1 * t1313;
t1279 = t1076 * (t982 + (t986 - 0.2e1 * t997) * t1140) * t994;
t1278 = t1079 * (t983 + (t988 - 0.2e1 * t998) * t1142) * t995;
t1277 = t1082 * (t984 + (t990 - 0.2e1 * t999) * t1144) * t996;
t1272 = t1077 * t1366;
t1270 = t1080 * t1363;
t1268 = t1083 * t1360;
t1267 = t1134 * t1021;
t1265 = t1136 * t1022;
t1263 = t1138 * t1023;
t1090 = t1378 - t1398;
t1261 = t1090 * t1330;
t1260 = t1075 * t1309;
t1092 = t1380 - t1397;
t1259 = t1092 * t1328;
t1258 = t1078 * t1307;
t1094 = t1382 - t1396;
t1257 = t1094 * t1326;
t1256 = t1081 * t1305;
t1252 = t1134 * t1309;
t1251 = t1136 * t1307;
t1250 = t1138 * t1305;
t1245 = pkin(1) * t1288;
t1244 = pkin(1) * t1287;
t1243 = pkin(1) * t1286;
t1242 = t1151 * (t1152 * t1239 + (pkin(1) * t1405 + t1134 * t1292 + pkin(1)) * t1021) + 0.2e1 * t934;
t1241 = t1154 * (t1155 * t1238 + (pkin(1) * t1404 + t1136 * t1294 + pkin(1)) * t1022) + 0.2e1 * t935;
t1240 = t1157 * (t1158 * t1237 + (pkin(1) * t1403 + t1138 * t1296 + pkin(1)) * t1023) + 0.2e1 * t936;
t1236 = t1370 * t1415;
t1235 = t1370 * t1408;
t1234 = t1369 * t1414;
t1233 = t1369 * t1407;
t1232 = t1368 * t1413;
t1231 = t1368 * t1406;
t1230 = t1048 * t1291;
t1229 = t1345 * t1408;
t1228 = t1050 * t1290;
t1227 = t1342 * t1407;
t1226 = t1052 * t1289;
t1225 = t1339 * t1406;
t1221 = t1322 * t1376;
t1220 = t1321 * t1374;
t1219 = t1320 * t1372;
t1218 = t940 * t1252;
t1217 = t941 * t1251;
t1216 = t942 * t1250;
t1063 = t1135 * t1102 + t1114;
t1064 = t1141 * t1102 - t1392;
t1006 = t1048 * t1310 - t1063 * t1105 + t1064 * t1108;
t1215 = t1006 * t1260;
t1007 = t1049 * t1310 + t1063 * t1108 + t1064 * t1105;
t1214 = t1007 * t1260;
t1067 = t1137 * t1103 + t1115;
t1068 = t1143 * t1103 - t1391;
t1008 = t1050 * t1308 - t1067 * t1106 + t1068 * t1109;
t1213 = t1008 * t1258;
t1009 = t1051 * t1308 + t1067 * t1109 + t1068 * t1106;
t1212 = t1009 * t1258;
t1073 = t1139 * t1104 + t1116;
t1074 = t1145 * t1104 - t1390;
t1010 = t1052 * t1306 - t1073 * t1107 + t1074 * t1110;
t1211 = t1010 * t1256;
t1011 = t1053 * t1306 + t1073 * t1110 + t1074 * t1107;
t1210 = t1011 * t1256;
t1209 = t1388 * t1330;
t1208 = t1387 * t1328;
t1207 = t1386 * t1326;
t1206 = t1140 * t1242;
t1205 = t1241 * t1142;
t1204 = t1240 * t1144;
t1203 = t1075 * t1218;
t1202 = t1078 * t1217;
t1201 = t1081 * t1216;
t1197 = t1077 * t1317 * t1349;
t1196 = t1080 * t1314 * t1348;
t1195 = t1083 * t1311 * t1347;
t1054 = qJ(3,3) + t1245 + t1293;
t928 = -t1173 + 0.2e1 * t1401;
t1194 = t1027 * t1054 * t1077 + t1075 * t928;
t1055 = qJ(3,2) + t1244 + t1295;
t930 = -t1172 + 0.2e1 * t1400;
t1193 = t1028 * t1055 * t1080 + t1078 * t930;
t1056 = qJ(3,1) + t1243 + t1297;
t932 = -t1171 + 0.2e1 * t1399;
t1192 = t1029 * t1056 * t1083 + t1081 * t932;
t1188 = -(qJ(3,3) * t1245 + t1300 * t1127 + t1150) * t1376 + ((t986 - t997 / 0.2e1) * t1293 + (pkin(1) * t970 - qJ(3,3) * t1375) * t1319 + qJ(3,3) * t970) * t1291;
t1187 = -(qJ(3,2) * t1244 + t1299 * t1128 + t1153) * t1374 + ((t988 - t998 / 0.2e1) * t1295 + (pkin(1) * t971 - qJ(3,2) * t1373) * t1316 + qJ(3,2) * t971) * t1290;
t1186 = -(qJ(3,1) * t1243 + t1298 * t1129 + t1156) * t1372 + ((t990 - t999 / 0.2e1) * t1297 + (pkin(1) * t972 - qJ(3,1) * t1371) * t1313 + qJ(3,1) * t972) * t1289;
t1185 = t1140 * t1272 + t934 * t1331;
t1184 = t1134 * t1272 - t934 * t1330;
t1183 = t1142 * t1270 + t935 * t1329;
t1182 = t1136 * t1270 - t935 * t1328;
t1181 = t1144 * t1268 + t936 * t1327;
t1180 = t1138 * t1268 - t936 * t1326;
t1179 = t1099 * t1224 + t1319 * t1376;
t1178 = t1124 * t1376 + t1224 * t1288;
t1177 = t1100 * t1223 + t1316 * t1374;
t1176 = t1125 * t1374 + t1223 * t1287;
t1175 = t1101 * t1222 + t1313 * t1372;
t1174 = t1126 * t1372 + t1222 * t1286;
t1005 = -0.2e1 * t1082 * t1347 + t1023;
t1004 = -0.2e1 * t1079 * t1348 + t1022;
t1003 = -0.2e1 * t1076 * t1349 + t1021;
t951 = t1002 * t1250 + (t1250 * t1409 + t1101) * t1371;
t950 = t1001 * t1251 + (t1251 * t1409 + t1100) * t1373;
t949 = t1000 * t1252 + (t1252 * t1409 + t1099) * t1375;
t948 = -t1002 * t1320 + (pkin(1) * t1320 + t1313) * t1412 - t972;
t947 = -t1001 * t1321 + (pkin(1) * t1321 + t1316) * t1411 - t971;
t946 = -t1000 * t1322 + (pkin(1) * t1322 + t1319) * t1410 - t970;
t924 = t1138 * t933 + t1382 * t936;
t923 = t1136 * t931 + t935 * t1380;
t922 = t1134 * t929 + t934 * t1378;
t1 = [-t942 * t1332 - t941 * t1334 - t940 * t1336, 0, 0, -t1006 * t1197 - t1008 * t1196 - t1010 * t1195 - t1049 * t1178 - t1051 * t1176 - t1053 * t1174, t1003 * t1215 + t1004 * t1213 + t1005 * t1211 + t1175 * t1406 + t1177 * t1407 + t1179 * t1408, t1006 * t1203 + t1008 * t1202 + t1010 * t1201 - t1049 * t1185 - t1051 * t1183 - t1053 * t1181, t1006 * t1221 + t1008 * t1220 + t1010 * t1219 + t1049 * t1184 + t1051 * t1182 + t1053 * t1180, t1211 * t936 + t1213 * t935 + t1215 * t934, 0, 0, t949 * t1229 + t950 * t1227 + t951 * t1225 - t934 * t1355 - t935 * t1354 - t936 * t1353 + (t1081 * t1231 + (t1010 * t1192 - t1017 * t1263) * t1157) * t1144 + (t1078 * t1233 + (t1008 * t1193 - t1016 * t1265) * t1154) * t1142 + (t1075 * t1235 + (t1006 * t1194 - t1015 * t1267) * t1151) * t1140, -t922 * t1336 - t923 * t1334 - t924 * t1332 + (t1053 * t1277 + (t1010 * t1257 + t1017 * t1138) * t942) * t1157 + (t1051 * t1278 + (t1008 * t1259 + t1016 * t1136) * t941) * t1154 + (t1049 * t1279 + (t1006 * t1261 + t1015 * t1134) * t940) * t1151, t946 * t1229 + t947 * t1227 + t948 * t1225 + t973 * t1355 + t974 * t1354 + t975 * t1353 + (t1010 * t1204 + t1138 * t1231) * t1081 + (t1008 * t1205 + t1136 * t1233) * t1078 + (t1006 * t1206 + t1134 * t1235) * t1075, t1186 * t1053 + t1187 * t1051 + t1188 * t1049 + (t1010 * t1207 + t1383 * t1017) * t1157 + (t1008 * t1208 + t1384 * t1016) * t1154 + (t1006 * t1209 + t1385 * t1015) * t1151, 0; t942 * t1333 + t941 * t1335 + t940 * t1337, 0, 0, -t1007 * t1197 - t1009 * t1196 - t1011 * t1195 + t1048 * t1178 + t1050 * t1176 + t1052 * t1174, t1003 * t1214 + t1004 * t1212 + t1005 * t1210 + t1175 * t1413 + t1177 * t1414 + t1179 * t1415, t1007 * t1203 + t1009 * t1202 + t1011 * t1201 + t1048 * t1185 + t1050 * t1183 + t1052 * t1181, t1007 * t1221 + t1009 * t1220 + t1011 * t1219 - t1048 * t1184 - t1050 * t1182 - t1052 * t1180, t1210 * t936 + t1212 * t935 + t1214 * t934, 0, 0, t949 * t1230 + t950 * t1228 + t951 * t1226 - t934 * t1352 - t935 * t1351 - t936 * t1350 + (t1081 * t1232 + (t1011 * t1192 - t1020 * t1263) * t1157) * t1144 + (t1078 * t1234 + (t1009 * t1193 - t1019 * t1265) * t1154) * t1142 + (t1075 * t1236 + (t1007 * t1194 - t1018 * t1267) * t1151) * t1140, t922 * t1337 + t923 * t1335 + t924 * t1333 + (-t1052 * t1277 + (t1011 * t1257 + t1020 * t1138) * t942) * t1157 + (-t1050 * t1278 + (t1009 * t1259 + t1019 * t1136) * t941) * t1154 + (-t1048 * t1279 + (t1007 * t1261 + t1018 * t1134) * t940) * t1151, t946 * t1230 + t947 * t1228 + t948 * t1226 + t973 * t1352 + t974 * t1351 + t975 * t1350 + (t1011 * t1204 + t1138 * t1232) * t1081 + (t1009 * t1205 + t1136 * t1234) * t1078 + (t1007 * t1206 + t1134 * t1236) * t1075, -t1186 * t1052 - t1187 * t1050 - t1188 * t1048 + (t1011 * t1207 + t1383 * t1020) * t1157 + (t1009 * t1208 + t1384 * t1019) * t1154 + (t1007 * t1209 + t1385 * t1018) * t1151, 0; 0, 0, 0, -t1262 * t1323 - t1264 * t1324 - t1266 * t1325, t1003 * t1317 + t1004 * t1314 + t1005 * t1311, t1323 * t942 + t1324 * t941 + t1325 * t940, t1216 + t1217 + t1218, t1311 * t936 + t1314 * t935 + t1317 * t934, 0, 0, (t1200 * t936 + (t932 + (t1144 * t1200 + t1056) * t1023) * t1138) * t1157 + (t1199 * t935 + (t930 + (t1142 * t1199 + t1055) * t1022) * t1136) * t1154 + (t1198 * t934 + (t928 + (t1140 * t1198 + t1054) * t1021) * t1134) * t1151, (-t1200 + t1094) * t942 * t1311 + (-t1199 + t1092) * t941 * t1314 + (-t1198 + t1090) * t940 * t1317, -t1151 * t1198 * t973 - t1154 * t1199 * t974 - t1157 * t1200 * t975 + t1134 * t1242 + t1136 * t1241 + t1138 * t1240, (t1386 * t1138 - t1200 * t1383) * t1157 + (t1387 * t1136 - t1199 * t1384) * t1154 + (t1388 * t1134 - t1198 * t1385) * t1151, 0;];
tau_reg  = t1;
