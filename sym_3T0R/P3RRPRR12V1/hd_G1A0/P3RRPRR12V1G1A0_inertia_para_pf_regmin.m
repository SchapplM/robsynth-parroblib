% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:02
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V1G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:02:07
% EndTime: 2020-08-06 19:02:10
% DurationCPUTime: 3.17s
% Computational Cost: add. (3804->323), mult. (6822->709), div. (822->12), fcn. (6600->18), ass. (0->320)
t732 = legFrame(3,3);
t714 = sin(t732);
t717 = cos(t732);
t736 = sin(qJ(1,3));
t742 = cos(qJ(1,3));
t678 = -t714 * t736 + t717 * t742;
t735 = sin(qJ(2,3));
t711 = t735 * qJ(3,3);
t723 = t742 * pkin(4);
t687 = t736 * t711 + t723;
t908 = t736 * pkin(4);
t688 = t742 * t711 - t908;
t741 = cos(qJ(2,3));
t747 = pkin(1) + pkin(2);
t843 = t747 * t741;
t636 = t678 * t843 - t714 * t687 + t688 * t717;
t679 = t714 * t742 + t717 * t736;
t637 = t679 * t843 + t687 * t717 + t714 * t688;
t921 = t636 * t637;
t920 = t636 * t679;
t919 = t637 * t678;
t733 = legFrame(2,3);
t715 = sin(t733);
t718 = cos(t733);
t738 = sin(qJ(1,2));
t744 = cos(qJ(1,2));
t681 = -t715 * t738 + t718 * t744;
t737 = sin(qJ(2,2));
t712 = t737 * qJ(3,2);
t724 = t744 * pkin(4);
t689 = t738 * t712 + t724;
t906 = t738 * pkin(4);
t690 = t744 * t712 - t906;
t743 = cos(qJ(2,2));
t842 = t747 * t743;
t638 = t681 * t842 - t715 * t689 + t690 * t718;
t682 = t715 * t744 + t718 * t738;
t639 = t682 * t842 + t689 * t718 + t715 * t690;
t918 = t638 * t639;
t917 = t638 * t682;
t916 = t639 * t681;
t734 = legFrame(1,3);
t716 = sin(t734);
t719 = cos(t734);
t740 = sin(qJ(1,1));
t746 = cos(qJ(1,1));
t684 = -t716 * t740 + t719 * t746;
t739 = sin(qJ(2,1));
t713 = t739 * qJ(3,1);
t725 = t746 * pkin(4);
t691 = t740 * t713 + t725;
t904 = t740 * pkin(4);
t692 = t746 * t713 - t904;
t745 = cos(qJ(2,1));
t841 = t747 * t745;
t640 = t684 * t841 - t716 * t691 + t692 * t719;
t685 = t716 * t746 + t719 * t740;
t641 = t685 * t841 + t691 * t719 + t716 * t692;
t915 = t640 * t641;
t914 = t640 * t685;
t913 = t641 * t684;
t704 = t713 + t841;
t697 = 0.1e1 / t704;
t845 = t745 * qJ(3,1);
t701 = t747 * t739 - t845;
t905 = t739 * pkin(1);
t709 = t845 - t905;
t755 = 0.1e1 / qJ(3,1);
t853 = t739 * t755;
t912 = t697 * t853 * (t701 + t709);
t703 = t712 + t842;
t695 = 0.1e1 / t703;
t848 = t743 * qJ(3,2);
t700 = t747 * t737 - t848;
t907 = t737 * pkin(1);
t707 = t848 - t907;
t752 = 0.1e1 / qJ(3,2);
t856 = t737 * t752;
t911 = t695 * t856 * (t700 + t707);
t702 = t711 + t843;
t693 = 0.1e1 / t702;
t851 = t741 * qJ(3,3);
t699 = t747 * t735 - t851;
t909 = t735 * pkin(1);
t705 = t851 - t909;
t749 = 0.1e1 / qJ(3,3);
t858 = t735 * t749;
t910 = t693 * t858 * (t699 + t705);
t657 = t702 * t736 + t723;
t660 = t702 * t742 - t908;
t645 = -t714 * t657 + t717 * t660;
t874 = t693 * t741;
t828 = t636 * t874;
t787 = pkin(1) * t828;
t611 = (-t645 + 0.2e1 * t787) * t749;
t903 = t611 * t749;
t648 = t657 * t717 + t714 * t660;
t827 = t637 * t874;
t786 = pkin(1) * t827;
t613 = (-t648 + 0.2e1 * t786) * t749;
t902 = t613 * t749;
t658 = t703 * t738 + t724;
t661 = t703 * t744 - t906;
t646 = -t715 * t658 + t718 * t661;
t870 = t695 * t743;
t826 = t638 * t870;
t785 = pkin(1) * t826;
t615 = (-t646 + 0.2e1 * t785) * t752;
t901 = t615 * t752;
t649 = t658 * t718 + t715 * t661;
t825 = t639 * t870;
t784 = pkin(1) * t825;
t617 = (-t649 + 0.2e1 * t784) * t752;
t900 = t617 * t752;
t659 = t704 * t740 + t725;
t662 = t704 * t746 - t904;
t647 = -t716 * t659 + t719 * t662;
t866 = t697 * t745;
t824 = t640 * t866;
t783 = pkin(1) * t824;
t619 = (-t647 + 0.2e1 * t783) * t755;
t899 = t619 * t755;
t650 = t659 * t719 + t716 * t662;
t823 = t641 * t866;
t782 = pkin(1) * t823;
t621 = (-t650 + 0.2e1 * t782) * t755;
t898 = t621 * t755;
t750 = 0.1e1 / qJ(3,3) ^ 2;
t897 = t645 * t750;
t753 = 0.1e1 / qJ(3,2) ^ 2;
t896 = t646 * t753;
t756 = 0.1e1 / qJ(3,1) ^ 2;
t895 = t647 * t756;
t894 = t648 * t750;
t893 = t649 * t753;
t892 = t650 * t756;
t672 = t678 ^ 2;
t694 = 0.1e1 / t702 ^ 2;
t891 = t672 * t694;
t673 = t679 ^ 2;
t890 = t673 * t694;
t674 = t681 ^ 2;
t696 = 0.1e1 / t703 ^ 2;
t889 = t674 * t696;
t675 = t682 ^ 2;
t888 = t675 * t696;
t676 = t684 ^ 2;
t698 = 0.1e1 / t704 ^ 2;
t887 = t676 * t698;
t677 = t685 ^ 2;
t886 = t677 * t698;
t885 = t678 * t679;
t884 = t678 * t693;
t883 = t679 * t693;
t882 = t681 * t682;
t881 = t681 * t695;
t880 = t682 * t695;
t879 = t684 * t685;
t878 = t684 * t697;
t877 = t685 * t697;
t729 = t741 ^ 2;
t876 = t693 * t729;
t875 = t693 * t735;
t726 = t735 ^ 2;
t873 = t694 * t726;
t730 = t743 ^ 2;
t872 = t695 * t730;
t871 = t695 * t737;
t727 = t737 ^ 2;
t869 = t696 * t727;
t731 = t745 ^ 2;
t868 = t697 * t731;
t867 = t697 * t739;
t728 = t739 ^ 2;
t865 = t698 * t728;
t706 = t741 * pkin(1) + t711;
t864 = t706 * t735;
t708 = t743 * pkin(1) + t712;
t863 = t708 * t737;
t710 = t745 * pkin(1) + t713;
t862 = t710 * t739;
t861 = t729 * t749;
t860 = t730 * t752;
t859 = t731 * t755;
t857 = t735 * t750;
t855 = t737 * t753;
t854 = t739 * t745;
t852 = t739 * t756;
t850 = t741 * t735;
t849 = t741 * t749;
t847 = t743 * t737;
t846 = t743 * t752;
t844 = t745 * t755;
t840 = t749 * t726;
t839 = t752 * t727;
t838 = t755 * t728;
t834 = 0.2e1 * t909;
t833 = 0.2e1 * t907;
t832 = 0.2e1 * t905;
t831 = 0.2e1 * t694 * t706;
t830 = 0.2e1 * t696 * t708;
t829 = 0.2e1 * t698 * t710;
t748 = qJ(3,3) ^ 2;
t757 = pkin(1) ^ 2;
t720 = t748 + t757;
t654 = (-pkin(1) * t699 + t720 * t735) * t749;
t822 = t654 * t874;
t751 = qJ(3,2) ^ 2;
t721 = t751 + t757;
t655 = (-pkin(1) * t700 + t721 * t737) * t752;
t821 = t655 * t870;
t754 = qJ(3,1) ^ 2;
t722 = t754 + t757;
t656 = (-pkin(1) * t701 + t722 * t739) * t755;
t820 = t656 * t866;
t819 = t694 * t885;
t818 = t696 * t882;
t817 = t698 * t879;
t816 = t720 * t874;
t815 = t693 * t840;
t813 = t750 * t874;
t812 = t694 * t705 * t741;
t811 = t694 * t861;
t810 = t694 * t729 * t750;
t809 = t694 * t850;
t808 = t721 * t870;
t807 = t695 * t839;
t805 = t753 * t870;
t804 = t696 * t707 * t743;
t803 = t696 * t860;
t802 = t696 * t730 * t753;
t801 = t696 * t847;
t800 = t722 * t866;
t799 = t697 * t838;
t797 = t756 * t866;
t796 = t698 * t709 * t745;
t795 = t698 * t859;
t794 = t698 * t731 * t756;
t793 = t698 * t854;
t792 = t735 * t849;
t791 = t737 * t846;
t790 = t739 * t844;
t669 = (-t748 + t757) * t729 + t834 * t851 + t748;
t670 = (-t751 + t757) * t730 + t833 * t848 + t751;
t671 = (-t754 + t757) * t731 + t832 * t845 + t754;
t789 = -t669 * t819 - t670 * t818 - t671 * t817;
t776 = t745 * t817;
t777 = t743 * t818;
t778 = t741 * t819;
t788 = -0.2e1 * t706 * t778 - 0.2e1 * t708 * t777 - 0.2e1 * t710 * t776;
t663 = (-t699 + t834) * t749;
t781 = t663 * t693 * t849;
t665 = (-t700 + t833) * t752;
t780 = t665 * t695 * t846;
t667 = (-t701 + t832) * t755;
t779 = t667 * t697 * t844;
t775 = t699 * t813;
t774 = t693 * t792;
t773 = t735 * t813;
t772 = t749 * t812;
t771 = t694 * t792;
t770 = t700 * t805;
t769 = t695 * t791;
t768 = t737 * t805;
t767 = t752 * t804;
t766 = t696 * t791;
t765 = t701 * t797;
t764 = t697 * t790;
t763 = t739 * t797;
t762 = t755 * t796;
t761 = t698 * t790;
t760 = t694 * t749 * (t636 * t678 - t637 * t679);
t759 = t696 * t752 * (t638 * t681 - t639 * t682);
t758 = t698 * t755 * (t640 * t684 - t641 * t685);
t668 = (t701 - t905) * t755;
t666 = (t700 - t907) * t752;
t664 = (t699 - t909) * t749;
t653 = (t666 + t743) * t737;
t652 = (t664 + t741) * t735;
t651 = (t668 + t745) * t739;
t635 = t641 ^ 2;
t634 = t640 ^ 2;
t633 = t639 ^ 2;
t632 = t638 ^ 2;
t631 = t637 ^ 2;
t630 = t636 ^ 2;
t626 = -t679 * t815 - t682 * t807 - t685 * t799;
t625 = t678 * t815 + t681 * t807 + t684 * t799;
t624 = -t679 * t774 - t682 * t769 - t685 * t764;
t623 = t678 * t774 + t681 * t769 + t684 * t764;
t622 = (t650 - t782) * t755;
t620 = (t647 - t783) * t755;
t618 = (t649 - t784) * t752;
t616 = (t646 - t785) * t752;
t614 = (t648 - t786) * t749;
t612 = (t645 - t787) * t749;
t610 = (-pkin(1) * t650 + t641 * t800) * t755;
t609 = (-pkin(1) * t647 + t640 * t800) * t755;
t608 = (-pkin(1) * t649 + t639 * t808) * t752;
t607 = (-pkin(1) * t646 + t638 * t808) * t752;
t606 = (-pkin(1) * t648 + t637 * t816) * t749;
t605 = (-pkin(1) * t645 + t636 * t816) * t749;
t604 = -t817 - t818 - t819;
t603 = -t726 * t819 - t727 * t818 - t728 * t817;
t602 = -0.2e1 * t735 * t778 - 0.2e1 * t737 * t777 - 0.2e1 * t739 * t776;
t601 = t622 * t739 + t641 * t868;
t600 = t620 * t739 + t640 * t868;
t599 = t618 * t737 + t639 * t872;
t598 = t616 * t737 + t638 * t872;
t597 = t614 * t735 + t637 * t876;
t596 = t612 * t735 + t636 * t876;
t595 = t637 * t773 + t639 * t768 + t641 * t763;
t594 = t636 * t773 + t638 * t768 + t640 * t763;
t593 = 0.2e1 * t637 * t774 + 0.2e1 * t639 * t769 + 0.2e1 * t641 * t764;
t592 = 0.2e1 * t636 * t774 + 0.2e1 * t638 * t769 + 0.2e1 * t640 * t764;
t591 = t794 * t915 + t802 * t918 + t810 * t921;
t590 = t729 * t760 + t730 * t759 + t731 * t758;
t589 = t758 * t854 + t759 * t847 + t760 * t850;
t588 = 0.2e1 * (t859 * t915 - t862 * t879) * t698 + 0.2e1 * (t860 * t918 - t863 * t882) * t696 + 0.2e1 * (t861 * t921 - t864 * t885) * t694;
t1 = [t886 + t888 + t890, 0, 0, t673 * t873 + t675 * t869 + t677 * t865, 0.2e1 * t673 * t809 + 0.2e1 * t675 * t801 + 0.2e1 * t677 * t793, -0.2e1 * t761 * t914 - 0.2e1 * t766 * t917 - 0.2e1 * t771 * t920, -0.2e1 * t795 * t914 - 0.2e1 * t803 * t917 - 0.2e1 * t811 * t920, t630 * t810 + t632 * t802 + t634 * t794, 0, 0, (t677 * t829 + (-t895 + t899) * t697 * t640) * t745 + (t675 * t830 + (-t896 + t901) * t695 * t638) * t743 + (t673 * t831 + (-t897 + t903) * t693 * t636) * t741, (-t640 * t762 + (-t647 * t853 - t600) * t697) * t685 + (-t638 * t767 + (-t646 * t856 - t598) * t695) * t682 + (-t636 * t772 + (-t645 * t858 - t596) * t693) * t679, 0.2e1 * (t634 * t859 + t677 * t862) * t698 + 0.2e1 * (t632 * t860 + t675 * t863) * t696 + 0.2e1 * (t630 * t861 + t673 * t864) * t694, t669 * t890 + t670 * t888 + t671 * t886 + (t609 * t824 + t620 * t647) * t755 + (t607 * t826 + t616 * t646) * t752 + (t605 * t828 + t612 * t645) * t749, 1; t604, 0, 0, t603, t602, t589, t590, t591, 0, 0, (t640 * t898 - t641 * t895) * t866 + (t638 * t900 - t639 * t896) * t870 + (t636 * t902 - t637 * t897) * t874 + t788, -t597 * t883 - t599 * t880 - t601 * t877 + (t640 * t796 + t647 * t867) * t755 * t684 + (t638 * t804 + t646 * t871) * t752 * t681 + (t636 * t812 + t645 * t875) * t749 * t678, t588, (t610 * t824 + t622 * t647) * t755 + (t608 * t826 + t618 * t646) * t752 + (t606 * t828 + t614 * t645) * t749 + t789, 0; 0, 0, 0, 0, 0, t626, t624, t594, 0, 0, t636 * t781 + t638 * t780 + t640 * t779 - t645 * t857 - t646 * t855 - t647 * t852, -t651 * t877 - t652 * t883 - t653 * t880, t592, (t640 * t820 + t647 * t668) * t755 + (t638 * t821 + t646 * t666) * t752 + (t636 * t822 + t645 * t664) * t749, 0; t604, 0, 0, t603, t602, t589, t590, t591, 0, 0, (-t640 * t892 + t641 * t899) * t866 + (-t638 * t893 + t639 * t901) * t870 + (-t636 * t894 + t637 * t903) * t874 + t788, t596 * t884 + t598 * t881 + t600 * t878 + (-t641 * t796 - t650 * t867) * t755 * t685 + (-t639 * t804 - t649 * t871) * t752 * t682 + (-t637 * t812 - t648 * t875) * t749 * t679, t588, (t609 * t823 + t620 * t650) * t755 + (t607 * t825 + t616 * t649) * t752 + (t605 * t827 + t612 * t648) * t749 + t789, 0; t887 + t889 + t891, 0, 0, t672 * t873 + t674 * t869 + t676 * t865, 0.2e1 * t672 * t809 + 0.2e1 * t674 * t801 + 0.2e1 * t676 * t793, 0.2e1 * t761 * t913 + 0.2e1 * t766 * t916 + 0.2e1 * t771 * t919, 0.2e1 * t795 * t913 + 0.2e1 * t803 * t916 + 0.2e1 * t811 * t919, t631 * t810 + t633 * t802 + t635 * t794, 0, 0, (t676 * t829 + (-t892 + t898) * t697 * t641) * t745 + (t674 * t830 + (-t893 + t900) * t695 * t639) * t743 + (t672 * t831 + (-t894 + t902) * t693 * t637) * t741, (t641 * t762 + (t650 * t853 + t601) * t697) * t684 + (t639 * t767 + (t649 * t856 + t599) * t695) * t681 + (t637 * t772 + (t648 * t858 + t597) * t693) * t678, 0.2e1 * (t635 * t859 + t676 * t862) * t698 + 0.2e1 * (t633 * t860 + t674 * t863) * t696 + 0.2e1 * (t631 * t861 + t672 * t864) * t694, t669 * t891 + t670 * t889 + t671 * t887 + (t610 * t823 + t622 * t650) * t755 + (t608 * t825 + t618 * t649) * t752 + (t606 * t827 + t614 * t648) * t749, 1; 0, 0, 0, 0, 0, t625, t623, t595, 0, 0, t637 * t781 + t639 * t780 + t641 * t779 - t648 * t857 - t649 * t855 - t650 * t852, t651 * t878 + t652 * t884 + t653 * t881, t593, (t641 * t820 + t650 * t668) * t755 + (t639 * t821 + t649 * t666) * t752 + (t637 * t822 + t648 * t664) * t749, 0; 0, 0, 0, 0, 0, t626, t624, t594, 0, 0, t611 * t858 + t615 * t856 + t619 * t853 - t636 * t775 - t638 * t770 - t640 * t765, -t679 * t910 - t682 * t911 - t685 * t912, t592, (t609 * t739 + t620 * t701) * t755 + (t607 * t737 + t616 * t700) * t752 + (t605 * t735 + t612 * t699) * t749, 0; 0, 0, 0, 0, 0, t625, t623, t595, 0, 0, t613 * t858 + t617 * t856 + t621 * t853 - t637 * t775 - t639 * t770 - t641 * t765, t678 * t910 + t681 * t911 + t684 * t912, t593, (t610 * t739 + t622 * t701) * t755 + (t608 * t737 + t618 * t700) * t752 + (t606 * t735 + t614 * t699) * t749, 0; 0, 0, 0, 0, 0, 0, 0, t750 * t726 + t753 * t727 + t756 * t728, 0, 0, (t667 * t755 - t701 * t756) * t739 + (t665 * t752 - t700 * t753) * t737 + (t663 * t749 - t699 * t750) * t735, 0, 0.2e1 * t838 + 0.2e1 * t839 + 0.2e1 * t840, (t656 * t739 + t668 * t701) * t755 + (t655 * t737 + t666 * t700) * t752 + (t654 * t735 + t664 * t699) * t749, 1;];
tau_reg  = t1;
