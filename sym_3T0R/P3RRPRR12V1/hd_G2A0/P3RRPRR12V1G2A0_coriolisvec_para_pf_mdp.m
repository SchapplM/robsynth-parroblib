% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR12V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:07
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V1G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:06:47
% EndTime: 2020-08-06 19:06:59
% DurationCPUTime: 12.33s
% Computational Cost: add. (56949->564), mult. (98925->1100), div. (5508->12), fcn. (61494->18), ass. (0->475)
t2972 = legFrame(3,2);
t2959 = sin(t2972);
t3336 = -0.2e1 * t2959;
t2973 = legFrame(2,2);
t2960 = sin(t2973);
t3335 = -0.2e1 * t2960;
t2974 = legFrame(1,2);
t2961 = sin(t2974);
t3334 = -0.2e1 * t2961;
t2962 = cos(t2972);
t3333 = 0.2e1 * t2962;
t2963 = cos(t2973);
t3332 = 0.2e1 * t2963;
t2964 = cos(t2974);
t3331 = 0.2e1 * t2964;
t2988 = xDP(2);
t2990 = pkin(1) + pkin(2);
t2951 = t2988 * t2990;
t2989 = xDP(1);
t2952 = t2989 * t2990;
t2980 = sin(qJ(1,1));
t2986 = cos(qJ(1,1));
t2987 = xDP(3);
t3169 = t2987 * t2990;
t3293 = qJ(3,1) * t2989;
t3294 = qJ(3,1) * t2988;
t2884 = (t2980 * t2952 - t3294) * t2964 + (-t2980 * t2951 - t3293) * t2961 + t2986 * t3169;
t2979 = sin(qJ(2,1));
t3178 = t2979 * t2986;
t3301 = pkin(4) * t2980;
t3093 = qJ(3,1) * t3178 - t3301;
t2917 = t2987 * t3093;
t3296 = pkin(4) * t2989;
t2950 = t2986 * t3296;
t2985 = cos(qJ(2,1));
t2970 = t2985 ^ 2;
t3297 = pkin(4) * t2988;
t3148 = t2986 * t3297;
t3319 = -t2980 * t3294 + t2952;
t3322 = t2980 * t3293 + t2951;
t2866 = t2884 * t2970 + ((t2979 * t3322 + t2950) * t2964 + (t2979 * t3319 - t3148) * t2961 + t2917) * t2985 + qJ(3,1) * (t2961 * t2989 + t2964 * t2988);
t2958 = t2979 * qJ(3,1);
t3171 = t2985 * t2990;
t2938 = t2958 + t3171;
t2930 = 0.1e1 / t2938;
t3256 = t2866 * t2930;
t3330 = 0.2e1 * t3256;
t2978 = sin(qJ(1,2));
t2984 = cos(qJ(1,2));
t3290 = qJ(3,2) * t2989;
t3291 = qJ(3,2) * t2988;
t2883 = (t2978 * t2952 - t3291) * t2963 + (-t2978 * t2951 - t3290) * t2960 + t2984 * t3169;
t2977 = sin(qJ(2,2));
t3183 = t2977 * t2984;
t3302 = pkin(4) * t2978;
t3094 = qJ(3,2) * t3183 - t3302;
t2916 = t2987 * t3094;
t2949 = t2984 * t3296;
t2983 = cos(qJ(2,2));
t2969 = t2983 ^ 2;
t3149 = t2984 * t3297;
t3320 = -t2978 * t3291 + t2952;
t3323 = t2978 * t3290 + t2951;
t2865 = t2883 * t2969 + ((t2977 * t3323 + t2949) * t2963 + (t2977 * t3320 - t3149) * t2960 + t2916) * t2983 + qJ(3,2) * (t2960 * t2989 + t2963 * t2988);
t2957 = t2977 * qJ(3,2);
t3173 = t2983 * t2990;
t2937 = t2957 + t3173;
t2927 = 0.1e1 / t2937;
t3259 = t2865 * t2927;
t3329 = 0.2e1 * t3259;
t2976 = sin(qJ(1,3));
t2982 = cos(qJ(1,3));
t3287 = qJ(3,3) * t2989;
t3288 = qJ(3,3) * t2988;
t2882 = (t2976 * t2952 - t3288) * t2962 + (-t2976 * t2951 - t3287) * t2959 + t2982 * t3169;
t2975 = sin(qJ(2,3));
t3188 = t2975 * t2982;
t3303 = pkin(4) * t2976;
t3095 = qJ(3,3) * t3188 - t3303;
t2915 = t2987 * t3095;
t2948 = t2982 * t3296;
t2981 = cos(qJ(2,3));
t2968 = t2981 ^ 2;
t3150 = t2982 * t3297;
t3321 = -t2976 * t3288 + t2952;
t3324 = t2976 * t3287 + t2951;
t2864 = t2882 * t2968 + ((t2975 * t3324 + t2948) * t2962 + (t2975 * t3321 - t3150) * t2959 + t2915) * t2981 + qJ(3,3) * (t2959 * t2989 + t2962 * t2988);
t2956 = t2975 * qJ(3,3);
t3175 = t2981 * t2990;
t2936 = t2956 + t3175;
t2924 = 0.1e1 / t2936;
t3262 = t2864 * t2924;
t3328 = 0.2e1 * t3262;
t2872 = -t2961 * t3148 + t2884 * t2985 + t2950 * t2964 + t2917 + (t2961 * t3319 + t2964 * t3322) * t2979;
t2998 = 0.1e1 / qJ(3,1);
t2869 = t2872 * t2998;
t3177 = t2979 * t2990;
t3295 = qJ(3,1) * t2985;
t3047 = -t3177 + t3295;
t2902 = (-t2961 * t2988 + t2964 * t2989) * t2986 - t2980 * t2987;
t2931 = 0.1e1 / t2938 ^ 2;
t2932 = t2930 * t2931;
t3200 = t2932 * t2998;
t3060 = t2866 * t2902 * t3200;
t3230 = t2902 * t2998;
t3112 = t2931 * t3230;
t3166 = t2990 * t2998;
t3232 = t2902 * t2931;
t3304 = pkin(4) * t2902;
t2812 = -(t2869 * t2979 + (-t3304 + (-t2979 * t3166 + t2985) * t2866) * t2930) * t3232 - t3047 * t3060 - t2979 * t2872 * t3112;
t2955 = 0.2e1 * t2970 - 0.1e1;
t3170 = t2985 * t2998;
t3100 = t2979 * t3170;
t3318 = -2 * pkin(1);
t2821 = t2872 * t3100 + (t3100 * t3318 + t2955) * t3256;
t2944 = pkin(1) * t2985 + t2958;
t3202 = t2930 * t2985;
t3327 = 0.2e1 * (t2812 * t2944 * t3202 + t2821 * t3232) * t2986;
t2871 = -t2960 * t3149 + t2883 * t2983 + t2949 * t2963 + t2916 + (t2960 * t3320 + t2963 * t3323) * t2977;
t2995 = 0.1e1 / qJ(3,2);
t2868 = t2871 * t2995;
t3182 = t2977 * t2990;
t3292 = qJ(3,2) * t2983;
t3046 = -t3182 + t3292;
t2901 = (-t2960 * t2988 + t2963 * t2989) * t2984 - t2978 * t2987;
t2928 = 0.1e1 / t2937 ^ 2;
t2929 = t2927 * t2928;
t3206 = t2929 * t2995;
t3061 = t2865 * t2901 * t3206;
t3234 = t2901 * t2995;
t3114 = t2928 * t3234;
t3167 = t2990 * t2995;
t3236 = t2901 * t2928;
t3305 = pkin(4) * t2901;
t2811 = -(t2868 * t2977 + (-t3305 + (-t2977 * t3167 + t2983) * t2865) * t2927) * t3236 - t3046 * t3061 - t2977 * t2871 * t3114;
t2954 = 0.2e1 * t2969 - 0.1e1;
t3172 = t2983 * t2995;
t3101 = t2977 * t3172;
t2820 = t2871 * t3101 + (t3101 * t3318 + t2954) * t3259;
t2942 = pkin(1) * t2983 + t2957;
t3208 = t2927 * t2983;
t3326 = 0.2e1 * (t2811 * t2942 * t3208 + t2820 * t3236) * t2984;
t2870 = -t2959 * t3150 + t2882 * t2981 + t2948 * t2962 + t2915 + (t2959 * t3321 + t2962 * t3324) * t2975;
t2992 = 0.1e1 / qJ(3,3);
t2867 = t2870 * t2992;
t3187 = t2975 * t2990;
t3289 = qJ(3,3) * t2981;
t3045 = -t3187 + t3289;
t2900 = (-t2959 * t2988 + t2962 * t2989) * t2982 - t2976 * t2987;
t2925 = 0.1e1 / t2936 ^ 2;
t2926 = t2924 * t2925;
t3212 = t2926 * t2992;
t3062 = t2864 * t2900 * t3212;
t3238 = t2900 * t2992;
t3116 = t2925 * t3238;
t3168 = t2990 * t2992;
t3240 = t2900 * t2925;
t3306 = pkin(4) * t2900;
t2810 = -(t2867 * t2975 + (-t3306 + (-t2975 * t3168 + t2981) * t2864) * t2924) * t3240 - t3045 * t3062 - t2975 * t2870 * t3116;
t2953 = 0.2e1 * t2968 - 0.1e1;
t3174 = t2981 * t2992;
t3102 = t2975 * t3174;
t2819 = t2870 * t3102 + (t3102 * t3318 + t2953) * t3262;
t2940 = pkin(1) * t2981 + t2956;
t3214 = t2924 * t2981;
t3325 = 0.2e1 * (t2810 * t2940 * t3214 + t2819 * t3240) * t2982;
t2991 = qJ(3,3) ^ 2;
t3000 = pkin(4) ^ 2;
t3241 = t2900 * t2924;
t3117 = t2968 * t3241;
t3261 = t2864 * t2992;
t3213 = t2924 * t2992;
t3122 = t2864 * t3213;
t2856 = pkin(1) * t3122;
t2837 = t2856 - t2867;
t2828 = pkin(2) * t3122 + t2837;
t3271 = t2828 * t2975;
t3310 = -pkin(4) / 0.2e1;
t2813 = (qJ(3,3) + t2990) * (-qJ(3,3) + t2990) * t3117 + 0.2e1 * (t2900 * t3187 + t3261 * t3310) * qJ(3,3) * t3214 + pkin(4) * t3271 + (t2991 + t3000) * t3241;
t3216 = t2924 * t2975;
t2891 = t3216 * t3306;
t2849 = t2990 * t3122 + t2891;
t3002 = pkin(1) ^ 2;
t3099 = -t3002 + (t3318 - pkin(2)) * pkin(2);
t2993 = 0.1e1 / qJ(3,3) ^ 2;
t3253 = t2870 * t2993;
t3260 = t2864 * t2993;
t3011 = (t2813 * t3238 - (t2870 * t3168 + ((-t2991 + t3099) * t3261 + t3045 * t3306) * t2924) * t3260) * t2924 - t2849 * t3253;
t2994 = qJ(3,2) ^ 2;
t3237 = t2901 * t2927;
t3115 = t2969 * t3237;
t3258 = t2865 * t2995;
t3207 = t2927 * t2995;
t3120 = t2865 * t3207;
t2858 = pkin(1) * t3120;
t2838 = t2858 - t2868;
t2829 = pkin(2) * t3120 + t2838;
t3270 = t2829 * t2977;
t2814 = (qJ(3,2) + t2990) * (-qJ(3,2) + t2990) * t3115 + 0.2e1 * qJ(3,2) * (t2901 * t3182 + t3258 * t3310) * t3208 + pkin(4) * t3270 + (t2994 + t3000) * t3237;
t3210 = t2927 * t2977;
t2892 = t3210 * t3305;
t2850 = t2990 * t3120 + t2892;
t2996 = 0.1e1 / qJ(3,2) ^ 2;
t3252 = t2871 * t2996;
t3257 = t2865 * t2996;
t3010 = (t2814 * t3234 - (t2871 * t3167 + ((-t2994 + t3099) * t3258 + t3046 * t3305) * t2927) * t3257) * t2927 - t2850 * t3252;
t2997 = qJ(3,1) ^ 2;
t3233 = t2902 * t2930;
t3113 = t2970 * t3233;
t3255 = t2866 * t2998;
t3201 = t2930 * t2998;
t3118 = t2866 * t3201;
t2860 = pkin(1) * t3118;
t2839 = t2860 - t2869;
t2830 = pkin(2) * t3118 + t2839;
t3269 = t2830 * t2979;
t2815 = (qJ(3,1) + t2990) * (-qJ(3,1) + t2990) * t3113 + 0.2e1 * qJ(3,1) * (t2902 * t3177 + t3255 * t3310) * t3202 + pkin(4) * t3269 + (t2997 + t3000) * t3233;
t3204 = t2930 * t2979;
t2893 = t3204 * t3304;
t2851 = t2990 * t3118 + t2893;
t2999 = 0.1e1 / qJ(3,1) ^ 2;
t3251 = t2872 * t2999;
t3254 = t2866 * t2999;
t3009 = (t2815 * t3230 - (t2872 * t3166 + ((-t2997 + t3099) * t3255 + t3047 * t3304) * t2930) * t3254) * t2930 - t2851 * t3251;
t3317 = 2 * pkin(1);
t3316 = -0.2e1 * t2968;
t3315 = -0.2e1 * t2969;
t3314 = -0.2e1 * t2970;
t3313 = -0.2e1 * t2976;
t3312 = -0.2e1 * t2978;
t3311 = -0.2e1 * t2980;
t2852 = t2864 * t3216;
t2804 = t2981 * t2813 * t3116 - (-(t2891 + t2828) * t3175 + (pkin(4) * t3117 - t3271) * qJ(3,3)) * t2925 * t3260 - (t2849 * t2981 + t2852) * t2924 * t3253;
t3309 = pkin(1) * t2804;
t2853 = t2865 * t3210;
t2805 = t2983 * t2814 * t3114 - (-(t2892 + t2829) * t3173 + (pkin(4) * t3115 - t3270) * qJ(3,2)) * t2928 * t3257 - (t2850 * t2983 + t2853) * t2927 * t3252;
t3308 = pkin(1) * t2805;
t2854 = t2866 * t3204;
t2806 = t2985 * t2815 * t3112 - (-(t2893 + t2830) * t3171 + (pkin(4) * t3113 - t3269) * qJ(3,1)) * t2931 * t3254 - (t2851 * t2985 + t2854) * t2930 * t3251;
t3307 = pkin(1) * t2806;
t3300 = pkin(4) * t2982;
t3299 = pkin(4) * t2984;
t3298 = pkin(4) * t2986;
t3286 = t2959 * qJ(3,3);
t3285 = t2960 * qJ(3,2);
t3284 = t2961 * qJ(3,1);
t3283 = t2962 * qJ(3,3);
t3282 = t2963 * qJ(3,2);
t3281 = t2964 * qJ(3,1);
t3280 = (-t3011 + 0.2e1 * t3309) * t2924;
t3279 = (-t3010 + 0.2e1 * t3308) * t2927;
t3278 = (-t3009 + 0.2e1 * t3307) * t2930;
t3277 = t2804 * t2981;
t3276 = t2805 * t2983;
t3275 = t2806 * t2985;
t3274 = t2810 * t2924;
t3273 = t2811 * t2927;
t3272 = t2812 * t2930;
t2897 = t2900 ^ 2;
t2894 = t2897 * t2925;
t3244 = t2897 * t2968;
t3265 = t2864 ^ 2 * t2993;
t2843 = -t2894 + (t3244 - t3265) * t2925;
t3268 = t2843 * t2992;
t2898 = t2901 ^ 2;
t2895 = t2898 * t2928;
t3243 = t2898 * t2969;
t3264 = t2865 ^ 2 * t2996;
t2844 = -t2895 + (t3243 - t3264) * t2928;
t3267 = t2844 * t2995;
t2899 = t2902 ^ 2;
t2896 = t2899 * t2931;
t3242 = t2899 * t2970;
t3263 = t2866 ^ 2 * t2999;
t2845 = -t2896 + (t3242 - t3263) * t2931;
t3266 = t2845 * t2998;
t3190 = t2975 * t2976;
t2921 = qJ(3,3) * t3190 + t3300;
t3186 = t2976 * t2990;
t2876 = (t2962 * t3186 - t3286) * t2968 + (t2921 * t2962 + t2959 * t3187) * t2981 + t3286;
t3250 = t2876 * t2992;
t3185 = t2977 * t2978;
t2922 = qJ(3,2) * t3185 + t3299;
t3181 = t2978 * t2990;
t2877 = (t2963 * t3181 - t3285) * t2969 + (t2922 * t2963 + t2960 * t3182) * t2983 + t3285;
t3249 = t2877 * t2995;
t3180 = t2979 * t2980;
t2923 = qJ(3,1) * t3180 + t3298;
t3176 = t2980 * t2990;
t2878 = (t2964 * t3176 - t3284) * t2970 + (t2923 * t2964 + t2961 * t3177) * t2985 + t3284;
t3248 = t2878 * t2998;
t2879 = (-t2959 * t3186 - t3283) * t2968 + (-t2921 * t2959 + t2962 * t3187) * t2981 + t3283;
t3247 = t2879 * t2992;
t2880 = (-t2960 * t3181 - t3282) * t2969 + (-t2922 * t2960 + t2963 * t3182) * t2983 + t3282;
t3246 = t2880 * t2995;
t2881 = (-t2961 * t3176 - t3281) * t2970 + (-t2923 * t2961 + t2964 * t3177) * t2985 + t3281;
t3245 = t2881 * t2998;
t3239 = t2900 * t2982;
t3235 = t2901 * t2984;
t3231 = t2902 * t2986;
t2906 = t2982 * t3175 + t3095;
t3229 = t2906 * t2981;
t2907 = t2984 * t3173 + t3094;
t3228 = t2907 * t2983;
t2908 = t2986 * t3171 + t3093;
t3227 = t2908 * t2985;
t2909 = t2936 * t2982 - t3303;
t3226 = t2909 * t2975;
t3225 = t2909 * t2992;
t2910 = t2937 * t2984 - t3302;
t3224 = t2910 * t2977;
t3223 = t2910 * t2995;
t2911 = t2938 * t2986 - t3301;
t3222 = t2911 * t2979;
t3221 = t2911 * t2998;
t3189 = t2975 * t2981;
t3098 = t3189 * t3317;
t3154 = qJ(3,3) * t3316;
t3220 = (qJ(3,3) + t3098 + t3154) * t2926;
t3184 = t2977 * t2983;
t3097 = t3184 * t3317;
t3155 = qJ(3,2) * t3315;
t3219 = (qJ(3,2) + t3097 + t3155) * t2929;
t3179 = t2979 * t2985;
t3096 = t3179 * t3317;
t3156 = qJ(3,1) * t3314;
t3218 = (qJ(3,1) + t3096 + t3156) * t2932;
t2939 = -pkin(1) * t2975 + t3289;
t3217 = t2924 * t2939;
t3215 = t2924 * t2976;
t2941 = -pkin(1) * t2977 + t3292;
t3211 = t2927 * t2941;
t3209 = t2927 * t2978;
t2943 = -pkin(1) * t2979 + t3295;
t3205 = t2930 * t2943;
t3203 = t2930 * t2980;
t3199 = t2959 * t2982;
t3198 = t2960 * t2984;
t3197 = t2961 * t2986;
t3196 = t2962 * t2982;
t3195 = t2963 * t2984;
t3194 = t2964 * t2986;
t3193 = t2968 * t2992;
t3192 = t2969 * t2995;
t3191 = t2970 * t2998;
t2799 = t3011 - t3309;
t3059 = t3189 * t2894;
t3165 = -pkin(1) * t3059 + qJ(3,3) * t2843 + t2799;
t2801 = t3010 - t3308;
t3058 = t3184 * t2895;
t3164 = -pkin(1) * t3058 + qJ(3,2) * t2844 + t2801;
t2803 = t3009 - t3307;
t3057 = t3179 * t2896;
t3163 = -pkin(1) * t3057 + qJ(3,1) * t2845 + t2803;
t3162 = -t2991 + t3002;
t3161 = -t2994 + t3002;
t3160 = -t2997 + t3002;
t3153 = t2900 * t3313;
t3152 = t2901 * t3312;
t3151 = t2902 * t3311;
t3141 = t2804 * t3213;
t3140 = t2805 * t3207;
t3139 = t2806 * t3201;
t3138 = t2810 * t3215;
t3137 = t2810 * t3188;
t3136 = t2811 * t3209;
t3135 = t2811 * t3183;
t3134 = t2812 * t3203;
t3133 = t2812 * t3178;
t3132 = (t2852 + (t2856 - 0.2e1 * t2867) * t2981) * t2864 * t2925;
t3131 = (t2853 + (t2858 - 0.2e1 * t2868) * t2983) * t2865 * t2928;
t3130 = (t2854 + (t2860 - 0.2e1 * t2869) * t2985) * t2866 * t2931;
t3126 = t2926 * t3265;
t3125 = t2929 * t3264;
t3124 = t2932 * t3263;
t3123 = t2864 * t3239;
t3121 = t2865 * t3235;
t3119 = t2866 * t3231;
t3111 = t2906 * t3174;
t3110 = t2907 * t3172;
t3109 = t2908 * t3170;
t3108 = t2924 * t3199;
t3107 = t2924 * t3196;
t3106 = t2927 * t3198;
t3105 = t2927 * t3195;
t3104 = t2930 * t3197;
t3103 = t2930 * t3194;
t3086 = t2870 * t3328;
t3092 = t2924 * ((t2991 + t3002) * t2804 - pkin(1) * t3011 + t2992 * t3086 + (-t2953 * qJ(3,3) * pkin(1) + t3162 * t3189) * t2894);
t3085 = t2871 * t3329;
t3091 = t2927 * ((t2994 + t3002) * t2805 - pkin(1) * t3010 + t2995 * t3085 + (-t2954 * qJ(3,2) * pkin(1) + t3161 * t3184) * t2895);
t3084 = t2872 * t3330;
t3090 = ((t2997 + t3002) * t2806 - pkin(1) * t3009 + t2998 * t3084 + (-t2955 * qJ(3,1) * pkin(1) + t3160 * t3179) * t2896) * t2930;
t3089 = -0.2e1 * t2810 * t3190;
t3088 = -0.2e1 * t2811 * t3185;
t3087 = -0.2e1 * t2812 * t3180;
t3083 = t2925 * t3153;
t3082 = t2928 * t3152;
t3081 = t2931 * t3151;
t3080 = (t2993 * t3086 + (pkin(1) * t3316 - 0.2e1 * qJ(3,3) * t3189 + pkin(1)) * t2894) * t2992 + 0.2e1 * t2804;
t3079 = (t2996 * t3085 + (pkin(1) * t3315 - 0.2e1 * qJ(3,2) * t3184 + pkin(1)) * t2895) * t2995 + 0.2e1 * t2805;
t3078 = (t2999 * t3084 + (pkin(1) * t3314 - 0.2e1 * qJ(3,1) * t3179 + pkin(1)) * t2896) * t2998 + 0.2e1 * t2806;
t2965 = t2975 ^ 2;
t3077 = t2965 * t2982 * t3274;
t2966 = t2977 ^ 2;
t3076 = t2966 * t2984 * t3273;
t2967 = t2979 ^ 2;
t3075 = t2967 * t2986 * t3272;
t2816 = -t2870 * t3193 + (pkin(1) * t3193 + t3189) * t3328 - t2837;
t3074 = t2816 * t2925 * t3239;
t2817 = -t2871 * t3192 + (pkin(1) * t3192 + t3184) * t3329 - t2838;
t3073 = t2817 * t2928 * t3235;
t2818 = -t2872 * t3191 + (pkin(1) * t3191 + t3179) * t3330 - t2839;
t3072 = t2818 * t2931 * t3231;
t3071 = t2982 * t3132;
t3070 = t2984 * t3131;
t3069 = t2986 * t3130;
t3068 = t2976 * t3126;
t3067 = t2982 * t3126;
t3066 = t2978 * t3125;
t3065 = t2984 * t3125;
t3064 = t2980 * t3124;
t3063 = t2986 * t3124;
t3056 = t2926 * t3102;
t3055 = t2929 * t3101;
t3054 = t2932 * t3100;
t3053 = t3137 * t3336;
t3052 = t3137 * t3333;
t3051 = t3135 * t3335;
t3050 = t3135 * t3332;
t3049 = t3133 * t3334;
t3048 = t3133 * t3331;
t3044 = t2975 * t3067;
t3043 = t2981 * t3067;
t3042 = t2977 * t3065;
t3041 = t2983 * t3065;
t3040 = t2979 * t3063;
t3039 = t2985 * t3063;
t3038 = t2953 * t3062;
t3037 = t2954 * t3061;
t3036 = t2955 * t3060;
t3035 = -t2804 - t3059;
t3034 = -t2805 - t3058;
t3033 = -t2806 - t3057;
t3032 = t2982 * t3038;
t3031 = t2984 * t3037;
t3030 = t2986 * t3036;
t3029 = t2897 * t3220 + t3280;
t3028 = t2898 * t3219 + t3279;
t3027 = t2899 * t3218 + t3278;
t3026 = 0.2e1 * ((t2856 - t2867 / 0.2e1) * t3154 + (pkin(1) * t2837 - qJ(3,3) * t3262) * t3189 + qJ(3,3) * t2837) * t3240 - (qJ(3,3) * t3098 + t3162 * t2968 + t2991) * t3274;
t3025 = 0.2e1 * ((t2858 - t2868 / 0.2e1) * t3155 + (pkin(1) * t2838 - qJ(3,2) * t3259) * t3184 + qJ(3,2) * t2838) * t3236 - (qJ(3,2) * t3097 + t3161 * t2969 + t2994) * t3273;
t3024 = 0.2e1 * ((t2860 - t2869 / 0.2e1) * t3156 + (pkin(1) * t2839 - qJ(3,1) * t3256) * t3179 + qJ(3,1) * t2839) * t3232 - (qJ(3,1) * t3096 + t3160 * t2970 + t2997) * t3272;
t3017 = t2924 * (t2804 * t3196 + t2810 * t3250);
t3016 = t2924 * (-t2804 * t3199 + t2810 * t3247);
t3015 = t2927 * (t2805 * t3195 + t2811 * t3249);
t3014 = t2927 * (-t2805 * t3198 + t2811 * t3246);
t3013 = t2930 * (t2806 * t3194 + t2812 * t3248);
t3012 = t2930 * (-t2806 * t3197 + t2812 * t3245);
t2905 = t2938 * t2980 + t3298;
t2904 = t2937 * t2978 + t3299;
t2903 = t2936 * t2976 + t3300;
t2890 = -t2905 * t2961 - t2964 * t3047;
t2889 = t2905 * t2964 - t2961 * t3047;
t2888 = -t2904 * t2960 - t2963 * t3046;
t2887 = t2904 * t2963 - t2960 * t3046;
t2886 = -t2903 * t2959 - t2962 * t3045;
t2885 = t2903 * t2962 - t2959 * t3045;
t2875 = -0.2e1 * t2931 * t3242 + t2896;
t2874 = -0.2e1 * t2928 * t3243 + t2895;
t2873 = -0.2e1 * t2925 * t3244 + t2894;
t2794 = qJ(3,1) * t3275 + t2803 * t2979;
t2793 = qJ(3,2) * t3276 + t2801 * t2977;
t2792 = qJ(3,3) * t3277 + t2799 * t2975;
t1 = [(t2810 * t3107 + t2811 * t3105 + t2812 * t3103) * MDP(1) + (t2962 * t3077 + t2963 * t3076 + t2964 * t3075 + (-t2878 * t2899 + t3119 * t3331) * t3054 + (-t2877 * t2898 + t3121 * t3332) * t3055 + (-t2876 * t2897 + t3123 * t3333) * t3056) * MDP(4) + (t3032 * t3333 + t3031 * t3332 + t3030 * t3331 + (t2875 * t3248 + t2985 * t3048) * t2930 + (t2874 * t3249 + t2983 * t3050) * t2927 + (t2873 * t3250 + t2981 * t3052) * t2924) * MDP(5) + (t2962 * t3043 + t2963 * t3041 + t2964 * t3039 + t2975 * t3017 + t2977 * t3015 + t2979 * t3013) * MDP(6) + (-t2962 * t3044 - t2963 * t3042 - t2964 * t3040 + t2981 * t3017 + t2983 * t3015 + t2985 * t3013) * MDP(7) + (t2876 * t3141 + t2877 * t3140 + t2878 * t3139) * MDP(8) + (t2964 * t3327 + t2963 * t3326 + t2962 * t3325 + (t3027 * t2878 + t3033 * t2889) * t2998 + (t3028 * t2877 + t3034 * t2887) * t2995 + (t3029 * t2876 + t3035 * t2885) * t2992) * MDP(11) + (t2792 * t3107 + t2793 * t3105 + t2794 * t3103 + (-t2964 * t3069 + (t2878 * t3205 + t2889 * t2979) * t2812) * t2998 + (-t2963 * t3070 + (t2877 * t3211 + t2887 * t2977) * t2811) * t2995 + (-t2962 * t3071 + (t2876 * t3217 + t2885 * t2975) * t2810) * t2992) * MDP(12) + (t3074 * t3333 + t3073 * t3332 + t3072 * t3331 + t2885 * t3268 + t2887 * t3267 + t2889 * t3266 + (t3078 * t2878 + t2944 * t3048) * t2930 + (t3079 * t2877 + t2942 * t3050) * t2927 + (t3080 * t2876 + t2940 * t3052) * t2924) * MDP(13) + (-t3024 * t3194 - t3025 * t3195 - t3026 * t3196 + (t2878 * t3090 + t3163 * t2889) * t2998 + (t2877 * t3091 + t3164 * t2887) * t2995 + (t2876 * t3092 + t3165 * t2885) * t2992) * MDP(14); (-t2810 * t3108 - t2811 * t3106 - t2812 * t3104) * MDP(1) + (-t2959 * t3077 - t2960 * t3076 - t2961 * t3075 + (-t2881 * t2899 + t3119 * t3334) * t3054 + (-t2880 * t2898 + t3121 * t3335) * t3055 + (-t2879 * t2897 + t3123 * t3336) * t3056) * MDP(4) + (t3032 * t3336 + t3031 * t3335 + t3030 * t3334 + (t2875 * t3245 + t2985 * t3049) * t2930 + (t2874 * t3246 + t2983 * t3051) * t2927 + (t2873 * t3247 + t2981 * t3053) * t2924) * MDP(5) + (-t2959 * t3043 - t2960 * t3041 - t2961 * t3039 + t2975 * t3016 + t2977 * t3014 + t2979 * t3012) * MDP(6) + (t2959 * t3044 + t2960 * t3042 + t2961 * t3040 + t2981 * t3016 + t2983 * t3014 + t2985 * t3012) * MDP(7) + (t2879 * t3141 + t2880 * t3140 + t2881 * t3139) * MDP(8) + (-t2961 * t3327 - t2960 * t3326 - t2959 * t3325 + (t3027 * t2881 + t3033 * t2890) * t2998 + (t3028 * t2880 + t3034 * t2888) * t2995 + (t3029 * t2879 + t3035 * t2886) * t2992) * MDP(11) + (-t2792 * t3108 - t2793 * t3106 - t2794 * t3104 + (t2961 * t3069 + (t2881 * t3205 + t2890 * t2979) * t2812) * t2998 + (t2960 * t3070 + (t2880 * t3211 + t2888 * t2977) * t2811) * t2995 + (t2959 * t3071 + (t2879 * t3217 + t2886 * t2975) * t2810) * t2992) * MDP(12) + (t3074 * t3336 + t3073 * t3335 + t3072 * t3334 + t2886 * t3268 + t2888 * t3267 + t2890 * t3266 + (t3078 * t2881 + t2944 * t3049) * t2930 + (t3079 * t2880 + t2942 * t3051) * t2927 + (t3080 * t2879 + t2940 * t3053) * t2924) * MDP(13) + (t3024 * t3197 + t3025 * t3198 + t3026 * t3199 + (t2881 * t3090 + t3163 * t2890) * t2998 + (t2880 * t3091 + t3164 * t2888) * t2995 + (t2879 * t3092 + t3165 * t2886) * t2992) * MDP(14); (-t3134 - t3136 - t3138) * MDP(1) + (-t2965 * t3138 - t2966 * t3136 - t2967 * t3134 + (t2866 * t2985 * t3151 - t2908 * t3242) * t2979 * t3200 + (t2865 * t2983 * t3152 - t2907 * t3243) * t2977 * t3206 + (t2864 * t2981 * t3153 - t2906 * t3244) * t2975 * t3212) * MDP(4) + (t3038 * t3313 + t3037 * t3312 + t3036 * t3311 + (t2875 * t2908 * t2998 + t3087) * t3202 + (t2874 * t2907 * t2995 + t3088) * t3208 + (t2873 * t2906 * t2992 + t3089) * t3214) * MDP(5) + (-t2981 * t3068 - t2983 * t3066 - t2985 * t3064 + (-t2806 * t2980 + t2812 * t3109) * t3204 + (-t2805 * t2978 + t2811 * t3110) * t3210 + (-t2804 * t2976 + t2810 * t3111) * t3216) * MDP(6) + (t2975 * t3068 + t2977 * t3066 + t2979 * t3064 + (t2812 * t2908 * t3191 - t2980 * t3275) * t2930 + (t2811 * t2907 * t3192 - t2978 * t3276) * t2927 + (t2810 * t2906 * t3193 - t2976 * t3277) * t2924) * MDP(7) + (t2804 * t2924 * t3111 + t2805 * t2927 * t3110 + t2806 * t2930 * t3109) * MDP(8) + (t2819 * t3083 + t2820 * t3082 + t2821 * t3081 - t2804 * t3225 - t2805 * t3223 - t2806 * t3221 + (-0.2e1 * t2944 * t3134 + (t2908 * t3278 + (t2908 * t3218 - t2931 * t3222) * t2899) * t2998) * t2985 + (-0.2e1 * t2942 * t3136 + (t2907 * t3279 + (t2907 * t3219 - t2928 * t3224) * t2898) * t2995) * t2983 + (-0.2e1 * t2940 * t3138 + (t2906 * t3280 + (t2906 * t3220 - t2925 * t3226) * t2897) * t2992) * t2981) * MDP(11) + (-t2792 * t3215 - t2793 * t3209 - t2794 * t3203 + (t2980 * t3130 + (t2908 * t2943 * t3202 + t3222) * t2812) * t2998 + (t2978 * t3131 + (t2907 * t2941 * t3208 + t3224) * t2811) * t2995 + (t2976 * t3132 + (t2906 * t2939 * t3214 + t3226) * t2810) * t2992) * MDP(12) + (t2816 * t3083 + t2817 * t3082 + t2818 * t3081 + t2843 * t3225 + t2844 * t3223 + t2845 * t3221 + (t2944 * t3087 + t3078 * t3227) * t2930 + (t2942 * t3088 + t3079 * t3228) * t2927 + (t2940 * t3089 + t3080 * t3229) * t2924) * MDP(13) + (t3024 * t2980 + t3025 * t2978 + t3026 * t2976 + (t3163 * t2911 + t3090 * t3227) * t2998 + (t3164 * t2910 + t3091 * t3228) * t2995 + (t3165 * t2909 + t3092 * t3229) * t2992) * MDP(14);];
taucX  = t1;
