% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:07
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR12V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:06:39
% EndTime: 2020-08-06 19:06:47
% DurationCPUTime: 7.99s
% Computational Cost: add. (5361->487), mult. (9600->970), div. (1125->12), fcn. (8046->18), ass. (0->386)
t2510 = sin(qJ(1,3));
t2516 = cos(qJ(1,3));
t2509 = sin(qJ(2,3));
t2482 = t2509 * qJ(3,3);
t2515 = cos(qJ(2,3));
t2521 = pkin(1) + pkin(2);
t2788 = t2515 * t2521 + t2482;
t2791 = -pkin(4) * t2510 + t2516 * t2788;
t2512 = sin(qJ(1,2));
t2518 = cos(qJ(1,2));
t2511 = sin(qJ(2,2));
t2483 = t2511 * qJ(3,2);
t2517 = cos(qJ(2,2));
t2787 = t2517 * t2521 + t2483;
t2790 = -pkin(4) * t2512 + t2518 * t2787;
t2514 = sin(qJ(1,1));
t2520 = cos(qJ(1,1));
t2513 = sin(qJ(2,1));
t2484 = t2513 * qJ(3,1);
t2519 = cos(qJ(2,1));
t2786 = t2519 * t2521 + t2484;
t2789 = -pkin(4) * t2514 + t2520 * t2786;
t2785 = 2 * pkin(1);
t2784 = 2 * MDP(5);
t2783 = 2 * MDP(6);
t2782 = 2 * MDP(7);
t2781 = 2 * MDP(13);
t2777 = pkin(4) * t2516;
t2776 = pkin(4) * t2518;
t2775 = pkin(4) * t2520;
t2774 = qJ(3,1) * t2519;
t2773 = qJ(3,2) * t2517;
t2772 = qJ(3,3) * t2515;
t2506 = legFrame(3,2);
t2485 = sin(t2506);
t2771 = t2485 * qJ(3,3);
t2507 = legFrame(2,2);
t2486 = sin(t2507);
t2770 = t2486 * qJ(3,2);
t2508 = legFrame(1,2);
t2487 = sin(t2508);
t2769 = t2487 * qJ(3,1);
t2488 = cos(t2506);
t2768 = t2488 * qJ(3,3);
t2489 = cos(t2507);
t2767 = t2489 * qJ(3,2);
t2490 = cos(t2508);
t2766 = t2490 * qJ(3,1);
t2455 = t2510 * t2482 + t2777;
t2500 = t2515 ^ 2;
t2700 = t2510 * t2521;
t2704 = t2509 * t2521;
t2416 = (t2488 * t2700 - t2771) * t2500 + (t2455 * t2488 + t2485 * t2704) * t2515 + t2771;
t2458 = 0.1e1 / t2788;
t2765 = t2416 * t2458;
t2523 = 0.1e1 / qJ(3,3);
t2764 = t2416 * t2523;
t2456 = t2512 * t2483 + t2776;
t2502 = t2517 ^ 2;
t2693 = t2512 * t2521;
t2697 = t2511 * t2521;
t2417 = (t2489 * t2693 - t2770) * t2502 + (t2456 * t2489 + t2486 * t2697) * t2517 + t2770;
t2460 = 0.1e1 / t2787;
t2763 = t2417 * t2460;
t2526 = 0.1e1 / qJ(3,2);
t2762 = t2417 * t2526;
t2457 = t2514 * t2484 + t2775;
t2504 = t2519 ^ 2;
t2686 = t2514 * t2521;
t2690 = t2513 * t2521;
t2418 = (t2490 * t2686 - t2769) * t2504 + (t2457 * t2490 + t2487 * t2690) * t2519 + t2769;
t2462 = 0.1e1 / t2786;
t2761 = t2418 * t2462;
t2529 = 0.1e1 / qJ(3,1);
t2760 = t2418 * t2529;
t2419 = (-t2485 * t2700 - t2768) * t2500 + (-t2455 * t2485 + t2488 * t2704) * t2515 + t2768;
t2759 = t2419 * t2458;
t2758 = t2419 * t2523;
t2420 = (-t2486 * t2693 - t2767) * t2502 + (-t2456 * t2486 + t2489 * t2697) * t2517 + t2767;
t2757 = t2420 * t2460;
t2756 = t2420 * t2526;
t2421 = (-t2487 * t2686 - t2766) * t2504 + (-t2457 * t2487 + t2490 * t2690) * t2519 + t2766;
t2755 = t2421 * t2462;
t2754 = t2421 * t2529;
t2443 = t2510 * t2788 + t2777;
t2464 = t2704 - t2772;
t2422 = t2443 * t2488 + t2464 * t2485;
t2524 = 0.1e1 / qJ(3,3) ^ 2;
t2753 = t2422 * t2524;
t2423 = -t2443 * t2485 + t2464 * t2488;
t2752 = t2423 * t2524;
t2444 = t2512 * t2787 + t2776;
t2465 = t2697 - t2773;
t2424 = t2444 * t2489 + t2465 * t2486;
t2527 = 0.1e1 / qJ(3,2) ^ 2;
t2751 = t2424 * t2527;
t2425 = -t2444 * t2486 + t2465 * t2489;
t2750 = t2425 * t2527;
t2445 = t2514 * t2786 + t2775;
t2466 = t2690 - t2774;
t2426 = t2445 * t2490 + t2466 * t2487;
t2530 = 0.1e1 / qJ(3,1) ^ 2;
t2749 = t2426 * t2530;
t2427 = -t2445 * t2487 + t2466 * t2490;
t2748 = t2427 * t2530;
t2747 = t2791 ^ 2 * t2500;
t2746 = t2790 ^ 2 * t2502;
t2745 = t2789 ^ 2 * t2504;
t2744 = t2791 * t2500;
t2743 = t2791 * t2515;
t2742 = t2791 * t2516;
t2741 = t2790 * t2502;
t2740 = t2790 * t2517;
t2739 = t2790 * t2518;
t2738 = t2789 * t2504;
t2737 = t2789 * t2519;
t2736 = t2789 * t2520;
t2735 = t2791 * t2524;
t2734 = t2790 * t2527;
t2733 = t2789 * t2530;
t2522 = qJ(3,3) ^ 2;
t2531 = pkin(1) ^ 2;
t2491 = t2522 + t2531;
t2732 = t2458 * t2491;
t2731 = t2458 * t2515;
t2459 = 0.1e1 / t2788 ^ 2;
t2495 = t2510 ^ 2;
t2730 = t2459 * t2495;
t2501 = t2516 ^ 2;
t2729 = t2459 * t2501;
t2728 = t2459 * t2523;
t2727 = t2459 * t2524;
t2525 = qJ(3,2) ^ 2;
t2492 = t2525 + t2531;
t2726 = t2460 * t2492;
t2725 = t2460 * t2517;
t2461 = 0.1e1 / t2787 ^ 2;
t2497 = t2512 ^ 2;
t2724 = t2461 * t2497;
t2503 = t2518 ^ 2;
t2723 = t2461 * t2503;
t2722 = t2461 * t2526;
t2721 = t2461 * t2527;
t2528 = qJ(3,1) ^ 2;
t2493 = t2528 + t2531;
t2720 = t2462 * t2493;
t2719 = t2462 * t2519;
t2463 = 0.1e1 / t2786 ^ 2;
t2499 = t2514 ^ 2;
t2718 = t2463 * t2499;
t2505 = t2520 ^ 2;
t2717 = t2463 * t2505;
t2716 = t2463 * t2529;
t2715 = t2463 * t2530;
t2471 = pkin(1) * t2515 + t2482;
t2714 = t2471 * t2509;
t2473 = pkin(1) * t2517 + t2483;
t2713 = t2473 * t2511;
t2475 = pkin(1) * t2519 + t2484;
t2712 = t2475 * t2513;
t2711 = t2485 * t2516;
t2710 = t2486 * t2518;
t2709 = t2487 * t2520;
t2708 = t2488 * t2516;
t2707 = t2489 * t2518;
t2706 = t2490 * t2520;
t2705 = t2509 * t2515;
t2703 = t2509 * t2523;
t2702 = t2510 * t2515;
t2701 = t2510 * t2516;
t2699 = t2510 * t2523;
t2698 = t2511 * t2517;
t2696 = t2511 * t2526;
t2695 = t2512 * t2517;
t2694 = t2512 * t2518;
t2692 = t2512 * t2526;
t2691 = t2513 * t2519;
t2689 = t2513 * t2529;
t2688 = t2514 * t2519;
t2687 = t2514 * t2520;
t2685 = t2514 * t2529;
t2681 = pkin(1) * t2765;
t2680 = pkin(1) * t2763;
t2679 = pkin(1) * t2761;
t2678 = pkin(1) * t2759;
t2677 = pkin(1) * t2757;
t2676 = pkin(1) * t2755;
t2675 = t2422 * t2703;
t2674 = t2423 * t2703;
t2673 = t2424 * t2696;
t2672 = t2425 * t2696;
t2671 = t2426 * t2689;
t2670 = t2427 * t2689;
t2669 = t2791 * t2731;
t2668 = t2500 * t2742;
t2667 = t2515 * t2742;
t2666 = t2523 * t2743;
t2665 = t2524 * t2743;
t2664 = t2790 * t2725;
t2663 = t2502 * t2739;
t2662 = t2517 * t2739;
t2661 = t2526 * t2740;
t2660 = t2527 * t2740;
t2659 = t2789 * t2719;
t2658 = t2504 * t2736;
t2657 = t2519 * t2736;
t2656 = t2529 * t2737;
t2655 = t2530 * t2737;
t2654 = t2791 * t2703;
t2653 = t2790 * t2696;
t2652 = t2789 * t2689;
t2470 = -pkin(1) * t2509 + t2772;
t2651 = t2470 * t2728;
t2650 = t2459 * t2471 * t2515;
t2476 = t2485 ^ 2;
t2649 = t2476 * t2729;
t2479 = t2488 ^ 2;
t2648 = t2479 * t2729;
t2494 = t2509 ^ 2;
t2647 = t2494 * t2729;
t2646 = t2459 * t2705;
t2645 = t2459 * t2703;
t2644 = t2459 * t2701;
t2643 = t2459 * t2699;
t2642 = t2516 * t2728;
t2472 = -pkin(1) * t2511 + t2773;
t2641 = t2472 * t2722;
t2640 = t2461 * t2473 * t2517;
t2477 = t2486 ^ 2;
t2639 = t2477 * t2723;
t2480 = t2489 ^ 2;
t2638 = t2480 * t2723;
t2496 = t2511 ^ 2;
t2637 = t2496 * t2723;
t2636 = t2461 * t2698;
t2635 = t2461 * t2696;
t2634 = t2461 * t2694;
t2633 = t2461 * t2692;
t2632 = t2518 * t2722;
t2474 = -pkin(1) * t2513 + t2774;
t2631 = t2474 * t2716;
t2630 = t2463 * t2475 * t2519;
t2478 = t2487 ^ 2;
t2629 = t2478 * t2717;
t2481 = t2490 ^ 2;
t2628 = t2481 * t2717;
t2498 = t2513 ^ 2;
t2627 = t2498 * t2717;
t2626 = t2463 * t2691;
t2625 = t2463 * t2689;
t2624 = t2463 * t2687;
t2623 = t2463 * t2685;
t2622 = t2520 * t2716;
t2621 = t2501 * t2714;
t2620 = t2503 * t2713;
t2619 = t2505 * t2712;
t2618 = t2485 * t2488 * t2501;
t2617 = t2486 * t2489 * t2503;
t2616 = t2487 * t2490 * t2505;
t2615 = t2509 * t2699;
t2614 = t2511 * t2692;
t2613 = t2513 * t2685;
t2452 = (-t2522 + t2531) * t2500 + qJ(3,3) * t2705 * t2785 + t2522;
t2453 = (-t2525 + t2531) * t2502 + qJ(3,2) * t2698 * t2785 + t2525;
t2454 = (-t2528 + t2531) * t2504 + qJ(3,1) * t2691 * t2785 + t2528;
t2574 = t2487 * t2624;
t2581 = t2486 * t2634;
t2588 = t2485 * t2644;
t2612 = t2452 * t2588 + t2453 * t2581 + t2454 * t2574;
t2575 = t2463 * t2616;
t2544 = t2519 * t2575;
t2582 = t2461 * t2617;
t2547 = t2517 * t2582;
t2589 = t2459 * t2618;
t2550 = t2515 * t2589;
t2611 = -0.2e1 * t2471 * t2550 - 0.2e1 * t2473 * t2547 - 0.2e1 * t2475 * t2544;
t2570 = t2519 * t2624;
t2545 = t2475 * t2570;
t2577 = t2517 * t2634;
t2548 = t2473 * t2577;
t2584 = t2515 * t2644;
t2551 = t2471 * t2584;
t2610 = 0.2e1 * t2485 * t2551 + 0.2e1 * t2486 * t2548 + 0.2e1 * t2487 * t2545;
t2609 = -0.2e1 * t2488 * t2551 - 0.2e1 * t2489 * t2548 - 0.2e1 * t2490 * t2545;
t2608 = pkin(1) * t2669;
t2607 = pkin(1) * t2664;
t2606 = pkin(1) * t2659;
t2605 = t2416 * t2651;
t2604 = t2417 * t2641;
t2603 = t2418 * t2631;
t2602 = t2419 * t2651;
t2601 = t2420 * t2641;
t2600 = t2421 * t2631;
t2599 = t2459 * t2666;
t2598 = t2459 * t2665;
t2597 = t2461 * t2661;
t2596 = t2461 * t2660;
t2595 = t2463 * t2656;
t2594 = t2463 * t2655;
t2593 = t2516 * t2654;
t2592 = t2518 * t2653;
t2591 = t2520 * t2652;
t2590 = t2470 * t2643;
t2587 = t2488 * t2644;
t2586 = t2494 * t2644;
t2585 = t2501 * t2646;
t2583 = t2472 * t2633;
t2580 = t2489 * t2634;
t2579 = t2496 * t2634;
t2578 = t2503 * t2636;
t2576 = t2474 * t2623;
t2573 = t2490 * t2624;
t2572 = t2498 * t2624;
t2571 = t2505 * t2626;
t2569 = t2701 * t2714;
t2568 = t2694 * t2713;
t2567 = t2687 * t2712;
t2566 = 0.2e1 * t2501 * t2650;
t2565 = 0.2e1 * t2503 * t2640;
t2564 = 0.2e1 * t2505 * t2630;
t2560 = t2416 * t2488 * t2642;
t2559 = t2417 * t2489 * t2632;
t2558 = t2418 * t2490 * t2622;
t2557 = t2419 * t2485 * t2642;
t2556 = t2420 * t2486 * t2632;
t2555 = t2421 * t2487 * t2622;
t2554 = t2510 * t2599;
t2553 = t2512 * t2597;
t2552 = t2514 * t2595;
t2549 = t2509 * t2584;
t2546 = t2511 * t2577;
t2543 = t2513 * t2570;
t2542 = t2470 * t2516 * t2599;
t2541 = t2472 * t2518 * t2597;
t2540 = t2474 * t2520 * t2595;
t2534 = (-t2418 * t2487 + t2421 * t2490) * t2622;
t2535 = (-t2417 * t2486 + t2420 * t2489) * t2632;
t2536 = (-t2416 * t2485 + t2419 * t2488) * t2642;
t2539 = ((t2418 * t2754 - t2616 * t2712) * t2463 + (t2417 * t2756 - t2617 * t2713) * t2461 + (t2416 * t2758 - t2618 * t2714) * t2459) * t2781 + (t2509 * t2536 + t2511 * t2535 + t2513 * t2534) * MDP(6) + (t2515 * t2536 + t2517 * t2535 + t2519 * t2534) * MDP(7) + (t2416 * t2419 * t2727 + t2417 * t2420 * t2721 + t2418 * t2421 * t2715) * MDP(8) + (-t2509 * t2550 - t2511 * t2547 - t2513 * t2544) * t2784 + (-t2494 * t2589 - t2496 * t2582 - t2498 * t2575) * MDP(4) + (-t2575 - t2582 - t2589) * MDP(1);
t2538 = ((t2421 * t2656 + t2487 * t2567) * t2463 + (t2420 * t2661 + t2486 * t2568) * t2461 + (t2419 * t2666 + t2485 * t2569) * t2459) * t2781 + ((-t2421 * t2514 - t2487 * t2657) * t2625 + (-t2420 * t2512 - t2486 * t2662) * t2635 + (-t2419 * t2510 - t2485 * t2667) * t2645) * MDP(6) + ((-t2421 * t2688 - t2487 * t2658) * t2716 + (-t2420 * t2695 - t2486 * t2663) * t2722 + (-t2419 * t2702 - t2485 * t2668) * t2728) * MDP(7) + (t2419 * t2598 + t2420 * t2596 + t2421 * t2594) * MDP(8) + (t2485 * t2549 + t2486 * t2546 + t2487 * t2543) * t2784 + (t2485 * t2586 + t2486 * t2579 + t2487 * t2572) * MDP(4) + (t2574 + t2581 + t2588) * MDP(1);
t2537 = ((t2418 * t2656 - t2490 * t2567) * t2463 + (t2417 * t2661 - t2489 * t2568) * t2461 + (t2416 * t2666 - t2488 * t2569) * t2459) * t2781 + ((-t2418 * t2514 + t2490 * t2657) * t2625 + (-t2417 * t2512 + t2489 * t2662) * t2635 + (-t2416 * t2510 + t2488 * t2667) * t2645) * MDP(6) + ((-t2418 * t2688 + t2490 * t2658) * t2716 + (-t2417 * t2695 + t2489 * t2663) * t2722 + (-t2416 * t2702 + t2488 * t2668) * t2728) * MDP(7) + (t2416 * t2598 + t2417 * t2596 + t2418 * t2594) * MDP(8) + (-t2488 * t2549 - t2489 * t2546 - t2490 * t2543) * t2784 + (-t2488 * t2586 - t2489 * t2579 - t2490 * t2572) * MDP(4) + (-t2573 - t2580 - t2587) * MDP(1);
t2533 = -t2452 * t2589 - t2453 * t2582 - t2454 * t2575;
t2532 = -t2452 * t2587 - t2453 * t2580 - t2454 * t2573;
t2415 = t2421 ^ 2;
t2414 = t2420 ^ 2;
t2413 = t2419 ^ 2;
t2412 = t2418 ^ 2;
t2411 = t2417 ^ 2;
t2410 = t2416 ^ 2;
t2409 = (t2789 - t2606) * t2529;
t2408 = (-t2789 + 0.2e1 * t2606) * t2529;
t2407 = (t2790 - t2607) * t2526;
t2406 = (-t2790 + 0.2e1 * t2607) * t2526;
t2405 = (t2791 - t2608) * t2523;
t2404 = (-t2791 + 0.2e1 * t2608) * t2523;
t2403 = (-pkin(1) * t2789 + t2493 * t2659) * t2529;
t2402 = (-pkin(1) * t2790 + t2492 * t2664) * t2526;
t2401 = (-pkin(1) * t2791 + t2491 * t2669) * t2523;
t2391 = t2409 * t2513 + t2462 * t2738;
t2390 = t2407 * t2511 + t2460 * t2741;
t2389 = t2405 * t2509 + t2458 * t2744;
t2388 = (t2427 - t2676) * t2529;
t2387 = (-t2427 + 0.2e1 * t2676) * t2529;
t2386 = (t2425 - t2677) * t2526;
t2385 = (-t2425 + 0.2e1 * t2677) * t2526;
t2384 = (t2423 - t2678) * t2523;
t2383 = (-t2423 + 0.2e1 * t2678) * t2523;
t2382 = (t2426 - t2679) * t2529;
t2381 = (-t2426 + 0.2e1 * t2679) * t2529;
t2380 = (t2424 - t2680) * t2526;
t2379 = (-t2424 + 0.2e1 * t2680) * t2526;
t2378 = (t2422 - t2681) * t2523;
t2377 = (-t2422 + 0.2e1 * t2681) * t2523;
t2376 = (-pkin(1) * t2427 + t2421 * t2720) * t2529;
t2375 = (-pkin(1) * t2426 + t2418 * t2720) * t2529;
t2374 = (-pkin(1) * t2425 + t2420 * t2726) * t2526;
t2373 = (-pkin(1) * t2424 + t2417 * t2726) * t2526;
t2372 = (-pkin(1) * t2423 + t2419 * t2732) * t2523;
t2371 = (-pkin(1) * t2422 + t2416 * t2732) * t2523;
t2370 = t2388 * t2513 + t2421 * t2719;
t2369 = t2386 * t2511 + t2420 * t2725;
t2368 = t2384 * t2509 + t2419 * t2731;
t2367 = t2382 * t2513 + t2418 * t2719;
t2366 = t2380 * t2511 + t2417 * t2725;
t2365 = t2378 * t2509 + t2416 * t2731;
t1 = [(t2628 + t2638 + t2648) * MDP(1) + (t2479 * t2647 + t2480 * t2637 + t2481 * t2627) * MDP(4) + (t2479 * t2585 + t2480 * t2578 + t2481 * t2571) * t2784 + (t2509 * t2560 + t2511 * t2559 + t2513 * t2558) * t2783 + (t2515 * t2560 + t2517 * t2559 + t2519 * t2558) * t2782 + (t2410 * t2727 + t2411 * t2721 + t2412 * t2715) * MDP(8) + (t2479 * t2566 + t2480 * t2565 + t2481 * t2564 + (t2381 * t2529 - t2749) * t2761 + (t2379 * t2526 - t2751) * t2763 + (t2377 * t2523 - t2753) * t2765) * MDP(11) + ((t2603 + (t2367 + t2671) * t2462) * t2706 + (t2604 + (t2366 + t2673) * t2460) * t2707 + (t2605 + (t2365 + t2675) * t2458) * t2708) * MDP(12) + ((t2412 * t2529 + t2481 * t2619) * t2463 + (t2411 * t2526 + t2480 * t2620) * t2461 + (t2410 * t2523 + t2479 * t2621) * t2459) * t2781 + (t2452 * t2648 + t2453 * t2638 + t2454 * t2628 + (t2375 * t2761 + t2382 * t2426) * t2529 + (t2373 * t2763 + t2380 * t2424) * t2526 + (t2371 * t2765 + t2378 * t2422) * t2523) * MDP(14) + MDP(15); ((t2387 * t2760 - t2421 * t2749) * t2462 + (t2385 * t2762 - t2420 * t2751) * t2460 + (t2383 * t2764 - t2419 * t2753) * t2458 + t2611) * MDP(11) + ((-t2487 * t2603 + (t2370 * t2490 - t2487 * t2671) * t2462) * t2520 + (-t2486 * t2604 + (t2369 * t2489 - t2486 * t2673) * t2460) * t2518 + (-t2485 * t2605 + (t2368 * t2488 - t2485 * t2675) * t2458) * t2516) * MDP(12) + ((t2376 * t2761 + t2388 * t2426) * t2529 + (t2374 * t2763 + t2386 * t2424) * t2526 + (t2372 * t2765 + t2384 * t2422) * t2523 + t2533) * MDP(14) + t2539; ((t2408 * t2760 - t2426 * t2655) * t2462 + (t2406 * t2762 - t2424 * t2660) * t2460 + (t2404 * t2764 - t2422 * t2665) * t2458 + t2609) * MDP(11) + (-t2416 * t2590 - t2417 * t2583 - t2418 * t2576 + (t2391 * t2706 - t2426 * t2613) * t2462 + (t2390 * t2707 - t2424 * t2614) * t2460 + (t2389 * t2708 - t2422 * t2615) * t2458) * MDP(12) + ((t2403 * t2761 + t2409 * t2426) * t2529 + (t2402 * t2763 + t2407 * t2424) * t2526 + (t2401 * t2765 + t2405 * t2422) * t2523 + t2532) * MDP(14) + t2537; ((t2381 * t2754 - t2418 * t2748) * t2462 + (t2379 * t2756 - t2417 * t2750) * t2460 + (t2377 * t2758 - t2416 * t2752) * t2458 + t2611) * MDP(11) + ((t2490 * t2600 + (-t2367 * t2487 + t2490 * t2670) * t2462) * t2520 + (t2489 * t2601 + (-t2366 * t2486 + t2489 * t2672) * t2460) * t2518 + (t2488 * t2602 + (-t2365 * t2485 + t2488 * t2674) * t2458) * t2516) * MDP(12) + ((t2375 * t2755 + t2382 * t2427) * t2529 + (t2373 * t2757 + t2380 * t2425) * t2526 + (t2371 * t2759 + t2378 * t2423) * t2523 + t2533) * MDP(14) + t2539; (t2629 + t2639 + t2649) * MDP(1) + (t2476 * t2647 + t2477 * t2637 + t2478 * t2627) * MDP(4) + (t2476 * t2585 + t2477 * t2578 + t2478 * t2571) * t2784 + (-t2509 * t2557 - t2511 * t2556 - t2513 * t2555) * t2783 + (-t2515 * t2557 - t2517 * t2556 - t2519 * t2555) * t2782 + (t2413 * t2727 + t2414 * t2721 + t2415 * t2715) * MDP(8) + (t2476 * t2566 + t2477 * t2565 + t2478 * t2564 + (t2387 * t2529 - t2748) * t2755 + (t2385 * t2526 - t2750) * t2757 + (t2383 * t2523 - t2752) * t2759) * MDP(11) + ((-t2600 + (-t2370 - t2670) * t2462) * t2709 + (-t2601 + (-t2369 - t2672) * t2460) * t2710 + (-t2602 + (-t2368 - t2674) * t2458) * t2711) * MDP(12) + ((t2415 * t2529 + t2478 * t2619) * t2463 + (t2414 * t2526 + t2477 * t2620) * t2461 + (t2413 * t2523 + t2476 * t2621) * t2459) * t2781 + (t2452 * t2649 + t2453 * t2639 + t2454 * t2629 + (t2376 * t2755 + t2388 * t2427) * t2529 + (t2374 * t2757 + t2386 * t2425) * t2526 + (t2372 * t2759 + t2384 * t2423) * t2523) * MDP(14) + MDP(15); ((t2408 * t2754 - t2427 * t2655) * t2462 + (t2406 * t2756 - t2425 * t2660) * t2460 + (t2404 * t2758 - t2423 * t2665) * t2458 + t2610) * MDP(11) + (-t2419 * t2590 - t2420 * t2583 - t2421 * t2576 + (-t2391 * t2709 - t2427 * t2613) * t2462 + (-t2390 * t2710 - t2425 * t2614) * t2460 + (-t2389 * t2711 - t2423 * t2615) * t2458) * MDP(12) + ((t2403 * t2755 + t2409 * t2427) * t2529 + (t2402 * t2757 + t2407 * t2425) * t2526 + (t2401 * t2759 + t2405 * t2423) * t2523 + t2612) * MDP(14) + t2538; ((t2381 * t2656 - t2418 * t2733) * t2462 + (t2379 * t2661 - t2417 * t2734) * t2460 + (t2377 * t2666 - t2416 * t2735) * t2458 + t2609) * MDP(11) + (t2488 * t2542 + t2489 * t2541 + t2490 * t2540 + (-t2367 * t2514 + t2490 * t2591) * t2462 + (-t2366 * t2512 + t2489 * t2592) * t2460 + (-t2365 * t2510 + t2488 * t2593) * t2458) * MDP(12) + ((t2375 * t2659 + t2382 * t2789) * t2529 + (t2373 * t2664 + t2380 * t2790) * t2526 + (t2371 * t2669 + t2378 * t2791) * t2523 + t2532) * MDP(14) + t2537; ((t2387 * t2656 - t2421 * t2733) * t2462 + (t2385 * t2661 - t2420 * t2734) * t2460 + (t2383 * t2666 - t2419 * t2735) * t2458 + t2610) * MDP(11) + (-t2485 * t2542 - t2486 * t2541 - t2487 * t2540 + (-t2370 * t2514 - t2487 * t2591) * t2462 + (-t2369 * t2512 - t2486 * t2592) * t2460 + (-t2368 * t2510 - t2485 * t2593) * t2458) * MDP(12) + ((t2376 * t2659 + t2388 * t2789) * t2529 + (t2374 * t2664 + t2386 * t2790) * t2526 + (t2372 * t2669 + t2384 * t2791) * t2523 + t2612) * MDP(14) + t2538; (t2718 + t2724 + t2730) * MDP(1) + (t2494 * t2730 + t2496 * t2724 + t2498 * t2718) * MDP(4) + (t2715 * t2745 + t2721 * t2746 + t2727 * t2747) * MDP(8) + 0.2e1 * (t2495 * t2650 + t2497 * t2640 + t2499 * t2630) * MDP(11) + (-t2470 * t2554 - t2472 * t2553 - t2474 * t2552) * MDP(12) + (t2405 * t2523 * t2791 + t2407 * t2526 * t2790 + t2409 * t2529 * t2789 + t2452 * t2730 + t2453 * t2724 + t2454 * t2718) * MDP(14) + MDP(15) + ((-t2391 - t2652) * MDP(12) * t2514 + ((t2408 * t2529 - t2733) * MDP(11) + t2403 * t2529 * MDP(14)) * t2737) * t2462 + ((-t2390 - t2653) * MDP(12) * t2512 + ((t2406 * t2526 - t2734) * MDP(11) + t2402 * t2526 * MDP(14)) * t2740) * t2460 + ((-t2389 - t2654) * MDP(12) * t2510 + ((t2404 * t2523 - t2735) * MDP(11) + t2401 * t2523 * MDP(14)) * t2743) * t2458 + (t2495 * t2646 + t2497 * t2636 + t2499 * t2626) * t2784 + (-t2509 * t2554 - t2511 * t2553 - t2513 * t2552) * t2783 + (-t2623 * t2738 - t2633 * t2741 - t2643 * t2744) * t2782 + ((t2499 * t2712 + t2529 * t2745) * t2463 + (t2497 * t2713 + t2526 * t2746) * t2461 + (t2495 * t2714 + t2523 * t2747) * t2459) * t2781;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
