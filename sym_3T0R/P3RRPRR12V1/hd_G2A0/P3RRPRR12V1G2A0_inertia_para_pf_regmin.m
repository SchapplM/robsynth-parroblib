% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:07
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V1G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:06:08
% EndTime: 2020-08-06 19:06:14
% DurationCPUTime: 6.29s
% Computational Cost: add. (5277->418), mult. (9510->947), div. (1125->12), fcn. (8046->18), ass. (0->403)
t750 = sin(qJ(2,1));
t721 = t750 * qJ(3,1);
t756 = cos(qJ(2,1));
t758 = pkin(1) + pkin(2);
t1019 = t756 * t758 + t721;
t751 = sin(qJ(1,1));
t757 = cos(qJ(1,1));
t1024 = -pkin(4) * t751 + t1019 * t757;
t748 = sin(qJ(2,2));
t720 = t748 * qJ(3,2);
t754 = cos(qJ(2,2));
t1020 = t754 * t758 + t720;
t749 = sin(qJ(1,2));
t755 = cos(qJ(1,2));
t1023 = -pkin(4) * t749 + t1020 * t755;
t746 = sin(qJ(2,3));
t719 = t746 * qJ(3,3);
t752 = cos(qJ(2,3));
t1021 = t752 * t758 + t719;
t747 = sin(qJ(1,3));
t753 = cos(qJ(1,3));
t1022 = -pkin(4) * t747 + t1021 * t753;
t1018 = 2 * pkin(1);
t1014 = pkin(4) * t753;
t1013 = pkin(4) * t755;
t1012 = pkin(4) * t757;
t1011 = qJ(3,1) * t756;
t1010 = qJ(3,2) * t754;
t1009 = qJ(3,3) * t752;
t942 = t746 * t747;
t692 = qJ(3,3) * t942 + t1014;
t743 = legFrame(3,2);
t722 = sin(t743);
t725 = cos(t743);
t737 = t752 ^ 2;
t936 = t747 * t758;
t940 = t746 * t758;
t954 = t722 * qJ(3,3);
t653 = (t725 * t936 - t954) * t737 + (t692 * t725 + t722 * t940) * t752 + t954;
t695 = 0.1e1 / t1021;
t1008 = t653 * t695;
t760 = 0.1e1 / qJ(3,3);
t1007 = t653 * t760;
t934 = t748 * t749;
t693 = qJ(3,2) * t934 + t1013;
t744 = legFrame(2,2);
t723 = sin(t744);
t726 = cos(t744);
t739 = t754 ^ 2;
t928 = t749 * t758;
t932 = t748 * t758;
t952 = t723 * qJ(3,2);
t654 = (t726 * t928 - t952) * t739 + (t693 * t726 + t723 * t932) * t754 + t952;
t697 = 0.1e1 / t1020;
t1006 = t654 * t697;
t763 = 0.1e1 / qJ(3,2);
t1005 = t654 * t763;
t926 = t750 * t751;
t694 = qJ(3,1) * t926 + t1012;
t745 = legFrame(1,2);
t724 = sin(t745);
t727 = cos(t745);
t741 = t756 ^ 2;
t920 = t751 * t758;
t924 = t750 * t758;
t950 = t724 * qJ(3,1);
t655 = (t727 * t920 - t950) * t741 + (t694 * t727 + t724 * t924) * t756 + t950;
t699 = 0.1e1 / t1019;
t1004 = t655 * t699;
t766 = 0.1e1 / qJ(3,1);
t1003 = t655 * t766;
t948 = t725 * qJ(3,3);
t656 = (-t722 * t936 - t948) * t737 + (-t692 * t722 + t725 * t940) * t752 + t948;
t1002 = t656 * t695;
t1001 = t656 * t760;
t946 = t726 * qJ(3,2);
t657 = (-t723 * t928 - t946) * t739 + (-t693 * t723 + t726 * t932) * t754 + t946;
t1000 = t657 * t697;
t999 = t657 * t763;
t944 = t727 * qJ(3,1);
t658 = (-t724 * t920 - t944) * t741 + (-t694 * t724 + t727 * t924) * t756 + t944;
t998 = t658 * t699;
t997 = t658 * t766;
t680 = t1021 * t747 + t1014;
t701 = t940 - t1009;
t659 = t680 * t725 + t701 * t722;
t761 = 0.1e1 / qJ(3,3) ^ 2;
t996 = t659 * t761;
t660 = -t680 * t722 + t701 * t725;
t995 = t660 * t761;
t681 = t1020 * t749 + t1013;
t702 = t932 - t1010;
t661 = t681 * t726 + t702 * t723;
t764 = 0.1e1 / qJ(3,2) ^ 2;
t994 = t661 * t764;
t662 = -t681 * t723 + t702 * t726;
t993 = t662 * t764;
t682 = t1019 * t751 + t1012;
t703 = t924 - t1011;
t663 = t682 * t727 + t703 * t724;
t767 = 0.1e1 / qJ(3,1) ^ 2;
t992 = t663 * t767;
t664 = -t682 * t724 + t703 * t727;
t991 = t664 * t767;
t990 = t1022 ^ 2 * t737;
t989 = t1023 ^ 2 * t739;
t988 = t1024 ^ 2 * t741;
t987 = t1022 * t737;
t986 = t1022 * t752;
t985 = t1022 * t753;
t984 = t1023 * t739;
t983 = t1023 * t754;
t982 = t1023 * t755;
t981 = t1024 * t741;
t980 = t1024 * t756;
t979 = t1024 * t757;
t978 = t1022 * t761;
t977 = t1023 * t764;
t976 = t1024 * t767;
t759 = qJ(3,3) ^ 2;
t768 = pkin(1) ^ 2;
t728 = t759 + t768;
t975 = t695 * t728;
t974 = t695 * t752;
t696 = 0.1e1 / t1021 ^ 2;
t732 = t747 ^ 2;
t973 = t696 * t732;
t738 = t753 ^ 2;
t972 = t696 * t738;
t971 = t696 * t760;
t970 = t696 * t761;
t762 = qJ(3,2) ^ 2;
t729 = t762 + t768;
t969 = t697 * t729;
t968 = t697 * t754;
t698 = 0.1e1 / t1020 ^ 2;
t734 = t749 ^ 2;
t967 = t698 * t734;
t740 = t755 ^ 2;
t966 = t698 * t740;
t965 = t698 * t763;
t964 = t698 * t764;
t765 = qJ(3,1) ^ 2;
t730 = t765 + t768;
t963 = t699 * t730;
t962 = t699 * t756;
t700 = 0.1e1 / t1019 ^ 2;
t736 = t751 ^ 2;
t961 = t700 * t736;
t742 = t757 ^ 2;
t960 = t700 * t742;
t959 = t700 * t766;
t958 = t700 * t767;
t708 = pkin(1) * t752 + t719;
t957 = t708 * t746;
t710 = pkin(1) * t754 + t720;
t956 = t710 * t748;
t712 = pkin(1) * t756 + t721;
t955 = t712 * t750;
t953 = t722 * t753;
t951 = t723 * t755;
t949 = t724 * t757;
t947 = t725 * t753;
t945 = t726 * t755;
t943 = t727 * t757;
t941 = t746 * t752;
t939 = t746 * t760;
t938 = t747 * t752;
t937 = t747 * t753;
t935 = t747 * t760;
t933 = t748 * t754;
t931 = t748 * t763;
t930 = t749 * t754;
t929 = t749 * t755;
t927 = t749 * t763;
t925 = t750 * t756;
t923 = t750 * t766;
t922 = t751 * t756;
t921 = t751 * t757;
t919 = t751 * t766;
t915 = 0.2e1 * t696 * t708;
t914 = 0.2e1 * t698 * t710;
t913 = 0.2e1 * t700 * t712;
t912 = pkin(1) * t1008;
t911 = pkin(1) * t1006;
t910 = pkin(1) * t1004;
t909 = pkin(1) * t1002;
t908 = pkin(1) * t1000;
t907 = pkin(1) * t998;
t906 = t659 * t939;
t905 = t660 * t939;
t904 = t661 * t931;
t903 = t662 * t931;
t902 = t663 * t923;
t901 = t664 * t923;
t900 = t1022 * t974;
t899 = t737 * t985;
t898 = t752 * t985;
t897 = t760 * t986;
t896 = t761 * t986;
t895 = t1023 * t968;
t894 = t739 * t982;
t893 = t754 * t982;
t892 = t763 * t983;
t891 = t764 * t983;
t890 = t1024 * t962;
t889 = t741 * t979;
t888 = t756 * t979;
t887 = t766 * t980;
t886 = t767 * t980;
t885 = t1022 * t939;
t884 = t1023 * t931;
t883 = t1024 * t923;
t707 = -pkin(1) * t746 + t1009;
t882 = t707 * t971;
t713 = t722 ^ 2;
t881 = t713 * t972;
t716 = t725 ^ 2;
t880 = t716 * t972;
t731 = t746 ^ 2;
t879 = t731 * t972;
t878 = t696 * t941;
t877 = t696 * t939;
t876 = t696 * t937;
t875 = t696 * t935;
t874 = t753 * t971;
t709 = -pkin(1) * t748 + t1010;
t873 = t709 * t965;
t714 = t723 ^ 2;
t872 = t714 * t966;
t717 = t726 ^ 2;
t871 = t717 * t966;
t733 = t748 ^ 2;
t870 = t733 * t966;
t869 = t698 * t933;
t868 = t698 * t931;
t867 = t698 * t929;
t866 = t698 * t927;
t865 = t755 * t965;
t711 = -pkin(1) * t750 + t1011;
t864 = t711 * t959;
t715 = t724 ^ 2;
t863 = t715 * t960;
t718 = t727 ^ 2;
t862 = t718 * t960;
t735 = t750 ^ 2;
t861 = t735 * t960;
t860 = t700 * t925;
t859 = t700 * t923;
t858 = t700 * t921;
t857 = t700 * t919;
t856 = t757 * t959;
t855 = t738 * t957;
t854 = t740 * t956;
t853 = t742 * t955;
t852 = t722 * t725 * t738;
t851 = t723 * t726 * t740;
t850 = t724 * t727 * t742;
t849 = t746 * t935;
t848 = t748 * t927;
t847 = t750 * t919;
t689 = (-t759 + t768) * t737 + qJ(3,3) * t941 * t1018 + t759;
t690 = (-t762 + t768) * t739 + qJ(3,2) * t933 * t1018 + t762;
t691 = (-t765 + t768) * t741 + qJ(3,1) * t925 * t1018 + t765;
t808 = t724 * t858;
t815 = t723 * t867;
t822 = t722 * t876;
t846 = t689 * t822 + t690 * t815 + t691 * t808;
t809 = t700 * t850;
t781 = t756 * t809;
t816 = t698 * t851;
t784 = t754 * t816;
t823 = t696 * t852;
t787 = t752 * t823;
t845 = -0.2e1 * t708 * t787 - 0.2e1 * t710 * t784 - 0.2e1 * t712 * t781;
t804 = t756 * t858;
t782 = t712 * t804;
t811 = t754 * t867;
t785 = t710 * t811;
t818 = t752 * t876;
t788 = t708 * t818;
t844 = 0.2e1 * t722 * t788 + 0.2e1 * t723 * t785 + 0.2e1 * t724 * t782;
t843 = -0.2e1 * t725 * t788 - 0.2e1 * t726 * t785 - 0.2e1 * t727 * t782;
t842 = pkin(1) * t900;
t841 = pkin(1) * t895;
t840 = pkin(1) * t890;
t839 = t653 * t882;
t838 = t654 * t873;
t837 = t655 * t864;
t836 = t656 * t882;
t835 = t657 * t873;
t834 = t658 * t864;
t833 = t696 * t897;
t832 = t696 * t896;
t831 = t698 * t892;
t830 = t698 * t891;
t829 = t700 * t887;
t828 = t700 * t886;
t827 = t753 * t885;
t826 = t755 * t884;
t825 = t757 * t883;
t824 = t707 * t875;
t821 = t725 * t876;
t820 = t731 * t876;
t819 = t738 * t878;
t817 = t709 * t866;
t814 = t726 * t867;
t813 = t733 * t867;
t812 = t740 * t869;
t810 = t711 * t857;
t807 = t727 * t858;
t806 = t735 * t858;
t805 = t742 * t860;
t803 = t937 * t957;
t802 = t929 * t956;
t801 = t921 * t955;
t800 = t738 * t752 * t915;
t799 = t740 * t754 * t914;
t798 = t742 * t756 * t913;
t797 = t653 * t725 * t874;
t796 = t654 * t726 * t865;
t795 = t655 * t727 * t856;
t794 = t656 * t722 * t874;
t793 = t657 * t723 * t865;
t792 = t658 * t724 * t856;
t791 = t707 * t833;
t790 = t709 * t831;
t789 = t711 * t829;
t786 = t746 * t818;
t783 = t748 * t811;
t780 = t750 * t804;
t776 = t753 * t791;
t775 = t755 * t790;
t774 = t757 * t789;
t773 = (-t653 * t722 + t656 * t725) * t874;
t772 = (-t654 * t723 + t657 * t726) * t865;
t771 = (-t655 * t724 + t658 * t727) * t856;
t770 = -t689 * t823 - t690 * t816 - t691 * t809;
t769 = -t689 * t821 - t690 * t814 - t691 * t807;
t652 = t658 ^ 2;
t651 = t657 ^ 2;
t650 = t656 ^ 2;
t649 = t655 ^ 2;
t648 = t654 ^ 2;
t647 = t653 ^ 2;
t646 = (t1024 - t840) * t766;
t645 = (-t1024 + 0.2e1 * t840) * t766;
t644 = (t1023 - t841) * t763;
t643 = (-t1023 + 0.2e1 * t841) * t763;
t642 = (t1022 - t842) * t760;
t641 = (-t1022 + 0.2e1 * t842) * t760;
t640 = (-pkin(1) * t1024 + t730 * t890) * t766;
t639 = (-pkin(1) * t1023 + t729 * t895) * t763;
t638 = (-pkin(1) * t1022 + t728 * t900) * t760;
t637 = -t807 - t814 - t821;
t636 = t808 + t815 + t822;
t635 = -t809 - t816 - t823;
t634 = -t725 * t820 - t726 * t813 - t727 * t806;
t633 = t722 * t820 + t723 * t813 + t724 * t806;
t632 = -t731 * t823 - t733 * t816 - t735 * t809;
t631 = -0.2e1 * t725 * t786 - 0.2e1 * t726 * t783 - 0.2e1 * t727 * t780;
t630 = 0.2e1 * t722 * t786 + 0.2e1 * t723 * t783 + 0.2e1 * t724 * t780;
t629 = -0.2e1 * t746 * t787 - 0.2e1 * t748 * t784 - 0.2e1 * t750 * t781;
t628 = t646 * t750 + t699 * t981;
t627 = t644 * t748 + t697 * t984;
t626 = t642 * t746 + t695 * t987;
t625 = (t664 - t907) * t766;
t624 = (-t664 + 0.2e1 * t907) * t766;
t623 = (t662 - t908) * t763;
t622 = (-t662 + 0.2e1 * t908) * t763;
t621 = (t660 - t909) * t760;
t620 = (-t660 + 0.2e1 * t909) * t760;
t619 = (t663 - t910) * t766;
t618 = (-t663 + 0.2e1 * t910) * t766;
t617 = (t661 - t911) * t763;
t616 = (-t661 + 0.2e1 * t911) * t763;
t615 = (t659 - t912) * t760;
t614 = (-t659 + 0.2e1 * t912) * t760;
t613 = (-pkin(1) * t664 + t658 * t963) * t766;
t612 = (-pkin(1) * t663 + t655 * t963) * t766;
t611 = (-pkin(1) * t662 + t657 * t969) * t763;
t610 = (-pkin(1) * t661 + t654 * t969) * t763;
t609 = (-pkin(1) * t660 + t656 * t975) * t760;
t608 = (-pkin(1) * t659 + t653 * t975) * t760;
t607 = t625 * t750 + t658 * t962;
t606 = t623 * t748 + t657 * t968;
t605 = t621 * t746 + t656 * t974;
t604 = t619 * t750 + t655 * t962;
t603 = t617 * t748 + t654 * t968;
t602 = t615 * t746 + t653 * t974;
t601 = t656 * t832 + t657 * t830 + t658 * t828;
t600 = t653 * t832 + t654 * t830 + t655 * t828;
t599 = (-t655 * t922 + t727 * t889) * t959 + (-t654 * t930 + t726 * t894) * t965 + (-t653 * t938 + t725 * t899) * t971;
t598 = (-t658 * t922 - t724 * t889) * t959 + (-t657 * t930 - t723 * t894) * t965 + (-t656 * t938 - t722 * t899) * t971;
t597 = (-t655 * t751 + t727 * t888) * t859 + (-t654 * t749 + t726 * t893) * t868 + (-t653 * t747 + t725 * t898) * t877;
t596 = (-t658 * t751 - t724 * t888) * t859 + (-t657 * t749 - t723 * t893) * t868 + (-t656 * t747 - t722 * t898) * t877;
t595 = 0.2e1 * (t655 * t887 - t727 * t801) * t700 + 0.2e1 * (t654 * t892 - t726 * t802) * t698 + 0.2e1 * (t653 * t897 - t725 * t803) * t696;
t594 = 0.2e1 * (t658 * t887 + t724 * t801) * t700 + 0.2e1 * (t657 * t892 + t723 * t802) * t698 + 0.2e1 * (t656 * t897 + t722 * t803) * t696;
t593 = t653 * t656 * t970 + t654 * t657 * t964 + t655 * t658 * t958;
t592 = t752 * t773 + t754 * t772 + t756 * t771;
t591 = t746 * t773 + t748 * t772 + t750 * t771;
t590 = 0.2e1 * (t655 * t997 - t850 * t955) * t700 + 0.2e1 * (t654 * t999 - t851 * t956) * t698 + 0.2e1 * (t1001 * t653 - t852 * t957) * t696;
t1 = [t862 + t871 + t880, 0, 0, t716 * t879 + t717 * t870 + t718 * t861, 0.2e1 * t716 * t819 + 0.2e1 * t717 * t812 + 0.2e1 * t718 * t805, 0.2e1 * t746 * t797 + 0.2e1 * t748 * t796 + 0.2e1 * t750 * t795, 0.2e1 * t752 * t797 + 0.2e1 * t754 * t796 + 0.2e1 * t756 * t795, t647 * t970 + t648 * t964 + t649 * t958, 0, 0, t716 * t800 + t717 * t799 + t718 * t798 + (t618 * t766 - t992) * t1004 + (t616 * t763 - t994) * t1006 + (t614 * t760 - t996) * t1008, (t837 + (t604 + t902) * t699) * t943 + (t838 + (t603 + t904) * t697) * t945 + (t839 + (t602 + t906) * t695) * t947, 0.2e1 * (t649 * t766 + t718 * t853) * t700 + 0.2e1 * (t648 * t763 + t717 * t854) * t698 + 0.2e1 * (t647 * t760 + t716 * t855) * t696, t689 * t880 + t690 * t871 + t691 * t862 + (t1004 * t612 + t619 * t663) * t766 + (t1006 * t610 + t617 * t661) * t763 + (t1008 * t608 + t615 * t659) * t760, 1; t635, 0, 0, t632, t629, t591, t592, t593, 0, 0, (t1003 * t624 - t658 * t992) * t699 + (t1005 * t622 - t657 * t994) * t697 + (t1007 * t620 - t656 * t996) * t695 + t845, (-t724 * t837 + (t607 * t727 - t724 * t902) * t699) * t757 + (-t723 * t838 + (t606 * t726 - t723 * t904) * t697) * t755 + (-t722 * t839 + (t605 * t725 - t722 * t906) * t695) * t753, t590, (t1004 * t613 + t625 * t663) * t766 + (t1006 * t611 + t623 * t661) * t763 + (t1008 * t609 + t621 * t659) * t760 + t770, 0; t637, 0, 0, t634, t631, t597, t599, t600, 0, 0, (t1003 * t645 - t663 * t886) * t699 + (t1005 * t643 - t661 * t891) * t697 + (t1007 * t641 - t659 * t896) * t695 + t843, -t653 * t824 - t654 * t817 - t655 * t810 + (t628 * t943 - t663 * t847) * t699 + (t627 * t945 - t661 * t848) * t697 + (t626 * t947 - t659 * t849) * t695, t595, (t1004 * t640 + t646 * t663) * t766 + (t1006 * t639 + t644 * t661) * t763 + (t1008 * t638 + t642 * t659) * t760 + t769, 0; t635, 0, 0, t632, t629, t591, t592, t593, 0, 0, (t618 * t997 - t655 * t991) * t699 + (t616 * t999 - t654 * t993) * t697 + (t1001 * t614 - t653 * t995) * t695 + t845, (t727 * t834 + (-t604 * t724 + t727 * t901) * t699) * t757 + (t726 * t835 + (-t603 * t723 + t726 * t903) * t697) * t755 + (t725 * t836 + (-t602 * t722 + t725 * t905) * t695) * t753, t590, (t612 * t998 + t619 * t664) * t766 + (t1000 * t610 + t617 * t662) * t763 + (t1002 * t608 + t615 * t660) * t760 + t770, 0; t863 + t872 + t881, 0, 0, t713 * t879 + t714 * t870 + t715 * t861, 0.2e1 * t713 * t819 + 0.2e1 * t714 * t812 + 0.2e1 * t715 * t805, -0.2e1 * t746 * t794 - 0.2e1 * t748 * t793 - 0.2e1 * t750 * t792, -0.2e1 * t752 * t794 - 0.2e1 * t754 * t793 - 0.2e1 * t756 * t792, t650 * t970 + t651 * t964 + t652 * t958, 0, 0, t713 * t800 + t714 * t799 + t715 * t798 + (t624 * t766 - t991) * t998 + (t622 * t763 - t993) * t1000 + (t620 * t760 - t995) * t1002, (-t834 + (-t607 - t901) * t699) * t949 + (-t835 + (-t606 - t903) * t697) * t951 + (-t836 + (-t605 - t905) * t695) * t953, 0.2e1 * (t652 * t766 + t715 * t853) * t700 + 0.2e1 * (t651 * t763 + t714 * t854) * t698 + 0.2e1 * (t650 * t760 + t713 * t855) * t696, t689 * t881 + t690 * t872 + t691 * t863 + (t613 * t998 + t625 * t664) * t766 + (t1000 * t611 + t623 * t662) * t763 + (t1002 * t609 + t621 * t660) * t760, 1; t636, 0, 0, t633, t630, t596, t598, t601, 0, 0, (t645 * t997 - t664 * t886) * t699 + (t643 * t999 - t662 * t891) * t697 + (t1001 * t641 - t660 * t896) * t695 + t844, -t656 * t824 - t657 * t817 - t658 * t810 + (-t628 * t949 - t664 * t847) * t699 + (-t627 * t951 - t662 * t848) * t697 + (-t626 * t953 - t660 * t849) * t695, t594, (t640 * t998 + t646 * t664) * t766 + (t1000 * t639 + t644 * t662) * t763 + (t1002 * t638 + t642 * t660) * t760 + t846, 0; t637, 0, 0, t634, t631, t597, t599, t600, 0, 0, (t618 * t887 - t655 * t976) * t699 + (t616 * t892 - t654 * t977) * t697 + (t614 * t897 - t653 * t978) * t695 + t843, t725 * t776 + t726 * t775 + t727 * t774 + (-t604 * t751 + t727 * t825) * t699 + (-t603 * t749 + t726 * t826) * t697 + (-t602 * t747 + t725 * t827) * t695, t595, (t1024 * t619 + t612 * t890) * t766 + (t1023 * t617 + t610 * t895) * t763 + (t1022 * t615 + t608 * t900) * t760 + t769, 0; t636, 0, 0, t633, t630, t596, t598, t601, 0, 0, (t624 * t887 - t658 * t976) * t699 + (t622 * t892 - t657 * t977) * t697 + (t620 * t897 - t656 * t978) * t695 + t844, -t722 * t776 - t723 * t775 - t724 * t774 + (-t607 * t751 - t724 * t825) * t699 + (-t606 * t749 - t723 * t826) * t697 + (-t605 * t747 - t722 * t827) * t695, t594, (t1024 * t625 + t613 * t890) * t766 + (t1023 * t623 + t611 * t895) * t763 + (t1022 * t621 + t609 * t900) * t760 + t846, 0; t961 + t967 + t973, 0, 0, t731 * t973 + t733 * t967 + t735 * t961, 0.2e1 * t732 * t878 + 0.2e1 * t734 * t869 + 0.2e1 * t736 * t860, -0.2e1 * t829 * t926 - 0.2e1 * t831 * t934 - 0.2e1 * t833 * t942, -0.2e1 * t857 * t981 - 0.2e1 * t866 * t984 - 0.2e1 * t875 * t987, t958 * t988 + t964 * t989 + t970 * t990, 0, 0, (t736 * t913 + (t645 * t766 - t976) * t699 * t1024) * t756 + (t734 * t914 + (t643 * t763 - t977) * t697 * t1023) * t754 + (t732 * t915 + (t641 * t760 - t978) * t695 * t1022) * t752, (-t789 + (-t628 - t883) * t699) * t751 + (-t790 + (-t627 - t884) * t697) * t749 + (-t791 + (-t626 - t885) * t695) * t747, 0.2e1 * (t736 * t955 + t766 * t988) * t700 + 0.2e1 * (t734 * t956 + t763 * t989) * t698 + 0.2e1 * (t732 * t957 + t760 * t990) * t696, t689 * t973 + t690 * t967 + t691 * t961 + (t1024 * t646 + t640 * t890) * t766 + (t1023 * t644 + t639 * t895) * t763 + (t1022 * t642 + t638 * t900) * t760, 1;];
tau_reg  = t1;
