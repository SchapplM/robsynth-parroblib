% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR12V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [3x15]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:07
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P3RRPRR12V1G2A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G2A0_invdyn_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:05:53
% EndTime: 2020-08-06 19:06:08
% DurationCPUTime: 15.60s
% Computational Cost: add. (71811->663), mult. (123393->1196), div. (7551->12), fcn. (78816->18), ass. (0->495)
t245 = sin(qJ(1,3));
t231 = g(3) * t245;
t251 = cos(qJ(1,3));
t238 = legFrame(3,2);
t225 = sin(t238);
t220 = t225 * g(2);
t228 = cos(t238);
t534 = t228 * g(1);
t569 = -t534 + t220;
t589 = t569 * t251 + t231;
t247 = sin(qJ(1,2));
t232 = g(3) * t247;
t253 = cos(qJ(1,2));
t239 = legFrame(2,2);
t226 = sin(t239);
t221 = t226 * g(2);
t229 = cos(t239);
t533 = t229 * g(1);
t570 = -t533 + t221;
t588 = t570 * t253 + t232;
t249 = sin(qJ(1,1));
t233 = g(3) * t249;
t255 = cos(qJ(1,1));
t240 = legFrame(1,2);
t227 = sin(t240);
t222 = t227 * g(2);
t230 = cos(t240);
t532 = t230 * g(1);
t571 = -t532 + t222;
t587 = t571 * t255 + t233;
t537 = g(3) * t251;
t586 = -t569 * t245 + t537;
t536 = g(3) * t253;
t585 = -t570 * t247 + t536;
t535 = g(3) * t255;
t584 = -t571 * t249 + t535;
t257 = xDP(2);
t259 = pkin(1) + pkin(2);
t223 = t257 * t259;
t258 = xDP(1);
t224 = t258 * t259;
t256 = xDP(3);
t396 = t256 * t259;
t510 = qJ(3,1) * t258;
t511 = qJ(3,1) * t257;
t126 = (t249 * t224 - t511) * t230 + (-t249 * t223 - t510) * t227 + t255 * t396;
t248 = sin(qJ(2,1));
t406 = t248 * t255;
t538 = pkin(4) * t249;
t308 = qJ(3,1) * t406 - t538;
t183 = t256 * t308;
t529 = t255 * pkin(4);
t219 = t258 * t529;
t254 = cos(qJ(2,1));
t236 = t254 ^ 2;
t384 = t257 * t529;
t572 = -t249 * t511 + t224;
t575 = t249 * t510 + t223;
t102 = t126 * t236 + ((t575 * t248 + t219) * t230 + (t572 * t248 - t384) * t227 + t183) * t254 + qJ(3,1) * (t227 * t258 + t230 * t257);
t408 = t248 * t249;
t192 = qJ(3,1) * t408 + t529;
t403 = t249 * t259;
t405 = t248 * t259;
t428 = t227 * qJ(3,1);
t114 = (t230 * t403 - t428) * t236 + (t192 * t230 + t227 * t405) * t254 + t428;
t422 = t230 * qJ(3,1);
t117 = (-t227 * t403 - t422) * t236 + (-t192 * t227 + t230 * t405) * t254 + t422;
t398 = t254 * t259;
t168 = t255 * t398 + t308;
t207 = qJ(3,1) * t248 + t398;
t199 = 0.1e1 / t207;
t241 = xDDP(3);
t242 = xDDP(2);
t243 = xDDP(1);
t267 = 0.1e1 / qJ(3,1);
t437 = t199 * t248;
t108 = -t227 * t384 + t126 * t254 + t219 * t230 + t183 + (t572 * t227 + t575 * t230) * t248;
t268 = 0.1e1 / qJ(3,1) ^ 2;
t493 = t108 * t268;
t150 = (-t227 * t257 + t230 * t258) * t255 - t249 * t256;
t541 = pkin(4) * t150;
t141 = t437 * t541;
t434 = t199 * t267;
t346 = t102 * t434;
t90 = t259 * t346 + t141;
t583 = ((t168 * t241 * t254 + t114 * t243 + t117 * t242) * t267 - (t102 * t437 + t254 * t90) * t493) * t199;
t506 = qJ(3,2) * t258;
t507 = qJ(3,2) * t257;
t125 = (t247 * t224 - t507) * t229 + (-t247 * t223 - t506) * t226 + t253 * t396;
t246 = sin(qJ(2,2));
t412 = t246 * t253;
t539 = pkin(4) * t247;
t309 = qJ(3,2) * t412 - t539;
t182 = t256 * t309;
t530 = t253 * pkin(4);
t218 = t258 * t530;
t252 = cos(qJ(2,2));
t235 = t252 ^ 2;
t385 = t257 * t530;
t573 = -t247 * t507 + t224;
t576 = t247 * t506 + t223;
t101 = t125 * t235 + ((t576 * t246 + t218) * t229 + (t573 * t246 - t385) * t226 + t182) * t252 + qJ(3,2) * (t226 * t258 + t229 * t257);
t414 = t246 * t247;
t191 = qJ(3,2) * t414 + t530;
t409 = t247 * t259;
t411 = t246 * t259;
t430 = t226 * qJ(3,2);
t113 = (t229 * t409 - t430) * t235 + (t191 * t229 + t226 * t411) * t252 + t430;
t424 = t229 * qJ(3,2);
t116 = (-t226 * t409 - t424) * t235 + (-t191 * t226 + t229 * t411) * t252 + t424;
t400 = t252 * t259;
t167 = t253 * t400 + t309;
t206 = qJ(3,2) * t246 + t400;
t196 = 0.1e1 / t206;
t264 = 0.1e1 / qJ(3,2);
t442 = t196 * t246;
t107 = -t226 * t385 + t125 * t252 + t218 * t229 + t182 + (t573 * t226 + t576 * t229) * t246;
t265 = 0.1e1 / qJ(3,2) ^ 2;
t494 = t107 * t265;
t149 = (-t226 * t257 + t229 * t258) * t253 - t247 * t256;
t542 = pkin(4) * t149;
t140 = t442 * t542;
t439 = t196 * t264;
t348 = t101 * t439;
t89 = t259 * t348 + t140;
t582 = ((t167 * t241 * t252 + t113 * t243 + t116 * t242) * t264 - (t101 * t442 + t252 * t89) * t494) * t196;
t502 = qJ(3,3) * t258;
t503 = qJ(3,3) * t257;
t124 = (t245 * t224 - t503) * t228 + (-t245 * t223 - t502) * t225 + t251 * t396;
t244 = sin(qJ(2,3));
t418 = t244 * t251;
t540 = pkin(4) * t245;
t310 = qJ(3,3) * t418 - t540;
t181 = t256 * t310;
t531 = t251 * pkin(4);
t217 = t258 * t531;
t250 = cos(qJ(2,3));
t234 = t250 ^ 2;
t386 = t257 * t531;
t574 = -t245 * t503 + t224;
t577 = t245 * t502 + t223;
t100 = t124 * t234 + ((t577 * t244 + t217) * t228 + (t574 * t244 - t386) * t225 + t181) * t250 + qJ(3,3) * (t225 * t258 + t228 * t257);
t420 = t244 * t245;
t190 = qJ(3,3) * t420 + t531;
t415 = t245 * t259;
t417 = t244 * t259;
t432 = t225 * qJ(3,3);
t112 = (t228 * t415 - t432) * t234 + (t190 * t228 + t225 * t417) * t250 + t432;
t426 = t228 * qJ(3,3);
t115 = (-t225 * t415 - t426) * t234 + (-t190 * t225 + t228 * t417) * t250 + t426;
t402 = t250 * t259;
t166 = t251 * t402 + t310;
t205 = qJ(3,3) * t244 + t402;
t193 = 0.1e1 / t205;
t261 = 0.1e1 / qJ(3,3);
t447 = t193 * t244;
t106 = -t225 * t386 + t124 * t250 + t217 * t228 + t181 + (t574 * t225 + t577 * t228) * t244;
t262 = 0.1e1 / qJ(3,3) ^ 2;
t495 = t106 * t262;
t148 = (-t225 * t257 + t228 * t258) * t251 - t245 * t256;
t543 = pkin(4) * t148;
t139 = t447 * t543;
t444 = t193 * t261;
t350 = t100 * t444;
t88 = t259 * t350 + t139;
t581 = (t261 * (t166 * t241 * t250 + t112 * t243 + t115 * t242) - (t100 * t447 + t250 * t88) * t495) * t193;
t197 = 0.1e1 / t206 ^ 2;
t438 = t197 * t264;
t330 = t149 * t438;
t303 = t101 * t330;
t413 = t246 * t252;
t104 = t107 * t264;
t198 = t196 * t197;
t508 = qJ(3,2) * t252;
t288 = -t411 + t508;
t423 = t229 * t253;
t314 = t196 * t423;
t429 = t226 * t253;
t315 = t196 * t429;
t394 = t259 * t264;
t441 = t196 * t247;
t463 = t149 * t264;
t464 = t149 * t197;
t50 = t243 * t314 - t242 * t315 - t241 * t441 - (t104 * t246 + (-t542 + (-t246 * t394 + t252) * t101) * t196) * t464 - t198 * t288 * t101 * t463 - t246 * t107 * t330;
t548 = 0.2e1 * t235 - 0.1e1;
t37 = t548 * t303 + t50 * t413;
t580 = -0.2e1 * t37;
t194 = 0.1e1 / t205 ^ 2;
t443 = t194 * t261;
t333 = t148 * t443;
t304 = t100 * t333;
t419 = t244 * t250;
t103 = t106 * t261;
t195 = t193 * t194;
t504 = qJ(3,3) * t250;
t287 = -t417 + t504;
t425 = t228 * t251;
t316 = t193 * t425;
t431 = t225 * t251;
t317 = t193 * t431;
t395 = t259 * t261;
t446 = t193 * t245;
t466 = t148 * t261;
t467 = t148 * t194;
t49 = t243 * t316 - t242 * t317 - t241 * t446 - (t103 * t244 + (-t543 + (-t244 * t395 + t250) * t100) * t193) * t467 - t195 * t287 * t100 * t466 - t244 * t106 * t333;
t549 = 0.2e1 * t234 - 0.1e1;
t38 = t549 * t304 + t49 * t419;
t579 = -0.2e1 * t38;
t200 = 0.1e1 / t207 ^ 2;
t433 = t200 * t267;
t327 = t150 * t433;
t302 = t102 * t327;
t407 = t248 * t254;
t105 = t108 * t267;
t201 = t199 * t200;
t512 = qJ(3,1) * t254;
t289 = -t405 + t512;
t421 = t230 * t255;
t312 = t199 * t421;
t427 = t227 * t255;
t313 = t199 * t427;
t393 = t259 * t267;
t436 = t199 * t249;
t460 = t150 * t267;
t461 = t150 * t200;
t51 = t243 * t312 - t242 * t313 - t241 * t436 - (t105 * t248 + (-t541 + (-t248 * t393 + t254) * t102) * t199) * t461 - t201 * t289 * t102 * t460 - t248 * t108 * t327;
t547 = 0.2e1 * t236 - 0.1e1;
t39 = t547 * t302 + t51 * t407;
t578 = -0.2e1 * t39;
t151 = t586 * t244;
t184 = g(1) * t225 + g(2) * t228;
t133 = -t184 * t250 + t151;
t152 = t585 * t246;
t185 = g(1) * t226 + g(2) * t229;
t135 = -t185 * t252 + t152;
t153 = t584 * t248;
t186 = g(1) * t227 + g(2) * t230;
t137 = -t186 * t254 + t153;
t565 = 2 * pkin(1);
t564 = -0.2e1 * qJ(3,1);
t563 = -0.2e1 * qJ(3,2);
t562 = -0.2e1 * qJ(3,3);
t561 = 0.2e1 * t250;
t560 = 0.2e1 * t252;
t559 = 0.2e1 * t254;
t558 = -pkin(4) / 0.2e1;
t557 = pkin(1) * g(1);
t556 = pkin(1) * g(2);
t555 = pkin(1) * t49;
t554 = pkin(1) * t50;
t553 = pkin(1) * t51;
t260 = qJ(3,3) ^ 2;
t269 = pkin(4) ^ 2;
t468 = t148 * t193;
t335 = t234 * t468;
t445 = t193 * t250;
t501 = t100 * t261;
t92 = pkin(1) * t350;
t74 = t92 - t103;
t61 = pkin(2) * t350 + t74;
t525 = t244 * t61;
t375 = ((qJ(3,3) + t259) * (-qJ(3,3) + t259) * t335 + 0.2e1 * (t148 * t417 + t501 * t558) * qJ(3,3) * t445 + pkin(4) * t525 + (t260 + t269) * t468) * t466;
t500 = t100 * t262;
t383 = (-(t139 + t61) * t402 + (pkin(4) * t335 - t525) * qJ(3,3)) * t500;
t34 = (t250 * t375 - t383) * t194 + t581;
t552 = t34 * pkin(1);
t263 = qJ(3,2) ^ 2;
t465 = t149 * t196;
t332 = t235 * t465;
t440 = t196 * t252;
t499 = t101 * t264;
t94 = pkin(1) * t348;
t76 = t94 - t104;
t62 = pkin(2) * t348 + t76;
t524 = t246 * t62;
t372 = ((qJ(3,2) + t259) * (-qJ(3,2) + t259) * t332 + 0.2e1 * qJ(3,2) * (t149 * t411 + t499 * t558) * t440 + pkin(4) * t524 + (t263 + t269) * t465) * t463;
t498 = t101 * t265;
t382 = (-(t140 + t62) * t400 + (pkin(4) * t332 - t524) * qJ(3,2)) * t498;
t35 = (t252 * t372 - t382) * t197 + t582;
t551 = t35 * pkin(1);
t266 = qJ(3,1) ^ 2;
t462 = t150 * t199;
t329 = t236 * t462;
t435 = t199 * t254;
t497 = t102 * t267;
t96 = pkin(1) * t346;
t78 = t96 - t105;
t63 = pkin(2) * t346 + t78;
t523 = t248 * t63;
t369 = ((qJ(3,1) + t259) * (-qJ(3,1) + t259) * t329 + 0.2e1 * qJ(3,1) * (t150 * t405 + t497 * t558) * t435 + pkin(4) * t523 + (t266 + t269) * t462) * t460;
t496 = t102 * t268;
t381 = (-(t141 + t63) * t398 + (pkin(4) * t329 - t523) * qJ(3,1)) * t496;
t36 = (t254 * t369 - t381) * t200 + t583;
t550 = t36 * pkin(1);
t546 = pkin(1) * t245;
t545 = pkin(1) * t247;
t544 = pkin(1) * t249;
t528 = qJ(3,1) * t51;
t527 = qJ(3,2) * t50;
t526 = qJ(3,3) * t49;
t97 = t100 ^ 2;
t522 = t262 * t97;
t98 = t101 ^ 2;
t521 = t265 * t98;
t99 = t102 ^ 2;
t520 = t268 * t99;
t519 = t34 * qJ(3,3);
t518 = t35 * qJ(3,2);
t517 = t36 * qJ(3,1);
t145 = t148 ^ 2;
t474 = t145 * t194;
t142 = pkin(1) * t474;
t349 = t193 * t500;
t79 = 0.2e1 * t106 * t349;
t516 = t142 + t79;
t146 = t149 ^ 2;
t472 = t146 * t197;
t143 = pkin(1) * t472;
t347 = t196 * t498;
t80 = 0.2e1 * t107 * t347;
t515 = t143 + t80;
t147 = t150 ^ 2;
t470 = t147 * t200;
t144 = pkin(1) * t470;
t345 = t199 * t496;
t81 = 0.2e1 * t108 * t345;
t514 = t144 + t81;
t513 = qJ(3,1) * t249;
t509 = qJ(3,2) * t247;
t505 = qJ(3,3) * t245;
t492 = t112 * t261;
t491 = t113 * t264;
t490 = t114 * t267;
t489 = t115 * t261;
t488 = t116 * t264;
t487 = t117 * t267;
t163 = t205 * t245 + t531;
t127 = t163 * t228 - t225 * t287;
t486 = t127 * t261;
t128 = -t163 * t225 - t228 * t287;
t485 = t128 * t261;
t164 = t206 * t247 + t530;
t129 = t164 * t229 - t226 * t288;
t484 = t129 * t264;
t130 = -t164 * t226 - t229 * t288;
t483 = t130 * t264;
t165 = t207 * t249 + t529;
t131 = t165 * t230 - t227 * t289;
t482 = t131 * t267;
t132 = -t165 * t227 - t230 * t289;
t481 = t132 * t267;
t480 = t133 * t261;
t453 = t184 * t244;
t134 = t250 * t586 + t453;
t479 = t134 * t261;
t478 = t135 * t264;
t451 = t185 * t246;
t136 = t252 * t585 + t451;
t477 = t136 * t264;
t476 = t137 * t267;
t449 = t186 * t248;
t138 = t254 * t584 + t449;
t475 = t138 * t267;
t473 = t145 * t244;
t471 = t146 * t246;
t469 = t147 * t248;
t459 = t166 * t261;
t458 = t167 * t264;
t457 = t168 * t267;
t175 = t205 * t251 - t540;
t456 = t175 * t261;
t176 = t206 * t253 - t539;
t455 = t176 * t264;
t177 = t207 * t255 - t538;
t454 = t177 * t267;
t416 = t244 * t261;
t410 = t246 * t264;
t404 = t248 * t267;
t401 = t250 * t261;
t399 = t252 * t264;
t397 = t254 * t267;
t271 = pkin(1) ^ 2;
t389 = -t260 + t271;
t388 = -t263 + t271;
t387 = -t266 + t271;
t377 = (0.4e1 * t92 - 0.2e1 * t103) * t468;
t376 = t74 * t468;
t374 = (0.4e1 * t94 - 0.2e1 * t104) * t465;
t373 = t76 * t465;
t371 = (0.4e1 * t96 - 0.2e1 * t105) * t462;
t370 = t78 * t462;
t368 = t194 * t522;
t367 = t197 * t521;
t366 = t200 * t520;
t208 = -pkin(1) * t244 + t504;
t365 = t208 * t261 * t49;
t209 = -pkin(1) * t246 + t508;
t364 = t209 * t264 * t50;
t210 = -pkin(1) * t248 + t512;
t363 = t210 * t267 * t51;
t362 = t49 * t416;
t361 = t50 * t410;
t360 = t51 * t404;
t359 = t49 * t401;
t358 = t50 * t399;
t357 = t51 * t397;
t344 = t112 * t444;
t343 = t113 * t439;
t342 = t114 * t434;
t341 = t115 * t444;
t340 = t116 * t439;
t339 = t117 * t434;
t338 = t194 * t473;
t337 = t197 * t471;
t336 = t200 * t469;
t334 = t100 * t467;
t331 = t101 * t464;
t328 = t102 * t461;
t326 = t589 * t250 * t251;
t325 = t588 * t252 * t253;
t324 = t587 * t254 * t255;
t323 = t166 * t401;
t322 = t167 * t399;
t321 = t168 * t397;
t320 = t589 * t418;
t319 = t588 * t412;
t318 = t587 * t406;
t311 = -t271 + (-(2 * pkin(1)) - pkin(2)) * pkin(2);
t307 = t49 * t323;
t306 = t50 * t322;
t305 = t51 * t321;
t301 = t145 * t195 * t416;
t300 = t146 * t198 * t410;
t299 = t147 * t201 * t404;
t298 = t193 * t323;
t297 = t196 * t322;
t296 = t199 * t321;
t109 = t549 * t474;
t110 = t548 * t472;
t111 = t547 * t470;
t295 = -0.2e1 * t234 * t142;
t294 = -0.2e1 * t235 * t143;
t293 = -0.2e1 * t236 * t144;
t292 = t250 * t301;
t291 = t252 * t300;
t290 = t254 * t299;
t286 = -t193 * t375 - t243 * t486 - t242 * t485 - t241 * t456 + (t106 * t395 + ((-t260 + t311) * t501 + t287 * t543) * t193) * t349 + t88 * t495;
t285 = -t196 * t372 - t243 * t484 - t242 * t483 - t241 * t455 + (t107 * t394 + ((-t263 + t311) * t499 + t288 * t542) * t196) * t347 + t89 * t494;
t284 = -t199 * t369 - t243 * t482 - t242 * t481 - t241 * t454 + (t108 * t393 + ((-t266 + t311) * t497 + t289 * t541) * t199) * t345 + t90 * t493;
t283 = t286 + t552;
t282 = t285 + t551;
t281 = t284 + t550;
t84 = (t147 * t236 - t147 - t520) * t200;
t83 = (t146 * t235 - t146 - t521) * t197;
t82 = (t145 * t234 - t145 - t522) * t194;
t48 = 0.2e1 * t528;
t47 = 0.2e1 * t527;
t46 = 0.2e1 * t526;
t42 = (t51 * t248 + t302 * t559) * t248;
t41 = (t50 * t246 + t303 * t560) * t246;
t40 = (t49 * t244 + t304 * t561) * t244;
t33 = (0.4e1 * t328 + 0.2e1 * t553) * t236 + ((t48 - t371) * t248 + t587) * t254 - 0.2e1 * t328;
t32 = (0.4e1 * t331 + 0.2e1 * t554) * t235 + ((t47 - t374) * t246 + t588) * t252 - 0.2e1 * t331;
t31 = (0.4e1 * t334 + 0.2e1 * t555) * t234 + ((t46 - t377) * t244 + t589) * t250 - 0.2e1 * t334;
t30 = (t381 + (-t369 - t469) * t254) * t200 - t583;
t29 = (t382 + (-t372 - t471) * t252) * t197 - t582;
t28 = (t383 + (-t375 - t473) * t250) * t194 - t581;
t27 = -t248 * t366 + t254 * t36;
t26 = t36 * t248 + t254 * t366;
t25 = -t246 * t367 + t252 * t35;
t24 = t35 * t246 + t252 * t367;
t23 = -t244 * t368 + t250 * t34;
t22 = t34 * t244 + t250 * t368;
t21 = t293 + (t336 * t564 - t584) * t254 - t449 + 0.2e1 * t517 + t514;
t20 = t294 + (t337 * t563 - t585) * t252 - t451 + 0.2e1 * t518 + t515;
t19 = t295 + (t338 * t562 - t586) * t250 - t453 + 0.2e1 * t519 + t516;
t18 = (t371 - 0.2e1 * t528) * t236 - 0.2e1 * t370 + t48 + ((0.2e1 * t328 + t553) * t559 + t587) * t248;
t17 = (t374 - 0.2e1 * t527) * t235 - 0.2e1 * t373 + t47 + ((0.2e1 * t331 + t554) * t560 + t588) * t246;
t16 = (t377 - 0.2e1 * t526) * t234 - 0.2e1 * t376 + t46 + ((0.2e1 * t334 + t555) * t561 + t589) * t244;
t15 = (t336 * t565 - t186) * t254 + t153 + 0.2e1 * t550 - qJ(3,1) * t111 + t284;
t14 = (t337 * t565 - t185) * t252 + t152 + 0.2e1 * t551 - qJ(3,2) * t110 + t285;
t13 = (t338 * t565 - t184) * t250 + t151 + 0.2e1 * t552 - qJ(3,3) * t109 + t286;
t12 = (-t267 * t99 + (-pkin(1) * t407 + qJ(3,1) * t236 - qJ(3,1)) * t147) * t200 - t281 - t137;
t11 = (-t264 * t98 + (-pkin(1) * t413 + qJ(3,2) * t235 - qJ(3,2)) * t146) * t197 - t282 - t135;
t10 = (-t261 * t97 + (-pkin(1) * t419 + qJ(3,3) * t234 - qJ(3,3)) * t145) * t194 - t283 - t133;
t9 = (0.4e1 * (t96 - t105 / 0.2e1) * qJ(3,1) * t462 + t387 * t51) * t236 + (0.2e1 * (qJ(3,1) * t328 + (-t370 + t528) * pkin(1)) * t248 + t587 * pkin(1)) * t254 + (((t532 / 0.2e1 - t222 / 0.2e1) * t255 - t233 / 0.2e1) * t248 - t528 / 0.2e1 + t370) * t564;
t8 = (0.4e1 * (t94 - t104 / 0.2e1) * qJ(3,2) * t465 + t388 * t50) * t235 + (0.2e1 * (qJ(3,2) * t331 + (-t373 + t527) * pkin(1)) * t246 + t588 * pkin(1)) * t252 + (((t533 / 0.2e1 - t221 / 0.2e1) * t253 - t232 / 0.2e1) * t246 - t527 / 0.2e1 + t373) * t563;
t7 = (0.4e1 * (t92 - t103 / 0.2e1) * qJ(3,3) * t468 + t389 * t49) * t234 + (0.2e1 * (qJ(3,3) * t334 + (-t376 + t526) * pkin(1)) * t244 + t589 * pkin(1)) * t250 + (((t534 / 0.2e1 - t220 / 0.2e1) * t251 - t231 / 0.2e1) * t244 - t526 / 0.2e1 + t376) * t562;
t6 = qJ(3,1) * t293 + ((-g(1) * t513 - t556) * t230 + (g(2) * t513 - t557) * t227 - qJ(3,1) * t535 + t387 * t336) * t254 + ((g(1) * t544 - g(2) * qJ(3,1)) * t230 + (-g(1) * qJ(3,1) - g(2) * t544) * t227 + pkin(1) * t535) * t248 + t36 * t266 + t514 * qJ(3,1) + t281 * pkin(1);
t5 = qJ(3,2) * t294 + ((-g(1) * t509 - t556) * t229 + (g(2) * t509 - t557) * t226 - qJ(3,2) * t536 + t388 * t337) * t252 + ((g(1) * t545 - g(2) * qJ(3,2)) * t229 + (-g(1) * qJ(3,2) - g(2) * t545) * t226 + pkin(1) * t536) * t246 + t35 * t263 + t515 * qJ(3,2) + t282 * pkin(1);
t4 = qJ(3,3) * t295 + ((-g(1) * t505 - t556) * t228 + (g(2) * t505 - t557) * t225 - qJ(3,3) * t537 + t389 * t338) * t250 + ((g(1) * t546 - g(2) * qJ(3,3)) * t228 + (-g(1) * qJ(3,3) - g(2) * t546) * t225 + pkin(1) * t537) * t244 + t34 * t260 + t516 * qJ(3,3) + t283 * pkin(1);
t3 = (-pkin(1) * t366 + t517 + t81) * t254 + (-t99 * t433 - t281) * t248 - t584;
t2 = (-pkin(1) * t367 + t518 + t80) * t252 + (-t98 * t438 - t282) * t246 - t585;
t1 = (-pkin(1) * t368 + t519 + t79) * t250 + (-t97 * t443 - t283) * t244 - t586;
t43 = [t312 * t51 + t314 * t50 + t316 * t49, t312 * t587 + t314 * t588 + t316 * t589, t312 * t584 + t314 * t585 + t316 * t586, -t112 * t292 - t113 * t291 - t114 * t290 + t312 * t42 + t314 * t41 + t316 * t40, -t109 * t344 - t110 * t343 - t111 * t342 + 0.2e1 * t312 * t39 + 0.2e1 * t314 * t37 + 0.2e1 * t316 * t38, (t114 * t360 + t26 * t421) * t199 + (t113 * t361 + t24 * t423) * t196 + (t112 * t362 + t22 * t425) * t193, (t114 * t357 + t27 * t421) * t199 + (t113 * t358 + t25 * t423) * t196 + (t112 * t359 + t23 * t425) * t193, t34 * t344 + t342 * t36 + t343 * t35, (t114 * t476 + t230 * t324) * t199 + (t113 * t478 + t229 * t325) * t196 + (t112 * t480 + t228 * t326) * t193, (t114 * t475 - t230 * t318) * t199 + (t113 * t477 - t229 * t319) * t196 + (t112 * t479 - t228 * t320) * t193, t28 * t486 + t29 * t484 + t30 * t482 + (t15 * t490 + t33 * t421) * t199 + (t14 * t491 + t32 * t423) * t196 + (t13 * t492 + t31 * t425) * t193, t127 * t362 + t129 * t361 + t131 * t360 + (t114 * t363 + t3 * t421) * t199 + (t113 * t364 + t2 * t423) * t196 + (t1 * t425 + t112 * t365) * t193, t82 * t486 + t83 * t484 + t84 * t482 + (t18 * t421 + t21 * t490) * t199 + (t17 * t423 + t20 * t491) * t196 + (t16 * t425 + t19 * t492) * t193, t10 * t486 + t11 * t484 + t12 * t482 + (t421 * t9 + t490 * t6) * t199 + (t423 * t8 + t491 * t5) * t196 + (t4 * t492 + t425 * t7) * t193, t243 - g(1); -t313 * t51 - t315 * t50 - t317 * t49, -t313 * t587 - t315 * t588 - t317 * t589, -t313 * t584 - t315 * t585 - t317 * t586, -t115 * t292 - t116 * t291 - t117 * t290 - t313 * t42 - t315 * t41 - t317 * t40, -t109 * t341 - t110 * t340 - t111 * t339 + t313 * t578 + t315 * t580 + t317 * t579, (t117 * t360 - t26 * t427) * t199 + (t116 * t361 - t24 * t429) * t196 + (t115 * t362 - t22 * t431) * t193, (t117 * t357 - t27 * t427) * t199 + (t116 * t358 - t25 * t429) * t196 + (t115 * t359 - t23 * t431) * t193, t339 * t36 + t34 * t341 + t340 * t35, (t117 * t476 - t227 * t324) * t199 + (t116 * t478 - t226 * t325) * t196 + (t115 * t480 - t225 * t326) * t193, (t117 * t475 + t227 * t318) * t199 + (t116 * t477 + t226 * t319) * t196 + (t115 * t479 + t225 * t320) * t193, t28 * t485 + t29 * t483 + t30 * t481 + (t15 * t487 - t33 * t427) * t199 + (t14 * t488 - t32 * t429) * t196 + (t13 * t489 - t31 * t431) * t193, t128 * t362 + t130 * t361 + t132 * t360 + (t117 * t363 - t3 * t427) * t199 + (t116 * t364 - t2 * t429) * t196 + (-t1 * t431 + t115 * t365) * t193, t82 * t485 + t83 * t483 + t84 * t481 + (-t18 * t427 + t21 * t487) * t199 + (-t17 * t429 + t20 * t488) * t196 + (-t16 * t431 + t19 * t489) * t193, t10 * t485 + t11 * t483 + t12 * t481 + (-t427 * t9 + t487 * t6) * t199 + (-t429 * t8 + t488 * t5) * t196 + (t4 * t489 - t431 * t7) * t193, t242 - g(2); -t51 * t436 - t50 * t441 - t49 * t446, -t436 * t587 - t441 * t588 - t446 * t589, -t436 * t584 - t441 * t585 - t446 * t586, -t166 * t234 * t301 - t167 * t235 * t300 - t168 * t236 * t299 - t40 * t446 - t41 * t441 - t42 * t436, -t109 * t298 - t110 * t297 - t111 * t296 + t436 * t578 + t441 * t580 + t446 * t579, (t248 * t305 - t249 * t26) * t199 + (-t24 * t247 + t246 * t306) * t196 + (-t22 * t245 + t244 * t307) * t193, (t236 * t457 * t51 - t249 * t27) * t199 + (t235 * t458 * t50 - t247 * t25) * t196 + (t234 * t459 * t49 - t23 * t245) * t193, t296 * t36 + t297 * t35 + t298 * t34, (t137 * t457 - t249 * t587) * t435 + (t135 * t458 - t247 * t588) * t440 + (t133 * t459 - t245 * t589) * t445, (t138 * t321 + t408 * t587) * t199 + (t136 * t322 + t414 * t588) * t196 + (t134 * t323 + t420 * t589) * t193, t28 * t456 + t29 * t455 + t30 * t454 + (t15 * t321 - t249 * t33) * t199 + (t14 * t322 - t247 * t32) * t196 + (t13 * t323 - t245 * t31) * t193, t175 * t362 + t176 * t361 + t177 * t360 + (t210 * t305 - t249 * t3) * t199 + (-t2 * t247 + t209 * t306) * t196 + (-t1 * t245 + t208 * t307) * t193, t82 * t456 + t83 * t455 + t84 * t454 + (-t18 * t249 + t21 * t321) * t199 + (-t17 * t247 + t20 * t322) * t196 + (-t16 * t245 + t19 * t323) * t193, t10 * t456 + t11 * t455 + t12 * t454 + (-t249 * t9 + t321 * t6) * t199 + (-t247 * t8 + t322 * t5) * t196 + (-t245 * t7 + t323 * t4) * t193, t241 - g(3);];
tauX_reg  = t43;
