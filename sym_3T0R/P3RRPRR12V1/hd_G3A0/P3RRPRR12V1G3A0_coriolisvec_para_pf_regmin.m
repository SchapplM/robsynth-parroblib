% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR12V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:11
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V1G3A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G3A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:10:36
% EndTime: 2020-08-06 19:10:48
% DurationCPUTime: 12.39s
% Computational Cost: add. (56922->537), mult. (98859->1067), div. (5508->12), fcn. (61458->18), ass. (0->478)
t1192 = sin(qJ(2,3));
t1170 = t1192 * qJ(3,3);
t1198 = cos(qJ(2,3));
t1207 = pkin(1) + pkin(2);
t1401 = t1198 * t1207;
t1147 = t1170 + t1401;
t1199 = cos(qJ(1,3));
t1193 = sin(qJ(1,3));
t1520 = pkin(4) * t1193;
t1556 = t1147 * t1199 - t1520;
t1194 = sin(qJ(2,2));
t1171 = t1194 * qJ(3,2);
t1200 = cos(qJ(2,2));
t1398 = t1200 * t1207;
t1148 = t1171 + t1398;
t1201 = cos(qJ(1,2));
t1195 = sin(qJ(1,2));
t1519 = pkin(4) * t1195;
t1555 = t1148 * t1201 - t1519;
t1196 = sin(qJ(2,1));
t1172 = t1196 * qJ(3,1);
t1202 = cos(qJ(2,1));
t1395 = t1202 * t1207;
t1149 = t1172 + t1395;
t1203 = cos(qJ(1,1));
t1197 = sin(qJ(1,1));
t1518 = pkin(4) * t1197;
t1554 = t1149 * t1203 - t1518;
t1189 = legFrame(3,2);
t1173 = sin(t1189);
t1553 = 0.2e1 * t1173;
t1190 = legFrame(2,2);
t1174 = sin(t1190);
t1552 = 0.2e1 * t1174;
t1191 = legFrame(1,2);
t1175 = sin(t1191);
t1551 = 0.2e1 * t1175;
t1176 = cos(t1189);
t1550 = -0.2e1 * t1176;
t1177 = cos(t1190);
t1549 = -0.2e1 * t1177;
t1178 = cos(t1191);
t1548 = -0.2e1 * t1178;
t1205 = xDP(2);
t1165 = t1205 * t1207;
t1206 = xDP(1);
t1166 = t1206 * t1207;
t1204 = xDP(3);
t1389 = t1204 * t1207;
t1513 = qJ(3,1) * t1206;
t1514 = qJ(3,1) * t1205;
t1098 = (t1203 * t1166 - t1514) * t1178 + (-t1203 * t1165 - t1513) * t1175 - t1197 * t1389;
t1517 = pkin(4) * t1205;
t1164 = t1197 * t1517;
t1187 = t1202 ^ 2;
t1516 = pkin(4) * t1206;
t1365 = t1197 * t1516;
t1181 = t1203 * pkin(4);
t1405 = t1196 * t1197;
t1133 = qJ(3,1) * t1405 + t1181;
t1390 = t1204 * t1133;
t1536 = -t1203 * t1514 + t1166;
t1539 = t1203 * t1513 + t1165;
t1080 = t1098 * t1187 + ((t1539 * t1196 - t1365) * t1178 + (t1536 * t1196 + t1164) * t1175 - t1390) * t1202 + qJ(3,1) * (t1175 * t1206 + t1178 * t1205);
t1141 = 0.1e1 / t1149;
t1476 = t1080 * t1141;
t1547 = 0.2e1 * t1476;
t1510 = qJ(3,2) * t1206;
t1511 = qJ(3,2) * t1205;
t1097 = (t1201 * t1166 - t1511) * t1177 + (-t1201 * t1165 - t1510) * t1174 - t1195 * t1389;
t1163 = t1195 * t1517;
t1186 = t1200 ^ 2;
t1366 = t1195 * t1516;
t1180 = t1201 * pkin(4);
t1409 = t1194 * t1195;
t1131 = qJ(3,2) * t1409 + t1180;
t1391 = t1204 * t1131;
t1537 = -t1201 * t1511 + t1166;
t1540 = t1201 * t1510 + t1165;
t1079 = t1097 * t1186 + ((t1540 * t1194 - t1366) * t1177 + (t1537 * t1194 + t1163) * t1174 - t1391) * t1200 + qJ(3,2) * (t1174 * t1206 + t1177 * t1205);
t1138 = 0.1e1 / t1148;
t1479 = t1079 * t1138;
t1546 = 0.2e1 * t1479;
t1507 = qJ(3,3) * t1206;
t1508 = qJ(3,3) * t1205;
t1096 = (t1199 * t1166 - t1508) * t1176 + (-t1199 * t1165 - t1507) * t1173 - t1193 * t1389;
t1162 = t1193 * t1517;
t1185 = t1198 ^ 2;
t1367 = t1193 * t1516;
t1179 = t1199 * pkin(4);
t1413 = t1192 * t1193;
t1129 = qJ(3,3) * t1413 + t1179;
t1392 = t1204 * t1129;
t1538 = -t1199 * t1508 + t1166;
t1541 = t1199 * t1507 + t1165;
t1078 = t1096 * t1185 + ((t1541 * t1192 - t1367) * t1176 + (t1538 * t1192 + t1162) * t1173 - t1392) * t1198 + qJ(3,3) * (t1173 * t1206 + t1176 * t1205);
t1135 = 0.1e1 / t1147;
t1482 = t1078 * t1135;
t1545 = 0.2e1 * t1482;
t1086 = -t1178 * t1365 + t1098 * t1202 - t1390 + t1164 * t1175 + (t1536 * t1175 + t1539 * t1178) * t1196;
t1215 = 0.1e1 / qJ(3,1);
t1083 = t1086 * t1215;
t1402 = t1196 * t1207;
t1515 = qJ(3,1) * t1202;
t1264 = -t1402 + t1515;
t1116 = (t1175 * t1205 - t1178 * t1206) * t1197 - t1203 * t1204;
t1142 = 0.1e1 / t1149 ^ 2;
t1143 = t1141 * t1142;
t1423 = t1143 * t1215;
t1277 = t1080 * t1116 * t1423;
t1450 = t1116 * t1215;
t1329 = t1142 * t1450;
t1386 = t1207 * t1215;
t1452 = t1116 * t1142;
t1521 = pkin(4) * t1116;
t1026 = -(t1083 * t1196 + (-t1521 + (-t1196 * t1386 + t1202) * t1080) * t1141) * t1452 - t1264 * t1277 - t1196 * t1086 * t1329;
t1169 = 0.2e1 * t1187 - 0.1e1;
t1394 = t1202 * t1215;
t1314 = t1196 * t1394;
t1535 = -2 * pkin(1);
t1035 = t1086 * t1314 + (t1314 * t1535 + t1169) * t1476;
t1158 = pkin(1) * t1202 + t1172;
t1426 = t1141 * t1202;
t1544 = 0.2e1 * (t1026 * t1158 * t1426 + t1035 * t1452) * t1197;
t1085 = -t1177 * t1366 + t1097 * t1200 - t1391 + t1163 * t1174 + (t1537 * t1174 + t1540 * t1177) * t1194;
t1212 = 0.1e1 / qJ(3,2);
t1082 = t1085 * t1212;
t1406 = t1194 * t1207;
t1512 = qJ(3,2) * t1200;
t1263 = -t1406 + t1512;
t1115 = (t1174 * t1205 - t1177 * t1206) * t1195 - t1201 * t1204;
t1139 = 0.1e1 / t1148 ^ 2;
t1140 = t1138 * t1139;
t1429 = t1140 * t1212;
t1278 = t1079 * t1115 * t1429;
t1454 = t1115 * t1212;
t1331 = t1139 * t1454;
t1387 = t1207 * t1212;
t1456 = t1115 * t1139;
t1522 = pkin(4) * t1115;
t1025 = -(t1082 * t1194 + (-t1522 + (-t1194 * t1387 + t1200) * t1079) * t1138) * t1456 - t1263 * t1278 - t1194 * t1085 * t1331;
t1168 = 0.2e1 * t1186 - 0.1e1;
t1397 = t1200 * t1212;
t1315 = t1194 * t1397;
t1034 = t1085 * t1315 + (t1315 * t1535 + t1168) * t1479;
t1156 = pkin(1) * t1200 + t1171;
t1432 = t1138 * t1200;
t1543 = 0.2e1 * (t1025 * t1156 * t1432 + t1034 * t1456) * t1195;
t1084 = -t1176 * t1367 + t1096 * t1198 - t1392 + t1162 * t1173 + (t1538 * t1173 + t1541 * t1176) * t1192;
t1209 = 0.1e1 / qJ(3,3);
t1081 = t1084 * t1209;
t1410 = t1192 * t1207;
t1509 = qJ(3,3) * t1198;
t1262 = -t1410 + t1509;
t1114 = (t1173 * t1205 - t1176 * t1206) * t1193 - t1199 * t1204;
t1136 = 0.1e1 / t1147 ^ 2;
t1137 = t1135 * t1136;
t1435 = t1137 * t1209;
t1279 = t1078 * t1114 * t1435;
t1458 = t1114 * t1209;
t1333 = t1136 * t1458;
t1388 = t1207 * t1209;
t1460 = t1114 * t1136;
t1523 = pkin(4) * t1114;
t1024 = -(t1081 * t1192 + (-t1523 + (-t1192 * t1388 + t1198) * t1078) * t1135) * t1460 - t1262 * t1279 - t1192 * t1084 * t1333;
t1167 = 0.2e1 * t1185 - 0.1e1;
t1400 = t1198 * t1209;
t1316 = t1192 * t1400;
t1033 = t1084 * t1316 + (t1316 * t1535 + t1167) * t1482;
t1154 = pkin(1) * t1198 + t1170;
t1438 = t1135 * t1198;
t1542 = 0.2e1 * (t1024 * t1154 * t1438 + t1033 * t1460) * t1193;
t1208 = qJ(3,3) ^ 2;
t1217 = pkin(4) ^ 2;
t1461 = t1114 * t1135;
t1334 = t1185 * t1461;
t1481 = t1078 * t1209;
t1436 = t1135 * t1209;
t1339 = t1078 * t1436;
t1070 = pkin(1) * t1339;
t1051 = t1070 - t1081;
t1042 = pkin(2) * t1339 + t1051;
t1491 = t1042 * t1192;
t1527 = -pkin(4) / 0.2e1;
t1027 = (qJ(3,3) + t1207) * (-qJ(3,3) + t1207) * t1334 + 0.2e1 * (t1114 * t1410 + t1481 * t1527) * qJ(3,3) * t1438 + pkin(4) * t1491 + (t1208 + t1217) * t1461;
t1439 = t1135 * t1192;
t1099 = t1439 * t1523;
t1063 = t1207 * t1339 + t1099;
t1219 = pkin(1) ^ 2;
t1313 = -t1219 + (t1535 - pkin(2)) * pkin(2);
t1210 = 0.1e1 / qJ(3,3) ^ 2;
t1473 = t1084 * t1210;
t1480 = t1078 * t1210;
t1228 = (t1027 * t1458 - (t1084 * t1388 + ((-t1208 + t1313) * t1481 + t1262 * t1523) * t1135) * t1480) * t1135 - t1063 * t1473;
t1211 = qJ(3,2) ^ 2;
t1457 = t1115 * t1138;
t1332 = t1186 * t1457;
t1478 = t1079 * t1212;
t1430 = t1138 * t1212;
t1337 = t1079 * t1430;
t1072 = pkin(1) * t1337;
t1052 = t1072 - t1082;
t1043 = pkin(2) * t1337 + t1052;
t1490 = t1043 * t1194;
t1028 = (qJ(3,2) + t1207) * (-qJ(3,2) + t1207) * t1332 + 0.2e1 * (t1115 * t1406 + t1478 * t1527) * qJ(3,2) * t1432 + pkin(4) * t1490 + (t1211 + t1217) * t1457;
t1433 = t1138 * t1194;
t1100 = t1433 * t1522;
t1064 = t1207 * t1337 + t1100;
t1213 = 0.1e1 / qJ(3,2) ^ 2;
t1472 = t1085 * t1213;
t1477 = t1079 * t1213;
t1227 = (t1028 * t1454 - (t1085 * t1387 + ((-t1211 + t1313) * t1478 + t1263 * t1522) * t1138) * t1477) * t1138 - t1064 * t1472;
t1214 = qJ(3,1) ^ 2;
t1453 = t1116 * t1141;
t1330 = t1187 * t1453;
t1475 = t1080 * t1215;
t1424 = t1141 * t1215;
t1335 = t1080 * t1424;
t1074 = pkin(1) * t1335;
t1053 = t1074 - t1083;
t1044 = pkin(2) * t1335 + t1053;
t1489 = t1044 * t1196;
t1029 = (qJ(3,1) + t1207) * (-qJ(3,1) + t1207) * t1330 + 0.2e1 * (t1116 * t1402 + t1475 * t1527) * qJ(3,1) * t1426 + pkin(4) * t1489 + (t1214 + t1217) * t1453;
t1427 = t1141 * t1196;
t1101 = t1427 * t1521;
t1065 = t1207 * t1335 + t1101;
t1216 = 0.1e1 / qJ(3,1) ^ 2;
t1471 = t1086 * t1216;
t1474 = t1080 * t1216;
t1226 = (t1029 * t1450 - (t1086 * t1386 + ((-t1214 + t1313) * t1475 + t1264 * t1521) * t1141) * t1474) * t1141 - t1065 * t1471;
t1534 = 2 * pkin(1);
t1533 = -0.2e1 * t1185;
t1532 = -0.2e1 * t1186;
t1531 = -0.2e1 * t1187;
t1530 = -0.2e1 * t1199;
t1529 = -0.2e1 * t1201;
t1528 = -0.2e1 * t1203;
t1066 = t1078 * t1439;
t1018 = t1198 * t1027 * t1333 - (-(t1099 + t1042) * t1401 + (pkin(4) * t1334 - t1491) * qJ(3,3)) * t1136 * t1480 - (t1063 * t1198 + t1066) * t1135 * t1473;
t1526 = pkin(1) * t1018;
t1067 = t1079 * t1433;
t1019 = t1200 * t1028 * t1331 - (-(t1100 + t1043) * t1398 + (pkin(4) * t1332 - t1490) * qJ(3,2)) * t1139 * t1477 - (t1064 * t1200 + t1067) * t1138 * t1472;
t1525 = pkin(1) * t1019;
t1068 = t1080 * t1427;
t1020 = t1202 * t1029 * t1329 - (-(t1101 + t1044) * t1395 + (pkin(4) * t1330 - t1489) * qJ(3,1)) * t1142 * t1474 - (t1065 * t1202 + t1068) * t1141 * t1471;
t1524 = pkin(1) * t1020;
t1506 = t1173 * qJ(3,3);
t1505 = t1174 * qJ(3,2);
t1504 = t1175 * qJ(3,1);
t1503 = t1176 * qJ(3,3);
t1502 = t1177 * qJ(3,2);
t1501 = t1178 * qJ(3,1);
t1500 = (-t1228 + 0.2e1 * t1526) * t1135;
t1499 = (-t1227 + 0.2e1 * t1525) * t1138;
t1498 = (-t1226 + 0.2e1 * t1524) * t1141;
t1497 = t1018 * t1199;
t1496 = t1019 * t1201;
t1495 = t1020 * t1203;
t1494 = t1024 * t1135;
t1493 = t1025 * t1138;
t1492 = t1026 * t1141;
t1111 = t1114 ^ 2;
t1108 = t1111 * t1136;
t1464 = t1111 * t1185;
t1485 = t1078 ^ 2 * t1210;
t1057 = -t1108 + (t1464 - t1485) * t1136;
t1488 = t1057 * t1209;
t1112 = t1115 ^ 2;
t1109 = t1112 * t1139;
t1463 = t1112 * t1186;
t1484 = t1079 ^ 2 * t1213;
t1058 = -t1109 + (t1463 - t1484) * t1139;
t1487 = t1058 * t1212;
t1113 = t1116 ^ 2;
t1110 = t1113 * t1142;
t1462 = t1113 * t1187;
t1483 = t1080 ^ 2 * t1216;
t1059 = -t1110 + (t1462 - t1483) * t1142;
t1486 = t1059 * t1215;
t1411 = t1192 * t1199;
t1130 = qJ(3,3) * t1411 - t1520;
t1399 = t1199 * t1207;
t1090 = (t1176 * t1399 - t1506) * t1185 + (t1130 * t1176 + t1173 * t1410) * t1198 + t1506;
t1470 = t1090 * t1209;
t1407 = t1194 * t1201;
t1132 = qJ(3,2) * t1407 - t1519;
t1396 = t1201 * t1207;
t1091 = (t1177 * t1396 - t1505) * t1186 + (t1132 * t1177 + t1174 * t1406) * t1200 + t1505;
t1469 = t1091 * t1212;
t1403 = t1196 * t1203;
t1134 = qJ(3,1) * t1403 - t1518;
t1393 = t1203 * t1207;
t1092 = (t1178 * t1393 - t1504) * t1187 + (t1134 * t1178 + t1175 * t1402) * t1202 + t1504;
t1468 = t1092 * t1215;
t1093 = (-t1173 * t1399 - t1503) * t1185 + (-t1130 * t1173 + t1176 * t1410) * t1198 + t1503;
t1467 = t1093 * t1209;
t1094 = (-t1174 * t1396 - t1502) * t1186 + (-t1132 * t1174 + t1177 * t1406) * t1200 + t1502;
t1466 = t1094 * t1212;
t1095 = (-t1175 * t1393 - t1501) * t1187 + (-t1134 * t1175 + t1178 * t1402) * t1202 + t1501;
t1465 = t1095 * t1215;
t1459 = t1114 * t1193;
t1455 = t1115 * t1195;
t1451 = t1116 * t1197;
t1120 = -t1147 * t1193 - t1179;
t1449 = t1120 * t1192;
t1448 = t1120 * t1209;
t1121 = -t1148 * t1195 - t1180;
t1447 = t1121 * t1194;
t1446 = t1121 * t1212;
t1122 = -t1149 * t1197 - t1181;
t1445 = t1122 * t1196;
t1444 = t1122 * t1215;
t1412 = t1192 * t1198;
t1312 = t1412 * t1534;
t1371 = qJ(3,3) * t1533;
t1443 = (qJ(3,3) + t1312 + t1371) * t1137;
t1408 = t1194 * t1200;
t1311 = t1408 * t1534;
t1372 = qJ(3,2) * t1532;
t1442 = (qJ(3,2) + t1311 + t1372) * t1140;
t1404 = t1196 * t1202;
t1310 = t1404 * t1534;
t1373 = qJ(3,1) * t1531;
t1441 = (qJ(3,1) + t1310 + t1373) * t1143;
t1153 = -pkin(1) * t1192 + t1509;
t1440 = t1135 * t1153;
t1437 = t1135 * t1199;
t1155 = -pkin(1) * t1194 + t1512;
t1434 = t1138 * t1155;
t1431 = t1138 * t1201;
t1157 = -pkin(1) * t1196 + t1515;
t1428 = t1141 * t1157;
t1425 = t1141 * t1203;
t1422 = t1173 * t1193;
t1421 = t1174 * t1195;
t1420 = t1175 * t1197;
t1419 = t1176 * t1193;
t1418 = t1177 * t1195;
t1417 = t1178 * t1197;
t1416 = t1185 * t1209;
t1415 = t1186 * t1212;
t1414 = t1187 * t1215;
t1303 = t1084 * t1545;
t1379 = -t1208 + t1219;
t1385 = (t1208 + t1219) * t1018 - pkin(1) * t1228 + t1209 * t1303 + (-t1167 * qJ(3,3) * pkin(1) + t1379 * t1412) * t1108;
t1302 = t1085 * t1546;
t1378 = -t1211 + t1219;
t1384 = (t1211 + t1219) * t1019 - pkin(1) * t1227 + t1212 * t1302 + (-t1168 * qJ(3,2) * pkin(1) + t1378 * t1408) * t1109;
t1301 = t1086 * t1547;
t1377 = -t1214 + t1219;
t1383 = (t1214 + t1219) * t1020 - pkin(1) * t1226 + t1215 * t1301 + (-t1169 * qJ(3,1) * pkin(1) + t1377 * t1404) * t1110;
t1013 = t1228 - t1526;
t1276 = t1412 * t1108;
t1382 = -pkin(1) * t1276 + t1057 * qJ(3,3) + t1013;
t1015 = t1227 - t1525;
t1275 = t1408 * t1109;
t1381 = -pkin(1) * t1275 + t1058 * qJ(3,2) + t1015;
t1017 = t1226 - t1524;
t1274 = t1404 * t1110;
t1380 = -pkin(1) * t1274 + t1059 * qJ(3,1) + t1017;
t1370 = t1114 * t1530;
t1369 = t1115 * t1529;
t1368 = t1116 * t1528;
t1358 = t1018 * t1436;
t1357 = t1019 * t1430;
t1356 = t1020 * t1424;
t1355 = t1024 * t1437;
t1354 = t1024 * t1413;
t1353 = t1025 * t1431;
t1352 = t1025 * t1409;
t1351 = t1026 * t1425;
t1350 = t1026 * t1405;
t1349 = (t1066 + (t1070 - 0.2e1 * t1081) * t1198) * t1078 * t1136;
t1348 = (t1067 + (t1072 - 0.2e1 * t1082) * t1200) * t1079 * t1139;
t1347 = (t1068 + (t1074 - 0.2e1 * t1083) * t1202) * t1080 * t1142;
t1343 = t1137 * t1485;
t1342 = t1140 * t1484;
t1341 = t1143 * t1483;
t1340 = t1078 * t1459;
t1338 = t1079 * t1455;
t1336 = t1080 * t1451;
t1117 = t1193 * t1401 + t1129;
t1328 = t1117 * t1438;
t1327 = t1117 * t1400;
t1118 = t1195 * t1398 + t1131;
t1326 = t1118 * t1432;
t1325 = t1118 * t1397;
t1119 = t1197 * t1395 + t1133;
t1324 = t1119 * t1426;
t1323 = t1119 * t1394;
t1322 = t1135 * t1422;
t1321 = t1135 * t1419;
t1320 = t1138 * t1421;
t1319 = t1138 * t1418;
t1318 = t1141 * t1420;
t1317 = t1141 * t1417;
t1309 = t1385 * t1135;
t1308 = t1384 * t1138;
t1307 = t1383 * t1141;
t1306 = -0.2e1 * t1024 * t1411;
t1305 = -0.2e1 * t1025 * t1407;
t1304 = -0.2e1 * t1026 * t1403;
t1300 = t1136 * t1370;
t1299 = t1139 * t1369;
t1298 = t1142 * t1368;
t1297 = (t1210 * t1303 + (pkin(1) * t1533 - 0.2e1 * qJ(3,3) * t1412 + pkin(1)) * t1108) * t1209 + 0.2e1 * t1018;
t1296 = (t1213 * t1302 + (pkin(1) * t1532 - 0.2e1 * qJ(3,2) * t1408 + pkin(1)) * t1109) * t1212 + 0.2e1 * t1019;
t1295 = (t1216 * t1301 + (pkin(1) * t1531 - 0.2e1 * qJ(3,1) * t1404 + pkin(1)) * t1110) * t1215 + 0.2e1 * t1020;
t1182 = t1192 ^ 2;
t1294 = t1182 * t1193 * t1494;
t1183 = t1194 ^ 2;
t1293 = t1183 * t1195 * t1493;
t1184 = t1196 ^ 2;
t1292 = t1184 * t1197 * t1492;
t1030 = -t1084 * t1416 + (pkin(1) * t1416 + t1412) * t1545 - t1051;
t1291 = t1030 * t1136 * t1459;
t1031 = -t1085 * t1415 + (pkin(1) * t1415 + t1408) * t1546 - t1052;
t1290 = t1031 * t1139 * t1455;
t1032 = -t1086 * t1414 + (pkin(1) * t1414 + t1404) * t1547 - t1053;
t1289 = t1032 * t1142 * t1451;
t1288 = t1193 * t1349;
t1287 = t1195 * t1348;
t1286 = t1197 * t1347;
t1285 = t1193 * t1343;
t1284 = t1199 * t1343;
t1283 = t1195 * t1342;
t1282 = t1201 * t1342;
t1281 = t1197 * t1341;
t1280 = t1203 * t1341;
t1273 = t1137 * t1316;
t1272 = t1140 * t1315;
t1271 = t1143 * t1314;
t1270 = t1354 * t1553;
t1269 = t1354 * t1550;
t1268 = t1352 * t1552;
t1267 = t1352 * t1549;
t1266 = t1350 * t1551;
t1265 = t1350 * t1548;
t1261 = t1192 * t1285;
t1260 = t1198 * t1285;
t1259 = t1194 * t1283;
t1258 = t1200 * t1283;
t1257 = t1196 * t1281;
t1256 = t1202 * t1281;
t1255 = t1167 * t1279;
t1254 = t1168 * t1278;
t1253 = t1169 * t1277;
t1252 = -t1018 - t1276;
t1251 = -t1019 - t1275;
t1250 = -t1020 - t1274;
t1249 = t1193 * t1255;
t1248 = t1195 * t1254;
t1247 = t1197 * t1253;
t1246 = t1111 * t1443 + t1500;
t1245 = t1112 * t1442 + t1499;
t1244 = t1113 * t1441 + t1498;
t1243 = 0.2e1 * ((t1070 - t1081 / 0.2e1) * t1371 + (pkin(1) * t1051 - qJ(3,3) * t1482) * t1412 + qJ(3,3) * t1051) * t1460 - (qJ(3,3) * t1312 + t1379 * t1185 + t1208) * t1494;
t1242 = 0.2e1 * ((t1072 - t1082 / 0.2e1) * t1372 + (pkin(1) * t1052 - qJ(3,2) * t1479) * t1408 + qJ(3,2) * t1052) * t1456 - (qJ(3,2) * t1311 + t1378 * t1186 + t1211) * t1493;
t1241 = 0.2e1 * ((t1074 - t1083 / 0.2e1) * t1373 + (pkin(1) * t1053 - qJ(3,1) * t1476) * t1404 + qJ(3,1) * t1053) * t1452 - (qJ(3,1) * t1310 + t1377 * t1187 + t1214) * t1492;
t1234 = t1135 * (-t1018 * t1419 + t1024 * t1470);
t1233 = t1135 * (t1018 * t1422 + t1024 * t1467);
t1232 = t1138 * (-t1019 * t1418 + t1025 * t1469);
t1231 = t1138 * (t1019 * t1421 + t1025 * t1466);
t1230 = t1141 * (-t1020 * t1417 + t1026 * t1468);
t1229 = t1141 * (t1020 * t1420 + t1026 * t1465);
t1107 = -t1554 * t1175 - t1264 * t1178;
t1106 = -t1555 * t1174 - t1263 * t1177;
t1105 = -t1556 * t1173 - t1262 * t1176;
t1104 = -t1264 * t1175 + t1554 * t1178;
t1103 = -t1263 * t1174 + t1555 * t1177;
t1102 = -t1262 * t1173 + t1556 * t1176;
t1089 = -0.2e1 * t1142 * t1462 + t1110;
t1088 = -0.2e1 * t1139 * t1463 + t1109;
t1087 = -0.2e1 * t1136 * t1464 + t1108;
t1008 = t1017 * t1196 + t1020 * t1515;
t1007 = t1015 * t1194 + t1019 * t1512;
t1006 = t1013 * t1192 + t1018 * t1509;
t1 = [-t1024 * t1321 - t1025 * t1319 - t1026 * t1317, 0, 0, -t1176 * t1294 - t1177 * t1293 - t1178 * t1292 + (-t1092 * t1113 + t1336 * t1548) * t1271 + (-t1091 * t1112 + t1338 * t1549) * t1272 + (-t1090 * t1111 + t1340 * t1550) * t1273, t1249 * t1550 + t1248 * t1549 + t1247 * t1548 + (t1089 * t1468 + t1202 * t1265) * t1141 + (t1088 * t1469 + t1200 * t1267) * t1138 + (t1087 * t1470 + t1198 * t1269) * t1135, -t1176 * t1260 - t1177 * t1258 - t1178 * t1256 + t1192 * t1234 + t1194 * t1232 + t1196 * t1230, t1176 * t1261 + t1177 * t1259 + t1178 * t1257 + t1198 * t1234 + t1200 * t1232 + t1202 * t1230, t1090 * t1358 + t1091 * t1357 + t1092 * t1356, 0, 0, -t1178 * t1544 - t1177 * t1543 - t1176 * t1542 + (t1092 * t1244 + t1104 * t1250) * t1215 + (t1091 * t1245 + t1103 * t1251) * t1212 + (t1090 * t1246 + t1102 * t1252) * t1209, -t1006 * t1321 - t1007 * t1319 - t1008 * t1317 + (t1178 * t1286 + (t1092 * t1428 + t1104 * t1196) * t1026) * t1215 + (t1177 * t1287 + (t1091 * t1434 + t1103 * t1194) * t1025) * t1212 + (t1176 * t1288 + (t1090 * t1440 + t1102 * t1192) * t1024) * t1209, t1291 * t1550 + t1290 * t1549 + t1289 * t1548 + t1102 * t1488 + t1103 * t1487 + t1104 * t1486 + (t1092 * t1295 + t1158 * t1265) * t1141 + (t1091 * t1296 + t1156 * t1267) * t1138 + (t1090 * t1297 + t1154 * t1269) * t1135, t1241 * t1417 + t1242 * t1418 + t1243 * t1419 + (t1092 * t1307 + t1104 * t1380) * t1215 + (t1091 * t1308 + t1103 * t1381) * t1212 + (t1090 * t1309 + t1102 * t1382) * t1209, 0; t1024 * t1322 + t1025 * t1320 + t1026 * t1318, 0, 0, t1173 * t1294 + t1174 * t1293 + t1175 * t1292 + (-t1095 * t1113 + t1336 * t1551) * t1271 + (-t1094 * t1112 + t1338 * t1552) * t1272 + (-t1093 * t1111 + t1340 * t1553) * t1273, t1249 * t1553 + t1248 * t1552 + t1247 * t1551 + (t1089 * t1465 + t1202 * t1266) * t1141 + (t1088 * t1466 + t1200 * t1268) * t1138 + (t1087 * t1467 + t1198 * t1270) * t1135, t1173 * t1260 + t1174 * t1258 + t1175 * t1256 + t1192 * t1233 + t1194 * t1231 + t1196 * t1229, -t1173 * t1261 - t1174 * t1259 - t1175 * t1257 + t1198 * t1233 + t1200 * t1231 + t1202 * t1229, t1093 * t1358 + t1094 * t1357 + t1095 * t1356, 0, 0, t1175 * t1544 + t1174 * t1543 + t1173 * t1542 + (t1095 * t1244 + t1107 * t1250) * t1215 + (t1094 * t1245 + t1106 * t1251) * t1212 + (t1093 * t1246 + t1105 * t1252) * t1209, t1006 * t1322 + t1007 * t1320 + t1008 * t1318 + (-t1175 * t1286 + (t1095 * t1428 + t1107 * t1196) * t1026) * t1215 + (-t1174 * t1287 + (t1094 * t1434 + t1106 * t1194) * t1025) * t1212 + (-t1173 * t1288 + (t1093 * t1440 + t1105 * t1192) * t1024) * t1209, t1291 * t1553 + t1290 * t1552 + t1289 * t1551 + t1105 * t1488 + t1106 * t1487 + t1107 * t1486 + (t1095 * t1295 + t1158 * t1266) * t1141 + (t1094 * t1296 + t1156 * t1268) * t1138 + (t1093 * t1297 + t1154 * t1270) * t1135, -t1241 * t1420 - t1242 * t1421 - t1243 * t1422 + (t1095 * t1307 + t1107 * t1380) * t1215 + (t1094 * t1308 + t1106 * t1381) * t1212 + (t1093 * t1309 + t1105 * t1382) * t1209, 0; -t1351 - t1353 - t1355, 0, 0, -t1182 * t1355 - t1183 * t1353 - t1184 * t1351 + (t1080 * t1202 * t1368 + t1119 * t1462) * t1196 * t1423 + (t1079 * t1200 * t1369 + t1118 * t1463) * t1194 * t1429 + (t1078 * t1198 * t1370 + t1117 * t1464) * t1192 * t1435, t1255 * t1530 + t1254 * t1529 + t1253 * t1528 + (-t1089 * t1119 * t1215 + t1304) * t1426 + (-t1088 * t1118 * t1212 + t1305) * t1432 + (-t1087 * t1117 * t1209 + t1306) * t1438, -t1198 * t1284 - t1200 * t1282 - t1202 * t1280 + (-t1026 * t1323 - t1495) * t1427 + (-t1025 * t1325 - t1496) * t1433 + (-t1024 * t1327 - t1497) * t1439, t1192 * t1284 + t1194 * t1282 + t1196 * t1280 + (-t1026 * t1119 * t1414 - t1202 * t1495) * t1141 + (-t1025 * t1118 * t1415 - t1200 * t1496) * t1138 + (-t1024 * t1117 * t1416 - t1198 * t1497) * t1135, -t1018 * t1135 * t1327 - t1019 * t1138 * t1325 - t1020 * t1141 * t1323, 0, 0, t1033 * t1300 + t1034 * t1299 + t1035 * t1298 - t1018 * t1448 - t1019 * t1446 - t1020 * t1444 + (-0.2e1 * t1158 * t1351 + (-t1119 * t1498 + (-t1119 * t1441 - t1142 * t1445) * t1113) * t1215) * t1202 + (-0.2e1 * t1156 * t1353 + (-t1118 * t1499 + (-t1118 * t1442 - t1139 * t1447) * t1112) * t1212) * t1200 + (-0.2e1 * t1154 * t1355 + (-t1117 * t1500 + (-t1117 * t1443 - t1136 * t1449) * t1111) * t1209) * t1198, -t1006 * t1437 - t1007 * t1431 - t1008 * t1425 + (t1203 * t1347 + (-t1157 * t1324 + t1445) * t1026) * t1215 + (t1201 * t1348 + (-t1155 * t1326 + t1447) * t1025) * t1212 + (t1199 * t1349 + (-t1153 * t1328 + t1449) * t1024) * t1209, t1030 * t1300 + t1031 * t1299 + t1032 * t1298 + t1057 * t1448 + t1058 * t1446 + t1059 * t1444 + (-t1119 * t1202 * t1295 + t1158 * t1304) * t1141 + (-t1118 * t1200 * t1296 + t1156 * t1305) * t1138 + (-t1117 * t1198 * t1297 + t1154 * t1306) * t1135, t1241 * t1203 + t1242 * t1201 + t1243 * t1199 + (t1122 * t1380 - t1324 * t1383) * t1215 + (t1121 * t1381 - t1326 * t1384) * t1212 + (t1120 * t1382 - t1328 * t1385) * t1209, 0;];
tau_reg  = t1;
