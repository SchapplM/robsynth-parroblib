% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:11
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR12V1G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V1G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:10:29
% EndTime: 2020-08-06 19:10:36
% DurationCPUTime: 7.47s
% Computational Cost: add. (5277->418), mult. (9384->934), div. (1125->12), fcn. (7920->18), ass. (0->393)
t743 = sin(qJ(2,3));
t716 = t743 * qJ(3,3);
t749 = cos(qJ(2,3));
t755 = pkin(1) + pkin(2);
t698 = t755 * t749 + t716;
t744 = sin(qJ(1,3));
t750 = cos(qJ(1,3));
t677 = t750 * pkin(4) + t698 * t744;
t745 = sin(qJ(2,2));
t717 = t745 * qJ(3,2);
t751 = cos(qJ(2,2));
t699 = t755 * t751 + t717;
t746 = sin(qJ(1,2));
t752 = cos(qJ(1,2));
t678 = t752 * pkin(4) + t699 * t746;
t999 = t746 * pkin(4);
t1005 = t699 * t752 - t999;
t747 = sin(qJ(2,1));
t718 = t747 * qJ(3,1);
t753 = cos(qJ(2,1));
t700 = t755 * t753 + t718;
t748 = sin(qJ(1,1));
t754 = cos(qJ(1,1));
t679 = t754 * pkin(4) + t700 * t748;
t997 = t748 * pkin(4);
t1004 = t700 * t754 - t997;
t1001 = t744 * pkin(4);
t1003 = t698 * t750 - t1001;
t1002 = t743 * pkin(1);
t1000 = t745 * pkin(1);
t998 = t747 * pkin(1);
t686 = t750 * t716 - t1001;
t740 = legFrame(3,2);
t719 = sin(t740);
t722 = cos(t740);
t734 = t749 ^ 2;
t909 = t755 * t743;
t919 = t750 * t755;
t945 = t719 * qJ(3,3);
t650 = (t722 * t919 - t945) * t734 + (t686 * t722 + t719 * t909) * t749 + t945;
t689 = 0.1e1 / t698;
t993 = t650 * t689;
t757 = 0.1e1 / qJ(3,3);
t992 = t650 * t757;
t687 = t752 * t717 - t999;
t741 = legFrame(2,2);
t720 = sin(t741);
t723 = cos(t741);
t736 = t751 ^ 2;
t908 = t755 * t745;
t915 = t752 * t755;
t943 = t720 * qJ(3,2);
t651 = (t723 * t915 - t943) * t736 + (t687 * t723 + t720 * t908) * t751 + t943;
t691 = 0.1e1 / t699;
t991 = t651 * t691;
t760 = 0.1e1 / qJ(3,2);
t990 = t651 * t760;
t688 = t754 * t718 - t997;
t742 = legFrame(1,2);
t721 = sin(t742);
t724 = cos(t742);
t738 = t753 ^ 2;
t907 = t755 * t747;
t911 = t754 * t755;
t941 = t721 * qJ(3,1);
t652 = (t724 * t911 - t941) * t738 + (t688 * t724 + t721 * t907) * t753 + t941;
t693 = 0.1e1 / t700;
t989 = t652 * t693;
t763 = 0.1e1 / qJ(3,1);
t988 = t652 * t763;
t939 = t722 * qJ(3,3);
t653 = (-t719 * t919 - t939) * t734 + (-t719 * t686 + t722 * t909) * t749 + t939;
t987 = t653 * t689;
t986 = t653 * t757;
t937 = t723 * qJ(3,2);
t654 = (-t720 * t915 - t937) * t736 + (-t720 * t687 + t723 * t908) * t751 + t937;
t985 = t654 * t691;
t984 = t654 * t760;
t935 = t724 * qJ(3,1);
t655 = (-t721 * t911 - t935) * t738 + (-t721 * t688 + t724 * t907) * t753 + t935;
t983 = t655 * t693;
t982 = t655 * t763;
t921 = t749 * qJ(3,3);
t695 = t909 - t921;
t656 = t1003 * t722 + t695 * t719;
t758 = 0.1e1 / qJ(3,3) ^ 2;
t981 = t656 * t758;
t917 = t751 * qJ(3,2);
t696 = t908 - t917;
t657 = t1005 * t723 + t696 * t720;
t761 = 0.1e1 / qJ(3,2) ^ 2;
t980 = t657 * t761;
t913 = t753 * qJ(3,1);
t697 = t907 - t913;
t658 = t1004 * t724 + t697 * t721;
t764 = 0.1e1 / qJ(3,1) ^ 2;
t979 = t658 * t764;
t659 = -t1003 * t719 + t695 * t722;
t978 = t659 * t758;
t660 = -t1005 * t720 + t696 * t723;
t977 = t660 * t761;
t661 = -t1004 * t721 + t697 * t724;
t976 = t661 * t764;
t975 = t677 ^ 2 * t734;
t974 = t678 ^ 2 * t736;
t973 = t679 ^ 2 * t738;
t972 = t677 * t734;
t971 = t677 * t749;
t970 = t678 * t736;
t969 = t678 * t751;
t968 = t679 * t738;
t967 = t679 * t753;
t966 = t677 * t758;
t965 = t678 * t761;
t964 = t679 * t764;
t756 = qJ(3,3) ^ 2;
t765 = pkin(1) ^ 2;
t725 = t756 + t765;
t963 = t689 * t725;
t962 = t689 * t749;
t690 = 0.1e1 / t698 ^ 2;
t729 = t744 ^ 2;
t961 = t690 * t729;
t960 = t690 * t757;
t959 = t690 * t758;
t759 = qJ(3,2) ^ 2;
t726 = t759 + t765;
t958 = t691 * t726;
t957 = t691 * t751;
t692 = 0.1e1 / t699 ^ 2;
t731 = t746 ^ 2;
t956 = t692 * t731;
t955 = t692 * t760;
t954 = t692 * t761;
t762 = qJ(3,1) ^ 2;
t727 = t762 + t765;
t953 = t693 * t727;
t952 = t693 * t753;
t694 = 0.1e1 / t700 ^ 2;
t733 = t748 ^ 2;
t951 = t694 * t733;
t950 = t694 * t763;
t949 = t694 * t764;
t705 = t749 * pkin(1) + t716;
t948 = t705 * t743;
t707 = t751 * pkin(1) + t717;
t947 = t707 * t745;
t709 = t753 * pkin(1) + t718;
t946 = t709 * t747;
t944 = t719 * t744;
t942 = t720 * t746;
t940 = t721 * t748;
t938 = t722 * t744;
t936 = t723 * t746;
t934 = t724 * t748;
t735 = t750 ^ 2;
t933 = t735 * t690;
t737 = t752 ^ 2;
t932 = t737 * t692;
t739 = t754 ^ 2;
t931 = t739 * t694;
t930 = t743 * t749;
t929 = t743 * t757;
t928 = t744 * t750;
t927 = t745 * t751;
t926 = t745 * t760;
t925 = t746 * t752;
t924 = t747 * t753;
t923 = t747 * t763;
t922 = t748 * t754;
t920 = t749 * t750;
t918 = t750 * t757;
t916 = t751 * t752;
t914 = t752 * t760;
t912 = t753 * t754;
t910 = t754 * t763;
t903 = 0.2e1 * t690 * t705;
t902 = 0.2e1 * t692 * t707;
t901 = 0.2e1 * t694 * t709;
t900 = pkin(1) * t993;
t899 = pkin(1) * t991;
t898 = pkin(1) * t989;
t897 = pkin(1) * t987;
t896 = pkin(1) * t985;
t895 = pkin(1) * t983;
t894 = t656 * t929;
t893 = t657 * t926;
t892 = t658 * t923;
t891 = t659 * t929;
t890 = t660 * t926;
t889 = t661 * t923;
t888 = t677 * t962;
t887 = t744 * t972;
t886 = t744 * t971;
t885 = t757 * t971;
t884 = t758 * t971;
t883 = t678 * t957;
t882 = t746 * t970;
t881 = t746 * t969;
t880 = t760 * t969;
t879 = t761 * t969;
t878 = t679 * t952;
t877 = t748 * t968;
t876 = t748 * t967;
t875 = t763 * t967;
t874 = t764 * t967;
t873 = t677 * t929;
t872 = t678 * t926;
t871 = t679 * t923;
t704 = t921 - t1002;
t870 = t704 * t960;
t869 = t690 * t930;
t868 = t690 * t929;
t867 = t690 * t928;
t866 = t744 * t960;
t865 = t690 * t918;
t706 = t917 - t1000;
t864 = t706 * t955;
t863 = t692 * t927;
t862 = t692 * t926;
t861 = t692 * t925;
t860 = t746 * t955;
t859 = t692 * t914;
t708 = t913 - t998;
t858 = t708 * t950;
t857 = t694 * t924;
t856 = t694 * t923;
t855 = t694 * t922;
t854 = t748 * t950;
t853 = t694 * t910;
t852 = t729 * t948;
t851 = t731 * t947;
t850 = t733 * t946;
t710 = t719 ^ 2;
t849 = t710 * t961;
t711 = t720 ^ 2;
t848 = t711 * t956;
t712 = t721 ^ 2;
t847 = t712 * t951;
t713 = t722 ^ 2;
t846 = t713 * t961;
t714 = t723 ^ 2;
t845 = t714 * t956;
t715 = t724 ^ 2;
t844 = t715 * t951;
t843 = t719 * t722 * t729;
t842 = t720 * t723 * t731;
t841 = t721 * t724 * t733;
t840 = t743 * t918;
t839 = t745 * t914;
t838 = t747 * t910;
t683 = (-t756 + t765) * t734 + 0.2e1 * t921 * t1002 + t756;
t684 = (-t759 + t765) * t736 + 0.2e1 * t917 * t1000 + t759;
t685 = (-t762 + t765) * t738 + 0.2e1 * t913 * t998 + t762;
t795 = t724 * t855;
t797 = t723 * t861;
t799 = t722 * t867;
t837 = t683 * t799 + t684 * t797 + t685 * t795;
t796 = t694 * t841;
t775 = t753 * t796;
t798 = t692 * t842;
t778 = t751 * t798;
t800 = t690 * t843;
t781 = t749 * t800;
t836 = -0.2e1 * t705 * t781 - 0.2e1 * t707 * t778 - 0.2e1 * t709 * t775;
t807 = t753 * t855;
t776 = t709 * t807;
t810 = t751 * t861;
t779 = t707 * t810;
t813 = t749 * t867;
t782 = t705 * t813;
t835 = -0.2e1 * t719 * t782 - 0.2e1 * t720 * t779 - 0.2e1 * t721 * t776;
t834 = 0.2e1 * t722 * t782 + 0.2e1 * t723 * t779 + 0.2e1 * t724 * t776;
t833 = pkin(1) * t888;
t832 = pkin(1) * t883;
t831 = pkin(1) * t878;
t830 = t650 * t870;
t829 = t651 * t864;
t828 = t652 * t858;
t827 = t653 * t870;
t826 = t654 * t864;
t825 = t655 * t858;
t824 = t690 * t884;
t823 = t677 * t865;
t822 = t692 * t879;
t821 = t678 * t859;
t820 = t694 * t874;
t819 = t679 * t853;
t818 = t744 * t873;
t817 = t746 * t872;
t816 = t748 * t871;
t815 = t704 * t865;
t814 = t729 * t869;
t812 = t706 * t859;
t811 = t731 * t863;
t809 = t708 * t853;
t808 = t733 * t857;
t806 = t928 * t948;
t805 = t925 * t947;
t804 = t922 * t946;
t803 = t719 * t867;
t802 = t720 * t861;
t801 = t721 * t855;
t794 = t729 * t749 * t903;
t793 = t731 * t751 * t902;
t792 = t733 * t753 * t901;
t791 = t650 * t722 * t866;
t790 = t651 * t723 * t860;
t789 = t652 * t724 * t854;
t788 = t653 * t719 * t866;
t787 = t654 * t720 * t860;
t786 = t655 * t721 * t854;
t785 = t870 * t971;
t784 = t864 * t969;
t783 = t858 * t967;
t780 = t743 * t813;
t777 = t745 * t810;
t774 = t747 * t807;
t773 = t744 * t785;
t772 = t746 * t784;
t771 = t748 * t783;
t770 = (t650 * t719 - t653 * t722) * t866;
t769 = (t651 * t720 - t654 * t723) * t860;
t768 = (t652 * t721 - t655 * t724) * t854;
t767 = -t683 * t800 - t684 * t798 - t685 * t796;
t766 = -t683 * t803 - t684 * t802 - t685 * t801;
t732 = t747 ^ 2;
t730 = t745 ^ 2;
t728 = t743 ^ 2;
t649 = t655 ^ 2;
t648 = t654 ^ 2;
t647 = t653 ^ 2;
t646 = t652 ^ 2;
t645 = t651 ^ 2;
t644 = t650 ^ 2;
t643 = (t679 - 0.2e1 * t831) * t763;
t642 = (-t679 + t831) * t763;
t641 = (t678 - 0.2e1 * t832) * t760;
t640 = (-t678 + t832) * t760;
t639 = (t677 - 0.2e1 * t833) * t757;
t638 = (-t677 + t833) * t757;
t637 = (pkin(1) * t679 - t727 * t878) * t763;
t636 = (pkin(1) * t678 - t726 * t883) * t760;
t635 = (pkin(1) * t677 - t725 * t888) * t757;
t634 = t795 + t797 + t799;
t633 = -t801 - t802 - t803;
t632 = -t796 - t798 - t800;
t631 = t728 * t799 + t730 * t797 + t732 * t795;
t630 = -t728 * t803 - t730 * t802 - t732 * t801;
t629 = -t728 * t800 - t730 * t798 - t732 * t796;
t628 = 0.2e1 * t722 * t780 + 0.2e1 * t723 * t777 + 0.2e1 * t724 * t774;
t627 = -0.2e1 * t719 * t780 - 0.2e1 * t720 * t777 - 0.2e1 * t721 * t774;
t626 = -0.2e1 * t743 * t781 - 0.2e1 * t745 * t778 - 0.2e1 * t747 * t775;
t625 = t642 * t747 - t693 * t968;
t624 = t640 * t745 - t691 * t970;
t623 = t638 * t743 - t689 * t972;
t622 = (t661 - t895) * t763;
t621 = (-t661 + 0.2e1 * t895) * t763;
t620 = (t660 - t896) * t760;
t619 = (-t660 + 0.2e1 * t896) * t760;
t618 = (t659 - t897) * t757;
t617 = (-t659 + 0.2e1 * t897) * t757;
t616 = (t658 - t898) * t763;
t615 = (-t658 + 0.2e1 * t898) * t763;
t614 = (t657 - t899) * t760;
t613 = (-t657 + 0.2e1 * t899) * t760;
t612 = (t656 - t900) * t757;
t611 = (-t656 + 0.2e1 * t900) * t757;
t610 = (-pkin(1) * t661 + t655 * t953) * t763;
t609 = (-pkin(1) * t658 + t652 * t953) * t763;
t608 = (-pkin(1) * t660 + t654 * t958) * t760;
t607 = (-pkin(1) * t657 + t651 * t958) * t760;
t606 = (-pkin(1) * t659 + t653 * t963) * t757;
t605 = (-pkin(1) * t656 + t650 * t963) * t757;
t604 = t622 * t747 + t655 * t952;
t603 = t620 * t745 + t654 * t957;
t602 = t618 * t743 + t653 * t962;
t601 = t616 * t747 + t652 * t952;
t600 = t614 * t745 + t651 * t957;
t599 = t612 * t743 + t650 * t962;
t598 = -t653 * t824 - t654 * t822 - t655 * t820;
t597 = -t650 * t824 - t651 * t822 - t652 * t820;
t596 = (-t652 * t912 + t724 * t877) * t950 + (-t651 * t916 + t723 * t882) * t955 + (-t650 * t920 + t722 * t887) * t960;
t595 = (-t655 * t912 - t721 * t877) * t950 + (-t654 * t916 - t720 * t882) * t955 + (-t653 * t920 - t719 * t887) * t960;
t594 = (-t652 * t754 + t724 * t876) * t856 + (-t651 * t752 + t723 * t881) * t862 + (-t650 * t750 + t722 * t886) * t868;
t593 = (-t655 * t754 - t721 * t876) * t856 + (-t654 * t752 - t720 * t881) * t862 + (-t653 * t750 - t719 * t886) * t868;
t592 = 0.2e1 * (-t652 * t875 + t724 * t804) * t694 + 0.2e1 * (-t651 * t880 + t723 * t805) * t692 + 0.2e1 * (-t650 * t885 + t722 * t806) * t690;
t591 = 0.2e1 * (-t655 * t875 - t721 * t804) * t694 + 0.2e1 * (-t654 * t880 - t720 * t805) * t692 + 0.2e1 * (-t653 * t885 - t719 * t806) * t690;
t590 = t650 * t653 * t959 + t651 * t654 * t954 + t652 * t655 * t949;
t589 = t749 * t770 + t751 * t769 + t753 * t768;
t588 = t743 * t770 + t745 * t769 + t747 * t768;
t587 = 0.2e1 * (t652 * t982 - t841 * t946) * t694 + 0.2e1 * (t651 * t984 - t842 * t947) * t692 + 0.2e1 * (t650 * t986 - t843 * t948) * t690;
t1 = [t844 + t845 + t846, 0, 0, t728 * t846 + t730 * t845 + t732 * t844, 0.2e1 * t713 * t814 + 0.2e1 * t714 * t811 + 0.2e1 * t715 * t808, -0.2e1 * t743 * t791 - 0.2e1 * t745 * t790 - 0.2e1 * t747 * t789, -0.2e1 * t749 * t791 - 0.2e1 * t751 * t790 - 0.2e1 * t753 * t789, t644 * t959 + t645 * t954 + t646 * t949, 0, 0, t713 * t794 + t714 * t793 + t715 * t792 + (t615 * t763 - t979) * t989 + (t613 * t760 - t980) * t991 + (t611 * t757 - t981) * t993, (-t828 + (-t601 - t892) * t693) * t934 + (-t829 + (-t600 - t893) * t691) * t936 + (-t830 + (-t599 - t894) * t689) * t938, 0.2e1 * (t646 * t763 + t715 * t850) * t694 + 0.2e1 * (t645 * t760 + t714 * t851) * t692 + 0.2e1 * (t644 * t757 + t713 * t852) * t690, t683 * t846 + t684 * t845 + t685 * t844 + (t609 * t989 + t616 * t658) * t763 + (t607 * t991 + t614 * t657) * t760 + (t605 * t993 + t612 * t656) * t757, 1; t632, 0, 0, t629, t626, t588, t589, t590, 0, 0, (t621 * t988 - t655 * t979) * t693 + (t619 * t990 - t654 * t980) * t691 + (t617 * t992 - t653 * t981) * t689 + t836, (t721 * t828 + (-t604 * t724 + t721 * t892) * t693) * t748 + (t720 * t829 + (-t603 * t723 + t720 * t893) * t691) * t746 + (t719 * t830 + (-t602 * t722 + t719 * t894) * t689) * t744, t587, (t610 * t989 + t658 * t622) * t763 + (t608 * t991 + t657 * t620) * t760 + (t606 * t993 + t656 * t618) * t757 + t767, 0; t634, 0, 0, t631, t628, t594, t596, t597, 0, 0, (t643 * t988 + t658 * t874) * t693 + (t641 * t990 + t657 * t879) * t691 + (t639 * t992 + t656 * t884) * t689 + t834, -t650 * t815 - t651 * t812 - t652 * t809 + (-t625 * t934 - t658 * t838) * t693 + (-t624 * t936 - t657 * t839) * t691 + (-t623 * t938 - t656 * t840) * t689, t592, (t637 * t989 + t642 * t658) * t763 + (t636 * t991 + t640 * t657) * t760 + (t635 * t993 + t638 * t656) * t757 + t837, 0; t632, 0, 0, t629, t626, t588, t589, t590, 0, 0, (t615 * t982 - t652 * t976) * t693 + (t613 * t984 - t651 * t977) * t691 + (t611 * t986 - t650 * t978) * t689 + t836, (-t724 * t825 + (t601 * t721 - t724 * t889) * t693) * t748 + (-t723 * t826 + (t600 * t720 - t723 * t890) * t691) * t746 + (-t722 * t827 + (t599 * t719 - t722 * t891) * t689) * t744, t587, (t609 * t983 + t661 * t616) * t763 + (t607 * t985 + t660 * t614) * t760 + (t605 * t987 + t659 * t612) * t757 + t767, 0; t847 + t848 + t849, 0, 0, t728 * t849 + t730 * t848 + t732 * t847, 0.2e1 * t710 * t814 + 0.2e1 * t711 * t811 + 0.2e1 * t712 * t808, 0.2e1 * t743 * t788 + 0.2e1 * t745 * t787 + 0.2e1 * t747 * t786, 0.2e1 * t749 * t788 + 0.2e1 * t751 * t787 + 0.2e1 * t753 * t786, t647 * t959 + t648 * t954 + t649 * t949, 0, 0, t710 * t794 + t711 * t793 + t712 * t792 + (t621 * t763 - t976) * t983 + (t619 * t760 - t977) * t985 + (t617 * t757 - t978) * t987, (t825 + (t604 + t889) * t693) * t940 + (t826 + (t603 + t890) * t691) * t942 + (t827 + (t602 + t891) * t689) * t944, 0.2e1 * (t649 * t763 + t712 * t850) * t694 + 0.2e1 * (t648 * t760 + t711 * t851) * t692 + 0.2e1 * (t647 * t757 + t710 * t852) * t690, t683 * t849 + t684 * t848 + t685 * t847 + (t610 * t983 + t622 * t661) * t763 + (t608 * t985 + t620 * t660) * t760 + (t606 * t987 + t618 * t659) * t757, 1; t633, 0, 0, t630, t627, t593, t595, t598, 0, 0, (t643 * t982 + t661 * t874) * t693 + (t641 * t984 + t660 * t879) * t691 + (t639 * t986 + t659 * t884) * t689 + t835, -t653 * t815 - t654 * t812 - t655 * t809 + (t625 * t940 - t661 * t838) * t693 + (t624 * t942 - t660 * t839) * t691 + (t623 * t944 - t659 * t840) * t689, t591, (t637 * t983 + t661 * t642) * t763 + (t636 * t985 + t660 * t640) * t760 + (t635 * t987 + t659 * t638) * t757 + t766, 0; t634, 0, 0, t631, t628, t594, t596, t597, 0, 0, (-t615 * t875 + t652 * t964) * t693 + (-t613 * t880 + t651 * t965) * t691 + (-t611 * t885 + t650 * t966) * t689 + t834, t722 * t773 + t723 * t772 + t724 * t771 + (-t754 * t601 + t724 * t816) * t693 + (-t752 * t600 + t723 * t817) * t691 + (-t750 * t599 + t722 * t818) * t689, t592, (-t609 * t878 - t616 * t679) * t763 + (-t607 * t883 - t614 * t678) * t760 + (-t605 * t888 - t612 * t677) * t757 + t837, 0; t633, 0, 0, t630, t627, t593, t595, t598, 0, 0, (-t621 * t875 + t655 * t964) * t693 + (-t619 * t880 + t654 * t965) * t691 + (-t617 * t885 + t653 * t966) * t689 + t835, -t719 * t773 - t720 * t772 - t721 * t771 + (-t754 * t604 - t721 * t816) * t693 + (-t752 * t603 - t720 * t817) * t691 + (-t750 * t602 - t719 * t818) * t689, t591, (-t610 * t878 - t622 * t679) * t763 + (-t608 * t883 - t620 * t678) * t760 + (-t606 * t888 - t618 * t677) * t757 + t766, 0; t931 + t932 + t933, 0, 0, t728 * t933 + t730 * t932 + t732 * t931, 0.2e1 * t735 * t869 + 0.2e1 * t737 * t863 + 0.2e1 * t739 * t857, 0.2e1 * t819 * t924 + 0.2e1 * t821 * t927 + 0.2e1 * t823 * t930, 0.2e1 * t734 * t823 + 0.2e1 * t736 * t821 + 0.2e1 * t738 * t819, t949 * t973 + t954 * t974 + t959 * t975, 0, 0, (t739 * t901 + (-t643 * t763 - t964) * t693 * t679) * t753 + (t737 * t902 + (-t641 * t760 - t965) * t691 * t678) * t751 + (t735 * t903 + (-t639 * t757 - t966) * t689 * t677) * t749, (t783 + (-t625 + t871) * t693) * t754 + (t784 + (-t624 + t872) * t691) * t752 + (t785 + (-t623 + t873) * t689) * t750, 0.2e1 * (t739 * t946 + t763 * t973) * t694 + 0.2e1 * (t737 * t947 + t760 * t974) * t692 + 0.2e1 * (t735 * t948 + t757 * t975) * t690, t683 * t933 + t684 * t932 + t685 * t931 + (-t637 * t878 - t642 * t679) * t763 + (-t636 * t883 - t640 * t678) * t760 + (-t635 * t888 - t638 * t677) * t757, 1;];
tau_reg  = t1;
