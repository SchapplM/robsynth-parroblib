% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR12V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR12V2G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G1A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:16:45
% EndTime: 2020-08-06 19:16:55
% DurationCPUTime: 10.62s
% Computational Cost: add. (10740->568), mult. (13702->1084), div. (1518->12), fcn. (12867->18), ass. (0->438)
t3313 = MDP(10) * pkin(5) - MDP(7);
t3312 = MDP(9) * pkin(5) - MDP(6);
t3311 = -MDP(14) * pkin(5) - MDP(12);
t3021 = sin(qJ(2,3));
t3309 = MDP(13) * t3021;
t3023 = sin(qJ(2,2));
t3308 = MDP(13) * t3023;
t3025 = sin(qJ(2,1));
t3307 = MDP(13) * t3025;
t3292 = legFrame(3,3);
t3003 = sin(t3292);
t3022 = sin(qJ(1,3));
t3181 = cos(t3292);
t3296 = cos(qJ(1,3));
t2943 = t3003 * t3022 - t3181 * t3296;
t2945 = t3003 * t3296 + t3181 * t3022;
t3306 = t2943 * t2945;
t3293 = legFrame(2,3);
t3004 = sin(t3293);
t3024 = sin(qJ(1,2));
t3182 = cos(t3293);
t3297 = cos(qJ(1,2));
t2947 = t3004 * t3024 - t3182 * t3297;
t2949 = t3004 * t3297 + t3182 * t3024;
t3305 = t2947 * t2949;
t3294 = legFrame(1,3);
t3005 = sin(t3294);
t3026 = sin(qJ(1,1));
t3183 = cos(t3294);
t3298 = cos(qJ(1,1));
t2951 = t3005 * t3026 - t3183 * t3298;
t2953 = t3005 * t3298 + t3183 * t3026;
t3304 = t2951 * t2953;
t3000 = t3021 * qJ(3,3);
t2983 = t3000 + pkin(1);
t3027 = cos(qJ(2,3));
t3303 = t2983 * t3027;
t3001 = t3023 * qJ(3,2);
t2985 = t3001 + pkin(1);
t3028 = cos(qJ(2,2));
t3302 = t2985 * t3028;
t3002 = t3025 * qJ(3,1);
t2987 = t3002 + pkin(1);
t3029 = cos(qJ(2,1));
t3301 = t2987 * t3029;
t3300 = -0.2e1 * pkin(1);
t3299 = 2 * MDP(5);
t3018 = t3027 ^ 2;
t3019 = t3028 ^ 2;
t3020 = t3029 ^ 2;
t3031 = pkin(2) + pkin(3);
t3290 = pkin(1) * t3021;
t3289 = pkin(1) * t3023;
t3288 = pkin(1) * t3025;
t3287 = pkin(5) * t2943;
t3286 = pkin(5) * t2945;
t3285 = pkin(5) * t2947;
t3284 = pkin(5) * t2949;
t3283 = pkin(5) * t2951;
t3282 = pkin(5) * t2953;
t3015 = t3021 ^ 2;
t3281 = pkin(5) * t3015;
t3016 = t3023 ^ 2;
t3280 = pkin(5) * t3016;
t3017 = t3025 ^ 2;
t3279 = pkin(5) * t3017;
t3278 = pkin(5) * t3021;
t3277 = pkin(5) * t3023;
t3276 = pkin(5) * t3025;
t3275 = pkin(5) * t3018;
t3274 = pkin(5) * t3019;
t3273 = pkin(5) * t3020;
t3272 = qJ(3,1) * t3029;
t3271 = qJ(3,2) * t3028;
t3270 = qJ(3,3) * t3027;
t2973 = t3021 * t3031 - t3270;
t3269 = MDP(14) * t2973;
t2974 = t3023 * t3031 - t3271;
t3268 = MDP(14) * t2974;
t2975 = t3025 * t3031 - t3272;
t3267 = MDP(14) * t2975;
t3266 = 2 * pkin(2);
t3214 = t3027 * t3031;
t2970 = t3214 + t2983;
t2964 = 0.1e1 / t2970;
t2988 = qJ(3,3) + t3290;
t3030 = pkin(5) - pkin(6);
t2997 = t3030 * t3296;
t2934 = t3022 * t2988 - t3021 * t2997;
t2982 = 0.2e1 * t3000 + pkin(1);
t2955 = t2982 * t3022 - t2997;
t2994 = t3022 * t3030;
t3069 = t2988 * t3296 + t3021 * t2994;
t3102 = t2982 * t3296 + t2994;
t3147 = (qJ(3,3) + t3031) * (-qJ(3,3) + t3031) * t3018;
t2878 = -t2943 * t3147 - (t3003 * t2955 - t3102 * t3181) * t3214 - (t3003 * t2934 - t3069 * t3181) * qJ(3,3);
t3033 = 0.1e1 / qJ(3,3);
t2956 = t2983 * t3022 - t2997;
t3101 = t2983 * t3296 + t2994;
t2913 = t2943 * t3214 + t2956 * t3003 - t3101 * t3181;
t3256 = t2913 * t3027;
t3198 = pkin(2) * t3256;
t3076 = (t2878 + t3198) * t3033;
t3265 = t2964 * t3076 * t3021;
t2879 = t2945 * t3147 + (t2955 * t3181 + t3102 * t3003) * t3214 + (t2934 * t3181 + t3069 * t3003) * qJ(3,3);
t3259 = t2879 * t3033;
t2874 = t2964 * t3259;
t2914 = t2945 * t3214 + t2956 * t3181 + t3003 * t3101;
t3213 = t3027 * t3033;
t3176 = t2914 * t3213;
t3141 = pkin(2) * t3176;
t3264 = (t2964 * t3141 - t2874) * t3021;
t3211 = t3028 * t3031;
t2971 = t3211 + t2985;
t2966 = 0.1e1 / t2971;
t2989 = qJ(3,2) + t3289;
t2998 = t3030 * t3297;
t2935 = t3024 * t2989 - t3023 * t2998;
t2984 = 0.2e1 * t3001 + pkin(1);
t2957 = t2984 * t3024 - t2998;
t2995 = t3024 * t3030;
t3068 = t2989 * t3297 + t3023 * t2995;
t3100 = t2984 * t3297 + t2995;
t3146 = (qJ(3,2) + t3031) * (-qJ(3,2) + t3031) * t3019;
t2880 = -t2947 * t3146 - (t3004 * t2957 - t3100 * t3182) * t3211 - (t3004 * t2935 - t3068 * t3182) * qJ(3,2);
t3036 = 0.1e1 / qJ(3,2);
t2958 = t2985 * t3024 - t2998;
t3099 = t2985 * t3297 + t2995;
t2915 = t2947 * t3211 + t2958 * t3004 - t3099 * t3182;
t3254 = t2915 * t3028;
t3197 = pkin(2) * t3254;
t3075 = (t2880 + t3197) * t3036;
t3263 = t2966 * t3075 * t3023;
t2881 = t2949 * t3146 + (t2957 * t3182 + t3100 * t3004) * t3211 + (t2935 * t3182 + t3068 * t3004) * qJ(3,2);
t3258 = t2881 * t3036;
t2875 = t2966 * t3258;
t2916 = t2949 * t3211 + t2958 * t3182 + t3004 * t3099;
t3210 = t3028 * t3036;
t3174 = t2916 * t3210;
t3140 = pkin(2) * t3174;
t3262 = (t2966 * t3140 - t2875) * t3023;
t3208 = t3029 * t3031;
t2972 = t3208 + t2987;
t2968 = 0.1e1 / t2972;
t2990 = qJ(3,1) + t3288;
t2999 = t3030 * t3298;
t2936 = t3026 * t2990 - t3025 * t2999;
t2986 = 0.2e1 * t3002 + pkin(1);
t2959 = t2986 * t3026 - t2999;
t2996 = t3026 * t3030;
t3067 = t2990 * t3298 + t3025 * t2996;
t3098 = t2986 * t3298 + t2996;
t3145 = (qJ(3,1) + t3031) * (-qJ(3,1) + t3031) * t3020;
t2882 = -t2951 * t3145 - (t3005 * t2959 - t3098 * t3183) * t3208 - (t3005 * t2936 - t3067 * t3183) * qJ(3,1);
t3039 = 0.1e1 / qJ(3,1);
t2960 = t2987 * t3026 - t2999;
t3097 = t2987 * t3298 + t2996;
t2917 = t2951 * t3208 + t2960 * t3005 - t3097 * t3183;
t3252 = t2917 * t3029;
t3196 = pkin(2) * t3252;
t3074 = (t2882 + t3196) * t3039;
t3261 = t2968 * t3074 * t3025;
t2883 = t2953 * t3145 + (t2959 * t3183 + t3098 * t3005) * t3208 + (t2936 * t3183 + t3067 * t3005) * qJ(3,1);
t3257 = t2883 * t3039;
t2876 = t2968 * t3257;
t2918 = t2953 * t3208 + t2960 * t3183 + t3005 * t3097;
t3207 = t3029 * t3039;
t3172 = t2918 * t3207;
t3139 = pkin(2) * t3172;
t3260 = (t2968 * t3139 - t2876) * t3025;
t3255 = t2914 * t3027;
t3253 = t2916 * t3028;
t3251 = t2918 * t3029;
t3042 = pkin(2) ^ 2;
t2925 = t3000 + (-pkin(2) * t2973 + t3021 * t3042) * t3033;
t3250 = t2925 * t3027;
t2926 = t3001 + (-pkin(2) * t2974 + t3023 * t3042) * t3036;
t3249 = t2926 * t3028;
t2927 = t3002 + (-pkin(2) * t2975 + t3025 * t3042) * t3039;
t3248 = t2927 * t3029;
t2961 = t2973 * t3033;
t3219 = t3021 * t3033;
t3195 = pkin(2) * t3219;
t2928 = -t2961 + 0.2e1 * t3195;
t3247 = t2928 * t3027;
t2962 = t2974 * t3036;
t3217 = t3023 * t3036;
t3194 = pkin(2) * t3217;
t2930 = -t2962 + 0.2e1 * t3194;
t3246 = t2930 * t3028;
t2963 = t2975 * t3039;
t3215 = t3025 * t3039;
t3193 = pkin(2) * t3215;
t2932 = -t2963 + 0.2e1 * t3193;
t3245 = t2932 * t3029;
t3244 = t2943 * t2964;
t3243 = t2945 * t2964;
t3242 = t2947 * t2966;
t3241 = t2949 * t2966;
t3240 = t2951 * t2968;
t3239 = t2953 * t2968;
t3238 = t2964 * t3027;
t2965 = 0.1e1 / t2970 ^ 2;
t3237 = t2965 * t3015;
t3236 = t2965 * t3033;
t3235 = t2966 * t3028;
t2967 = 0.1e1 / t2971 ^ 2;
t3234 = t2967 * t3016;
t3233 = t2967 * t3036;
t3232 = t2968 * t3029;
t2969 = 0.1e1 / t2972 ^ 2;
t3231 = t2969 * t3017;
t3230 = t2969 * t3039;
t2976 = -pkin(2) * t3021 + t3270;
t3229 = t2976 * t3027;
t2977 = -pkin(2) * t3023 + t3271;
t3228 = t2977 * t3028;
t2978 = -pkin(2) * t3025 + t3272;
t3227 = t2978 * t3029;
t3226 = t3015 * t3033;
t3225 = t3016 * t3036;
t3224 = t3017 * t3039;
t3223 = t3018 * t3033;
t3222 = t3019 * t3036;
t3221 = t3020 * t3039;
t3220 = t3021 * t3027;
t3218 = t3023 * t3028;
t3216 = t3025 * t3029;
t3034 = 0.1e1 / qJ(3,3) ^ 2;
t3212 = t3027 * t3034;
t3037 = 0.1e1 / qJ(3,2) ^ 2;
t3209 = t3028 * t3037;
t3040 = 0.1e1 / qJ(3,1) ^ 2;
t3206 = t3029 * t3040;
t3205 = t3033 * t3042;
t3204 = t3036 * t3042;
t3203 = t3039 * t3042;
t3202 = pkin(1) ^ 2 + pkin(5) ^ 2;
t3201 = 0.2e1 * t3290;
t3200 = 0.2e1 * t3289;
t3199 = 0.2e1 * t3288;
t3192 = t2943 * t3278;
t3191 = t2945 * t3278;
t3190 = t2947 * t3277;
t3189 = t2949 * t3277;
t3188 = t2951 * t3276;
t3187 = t2953 * t3276;
t3186 = pkin(5) * t3223;
t3185 = pkin(5) * t3222;
t3184 = pkin(5) * t3221;
t3180 = MDP(11) * t3021 * t3034;
t3179 = MDP(11) * t3023 * t3037;
t3178 = MDP(11) * t3025 * t3040;
t3177 = t2913 * t3213;
t3175 = t2915 * t3210;
t3173 = t2917 * t3207;
t3171 = t2965 * t3306;
t3170 = t2967 * t3305;
t3169 = t2969 * t3304;
t3168 = t2964 * t3226;
t3167 = t2964 * t3212;
t3166 = t2965 * t3223;
t3165 = t2965 * t3018 * t3034;
t3164 = t2965 * t3220;
t3163 = t2965 * t3219;
t3162 = t2965 * t3212;
t3161 = t2966 * t3225;
t3160 = t2966 * t3209;
t3159 = t2967 * t3222;
t3158 = t2967 * t3019 * t3037;
t3157 = t2967 * t3218;
t3156 = t2967 * t3217;
t3155 = t2967 * t3209;
t3154 = t2968 * t3224;
t3153 = t2968 * t3206;
t3152 = t2969 * t3221;
t3151 = t2969 * t3020 * t3040;
t3150 = t2969 * t3216;
t3149 = t2969 * t3215;
t3148 = t2969 * t3206;
t3144 = t3021 * t3213;
t3143 = t3023 * t3210;
t3142 = t3025 * t3207;
t3138 = t2913 * t3186;
t3137 = t2914 * t3186;
t3136 = pkin(5) * t2914 * t3219;
t3135 = t2915 * t3185;
t3134 = t2916 * t3185;
t3133 = pkin(5) * t2916 * t3217;
t3132 = t2917 * t3184;
t3131 = t2918 * t3184;
t3130 = pkin(5) * t2918 * t3215;
t3129 = t2913 * t3162;
t3128 = t2914 * t3162;
t3127 = t2915 * t3155;
t3126 = t2916 * t3155;
t3125 = t2917 * t3148;
t3124 = t2918 * t3148;
t3123 = t2943 * t3166;
t3122 = t2945 * t3166;
t3121 = t2947 * t3159;
t3120 = t2949 * t3159;
t3119 = t2951 * t3152;
t3118 = t2953 * t3152;
t3117 = t2973 * t3167;
t3116 = t2964 * t3144;
t3115 = t3021 * t3167;
t3114 = t2965 * t2976 * t3213;
t3113 = t2965 * t3144;
t3112 = t2974 * t3160;
t3111 = t2966 * t3143;
t3110 = t3023 * t3160;
t3109 = t2967 * t2977 * t3210;
t3108 = t2967 * t3143;
t3107 = t2975 * t3153;
t3106 = t2968 * t3142;
t3105 = t3025 * t3153;
t3104 = t2969 * t2978 * t3207;
t3103 = t2969 * t3142;
t3096 = MDP(12) * t2964 * (-t2973 - t2976);
t3095 = MDP(12) * t2966 * (-t2974 - t2977);
t3094 = MDP(12) * t2968 * (-t2975 - t2978);
t3093 = (-0.2e1 * t2913 - t3286) * t3027;
t3092 = (0.2e1 * t2914 - t3287) * t3027;
t3091 = (-0.2e1 * t2915 - t3284) * t3028;
t3090 = (0.2e1 * t2916 - t3285) * t3028;
t3089 = (-0.2e1 * t2917 - t3282) * t3029;
t3088 = (0.2e1 * t2918 - t3283) * t3029;
t3087 = t2943 * t3113;
t3086 = t2945 * t3113;
t3085 = t2947 * t3108;
t3084 = t2949 * t3108;
t3083 = t2951 * t3103;
t3082 = t2953 * t3103;
t3081 = (-t2913 * t3115 - t2915 * t3110 - t2917 * t3105) * MDP(8) + t3312 * (t2945 * t3168 + t2949 * t3161 + t2953 * t3154) + t3313 * (t2945 * t3116 + t2949 * t3111 + t2953 * t3106);
t3080 = (t2914 * t3115 + t2916 * t3110 + t2918 * t3105) * MDP(8) + t3312 * (t2943 * t3168 + t2947 * t3161 + t2951 * t3154) + t3313 * (t2943 * t3116 + t2947 * t3111 + t2951 * t3106);
t2929 = -t2961 + t3195;
t3079 = t3311 * (-t2929 + t3027) * t3021;
t2931 = -t2962 + t3194;
t3078 = t3311 * (-t2931 + t3028) * t3023;
t2933 = -t2963 + t3193;
t3077 = t3311 * (-t2933 + t3029) * t3025;
t3064 = (t2917 * t2951 - t2918 * t2953) * t3230;
t3065 = (t2915 * t2947 - t2916 * t2949) * t3233;
t3066 = (t2913 * t2943 - t2914 * t2945) * t3236;
t3073 = (t3064 * t3216 + t3065 * t3218 + t3066 * t3220) * MDP(6) + (t3018 * t3066 + t3019 * t3065 + t3020 * t3064) * MDP(7) + (-t2913 * t2914 * t3165 - t2915 * t2916 * t3158 - t2917 * t2918 * t3151) * MDP(8) + (t3150 * t3304 + t3157 * t3305 + t3164 * t3306) * t3299 + (t3015 * t3171 + t3016 * t3170 + t3017 * t3169) * MDP(4) + (t3169 + t3170 + t3171) * MDP(1);
t3072 = -0.2e1 * pkin(2) * t3018 - 0.2e1 * t3303;
t3071 = -0.2e1 * pkin(2) * t3019 - 0.2e1 * t3302;
t3070 = -0.2e1 * pkin(2) * t3020 - 0.2e1 * t3301;
t2828 = ((t3192 - t3259) * pkin(2) + (t2914 * t3205 + (t2914 - t3287) * qJ(3,3)) * t3027) * t2964;
t2841 = -t2874 + (0.2e1 * t3141 + t3192) * t2964;
t2897 = t2964 * t3092;
t3063 = t2841 * MDP(11) + t2897 * MDP(13) + t2828 * MDP(14);
t2829 = ((-t2878 * t3033 + t3191) * pkin(2) + (-t2913 * t3205 + (-t2913 - t3286) * qJ(3,3)) * t3027) * t2964;
t2840 = (t3191 + (-t2878 - 0.2e1 * t3198) * t3033) * t2964;
t2896 = t2964 * t3093;
t3062 = t2840 * MDP(11) + t2896 * MDP(13) + t2829 * MDP(14);
t2830 = ((t3190 - t3258) * pkin(2) + (t2916 * t3204 + (t2916 - t3285) * qJ(3,2)) * t3028) * t2966;
t2843 = -t2875 + (0.2e1 * t3140 + t3190) * t2966;
t2899 = t2966 * t3090;
t3061 = t2843 * MDP(11) + t2899 * MDP(13) + t2830 * MDP(14);
t2831 = ((-t2880 * t3036 + t3189) * pkin(2) + (-t2915 * t3204 + (-t2915 - t3284) * qJ(3,2)) * t3028) * t2966;
t2842 = (t3189 + (-t2880 - 0.2e1 * t3197) * t3036) * t2966;
t2898 = t2966 * t3091;
t3060 = t2842 * MDP(11) + t2898 * MDP(13) + t2831 * MDP(14);
t2832 = ((t3188 - t3257) * pkin(2) + (t2918 * t3203 + (t2918 - t3283) * qJ(3,1)) * t3029) * t2968;
t2845 = -t2876 + (0.2e1 * t3139 + t3188) * t2968;
t2901 = t2968 * t3088;
t3059 = t2845 * MDP(11) + t2901 * MDP(13) + t2832 * MDP(14);
t2833 = ((-t2882 * t3039 + t3187) * pkin(2) + (-t2917 * t3203 + (-t2917 - t3282) * qJ(3,1)) * t3029) * t2968;
t2844 = (t3187 + (-t2882 - 0.2e1 * t3196) * t3039) * t2968;
t2900 = t2968 * t3089;
t3058 = t2844 * MDP(11) + t2900 * MDP(13) + t2833 * MDP(14);
t3057 = 0.2e1 * (-pkin(2) * t3027 - pkin(1)) * t3021 + (0.2e1 * t3018 - 0.2e1) * qJ(3,3);
t3056 = 0.2e1 * (-pkin(2) * t3028 - pkin(1)) * t3023 + (0.2e1 * t3019 - 0.2e1) * qJ(3,2);
t3055 = 0.2e1 * (-pkin(2) * t3029 - pkin(1)) * t3025 + (0.2e1 * t3020 - 0.2e1) * qJ(3,1);
t3038 = qJ(3,1) ^ 2;
t3054 = -t3266 * t3301 + t3002 * t3300 - (-t3038 + t3042) * t3020 - t3038 - t3202;
t3035 = qJ(3,2) ^ 2;
t3053 = -t3266 * t3302 + t3001 * t3300 - (-t3035 + t3042) * t3019 - t3035 - t3202;
t3032 = qJ(3,3) ^ 2;
t3052 = -t3266 * t3303 + t3000 * t3300 - (-t3032 + t3042) * t3018 - t3032 - t3202;
t3049 = t2913 * t3122 + t2915 * t3120 + t2917 * t3118;
t3048 = t2914 * t3123 + t2916 * t3121 + t2918 * t3119;
t3045 = t2913 * t3086 + t2915 * t3084 + t2917 * t3082;
t3044 = t2914 * t3087 + t2916 * t3085 + t2918 * t3083;
t2942 = t2953 ^ 2;
t2941 = t2951 ^ 2;
t2940 = t2949 ^ 2;
t2939 = t2947 ^ 2;
t2938 = t2945 ^ 2;
t2937 = t2943 ^ 2;
t2912 = pkin(5) * t2917 * t3106;
t2911 = pkin(5) * t2915 * t3111;
t2910 = pkin(5) * t2913 * t3116;
t2895 = (t2951 * t3199 - t3131) * t2968;
t2894 = (t2953 * t3199 + t3132) * t2968;
t2893 = (t2947 * t3200 - t3134) * t2966;
t2892 = (t2949 * t3200 + t3135) * t2966;
t2891 = (t2943 * t3201 - t3137) * t2964;
t2890 = (t2945 * t3201 + t3138) * t2964;
t2889 = (t2951 * t3300 - t3130) * t3232;
t2888 = t2953 * t3232 * t3300 + t2912;
t2887 = (t2947 * t3300 - t3133) * t3235;
t2886 = t2949 * t3235 * t3300 + t2911;
t2885 = (t2943 * t3300 - t3136) * t3238;
t2884 = t2945 * t3238 * t3300 + t2910;
t2871 = t3070 * t3239 + t2912;
t2870 = (t2951 * t3070 - t3029 * t3130) * t2968;
t2869 = t3071 * t3241 + t2911;
t2868 = (t2947 * t3071 - t3028 * t3133) * t2966;
t2867 = t3072 * t3243 + t2910;
t2866 = (t2943 * t3072 - t3027 * t3136) * t2964;
t2865 = (t3055 * t2953 - t3132) * t2968;
t2864 = (t3055 * t2951 + t3131) * t2968;
t2863 = (t3056 * t2949 - t3135) * t2966;
t2862 = (t3056 * t2947 + t3134) * t2966;
t2861 = (t3057 * t2945 - t3138) * t2964;
t2860 = (t3057 * t2943 + t3137) * t2964;
t2851 = (t3074 - t3187) * t2968;
t2850 = t2876 + (-t3139 - t3188) * t2968;
t2849 = (t3075 - t3189) * t2966;
t2848 = t2875 + (-t3140 - t3190) * t2966;
t2847 = (t3076 - t3191) * t2964;
t2846 = t2874 + (-t3141 - t3192) * t2964;
t2839 = -t3260 + (t2918 * t3020 - 0.2e1 * t3283) * t2968;
t2838 = t3261 + (-t2917 * t3020 - 0.2e1 * t3282) * t2968;
t2837 = -t3262 + (t2916 * t3019 - 0.2e1 * t3285) * t2966;
t2836 = t3263 + (-t2915 * t3019 - 0.2e1 * t3284) * t2966;
t2835 = -t3264 + (t2914 * t3018 - 0.2e1 * t3287) * t2964;
t2834 = t3265 + (-t2913 * t3018 - 0.2e1 * t3286) * t2964;
t2826 = pkin(5) * t3261 + (-t2917 * t3273 + t3054 * t2953) * t2968;
t2825 = -pkin(5) * t3260 + (t2918 * t3273 + t3054 * t2951) * t2968;
t2824 = pkin(5) * t3263 + (-t2915 * t3274 + t3053 * t2949) * t2966;
t2823 = -pkin(5) * t3262 + (t2916 * t3274 + t3053 * t2947) * t2966;
t2822 = pkin(5) * t3265 + (-t2913 * t3275 + t3052 * t2945) * t2964;
t2821 = -pkin(5) * t3264 + (t2914 * t3275 + t3052 * t2943) * t2964;
t1 = [(t2938 * t2965 + t2940 * t2967 + t2942 * t2969) * MDP(1) + (t2938 * t3237 + t2940 * t3234 + t2942 * t3231) * MDP(4) + (t2913 ^ 2 * t3165 + t2915 ^ 2 * t3158 + t2917 ^ 2 * t3151) * MDP(8) + (t2878 * t3129 + t2880 * t3127 + t2882 * t3125) * MDP(11) + ((-t2882 * t3149 + t2917 * t3104) * t2953 + (-t2880 * t3156 + t2915 * t3109) * t2949 + (-t2878 * t3163 + t2913 * t3114) * t2945) * MDP(12) + MDP(15) + (t2938 * t3164 + t2940 * t3157 + t2942 * t3150) * t3299 + 0.2e1 * t3045 * MDP(6) + 0.2e1 * t3049 * MDP(7) + ((t2851 * t2882 * MDP(14) - t3058 * t3252) * t3039 + (-t2894 * MDP(10) - t2871 * MDP(11) - t2838 * MDP(12) - t2865 * MDP(13) - t2826 * MDP(14) - t2888 * MDP(9)) * t2953) * t2968 + ((t2849 * t2880 * MDP(14) - t3060 * t3254) * t3036 + (-t2892 * MDP(10) - t2869 * MDP(11) - t2836 * MDP(12) - t2863 * MDP(13) - t2824 * MDP(14) - t2886 * MDP(9)) * t2949) * t2966 + ((t2847 * t2878 * MDP(14) - t3062 * t3256) * t3033 + (-t2890 * MDP(10) - t2867 * MDP(11) - t2834 * MDP(12) - t2861 * MDP(13) - t2822 * MDP(14) - t2884 * MDP(9)) * t2945) * t2964 + (-t3049 * MDP(10) - t3045 * MDP(9)) * pkin(5); (-t2885 * t3243 - t2887 * t3241 - t2889 * t3239 + (-t2913 * t3087 - t2915 * t3085 - t2917 * t3083) * pkin(5)) * MDP(9) + (-t2891 * t3243 - t2893 * t3241 - t2895 * t3239 + (-t2913 * t3123 - t2915 * t3121 - t2917 * t3119) * pkin(5)) * MDP(10) + (-t2878 * t3128 - t2880 * t3126 - t2882 * t3124 + (-t2845 * t3173 - t2870 * t2953) * t2968 + (-t2843 * t3175 - t2868 * t2949) * t2966 + (-t2841 * t3177 - t2866 * t2945) * t2964) * MDP(11) + (-t2835 * t3243 - t2837 * t3241 - t2839 * t3239 + (-t2882 * t3025 + t2917 * t3227) * t2951 * t3230 + (-t2880 * t3023 + t2915 * t3228) * t2947 * t3233 + (-t2878 * t3021 + t2913 * t3229) * t2943 * t3236) * MDP(12) + ((-t2864 * t2953 - t2901 * t3173) * t2968 + (-t2862 * t2949 - t2899 * t3175) * t2966 + (-t2860 * t2945 - t2897 * t3177) * t2964) * MDP(13) + ((-t2825 * t2953 + (-t2832 * t3252 + t2850 * t2882) * t3039) * t2968 + (-t2823 * t2949 + (-t2830 * t3254 + t2848 * t2880) * t3036) * t2966 + (-t2821 * t2945 + (-t2828 * t3256 + t2846 * t2878) * t3033) * t2964) * MDP(14) + t3073; (-t2882 * t3178 + t3077 * t2953 + ((-t2917 * t3245 + t2953 * t3279) * MDP(11) + (-t2882 * t2933 - t2917 * t3248) * MDP(14) + t3089 * t3307) * t3039) * t2968 + (-t2880 * t3179 + t3078 * t2949 + ((-t2915 * t3246 + t2949 * t3280) * MDP(11) + (-t2880 * t2931 - t2915 * t3249) * MDP(14) + t3091 * t3308) * t3036) * t2966 + (-t2878 * t3180 + t3079 * t2945 + ((-t2913 * t3247 + t2945 * t3281) * MDP(11) + (-t2878 * t2929 - t2913 * t3250) * MDP(14) + t3093 * t3309) * t3033) * t2964 + t3081; (-t2884 * t3244 - t2886 * t3242 - t2888 * t3240 + (t2914 * t3086 + t2916 * t3084 + t2918 * t3082) * pkin(5)) * MDP(9) + (-t2890 * t3244 - t2892 * t3242 - t2894 * t3240 + (t2914 * t3122 + t2916 * t3120 + t2918 * t3118) * pkin(5)) * MDP(10) + (t2879 * t3129 + t2881 * t3127 + t2883 * t3125 + (t2844 * t3172 - t2871 * t2951) * t2968 + (t2842 * t3174 - t2869 * t2947) * t2966 + (t2840 * t3176 - t2867 * t2943) * t2964) * MDP(11) + (-t2834 * t3244 - t2836 * t3242 - t2838 * t3240 + (-t2883 * t3025 - t2918 * t3227) * t2953 * t3230 + (-t2881 * t3023 - t2916 * t3228) * t2949 * t3233 + (-t2879 * t3021 - t2914 * t3229) * t2945 * t3236) * MDP(12) + ((-t2865 * t2951 + t2900 * t3172) * t2968 + (-t2863 * t2947 + t2898 * t3174) * t2966 + (-t2861 * t2943 + t2896 * t3176) * t2964) * MDP(13) + ((-t2826 * t2951 + (t2833 * t3251 + t2851 * t2883) * t3039) * t2968 + (-t2824 * t2947 + (t2831 * t3253 + t2849 * t2881) * t3036) * t2966 + (-t2822 * t2943 + (t2829 * t3255 + t2847 * t2879) * t3033) * t2964) * MDP(14) + t3073; (t2937 * t2965 + t2939 * t2967 + t2941 * t2969) * MDP(1) + (t2937 * t3237 + t2939 * t3234 + t2941 * t3231) * MDP(4) + (t2914 ^ 2 * t3165 + t2916 ^ 2 * t3158 + t2918 ^ 2 * t3151) * MDP(8) + (-t2879 * t3128 - t2881 * t3126 - t2883 * t3124) * MDP(11) + ((-t2883 * t3149 - t2918 * t3104) * t2951 + (-t2881 * t3156 - t2916 * t3109) * t2947 + (-t2879 * t3163 - t2914 * t3114) * t2943) * MDP(12) + MDP(15) + (t2937 * t3164 + t2939 * t3157 + t2941 * t3150) * t3299 - 0.2e1 * t3044 * MDP(6) - 0.2e1 * t3048 * MDP(7) + ((t2850 * t2883 * MDP(14) + t3059 * t3251) * t3039 + (-t2895 * MDP(10) - t2870 * MDP(11) - t2839 * MDP(12) - t2864 * MDP(13) - t2825 * MDP(14) - t2889 * MDP(9)) * t2951) * t2968 + ((t2848 * t2881 * MDP(14) + t3061 * t3253) * t3036 + (-t2893 * MDP(10) - t2868 * MDP(11) - t2837 * MDP(12) - t2862 * MDP(13) - t2823 * MDP(14) - t2887 * MDP(9)) * t2947) * t2966 + ((t2846 * t2879 * MDP(14) + t3063 * t3255) * t3033 + (-t2891 * MDP(10) - t2866 * MDP(11) - t2835 * MDP(12) - t2860 * MDP(13) - t2821 * MDP(14) - t2885 * MDP(9)) * t2943) * t2964 + (MDP(10) * t3048 + MDP(9) * t3044) * pkin(5); (-t2883 * t3178 + t3077 * t2951 + ((t2918 * t3245 + t2951 * t3279) * MDP(11) + (-t2883 * t2933 + t2918 * t3248) * MDP(14) + t3088 * t3307) * t3039) * t2968 + (-t2881 * t3179 + t3078 * t2947 + ((t2916 * t3246 + t2947 * t3280) * MDP(11) + (-t2881 * t2931 + t2916 * t3249) * MDP(14) + t3090 * t3308) * t3036) * t2966 + (-t2879 * t3180 + t3079 * t2943 + ((t2914 * t3247 + t2943 * t3281) * MDP(11) + (-t2879 * t2929 + t2914 * t3250) * MDP(14) + t3092 * t3309) * t3033) * t2964 + t3080; (t2913 * t3117 + t2915 * t3112 + t2917 * t3107) * MDP(11) + (t2851 * t3267 + (t2953 * t3094 + t3058) * t3025) * t3039 + (t2849 * t3268 + (t2949 * t3095 + t3060) * t3023) * t3036 + (t2847 * t3269 + (t2945 * t3096 + t3062) * t3021) * t3033 + t3081; (-t2914 * t3117 - t2916 * t3112 - t2918 * t3107) * MDP(11) + (t2850 * t3267 + (t2951 * t3094 + t3059) * t3025) * t3039 + (t2848 * t3268 + (t2947 * t3095 + t3061) * t3023) * t3036 + (t2846 * t3269 + (t2943 * t3096 + t3063) * t3021) * t3033 + t3080; (t3015 * t3034 + t3016 * t3037 + t3017 * t3040) * MDP(8) + ((t2932 * t3039 - t2975 * t3040) * t3025 + (t2930 * t3036 - t2974 * t3037) * t3023 + (t2928 * t3033 - t2973 * t3034) * t3021) * MDP(11) + 0.2e1 * (t3224 + t3225 + t3226) * MDP(13) + ((t2927 * t3025 - t2933 * t2975) * t3039 + (t2926 * t3023 - t2931 * t2974) * t3036 + (t2925 * t3021 - t2929 * t2973) * t3033) * MDP(14) + MDP(15);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
