% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR12V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR12V2G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G1A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:16:21
% EndTime: 2020-08-06 19:16:45
% DurationCPUTime: 23.24s
% Computational Cost: add. (204543->752), mult. (278433->1237), div. (12477->12), fcn. (148530->18), ass. (0->469)
t2472 = xDP(2);
t2473 = xDP(1);
t2474 = pkin(5) - pkin(6);
t2391 = pkin(1) * t2472 + t2473 * t2474;
t2461 = sin(qJ(2,2));
t2728 = qJ(3,2) * t2472;
t2311 = t2391 * t2461 + t2728;
t2392 = pkin(1) * t2473 - t2472 * t2474;
t2727 = qJ(3,2) * t2473;
t2314 = t2392 * t2461 + t2727;
t2632 = t2461 * t2727;
t2321 = t2392 + 0.2e1 * t2632;
t2633 = t2461 * t2728;
t2327 = 0.2e1 * t2633 + t2391;
t2413 = pkin(1) * t2461 + qJ(3,2);
t2454 = legFrame(2,3);
t2425 = sin(t2454);
t2428 = cos(t2454);
t2467 = cos(qJ(2,2));
t2448 = t2467 ^ 2;
t2462 = sin(qJ(1,2));
t2468 = cos(qJ(1,2));
t2471 = xDP(3);
t2475 = pkin(2) + pkin(3);
t2370 = -t2462 * t2473 + t2468 * t2472;
t2372 = t2462 * t2472 + t2468 * t2473;
t2538 = t2370 * t2425 + t2372 * t2428;
t2671 = (qJ(3,2) + t2475) * (-qJ(3,2) + t2475);
t2584 = t2448 * t2671;
t2657 = t2471 * t2475;
t2641 = -0.2e1 * t2657;
t2756 = pkin(1) * qJ(3,2);
t2251 = t2538 * t2584 + (-t2471 * (-t2461 * t2671 + t2756) + ((t2321 * t2468 + t2327 * t2462) * t2428 + (-t2321 * t2462 + t2327 * t2468) * t2425) * t2475) * t2467 + t2413 * t2657 + (t2641 * t2448 + (t2311 * t2462 + t2314 * t2468) * t2428 + (t2311 * t2468 - t2314 * t2462) * t2425) * qJ(3,2);
t2730 = qJ(3,2) * t2461;
t2409 = pkin(1) + t2730;
t2659 = t2467 * t2475;
t2386 = t2409 + t2659;
t2379 = 0.1e1 / t2386;
t2480 = 0.1e1 / qJ(3,2);
t2689 = t2379 * t2480;
t2248 = t2251 * t2689;
t2242 = t2474 * t2248;
t2322 = t2392 + t2632;
t2328 = t2633 + t2391;
t2269 = (-qJ(3,2) * t2471 + t2538 * t2475) * t2448 + ((t2322 * t2468 + t2328 * t2462) * t2428 + (-t2322 * t2462 + t2328 * t2468) * t2425 + t2461 * t2657) * t2467 + t2471 * t2413;
t2301 = t2370 * t2428 - t2372 * t2425;
t2447 = t2467 * t2448;
t2479 = qJ(3,2) ^ 2;
t2705 = t2301 * t2379;
t2567 = t2671 * t2705;
t2642 = 0.2e1 * t2475;
t2487 = pkin(1) ^ 2;
t2646 = t2474 ^ 2 + t2487;
t2691 = t2379 * t2448;
t2713 = t2269 * t2480;
t2809 = t2474 * t2475;
t2205 = -t2447 * t2567 + (-t2409 * t2301 * t2642 - t2269 * t2474) * t2691 + (-t2242 * t2461 + ((-0.2e1 * t2301 * t2756 + t2713 * t2809) * t2461 - t2301 * (t2479 + t2646)) * t2379) * t2467;
t2612 = t2269 * t2689;
t2263 = pkin(2) * t2612;
t2223 = t2263 - t2248;
t2218 = -pkin(3) * t2612 - t2223;
t2663 = t2461 * t2474;
t2597 = t2301 * t2663;
t2654 = t2475 * t2480;
t2256 = (-t2269 * t2654 + t2597) * t2379;
t2703 = t2301 * t2474;
t2634 = qJ(3,2) * t2703;
t2543 = (-t2634 * t2691 + ((-pkin(3) * t2713 + t2597) * t2379 - t2223) * t2659 + t2218 * t2409) * t2269 + (-t2256 * t2467 + t2409 * t2612) * t2251;
t2380 = 0.1e1 / t2386 ^ 2;
t2481 = 0.1e1 / qJ(3,2) ^ 2;
t2687 = t2380 * t2481;
t2704 = t2301 * t2380;
t2333 = t2425 * t2462 - t2428 * t2468;
t2419 = t2474 * t2468;
t2340 = t2409 * t2462 - t2419;
t2416 = t2462 * t2474;
t2576 = t2409 * t2468 + t2416;
t2288 = t2333 * t2659 + t2340 * t2425 - t2576 * t2428;
t2334 = t2425 * t2468 + t2428 * t2462;
t2289 = t2334 * t2659 + t2340 * t2428 + t2425 * t2576;
t2456 = xDDP(3);
t2457 = xDDP(2);
t2458 = xDDP(1);
t2778 = (t2288 * t2458 - t2289 * t2457) * t2379 * t2467 - t2456 * t2461;
t2158 = -t2543 * t2687 + (-t2205 * t2704 - t2778) * t2480;
t2688 = t2380 * t2480;
t2598 = t2301 * t2688;
t2569 = t2269 * t2598;
t2802 = 0.2e1 * pkin(1);
t2145 = pkin(5) * t2158 + t2569 * t2802;
t2818 = t2145 * t2461;
t2817 = t2145 * t2467;
t2459 = sin(qJ(2,3));
t2723 = qJ(3,3) * t2472;
t2310 = t2391 * t2459 + t2723;
t2722 = qJ(3,3) * t2473;
t2313 = t2392 * t2459 + t2722;
t2628 = t2459 * t2722;
t2319 = t2392 + 0.2e1 * t2628;
t2629 = t2459 * t2723;
t2325 = 0.2e1 * t2629 + t2391;
t2412 = pkin(1) * t2459 + qJ(3,3);
t2453 = legFrame(3,3);
t2424 = sin(t2453);
t2427 = cos(t2453);
t2465 = cos(qJ(2,3));
t2446 = t2465 ^ 2;
t2460 = sin(qJ(1,3));
t2466 = cos(qJ(1,3));
t2371 = t2460 * t2472 + t2466 * t2473;
t2374 = -t2460 * t2473 + t2466 * t2472;
t2537 = t2371 * t2427 + t2374 * t2424;
t2672 = (qJ(3,3) + t2475) * (-qJ(3,3) + t2475);
t2585 = t2446 * t2672;
t2755 = pkin(1) * qJ(3,3);
t2250 = t2537 * t2585 + (-t2471 * (-t2459 * t2672 + t2755) + ((t2319 * t2466 + t2325 * t2460) * t2427 + (-t2319 * t2460 + t2325 * t2466) * t2424) * t2475) * t2465 + t2412 * t2657 + (t2641 * t2446 + (t2310 * t2460 + t2313 * t2466) * t2427 + (t2310 * t2466 - t2313 * t2460) * t2424) * qJ(3,3);
t2725 = qJ(3,3) * t2459;
t2407 = pkin(1) + t2725;
t2660 = t2465 * t2475;
t2385 = t2407 + t2660;
t2376 = 0.1e1 / t2385;
t2477 = 0.1e1 / qJ(3,3);
t2694 = t2376 * t2477;
t2247 = t2250 * t2694;
t2241 = t2474 * t2247;
t2320 = t2392 + t2628;
t2326 = t2629 + t2391;
t2268 = (-qJ(3,3) * t2471 + t2537 * t2475) * t2446 + ((t2320 * t2466 + t2326 * t2460) * t2427 + (-t2320 * t2460 + t2326 * t2466) * t2424 + t2459 * t2657) * t2465 + t2471 * t2412;
t2302 = -t2371 * t2424 + t2374 * t2427;
t2445 = t2465 * t2446;
t2476 = qJ(3,3) ^ 2;
t2702 = t2302 * t2376;
t2566 = t2672 * t2702;
t2696 = t2376 * t2446;
t2714 = t2268 * t2477;
t2206 = -t2445 * t2566 + (-t2407 * t2302 * t2642 - t2268 * t2474) * t2696 + (-t2241 * t2459 + ((-0.2e1 * t2302 * t2755 + t2714 * t2809) * t2459 - t2302 * (t2476 + t2646)) * t2376) * t2465;
t2615 = t2268 * t2694;
t2262 = pkin(2) * t2615;
t2221 = t2262 - t2247;
t2217 = -pkin(3) * t2615 - t2221;
t2665 = t2459 * t2474;
t2593 = t2302 * t2665;
t2655 = t2475 * t2477;
t2257 = (-t2268 * t2655 + t2593) * t2376;
t2700 = t2302 * t2474;
t2630 = qJ(3,3) * t2700;
t2544 = (-t2630 * t2696 + ((-pkin(3) * t2714 + t2593) * t2376 - t2221) * t2660 + t2217 * t2407) * t2268 + (-t2257 * t2465 + t2407 * t2615) * t2250;
t2377 = 0.1e1 / t2385 ^ 2;
t2478 = 0.1e1 / qJ(3,3) ^ 2;
t2692 = t2377 * t2478;
t2701 = t2302 * t2377;
t2331 = t2424 * t2460 - t2427 * t2466;
t2418 = t2474 * t2466;
t2338 = t2407 * t2460 - t2418;
t2415 = t2460 * t2474;
t2578 = t2407 * t2466 + t2415;
t2286 = t2331 * t2660 + t2338 * t2424 - t2578 * t2427;
t2332 = t2424 * t2466 + t2427 * t2460;
t2287 = t2332 * t2660 + t2338 * t2427 + t2424 * t2578;
t2777 = (t2286 * t2458 - t2287 * t2457) * t2376 * t2465 - t2456 * t2459;
t2157 = -t2544 * t2692 + (-t2206 * t2701 - t2777) * t2477;
t2693 = t2377 * t2477;
t2594 = t2302 * t2693;
t2570 = t2268 * t2594;
t2146 = pkin(5) * t2157 + t2570 * t2802;
t2816 = t2146 * t2459;
t2815 = t2146 * t2465;
t2463 = sin(qJ(2,1));
t2733 = qJ(3,1) * t2472;
t2312 = t2391 * t2463 + t2733;
t2732 = qJ(3,1) * t2473;
t2315 = t2392 * t2463 + t2732;
t2636 = t2463 * t2732;
t2323 = t2392 + 0.2e1 * t2636;
t2637 = t2463 * t2733;
t2329 = 0.2e1 * t2637 + t2391;
t2414 = pkin(1) * t2463 + qJ(3,1);
t2455 = legFrame(1,3);
t2426 = sin(t2455);
t2429 = cos(t2455);
t2469 = cos(qJ(2,1));
t2450 = t2469 ^ 2;
t2464 = sin(qJ(1,1));
t2470 = cos(qJ(1,1));
t2373 = t2464 * t2472 + t2470 * t2473;
t2375 = -t2464 * t2473 + t2470 * t2472;
t2536 = t2373 * t2429 + t2375 * t2426;
t2670 = (qJ(3,1) + t2475) * (-qJ(3,1) + t2475);
t2583 = t2450 * t2670;
t2757 = pkin(1) * qJ(3,1);
t2252 = t2536 * t2583 + (-t2471 * (-t2463 * t2670 + t2757) + ((t2323 * t2470 + t2329 * t2464) * t2429 + (-t2323 * t2464 + t2329 * t2470) * t2426) * t2475) * t2469 + t2414 * t2657 + (t2641 * t2450 + (t2312 * t2464 + t2315 * t2470) * t2429 + (t2312 * t2470 - t2315 * t2464) * t2426) * qJ(3,1);
t2735 = qJ(3,1) * t2463;
t2411 = pkin(1) + t2735;
t2658 = t2469 * t2475;
t2387 = t2411 + t2658;
t2382 = 0.1e1 / t2387;
t2483 = 0.1e1 / qJ(3,1);
t2684 = t2382 * t2483;
t2249 = t2252 * t2684;
t2243 = t2474 * t2249;
t2324 = t2392 + t2636;
t2330 = t2637 + t2391;
t2270 = (-qJ(3,1) * t2471 + t2536 * t2475) * t2450 + ((t2324 * t2470 + t2330 * t2464) * t2429 + (-t2324 * t2464 + t2330 * t2470) * t2426 + t2463 * t2657) * t2469 + t2471 * t2414;
t2303 = -t2373 * t2426 + t2375 * t2429;
t2449 = t2469 * t2450;
t2482 = qJ(3,1) ^ 2;
t2699 = t2303 * t2382;
t2565 = t2670 * t2699;
t2686 = t2382 * t2450;
t2712 = t2270 * t2483;
t2207 = -t2449 * t2565 + (-t2411 * t2303 * t2642 - t2270 * t2474) * t2686 + (-t2243 * t2463 + ((-0.2e1 * t2303 * t2757 + t2712 * t2809) * t2463 - t2303 * (t2482 + t2646)) * t2382) * t2469;
t2609 = t2270 * t2684;
t2264 = pkin(2) * t2609;
t2225 = t2264 - t2249;
t2219 = -pkin(3) * t2609 - t2225;
t2661 = t2463 * t2474;
t2589 = t2303 * t2661;
t2653 = t2475 * t2483;
t2258 = (-t2270 * t2653 + t2589) * t2382;
t2697 = t2303 * t2474;
t2638 = qJ(3,1) * t2697;
t2542 = (-t2638 * t2686 + ((-pkin(3) * t2712 + t2589) * t2382 - t2225) * t2658 + t2219 * t2411) * t2270 + (-t2258 * t2469 + t2411 * t2609) * t2252;
t2383 = 0.1e1 / t2387 ^ 2;
t2484 = 0.1e1 / qJ(3,1) ^ 2;
t2682 = t2383 * t2484;
t2698 = t2303 * t2383;
t2335 = t2426 * t2464 - t2429 * t2470;
t2420 = t2474 * t2470;
t2342 = t2411 * t2464 - t2420;
t2417 = t2464 * t2474;
t2574 = t2411 * t2470 + t2417;
t2290 = t2335 * t2658 + t2342 * t2426 - t2574 * t2429;
t2336 = t2426 * t2470 + t2429 * t2464;
t2291 = t2336 * t2658 + t2342 * t2429 + t2426 * t2574;
t2779 = (t2290 * t2458 - t2291 * t2457) * t2382 * t2469 - t2456 * t2463;
t2159 = -t2542 * t2682 + (-t2207 * t2698 - t2779) * t2483;
t2683 = t2383 * t2483;
t2590 = t2303 * t2683;
t2568 = t2270 * t2590;
t2147 = t2159 * pkin(5) + t2568 * t2802;
t2814 = t2147 * t2463;
t2813 = t2147 * t2469;
t2384 = t2382 * t2383;
t2586 = t2384 * t2463 * t2483;
t2734 = qJ(3,1) * t2469;
t2390 = t2463 * t2475 - t2734;
t2679 = t2390 * t2483;
t2204 = -t2249 * t2463 * t2698 + (-t2336 * t2458 - t2335 * t2457 - (t2697 + (-t2463 * t2653 + t2469) * t2270) * t2698) * t2382 + (t2384 * t2270 * t2679 - t2252 * t2586) * t2303;
t2201 = pkin(5) * t2204;
t2400 = -g(1) * t2464 + g(2) * t2470;
t2401 = g(1) * t2470 + g(2) * t2464;
t2647 = -t2400 * t2426 - t2401 * t2429;
t2300 = t2303 ^ 2;
t2707 = t2300 * t2383;
t2562 = -pkin(1) * t2707 + t2201 + t2647;
t2810 = t2562 * t2463;
t2381 = t2379 * t2380;
t2587 = t2381 * t2461 * t2480;
t2729 = qJ(3,2) * t2467;
t2389 = t2461 * t2475 - t2729;
t2680 = t2389 * t2480;
t2203 = -t2248 * t2461 * t2704 + (-t2334 * t2458 - t2333 * t2457 - (t2703 + (-t2461 * t2654 + t2467) * t2269) * t2704) * t2379 + (t2381 * t2269 * t2680 - t2251 * t2587) * t2301;
t2200 = pkin(5) * t2203;
t2398 = -t2462 * g(1) + g(2) * t2468;
t2399 = g(1) * t2468 + g(2) * t2462;
t2648 = -t2398 * t2425 - t2399 * t2428;
t2298 = t2301 ^ 2;
t2711 = t2298 * t2380;
t2563 = -pkin(1) * t2711 + t2200 + t2648;
t2811 = t2563 * t2461;
t2378 = t2376 * t2377;
t2588 = t2378 * t2459 * t2477;
t2724 = qJ(3,3) * t2465;
t2388 = t2459 * t2475 - t2724;
t2681 = t2388 * t2477;
t2202 = -t2247 * t2459 * t2701 + (-t2332 * t2458 - t2331 * t2457 - (t2700 + (-t2459 * t2655 + t2465) * t2268) * t2701) * t2376 + (t2378 * t2268 * t2681 - t2250 * t2588) * t2302;
t2199 = pkin(5) * t2202;
t2396 = -t2460 * g(1) + g(2) * t2466;
t2397 = g(1) * t2466 + g(2) * t2460;
t2649 = -t2396 * t2424 - t2397 * t2427;
t2299 = t2302 ^ 2;
t2709 = t2299 * t2377;
t2564 = -pkin(1) * t2709 + t2199 + t2649;
t2812 = t2564 * t2459;
t2767 = 0.2e1 * t2202;
t2766 = 0.2e1 * t2203;
t2765 = 0.2e1 * t2204;
t2393 = -pkin(2) * t2459 + t2724;
t2764 = -0.2e1 * t2446;
t2754 = t2764 + 0.1e1;
t2283 = t2754 * t2709;
t2717 = t2217 * t2475;
t2211 = -qJ(3,3) * t2268 * t2376 + t2717;
t2316 = t2412 * t2460 - t2459 * t2418;
t2406 = pkin(1) + 0.2e1 * t2725;
t2337 = t2406 * t2460 - t2418;
t2529 = t2412 * t2466 + t2459 * t2415;
t2579 = t2406 * t2466 + t2415;
t2277 = -t2331 * t2585 - (t2424 * t2337 - t2579 * t2427) * t2660 - (t2424 * t2316 - t2529 * t2427) * qJ(3,3);
t2278 = t2332 * t2585 + (t2337 * t2427 + t2579 * t2424) * t2660 + (t2316 * t2427 + t2529 * t2424) * qJ(3,3);
t2435 = pkin(5) ^ 2 + t2487;
t2402 = (-0.2e1 * pkin(5) + pkin(6)) * pkin(6) + t2435;
t2551 = 0.2e1 * t2809;
t2558 = t2475 * (-pkin(5) / 0.2e1 + pkin(6) / 0.2e1);
t2631 = qJ(3,3) * t2702;
t2580 = pkin(1) * t2631;
t2596 = t2475 * t2702;
t2614 = t2268 * t2692;
t2761 = -0.3e1 * t2476;
t2771 = t2475 ^ 2;
t2772 = -0.2e1 * qJ(3,3);
t2792 = t2476 - t2771;
t2532 = t2456 * t2681 - (-(t2771 + t2761) * t2445 * t2596 + ((-t2551 * t2615 + t2241) * qJ(3,3) + (-0.3e1 * (-t2476 / 0.3e1 + t2771) * t2725 + t2792 * t2802) * t2702) * t2446 + (((-t2241 - 0.4e1 * t2580) * t2475 - t2792 * t2474 * t2615) * t2459 + (t2761 - t2402) * t2596) * t2465 + (-t2402 - t2476) * t2459 * t2631 + (t2580 + t2241 / 0.2e1 + t2558 * t2615) * t2772) * t2594 - ((t2211 * t2475 + t2566 * t2665) * t2465 + pkin(1) * t2717 + (t2211 * t2459 + (t2302 * t2754 * t2809 - pkin(1) * t2268) * t2376) * qJ(3,3)) * t2614 - (-t2257 * t2660 + ((pkin(1) * t2477 + t2459) * t2475 * t2268 + (t2446 - 0.1e1) * t2630) * t2376) * t2250 * t2692 + (t2277 * t2458 + t2278 * t2457) * t2694;
t2746 = g(3) * t2465;
t2511 = t2532 + t2746;
t2743 = t2157 * pkin(2);
t2514 = -t2532 + t2743;
t2603 = t2465 * t2709;
t2604 = t2459 * t2709;
t2486 = pkin(2) ^ 2;
t2645 = -t2476 + t2486;
t2721 = t2157 * qJ(3,3);
t2749 = g(3) * t2459;
t2758 = pkin(2) * g(3);
t2775 = 0.2e1 * pkin(2);
t2226 = 0.2e1 * t2250 * t2614;
t2293 = pkin(2) * t2709;
t2787 = t2293 * t2764 + t2226 + t2293;
t2807 = -t2564 * t2465 + t2749;
t2505 = t2807 * MDP(10) + ((t2603 * t2775 - t2564) * t2459 + 0.2e1 * t2743 + qJ(3,3) * t2283 - t2511) * MDP(11) + ((t2604 * t2772 + t2564) * t2465 + 0.2e1 * t2721 - t2749 + t2787) * MDP(13) + ((t2645 * t2604 - t2758) * t2465 + t2476 * t2157 + (t2514 - t2812) * pkin(2) + (t2787 - t2807) * qJ(3,3)) * MDP(14) + t2283 * MDP(5) + t2157 * MDP(8) + (-t2746 - t2812) * MDP(9);
t2808 = t2202 * t2446 * MDP(7) + ((MDP(12) * t2393 + MDP(6) * t2459) * t2202 + t2505) * t2465;
t2394 = -pkin(2) * t2461 + t2729;
t2763 = -0.2e1 * t2448;
t2753 = t2763 + 0.1e1;
t2284 = t2753 * t2711;
t2716 = t2218 * t2475;
t2212 = -qJ(3,2) * t2269 * t2379 + t2716;
t2317 = t2413 * t2462 - t2461 * t2419;
t2408 = pkin(1) + 0.2e1 * t2730;
t2339 = t2408 * t2462 - t2419;
t2528 = t2413 * t2468 + t2461 * t2416;
t2577 = t2408 * t2468 + t2416;
t2279 = -t2333 * t2584 - (t2425 * t2339 - t2577 * t2428) * t2659 - (t2425 * t2317 - t2528 * t2428) * qJ(3,2);
t2280 = t2334 * t2584 + (t2339 * t2428 + t2577 * t2425) * t2659 + (t2317 * t2428 + t2528 * t2425) * qJ(3,2);
t2635 = qJ(3,2) * t2705;
t2581 = pkin(1) * t2635;
t2600 = t2475 * t2705;
t2611 = t2269 * t2687;
t2760 = -0.3e1 * t2479;
t2773 = -0.2e1 * qJ(3,2);
t2791 = t2479 - t2771;
t2531 = t2456 * t2680 - (-(t2771 + t2760) * t2447 * t2600 + ((-t2551 * t2612 + t2242) * qJ(3,2) + (-0.3e1 * (-t2479 / 0.3e1 + t2771) * t2730 + t2791 * t2802) * t2705) * t2448 + (((-t2242 - 0.4e1 * t2581) * t2475 - t2791 * t2474 * t2612) * t2461 + (t2760 - t2402) * t2600) * t2467 + (-t2402 - t2479) * t2461 * t2635 + (t2581 + t2242 / 0.2e1 + t2558 * t2612) * t2773) * t2598 - ((t2212 * t2475 + t2567 * t2663) * t2467 + pkin(1) * t2716 + (t2212 * t2461 + (t2301 * t2753 * t2809 - pkin(1) * t2269) * t2379) * qJ(3,2)) * t2611 - (-t2256 * t2659 + ((pkin(1) * t2480 + t2461) * t2475 * t2269 + (t2448 - 0.1e1) * t2634) * t2379) * t2251 * t2687 + (t2279 * t2458 + t2280 * t2457) * t2689;
t2745 = g(3) * t2467;
t2510 = t2531 + t2745;
t2742 = t2158 * pkin(2);
t2513 = -t2531 + t2742;
t2605 = t2467 * t2711;
t2606 = t2461 * t2711;
t2644 = -t2479 + t2486;
t2720 = t2158 * qJ(3,2);
t2748 = g(3) * t2461;
t2227 = 0.2e1 * t2251 * t2611;
t2292 = pkin(2) * t2711;
t2788 = t2292 * t2763 + t2227 + t2292;
t2805 = -t2563 * t2467 + t2748;
t2504 = t2805 * MDP(10) + ((t2605 * t2775 - t2563) * t2461 + 0.2e1 * t2742 + qJ(3,2) * t2284 - t2510) * MDP(11) + ((t2606 * t2773 + t2563) * t2467 + 0.2e1 * t2720 - t2748 + t2788) * MDP(13) + ((t2644 * t2606 - t2758) * t2467 + t2479 * t2158 + (t2513 - t2811) * pkin(2) + (t2788 - t2805) * qJ(3,2)) * MDP(14) + t2284 * MDP(5) + t2158 * MDP(8) + (-t2745 - t2811) * MDP(9);
t2806 = t2203 * t2448 * MDP(7) + ((MDP(12) * t2394 + MDP(6) * t2461) * t2203 + t2504) * t2467;
t2395 = -pkin(2) * t2463 + t2734;
t2762 = -0.2e1 * t2450;
t2752 = t2762 + 0.1e1;
t2285 = t2752 * t2707;
t2715 = t2219 * t2475;
t2213 = -qJ(3,1) * t2270 * t2382 + t2715;
t2318 = t2414 * t2464 - t2463 * t2420;
t2410 = pkin(1) + 0.2e1 * t2735;
t2341 = t2410 * t2464 - t2420;
t2527 = t2414 * t2470 + t2463 * t2417;
t2575 = t2410 * t2470 + t2417;
t2281 = -t2335 * t2583 - (t2426 * t2341 - t2575 * t2429) * t2658 - (t2426 * t2318 - t2527 * t2429) * qJ(3,1);
t2282 = t2336 * t2583 + (t2341 * t2429 + t2575 * t2426) * t2658 + (t2318 * t2429 + t2527 * t2426) * qJ(3,1);
t2639 = qJ(3,1) * t2699;
t2582 = pkin(1) * t2639;
t2592 = t2475 * t2699;
t2608 = t2270 * t2682;
t2759 = -0.3e1 * t2482;
t2774 = -0.2e1 * qJ(3,1);
t2790 = t2482 - t2771;
t2530 = t2456 * t2679 - (-(t2771 + t2759) * t2449 * t2592 + ((-t2551 * t2609 + t2243) * qJ(3,1) + (-0.3e1 * (-t2482 / 0.3e1 + t2771) * t2735 + t2790 * t2802) * t2699) * t2450 + (((-t2243 - 0.4e1 * t2582) * t2475 - t2790 * t2474 * t2609) * t2463 + (t2759 - t2402) * t2592) * t2469 + (-t2402 - t2482) * t2463 * t2639 + (t2582 + t2243 / 0.2e1 + t2558 * t2609) * t2774) * t2590 - ((t2213 * t2475 + t2565 * t2661) * t2469 + pkin(1) * t2715 + (t2213 * t2463 + (t2303 * t2752 * t2809 - pkin(1) * t2270) * t2382) * qJ(3,1)) * t2608 - (-t2258 * t2658 + ((pkin(1) * t2483 + t2463) * t2475 * t2270 + (t2450 - 0.1e1) * t2638) * t2382) * t2252 * t2682 + (t2281 * t2458 + t2282 * t2457) * t2684;
t2744 = g(3) * t2469;
t2509 = t2530 + t2744;
t2741 = t2159 * pkin(2);
t2512 = -t2530 + t2741;
t2601 = t2469 * t2707;
t2602 = t2463 * t2707;
t2643 = -t2482 + t2486;
t2719 = t2159 * qJ(3,1);
t2747 = g(3) * t2463;
t2228 = 0.2e1 * t2252 * t2608;
t2294 = pkin(2) * t2707;
t2789 = t2294 * t2762 + t2228 + t2294;
t2803 = -t2562 * t2469 + t2747;
t2503 = t2803 * MDP(10) + ((t2601 * t2775 - t2562) * t2463 + 0.2e1 * t2741 + qJ(3,1) * t2285 - t2509) * MDP(11) + ((t2602 * t2774 + t2562) * t2469 + 0.2e1 * t2719 - t2747 + t2789) * MDP(13) + ((t2643 * t2602 - t2758) * t2469 + t2482 * t2159 + (t2512 - t2810) * pkin(2) + (t2789 - t2803) * qJ(3,1)) * MDP(14) + t2285 * MDP(5) + t2159 * MDP(8) + (-t2744 - t2810) * MDP(9);
t2804 = t2204 * t2450 * MDP(7) + ((MDP(12) * t2395 + MDP(6) * t2463) * t2204 + t2503) * t2469;
t2801 = 0.4e1 * t2446;
t2800 = 0.4e1 * t2448;
t2799 = 0.4e1 * t2450;
t2798 = 0.2e1 * t2459;
t2797 = 0.2e1 * t2461;
t2796 = 0.2e1 * t2463;
t2623 = t2221 * t2702;
t2621 = t2223 * t2705;
t2619 = t2225 * t2699;
t2267 = t2270 ^ 2;
t2616 = t2267 * t2682;
t2795 = pkin(1) * t2765 - pkin(5) * t2616 - t2400 * t2429 + t2401 * t2426;
t2265 = t2268 ^ 2;
t2618 = t2265 * t2692;
t2794 = pkin(1) * t2767 - pkin(5) * t2618 - t2396 * t2427 + t2397 * t2424;
t2266 = t2269 ^ 2;
t2617 = t2266 * t2687;
t2793 = pkin(1) * t2766 - pkin(5) * t2617 - t2398 * t2428 + t2399 * t2425;
t2736 = qJ(3,1) * t2204;
t2731 = qJ(3,2) * t2203;
t2726 = qJ(3,3) * t2202;
t2710 = t2298 * t2448;
t2708 = t2299 * t2446;
t2706 = t2300 * t2450;
t2666 = t2459 * t2465;
t2664 = t2461 * t2467;
t2662 = t2463 * t2469;
t2624 = (0.4e1 * t2262 - 0.2e1 * t2247) * t2702;
t2622 = (0.4e1 * t2263 - 0.2e1 * t2248) * t2705;
t2620 = (0.4e1 * t2264 - 0.2e1 * t2249) * t2699;
t2599 = t2269 * t2704;
t2595 = t2268 * t2701;
t2591 = t2270 * t2698;
t2557 = t2595 * t2798;
t2556 = t2599 * t2797;
t2555 = t2591 * t2796;
t2547 = t2587 * t2710;
t2546 = t2588 * t2708;
t2545 = t2586 * t2706;
t2517 = MDP(11) * (t2777 * t2477 + (t2206 * t2302 * t2477 - t2299 * t2666 + t2544 * t2478) * t2377) + MDP(13) * (-t2265 * t2478 - t2299 + t2708) * t2377 + MDP(14) * (t2812 - t2743 + (-t2265 * t2477 + (-pkin(2) * t2666 + qJ(3,3) * t2446 - qJ(3,3)) * t2299) * t2377 + t2511);
t2516 = MDP(11) * (t2779 * t2483 + (t2207 * t2303 * t2483 - t2300 * t2662 + t2542 * t2484) * t2383) + MDP(13) * (-t2267 * t2484 - t2300 + t2706) * t2383 + MDP(14) * (t2810 - t2741 + (-t2267 * t2483 + (-pkin(2) * t2662 + qJ(3,1) * t2450 - qJ(3,1)) * t2300) * t2383 + t2509);
t2515 = MDP(11) * (t2778 * t2480 + (t2205 * t2301 * t2480 - t2298 * t2664 + t2543 * t2481) * t2380) + MDP(13) * (-t2266 * t2481 - t2298 + t2710) * t2380 + MDP(14) * (t2811 - t2742 + (-t2266 * t2480 + (-pkin(2) * t2664 + qJ(3,2) * t2448 - qJ(3,2)) * t2298) * t2380 + t2510);
t2508 = MDP(12) * t2202 * t2459 + t2517;
t2507 = MDP(12) * t2204 * t2463 + t2516;
t2506 = MDP(12) * t2203 * t2461 + t2515;
t2173 = pkin(2) * t2767 + 0.4e1 * t2595;
t2193 = 0.2e1 * t2726;
t2364 = g(1) * t2424 - g(2) * t2427;
t2367 = g(1) * t2427 + g(2) * t2424;
t2422 = pkin(1) * g(1) - pkin(5) * g(2);
t2423 = pkin(1) * g(2) + pkin(5) * g(1);
t2442 = t2459 ^ 2;
t2502 = -MDP(1) * t2202 - MDP(10) * (-t2794 * t2459 - t2815) - MDP(11) * (t2173 * t2446 + ((t2193 - t2624) * t2459 + t2794) * t2465 - t2816 - 0.2e1 * t2595) - MDP(12) * ((-pkin(2) * t2618 + t2226 + t2721) * t2465 + (-t2265 * t2693 - t2514) * t2459 + 0.2e1 * t2199 + t2649) - MDP(13) * ((t2173 * t2465 + t2794) * t2459 + (t2624 - 0.2e1 * t2726) * t2446 + t2815 - 0.2e1 * t2623 + t2193) - MDP(14) * ((t2262 - t2247 / 0.2e1) * t2631 * t2801 + (pkin(5) * t2226 + (t2146 + t2557) * qJ(3,3) + ((-t2623 + t2726) * t2798 + t2794) * pkin(2)) * t2465 + (t2250 * t2594 * t2802 - t2146 * pkin(2) + t2532 * pkin(5) + qJ(3,3) * t2794) * t2459 + (t2422 * t2460 - t2423 * t2466) * t2427 + (t2422 * t2466 + t2423 * t2460) * t2424 + t2623 * t2772 + (t2645 * t2446 + t2435 + t2476) * t2202) - MDP(2) * (t2364 * t2466 + t2367 * t2460) - MDP(3) * (-t2364 * t2460 + t2367 * t2466) - MDP(4) * (t2465 * t2477 * t2557 + t2202 * t2442) - MDP(5) * (t2666 * t2767 + (t2801 - 0.2e1) * t2570) - MDP(6) * (t2157 * t2459 + t2465 * t2618) - MDP(7) * (t2157 * t2465 - t2459 * t2618) - MDP(9) * (t2465 * t2794 - t2816);
t2172 = pkin(2) * t2766 + 0.4e1 * t2599;
t2194 = 0.2e1 * t2731;
t2365 = g(1) * t2425 - g(2) * t2428;
t2368 = g(1) * t2428 + g(2) * t2425;
t2443 = t2461 ^ 2;
t2501 = -MDP(1) * t2203 - MDP(10) * (-t2793 * t2461 - t2817) - MDP(11) * (t2172 * t2448 + ((t2194 - t2622) * t2461 + t2793) * t2467 - t2818 - 0.2e1 * t2599) - MDP(12) * ((-pkin(2) * t2617 + t2227 + t2720) * t2467 + (-t2266 * t2688 - t2513) * t2461 + 0.2e1 * t2200 + t2648) - MDP(13) * ((t2172 * t2467 + t2793) * t2461 + (t2622 - 0.2e1 * t2731) * t2448 + t2817 - 0.2e1 * t2621 + t2194) - MDP(14) * ((t2263 - t2248 / 0.2e1) * t2635 * t2800 + (pkin(5) * t2227 + (t2145 + t2556) * qJ(3,2) + ((-t2621 + t2731) * t2797 + t2793) * pkin(2)) * t2467 + (t2251 * t2598 * t2802 - t2145 * pkin(2) + t2531 * pkin(5) + qJ(3,2) * t2793) * t2461 + (t2422 * t2462 - t2423 * t2468) * t2428 + (t2422 * t2468 + t2423 * t2462) * t2425 + t2621 * t2773 + (t2644 * t2448 + t2435 + t2479) * t2203) - MDP(2) * (t2365 * t2468 + t2368 * t2462) - MDP(3) * (-t2365 * t2462 + t2368 * t2468) - MDP(4) * (t2467 * t2480 * t2556 + t2203 * t2443) - MDP(5) * (t2664 * t2766 + (t2800 - 0.2e1) * t2569) - MDP(6) * (t2158 * t2461 + t2467 * t2617) - MDP(7) * (t2158 * t2467 - t2461 * t2617) - MDP(9) * (t2467 * t2793 - t2818);
t2174 = pkin(2) * t2765 + 0.4e1 * t2591;
t2195 = 0.2e1 * t2736;
t2366 = g(1) * t2426 - g(2) * t2429;
t2369 = g(1) * t2429 + g(2) * t2426;
t2444 = t2463 ^ 2;
t2500 = -MDP(1) * t2204 - MDP(10) * (-t2795 * t2463 - t2813) - MDP(11) * (t2174 * t2450 + ((t2195 - t2620) * t2463 + t2795) * t2469 - t2814 - 0.2e1 * t2591) - MDP(12) * ((-pkin(2) * t2616 + t2228 + t2719) * t2469 + (-t2267 * t2683 - t2512) * t2463 + 0.2e1 * t2201 + t2647) - MDP(13) * ((t2174 * t2469 + t2795) * t2463 + (t2620 - 0.2e1 * t2736) * t2450 + t2813 - 0.2e1 * t2619 + t2195) - MDP(14) * ((t2264 - t2249 / 0.2e1) * t2639 * t2799 + (pkin(5) * t2228 + (t2147 + t2555) * qJ(3,1) + ((-t2619 + t2736) * t2796 + t2795) * pkin(2)) * t2469 + (t2252 * t2590 * t2802 - t2147 * pkin(2) + t2530 * pkin(5) + qJ(3,1) * t2795) * t2463 + (t2422 * t2464 - t2423 * t2470) * t2429 + (t2422 * t2470 + t2423 * t2464) * t2426 + t2619 * t2774 + (t2643 * t2450 + t2435 + t2482) * t2204) - MDP(2) * (t2366 * t2470 + t2369 * t2464) - MDP(3) * (-t2366 * t2464 + t2369 * t2470) - MDP(4) * (t2469 * t2483 * t2555 + t2204 * t2444) - MDP(5) * (t2662 * t2765 + (t2799 - 0.2e1) * t2568) - MDP(6) * (t2159 * t2463 + t2469 * t2616) - MDP(7) * (t2159 * t2469 - t2463 * t2616) - MDP(9) * (t2469 * t2795 - t2814);
t1 = [(t2286 * t2546 + t2288 * t2547 + t2290 * t2545) * MDP(4) + (t2458 - g(1)) * MDP(15) + (t2500 * t2336 + (t2507 * t2281 - t2804 * t2290) * t2483) * t2382 + (t2501 * t2334 + (t2506 * t2279 - t2806 * t2288) * t2480) * t2379 + (t2502 * t2332 + (t2508 * t2277 - t2808 * t2286) * t2477) * t2376; (-t2287 * t2546 - t2289 * t2547 - t2291 * t2545) * MDP(4) + (t2457 - g(2)) * MDP(15) + (t2500 * t2335 + (t2507 * t2282 + t2804 * t2291) * t2483) * t2382 + (t2501 * t2333 + (t2506 * t2280 + t2806 * t2289) * t2480) * t2379 + (t2502 * t2331 + (t2508 * t2278 + t2808 * t2287) * t2477) * t2376; (t2456 - g(3)) * MDP(15) + ((-MDP(4) * t2601 + MDP(6) * t2204) * t2444 + t2516 * t2390 + ((t2469 * MDP(7) + (t2390 + t2395) * MDP(12)) * t2204 + t2503) * t2463) * t2483 + ((-MDP(4) * t2605 + MDP(6) * t2203) * t2443 + t2515 * t2389 + ((t2467 * MDP(7) + (t2389 + t2394) * MDP(12)) * t2203 + t2504) * t2461) * t2480 + ((-MDP(4) * t2603 + MDP(6) * t2202) * t2442 + t2517 * t2388 + ((t2465 * MDP(7) + (t2388 + t2393) * MDP(12)) * t2202 + t2505) * t2459) * t2477;];
tauX  = t1;
