% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR12V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR12V2G3A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR12V2G3A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR12V2G3A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:29:09
% EndTime: 2020-08-06 19:29:38
% DurationCPUTime: 29.73s
% Computational Cost: add. (263442->793), mult. (352602->1298), div. (15066->12), fcn. (187377->18), ass. (0->479)
t2648 = xDP(2);
t2651 = pkin(2) + pkin(3);
t2827 = (t2648 * t2651);
t2582 = pkin(1) * t2827;
t2649 = xDP(1);
t2826 = (t2649 * t2651);
t2583 = pkin(1) * t2826;
t2629 = legFrame(3,2);
t2602 = sin(t2629);
t2605 = cos(t2629);
t2641 = cos(qJ(2,3));
t2624 = t2641 ^ 2;
t2635 = sin(qJ(2,3));
t2642 = cos(qJ(1,3));
t2647 = xDP(3);
t2650 = pkin(5) - pkin(6);
t2596 = t2650 * t2642;
t2636 = sin(qJ(1,3));
t2593 = t2636 * t2650;
t2809 = pkin(1) * t2642 + t2593;
t2976 = -t2602 * t2648 + t2605 * t2649;
t2684 = -(pkin(1) * t2636 - t2596) * t2647 + t2976 * t2809;
t2714 = t2602 * t2649 + t2605 * t2648;
t2843 = (qJ(3,3) + t2651) * (-qJ(3,3) + t2651);
t2755 = t2642 * t2843;
t2756 = t2636 * t2843;
t2797 = -2 * t2826;
t2798 = -2 * t2827;
t2831 = t2647 * t2636;
t2911 = qJ(3,3) * t2649;
t2912 = qJ(3,3) * t2648;
t2757 = t2635 * t2843;
t2979 = -pkin(1) * qJ(3,3) + t2757;
t2599 = t2635 * qJ(3,3);
t3004 = 0.2e1 * t2599;
t2456 = ((qJ(3,3) * t2798 + t2649 * t2755) * t2605 + (qJ(3,3) * t2797 - t2648 * t2755) * t2602 - t2647 * t2756) * t2624 + (((t2642 * t2976 - t2831) * t3004 + t2684) * t2651 + t2979 * t2714) * t2641 + (qJ(3,3) * t2684 + t2582 * t2605 + t2583 * t2602) * t2635 - ((-t2642 * t2911 - t2827) * t2605 + (t2642 * t2912 - t2826) * t2602 + qJ(3,3) * t2831) * qJ(3,3);
t2584 = t2599 + pkin(1);
t2824 = t2651 * t2641;
t2561 = t2824 + t2584;
t2546 = 0.1e1 / t2561;
t2655 = 0.1e1 / qJ(3,3);
t2876 = t2546 * t2655;
t2453 = t2456 * t2876;
t2587 = pkin(1) * t2635 + qJ(3,3);
t2717 = t2584 * t2642 + t2593;
t2828 = t2647 * t2651;
t2984 = t2584 * t2636 - t2596;
t2477 = ((t2642 * t2826 - t2912) * t2605 + (-t2642 * t2827 - t2911) * t2602 - t2636 * t2828) * t2624 + ((t2635 * t2827 + t2649 * t2717) * t2605 + (t2635 * t2826 - t2648 * t2717) * t2602 - t2984 * t2647) * t2641 + t2714 * t2587;
t2519 = -t2636 * t2976 - t2642 * t2647;
t2632 = xDDP(3);
t2633 = xDDP(2);
t2634 = xDDP(1);
t2547 = 0.1e1 / t2561 ^ 2;
t2874 = t2547 * t2876;
t2760 = t2635 * t2874;
t2821 = t2651 * t2655;
t2839 = t2635 * t2651;
t2852 = t2605 * t2636;
t2861 = t2602 * t2636;
t2886 = t2519 * t2650;
t2887 = t2519 * t2547;
t2914 = qJ(3,3) * t2641;
t2417 = -t2453 * t2635 * t2887 + ((t2839 - t2914) * t2477 * t2874 - t2456 * t2760) * t2519 + (-t2634 * t2852 + t2633 * t2861 - t2642 * t2632 - (t2886 + (-t2635 * t2821 + t2641) * t2477) * t2887) * t2546;
t2968 = 0.2e1 * t2417;
t2630 = legFrame(2,2);
t2603 = sin(t2630);
t2606 = cos(t2630);
t2643 = cos(qJ(2,2));
t2625 = t2643 ^ 2;
t2637 = sin(qJ(2,2));
t2644 = cos(qJ(1,2));
t2597 = t2650 * t2644;
t2638 = sin(qJ(1,2));
t2594 = t2638 * t2650;
t2808 = pkin(1) * t2644 + t2594;
t2977 = -t2603 * t2648 + t2606 * t2649;
t2683 = -(pkin(1) * t2638 - t2597) * t2647 + t2977 * t2808;
t2712 = t2603 * t2649 + t2606 * t2648;
t2842 = (qJ(3,2) + t2651) * (-qJ(3,2) + t2651);
t2752 = t2644 * t2842;
t2753 = t2638 * t2842;
t2830 = t2647 * t2638;
t2919 = qJ(3,2) * t2649;
t2920 = qJ(3,2) * t2648;
t2754 = t2637 * t2842;
t2980 = -pkin(1) * qJ(3,2) + t2754;
t2600 = t2637 * qJ(3,2);
t3003 = 0.2e1 * t2600;
t2457 = ((qJ(3,2) * t2798 + t2649 * t2752) * t2606 + (qJ(3,2) * t2797 - t2648 * t2752) * t2603 - t2647 * t2753) * t2625 + (((t2644 * t2977 - t2830) * t3003 + t2683) * t2651 + t2980 * t2712) * t2643 + (qJ(3,2) * t2683 + t2582 * t2606 + t2583 * t2603) * t2637 - ((-t2644 * t2919 - t2827) * t2606 + (t2644 * t2920 - t2826) * t2603 + qJ(3,2) * t2830) * qJ(3,2);
t2585 = t2600 + pkin(1);
t2823 = t2651 * t2643;
t2562 = t2823 + t2585;
t2549 = 0.1e1 / t2562;
t2658 = 0.1e1 / qJ(3,2);
t2873 = t2549 * t2658;
t2454 = t2457 * t2873;
t2588 = pkin(1) * t2637 + qJ(3,2);
t2716 = t2585 * t2644 + t2594;
t2983 = t2585 * t2638 - t2597;
t2478 = ((t2644 * t2826 - t2920) * t2606 + (-t2644 * t2827 - t2919) * t2603 - t2638 * t2828) * t2625 + ((t2637 * t2827 + t2649 * t2716) * t2606 + (t2637 * t2826 - t2648 * t2716) * t2603 - t2983 * t2647) * t2643 + t2712 * t2588;
t2520 = -t2638 * t2977 - t2644 * t2647;
t2550 = 0.1e1 / t2562 ^ 2;
t2871 = t2550 * t2873;
t2759 = t2637 * t2871;
t2820 = t2651 * t2658;
t2837 = t2637 * t2651;
t2849 = t2606 * t2638;
t2858 = t2603 * t2638;
t2882 = t2520 * t2650;
t2883 = t2520 * t2550;
t2922 = qJ(3,2) * t2643;
t2418 = -t2454 * t2637 * t2883 + ((t2837 - t2922) * t2478 * t2871 - t2457 * t2759) * t2520 + (-t2634 * t2849 + t2633 * t2858 - t2644 * t2632 - (t2882 + (-t2637 * t2820 + t2643) * t2478) * t2883) * t2549;
t2967 = 0.2e1 * t2418;
t2631 = legFrame(1,2);
t2604 = sin(t2631);
t2607 = cos(t2631);
t2645 = cos(qJ(2,1));
t2626 = t2645 ^ 2;
t2639 = sin(qJ(2,1));
t2646 = cos(qJ(1,1));
t2598 = t2650 * t2646;
t2640 = sin(qJ(1,1));
t2595 = t2640 * t2650;
t2807 = pkin(1) * t2646 + t2595;
t2978 = -t2604 * t2648 + t2607 * t2649;
t2682 = -(pkin(1) * t2640 - t2598) * t2647 + t2978 * t2807;
t2710 = t2604 * t2649 + t2607 * t2648;
t2841 = (qJ(3,1) + t2651) * (-qJ(3,1) + t2651);
t2749 = t2646 * t2841;
t2750 = t2640 * t2841;
t2829 = t2647 * t2640;
t2927 = qJ(3,1) * t2649;
t2928 = qJ(3,1) * t2648;
t2751 = t2639 * t2841;
t2981 = -pkin(1) * qJ(3,1) + t2751;
t2601 = t2639 * qJ(3,1);
t3002 = 0.2e1 * t2601;
t2458 = ((qJ(3,1) * t2798 + t2649 * t2749) * t2607 + (qJ(3,1) * t2797 - t2648 * t2749) * t2604 - t2647 * t2750) * t2626 + (((t2646 * t2978 - t2829) * t3002 + t2682) * t2651 + t2981 * t2710) * t2645 + (qJ(3,1) * t2682 + t2582 * t2607 + t2583 * t2604) * t2639 - ((-t2646 * t2927 - t2827) * t2607 + (t2646 * t2928 - t2826) * t2604 + qJ(3,1) * t2829) * qJ(3,1);
t2586 = t2601 + pkin(1);
t2822 = t2651 * t2645;
t2563 = t2822 + t2586;
t2552 = 0.1e1 / t2563;
t2661 = 0.1e1 / qJ(3,1);
t2870 = t2552 * t2661;
t2455 = t2458 * t2870;
t2589 = pkin(1) * t2639 + qJ(3,1);
t2715 = t2586 * t2646 + t2595;
t2982 = t2586 * t2640 - t2598;
t2479 = ((t2646 * t2826 - t2928) * t2607 + (-t2646 * t2827 - t2927) * t2604 - t2640 * t2828) * t2626 + ((t2639 * t2827 + t2649 * t2715) * t2607 + (t2639 * t2826 - t2648 * t2715) * t2604 - t2982 * t2647) * t2645 + t2710 * t2589;
t2521 = -t2640 * t2978 - t2646 * t2647;
t2553 = 0.1e1 / t2563 ^ 2;
t2868 = t2553 * t2870;
t2758 = t2639 * t2868;
t2819 = t2651 * t2661;
t2835 = t2639 * t2651;
t2846 = t2607 * t2640;
t2855 = t2604 * t2640;
t2878 = t2521 * t2650;
t2879 = t2521 * t2553;
t2930 = qJ(3,1) * t2645;
t2419 = -t2455 * t2639 * t2879 + ((t2835 - t2930) * t2479 * t2868 - t2458 * t2758) * t2521 + (-t2634 * t2846 + t2633 * t2855 - t2646 * t2632 - (t2878 + (-t2639 * t2819 + t2645) * t2479) * t2879) * t2552;
t2966 = 0.2e1 * t2419;
t2654 = qJ(3,3) ^ 2;
t2617 = pkin(1) ^ 2 + pkin(5) ^ 2;
t2736 = t2617 + (-0.2e1 * pkin(5) + pkin(6)) * pkin(6);
t2567 = t2654 + t2736;
t2802 = 0.2e1 * t2651;
t2781 = t2477 * t2876;
t2471 = pkin(2) * t2781;
t2439 = t2471 - t2453;
t2748 = pkin(3) * t2781;
t2432 = -t2748 - t2439;
t2888 = t2519 * t2546;
t2792 = qJ(3,3) * t2888;
t2994 = 0.2e1 * pkin(1);
t2815 = t2650 * t2432 + t2792 * t2994;
t2897 = t2477 * t2650;
t2420 = t2815 * t2635 + (t2641 * t2897 + (t2584 * t2641 * t2802 + t2624 * t2843 + t2567) * t2519) * t2546;
t2791 = t2642 * t2599;
t2535 = t2791 + t2809;
t2834 = t2642 * t2651;
t2916 = qJ(3,3) * t2605;
t2498 = (-t2602 * t2834 - t2916) * t2624 + (-t2535 * t2602 + t2605 * t2839) * t2641 + t2605 * t2587;
t2917 = qJ(3,3) * t2602;
t2499 = (t2605 * t2834 - t2917) * t2624 + (t2535 * t2605 + t2602 * t2839) * t2641 + t2602 * t2587;
t2522 = t2636 * t2824 + t2984;
t2696 = t2522 * t2632 * t2641 - t2498 * t2633 - t2499 * t2634;
t2769 = t2635 * t2886;
t2462 = (-t2477 * t2821 + t2769) * t2546;
t2772 = t2546 * t2886;
t2915 = qJ(3,3) * t2624;
t2720 = (-t2772 * t2915 + ((-pkin(3) * t2477 * t2655 + t2769) * t2546 - t2439) * t2824 + t2432 * t2584) * t2477 + (-t2462 * t2641 + t2584 * t2781) * t2456;
t2656 = 0.1e1 / qJ(3,3) ^ 2;
t2875 = t2547 * t2656;
t2363 = -t2720 * t2875 + (t2420 * t2641 * t2887 - t2546 * t2696) * t2655;
t2885 = t2519 * t2655;
t2770 = t2547 * t2885;
t2742 = t2477 * t2770;
t2351 = pkin(5) * t2363 + t2742 * t2994;
t3010 = t2351 * t2635;
t2657 = qJ(3,2) ^ 2;
t2568 = t2657 + t2736;
t2779 = t2478 * t2873;
t2472 = pkin(2) * t2779;
t2441 = t2472 - t2454;
t2747 = pkin(3) * t2779;
t2433 = -t2747 - t2441;
t2884 = t2520 * t2549;
t2794 = qJ(3,2) * t2884;
t2814 = t2650 * t2433 + t2794 * t2994;
t2896 = t2478 * t2650;
t2421 = t2814 * t2637 + (t2643 * t2896 + (t2585 * t2643 * t2802 + t2625 * t2842 + t2568) * t2520) * t2549;
t2793 = t2644 * t2600;
t2537 = t2793 + t2808;
t2833 = t2644 * t2651;
t2924 = qJ(3,2) * t2606;
t2500 = (-t2603 * t2833 - t2924) * t2625 + (-t2537 * t2603 + t2606 * t2837) * t2643 + t2606 * t2588;
t2925 = qJ(3,2) * t2603;
t2501 = (t2606 * t2833 - t2925) * t2625 + (t2537 * t2606 + t2603 * t2837) * t2643 + t2603 * t2588;
t2523 = t2638 * t2823 + t2983;
t2695 = t2523 * t2632 * t2643 - t2500 * t2633 - t2501 * t2634;
t2765 = t2637 * t2882;
t2463 = (-t2478 * t2820 + t2765) * t2549;
t2768 = t2549 * t2882;
t2923 = qJ(3,2) * t2625;
t2719 = (-t2768 * t2923 + ((-pkin(3) * t2478 * t2658 + t2765) * t2549 - t2441) * t2823 + t2433 * t2585) * t2478 + (-t2463 * t2643 + t2585 * t2779) * t2457;
t2659 = 0.1e1 / qJ(3,2) ^ 2;
t2872 = t2550 * t2659;
t2364 = -t2719 * t2872 + (t2421 * t2643 * t2883 - t2549 * t2695) * t2658;
t2881 = t2520 * t2658;
t2766 = t2550 * t2881;
t2741 = t2478 * t2766;
t2352 = t2364 * pkin(5) + t2741 * t2994;
t3009 = t2352 * t2637;
t2660 = qJ(3,1) ^ 2;
t2569 = t2660 + t2736;
t2777 = t2479 * t2870;
t2473 = pkin(2) * t2777;
t2443 = t2473 - t2455;
t2746 = pkin(3) * t2777;
t2434 = -t2746 - t2443;
t2880 = t2521 * t2552;
t2796 = qJ(3,1) * t2880;
t2813 = t2650 * t2434 + t2796 * t2994;
t2895 = t2479 * t2650;
t2422 = t2813 * t2639 + (t2645 * t2895 + (t2586 * t2645 * t2802 + t2626 * t2841 + t2569) * t2521) * t2552;
t2795 = t2646 * t2601;
t2539 = t2795 + t2807;
t2832 = t2646 * t2651;
t2932 = qJ(3,1) * t2607;
t2502 = (-t2604 * t2832 - t2932) * t2626 + (-t2539 * t2604 + t2607 * t2835) * t2645 + t2607 * t2589;
t2933 = qJ(3,1) * t2604;
t2503 = (t2607 * t2832 - t2933) * t2626 + (t2539 * t2607 + t2604 * t2835) * t2645 + t2604 * t2589;
t2524 = t2640 * t2822 + t2982;
t2694 = t2524 * t2632 * t2645 - t2502 * t2633 - t2503 * t2634;
t2761 = t2639 * t2878;
t2464 = (-t2479 * t2819 + t2761) * t2552;
t2764 = t2552 * t2878;
t2931 = qJ(3,1) * t2626;
t2718 = (-t2764 * t2931 + ((-pkin(3) * t2479 * t2661 + t2761) * t2552 - t2443) * t2822 + t2434 * t2586) * t2479 + (-t2464 * t2645 + t2586 * t2777) * t2458;
t2662 = 0.1e1 / qJ(3,1) ^ 2;
t2869 = t2553 * t2662;
t2365 = -t2718 * t2869 + (t2422 * t2645 * t2879 - t2552 * t2694) * t2661;
t2877 = t2521 * t2661;
t2762 = t2553 * t2877;
t2740 = t2479 * t2762;
t2353 = t2365 * pkin(5) + t2740 * t2994;
t3008 = t2353 * t2639;
t2476 = t2479 ^ 2;
t2782 = t2476 * t2869;
t2560 = g(1) * t2607 - t2604 * g(2);
t2995 = g(3) * t2646 + t2560 * t2640;
t2998 = pkin(1) * t2966 - pkin(5) * t2782 + t2995;
t3007 = t2998 * t2639;
t2475 = t2478 ^ 2;
t2783 = t2475 * t2872;
t2937 = t2603 * g(2);
t2559 = g(1) * t2606 - t2937;
t2996 = g(3) * t2644 + t2559 * t2638;
t2999 = pkin(1) * t2967 - pkin(5) * t2783 + t2996;
t3006 = t2999 * t2637;
t2474 = t2477 ^ 2;
t2784 = t2474 * t2875;
t2938 = t2602 * g(2);
t2558 = g(1) * t2605 - t2938;
t2997 = g(3) * t2642 + t2558 * t2636;
t3000 = pkin(1) * t2968 - pkin(5) * t2784 + t2997;
t3005 = t3000 * t2635;
t3001 = t2560 * t2646;
t2993 = 0.4e1 * t2624;
t2992 = 0.4e1 * t2625;
t2991 = 0.4e1 * t2626;
t2990 = 0.2e1 * t2635;
t2989 = 0.2e1 * t2637;
t2988 = 0.2e1 * t2639;
t2974 = -0.2e1 * qJ(3,1);
t2973 = -0.2e1 * qJ(3,2);
t2972 = -0.2e1 * qJ(3,3);
t2965 = -0.2e1 * t2624;
t2964 = -0.2e1 * t2625;
t2963 = -0.2e1 * t2626;
t2962 = 0.2e1 * t2641;
t2961 = 0.2e1 * t2643;
t2960 = 0.2e1 * t2645;
t2959 = -0.2e1 * t2651;
t2958 = pkin(2) * g(1);
t2957 = pkin(2) * g(2);
t2953 = t2965 + 0.1e1;
t2952 = t2964 + 0.1e1;
t2951 = t2963 + 0.1e1;
t2948 = g(1) * t2642;
t2947 = g(1) * t2644;
t2946 = t2363 * pkin(2);
t2945 = t2364 * pkin(2);
t2943 = t2365 * pkin(2);
t2935 = t2646 * pkin(2);
t2934 = qJ(3,1) * t2419;
t2929 = qJ(3,1) * t2646;
t2926 = qJ(3,2) * t2418;
t2921 = qJ(3,2) * t2644;
t2918 = qJ(3,3) * t2417;
t2913 = qJ(3,3) * t2642;
t2910 = t2363 * qJ(3,3);
t2909 = t2364 * qJ(3,2);
t2908 = t2365 * qJ(3,1);
t2414 = pkin(5) * t2417;
t2608 = g(3) * t2636;
t2516 = t2519 ^ 2;
t2894 = t2516 * t2547;
t2405 = pkin(1) * t2894 - t2414 - t2608;
t2402 = t2605 * t2948 - t2642 * t2938 + t2405;
t2906 = t2402 * t2635;
t2415 = pkin(5) * t2418;
t2609 = g(3) * t2638;
t2517 = t2520 ^ 2;
t2892 = t2517 * t2550;
t2406 = pkin(1) * t2892 - t2415 - t2609;
t2403 = t2606 * t2947 - t2644 * t2937 + t2406;
t2905 = t2403 * t2637;
t2416 = pkin(5) * t2419;
t2610 = g(3) * t2640;
t2518 = t2521 ^ 2;
t2890 = t2518 * t2553;
t2407 = pkin(1) * t2890 - t2416 - t2610;
t2404 = t2407 + t3001;
t2904 = t2404 * t2639;
t2903 = t2417 * t2635;
t2902 = t2418 * t2637;
t2901 = t2419 * t2639;
t2900 = t2432 * t2651;
t2899 = t2433 * t2651;
t2898 = t2434 * t2651;
t2893 = t2516 * t2635;
t2891 = t2517 * t2637;
t2889 = t2518 * t2639;
t2555 = g(1) * t2602 + g(2) * t2605;
t2867 = t2555 * t2635;
t2866 = t2555 * t2641;
t2556 = g(1) * t2603 + g(2) * t2606;
t2865 = t2556 * t2637;
t2864 = t2556 * t2643;
t2557 = g(1) * t2604 + g(2) * t2607;
t2863 = t2557 * t2639;
t2862 = t2557 * t2645;
t2859 = t2602 * t2651;
t2856 = t2603 * t2651;
t2853 = t2604 * t2651;
t2850 = t2605 * t2651;
t2847 = t2606 * t2651;
t2844 = t2607 * t2651;
t2840 = t2635 * t2641;
t2838 = t2637 * t2643;
t2836 = t2639 * t2645;
t2825 = t2650 * t2651;
t2818 = t2655 * t2474;
t2817 = t2658 * t2475;
t2816 = t2661 * t2476;
t2780 = t2477 * t2875;
t2444 = 0.2e1 * t2456 * t2780;
t2510 = pkin(2) * t2894;
t2812 = t2510 + t2444;
t2778 = t2478 * t2872;
t2445 = 0.2e1 * t2457 * t2778;
t2511 = pkin(2) * t2892;
t2811 = t2511 + t2445;
t2776 = t2479 * t2869;
t2446 = 0.2e1 * t2458 * t2776;
t2512 = pkin(2) * t2890;
t2810 = t2512 + t2446;
t2665 = pkin(2) ^ 2;
t2806 = -t2654 + t2665;
t2805 = -t2657 + t2665;
t2804 = -t2660 + t2665;
t2803 = -0.4e1 * pkin(1) * t2651;
t2801 = qJ(3,1) * t2959;
t2800 = qJ(3,2) * t2959;
t2799 = qJ(3,3) * t2959;
t2790 = (0.4e1 * t2471 - 0.2e1 * t2453) * t2888;
t2789 = t2439 * t2888;
t2788 = (0.4e1 * t2472 - 0.2e1 * t2454) * t2884;
t2787 = t2441 * t2884;
t2786 = (0.4e1 * t2473 - 0.2e1 * t2455) * t2880;
t2785 = t2443 * t2880;
t2775 = t2547 * t2893;
t2774 = t2550 * t2891;
t2773 = t2553 * t2889;
t2771 = t2477 * t2887;
t2767 = t2478 * t2883;
t2763 = t2479 * t2879;
t2526 = t2558 * t2642 - t2608;
t2528 = t2559 * t2644 - t2609;
t2530 = -t2610 + t3001;
t2492 = t2953 * t2894;
t2493 = t2952 * t2892;
t2494 = t2951 * t2890;
t2739 = t2516 * t2760;
t2738 = t2517 * t2759;
t2737 = t2518 * t2758;
t2735 = t2510 * t2965;
t2734 = t2511 * t2964;
t2733 = t2512 * t2963;
t2726 = -MDP(12) * (-pkin(2) * t2635 + t2914) - MDP(6) * t2635;
t2725 = -MDP(12) * (-pkin(2) * t2637 + t2922) - MDP(6) * t2637;
t2724 = -MDP(12) * (-pkin(2) * t2639 + t2930) - MDP(6) * t2639;
t2723 = t2641 * t2739;
t2722 = t2643 * t2738;
t2721 = t2645 * t2737;
t2426 = -qJ(3,3) * t2477 * t2546 + t2900;
t2468 = -0.2e1 * t2471;
t2531 = t2635 * t2809 + t2913;
t2534 = 0.2e1 * t2791 + t2809;
t2486 = (-t2602 * t2755 + t2605 * t2799) * t2624 + (-t2534 * t2859 + t2605 * t2979) * t2641 - t2531 * t2917 + t2587 * t2850;
t2487 = (t2602 * t2799 + t2605 * t2755) * t2624 + (t2534 * t2850 + t2602 * t2979) * t2641 + t2531 * t2916 + t2587 * t2859;
t2504 = -t2624 * t2756 - ((t3004 + pkin(1)) * t2636 - t2596) * t2824 - qJ(3,3) * (t2587 * t2636 - t2596 * t2635);
t2628 = t2651 ^ 2;
t2702 = -((-t2432 * t2635 * t2825 + (-t2519 * (0.3e1 * t2654 + t2736) * t2651 + (t2519 * t2803 - t2897) * t2599) * t2546) * t2641 - qJ(3,3) * (t2567 * t2635 * t2888 + t2815) + (t2650 * (t2453 + t2468 - 0.2e1 * t2748) * qJ(3,3) + (-(t2628 - 0.3e1 * t2654) * t2824 - 0.3e1 * (-t2654 / 0.3e1 + t2628) * t2599 + (t2654 - t2628) * t2994) * t2888) * t2624) * t2770 - ((t2426 * t2651 + t2757 * t2772) * t2641 + pkin(1) * t2900 + (t2426 * t2635 + (t2519 * t2825 * t2953 - pkin(1) * t2477) * t2546) * qJ(3,3)) * t2780 - (-t2462 * t2824 + ((pkin(1) * t2655 + t2635) * t2651 * t2477 + (t2624 - 0.1e1) * qJ(3,3) * t2886) * t2546) * t2456 * t2875 + (t2486 * t2633 + t2487 * t2634 + t2504 * t2632) * t2876;
t2427 = -qJ(3,2) * t2478 * t2549 + t2899;
t2469 = -0.2e1 * t2472;
t2532 = t2637 * t2808 + t2921;
t2536 = 0.2e1 * t2793 + t2808;
t2488 = (-t2603 * t2752 + t2606 * t2800) * t2625 + (-t2536 * t2856 + t2606 * t2980) * t2643 - t2532 * t2925 + t2588 * t2847;
t2489 = (t2603 * t2800 + t2606 * t2752) * t2625 + (t2536 * t2847 + t2603 * t2980) * t2643 + t2532 * t2924 + t2588 * t2856;
t2505 = -t2625 * t2753 - ((t3003 + pkin(1)) * t2638 - t2597) * t2823 - qJ(3,2) * (t2588 * t2638 - t2597 * t2637);
t2701 = -((-t2433 * t2637 * t2825 + (-t2520 * (0.3e1 * t2657 + t2736) * t2651 + (t2520 * t2803 - t2896) * t2600) * t2549) * t2643 - qJ(3,2) * (t2568 * t2637 * t2884 + t2814) + (t2650 * (t2454 + t2469 - 0.2e1 * t2747) * qJ(3,2) + (-(t2628 - 0.3e1 * t2657) * t2823 - 0.3e1 * (-t2657 / 0.3e1 + t2628) * t2600 + (t2657 - t2628) * t2994) * t2884) * t2625) * t2766 - ((t2427 * t2651 + t2754 * t2768) * t2643 + pkin(1) * t2899 + (t2427 * t2637 + (t2520 * t2825 * t2952 - pkin(1) * t2478) * t2549) * qJ(3,2)) * t2778 - (-t2463 * t2823 + ((pkin(1) * t2658 + t2637) * t2651 * t2478 + (t2625 - 0.1e1) * qJ(3,2) * t2882) * t2549) * t2457 * t2872 + (t2488 * t2633 + t2489 * t2634 + t2505 * t2632) * t2873;
t2428 = -qJ(3,1) * t2479 * t2552 + t2898;
t2470 = -0.2e1 * t2473;
t2533 = t2639 * t2807 + t2929;
t2538 = 0.2e1 * t2795 + t2807;
t2490 = (-t2604 * t2749 + t2607 * t2801) * t2626 + (-t2538 * t2853 + t2607 * t2981) * t2645 - t2533 * t2933 + t2589 * t2844;
t2491 = (t2604 * t2801 + t2607 * t2749) * t2626 + (t2538 * t2844 + t2604 * t2981) * t2645 + t2533 * t2932 + t2589 * t2853;
t2506 = -t2626 * t2750 - ((t3002 + pkin(1)) * t2640 - t2598) * t2822 - qJ(3,1) * (t2589 * t2640 - t2598 * t2639);
t2700 = -((-t2434 * t2639 * t2825 + (-t2521 * (0.3e1 * t2660 + t2736) * t2651 + (t2521 * t2803 - t2895) * t2601) * t2552) * t2645 - qJ(3,1) * (t2569 * t2639 * t2880 + t2813) + (t2650 * (t2455 + t2470 - 0.2e1 * t2746) * qJ(3,1) + (-(t2628 - 0.3e1 * t2660) * t2822 - 0.3e1 * (-t2660 / 0.3e1 + t2628) * t2601 + (t2660 - t2628) * t2994) * t2880) * t2626) * t2762 - ((t2428 * t2651 + t2751 * t2764) * t2645 + pkin(1) * t2898 + (t2428 * t2639 + (t2521 * t2825 * t2951 - pkin(1) * t2479) * t2552) * qJ(3,1)) * t2776 - (-t2464 * t2822 + ((pkin(1) * t2661 + t2639) * t2651 * t2479 + (t2626 - 0.1e1) * qJ(3,1) * t2878) * t2552) * t2458 * t2869 + (t2490 * t2633 + t2491 * t2634 + t2506 * t2632) * t2870;
t2699 = -t2702 + t2946;
t2698 = -t2701 + t2945;
t2697 = -t2700 + t2943;
t2693 = t2702 + t2866;
t2692 = t2701 + t2864;
t2691 = t2700 + t2862;
t2690 = (t2696 * t2876 + (t2720 * t2656 + (-t2420 * t2885 - t2893) * t2641) * t2547) * MDP(11) + MDP(12) * t2903 + (-t2474 * t2656 + t2516 * t2624 - t2516) * t2547 * MDP(13) + (-t2906 - t2946 + (-t2818 + (-pkin(2) * t2840 - qJ(3,3) + t2915) * t2516) * t2547 + t2693) * MDP(14);
t2689 = (t2695 * t2873 + (t2719 * t2659 + (-t2421 * t2881 - t2891) * t2643) * t2550) * MDP(11) + MDP(12) * t2902 + (-t2475 * t2659 + t2517 * t2625 - t2517) * t2550 * MDP(13) + (-t2905 - t2945 + (-t2817 + (-pkin(2) * t2838 - qJ(3,2) + t2923) * t2517) * t2550 + t2692) * MDP(14);
t2688 = (t2694 * t2870 + (t2718 * t2662 + (-t2422 * t2877 - t2889) * t2645) * t2553) * MDP(11) + MDP(12) * t2901 + (-t2476 * t2662 + t2518 * t2626 - t2518) * t2553 * MDP(13) + (-t2904 - t2943 + (-t2816 + (-pkin(2) * t2836 - qJ(3,1) + t2931) * t2518) * t2553 + t2691) * MDP(14);
t2687 = -MDP(10) * (t2402 * t2641 + t2867) - MDP(11) * ((t2510 * t2962 + t2402) * t2635 + 0.2e1 * t2946 + qJ(3,3) * t2492 - t2693) - MDP(13) * (t2735 + (t2775 * t2972 - t2402) * t2641 - t2867 + 0.2e1 * t2910 + t2812) - MDP(14) * (qJ(3,3) * t2735 + ((-g(1) * t2913 - t2957) * t2605 + (g(2) * t2913 - t2958) * t2602 - qJ(3,3) * t2405 + t2806 * t2775) * t2641 + ((pkin(2) * t2948 - g(2) * qJ(3,3)) * t2605 + (-g(1) * qJ(3,3) - t2642 * t2957) * t2602 + pkin(2) * t2405) * t2635 + t2654 * t2363 + t2812 * qJ(3,3) + pkin(2) * t2699) - MDP(5) * t2492 - MDP(8) * t2363 - MDP(9) * (-t2866 + t2906);
t2686 = -MDP(10) * (t2403 * t2643 + t2865) - MDP(11) * ((t2511 * t2961 + t2403) * t2637 + 0.2e1 * t2945 + qJ(3,2) * t2493 - t2692) - MDP(13) * (t2734 + (t2774 * t2973 - t2403) * t2643 - t2865 + 0.2e1 * t2909 + t2811) - MDP(14) * (qJ(3,2) * t2734 + ((-g(1) * t2921 - t2957) * t2606 + (g(2) * t2921 - t2958) * t2603 - qJ(3,2) * t2406 + t2805 * t2774) * t2643 + ((pkin(2) * t2947 - g(2) * qJ(3,2)) * t2606 + (-g(1) * qJ(3,2) - t2644 * t2957) * t2603 + pkin(2) * t2406) * t2637 + t2657 * t2364 + t2811 * qJ(3,2) + pkin(2) * t2698) - MDP(5) * t2493 - MDP(8) * t2364 - MDP(9) * (-t2864 + t2905);
t2685 = -MDP(10) * (t2404 * t2645 + t2863) - MDP(11) * ((t2512 * t2960 + t2404) * t2639 + 0.2e1 * t2943 + qJ(3,1) * t2494 - t2691) - MDP(13) * (t2733 + (t2773 * t2974 - t2404) * t2645 - t2863 + 0.2e1 * t2908 + t2810) - MDP(14) * (qJ(3,1) * t2733 + ((-g(1) * t2929 - t2957) * t2607 + (g(2) * t2929 - t2958) * t2604 - qJ(3,1) * t2407 + t2804 * t2773) * t2645 + ((g(1) * t2935 - g(2) * qJ(3,1)) * t2607 + (-g(1) * qJ(3,1) - g(2) * t2935) * t2604 + pkin(2) * t2407) * t2639 + t2660 * t2365 + t2810 * qJ(3,1) + pkin(2) * t2697) - MDP(5) * t2494 - MDP(8) * t2365 - MDP(9) * (-t2862 + t2904);
t2681 = (MDP(7) * t2641 - t2726) * t2417 - t2687;
t2680 = (MDP(7) * t2643 - t2725) * t2418 - t2686;
t2679 = (MDP(7) * t2645 - t2724) * t2419 - t2685;
t2384 = pkin(2) * t2968 + 0.4e1 * t2771;
t2408 = 0.2e1 * t2918;
t2652 = pkin(5) * g(3);
t2653 = pkin(1) * g(3);
t2678 = t2417 * MDP(1) + (-t2351 * t2641 - t3005) * MDP(10) + (t2384 * t2624 + ((t2408 - t2790) * t2635 + t3000) * t2641 - t3010 - 0.2e1 * t2771) * MDP(11) + ((-pkin(2) * t2784 + t2444 + t2910) * t2641 + (-t2547 * t2818 - t2699) * t2635 + 0.2e1 * t2414 - t2526) * MDP(12) + ((t2790 - 0.2e1 * t2918) * t2624 + (t2384 * t2635 + t2351) * t2641 + t3005 + (t2468 + 0.2e1 * t2453) * t2888 + t2408) * MDP(13) + ((t2471 - t2453 / 0.2e1) * t2792 * t2993 + (pkin(5) * t2444 + (t2771 * t2990 + t2351) * qJ(3,3) + ((-t2789 + t2918) * t2990 + t3000) * pkin(2)) * t2641 + (t2456 * t2770 * t2994 - t2351 * pkin(2) + pkin(5) * t2702 + qJ(3,3) * t3000) * t2635 + (pkin(1) * t2558 + t2652) * t2636 + (-pkin(5) * t2558 + t2653) * t2642 + t2789 * t2972 + (t2624 * t2806 + t2617 + t2654) * t2417) * MDP(14) + t2997 * MDP(2) + t2526 * MDP(3) + (t2742 * t2962 + t2903) * t2635 * MDP(4) + (t2840 * t2968 + (t2993 - 0.2e1) * t2742) * MDP(5) + (t2363 * t2635 + t2641 * t2784) * MDP(6) + (t2363 * t2641 - t2635 * t2784) * MDP(7) + (t2641 * t3000 - t3010) * MDP(9);
t2385 = pkin(2) * t2967 + 0.4e1 * t2767;
t2409 = 0.2e1 * t2926;
t2677 = t2418 * MDP(1) + (-t2352 * t2643 - t3006) * MDP(10) + (t2385 * t2625 + ((t2409 - t2788) * t2637 + t2999) * t2643 - t3009 - 0.2e1 * t2767) * MDP(11) + ((-pkin(2) * t2783 + t2445 + t2909) * t2643 + (-t2550 * t2817 - t2698) * t2637 + 0.2e1 * t2415 - t2528) * MDP(12) + ((t2788 - 0.2e1 * t2926) * t2625 + (t2385 * t2637 + t2352) * t2643 + t3006 + (t2469 + 0.2e1 * t2454) * t2884 + t2409) * MDP(13) + ((t2472 - t2454 / 0.2e1) * t2794 * t2992 + (pkin(5) * t2445 + (t2767 * t2989 + t2352) * qJ(3,2) + ((-t2787 + t2926) * t2989 + t2999) * pkin(2)) * t2643 + (t2457 * t2766 * t2994 - t2352 * pkin(2) + pkin(5) * t2701 + qJ(3,2) * t2999) * t2637 + (pkin(1) * t2559 + t2652) * t2638 + (-pkin(5) * t2559 + t2653) * t2644 + t2787 * t2973 + (t2625 * t2805 + t2617 + t2657) * t2418) * MDP(14) + t2996 * MDP(2) + t2528 * MDP(3) + (t2741 * t2961 + t2902) * t2637 * MDP(4) + (t2838 * t2967 + (t2992 - 0.2e1) * t2741) * MDP(5) + (t2364 * t2637 + t2643 * t2783) * MDP(6) + (t2364 * t2643 - t2637 * t2783) * MDP(7) + (t2643 * t2999 - t3009) * MDP(9);
t2386 = pkin(2) * t2966 + 0.4e1 * t2763;
t2410 = 0.2e1 * t2934;
t2676 = t2419 * MDP(1) + (-t2353 * t2645 - t3007) * MDP(10) + (t2386 * t2626 + ((t2410 - t2786) * t2639 + t2998) * t2645 - t3008 - 0.2e1 * t2763) * MDP(11) + ((-pkin(2) * t2782 + t2446 + t2908) * t2645 + (-t2553 * t2816 - t2697) * t2639 + 0.2e1 * t2416 - t2530) * MDP(12) + ((t2786 - 0.2e1 * t2934) * t2626 + (t2386 * t2639 + t2353) * t2645 + t3007 + (t2470 + 0.2e1 * t2455) * t2880 + t2410) * MDP(13) + ((t2473 - t2455 / 0.2e1) * t2796 * t2991 + (pkin(5) * t2446 + (t2763 * t2988 + t2353) * qJ(3,1) + ((-t2785 + t2934) * t2988 + t2998) * pkin(2)) * t2645 + (t2458 * t2762 * t2994 - t2353 * pkin(2) + pkin(5) * t2700 + qJ(3,1) * t2998) * t2639 + (pkin(1) * t2560 + t2652) * t2640 + (-pkin(5) * t2560 + t2653) * t2646 + t2785 * t2974 + (t2626 * t2804 + t2617 + t2660) * t2419) * MDP(14) + t2995 * MDP(2) + t2530 * MDP(3) + (t2740 * t2960 + t2901) * t2639 * MDP(4) + (t2836 * t2966 + (t2991 - 0.2e1) * t2740) * MDP(5) + (t2365 * t2639 + t2645 * t2782) * MDP(6) + (t2365 * t2645 - t2639 * t2782) * MDP(7) + (t2645 * t2998 - t3008) * MDP(9);
t1 = [(-t2499 * t2723 - t2501 * t2722 - t2503 * t2721) * MDP(4) + (t2634 - g(1)) * MDP(15) + (-t2676 * t2846 + (t2491 * t2688 + t2503 * t2679) * t2661) * t2552 + (-t2677 * t2849 + (t2489 * t2689 + t2501 * t2680) * t2658) * t2549 + (-t2678 * t2852 + (t2487 * t2690 + t2499 * t2681) * t2655) * t2546; (-t2498 * t2723 - t2500 * t2722 - t2502 * t2721) * MDP(4) + (t2633 - g(2)) * MDP(15) + (t2676 * t2855 + (t2490 * t2688 + t2502 * t2679) * t2661) * t2552 + (t2677 * t2858 + (t2488 * t2689 + t2500 * t2680) * t2658) * t2549 + (t2678 * t2861 + (t2486 * t2690 + t2498 * t2681) * t2655) * t2546; (t2522 * t2624 * t2739 + t2523 * t2625 * t2738 + t2524 * t2626 * t2737) * MDP(4) + (t2632 - g(3)) * MDP(15) + (-t2676 * t2646 + (t2688 * t2506 + (-t2419 * t2626 * MDP(7) + (t2419 * t2724 + t2685) * t2645) * t2524) * t2661) * t2552 + (-t2677 * t2644 + (t2689 * t2505 + (-t2418 * t2625 * MDP(7) + (t2418 * t2725 + t2686) * t2643) * t2523) * t2658) * t2549 + (-t2678 * t2642 + (t2690 * t2504 + (-t2417 * t2624 * MDP(7) + (t2417 * t2726 + t2687) * t2641) * t2522) * t2655) * t2546;];
tauX  = t1;
