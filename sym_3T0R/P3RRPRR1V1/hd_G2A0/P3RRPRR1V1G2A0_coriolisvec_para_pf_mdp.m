% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR1V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 17:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR1V1G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 17:08:32
% EndTime: 2022-11-04 17:08:36
% DurationCPUTime: 4.87s
% Computational Cost: add. (11643->378), mult. (18607->815), div. (2535->21), fcn. (14808->18), ass. (0->322)
t2232 = (pkin(1) ^ 2);
t2450 = -2 * t2232;
t2210 = pkin(3) + qJ(3,3);
t2180 = 0.1e1 / t2210 ^ 2;
t2222 = cos(qJ(2,3));
t2192 = 0.1e1 / t2222;
t2389 = t2180 * t2192;
t2211 = pkin(3) + qJ(3,2);
t2183 = 0.1e1 / t2211 ^ 2;
t2224 = cos(qJ(2,2));
t2197 = 0.1e1 / t2224;
t2387 = t2183 * t2197;
t2212 = pkin(3) + qJ(3,1);
t2186 = 0.1e1 / t2212 ^ 2;
t2226 = cos(qJ(2,1));
t2202 = 0.1e1 / t2226;
t2385 = t2186 * t2202;
t2216 = sin(qJ(2,3));
t2384 = t2192 * t2216;
t2218 = sin(qJ(2,2));
t2382 = t2197 * t2218;
t2220 = sin(qJ(2,1));
t2380 = t2202 * t2220;
t2449 = 2 * pkin(1);
t2179 = 0.1e1 / t2210;
t2182 = 0.1e1 / t2211;
t2185 = 0.1e1 / t2212;
t2231 = pkin(1) + pkin(2);
t2207 = 1 / t2231;
t2213 = legFrame(3,2);
t2173 = sin(t2213);
t2176 = cos(t2213);
t2217 = sin(qJ(1,3));
t2223 = cos(qJ(1,3));
t2228 = xDP(3);
t2229 = xDP(2);
t2230 = xDP(1);
t2164 = t2173 * t2230 + t2176 * t2229;
t2375 = t2216 * t2164;
t2146 = (t2223 * t2228 + (-t2173 * t2229 + t2176 * t2230) * t2217) * t2222 + t2375;
t2448 = 0.2e1 * t2146;
t2214 = legFrame(2,2);
t2174 = sin(t2214);
t2177 = cos(t2214);
t2219 = sin(qJ(1,2));
t2225 = cos(qJ(1,2));
t2165 = t2174 * t2230 + t2177 * t2229;
t2372 = t2218 * t2165;
t2147 = (t2225 * t2228 + (-t2174 * t2229 + t2177 * t2230) * t2219) * t2224 + t2372;
t2447 = 0.2e1 * t2147;
t2215 = legFrame(1,2);
t2175 = sin(t2215);
t2178 = cos(t2215);
t2221 = sin(qJ(1,1));
t2227 = cos(qJ(1,1));
t2166 = t2175 * t2230 + t2178 * t2229;
t2369 = t2220 * t2166;
t2148 = (t2227 * t2228 + (-t2175 * t2229 + t2178 * t2230) * t2221) * t2226 + t2369;
t2446 = 0.2e1 * t2148;
t2191 = t2222 ^ 2;
t2445 = 0.2e1 * t2191;
t2196 = t2224 ^ 2;
t2444 = 0.2e1 * t2196;
t2201 = t2226 ^ 2;
t2443 = 0.2e1 * t2201;
t2442 = t2207 / 0.4e1;
t2193 = 0.1e1 / t2222 ^ 2;
t2441 = t2193 - 0.2e1;
t2198 = 0.1e1 / t2224 ^ 2;
t2440 = t2198 - 0.2e1;
t2203 = 0.1e1 / t2226 ^ 2;
t2439 = t2203 - 0.2e1;
t2438 = pkin(1) * t2207;
t2437 = MDP(7) * t2207;
t2206 = t2231 ^ 2;
t2436 = MDP(8) * t2207 / t2206;
t2366 = t2222 * t2231;
t2167 = t2210 * t2217 + t2223 * t2366;
t2373 = t2217 * t2222;
t2378 = t2210 * t2223;
t2134 = (-t2230 * t2378 + (t2216 * t2229 + t2230 * t2373) * t2231) * t2176 + (t2229 * t2378 - (-t2216 * t2230 + t2229 * t2373) * t2231) * t2173 + t2167 * t2228;
t2161 = t2164 ^ 2;
t2181 = t2179 * t2180;
t2194 = t2192 / t2191;
t2332 = t2146 * t2389;
t2420 = t2134 * t2146;
t2101 = -t2181 * t2192 * t2420 + (-(-t2146 * t2231 + t2134) * t2332 + t2207 * t2161 * t2194) * t2179;
t2435 = t2101 * qJ(3,3);
t2365 = t2224 * t2231;
t2168 = t2211 * t2219 + t2225 * t2365;
t2370 = t2219 * t2224;
t2377 = t2211 * t2225;
t2135 = (-t2230 * t2377 + (t2218 * t2229 + t2230 * t2370) * t2231) * t2177 + (t2229 * t2377 - (-t2218 * t2230 + t2229 * t2370) * t2231) * t2174 + t2168 * t2228;
t2162 = t2165 ^ 2;
t2184 = t2182 * t2183;
t2199 = t2197 / t2196;
t2329 = t2147 * t2387;
t2417 = t2135 * t2147;
t2102 = -t2184 * t2197 * t2417 + (-(-t2147 * t2231 + t2135) * t2329 + t2207 * t2162 * t2199) * t2182;
t2434 = t2102 * qJ(3,2);
t2364 = t2226 * t2231;
t2169 = t2212 * t2221 + t2227 * t2364;
t2367 = t2221 * t2226;
t2376 = t2212 * t2227;
t2136 = (-t2230 * t2376 + (t2220 * t2229 + t2230 * t2367) * t2231) * t2178 + (t2229 * t2376 - (-t2220 * t2230 + t2229 * t2367) * t2231) * t2175 + t2169 * t2228;
t2163 = t2166 ^ 2;
t2187 = t2185 * t2186;
t2204 = t2202 / t2201;
t2326 = t2148 * t2385;
t2414 = t2136 * t2148;
t2103 = -t2187 * t2202 * t2414 + (-(-t2148 * t2231 + t2136) * t2326 + t2207 * t2163 * t2204) * t2185;
t2433 = t2103 * qJ(3,1);
t2432 = t2101 * t2216;
t2431 = t2101 * t2222;
t2430 = t2102 * t2218;
t2429 = t2102 * t2224;
t2428 = t2103 * t2220;
t2427 = t2103 * t2226;
t2408 = t2146 * t2179;
t2140 = pkin(1) * t2408;
t2419 = t2134 * t2179;
t2426 = (t2140 - t2419) * t2179;
t2407 = t2147 * t2182;
t2141 = pkin(1) * t2407;
t2416 = t2135 * t2182;
t2425 = (t2141 - t2416) * t2182;
t2406 = t2148 * t2185;
t2142 = pkin(1) * t2406;
t2413 = t2136 * t2185;
t2424 = (t2142 - t2413) * t2185;
t2143 = t2146 ^ 2;
t2411 = t2143 * t2180;
t2423 = t2441 * t2411 * t2192;
t2144 = t2147 ^ 2;
t2410 = t2144 * t2183;
t2422 = t2440 * t2410 * t2197;
t2145 = t2148 ^ 2;
t2409 = t2145 * t2186;
t2421 = t2439 * t2409 * t2202;
t2418 = t2134 * t2231;
t2415 = t2135 * t2231;
t2412 = t2136 * t2231;
t2155 = -t2173 * t2373 + t2176 * t2216;
t2405 = t2155 * t2192;
t2156 = -t2174 * t2370 + t2177 * t2218;
t2404 = t2156 * t2197;
t2157 = -t2175 * t2367 + t2178 * t2220;
t2403 = t2157 * t2202;
t2158 = t2173 * t2216 + t2176 * t2373;
t2402 = t2158 * t2192;
t2159 = t2174 * t2218 + t2177 * t2370;
t2401 = t2159 * t2197;
t2160 = t2175 * t2220 + t2178 * t2367;
t2400 = t2160 * t2202;
t2208 = 1 / t2231 ^ 2;
t2399 = t2161 * t2208;
t2398 = t2162 * t2208;
t2397 = t2163 * t2208;
t2396 = t2164 * t2179;
t2395 = t2164 * t2180;
t2394 = t2165 * t2182;
t2393 = t2165 * t2183;
t2392 = t2166 * t2185;
t2391 = t2166 * t2186;
t2390 = t2179 * t2223;
t2388 = t2182 * t2225;
t2386 = t2185 * t2227;
t2383 = t2193 * t2216;
t2381 = t2198 * t2218;
t2379 = t2203 * t2220;
t2374 = t2216 * t2231;
t2371 = t2218 * t2231;
t2368 = t2220 * t2231;
t2089 = (-t2146 * t2216 + t2164) * t2192 ^ 2 * t2396 + (-(t2210 * (-t2146 + t2375) * t2192 + (-t2146 * t2206 + t2418) * t2222 * t2179) * t2389 - t2181 * t2418) * t2146;
t2188 = t2216 ^ 2;
t2324 = t2194 * t2399;
t2280 = t2188 * t2324;
t2251 = -qJ(3,3) * t2280 - t2089 * t2222;
t2356 = t2180 * t2448;
t2256 = -pkin(1) * t2399 + t2134 * t2356;
t2318 = t2207 * t2375;
t2268 = t2318 * t2408;
t2363 = (qJ(3,3) ^ 2 + t2191 * t2232) * t2101 + t2251 * pkin(1) + (qJ(3,3) * t2256 + t2268 * t2450) * t2192;
t2090 = (-t2147 * t2218 + t2165) * t2197 ^ 2 * t2394 + (-(t2211 * (-t2147 + t2372) * t2197 + (-t2147 * t2206 + t2415) * t2224 * t2182) * t2387 - t2184 * t2415) * t2147;
t2189 = t2218 ^ 2;
t2322 = t2199 * t2398;
t2279 = t2189 * t2322;
t2252 = -qJ(3,2) * t2279 - t2090 * t2224;
t2354 = t2183 * t2447;
t2255 = -pkin(1) * t2398 + t2135 * t2354;
t2317 = t2207 * t2372;
t2267 = t2317 * t2407;
t2362 = (qJ(3,2) ^ 2 + t2196 * t2232) * t2102 + t2252 * pkin(1) + (qJ(3,2) * t2255 + t2267 * t2450) * t2197;
t2091 = (-t2148 * t2220 + t2166) * t2202 ^ 2 * t2392 + (-(t2212 * (-t2148 + t2369) * t2202 + (-t2148 * t2206 + t2412) * t2226 * t2185) * t2385 - t2187 * t2412) * t2148;
t2190 = t2220 ^ 2;
t2320 = t2204 * t2397;
t2278 = t2190 * t2320;
t2253 = -qJ(3,1) * t2278 - t2091 * t2226;
t2352 = t2186 * t2446;
t2254 = -pkin(1) * t2397 + t2136 * t2352;
t2316 = t2207 * t2369;
t2266 = t2316 * t2406;
t2361 = (qJ(3,1) ^ 2 + t2201 * t2232) * t2103 + t2253 * pkin(1) + (qJ(3,1) * t2254 + t2266 * t2450) * t2202;
t2348 = pkin(1) * t2431;
t2360 = t2089 - t2348 + (-qJ(3,3) * t2411 + t2268 * t2449) * t2193;
t2347 = pkin(1) * t2429;
t2359 = t2090 - t2347 + (-qJ(3,2) * t2410 + t2267 * t2449) * t2198;
t2346 = pkin(1) * t2427;
t2358 = t2091 - t2346 + (-qJ(3,1) * t2409 + t2266 * t2449) * t2203;
t2357 = t2164 * t2448;
t2355 = t2165 * t2447;
t2353 = t2166 * t2446;
t2351 = -0.4e1 * t2390;
t2350 = -0.4e1 * t2388;
t2349 = -0.4e1 * t2386;
t2345 = t2101 * t2179 * t2192;
t2344 = t2101 * t2390;
t2343 = t2101 * t2384;
t2342 = t2102 * t2182 * t2197;
t2341 = t2102 * t2388;
t2340 = t2102 * t2382;
t2339 = t2103 * t2185 * t2202;
t2338 = t2103 * t2386;
t2337 = t2103 * t2380;
t2336 = t2143 * t2181 * t2193;
t2335 = t2144 * t2184 * t2198;
t2334 = t2145 * t2187 * t2203;
t2333 = t2146 * t2395;
t2331 = t2146 * t2383;
t2330 = t2147 * t2393;
t2328 = t2147 * t2381;
t2327 = t2148 * t2391;
t2325 = t2148 * t2379;
t2195 = 0.1e1 / t2191 ^ 2;
t2323 = t2161 * t2195 * t2216;
t2200 = 0.1e1 / t2196 ^ 2;
t2321 = t2162 * t2200 * t2218;
t2205 = 0.1e1 / t2201 ^ 2;
t2319 = t2163 * t2205 * t2220;
t2315 = t2179 * t2432;
t2314 = t2180 * t2383;
t2313 = t2182 * t2430;
t2312 = t2183 * t2381;
t2311 = t2186 * t2379;
t2310 = t2179 * (-pkin(1) * t2280 + t2256 * t2192 + 0.2e1 * t2435);
t2309 = t2182 * (-pkin(1) * t2279 + t2255 * t2197 + 0.2e1 * t2434);
t2308 = t2185 * (-pkin(1) * t2278 + t2254 * t2202 + 0.2e1 * t2433);
t2307 = t2363 * t2192;
t2306 = t2362 * t2197;
t2305 = t2361 * t2202;
t2304 = 0.2e1 * t2185 * t2428;
t2131 = (-qJ(3,3) * t2318 / 0.4e1 + (t2191 - 0.1e1 / 0.2e1) * t2140) * t2192;
t2303 = -0.4e1 * t2131 * t2179 * t2193;
t2132 = (-qJ(3,2) * t2317 / 0.4e1 + (t2196 - 0.1e1 / 0.2e1) * t2141) * t2197;
t2302 = -0.4e1 * t2132 * t2182 * t2198;
t2133 = (-qJ(3,1) * t2316 / 0.4e1 + (t2201 - 0.1e1 / 0.2e1) * t2142) * t2202;
t2301 = -0.4e1 * t2133 * t2185 * t2203;
t2137 = (qJ(3,3) * t2164 * t2442 + t2140 * t2216) * t2192;
t2300 = -0.4e1 * t2137 * t2396;
t2138 = (qJ(3,2) * t2165 * t2442 + t2141 * t2218) * t2197;
t2299 = -0.4e1 * t2138 * t2394;
t2139 = (qJ(3,1) * t2166 * t2442 + t2142 * t2220) * t2202;
t2298 = -0.4e1 * t2139 * t2392;
t2297 = t2167 * t2356;
t2296 = 0.2e1 * t2332;
t2295 = t2168 * t2354;
t2294 = 0.2e1 * t2329;
t2293 = t2169 * t2352;
t2292 = 0.2e1 * t2326;
t2291 = 0.2e1 * t2315;
t2290 = 0.2e1 * t2313;
t2289 = pkin(1) * t2324;
t2288 = pkin(1) * t2322;
t2287 = pkin(1) * t2320;
t2286 = t2188 * t2345;
t2285 = t2189 * t2342;
t2284 = t2190 * t2339;
t2283 = t2223 * t2333;
t2282 = t2225 * t2330;
t2281 = t2227 * t2327;
t2277 = 0.2e1 * t2331;
t2276 = 0.2e1 * t2328;
t2275 = 0.2e1 * t2325;
t2274 = t2192 * t2310;
t2273 = t2197 * t2309;
t2272 = t2202 * t2308;
t2271 = (-pkin(1) * t2145 * t2439 - 0.2e1 * t2414) * t2385 - t2433;
t2270 = (-pkin(1) * t2144 * t2440 - 0.2e1 * t2417) * t2387 - t2434;
t2269 = (-pkin(1) * t2143 * t2441 - 0.2e1 * t2420) * t2389 - t2435;
t2170 = t2445 - 0.1e1;
t2265 = 0.2e1 * t2170 * t2194 * t2333;
t2171 = t2444 - 0.1e1;
t2264 = 0.2e1 * t2171 * t2199 * t2330;
t2172 = t2443 - 0.1e1;
t2263 = 0.2e1 * t2172 * t2204 * t2327;
t2262 = t2161 * t2179 * (t2188 * t2195 + t2193);
t2261 = t2162 * t2182 * (t2189 * t2200 + t2198);
t2260 = t2163 * t2185 * (t2190 * t2205 + t2203);
t2259 = t2217 * t2366 - t2378;
t2258 = t2219 * t2365 - t2377;
t2257 = t2221 * t2364 - t2376;
t2250 = (t2140 - 0.2e1 * t2419) * t2179 * t2331 + (t2289 - t2435) * t2384;
t2249 = (t2141 - 0.2e1 * t2416) * t2182 * t2328 + (t2288 - t2434) * t2382;
t2248 = (t2142 - 0.2e1 * t2413) * t2185 * t2325 + (t2287 - t2433) * t2380;
t2247 = t2173 * t2343 + t2174 * t2340 + t2175 * t2337;
t2246 = t2176 * t2343 + t2177 * t2340 + t2178 * t2337;
t2154 = t2175 * t2368 + t2178 * t2257;
t2153 = t2174 * t2371 + t2177 * t2258;
t2152 = t2173 * t2374 + t2176 * t2259;
t2151 = -t2174 * t2258 + t2177 * t2371;
t2150 = -t2175 * t2257 + t2178 * t2368;
t2149 = -t2173 * t2259 + t2176 * t2374;
t2094 = (0.2e1 * t2287 - t2433) * t2220;
t2093 = (0.2e1 * t2288 - t2434) * t2218;
t2092 = (0.2e1 * t2289 - t2435) * t2216;
t2085 = (-qJ(3,1) * t2203 * t2397 + t2091 - 0.2e1 * t2346) * t2220;
t2084 = (-qJ(3,2) * t2198 * t2398 + t2090 - 0.2e1 * t2347) * t2218;
t2083 = (-qJ(3,3) * t2193 * t2399 + t2089 - 0.2e1 * t2348) * t2216;
t2082 = pkin(1) * t2103 * t2443 + t2253;
t2081 = pkin(1) * t2102 * t2444 + t2252;
t2080 = pkin(1) * t2101 * t2445 + t2251;
t1 = [(t2158 * t2345 + t2159 * t2342 + t2160 * t2339) * MDP(1) + (t2158 * t2286 + t2159 * t2285 + t2160 * t2284 + ((-t2145 * t2175 + t2160 * t2353) * t2311 + (-t2144 * t2174 + t2159 * t2355) * t2312 + (-t2143 * t2173 + t2158 * t2357) * t2314) * t2207) * MDP(4) + (t2158 * t2291 + t2159 * t2290 + t2160 * t2304 + (t2158 * t2265 + t2159 * t2264 + t2160 * t2263 + t2173 * t2423 + t2174 * t2422 + t2175 * t2421) * t2207) * MDP(5) + (t2247 * t2207 + (t2158 * t2262 + t2159 * t2261 + t2160 * t2260) * t2208) * MDP(6) + (t2101 * t2173 + t2102 * t2174 + t2103 * t2175) * t2437 + (t2173 * t2323 + t2174 * t2321 + t2175 * t2319) * t2436 + ((t2082 * t2400 - t2154 * t2427) * t2185 + (t2081 * t2401 - t2153 * t2429) * t2182 + (t2080 * t2402 - t2152 * t2431) * t2179 + ((t2094 * t2175 + t2160 * t2298) * t2202 + (t2093 * t2174 + t2159 * t2299) * t2197 + (t2092 * t2173 + t2158 * t2300) * t2192 + (t2154 * t2391 + t2175 * t2424) * t2275 + (t2153 * t2393 + t2174 * t2425) * t2276 + (t2152 * t2395 + t2173 * t2426) * t2277) * t2207) * MDP(11) + ((t2085 * t2400 + t2154 * t2428) * t2185 + (t2084 * t2401 + t2153 * t2430) * t2182 + (t2083 * t2402 + t2152 * t2432) * t2179 + (t2271 * t2175 + t2270 * t2174 + t2269 * t2173 + (t2154 * t2292 + t2160 * t2301) * t2166 + (t2153 * t2294 + t2159 * t2302) * t2165 + (t2152 * t2296 + t2158 * t2303) * t2164) * t2207) * MDP(12) + (-t2152 * t2336 - t2153 * t2335 - t2154 * t2334 + t2158 * t2274 + t2159 * t2273 + t2160 * t2272 - t2247 * t2438) * MDP(13) + ((t2154 * t2358 + t2160 * t2305) * t2185 + (t2153 * t2359 + t2159 * t2306) * t2182 + (t2152 * t2360 + t2158 * t2307) * t2179 + (t2173 * t2250 + t2174 * t2249 + t2175 * t2248) * t2438) * MDP(14); (t2155 * t2345 + t2156 * t2342 + t2157 * t2339) * MDP(1) + (t2155 * t2286 + t2156 * t2285 + t2157 * t2284 + ((-t2145 * t2178 + t2157 * t2353) * t2311 + (-t2144 * t2177 + t2156 * t2355) * t2312 + (-t2143 * t2176 + t2155 * t2357) * t2314) * t2207) * MDP(4) + (t2155 * t2291 + t2156 * t2290 + t2157 * t2304 + (t2155 * t2265 + t2156 * t2264 + t2157 * t2263 + t2176 * t2423 + t2177 * t2422 + t2178 * t2421) * t2207) * MDP(5) + (t2246 * t2207 + (t2155 * t2262 + t2156 * t2261 + t2157 * t2260) * t2208) * MDP(6) + (t2101 * t2176 + t2102 * t2177 + t2103 * t2178) * t2437 + (t2176 * t2323 + t2177 * t2321 + t2178 * t2319) * t2436 + ((t2082 * t2403 - t2150 * t2427) * t2185 + (t2081 * t2404 - t2151 * t2429) * t2182 + (t2080 * t2405 - t2149 * t2431) * t2179 + ((t2094 * t2178 + t2157 * t2298) * t2202 + (t2093 * t2177 + t2156 * t2299) * t2197 + (t2092 * t2176 + t2155 * t2300) * t2192 + (t2150 * t2391 + t2178 * t2424) * t2275 + (t2151 * t2393 + t2177 * t2425) * t2276 + (t2149 * t2395 + t2176 * t2426) * t2277) * t2207) * MDP(11) + ((t2085 * t2403 + t2150 * t2428) * t2185 + (t2084 * t2404 + t2151 * t2430) * t2182 + (t2083 * t2405 + t2149 * t2432) * t2179 + (t2271 * t2178 + t2270 * t2177 + t2269 * t2176 + (t2150 * t2292 + t2157 * t2301) * t2166 + (t2151 * t2294 + t2156 * t2302) * t2165 + (t2149 * t2296 + t2155 * t2303) * t2164) * t2207) * MDP(12) + (-t2149 * t2336 - t2150 * t2334 - t2151 * t2335 + t2155 * t2274 + t2156 * t2273 + t2157 * t2272 - t2246 * t2438) * MDP(13) + ((t2150 * t2358 + t2157 * t2305) * t2185 + (t2151 * t2359 + t2156 * t2306) * t2182 + (t2149 * t2360 + t2155 * t2307) * t2179 + (t2176 * t2250 + t2177 * t2249 + t2178 * t2248) * t2438) * MDP(14); (t2338 + t2341 + t2344) * MDP(1) + (t2188 * t2344 + t2189 * t2341 + t2190 * t2338 + 0.2e1 * (t2281 * t2380 + t2282 * t2382 + t2283 * t2384) * t2207) * MDP(4) + 0.2e1 * (t2223 * t2222 * t2315 + t2225 * t2224 * t2313 + t2226 * t2220 * t2338 + (t2170 * t2193 * t2283 + t2171 * t2198 * t2282 + t2172 * t2203 * t2281) * t2207) * MDP(5) + ((t2190 * t2204 + t2202) * t2163 * t2386 + (t2189 * t2199 + t2197) * t2162 * t2388 + (t2188 * t2194 + t2192) * t2161 * t2390) * t2208 * MDP(6) + ((t2082 * t2227 - t2169 * t2427) * t2185 + (t2081 * t2225 - t2168 * t2429) * t2182 + (t2080 * t2223 - t2167 * t2431) * t2179 + ((t2139 * t2349 + t2293 * t2379) * t2166 + (t2138 * t2350 + t2295 * t2381) * t2165 + (t2137 * t2351 + t2297 * t2383) * t2164) * t2207) * MDP(11) + ((t2085 * t2227 + t2169 * t2428) * t2185 + (t2084 * t2225 + t2168 * t2430) * t2182 + (t2083 * t2223 + t2167 * t2432) * t2179 + ((t2133 * t2349 + t2293) * t2202 * t2166 + (t2132 * t2350 + t2295) * t2197 * t2165 + (t2131 * t2351 + t2297) * t2192 * t2164) * t2207) * MDP(12) + (-t2167 * t2336 - t2168 * t2335 - t2169 * t2334 + t2223 * t2310 + t2225 * t2309 + t2227 * t2308) * MDP(13) + ((t2169 * t2358 + t2227 * t2361) * t2185 + (t2168 * t2359 + t2225 * t2362) * t2182 + (t2167 * t2360 + t2223 * t2363) * t2179) * MDP(14);];
taucX  = t1;
