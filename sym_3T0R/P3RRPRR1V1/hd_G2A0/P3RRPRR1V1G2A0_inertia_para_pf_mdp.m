% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR1V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 17:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR1V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_mdp: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 17:08:27
% EndTime: 2022-11-04 17:08:32
% DurationCPUTime: 4.62s
% Computational Cost: add. (2751->440), mult. (3842->879), div. (1317->14), fcn. (4137->18), ass. (0->370)
t1981 = 2 * MDP(13);
t1823 = legFrame(3,2);
t1791 = sin(t1823);
t1794 = cos(t1823);
t1826 = sin(qJ(2,3));
t1827 = sin(qJ(1,3));
t1832 = cos(qJ(2,3));
t1992 = t1827 * t1832;
t1782 = -t1791 * t1992 + t1794 * t1826;
t1785 = t1791 * t1826 + t1794 * t1992;
t2076 = t1782 * t1785;
t1824 = legFrame(2,2);
t1792 = sin(t1824);
t1795 = cos(t1824);
t1828 = sin(qJ(2,2));
t1829 = sin(qJ(1,2));
t1834 = cos(qJ(2,2));
t1990 = t1829 * t1834;
t1783 = -t1792 * t1990 + t1795 * t1828;
t1786 = t1792 * t1828 + t1795 * t1990;
t2075 = t1783 * t1786;
t1825 = legFrame(1,2);
t1793 = sin(t1825);
t1796 = cos(t1825);
t1830 = sin(qJ(2,1));
t1831 = sin(qJ(1,1));
t1836 = cos(qJ(2,1));
t1988 = t1831 * t1836;
t1784 = -t1793 * t1988 + t1796 * t1830;
t1787 = t1793 * t1830 + t1796 * t1988;
t2074 = t1784 * t1787;
t2073 = 2 * pkin(1);
t2072 = 2 * MDP(5);
t2071 = 2 * MDP(6);
t2070 = 2 * MDP(7);
t1838 = pkin(1) + pkin(2);
t1818 = 1 / t1838;
t2069 = pkin(1) * t1818;
t2068 = pkin(1) * t1832;
t2067 = pkin(1) * t1834;
t2066 = pkin(1) * t1836;
t2065 = MDP(6) * t1818;
t2064 = MDP(7) * t1818;
t2063 = MDP(8) / t1838 ^ 2;
t1822 = pkin(3) + qJ(3,1);
t1801 = 0.1e1 / t1822;
t2062 = (qJ(3,1) * t1801);
t1821 = pkin(3) + qJ(3,2);
t1799 = 0.1e1 / t1821;
t2061 = (qJ(3,2) * t1799);
t1820 = pkin(3) + qJ(3,3);
t1797 = 0.1e1 / t1820;
t2060 = (qJ(3,3) * t1797);
t1833 = cos(qJ(1,3));
t1986 = t1832 * t1838;
t1854 = -t1820 * t1833 + t1827 * t1986;
t1993 = t1826 * t1838;
t1761 = -t1854 * t1791 + t1794 * t1993;
t1752 = t1761 * t1797;
t1798 = 0.1e1 / t1820 ^ 2;
t2059 = t1761 * t1798;
t1837 = cos(qJ(1,1));
t1982 = t1836 * t1838;
t1852 = -t1822 * t1837 + t1831 * t1982;
t1989 = t1830 * t1838;
t1762 = -t1852 * t1793 + t1796 * t1989;
t1753 = t1762 * t1801;
t1802 = 0.1e1 / t1822 ^ 2;
t2058 = t1762 * t1802;
t1835 = cos(qJ(1,2));
t1984 = t1834 * t1838;
t1853 = -t1821 * t1835 + t1829 * t1984;
t1991 = t1828 * t1838;
t1763 = -t1853 * t1792 + t1795 * t1991;
t1754 = t1763 * t1799;
t1800 = 0.1e1 / t1821 ^ 2;
t2057 = t1763 * t1800;
t1764 = t1791 * t1993 + t1854 * t1794;
t1755 = t1764 * t1797;
t2056 = t1764 * t1798;
t1765 = t1792 * t1991 + t1853 * t1795;
t1756 = t1765 * t1799;
t2055 = t1765 * t1800;
t1766 = t1793 * t1989 + t1852 * t1796;
t1757 = t1766 * t1801;
t2054 = t1766 * t1802;
t1788 = t1820 * t1827 + t1833 * t1986;
t1779 = t1788 * t1797;
t1987 = t1832 * t1833;
t1917 = pkin(1) * t1797 * t1987;
t1767 = t1779 - t1917;
t2053 = t1767 * t1797;
t1789 = t1821 * t1829 + t1835 * t1984;
t1780 = t1789 * t1799;
t1985 = t1834 * t1835;
t1916 = pkin(1) * t1799 * t1985;
t1769 = t1780 - t1916;
t2052 = t1769 * t1799;
t1790 = t1822 * t1831 + t1837 * t1982;
t1781 = t1790 * t1801;
t1983 = t1836 * t1837;
t1915 = pkin(1) * t1801 * t1983;
t1771 = t1781 - t1915;
t2051 = t1771 * t1801;
t2050 = t1782 * t1797;
t2049 = t1783 * t1799;
t2048 = t1784 * t1801;
t2047 = t1785 * t1797;
t2046 = t1786 * t1799;
t2045 = t1787 * t1801;
t2044 = t1788 * t1798;
t2043 = t1788 * t1832;
t2042 = t1789 * t1800;
t2041 = t1789 * t1834;
t2040 = t1790 * t1802;
t2039 = t1790 * t1836;
t1807 = 0.1e1 / t1832;
t2038 = t1791 * t1807;
t2037 = t1791 * t1818;
t1811 = 0.1e1 / t1834;
t2036 = t1792 * t1811;
t2035 = t1792 * t1818;
t1815 = 0.1e1 / t1836;
t2034 = t1793 * t1815;
t2033 = t1793 * t1818;
t2032 = t1794 * t1807;
t2031 = t1794 * t1818;
t2030 = t1795 * t1811;
t2029 = t1795 * t1818;
t2028 = t1796 * t1815;
t2027 = t1796 * t1818;
t2026 = t1797 * t1807;
t2025 = t1797 * t1826;
t2024 = t1797 * t1832;
t2023 = t1797 * t1833;
t1808 = 0.1e1 / t1832 ^ 2;
t2022 = t1798 * t1808;
t1809 = t1833 ^ 2;
t2021 = t1798 * t1809;
t2020 = t1798 * t1826;
t2019 = t1798 * t1832;
t2018 = t1798 * t1833;
t2017 = t1799 * t1811;
t2016 = t1799 * t1828;
t2015 = t1799 * t1834;
t2014 = t1799 * t1835;
t1812 = 0.1e1 / t1834 ^ 2;
t2013 = t1800 * t1812;
t1813 = t1835 ^ 2;
t2012 = t1800 * t1813;
t2011 = t1800 * t1828;
t2010 = t1800 * t1834;
t2009 = t1800 * t1835;
t2008 = t1801 * t1815;
t2007 = t1801 * t1830;
t2006 = t1801 * t1836;
t2005 = t1801 * t1837;
t1816 = 0.1e1 / t1836 ^ 2;
t2004 = t1802 * t1816;
t1817 = t1837 ^ 2;
t2003 = t1802 * t1817;
t2002 = t1802 * t1830;
t2001 = t1802 * t1836;
t2000 = t1802 * t1837;
t1999 = t1807 * t1826;
t1998 = t1811 * t1828;
t1997 = t1815 * t1830;
t1996 = t1818 * t1826;
t1995 = t1818 * t1828;
t1994 = t1818 * t1830;
t1980 = 2 * t2062;
t1979 = 2 * t2061;
t1978 = 2 * t2060;
t1977 = pkin(1) * t2050;
t1976 = pkin(1) * t2049;
t1975 = pkin(1) * t2048;
t1974 = pkin(1) * t2047;
t1973 = pkin(1) * t2046;
t1972 = pkin(1) * t2045;
t1971 = pkin(1) * t2037;
t1970 = pkin(1) * t2035;
t1969 = pkin(1) * t2033;
t1968 = pkin(1) * t2031;
t1967 = pkin(1) * t2029;
t1966 = pkin(1) * t2027;
t1965 = pkin(1) * t1996;
t1964 = pkin(1) * t1995;
t1963 = pkin(1) * t1994;
t1962 = t1818 * t2062;
t1961 = qJ(3,1) * t2007;
t1960 = t1818 * t2061;
t1959 = qJ(3,2) * t2016;
t1958 = t1818 * t2060;
t1957 = qJ(3,3) * t2025;
t1956 = t1761 * t2020;
t1955 = t1762 * t2002;
t1954 = t1763 * t2011;
t1953 = t1764 * t2020;
t1952 = t1765 * t2011;
t1951 = t1766 * t2002;
t1950 = t1782 * t2026;
t1949 = t1783 * t2017;
t1948 = t1784 * t2008;
t1947 = t1785 * t2026;
t1946 = t1786 * t2017;
t1945 = t1787 * t2008;
t1944 = t1791 * t2023;
t1943 = t1792 * t2014;
t1942 = t1793 * t2005;
t1941 = t1794 * t2023;
t1940 = t1795 * t2014;
t1939 = t1796 * t2005;
t1938 = t1797 * t1999;
t1937 = t1808 * t2025;
t1803 = t1826 ^ 2;
t1936 = t1803 * t2022;
t1935 = t1798 * t1999;
t1934 = t1807 * t2018;
t1933 = t1826 * t2018;
t1932 = t1798 * t1987;
t1931 = t1799 * t1998;
t1930 = t1812 * t2016;
t1804 = t1828 ^ 2;
t1929 = t1804 * t2013;
t1928 = t1800 * t1998;
t1927 = t1811 * t2009;
t1926 = t1828 * t2009;
t1925 = t1800 * t1985;
t1924 = t1801 * t1997;
t1923 = t1816 * t2007;
t1805 = t1830 ^ 2;
t1922 = t1805 * t2004;
t1921 = t1802 * t1997;
t1920 = t1815 * t2000;
t1919 = t1830 * t2000;
t1918 = t1802 * t1983;
t1914 = t1784 * t1961;
t1913 = t1787 * t1961;
t1912 = qJ(3,1) * t1815 * t1994;
t1911 = t1783 * t1959;
t1910 = t1786 * t1959;
t1909 = qJ(3,2) * t1811 * t1995;
t1908 = t1782 * t1957;
t1907 = t1785 * t1957;
t1906 = qJ(3,3) * t1807 * t1996;
t1768 = t1779 - 0.2e1 * t1917;
t1905 = t1768 * t1938;
t1770 = t1780 - 0.2e1 * t1916;
t1904 = t1770 * t1931;
t1772 = t1781 - 0.2e1 * t1915;
t1903 = t1772 * t1924;
t1902 = t2022 * t2076;
t1901 = t1794 * t1950;
t1900 = t1782 * t1934;
t1899 = t2013 * t2075;
t1898 = t1795 * t1949;
t1897 = t1783 * t1927;
t1896 = t2004 * t2074;
t1895 = t1796 * t1948;
t1894 = t1784 * t1920;
t1893 = t1791 * t1947;
t1892 = t1785 * t1934;
t1891 = t1792 * t1946;
t1890 = t1786 * t1927;
t1889 = t1793 * t1945;
t1888 = t1787 * t1920;
t1887 = t1788 * t1935;
t1886 = t1789 * t1928;
t1885 = t1790 * t1921;
t1884 = t1791 * t1937;
t1883 = t1792 * t1930;
t1882 = t1793 * t1923;
t1881 = t1794 * t1937;
t1880 = t1795 * t1930;
t1879 = t1796 * t1923;
t1878 = t1833 * t1938;
t1877 = t1803 * t1934;
t1876 = t1835 * t1931;
t1875 = t1804 * t1927;
t1874 = t1837 * t1924;
t1873 = t1805 * t1920;
t1872 = t1793 * t1912;
t1871 = t1796 * t1912;
t1870 = t1792 * t1909;
t1869 = t1795 * t1909;
t1868 = t1791 * t1906;
t1867 = t1794 * t1906;
t1866 = t1791 * t1878;
t1865 = t1792 * t1876;
t1864 = t1793 * t1874;
t1863 = t1794 * t1878;
t1862 = t1795 * t1876;
t1861 = t1796 * t1874;
t1845 = t1861 + t1862 + t1863;
t1860 = (t1782 * t1877 + t1783 * t1875 + t1784 * t1873) * MDP(4) + (t1782 * t1933 + t1783 * t1926 + t1784 * t1919) * t2072 + (t1894 + t1897 + t1900) * MDP(1) + t1845 * t2065 + (t1939 + t1940 + t1941) * t2064;
t1846 = t1864 + t1865 + t1866;
t1859 = (t1785 * t1877 + t1786 * t1875 + t1787 * t1873) * MDP(4) + (t1785 * t1933 + t1786 * t1926 + t1787 * t1919) * t2072 + (t1888 + t1890 + t1892) * MDP(1) + t1846 * t2065 + (t1942 + t1943 + t1944) * t2064;
t1839 = qJ(3,3) ^ 2;
t1842 = pkin(1) ^ 2;
t1858 = t1807 * t1839 + t1832 * t1842;
t1840 = qJ(3,2) ^ 2;
t1857 = t1811 * t1840 + t1834 * t1842;
t1841 = qJ(3,1) ^ 2;
t1856 = t1815 * t1841 + t1836 * t1842;
t1849 = t1801 * (t1784 * t1793 + t1787 * t1796);
t1850 = t1799 * (t1783 * t1792 + t1786 * t1795);
t1851 = t1797 * (t1782 * t1791 + t1785 * t1794);
t1855 = (t1826 * t1808 * t1851 + t1828 * t1812 * t1850 + t1830 * t1816 * t1849) * t2065 + (t1807 * t1851 + t1811 * t1850 + t1815 * t1849) * t2064 + (t1921 * t2074 + t1928 * t2075 + t1935 * t2076) * t2072 + (t1803 * t1902 + t1804 * t1899 + t1805 * t1896) * MDP(4) + (t1896 + t1899 + t1902) * MDP(1) + (t1791 * t1794 * t1808 + t1792 * t1795 * t1812 + t1793 * t1796 * t1816) * t2063;
t1848 = t1782 * t1881 + t1783 * t1880 + t1784 * t1879;
t1847 = t1785 * t1884 + t1786 * t1883 + t1787 * t1882;
t1844 = -qJ(3,1) * t1864 - qJ(3,2) * t1865 - qJ(3,3) * t1866;
t1843 = -qJ(3,1) * t1861 - qJ(3,2) * t1862 - qJ(3,3) * t1863;
t1814 = t1836 ^ 2;
t1810 = t1834 ^ 2;
t1806 = t1832 ^ 2;
t1778 = t1787 ^ 2;
t1777 = t1786 ^ 2;
t1776 = t1785 ^ 2;
t1775 = t1784 ^ 2;
t1774 = t1783 ^ 2;
t1773 = t1782 ^ 2;
t1760 = (t1814 * t1837 * t2073 - t2039) * t1801;
t1759 = (t1810 * t1835 * t2073 - t2041) * t1799;
t1758 = (t1806 * t1833 * t2073 - t2043) * t1797;
t1751 = (-t1914 + 0.2e1 * t1966) * t1815;
t1750 = (-t1911 + 0.2e1 * t1967) * t1811;
t1749 = (-t1908 + 0.2e1 * t1968) * t1807;
t1748 = (-t1913 + 0.2e1 * t1969) * t1815;
t1747 = (-t1910 + 0.2e1 * t1970) * t1811;
t1746 = (-t1907 + 0.2e1 * t1971) * t1807;
t1745 = (t1784 * t1980 - t1796 * t1963) * t1815;
t1744 = (t1787 * t1980 - t1793 * t1963) * t1815;
t1743 = (-t1913 + t1969) * t1815;
t1742 = (-t1914 + t1966) * t1815;
t1741 = (t1783 * t1979 - t1795 * t1964) * t1811;
t1740 = (t1786 * t1979 - t1792 * t1964) * t1811;
t1739 = (-t1910 + t1970) * t1811;
t1738 = (-t1911 + t1967) * t1811;
t1737 = (t1782 * t1978 - t1794 * t1965) * t1807;
t1736 = (t1785 * t1978 - t1791 * t1965) * t1807;
t1735 = (-t1907 + t1971) * t1807;
t1734 = (-t1908 + t1968) * t1807;
t1733 = (-pkin(1) * t2039 + (t1814 * t1842 + t1841) * t1837) * t1801;
t1732 = (-pkin(1) * t2041 + (t1810 * t1842 + t1840) * t1835) * t1799;
t1731 = (-pkin(1) * t2043 + (t1806 * t1842 + t1839) * t1833) * t1797;
t1725 = t1757 - t1972;
t1724 = t1756 - t1973;
t1723 = t1755 - t1974;
t1722 = t1753 - t1975;
t1721 = t1754 - t1976;
t1720 = t1752 - t1977;
t1719 = (t1757 - 0.2e1 * t1972) * t1830 - qJ(3,1) * t2033;
t1718 = (t1756 - 0.2e1 * t1973) * t1828 - qJ(3,2) * t2035;
t1717 = (t1755 - 0.2e1 * t1974) * t1826 - qJ(3,3) * t2037;
t1716 = (t1753 - 0.2e1 * t1975) * t1830 - qJ(3,1) * t2027;
t1715 = (t1754 - 0.2e1 * t1976) * t1828 - qJ(3,2) * t2029;
t1714 = (t1752 - 0.2e1 * t1977) * t1826 - qJ(3,3) * t2031;
t1713 = -t1872 + (t1787 * t2073 - t1766) * t2006;
t1712 = -t1871 + (t1784 * t2073 - t1762) * t2006;
t1711 = -t1870 + (t1786 * t2073 - t1765) * t2015;
t1710 = -t1869 + (t1783 * t2073 - t1763) * t2015;
t1709 = -t1868 + (t1785 * t2073 - t1764) * t2024;
t1708 = -t1867 + (t1782 * t2073 - t1761) * t2024;
t1701 = -pkin(1) * t1872 + (-t1766 * t2066 + t1856 * t1787) * t1801;
t1700 = -pkin(1) * t1871 + (-t1762 * t2066 + t1856 * t1784) * t1801;
t1699 = -pkin(1) * t1870 + (-t1765 * t2067 + t1857 * t1786) * t1799;
t1698 = -pkin(1) * t1869 + (-t1763 * t2067 + t1857 * t1783) * t1799;
t1697 = -pkin(1) * t1868 + (-t1764 * t2068 + t1858 * t1785) * t1797;
t1696 = -pkin(1) * t1867 + (-t1761 * t2068 + t1858 * t1782) * t1797;
t1 = [(t1776 * t2022 + t1777 * t2013 + t1778 * t2004) * MDP(1) + (t1776 * t1936 + t1777 * t1929 + t1778 * t1922) * MDP(4) + (t1776 * t1935 + t1777 * t1928 + t1778 * t1921) * t2072 + (t1723 * t1755 + t1724 * t1756 + t1725 * t1757) * MDP(14) + MDP(15) + (-MDP(11) * t2054 + (MDP(12) * t1951 + (t1713 * MDP(11) + t1719 * MDP(12) + t1744 * MDP(13) + t1701 * MDP(14)) * t1801) * t1815) * t1787 + (-MDP(11) * t2055 + (MDP(12) * t1952 + (t1711 * MDP(11) + t1718 * MDP(12) + t1740 * MDP(13) + t1699 * MDP(14)) * t1799) * t1811) * t1786 + (-MDP(11) * t2056 + (MDP(12) * t1953 + (t1709 * MDP(11) + t1717 * MDP(12) + t1736 * MDP(13) + t1697 * MDP(14)) * t1797) * t1807) * t1785 + (t1791 ^ 2 * t1808 + t1792 ^ 2 * t1812 + t1793 ^ 2 * t1816) * t2063 + ((t1746 * t2038 + t1747 * t2036 + t1748 * t2034) * MDP(11) + (-qJ(3,1) * t1889 - qJ(3,2) * t1891 - qJ(3,3) * t1893) * MDP(12) + t1847 * t2071 + (t1889 + t1891 + t1893) * t2070 + (-t1847 * MDP(13) + (t1735 * t2038 + t1739 * t2036 + t1743 * t2034) * MDP(14)) * pkin(1)) * t1818; (t1708 * t1947 + t1710 * t1946 + t1712 * t1945 - t1782 * t2056 - t1783 * t2055 - t1784 * t2054 + (t1749 * t2038 + t1750 * t2036 + t1751 * t2034) * t1818) * MDP(11) + ((t1716 * t2045 + (-t1793 * t1962 + t1951) * t1784) * t1815 + (t1715 * t2046 + (-t1792 * t1960 + t1952) * t1783) * t1811 + (t1714 * t2047 + (-t1791 * t1958 + t1953) * t1782) * t1807) * MDP(12) + (t1737 * t1947 + t1741 * t1946 + t1745 * t1945 + (-t1782 * t1884 - t1783 * t1883 - t1784 * t1882) * t2069) * MDP(13) + ((t1700 * t1787 * t1815 + t1722 * t1766) * t1801 + (t1698 * t1786 * t1811 + t1721 * t1765) * t1799 + (t1696 * t1785 * t1807 + t1720 * t1764) * t1797 + (t1734 * t2038 + t1738 * t2036 + t1742 * t2034) * t2069) * MDP(14) + t1855; (t1758 * t1947 + t1759 * t1946 + t1760 * t1945 - t1764 * t1932 - t1765 * t1925 - t1766 * t1918) * MDP(11) + (t1764 * t1933 + t1765 * t1926 + t1766 * t1919 + t1785 * t1905 + t1786 * t1904 + t1787 * t1903) * MDP(12) + (qJ(3,1) * t1888 + qJ(3,2) * t1890 + qJ(3,3) * t1892) * t1981 + (t1731 * t1947 + t1732 * t1946 + t1733 * t1945 + t1764 * t2053 + t1765 * t2052 + t1766 * t2051) * MDP(14) + (t1844 * MDP(11) + (-qJ(3,1) * t1942 - qJ(3,2) * t1943 - qJ(3,3) * t1944) * MDP(12) + (-t1846 * MDP(13) + t1844 * MDP(14)) * pkin(1)) * t1818 + t1859; (t1709 * t1950 + t1711 * t1949 + t1713 * t1948 - t1785 * t2059 - t1787 * t2058 - t1786 * t2057 + (t1746 * t2032 + t1747 * t2030 + t1748 * t2028) * t1818) * MDP(11) + ((t1719 * t2048 + (-t1796 * t1962 + t1955) * t1787) * t1815 + (t1718 * t2049 + (-t1795 * t1960 + t1954) * t1786) * t1811 + (t1717 * t2050 + (-t1794 * t1958 + t1956) * t1785) * t1807) * MDP(12) + (t1736 * t1950 + t1740 * t1949 + t1744 * t1948 + (-t1785 * t1881 - t1786 * t1880 - t1787 * t1879) * t2069) * MDP(13) + ((t1701 * t1784 * t1815 + t1725 * t1762) * t1801 + (t1699 * t1783 * t1811 + t1724 * t1763) * t1799 + (t1697 * t1782 * t1807 + t1723 * t1761) * t1797 + (t1735 * t2032 + t1739 * t2030 + t1743 * t2028) * t2069) * MDP(14) + t1855; (t1773 * t2022 + t1774 * t2013 + t1775 * t2004) * MDP(1) + (t1773 * t1936 + t1774 * t1929 + t1775 * t1922) * MDP(4) + (t1773 * t1935 + t1774 * t1928 + t1775 * t1921) * t2072 + (t1720 * t1752 + t1721 * t1754 + t1722 * t1753) * MDP(14) + MDP(15) + (-MDP(11) * t2058 + (MDP(12) * t1955 + (t1712 * MDP(11) + t1716 * MDP(12) + t1745 * MDP(13) + t1700 * MDP(14)) * t1801) * t1815) * t1784 + (-MDP(11) * t2057 + (MDP(12) * t1954 + (t1710 * MDP(11) + t1715 * MDP(12) + t1741 * MDP(13) + t1698 * MDP(14)) * t1799) * t1811) * t1783 + (-MDP(11) * t2059 + (MDP(12) * t1956 + (t1708 * MDP(11) + t1714 * MDP(12) + t1737 * MDP(13) + t1696 * MDP(14)) * t1797) * t1807) * t1782 + (t1794 ^ 2 * t1808 + t1795 ^ 2 * t1812 + t1796 ^ 2 * t1816) * t2063 + ((t1749 * t2032 + t1750 * t2030 + t1751 * t2028) * MDP(11) + (-qJ(3,1) * t1895 - qJ(3,2) * t1898 - qJ(3,3) * t1901) * MDP(12) + t1848 * t2071 + (t1895 + t1898 + t1901) * t2070 + (-t1848 * MDP(13) + (t1734 * t2032 + t1738 * t2030 + t1742 * t2028) * MDP(14)) * pkin(1)) * t1818; (t1758 * t1950 + t1759 * t1949 + t1760 * t1948 - t1761 * t1932 - t1762 * t1918 - t1763 * t1925) * MDP(11) + (t1761 * t1933 + t1762 * t1919 + t1763 * t1926 + t1782 * t1905 + t1783 * t1904 + t1784 * t1903) * MDP(12) + (qJ(3,1) * t1894 + qJ(3,2) * t1897 + qJ(3,3) * t1900) * t1981 + (t1731 * t1950 + t1732 * t1949 + t1733 * t1948 + t1761 * t2053 + t1762 * t2051 + t1763 * t2052) * MDP(14) + (t1843 * MDP(11) + (-qJ(3,1) * t1939 - qJ(3,2) * t1940 - qJ(3,3) * t1941) * MDP(12) + (-t1845 * MDP(13) + t1843 * MDP(14)) * pkin(1)) * t1818 + t1860; (t1709 * t2023 + t1711 * t2014 + t1713 * t2005 - t1785 * t2044 - t1786 * t2042 - t1787 * t2040) * MDP(11) + (t1717 * t2023 + t1718 * t2014 + t1719 * t2005 + t1785 * t1887 + t1786 * t1886 + t1787 * t1885) * MDP(12) + (t1736 * t2023 + t1740 * t2014 + t1744 * t2005) * MDP(13) + ((t1701 * t1837 + t1725 * t1790) * t1801 + (t1699 * t1835 + t1724 * t1789) * t1799 + (t1697 * t1833 + t1723 * t1788) * t1797) * MDP(14) + t1859; (t1708 * t2023 + t1710 * t2014 + t1712 * t2005 - t1782 * t2044 - t1783 * t2042 - t1784 * t2040) * MDP(11) + (t1714 * t2023 + t1715 * t2014 + t1716 * t2005 + t1782 * t1887 + t1783 * t1886 + t1784 * t1885) * MDP(12) + (t1737 * t2023 + t1741 * t2014 + t1745 * t2005) * MDP(13) + ((t1700 * t1837 + t1722 * t1790) * t1801 + (t1698 * t1835 + t1721 * t1789) * t1799 + (t1696 * t1833 + t1720 * t1788) * t1797) * MDP(14) + t1860; (t2003 + t2012 + t2021) * MDP(1) + (t1803 * t2021 + t1804 * t2012 + t1805 * t2003) * MDP(4) + (t1767 * t1779 + t1769 * t1780 + t1771 * t1781) * MDP(14) + MDP(15) + ((t1760 * t1801 - t1790 * t2001) * MDP(11) + t1733 * t1801 * MDP(14) + (t1772 * t1801 + t2040) * MDP(12) * t1830) * t1837 + ((t1759 * t1799 - t1789 * t2010) * MDP(11) + t1732 * t1799 * MDP(14) + (t1770 * t1799 + t2042) * MDP(12) * t1828) * t1835 + ((t1758 * t1797 - t1788 * t2019) * MDP(11) + t1731 * t1797 * MDP(14) + (t1768 * t1797 + t2044) * MDP(12) * t1826) * t1833 + (t1809 * t1826 * t2019 + t1813 * t1828 * t2010 + t1817 * t1830 * t2001) * t2072 + (qJ(3,1) * t2003 + qJ(3,2) * t2012 + qJ(3,3) * t2021) * t1981;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
