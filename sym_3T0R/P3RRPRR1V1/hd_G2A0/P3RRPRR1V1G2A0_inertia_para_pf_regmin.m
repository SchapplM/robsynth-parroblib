% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 17:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR1V1G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(3,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_regmin: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR1V1G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 17:08:13
% EndTime: 2022-11-04 17:08:17
% DurationCPUTime: 3.43s
% Computational Cost: add. (2674->375), mult. (3759->821), div. (1317->14), fcn. (4137->18), ass. (0->372)
t542 = legFrame(3,2);
t510 = sin(t542);
t513 = cos(t542);
t545 = sin(qJ(2,3));
t546 = sin(qJ(1,3));
t551 = cos(qJ(2,3));
t700 = t546 * t551;
t501 = -t510 * t700 + t545 * t513;
t504 = t510 * t545 + t513 * t700;
t780 = t501 * t504;
t543 = legFrame(2,2);
t511 = sin(t543);
t514 = cos(t543);
t547 = sin(qJ(2,2));
t548 = sin(qJ(1,2));
t553 = cos(qJ(2,2));
t697 = t548 * t553;
t502 = -t511 * t697 + t547 * t514;
t505 = t511 * t547 + t514 * t697;
t779 = t502 * t505;
t544 = legFrame(1,2);
t512 = sin(t544);
t515 = cos(t544);
t549 = sin(qJ(2,1));
t550 = sin(qJ(1,1));
t555 = cos(qJ(2,1));
t694 = t550 * t555;
t503 = -t512 * t694 + t549 * t515;
t506 = t512 * t549 + t515 * t694;
t778 = t503 * t506;
t777 = 2 * pkin(1);
t557 = pkin(1) + pkin(2);
t537 = 1 / t557;
t776 = 2 * t537;
t775 = pkin(1) * t537;
t774 = pkin(1) * t551;
t773 = pkin(1) * t553;
t772 = pkin(1) * t555;
t541 = pkin(3) + qJ(3,1);
t520 = 0.1e1 / t541;
t771 = (qJ(3,1) * t520);
t540 = pkin(3) + qJ(3,2);
t518 = 0.1e1 / t540;
t770 = (qJ(3,2) * t518);
t539 = pkin(3) + qJ(3,3);
t516 = 0.1e1 / t539;
t769 = (qJ(3,3) * t516);
t552 = cos(qJ(1,3));
t692 = t551 * t557;
t573 = -t539 * t552 + t546 * t692;
t701 = t545 * t557;
t480 = -t573 * t510 + t513 * t701;
t517 = 0.1e1 / t539 ^ 2;
t768 = t480 * t517;
t556 = cos(qJ(1,1));
t688 = t555 * t557;
t571 = -t541 * t556 + t550 * t688;
t695 = t549 * t557;
t481 = -t571 * t512 + t515 * t695;
t521 = 0.1e1 / t541 ^ 2;
t767 = t481 * t521;
t554 = cos(qJ(1,2));
t690 = t553 * t557;
t572 = -t540 * t554 + t548 * t690;
t698 = t547 * t557;
t482 = -t572 * t511 + t514 * t698;
t519 = 0.1e1 / t540 ^ 2;
t766 = t482 * t519;
t483 = t510 * t701 + t573 * t513;
t765 = t483 * t517;
t484 = t511 * t698 + t572 * t514;
t764 = t484 * t519;
t485 = t512 * t695 + t571 * t515;
t763 = t485 * t521;
t762 = t501 * t516;
t526 = 0.1e1 / t551;
t761 = t501 * t526;
t760 = t502 * t518;
t530 = 0.1e1 / t553;
t759 = t502 * t530;
t758 = t503 * t520;
t534 = 0.1e1 / t555;
t757 = t503 * t534;
t756 = t504 * t516;
t755 = t504 * t526;
t754 = t505 * t518;
t753 = t505 * t530;
t752 = t506 * t520;
t751 = t506 * t534;
t507 = t546 * t539 + t552 * t692;
t750 = t507 * t517;
t749 = t507 * t551;
t508 = t548 * t540 + t554 * t690;
t748 = t508 * t519;
t747 = t508 * t553;
t509 = t550 * t541 + t556 * t688;
t746 = t509 * t521;
t745 = t509 * t555;
t744 = t510 * t526;
t743 = t510 * t537;
t742 = t511 * t530;
t741 = t511 * t537;
t740 = t512 * t534;
t739 = t512 * t537;
t738 = t513 * t526;
t737 = t513 * t537;
t736 = t514 * t530;
t735 = t514 * t537;
t734 = t515 * t534;
t733 = t515 * t537;
t732 = t516 * t526;
t731 = t516 * t545;
t730 = t516 * t551;
t729 = t516 * t552;
t527 = 0.1e1 / t551 ^ 2;
t728 = t517 * t527;
t528 = t552 ^ 2;
t727 = t517 * t528;
t726 = t517 * t545;
t725 = t517 * t551;
t724 = t517 * t552;
t723 = t518 * t530;
t722 = t518 * t547;
t721 = t518 * t553;
t720 = t518 * t554;
t531 = 0.1e1 / t553 ^ 2;
t719 = t519 * t531;
t532 = t554 ^ 2;
t718 = t519 * t532;
t717 = t519 * t547;
t716 = t519 * t553;
t715 = t519 * t554;
t714 = t520 * t534;
t713 = t520 * t549;
t712 = t520 * t555;
t711 = t520 * t556;
t535 = 0.1e1 / t555 ^ 2;
t710 = t521 * t535;
t536 = t556 ^ 2;
t709 = t521 * t536;
t708 = t521 * t549;
t707 = t521 * t555;
t706 = t521 * t556;
t705 = t537 * t545;
t704 = t537 * t547;
t703 = t537 * t549;
t702 = t545 * t552;
t699 = t547 * t554;
t696 = t549 * t556;
t693 = t551 * t552;
t691 = t553 * t554;
t689 = t555 * t556;
t687 = 2 * t771;
t686 = 2 * t770;
t685 = 2 * t769;
t684 = pkin(1) * t762;
t683 = pkin(1) * t760;
t682 = pkin(1) * t758;
t681 = pkin(1) * t756;
t680 = pkin(1) * t754;
t679 = pkin(1) * t752;
t678 = pkin(1) * t743;
t677 = pkin(1) * t741;
t676 = pkin(1) * t739;
t675 = pkin(1) * t737;
t674 = pkin(1) * t735;
t673 = pkin(1) * t733;
t672 = pkin(1) * t705;
t671 = pkin(1) * t704;
t670 = pkin(1) * t703;
t669 = qJ(3,1) * t739;
t668 = qJ(3,1) * t733;
t667 = t537 * t771;
t666 = qJ(3,1) * t713;
t665 = qJ(3,2) * t741;
t664 = qJ(3,2) * t735;
t663 = t537 * t770;
t662 = qJ(3,2) * t722;
t661 = qJ(3,3) * t743;
t660 = qJ(3,3) * t737;
t659 = t537 * t769;
t658 = qJ(3,3) * t731;
t657 = t480 * t726;
t656 = t481 * t708;
t655 = t482 * t717;
t654 = t483 * t726;
t653 = t484 * t717;
t652 = t485 * t708;
t651 = t501 * t732;
t650 = t502 * t723;
t649 = t503 * t714;
t648 = t504 * t732;
t647 = t505 * t723;
t646 = t506 * t714;
t645 = t510 * t729;
t644 = t511 * t720;
t643 = t512 * t711;
t642 = t513 * t729;
t641 = t514 * t720;
t640 = t515 * t711;
t639 = t527 * t731;
t522 = t545 ^ 2;
t638 = t522 * t728;
t637 = t526 * t726;
t636 = t526 * t724;
t635 = t517 * t702;
t634 = t517 * t693;
t633 = t531 * t722;
t523 = t547 ^ 2;
t632 = t523 * t719;
t631 = t530 * t717;
t630 = t530 * t715;
t629 = t519 * t699;
t628 = t519 * t691;
t627 = t535 * t713;
t524 = t549 ^ 2;
t626 = t524 * t710;
t625 = t534 * t708;
t624 = t534 * t706;
t623 = t521 * t696;
t622 = t521 * t689;
t621 = t516 * pkin(1) * t693;
t620 = t518 * pkin(1) * t691;
t619 = t520 * pkin(1) * t689;
t618 = t503 * t666;
t617 = t506 * t666;
t616 = qJ(3,1) * t534 * t703;
t615 = t502 * t662;
t614 = t505 * t662;
t613 = qJ(3,2) * t530 * t704;
t612 = t501 * t658;
t611 = t504 * t658;
t610 = qJ(3,3) * t526 * t705;
t609 = t728 * t780;
t608 = t719 * t779;
t607 = t710 * t778;
t606 = t507 * t637;
t605 = t508 * t631;
t604 = t509 * t625;
t603 = t510 * t639;
t602 = t511 * t633;
t601 = t512 * t627;
t600 = t513 * t639;
t599 = t514 * t633;
t598 = t515 * t627;
t597 = t702 * t732;
t596 = t522 * t636;
t595 = t699 * t723;
t594 = t523 * t630;
t593 = t696 * t714;
t592 = t524 * t624;
t591 = 0.2e1 * qJ(3,1) * t624;
t590 = 0.2e1 * qJ(3,2) * t630;
t589 = 0.2e1 * qJ(3,3) * t636;
t588 = t510 * t597;
t587 = t511 * t595;
t586 = t512 * t593;
t585 = t513 * t597;
t584 = t514 * t595;
t583 = t515 * t593;
t582 = t510 * t610;
t581 = t513 * t610;
t580 = t511 * t613;
t579 = t514 * t613;
t578 = t512 * t616;
t577 = t515 * t616;
t558 = qJ(3,3) ^ 2;
t561 = pkin(1) ^ 2;
t576 = t526 * t558 + t551 * t561;
t559 = qJ(3,2) ^ 2;
t575 = t530 * t559 + t553 * t561;
t560 = qJ(3,1) ^ 2;
t574 = t534 * t560 + t555 * t561;
t570 = t516 * (t501 * t510 + t504 * t513);
t569 = t518 * (t502 * t511 + t505 * t514);
t568 = t520 * (t503 * t512 + t506 * t515);
t567 = t501 * t600 + t502 * t599 + t503 * t598;
t566 = t504 * t603 + t505 * t602 + t506 * t601;
t565 = t586 + t587 + t588;
t564 = t583 + t584 + t585;
t563 = (-qJ(3,1) * t586 - qJ(3,2) * t587 - qJ(3,3) * t588) * t537;
t562 = (-qJ(3,1) * t583 - qJ(3,2) * t584 - qJ(3,3) * t585) * t537;
t538 = 1 / t557 ^ 2;
t533 = t555 ^ 2;
t529 = t553 ^ 2;
t525 = t551 ^ 2;
t500 = t509 * t520;
t499 = t508 * t518;
t498 = t507 * t516;
t497 = t506 ^ 2;
t496 = t505 ^ 2;
t495 = t504 ^ 2;
t494 = t503 ^ 2;
t493 = t502 ^ 2;
t492 = t501 ^ 2;
t491 = t500 - 0.2e1 * t619;
t490 = t500 - t619;
t489 = t499 - 0.2e1 * t620;
t488 = t499 - t620;
t487 = t498 - 0.2e1 * t621;
t486 = t498 - t621;
t479 = (t533 * t556 * t777 - t745) * t520;
t478 = (t529 * t554 * t777 - t747) * t518;
t477 = (t525 * t552 * t777 - t749) * t516;
t476 = t485 * t520;
t475 = t484 * t518;
t474 = t483 * t516;
t473 = t482 * t518;
t472 = t481 * t520;
t471 = t480 * t516;
t470 = (t640 + t641 + t642) * t537;
t469 = (t643 + t644 + t645) * t537;
t468 = (-t618 + 0.2e1 * t673) * t534;
t467 = (-t615 + 0.2e1 * t674) * t530;
t466 = (-t612 + 0.2e1 * t675) * t526;
t465 = (-t617 + 0.2e1 * t676) * t534;
t464 = (-t614 + 0.2e1 * t677) * t530;
t463 = (-t611 + 0.2e1 * t678) * t526;
t462 = (t503 * t687 - t515 * t670) * t534;
t461 = (t506 * t687 - t512 * t670) * t534;
t460 = (-t617 + t676) * t534;
t459 = (-t618 + t673) * t534;
t458 = (t502 * t686 - t514 * t671) * t530;
t457 = (t505 * t686 - t511 * t671) * t530;
t456 = (-t614 + t677) * t530;
t455 = (-t615 + t674) * t530;
t454 = (t501 * t685 - t513 * t672) * t526;
t453 = (t504 * t685 - t510 * t672) * t526;
t452 = (-t611 + t678) * t526;
t451 = (-t612 + t675) * t526;
t450 = (-pkin(1) * t745 + (t533 * t561 + t560) * t556) * t520;
t449 = (-pkin(1) * t747 + (t529 * t561 + t559) * t554) * t518;
t448 = (-pkin(1) * t749 + (t525 * t561 + t558) * t552) * t516;
t447 = (t510 * t513 * t527 + t511 * t514 * t531 + t512 * t515 * t535) * t538;
t446 = t564 * t537;
t445 = t565 * t537;
t444 = t476 - t679;
t443 = t475 - t680;
t442 = t474 - t681;
t441 = t472 - t682;
t440 = t473 - t683;
t439 = t471 - t684;
t438 = (t476 - 0.2e1 * t679) * t549 - t669;
t437 = (t475 - 0.2e1 * t680) * t547 - t665;
t436 = (t474 - 0.2e1 * t681) * t545 - t661;
t435 = (t472 - 0.2e1 * t682) * t549 - t668;
t434 = (t473 - 0.2e1 * t683) * t547 - t664;
t433 = (t471 - 0.2e1 * t684) * t545 - t660;
t432 = -t578 + (t506 * t777 - t485) * t712;
t431 = -t577 + (t503 * t777 - t481) * t712;
t430 = -t580 + (t505 * t777 - t484) * t721;
t429 = -t579 + (t502 * t777 - t482) * t721;
t428 = -t582 + (t504 * t777 - t483) * t730;
t427 = -t581 + (t501 * t777 - t480) * t730;
t426 = t504 * t636 + t505 * t630 + t506 * t624;
t425 = t501 * t636 + t502 * t630 + t503 * t624;
t424 = 0.2e1 * t504 * t635 + 0.2e1 * t505 * t629 + 0.2e1 * t506 * t623;
t423 = 0.2e1 * t501 * t635 + 0.2e1 * t502 * t629 + 0.2e1 * t503 * t623;
t422 = t504 * t596 + t505 * t594 + t506 * t592;
t421 = t501 * t596 + t502 * t594 + t503 * t592;
t420 = -pkin(1) * t578 + (-t485 * t772 + t574 * t506) * t520;
t419 = -pkin(1) * t577 + (-t481 * t772 + t574 * t503) * t520;
t418 = -pkin(1) * t580 + (-t484 * t773 + t575 * t505) * t518;
t417 = -pkin(1) * t579 + (-t482 * t773 + t575 * t502) * t518;
t416 = -pkin(1) * t582 + (-t483 * t774 + t576 * t504) * t516;
t415 = -pkin(1) * t581 + (-t480 * t774 + t576 * t501) * t516;
t414 = t607 + t608 + t609;
t413 = t522 * t609 + t523 * t608 + t524 * t607;
t412 = 0.2e1 * t625 * t778 + 0.2e1 * t631 * t779 + 0.2e1 * t637 * t780;
t411 = (t526 * t570 + t530 * t569 + t534 * t568) * t537;
t410 = (t545 * t527 * t570 + t547 * t531 * t569 + t549 * t535 * t568) * t537;
t1 = [t495 * t728 + t496 * t719 + t497 * t710, 0, 0, t495 * t638 + t496 * t632 + t497 * t626, 0.2e1 * t495 * t637 + 0.2e1 * t496 * t631 + 0.2e1 * t497 * t625, t566 * t776, (t510 * t648 + t511 * t647 + t512 * t646) * t776, (t510 ^ 2 * t527 + t511 ^ 2 * t531 + t512 ^ 2 * t535) * t538, 0, 0, (t432 * t714 - t763) * t506 + (t430 * t723 - t764) * t505 + (t428 * t732 - t765) * t504 + (t463 * t744 + t464 * t742 + t465 * t740) * t537, (t652 + (t438 - t669) * t520) * t751 + (t653 + (t437 - t665) * t518) * t753 + (t654 + (t436 - t661) * t516) * t755, t453 * t648 + t457 * t647 + t461 * t646 - t566 * t775, (t420 * t751 + t444 * t485) * t520 + (t418 * t753 + t443 * t484) * t518 + (t416 * t755 + t442 * t483) * t516 + (t452 * t744 + t456 * t742 + t460 * t740) * t775, 1; t414, 0, 0, t413, t412, t410, t411, t447, 0, 0, t427 * t648 + t429 * t647 + t431 * t646 - t501 * t765 - t502 * t764 - t503 * t763 + (t466 * t744 + t467 * t742 + t468 * t740) * t537, (t435 * t752 + (-t512 * t667 + t652) * t503) * t534 + (t434 * t754 + (-t511 * t663 + t653) * t502) * t530 + (t433 * t756 + (-t510 * t659 + t654) * t501) * t526, t454 * t648 + t458 * t647 + t462 * t646 + (-t501 * t603 - t502 * t602 - t503 * t601) * t775, (t419 * t751 + t441 * t485) * t520 + (t417 * t753 + t440 * t484) * t518 + (t415 * t755 + t439 * t483) * t516 + (t451 * t744 + t455 * t742 + t459 * t740) * t775, 0; t426, 0, 0, t422, t424, t445, t469, 0, 0, 0, t477 * t648 + t478 * t647 + t479 * t646 - t483 * t634 - t484 * t628 - t485 * t622 + t563, (t485 * t706 + t491 * t646) * t549 + (t484 * t715 + t489 * t647) * t547 + (t483 * t724 + t487 * t648) * t545 + (-qJ(3,1) * t643 - qJ(3,2) * t644 - qJ(3,3) * t645) * t537, t504 * t589 + t505 * t590 + t506 * t591 - t565 * t775, (t450 * t751 + t485 * t490) * t520 + (t449 * t753 + t484 * t488) * t518 + (t448 * t755 + t483 * t486) * t516 + pkin(1) * t563, 0; t414, 0, 0, t413, t412, t410, t411, t447, 0, 0, t428 * t651 + t430 * t650 + t432 * t649 - t504 * t768 - t506 * t767 - t505 * t766 + (t463 * t738 + t464 * t736 + t465 * t734) * t537, (t438 * t758 + (-t515 * t667 + t656) * t506) * t534 + (t437 * t760 + (-t514 * t663 + t655) * t505) * t530 + (t436 * t762 + (-t513 * t659 + t657) * t504) * t526, t453 * t651 + t457 * t650 + t461 * t649 + (-t504 * t600 - t505 * t599 - t506 * t598) * t775, (t420 * t757 + t444 * t481) * t520 + (t418 * t759 + t443 * t482) * t518 + (t416 * t761 + t442 * t480) * t516 + (t452 * t738 + t456 * t736 + t460 * t734) * t775, 0; t492 * t728 + t493 * t719 + t494 * t710, 0, 0, t492 * t638 + t493 * t632 + t494 * t626, 0.2e1 * t492 * t637 + 0.2e1 * t493 * t631 + 0.2e1 * t494 * t625, t567 * t776, (t513 * t651 + t514 * t650 + t515 * t649) * t776, (t513 ^ 2 * t527 + t514 ^ 2 * t531 + t515 ^ 2 * t535) * t538, 0, 0, (t431 * t714 - t767) * t503 + (t429 * t723 - t766) * t502 + (t427 * t732 - t768) * t501 + (t466 * t738 + t467 * t736 + t468 * t734) * t537, (t656 + (t435 - t668) * t520) * t757 + (t655 + (t434 - t664) * t518) * t759 + (t657 + (t433 - t660) * t516) * t761, t454 * t651 + t458 * t650 + t462 * t649 - t567 * t775, (t419 * t757 + t441 * t481) * t520 + (t417 * t759 + t440 * t482) * t518 + (t415 * t761 + t439 * t480) * t516 + (t451 * t738 + t455 * t736 + t459 * t734) * t775, 1; t425, 0, 0, t421, t423, t446, t470, 0, 0, 0, t477 * t651 + t478 * t650 + t479 * t649 - t480 * t634 - t481 * t622 - t482 * t628 + t562, (t481 * t706 + t491 * t649) * t549 + (t482 * t715 + t489 * t650) * t547 + (t480 * t724 + t487 * t651) * t545 + (-qJ(3,1) * t640 - qJ(3,2) * t641 - qJ(3,3) * t642) * t537, t501 * t589 + t502 * t590 + t503 * t591 - t564 * t775, (t450 * t757 + t481 * t490) * t520 + (t449 * t759 + t482 * t488) * t518 + (t448 * t761 + t480 * t486) * t516 + pkin(1) * t562, 0; t426, 0, 0, t422, t424, t445, t469, 0, 0, 0, t428 * t729 + t430 * t720 + t432 * t711 - t504 * t750 - t505 * t748 - t506 * t746, t436 * t729 + t437 * t720 + t438 * t711 + t504 * t606 + t505 * t605 + t506 * t604, t453 * t729 + t457 * t720 + t461 * t711, (t420 * t556 + t444 * t509) * t520 + (t418 * t554 + t443 * t508) * t518 + (t416 * t552 + t442 * t507) * t516, 0; t425, 0, 0, t421, t423, t446, t470, 0, 0, 0, t427 * t729 + t429 * t720 + t431 * t711 - t501 * t750 - t502 * t748 - t503 * t746, t433 * t729 + t434 * t720 + t435 * t711 + t501 * t606 + t502 * t605 + t503 * t604, t454 * t729 + t458 * t720 + t462 * t711, (t419 * t556 + t441 * t509) * t520 + (t417 * t554 + t440 * t508) * t518 + (t415 * t552 + t439 * t507) * t516, 0; t709 + t718 + t727, 0, 0, t522 * t727 + t523 * t718 + t524 * t709, 0.2e1 * t528 * t545 * t725 + 0.2e1 * t532 * t547 * t716 + 0.2e1 * t536 * t549 * t707, 0, 0, 0, 0, 0, (t479 * t520 - t509 * t707) * t556 + (t478 * t518 - t508 * t716) * t554 + (t477 * t516 - t507 * t725) * t552, (t491 * t520 + t746) * t696 + (t489 * t518 + t748) * t699 + (t487 * t516 + t750) * t702, 0.2e1 * qJ(3,1) * t709 + 0.2e1 * qJ(3,2) * t718 + 0.2e1 * qJ(3,3) * t727, (t450 * t556 + t490 * t509) * t520 + (t449 * t554 + t488 * t508) * t518 + (t448 * t552 + t486 * t507) * t516, 1;];
tau_reg  = t1;
