% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR1V1G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 17:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR1V1G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 17:08:21
% EndTime: 2022-11-04 17:08:27
% DurationCPUTime: 7.23s
% Computational Cost: add. (14151->465), mult. (21470->817), div. (3702->17), fcn. (18183->18), ass. (0->342)
t1465 = sin(qJ(1,3));
t1471 = cos(qJ(1,3));
t1458 = legFrame(3,2);
t1425 = cos(t1458);
t1654 = t1425 * g(1);
t1422 = sin(t1458);
t1657 = t1422 * g(2);
t1521 = t1654 - t1657;
t1389 = g(3) * t1471 + t1521 * t1465;
t1455 = pkin(3) + qJ(3,3);
t1432 = 0.1e1 / t1455 ^ 2;
t1470 = cos(qJ(2,3));
t1479 = pkin(1) + pkin(2);
t1586 = t1470 * t1479;
t1413 = t1465 * t1455 + t1471 * t1586;
t1464 = sin(qJ(2,3));
t1476 = xDP(3);
t1477 = xDP(2);
t1478 = xDP(1);
t1596 = t1465 * t1470;
t1602 = t1455 * t1471;
t1338 = (-t1478 * t1602 + (t1464 * t1477 + t1478 * t1596) * t1479) * t1425 + (t1477 * t1602 - (-t1464 * t1478 + t1477 * t1596) * t1479) * t1422 + t1413 * t1476;
t1401 = t1422 * t1478 + t1425 * t1477;
t1598 = t1464 * t1401;
t1356 = (t1471 * t1476 + (-t1422 * t1477 + t1425 * t1478) * t1465) * t1470 + t1598;
t1441 = 0.1e1 / t1470;
t1569 = t1338 * t1356 * t1441;
t1690 = -0.2e1 * t1432 * t1569 + t1389;
t1467 = sin(qJ(1,2));
t1473 = cos(qJ(1,2));
t1459 = legFrame(2,2);
t1426 = cos(t1459);
t1653 = t1426 * g(1);
t1423 = sin(t1459);
t1656 = t1423 * g(2);
t1520 = t1653 - t1656;
t1390 = g(3) * t1473 + t1520 * t1467;
t1456 = pkin(3) + qJ(3,2);
t1435 = 0.1e1 / t1456 ^ 2;
t1472 = cos(qJ(2,2));
t1584 = t1472 * t1479;
t1414 = t1467 * t1456 + t1473 * t1584;
t1466 = sin(qJ(2,2));
t1592 = t1467 * t1472;
t1601 = t1456 * t1473;
t1339 = (-t1478 * t1601 + (t1466 * t1477 + t1478 * t1592) * t1479) * t1426 + (t1477 * t1601 - (-t1466 * t1478 + t1477 * t1592) * t1479) * t1423 + t1414 * t1476;
t1402 = t1423 * t1478 + t1426 * t1477;
t1594 = t1466 * t1402;
t1357 = (t1473 * t1476 + (-t1423 * t1477 + t1426 * t1478) * t1467) * t1472 + t1594;
t1445 = 0.1e1 / t1472;
t1568 = t1339 * t1357 * t1445;
t1689 = -0.2e1 * t1435 * t1568 + t1390;
t1469 = sin(qJ(1,1));
t1475 = cos(qJ(1,1));
t1460 = legFrame(1,2);
t1427 = cos(t1460);
t1652 = t1427 * g(1);
t1424 = sin(t1460);
t1655 = t1424 * g(2);
t1519 = t1652 - t1655;
t1391 = g(3) * t1475 + t1519 * t1469;
t1457 = pkin(3) + qJ(3,1);
t1438 = 0.1e1 / t1457 ^ 2;
t1474 = cos(qJ(2,1));
t1582 = t1474 * t1479;
t1415 = t1469 * t1457 + t1475 * t1582;
t1468 = sin(qJ(2,1));
t1588 = t1469 * t1474;
t1600 = t1457 * t1475;
t1340 = (-t1478 * t1600 + (t1468 * t1477 + t1478 * t1588) * t1479) * t1427 + (t1477 * t1600 - (-t1468 * t1478 + t1477 * t1588) * t1479) * t1424 + t1415 * t1476;
t1403 = t1424 * t1478 + t1427 * t1477;
t1590 = t1468 * t1403;
t1358 = (t1475 * t1476 + (-t1424 * t1477 + t1427 * t1478) * t1469) * t1474 + t1590;
t1449 = 0.1e1 / t1474;
t1567 = t1340 * t1358 * t1449;
t1688 = -0.2e1 * t1438 * t1567 + t1391;
t1392 = -t1422 * t1596 + t1464 * t1425;
t1395 = t1422 * t1464 + t1425 * t1596;
t1398 = t1401 ^ 2;
t1431 = 0.1e1 / t1455;
t1433 = t1431 * t1432;
t1440 = t1470 ^ 2;
t1443 = t1441 / t1440;
t1453 = 0.1e1 / t1479;
t1461 = xDDP(3);
t1462 = xDDP(2);
t1463 = xDDP(1);
t1323 = -t1433 * t1569 + (t1453 * t1398 * t1443 + t1471 * t1461 + (t1395 * t1463 + t1392 * t1462 - (-t1356 * t1479 + t1338) * t1432 * t1356) * t1441) * t1431;
t1650 = t1323 * qJ(3,3);
t1495 = -t1650 + t1690;
t1393 = -t1423 * t1592 + t1466 * t1426;
t1396 = t1423 * t1466 + t1426 * t1592;
t1399 = t1402 ^ 2;
t1434 = 0.1e1 / t1456;
t1436 = t1434 * t1435;
t1444 = t1472 ^ 2;
t1447 = t1445 / t1444;
t1324 = -t1436 * t1568 + (t1453 * t1399 * t1447 + t1473 * t1461 + (t1396 * t1463 + t1393 * t1462 - (-t1357 * t1479 + t1339) * t1435 * t1357) * t1445) * t1434;
t1649 = t1324 * qJ(3,2);
t1496 = -t1649 + t1689;
t1394 = -t1424 * t1588 + t1468 * t1427;
t1397 = t1424 * t1468 + t1427 * t1588;
t1400 = t1403 ^ 2;
t1437 = 0.1e1 / t1457;
t1439 = t1437 * t1438;
t1448 = t1474 ^ 2;
t1451 = t1449 / t1448;
t1325 = -t1439 * t1567 + (t1453 * t1400 * t1451 + t1475 * t1461 + (t1397 * t1463 + t1394 * t1462 - (-t1358 * t1479 + t1340) * t1438 * t1358) * t1449) * t1437;
t1648 = t1325 * qJ(3,1);
t1497 = -t1648 + t1688;
t1663 = g(3) * t1465;
t1678 = -t1521 * t1471 + t1663;
t1662 = g(3) * t1467;
t1677 = -t1520 * t1473 + t1662;
t1661 = g(3) * t1469;
t1676 = -t1519 * t1475 + t1661;
t1615 = t1403 * t1437;
t1337 = (-t1358 * t1468 + t1403) * t1449 ^ 2 * t1615;
t1504 = t1469 * t1582 - t1600;
t1589 = t1468 * t1479;
t1372 = -t1504 * t1424 + t1427 * t1589;
t1366 = t1372 * t1437 * t1462;
t1376 = t1424 * t1589 + t1504 * t1427;
t1370 = t1376 * t1437 * t1463;
t1385 = t1415 * t1437 * t1461;
t1687 = -t1337 - t1366 - t1370 - t1385 + t1676;
t1616 = t1402 * t1434;
t1336 = (-t1357 * t1466 + t1402) * t1445 ^ 2 * t1616;
t1505 = t1467 * t1584 - t1601;
t1593 = t1466 * t1479;
t1373 = -t1505 * t1423 + t1426 * t1593;
t1367 = t1373 * t1434 * t1462;
t1375 = t1423 * t1593 + t1505 * t1426;
t1369 = t1375 * t1434 * t1463;
t1384 = t1414 * t1434 * t1461;
t1686 = -t1336 - t1367 - t1369 - t1384 + t1677;
t1617 = t1401 * t1431;
t1335 = (-t1356 * t1464 + t1401) * t1441 ^ 2 * t1617;
t1506 = t1465 * t1586 - t1602;
t1597 = t1464 * t1479;
t1371 = -t1506 * t1422 + t1425 * t1597;
t1365 = t1371 * t1431 * t1462;
t1374 = t1422 * t1597 + t1506 * t1425;
t1368 = t1374 * t1431 * t1463;
t1383 = t1413 * t1431 * t1461;
t1685 = -t1335 - t1365 - t1368 - t1383 + t1678;
t1442 = 0.1e1 / t1470 ^ 2;
t1454 = 0.1e1 / t1479 ^ 2;
t1620 = t1398 * t1454;
t1539 = t1442 * qJ(3,3) * t1620;
t1681 = -t1539 + t1685;
t1446 = 0.1e1 / t1472 ^ 2;
t1619 = t1399 * t1454;
t1538 = t1446 * qJ(3,2) * t1619;
t1680 = -t1538 + t1686;
t1450 = 0.1e1 / t1474 ^ 2;
t1618 = t1400 * t1454;
t1537 = t1450 * qJ(3,1) * t1618;
t1679 = -t1537 + t1687;
t1669 = -2 * pkin(1);
t1668 = 2 * pkin(1);
t1667 = t1442 - 0.2e1;
t1666 = t1446 - 0.2e1;
t1665 = t1450 - 0.2e1;
t1664 = pkin(1) * t1453;
t1554 = t1464 * t1620;
t1353 = t1443 * t1554 + (t1422 * t1463 + t1425 * t1462) * t1453 * t1441;
t1660 = t1353 * pkin(1);
t1553 = t1466 * t1619;
t1354 = t1447 * t1553 + (t1423 * t1463 + t1426 * t1462) * t1453 * t1445;
t1659 = t1354 * pkin(1);
t1552 = t1468 * t1618;
t1355 = t1451 * t1552 + (t1424 * t1463 + t1427 * t1462) * t1453 * t1449;
t1658 = t1355 * pkin(1);
t1651 = MDP(8) * t1453;
t1647 = t1323 * t1440;
t1646 = t1324 * t1444;
t1645 = t1325 * t1448;
t1644 = t1338 * t1479;
t1643 = t1339 * t1479;
t1642 = t1340 * t1479;
t1350 = t1356 ^ 2;
t1641 = t1350 * t1432;
t1640 = t1350 * t1442;
t1351 = t1357 ^ 2;
t1639 = t1351 * t1435;
t1638 = t1351 * t1446;
t1352 = t1358 ^ 2;
t1637 = t1352 * t1438;
t1636 = t1352 * t1450;
t1635 = t1353 * t1464;
t1634 = t1353 * t1470;
t1633 = t1354 * t1466;
t1632 = t1354 * t1472;
t1631 = t1355 * t1468;
t1630 = t1355 * t1474;
t1629 = t1678 * t1431;
t1628 = t1677 * t1434;
t1627 = t1676 * t1437;
t1626 = t1392 * t1441;
t1625 = t1393 * t1445;
t1624 = t1394 * t1449;
t1623 = t1395 * t1441;
t1622 = t1396 * t1445;
t1621 = t1397 * t1449;
t1416 = t1422 * g(1) + t1425 * g(2);
t1614 = t1416 * t1464;
t1404 = t1416 * t1470;
t1417 = t1423 * g(1) + t1426 * g(2);
t1613 = t1417 * t1466;
t1407 = t1417 * t1472;
t1418 = t1424 * g(1) + t1427 * g(2);
t1612 = t1418 * t1468;
t1410 = t1418 * t1474;
t1611 = t1422 * t1441;
t1610 = t1423 * t1445;
t1609 = t1424 * t1449;
t1608 = t1425 * t1441;
t1607 = t1426 * t1445;
t1606 = t1427 * t1449;
t1605 = t1431 * t1441;
t1604 = t1434 * t1445;
t1603 = t1437 * t1449;
t1599 = t1464 * t1323;
t1595 = t1466 * t1324;
t1591 = t1468 * t1325;
t1587 = t1470 * t1323;
t1585 = t1472 * t1324;
t1583 = t1474 * t1325;
t1581 = pkin(1) * t1641;
t1580 = pkin(1) * t1639;
t1579 = pkin(1) * t1637;
t1578 = pkin(1) * t1587;
t1577 = pkin(1) * t1585;
t1576 = pkin(1) * t1583;
t1575 = t1441 * t1599;
t1574 = t1445 * t1595;
t1573 = t1449 * t1591;
t1452 = t1479 ^ 2;
t1572 = (t1455 * (-t1356 + t1598) * t1441 + (-t1356 * t1452 + t1644) * t1470 * t1431) * t1432 * t1441;
t1571 = (t1456 * (-t1357 + t1594) * t1445 + (-t1357 * t1452 + t1643) * t1472 * t1434) * t1435 * t1445;
t1570 = (t1457 * (-t1358 + t1590) * t1449 + (-t1358 * t1452 + t1642) * t1474 * t1437) * t1438 * t1449;
t1566 = t1432 * t1640;
t1565 = t1433 * t1640;
t1564 = t1435 * t1638;
t1563 = t1436 * t1638;
t1562 = t1438 * t1636;
t1561 = t1439 * t1636;
t1560 = t1392 * t1605;
t1559 = t1393 * t1604;
t1558 = t1394 * t1603;
t1557 = t1395 * t1605;
t1556 = t1396 * t1604;
t1555 = t1397 * t1603;
t1551 = t1453 * t1617;
t1550 = t1453 * t1616;
t1549 = t1453 * t1615;
t1548 = t1433 * t1644;
t1547 = t1436 * t1643;
t1546 = t1439 * t1642;
t1531 = t1357 * t1550;
t1311 = t1466 * t1585 - t1666 * t1531;
t1545 = 0.2e1 * t1311 * t1604;
t1533 = t1356 * t1551;
t1312 = t1464 * t1587 - t1667 * t1533;
t1544 = 0.2e1 * t1312 * t1605;
t1529 = t1358 * t1549;
t1313 = t1468 * t1583 - t1665 * t1529;
t1543 = 0.2e1 * t1313 * t1603;
t1542 = t1441 * t1581;
t1541 = t1445 * t1580;
t1540 = t1449 * t1579;
t1536 = t1464 * t1566;
t1535 = t1466 * t1564;
t1534 = t1468 * t1562;
t1527 = t1678 * t1560;
t1526 = t1677 * t1559;
t1525 = t1676 * t1558;
t1524 = t1678 * t1557;
t1523 = t1677 * t1556;
t1522 = t1676 * t1555;
t1518 = t1442 * t1464 * t1551;
t1517 = t1446 * t1466 * t1550;
t1516 = t1450 * t1468 * t1549;
t1512 = pkin(1) * t1518;
t1511 = pkin(1) * t1517;
t1510 = pkin(1) * t1516;
t1344 = t1441 * t1620 + t1635;
t1345 = t1445 * t1619 + t1633;
t1346 = t1449 * t1618 + t1631;
t1500 = t1548 + t1572;
t1499 = t1547 + t1571;
t1498 = t1546 + t1570;
t1321 = 0.2e1 * t1441 * t1533 + t1599;
t1320 = 0.2e1 * t1445 * t1531 + t1595;
t1322 = 0.2e1 * t1449 * t1529 + t1591;
t1491 = t1422 * t1575 + t1423 * t1574 + t1424 * t1573;
t1490 = t1425 * t1575 + t1426 * t1574 + t1427 * t1573;
t1480 = pkin(1) ^ 2;
t1364 = t1391 * t1474 + t1612;
t1363 = t1391 * t1468 - t1410;
t1362 = t1390 * t1472 + t1613;
t1361 = t1390 * t1466 - t1407;
t1360 = t1389 * t1470 + t1614;
t1359 = t1389 * t1464 - t1404;
t1343 = -t1450 * t1552 + t1630;
t1342 = -t1446 * t1553 + t1632;
t1341 = -t1442 * t1554 + t1634;
t1334 = t1665 * t1637;
t1333 = t1666 * t1639;
t1332 = t1667 * t1641;
t1319 = 0.2e1 * t1357 * t1517 - t1585;
t1318 = t1322 * t1468;
t1317 = 0.2e1 * t1358 * t1516 - t1583;
t1316 = t1320 * t1466;
t1315 = t1321 * t1464;
t1314 = 0.2e1 * t1356 * t1518 - t1587;
t1310 = -t1346 * pkin(1) + 0.2e1 * t1648 - t1688;
t1309 = -t1345 * pkin(1) + 0.2e1 * t1649 - t1689;
t1308 = -t1344 * pkin(1) + 0.2e1 * t1650 - t1690;
t1307 = (t1497 + t1540) * t1468 - t1410 + t1658;
t1306 = (t1497 + 0.2e1 * t1540) * t1468 - t1410 + 0.2e1 * t1658;
t1305 = (t1496 + t1541) * t1466 - t1407 + t1659;
t1304 = (t1496 + 0.2e1 * t1541) * t1466 - t1407 + 0.2e1 * t1659;
t1303 = (t1495 + t1542) * t1464 - t1404 + t1660;
t1302 = (t1495 + 0.2e1 * t1542) * t1464 - t1404 + 0.2e1 * t1660;
t1301 = t1497 * t1474 - t1665 * t1579 + t1612;
t1300 = t1496 * t1472 - t1666 * t1580 + t1613;
t1299 = t1495 * t1470 - t1667 * t1581 + t1614;
t1298 = -qJ(3,1) * t1562 - t1576 + (-t1498 + 0.2e1 * t1510) * t1358 - t1687;
t1297 = -qJ(3,2) * t1564 - t1577 + (-t1499 + 0.2e1 * t1511) * t1357 - t1686;
t1296 = -qJ(3,3) * t1566 - t1578 + (-t1500 + 0.2e1 * t1512) * t1356 - t1685;
t1295 = -qJ(3,1) * t1631 + t1645 * t1668 + ((t1498 - 0.4e1 * t1510) * t1358 + t1679) * t1474;
t1294 = -qJ(3,2) * t1633 + t1646 * t1668 + ((t1499 - 0.4e1 * t1511) * t1357 + t1680) * t1472;
t1293 = -qJ(3,3) * t1635 + t1647 * t1668 + ((t1500 - 0.4e1 * t1512) * t1356 + t1681) * t1470;
t1292 = (-0.2e1 * t1576 - t1679) * t1468 - qJ(3,1) * t1630 + (-t1498 * t1468 + (0.2e1 * t1450 - 0.4e1) * pkin(1) * t1549) * t1358;
t1291 = (-0.2e1 * t1577 - t1680) * t1466 - qJ(3,2) * t1632 + (-t1499 * t1466 + (0.2e1 * t1446 - 0.4e1) * pkin(1) * t1550) * t1357;
t1290 = (-0.2e1 * t1578 - t1681) * t1464 - qJ(3,3) * t1634 + (-t1500 * t1464 + (0.2e1 * t1442 - 0.4e1) * pkin(1) * t1551) * t1356;
t1289 = t1480 * t1645 + ((t1652 / 0.2e1 - t1655 / 0.2e1) * t1475 + t1537 / 0.2e1 - t1661 / 0.2e1 + t1370 / 0.2e1 + t1366 / 0.2e1 + t1385 / 0.2e1 + t1337 / 0.2e1 + (t1510 - t1570 / 0.2e1 - t1546 / 0.2e1) * t1358) * t1474 * t1669 - qJ(3,1) * (pkin(1) * t1631 + t1497);
t1288 = t1480 * t1646 + ((t1653 / 0.2e1 - t1656 / 0.2e1) * t1473 + t1538 / 0.2e1 - t1662 / 0.2e1 + t1369 / 0.2e1 + t1367 / 0.2e1 + t1384 / 0.2e1 + t1336 / 0.2e1 + (t1511 - t1571 / 0.2e1 - t1547 / 0.2e1) * t1357) * t1472 * t1669 - qJ(3,2) * (pkin(1) * t1633 + t1496);
t1287 = t1480 * t1647 + ((t1654 / 0.2e1 - t1657 / 0.2e1) * t1471 + t1539 / 0.2e1 - t1663 / 0.2e1 + t1368 / 0.2e1 + t1365 / 0.2e1 + t1383 / 0.2e1 + t1335 / 0.2e1 + (t1512 - t1572 / 0.2e1 - t1548 / 0.2e1) * t1356) * t1470 * t1669 - qJ(3,3) * (pkin(1) * t1635 + t1495);
t1 = [(t1323 * t1557 + t1324 * t1556 + t1325 * t1555) * MDP(1) + (t1522 + t1523 + t1524) * MDP(2) + (t1389 * t1557 + t1390 * t1556 + t1391 * t1555) * MDP(3) + (t1315 * t1557 + t1316 * t1556 + t1318 * t1555 + (-t1422 * t1536 - t1423 * t1535 - t1424 * t1534) * t1453) * MDP(4) + ((t1332 * t1611 + t1333 * t1610 + t1334 * t1609) * t1453 + t1396 * t1545 + t1395 * t1544 + t1397 * t1543) * MDP(5) + (t1344 * t1557 + t1345 * t1556 + t1346 * t1555 + t1491 * t1453) * MDP(6) + (t1341 * t1557 + t1342 * t1556 + t1343 * t1555 + (t1323 * t1422 + t1324 * t1423 + t1325 * t1424) * t1453) * MDP(7) + (t1353 * t1611 + t1354 * t1610 + t1355 * t1609) * t1651 + (t1395 * t1629 + t1396 * t1628 + t1397 * t1627 + (t1359 * t1611 + t1361 * t1610 + t1363 * t1609) * t1453) * MDP(9) + (-t1464 * t1524 - t1466 * t1523 - t1468 * t1522 + (t1360 * t1611 + t1362 * t1610 + t1364 * t1609) * t1453) * MDP(10) + ((t1295 * t1621 + t1317 * t1376) * t1437 + (t1294 * t1622 + t1319 * t1375) * t1434 + (t1293 * t1623 + t1314 * t1374) * t1431 + (t1302 * t1611 + t1304 * t1610 + t1306 * t1609) * t1453) * MDP(11) + ((t1292 * t1621 + t1322 * t1376) * t1437 + (t1291 * t1622 + t1320 * t1375) * t1434 + (t1290 * t1623 + t1321 * t1374) * t1431 + (t1299 * t1611 + t1300 * t1610 + t1301 * t1609) * t1453) * MDP(12) + (t1308 * t1557 + t1309 * t1556 + t1310 * t1555 - t1374 * t1565 - t1375 * t1563 - t1376 * t1561 - t1491 * t1664) * MDP(13) + ((t1289 * t1621 + t1298 * t1376) * t1437 + (t1288 * t1622 + t1297 * t1375) * t1434 + (t1287 * t1623 + t1296 * t1374) * t1431 + (t1303 * t1611 + t1305 * t1610 + t1307 * t1609) * t1664) * MDP(14) + (t1463 - g(1)) * MDP(15); (t1323 * t1560 + t1324 * t1559 + t1325 * t1558) * MDP(1) + (t1525 + t1526 + t1527) * MDP(2) + (t1389 * t1560 + t1390 * t1559 + t1391 * t1558) * MDP(3) + (t1315 * t1560 + t1316 * t1559 + t1318 * t1558 + (-t1425 * t1536 - t1426 * t1535 - t1427 * t1534) * t1453) * MDP(4) + ((t1332 * t1608 + t1333 * t1607 + t1334 * t1606) * t1453 + t1393 * t1545 + t1392 * t1544 + t1394 * t1543) * MDP(5) + (t1344 * t1560 + t1345 * t1559 + t1346 * t1558 + t1490 * t1453) * MDP(6) + (t1341 * t1560 + t1342 * t1559 + t1343 * t1558 + (t1323 * t1425 + t1324 * t1426 + t1325 * t1427) * t1453) * MDP(7) + (t1353 * t1608 + t1354 * t1607 + t1355 * t1606) * t1651 + (t1392 * t1629 + t1393 * t1628 + t1394 * t1627 + (t1359 * t1608 + t1361 * t1607 + t1363 * t1606) * t1453) * MDP(9) + (-t1464 * t1527 - t1466 * t1526 - t1468 * t1525 + (t1360 * t1608 + t1362 * t1607 + t1364 * t1606) * t1453) * MDP(10) + ((t1295 * t1624 + t1317 * t1372) * t1437 + (t1294 * t1625 + t1319 * t1373) * t1434 + (t1293 * t1626 + t1314 * t1371) * t1431 + (t1302 * t1608 + t1304 * t1607 + t1306 * t1606) * t1453) * MDP(11) + ((t1292 * t1624 + t1322 * t1372) * t1437 + (t1291 * t1625 + t1320 * t1373) * t1434 + (t1290 * t1626 + t1321 * t1371) * t1431 + (t1299 * t1608 + t1300 * t1607 + t1301 * t1606) * t1453) * MDP(12) + (t1308 * t1560 + t1309 * t1559 + t1310 * t1558 - t1371 * t1565 - t1372 * t1561 - t1373 * t1563 - t1490 * t1664) * MDP(13) + ((t1289 * t1624 + t1298 * t1372) * t1437 + (t1288 * t1625 + t1297 * t1373) * t1434 + (t1287 * t1626 + t1296 * t1371) * t1431 + (t1303 * t1608 + t1305 * t1607 + t1307 * t1606) * t1664) * MDP(14) + (t1462 - g(2)) * MDP(15); (-t1413 * t1565 - t1414 * t1563 - t1415 * t1561) * MDP(13) + (t1461 - g(3)) * MDP(15) + ((t1317 * MDP(11) + t1322 * MDP(12) + t1298 * MDP(14)) * t1415 + (t1325 * MDP(1) + t1295 * MDP(11) + t1292 * MDP(12) + t1310 * MDP(13) + t1289 * MDP(14) + t1391 * MDP(3) + t1318 * MDP(4) + t1346 * MDP(6) + t1343 * MDP(7) + (-MDP(10) * t1468 + t1474 * MDP(9) + MDP(2)) * t1676) * t1475) * t1437 + ((t1319 * MDP(11) + t1320 * MDP(12) + t1297 * MDP(14)) * t1414 + (t1324 * MDP(1) + t1294 * MDP(11) + t1291 * MDP(12) + t1309 * MDP(13) + t1288 * MDP(14) + t1390 * MDP(3) + t1316 * MDP(4) + t1345 * MDP(6) + t1342 * MDP(7) + (-MDP(10) * t1466 + t1472 * MDP(9) + MDP(2)) * t1677) * t1473) * t1434 + ((t1314 * MDP(11) + t1321 * MDP(12) + t1296 * MDP(14)) * t1413 + (t1323 * MDP(1) + t1293 * MDP(11) + t1290 * MDP(12) + t1308 * MDP(13) + t1287 * MDP(14) + t1389 * MDP(3) + t1315 * MDP(4) + t1344 * MDP(6) + t1341 * MDP(7) + (-MDP(10) * t1464 + t1470 * MDP(9) + MDP(2)) * t1678) * t1471) * t1431 + 0.2e1 * (t1311 * t1434 * t1473 + t1312 * t1431 * t1471 + t1313 * t1437 * t1475) * MDP(5);];
tauX  = t1;
