% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [3x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR1V1G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:34
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR1V1G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [3 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: pkin has to be [3x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRPRR1V1G2A0_invdyn_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:34:07
% EndTime: 2020-08-06 19:34:13
% DurationCPUTime: 5.67s
% Computational Cost: add. (8685->378), mult. (13235->693), div. (2346->14), fcn. (11253->18), ass. (0->286)
t1107 = legFrame(3,2);
t1077 = cos(t1107);
t1276 = t1077 * g(1);
t1074 = sin(t1107);
t1279 = t1074 * g(2);
t1065 = t1276 - t1279;
t1114 = sin(qJ(1,3));
t1120 = cos(qJ(1,3));
t1041 = g(3) * t1120 + t1065 * t1114;
t1119 = cos(qJ(2,3));
t1125 = xDP(3);
t1126 = xDP(2);
t1127 = xDP(1);
t1053 = t1074 * t1127 + t1077 * t1126;
t1113 = sin(qJ(2,3));
t1209 = t1113 * t1053;
t1017 = (t1120 * t1125 + (-t1074 * t1126 + t1077 * t1127) * t1114) * t1119 + t1209;
t1104 = pkin(3) + qJ(3,3);
t1084 = 0.1e1 / t1104 ^ 2;
t1092 = 0.1e1 / t1119;
t1222 = t1084 * t1092;
t1184 = t1017 * t1222;
t1128 = pkin(1) + pkin(2);
t1200 = t1119 * t1128;
t1059 = t1114 * t1104 + t1120 * t1200;
t1207 = t1114 * t1119;
t1212 = t1104 * t1120;
t999 = (-t1127 * t1212 + (t1113 * t1126 + t1127 * t1207) * t1128) * t1077 + (t1126 * t1212 - (-t1113 * t1127 + t1126 * t1207) * t1128) * t1074 + t1059 * t1125;
t1304 = 0.2e1 * t999 * t1184 - t1041;
t1105 = pkin(3) + qJ(3,2);
t1116 = sin(qJ(1,2));
t1122 = cos(qJ(1,2));
t1121 = cos(qJ(2,2));
t1199 = t1121 * t1128;
t1060 = t1116 * t1105 + t1122 * t1199;
t1108 = legFrame(2,2);
t1075 = sin(t1108);
t1078 = cos(t1108);
t1115 = sin(qJ(2,2));
t1204 = t1116 * t1121;
t1211 = t1105 * t1122;
t1000 = (-t1127 * t1211 + (t1115 * t1126 + t1127 * t1204) * t1128) * t1078 + (t1126 * t1211 - (-t1115 * t1127 + t1126 * t1204) * t1128) * t1075 + t1060 * t1125;
t1275 = t1078 * g(1);
t1278 = t1075 * g(2);
t1066 = t1275 - t1278;
t1042 = g(3) * t1122 + t1066 * t1116;
t1054 = t1075 * t1127 + t1078 * t1126;
t1206 = t1115 * t1054;
t1018 = (t1122 * t1125 + (-t1075 * t1126 + t1078 * t1127) * t1116) * t1121 + t1206;
t1087 = 0.1e1 / t1105 ^ 2;
t1095 = 0.1e1 / t1121;
t1219 = t1087 * t1095;
t1183 = t1018 * t1219;
t1303 = 0.2e1 * t1000 * t1183 - t1042;
t1106 = pkin(3) + qJ(3,1);
t1118 = sin(qJ(1,1));
t1124 = cos(qJ(1,1));
t1123 = cos(qJ(2,1));
t1198 = t1123 * t1128;
t1061 = t1118 * t1106 + t1124 * t1198;
t1109 = legFrame(1,2);
t1076 = sin(t1109);
t1079 = cos(t1109);
t1117 = sin(qJ(2,1));
t1201 = t1118 * t1123;
t1210 = t1106 * t1124;
t1001 = (-t1127 * t1210 + (t1117 * t1126 + t1127 * t1201) * t1128) * t1079 + (t1126 * t1210 - (-t1117 * t1127 + t1126 * t1201) * t1128) * t1076 + t1061 * t1125;
t1274 = t1079 * g(1);
t1277 = t1076 * g(2);
t1067 = t1274 - t1277;
t1043 = g(3) * t1124 + t1067 * t1118;
t1055 = t1076 * t1127 + t1079 * t1126;
t1203 = t1117 * t1055;
t1019 = (t1124 * t1125 + (-t1076 * t1126 + t1079 * t1127) * t1118) * t1123 + t1203;
t1090 = 0.1e1 / t1106 ^ 2;
t1098 = 0.1e1 / t1123;
t1216 = t1090 * t1098;
t1182 = t1019 * t1216;
t1302 = 0.2e1 * t1001 * t1182 - t1043;
t1282 = g(3) * t1114;
t1038 = -t1065 * t1120 + t1282;
t1083 = 0.1e1 / t1104;
t1223 = t1083 * t1120;
t1181 = t1038 * t1223;
t1281 = g(3) * t1116;
t1039 = -t1066 * t1122 + t1281;
t1086 = 0.1e1 / t1105;
t1220 = t1086 * t1122;
t1180 = t1039 * t1220;
t1280 = g(3) * t1118;
t1040 = -t1067 * t1124 + t1280;
t1089 = 0.1e1 / t1106;
t1217 = t1089 * t1124;
t1179 = t1040 * t1217;
t1044 = -t1074 * t1207 + t1113 * t1077;
t1047 = t1113 * t1074 + t1077 * t1207;
t1050 = t1053 ^ 2;
t1085 = t1083 * t1084;
t1136 = t1119 ^ 2;
t1093 = 0.1e1 / t1136;
t1094 = t1092 * t1093;
t1102 = 0.1e1 / t1128;
t1110 = xDDP(3);
t1111 = xDDP(2);
t1112 = xDDP(1);
t987 = -t1017 * t1085 * t1092 * t999 + (t1102 * t1050 * t1094 + t1120 * t1110 + (t1047 * t1112 + t1044 * t1111 - (-t1017 * t1128 + t999) * t1084 * t1017) * t1092) * t1083;
t1273 = t987 * qJ(3,3);
t1301 = t1273 + t1304;
t1045 = -t1075 * t1204 + t1115 * t1078;
t1048 = t1115 * t1075 + t1078 * t1204;
t1051 = t1054 ^ 2;
t1088 = t1086 * t1087;
t1138 = t1121 ^ 2;
t1096 = 0.1e1 / t1138;
t1097 = t1095 * t1096;
t988 = -t1018 * t1088 * t1095 * t1000 + (t1102 * t1051 * t1097 + t1122 * t1110 + (t1048 * t1112 + t1045 * t1111 - (-t1018 * t1128 + t1000) * t1087 * t1018) * t1095) * t1086;
t1272 = t988 * qJ(3,2);
t1300 = t1272 + t1303;
t1046 = -t1076 * t1201 + t1117 * t1079;
t1049 = t1117 * t1076 + t1079 * t1201;
t1052 = t1055 ^ 2;
t1091 = t1089 * t1090;
t1140 = t1123 ^ 2;
t1099 = 0.1e1 / t1140;
t1100 = t1098 * t1099;
t989 = -t1019 * t1091 * t1098 * t1001 + (t1102 * t1052 * t1100 + t1124 * t1110 + (t1049 * t1112 + t1046 * t1111 - (-t1019 * t1128 + t1001) * t1090 * t1019) * t1098) * t1089;
t1271 = t989 * qJ(3,1);
t1299 = t1271 + t1302;
t1289 = t1093 - 0.2e1;
t1288 = t1096 - 0.2e1;
t1287 = t1099 - 0.2e1;
t1286 = pkin(1) * t1102;
t1285 = pkin(1) * t1119;
t1284 = pkin(1) * t1121;
t1283 = pkin(1) * t1123;
t1270 = MDP(8) * t1102;
t1129 = pkin(1) ^ 2;
t1251 = t1017 * t1113;
t1152 = t1093 * t1251 * t1286;
t1266 = t1128 * t999;
t1194 = t1085 * t1266;
t1236 = t1059 * t1110;
t1103 = 0.1e1 / t1128 ^ 2;
t1239 = t1050 * t1103;
t1146 = t1114 * t1200 - t1212;
t1208 = t1113 * t1128;
t1029 = t1074 * t1208 + t1146 * t1077;
t1245 = t1029 * t1112;
t1026 = -t1146 * t1074 + t1077 * t1208;
t1248 = t1026 * t1111;
t1172 = t1113 * t1239;
t1014 = t1094 * t1172 + (t1074 * t1112 + t1077 * t1111) * t1102 * t1092;
t1254 = t1014 * t1113;
t1260 = (t1053 - t1251) * t1092 ^ 2;
t1101 = t1128 ^ 2;
t990 = (-t1017 + t1209) * t1104 * t1092 + (-t1017 * t1101 + t1266) * t1119 * t1083;
t969 = t1136 * t1129 * t987 + (-pkin(1) * t1254 + t1301) * qJ(3,3) + (-0.2e1 * (t1276 / 0.2e1 - t1279 / 0.2e1) * t1120 + t1282 + t990 * t1184 + t1017 * t1194 - 0.2e1 * (t1245 / 0.2e1 + t1248 / 0.2e1 + t1236 / 0.2e1 + (t1152 + t1260 / 0.2e1) * t1053) * t1083 - qJ(3,3) * t1093 * t1239) * t1285;
t1269 = t1092 * t969;
t1250 = t1018 * t1115;
t1151 = t1096 * t1250 * t1286;
t1262 = t1000 * t1128;
t1169 = t1088 * t1262;
t1235 = t1060 * t1110;
t1238 = t1051 * t1103;
t1145 = t1116 * t1199 - t1211;
t1205 = t1115 * t1128;
t1030 = t1075 * t1205 + t1145 * t1078;
t1244 = t1030 * t1112;
t1028 = -t1145 * t1075 + t1078 * t1205;
t1246 = t1028 * t1111;
t1171 = t1115 * t1238;
t1015 = t1097 * t1171 + (t1075 * t1112 + t1078 * t1111) * t1102 * t1095;
t1253 = t1015 * t1115;
t1259 = (t1054 - t1250) * t1095 ^ 2;
t991 = (-t1018 + t1206) * t1105 * t1095 + (-t1018 * t1101 + t1262) * t1121 * t1086;
t970 = t1138 * t1129 * t988 + (-pkin(1) * t1253 + t1300) * qJ(3,2) + (-0.2e1 * (t1275 / 0.2e1 - t1278 / 0.2e1) * t1122 + t1281 + t991 * t1183 + t1018 * t1169 - 0.2e1 * (t1244 / 0.2e1 + t1246 / 0.2e1 + t1235 / 0.2e1 + (t1151 + t1259 / 0.2e1) * t1054) * t1086 - t1096 * qJ(3,2) * t1238) * t1284;
t1268 = t1095 * t970;
t1249 = t1019 * t1117;
t1150 = t1099 * t1249 * t1286;
t1261 = t1001 * t1128;
t1168 = t1091 * t1261;
t1234 = t1061 * t1110;
t1237 = t1052 * t1103;
t1144 = t1118 * t1198 - t1210;
t1202 = t1117 * t1128;
t1031 = t1076 * t1202 + t1144 * t1079;
t1243 = t1031 * t1112;
t1027 = -t1144 * t1076 + t1079 * t1202;
t1247 = t1027 * t1111;
t1170 = t1117 * t1237;
t1016 = t1100 * t1170 + (t1076 * t1112 + t1079 * t1111) * t1102 * t1098;
t1252 = t1016 * t1117;
t1258 = (t1055 - t1249) * t1098 ^ 2;
t992 = (-t1019 + t1203) * t1106 * t1098 + (-t1019 * t1101 + t1261) * t1123 * t1089;
t971 = t1140 * t1129 * t989 + (-pkin(1) * t1252 + t1299) * qJ(3,1) + (-0.2e1 * (t1274 / 0.2e1 - t1277 / 0.2e1) * t1124 + t1280 + t992 * t1182 + t1019 * t1168 - 0.2e1 * (t1243 / 0.2e1 + t1247 / 0.2e1 + t1234 / 0.2e1 + (t1150 + t1258 / 0.2e1) * t1055) * t1089 - t1099 * qJ(3,1) * t1237) * t1283;
t1267 = t1098 * t971;
t1265 = t987 * t1113;
t1264 = t988 * t1115;
t1263 = t989 * t1117;
t1011 = t1017 ^ 2;
t1257 = t1011 * t1093;
t1012 = t1018 ^ 2;
t1256 = t1012 * t1096;
t1013 = t1019 ^ 2;
t1255 = t1013 * t1099;
t1242 = t1038 * t1083;
t1241 = t1039 * t1086;
t1240 = t1040 * t1089;
t1062 = t1074 * g(1) + t1077 * g(2);
t1233 = t1062 * t1119;
t1063 = t1075 * g(1) + t1078 * g(2);
t1232 = t1063 * t1121;
t1064 = t1076 * g(1) + t1079 * g(2);
t1231 = t1064 * t1123;
t1230 = t1074 * t1092;
t1229 = t1075 * t1095;
t1228 = t1076 * t1098;
t1227 = t1077 * t1092;
t1226 = t1078 * t1095;
t1225 = t1079 * t1098;
t1224 = t1083 * t1092;
t1221 = t1086 * t1095;
t1218 = t1089 * t1098;
t1215 = t1092 * t1113;
t1214 = t1095 * t1115;
t1213 = t1098 * t1117;
t1193 = t987 * t1215;
t1192 = t988 * t1214;
t1191 = t989 * t1213;
t1190 = t1084 * t1257;
t1189 = t1085 * t1257;
t1188 = t1087 * t1256;
t1187 = t1088 * t1256;
t1186 = t1090 * t1255;
t1185 = t1091 * t1255;
t1178 = t1044 * t1224;
t1177 = t1045 * t1221;
t1176 = t1046 * t1218;
t1175 = t1047 * t1224;
t1174 = t1048 * t1221;
t1173 = t1049 * t1218;
t1160 = t1017 * t1053 * t1083 * t1102;
t981 = t1119 * t1265 - t1289 * t1160;
t1167 = 0.2e1 * t981 * t1224;
t1159 = t1018 * t1054 * t1086 * t1102;
t982 = t1121 * t1264 - t1288 * t1159;
t1166 = 0.2e1 * t982 * t1221;
t1157 = t1019 * t1055 * t1089 * t1102;
t983 = t1123 * t1263 - t1287 * t1157;
t1165 = 0.2e1 * t983 * t1218;
t1163 = t1113 * t1190;
t1162 = t1115 * t1188;
t1161 = t1117 * t1186;
t1155 = t1215 * t1242;
t1154 = t1214 * t1241;
t1153 = t1213 * t1240;
t1005 = t1092 * t1239 + t1254;
t1006 = t1095 * t1238 + t1253;
t1007 = t1098 * t1237 + t1252;
t1143 = t1074 * t1193 + t1075 * t1192 + t1076 * t1191;
t1142 = t1077 * t1193 + t1078 * t1192 + t1079 * t1191;
t1025 = t1043 * t1123 + t1064 * t1117;
t1024 = t1043 * t1117 - t1231;
t1023 = t1042 * t1121 + t1063 * t1115;
t1022 = t1042 * t1115 - t1232;
t1021 = t1041 * t1119 + t1062 * t1113;
t1020 = t1041 * t1113 - t1233;
t1004 = t1016 * t1123 - t1099 * t1170;
t1003 = t1015 * t1121 - t1096 * t1171;
t1002 = t1014 * t1119 - t1093 * t1172;
t998 = t1287 * t1090 * t1013;
t997 = t1288 * t1087 * t1012;
t996 = t1289 * t1084 * t1011;
t986 = (0.2e1 * t1098 * t1157 + t1263) * t1117;
t985 = (0.2e1 * t1095 * t1159 + t1264) * t1115;
t984 = (0.2e1 * t1092 * t1160 + t1265) * t1113;
t980 = -t1007 * pkin(1) + 0.2e1 * t1271 + t1302;
t979 = -t1006 * pkin(1) + 0.2e1 * t1272 + t1303;
t978 = -t1005 * pkin(1) + 0.2e1 * t1273 + t1304;
t977 = (pkin(1) * t1013 * t1216 - t1299) * t1117 - t1231 + t1016 * pkin(1);
t976 = (pkin(1) * t1012 * t1219 - t1300) * t1115 - t1232 + t1015 * pkin(1);
t975 = (pkin(1) * t1011 * t1222 - t1301) * t1113 - t1233 + t1014 * pkin(1);
t974 = -qJ(3,1) * t1186 - t989 * t1283 + (-t992 * t1216 - t1168) * t1019 + (t1247 + t1243 + t1234 + (0.2e1 * t1150 + t1258) * t1055) * t1089 - t1040;
t973 = -qJ(3,2) * t1188 - t988 * t1284 + (-t991 * t1219 - t1169) * t1018 + (t1246 + t1244 + t1235 + (0.2e1 * t1151 + t1259) * t1054) * t1086 - t1039;
t972 = -qJ(3,3) * t1190 - t987 * t1285 + (-t990 * t1222 - t1194) * t1017 + (t1248 + t1245 + t1236 + (0.2e1 * t1152 + t1260) * t1053) * t1083 - t1038;
t1 = [(t989 * t1173 + t988 * t1174 + t987 * t1175) * MDP(1) + (t1038 * t1175 + t1039 * t1174 + t1040 * t1173) * MDP(2) + (t1041 * t1175 + t1042 * t1174 + t1043 * t1173) * MDP(3) + (t984 * t1175 + t985 * t1174 + t986 * t1173 + (-t1074 * t1163 - t1075 * t1162 - t1076 * t1161) * t1102) * MDP(4) + ((t998 * t1228 + t997 * t1229 + t996 * t1230) * t1102 + t1047 * t1167 + t1048 * t1166 + t1049 * t1165) * MDP(5) + (t1005 * t1175 + t1006 * t1174 + t1007 * t1173 + t1143 * t1102) * MDP(6) + (t1002 * t1175 + t1003 * t1174 + t1004 * t1173 + (t1074 * t987 + t1075 * t988 + t1076 * t989) * t1102) * MDP(7) + (t1014 * t1230 + t1015 * t1229 + t1016 * t1228) * t1270 + (t1047 * t1242 + t1048 * t1241 + t1049 * t1240 + (t1020 * t1230 + t1022 * t1229 + t1024 * t1228) * t1102) * MDP(9) + (-t1047 * t1155 - t1048 * t1154 - t1049 * t1153 + (t1021 * t1230 + t1023 * t1229 + t1025 * t1228) * t1102) * MDP(10) + (-t1029 * t1189 - t1030 * t1187 - t1031 * t1185 - t1143 * t1286 + t980 * t1173 + t979 * t1174 + t978 * t1175) * MDP(11) + ((t1031 * t974 + t1049 * t1267) * t1089 + (t1030 * t973 + t1048 * t1268) * t1086 + (t1029 * t972 + t1047 * t1269) * t1083 + (t977 * t1228 + t976 * t1229 + t975 * t1230) * t1286) * MDP(12) + (t1112 - g(1)) * MDP(13); (t989 * t1176 + t988 * t1177 + t987 * t1178) * MDP(1) + (t1038 * t1178 + t1039 * t1177 + t1040 * t1176) * MDP(2) + (t1041 * t1178 + t1042 * t1177 + t1043 * t1176) * MDP(3) + (t984 * t1178 + t985 * t1177 + t986 * t1176 + (-t1077 * t1163 - t1078 * t1162 - t1079 * t1161) * t1102) * MDP(4) + ((t998 * t1225 + t997 * t1226 + t996 * t1227) * t1102 + t1044 * t1167 + t1045 * t1166 + t1046 * t1165) * MDP(5) + (t1005 * t1178 + t1006 * t1177 + t1007 * t1176 + t1142 * t1102) * MDP(6) + (t1002 * t1178 + t1003 * t1177 + t1004 * t1176 + (t1077 * t987 + t1078 * t988 + t1079 * t989) * t1102) * MDP(7) + (t1014 * t1227 + t1015 * t1226 + t1016 * t1225) * t1270 + (t1044 * t1242 + t1045 * t1241 + t1046 * t1240 + (t1020 * t1227 + t1022 * t1226 + t1024 * t1225) * t1102) * MDP(9) + (-t1044 * t1155 - t1045 * t1154 - t1046 * t1153 + (t1021 * t1227 + t1023 * t1226 + t1025 * t1225) * t1102) * MDP(10) + (-t1026 * t1189 - t1027 * t1185 - t1028 * t1187 - t1142 * t1286 + t980 * t1176 + t979 * t1177 + t978 * t1178) * MDP(11) + ((t1027 * t974 + t1046 * t1267) * t1089 + (t1028 * t973 + t1045 * t1268) * t1086 + (t1026 * t972 + t1044 * t1269) * t1083 + (t977 * t1225 + t976 * t1226 + t975 * t1227) * t1286) * MDP(12) + (t1111 - g(2)) * MDP(13); (t1217 * t989 + t1220 * t988 + t1223 * t987) * MDP(1) + (t1179 + t1180 + t1181) * MDP(2) + (t1041 * t1223 + t1042 * t1220 + t1043 * t1217) * MDP(3) + (t1217 * t986 + t1220 * t985 + t1223 * t984) * MDP(4) + (t1005 * t1223 + t1006 * t1220 + t1007 * t1217) * MDP(6) + (t1002 * t1223 + t1003 * t1220 + t1004 * t1217) * MDP(7) + (t1119 * t1181 + t1121 * t1180 + t1123 * t1179) * MDP(9) + (-t1113 * t1181 - t1115 * t1180 - t1117 * t1179) * MDP(10) + (-t1059 * t1189 - t1060 * t1187 - t1061 * t1185 + t1217 * t980 + t1220 * t979 + t1223 * t978) * MDP(11) + ((t1061 * t974 + t1124 * t971) * t1089 + (t1060 * t973 + t1122 * t970) * t1086 + (t1059 * t972 + t1120 * t969) * t1083) * MDP(12) + (t1110 - g(3)) * MDP(13) + 0.2e1 * (t1217 * t983 + t1220 * t982 + t1223 * t981) * MDP(5);];
tauX  = t1;
