% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 17:05
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(5,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 17:05:26
% EndTime: 2022-11-04 17:05:38
% DurationCPUTime: 12.29s
% Computational Cost: add. (41502->508), mult. (93773->1032), div. (4317->24), fcn. (62316->35), ass. (0->451)
t3045 = cos(qJ(2,3));
t3028 = t3045 ^ 2;
t3364 = t3028 - 0.1e1 / 0.2e1;
t3047 = cos(qJ(2,2));
t3029 = t3047 ^ 2;
t3363 = t3029 - 0.1e1 / 0.2e1;
t3049 = cos(qJ(2,1));
t3030 = t3049 ^ 2;
t3362 = t3030 - 0.1e1 / 0.2e1;
t3352 = 2 * pkin(1);
t3031 = sin(pkin(5));
t3361 = -0.2e1 * t3031;
t3032 = cos(pkin(5));
t3360 = 0.2e1 * t3032;
t3053 = xDP(2);
t3345 = pkin(2) * t3053;
t2985 = t3031 * t3345;
t3054 = xDP(1);
t3344 = pkin(2) * t3054;
t2986 = t3031 * t3344;
t3033 = pkin(4) + qJ(3,3);
t3040 = sin(qJ(1,3));
t2990 = t3040 * t3033;
t3036 = legFrame(3,2);
t3002 = sin(t3036);
t3005 = cos(t3036);
t3039 = sin(qJ(2,3));
t3046 = cos(qJ(1,3));
t3052 = xDP(3);
t3346 = pkin(2) * t3032;
t2989 = pkin(1) + t3346;
t3125 = t2989 * t3054;
t3347 = pkin(2) * t3031;
t3223 = t3052 * t3347;
t3150 = t3046 * t3223;
t3155 = t3040 * t2986;
t3156 = t3040 * t2985;
t3260 = t3033 * t3046;
t3285 = t2989 * t3053;
t3289 = t2989 * t3045;
t2915 = ((t3040 * t3125 + t2985) * t3045 - t3054 * t3260) * t3005 + ((-t3040 * t3285 + t2986) * t3045 + t3053 * t3260) * t3002 + (t3046 * t3289 + t2990) * t3052 + ((-t3155 + t3285) * t3005 + (t3156 + t3125) * t3002 - t3150) * t3039;
t3016 = 0.1e1 / t3033;
t3328 = t2915 * t3016;
t3034 = pkin(4) + qJ(3,2);
t3042 = sin(qJ(1,2));
t2991 = t3042 * t3034;
t3037 = legFrame(2,2);
t3003 = sin(t3037);
t3006 = cos(t3037);
t3041 = sin(qJ(2,2));
t3048 = cos(qJ(1,2));
t3149 = t3048 * t3223;
t3153 = t3042 * t2986;
t3154 = t3042 * t2985;
t3259 = t3034 * t3048;
t3288 = t2989 * t3047;
t2916 = ((t3042 * t3125 + t2985) * t3047 - t3054 * t3259) * t3006 + ((-t3042 * t3285 + t2986) * t3047 + t3053 * t3259) * t3003 + (t3048 * t3288 + t2991) * t3052 + ((-t3153 + t3285) * t3006 + (t3154 + t3125) * t3003 - t3149) * t3041;
t3019 = 0.1e1 / t3034;
t3326 = t2916 * t3019;
t3035 = pkin(4) + qJ(3,1);
t3044 = sin(qJ(1,1));
t2992 = t3044 * t3035;
t3038 = legFrame(1,2);
t3004 = sin(t3038);
t3007 = cos(t3038);
t3043 = sin(qJ(2,1));
t3050 = cos(qJ(1,1));
t3148 = t3050 * t3223;
t3151 = t3044 * t2986;
t3152 = t3044 * t2985;
t3258 = t3035 * t3050;
t3287 = t2989 * t3049;
t2917 = ((t3044 * t3125 + t2985) * t3049 - t3054 * t3258) * t3007 + ((-t3044 * t3285 + t2986) * t3049 + t3053 * t3258) * t3004 + (t3050 * t3287 + t2992) * t3052 + ((-t3151 + t3285) * t3007 + (t3152 + t3125) * t3004 - t3148) * t3043;
t3022 = 0.1e1 / t3035;
t3324 = t2917 * t3022;
t3247 = pkin(1) * t3054 + t3032 * t3344;
t3248 = pkin(1) * t3053 + t3032 * t3345;
t3286 = t2989 * t3052;
t2921 = (t3046 * t3286 + t2985 * t3005 + t2986 * t3002 + (-t3002 * t3285 + t3005 * t3125) * t3040) * t3045 + t3039 * ((-t3155 + t3248) * t3005 + (t3156 + t3247) * t3002 - t3150);
t2957 = t3002 * t3054 + t3005 * t3053;
t3359 = t2921 * t2957;
t2922 = (t3048 * t3286 + t2985 * t3006 + t2986 * t3003 + (-t3003 * t3285 + t3006 * t3125) * t3042) * t3047 + t3041 * ((-t3153 + t3248) * t3006 + (t3154 + t3247) * t3003 - t3149);
t2958 = t3003 * t3054 + t3006 * t3053;
t3358 = t2922 * t2958;
t2923 = (t3050 * t3286 + t2985 * t3007 + t2986 * t3004 + (-t3004 * t3285 + t3007 * t3125) * t3044) * t3049 + t3043 * ((-t3151 + t3248) * t3007 + (t3152 + t3247) * t3004 - t3148);
t2959 = t3004 * t3054 + t3007 * t3053;
t3357 = t2923 * t2959;
t3008 = t3045 * pkin(1);
t3013 = qJ(2,3) + pkin(5);
t3356 = t3008 + pkin(2) * cos(t3013);
t3009 = t3047 * pkin(1);
t3014 = qJ(2,2) + pkin(5);
t3355 = t3009 + pkin(2) * cos(t3014);
t3010 = t3049 * pkin(1);
t3015 = qJ(2,1) + pkin(5);
t3354 = t3010 + pkin(2) * cos(t3015);
t3353 = -2 * pkin(1);
t2966 = 0.1e1 / t3356;
t2970 = 0.1e1 / t3355;
t2974 = 0.1e1 / t3354;
t3060 = t3356 ^ 2;
t2967 = 0.1e1 / t3060;
t3063 = t3355 ^ 2;
t2971 = 0.1e1 / t3063;
t3066 = t3354 ^ 2;
t2975 = 0.1e1 / t3066;
t3069 = t3033 ^ 2;
t3017 = 0.1e1 / t3069;
t3071 = t3034 ^ 2;
t3020 = 0.1e1 / t3071;
t3073 = t3035 ^ 2;
t3023 = 0.1e1 / t3073;
t3059 = pkin(1) ^ 2;
t3351 = -2 * t3059;
t2999 = 0.2e1 * t3028 - 0.1e1;
t3000 = 0.2e1 * t3029 - 0.1e1;
t3001 = 0.2e1 * t3030 - 0.1e1;
t2954 = t2957 ^ 2;
t3263 = t3032 * t3045;
t3272 = t3031 * t3039;
t2960 = -t3263 + t3272;
t3058 = pkin(2) ^ 2;
t3246 = -t3058 - t3059;
t2984 = t3346 * t3352 - t3246;
t2951 = -pkin(2) * t3272 + t3289;
t2942 = 0.1e1 / t2951;
t3319 = t2921 * t2942;
t3200 = t3039 * t3319;
t3201 = t3017 * t3319;
t3018 = t3016 * t3017;
t3327 = t2915 * t3018;
t2867 = -t3319 * t3327 + (-(t3200 * t3347 - t3289 * t3319 + t2915) * t3201 + t2954 * t2967 * t2984 / (-t2960 * pkin(2) + t3008)) * t3016;
t3343 = t2867 * t2960;
t3266 = t3032 * t3039;
t3269 = t3031 * t3045;
t2963 = t3266 + t3269;
t3342 = t2867 * t2963;
t3341 = t2867 * t3016;
t3340 = t2867 * t3039;
t3339 = t2867 * t3045;
t2955 = t2958 ^ 2;
t3262 = t3032 * t3047;
t3271 = t3031 * t3041;
t2961 = -t3262 + t3271;
t2952 = -pkin(2) * t3271 + t3288;
t2944 = 0.1e1 / t2952;
t3318 = t2922 * t2944;
t3198 = t3041 * t3318;
t3199 = t3020 * t3318;
t3021 = t3019 * t3020;
t3325 = t2916 * t3021;
t2868 = -t3318 * t3325 + (-(t3198 * t3347 - t3288 * t3318 + t2916) * t3199 + t2955 * t2971 * t2984 / (-t2961 * pkin(2) + t3009)) * t3019;
t3338 = t2868 * t2961;
t3265 = t3032 * t3041;
t3268 = t3031 * t3047;
t2964 = t3265 + t3268;
t3337 = t2868 * t2964;
t3336 = t2868 * t3019;
t3335 = t2868 * t3041;
t3334 = t2868 * t3047;
t2956 = t2959 ^ 2;
t3261 = t3032 * t3049;
t3270 = t3031 * t3043;
t2962 = -t3261 + t3270;
t2953 = -pkin(2) * t3270 + t3287;
t2946 = 0.1e1 / t2953;
t3317 = t2923 * t2946;
t3196 = t3043 * t3317;
t3197 = t3023 * t3317;
t3024 = t3022 * t3023;
t3323 = t2917 * t3024;
t2869 = -t3317 * t3323 + (-(t3196 * t3347 - t3287 * t3317 + t2917) * t3197 + t2956 * t2975 * t2984 / (-t2962 * pkin(2) + t3010)) * t3022;
t3333 = t2869 * t2962;
t3264 = t3032 * t3043;
t3267 = t3031 * t3049;
t2965 = t3264 + t3267;
t3332 = t2869 * t2965;
t3331 = t2869 * t3022;
t3330 = t2869 * t3043;
t3329 = t2869 * t3049;
t2943 = 0.1e1 / t2951 ^ 2;
t3322 = t2921 ^ 2 * t2943;
t2945 = 0.1e1 / t2952 ^ 2;
t3321 = t2922 ^ 2 * t2945;
t2947 = 0.1e1 / t2953 ^ 2;
t3320 = t2923 ^ 2 * t2947;
t3316 = t2954 * t3016;
t3315 = t2955 * t3019;
t3314 = t2956 * t3022;
t3313 = t2957 * t2966;
t3312 = t2957 * t3017;
t3311 = t2958 * t2970;
t3310 = t2958 * t3020;
t3309 = t2959 * t2974;
t3308 = t2959 * t3023;
t3307 = t2966 * t3002;
t3306 = t2966 * t3005;
t3305 = t2966 * t3017;
t3304 = t2967 * t3045;
t2978 = pkin(1) * t3039 + pkin(2) * sin(t3013);
t3303 = t2966 * t2967 * t2978;
t3302 = t2970 * t3003;
t3301 = t2970 * t3006;
t3300 = t2970 * t3020;
t3299 = t2971 * t3047;
t2979 = pkin(1) * t3041 + pkin(2) * sin(t3014);
t3298 = t2970 * t2971 * t2979;
t3297 = t2974 * t3004;
t3296 = t2974 * t3007;
t3295 = t2974 * t3023;
t3294 = t2975 * t3049;
t2980 = pkin(1) * t3043 + pkin(2) * sin(t3015);
t3293 = t2974 * t2975 * t2980;
t3292 = t2989 * t3040;
t3291 = t2989 * t3042;
t3290 = t2989 * t3044;
t3284 = t3002 * t3016;
t3283 = t3003 * t3019;
t3282 = t3004 * t3022;
t3281 = t3005 * t3016;
t3280 = t3006 * t3019;
t3279 = t3007 * t3022;
t3055 = 0.2e1 * qJ(2,3);
t3236 = pkin(2) * t3352;
t2855 = -(t2978 * t3319 - t2984 * t3313) * t3016 * t3313 + (-t3356 * t3327 + (-(-t3058 * cos(0.2e1 * t3013) - t3059 * cos(t3055) - 0.2e1 * t3069 + (-cos(pkin(5) + t3055) - t3032) * t3236 + t3246) * t3319 * t3016 / 0.2e1 - t2978 * t3033 * t3313 - t3356 * t3328) * t3017) * t3319;
t3183 = t3039 * t3303;
t3134 = t2954 * t3183;
t3098 = -qJ(3,3) * t3134 - t2855 * t3045;
t3195 = t2954 * t3303;
t3145 = qJ(3,3) * t3195;
t3234 = pkin(1) * t3339;
t3235 = pkin(1) * t2867 * t3028;
t2837 = (t3098 + 0.2e1 * t3235) * t3032 + (-t3045 * t3145 + (t2855 - 0.2e1 * t3234) * t3039) * t3031;
t3278 = t3016 * t2837;
t3135 = t3031 * t3195;
t2840 = t3235 * t3361 + ((t3340 * t3353 - t3145) * t3032 + t3031 * t2855) * t3045 + t3039 * (qJ(3,3) * t3135 + t2855 * t3032);
t3277 = t3016 * t2840;
t3056 = 0.2e1 * qJ(2,2);
t2856 = -(t2979 * t3318 - t2984 * t3311) * t3019 * t3311 + (-t3355 * t3325 + (-(-t3058 * cos(0.2e1 * t3014) - t3059 * cos(t3056) - 0.2e1 * t3071 + (-cos(pkin(5) + t3056) - t3032) * t3236 + t3246) * t3318 * t3019 / 0.2e1 - t2979 * t3034 * t3311 - t3355 * t3326) * t3020) * t3318;
t3182 = t3041 * t3298;
t3132 = t2955 * t3182;
t3099 = -qJ(3,2) * t3132 - t2856 * t3047;
t3193 = t2955 * t3298;
t3146 = qJ(3,2) * t3193;
t3232 = pkin(1) * t3334;
t3233 = pkin(1) * t2868 * t3029;
t2838 = (t3099 + 0.2e1 * t3233) * t3032 + (-t3047 * t3146 + (t2856 - 0.2e1 * t3232) * t3041) * t3031;
t3276 = t3019 * t2838;
t3133 = t3031 * t3193;
t2841 = t3233 * t3361 + ((t3335 * t3353 - t3146) * t3032 + t3031 * t2856) * t3047 + t3041 * (qJ(3,2) * t3133 + t2856 * t3032);
t3275 = t3019 * t2841;
t3057 = 0.2e1 * qJ(2,1);
t2857 = -(t2980 * t3317 - t2984 * t3309) * t3022 * t3309 + (-t3354 * t3323 + (-(-t3058 * cos(0.2e1 * t3015) - t3059 * cos(t3057) - 0.2e1 * t3073 + (-cos(pkin(5) + t3057) - t3032) * t3236 + t3246) * t3317 * t3022 / 0.2e1 - t2980 * t3035 * t3309 - t3354 * t3324) * t3023) * t3317;
t3181 = t3043 * t3293;
t3130 = t2956 * t3181;
t3100 = -qJ(3,1) * t3130 - t2857 * t3049;
t3191 = t2956 * t3293;
t3147 = qJ(3,1) * t3191;
t3230 = pkin(1) * t3329;
t3231 = pkin(1) * t2869 * t3030;
t2839 = (t3100 + 0.2e1 * t3231) * t3032 + (-t3049 * t3147 + (t2857 - 0.2e1 * t3230) * t3043) * t3031;
t3274 = t3022 * t2839;
t3131 = t3031 * t3191;
t2842 = t3231 * t3361 + ((t3330 * t3353 - t3147) * t3032 + t3031 * t2857) * t3049 + t3043 * (qJ(3,1) * t3131 + t2857 * t3032);
t3273 = t3022 * t2842;
t3257 = t3039 * t3045;
t3256 = t3041 * t3047;
t3255 = t3043 * t3049;
t2894 = -pkin(1) * t2954 * t3304 + 0.2e1 * t2915 * t3201;
t3141 = t3016 * t3200;
t3111 = t3141 * t3313;
t3254 = (qJ(3,3) ^ 2 + t3028 * t3059) * t2867 + t3098 * pkin(1) + t3045 * t3111 * t3351 + t2894 * qJ(3,3);
t2895 = -pkin(1) * t2955 * t3299 + 0.2e1 * t2916 * t3199;
t3139 = t3019 * t3198;
t3109 = t3139 * t3311;
t3253 = (qJ(3,2) ^ 2 + t3029 * t3059) * t2868 + t3099 * pkin(1) + t3047 * t3109 * t3351 + t2895 * qJ(3,2);
t2896 = -pkin(1) * t2956 * t3294 + 0.2e1 * t2917 * t3197;
t3137 = t3022 * t3196;
t3107 = t3137 * t3309;
t3252 = (qJ(3,1) ^ 2 + t3030 * t3059) * t2869 + t3100 * pkin(1) + t3049 * t3107 * t3351 + t2896 * qJ(3,1);
t3207 = t3017 * t3322;
t3251 = -qJ(3,3) * t3207 + t3111 * t3352 + t2855 - t3234;
t3205 = t3020 * t3321;
t3250 = -qJ(3,2) * t3205 + t3109 * t3352 + t2856 - t3232;
t3203 = t3023 * t3320;
t3249 = -qJ(3,1) * t3203 + t3107 * t3352 + t2857 - t3230;
t3245 = 0.2e1 * t2921;
t3244 = 0.2e1 * t2922;
t3243 = 0.2e1 * t2923;
t3222 = qJ(3,3) * t3313;
t2906 = pkin(1) * t3141 + t3222 / 0.4e1;
t3229 = pkin(1) * t3319;
t3162 = t3016 * t3229;
t3103 = -t3039 * t3222 / 0.4e1 + t3364 * t3162;
t3242 = -0.4e1 * (t2906 * t3263 + t3103 * t3031) * t2957;
t3221 = qJ(3,2) * t3311;
t2907 = pkin(1) * t3139 + t3221 / 0.4e1;
t3228 = pkin(1) * t3318;
t3161 = t3019 * t3228;
t3102 = -t3041 * t3221 / 0.4e1 + t3363 * t3161;
t3241 = -0.4e1 * (t2907 * t3262 + t3102 * t3031) * t2958;
t3240 = 0.4e1 * (t2906 * t3269 - t3103 * t3032) * t2957;
t3239 = 0.4e1 * (t2907 * t3268 - t3102 * t3032) * t2958;
t3220 = qJ(3,1) * t3309;
t2908 = pkin(1) * t3137 + t3220 / 0.4e1;
t3227 = pkin(1) * t3317;
t3160 = t3022 * t3227;
t3101 = -t3043 * t3220 / 0.4e1 + t3362 * t3160;
t3238 = 0.4e1 * (t2908 * t3267 - t3101 * t3032) * t2959;
t3237 = -0.4e1 * (t2908 * t3261 + t3101 * t3031) * t2959;
t3226 = t3040 * t3347;
t3225 = t3042 * t3347;
t3224 = t3044 * t3347;
t3219 = t2942 * t3341;
t3218 = t2966 * t3340;
t3217 = t2966 * t3339;
t3216 = t3039 ^ 2 * t3341;
t3215 = t2944 * t3336;
t3214 = t2970 * t3335;
t3213 = t2970 * t3334;
t3212 = t3041 ^ 2 * t3336;
t3211 = t2946 * t3331;
t3210 = t2974 * t3330;
t3209 = t2974 * t3329;
t3208 = t3043 ^ 2 * t3331;
t3206 = t3018 * t3322;
t3204 = t3021 * t3321;
t3202 = t3024 * t3320;
t3194 = t2954 / t3060 ^ 2 * t2978;
t3192 = t2955 / t3063 ^ 2 * t2979;
t3190 = t2956 / t3066 ^ 2 * t2980;
t3189 = t2960 * t3312;
t3188 = t2963 * t3312;
t3187 = t2961 * t3310;
t3186 = t2964 * t3310;
t3185 = t2962 * t3308;
t3184 = t2965 * t3308;
t3180 = t2960 * t3341;
t3179 = t2963 * t3341;
t3178 = t2961 * t3336;
t3177 = t2964 * t3336;
t3176 = t2962 * t3331;
t3175 = t2965 * t3331;
t3174 = t3254 * t2942;
t3173 = t3253 * t2944;
t3172 = t3252 * t2946;
t3171 = (-pkin(1) * t3134 + 0.2e1 * qJ(3,3) * t2867 + t2894) * t3016;
t3170 = (-pkin(1) * t3132 + 0.2e1 * qJ(3,2) * t2868 + t2895) * t3019;
t3169 = (-pkin(1) * t3130 + 0.2e1 * qJ(3,1) * t2869 + t2896) * t3022;
t3168 = t3016 * t3242;
t3167 = t3019 * t3241;
t3166 = t3016 * t3240;
t3165 = t3019 * t3239;
t3164 = t3022 * t3238;
t3163 = t3022 * t3237;
t3159 = pkin(1) * t3195;
t3158 = pkin(1) * t3193;
t3157 = pkin(1) * t3191;
t3144 = t3257 * t3341;
t3143 = t3256 * t3336;
t3142 = t3255 * t3331;
t3140 = t3305 * t3359;
t3138 = t3300 * t3358;
t3136 = t3295 * t3357;
t3129 = t3257 * t3305;
t3128 = t3256 * t3300;
t3127 = t3255 * t3295;
t3121 = t2942 * t3171;
t3120 = t2944 * t3170;
t3119 = t2946 * t3169;
t3118 = t2999 * t3140;
t3117 = t3000 * t3138;
t3116 = t3001 * t3136;
t3115 = t3129 * t3322;
t3114 = t3128 * t3321;
t3113 = t3127 * t3320;
t2939 = t3046 * t3356 + t2990;
t3112 = t2939 * t2942 * t3140;
t2940 = t3048 * t3355 + t2991;
t3110 = t2940 * t2944 * t3138;
t2941 = t3050 * t3354 + t2992;
t3108 = t2941 * t2946 * t3136;
t3106 = 0.2e1 * t3129 * t3359;
t3105 = 0.2e1 * t3128 * t3358;
t3104 = 0.2e1 * t3127 * t3357;
t2912 = t3045 * t3162;
t3097 = t2966 * (-qJ(3,3) * t3340 + (t2912 - 0.2e1 * t3328) * t3141 + t3159);
t2913 = t3047 * t3161;
t3096 = t2970 * (-qJ(3,2) * t3335 + (t2913 - 0.2e1 * t3326) * t3139 + t3158);
t2914 = t3049 * t3160;
t3095 = t2974 * (-qJ(3,1) * t3330 + (t2914 - 0.2e1 * t3324) * t3137 + t3157);
t3094 = (-t2967 * t3039 + t3045 * t3303) * t3316;
t3093 = (t3183 + t3304) * t3316;
t3092 = (-t2971 * t3041 + t3047 * t3298) * t3315;
t3091 = (t3182 + t3299) * t3315;
t3090 = (-t2975 * t3043 + t3049 * t3293) * t3314;
t3089 = (t3181 + t3294) * t3314;
t3088 = t2942 * t3094;
t3087 = t2942 * t3093;
t3086 = t2944 * t3092;
t3085 = t2944 * t3091;
t3084 = t2946 * t3090;
t3083 = t2946 * t3089;
t3082 = t2942 * t3216 + t2943 * t3106;
t3081 = t2944 * t3212 + t2945 * t3105;
t3080 = t2946 * t3208 + t2947 * t3104;
t3079 = t3002 * t3218 + t3003 * t3214 + t3004 * t3210;
t3078 = t3005 * t3218 + t3006 * t3214 + t3007 * t3210;
t3077 = 0.2e1 * t2942 * t3144 + 0.2e1 * t2943 * t3118;
t3076 = 0.2e1 * t2944 * t3143 + 0.2e1 * t2945 * t3117;
t3075 = 0.2e1 * t2946 * t3142 + 0.2e1 * t2947 * t3116;
t2950 = pkin(2) * t3267 + t2989 * t3043;
t2949 = pkin(2) * t3268 + t2989 * t3041;
t2948 = pkin(2) * t3269 + t2989 * t3039;
t2938 = t2953 * t3044 - t3258;
t2937 = t2952 * t3042 - t3259;
t2936 = t2951 * t3040 - t3260;
t2935 = (t3004 * t3347 + t3007 * t3290) * t3049 + (t2989 * t3004 - t3007 * t3224) * t3043;
t2934 = (t3003 * t3347 + t3006 * t3291) * t3047 + (t2989 * t3003 - t3006 * t3225) * t3041;
t2933 = (t3002 * t3347 + t3005 * t3292) * t3045 + (t2989 * t3002 - t3005 * t3226) * t3039;
t2932 = (-t3004 * t3290 + t3007 * t3347) * t3049 + (t2989 * t3007 + t3004 * t3224) * t3043;
t2931 = (-t3003 * t3291 + t3006 * t3347) * t3047 + (t2989 * t3006 + t3003 * t3225) * t3041;
t2930 = (-t3002 * t3292 + t3005 * t3347) * t3045 + (t2989 * t3005 + t3002 * t3226) * t3039;
t2929 = -t2938 * t3004 + t2950 * t3007;
t2928 = t2938 * t3007 + t2950 * t3004;
t2927 = -t2937 * t3003 + t2949 * t3006;
t2926 = t2937 * t3006 + t2949 * t3003;
t2925 = -t2936 * t3002 + t2948 * t3005;
t2924 = t2936 * t3005 + t2948 * t3002;
t2902 = t2914 - t3324;
t2901 = t2913 - t3326;
t2900 = t2912 - t3328;
t2899 = t3001 * t3203;
t2898 = t3000 * t3205;
t2897 = t2999 * t3207;
t2887 = (-t3049 * t2917 + t3362 * t3227) * t3022;
t2886 = (-t3047 * t2916 + t3363 * t3228) * t3019;
t2885 = (-t3045 * t2915 + t3364 * t3229) * t3016;
t2875 = t2887 * t3032 - t2902 * t3270;
t2874 = t2887 * t3031 + t2902 * t3264;
t2873 = t2886 * t3032 - t2901 * t3271;
t2872 = t2886 * t3031 + t2901 * t3265;
t2871 = t2885 * t3032 - t2900 * t3272;
t2870 = t2885 * t3031 + t2900 * t3266;
t2854 = -qJ(3,1) * t3332 + t3157 * t3360;
t2853 = qJ(3,1) * t3333 + t3131 * t3353;
t2852 = -qJ(3,2) * t3337 + t3158 * t3360;
t2851 = qJ(3,2) * t3338 + t3133 * t3353;
t2850 = -qJ(3,3) * t3342 + t3159 * t3360;
t2849 = qJ(3,3) * t3343 + t3135 * t3353;
t1 = [(t2933 * t3219 + t2934 * t3215 + t2935 * t3211) * MDP(1) + (t3082 * t2933 + t3081 * t2934 + t3080 * t2935 - t3002 * t3115 - t3003 * t3114 - t3004 * t3113) * MDP(4) + (-t2897 * t3307 - t2898 * t3302 - t2899 * t3297 + t2933 * t3077 + t2934 * t3076 + t2935 * t3075) * MDP(5) + (t2933 * t3087 + t2934 * t3085 + t2935 * t3083 + t3079) * MDP(6) + (t2933 * t3088 + t2934 * t3086 + t2935 * t3084 + t3002 * t3217 + t3003 * t3213 + t3004 * t3209) * MDP(7) + (t3002 * t3194 + t3003 * t3192 + t3004 * t3190) * MDP(8) + (t2924 * t3180 + t2926 * t3178 + t2928 * t3176 + t2850 * t3307 + t2852 * t3302 + t2854 * t3297 + (t2935 * t3274 + (t2935 * t3163 + (t2874 * t3282 + t2928 * t3184) * t3243) * t2974) * t2946 + (t2934 * t3276 + (t2934 * t3167 + (t2872 * t3283 + t2926 * t3186) * t3244) * t2970) * t2944 + (t2933 * t3278 + (t2933 * t3168 + (t2870 * t3284 + t2924 * t3188) * t3245) * t2966) * t2942) * MDP(11) + (t2924 * t3179 + t2926 * t3177 + t2928 * t3175 + t2849 * t3307 + t2851 * t3302 + t2853 * t3297 + (t2935 * t3273 + (t2935 * t3164 + (t2875 * t3282 - t2928 * t3185) * t3243) * t2974) * t2946 + (t2934 * t3275 + (t2934 * t3165 + (t2873 * t3283 - t2926 * t3187) * t3244) * t2970) * t2944 + (t2933 * t3277 + (t2933 * t3166 + (t2871 * t3284 - t2924 * t3189) * t3245) * t2966) * t2942) * MDP(12) + (-t3079 * pkin(1) - t2924 * t3206 - t2926 * t3204 - t2928 * t3202 + t2933 * t3121 + t2934 * t3120 + t2935 * t3119) * MDP(13) + ((t3249 * t2928 + t2935 * t3172) * t3022 + (t3250 * t2926 + t2934 * t3173) * t3019 + (t3251 * t2924 + t2933 * t3174) * t3016 + (t3002 * t3097 + t3003 * t3096 + t3004 * t3095) * pkin(1)) * MDP(14); (t2930 * t3219 + t2931 * t3215 + t2932 * t3211) * MDP(1) + (t3082 * t2930 + t3081 * t2931 + t3080 * t2932 - t3005 * t3115 - t3006 * t3114 - t3007 * t3113) * MDP(4) + (-t2897 * t3306 - t2898 * t3301 - t2899 * t3296 + t2930 * t3077 + t2931 * t3076 + t2932 * t3075) * MDP(5) + (t2930 * t3087 + t2931 * t3085 + t2932 * t3083 + t3078) * MDP(6) + (t2930 * t3088 + t2931 * t3086 + t2932 * t3084 + t3005 * t3217 + t3006 * t3213 + t3007 * t3209) * MDP(7) + (t3005 * t3194 + t3006 * t3192 + t3007 * t3190) * MDP(8) + (t2925 * t3180 + t2927 * t3178 + t2929 * t3176 + t2850 * t3306 + t2852 * t3301 + t2854 * t3296 + (t2932 * t3274 + (t2932 * t3163 + (t2874 * t3279 + t2929 * t3184) * t3243) * t2974) * t2946 + (t2931 * t3276 + (t2931 * t3167 + (t2872 * t3280 + t2927 * t3186) * t3244) * t2970) * t2944 + (t2930 * t3278 + (t2930 * t3168 + (t2870 * t3281 + t2925 * t3188) * t3245) * t2966) * t2942) * MDP(11) + (t2925 * t3179 + t2927 * t3177 + t2929 * t3175 + t2849 * t3306 + t2851 * t3301 + t2853 * t3296 + (t2932 * t3273 + (t2932 * t3164 + (t2875 * t3279 - t2929 * t3185) * t3243) * t2974) * t2946 + (t2931 * t3275 + (t2931 * t3165 + (t2873 * t3280 - t2927 * t3187) * t3244) * t2970) * t2944 + (t2930 * t3277 + (t2930 * t3166 + (t2871 * t3281 - t2925 * t3189) * t3245) * t2966) * t2942) * MDP(12) + (-t3078 * pkin(1) - t2925 * t3206 - t2927 * t3204 - t2929 * t3202 + t2930 * t3121 + t2931 * t3120 + t2932 * t3119) * MDP(13) + ((t3249 * t2929 + t2932 * t3172) * t3022 + (t3250 * t2927 + t2931 * t3173) * t3019 + (t3251 * t2925 + t2930 * t3174) * t3016 + (t3005 * t3097 + t3006 * t3096 + t3007 * t3095) * pkin(1)) * MDP(14); (t3046 * t3341 + t3048 * t3336 + t3050 * t3331) * MDP(1) + ((t2946 * t3104 + t3208) * t3050 + (t2944 * t3105 + t3212) * t3048 + (t2942 * t3106 + t3216) * t3046) * MDP(4) + 0.2e1 * ((t2946 * t3116 + t3142) * t3050 + (t2944 * t3117 + t3143) * t3048 + (t2942 * t3118 + t3144) * t3046) * MDP(5) + (t3046 * t3093 + t3048 * t3091 + t3050 * t3089) * MDP(6) + (t3046 * t3094 + t3048 * t3092 + t3050 * t3090) * MDP(7) + (0.2e1 * t2963 * t3112 + 0.2e1 * t2964 * t3110 + 0.2e1 * t2965 * t3108 + (t2941 * t3333 + (t2974 * t3237 + t2839) * t3050) * t3022 + (t2940 * t3338 + (t2970 * t3241 + t2838) * t3048) * t3019 + (t2939 * t3343 + (t2966 * t3242 + t2837) * t3046) * t3016) * MDP(11) + (-0.2e1 * t2960 * t3112 - 0.2e1 * t2961 * t3110 - 0.2e1 * t2962 * t3108 + (t2941 * t3332 + (t2974 * t3238 + t2842) * t3050) * t3022 + (t2940 * t3337 + (t2970 * t3239 + t2841) * t3048) * t3019 + (t2939 * t3342 + (t2966 * t3240 + t2840) * t3046) * t3016) * MDP(12) + (-t2939 * t3206 - t2940 * t3204 - t2941 * t3202 + t3046 * t3171 + t3048 * t3170 + t3050 * t3169) * MDP(13) + ((t3249 * t2941 + t3252 * t3050) * t3022 + (t3250 * t2940 + t3253 * t3048) * t3019 + (t3251 * t2939 + t3254 * t3046) * t3016) * MDP(14);];
taucX  = t1;
