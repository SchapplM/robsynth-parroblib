% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 17:05
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR8V1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(5,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_regmin: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 17:04:54
% EndTime: 2022-11-04 17:05:04
% DurationCPUTime: 10.50s
% Computational Cost: add. (41476->468), mult. (93744->984), div. (4317->24), fcn. (62316->35), ass. (0->447)
t1275 = xDP(2);
t1253 = sin(pkin(5));
t1573 = pkin(2) * t1253;
t1207 = t1275 * t1573;
t1276 = xDP(1);
t1208 = t1276 * t1573;
t1258 = legFrame(3,2);
t1224 = sin(t1258);
t1227 = cos(t1258);
t1261 = sin(qJ(2,3));
t1262 = sin(qJ(1,3));
t1268 = cos(qJ(1,3));
t1274 = xDP(3);
t1457 = t1274 * t1573;
t1254 = cos(pkin(5));
t1572 = t1254 * pkin(2);
t1211 = pkin(1) + t1572;
t1591 = t1276 * t1211;
t1592 = t1275 * t1211;
t1595 = t1261 * ((-t1262 * t1208 + t1592) * t1227 + (t1262 * t1207 + t1591) * t1224 - t1268 * t1457);
t1259 = legFrame(2,2);
t1225 = sin(t1259);
t1228 = cos(t1259);
t1263 = sin(qJ(2,2));
t1264 = sin(qJ(1,2));
t1270 = cos(qJ(1,2));
t1594 = t1263 * ((-t1264 * t1208 + t1592) * t1228 + (t1264 * t1207 + t1591) * t1225 - t1270 * t1457);
t1260 = legFrame(1,2);
t1226 = sin(t1260);
t1229 = cos(t1260);
t1265 = sin(qJ(2,1));
t1266 = sin(qJ(1,1));
t1272 = cos(qJ(1,1));
t1593 = t1265 * ((-t1266 * t1208 + t1592) * t1229 + (t1266 * t1207 + t1591) * t1226 - t1272 * t1457);
t1267 = cos(qJ(2,3));
t1250 = t1267 ^ 2;
t1590 = t1250 - 0.1e1 / 0.2e1;
t1269 = cos(qJ(2,2));
t1251 = t1269 ^ 2;
t1589 = t1251 - 0.1e1 / 0.2e1;
t1271 = cos(qJ(2,1));
t1252 = t1271 ^ 2;
t1588 = t1252 - 0.1e1 / 0.2e1;
t1578 = 0.2e1 * pkin(1);
t1587 = -0.2e1 * t1253;
t1586 = 0.2e1 * t1254;
t1255 = pkin(4) + qJ(3,3);
t1212 = t1262 * t1255;
t1483 = t1268 * t1255;
t1517 = t1211 * t1267;
t1137 = ((t1262 * t1591 + t1207) * t1267 - t1276 * t1483) * t1227 + ((-t1262 * t1592 + t1208) * t1267 + t1275 * t1483) * t1224 + (t1268 * t1517 + t1212) * t1274 + t1595;
t1238 = 0.1e1 / t1255;
t1556 = t1137 * t1238;
t1256 = pkin(4) + qJ(3,2);
t1213 = t1264 * t1256;
t1482 = t1270 * t1256;
t1516 = t1211 * t1269;
t1138 = ((t1264 * t1591 + t1207) * t1269 - t1276 * t1482) * t1228 + ((-t1264 * t1592 + t1208) * t1269 + t1275 * t1482) * t1225 + (t1270 * t1516 + t1213) * t1274 + t1594;
t1241 = 0.1e1 / t1256;
t1554 = t1138 * t1241;
t1257 = pkin(4) + qJ(3,1);
t1214 = t1266 * t1257;
t1481 = t1272 * t1257;
t1515 = t1211 * t1271;
t1139 = ((t1266 * t1591 + t1207) * t1271 - t1276 * t1481) * t1229 + ((-t1266 * t1592 + t1208) * t1271 + t1275 * t1481) * t1226 + (t1272 * t1515 + t1214) * t1274 + t1593;
t1244 = 0.1e1 / t1257;
t1552 = t1139 * t1244;
t1514 = t1211 * t1274;
t1143 = (t1268 * t1514 + t1207 * t1227 + t1208 * t1224 + (-t1224 * t1592 + t1227 * t1591) * t1262) * t1267 + t1595;
t1179 = t1224 * t1276 + t1227 * t1275;
t1585 = t1143 * t1179;
t1144 = (t1270 * t1514 + t1207 * t1228 + t1208 * t1225 + (-t1225 * t1592 + t1228 * t1591) * t1264) * t1269 + t1594;
t1180 = t1225 * t1276 + t1228 * t1275;
t1584 = t1144 * t1180;
t1145 = (t1272 * t1514 + t1207 * t1229 + t1208 * t1226 + (-t1226 * t1592 + t1229 * t1591) * t1266) * t1271 + t1593;
t1181 = t1226 * t1276 + t1229 * t1275;
t1583 = t1145 * t1181;
t1230 = t1267 * pkin(1);
t1235 = qJ(2,3) + pkin(5);
t1582 = t1230 + pkin(2) * cos(t1235);
t1231 = t1269 * pkin(1);
t1236 = qJ(2,2) + pkin(5);
t1581 = t1231 + pkin(2) * cos(t1236);
t1232 = t1271 * pkin(1);
t1237 = qJ(2,1) + pkin(5);
t1580 = t1232 + pkin(2) * cos(t1237);
t1579 = -0.2e1 * pkin(1);
t1188 = 0.1e1 / t1582;
t1192 = 0.1e1 / t1581;
t1196 = 0.1e1 / t1580;
t1282 = t1582 ^ 2;
t1189 = 0.1e1 / t1282;
t1285 = t1581 ^ 2;
t1193 = 0.1e1 / t1285;
t1288 = t1580 ^ 2;
t1197 = 0.1e1 / t1288;
t1291 = t1255 ^ 2;
t1239 = 0.1e1 / t1291;
t1293 = t1256 ^ 2;
t1242 = 0.1e1 / t1293;
t1295 = t1257 ^ 2;
t1245 = 0.1e1 / t1295;
t1281 = pkin(1) ^ 2;
t1577 = -0.2e1 * t1281;
t1221 = 0.2e1 * t1250 - 0.1e1;
t1222 = 0.2e1 * t1251 - 0.1e1;
t1223 = 0.2e1 * t1252 - 0.1e1;
t1176 = t1179 ^ 2;
t1489 = t1254 * t1267;
t1498 = t1253 * t1261;
t1182 = -t1489 + t1498;
t1280 = pkin(2) ^ 2;
t1471 = -t1280 - t1281;
t1206 = t1572 * t1578 - t1471;
t1173 = -pkin(2) * t1498 + t1517;
t1164 = 0.1e1 / t1173;
t1547 = t1143 * t1164;
t1419 = t1261 * t1547;
t1420 = t1239 * t1547;
t1240 = t1238 * t1239;
t1555 = t1137 * t1240;
t1089 = -t1547 * t1555 + (-(t1419 * t1573 - t1517 * t1547 + t1137) * t1420 + t1176 * t1189 * t1206 / (-t1182 * pkin(2) + t1230)) * t1238;
t1571 = t1089 * t1182;
t1492 = t1254 * t1261;
t1495 = t1253 * t1267;
t1185 = t1492 + t1495;
t1570 = t1089 * t1185;
t1569 = t1089 * t1238;
t1568 = t1089 * t1261;
t1567 = t1089 * t1267;
t1177 = t1180 ^ 2;
t1488 = t1254 * t1269;
t1497 = t1253 * t1263;
t1183 = -t1488 + t1497;
t1174 = -pkin(2) * t1497 + t1516;
t1166 = 0.1e1 / t1174;
t1546 = t1144 * t1166;
t1417 = t1263 * t1546;
t1418 = t1242 * t1546;
t1243 = t1241 * t1242;
t1553 = t1138 * t1243;
t1090 = -t1546 * t1553 + (-(t1417 * t1573 - t1516 * t1546 + t1138) * t1418 + t1177 * t1193 * t1206 / (-t1183 * pkin(2) + t1231)) * t1241;
t1566 = t1090 * t1183;
t1491 = t1254 * t1263;
t1494 = t1253 * t1269;
t1186 = t1491 + t1494;
t1565 = t1090 * t1186;
t1564 = t1090 * t1241;
t1563 = t1090 * t1263;
t1562 = t1090 * t1269;
t1178 = t1181 ^ 2;
t1487 = t1254 * t1271;
t1496 = t1253 * t1265;
t1184 = -t1487 + t1496;
t1175 = -pkin(2) * t1496 + t1515;
t1168 = 0.1e1 / t1175;
t1545 = t1145 * t1168;
t1415 = t1265 * t1545;
t1416 = t1245 * t1545;
t1246 = t1244 * t1245;
t1551 = t1139 * t1246;
t1091 = -t1545 * t1551 + (-(t1415 * t1573 - t1515 * t1545 + t1139) * t1416 + t1178 * t1197 * t1206 / (-t1184 * pkin(2) + t1232)) * t1244;
t1561 = t1091 * t1184;
t1490 = t1254 * t1265;
t1493 = t1253 * t1271;
t1187 = t1490 + t1493;
t1560 = t1091 * t1187;
t1559 = t1091 * t1244;
t1558 = t1091 * t1265;
t1557 = t1091 * t1271;
t1165 = 0.1e1 / t1173 ^ 2;
t1550 = t1143 ^ 2 * t1165;
t1167 = 0.1e1 / t1174 ^ 2;
t1549 = t1144 ^ 2 * t1167;
t1169 = 0.1e1 / t1175 ^ 2;
t1548 = t1145 ^ 2 * t1169;
t1544 = t1176 * t1238;
t1543 = t1177 * t1241;
t1542 = t1178 * t1244;
t1541 = t1179 * t1188;
t1540 = t1179 * t1239;
t1539 = t1180 * t1192;
t1538 = t1180 * t1242;
t1537 = t1181 * t1196;
t1536 = t1181 * t1245;
t1535 = t1188 * t1224;
t1534 = t1188 * t1227;
t1533 = t1188 * t1239;
t1532 = t1189 * t1267;
t1200 = t1261 * pkin(1) + pkin(2) * sin(t1235);
t1531 = t1188 * t1189 * t1200;
t1530 = t1192 * t1225;
t1529 = t1192 * t1228;
t1528 = t1192 * t1242;
t1527 = t1193 * t1269;
t1201 = t1263 * pkin(1) + pkin(2) * sin(t1236);
t1526 = t1192 * t1193 * t1201;
t1525 = t1196 * t1226;
t1524 = t1196 * t1229;
t1523 = t1196 * t1245;
t1522 = t1197 * t1271;
t1202 = t1265 * pkin(1) + pkin(2) * sin(t1237);
t1521 = t1196 * t1197 * t1202;
t1520 = t1211 * t1227;
t1519 = t1211 * t1228;
t1518 = t1211 * t1229;
t1513 = t1224 * t1211;
t1512 = t1224 * t1238;
t1511 = t1225 * t1211;
t1510 = t1225 * t1241;
t1509 = t1226 * t1211;
t1508 = t1226 * t1244;
t1507 = t1227 * t1238;
t1506 = t1228 * t1241;
t1505 = t1229 * t1244;
t1277 = 0.2e1 * qJ(2,3);
t1461 = pkin(2) * t1578;
t1077 = -(t1200 * t1547 - t1206 * t1541) * t1238 * t1541 + (-t1582 * t1555 + (-(-t1280 * cos(0.2e1 * t1235) - t1281 * cos(t1277) - 0.2e1 * t1291 + (-cos(pkin(5) + t1277) - t1254) * t1461 + t1471) * t1547 * t1238 / 0.2e1 - t1200 * t1255 * t1541 - t1582 * t1556) * t1239) * t1547;
t1402 = t1261 * t1531;
t1359 = t1176 * t1402;
t1320 = -qJ(3,3) * t1359 - t1077 * t1267;
t1414 = t1176 * t1531;
t1367 = qJ(3,3) * t1414;
t1447 = pkin(1) * t1567;
t1456 = t1250 * pkin(1) * t1089;
t1059 = (t1320 + 0.2e1 * t1456) * t1254 + (-t1267 * t1367 + (t1077 - 0.2e1 * t1447) * t1261) * t1253;
t1504 = t1238 * t1059;
t1360 = t1253 * t1414;
t1062 = t1456 * t1587 + ((t1568 * t1579 - t1367) * t1254 + t1253 * t1077) * t1267 + t1261 * (qJ(3,3) * t1360 + t1254 * t1077);
t1503 = t1238 * t1062;
t1278 = 0.2e1 * qJ(2,2);
t1078 = -(t1201 * t1546 - t1206 * t1539) * t1241 * t1539 + (-t1581 * t1553 + (-(-t1280 * cos(0.2e1 * t1236) - t1281 * cos(t1278) - 0.2e1 * t1293 + (-cos(pkin(5) + t1278) - t1254) * t1461 + t1471) * t1546 * t1241 / 0.2e1 - t1201 * t1256 * t1539 - t1581 * t1554) * t1242) * t1546;
t1401 = t1263 * t1526;
t1357 = t1177 * t1401;
t1321 = -qJ(3,2) * t1357 - t1078 * t1269;
t1412 = t1177 * t1526;
t1368 = qJ(3,2) * t1412;
t1446 = pkin(1) * t1562;
t1455 = t1251 * pkin(1) * t1090;
t1060 = (t1321 + 0.2e1 * t1455) * t1254 + (-t1269 * t1368 + (t1078 - 0.2e1 * t1446) * t1263) * t1253;
t1502 = t1241 * t1060;
t1358 = t1253 * t1412;
t1063 = t1455 * t1587 + ((t1563 * t1579 - t1368) * t1254 + t1253 * t1078) * t1269 + t1263 * (qJ(3,2) * t1358 + t1254 * t1078);
t1501 = t1241 * t1063;
t1279 = 0.2e1 * qJ(2,1);
t1079 = -(t1202 * t1545 - t1206 * t1537) * t1244 * t1537 + (-t1580 * t1551 + (-(-t1280 * cos(0.2e1 * t1237) - t1281 * cos(t1279) - 0.2e1 * t1295 + (-cos(pkin(5) + t1279) - t1254) * t1461 + t1471) * t1545 * t1244 / 0.2e1 - t1202 * t1257 * t1537 - t1580 * t1552) * t1245) * t1545;
t1400 = t1265 * t1521;
t1355 = t1178 * t1400;
t1322 = -qJ(3,1) * t1355 - t1079 * t1271;
t1410 = t1178 * t1521;
t1369 = qJ(3,1) * t1410;
t1445 = pkin(1) * t1557;
t1454 = t1252 * pkin(1) * t1091;
t1061 = (t1322 + 0.2e1 * t1454) * t1254 + (-t1271 * t1369 + (t1079 - 0.2e1 * t1445) * t1265) * t1253;
t1500 = t1244 * t1061;
t1356 = t1253 * t1410;
t1064 = t1454 * t1587 + ((t1558 * t1579 - t1369) * t1254 + t1253 * t1079) * t1271 + t1265 * (qJ(3,1) * t1356 + t1254 * t1079);
t1499 = t1244 * t1064;
t1486 = t1261 * t1267;
t1485 = t1263 * t1269;
t1484 = t1265 * t1271;
t1116 = -pkin(1) * t1176 * t1532 + 0.2e1 * t1137 * t1420;
t1366 = t1238 * t1419;
t1333 = t1366 * t1541;
t1479 = (qJ(3,3) ^ 2 + t1250 * t1281) * t1089 + t1320 * pkin(1) + t1267 * t1333 * t1577 + t1116 * qJ(3,3);
t1117 = -pkin(1) * t1177 * t1527 + 0.2e1 * t1138 * t1418;
t1364 = t1241 * t1417;
t1331 = t1364 * t1539;
t1478 = (qJ(3,2) ^ 2 + t1251 * t1281) * t1090 + t1321 * pkin(1) + t1269 * t1331 * t1577 + t1117 * qJ(3,2);
t1118 = -pkin(1) * t1178 * t1522 + 0.2e1 * t1139 * t1416;
t1362 = t1244 * t1415;
t1329 = t1362 * t1537;
t1477 = (qJ(3,1) ^ 2 + t1252 * t1281) * t1091 + t1322 * pkin(1) + t1271 * t1329 * t1577 + t1118 * qJ(3,1);
t1426 = t1239 * t1550;
t1476 = -qJ(3,3) * t1426 + t1333 * t1578 + t1077 - t1447;
t1424 = t1242 * t1549;
t1475 = -qJ(3,2) * t1424 + t1331 * t1578 + t1078 - t1446;
t1422 = t1245 * t1548;
t1474 = -qJ(3,1) * t1422 + t1329 * t1578 + t1079 - t1445;
t1470 = 0.2e1 * t1143;
t1469 = 0.2e1 * t1144;
t1468 = 0.2e1 * t1145;
t1444 = qJ(3,3) * t1541;
t1128 = pkin(1) * t1366 + t1444 / 0.4e1;
t1460 = pkin(1) * t1547;
t1384 = t1238 * t1460;
t1325 = -t1261 * t1444 / 0.4e1 + t1590 * t1384;
t1467 = -0.4e1 * (t1128 * t1489 + t1325 * t1253) * t1179;
t1443 = qJ(3,2) * t1539;
t1129 = pkin(1) * t1364 + t1443 / 0.4e1;
t1459 = pkin(1) * t1546;
t1383 = t1241 * t1459;
t1324 = -t1263 * t1443 / 0.4e1 + t1589 * t1383;
t1466 = -0.4e1 * (t1129 * t1488 + t1324 * t1253) * t1180;
t1465 = 0.4e1 * (t1128 * t1495 - t1325 * t1254) * t1179;
t1464 = 0.4e1 * (t1129 * t1494 - t1324 * t1254) * t1180;
t1442 = qJ(3,1) * t1537;
t1130 = pkin(1) * t1362 + t1442 / 0.4e1;
t1458 = pkin(1) * t1545;
t1382 = t1244 * t1458;
t1323 = -t1265 * t1442 / 0.4e1 + t1588 * t1382;
t1463 = 0.4e1 * (t1130 * t1493 - t1323 * t1254) * t1181;
t1462 = -0.4e1 * (t1130 * t1487 + t1323 * t1253) * t1181;
t1453 = t1227 * t1573;
t1452 = t1228 * t1573;
t1451 = t1229 * t1573;
t1450 = t1224 * t1573;
t1449 = t1225 * t1573;
t1448 = t1226 * t1573;
t1441 = t1164 * t1569;
t1440 = t1182 * t1569;
t1439 = t1185 * t1569;
t1438 = t1188 * t1568;
t1437 = t1188 * t1567;
t1436 = t1166 * t1564;
t1435 = t1183 * t1564;
t1434 = t1186 * t1564;
t1433 = t1192 * t1563;
t1432 = t1192 * t1562;
t1431 = t1168 * t1559;
t1430 = t1184 * t1559;
t1429 = t1187 * t1559;
t1428 = t1196 * t1558;
t1427 = t1196 * t1557;
t1425 = t1240 * t1550;
t1423 = t1243 * t1549;
t1421 = t1246 * t1548;
t1413 = t1176 / t1282 ^ 2 * t1200;
t1411 = t1177 / t1285 ^ 2 * t1201;
t1409 = t1178 / t1288 ^ 2 * t1202;
t1408 = t1182 * t1540;
t1407 = t1185 * t1540;
t1406 = t1183 * t1538;
t1405 = t1186 * t1538;
t1404 = t1184 * t1536;
t1403 = t1187 * t1536;
t1399 = t1261 ^ 2 * t1569;
t1398 = t1263 ^ 2 * t1564;
t1397 = t1265 ^ 2 * t1559;
t1396 = t1164 * t1479;
t1395 = t1166 * t1478;
t1394 = t1238 * (-pkin(1) * t1359 + 0.2e1 * qJ(3,3) * t1089 + t1116);
t1393 = t1241 * (-pkin(1) * t1357 + 0.2e1 * qJ(3,2) * t1090 + t1117);
t1392 = t1244 * (-pkin(1) * t1355 + 0.2e1 * qJ(3,1) * t1091 + t1118);
t1391 = t1477 * t1168;
t1390 = t1238 * t1467;
t1389 = t1241 * t1466;
t1388 = t1238 * t1465;
t1387 = t1241 * t1464;
t1386 = t1244 * t1463;
t1385 = t1244 * t1462;
t1375 = pkin(1) * t1414;
t1374 = pkin(1) * t1412;
t1373 = pkin(1) * t1410;
t1365 = t1533 * t1585;
t1363 = t1528 * t1584;
t1361 = t1523 * t1583;
t1354 = t1486 * t1533;
t1353 = t1485 * t1528;
t1352 = t1484 * t1523;
t1351 = t1486 * t1569;
t1350 = t1485 * t1564;
t1349 = t1484 * t1559;
t1343 = t1164 * t1394;
t1342 = t1166 * t1393;
t1341 = t1168 * t1392;
t1340 = t1221 * t1365;
t1339 = t1222 * t1363;
t1338 = t1223 * t1361;
t1337 = t1354 * t1550;
t1336 = t1353 * t1549;
t1335 = t1352 * t1548;
t1161 = t1268 * t1582 + t1212;
t1334 = t1161 * t1164 * t1365;
t1162 = t1270 * t1581 + t1213;
t1332 = t1162 * t1166 * t1363;
t1163 = t1272 * t1580 + t1214;
t1330 = t1163 * t1168 * t1361;
t1328 = 0.2e1 * t1354 * t1585;
t1327 = 0.2e1 * t1353 * t1584;
t1326 = 0.2e1 * t1352 * t1583;
t1134 = t1267 * t1384;
t1319 = t1188 * (-qJ(3,3) * t1568 + (t1134 - 0.2e1 * t1556) * t1366 + t1375);
t1135 = t1269 * t1383;
t1318 = t1192 * (-qJ(3,2) * t1563 + (t1135 - 0.2e1 * t1554) * t1364 + t1374);
t1136 = t1271 * t1382;
t1317 = t1196 * (-qJ(3,1) * t1558 + (t1136 - 0.2e1 * t1552) * t1362 + t1373);
t1316 = (-t1189 * t1261 + t1267 * t1531) * t1544;
t1315 = (t1402 + t1532) * t1544;
t1314 = (-t1193 * t1263 + t1269 * t1526) * t1543;
t1313 = (t1401 + t1527) * t1543;
t1312 = (-t1197 * t1265 + t1271 * t1521) * t1542;
t1311 = (t1400 + t1522) * t1542;
t1310 = t1164 * t1316;
t1309 = t1164 * t1315;
t1308 = t1166 * t1314;
t1307 = t1166 * t1313;
t1306 = t1168 * t1312;
t1305 = t1168 * t1311;
t1304 = t1164 * t1399 + t1165 * t1328;
t1303 = t1166 * t1398 + t1167 * t1327;
t1302 = t1168 * t1397 + t1169 * t1326;
t1301 = t1224 * t1438 + t1225 * t1433 + t1226 * t1428;
t1300 = t1227 * t1438 + t1228 * t1433 + t1229 * t1428;
t1299 = 0.2e1 * t1164 * t1351 + 0.2e1 * t1165 * t1340;
t1298 = 0.2e1 * t1166 * t1350 + 0.2e1 * t1167 * t1339;
t1297 = 0.2e1 * t1168 * t1349 + 0.2e1 * t1169 * t1338;
t1172 = pkin(2) * t1493 + t1265 * t1211;
t1171 = pkin(2) * t1494 + t1263 * t1211;
t1170 = pkin(2) * t1495 + t1261 * t1211;
t1160 = t1175 * t1266 - t1481;
t1159 = t1174 * t1264 - t1482;
t1158 = t1173 * t1262 - t1483;
t1157 = (t1266 * t1518 + t1448) * t1271 + (-t1266 * t1451 + t1509) * t1265;
t1156 = (t1264 * t1519 + t1449) * t1269 + (-t1264 * t1452 + t1511) * t1263;
t1155 = (t1262 * t1520 + t1450) * t1267 + (-t1262 * t1453 + t1513) * t1261;
t1154 = (-t1266 * t1509 + t1451) * t1271 + (t1266 * t1448 + t1518) * t1265;
t1153 = (-t1264 * t1511 + t1452) * t1269 + (t1264 * t1449 + t1519) * t1263;
t1152 = (-t1262 * t1513 + t1453) * t1267 + (t1262 * t1450 + t1520) * t1261;
t1151 = -t1160 * t1226 + t1229 * t1172;
t1150 = t1160 * t1229 + t1226 * t1172;
t1149 = -t1159 * t1225 + t1228 * t1171;
t1148 = t1159 * t1228 + t1225 * t1171;
t1147 = -t1158 * t1224 + t1227 * t1170;
t1146 = t1158 * t1227 + t1224 * t1170;
t1124 = t1136 - t1552;
t1123 = t1135 - t1554;
t1122 = t1134 - t1556;
t1121 = t1223 * t1422;
t1120 = t1222 * t1424;
t1119 = t1221 * t1426;
t1109 = (-t1271 * t1139 + t1588 * t1458) * t1244;
t1108 = (-t1269 * t1138 + t1589 * t1459) * t1241;
t1107 = (-t1267 * t1137 + t1590 * t1460) * t1238;
t1097 = t1109 * t1254 - t1124 * t1496;
t1096 = t1109 * t1253 + t1124 * t1490;
t1095 = t1108 * t1254 - t1123 * t1497;
t1094 = t1108 * t1253 + t1123 * t1491;
t1093 = t1107 * t1254 - t1122 * t1498;
t1092 = t1107 * t1253 + t1122 * t1492;
t1076 = -qJ(3,1) * t1560 + t1373 * t1586;
t1075 = qJ(3,1) * t1561 + t1356 * t1579;
t1074 = -qJ(3,2) * t1565 + t1374 * t1586;
t1073 = qJ(3,2) * t1566 + t1358 * t1579;
t1072 = -qJ(3,3) * t1570 + t1375 * t1586;
t1071 = qJ(3,3) * t1571 + t1360 * t1579;
t1 = [t1155 * t1441 + t1156 * t1436 + t1157 * t1431, 0, 0, t1304 * t1155 + t1303 * t1156 + t1302 * t1157 - t1224 * t1337 - t1225 * t1336 - t1226 * t1335, -t1119 * t1535 - t1120 * t1530 - t1121 * t1525 + t1155 * t1299 + t1156 * t1298 + t1157 * t1297, t1155 * t1309 + t1156 * t1307 + t1157 * t1305 + t1301, t1155 * t1310 + t1156 * t1308 + t1157 * t1306 + t1224 * t1437 + t1225 * t1432 + t1226 * t1427, t1224 * t1413 + t1225 * t1411 + t1226 * t1409, 0, 0, t1146 * t1440 + t1148 * t1435 + t1150 * t1430 + t1072 * t1535 + t1074 * t1530 + t1076 * t1525 + (t1157 * t1500 + (t1157 * t1385 + (t1096 * t1508 + t1150 * t1403) * t1468) * t1196) * t1168 + (t1156 * t1502 + (t1156 * t1389 + (t1094 * t1510 + t1148 * t1405) * t1469) * t1192) * t1166 + (t1155 * t1504 + (t1155 * t1390 + (t1092 * t1512 + t1146 * t1407) * t1470) * t1188) * t1164, t1146 * t1439 + t1148 * t1434 + t1150 * t1429 + t1071 * t1535 + t1073 * t1530 + t1075 * t1525 + (t1157 * t1499 + (t1157 * t1386 + (t1097 * t1508 - t1150 * t1404) * t1468) * t1196) * t1168 + (t1156 * t1501 + (t1156 * t1387 + (t1095 * t1510 - t1148 * t1406) * t1469) * t1192) * t1166 + (t1155 * t1503 + (t1155 * t1388 + (t1093 * t1512 - t1146 * t1408) * t1470) * t1188) * t1164, -t1301 * pkin(1) - t1146 * t1425 - t1148 * t1423 - t1150 * t1421 + t1155 * t1343 + t1156 * t1342 + t1157 * t1341, (t1474 * t1150 + t1157 * t1391) * t1244 + (t1475 * t1148 + t1156 * t1395) * t1241 + (t1476 * t1146 + t1155 * t1396) * t1238 + (t1224 * t1319 + t1225 * t1318 + t1226 * t1317) * pkin(1), 0; t1152 * t1441 + t1153 * t1436 + t1154 * t1431, 0, 0, t1304 * t1152 + t1303 * t1153 + t1302 * t1154 - t1227 * t1337 - t1228 * t1336 - t1229 * t1335, -t1119 * t1534 - t1120 * t1529 - t1121 * t1524 + t1152 * t1299 + t1153 * t1298 + t1154 * t1297, t1152 * t1309 + t1153 * t1307 + t1154 * t1305 + t1300, t1152 * t1310 + t1153 * t1308 + t1154 * t1306 + t1227 * t1437 + t1228 * t1432 + t1229 * t1427, t1227 * t1413 + t1228 * t1411 + t1229 * t1409, 0, 0, t1147 * t1440 + t1149 * t1435 + t1151 * t1430 + t1072 * t1534 + t1074 * t1529 + t1076 * t1524 + (t1154 * t1500 + (t1154 * t1385 + (t1096 * t1505 + t1151 * t1403) * t1468) * t1196) * t1168 + (t1153 * t1502 + (t1153 * t1389 + (t1094 * t1506 + t1149 * t1405) * t1469) * t1192) * t1166 + (t1152 * t1504 + (t1152 * t1390 + (t1092 * t1507 + t1147 * t1407) * t1470) * t1188) * t1164, t1147 * t1439 + t1149 * t1434 + t1151 * t1429 + t1071 * t1534 + t1073 * t1529 + t1075 * t1524 + (t1154 * t1499 + (t1154 * t1386 + (t1097 * t1505 - t1151 * t1404) * t1468) * t1196) * t1168 + (t1153 * t1501 + (t1153 * t1387 + (t1095 * t1506 - t1149 * t1406) * t1469) * t1192) * t1166 + (t1152 * t1503 + (t1152 * t1388 + (t1093 * t1507 - t1147 * t1408) * t1470) * t1188) * t1164, -t1300 * pkin(1) - t1147 * t1425 - t1149 * t1423 - t1151 * t1421 + t1152 * t1343 + t1153 * t1342 + t1154 * t1341, (t1474 * t1151 + t1154 * t1391) * t1244 + (t1475 * t1149 + t1153 * t1395) * t1241 + (t1476 * t1147 + t1152 * t1396) * t1238 + (t1227 * t1319 + t1228 * t1318 + t1229 * t1317) * pkin(1), 0; t1268 * t1569 + t1270 * t1564 + t1272 * t1559, 0, 0, (t1168 * t1326 + t1397) * t1272 + (t1166 * t1327 + t1398) * t1270 + (t1164 * t1328 + t1399) * t1268, 0.2e1 * (t1168 * t1338 + t1349) * t1272 + 0.2e1 * (t1166 * t1339 + t1350) * t1270 + 0.2e1 * (t1164 * t1340 + t1351) * t1268, t1268 * t1315 + t1270 * t1313 + t1272 * t1311, t1268 * t1316 + t1270 * t1314 + t1272 * t1312, 0, 0, 0, 0.2e1 * t1185 * t1334 + 0.2e1 * t1186 * t1332 + 0.2e1 * t1187 * t1330 + (t1163 * t1561 + (t1196 * t1462 + t1061) * t1272) * t1244 + (t1162 * t1566 + (t1192 * t1466 + t1060) * t1270) * t1241 + (t1161 * t1571 + (t1188 * t1467 + t1059) * t1268) * t1238, -0.2e1 * t1182 * t1334 - 0.2e1 * t1183 * t1332 - 0.2e1 * t1184 * t1330 + (t1163 * t1560 + (t1196 * t1463 + t1064) * t1272) * t1244 + (t1162 * t1565 + (t1192 * t1464 + t1063) * t1270) * t1241 + (t1161 * t1570 + (t1188 * t1465 + t1062) * t1268) * t1238, -t1161 * t1425 - t1162 * t1423 - t1163 * t1421 + t1268 * t1394 + t1270 * t1393 + t1272 * t1392, (t1474 * t1163 + t1477 * t1272) * t1244 + (t1475 * t1162 + t1478 * t1270) * t1241 + (t1476 * t1161 + t1479 * t1268) * t1238, 0;];
tau_reg  = t1;
