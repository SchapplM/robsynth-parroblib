% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 19:59
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR8V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(5,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V1G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V1G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRPRR8V1G2A0_inertia_para_pf_mdp: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V1G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRPRR8V1G2A0_inertia_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 19:59:47
% EndTime: 2020-08-06 19:59:50
% DurationCPUTime: 2.60s
% Computational Cost: add. (3372->285), mult. (6401->593), div. (807->18), fcn. (5793->23), ass. (0->264)
t1907 = 2 * MDP(11);
t1753 = cos(pkin(5)) * pkin(2) + pkin(1);
t1782 = legFrame(3,2);
t1757 = sin(t1782);
t1760 = cos(t1782);
t1785 = sin(qJ(2,3));
t1791 = cos(qJ(2,3));
t1786 = sin(qJ(1,3));
t1938 = pkin(2) * sin(pkin(5));
t1900 = t1786 * t1938;
t1916 = t1753 * t1786;
t1714 = (-t1757 * t1916 + t1760 * t1938) * t1791 + t1785 * (t1753 * t1760 + t1757 * t1900);
t1717 = (t1757 * t1938 + t1760 * t1916) * t1791 + (t1753 * t1757 - t1760 * t1900) * t1785;
t1950 = t1714 * t1717;
t1783 = legFrame(2,2);
t1758 = sin(t1783);
t1761 = cos(t1783);
t1787 = sin(qJ(2,2));
t1793 = cos(qJ(2,2));
t1788 = sin(qJ(1,2));
t1899 = t1788 * t1938;
t1915 = t1753 * t1788;
t1715 = (-t1758 * t1915 + t1761 * t1938) * t1793 + t1787 * (t1753 * t1761 + t1758 * t1899);
t1718 = (t1758 * t1938 + t1761 * t1915) * t1793 + (t1753 * t1758 - t1761 * t1899) * t1787;
t1949 = t1715 * t1718;
t1784 = legFrame(1,2);
t1759 = sin(t1784);
t1762 = cos(t1784);
t1789 = sin(qJ(2,1));
t1795 = cos(qJ(2,1));
t1790 = sin(qJ(1,1));
t1898 = t1790 * t1938;
t1914 = t1753 * t1790;
t1716 = (-t1759 * t1914 + t1762 * t1938) * t1795 + t1789 * (t1753 * t1762 + t1759 * t1898);
t1719 = (t1759 * t1938 + t1762 * t1914) * t1795 + (t1753 * t1759 - t1762 * t1898) * t1789;
t1948 = t1716 * t1719;
t1741 = t1753 * t1791 - t1785 * t1938;
t1732 = 0.1e1 / t1741;
t1792 = cos(qJ(1,3));
t1947 = t1732 * t1792;
t1742 = t1753 * t1793 - t1787 * t1938;
t1734 = 0.1e1 / t1742;
t1794 = cos(qJ(1,2));
t1946 = t1734 * t1794;
t1743 = t1753 * t1795 - t1789 * t1938;
t1736 = 0.1e1 / t1743;
t1796 = cos(qJ(1,1));
t1945 = t1736 * t1796;
t1944 = 2 * MDP(5);
t1943 = 2 * MDP(6);
t1942 = 2 * MDP(7);
t1941 = pkin(1) * t1791;
t1940 = pkin(1) * t1793;
t1939 = pkin(1) * t1795;
t1779 = pkin(4) + qJ(3,3);
t1726 = t1741 * t1786 - t1779 * t1792;
t1738 = t1753 * t1785 + t1791 * t1938;
t1702 = t1726 * t1760 + t1738 * t1757;
t1763 = 0.1e1 / t1779;
t1937 = t1702 * t1763;
t1703 = -t1726 * t1757 + t1738 * t1760;
t1936 = t1703 * t1763;
t1780 = pkin(4) + qJ(3,2);
t1727 = t1742 * t1788 - t1780 * t1794;
t1739 = t1753 * t1787 + t1793 * t1938;
t1704 = t1727 * t1761 + t1739 * t1758;
t1765 = 0.1e1 / t1780;
t1935 = t1704 * t1765;
t1705 = -t1727 * t1758 + t1739 * t1761;
t1934 = t1705 * t1765;
t1781 = pkin(4) + qJ(3,1);
t1728 = t1743 * t1790 - t1781 * t1796;
t1740 = t1753 * t1789 + t1795 * t1938;
t1706 = t1728 * t1762 + t1740 * t1759;
t1767 = 0.1e1 / t1781;
t1933 = t1706 * t1767;
t1707 = -t1728 * t1759 + t1740 * t1762;
t1932 = t1707 * t1767;
t1750 = pkin(2) * cos(qJ(2,3) + pkin(5)) + t1941;
t1729 = t1750 * t1792 + t1779 * t1786;
t1723 = (-t1792 * t1941 + t1729) * t1763;
t1931 = t1723 * t1763;
t1751 = pkin(2) * cos(qJ(2,2) + pkin(5)) + t1940;
t1730 = t1751 * t1794 + t1780 * t1788;
t1724 = (-t1794 * t1940 + t1730) * t1765;
t1930 = t1724 * t1765;
t1752 = pkin(2) * cos(qJ(2,1) + pkin(5)) + t1939;
t1731 = t1752 * t1796 + t1781 * t1790;
t1725 = (-t1796 * t1939 + t1731) * t1767;
t1929 = t1725 * t1767;
t1928 = t1732 * t1763;
t1733 = 0.1e1 / t1741 ^ 2;
t1764 = 0.1e1 / t1779 ^ 2;
t1927 = t1733 * t1764;
t1926 = t1734 * t1765;
t1735 = 0.1e1 / t1742 ^ 2;
t1766 = 0.1e1 / t1780 ^ 2;
t1925 = t1735 * t1766;
t1924 = t1736 * t1767;
t1737 = 0.1e1 / t1743 ^ 2;
t1768 = 0.1e1 / t1781 ^ 2;
t1923 = t1737 * t1768;
t1744 = 0.1e1 / t1750;
t1922 = t1744 * t1757;
t1921 = t1744 * t1760;
t1746 = 0.1e1 / t1751;
t1920 = t1746 * t1758;
t1919 = t1746 * t1761;
t1748 = 0.1e1 / t1752;
t1918 = t1748 * t1759;
t1917 = t1748 * t1762;
t1913 = t1763 * t1792;
t1773 = t1792 ^ 2;
t1912 = t1764 * t1773;
t1911 = t1765 * t1794;
t1775 = t1794 ^ 2;
t1910 = t1766 * t1775;
t1909 = t1767 * t1796;
t1777 = t1796 ^ 2;
t1908 = t1768 * t1777;
t1906 = t1732 * t1941;
t1905 = t1734 * t1940;
t1904 = t1736 * t1939;
t1903 = pkin(1) * t1744 * t1785;
t1902 = pkin(1) * t1746 * t1787;
t1901 = pkin(1) * t1748 * t1789;
t1897 = t1714 * t1928;
t1896 = t1715 * t1926;
t1895 = t1716 * t1924;
t1894 = t1717 * t1928;
t1893 = t1718 * t1926;
t1892 = t1719 * t1924;
t1891 = t1744 * t1928;
t1800 = pkin(1) ^ 2;
t1867 = t1791 ^ 2 * t1800 + qJ(3,3) ^ 2;
t1720 = (-t1729 * t1941 + t1867 * t1792) * t1763;
t1890 = t1720 * t1928;
t1889 = t1785 * t1928;
t1888 = t1764 * t1947;
t1769 = t1785 ^ 2;
t1887 = t1769 * t1927;
t1886 = t1746 * t1926;
t1866 = t1793 ^ 2 * t1800 + qJ(3,2) ^ 2;
t1721 = (-t1730 * t1940 + t1866 * t1794) * t1765;
t1885 = t1721 * t1926;
t1884 = t1787 * t1926;
t1883 = t1766 * t1946;
t1770 = t1787 ^ 2;
t1882 = t1770 * t1925;
t1881 = t1748 * t1924;
t1865 = t1795 ^ 2 * t1800 + qJ(3,1) ^ 2;
t1722 = (-t1731 * t1939 + t1865 * t1796) * t1767;
t1880 = t1722 * t1924;
t1879 = t1789 * t1924;
t1878 = t1768 * t1945;
t1771 = t1789 ^ 2;
t1877 = t1771 * t1923;
t1876 = t1744 * t1913;
t1875 = t1746 * t1911;
t1874 = t1748 * t1909;
t1873 = t1764 * t1785 * t1791;
t1872 = t1766 * t1787 * t1793;
t1871 = t1768 * t1789 * t1795;
t1870 = 0.2e1 * qJ(3,1) * t1924;
t1869 = 0.2e1 * qJ(3,2) * t1926;
t1868 = 0.2e1 * qJ(3,3) * t1928;
t1864 = t1757 * t1903;
t1863 = t1760 * t1903;
t1862 = t1758 * t1902;
t1861 = t1761 * t1902;
t1860 = t1759 * t1901;
t1859 = t1762 * t1901;
t1858 = qJ(3,1) * t1879;
t1857 = qJ(3,2) * t1884;
t1856 = qJ(3,3) * t1889;
t1855 = t1927 * t1950;
t1854 = t1714 * t1888;
t1853 = t1925 * t1949;
t1852 = t1715 * t1883;
t1851 = t1923 * t1948;
t1850 = t1716 * t1878;
t1849 = t1717 * t1888;
t1848 = t1718 * t1883;
t1847 = t1719 * t1878;
t1846 = t1744 * t1889;
t1845 = t1791 * t1891;
t1844 = t1769 * t1888;
t1843 = t1733 * t1873;
t1842 = t1746 * t1884;
t1841 = t1793 * t1886;
t1840 = t1770 * t1883;
t1839 = t1735 * t1872;
t1838 = t1748 * t1879;
t1837 = t1795 * t1881;
t1836 = t1771 * t1878;
t1835 = t1737 * t1871;
t1834 = t1785 * t1876;
t1833 = t1791 * t1876;
t1832 = t1787 * t1875;
t1831 = t1793 * t1875;
t1830 = t1789 * t1874;
t1829 = t1795 * t1874;
t1828 = t1867 * t1732;
t1827 = t1866 * t1734;
t1826 = t1865 * t1736;
t1825 = t1757 * t1846;
t1824 = t1760 * t1846;
t1823 = t1873 * t1947;
t1822 = t1758 * t1842;
t1821 = t1761 * t1842;
t1820 = t1872 * t1946;
t1819 = t1759 * t1838;
t1818 = t1762 * t1838;
t1817 = t1871 * t1945;
t1816 = t1757 * t1834;
t1815 = t1760 * t1834;
t1814 = t1758 * t1832;
t1813 = t1761 * t1832;
t1812 = t1759 * t1830;
t1811 = t1762 * t1830;
t1803 = t1811 + t1813 + t1815;
t1810 = (t1714 * t1823 + t1715 * t1820 + t1716 * t1817) * t1944 + (t1714 * t1844 + t1715 * t1840 + t1716 * t1836) * MDP(4) + (t1850 + t1852 + t1854) * MDP(1) + t1803 * MDP(6) + (t1760 * t1833 + t1761 * t1831 + t1762 * t1829) * MDP(7);
t1804 = t1812 + t1814 + t1816;
t1809 = (t1717 * t1823 + t1718 * t1820 + t1719 * t1817) * t1944 + (t1717 * t1844 + t1718 * t1840 + t1719 * t1836) * MDP(4) + (t1847 + t1848 + t1849) * MDP(1) + t1804 * MDP(6) + (t1757 * t1833 + t1758 * t1831 + t1759 * t1829) * MDP(7);
t1745 = 0.1e1 / t1750 ^ 2;
t1747 = 0.1e1 / t1751 ^ 2;
t1749 = 0.1e1 / t1752 ^ 2;
t1805 = (t1716 * t1759 + t1719 * t1762) * t1881;
t1806 = (t1715 * t1758 + t1718 * t1761) * t1886;
t1807 = (t1714 * t1757 + t1717 * t1760) * t1891;
t1808 = (t1785 * t1807 + t1787 * t1806 + t1789 * t1805) * MDP(6) + (t1791 * t1807 + t1793 * t1806 + t1795 * t1805) * MDP(7) + (t1835 * t1948 + t1839 * t1949 + t1843 * t1950) * t1944 + (t1769 * t1855 + t1770 * t1853 + t1771 * t1851) * MDP(4) + (t1851 + t1853 + t1855) * MDP(1) + (t1745 * t1757 * t1760 + t1747 * t1758 * t1761 + t1749 * t1759 * t1762) * MDP(8);
t1802 = t1714 * t1824 + t1715 * t1821 + t1716 * t1818;
t1801 = t1717 * t1825 + t1718 * t1822 + t1719 * t1819;
t1713 = t1719 ^ 2;
t1712 = t1718 ^ 2;
t1711 = t1717 ^ 2;
t1710 = t1716 ^ 2;
t1709 = t1715 ^ 2;
t1708 = t1714 ^ 2;
t1696 = t1719 * t1870 - t1860;
t1695 = t1716 * t1870 - t1859;
t1694 = t1718 * t1869 - t1862;
t1693 = t1715 * t1869 - t1861;
t1692 = t1717 * t1868 - t1864;
t1691 = t1714 * t1868 - t1863;
t1690 = pkin(1) * t1918 - t1719 * t1858;
t1689 = pkin(1) * t1917 - t1716 * t1858;
t1688 = pkin(1) * t1920 - t1718 * t1857;
t1687 = pkin(1) * t1919 - t1715 * t1857;
t1686 = pkin(1) * t1922 - t1717 * t1856;
t1685 = pkin(1) * t1921 - t1714 * t1856;
t1684 = (-t1719 * t1904 + t1706) * t1767;
t1683 = (-t1716 * t1904 + t1707) * t1767;
t1682 = (-t1718 * t1905 + t1704) * t1765;
t1681 = (-t1715 * t1905 + t1705) * t1765;
t1680 = (-t1717 * t1906 + t1702) * t1763;
t1679 = (-t1714 * t1906 + t1703) * t1763;
t1676 = -qJ(3,1) * t1860 + (-t1706 * t1939 + t1719 * t1826) * t1767;
t1675 = -qJ(3,1) * t1859 + (-t1707 * t1939 + t1716 * t1826) * t1767;
t1674 = -qJ(3,2) * t1862 + (-t1704 * t1940 + t1718 * t1827) * t1765;
t1673 = -qJ(3,2) * t1861 + (-t1705 * t1940 + t1715 * t1827) * t1765;
t1672 = -qJ(3,3) * t1864 + (-t1702 * t1941 + t1717 * t1828) * t1763;
t1671 = -qJ(3,3) * t1863 + (-t1703 * t1941 + t1714 * t1828) * t1763;
t1 = [(t1711 * t1927 + t1712 * t1925 + t1713 * t1923) * MDP(1) + (t1711 * t1887 + t1712 * t1882 + t1713 * t1877) * MDP(4) + (t1745 * t1757 ^ 2 + t1747 * t1758 ^ 2 + t1749 * t1759 ^ 2) * MDP(8) + (t1692 * t1894 + t1694 * t1893 + t1696 * t1892) * MDP(11) + (t1672 * t1894 + t1674 * t1893 + t1676 * t1892 + t1680 * t1937 + t1682 * t1935 + t1684 * t1933) * MDP(12) + MDP(13) + (t1711 * t1843 + t1712 * t1839 + t1713 * t1835) * t1944 + t1801 * t1943 + (t1717 * t1757 * t1845 + t1718 * t1758 * t1841 + t1719 * t1759 * t1837) * t1942 + (-t1801 * MDP(11) + (t1686 * t1922 + t1688 * t1920 + t1690 * t1918) * MDP(12)) * pkin(1); (t1691 * t1894 + t1693 * t1893 + t1695 * t1892) * MDP(11) + (t1671 * t1894 + t1673 * t1893 + t1675 * t1892 + t1679 * t1937 + t1681 * t1935 + t1683 * t1933) * MDP(12) + ((-t1714 * t1825 - t1715 * t1822 - t1716 * t1819) * MDP(11) + (t1685 * t1922 + t1687 * t1920 + t1689 * t1918) * MDP(12)) * pkin(1) + t1808; (qJ(3,1) * t1847 + qJ(3,2) * t1848 + qJ(3,3) * t1849) * t1907 + (t1702 * t1931 + t1704 * t1930 + t1706 * t1929 + t1717 * t1890 + t1718 * t1885 + t1719 * t1880) * MDP(12) + (-t1804 * MDP(11) + (-qJ(3,1) * t1812 - qJ(3,2) * t1814 - qJ(3,3) * t1816) * MDP(12)) * pkin(1) + t1809; (t1692 * t1897 + t1694 * t1896 + t1696 * t1895) * MDP(11) + (t1672 * t1897 + t1674 * t1896 + t1676 * t1895 + t1680 * t1936 + t1682 * t1934 + t1684 * t1932) * MDP(12) + ((-t1717 * t1824 - t1718 * t1821 - t1719 * t1818) * MDP(11) + (t1686 * t1921 + t1688 * t1919 + t1690 * t1917) * MDP(12)) * pkin(1) + t1808; (t1708 * t1927 + t1709 * t1925 + t1710 * t1923) * MDP(1) + (t1708 * t1887 + t1709 * t1882 + t1710 * t1877) * MDP(4) + (t1745 * t1760 ^ 2 + t1747 * t1761 ^ 2 + t1749 * t1762 ^ 2) * MDP(8) + (t1691 * t1897 + t1693 * t1896 + t1695 * t1895) * MDP(11) + (t1671 * t1897 + t1673 * t1896 + t1675 * t1895 + t1679 * t1936 + t1681 * t1934 + t1683 * t1932) * MDP(12) + MDP(13) + (t1708 * t1843 + t1709 * t1839 + t1710 * t1835) * t1944 + t1802 * t1943 + (t1714 * t1760 * t1845 + t1715 * t1761 * t1841 + t1716 * t1762 * t1837) * t1942 + (-t1802 * MDP(11) + (t1685 * t1921 + t1687 * t1919 + t1689 * t1917) * MDP(12)) * pkin(1); (qJ(3,1) * t1850 + qJ(3,2) * t1852 + qJ(3,3) * t1854) * t1907 + (t1703 * t1931 + t1705 * t1930 + t1707 * t1929 + t1714 * t1890 + t1715 * t1885 + t1716 * t1880) * MDP(12) + (-t1803 * MDP(11) + (-qJ(3,1) * t1811 - qJ(3,2) * t1813 - qJ(3,3) * t1815) * MDP(12)) * pkin(1) + t1810; (t1692 * t1913 + t1694 * t1911 + t1696 * t1909) * MDP(11) + ((t1676 * t1796 + t1684 * t1731) * t1767 + (t1674 * t1794 + t1682 * t1730) * t1765 + (t1672 * t1792 + t1680 * t1729) * t1763) * MDP(12) + t1809; (t1691 * t1913 + t1693 * t1911 + t1695 * t1909) * MDP(11) + ((t1675 * t1796 + t1683 * t1731) * t1767 + (t1673 * t1794 + t1681 * t1730) * t1765 + (t1671 * t1792 + t1679 * t1729) * t1763) * MDP(12) + t1810; (t1908 + t1910 + t1912) * MDP(1) + (t1769 * t1912 + t1770 * t1910 + t1771 * t1908) * MDP(4) + ((t1722 * t1796 + t1725 * t1731) * t1767 + (t1721 * t1794 + t1724 * t1730) * t1765 + (t1720 * t1792 + t1723 * t1729) * t1763) * MDP(12) + MDP(13) + (t1773 * t1873 + t1775 * t1872 + t1777 * t1871) * t1944 + (qJ(3,1) * t1908 + qJ(3,2) * t1910 + qJ(3,3) * t1912) * t1907;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
