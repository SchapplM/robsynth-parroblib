% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 17:05
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR8V1G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(5,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: pkin has to be [5x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR8V1G2A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 17:05:05
% EndTime: 2022-11-04 17:05:19
% DurationCPUTime: 15.16s
% Computational Cost: add. (42789->703), mult. (90971->1073), div. (4932->21), fcn. (62547->86), ass. (0->482)
t2099 = legFrame(3,2);
t2064 = cos(t2099);
t2342 = t2064 * g(1);
t2061 = sin(t2099);
t2345 = t2061 * g(2);
t1928 = t2342 - t2345;
t2112 = cos(qJ(1,3));
t2106 = sin(qJ(1,3));
t2347 = g(3) * t2106;
t1897 = -t1928 * t2112 + t2347;
t2094 = sin(pkin(5));
t2105 = sin(qJ(2,3));
t2285 = t2094 * t2105;
t2095 = cos(pkin(5));
t2356 = pkin(2) * t2095;
t2039 = pkin(1) + t2356;
t2111 = cos(qJ(2,3));
t2296 = t2039 * t2111;
t2160 = pkin(2) * t2285 - t2296;
t1903 = 0.1e1 / t2160;
t2096 = pkin(4) + qJ(3,3);
t2082 = 0.1e1 / t2096;
t2317 = t1903 * t2082;
t2402 = t1897 * t2317;
t2100 = legFrame(2,2);
t2065 = cos(t2100);
t2341 = t2065 * g(1);
t2062 = sin(t2100);
t2344 = t2062 * g(2);
t1929 = t2341 - t2344;
t2108 = sin(qJ(1,2));
t2070 = g(3) * t2108;
t2114 = cos(qJ(1,2));
t1898 = -t1929 * t2114 + t2070;
t2107 = sin(qJ(2,2));
t2284 = t2094 * t2107;
t2113 = cos(qJ(2,2));
t2295 = t2039 * t2113;
t2159 = pkin(2) * t2284 - t2295;
t1905 = 0.1e1 / t2159;
t2097 = pkin(4) + qJ(3,2);
t2085 = 0.1e1 / t2097;
t2316 = t1905 * t2085;
t2401 = t1898 * t2316;
t2119 = xDP(2);
t2355 = pkin(2) * t2119;
t2023 = t2094 * t2355;
t2120 = xDP(1);
t2354 = pkin(2) * t2120;
t2024 = t2094 * t2354;
t2098 = pkin(4) + qJ(3,1);
t2110 = sin(qJ(1,1));
t2042 = t2110 * t2098;
t2101 = legFrame(1,2);
t2063 = sin(t2101);
t2066 = cos(t2101);
t2109 = sin(qJ(2,1));
t2115 = cos(qJ(2,1));
t2116 = cos(qJ(1,1));
t2118 = xDP(3);
t2190 = t2039 * t2120;
t2357 = pkin(2) * t2094;
t2269 = t2118 * t2357;
t2206 = t2116 * t2269;
t2209 = t2110 * t2024;
t2210 = t2110 * t2023;
t2280 = t2098 * t2116;
t2292 = t2039 * t2119;
t2294 = t2039 * t2115;
t1842 = ((t2110 * t2190 + t2023) * t2115 - t2120 * t2280) * t2066 + ((-t2110 * t2292 + t2024) * t2115 + t2119 * t2280) * t2063 + (t2116 * t2294 + t2042) * t2118 + ((-t2209 + t2292) * t2066 + (t2210 + t2190) * t2063 - t2206) * t2109;
t2081 = qJ(2,1) + pkin(5);
t2054 = cos(t2081);
t2069 = t2115 * pkin(1);
t2392 = pkin(2) * t2054 + t2069;
t2398 = t2392 * t1842;
t2041 = t2108 * t2097;
t2207 = t2114 * t2269;
t2211 = t2108 * t2024;
t2212 = t2108 * t2023;
t2281 = t2097 * t2114;
t1841 = ((t2108 * t2190 + t2023) * t2113 - t2120 * t2281) * t2065 + ((-t2108 * t2292 + t2024) * t2113 + t2119 * t2281) * t2062 + (t2114 * t2295 + t2041) * t2118 + ((-t2211 + t2292) * t2065 + (t2212 + t2190) * t2062 - t2207) * t2107;
t2080 = qJ(2,2) + pkin(5);
t2053 = cos(t2080);
t2068 = t2113 * pkin(1);
t2393 = pkin(2) * t2053 + t2068;
t2397 = t2393 * t1841;
t2040 = t2106 * t2096;
t2208 = t2112 * t2269;
t2213 = t2106 * t2024;
t2214 = t2106 * t2023;
t2282 = t2096 * t2112;
t1840 = ((t2106 * t2190 + t2023) * t2111 - t2120 * t2282) * t2064 + ((-t2106 * t2292 + t2024) * t2111 + t2119 * t2282) * t2061 + (t2112 * t2296 + t2040) * t2118 + ((-t2213 + t2292) * t2064 + (t2214 + t2190) * t2061 - t2208) * t2105;
t2079 = qJ(2,3) + pkin(5);
t2052 = cos(t2079);
t2067 = t2111 * pkin(1);
t2394 = pkin(2) * t2052 + t2067;
t2396 = t2394 * t1840;
t1885 = -t2160 * t2106 - t2282;
t1909 = t2039 * t2105 + t2111 * t2357;
t1864 = t1885 * t2064 + t1909 * t2061;
t1865 = -t1885 * t2061 + t1909 * t2064;
t1888 = t2112 * t2394 + t2040;
t2124 = pkin(2) ^ 2;
t2125 = pkin(1) ^ 2;
t2274 = -t2124 - t2125;
t2395 = 0.2e1 * pkin(1);
t1963 = t2356 * t2395 - t2274;
t2102 = xDDP(3);
t2103 = xDDP(2);
t2104 = xDDP(1);
t2046 = sin(t2079);
t2363 = pkin(1) * t2105;
t2188 = pkin(2) * t2046 + t2363;
t1918 = t2061 * t2120 + t2064 * t2119;
t1930 = 0.1e1 / t2394;
t2311 = t1918 * t1930;
t2236 = t2082 * t2311;
t2278 = pkin(1) * t2120 + t2095 * t2354;
t2279 = pkin(1) * t2119 + t2095 * t2355;
t2293 = t2039 * t2118;
t1846 = (t2112 * t2293 + t2023 * t2064 + t2024 * t2061 + (-t2061 * t2292 + t2064 * t2190) * t2106) * t2111 + t2105 * ((-t2213 + t2279) * t2064 + (t2214 + t2278) * t2061 - t2208);
t2330 = t1846 * t1903;
t2148 = -(-t1963 * t2311 - t2188 * t2330) * t2236 + (t1864 * t2104 + t1865 * t2103 + t1888 * t2102) * t2082;
t1886 = -t2159 * t2108 - t2281;
t1910 = t2039 * t2107 + t2113 * t2357;
t1866 = t1886 * t2065 + t1910 * t2062;
t1867 = -t1886 * t2062 + t1910 * t2065;
t1889 = t2114 * t2393 + t2041;
t2047 = sin(t2080);
t2362 = pkin(1) * t2107;
t2187 = pkin(2) * t2047 + t2362;
t1919 = t2062 * t2120 + t2065 * t2119;
t1932 = 0.1e1 / t2393;
t2310 = t1919 * t1932;
t2235 = t2085 * t2310;
t1847 = (t2114 * t2293 + t2023 * t2065 + t2024 * t2062 + (-t2062 * t2292 + t2065 * t2190) * t2108) * t2113 + t2107 * ((-t2211 + t2279) * t2065 + (t2212 + t2278) * t2062 - t2207);
t2329 = t1847 * t1905;
t2147 = -(-t1963 * t2310 - t2187 * t2329) * t2235 + (t1866 * t2104 + t1867 * t2103 + t1889 * t2102) * t2085;
t2283 = t2094 * t2109;
t2158 = pkin(2) * t2283 - t2294;
t1887 = -t2158 * t2110 - t2280;
t1911 = t2039 * t2109 + t2115 * t2357;
t1868 = t1887 * t2066 + t1911 * t2063;
t1869 = -t1887 * t2063 + t1911 * t2066;
t1890 = t2116 * t2392 + t2042;
t2088 = 0.1e1 / t2098;
t2048 = sin(t2081);
t2361 = pkin(1) * t2109;
t2186 = pkin(2) * t2048 + t2361;
t1920 = t2063 * t2120 + t2066 * t2119;
t1934 = 0.1e1 / t2392;
t2309 = t1920 * t1934;
t2234 = t2088 * t2309;
t1848 = (t2116 * t2293 + t2023 * t2066 + t2024 * t2063 + (-t2063 * t2292 + t2066 * t2190) * t2110) * t2115 + t2109 * ((-t2209 + t2279) * t2066 + (t2210 + t2278) * t2063 - t2206);
t1907 = 0.1e1 / t2158;
t2328 = t1848 * t1907;
t2146 = -(-t1963 * t2309 - t2186 * t2328) * t2234 + (t1868 * t2104 + t1869 * t2103 + t1890 * t2102) * t2088;
t2314 = t1918 ^ 2 / t2394 ^ 2;
t2313 = t1919 ^ 2 / t2393 ^ 2;
t2312 = t1920 ^ 2 / t2392 ^ 2;
t2132 = t2096 ^ 2;
t2083 = 0.1e1 / t2132;
t2259 = t1840 * t2330;
t2199 = t2083 * t2259;
t2272 = t2106 * t2357;
t2291 = t2061 * t2106;
t1870 = (-t2039 * t2291 + t2064 * t2357) * t2111 + (t2039 * t2064 + t2061 * t2272) * t2105;
t2288 = t2064 * t2106;
t1873 = (t2039 * t2288 + t2061 * t2357) * t2111 + (t2039 * t2061 - t2064 * t2272) * t2105;
t2084 = t2082 * t2083;
t1828 = t2084 * t2259 + (t2112 * t2102 + t1963 / (t2067 + (t2095 * t2111 - t2285) * pkin(2)) * t2314 - (t1870 * t2103 + t1873 * t2104 + (t2160 * t2330 - t1840) * t2083 * t1846) * t1903) * t2082;
t2337 = qJ(3,3) * t1828;
t2152 = 0.2e1 * t2199 - t2337;
t2134 = t2097 ^ 2;
t2086 = 0.1e1 / t2134;
t2258 = t1841 * t2329;
t2198 = t2086 * t2258;
t2271 = t2108 * t2357;
t2290 = t2062 * t2108;
t1871 = (-t2039 * t2290 + t2065 * t2357) * t2113 + (t2039 * t2065 + t2062 * t2271) * t2107;
t2287 = t2065 * t2108;
t1874 = (t2039 * t2287 + t2062 * t2357) * t2113 + (t2039 * t2062 - t2065 * t2271) * t2107;
t2087 = t2085 * t2086;
t1829 = t2087 * t2258 + (t2114 * t2102 + t1963 / (t2068 + (t2095 * t2113 - t2284) * pkin(2)) * t2313 - (t1871 * t2103 + t1874 * t2104 + (t2159 * t2329 - t1841) * t2086 * t1847) * t1905) * t2085;
t2338 = qJ(3,2) * t1829;
t2153 = 0.2e1 * t2198 - t2338;
t2136 = t2098 ^ 2;
t2089 = 0.1e1 / t2136;
t2257 = t1842 * t2328;
t2197 = t2089 * t2257;
t2270 = t2110 * t2357;
t2289 = t2063 * t2110;
t1872 = (-t2039 * t2289 + t2066 * t2357) * t2115 + (t2039 * t2066 + t2063 * t2270) * t2109;
t2286 = t2066 * t2110;
t1875 = (t2039 * t2286 + t2063 * t2357) * t2115 + (t2039 * t2063 - t2066 * t2270) * t2109;
t2090 = t2088 * t2089;
t1830 = t2090 * t2257 + (t2116 * t2102 + t1963 / (t2069 + (t2095 * t2115 - t2283) * pkin(2)) * t2312 - (t1872 * t2103 + t1875 * t2104 + (t2158 * t2328 - t1842) * t2089 * t1848) * t1907) * t2088;
t2339 = qJ(3,1) * t1830;
t2154 = 0.2e1 * t2197 - t2339;
t2340 = t2066 * g(1);
t2343 = t2063 * g(2);
t2182 = t2340 - t2343;
t2346 = g(3) * t2110;
t1899 = -t2182 * t2116 + t2346;
t2391 = -0.2e1 * t2094;
t2390 = 0.2e1 * t2095;
t2389 = -g(1) / 0.4e1;
t2388 = g(1) / 0.4e1;
t2387 = -g(2) / 0.4e1;
t2386 = g(2) / 0.4e1;
t2385 = g(3) / 0.2e1;
t2029 = t2099 + t2079;
t2011 = qJ(1,3) + t2029;
t2384 = sin(t2011) / 0.4e1;
t2030 = -t2099 + t2079;
t2013 = qJ(1,3) - t2030;
t1972 = sin(t2013);
t2383 = t1972 / 0.4e1;
t2014 = qJ(1,3) - t2029;
t1973 = sin(t2014);
t2382 = -t1973 / 0.4e1;
t2031 = t2100 + t2080;
t2015 = qJ(1,2) + t2031;
t2381 = sin(t2015) / 0.4e1;
t2032 = -t2100 + t2080;
t2017 = qJ(1,2) - t2032;
t1976 = sin(t2017);
t2380 = t1976 / 0.4e1;
t2018 = qJ(1,2) - t2031;
t1977 = sin(t2018);
t2379 = -t1977 / 0.4e1;
t2027 = t2101 + t2081;
t2019 = qJ(1,1) + t2027;
t2378 = sin(t2019) / 0.4e1;
t2218 = t2101 - t2081;
t2021 = qJ(1,1) + t2218;
t1980 = sin(t2021);
t2377 = t1980 / 0.4e1;
t2022 = qJ(1,1) - t2027;
t1981 = sin(t2022);
t2376 = -t1981 / 0.4e1;
t2012 = qJ(1,3) + t2030;
t2375 = -cos(t2012) / 0.4e1;
t1984 = cos(t2013);
t2374 = -t1984 / 0.4e1;
t1985 = cos(t2014);
t2373 = t1985 / 0.4e1;
t2016 = qJ(1,2) + t2032;
t2372 = -cos(t2016) / 0.4e1;
t2371 = -cos(t2017) / 0.4e1;
t2020 = qJ(1,1) - t2218;
t2370 = -cos(t2020) / 0.4e1;
t2369 = -cos(t2021) / 0.4e1;
t2368 = -sin(t2218) / 0.2e1;
t2367 = sin(t2032) / 0.2e1;
t2091 = t2111 ^ 2;
t2366 = 0.2e1 * t2091 - 0.1e1;
t2092 = t2113 ^ 2;
t2365 = 0.2e1 * t2092 - 0.1e1;
t2093 = t2115 ^ 2;
t2364 = 0.2e1 * t2093 - 0.1e1;
t2056 = qJ(1,3) - t2079;
t2353 = g(3) * sin(t2056);
t2058 = qJ(1,2) - t2080;
t2352 = g(3) * sin(t2058);
t2060 = qJ(1,1) - t2081;
t2351 = g(3) * sin(t2060);
t2350 = g(3) * cos(t2056);
t2349 = g(3) * cos(t2058);
t2348 = g(3) * cos(t2060);
t2336 = t1828 * t2111;
t2335 = t1829 * t2113;
t2334 = t1830 * t2115;
t2333 = t1846 ^ 2 / t2160 ^ 2;
t2332 = t1847 ^ 2 / t2159 ^ 2;
t2331 = t1848 ^ 2 / t2158 ^ 2;
t1855 = (t2061 * t2104 + t2064 * t2103 + t2188 * t2314) * t1930;
t2327 = t1855 * t2105;
t1856 = (t2062 * t2104 + t2065 * t2103 + t2187 * t2313) * t1932;
t2326 = t1856 * t2107;
t1857 = (t2063 * t2104 + t2066 * t2103 + t2186 * t2312) * t1934;
t2325 = t1857 * t2109;
t2324 = t1870 * t1903;
t2323 = t1871 * t1905;
t2322 = t1872 * t1907;
t2321 = t1873 * t1903;
t2320 = t1874 * t1905;
t2319 = t1875 * t1907;
t2318 = t1899 * t2115;
t2315 = t1907 * t2088;
t1925 = g(1) * t2061 + g(2) * t2064;
t2308 = t1925 * t2111;
t1926 = g(1) * t2062 + g(2) * t2065;
t2307 = t1926 * t2113;
t1927 = g(1) * t2063 + g(2) * t2066;
t2306 = t1927 * t2115;
t2305 = t1930 * t2061;
t2304 = t1930 * t2064;
t2303 = t1930 * t2105;
t2302 = t1932 * t2062;
t2301 = t1932 * t2065;
t2300 = t1932 * t2107;
t2299 = t1934 * t2063;
t2298 = t1934 * t2066;
t2297 = t1934 * t2109;
t2121 = 0.2e1 * qJ(2,3);
t2076 = pkin(5) + t2121;
t2049 = cos(t2076);
t2277 = t2049 + t2095;
t2122 = 0.2e1 * qJ(2,2);
t2077 = pkin(5) + t2122;
t2050 = cos(t2077);
t2276 = t2050 + t2095;
t2123 = 0.2e1 * qJ(2,1);
t2078 = pkin(5) + t2123;
t2051 = cos(t2078);
t2275 = t2051 + t2095;
t2071 = g(3) * t2112;
t1900 = t1928 * t2106 + t2071;
t2072 = g(3) * t2114;
t1901 = t1929 * t2108 + t2072;
t2073 = g(3) * t2116;
t1902 = t2182 * t2110 + t2073;
t2273 = pkin(2) * t2395;
t2268 = (0.2e1 * t2188 * t2096 * t2311 + (-(-t2124 * cos(0.2e1 * t2079) - t2125 * cos(t2121) - 0.2e1 * t2132 - t2277 * t2273 + t2274) * t2330 + 0.2e1 * t2396) * t2082) * t2083 / 0.2e1;
t2267 = (0.2e1 * t2187 * t2097 * t2310 + (-(-t2124 * cos(0.2e1 * t2080) - t2125 * cos(t2122) - 0.2e1 * t2134 - t2276 * t2273 + t2274) * t2329 + 0.2e1 * t2397) * t2085) * t2086 / 0.2e1;
t2266 = (0.2e1 * t2186 * t2098 * t2309 + (-(-t2124 * cos(0.2e1 * t2081) - t2125 * cos(t2123) - 0.2e1 * t2136 - t2275 * t2273 + t2274) * t2328 + 0.2e1 * t2398) * t2088) * t2089 / 0.2e1;
t2265 = t1828 * t2303;
t2264 = t1930 * t2336;
t2263 = t1829 * t2300;
t2262 = t1932 * t2335;
t2261 = t1830 * t2297;
t2260 = t1934 * t2334;
t2256 = t2083 * t2333;
t2255 = t2084 * t2333;
t2254 = t2086 * t2332;
t2253 = t2087 * t2332;
t2252 = t2089 * t2331;
t2251 = t2090 * t2331;
t2250 = t1870 * t2317;
t2249 = t1871 * t2316;
t2248 = t1872 * t2315;
t2247 = t1873 * t2317;
t2246 = t1874 * t2316;
t2245 = t1875 * t2315;
t2240 = t1899 * t2315;
t2239 = t1900 * t2317;
t2238 = t1901 * t2316;
t2237 = t1902 * t2315;
t2233 = t2084 * t2396;
t2232 = t2087 * t2397;
t2231 = t2090 * t2398;
t2230 = t2383 + cos(t2030) / 0.2e1;
t2229 = t1973 / 0.4e1 - cos(t2029) / 0.2e1;
t2228 = t2380 + cos(t2032) / 0.2e1;
t2227 = t1977 / 0.4e1 - cos(t2031) / 0.2e1;
t2226 = t2377 + cos(t2218) / 0.2e1;
t2225 = t1981 / 0.4e1 - cos(t2027) / 0.2e1;
t2224 = t1984 / 0.4e1 + sin(t2030) / 0.2e1;
t2223 = t2373 - sin(t2029) / 0.2e1;
t1989 = cos(t2018);
t2222 = -t1989 / 0.4e1 + t2371;
t2221 = t1989 / 0.4e1 + t2371;
t1993 = cos(t2022);
t2220 = t2369 - t1993 / 0.4e1;
t2219 = t1993 / 0.4e1 + t2369;
t2178 = t2236 * t2330;
t1819 = t2105 * t2336 - t2366 * t2178;
t2217 = -0.2e1 * t1819 * t2317;
t2177 = t2235 * t2329;
t1820 = t2107 * t2335 - t2365 * t2177;
t2216 = -0.2e1 * t1820 * t2316;
t2176 = t2234 * t2328;
t1821 = t2109 * t2334 - t2364 * t2176;
t2215 = -0.2e1 * t1821 * t2315;
t2202 = t2111 * t2256;
t2201 = t2113 * t2254;
t2200 = t2115 * t2252;
t2196 = t2315 * t2318;
t2195 = t2107 * t2401;
t2194 = t2113 * t2401;
t2193 = t2105 * t2402;
t2192 = t2111 * t2402;
t2191 = t2109 * t2240;
t2181 = t2236 * t2363;
t2180 = t2235 * t2362;
t2179 = t2234 * t2361;
t1971 = sin(t2012);
t1982 = cos(t2011);
t2055 = qJ(1,3) + t2079;
t2175 = g(1) * t2375 + g(2) * t2384 + t1971 * t2387 + t1982 * t2389 + sin(t2055) * t2385;
t1975 = sin(t2016);
t1986 = cos(t2015);
t2057 = qJ(1,2) + t2080;
t2174 = g(1) * t2372 + g(2) * t2381 + t1975 * t2387 + t1986 * t2389 + sin(t2057) * t2385;
t1979 = sin(t2020);
t1990 = cos(t2019);
t2059 = qJ(1,1) + t2081;
t2173 = g(1) * t2370 + g(2) * t2378 + t1979 * t2387 + t1990 * t2389 + sin(t2059) * t2385;
t2172 = g(1) * t2384 + g(2) * t2375 + t1971 * t2388 + t1982 * t2386 + cos(t2055) * t2385;
t2171 = g(1) * t2381 + g(2) * t2372 + t1975 * t2388 + t1986 * t2386 + cos(t2057) * t2385;
t2170 = g(1) * t2378 + g(2) * t2370 + t1979 * t2388 + t1990 * t2386 + cos(t2059) * t2385;
t2169 = -g(1) * t2288 + g(2) * t2291 - t2071;
t2168 = -g(1) * t2287 + g(2) * t2290 - t2072;
t2167 = -g(1) * t2286 + g(2) * t2289 - t2073;
t2166 = 0.2e1 * t2178;
t2165 = -0.2e1 * t2178;
t2164 = 0.2e1 * t2177;
t2163 = -0.2e1 * t2177;
t2162 = 0.2e1 * t2176;
t2161 = -0.2e1 * t2176;
t2157 = t2202 * t2303;
t2156 = t2201 * t2300;
t2155 = t2200 * t2297;
t1849 = t2111 * t2314 + t2327;
t1851 = t2113 * t2313 + t2326;
t1853 = t2115 * t2312 + t2325;
t2151 = -t2233 - t2268;
t2150 = -t2232 - t2267;
t2149 = -t2231 - t2266;
t2145 = t1828 * t2094 + t2095 * t2165;
t2144 = -t1828 * t2095 + t2094 * t2165;
t2143 = t1829 * t2094 + t2095 * t2163;
t2142 = -t1829 * t2095 + t2094 * t2163;
t2141 = t1830 * t2094 + t2095 * t2161;
t2140 = -t1830 * t2095 + t2094 * t2161;
t2139 = -t2061 * t2265 - t2062 * t2263 - t2063 * t2261;
t2138 = -t2064 * t2265 - t2065 * t2263 - t2066 * t2261;
t2045 = sin(t2078);
t2044 = sin(t2077);
t2043 = sin(t2076);
t2003 = sin(t2031);
t1999 = sin(t2027);
t1881 = t1927 * t2109 - t2115 * t2167;
t1880 = -t2109 * t2167 - t2306;
t1879 = t1926 * t2107 - t2113 * t2168;
t1878 = -t2107 * t2168 - t2307;
t1877 = t1925 * t2105 - t2111 * t2169;
t1876 = -t2105 * t2169 - t2308;
t1854 = t1857 * t2115 - t2109 * t2312;
t1852 = t1856 * t2113 - t2107 * t2313;
t1850 = t1855 * t2111 - t2105 * t2314;
t1836 = t2364 * t2252;
t1835 = t2365 * t2254;
t1834 = t2366 * t2256;
t1824 = (t1830 * t2109 + t2115 * t2161) * t2109;
t1823 = (t1829 * t2107 + t2113 * t2163) * t2107;
t1822 = (t1828 * t2105 + t2111 * t2165) * t2105;
t1818 = -t1853 * pkin(1) + t2167 - 0.2e1 * t2197 + 0.2e1 * t2339;
t1817 = -t1851 * pkin(1) + t2168 - 0.2e1 * t2198 + 0.2e1 * t2338;
t1816 = -t1849 * pkin(1) + t2169 - 0.2e1 * t2199 + 0.2e1 * t2337;
t1815 = (pkin(1) * t2200 + t2154 - t2167) * t2109 - t2306 + t1857 * pkin(1);
t1814 = (pkin(1) * t2201 + t2153 - t2168) * t2107 - t2307 + t1856 * pkin(1);
t1813 = (pkin(1) * t2202 + t2152 - t2169) * t2105 - t2308 + t1855 * pkin(1);
t1812 = t2348 / 0.2e1 + t2154 * t2054 + (t1857 * t2391 + t2051 * t2252) * pkin(1) + (t2368 + t1999 / 0.2e1 - t2219) * g(2) + (t2225 + t2226) * g(1) + t2170;
t1811 = -t2351 / 0.2e1 + t2154 * t2048 + (t1857 * t2390 + t2045 * t2252) * pkin(1) + (t2225 - t2226) * g(2) + (-t1999 / 0.2e1 + t2368 - t2220) * g(1) + t2173;
t1810 = t2349 / 0.2e1 + t2153 * t2053 + (t1856 * t2391 + t2050 * t2254) * pkin(1) + (t2003 / 0.2e1 + t2367 - t2221) * g(2) + (t2227 + t2228) * g(1) + t2171;
t1809 = t2350 / 0.2e1 + t2152 * t2052 + (t1855 * t2391 + t2049 * t2256) * pkin(1) + (-t2223 + t2224) * g(2) + (t2229 + t2230) * g(1) + t2172;
t1808 = -t2353 / 0.2e1 + t2152 * t2046 + (t1855 * t2390 + t2043 * t2256) * pkin(1) + (t2229 - t2230) * g(2) + (t2223 + t2224) * g(1) + t2175;
t1807 = -t2352 / 0.2e1 + t2153 * t2047 + (t1856 * t2390 + t2044 * t2254) * pkin(1) + (t2227 - t2228) * g(2) + (-t2003 / 0.2e1 + t2367 - t2222) * g(1) + t2174;
t1806 = -t2149 * t2328 + t2146;
t1805 = -t2150 * t2329 + t2147;
t1804 = -t2151 * t2330 + t2148;
t1803 = -t2140 * t2109 + t2141 * t2115;
t1802 = -t2142 * t2107 + t2143 * t2113;
t1801 = -t2144 * t2105 + t2145 * t2111;
t1800 = t2109 * t2141 + t2140 * t2115;
t1799 = t2107 * t2143 + t2142 * t2113;
t1798 = t2105 * t2145 + t2144 * t2111;
t1797 = -qJ(3,1) * t2252 - pkin(1) * t2334 - (t2149 + 0.2e1 * t2179) * t2328 - t1899 + t2146;
t1796 = -qJ(3,2) * t2254 - pkin(1) * t2335 - (t2150 + 0.2e1 * t2180) * t2329 + t2147 - t1898;
t1795 = -qJ(3,3) * t2256 - pkin(1) * t2336 - (t2151 + 0.2e1 * t2181) * t2330 + t2148 - t1897;
t1794 = t2352 / 0.2e1 - t1805 * t2053 + (-t1856 * t2047 - t2053 * t2313) * qJ(3,2) + (t2380 + t2379) * g(2) + t2222 * g(1) + (t2276 * t1829 + t2044 * t2164) * pkin(1) + t2174;
t1793 = -t1804 * t2052 + t2353 / 0.2e1 + (-t1855 * t2046 - t2052 * t2314) * qJ(3,3) + (t2383 + t2382) * g(2) + (-t1985 / 0.4e1 + t2374) * g(1) + (t2277 * t1828 + t2043 * t2166) * pkin(1) + t2175;
t1792 = t1804 * t2046 - t2350 / 0.2e1 + (-t1855 * t2052 + t2046 * t2314) * qJ(3,3) + (t2373 + t2374) * g(2) + (t2382 - t1972 / 0.4e1) * g(1) + (t2049 * t2166 + (-t2043 - t2094) * t1828) * pkin(1) + t2172;
t1791 = t1806 * t2048 - t2348 / 0.2e1 + (-t1857 * t2054 + t2048 * t2312) * qJ(3,1) + t2219 * g(2) + (t2376 - t1980 / 0.4e1) * g(1) + (t2051 * t2162 + (-t2045 - t2094) * t1830) * pkin(1) + t2170;
t1790 = t2351 / 0.2e1 - t1806 * t2054 + (-t1857 * t2048 - t2054 * t2312) * qJ(3,1) + (t2377 + t2376) * g(2) + t2220 * g(1) + (t2275 * t1830 + t2045 * t2162) * pkin(1) + t2173;
t1789 = t1805 * t2047 - t2349 / 0.2e1 + (-t1856 * t2053 + t2047 * t2313) * qJ(3,2) + t2221 * g(2) + (t2379 - t1976 / 0.4e1) * g(1) + (t2050 * t2164 + (-t2044 - t2094) * t1829) * pkin(1) + t2171;
t1788 = t2093 * t2125 * t1830 + (-pkin(1) * t2325 - t1902 - t2154) * qJ(3,1) + (-0.2e1 * (t2340 / 0.2e1 - t2343 / 0.2e1) * t2116 + t2346 + 0.2e1 * (t2179 - t2266 / 0.2e1 - t2231 / 0.2e1) * t2328 - qJ(3,1) * t2312 - t2146) * t2069;
t1787 = t2092 * t2125 * t1829 + (-pkin(1) * t2326 - t1901 - t2153) * qJ(3,2) + (-0.2e1 * (t2341 / 0.2e1 - t2344 / 0.2e1) * t2114 + t2070 + 0.2e1 * (t2180 - t2267 / 0.2e1 - t2232 / 0.2e1) * t2329 - qJ(3,2) * t2313 - t2147) * t2068;
t1786 = t2091 * t2125 * t1828 + (-pkin(1) * t2327 - t1900 - t2152) * qJ(3,3) + (-0.2e1 * (t2342 / 0.2e1 - t2345 / 0.2e1) * t2112 + t2347 + 0.2e1 * (t2181 - t2268 / 0.2e1 - t2233 / 0.2e1) * t2330 - qJ(3,3) * t2314 - t2148) * t2067;
t1 = [(-t1828 * t2247 - t1829 * t2246 - t1830 * t2245) * MDP(1) + (-t1873 * t2402 - t1874 * t2401 - t1875 * t2240) * MDP(2) + (-t1873 * t2239 - t1874 * t2238 - t1875 * t2237) * MDP(3) + (-t1822 * t2247 - t1823 * t2246 - t1824 * t2245 - t2061 * t2157 - t2062 * t2156 - t2063 * t2155) * MDP(4) + (-t1834 * t2305 - t1835 * t2302 - t1836 * t2299 + t1873 * t2217 + t1874 * t2216 + t1875 * t2215) * MDP(5) + (-t1849 * t2247 - t1851 * t2246 - t1853 * t2245 - t2139) * MDP(6) + (-t1850 * t2247 - t1852 * t2246 - t1854 * t2245 + t2061 * t2264 + t2062 * t2262 + t2063 * t2260) * MDP(7) + (t1855 * t2305 + t1856 * t2302 + t1857 * t2299) * MDP(8) + (-t1873 * t2192 - t1874 * t2194 - t1875 * t2196 + t1876 * t2305 + t1878 * t2302 + t1880 * t2299) * MDP(9) + (t1873 * t2193 + t1874 * t2195 + t1875 * t2191 + t1877 * t2305 + t1879 * t2302 + t1881 * t2299) * MDP(10) + (t1807 * t2302 + t1808 * t2305 + t1811 * t2299 + (-t1790 * t2319 + t1800 * t1868) * t2088 + (-t1794 * t2320 + t1799 * t1866) * t2085 + (-t1793 * t2321 + t1798 * t1864) * t2082) * MDP(11) + (t1809 * t2305 + t1810 * t2302 + t1812 * t2299 + (-t1791 * t2319 + t1803 * t1868) * t2088 + (-t1789 * t2320 + t1802 * t1866) * t2085 + (-t1792 * t2321 + t1801 * t1864) * t2082) * MDP(12) + (t2139 * pkin(1) - t1816 * t2247 - t1817 * t2246 - t1818 * t2245 - t1864 * t2255 - t1866 * t2253 - t1868 * t2251) * MDP(13) + ((-t1788 * t2319 + t1797 * t1868) * t2088 + (-t1787 * t2320 + t1796 * t1866) * t2085 + (-t1786 * t2321 + t1795 * t1864) * t2082 + (t1813 * t2305 + t1814 * t2302 + t1815 * t2299) * pkin(1)) * MDP(14) + (t2104 - g(1)) * MDP(15); (-t1828 * t2250 - t1829 * t2249 - t1830 * t2248) * MDP(1) + (-t1870 * t2402 - t1871 * t2401 - t1872 * t2240) * MDP(2) + (-t1870 * t2239 - t1871 * t2238 - t1872 * t2237) * MDP(3) + (-t1822 * t2250 - t1823 * t2249 - t1824 * t2248 - t2064 * t2157 - t2065 * t2156 - t2066 * t2155) * MDP(4) + (-t1834 * t2304 - t1835 * t2301 - t1836 * t2298 + t1870 * t2217 + t1871 * t2216 + t1872 * t2215) * MDP(5) + (-t1849 * t2250 - t1851 * t2249 - t1853 * t2248 - t2138) * MDP(6) + (-t1850 * t2250 - t1852 * t2249 - t1854 * t2248 + t2064 * t2264 + t2065 * t2262 + t2066 * t2260) * MDP(7) + (t1855 * t2304 + t1856 * t2301 + t1857 * t2298) * MDP(8) + (-t1870 * t2192 - t1871 * t2194 - t1872 * t2196 + t1876 * t2304 + t1878 * t2301 + t1880 * t2298) * MDP(9) + (t1870 * t2193 + t1871 * t2195 + t1872 * t2191 + t1877 * t2304 + t1879 * t2301 + t1881 * t2298) * MDP(10) + (t1807 * t2301 + t1808 * t2304 + t1811 * t2298 + (-t1790 * t2322 + t1800 * t1869) * t2088 + (-t1794 * t2323 + t1799 * t1867) * t2085 + (-t1793 * t2324 + t1798 * t1865) * t2082) * MDP(11) + (t1809 * t2304 + t1810 * t2301 + t1812 * t2298 + (-t1791 * t2322 + t1803 * t1869) * t2088 + (-t1789 * t2323 + t1802 * t1867) * t2085 + (-t1792 * t2324 + t1801 * t1865) * t2082) * MDP(12) + (t2138 * pkin(1) - t1816 * t2250 - t1817 * t2249 - t1818 * t2248 - t1865 * t2255 - t1867 * t2253 - t1869 * t2251) * MDP(13) + ((-t1788 * t2322 + t1797 * t1869) * t2088 + (-t1787 * t2323 + t1796 * t1867) * t2085 + (-t1786 * t2324 + t1795 * t1865) * t2082 + (t1813 * t2304 + t1814 * t2301 + t1815 * t2298) * pkin(1)) * MDP(14) + (t2103 - g(2)) * MDP(15); (-t1888 * t2255 - t1889 * t2253 - t1890 * t2251) * MDP(13) + (t2102 - g(3)) * MDP(15) + ((t1800 * MDP(11) + t1803 * MDP(12) + t1797 * MDP(14)) * t1890 + (MDP(9) * t2318 + t1830 * MDP(1) + t1790 * MDP(11) + t1791 * MDP(12) + t1818 * MDP(13) + t1788 * MDP(14) + t1902 * MDP(3) + t1824 * MDP(4) + t1853 * MDP(6) + t1854 * MDP(7) + (-MDP(10) * t2109 + MDP(2)) * t1899) * t2116) * t2088 + ((t1799 * MDP(11) + t1802 * MDP(12) + t1796 * MDP(14)) * t1889 + (t1829 * MDP(1) + t1794 * MDP(11) + t1789 * MDP(12) + t1817 * MDP(13) + t1787 * MDP(14) + t1901 * MDP(3) + t1823 * MDP(4) + t1851 * MDP(6) + t1852 * MDP(7) + (-MDP(10) * t2107 + MDP(9) * t2113 + MDP(2)) * t1898) * t2114) * t2085 + ((t1798 * MDP(11) + t1801 * MDP(12) + t1795 * MDP(14)) * t1888 + (t1828 * MDP(1) + t1793 * MDP(11) + t1792 * MDP(12) + t1816 * MDP(13) + t1786 * MDP(14) + t1900 * MDP(3) + t1822 * MDP(4) + t1849 * MDP(6) + t1850 * MDP(7) + (-MDP(10) * t2105 + MDP(9) * t2111 + MDP(2)) * t1897) * t2112) * t2082 + 0.2e1 * (t1819 * t2082 * t2112 + t1820 * t2085 * t2114 + t1821 * t2088 * t2116) * MDP(5);];
tauX  = t1;
