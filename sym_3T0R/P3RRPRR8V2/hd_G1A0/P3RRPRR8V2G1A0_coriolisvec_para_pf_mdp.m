% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:12
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:12:38
% EndTime: 2022-11-07 13:12:55
% DurationCPUTime: 18.10s
% Computational Cost: add. (224724->710), mult. (267316->1144), div. (21882->18), fcn. (116526->140), ass. (0->537)
t3395 = (pkin(3) ^ 2);
t3397 = (pkin(2) ^ 2);
t3713 = 3 * t3397 + 6 * t3395;
t3712 = 6 * t3397 + 3 * t3395;
t3372 = cos(qJ(2,3));
t3324 = t3372 * pkin(2);
t3338 = qJ(2,3) + pkin(7);
t3299 = cos(t3338);
t3668 = pkin(3) * t3299;
t3233 = t3324 + t3668;
t3374 = cos(qJ(2,2));
t3325 = t3374 * pkin(2);
t3341 = qJ(2,2) + pkin(7);
t3302 = cos(t3341);
t3667 = pkin(3) * t3302;
t3234 = t3325 + t3667;
t3376 = cos(qJ(2,1));
t3326 = t3376 * pkin(2);
t3344 = qJ(2,1) + pkin(7);
t3305 = cos(t3344);
t3666 = pkin(3) * t3305;
t3235 = t3326 + t3666;
t3656 = 0.2e1 * pkin(3);
t3378 = xDP(3);
t3533 = 2 * t3378;
t3278 = t3324 + pkin(1);
t3279 = t3325 + pkin(1);
t3280 = t3326 + pkin(1);
t3329 = t3395 + t3397;
t3359 = cos(pkin(7));
t3665 = pkin(3) * t3359;
t3543 = pkin(2) * t3665;
t3711 = -0.8e1 * t3543 - (4 * t3329);
t3382 = 0.2e1 * pkin(7);
t3391 = 0.2e1 * qJ(2,1);
t3342 = t3391 + t3382;
t3710 = cos(t3342) * t3395 + cos(t3391) * t3397;
t3388 = 0.2e1 * qJ(2,2);
t3339 = t3388 + t3382;
t3709 = cos(t3339) * t3395 + cos(t3388) * t3397;
t3385 = 0.2e1 * qJ(2,3);
t3336 = t3385 + t3382;
t3708 = cos(t3336) * t3395 + cos(t3385) * t3397;
t3288 = sin(t3342);
t3347 = sin(t3391);
t3707 = t3288 * t3395 + t3347 * t3397;
t3282 = sin(t3336);
t3345 = sin(t3385);
t3706 = t3282 * t3395 + t3345 * t3397;
t3705 = -0.2e1 * pkin(1);
t3704 = 0.4e1 * pkin(1);
t3703 = 0.2e1 * pkin(2);
t3702 = 2 * pkin(5);
t3701 = 2 * MDP(5);
t3700 = -2 * MDP(9);
t3212 = 0.1e1 / t3233;
t3216 = 0.1e1 / t3234;
t3220 = 0.1e1 / t3235;
t3401 = t3233 ^ 2;
t3213 = 0.1e1 / t3401;
t3404 = t3234 ^ 2;
t3217 = 0.1e1 / t3404;
t3407 = t3235 ^ 2;
t3221 = 0.1e1 / t3407;
t3699 = -2 * MDP(10);
t3360 = legFrame(3,3);
t3312 = sin(t3360);
t3315 = cos(t3360);
t3367 = sin(qJ(1,3));
t3373 = cos(qJ(1,3));
t3199 = t3312 * t3373 + t3315 * t3367;
t3200 = -t3312 * t3367 + t3315 * t3373;
t3277 = pkin(2) + t3665;
t3363 = qJ(3,3) + pkin(5);
t3330 = -pkin(6) - t3363;
t3318 = 1 / t3330;
t3366 = sin(qJ(2,3));
t3379 = xDP(2);
t3380 = xDP(1);
t3358 = sin(pkin(7));
t3584 = t3358 * t3372;
t3587 = t3358 * t3366;
t3175 = (t3200 * t3380 + t3199 * t3379 + t3378 * (pkin(3) * t3584 + t3277 * t3366) / (-pkin(3) * t3587 + t3277 * t3372)) * t3318;
t3167 = pkin(2) * t3175;
t3623 = t3212 * t3378;
t3504 = t3366 * t3623;
t3450 = -t3504 / 0.2e1;
t3354 = t3372 ^ 2;
t3683 = 0.2e1 * t3354;
t3557 = pkin(2) * t3683;
t3674 = pkin(1) * t3372;
t3139 = t3363 * t3450 + t3167 - (t3557 + t3674) * t3175;
t3640 = t3175 * t3366;
t3160 = pkin(1) * t3640;
t3483 = t3623 / 0.2e1;
t3190 = t3363 * t3483;
t3524 = pkin(2) * t3640;
t3142 = (t3190 - 0.2e1 * t3524) * t3372 - t3160;
t3695 = -0.2e1 * t3139 * t3358 - 0.2e1 * t3142 * t3359;
t3694 = -0.2e1 * t3139 * t3359 + 0.2e1 * t3142 * t3358;
t3361 = legFrame(2,3);
t3313 = sin(t3361);
t3316 = cos(t3361);
t3369 = sin(qJ(1,2));
t3375 = cos(qJ(1,2));
t3201 = t3313 * t3375 + t3316 * t3369;
t3202 = -t3313 * t3369 + t3316 * t3375;
t3364 = qJ(3,2) + pkin(5);
t3331 = -pkin(6) - t3364;
t3320 = 1 / t3331;
t3368 = sin(qJ(2,2));
t3583 = t3358 * t3374;
t3586 = t3358 * t3368;
t3176 = (t3202 * t3380 + t3201 * t3379 + t3378 * (pkin(3) * t3583 + t3277 * t3368) / (-pkin(3) * t3586 + t3277 * t3374)) * t3320;
t3168 = pkin(2) * t3176;
t3615 = t3216 * t3378;
t3498 = t3368 * t3615;
t3449 = -t3498 / 0.2e1;
t3355 = t3374 ^ 2;
t3682 = 0.2e1 * t3355;
t3556 = pkin(2) * t3682;
t3673 = pkin(1) * t3374;
t3140 = t3364 * t3449 + t3168 - (t3556 + t3673) * t3176;
t3635 = t3176 * t3368;
t3161 = pkin(1) * t3635;
t3482 = t3615 / 0.2e1;
t3191 = t3364 * t3482;
t3523 = pkin(2) * t3635;
t3143 = (t3191 - 0.2e1 * t3523) * t3374 - t3161;
t3693 = -0.2e1 * t3140 * t3358 - 0.2e1 * t3143 * t3359;
t3692 = -0.2e1 * t3140 * t3359 + 0.2e1 * t3143 * t3358;
t3362 = legFrame(1,3);
t3314 = sin(t3362);
t3317 = cos(t3362);
t3371 = sin(qJ(1,1));
t3377 = cos(qJ(1,1));
t3203 = t3314 * t3377 + t3317 * t3371;
t3204 = -t3314 * t3371 + t3317 * t3377;
t3365 = qJ(3,1) + pkin(5);
t3332 = -pkin(6) - t3365;
t3322 = 1 / t3332;
t3370 = sin(qJ(2,1));
t3582 = t3358 * t3376;
t3585 = t3358 * t3370;
t3177 = (t3204 * t3380 + t3203 * t3379 + t3378 * (pkin(3) * t3582 + t3277 * t3370) / (-pkin(3) * t3585 + t3277 * t3376)) * t3322;
t3169 = pkin(2) * t3177;
t3607 = t3220 * t3378;
t3492 = t3370 * t3607;
t3448 = -t3492 / 0.2e1;
t3356 = t3376 ^ 2;
t3681 = 0.2e1 * t3356;
t3555 = pkin(2) * t3681;
t3672 = pkin(1) * t3376;
t3141 = t3365 * t3448 + t3169 - (t3555 + t3672) * t3177;
t3630 = t3177 * t3370;
t3162 = pkin(1) * t3630;
t3481 = t3607 / 0.2e1;
t3192 = t3365 * t3481;
t3522 = pkin(2) * t3630;
t3144 = (t3192 - 0.2e1 * t3522) * t3376 - t3162;
t3691 = -0.2e1 * t3141 * t3358 - 0.2e1 * t3144 * t3359;
t3690 = -0.2e1 * t3141 * t3359 + 0.2e1 * t3144 * t3358;
t3687 = -0.4e1 * pkin(1) * (t3543 + t3397 / 0.2e1 + t3395 / 0.2e1);
t3396 = pkin(2) * t3397;
t3669 = pkin(2) * t3395;
t3686 = -0.2e1 * t3396 - 0.4e1 * t3669;
t3684 = 2 * t3329;
t3680 = 4 * t3378;
t3679 = pkin(2) * pkin(3);
t3678 = t3175 / 0.2e1;
t3677 = t3176 / 0.2e1;
t3676 = t3177 / 0.2e1;
t3290 = sin(t3344);
t3238 = pkin(2) * t3370 + pkin(3) * t3290;
t3343 = t3391 + pkin(7);
t3289 = sin(t3343);
t3544 = t3289 * t3679;
t3436 = 0.2e1 * t3544 + t3707;
t3657 = 0.2e1 * pkin(1);
t3189 = t3238 * t3657 + t3436;
t3675 = -t3189 / 0.2e1;
t3671 = pkin(1) * t3378;
t3357 = t3378 ^ 2;
t3670 = pkin(2) * t3357;
t3664 = pkin(3) * t3397;
t3663 = pkin(5) * t3357;
t3639 = t3175 * t3372;
t3163 = pkin(2) * t3639;
t3170 = pkin(1) * t3175;
t3214 = t3212 * t3213;
t3444 = -t3329 - t3708;
t3306 = t3360 + qJ(1,3);
t3258 = pkin(7) + t3306;
t3240 = t3385 + t3258;
t3259 = -pkin(7) + t3306;
t3386 = -0.2e1 * qJ(2,3);
t3241 = t3386 + t3259;
t3246 = qJ(2,3) + t3258;
t3247 = -qJ(2,3) + t3259;
t3267 = t3385 + t3306;
t3248 = t3382 + t3267;
t3268 = t3386 + t3306;
t3383 = -0.2e1 * pkin(7);
t3249 = t3383 + t3268;
t3265 = qJ(2,3) + t3306;
t3266 = -qJ(2,3) + t3306;
t3337 = t3385 + pkin(7);
t3283 = sin(t3337);
t3284 = sin(t3338);
t3530 = t3395 * t3533;
t3531 = 0.2e1 * t3380;
t3532 = 0.2e1 * t3379;
t3328 = pkin(1) * t3380;
t3536 = 0.2e1 * t3330 * t3379 + 0.2e1 * t3328;
t3327 = pkin(1) * t3379;
t3539 = -0.2e1 * t3330 * t3380 + 0.2e1 * t3327;
t3558 = 0.4e1 * t3671;
t3130 = t3282 * t3530 + ((t3345 * t3703 + t3366 * t3704) * t3378 + (cos(t3265) + cos(t3266)) * t3536 + (sin(t3265) + sin(t3266)) * t3539) * pkin(2) + (cos(t3306) * t3684 + (cos(t3268) + cos(t3267)) * t3397 + (cos(t3248) + cos(t3249)) * t3395) * t3380 + (sin(t3306) * t3684 + (sin(t3267) + sin(t3268)) * t3397 + (sin(t3248) + sin(t3249)) * t3395) * t3379 + (t3284 * t3558 + (cos(t3246) + cos(t3247)) * t3536 + (sin(t3246) + sin(t3247)) * t3539 + (t3283 * t3680 + (cos(t3258) + cos(t3259) + cos(t3240) + cos(t3241)) * t3531 + (sin(t3258) + sin(t3259) + sin(t3240) + sin(t3241)) * t3532) * pkin(2)) * pkin(3);
t3487 = t3130 * t3318 / 0.4e1;
t3453 = t3212 * t3487;
t3410 = t3330 ^ 2;
t3646 = t3130 / t3410;
t3517 = t3213 * t3646;
t3528 = pkin(2) * t3656;
t3297 = cos(t3337);
t3562 = t3297 + t3359;
t3599 = (0.2e1 * t3543 + t3329) * t3357;
t3641 = t3175 * t3212;
t3091 = -(-t3175 * t3668 - t3163) * t3517 / 0.4e1 - (t3214 * t3599 - ((-t3562 * t3528 + t3444) * t3678 + t3233 * (-t3170 + t3453)) * t3641) * t3318;
t3662 = t3091 * pkin(1);
t3634 = t3176 * t3374;
t3164 = pkin(2) * t3634;
t3171 = pkin(1) * t3176;
t3218 = t3216 * t3217;
t3443 = -t3329 - t3709;
t3307 = t3361 + qJ(1,2);
t3262 = pkin(7) + t3307;
t3244 = t3388 + t3262;
t3263 = -pkin(7) + t3307;
t3389 = -0.2e1 * qJ(2,2);
t3245 = t3389 + t3263;
t3271 = t3388 + t3307;
t3250 = t3382 + t3271;
t3251 = qJ(2,2) + t3262;
t3252 = -qJ(2,2) + t3263;
t3272 = t3389 + t3307;
t3253 = t3383 + t3272;
t3269 = qJ(2,2) + t3307;
t3270 = -qJ(2,2) + t3307;
t3340 = t3388 + pkin(7);
t3286 = sin(t3340);
t3287 = sin(t3341);
t3346 = sin(t3388);
t3572 = t3395 * sin(t3339);
t3529 = 0.2e1 * t3572;
t3535 = 0.2e1 * t3331 * t3379 + 0.2e1 * t3328;
t3538 = -0.2e1 * t3331 * t3380 + 0.2e1 * t3327;
t3132 = t3378 * t3529 + ((t3346 * t3703 + t3368 * t3704) * t3378 + (cos(t3269) + cos(t3270)) * t3535 + (sin(t3269) + sin(t3270)) * t3538) * pkin(2) + (cos(t3307) * t3684 + (cos(t3271) + cos(t3272)) * t3397 + (cos(t3250) + cos(t3253)) * t3395) * t3380 + (sin(t3307) * t3684 + (sin(t3271) + sin(t3272)) * t3397 + (sin(t3250) + sin(t3253)) * t3395) * t3379 + (t3287 * t3558 + (cos(t3251) + cos(t3252)) * t3535 + (sin(t3251) + sin(t3252)) * t3538 + (t3286 * t3680 + (cos(t3244) + cos(t3245) + cos(t3262) + cos(t3263)) * t3531 + (sin(t3244) + sin(t3245) + sin(t3262) + sin(t3263)) * t3532) * pkin(2)) * pkin(3);
t3485 = t3132 * t3320 / 0.4e1;
t3451 = t3216 * t3485;
t3411 = t3331 ^ 2;
t3644 = t3132 / t3411;
t3513 = t3217 * t3644;
t3301 = cos(t3340);
t3561 = t3301 + t3359;
t3636 = t3176 * t3216;
t3092 = -(-t3176 * t3667 - t3164) * t3513 / 0.4e1 - (t3218 * t3599 - ((-t3561 * t3528 + t3443) * t3677 + t3234 * (-t3171 + t3451)) * t3636) * t3320;
t3661 = t3092 * pkin(1);
t3629 = t3177 * t3376;
t3165 = pkin(2) * t3629;
t3166 = t3177 * pkin(1);
t3222 = t3220 * t3221;
t3442 = -t3329 - t3710;
t3308 = t3362 + qJ(1,1);
t3260 = pkin(7) + t3308;
t3242 = t3391 + t3260;
t3261 = -pkin(7) + t3308;
t3392 = -0.2e1 * qJ(2,1);
t3243 = t3392 + t3261;
t3254 = qJ(2,1) + t3260;
t3255 = -qJ(2,1) + t3261;
t3275 = t3391 + t3308;
t3256 = t3382 + t3275;
t3276 = t3392 + t3308;
t3257 = t3383 + t3276;
t3273 = qJ(2,1) + t3308;
t3274 = -qJ(2,1) + t3308;
t3534 = 0.2e1 * t3332 * t3379 + 0.2e1 * t3328;
t3537 = -0.2e1 * t3332 * t3380 + 0.2e1 * t3327;
t3131 = t3288 * t3530 + ((t3347 * t3703 + t3370 * t3704) * t3378 + (cos(t3273) + cos(t3274)) * t3534 + (sin(t3273) + sin(t3274)) * t3537) * pkin(2) + (cos(t3308) * t3684 + (cos(t3275) + cos(t3276)) * t3397 + (cos(t3256) + cos(t3257)) * t3395) * t3380 + (sin(t3308) * t3684 + (sin(t3275) + sin(t3276)) * t3397 + (sin(t3256) + sin(t3257)) * t3395) * t3379 + (t3290 * t3558 + (cos(t3254) + cos(t3255)) * t3534 + (sin(t3254) + sin(t3255)) * t3537 + (t3289 * t3680 + (cos(t3243) + cos(t3260) + cos(t3261) + cos(t3242)) * t3531 + (sin(t3243) + sin(t3260) + sin(t3261) + sin(t3242)) * t3532) * pkin(2)) * pkin(3);
t3486 = t3131 * t3322 / 0.4e1;
t3452 = t3220 * t3486;
t3412 = t3332 ^ 2;
t3645 = t3131 / t3412;
t3515 = t3221 * t3645;
t3304 = cos(t3343);
t3560 = t3304 + t3359;
t3631 = t3177 * t3220;
t3093 = -(-t3177 * t3666 - t3165) * t3515 / 0.4e1 - (t3222 * t3599 - ((-t3560 * t3528 + t3442) * t3676 + t3235 * (-t3166 + t3452)) * t3631) * t3322;
t3660 = t3093 * pkin(1);
t3659 = pkin(1) * t3656;
t3658 = -0.8e1 * t3679;
t3293 = cos(-pkin(7) + qJ(2,3));
t3298 = cos(qJ(2,3) + t3382);
t3381 = 0.3e1 * pkin(7);
t3384 = 0.3e1 * qJ(2,3);
t3394 = pkin(3) * t3395;
t3398 = pkin(1) ^ 2;
t3626 = t3212 * t3318;
t3508 = t3175 * t3626;
t3516 = t3130 * t3626;
t3545 = t3283 * t3679;
t3552 = -0.3e1 * t3664;
t3554 = -0.3e1 * t3669;
t3465 = (-0.4e1 * t3233 * (pkin(1) * t3453 - (t3398 + t3410) * t3175) + (-0.4e1 * t3545 - 0.2e1 * t3706) * t3330 * t3623 + (t3394 * cos(t3384 + t3381) + t3668 * t3712 + t3396 * cos(t3384) + t3324 * t3713 - (cos(t3382 + t3384) + t3298) * t3554 - (cos(t3384 + pkin(7)) + t3293) * t3552) * t3175 + (t3297 * t3658 - 0.4e1 * t3708 + t3711) * (-t3170 + t3516 / 0.8e1)) * t3508;
t3438 = 0.2e1 * t3545 + t3706;
t3469 = -0.2e1 * t3394 - 0.4e1 * t3664;
t3551 = -0.2e1 * t3664;
t3553 = -0.2e1 * t3669;
t3511 = (t3438 * t3330 * t3175 + (t3293 * t3551 + t3298 * t3553 + t3469 * t3299 + t3372 * t3686 + t3687) * t3623) * t3318 * t3378;
t3100 = (t3299 * t3659 + (t3562 * t3656 + 0.2e1 * t3674) * pkin(2) - t3444) * t3175;
t3520 = t3100 * t3646;
t3070 = t3662 + t3465 / 0.8e1 + (-t3511 / 0.4e1 - t3520 / 0.16e2) * t3213;
t3655 = t3070 * t3372;
t3291 = cos(t3382 + qJ(2,2));
t3294 = cos(-pkin(7) + qJ(2,2));
t3387 = 0.3e1 * qJ(2,2);
t3618 = t3216 * t3320;
t3507 = t3176 * t3618;
t3512 = t3132 * t3618;
t3546 = t3286 * t3679;
t3592 = t3346 * t3397;
t3464 = (-(t3529 + 0.4e1 * t3546 + 0.2e1 * t3592) * t3331 * t3615 - 0.4e1 * t3234 * (pkin(1) * t3451 - (t3398 + t3411) * t3176) + (t3394 * cos(t3387 + t3381) + t3667 * t3712 + t3396 * cos(t3387) + t3325 * t3713 - (cos(t3382 + t3387) + t3291) * t3554 - (cos(t3387 + pkin(7)) + t3294) * t3552) * t3176 + (t3301 * t3658 - 0.4e1 * t3709 + t3711) * (-t3171 + t3512 / 0.8e1)) * t3507;
t3437 = 0.2e1 * t3546 + t3572 + t3592;
t3510 = (t3437 * t3331 * t3176 + (t3291 * t3553 + t3294 * t3551 + t3469 * t3302 + t3374 * t3686 + t3687) * t3615) * t3320 * t3378;
t3101 = (t3302 * t3659 + (t3561 * t3656 + 0.2e1 * t3673) * pkin(2) - t3443) * t3176;
t3519 = t3101 * t3644;
t3071 = t3661 + t3464 / 0.8e1 + (-t3510 / 0.4e1 - t3519 / 0.16e2) * t3217;
t3654 = t3071 * t3374;
t3292 = cos(t3382 + qJ(2,1));
t3295 = cos(-pkin(7) + qJ(2,1));
t3390 = 0.3e1 * qJ(2,1);
t3610 = t3220 * t3322;
t3506 = t3177 * t3610;
t3514 = t3131 * t3610;
t3463 = (-0.4e1 * t3235 * (pkin(1) * t3452 - (t3398 + t3412) * t3177) + (-0.4e1 * t3544 - 0.2e1 * t3707) * t3332 * t3607 + (t3394 * cos(t3381 + t3390) + t3666 * t3712 + t3396 * cos(t3390) + t3326 * t3713 - (cos(t3390 + t3382) + t3292) * t3554 - (t3295 + cos(pkin(7) + t3390)) * t3552) * t3177 + (t3304 * t3658 - 0.4e1 * t3710 + t3711) * (-t3166 + t3514 / 0.8e1)) * t3506;
t3509 = (t3436 * t3332 * t3177 + (t3292 * t3553 + t3295 * t3551 + t3469 * t3305 + t3376 * t3686 + t3687) * t3607) * t3322 * t3378;
t3102 = (t3305 * t3659 + (t3560 * t3656 + 0.2e1 * t3672) * pkin(2) - t3442) * t3177;
t3518 = t3102 * t3645;
t3072 = t3660 + t3463 / 0.8e1 + (-t3509 / 0.4e1 - t3518 / 0.16e2) * t3221;
t3653 = t3072 * t3376;
t3652 = t3091 * t3363;
t3651 = t3091 * t3366;
t3650 = t3092 * t3364;
t3649 = t3092 * t3368;
t3648 = t3093 * t3365;
t3647 = t3093 * t3370;
t3643 = t3175 * (pkin(2) * t3504 + t3363 * t3678);
t3236 = pkin(2) * t3366 + pkin(3) * t3284;
t3187 = t3236 * t3657 + t3438;
t3642 = t3175 * t3187;
t3638 = t3176 * (pkin(2) * t3498 + t3364 * t3677);
t3237 = pkin(2) * t3368 + pkin(3) * t3287;
t3188 = t3237 * t3657 + t3437;
t3637 = t3176 * t3188;
t3633 = t3177 * (pkin(2) * t3492 + t3365 * t3676);
t3632 = t3177 * t3189;
t3628 = t3187 * t3318;
t3627 = t3188 * t3320;
t3625 = t3212 * t3366;
t3624 = t3212 * t3372;
t3622 = t3213 * t3318;
t3621 = t3213 * t3372;
t3620 = t3214 * t3236;
t3215 = 0.1e1 / t3401 ^ 2;
t3619 = t3215 * t3236 ^ 2;
t3617 = t3216 * t3368;
t3616 = t3216 * t3374;
t3614 = t3217 * t3320;
t3613 = t3217 * t3374;
t3612 = t3218 * t3237;
t3219 = 0.1e1 / t3404 ^ 2;
t3611 = t3219 * t3237 ^ 2;
t3609 = t3220 * t3370;
t3608 = t3220 * t3376;
t3606 = t3221 * t3322;
t3605 = t3221 * t3376;
t3604 = t3222 * t3238;
t3223 = 0.1e1 / t3407 ^ 2;
t3603 = t3223 * t3238 ^ 2;
t3602 = t3236 * t3318;
t3601 = t3237 * t3320;
t3600 = t3238 * t3322;
t3581 = t3359 * t3366;
t3580 = t3359 * t3368;
t3579 = t3359 * t3370;
t3578 = t3363 * t3372;
t3577 = t3364 * t3374;
t3576 = t3365 * t3376;
t3575 = t3366 * t3372;
t3574 = t3368 * t3374;
t3573 = t3370 * t3376;
t3502 = t3357 * t3620;
t3461 = t3363 * t3502;
t3447 = t3366 * t3461;
t3478 = -t3465 / 0.4e1 + t3213 * t3511 / 0.2e1 + t3100 * t3517 / 0.8e1;
t3547 = pkin(2) * t3671;
t3559 = (pkin(5) ^ 2) + t3398;
t3571 = -pkin(1) * t3478 + (t3354 * t3397 + ((t3702 + qJ(3,3)) * qJ(3,3)) + t3559) * t3091 + (-t3447 + 0.2e1 * t3655) * pkin(2) - 0.2e1 * (t3190 - t3524) * t3623 * t3324 + 0.2e1 * (t3363 * t3487 + t3366 * t3547) * t3641;
t3496 = t3357 * t3612;
t3459 = t3364 * t3496;
t3445 = t3368 * t3459;
t3477 = -t3464 / 0.4e1 + t3217 * t3510 / 0.2e1 + t3101 * t3513 / 0.8e1;
t3570 = -pkin(1) * t3477 + (t3355 * t3397 + ((t3702 + qJ(3,2)) * qJ(3,2)) + t3559) * t3092 + (-t3445 + 0.2e1 * t3654) * pkin(2) - 0.2e1 * (t3191 - t3523) * t3615 * t3325 + 0.2e1 * (t3364 * t3485 + t3368 * t3547) * t3636;
t3490 = t3357 * t3604;
t3457 = t3365 * t3490;
t3446 = t3370 * t3457;
t3476 = -t3463 / 0.4e1 + t3221 * t3509 / 0.2e1 + t3102 * t3515 / 0.8e1;
t3569 = -pkin(1) * t3476 + (t3356 * t3397 + ((t3702 + qJ(3,1)) * qJ(3,1)) + t3559) * t3093 + (-t3446 + 0.2e1 * t3653) * pkin(2) - 0.2e1 * (t3192 - t3522) * t3607 * t3326 + 0.2e1 * (t3365 * t3486 + t3370 * t3547) * t3631;
t3501 = t3366 * t3620;
t3462 = t3357 * t3501;
t3568 = -pkin(2) * t3462 - t3621 * t3670 + t3130 * t3508 / 0.2e1 + 0.2e1 * t3652;
t3495 = t3368 * t3612;
t3460 = t3357 * t3495;
t3567 = -pkin(2) * t3460 - t3613 * t3670 + t3132 * t3507 / 0.2e1 + 0.2e1 * t3650;
t3489 = t3370 * t3604;
t3458 = t3357 * t3489;
t3566 = -pkin(2) * t3458 - t3605 * t3670 + t3131 * t3506 / 0.2e1 + 0.2e1 * t3648;
t3111 = -t3166 + t3514 / 0.2e1;
t3114 = -t3170 + t3516 / 0.2e1;
t3117 = -t3171 + t3512 / 0.2e1;
t3550 = 0.2e1 * t3662;
t3549 = 0.2e1 * t3661;
t3548 = 0.2e1 * t3660;
t3542 = 0.2e1 * t3175;
t3541 = 0.2e1 * t3176;
t3540 = 0.2e1 * t3177;
t3527 = pkin(2) * t3651;
t3526 = pkin(2) * t3649;
t3525 = pkin(2) * t3647;
t3505 = t3212 * t3602;
t3503 = t3213 * t3602;
t3500 = t3372 * t3620;
t3499 = t3216 * t3601;
t3497 = t3217 * t3601;
t3494 = t3374 * t3612;
t3493 = t3220 * t3600;
t3491 = t3221 * t3600;
t3488 = t3376 * t3604;
t3484 = t3322 * t3675;
t3468 = pkin(2) * t3502;
t3467 = pkin(2) * t3496;
t3466 = pkin(2) * t3490;
t3456 = t3575 * t3602;
t3455 = t3574 * t3601;
t3454 = t3573 * t3600;
t3441 = t3111 * t3376 - t3177 * t3555 + t3169;
t3440 = t3114 * t3372 - t3175 * t3557 + t3167;
t3439 = t3117 * t3374 - t3176 * t3556 + t3168;
t3205 = t3359 * t3372 - t3587;
t3208 = t3581 + t3584;
t3435 = (MDP(11) * t3208 + MDP(12) * t3205) * t3542;
t3206 = t3359 * t3374 - t3586;
t3209 = t3580 + t3583;
t3434 = (MDP(11) * t3209 + MDP(12) * t3206) * t3541;
t3207 = -t3359 * t3376 + t3585;
t3210 = t3579 + t3582;
t3433 = (MDP(11) * t3210 - MDP(12) * t3207) * t3540;
t3432 = t3091 * t3557 - t3447;
t3431 = t3092 * t3556 - t3445;
t3430 = t3093 * t3555 - t3446;
t3429 = t3091 * t3625 + t3092 * t3617 + t3093 * t3609;
t3428 = t3091 * t3624 + t3092 * t3616 + t3093 * t3608;
t3427 = (-t3461 - 0.2e1 * t3527) * t3372 - 0.2e1 * t3070 * t3366;
t3426 = (-t3459 - 0.2e1 * t3526) * t3374 - 0.2e1 * t3368 * t3071;
t3425 = (-t3457 - 0.2e1 * t3525) * t3376 - 0.2e1 * t3072 * t3370;
t3067 = -t3278 * t3091 + t3478;
t3172 = t3175 ^ 2;
t3424 = -t3172 * MDP(13) + (t3067 - 0.2e1 * t3643) * MDP(14) + (-MDP(11) * t3205 + MDP(12) * t3208) * t3091;
t3068 = -t3279 * t3092 + t3477;
t3173 = t3176 ^ 2;
t3423 = -t3173 * MDP(13) + (t3068 - 0.2e1 * t3638) * MDP(14) + (-MDP(11) * t3206 + MDP(12) * t3209) * t3092;
t3069 = -t3280 * t3093 + t3476;
t3174 = t3177 ^ 2;
t3422 = -t3174 * MDP(13) + (t3069 - 0.2e1 * t3633) * MDP(14) + (MDP(11) * t3207 + MDP(12) * t3210) * t3093;
t3421 = t3318 * ((t3501 + t3621) * MDP(6) + (-t3213 * t3366 + t3500) * MDP(7));
t3420 = t3320 * ((t3495 + t3613) * MDP(6) + (-t3217 * t3368 + t3494) * MDP(7));
t3419 = t3322 * ((t3489 + t3605) * MDP(6) + (-t3221 * t3370 + t3488) * MDP(7));
t3145 = t3372 * pkin(5) * t3483 - t3160;
t3148 = -pkin(1) * t3639 + pkin(5) * t3450;
t3309 = t3683 - 0.1e1;
t3418 = t3148 * t3699 + MDP(11) * t3695 + MDP(12) * t3694 + t3145 * t3700 - (MDP(4) * t3575 + MDP(5) * t3309) * t3542;
t3146 = t3374 * pkin(5) * t3482 - t3161;
t3149 = -pkin(1) * t3634 + pkin(5) * t3449;
t3310 = t3682 - 0.1e1;
t3417 = t3149 * t3699 + MDP(11) * t3693 + MDP(12) * t3692 + t3146 * t3700 - (MDP(4) * t3574 + MDP(5) * t3310) * t3541;
t3147 = t3376 * pkin(5) * t3481 - t3162;
t3150 = -pkin(1) * t3629 + pkin(5) * t3448;
t3311 = t3681 - 0.1e1;
t3416 = t3150 * t3699 + MDP(11) * t3691 + MDP(12) * t3690 + t3147 * t3700 - (MDP(4) * t3573 + MDP(5) * t3311) * t3540;
t3058 = ((t3550 + t3465 / 0.4e1 + (-t3511 / 0.2e1 - t3520 / 0.8e1) * t3213) * t3372 + t3432) * t3359 + t3427 * t3358;
t3061 = t3427 * t3359 + (-t3432 - 0.2e1 * t3655) * t3358;
t3079 = -pkin(5) * t3462 + t3372 * t3550;
t3082 = -t3500 * t3663 + t3651 * t3705;
t3351 = t3366 ^ 2;
t3415 = t3079 * MDP(9) + t3082 * MDP(10) + t3058 * MDP(11) + t3061 * MDP(12) + t3568 * MDP(13) + t3571 * MDP(14) + (MDP(4) * t3351 + t3575 * t3701 + MDP(1)) * t3091;
t3059 = ((t3549 + t3464 / 0.4e1 + (-t3510 / 0.2e1 - t3519 / 0.8e1) * t3217) * t3374 + t3431) * t3359 + t3426 * t3358;
t3062 = t3426 * t3359 + (-t3431 - 0.2e1 * t3654) * t3358;
t3080 = -pkin(5) * t3460 + t3374 * t3549;
t3083 = -t3494 * t3663 + t3649 * t3705;
t3352 = t3368 ^ 2;
t3414 = t3080 * MDP(9) + t3083 * MDP(10) + t3059 * MDP(11) + t3062 * MDP(12) + t3567 * MDP(13) + t3570 * MDP(14) + (MDP(4) * t3352 + t3574 * t3701 + MDP(1)) * t3092;
t3060 = ((t3548 + t3463 / 0.4e1 + (-t3509 / 0.2e1 - t3518 / 0.8e1) * t3221) * t3376 + t3430) * t3359 + t3425 * t3358;
t3063 = t3425 * t3359 + (-t3430 - 0.2e1 * t3653) * t3358;
t3081 = -pkin(5) * t3458 + t3376 * t3548;
t3084 = -t3488 * t3663 + t3647 * t3705;
t3353 = t3370 ^ 2;
t3413 = t3081 * MDP(9) + t3084 * MDP(10) + t3060 * MDP(11) + t3063 * MDP(12) + t3566 * MDP(13) + t3569 * MDP(14) + (MDP(4) * t3353 + t3573 * t3701 + MDP(1)) * t3093;
t3198 = t3279 * t3375 - t3331 * t3369;
t3197 = t3278 * t3373 - t3330 * t3367;
t3196 = t3280 * t3377 - t3332 * t3371;
t3195 = t3280 * t3371 + t3332 * t3377;
t3194 = t3279 * t3369 + t3331 * t3375;
t3193 = t3278 * t3367 + t3330 * t3373;
t3183 = -t3195 * t3314 + t3196 * t3317 + t3204 * t3666;
t3182 = t3195 * t3317 + t3196 * t3314 + t3203 * t3666;
t3181 = -t3194 * t3313 + t3198 * t3316 + t3202 * t3667;
t3180 = t3194 * t3316 + t3198 * t3313 + t3201 * t3667;
t3179 = -t3193 * t3312 + t3197 * t3315 + t3200 * t3668;
t3178 = t3193 * t3315 + t3197 * t3312 + t3199 * t3668;
t3105 = -0.2e1 * t3165 + t3111;
t3104 = -0.2e1 * t3164 + t3117;
t3103 = -0.2e1 * t3163 + t3114;
t3090 = t3365 * t3647 - 0.2e1 * t3466;
t3089 = t3364 * t3649 - 0.2e1 * t3467;
t3088 = t3363 * t3651 - 0.2e1 * t3468;
t1 = [-(t3422 * t3183 + t3413 * t3204) * t3322 - (t3423 * t3181 + t3414 * t3202) * t3320 - (t3424 * t3179 + t3415 * t3200) * t3318 + (-t3200 * t3421 - t3202 * t3420 - t3204 * t3419) * t3357 + (-(-t3183 * t3433 + t3416 * t3204) * t3610 - (-t3181 * t3434 + t3417 * t3202) * t3618 - (-t3179 * t3435 + t3418 * t3200) * t3626) * t3378; -(t3422 * t3182 + t3413 * t3203) * t3322 - (t3423 * t3180 + t3414 * t3201) * t3320 - (t3424 * t3178 + t3415 * t3199) * t3318 + (-t3199 * t3421 - t3201 * t3420 - t3203 * t3419) * t3357 + (-(-t3182 * t3433 + t3416 * t3203) * t3610 - (-t3180 * t3434 + t3417 * t3201) * t3618 - (-t3178 * t3435 + t3418 * t3199) * t3626) * t3378; (-t3091 * t3505 - t3092 * t3499 - t3093 * t3493) * MDP(1) + ((-t3093 * t3353 * t3600 - t3174 * t3573) * t3220 + (-t3092 * t3352 * t3601 - t3173 * t3574) * t3216 + (-t3091 * t3351 * t3602 - t3172 * t3575) * t3212 + (t3175 * t3213 * t3456 + t3176 * t3217 * t3455 + t3177 * t3221 * t3454) * t3533) * MDP(4) + ((-0.2e1 * t3093 * t3454 - 0.2e1 * t3174 * t3356 + t3174) * t3220 + (-0.2e1 * t3092 * t3455 - 0.2e1 * t3173 * t3355 + t3173) * t3216 + (-0.2e1 * t3091 * t3456 - 0.2e1 * t3172 * t3354 + t3172) * t3212 + (t3175 * t3309 * t3503 + t3176 * t3310 * t3497 + t3177 * t3311 * t3491) * t3533) * MDP(5) + ((-(t3370 * t3603 + t3488) * t3322 - (t3368 * t3611 + t3494) * t3320 - (t3366 * t3619 + t3500) * t3318) * t3357 + t3429) * MDP(6) + ((-(t3376 * t3603 - t3489) * t3322 - (t3374 * t3611 - t3495) * t3320 - (t3372 * t3619 - t3501) * t3318) * t3357 + t3428) * MDP(7) + (t3215 * t3236 + t3219 * t3237 + t3223 * t3238) * t3357 * MDP(8) + (-t3079 * t3505 - t3080 * t3499 - t3081 * t3493 + (t3145 * t3503 + t3146 * t3497 + t3147 * t3491) * t3533 - t3429 * pkin(5) + (t3172 * t3625 + t3173 * t3617 + t3174 * t3609) * pkin(1)) * MDP(9) + (-t3082 * t3505 - t3083 * t3499 - t3084 * t3493 + (t3148 * t3503 + t3149 * t3497 + t3150 * t3491) * t3533 - t3428 * pkin(5) + (t3172 * t3624 + t3173 * t3616 + t3174 * t3608) * pkin(1)) * MDP(10) + ((-(t3105 * t3579 + t3441 * t3358) * t3177 - t3060 * t3600 - t3090 * t3359 + (t3207 * t3484 - t3358 * t3576) * t3093) * t3220 + (-(t3104 * t3580 + t3439 * t3358) * t3176 - t3059 * t3601 - t3089 * t3359 + (-t3358 * t3577 + t3206 * t3627 / 0.2e1) * t3092) * t3216 + (-(t3103 * t3581 + t3440 * t3358) * t3175 - t3058 * t3602 - t3088 * t3359 + (-t3358 * t3578 + t3205 * t3628 / 0.2e1) * t3091) * t3212 + (-(-t3210 * t3632 + t3238 * t3691) * t3606 - (-t3209 * t3637 + t3237 * t3693) * t3614 - (-t3208 * t3642 + t3236 * t3695) * t3622) * t3378) * MDP(11) + (((t3105 * t3585 - t3441 * t3359) * t3177 - t3063 * t3600 + t3090 * t3358 + (t3210 * t3484 - t3359 * t3576) * t3093) * t3220 + (t3176 * (t3104 * t3586 - t3439 * t3359) - t3062 * t3601 + t3089 * t3358 + (-t3359 * t3577 - t3209 * t3627 / 0.2e1) * t3092) * t3216 + (t3175 * (t3103 * t3587 - t3440 * t3359) - t3061 * t3602 + t3088 * t3358 + (-t3359 * t3578 - t3208 * t3628 / 0.2e1) * t3091) * t3212 + (-(t3207 * t3632 + t3238 * t3690) * t3606 - (-t3206 * t3637 + t3237 * t3692) * t3614 - (-t3205 * t3642 + t3236 * t3694) * t3622) * t3378) * MDP(12) + ((-t3525 - (t3174 * t3675 + t3566 * t3238) * t3322) * t3220 + (-t3526 - (-t3188 * t3173 / 0.2e1 + t3567 * t3237) * t3320) * t3216 + (-t3527 - (-t3187 * t3172 / 0.2e1 + t3568 * t3236) * t3318) * t3212) * MDP(13) + (((t3466 + (-t3177 * (-t3165 + t3111) - t3648) * t3370) * pkin(2) - (t3569 * t3238 + (-t3633 + t3069 / 0.2e1) * t3189) * t3322) * t3220 + ((t3467 + (-t3176 * (-t3164 + t3117) - t3650) * t3368) * pkin(2) - (t3570 * t3237 + (-t3638 + t3068 / 0.2e1) * t3188) * t3320) * t3216 + ((t3468 + (-t3175 * (-t3163 + t3114) - t3652) * t3366) * pkin(2) - (t3571 * t3236 + (-t3643 + t3067 / 0.2e1) * t3187) * t3318) * t3212) * MDP(14);];
taucX  = t1;
