% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:12
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR8V2G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:11:56
% EndTime: 2022-11-07 13:12:12
% DurationCPUTime: 17.67s
% Computational Cost: add. (224693->735), mult. (267282->1223), div. (21882->18), fcn. (116526->140), ass. (0->565)
t1451 = (pkin(3) ^ 2);
t1453 = (pkin(2) ^ 2);
t1790 = 3 * t1453 + 6 * t1451;
t1789 = 6 * t1453 + 3 * t1451;
t1428 = cos(qJ(2,3));
t1380 = t1428 * pkin(2);
t1394 = qJ(2,3) + pkin(7);
t1355 = cos(t1394);
t1758 = pkin(3) * t1355;
t1289 = t1380 + t1758;
t1430 = cos(qJ(2,2));
t1381 = t1430 * pkin(2);
t1397 = qJ(2,2) + pkin(7);
t1358 = cos(t1397);
t1757 = pkin(3) * t1358;
t1290 = t1381 + t1757;
t1432 = cos(qJ(2,1));
t1382 = t1432 * pkin(2);
t1400 = qJ(2,1) + pkin(7);
t1361 = cos(t1400);
t1756 = pkin(3) * t1361;
t1291 = t1382 + t1756;
t1746 = 0.2e1 * pkin(3);
t1334 = t1380 + pkin(1);
t1335 = t1381 + pkin(1);
t1336 = t1382 + pkin(1);
t1385 = t1451 + t1453;
t1415 = cos(pkin(7));
t1755 = pkin(3) * t1415;
t1615 = pkin(2) * t1755;
t1788 = -0.8e1 * t1615 - (4 * t1385);
t1438 = 0.2e1 * pkin(7);
t1447 = 0.2e1 * qJ(2,1);
t1398 = t1447 + t1438;
t1787 = cos(t1398) * t1451 + cos(t1447) * t1453;
t1444 = 0.2e1 * qJ(2,2);
t1395 = t1444 + t1438;
t1786 = cos(t1395) * t1451 + cos(t1444) * t1453;
t1441 = 0.2e1 * qJ(2,3);
t1392 = t1441 + t1438;
t1785 = cos(t1392) * t1451 + cos(t1441) * t1453;
t1784 = -0.2e1 * pkin(1);
t1783 = 0.4e1 * pkin(1);
t1782 = 0.2e1 * pkin(2);
t1781 = 2 * pkin(5);
t1268 = 0.1e1 / t1289;
t1272 = 0.1e1 / t1290;
t1276 = 0.1e1 / t1291;
t1457 = t1289 ^ 2;
t1269 = 0.1e1 / t1457;
t1460 = t1290 ^ 2;
t1273 = 0.1e1 / t1460;
t1463 = t1291 ^ 2;
t1277 = 0.1e1 / t1463;
t1777 = -0.4e1 * pkin(1) * (t1615 + t1453 / 0.2e1 + t1451 / 0.2e1);
t1452 = pkin(2) * t1453;
t1759 = pkin(2) * t1451;
t1776 = -0.2e1 * t1452 - 0.4e1 * t1759;
t1774 = 2 * t1385;
t1410 = t1428 ^ 2;
t1773 = 0.2e1 * t1410;
t1411 = t1430 ^ 2;
t1772 = 0.2e1 * t1411;
t1412 = t1432 ^ 2;
t1771 = 0.2e1 * t1412;
t1434 = xDP(3);
t1770 = 4 * t1434;
t1769 = pkin(2) * pkin(3);
t1416 = legFrame(3,3);
t1368 = sin(t1416);
t1371 = cos(t1416);
t1423 = sin(qJ(1,3));
t1429 = cos(qJ(1,3));
t1255 = t1368 * t1429 + t1371 * t1423;
t1256 = -t1368 * t1423 + t1371 * t1429;
t1333 = pkin(2) + t1755;
t1419 = qJ(3,3) + pkin(5);
t1386 = -pkin(6) - t1419;
t1374 = 1 / t1386;
t1422 = sin(qJ(2,3));
t1435 = xDP(2);
t1436 = xDP(1);
t1414 = sin(pkin(7));
t1661 = t1414 * t1428;
t1664 = t1414 * t1422;
t1231 = (t1256 * t1436 + t1255 * t1435 + t1434 * (pkin(3) * t1661 + t1333 * t1422) / (-pkin(3) * t1664 + t1333 * t1428)) * t1374;
t1768 = t1231 / 0.2e1;
t1417 = legFrame(2,3);
t1369 = sin(t1417);
t1372 = cos(t1417);
t1425 = sin(qJ(1,2));
t1431 = cos(qJ(1,2));
t1257 = t1369 * t1431 + t1372 * t1425;
t1258 = -t1369 * t1425 + t1372 * t1431;
t1420 = qJ(3,2) + pkin(5);
t1387 = -pkin(6) - t1420;
t1376 = 1 / t1387;
t1424 = sin(qJ(2,2));
t1660 = t1414 * t1430;
t1663 = t1414 * t1424;
t1232 = (t1258 * t1436 + t1257 * t1435 + t1434 * (pkin(3) * t1660 + t1333 * t1424) / (-pkin(3) * t1663 + t1333 * t1430)) * t1376;
t1767 = t1232 / 0.2e1;
t1418 = legFrame(1,3);
t1370 = sin(t1418);
t1373 = cos(t1418);
t1427 = sin(qJ(1,1));
t1433 = cos(qJ(1,1));
t1259 = t1370 * t1433 + t1373 * t1427;
t1260 = -t1370 * t1427 + t1373 * t1433;
t1421 = qJ(3,1) + pkin(5);
t1388 = -pkin(6) - t1421;
t1378 = 1 / t1388;
t1426 = sin(qJ(2,1));
t1659 = t1414 * t1432;
t1662 = t1414 * t1426;
t1233 = (t1260 * t1436 + t1259 * t1435 + t1434 * (pkin(3) * t1659 + t1333 * t1426) / (-pkin(3) * t1662 + t1333 * t1432)) * t1378;
t1766 = t1233 / 0.2e1;
t1346 = sin(t1400);
t1294 = pkin(2) * t1426 + pkin(3) * t1346;
t1399 = t1447 + pkin(7);
t1345 = sin(t1399);
t1616 = t1345 * t1769;
t1403 = sin(t1447);
t1644 = t1453 * t1403;
t1647 = t1451 * sin(t1398);
t1477 = 0.2e1 * t1616 + t1644 + t1647;
t1747 = 0.2e1 * pkin(1);
t1245 = t1294 * t1747 + t1477;
t1765 = -t1245 / 0.2e1;
t1764 = pkin(1) * t1428;
t1763 = pkin(1) * t1430;
t1762 = pkin(1) * t1432;
t1761 = pkin(1) * t1434;
t1413 = t1434 ^ 2;
t1760 = pkin(2) * t1413;
t1754 = pkin(3) * t1453;
t1753 = pkin(5) * t1413;
t1729 = t1231 * t1428;
t1219 = pkin(2) * t1729;
t1226 = pkin(1) * t1231;
t1270 = t1268 * t1269;
t1491 = -t1385 - t1785;
t1362 = t1416 + qJ(1,3);
t1314 = pkin(7) + t1362;
t1296 = t1441 + t1314;
t1315 = -pkin(7) + t1362;
t1442 = -0.2e1 * qJ(2,3);
t1297 = t1442 + t1315;
t1302 = qJ(2,3) + t1314;
t1303 = -qJ(2,3) + t1315;
t1323 = t1441 + t1362;
t1304 = t1438 + t1323;
t1324 = t1442 + t1362;
t1439 = -0.2e1 * pkin(7);
t1305 = t1439 + t1324;
t1321 = qJ(2,3) + t1362;
t1322 = -qJ(2,3) + t1362;
t1393 = t1441 + pkin(7);
t1339 = sin(t1393);
t1340 = sin(t1394);
t1401 = sin(t1441);
t1649 = t1451 * sin(t1392);
t1605 = 0.2e1 * t1649;
t1606 = 0.2e1 * t1436;
t1607 = 0.2e1 * t1435;
t1384 = pkin(1) * t1436;
t1611 = 0.2e1 * t1386 * t1435 + 0.2e1 * t1384;
t1383 = pkin(1) * t1435;
t1614 = -0.2e1 * t1386 * t1436 + 0.2e1 * t1383;
t1630 = 0.4e1 * t1761;
t1186 = t1434 * t1605 + ((t1401 * t1782 + t1422 * t1783) * t1434 + (cos(t1321) + cos(t1322)) * t1611 + (sin(t1321) + sin(t1322)) * t1614) * pkin(2) + (cos(t1362) * t1774 + (cos(t1323) + cos(t1324)) * t1453 + (cos(t1304) + cos(t1305)) * t1451) * t1436 + (sin(t1362) * t1774 + (sin(t1323) + sin(t1324)) * t1453 + (sin(t1304) + sin(t1305)) * t1451) * t1435 + (t1340 * t1630 + (cos(t1302) + cos(t1303)) * t1611 + (sin(t1302) + sin(t1303)) * t1614 + (t1339 * t1770 + (cos(t1296) + cos(t1297) + cos(t1314) + cos(t1315)) * t1606 + (sin(t1296) + sin(t1297) + sin(t1314) + sin(t1315)) * t1607) * pkin(2)) * pkin(3);
t1549 = t1186 * t1374 / 0.4e1;
t1506 = t1268 * t1549;
t1466 = t1386 ^ 2;
t1736 = t1186 / t1466;
t1588 = t1269 * t1736;
t1602 = pkin(2) * t1746;
t1353 = cos(t1393);
t1634 = t1353 + t1415;
t1671 = (0.2e1 * t1615 + t1385) * t1413;
t1731 = t1231 * t1268;
t1147 = -(-t1231 * t1758 - t1219) * t1588 / 0.4e1 - (t1270 * t1671 - ((-t1602 * t1634 + t1491) * t1768 + t1289 * (-t1226 + t1506)) * t1731) * t1374;
t1752 = t1147 * pkin(1);
t1724 = t1232 * t1430;
t1220 = pkin(2) * t1724;
t1227 = pkin(1) * t1232;
t1274 = t1272 * t1273;
t1490 = -t1385 - t1786;
t1363 = t1417 + qJ(1,2);
t1318 = pkin(7) + t1363;
t1300 = t1444 + t1318;
t1319 = -pkin(7) + t1363;
t1445 = -0.2e1 * qJ(2,2);
t1301 = t1445 + t1319;
t1327 = t1444 + t1363;
t1306 = t1438 + t1327;
t1307 = qJ(2,2) + t1318;
t1308 = -qJ(2,2) + t1319;
t1328 = t1445 + t1363;
t1309 = t1439 + t1328;
t1325 = qJ(2,2) + t1363;
t1326 = -qJ(2,2) + t1363;
t1396 = t1444 + pkin(7);
t1342 = sin(t1396);
t1343 = sin(t1397);
t1402 = sin(t1444);
t1648 = t1451 * sin(t1395);
t1604 = 0.2e1 * t1648;
t1610 = 0.2e1 * t1387 * t1435 + 0.2e1 * t1384;
t1613 = -0.2e1 * t1387 * t1436 + 0.2e1 * t1383;
t1188 = t1434 * t1604 + ((t1402 * t1782 + t1424 * t1783) * t1434 + (cos(t1325) + cos(t1326)) * t1610 + (sin(t1325) + sin(t1326)) * t1613) * pkin(2) + (cos(t1363) * t1774 + (cos(t1327) + cos(t1328)) * t1453 + (cos(t1306) + cos(t1309)) * t1451) * t1436 + (sin(t1363) * t1774 + (sin(t1327) + sin(t1328)) * t1453 + (sin(t1306) + sin(t1309)) * t1451) * t1435 + (t1343 * t1630 + (cos(t1307) + cos(t1308)) * t1610 + (sin(t1307) + sin(t1308)) * t1613 + (t1342 * t1770 + (cos(t1300) + cos(t1301) + cos(t1318) + cos(t1319)) * t1606 + (sin(t1300) + sin(t1301) + sin(t1318) + sin(t1319)) * t1607) * pkin(2)) * pkin(3);
t1547 = t1188 * t1376 / 0.4e1;
t1504 = t1272 * t1547;
t1467 = t1387 ^ 2;
t1734 = t1188 / t1467;
t1584 = t1273 * t1734;
t1357 = cos(t1396);
t1633 = t1357 + t1415;
t1726 = t1232 * t1272;
t1148 = -(-t1232 * t1757 - t1220) * t1584 / 0.4e1 - (t1274 * t1671 - ((-t1602 * t1633 + t1490) * t1767 + t1290 * (-t1227 + t1504)) * t1726) * t1376;
t1751 = t1148 * pkin(1);
t1719 = t1233 * t1432;
t1221 = pkin(2) * t1719;
t1222 = t1233 * pkin(1);
t1278 = t1276 * t1277;
t1489 = -t1385 - t1787;
t1364 = t1418 + qJ(1,1);
t1316 = pkin(7) + t1364;
t1298 = t1447 + t1316;
t1317 = -pkin(7) + t1364;
t1448 = -0.2e1 * qJ(2,1);
t1299 = t1448 + t1317;
t1310 = qJ(2,1) + t1316;
t1311 = -qJ(2,1) + t1317;
t1331 = t1447 + t1364;
t1312 = t1438 + t1331;
t1332 = t1448 + t1364;
t1313 = t1439 + t1332;
t1329 = qJ(2,1) + t1364;
t1330 = -qJ(2,1) + t1364;
t1603 = 0.2e1 * t1647;
t1609 = 0.2e1 * t1388 * t1435 + 0.2e1 * t1384;
t1612 = -0.2e1 * t1388 * t1436 + 0.2e1 * t1383;
t1187 = t1434 * t1603 + ((t1403 * t1782 + t1426 * t1783) * t1434 + (cos(t1329) + cos(t1330)) * t1609 + (sin(t1329) + sin(t1330)) * t1612) * pkin(2) + (cos(t1364) * t1774 + (cos(t1331) + cos(t1332)) * t1453 + (cos(t1312) + cos(t1313)) * t1451) * t1436 + (sin(t1364) * t1774 + (sin(t1331) + sin(t1332)) * t1453 + (sin(t1312) + sin(t1313)) * t1451) * t1435 + (t1346 * t1630 + (cos(t1310) + cos(t1311)) * t1609 + (sin(t1310) + sin(t1311)) * t1612 + (t1345 * t1770 + (cos(t1298) + cos(t1299) + cos(t1316) + cos(t1317)) * t1606 + (sin(t1298) + sin(t1299) + sin(t1316) + sin(t1317)) * t1607) * pkin(2)) * pkin(3);
t1548 = t1187 * t1378 / 0.4e1;
t1505 = t1276 * t1548;
t1468 = t1388 ^ 2;
t1735 = t1187 / t1468;
t1586 = t1277 * t1735;
t1360 = cos(t1399);
t1632 = t1360 + t1415;
t1721 = t1233 * t1276;
t1149 = -(-t1233 * t1756 - t1221) * t1586 / 0.4e1 - (t1278 * t1671 - ((-t1602 * t1632 + t1489) * t1766 + t1291 * (-t1222 + t1505)) * t1721) * t1378;
t1750 = t1149 * pkin(1);
t1749 = pkin(1) * t1746;
t1748 = -0.8e1 * t1769;
t1349 = cos(-pkin(7) + qJ(2,3));
t1354 = cos(qJ(2,3) + t1438);
t1437 = 0.3e1 * pkin(7);
t1440 = 0.3e1 * qJ(2,3);
t1450 = pkin(3) * t1451;
t1454 = pkin(1) ^ 2;
t1698 = t1268 * t1374;
t1579 = t1231 * t1698;
t1587 = t1186 * t1698;
t1618 = t1339 * t1769;
t1624 = -0.3e1 * t1754;
t1626 = -0.3e1 * t1759;
t1646 = t1453 * t1401;
t1695 = t1268 * t1434;
t1521 = (-(t1605 + 0.4e1 * t1618 + 0.2e1 * t1646) * t1386 * t1695 - 0.4e1 * t1289 * (pkin(1) * t1506 - (t1454 + t1466) * t1231) + (t1450 * cos(t1440 + t1437) + t1758 * t1789 + t1452 * cos(t1440) + t1380 * t1790 - (cos(t1438 + t1440) + t1354) * t1626 - (cos(t1440 + pkin(7)) + t1349) * t1624) * t1231 + (t1353 * t1748 - 0.4e1 * t1785 + t1788) * (-t1226 + t1587 / 0.8e1)) * t1579;
t1479 = 0.2e1 * t1618 + t1646 + t1649;
t1531 = -0.2e1 * t1450 - 0.4e1 * t1754;
t1623 = -0.2e1 * t1754;
t1625 = -0.2e1 * t1759;
t1582 = (t1479 * t1386 * t1231 + (t1349 * t1623 + t1354 * t1625 + t1355 * t1531 + t1428 * t1776 + t1777) * t1695) * t1374 * t1434;
t1156 = (t1355 * t1749 + (t1634 * t1746 + 0.2e1 * t1764) * pkin(2) - t1491) * t1231;
t1591 = t1156 * t1736;
t1126 = t1752 + t1521 / 0.8e1 + (-t1582 / 0.4e1 - t1591 / 0.16e2) * t1269;
t1745 = t1126 * t1428;
t1347 = cos(t1438 + qJ(2,2));
t1350 = cos(-pkin(7) + qJ(2,2));
t1443 = 0.3e1 * qJ(2,2);
t1690 = t1272 * t1376;
t1578 = t1232 * t1690;
t1583 = t1188 * t1690;
t1617 = t1342 * t1769;
t1645 = t1453 * t1402;
t1687 = t1272 * t1434;
t1520 = (-(t1604 + 0.4e1 * t1617 + 0.2e1 * t1645) * t1387 * t1687 - 0.4e1 * t1290 * (pkin(1) * t1504 - (t1454 + t1467) * t1232) + (t1450 * cos(t1443 + t1437) + t1757 * t1789 + t1452 * cos(t1443) + t1381 * t1790 - (cos(t1438 + t1443) + t1347) * t1626 - (cos(t1443 + pkin(7)) + t1350) * t1624) * t1232 + (t1357 * t1748 - 0.4e1 * t1786 + t1788) * (-t1227 + t1583 / 0.8e1)) * t1578;
t1478 = 0.2e1 * t1617 + t1645 + t1648;
t1581 = (t1478 * t1387 * t1232 + (t1347 * t1625 + t1350 * t1623 + t1358 * t1531 + t1430 * t1776 + t1777) * t1687) * t1376 * t1434;
t1157 = (t1358 * t1749 + (t1633 * t1746 + 0.2e1 * t1763) * pkin(2) - t1490) * t1232;
t1590 = t1157 * t1734;
t1127 = t1751 + t1520 / 0.8e1 + (-t1581 / 0.4e1 - t1590 / 0.16e2) * t1273;
t1744 = t1127 * t1430;
t1348 = cos(t1438 + qJ(2,1));
t1351 = cos(-pkin(7) + qJ(2,1));
t1446 = 0.3e1 * qJ(2,1);
t1682 = t1276 * t1378;
t1577 = t1233 * t1682;
t1585 = t1187 * t1682;
t1679 = t1276 * t1434;
t1519 = (-(t1603 + 0.4e1 * t1616 + 0.2e1 * t1644) * t1388 * t1679 - 0.4e1 * t1291 * (pkin(1) * t1505 - (t1454 + t1468) * t1233) + (t1450 * cos(t1437 + t1446) + t1756 * t1789 + t1452 * cos(t1446) + t1382 * t1790 - (cos(t1446 + t1438) + t1348) * t1626 - (t1351 + cos(pkin(7) + t1446)) * t1624) * t1233 + (t1360 * t1748 - 0.4e1 * t1787 + t1788) * (-t1222 + t1585 / 0.8e1)) * t1577;
t1580 = (t1477 * t1388 * t1233 + (t1348 * t1625 + t1351 * t1623 + t1361 * t1531 + t1432 * t1776 + t1777) * t1679) * t1378 * t1434;
t1158 = (t1361 * t1749 + (t1632 * t1746 + 0.2e1 * t1762) * pkin(2) - t1489) * t1233;
t1589 = t1158 * t1735;
t1128 = t1750 + t1519 / 0.8e1 + (-t1580 / 0.4e1 - t1589 / 0.16e2) * t1277;
t1743 = t1128 * t1432;
t1742 = t1147 * t1419;
t1741 = t1147 * t1422;
t1740 = t1148 * t1420;
t1739 = t1148 * t1424;
t1738 = t1149 * t1421;
t1737 = t1149 * t1426;
t1569 = t1422 * t1695;
t1733 = t1231 * (pkin(2) * t1569 + t1419 * t1768);
t1292 = pkin(2) * t1422 + pkin(3) * t1340;
t1243 = t1292 * t1747 + t1479;
t1732 = t1231 * t1243;
t1730 = t1231 * t1422;
t1563 = t1424 * t1687;
t1728 = t1232 * (pkin(2) * t1563 + t1420 * t1767);
t1293 = pkin(2) * t1424 + pkin(3) * t1343;
t1244 = t1293 * t1747 + t1478;
t1727 = t1232 * t1244;
t1725 = t1232 * t1424;
t1557 = t1426 * t1679;
t1723 = t1233 * (pkin(2) * t1557 + t1421 * t1766);
t1722 = t1233 * t1245;
t1720 = t1233 * t1426;
t1249 = t1334 * t1423 + t1386 * t1429;
t1253 = t1334 * t1429 - t1386 * t1423;
t1234 = t1249 * t1371 + t1253 * t1368 + t1255 * t1758;
t1261 = t1415 * t1428 - t1664;
t1718 = t1234 * t1261;
t1658 = t1415 * t1422;
t1264 = t1658 + t1661;
t1717 = t1234 * t1264;
t1235 = -t1249 * t1368 + t1253 * t1371 + t1256 * t1758;
t1716 = t1235 * t1261;
t1715 = t1235 * t1264;
t1250 = t1335 * t1425 + t1387 * t1431;
t1254 = t1335 * t1431 - t1387 * t1425;
t1236 = t1250 * t1372 + t1254 * t1369 + t1257 * t1757;
t1262 = t1415 * t1430 - t1663;
t1714 = t1236 * t1262;
t1657 = t1415 * t1424;
t1265 = t1657 + t1660;
t1713 = t1236 * t1265;
t1237 = -t1250 * t1369 + t1254 * t1372 + t1258 * t1757;
t1712 = t1237 * t1262;
t1711 = t1237 * t1265;
t1251 = t1336 * t1427 + t1388 * t1433;
t1252 = t1336 * t1433 - t1388 * t1427;
t1238 = t1251 * t1373 + t1252 * t1370 + t1259 * t1756;
t1263 = -t1415 * t1432 + t1662;
t1710 = t1238 * t1263;
t1656 = t1415 * t1426;
t1266 = t1656 + t1659;
t1709 = t1238 * t1266;
t1239 = -t1251 * t1370 + t1252 * t1373 + t1260 * t1756;
t1708 = t1239 * t1263;
t1707 = t1239 * t1266;
t1706 = t1243 * t1374;
t1705 = t1244 * t1376;
t1704 = t1255 * t1374;
t1703 = t1256 * t1374;
t1702 = t1257 * t1376;
t1701 = t1258 * t1376;
t1700 = t1259 * t1378;
t1699 = t1260 * t1378;
t1697 = t1268 * t1422;
t1696 = t1268 * t1428;
t1694 = t1269 * t1374;
t1693 = t1269 * t1428;
t1692 = t1270 * t1292;
t1271 = 0.1e1 / t1457 ^ 2;
t1691 = t1271 * t1292 ^ 2;
t1689 = t1272 * t1424;
t1688 = t1272 * t1430;
t1686 = t1273 * t1376;
t1685 = t1273 * t1430;
t1684 = t1274 * t1293;
t1275 = 0.1e1 / t1460 ^ 2;
t1683 = t1275 * t1293 ^ 2;
t1681 = t1276 * t1426;
t1680 = t1276 * t1432;
t1678 = t1277 * t1378;
t1677 = t1277 * t1432;
t1676 = t1278 * t1294;
t1279 = 0.1e1 / t1463 ^ 2;
t1675 = t1279 * t1294 ^ 2;
t1674 = t1292 * t1374;
t1673 = t1293 * t1376;
t1672 = t1294 * t1378;
t1655 = t1419 * t1428;
t1654 = t1420 * t1430;
t1653 = t1421 * t1432;
t1652 = t1422 * t1428;
t1651 = t1424 * t1430;
t1650 = t1426 * t1432;
t1545 = t1695 / 0.2e1;
t1246 = t1419 * t1545;
t1567 = t1413 * t1692;
t1511 = t1419 * t1567;
t1494 = t1422 * t1511;
t1540 = -t1521 / 0.4e1 + t1269 * t1582 / 0.2e1 + t1156 * t1588 / 0.8e1;
t1598 = pkin(2) * t1730;
t1619 = pkin(2) * t1761;
t1631 = (pkin(5) ^ 2) + t1454;
t1643 = -0.2e1 * (t1246 - t1598) * t1695 * t1380 + 0.2e1 * (t1419 * t1549 + t1422 * t1619) * t1731 - pkin(1) * t1540 + (t1410 * t1453 + ((t1781 + qJ(3,3)) * qJ(3,3)) + t1631) * t1147 + (-t1494 + 0.2e1 * t1745) * pkin(2);
t1544 = t1687 / 0.2e1;
t1247 = t1420 * t1544;
t1561 = t1413 * t1684;
t1509 = t1420 * t1561;
t1492 = t1424 * t1509;
t1539 = -t1520 / 0.4e1 + t1273 * t1581 / 0.2e1 + t1157 * t1584 / 0.8e1;
t1597 = pkin(2) * t1725;
t1642 = -0.2e1 * (t1247 - t1597) * t1687 * t1381 + 0.2e1 * (t1420 * t1547 + t1424 * t1619) * t1726 - pkin(1) * t1539 + (t1411 * t1453 + ((t1781 + qJ(3,2)) * qJ(3,2)) + t1631) * t1148 + (-t1492 + 0.2e1 * t1744) * pkin(2);
t1543 = t1679 / 0.2e1;
t1248 = t1421 * t1543;
t1555 = t1413 * t1676;
t1507 = t1421 * t1555;
t1493 = t1426 * t1507;
t1538 = -t1519 / 0.4e1 + t1277 * t1580 / 0.2e1 + t1158 * t1586 / 0.8e1;
t1596 = pkin(2) * t1720;
t1641 = -0.2e1 * (t1248 - t1596) * t1679 * t1382 + 0.2e1 * (t1421 * t1548 + t1426 * t1619) * t1721 - pkin(1) * t1538 + (t1412 * t1453 + ((t1781 + qJ(3,1)) * qJ(3,1)) + t1631) * t1149 + (-t1493 + 0.2e1 * t1743) * pkin(2);
t1566 = t1422 * t1692;
t1512 = t1413 * t1566;
t1640 = -pkin(2) * t1512 - t1693 * t1760 + t1186 * t1579 / 0.2e1 + 0.2e1 * t1742;
t1560 = t1424 * t1684;
t1510 = t1413 * t1560;
t1639 = -pkin(2) * t1510 - t1685 * t1760 + t1188 * t1578 / 0.2e1 + 0.2e1 * t1740;
t1554 = t1426 * t1676;
t1508 = t1413 * t1554;
t1638 = -pkin(2) * t1508 - t1677 * t1760 + t1187 * t1577 / 0.2e1 + 0.2e1 * t1738;
t1167 = -t1222 + t1585 / 0.2e1;
t1170 = -t1226 + t1587 / 0.2e1;
t1173 = -t1227 + t1583 / 0.2e1;
t1629 = pkin(2) * t1773;
t1628 = pkin(2) * t1772;
t1627 = pkin(2) * t1771;
t1622 = 0.2e1 * t1752;
t1621 = 0.2e1 * t1751;
t1620 = 0.2e1 * t1750;
t1608 = 2 * t1434;
t1601 = pkin(2) * t1741;
t1600 = pkin(2) * t1739;
t1599 = pkin(2) * t1737;
t1594 = t1147 * t1374 * t1422 ^ 2;
t1593 = t1148 * t1376 * t1424 ^ 2;
t1592 = t1149 * t1378 * t1426 ^ 2;
t1576 = t1255 * t1698;
t1575 = t1256 * t1698;
t1574 = t1257 * t1690;
t1573 = t1258 * t1690;
t1572 = t1259 * t1682;
t1571 = t1260 * t1682;
t1570 = t1268 * t1674;
t1568 = t1269 * t1674;
t1565 = t1428 * t1692;
t1564 = t1272 * t1673;
t1562 = t1273 * t1673;
t1559 = t1430 * t1684;
t1558 = t1276 * t1672;
t1556 = t1277 * t1672;
t1553 = t1432 * t1676;
t1552 = t1374 * t1652;
t1551 = t1376 * t1651;
t1550 = t1378 * t1650;
t1546 = t1378 * t1765;
t1530 = 0.2e1 * t1698;
t1529 = 0.2e1 * t1690;
t1528 = 0.2e1 * t1682;
t1123 = -t1334 * t1147 + t1540;
t1527 = t1123 - 0.2e1 * t1733;
t1124 = -t1335 * t1148 + t1539;
t1526 = t1124 - 0.2e1 * t1728;
t1125 = -t1336 * t1149 + t1538;
t1525 = t1125 - 0.2e1 * t1723;
t1524 = pkin(2) * t1567;
t1523 = pkin(2) * t1561;
t1522 = pkin(2) * t1555;
t1365 = t1773 - 0.1e1;
t1518 = t1365 * t1579;
t1517 = t1231 * t1552;
t1366 = t1772 - 0.1e1;
t1516 = t1366 * t1578;
t1515 = t1232 * t1551;
t1367 = t1771 - 0.1e1;
t1514 = t1367 * t1577;
t1513 = t1233 * t1550;
t1503 = -t1569 / 0.2e1;
t1502 = -t1563 / 0.2e1;
t1501 = -t1557 / 0.2e1;
t1500 = -0.2e1 * t1147 * t1552;
t1499 = -0.2e1 * t1148 * t1551;
t1498 = -0.2e1 * t1149 * t1550;
t1497 = t1268 * t1517;
t1496 = t1272 * t1515;
t1495 = t1276 * t1513;
t1225 = pkin(2) * t1233;
t1488 = t1167 * t1432 - t1233 * t1627 + t1225;
t1223 = pkin(2) * t1231;
t1487 = t1170 * t1428 - t1231 * t1629 + t1223;
t1224 = pkin(2) * t1232;
t1486 = t1173 * t1430 - t1232 * t1628 + t1224;
t1485 = t1376 * (-t1273 * t1424 + t1559);
t1484 = (-t1269 * t1422 + t1565) * t1374;
t1483 = (t1566 + t1693) * t1374;
t1482 = (t1560 + t1685) * t1376;
t1481 = (-t1277 * t1426 + t1553) * t1378;
t1480 = (t1554 + t1677) * t1378;
t1476 = t1147 * t1629 - t1494;
t1475 = t1148 * t1628 - t1492;
t1474 = t1149 * t1627 - t1493;
t1473 = t1147 * t1697 + t1148 * t1689 + t1149 * t1681;
t1472 = t1147 * t1696 + t1148 * t1688 + t1149 * t1680;
t1471 = (-t1511 - 0.2e1 * t1601) * t1428 - 0.2e1 * t1126 * t1422;
t1470 = (-t1509 - 0.2e1 * t1600) * t1430 - 0.2e1 * t1424 * t1127;
t1469 = (-t1507 - 0.2e1 * t1599) * t1432 - 0.2e1 * t1128 * t1426;
t1230 = t1233 ^ 2;
t1229 = t1232 ^ 2;
t1228 = t1231 ^ 2;
t1218 = pkin(1) * t1720;
t1217 = pkin(1) * t1725;
t1216 = pkin(1) * t1730;
t1206 = -pkin(1) * t1719 + pkin(5) * t1501;
t1205 = -pkin(1) * t1724 + pkin(5) * t1502;
t1204 = -pkin(1) * t1729 + pkin(5) * t1503;
t1203 = pkin(5) * t1432 * t1543 - t1218;
t1202 = pkin(5) * t1430 * t1544 - t1217;
t1201 = pkin(5) * t1428 * t1545 - t1216;
t1200 = (t1248 - 0.2e1 * t1596) * t1432 - t1218;
t1199 = (t1247 - 0.2e1 * t1597) * t1430 - t1217;
t1198 = (t1246 - 0.2e1 * t1598) * t1428 - t1216;
t1197 = t1421 * t1501 + t1225 - (t1627 + t1762) * t1233;
t1196 = t1420 * t1502 + t1224 - (t1628 + t1763) * t1232;
t1195 = t1419 * t1503 + t1223 - (t1629 + t1764) * t1231;
t1179 = -t1197 * t1415 + t1200 * t1414;
t1178 = t1197 * t1414 + t1200 * t1415;
t1177 = -t1196 * t1415 + t1199 * t1414;
t1176 = t1196 * t1414 + t1199 * t1415;
t1175 = -t1195 * t1415 + t1198 * t1414;
t1174 = t1195 * t1414 + t1198 * t1415;
t1161 = -0.2e1 * t1221 + t1167;
t1160 = -0.2e1 * t1220 + t1173;
t1159 = -0.2e1 * t1219 + t1170;
t1146 = t1421 * t1737 - 0.2e1 * t1522;
t1145 = t1420 * t1739 - 0.2e1 * t1523;
t1144 = t1419 * t1741 - 0.2e1 * t1524;
t1140 = -t1553 * t1753 + t1737 * t1784;
t1139 = -t1559 * t1753 + t1739 * t1784;
t1138 = -t1565 * t1753 + t1741 * t1784;
t1137 = -pkin(5) * t1508 + t1432 * t1620;
t1136 = -pkin(5) * t1510 + t1430 * t1621;
t1135 = -pkin(5) * t1512 + t1428 * t1622;
t1119 = t1469 * t1415 + (-t1474 - 0.2e1 * t1743) * t1414;
t1118 = t1470 * t1415 + (-t1475 - 0.2e1 * t1744) * t1414;
t1117 = t1471 * t1415 + (-t1476 - 0.2e1 * t1745) * t1414;
t1116 = ((t1620 + t1519 / 0.4e1 + (-t1580 / 0.2e1 - t1589 / 0.8e1) * t1277) * t1432 + t1474) * t1415 + t1469 * t1414;
t1115 = ((t1621 + t1520 / 0.4e1 + (-t1581 / 0.2e1 - t1590 / 0.8e1) * t1273) * t1430 + t1475) * t1415 + t1470 * t1414;
t1114 = ((t1622 + t1521 / 0.4e1 + (-t1582 / 0.2e1 - t1591 / 0.8e1) * t1269) * t1428 + t1476) * t1415 + t1471 * t1414;
t1 = [-t1147 * t1703 - t1148 * t1701 - t1149 * t1699, 0, 0, -t1256 * t1594 - t1258 * t1593 - t1260 * t1592 + (t1256 * t1497 + t1258 * t1496 + t1260 * t1495) * t1608, t1256 * t1500 + t1258 * t1499 + t1260 * t1498 + (t1256 * t1518 + t1258 * t1516 + t1260 * t1514) * t1608, (-t1256 * t1483 - t1258 * t1482 - t1260 * t1480) * t1413, (-t1256 * t1484 - t1258 * t1485 - t1260 * t1481) * t1413, 0, -t1135 * t1703 - t1136 * t1701 - t1137 * t1699 + (t1201 * t1575 + t1202 * t1573 + t1203 * t1571) * t1608, -t1138 * t1703 - t1139 * t1701 - t1140 * t1699 + (t1204 * t1575 + t1205 * t1573 + t1206 * t1571) * t1608, -(t1116 * t1260 + t1149 * t1708) * t1378 - (t1115 * t1258 - t1148 * t1712) * t1376 - (t1114 * t1256 - t1147 * t1716) * t1374 + (-(-t1178 * t1260 - t1233 * t1707) * t1528 - (-t1176 * t1258 - t1232 * t1711) * t1529 - (-t1174 * t1256 - t1231 * t1715) * t1530) * t1434, -(t1119 * t1260 + t1149 * t1707) * t1378 - (t1118 * t1258 + t1148 * t1711) * t1376 - (t1117 * t1256 + t1147 * t1715) * t1374 + (-(t1179 * t1260 + t1233 * t1708) * t1528 - (t1177 * t1258 - t1232 * t1712) * t1529 - (t1175 * t1256 - t1231 * t1716) * t1530) * t1434, -(-t1230 * t1239 + t1260 * t1638) * t1378 - (-t1229 * t1237 + t1258 * t1639) * t1376 - (-t1228 * t1235 + t1256 * t1640) * t1374, -(t1239 * t1525 + t1260 * t1641) * t1378 - (t1237 * t1526 + t1258 * t1642) * t1376 - (t1235 * t1527 + t1256 * t1643) * t1374, 0; -t1147 * t1704 - t1148 * t1702 - t1149 * t1700, 0, 0, -t1255 * t1594 - t1257 * t1593 - t1259 * t1592 + (t1255 * t1497 + t1257 * t1496 + t1259 * t1495) * t1608, t1255 * t1500 + t1257 * t1499 + t1259 * t1498 + (t1255 * t1518 + t1257 * t1516 + t1259 * t1514) * t1608, (-t1255 * t1483 - t1257 * t1482 - t1259 * t1480) * t1413, (-t1255 * t1484 - t1257 * t1485 - t1259 * t1481) * t1413, 0, -t1135 * t1704 - t1136 * t1702 - t1137 * t1700 + (t1201 * t1576 + t1202 * t1574 + t1203 * t1572) * t1608, -t1138 * t1704 - t1139 * t1702 - t1140 * t1700 + (t1204 * t1576 + t1205 * t1574 + t1206 * t1572) * t1608, -(t1116 * t1259 + t1149 * t1710) * t1378 - (t1115 * t1257 - t1148 * t1714) * t1376 - (t1114 * t1255 - t1147 * t1718) * t1374 + (-(-t1178 * t1259 - t1233 * t1709) * t1528 - (-t1176 * t1257 - t1232 * t1713) * t1529 - (-t1174 * t1255 - t1231 * t1717) * t1530) * t1434, -(t1119 * t1259 + t1149 * t1709) * t1378 - (t1118 * t1257 + t1148 * t1713) * t1376 - (t1117 * t1255 + t1147 * t1717) * t1374 + (-(t1179 * t1259 + t1233 * t1710) * t1528 - (t1177 * t1257 - t1232 * t1714) * t1529 - (t1175 * t1255 - t1231 * t1718) * t1530) * t1434, -(-t1230 * t1238 + t1259 * t1638) * t1378 - (-t1229 * t1236 + t1257 * t1639) * t1376 - (-t1228 * t1234 + t1255 * t1640) * t1374, -(t1238 * t1525 + t1259 * t1641) * t1378 - (t1236 * t1526 + t1257 * t1642) * t1376 - (t1234 * t1527 + t1255 * t1643) * t1374, 0; -t1147 * t1570 - t1148 * t1564 - t1149 * t1558, 0, 0, (-t1230 * t1650 - t1294 * t1592) * t1276 + (-t1229 * t1651 - t1293 * t1593) * t1272 + (-t1228 * t1652 - t1292 * t1594) * t1268 + (t1269 * t1292 * t1517 + t1273 * t1293 * t1515 + t1277 * t1294 * t1513) * t1608, (-0.2e1 * t1230 * t1412 + t1294 * t1498 + t1230) * t1276 + (-0.2e1 * t1229 * t1411 + t1293 * t1499 + t1229) * t1272 + (-0.2e1 * t1228 * t1410 + t1292 * t1500 + t1228) * t1268 + (t1231 * t1365 * t1568 + t1232 * t1366 * t1562 + t1233 * t1367 * t1556) * t1608, (-(t1426 * t1675 + t1553) * t1378 - (t1424 * t1683 + t1559) * t1376 - (t1422 * t1691 + t1565) * t1374) * t1413 + t1473, (-(t1432 * t1675 - t1554) * t1378 - (t1430 * t1683 - t1560) * t1376 - (t1428 * t1691 - t1566) * t1374) * t1413 + t1472, (t1271 * t1292 + t1275 * t1293 + t1279 * t1294) * t1413, -t1135 * t1570 - t1136 * t1564 - t1137 * t1558 + (t1201 * t1568 + t1202 * t1562 + t1203 * t1556) * t1608 - t1473 * pkin(5) + (t1228 * t1697 + t1229 * t1689 + t1230 * t1681) * pkin(1), -t1138 * t1570 - t1139 * t1564 - t1140 * t1558 + (t1204 * t1568 + t1205 * t1562 + t1206 * t1556) * t1608 - t1472 * pkin(5) + (t1228 * t1696 + t1229 * t1688 + t1230 * t1680) * pkin(1), (-(t1161 * t1656 + t1414 * t1488) * t1233 - t1116 * t1672 - t1146 * t1415 + (t1263 * t1546 - t1414 * t1653) * t1149) * t1276 + (-(t1160 * t1657 + t1414 * t1486) * t1232 - t1115 * t1673 - t1145 * t1415 + (-t1414 * t1654 + t1262 * t1705 / 0.2e1) * t1148) * t1272 + (-(t1159 * t1658 + t1414 * t1487) * t1231 - t1114 * t1674 - t1144 * t1415 + (-t1414 * t1655 + t1261 * t1706 / 0.2e1) * t1147) * t1268 + (-(-0.2e1 * t1178 * t1294 - t1266 * t1722) * t1678 - (-0.2e1 * t1176 * t1293 - t1265 * t1727) * t1686 - (-0.2e1 * t1174 * t1292 - t1264 * t1732) * t1694) * t1434, ((t1161 * t1662 - t1415 * t1488) * t1233 - t1119 * t1672 + t1146 * t1414 + (t1266 * t1546 - t1415 * t1653) * t1149) * t1276 + (t1232 * (t1160 * t1663 - t1415 * t1486) - t1118 * t1673 + t1145 * t1414 + (-t1415 * t1654 - t1265 * t1705 / 0.2e1) * t1148) * t1272 + (t1231 * (t1159 * t1664 - t1415 * t1487) - t1117 * t1674 + t1144 * t1414 + (-t1415 * t1655 - t1264 * t1706 / 0.2e1) * t1147) * t1268 + (-(0.2e1 * t1179 * t1294 + t1263 * t1722) * t1678 - (0.2e1 * t1177 * t1293 - t1262 * t1727) * t1686 - (0.2e1 * t1175 * t1292 - t1261 * t1732) * t1694) * t1434, (-t1599 - (t1230 * t1765 + t1638 * t1294) * t1378) * t1276 + (-t1600 - (-t1244 * t1229 / 0.2e1 + t1639 * t1293) * t1376) * t1272 + (-t1601 - (-t1243 * t1228 / 0.2e1 + t1640 * t1292) * t1374) * t1268, ((t1522 + (-t1233 * (-t1221 + t1167) - t1738) * t1426) * pkin(2) - (t1641 * t1294 + (-t1723 + t1125 / 0.2e1) * t1245) * t1378) * t1276 + ((t1523 + (-t1232 * (-t1220 + t1173) - t1740) * t1424) * pkin(2) - (t1642 * t1293 + (-t1728 + t1124 / 0.2e1) * t1244) * t1376) * t1272 + ((t1524 + (-t1231 * (-t1219 + t1170) - t1742) * t1422) * pkin(2) - (t1643 * t1292 + (-t1733 + t1123 / 0.2e1) * t1243) * t1374) * t1268, 0;];
tau_reg  = t1;
