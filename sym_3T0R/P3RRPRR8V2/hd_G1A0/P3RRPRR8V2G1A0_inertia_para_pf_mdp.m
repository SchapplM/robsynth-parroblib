% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:12
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR8V2G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:12:29
% EndTime: 2022-11-07 13:12:38
% DurationCPUTime: 8.92s
% Computational Cost: add. (8178->541), mult. (9518->1023), div. (1521->12), fcn. (7788->35), ass. (0->388)
t3057 = 2 * pkin(1);
t2794 = sin(pkin(7));
t3056 = 0.2e1 * t2794;
t2795 = cos(pkin(7));
t3055 = -0.2e1 * t2795;
t2808 = cos(qJ(2,3));
t2776 = t2808 * pkin(2);
t2755 = t2776 + pkin(1);
t2810 = cos(qJ(2,2));
t2777 = t2810 * pkin(2);
t2756 = t2777 + pkin(1);
t2812 = cos(qJ(2,1));
t2778 = t2812 * pkin(2);
t2757 = t2778 + pkin(1);
t2785 = qJ(2,3) + pkin(7);
t3025 = pkin(3) * cos(t2785);
t2746 = t2776 + t3025;
t2738 = 0.1e1 / t2746 ^ 2;
t2802 = sin(qJ(2,3));
t3028 = pkin(2) * t2802;
t2749 = pkin(3) * sin(t2785) + t3028;
t3054 = t2738 * t2749 ^ 2;
t2786 = qJ(2,2) + pkin(7);
t3024 = pkin(3) * cos(t2786);
t2747 = t2777 + t3024;
t2740 = 0.1e1 / t2747 ^ 2;
t2804 = sin(qJ(2,2));
t3027 = pkin(2) * t2804;
t2750 = pkin(3) * sin(t2786) + t3027;
t3053 = t2740 * t2750 ^ 2;
t2787 = qJ(2,1) + pkin(7);
t3023 = pkin(3) * cos(t2787);
t2748 = t2778 + t3023;
t2742 = 0.1e1 / t2748 ^ 2;
t2806 = sin(qJ(2,1));
t3026 = pkin(2) * t2806;
t2751 = pkin(3) * sin(t2787) + t3026;
t3052 = t2742 * t2751 ^ 2;
t3051 = -2 * pkin(1);
t3049 = -0.2e1 * pkin(2);
t3048 = 2 * pkin(5);
t3047 = 2 * MDP(5);
t3046 = 2 * MDP(13);
t3045 = -0.2e1 * t2802;
t3044 = -0.2e1 * t2804;
t3043 = -0.2e1 * t2806;
t2814 = 0.2e1 * qJ(2,3);
t2818 = pkin(3) ^ 2;
t2819 = pkin(2) ^ 2;
t3019 = 0.2e1 * pkin(2) * pkin(3);
t2710 = sin(t2814 + pkin(7)) * t3019 + t2818 * sin(0.2e1 * t2785) + t2819 * sin(t2814) + t2749 * t3057;
t3042 = -t2710 / 0.2e1;
t3041 = t2710 / 0.2e1;
t2815 = 0.2e1 * qJ(2,2);
t2711 = sin(t2815 + pkin(7)) * t3019 + t2818 * sin(0.2e1 * t2786) + t2819 * sin(t2815) + t2750 * t3057;
t3040 = -t2711 / 0.2e1;
t3039 = t2711 / 0.2e1;
t2816 = 0.2e1 * qJ(2,1);
t2712 = sin(t2816 + pkin(7)) * t3019 + t2818 * sin(0.2e1 * t2787) + t2819 * sin(t2816) + t2751 * t3057;
t3038 = -t2712 / 0.2e1;
t3037 = t2712 / 0.2e1;
t2801 = qJ(3,1) + pkin(5);
t2800 = qJ(3,2) + pkin(5);
t2799 = qJ(3,3) + pkin(5);
t2796 = legFrame(3,3);
t2764 = sin(t2796);
t2767 = cos(t2796);
t2803 = sin(qJ(1,3));
t2809 = cos(qJ(1,3));
t2725 = t2764 * t2809 + t2767 * t2803;
t3036 = pkin(1) * t2725;
t2726 = -t2764 * t2803 + t2767 * t2809;
t3035 = pkin(1) * t2726;
t2797 = legFrame(2,3);
t2765 = sin(t2797);
t2768 = cos(t2797);
t2805 = sin(qJ(1,2));
t2811 = cos(qJ(1,2));
t2727 = t2765 * t2811 + t2768 * t2805;
t3034 = pkin(1) * t2727;
t2728 = -t2765 * t2805 + t2768 * t2811;
t3033 = pkin(1) * t2728;
t2798 = legFrame(1,3);
t2766 = sin(t2798);
t2769 = cos(t2798);
t2807 = sin(qJ(1,1));
t2813 = cos(qJ(1,1));
t2729 = t2766 * t2813 + t2769 * t2807;
t3032 = pkin(1) * t2729;
t2730 = -t2766 * t2807 + t2769 * t2813;
t3031 = pkin(1) * t2730;
t3030 = pkin(2) * t2794;
t3029 = pkin(2) * t2795;
t3022 = t2749 * pkin(1);
t3021 = t2750 * pkin(1);
t3020 = t2751 * pkin(1);
t2779 = -pkin(6) - t2799;
t2770 = 1 / t2779;
t3018 = MDP(14) * t2770;
t2780 = -pkin(6) - t2800;
t2772 = 1 / t2780;
t3017 = MDP(14) * t2772;
t2781 = -pkin(6) - t2801;
t2774 = 1 / t2781;
t3016 = MDP(14) * t2774;
t3014 = t2725 * t2770;
t3013 = t2726 * t2770;
t3012 = t2727 * t2772;
t3011 = t2728 * t2772;
t3010 = t2729 * t2774;
t3009 = t2730 * t2774;
t2771 = 1 / t2779 ^ 2;
t2966 = t2794 * t2802;
t2835 = -t2795 * t2808 + t2966;
t3008 = t2835 * t2771;
t2773 = 1 / t2780 ^ 2;
t2965 = t2794 * t2804;
t2834 = -t2795 * t2810 + t2965;
t3007 = t2834 * t2773;
t2964 = t2794 * t2806;
t2733 = -t2795 * t2812 + t2964;
t2775 = 1 / t2781 ^ 2;
t3006 = t2733 * t2775;
t2963 = t2795 * t2802;
t2734 = t2794 * t2808 + t2963;
t3005 = t2734 * t2771;
t2962 = t2795 * t2804;
t2735 = t2794 * t2810 + t2962;
t3004 = t2735 * t2773;
t2961 = t2795 * t2806;
t2736 = t2794 * t2812 + t2961;
t3003 = t2736 * t2775;
t2737 = 0.1e1 / t2746;
t3002 = t2737 * t2770;
t3001 = t2737 * t2795;
t3000 = t2738 * t2749;
t2739 = 0.1e1 / t2747;
t2999 = t2739 * t2772;
t2998 = t2739 * t2795;
t2997 = t2740 * t2750;
t2741 = 0.1e1 / t2748;
t2996 = t2741 * t2774;
t2995 = t2741 * t2795;
t2994 = t2749 * t2770;
t2993 = t2750 * t2772;
t2992 = t2751 * t2774;
t2991 = t2770 * t2799;
t2990 = t2770 * t2802;
t2989 = t2770 * t2808;
t2788 = t2802 ^ 2;
t2988 = t2771 * t2788;
t2987 = t2771 * t2799;
t2986 = t2771 * t2802;
t2985 = t2771 * t2808;
t2984 = t2772 * t2800;
t2983 = t2772 * t2804;
t2982 = t2772 * t2810;
t2789 = t2804 ^ 2;
t2981 = t2773 * t2789;
t2980 = t2773 * t2800;
t2979 = t2773 * t2804;
t2978 = t2773 * t2810;
t2977 = t2774 * t2801;
t2976 = t2774 * t2806;
t2975 = t2774 * t2812;
t2790 = t2806 ^ 2;
t2974 = t2775 * t2790;
t2973 = t2775 * t2801;
t2972 = t2775 * t2806;
t2971 = t2775 * t2812;
t2689 = (t3022 - t2710 / 0.4e1) * t3002;
t2970 = t2794 * t2689;
t2690 = (t3021 - t2711 / 0.4e1) * t2999;
t2969 = t2794 * t2690;
t2691 = (t3020 - t2712 / 0.4e1) * t2996;
t2968 = t2794 * t2691;
t2967 = t2794 * t2799;
t2960 = t2799 * t2802;
t2959 = t2800 * t2794;
t2958 = t2800 * t2804;
t2957 = t2801 * t2794;
t2956 = t2801 * t2806;
t2955 = pkin(1) ^ 2 + pkin(5) ^ 2;
t2954 = 0.2e1 * t2776;
t2953 = 0.2e1 * t2777;
t2952 = 0.2e1 * t2778;
t2951 = -0.2e1 * t2966;
t2950 = -0.2e1 * t2965;
t2949 = -0.2e1 * t2964;
t2948 = t2770 * t3029;
t2947 = t2772 * t3029;
t2946 = t2774 * t3029;
t2713 = t2755 * t2803 + t2779 * t2809;
t2717 = t2755 * t2809 - t2779 * t2803;
t2692 = t2713 * t2767 + t2717 * t2764 + t2725 * t3025;
t2942 = t2692 * t3008;
t2941 = t2692 * t3005;
t2693 = -t2713 * t2764 + t2717 * t2767 + t2726 * t3025;
t2940 = t2693 * t3008;
t2939 = t2693 * t3005;
t2714 = t2756 * t2805 + t2780 * t2811;
t2718 = t2756 * t2811 - t2780 * t2805;
t2694 = t2714 * t2768 + t2718 * t2765 + t2727 * t3024;
t2938 = t2694 * t3007;
t2937 = t2694 * t3004;
t2695 = -t2714 * t2765 + t2718 * t2768 + t2728 * t3024;
t2936 = t2695 * t3007;
t2935 = t2695 * t3004;
t2715 = t2757 * t2807 + t2781 * t2813;
t2716 = t2757 * t2813 - t2781 * t2807;
t2696 = t2715 * t2769 + t2716 * t2766 + t2729 * t3023;
t2934 = t2696 * t3006;
t2933 = t2696 * t3003;
t2697 = -t2715 * t2766 + t2716 * t2769 + t2730 * t3023;
t2932 = t2697 * t3006;
t2931 = t2697 * t3003;
t2930 = t2725 * t2726 * t2771;
t2929 = t2727 * t2728 * t2773;
t2928 = t2729 * t2730 * t2775;
t2927 = t2737 * t2994;
t2926 = t2737 * t2749 * t2771;
t2925 = t2737 * t2990;
t2924 = t2737 * t2989;
t2923 = t2799 * t3001;
t2922 = t2771 * t3054;
t2921 = t2739 * t2993;
t2920 = t2739 * t2750 * t2773;
t2919 = t2739 * t2983;
t2918 = t2739 * t2982;
t2917 = t2800 * t2998;
t2916 = t2773 * t3053;
t2915 = t2741 * t2992;
t2914 = t2741 * t2751 * t2775;
t2913 = t2741 * t2976;
t2912 = t2741 * t2975;
t2911 = t2801 * t2995;
t2910 = t2775 * t3052;
t2909 = t2749 * t2990;
t2908 = t2749 * t2989;
t2907 = t2750 * t2983;
t2906 = t2750 * t2982;
t2905 = t2751 * t2976;
t2904 = t2751 * t2975;
t2903 = t2770 * t2960;
t2902 = t2802 * t2985;
t2901 = t2772 * t2958;
t2900 = t2804 * t2978;
t2899 = t2774 * t2956;
t2898 = t2806 * t2971;
t2897 = t2737 * t2967;
t2896 = t2739 * t2959;
t2895 = t2741 * t2957;
t2894 = t2775 * t3037;
t2893 = pkin(2) * t2951;
t2892 = pkin(2) * t2950;
t2891 = pkin(2) * t2949;
t2890 = 0.2e1 * t2909;
t2889 = 0.2e1 * t2907;
t2888 = 0.2e1 * t2905;
t2791 = t2808 ^ 2;
t2887 = t2791 * t2819 + ((t3048 + qJ(3,3)) * qJ(3,3)) + t2955;
t2792 = t2810 ^ 2;
t2886 = t2792 * t2819 + ((t3048 + qJ(3,2)) * qJ(3,2)) + t2955;
t2793 = t2812 ^ 2;
t2885 = t2793 * t2819 + ((t3048 + qJ(3,1)) * qJ(3,1)) + t2955;
t2884 = t2770 * t2791 * t3030;
t2883 = t2802 * t2948;
t2882 = t2772 * t2792 * t3030;
t2881 = t2804 * t2947;
t2880 = t2774 * t2793 * t3030;
t2879 = t2806 * t2946;
t2878 = t2808 * t2930;
t2877 = t2810 * t2929;
t2876 = t2812 * t2928;
t2875 = t2835 * t2926;
t2874 = t2834 * t2920;
t2873 = t2733 * t2914;
t2872 = t2734 * t2926;
t2871 = t2735 * t2920;
t2870 = t2736 * t2914;
t2869 = t2788 * t2926;
t2868 = t2802 * t2926;
t2867 = t2808 * t2926;
t2866 = t2737 * t2903;
t2865 = t2789 * t2920;
t2864 = t2804 * t2920;
t2863 = t2810 * t2920;
t2862 = t2739 * t2901;
t2861 = t2790 * t2914;
t2860 = t2806 * t2914;
t2859 = t2812 * t2914;
t2858 = t2741 * t2899;
t2857 = t2749 * t2903;
t2856 = t2750 * t2901;
t2855 = t2751 * t2899;
t2854 = t3008 * t3042;
t2853 = t3005 * t3041;
t2852 = t3007 * t3040;
t2851 = t3004 * t3039;
t2850 = -0.2e1 * t2791 * t2948;
t2849 = -0.2e1 * t2792 * t2947;
t2848 = -0.2e1 * t2793 * t2946;
t2847 = 0.2e1 * t2799 * t2926;
t2846 = 0.2e1 * t2800 * t2920;
t2845 = 0.2e1 * t2801 * t2914;
t2844 = pkin(2) * t2791 * t2927;
t2843 = pkin(2) * t2792 * t2921;
t2842 = pkin(2) * t2793 * t2915;
t2841 = t2802 * t2867;
t2840 = t2804 * t2863;
t2839 = t2806 * t2859;
t2838 = t2742 * t2751 * t2894;
t2825 = t2725 * t2924 + t2727 * t2918 + t2729 * t2912;
t2826 = t2725 * t2925 + t2727 * t2919 + t2729 * t2913;
t2837 = (t2725 * t2841 + t2727 * t2840 + t2729 * t2839) * t3047 + (t2725 * t2869 + t2727 * t2865 + t2729 * t2861) * MDP(4) + (t2725 * t2926 + t2727 * t2920 + t2729 * t2914) * MDP(1) - t2826 * MDP(6) - t2825 * MDP(7);
t2823 = t2726 * t2924 + t2728 * t2918 + t2730 * t2912;
t2824 = t2726 * t2925 + t2728 * t2919 + t2730 * t2913;
t2836 = (t2726 * t2841 + t2728 * t2840 + t2730 * t2839) * t3047 + (t2726 * t2869 + t2728 * t2865 + t2730 * t2861) * MDP(4) + (t2726 * t2926 + t2728 * t2920 + t2730 * t2914) * MDP(1) - t2824 * MDP(6) - t2823 * MDP(7);
t2833 = (t2802 * t2878 + t2804 * t2877 + t2806 * t2876) * t3047 + (t2799 * t2930 + t2800 * t2929 + t2801 * t2928) * t3046 + (t2788 * t2930 + t2789 * t2929 + t2790 * t2928) * MDP(4) + (t2928 + t2929 + t2930) * MDP(1) + ((-t2802 * t2930 - t2804 * t2929 - t2806 * t2928) * MDP(10) + (t2876 + t2877 + t2878) * MDP(9)) * t3057;
t2832 = t2737 * (t2734 * t2991 - t2854);
t2831 = t2737 * (-t2835 * t2991 + t2853);
t2830 = t2739 * (t2735 * t2984 - t2852);
t2829 = t2739 * (-t2834 * t2984 + t2851);
t2828 = t2741 * (t2733 * t2894 + t2736 * t2977);
t2827 = t2741 * (-t2733 * t2977 + t2736 * t2894);
t2822 = t2738 * t2909 + t2740 * t2907 + t2742 * t2905;
t2821 = t2738 * t2908 + t2740 * t2906 + t2742 * t2904;
t2724 = t2730 ^ 2;
t2723 = t2729 ^ 2;
t2722 = t2728 ^ 2;
t2721 = t2727 ^ 2;
t2720 = t2726 ^ 2;
t2719 = t2725 ^ 2;
t2709 = (-0.2e1 * t2751 * t2977 - t3026) * t2741;
t2708 = (-0.2e1 * t2750 * t2984 - t3027) * t2739;
t2707 = (-0.2e1 * t2749 * t2991 - t3028) * t2737;
t2706 = (t3049 - t2855) * t2741;
t2705 = (t3049 - t2856) * t2739;
t2704 = (t3049 - t2857) * t2737;
t2703 = (pkin(1) * t2888 - pkin(5) * t2812) * t2741;
t2702 = (pkin(1) * t2889 - pkin(5) * t2810) * t2739;
t2701 = (pkin(1) * t2890 - pkin(5) * t2808) * t2737;
t2700 = (-pkin(5) * t2806 + t2904 * t3051) * t2741;
t2699 = (-pkin(5) * t2804 + t2906 * t3051) * t2739;
t2698 = (-pkin(5) * t2802 + t2908 * t3051) * t2737;
t2688 = (t3031 - t2697 / 0.2e1) * t2774;
t2687 = (t3032 - t2696 / 0.2e1) * t2774;
t2686 = (t3033 - t2695 / 0.2e1) * t2772;
t2685 = (t3034 - t2694 / 0.2e1) * t2772;
t2684 = (t3035 - t2693 / 0.2e1) * t2770;
t2683 = (t3036 - t2692 / 0.2e1) * t2770;
t2678 = (-t2751 * t2757 + t3037) * t2996;
t2677 = (-t2750 * t2756 + t3039) * t2999;
t2676 = (-t2749 * t2755 + t3041) * t3002;
t2674 = (-t2730 * t2757 + t2697) * t2774;
t2673 = (-t2729 * t2757 + t2696) * t2774;
t2672 = (-t2728 * t2756 + t2695) * t2772;
t2671 = (-t2727 * t2756 + t2694) * t2772;
t2670 = (-t2726 * t2755 + t2693) * t2770;
t2669 = (-t2725 * t2755 + t2692) * t2770;
t2657 = -t2691 * t2952 + (-pkin(2) * t2956 - (pkin(1) * t3038 + t2885 * t2751) * t2774) * t2741;
t2656 = -t2690 * t2953 + (-pkin(2) * t2958 - (pkin(1) * t3040 + t2886 * t2750) * t2772) * t2739;
t2655 = -t2689 * t2954 + (-pkin(2) * t2960 - (pkin(1) * t3042 + t2887 * t2749) * t2770) * t2737;
t2654 = -t2688 * t2952 - (-pkin(1) * t2697 + t2885 * t2730) * t2774;
t2653 = -t2687 * t2952 - (-pkin(1) * t2696 + t2885 * t2729) * t2774;
t2652 = -t2686 * t2953 - (-pkin(1) * t2695 + t2886 * t2728) * t2772;
t2651 = -t2685 * t2953 - (-pkin(1) * t2694 + t2886 * t2727) * t2772;
t2650 = -t2684 * t2954 - (-pkin(1) * t2693 + t2887 * t2726) * t2770;
t2649 = -t2683 * t2954 - (-pkin(1) * t2692 + t2887 * t2725) * t2770;
t2648 = t2730 * t2848 - ((-t2697 + 0.2e1 * t3031) * t2795 + t2730 * t2891) * t2975 - t2688 * t2949;
t2647 = t2729 * t2848 - ((-t2696 + 0.2e1 * t3032) * t2795 + t2729 * t2891) * t2975 - t2687 * t2949;
t2646 = t2728 * t2849 - ((-t2695 + 0.2e1 * t3033) * t2795 + t2728 * t2892) * t2982 - t2686 * t2950;
t2645 = t2727 * t2849 - ((-t2694 + 0.2e1 * t3034) * t2795 + t2727 * t2892) * t2982 - t2685 * t2950;
t2644 = t2726 * t2850 - ((-t2693 + 0.2e1 * t3035) * t2795 + t2726 * t2893) * t2989 - t2684 * t2951;
t2643 = t2725 * t2850 - ((-t2692 + 0.2e1 * t3036) * t2795 + t2725 * t2893) * t2989 - t2683 * t2951;
t2642 = 0.2e1 * t2730 * t2880 + 0.2e1 * (t2688 * t2794 + t2730 * t2879) * t2812 + 0.2e1 * t2688 * t2961;
t2641 = 0.2e1 * t2729 * t2880 + 0.2e1 * (t2687 * t2794 + t2729 * t2879) * t2812 + 0.2e1 * t2687 * t2961;
t2640 = 0.2e1 * t2728 * t2882 + 0.2e1 * (t2686 * t2794 + t2728 * t2881) * t2810 + 0.2e1 * t2686 * t2962;
t2639 = 0.2e1 * t2727 * t2882 + 0.2e1 * (t2685 * t2794 + t2727 * t2881) * t2810 + 0.2e1 * t2685 * t2962;
t2638 = 0.2e1 * t2726 * t2884 + 0.2e1 * (t2684 * t2794 + t2726 * t2883) * t2808 + 0.2e1 * t2684 * t2963;
t2637 = 0.2e1 * t2725 * t2884 + 0.2e1 * (t2683 * t2794 + t2725 * t2883) * t2808 + 0.2e1 * t2683 * t2963;
t2636 = t2842 * t3056 + (0.2e1 * t2968 + (pkin(2) * t2888 - t2801) * t2995) * t2812 + (-t2691 * t2795 - t2895 / 0.2e1) * t3043;
t2635 = t2843 * t3056 + (0.2e1 * t2969 + (pkin(2) * t2889 - t2800) * t2998) * t2810 + (-t2690 * t2795 - t2896 / 0.2e1) * t3044;
t2634 = t2844 * t3056 + (0.2e1 * t2970 + (pkin(2) * t2890 - t2799) * t3001) * t2808 + (-t2689 * t2795 - t2897 / 0.2e1) * t3045;
t2633 = t2842 * t3055 + (-t2957 - ((0.2e1 * t3020 + t3038) * t2795 + t2751 * t2891) * t2774) * t2741 * t2812 + (t2911 / 0.2e1 - t2968) * t3043;
t2632 = t2843 * t3055 + (-t2959 - ((0.2e1 * t3021 + t3040) * t2795 + t2750 * t2892) * t2772) * t2739 * t2810 + (t2917 / 0.2e1 - t2969) * t3044;
t2631 = t2844 * t3055 + (-t2967 - ((0.2e1 * t3022 + t3042) * t2795 + t2749 * t2893) * t2770) * t2737 * t2808 + (t2923 / 0.2e1 - t2970) * t3045;
t1 = [(t2720 * t2771 + t2722 * t2773 + t2724 * t2775) * MDP(1) + (t2720 * t2988 + t2722 * t2981 + t2724 * t2974) * MDP(4) + (t2670 * t2693 * t2770 + t2672 * t2695 * t2772 + t2674 * t2697 * t2774) * MDP(14) + MDP(15) + ((-t2648 * t2774 + t2932) * MDP(11) + (-t2642 * t2774 + t2931) * MDP(12) - t2654 * t3016) * t2730 + ((-t2646 * t2772 + t2936) * MDP(11) + (-t2640 * t2772 + t2935) * MDP(12) - t2652 * t3017) * t2728 + ((-t2644 * t2770 + t2940) * MDP(11) + (-t2638 * t2770 + t2939) * MDP(12) - t2650 * t3018) * t2726 + (t2720 * t2902 + t2722 * t2900 + t2724 * t2898) * t3047 + (t2720 * t2987 + t2722 * t2980 + t2724 * t2973) * t3046 + ((t2720 * t2985 + t2722 * t2978 + t2724 * t2971) * MDP(9) + (-t2720 * t2986 - t2722 * t2979 - t2724 * t2972) * MDP(10)) * t3057; (-t2643 * t3013 - t2645 * t3011 - t2647 * t3009 + t2725 * t2940 + t2727 * t2936 + t2729 * t2932) * MDP(11) + (-t2637 * t3013 - t2639 * t3011 - t2641 * t3009 + t2725 * t2939 + t2727 * t2935 + t2729 * t2931) * MDP(12) + (-(t2653 * t2730 - t2673 * t2697) * t2774 - (t2651 * t2728 - t2671 * t2695) * t2772 - (t2649 * t2726 - t2669 * t2693) * t2770) * MDP(14) + t2833; (-t2698 * t3013 - t2699 * t3011 - t2700 * t3009) * MDP(9) + (-t2701 * t3013 - t2702 * t3011 - t2703 * t3009) * MDP(10) + (-t2631 * t3013 - t2632 * t3011 - t2633 * t3009 + t2693 * t2875 + t2695 * t2874 + t2697 * t2873) * MDP(11) + (-t2634 * t3013 - t2635 * t3011 - t2636 * t3009 + t2693 * t2872 + t2695 * t2871 + t2697 * t2870) * MDP(12) + (-t2707 * t3013 - t2708 * t3011 - t2709 * t3009) * MDP(13) + (-(t2657 * t2730 - t2678 * t2697) * t2774 - (t2656 * t2728 - t2677 * t2695) * t2772 - (t2655 * t2726 - t2676 * t2693) * t2770) * MDP(14) + t2836; (-t2644 * t3014 - t2646 * t3012 - t2648 * t3010 + t2726 * t2942 + t2728 * t2938 + t2730 * t2934) * MDP(11) + (-t2638 * t3014 - t2640 * t3012 - t2642 * t3010 + t2726 * t2941 + t2728 * t2937 + t2730 * t2933) * MDP(12) + (-(t2654 * t2729 - t2674 * t2696) * t2774 - (t2652 * t2727 - t2672 * t2694) * t2772 - (t2650 * t2725 - t2670 * t2692) * t2770) * MDP(14) + t2833; (t2719 * t2771 + t2721 * t2773 + t2723 * t2775) * MDP(1) + (t2719 * t2988 + t2721 * t2981 + t2723 * t2974) * MDP(4) + (t2669 * t2692 * t2770 + t2671 * t2694 * t2772 + t2673 * t2696 * t2774) * MDP(14) + MDP(15) + ((-t2647 * t2774 + t2934) * MDP(11) + (-t2641 * t2774 + t2933) * MDP(12) - t2653 * t3016) * t2729 + ((-t2645 * t2772 + t2938) * MDP(11) + (-t2639 * t2772 + t2937) * MDP(12) - t2651 * t3017) * t2727 + ((-t2643 * t2770 + t2942) * MDP(11) + (-t2637 * t2770 + t2941) * MDP(12) - t2649 * t3018) * t2725 + (t2719 * t2902 + t2721 * t2900 + t2723 * t2898) * t3047 + (t2719 * t2987 + t2721 * t2980 + t2723 * t2973) * t3046 + ((t2719 * t2985 + t2721 * t2978 + t2723 * t2971) * MDP(9) + (-t2719 * t2986 - t2721 * t2979 - t2723 * t2972) * MDP(10)) * t3057; (-t2698 * t3014 - t2699 * t3012 - t2700 * t3010) * MDP(9) + (-t2701 * t3014 - t2702 * t3012 - t2703 * t3010) * MDP(10) + (-t2631 * t3014 - t2632 * t3012 - t2633 * t3010 + t2692 * t2875 + t2694 * t2874 + t2696 * t2873) * MDP(11) + (-t2634 * t3014 - t2635 * t3012 - t2636 * t3010 + t2692 * t2872 + t2694 * t2871 + t2696 * t2870) * MDP(12) + (-t2707 * t3014 - t2708 * t3012 - t2709 * t3010) * MDP(13) + (-(t2657 * t2729 - t2678 * t2696) * t2774 - (t2656 * t2727 - t2677 * t2694) * t2772 - (t2655 * t2725 - t2676 * t2692) * t2770) * MDP(14) + t2837; (t2824 * pkin(5) + (t2726 * t2867 + t2728 * t2863 + t2730 * t2859) * t3057) * MDP(9) + (t2823 * pkin(5) + (-t2726 * t2868 - t2728 * t2864 - t2730 * t2860) * t3057) * MDP(10) + (-t2644 * t2927 - t2646 * t2921 - t2648 * t2915 + t2726 * t2832 + t2728 * t2830 + t2730 * t2828) * MDP(11) + (-t2638 * t2927 - t2640 * t2921 - t2642 * t2915 + t2726 * t2831 + t2728 * t2829 + t2730 * t2827) * MDP(12) + (pkin(2) * t2824 + t2726 * t2847 + t2728 * t2846 + t2730 * t2845) * MDP(13) + (-(t2751 * t2654 - t2674 * t3037) * t2996 - (t2750 * t2652 - t2672 * t3039) * t2999 - (t2749 * t2650 - t2670 * t3041) * t3002 + (t2726 * t2866 + t2728 * t2862 + t2730 * t2858) * pkin(2)) * MDP(14) + t2836; (t2826 * pkin(5) + (t2725 * t2867 + t2727 * t2863 + t2729 * t2859) * t3057) * MDP(9) + (t2825 * pkin(5) + (-t2725 * t2868 - t2727 * t2864 - t2729 * t2860) * t3057) * MDP(10) + (-t2643 * t2927 - t2645 * t2921 - t2647 * t2915 + t2725 * t2832 + t2727 * t2830 + t2729 * t2828) * MDP(11) + (-t2637 * t2927 - t2639 * t2921 - t2641 * t2915 + t2725 * t2831 + t2727 * t2829 + t2729 * t2827) * MDP(12) + (pkin(2) * t2826 + t2725 * t2847 + t2727 * t2846 + t2729 * t2845) * MDP(13) + (-(t2751 * t2653 - t2673 * t3037) * t2996 - (t2750 * t2651 - t2671 * t3039) * t2999 - (t2749 * t2649 - t2669 * t3041) * t3002 + (t2725 * t2866 + t2727 * t2862 + t2729 * t2858) * pkin(2)) * MDP(14) + t2837; (t2910 + t2916 + t2922) * MDP(1) + (t2788 * t2922 + t2789 * t2916 + t2790 * t2910) * MDP(4) + (t2898 * t3052 + t2900 * t3053 + t2902 * t3054) * t3047 - 0.2e1 * t2822 * MDP(6) - 0.2e1 * t2821 * MDP(7) + (t2742 + t2740 + t2738) * MDP(8) + (pkin(5) * t2822 - t2698 * t2927 - t2699 * t2921 - t2700 * t2915) * MDP(9) + (pkin(5) * t2821 - t2701 * t2927 - t2702 * t2921 - t2703 * t2915) * MDP(10) + (t2733 * t2838 - t2852 * t2997 - t2854 * t3000 + (-t2706 * t2795 - (-t2812 * t2895 + t2633) * t2992) * t2741 + (-t2705 * t2795 - (-t2810 * t2896 + t2632) * t2993) * t2739 + (-t2704 * t2795 - (-t2808 * t2897 + t2631) * t2994) * t2737) * MDP(11) + (t2736 * t2838 + t2851 * t2997 + t2853 * t3000 + (t2706 * t2794 - (-t2812 * t2911 + t2636) * t2992) * t2741 + (t2705 * t2794 - (-t2810 * t2917 + t2635) * t2993) * t2739 + (t2704 * t2794 - (-t2808 * t2923 + t2634) * t2994) * t2737) * MDP(12) + (pkin(2) * t2822 - t2707 * t2927 - t2708 * t2921 - t2709 * t2915) * MDP(13) + ((-t2657 * t2992 - t2774 * t2678 * t3038 + (pkin(2) + t2855) * pkin(2) * t2741) * t2741 + (-t2656 * t2993 - t2772 * t2677 * t3040 + (pkin(2) + t2856) * pkin(2) * t2739) * t2739 + (-t2655 * t2994 - t2770 * t2676 * t3042 + (pkin(2) + t2857) * pkin(2) * t2737) * t2737) * MDP(14) + MDP(15);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
