% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:12
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR8V2G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:11:49
% EndTime: 2022-11-07 13:11:56
% DurationCPUTime: 6.88s
% Computational Cost: add. (8092->475), mult. (9426->970), div. (1521->12), fcn. (7788->35), ass. (0->392)
t1113 = 2 * pkin(1);
t858 = sin(pkin(7));
t1112 = 0.2e1 * t858;
t859 = cos(pkin(7));
t1111 = -0.2e1 * t859;
t872 = cos(qJ(2,3));
t840 = t872 * pkin(2);
t819 = t840 + pkin(1);
t874 = cos(qJ(2,2));
t841 = t874 * pkin(2);
t820 = t841 + pkin(1);
t876 = cos(qJ(2,1));
t842 = t876 * pkin(2);
t821 = t842 + pkin(1);
t849 = qJ(2,3) + pkin(7);
t1083 = pkin(3) * cos(t849);
t810 = t840 + t1083;
t802 = 0.1e1 / t810 ^ 2;
t866 = sin(qJ(2,3));
t1086 = pkin(2) * t866;
t813 = pkin(3) * sin(t849) + t1086;
t1110 = t802 * t813 ^ 2;
t850 = qJ(2,2) + pkin(7);
t1082 = pkin(3) * cos(t850);
t811 = t841 + t1082;
t804 = 0.1e1 / t811 ^ 2;
t868 = sin(qJ(2,2));
t1085 = pkin(2) * t868;
t814 = pkin(3) * sin(t850) + t1085;
t1109 = t804 * t814 ^ 2;
t851 = qJ(2,1) + pkin(7);
t1081 = pkin(3) * cos(t851);
t812 = t842 + t1081;
t806 = 0.1e1 / t812 ^ 2;
t870 = sin(qJ(2,1));
t1084 = pkin(2) * t870;
t815 = pkin(3) * sin(t851) + t1084;
t1108 = t806 * t815 ^ 2;
t1107 = -2 * pkin(1);
t1105 = -0.2e1 * pkin(2);
t1104 = 2 * pkin(5);
t1103 = -0.2e1 * t866;
t1102 = -0.2e1 * t868;
t1101 = -0.2e1 * t870;
t1018 = 0.2e1 * pkin(2) * pkin(3);
t878 = 0.2e1 * qJ(2,3);
t882 = pkin(3) ^ 2;
t883 = pkin(2) ^ 2;
t774 = sin(t878 + pkin(7)) * t1018 + t882 * sin(0.2e1 * t849) + t883 * sin(t878) + t813 * t1113;
t1100 = -t774 / 0.2e1;
t1099 = t774 / 0.2e1;
t879 = 0.2e1 * qJ(2,2);
t775 = sin(t879 + pkin(7)) * t1018 + t882 * sin(0.2e1 * t850) + t883 * sin(t879) + t814 * t1113;
t1098 = -t775 / 0.2e1;
t1097 = t775 / 0.2e1;
t880 = 0.2e1 * qJ(2,1);
t776 = sin(t880 + pkin(7)) * t1018 + t882 * sin(0.2e1 * t851) + t883 * sin(t880) + t815 * t1113;
t1096 = -t776 / 0.2e1;
t1095 = t776 / 0.2e1;
t860 = legFrame(3,3);
t828 = sin(t860);
t831 = cos(t860);
t867 = sin(qJ(1,3));
t873 = cos(qJ(1,3));
t789 = t828 * t873 + t831 * t867;
t1094 = pkin(1) * t789;
t790 = -t828 * t867 + t831 * t873;
t1093 = pkin(1) * t790;
t861 = legFrame(2,3);
t829 = sin(t861);
t832 = cos(t861);
t869 = sin(qJ(1,2));
t875 = cos(qJ(1,2));
t791 = t829 * t875 + t832 * t869;
t1092 = pkin(1) * t791;
t792 = -t829 * t869 + t832 * t875;
t1091 = pkin(1) * t792;
t862 = legFrame(1,3);
t830 = sin(t862);
t833 = cos(t862);
t871 = sin(qJ(1,1));
t877 = cos(qJ(1,1));
t793 = t830 * t877 + t833 * t871;
t1090 = pkin(1) * t793;
t794 = -t830 * t871 + t833 * t877;
t1089 = pkin(1) * t794;
t1088 = pkin(2) * t858;
t1087 = pkin(2) * t859;
t1080 = t813 * pkin(1);
t1079 = t814 * pkin(1);
t1078 = t815 * pkin(1);
t865 = qJ(3,1) + pkin(5);
t864 = qJ(3,2) + pkin(5);
t863 = qJ(3,3) + pkin(5);
t843 = -pkin(6) - t863;
t834 = 1 / t843;
t1077 = t789 * t834;
t1076 = t790 * t834;
t844 = -pkin(6) - t864;
t836 = 1 / t844;
t1075 = t791 * t836;
t1074 = t792 * t836;
t845 = -pkin(6) - t865;
t838 = 1 / t845;
t1073 = t793 * t838;
t1072 = t794 * t838;
t835 = 1 / t843 ^ 2;
t1029 = t858 * t866;
t898 = -t859 * t872 + t1029;
t1071 = t898 * t835;
t837 = 1 / t844 ^ 2;
t1021 = t868 * t858;
t897 = -t859 * t874 + t1021;
t1070 = t897 * t837;
t1028 = t858 * t870;
t797 = -t859 * t876 + t1028;
t839 = 1 / t845 ^ 2;
t1069 = t797 * t839;
t1027 = t859 * t866;
t798 = t858 * t872 + t1027;
t1068 = t798 * t835;
t1020 = t868 * t859;
t799 = t858 * t874 + t1020;
t1067 = t799 * t837;
t1026 = t859 * t870;
t800 = t858 * t876 + t1026;
t1066 = t800 * t839;
t801 = 0.1e1 / t810;
t1065 = t801 * t834;
t1064 = t801 * t859;
t1063 = t802 * t813;
t803 = 0.1e1 / t811;
t1062 = t803 * t836;
t1061 = t803 * t859;
t1060 = t804 * t814;
t805 = 0.1e1 / t812;
t1059 = t805 * t838;
t1058 = t805 * t859;
t1057 = t813 * t834;
t1056 = t814 * t836;
t1055 = t815 * t838;
t1054 = t834 * t863;
t1053 = t834 * t866;
t1052 = t834 * t872;
t852 = t866 ^ 2;
t1051 = t835 * t852;
t1050 = t835 * t863;
t1049 = t835 * t866;
t1048 = t835 * t872;
t1047 = t836 * t864;
t1046 = t836 * t868;
t1045 = t836 * t874;
t853 = t868 ^ 2;
t1044 = t837 * t853;
t1043 = t837 * t864;
t1042 = t837 * t868;
t1041 = t837 * t874;
t1040 = t838 * t865;
t1039 = t838 * t870;
t1038 = t838 * t876;
t854 = t870 ^ 2;
t1037 = t839 * t854;
t1036 = t839 * t865;
t1035 = t839 * t870;
t1034 = t839 * t876;
t753 = (t1080 - t774 / 0.4e1) * t1065;
t1033 = t858 * t753;
t754 = (t1079 - t775 / 0.4e1) * t1062;
t1032 = t858 * t754;
t755 = (t1078 - t776 / 0.4e1) * t1059;
t1031 = t858 * t755;
t1030 = t858 * t863;
t1025 = t863 * t866;
t1024 = t864 * t858;
t1023 = t865 * t858;
t1022 = t865 * t870;
t1019 = t868 * t864;
t1017 = pkin(1) ^ 2 + pkin(5) ^ 2;
t1015 = 0.2e1 * t840;
t1014 = 0.2e1 * t841;
t1013 = 0.2e1 * t842;
t1012 = -0.2e1 * t1029;
t1011 = -0.2e1 * t1028;
t1010 = -0.2e1 * t1021;
t1009 = t834 * t1087;
t1008 = t836 * t1087;
t1007 = t838 * t1087;
t777 = t819 * t867 + t843 * t873;
t781 = t819 * t873 - t843 * t867;
t756 = t789 * t1083 + t777 * t831 + t781 * t828;
t1006 = t756 * t1071;
t1005 = t756 * t1068;
t757 = t790 * t1083 - t777 * t828 + t781 * t831;
t1004 = t757 * t1071;
t1003 = t757 * t1068;
t778 = t820 * t869 + t844 * t875;
t782 = t820 * t875 - t844 * t869;
t758 = t791 * t1082 + t778 * t832 + t782 * t829;
t1002 = t758 * t1070;
t1001 = t758 * t1067;
t759 = t792 * t1082 - t778 * t829 + t782 * t832;
t1000 = t759 * t1070;
t999 = t759 * t1067;
t779 = t821 * t871 + t845 * t877;
t780 = t821 * t877 - t845 * t871;
t760 = t793 * t1081 + t779 * t833 + t780 * t830;
t998 = t760 * t1069;
t997 = t760 * t1066;
t761 = t794 * t1081 - t779 * t830 + t780 * t833;
t996 = t761 * t1069;
t995 = t761 * t1066;
t994 = t789 * t790 * t835;
t993 = t791 * t792 * t837;
t992 = t793 * t794 * t839;
t991 = t801 * t1057;
t990 = t801 * t813 * t835;
t989 = t801 * t1053;
t988 = t801 * t1052;
t987 = t863 * t1064;
t986 = t835 * t1110;
t985 = t803 * t1056;
t984 = t803 * t814 * t837;
t983 = t803 * t1046;
t982 = t803 * t1045;
t981 = t864 * t1061;
t980 = t837 * t1109;
t979 = t805 * t1055;
t978 = t805 * t815 * t839;
t977 = t805 * t1039;
t976 = t805 * t1038;
t975 = t865 * t1058;
t974 = t839 * t1108;
t973 = t813 * t1053;
t972 = t813 * t1052;
t971 = t814 * t1046;
t970 = t814 * t1045;
t969 = t815 * t1039;
t968 = t815 * t1038;
t967 = t834 * t1025;
t966 = t866 * t1048;
t965 = t836 * t1019;
t964 = t868 * t1041;
t963 = t838 * t1022;
t962 = t870 * t1034;
t961 = t801 * t1030;
t960 = t803 * t1024;
t959 = t805 * t1023;
t955 = t839 * t1095;
t954 = pkin(2) * t1012;
t953 = pkin(2) * t1010;
t952 = pkin(2) * t1011;
t951 = 0.2e1 * t973;
t950 = 0.2e1 * t971;
t949 = 0.2e1 * t969;
t855 = t872 ^ 2;
t948 = t855 * t883 + ((t1104 + qJ(3,3)) * qJ(3,3)) + t1017;
t856 = t874 ^ 2;
t947 = t856 * t883 + ((t1104 + qJ(3,2)) * qJ(3,2)) + t1017;
t857 = t876 ^ 2;
t946 = t857 * t883 + ((t1104 + qJ(3,1)) * qJ(3,1)) + t1017;
t945 = t834 * t855 * t1088;
t944 = t866 * t1009;
t943 = t836 * t856 * t1088;
t942 = t868 * t1008;
t941 = t838 * t857 * t1088;
t940 = t870 * t1007;
t939 = t872 * t994;
t938 = t874 * t993;
t937 = t876 * t992;
t936 = t898 * t990;
t935 = t897 * t984;
t934 = t797 * t978;
t933 = t798 * t990;
t932 = t799 * t984;
t931 = t800 * t978;
t930 = t852 * t990;
t929 = t866 * t990;
t928 = t872 * t990;
t927 = t801 * t967;
t926 = t853 * t984;
t925 = t868 * t984;
t924 = t874 * t984;
t923 = t803 * t965;
t922 = t854 * t978;
t921 = t870 * t978;
t920 = t876 * t978;
t919 = t805 * t963;
t918 = t813 * t967;
t917 = t814 * t965;
t916 = t815 * t963;
t915 = t1071 * t1100;
t914 = t1068 * t1099;
t913 = t1070 * t1098;
t912 = t1067 * t1097;
t911 = -0.2e1 * t856 * t1008;
t910 = -0.2e1 * t857 * t1007;
t909 = -0.2e1 * t855 * t1009;
t908 = 0.2e1 * t863 * t990;
t907 = 0.2e1 * t864 * t984;
t906 = 0.2e1 * t865 * t978;
t905 = pkin(2) * t855 * t991;
t904 = pkin(2) * t856 * t985;
t903 = pkin(2) * t857 * t979;
t902 = t866 * t928;
t901 = t868 * t924;
t900 = t870 * t920;
t899 = t806 * t815 * t955;
t896 = t789 * t989 + t791 * t983 + t793 * t977;
t895 = t789 * t988 + t791 * t982 + t793 * t976;
t894 = t790 * t989 + t792 * t983 + t794 * t977;
t893 = t790 * t988 + t792 * t982 + t794 * t976;
t892 = t802 * t973 + t804 * t971 + t806 * t969;
t891 = t802 * t972 + t804 * t970 + t806 * t968;
t890 = t801 * (t798 * t1054 - t915);
t889 = t801 * (-t898 * t1054 + t914);
t888 = t803 * (t799 * t1047 - t913);
t887 = t803 * (-t897 * t1047 + t912);
t886 = t805 * (t800 * t1040 + t797 * t955);
t885 = t805 * (-t797 * t1040 + t800 * t955);
t788 = t794 ^ 2;
t787 = t793 ^ 2;
t786 = t792 ^ 2;
t785 = t791 ^ 2;
t784 = t790 ^ 2;
t783 = t789 ^ 2;
t773 = (-0.2e1 * t815 * t1040 - t1084) * t805;
t772 = (-0.2e1 * t814 * t1047 - t1085) * t803;
t771 = (-0.2e1 * t813 * t1054 - t1086) * t801;
t770 = (t1105 - t916) * t805;
t769 = (t1105 - t917) * t803;
t768 = (t1105 - t918) * t801;
t767 = (pkin(1) * t949 - pkin(5) * t876) * t805;
t766 = (pkin(1) * t950 - pkin(5) * t874) * t803;
t765 = (pkin(1) * t951 - pkin(5) * t872) * t801;
t764 = (-pkin(5) * t870 + t968 * t1107) * t805;
t763 = (-pkin(5) * t868 + t970 * t1107) * t803;
t762 = (-pkin(5) * t866 + t972 * t1107) * t801;
t752 = (t1089 - t761 / 0.2e1) * t838;
t751 = (t1090 - t760 / 0.2e1) * t838;
t750 = (t1091 - t759 / 0.2e1) * t836;
t749 = (t1092 - t758 / 0.2e1) * t836;
t748 = (t1093 - t757 / 0.2e1) * t834;
t747 = (t1094 - t756 / 0.2e1) * t834;
t742 = (-t815 * t821 + t1095) * t1059;
t741 = (-t814 * t820 + t1097) * t1062;
t740 = (-t813 * t819 + t1099) * t1065;
t739 = t992 + t993 + t994;
t738 = (-t794 * t821 + t761) * t838;
t737 = (-t793 * t821 + t760) * t838;
t736 = (-t792 * t820 + t759) * t836;
t735 = (-t791 * t820 + t758) * t836;
t734 = (-t790 * t819 + t757) * t834;
t733 = (-t789 * t819 + t756) * t834;
t732 = t852 * t994 + t853 * t993 + t854 * t992;
t731 = 0.2e1 * t863 * t994 + 0.2e1 * t864 * t993 + 0.2e1 * t865 * t992;
t730 = (t937 + t938 + t939) * t1113;
t729 = (-t866 * t994 - t868 * t993 - t870 * t992) * t1113;
t728 = 0.2e1 * t866 * t939 + 0.2e1 * t868 * t938 + 0.2e1 * t870 * t937;
t727 = t790 * t990 + t792 * t984 + t794 * t978;
t726 = t789 * t990 + t791 * t984 + t793 * t978;
t725 = t790 * t930 + t792 * t926 + t794 * t922;
t724 = t789 * t930 + t791 * t926 + t793 * t922;
t723 = 0.2e1 * t790 * t902 + 0.2e1 * t792 * t901 + 0.2e1 * t794 * t900;
t722 = 0.2e1 * t789 * t902 + 0.2e1 * t791 * t901 + 0.2e1 * t793 * t900;
t721 = -t755 * t1013 + (-pkin(2) * t1022 - (pkin(1) * t1096 + t946 * t815) * t838) * t805;
t720 = -t754 * t1014 + (-pkin(2) * t1019 - (pkin(1) * t1098 + t947 * t814) * t836) * t803;
t719 = -t753 * t1015 + (-pkin(2) * t1025 - (pkin(1) * t1100 + t948 * t813) * t834) * t801;
t718 = -t752 * t1013 - (-pkin(1) * t761 + t946 * t794) * t838;
t717 = -t751 * t1013 - (-pkin(1) * t760 + t946 * t793) * t838;
t716 = -t750 * t1014 - (-pkin(1) * t759 + t947 * t792) * t836;
t715 = -t749 * t1014 - (-pkin(1) * t758 + t947 * t791) * t836;
t714 = -t748 * t1015 - (-pkin(1) * t757 + t948 * t790) * t834;
t713 = -t747 * t1015 - (-pkin(1) * t756 + t948 * t789) * t834;
t712 = t794 * t910 - ((-t761 + 0.2e1 * t1089) * t859 + t794 * t952) * t1038 - t752 * t1011;
t711 = t793 * t910 - ((-t760 + 0.2e1 * t1090) * t859 + t793 * t952) * t1038 - t751 * t1011;
t710 = t792 * t911 - ((-t759 + 0.2e1 * t1091) * t859 + t792 * t953) * t1045 - t750 * t1010;
t709 = t791 * t911 - ((-t758 + 0.2e1 * t1092) * t859 + t791 * t953) * t1045 - t749 * t1010;
t708 = t790 * t909 - ((-t757 + 0.2e1 * t1093) * t859 + t790 * t954) * t1052 - t748 * t1012;
t707 = t789 * t909 - ((-t756 + 0.2e1 * t1094) * t859 + t789 * t954) * t1052 - t747 * t1012;
t706 = 0.2e1 * t794 * t941 + 0.2e1 * (t752 * t858 + t794 * t940) * t876 + 0.2e1 * t752 * t1026;
t705 = 0.2e1 * t793 * t941 + 0.2e1 * (t751 * t858 + t793 * t940) * t876 + 0.2e1 * t751 * t1026;
t704 = 0.2e1 * t792 * t943 + 0.2e1 * (t750 * t858 + t792 * t942) * t874 + 0.2e1 * t750 * t1020;
t703 = 0.2e1 * t791 * t943 + 0.2e1 * (t749 * t858 + t791 * t942) * t874 + 0.2e1 * t749 * t1020;
t702 = 0.2e1 * t790 * t945 + 0.2e1 * (t858 * t748 + t790 * t944) * t872 + 0.2e1 * t748 * t1027;
t701 = 0.2e1 * t789 * t945 + 0.2e1 * (t858 * t747 + t789 * t944) * t872 + 0.2e1 * t747 * t1027;
t700 = t903 * t1112 + (0.2e1 * t1031 + (pkin(2) * t949 - t865) * t1058) * t876 + (-t755 * t859 - t959 / 0.2e1) * t1101;
t699 = t904 * t1112 + (0.2e1 * t1032 + (pkin(2) * t950 - t864) * t1061) * t874 + (-t754 * t859 - t960 / 0.2e1) * t1102;
t698 = t905 * t1112 + (0.2e1 * t1033 + (pkin(2) * t951 - t863) * t1064) * t872 + (-t753 * t859 - t961 / 0.2e1) * t1103;
t697 = t903 * t1111 + (-t1023 - ((0.2e1 * t1078 + t1096) * t859 + t815 * t952) * t838) * t805 * t876 + (t975 / 0.2e1 - t1031) * t1101;
t696 = t904 * t1111 + (-t1024 - ((0.2e1 * t1079 + t1098) * t859 + t814 * t953) * t836) * t803 * t874 + (t981 / 0.2e1 - t1032) * t1102;
t695 = t905 * t1111 + (-t1030 - ((0.2e1 * t1080 + t1100) * t859 + t813 * t954) * t834) * t801 * t872 + (t987 / 0.2e1 - t1033) * t1103;
t1 = [t784 * t835 + t786 * t837 + t788 * t839, 0, 0, t788 * t1037 + t786 * t1044 + t784 * t1051, 0.2e1 * t784 * t966 + 0.2e1 * t786 * t964 + 0.2e1 * t788 * t962, 0, 0, 0, (t788 * t1034 + t786 * t1041 + t784 * t1048) * t1113, (-t788 * t1035 - t786 * t1042 - t784 * t1049) * t1113, (-t712 * t838 + t996) * t794 + (-t710 * t836 + t1000) * t792 + (-t708 * t834 + t1004) * t790, (-t706 * t838 + t995) * t794 + (-t704 * t836 + t999) * t792 + (-t702 * t834 + t1003) * t790, 0.2e1 * t788 * t1036 + 0.2e1 * t786 * t1043 + 0.2e1 * t784 * t1050, -(t718 * t794 - t738 * t761) * t838 - (t716 * t792 - t736 * t759) * t836 - (t714 * t790 - t734 * t757) * t834, 1; t739, 0, 0, t732, t728, 0, 0, 0, t730, t729, t791 * t1000 + t789 * t1004 - t711 * t1072 - t709 * t1074 - t707 * t1076 + t793 * t996, t789 * t1003 - t705 * t1072 - t703 * t1074 - t701 * t1076 + t791 * t999 + t793 * t995, t731, -(t717 * t794 - t737 * t761) * t838 - (t715 * t792 - t735 * t759) * t836 - (t713 * t790 - t733 * t757) * t834, 0; t727, 0, 0, t725, t723, -t894, -t893, 0, -t764 * t1072 - t763 * t1074 - t762 * t1076, -t767 * t1072 - t766 * t1074 - t765 * t1076, -t697 * t1072 - t696 * t1074 - t695 * t1076 + t757 * t936 + t759 * t935 + t761 * t934, -t700 * t1072 - t699 * t1074 - t698 * t1076 + t757 * t933 + t759 * t932 + t761 * t931, -t773 * t1072 - t772 * t1074 - t771 * t1076, -(t721 * t794 - t742 * t761) * t838 - (t720 * t792 - t741 * t759) * t836 - (t719 * t790 - t740 * t757) * t834, 0; t739, 0, 0, t732, t728, 0, 0, 0, t730, t729, t792 * t1002 + t790 * t1006 - t712 * t1073 - t710 * t1075 - t708 * t1077 + t794 * t998, t792 * t1001 + t790 * t1005 - t706 * t1073 - t704 * t1075 - t702 * t1077 + t794 * t997, t731, -(t718 * t793 - t738 * t760) * t838 - (t716 * t791 - t736 * t758) * t836 - (t714 * t789 - t734 * t756) * t834, 0; t783 * t835 + t785 * t837 + t787 * t839, 0, 0, t787 * t1037 + t785 * t1044 + t783 * t1051, 0.2e1 * t783 * t966 + 0.2e1 * t785 * t964 + 0.2e1 * t787 * t962, 0, 0, 0, (t787 * t1034 + t785 * t1041 + t783 * t1048) * t1113, (-t787 * t1035 - t785 * t1042 - t783 * t1049) * t1113, (-t711 * t838 + t998) * t793 + (-t709 * t836 + t1002) * t791 + (-t707 * t834 + t1006) * t789, (-t705 * t838 + t997) * t793 + (-t703 * t836 + t1001) * t791 + (-t701 * t834 + t1005) * t789, 0.2e1 * t787 * t1036 + 0.2e1 * t785 * t1043 + 0.2e1 * t783 * t1050, -(t717 * t793 - t737 * t760) * t838 - (t715 * t791 - t735 * t758) * t836 - (t713 * t789 - t733 * t756) * t834, 1; t726, 0, 0, t724, t722, -t896, -t895, 0, -t764 * t1073 - t763 * t1075 - t762 * t1077, -t767 * t1073 - t766 * t1075 - t765 * t1077, -t697 * t1073 - t696 * t1075 - t695 * t1077 + t756 * t936 + t758 * t935 + t760 * t934, -t700 * t1073 - t699 * t1075 - t698 * t1077 + t756 * t933 + t758 * t932 + t760 * t931, -t773 * t1073 - t772 * t1075 - t771 * t1077, -(t721 * t793 - t742 * t760) * t838 - (t720 * t791 - t741 * t758) * t836 - (t719 * t789 - t740 * t756) * t834, 0; t727, 0, 0, t725, t723, -t894, -t893, 0, t894 * pkin(5) + (t790 * t928 + t792 * t924 + t794 * t920) * t1113, t893 * pkin(5) + (-t790 * t929 - t792 * t925 - t794 * t921) * t1113, -t708 * t991 - t710 * t985 - t712 * t979 + t790 * t890 + t792 * t888 + t794 * t886, -t702 * t991 - t704 * t985 - t706 * t979 + t790 * t889 + t792 * t887 + t794 * t885, t894 * pkin(2) + t790 * t908 + t792 * t907 + t794 * t906, -(-t738 * t1095 + t815 * t718) * t1059 - (-t736 * t1097 + t814 * t716) * t1062 - (-t734 * t1099 + t813 * t714) * t1065 + (t790 * t927 + t792 * t923 + t794 * t919) * pkin(2), 0; t726, 0, 0, t724, t722, -t896, -t895, 0, t896 * pkin(5) + (t789 * t928 + t791 * t924 + t793 * t920) * t1113, t895 * pkin(5) + (-t789 * t929 - t791 * t925 - t793 * t921) * t1113, -t707 * t991 - t709 * t985 - t711 * t979 + t789 * t890 + t791 * t888 + t793 * t886, -t701 * t991 - t703 * t985 - t705 * t979 + t789 * t889 + t791 * t887 + t793 * t885, t896 * pkin(2) + t789 * t908 + t791 * t907 + t793 * t906, -(-t737 * t1095 + t815 * t717) * t1059 - (-t735 * t1097 + t814 * t715) * t1062 - (-t733 * t1099 + t813 * t713) * t1065 + (t789 * t927 + t791 * t923 + t793 * t919) * pkin(2), 0; t974 + t980 + t986, 0, 0, t852 * t986 + t853 * t980 + t854 * t974, 0.2e1 * t962 * t1108 + 0.2e1 * t964 * t1109 + 0.2e1 * t966 * t1110, -0.2e1 * t892, -0.2e1 * t891, t806 + t804 + t802, t892 * pkin(5) - t762 * t991 - t763 * t985 - t764 * t979, t891 * pkin(5) - t765 * t991 - t766 * t985 - t767 * t979, t797 * t899 - t913 * t1060 - t915 * t1063 + (-t770 * t859 - (-t876 * t959 + t697) * t1055) * t805 + (-t769 * t859 - (-t874 * t960 + t696) * t1056) * t803 + (-t768 * t859 - (-t872 * t961 + t695) * t1057) * t801, t800 * t899 + t912 * t1060 + t914 * t1063 + (t770 * t858 - (-t876 * t975 + t700) * t1055) * t805 + (t769 * t858 - (-t874 * t981 + t699) * t1056) * t803 + (t768 * t858 - (-t872 * t987 + t698) * t1057) * t801, t892 * pkin(2) - t771 * t991 - t772 * t985 - t773 * t979, (-t721 * t1055 - t838 * t742 * t1096 + (pkin(2) + t916) * pkin(2) * t805) * t805 + (-t720 * t1056 - t836 * t741 * t1098 + (pkin(2) + t917) * pkin(2) * t803) * t803 + (-t719 * t1057 - t834 * t740 * t1100 + (pkin(2) + t918) * pkin(2) * t801) * t801, 1;];
tau_reg  = t1;
