% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:07:53
% EndTime: 2022-11-07 13:08:20
% DurationCPUTime: 27.78s
% Computational Cost: add. (121287->781), mult. (275840->1426), div. (7503->27), fcn. (155580->50), ass. (0->647)
t4095 = sin(pkin(7));
t4117 = xDP(2);
t4558 = pkin(3) * t4117;
t4018 = t4095 * t4558;
t4118 = xDP(1);
t4557 = pkin(3) * t4118;
t4019 = t4095 * t4557;
t4096 = cos(pkin(7));
t4021 = t4096 * t4557;
t4560 = pkin(3) * t4096;
t4032 = pkin(2) + t4560;
t4101 = legFrame(3,2);
t4059 = sin(t4101);
t4062 = cos(t4101);
t4104 = sin(qJ(2,3));
t4105 = sin(qJ(1,3));
t4110 = cos(qJ(2,3));
t4111 = cos(qJ(1,3));
t4280 = t4032 * t4117;
t4116 = xDP(3);
t4559 = pkin(3) * t4116;
t4406 = t4095 * t4559;
t4469 = t4105 * t4118;
t4451 = pkin(2) * t4469 + t4018;
t4070 = pkin(2) * t4118;
t4452 = t4021 + t4070;
t4069 = pkin(2) * t4117;
t4453 = t4096 * t4558 + t4069;
t4462 = t4111 * t4116;
t3925 = ((t4105 * t4021 + t4451) * t4062 + (-t4105 * t4280 + t4019) * t4059 + t4032 * t4462) * t4110 + ((-t4105 * t4019 + t4453) * t4062 + (t4105 * t4018 + t4452) * t4059 - t4111 * t4406) * t4104;
t3922 = t3925 ^ 2;
t4098 = qJ(3,3) + pkin(5);
t4075 = pkin(6) + t4098;
t4050 = 0.1e1 / t4075;
t4477 = t4095 * t4104;
t4412 = pkin(3) * t4477;
t4236 = -t4032 * t4110 + t4412;
t3956 = 0.1e1 / t4236 ^ 2;
t4051 = 0.1e1 / t4075 ^ 2;
t4528 = t3956 * t4051;
t4527 = t4050 * t4528;
t4591 = t3922 * t4527;
t4102 = legFrame(2,2);
t4060 = sin(t4102);
t4063 = cos(t4102);
t4106 = sin(qJ(2,2));
t4107 = sin(qJ(1,2));
t4112 = cos(qJ(2,2));
t4113 = cos(qJ(1,2));
t4466 = t4107 * t4118;
t4450 = pkin(2) * t4466 + t4018;
t4461 = t4113 * t4116;
t3926 = ((t4107 * t4021 + t4450) * t4063 + (-t4107 * t4280 + t4019) * t4060 + t4032 * t4461) * t4112 + ((-t4107 * t4019 + t4453) * t4063 + (t4107 * t4018 + t4452) * t4060 - t4113 * t4406) * t4106;
t3923 = t3926 ^ 2;
t4099 = qJ(3,2) + pkin(5);
t4076 = pkin(6) + t4099;
t4053 = 0.1e1 / t4076;
t4476 = t4095 * t4106;
t4410 = pkin(3) * t4476;
t4235 = -t4032 * t4112 + t4410;
t3959 = 0.1e1 / t4235 ^ 2;
t4054 = 0.1e1 / t4076 ^ 2;
t4525 = t3959 * t4054;
t4524 = t4053 * t4525;
t4590 = t3923 * t4524;
t4103 = legFrame(1,2);
t4061 = sin(t4103);
t4064 = cos(t4103);
t4108 = sin(qJ(2,1));
t4109 = sin(qJ(1,1));
t4114 = cos(qJ(2,1));
t4115 = cos(qJ(1,1));
t4463 = t4109 * t4118;
t4449 = pkin(2) * t4463 + t4018;
t4460 = t4115 * t4116;
t3927 = ((t4109 * t4021 + t4449) * t4064 + (-t4109 * t4280 + t4019) * t4061 + t4032 * t4460) * t4114 + ((-t4109 * t4019 + t4453) * t4064 + (t4109 * t4018 + t4452) * t4061 - t4115 * t4406) * t4108;
t3924 = t3927 ^ 2;
t4100 = qJ(3,1) + pkin(5);
t4077 = pkin(6) + t4100;
t4056 = 0.1e1 / t4077;
t4475 = t4095 * t4108;
t4408 = pkin(3) * t4475;
t4234 = -t4032 * t4114 + t4408;
t3962 = 0.1e1 / t4234 ^ 2;
t4057 = 0.1e1 / t4077 ^ 2;
t4522 = t3962 * t4057;
t4521 = t4056 * t4522;
t4589 = t3924 * t4521;
t4588 = -0.2e1 * pkin(2);
t3974 = -t4096 * t4110 + t4477;
t4587 = -0.2e1 * t3974;
t4474 = t4096 * t4104;
t3977 = t4095 * t4110 + t4474;
t4586 = 0.2e1 * t3977;
t4091 = t4110 ^ 2;
t4585 = 0.2e1 * t4091;
t4092 = t4112 ^ 2;
t4584 = 0.2e1 * t4092;
t4093 = t4114 ^ 2;
t4583 = 0.2e1 * t4093;
t4582 = 0.2e1 * pkin(2) * pkin(3);
t4581 = (pkin(5) + pkin(6));
t4084 = qJ(2,3) + pkin(7);
t4041 = cos(t4084);
t4065 = t4110 * pkin(2);
t3997 = pkin(3) * t4041 + t4065;
t4580 = pkin(1) + t3997;
t4085 = qJ(2,2) + pkin(7);
t4042 = cos(t4085);
t4066 = t4112 * pkin(2);
t3998 = pkin(3) * t4042 + t4066;
t4579 = pkin(1) + t3998;
t4087 = qJ(2,1) + pkin(7);
t4043 = cos(t4087);
t4067 = t4114 * pkin(2);
t3999 = pkin(3) * t4043 + t4067;
t4578 = pkin(1) + t3999;
t4136 = pkin(3) ^ 2;
t4137 = pkin(2) ^ 2;
t4074 = -t4136 + t4137;
t3972 = t4061 * t4118 + t4064 * t4117;
t4561 = pkin(3) * t4095;
t4004 = pkin(1) * t4108 - t4561;
t4006 = t4074 * t4117;
t4007 = t4074 * t4118;
t4013 = pkin(1) * t4475 - pkin(3);
t4405 = t4095 * t4582;
t4014 = t4117 * t4405;
t4015 = t4118 * t4405;
t4016 = pkin(1) * t4018;
t4017 = pkin(1) * t4019;
t4024 = t4109 * t4077;
t4036 = pkin(1) * t4069;
t4037 = pkin(1) * t4070;
t4331 = -0.2e1 * t4408;
t4010 = pkin(1) + t4331;
t4479 = t4077 * t4115;
t4243 = t4010 * t4109 - t4479;
t4213 = t4243 * t4118;
t4214 = t4243 * t4117;
t4078 = t4096 ^ 2;
t4478 = t4078 * t4136;
t4340 = (t4460 + (-t4061 * t4117 + t4064 * t4118) * t4109) * t4478;
t4343 = t4116 * (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t4344 = t4108 * t4479;
t4421 = 0.2e1 * t4478;
t4439 = 0.2e1 * t4560;
t4440 = 0.2e1 * t4070;
t4441 = 0.2e1 * t4069;
t4457 = t4116 * (t4010 * t4115 + t4024);
t4464 = t4109 * t4117;
t3885 = (0.2e1 * t4340 + (t4449 * t4064 + (-pkin(2) * t4464 + t4019) * t4061 + pkin(2) * t4460) * t4439 + (t4007 * t4109 + t4014) * t4064 + (-t4006 * t4109 + t4015) * t4061 + t4115 * t4343) * t4093 + (t4108 * t3972 * t4421 + ((t4108 * t4441 + t4213) * t4064 + (t4108 * t4440 - t4214) * t4061 + t4457) * t4560 + (pkin(2) * t4213 + t4006 * t4108 + t4016) * t4064 + (-pkin(2) * t4214 + t4007 * t4108 + t4017) * t4061 + pkin(2) * t4457) * t4114 - t4340 + t3972 * t4004 * t4560 + (t4036 * t4108 + (-t4013 * t4463 + (t4118 * t4344 - t4069) * t4095) * pkin(3)) * t4064 + (t4037 * t4108 + (t4013 * t4464 + (-t4117 * t4344 - t4070) * t4095) * pkin(3)) * t4061 - (t4013 * t4115 + t4024 * t4475) * t4559;
t4381 = t3885 * t4521;
t4287 = t4578 * t4381;
t3961 = 0.1e1 / t4234;
t4097 = t4137 / 0.2e1;
t4552 = t4136 * pkin(2);
t4033 = pkin(2) * t4097 + t4552;
t4128 = 0.2e1 * qJ(2,1);
t4082 = pkin(7) + t4128;
t4125 = 0.2e1 * pkin(7);
t4086 = t4128 + t4125;
t4556 = pkin(3) * t4137;
t4330 = -0.2e1 * pkin(3) * t4136 - 0.4e1 * t4556;
t4434 = -0.2e1 * t4552;
t4438 = -0.2e1 * t4556;
t4153 = t3999 ^ 2;
t3993 = 0.1e1 / t4153;
t4496 = t3993 * t4056;
t3992 = 0.1e1 / t3999;
t4515 = t3972 * t3992;
t4566 = -0.4e1 * t4114;
t4034 = pkin(2) * t4560;
t4448 = t4034 + t4097;
t4573 = -0.4e1 * pkin(1) * (t4136 / 0.2e1 + t4448);
t4303 = (-(sin(t4082) * t4582 + sin(t4086) * t4136 + sin(t4128) * t4137) * t3961 * t3927 + (cos(qJ(2,1) + t4125) * t4434 + cos(-pkin(7) + qJ(2,1)) * t4438 + t4330 * t4043 + t4033 * t4566 + t4573) * t4515) * t3972 * t4496;
t4523 = t3961 * t4056;
t4365 = t3927 * t4523;
t3916 = pkin(1) * t4365;
t4337 = t4523 / 0.2e1;
t3868 = t3885 * t4337 - t3916;
t4040 = sin(t4087);
t4119 = 4 * t4581;
t4131 = (qJ(3,1) ^ 2);
t4134 = (pkin(5) ^ 2);
t4138 = pkin(1) ^ 2;
t4445 = t4136 + t4137;
t4220 = -(2 * t4134) - 0.2e1 * t4138 - t4445 + ((-4 * pkin(5) - 2 * pkin(6)) * pkin(6));
t4422 = 0.2e1 * t4515;
t4321 = t4077 * t4422;
t4447 = 2 * t4581;
t4576 = 2 * qJ(3,1);
t4577 = 0.2e1 * pkin(1);
t4309 = ((-0.4e1 * t3868 * t4043 + t4040 * t4321) * pkin(3) + (t3868 * t4566 + t4108 * t4321) * pkin(2) - (t3885 * t4577 + (-t4136 * cos(t4086) - t4137 * cos(t4128) - (t4119 * qJ(3,1)) - (2 * t4131) + (-cos(t4082) - t4096) * t4582 + t4220) * t3927) * t4523) / (t4576 + t4447) * t4523;
t4175 = -(t4287 - t4309) * t3927 - t4303 / 0.2e1;
t3971 = t4060 * t4118 + t4063 * t4117;
t4003 = pkin(1) * t4106 - t4561;
t4012 = pkin(1) * t4476 - pkin(3);
t4023 = t4107 * t4076;
t4332 = -0.2e1 * t4410;
t4009 = pkin(1) + t4332;
t4480 = t4076 * t4113;
t4244 = t4009 * t4107 - t4480;
t4215 = t4244 * t4118;
t4216 = t4244 * t4117;
t4341 = (t4461 + (-t4060 * t4117 + t4063 * t4118) * t4107) * t4478;
t4345 = t4106 * t4480;
t4458 = t4116 * (t4009 * t4113 + t4023);
t4467 = t4107 * t4117;
t3884 = (0.2e1 * t4341 + (t4450 * t4063 + (-pkin(2) * t4467 + t4019) * t4060 + pkin(2) * t4461) * t4439 + (t4007 * t4107 + t4014) * t4063 + (-t4006 * t4107 + t4015) * t4060 + t4113 * t4343) * t4092 + (t4106 * t3971 * t4421 + ((t4106 * t4441 + t4215) * t4063 + (t4106 * t4440 - t4216) * t4060 + t4458) * t4560 + (pkin(2) * t4215 + t4006 * t4106 + t4016) * t4063 + (-pkin(2) * t4216 + t4007 * t4106 + t4017) * t4060 + pkin(2) * t4458) * t4112 - t4341 + t3971 * t4003 * t4560 + (t4036 * t4106 + (-t4012 * t4466 + (t4118 * t4345 - t4069) * t4095) * pkin(3)) * t4063 + (t4037 * t4106 + (t4012 * t4467 + (-t4117 * t4345 - t4070) * t4095) * pkin(3)) * t4060 - (t4012 * t4113 + t4023 * t4476) * t4559;
t4383 = t3884 * t4524;
t4288 = t4579 * t4383;
t3958 = 0.1e1 / t4235;
t4127 = 0.2e1 * qJ(2,2);
t4079 = t4125 + t4127;
t4081 = pkin(7) + t4127;
t4150 = t3998 ^ 2;
t3989 = 0.1e1 / t4150;
t4503 = t3989 * t4053;
t3988 = 0.1e1 / t3998;
t4516 = t3971 * t3988;
t4567 = -0.4e1 * t4112;
t4304 = (-(sin(t4081) * t4582 + sin(t4079) * t4136 + sin(t4127) * t4137) * t3958 * t3926 + (cos(qJ(2,2) + t4125) * t4434 + cos(-pkin(7) + qJ(2,2)) * t4438 + t4330 * t4042 + t4033 * t4567 + t4573) * t4516) * t3971 * t4503;
t4526 = t3958 * t4053;
t4369 = t3926 * t4526;
t3921 = pkin(1) * t4369;
t4338 = t4526 / 0.2e1;
t3870 = t3884 * t4338 - t3921;
t4039 = sin(t4085);
t4130 = (qJ(3,2) ^ 2);
t4424 = 0.2e1 * t4516;
t4322 = t4076 * t4424;
t4575 = 2 * qJ(3,2);
t4310 = ((-0.4e1 * t3870 * t4042 + t4039 * t4322) * pkin(3) + (t3870 * t4567 + t4106 * t4322) * pkin(2) - (t3884 * t4577 + (-t4136 * cos(t4079) - t4137 * cos(t4127) - (t4119 * qJ(3,2)) - (2 * t4130) + (-cos(t4081) - t4096) * t4582 + t4220) * t3926) * t4526) / (t4575 + t4447) * t4526;
t4176 = -(t4288 - t4310) * t3926 - t4304 / 0.2e1;
t3970 = t4059 * t4118 + t4062 * t4117;
t4002 = pkin(1) * t4104 - t4561;
t4011 = pkin(1) * t4477 - pkin(3);
t4022 = t4105 * t4075;
t4333 = -0.2e1 * t4412;
t4008 = pkin(1) + t4333;
t4481 = t4075 * t4111;
t4245 = t4008 * t4105 - t4481;
t4217 = t4245 * t4118;
t4218 = t4245 * t4117;
t4342 = (t4462 + (-t4059 * t4117 + t4062 * t4118) * t4105) * t4478;
t4346 = t4104 * t4481;
t4459 = t4116 * (t4008 * t4111 + t4022);
t4470 = t4105 * t4117;
t3883 = (0.2e1 * t4342 + (t4451 * t4062 + (-pkin(2) * t4470 + t4019) * t4059 + pkin(2) * t4462) * t4439 + (t4007 * t4105 + t4014) * t4062 + (-t4006 * t4105 + t4015) * t4059 + t4111 * t4343) * t4091 + (t4104 * t3970 * t4421 + ((t4104 * t4441 + t4217) * t4062 + (t4104 * t4440 - t4218) * t4059 + t4459) * t4560 + (pkin(2) * t4217 + t4006 * t4104 + t4016) * t4062 + (-pkin(2) * t4218 + t4007 * t4104 + t4017) * t4059 + pkin(2) * t4459) * t4110 - t4342 + t3970 * t4002 * t4560 + (t4036 * t4104 + (-t4011 * t4469 + (t4118 * t4346 - t4069) * t4095) * pkin(3)) * t4062 + (t4037 * t4104 + (t4011 * t4470 + (-t4117 * t4346 - t4070) * t4095) * pkin(3)) * t4059 - (t4011 * t4111 + t4022 * t4477) * t4559;
t4385 = t3883 * t4527;
t4289 = t4580 * t4385;
t3955 = 0.1e1 / t4236;
t4126 = 0.2e1 * qJ(2,3);
t4080 = pkin(7) + t4126;
t4083 = t4126 + t4125;
t4147 = t3997 ^ 2;
t3985 = 0.1e1 / t4147;
t4510 = t3985 * t4050;
t3984 = 0.1e1 / t3997;
t4517 = t3970 * t3984;
t4568 = -0.4e1 * t4110;
t4305 = (-(sin(t4080) * t4582 + sin(t4083) * t4136 + sin(t4126) * t4137) * t3955 * t3925 + (cos(qJ(2,3) + t4125) * t4434 + cos(-pkin(7) + qJ(2,3)) * t4438 + t4330 * t4041 + t4033 * t4568 + t4573) * t4517) * t3970 * t4510;
t4529 = t3955 * t4050;
t4374 = t3925 * t4529;
t3920 = pkin(1) * t4374;
t4339 = t4529 / 0.2e1;
t3869 = t3883 * t4339 - t3920;
t4038 = sin(t4084);
t4129 = (qJ(3,3) ^ 2);
t4426 = 0.2e1 * t4517;
t4323 = t4075 * t4426;
t4574 = 2 * qJ(3,3);
t4311 = ((-0.4e1 * t3869 * t4041 + t4038 * t4323) * pkin(3) + (t3869 * t4568 + t4104 * t4323) * pkin(2) - (t3883 * t4577 + (-t4136 * cos(t4083) - t4137 * cos(t4126) - (t4119 * qJ(3,3)) - (2 * t4129) + (-cos(t4080) - t4096) * t4582 + t4220) * t3925) * t4529) / (t4574 + t4447) * t4529;
t4177 = -(t4289 - t4311) * t3925 - t4305 / 0.2e1;
t4572 = 0.2e1 * t4034;
t4044 = t4585 - 0.1e1;
t4045 = t4584 - 0.1e1;
t4046 = t4583 - 0.1e1;
t4320 = pkin(1) * t4105 - t4481;
t4420 = pkin(3) * (t4078 - 0.1e1);
t4564 = pkin(3) * (t4105 * t4420 + t4320 * t4477);
t4319 = pkin(1) * t4107 - t4480;
t4563 = pkin(3) * (t4107 * t4420 + t4319 * t4476);
t4318 = pkin(1) * t4109 - t4479;
t4562 = pkin(3) * (t4109 * t4420 + t4318 * t4475);
t3967 = t3970 ^ 2;
t4005 = t4572 + t4445;
t4532 = t3925 * t4051;
t4373 = t3955 * t4532;
t3841 = (t3920 - (t4236 * t3925 + t3883) * t4529) * t4373 + t3967 * t4005 / (-t3974 * pkin(3) + t4065) * t4510 - t3925 * t4385;
t4555 = t3841 * pkin(1);
t3968 = t3971 ^ 2;
t3975 = t4096 * t4112 - t4476;
t4531 = t3926 * t4054;
t4368 = t3958 * t4531;
t3842 = (t3921 - (t4235 * t3926 + t3884) * t4526) * t4368 + t3968 * t4005 / (t3975 * pkin(3) + t4066) * t4503 - t3926 * t4383;
t4554 = t3842 * pkin(1);
t3969 = t3972 ^ 2;
t3976 = t4096 * t4114 - t4475;
t4530 = t3927 * t4057;
t4364 = t3961 * t4530;
t3843 = (t3916 - (t4234 * t3927 + t3885) * t4523) * t4364 + t3969 * t4005 / (t3976 * pkin(3) + t4067) * t4496 - t3927 * t4381;
t4553 = t3843 * pkin(1);
t3814 = t4555 + t4305 / 0.4e1 + (-t4311 / 0.2e1 + t4289 / 0.2e1) * t3925;
t4550 = t3814 * t4110;
t3815 = t4554 + t4304 / 0.4e1 + (-t4310 / 0.2e1 + t4288 / 0.2e1) * t3926;
t4549 = t3815 * t4112;
t3816 = t4553 + t4303 / 0.4e1 + (-t4309 / 0.2e1 + t4287 / 0.2e1) * t3927;
t4548 = t3816 * t4114;
t4547 = t3841 * t3974;
t4546 = t3841 * t3977;
t4545 = t3841 * t4050;
t4544 = t3841 * t4098;
t4543 = t3841 * t4104;
t4542 = t3842 * t3975;
t4473 = t4096 * t4106;
t3978 = t4095 * t4112 + t4473;
t4541 = t3842 * t3978;
t4540 = t3842 * t4053;
t4539 = t3842 * t4099;
t4538 = t3842 * t4106;
t4537 = t3843 * t3976;
t4472 = t4096 * t4108;
t3979 = t4095 * t4114 + t4472;
t4536 = t3843 * t3979;
t4535 = t3843 * t4056;
t4534 = t3843 * t4100;
t4533 = t3843 * t4108;
t4520 = t3967 * t4050;
t4519 = t3968 * t4053;
t4518 = t3969 * t4056;
t4514 = t3984 * t4059;
t4513 = t3984 * t4062;
t4512 = t3984 * t4104;
t4511 = t3984 * t4110;
t4509 = t3985 * t4110;
t3996 = pkin(2) * t4104 + pkin(3) * t4038;
t4508 = t3984 * t3985 * t3996;
t4507 = t3988 * t4060;
t4506 = t3988 * t4063;
t4505 = t3988 * t4106;
t4504 = t3988 * t4112;
t4502 = t3989 * t4112;
t4000 = pkin(2) * t4106 + pkin(3) * t4039;
t4501 = t3988 * t3989 * t4000;
t4500 = t3992 * t4061;
t4499 = t3992 * t4064;
t4498 = t3992 * t4108;
t4497 = t3992 * t4114;
t4495 = t3993 * t4114;
t4001 = pkin(2) * t4108 + pkin(3) * t4040;
t4494 = t3992 * t3993 * t4001;
t4493 = t4032 * t4059;
t4492 = t4032 * t4060;
t4491 = t4032 * t4061;
t4490 = t4032 * t4062;
t4489 = t4032 * t4063;
t4488 = t4032 * t4064;
t4487 = t4059 * t4105;
t4486 = t4060 * t4107;
t4485 = t4061 * t4109;
t4484 = t4062 * t4105;
t4483 = t4063 * t4107;
t4482 = t4064 * t4109;
t4471 = t4104 * t4110;
t4468 = t4106 * t4112;
t4465 = t4108 * t4114;
t4336 = t4517 / 0.2e1;
t3934 = t4098 * t4336;
t4352 = t4104 * t4508;
t4286 = t3967 * t4352;
t4248 = t4098 * t4286;
t4299 = t4104 * t4374;
t4263 = pkin(2) * t4299;
t4355 = t3970 * t4512;
t4314 = pkin(2) * t4355;
t4386 = t3883 * t4529;
t4446 = t4134 + t4138;
t4456 = -pkin(1) * t4177 + ((pkin(5) * t4574) + t4091 * t4137 + t4129 + t4446) * t3841 + (-t4248 + 0.2e1 * t4550) * pkin(2) + t3970 * (t3934 - t4263) * t4511 * t4588 + 0.2e1 * (pkin(1) * t4314 + t4098 * t4386) * t4374;
t4335 = t4516 / 0.2e1;
t3935 = t4099 * t4335;
t4350 = t4106 * t4501;
t4285 = t3968 * t4350;
t4247 = t4099 * t4285;
t4295 = t4106 * t4369;
t4261 = pkin(2) * t4295;
t4354 = t3971 * t4505;
t4313 = pkin(2) * t4354;
t4384 = t3884 * t4526;
t4455 = -pkin(1) * t4176 + ((pkin(5) * t4575) + t4092 * t4137 + t4130 + t4446) * t3842 + (-t4247 + 0.2e1 * t4549) * pkin(2) + t3971 * (t3935 - t4261) * t4504 * t4588 + 0.2e1 * (pkin(1) * t4313 + t4099 * t4384) * t4369;
t4334 = t4515 / 0.2e1;
t3936 = t4100 * t4334;
t4348 = t4108 * t4494;
t4284 = t3969 * t4348;
t4246 = t4100 * t4284;
t4292 = t4108 * t4365;
t4259 = pkin(2) * t4292;
t4353 = t3972 * t4498;
t4312 = pkin(2) * t4353;
t4382 = t3885 * t4523;
t4454 = -pkin(1) * t4175 + ((pkin(5) * t4576) + t4093 * t4137 + t4131 + t4446) * t3843 + (-t4246 + 0.2e1 * t4548) * pkin(2) + t3972 * (t3936 - t4259) * t4497 * t4588 + 0.2e1 * (pkin(1) * t4312 + t4100 * t4382) * t4365;
t3871 = -t3916 + 0.2e1 * t4382;
t3872 = -t3920 + 0.2e1 * t4386;
t3873 = -t3921 + 0.2e1 * t4384;
t4444 = pkin(2) * t4585;
t4443 = pkin(2) * t4584;
t4442 = pkin(2) * t4583;
t4437 = 0.2e1 * t4555;
t4436 = 0.2e1 * t4554;
t4435 = 0.2e1 * t4553;
t4430 = -0.2e1 * t4543;
t4429 = -0.2e1 * t4538;
t4428 = -0.2e1 * t4533;
t4427 = -0.2e1 * t4517;
t4425 = -0.2e1 * t4516;
t4423 = -0.2e1 * t4515;
t4418 = t4059 * t4561;
t4417 = t4060 * t4561;
t4416 = t4061 * t4561;
t4415 = t4062 * t4561;
t4414 = t4063 * t4561;
t4413 = t4064 * t4561;
t4411 = t4105 * t4561;
t4409 = t4107 * t4561;
t4407 = t4109 * t4561;
t4404 = t3841 * t4529;
t4403 = t3841 * t4512;
t4402 = t3841 * t4511;
t4401 = t4104 ^ 2 * t4545;
t4400 = t4098 * t4543;
t4399 = t4110 * t4544;
t4398 = t3842 * t4526;
t4397 = t3842 * t4505;
t4396 = t3842 * t4504;
t4395 = t4106 ^ 2 * t4540;
t4394 = t4099 * t4538;
t4393 = t4112 * t4539;
t4392 = t3843 * t4523;
t4391 = t3843 * t4498;
t4390 = t3843 * t4497;
t4389 = t4108 ^ 2 * t4535;
t4388 = t4100 * t4533;
t4387 = t4114 * t4534;
t4380 = t3922 * t4528;
t4379 = t3955 * t4591;
t4378 = t3923 * t4525;
t4377 = t3958 * t4590;
t4376 = t3924 * t4522;
t4375 = t3961 * t4589;
t4372 = t3970 * t4532;
t4371 = t3925 * t4514;
t4370 = t3925 * t4513;
t4367 = t3926 * t4507;
t4366 = t3926 * t4506;
t4363 = t3927 * t4500;
t4362 = t3927 * t4499;
t4361 = t3967 * t4508;
t4360 = t3967 / t4147 ^ 2 * t3996;
t4359 = t3968 * t4501;
t4358 = t3968 / t4150 ^ 2 * t4000;
t4357 = t3969 * t4494;
t4356 = t3969 / t4153 ^ 2 * t4001;
t4351 = t4110 * t4508;
t4349 = t4112 * t4501;
t4347 = t4114 * t4494;
t4326 = 0.2e1 * t3925 * t4528;
t4329 = t4050 * (t3883 * t4326 + 0.2e1 * t4544 + (-t3967 * t4509 - t4286) * pkin(2));
t4325 = 0.2e1 * t3926 * t4525;
t4328 = t4053 * (t3884 * t4325 + 0.2e1 * t4539 + (-t3968 * t4502 - t4285) * pkin(2));
t4324 = 0.2e1 * t3927 * t4522;
t4327 = t4056 * (t3885 * t4324 + 0.2e1 * t4534 + (-t3969 * t4495 - t4284) * pkin(2));
t3917 = pkin(2) * t4374;
t3918 = pkin(2) * t4369;
t3919 = pkin(2) * t4365;
t4317 = pkin(2) * t4361;
t4316 = pkin(2) * t4359;
t4315 = pkin(2) * t4357;
t4308 = t4471 * t4545;
t4307 = t4468 * t4540;
t4306 = t4465 * t4535;
t4302 = t3984 * t4380;
t4301 = t3988 * t4378;
t4300 = t3992 * t4376;
t4298 = t4110 * t4374;
t4297 = t3956 * t4372;
t4296 = t3984 * t4372;
t4294 = t4112 * t4369;
t4293 = t4516 * t4531;
t4291 = t4114 * t4365;
t4290 = t4515 * t4530;
t4283 = -t4355 / 0.2e1;
t4282 = -t4354 / 0.2e1;
t4281 = -t4353 / 0.2e1;
t4279 = t3955 * t4329;
t4278 = t3958 * t4328;
t4277 = t3961 * t4327;
t3901 = t3925 * t4098 * t4339 + t4314;
t4276 = t3901 * t4326;
t3902 = t3926 * t4099 * t4338 + t4313;
t4275 = t3902 * t4325;
t3903 = t3927 * t4100 * t4337 + t4312;
t4274 = t3903 * t4324;
t4273 = t3971 * t4325;
t4272 = 0.2e1 * t4293;
t4271 = t3972 * t4324;
t4270 = 0.2e1 * t4290;
t3886 = t4098 * t4283 + t3917 - (pkin(1) * t4110 + t4444) * t4374;
t3913 = pkin(1) * t4299;
t3889 = (t3934 - 0.2e1 * t4263) * t4110 - t3913;
t4171 = (pkin(2) * t4430 - t4098 * t4361) * t4110 - 0.2e1 * t3814 * t4104;
t4192 = t3841 * t4444 - t4248;
t4269 = (-t3886 * t4096 + t3889 * t4095) * t4426 + t4171 * t4096 + (-t4192 - 0.2e1 * t4550) * t4095;
t3888 = t4100 * t4281 + t3919 - (pkin(1) * t4114 + t4442) * t4365;
t3915 = pkin(1) * t4292;
t3891 = (t3936 - 0.2e1 * t4259) * t4114 - t3915;
t4169 = (pkin(2) * t4428 - t4100 * t4357) * t4114 - 0.2e1 * t3816 * t4108;
t4190 = t3843 * t4442 - t4246;
t4268 = (-t3888 * t4096 + t3891 * t4095) * t4422 + t4169 * t4096 + (-t4190 - 0.2e1 * t4548) * t4095;
t3887 = t4099 * t4282 + t3918 - (pkin(1) * t4112 + t4443) * t4369;
t3914 = pkin(1) * t4295;
t3890 = (t3935 - 0.2e1 * t4261) * t4112 - t3914;
t4170 = (pkin(2) * t4429 - t4099 * t4359) * t4112 - 0.2e1 * t3815 * t4106;
t4191 = t3842 * t4443 - t4247;
t4267 = (-t3887 * t4096 + t3890 * t4095) * t4424 + t4170 * t4096 + (-t4191 - 0.2e1 * t4549) * t4095;
t4266 = (t3886 * t4095 + t3889 * t4096) * t4427 + ((t4437 - t4177) * t4110 + t4192) * t4096 + t4171 * t4095;
t4265 = (t3887 * t4095 + t3890 * t4096) * t4425 + ((t4436 - t4176) * t4112 + t4191) * t4096 + t4170 * t4095;
t4264 = (t3888 * t4095 + t3891 * t4096) * t4423 + ((t4435 - t4175) * t4114 + t4190) * t4096 + t4169 * t4095;
t4262 = pkin(2) * t4298;
t4260 = pkin(2) * t4294;
t4258 = pkin(2) * t4291;
t4257 = t4104 * t4302;
t4256 = t4110 * t4302;
t4255 = t4106 * t4301;
t4254 = t4112 * t4301;
t4253 = t4108 * t4300;
t4252 = t4114 * t4300;
t4251 = t4044 * t4296;
t4250 = t4045 * t4293;
t4249 = t4046 * t4290;
t4242 = t4297 * t4587;
t4241 = t4297 * t4586;
t4240 = t3975 * t4273;
t4239 = t3978 * t4273;
t4238 = t3976 * t4271;
t4237 = t3979 * t4271;
t4233 = t4050 * (-pkin(5) * t4286 + (t4110 * pkin(5) * t4336 - t3913) * t4427 + t4110 * t4437);
t4232 = t4050 * (-pkin(5) * t3967 * t4351 + pkin(1) * t4430 + (-pkin(1) * t4298 + pkin(5) * t4283) * t4427);
t4231 = t4053 * (-pkin(5) * t4285 + (t4112 * pkin(5) * t4335 - t3914) * t4425 + t4112 * t4436);
t4230 = t4053 * (-pkin(5) * t3968 * t4349 + pkin(1) * t4429 + (-pkin(1) * t4294 + pkin(5) * t4282) * t4425);
t4229 = t4056 * (-pkin(5) * t4284 + (t4114 * pkin(5) * t4334 - t3915) * t4423 + t4114 * t4435);
t4228 = t4056 * (-pkin(5) * t3969 * t4347 + pkin(1) * t4428 + (-pkin(1) * t4291 + pkin(5) * t4281) * t4423);
t3946 = t4580 * t4111 + t4022;
t4227 = t3946 * t3955 * t4296;
t4226 = t4059 * t4257;
t4225 = t4060 * t4255;
t4224 = t4061 * t4253;
t4223 = t4062 * t4256;
t4222 = t4063 * t4254;
t4221 = t4064 * t4252;
t4219 = t4074 + t4421 + t4572;
t4212 = 0.2e1 * t4296 * t4471;
t3947 = t4579 * t4113 + t4023;
t4211 = t3947 * t3958 * t4272;
t4210 = t4272 * t4468;
t3948 = t4578 * t4115 + t4024;
t4209 = t3948 * t3961 * t4270;
t4208 = t4270 * t4465;
t4207 = t3955 * t4233;
t4206 = t3955 * t4232;
t4205 = t3958 * t4231;
t4204 = t3958 * t4230;
t4203 = t3961 * t4229;
t4202 = t3961 * t4228;
t4201 = t3984 * (-(-t4262 + t3872) * t4299 + t4317 - t4400);
t4200 = t3988 * (-(-t4260 + t3873) * t4295 + t4316 - t4394);
t4199 = t3992 * (-(-t4258 + t3871) * t4292 + t4315 - t4388);
t4198 = (-t3985 * t4104 + t4351) * t4520;
t4197 = (t4352 + t4509) * t4520;
t4196 = (-t3989 * t4106 + t4349) * t4519;
t4195 = (t4350 + t4502) * t4519;
t4194 = (-t3993 * t4108 + t4347) * t4518;
t4193 = (t4348 + t4495) * t4518;
t4189 = t3871 * t4114 - t3919 * t4583 + t3919;
t4188 = t3872 * t4110 - t3917 * t4585 + t3917;
t4187 = t3873 * t4112 - t3918 * t4584 + t3918;
t4183 = t3955 * t4198;
t4182 = t3955 * t4197;
t4181 = t3958 * t4196;
t4180 = t3958 * t4195;
t4179 = t3961 * t4194;
t4178 = t3961 * t4193;
t4174 = -t3955 * t4401 + t3956 * t4212;
t4173 = -t3958 * t4395 + t3959 * t4210;
t4172 = -t3961 * t4389 + t3962 * t4208;
t4168 = t4059 * t4403 + t4060 * t4397 + t4061 * t4391;
t4167 = t4059 * t4402 + t4060 * t4396 + t4061 * t4390;
t4166 = t4062 * t4403 + t4063 * t4397 + t4064 * t4391;
t4165 = t4062 * t4402 + t4063 * t4396 + t4064 * t4390;
t4164 = -0.2e1 * t3955 * t4308 + 0.2e1 * t3956 * t4251;
t4163 = -0.2e1 * t3958 * t4307 + 0.2e1 * t3959 * t4250;
t4162 = -0.2e1 * t3961 * t4306 + 0.2e1 * t3962 * t4249;
t4035 = pkin(1) * t4561;
t3973 = (t4078 - 0.1e1 / 0.2e1) * t4136 + t4448;
t3951 = t4109 * t4331 + t4318;
t3950 = t4107 * t4332 + t4319;
t3949 = t4105 * t4333 + t4320;
t3942 = t4219 * t4108 + t4035;
t3941 = t4219 * t4106 + t4035;
t3940 = t4219 * t4104 + t4035;
t3933 = (t4032 * t4482 + t4416) * t4114 + t4108 * (-t4064 * t4407 + t4491);
t3932 = (t4032 * t4483 + t4417) * t4112 + t4106 * (-t4063 * t4409 + t4492);
t3931 = (t4032 * t4484 + t4418) * t4110 + t4104 * (-t4062 * t4411 + t4493);
t3930 = (-t4032 * t4485 + t4413) * t4114 + (t4061 * t4407 + t4488) * t4108;
t3929 = (-t4032 * t4486 + t4414) * t4112 + (t4060 * t4409 + t4489) * t4106;
t3928 = (-t4032 * t4487 + t4415) * t4110 + (t4059 * t4411 + t4490) * t4104;
t3909 = (t3973 * t4482 + t4032 * t4416) * t4583 + (t3942 * t4061 + t3951 * t4488) * t4114 - t4064 * t4562 + t4004 * t4491;
t3908 = (-t3973 * t4485 + t4032 * t4413) * t4583 + (t3942 * t4064 - t3951 * t4491) * t4114 + t4061 * t4562 + t4004 * t4488;
t3907 = (t3973 * t4483 + t4032 * t4417) * t4584 + (t3941 * t4060 + t3950 * t4489) * t4112 - t4063 * t4563 + t4003 * t4492;
t3906 = (-t3973 * t4486 + t4032 * t4414) * t4584 + (t3941 * t4063 - t3950 * t4492) * t4112 + t4060 * t4563 + t4003 * t4489;
t3905 = (t3973 * t4484 + t4032 * t4418) * t4585 + (t3940 * t4059 + t3949 * t4490) * t4110 - t4062 * t4564 + t4002 * t4493;
t3904 = (-t3973 * t4487 + t4032 * t4415) * t4585 + (t3940 * t4062 - t3949 * t4493) * t4110 + t4059 * t4564 + t4002 * t4490;
t3894 = t4046 * t4376;
t3893 = t4045 * t4378;
t3892 = t4044 * t4380;
t3855 = -0.2e1 * t4258 + t3871;
t3854 = -0.2e1 * t4260 + t3873;
t3853 = -0.2e1 * t4262 + t3872;
t3849 = t3855 * t4475 - t4189 * t4096;
t3848 = t3855 * t4472 + t4189 * t4095;
t3847 = t3854 * t4476 - t4187 * t4096;
t3846 = t3854 * t4473 + t4187 * t4095;
t3845 = t3853 * t4477 - t4188 * t4096;
t3844 = t3853 * t4474 + t4188 * t4095;
t3839 = -0.2e1 * t4315 + t4388;
t3837 = -0.2e1 * t4316 + t4394;
t3835 = -0.2e1 * t4317 + t4400;
t3822 = -t3839 * t4096 - t4095 * t4387;
t3821 = t3839 * t4095 - t4096 * t4387;
t3820 = -t3837 * t4096 - t4095 * t4393;
t3819 = t3837 * t4095 - t4096 * t4393;
t3818 = -t3835 * t4096 - t4095 * t4399;
t3817 = t3835 * t4095 - t4096 * t4399;
t3813 = (-t4067 - pkin(1)) * t3843 + t4175;
t3812 = (-t4066 - pkin(1)) * t3842 + t4176;
t3811 = (-t4065 - pkin(1)) * t3841 + t4177;
t1 = [(-t3931 * t4404 - t3932 * t4398 - t3933 * t4392) * MDP(1) + (t4174 * t3931 + t4173 * t3932 + t4172 * t3933 - t4110 * t4226 - t4112 * t4225 - t4114 * t4224) * MDP(4) + (-t3892 * t4514 - t3893 * t4507 - t3894 * t4500 + t3931 * t4164 + t3932 * t4163 + t3933 * t4162) * MDP(5) + (-t3931 * t4182 - t3932 * t4180 - t3933 * t4178 + t4168) * MDP(6) + (-t3931 * t4183 - t3932 * t4181 - t3933 * t4179 + t4167) * MDP(7) + (t4059 * t4360 + t4060 * t4358 + t4061 * t4356) * MDP(8) + (-t3933 * t4203 - t3932 * t4205 - t3931 * t4207 - t4168 * pkin(5) + (t4224 + t4225 + t4226) * pkin(1)) * MDP(9) + (-t3933 * t4202 - t3932 * t4204 - t3931 * t4206 - t4167 * pkin(5) + (t4059 * t4256 + t4060 * t4254 + t4061 * t4252) * pkin(1)) * MDP(10) + ((t4061 * t3822 + t3909 * t4237) * t3992 + (t4060 * t3820 + t3907 * t4239) * t3988 + (t4059 * t3818 + t3905 * t4241) * t3984 - (t3848 * t4363 - t3909 * t4537 + t4264 * t3933) * t4523 - (t3846 * t4367 - t3907 * t4542 + t4265 * t3932) * t4526 - (t3844 * t4371 + t3905 * t4547 + t4266 * t3931) * t4529) * MDP(11) + ((t4061 * t3821 + t3909 * t4238) * t3992 + (t4060 * t3819 + t3907 * t4240) * t3988 + (t4059 * t3817 + t3905 * t4242) * t3984 - (-t3849 * t4363 + t3909 * t4536 + t4268 * t3933) * t4523 - (-t3847 * t4367 + t3907 * t4541 + t4267 * t3932) * t4526 - (-t3845 * t4371 + t3905 * t4546 + t4269 * t3931) * t4529) * MDP(12) + (-t4168 * pkin(2) + t3905 * t4379 + t3907 * t4377 + t3909 * t4375 - t3931 * t4279 - t3932 * t4278 - t3933 * t4277) * MDP(13) + (t3905 * t4276 + t3907 * t4275 + t3909 * t4274 - (t3813 * t3909 + t4454 * t3933) * t4523 - (t3812 * t3907 + t4455 * t3932) * t4526 - (t3811 * t3905 + t4456 * t3931) * t4529 + (t4059 * t4201 + t4060 * t4200 + t4061 * t4199) * pkin(2)) * MDP(14); (-t3928 * t4404 - t3929 * t4398 - t3930 * t4392) * MDP(1) + (t4174 * t3928 + t4173 * t3929 + t4172 * t3930 - t4104 * t4223 - t4106 * t4222 - t4108 * t4221) * MDP(4) + (-t3892 * t4513 - t3893 * t4506 - t3894 * t4499 + t3928 * t4164 + t3929 * t4163 + t3930 * t4162) * MDP(5) + (-t3928 * t4182 - t3929 * t4180 - t3930 * t4178 + t4166) * MDP(6) + (-t3928 * t4183 - t3929 * t4181 - t3930 * t4179 + t4165) * MDP(7) + (t4062 * t4360 + t4063 * t4358 + t4064 * t4356) * MDP(8) + (-t3930 * t4203 - t3929 * t4205 - t3928 * t4207 - t4166 * pkin(5) + (t4062 * t4257 + t4063 * t4255 + t4064 * t4253) * pkin(1)) * MDP(9) + (-t3930 * t4202 - t3929 * t4204 - t3928 * t4206 - t4165 * pkin(5) + (t4221 + t4222 + t4223) * pkin(1)) * MDP(10) + ((t4064 * t3822 + t3908 * t4237) * t3992 + (t4063 * t3820 + t3906 * t4239) * t3988 + (t4062 * t3818 + t3904 * t4241) * t3984 - (t3848 * t4362 - t3908 * t4537 + t4264 * t3930) * t4523 - (t3846 * t4366 - t3906 * t4542 + t4265 * t3929) * t4526 - (t3844 * t4370 + t3904 * t4547 + t4266 * t3928) * t4529) * MDP(11) + ((t4064 * t3821 + t3908 * t4238) * t3992 + (t4063 * t3819 + t3906 * t4240) * t3988 + (t4062 * t3817 + t3904 * t4242) * t3984 - (-t3849 * t4362 + t3908 * t4536 + t4268 * t3930) * t4523 - (-t3847 * t4366 + t3906 * t4541 + t4267 * t3929) * t4526 - (-t3845 * t4370 + t3904 * t4546 + t4269 * t3928) * t4529) * MDP(12) + (-t4166 * pkin(2) + t3904 * t4379 + t3906 * t4377 + t3908 * t4375 - t3928 * t4279 - t3929 * t4278 - t3930 * t4277) * MDP(13) + (t3904 * t4276 + t3906 * t4275 + t3908 * t4274 - (t3813 * t3908 + t4454 * t3930) * t4523 - (t3812 * t3906 + t4455 * t3929) * t4526 - (t3811 * t3904 + t4456 * t3928) * t4529 + (t4062 * t4201 + t4063 * t4200 + t4064 * t4199) * pkin(2)) * MDP(14); (t4111 * t4545 + t4113 * t4540 + t4115 * t4535) * MDP(1) + ((-t3961 * t4208 + t4389) * t4115 + (-t3958 * t4210 + t4395) * t4113 + (-t3955 * t4212 + t4401) * t4111) * MDP(4) + 0.2e1 * ((-t3961 * t4249 + t4306) * t4115 + (-t3958 * t4250 + t4307) * t4113 + (-t3955 * t4251 + t4308) * t4111) * MDP(5) + (t4111 * t4197 + t4113 * t4195 + t4115 * t4193) * MDP(6) + (t4111 * t4198 + t4113 * t4196 + t4115 * t4194) * MDP(7) + (t4111 * t4233 + t4113 * t4231 + t4115 * t4229) * MDP(9) + (t4111 * t4232 + t4113 * t4230 + t4115 * t4228) * MDP(10) + (-t4227 * t4586 - t3978 * t4211 - t3979 * t4209 + (-t3948 * t4537 + t4264 * t4115) * t4056 + (-t3947 * t4542 + t4265 * t4113) * t4053 + (t3946 * t4547 + t4266 * t4111) * t4050) * MDP(11) + (-t4227 * t4587 - t3975 * t4211 - t3976 * t4209 + (t3948 * t4536 + t4268 * t4115) * t4056 + (t3947 * t4541 + t4267 * t4113) * t4053 + (t3946 * t4546 + t4269 * t4111) * t4050) * MDP(12) + (-t3946 * t4591 - t3947 * t4590 - t3948 * t4589 + t4111 * t4329 + t4113 * t4328 + t4115 * t4327) * MDP(13) + (-0.2e1 * t3901 * t3946 * t4373 - 0.2e1 * t3902 * t3947 * t4368 - 0.2e1 * t3903 * t3948 * t4364 + (t3813 * t3948 + t4454 * t4115) * t4056 + (t3812 * t3947 + t4455 * t4113) * t4053 + (t3811 * t3946 + t4456 * t4111) * t4050) * MDP(14);];
taucX  = t1;
