% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x13]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 21:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 21:12:39
% EndTime: 2020-08-06 21:12:54
% DurationCPUTime: 15.28s
% Computational Cost: add. (60661->596), mult. (137814->1129), div. (3819->24), fcn. (77922->50), ass. (0->513)
t1212 = sin(pkin(7));
t1235 = xDP(2);
t1582 = pkin(3) * t1235;
t1139 = t1212 * t1582;
t1236 = xDP(1);
t1581 = pkin(3) * t1236;
t1140 = t1212 * t1581;
t1213 = cos(pkin(7));
t1142 = t1213 * t1581;
t1584 = pkin(3) * t1213;
t1152 = pkin(2) + t1584;
t1218 = legFrame(3,2);
t1179 = sin(t1218);
t1182 = cos(t1218);
t1221 = sin(qJ(2,3));
t1222 = sin(qJ(1,3));
t1227 = cos(qJ(2,3));
t1228 = cos(qJ(1,3));
t1359 = t1152 * t1235;
t1234 = xDP(3);
t1583 = pkin(3) * t1234;
t1462 = t1212 * t1583;
t1508 = t1222 * t1236;
t1494 = pkin(2) * t1508 + t1139;
t1190 = pkin(2) * t1236;
t1495 = t1142 + t1190;
t1189 = pkin(2) * t1235;
t1496 = t1213 * t1582 + t1189;
t1499 = t1234 * t1228;
t1055 = ((t1142 * t1222 + t1494) * t1182 + (-t1222 * t1359 + t1140) * t1179 + t1152 * t1499) * t1227 + t1221 * ((-t1140 * t1222 + t1496) * t1182 + (t1139 * t1222 + t1495) * t1179 - t1228 * t1462);
t1052 = t1055 ^ 2;
t1215 = pkin(5) + qJ(3,3);
t1195 = pkin(6) + t1215;
t1170 = 0.1e1 / t1195;
t1514 = t1212 * t1221;
t1468 = pkin(3) * t1514;
t1340 = -t1152 * t1227 + t1468;
t1083 = 0.1e1 / t1340 ^ 2;
t1171 = 0.1e1 / t1195 ^ 2;
t1561 = t1083 * t1171;
t1560 = t1170 * t1561;
t1613 = t1052 * t1560;
t1219 = legFrame(2,2);
t1180 = sin(t1219);
t1183 = cos(t1219);
t1223 = sin(qJ(2,2));
t1224 = sin(qJ(1,2));
t1229 = cos(qJ(2,2));
t1230 = cos(qJ(1,2));
t1504 = t1224 * t1236;
t1493 = pkin(2) * t1504 + t1139;
t1498 = t1234 * t1230;
t1056 = ((t1142 * t1224 + t1493) * t1183 + (-t1224 * t1359 + t1140) * t1180 + t1152 * t1498) * t1229 + t1223 * ((-t1140 * t1224 + t1496) * t1183 + (t1139 * t1224 + t1495) * t1180 - t1230 * t1462);
t1053 = t1056 ^ 2;
t1216 = pkin(5) + qJ(3,2);
t1196 = pkin(6) + t1216;
t1173 = 0.1e1 / t1196;
t1513 = t1212 * t1223;
t1466 = pkin(3) * t1513;
t1339 = -t1152 * t1229 + t1466;
t1086 = 0.1e1 / t1339 ^ 2;
t1174 = 0.1e1 / t1196 ^ 2;
t1557 = t1086 * t1174;
t1556 = t1173 * t1557;
t1612 = t1053 * t1556;
t1220 = legFrame(1,2);
t1181 = sin(t1220);
t1184 = cos(t1220);
t1225 = sin(qJ(2,1));
t1226 = sin(qJ(1,1));
t1231 = cos(qJ(2,1));
t1232 = cos(qJ(1,1));
t1500 = t1226 * t1236;
t1492 = pkin(2) * t1500 + t1139;
t1497 = t1234 * t1232;
t1057 = ((t1142 * t1226 + t1492) * t1184 + (-t1226 * t1359 + t1140) * t1181 + t1152 * t1497) * t1231 + t1225 * ((-t1140 * t1226 + t1496) * t1184 + (t1139 * t1226 + t1495) * t1181 - t1232 * t1462);
t1054 = t1057 ^ 2;
t1217 = pkin(5) + qJ(3,1);
t1197 = pkin(6) + t1217;
t1176 = 0.1e1 / t1197;
t1512 = t1212 * t1225;
t1464 = pkin(3) * t1512;
t1338 = -t1152 * t1231 + t1464;
t1089 = 0.1e1 / t1338 ^ 2;
t1177 = 0.1e1 / t1197 ^ 2;
t1553 = t1089 * t1177;
t1552 = t1176 * t1553;
t1611 = t1054 * t1552;
t1610 = 0.2e1 * pkin(2) * pkin(3);
t1202 = qJ(2,3) + pkin(7);
t1164 = cos(t1202);
t1185 = t1227 * pkin(2);
t1120 = pkin(3) * t1164 + t1185;
t1609 = pkin(1) + t1120;
t1203 = qJ(2,2) + pkin(7);
t1165 = cos(t1203);
t1186 = t1229 * pkin(2);
t1121 = pkin(3) * t1165 + t1186;
t1608 = pkin(1) + t1121;
t1204 = qJ(2,1) + pkin(7);
t1166 = cos(t1204);
t1187 = t1231 * pkin(2);
t1122 = pkin(3) * t1166 + t1187;
t1607 = pkin(1) + t1122;
t1105 = 0.1e1 / t1120;
t1377 = t1105 * t1052 * t1561;
t1109 = 0.1e1 / t1121;
t1376 = t1109 * t1053 * t1557;
t1113 = 0.1e1 / t1122;
t1375 = t1113 * t1054 * t1553;
t1252 = pkin(3) ^ 2;
t1253 = pkin(2) ^ 2;
t1194 = -t1252 + t1253;
t1606 = -0.2e1 * pkin(1);
t1605 = 0.2e1 * pkin(1);
t1604 = 2 * pkin(5);
t1082 = 0.1e1 / t1340;
t1085 = 0.1e1 / t1339;
t1088 = 0.1e1 / t1338;
t1263 = t1120 ^ 2;
t1106 = 0.1e1 / t1263;
t1266 = t1121 ^ 2;
t1110 = 0.1e1 / t1266;
t1269 = t1122 ^ 2;
t1114 = 0.1e1 / t1269;
t1157 = pkin(2) * t1584;
t1214 = t1253 / 0.2e1;
t1491 = t1157 + t1214;
t1603 = -0.4e1 * pkin(1) * (t1252 / 0.2e1 + t1491);
t1602 = 0.2e1 * t1157;
t1208 = t1227 ^ 2;
t1601 = 0.2e1 * t1208;
t1209 = t1229 ^ 2;
t1600 = 0.2e1 * t1209;
t1210 = t1231 ^ 2;
t1599 = 0.2e1 * t1210;
t1598 = -0.4e1 * t1227;
t1597 = -0.4e1 * t1229;
t1596 = -0.4e1 * t1231;
t1595 = -4 * pkin(5) - 4 * pkin(6);
t1594 = -pkin(5) / 0.2e1;
t1167 = t1601 - 0.1e1;
t1168 = t1600 - 0.1e1;
t1169 = t1599 - 0.1e1;
t1097 = t1236 * t1179 + t1235 * t1182;
t1094 = t1097 ^ 2;
t1592 = pkin(2) * t1094;
t1098 = t1236 * t1180 + t1235 * t1183;
t1095 = t1098 ^ 2;
t1591 = pkin(2) * t1095;
t1099 = t1236 * t1181 + t1235 * t1184;
t1096 = t1099 ^ 2;
t1590 = pkin(2) * t1096;
t1589 = pkin(2) * t1252;
t1518 = t1195 * t1228;
t1389 = pkin(1) * t1222 - t1518;
t1198 = t1213 ^ 2;
t1476 = pkin(3) * (t1198 - 0.1e1);
t1588 = pkin(3) * (t1222 * t1476 + t1389 * t1514);
t1517 = t1196 * t1230;
t1388 = pkin(1) * t1224 - t1517;
t1587 = pkin(3) * (t1224 * t1476 + t1388 * t1513);
t1516 = t1197 * t1232;
t1387 = pkin(1) * t1226 - t1516;
t1586 = pkin(3) * (t1226 * t1476 + t1387 * t1512);
t1585 = pkin(3) * t1212;
t1580 = pkin(3) * t1253;
t1123 = pkin(1) * t1221 - t1585;
t1127 = t1194 * t1235;
t1128 = t1194 * t1236;
t1132 = pkin(1) * t1514 - pkin(3);
t1461 = t1212 * t1610;
t1135 = t1235 * t1461;
t1136 = t1236 * t1461;
t1137 = pkin(1) * t1139;
t1138 = pkin(1) * t1140;
t1143 = t1222 * t1195;
t1159 = pkin(1) * t1189;
t1160 = pkin(1) * t1190;
t1405 = -0.2e1 * t1468;
t1129 = pkin(1) + t1405;
t1343 = t1129 * t1222 - t1518;
t1322 = t1343 * t1236;
t1323 = t1343 * t1235;
t1515 = t1198 * t1252;
t1414 = (t1499 + (-t1179 * t1235 + t1182 * t1236) * t1222) * t1515;
t1415 = t1234 * (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t1418 = t1221 * t1518;
t1477 = 0.2e1 * t1515;
t1485 = 0.2e1 * t1584;
t1487 = 0.2e1 * t1190;
t1488 = 0.2e1 * t1189;
t1509 = t1222 * t1235;
t1566 = (t1129 * t1228 + t1143) * t1234;
t1028 = (0.2e1 * t1414 + (t1494 * t1182 + (-pkin(2) * t1509 + t1140) * t1179 + pkin(2) * t1499) * t1485 + (t1128 * t1222 + t1135) * t1182 + (-t1127 * t1222 + t1136) * t1179 + t1228 * t1415) * t1208 + (t1221 * t1097 * t1477 + ((t1221 * t1488 + t1322) * t1182 + (t1221 * t1487 - t1323) * t1179 + t1566) * t1584 + (pkin(2) * t1322 + t1127 * t1221 + t1137) * t1182 + (-pkin(2) * t1323 + t1128 * t1221 + t1138) * t1179 + pkin(2) * t1566) * t1227 - t1414 + t1097 * t1123 * t1584 + (t1159 * t1221 + (-t1132 * t1508 + (t1236 * t1418 - t1189) * t1212) * pkin(3)) * t1182 + (t1160 * t1221 + (t1132 * t1509 + (-t1235 * t1418 - t1190) * t1212) * pkin(3)) * t1179 - (t1132 * t1228 + t1143 * t1514) * t1583;
t1563 = t1082 * t1170;
t1445 = t1055 * t1563;
t1050 = pkin(1) * t1445;
t1489 = t1252 + t1253;
t1126 = t1602 + t1489;
t1562 = t1082 * t1171;
t1444 = t1055 * t1562;
t1454 = t1028 * t1560;
t1543 = t1106 * t1170;
t1007 = (t1050 - (t1055 * t1340 + t1028) * t1563) * t1444 + t1094 * t1126 / (t1185 + (t1213 * t1227 - t1514) * pkin(3)) * t1543 - t1055 * t1454;
t1579 = t1007 * pkin(1);
t1124 = pkin(1) * t1223 - t1585;
t1133 = pkin(1) * t1513 - pkin(3);
t1144 = t1224 * t1196;
t1404 = -0.2e1 * t1466;
t1130 = pkin(1) + t1404;
t1342 = t1130 * t1224 - t1517;
t1320 = t1342 * t1236;
t1321 = t1342 * t1235;
t1413 = (t1498 + (-t1180 * t1235 + t1183 * t1236) * t1224) * t1515;
t1417 = t1223 * t1517;
t1505 = t1224 * t1235;
t1565 = (t1130 * t1230 + t1144) * t1234;
t1029 = (0.2e1 * t1413 + (t1493 * t1183 + (-pkin(2) * t1505 + t1140) * t1180 + pkin(2) * t1498) * t1485 + (t1128 * t1224 + t1135) * t1183 + (-t1127 * t1224 + t1136) * t1180 + t1230 * t1415) * t1209 + (t1223 * t1098 * t1477 + ((t1223 * t1488 + t1320) * t1183 + (t1223 * t1487 - t1321) * t1180 + t1565) * t1584 + (pkin(2) * t1320 + t1127 * t1223 + t1137) * t1183 + (-pkin(2) * t1321 + t1128 * t1223 + t1138) * t1180 + pkin(2) * t1565) * t1229 - t1413 + t1098 * t1124 * t1584 + (t1159 * t1223 + (-t1133 * t1504 + (t1236 * t1417 - t1189) * t1212) * pkin(3)) * t1183 + (t1160 * t1223 + (t1133 * t1505 + (-t1235 * t1417 - t1190) * t1212) * pkin(3)) * t1180 - (t1133 * t1230 + t1144 * t1513) * t1583;
t1559 = t1085 * t1173;
t1443 = t1056 * t1559;
t1051 = pkin(1) * t1443;
t1558 = t1085 * t1174;
t1442 = t1056 * t1558;
t1453 = t1029 * t1556;
t1538 = t1110 * t1173;
t1008 = (t1051 - (t1056 * t1339 + t1029) * t1559) * t1442 + t1095 * t1126 / (t1186 + (t1213 * t1229 - t1513) * pkin(3)) * t1538 - t1056 * t1453;
t1578 = t1008 * pkin(1);
t1125 = pkin(1) * t1225 - t1585;
t1134 = pkin(1) * t1512 - pkin(3);
t1145 = t1226 * t1197;
t1403 = -0.2e1 * t1464;
t1131 = pkin(1) + t1403;
t1341 = t1131 * t1226 - t1516;
t1318 = t1341 * t1236;
t1319 = t1341 * t1235;
t1412 = (t1497 + (-t1181 * t1235 + t1184 * t1236) * t1226) * t1515;
t1416 = t1225 * t1516;
t1501 = t1226 * t1235;
t1564 = (t1131 * t1232 + t1145) * t1234;
t1030 = (0.2e1 * t1412 + (t1492 * t1184 + (-pkin(2) * t1501 + t1140) * t1181 + pkin(2) * t1497) * t1485 + (t1128 * t1226 + t1135) * t1184 + (-t1127 * t1226 + t1136) * t1181 + t1232 * t1415) * t1210 + (t1225 * t1099 * t1477 + ((t1225 * t1488 + t1318) * t1184 + (t1225 * t1487 - t1319) * t1181 + t1564) * t1584 + (pkin(2) * t1318 + t1127 * t1225 + t1137) * t1184 + (-pkin(2) * t1319 + t1128 * t1225 + t1138) * t1181 + pkin(2) * t1564) * t1231 - t1412 + t1099 * t1125 * t1584 + (t1159 * t1225 + (-t1134 * t1500 + (t1236 * t1416 - t1189) * t1212) * pkin(3)) * t1184 + (t1160 * t1225 + (t1134 * t1501 + (-t1235 * t1416 - t1190) * t1212) * pkin(3)) * t1181 - (t1134 * t1232 + t1145 * t1512) * t1583;
t1555 = t1088 * t1176;
t1441 = t1057 * t1555;
t1049 = pkin(1) * t1441;
t1554 = t1088 * t1177;
t1440 = t1057 * t1554;
t1452 = t1030 * t1552;
t1533 = t1114 * t1176;
t1009 = (t1049 - (t1057 * t1338 + t1030) * t1555) * t1440 + t1096 * t1126 / (t1187 + (t1213 * t1231 - t1512) * pkin(3)) * t1533 - t1057 * t1452;
t1577 = t1009 * pkin(1);
t1575 = t1007 * t1170;
t1574 = t1007 * t1221;
t1573 = t1008 * t1173;
t1572 = t1008 * t1223;
t1571 = t1009 * t1176;
t1570 = t1009 * t1225;
t1569 = t1167 * t1377;
t1568 = t1168 * t1376;
t1567 = t1169 * t1375;
t1551 = t1094 * t1170;
t1550 = t1095 * t1173;
t1549 = t1096 * t1176;
t1548 = t1097 * t1105;
t1547 = t1098 * t1109;
t1546 = t1099 * t1113;
t1545 = t1105 * t1221;
t1544 = t1105 * t1227;
t1542 = t1106 * t1227;
t1161 = sin(t1202);
t1117 = pkin(2) * t1221 + pkin(3) * t1161;
t1541 = t1105 * t1106 * t1117;
t1540 = t1109 * t1223;
t1539 = t1109 * t1229;
t1537 = t1110 * t1229;
t1162 = sin(t1203);
t1118 = pkin(2) * t1223 + pkin(3) * t1162;
t1536 = t1109 * t1110 * t1118;
t1535 = t1113 * t1225;
t1534 = t1113 * t1231;
t1532 = t1114 * t1231;
t1163 = sin(t1204);
t1119 = pkin(2) * t1225 + pkin(3) * t1163;
t1531 = t1113 * t1114 * t1119;
t1530 = t1152 * t1179;
t1529 = t1152 * t1180;
t1528 = t1152 * t1181;
t1527 = t1152 * t1182;
t1526 = t1152 * t1183;
t1525 = t1152 * t1184;
t1524 = t1170 * t1228;
t1523 = t1173 * t1230;
t1522 = t1176 * t1232;
t1521 = t1179 * t1222;
t1520 = t1180 * t1224;
t1519 = t1181 * t1226;
t1511 = t1221 * t1227;
t1510 = t1222 * t1182;
t1507 = t1223 * t1229;
t1506 = t1224 * t1183;
t1503 = t1225 * t1231;
t1502 = t1226 * t1184;
t1250 = pkin(5) ^ 2;
t1254 = pkin(1) ^ 2;
t1490 = t1250 + t1254;
t1486 = -0.2e1 * t1589;
t1484 = -0.2e1 * t1580;
t1374 = t1221 * t1445;
t1430 = t1097 * t1545;
t1386 = pkin(2) * t1430;
t1408 = t1548 / 0.2e1;
t1483 = 0.2e1 * (-(-pkin(2) * t1374 + t1215 * t1408) * pkin(2) * t1097 * t1544 + (t1028 * t1215 * t1563 + pkin(1) * t1386) * t1445) * t1170;
t1372 = t1223 * t1443;
t1429 = t1098 * t1540;
t1385 = pkin(2) * t1429;
t1407 = t1547 / 0.2e1;
t1482 = 0.2e1 * (-pkin(2) * (-pkin(2) * t1372 + t1216 * t1407) * t1098 * t1539 + (t1029 * t1216 * t1559 + pkin(1) * t1385) * t1443) * t1173;
t1370 = t1225 * t1441;
t1428 = t1099 * t1535;
t1384 = pkin(2) * t1428;
t1406 = t1546 / 0.2e1;
t1481 = 0.2e1 * (-pkin(2) * t1099 * (-pkin(2) * t1370 + t1217 * t1406) * t1534 + (t1030 * t1217 * t1555 + pkin(1) * t1384) * t1441) * t1176;
t1480 = -0.2e1 * t1548;
t1479 = -0.2e1 * t1547;
t1478 = -0.2e1 * t1546;
t1474 = t1179 * t1585;
t1473 = t1180 * t1585;
t1472 = t1181 * t1585;
t1471 = t1182 * t1585;
t1470 = t1183 * t1585;
t1469 = t1184 * t1585;
t1467 = t1222 * t1585;
t1465 = t1224 * t1585;
t1463 = t1226 * t1585;
t1460 = t1007 * t1545;
t1459 = t1007 * t1544;
t1458 = t1008 * t1540;
t1457 = t1008 * t1539;
t1456 = t1009 * t1535;
t1455 = t1009 * t1534;
t1450 = t1082 * t1613;
t1448 = t1085 * t1612;
t1446 = t1088 * t1611;
t1058 = (-t1152 * t1521 + t1471) * t1227 + (t1179 * t1467 + t1527) * t1221;
t1439 = t1058 * t1563;
t1059 = (-t1152 * t1520 + t1470) * t1229 + (t1180 * t1465 + t1526) * t1223;
t1438 = t1059 * t1559;
t1060 = (-t1152 * t1519 + t1469) * t1231 + (t1181 * t1463 + t1525) * t1225;
t1437 = t1060 * t1555;
t1061 = (t1152 * t1510 + t1474) * t1227 + t1221 * (-t1182 * t1467 + t1530);
t1436 = t1061 * t1563;
t1062 = (t1152 * t1506 + t1473) * t1229 + t1223 * (-t1183 * t1465 + t1529);
t1435 = t1062 * t1559;
t1063 = (t1152 * t1502 + t1472) * t1231 + t1225 * (-t1184 * t1463 + t1528);
t1434 = t1063 * t1555;
t1433 = t1094 / t1263 ^ 2 * t1117;
t1432 = t1095 / t1266 ^ 2 * t1118;
t1431 = t1096 / t1269 ^ 2 * t1119;
t1427 = t1221 * t1541;
t1426 = t1227 * t1541;
t1425 = t1223 * t1536;
t1424 = t1229 * t1536;
t1423 = t1225 * t1531;
t1422 = t1231 * t1531;
t1421 = t1221 ^ 2 * t1575;
t1420 = t1223 ^ 2 * t1573;
t1419 = t1225 ^ 2 * t1571;
t1411 = t1563 / 0.2e1;
t1410 = t1559 / 0.2e1;
t1409 = t1555 / 0.2e1;
t1402 = -0.2e1 * pkin(3) * t1252 - 0.4e1 * t1580;
t1368 = t1094 * t1427;
t1355 = pkin(2) * t1368;
t1395 = 0.2e1 * t1055 * t1561;
t1401 = (0.2e1 * t1007 * t1215 + t1028 * t1395 - t1542 * t1592 - t1355) * t1170;
t1367 = t1095 * t1425;
t1354 = pkin(2) * t1367;
t1394 = 0.2e1 * t1056 * t1557;
t1400 = (0.2e1 * t1008 * t1216 + t1029 * t1394 - t1537 * t1591 - t1354) * t1173;
t1366 = t1096 * t1423;
t1353 = pkin(2) * t1366;
t1393 = 0.2e1 * t1057 * t1553;
t1399 = (0.2e1 * t1009 * t1217 + t1030 * t1393 - t1532 * t1590 - t1353) * t1176;
t1398 = t1082 * t1483;
t1397 = t1085 * t1482;
t1396 = t1088 * t1481;
t1392 = 0.2e1 * t1195 * t1548;
t1391 = 0.2e1 * t1196 * t1547;
t1390 = 0.2e1 * t1197 * t1546;
t1020 = t1028 * t1411 - t1050;
t1153 = 0.2e1 * t1202;
t1244 = 0.2e1 * qJ(2,3);
t1199 = pkin(7) + t1244;
t1247 = (qJ(3,3) ^ 2);
t1325 = -(2 * t1250) - 0.2e1 * t1254 - t1489 + ((-4 * pkin(5) - 2 * pkin(6)) * pkin(6));
t1383 = -((-0.4e1 * t1020 * t1164 + t1161 * t1392) * pkin(3) + (t1020 * t1598 + t1221 * t1392) * pkin(2) - (t1028 * t1605 + ((qJ(3,3) * t1595) - cos(t1153) * t1252 - cos(t1244) * t1253 - (2 * t1247) + (-cos(t1199) - t1213) * t1610 + t1325) * t1055) * t1563) * t1562 / 0.2e1;
t1021 = t1029 * t1410 - t1051;
t1154 = 0.2e1 * t1203;
t1245 = 0.2e1 * qJ(2,2);
t1200 = pkin(7) + t1245;
t1248 = (qJ(3,2) ^ 2);
t1382 = -((-0.4e1 * t1021 * t1165 + t1162 * t1391) * pkin(3) + (t1021 * t1597 + t1223 * t1391) * pkin(2) - (t1029 * t1605 + ((qJ(3,2) * t1595) - cos(t1154) * t1252 - cos(t1245) * t1253 - (2 * t1248) + (-cos(t1200) - t1213) * t1610 + t1325) * t1056) * t1559) * t1558 / 0.2e1;
t1019 = t1030 * t1409 - t1049;
t1155 = 0.2e1 * t1204;
t1246 = 0.2e1 * qJ(2,1);
t1201 = pkin(7) + t1246;
t1249 = (qJ(3,1) ^ 2);
t1381 = -((-0.4e1 * t1019 * t1166 + t1163 * t1390) * pkin(3) + (t1019 * t1596 + t1225 * t1390) * pkin(2) - (t1030 * t1605 + ((qJ(3,1) * t1595) - cos(t1155) * t1252 - cos(t1246) * t1253 - (2 * t1249) + (-cos(t1201) - t1213) * t1610 + t1325) * t1057) * t1555) * t1554 / 0.2e1;
t1156 = pkin(2) * t1214 + t1589;
t1243 = 0.2e1 * pkin(7);
t1380 = (-(sin(t1199) * t1610 + sin(t1153) * t1252 + sin(t1244) * t1253) * t1082 * t1055 + (cos(qJ(2,3) + t1243) * t1486 + cos(-pkin(7) + qJ(2,3)) * t1484 + t1402 * t1164 + t1156 * t1598 + t1603) * t1548) * t1097 * t1543;
t1379 = (-(sin(t1200) * t1610 + sin(t1154) * t1252 + sin(t1245) * t1253) * t1085 * t1056 + (cos(qJ(2,2) + t1243) * t1486 + cos(-pkin(7) + qJ(2,2)) * t1484 + t1402 * t1165 + t1156 * t1597 + t1603) * t1547) * t1098 * t1538;
t1378 = (-(sin(t1201) * t1610 + sin(t1155) * t1252 + sin(t1246) * t1253) * t1088 * t1057 + (cos(qJ(2,1) + t1243) * t1486 + cos(-pkin(7) + qJ(2,1)) * t1484 + t1402 * t1166 + t1156 * t1596 + t1603) * t1546) * t1099 * t1533;
t1373 = t1055 * t1171 * t1548;
t1371 = t1056 * t1174 * t1547;
t1369 = t1057 * t1177 * t1546;
t1365 = t1609 * t1454;
t1364 = t1608 * t1453;
t1363 = t1607 * t1452;
t1362 = t1511 * t1575;
t1361 = t1507 * t1573;
t1360 = t1503 * t1571;
t1358 = t1082 * t1401;
t1357 = t1085 * t1400;
t1356 = t1088 * t1399;
t1352 = t1221 * t1377;
t1351 = t1227 * t1377;
t1350 = t1223 * t1376;
t1349 = t1229 * t1376;
t1348 = t1225 * t1375;
t1347 = t1231 * t1375;
t1346 = t1167 * t1373;
t1345 = t1168 * t1371;
t1344 = t1169 * t1369;
t1337 = (-pkin(5) * t1368 + (pkin(5) * t1227 * t1408 - pkin(1) * t1374) * t1480 + 0.2e1 * t1227 * t1579) * t1170;
t1336 = (-pkin(5) * t1367 + (pkin(5) * t1229 * t1407 - pkin(1) * t1372) * t1479 + 0.2e1 * t1229 * t1578) * t1173;
t1335 = (-pkin(5) * t1366 + (pkin(5) * t1231 * t1406 - pkin(1) * t1370) * t1478 + 0.2e1 * t1231 * t1577) * t1176;
t1334 = (-pkin(5) * t1094 * t1426 + (-t1227 * t1050 + t1430 * t1594) * t1480 + t1574 * t1606) * t1170;
t1333 = (-pkin(5) * t1095 * t1424 + (-t1229 * t1051 + t1429 * t1594) * t1479 + t1572 * t1606) * t1173;
t1332 = (-pkin(5) * t1096 * t1422 + (-t1231 * t1049 + t1428 * t1594) * t1478 + t1570 * t1606) * t1176;
t1331 = t1179 * t1352;
t1330 = t1180 * t1350;
t1329 = t1181 * t1348;
t1328 = t1182 * t1352;
t1327 = t1183 * t1350;
t1326 = t1184 * t1348;
t1324 = t1194 + t1477 + t1602;
t1317 = 0.2e1 * t1373 * t1511;
t1316 = 0.2e1 * t1371 * t1507;
t1315 = 0.2e1 * t1369 * t1503;
t1314 = t1082 * t1337;
t1313 = t1082 * t1334;
t1312 = t1085 * t1336;
t1311 = t1085 * t1333;
t1310 = t1088 * t1335;
t1309 = t1088 * t1332;
t1040 = t1055 * t1215 * t1411 + t1386;
t1290 = -t1380 / 0.2e1 + (-t1365 - t1383) * t1055;
t989 = (-t1185 - pkin(1)) * t1007 + t1290;
t1308 = t1040 * t1395 - t1563 * t989;
t1041 = t1056 * t1216 * t1410 + t1385;
t1289 = -t1379 / 0.2e1 + (-t1364 - t1382) * t1056;
t990 = (-t1186 - pkin(1)) * t1008 + t1289;
t1307 = t1041 * t1394 - t1559 * t990;
t1042 = t1057 * t1217 * t1409 + t1384;
t1288 = -t1378 / 0.2e1 + (-t1363 - t1381) * t1057;
t991 = (-t1187 - pkin(1)) * t1009 + t1288;
t1306 = t1042 * t1393 - t1555 * t991;
t1305 = t1105 * (-(-t1050 - (t1055 * t1185 - 0.2e1 * t1028) * t1563) * t1374 - t1215 * t1574 + t1541 * t1592);
t1304 = t1109 * (-(-t1051 - (t1056 * t1186 - 0.2e1 * t1029) * t1559) * t1372 - t1216 * t1572 + t1536 * t1591);
t1303 = t1113 * (-(-t1049 - (t1057 * t1187 - 0.2e1 * t1030) * t1555) * t1370 - t1217 * t1570 + t1531 * t1590);
t1302 = (-t1106 * t1221 + t1426) * t1551;
t1301 = (t1427 + t1542) * t1551;
t1300 = (-t1110 * t1223 + t1424) * t1550;
t1299 = (t1425 + t1537) * t1550;
t1298 = (-t1114 * t1225 + t1422) * t1549;
t1297 = (t1423 + t1532) * t1549;
t1296 = t1082 * t1302;
t1295 = t1082 * t1301;
t1294 = t1085 * t1300;
t1293 = t1085 * t1299;
t1292 = t1088 * t1298;
t1291 = t1088 * t1297;
t1287 = -t1082 * t1421 + t1083 * t1317;
t1286 = -t1085 * t1420 + t1086 * t1316;
t1285 = -t1088 * t1419 + t1089 * t1315;
t1284 = t1179 * t1460 + t1180 * t1458 + t1181 * t1456;
t1283 = t1179 * t1459 + t1180 * t1457 + t1181 * t1455;
t1282 = t1182 * t1460 + t1183 * t1458 + t1184 * t1456;
t1281 = t1182 * t1459 + t1183 * t1457 + t1184 * t1455;
t1280 = -0.2e1 * t1082 * t1362 + 0.2e1 * t1083 * t1346;
t1279 = -0.2e1 * t1085 * t1361 + 0.2e1 * t1086 * t1345;
t1278 = -0.2e1 * t1088 * t1360 + 0.2e1 * t1089 * t1344;
t1158 = pkin(1) * t1585;
t1100 = (t1198 - 0.1e1 / 0.2e1) * t1252 + t1491;
t1078 = t1226 * t1403 + t1387;
t1077 = t1224 * t1404 + t1388;
t1076 = t1222 * t1405 + t1389;
t1075 = t1607 * t1232 + t1145;
t1074 = t1608 * t1230 + t1144;
t1073 = t1609 * t1228 + t1143;
t1069 = t1225 * t1324 + t1158;
t1068 = t1223 * t1324 + t1158;
t1067 = t1221 * t1324 + t1158;
t1048 = (t1100 * t1502 + t1152 * t1472) * t1599 + (t1069 * t1181 + t1078 * t1525) * t1231 - t1184 * t1586 + t1125 * t1528;
t1047 = (-t1100 * t1519 + t1152 * t1469) * t1599 + (t1069 * t1184 - t1078 * t1528) * t1231 + t1181 * t1586 + t1125 * t1525;
t1046 = (t1100 * t1506 + t1152 * t1473) * t1600 + (t1068 * t1180 + t1077 * t1526) * t1229 - t1183 * t1587 + t1124 * t1529;
t1045 = (-t1100 * t1520 + t1152 * t1470) * t1600 + (t1068 * t1183 - t1077 * t1529) * t1229 + t1180 * t1587 + t1124 * t1526;
t1044 = (t1100 * t1510 + t1152 * t1474) * t1601 + (t1067 * t1179 + t1076 * t1527) * t1227 - t1182 * t1588 + t1123 * t1530;
t1043 = (-t1100 * t1521 + t1152 * t1471) * t1601 + (t1067 * t1182 - t1076 * t1530) * t1227 + t1179 * t1588 + t1123 * t1527;
t988 = 0.2e1 * (t1577 + t1378 / 0.4e1 + (t1381 / 0.2e1 + t1363 / 0.2e1) * t1057) * t1187 - t1217 * t1353 - pkin(1) * t1288 + ((qJ(3,1) * t1604) + t1210 * t1253 + t1249 + t1490) * t1009;
t987 = 0.2e1 * (t1578 + t1379 / 0.4e1 + (t1382 / 0.2e1 + t1364 / 0.2e1) * t1056) * t1186 - t1216 * t1354 - pkin(1) * t1289 + ((qJ(3,2) * t1604) + t1209 * t1253 + t1248 + t1490) * t1008;
t986 = 0.2e1 * (t1579 + t1380 / 0.4e1 + (t1383 / 0.2e1 + t1365 / 0.2e1) * t1055) * t1185 - t1215 * t1355 - pkin(1) * t1290 + ((qJ(3,3) * t1604) + t1208 * t1253 + t1247 + t1490) * t1007;
t1 = [-t1007 * t1436 - t1008 * t1435 - t1009 * t1434, 0, 0, t1061 * t1287 + t1062 * t1286 + t1063 * t1285 - t1227 * t1331 - t1229 * t1330 - t1231 * t1329, t1061 * t1280 + t1062 * t1279 + t1063 * t1278 - t1179 * t1569 - t1180 * t1568 - t1181 * t1567, -t1061 * t1295 - t1062 * t1293 - t1063 * t1291 + t1284, -t1061 * t1296 - t1062 * t1294 - t1063 * t1292 + t1283, t1179 * t1433 + t1180 * t1432 + t1181 * t1431, -t1063 * t1310 - t1062 * t1312 - t1061 * t1314 - t1284 * pkin(5) + (t1329 + t1330 + t1331) * pkin(1), -t1063 * t1309 - t1062 * t1311 - t1061 * t1313 - t1283 * pkin(5) + (t1179 * t1351 + t1180 * t1349 + t1181 * t1347) * pkin(1), -pkin(2) * t1284 + t1044 * t1450 + t1046 * t1448 + t1048 * t1446 - t1061 * t1358 - t1062 * t1357 - t1063 * t1356, -t986 * t1436 - t987 * t1435 - t988 * t1434 + t1306 * t1048 + t1307 * t1046 + t1308 * t1044 - t1061 * t1398 - t1062 * t1397 - t1063 * t1396 + (t1179 * t1305 + t1180 * t1304 + t1181 * t1303) * pkin(2), 0; -t1007 * t1439 - t1008 * t1438 - t1009 * t1437, 0, 0, t1058 * t1287 + t1059 * t1286 + t1060 * t1285 - t1227 * t1328 - t1229 * t1327 - t1231 * t1326, t1058 * t1280 + t1059 * t1279 + t1060 * t1278 - t1182 * t1569 - t1183 * t1568 - t1184 * t1567, -t1058 * t1295 - t1059 * t1293 - t1060 * t1291 + t1282, -t1058 * t1296 - t1059 * t1294 - t1060 * t1292 + t1281, t1182 * t1433 + t1183 * t1432 + t1184 * t1431, -t1060 * t1310 - t1059 * t1312 - t1058 * t1314 - t1282 * pkin(5) + (t1326 + t1327 + t1328) * pkin(1), -t1060 * t1309 - t1059 * t1311 - t1058 * t1313 - t1281 * pkin(5) + (t1182 * t1351 + t1183 * t1349 + t1184 * t1347) * pkin(1), -pkin(2) * t1282 + t1043 * t1450 + t1045 * t1448 + t1047 * t1446 - t1058 * t1358 - t1059 * t1357 - t1060 * t1356, -t986 * t1439 - t987 * t1438 - t988 * t1437 + t1306 * t1047 + t1307 * t1045 + t1308 * t1043 - t1058 * t1398 - t1059 * t1397 - t1060 * t1396 + (t1182 * t1305 + t1183 * t1304 + t1184 * t1303) * pkin(2), 0; t1007 * t1524 + t1008 * t1523 + t1009 * t1522, 0, 0, (-t1088 * t1315 + t1419) * t1232 + (-t1085 * t1316 + t1420) * t1230 + (-t1082 * t1317 + t1421) * t1228, 0.2e1 * (-t1088 * t1344 + t1360) * t1232 + 0.2e1 * (-t1085 * t1345 + t1361) * t1230 + 0.2e1 * (-t1082 * t1346 + t1362) * t1228, t1228 * t1301 + t1230 * t1299 + t1232 * t1297, t1228 * t1302 + t1230 * t1300 + t1232 * t1298, 0, t1228 * t1337 + t1230 * t1336 + t1232 * t1335, t1228 * t1334 + t1230 * t1333 + t1232 * t1332, -t1073 * t1613 - t1074 * t1612 - t1075 * t1611 + t1228 * t1401 + t1230 * t1400 + t1232 * t1399, t986 * t1524 + t987 * t1523 + t988 * t1522 + (-0.2e1 * t1042 * t1440 + t1176 * t991) * t1075 + (-0.2e1 * t1041 * t1442 + t1173 * t990) * t1074 + (-0.2e1 * t1040 * t1444 + t1170 * t989) * t1073 + t1228 * t1483 + t1230 * t1482 + t1232 * t1481, 0;];
tau_reg  = t1;
