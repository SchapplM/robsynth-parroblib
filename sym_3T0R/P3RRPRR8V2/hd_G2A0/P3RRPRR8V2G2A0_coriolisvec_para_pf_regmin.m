% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:06:51
% EndTime: 2022-11-07 13:07:13
% DurationCPUTime: 23.06s
% Computational Cost: add. (121255->749), mult. (275805->1396), div. (7503->27), fcn. (155580->50), ass. (0->644)
t1684 = sin(pkin(7));
t1706 = xDP(2);
t2144 = pkin(3) * t1706;
t1607 = t1684 * t2144;
t1707 = xDP(1);
t2143 = pkin(3) * t1707;
t1608 = t1684 * t2143;
t1685 = cos(pkin(7));
t1610 = t1685 * t2143;
t2146 = pkin(3) * t1685;
t1621 = pkin(2) + t2146;
t1690 = legFrame(3,2);
t1648 = sin(t1690);
t1651 = cos(t1690);
t1693 = sin(qJ(2,3));
t1694 = sin(qJ(1,3));
t1699 = cos(qJ(2,3));
t1700 = cos(qJ(1,3));
t1866 = t1621 * t1706;
t1705 = xDP(3);
t2145 = pkin(3) * t1705;
t1992 = t1684 * t2145;
t2055 = t1694 * t1707;
t2037 = pkin(2) * t2055 + t1607;
t1659 = pkin(2) * t1707;
t2038 = t1610 + t1659;
t1658 = pkin(2) * t1706;
t2039 = t1685 * t2144 + t1658;
t2048 = t1700 * t1705;
t1514 = ((t1610 * t1694 + t2037) * t1651 + (-t1694 * t1866 + t1608) * t1648 + t1621 * t2048) * t1699 + ((-t1608 * t1694 + t2039) * t1651 + (t1607 * t1694 + t2038) * t1648 - t1700 * t1992) * t1693;
t1511 = t1514 ^ 2;
t1687 = qJ(3,3) + pkin(5);
t1664 = pkin(6) + t1687;
t1639 = 0.1e1 / t1664;
t2063 = t1684 * t1693;
t1998 = pkin(3) * t2063;
t1822 = -t1621 * t1699 + t1998;
t1545 = 0.1e1 / t1822 ^ 2;
t1640 = 0.1e1 / t1664 ^ 2;
t2114 = t1545 * t1640;
t2113 = t1639 * t2114;
t2177 = t1511 * t2113;
t1691 = legFrame(2,2);
t1649 = sin(t1691);
t1652 = cos(t1691);
t1695 = sin(qJ(2,2));
t1696 = sin(qJ(1,2));
t1701 = cos(qJ(2,2));
t1702 = cos(qJ(1,2));
t2052 = t1696 * t1707;
t2036 = pkin(2) * t2052 + t1607;
t2047 = t1702 * t1705;
t1515 = ((t1610 * t1696 + t2036) * t1652 + (-t1696 * t1866 + t1608) * t1649 + t1621 * t2047) * t1701 + ((-t1608 * t1696 + t2039) * t1652 + (t1607 * t1696 + t2038) * t1649 - t1702 * t1992) * t1695;
t1512 = t1515 ^ 2;
t1688 = qJ(3,2) + pkin(5);
t1665 = pkin(6) + t1688;
t1642 = 0.1e1 / t1665;
t2062 = t1684 * t1695;
t1996 = pkin(3) * t2062;
t1821 = -t1621 * t1701 + t1996;
t1548 = 0.1e1 / t1821 ^ 2;
t1643 = 0.1e1 / t1665 ^ 2;
t2111 = t1548 * t1643;
t2110 = t1642 * t2111;
t2176 = t1512 * t2110;
t1692 = legFrame(1,2);
t1650 = sin(t1692);
t1653 = cos(t1692);
t1697 = sin(qJ(2,1));
t1698 = sin(qJ(1,1));
t1703 = cos(qJ(2,1));
t1704 = cos(qJ(1,1));
t2049 = t1698 * t1707;
t2035 = pkin(2) * t2049 + t1607;
t2046 = t1704 * t1705;
t1516 = ((t1610 * t1698 + t2035) * t1653 + (-t1698 * t1866 + t1608) * t1650 + t1621 * t2046) * t1703 + ((-t1608 * t1698 + t2039) * t1653 + (t1607 * t1698 + t2038) * t1650 - t1704 * t1992) * t1697;
t1513 = t1516 ^ 2;
t1689 = qJ(3,1) + pkin(5);
t1666 = pkin(6) + t1689;
t1645 = 0.1e1 / t1666;
t2061 = t1684 * t1697;
t1994 = pkin(3) * t2061;
t1820 = -t1621 * t1703 + t1994;
t1551 = 0.1e1 / t1820 ^ 2;
t1646 = 0.1e1 / t1666 ^ 2;
t2108 = t1551 * t1646;
t2107 = t1645 * t2108;
t2175 = t1513 * t2107;
t2174 = -0.2e1 * pkin(2);
t1563 = -t1685 * t1699 + t2063;
t2173 = -0.2e1 * t1563;
t2060 = t1685 * t1693;
t1566 = t1684 * t1699 + t2060;
t2172 = 0.2e1 * t1566;
t1680 = t1699 ^ 2;
t2171 = 0.2e1 * t1680;
t1681 = t1701 ^ 2;
t2170 = 0.2e1 * t1681;
t1682 = t1703 ^ 2;
t2169 = 0.2e1 * t1682;
t2168 = 0.2e1 * pkin(2) * pkin(3);
t2167 = (pkin(5) + pkin(6));
t1673 = qJ(2,3) + pkin(7);
t1630 = cos(t1673);
t1654 = t1699 * pkin(2);
t1586 = pkin(3) * t1630 + t1654;
t2166 = pkin(1) + t1586;
t1674 = qJ(2,2) + pkin(7);
t1631 = cos(t1674);
t1655 = t1701 * pkin(2);
t1587 = pkin(3) * t1631 + t1655;
t2165 = pkin(1) + t1587;
t1676 = qJ(2,1) + pkin(7);
t1632 = cos(t1676);
t1656 = t1703 * pkin(2);
t1588 = pkin(3) * t1632 + t1656;
t2164 = pkin(1) + t1588;
t1725 = pkin(3) ^ 2;
t1726 = pkin(2) ^ 2;
t1663 = -t1725 + t1726;
t1561 = t1650 * t1707 + t1653 * t1706;
t2147 = pkin(3) * t1684;
t1593 = pkin(1) * t1697 - t2147;
t1595 = t1663 * t1706;
t1596 = t1663 * t1707;
t1602 = pkin(1) * t2061 - pkin(3);
t1991 = t1684 * t2168;
t1603 = t1706 * t1991;
t1604 = t1707 * t1991;
t1605 = pkin(1) * t1607;
t1606 = pkin(1) * t1608;
t1613 = t1698 * t1666;
t1625 = pkin(1) * t1658;
t1626 = pkin(1) * t1659;
t1917 = -0.2e1 * t1994;
t1599 = pkin(1) + t1917;
t2065 = t1666 * t1704;
t1829 = t1599 * t1698 - t2065;
t1802 = t1829 * t1707;
t1803 = t1829 * t1706;
t1667 = t1685 ^ 2;
t2064 = t1667 * t1725;
t1926 = (t2046 + (-t1650 * t1706 + t1653 * t1707) * t1698) * t2064;
t1929 = t1705 * (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t1930 = t1697 * t2065;
t2007 = 0.2e1 * t2064;
t2025 = 0.2e1 * t2146;
t2026 = 0.2e1 * t1659;
t2027 = 0.2e1 * t1658;
t2043 = t1705 * (t1599 * t1704 + t1613);
t2050 = t1698 * t1706;
t1474 = (0.2e1 * t1926 + (t2035 * t1653 + (-pkin(2) * t2050 + t1608) * t1650 + pkin(2) * t2046) * t2025 + (t1596 * t1698 + t1603) * t1653 + (-t1595 * t1698 + t1604) * t1650 + t1704 * t1929) * t1682 + (t1697 * t1561 * t2007 + ((t1697 * t2027 + t1802) * t1653 + (t1697 * t2026 - t1803) * t1650 + t2043) * t2146 + (pkin(2) * t1802 + t1595 * t1697 + t1605) * t1653 + (-pkin(2) * t1803 + t1596 * t1697 + t1606) * t1650 + pkin(2) * t2043) * t1703 - t1926 + t1561 * t1593 * t2146 + (t1625 * t1697 + (-t1602 * t2049 + (t1707 * t1930 - t1658) * t1684) * pkin(3)) * t1653 + (t1626 * t1697 + (t1602 * t2050 + (-t1706 * t1930 - t1659) * t1684) * pkin(3)) * t1650 - (t1602 * t1704 + t1613 * t2061) * t2145;
t1967 = t1474 * t2107;
t1873 = t2164 * t1967;
t1550 = 0.1e1 / t1820;
t1686 = t1726 / 0.2e1;
t2138 = t1725 * pkin(2);
t1622 = pkin(2) * t1686 + t2138;
t1717 = 0.2e1 * qJ(2,1);
t1671 = pkin(7) + t1717;
t1714 = 0.2e1 * pkin(7);
t1675 = t1717 + t1714;
t2142 = pkin(3) * t1726;
t1916 = -0.2e1 * pkin(3) * t1725 - 0.4e1 * t2142;
t2020 = -0.2e1 * t2138;
t2024 = -0.2e1 * t2142;
t1742 = t1588 ^ 2;
t1582 = 0.1e1 / t1742;
t2082 = t1582 * t1645;
t1581 = 0.1e1 / t1588;
t2101 = t1561 * t1581;
t2152 = -0.4e1 * t1703;
t1623 = pkin(2) * t2146;
t2034 = t1623 + t1686;
t2159 = -0.4e1 * pkin(1) * (t1725 / 0.2e1 + t2034);
t1889 = (-(sin(t1671) * t2168 + sin(t1675) * t1725 + sin(t1717) * t1726) * t1550 * t1516 + (cos(qJ(2,1) + t1714) * t2020 + cos(-pkin(7) + qJ(2,1)) * t2024 + t1916 * t1632 + t1622 * t2152 + t2159) * t2101) * t1561 * t2082;
t2109 = t1550 * t1645;
t1951 = t1516 * t2109;
t1505 = pkin(1) * t1951;
t1923 = t2109 / 0.2e1;
t1457 = t1474 * t1923 - t1505;
t1629 = sin(t1676);
t1708 = 4 * t2167;
t1720 = (qJ(3,1) ^ 2);
t1723 = (pkin(5) ^ 2);
t1727 = pkin(1) ^ 2;
t2031 = t1725 + t1726;
t1809 = -(2 * t1723) - 0.2e1 * t1727 - t2031 + ((-4 * pkin(5) - 2 * pkin(6)) * pkin(6));
t2008 = 0.2e1 * t2101;
t1907 = t1666 * t2008;
t2033 = 2 * t2167;
t2162 = 2 * qJ(3,1);
t2163 = 0.2e1 * pkin(1);
t1895 = ((-0.4e1 * t1457 * t1632 + t1629 * t1907) * pkin(3) + (t1457 * t2152 + t1697 * t1907) * pkin(2) - (t1474 * t2163 + (-t1725 * cos(t1675) - t1726 * cos(t1717) - (t1708 * qJ(3,1)) - (2 * t1720) + (-cos(t1671) - t1685) * t2168 + t1809) * t1516) * t2109) / (t2162 + t2033) * t2109;
t1764 = -(t1873 - t1895) * t1516 - t1889 / 0.2e1;
t1560 = t1649 * t1707 + t1652 * t1706;
t1592 = pkin(1) * t1695 - t2147;
t1601 = pkin(1) * t2062 - pkin(3);
t1612 = t1696 * t1665;
t1918 = -0.2e1 * t1996;
t1598 = pkin(1) + t1918;
t2066 = t1665 * t1702;
t1830 = t1598 * t1696 - t2066;
t1804 = t1830 * t1707;
t1805 = t1830 * t1706;
t1927 = (t2047 + (-t1649 * t1706 + t1652 * t1707) * t1696) * t2064;
t1931 = t1695 * t2066;
t2044 = t1705 * (t1598 * t1702 + t1612);
t2053 = t1696 * t1706;
t1473 = (0.2e1 * t1927 + (t2036 * t1652 + (-pkin(2) * t2053 + t1608) * t1649 + pkin(2) * t2047) * t2025 + (t1596 * t1696 + t1603) * t1652 + (-t1595 * t1696 + t1604) * t1649 + t1702 * t1929) * t1681 + (t1695 * t1560 * t2007 + ((t1695 * t2027 + t1804) * t1652 + (t1695 * t2026 - t1805) * t1649 + t2044) * t2146 + (pkin(2) * t1804 + t1595 * t1695 + t1605) * t1652 + (-pkin(2) * t1805 + t1596 * t1695 + t1606) * t1649 + pkin(2) * t2044) * t1701 - t1927 + t1560 * t1592 * t2146 + (t1625 * t1695 + (-t1601 * t2052 + (t1707 * t1931 - t1658) * t1684) * pkin(3)) * t1652 + (t1626 * t1695 + (t1601 * t2053 + (-t1706 * t1931 - t1659) * t1684) * pkin(3)) * t1649 - (t1601 * t1702 + t1612 * t2062) * t2145;
t1969 = t1473 * t2110;
t1874 = t2165 * t1969;
t1547 = 0.1e1 / t1821;
t1716 = 0.2e1 * qJ(2,2);
t1668 = t1714 + t1716;
t1670 = pkin(7) + t1716;
t1739 = t1587 ^ 2;
t1578 = 0.1e1 / t1739;
t2089 = t1578 * t1642;
t1577 = 0.1e1 / t1587;
t2102 = t1560 * t1577;
t2153 = -0.4e1 * t1701;
t1890 = (-(sin(t1670) * t2168 + sin(t1668) * t1725 + sin(t1716) * t1726) * t1547 * t1515 + (cos(qJ(2,2) + t1714) * t2020 + cos(-pkin(7) + qJ(2,2)) * t2024 + t1916 * t1631 + t1622 * t2153 + t2159) * t2102) * t1560 * t2089;
t2112 = t1547 * t1642;
t1955 = t1515 * t2112;
t1510 = pkin(1) * t1955;
t1924 = t2112 / 0.2e1;
t1459 = t1473 * t1924 - t1510;
t1628 = sin(t1674);
t1719 = (qJ(3,2) ^ 2);
t2010 = 0.2e1 * t2102;
t1908 = t1665 * t2010;
t2161 = 2 * qJ(3,2);
t1896 = ((-0.4e1 * t1459 * t1631 + t1628 * t1908) * pkin(3) + (t1459 * t2153 + t1695 * t1908) * pkin(2) - (t1473 * t2163 + (-t1725 * cos(t1668) - t1726 * cos(t1716) - (t1708 * qJ(3,2)) - (2 * t1719) + (-cos(t1670) - t1685) * t2168 + t1809) * t1515) * t2112) / (t2161 + t2033) * t2112;
t1765 = -(t1874 - t1896) * t1515 - t1890 / 0.2e1;
t1559 = t1648 * t1707 + t1651 * t1706;
t1591 = pkin(1) * t1693 - t2147;
t1600 = pkin(1) * t2063 - pkin(3);
t1611 = t1694 * t1664;
t1919 = -0.2e1 * t1998;
t1597 = pkin(1) + t1919;
t2067 = t1664 * t1700;
t1831 = t1597 * t1694 - t2067;
t1806 = t1831 * t1707;
t1807 = t1831 * t1706;
t1928 = (t2048 + (-t1648 * t1706 + t1651 * t1707) * t1694) * t2064;
t1932 = t1693 * t2067;
t2045 = t1705 * (t1597 * t1700 + t1611);
t2056 = t1694 * t1706;
t1472 = (0.2e1 * t1928 + (t2037 * t1651 + (-pkin(2) * t2056 + t1608) * t1648 + pkin(2) * t2048) * t2025 + (t1596 * t1694 + t1603) * t1651 + (-t1595 * t1694 + t1604) * t1648 + t1700 * t1929) * t1680 + (t1693 * t1559 * t2007 + ((t1693 * t2027 + t1806) * t1651 + (t1693 * t2026 - t1807) * t1648 + t2045) * t2146 + (pkin(2) * t1806 + t1595 * t1693 + t1605) * t1651 + (-pkin(2) * t1807 + t1596 * t1693 + t1606) * t1648 + pkin(2) * t2045) * t1699 - t1928 + t1559 * t1591 * t2146 + (t1625 * t1693 + (-t1600 * t2055 + (t1707 * t1932 - t1658) * t1684) * pkin(3)) * t1651 + (t1626 * t1693 + (t1600 * t2056 + (-t1706 * t1932 - t1659) * t1684) * pkin(3)) * t1648 - (t1600 * t1700 + t1611 * t2063) * t2145;
t1971 = t1472 * t2113;
t1875 = t2166 * t1971;
t1544 = 0.1e1 / t1822;
t1715 = 0.2e1 * qJ(2,3);
t1669 = pkin(7) + t1715;
t1672 = t1715 + t1714;
t1736 = t1586 ^ 2;
t1574 = 0.1e1 / t1736;
t2096 = t1574 * t1639;
t1573 = 0.1e1 / t1586;
t2103 = t1559 * t1573;
t2154 = -0.4e1 * t1699;
t1891 = (-(sin(t1669) * t2168 + sin(t1672) * t1725 + sin(t1715) * t1726) * t1544 * t1514 + (cos(qJ(2,3) + t1714) * t2020 + cos(-pkin(7) + qJ(2,3)) * t2024 + t1916 * t1630 + t1622 * t2154 + t2159) * t2103) * t1559 * t2096;
t2115 = t1544 * t1639;
t1960 = t1514 * t2115;
t1509 = pkin(1) * t1960;
t1925 = t2115 / 0.2e1;
t1458 = t1472 * t1925 - t1509;
t1627 = sin(t1673);
t1718 = (qJ(3,3) ^ 2);
t2012 = 0.2e1 * t2103;
t1909 = t1664 * t2012;
t2160 = 2 * qJ(3,3);
t1897 = ((-0.4e1 * t1458 * t1630 + t1627 * t1909) * pkin(3) + (t1458 * t2154 + t1693 * t1909) * pkin(2) - (t1472 * t2163 + (-t1725 * cos(t1672) - t1726 * cos(t1715) - (t1708 * qJ(3,3)) - (2 * t1718) + (-cos(t1669) - t1685) * t2168 + t1809) * t1514) * t2115) / (t2160 + t2033) * t2115;
t1766 = -(t1875 - t1897) * t1514 - t1891 / 0.2e1;
t2158 = 0.2e1 * t1623;
t1633 = t2171 - 0.1e1;
t1634 = t2170 - 0.1e1;
t1635 = t2169 - 0.1e1;
t1906 = pkin(1) * t1694 - t2067;
t2006 = pkin(3) * (t1667 - 0.1e1);
t2150 = pkin(3) * (t1694 * t2006 + t1906 * t2063);
t1905 = pkin(1) * t1696 - t2066;
t2149 = pkin(3) * (t1696 * t2006 + t1905 * t2062);
t1904 = pkin(1) * t1698 - t2065;
t2148 = pkin(3) * (t1698 * t2006 + t1904 * t2061);
t1556 = t1559 ^ 2;
t1594 = t2158 + t2031;
t2118 = t1514 * t1640;
t1959 = t1544 * t2118;
t1430 = (t1509 - (t1514 * t1822 + t1472) * t2115) * t1959 + t1556 * t1594 / (-pkin(3) * t1563 + t1654) * t2096 - t1514 * t1971;
t2141 = t1430 * pkin(1);
t1557 = t1560 ^ 2;
t1564 = t1685 * t1701 - t2062;
t2117 = t1515 * t1643;
t1954 = t1547 * t2117;
t1431 = (t1510 - (t1515 * t1821 + t1473) * t2112) * t1954 + t1557 * t1594 / (pkin(3) * t1564 + t1655) * t2089 - t1515 * t1969;
t2140 = t1431 * pkin(1);
t1558 = t1561 ^ 2;
t1565 = t1685 * t1703 - t2061;
t2116 = t1516 * t1646;
t1950 = t1550 * t2116;
t1432 = (t1505 - (t1516 * t1820 + t1474) * t2109) * t1950 + t1558 * t1594 / (pkin(3) * t1565 + t1656) * t2082 - t1516 * t1967;
t2139 = t1432 * pkin(1);
t1403 = t2141 + t1891 / 0.4e1 + (-t1897 / 0.2e1 + t1875 / 0.2e1) * t1514;
t2136 = t1403 * t1699;
t1404 = t2140 + t1890 / 0.4e1 + (-t1896 / 0.2e1 + t1874 / 0.2e1) * t1515;
t2135 = t1404 * t1701;
t1405 = t2139 + t1889 / 0.4e1 + (-t1895 / 0.2e1 + t1873 / 0.2e1) * t1516;
t2134 = t1405 * t1703;
t2133 = t1430 * t1563;
t2132 = t1430 * t1566;
t2131 = t1430 * t1639;
t2130 = t1430 * t1687;
t2129 = t1430 * t1693;
t2128 = t1431 * t1564;
t2059 = t1685 * t1695;
t1567 = t1684 * t1701 + t2059;
t2127 = t1431 * t1567;
t2126 = t1431 * t1642;
t2125 = t1431 * t1688;
t2124 = t1431 * t1695;
t2123 = t1432 * t1565;
t2058 = t1685 * t1697;
t1568 = t1684 * t1703 + t2058;
t2122 = t1432 * t1568;
t2121 = t1432 * t1645;
t2120 = t1432 * t1689;
t2119 = t1432 * t1697;
t2106 = t1556 * t1639;
t2105 = t1557 * t1642;
t2104 = t1558 * t1645;
t2100 = t1573 * t1648;
t2099 = t1573 * t1651;
t2098 = t1573 * t1693;
t2097 = t1573 * t1699;
t2095 = t1574 * t1699;
t1585 = pkin(2) * t1693 + pkin(3) * t1627;
t2094 = t1573 * t1574 * t1585;
t2093 = t1577 * t1649;
t2092 = t1577 * t1652;
t2091 = t1577 * t1695;
t2090 = t1577 * t1701;
t2088 = t1578 * t1701;
t1589 = pkin(2) * t1695 + pkin(3) * t1628;
t2087 = t1577 * t1578 * t1589;
t2086 = t1581 * t1650;
t2085 = t1581 * t1653;
t2084 = t1581 * t1697;
t2083 = t1581 * t1703;
t2081 = t1582 * t1703;
t1590 = pkin(2) * t1697 + pkin(3) * t1629;
t2080 = t1581 * t1582 * t1590;
t2079 = t1621 * t1648;
t2078 = t1621 * t1649;
t2077 = t1621 * t1650;
t2076 = t1621 * t1651;
t2075 = t1621 * t1652;
t2074 = t1621 * t1653;
t2073 = t1648 * t1694;
t2072 = t1649 * t1696;
t2071 = t1650 * t1698;
t2070 = t1651 * t1694;
t2069 = t1652 * t1696;
t2068 = t1653 * t1698;
t2057 = t1693 * t1699;
t2054 = t1695 * t1701;
t2051 = t1697 * t1703;
t1922 = t2103 / 0.2e1;
t1523 = t1687 * t1922;
t1938 = t1693 * t2094;
t1872 = t1556 * t1938;
t1834 = t1687 * t1872;
t1885 = t1693 * t1960;
t1849 = pkin(2) * t1885;
t1941 = t1559 * t2098;
t1900 = pkin(2) * t1941;
t1972 = t1472 * t2115;
t2032 = t1723 + t1727;
t2042 = -pkin(1) * t1766 + ((pkin(5) * t2160) + t1680 * t1726 + t1718 + t2032) * t1430 + (-t1834 + 0.2e1 * t2136) * pkin(2) + t1559 * (t1523 - t1849) * t2097 * t2174 + 0.2e1 * (pkin(1) * t1900 + t1687 * t1972) * t1960;
t1921 = t2102 / 0.2e1;
t1524 = t1688 * t1921;
t1936 = t1695 * t2087;
t1871 = t1557 * t1936;
t1833 = t1688 * t1871;
t1881 = t1695 * t1955;
t1847 = pkin(2) * t1881;
t1940 = t1560 * t2091;
t1899 = pkin(2) * t1940;
t1970 = t1473 * t2112;
t2041 = -pkin(1) * t1765 + ((pkin(5) * t2161) + t1681 * t1726 + t1719 + t2032) * t1431 + (-t1833 + 0.2e1 * t2135) * pkin(2) + t1560 * (t1524 - t1847) * t2090 * t2174 + 0.2e1 * (pkin(1) * t1899 + t1688 * t1970) * t1955;
t1920 = t2101 / 0.2e1;
t1525 = t1689 * t1920;
t1934 = t1697 * t2080;
t1870 = t1558 * t1934;
t1832 = t1689 * t1870;
t1878 = t1697 * t1951;
t1845 = pkin(2) * t1878;
t1939 = t1561 * t2084;
t1898 = pkin(2) * t1939;
t1968 = t1474 * t2109;
t2040 = -pkin(1) * t1764 + ((pkin(5) * t2162) + t1682 * t1726 + t1720 + t2032) * t1432 + (-t1832 + 0.2e1 * t2134) * pkin(2) + t1561 * (t1525 - t1845) * t2083 * t2174 + 0.2e1 * (pkin(1) * t1898 + t1689 * t1968) * t1951;
t1460 = -t1505 + 0.2e1 * t1968;
t1461 = -t1509 + 0.2e1 * t1972;
t1462 = -t1510 + 0.2e1 * t1970;
t2030 = pkin(2) * t2171;
t2029 = pkin(2) * t2170;
t2028 = pkin(2) * t2169;
t2023 = 0.2e1 * t2141;
t2022 = 0.2e1 * t2140;
t2021 = 0.2e1 * t2139;
t2016 = -0.2e1 * t2129;
t2015 = -0.2e1 * t2124;
t2014 = -0.2e1 * t2119;
t2013 = -0.2e1 * t2103;
t2011 = -0.2e1 * t2102;
t2009 = -0.2e1 * t2101;
t2004 = t1648 * t2147;
t2003 = t1649 * t2147;
t2002 = t1650 * t2147;
t2001 = t1651 * t2147;
t2000 = t1652 * t2147;
t1999 = t1653 * t2147;
t1997 = t1694 * t2147;
t1995 = t1696 * t2147;
t1993 = t1698 * t2147;
t1990 = t1430 * t2115;
t1989 = t1430 * t2098;
t1988 = t1430 * t2097;
t1987 = t1693 ^ 2 * t2131;
t1986 = t1687 * t2129;
t1985 = t1699 * t2130;
t1984 = t1431 * t2112;
t1983 = t1431 * t2091;
t1982 = t1431 * t2090;
t1981 = t1695 ^ 2 * t2126;
t1980 = t1688 * t2124;
t1979 = t1701 * t2125;
t1978 = t1432 * t2109;
t1977 = t1432 * t2084;
t1976 = t1432 * t2083;
t1975 = t1697 ^ 2 * t2121;
t1974 = t1689 * t2119;
t1973 = t1703 * t2120;
t1966 = t1511 * t2114;
t1965 = t1544 * t2177;
t1964 = t1512 * t2111;
t1963 = t1547 * t2176;
t1962 = t1513 * t2108;
t1961 = t1550 * t2175;
t1958 = t1559 * t2118;
t1957 = t1514 * t2100;
t1956 = t1514 * t2099;
t1953 = t1515 * t2093;
t1952 = t1515 * t2092;
t1949 = t1516 * t2086;
t1948 = t1516 * t2085;
t1947 = t1556 * t2094;
t1946 = t1556 / t1736 ^ 2 * t1585;
t1945 = t1557 * t2087;
t1944 = t1557 / t1739 ^ 2 * t1589;
t1943 = t1558 * t2080;
t1942 = t1558 / t1742 ^ 2 * t1590;
t1937 = t1699 * t2094;
t1935 = t1701 * t2087;
t1933 = t1703 * t2080;
t1912 = 0.2e1 * t1514 * t2114;
t1915 = t1639 * (t1472 * t1912 + 0.2e1 * t2130 + (-t1556 * t2095 - t1872) * pkin(2));
t1911 = 0.2e1 * t1515 * t2111;
t1914 = t1642 * (t1473 * t1911 + 0.2e1 * t2125 + (-t1557 * t2088 - t1871) * pkin(2));
t1910 = 0.2e1 * t1516 * t2108;
t1913 = t1645 * (t1474 * t1910 + 0.2e1 * t2120 + (-t1558 * t2081 - t1870) * pkin(2));
t1506 = pkin(2) * t1960;
t1507 = pkin(2) * t1955;
t1508 = pkin(2) * t1951;
t1903 = pkin(2) * t1947;
t1902 = pkin(2) * t1945;
t1901 = pkin(2) * t1943;
t1894 = t2057 * t2131;
t1893 = t2054 * t2126;
t1892 = t2051 * t2121;
t1888 = t1573 * t1966;
t1887 = t1577 * t1964;
t1886 = t1581 * t1962;
t1884 = t1699 * t1960;
t1883 = t1545 * t1958;
t1882 = t1573 * t1958;
t1880 = t1701 * t1955;
t1879 = t2102 * t2117;
t1877 = t1703 * t1951;
t1876 = t2101 * t2116;
t1869 = -t1941 / 0.2e1;
t1868 = -t1940 / 0.2e1;
t1867 = -t1939 / 0.2e1;
t1865 = t1544 * t1915;
t1864 = t1547 * t1914;
t1863 = t1550 * t1913;
t1490 = t1514 * t1687 * t1925 + t1900;
t1862 = t1490 * t1912;
t1491 = t1515 * t1688 * t1924 + t1899;
t1861 = t1491 * t1911;
t1492 = t1516 * t1689 * t1923 + t1898;
t1860 = t1492 * t1910;
t1859 = t1560 * t1911;
t1858 = 0.2e1 * t1879;
t1857 = t1561 * t1910;
t1856 = 0.2e1 * t1876;
t1475 = t1687 * t1869 + t1506 - (pkin(1) * t1699 + t2030) * t1960;
t1502 = pkin(1) * t1885;
t1478 = (t1523 - 0.2e1 * t1849) * t1699 - t1502;
t1760 = (pkin(2) * t2016 - t1687 * t1947) * t1699 - 0.2e1 * t1403 * t1693;
t1781 = t1430 * t2030 - t1834;
t1855 = (-t1475 * t1685 + t1478 * t1684) * t2012 + t1760 * t1685 + (-t1781 - 0.2e1 * t2136) * t1684;
t1477 = t1689 * t1867 + t1508 - (pkin(1) * t1703 + t2028) * t1951;
t1504 = pkin(1) * t1878;
t1480 = (t1525 - 0.2e1 * t1845) * t1703 - t1504;
t1758 = (pkin(2) * t2014 - t1689 * t1943) * t1703 - 0.2e1 * t1405 * t1697;
t1779 = t1432 * t2028 - t1832;
t1854 = (-t1477 * t1685 + t1480 * t1684) * t2008 + t1758 * t1685 + (-t1779 - 0.2e1 * t2134) * t1684;
t1476 = t1688 * t1868 + t1507 - (pkin(1) * t1701 + t2029) * t1955;
t1503 = pkin(1) * t1881;
t1479 = (t1524 - 0.2e1 * t1847) * t1701 - t1503;
t1759 = (pkin(2) * t2015 - t1688 * t1945) * t1701 - 0.2e1 * t1404 * t1695;
t1780 = t1431 * t2029 - t1833;
t1853 = (-t1476 * t1685 + t1479 * t1684) * t2010 + t1759 * t1685 + (-t1780 - 0.2e1 * t2135) * t1684;
t1852 = (t1475 * t1684 + t1478 * t1685) * t2013 + ((t2023 - t1766) * t1699 + t1781) * t1685 + t1760 * t1684;
t1851 = (t1476 * t1684 + t1479 * t1685) * t2011 + ((t2022 - t1765) * t1701 + t1780) * t1685 + t1759 * t1684;
t1850 = (t1477 * t1684 + t1480 * t1685) * t2009 + ((t2021 - t1764) * t1703 + t1779) * t1685 + t1758 * t1684;
t1848 = pkin(2) * t1884;
t1846 = pkin(2) * t1880;
t1844 = pkin(2) * t1877;
t1843 = t1693 * t1888;
t1842 = t1699 * t1888;
t1841 = t1695 * t1887;
t1840 = t1701 * t1887;
t1839 = t1697 * t1886;
t1838 = t1703 * t1886;
t1837 = t1633 * t1882;
t1836 = t1634 * t1879;
t1835 = t1635 * t1876;
t1828 = t1883 * t2173;
t1827 = t1883 * t2172;
t1826 = t1564 * t1859;
t1825 = t1567 * t1859;
t1824 = t1565 * t1857;
t1823 = t1568 * t1857;
t1819 = t1639 * (-pkin(5) * t1872 + (pkin(5) * t1699 * t1922 - t1502) * t2013 + t1699 * t2023);
t1818 = t1639 * (-pkin(5) * t1556 * t1937 + pkin(1) * t2016 + (-pkin(1) * t1884 + pkin(5) * t1869) * t2013);
t1817 = t1642 * (-pkin(5) * t1871 + (pkin(5) * t1701 * t1921 - t1503) * t2011 + t1701 * t2022);
t1816 = t1642 * (-pkin(5) * t1557 * t1935 + pkin(1) * t2015 + (-pkin(1) * t1880 + pkin(5) * t1868) * t2011);
t1815 = t1645 * (-pkin(5) * t1870 + (pkin(5) * t1703 * t1920 - t1504) * t2009 + t1703 * t2021);
t1814 = t1645 * (-pkin(5) * t1558 * t1933 + pkin(1) * t2014 + (-pkin(1) * t1877 + pkin(5) * t1867) * t2009);
t1813 = t1693 * t1842;
t1812 = t1695 * t1840;
t1811 = t1697 * t1838;
t1535 = t2166 * t1700 + t1611;
t1810 = t1535 * t1544 * t1882;
t1808 = t1663 + t2007 + t2158;
t1801 = 0.2e1 * t1882 * t2057;
t1536 = t2165 * t1702 + t1612;
t1800 = t1536 * t1547 * t1858;
t1799 = t1858 * t2054;
t1537 = t2164 * t1704 + t1613;
t1798 = t1537 * t1550 * t1856;
t1797 = t1856 * t2051;
t1796 = t1544 * t1819;
t1795 = t1544 * t1818;
t1794 = t1547 * t1817;
t1793 = t1547 * t1816;
t1792 = t1550 * t1815;
t1791 = t1550 * t1814;
t1790 = t1573 * (-(-t1848 + t1461) * t1885 + t1903 - t1986);
t1789 = t1577 * (-(-t1846 + t1462) * t1881 + t1902 - t1980);
t1788 = t1581 * (-(-t1844 + t1460) * t1878 + t1901 - t1974);
t1787 = (-t1574 * t1693 + t1937) * t2106;
t1786 = (t1938 + t2095) * t2106;
t1785 = (-t1578 * t1695 + t1935) * t2105;
t1784 = (t1936 + t2088) * t2105;
t1783 = (-t1582 * t1697 + t1933) * t2104;
t1782 = (t1934 + t2081) * t2104;
t1778 = t1460 * t1703 - t1508 * t2169 + t1508;
t1777 = t1461 * t1699 - t1506 * t2171 + t1506;
t1776 = t1462 * t1701 - t1507 * t2170 + t1507;
t1772 = t1544 * t1787;
t1771 = t1544 * t1786;
t1770 = t1547 * t1785;
t1769 = t1547 * t1784;
t1768 = t1550 * t1783;
t1767 = t1550 * t1782;
t1763 = -t1544 * t1987 + t1545 * t1801;
t1762 = -t1547 * t1981 + t1548 * t1799;
t1761 = -t1550 * t1975 + t1551 * t1797;
t1757 = t1648 * t1989 + t1649 * t1983 + t1650 * t1977;
t1756 = t1648 * t1988 + t1649 * t1982 + t1650 * t1976;
t1755 = t1651 * t1989 + t1652 * t1983 + t1653 * t1977;
t1754 = t1651 * t1988 + t1652 * t1982 + t1653 * t1976;
t1753 = -0.2e1 * t1544 * t1894 + 0.2e1 * t1545 * t1837;
t1752 = -0.2e1 * t1547 * t1893 + 0.2e1 * t1548 * t1836;
t1751 = -0.2e1 * t1550 * t1892 + 0.2e1 * t1551 * t1835;
t1624 = pkin(1) * t2147;
t1562 = (t1667 - 0.1e1 / 0.2e1) * t1725 + t2034;
t1540 = t1698 * t1917 + t1904;
t1539 = t1696 * t1918 + t1905;
t1538 = t1694 * t1919 + t1906;
t1531 = t1697 * t1808 + t1624;
t1530 = t1695 * t1808 + t1624;
t1529 = t1693 * t1808 + t1624;
t1522 = (t1621 * t2068 + t2002) * t1703 + t1697 * (-t1653 * t1993 + t2077);
t1521 = (t1621 * t2069 + t2003) * t1701 + t1695 * (-t1652 * t1995 + t2078);
t1520 = (t1621 * t2070 + t2004) * t1699 + t1693 * (-t1651 * t1997 + t2079);
t1519 = (-t1621 * t2071 + t1999) * t1703 + (t1650 * t1993 + t2074) * t1697;
t1518 = (-t1621 * t2072 + t2000) * t1701 + (t1649 * t1995 + t2075) * t1695;
t1517 = (-t1621 * t2073 + t2001) * t1699 + (t1648 * t1997 + t2076) * t1693;
t1498 = (t1562 * t2068 + t1621 * t2002) * t2169 + (t1531 * t1650 + t1540 * t2074) * t1703 - t1653 * t2148 + t1593 * t2077;
t1497 = (-t1562 * t2071 + t1621 * t1999) * t2169 + (t1531 * t1653 - t1540 * t2077) * t1703 + t1650 * t2148 + t1593 * t2074;
t1496 = (t1562 * t2069 + t1621 * t2003) * t2170 + (t1530 * t1649 + t1539 * t2075) * t1701 - t1652 * t2149 + t1592 * t2078;
t1495 = (-t1562 * t2072 + t1621 * t2000) * t2170 + (t1530 * t1652 - t1539 * t2078) * t1701 + t1649 * t2149 + t1592 * t2075;
t1494 = (t1562 * t2070 + t1621 * t2004) * t2171 + (t1529 * t1648 + t1538 * t2076) * t1699 - t1651 * t2150 + t1591 * t2079;
t1493 = (-t1562 * t2073 + t1621 * t2001) * t2171 + (t1529 * t1651 - t1538 * t2079) * t1699 + t1648 * t2150 + t1591 * t2076;
t1483 = t1635 * t1962;
t1482 = t1634 * t1964;
t1481 = t1633 * t1966;
t1444 = -0.2e1 * t1844 + t1460;
t1443 = -0.2e1 * t1846 + t1462;
t1442 = -0.2e1 * t1848 + t1461;
t1438 = t1444 * t2061 - t1685 * t1778;
t1437 = t1444 * t2058 + t1684 * t1778;
t1436 = t1443 * t2062 - t1685 * t1776;
t1435 = t1443 * t2059 + t1684 * t1776;
t1434 = t1442 * t2063 - t1685 * t1777;
t1433 = t1442 * t2060 + t1684 * t1777;
t1428 = -0.2e1 * t1901 + t1974;
t1426 = -0.2e1 * t1902 + t1980;
t1424 = -0.2e1 * t1903 + t1986;
t1411 = -t1428 * t1685 - t1684 * t1973;
t1410 = t1428 * t1684 - t1685 * t1973;
t1409 = -t1426 * t1685 - t1684 * t1979;
t1408 = t1426 * t1684 - t1685 * t1979;
t1407 = -t1424 * t1685 - t1684 * t1985;
t1406 = t1424 * t1684 - t1685 * t1985;
t1402 = (-t1656 - pkin(1)) * t1432 + t1764;
t1401 = (-t1655 - pkin(1)) * t1431 + t1765;
t1400 = (-t1654 - pkin(1)) * t1430 + t1766;
t1 = [-t1520 * t1990 - t1521 * t1984 - t1522 * t1978, 0, 0, t1520 * t1763 + t1521 * t1762 + t1522 * t1761 - t1648 * t1813 - t1649 * t1812 - t1650 * t1811, -t1481 * t2100 - t1482 * t2093 - t1483 * t2086 + t1520 * t1753 + t1521 * t1752 + t1522 * t1751, -t1520 * t1771 - t1521 * t1769 - t1522 * t1767 + t1757, -t1520 * t1772 - t1521 * t1770 - t1522 * t1768 + t1756, t1648 * t1946 + t1649 * t1944 + t1650 * t1942, -t1522 * t1792 - t1521 * t1794 - t1520 * t1796 - t1757 * pkin(5) + (t1648 * t1843 + t1649 * t1841 + t1650 * t1839) * pkin(1), -t1522 * t1791 - t1521 * t1793 - t1520 * t1795 - t1756 * pkin(5) + (t1648 * t1842 + t1649 * t1840 + t1650 * t1838) * pkin(1), (t1411 * t1650 + t1498 * t1823) * t1581 + (t1409 * t1649 + t1496 * t1825) * t1577 + (t1407 * t1648 + t1494 * t1827) * t1573 - (t1437 * t1949 - t1498 * t2123 + t1522 * t1850) * t2109 - (t1435 * t1953 - t1496 * t2128 + t1521 * t1851) * t2112 - (t1433 * t1957 + t1494 * t2133 + t1520 * t1852) * t2115, (t1410 * t1650 + t1498 * t1824) * t1581 + (t1408 * t1649 + t1496 * t1826) * t1577 + (t1406 * t1648 + t1494 * t1828) * t1573 - (-t1438 * t1949 + t1498 * t2122 + t1522 * t1854) * t2109 - (-t1436 * t1953 + t1496 * t2127 + t1521 * t1853) * t2112 - (-t1434 * t1957 + t1494 * t2132 + t1520 * t1855) * t2115, -pkin(2) * t1757 + t1494 * t1965 + t1496 * t1963 + t1498 * t1961 - t1520 * t1865 - t1521 * t1864 - t1522 * t1863, t1494 * t1862 + t1496 * t1861 + t1498 * t1860 - (t1402 * t1498 + t1522 * t2040) * t2109 - (t1401 * t1496 + t2041 * t1521) * t2112 - (t1400 * t1494 + t2042 * t1520) * t2115 + (t1648 * t1790 + t1649 * t1789 + t1650 * t1788) * pkin(2), 0; -t1517 * t1990 - t1518 * t1984 - t1519 * t1978, 0, 0, t1517 * t1763 + t1518 * t1762 + t1519 * t1761 - t1651 * t1813 - t1652 * t1812 - t1653 * t1811, -t1481 * t2099 - t1482 * t2092 - t1483 * t2085 + t1517 * t1753 + t1518 * t1752 + t1519 * t1751, -t1517 * t1771 - t1518 * t1769 - t1519 * t1767 + t1755, -t1517 * t1772 - t1518 * t1770 - t1519 * t1768 + t1754, t1651 * t1946 + t1652 * t1944 + t1653 * t1942, -t1519 * t1792 - t1518 * t1794 - t1517 * t1796 - t1755 * pkin(5) + (t1651 * t1843 + t1652 * t1841 + t1653 * t1839) * pkin(1), -t1519 * t1791 - t1518 * t1793 - t1517 * t1795 - t1754 * pkin(5) + (t1651 * t1842 + t1652 * t1840 + t1653 * t1838) * pkin(1), (t1411 * t1653 + t1497 * t1823) * t1581 + (t1409 * t1652 + t1495 * t1825) * t1577 + (t1407 * t1651 + t1493 * t1827) * t1573 - (t1437 * t1948 - t1497 * t2123 + t1519 * t1850) * t2109 - (t1435 * t1952 - t1495 * t2128 + t1518 * t1851) * t2112 - (t1433 * t1956 + t1493 * t2133 + t1517 * t1852) * t2115, (t1410 * t1653 + t1497 * t1824) * t1581 + (t1408 * t1652 + t1495 * t1826) * t1577 + (t1406 * t1651 + t1493 * t1828) * t1573 - (-t1438 * t1948 + t1497 * t2122 + t1519 * t1854) * t2109 - (-t1436 * t1952 + t1495 * t2127 + t1518 * t1853) * t2112 - (-t1434 * t1956 + t1493 * t2132 + t1517 * t1855) * t2115, -pkin(2) * t1755 + t1493 * t1965 + t1495 * t1963 + t1497 * t1961 - t1517 * t1865 - t1518 * t1864 - t1519 * t1863, t1493 * t1862 + t1495 * t1861 + t1497 * t1860 - (t1402 * t1497 + t1519 * t2040) * t2109 - (t1401 * t1495 + t2041 * t1518) * t2112 - (t1400 * t1493 + t2042 * t1517) * t2115 + (t1651 * t1790 + t1652 * t1789 + t1653 * t1788) * pkin(2), 0; t1700 * t2131 + t1702 * t2126 + t1704 * t2121, 0, 0, (-t1550 * t1797 + t1975) * t1704 + (-t1547 * t1799 + t1981) * t1702 + (-t1544 * t1801 + t1987) * t1700, 0.2e1 * (-t1550 * t1835 + t1892) * t1704 + 0.2e1 * (-t1547 * t1836 + t1893) * t1702 + 0.2e1 * (-t1544 * t1837 + t1894) * t1700, t1700 * t1786 + t1702 * t1784 + t1704 * t1782, t1700 * t1787 + t1702 * t1785 + t1704 * t1783, 0, t1700 * t1819 + t1702 * t1817 + t1704 * t1815, t1700 * t1818 + t1702 * t1816 + t1704 * t1814, -t1810 * t2172 - t1567 * t1800 - t1568 * t1798 + (-t1537 * t2123 + t1704 * t1850) * t1645 + (-t1536 * t2128 + t1702 * t1851) * t1642 + (t1535 * t2133 + t1700 * t1852) * t1639, -t1810 * t2173 - t1564 * t1800 - t1565 * t1798 + (t1537 * t2122 + t1704 * t1854) * t1645 + (t1536 * t2127 + t1702 * t1853) * t1642 + (t1535 * t2132 + t1700 * t1855) * t1639, -t1535 * t2177 - t1536 * t2176 - t1537 * t2175 + t1700 * t1915 + t1702 * t1914 + t1704 * t1913, -0.2e1 * t1535 * t1490 * t1959 - 0.2e1 * t1536 * t1491 * t1954 - 0.2e1 * t1537 * t1492 * t1950 + (t1402 * t1537 + t1704 * t2040) * t1645 + (t1401 * t1536 + t2041 * t1702) * t1642 + (t1400 * t1535 + t2042 * t1700) * t1639, 0;];
tau_reg  = t1;
