% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR8V2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:07:39
% EndTime: 2022-11-07 13:07:53
% DurationCPUTime: 14.86s
% Computational Cost: add. (14346->692), mult. (26504->1337), div. (2274->18), fcn. (20424->23), ass. (0->546)
t3801 = 2 * pkin(1);
t3430 = cos(pkin(7));
t3800 = 0.2e1 * t3430;
t3431 = (qJ(3,3) + pkin(5));
t3799 = 2 * t3431;
t3432 = (qJ(3,2) + pkin(5));
t3798 = 2 * t3432;
t3433 = (qJ(3,1) + pkin(5));
t3797 = 2 * t3433;
t3764 = pkin(3) * t3430;
t3392 = pkin(2) + t3764;
t3434 = legFrame(3,2);
t3403 = sin(t3434);
t3437 = sin(qJ(2,3));
t3443 = cos(qJ(2,3));
t3438 = sin(qJ(1,3));
t3429 = sin(pkin(7));
t3765 = pkin(3) * t3429;
t3678 = t3438 * t3765;
t3406 = cos(t3434);
t3681 = t3406 * t3765;
t3711 = t3403 * t3438;
t3729 = t3392 * t3406;
t3331 = (-t3392 * t3711 + t3681) * t3443 + (t3403 * t3678 + t3729) * t3437;
t3684 = t3403 * t3765;
t3708 = t3406 * t3438;
t3732 = t3392 * t3403;
t3334 = (t3392 * t3708 + t3684) * t3443 + t3437 * (-t3406 * t3678 + t3732);
t3796 = t3331 * t3334;
t3435 = legFrame(2,2);
t3404 = sin(t3435);
t3439 = sin(qJ(2,2));
t3445 = cos(qJ(2,2));
t3440 = sin(qJ(1,2));
t3677 = t3440 * t3765;
t3407 = cos(t3435);
t3680 = t3407 * t3765;
t3710 = t3404 * t3440;
t3728 = t3392 * t3407;
t3332 = (-t3392 * t3710 + t3680) * t3445 + (t3404 * t3677 + t3728) * t3439;
t3683 = t3404 * t3765;
t3707 = t3407 * t3440;
t3731 = t3392 * t3404;
t3335 = (t3392 * t3707 + t3683) * t3445 + t3439 * (-t3407 * t3677 + t3731);
t3795 = t3332 * t3335;
t3436 = legFrame(1,2);
t3405 = sin(t3436);
t3441 = sin(qJ(2,1));
t3447 = cos(qJ(2,1));
t3442 = sin(qJ(1,1));
t3676 = t3442 * t3765;
t3408 = cos(t3436);
t3679 = t3408 * t3765;
t3709 = t3405 * t3442;
t3727 = t3392 * t3408;
t3333 = (-t3392 * t3709 + t3679) * t3447 + (t3405 * t3676 + t3727) * t3441;
t3682 = t3405 * t3765;
t3706 = t3408 * t3442;
t3730 = t3392 * t3405;
t3336 = (t3392 * t3706 + t3682) * t3447 + t3441 * (-t3408 * t3676 + t3730);
t3794 = t3333 * t3336;
t3792 = 2 * pkin(5);
t3791 = 2 * MDP(5);
t3790 = 2 * MDP(6);
t3789 = 2 * MDP(7);
t3423 = t3443 ^ 2;
t3788 = 0.2e1 * t3423;
t3425 = t3445 ^ 2;
t3787 = 0.2e1 * t3425;
t3427 = t3447 ^ 2;
t3786 = 0.2e1 * t3427;
t3785 = -0.2e1 * t3437;
t3784 = -0.2e1 * t3439;
t3783 = -0.2e1 * t3441;
t3782 = 0.2e1 * t3443;
t3781 = 0.2e1 * t3445;
t3780 = 0.2e1 * t3447;
t3779 = t3430 / 0.2e1;
t3778 = pkin(1) * t3331;
t3777 = pkin(1) * t3332;
t3776 = pkin(1) * t3333;
t3775 = pkin(1) * t3334;
t3774 = pkin(1) * t3335;
t3773 = pkin(1) * t3336;
t3444 = cos(qJ(1,3));
t3772 = pkin(1) * t3444;
t3446 = cos(qJ(1,2));
t3771 = pkin(1) * t3446;
t3448 = cos(qJ(1,1));
t3770 = pkin(1) * t3448;
t3769 = pkin(2) * t3430;
t3416 = pkin(6) + t3431;
t3585 = pkin(1) * t3438 - t3416 * t3444;
t3419 = t3430 ^ 2;
t3694 = pkin(3) * (t3419 - 0.1e1);
t3705 = t3429 * t3437;
t3768 = pkin(3) * (t3438 * t3694 + t3585 * t3705);
t3417 = pkin(6) + t3432;
t3584 = pkin(1) * t3440 - t3417 * t3446;
t3704 = t3429 * t3439;
t3767 = pkin(3) * (t3440 * t3694 + t3584 * t3704);
t3418 = pkin(6) + t3433;
t3583 = pkin(1) * t3442 - t3418 * t3448;
t3703 = t3429 * t3441;
t3766 = pkin(3) * (t3442 * t3694 + t3583 * t3703);
t3409 = t3443 * pkin(2);
t3410 = t3445 * pkin(2);
t3411 = t3447 * pkin(2);
t3397 = 1 / t3416;
t3762 = t3331 * t3397;
t3399 = 1 / t3417;
t3761 = t3332 * t3399;
t3401 = 1 / t3418;
t3760 = t3333 * t3401;
t3759 = t3334 * t3397;
t3758 = t3335 * t3399;
t3757 = t3336 * t3401;
t3367 = -pkin(3) * t3705 + t3392 * t3443;
t3361 = 0.1e1 / t3367;
t3756 = t3361 * t3397;
t3362 = 0.1e1 / t3367 ^ 2;
t3398 = 1 / t3416 ^ 2;
t3755 = t3362 * t3398;
t3368 = -pkin(3) * t3704 + t3392 * t3445;
t3363 = 0.1e1 / t3368;
t3754 = t3363 * t3399;
t3364 = 0.1e1 / t3368 ^ 2;
t3400 = 1 / t3417 ^ 2;
t3753 = t3364 * t3400;
t3369 = -pkin(3) * t3703 + t3392 * t3447;
t3365 = 0.1e1 / t3369;
t3752 = t3365 * t3401;
t3366 = 0.1e1 / t3369 ^ 2;
t3402 = 1 / t3418 ^ 2;
t3751 = t3366 * t3402;
t3371 = -t3430 * t3443 + t3705;
t3750 = t3371 * t3398;
t3478 = -t3430 * t3445 + t3704;
t3749 = t3478 * t3400;
t3477 = -t3430 * t3447 + t3703;
t3748 = t3477 * t3402;
t3702 = t3430 * t3437;
t3374 = t3429 * t3443 + t3702;
t3747 = t3374 * t3398;
t3701 = t3430 * t3439;
t3375 = t3429 * t3445 + t3701;
t3746 = t3375 * t3400;
t3700 = t3430 * t3441;
t3376 = t3429 * t3447 + t3700;
t3745 = t3376 * t3402;
t3383 = pkin(3) * cos(qJ(2,3) + pkin(7)) + t3409;
t3377 = 0.1e1 / t3383;
t3744 = t3377 * t3403;
t3743 = t3377 * t3406;
t3742 = t3377 * t3431;
t3741 = t3377 * t3437;
t3384 = pkin(3) * cos(qJ(2,2) + pkin(7)) + t3410;
t3379 = 0.1e1 / t3384;
t3740 = t3379 * t3404;
t3739 = t3379 * t3407;
t3738 = t3379 * t3432;
t3737 = t3379 * t3439;
t3385 = pkin(3) * cos(qJ(2,1) + pkin(7)) + t3411;
t3381 = 0.1e1 / t3385;
t3736 = t3381 * t3405;
t3735 = t3381 * t3408;
t3734 = t3381 * t3433;
t3733 = t3381 * t3441;
t3726 = t3397 * t3443;
t3725 = t3397 * t3444;
t3424 = t3444 ^ 2;
t3724 = t3398 * t3424;
t3723 = t3398 * t3443;
t3722 = t3398 * t3444;
t3721 = t3399 * t3445;
t3720 = t3399 * t3446;
t3426 = t3446 ^ 2;
t3719 = t3400 * t3426;
t3718 = t3400 * t3445;
t3717 = t3400 * t3446;
t3716 = t3401 * t3447;
t3715 = t3401 * t3448;
t3428 = t3448 ^ 2;
t3714 = t3402 * t3428;
t3713 = t3402 * t3447;
t3712 = t3402 * t3448;
t3699 = pkin(1) ^ 2 + pkin(5) ^ 2;
t3698 = pkin(2) * t3764;
t3697 = -0.2e1 * t3705;
t3696 = -0.2e1 * t3704;
t3695 = -0.2e1 * t3703;
t3693 = pkin(2) * t3744;
t3692 = pkin(2) * t3743;
t3691 = pkin(2) * t3740;
t3690 = pkin(2) * t3739;
t3689 = pkin(2) * t3736;
t3688 = pkin(2) * t3735;
t3687 = pkin(2) * t3397 * t3423;
t3686 = pkin(2) * t3399 * t3425;
t3685 = pkin(2) * t3401 * t3427;
t3675 = pkin(5) * t3377 * t3443;
t3674 = pkin(5) * t3379 * t3445;
t3673 = pkin(5) * t3381 * t3447;
t3672 = -pkin(1) - t3409;
t3671 = -pkin(1) - t3410;
t3670 = -pkin(1) - t3411;
t3669 = t3331 * t3756;
t3668 = t3332 * t3754;
t3667 = t3333 * t3752;
t3666 = t3334 * t3756;
t3665 = t3335 * t3754;
t3664 = t3336 * t3752;
t3355 = t3438 * t3416 + (pkin(1) + t3383) * t3444;
t3663 = t3355 * t3750;
t3662 = t3355 * t3747;
t3356 = t3440 * t3417 + (pkin(1) + t3384) * t3446;
t3661 = t3356 * t3749;
t3660 = t3356 * t3746;
t3357 = t3442 * t3418 + (pkin(1) + t3385) * t3448;
t3659 = t3357 * t3748;
t3658 = t3357 * t3745;
t3657 = t3437 * t3756;
t3656 = t3361 * t3726;
t3655 = t3361 * t3722;
t3654 = t3362 * t3750;
t3653 = t3362 * t3747;
t3420 = t3437 ^ 2;
t3652 = t3420 * t3755;
t3651 = t3439 * t3754;
t3650 = t3363 * t3721;
t3649 = t3363 * t3717;
t3648 = t3364 * t3749;
t3647 = t3364 * t3746;
t3421 = t3439 ^ 2;
t3646 = t3421 * t3753;
t3645 = t3441 * t3752;
t3644 = t3365 * t3716;
t3643 = t3365 * t3712;
t3642 = t3366 * t3748;
t3641 = t3366 * t3745;
t3422 = t3441 ^ 2;
t3640 = t3422 * t3751;
t3639 = t3371 * t3722;
t3638 = t3478 * t3717;
t3637 = t3477 * t3712;
t3636 = t3374 * t3722;
t3635 = t3375 * t3717;
t3634 = t3376 * t3712;
t3633 = t3377 * t3726;
t3632 = t3403 * t3741;
t3631 = t3406 * t3741;
t3630 = t3379 * t3721;
t3629 = t3404 * t3737;
t3628 = t3407 * t3737;
t3627 = t3381 * t3716;
t3626 = t3405 * t3733;
t3625 = t3408 * t3733;
t3393 = pkin(1) * t3765;
t3450 = pkin(3) ^ 2;
t3451 = pkin(2) ^ 2;
t3472 = 0.2e1 * t3419 * t3450 - t3450 + t3451 + 0.2e1 * t3698;
t3352 = t3472 * t3437 + t3393;
t3358 = t3678 * t3785 + t3585;
t3370 = t3698 + t3451 / 0.2e1 + (t3419 - 0.1e1 / 0.2e1) * t3450;
t3386 = pkin(1) * t3437 - t3765;
t3275 = (-t3370 * t3711 + t3392 * t3681) * t3788 + (t3352 * t3406 - t3358 * t3732) * t3443 + t3403 * t3768 + t3386 * t3729;
t3251 = (t3778 - t3275 / 0.2e1) * t3756;
t3600 = t3406 * t3742;
t3471 = t3251 * t3782 - t3437 * t3600;
t3593 = -0.2e1 * t3657;
t3519 = t3331 * t3593;
t3525 = -0.2e1 * t3361 * t3687;
t3222 = ((pkin(2) * t3519 - t3600) * t3443 + t3251 * t3785) * t3430 + (t3331 * t3525 - t3471) * t3429;
t3624 = t3222 * t3756;
t3276 = (t3370 * t3708 + t3392 * t3684) * t3788 + (t3352 * t3403 + t3358 * t3729) * t3443 - t3406 * t3768 + t3386 * t3732;
t3254 = (t3775 - t3276 / 0.2e1) * t3756;
t3603 = t3403 * t3742;
t3468 = t3254 * t3782 - t3437 * t3603;
t3516 = t3334 * t3593;
t3223 = ((pkin(2) * t3516 - t3603) * t3443 + t3254 * t3785) * t3430 + (t3334 * t3525 - t3468) * t3429;
t3623 = t3223 * t3756;
t3522 = t3687 * t3800;
t3476 = t3361 * t3522;
t3531 = t3742 * t3779;
t3597 = pkin(2) * t3697;
t3226 = t3331 * t3476 + (-t3429 * t3600 + ((-t3275 + 0.2e1 * t3778) * t3430 + t3331 * t3597) * t3756) * t3443 + (t3429 * t3251 + t3406 * t3531) * t3785;
t3622 = t3226 * t3756;
t3227 = t3334 * t3476 + (-t3429 * t3603 + ((-t3276 + 0.2e1 * t3775) * t3430 + t3334 * t3597) * t3756) * t3443 + (t3429 * t3254 + t3403 * t3531) * t3785;
t3621 = t3227 * t3756;
t3620 = t3431 * t3725;
t3619 = t3437 * t3725;
t3618 = t3437 * t3723;
t3353 = t3472 * t3439 + t3393;
t3359 = t3677 * t3784 + t3584;
t3387 = pkin(1) * t3439 - t3765;
t3277 = (-t3370 * t3710 + t3392 * t3680) * t3787 + (t3353 * t3407 - t3359 * t3731) * t3445 + t3404 * t3767 + t3387 * t3728;
t3252 = (t3777 - t3277 / 0.2e1) * t3754;
t3521 = t3686 * t3800;
t3475 = t3363 * t3521;
t3530 = t3738 * t3779;
t3596 = pkin(2) * t3696;
t3599 = t3407 * t3738;
t3228 = t3332 * t3475 + (-t3429 * t3599 + ((-t3277 + 0.2e1 * t3777) * t3430 + t3332 * t3596) * t3754) * t3445 + (t3429 * t3252 + t3407 * t3530) * t3784;
t3617 = t3228 * t3754;
t3278 = (t3370 * t3707 + t3392 * t3683) * t3787 + (t3353 * t3404 + t3359 * t3728) * t3445 - t3407 * t3767 + t3387 * t3731;
t3255 = (t3774 - t3278 / 0.2e1) * t3754;
t3602 = t3404 * t3738;
t3229 = t3335 * t3475 + (-t3429 * t3602 + ((-t3278 + 0.2e1 * t3774) * t3430 + t3335 * t3596) * t3754) * t3445 + (t3429 * t3255 + t3404 * t3530) * t3784;
t3616 = t3229 * t3754;
t3470 = t3252 * t3781 - t3439 * t3599;
t3591 = -0.2e1 * t3651;
t3518 = t3332 * t3591;
t3524 = -0.2e1 * t3363 * t3686;
t3232 = ((pkin(2) * t3518 - t3599) * t3445 + t3252 * t3784) * t3430 + (t3332 * t3524 - t3470) * t3429;
t3615 = t3232 * t3754;
t3467 = t3255 * t3781 - t3439 * t3602;
t3515 = t3335 * t3591;
t3233 = ((pkin(2) * t3515 - t3602) * t3445 + t3255 * t3784) * t3430 + (t3335 * t3524 - t3467) * t3429;
t3614 = t3233 * t3754;
t3613 = t3432 * t3720;
t3612 = t3439 * t3720;
t3611 = t3439 * t3718;
t3354 = t3472 * t3441 + t3393;
t3360 = t3676 * t3783 + t3583;
t3388 = pkin(1) * t3441 - t3765;
t3279 = (-t3370 * t3709 + t3392 * t3679) * t3786 + (t3354 * t3408 - t3360 * t3730) * t3447 + t3405 * t3766 + t3388 * t3727;
t3253 = (t3776 - t3279 / 0.2e1) * t3752;
t3598 = t3408 * t3734;
t3469 = t3253 * t3780 - t3441 * t3598;
t3589 = -0.2e1 * t3645;
t3517 = t3333 * t3589;
t3523 = -0.2e1 * t3365 * t3685;
t3224 = ((pkin(2) * t3517 - t3598) * t3447 + t3253 * t3783) * t3430 + (t3333 * t3523 - t3469) * t3429;
t3610 = t3224 * t3752;
t3280 = (t3370 * t3706 + t3392 * t3682) * t3786 + (t3354 * t3405 + t3360 * t3727) * t3447 - t3408 * t3766 + t3388 * t3730;
t3256 = (t3773 - t3280 / 0.2e1) * t3752;
t3601 = t3405 * t3734;
t3466 = t3256 * t3780 - t3441 * t3601;
t3514 = t3336 * t3589;
t3225 = ((pkin(2) * t3514 - t3601) * t3447 + t3256 * t3783) * t3430 + (t3336 * t3523 - t3466) * t3429;
t3609 = t3225 * t3752;
t3520 = t3685 * t3800;
t3474 = t3365 * t3520;
t3529 = t3734 * t3779;
t3595 = pkin(2) * t3695;
t3230 = t3333 * t3474 + (-t3429 * t3598 + ((-t3279 + 0.2e1 * t3776) * t3430 + t3333 * t3595) * t3752) * t3447 + (t3429 * t3253 + t3408 * t3529) * t3783;
t3608 = t3230 * t3752;
t3231 = t3336 * t3474 + (-t3429 * t3601 + ((-t3280 + 0.2e1 * t3773) * t3430 + t3336 * t3595) * t3752) * t3447 + (t3429 * t3256 + t3405 * t3529) * t3783;
t3607 = t3231 * t3752;
t3606 = t3433 * t3715;
t3605 = t3441 * t3715;
t3604 = t3441 * t3713;
t3594 = t3756 * t3799;
t3592 = t3754 * t3798;
t3590 = t3752 * t3797;
t3588 = t3423 * t3451 + ((t3792 + qJ(3,3)) * qJ(3,3)) + t3699;
t3587 = t3425 * t3451 + ((t3792 + qJ(3,2)) * qJ(3,2)) + t3699;
t3586 = t3427 * t3451 + ((t3792 + qJ(3,1)) * qJ(3,1)) + t3699;
t3582 = t3275 * t3654;
t3581 = t3275 * t3653;
t3580 = t3276 * t3654;
t3579 = t3276 * t3653;
t3578 = t3277 * t3648;
t3577 = t3277 * t3647;
t3576 = t3278 * t3648;
t3575 = t3278 * t3647;
t3574 = t3279 * t3642;
t3573 = t3279 * t3641;
t3572 = t3280 * t3642;
t3571 = t3280 * t3641;
t3570 = t3755 * t3796;
t3569 = t3753 * t3795;
t3568 = t3751 * t3794;
t3567 = t3361 * t3663;
t3566 = t3361 * t3662;
t3565 = t3363 * t3661;
t3564 = t3363 * t3660;
t3563 = t3365 * t3659;
t3562 = t3365 * t3658;
t3561 = t3377 * t3657;
t3560 = t3361 * t3633;
t3559 = t3431 * t3657;
t3558 = t3431 * t3656;
t3557 = t3420 * t3655;
t3556 = t3437 * t3655;
t3555 = t3443 * t3655;
t3554 = t3362 * t3618;
t3553 = t3379 * t3651;
t3552 = t3363 * t3630;
t3551 = t3432 * t3651;
t3550 = t3432 * t3650;
t3549 = t3421 * t3649;
t3548 = t3439 * t3649;
t3547 = t3445 * t3649;
t3546 = t3364 * t3611;
t3545 = t3381 * t3645;
t3544 = t3365 * t3627;
t3543 = t3433 * t3645;
t3542 = t3433 * t3644;
t3541 = t3422 * t3643;
t3540 = t3441 * t3643;
t3539 = t3447 * t3643;
t3538 = t3366 * t3604;
t3537 = t3377 * t3619;
t3536 = t3444 * t3633;
t3535 = t3379 * t3612;
t3534 = t3446 * t3630;
t3533 = t3381 * t3605;
t3532 = t3448 * t3627;
t3528 = t3656 * t3801;
t3527 = t3650 * t3801;
t3526 = t3644 * t3801;
t3513 = t3655 * t3799;
t3512 = t3649 * t3798;
t3511 = t3643 * t3797;
t3510 = t3331 * t3559;
t3509 = t3332 * t3551;
t3508 = t3333 * t3543;
t3507 = t3334 * t3559;
t3506 = t3335 * t3551;
t3505 = t3336 * t3543;
t3504 = t3403 * t3561;
t3503 = t3403 * t3560;
t3502 = t3406 * t3561;
t3501 = t3406 * t3560;
t3500 = t3429 * t3558;
t3499 = t3430 * t3558;
t3498 = t3437 * t3555;
t3497 = t3404 * t3553;
t3496 = t3404 * t3552;
t3495 = t3407 * t3553;
t3494 = t3407 * t3552;
t3493 = t3429 * t3550;
t3492 = t3430 * t3550;
t3491 = t3439 * t3547;
t3490 = t3405 * t3545;
t3489 = t3405 * t3544;
t3488 = t3408 * t3545;
t3487 = t3408 * t3544;
t3486 = t3429 * t3542;
t3485 = t3430 * t3542;
t3484 = t3441 * t3539;
t3483 = t3431 * t3537;
t3482 = t3432 * t3535;
t3481 = t3433 * t3533;
t3459 = t3406 * t3536 + t3407 * t3534 + t3408 * t3532;
t3460 = t3406 * t3537 + t3407 * t3535 + t3408 * t3533;
t3480 = (t3331 * t3498 + t3332 * t3491 + t3333 * t3484) * t3791 + (t3331 * t3557 + t3332 * t3549 + t3333 * t3541) * MDP(4) + (t3331 * t3655 + t3332 * t3649 + t3333 * t3643) * MDP(1) + t3460 * MDP(6) + t3459 * MDP(7);
t3461 = t3403 * t3536 + t3404 * t3534 + t3405 * t3532;
t3462 = t3403 * t3537 + t3404 * t3535 + t3405 * t3533;
t3479 = (t3334 * t3498 + t3335 * t3491 + t3336 * t3484) * t3791 + (t3334 * t3557 + t3335 * t3549 + t3336 * t3541) * MDP(4) + (t3334 * t3655 + t3335 * t3649 + t3336 * t3643) * MDP(1) + t3462 * MDP(6) + t3461 * MDP(7);
t3378 = 0.1e1 / t3383 ^ 2;
t3380 = 0.1e1 / t3384 ^ 2;
t3382 = 0.1e1 / t3385 ^ 2;
t3463 = t3381 * (t3333 * t3405 + t3336 * t3408) * t3752;
t3464 = t3379 * (t3332 * t3404 + t3335 * t3407) * t3754;
t3465 = t3377 * (t3331 * t3403 + t3334 * t3406) * t3756;
t3473 = (t3437 * t3465 + t3439 * t3464 + t3441 * t3463) * MDP(6) + (t3443 * t3465 + t3445 * t3464 + t3447 * t3463) * MDP(7) + (t3538 * t3794 + t3546 * t3795 + t3554 * t3796) * t3791 + (t3420 * t3570 + t3421 * t3569 + t3422 * t3568) * MDP(4) + (t3568 + t3569 + t3570) * MDP(1) + (t3378 * t3403 * t3406 + t3380 * t3404 * t3407 + t3382 * t3405 * t3408) * MDP(8);
t3458 = -t3331 * t3504 - t3332 * t3497 - t3333 * t3490;
t3457 = t3331 * t3502 + t3332 * t3495 + t3333 * t3488;
t3456 = t3331 * t3501 + t3332 * t3494 + t3333 * t3487;
t3455 = t3334 * t3504 + t3335 * t3497 + t3336 * t3490;
t3454 = t3334 * t3503 + t3335 * t3496 + t3336 * t3489;
t3453 = -t3334 * t3502 - t3335 * t3495 - t3336 * t3488;
t3348 = t3376 * t3606;
t3347 = t3477 * t3606;
t3346 = t3375 * t3613;
t3345 = t3478 * t3613;
t3344 = t3374 * t3620;
t3343 = t3371 * t3620;
t3342 = (t3770 - t3357 / 0.2e1) * t3401;
t3341 = (t3771 - t3356 / 0.2e1) * t3399;
t3340 = (t3772 - t3355 / 0.2e1) * t3397;
t3339 = (t3670 * t3448 + t3357) * t3401;
t3338 = (t3671 * t3446 + t3356) * t3399;
t3337 = (t3672 * t3444 + t3355) * t3397;
t3330 = t3336 ^ 2;
t3329 = t3335 ^ 2;
t3328 = t3334 ^ 2;
t3327 = t3333 ^ 2;
t3326 = t3332 ^ 2;
t3325 = t3331 ^ 2;
t3319 = -pkin(2) * t3625 + t3333 * t3590;
t3318 = -pkin(2) * t3628 + t3332 * t3592;
t3317 = -pkin(2) * t3631 + t3331 * t3594;
t3316 = -pkin(2) * t3626 + t3336 * t3590;
t3315 = -pkin(2) * t3629 + t3335 * t3592;
t3314 = -pkin(2) * t3632 + t3334 * t3594;
t3313 = -t3505 + t3689;
t3312 = t3505 - 0.2e1 * t3689;
t3311 = -t3506 + t3691;
t3310 = t3506 - 0.2e1 * t3691;
t3309 = -t3507 + t3693;
t3308 = t3507 - 0.2e1 * t3693;
t3307 = -t3508 + t3688;
t3306 = t3508 - 0.2e1 * t3688;
t3305 = -t3509 + t3690;
t3304 = t3509 - 0.2e1 * t3690;
t3303 = -t3510 + t3692;
t3302 = t3510 - 0.2e1 * t3692;
t3301 = pkin(1) * t3517 - t3408 * t3673;
t3300 = pkin(1) * t3514 - t3405 * t3673;
t3299 = pkin(1) * t3518 - t3407 * t3674;
t3298 = pkin(1) * t3515 - t3404 * t3674;
t3297 = pkin(1) * t3519 - t3406 * t3675;
t3296 = pkin(1) * t3516 - t3403 * t3675;
t3295 = -pkin(5) * t3625 + t3333 * t3526;
t3294 = -pkin(5) * t3626 + t3336 * t3526;
t3293 = -pkin(5) * t3628 + t3332 * t3527;
t3292 = -pkin(5) * t3629 + t3335 * t3527;
t3291 = -pkin(5) * t3631 + t3331 * t3528;
t3290 = -pkin(5) * t3632 + t3334 * t3528;
t3289 = 0.2e1 * t3342 * t3411 + (-pkin(1) * t3357 + t3586 * t3448) * t3401;
t3288 = 0.2e1 * t3341 * t3410 + (-pkin(1) * t3356 + t3587 * t3446) * t3399;
t3287 = 0.2e1 * t3340 * t3409 + (-pkin(1) * t3355 + t3588 * t3444) * t3397;
t3286 = t3448 * t3520 + ((-t3357 + 0.2e1 * t3770) * t3430 + t3448 * t3595) * t3716 + t3342 * t3695;
t3285 = t3446 * t3521 + ((-t3356 + 0.2e1 * t3771) * t3430 + t3446 * t3596) * t3721 + t3341 * t3696;
t3284 = t3444 * t3522 + ((-t3355 + 0.2e1 * t3772) * t3430 + t3444 * t3597) * t3726 + t3340 * t3697;
t3283 = -0.2e1 * t3429 * t3446 * t3686 + 0.2e1 * (-t3341 * t3429 - t3612 * t3769) * t3445 - 0.2e1 * t3341 * t3701;
t3282 = -0.2e1 * t3429 * t3448 * t3685 + 0.2e1 * (-t3342 * t3429 - t3605 * t3769) * t3447 - 0.2e1 * t3342 * t3700;
t3281 = -0.2e1 * t3429 * t3444 * t3687 + 0.2e1 * (-t3340 * t3429 - t3619 * t3769) * t3443 - 0.2e1 * t3340 * t3702;
t3274 = -t3312 * t3430 - t3336 * t3486;
t3273 = t3312 * t3429 - t3336 * t3485;
t3272 = -t3310 * t3430 - t3335 * t3493;
t3271 = t3310 * t3429 - t3335 * t3492;
t3270 = -t3308 * t3430 - t3334 * t3500;
t3269 = t3308 * t3429 - t3334 * t3499;
t3268 = -t3306 * t3430 - t3333 * t3486;
t3267 = t3306 * t3429 - t3333 * t3485;
t3266 = -t3304 * t3430 - t3332 * t3493;
t3265 = t3304 * t3429 - t3332 * t3492;
t3264 = -t3302 * t3430 - t3331 * t3500;
t3263 = t3302 * t3429 - t3331 * t3499;
t3250 = (t3670 * t3336 + t3280) * t3752;
t3249 = (t3671 * t3335 + t3278) * t3754;
t3248 = (t3672 * t3334 + t3276) * t3756;
t3247 = (t3670 * t3333 + t3279) * t3752;
t3246 = (t3671 * t3332 + t3277) * t3754;
t3245 = (t3672 * t3331 + t3275) * t3756;
t3239 = t3466 * pkin(2) + (-pkin(1) * t3280 + t3586 * t3336) * t3752;
t3238 = t3469 * pkin(2) + (-pkin(1) * t3279 + t3586 * t3333) * t3752;
t3237 = t3467 * pkin(2) + (-pkin(1) * t3278 + t3587 * t3335) * t3754;
t3236 = t3470 * pkin(2) + (-pkin(1) * t3277 + t3587 * t3332) * t3754;
t3235 = t3468 * pkin(2) + (-pkin(1) * t3276 + t3588 * t3334) * t3756;
t3234 = t3471 * pkin(2) + (-pkin(1) * t3275 + t3588 * t3331) * t3756;
t1 = [(t3328 * t3755 + t3329 * t3753 + t3330 * t3751) * MDP(1) + (t3328 * t3652 + t3329 * t3646 + t3330 * t3640) * MDP(4) + (t3328 * t3554 + t3329 * t3546 + t3330 * t3538) * t3791 + t3455 * t3790 + t3454 * t3789 + (t3378 * t3403 ^ 2 + t3380 * t3404 ^ 2 + t3382 * t3405 ^ 2) * MDP(8) + (-t3455 * pkin(5) + t3290 * t3666 + t3292 * t3665 + t3294 * t3664) * MDP(9) + (-t3454 * pkin(5) + t3296 * t3666 + t3298 * t3665 + t3300 * t3664) * MDP(10) + (t3270 * t3744 + t3272 * t3740 + t3274 * t3736 + (t3572 + t3607) * t3336 + (t3576 + t3616) * t3335 + (t3580 + t3621) * t3334) * MDP(11) + (t3269 * t3744 + t3271 * t3740 + t3273 * t3736 + (t3571 + t3609) * t3336 + (t3575 + t3614) * t3335 + (t3579 + t3623) * t3334) * MDP(12) + (-t3455 * pkin(2) + t3314 * t3666 + t3315 * t3665 + t3316 * t3664) * MDP(13) + ((t3239 * t3336 + t3250 * t3280) * t3752 + (t3237 * t3335 + t3249 * t3278) * t3754 + (t3235 * t3334 + t3248 * t3276) * t3756 + (t3309 * t3744 + t3311 * t3740 + t3313 * t3736) * pkin(2)) * MDP(14) + MDP(15); (t3291 * t3666 + t3293 * t3665 + t3295 * t3664) * MDP(9) + (t3297 * t3666 + t3299 * t3665 + t3301 * t3664) * MDP(10) + (t3264 * t3744 + t3266 * t3740 + t3268 * t3736 + t3331 * t3580 + t3332 * t3576 + t3333 * t3572 + t3334 * t3622 + t3335 * t3617 + t3336 * t3608) * MDP(11) + (t3263 * t3744 + t3265 * t3740 + t3267 * t3736 + t3331 * t3579 + t3332 * t3575 + t3333 * t3571 + t3334 * t3624 + t3335 * t3615 + t3336 * t3610) * MDP(12) + (t3317 * t3666 + t3318 * t3665 + t3319 * t3664) * MDP(13) + (t3245 * t3276 * t3756 + t3246 * t3278 * t3754 + t3247 * t3280 * t3752 + t3234 * t3666 + t3236 * t3665 + t3238 * t3664) * MDP(14) + (t3458 * MDP(9) + (-t3331 * t3503 - t3332 * t3496 - t3333 * t3489) * MDP(10)) * pkin(5) + (t3458 * MDP(13) + (t3303 * t3744 + t3305 * t3740 + t3307 * t3736) * MDP(14)) * pkin(2) + t3473; (-t3462 * pkin(5) + (t3334 * t3555 + t3335 * t3547 + t3336 * t3539) * t3801) * MDP(9) + (-t3461 * pkin(5) + (-t3334 * t3556 - t3335 * t3548 - t3336 * t3540) * t3801) * MDP(10) + (-t3344 * t3744 - t3346 * t3740 - t3348 * t3736 + (t3280 * t3637 + t3286 * t3757) * t3365 + (t3278 * t3638 + t3285 * t3758) * t3363 + (t3276 * t3639 + t3284 * t3759) * t3361) * MDP(11) + (t3343 * t3744 + t3345 * t3740 + t3347 * t3736 + (t3280 * t3634 + t3282 * t3757) * t3365 + (t3278 * t3635 + t3283 * t3758) * t3363 + (t3276 * t3636 + t3281 * t3759) * t3361) * MDP(12) + (-t3462 * pkin(2) + t3334 * t3513 + t3335 * t3512 + t3336 * t3511) * MDP(13) + ((t3280 * t3339 + t3289 * t3336) * t3752 + (t3278 * t3338 + t3288 * t3335) * t3754 + (t3276 * t3337 + t3287 * t3334) * t3756 + (-t3403 * t3483 - t3404 * t3482 - t3405 * t3481) * pkin(2)) * MDP(14) + t3479; (t3290 * t3669 + t3292 * t3668 + t3294 * t3667) * MDP(9) + (t3296 * t3669 + t3298 * t3668 + t3300 * t3667) * MDP(10) + (t3270 * t3743 + t3272 * t3739 + t3274 * t3735 + t3331 * t3621 + t3332 * t3616 + t3333 * t3607 + t3334 * t3582 + t3335 * t3578 + t3336 * t3574) * MDP(11) + (t3269 * t3743 + t3271 * t3739 + t3273 * t3735 + t3331 * t3623 + t3332 * t3614 + t3333 * t3609 + t3334 * t3581 + t3335 * t3577 + t3336 * t3573) * MDP(12) + (t3314 * t3669 + t3315 * t3668 + t3316 * t3667) * MDP(13) + (t3248 * t3275 * t3756 + t3249 * t3277 * t3754 + t3279 * t3250 * t3752 + t3235 * t3669 + t3237 * t3668 + t3239 * t3667) * MDP(14) + (t3453 * MDP(9) + (-t3334 * t3501 - t3335 * t3494 - t3336 * t3487) * MDP(10)) * pkin(5) + (t3453 * MDP(13) + (t3309 * t3743 + t3311 * t3739 + t3313 * t3735) * MDP(14)) * pkin(2) + t3473; (t3325 * t3755 + t3326 * t3753 + t3327 * t3751) * MDP(1) + (t3325 * t3652 + t3326 * t3646 + t3327 * t3640) * MDP(4) + (t3325 * t3554 + t3326 * t3546 + t3327 * t3538) * t3791 + t3457 * t3790 + t3456 * t3789 + (t3378 * t3406 ^ 2 + t3380 * t3407 ^ 2 + t3382 * t3408 ^ 2) * MDP(8) + (-t3457 * pkin(5) + t3291 * t3669 + t3293 * t3668 + t3295 * t3667) * MDP(9) + (-t3456 * pkin(5) + t3297 * t3669 + t3299 * t3668 + t3301 * t3667) * MDP(10) + (t3264 * t3743 + t3266 * t3739 + t3268 * t3735 + (t3574 + t3608) * t3333 + (t3578 + t3617) * t3332 + (t3582 + t3622) * t3331) * MDP(11) + (t3263 * t3743 + t3265 * t3739 + t3267 * t3735 + (t3573 + t3610) * t3333 + (t3577 + t3615) * t3332 + (t3581 + t3624) * t3331) * MDP(12) + (-t3457 * pkin(2) + t3317 * t3669 + t3318 * t3668 + t3319 * t3667) * MDP(13) + ((t3238 * t3333 + t3247 * t3279) * t3752 + (t3236 * t3332 + t3246 * t3277) * t3754 + (t3234 * t3331 + t3245 * t3275) * t3756 + (t3303 * t3743 + t3305 * t3739 + t3307 * t3735) * pkin(2)) * MDP(14) + MDP(15); (-t3460 * pkin(5) + (t3331 * t3555 + t3332 * t3547 + t3333 * t3539) * t3801) * MDP(9) + (-t3459 * pkin(5) + (-t3331 * t3556 - t3332 * t3548 - t3333 * t3540) * t3801) * MDP(10) + (-t3344 * t3743 - t3346 * t3739 - t3348 * t3735 + (t3279 * t3637 + t3286 * t3760) * t3365 + (t3277 * t3638 + t3285 * t3761) * t3363 + (t3275 * t3639 + t3284 * t3762) * t3361) * MDP(11) + (t3343 * t3743 + t3345 * t3739 + t3347 * t3735 + (t3279 * t3634 + t3282 * t3760) * t3365 + (t3277 * t3635 + t3283 * t3761) * t3363 + (t3275 * t3636 + t3281 * t3762) * t3361) * MDP(12) + (-t3460 * pkin(2) + t3331 * t3513 + t3332 * t3512 + t3333 * t3511) * MDP(13) + ((t3279 * t3339 + t3289 * t3333) * t3752 + (t3277 * t3338 + t3288 * t3332) * t3754 + (t3275 * t3337 + t3287 * t3331) * t3756 + (-t3406 * t3483 - t3407 * t3482 - t3408 * t3481) * pkin(2)) * MDP(14) + t3480; (t3290 * t3725 + t3292 * t3720 + t3294 * t3715) * MDP(9) + (t3296 * t3725 + t3298 * t3720 + t3300 * t3715) * MDP(10) + (t3227 * t3725 + t3229 * t3720 + t3231 * t3715 + t3334 * t3567 + t3335 * t3565 + t3336 * t3563) * MDP(11) + (t3223 * t3725 + t3225 * t3715 + t3233 * t3720 + t3334 * t3566 + t3335 * t3564 + t3336 * t3562) * MDP(12) + (t3314 * t3725 + t3315 * t3720 + t3316 * t3715) * MDP(13) + ((t3239 * t3448 + t3250 * t3357) * t3401 + (t3237 * t3446 + t3249 * t3356) * t3399 + (t3235 * t3444 + t3248 * t3355) * t3397) * MDP(14) + t3479; (t3291 * t3725 + t3293 * t3720 + t3295 * t3715) * MDP(9) + (t3297 * t3725 + t3299 * t3720 + t3301 * t3715) * MDP(10) + (t3226 * t3725 + t3228 * t3720 + t3230 * t3715 + t3331 * t3567 + t3332 * t3565 + t3333 * t3563) * MDP(11) + (t3222 * t3725 + t3224 * t3715 + t3232 * t3720 + t3331 * t3566 + t3332 * t3564 + t3333 * t3562) * MDP(12) + (t3317 * t3725 + t3318 * t3720 + t3319 * t3715) * MDP(13) + ((t3238 * t3448 + t3247 * t3357) * t3401 + (t3236 * t3446 + t3246 * t3356) * t3399 + (t3234 * t3444 + t3245 * t3355) * t3397) * MDP(14) + t3480; (t3714 + t3719 + t3724) * MDP(1) + (t3420 * t3724 + t3421 * t3719 + t3422 * t3714) * MDP(4) + (t3337 * t3355 * t3397 + t3338 * t3356 * t3399 + t3339 * t3357 * t3401) * MDP(14) + MDP(15) + ((t3286 * t3401 + t3659) * MDP(11) + (t3282 * t3401 + t3658) * MDP(12) + t3289 * t3401 * MDP(14)) * t3448 + ((t3285 * t3399 + t3661) * MDP(11) + (t3283 * t3399 + t3660) * MDP(12) + t3288 * t3399 * MDP(14)) * t3446 + ((t3284 * t3397 + t3663) * MDP(11) + (t3281 * t3397 + t3662) * MDP(12) + t3287 * t3397 * MDP(14)) * t3444 + (t3424 * t3618 + t3426 * t3611 + t3428 * t3604) * t3791 + 0.2e1 * (t3431 * t3724 + t3432 * t3719 + t3433 * t3714) * MDP(13) + ((t3424 * t3723 + t3426 * t3718 + t3428 * t3713) * MDP(9) + (-t3437 * t3724 - t3439 * t3719 - t3441 * t3714) * MDP(10)) * t3801;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
