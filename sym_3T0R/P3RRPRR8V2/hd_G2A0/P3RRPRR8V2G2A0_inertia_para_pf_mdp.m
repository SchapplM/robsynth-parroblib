% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [13x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 21:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRPRR8V2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(13,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [13 1]), ...
  'P3RRPRR8V2G2A0_inertia_para_pf_mdp: MDP has to be [13x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 21:13:13
% EndTime: 2020-08-06 21:13:19
% DurationCPUTime: 5.93s
% Computational Cost: add. (7290->441), mult. (13211->842), div. (1290->18), fcn. (10458->23), ass. (0->367)
t2751 = 2 * MDP(11);
t2569 = cos(pkin(7));
t2795 = t2569 * pkin(3);
t2531 = pkin(2) + t2795;
t2586 = cos(qJ(2,1));
t2568 = sin(pkin(7));
t2580 = sin(qJ(2,1));
t2759 = t2568 * t2580;
t2738 = pkin(3) * t2759;
t2514 = t2531 * t2586 - t2738;
t2510 = 0.1e1 / t2514;
t2572 = pkin(5) + qJ(3,1);
t2557 = pkin(6) + t2572;
t2540 = 0.1e1 / t2557;
t2774 = t2540 * t2586;
t2707 = t2510 * t2774;
t2684 = 0.2e1 * t2707;
t2630 = pkin(2) * t2684;
t2817 = -t2630 / 0.2e1;
t2584 = cos(qJ(2,2));
t2578 = sin(qJ(2,2));
t2760 = t2568 * t2578;
t2739 = pkin(3) * t2760;
t2513 = t2531 * t2584 - t2739;
t2508 = 0.1e1 / t2513;
t2571 = pkin(5) + qJ(3,2);
t2556 = pkin(6) + t2571;
t2538 = 0.1e1 / t2556;
t2775 = t2538 * t2584;
t2712 = t2508 * t2775;
t2686 = 0.2e1 * t2712;
t2631 = pkin(2) * t2686;
t2816 = -t2631 / 0.2e1;
t2582 = cos(qJ(2,3));
t2576 = sin(qJ(2,3));
t2761 = t2568 * t2576;
t2740 = pkin(3) * t2761;
t2512 = t2531 * t2582 - t2740;
t2506 = 0.1e1 / t2512;
t2570 = pkin(5) + qJ(3,3);
t2555 = pkin(6) + t2570;
t2536 = 0.1e1 / t2555;
t2776 = t2536 * t2582;
t2717 = t2506 * t2776;
t2688 = 0.2e1 * t2717;
t2632 = pkin(2) * t2688;
t2815 = -t2632 / 0.2e1;
t2577 = sin(qJ(1,3));
t2573 = legFrame(3,2);
t2542 = sin(t2573);
t2796 = t2568 * pkin(3);
t2743 = t2542 * t2796;
t2545 = cos(t2573);
t2746 = t2545 * t2796;
t2772 = t2542 * t2577;
t2779 = t2531 * t2545;
t2485 = (-t2531 * t2772 + t2746) * t2582 + (t2577 * t2743 + t2779) * t2576;
t2767 = t2545 * t2577;
t2773 = t2542 * t2531;
t2488 = (t2531 * t2767 + t2743) * t2582 + t2576 * (-t2577 * t2746 + t2773);
t2814 = t2485 * t2488;
t2579 = sin(qJ(1,2));
t2574 = legFrame(2,2);
t2543 = sin(t2574);
t2742 = t2543 * t2796;
t2546 = cos(t2574);
t2745 = t2546 * t2796;
t2770 = t2543 * t2579;
t2778 = t2531 * t2546;
t2486 = (-t2531 * t2770 + t2745) * t2584 + (t2579 * t2742 + t2778) * t2578;
t2766 = t2546 * t2579;
t2771 = t2543 * t2531;
t2489 = (t2531 * t2766 + t2742) * t2584 + t2578 * (-t2579 * t2745 + t2771);
t2813 = t2486 * t2489;
t2581 = sin(qJ(1,1));
t2575 = legFrame(1,2);
t2544 = sin(t2575);
t2741 = t2544 * t2796;
t2547 = cos(t2575);
t2744 = t2547 * t2796;
t2768 = t2544 * t2581;
t2777 = t2531 * t2547;
t2487 = (-t2531 * t2768 + t2744) * t2586 + (t2581 * t2741 + t2777) * t2580;
t2765 = t2547 * t2581;
t2769 = t2544 * t2531;
t2490 = (t2531 * t2765 + t2741) * t2586 + t2580 * (-t2581 * t2744 + t2769);
t2812 = t2487 * t2490;
t2755 = (pkin(1) ^ 2 + pkin(5) ^ 2);
t2806 = 2 * pkin(5);
t2530 = (t2806 + qJ(3,1)) * qJ(3,1) + t2755;
t2566 = t2586 ^ 2;
t2590 = pkin(2) ^ 2;
t2691 = t2540 * t2566 * t2590;
t2790 = t2510 * t2540;
t2811 = pkin(1) * t2630 + t2510 * t2691 + t2530 * t2790;
t2529 = (t2806 + qJ(3,2)) * qJ(3,2) + t2755;
t2564 = t2584 ^ 2;
t2693 = t2538 * t2564 * t2590;
t2792 = t2508 * t2538;
t2810 = pkin(1) * t2631 + t2508 * t2693 + t2529 * t2792;
t2528 = (t2806 + qJ(3,3)) * qJ(3,3) + t2755;
t2562 = t2582 ^ 2;
t2695 = t2536 * t2562 * t2590;
t2794 = t2506 * t2536;
t2809 = pkin(1) * t2632 + t2506 * t2695 + t2528 * t2794;
t2808 = -0.2e1 * pkin(1);
t2807 = 0.2e1 * pkin(2);
t2805 = 2 * MDP(5);
t2804 = 2 * MDP(6);
t2803 = 2 * MDP(7);
t2802 = 0.2e1 * t2562;
t2801 = 0.2e1 * t2564;
t2800 = 0.2e1 * t2566;
t2583 = cos(qJ(1,3));
t2683 = pkin(1) * t2577 - t2583 * t2555;
t2558 = t2569 ^ 2;
t2750 = pkin(3) * (t2558 - 0.1e1);
t2799 = pkin(3) * (t2577 * t2750 + t2683 * t2761);
t2585 = cos(qJ(1,2));
t2682 = pkin(1) * t2579 - t2585 * t2556;
t2798 = pkin(3) * (t2579 * t2750 + t2682 * t2760);
t2587 = cos(qJ(1,1));
t2681 = pkin(1) * t2581 - t2587 * t2557;
t2797 = pkin(3) * (t2581 * t2750 + t2681 * t2759);
t2548 = t2582 * pkin(2);
t2549 = t2584 * pkin(2);
t2550 = t2586 * pkin(2);
t2507 = 0.1e1 / t2512 ^ 2;
t2537 = 0.1e1 / t2555 ^ 2;
t2793 = t2507 * t2537;
t2509 = 0.1e1 / t2513 ^ 2;
t2539 = 0.1e1 / t2556 ^ 2;
t2791 = t2509 * t2539;
t2511 = 0.1e1 / t2514 ^ 2;
t2541 = 0.1e1 / t2557 ^ 2;
t2789 = t2511 * t2541;
t2522 = pkin(3) * cos(qJ(2,3) + pkin(7)) + t2548;
t2516 = 0.1e1 / t2522;
t2788 = t2516 * t2542;
t2787 = t2516 * t2545;
t2786 = t2516 * t2576;
t2523 = pkin(3) * cos(qJ(2,2) + pkin(7)) + t2549;
t2518 = 0.1e1 / t2523;
t2785 = t2518 * t2543;
t2784 = t2518 * t2546;
t2783 = t2518 * t2578;
t2524 = pkin(3) * cos(qJ(2,1) + pkin(7)) + t2550;
t2520 = 0.1e1 / t2524;
t2782 = t2520 * t2544;
t2781 = t2520 * t2547;
t2780 = t2520 * t2580;
t2563 = t2583 ^ 2;
t2764 = t2563 * t2537;
t2565 = t2585 ^ 2;
t2763 = t2565 * t2539;
t2567 = t2587 ^ 2;
t2762 = t2567 * t2541;
t2758 = t2583 * t2536;
t2757 = t2585 * t2538;
t2756 = t2587 * t2540;
t2754 = 2 * MDP(9);
t2753 = pkin(2) * t2795;
t2752 = 2 * MDP(10);
t2749 = pkin(5) * t2516 * t2582;
t2748 = pkin(5) * t2518 * t2584;
t2747 = pkin(5) * t2520 * t2586;
t2737 = -pkin(1) - t2548;
t2736 = -pkin(1) - t2549;
t2735 = -pkin(1) - t2550;
t2532 = pkin(1) * t2796;
t2589 = pkin(3) ^ 2;
t2605 = 0.2e1 * t2558 * t2589 - t2589 + t2590 + 0.2e1 * t2753;
t2497 = t2605 * t2576 + t2532;
t2503 = -0.2e1 * t2577 * t2740 + t2683;
t2515 = t2753 + t2590 / 0.2e1 + (t2558 - 0.1e1 / 0.2e1) * t2589;
t2525 = pkin(1) * t2576 - t2796;
t2441 = (-t2515 * t2772 + t2531 * t2746) * t2802 + (t2497 * t2545 - t2503 * t2773) * t2582 + t2542 * t2799 + t2525 * t2779;
t2734 = t2441 * t2794;
t2442 = (t2515 * t2767 + t2531 * t2743) * t2802 + (t2542 * t2497 + t2503 * t2779) * t2582 - t2545 * t2799 + t2525 * t2773;
t2733 = t2442 * t2794;
t2498 = t2605 * t2578 + t2532;
t2504 = -0.2e1 * t2579 * t2739 + t2682;
t2526 = pkin(1) * t2578 - t2796;
t2443 = (-t2515 * t2770 + t2531 * t2745) * t2801 + (t2498 * t2546 - t2504 * t2771) * t2584 + t2543 * t2798 + t2526 * t2778;
t2732 = t2443 * t2792;
t2444 = (t2515 * t2766 + t2531 * t2742) * t2801 + (t2543 * t2498 + t2504 * t2778) * t2584 - t2546 * t2798 + t2526 * t2771;
t2731 = t2444 * t2792;
t2499 = t2605 * t2580 + t2532;
t2505 = -0.2e1 * t2581 * t2738 + t2681;
t2527 = pkin(1) * t2580 - t2796;
t2445 = (-t2515 * t2768 + t2531 * t2744) * t2800 + (t2499 * t2547 - t2505 * t2769) * t2586 + t2544 * t2797 + t2527 * t2777;
t2730 = t2445 * t2790;
t2446 = (t2515 * t2765 + t2531 * t2741) * t2800 + (t2544 * t2499 + t2505 * t2777) * t2586 - t2547 * t2797 + t2527 * t2769;
t2729 = t2446 * t2790;
t2728 = t2485 * t2794;
t2727 = t2486 * t2792;
t2726 = t2487 * t2790;
t2725 = t2488 * t2794;
t2724 = t2489 * t2792;
t2723 = t2490 * t2790;
t2500 = t2577 * t2555 + (pkin(1) + t2522) * t2583;
t2491 = (t2737 * t2583 + t2500) * t2536;
t2722 = t2491 * t2794;
t2501 = t2579 * t2556 + (pkin(1) + t2523) * t2585;
t2492 = (t2736 * t2585 + t2501) * t2538;
t2721 = t2492 * t2792;
t2502 = t2581 * t2557 + (pkin(1) + t2524) * t2587;
t2493 = (t2735 * t2587 + t2502) * t2540;
t2720 = t2493 * t2790;
t2718 = t2576 * t2794;
t2716 = t2506 * t2537 * t2583;
t2559 = t2576 ^ 2;
t2715 = t2559 * t2793;
t2713 = t2578 * t2792;
t2711 = t2508 * t2539 * t2585;
t2560 = t2578 ^ 2;
t2710 = t2560 * t2791;
t2708 = t2580 * t2790;
t2706 = t2510 * t2541 * t2587;
t2561 = t2580 ^ 2;
t2705 = t2561 * t2789;
t2704 = t2516 * t2758;
t2703 = t2542 * t2786;
t2702 = t2545 * t2786;
t2701 = t2518 * t2757;
t2700 = t2543 * t2783;
t2699 = t2546 * t2783;
t2698 = t2520 * t2756;
t2697 = t2544 * t2780;
t2696 = t2547 * t2780;
t2694 = t2537 * t2576 * t2582;
t2692 = t2539 * t2578 * t2584;
t2690 = t2541 * t2580 * t2586;
t2689 = 0.2e1 * t2570 * t2794;
t2687 = 0.2e1 * t2571 * t2792;
t2685 = 0.2e1 * t2572 * t2790;
t2680 = pkin(2) * t2703;
t2679 = pkin(2) * t2702;
t2678 = pkin(2) * t2700;
t2677 = pkin(2) * t2699;
t2676 = pkin(2) * t2697;
t2675 = pkin(2) * t2696;
t2674 = t2793 * t2814;
t2673 = t2791 * t2813;
t2672 = t2789 * t2812;
t2671 = t2516 * t2718;
t2670 = t2516 * t2717;
t2668 = t2570 * t2718;
t2667 = t2559 * t2716;
t2666 = t2570 * t2716;
t2665 = t2576 * t2716;
t2664 = t2582 * t2716;
t2663 = t2507 * t2694;
t2662 = t2518 * t2713;
t2661 = t2518 * t2712;
t2659 = t2571 * t2713;
t2658 = t2560 * t2711;
t2657 = t2571 * t2711;
t2656 = t2578 * t2711;
t2655 = t2584 * t2711;
t2654 = t2509 * t2692;
t2653 = t2520 * t2708;
t2652 = t2520 * t2707;
t2650 = t2572 * t2708;
t2649 = t2561 * t2706;
t2648 = t2572 * t2706;
t2647 = t2580 * t2706;
t2646 = t2586 * t2706;
t2645 = t2511 * t2690;
t2644 = t2576 * t2704;
t2643 = t2582 * t2704;
t2642 = t2578 * t2701;
t2641 = t2584 * t2701;
t2640 = t2580 * t2698;
t2639 = t2586 * t2698;
t2638 = t2718 * t2808;
t2637 = pkin(1) * t2688;
t2636 = t2713 * t2808;
t2635 = pkin(1) * t2686;
t2634 = t2708 * t2808;
t2633 = pkin(1) * t2684;
t2629 = t2542 * t2671;
t2628 = t2542 * t2670;
t2627 = t2545 * t2671;
t2626 = t2545 * t2670;
t2625 = t2576 * t2664;
t2624 = t2543 * t2662;
t2623 = t2543 * t2661;
t2622 = t2546 * t2662;
t2621 = t2546 * t2661;
t2620 = t2578 * t2655;
t2619 = t2544 * t2653;
t2618 = t2544 * t2652;
t2617 = t2547 * t2653;
t2616 = t2547 * t2652;
t2615 = t2580 * t2646;
t2614 = t2542 * t2644;
t2613 = t2543 * t2642;
t2612 = t2544 * t2640;
t2611 = t2545 * t2644;
t2610 = t2546 * t2642;
t2609 = t2547 * t2640;
t2598 = t2545 * t2643 + t2546 * t2641 + t2547 * t2639;
t2599 = t2609 + t2610 + t2611;
t2608 = (t2485 * t2625 + t2486 * t2620 + t2487 * t2615) * t2805 + (t2485 * t2667 + t2486 * t2658 + t2487 * t2649) * MDP(4) + (t2485 * t2716 + t2486 * t2711 + t2487 * t2706) * MDP(1) + t2599 * MDP(6) + t2598 * MDP(7);
t2600 = t2542 * t2643 + t2543 * t2641 + t2544 * t2639;
t2601 = t2612 + t2613 + t2614;
t2607 = (t2488 * t2625 + t2489 * t2620 + t2490 * t2615) * t2805 + (t2488 * t2667 + t2489 * t2658 + t2490 * t2649) * MDP(4) + (t2488 * t2716 + t2489 * t2711 + t2490 * t2706) * MDP(1) + t2601 * MDP(6) + t2600 * MDP(7);
t2517 = 0.1e1 / t2522 ^ 2;
t2519 = 0.1e1 / t2523 ^ 2;
t2521 = 0.1e1 / t2524 ^ 2;
t2602 = t2520 * (t2487 * t2544 + t2490 * t2547) * t2790;
t2603 = t2518 * (t2486 * t2543 + t2489 * t2546) * t2792;
t2604 = t2516 * (t2485 * t2542 + t2488 * t2545) * t2794;
t2606 = (t2576 * t2604 + t2578 * t2603 + t2580 * t2602) * MDP(6) + (t2582 * t2604 + t2584 * t2603 + t2586 * t2602) * MDP(7) + (t2645 * t2812 + t2654 * t2813 + t2663 * t2814) * t2805 + (t2559 * t2674 + t2560 * t2673 + t2561 * t2672) * MDP(4) + (t2672 + t2673 + t2674) * MDP(1) + (t2542 * t2517 * t2545 + t2543 * t2519 * t2546 + t2544 * t2521 * t2547) * MDP(8);
t2597 = -t2485 * t2629 - t2486 * t2624 - t2487 * t2619;
t2596 = t2485 * t2627 + t2486 * t2622 + t2487 * t2617;
t2595 = t2485 * t2626 + t2486 * t2621 + t2487 * t2616;
t2594 = t2488 * t2629 + t2489 * t2624 + t2490 * t2619;
t2593 = t2488 * t2628 + t2489 * t2623 + t2490 * t2618;
t2592 = -t2488 * t2627 - t2489 * t2622 - t2490 * t2617;
t2484 = t2490 ^ 2;
t2483 = t2489 ^ 2;
t2482 = t2488 ^ 2;
t2481 = t2487 ^ 2;
t2480 = t2486 ^ 2;
t2479 = t2485 ^ 2;
t2473 = t2487 * t2685 - t2675;
t2472 = t2490 * t2685 - t2676;
t2471 = t2486 * t2687 - t2677;
t2470 = t2489 * t2687 - t2678;
t2469 = t2485 * t2689 - t2679;
t2468 = t2488 * t2689 - t2680;
t2467 = pkin(2) * t2782 - t2490 * t2650;
t2466 = pkin(2) * t2785 - t2489 * t2659;
t2465 = pkin(2) * t2788 - t2488 * t2668;
t2464 = pkin(2) * t2781 - t2487 * t2650;
t2463 = pkin(2) * t2784 - t2486 * t2659;
t2462 = pkin(2) * t2787 - t2485 * t2668;
t2461 = t2487 * t2634 - t2547 * t2747;
t2460 = t2490 * t2634 - t2544 * t2747;
t2459 = t2486 * t2636 - t2546 * t2748;
t2458 = t2489 * t2636 - t2543 * t2748;
t2457 = t2485 * t2638 - t2545 * t2749;
t2456 = t2488 * t2638 - t2542 * t2749;
t2455 = -pkin(5) * t2696 + t2487 * t2633;
t2454 = -pkin(5) * t2697 + t2490 * t2633;
t2453 = -pkin(5) * t2699 + t2486 * t2635;
t2452 = -pkin(5) * t2700 + t2489 * t2635;
t2451 = -pkin(5) * t2702 + t2485 * t2637;
t2450 = -pkin(5) * t2703 + t2488 * t2637;
t2449 = t2587 * t2691 + (t2587 * pkin(1) - t2502 / 0.2e1) * t2774 * t2807 + t2530 * t2756 - pkin(1) * t2502 * t2540;
t2448 = t2585 * t2693 + (t2585 * pkin(1) - t2501 / 0.2e1) * t2775 * t2807 + t2529 * t2757 - pkin(1) * t2501 * t2538;
t2447 = t2583 * t2695 + (t2583 * pkin(1) - t2500 / 0.2e1) * t2776 * t2807 + t2528 * t2758 - pkin(1) * t2500 * t2536;
t2434 = (t2735 * t2490 + t2446) * t2790;
t2433 = (t2736 * t2489 + t2444) * t2792;
t2432 = (t2737 * t2488 + t2442) * t2794;
t2431 = (t2735 * t2487 + t2445) * t2790;
t2430 = (t2736 * t2486 + t2443) * t2792;
t2429 = (t2737 * t2485 + t2441) * t2794;
t2423 = -pkin(1) * t2729 + t2446 * t2817 + t2811 * t2490 - t2572 * t2676;
t2422 = -pkin(1) * t2730 + t2445 * t2817 + t2811 * t2487 - t2572 * t2675;
t2421 = -pkin(1) * t2731 + t2444 * t2816 + t2810 * t2489 - t2571 * t2678;
t2420 = -pkin(1) * t2732 + t2443 * t2816 + t2810 * t2486 - t2571 * t2677;
t2419 = -pkin(1) * t2733 + t2442 * t2815 + t2809 * t2488 - t2570 * t2680;
t2418 = -pkin(1) * t2734 + t2441 * t2815 + t2809 * t2485 - t2570 * t2679;
t1 = [(t2482 * t2793 + t2483 * t2791 + t2484 * t2789) * MDP(1) + (t2482 * t2715 + t2483 * t2710 + t2484 * t2705) * MDP(4) + (t2542 ^ 2 * t2517 + t2543 ^ 2 * t2519 + t2544 ^ 2 * t2521) * MDP(8) + (t2450 * t2725 + t2452 * t2724 + t2454 * t2723) * MDP(9) + (t2456 * t2725 + t2458 * t2724 + t2460 * t2723) * MDP(10) + (t2468 * t2725 + t2470 * t2724 + t2472 * t2723) * MDP(11) + (t2419 * t2725 + t2421 * t2724 + t2423 * t2723 + t2432 * t2733 + t2433 * t2731 + t2434 * t2729) * MDP(12) + MDP(13) + (t2482 * t2663 + t2483 * t2654 + t2484 * t2645) * t2805 + t2594 * t2804 + t2593 * t2803 + (-t2593 * MDP(10) - t2594 * MDP(9)) * pkin(5) + (-t2594 * MDP(11) + (t2465 * t2788 + t2466 * t2785 + t2467 * t2782) * MDP(12)) * pkin(2); (t2451 * t2725 + t2453 * t2724 + t2455 * t2723) * MDP(9) + (t2457 * t2725 + t2459 * t2724 + t2461 * t2723) * MDP(10) + (t2469 * t2725 + t2471 * t2724 + t2473 * t2723) * MDP(11) + (t2418 * t2725 + t2420 * t2724 + t2422 * t2723 + t2429 * t2733 + t2430 * t2731 + t2431 * t2729) * MDP(12) + (t2597 * MDP(9) + (-t2485 * t2628 - t2486 * t2623 - t2487 * t2618) * MDP(10)) * pkin(5) + (t2597 * MDP(11) + (t2462 * t2788 + t2463 * t2785 + t2464 * t2782) * MDP(12)) * pkin(2) + t2606; (t2488 * t2666 + t2489 * t2657 + t2490 * t2648) * t2751 + (t2442 * t2722 + t2444 * t2721 + t2446 * t2720 + t2447 * t2725 + t2448 * t2724 + t2449 * t2723) * MDP(12) + (-t2601 * MDP(11) + (-t2570 * t2614 - t2571 * t2613 - t2572 * t2612) * MDP(12)) * pkin(2) + (-MDP(10) * t2600 - MDP(9) * t2601) * pkin(5) + ((t2488 * t2664 + t2489 * t2655 + t2490 * t2646) * t2754 + (-t2488 * t2665 - t2489 * t2656 - t2490 * t2647) * t2752) * pkin(1) + t2607; (t2450 * t2728 + t2452 * t2727 + t2454 * t2726) * MDP(9) + (t2456 * t2728 + t2458 * t2727 + t2460 * t2726) * MDP(10) + (t2468 * t2728 + t2470 * t2727 + t2472 * t2726) * MDP(11) + (t2419 * t2728 + t2421 * t2727 + t2423 * t2726 + t2432 * t2734 + t2433 * t2732 + t2434 * t2730) * MDP(12) + (t2592 * MDP(9) + (-t2488 * t2626 - t2489 * t2621 - t2490 * t2616) * MDP(10)) * pkin(5) + (t2592 * MDP(11) + (t2465 * t2787 + t2466 * t2784 + t2467 * t2781) * MDP(12)) * pkin(2) + t2606; (t2479 * t2793 + t2480 * t2791 + t2481 * t2789) * MDP(1) + (t2479 * t2715 + t2480 * t2710 + t2481 * t2705) * MDP(4) + (t2545 ^ 2 * t2517 + t2546 ^ 2 * t2519 + t2547 ^ 2 * t2521) * MDP(8) + (t2451 * t2728 + t2453 * t2727 + t2455 * t2726) * MDP(9) + (t2457 * t2728 + t2459 * t2727 + t2461 * t2726) * MDP(10) + (t2469 * t2728 + t2471 * t2727 + t2473 * t2726) * MDP(11) + (t2418 * t2728 + t2420 * t2727 + t2422 * t2726 + t2429 * t2734 + t2430 * t2732 + t2431 * t2730) * MDP(12) + MDP(13) + (t2479 * t2663 + t2480 * t2654 + t2481 * t2645) * t2805 + t2596 * t2804 + t2595 * t2803 + (-MDP(10) * t2595 - MDP(9) * t2596) * pkin(5) + (-t2596 * MDP(11) + (t2462 * t2787 + t2463 * t2784 + t2464 * t2781) * MDP(12)) * pkin(2); (t2485 * t2666 + t2486 * t2657 + t2487 * t2648) * t2751 + (t2441 * t2722 + t2443 * t2721 + t2445 * t2720 + t2447 * t2728 + t2448 * t2727 + t2449 * t2726) * MDP(12) + (-t2599 * MDP(11) + (-t2570 * t2611 - t2571 * t2610 - t2572 * t2609) * MDP(12)) * pkin(2) + (-MDP(10) * t2598 - MDP(9) * t2599) * pkin(5) + ((t2485 * t2664 + t2486 * t2655 + t2487 * t2646) * t2754 + (-t2485 * t2665 - t2486 * t2656 - t2487 * t2647) * t2752) * pkin(1) + t2608; (t2450 * t2758 + t2452 * t2757 + t2454 * t2756) * MDP(9) + (t2456 * t2758 + t2458 * t2757 + t2460 * t2756) * MDP(10) + (t2468 * t2758 + t2470 * t2757 + t2472 * t2756) * MDP(11) + ((t2423 * t2587 + t2434 * t2502) * t2540 + (t2421 * t2585 + t2433 * t2501) * t2538 + (t2419 * t2583 + t2432 * t2500) * t2536) * MDP(12) + t2607; (t2451 * t2758 + t2453 * t2757 + t2455 * t2756) * MDP(9) + (t2457 * t2758 + t2459 * t2757 + t2461 * t2756) * MDP(10) + (t2469 * t2758 + t2471 * t2757 + t2473 * t2756) * MDP(11) + ((t2422 * t2587 + t2431 * t2502) * t2540 + (t2420 * t2585 + t2430 * t2501) * t2538 + (t2418 * t2583 + t2429 * t2500) * t2536) * MDP(12) + t2608; (t2762 + t2763 + t2764) * MDP(1) + (t2559 * t2764 + t2560 * t2763 + t2561 * t2762) * MDP(4) + ((t2449 * t2587 + t2493 * t2502) * t2540 + (t2448 * t2585 + t2492 * t2501) * t2538 + (t2447 * t2583 + t2491 * t2500) * t2536) * MDP(12) + MDP(13) + (t2563 * t2694 + t2565 * t2692 + t2567 * t2690) * t2805 + (t2570 * t2764 + t2571 * t2763 + t2572 * t2762) * t2751 + 0.2e1 * ((t2582 * t2764 + t2584 * t2763 + t2586 * t2762) * MDP(9) + (-t2576 * t2764 - t2578 * t2763 - t2580 * t2762) * MDP(10)) * pkin(1);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
