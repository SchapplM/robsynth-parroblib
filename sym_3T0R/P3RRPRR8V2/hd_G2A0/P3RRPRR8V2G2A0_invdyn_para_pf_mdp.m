% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRPRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRPRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-07 13:08
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRPRR8V2G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(7,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P3RRPRR8V2G2A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-07 13:07:14
% EndTime: 2022-11-07 13:07:39
% DurationCPUTime: 26.29s
% Computational Cost: add. (123357->1001), mult. (272081->1521), div. (8562->24), fcn. (157173->98), ass. (0->658)
t2802 = legFrame(3,2);
t2754 = sin(t2802);
t2757 = cos(t2802);
t2821 = xDP(2);
t2822 = xDP(1);
t2567 = t2754 * t2822 + t2757 * t2821;
t2808 = sin(qJ(2,3));
t2793 = sin(pkin(7));
t3149 = pkin(3) * t2793;
t2617 = pkin(1) * t2808 - t3149;
t2845 = pkin(3) ^ 2;
t2846 = pkin(2) ^ 2;
t2775 = -t2845 + t2846;
t2621 = t2775 * t2821;
t2622 = t2775 * t2822;
t3058 = t2793 * t2808;
t2656 = pkin(1) * t3058 - pkin(3);
t3218 = 0.2e1 * pkin(2) * pkin(3);
t2997 = t2793 * t3218;
t2659 = t2821 * t2997;
t2660 = t2822 * t2997;
t3146 = pkin(3) * t2821;
t2690 = t2793 * t3146;
t2664 = pkin(1) * t2690;
t3145 = pkin(3) * t2822;
t2691 = t2793 * t3145;
t2665 = pkin(1) * t2691;
t2796 = qJ(3,3) + pkin(5);
t2776 = pkin(6) + t2796;
t2809 = sin(qJ(1,3));
t2694 = t2809 * t2776;
t2770 = pkin(2) * t2821;
t2722 = pkin(1) * t2770;
t2771 = pkin(2) * t2822;
t2723 = pkin(1) * t2771;
t2814 = cos(qJ(2,3));
t2789 = t2814 ^ 2;
t2815 = cos(qJ(1,3));
t3004 = pkin(3) * t3058;
t2944 = -0.2e1 * t3004;
t2653 = pkin(1) + t2944;
t3062 = t2776 * t2815;
t2906 = t2653 * t2809 - t3062;
t2885 = t2906 * t2822;
t2886 = t2906 * t2821;
t2820 = xDP(3);
t3046 = t2815 * t2820;
t2794 = cos(pkin(7));
t2779 = t2794 ^ 2;
t3059 = t2779 * t2845;
t2962 = (t3046 + (-t2754 * t2821 + t2757 * t2822) * t2809) * t3059;
t2963 = t2820 * (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t2966 = t2808 * t3062;
t3016 = 0.2e1 * t3059;
t3148 = pkin(3) * t2794;
t3025 = 0.2e1 * t3148;
t3026 = 0.2e1 * t2771;
t3027 = 0.2e1 * t2770;
t3053 = t2809 * t2822;
t3038 = pkin(2) * t3053 + t2690;
t3043 = t2820 * (t2653 * t2815 + t2694);
t3054 = t2809 * t2821;
t3147 = pkin(3) * t2820;
t2480 = (0.2e1 * t2962 + (t3038 * t2757 + (-pkin(2) * t3054 + t2691) * t2754 + pkin(2) * t3046) * t3025 + (t2622 * t2809 + t2659) * t2757 + (-t2621 * t2809 + t2660) * t2754 + t2815 * t2963) * t2789 + (t2808 * t2567 * t3016 + ((t2808 * t3027 + t2885) * t2757 + (t2808 * t3026 - t2886) * t2754 + t3043) * t3148 + (pkin(2) * t2885 + t2621 * t2808 + t2664) * t2757 + (-pkin(2) * t2886 + t2622 * t2808 + t2665) * t2754 + pkin(2) * t3043) * t2814 - t2962 + t2567 * t2617 * t3148 + (t2722 * t2808 + (-t2656 * t3053 + (t2822 * t2966 - t2770) * t2793) * pkin(3)) * t2757 + (t2723 * t2808 + (t2656 * t3054 + (-t2821 * t2966 - t2771) * t2793) * pkin(3)) * t2754 - (t2656 * t2815 + t2694 * t3058) * t3147;
t2693 = t2794 * t3145;
t2715 = pkin(2) + t3148;
t2925 = t2715 * t2821;
t2998 = t2793 * t3147;
t3039 = t2693 + t2771;
t3040 = t2794 * t3146 + t2770;
t2507 = ((t2809 * t2693 + t3038) * t2757 + (-t2809 * t2925 + t2691) * t2754 + t2715 * t3046) * t2814 + ((-t2809 * t2691 + t3040) * t2757 + (t2809 * t2690 + t3039) * t2754 - t2815 * t2998) * t2808;
t3003 = t2809 * t3149;
t3007 = t2757 * t3149;
t3068 = t2754 * t2809;
t3074 = t2715 * t2757;
t2522 = (-t2715 * t3068 + t3007) * t2814 + (t2754 * t3003 + t3074) * t2808;
t3010 = t2754 * t3149;
t3065 = t2757 * t2809;
t3077 = t2715 * t2754;
t2525 = (t2715 * t3065 + t3010) * t2814 + t2808 * (-t2757 * t3003 + t3077);
t3209 = -t2715 * t2814 + t3004;
t2552 = 0.1e1 / t3209;
t3028 = t2845 + t2846;
t2720 = pkin(2) * t3148;
t3200 = 0.2e1 * t2720;
t2620 = t3200 + t3028;
t2745 = 0.1e1 / t2776;
t2746 = 0.1e1 / t2776 ^ 2;
t2760 = t2814 * pkin(2);
t2805 = xDDP(3);
t2806 = xDDP(2);
t2807 = xDDP(1);
t2553 = 0.1e1 / t3209 ^ 2;
t2747 = t2745 * t2746;
t3116 = t2480 * t2507;
t2987 = t2747 * t3116;
t2930 = t2553 * t2987;
t2785 = qJ(2,3) + pkin(7);
t2733 = cos(t2785);
t2614 = pkin(3) * t2733 + t2760;
t2585 = 0.1e1 / t2614 ^ 2;
t3092 = t2567 ^ 2 * t2585;
t3104 = t2507 * t2552;
t3160 = pkin(1) * t2507;
t2468 = -t2930 + (t2815 * t2805 + t2620 / (t2760 + (t2794 * t2814 - t3058) * pkin(3)) * t3092 - (t2522 * t2806 + t2525 * t2807 + (t2507 * t3209 + t2480 - t3160) * t2746 * t3104) * t2552) * t2745;
t2465 = t2468 * pkin(1);
t3221 = 0.2e1 * t2465;
t2803 = legFrame(2,2);
t2755 = sin(t2803);
t2758 = cos(t2803);
t2568 = t2755 * t2822 + t2758 * t2821;
t2810 = sin(qJ(2,2));
t2618 = pkin(1) * t2810 - t3149;
t3057 = t2793 * t2810;
t2657 = pkin(1) * t3057 - pkin(3);
t2797 = qJ(3,2) + pkin(5);
t2777 = pkin(6) + t2797;
t2811 = sin(qJ(1,2));
t2695 = t2811 * t2777;
t2816 = cos(qJ(2,2));
t2790 = t2816 ^ 2;
t2817 = cos(qJ(1,2));
t3002 = pkin(3) * t3057;
t2943 = -0.2e1 * t3002;
t2654 = pkin(1) + t2943;
t3061 = t2777 * t2817;
t2905 = t2654 * t2811 - t3061;
t2883 = t2905 * t2822;
t2884 = t2905 * t2821;
t3045 = t2817 * t2820;
t2961 = (t3045 + (-t2755 * t2821 + t2758 * t2822) * t2811) * t3059;
t2965 = t2810 * t3061;
t3050 = t2811 * t2822;
t3037 = pkin(2) * t3050 + t2690;
t3042 = t2820 * (t2654 * t2817 + t2695);
t3051 = t2811 * t2821;
t2481 = (0.2e1 * t2961 + (t3037 * t2758 + (-pkin(2) * t3051 + t2691) * t2755 + pkin(2) * t3045) * t3025 + (t2622 * t2811 + t2659) * t2758 + (-t2621 * t2811 + t2660) * t2755 + t2817 * t2963) * t2790 + (t2810 * t2568 * t3016 + ((t2810 * t3027 + t2883) * t2758 + (t2810 * t3026 - t2884) * t2755 + t3042) * t3148 + (pkin(2) * t2883 + t2621 * t2810 + t2664) * t2758 + (-pkin(2) * t2884 + t2622 * t2810 + t2665) * t2755 + pkin(2) * t3042) * t2816 - t2961 + t2568 * t2618 * t3148 + (t2722 * t2810 + (-t2657 * t3050 + (t2822 * t2965 - t2770) * t2793) * pkin(3)) * t2758 + (t2723 * t2810 + (t2657 * t3051 + (-t2821 * t2965 - t2771) * t2793) * pkin(3)) * t2755 - (t2657 * t2817 + t2695 * t3057) * t3147;
t2508 = ((t2811 * t2693 + t3037) * t2758 + (-t2811 * t2925 + t2691) * t2755 + t2715 * t3045) * t2816 + ((-t2811 * t2691 + t3040) * t2758 + (t2811 * t2690 + t3039) * t2755 - t2817 * t2998) * t2810;
t3001 = t2811 * t3149;
t3006 = t2758 * t3149;
t3067 = t2755 * t2811;
t3073 = t2715 * t2758;
t2523 = (-t2715 * t3067 + t3006) * t2816 + (t2755 * t3001 + t3073) * t2810;
t3009 = t2755 * t3149;
t3064 = t2758 * t2811;
t3076 = t2715 * t2755;
t2526 = (t2715 * t3064 + t3009) * t2816 + t2810 * (-t2758 * t3001 + t3076);
t3210 = -t2715 * t2816 + t3002;
t2555 = 0.1e1 / t3210;
t2748 = 0.1e1 / t2777;
t2749 = 0.1e1 / t2777 ^ 2;
t2761 = t2816 * pkin(2);
t2556 = 0.1e1 / t3210 ^ 2;
t2750 = t2748 * t2749;
t3115 = t2481 * t2508;
t2986 = t2750 * t3115;
t2928 = t2556 * t2986;
t2786 = qJ(2,2) + pkin(7);
t2734 = cos(t2786);
t2615 = pkin(3) * t2734 + t2761;
t2587 = 0.1e1 / t2615 ^ 2;
t3091 = t2568 ^ 2 * t2587;
t3103 = t2508 * t2555;
t3159 = pkin(1) * t2508;
t2469 = -t2928 + (t2817 * t2805 + t2620 / (t2761 + (t2794 * t2816 - t3057) * pkin(3)) * t3091 - (t2523 * t2806 + t2526 * t2807 + (t2508 * t3210 + t2481 - t3159) * t2749 * t3103) * t2555) * t2748;
t2466 = t2469 * pkin(1);
t3220 = 0.2e1 * t2466;
t2804 = legFrame(1,2);
t2756 = sin(t2804);
t2759 = cos(t2804);
t2569 = t2756 * t2822 + t2759 * t2821;
t2812 = sin(qJ(2,1));
t2619 = pkin(1) * t2812 - t3149;
t3056 = t2793 * t2812;
t2658 = pkin(1) * t3056 - pkin(3);
t2798 = qJ(3,1) + pkin(5);
t2778 = pkin(6) + t2798;
t2813 = sin(qJ(1,1));
t2696 = t2813 * t2778;
t2818 = cos(qJ(2,1));
t2791 = t2818 ^ 2;
t2819 = cos(qJ(1,1));
t3000 = pkin(3) * t3056;
t2942 = -0.2e1 * t3000;
t2655 = pkin(1) + t2942;
t3060 = t2778 * t2819;
t2904 = t2655 * t2813 - t3060;
t2881 = t2904 * t2822;
t2882 = t2904 * t2821;
t3044 = t2819 * t2820;
t2960 = (t3044 + (-t2756 * t2821 + t2759 * t2822) * t2813) * t3059;
t2964 = t2812 * t3060;
t3047 = t2813 * t2822;
t3036 = pkin(2) * t3047 + t2690;
t3041 = t2820 * (t2655 * t2819 + t2696);
t3048 = t2813 * t2821;
t2482 = (0.2e1 * t2960 + (t3036 * t2759 + (-pkin(2) * t3048 + t2691) * t2756 + pkin(2) * t3044) * t3025 + (t2622 * t2813 + t2659) * t2759 + (-t2621 * t2813 + t2660) * t2756 + t2819 * t2963) * t2791 + (t2812 * t2569 * t3016 + ((t2812 * t3027 + t2881) * t2759 + (t2812 * t3026 - t2882) * t2756 + t3041) * t3148 + (pkin(2) * t2881 + t2621 * t2812 + t2664) * t2759 + (-pkin(2) * t2882 + t2622 * t2812 + t2665) * t2756 + pkin(2) * t3041) * t2818 - t2960 + t2569 * t2619 * t3148 + (t2722 * t2812 + (-t2658 * t3047 + (t2822 * t2964 - t2770) * t2793) * pkin(3)) * t2759 + (t2723 * t2812 + (t2658 * t3048 + (-t2821 * t2964 - t2771) * t2793) * pkin(3)) * t2756 - (t2658 * t2819 + t2696 * t3056) * t3147;
t2509 = ((t2813 * t2693 + t3036) * t2759 + (-t2813 * t2925 + t2691) * t2756 + t2715 * t3044) * t2818 + ((-t2813 * t2691 + t3040) * t2759 + (t2813 * t2690 + t3039) * t2756 - t2819 * t2998) * t2812;
t2999 = t2813 * t3149;
t3005 = t2759 * t3149;
t3066 = t2756 * t2813;
t3072 = t2715 * t2759;
t2524 = (-t2715 * t3066 + t3005) * t2818 + (t2756 * t2999 + t3072) * t2812;
t3008 = t2756 * t3149;
t3063 = t2759 * t2813;
t3075 = t2715 * t2756;
t2527 = (t2715 * t3063 + t3008) * t2818 + t2812 * (-t2759 * t2999 + t3075);
t3211 = -t2715 * t2818 + t3000;
t2558 = 0.1e1 / t3211;
t2751 = 0.1e1 / t2778;
t2752 = 0.1e1 / t2778 ^ 2;
t2762 = t2818 * pkin(2);
t2559 = 0.1e1 / t3211 ^ 2;
t2753 = t2751 * t2752;
t3114 = t2482 * t2509;
t2985 = t2753 * t3114;
t2926 = t2559 * t2985;
t2788 = qJ(2,1) + pkin(7);
t2735 = cos(t2788);
t2616 = pkin(3) * t2735 + t2762;
t2589 = 0.1e1 / t2616 ^ 2;
t3090 = t2569 ^ 2 * t2589;
t3102 = t2509 * t2558;
t3134 = t2509 * pkin(1);
t2470 = -t2926 + (t2819 * t2805 + t2620 / (t2762 + (t2794 * t2818 - t3056) * pkin(3)) * t3090 - (t2524 * t2806 + t2527 * t2807 + (t2509 * t3211 + t2482 - t3134) * t2752 * t3102) * t2558) * t2751;
t2467 = t2470 * pkin(1);
t3219 = 0.2e1 * t2467;
t2763 = g(3) * t2809;
t2716 = t2754 * g(2);
t3133 = t2757 * g(1);
t2924 = -t3133 + t2716;
t2543 = t2924 * t2815 + t2763;
t2764 = g(3) * t2811;
t2717 = t2755 * g(2);
t3132 = t2758 * g(1);
t2923 = -t3132 + t2717;
t2544 = t2923 * t2817 + t2764;
t2765 = g(3) * t2813;
t2718 = t2756 * g(2);
t3131 = t2759 * g(1);
t2922 = -t3131 + t2718;
t2545 = t2922 * t2819 + t2765;
t2574 = pkin(1) + t2614;
t2575 = pkin(1) + t2615;
t2576 = pkin(1) + t2616;
t2504 = t2507 ^ 2;
t3217 = t2553 * t2504 * t2747;
t2505 = t2508 ^ 2;
t3216 = t2556 * t2505 * t2750;
t2506 = t2509 ^ 2;
t3215 = t2559 * t2506 * t2753;
t3214 = -pkin(5) * t3090 + t2545 + t3219;
t3213 = -pkin(5) * t3091 + t2544 + t3220;
t3212 = -pkin(5) * t3092 + t2543 + t3221;
t2721 = pkin(1) * t3149;
t2887 = t2775 + t3016 + t3200;
t2533 = t2887 * t2812 + t2721;
t2935 = pkin(1) * t2813 - t3060;
t2542 = t2813 * t2942 + t2935;
t2795 = t2846 / 0.2e1;
t3035 = t2720 + t2795;
t2573 = (t2779 - 0.1e1 / 0.2e1) * t2845 + t3035;
t3017 = 0.2e1 * t2791;
t3015 = pkin(3) * (t2779 - 0.1e1);
t3150 = pkin(3) * (t2813 * t3015 + t2935 * t3056);
t2500 = (t2573 * t3063 + t2715 * t3008) * t3017 + (t2533 * t2756 + t2542 * t3072) * t2818 - t2759 * t3150 + t2619 * t3075;
t3108 = t2500 * t2807;
t2499 = (-t2573 * t3066 + t2715 * t3005) * t3017 + (t2533 * t2759 - t2542 * t3075) * t2818 + t2756 * t3150 + t2619 * t3072;
t3109 = t2499 * t2806;
t2907 = t3108 + t3109;
t3130 = t2845 * pkin(2);
t2719 = pkin(2) * t2795 + t3130;
t2836 = 0.2e1 * qJ(2,1);
t2783 = pkin(7) + t2836;
t2726 = sin(t2783);
t2830 = 0.2e1 * pkin(7);
t2787 = t2836 + t2830;
t3144 = pkin(3) * t2846;
t2941 = -0.2e1 * pkin(3) * t2845 - 0.4e1 * t3144;
t3023 = -0.2e1 * t3130;
t3024 = -0.2e1 * t3144;
t2588 = 0.1e1 / t2616;
t3087 = t2569 * t2588;
t3195 = -0.4e1 * t2818;
t3201 = -0.4e1 * pkin(1) * (t2845 / 0.2e1 + t3035);
t2988 = (-(t2726 * t3218 + sin(t2787) * t2845 + sin(t2836) * t2846) * t3102 + (cos(qJ(2,1) + t2830) * t3023 + cos(-pkin(7) + qJ(2,1)) * t3024 + t2941 * t2735 + t2719 * t3195 + t3201) * t3087) * t2589 * t2569;
t2539 = t2576 * t2819 + t2696;
t3099 = t2539 * t2805;
t3208 = -0.4e1 * t2558 * t2907 - 0.2e1 * t2988 + 0.4e1 * t3099;
t2532 = t2887 * t2810 + t2721;
t2936 = pkin(1) * t2811 - t3061;
t2541 = t2811 * t2943 + t2936;
t3018 = 0.2e1 * t2790;
t3151 = pkin(3) * (t2811 * t3015 + t2936 * t3057);
t2498 = (t2573 * t3064 + t2715 * t3009) * t3018 + (t2532 * t2755 + t2541 * t3073) * t2816 - t2758 * t3151 + t2618 * t3076;
t3110 = t2498 * t2807;
t2497 = (-t2573 * t3067 + t2715 * t3006) * t3018 + (t2532 * t2758 - t2541 * t3076) * t2816 + t2755 * t3151 + t2618 * t3073;
t3111 = t2497 * t2806;
t2908 = t3110 + t3111;
t2834 = 0.2e1 * qJ(2,2);
t2782 = pkin(7) + t2834;
t2725 = sin(t2782);
t2780 = t2830 + t2834;
t2586 = 0.1e1 / t2615;
t3088 = t2568 * t2586;
t3196 = -0.4e1 * t2816;
t2989 = (-(t2725 * t3218 + sin(t2780) * t2845 + sin(t2834) * t2846) * t3103 + (cos(qJ(2,2) + t2830) * t3023 + cos(-pkin(7) + qJ(2,2)) * t3024 + t2941 * t2734 + t2719 * t3196 + t3201) * t3088) * t2587 * t2568;
t2538 = t2575 * t2817 + t2695;
t3100 = t2538 * t2805;
t3207 = -0.4e1 * t2555 * t2908 - 0.2e1 * t2989 + 0.4e1 * t3100;
t2531 = t2887 * t2808 + t2721;
t2937 = pkin(1) * t2809 - t3062;
t2540 = t2809 * t2944 + t2937;
t3019 = 0.2e1 * t2789;
t3152 = pkin(3) * (t2809 * t3015 + t2937 * t3058);
t2496 = (t2573 * t3065 + t2715 * t3010) * t3019 + (t2531 * t2754 + t2540 * t3074) * t2814 - t2757 * t3152 + t2617 * t3077;
t3112 = t2496 * t2807;
t2495 = (-t2573 * t3068 + t2715 * t3007) * t3019 + (t2531 * t2757 - t2540 * t3077) * t2814 + t2754 * t3152 + t2617 * t3074;
t3113 = t2495 * t2806;
t2909 = t3112 + t3113;
t2832 = 0.2e1 * qJ(2,3);
t2781 = pkin(7) + t2832;
t2724 = sin(t2781);
t2784 = t2832 + t2830;
t2584 = 0.1e1 / t2614;
t3089 = t2567 * t2584;
t3197 = -0.4e1 * t2814;
t2990 = (-(t2724 * t3218 + sin(t2784) * t2845 + sin(t2832) * t2846) * t3104 + (cos(qJ(2,3) + t2830) * t3023 + cos(-pkin(7) + qJ(2,3)) * t3024 + t2941 * t2733 + t2719 * t3197 + t3201) * t3089) * t2585 * t2567;
t2537 = t2574 * t2815 + t2694;
t3101 = t2537 * t2805;
t3206 = -0.4e1 * t2552 * t2909 - 0.2e1 * t2990 + 0.4e1 * t3101;
t3205 = 0.2e1 * pkin(1);
t3098 = t2552 * t2745;
t2921 = t2507 * t3089 * t3098;
t2492 = pkin(1) * t2921;
t2727 = sin(t2785);
t3155 = pkin(2) * t2808;
t2519 = ((pkin(3) * t2727 + t3155) * t3092 + t2754 * t2807 + t2757 * t2806) * t2584;
t3187 = t2519 / 0.2e1;
t2489 = pkin(5) * t3187 - t2492;
t3204 = -0.2e1 * t2489;
t3096 = t2555 * t2748;
t2919 = t2508 * t3088 * t3096;
t2493 = pkin(1) * t2919;
t2728 = sin(t2786);
t3154 = pkin(2) * t2810;
t2520 = ((pkin(3) * t2728 + t3154) * t3091 + t2755 * t2807 + t2758 * t2806) * t2586;
t3186 = t2520 / 0.2e1;
t2490 = pkin(5) * t3186 - t2493;
t3203 = -0.2e1 * t2490;
t3094 = t2558 * t2751;
t2917 = t2509 * t3087 * t3094;
t2494 = pkin(1) * t2917;
t2729 = sin(t2788);
t3153 = pkin(2) * t2812;
t2521 = ((pkin(3) * t2729 + t3153) * t3090 + t2756 * t2807 + t2759 * t2806) * t2588;
t3185 = t2521 / 0.2e1;
t2491 = pkin(5) * t3185 - t2494;
t3202 = -0.2e1 * t2491;
t3199 = -0.2e1 * t2793;
t3198 = 0.2e1 * t2794;
t3194 = -pkin(5) / 0.2e1;
t3193 = -g(1) / 0.4e1;
t3192 = g(1) / 0.4e1;
t3191 = -g(2) / 0.4e1;
t3190 = g(2) / 0.4e1;
t3189 = g(3) / 0.2e1;
t2703 = t2802 + t2785;
t2678 = qJ(1,3) + t2703;
t3184 = sin(t2678) / 0.4e1;
t2704 = -t2802 + t2785;
t2679 = qJ(1,3) - t2704;
t2630 = sin(t2679);
t3183 = -t2630 / 0.4e1;
t2681 = qJ(1,3) - t2703;
t2632 = sin(t2681);
t3182 = -t2632 / 0.4e1;
t2705 = t2803 + t2786;
t2682 = qJ(1,2) + t2705;
t3181 = sin(t2682) / 0.4e1;
t2707 = t2804 + t2788;
t2684 = qJ(1,1) + t2707;
t3180 = sin(t2684) / 0.4e1;
t2706 = -t2803 + t2786;
t2686 = qJ(1,2) - t2706;
t2637 = sin(t2686);
t3179 = -t2637 / 0.4e1;
t2687 = qJ(1,2) - t2705;
t2638 = sin(t2687);
t3178 = -t2638 / 0.4e1;
t2708 = -t2804 + t2788;
t2688 = qJ(1,1) - t2708;
t2639 = sin(t2688);
t3177 = -t2639 / 0.4e1;
t2689 = qJ(1,1) - t2707;
t2640 = sin(t2689);
t3176 = -t2640 / 0.4e1;
t3175 = -cos(t2679) / 0.4e1;
t2680 = qJ(1,3) + t2704;
t3174 = -cos(t2680) / 0.4e1;
t2683 = qJ(1,2) + t2706;
t3173 = -cos(t2683) / 0.4e1;
t2685 = qJ(1,1) + t2708;
t3172 = -cos(t2685) / 0.4e1;
t3171 = -cos(t2686) / 0.4e1;
t3170 = -cos(t2688) / 0.4e1;
t3169 = sin(t2704) / 0.2e1;
t3168 = sin(t2706) / 0.2e1;
t3167 = sin(t2708) / 0.2e1;
t3166 = t2727 / 0.4e1;
t3165 = t2728 / 0.4e1;
t3164 = t2729 / 0.4e1;
t3163 = t2733 / 0.4e1;
t3162 = t2734 / 0.4e1;
t3161 = t2735 / 0.4e1;
t3158 = pkin(2) * t2468;
t3157 = pkin(2) * t2469;
t3156 = pkin(2) * t2470;
t3143 = pkin(5) * t2468;
t3142 = pkin(5) * t2469;
t3141 = pkin(5) * t2470;
t2737 = qJ(1,3) - t2785;
t3140 = g(3) * sin(t2737);
t2739 = qJ(1,2) - t2786;
t3139 = g(3) * sin(t2739);
t2741 = qJ(1,1) - t2788;
t3138 = g(3) * sin(t2741);
t3137 = g(3) * cos(t2737);
t3136 = g(3) * cos(t2739);
t3135 = g(3) * cos(t2741);
t2472 = (t3160 - t2480 / 0.2e1) * t3098;
t2823 = -0.4e1 * pkin(5) - (4 * pkin(6));
t2837 = (qJ(3,3) ^ 2);
t2840 = 2 * pkin(6);
t2843 = pkin(5) ^ 2;
t2894 = -0.2e1 * pkin(1) ^ 2 - 0.2e1 * t2843 - t3028 + (-0.4e1 * pkin(5) - (2 * pkin(6))) * pkin(6);
t2940 = 0.2e1 * t2776 * t3089;
t2841 = 0.2e1 * pkin(5);
t3031 = t2841 + (2 * qJ(3,3));
t2730 = cos(t2781);
t3034 = t2730 + t2794;
t3128 = ((0.4e1 * t2472 * t2733 + t2727 * t2940) * pkin(3) + (-t2472 * t3197 + t2808 * t2940) * pkin(2) - (t2480 * t3205 + (-t2845 * cos(t2784) - t2846 * cos(t2832) + t2823 * qJ(3,3) - (2 * t2837) - t3034 * t3218 + t2894) * t2507) * t3098) / (t2840 + t3031);
t2473 = (t3159 - t2481 / 0.2e1) * t3096;
t2838 = (qJ(3,2) ^ 2);
t2939 = 0.2e1 * t2777 * t3088;
t3030 = t2841 + (2 * qJ(3,2));
t2731 = cos(t2782);
t3033 = t2731 + t2794;
t3127 = ((0.4e1 * t2473 * t2734 + t2728 * t2939) * pkin(3) + (-t2473 * t3196 + t2810 * t2939) * pkin(2) - (t2481 * t3205 + (-t2845 * cos(t2780) - t2846 * cos(t2834) + t2823 * qJ(3,2) - (2 * t2838) - t3033 * t3218 + t2894) * t2508) * t3096) / (t2840 + t3030);
t2471 = (t3134 - t2482 / 0.2e1) * t3094;
t2839 = (qJ(3,1) ^ 2);
t2938 = 0.2e1 * t2778 * t3087;
t3029 = t2841 + (2 * qJ(3,1));
t2732 = cos(t2783);
t3032 = t2732 + t2794;
t3126 = ((0.4e1 * t2471 * t2735 + t2729 * t2938) * pkin(3) + (-t2471 * t3195 + t2812 * t2938) * pkin(2) - (t2482 * t3205 + (-t2845 * cos(t2787) - t2846 * cos(t2836) + t2823 * qJ(3,1) - (2 * t2839) - t3032 * t3218 + t2894) * t2509) * t3094) / (t2840 + t3029);
t3125 = t2468 * t2796;
t3124 = t2468 * t2808;
t3123 = t2468 * t2814;
t3122 = t2469 * t2797;
t3121 = t2469 * t2810;
t3120 = t2469 * t2816;
t3119 = t2470 * t2798;
t3118 = t2470 * t2812;
t3117 = t2470 * t2818;
t3097 = t2553 * t2746;
t3095 = t2556 * t2749;
t3093 = t2559 * t2752;
t2577 = g(1) * t2754 + g(2) * t2757;
t3086 = t2577 * t2814;
t2578 = g(1) * t2755 + g(2) * t2758;
t3085 = t2578 * t2816;
t2579 = g(1) * t2756 + g(2) * t2759;
t3084 = t2579 * t2818;
t3083 = t2584 * t2754;
t3082 = t2584 * t2757;
t3081 = t2586 * t2755;
t3080 = t2586 * t2758;
t3079 = t2588 * t2756;
t3078 = t2588 * t2759;
t3055 = t2808 * t2814;
t3052 = t2810 * t2816;
t3049 = t2812 * t2818;
t3013 = pkin(2) * t3089;
t3012 = pkin(2) * t3088;
t3011 = pkin(2) * t3087;
t2996 = t2584 * t3124;
t2995 = t2584 * t3123;
t2994 = t2586 * t3121;
t2993 = t2586 * t3120;
t2992 = t2588 * t3118;
t2991 = t2588 * t3117;
t2984 = t2504 * t3097;
t2983 = t2552 * t3217;
t2982 = t2505 * t3095;
t2981 = t2555 * t3216;
t2980 = t2506 * t3093;
t2979 = t2558 * t3215;
t2978 = t2522 * t3098;
t2977 = t2523 * t3096;
t2976 = t2524 * t3094;
t2975 = t2525 * t3098;
t2974 = t2526 * t3096;
t2973 = t2527 * t3094;
t2972 = t2543 * t3098;
t2971 = t2544 * t3096;
t2970 = t2545 * t3094;
t2766 = g(3) * t2815;
t2546 = -t2809 * t2924 + t2766;
t2969 = t2546 * t3098;
t2767 = g(3) * t2817;
t2547 = -t2811 * t2923 + t2767;
t2968 = t2547 * t3096;
t2768 = g(3) * t2819;
t2548 = -t2813 * t2922 + t2768;
t2967 = t2548 * t3094;
t2959 = t3183 - cos(t2704) / 0.2e1;
t2958 = t2632 / 0.4e1 - cos(t2703) / 0.2e1;
t2957 = t3179 - cos(t2706) / 0.2e1;
t2956 = t2638 / 0.4e1 - cos(t2705) / 0.2e1;
t2955 = t3177 - cos(t2708) / 0.2e1;
t2954 = t2640 / 0.4e1 - cos(t2707) / 0.2e1;
t2644 = cos(t2681);
t2953 = -t2644 / 0.4e1 + t3175;
t2952 = t2644 / 0.4e1 + t3175;
t2650 = cos(t2687);
t2951 = -t2650 / 0.4e1 + t3171;
t2950 = t2650 / 0.4e1 + t3171;
t2652 = cos(t2689);
t2949 = -t2652 / 0.4e1 + t3170;
t2948 = t2652 / 0.4e1 + t3170;
t2947 = -0.2e1 * t3013;
t2946 = -0.2e1 * t3012;
t2945 = -0.2e1 * t3011;
t2934 = t2808 * t3013;
t2933 = t2810 * t3012;
t2932 = t2812 * t3011;
t2931 = t3097 * t3116;
t2929 = t3095 * t3115;
t2927 = t3093 * t3114;
t2474 = 0.2e1 * t2931;
t2475 = 0.2e1 * t2929;
t2476 = 0.2e1 * t2927;
t2920 = t2574 * t2930;
t2918 = t2575 * t2928;
t2916 = t2576 * t2926;
t2631 = sin(t2680);
t2641 = cos(t2678);
t2736 = qJ(1,3) + t2785;
t2915 = g(1) * t3174 + g(2) * t3184 + t2631 * t3191 + t2641 * t3193 + sin(t2736) * t3189;
t2634 = sin(t2683);
t2645 = cos(t2682);
t2738 = qJ(1,2) + t2786;
t2914 = g(1) * t3173 + g(2) * t3181 + t2634 * t3191 + t2645 * t3193 + sin(t2738) * t3189;
t2636 = sin(t2685);
t2647 = cos(t2684);
t2740 = qJ(1,1) + t2788;
t2913 = g(1) * t3172 + g(2) * t3180 + t2636 * t3191 + t2647 * t3193 + sin(t2740) * t3189;
t2912 = g(1) * t3184 + g(2) * t3174 + t2631 * t3192 + t2641 * t3190 + cos(t2736) * t3189;
t2911 = g(1) * t3181 + g(2) * t3173 + t2634 * t3192 + t2645 * t3190 + cos(t2738) * t3189;
t2910 = g(1) * t3180 + g(2) * t3172 + t2636 * t3192 + t2647 * t3190 + cos(t2740) * t3189;
t2900 = -0.2e1 * t2921;
t2899 = -0.2e1 * t2919;
t2898 = -0.2e1 * t2917;
t2897 = t2584 * t2984 * t3055;
t2896 = t2586 * t2982 * t3052;
t2895 = t2588 * t2980 * t3049;
t2510 = t2519 * t2808 + t2814 * t3092;
t2512 = t2520 * t2810 + t2816 * t3091;
t2514 = t2521 * t2812 + t2818 * t3090;
t2501 = pkin(1) * t2982;
t2890 = g(1) * t3064 - g(2) * t3067 + t2501 + t2767;
t2502 = pkin(1) * t2984;
t2889 = g(1) * t3065 - g(2) * t3068 + t2502 + t2766;
t2503 = pkin(1) * t2980;
t2888 = g(1) * t3063 - g(2) * t3066 + t2503 + t2768;
t2880 = -t3101 + t2990 / 0.2e1;
t2879 = -t3100 + t2989 / 0.2e1;
t2878 = -t3099 + t2988 / 0.2e1;
t2877 = t2468 * t2793 + t2794 * t2900;
t2876 = -t2468 * t2794 + t2793 * t2900;
t2875 = t2469 * t2793 + t2794 * t2899;
t2874 = -t2469 * t2794 + t2793 * t2899;
t2873 = t2470 * t2793 + t2794 * t2898;
t2872 = -t2470 * t2794 + t2793 * t2898;
t2871 = -0.4e1 * t2796 * t3092 + 0.4e1 * t2920 + 0.4e1 * t3221;
t2870 = -0.4e1 * t2797 * t3091 + 0.4e1 * t2918 + 0.4e1 * t3220;
t2869 = -0.4e1 * t2798 * t3090 + 0.4e1 * t2916 + 0.4e1 * t3219;
t2868 = -t2754 * t2996 - t2755 * t2994 - t2756 * t2992;
t2867 = -t2757 * t2996 - t2758 * t2994 - t2759 * t2992;
t2826 = pkin(1) * g(3);
t2670 = sin(t2707);
t2668 = sin(t2705);
t2666 = sin(t2703);
t2515 = t2521 * t2818 - t2812 * t3090;
t2513 = t2520 * t2816 - t2810 * t3091;
t2511 = t2519 * t2814 - t2808 * t3092;
t2488 = -0.4e1 * t2521 * t2798 + 0.8e1 * t2494;
t2487 = -0.4e1 * t2520 * t2797 + 0.8e1 * t2493;
t2486 = -0.4e1 * t2519 * t2796 + 0.8e1 * t2492;
t2485 = (-0.2e1 * t2791 + 0.1e1) * t2980;
t2484 = (-0.2e1 * t2790 + 0.1e1) * t2982;
t2483 = (-0.2e1 * t2789 + 0.1e1) * t2984;
t2464 = t2888 - t3141;
t2463 = t2889 - t3143;
t2462 = t2890 - t3142;
t2461 = (t2818 * t2898 + t3118) * t2812;
t2460 = (t2816 * t2899 + t3121) * t2810;
t2459 = (t2814 * t2900 + t3124) * t2808;
t2458 = t2464 * t2818 + t2579 * t2812;
t2457 = t2464 * t2812 - t3084;
t2456 = t2463 * t2814 + t2577 * t2808;
t2455 = t2463 * t2808 - t3086;
t2454 = t2462 * t2816 + t2578 * t2810;
t2453 = t2462 * t2810 - t3085;
t2452 = t2812 * t3202 + t2818 * t3214;
t2451 = -t2812 * t3214 + t2818 * t3202;
t2450 = t2810 * t3203 + t2816 * t3213;
t2449 = -t2810 * t3213 + t2816 * t3203;
t2448 = t2808 * t3204 + t2814 * t3212;
t2447 = -t2808 * t3212 + t2814 * t3204;
t2446 = 0.2e1 * t2470 * t3049 - (0.4e1 * t2791 - 0.2e1) * t2917;
t2445 = 0.2e1 * t2469 * t3052 - (0.4e1 * t2790 - 0.2e1) * t2919;
t2444 = 0.2e1 * t2468 * t3055 - (0.4e1 * t2789 - 0.2e1) * t2921;
t2440 = -t2514 * pkin(2) + t3029 * t2470 + t2476 - t2548;
t2439 = -t2512 * pkin(2) + t3030 * t2469 + t2475 - t2547;
t2438 = -t2510 * pkin(2) + t3031 * t2468 + t2474 - t2546;
t2437 = 0.4e1 * t2503 - 0.8e1 * t2927 - 0.4e1 * t3119;
t2436 = 0.4e1 * t2502 - 0.8e1 * t2931 - 0.4e1 * t3125;
t2435 = 0.4e1 * t2501 - 0.8e1 * t2929 - 0.4e1 * t3122;
t2434 = (-t3119 + (t2506 * t2762 - 0.2e1 * t3114) * t3093 + t2888) * t2812 - t3084 + t2521 * pkin(2);
t2433 = (-t3122 + (t2505 * t2761 - 0.2e1 * t3115) * t3095 + t2890) * t2810 - t3085 + t2520 * pkin(2);
t2432 = (-t3125 + (t2504 * t2760 - 0.2e1 * t3116) * t3097 + t2889) * t2808 - t3086 + t2519 * pkin(2);
t2431 = -t3138 / 0.2e1 + t2437 * t3164 + (t2521 * t3198 + t2726 * t2980) * pkin(2) + (t2954 + t2955) * g(2) + (t3167 - t2670 / 0.2e1 - t2949) * g(1) + t2913;
t2430 = -t3139 / 0.2e1 + t2435 * t3165 + (t2520 * t3198 + t2725 * t2982) * pkin(2) + (t2956 + t2957) * g(2) + (t3168 - t2668 / 0.2e1 - t2951) * g(1) + t2914;
t2429 = -t3140 / 0.2e1 + t2436 * t3166 + (t2519 * t3198 + t2724 * t2984) * pkin(2) + (t2958 + t2959) * g(2) + (t3169 - t2666 / 0.2e1 - t2953) * g(1) + t2915;
t2428 = t3135 / 0.2e1 + t2437 * t3161 + (t2521 * t3199 + t2732 * t2980) * pkin(2) + (t3167 + t2670 / 0.2e1 - t2948) * g(2) + (t2954 - t2955) * g(1) + t2910;
t2427 = t3136 / 0.2e1 + t2435 * t3162 + (t2520 * t3199 + t2731 * t2982) * pkin(2) + (t3168 + t2668 / 0.2e1 - t2950) * g(2) + (t2956 - t2957) * g(1) + t2911;
t2426 = t3137 / 0.2e1 + t2436 * t3163 + (t2519 * t3199 + t2730 * t2984) * pkin(2) + (t3169 + t2666 / 0.2e1 - t2952) * g(2) + (t2958 - t2959) * g(1) + t2912;
t2425 = -t2872 * t2812 + t2873 * t2818;
t2424 = -t2874 * t2810 + t2875 * t2816;
t2423 = -t2876 * t2808 + t2877 * t2814;
t2422 = t2812 * t2873 + t2872 * t2818;
t2421 = t2810 * t2875 + t2874 * t2816;
t2420 = t2808 * t2877 + t2876 * t2814;
t2419 = -pkin(2) * t3117 - t2467 + (-t2506 * t2752 * t2798 - t2576 * t2985) * t2559 + (-((0.2e1 * t2932 - t3126) * t2509 + t2907) * t2558 - t2878) * t2751 - t2545;
t2418 = -pkin(2) * t3120 - t2466 + (-t2505 * t2749 * t2797 - t2575 * t2986) * t2556 + (-((0.2e1 * t2933 - t3127) * t2508 + t2908) * t2555 - t2879) * t2748 - t2544;
t2417 = -pkin(2) * t3123 - t2465 + (-t2504 * t2746 * t2796 - t2574 * t2987) * t2553 + (-((0.2e1 * t2934 - t3128) * t2507 + t2909) * t2552 - t2880) * t2745 - t2543;
t2416 = t3138 / 0.2e1 + t2869 * t3161 + t2488 * t3164 + (t3176 + t2639 / 0.4e1) * g(2) + t2949 * g(1) + t3032 * t3156 + (-t3208 * t3161 - (t2726 * t2945 + t2735 * t3126) * t3102) * t2751 + t2913;
t2415 = t3139 / 0.2e1 + t2870 * t3162 + t2487 * t3165 + (t3178 + t2637 / 0.4e1) * g(2) + t2951 * g(1) + t3033 * t3157 + (-t3207 * t3162 - (t2725 * t2946 + t2734 * t3127) * t3103) * t2748 + t2914;
t2414 = t3140 / 0.2e1 + t2871 * t3163 + t2486 * t3166 + (t3182 + t2630 / 0.4e1) * g(2) + t2953 * g(1) + t3034 * t3158 + (-t3206 * t3163 - (t2724 * t2947 + t2733 * t3128) * t3104) * t2745 + t2915;
t2413 = -t3135 / 0.2e1 - t2869 * t2729 / 0.4e1 + t2488 * t3161 + t2948 * g(2) + (t3176 + t3177) * g(1) + (-t2726 - t2793) * t3156 + (t3208 * t3164 - (-t2729 * t3126 + t2732 * t2945) * t3102) * t2751 + t2910;
t2412 = -t3136 / 0.2e1 - t2870 * t2728 / 0.4e1 + t2487 * t3162 + t2950 * g(2) + (t3178 + t3179) * g(1) + (-t2725 - t2793) * t3157 + (t3207 * t3165 - (-t2728 * t3127 + t2731 * t2946) * t3103) * t2748 + t2911;
t2411 = -t3137 / 0.2e1 - t2871 * t2727 / 0.4e1 + t2486 * t3163 + t2952 * g(2) + (t3182 + t3183) * g(1) + (-t2724 - t2793) * t3158 + (t3206 * t3166 - (-t2727 * t3128 + t2730 * t2947) * t3104) * t2745 + t2912;
t2410 = 0.2e1 * ((-t3131 / 0.2e1 + t2718 / 0.2e1) * t2819 + t2467 + t2765 / 0.2e1 + t2916 / 0.2e1 + (t3194 - qJ(3,1) / 0.2e1) * t3090 + (-t3099 / 0.2e1 + t2988 / 0.4e1 - (-t3108 / 0.2e1 - t3109 / 0.2e1 + (-t2932 + t3126 / 0.2e1) * t2509) * t2558) * t2751) * t2762 + (t2922 * pkin(1) - g(3) * t2798) * t2819 + (t2922 * t2798 + t2826) * t2813 - 0.2e1 * (qJ(3,1) * t3185 + t2491) * t3153 + (t2476 + 0.2e1 * t3141) * qJ(3,1) + pkin(5) * t2476 + pkin(1) * (t2916 + t2467 + (-(t2509 * t3126 - t2907) * t2558 + t2878) * t2751) + (t2791 * t2846 + t2839 + t2843) * t2470;
t2409 = 0.2e1 * ((-t3132 / 0.2e1 + t2717 / 0.2e1) * t2817 + t2466 + t2764 / 0.2e1 + t2918 / 0.2e1 + (t3194 - qJ(3,2) / 0.2e1) * t3091 + (-t3100 / 0.2e1 + t2989 / 0.4e1 - (-t3110 / 0.2e1 - t3111 / 0.2e1 + (-t2933 + t3127 / 0.2e1) * t2508) * t2555) * t2748) * t2761 + (t2923 * pkin(1) - g(3) * t2797) * t2817 + (t2923 * t2797 + t2826) * t2811 - 0.2e1 * (qJ(3,2) * t3186 + t2490) * t3154 + (t2475 + 0.2e1 * t3142) * qJ(3,2) + pkin(5) * t2475 + pkin(1) * (t2918 + t2466 + (-(t2508 * t3127 - t2908) * t2555 + t2879) * t2748) + (t2790 * t2846 + t2838 + t2843) * t2469;
t2408 = 0.2e1 * ((-t3133 / 0.2e1 + t2716 / 0.2e1) * t2815 + t2465 + t2763 / 0.2e1 + t2920 / 0.2e1 + (t3194 - qJ(3,3) / 0.2e1) * t3092 + (-t3101 / 0.2e1 + t2990 / 0.4e1 - (-t3112 / 0.2e1 - t3113 / 0.2e1 + (-t2934 + t3128 / 0.2e1) * t2507) * t2552) * t2745) * t2760 + (t2924 * pkin(1) - g(3) * t2796) * t2815 + (t2924 * t2796 + t2826) * t2809 - 0.2e1 * (qJ(3,3) * t3187 + t2489) * t3155 + (t2474 + 0.2e1 * t3143) * qJ(3,3) + pkin(5) * t2474 + pkin(1) * (t2920 + t2465 + (-(t2507 * t3128 - t2909) * t2552 + t2880) * t2745) + (t2789 * t2846 + t2837 + t2843) * t2468;
t1 = [(-t2468 * t2975 - t2469 * t2974 - t2470 * t2973) * MDP(1) + (-t2525 * t2972 - t2526 * t2971 - t2527 * t2970) * MDP(2) + (-t2525 * t2969 - t2526 * t2968 - t2527 * t2967) * MDP(3) + (-t2459 * t2975 - t2460 * t2974 - t2461 * t2973 - t2754 * t2897 - t2755 * t2896 - t2756 * t2895) * MDP(4) + (-t2444 * t2975 - t2445 * t2974 - t2446 * t2973 + t2483 * t3083 + t2484 * t3081 + t2485 * t3079) * MDP(5) + (-t2510 * t2975 - t2512 * t2974 - t2514 * t2973 - t2868) * MDP(6) + (-t2511 * t2975 - t2513 * t2974 - t2515 * t2973 + t2754 * t2995 + t2755 * t2993 + t2756 * t2991) * MDP(7) + (t2519 * t3083 + t2520 * t3081 + t2521 * t3079) * MDP(8) + (-t2448 * t2975 - t2450 * t2974 - t2452 * t2973 + t2453 * t3081 + t2455 * t3083 + t2457 * t3079) * MDP(9) + (-t2447 * t2975 - t2449 * t2974 - t2451 * t2973 + t2454 * t3081 + t2456 * t3083 + t2458 * t3079) * MDP(10) + (t2429 * t3083 + t2430 * t3081 + t2431 * t3079 - (t2416 * t2527 + t2422 * t2500) * t3094 - (t2415 * t2526 + t2421 * t2498) * t3096 - (t2414 * t2525 + t2420 * t2496) * t3098) * MDP(11) + (t2426 * t3083 + t2427 * t3081 + t2428 * t3079 - (t2413 * t2527 + t2425 * t2500) * t3094 - (t2412 * t2526 + t2424 * t2498) * t3096 - (t2411 * t2525 + t2423 * t2496) * t3098) * MDP(12) + (t2868 * pkin(2) - t2438 * t2975 - t2439 * t2974 - t2440 * t2973 + t2496 * t2983 + t2498 * t2981 + t2500 * t2979) * MDP(13) + (-(t2410 * t2527 + t2419 * t2500) * t3094 - (t2409 * t2526 + t2418 * t2498) * t3096 - (t2408 * t2525 + t2417 * t2496) * t3098 + (t2432 * t3083 + t2433 * t3081 + t2434 * t3079) * pkin(2)) * MDP(14) + (t2807 - g(1)) * MDP(15); (-t2468 * t2978 - t2469 * t2977 - t2470 * t2976) * MDP(1) + (-t2522 * t2972 - t2523 * t2971 - t2524 * t2970) * MDP(2) + (-t2522 * t2969 - t2523 * t2968 - t2524 * t2967) * MDP(3) + (-t2459 * t2978 - t2460 * t2977 - t2461 * t2976 - t2757 * t2897 - t2758 * t2896 - t2759 * t2895) * MDP(4) + (-t2444 * t2978 - t2445 * t2977 - t2446 * t2976 + t2483 * t3082 + t2484 * t3080 + t2485 * t3078) * MDP(5) + (-t2510 * t2978 - t2512 * t2977 - t2514 * t2976 - t2867) * MDP(6) + (-t2511 * t2978 - t2513 * t2977 - t2515 * t2976 + t2757 * t2995 + t2758 * t2993 + t2759 * t2991) * MDP(7) + (t2519 * t3082 + t2520 * t3080 + t2521 * t3078) * MDP(8) + (-t2448 * t2978 - t2450 * t2977 - t2452 * t2976 + t2453 * t3080 + t2455 * t3082 + t2457 * t3078) * MDP(9) + (-t2447 * t2978 - t2449 * t2977 - t2451 * t2976 + t2454 * t3080 + t2456 * t3082 + t2458 * t3078) * MDP(10) + (t2429 * t3082 + t2430 * t3080 + t2431 * t3078 - (t2416 * t2524 + t2422 * t2499) * t3094 - (t2415 * t2523 + t2421 * t2497) * t3096 - (t2414 * t2522 + t2420 * t2495) * t3098) * MDP(11) + (t2426 * t3082 + t2427 * t3080 + t2428 * t3078 - (t2413 * t2524 + t2425 * t2499) * t3094 - (t2412 * t2523 + t2424 * t2497) * t3096 - (t2411 * t2522 + t2423 * t2495) * t3098) * MDP(12) + (t2867 * pkin(2) - t2438 * t2978 - t2439 * t2977 - t2440 * t2976 + t2495 * t2983 + t2497 * t2981 + t2499 * t2979) * MDP(13) + (-(t2410 * t2524 + t2419 * t2499) * t3094 - (t2409 * t2523 + t2418 * t2497) * t3096 - (t2408 * t2522 + t2417 * t2495) * t3098 + (t2432 * t3082 + t2433 * t3080 + t2434 * t3078) * pkin(2)) * MDP(14) + (t2806 - g(2)) * MDP(15); (-t2537 * t3217 - t2538 * t3216 - t2539 * t3215) * MDP(13) + (t2805 - g(3)) * MDP(15) + ((t2422 * MDP(11) + t2425 * MDP(12) + t2419 * MDP(14)) * t2539 + (t2470 * MDP(1) + t2451 * MDP(10) + t2416 * MDP(11) + t2413 * MDP(12) + t2440 * MDP(13) + t2410 * MDP(14) + t2545 * MDP(2) + t2548 * MDP(3) + t2461 * MDP(4) + t2446 * MDP(5) + t2514 * MDP(6) + t2515 * MDP(7) + t2452 * MDP(9)) * t2819) * t2751 + ((t2421 * MDP(11) + t2424 * MDP(12) + t2418 * MDP(14)) * t2538 + (t2469 * MDP(1) + t2449 * MDP(10) + t2415 * MDP(11) + t2412 * MDP(12) + t2439 * MDP(13) + t2409 * MDP(14) + t2544 * MDP(2) + t2547 * MDP(3) + t2460 * MDP(4) + t2445 * MDP(5) + t2512 * MDP(6) + t2513 * MDP(7) + t2450 * MDP(9)) * t2817) * t2748 + ((t2420 * MDP(11) + t2423 * MDP(12) + t2417 * MDP(14)) * t2537 + (t2468 * MDP(1) + t2447 * MDP(10) + t2414 * MDP(11) + t2411 * MDP(12) + t2438 * MDP(13) + t2408 * MDP(14) + t2543 * MDP(2) + t2546 * MDP(3) + t2459 * MDP(4) + t2444 * MDP(5) + t2510 * MDP(6) + t2511 * MDP(7) + t2448 * MDP(9)) * t2815) * t2745;];
tauX  = t1;
