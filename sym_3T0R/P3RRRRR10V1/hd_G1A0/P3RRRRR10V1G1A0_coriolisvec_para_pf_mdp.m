% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:09
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G1A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:03:20
% EndTime: 2020-08-06 22:09:03
% DurationCPUTime: 355.23s
% Computational Cost: add. (2872410->1873), mult. (6777396->3356), div. (89226->23), fcn. (5260020->26), ass. (0->1286)
t7628 = sin(qJ(3,1));
t7566 = t7628 * pkin(2);
t7544 = pkin(1) * t7566;
t7629 = sin(qJ(2,1));
t7567 = t7629 * pkin(6);
t7611 = sin(pkin(3));
t7637 = cos(qJ(3,1));
t7638 = cos(qJ(2,1));
t8284 = t7637 * t7638;
t8291 = t7629 * t7637;
t8487 = t7638 * pkin(6);
t7496 = pkin(2) * t8291 - t8487;
t7612 = cos(pkin(3));
t8371 = t7496 * t7612;
t7769 = pkin(1) * t8371 + (-t7544 + (pkin(2) * t8284 + t7567) * pkin(5)) * t7611;
t7419 = 0.1e1 / t7769;
t7625 = sin(qJ(3,2));
t7564 = t7625 * pkin(2);
t7542 = pkin(1) * t7564;
t7626 = sin(qJ(2,2));
t7565 = t7626 * pkin(6);
t7634 = cos(qJ(3,2));
t7635 = cos(qJ(2,2));
t8286 = t7634 * t7635;
t8296 = t7626 * t7634;
t8488 = t7635 * pkin(6);
t7495 = pkin(2) * t8296 - t8488;
t8372 = t7495 * t7612;
t7770 = pkin(1) * t8372 + (-t7542 + (pkin(2) * t8286 + t7565) * pkin(5)) * t7611;
t7416 = 0.1e1 / t7770;
t7622 = sin(qJ(3,3));
t7562 = t7622 * pkin(2);
t7540 = pkin(1) * t7562;
t7623 = sin(qJ(2,3));
t7563 = t7623 * pkin(6);
t7631 = cos(qJ(3,3));
t7632 = cos(qJ(2,3));
t8288 = t7631 * t7632;
t8301 = t7623 * t7631;
t8489 = t7632 * pkin(6);
t7494 = pkin(2) * t8301 - t8489;
t8373 = t7494 * t7612;
t7771 = pkin(1) * t8373 + (-t7540 + (pkin(2) * t8288 + t7563) * pkin(5)) * t7611;
t7413 = 0.1e1 / t7771;
t7596 = t7632 ^ 2;
t7575 = pkin(1) * t7596;
t8569 = t7563 + pkin(1);
t7500 = t7575 - t8569;
t7846 = t7500 * t7612;
t7602 = t7635 ^ 2;
t7576 = pkin(1) * t7602;
t8568 = t7565 + pkin(1);
t7501 = t7576 - t8568;
t7845 = t7501 * t7612;
t7608 = t7638 ^ 2;
t7577 = pkin(1) * t7608;
t8567 = t7567 + pkin(1);
t7502 = t7577 - t8567;
t7844 = t7502 * t7612;
t8335 = t7611 * t7612;
t7605 = 0.1e1 / t7637;
t7630 = sin(qJ(1,1));
t7639 = cos(qJ(1,1));
t7641 = xDP(2);
t7642 = xDP(1);
t7490 = t7630 * t7641 + t7639 * t7642;
t7493 = -t7630 * t7642 + t7639 * t7641;
t7621 = legFrame(1,3);
t7556 = sin(t7621);
t7559 = cos(t7621);
t7781 = t7490 * t7556 - t7493 * t7559;
t7640 = xDP(3);
t8283 = t7638 * t7640;
t7394 = -pkin(5) * t7781 + pkin(6) * t8283;
t7430 = pkin(2) * t7781;
t7433 = t7490 * t7559 + t7493 * t7556;
t7587 = t7612 ^ 2;
t8290 = t7629 * t7638;
t8015 = t7628 * t8290;
t8501 = pkin(2) * t7611;
t7841 = t8015 * t8501;
t8358 = (t7638 + 0.1e1) * (t7638 - 0.1e1);
t8493 = pkin(6) * t7611;
t7961 = t8358 * t8493;
t8509 = t7608 - 0.1e1;
t7999 = t8509 * t7566 - pkin(5);
t7604 = t7637 ^ 2;
t8340 = t7604 * t7629;
t8206 = pkin(2) * t8340;
t7553 = t7608 - 0.2e1;
t8211 = t7553 * t7566;
t8322 = t7611 * t7640;
t8220 = 0.2e1 * t8322;
t8329 = t7611 * t7629;
t8377 = t7433 * t7611;
t8494 = pkin(2) * t7640;
t8502 = pkin(2) * t7604;
t7571 = pkin(5) * t7640;
t8551 = -t7781 * t8487 - t7571;
t8572 = -0.2e1 * t8502;
t7316 = ((-t7640 * t8211 - t8551) * t7637 + (-t7394 * t7628 + t7781 * t8572 + t7430) * t7629) * t7587 + ((t7433 * t7638 + t7629 * t8220) * t8502 + ((-t7781 * t8211 - t7394) * t7611 + t8567 * t7433) * t7637 + (t8551 * t7628 - t8494) * t8329) * t7612 + t7781 * t8206 + (-t7433 * t7841 + t7640 * t7999) * t7637 + ((-pkin(1) * t8377 + t7394) * t7628 - t7430) * t7629 + (pkin(1) * t8283 + t7433 * t7961) * t7628;
t8387 = t7419 * t7628;
t8137 = t7316 * t8387;
t7914 = t7605 * t8137;
t7274 = pkin(2) * t7914;
t8389 = t7419 * t7605;
t7310 = t7316 * t8389;
t7292 = pkin(5) * t7310;
t8519 = t7587 - 0.1e1;
t7979 = t8519 * t7640;
t8061 = t7781 * t8335;
t7391 = -t7979 - t8061;
t8186 = t7587 * t7567;
t7487 = -t8186 + t8567;
t7524 = 0.2e1 * t7567 + pkin(1);
t7574 = pkin(1) * t7629;
t7531 = t7574 + pkin(6);
t7523 = t7566 + pkin(5);
t8361 = (t7612 + 0.1e1) * (t7612 - 0.1e1);
t7871 = t7523 * t7781 * t8361;
t8178 = t8519 * pkin(6);
t7943 = t7574 - t8178;
t7949 = pkin(6) * t8061;
t7649 = pkin(6) ^ 2;
t7652 = pkin(2) ^ 2;
t8339 = t7604 * t7652;
t7967 = -t7649 + t8339;
t8305 = t7612 * t7640;
t8043 = t7523 * t8305;
t8540 = 0.2e1 * pkin(6);
t8486 = pkin(2) * t8540;
t8179 = t7637 * t8486;
t8496 = pkin(2) * t7637;
t7337 = (t7391 * t8179 - t7967 * t8377) * t7608 + (-t7391 * t7629 * t8339 - ((t7433 * t7524 + t8043) * t7611 - t7871) * t8496 + (t7487 * t7640 - t7629 * t7949) * pkin(6)) * t7638 - (t7640 * t7943 - t7949) * t8496 - pkin(6) * ((t7433 * t7531 + t7629 * t8043) * t7611 - t7629 * t7871);
t7484 = t7611 * (-pkin(5) * t7567 + t7544);
t8508 = pkin(1) * t7612;
t7538 = pkin(6) * t8508;
t8312 = t7612 * t7629;
t8216 = pkin(1) * t8312;
t7946 = t7637 * t8216;
t8324 = t7611 * t7637;
t8202 = pkin(2) * t8324;
t7403 = (-pkin(5) * t8202 + t7538) * t7638 - pkin(2) * t7946 + t7484;
t7399 = 0.1e1 / t7403;
t7653 = 0.1e1 / pkin(2);
t8410 = t7399 * t7653;
t8125 = t7337 * t8410;
t7903 = t7605 * t8125;
t7325 = pkin(6) * t7903;
t8250 = -t7292 + t7325;
t7190 = -t7274 + t8250;
t7299 = pkin(6) * t7310;
t8411 = t7399 * t7605;
t8126 = t7337 * t8411;
t7322 = t7628 * t8126;
t7211 = t7322 + t7299;
t7838 = pkin(5) * t7903;
t7214 = t7299 + t7838;
t8338 = t7605 * t7612;
t8135 = t7316 * t8338;
t7267 = -t7419 * t8135 / 0.2e1;
t7504 = pkin(6) * t8322;
t8306 = t7612 * t7638;
t7376 = t7504 * t7638 + (-t7433 * t7629 - t7781 * t8306) * pkin(6) + ((-t7628 * t7640 + t7781 * t8291) * t7612 - t7433 * t8284 + (-t7628 * t7781 - t7640 * t8291) * t7611) * pkin(2);
t7364 = t7376 * t7419;
t8390 = t7419 * t7587;
t8036 = t7376 * t8390;
t7232 = -t8036 + t7267 + t7364 / 0.2e1;
t7358 = t7612 * t7364;
t7253 = -t7358 - t7310;
t7286 = pkin(6) * t7292;
t7289 = 0.2e1 * t7299;
t7293 = pkin(1) * t7310;
t7868 = t7629 * t8126;
t7806 = t7653 * t7868;
t7319 = pkin(1) * t7806;
t8531 = -0.2e1 * t7358;
t7847 = t7523 * t8531;
t7349 = pkin(6) * t7847;
t7650 = pkin(5) ^ 2;
t8238 = pkin(1) ^ 2 + t7650;
t8007 = t7652 + t8238;
t7505 = t7649 + t8007;
t7511 = t7567 / 0.2e1 + pkin(1);
t7522 = pkin(5) * t7628 + pkin(2);
t7543 = pkin(5) * t7566;
t7534 = 0.2e1 * t7543;
t7537 = t7608 - 0.1e1 / 0.2e1;
t7547 = pkin(1) * t7567;
t7603 = t7637 * t7604;
t7607 = t7638 * t7608;
t8520 = pkin(1) * pkin(6);
t7610 = 0.2e1 * t8520;
t7644 = -0.3e1 * t7649;
t7651 = pkin(2) * t7652;
t7296 = t7649 * t7310;
t7721 = -pkin(6) * t7322 - t7296;
t7901 = t7638 * t8125;
t7805 = t7605 * t7901;
t7757 = t7628 * t7805;
t7902 = t7611 * t8125;
t7807 = t7605 * t7902;
t7778 = pkin(1) * t7807;
t7586 = t7612 * t7587;
t7859 = (-t7586 + t7612) * t8540;
t7864 = 0.3e1 * t7649 + t8007;
t7865 = -t8126 / 0.2e1;
t8039 = t7652 * t8361;
t7874 = t7604 * t8039;
t8366 = t7523 * t7611;
t7877 = t8290 * t8366;
t7887 = t8361 * t7364;
t7606 = 0.1e1 / t7637 ^ 2;
t8447 = t7316 * t7419;
t8138 = t7606 * t8447;
t8323 = t7611 * t7638;
t8189 = pkin(5) * t8323;
t7479 = t8189 + t8216;
t8182 = pkin(1) * t8306;
t8539 = 0.1e1 / (-pkin(6) * t8182 + t7479 * t8496 - t7484);
t7916 = t8539 * t8138;
t7940 = t8519 * t8290;
t7998 = t7611 * t7538;
t8005 = 0.2e1 * t7652 * t8493;
t8006 = -0.2e1 * pkin(2) * t8361;
t8240 = t7650 / 0.2e1 + t7652 / 0.2e1;
t8008 = t7649 + t8240;
t8237 = t7652 - t7649;
t8009 = t7543 + t8237;
t8247 = t7319 + t7325;
t8012 = t7292 - t8247;
t8093 = t7586 * t7364;
t8124 = t7337 * t8539 * t7606;
t8443 = t7316 * t7652;
t8133 = t7605 * t8443;
t8219 = 0.2e1 * t7611 * t7651;
t7328 = pkin(1) * t7903;
t8259 = t7190 * t7629 + t7328;
t8289 = t7629 * t7649;
t8313 = t7612 * t7628;
t8330 = t7611 * t7628;
t8365 = t8567 * t7638;
t8388 = t7419 * t7611;
t8464 = t7214 * t7629;
t8521 = pkin(6) / 0.2e1;
t8530 = -0.2e1 * t7587;
t8541 = -0.2e1 * pkin(6);
t8542 = 0.2e1 * pkin(1);
t7094 = (t7399 * (-((t7644 + t8339) * t7607 * t7887 * t8202 + ((t7349 + pkin(6) * (-t7292 + t7325 / 0.2e1) + (-(t7289 + t7838) * t7628 / 0.2e1 + t7865) * pkin(2)) * t7637 * t8006 + t7211 * t7998 - (t7604 * t8133 * t8508 + ((t8542 + 0.3e1 * t7567 - 0.3e1 * t8186) * t8339 + pkin(6) * (t7511 * t8541 + t7587 * t8289)) * t7376) * t8388) * t7608 + (t7232 * t7603 * t8219 + (t7629 * t7847 + t8259) * t7874 + ((-(t7322 + t7289) * t7574 + t7721) * t7612 - ((t7543 + t8008) * t8530 + t7534 + 0.4e1 * t7547 + t7864) * t7364) * t8202 + (-t8519 * (-t7286 + (-t7214 * t7628 - t8126) * pkin(2)) - t7523 * t7859 * t7364) * t7567) * t7638 + t7232 * t8005 * t8340 - (t7349 + (0.2e1 * t7523 * t8093 - (-t7274 - t8012) * t7587 + t7319 + t7190) * pkin(6)) * t8496 + ((-pkin(1) * t7211 + t7629 * t7721) * t7612 - (t7610 + ((t7543 + t8240) * t8530 + t7534 + t7505) * t7629) * t7364) * t8493) * t7376 * t8389 - ((-t7887 * t8365 + t7778) * t8502 + (-t8009 * t7608 * t7887 - (-t8126 + (-t7358 * t7531 - t7214) * t7628) * pkin(2) * t8323 + pkin(1) * t7868 * t8313) * t7637 + (-t7757 * t8508 - ((-t7293 - t8464) * t7628 - t7868) * t7611 - (t7531 * t7637 * t8519 + t7522 * t7940 + t7844 * t8330) * t7364) * pkin(6)) * t8124) + (t7638 * t7651 * t7253 * t7603 + (t7253 * t7567 - t7293 - (t7608 * t8508 - t7877) * t7364) * t8339 + ((-t7322 / 0.2e1 - t7299 / 0.2e1) * t7638 - ((t7574 + t8521) * t8306 + t7537 * t8366) * t7364) * t8179 - (t7211 * t8567 - (t7844 - t7877) * pkin(6) * t7364) * pkin(6)) * t7611 * t7916) * t7653;
t7599 = 0.1e1 / t7634;
t7627 = sin(qJ(1,2));
t7636 = cos(qJ(1,2));
t7489 = t7627 * t7641 + t7636 * t7642;
t7492 = -t7627 * t7642 + t7636 * t7641;
t7620 = legFrame(2,3);
t7555 = sin(t7620);
t7558 = cos(t7620);
t7782 = t7489 * t7555 - t7492 * t7558;
t8285 = t7635 * t7640;
t7393 = -pkin(5) * t7782 + pkin(6) * t8285;
t7429 = pkin(2) * t7782;
t7432 = t7489 * t7558 + t7492 * t7555;
t8295 = t7626 * t7635;
t8016 = t7625 * t8295;
t7842 = t8016 * t8501;
t8359 = (t7635 + 0.1e1) * (t7635 - 0.1e1);
t7962 = t8359 * t8493;
t8512 = t7602 - 0.1e1;
t8000 = t8512 * t7564 - pkin(5);
t7598 = t7634 ^ 2;
t8346 = t7598 * t7626;
t8208 = pkin(2) * t8346;
t7552 = t7602 - 0.2e1;
t8212 = t7552 * t7564;
t8331 = t7611 * t7626;
t8378 = t7432 * t7611;
t8503 = pkin(2) * t7598;
t8550 = -t7782 * t8488 - t7571;
t8571 = -0.2e1 * t8503;
t7315 = ((-t7640 * t8212 - t8550) * t7634 + (-t7393 * t7625 + t7782 * t8571 + t7429) * t7626) * t7587 + ((t7432 * t7635 + t7626 * t8220) * t8503 + ((-t7782 * t8212 - t7393) * t7611 + t8568 * t7432) * t7634 + (t8550 * t7625 - t8494) * t8331) * t7612 + t7782 * t8208 + (-t7432 * t7842 + t7640 * t8000) * t7634 + ((-pkin(1) * t8378 + t7393) * t7625 - t7429) * t7626 + (pkin(1) * t8285 + t7432 * t7962) * t7625;
t8395 = t7416 * t7625;
t8143 = t7315 * t8395;
t7919 = t7599 * t8143;
t7273 = pkin(2) * t7919;
t8397 = t7416 * t7599;
t7308 = t7315 * t8397;
t7291 = pkin(5) * t7308;
t8062 = t7782 * t8335;
t7390 = -t7979 - t8062;
t8187 = t7587 * t7565;
t7486 = -t8187 + t8568;
t7520 = 0.2e1 * t7565 + pkin(1);
t7573 = pkin(1) * t7626;
t7530 = t7573 + pkin(6);
t7519 = t7564 + pkin(5);
t7872 = t7519 * t7782 * t8361;
t7944 = t7573 - t8178;
t7950 = pkin(6) * t8062;
t8345 = t7598 * t7652;
t7968 = -t7649 + t8345;
t8046 = t7519 * t8305;
t8180 = t7634 * t8486;
t8498 = pkin(2) * t7634;
t7336 = (t7390 * t8180 - t7968 * t8378) * t7602 + (-t7390 * t7626 * t8345 - ((t7432 * t7520 + t8046) * t7611 - t7872) * t8498 + (t7486 * t7640 - t7626 * t7950) * pkin(6)) * t7635 - (t7640 * t7944 - t7950) * t8498 - pkin(6) * ((t7432 * t7530 + t7626 * t8046) * t7611 - t7626 * t7872);
t7483 = t7611 * (-pkin(5) * t7565 + t7542);
t8314 = t7612 * t7626;
t8217 = pkin(1) * t8314;
t7947 = t7634 * t8217;
t8326 = t7611 * t7634;
t8203 = pkin(2) * t8326;
t7402 = (-pkin(5) * t8203 + t7538) * t7635 - pkin(2) * t7947 + t7483;
t7397 = 0.1e1 / t7402;
t8412 = t7397 * t7653;
t8128 = t7336 * t8412;
t7907 = t7599 * t8128;
t7324 = pkin(6) * t7907;
t8251 = -t7291 + t7324;
t7189 = -t7273 + t8251;
t7298 = pkin(6) * t7308;
t8413 = t7397 * t7599;
t8129 = t7336 * t8413;
t7321 = t7625 * t8129;
t7210 = t7321 + t7298;
t7839 = pkin(5) * t7907;
t7213 = t7298 + t7839;
t8344 = t7599 * t7612;
t8141 = t7315 * t8344;
t7268 = -t7416 * t8141 / 0.2e1;
t8308 = t7612 * t7635;
t7375 = t7504 * t7635 + (-t7432 * t7626 - t7782 * t8308) * pkin(6) + ((-t7625 * t7640 + t7782 * t8296) * t7612 - t7432 * t8286 + (-t7625 * t7782 - t7640 * t8296) * t7611) * pkin(2);
t7362 = t7375 * t7416;
t8398 = t7416 * t7587;
t8037 = t7375 * t8398;
t7231 = -t8037 + t7268 + t7362 / 0.2e1;
t7357 = t7612 * t7362;
t7250 = -t7357 - t7308;
t7285 = pkin(6) * t7291;
t7288 = 0.2e1 * t7298;
t7304 = pkin(1) * t7308;
t7869 = t7626 * t8129;
t7809 = t7653 * t7869;
t7318 = pkin(1) * t7809;
t8532 = -0.2e1 * t7357;
t7848 = t7519 * t8532;
t7348 = pkin(6) * t7848;
t7509 = t7565 / 0.2e1 + pkin(1);
t7518 = pkin(5) * t7625 + pkin(2);
t7541 = pkin(5) * t7564;
t7533 = 0.2e1 * t7541;
t7536 = t7602 - 0.1e1 / 0.2e1;
t7546 = pkin(1) * t7565;
t7597 = t7634 * t7598;
t7601 = t7635 * t7602;
t7295 = t7649 * t7308;
t7722 = -pkin(6) * t7321 - t7295;
t7905 = t7635 * t8128;
t7808 = t7599 * t7905;
t7758 = t7625 * t7808;
t7906 = t7611 * t8128;
t7810 = t7599 * t7906;
t7779 = pkin(1) * t7810;
t7866 = -t8129 / 0.2e1;
t7875 = t7598 * t8039;
t8368 = t7519 * t7611;
t7878 = t8295 * t8368;
t7892 = t8361 * t7362;
t7600 = 0.1e1 / t7634 ^ 2;
t8453 = t7315 * t7416;
t8144 = t7600 * t8453;
t8325 = t7611 * t7635;
t8190 = pkin(5) * t8325;
t7481 = t8190 + t8217;
t8214 = pkin(1) * t8308;
t8537 = 0.1e1 / (-pkin(6) * t8214 + t7481 * t8498 - t7483);
t7921 = t8537 * t8144;
t7941 = t8519 * t8295;
t8010 = t7541 + t8237;
t8248 = t7318 + t7324;
t8013 = t7291 - t8248;
t8099 = t7586 * t7362;
t8127 = t7336 * t8537 * t7600;
t8449 = t7315 * t7652;
t8139 = t7599 * t8449;
t7327 = pkin(1) * t7907;
t8260 = t7189 * t7626 + t7327;
t8294 = t7626 * t7649;
t8315 = t7612 * t7625;
t8332 = t7611 * t7625;
t8367 = t8568 * t7635;
t8396 = t7416 * t7611;
t8465 = t7213 * t7626;
t7093 = (t7397 * (-((t7644 + t8345) * t7601 * t7892 * t8203 + ((t7348 + pkin(6) * (-t7291 + t7324 / 0.2e1) + (-(t7288 + t7839) * t7625 / 0.2e1 + t7866) * pkin(2)) * t7634 * t8006 + t7210 * t7998 - (t7598 * t8139 * t8508 + ((t8542 + 0.3e1 * t7565 - 0.3e1 * t8187) * t8345 + pkin(6) * (t7509 * t8541 + t7587 * t8294)) * t7375) * t8396) * t7602 + (t7231 * t7597 * t8219 + (t7626 * t7848 + t8260) * t7875 + ((-(t7321 + t7288) * t7573 + t7722) * t7612 - ((t7541 + t8008) * t8530 + t7533 + 0.4e1 * t7546 + t7864) * t7362) * t8203 + (-t8519 * (-t7285 + (-t7213 * t7625 - t8129) * pkin(2)) - t7519 * t7859 * t7362) * t7565) * t7635 + t7231 * t8005 * t8346 - (t7348 + (0.2e1 * t7519 * t8099 - (-t7273 - t8013) * t7587 + t7318 + t7189) * pkin(6)) * t8498 + ((-pkin(1) * t7210 + t7626 * t7722) * t7612 - (t7610 + ((t7541 + t8240) * t8530 + t7533 + t7505) * t7626) * t7362) * t8493) * t7375 * t8397 - ((-t7892 * t8367 + t7779) * t8503 + (-t8010 * t7602 * t7892 - (-t8129 + (-t7357 * t7530 - t7213) * t7625) * pkin(2) * t8325 + pkin(1) * t7869 * t8315) * t7634 + (-t7758 * t8508 - ((-t7304 - t8465) * t7625 - t7869) * t7611 - (t7530 * t7634 * t8519 + t7518 * t7941 + t7845 * t8332) * t7362) * pkin(6)) * t8127) + (t7635 * t7651 * t7250 * t7597 + (t7250 * t7565 - t7304 - (t7602 * t8508 - t7878) * t7362) * t8345 + ((-t7321 / 0.2e1 - t7298 / 0.2e1) * t7635 - ((t7573 + t8521) * t8308 + t7536 * t8368) * t7362) * t8180 - (t7210 * t8568 - (t7845 - t7878) * pkin(6) * t7362) * pkin(6)) * t7611 * t7921) * t7653;
t7593 = 0.1e1 / t7631;
t7624 = sin(qJ(1,3));
t7633 = cos(qJ(1,3));
t7488 = t7624 * t7641 + t7633 * t7642;
t7491 = -t7624 * t7642 + t7633 * t7641;
t7619 = legFrame(3,3);
t7554 = sin(t7619);
t7557 = cos(t7619);
t7783 = t7488 * t7554 - t7491 * t7557;
t8287 = t7632 * t7640;
t7392 = -pkin(5) * t7783 + pkin(6) * t8287;
t7428 = pkin(2) * t7783;
t7431 = t7488 * t7557 + t7491 * t7554;
t8300 = t7623 * t7632;
t8017 = t7622 * t8300;
t7843 = t8017 * t8501;
t8360 = (t7632 + 0.1e1) * (t7632 - 0.1e1);
t7963 = t8360 * t8493;
t8515 = t7596 - 0.1e1;
t8001 = t8515 * t7562 - pkin(5);
t7592 = t7631 ^ 2;
t8352 = t7592 * t7623;
t8210 = pkin(2) * t8352;
t7551 = t7596 - 0.2e1;
t8213 = t7551 * t7562;
t8333 = t7611 * t7623;
t8379 = t7431 * t7611;
t8504 = pkin(2) * t7592;
t8549 = -t7783 * t8489 - t7571;
t8570 = -0.2e1 * t8504;
t7314 = ((-t7640 * t8213 - t8549) * t7631 + (-t7392 * t7622 + t7783 * t8570 + t7428) * t7623) * t7587 + ((t7431 * t7632 + t7623 * t8220) * t8504 + ((-t7783 * t8213 - t7392) * t7611 + t8569 * t7431) * t7631 + (t8549 * t7622 - t8494) * t8333) * t7612 + t7783 * t8210 + (-t7431 * t7843 + t7640 * t8001) * t7631 + ((-pkin(1) * t8379 + t7392) * t7622 - t7428) * t7623 + (pkin(1) * t8287 + t7431 * t7963) * t7622;
t8403 = t7413 * t7622;
t8149 = t7314 * t8403;
t7924 = t7593 * t8149;
t7272 = pkin(2) * t7924;
t8405 = t7413 * t7593;
t7306 = t7314 * t8405;
t7290 = pkin(5) * t7306;
t8063 = t7783 * t8335;
t7389 = -t7979 - t8063;
t8188 = t7587 * t7563;
t7485 = -t8188 + t8569;
t7516 = 0.2e1 * t7563 + pkin(1);
t7572 = pkin(1) * t7623;
t7529 = t7572 + pkin(6);
t7515 = t7562 + pkin(5);
t7873 = t7515 * t7783 * t8361;
t7945 = t7572 - t8178;
t7951 = pkin(6) * t8063;
t8351 = t7592 * t7652;
t7969 = -t7649 + t8351;
t8049 = t7515 * t8305;
t8181 = t7631 * t8486;
t8500 = pkin(2) * t7631;
t7335 = (t7389 * t8181 - t7969 * t8379) * t7596 + (-t7389 * t7623 * t8351 - ((t7431 * t7516 + t8049) * t7611 - t7873) * t8500 + (t7485 * t7640 - t7623 * t7951) * pkin(6)) * t7632 - (t7640 * t7945 - t7951) * t8500 - pkin(6) * ((t7431 * t7529 + t7623 * t8049) * t7611 - t7623 * t7873);
t7482 = t7611 * (-pkin(5) * t7563 + t7540);
t8316 = t7612 * t7623;
t8218 = pkin(1) * t8316;
t7948 = t7631 * t8218;
t8328 = t7611 * t7631;
t8204 = pkin(2) * t8328;
t7401 = (-pkin(5) * t8204 + t7538) * t7632 - pkin(2) * t7948 + t7482;
t7395 = 0.1e1 / t7401;
t8414 = t7395 * t7653;
t8131 = t7335 * t8414;
t7911 = t7593 * t8131;
t7323 = pkin(6) * t7911;
t8252 = -t7290 + t7323;
t7188 = -t7272 + t8252;
t7297 = pkin(6) * t7306;
t8415 = t7395 * t7593;
t8132 = t7335 * t8415;
t7320 = t7622 * t8132;
t7209 = t7320 + t7297;
t7840 = pkin(5) * t7911;
t7212 = t7297 + t7840;
t8350 = t7593 * t7612;
t8147 = t7314 * t8350;
t7266 = -t7413 * t8147 / 0.2e1;
t8310 = t7612 * t7632;
t7374 = t7504 * t7632 + (-t7431 * t7623 - t7783 * t8310) * pkin(6) + ((-t7622 * t7640 + t7783 * t8301) * t7612 - t7431 * t8288 + (-t7622 * t7783 - t7640 * t8301) * t7611) * pkin(2);
t7360 = t7374 * t7413;
t8406 = t7413 * t7587;
t8038 = t7374 * t8406;
t7230 = -t8038 + t7266 + t7360 / 0.2e1;
t7356 = t7612 * t7360;
t7247 = -t7356 - t7306;
t7284 = pkin(6) * t7290;
t7287 = 0.2e1 * t7297;
t7303 = pkin(1) * t7306;
t7870 = t7623 * t8132;
t7812 = t7653 * t7870;
t7317 = pkin(1) * t7812;
t8533 = -0.2e1 * t7356;
t7849 = t7515 * t8533;
t7347 = pkin(6) * t7849;
t7507 = t7563 / 0.2e1 + pkin(1);
t7514 = pkin(5) * t7622 + pkin(2);
t7539 = pkin(5) * t7562;
t7532 = 0.2e1 * t7539;
t7535 = t7596 - 0.1e1 / 0.2e1;
t7545 = pkin(1) * t7563;
t7591 = t7631 * t7592;
t7595 = t7632 * t7596;
t7294 = t7649 * t7306;
t7723 = -pkin(6) * t7320 - t7294;
t7909 = t7632 * t8131;
t7811 = t7593 * t7909;
t7759 = t7622 * t7811;
t7910 = t7611 * t8131;
t7813 = t7593 * t7910;
t7780 = pkin(1) * t7813;
t7867 = -t8132 / 0.2e1;
t7876 = t7592 * t8039;
t8370 = t7515 * t7611;
t7879 = t8300 * t8370;
t7897 = t8361 * t7360;
t7594 = 0.1e1 / t7631 ^ 2;
t8459 = t7314 * t7413;
t8150 = t7594 * t8459;
t8327 = t7611 * t7632;
t8191 = pkin(5) * t8327;
t7480 = t8191 + t8218;
t8215 = pkin(1) * t8310;
t8538 = 0.1e1 / (-pkin(6) * t8215 + t7480 * t8500 - t7482);
t7926 = t8538 * t8150;
t7942 = t8519 * t8300;
t8011 = t7539 + t8237;
t8249 = t7317 + t7323;
t8014 = t7290 - t8249;
t8105 = t7586 * t7360;
t8130 = t7335 * t8538 * t7594;
t8455 = t7314 * t7652;
t8145 = t7593 * t8455;
t7326 = pkin(1) * t7911;
t8261 = t7188 * t7623 + t7326;
t8299 = t7623 * t7649;
t8317 = t7612 * t7622;
t8334 = t7611 * t7622;
t8369 = t8569 * t7632;
t8404 = t7413 * t7611;
t8466 = t7212 * t7623;
t7092 = (t7395 * (-((t7644 + t8351) * t7595 * t7897 * t8204 + ((t7347 + pkin(6) * (-t7290 + t7323 / 0.2e1) + (-(t7287 + t7840) * t7622 / 0.2e1 + t7867) * pkin(2)) * t7631 * t8006 + t7209 * t7998 - (t7592 * t8145 * t8508 + ((t8542 + 0.3e1 * t7563 - 0.3e1 * t8188) * t8351 + pkin(6) * (t7507 * t8541 + t7587 * t8299)) * t7374) * t8404) * t7596 + (t7230 * t7591 * t8219 + (t7623 * t7849 + t8261) * t7876 + ((-(t7320 + t7287) * t7572 + t7723) * t7612 - ((t7539 + t8008) * t8530 + t7532 + 0.4e1 * t7545 + t7864) * t7360) * t8204 + (-t8519 * (-t7284 + (-t7212 * t7622 - t8132) * pkin(2)) - t7515 * t7859 * t7360) * t7563) * t7632 + t7230 * t8005 * t8352 - (t7347 + (0.2e1 * t7515 * t8105 - (-t7272 - t8014) * t7587 + t7317 + t7188) * pkin(6)) * t8500 + ((-pkin(1) * t7209 + t7623 * t7723) * t7612 - (t7610 + ((t7539 + t8240) * t8530 + t7532 + t7505) * t7623) * t7360) * t8493) * t7374 * t8405 - ((-t7897 * t8369 + t7780) * t8504 + (-t8011 * t7596 * t7897 - (-t8132 + (-t7356 * t7529 - t7212) * t7622) * pkin(2) * t8327 + pkin(1) * t7870 * t8317) * t7631 + (-t7759 * t8508 - ((-t7303 - t8466) * t7622 - t7870) * t7611 - (t7529 * t7631 * t8519 + t7514 * t7942 + t7846 * t8334) * t7360) * pkin(6)) * t8130) + (t7632 * t7651 * t7247 * t7591 + (t7247 * t7563 - t7303 - (t7596 * t8508 - t7879) * t7360) * t8351 + ((-t7320 / 0.2e1 - t7297 / 0.2e1) * t7632 - ((t7572 + t8521) * t8310 + t7535 * t8370) * t7360) * t8181 - (t7209 * t8569 - (t7846 - t7879) * pkin(6) * t7360) * pkin(6)) * t7611 * t7926) * t7653;
t7206 = -pkin(6) * t7924 - t8132;
t7648 = -0.2e1 * pkin(1);
t8401 = t7413 * t7632;
t8102 = t7374 * t8401;
t7893 = t7623 * t8102;
t7787 = t7515 * t7893;
t8457 = t7314 * t7593;
t8148 = t7611 * t8457;
t7831 = t7632 * pkin(5) * t8148;
t8456 = t7314 * t7623;
t8146 = t7593 * t8456;
t7966 = pkin(1) * t8146;
t8100 = t7374 * t8327;
t8104 = t7374 * t8404;
t8492 = t7596 * pkin(6);
t8524 = -0.2e1 * t7622;
t7113 = (-(-t8569 * t8148 + ((t7575 - 0.2e1 * t7563 + t7648) * t8335 + pkin(5) * t7942) * t7374) * t7413 * t7592 + (-(-t8492 / 0.2e1 + t7529) * t8038 * t8524 + (-(-t7514 * t8100 - t7622 * t7966) * t7413 - t7206) * t7612 - (-t7831 + t7374 * (t7529 - t8492)) * t8403) * t7631 + t7587 * t7787 + (pkin(1) * t7811 + t7500 * t8104) * t7612 + ((-t7212 - t7320) * t7623 - t7303) * t7611 - t7787) * t7395 * t8130;
t7276 = t7632 * t7303;
t7774 = pkin(6) * t7514 * t7893;
t7837 = pkin(6) * t7622 * t8104;
t8364 = t7551 * t7587;
t7972 = -t7596 + t8364;
t8026 = t7611 * t8310;
t7646 = pkin(5) / 0.2e1;
t7506 = t7562 + t7646;
t8054 = t7506 * t8335;
t8353 = t7591 * t7652;
t8356 = t7587 * t7632;
t8469 = t7206 * t7611;
t7819 = ((-t7360 - (t7374 * t7972 - t8147) * t7413) * t8353 - (-t7276 * t7612 - t7611 * t8261 - ((-t7563 + pkin(1)) * t8356 + (-0.2e1 * t8054 + t8489) * t7623) * t7360) * t8504 + ((t7529 * t7612 + t8191) * t7209 - (-(t7545 - t8011) * t7587 + (-pkin(6) * t7515 + t7540 * t7623) * t8026 + (-t7587 * t7596 + t8515) * pkin(2) * t7514) * t7360) * t7631 + t7587 * t7774 + t7837 * t7846 - t7774 + t8569 * t8469) * t7926;
t7923 = t7413 * t8146;
t7275 = pkin(1) * t7923;
t7281 = -t7290 / 0.2e1;
t7300 = t7413 * t8145;
t7584 = t7650 + t7652;
t7647 = 0.2e1 * pkin(5);
t7609 = pkin(2) * t7647;
t7726 = (-pkin(2) * t7212 + (-pkin(2) * t8132 - t7284) * t7622) * t7632;
t7863 = 0.3e1 * t7652 + t7649 + t8238;
t8402 = t7413 * t7623;
t8103 = t7374 * t8402;
t7895 = t7611 * t8103;
t8042 = t7551 * t8351;
t8209 = t7596 * t7562;
t8241 = t7650 / 0.3e1 + t7652;
t8242 = -t7649 / 0.3e1 - 0.2e1 / 0.3e1 * t7652;
t8243 = t7649 / 0.2e1 + t7652;
t8255 = -t7272 + t7323;
t8348 = t7596 * t7649;
t7414 = 0.1e1 / t7771 ^ 2;
t8433 = t7374 * t7414;
t8472 = (-pkin(2) * t7306 + t7622 * t8252) * t7596;
t8525 = -0.2e1 * t7611;
t8528 = -0.2e1 * t7596;
t7937 = (-0.3e1 * ((t7596 - 0.4e1 / 0.3e1) * t8353 + ((-0.2e1 / 0.3e1 * t7539 + t8242) * t7596 + 0.4e1 / 0.3e1 * t7539 + t8241) * t7631 + (0.4e1 / 0.3e1 * t8504 - 0.2e1 / 0.3e1 * t7514) * pkin(6) * t8300) * t8105 + (-t8042 * t8459 - ((-t7303 + t8466) * t7632 - (-0.4e1 * t7515 + t8209) * t7895) * t8504 + (t7294 - t7300 - (-0.4e1 * t7506 * t8100 - t7966) * t7413 * pkin(6) + (-0.2e1 * t7595 * t7837 - t8472 + 0.2e1 * (t7281 + t8249) * t7622) * pkin(2)) * t7631 - t7623 * (t7726 - (t7609 + (t7584 - t8348) * t7622) * t8104)) * t7587 + (-(-0.3e1 * t7596 + 0.3e1) * t8353 * t7360 - (t7596 * t7780 - 0.2e1 * t7516 * t8102 + (t7326 + (t7281 + t8255) * t7623) * t8525) * t8504 + ((t7284 + ((t7212 - t7275) * t7622 + t8132) * pkin(2)) * t8327 - (0.2e1 * (t7539 + t8243) * t7596 - 0.4e1 * t7539 - 0.2e1 * t7545 - t7863) * t7360) * t7631 - t8469 * t7575 - 0.2e1 * t7774 + (-(pkin(6) * t7812 + t7326) * pkin(2) - (t8299 + t8520) * t7924) * t7611) * t7612 + t8515 * t7300 * t7591 + (t7212 * t7632 - (-t7562 - t7647 + t8209) * t8104) * t8210 + (t7300 + (t8472 + (-0.2e1 * (-pkin(6) * t7595 + t7529 * t7632) * t8104 + t8014) * t7622) * pkin(2)) * t7631 - t7507 * t7837 * t8528 + t7623 * t7726 - ((t7505 * t7623 + t7610) * t7622 + t7623 * t7609) * t8104) * t7593 * t8433;
t7091 = -t7113 - t7819 - t7937;
t7311 = t7314 ^ 2;
t8400 = t7414 * t7594;
t7305 = t7311 * t8400;
t7654 = 0.1e1 / pkin(2) ^ 2;
t7329 = t7335 ^ 2 / t7401 ^ 2 * t7594 * t7654;
t7218 = t7305 + t7329;
t7749 = t7911 * t7360;
t7720 = -0.2e1 * t7749;
t8499 = pkin(2) * t7632;
t7173 = (-((pkin(6) * t8301 + t8499) * t7611 + pkin(6) * t8317) * t7360 + t7206) * t7413 * t8132;
t7960 = pkin(6) * t8026;
t8185 = pkin(6) * t8356;
t8239 = t7649 + t7652;
t8304 = t7612 * t7649;
t8566 = t7414 * (((-t7413 * t7631 * t8455 + t7723) * t7612 + (-t8255 * t8301 + (-pkin(6) * t8149 - t7335 * t7395) * t7632 * t7593) * t8501 - (-(t8042 - t8348) * t7587 + 0.2e1 * t7506 * t7960 + t8351 * t8360 - t8348 + t7539 + t7545 + (-t7514 * t7587 + (t7516 * t7632 + 0.2e1 * (-t8054 - t8185) * t7623) * t7631) * pkin(2) + t8239) * t7360) * t7374 + (t7247 * t8351 - (-pkin(2) * t7494 * t8334 + t8304) * t7360 + t7723) * t8457);
t7107 = -t7173 - t8566;
t8161 = t7107 * t8333;
t8479 = t7107 * t7632;
t8236 = 0.2e1 * t8479;
t8507 = pkin(1) * t7632;
t8578 = pkin(1) * t8236 - (pkin(5) * t7091 * t7623 - pkin(1) * t7092) * t7611 - pkin(5) * (t7218 * t8327 + t7587 * t7720) + 0.2e1 * (-t7275 - t7840) * t7360 + (t7091 * t8507 - t7218 * t7572 - t7647 * t8161 - 0.2e1 * t7831 * t8433) * t7612;
t7208 = -pkin(6) * t7914 - t8126;
t8385 = t7419 * t7638;
t8090 = t7376 * t8385;
t7883 = t7629 * t8090;
t7784 = t7523 * t7883;
t8445 = t7316 * t7605;
t8136 = t7611 * t8445;
t7829 = t7638 * pkin(5) * t8136;
t8444 = t7316 * t7629;
t8134 = t7605 * t8444;
t7964 = pkin(1) * t8134;
t8088 = t7376 * t8323;
t8092 = t7376 * t8388;
t8490 = t7608 * pkin(6);
t8522 = -0.2e1 * t7628;
t7115 = (-(-t8567 * t8136 + ((t7577 - 0.2e1 * t7567 + t7648) * t8335 + pkin(5) * t7940) * t7376) * t7419 * t7604 + (-(-t8490 / 0.2e1 + t7531) * t8036 * t8522 + (-(-t7522 * t8088 - t7628 * t7964) * t7419 - t7208) * t7612 - (-t7829 + t7376 * (t7531 - t8490)) * t8387) * t7637 + t7587 * t7784 + (pkin(1) * t7805 + t7502 * t8092) * t7612 + ((-t7214 - t7322) * t7629 - t7293) * t7611 - t7784) * t7399 * t8124;
t7280 = t7638 * t7293;
t7772 = pkin(6) * t7522 * t7883;
t7835 = pkin(6) * t7628 * t8092;
t8362 = t7553 * t7587;
t7970 = -t7608 + t8362;
t8024 = t7611 * t8306;
t7510 = t7566 + t7646;
t8052 = t7510 * t8335;
t8341 = t7603 * t7652;
t8354 = t7587 * t7638;
t8467 = t7208 * t7611;
t7817 = ((-t7364 - (t7376 * t7970 - t8135) * t7419) * t8341 - (-t7280 * t7612 - t7611 * t8259 - ((-t7567 + pkin(1)) * t8354 + (-0.2e1 * t8052 + t8487) * t7629) * t7364) * t8502 + ((t7531 * t7612 + t8189) * t7211 - (-(t7547 - t8009) * t7587 + (-pkin(6) * t7523 + t7544 * t7629) * t8024 + (-t7587 * t7608 + t8509) * pkin(2) * t7522) * t7364) * t7637 + t7587 * t7772 + t7835 * t7844 - t7772 + t8567 * t8467) * t7916;
t7913 = t7419 * t8134;
t7279 = pkin(1) * t7913;
t7283 = -t7292 / 0.2e1;
t7302 = t7419 * t8133;
t7724 = (-pkin(2) * t7214 + (-pkin(2) * t8126 - t7286) * t7628) * t7638;
t8386 = t7419 * t7629;
t8091 = t7376 * t8386;
t7885 = t7611 * t8091;
t8040 = t7553 * t8339;
t8205 = t7608 * t7566;
t8253 = -t7274 + t7325;
t8336 = t7608 * t7649;
t7420 = 0.1e1 / t7769 ^ 2;
t8431 = t7376 * t7420;
t8470 = (-pkin(2) * t7310 + t7628 * t8250) * t7608;
t8526 = -0.2e1 * t7608;
t7938 = (-0.3e1 * ((t7608 - 0.4e1 / 0.3e1) * t8341 + ((-0.2e1 / 0.3e1 * t7543 + t8242) * t7608 + 0.4e1 / 0.3e1 * t7543 + t8241) * t7637 + (0.4e1 / 0.3e1 * t8502 - 0.2e1 / 0.3e1 * t7522) * pkin(6) * t8290) * t8093 + (-t8040 * t8447 - ((-t7293 + t8464) * t7638 - (-0.4e1 * t7523 + t8205) * t7885) * t8502 + (t7296 - t7302 - (-0.4e1 * t7510 * t8088 - t7964) * t7419 * pkin(6) + (-0.2e1 * t7607 * t7835 - t8470 + 0.2e1 * (t7283 + t8247) * t7628) * pkin(2)) * t7637 - t7629 * (t7724 - (t7609 + (t7584 - t8336) * t7628) * t8092)) * t7587 + (-(-0.3e1 * t7608 + 0.3e1) * t8341 * t7364 - (t7608 * t7778 - 0.2e1 * t7524 * t8090 + (t7328 + (t7283 + t8253) * t7629) * t8525) * t8502 + ((t7286 + ((t7214 - t7279) * t7628 + t8126) * pkin(2)) * t8323 - (0.2e1 * (t7543 + t8243) * t7608 - 0.4e1 * t7543 - 0.2e1 * t7547 - t7863) * t7364) * t7637 - t8467 * t7577 - 0.2e1 * t7772 + (-(pkin(6) * t7806 + t7328) * pkin(2) - (t8289 + t8520) * t7914) * t7611) * t7612 + t8509 * t7302 * t7603 + (t7214 * t7638 - (-t7566 - t7647 + t8205) * t8092) * t8206 + (t7302 + (t8470 + (-0.2e1 * (-pkin(6) * t7607 + t7531 * t7638) * t8092 + t8012) * t7628) * pkin(2)) * t7637 - t7511 * t7835 * t8526 + t7629 * t7724 - ((t7505 * t7629 + t7610) * t7628 + t7629 * t7609) * t8092) * t7605 * t8431;
t7090 = -t7115 - t7817 - t7938;
t7313 = t7316 ^ 2;
t8384 = t7420 * t7606;
t7309 = t7313 * t8384;
t7331 = t7337 ^ 2 / t7403 ^ 2 * t7606 * t7654;
t7220 = t7309 + t7331;
t7745 = t7903 * t7364;
t7718 = -0.2e1 * t7745;
t8495 = pkin(2) * t7638;
t7175 = (-((pkin(6) * t8291 + t8495) * t7611 + pkin(6) * t8313) * t7364 + t7208) * t7419 * t8126;
t7958 = pkin(6) * t8024;
t8183 = pkin(6) * t8354;
t8564 = t7420 * (((-t7419 * t7637 * t8443 + t7721) * t7612 + (-t8253 * t8291 + (-pkin(6) * t8137 - t7337 * t7399) * t7638 * t7605) * t8501 - (-(t8040 - t8336) * t7587 + 0.2e1 * t7510 * t7958 + t8339 * t8358 - t8336 + t7543 + t7547 + (-t7522 * t7587 + (t7524 * t7638 + 0.2e1 * (-t8052 - t8183) * t7629) * t7637) * pkin(2) + t8239) * t7364) * t7376 + (t7253 * t8339 - (-pkin(2) * t7496 * t8330 + t8304) * t7364 + t7721) * t8445);
t7109 = -t7175 - t8564;
t8157 = t7109 * t8329;
t8473 = t7109 * t7638;
t8234 = 0.2e1 * t8473;
t8505 = pkin(1) * t7638;
t8577 = pkin(1) * t8234 - (pkin(5) * t7090 * t7629 - pkin(1) * t7094) * t7611 - pkin(5) * (t7220 * t8323 + t7587 * t7718) + 0.2e1 * (-t7279 - t7838) * t7364 + (t7090 * t8505 - t7220 * t7574 - t7647 * t8157 - 0.2e1 * t7829 * t8431) * t7612;
t7207 = -pkin(6) * t7919 - t8129;
t8393 = t7416 * t7635;
t8096 = t7375 * t8393;
t7888 = t7626 * t8096;
t7785 = t7519 * t7888;
t8451 = t7315 * t7599;
t8142 = t7611 * t8451;
t7830 = t7635 * pkin(5) * t8142;
t8450 = t7315 * t7626;
t8140 = t7599 * t8450;
t7965 = pkin(1) * t8140;
t8094 = t7375 * t8325;
t8098 = t7375 * t8396;
t8491 = t7602 * pkin(6);
t8523 = -0.2e1 * t7625;
t7114 = (-(-t8568 * t8142 + ((t7576 - 0.2e1 * t7565 + t7648) * t8335 + pkin(5) * t7941) * t7375) * t7416 * t7598 + (-(-t8491 / 0.2e1 + t7530) * t8037 * t8523 + (-(-t7518 * t8094 - t7625 * t7965) * t7416 - t7207) * t7612 - (-t7830 + t7375 * (t7530 - t8491)) * t8395) * t7634 + t7587 * t7785 + (pkin(1) * t7808 + t7501 * t8098) * t7612 + ((-t7213 - t7321) * t7626 - t7304) * t7611 - t7785) * t7397 * t8127;
t7278 = t7635 * t7304;
t7773 = pkin(6) * t7518 * t7888;
t7836 = pkin(6) * t7625 * t8098;
t8363 = t7552 * t7587;
t7971 = -t7602 + t8363;
t8025 = t7611 * t8308;
t7508 = t7564 + t7646;
t8053 = t7508 * t8335;
t8347 = t7597 * t7652;
t8355 = t7587 * t7635;
t8468 = t7207 * t7611;
t7818 = ((-t7362 - (t7375 * t7971 - t8141) * t7416) * t8347 - (-t7278 * t7612 - t7611 * t8260 - ((-t7565 + pkin(1)) * t8355 + (-0.2e1 * t8053 + t8488) * t7626) * t7362) * t8503 + ((t7530 * t7612 + t8190) * t7210 - (-(t7546 - t8010) * t7587 + (-pkin(6) * t7519 + t7542 * t7626) * t8025 + (-t7587 * t7602 + t8512) * pkin(2) * t7518) * t7362) * t7634 + t7587 * t7773 + t7836 * t7845 - t7773 + t8568 * t8468) * t7921;
t7918 = t7416 * t8140;
t7277 = pkin(1) * t7918;
t7282 = -t7291 / 0.2e1;
t7301 = t7416 * t8139;
t7725 = (-pkin(2) * t7213 + (-pkin(2) * t8129 - t7285) * t7625) * t7635;
t8394 = t7416 * t7626;
t8097 = t7375 * t8394;
t7890 = t7611 * t8097;
t8041 = t7552 * t8345;
t8207 = t7602 * t7564;
t8254 = -t7273 + t7324;
t8342 = t7602 * t7649;
t7417 = 0.1e1 / t7770 ^ 2;
t8432 = t7375 * t7417;
t8471 = (-pkin(2) * t7308 + t7625 * t8251) * t7602;
t8527 = -0.2e1 * t7602;
t7939 = (-0.3e1 * ((t7602 - 0.4e1 / 0.3e1) * t8347 + ((-0.2e1 / 0.3e1 * t7541 + t8242) * t7602 + 0.4e1 / 0.3e1 * t7541 + t8241) * t7634 + (0.4e1 / 0.3e1 * t8503 - 0.2e1 / 0.3e1 * t7518) * pkin(6) * t8295) * t8099 + (-t8041 * t8453 - ((-t7304 + t8465) * t7635 - (-0.4e1 * t7519 + t8207) * t7890) * t8503 + (t7295 - t7301 - (-0.4e1 * t7508 * t8094 - t7965) * t7416 * pkin(6) + (-0.2e1 * t7601 * t7836 - t8471 + 0.2e1 * (t7282 + t8248) * t7625) * pkin(2)) * t7634 - t7626 * (t7725 - (t7609 + (t7584 - t8342) * t7625) * t8098)) * t7587 + (-(-0.3e1 * t7602 + 0.3e1) * t8347 * t7362 - (t7602 * t7779 - 0.2e1 * t7520 * t8096 + (t7327 + (t7282 + t8254) * t7626) * t8525) * t8503 + ((t7285 + ((t7213 - t7277) * t7625 + t8129) * pkin(2)) * t8325 - (0.2e1 * (t7541 + t8243) * t7602 - 0.4e1 * t7541 - 0.2e1 * t7546 - t7863) * t7362) * t7634 - t8468 * t7576 - 0.2e1 * t7773 + (-(pkin(6) * t7809 + t7327) * pkin(2) - (t8294 + t8520) * t7919) * t7611) * t7612 + t8512 * t7301 * t7597 + (t7213 * t7635 - (-t7564 - t7647 + t8207) * t8098) * t8208 + (t7301 + (t8471 + (-0.2e1 * (-pkin(6) * t7601 + t7530 * t7635) * t8098 + t8013) * t7625) * pkin(2)) * t7634 - t7509 * t7836 * t8527 + t7626 * t7725 - ((t7505 * t7626 + t7610) * t7625 + t7626 * t7609) * t8098) * t7599 * t8432;
t7089 = -t7114 - t7818 - t7939;
t7312 = t7315 ^ 2;
t8392 = t7417 * t7600;
t7307 = t7312 * t8392;
t7330 = t7336 ^ 2 / t7402 ^ 2 * t7600 * t7654;
t7219 = t7307 + t7330;
t7747 = t7907 * t7362;
t7719 = -0.2e1 * t7747;
t8497 = pkin(2) * t7635;
t7174 = (-((pkin(6) * t8296 + t8497) * t7611 + pkin(6) * t8315) * t7362 + t7207) * t7416 * t8129;
t7959 = pkin(6) * t8025;
t8184 = pkin(6) * t8355;
t8565 = t7417 * (((-t7416 * t7634 * t8449 + t7722) * t7612 + (-t8254 * t8296 + (-pkin(6) * t8143 - t7336 * t7397) * t7635 * t7599) * t8501 - (-(t8041 - t8342) * t7587 + 0.2e1 * t7508 * t7959 + t8345 * t8359 - t8342 + t7541 + t7546 + (-t7518 * t7587 + (t7520 * t7635 + 0.2e1 * (-t8053 - t8184) * t7626) * t7634) * pkin(2) + t8239) * t7362) * t7375 + (t7250 * t8345 - (-pkin(2) * t7495 * t8332 + t8304) * t7362 + t7722) * t8451);
t7108 = -t7174 - t8565;
t8159 = t7108 * t8331;
t8476 = t7108 * t7635;
t8235 = 0.2e1 * t8476;
t8506 = pkin(1) * t7635;
t8576 = pkin(1) * t8235 - (pkin(5) * t7089 * t7626 - pkin(1) * t7093) * t7611 - pkin(5) * (t7219 * t8325 + t7587 * t7719) + 0.2e1 * (-t7277 - t7839) * t7362 + (t7089 * t8506 - t7219 * t7573 - t7647 * t8159 - 0.2e1 * t7830 * t8432) * t7612;
t8575 = (t7604 * t8495 + t7637 * t8567) * t7612 + t7628 * t7961 - t7637 * t7841;
t8574 = (t7598 * t8497 + t7634 * t8568) * t7612 + t7625 * t7962 - t7634 * t7842;
t8573 = (t7592 * t8499 + t7631 * t8569) * t7612 + t7622 * t7963 - t7631 * t7843;
t7464 = t7554 * t7624 - t7557 * t7633;
t8563 = t7464 * t7969;
t7465 = t7555 * t7627 - t7558 * t7636;
t8562 = t7465 * t7968;
t7466 = t7556 * t7630 - t7559 * t7639;
t8561 = t7466 * t7967;
t7497 = -pkin(5) + t8213;
t8004 = t7514 + t8570;
t8545 = -t7514 * t7623 + (-pkin(6) * t8017 - t7497 * t7631) * t8335 + t8210 + (pkin(6) * t8288 + t7623 * t8004) * t7587;
t7498 = -pkin(5) + t8212;
t8003 = t7518 + t8571;
t8544 = -t7518 * t7626 + (-pkin(6) * t8016 - t7498 * t7634) * t8335 + t8208 + (pkin(6) * t8286 + t7626 * t8003) * t7587;
t7499 = -pkin(5) + t8211;
t8002 = t7522 + t8572;
t8543 = -t7522 * t7629 + (-pkin(6) * t8015 - t7499 * t7637) * t8335 + t8206 + (pkin(6) * t8284 + t7629 * t8002) * t7587;
t7350 = t7413 * t8100;
t8536 = -0.2e1 * t7653 * t7867 + 0.2e1 * t7350;
t7351 = t7416 * t8094;
t8535 = -0.2e1 * t7653 * t7866 + 0.2e1 * t7351;
t7352 = t7419 * t8088;
t8534 = -0.2e1 * t7653 * t7865 + 0.2e1 * t7352;
t8529 = 0.2e1 * t7587;
t8518 = t8529 - 0.2e1;
t8517 = 0.2e1 * t7592 - 0.1e1;
t8516 = 0.4e1 * t7592 - 0.2e1;
t8514 = 0.2e1 * t7598 - 0.1e1;
t8513 = 0.4e1 * t7598 - 0.2e1;
t8511 = 0.2e1 * t7604 - 0.1e1;
t8510 = 0.4e1 * t7604 - 0.2e1;
t7585 = t7611 ^ 2;
t8485 = MDP(4) * t7585;
t8484 = MDP(5) * t7585;
t8483 = MDP(6) * t7611;
t8482 = MDP(7) * t7611;
t8194 = pkin(5) * t8333;
t8481 = t7107 * (-t8194 + t8215);
t8480 = t7107 * t7480;
t8193 = pkin(5) * t8331;
t8478 = t7108 * (-t8193 + t8214);
t8477 = t7108 * t7481;
t8192 = pkin(5) * t8329;
t8475 = t7109 * (-t8182 + t8192);
t8474 = t7109 * t7479;
t7258 = -t7350 - t7911;
t8463 = t7258 * t7374;
t7260 = -t7351 - t7907;
t8462 = t7260 * t7375;
t7262 = -t7352 - t7903;
t8461 = t7262 * t7376;
t8460 = t7314 * t7374;
t8458 = t7314 * t7414;
t8454 = t7315 * t7375;
t8452 = t7315 * t7417;
t8448 = t7316 * t7376;
t8446 = t7316 * t7420;
t8050 = t7633 * t8370;
t7449 = t7529 * t7624 - t7623 * t8050;
t7458 = t7516 * t7624 - t8050;
t8051 = t7624 * t8370;
t7711 = t7529 * t7633 + t7623 * t8051;
t7729 = t7516 * t7633 + t8051;
t7467 = t7554 * t7633 + t7557 * t7624;
t7822 = t7969 * t7467;
t8311 = t7612 * t7631;
t8201 = pkin(2) * t8311;
t7954 = t7467 * t8201;
t7365 = (t7954 * t8541 + t8563) * t7596 + ((t7554 * t7458 - t7557 * t7729) * t8500 + t7822 * t8316) * t7632 + (t7554 * t7449 - t7557 * t7711 + t7954) * pkin(6);
t8442 = t7365 * t7395;
t8047 = t7636 * t8368;
t7450 = t7530 * t7627 - t7626 * t8047;
t7459 = t7520 * t7627 - t8047;
t8048 = t7627 * t8368;
t7710 = t7530 * t7636 + t7626 * t8048;
t7728 = t7520 * t7636 + t8048;
t7468 = t7555 * t7636 + t7558 * t7627;
t7821 = t7968 * t7468;
t8309 = t7612 * t7634;
t8200 = pkin(2) * t8309;
t7953 = t7468 * t8200;
t7366 = (t7953 * t8541 + t8562) * t7602 + ((t7555 * t7459 - t7558 * t7728) * t8498 + t7821 * t8314) * t7635 + (t7555 * t7450 - t7558 * t7710 + t7953) * pkin(6);
t8441 = t7366 * t7397;
t8044 = t7639 * t8366;
t7451 = t7531 * t7630 - t7629 * t8044;
t7460 = t7524 * t7630 - t8044;
t8045 = t7630 * t8366;
t7709 = t7531 * t7639 + t7629 * t8045;
t7727 = t7524 * t7639 + t8045;
t7469 = t7556 * t7639 + t7559 * t7630;
t7820 = t7967 * t7469;
t8307 = t7612 * t7637;
t8199 = pkin(2) * t8307;
t7952 = t7469 * t8199;
t7367 = (t7952 * t8541 + t8561) * t7608 + ((t7556 * t7460 - t7559 * t7727) * t8496 + t7820 * t8312) * t7638 + (t7556 * t7451 - t7559 * t7709 + t7952) * pkin(6);
t8440 = t7367 * t7399;
t7371 = t7374 ^ 2;
t7359 = t7371 * t7414;
t8029 = t7611 * t8316;
t7470 = -pkin(5) * t8029 + t8507;
t8439 = t7371 * t7470;
t8438 = t7371 * (pkin(5) * t8026 + t7572);
t7372 = t7375 ^ 2;
t7361 = t7372 * t7417;
t8028 = t7611 * t8314;
t7471 = -pkin(5) * t8028 + t8506;
t8437 = t7372 * t7471;
t8436 = t7372 * (pkin(5) * t8025 + t7573);
t7373 = t7376 ^ 2;
t7363 = t7373 * t7420;
t8027 = t7611 * t8312;
t7472 = -pkin(5) * t8027 + t8505;
t8435 = t7373 * t7472;
t8434 = t7373 * (pkin(5) * t8024 + t7574);
t8060 = t7464 * t8334;
t7377 = -t7467 * t7563 + t7464 * t8373 + (-t7467 * t8288 - t8060) * pkin(2);
t8430 = t7377 * t7413;
t8059 = t7465 * t8332;
t7378 = -t7468 * t7565 + t7465 * t8372 + (-t7468 * t8286 - t8059) * pkin(2);
t8429 = t7378 * t7416;
t8058 = t7466 * t8330;
t7379 = -t7469 * t7567 + t7466 * t8371 + (-t7469 * t8284 - t8058) * pkin(2);
t8428 = t7379 * t7419;
t8057 = t7467 * t8334;
t7380 = t7464 * t7563 + t7467 * t8373 + (t7464 * t8288 - t8057) * pkin(2);
t8427 = t7380 * t7413;
t8056 = t7468 * t8332;
t7381 = t7465 * t7565 + t7468 * t8372 + (t7465 * t8286 - t8056) * pkin(2);
t8426 = t7381 * t7416;
t8055 = t7469 * t8330;
t7382 = t7466 * t7567 + t7469 * t8371 + (t7466 * t8284 - t8055) * pkin(2);
t8425 = t7382 * t7419;
t7512 = t8518 * pkin(6);
t7383 = -t7876 * t8300 + (t7512 * t7596 + t7515 * t8026 + t7945) * t8500 - (t7485 * t7632 - t7515 * t8029) * pkin(6);
t8424 = t7383 * t8538;
t8423 = t7383 * t7653;
t7384 = -t7875 * t8295 + (t7512 * t7602 + t7519 * t8025 + t7944) * t8498 - (t7486 * t7635 - t7519 * t8028) * pkin(6);
t8422 = t7384 * t8537;
t8421 = t7384 * t7653;
t7385 = -t7874 * t8290 + (t7512 * t7608 + t7523 * t8024 + t7943) * t8496 - (t7487 * t7638 - t7523 * t8027) * pkin(6);
t8420 = t7385 * t8539;
t8419 = t7385 * t7653;
t7386 = (t7497 * t7587 + t7960 - t8001) * t7631 - t7622 * t8369 + (t7622 * t8185 + t8004 * t8335) * t7623;
t8418 = t7386 * t8538;
t7387 = (t7498 * t7587 + t7959 - t8000) * t7634 - t7625 * t8367 + (t7625 * t8184 + t8003 * t8335) * t7626;
t8417 = t7387 * t8537;
t7388 = (t7499 * t7587 + t7958 - t7999) * t7637 - t7628 * t8365 + (t7628 * t8183 + t8002 * t8335) * t7629;
t8416 = t7388 * t8539;
t8409 = t8539 * t7605;
t8408 = t8538 * t7593;
t8407 = t8537 * t7599;
t8399 = t7414 * t7623;
t8391 = t7417 * t7626;
t8383 = t7420 * t7629;
t8382 = t7413 * (pkin(2) * t8317 + t7494 * t7611);
t8381 = t7416 * (pkin(2) * t8315 + t7495 * t7611);
t8380 = t7419 * (pkin(2) * t8313 + t7496 * t7611);
t8357 = t7585 * t7653;
t8349 = t7593 * t7622;
t8343 = t7599 * t7625;
t8337 = t7605 * t7628;
t8321 = t7611 * t7653;
t8320 = t7612 * t7089;
t8319 = t7612 * t7090;
t8318 = t7612 * t7091;
t8303 = t7622 * t7623;
t8302 = t7622 * t7631;
t8298 = t7625 * t7626;
t8297 = t7625 * t7634;
t8293 = t7628 * t7629;
t8292 = t7628 * t7637;
t7053 = -t7092 * t8218 + (-t7092 * t8327 + t7107 * t8529 + 0.2e1 * t7173 + 0.2e1 * t8566) * pkin(5);
t7852 = -0.2e1 * ((pkin(5) * t7895 - t7276) * t7612 + (pkin(5) * t7923 - t7326 / 0.2e1) * t7611 - pkin(1) * t8102) * t8131;
t8282 = -t7631 * t7053 - t8578 * t7622 + t7852;
t8281 = -t7622 * t7053 + t8578 * t7631 + t7852 * t8349;
t7054 = -t7093 * t8217 + (-t7093 * t8325 + t7108 * t8529 + 0.2e1 * t7174 + 0.2e1 * t8565) * pkin(5);
t7851 = -0.2e1 * ((pkin(5) * t7890 - t7278) * t7612 + (pkin(5) * t7918 - t7327 / 0.2e1) * t7611 - pkin(1) * t8096) * t8128;
t8280 = -t7634 * t7054 - t8576 * t7625 + t7851;
t8279 = -t7625 * t7054 + t8576 * t7634 + t7851 * t8343;
t7055 = -t7094 * t8216 + (-t7094 * t8323 + t7109 * t8529 + 0.2e1 * t7175 + 0.2e1 * t8564) * pkin(5);
t7172 = (pkin(5) * t7885 - t7280) * t7612 + (pkin(5) * t7913 - t7328 / 0.2e1) * t7611 - pkin(1) * t8090;
t8278 = -t7637 * t7055 - 0.2e1 * t7172 * t8125 - t8577 * t7628;
t7850 = -0.2e1 * t7903;
t8277 = t8577 * t7637 + (t7172 * t7850 - t7055) * t7628;
t7063 = t7108 * t7971 + t7108 - t8320;
t8221 = -0.2e1 * t8335;
t7156 = -t7747 * t8221 + (t7416 * t7810 + (-t7416 ^ 2 + t7417 * t7587) * t7635 * t7375) * t8451;
t8071 = t7417 * t8325;
t7786 = t7312 * t7600 * t8071;
t7861 = t7971 + 0.1e1;
t7908 = t7375 * t8128;
t8152 = (-t7351 + t7907) * t7315 * t7612;
t7105 = t7612 * t7108;
t7075 = t7105 - t7939 / 0.2e1 - t7818 / 0.2e1 - t7114 / 0.2e1;
t8173 = t7075 * t8331;
t8276 = -0.2e1 * t7063 * t8297 + t8173 * t8513 + 0.4e1 * t7625 * t7156 * t8296 + t8514 * t7786 - (t8513 * t8152 + (-0.4e1 * t7598 * t7861 + 0.2e1 * t8363 + t8527 + 0.2e1) * t7908) * t8397;
t7064 = t7109 * t7970 + t7109 - t8319;
t7157 = -t7745 * t8221 + (t7419 * t7807 + (-t7419 ^ 2 + t7420 * t7587) * t7638 * t7376) * t8445;
t8068 = t7420 * t8323;
t7789 = t7313 * t7606 * t8068;
t7860 = t7970 + 0.1e1;
t7904 = t7376 * t8125;
t8151 = (-t7352 + t7903) * t7316 * t7612;
t7106 = t7612 * t7109;
t7076 = t7106 - t7938 / 0.2e1 - t7817 / 0.2e1 - t7115 / 0.2e1;
t8172 = t7076 * t8329;
t8275 = -0.2e1 * t7064 * t8292 + t8172 * t8510 + 0.4e1 * t7628 * t7157 * t8291 + t8511 * t7789 - (t8510 * t8151 + (-0.4e1 * t7604 * t7860 + 0.2e1 * t8362 + t8526 + 0.2e1) * t7904) * t8389;
t7062 = t7107 * t7972 + t7107 - t8318;
t7155 = -t7749 * t8221 + (t7413 * t7813 + (-t7413 ^ 2 + t7414 * t7587) * t7632 * t7374) * t8457;
t8074 = t7414 * t8327;
t7788 = t7311 * t7594 * t8074;
t7862 = t7972 + 0.1e1;
t7912 = t7374 * t8131;
t8153 = (-t7350 + t7911) * t7314 * t7612;
t7104 = t7612 * t7107;
t7074 = t7104 - t7937 / 0.2e1 - t7819 / 0.2e1 - t7113 / 0.2e1;
t8174 = t7074 * t8333;
t8274 = -0.2e1 * t7062 * t8302 + t8174 * t8516 + 0.4e1 * t7622 * t7155 * t8301 + t8517 * t7788 - (t8516 * t8153 + (-0.4e1 * t7592 * t7862 + 0.2e1 * t8364 + t8528 + 0.2e1) * t7912) * t8405;
t7081 = t7091 + t7104;
t7242 = -t7356 - t7306 / 0.2e1;
t8023 = t7611 * t8303;
t7982 = 0.2e1 * t8023;
t8273 = t7074 * t7631 * t7982 + t7062 * t7592 + t7081 * t7612 + t7788 * t8302 - 0.2e1 * t7155 * t8352 + 0.2e1 * (-t7242 * t7623 * t7910 + (t7862 * t7912 - t8153) * t7413 * t8302) * t7593;
t7083 = t7089 + t7105;
t7243 = -t7357 - t7308 / 0.2e1;
t8021 = t7611 * t8298;
t7981 = 0.2e1 * t8021;
t8272 = t7075 * t7634 * t7981 + t7063 * t7598 + t7083 * t7612 + t7786 * t8297 - 0.2e1 * t7156 * t8346 + 0.2e1 * (-t7626 * t7243 * t7906 + (t7861 * t7908 - t8152) * t7416 * t8297) * t7599;
t7085 = t7090 + t7106;
t7244 = -t7358 - t7310 / 0.2e1;
t8019 = t7611 * t8293;
t7980 = 0.2e1 * t8019;
t8271 = t7076 * t7637 * t7980 + t7064 * t7604 + t7085 * t7612 + t7789 * t8292 - 0.2e1 * t7157 * t8340 + 0.2e1 * (-t7244 * t7629 * t7902 + (t7860 * t7904 - t8151) * t7419 * t8292) * t7605;
t7702 = t7632 * t7720;
t7180 = t7702 + t7611 * (t7305 - t7329);
t7200 = t7611 * t7702 - t7329;
t8163 = t7091 * t8327;
t8224 = 0.4e1 * t7535 * t7593;
t8270 = -t7631 * t8163 + t7092 * (t8023 - t8311) + (t7631 * t8221 - t8303 * t8518) * t8479 + t7180 * t8301 + t7200 * t8317 + (0.4e1 * (-t7535 * t7924 + t7623 * t7909 / 0.2e1) * t8406 + (t7622 * t8224 + 0.2e1 * t8029) * t8458) * t7374;
t7701 = t7635 * t7719;
t7181 = t7701 + t7611 * (t7307 - t7330);
t7201 = t7611 * t7701 - t7330;
t8165 = t7089 * t8325;
t8223 = 0.4e1 * t7536 * t7599;
t8269 = -t7634 * t8165 + t7093 * (t8021 - t8309) + (t7634 * t8221 - t8298 * t8518) * t8476 + t7181 * t8296 + t7201 * t8315 + (0.4e1 * (-t7536 * t7919 + t7626 * t7905 / 0.2e1) * t8398 + (t7625 * t8223 + 0.2e1 * t8028) * t8452) * t7375;
t7700 = t7638 * t7718;
t7179 = t7700 + t7611 * (t7309 - t7331);
t7202 = t7611 * t7700 - t7331;
t8164 = t7090 * t8323;
t8222 = 0.4e1 * t7537 * t7605;
t8268 = -t7637 * t8164 + t7094 * (t8019 - t8307) + (t7637 * t8221 - t8293 * t8518) * t8473 + t7179 * t8291 + t7202 * t8313 + (0.4e1 * (-t7537 * t7914 + t7629 * t7901 / 0.2e1) * t8390 + (t7628 * t8222 + 0.2e1 * t8027) * t8446) * t7376;
t8022 = t7611 * t8301;
t8267 = -t7622 * t8163 - t7092 * (t8022 + t8317) + (t7622 * t8221 + t8301 * t8518) * t8479 + t7180 * t8303 - t7200 * t8311 + (0.2e1 * (t7623 * t7759 - (t8528 + 0.1e1) * t7631 * t7306) * t8406 + (t7982 * t8350 - 0.4e1 * t7535) * t8458) * t7374;
t8020 = t7611 * t8296;
t8266 = -t7625 * t8165 - t7093 * (t8020 + t8315) + (t7625 * t8221 + t8296 * t8518) * t8476 + t7181 * t8298 - t7201 * t8309 + (0.2e1 * (t7626 * t7758 - (t8527 + 0.1e1) * t7634 * t7308) * t8398 + (t7981 * t8344 - 0.4e1 * t7536) * t8452) * t7375;
t8018 = t7611 * t8291;
t8265 = -t7628 * t8164 - t7094 * (t8018 + t8313) + (t7628 * t8221 + t8291 * t8518) * t8473 + t7179 * t8293 - t7202 * t8307 + (0.2e1 * (t7629 * t7757 - (t8526 + 0.1e1) * t7637 * t7310) * t8390 + (t7980 * t8338 - 0.4e1 * t7537) * t8446) * t7376;
t7235 = -t8090 * t8519 + 0.2e1 * t7807;
t7760 = t8125 * t8138;
t7884 = t7637 * t8091;
t8256 = -(-t7352 + t7850) * t7358 + 0.2e1 * t7760;
t8264 = 0.2e1 * t7085 * t8292 + t8157 * t8511 + ((-0.2e1 * t7373 * t8068 - 0.4e1 * t7745) * t7612 - 0.4e1 * t7760) * t7604 - t7235 * t7884 * t8522 + t8256;
t7233 = -t8102 * t8519 + 0.2e1 * t7813;
t7764 = t8131 * t8150;
t7894 = t7631 * t8103;
t8258 = -(-t7350 - 0.2e1 * t7911) * t7356 + 0.2e1 * t7764;
t8263 = 0.2e1 * t7081 * t8302 + t8161 * t8517 + ((-0.2e1 * t7371 * t8074 - 0.4e1 * t7749) * t7612 - 0.4e1 * t7764) * t7592 - t7233 * t7894 * t8524 + t8258;
t7234 = -t8096 * t8519 + 0.2e1 * t7810;
t7762 = t8128 * t8144;
t7889 = t7634 * t8097;
t8257 = -(-t7351 - 0.2e1 * t7907) * t7357 + 0.2e1 * t7762;
t8262 = 0.2e1 * t7083 * t8297 + t8159 * t8514 + ((-0.2e1 * t7372 * t8071 - 0.4e1 * t7747) * t7612 - 0.4e1 * t7762) * t7598 - t7234 * t7889 * t8523 + t8257;
t8246 = t7359 - t7305;
t8245 = t7361 - t7307;
t8244 = t7363 - t7309;
t8233 = t7314 * t8536;
t8232 = t7315 * t8535;
t8231 = t7316 * t8534;
t8230 = 0.2e1 * t8460;
t8229 = -0.2e1 * t8458;
t8228 = 0.2e1 * t8454;
t8227 = -0.2e1 * t8452;
t8226 = 0.2e1 * t8448;
t8225 = -0.2e1 * t8446;
t8195 = pkin(5) * t8361;
t7080 = t7091 + 0.2e1 * t7104;
t8171 = t7080 * t8402;
t7082 = t7089 + 0.2e1 * t7105;
t8170 = t7082 * t8394;
t7084 = t7090 + 0.2e1 * t7106;
t8169 = t7084 * t8386;
t7086 = t7107 * t8327 + t7092;
t8168 = t7086 * t8414;
t7087 = t7108 * t8325 + t7093;
t8167 = t7087 * t8412;
t7088 = t7109 * t8323 + t7094;
t8166 = t7088 * t8410;
t8162 = t7107 * t8382;
t8160 = t7108 * t8381;
t8158 = t7109 * t8380;
t7245 = t8533 - t7306;
t8156 = t7245 * t8458;
t7248 = t8532 - t7308;
t8155 = t7248 * t8452;
t7251 = t8531 - t7310;
t8154 = t7251 * t8446;
t7341 = t8545 * t7464 + t8573 * t7467 - t8057 * t7572;
t8123 = t7341 * t8405;
t7342 = t8544 * t7465 + t8574 * t7468 - t8056 * t7573;
t8122 = t7342 * t8397;
t7343 = t8543 * t7466 + t8575 * t7469 - t8055 * t7574;
t8121 = t7343 * t8389;
t7344 = -t8573 * t7464 + t8545 * t7467 + t8060 * t7572;
t8120 = t7344 * t8405;
t7345 = -t8574 * t7465 + t8544 * t7468 + t8059 * t7573;
t8119 = t7345 * t8397;
t7346 = -t8575 * t7466 + t8543 * t7469 + t8058 * t7574;
t8118 = t7346 * t8389;
t8117 = t7365 * t8415;
t8116 = t7366 * t8413;
t8115 = t7367 * t8411;
t7957 = t7464 * t8201;
t7368 = (t7957 * t8540 + t7822) * t7596 + ((t7458 * t7557 + t7554 * t7729) * t8500 - t8316 * t8563) * t7632 + (t7449 * t7557 + t7554 * t7711 - t7957) * pkin(6);
t8114 = t7368 * t8415;
t7956 = t7465 * t8200;
t7369 = (t7956 * t8540 + t7821) * t7602 + ((t7459 * t7558 + t7555 * t7728) * t8498 - t8314 * t8562) * t7635 + (t7450 * t7558 + t7555 * t7710 - t7956) * pkin(6);
t8113 = t7369 * t8413;
t7955 = t7466 * t8199;
t7370 = (t7955 * t8540 + t7820) * t7608 + ((t7460 * t7559 + t7556 * t7727) * t8496 - t8312 * t8561) * t7638 + (t7451 * t7559 + t7556 * t7709 - t7955) * pkin(6);
t8112 = t7370 * t8411;
t8111 = t7371 * t8316;
t8110 = t7371 * t8310;
t8109 = t7372 * t8314;
t8108 = t7372 * t8308;
t8107 = t7373 * t8312;
t8106 = t7373 * t8306;
t8101 = t7374 * t8400;
t8095 = t7375 * t8392;
t8089 = t7376 * t8384;
t8087 = t7377 * t8401;
t8086 = t7378 * t8393;
t8085 = t7379 * t8385;
t8084 = t7380 * t8401;
t8083 = t7381 * t8393;
t8082 = t7382 * t8385;
t8081 = t7383 * t8408;
t8080 = t7384 * t8407;
t8079 = t7385 * t8409;
t8078 = t7386 * t8408;
t8077 = t7387 * t8407;
t8076 = t7388 * t8409;
t8075 = t7413 * t8382;
t7415 = t7413 * t7414;
t8073 = t7415 * t8438;
t8072 = t7416 * t8381;
t7418 = t7416 * t7417;
t8070 = t7418 * t8436;
t8069 = t7419 * t8380;
t7421 = t7419 * t7420;
t8067 = t7421 * t8434;
t8066 = t7632 * t8382;
t8065 = t7635 * t8381;
t8064 = t7638 * t8380;
t8035 = t7593 * t8300;
t8034 = t7596 * t7359;
t8033 = t7599 * t8295;
t8032 = t7602 * t7361;
t8031 = t7605 * t8290;
t8030 = t7608 * t7363;
t7997 = t7593 * t8263;
t7996 = t7599 * t8262;
t7995 = t7605 * t8264;
t7994 = t7623 * t8236;
t7993 = t7626 * t8235;
t7992 = t7629 * t8234;
t7991 = t7377 * t8229;
t7990 = t7380 * t8229;
t7989 = t7378 * t8227;
t7988 = t7381 * t8227;
t7987 = t7379 * t8225;
t7986 = t7382 * t8225;
t7985 = 0.2e1 * t8034;
t7984 = 0.2e1 * t8032;
t7983 = 0.2e1 * t8030;
t7068 = t7081 * t7622 + t7107 * t8022;
t7978 = t7068 * t7622 - t8258 * t8302 - (t7233 * t7592 - t7813) * t8103;
t7069 = t7083 * t7625 + t7108 * t8020;
t7977 = t7069 * t7625 - t8257 * t8297 - (t7234 * t7598 - t7810) * t8097;
t7070 = t7085 * t7628 + t7109 * t8018;
t7976 = t7070 * t7628 - t8256 * t8292 - (t7235 * t7604 - t7807) * t8091;
t7353 = -0.2e1 * t8034;
t7338 = -t7359 + t7985;
t7672 = t7338 * t7587 + t7200 + t7359;
t7900 = t7414 * t8111;
t7804 = t7611 * t7900;
t7975 = ((t7353 + t7672) * t7622 - t7631 * t7804) * t7593 - t7086;
t7354 = -0.2e1 * t8032;
t7339 = -t7361 + t7984;
t7671 = t7339 * t7587 + t7201 + t7361;
t7899 = t7417 * t8109;
t7801 = t7611 * t7899;
t7974 = ((t7354 + t7671) * t7625 - t7634 * t7801) * t7599 - t7087;
t7355 = -0.2e1 * t8030;
t7340 = -t7363 + t7983;
t7670 = t7340 * t7587 + t7202 + t7363;
t7898 = t7420 * t8107;
t7798 = t7611 * t7898;
t7973 = ((t7355 + t7670) * t7628 - t7637 * t7798) * t7605 - t7088;
t7936 = t8349 * t8481;
t7935 = t8343 * t8478;
t7934 = t8337 * t8475;
t7933 = t7623 * t8156;
t7932 = t7632 * t8156;
t7931 = t7626 * t8155;
t7930 = t7635 * t8155;
t7929 = t7629 * t8154;
t7928 = t7638 * t8154;
t7927 = t7374 * t8147;
t7925 = t7314 * t8075;
t7922 = t7375 * t8141;
t7920 = t7315 * t8072;
t7917 = t7376 * t8135;
t7915 = t7316 * t8069;
t7896 = t7593 * t8102;
t7891 = t7599 * t8096;
t7886 = t7605 * t8090;
t7882 = t7415 * t8035;
t7881 = t7418 * t8033;
t7880 = t7421 * t8031;
t7858 = t8224 * t8460;
t7857 = 0.2e1 * t7925;
t7856 = t8223 * t8454;
t7855 = 0.2e1 * t7920;
t7854 = t8222 * t8448;
t7853 = 0.2e1 * t7915;
t7828 = t7593 * t7978;
t7827 = t7593 * ((-t7672 + t7985) * t7631 + (-t7086 - t7804) * t7622);
t7826 = t7599 * t7977;
t7825 = t7599 * ((-t7671 + t7984) * t7634 + (-t7087 - t7801) * t7625);
t7824 = t7605 * t7976;
t7823 = t7605 * ((-t7670 + t7983) * t7637 + (-t7088 - t7798) * t7628);
t7816 = t7245 * t7925;
t7815 = t7248 * t7920;
t7814 = t7251 * t7915;
t7803 = t8073 * t8349;
t7802 = t7371 * t7882;
t7800 = t8070 * t8343;
t7799 = t7372 * t7881;
t7797 = t8067 * t8337;
t7796 = t7373 * t7880;
t7795 = t7395 * t7896;
t7794 = t7397 * t7891;
t7793 = t7399 * t7886;
t7792 = t7247 * t7895;
t7791 = t7250 * t7890;
t7790 = t7253 * t7885;
t7765 = t7395 * t8101 * t8456;
t7763 = t7397 * t8095 * t8450;
t7761 = t7399 * t8089 * t8444;
t7756 = t7365 * t7795;
t7755 = t7366 * t7794;
t7754 = t7367 * t7793;
t7753 = t7368 * t7795;
t7752 = t7369 * t7794;
t7751 = t7370 * t7793;
t7750 = t7896 * t8424;
t7748 = t7891 * t8422;
t7746 = t7886 * t8420;
t7744 = -t7107 * (pkin(1) * t8328 + t7480 * t7622) + t7359 * (t7470 * t7622 + t7631 * t8195);
t7513 = t8519 * pkin(5);
t7743 = t7107 * ((pkin(1) * t7622 - pkin(5) * t8288) * t7611 - t7948) + t7359 * (t7470 * t7631 - t7513 * t7622);
t7742 = t7414 * t8438 + t8481;
t7741 = -t7108 * (pkin(1) * t8326 + t7481 * t7625) + t7361 * (t7471 * t7625 + t7634 * t8195);
t7740 = t7108 * ((pkin(1) * t7625 - pkin(5) * t8286) * t7611 - t7947) + t7361 * (t7471 * t7634 - t7513 * t7625);
t7739 = t7417 * t8436 + t8478;
t7738 = -t7109 * (pkin(1) * t8324 + t7479 * t7628) + t7363 * (t7472 * t7628 + t7637 * t8195);
t7737 = t7109 * ((pkin(1) * t7628 - pkin(5) * t8284) * t7611 - t7946) + t7363 * (t7472 * t7637 - t7513 * t7628);
t7736 = t7420 * t8434 - t8475;
t7717 = t7413 * t8480 - t7415 * t8439;
t7716 = -t7413 * t8481 - t8073;
t7715 = t7416 * t8477 - t7418 * t8437;
t7714 = -t7416 * t8478 - t8070;
t7713 = t7419 * t8474 - t7421 * t8435;
t7712 = t7419 * t8475 - t8067;
t7708 = t7593 * t7744;
t7707 = t7593 * t7743;
t7706 = t7599 * t7741;
t7705 = t7599 * t7740;
t7704 = t7605 * t7738;
t7703 = t7605 * t7737;
t7699 = -t7107 * t8402 + t7415 * t8110;
t7698 = -t7107 * t8401 - t7415 * t8111;
t7697 = -t7108 * t8394 + t7418 * t8108;
t7696 = -t7108 * t8393 - t7418 * t8109;
t7695 = -t7109 * t8386 + t7421 * t8106;
t7694 = -t7109 * t8385 - t7421 * t8107;
t7687 = t7742 * t8418;
t7686 = t7739 * t8417;
t7685 = t7736 * t8416;
t7681 = -t7413 * t7994 - t7415 * t7858;
t7588 = t7623 ^ 2;
t7680 = -t7107 * t7413 * t7588 - t7882 * t8230;
t7679 = -t7416 * t7993 - t7418 * t7856;
t7589 = t7626 ^ 2;
t7678 = -t7108 * t7416 * t7589 - t7881 * t8228;
t7677 = -t7419 * t7992 - t7421 * t7854;
t7590 = t7629 ^ 2;
t7676 = -t7109 * t7419 * t7590 - t7880 * t8226;
t7252 = -t7358 - 0.2e1 * t7310;
t7249 = -t7357 - 0.2e1 * t7308;
t7246 = -t7356 - 0.2e1 * t7306;
t7241 = t7268 - t7362;
t7240 = t7267 - t7364;
t7239 = t7266 - t7360;
t7229 = t7252 * t7628 - t7611 * t7884;
t7228 = t7249 * t7625 - t7611 * t7889;
t7227 = t7246 * t7622 - t7611 * t7894;
t7226 = t7252 * t7637 + t7628 * t7885;
t7225 = t7249 * t7634 + t7625 * t7890;
t7224 = t7246 * t7631 + t7622 * t7895;
t7196 = t7240 * t7574 + t7244 * t8189;
t7195 = t7241 * t7573 + t7243 * t8190;
t7194 = t7239 * t7572 + t7242 * t8191;
t7193 = t7240 * t8505 - t7244 * t8192;
t7192 = t7241 * t8506 - t7243 * t8193;
t7191 = t7239 * t8507 - t7242 * t8194;
t7151 = ((t7373 * t7970 - 0.2e1 * t7917) * t7420 + t8244) * t8292 + t8511 * t7790;
t7150 = ((t7372 * t7971 - 0.2e1 * t7922) * t7417 + t8245) * t8297 + t8514 * t7791;
t7149 = ((t7371 * t7972 - 0.2e1 * t7927) * t7414 + t8246) * t8302 + t8517 * t7792;
t7145 = (-0.2e1 * t7309 + t7355 + 0.2e1 * t7363) * t7604 - 0.4e1 * t7790 * t8292 + (-t8510 * t7917 + (t8362 * t8511 + t7608) * t7373) * t7420 - t8244;
t7144 = (-0.2e1 * t7307 + t7354 + 0.2e1 * t7361) * t7598 - 0.4e1 * t7791 * t8297 + (-t8513 * t7922 + (t8363 * t8514 + t7602) * t7372) * t7417 - t8245;
t7143 = (-0.2e1 * t7305 + t7353 + 0.2e1 * t7359) * t7592 - 0.4e1 * t7792 * t8302 + (-t8516 * t7927 + (t8364 * t8517 + t7596) * t7371) * t7414 - t8246;
t7079 = t8318 / 0.2e1 + t7107;
t7078 = t8319 / 0.2e1 + t7109;
t7077 = t8320 / 0.2e1 + t7108;
t7067 = t7085 * t7637 - t7109 * t8019;
t7066 = t7083 * t7634 - t7108 * t8021;
t7065 = t7081 * t7631 - t7107 * t8023;
t7052 = -0.2e1 * pkin(5) * t8172 + 0.2e1 * t7078 * t8505;
t7051 = -0.2e1 * pkin(5) * t8174 + 0.2e1 * t7079 * t8507;
t7050 = -0.2e1 * pkin(5) * t8173 + 0.2e1 * t7077 * t8506;
t7049 = -0.2e1 * t7075 * t8190 - 0.2e1 * t7077 * t7573;
t7048 = -0.2e1 * t7076 * t8189 - 0.2e1 * t7078 * t7574;
t7047 = -0.2e1 * t7074 * t8191 - 0.2e1 * t7079 * t7572;
t1 = [(-t7107 * t8427 - t7108 * t8426 - t7109 * t8425) * MDP(1) + (t7344 * t7802 + t7345 * t7799 + t7346 * t7796 + t7380 * t7680 + t7381 * t7678 + t7382 * t7676) * t8485 + (t7338 * t8120 + t7339 * t8119 + t7340 * t8118 + t7380 * t7681 + t7381 * t7679 + t7382 * t7677) * t8484 + (-t7380 * t8171 - t7381 * t8170 - t7382 * t8169 + (t7346 * t7695 + t7382 * t7928) * t7605 + (t7345 * t7697 + t7381 * t7930) * t7599 + (t7344 * t7699 + t7380 * t7932) * t7593) * t8483 + (-t7080 * t8084 - t7082 * t8083 - t7084 * t8082 + (t7346 * t7694 - t7382 * t7929) * t7605 + (t7345 * t7696 - t7381 * t7931) * t7599 + (t7344 * t7698 - t7380 * t7933) * t7593) * t8482 + (-t7081 * t8120 - t7083 * t8119 - t7085 * t8118 + (-t7081 * t8427 - t7083 * t8426 - t7085 * t8425) * t7612) * MDP(8) + (-t7050 * t8426 - t7051 * t8427 - t7052 * t8425 + (t7196 * t7986 + t7346 * t7712) * t7605 + (t7195 * t7988 + t7345 * t7714) * t7599 + (t7194 * t7990 + t7344 * t7716) * t7593) * MDP(9) + (-t7047 * t8427 - t7048 * t8425 - t7049 * t8426 + (t7193 * t7986 + t7346 * t7713) * t7605 + (t7192 * t7988 + t7345 * t7715) * t7599 + (t7191 * t7990 + t7344 * t7717) * t7593) * MDP(10) + ((t7149 * t8117 + t7150 * t8116 + t7151 * t8115) * t8321 - (t7346 * t7824 + t7382 * t8271) * t7419 - (t7345 * t7826 + t7381 * t8272) * t7416 - (t7344 * t7828 + t7380 * t8273) * t7413) * MDP(11) + ((t7143 * t8117 + t7144 * t8116 + t7145 * t8115) * t8321 - (t7346 * t7995 + t7382 * t8275) * t7419 - (t7345 * t7996 + t7381 * t8276) * t7416 - (t7344 * t7997 + t7380 * t8274) * t7413) * MDP(12) + (-(t7346 * t7823 + t7382 * t8265) * t7419 - (t7345 * t7825 + t7381 * t8266) * t7416 - (t7344 * t7827 + t7380 * t8267) * t7413 + ((t7068 * t8117 + t7069 * t8116 + t7070 * t8115) * t7611 + (-t7224 * t7756 - t7225 * t7755 - t7226 * t7754) * t7585) * t7653) * MDP(13) + (-(t7346 * t7973 + t7382 * t8268) * t7419 - (t7345 * t7974 + t7381 * t8269) * t7416 - (t7344 * t7975 + t7380 * t8270) * t7413 + ((t7065 * t8117 + t7066 * t8116 + t7067 * t8115) * t7611 + (t7227 * t7756 + t7228 * t7755 + t7229 * t7754) * t7585) * t7653) * MDP(14) + ((t7365 * t7765 + t7366 * t7763 + t7367 * t7761) * t8357 + (-t7086 * t8084 - t7087 * t8083 - t7088 * t8082 + (-t7367 * t8166 + (t7346 * t8461 + t7382 * t8231) * t8383) * t7605 + (-t7366 * t8167 + (t7345 * t8462 + t7381 * t8232) * t8391) * t7599 + (-t7365 * t8168 + (t7344 * t8463 + t7380 * t8233) * t8399) * t7593) * t7611) * MDP(15) + (-t7344 * t8073 - t7345 * t8070 - t7346 * t8067 - (-t7346 * t8475 + t7382 * t8277) * t7419 - (t7345 * t8478 + t7381 * t8279) * t7416 - (t7344 * t8481 + t7380 * t8281) * t7413 + (t7704 * t8440 + t7706 * t8441 + t7708 * t8442) * t8321) * MDP(16) + (t7344 * t7803 + t7345 * t7800 + t7346 * t7797 - (t7346 * t7934 + t7382 * t8278) * t7419 - (-t7345 * t7935 + t7381 * t8280) * t7416 - (-t7344 * t7936 + t7380 * t8282) * t7413 + (t7703 * t8440 + t7705 * t8441 + t7707 * t8442) * t8321) * MDP(17); (-t7107 * t8430 - t7108 * t8429 - t7109 * t8428) * MDP(1) + (t7341 * t7802 + t7342 * t7799 + t7343 * t7796 + t7377 * t7680 + t7378 * t7678 + t7379 * t7676) * t8485 + (t7338 * t8123 + t7339 * t8122 + t7340 * t8121 + t7377 * t7681 + t7378 * t7679 + t7379 * t7677) * t8484 + (-t7377 * t8171 - t7378 * t8170 - t7379 * t8169 + (t7343 * t7695 + t7379 * t7928) * t7605 + (t7342 * t7697 + t7378 * t7930) * t7599 + (t7341 * t7699 + t7377 * t7932) * t7593) * t8483 + (-t7080 * t8087 - t7082 * t8086 - t7084 * t8085 + (t7343 * t7694 - t7379 * t7929) * t7605 + (t7342 * t7696 - t7378 * t7931) * t7599 + (t7341 * t7698 - t7377 * t7933) * t7593) * t8482 + (-t7081 * t8123 - t7083 * t8122 - t7085 * t8121 + (-t7081 * t8430 - t7083 * t8429 - t7085 * t8428) * t7612) * MDP(8) + (-t7050 * t8429 - t7051 * t8430 - t7052 * t8428 + (t7196 * t7987 + t7343 * t7712) * t7605 + (t7195 * t7989 + t7342 * t7714) * t7599 + (t7194 * t7991 + t7341 * t7716) * t7593) * MDP(9) + (-t7047 * t8430 - t7048 * t8428 - t7049 * t8429 + (t7193 * t7987 + t7343 * t7713) * t7605 + (t7192 * t7989 + t7342 * t7715) * t7599 + (t7191 * t7991 + t7341 * t7717) * t7593) * MDP(10) + ((-t7149 * t8114 - t7150 * t8113 - t7151 * t8112) * t8321 - (t7343 * t7824 + t7379 * t8271) * t7419 - (t7342 * t7826 + t7378 * t8272) * t7416 - (t7341 * t7828 + t7377 * t8273) * t7413) * MDP(11) + ((-t7143 * t8114 - t7144 * t8113 - t7145 * t8112) * t8321 - (t7343 * t7995 + t7379 * t8275) * t7419 - (t7342 * t7996 + t7378 * t8276) * t7416 - (t7341 * t7997 + t7377 * t8274) * t7413) * MDP(12) + (-(t7343 * t7823 + t7379 * t8265) * t7419 - (t7342 * t7825 + t7378 * t8266) * t7416 - (t7341 * t7827 + t7377 * t8267) * t7413 + ((-t7068 * t8114 - t7069 * t8113 - t7070 * t8112) * t7611 + (t7224 * t7753 + t7225 * t7752 + t7226 * t7751) * t7585) * t7653) * MDP(13) + (-(t7343 * t7973 + t7379 * t8268) * t7419 - (t7342 * t7974 + t7378 * t8269) * t7416 - (t7341 * t7975 + t7377 * t8270) * t7413 + ((-t7065 * t8114 - t7066 * t8113 - t7067 * t8112) * t7611 + (-t7227 * t7753 - t7228 * t7752 - t7229 * t7751) * t7585) * t7653) * MDP(14) + ((-t7368 * t7765 - t7369 * t7763 - t7370 * t7761) * t8357 + (-t7086 * t8087 - t7087 * t8086 - t7088 * t8085 + (t7370 * t8166 + (t7343 * t8461 + t7379 * t8231) * t8383) * t7605 + (t7369 * t8167 + (t7342 * t8462 + t7378 * t8232) * t8391) * t7599 + (t7368 * t8168 + (t7341 * t8463 + t7377 * t8233) * t8399) * t7593) * t7611) * MDP(15) + (-t7341 * t8073 - t7342 * t8070 - t7343 * t8067 - (-t7343 * t8475 + t7379 * t8277) * t7419 - (t7342 * t8478 + t7378 * t8279) * t7416 - (t7341 * t8481 + t7377 * t8281) * t7413 + (-t7738 * t8112 - t7741 * t8113 - t7744 * t8114) * t8321) * MDP(16) + (t7341 * t7803 + t7342 * t7800 + t7343 * t7797 - (t7343 * t7934 + t7379 * t8278) * t7419 - (-t7342 * t7935 + t7378 * t8280) * t7416 - (-t7341 * t7936 + t7377 * t8282) * t7413 + (-t7737 * t8112 - t7740 * t8113 - t7743 * t8114) * t8321) * MDP(17); (t8158 + t8160 + t8162) * MDP(1) + (t7588 * t8162 + t7589 * t8160 + t7590 * t8158 + (-t7373 * t8416 + t8226 * t8380) * t7420 * t8031 + (-t7372 * t8417 + t8228 * t8381) * t7417 * t8033 + (-t7371 * t8418 + t8230 * t8382) * t7414 * t8035) * t8485 + (-t7338 * t8078 - t7339 * t8077 - t7340 * t8076 + (t7420 * t7854 + t7992) * t8380 + (t7417 * t7856 + t7993) * t8381 + (t7414 * t7858 + t7994) * t8382) * t8484 + (t7623 * t7080 * t8382 + t7626 * t7082 * t8381 + t7629 * t7084 * t8380 + (-t7638 * t7814 + (t7109 * t7629 - t7420 * t8106) * t8416) * t7605 + (-t7635 * t7815 + (t7108 * t7626 - t7417 * t8108) * t8417) * t7599 + (-t7632 * t7816 + (t7107 * t7623 - t7414 * t8110) * t8418) * t7593) * t8483 + (t7080 * t8066 + t7082 * t8065 + t7084 * t8064 + (t7629 * t7814 + (t7898 + t8473) * t8416) * t7605 + (t7626 * t7815 + (t7899 + t8476) * t8417) * t7599 + (t7623 * t7816 + (t7900 + t8479) * t8418) * t7593) * t8482 + (t7081 * t8078 + t7083 * t8077 + t7085 * t8076 + (t7081 * t8382 + t7083 * t8381 + t7085 * t8380) * t7612) * MDP(8) + (t7050 * t8381 + t7051 * t8382 + t7052 * t8380 + (t7196 * t7853 + t7685) * t7605 + (t7195 * t7855 + t7686) * t7599 + (t7194 * t7857 + t7687) * t7593) * MDP(9) + (t7047 * t8382 + t7048 * t8380 + t7049 * t8381 + (t7193 * t7853 + (t7420 * t8435 - t8474) * t8416) * t7605 + (t7192 * t7855 + (t7417 * t8437 - t8477) * t8417) * t7599 + (t7191 * t7857 + (t7414 * t8439 - t8480) * t8418) * t7593) * MDP(10) + (t8271 * t8380 + t8272 * t8381 + t8273 * t8382 + (t7150 * t8421 + t7387 * t7977) * t8407 + (t7149 * t8423 + t7386 * t7978) * t8408 + (t7151 * t8419 + t7388 * t7976) * t8409) * MDP(11) + (t8275 * t8380 + t8276 * t8381 + t8274 * t8382 + (t7144 * t8421 + t7387 * t8262) * t8407 + (t7143 * t8423 + t7386 * t8263) * t8408 + (t7145 * t8419 + t7388 * t8264) * t8409) * MDP(12) + (t8265 * t8380 + t8266 * t8381 + t8267 * t8382 + t7823 * t8416 + t7825 * t8417 + t7827 * t8418 + (t7068 * t8081 + t7069 * t8080 + t7070 * t8079 + (-t7224 * t7750 - t7225 * t7748 - t7226 * t7746) * t7611) * t7653) * MDP(13) + (t8268 * t8380 + t8269 * t8381 + t8270 * t8382 + t7973 * t8416 + t7974 * t8417 + t7975 * t8418 + (t7065 * t8081 + t7066 * t8080 + t7067 * t8079 + (t7227 * t7750 + t7228 * t7748 + t7229 * t7746) * t7611) * t7653) * MDP(14) + ((-t7086 * t8081 - t7087 * t8080 - t7088 * t8079) * t7653 + (t7086 * t8066 + t7087 * t8065 + t7088 * t8064 + (-t7262 * t8076 * t7364 + (-t7605 * t8069 * t8534 + t8089 * t8419 * t8539) * t7316) * t7629 + (-t7260 * t8077 * t7362 + (-t7599 * t8072 * t8535 + t8095 * t8421 * t8537) * t7315) * t7626 + (-t7258 * t8078 * t7360 + (-t7593 * t8075 * t8536 + t8101 * t8423 * t8538) * t7314) * t7623) * t7611) * MDP(15) + (t8277 * t8380 + t8279 * t8381 + t8281 * t8382 + t7685 + t7686 + t7687 + (t7704 * t8420 + t7706 * t8422 + t7708 * t8424) * t7653) * MDP(16) + (t8278 * t8380 + t8280 * t8381 + t8282 * t8382 - t7736 * t7628 * t8076 - t7739 * t7625 * t8077 - t7742 * t7622 * t8078 + (t7703 * t8420 + t7705 * t8422 + t7707 * t8424) * t7653) * MDP(17);];
taucX  = t1;
