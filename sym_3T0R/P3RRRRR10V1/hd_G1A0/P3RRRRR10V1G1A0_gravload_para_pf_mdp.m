% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G1A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:09
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V1G1A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G1A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G1A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G1A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G1A0_gravload_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G1A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G1A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G1A0_gravload_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:09:03
% EndTime: 2020-08-06 22:09:11
% DurationCPUTime: 8.30s
% Computational Cost: add. (2796->420), mult. (7206->731), div. (171->13), fcn. (6960->26), ass. (0->330)
t8763 = cos(pkin(3));
t8752 = t8763 ^ 2;
t8960 = t8752 * pkin(6);
t8762 = sin(pkin(3));
t8929 = t8762 * t8763;
t8782 = cos(qJ(3,1));
t8783 = cos(qJ(2,1));
t8774 = sin(qJ(2,1));
t8773 = sin(qJ(3,1));
t8885 = t8783 * t8773;
t8834 = t8774 * t8885;
t8888 = t8782 * t8762;
t8881 = pkin(2) * t8888;
t8759 = t8782 ^ 2;
t8886 = t8783 * t8759;
t8905 = t8773 * t8762;
t8742 = t8774 * pkin(6);
t8981 = t8742 + pkin(1);
t8991 = (pkin(2) * t8886 + t8782 * t8981) * t8763 - t8834 * t8881 + pkin(6) * (t8783 - 0.1e1) * (t8783 + 0.1e1) * t8905;
t8779 = cos(qJ(3,2));
t8780 = cos(qJ(2,2));
t8770 = sin(qJ(3,2));
t8771 = sin(qJ(2,2));
t8909 = t8770 * t8771;
t8836 = t8762 * t8909;
t8893 = t8779 * t8780;
t8878 = pkin(2) * t8893;
t8756 = t8779 ^ 2;
t8892 = t8780 * t8756;
t8910 = t8770 * t8762;
t8741 = t8771 * pkin(6);
t8982 = t8741 + pkin(1);
t8990 = (pkin(2) * t8892 + t8779 * t8982) * t8763 - t8836 * t8878 + pkin(6) * (t8780 - 0.1e1) * (t8780 + 0.1e1) * t8910;
t8776 = cos(qJ(3,3));
t8777 = cos(qJ(2,3));
t8767 = sin(qJ(3,3));
t8768 = sin(qJ(2,3));
t8914 = t8767 * t8768;
t8838 = t8762 * t8914;
t8899 = t8776 * t8777;
t8880 = pkin(2) * t8899;
t8753 = t8776 ^ 2;
t8898 = t8777 * t8753;
t8915 = t8767 * t8762;
t8740 = t8768 * pkin(6);
t8983 = t8740 + pkin(1);
t8989 = (pkin(2) * t8898 + t8776 * t8983) * t8763 - t8838 * t8880 + pkin(6) * (t8777 - 0.1e1) * (t8777 + 0.1e1) * t8915;
t8988 = -0.2e1 * pkin(6);
t8987 = 0.2e1 * pkin(6);
t8957 = t8773 * pkin(2);
t8730 = pkin(1) * t8957;
t8887 = t8782 * t8783;
t8903 = t8774 * t8782;
t8695 = pkin(2) * t8903 - t8783 * pkin(6);
t8936 = t8695 * t8763;
t8638 = 0.1e1 / (pkin(1) * t8936 + (-t8730 + (pkin(2) * t8887 + t8742) * pkin(5)) * t8762);
t8958 = t8770 * pkin(2);
t8729 = pkin(1) * t8958;
t8908 = t8771 * t8779;
t8694 = pkin(2) * t8908 - t8780 * pkin(6);
t8937 = t8694 * t8763;
t8637 = 0.1e1 / (pkin(1) * t8937 + (-t8729 + (t8878 + t8741) * pkin(5)) * t8762);
t8959 = t8767 * pkin(2);
t8728 = pkin(1) * t8959;
t8913 = t8768 * t8776;
t8693 = pkin(2) * t8913 - t8777 * pkin(6);
t8938 = t8693 * t8763;
t8636 = 0.1e1 / (pkin(1) * t8938 + (-t8728 + (t8880 + t8740) * pkin(5)) * t8762);
t8986 = pkin(1) * t8768;
t8985 = pkin(1) * t8771;
t8984 = pkin(1) * t8774;
t8766 = legFrame(1,3);
t8734 = sin(t8766);
t8737 = cos(t8766);
t8775 = sin(qJ(1,1));
t8784 = cos(qJ(1,1));
t8668 = t8734 * t8775 - t8784 * t8737;
t8785 = pkin(6) ^ 2;
t8786 = pkin(2) ^ 2;
t8824 = t8759 * t8786 - t8785;
t8980 = t8824 * t8668;
t8765 = legFrame(2,3);
t8733 = sin(t8765);
t8736 = cos(t8765);
t8772 = sin(qJ(1,2));
t8781 = cos(qJ(1,2));
t8667 = t8733 * t8772 - t8781 * t8736;
t8825 = t8756 * t8786 - t8785;
t8979 = t8825 * t8667;
t8764 = legFrame(3,3);
t8732 = sin(t8764);
t8735 = cos(t8764);
t8769 = sin(qJ(1,3));
t8778 = cos(qJ(1,3));
t8666 = t8732 * t8769 - t8778 * t8735;
t8826 = t8753 * t8786 - t8785;
t8978 = t8826 * t8666;
t8755 = t8777 ^ 2;
t8699 = (t8755 - 0.2e1) * t8959 - pkin(5);
t8715 = t8767 * pkin(5) + pkin(2);
t8966 = pkin(2) * t8753;
t8829 = t8715 - 0.2e1 * t8966;
t8897 = t8777 * t8767;
t8875 = pkin(6) * t8897;
t8971 = t8899 * t8960 - t8699 * t8776 * t8929 + (t8829 * t8752 - t8875 * t8929 - t8715 + t8966) * t8768;
t8758 = t8780 ^ 2;
t8700 = (t8758 - 0.2e1) * t8958 - pkin(5);
t8718 = t8770 * pkin(5) + pkin(2);
t8965 = pkin(2) * t8756;
t8828 = t8718 - 0.2e1 * t8965;
t8891 = t8780 * t8770;
t8874 = pkin(6) * t8891;
t8970 = t8893 * t8960 - t8700 * t8779 * t8929 + (t8828 * t8752 - t8874 * t8929 - t8718 + t8965) * t8771;
t8761 = t8783 ^ 2;
t8701 = (t8761 - 0.2e1) * t8957 - pkin(5);
t8721 = t8773 * pkin(5) + pkin(2);
t8964 = pkin(2) * t8759;
t8827 = t8721 - 0.2e1 * t8964;
t8969 = (-pkin(6) * t8834 - t8701 * t8782) * t8929 + t8887 * t8960 + (t8827 * t8752 - t8721 + t8964) * t8774;
t8968 = (t8752 - 0.1e1) * t8987;
t8967 = pkin(1) * pkin(2);
t8963 = pkin(2) * t8776;
t8962 = pkin(2) * t8779;
t8961 = pkin(2) * t8782;
t8731 = t8762 * g(3);
t8702 = t8769 * g(1) - t8778 * g(2);
t8703 = t8778 * g(1) + t8769 * g(2);
t8615 = (t8731 + (-t8702 * t8735 - t8703 * t8732) * t8763) * t8777 + t8768 * (t8702 * t8732 - t8703 * t8735);
t8953 = t8615 * t8767;
t8704 = t8772 * g(1) - t8781 * g(2);
t8705 = t8781 * g(1) + t8772 * g(2);
t8616 = (t8731 + (-t8704 * t8736 - t8705 * t8733) * t8763) * t8780 + t8771 * (t8704 * t8733 - t8705 * t8736);
t8952 = t8616 * t8770;
t8706 = g(1) * t8775 - g(2) * t8784;
t8707 = g(1) * t8784 + g(2) * t8775;
t8617 = (t8731 + (-t8706 * t8737 - t8707 * t8734) * t8763) * t8783 + t8774 * (t8706 * t8734 - t8707 * t8737);
t8951 = t8617 * t8773;
t8727 = pkin(1) * t8763 * pkin(6);
t8754 = 0.1e1 / t8776;
t8832 = t8763 * t8913;
t8882 = pkin(2) * pkin(5) * t8762;
t8932 = t8762 * (-pkin(5) * t8740 + t8728);
t8950 = 0.1e1 / ((-t8776 * t8882 + t8727) * t8777 - t8832 * t8967 + t8932) * t8754;
t8757 = 0.1e1 / t8779;
t8831 = t8763 * t8908;
t8931 = t8762 * (-pkin(5) * t8741 + t8729);
t8949 = 0.1e1 / ((-t8779 * t8882 + t8727) * t8780 - t8831 * t8967 + t8931) * t8757;
t8760 = 0.1e1 / t8782;
t8830 = t8763 * t8903;
t8930 = t8762 * (-pkin(5) * t8742 + t8730);
t8948 = 0.1e1 / ((-pkin(5) * t8881 + t8727) * t8783 - t8830 * t8967 + t8930) * t8760;
t8919 = t8763 * t8774;
t8926 = t8762 * t8783;
t8633 = 0.1e1 / ((pkin(1) * t8919 + pkin(5) * t8926) * t8961 - t8783 * t8727 - t8930);
t8947 = t8633 * t8760;
t8923 = t8763 * t8768;
t8928 = t8762 * t8777;
t8634 = 0.1e1 / ((pkin(1) * t8923 + pkin(5) * t8928) * t8963 - t8777 * t8727 - t8932);
t8946 = t8634 * t8754;
t8921 = t8763 * t8771;
t8927 = t8762 * t8780;
t8635 = 0.1e1 / ((pkin(1) * t8921 + pkin(5) * t8927) * t8962 - t8780 * t8727 - t8931);
t8945 = t8635 * t8757;
t8924 = t8763 * t8767;
t8944 = t8636 * (pkin(2) * t8924 + t8693 * t8762);
t8922 = t8763 * t8770;
t8943 = t8637 * (pkin(2) * t8922 + t8694 * t8762);
t8920 = t8763 * t8773;
t8942 = t8638 * (pkin(2) * t8920 + t8695 * t8762);
t8716 = pkin(5) + t8959;
t8935 = t8716 * t8762;
t8719 = pkin(5) + t8958;
t8934 = t8719 * t8762;
t8722 = pkin(5) + t8957;
t8933 = t8722 * t8762;
t8787 = 0.1e1 / pkin(2);
t8925 = t8762 * t8787;
t8918 = t8763 * t8776;
t8917 = t8763 * t8779;
t8916 = t8763 * t8782;
t8912 = t8769 * t8768;
t8911 = t8769 * t8777;
t8907 = t8772 * t8771;
t8906 = t8772 * t8780;
t8904 = t8773 * t8774;
t8902 = t8775 * t8774;
t8901 = t8775 * t8783;
t8900 = t8776 * t8762;
t8896 = t8778 * t8768;
t8895 = t8778 * t8777;
t8894 = t8779 * t8762;
t8890 = t8781 * t8771;
t8889 = t8781 * t8780;
t8884 = t8784 * t8774;
t8883 = t8784 * t8783;
t8873 = pkin(6) * t8929;
t8872 = pkin(2) * t8918;
t8871 = pkin(2) * t8917;
t8870 = pkin(2) * t8916;
t8724 = pkin(6) + t8986;
t8725 = pkin(6) + t8985;
t8726 = pkin(6) + t8984;
t8687 = t8732 * g(1) - t8735 * g(2);
t8690 = t8735 * g(1) + t8732 * g(2);
t8675 = t8763 * t8912 - t8895;
t8805 = t8675 * t8767 + t8769 * t8900;
t8591 = -t8690 * t8805 - ((t8763 * t8914 + t8900) * t8778 + t8769 * t8897) * t8687 - g(3) * (-t8838 + t8918);
t8863 = t8591 * t8950;
t8672 = t8832 - t8915;
t8648 = -t8672 * t8769 + t8776 * t8895;
t8592 = t8648 * t8690 - (t8672 * t8778 + t8769 * t8899) * t8687 + g(3) * (t8768 * t8900 + t8924);
t8862 = t8592 * t8950;
t8673 = t8831 - t8910;
t8649 = -t8673 * t8772 + t8779 * t8889;
t8688 = t8733 * g(1) - t8736 * g(2);
t8691 = t8736 * g(1) + t8733 * g(2);
t8593 = t8649 * t8691 - t8688 * (t8673 * t8781 + t8772 * t8893) + g(3) * (t8771 * t8894 + t8922);
t8861 = t8593 * t8949;
t8674 = t8830 - t8905;
t8650 = -t8674 * t8775 + t8782 * t8883;
t8689 = t8734 * g(1) - t8737 * g(2);
t8692 = t8737 * g(1) + t8734 * g(2);
t8594 = t8650 * t8692 - t8689 * (t8674 * t8784 + t8775 * t8887) + g(3) * (t8774 * t8888 + t8920);
t8860 = t8594 * t8948;
t8676 = t8763 * t8907 - t8889;
t8804 = t8676 * t8770 + t8772 * t8894;
t8595 = -t8804 * t8691 - t8688 * ((t8763 * t8909 + t8894) * t8781 + t8772 * t8891) - g(3) * (-t8836 + t8917);
t8859 = t8595 * t8949;
t8677 = t8763 * t8902 - t8883;
t8803 = t8677 * t8773 + t8775 * t8888;
t8596 = -t8803 * t8692 - t8689 * ((t8763 * t8904 + t8888) * t8784 + t8775 * t8885) - g(3) * (-t8762 * t8904 + t8916);
t8858 = t8596 * t8948;
t8841 = t8716 * t8929;
t8845 = (t8763 + 0.1e1) * (t8763 - 0.1e1) * t8786;
t8857 = (-t8768 * t8845 * t8898 + (t8755 * t8968 + t8777 * t8841 + t8724 - t8960) * t8963 - ((-t8752 * t8740 + t8983) * t8777 - t8768 * t8841) * pkin(6)) * t8946;
t8840 = t8719 * t8929;
t8856 = (-t8771 * t8845 * t8892 + (t8758 * t8968 + t8780 * t8840 + t8725 - t8960) * t8962 - ((-t8752 * t8741 + t8982) * t8780 - t8771 * t8840) * pkin(6)) * t8945;
t8839 = t8722 * t8929;
t8855 = (-t8774 * t8845 * t8886 + (t8761 * t8968 + t8783 * t8839 + t8726 - t8960) * t8961 - ((-t8752 * t8742 + t8981) * t8783 - t8774 * t8839) * pkin(6)) * t8947;
t8606 = (t8777 * t8873 + t8699 * t8752 + pkin(5) + (-t8755 + 0.1e1) * t8959) * t8776 - t8983 * t8897 + (t8752 * t8875 + t8829 * t8929) * t8768;
t8854 = t8606 * t8946;
t8607 = (t8780 * t8873 + t8700 * t8752 + pkin(5) + (-t8758 + 0.1e1) * t8958) * t8779 - t8982 * t8891 + (t8752 * t8874 + t8828 * t8929) * t8771;
t8853 = t8607 * t8945;
t8608 = (t8783 * t8873 + t8701 * t8752 + pkin(5) + (-t8761 + 0.1e1) * t8957) * t8782 - t8981 * t8885 + (t8827 * t8929 + t8885 * t8960) * t8774;
t8852 = t8608 * t8947;
t8851 = t8666 * t8915;
t8850 = t8667 * t8910;
t8849 = t8668 * t8905;
t8669 = t8732 * t8778 + t8769 * t8735;
t8848 = t8669 * t8915;
t8670 = t8733 * t8781 + t8772 * t8736;
t8847 = t8670 * t8910;
t8671 = t8734 * t8784 + t8775 * t8737;
t8846 = t8671 * t8905;
t8844 = t8778 * t8935;
t8843 = t8781 * t8934;
t8842 = t8784 * t8933;
t8837 = t8769 * t8935;
t8835 = t8772 * t8934;
t8833 = t8775 * t8933;
t8823 = t8666 * t8872;
t8822 = t8667 * t8871;
t8821 = t8668 * t8870;
t8820 = t8669 * t8872;
t8819 = t8670 * t8871;
t8818 = t8671 * t8870;
t8814 = t8826 * t8669;
t8813 = t8825 * t8670;
t8812 = t8824 * t8671;
t8717 = 0.2e1 * t8740 + pkin(1);
t8802 = t8717 * t8778 + t8837;
t8720 = 0.2e1 * t8741 + pkin(1);
t8801 = t8720 * t8781 + t8835;
t8723 = 0.2e1 * t8742 + pkin(1);
t8800 = t8723 * t8784 + t8833;
t8799 = t8724 * t8778 + t8768 * t8837;
t8798 = t8725 * t8781 + t8771 * t8835;
t8797 = t8726 * t8784 + t8774 * t8833;
t8678 = t8763 * t8895 - t8912;
t8684 = t8763 * t8911 + t8896;
t8618 = -g(3) * t8928 + t8687 * t8678 + t8690 * t8684;
t8679 = t8763 * t8896 + t8911;
t8619 = -t8690 * t8675 - t8687 * t8679 + t8768 * t8731;
t8793 = -t8615 * MDP(16) + (MDP(10) * t8619 + MDP(17) * t8953 + MDP(9) * t8618) * t8754;
t8680 = t8763 * t8889 - t8907;
t8685 = t8763 * t8906 + t8890;
t8620 = -g(3) * t8927 + t8688 * t8680 + t8691 * t8685;
t8681 = t8763 * t8890 + t8906;
t8621 = -t8691 * t8676 - t8688 * t8681 + t8771 * t8731;
t8792 = -t8616 * MDP(16) + (MDP(10) * t8621 + MDP(17) * t8952 + MDP(9) * t8620) * t8757;
t8682 = t8763 * t8883 - t8902;
t8686 = t8763 * t8901 + t8884;
t8622 = -g(3) * t8926 + t8689 * t8682 + t8692 * t8686;
t8683 = t8763 * t8884 + t8901;
t8623 = -t8692 * t8677 - t8689 * t8683 + t8774 * t8731;
t8791 = -t8617 * MDP(16) + (MDP(10) * t8623 + MDP(17) * t8951 + MDP(9) * t8622) * t8760;
t8609 = -t8690 * (t8679 * t8767 + t8778 * t8900) + t8687 * t8805;
t8610 = t8690 * (t8679 * t8776 - t8778 * t8915) + t8648 * t8687;
t8624 = t8690 * t8678 - t8687 * t8684;
t8625 = -t8687 * t8675 + t8690 * t8679;
t8642 = t8687 * t8778 + t8690 * t8769;
t8645 = -t8687 * t8769 + t8690 * t8778;
t8790 = t8624 * MDP(10) + t8610 * MDP(16) + t8609 * MDP(17) + t8642 * MDP(2) + t8645 * MDP(3) + t8625 * MDP(9);
t8611 = -t8691 * (t8681 * t8770 + t8781 * t8894) + t8688 * t8804;
t8612 = t8691 * (t8681 * t8779 - t8781 * t8910) + t8649 * t8688;
t8626 = t8691 * t8680 - t8688 * t8685;
t8627 = -t8688 * t8676 + t8691 * t8681;
t8643 = t8688 * t8781 + t8691 * t8772;
t8646 = -t8688 * t8772 + t8691 * t8781;
t8789 = t8626 * MDP(10) + t8612 * MDP(16) + t8611 * MDP(17) + t8643 * MDP(2) + t8646 * MDP(3) + t8627 * MDP(9);
t8613 = -t8692 * (t8683 * t8773 + t8784 * t8888) + t8689 * t8803;
t8614 = t8692 * (t8683 * t8782 - t8784 * t8905) + t8689 * t8650;
t8628 = t8692 * t8682 - t8689 * t8686;
t8629 = -t8689 * t8677 + t8692 * t8683;
t8644 = t8689 * t8784 + t8692 * t8775;
t8647 = -t8689 * t8775 + t8692 * t8784;
t8788 = t8628 * MDP(10) + t8614 * MDP(16) + t8613 * MDP(17) + t8644 * MDP(2) + t8647 * MDP(3) + t8629 * MDP(9);
t8662 = t8775 * t8723 - t8842;
t8661 = t8772 * t8720 - t8843;
t8660 = t8769 * t8717 - t8844;
t8653 = t8775 * t8726 - t8774 * t8842;
t8652 = t8772 * t8725 - t8771 * t8843;
t8651 = t8769 * t8724 - t8768 * t8844;
t8590 = (t8821 * t8987 + t8812) * t8761 + ((t8662 * t8737 + t8734 * t8800) * t8961 - t8919 * t8980) * t8783 + (t8653 * t8737 + t8734 * t8797 - t8821) * pkin(6);
t8589 = (t8822 * t8987 + t8813) * t8758 + ((t8661 * t8736 + t8733 * t8801) * t8962 - t8921 * t8979) * t8780 + (t8652 * t8736 + t8733 * t8798 - t8822) * pkin(6);
t8588 = (t8823 * t8987 + t8814) * t8755 + ((t8660 * t8735 + t8732 * t8802) * t8963 - t8923 * t8978) * t8777 + (t8651 * t8735 + t8732 * t8799 - t8823) * pkin(6);
t8587 = (t8818 * t8988 + t8980) * t8761 + ((t8734 * t8662 - t8800 * t8737) * t8961 + t8812 * t8919) * t8783 + (t8734 * t8653 - t8797 * t8737 + t8818) * pkin(6);
t8586 = (t8819 * t8988 + t8979) * t8758 + ((t8733 * t8661 - t8801 * t8736) * t8962 + t8813 * t8921) * t8780 + (t8733 * t8652 - t8798 * t8736 + t8819) * pkin(6);
t8585 = (t8820 * t8988 + t8978) * t8755 + ((t8732 * t8660 - t8802 * t8735) * t8963 + t8814 * t8923) * t8777 + (t8732 * t8651 - t8799 * t8735 + t8820) * pkin(6);
t1 = [-g(1) * MDP(18) + ((t8585 * t8863 + t8586 * t8859 + t8587 * t8858) * MDP(16) + (t8585 * t8862 + t8586 * t8861 + t8587 * t8860) * MDP(17)) * t8925 - (t8791 * (-t8991 * t8668 + t8969 * t8671 + t8849 * t8984) + t8788 * (t8668 * t8742 + t8671 * t8936 + (t8668 * t8887 - t8846) * pkin(2))) * t8638 - (t8792 * (-t8990 * t8667 + t8970 * t8670 + t8850 * t8985) + t8789 * (t8667 * t8741 + t8670 * t8937 + (t8667 * t8893 - t8847) * pkin(2))) * t8637 - (t8793 * (-t8989 * t8666 + t8971 * t8669 + t8851 * t8986) + t8790 * (t8666 * t8740 + t8669 * t8938 + (t8666 * t8899 - t8848) * pkin(2))) * t8636; -g(2) * MDP(18) + ((-t8588 * t8863 - t8589 * t8859 - t8590 * t8858) * MDP(16) + (-t8588 * t8862 - t8589 * t8861 - t8590 * t8860) * MDP(17)) * t8925 - (t8791 * (t8969 * t8668 + t8991 * t8671 - t8846 * t8984) + t8788 * (-t8671 * t8742 + t8668 * t8936 + (-t8671 * t8887 - t8849) * pkin(2))) * t8638 - (t8792 * (t8970 * t8667 + t8990 * t8670 - t8847 * t8985) + t8789 * (-t8670 * t8741 + t8667 * t8937 + (-t8670 * t8893 - t8850) * pkin(2))) * t8637 - (t8793 * (t8971 * t8666 + t8989 * t8669 - t8848 * t8986) + t8790 * (-t8669 * t8740 + t8666 * t8938 + (-t8669 * t8899 - t8851) * pkin(2))) * t8636; (t8642 * t8944 + t8643 * t8943 + t8644 * t8942) * MDP(2) + (t8645 * t8944 + t8646 * t8943 + t8647 * t8942) * MDP(3) + (t8618 * t8854 + t8620 * t8853 + t8622 * t8852 + t8625 * t8944 + t8627 * t8943 + t8629 * t8942) * MDP(9) + (t8619 * t8854 + t8621 * t8853 + t8623 * t8852 + t8624 * t8944 + t8626 * t8943 + t8628 * t8942) * MDP(10) + (-t8606 * t8634 * t8615 - t8607 * t8635 * t8616 - t8608 * t8633 * t8617 + t8610 * t8944 + t8612 * t8943 + t8614 * t8942) * MDP(16) + (t8609 * t8944 + t8611 * t8943 + t8613 * t8942 + t8852 * t8951 + t8853 * t8952 + t8854 * t8953) * MDP(17) - g(3) * MDP(18) + ((t8591 * t8857 + t8595 * t8856 + t8596 * t8855) * MDP(16) + (t8592 * t8857 + t8593 * t8856 + t8594 * t8855) * MDP(17)) * t8787;];
taugX  = t1;
