% Calculate inertia matrix for parallel robot
% P3RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% MX [3x3]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:09
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2(xP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G1A0_inertia_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 21:40:17
% EndTime: 2020-08-06 21:40:25
% DurationCPUTime: 7.32s
% Computational Cost: add. (10713->502), mult. (24183->827), div. (648->13), fcn. (20007->26), ass. (0->367)
t1371 = cos(pkin(3));
t1357 = t1371 ^ 2;
t1602 = t1357 * pkin(6);
t1376 = mrSges(3,3) - mrSges(2,2);
t1655 = t1376 * pkin(5) + Ifges(2,6);
t1370 = sin(pkin(3));
t1543 = t1370 * t1371;
t1377 = sin(qJ(3,3));
t1386 = cos(qJ(3,3));
t1291 = Ifges(3,5) * t1377 + Ifges(3,6) * t1386;
t1361 = t1386 ^ 2;
t1375 = Ifges(3,2) - Ifges(3,1);
t1378 = sin(qJ(2,3));
t1387 = cos(qJ(2,3));
t1529 = t1377 * t1386;
t1616 = Ifges(2,5) - Ifges(3,4);
t1621 = 2 * Ifges(3,4);
t1297 = t1377 * mrSges(3,2) - mrSges(2,1);
t1640 = -mrSges(3,1) * t1386 + t1297;
t1654 = (-t1291 + t1655) * t1387 + (t1640 * pkin(5) + t1361 * t1621 - t1375 * t1529 + t1616) * t1378;
t1380 = sin(qJ(3,2));
t1389 = cos(qJ(3,2));
t1292 = Ifges(3,5) * t1380 + Ifges(3,6) * t1389;
t1364 = t1389 ^ 2;
t1381 = sin(qJ(2,2));
t1390 = cos(qJ(2,2));
t1526 = t1380 * t1389;
t1298 = t1380 * mrSges(3,2) - mrSges(2,1);
t1639 = -mrSges(3,1) * t1389 + t1298;
t1653 = (-t1292 + t1655) * t1390 + (t1639 * pkin(5) + t1364 * t1621 - t1375 * t1526 + t1616) * t1381;
t1383 = sin(qJ(3,1));
t1392 = cos(qJ(3,1));
t1293 = Ifges(3,5) * t1383 + Ifges(3,6) * t1392;
t1367 = t1392 ^ 2;
t1384 = sin(qJ(2,1));
t1393 = cos(qJ(2,1));
t1523 = t1383 * t1392;
t1299 = t1383 * mrSges(3,2) - mrSges(2,1);
t1638 = -mrSges(3,1) * t1392 + t1299;
t1652 = (-t1293 + t1655) * t1393 + (t1638 * pkin(5) + t1367 * t1621 - t1375 * t1523 + t1616) * t1384;
t1521 = t1384 * t1393;
t1455 = t1383 * t1521;
t1606 = pkin(2) * t1392;
t1506 = t1370 * t1606;
t1540 = t1370 * t1383;
t1609 = pkin(2) * t1367;
t1344 = t1384 * pkin(6);
t1644 = t1344 + pkin(1);
t1651 = (t1392 * t1644 + t1393 * t1609) * t1371 - t1455 * t1506 + pkin(6) * (t1393 - 0.1e1) * (t1393 + 0.1e1) * t1540;
t1524 = t1381 * t1390;
t1457 = t1380 * t1524;
t1607 = pkin(2) * t1389;
t1507 = t1370 * t1607;
t1541 = t1370 * t1380;
t1610 = pkin(2) * t1364;
t1343 = t1381 * pkin(6);
t1645 = t1343 + pkin(1);
t1650 = (t1389 * t1645 + t1390 * t1610) * t1371 - t1457 * t1507 + pkin(6) * (t1390 - 0.1e1) * (t1390 + 0.1e1) * t1541;
t1527 = t1378 * t1387;
t1459 = t1377 * t1527;
t1608 = pkin(2) * t1386;
t1508 = t1370 * t1608;
t1542 = t1370 * t1377;
t1611 = pkin(2) * t1361;
t1342 = t1378 * pkin(6);
t1646 = t1342 + pkin(1);
t1649 = (t1386 * t1646 + t1387 * t1611) * t1371 - t1459 * t1508 + pkin(6) * (t1387 - 0.1e1) * (t1387 + 0.1e1) * t1542;
t1648 = -0.2e1 * pkin(6);
t1647 = 0.2e1 * pkin(6);
t1596 = t1383 * pkin(2);
t1322 = pkin(1) * t1596;
t1518 = t1392 * t1393;
t1494 = t1384 * t1606;
t1284 = -t1393 * pkin(6) + t1494;
t1553 = t1284 * t1371;
t1251 = 0.1e1 / (pkin(1) * t1553 + (-t1322 + (pkin(2) * t1518 + t1344) * pkin(5)) * t1370);
t1598 = t1380 * pkin(2);
t1321 = pkin(1) * t1598;
t1519 = t1389 * t1390;
t1496 = t1381 * t1607;
t1283 = -t1390 * pkin(6) + t1496;
t1554 = t1283 * t1371;
t1250 = 0.1e1 / (pkin(1) * t1554 + (-t1321 + (pkin(2) * t1519 + t1343) * pkin(5)) * t1370);
t1600 = t1377 * pkin(2);
t1320 = pkin(1) * t1600;
t1520 = t1386 * t1387;
t1498 = t1378 * t1608;
t1282 = -t1387 * pkin(6) + t1498;
t1555 = t1282 * t1371;
t1249 = 0.1e1 / (pkin(1) * t1555 + (-t1320 + (pkin(2) * t1520 + t1342) * pkin(5)) * t1370);
t1614 = pkin(1) * t1378;
t1613 = pkin(1) * t1381;
t1612 = pkin(1) * t1384;
t1374 = legFrame(1,3);
t1325 = sin(t1374);
t1328 = cos(t1374);
t1385 = sin(qJ(1,1));
t1394 = cos(qJ(1,1));
t1275 = t1325 * t1385 - t1394 * t1328;
t1399 = pkin(6) ^ 2;
t1401 = pkin(2) ^ 2;
t1444 = t1367 * t1401 - t1399;
t1643 = t1444 * t1275;
t1373 = legFrame(2,3);
t1324 = sin(t1373);
t1327 = cos(t1373);
t1382 = sin(qJ(1,2));
t1391 = cos(qJ(1,2));
t1274 = t1324 * t1382 - t1391 * t1327;
t1445 = t1364 * t1401 - t1399;
t1642 = t1445 * t1274;
t1372 = legFrame(3,3);
t1323 = sin(t1372);
t1326 = cos(t1372);
t1379 = sin(qJ(1,3));
t1388 = cos(qJ(1,3));
t1273 = t1323 * t1379 - t1388 * t1326;
t1446 = t1361 * t1401 - t1399;
t1641 = t1446 * t1273;
t1493 = Ifges(3,4) * t1529;
t1294 = 0.2e1 * t1493;
t1532 = t1375 * t1361;
t1617 = Ifges(3,1) + Ifges(2,3);
t1279 = t1294 + t1532 + t1617;
t1492 = Ifges(3,4) * t1526;
t1295 = 0.2e1 * t1492;
t1531 = t1375 * t1364;
t1280 = t1295 + t1531 + t1617;
t1491 = Ifges(3,4) * t1523;
t1296 = 0.2e1 * t1491;
t1530 = t1375 * t1367;
t1281 = t1296 + t1530 + t1617;
t1618 = Ifges(2,1) + Ifges(3,2);
t1453 = Ifges(2,2) + Ifges(3,3) - t1618;
t1634 = -t1453 - t1530;
t1633 = -t1453 - t1531;
t1632 = -t1453 - t1532;
t1398 = m(2) + m(3);
t1631 = (-t1398 * pkin(5) - (2 * mrSges(2,3))) * pkin(5);
t1363 = t1387 ^ 2;
t1288 = (t1363 - 0.2e1) * t1600 - pkin(5);
t1599 = t1377 * pkin(5);
t1307 = pkin(2) + t1599;
t1452 = t1307 - 0.2e1 * t1611;
t1624 = (-pkin(6) * t1459 - t1288 * t1386) * t1543 + t1520 * t1602 + (t1452 * t1357 - t1307 + t1611) * t1378;
t1366 = t1390 ^ 2;
t1289 = (t1366 - 0.2e1) * t1598 - pkin(5);
t1597 = t1380 * pkin(5);
t1310 = pkin(2) + t1597;
t1451 = t1310 - 0.2e1 * t1610;
t1623 = (-pkin(6) * t1457 - t1289 * t1389) * t1543 + t1519 * t1602 + (t1451 * t1357 - t1310 + t1610) * t1381;
t1369 = t1393 ^ 2;
t1290 = (t1369 - 0.2e1) * t1596 - pkin(5);
t1595 = t1383 * pkin(5);
t1313 = pkin(2) + t1595;
t1450 = t1313 - 0.2e1 * t1609;
t1622 = (-pkin(6) * t1455 - t1290 * t1392) * t1543 + t1518 * t1602 + (t1450 * t1357 - t1313 + t1609) * t1384;
t1620 = (t1357 - 0.1e1) * t1647;
t1615 = pkin(1) * t1371;
t1605 = pkin(5) * t1387;
t1604 = pkin(5) * t1390;
t1603 = pkin(5) * t1393;
t1588 = Ifges(3,4) * t1377;
t1587 = Ifges(3,4) * t1380;
t1586 = Ifges(3,4) * t1383;
t1585 = Ifges(3,6) * t1377 + Ifges(2,4);
t1584 = Ifges(3,6) * t1380 + Ifges(2,4);
t1583 = Ifges(3,6) * t1383 + Ifges(2,4);
t1276 = t1323 * t1388 + t1379 * t1326;
t1469 = t1276 * t1542;
t1210 = t1624 * t1273 + t1649 * t1276 - t1469 * t1614;
t1362 = 0.1e1 / t1386;
t1582 = t1210 * t1362;
t1277 = t1324 * t1391 + t1382 * t1327;
t1468 = t1277 * t1541;
t1211 = t1623 * t1274 + t1650 * t1277 - t1468 * t1613;
t1365 = 0.1e1 / t1389;
t1581 = t1211 * t1365;
t1278 = t1325 * t1394 + t1385 * t1328;
t1467 = t1278 * t1540;
t1212 = t1622 * t1275 + t1651 * t1278 - t1467 * t1612;
t1368 = 0.1e1 / t1392;
t1580 = t1212 * t1368;
t1472 = t1273 * t1542;
t1213 = -t1649 * t1273 + t1624 * t1276 + t1472 * t1614;
t1579 = t1213 * t1362;
t1471 = t1274 * t1541;
t1214 = -t1650 * t1274 + t1623 * t1277 + t1471 * t1613;
t1578 = t1214 * t1365;
t1470 = t1275 * t1540;
t1215 = -t1651 * t1275 + t1622 * t1278 + t1470 * t1612;
t1577 = t1215 * t1368;
t1231 = t1654 * t1370 + ((t1376 * t1378 - t1640 * t1387) * pkin(1) + t1279) * t1371;
t1576 = t1231 * t1362;
t1232 = t1653 * t1370 + ((t1376 * t1381 - t1639 * t1390) * pkin(1) + t1280) * t1371;
t1575 = t1232 * t1365;
t1233 = t1652 * t1370 + ((t1376 * t1384 - t1638 * t1393) * pkin(1) + t1281) * t1371;
t1574 = t1233 * t1368;
t1308 = pkin(5) + t1600;
t1316 = pkin(6) + t1614;
t1539 = t1370 * t1387;
t1462 = t1371 * t1539;
t1466 = (t1371 + 0.1e1) * (t1371 - 0.1e1) * t1401;
t1535 = t1371 * t1378;
t1549 = t1308 * t1370;
t1234 = -t1361 * t1466 * t1527 + (t1308 * t1462 + t1363 * t1620 + t1316 - t1602) * t1608 - ((-t1357 * t1342 + t1646) * t1387 - t1535 * t1549) * pkin(6);
t1402 = 0.1e1 / pkin(2);
t1573 = t1234 * t1402;
t1311 = pkin(5) + t1598;
t1317 = pkin(6) + t1613;
t1538 = t1370 * t1390;
t1461 = t1371 * t1538;
t1534 = t1371 * t1381;
t1548 = t1311 * t1370;
t1235 = -t1364 * t1466 * t1524 + (t1311 * t1461 + t1366 * t1620 + t1317 - t1602) * t1607 - ((-t1357 * t1343 + t1645) * t1390 - t1534 * t1548) * pkin(6);
t1572 = t1235 * t1402;
t1314 = pkin(5) + t1596;
t1318 = pkin(6) + t1612;
t1537 = t1370 * t1393;
t1460 = t1371 * t1537;
t1533 = t1371 * t1384;
t1547 = t1314 * t1370;
t1236 = -t1367 * t1466 * t1521 + (t1314 * t1460 + t1369 * t1620 + t1318 - t1602) * t1606 - ((-t1357 * t1344 + t1644) * t1393 - t1533 * t1547) * pkin(6);
t1571 = t1236 * t1402;
t1319 = pkin(6) * t1615;
t1546 = t1370 * (-pkin(5) * t1342 + t1320);
t1570 = 0.1e1 / ((-pkin(5) * t1508 + t1319) * t1387 - t1498 * t1615 + t1546) * t1362;
t1545 = t1370 * (-pkin(5) * t1343 + t1321);
t1569 = 0.1e1 / ((-pkin(5) * t1507 + t1319) * t1390 - t1496 * t1615 + t1545) * t1365;
t1544 = t1370 * (-pkin(5) * t1344 + t1322);
t1568 = 0.1e1 / ((-pkin(5) * t1506 + t1319) * t1393 - t1494 * t1615 + t1544) * t1368;
t1567 = 0.1e1 / ((pkin(1) * t1535 + pkin(5) * t1539) * t1608 - t1387 * t1319 - t1546) * t1362;
t1566 = 0.1e1 / ((pkin(1) * t1534 + pkin(5) * t1538) * t1607 - t1390 * t1319 - t1545) * t1365;
t1565 = 0.1e1 / ((pkin(1) * t1533 + pkin(5) * t1537) * t1606 - t1393 * t1319 - t1544) * t1368;
t1564 = t1249 * (t1282 * t1370 + t1371 * t1600);
t1563 = t1250 * (t1283 * t1370 + t1371 * t1598);
t1562 = t1251 * (t1284 * t1370 + t1371 * t1596);
t1558 = t1279 * t1362;
t1557 = t1280 * t1365;
t1556 = t1281 * t1368;
t1552 = t1291 * t1362;
t1551 = t1292 * t1365;
t1550 = t1293 * t1368;
t1536 = t1370 * t1402;
t1528 = t1377 * t1387;
t1525 = t1380 * t1390;
t1522 = t1383 * t1393;
t1516 = 0.2e1 * pkin(1) * t1376;
t1515 = mrSges(3,1) * t1599;
t1514 = mrSges(3,1) * t1597;
t1513 = mrSges(3,1) * t1595;
t1512 = 0.2e1 * t1543;
t1505 = t1371 * t1608;
t1504 = t1371 * t1607;
t1503 = t1371 * t1606;
t1465 = t1388 * t1549;
t1258 = t1379 * t1316 - t1378 * t1465;
t1309 = 0.2e1 * t1342 + pkin(1);
t1267 = t1379 * t1309 - t1465;
t1458 = t1379 * t1549;
t1408 = t1316 * t1388 + t1378 * t1458;
t1411 = t1309 * t1388 + t1458;
t1428 = t1446 * t1276;
t1440 = t1276 * t1505;
t1216 = (t1440 * t1648 + t1641) * t1363 + ((t1323 * t1267 - t1411 * t1326) * t1608 + t1428 * t1535) * t1387 + (t1323 * t1258 - t1408 * t1326 + t1440) * pkin(6);
t1484 = t1216 * t1570;
t1464 = t1391 * t1548;
t1259 = t1382 * t1317 - t1381 * t1464;
t1312 = 0.2e1 * t1343 + pkin(1);
t1268 = t1382 * t1312 - t1464;
t1456 = t1382 * t1548;
t1407 = t1317 * t1391 + t1381 * t1456;
t1410 = t1312 * t1391 + t1456;
t1427 = t1445 * t1277;
t1439 = t1277 * t1504;
t1217 = (t1439 * t1648 + t1642) * t1366 + ((t1324 * t1268 - t1410 * t1327) * t1607 + t1427 * t1534) * t1390 + (t1324 * t1259 - t1407 * t1327 + t1439) * pkin(6);
t1483 = t1217 * t1569;
t1463 = t1394 * t1547;
t1260 = t1385 * t1318 - t1384 * t1463;
t1315 = 0.2e1 * t1344 + pkin(1);
t1269 = t1385 * t1315 - t1463;
t1454 = t1385 * t1547;
t1406 = t1318 * t1394 + t1384 * t1454;
t1409 = t1315 * t1394 + t1454;
t1426 = t1444 * t1278;
t1438 = t1278 * t1503;
t1218 = (t1438 * t1648 + t1643) * t1369 + ((t1325 * t1269 - t1409 * t1328) * t1606 + t1426 * t1533) * t1393 + (t1325 * t1260 - t1406 * t1328 + t1438) * pkin(6);
t1482 = t1218 * t1568;
t1443 = t1273 * t1505;
t1219 = (t1443 * t1647 + t1428) * t1363 + ((t1267 * t1326 + t1323 * t1411) * t1608 - t1535 * t1641) * t1387 + (t1258 * t1326 + t1323 * t1408 - t1443) * pkin(6);
t1481 = t1219 * t1570;
t1442 = t1274 * t1504;
t1220 = (t1442 * t1647 + t1427) * t1366 + ((t1268 * t1327 + t1324 * t1410) * t1607 - t1534 * t1642) * t1390 + (t1259 * t1327 + t1324 * t1407 - t1442) * pkin(6);
t1480 = t1220 * t1569;
t1441 = t1275 * t1503;
t1221 = (t1441 * t1647 + t1426) * t1369 + ((t1269 * t1328 + t1325 * t1409) * t1606 - t1533 * t1643) * t1393 + (t1260 * t1328 + t1325 * t1406 - t1441) * pkin(6);
t1479 = t1221 * t1568;
t1478 = t1234 * t1567;
t1477 = t1235 * t1566;
t1476 = t1236 * t1565;
t1237 = (pkin(6) * t1462 + t1288 * t1357 + pkin(5) + (-t1363 + 0.1e1) * t1600) * t1386 - t1646 * t1528 + (t1452 * t1543 + t1528 * t1602) * t1378;
t1475 = t1237 * t1567;
t1238 = (pkin(6) * t1461 + t1289 * t1357 + pkin(5) + (-t1366 + 0.1e1) * t1598) * t1389 - t1645 * t1525 + (t1451 * t1543 + t1525 * t1602) * t1381;
t1474 = t1238 * t1566;
t1239 = (pkin(6) * t1460 + t1290 * t1357 + pkin(5) + (-t1369 + 0.1e1) * t1596) * t1392 - t1644 * t1522 + (t1450 * t1543 + t1522 * t1602) * t1384;
t1473 = t1239 * t1565;
t1397 = pkin(1) * mrSges(3,1);
t1449 = -t1378 * Ifges(3,5) + t1397;
t1448 = -t1381 * Ifges(3,5) + t1397;
t1447 = -t1384 * Ifges(3,5) + t1397;
t1437 = t1536 * t1570;
t1436 = t1536 * t1569;
t1435 = t1536 * t1568;
t1431 = Ifges(3,3) * t1437;
t1430 = Ifges(3,3) * t1436;
t1429 = Ifges(3,3) * t1435;
t1396 = pkin(1) * mrSges(3,2);
t1240 = ((-mrSges(3,1) * t1605 - t1378 * Ifges(3,6) + t1396) * t1377 + (-mrSges(3,2) * t1605 - t1449) * t1386 - t1387 * Ifges(3,3)) * t1370 - t1371 * ((mrSges(3,1) * t1614 - Ifges(3,5)) * t1377 + t1386 * (mrSges(3,2) * t1614 - Ifges(3,6)));
t1425 = t1240 * t1437;
t1241 = ((-mrSges(3,1) * t1604 - t1381 * Ifges(3,6) + t1396) * t1380 + (-mrSges(3,2) * t1604 - t1448) * t1389 - t1390 * Ifges(3,3)) * t1370 - t1371 * ((mrSges(3,1) * t1613 - Ifges(3,5)) * t1380 + t1389 * (mrSges(3,2) * t1613 - Ifges(3,6)));
t1424 = t1241 * t1436;
t1242 = ((-mrSges(3,1) * t1603 - t1384 * Ifges(3,6) + t1396) * t1383 + (-mrSges(3,2) * t1603 - t1447) * t1392 - t1393 * Ifges(3,3)) * t1370 - t1371 * ((mrSges(3,1) * t1612 - Ifges(3,5)) * t1383 + t1392 * (mrSges(3,2) * t1612 - Ifges(3,6)));
t1423 = t1242 * t1435;
t1422 = t1291 * t1437;
t1421 = t1292 * t1436;
t1420 = t1293 * t1435;
t1419 = Ifges(2,3) - Ifges(2,1) - t1375 + t1631;
t1418 = t1398 * pkin(1) ^ 2 + Ifges(1,3) + t1618 - t1631;
t1395 = pkin(5) * mrSges(3,2);
t1358 = -0.2e1 * t1395;
t1230 = t1275 * t1344 + t1278 * t1553 + (t1275 * t1518 - t1467) * pkin(2);
t1229 = t1274 * t1343 + t1277 * t1554 + (t1274 * t1519 - t1468) * pkin(2);
t1228 = t1273 * t1342 + t1276 * t1555 + (t1273 * t1520 - t1469) * pkin(2);
t1227 = -t1278 * t1344 + t1275 * t1553 + (-t1278 * t1518 - t1470) * pkin(2);
t1226 = -t1277 * t1343 + t1274 * t1554 + (-t1277 * t1519 - t1471) * pkin(2);
t1225 = -t1276 * t1342 + t1273 * t1555 + (-t1276 * t1520 - t1472) * pkin(2);
t1224 = ((-0.2e1 * t1491 + t1634) * t1369 - 0.2e1 * (-Ifges(3,5) * t1392 + t1583) * t1521 + 0.2e1 * t1530 + (t1358 + 0.4e1 * t1586) * t1392 - 0.2e1 * t1513 + t1419) * t1357 + t1652 * t1512 + (t1296 - t1634) * t1369 + 0.2e1 * (-pkin(1) * t1299 + t1583 * t1384 + t1447 * t1392) * t1393 - t1530 + 0.2e1 * (t1395 - t1586) * t1392 + t1384 * t1516 + 0.2e1 * t1513 + t1418;
t1223 = ((-0.2e1 * t1492 + t1633) * t1366 - 0.2e1 * (-Ifges(3,5) * t1389 + t1584) * t1524 + 0.2e1 * t1531 + (t1358 + 0.4e1 * t1587) * t1389 - 0.2e1 * t1514 + t1419) * t1357 + t1653 * t1512 + (t1295 - t1633) * t1366 + 0.2e1 * (-pkin(1) * t1298 + t1584 * t1381 + t1448 * t1389) * t1390 - t1531 + 0.2e1 * (t1395 - t1587) * t1389 + t1381 * t1516 + 0.2e1 * t1514 + t1418;
t1222 = ((-0.2e1 * t1493 + t1632) * t1363 - 0.2e1 * (-Ifges(3,5) * t1386 + t1585) * t1527 + 0.2e1 * t1532 + (t1358 + 0.4e1 * t1588) * t1386 - 0.2e1 * t1515 + t1419) * t1357 + t1654 * t1512 + (t1294 - t1632) * t1363 + 0.2e1 * (-pkin(1) * t1297 + t1585 * t1378 + t1449 * t1386) * t1387 - t1532 + 0.2e1 * (t1395 - t1588) * t1386 + t1378 * t1516 + 0.2e1 * t1515 + t1418;
t1209 = t1242 * t1562 + (Ifges(3,3) * t1571 + t1239 * t1293) * t1565;
t1208 = t1241 * t1563 + (Ifges(3,3) * t1572 + t1238 * t1292) * t1566;
t1207 = t1240 * t1564 + (Ifges(3,3) * t1573 + t1237 * t1291) * t1567;
t1206 = t1233 * t1562 + (t1239 * t1281 + t1293 * t1571) * t1565;
t1205 = t1232 * t1563 + (t1238 * t1280 + t1292 * t1572) * t1566;
t1204 = t1231 * t1564 + (t1237 * t1279 + t1291 * t1573) * t1567;
t1203 = t1224 * t1562 + (t1233 * t1239 + t1242 * t1571) * t1565;
t1202 = t1223 * t1563 + (t1232 * t1238 + t1241 * t1572) * t1566;
t1201 = t1222 * t1564 + (t1231 * t1237 + t1240 * t1573) * t1567;
t1200 = t1218 * t1429 - (t1215 * t1550 + t1230 * t1242) * t1251;
t1199 = t1217 * t1430 - (t1214 * t1551 + t1229 * t1241) * t1250;
t1198 = t1216 * t1431 - (t1213 * t1552 + t1228 * t1240) * t1249;
t1197 = -t1221 * t1429 - (t1212 * t1550 + t1227 * t1242) * t1251;
t1196 = -t1220 * t1430 - (t1211 * t1551 + t1226 * t1241) * t1250;
t1195 = -t1219 * t1431 - (t1210 * t1552 + t1225 * t1240) * t1249;
t1194 = t1218 * t1420 - (t1215 * t1556 + t1230 * t1233) * t1251;
t1193 = t1217 * t1421 - (t1214 * t1557 + t1229 * t1232) * t1250;
t1192 = t1216 * t1422 - (t1213 * t1558 + t1228 * t1231) * t1249;
t1191 = -t1221 * t1420 - (t1212 * t1556 + t1227 * t1233) * t1251;
t1190 = -t1220 * t1421 - (t1211 * t1557 + t1226 * t1232) * t1250;
t1189 = -t1219 * t1422 - (t1210 * t1558 + t1225 * t1231) * t1249;
t1188 = t1218 * t1423 - (t1215 * t1574 + t1224 * t1230) * t1251;
t1187 = t1217 * t1424 - (t1214 * t1575 + t1223 * t1229) * t1250;
t1186 = t1216 * t1425 - (t1213 * t1576 + t1222 * t1228) * t1249;
t1185 = -t1221 * t1423 - (t1212 * t1574 + t1224 * t1227) * t1251;
t1184 = -t1220 * t1424 - (t1211 * t1575 + t1223 * t1226) * t1250;
t1183 = -t1219 * t1425 - (t1210 * t1576 + t1222 * t1225) * t1249;
t1 = [m(4) - (t1188 * t1230 + t1194 * t1577) * t1251 - (t1187 * t1229 + t1193 * t1578) * t1250 - (t1186 * t1228 + t1192 * t1579) * t1249 + (t1198 * t1484 + t1199 * t1483 + t1200 * t1482) * t1536, -(t1188 * t1227 + t1194 * t1580) * t1251 - (t1187 * t1226 + t1193 * t1581) * t1250 - (t1186 * t1225 + t1192 * t1582) * t1249 + (-t1198 * t1481 - t1199 * t1480 - t1200 * t1479) * t1536, t1192 * t1475 + t1193 * t1474 + t1194 * t1473 + t1186 * t1564 + t1187 * t1563 + t1188 * t1562 + (t1198 * t1478 + t1199 * t1477 + t1200 * t1476) * t1402; -(t1185 * t1230 + t1191 * t1577) * t1251 - (t1184 * t1229 + t1190 * t1578) * t1250 - (t1183 * t1228 + t1189 * t1579) * t1249 + (t1195 * t1484 + t1196 * t1483 + t1197 * t1482) * t1536, m(4) - (t1185 * t1227 + t1191 * t1580) * t1251 - (t1184 * t1226 + t1190 * t1581) * t1250 - (t1183 * t1225 + t1189 * t1582) * t1249 + (-t1195 * t1481 - t1196 * t1480 - t1197 * t1479) * t1536, t1189 * t1475 + t1190 * t1474 + t1191 * t1473 + t1183 * t1564 + t1184 * t1563 + t1185 * t1562 + (t1195 * t1478 + t1196 * t1477 + t1197 * t1476) * t1402; -(t1203 * t1230 + t1206 * t1577) * t1251 - (t1202 * t1229 + t1205 * t1578) * t1250 - (t1201 * t1228 + t1204 * t1579) * t1249 + (t1207 * t1484 + t1208 * t1483 + t1209 * t1482) * t1536, -(t1203 * t1227 + t1206 * t1580) * t1251 - (t1202 * t1226 + t1205 * t1581) * t1250 - (t1201 * t1225 + t1204 * t1582) * t1249 + (-t1207 * t1481 - t1208 * t1480 - t1209 * t1479) * t1536, t1204 * t1475 + t1205 * t1474 + t1206 * t1473 + t1201 * t1564 + t1202 * t1563 + t1203 * t1562 + m(4) + (t1207 * t1478 + t1208 * t1477 + t1209 * t1476) * t1402;];
MX  = t1;
