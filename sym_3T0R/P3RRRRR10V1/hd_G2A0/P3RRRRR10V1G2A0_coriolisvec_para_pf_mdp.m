% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:43:23
% EndTime: 2020-08-06 22:48:53
% DurationCPUTime: 345.30s
% Computational Cost: add. (2646510->1944), mult. (6657489->3535), div. (84645->23), fcn. (5270355->26), ass. (0->1274)
t7428 = cos(qJ(3,3));
t7390 = 0.1e1 / t7428;
t8344 = 0.2e1 * t7390;
t7431 = cos(qJ(3,2));
t7396 = 0.1e1 / t7431;
t8343 = 0.2e1 * t7396;
t7434 = cos(qJ(3,1));
t7402 = 0.1e1 / t7434;
t8342 = 0.2e1 * t7402;
t7427 = sin(qJ(1,1));
t7436 = cos(qJ(1,1));
t7437 = xDP(3);
t7418 = legFrame(1,2);
t7359 = sin(t7418);
t7362 = cos(t7418);
t7438 = xDP(2);
t7439 = xDP(1);
t7570 = t7359 * t7438 - t7362 * t7439;
t7251 = t7427 * t7437 + t7436 * t7570;
t7272 = t7359 * t7439 + t7362 * t7438;
t7435 = cos(qJ(2,1));
t8171 = t7272 * t7435;
t7266 = pkin(6) * t8171;
t7197 = pkin(5) * t7251 - t7266;
t7248 = t7427 * t7570 - t7436 * t7437;
t7269 = pkin(5) * t7272;
t7425 = sin(qJ(3,1));
t7367 = t7425 * pkin(2);
t7409 = cos(pkin(3));
t7384 = t7409 ^ 2;
t7401 = t7434 ^ 2;
t7408 = sin(pkin(3));
t7426 = sin(qJ(2,1));
t8161 = (t7435 + 0.1e1) * (t7435 - 0.1e1);
t8259 = pkin(6) * t7408;
t7743 = t8161 * t8259;
t8085 = t7426 * t7435;
t7797 = t7408 * t8085;
t8269 = pkin(2) * t7251;
t7961 = t7426 * t8269;
t7405 = t7435 ^ 2;
t7354 = t7405 - 0.2e1;
t8009 = t7354 * t7367;
t8133 = t7408 * t7426;
t8017 = -0.2e1 * t8133;
t8256 = pkin(6) * t7435;
t7242 = t7251 * t8256;
t8039 = t7242 + t7269;
t8174 = t7248 * t7408;
t8266 = pkin(2) * t7401;
t8282 = 0.2e1 * t7401 - 0.1e1;
t7368 = t7426 * pkin(6);
t8335 = t7368 + pkin(1);
t7116 = ((-t7272 * t8009 + t8039) * t7434 + (t7197 * t7425 - t8282 * t8269) * t7426) * t7384 + (-(t7248 * t7435 + t7272 * t8017) * t8266 + ((-t7251 * t8009 + t7197) * t7408 - t8335 * t7248) * t7434 - (pkin(2) * t7272 + t7425 * t8039) * t8133) * t7409 + t7401 * t7961 + ((t7248 * t7797 + t7272 * t8161) * t7367 - t7269) * t7434 + ((pkin(1) * t8174 - t7197) * t7426 - t7248 * t7743 + pkin(1) * t8171) * t7425 - t7961;
t7348 = pkin(1) * t7367;
t8086 = t7426 * t7434;
t7296 = -pkin(2) * t8086 + t8256;
t8168 = t7296 * t7409;
t8081 = t7434 * t7435;
t8325 = -pkin(2) * t8081 - t7368;
t7227 = pkin(1) * t8168 + (t8325 * pkin(5) + t7348) * t7408;
t7219 = 0.1e1 / t7227;
t8181 = t7219 * t7402;
t7110 = t7116 * t8181;
t7100 = pkin(6) * t7110;
t8138 = t7408 * t7409;
t7522 = -t7251 * t8138 - t7272 * t7384;
t7194 = -t7272 - t7522;
t7331 = 0.2e1 * t7368 + pkin(1);
t7371 = pkin(1) * t7426;
t7335 = t7371 + pkin(6);
t7330 = t7367 + pkin(5);
t7489 = (t7251 * t7384 - t7272 * t8138 - t7251) * t7330;
t7507 = t7522 * pkin(6);
t7447 = pkin(6) ^ 2;
t7450 = pkin(2) ^ 2;
t8143 = t7401 * t7450;
t7755 = -t7447 + t8143;
t7609 = t7755 * t7408;
t7819 = t7426 * t8143;
t8261 = pkin(2) * t7434;
t8030 = pkin(6) * t8261;
t7954 = -0.2e1 * t8030;
t7140 = (t7194 * t7954 + t7248 * t7609) * t7405 + (t7194 * t7819 + (t7331 * t8174 + t7489) * t8261 + (t7272 * t8335 + t7426 * t7507) * pkin(6)) * t7435 - (t7272 * t7335 + t7507) * t8261 + pkin(6) * (t7335 * t8174 + t7426 * t7489);
t7287 = t7408 * (-pkin(5) * t7368 + t7348);
t8278 = pkin(1) * t7409;
t7342 = pkin(6) * t8278;
t8115 = t7409 * t7426;
t8014 = pkin(1) * t8115;
t7737 = t7434 * t8014;
t8127 = t7408 * t7434;
t7995 = pkin(2) * t8127;
t7209 = (-pkin(5) * t7995 + t7342) * t7435 - pkin(2) * t7737 + t7287;
t7202 = 0.1e1 / t7209;
t8202 = t7202 * t7402;
t7907 = t7140 * t8202;
t7122 = t7425 * t7907;
t7017 = t7122 - t7100;
t7451 = 0.1e1 / pkin(2);
t7695 = t7451 * t7907;
t7630 = pkin(5) * t7695;
t7020 = -t7100 + t7630;
t7179 = (-t7242 + pkin(2) * (t7251 * t8086 - t7272 * t7425)) * t7409 + (t7266 - (t7251 * t7425 + t7272 * t8086) * pkin(2)) * t7408 - t8325 * t7248;
t7173 = t7179 * t7219;
t7167 = t7409 * t7173;
t7056 = t7167 + t7110;
t7089 = -0.2e1 * t7100;
t7094 = pkin(1) * t7110;
t7134 = pkin(2) * t7907;
t7374 = pkin(1) * t7405;
t7311 = t7374 - t8335;
t7448 = pkin(5) ^ 2;
t7381 = t7448 + t7450;
t7453 = pkin(1) ^ 2;
t7787 = t7453 + t7381;
t7313 = t7447 + t7787;
t7319 = t7368 / 0.2e1 + pkin(1);
t7329 = pkin(5) * t7425 + pkin(2);
t7347 = pkin(5) * t7367;
t7338 = 0.2e1 * t7347;
t7341 = t7405 - 0.1e1 / 0.2e1;
t7351 = pkin(1) * t7368;
t8310 = 0.2e1 * pkin(6);
t7407 = pkin(1) * t8310;
t7441 = -0.3e1 * t7447;
t7443 = pkin(6) / 0.2e1;
t7097 = t7447 * t7110;
t7519 = -pkin(6) * t7122 + t7097;
t7597 = t7435 * t7695;
t7549 = t7425 * t7597;
t7128 = pkin(1) * t7695;
t7564 = t7426 * t7128;
t7598 = t7408 * t7695;
t7565 = pkin(1) * t7598;
t7845 = t7219 * t8085;
t7668 = t7179 * t7845;
t7573 = t7330 * t7668;
t7674 = t7330 * t7167;
t7636 = 0.2e1 * t7674;
t7649 = 0.3e1 * t7447 + t7787;
t7650 = t7426 * t7907;
t8220 = t7116 * t7402;
t7919 = t7408 * t8220;
t7653 = t8335 * t7919;
t7404 = t7435 * t7405;
t8180 = t7219 * t7408;
t7878 = t7179 * t8180;
t7671 = t7404 * t7878;
t8164 = (t7409 + 0.1e1) * (t7409 - 0.1e1);
t7672 = t8164 * t7173;
t8126 = t7408 * t7435;
t7979 = pkin(5) * t8126;
t7284 = t7979 + t8014;
t7403 = 0.1e1 / t7434 ^ 2;
t8107 = t7409 * t7435;
t7965 = pkin(1) * t8107;
t8195 = 0.1e1 / (pkin(6) * t7965 - t7284 * t8261 + t7287) * t7403;
t8222 = t7116 * t7219;
t7707 = t8195 * t8222;
t8290 = t7384 - 0.1e1;
t7734 = t8290 * t8085;
t7746 = pkin(6) * t7167;
t7782 = t7408 * t7342;
t7978 = pkin(6) * t8164;
t7786 = -0.2e1 * t7978;
t8035 = t7448 / 0.2e1 + t7450 / 0.2e1;
t7788 = t7447 + t8035;
t8033 = t7450 - t7447;
t7789 = t7347 + t8033;
t7705 = t7425 * t7110;
t7077 = pkin(2) * t7705;
t7093 = pkin(5) * t7110;
t7125 = pkin(6) * t7695;
t8045 = t7093 + t7125;
t7792 = t7077 + t8045;
t8116 = t7409 * t7425;
t7813 = t7408 * t8116;
t7400 = t7434 * t7401;
t8125 = t7408 * pkin(2) * t7450;
t7820 = t7400 * t8125;
t7836 = t7450 * t8164;
t7837 = t7434 * t8164;
t7846 = t7219 * t8143;
t7908 = t7140 * t8195;
t8219 = t7116 * t7450;
t7916 = t7402 * t8219;
t7953 = 0.2e1 * t8030;
t7975 = t7384 * t7368;
t7994 = pkin(2) * t8126;
t8048 = t7100 / 0.2e1 - t7122 / 0.2e1;
t7642 = pkin(6) * t7093;
t8051 = t7642 / 0.2e1 + pkin(6) * t7674;
t8060 = t7792 * t7426 + t7128;
t8160 = t7384 * t7447;
t8234 = t7020 * t7426;
t8302 = -0.2e1 * t7384;
t8142 = t7402 * t7409;
t7918 = t7116 * t8142;
t7071 = t7219 * t7918 / 0.2e1;
t8182 = t7219 * t7384;
t7827 = t7179 * t8182;
t8307 = 0.2e1 * t7827 + 0.2e1 * t7071 - t7173;
t8311 = -0.2e1 * pkin(6);
t8313 = 0.2e1 * pkin(1);
t6900 = (t7202 * (((t7017 * t7782 + (t7401 * t7916 * t8278 + ((t8313 + 0.3e1 * t7368 - 0.3e1 * t7975) * t8143 + pkin(6) * (t7319 * t8311 + t7426 * t8160)) * t7179) * t8180) * t7405 + (t7820 * t8307 + (t7426 * t7636 + t8060) * t7401 * t7836 + ((-(t7122 + t7089) * t7371 + t7519) * t7409 + ((t7347 + t7788) * t8302 + t7338 + 0.4e1 * t7351 + t7649) * t7173) * t7995 + t7426 * (-t7020 * t7367 / 0.2e1 - t7134 / 0.2e1 + t8051) * t7786) * t7435 + (t7819 * t8307 - t7017 * t8335 * t7409 + (t7407 + ((t7347 + t8035) * t8302 + t7338 + t7313) * t7426) * t7173) * t8259 + (-(t7441 + t8143) * t7671 + ((t7089 + t7630) * t7367 + t7134 - t7447 * t7695 - 0.4e1 * t8051) * t7405 + pkin(6) * (t7564 + t7636 + t7792)) * pkin(2) * t7837) * t7179 * t8181 + ((t7435 * t7672 * t8335 + t7565) * t8266 + (t7789 * t7405 * t7672 - (-t7907 + (t7167 * t7335 - t7020) * t7425) * t7994 + pkin(1) * t7650 * t8116) * t7434 + (-t7549 * t8278 - t7408 * ((t7094 - t8234) * t7425 - t7650) + (t8290 * t7434 * t7335 + t7311 * t7813 + t7329 * t7734) * t7173) * pkin(6)) * t7908) + (t7435 * t7056 * t7820 + (t7653 + (t7330 * t8085 * t8164 + (t7368 + t7374) * t8138) * t7179) * t7846 + (((t7371 + t7443) * t7167 + t8048) * t8126 - t7341 * t7330 * t7672) * t7953 - pkin(6) * (t7573 * t7978 + (t7746 * t7374 + (-t7746 + t7017) * t8335) * t7408)) * t7707) * t7451;
t7424 = sin(qJ(1,2));
t7433 = cos(qJ(1,2));
t7417 = legFrame(2,2);
t7358 = sin(t7417);
t7361 = cos(t7417);
t7571 = t7358 * t7438 - t7361 * t7439;
t7250 = t7424 * t7437 + t7433 * t7571;
t7271 = t7358 * t7439 + t7361 * t7438;
t7432 = cos(qJ(2,2));
t8172 = t7271 * t7432;
t7265 = pkin(6) * t8172;
t7196 = pkin(5) * t7250 - t7265;
t7247 = t7424 * t7571 - t7433 * t7437;
t7268 = pkin(5) * t7271;
t7422 = sin(qJ(3,2));
t7365 = t7422 * pkin(2);
t7395 = t7431 ^ 2;
t7423 = sin(qJ(2,2));
t8162 = (t7432 + 0.1e1) * (t7432 - 0.1e1);
t7744 = t8162 * t8259;
t8092 = t7423 * t7432;
t7800 = t7408 * t8092;
t8270 = pkin(2) * t7250;
t7962 = t7423 * t8270;
t7399 = t7432 ^ 2;
t7353 = t7399 - 0.2e1;
t8010 = t7353 * t7365;
t8135 = t7408 * t7423;
t8018 = -0.2e1 * t8135;
t8257 = pkin(6) * t7432;
t7241 = t7250 * t8257;
t8040 = t7241 + t7268;
t8175 = t7247 * t7408;
t8267 = pkin(2) * t7395;
t8285 = 0.2e1 * t7395 - 0.1e1;
t7366 = t7423 * pkin(6);
t8336 = t7366 + pkin(1);
t7115 = ((-t7271 * t8010 + t8040) * t7431 + (t7196 * t7422 - t8285 * t8270) * t7423) * t7384 + (-(t7247 * t7432 + t7271 * t8018) * t8267 + ((-t7250 * t8010 + t7196) * t7408 - t8336 * t7247) * t7431 - (pkin(2) * t7271 + t7422 * t8040) * t8135) * t7409 + t7395 * t7962 + ((t7247 * t7800 + t7271 * t8162) * t7365 - t7268) * t7431 + ((pkin(1) * t8175 - t7196) * t7423 - t7247 * t7744 + pkin(1) * t8172) * t7422 - t7962;
t7346 = pkin(1) * t7365;
t8093 = t7423 * t7431;
t7295 = -pkin(2) * t8093 + t8257;
t8169 = t7295 * t7409;
t8082 = t7431 * t7432;
t8324 = -pkin(2) * t8082 - t7366;
t7226 = pkin(1) * t8169 + (t8324 * pkin(5) + t7346) * t7408;
t7216 = 0.1e1 / t7226;
t8187 = t7216 * t7396;
t7108 = t7115 * t8187;
t7099 = pkin(6) * t7108;
t7523 = -t7250 * t8138 - t7271 * t7384;
t7193 = -t7271 - t7523;
t7327 = 0.2e1 * t7366 + pkin(1);
t7370 = pkin(1) * t7423;
t7334 = t7370 + pkin(6);
t7326 = t7365 + pkin(5);
t7490 = (t7250 * t7384 - t7271 * t8138 - t7250) * t7326;
t7508 = t7523 * pkin(6);
t8150 = t7395 * t7450;
t7756 = -t7447 + t8150;
t7613 = t7408 * t7756;
t7822 = t7423 * t8150;
t8263 = pkin(2) * t7431;
t8031 = pkin(6) * t8263;
t7956 = -0.2e1 * t8031;
t7139 = (t7193 * t7956 + t7247 * t7613) * t7399 + (t7193 * t7822 + (t7327 * t8175 + t7490) * t8263 + (t7271 * t8336 + t7423 * t7508) * pkin(6)) * t7432 - (t7271 * t7334 + t7508) * t8263 + pkin(6) * (t7334 * t8175 + t7423 * t7490);
t7286 = t7408 * (-pkin(5) * t7366 + t7346);
t8117 = t7409 * t7423;
t8015 = pkin(1) * t8117;
t7738 = t7431 * t8015;
t8129 = t7408 * t7431;
t7997 = pkin(2) * t8129;
t7208 = (-pkin(5) * t7997 + t7342) * t7432 - pkin(2) * t7738 + t7286;
t7200 = 0.1e1 / t7208;
t8204 = t7200 * t7396;
t7910 = t7139 * t8204;
t7121 = t7422 * t7910;
t7016 = t7121 - t7099;
t7698 = t7451 * t7910;
t7631 = pkin(5) * t7698;
t7019 = -t7099 + t7631;
t7178 = (-t7241 + pkin(2) * (t7250 * t8093 - t7271 * t7422)) * t7409 + (t7265 - (t7250 * t7422 + t7271 * t8093) * pkin(2)) * t7408 - t8324 * t7247;
t7171 = t7178 * t7216;
t7166 = t7409 * t7171;
t7053 = t7166 + t7108;
t7088 = -0.2e1 * t7099;
t7092 = pkin(1) * t7108;
t7133 = pkin(2) * t7910;
t7373 = pkin(1) * t7399;
t7310 = t7373 - t8336;
t7317 = t7366 / 0.2e1 + pkin(1);
t7325 = pkin(5) * t7422 + pkin(2);
t7345 = pkin(5) * t7365;
t7337 = 0.2e1 * t7345;
t7340 = t7399 - 0.1e1 / 0.2e1;
t7350 = pkin(1) * t7366;
t7096 = t7447 * t7108;
t7520 = -pkin(6) * t7121 + t7096;
t7599 = t7432 * t7698;
t7550 = t7422 * t7599;
t7127 = pkin(1) * t7698;
t7566 = t7423 * t7127;
t7600 = t7408 * t7698;
t7567 = pkin(1) * t7600;
t7848 = t7216 * t8092;
t7677 = t7178 * t7848;
t7574 = t7326 * t7677;
t7683 = t7326 * t7166;
t7637 = 0.2e1 * t7683;
t7651 = t7423 * t7910;
t8225 = t7115 * t7396;
t7924 = t7408 * t8225;
t7654 = t8336 * t7924;
t7398 = t7432 * t7399;
t8186 = t7216 * t7408;
t7883 = t7178 * t8186;
t7680 = t7398 * t7883;
t7681 = t8164 * t7171;
t8128 = t7408 * t7432;
t7980 = pkin(5) * t8128;
t7283 = t7980 + t8015;
t7397 = 0.1e1 / t7431 ^ 2;
t8110 = t7409 * t7432;
t8012 = pkin(1) * t8110;
t8196 = 0.1e1 / (pkin(6) * t8012 - t7283 * t8263 + t7286) * t7397;
t8227 = t7115 * t7216;
t7712 = t8196 * t8227;
t7735 = t8290 * t8092;
t7747 = pkin(6) * t7166;
t7790 = t7345 + t8033;
t7710 = t7422 * t7108;
t7076 = pkin(2) * t7710;
t7091 = pkin(5) * t7108;
t7124 = pkin(6) * t7698;
t8046 = t7091 + t7124;
t7793 = t7076 + t8046;
t8118 = t7409 * t7422;
t7815 = t7408 * t8118;
t7394 = t7431 * t7395;
t7823 = t7394 * t8125;
t7838 = t7431 * t8164;
t7849 = t7216 * t8150;
t7911 = t7139 * t8196;
t8224 = t7115 * t7450;
t7921 = t7396 * t8224;
t7955 = 0.2e1 * t8031;
t7976 = t7384 * t7366;
t7996 = pkin(2) * t8128;
t8049 = t7099 / 0.2e1 - t7121 / 0.2e1;
t7643 = pkin(6) * t7091;
t8052 = t7643 / 0.2e1 + pkin(6) * t7683;
t8061 = t7793 * t7423 + t7127;
t8235 = t7019 * t7423;
t8149 = t7396 * t7409;
t7923 = t7115 * t8149;
t7070 = t7216 * t7923 / 0.2e1;
t8188 = t7216 * t7384;
t7828 = t7178 * t8188;
t8308 = 0.2e1 * t7828 + 0.2e1 * t7070 - t7171;
t6899 = (t7200 * (((t7016 * t7782 + (t7395 * t7921 * t8278 + ((t8313 + 0.3e1 * t7366 - 0.3e1 * t7976) * t8150 + pkin(6) * (t7317 * t8311 + t7423 * t8160)) * t7178) * t8186) * t7399 + (t7823 * t8308 + (t7423 * t7637 + t8061) * t7395 * t7836 + ((-(t7121 + t7088) * t7370 + t7520) * t7409 + ((t7345 + t7788) * t8302 + t7337 + 0.4e1 * t7350 + t7649) * t7171) * t7997 + t7423 * (-t7019 * t7365 / 0.2e1 - t7133 / 0.2e1 + t8052) * t7786) * t7432 + (t7822 * t8308 - t7016 * t8336 * t7409 + (t7407 + ((t7345 + t8035) * t8302 + t7337 + t7313) * t7423) * t7171) * t8259 + (-(t7441 + t8150) * t7680 + ((t7088 + t7631) * t7365 + t7133 - t7447 * t7698 - 0.4e1 * t8052) * t7399 + pkin(6) * (t7566 + t7637 + t7793)) * pkin(2) * t7838) * t7178 * t8187 + ((t7432 * t7681 * t8336 + t7567) * t8267 + (t7790 * t7399 * t7681 - (-t7910 + (t7166 * t7334 - t7019) * t7422) * t7996 + pkin(1) * t7651 * t8118) * t7431 + (-t7550 * t8278 - t7408 * ((t7092 - t8235) * t7422 - t7651) + (t8290 * t7431 * t7334 + t7310 * t7815 + t7325 * t7735) * t7171) * pkin(6)) * t7911) + (t7432 * t7053 * t7823 + (t7654 + (t7326 * t8092 * t8164 + (t7366 + t7373) * t8138) * t7178) * t7849 + (((t7370 + t7443) * t7166 + t8049) * t8128 - t7340 * t7326 * t7681) * t7955 - pkin(6) * (t7574 * t7978 + (t7747 * t7373 + (-t7747 + t7016) * t8336) * t7408)) * t7712) * t7451;
t7421 = sin(qJ(1,3));
t7430 = cos(qJ(1,3));
t7416 = legFrame(3,2);
t7357 = sin(t7416);
t7360 = cos(t7416);
t7572 = t7357 * t7438 - t7360 * t7439;
t7249 = t7421 * t7437 + t7430 * t7572;
t7270 = t7357 * t7439 + t7360 * t7438;
t7429 = cos(qJ(2,3));
t8173 = t7270 * t7429;
t7264 = pkin(6) * t8173;
t7195 = pkin(5) * t7249 - t7264;
t7246 = t7421 * t7572 - t7430 * t7437;
t7267 = pkin(5) * t7270;
t7419 = sin(qJ(3,3));
t7363 = t7419 * pkin(2);
t7389 = t7428 ^ 2;
t7420 = sin(qJ(2,3));
t8163 = (t7429 + 0.1e1) * (t7429 - 0.1e1);
t7745 = t8163 * t8259;
t8099 = t7420 * t7429;
t7803 = t7408 * t8099;
t8271 = pkin(2) * t7249;
t7964 = t7420 * t8271;
t7393 = t7429 ^ 2;
t7352 = t7393 - 0.2e1;
t8011 = t7352 * t7363;
t8137 = t7408 * t7420;
t8019 = -0.2e1 * t8137;
t8258 = pkin(6) * t7429;
t7240 = t7249 * t8258;
t8041 = t7240 + t7267;
t8176 = t7246 * t7408;
t8268 = pkin(2) * t7389;
t8288 = 0.2e1 * t7389 - 0.1e1;
t7364 = t7420 * pkin(6);
t8337 = t7364 + pkin(1);
t7114 = ((-t7270 * t8011 + t8041) * t7428 + (t7195 * t7419 - t8288 * t8271) * t7420) * t7384 + (-(t7246 * t7429 + t7270 * t8019) * t8268 + ((-t7249 * t8011 + t7195) * t7408 - t8337 * t7246) * t7428 - (pkin(2) * t7270 + t7419 * t8041) * t8137) * t7409 + t7389 * t7964 + ((t7246 * t7803 + t7270 * t8163) * t7363 - t7267) * t7428 + ((pkin(1) * t8176 - t7195) * t7420 - t7246 * t7745 + pkin(1) * t8173) * t7419 - t7964;
t7344 = pkin(1) * t7363;
t8100 = t7420 * t7428;
t7294 = -pkin(2) * t8100 + t8258;
t8170 = t7294 * t7409;
t8083 = t7428 * t7429;
t8323 = -pkin(2) * t8083 - t7364;
t7225 = pkin(1) * t8170 + (t8323 * pkin(5) + t7344) * t7408;
t7213 = 0.1e1 / t7225;
t8193 = t7213 * t7390;
t7106 = t7114 * t8193;
t7098 = pkin(6) * t7106;
t7524 = -t7249 * t8138 - t7270 * t7384;
t7192 = -t7270 - t7524;
t7323 = 0.2e1 * t7364 + pkin(1);
t7369 = pkin(1) * t7420;
t7333 = t7369 + pkin(6);
t7322 = t7363 + pkin(5);
t7491 = (t7249 * t7384 - t7270 * t8138 - t7249) * t7322;
t7509 = t7524 * pkin(6);
t8157 = t7389 * t7450;
t7757 = -t7447 + t8157;
t7614 = t7408 * t7757;
t7825 = t7420 * t8157;
t8265 = pkin(2) * t7428;
t8032 = pkin(6) * t8265;
t7958 = -0.2e1 * t8032;
t7138 = (t7192 * t7958 + t7246 * t7614) * t7393 + (t7192 * t7825 + (t7323 * t8176 + t7491) * t8265 + (t7270 * t8337 + t7420 * t7509) * pkin(6)) * t7429 - (t7270 * t7333 + t7509) * t8265 + pkin(6) * (t7333 * t8176 + t7420 * t7491);
t7285 = t7408 * (-pkin(5) * t7364 + t7344);
t8119 = t7409 * t7420;
t8016 = pkin(1) * t8119;
t7739 = t7428 * t8016;
t8131 = t7408 * t7428;
t7999 = pkin(2) * t8131;
t7207 = (-pkin(5) * t7999 + t7342) * t7429 - pkin(2) * t7739 + t7285;
t7198 = 0.1e1 / t7207;
t8206 = t7198 * t7390;
t7913 = t7138 * t8206;
t7120 = t7419 * t7913;
t7015 = t7120 - t7098;
t7701 = t7451 * t7913;
t7632 = pkin(5) * t7701;
t7018 = -t7098 + t7632;
t7177 = (-t7240 + pkin(2) * (t7249 * t8100 - t7270 * t7419)) * t7409 + (t7264 - (t7249 * t7419 + t7270 * t8100) * pkin(2)) * t7408 - t8323 * t7246;
t7169 = t7177 * t7213;
t7165 = t7409 * t7169;
t7050 = t7165 + t7106;
t7087 = -0.2e1 * t7098;
t7104 = pkin(1) * t7106;
t7132 = pkin(2) * t7913;
t7372 = pkin(1) * t7393;
t7309 = t7372 - t8337;
t7315 = t7364 / 0.2e1 + pkin(1);
t7321 = pkin(5) * t7419 + pkin(2);
t7343 = pkin(5) * t7363;
t7336 = 0.2e1 * t7343;
t7339 = t7393 - 0.1e1 / 0.2e1;
t7349 = pkin(1) * t7364;
t7095 = t7447 * t7106;
t7521 = -pkin(6) * t7120 + t7095;
t7601 = t7429 * t7701;
t7551 = t7419 * t7601;
t7126 = pkin(1) * t7701;
t7568 = t7420 * t7126;
t7602 = t7408 * t7701;
t7569 = pkin(1) * t7602;
t7851 = t7213 * t8099;
t7686 = t7177 * t7851;
t7576 = t7322 * t7686;
t7692 = t7322 * t7165;
t7638 = 0.2e1 * t7692;
t7652 = t7420 * t7913;
t8230 = t7114 * t7390;
t7929 = t7408 * t8230;
t7655 = t8337 * t7929;
t7392 = t7429 * t7393;
t8192 = t7213 * t7408;
t7888 = t7177 * t8192;
t7689 = t7392 * t7888;
t7690 = t8164 * t7169;
t8130 = t7408 * t7429;
t7981 = pkin(5) * t8130;
t7282 = t7981 + t8016;
t7391 = 0.1e1 / t7428 ^ 2;
t8113 = t7409 * t7429;
t8013 = pkin(1) * t8113;
t8197 = 0.1e1 / (pkin(6) * t8013 - t7282 * t8265 + t7285) * t7391;
t8232 = t7114 * t7213;
t7717 = t8197 * t8232;
t7736 = t8290 * t8099;
t7748 = pkin(6) * t7165;
t7791 = t7343 + t8033;
t7715 = t7419 * t7106;
t7075 = pkin(2) * t7715;
t7090 = pkin(5) * t7106;
t7123 = pkin(6) * t7701;
t8047 = t7090 + t7123;
t7794 = t7075 + t8047;
t8120 = t7409 * t7419;
t7817 = t7408 * t8120;
t7388 = t7428 * t7389;
t7826 = t7388 * t8125;
t7839 = t7428 * t8164;
t7852 = t7213 * t8157;
t7914 = t7138 * t8197;
t8229 = t7114 * t7450;
t7926 = t7390 * t8229;
t7957 = 0.2e1 * t8032;
t7977 = t7384 * t7364;
t7998 = pkin(2) * t8130;
t8050 = t7098 / 0.2e1 - t7120 / 0.2e1;
t7644 = pkin(6) * t7090;
t8053 = t7644 / 0.2e1 + pkin(6) * t7692;
t8062 = t7794 * t7420 + t7126;
t8236 = t7018 * t7420;
t8156 = t7390 * t7409;
t7928 = t7114 * t8156;
t7069 = t7213 * t7928 / 0.2e1;
t8194 = t7213 * t7384;
t7829 = t7177 * t8194;
t8309 = 0.2e1 * t7829 + 0.2e1 * t7069 - t7169;
t6898 = (t7198 * (((t7015 * t7782 + (t7389 * t7926 * t8278 + ((t8313 + 0.3e1 * t7364 - 0.3e1 * t7977) * t8157 + pkin(6) * (t7315 * t8311 + t7420 * t8160)) * t7177) * t8192) * t7393 + (t7826 * t8309 + (t7420 * t7638 + t8062) * t7389 * t7836 + ((-(t7120 + t7087) * t7369 + t7521) * t7409 + ((t7343 + t7788) * t8302 + t7336 + 0.4e1 * t7349 + t7649) * t7169) * t7999 + (-t7018 * t7363 / 0.2e1 - t7132 / 0.2e1 + t8053) * t7420 * t7786) * t7429 + (t7825 * t8309 - t7015 * t8337 * t7409 + (t7407 + ((t7343 + t8035) * t8302 + t7336 + t7313) * t7420) * t7169) * t8259 + (-(t7441 + t8157) * t7689 + ((t7087 + t7632) * t7363 + t7132 - t7447 * t7701 - 0.4e1 * t8053) * t7393 + pkin(6) * (t7568 + t7638 + t7794)) * pkin(2) * t7839) * t7177 * t8193 + ((t7429 * t7690 * t8337 + t7569) * t8268 + (t7791 * t7393 * t7690 - (-t7913 + (t7165 * t7333 - t7018) * t7419) * t7998 + pkin(1) * t7652 * t8120) * t7428 + (-t7551 * t8278 - t7408 * ((t7104 - t8236) * t7419 - t7652) + (t8290 * t7428 * t7333 + t7309 * t7817 + t7321 * t7736) * t7169) * pkin(6)) * t7914) + (t7429 * t7050 * t7826 + (t7655 + (t7322 * t8099 * t8164 + (t7364 + t7372) * t8138) * t7177) * t7852 + (((t7369 + t7443) * t7165 + t8050) * t8130 - t7339 * t7322 * t7690) * t7957 - pkin(6) * (t7576 * t7978 + (t7748 * t7372 + (-t7748 + t7015) * t8337) * t7408)) * t7717) * t7451;
t7014 = pkin(6) * t7705 - t7907;
t7446 = -0.2e1 * pkin(1);
t7621 = t7435 * pkin(5) * t7919;
t7874 = t7179 * t8126;
t8140 = t7402 * t7426;
t7917 = t7116 * t8140;
t8253 = t7405 * pkin(6);
t8275 = pkin(1) * t7425;
t8294 = -0.2e1 * t7425;
t6924 = ((-t7653 + ((t7374 - 0.2e1 * t7368 + t7446) * t8138 + pkin(5) * t7734) * t7179) * t7219 * t7401 + ((-t8253 / 0.2e1 + t7335) * t7827 * t8294 + ((-t7329 * t7874 - t7917 * t8275) * t7219 - t7014) * t7409 + t7425 * (-t7621 + t7179 * (t7335 - t8253)) * t7219) * t7434 - t7384 * t7573 + (pkin(1) * t7597 - t7311 * t7878) * t7409 + ((-t7020 - t7122) * t7426 + t7094) * t7408 + t7573) * t7202 * t7908;
t8237 = t7014 * t7408;
t7005 = t8335 * t8237;
t7080 = t7435 * t7094;
t7444 = pkin(5) / 0.2e1;
t7318 = t7367 + t7444;
t7558 = pkin(6) * t7329 * t7668;
t7627 = pkin(6) * t7425 * t7878;
t8165 = t7354 * t7384;
t7758 = -t7405 + t8165;
t7807 = t7408 * t8107;
t8020 = -0.2e1 * t8138;
t8145 = t7400 * t7450;
t8280 = t7405 - 0.1e1;
t7606 = ((t7173 + (t7179 * t7758 - t7918) * t7219) * t8145 - (t7080 * t7409 - t8060 * t7408 + (t7435 * (-t7368 + pkin(1)) * t7384 + (t7318 * t8020 + t8256) * t7426) * t7173) * t8266 + ((t7335 * t7409 + t7979) * t7017 + (-(t7351 - t7789) * t7384 + (-pkin(6) * t7330 + t7348 * t7426) * t7807 + (-t7384 * t7405 + t8280) * pkin(2) * t7329) * t7173) * t7434 - t7384 * t7558 - t7311 * t7409 * t7627 + t7558 + t7005) * t7707;
t7555 = t7134 - t7642;
t6969 = pkin(2) * t7020 + t7425 * t7555;
t8291 = t7093 / 0.2e1;
t7011 = t8291 + t7125 / 0.2e1;
t7103 = t7219 * t7916;
t7220 = 0.1e1 / t7227 ^ 2;
t7445 = 0.2e1 * pkin(5);
t7406 = pkin(2) * t7445;
t7161 = t7219 * t7874;
t7582 = t7318 * t7161;
t7648 = -0.3e1 * t7450 - t7447 - t7448 - t7453;
t7875 = t7179 * t8133;
t7670 = t7219 * t7875;
t8178 = t7219 * t7435;
t7876 = t7179 * t8178;
t7673 = t7331 * t7876;
t7704 = t7219 * t7917;
t7706 = t7405 * t7110;
t7840 = t7354 * t8143;
t8003 = t7405 * t7367;
t8144 = t7401 * t7426;
t8004 = pkin(2) * t8144;
t8036 = t7448 / 0.3e1 + t7450;
t8037 = -t7447 / 0.3e1 - 0.2e1 / 0.3e1 * t7450;
t8038 = t7447 / 0.2e1 + t7450;
t8054 = t7077 + t7125;
t8139 = t7405 * t7447;
t8213 = t7179 * t7402;
t8297 = -0.2e1 * t7408;
t8298 = -0.2e1 * t7405;
t8303 = 0.3e1 * t7409 * t7384;
t8338 = -0.4e1 * pkin(6);
t7728 = (((t7405 - 0.4e1 / 0.3e1) * t8145 + ((-0.2e1 / 0.3e1 * t7347 + t8037) * t7405 + 0.4e1 / 0.3e1 * t7347 + t8036) * t7434 + (0.4e1 / 0.3e1 * t8266 - 0.2e1 / 0.3e1 * t7329) * pkin(6) * t8085) * t7173 * t8303 + (t7840 * t8222 - ((t7094 + t8234) * t7435 + (-0.4e1 * t7330 + t8003) * t7670) * t8266 + (t7582 * t8338 - t7097 + t7103 + (-pkin(2) * t7706 + (-t7405 * t8045 + t7671 * t8310 + t7093 + 0.2e1 * t7125) * t7425) * pkin(2) + (0.2e1 * t7140 * t7202 * t7425 - pkin(6) * t8222) * pkin(1) * t8140) * t7434 + t7426 * (t6969 * t7435 + (-t7406 + (-t7381 + t8139) * t7425) * t7878)) * t7384 + ((-0.3e1 * t7405 + 0.3e1) * t8145 * t7173 - (t7405 * t7565 + 0.2e1 * t7673 + ((t8291 + t8054) * t7426 + t7128) * t8297) * t8266 + (((pkin(1) * t7704 + t7020) * t7367 + t7555) * t8126 + (0.2e1 * (t7347 + t8038) * t7405 - 0.4e1 * t7347 - 0.2e1 * t7351 + t7648) * t7173) * t7434 - t8237 * t7374 + 0.2e1 * t7558 + t7005) * t7409 - t8280 * t7103 * t7400 + (t7020 * t7435 + (-t7367 - t7445 + t8003) * t7878) * t8004 + 0.2e1 * ((t7405 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t7110 + (t7011 * t7405 - t7564 / 0.2e1 - t7011 + (-pkin(6) * t7404 + t7335 * t7435) * t7878) * t7425) * t8261 + t7319 * t7627 * t8298 - t6969 * t8085 + ((t7313 * t7425 + t7406) * t7426 + t7425 * t7407) * t7878) * t7220 * t8213;
t6894 = t6924 - t7606 - t7728;
t8332 = t7116 ^ 2 * t7403;
t7109 = t7220 * t8332;
t7452 = 0.1e1 / pkin(2) ^ 2;
t7131 = t7140 ^ 2 * t7403 / t7209 ^ 2 * t7452;
t7023 = t7109 + t7131;
t7857 = t7202 * t8181;
t7676 = t7179 * t7857;
t7537 = t7140 * t7451 * t7676;
t7516 = 0.2e1 * t7537;
t8201 = t7202 * t7451;
t7909 = t7140 * t8201;
t6981 = (((pkin(2) * t7435 + pkin(6) * t8086) * t7408 + pkin(6) * t8116) * t7173 + t7014) * t7140 * t7857;
t7967 = pkin(6) * t8081;
t8000 = t7408 * t7367;
t8034 = t7447 + t7450;
t8105 = t7409 * t7447;
t8312 = -0.2e1 * pkin(2);
t8329 = t7220 * ((-(t7840 - t8139 + (0.2e1 * t7426 * t7967 + t7329) * pkin(2)) * t7827 + ((t7582 + t8048) * t8310 + (t7318 * t7875 * t8312 + t8219) * t7219 * t7434) * t7409 + t7179 * t7846 * t8161 + (-t8054 * t8133 + t7673) * t8261 + t7014 * t7994 + (-t8139 + t7347 + t7351 + t8034) * t7173) * t7179 + (t7056 * t8143 + (t7296 * t8000 + t8105) * t7173 + t7519) * t8220);
t6915 = t6981 - t8329;
t7937 = t6915 * t8133;
t8179 = t7219 * t7426;
t8240 = t6915 * t7435;
t8272 = pkin(1) * t7435;
t8341 = -(pkin(5) * t6894 * t7426 - pkin(1) * t6900) * t7408 + t8240 * t8313 - pkin(5) * (t7023 * t8126 + t7384 * t7516) - (pkin(1) * t7116 * t8179 - pkin(5) * t7909) * t7173 * t8342 + (-0.2e1 * t7179 * t7220 * t7621 + t6894 * t8272 - t7023 * t7371 - t7937 * t7445) * t7409;
t7013 = pkin(6) * t7710 - t7910;
t7622 = t7432 * pkin(5) * t7924;
t7879 = t7178 * t8128;
t8147 = t7396 * t7423;
t7922 = t7115 * t8147;
t8254 = t7399 * pkin(6);
t8276 = pkin(1) * t7422;
t8295 = -0.2e1 * t7422;
t6923 = ((-t7654 + ((t7373 - 0.2e1 * t7366 + t7446) * t8138 + pkin(5) * t7735) * t7178) * t7216 * t7395 + ((-t8254 / 0.2e1 + t7334) * t7828 * t8295 + ((-t7325 * t7879 - t7922 * t8276) * t7216 - t7013) * t7409 + t7422 * (-t7622 + t7178 * (t7334 - t8254)) * t7216) * t7431 - t7384 * t7574 + (pkin(1) * t7599 - t7310 * t7883) * t7409 + ((-t7019 - t7121) * t7423 + t7092) * t7408 + t7574) * t7200 * t7911;
t8238 = t7013 * t7408;
t7004 = t8336 * t8238;
t7079 = t7432 * t7092;
t7316 = t7365 + t7444;
t7559 = pkin(6) * t7325 * t7677;
t7628 = pkin(6) * t7422 * t7883;
t8166 = t7353 * t7384;
t7759 = -t7399 + t8166;
t7809 = t7408 * t8110;
t8152 = t7394 * t7450;
t8283 = t7399 - 0.1e1;
t7607 = ((t7171 + (t7178 * t7759 - t7923) * t7216) * t8152 - (t7079 * t7409 - t8061 * t7408 + (t7432 * (-t7366 + pkin(1)) * t7384 + (t7316 * t8020 + t8257) * t7423) * t7171) * t8267 + ((t7334 * t7409 + t7980) * t7016 + (-(t7350 - t7790) * t7384 + (-pkin(6) * t7326 + t7346 * t7423) * t7809 + (-t7384 * t7399 + t8283) * pkin(2) * t7325) * t7171) * t7431 - t7384 * t7559 - t7310 * t7409 * t7628 + t7559 + t7004) * t7712;
t7556 = t7133 - t7643;
t6968 = pkin(2) * t7019 + t7422 * t7556;
t8292 = t7091 / 0.2e1;
t7010 = t8292 + t7124 / 0.2e1;
t7102 = t7216 * t7921;
t7217 = 0.1e1 / t7226 ^ 2;
t7160 = t7216 * t7879;
t7584 = t7316 * t7160;
t7880 = t7178 * t8135;
t7679 = t7216 * t7880;
t8184 = t7216 * t7432;
t7881 = t7178 * t8184;
t7682 = t7327 * t7881;
t7709 = t7216 * t7922;
t7711 = t7399 * t7108;
t7795 = t7353 * t8150;
t8005 = t7399 * t7365;
t8151 = t7395 * t7423;
t8006 = pkin(2) * t8151;
t8055 = t7076 + t7124;
t8146 = t7399 * t7447;
t8214 = t7178 * t7396;
t8299 = -0.2e1 * t7399;
t7729 = (((t7399 - 0.4e1 / 0.3e1) * t8152 + ((-0.2e1 / 0.3e1 * t7345 + t8037) * t7399 + 0.4e1 / 0.3e1 * t7345 + t8036) * t7431 + (0.4e1 / 0.3e1 * t8267 - 0.2e1 / 0.3e1 * t7325) * pkin(6) * t8092) * t7171 * t8303 + (t7795 * t8227 - ((t7092 + t8235) * t7432 + (-0.4e1 * t7326 + t8005) * t7679) * t8267 + (t7584 * t8338 - t7096 + t7102 + (-pkin(2) * t7711 + (-t7399 * t8046 + t7680 * t8310 + t7091 + 0.2e1 * t7124) * t7422) * pkin(2) + (0.2e1 * t7139 * t7200 * t7422 - pkin(6) * t8227) * pkin(1) * t8147) * t7431 + t7423 * (t6968 * t7432 + (-t7406 + (-t7381 + t8146) * t7422) * t7883)) * t7384 + ((-0.3e1 * t7399 + 0.3e1) * t8152 * t7171 - (t7399 * t7567 + 0.2e1 * t7682 + ((t8292 + t8055) * t7423 + t7127) * t8297) * t8267 + (((pkin(1) * t7709 + t7019) * t7365 + t7556) * t8128 + (0.2e1 * (t7345 + t8038) * t7399 - 0.4e1 * t7345 - 0.2e1 * t7350 + t7648) * t7171) * t7431 - t8238 * t7373 + 0.2e1 * t7559 + t7004) * t7409 - t8283 * t7102 * t7394 + (t7019 * t7432 + (-t7365 - t7445 + t8005) * t7883) * t8006 + 0.2e1 * ((t7399 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t7108 + (t7010 * t7399 - t7566 / 0.2e1 - t7010 + (-pkin(6) * t7398 + t7334 * t7432) * t7883) * t7422) * t8263 + t7317 * t7628 * t8299 - t6968 * t8092 + ((t7313 * t7422 + t7406) * t7423 + t7422 * t7407) * t7883) * t7217 * t8214;
t6893 = t6923 - t7607 - t7729;
t8333 = t7115 ^ 2 * t7397;
t7107 = t7217 * t8333;
t7130 = t7139 ^ 2 * t7397 / t7208 ^ 2 * t7452;
t7022 = t7107 + t7130;
t7859 = t7200 * t8187;
t7685 = t7178 * t7859;
t7539 = t7139 * t7451 * t7685;
t7517 = 0.2e1 * t7539;
t8203 = t7200 * t7451;
t7912 = t7139 * t8203;
t6980 = (((pkin(2) * t7432 + pkin(6) * t8093) * t7408 + pkin(6) * t8118) * t7171 + t7013) * t7139 * t7859;
t7969 = pkin(6) * t8082;
t8001 = t7408 * t7365;
t8330 = t7217 * ((-(t7795 - t8146 + (0.2e1 * t7423 * t7969 + t7325) * pkin(2)) * t7828 + ((t7584 + t8049) * t8310 + (t7316 * t7880 * t8312 + t8224) * t7216 * t7431) * t7409 + t7178 * t7849 * t8162 + (-t8055 * t8135 + t7682) * t8263 + t7013 * t7996 + (-t8146 + t7345 + t7350 + t8034) * t7171) * t7178 + (t7053 * t8150 + (t7295 * t8001 + t8105) * t7171 + t7520) * t8225);
t6914 = t6980 - t8330;
t7938 = t6914 * t8135;
t8185 = t7216 * t7423;
t8243 = t6914 * t7432;
t8273 = pkin(1) * t7432;
t8340 = -(pkin(5) * t6893 * t7423 - pkin(1) * t6899) * t7408 + t8243 * t8313 - pkin(5) * (t7022 * t8128 + t7384 * t7517) - (pkin(1) * t7115 * t8185 - pkin(5) * t7912) * t7171 * t8343 + (-0.2e1 * t7178 * t7217 * t7622 + t6893 * t8273 - t7022 * t7370 - t7938 * t7445) * t7409;
t7012 = pkin(6) * t7715 - t7913;
t7623 = t7429 * pkin(5) * t7929;
t7884 = t7177 * t8130;
t8154 = t7390 * t7420;
t7927 = t7114 * t8154;
t8255 = t7393 * pkin(6);
t8277 = pkin(1) * t7419;
t8296 = -0.2e1 * t7419;
t6922 = ((-t7655 + ((t7372 - 0.2e1 * t7364 + t7446) * t8138 + pkin(5) * t7736) * t7177) * t7213 * t7389 + ((-t8255 / 0.2e1 + t7333) * t7829 * t8296 + ((-t7321 * t7884 - t7927 * t8277) * t7213 - t7012) * t7409 + t7419 * (-t7623 + t7177 * (t7333 - t8255)) * t7213) * t7428 - t7384 * t7576 + (pkin(1) * t7601 - t7309 * t7888) * t7409 + ((-t7018 - t7120) * t7420 + t7104) * t7408 + t7576) * t7198 * t7914;
t8239 = t7012 * t7408;
t7003 = t8337 * t8239;
t7078 = t7429 * t7104;
t7314 = t7363 + t7444;
t7560 = pkin(6) * t7321 * t7686;
t7629 = pkin(6) * t7419 * t7888;
t8167 = t7352 * t7384;
t7760 = -t7393 + t8167;
t7811 = t7408 * t8113;
t8159 = t7388 * t7450;
t8286 = t7393 - 0.1e1;
t7608 = ((t7169 + (t7177 * t7760 - t7928) * t7213) * t8159 - (t7078 * t7409 - t8062 * t7408 + (t7429 * (-t7364 + pkin(1)) * t7384 + (t7314 * t8020 + t8258) * t7420) * t7169) * t8268 + ((t7333 * t7409 + t7981) * t7015 + (-(t7349 - t7791) * t7384 + (-pkin(6) * t7322 + t7344 * t7420) * t7811 + (-t7384 * t7393 + t8286) * pkin(2) * t7321) * t7169) * t7428 - t7384 * t7560 - t7309 * t7409 * t7629 + t7560 + t7003) * t7717;
t7557 = t7132 - t7644;
t6967 = pkin(2) * t7018 + t7419 * t7557;
t8293 = t7090 / 0.2e1;
t7009 = t8293 + t7123 / 0.2e1;
t7101 = t7213 * t7926;
t7214 = 0.1e1 / t7225 ^ 2;
t7159 = t7213 * t7884;
t7586 = t7314 * t7159;
t7885 = t7177 * t8137;
t7688 = t7213 * t7885;
t8190 = t7213 * t7429;
t7886 = t7177 * t8190;
t7691 = t7323 * t7886;
t7714 = t7213 * t7927;
t7716 = t7393 * t7106;
t7796 = t7352 * t8157;
t8007 = t7393 * t7363;
t8158 = t7389 * t7420;
t8008 = pkin(2) * t8158;
t8056 = t7075 + t7123;
t8153 = t7393 * t7447;
t8215 = t7177 * t7390;
t8300 = -0.2e1 * t7393;
t7730 = (((t7393 - 0.4e1 / 0.3e1) * t8159 + ((-0.2e1 / 0.3e1 * t7343 + t8037) * t7393 + 0.4e1 / 0.3e1 * t7343 + t8036) * t7428 + (0.4e1 / 0.3e1 * t8268 - 0.2e1 / 0.3e1 * t7321) * pkin(6) * t8099) * t7169 * t8303 + (t7796 * t8232 - ((t7104 + t8236) * t7429 + (-0.4e1 * t7322 + t8007) * t7688) * t8268 + (t7586 * t8338 - t7095 + t7101 + (-pkin(2) * t7716 + (-t7393 * t8047 + t7689 * t8310 + t7090 + 0.2e1 * t7123) * t7419) * pkin(2) + (0.2e1 * t7138 * t7198 * t7419 - pkin(6) * t8232) * pkin(1) * t8154) * t7428 + t7420 * (t6967 * t7429 + (-t7406 + (-t7381 + t8153) * t7419) * t7888)) * t7384 + ((-0.3e1 * t7393 + 0.3e1) * t8159 * t7169 - (t7393 * t7569 + 0.2e1 * t7691 + ((t8293 + t8056) * t7420 + t7126) * t8297) * t8268 + (((pkin(1) * t7714 + t7018) * t7363 + t7557) * t8130 + (0.2e1 * (t7343 + t8038) * t7393 - 0.4e1 * t7343 - 0.2e1 * t7349 + t7648) * t7169) * t7428 - t8239 * t7372 + 0.2e1 * t7560 + t7003) * t7409 - t8286 * t7101 * t7388 + (t7018 * t7429 + (-t7363 - t7445 + t8007) * t7888) * t8008 + 0.2e1 * ((t7393 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t7106 + (t7009 * t7393 - t7568 / 0.2e1 - t7009 + (-pkin(6) * t7392 + t7333 * t7429) * t7888) * t7419) * t8265 + t7315 * t7629 * t8300 - t6967 * t8099 + ((t7313 * t7419 + t7406) * t7420 + t7419 * t7407) * t7888) * t7214 * t8215;
t6892 = t6922 - t7608 - t7730;
t8334 = t7114 ^ 2 * t7391;
t7105 = t7214 * t8334;
t7129 = t7138 ^ 2 * t7391 / t7207 ^ 2 * t7452;
t7021 = t7105 + t7129;
t7861 = t7198 * t8193;
t7694 = t7177 * t7861;
t7541 = t7138 * t7451 * t7694;
t7518 = 0.2e1 * t7541;
t8205 = t7198 * t7451;
t7915 = t7138 * t8205;
t6979 = (((pkin(2) * t7429 + pkin(6) * t8100) * t7408 + pkin(6) * t8120) * t7169 + t7012) * t7138 * t7861;
t7971 = pkin(6) * t8083;
t8002 = t7408 * t7363;
t8331 = t7214 * ((-(t7796 - t8153 + (0.2e1 * t7420 * t7971 + t7321) * pkin(2)) * t7829 + ((t7586 + t8050) * t8310 + (t7314 * t7885 * t8312 + t8229) * t7213 * t7428) * t7409 + t7177 * t7852 * t8163 + (-t8056 * t8137 + t7691) * t8265 + t7012 * t7998 + (-t8153 + t7343 + t7349 + t8034) * t7169) * t7177 + (t7050 * t8157 + (t7294 * t8002 + t8105) * t7169 + t7521) * t8230);
t6913 = t6979 - t8331;
t7939 = t6913 * t8137;
t8191 = t7213 * t7420;
t8246 = t6913 * t7429;
t8274 = pkin(1) * t7429;
t8339 = -(pkin(5) * t6892 * t7420 - pkin(1) * t6898) * t7408 + t8246 * t8313 - pkin(5) * (t7021 * t8130 + t7384 * t7518) - (pkin(1) * t7114 * t8191 - pkin(5) * t7915) * t7169 * t8344 + (-0.2e1 * t7177 * t7214 * t7623 + t6892 * t8274 - t7021 * t7369 - t7939 * t7445) * t7409;
t7785 = -t7321 + 0.2e1 * t8268;
t8328 = t7430 * t7785;
t7784 = -t7325 + 0.2e1 * t8267;
t8327 = t7433 * t7784;
t7783 = -t7329 + 0.2e1 * t8266;
t8326 = t7436 * t7783;
t8264 = pkin(2) * t7430;
t7963 = t7420 * t8264;
t8136 = t7408 * t7421;
t8316 = t7419 * (-(pkin(1) * t8136 - pkin(5) * t7430) * t7420 + t7421 * t7745) + t7963;
t8262 = pkin(2) * t7433;
t7959 = t7423 * t8262;
t8134 = t7408 * t7424;
t8315 = t7422 * (-(pkin(1) * t8134 - pkin(5) * t7433) * t7423 + t7424 * t7744) + t7959;
t8260 = pkin(2) * t7436;
t7960 = t7426 * t8260;
t8132 = t7408 * t7427;
t8314 = t7425 * (-(pkin(1) * t8132 - pkin(5) * t7436) * t7426 + t7427 * t7743) + t7960;
t8306 = -0.2e1 * t7159 + t7701;
t8305 = -0.2e1 * t7160 + t7698;
t8304 = -0.2e1 * t7161 + t7695;
t8301 = 0.2e1 * t7384;
t8289 = t8301 - 0.2e1;
t8287 = 0.4e1 * t7389 - 0.2e1;
t8284 = 0.4e1 * t7395 - 0.2e1;
t8281 = 0.4e1 * t7401 - 0.2e1;
t8279 = pkin(1) * t7408;
t7382 = t7408 ^ 2;
t8252 = MDP(4) * t7382;
t8251 = MDP(5) * t7382;
t8250 = MDP(6) * t7408;
t8249 = MDP(7) * t7408;
t8248 = t6913 * t7213;
t7984 = pkin(5) * t8137;
t8247 = t6913 * (-t7984 + t8013);
t8245 = t6914 * t7216;
t7983 = pkin(5) * t8135;
t8244 = t6914 * (-t7983 + t8012);
t8242 = t6915 * t7219;
t7982 = pkin(5) * t8133;
t8241 = t6915 * (-t7965 + t7982);
t8233 = t7114 * t7177;
t8231 = t7114 * t7214;
t8228 = t7115 * t7178;
t8226 = t7115 * t7217;
t8223 = t7116 * t7179;
t8221 = t7116 * t7220;
t7174 = t7177 ^ 2;
t7168 = t7174 * t7214;
t7215 = t7213 * t7214;
t8218 = t7174 * t7215;
t7175 = t7178 ^ 2;
t7170 = t7175 * t7217;
t7218 = t7216 * t7217;
t8217 = t7175 * t7218;
t7176 = t7179 ^ 2;
t7172 = t7176 * t7220;
t7221 = t7219 * t7220;
t8216 = t7176 * t7221;
t8112 = t7409 * t7430;
t7231 = t7294 * t8112 + t7421 * t8323;
t8101 = t7419 * t7430;
t7990 = pkin(2) * t8101;
t7993 = pkin(2) * t8120;
t7186 = (t7294 * t7360 - t7357 * t7990) * t7408 - t7231 * t7357 - t7360 * t7993;
t8212 = t7186 * t7213;
t7187 = (t7294 * t7357 + t7360 * t7990) * t7408 + t7231 * t7360 - t7357 * t7993;
t8211 = t7187 * t7213;
t8109 = t7409 * t7433;
t7232 = t7295 * t8109 + t7424 * t8324;
t8094 = t7422 * t7433;
t7989 = pkin(2) * t8094;
t7992 = pkin(2) * t8118;
t7188 = (t7295 * t7361 - t7358 * t7989) * t7408 - t7232 * t7358 - t7361 * t7992;
t8210 = t7188 * t7216;
t7189 = (t7295 * t7358 + t7361 * t7989) * t7408 + t7232 * t7361 - t7358 * t7992;
t8209 = t7189 * t7216;
t8106 = t7409 * t7436;
t7233 = t7296 * t8106 + t7427 * t8325;
t8087 = t7425 * t7436;
t7988 = pkin(2) * t8087;
t7991 = pkin(2) * t8116;
t7190 = (t7296 * t7362 - t7359 * t7988) * t7408 - t7233 * t7359 - t7362 * t7991;
t8208 = t7190 * t7219;
t7191 = (t7296 * t7359 + t7362 * t7988) * t7408 + t7233 * t7362 - t7359 * t7991;
t8207 = t7191 * t7219;
t7204 = t8323 * t7430 + (-t8002 - t8170) * t7421;
t8200 = t7204 * t7213;
t7205 = t8324 * t7433 + (-t8001 - t8169) * t7424;
t8199 = t7205 * t7216;
t7206 = t8325 * t7436 + (-t8000 - t8168) * t7427;
t8198 = t7206 * t7219;
t8189 = t7214 * t7420;
t8183 = t7217 * t7423;
t8177 = t7220 * t7426;
t8155 = t7390 * t7419;
t8148 = t7396 * t7422;
t8141 = t7402 * t7425;
t8124 = t7408 * t7451;
t8123 = t7409 * t6892;
t8122 = t7409 * t6893;
t8121 = t7409 * t6894;
t8114 = t7409 * t7428;
t8111 = t7409 * t7431;
t8108 = t7409 * t7434;
t8104 = t7419 * t7420;
t8103 = t7419 * t7428;
t8102 = t7419 * t7429;
t8098 = t7421 * t7429;
t8097 = t7422 * t7423;
t8096 = t7422 * t7431;
t8095 = t7422 * t7432;
t8091 = t7424 * t7432;
t8090 = t7425 * t7426;
t8089 = t7425 * t7434;
t8088 = t7425 * t7435;
t8084 = t7427 * t7435;
t6859 = -t6898 * t8016 + (-t6898 * t8130 + t6913 * t8301 - 0.2e1 * t6979 + 0.2e1 * t8331) * pkin(5);
t6976 = (-pkin(5) * t7688 + t7078) * t7409 + (-pkin(5) * t7714 - t7126 / 0.2e1) * t7408 + pkin(1) * t7886;
t8080 = -t7428 * t6859 - 0.2e1 * t6976 * t7915 - t7419 * t8339;
t7641 = -0.2e1 * t7701;
t8079 = t8339 * t7428 + (t6976 * t7641 - t6859) * t7419;
t6860 = -t6899 * t8015 + (-t6899 * t8128 + t6914 * t8301 - 0.2e1 * t6980 + 0.2e1 * t8330) * pkin(5);
t6977 = (-pkin(5) * t7679 + t7079) * t7409 + (-pkin(5) * t7709 - t7127 / 0.2e1) * t7408 + pkin(1) * t7881;
t8078 = -t7431 * t6860 - 0.2e1 * t6977 * t7912 - t8340 * t7422;
t7640 = -0.2e1 * t7698;
t8077 = t8340 * t7431 + (t6977 * t7640 - t6860) * t7422;
t6861 = -t6900 * t8014 + (-t6900 * t8126 + t6915 * t8301 - 0.2e1 * t6981 + 0.2e1 * t8329) * pkin(5);
t6978 = (-pkin(5) * t7670 + t7080) * t7409 + (-pkin(5) * t7704 - t7128 / 0.2e1) * t7408 + pkin(1) * t7876;
t8076 = -t7434 * t6861 - 0.2e1 * t6978 * t7909 - t8341 * t7425;
t7639 = -0.2e1 * t7695;
t8075 = t8341 * t7434 + (t6978 * t7639 - t6861) * t7425;
t6868 = t6913 * t7760 + t6913 - t8123;
t6961 = t7541 * t8020 + (-t7213 * t7602 + (-t7213 ^ 2 + t7214 * t7384) * t7429 * t7177) * t8230;
t7850 = t7214 * t8130;
t7577 = t7850 * t8334;
t7647 = t7760 + 0.1e1;
t7703 = t7177 * t7915;
t7936 = (t7159 + t7701) * t7114 * t7409;
t6910 = t7409 * t6913;
t6880 = t6910 - t7730 / 0.2e1 - t7608 / 0.2e1 + t6922 / 0.2e1;
t7948 = t6880 * t8137;
t8074 = -0.2e1 * t6868 * t8103 + t8287 * t7948 + 0.4e1 * t7419 * t6961 * t8100 + t8288 * t7577 + (t8287 * t7936 + (-0.4e1 * t7389 * t7647 + 0.2e1 * t8167 + t8300 + 0.2e1) * t7703) * t8193;
t6869 = t6914 * t7759 + t6914 - t8122;
t6962 = t7539 * t8020 + (-t7216 * t7600 + (-t7216 ^ 2 + t7217 * t7384) * t7432 * t7178) * t8225;
t7847 = t7217 * t8128;
t7575 = t7847 * t8333;
t7646 = t7759 + 0.1e1;
t7700 = t7178 * t7912;
t7934 = (t7160 + t7698) * t7115 * t7409;
t6911 = t7409 * t6914;
t6881 = t6911 - t7729 / 0.2e1 - t7607 / 0.2e1 + t6923 / 0.2e1;
t7947 = t6881 * t8135;
t8073 = -0.2e1 * t6869 * t8096 + t8284 * t7947 + 0.4e1 * t7422 * t6962 * t8093 + t8285 * t7575 + (t8284 * t7934 + (-0.4e1 * t7395 * t7646 + 0.2e1 * t8166 + t8299 + 0.2e1) * t7700) * t8187;
t6870 = t6915 * t7758 + t6915 - t8121;
t6963 = t7537 * t8020 + (-t7219 * t7598 + (-t7219 ^ 2 + t7220 * t7384) * t7435 * t7179) * t8220;
t7844 = t7220 * t8126;
t7578 = t7844 * t8332;
t7645 = t7758 + 0.1e1;
t7697 = t7179 * t7909;
t7932 = (t7161 + t7695) * t7116 * t7409;
t6912 = t7409 * t6915;
t6882 = t6912 - t7728 / 0.2e1 - t7606 / 0.2e1 + t6924 / 0.2e1;
t7946 = t6882 * t8133;
t8072 = -0.2e1 * t6870 * t8089 + t8281 * t7946 + 0.4e1 * t7425 * t6963 * t8086 + t8282 * t7578 + (t8281 * t7932 + (-0.4e1 * t7401 * t7645 + 0.2e1 * t8165 + t8298 + 0.2e1) * t7697) * t8181;
t6887 = t6892 + t6910;
t7045 = t7165 + t7106 / 0.2e1;
t7702 = t7420 * t7915;
t7805 = t7408 * t8104;
t7766 = 0.2e1 * t7805;
t8071 = t6880 * t7428 * t7766 + t6868 * t7389 + t6887 * t7409 + t7577 * t8103 - 0.2e1 * t6961 * t8158 + (-t7408 * t7045 * t7702 - (t7647 * t7703 - t7936) * t7213 * t8103) * t8344;
t6889 = t6893 + t6911;
t7046 = t7166 + t7108 / 0.2e1;
t7699 = t7423 * t7912;
t7802 = t7408 * t8097;
t7765 = 0.2e1 * t7802;
t8070 = t6881 * t7431 * t7765 + t6869 * t7395 + t6889 * t7409 + t7575 * t8096 - 0.2e1 * t6962 * t8151 + (-t7408 * t7046 * t7699 - (t7646 * t7700 - t7934) * t7216 * t8096) * t8343;
t6891 = t6894 + t6912;
t7047 = t7167 + t7110 / 0.2e1;
t7696 = t7426 * t7909;
t7799 = t7408 * t8090;
t7764 = 0.2e1 * t7799;
t8069 = t6882 * t7434 * t7764 + t6870 * t7401 + t6891 * t7409 + t7578 * t8089 - 0.2e1 * t6963 * t8144 + (-t7047 * t7408 * t7696 - (t7645 * t7697 - t7932) * t7219 * t8089) * t8342;
t7505 = t7429 * t7518;
t6986 = t7505 + t7408 * (t7105 - t7129);
t7000 = t7408 * t7505 - t7129;
t7816 = t7408 * t8119;
t7942 = t6892 * t8130;
t8023 = 0.4e1 * t7339 * t7390;
t8068 = -t7428 * t7942 + t6898 * (t7805 - t8114) + (t7428 * t8020 - t8289 * t8104) * t8246 + t6986 * t8100 + t7000 * t8120 + (-0.4e1 * (t7339 * t7715 + t7429 * t7702 / 0.2e1) * t8194 + (t7419 * t8023 + 0.2e1 * t7816) * t8231) * t7177;
t7506 = t7432 * t7517;
t6985 = t7506 + t7408 * (t7107 - t7130);
t7001 = t7408 * t7506 - t7130;
t7814 = t7408 * t8117;
t7941 = t6893 * t8128;
t8022 = 0.4e1 * t7340 * t7396;
t8067 = -t7431 * t7941 + t6899 * (t7802 - t8111) + (t7431 * t8020 - t8289 * t8097) * t8243 + t6985 * t8093 + t7001 * t8118 + (-0.4e1 * (t7340 * t7710 + t7432 * t7699 / 0.2e1) * t8188 + (t7422 * t8022 + 0.2e1 * t7814) * t8226) * t7178;
t7504 = t7435 * t7516;
t6987 = t7504 + t7408 * (t7109 - t7131);
t7002 = t7408 * t7504 - t7131;
t7812 = t7408 * t8115;
t7940 = t6894 * t8126;
t8021 = 0.4e1 * t7341 * t7402;
t8066 = -t7434 * t7940 + t6900 * (t7799 - t8108) + (t7434 * t8020 - t8289 * t8090) * t8240 + t6987 * t8086 + t7002 * t8116 + (-0.4e1 * (t7341 * t7705 + t7435 * t7696 / 0.2e1) * t8182 + (t7425 * t8021 + 0.2e1 * t7812) * t8221) * t7179;
t7804 = t7408 * t8100;
t8065 = -t7419 * t7942 - t6898 * (t7804 + t8120) + (t8289 * t8100 - 0.2e1 * t7817) * t8246 + t6986 * t8104 - t7000 * t8114 + (-0.2e1 * ((t7106 - 0.2e1 * t7716) * t7428 + t7420 * t7551) * t8194 + (t7766 * t8156 - 0.4e1 * t7339) * t8231) * t7177;
t7801 = t7408 * t8093;
t8064 = -t7422 * t7941 - t6899 * (t7801 + t8118) + (t8289 * t8093 - 0.2e1 * t7815) * t8243 + t6985 * t8097 - t7001 * t8111 + (-0.2e1 * ((t7108 - 0.2e1 * t7711) * t7431 + t7423 * t7550) * t8188 + (t7765 * t8149 - 0.4e1 * t7340) * t8226) * t7178;
t7798 = t7408 * t8086;
t8063 = -t7425 * t7940 - t6900 * (t7798 + t8116) + (t8289 * t8086 - 0.2e1 * t7813) * t8240 + t6987 * t8090 - t7002 * t8108 + (-0.2e1 * ((t7110 - 0.2e1 * t7706) * t7434 + t7426 * t7549) * t8182 + (t7764 * t8142 - 0.4e1 * t7341) * t8221) * t7179;
t7860 = t7391 * t8205;
t7554 = t7138 * t7860 * t8232;
t8059 = (t7159 + t7641) * t7165 - 0.2e1 * t7554;
t7858 = t7397 * t8203;
t7553 = t7139 * t7858 * t8227;
t8058 = (t7160 + t7640) * t7166 - 0.2e1 * t7553;
t7856 = t7403 * t8201;
t7552 = t7140 * t7856 * t8222;
t8057 = (t7161 + t7639) * t7167 - 0.2e1 * t7552;
t8044 = t7168 - t7105;
t8043 = t7170 - t7107;
t8042 = t7172 - t7109;
t8029 = t7390 * t8306;
t8028 = t7396 * t8305;
t8027 = t7402 * t8304;
t8026 = -0.2e1 * t8231;
t8025 = -0.2e1 * t8226;
t8024 = -0.2e1 * t8221;
t7974 = pkin(6) * t8130;
t7973 = pkin(6) * t8128;
t7972 = pkin(6) * t8126;
t7970 = t7430 * t8258;
t7968 = t7433 * t8257;
t7966 = t7436 * t8256;
t7952 = t8290 * pkin(6);
t6886 = t6892 + 0.2e1 * t6910;
t7945 = t6886 * t8191;
t6888 = t6893 + 0.2e1 * t6911;
t7944 = t6888 * t8185;
t6890 = t6894 + 0.2e1 * t6912;
t7943 = t6890 * t8179;
t7061 = t7159 - t7701;
t7935 = t7061 * t8215;
t7063 = t7160 - t7698;
t7933 = t7063 * t8214;
t7065 = t7161 - t7695;
t7931 = t7065 * t8213;
t7930 = t7114 * t8189;
t7925 = t7115 * t8183;
t7920 = t7116 * t8177;
t7303 = -pkin(5) + t8011;
t7234 = t7303 * t7408 * t7430 + t7421 * t8337;
t7300 = t8286 * t7363 - pkin(5);
t7635 = t7803 * t7363;
t7563 = t7421 * t7635;
t7742 = t7419 * t7970;
t7751 = t7389 * t7963;
t7832 = t7360 * t8102;
t7144 = ((-t7303 * t7360 + t7357 * t7970) * t7428 + (-pkin(6) * t7832 - t7357 * t8328) * t7420) * t7384 + (-(t7357 * t8098 + t7360 * t8019) * t8268 + (-t7234 * t7357 - t7360 * t7974) * t7428 - (t7321 * t7360 + t7357 * t7742) * t8137) * t7409 + t7357 * t7751 + (t7300 * t7360 + t7357 * t7563) * t7428 - t8316 * t7357 + t8337 * t7832;
t7906 = t7144 * t8193;
t7304 = -pkin(5) + t8010;
t7235 = t7304 * t7408 * t7433 + t7424 * t8336;
t7301 = t8283 * t7365 - pkin(5);
t7634 = t7800 * t7365;
t7562 = t7424 * t7634;
t7741 = t7422 * t7968;
t7750 = t7395 * t7959;
t7831 = t7361 * t8095;
t7145 = ((-t7304 * t7361 + t7358 * t7968) * t7431 + (-pkin(6) * t7831 - t7358 * t8327) * t7423) * t7384 + (-(t7358 * t8091 + t7361 * t8018) * t8267 + (-t7235 * t7358 - t7361 * t7973) * t7431 - (t7325 * t7361 + t7358 * t7741) * t8135) * t7409 + t7358 * t7750 + (t7301 * t7361 + t7358 * t7562) * t7431 - t8315 * t7358 + t8336 * t7831;
t7905 = t7145 * t8187;
t7305 = -pkin(5) + t8009;
t7236 = t7305 * t7408 * t7436 + t7427 * t8335;
t7302 = t8280 * t7367 - pkin(5);
t7633 = t7797 * t7367;
t7561 = t7427 * t7633;
t7740 = t7425 * t7966;
t7749 = t7401 * t7960;
t7830 = t7362 * t8088;
t7146 = ((-t7305 * t7362 + t7359 * t7966) * t7434 + (-pkin(6) * t7830 - t7359 * t8326) * t7426) * t7384 + (-(t7359 * t8084 + t7362 * t8017) * t8266 + (-t7236 * t7359 - t7362 * t7972) * t7434 - (t7329 * t7362 + t7359 * t7740) * t8133) * t7409 + t7359 * t7749 + (t7302 * t7362 + t7359 * t7561) * t7434 - t8314 * t7359 + t8335 * t7830;
t7904 = t7146 * t8181;
t7835 = t7357 * t8102;
t7147 = ((-t7303 * t7357 - t7360 * t7970) * t7428 + (-pkin(6) * t7835 + t7360 * t8328) * t7420) * t7384 + ((0.2e1 * t7357 * t8137 + t7360 * t8098) * t8268 + (t7234 * t7360 - t7357 * t7974) * t7428 + (-t7321 * t7357 + t7360 * t7742) * t8137) * t7409 - t7360 * t7751 + (t7300 * t7357 - t7360 * t7563) * t7428 + t8316 * t7360 + t8337 * t7835;
t7903 = t7147 * t8193;
t7834 = t7358 * t8095;
t7148 = ((-t7304 * t7358 - t7361 * t7968) * t7431 + (-pkin(6) * t7834 + t7361 * t8327) * t7423) * t7384 + ((0.2e1 * t7358 * t8135 + t7361 * t8091) * t8267 + (t7235 * t7361 - t7358 * t7973) * t7431 + (-t7325 * t7358 + t7361 * t7741) * t8135) * t7409 - t7361 * t7750 + (t7301 * t7358 - t7361 * t7562) * t7431 + t8315 * t7361 + t8336 * t7834;
t7902 = t7148 * t8187;
t7833 = t7359 * t8088;
t7149 = ((-t7305 * t7359 - t7362 * t7966) * t7434 + (-pkin(6) * t7833 + t7362 * t8326) * t7426) * t7384 + ((0.2e1 * t7359 * t8133 + t7362 * t8084) * t8266 + (t7236 * t7362 - t7359 * t7972) * t7434 + (-t7329 * t7359 + t7362 * t7740) * t8133) * t7409 - t7362 * t7749 + (t7302 * t7359 - t7362 * t7561) * t7434 + t8314 * t7362 + t8335 * t7833;
t7901 = t7149 * t8181;
t7733 = t8290 * t7430 * t7322;
t7222 = t7333 * t8136 + t7420 * t7733;
t7228 = t7323 * t8136 + t7733;
t7810 = t7408 * t8112;
t7661 = t7357 * t7810;
t7252 = t7360 * t7384 - t7360 + t7661;
t7288 = -t7977 + t8337;
t7306 = t7369 - t7952;
t7626 = t7810 * t7364;
t7664 = t7322 * t7816;
t7843 = t7322 * t8138;
t7150 = (t7357 * t7421 * t7614 + t7252 * t7958) * t7393 + (t7252 * t7825 + (t7228 * t7357 - t7360 * t7843) * t8265 + (t7288 * t7360 - t7357 * t7626) * pkin(6)) * t7429 - (-pkin(6) * t7661 + t7306 * t7360) * t8265 + pkin(6) * (t7222 * t7357 - t7360 * t7664);
t7900 = t7150 * t8206;
t7658 = t7360 * t7810;
t7253 = t7357 * t7384 - t7357 - t7658;
t7611 = t7757 * t7421;
t7151 = (-t7360 * t7408 * t7611 + t7253 * t7958) * t7393 + (t7253 * t7825 - (t7228 * t7360 + t7357 * t7843) * t8265 + pkin(6) * (t7288 * t7357 + t7360 * t7626)) * t7429 - (pkin(6) * t7658 + t7306 * t7357) * t8265 - pkin(6) * (t7222 * t7360 + t7357 * t7664);
t7899 = t7151 * t8206;
t7732 = t8290 * t7433 * t7326;
t7223 = t7334 * t8134 + t7423 * t7732;
t7229 = t7327 * t8134 + t7732;
t7808 = t7408 * t8109;
t7660 = t7358 * t7808;
t7254 = t7361 * t7384 - t7361 + t7660;
t7289 = -t7976 + t8336;
t7307 = t7370 - t7952;
t7625 = t7808 * t7366;
t7663 = t7326 * t7814;
t7842 = t7326 * t8138;
t7152 = (t7358 * t7424 * t7613 + t7254 * t7956) * t7399 + (t7254 * t7822 + (t7229 * t7358 - t7361 * t7842) * t8263 + (t7289 * t7361 - t7358 * t7625) * pkin(6)) * t7432 - (-pkin(6) * t7660 + t7307 * t7361) * t8263 + pkin(6) * (t7223 * t7358 - t7361 * t7663);
t7898 = t7152 * t8204;
t7657 = t7361 * t7808;
t7255 = t7358 * t7384 - t7358 - t7657;
t7612 = t7424 * t7756;
t7153 = (-t7361 * t7408 * t7612 + t7255 * t7956) * t7399 + (t7255 * t7822 - (t7229 * t7361 + t7358 * t7842) * t8263 + pkin(6) * (t7289 * t7358 + t7361 * t7625)) * t7432 - (pkin(6) * t7657 + t7307 * t7358) * t8263 - pkin(6) * (t7223 * t7361 + t7358 * t7663);
t7897 = t7153 * t8204;
t7731 = t8290 * t7436 * t7330;
t7224 = t7335 * t8132 + t7426 * t7731;
t7230 = t7331 * t8132 + t7731;
t7806 = t7408 * t8106;
t7659 = t7359 * t7806;
t7256 = t7362 * t7384 - t7362 + t7659;
t7290 = -t7975 + t8335;
t7308 = t7371 - t7952;
t7624 = t7806 * t7368;
t7662 = t7330 * t7812;
t7841 = t7330 * t8138;
t7154 = (t7359 * t7427 * t7609 + t7256 * t7954) * t7405 + (t7256 * t7819 + (t7230 * t7359 - t7362 * t7841) * t8261 + (t7290 * t7362 - t7359 * t7624) * pkin(6)) * t7435 - (-pkin(6) * t7659 + t7308 * t7362) * t8261 + pkin(6) * (t7224 * t7359 - t7362 * t7662);
t7896 = t7154 * t8202;
t7656 = t7362 * t7806;
t7257 = t7359 * t7384 - t7359 - t7656;
t7610 = t7755 * t7427;
t7155 = (-t7362 * t7408 * t7610 + t7257 * t7954) * t7405 + (t7257 * t7819 - (t7230 * t7362 + t7359 * t7841) * t8261 + pkin(6) * (t7290 * t7359 + t7362 * t7624)) * t7435 - (pkin(6) * t7656 + t7308 * t7359) * t8261 - pkin(6) * (t7224 * t7362 + t7359 * t7662);
t7895 = t7155 * t8202;
t7894 = (pkin(5) * t7811 + t7369) * t8218;
t7893 = t7409 * t8218;
t7892 = (pkin(5) * t7809 + t7370) * t8217;
t7891 = t7409 * t8217;
t7890 = (pkin(5) * t7807 + t7371) * t8216;
t7889 = t7409 * t8216;
t7887 = t7177 * t8191;
t7882 = t7178 * t8185;
t7877 = t7179 * t8179;
t7180 = t7421 * (-t7420 * t7785 + t7971) * t7384 + ((-t7303 * t8136 + t7430 * t8337) * t7428 + (-pkin(6) * t7421 * t7805 + t7389 * t8264) * t7429) * t7409 + t7421 * t8008 - t7428 * t7430 * t7635 + (-t7321 * t7421 - t8101 * t8279) * t7420 + t7745 * t8101;
t7873 = t7180 * t8193;
t7181 = t7424 * (-t7423 * t7784 + t7969) * t7384 + ((-t7304 * t8134 + t7433 * t8336) * t7431 + (-pkin(6) * t7424 * t7802 + t7395 * t8262) * t7432) * t7409 + t7424 * t8006 - t7431 * t7433 * t7634 + (-t7325 * t7424 - t8094 * t8279) * t7423 + t7744 * t8094;
t7872 = t7181 * t8187;
t7182 = t7427 * (-t7426 * t7783 + t7967) * t7384 + ((-t7305 * t8132 + t7436 * t8335) * t7434 + (-pkin(6) * t7427 * t7799 + t7401 * t8260) * t7435) * t7409 + t7427 * t8004 - t7434 * t7436 * t7633 + (-t7329 * t7427 - t8087 * t8279) * t7426 + t7743 * t8087;
t7871 = t7182 * t8181;
t7183 = (t7409 * t7421 * t7957 + t7430 * t7757) * t7393 + ((t7322 * t8136 + t7323 * t7430) * t8265 - t7611 * t8119) * t7429 + (t7333 * t7430 + (-pkin(2) * t8114 + t7322 * t8137) * t7421) * pkin(6);
t7870 = t7183 * t8206;
t7184 = (t7409 * t7424 * t7955 + t7433 * t7756) * t7399 + ((t7326 * t8134 + t7327 * t7433) * t8263 - t7612 * t8117) * t7432 + (t7334 * t7433 + (-pkin(2) * t8111 + t7326 * t8135) * t7424) * pkin(6);
t7869 = t7184 * t8204;
t7185 = (t7409 * t7427 * t7953 + t7436 * t7755) * t7405 + ((t7330 * t8132 + t7331 * t7436) * t8261 - t7610 * t8115) * t7435 + (t7335 * t7436 + (-pkin(2) * t8108 + t7330 * t8133) * t7427) * pkin(6);
t7868 = t7185 * t8202;
t7867 = t7186 * t8190;
t7866 = t7187 * t8190;
t7865 = t7188 * t8184;
t7864 = t7189 * t8184;
t7863 = t7190 * t8178;
t7862 = t7191 * t8178;
t7855 = t7204 * t8190;
t7854 = t7205 * t8184;
t7853 = t7206 * t8178;
t7824 = t7393 * t7168;
t7821 = t7399 * t7170;
t7818 = t7405 * t7172;
t7036 = t8290 * t7886 + 0.2e1 * t7602;
t7687 = t7428 * t7887;
t7781 = t7390 * (0.2e1 * t6887 * t8103 + t8288 * t7939 + ((-0.2e1 * t7174 * t7850 + 0.4e1 * t7541) * t7409 + 0.4e1 * t7554) * t7389 + t7036 * t7687 * t8296 + t8059);
t7037 = t8290 * t7881 + 0.2e1 * t7600;
t7678 = t7431 * t7882;
t7780 = t7396 * (0.2e1 * t6889 * t8096 + t8285 * t7938 + ((-0.2e1 * t7175 * t7847 + 0.4e1 * t7539) * t7409 + 0.4e1 * t7553) * t7395 + t7037 * t7678 * t8295 + t8058);
t7038 = t8290 * t7876 + 0.2e1 * t7598;
t7669 = t7434 * t7877;
t7779 = t7402 * (0.2e1 * t6891 * t8089 + t8282 * t7937 + ((-0.2e1 * t7176 * t7844 + 0.4e1 * t7537) * t7409 + 0.4e1 * t7552) * t7401 + t7038 * t7669 * t8294 + t8057);
t7778 = t7186 * t8026;
t7777 = t7187 * t8026;
t7776 = t7204 * t8026;
t7775 = t7188 * t8025;
t7774 = t7189 * t8025;
t7773 = t7205 * t8025;
t7772 = t7190 * t8024;
t7771 = t7191 * t8024;
t7770 = t7206 * t8024;
t7769 = 0.2e1 * t7824;
t7768 = 0.2e1 * t7821;
t7767 = 0.2e1 * t7818;
t6895 = t6913 * t8130 + t6898;
t7162 = -0.2e1 * t7824;
t7141 = -t7168 + t7769;
t7470 = t7141 * t7384 + t7000 + t7168;
t7596 = t7816 * t7168;
t7763 = ((t7162 + t7470) * t7419 - t7428 * t7596) * t7390 - t6895;
t6896 = t6914 * t8128 + t6899;
t7163 = -0.2e1 * t7821;
t7142 = -t7170 + t7768;
t7469 = t7142 * t7384 + t7001 + t7170;
t7593 = t7814 * t7170;
t7762 = ((t7163 + t7469) * t7422 - t7431 * t7593) * t7396 - t6896;
t6897 = t6915 * t8126 + t6900;
t7164 = -0.2e1 * t7818;
t7143 = -t7172 + t7767;
t7468 = t7143 * t7384 + t7002 + t7172;
t7590 = t7812 * t7172;
t7761 = ((t7164 + t7468) * t7425 - t7434 * t7590) * t7402 - t6897;
t7727 = t8155 * t8247;
t7726 = t8148 * t8244;
t7725 = t8141 * t8241;
t7048 = 0.2e1 * t7165 + t7106;
t7724 = t7048 * t7930;
t7723 = t7048 * t7429 * t8231;
t7051 = 0.2e1 * t7166 + t7108;
t7722 = t7051 * t7925;
t7721 = t7051 * t7432 * t8226;
t7054 = 0.2e1 * t7167 + t7110;
t7720 = t7054 * t7920;
t7719 = t7054 * t7435 * t8221;
t7718 = t7177 * t7928;
t7713 = t7178 * t7923;
t7708 = t7179 * t7918;
t7693 = t7177 * t7860;
t7684 = t7178 * t7858;
t7675 = t7179 * t7856;
t7667 = t7215 * t7390 * t8099;
t7666 = t7218 * t7396 * t8092;
t7665 = t7221 * t7402 * t8085;
t6874 = t6887 * t7419 + t6913 * t7804;
t7620 = t7390 * (t6874 * t7419 - t8059 * t8103 + (t7036 * t7389 - t7602) * t7887);
t7619 = t7390 * ((-t7470 + t7769) * t7428 + (-t6895 - t7596) * t7419);
t6875 = t6889 * t7422 + t6914 * t7801;
t7618 = t7396 * (t6875 * t7422 - t8058 * t8096 + (t7037 * t7395 - t7600) * t7882);
t7617 = t7396 * ((-t7469 + t7768) * t7431 + (-t6896 - t7593) * t7422);
t6876 = t6891 * t7425 + t6915 * t7798;
t7616 = t7402 * (t6876 * t7425 - t8057 * t8089 + (t7038 * t7401 - t7598) * t7877);
t7615 = t7402 * ((-t7468 + t7767) * t7434 + (-t6897 - t7590) * t7425);
t7595 = t7894 * t8155;
t7594 = t7174 * t7667;
t7592 = t7892 * t8148;
t7591 = t7175 * t7666;
t7589 = t7890 * t8141;
t7588 = t7176 * t7665;
t7587 = t7429 * t7694;
t7585 = t7432 * t7685;
t7583 = t7435 * t7676;
t7581 = t7050 * t7688;
t7580 = t7053 * t7679;
t7579 = t7056 * t7670;
t7548 = t7150 * t7587;
t7547 = t7151 * t7587;
t7546 = t7152 * t7585;
t7545 = t7153 * t7585;
t7544 = t7154 * t7583;
t7543 = t7155 * t7583;
t7542 = t7183 * t7587;
t7540 = t7184 * t7585;
t7538 = t7185 * t7583;
t7273 = -pkin(5) * t7816 + t8274;
t7536 = -t6913 * (pkin(1) * t8131 + t7282 * t7419) + t7168 * (pkin(5) * t7839 + t7273 * t7419);
t7320 = t8290 * pkin(5);
t7535 = t6913 * ((-pkin(5) * t8083 + t8277) * t7408 - t7739) + t7168 * (t7273 * t7428 - t7320 * t7419);
t7274 = -pkin(5) * t7814 + t8273;
t7534 = -t6914 * (pkin(1) * t8129 + t7283 * t7422) + t7170 * (pkin(5) * t7838 + t7274 * t7422);
t7533 = t6914 * ((-pkin(5) * t8082 + t8276) * t7408 - t7738) + t7170 * (t7274 * t7431 - t7320 * t7422);
t7275 = -pkin(5) * t7812 + t8272;
t7532 = -t6915 * (pkin(1) * t8127 + t7284 * t7425) + t7172 * (pkin(5) * t7837 + t7275 * t7425);
t7531 = t6915 * ((-pkin(5) * t8081 + t8275) * t7408 - t7737) + t7172 * (t7275 * t7434 - t7320 * t7425);
t7515 = t7273 * t8218 - t7282 * t8248;
t7514 = t7213 * t8247 + t7894;
t7513 = t7274 * t8217 - t7283 * t8245;
t7512 = t7216 * t8244 + t7892;
t7511 = t7275 * t8216 - t7284 * t8242;
t7510 = -t7219 * t8241 + t7890;
t7500 = t6913 * t8191 - t7429 * t7893;
t7499 = t6913 * t8190 + t7420 * t7893;
t7498 = t6914 * t8185 - t7432 * t7891;
t7497 = t6914 * t8184 + t7423 * t7891;
t7496 = t6915 * t8179 - t7435 * t7889;
t7495 = t6915 * t8178 + t7426 * t7889;
t7488 = t7536 * t8206;
t7487 = t7535 * t8206;
t7486 = t7534 * t8204;
t7485 = t7533 * t8204;
t7484 = t7532 * t8202;
t7483 = t7531 * t8202;
t7479 = t7215 * t8023 * t8233 + 0.2e1 * t6913 * t7851;
t7478 = t7420 ^ 2 * t8248 + 0.2e1 * t7667 * t8233;
t7477 = t7218 * t8022 * t8228 + 0.2e1 * t6914 * t7848;
t7476 = t7423 ^ 2 * t8245 + 0.2e1 * t7666 * t8228;
t7475 = t7221 * t8021 * t8223 + 0.2e1 * t6915 * t7845;
t7474 = t7426 ^ 2 * t8242 + 0.2e1 * t7665 * t8223;
t7055 = t7167 + 0.2e1 * t7110;
t7052 = t7166 + 0.2e1 * t7108;
t7049 = t7165 + 0.2e1 * t7106;
t7044 = t7071 + t7173;
t7043 = t7070 + t7171;
t7042 = t7069 + t7169;
t7032 = t7055 * t7425 + t7408 * t7669;
t7031 = t7052 * t7422 + t7408 * t7678;
t7030 = t7049 * t7419 + t7408 * t7687;
t7029 = t7055 * t7434 - t7425 * t7670;
t7028 = t7052 * t7431 - t7422 * t7679;
t7027 = t7049 * t7428 - t7419 * t7688;
t6996 = t7044 * t7371 + t7047 * t7979;
t6995 = t7043 * t7370 + t7046 * t7980;
t6994 = t7042 * t7369 + t7045 * t7981;
t6993 = t7044 * t8272 - t7047 * t7982;
t6992 = t7043 * t8273 - t7046 * t7983;
t6991 = t7042 * t8274 - t7045 * t7984;
t6957 = ((t7176 * t7758 - 0.2e1 * t7708) * t7220 + t8042) * t8089 - t8282 * t7579;
t6956 = ((t7175 * t7759 - 0.2e1 * t7713) * t7217 + t8043) * t8096 - t8285 * t7580;
t6955 = ((t7174 * t7760 - 0.2e1 * t7718) * t7214 + t8044) * t8103 - t8288 * t7581;
t6954 = (-0.2e1 * t7109 + t7164 + 0.2e1 * t7172) * t7401 + 0.4e1 * t7579 * t8089 + (-t8281 * t7708 + (t8282 * t8165 + t7405) * t7176) * t7220 - t8042;
t6953 = (-0.2e1 * t7107 + t7163 + 0.2e1 * t7170) * t7395 + 0.4e1 * t7580 * t8096 + (-t8284 * t7713 + (t8285 * t8166 + t7399) * t7175) * t7217 - t8043;
t6952 = (-0.2e1 * t7105 + t7162 + 0.2e1 * t7168) * t7389 + 0.4e1 * t7581 * t8103 + (-t8287 * t7718 + (t8288 * t8167 + t7393) * t7174) * t7214 - t8044;
t6885 = t8121 / 0.2e1 + t6915;
t6884 = t8122 / 0.2e1 + t6914;
t6883 = t8123 / 0.2e1 + t6913;
t6873 = t6891 * t7434 - t6915 * t7799;
t6872 = t6889 * t7431 - t6914 * t7802;
t6871 = t6887 * t7428 - t6913 * t7805;
t6852 = -0.2e1 * t6882 * t7979 - 0.2e1 * t6885 * t7371;
t6851 = -0.2e1 * pkin(5) * t7946 + 0.2e1 * t6885 * t8272;
t6850 = -0.2e1 * t6881 * t7980 - 0.2e1 * t6884 * t7370;
t6849 = -0.2e1 * t6880 * t7981 - 0.2e1 * t6883 * t7369;
t6848 = -0.2e1 * pkin(5) * t7947 + 0.2e1 * t6884 * t8273;
t6847 = -0.2e1 * pkin(5) * t7948 + 0.2e1 * t6883 * t8274;
t1 = [(t6913 * t8211 + t6914 * t8209 + t6915 * t8207) * MDP(1) + (-t7147 * t7594 - t7148 * t7591 - t7149 * t7588 + t7187 * t7478 + t7189 * t7476 + t7191 * t7474) * t8252 + (-t7141 * t7903 - t7142 * t7902 - t7143 * t7901 + t7187 * t7479 + t7189 * t7477 + t7191 * t7475) * t8251 + (t7187 * t7945 + t7189 * t7944 + t7191 * t7943 + (t7149 * t7496 + t7191 * t7719) * t7402 + (t7148 * t7498 + t7189 * t7721) * t7396 + (t7147 * t7500 + t7187 * t7723) * t7390) * t8250 + (t6886 * t7866 + t6888 * t7864 + t6890 * t7862 + (t7149 * t7495 - t7191 * t7720) * t7402 + (t7148 * t7497 - t7189 * t7722) * t7396 + (t7147 * t7499 - t7187 * t7724) * t7390) * t8249 + (t6887 * t7903 + t6889 * t7902 + t6891 * t7901 + (t6887 * t8211 + t6889 * t8209 + t6891 * t8207) * t7409) * MDP(8) + (t6847 * t8211 + t6848 * t8209 + t6851 * t8207 + (t6996 * t7771 + t7149 * t7510) * t7402 + (t6995 * t7774 + t7148 * t7512) * t7396 + (t6994 * t7777 + t7147 * t7514) * t7390) * MDP(9) + (t6849 * t8211 + t6850 * t8209 + t6852 * t8207 + (t6993 * t7771 + t7149 * t7511) * t7402 + (t6992 * t7774 + t7148 * t7513) * t7396 + (t6991 * t7777 + t7147 * t7515) * t7390) * MDP(10) + ((t6955 * t7899 + t6956 * t7897 + t6957 * t7895) * t7451 + (t7149 * t7616 + t7191 * t8069) * t7219 + (t7148 * t7618 + t7189 * t8070) * t7216 + (t7147 * t7620 + t7187 * t8071) * t7213) * MDP(11) + ((t6952 * t7899 + t6953 * t7897 + t6954 * t7895) * t7451 + (t7149 * t7779 + t7191 * t8072) * t7219 + (t7148 * t7780 + t7189 * t8073) * t7216 + (t7147 * t7781 + t7187 * t8074) * t7213) * MDP(12) + ((t7149 * t7615 + t7191 * t8063) * t7219 + (t7148 * t7617 + t7189 * t8064) * t7216 + (t7147 * t7619 + t7187 * t8065) * t7213 + (t6874 * t7899 + t6875 * t7897 + t6876 * t7895 + (t7027 * t7547 + t7028 * t7545 + t7029 * t7543) * t7408) * t7451) * MDP(13) + ((t7149 * t7761 + t7191 * t8066) * t7219 + (t7148 * t7762 + t7189 * t8067) * t7216 + (t7147 * t7763 + t7187 * t8068) * t7213 + (t6871 * t7899 + t6872 * t7897 + t6873 * t7895 + (-t7030 * t7547 - t7031 * t7545 - t7032 * t7543) * t7408) * t7451) * MDP(14) + ((-t6895 * t7899 - t6896 * t7897 - t6897 * t7895) * t7451 + (t6895 * t7866 + t6896 * t7864 + t6897 * t7862 + (t7149 * t7931 + (t7155 * t7675 + t7191 * t8027) * t7116) * t8177 + (t7148 * t7933 + (t7153 * t7684 + t7189 * t8028) * t7115) * t8183 + (t7147 * t7935 + (t7151 * t7693 + t7187 * t8029) * t7114) * t8189) * t7408) * MDP(15) + (t7147 * t7894 + t7148 * t7892 + t7149 * t7890 + (-t7149 * t8241 + t7191 * t8075) * t7219 + (t7148 * t8244 + t7189 * t8077) * t7216 + (t7147 * t8247 + t7187 * t8079) * t7213 + (t7151 * t7488 + t7153 * t7486 + t7155 * t7484) * t7451) * MDP(16) + (-t7147 * t7595 - t7148 * t7592 - t7149 * t7589 + (t7149 * t7725 + t7191 * t8076) * t7219 + (-t7148 * t7726 + t7189 * t8078) * t7216 + (-t7147 * t7727 + t7187 * t8080) * t7213 + (t7151 * t7487 + t7153 * t7485 + t7155 * t7483) * t7451) * MDP(17); (t6913 * t8212 + t6914 * t8210 + t6915 * t8208) * MDP(1) + (-t7144 * t7594 - t7145 * t7591 - t7146 * t7588 + t7186 * t7478 + t7188 * t7476 + t7190 * t7474) * t8252 + (-t7141 * t7906 - t7142 * t7905 - t7143 * t7904 + t7186 * t7479 + t7188 * t7477 + t7190 * t7475) * t8251 + (t7186 * t7945 + t7188 * t7944 + t7190 * t7943 + (t7146 * t7496 + t7190 * t7719) * t7402 + (t7145 * t7498 + t7188 * t7721) * t7396 + (t7144 * t7500 + t7186 * t7723) * t7390) * t8250 + (t6886 * t7867 + t6888 * t7865 + t6890 * t7863 + (t7146 * t7495 - t7190 * t7720) * t7402 + (t7145 * t7497 - t7188 * t7722) * t7396 + (t7144 * t7499 - t7186 * t7724) * t7390) * t8249 + (t6887 * t7906 + t6889 * t7905 + t6891 * t7904 + (t6887 * t8212 + t6889 * t8210 + t6891 * t8208) * t7409) * MDP(8) + (t6847 * t8212 + t6848 * t8210 + t6851 * t8208 + (t6996 * t7772 + t7146 * t7510) * t7402 + (t6995 * t7775 + t7145 * t7512) * t7396 + (t6994 * t7778 + t7144 * t7514) * t7390) * MDP(9) + (t6849 * t8212 + t6850 * t8210 + t6852 * t8208 + (t6993 * t7772 + t7146 * t7511) * t7402 + (t6992 * t7775 + t7145 * t7513) * t7396 + (t6991 * t7778 + t7144 * t7515) * t7390) * MDP(10) + ((t6955 * t7900 + t6956 * t7898 + t6957 * t7896) * t7451 + (t7146 * t7616 + t7190 * t8069) * t7219 + (t7145 * t7618 + t7188 * t8070) * t7216 + (t7144 * t7620 + t7186 * t8071) * t7213) * MDP(11) + ((t6952 * t7900 + t6953 * t7898 + t6954 * t7896) * t7451 + (t7146 * t7779 + t7190 * t8072) * t7219 + (t7145 * t7780 + t7188 * t8073) * t7216 + (t7144 * t7781 + t7186 * t8074) * t7213) * MDP(12) + ((t7146 * t7615 + t7190 * t8063) * t7219 + (t7145 * t7617 + t7188 * t8064) * t7216 + (t7144 * t7619 + t7186 * t8065) * t7213 + (t6874 * t7900 + t6875 * t7898 + t6876 * t7896 + (t7027 * t7548 + t7028 * t7546 + t7029 * t7544) * t7408) * t7451) * MDP(13) + ((t7146 * t7761 + t7190 * t8066) * t7219 + (t7145 * t7762 + t7188 * t8067) * t7216 + (t7144 * t7763 + t7186 * t8068) * t7213 + (t6871 * t7900 + t6872 * t7898 + t6873 * t7896 + (-t7030 * t7548 - t7031 * t7546 - t7032 * t7544) * t7408) * t7451) * MDP(14) + ((-t6895 * t7900 - t6896 * t7898 - t6897 * t7896) * t7451 + (t6895 * t7867 + t6896 * t7865 + t6897 * t7863 + (t7146 * t7931 + (t7154 * t7675 + t7190 * t8027) * t7116) * t8177 + (t7145 * t7933 + (t7152 * t7684 + t7188 * t8028) * t7115) * t8183 + (t7144 * t7935 + (t7150 * t7693 + t7186 * t8029) * t7114) * t8189) * t7408) * MDP(15) + (t7144 * t7894 + t7145 * t7892 + t7146 * t7890 + (-t7146 * t8241 + t7190 * t8075) * t7219 + (t7145 * t8244 + t7188 * t8077) * t7216 + (t7144 * t8247 + t7186 * t8079) * t7213 + (t7150 * t7488 + t7152 * t7486 + t7154 * t7484) * t7451) * MDP(16) + (-t7144 * t7595 - t7145 * t7592 - t7146 * t7589 + (t7146 * t7725 + t7190 * t8076) * t7219 + (-t7145 * t7726 + t7188 * t8078) * t7216 + (-t7144 * t7727 + t7186 * t8080) * t7213 + (t7150 * t7487 + t7152 * t7485 + t7154 * t7483) * t7451) * MDP(17); (t6913 * t8200 + t6914 * t8199 + t6915 * t8198) * MDP(1) + (-t7180 * t7594 - t7181 * t7591 - t7182 * t7588 + t7204 * t7478 + t7205 * t7476 + t7206 * t7474) * t8252 + (-t7141 * t7873 - t7142 * t7872 - t7143 * t7871 + t7204 * t7479 + t7205 * t7477 + t7206 * t7475) * t8251 + (t7204 * t7945 + t7205 * t7944 + t7206 * t7943 + (t7182 * t7496 + t7206 * t7719) * t7402 + (t7181 * t7498 + t7205 * t7721) * t7396 + (t7180 * t7500 + t7204 * t7723) * t7390) * t8250 + (t6886 * t7855 + t6888 * t7854 + t6890 * t7853 + (t7182 * t7495 - t7206 * t7720) * t7402 + (t7181 * t7497 - t7205 * t7722) * t7396 + (t7180 * t7499 - t7204 * t7724) * t7390) * t8249 + (t6887 * t7873 + t6889 * t7872 + t6891 * t7871 + (t6887 * t8200 + t6889 * t8199 + t6891 * t8198) * t7409) * MDP(8) + (t6847 * t8200 + t6848 * t8199 + t6851 * t8198 + (t6996 * t7770 + t7182 * t7510) * t7402 + (t6995 * t7773 + t7181 * t7512) * t7396 + (t6994 * t7776 + t7180 * t7514) * t7390) * MDP(9) + (t6849 * t8200 + t6850 * t8199 + t6852 * t8198 + (t6993 * t7770 + t7182 * t7511) * t7402 + (t6992 * t7773 + t7181 * t7513) * t7396 + (t6991 * t7776 + t7180 * t7515) * t7390) * MDP(10) + ((-t6955 * t7870 - t6956 * t7869 - t6957 * t7868) * t8124 + (t7182 * t7616 + t7206 * t8069) * t7219 + (t7181 * t7618 + t7205 * t8070) * t7216 + (t7180 * t7620 + t7204 * t8071) * t7213) * MDP(11) + ((-t6952 * t7870 - t6953 * t7869 - t6954 * t7868) * t8124 + (t7182 * t7779 + t7206 * t8072) * t7219 + (t7181 * t7780 + t7205 * t8073) * t7216 + (t7180 * t7781 + t7204 * t8074) * t7213) * MDP(12) + ((t7182 * t7615 + t7206 * t8063) * t7219 + (t7181 * t7617 + t7205 * t8064) * t7216 + (t7180 * t7619 + t7204 * t8065) * t7213 + ((-t6874 * t7870 - t6875 * t7869 - t6876 * t7868) * t7408 + (-t7027 * t7542 - t7028 * t7540 - t7029 * t7538) * t7382) * t7451) * MDP(13) + ((t7182 * t7761 + t7206 * t8066) * t7219 + (t7181 * t7762 + t7205 * t8067) * t7216 + (t7180 * t7763 + t7204 * t8068) * t7213 + ((-t6871 * t7870 - t6872 * t7869 - t6873 * t7868) * t7408 + (t7030 * t7542 + t7031 * t7540 + t7032 * t7538) * t7382) * t7451) * MDP(14) + ((-t7177 * t7183 * t7198 * t7391 * t7930 - t7178 * t7184 * t7200 * t7397 * t7925 - t7179 * t7185 * t7202 * t7403 * t7920) * t7451 * t7382 + (t6895 * t7855 + t6896 * t7854 + t6897 * t7853 + (t7185 * t6897 * t8201 + (t7065 * t7179 * t7182 + t7116 * t7206 * t8304) * t8177) * t7402 + (t7184 * t6896 * t8203 + (t7063 * t7178 * t7181 + t7115 * t7205 * t8305) * t8183) * t7396 + (t7183 * t6895 * t8205 + (t7061 * t7177 * t7180 + t7114 * t7204 * t8306) * t8189) * t7390) * t7408) * MDP(15) + (t7180 * t7894 + t7181 * t7892 + t7182 * t7890 + (-t7182 * t8241 + t7206 * t8075) * t7219 + (t7181 * t8244 + t7205 * t8077) * t7216 + (t7180 * t8247 + t7204 * t8079) * t7213 + (-t7532 * t7868 - t7534 * t7869 - t7536 * t7870) * t8124) * MDP(16) + (-t7180 * t7595 - t7181 * t7592 - t7182 * t7589 + (t7182 * t7725 + t7206 * t8076) * t7219 + (-t7181 * t7726 + t7205 * t8078) * t7216 + (-t7180 * t7727 + t7204 * t8080) * t7213 + (-t7531 * t7868 - t7533 * t7869 - t7535 * t7870) * t8124) * MDP(17);];
taucX  = t1;
