% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:30:52
% EndTime: 2020-08-06 22:36:13
% DurationCPUTime: 339.28s
% Computational Cost: add. (2646468->1902), mult. (6657444->3498), div. (84645->23), fcn. (5270355->26), ass. (0->1270)
t3035 = cos(qJ(3,3));
t2997 = 0.1e1 / t3035;
t3947 = 0.2e1 * t2997;
t3038 = cos(qJ(3,2));
t3003 = 0.1e1 / t3038;
t3946 = 0.2e1 * t3003;
t3041 = cos(qJ(3,1));
t3009 = 0.1e1 / t3041;
t3945 = 0.2e1 * t3009;
t3034 = sin(qJ(1,1));
t3043 = cos(qJ(1,1));
t3044 = xDP(3);
t3025 = legFrame(1,2);
t2966 = sin(t3025);
t2969 = cos(t3025);
t3045 = xDP(2);
t3046 = xDP(1);
t3177 = t2966 * t3045 - t2969 * t3046;
t2858 = t3034 * t3044 + t3043 * t3177;
t2879 = t2966 * t3046 + t2969 * t3045;
t3042 = cos(qJ(2,1));
t3778 = t2879 * t3042;
t2873 = pkin(6) * t3778;
t2804 = pkin(5) * t2858 - t2873;
t2855 = t3034 * t3177 - t3043 * t3044;
t2876 = pkin(5) * t2879;
t3032 = sin(qJ(3,1));
t2974 = t3032 * pkin(2);
t3016 = cos(pkin(3));
t2991 = t3016 ^ 2;
t3008 = t3041 ^ 2;
t3015 = sin(pkin(3));
t3033 = sin(qJ(2,1));
t3768 = (t3042 + 0.1e1) * (t3042 - 0.1e1);
t3862 = pkin(6) * t3015;
t3350 = t3768 * t3862;
t3692 = t3033 * t3042;
t3403 = t3015 * t3692;
t3872 = pkin(2) * t2858;
t3568 = t3033 * t3872;
t3012 = t3042 ^ 2;
t2961 = t3012 - 0.2e1;
t3616 = t2961 * t2974;
t3740 = t3015 * t3033;
t3624 = -0.2e1 * t3740;
t3859 = pkin(6) * t3042;
t2849 = t2858 * t3859;
t3646 = t2849 + t2876;
t3781 = t2855 * t3015;
t3869 = pkin(2) * t3008;
t3885 = 0.2e1 * t3008 - 0.1e1;
t2975 = t3033 * pkin(6);
t3938 = t2975 + pkin(1);
t2723 = ((-t2879 * t3616 + t3646) * t3041 + (t2804 * t3032 - t3872 * t3885) * t3033) * t2991 + (-(t2855 * t3042 + t2879 * t3624) * t3869 + ((-t2858 * t3616 + t2804) * t3015 - t3938 * t2855) * t3041 - (pkin(2) * t2879 + t3032 * t3646) * t3740) * t3016 + t3008 * t3568 + ((t2855 * t3403 + t2879 * t3768) * t2974 - t2876) * t3041 + ((pkin(1) * t3781 - t2804) * t3033 - t2855 * t3350 + pkin(1) * t3778) * t3032 - t3568;
t2955 = pkin(1) * t2974;
t3693 = t3033 * t3041;
t2903 = -pkin(2) * t3693 + t3859;
t3775 = t2903 * t3016;
t3688 = t3041 * t3042;
t3928 = -pkin(2) * t3688 - t2975;
t2834 = pkin(1) * t3775 + (pkin(5) * t3928 + t2955) * t3015;
t2826 = 0.1e1 / t2834;
t3788 = t2826 * t3009;
t2717 = t2723 * t3788;
t2707 = pkin(6) * t2717;
t3745 = t3015 * t3016;
t3129 = -t2858 * t3745 - t2879 * t2991;
t2801 = -t2879 - t3129;
t2938 = 0.2e1 * t2975 + pkin(1);
t2978 = pkin(1) * t3033;
t2942 = t2978 + pkin(6);
t2937 = t2974 + pkin(5);
t3096 = (t2858 * t2991 - t2879 * t3745 - t2858) * t2937;
t3114 = t3129 * pkin(6);
t3054 = pkin(6) ^ 2;
t3057 = pkin(2) ^ 2;
t3750 = t3008 * t3057;
t3362 = -t3054 + t3750;
t3216 = t3362 * t3015;
t3425 = t3033 * t3750;
t3864 = pkin(2) * t3041;
t3637 = pkin(6) * t3864;
t3561 = -0.2e1 * t3637;
t2747 = (t2801 * t3561 + t2855 * t3216) * t3012 + (t2801 * t3425 + (t2938 * t3781 + t3096) * t3864 + (t2879 * t3938 + t3033 * t3114) * pkin(6)) * t3042 - (t2879 * t2942 + t3114) * t3864 + pkin(6) * (t2942 * t3781 + t3033 * t3096);
t2894 = t3015 * (-pkin(5) * t2975 + t2955);
t3881 = pkin(1) * t3016;
t2949 = pkin(6) * t3881;
t3722 = t3016 * t3033;
t3621 = pkin(1) * t3722;
t3344 = t3041 * t3621;
t3734 = t3015 * t3041;
t3602 = pkin(2) * t3734;
t2816 = (-pkin(5) * t3602 + t2949) * t3042 - pkin(2) * t3344 + t2894;
t2809 = 0.1e1 / t2816;
t3809 = t2809 * t3009;
t3514 = t2747 * t3809;
t2729 = t3032 * t3514;
t2624 = t2729 - t2707;
t3058 = 0.1e1 / pkin(2);
t3302 = t3058 * t3514;
t3237 = pkin(5) * t3302;
t2627 = -t2707 + t3237;
t2786 = (-t2849 + pkin(2) * (t2858 * t3693 - t2879 * t3032)) * t3016 + (t2873 - (t2858 * t3032 + t2879 * t3693) * pkin(2)) * t3015 - t3928 * t2855;
t2780 = t2786 * t2826;
t2774 = t3016 * t2780;
t2663 = t2774 + t2717;
t2696 = -0.2e1 * t2707;
t2701 = pkin(1) * t2717;
t2741 = pkin(2) * t3514;
t2981 = pkin(1) * t3012;
t2918 = t2981 - t3938;
t3055 = pkin(5) ^ 2;
t2988 = t3055 + t3057;
t3060 = pkin(1) ^ 2;
t3394 = t3060 + t2988;
t2920 = t3054 + t3394;
t2926 = t2975 / 0.2e1 + pkin(1);
t2936 = pkin(5) * t3032 + pkin(2);
t2954 = pkin(5) * t2974;
t2945 = 0.2e1 * t2954;
t2948 = t3012 - 0.1e1 / 0.2e1;
t2958 = pkin(1) * t2975;
t3913 = 0.2e1 * pkin(6);
t3014 = pkin(1) * t3913;
t3048 = -0.3e1 * t3054;
t3050 = pkin(6) / 0.2e1;
t2704 = t3054 * t2717;
t3126 = -pkin(6) * t2729 + t2704;
t3204 = t3042 * t3302;
t3156 = t3032 * t3204;
t2735 = pkin(1) * t3302;
t3171 = t3033 * t2735;
t3205 = t3015 * t3302;
t3172 = pkin(1) * t3205;
t3452 = t2826 * t3692;
t3275 = t2786 * t3452;
t3180 = t2937 * t3275;
t3281 = t2937 * t2774;
t3243 = 0.2e1 * t3281;
t3256 = 0.3e1 * t3054 + t3394;
t3257 = t3033 * t3514;
t3827 = t2723 * t3009;
t3526 = t3015 * t3827;
t3260 = t3938 * t3526;
t3011 = t3042 * t3012;
t3787 = t2826 * t3015;
t3485 = t2786 * t3787;
t3278 = t3011 * t3485;
t3771 = (t3016 + 0.1e1) * (t3016 - 0.1e1);
t3279 = t3771 * t2780;
t3733 = t3015 * t3042;
t3586 = pkin(5) * t3733;
t2891 = t3586 + t3621;
t3010 = 0.1e1 / t3041 ^ 2;
t3714 = t3016 * t3042;
t3572 = pkin(1) * t3714;
t3802 = 0.1e1 / (pkin(6) * t3572 - t2891 * t3864 + t2894) * t3010;
t3829 = t2723 * t2826;
t3314 = t3802 * t3829;
t3893 = t2991 - 0.1e1;
t3341 = t3893 * t3692;
t3353 = pkin(6) * t2774;
t3389 = t3015 * t2949;
t3585 = pkin(6) * t3771;
t3393 = -0.2e1 * t3585;
t3642 = t3055 / 0.2e1 + t3057 / 0.2e1;
t3395 = t3054 + t3642;
t3640 = t3057 - t3054;
t3396 = t2954 + t3640;
t3312 = t3032 * t2717;
t2684 = pkin(2) * t3312;
t2700 = pkin(5) * t2717;
t2732 = pkin(6) * t3302;
t3652 = t2700 + t2732;
t3399 = t2684 + t3652;
t3723 = t3016 * t3032;
t3419 = t3015 * t3723;
t3007 = t3041 * t3008;
t3732 = t3015 * pkin(2) * t3057;
t3426 = t3007 * t3732;
t3442 = t3057 * t3771;
t3443 = t3041 * t3771;
t3453 = t2826 * t3750;
t3515 = t2747 * t3802;
t3826 = t2723 * t3057;
t3523 = t3009 * t3826;
t3560 = 0.2e1 * t3637;
t3582 = t2991 * t2975;
t3601 = pkin(2) * t3733;
t3655 = t2707 / 0.2e1 - t2729 / 0.2e1;
t3249 = pkin(6) * t2700;
t3658 = t3249 / 0.2e1 + pkin(6) * t3281;
t3667 = t3399 * t3033 + t2735;
t3767 = t2991 * t3054;
t3841 = t2627 * t3033;
t3905 = -0.2e1 * t2991;
t3749 = t3009 * t3016;
t3525 = t2723 * t3749;
t2678 = t2826 * t3525 / 0.2e1;
t3789 = t2826 * t2991;
t3433 = t2786 * t3789;
t3910 = 0.2e1 * t3433 + 0.2e1 * t2678 - t2780;
t3914 = -0.2e1 * pkin(6);
t3916 = 0.2e1 * pkin(1);
t2507 = (t2809 * (((t2624 * t3389 + (t3008 * t3523 * t3881 + ((t3916 + 0.3e1 * t2975 - 0.3e1 * t3582) * t3750 + pkin(6) * (t2926 * t3914 + t3033 * t3767)) * t2786) * t3787) * t3012 + (t3426 * t3910 + (t3033 * t3243 + t3667) * t3008 * t3442 + ((-(t2729 + t2696) * t2978 + t3126) * t3016 + ((t2954 + t3395) * t3905 + t2945 + 0.4e1 * t2958 + t3256) * t2780) * t3602 + t3033 * (-t2627 * t2974 / 0.2e1 - t2741 / 0.2e1 + t3658) * t3393) * t3042 + (t3425 * t3910 - t2624 * t3938 * t3016 + (t3014 + ((t2954 + t3642) * t3905 + t2945 + t2920) * t3033) * t2780) * t3862 + (-(t3048 + t3750) * t3278 + ((t2696 + t3237) * t2974 + t2741 - t3054 * t3302 - 0.4e1 * t3658) * t3012 + pkin(6) * (t3171 + t3243 + t3399)) * pkin(2) * t3443) * t2786 * t3788 + ((t3042 * t3279 * t3938 + t3172) * t3869 + (t3396 * t3012 * t3279 - (-t3514 + (t2774 * t2942 - t2627) * t3032) * t3601 + pkin(1) * t3257 * t3723) * t3041 + (-t3156 * t3881 - t3015 * ((t2701 - t3841) * t3032 - t3257) + (t3893 * t3041 * t2942 + t2918 * t3419 + t2936 * t3341) * t2780) * pkin(6)) * t3515) + (t3042 * t2663 * t3426 + (t3260 + (t2937 * t3692 * t3771 + (t2975 + t2981) * t3745) * t2786) * t3453 + (((t2978 + t3050) * t2774 + t3655) * t3733 - t2948 * t2937 * t3279) * t3560 - pkin(6) * (t3180 * t3585 + (t3353 * t2981 + (-t3353 + t2624) * t3938) * t3015)) * t3314) * t3058;
t3031 = sin(qJ(1,2));
t3040 = cos(qJ(1,2));
t3024 = legFrame(2,2);
t2965 = sin(t3024);
t2968 = cos(t3024);
t3178 = t2965 * t3045 - t2968 * t3046;
t2857 = t3031 * t3044 + t3040 * t3178;
t2878 = t2965 * t3046 + t2968 * t3045;
t3039 = cos(qJ(2,2));
t3779 = t2878 * t3039;
t2872 = pkin(6) * t3779;
t2803 = pkin(5) * t2857 - t2872;
t2854 = t3031 * t3178 - t3040 * t3044;
t2875 = pkin(5) * t2878;
t3029 = sin(qJ(3,2));
t2972 = t3029 * pkin(2);
t3002 = t3038 ^ 2;
t3030 = sin(qJ(2,2));
t3769 = (t3039 + 0.1e1) * (t3039 - 0.1e1);
t3351 = t3769 * t3862;
t3699 = t3030 * t3039;
t3406 = t3015 * t3699;
t3873 = pkin(2) * t2857;
t3569 = t3030 * t3873;
t3006 = t3039 ^ 2;
t2960 = t3006 - 0.2e1;
t3617 = t2960 * t2972;
t3742 = t3015 * t3030;
t3625 = -0.2e1 * t3742;
t3860 = pkin(6) * t3039;
t2848 = t2857 * t3860;
t3647 = t2848 + t2875;
t3782 = t2854 * t3015;
t3870 = pkin(2) * t3002;
t3888 = 0.2e1 * t3002 - 0.1e1;
t2973 = t3030 * pkin(6);
t3939 = t2973 + pkin(1);
t2722 = ((-t2878 * t3617 + t3647) * t3038 + (t2803 * t3029 - t3873 * t3888) * t3030) * t2991 + (-(t2854 * t3039 + t2878 * t3625) * t3870 + ((-t2857 * t3617 + t2803) * t3015 - t3939 * t2854) * t3038 - (pkin(2) * t2878 + t3029 * t3647) * t3742) * t3016 + t3002 * t3569 + ((t2854 * t3406 + t2878 * t3769) * t2972 - t2875) * t3038 + ((pkin(1) * t3782 - t2803) * t3030 - t2854 * t3351 + pkin(1) * t3779) * t3029 - t3569;
t2953 = pkin(1) * t2972;
t3700 = t3030 * t3038;
t2902 = -pkin(2) * t3700 + t3860;
t3776 = t2902 * t3016;
t3689 = t3038 * t3039;
t3927 = -pkin(2) * t3689 - t2973;
t2833 = pkin(1) * t3776 + (pkin(5) * t3927 + t2953) * t3015;
t2823 = 0.1e1 / t2833;
t3794 = t2823 * t3003;
t2715 = t2722 * t3794;
t2706 = pkin(6) * t2715;
t3130 = -t2857 * t3745 - t2878 * t2991;
t2800 = -t2878 - t3130;
t2934 = 0.2e1 * t2973 + pkin(1);
t2977 = pkin(1) * t3030;
t2941 = t2977 + pkin(6);
t2933 = t2972 + pkin(5);
t3097 = (t2857 * t2991 - t2878 * t3745 - t2857) * t2933;
t3115 = t3130 * pkin(6);
t3757 = t3002 * t3057;
t3363 = -t3054 + t3757;
t3217 = t3363 * t3015;
t3428 = t3030 * t3757;
t3866 = pkin(2) * t3038;
t3638 = pkin(6) * t3866;
t3563 = -0.2e1 * t3638;
t2746 = (t2800 * t3563 + t2854 * t3217) * t3006 + (t2800 * t3428 + (t2934 * t3782 + t3097) * t3866 + (t2878 * t3939 + t3030 * t3115) * pkin(6)) * t3039 - (t2878 * t2941 + t3115) * t3866 + pkin(6) * (t2941 * t3782 + t3030 * t3097);
t2893 = t3015 * (-pkin(5) * t2973 + t2953);
t3724 = t3016 * t3030;
t3622 = pkin(1) * t3724;
t3345 = t3038 * t3622;
t3736 = t3015 * t3038;
t3604 = pkin(2) * t3736;
t2815 = (-pkin(5) * t3604 + t2949) * t3039 - pkin(2) * t3345 + t2893;
t2807 = 0.1e1 / t2815;
t3811 = t2807 * t3003;
t3517 = t2746 * t3811;
t2728 = t3029 * t3517;
t2623 = t2728 - t2706;
t3305 = t3058 * t3517;
t3238 = pkin(5) * t3305;
t2626 = -t2706 + t3238;
t2785 = (-t2848 + pkin(2) * (t2857 * t3700 - t2878 * t3029)) * t3016 + (t2872 - (t2857 * t3029 + t2878 * t3700) * pkin(2)) * t3015 - t3927 * t2854;
t2778 = t2785 * t2823;
t2773 = t3016 * t2778;
t2660 = t2773 + t2715;
t2695 = -0.2e1 * t2706;
t2699 = pkin(1) * t2715;
t2740 = pkin(2) * t3517;
t2980 = pkin(1) * t3006;
t2917 = t2980 - t3939;
t2924 = t2973 / 0.2e1 + pkin(1);
t2932 = pkin(5) * t3029 + pkin(2);
t2952 = pkin(5) * t2972;
t2944 = 0.2e1 * t2952;
t2947 = t3006 - 0.1e1 / 0.2e1;
t2957 = pkin(1) * t2973;
t2703 = t3054 * t2715;
t3127 = -pkin(6) * t2728 + t2703;
t3206 = t3039 * t3305;
t3157 = t3029 * t3206;
t2734 = pkin(1) * t3305;
t3173 = t3030 * t2734;
t3207 = t3015 * t3305;
t3174 = pkin(1) * t3207;
t3455 = t2823 * t3699;
t3284 = t2785 * t3455;
t3181 = t2933 * t3284;
t3290 = t2933 * t2773;
t3244 = 0.2e1 * t3290;
t3258 = t3030 * t3517;
t3832 = t2722 * t3003;
t3531 = t3015 * t3832;
t3261 = t3939 * t3531;
t3005 = t3039 * t3006;
t3793 = t2823 * t3015;
t3490 = t2785 * t3793;
t3287 = t3005 * t3490;
t3288 = t3771 * t2778;
t3735 = t3015 * t3039;
t3587 = pkin(5) * t3735;
t2890 = t3587 + t3622;
t3004 = 0.1e1 / t3038 ^ 2;
t3717 = t3016 * t3039;
t3619 = pkin(1) * t3717;
t3803 = 0.1e1 / (pkin(6) * t3619 - t2890 * t3866 + t2893) * t3004;
t3834 = t2722 * t2823;
t3319 = t3803 * t3834;
t3342 = t3893 * t3699;
t3354 = pkin(6) * t2773;
t3397 = t2952 + t3640;
t3317 = t3029 * t2715;
t2683 = pkin(2) * t3317;
t2698 = pkin(5) * t2715;
t2731 = pkin(6) * t3305;
t3653 = t2698 + t2731;
t3400 = t2683 + t3653;
t3725 = t3016 * t3029;
t3421 = t3015 * t3725;
t3001 = t3038 * t3002;
t3429 = t3001 * t3732;
t3444 = t3038 * t3771;
t3456 = t2823 * t3757;
t3518 = t2746 * t3803;
t3831 = t2722 * t3057;
t3528 = t3003 * t3831;
t3562 = 0.2e1 * t3638;
t3583 = t2991 * t2973;
t3603 = pkin(2) * t3735;
t3656 = t2706 / 0.2e1 - t2728 / 0.2e1;
t3250 = pkin(6) * t2698;
t3659 = t3250 / 0.2e1 + pkin(6) * t3290;
t3668 = t3400 * t3030 + t2734;
t3842 = t2626 * t3030;
t3756 = t3003 * t3016;
t3530 = t2722 * t3756;
t2677 = t2823 * t3530 / 0.2e1;
t3795 = t2823 * t2991;
t3434 = t2785 * t3795;
t3911 = 0.2e1 * t3434 + 0.2e1 * t2677 - t2778;
t2506 = (t2807 * (((t2623 * t3389 + (t3002 * t3528 * t3881 + ((t3916 + 0.3e1 * t2973 - 0.3e1 * t3583) * t3757 + pkin(6) * (t2924 * t3914 + t3030 * t3767)) * t2785) * t3793) * t3006 + (t3429 * t3911 + (t3030 * t3244 + t3668) * t3002 * t3442 + ((-(t2728 + t2695) * t2977 + t3127) * t3016 + ((t2952 + t3395) * t3905 + t2944 + 0.4e1 * t2957 + t3256) * t2778) * t3604 + t3030 * (-t2626 * t2972 / 0.2e1 - t2740 / 0.2e1 + t3659) * t3393) * t3039 + (t3428 * t3911 - t2623 * t3939 * t3016 + (t3014 + ((t2952 + t3642) * t3905 + t2944 + t2920) * t3030) * t2778) * t3862 + (-(t3048 + t3757) * t3287 + ((t2695 + t3238) * t2972 + t2740 - t3054 * t3305 - 0.4e1 * t3659) * t3006 + pkin(6) * (t3173 + t3244 + t3400)) * pkin(2) * t3444) * t2785 * t3794 + ((t3039 * t3288 * t3939 + t3174) * t3870 + (t3397 * t3006 * t3288 - (-t3517 + (t2773 * t2941 - t2626) * t3029) * t3603 + pkin(1) * t3258 * t3725) * t3038 + (-t3157 * t3881 - t3015 * ((t2699 - t3842) * t3029 - t3258) + (t3893 * t3038 * t2941 + t2917 * t3421 + t2932 * t3342) * t2778) * pkin(6)) * t3518) + (t3039 * t2660 * t3429 + (t3261 + (t2933 * t3699 * t3771 + (t2973 + t2980) * t3745) * t2785) * t3456 + (((t2977 + t3050) * t2773 + t3656) * t3735 - t2947 * t2933 * t3288) * t3562 - pkin(6) * (t3181 * t3585 + (t3354 * t2980 + (-t3354 + t2623) * t3939) * t3015)) * t3319) * t3058;
t3028 = sin(qJ(1,3));
t3037 = cos(qJ(1,3));
t3023 = legFrame(3,2);
t2964 = sin(t3023);
t2967 = cos(t3023);
t3179 = t2964 * t3045 - t2967 * t3046;
t2856 = t3028 * t3044 + t3037 * t3179;
t2877 = t2964 * t3046 + t2967 * t3045;
t3036 = cos(qJ(2,3));
t3780 = t2877 * t3036;
t2871 = pkin(6) * t3780;
t2802 = pkin(5) * t2856 - t2871;
t2853 = t3028 * t3179 - t3037 * t3044;
t2874 = pkin(5) * t2877;
t3026 = sin(qJ(3,3));
t2970 = t3026 * pkin(2);
t2996 = t3035 ^ 2;
t3027 = sin(qJ(2,3));
t3770 = (t3036 + 0.1e1) * (t3036 - 0.1e1);
t3352 = t3770 * t3862;
t3706 = t3027 * t3036;
t3409 = t3015 * t3706;
t3874 = pkin(2) * t2856;
t3571 = t3027 * t3874;
t3000 = t3036 ^ 2;
t2959 = t3000 - 0.2e1;
t3618 = t2959 * t2970;
t3744 = t3015 * t3027;
t3626 = -0.2e1 * t3744;
t3861 = pkin(6) * t3036;
t2847 = t2856 * t3861;
t3648 = t2847 + t2874;
t3783 = t2853 * t3015;
t3871 = pkin(2) * t2996;
t3891 = 0.2e1 * t2996 - 0.1e1;
t2971 = t3027 * pkin(6);
t3940 = t2971 + pkin(1);
t2721 = ((-t2877 * t3618 + t3648) * t3035 + (t2802 * t3026 - t3891 * t3874) * t3027) * t2991 + (-(t2853 * t3036 + t2877 * t3626) * t3871 + ((-t2856 * t3618 + t2802) * t3015 - t3940 * t2853) * t3035 - (pkin(2) * t2877 + t3026 * t3648) * t3744) * t3016 + t2996 * t3571 + ((t2853 * t3409 + t2877 * t3770) * t2970 - t2874) * t3035 + ((pkin(1) * t3783 - t2802) * t3027 - t2853 * t3352 + pkin(1) * t3780) * t3026 - t3571;
t2951 = pkin(1) * t2970;
t3707 = t3027 * t3035;
t2901 = -pkin(2) * t3707 + t3861;
t3777 = t2901 * t3016;
t3690 = t3035 * t3036;
t3926 = -pkin(2) * t3690 - t2971;
t2832 = pkin(1) * t3777 + (pkin(5) * t3926 + t2951) * t3015;
t2820 = 0.1e1 / t2832;
t3800 = t2820 * t2997;
t2713 = t2721 * t3800;
t2705 = pkin(6) * t2713;
t3131 = -t2856 * t3745 - t2877 * t2991;
t2799 = -t2877 - t3131;
t2930 = 0.2e1 * t2971 + pkin(1);
t2976 = pkin(1) * t3027;
t2940 = t2976 + pkin(6);
t2929 = t2970 + pkin(5);
t3098 = (t2856 * t2991 - t2877 * t3745 - t2856) * t2929;
t3116 = t3131 * pkin(6);
t3764 = t2996 * t3057;
t3364 = -t3054 + t3764;
t3221 = t3015 * t3364;
t3431 = t3027 * t3764;
t3868 = pkin(2) * t3035;
t3639 = pkin(6) * t3868;
t3565 = -0.2e1 * t3639;
t2745 = (t2799 * t3565 + t2853 * t3221) * t3000 + (t2799 * t3431 + (t2930 * t3783 + t3098) * t3868 + (t2877 * t3940 + t3027 * t3116) * pkin(6)) * t3036 - (t2877 * t2940 + t3116) * t3868 + pkin(6) * (t2940 * t3783 + t3027 * t3098);
t2892 = t3015 * (-pkin(5) * t2971 + t2951);
t3726 = t3016 * t3027;
t3623 = pkin(1) * t3726;
t3346 = t3035 * t3623;
t3738 = t3015 * t3035;
t3606 = pkin(2) * t3738;
t2814 = (-pkin(5) * t3606 + t2949) * t3036 - pkin(2) * t3346 + t2892;
t2805 = 0.1e1 / t2814;
t3813 = t2805 * t2997;
t3520 = t2745 * t3813;
t2727 = t3026 * t3520;
t2622 = t2727 - t2705;
t3308 = t3058 * t3520;
t3239 = pkin(5) * t3308;
t2625 = -t2705 + t3239;
t2784 = (-t2847 + pkin(2) * (t2856 * t3707 - t2877 * t3026)) * t3016 + (t2871 - (t2856 * t3026 + t2877 * t3707) * pkin(2)) * t3015 - t3926 * t2853;
t2776 = t2784 * t2820;
t2772 = t3016 * t2776;
t2657 = t2772 + t2713;
t2694 = -0.2e1 * t2705;
t2711 = pkin(1) * t2713;
t2739 = pkin(2) * t3520;
t2979 = pkin(1) * t3000;
t2916 = t2979 - t3940;
t2922 = t2971 / 0.2e1 + pkin(1);
t2928 = pkin(5) * t3026 + pkin(2);
t2950 = pkin(5) * t2970;
t2943 = 0.2e1 * t2950;
t2946 = t3000 - 0.1e1 / 0.2e1;
t2956 = pkin(1) * t2971;
t2702 = t3054 * t2713;
t3128 = -pkin(6) * t2727 + t2702;
t3208 = t3036 * t3308;
t3158 = t3026 * t3208;
t2733 = pkin(1) * t3308;
t3175 = t3027 * t2733;
t3209 = t3015 * t3308;
t3176 = pkin(1) * t3209;
t3458 = t2820 * t3706;
t3293 = t2784 * t3458;
t3183 = t2929 * t3293;
t3299 = t2929 * t2772;
t3245 = 0.2e1 * t3299;
t3259 = t3027 * t3520;
t3837 = t2721 * t2997;
t3536 = t3015 * t3837;
t3262 = t3940 * t3536;
t2999 = t3036 * t3000;
t3799 = t2820 * t3015;
t3495 = t2784 * t3799;
t3296 = t2999 * t3495;
t3297 = t3771 * t2776;
t3737 = t3015 * t3036;
t3588 = pkin(5) * t3737;
t2889 = t3588 + t3623;
t2998 = 0.1e1 / t3035 ^ 2;
t3720 = t3016 * t3036;
t3620 = pkin(1) * t3720;
t3804 = 0.1e1 / (pkin(6) * t3620 - t2889 * t3868 + t2892) * t2998;
t3839 = t2721 * t2820;
t3324 = t3804 * t3839;
t3343 = t3893 * t3706;
t3355 = pkin(6) * t2772;
t3398 = t2950 + t3640;
t3322 = t3026 * t2713;
t2682 = pkin(2) * t3322;
t2697 = pkin(5) * t2713;
t2730 = pkin(6) * t3308;
t3654 = t2697 + t2730;
t3401 = t2682 + t3654;
t3727 = t3016 * t3026;
t3423 = t3015 * t3727;
t2995 = t3035 * t2996;
t3432 = t2995 * t3732;
t3445 = t3035 * t3771;
t3459 = t2820 * t3764;
t3521 = t2745 * t3804;
t3836 = t2721 * t3057;
t3533 = t2997 * t3836;
t3564 = 0.2e1 * t3639;
t3584 = t2991 * t2971;
t3605 = pkin(2) * t3737;
t3657 = t2705 / 0.2e1 - t2727 / 0.2e1;
t3251 = pkin(6) * t2697;
t3660 = t3251 / 0.2e1 + pkin(6) * t3299;
t3669 = t3401 * t3027 + t2733;
t3843 = t2625 * t3027;
t3763 = t2997 * t3016;
t3535 = t2721 * t3763;
t2676 = t2820 * t3535 / 0.2e1;
t3801 = t2820 * t2991;
t3435 = t2784 * t3801;
t3912 = 0.2e1 * t3435 + 0.2e1 * t2676 - t2776;
t2505 = (t2805 * (((t2622 * t3389 + (t2996 * t3533 * t3881 + ((t3916 + 0.3e1 * t2971 - 0.3e1 * t3584) * t3764 + pkin(6) * (t2922 * t3914 + t3027 * t3767)) * t2784) * t3799) * t3000 + (t3432 * t3912 + (t3027 * t3245 + t3669) * t2996 * t3442 + ((-(t2727 + t2694) * t2976 + t3128) * t3016 + ((t2950 + t3395) * t3905 + t2943 + 0.4e1 * t2956 + t3256) * t2776) * t3606 + (-t2625 * t2970 / 0.2e1 - t2739 / 0.2e1 + t3660) * t3027 * t3393) * t3036 + (t3431 * t3912 - t2622 * t3940 * t3016 + (t3014 + ((t2950 + t3642) * t3905 + t2943 + t2920) * t3027) * t2776) * t3862 + (-(t3048 + t3764) * t3296 + ((t2694 + t3239) * t2970 + t2739 - t3054 * t3308 - 0.4e1 * t3660) * t3000 + pkin(6) * (t3175 + t3245 + t3401)) * pkin(2) * t3445) * t2784 * t3800 + ((t3036 * t3297 * t3940 + t3176) * t3871 + (t3398 * t3000 * t3297 - (-t3520 + (t2772 * t2940 - t2625) * t3026) * t3605 + pkin(1) * t3259 * t3727) * t3035 + (-t3158 * t3881 - t3015 * ((t2711 - t3843) * t3026 - t3259) + (t3893 * t3035 * t2940 + t2916 * t3423 + t2928 * t3343) * t2776) * pkin(6)) * t3521) + (t3036 * t2657 * t3432 + (t3262 + (t2929 * t3706 * t3771 + (t2971 + t2979) * t3745) * t2784) * t3459 + (((t2976 + t3050) * t2772 + t3657) * t3737 - t2946 * t2929 * t3297) * t3564 - pkin(6) * (t3183 * t3585 + (t3355 * t2979 + (-t3355 + t2622) * t3940) * t3015)) * t3324) * t3058;
t2621 = pkin(6) * t3312 - t3514;
t3053 = -0.2e1 * pkin(1);
t3228 = t3042 * pkin(5) * t3526;
t3481 = t2786 * t3733;
t3747 = t3009 * t3033;
t3524 = t2723 * t3747;
t3856 = t3012 * pkin(6);
t3878 = pkin(1) * t3032;
t3897 = -0.2e1 * t3032;
t2531 = ((-t3260 + ((t2981 - 0.2e1 * t2975 + t3053) * t3745 + pkin(5) * t3341) * t2786) * t2826 * t3008 + ((-t3856 / 0.2e1 + t2942) * t3433 * t3897 + ((-t2936 * t3481 - t3524 * t3878) * t2826 - t2621) * t3016 + t3032 * (-t3228 + t2786 * (t2942 - t3856)) * t2826) * t3041 - t2991 * t3180 + (pkin(1) * t3204 - t2918 * t3485) * t3016 + ((-t2627 - t2729) * t3033 + t2701) * t3015 + t3180) * t2809 * t3515;
t3844 = t2621 * t3015;
t2612 = t3938 * t3844;
t2687 = t3042 * t2701;
t3051 = pkin(5) / 0.2e1;
t2925 = t2974 + t3051;
t3165 = pkin(6) * t2936 * t3275;
t3234 = pkin(6) * t3032 * t3485;
t3772 = t2961 * t2991;
t3365 = -t3012 + t3772;
t3413 = t3015 * t3714;
t3627 = -0.2e1 * t3745;
t3752 = t3007 * t3057;
t3883 = t3012 - 0.1e1;
t3213 = ((t2780 + (t2786 * t3365 - t3525) * t2826) * t3752 - (t2687 * t3016 - t3667 * t3015 + (t3042 * (-t2975 + pkin(1)) * t2991 + (t2925 * t3627 + t3859) * t3033) * t2780) * t3869 + ((t2942 * t3016 + t3586) * t2624 + (-(t2958 - t3396) * t2991 + (-pkin(6) * t2937 + t2955 * t3033) * t3413 + (-t2991 * t3012 + t3883) * pkin(2) * t2936) * t2780) * t3041 - t2991 * t3165 - t2918 * t3016 * t3234 + t3165 + t2612) * t3314;
t3162 = t2741 - t3249;
t2576 = pkin(2) * t2627 + t3032 * t3162;
t3894 = t2700 / 0.2e1;
t2618 = t3894 + t2732 / 0.2e1;
t2710 = t2826 * t3523;
t2827 = 0.1e1 / t2834 ^ 2;
t3052 = 0.2e1 * pkin(5);
t3013 = pkin(2) * t3052;
t2768 = t2826 * t3481;
t3189 = t2925 * t2768;
t3255 = -0.3e1 * t3057 - t3054 - t3055 - t3060;
t3482 = t2786 * t3740;
t3277 = t2826 * t3482;
t3785 = t2826 * t3042;
t3483 = t2786 * t3785;
t3280 = t2938 * t3483;
t3311 = t2826 * t3524;
t3313 = t3012 * t2717;
t3446 = t2961 * t3750;
t3610 = t3012 * t2974;
t3751 = t3008 * t3033;
t3611 = pkin(2) * t3751;
t3643 = t3055 / 0.3e1 + t3057;
t3644 = -t3054 / 0.3e1 - 0.2e1 / 0.3e1 * t3057;
t3645 = t3054 / 0.2e1 + t3057;
t3661 = t2684 + t2732;
t3746 = t3012 * t3054;
t3820 = t2786 * t3009;
t3900 = -0.2e1 * t3015;
t3901 = -0.2e1 * t3012;
t3906 = 0.3e1 * t3016 * t2991;
t3941 = -0.4e1 * pkin(6);
t3335 = (((t3012 - 0.4e1 / 0.3e1) * t3752 + ((-0.2e1 / 0.3e1 * t2954 + t3644) * t3012 + 0.4e1 / 0.3e1 * t2954 + t3643) * t3041 + (0.4e1 / 0.3e1 * t3869 - 0.2e1 / 0.3e1 * t2936) * pkin(6) * t3692) * t2780 * t3906 + (t3446 * t3829 - ((t2701 + t3841) * t3042 + (-0.4e1 * t2937 + t3610) * t3277) * t3869 + (t3189 * t3941 - t2704 + t2710 + (-pkin(2) * t3313 + (-t3012 * t3652 + t3278 * t3913 + t2700 + 0.2e1 * t2732) * t3032) * pkin(2) + (0.2e1 * t2747 * t2809 * t3032 - pkin(6) * t3829) * pkin(1) * t3747) * t3041 + t3033 * (t2576 * t3042 + (-t3013 + (-t2988 + t3746) * t3032) * t3485)) * t2991 + ((-0.3e1 * t3012 + 0.3e1) * t3752 * t2780 - (t3012 * t3172 + 0.2e1 * t3280 + ((t3894 + t3661) * t3033 + t2735) * t3900) * t3869 + (((pkin(1) * t3311 + t2627) * t2974 + t3162) * t3733 + (0.2e1 * (t2954 + t3645) * t3012 - 0.4e1 * t2954 - 0.2e1 * t2958 + t3255) * t2780) * t3041 - t3844 * t2981 + 0.2e1 * t3165 + t2612) * t3016 - t3883 * t2710 * t3007 + (t2627 * t3042 + (-t2974 - t3052 + t3610) * t3485) * t3611 + 0.2e1 * ((t3012 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t2717 + (t2618 * t3012 - t3171 / 0.2e1 - t2618 + (-pkin(6) * t3011 + t2942 * t3042) * t3485) * t3032) * t3864 + t2926 * t3234 * t3901 - t2576 * t3692 + ((t2920 * t3032 + t3013) * t3033 + t3032 * t3014) * t3485) * t2827 * t3820;
t2501 = t2531 - t3213 - t3335;
t3935 = t2723 ^ 2 * t3010;
t2716 = t2827 * t3935;
t3059 = 0.1e1 / pkin(2) ^ 2;
t2738 = t2747 ^ 2 * t3010 / t2816 ^ 2 * t3059;
t2630 = t2716 + t2738;
t3464 = t2809 * t3788;
t3283 = t2786 * t3464;
t3144 = t2747 * t3058 * t3283;
t3123 = 0.2e1 * t3144;
t3808 = t2809 * t3058;
t3516 = t2747 * t3808;
t2588 = (((pkin(2) * t3042 + pkin(6) * t3693) * t3015 + pkin(6) * t3723) * t2780 + t2621) * t2747 * t3464;
t3574 = pkin(6) * t3688;
t3607 = t3015 * t2974;
t3641 = t3054 + t3057;
t3712 = t3016 * t3054;
t3915 = -0.2e1 * pkin(2);
t3932 = t2827 * ((-(t3446 - t3746 + (0.2e1 * t3033 * t3574 + t2936) * pkin(2)) * t3433 + ((t3189 + t3655) * t3913 + (t2925 * t3482 * t3915 + t3826) * t2826 * t3041) * t3016 + t2786 * t3453 * t3768 + (-t3661 * t3740 + t3280) * t3864 + t2621 * t3601 + (-t3746 + t2954 + t2958 + t3641) * t2780) * t2786 + (t2663 * t3750 + (t2903 * t3607 + t3712) * t2780 + t3126) * t3827);
t2522 = t2588 - t3932;
t3544 = t2522 * t3740;
t3786 = t2826 * t3033;
t3847 = t2522 * t3042;
t3875 = pkin(1) * t3042;
t3944 = -(pkin(5) * t2501 * t3033 - pkin(1) * t2507) * t3015 + t3847 * t3916 - pkin(5) * (t2630 * t3733 + t2991 * t3123) - (pkin(1) * t2723 * t3786 - pkin(5) * t3516) * t2780 * t3945 + (-0.2e1 * t2786 * t2827 * t3228 + t2501 * t3875 - t2630 * t2978 - t3544 * t3052) * t3016;
t2620 = pkin(6) * t3317 - t3517;
t3229 = t3039 * pkin(5) * t3531;
t3486 = t2785 * t3735;
t3754 = t3003 * t3030;
t3529 = t2722 * t3754;
t3857 = t3006 * pkin(6);
t3879 = pkin(1) * t3029;
t3898 = -0.2e1 * t3029;
t2530 = ((-t3261 + ((t2980 - 0.2e1 * t2973 + t3053) * t3745 + pkin(5) * t3342) * t2785) * t2823 * t3002 + ((-t3857 / 0.2e1 + t2941) * t3434 * t3898 + ((-t2932 * t3486 - t3529 * t3879) * t2823 - t2620) * t3016 + t3029 * (-t3229 + t2785 * (t2941 - t3857)) * t2823) * t3038 - t2991 * t3181 + (pkin(1) * t3206 - t2917 * t3490) * t3016 + ((-t2626 - t2728) * t3030 + t2699) * t3015 + t3181) * t2807 * t3518;
t3845 = t2620 * t3015;
t2611 = t3939 * t3845;
t2686 = t3039 * t2699;
t2923 = t2972 + t3051;
t3166 = pkin(6) * t2932 * t3284;
t3235 = pkin(6) * t3029 * t3490;
t3773 = t2960 * t2991;
t3366 = -t3006 + t3773;
t3415 = t3015 * t3717;
t3759 = t3001 * t3057;
t3886 = t3006 - 0.1e1;
t3214 = ((t2778 + (t2785 * t3366 - t3530) * t2823) * t3759 - (t2686 * t3016 - t3668 * t3015 + (t3039 * (-t2973 + pkin(1)) * t2991 + (t2923 * t3627 + t3860) * t3030) * t2778) * t3870 + ((t2941 * t3016 + t3587) * t2623 + (-(t2957 - t3397) * t2991 + (-pkin(6) * t2933 + t2953 * t3030) * t3415 + (-t2991 * t3006 + t3886) * pkin(2) * t2932) * t2778) * t3038 - t2991 * t3166 - t2917 * t3016 * t3235 + t3166 + t2611) * t3319;
t3163 = t2740 - t3250;
t2575 = pkin(2) * t2626 + t3029 * t3163;
t3895 = t2698 / 0.2e1;
t2617 = t3895 + t2731 / 0.2e1;
t2709 = t2823 * t3528;
t2824 = 0.1e1 / t2833 ^ 2;
t2767 = t2823 * t3486;
t3191 = t2923 * t2767;
t3487 = t2785 * t3742;
t3286 = t2823 * t3487;
t3791 = t2823 * t3039;
t3488 = t2785 * t3791;
t3289 = t2934 * t3488;
t3316 = t2823 * t3529;
t3318 = t3006 * t2715;
t3447 = t2960 * t3757;
t3612 = t3006 * t2972;
t3758 = t3002 * t3030;
t3613 = pkin(2) * t3758;
t3662 = t2683 + t2731;
t3753 = t3006 * t3054;
t3821 = t2785 * t3003;
t3902 = -0.2e1 * t3006;
t3336 = (((t3006 - 0.4e1 / 0.3e1) * t3759 + ((-0.2e1 / 0.3e1 * t2952 + t3644) * t3006 + 0.4e1 / 0.3e1 * t2952 + t3643) * t3038 + (0.4e1 / 0.3e1 * t3870 - 0.2e1 / 0.3e1 * t2932) * pkin(6) * t3699) * t2778 * t3906 + (t3447 * t3834 - ((t2699 + t3842) * t3039 + (-0.4e1 * t2933 + t3612) * t3286) * t3870 + (t3191 * t3941 - t2703 + t2709 + (-pkin(2) * t3318 + (-t3006 * t3653 + t3287 * t3913 + t2698 + 0.2e1 * t2731) * t3029) * pkin(2) + (0.2e1 * t2746 * t2807 * t3029 - pkin(6) * t3834) * pkin(1) * t3754) * t3038 + t3030 * (t2575 * t3039 + (-t3013 + (-t2988 + t3753) * t3029) * t3490)) * t2991 + ((-0.3e1 * t3006 + 0.3e1) * t3759 * t2778 - (t3006 * t3174 + 0.2e1 * t3289 + ((t3895 + t3662) * t3030 + t2734) * t3900) * t3870 + (((pkin(1) * t3316 + t2626) * t2972 + t3163) * t3735 + (0.2e1 * (t2952 + t3645) * t3006 - 0.4e1 * t2952 - 0.2e1 * t2957 + t3255) * t2778) * t3038 - t3845 * t2980 + 0.2e1 * t3166 + t2611) * t3016 - t3886 * t2709 * t3001 + (t2626 * t3039 + (-t2972 - t3052 + t3612) * t3490) * t3613 + 0.2e1 * ((t3006 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t2715 + (t2617 * t3006 - t3173 / 0.2e1 - t2617 + (-pkin(6) * t3005 + t2941 * t3039) * t3490) * t3029) * t3866 + t2924 * t3235 * t3902 - t2575 * t3699 + ((t2920 * t3029 + t3013) * t3030 + t3029 * t3014) * t3490) * t2824 * t3821;
t2500 = t2530 - t3214 - t3336;
t3936 = t2722 ^ 2 * t3004;
t2714 = t2824 * t3936;
t2737 = t2746 ^ 2 * t3004 / t2815 ^ 2 * t3059;
t2629 = t2714 + t2737;
t3466 = t2807 * t3794;
t3292 = t2785 * t3466;
t3146 = t2746 * t3058 * t3292;
t3124 = 0.2e1 * t3146;
t3810 = t2807 * t3058;
t3519 = t2746 * t3810;
t2587 = (((pkin(2) * t3039 + pkin(6) * t3700) * t3015 + pkin(6) * t3725) * t2778 + t2620) * t2746 * t3466;
t3576 = pkin(6) * t3689;
t3608 = t3015 * t2972;
t3933 = t2824 * ((-(t3447 - t3753 + (0.2e1 * t3030 * t3576 + t2932) * pkin(2)) * t3434 + ((t3191 + t3656) * t3913 + (t2923 * t3487 * t3915 + t3831) * t2823 * t3038) * t3016 + t2785 * t3456 * t3769 + (-t3662 * t3742 + t3289) * t3866 + t2620 * t3603 + (-t3753 + t2952 + t2957 + t3641) * t2778) * t2785 + (t2660 * t3757 + (t2902 * t3608 + t3712) * t2778 + t3127) * t3832);
t2521 = t2587 - t3933;
t3545 = t2521 * t3742;
t3792 = t2823 * t3030;
t3850 = t2521 * t3039;
t3876 = pkin(1) * t3039;
t3943 = -(pkin(5) * t2500 * t3030 - pkin(1) * t2506) * t3015 + t3850 * t3916 - pkin(5) * (t2629 * t3735 + t2991 * t3124) - (pkin(1) * t2722 * t3792 - pkin(5) * t3519) * t2778 * t3946 + (-0.2e1 * t2785 * t2824 * t3229 + t2500 * t3876 - t2629 * t2977 - t3545 * t3052) * t3016;
t2619 = pkin(6) * t3322 - t3520;
t3230 = t3036 * pkin(5) * t3536;
t3491 = t2784 * t3737;
t3761 = t2997 * t3027;
t3534 = t2721 * t3761;
t3858 = t3000 * pkin(6);
t3880 = pkin(1) * t3026;
t3899 = -0.2e1 * t3026;
t2529 = ((-t3262 + ((t2979 - 0.2e1 * t2971 + t3053) * t3745 + pkin(5) * t3343) * t2784) * t2820 * t2996 + ((-t3858 / 0.2e1 + t2940) * t3435 * t3899 + ((-t2928 * t3491 - t3534 * t3880) * t2820 - t2619) * t3016 + t3026 * (-t3230 + t2784 * (t2940 - t3858)) * t2820) * t3035 - t2991 * t3183 + (pkin(1) * t3208 - t2916 * t3495) * t3016 + ((-t2625 - t2727) * t3027 + t2711) * t3015 + t3183) * t2805 * t3521;
t3846 = t2619 * t3015;
t2610 = t3940 * t3846;
t2685 = t3036 * t2711;
t2921 = t2970 + t3051;
t3167 = pkin(6) * t2928 * t3293;
t3236 = pkin(6) * t3026 * t3495;
t3774 = t2959 * t2991;
t3367 = -t3000 + t3774;
t3417 = t3015 * t3720;
t3766 = t2995 * t3057;
t3889 = t3000 - 0.1e1;
t3215 = ((t2776 + (t2784 * t3367 - t3535) * t2820) * t3766 - (t2685 * t3016 - t3669 * t3015 + (t3036 * (-t2971 + pkin(1)) * t2991 + (t2921 * t3627 + t3861) * t3027) * t2776) * t3871 + ((t2940 * t3016 + t3588) * t2622 + (-(t2956 - t3398) * t2991 + (-pkin(6) * t2929 + t2951 * t3027) * t3417 + (-t2991 * t3000 + t3889) * pkin(2) * t2928) * t2776) * t3035 - t2991 * t3167 - t2916 * t3016 * t3236 + t3167 + t2610) * t3324;
t3164 = t2739 - t3251;
t2574 = pkin(2) * t2625 + t3026 * t3164;
t3896 = t2697 / 0.2e1;
t2616 = t3896 + t2730 / 0.2e1;
t2708 = t2820 * t3533;
t2821 = 0.1e1 / t2832 ^ 2;
t2766 = t2820 * t3491;
t3193 = t2921 * t2766;
t3492 = t2784 * t3744;
t3295 = t2820 * t3492;
t3797 = t2820 * t3036;
t3493 = t2784 * t3797;
t3298 = t2930 * t3493;
t3321 = t2820 * t3534;
t3323 = t3000 * t2713;
t3402 = t2959 * t3764;
t3614 = t3000 * t2970;
t3765 = t2996 * t3027;
t3615 = pkin(2) * t3765;
t3663 = t2682 + t2730;
t3760 = t3000 * t3054;
t3822 = t2784 * t2997;
t3903 = -0.2e1 * t3000;
t3337 = (((t3000 - 0.4e1 / 0.3e1) * t3766 + ((-0.2e1 / 0.3e1 * t2950 + t3644) * t3000 + 0.4e1 / 0.3e1 * t2950 + t3643) * t3035 + (0.4e1 / 0.3e1 * t3871 - 0.2e1 / 0.3e1 * t2928) * pkin(6) * t3706) * t2776 * t3906 + (t3402 * t3839 - ((t2711 + t3843) * t3036 + (-0.4e1 * t2929 + t3614) * t3295) * t3871 + (t3193 * t3941 - t2702 + t2708 + (-pkin(2) * t3323 + (-t3000 * t3654 + t3296 * t3913 + t2697 + 0.2e1 * t2730) * t3026) * pkin(2) + (0.2e1 * t2745 * t2805 * t3026 - pkin(6) * t3839) * pkin(1) * t3761) * t3035 + t3027 * (t2574 * t3036 + (-t3013 + (-t2988 + t3760) * t3026) * t3495)) * t2991 + ((-0.3e1 * t3000 + 0.3e1) * t3766 * t2776 - (t3000 * t3176 + 0.2e1 * t3298 + ((t3896 + t3663) * t3027 + t2733) * t3900) * t3871 + (((pkin(1) * t3321 + t2625) * t2970 + t3164) * t3737 + (0.2e1 * (t2950 + t3645) * t3000 - 0.4e1 * t2950 - 0.2e1 * t2956 + t3255) * t2776) * t3035 - t3846 * t2979 + 0.2e1 * t3167 + t2610) * t3016 - t3889 * t2708 * t2995 + (t2625 * t3036 + (-t2970 - t3052 + t3614) * t3495) * t3615 + 0.2e1 * ((t3000 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t2713 + (t2616 * t3000 - t3175 / 0.2e1 - t2616 + (-pkin(6) * t2999 + t2940 * t3036) * t3495) * t3026) * t3868 + t2922 * t3236 * t3903 - t2574 * t3706 + ((t2920 * t3026 + t3013) * t3027 + t3026 * t3014) * t3495) * t2821 * t3822;
t2499 = t2529 - t3215 - t3337;
t3937 = t2721 ^ 2 * t2998;
t2712 = t2821 * t3937;
t2736 = t2745 ^ 2 * t2998 / t2814 ^ 2 * t3059;
t2628 = t2712 + t2736;
t3468 = t2805 * t3800;
t3301 = t2784 * t3468;
t3148 = t2745 * t3058 * t3301;
t3125 = 0.2e1 * t3148;
t3812 = t2805 * t3058;
t3522 = t2745 * t3812;
t2586 = (((pkin(2) * t3036 + pkin(6) * t3707) * t3015 + pkin(6) * t3727) * t2776 + t2619) * t2745 * t3468;
t3578 = pkin(6) * t3690;
t3609 = t3015 * t2970;
t3934 = t2821 * ((-(t3402 - t3760 + (0.2e1 * t3027 * t3578 + t2928) * pkin(2)) * t3435 + ((t3193 + t3657) * t3913 + (t2921 * t3492 * t3915 + t3836) * t2820 * t3035) * t3016 + t2784 * t3459 * t3770 + (-t3663 * t3744 + t3298) * t3868 + t2619 * t3605 + (-t3760 + t2950 + t2956 + t3641) * t2776) * t2784 + (t2657 * t3764 + (t2901 * t3609 + t3712) * t2776 + t3128) * t3837);
t2520 = t2586 - t3934;
t3546 = t2520 * t3744;
t3798 = t2820 * t3027;
t3853 = t2520 * t3036;
t3877 = pkin(1) * t3036;
t3942 = -(pkin(5) * t2499 * t3027 - pkin(1) * t2505) * t3015 + t3853 * t3916 - pkin(5) * (t2628 * t3737 + t2991 * t3125) - (pkin(1) * t2721 * t3798 - pkin(5) * t3522) * t2776 * t3947 + (-0.2e1 * t2784 * t2821 * t3230 + t2499 * t3877 - t2628 * t2976 - t3546 * t3052) * t3016;
t3392 = -t2928 + 0.2e1 * t3871;
t3931 = t3037 * t3392;
t3391 = -t2932 + 0.2e1 * t3870;
t3930 = t3040 * t3391;
t3390 = -t2936 + 0.2e1 * t3869;
t3929 = t3043 * t3390;
t3867 = pkin(2) * t3037;
t3570 = t3027 * t3867;
t3743 = t3015 * t3028;
t3919 = t3026 * (-(pkin(1) * t3743 - pkin(5) * t3037) * t3027 + t3028 * t3352) + t3570;
t3865 = pkin(2) * t3040;
t3566 = t3030 * t3865;
t3741 = t3015 * t3031;
t3918 = t3029 * (-(pkin(1) * t3741 - pkin(5) * t3040) * t3030 + t3031 * t3351) + t3566;
t3863 = pkin(2) * t3043;
t3567 = t3033 * t3863;
t3739 = t3015 * t3034;
t3917 = t3032 * (-(pkin(1) * t3739 - pkin(5) * t3043) * t3033 + t3034 * t3350) + t3567;
t3909 = -0.2e1 * t2766 + t3308;
t3908 = -0.2e1 * t2767 + t3305;
t3907 = -0.2e1 * t2768 + t3302;
t3904 = 0.2e1 * t2991;
t3892 = t3904 - 0.2e1;
t3890 = 0.4e1 * t2996 - 0.2e1;
t3887 = 0.4e1 * t3002 - 0.2e1;
t3884 = 0.4e1 * t3008 - 0.2e1;
t3882 = pkin(1) * t3015;
t3855 = t2520 * t2820;
t3591 = pkin(5) * t3744;
t3854 = t2520 * (-t3591 + t3620);
t3852 = t2521 * t2823;
t3590 = pkin(5) * t3742;
t3851 = t2521 * (-t3590 + t3619);
t3849 = t2522 * t2826;
t3589 = pkin(5) * t3740;
t3848 = t2522 * (-t3572 + t3589);
t3840 = t2721 * t2784;
t3838 = t2721 * t2821;
t3835 = t2722 * t2785;
t3833 = t2722 * t2824;
t3830 = t2723 * t2786;
t3828 = t2723 * t2827;
t2781 = t2784 ^ 2;
t2775 = t2781 * t2821;
t2822 = t2820 * t2821;
t3825 = t2781 * t2822;
t2782 = t2785 ^ 2;
t2777 = t2782 * t2824;
t2825 = t2823 * t2824;
t3824 = t2782 * t2825;
t2783 = t2786 ^ 2;
t2779 = t2783 * t2827;
t2828 = t2826 * t2827;
t3823 = t2783 * t2828;
t3719 = t3016 * t3037;
t2838 = t2901 * t3719 + t3028 * t3926;
t3708 = t3026 * t3037;
t3597 = pkin(2) * t3708;
t3600 = pkin(2) * t3727;
t2793 = (t2901 * t2967 - t2964 * t3597) * t3015 - t2838 * t2964 - t2967 * t3600;
t3819 = t2793 * t2820;
t2794 = (t2901 * t2964 + t2967 * t3597) * t3015 + t2838 * t2967 - t2964 * t3600;
t3818 = t2794 * t2820;
t3716 = t3016 * t3040;
t2839 = t2902 * t3716 + t3031 * t3927;
t3701 = t3029 * t3040;
t3596 = pkin(2) * t3701;
t3599 = pkin(2) * t3725;
t2795 = (t2902 * t2968 - t2965 * t3596) * t3015 - t2839 * t2965 - t2968 * t3599;
t3817 = t2795 * t2823;
t2796 = (t2902 * t2965 + t2968 * t3596) * t3015 + t2839 * t2968 - t2965 * t3599;
t3816 = t2796 * t2823;
t3713 = t3016 * t3043;
t2840 = t2903 * t3713 + t3034 * t3928;
t3694 = t3032 * t3043;
t3595 = pkin(2) * t3694;
t3598 = pkin(2) * t3723;
t2797 = (t2903 * t2969 - t2966 * t3595) * t3015 - t2840 * t2966 - t2969 * t3598;
t3815 = t2797 * t2826;
t2798 = (t2903 * t2966 + t2969 * t3595) * t3015 + t2840 * t2969 - t2966 * t3598;
t3814 = t2798 * t2826;
t2811 = t3926 * t3037 + (-t3609 - t3777) * t3028;
t3807 = t2811 * t2820;
t2812 = t3927 * t3040 + (-t3608 - t3776) * t3031;
t3806 = t2812 * t2823;
t2813 = t3928 * t3043 + (-t3607 - t3775) * t3034;
t3805 = t2813 * t2826;
t3796 = t2821 * t3027;
t3790 = t2824 * t3030;
t3784 = t2827 * t3033;
t3762 = t2997 * t3026;
t3755 = t3003 * t3029;
t3748 = t3009 * t3032;
t3731 = t3015 * t3058;
t3730 = t3016 * t2499;
t3729 = t3016 * t2500;
t3728 = t3016 * t2501;
t3721 = t3016 * t3035;
t3718 = t3016 * t3038;
t3715 = t3016 * t3041;
t3711 = t3026 * t3027;
t3710 = t3026 * t3035;
t3709 = t3026 * t3036;
t3705 = t3028 * t3036;
t3704 = t3029 * t3030;
t3703 = t3029 * t3038;
t3702 = t3029 * t3039;
t3698 = t3031 * t3039;
t3697 = t3032 * t3033;
t3696 = t3032 * t3041;
t3695 = t3032 * t3042;
t3691 = t3034 * t3042;
t2466 = -t2505 * t3623 + (-t2505 * t3737 + t2520 * t3904 - 0.2e1 * t2586 + 0.2e1 * t3934) * pkin(5);
t2583 = (-pkin(5) * t3295 + t2685) * t3016 + (-pkin(5) * t3321 - t2733 / 0.2e1) * t3015 + pkin(1) * t3493;
t3687 = -t3035 * t2466 - 0.2e1 * t2583 * t3522 - t3026 * t3942;
t3248 = -0.2e1 * t3308;
t3686 = t3942 * t3035 + (t2583 * t3248 - t2466) * t3026;
t2467 = -t2506 * t3622 + (-t2506 * t3735 + t2521 * t3904 - 0.2e1 * t2587 + 0.2e1 * t3933) * pkin(5);
t2584 = (-pkin(5) * t3286 + t2686) * t3016 + (-pkin(5) * t3316 - t2734 / 0.2e1) * t3015 + pkin(1) * t3488;
t3685 = -t3038 * t2467 - 0.2e1 * t2584 * t3519 - t3029 * t3943;
t3247 = -0.2e1 * t3305;
t3684 = t3943 * t3038 + (t2584 * t3247 - t2467) * t3029;
t2468 = -t2507 * t3621 + (-t2507 * t3733 + t2522 * t3904 - 0.2e1 * t2588 + 0.2e1 * t3932) * pkin(5);
t2585 = (-pkin(5) * t3277 + t2687) * t3016 + (-pkin(5) * t3311 - t2735 / 0.2e1) * t3015 + pkin(1) * t3483;
t3683 = -t3041 * t2468 - 0.2e1 * t2585 * t3516 - t3032 * t3944;
t3246 = -0.2e1 * t3302;
t3682 = t3944 * t3041 + (t2585 * t3246 - t2468) * t3032;
t2475 = t2520 * t3367 + t2520 - t3730;
t2568 = t3148 * t3627 + (-t2820 * t3209 + (-t2820 ^ 2 + t2821 * t2991) * t3036 * t2784) * t3837;
t3457 = t2821 * t3737;
t3184 = t3457 * t3937;
t3254 = t3367 + 0.1e1;
t3310 = t2784 * t3522;
t3543 = (t2766 + t3308) * t2721 * t3016;
t2517 = t3016 * t2520;
t2487 = t2517 - t3337 / 0.2e1 - t3215 / 0.2e1 + t2529 / 0.2e1;
t3555 = t2487 * t3744;
t3681 = -0.2e1 * t2475 * t3710 + t3890 * t3555 + 0.4e1 * t3026 * t2568 * t3707 + t3891 * t3184 + (t3890 * t3543 + (-0.4e1 * t2996 * t3254 + 0.2e1 * t3774 + t3903 + 0.2e1) * t3310) * t3800;
t2476 = t2521 * t3366 + t2521 - t3729;
t2569 = t3146 * t3627 + (-t2823 * t3207 + (-t2823 ^ 2 + t2824 * t2991) * t3039 * t2785) * t3832;
t3454 = t2824 * t3735;
t3182 = t3454 * t3936;
t3253 = t3366 + 0.1e1;
t3307 = t2785 * t3519;
t3541 = (t2767 + t3305) * t2722 * t3016;
t2518 = t3016 * t2521;
t2488 = t2518 - t3336 / 0.2e1 - t3214 / 0.2e1 + t2530 / 0.2e1;
t3554 = t2488 * t3742;
t3680 = -0.2e1 * t2476 * t3703 + t3554 * t3887 + 0.4e1 * t3029 * t2569 * t3700 + t3888 * t3182 + (t3887 * t3541 + (-0.4e1 * t3002 * t3253 + 0.2e1 * t3773 + t3902 + 0.2e1) * t3307) * t3794;
t2477 = t2522 * t3365 + t2522 - t3728;
t2570 = t3144 * t3627 + (-t2826 * t3205 + (-t2826 ^ 2 + t2827 * t2991) * t3042 * t2786) * t3827;
t3451 = t2827 * t3733;
t3185 = t3451 * t3935;
t3252 = t3365 + 0.1e1;
t3304 = t2786 * t3516;
t3539 = (t2768 + t3302) * t2723 * t3016;
t2519 = t3016 * t2522;
t2489 = t2519 - t3335 / 0.2e1 - t3213 / 0.2e1 + t2531 / 0.2e1;
t3553 = t2489 * t3740;
t3679 = -0.2e1 * t2477 * t3696 + t3553 * t3884 + 0.4e1 * t3032 * t2570 * t3693 + t3885 * t3185 + (t3884 * t3539 + (-0.4e1 * t3008 * t3252 + 0.2e1 * t3772 + t3901 + 0.2e1) * t3304) * t3788;
t2494 = t2499 + t2517;
t2652 = t2772 + t2713 / 0.2e1;
t3309 = t3027 * t3522;
t3411 = t3015 * t3711;
t3373 = 0.2e1 * t3411;
t3678 = t2487 * t3035 * t3373 + t2475 * t2996 + t2494 * t3016 + t3184 * t3710 - 0.2e1 * t2568 * t3765 + (-t3015 * t2652 * t3309 - (t3254 * t3310 - t3543) * t2820 * t3710) * t3947;
t2496 = t2500 + t2518;
t2653 = t2773 + t2715 / 0.2e1;
t3306 = t3030 * t3519;
t3408 = t3015 * t3704;
t3372 = 0.2e1 * t3408;
t3677 = t2488 * t3038 * t3372 + t2476 * t3002 + t2496 * t3016 + t3182 * t3703 - 0.2e1 * t2569 * t3758 + (-t3015 * t2653 * t3306 - (t3253 * t3307 - t3541) * t2823 * t3703) * t3946;
t2498 = t2501 + t2519;
t2654 = t2774 + t2717 / 0.2e1;
t3303 = t3033 * t3516;
t3405 = t3015 * t3697;
t3371 = 0.2e1 * t3405;
t3676 = t2489 * t3041 * t3371 + t2477 * t3008 + t2498 * t3016 + t3185 * t3696 - 0.2e1 * t2570 * t3751 + (-t2654 * t3015 * t3303 - (t3252 * t3304 - t3539) * t2826 * t3696) * t3945;
t3112 = t3036 * t3125;
t2593 = t3112 + t3015 * (t2712 - t2736);
t2607 = t3015 * t3112 - t2736;
t3422 = t3015 * t3726;
t3549 = t2499 * t3737;
t3630 = 0.4e1 * t2946 * t2997;
t3675 = -t3035 * t3549 + t2505 * (t3411 - t3721) + (t3035 * t3627 - t3892 * t3711) * t3853 + t2593 * t3707 + t2607 * t3727 + (-0.4e1 * (t2946 * t3322 + t3036 * t3309 / 0.2e1) * t3801 + (t3026 * t3630 + 0.2e1 * t3422) * t3838) * t2784;
t3113 = t3039 * t3124;
t2592 = t3113 + t3015 * (t2714 - t2737);
t2608 = t3015 * t3113 - t2737;
t3420 = t3015 * t3724;
t3548 = t2500 * t3735;
t3629 = 0.4e1 * t2947 * t3003;
t3674 = -t3038 * t3548 + t2506 * (t3408 - t3718) + (t3038 * t3627 - t3892 * t3704) * t3850 + t2592 * t3700 + t2608 * t3725 + (-0.4e1 * (t2947 * t3317 + t3039 * t3306 / 0.2e1) * t3795 + (t3029 * t3629 + 0.2e1 * t3420) * t3833) * t2785;
t3111 = t3042 * t3123;
t2594 = t3111 + t3015 * (t2716 - t2738);
t2609 = t3015 * t3111 - t2738;
t3418 = t3015 * t3722;
t3547 = t2501 * t3733;
t3628 = 0.4e1 * t2948 * t3009;
t3673 = -t3041 * t3547 + t2507 * (t3405 - t3715) + (t3041 * t3627 - t3892 * t3697) * t3847 + t2594 * t3693 + t2609 * t3723 + (-0.4e1 * (t2948 * t3312 + t3042 * t3303 / 0.2e1) * t3789 + (t3032 * t3628 + 0.2e1 * t3418) * t3828) * t2786;
t3410 = t3015 * t3707;
t3672 = -t3026 * t3549 - t2505 * (t3410 + t3727) + (t3892 * t3707 - 0.2e1 * t3423) * t3853 + t2593 * t3711 - t2607 * t3721 + (-0.2e1 * ((t2713 - 0.2e1 * t3323) * t3035 + t3027 * t3158) * t3801 + (t3373 * t3763 - 0.4e1 * t2946) * t3838) * t2784;
t3407 = t3015 * t3700;
t3671 = -t3029 * t3548 - t2506 * (t3407 + t3725) + (t3892 * t3700 - 0.2e1 * t3421) * t3850 + t2592 * t3704 - t2608 * t3718 + (-0.2e1 * ((t2715 - 0.2e1 * t3318) * t3038 + t3030 * t3157) * t3795 + (t3372 * t3756 - 0.4e1 * t2947) * t3833) * t2785;
t3404 = t3015 * t3693;
t3670 = -t3032 * t3547 - t2507 * (t3404 + t3723) + (t3892 * t3693 - 0.2e1 * t3419) * t3847 + t2594 * t3697 - t2609 * t3715 + (-0.2e1 * ((t2717 - 0.2e1 * t3313) * t3041 + t3033 * t3156) * t3789 + (t3371 * t3749 - 0.4e1 * t2948) * t3828) * t2786;
t3467 = t2998 * t3812;
t3161 = t2745 * t3467 * t3839;
t3666 = (t2766 + t3248) * t2772 - 0.2e1 * t3161;
t3465 = t3004 * t3810;
t3160 = t2746 * t3465 * t3834;
t3665 = (t2767 + t3247) * t2773 - 0.2e1 * t3160;
t3463 = t3010 * t3808;
t3159 = t2747 * t3463 * t3829;
t3664 = (t2768 + t3246) * t2774 - 0.2e1 * t3159;
t3651 = t2775 - t2712;
t3650 = t2777 - t2714;
t3649 = t2779 - t2716;
t3636 = t2997 * t3909;
t3635 = t3003 * t3908;
t3634 = t3009 * t3907;
t3633 = -0.2e1 * t3838;
t3632 = -0.2e1 * t3833;
t3631 = -0.2e1 * t3828;
t3581 = pkin(6) * t3737;
t3580 = pkin(6) * t3735;
t3579 = pkin(6) * t3733;
t3577 = t3037 * t3861;
t3575 = t3040 * t3860;
t3573 = t3043 * t3859;
t3559 = t3893 * pkin(6);
t2493 = t2499 + 0.2e1 * t2517;
t3552 = t2493 * t3798;
t2495 = t2500 + 0.2e1 * t2518;
t3551 = t2495 * t3792;
t2497 = t2501 + 0.2e1 * t2519;
t3550 = t2497 * t3786;
t2668 = t2766 - t3308;
t3542 = t2668 * t3822;
t2670 = t2767 - t3305;
t3540 = t2670 * t3821;
t2672 = t2768 - t3302;
t3538 = t2672 * t3820;
t3537 = t2721 * t3796;
t3532 = t2722 * t3790;
t3527 = t2723 * t3784;
t2910 = -pkin(5) + t3618;
t2841 = t2910 * t3015 * t3037 + t3028 * t3940;
t2907 = t2970 * t3889 - pkin(5);
t3242 = t3409 * t2970;
t3170 = t3028 * t3242;
t3349 = t3026 * t3577;
t3358 = t2996 * t3570;
t3438 = t2967 * t3709;
t2751 = ((-t2910 * t2967 + t2964 * t3577) * t3035 + (-pkin(6) * t3438 - t2964 * t3931) * t3027) * t2991 + (-(t2964 * t3705 + t2967 * t3626) * t3871 + (-t2841 * t2964 - t2967 * t3581) * t3035 - (t2928 * t2967 + t2964 * t3349) * t3744) * t3016 + t2964 * t3358 + (t2907 * t2967 + t2964 * t3170) * t3035 - t3919 * t2964 + t3940 * t3438;
t3513 = t2751 * t3800;
t2911 = -pkin(5) + t3617;
t2842 = t2911 * t3015 * t3040 + t3031 * t3939;
t2908 = t2972 * t3886 - pkin(5);
t3241 = t3406 * t2972;
t3169 = t3031 * t3241;
t3348 = t3029 * t3575;
t3357 = t3002 * t3566;
t3437 = t2968 * t3702;
t2752 = ((-t2911 * t2968 + t2965 * t3575) * t3038 + (-pkin(6) * t3437 - t2965 * t3930) * t3030) * t2991 + (-(t2965 * t3698 + t2968 * t3625) * t3870 + (-t2842 * t2965 - t2968 * t3580) * t3038 - (t2932 * t2968 + t2965 * t3348) * t3742) * t3016 + t2965 * t3357 + (t2908 * t2968 + t2965 * t3169) * t3038 - t3918 * t2965 + t3939 * t3437;
t3512 = t2752 * t3794;
t2912 = -pkin(5) + t3616;
t2843 = t2912 * t3015 * t3043 + t3034 * t3938;
t2909 = t2974 * t3883 - pkin(5);
t3240 = t3403 * t2974;
t3168 = t3034 * t3240;
t3347 = t3032 * t3573;
t3356 = t3008 * t3567;
t3436 = t2969 * t3695;
t2753 = ((-t2912 * t2969 + t2966 * t3573) * t3041 + (-pkin(6) * t3436 - t2966 * t3929) * t3033) * t2991 + (-(t2966 * t3691 + t2969 * t3624) * t3869 + (-t2843 * t2966 - t2969 * t3579) * t3041 - (t2936 * t2969 + t2966 * t3347) * t3740) * t3016 + t2966 * t3356 + (t2909 * t2969 + t2966 * t3168) * t3041 - t3917 * t2966 + t3938 * t3436;
t3511 = t2753 * t3788;
t3441 = t2964 * t3709;
t2754 = ((-t2910 * t2964 - t2967 * t3577) * t3035 + (-pkin(6) * t3441 + t2967 * t3931) * t3027) * t2991 + ((0.2e1 * t2964 * t3744 + t2967 * t3705) * t3871 + (t2841 * t2967 - t2964 * t3581) * t3035 + (-t2928 * t2964 + t2967 * t3349) * t3744) * t3016 - t2967 * t3358 + (t2907 * t2964 - t2967 * t3170) * t3035 + t3919 * t2967 + t3940 * t3441;
t3510 = t2754 * t3800;
t3440 = t2965 * t3702;
t2755 = ((-t2911 * t2965 - t2968 * t3575) * t3038 + (-pkin(6) * t3440 + t2968 * t3930) * t3030) * t2991 + ((0.2e1 * t2965 * t3742 + t2968 * t3698) * t3870 + (t2842 * t2968 - t2965 * t3580) * t3038 + (-t2932 * t2965 + t2968 * t3348) * t3742) * t3016 - t2968 * t3357 + (t2908 * t2965 - t2968 * t3169) * t3038 + t3918 * t2968 + t3939 * t3440;
t3509 = t2755 * t3794;
t3439 = t2966 * t3695;
t2756 = ((-t2912 * t2966 - t2969 * t3573) * t3041 + (-pkin(6) * t3439 + t2969 * t3929) * t3033) * t2991 + ((0.2e1 * t2966 * t3740 + t2969 * t3691) * t3869 + (t2843 * t2969 - t2966 * t3579) * t3041 + (-t2936 * t2966 + t2969 * t3347) * t3740) * t3016 - t2969 * t3356 + (t2909 * t2966 - t2969 * t3168) * t3041 + t3917 * t2969 + t3938 * t3439;
t3508 = t2756 * t3788;
t3340 = t3893 * t3037 * t2929;
t2829 = t2940 * t3743 + t3027 * t3340;
t2835 = t2930 * t3743 + t3340;
t3416 = t3015 * t3719;
t3268 = t2964 * t3416;
t2859 = t2967 * t2991 - t2967 + t3268;
t2895 = -t3584 + t3940;
t2913 = t2976 - t3559;
t3233 = t3416 * t2971;
t3271 = t2929 * t3422;
t3450 = t2929 * t3745;
t2757 = (t2964 * t3028 * t3221 + t2859 * t3565) * t3000 + (t2859 * t3431 + (t2835 * t2964 - t2967 * t3450) * t3868 + (t2895 * t2967 - t2964 * t3233) * pkin(6)) * t3036 - (-pkin(6) * t3268 + t2913 * t2967) * t3868 + pkin(6) * (t2829 * t2964 - t2967 * t3271);
t3507 = t2757 * t3813;
t3265 = t2967 * t3416;
t2860 = t2964 * t2991 - t2964 - t3265;
t3220 = t3028 * t3364;
t2758 = (-t2967 * t3015 * t3220 + t2860 * t3565) * t3000 + (t2860 * t3431 - (t2835 * t2967 + t2964 * t3450) * t3868 + pkin(6) * (t2895 * t2964 + t2967 * t3233)) * t3036 - (pkin(6) * t3265 + t2913 * t2964) * t3868 - pkin(6) * (t2829 * t2967 + t2964 * t3271);
t3506 = t2758 * t3813;
t3339 = t3893 * t3040 * t2933;
t2830 = t2941 * t3741 + t3030 * t3339;
t2836 = t2934 * t3741 + t3339;
t3414 = t3015 * t3716;
t3267 = t2965 * t3414;
t2861 = t2968 * t2991 - t2968 + t3267;
t2896 = -t3583 + t3939;
t2914 = t2977 - t3559;
t3232 = t3414 * t2973;
t3270 = t2933 * t3420;
t3449 = t2933 * t3745;
t2759 = (t2965 * t3031 * t3217 + t2861 * t3563) * t3006 + (t2861 * t3428 + (t2836 * t2965 - t2968 * t3449) * t3866 + (t2896 * t2968 - t2965 * t3232) * pkin(6)) * t3039 - (-pkin(6) * t3267 + t2914 * t2968) * t3866 + pkin(6) * (t2830 * t2965 - t2968 * t3270);
t3505 = t2759 * t3811;
t3264 = t2968 * t3414;
t2862 = t2965 * t2991 - t2965 - t3264;
t3218 = t3363 * t3031;
t2760 = (-t2968 * t3015 * t3218 + t2862 * t3563) * t3006 + (t2862 * t3428 - (t2836 * t2968 + t2965 * t3449) * t3866 + pkin(6) * (t2896 * t2965 + t2968 * t3232)) * t3039 - (pkin(6) * t3264 + t2914 * t2965) * t3866 - pkin(6) * (t2830 * t2968 + t2965 * t3270);
t3504 = t2760 * t3811;
t3338 = t3893 * t3043 * t2937;
t2831 = t2942 * t3739 + t3033 * t3338;
t2837 = t2938 * t3739 + t3338;
t3412 = t3015 * t3713;
t3266 = t2966 * t3412;
t2863 = t2969 * t2991 - t2969 + t3266;
t2897 = -t3582 + t3938;
t2915 = t2978 - t3559;
t3231 = t3412 * t2975;
t3269 = t2937 * t3418;
t3448 = t2937 * t3745;
t2761 = (t2966 * t3034 * t3216 + t2863 * t3561) * t3012 + (t2863 * t3425 + (t2837 * t2966 - t2969 * t3448) * t3864 + (t2897 * t2969 - t2966 * t3231) * pkin(6)) * t3042 - (-pkin(6) * t3266 + t2915 * t2969) * t3864 + pkin(6) * (t2831 * t2966 - t2969 * t3269);
t3503 = t2761 * t3809;
t3263 = t2969 * t3412;
t2864 = t2966 * t2991 - t2966 - t3263;
t3219 = t3034 * t3362;
t2762 = (-t2969 * t3015 * t3219 + t2864 * t3561) * t3012 + (t2864 * t3425 - (t2837 * t2969 + t2966 * t3448) * t3864 + pkin(6) * (t2897 * t2966 + t2969 * t3231)) * t3042 - (pkin(6) * t3263 + t2915 * t2966) * t3864 - pkin(6) * (t2831 * t2969 + t2966 * t3269);
t3502 = t2762 * t3809;
t3501 = (pkin(5) * t3417 + t2976) * t3825;
t3500 = t3016 * t3825;
t3499 = (pkin(5) * t3415 + t2977) * t3824;
t3498 = t3016 * t3824;
t3497 = (pkin(5) * t3413 + t2978) * t3823;
t3496 = t3016 * t3823;
t3494 = t2784 * t3798;
t3489 = t2785 * t3792;
t3484 = t2786 * t3786;
t2787 = t3028 * (-t3027 * t3392 + t3578) * t2991 + ((-t2910 * t3743 + t3037 * t3940) * t3035 + (-pkin(6) * t3028 * t3411 + t2996 * t3867) * t3036) * t3016 + t3028 * t3615 - t3035 * t3037 * t3242 + (-t2928 * t3028 - t3708 * t3882) * t3027 + t3352 * t3708;
t3480 = t2787 * t3800;
t2788 = t3031 * (-t3030 * t3391 + t3576) * t2991 + ((-t2911 * t3741 + t3040 * t3939) * t3038 + (-pkin(6) * t3031 * t3408 + t3002 * t3865) * t3039) * t3016 + t3031 * t3613 - t3038 * t3040 * t3241 + (-t2932 * t3031 - t3701 * t3882) * t3030 + t3351 * t3701;
t3479 = t2788 * t3794;
t2789 = t3034 * (-t3033 * t3390 + t3574) * t2991 + ((-t2912 * t3739 + t3043 * t3938) * t3041 + (-pkin(6) * t3034 * t3405 + t3008 * t3863) * t3042) * t3016 + t3034 * t3611 - t3041 * t3043 * t3240 + (-t2936 * t3034 - t3694 * t3882) * t3033 + t3350 * t3694;
t3478 = t2789 * t3788;
t2790 = (t3016 * t3028 * t3564 + t3037 * t3364) * t3000 + ((t2929 * t3743 + t2930 * t3037) * t3868 - t3220 * t3726) * t3036 + (t2940 * t3037 + (-pkin(2) * t3721 + t2929 * t3744) * t3028) * pkin(6);
t3477 = t2790 * t3813;
t2791 = (t3016 * t3031 * t3562 + t3040 * t3363) * t3006 + ((t2933 * t3741 + t2934 * t3040) * t3866 - t3218 * t3724) * t3039 + (t2941 * t3040 + (-pkin(2) * t3718 + t2933 * t3742) * t3031) * pkin(6);
t3476 = t2791 * t3811;
t2792 = (t3016 * t3034 * t3560 + t3043 * t3362) * t3012 + ((t2937 * t3739 + t2938 * t3043) * t3864 - t3219 * t3722) * t3042 + (t2942 * t3043 + (-pkin(2) * t3715 + t2937 * t3740) * t3034) * pkin(6);
t3475 = t2792 * t3809;
t3474 = t2793 * t3797;
t3473 = t2794 * t3797;
t3472 = t2795 * t3791;
t3471 = t2796 * t3791;
t3470 = t2797 * t3785;
t3469 = t2798 * t3785;
t3462 = t2811 * t3797;
t3461 = t2812 * t3791;
t3460 = t2813 * t3785;
t3430 = t3000 * t2775;
t3427 = t3006 * t2777;
t3424 = t3012 * t2779;
t2643 = t3893 * t3493 + 0.2e1 * t3209;
t3294 = t3035 * t3494;
t3388 = t2997 * (0.2e1 * t2494 * t3710 + t3891 * t3546 + ((-0.2e1 * t2781 * t3457 + 0.4e1 * t3148) * t3016 + 0.4e1 * t3161) * t2996 + t2643 * t3294 * t3899 + t3666);
t2644 = t3893 * t3488 + 0.2e1 * t3207;
t3285 = t3038 * t3489;
t3387 = t3003 * (0.2e1 * t2496 * t3703 + t3545 * t3888 + ((-0.2e1 * t2782 * t3454 + 0.4e1 * t3146) * t3016 + 0.4e1 * t3160) * t3002 + t2644 * t3285 * t3898 + t3665);
t2645 = t3893 * t3483 + 0.2e1 * t3205;
t3276 = t3041 * t3484;
t3386 = t3009 * (0.2e1 * t2498 * t3696 + t3544 * t3885 + ((-0.2e1 * t2783 * t3451 + 0.4e1 * t3144) * t3016 + 0.4e1 * t3159) * t3008 + t2645 * t3276 * t3897 + t3664);
t3385 = t2793 * t3633;
t3384 = t2794 * t3633;
t3383 = t2811 * t3633;
t3382 = t2795 * t3632;
t3381 = t2796 * t3632;
t3380 = t2812 * t3632;
t3379 = t2797 * t3631;
t3378 = t2798 * t3631;
t3377 = t2813 * t3631;
t3376 = 0.2e1 * t3430;
t3375 = 0.2e1 * t3427;
t3374 = 0.2e1 * t3424;
t2502 = t2520 * t3737 + t2505;
t2769 = -0.2e1 * t3430;
t2748 = -t2775 + t3376;
t3077 = t2748 * t2991 + t2607 + t2775;
t3203 = t3422 * t2775;
t3370 = ((t2769 + t3077) * t3026 - t3035 * t3203) * t2997 - t2502;
t2503 = t2521 * t3735 + t2506;
t2770 = -0.2e1 * t3427;
t2749 = -t2777 + t3375;
t3076 = t2749 * t2991 + t2608 + t2777;
t3200 = t3420 * t2777;
t3369 = ((t2770 + t3076) * t3029 - t3038 * t3200) * t3003 - t2503;
t2504 = t2522 * t3733 + t2507;
t2771 = -0.2e1 * t3424;
t2750 = -t2779 + t3374;
t3075 = t2750 * t2991 + t2609 + t2779;
t3197 = t3418 * t2779;
t3368 = ((t2771 + t3075) * t3032 - t3041 * t3197) * t3009 - t2504;
t3334 = t3762 * t3854;
t3333 = t3755 * t3851;
t3332 = t3748 * t3848;
t2655 = 0.2e1 * t2772 + t2713;
t3331 = t2655 * t3537;
t3330 = t2655 * t3036 * t3838;
t2658 = 0.2e1 * t2773 + t2715;
t3329 = t2658 * t3532;
t3328 = t2658 * t3039 * t3833;
t2661 = 0.2e1 * t2774 + t2717;
t3327 = t2661 * t3527;
t3326 = t2661 * t3042 * t3828;
t3325 = t2784 * t3535;
t3320 = t2785 * t3530;
t3315 = t2786 * t3525;
t3300 = t2784 * t3467;
t3291 = t2785 * t3465;
t3282 = t2786 * t3463;
t3274 = t2822 * t2997 * t3706;
t3273 = t2825 * t3003 * t3699;
t3272 = t2828 * t3009 * t3692;
t2481 = t2494 * t3026 + t2520 * t3410;
t3227 = t2997 * (t2481 * t3026 - t3666 * t3710 + (t2643 * t2996 - t3209) * t3494);
t3226 = t2997 * ((-t3077 + t3376) * t3035 + (-t2502 - t3203) * t3026);
t2482 = t2496 * t3029 + t2521 * t3407;
t3225 = t3003 * (t2482 * t3029 - t3665 * t3703 + (t2644 * t3002 - t3207) * t3489);
t3224 = t3003 * ((-t3076 + t3375) * t3038 + (-t2503 - t3200) * t3029);
t2483 = t2498 * t3032 + t2522 * t3404;
t3223 = t3009 * (t2483 * t3032 - t3664 * t3696 + (t2645 * t3008 - t3205) * t3484);
t3222 = t3009 * ((-t3075 + t3374) * t3041 + (-t2504 - t3197) * t3032);
t3202 = t3501 * t3762;
t3201 = t2781 * t3274;
t3199 = t3499 * t3755;
t3198 = t2782 * t3273;
t3196 = t3497 * t3748;
t3195 = t2783 * t3272;
t3194 = t3036 * t3301;
t3192 = t3039 * t3292;
t3190 = t3042 * t3283;
t3188 = t2657 * t3295;
t3187 = t2660 * t3286;
t3186 = t2663 * t3277;
t3155 = t2757 * t3194;
t3154 = t2758 * t3194;
t3153 = t2759 * t3192;
t3152 = t2760 * t3192;
t3151 = t2761 * t3190;
t3150 = t2762 * t3190;
t3149 = t2790 * t3194;
t3147 = t2791 * t3192;
t3145 = t2792 * t3190;
t2880 = -pkin(5) * t3422 + t3877;
t3143 = -t2520 * (pkin(1) * t3738 + t2889 * t3026) + t2775 * (pkin(5) * t3445 + t2880 * t3026);
t2927 = t3893 * pkin(5);
t3142 = t2520 * ((-pkin(5) * t3690 + t3880) * t3015 - t3346) + t2775 * (t2880 * t3035 - t2927 * t3026);
t2881 = -pkin(5) * t3420 + t3876;
t3141 = -t2521 * (pkin(1) * t3736 + t2890 * t3029) + t2777 * (pkin(5) * t3444 + t2881 * t3029);
t3140 = t2521 * ((-pkin(5) * t3689 + t3879) * t3015 - t3345) + t2777 * (t2881 * t3038 - t2927 * t3029);
t2882 = -pkin(5) * t3418 + t3875;
t3139 = -t2522 * (pkin(1) * t3734 + t2891 * t3032) + t2779 * (pkin(5) * t3443 + t2882 * t3032);
t3138 = t2522 * ((-pkin(5) * t3688 + t3878) * t3015 - t3344) + t2779 * (t2882 * t3041 - t2927 * t3032);
t3122 = t2880 * t3825 - t2889 * t3855;
t3121 = t2820 * t3854 + t3501;
t3120 = t2881 * t3824 - t2890 * t3852;
t3119 = t2823 * t3851 + t3499;
t3118 = t2882 * t3823 - t2891 * t3849;
t3117 = -t2826 * t3848 + t3497;
t3107 = t2520 * t3798 - t3036 * t3500;
t3106 = t2520 * t3797 + t3027 * t3500;
t3105 = t2521 * t3792 - t3039 * t3498;
t3104 = t2521 * t3791 + t3030 * t3498;
t3103 = t2522 * t3786 - t3042 * t3496;
t3102 = t2522 * t3785 + t3033 * t3496;
t3095 = t3143 * t3813;
t3094 = t3142 * t3813;
t3093 = t3141 * t3811;
t3092 = t3140 * t3811;
t3091 = t3139 * t3809;
t3090 = t3138 * t3809;
t3086 = t2822 * t3630 * t3840 + 0.2e1 * t2520 * t3458;
t3085 = t3027 ^ 2 * t3855 + 0.2e1 * t3274 * t3840;
t3084 = t2825 * t3629 * t3835 + 0.2e1 * t2521 * t3455;
t3083 = t3030 ^ 2 * t3852 + 0.2e1 * t3273 * t3835;
t3082 = t2828 * t3628 * t3830 + 0.2e1 * t2522 * t3452;
t3081 = t3033 ^ 2 * t3849 + 0.2e1 * t3272 * t3830;
t2989 = t3015 ^ 2;
t2662 = t2774 + 0.2e1 * t2717;
t2659 = t2773 + 0.2e1 * t2715;
t2656 = t2772 + 0.2e1 * t2713;
t2651 = t2678 + t2780;
t2650 = t2677 + t2778;
t2649 = t2676 + t2776;
t2639 = t2662 * t3032 + t3015 * t3276;
t2638 = t2659 * t3029 + t3015 * t3285;
t2637 = t2656 * t3026 + t3015 * t3294;
t2636 = t2662 * t3041 - t3032 * t3277;
t2635 = t2659 * t3038 - t3029 * t3286;
t2634 = t2656 * t3035 - t3026 * t3295;
t2603 = t2651 * t2978 + t2654 * t3586;
t2602 = t2650 * t2977 + t2653 * t3587;
t2601 = t2649 * t2976 + t2652 * t3588;
t2600 = t2651 * t3875 - t2654 * t3589;
t2599 = t2650 * t3876 - t2653 * t3590;
t2598 = t2649 * t3877 - t2652 * t3591;
t2564 = ((t2783 * t3365 - 0.2e1 * t3315) * t2827 + t3649) * t3696 - t3885 * t3186;
t2563 = ((t2782 * t3366 - 0.2e1 * t3320) * t2824 + t3650) * t3703 - t3888 * t3187;
t2562 = ((t2781 * t3367 - 0.2e1 * t3325) * t2821 + t3651) * t3710 - t3891 * t3188;
t2561 = (-0.2e1 * t2716 + t2771 + 0.2e1 * t2779) * t3008 + 0.4e1 * t3186 * t3696 + (-t3884 * t3315 + (t3772 * t3885 + t3012) * t2783) * t2827 - t3649;
t2560 = (-0.2e1 * t2714 + t2770 + 0.2e1 * t2777) * t3002 + 0.4e1 * t3187 * t3703 + (-t3887 * t3320 + (t3773 * t3888 + t3006) * t2782) * t2824 - t3650;
t2559 = (-0.2e1 * t2712 + t2769 + 0.2e1 * t2775) * t2996 + 0.4e1 * t3188 * t3710 + (-t3890 * t3325 + (t3891 * t3774 + t3000) * t2781) * t2821 - t3651;
t2492 = t3728 / 0.2e1 + t2522;
t2491 = t3729 / 0.2e1 + t2521;
t2490 = t3730 / 0.2e1 + t2520;
t2480 = t2498 * t3041 - t2522 * t3405;
t2479 = t2496 * t3038 - t2521 * t3408;
t2478 = t2494 * t3035 - t2520 * t3411;
t2459 = -0.2e1 * t2489 * t3586 - 0.2e1 * t2492 * t2978;
t2458 = -0.2e1 * pkin(5) * t3553 + 0.2e1 * t2492 * t3875;
t2457 = -0.2e1 * t2488 * t3587 - 0.2e1 * t2491 * t2977;
t2456 = -0.2e1 * t2487 * t3588 - 0.2e1 * t2490 * t2976;
t2455 = -0.2e1 * pkin(5) * t3554 + 0.2e1 * t2491 * t3876;
t2454 = -0.2e1 * pkin(5) * t3555 + 0.2e1 * t2490 * t3877;
t1 = [t2520 * t3818 + t2521 * t3816 + t2522 * t3814, 0, 0, (-t2754 * t3201 - t2755 * t3198 - t2756 * t3195 + t2794 * t3085 + t2796 * t3083 + t2798 * t3081) * t2989, (-t2748 * t3510 - t2749 * t3509 - t2750 * t3508 + t2794 * t3086 + t2796 * t3084 + t2798 * t3082) * t2989, (t2794 * t3552 + t2796 * t3551 + t2798 * t3550 + (t2756 * t3103 + t2798 * t3326) * t3009 + (t2755 * t3105 + t2796 * t3328) * t3003 + (t2754 * t3107 + t2794 * t3330) * t2997) * t3015, (t2493 * t3473 + t2495 * t3471 + t2497 * t3469 + (t2756 * t3102 - t2798 * t3327) * t3009 + (t2755 * t3104 - t2796 * t3329) * t3003 + (t2754 * t3106 - t2794 * t3331) * t2997) * t3015, t2494 * t3510 + t2496 * t3509 + t2498 * t3508 + (t2494 * t3818 + t2496 * t3816 + t2498 * t3814) * t3016, t2454 * t3818 + t2455 * t3816 + t2458 * t3814 + (t2603 * t3378 + t2756 * t3117) * t3009 + (t2602 * t3381 + t2755 * t3119) * t3003 + (t2601 * t3384 + t2754 * t3121) * t2997, t2456 * t3818 + t2457 * t3816 + t2459 * t3814 + (t2600 * t3378 + t2756 * t3118) * t3009 + (t2599 * t3381 + t2755 * t3120) * t3003 + (t2598 * t3384 + t2754 * t3122) * t2997, (t2562 * t3506 + t2563 * t3504 + t2564 * t3502) * t3058 + (t2756 * t3223 + t2798 * t3676) * t2826 + (t2755 * t3225 + t2796 * t3677) * t2823 + (t2754 * t3227 + t2794 * t3678) * t2820, (t2559 * t3506 + t2560 * t3504 + t2561 * t3502) * t3058 + (t2756 * t3386 + t2798 * t3679) * t2826 + (t2755 * t3387 + t2796 * t3680) * t2823 + (t2754 * t3388 + t2794 * t3681) * t2820, (t2756 * t3222 + t2798 * t3670) * t2826 + (t2755 * t3224 + t2796 * t3671) * t2823 + (t2754 * t3226 + t2794 * t3672) * t2820 + (t2481 * t3506 + t2482 * t3504 + t2483 * t3502 + (t2634 * t3154 + t2635 * t3152 + t2636 * t3150) * t3015) * t3058, (t2756 * t3368 + t2798 * t3673) * t2826 + (t2755 * t3369 + t2796 * t3674) * t2823 + (t2754 * t3370 + t2794 * t3675) * t2820 + (t2478 * t3506 + t2479 * t3504 + t2480 * t3502 + (-t2637 * t3154 - t2638 * t3152 - t2639 * t3150) * t3015) * t3058, (-t2502 * t3506 - t2503 * t3504 - t2504 * t3502) * t3058 + (t2502 * t3473 + t2503 * t3471 + t2504 * t3469 + (t2756 * t3538 + (t2762 * t3282 + t2798 * t3634) * t2723) * t3784 + (t2755 * t3540 + (t2760 * t3291 + t2796 * t3635) * t2722) * t3790 + (t2754 * t3542 + (t2758 * t3300 + t2794 * t3636) * t2721) * t3796) * t3015, t2754 * t3501 + t2755 * t3499 + t2756 * t3497 + (-t2756 * t3848 + t2798 * t3682) * t2826 + (t2755 * t3851 + t2796 * t3684) * t2823 + (t2754 * t3854 + t2794 * t3686) * t2820 + (t2758 * t3095 + t2760 * t3093 + t2762 * t3091) * t3058, -t2754 * t3202 - t2755 * t3199 - t2756 * t3196 + (t2756 * t3332 + t2798 * t3683) * t2826 + (-t2755 * t3333 + t2796 * t3685) * t2823 + (-t2754 * t3334 + t2794 * t3687) * t2820 + (t2758 * t3094 + t2760 * t3092 + t2762 * t3090) * t3058, 0; t2520 * t3819 + t2521 * t3817 + t2522 * t3815, 0, 0, (-t2751 * t3201 - t2752 * t3198 - t2753 * t3195 + t2793 * t3085 + t2795 * t3083 + t2797 * t3081) * t2989, (-t2748 * t3513 - t2749 * t3512 - t2750 * t3511 + t2793 * t3086 + t2795 * t3084 + t2797 * t3082) * t2989, (t2793 * t3552 + t2795 * t3551 + t2797 * t3550 + (t2753 * t3103 + t2797 * t3326) * t3009 + (t2752 * t3105 + t2795 * t3328) * t3003 + (t2751 * t3107 + t2793 * t3330) * t2997) * t3015, (t2493 * t3474 + t2495 * t3472 + t2497 * t3470 + (t2753 * t3102 - t2797 * t3327) * t3009 + (t2752 * t3104 - t2795 * t3329) * t3003 + (t2751 * t3106 - t2793 * t3331) * t2997) * t3015, t2494 * t3513 + t2496 * t3512 + t2498 * t3511 + (t2494 * t3819 + t2496 * t3817 + t2498 * t3815) * t3016, t2454 * t3819 + t2455 * t3817 + t2458 * t3815 + (t2603 * t3379 + t2753 * t3117) * t3009 + (t2602 * t3382 + t2752 * t3119) * t3003 + (t2601 * t3385 + t2751 * t3121) * t2997, t2456 * t3819 + t2457 * t3817 + t2459 * t3815 + (t2600 * t3379 + t2753 * t3118) * t3009 + (t2599 * t3382 + t2752 * t3120) * t3003 + (t2598 * t3385 + t2751 * t3122) * t2997, (t2562 * t3507 + t2563 * t3505 + t2564 * t3503) * t3058 + (t2753 * t3223 + t2797 * t3676) * t2826 + (t2752 * t3225 + t2795 * t3677) * t2823 + (t2751 * t3227 + t2793 * t3678) * t2820, (t2559 * t3507 + t2560 * t3505 + t2561 * t3503) * t3058 + (t2753 * t3386 + t2797 * t3679) * t2826 + (t2752 * t3387 + t2795 * t3680) * t2823 + (t2751 * t3388 + t2793 * t3681) * t2820, (t2753 * t3222 + t2797 * t3670) * t2826 + (t2752 * t3224 + t2795 * t3671) * t2823 + (t2751 * t3226 + t2793 * t3672) * t2820 + (t2481 * t3507 + t2482 * t3505 + t2483 * t3503 + (t2634 * t3155 + t2635 * t3153 + t2636 * t3151) * t3015) * t3058, (t2753 * t3368 + t2797 * t3673) * t2826 + (t2752 * t3369 + t2795 * t3674) * t2823 + (t2751 * t3370 + t2793 * t3675) * t2820 + (t2478 * t3507 + t2479 * t3505 + t2480 * t3503 + (-t2637 * t3155 - t2638 * t3153 - t2639 * t3151) * t3015) * t3058, (-t2502 * t3507 - t2503 * t3505 - t2504 * t3503) * t3058 + (t2502 * t3474 + t2503 * t3472 + t2504 * t3470 + (t2753 * t3538 + (t2761 * t3282 + t2797 * t3634) * t2723) * t3784 + (t2752 * t3540 + (t2759 * t3291 + t2795 * t3635) * t2722) * t3790 + (t2751 * t3542 + (t2757 * t3300 + t2793 * t3636) * t2721) * t3796) * t3015, t2751 * t3501 + t2752 * t3499 + t2753 * t3497 + (-t2753 * t3848 + t2797 * t3682) * t2826 + (t2752 * t3851 + t2795 * t3684) * t2823 + (t2751 * t3854 + t2793 * t3686) * t2820 + (t2757 * t3095 + t2759 * t3093 + t2761 * t3091) * t3058, -t2751 * t3202 - t2752 * t3199 - t2753 * t3196 + (t2753 * t3332 + t2797 * t3683) * t2826 + (-t2752 * t3333 + t2795 * t3685) * t2823 + (-t2751 * t3334 + t2793 * t3687) * t2820 + (t2757 * t3094 + t2759 * t3092 + t2761 * t3090) * t3058, 0; t2520 * t3807 + t2521 * t3806 + t2522 * t3805, 0, 0, (-t2787 * t3201 - t2788 * t3198 - t2789 * t3195 + t2811 * t3085 + t2812 * t3083 + t2813 * t3081) * t2989, (-t2748 * t3480 - t2749 * t3479 - t2750 * t3478 + t2811 * t3086 + t2812 * t3084 + t2813 * t3082) * t2989, (t2811 * t3552 + t2812 * t3551 + t2813 * t3550 + (t2789 * t3103 + t2813 * t3326) * t3009 + (t2788 * t3105 + t2812 * t3328) * t3003 + (t2787 * t3107 + t2811 * t3330) * t2997) * t3015, (t2493 * t3462 + t2495 * t3461 + t2497 * t3460 + (t2789 * t3102 - t2813 * t3327) * t3009 + (t2788 * t3104 - t2812 * t3329) * t3003 + (t2787 * t3106 - t2811 * t3331) * t2997) * t3015, t2494 * t3480 + t2496 * t3479 + t2498 * t3478 + (t2494 * t3807 + t2496 * t3806 + t2498 * t3805) * t3016, t2454 * t3807 + t2455 * t3806 + t2458 * t3805 + (t2603 * t3377 + t2789 * t3117) * t3009 + (t2602 * t3380 + t2788 * t3119) * t3003 + (t2601 * t3383 + t2787 * t3121) * t2997, t2456 * t3807 + t2457 * t3806 + t2459 * t3805 + (t2600 * t3377 + t2789 * t3118) * t3009 + (t2599 * t3380 + t2788 * t3120) * t3003 + (t2598 * t3383 + t2787 * t3122) * t2997, (-t2562 * t3477 - t2563 * t3476 - t2564 * t3475) * t3731 + (t2789 * t3223 + t2813 * t3676) * t2826 + (t2788 * t3225 + t2812 * t3677) * t2823 + (t2787 * t3227 + t2811 * t3678) * t2820, (-t2559 * t3477 - t2560 * t3476 - t2561 * t3475) * t3731 + (t2789 * t3386 + t2813 * t3679) * t2826 + (t2788 * t3387 + t2812 * t3680) * t2823 + (t2787 * t3388 + t2811 * t3681) * t2820, (t2789 * t3222 + t2813 * t3670) * t2826 + (t2788 * t3224 + t2812 * t3671) * t2823 + (t2787 * t3226 + t2811 * t3672) * t2820 + ((-t2481 * t3477 - t2482 * t3476 - t2483 * t3475) * t3015 + (-t2634 * t3149 - t2635 * t3147 - t2636 * t3145) * t2989) * t3058, (t2789 * t3368 + t2813 * t3673) * t2826 + (t2788 * t3369 + t2812 * t3674) * t2823 + (t2787 * t3370 + t2811 * t3675) * t2820 + ((-t2478 * t3477 - t2479 * t3476 - t2480 * t3475) * t3015 + (t2637 * t3149 + t2638 * t3147 + t2639 * t3145) * t2989) * t3058, (-t2784 * t2790 * t2805 * t2998 * t3537 - t2785 * t2791 * t2807 * t3004 * t3532 - t2786 * t2792 * t2809 * t3010 * t3527) * t3058 * t2989 + (t2502 * t3462 + t2503 * t3461 + t2504 * t3460 + (t2792 * t2504 * t3808 + (t2672 * t2786 * t2789 + t2723 * t2813 * t3907) * t3784) * t3009 + (t2791 * t2503 * t3810 + (t2670 * t2785 * t2788 + t2722 * t2812 * t3908) * t3790) * t3003 + (t2790 * t2502 * t3812 + (t2668 * t2784 * t2787 + t2721 * t2811 * t3909) * t3796) * t2997) * t3015, t2787 * t3501 + t2788 * t3499 + t2789 * t3497 + (-t2789 * t3848 + t2813 * t3682) * t2826 + (t2788 * t3851 + t2812 * t3684) * t2823 + (t2787 * t3854 + t2811 * t3686) * t2820 + (-t3139 * t3475 - t3141 * t3476 - t3143 * t3477) * t3731, -t2787 * t3202 - t2788 * t3199 - t2789 * t3196 + (t2789 * t3332 + t2813 * t3683) * t2826 + (-t2788 * t3333 + t2812 * t3685) * t2823 + (-t2787 * t3334 + t2811 * t3687) * t2820 + (-t3138 * t3475 - t3140 * t3476 - t3142 * t3477) * t3731, 0;];
tau_reg  = t1;
