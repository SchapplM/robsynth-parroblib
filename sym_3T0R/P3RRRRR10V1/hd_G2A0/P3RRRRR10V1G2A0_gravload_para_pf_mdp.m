% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V1G2A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:48:53
% EndTime: 2020-08-06 22:49:04
% DurationCPUTime: 11.23s
% Computational Cost: add. (2904->493), mult. (8076->923), div. (171->10), fcn. (7224->26), ass. (0->339)
t8525 = cos(pkin(3));
t8514 = t8525 ^ 2;
t8747 = t8514 - 0.1e1;
t8530 = sin(qJ(2,3));
t8496 = t8530 * pkin(6);
t8760 = t8496 + pkin(1);
t8533 = sin(qJ(2,2));
t8497 = t8533 * pkin(6);
t8759 = t8497 + pkin(1);
t8536 = sin(qJ(2,1));
t8498 = t8536 * pkin(6);
t8758 = t8498 + pkin(1);
t8540 = cos(qJ(1,3));
t8529 = sin(qJ(3,3));
t8468 = t8529 * pkin(5) + pkin(2);
t8538 = cos(qJ(3,3));
t8515 = t8538 ^ 2;
t8746 = pkin(2) * t8515;
t8606 = -t8468 + 0.2e1 * t8746;
t8757 = t8540 * t8606;
t8543 = cos(qJ(1,2));
t8532 = sin(qJ(3,2));
t8472 = t8532 * pkin(5) + pkin(2);
t8541 = cos(qJ(3,2));
t8518 = t8541 ^ 2;
t8745 = pkin(2) * t8518;
t8605 = -t8472 + 0.2e1 * t8745;
t8756 = t8543 * t8605;
t8546 = cos(qJ(1,1));
t8535 = sin(qJ(3,1));
t8476 = t8535 * pkin(5) + pkin(2);
t8544 = cos(qJ(3,1));
t8521 = t8544 ^ 2;
t8744 = pkin(2) * t8521;
t8604 = -t8476 + 0.2e1 * t8744;
t8755 = t8546 * t8604;
t8545 = cos(qJ(2,1));
t8670 = t8544 * t8545;
t8754 = -pkin(2) * t8670 - t8498;
t8542 = cos(qJ(2,2));
t8675 = t8541 * t8542;
t8753 = -pkin(2) * t8675 - t8497;
t8539 = cos(qJ(2,3));
t8681 = t8538 * t8539;
t8752 = -pkin(2) * t8681 - t8496;
t8531 = sin(qJ(1,3));
t8524 = sin(pkin(3));
t8740 = pkin(6) * t8524;
t8597 = (t8539 + 0.1e1) * (t8539 - 0.1e1) * t8740;
t8679 = t8540 * t8530;
t8651 = pkin(2) * t8679;
t8720 = t8524 * t8531;
t8751 = (-(pkin(1) * t8720 - pkin(5) * t8540) * t8530 + t8531 * t8597) * t8529 + t8651;
t8534 = sin(qJ(1,2));
t8596 = (t8542 + 0.1e1) * (t8542 - 0.1e1) * t8740;
t8673 = t8543 * t8533;
t8647 = pkin(2) * t8673;
t8718 = t8524 * t8534;
t8750 = (-(pkin(1) * t8718 - pkin(5) * t8543) * t8533 + t8534 * t8596) * t8532 + t8647;
t8537 = sin(qJ(1,1));
t8595 = (t8545 + 0.1e1) * (t8545 - 0.1e1) * t8740;
t8668 = t8546 * t8536;
t8650 = pkin(2) * t8668;
t8716 = t8524 * t8537;
t8749 = (-(pkin(1) * t8716 - pkin(5) * t8546) * t8536 + t8537 * t8595) * t8535 + t8650;
t8748 = pkin(1) * pkin(2);
t8743 = pkin(2) * t8538;
t8742 = pkin(2) * t8541;
t8741 = pkin(2) * t8544;
t8739 = pkin(6) * t8525;
t8738 = g(1) * t8524;
t8737 = t8524 * g(2);
t8736 = t8525 * g(3);
t8735 = t8529 * pkin(2);
t8734 = t8532 * pkin(2);
t8733 = t8535 * pkin(2);
t8732 = -0.2e1 * pkin(2) * pkin(6);
t8483 = pkin(1) * t8739;
t8484 = pkin(1) * t8735;
t8516 = 0.1e1 / t8538;
t8682 = t8538 * t8525;
t8614 = t8530 * t8682;
t8666 = pkin(2) * pkin(5) * t8524;
t8731 = 0.1e1 / ((-t8538 * t8666 + t8483) * t8539 - t8614 * t8748 + t8524 * (-pkin(5) * t8496 + t8484)) * t8516;
t8485 = pkin(1) * t8734;
t8519 = 0.1e1 / t8541;
t8676 = t8541 * t8525;
t8611 = t8533 * t8676;
t8730 = 0.1e1 / ((-t8541 * t8666 + t8483) * t8542 - t8611 * t8748 + t8524 * (-pkin(5) * t8497 + t8485)) * t8519;
t8486 = pkin(1) * t8733;
t8522 = 0.1e1 / t8544;
t8686 = t8536 * t8544;
t8609 = t8525 * t8686;
t8729 = 0.1e1 / ((-t8544 * t8666 + t8483) * t8545 - t8609 * t8748 + t8524 * (-pkin(5) * t8498 + t8486)) * t8522;
t8453 = t8539 * pkin(6) - t8530 * t8743;
t8728 = t8453 * t8525;
t8454 = t8542 * pkin(6) - t8533 * t8742;
t8727 = t8454 * t8525;
t8455 = -pkin(2) * t8686 + t8545 * pkin(6);
t8726 = t8455 * t8525;
t8548 = pkin(2) ^ 2;
t8725 = t8515 * t8548;
t8724 = t8518 * t8548;
t8723 = t8521 * t8548;
t8722 = t8524 * t8525;
t8721 = t8524 * t8530;
t8719 = t8524 * t8533;
t8717 = t8524 * t8536;
t8715 = t8524 * t8539;
t8714 = t8524 * t8542;
t8713 = t8524 * t8545;
t8712 = t8525 * t8529;
t8711 = t8525 * t8530;
t8710 = t8525 * t8532;
t8709 = t8525 * t8533;
t8708 = t8525 * t8535;
t8707 = t8525 * t8536;
t8706 = t8525 * t8540;
t8705 = t8525 * t8543;
t8704 = t8525 * t8544;
t8703 = t8525 * t8546;
t8702 = t8529 * t8524;
t8701 = t8529 * t8530;
t8700 = t8529 * t8539;
t8699 = t8529 * t8540;
t8698 = t8531 * t8530;
t8697 = t8531 * t8539;
t8696 = t8532 * t8524;
t8695 = t8532 * t8533;
t8694 = t8532 * t8542;
t8693 = t8532 * t8543;
t8692 = t8534 * t8533;
t8691 = t8534 * t8542;
t8690 = t8535 * t8524;
t8689 = t8535 * t8536;
t8688 = t8535 * t8545;
t8687 = t8535 * t8546;
t8685 = t8537 * t8536;
t8684 = t8537 * t8545;
t8683 = t8538 * t8524;
t8680 = t8538 * t8540;
t8678 = t8540 * t8539;
t8677 = t8541 * t8524;
t8674 = t8541 * t8543;
t8672 = t8543 * t8542;
t8671 = t8544 * t8524;
t8669 = t8544 * t8546;
t8667 = t8546 * t8545;
t8665 = pkin(2) * t8712;
t8664 = pkin(2) * t8710;
t8663 = pkin(2) * t8708;
t8662 = pkin(2) * t8699;
t8661 = pkin(2) * t8693;
t8660 = pkin(2) * t8687;
t8659 = pkin(6) * t8715;
t8658 = pkin(6) * t8714;
t8657 = pkin(6) * t8713;
t8656 = pkin(6) * t8700;
t8655 = pkin(6) * t8688;
t8654 = pkin(6) * t8678;
t8653 = pkin(6) * t8672;
t8652 = pkin(6) * t8667;
t8645 = 0.2e1 * pkin(2) * t8739;
t8644 = t8538 * t8732;
t8643 = t8541 * t8732;
t8642 = t8544 * t8732;
t8641 = t8747 * pkin(6);
t8430 = t8525 * t8695 + t8677;
t8439 = -t8525 * t8692 + t8672;
t8527 = legFrame(2,2);
t8491 = sin(t8527);
t8494 = cos(t8527);
t8445 = t8491 * g(1) + t8494 * g(2);
t8448 = t8494 * g(1) - t8491 * g(2);
t8617 = t8524 * t8695;
t8637 = ((t8439 * t8532 - t8534 * t8677) * g(3) + (t8430 * t8543 + t8532 * t8691) * t8448 - t8445 * (-t8617 + t8676)) * t8730;
t8432 = t8614 - t8702;
t8526 = legFrame(3,2);
t8490 = sin(t8526);
t8493 = cos(t8526);
t8444 = t8490 * g(1) + t8493 * g(2);
t8447 = t8493 * g(1) - t8490 * g(2);
t8636 = (g(3) * (-t8432 * t8531 + t8538 * t8678) + (t8432 * t8540 + t8531 * t8681) * t8447 + t8444 * (t8530 * t8683 + t8712)) * t8731;
t8433 = t8611 - t8696;
t8635 = (g(3) * (-t8433 * t8534 + t8541 * t8672) + (t8433 * t8543 + t8534 * t8675) * t8448 + t8445 * (t8533 * t8677 + t8710)) * t8730;
t8434 = t8609 - t8690;
t8528 = legFrame(1,2);
t8492 = sin(t8528);
t8495 = cos(t8528);
t8446 = t8492 * g(1) + t8495 * g(2);
t8449 = t8495 * g(1) - t8492 * g(2);
t8634 = (g(3) * (-t8434 * t8537 + t8544 * t8667) + t8449 * (t8434 * t8546 + t8537 * t8670) + t8446 * (t8536 * t8671 + t8708)) * t8729;
t8429 = t8525 * t8701 + t8683;
t8438 = -t8525 * t8698 + t8678;
t8619 = t8524 * t8701;
t8633 = (g(3) * (t8438 * t8529 - t8531 * t8683) + (t8429 * t8540 + t8529 * t8697) * t8447 - t8444 * (-t8619 + t8682)) * t8731;
t8431 = t8525 * t8689 + t8671;
t8440 = -t8525 * t8685 + t8667;
t8620 = t8524 * t8689;
t8632 = (g(3) * (t8440 * t8535 - t8537 * t8671) + t8449 * (t8431 * t8546 + t8535 * t8684) - t8446 * (-t8620 + t8704)) * t8729;
t8469 = pkin(5) + t8735;
t8631 = t8469 * t8722;
t8473 = pkin(5) + t8734;
t8630 = t8473 * t8722;
t8477 = pkin(5) + t8733;
t8629 = t8477 * t8722;
t8628 = t8491 * t8694;
t8627 = t8494 * t8694;
t8626 = t8530 * t8725;
t8625 = t8533 * t8724;
t8624 = t8536 * t8723;
t8623 = t8524 * t8706;
t8622 = t8524 * t8705;
t8621 = t8524 * t8703;
t8618 = t8531 * t8702;
t8616 = t8534 * t8696;
t8615 = t8537 * t8690;
t8613 = t8760 * t8700;
t8612 = t8524 * t8699;
t8610 = t8524 * t8693;
t8608 = t8758 * t8688;
t8607 = t8524 * t8687;
t8426 = g(3) * t8540 + t8447 * t8531;
t8427 = g(3) * t8543 + t8448 * t8534;
t8428 = g(3) * t8546 + t8449 * t8537;
t8547 = pkin(6) ^ 2;
t8603 = -t8547 + t8725;
t8602 = -t8547 + t8724;
t8601 = -t8547 + t8723;
t8600 = t8515 * t8651;
t8599 = t8518 * t8647;
t8598 = t8521 * t8650;
t8594 = t8490 * t8656;
t8593 = t8493 * t8656;
t8592 = pkin(6) * t8628;
t8591 = pkin(6) * t8627;
t8590 = t8492 * t8655;
t8589 = t8495 * t8655;
t8517 = t8539 ^ 2;
t8462 = (t8517 - 0.2e1) * t8735 - pkin(5);
t8520 = t8542 ^ 2;
t8463 = (t8520 - 0.2e1) * t8734 - pkin(5);
t8523 = t8545 ^ 2;
t8464 = (t8523 - 0.2e1) * t8733 - pkin(5);
t8588 = t8747 * t8540 * t8469;
t8587 = t8747 * t8543 * t8473;
t8586 = t8747 * t8546 * t8477;
t8585 = t8490 * t8631;
t8584 = t8491 * t8630;
t8583 = t8492 * t8629;
t8582 = t8493 * t8631;
t8581 = t8494 * t8630;
t8580 = t8495 * t8629;
t8579 = t8490 * t8623;
t8578 = t8493 * t8623;
t8577 = t8491 * t8622;
t8576 = t8494 * t8622;
t8575 = t8492 * t8621;
t8574 = t8495 * t8621;
t8573 = pkin(2) * t8539 * t8619;
t8572 = pkin(2) * t8542 * t8617;
t8571 = pkin(2) * t8545 * t8620;
t8570 = pkin(6) * t8579;
t8569 = pkin(6) * t8578;
t8568 = pkin(6) * t8577;
t8567 = pkin(6) * t8576;
t8566 = pkin(6) * t8575;
t8565 = pkin(6) * t8574;
t8564 = t8531 * t8603;
t8563 = t8534 * t8602;
t8562 = t8537 * t8601;
t8561 = t8531 * t8573;
t8560 = t8534 * t8572;
t8559 = t8537 * t8571;
t8381 = ((-g(1) * t8706 - t8737) * t8493 + (g(2) * t8706 - t8738) * t8490 + t8531 * t8736) * t8539 + t8530 * t8426;
t8435 = t8525 * t8679 + t8697;
t8555 = t8381 * MDP(16) + (-MDP(17) * t8381 * t8529 + MDP(10) * (g(3) * t8438 + t8447 * t8435 + t8444 * t8721) + MDP(9) * (g(3) * (t8525 * t8697 + t8679) - t8447 * (t8525 * t8678 - t8698) - t8444 * t8715)) * t8516;
t8382 = ((-g(1) * t8705 - t8737) * t8494 + (g(2) * t8705 - t8738) * t8491 + t8534 * t8736) * t8542 + t8533 * t8427;
t8436 = t8525 * t8673 + t8691;
t8554 = t8382 * MDP(16) + (-MDP(17) * t8382 * t8532 + MDP(10) * (g(3) * t8439 + t8448 * t8436 + t8445 * t8719) + MDP(9) * (g(3) * (t8525 * t8691 + t8673) - t8448 * (t8525 * t8672 - t8692) - t8445 * t8714)) * t8519;
t8383 = ((-g(1) * t8703 - t8737) * t8495 + (g(2) * t8703 - t8738) * t8492 + t8537 * t8736) * t8545 + t8536 * t8428;
t8437 = t8525 * t8668 + t8684;
t8553 = t8383 * MDP(16) + (-MDP(17) * t8383 * t8535 + MDP(10) * (g(3) * t8440 + t8449 * t8437 + t8446 * t8717) + MDP(9) * (g(3) * (t8525 * t8684 + t8668) - t8449 * (t8525 * t8667 - t8685) - t8446 * t8713)) * t8522;
t8423 = -g(3) * t8531 + t8447 * t8540;
t8552 = (t8539 * t8426 * t8525 + t8530 * t8423) * MDP(10) + (g(3) * (t8435 * t8538 - t8612) - t8447 * (t8438 * t8538 + t8618)) * MDP(16) + (-g(3) * (t8435 * t8529 + t8524 * t8680) + (-t8429 * t8531 + t8529 * t8678) * t8447) * MDP(17) - t8423 * MDP(2) + t8426 * MDP(3) + (-t8539 * t8423 + t8426 * t8711) * MDP(9);
t8424 = -g(3) * t8534 + t8448 * t8543;
t8551 = (t8542 * t8427 * t8525 + t8533 * t8424) * MDP(10) + (g(3) * (t8436 * t8541 - t8610) - t8448 * (t8439 * t8541 + t8616)) * MDP(16) + (-g(3) * (t8436 * t8532 + t8524 * t8674) + (-t8430 * t8534 + t8532 * t8672) * t8448) * MDP(17) - t8424 * MDP(2) + t8427 * MDP(3) + (-t8542 * t8424 + t8427 * t8709) * MDP(9);
t8425 = -g(3) * t8537 + t8449 * t8546;
t8550 = (t8545 * t8428 * t8525 + t8536 * t8425) * MDP(10) + (g(3) * (t8437 * t8544 - t8607) - t8449 * (t8440 * t8544 + t8615)) * MDP(16) + (-g(3) * (t8437 * t8535 + t8524 * t8669) + t8449 * (-t8431 * t8537 + t8535 * t8667)) * MDP(17) - t8425 * MDP(2) + t8428 * MDP(3) + (-t8545 * t8425 + t8428 * t8707) * MDP(9);
t8549 = 0.1e1 / pkin(2);
t8507 = pkin(1) * t8536;
t8506 = pkin(1) * t8533;
t8505 = pkin(1) * t8530;
t8482 = t8507 + pkin(6);
t8481 = t8506 + pkin(6);
t8480 = t8505 + pkin(6);
t8478 = 0.2e1 * t8498 + pkin(1);
t8474 = 0.2e1 * t8497 + pkin(1);
t8470 = 0.2e1 * t8496 + pkin(1);
t8467 = t8507 - t8641;
t8466 = t8506 - t8641;
t8465 = t8505 - t8641;
t8461 = -pkin(5) + (t8523 - 0.1e1) * t8733;
t8460 = -pkin(5) + (t8520 - 0.1e1) * t8734;
t8459 = -pkin(5) + (t8517 - 0.1e1) * t8735;
t8443 = -t8514 * t8498 + t8758;
t8442 = -t8514 * t8497 + t8759;
t8441 = -t8514 * t8496 + t8760;
t8422 = t8514 * t8492 - t8492 - t8574;
t8421 = t8514 * t8495 - t8495 + t8575;
t8420 = t8514 * t8491 - t8491 - t8576;
t8419 = t8514 * t8494 - t8494 + t8577;
t8418 = t8514 * t8490 - t8490 - t8578;
t8417 = t8514 * t8493 - t8493 + t8579;
t8416 = t8464 * t8546 * t8524 + t8537 * t8758;
t8415 = t8463 * t8543 * t8524 + t8534 * t8759;
t8414 = t8462 * t8540 * t8524 + t8531 * t8760;
t8413 = t8455 * t8703 + t8537 * t8754;
t8412 = t8454 * t8705 + t8534 * t8753;
t8411 = t8453 * t8706 + t8531 * t8752;
t8410 = t8478 * t8716 + t8586;
t8409 = t8474 * t8718 + t8587;
t8408 = t8470 * t8720 + t8588;
t8407 = t8482 * t8716 + t8536 * t8586;
t8406 = t8481 * t8718 + t8533 * t8587;
t8405 = t8480 * t8720 + t8530 * t8588;
t8404 = 0.1e1 / (pkin(1) * t8726 + (t8754 * pkin(5) + t8486) * t8524);
t8403 = 0.1e1 / (pkin(1) * t8727 + (t8753 * pkin(5) + t8485) * t8524);
t8402 = 0.1e1 / (pkin(1) * t8728 + (t8752 * pkin(5) + t8484) * t8524);
t8362 = (t8544 * t8537 * t8645 + t8601 * t8546) * t8523 + ((t8477 * t8716 + t8546 * t8478) * t8741 - t8562 * t8707) * t8545 + (t8546 * t8482 + (-pkin(2) * t8704 + t8477 * t8717) * t8537) * pkin(6);
t8361 = (t8541 * t8534 * t8645 + t8602 * t8543) * t8520 + ((t8473 * t8718 + t8543 * t8474) * t8742 - t8563 * t8709) * t8542 + (t8543 * t8481 + (-pkin(2) * t8676 + t8473 * t8719) * t8534) * pkin(6);
t8360 = (t8538 * t8531 * t8645 + t8603 * t8540) * t8517 + ((t8469 * t8720 + t8540 * t8470) * t8743 - t8564 * t8711) * t8539 + (t8540 * t8480 + (-pkin(2) * t8682 + t8469 * t8721) * t8531) * pkin(6);
t8356 = (-t8524 * t8495 * t8562 + t8422 * t8642) * t8523 + (t8422 * t8624 - (t8410 * t8495 + t8583) * t8741 + pkin(6) * (t8492 * t8443 + t8536 * t8565)) * t8545 - (t8492 * t8467 + t8565) * t8741 - pkin(6) * (t8407 * t8495 + t8536 * t8583);
t8355 = (t8601 * t8492 * t8716 + t8421 * t8642) * t8523 + (t8421 * t8624 + (t8410 * t8492 - t8580) * t8741 + (t8495 * t8443 - t8536 * t8566) * pkin(6)) * t8545 - (t8495 * t8467 - t8566) * t8741 + pkin(6) * (t8407 * t8492 - t8536 * t8580);
t8354 = (-t8524 * t8494 * t8563 + t8420 * t8643) * t8520 + (t8420 * t8625 - (t8409 * t8494 + t8584) * t8742 + pkin(6) * (t8491 * t8442 + t8533 * t8567)) * t8542 - (t8491 * t8466 + t8567) * t8742 - pkin(6) * (t8406 * t8494 + t8533 * t8584);
t8353 = (t8602 * t8491 * t8718 + t8419 * t8643) * t8520 + (t8419 * t8625 + (t8409 * t8491 - t8581) * t8742 + (t8494 * t8442 - t8533 * t8568) * pkin(6)) * t8542 - (t8494 * t8466 - t8568) * t8742 + pkin(6) * (t8406 * t8491 - t8533 * t8581);
t8352 = (-t8524 * t8493 * t8564 + t8418 * t8644) * t8517 + (t8418 * t8626 - (t8408 * t8493 + t8585) * t8743 + pkin(6) * (t8490 * t8441 + t8530 * t8569)) * t8539 - (t8490 * t8465 + t8569) * t8743 - pkin(6) * (t8405 * t8493 + t8530 * t8585);
t8351 = (t8603 * t8490 * t8720 + t8417 * t8644) * t8517 + (t8417 * t8626 + (t8408 * t8490 - t8582) * t8743 + (t8493 * t8441 - t8530 * t8570) * pkin(6)) * t8539 - (t8493 * t8465 - t8570) * t8743 + pkin(6) * (t8405 * t8490 - t8530 * t8582);
t1 = [-g(1) * MDP(18) + ((t8352 * t8633 + t8354 * t8637 + t8356 * t8632) * MDP(16) + (t8352 * t8636 + t8354 * t8635 + t8356 * t8634) * MDP(17)) * t8549 + (t8553 * (((-t8492 * t8464 - t8495 * t8652) * t8544 + (t8495 * t8755 - t8590) * t8536) * t8514 + ((0.2e1 * t8492 * t8717 + t8495 * t8684) * t8744 + (t8416 * t8495 - t8492 * t8657) * t8544 + (-t8492 * t8476 + t8546 * t8589) * t8717) * t8525 - t8495 * t8598 + (t8461 * t8492 - t8495 * t8559) * t8544 + t8749 * t8495 + t8492 * t8608) + t8550 * ((t8492 * t8455 + t8495 * t8660) * t8524 + t8413 * t8495 - t8492 * t8663)) * t8404 + (t8554 * (((-t8491 * t8463 - t8494 * t8653) * t8541 + (t8494 * t8756 - t8592) * t8533) * t8514 + ((0.2e1 * t8491 * t8719 + t8494 * t8691) * t8745 + (t8415 * t8494 - t8491 * t8658) * t8541 + (-t8491 * t8472 + t8543 * t8591) * t8719) * t8525 - t8494 * t8599 + (t8460 * t8491 - t8494 * t8560) * t8541 + t8750 * t8494 + t8759 * t8628) + t8551 * ((t8491 * t8454 + t8494 * t8661) * t8524 + t8412 * t8494 - t8491 * t8664)) * t8403 + (t8555 * (((-t8490 * t8462 - t8493 * t8654) * t8538 + (t8493 * t8757 - t8594) * t8530) * t8514 + ((0.2e1 * t8490 * t8721 + t8493 * t8697) * t8746 + (t8414 * t8493 - t8490 * t8659) * t8538 + (-t8490 * t8468 + t8540 * t8593) * t8721) * t8525 - t8493 * t8600 + (t8459 * t8490 - t8493 * t8561) * t8538 + t8751 * t8493 + t8490 * t8613) + t8552 * ((t8490 * t8453 + t8493 * t8662) * t8524 + t8411 * t8493 - t8490 * t8665)) * t8402; -g(2) * MDP(18) + ((t8351 * t8633 + t8353 * t8637 + t8355 * t8632) * MDP(16) + (t8351 * t8636 + t8353 * t8635 + t8355 * t8634) * MDP(17)) * t8549 + (t8553 * (((-t8495 * t8464 + t8492 * t8652) * t8544 + (-t8492 * t8755 - t8589) * t8536) * t8514 + (-(t8492 * t8684 - 0.2e1 * t8495 * t8717) * t8744 + (-t8416 * t8492 - t8495 * t8657) * t8544 - (t8495 * t8476 + t8546 * t8590) * t8717) * t8525 + t8492 * t8598 + (t8461 * t8495 + t8492 * t8559) * t8544 - t8749 * t8492 + t8495 * t8608) + t8550 * ((t8495 * t8455 - t8492 * t8660) * t8524 - t8413 * t8492 - t8495 * t8663)) * t8404 + (t8554 * (((-t8494 * t8463 + t8491 * t8653) * t8541 + (-t8491 * t8756 - t8591) * t8533) * t8514 + (-(t8491 * t8691 - 0.2e1 * t8494 * t8719) * t8745 + (-t8415 * t8491 - t8494 * t8658) * t8541 - (t8494 * t8472 + t8543 * t8592) * t8719) * t8525 + t8491 * t8599 + (t8460 * t8494 + t8491 * t8560) * t8541 - t8750 * t8491 + t8759 * t8627) + t8551 * ((t8494 * t8454 - t8491 * t8661) * t8524 - t8412 * t8491 - t8494 * t8664)) * t8403 + (t8555 * (((-t8493 * t8462 + t8490 * t8654) * t8538 + (-t8490 * t8757 - t8593) * t8530) * t8514 + (-(t8490 * t8697 - 0.2e1 * t8493 * t8721) * t8746 + (-t8414 * t8490 - t8493 * t8659) * t8538 - (t8493 * t8468 + t8540 * t8594) * t8721) * t8525 + t8490 * t8600 + (t8459 * t8493 + t8490 * t8561) * t8538 - t8751 * t8490 + t8493 * t8613) + t8552 * ((t8493 * t8453 - t8490 * t8662) * t8524 - t8411 * t8490 - t8493 * t8665)) * t8402; -g(3) * MDP(18) + ((-t8360 * t8633 - t8361 * t8637 - t8362 * t8632) * MDP(16) + (-t8360 * t8636 - t8361 * t8635 - t8362 * t8634) * MDP(17)) * t8549 * t8524 + (t8553 * (t8537 * (pkin(6) * t8670 - t8604 * t8536) * t8514 + ((-t8464 * t8716 + t8546 * t8758) * t8544 + (-t8615 * t8498 + t8546 * t8744) * t8545) * t8525 + t8685 * t8744 - t8571 * t8669 + (-pkin(1) * t8607 - t8537 * t8476) * t8536 + t8595 * t8687) + t8550 * (t8546 * t8754 + (-pkin(2) * t8690 - t8726) * t8537)) * t8404 + (t8554 * (t8534 * (pkin(6) * t8675 - t8605 * t8533) * t8514 + ((-t8463 * t8718 + t8543 * t8759) * t8541 + (-t8616 * t8497 + t8543 * t8745) * t8542) * t8525 + t8692 * t8745 - t8572 * t8674 + (-pkin(1) * t8610 - t8534 * t8472) * t8533 + t8596 * t8693) + t8551 * (t8543 * t8753 + (-pkin(2) * t8696 - t8727) * t8534)) * t8403 + (t8555 * (t8531 * (pkin(6) * t8681 - t8606 * t8530) * t8514 + ((-t8462 * t8720 + t8540 * t8760) * t8538 + (-t8618 * t8496 + t8540 * t8746) * t8539) * t8525 + t8698 * t8746 - t8573 * t8680 + (-pkin(1) * t8612 - t8531 * t8468) * t8530 + t8597 * t8699) + t8552 * (t8540 * t8752 + (-pkin(2) * t8702 - t8728) * t8531)) * t8402;];
taugX  = t1;
