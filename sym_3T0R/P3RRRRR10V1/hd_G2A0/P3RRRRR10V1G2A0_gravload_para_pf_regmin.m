% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V1G2A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:36:13
% EndTime: 2020-08-06 22:36:22
% DurationCPUTime: 9.41s
% Computational Cost: add. (2889->526), mult. (8055->995), div. (171->10), fcn. (7224->26), ass. (0->379)
t4128 = cos(pkin(3));
t4117 = t4128 ^ 2;
t4360 = t4117 - 0.1e1;
t4133 = sin(qJ(2,3));
t4099 = t4133 * pkin(6);
t4373 = t4099 + pkin(1);
t4136 = sin(qJ(2,2));
t4100 = t4136 * pkin(6);
t4372 = t4100 + pkin(1);
t4139 = sin(qJ(2,1));
t4101 = t4139 * pkin(6);
t4371 = t4101 + pkin(1);
t4143 = cos(qJ(1,3));
t4132 = sin(qJ(3,3));
t4071 = t4132 * pkin(5) + pkin(2);
t4141 = cos(qJ(3,3));
t4118 = t4141 ^ 2;
t4359 = pkin(2) * t4118;
t4203 = -t4071 + 0.2e1 * t4359;
t4370 = t4143 * t4203;
t4146 = cos(qJ(1,2));
t4135 = sin(qJ(3,2));
t4075 = t4135 * pkin(5) + pkin(2);
t4144 = cos(qJ(3,2));
t4121 = t4144 ^ 2;
t4358 = pkin(2) * t4121;
t4202 = -t4075 + 0.2e1 * t4358;
t4369 = t4146 * t4202;
t4149 = cos(qJ(1,1));
t4138 = sin(qJ(3,1));
t4079 = t4138 * pkin(5) + pkin(2);
t4147 = cos(qJ(3,1));
t4124 = t4147 ^ 2;
t4357 = pkin(2) * t4124;
t4201 = -t4079 + 0.2e1 * t4357;
t4368 = t4149 * t4201;
t4148 = cos(qJ(2,1));
t4270 = t4147 * t4148;
t4367 = -pkin(2) * t4270 - t4101;
t4145 = cos(qJ(2,2));
t4275 = t4144 * t4145;
t4366 = -pkin(2) * t4275 - t4100;
t4142 = cos(qJ(2,3));
t4281 = t4141 * t4142;
t4365 = -pkin(2) * t4281 - t4099;
t4134 = sin(qJ(1,3));
t4127 = sin(pkin(3));
t4353 = pkin(6) * t4127;
t4197 = (t4142 + 0.1e1) * (t4142 - 0.1e1) * t4353;
t4279 = t4143 * t4133;
t4251 = pkin(2) * t4279;
t4321 = t4127 * t4134;
t4364 = (-(pkin(1) * t4321 - pkin(5) * t4143) * t4133 + t4134 * t4197) * t4132 + t4251;
t4137 = sin(qJ(1,2));
t4196 = (t4145 + 0.1e1) * (t4145 - 0.1e1) * t4353;
t4273 = t4146 * t4136;
t4247 = pkin(2) * t4273;
t4319 = t4127 * t4137;
t4363 = (-(pkin(1) * t4319 - pkin(5) * t4146) * t4136 + t4137 * t4196) * t4135 + t4247;
t4140 = sin(qJ(1,1));
t4195 = (t4148 + 0.1e1) * (t4148 - 0.1e1) * t4353;
t4268 = t4149 * t4139;
t4250 = pkin(2) * t4268;
t4317 = t4127 * t4140;
t4362 = (-(pkin(1) * t4317 - pkin(5) * t4149) * t4139 + t4140 * t4195) * t4138 + t4250;
t4361 = pkin(1) * pkin(2);
t4356 = pkin(2) * t4141;
t4355 = pkin(2) * t4144;
t4354 = pkin(2) * t4147;
t4352 = pkin(6) * t4128;
t4351 = g(1) * t4127;
t4350 = t4127 * g(2);
t4349 = t4128 * g(3);
t4348 = t4132 * pkin(2);
t4347 = t4135 * pkin(2);
t4346 = t4138 * pkin(2);
t4345 = -0.2e1 * pkin(2) * pkin(6);
t4129 = legFrame(3,2);
t4093 = sin(t4129);
t4096 = cos(t4129);
t4047 = t4093 * g(1) + t4096 * g(2);
t4050 = t4096 * g(1) - t4093 * g(2);
t4119 = 0.1e1 / t4141;
t4278 = t4143 * t4142;
t4297 = t4134 * t4142;
t4298 = t4134 * t4133;
t4316 = t4127 * t4142;
t4344 = (g(3) * (t4128 * t4297 + t4279) - t4050 * (t4128 * t4278 - t4298) - t4047 * t4316) * t4119;
t4038 = t4128 * t4279 + t4297;
t4041 = -t4128 * t4298 + t4278;
t4322 = t4127 * t4133;
t4343 = (g(3) * t4041 + t4050 * t4038 + t4047 * t4322) * t4119;
t4130 = legFrame(2,2);
t4094 = sin(t4130);
t4097 = cos(t4130);
t4048 = t4094 * g(1) + t4097 * g(2);
t4051 = t4097 * g(1) - t4094 * g(2);
t4122 = 0.1e1 / t4144;
t4272 = t4146 * t4145;
t4291 = t4137 * t4145;
t4292 = t4137 * t4136;
t4315 = t4127 * t4145;
t4342 = (g(3) * (t4128 * t4291 + t4273) - t4051 * (t4128 * t4272 - t4292) - t4048 * t4315) * t4122;
t4039 = t4128 * t4273 + t4291;
t4042 = -t4128 * t4292 + t4272;
t4320 = t4127 * t4136;
t4341 = (g(3) * t4042 + t4051 * t4039 + t4048 * t4320) * t4122;
t4131 = legFrame(1,2);
t4095 = sin(t4131);
t4098 = cos(t4131);
t4049 = t4095 * g(1) + t4098 * g(2);
t4052 = t4098 * g(1) - t4095 * g(2);
t4125 = 0.1e1 / t4147;
t4267 = t4149 * t4148;
t4284 = t4140 * t4148;
t4285 = t4140 * t4139;
t4314 = t4127 * t4148;
t4340 = (g(3) * (t4128 * t4284 + t4268) - t4052 * (t4128 * t4267 - t4285) - t4049 * t4314) * t4125;
t4040 = t4128 * t4268 + t4284;
t4043 = -t4128 * t4285 + t4267;
t4318 = t4127 * t4139;
t4339 = (g(3) * t4043 + t4052 * t4040 + t4049 * t4318) * t4125;
t4086 = pkin(1) * t4352;
t4087 = pkin(1) * t4348;
t4282 = t4141 * t4128;
t4211 = t4133 * t4282;
t4266 = pkin(2) * pkin(5) * t4127;
t4338 = 0.1e1 / ((-t4141 * t4266 + t4086) * t4142 - t4211 * t4361 + t4127 * (-pkin(5) * t4099 + t4087)) * t4119;
t4088 = pkin(1) * t4347;
t4276 = t4144 * t4128;
t4209 = t4136 * t4276;
t4337 = 0.1e1 / ((-t4144 * t4266 + t4086) * t4145 - t4209 * t4361 + t4127 * (-pkin(5) * t4100 + t4088)) * t4122;
t4089 = pkin(1) * t4346;
t4286 = t4139 * t4147;
t4206 = t4128 * t4286;
t4336 = 0.1e1 / ((-t4147 * t4266 + t4086) * t4148 - t4206 * t4361 + t4127 * (-pkin(5) * t4101 + t4089)) * t4125;
t4056 = t4142 * pkin(6) - t4133 * t4356;
t4329 = t4056 * t4128;
t4005 = 0.1e1 / (pkin(1) * t4329 + (t4365 * pkin(5) + t4087) * t4127);
t4026 = -g(3) * t4134 + t4050 * t4143;
t4335 = t4005 * t4026;
t4029 = g(3) * t4143 + t4050 * t4134;
t4334 = t4005 * t4029;
t4057 = t4145 * pkin(6) - t4136 * t4355;
t4328 = t4057 * t4128;
t4006 = 0.1e1 / (pkin(1) * t4328 + (t4366 * pkin(5) + t4088) * t4127);
t4027 = -g(3) * t4137 + t4051 * t4146;
t4333 = t4006 * t4027;
t4030 = g(3) * t4146 + t4051 * t4137;
t4332 = t4006 * t4030;
t4058 = -pkin(2) * t4286 + t4148 * pkin(6);
t4327 = t4058 * t4128;
t4007 = 0.1e1 / (pkin(1) * t4327 + (t4367 * pkin(5) + t4089) * t4127);
t4028 = -g(3) * t4140 + t4052 * t4149;
t4331 = t4007 * t4028;
t4031 = g(3) * t4149 + t4052 * t4140;
t4330 = t4007 * t4031;
t4151 = pkin(2) ^ 2;
t4326 = t4118 * t4151;
t4325 = t4121 * t4151;
t4324 = t4124 * t4151;
t4323 = t4127 * t4128;
t4152 = 0.1e1 / pkin(2);
t4313 = t4127 * t4152;
t4312 = t4128 * t4132;
t4311 = t4128 * t4133;
t4310 = t4128 * t4135;
t4309 = t4128 * t4136;
t4308 = t4128 * t4138;
t4307 = t4128 * t4139;
t4306 = t4128 * t4143;
t4305 = t4128 * t4146;
t4304 = t4128 * t4147;
t4303 = t4128 * t4149;
t4302 = t4132 * t4127;
t4301 = t4132 * t4133;
t4300 = t4132 * t4142;
t4299 = t4132 * t4143;
t4296 = t4135 * t4127;
t4295 = t4135 * t4136;
t4294 = t4135 * t4145;
t4293 = t4135 * t4146;
t4290 = t4138 * t4127;
t4289 = t4138 * t4139;
t4288 = t4138 * t4148;
t4287 = t4138 * t4149;
t4283 = t4141 * t4127;
t4280 = t4141 * t4143;
t4277 = t4144 * t4127;
t4274 = t4144 * t4146;
t4271 = t4147 * t4127;
t4269 = t4147 * t4149;
t4265 = pkin(2) * t4312;
t4264 = pkin(2) * t4310;
t4263 = pkin(2) * t4308;
t4262 = pkin(2) * t4299;
t4261 = pkin(2) * t4293;
t4260 = pkin(2) * t4287;
t4259 = pkin(6) * t4316;
t4258 = pkin(6) * t4315;
t4257 = pkin(6) * t4314;
t4256 = pkin(6) * t4294;
t4255 = pkin(6) * t4288;
t4254 = pkin(6) * t4278;
t4253 = pkin(6) * t4272;
t4252 = pkin(6) * t4267;
t4245 = 0.2e1 * pkin(2) * t4352;
t4244 = t4141 * t4345;
t4243 = t4144 * t4345;
t4242 = t4147 * t4345;
t4241 = t4360 * pkin(6);
t4033 = t4128 * t4295 + t4277;
t4214 = t4127 * t4295;
t4237 = ((t4042 * t4135 - t4137 * t4277) * g(3) + (t4033 * t4146 + t4135 * t4291) * t4051 - t4048 * (-t4214 + t4276)) * t4337;
t4035 = t4211 - t4302;
t4236 = (g(3) * (-t4035 * t4134 + t4141 * t4278) + (t4035 * t4143 + t4134 * t4281) * t4050 + t4047 * (t4133 * t4283 + t4312)) * t4338;
t4036 = t4209 - t4296;
t4235 = (g(3) * (-t4036 * t4137 + t4144 * t4272) + (t4036 * t4146 + t4137 * t4275) * t4051 + t4048 * (t4136 * t4277 + t4310)) * t4337;
t4037 = t4206 - t4290;
t4234 = (g(3) * (-t4037 * t4140 + t4147 * t4267) + t4052 * (t4037 * t4149 + t4140 * t4270) + t4049 * (t4139 * t4271 + t4308)) * t4336;
t4032 = t4128 * t4301 + t4283;
t4216 = t4127 * t4301;
t4233 = (g(3) * (t4041 * t4132 - t4134 * t4283) + (t4032 * t4143 + t4132 * t4297) * t4050 - t4047 * (-t4216 + t4282)) * t4338;
t4034 = t4128 * t4289 + t4271;
t4217 = t4127 * t4289;
t4232 = (g(3) * (t4043 * t4138 - t4140 * t4271) + t4052 * (t4034 * t4149 + t4138 * t4284) - t4049 * (-t4217 + t4304)) * t4336;
t3984 = ((-g(1) * t4306 - t4350) * t4096 + (g(2) * t4306 - t4351) * t4093 + t4134 * t4349) * t4142 + t4133 * t4029;
t4231 = t3984 * t4119 * t4132;
t3985 = ((-g(1) * t4305 - t4350) * t4097 + (g(2) * t4305 - t4351) * t4094 + t4137 * t4349) * t4145 + t4136 * t4030;
t4230 = t3985 * t4122 * t4135;
t3986 = ((-g(1) * t4303 - t4350) * t4098 + (g(2) * t4303 - t4351) * t4095 + t4140 * t4349) * t4148 + t4139 * t4031;
t4229 = t3986 * t4125 * t4138;
t4072 = pkin(5) + t4348;
t4228 = t4072 * t4323;
t4076 = pkin(5) + t4347;
t4227 = t4076 * t4323;
t4080 = pkin(5) + t4346;
t4226 = t4080 * t4323;
t4225 = t4093 * t4300;
t4224 = t4096 * t4300;
t4223 = t4133 * t4326;
t4222 = t4136 * t4325;
t4221 = t4139 * t4324;
t4220 = t4127 * t4306;
t4219 = t4127 * t4305;
t4218 = t4127 * t4303;
t4215 = t4134 * t4302;
t4213 = t4137 * t4296;
t4212 = t4140 * t4290;
t4210 = t4127 * t4299;
t4208 = t4372 * t4294;
t4207 = t4127 * t4293;
t4205 = t4371 * t4288;
t4204 = t4127 * t4287;
t4150 = pkin(6) ^ 2;
t4200 = -t4150 + t4326;
t4199 = -t4150 + t4325;
t4198 = -t4150 + t4324;
t4194 = t4118 * t4251;
t4193 = t4121 * t4247;
t4192 = t4124 * t4250;
t4191 = pkin(6) * t4225;
t4190 = pkin(6) * t4224;
t4189 = t4094 * t4256;
t4188 = t4097 * t4256;
t4187 = t4095 * t4255;
t4186 = t4098 * t4255;
t4120 = t4142 ^ 2;
t4065 = (t4120 - 0.2e1) * t4348 - pkin(5);
t4123 = t4145 ^ 2;
t4066 = (t4123 - 0.2e1) * t4347 - pkin(5);
t4126 = t4148 ^ 2;
t4067 = (t4126 - 0.2e1) * t4346 - pkin(5);
t4185 = t4360 * t4143 * t4072;
t4184 = t4360 * t4146 * t4076;
t4183 = t4360 * t4149 * t4080;
t4182 = t4093 * t4228;
t4181 = t4094 * t4227;
t4180 = t4095 * t4226;
t4179 = t4096 * t4228;
t4178 = t4097 * t4227;
t4177 = t4098 * t4226;
t4176 = t4093 * t4220;
t4175 = t4096 * t4220;
t4174 = t4094 * t4219;
t4173 = t4097 * t4219;
t4172 = t4095 * t4218;
t4171 = t4098 * t4218;
t4170 = pkin(2) * t4142 * t4216;
t4169 = pkin(2) * t4145 * t4214;
t4168 = pkin(2) * t4148 * t4217;
t4167 = pkin(6) * t4176;
t4166 = pkin(6) * t4175;
t4165 = pkin(6) * t4174;
t4164 = pkin(6) * t4173;
t4163 = pkin(6) * t4172;
t4162 = pkin(6) * t4171;
t4161 = t4137 * t4199;
t4160 = t4140 * t4198;
t4159 = t4200 * t4134;
t4158 = t4134 * t4170;
t4157 = t4137 * t4169;
t4156 = t4140 * t4168;
t4110 = pkin(1) * t4139;
t4109 = pkin(1) * t4136;
t4108 = pkin(1) * t4133;
t4085 = t4110 + pkin(6);
t4084 = t4109 + pkin(6);
t4083 = t4108 + pkin(6);
t4081 = 0.2e1 * t4101 + pkin(1);
t4077 = 0.2e1 * t4100 + pkin(1);
t4073 = 0.2e1 * t4099 + pkin(1);
t4070 = t4110 - t4241;
t4069 = t4109 - t4241;
t4068 = t4108 - t4241;
t4064 = -pkin(5) + (t4126 - 0.1e1) * t4346;
t4063 = -pkin(5) + (t4123 - 0.1e1) * t4347;
t4062 = -pkin(5) + (t4120 - 0.1e1) * t4348;
t4046 = -t4117 * t4101 + t4371;
t4045 = -t4117 * t4100 + t4372;
t4044 = -t4117 * t4099 + t4373;
t4025 = t4117 * t4095 - t4095 - t4171;
t4024 = t4117 * t4098 - t4098 + t4172;
t4023 = t4117 * t4094 - t4094 - t4173;
t4022 = t4117 * t4097 - t4097 + t4174;
t4021 = t4117 * t4093 - t4093 - t4175;
t4020 = t4117 * t4096 - t4096 + t4176;
t4019 = t4067 * t4149 * t4127 + t4140 * t4371;
t4018 = t4066 * t4146 * t4127 + t4137 * t4372;
t4017 = t4065 * t4143 * t4127 + t4134 * t4373;
t4016 = t4058 * t4303 + t4140 * t4367;
t4015 = t4057 * t4305 + t4137 * t4366;
t4014 = t4056 * t4306 + t4134 * t4365;
t4013 = t4081 * t4317 + t4183;
t4012 = t4077 * t4319 + t4184;
t4011 = t4073 * t4321 + t4185;
t4010 = t4085 * t4317 + t4139 * t4183;
t4009 = t4084 * t4319 + t4136 * t4184;
t4008 = t4083 * t4321 + t4133 * t4185;
t4004 = t4149 * t4367 + (-pkin(2) * t4290 - t4327) * t4140;
t4003 = t4146 * t4366 + (-pkin(2) * t4296 - t4328) * t4137;
t4002 = t4143 * t4365 + (-pkin(2) * t4302 - t4329) * t4134;
t3998 = t4148 * t4031 * t4128 + t4139 * t4028;
t3997 = t4145 * t4030 * t4128 + t4136 * t4027;
t3996 = t4142 * t4029 * t4128 + t4133 * t4026;
t3995 = -t4148 * t4028 + t4031 * t4307;
t3994 = -t4145 * t4027 + t4030 * t4309;
t3993 = -t4142 * t4026 + t4029 * t4311;
t3983 = g(3) * (t4040 * t4147 - t4204) - t4052 * (t4043 * t4147 + t4212);
t3982 = -g(3) * (t4040 * t4138 + t4127 * t4269) + t4052 * (-t4034 * t4140 + t4138 * t4267);
t3981 = g(3) * (t4039 * t4144 - t4207) - t4051 * (t4042 * t4144 + t4213);
t3980 = -g(3) * (t4039 * t4135 + t4127 * t4274) + (-t4033 * t4137 + t4135 * t4272) * t4051;
t3979 = g(3) * (t4038 * t4141 - t4210) - t4050 * (t4041 * t4141 + t4215);
t3978 = -g(3) * (t4038 * t4132 + t4127 * t4280) + (-t4032 * t4134 + t4132 * t4278) * t4050;
t3977 = (t4095 * t4058 + t4098 * t4260) * t4127 + t4016 * t4098 - t4095 * t4263;
t3976 = (t4098 * t4058 - t4095 * t4260) * t4127 - t4016 * t4095 - t4098 * t4263;
t3975 = (t4094 * t4057 + t4097 * t4261) * t4127 + t4015 * t4097 - t4094 * t4264;
t3974 = (t4097 * t4057 - t4094 * t4261) * t4127 - t4015 * t4094 - t4097 * t4264;
t3973 = (t4093 * t4056 + t4096 * t4262) * t4127 + t4014 * t4096 - t4093 * t4265;
t3972 = (t4096 * t4056 - t4093 * t4262) * t4127 - t4014 * t4093 - t4096 * t4265;
t3965 = (t4147 * t4140 * t4245 + t4198 * t4149) * t4126 + ((t4080 * t4317 + t4149 * t4081) * t4354 - t4160 * t4307) * t4148 + (t4149 * t4085 + (-pkin(2) * t4304 + t4080 * t4318) * t4140) * pkin(6);
t3964 = (t4144 * t4137 * t4245 + t4199 * t4146) * t4123 + ((t4076 * t4319 + t4146 * t4077) * t4355 - t4161 * t4309) * t4145 + (t4146 * t4084 + (-pkin(2) * t4276 + t4076 * t4320) * t4137) * pkin(6);
t3963 = (t4141 * t4134 * t4245 + t4200 * t4143) * t4120 + ((t4072 * t4321 + t4143 * t4073) * t4356 - t4159 * t4311) * t4142 + (t4143 * t4083 + (-pkin(2) * t4282 + t4072 * t4322) * t4134) * pkin(6);
t3962 = t4140 * (pkin(6) * t4270 - t4201 * t4139) * t4117 + ((-t4067 * t4317 + t4149 * t4371) * t4147 + (-t4212 * t4101 + t4149 * t4357) * t4148) * t4128 + t4285 * t4357 - t4168 * t4269 + (-pkin(1) * t4204 - t4140 * t4079) * t4139 + t4195 * t4287;
t3961 = t4137 * (pkin(6) * t4275 - t4202 * t4136) * t4117 + ((-t4066 * t4319 + t4146 * t4372) * t4144 + (-t4213 * t4100 + t4146 * t4358) * t4145) * t4128 + t4292 * t4358 - t4169 * t4274 + (-pkin(1) * t4207 - t4137 * t4075) * t4136 + t4196 * t4293;
t3960 = t4134 * (pkin(6) * t4281 - t4203 * t4133) * t4117 + ((-t4065 * t4321 + t4143 * t4373) * t4141 + (-t4215 * t4099 + t4143 * t4359) * t4142) * t4128 + t4298 * t4359 - t4170 * t4280 + (-pkin(1) * t4210 - t4134 * t4071) * t4133 + t4197 * t4299;
t3959 = (-t4127 * t4098 * t4160 + t4025 * t4242) * t4126 + (t4025 * t4221 - (t4013 * t4098 + t4180) * t4354 + pkin(6) * (t4095 * t4046 + t4139 * t4162)) * t4148 - (t4095 * t4070 + t4162) * t4354 - pkin(6) * (t4010 * t4098 + t4139 * t4180);
t3958 = (t4198 * t4095 * t4317 + t4024 * t4242) * t4126 + (t4024 * t4221 + (t4013 * t4095 - t4177) * t4354 + (t4098 * t4046 - t4139 * t4163) * pkin(6)) * t4148 - (t4098 * t4070 - t4163) * t4354 + pkin(6) * (t4010 * t4095 - t4139 * t4177);
t3957 = (-t4127 * t4097 * t4161 + t4023 * t4243) * t4123 + (t4023 * t4222 - (t4012 * t4097 + t4181) * t4355 + pkin(6) * (t4094 * t4045 + t4136 * t4164)) * t4145 - (t4094 * t4069 + t4164) * t4355 - pkin(6) * (t4009 * t4097 + t4136 * t4181);
t3956 = (t4199 * t4094 * t4319 + t4022 * t4243) * t4123 + (t4022 * t4222 + (t4012 * t4094 - t4178) * t4355 + (t4097 * t4045 - t4136 * t4165) * pkin(6)) * t4145 - (t4097 * t4069 - t4165) * t4355 + pkin(6) * (t4009 * t4094 - t4136 * t4178);
t3955 = (-t4127 * t4096 * t4159 + t4021 * t4244) * t4120 + (t4021 * t4223 - (t4011 * t4096 + t4182) * t4356 + pkin(6) * (t4093 * t4044 + t4133 * t4166)) * t4142 - (t4093 * t4068 + t4166) * t4356 - pkin(6) * (t4008 * t4096 + t4133 * t4182);
t3954 = (t4200 * t4093 * t4321 + t4020 * t4244) * t4120 + (t4020 * t4223 + (t4011 * t4093 - t4179) * t4356 + (t4096 * t4044 - t4133 * t4167) * pkin(6)) * t4142 - (t4096 * t4068 - t4167) * t4356 + pkin(6) * (t4008 * t4093 - t4133 * t4179);
t3953 = ((-t4095 * t4067 - t4098 * t4252) * t4147 + (t4098 * t4368 - t4187) * t4139) * t4117 + ((0.2e1 * t4095 * t4318 + t4098 * t4284) * t4357 + (t4019 * t4098 - t4095 * t4257) * t4147 + (-t4095 * t4079 + t4149 * t4186) * t4318) * t4128 - t4098 * t4192 + (t4064 * t4095 - t4098 * t4156) * t4147 + t4362 * t4098 + t4095 * t4205;
t3952 = ((-t4094 * t4066 - t4097 * t4253) * t4144 + (t4097 * t4369 - t4189) * t4136) * t4117 + ((0.2e1 * t4094 * t4320 + t4097 * t4291) * t4358 + (t4018 * t4097 - t4094 * t4258) * t4144 + (-t4094 * t4075 + t4146 * t4188) * t4320) * t4128 - t4097 * t4193 + (t4063 * t4094 - t4097 * t4157) * t4144 + t4363 * t4097 + t4094 * t4208;
t3951 = ((-t4093 * t4065 - t4096 * t4254) * t4141 + (t4096 * t4370 - t4191) * t4133) * t4117 + ((0.2e1 * t4093 * t4322 + t4096 * t4297) * t4359 + (t4017 * t4096 - t4093 * t4259) * t4141 + (-t4093 * t4071 + t4143 * t4190) * t4322) * t4128 - t4096 * t4194 + (t4062 * t4093 - t4096 * t4158) * t4141 + t4364 * t4096 + t4373 * t4225;
t3950 = ((-t4098 * t4067 + t4095 * t4252) * t4147 + (-t4095 * t4368 - t4186) * t4139) * t4117 + (-(t4095 * t4284 - 0.2e1 * t4098 * t4318) * t4357 + (-t4019 * t4095 - t4098 * t4257) * t4147 - (t4098 * t4079 + t4149 * t4187) * t4318) * t4128 + t4095 * t4192 + (t4064 * t4098 + t4095 * t4156) * t4147 - t4362 * t4095 + t4098 * t4205;
t3949 = ((-t4097 * t4066 + t4094 * t4253) * t4144 + (-t4094 * t4369 - t4188) * t4136) * t4117 + (-(t4094 * t4291 - 0.2e1 * t4097 * t4320) * t4358 + (-t4018 * t4094 - t4097 * t4258) * t4144 - (t4097 * t4075 + t4146 * t4189) * t4320) * t4128 + t4094 * t4193 + (t4063 * t4097 + t4094 * t4157) * t4144 - t4363 * t4094 + t4097 * t4208;
t3948 = ((-t4096 * t4065 + t4093 * t4254) * t4141 + (-t4093 * t4370 - t4190) * t4133) * t4117 + (-(t4093 * t4297 - 0.2e1 * t4096 * t4322) * t4359 + (-t4017 * t4093 - t4096 * t4259) * t4141 - (t4096 * t4071 + t4143 * t4191) * t4322) * t4128 + t4093 * t4194 + (t4062 * t4096 + t4093 * t4158) * t4141 - t4364 * t4093 + t4373 * t4224;
t1 = [0, -t3973 * t4335 - t3975 * t4333 - t3977 * t4331, t3973 * t4334 + t3975 * t4332 + t3977 * t4330, 0, 0, 0, 0, 0, (t3953 * t4340 + t3977 * t3995) * t4007 + (t3952 * t4342 + t3975 * t3994) * t4006 + (t3951 * t4344 + t3973 * t3993) * t4005, (t3953 * t4339 + t3977 * t3998) * t4007 + (t3952 * t4341 + t3975 * t3997) * t4006 + (t3951 * t4343 + t3973 * t3996) * t4005, 0, 0, 0, 0, 0, (t3953 * t3986 + t3977 * t3983) * t4007 + (t3952 * t3985 + t3975 * t3981) * t4006 + (t3951 * t3984 + t3973 * t3979) * t4005 + (t3955 * t4233 + t3957 * t4237 + t3959 * t4232) * t4152, (-t3953 * t4229 + t3977 * t3982) * t4007 + (-t3952 * t4230 + t3975 * t3980) * t4006 + (-t3951 * t4231 + t3973 * t3978) * t4005 + (t3955 * t4236 + t3957 * t4235 + t3959 * t4234) * t4152, -g(1); 0, -t3972 * t4335 - t3974 * t4333 - t3976 * t4331, t3972 * t4334 + t3974 * t4332 + t3976 * t4330, 0, 0, 0, 0, 0, (t3950 * t4340 + t3976 * t3995) * t4007 + (t3949 * t4342 + t3974 * t3994) * t4006 + (t3948 * t4344 + t3972 * t3993) * t4005, (t3950 * t4339 + t3976 * t3998) * t4007 + (t3949 * t4341 + t3974 * t3997) * t4006 + (t3948 * t4343 + t3972 * t3996) * t4005, 0, 0, 0, 0, 0, (t3950 * t3986 + t3976 * t3983) * t4007 + (t3949 * t3985 + t3974 * t3981) * t4006 + (t3948 * t3984 + t3972 * t3979) * t4005 + (t3954 * t4233 + t3956 * t4237 + t3958 * t4232) * t4152, (-t3950 * t4229 + t3976 * t3982) * t4007 + (-t3949 * t4230 + t3974 * t3980) * t4006 + (-t3948 * t4231 + t3972 * t3978) * t4005 + (t3954 * t4236 + t3956 * t4235 + t3958 * t4234) * t4152, -g(2); 0, -t4002 * t4335 - t4003 * t4333 - t4004 * t4331, t4002 * t4334 + t4003 * t4332 + t4004 * t4330, 0, 0, 0, 0, 0, (t3962 * t4340 + t3995 * t4004) * t4007 + (t3961 * t4342 + t3994 * t4003) * t4006 + (t3960 * t4344 + t3993 * t4002) * t4005, (t3962 * t4339 + t3998 * t4004) * t4007 + (t3961 * t4341 + t3997 * t4003) * t4006 + (t3960 * t4343 + t3996 * t4002) * t4005, 0, 0, 0, 0, 0, (t3962 * t3986 + t3983 * t4004) * t4007 + (t3961 * t3985 + t3981 * t4003) * t4006 + (t3960 * t3984 + t3979 * t4002) * t4005 + (-t3963 * t4233 - t3964 * t4237 - t3965 * t4232) * t4313, (-t3962 * t4229 + t4004 * t3982) * t4007 + (-t3961 * t4230 + t4003 * t3980) * t4006 + (-t3960 * t4231 + t4002 * t3978) * t4005 + (-t3963 * t4236 - t3964 * t4235 - t3965 * t4234) * t4313, -g(3);];
tau_reg  = t1;
