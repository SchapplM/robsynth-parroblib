% Calculate Gravitation load for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [3x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:19:12
% EndTime: 2020-08-06 22:19:21
% DurationCPUTime: 8.72s
% Computational Cost: add. (1518->432), mult. (3810->823), div. (54->10), fcn. (2652->26), ass. (0->294)
t3216 = legFrame(3,2);
t3183 = sin(t3216);
t3186 = cos(t3216);
t3134 = g(1) * t3186 - g(2) * t3183;
t3221 = sin(qJ(1,3));
t3230 = cos(qJ(1,3));
t3116 = g(3) * t3230 + t3134 * t3221;
t3220 = sin(qJ(2,3));
t3229 = cos(qJ(2,3));
t3119 = g(3) * t3221 - t3134 * t3230;
t3131 = g(1) * t3183 + g(2) * t3186;
t3214 = sin(pkin(3));
t3215 = cos(pkin(3));
t3431 = -t3119 * t3215 + t3131 * t3214;
t3243 = t3229 * t3116 + t3431 * t3220;
t3217 = legFrame(2,2);
t3184 = sin(t3217);
t3187 = cos(t3217);
t3135 = g(1) * t3187 - g(2) * t3184;
t3224 = sin(qJ(1,2));
t3233 = cos(qJ(1,2));
t3117 = g(3) * t3233 + t3135 * t3224;
t3223 = sin(qJ(2,2));
t3232 = cos(qJ(2,2));
t3120 = g(3) * t3224 - t3135 * t3233;
t3132 = g(1) * t3184 + g(2) * t3187;
t3432 = -t3120 * t3215 + t3132 * t3214;
t3242 = t3232 * t3117 + t3432 * t3223;
t3218 = legFrame(1,2);
t3185 = sin(t3218);
t3188 = cos(t3218);
t3136 = g(1) * t3188 - g(2) * t3185;
t3227 = sin(qJ(1,1));
t3236 = cos(qJ(1,1));
t3118 = g(3) * t3236 + t3136 * t3227;
t3226 = sin(qJ(2,1));
t3235 = cos(qJ(2,1));
t3121 = g(3) * t3227 - t3136 * t3236;
t3133 = g(1) * t3185 + g(2) * t3188;
t3433 = -t3121 * t3215 + t3133 * t3214;
t3241 = t3235 * t3118 + t3433 * t3226;
t3443 = m(1) * rSges(1,1) + (m(2) + m(3)) * pkin(1);
t3202 = t3215 ^ 2;
t3419 = t3202 - 0.1e1;
t3189 = t3220 * pkin(6);
t3442 = t3189 + pkin(1);
t3190 = t3223 * pkin(6);
t3441 = t3190 + pkin(1);
t3191 = t3226 * pkin(6);
t3440 = t3191 + pkin(1);
t3219 = sin(qJ(3,3));
t3158 = pkin(5) * t3219 + pkin(2);
t3228 = cos(qJ(3,3));
t3205 = t3228 ^ 2;
t3415 = pkin(2) * t3205;
t3297 = -t3158 + 0.2e1 * t3415;
t3439 = t3230 * t3297;
t3222 = sin(qJ(3,2));
t3162 = pkin(5) * t3222 + pkin(2);
t3231 = cos(qJ(3,2));
t3208 = t3231 ^ 2;
t3414 = pkin(2) * t3208;
t3296 = -t3162 + 0.2e1 * t3414;
t3438 = t3233 * t3296;
t3225 = sin(qJ(3,1));
t3166 = pkin(5) * t3225 + pkin(2);
t3234 = cos(qJ(3,1));
t3211 = t3234 ^ 2;
t3413 = pkin(2) * t3211;
t3295 = -t3166 + 0.2e1 * t3413;
t3437 = t3236 * t3295;
t3356 = t3234 * t3235;
t3436 = -pkin(2) * t3356 - t3191;
t3358 = t3231 * t3232;
t3435 = -pkin(2) * t3358 - t3190;
t3360 = t3228 * t3229;
t3434 = -pkin(2) * t3360 - t3189;
t3430 = t3119 * t3214 + t3131 * t3215;
t3429 = t3120 * t3214 + t3132 * t3215;
t3428 = t3121 * t3214 + t3133 * t3215;
t3403 = pkin(6) * t3214;
t3291 = (t3229 + 0.1e1) * (t3229 - 0.1e1) * t3403;
t3408 = pkin(2) * t3230;
t3330 = t3220 * t3408;
t3377 = t3214 * t3221;
t3427 = (-(pkin(1) * t3377 - pkin(5) * t3230) * t3220 + t3221 * t3291) * t3219 + t3330;
t3290 = (t3232 + 0.1e1) * (t3232 - 0.1e1) * t3403;
t3406 = pkin(2) * t3233;
t3329 = t3223 * t3406;
t3375 = t3214 * t3224;
t3426 = (-(pkin(1) * t3375 - pkin(5) * t3233) * t3223 + t3224 * t3290) * t3222 + t3329;
t3289 = (t3235 + 0.1e1) * (t3235 - 0.1e1) * t3403;
t3404 = pkin(2) * t3236;
t3328 = t3226 * t3404;
t3373 = t3214 * t3227;
t3425 = (-(pkin(1) * t3373 - pkin(5) * t3236) * t3226 + t3227 * t3289) * t3225 + t3328;
t3423 = m(1) * rSges(1,2);
t3422 = m(2) * rSges(2,1);
t3421 = m(3) * rSges(3,1);
t3420 = m(3) * rSges(3,2);
t3418 = m(3) / pkin(2);
t3417 = pkin(1) * t3214;
t3416 = pkin(1) * t3215;
t3412 = pkin(2) * t3219;
t3411 = pkin(2) * t3222;
t3410 = pkin(2) * t3225;
t3409 = pkin(2) * t3228;
t3407 = pkin(2) * t3231;
t3405 = pkin(2) * t3234;
t3402 = pkin(6) * t3215;
t3401 = pkin(6) * t3229;
t3400 = pkin(6) * t3232;
t3399 = pkin(6) * t3235;
t3398 = -0.2e1 * pkin(2) * pkin(6);
t3177 = pkin(1) * t3412;
t3347 = t3220 * t3409;
t3140 = -t3347 + t3401;
t3385 = t3140 * t3215;
t3092 = 0.1e1 / (pkin(1) * t3385 + (t3434 * pkin(5) + t3177) * t3214);
t3203 = g(3) * t3423;
t3125 = -t3219 * t3420 + t3228 * t3421 + t3422;
t3156 = m(2) * rSges(2,2) - rSges(3,3) * m(3);
t3252 = t3125 * t3229 - t3156 * t3220;
t3353 = m(2) * (rSges(2,3) + pkin(5)) + pkin(5) * m(3);
t3258 = (t3125 * t3220 + t3156 * t3229) * t3215 - ((rSges(3,1) * t3219 + rSges(3,2) * t3228) * m(3) + t3353) * t3214;
t3354 = t3443 * g(3);
t3397 = (t3203 * t3230 + t3354 * t3221 + (t3252 * t3221 + t3258 * t3230) * g(3) + ((-t3252 - t3443) * t3230 + (t3258 + t3423) * t3221) * t3134) * t3092;
t3178 = pkin(1) * t3411;
t3345 = t3223 * t3407;
t3141 = -t3345 + t3400;
t3384 = t3141 * t3215;
t3093 = 0.1e1 / (pkin(1) * t3384 + (t3435 * pkin(5) + t3178) * t3214);
t3126 = -t3222 * t3420 + t3231 * t3421 + t3422;
t3251 = t3126 * t3232 - t3156 * t3223;
t3257 = (t3126 * t3223 + t3156 * t3232) * t3215 - ((rSges(3,1) * t3222 + rSges(3,2) * t3231) * m(3) + t3353) * t3214;
t3396 = (t3203 * t3233 + t3354 * t3224 + (t3251 * t3224 + t3257 * t3233) * g(3) + ((-t3251 - t3443) * t3233 + (t3257 + t3423) * t3224) * t3135) * t3093;
t3179 = pkin(1) * t3410;
t3343 = t3226 * t3405;
t3142 = -t3343 + t3399;
t3383 = t3142 * t3215;
t3094 = 0.1e1 / (pkin(1) * t3383 + (t3436 * pkin(5) + t3179) * t3214);
t3127 = -t3225 * t3420 + t3234 * t3421 + t3422;
t3250 = t3127 * t3235 - t3156 * t3226;
t3256 = (t3127 * t3226 + t3156 * t3235) * t3215 - ((rSges(3,1) * t3225 + rSges(3,2) * t3234) * m(3) + t3353) * t3214;
t3395 = (t3203 * t3236 + t3354 * t3227 + (t3250 * t3227 + t3256 * t3236) * g(3) + ((-t3250 - t3443) * t3236 + (t3256 + t3423) * t3227) * t3136) * t3094;
t3239 = pkin(2) ^ 2;
t3382 = t3205 * t3239;
t3381 = t3208 * t3239;
t3380 = t3211 * t3239;
t3379 = t3214 * t3215;
t3378 = t3214 * t3220;
t3376 = t3214 * t3223;
t3374 = t3214 * t3226;
t3372 = t3215 * t3230;
t3371 = t3215 * t3233;
t3370 = t3215 * t3236;
t3369 = t3219 * t3229;
t3368 = t3219 * t3230;
t3367 = t3221 * t3229;
t3366 = t3222 * t3232;
t3365 = t3222 * t3233;
t3364 = t3224 * t3232;
t3363 = t3225 * t3235;
t3362 = t3225 * t3236;
t3361 = t3227 * t3235;
t3352 = pkin(2) * pkin(5) * t3214;
t3351 = t3215 * t3412;
t3350 = t3215 * t3411;
t3349 = t3215 * t3410;
t3348 = pkin(2) * t3368;
t3346 = pkin(2) * t3365;
t3344 = pkin(2) * t3362;
t3339 = t3214 * t3401;
t3338 = t3214 * t3400;
t3337 = t3214 * t3399;
t3336 = pkin(6) * t3369;
t3335 = pkin(6) * t3366;
t3334 = pkin(6) * t3363;
t3333 = t3230 * t3401;
t3332 = t3233 * t3400;
t3331 = t3236 * t3399;
t3327 = 0.2e1 * pkin(2) * t3402;
t3326 = t3228 * t3398;
t3325 = t3231 * t3398;
t3324 = t3234 * t3398;
t3323 = t3419 * pkin(6);
t3206 = 0.1e1 / t3228;
t3318 = (t3243 * t3156 + (t3116 * t3220 - t3229 * t3431) * t3125) * t3092 * t3206;
t3209 = 0.1e1 / t3231;
t3317 = (t3242 * t3156 + (t3117 * t3223 - t3232 * t3432) * t3126) * t3093 * t3209;
t3212 = 0.1e1 / t3234;
t3316 = (t3241 * t3156 + (t3118 * t3226 - t3235 * t3433) * t3127) * t3094 * t3212;
t3159 = pkin(5) + t3412;
t3315 = t3159 * t3379;
t3314 = t3159 * t3378;
t3163 = pkin(5) + t3411;
t3313 = t3163 * t3379;
t3312 = t3163 * t3376;
t3167 = pkin(5) + t3410;
t3311 = t3167 * t3379;
t3310 = t3167 * t3374;
t3309 = t3214 * t3372;
t3308 = t3214 * t3371;
t3307 = t3214 * t3370;
t3306 = t3219 * t3378;
t3305 = t3222 * t3376;
t3304 = t3225 * t3374;
t3303 = t3220 * t3382;
t3302 = t3223 * t3381;
t3301 = t3226 * t3380;
t3300 = t3442 * t3369;
t3299 = t3441 * t3366;
t3298 = t3440 * t3363;
t3238 = pkin(6) ^ 2;
t3294 = -t3238 + t3382;
t3293 = -t3238 + t3381;
t3292 = -t3238 + t3380;
t3288 = t3219 * t3333;
t3287 = t3222 * t3332;
t3286 = t3225 * t3331;
t3285 = t3205 * t3330;
t3284 = t3208 * t3329;
t3283 = t3211 * t3328;
t3207 = t3229 ^ 2;
t3149 = (t3207 - 0.2e1) * t3412 - pkin(5);
t3210 = t3232 ^ 2;
t3150 = (t3210 - 0.2e1) * t3411 - pkin(5);
t3213 = t3235 ^ 2;
t3151 = (t3213 - 0.2e1) * t3410 - pkin(5);
t3282 = t3419 * t3230 * t3159;
t3281 = t3419 * t3233 * t3163;
t3280 = t3419 * t3236 * t3167;
t3279 = t3215 * t3314;
t3278 = t3215 * t3312;
t3277 = t3215 * t3310;
t3276 = t3183 * t3309;
t3275 = t3184 * t3308;
t3274 = t3185 * t3307;
t3273 = t3186 * t3309;
t3272 = t3187 * t3308;
t3271 = t3188 * t3307;
t3173 = pkin(1) * t3402;
t3270 = ((-t3430 * rSges(3,1) + t3243 * rSges(3,2)) * t3228 + (t3243 * rSges(3,1) + t3430 * rSges(3,2)) * t3219) / ((-t3228 * t3352 + t3173) * t3229 - t3347 * t3416 + t3214 * (-pkin(5) * t3189 + t3177)) * t3206 * t3418;
t3269 = ((-t3429 * rSges(3,1) + t3242 * rSges(3,2)) * t3231 + (t3242 * rSges(3,1) + t3429 * rSges(3,2)) * t3222) / ((-t3231 * t3352 + t3173) * t3232 - t3345 * t3416 + t3214 * (-pkin(5) * t3190 + t3178)) * t3209 * t3418;
t3268 = ((-t3428 * rSges(3,1) + t3241 * rSges(3,2)) * t3234 + (t3241 * rSges(3,1) + t3428 * rSges(3,2)) * t3225) / ((-t3234 * t3352 + t3173) * t3235 - t3343 * t3416 + t3214 * (-pkin(5) * t3191 + t3179)) * t3212 * t3418;
t3267 = pkin(2) * t3229 * t3306;
t3266 = pkin(2) * t3232 * t3305;
t3265 = pkin(2) * t3235 * t3304;
t3264 = t3309 * t3189;
t3263 = t3308 * t3190;
t3262 = t3307 * t3191;
t3261 = t3294 * t3221;
t3260 = t3293 * t3224;
t3259 = t3292 * t3227;
t3249 = t3221 * t3267;
t3248 = t3224 * t3266;
t3247 = t3227 * t3265;
t3194 = pkin(1) * t3226;
t3193 = pkin(1) * t3223;
t3192 = pkin(1) * t3220;
t3172 = t3194 + pkin(6);
t3171 = t3193 + pkin(6);
t3170 = t3192 + pkin(6);
t3168 = 0.2e1 * t3191 + pkin(1);
t3164 = 0.2e1 * t3190 + pkin(1);
t3160 = 0.2e1 * t3189 + pkin(1);
t3154 = t3194 - t3323;
t3153 = t3193 - t3323;
t3152 = t3192 - t3323;
t3148 = (t3213 - 0.1e1) * t3410 - pkin(5);
t3147 = (t3210 - 0.1e1) * t3411 - pkin(5);
t3146 = (t3207 - 0.1e1) * t3412 - pkin(5);
t3130 = -t3202 * t3191 + t3440;
t3129 = -t3202 * t3190 + t3441;
t3128 = -t3202 * t3189 + t3442;
t3115 = t3185 * t3202 - t3185 - t3271;
t3114 = t3188 * t3202 - t3188 + t3274;
t3113 = t3184 * t3202 - t3184 - t3272;
t3112 = t3187 * t3202 - t3187 + t3275;
t3111 = t3183 * t3202 - t3183 - t3273;
t3110 = t3186 * t3202 - t3186 + t3276;
t3106 = t3151 * t3236 * t3214 + t3227 * t3440;
t3105 = t3150 * t3233 * t3214 + t3224 * t3441;
t3104 = t3149 * t3230 * t3214 + t3221 * t3442;
t3103 = t3142 * t3370 + t3227 * t3436;
t3102 = t3141 * t3371 + t3224 * t3435;
t3101 = t3140 * t3372 + t3221 * t3434;
t3100 = t3168 * t3373 + t3280;
t3099 = t3164 * t3375 + t3281;
t3098 = t3160 * t3377 + t3282;
t3097 = t3172 * t3373 + t3226 * t3280;
t3096 = t3171 * t3375 + t3223 * t3281;
t3095 = t3170 * t3377 + t3220 * t3282;
t1 = [((t3142 * t3185 + t3188 * t3344) * t3214 + t3103 * t3188 - t3185 * t3349) * t3395 + (((-t3151 * t3185 - t3188 * t3331) * t3234 + (-t3185 * t3334 + t3188 * t3437) * t3226) * t3202 + ((0.2e1 * t3185 * t3374 + t3188 * t3361) * t3413 + (t3106 * t3188 - t3185 * t3337) * t3234 + (-t3166 * t3185 + t3188 * t3286) * t3374) * t3215 - t3188 * t3283 + (t3148 * t3185 - t3188 * t3247) * t3234 + t3425 * t3188 + t3185 * t3298) * t3316 + ((-t3214 * t3188 * t3259 + t3115 * t3324) * t3213 + (t3115 * t3301 - (t3100 * t3188 + t3185 * t3311) * t3405 + pkin(6) * (t3130 * t3185 + t3188 * t3262)) * t3235 - (pkin(6) * t3271 + t3154 * t3185) * t3405 - pkin(6) * (t3097 * t3188 + t3185 * t3277)) * t3268 + ((t3141 * t3184 + t3187 * t3346) * t3214 + t3102 * t3187 - t3184 * t3350) * t3396 + (((-t3150 * t3184 - t3187 * t3332) * t3231 + (-t3184 * t3335 + t3187 * t3438) * t3223) * t3202 + ((0.2e1 * t3184 * t3376 + t3187 * t3364) * t3414 + (t3105 * t3187 - t3184 * t3338) * t3231 + (-t3162 * t3184 + t3187 * t3287) * t3376) * t3215 - t3187 * t3284 + (t3147 * t3184 - t3187 * t3248) * t3231 + t3426 * t3187 + t3184 * t3299) * t3317 + ((-t3214 * t3187 * t3260 + t3113 * t3325) * t3210 + (t3113 * t3302 - (t3099 * t3187 + t3184 * t3313) * t3407 + pkin(6) * (t3129 * t3184 + t3187 * t3263)) * t3232 - (pkin(6) * t3272 + t3153 * t3184) * t3407 - pkin(6) * (t3096 * t3187 + t3184 * t3278)) * t3269 + ((t3140 * t3183 + t3186 * t3348) * t3214 + t3101 * t3186 - t3183 * t3351) * t3397 + (((-t3149 * t3183 - t3186 * t3333) * t3228 + (-t3183 * t3336 + t3186 * t3439) * t3220) * t3202 + ((0.2e1 * t3183 * t3378 + t3186 * t3367) * t3415 + (t3104 * t3186 - t3183 * t3339) * t3228 + (-t3158 * t3183 + t3186 * t3288) * t3378) * t3215 - t3186 * t3285 + (t3146 * t3183 - t3186 * t3249) * t3228 + t3427 * t3186 + t3183 * t3300) * t3318 + ((-t3214 * t3186 * t3261 + t3111 * t3326) * t3207 + (t3111 * t3303 - (t3098 * t3186 + t3183 * t3315) * t3409 + pkin(6) * (t3128 * t3183 + t3186 * t3264)) * t3229 - (pkin(6) * t3273 + t3152 * t3183) * t3409 - pkin(6) * (t3095 * t3186 + t3183 * t3279)) * t3270 - m(4) * g(1); ((t3142 * t3188 - t3185 * t3344) * t3214 - t3103 * t3185 - t3188 * t3349) * t3395 + (((-t3151 * t3188 + t3185 * t3331) * t3234 + (-t3185 * t3437 - t3188 * t3334) * t3226) * t3202 + (-(t3185 * t3361 - 0.2e1 * t3188 * t3374) * t3413 + (-t3106 * t3185 - t3188 * t3337) * t3234 - (t3166 * t3188 + t3185 * t3286) * t3374) * t3215 + t3185 * t3283 + (t3148 * t3188 + t3185 * t3247) * t3234 - t3425 * t3185 + t3188 * t3298) * t3316 + ((t3292 * t3185 * t3373 + t3114 * t3324) * t3213 + (t3114 * t3301 + (t3100 * t3185 - t3188 * t3311) * t3405 + (t3130 * t3188 - t3185 * t3262) * pkin(6)) * t3235 - (-pkin(6) * t3274 + t3154 * t3188) * t3405 + pkin(6) * (t3097 * t3185 - t3188 * t3277)) * t3268 + ((t3141 * t3187 - t3184 * t3346) * t3214 - t3102 * t3184 - t3187 * t3350) * t3396 + (((-t3150 * t3187 + t3184 * t3332) * t3231 + (-t3184 * t3438 - t3187 * t3335) * t3223) * t3202 + (-(t3184 * t3364 - 0.2e1 * t3187 * t3376) * t3414 + (-t3105 * t3184 - t3187 * t3338) * t3231 - (t3162 * t3187 + t3184 * t3287) * t3376) * t3215 + t3184 * t3284 + (t3147 * t3187 + t3184 * t3248) * t3231 - t3426 * t3184 + t3187 * t3299) * t3317 + ((t3293 * t3184 * t3375 + t3112 * t3325) * t3210 + (t3112 * t3302 + (t3099 * t3184 - t3187 * t3313) * t3407 + (t3129 * t3187 - t3184 * t3263) * pkin(6)) * t3232 - (-pkin(6) * t3275 + t3153 * t3187) * t3407 + pkin(6) * (t3096 * t3184 - t3187 * t3278)) * t3269 + ((t3140 * t3186 - t3183 * t3348) * t3214 - t3101 * t3183 - t3186 * t3351) * t3397 + (((-t3149 * t3186 + t3183 * t3333) * t3228 + (-t3183 * t3439 - t3186 * t3336) * t3220) * t3202 + (-(t3183 * t3367 - 0.2e1 * t3186 * t3378) * t3415 + (-t3104 * t3183 - t3186 * t3339) * t3228 - (t3158 * t3186 + t3183 * t3288) * t3378) * t3215 + t3183 * t3285 + (t3146 * t3186 + t3183 * t3249) * t3228 - t3427 * t3183 + t3186 * t3300) * t3318 + ((t3294 * t3183 * t3377 + t3110 * t3326) * t3207 + (t3110 * t3303 + (t3098 * t3183 - t3186 * t3315) * t3409 + (t3128 * t3186 - t3183 * t3264) * pkin(6)) * t3229 - (-pkin(6) * t3276 + t3152 * t3186) * t3409 + pkin(6) * (t3095 * t3183 - t3186 * t3279)) * t3270 - m(4) * g(2); (t3436 * t3236 + (-t3214 * t3410 - t3383) * t3227) * t3395 + (t3227 * (pkin(6) * t3356 - t3295 * t3226) * t3202 + ((-t3151 * t3373 + t3236 * t3440) * t3234 + (-t3227 * pkin(6) * t3304 + t3211 * t3404) * t3235) * t3215 + t3226 * t3227 * t3413 - t3234 * t3236 * t3265 + (-t3166 * t3227 - t3362 * t3417) * t3226 + t3289 * t3362) * t3316 - ((t3227 * t3234 * t3327 + t3292 * t3236) * t3213 + ((t3167 * t3373 + t3168 * t3236) * t3405 - t3226 * t3215 * t3259) * t3235 + (t3172 * t3236 + (-t3215 * t3405 + t3310) * t3227) * pkin(6)) * t3214 * t3268 + (t3435 * t3233 + (-t3214 * t3411 - t3384) * t3224) * t3396 + (t3224 * (pkin(6) * t3358 - t3296 * t3223) * t3202 + ((-t3150 * t3375 + t3233 * t3441) * t3231 + (-t3224 * pkin(6) * t3305 + t3208 * t3406) * t3232) * t3215 + t3223 * t3224 * t3414 - t3231 * t3233 * t3266 + (-t3162 * t3224 - t3365 * t3417) * t3223 + t3290 * t3365) * t3317 - ((t3224 * t3231 * t3327 + t3293 * t3233) * t3210 + ((t3163 * t3375 + t3164 * t3233) * t3407 - t3223 * t3215 * t3260) * t3232 + (t3171 * t3233 + (-t3215 * t3407 + t3312) * t3224) * pkin(6)) * t3214 * t3269 + (t3434 * t3230 + (-t3214 * t3412 - t3385) * t3221) * t3397 + (t3221 * (pkin(6) * t3360 - t3297 * t3220) * t3202 + ((-t3149 * t3377 + t3230 * t3442) * t3228 + (-t3221 * pkin(6) * t3306 + t3205 * t3408) * t3229) * t3215 + t3220 * t3221 * t3415 - t3228 * t3230 * t3267 + (-t3158 * t3221 - t3368 * t3417) * t3220 + t3291 * t3368) * t3318 - ((t3221 * t3228 * t3327 + t3294 * t3230) * t3207 + ((t3159 * t3377 + t3160 * t3230) * t3409 - t3220 * t3215 * t3261) * t3229 + (t3170 * t3230 + (-t3215 * t3409 + t3314) * t3221) * pkin(6)) * t3214 * t3270 - m(4) * g(3);];
taugX  = t1;
