% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR10V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:42:16
% EndTime: 2020-08-06 22:43:23
% DurationCPUTime: 70.68s
% Computational Cost: add. (63129->1388), mult. (187353->2533), div. (4860->13), fcn. (159318->26), ass. (0->856)
t6305 = cos(pkin(3));
t6291 = t6305 ^ 2;
t6814 = t6291 - 0.1e1;
t6310 = sin(qJ(2,3));
t6278 = t6310 * pkin(6);
t6834 = t6278 + pkin(1);
t6313 = sin(qJ(2,2));
t6279 = t6313 * pkin(6);
t6833 = t6279 + pkin(1);
t6316 = sin(qJ(2,1));
t6280 = t6316 * pkin(6);
t6832 = t6280 + pkin(1);
t6318 = cos(qJ(3,3));
t6717 = t6310 * t6318;
t6319 = cos(qJ(2,3));
t6794 = pkin(6) * t6319;
t6234 = -pkin(2) * t6717 + t6794;
t6311 = sin(qJ(1,3));
t6320 = cos(qJ(1,3));
t6726 = t6305 * t6320;
t6703 = t6318 * t6319;
t6820 = -pkin(2) * t6703 - t6278;
t6198 = t6234 * t6726 + t6311 * t6820;
t6306 = legFrame(3,2);
t6272 = sin(t6306);
t6275 = cos(t6306);
t6304 = sin(pkin(3));
t6309 = sin(qJ(3,3));
t6718 = t6309 * t6320;
t6670 = pkin(2) * t6718;
t6733 = t6305 * t6309;
t6673 = pkin(2) * t6733;
t6168 = (t6234 * t6275 - t6272 * t6670) * t6304 - t6198 * t6272 - t6275 * t6673;
t6169 = (t6234 * t6272 + t6275 * t6670) * t6304 + t6198 * t6275 - t6272 * t6673;
t6831 = t6168 * t6169;
t6321 = cos(qJ(3,2));
t6711 = t6313 * t6321;
t6322 = cos(qJ(2,2));
t6793 = pkin(6) * t6322;
t6235 = -pkin(2) * t6711 + t6793;
t6314 = sin(qJ(1,2));
t6323 = cos(qJ(1,2));
t6724 = t6305 * t6323;
t6702 = t6321 * t6322;
t6821 = -pkin(2) * t6702 - t6279;
t6199 = t6235 * t6724 + t6314 * t6821;
t6307 = legFrame(2,2);
t6273 = sin(t6307);
t6276 = cos(t6307);
t6312 = sin(qJ(3,2));
t6712 = t6312 * t6323;
t6669 = pkin(2) * t6712;
t6731 = t6305 * t6312;
t6672 = pkin(2) * t6731;
t6170 = (t6235 * t6276 - t6273 * t6669) * t6304 - t6199 * t6273 - t6276 * t6672;
t6171 = (t6235 * t6273 + t6276 * t6669) * t6304 + t6199 * t6276 - t6273 * t6672;
t6830 = t6170 * t6171;
t6324 = cos(qJ(3,1));
t6705 = t6316 * t6324;
t6325 = cos(qJ(2,1));
t6792 = pkin(6) * t6325;
t6236 = -pkin(2) * t6705 + t6792;
t6317 = sin(qJ(1,1));
t6326 = cos(qJ(1,1));
t6722 = t6305 * t6326;
t6701 = t6324 * t6325;
t6822 = -pkin(2) * t6701 - t6280;
t6200 = t6236 * t6722 + t6317 * t6822;
t6308 = legFrame(1,2);
t6274 = sin(t6308);
t6277 = cos(t6308);
t6315 = sin(qJ(3,1));
t6706 = t6315 * t6326;
t6668 = pkin(2) * t6706;
t6729 = t6305 * t6315;
t6671 = pkin(2) * t6729;
t6172 = (t6236 * t6277 - t6274 * t6668) * t6304 - t6200 * t6274 - t6277 * t6671;
t6173 = (t6236 * t6274 + t6277 * t6668) * t6304 + t6200 * t6277 - t6274 * t6671;
t6829 = t6172 * t6173;
t6805 = pkin(2) * t6309;
t6266 = pkin(1) * t6805;
t6759 = t6234 * t6305;
t6192 = pkin(1) * t6759 + (t6820 * pkin(5) + t6266) * t6304;
t6183 = 0.1e1 / t6192;
t6776 = t6183 * t6305;
t6804 = pkin(2) * t6312;
t6267 = pkin(1) * t6804;
t6758 = t6235 * t6305;
t6193 = pkin(1) * t6758 + (t6821 * pkin(5) + t6267) * t6304;
t6185 = 0.1e1 / t6193;
t6770 = t6185 * t6305;
t6803 = pkin(2) * t6315;
t6268 = pkin(1) * t6803;
t6757 = t6236 * t6305;
t6194 = pkin(1) * t6757 + (t6822 * pkin(5) + t6268) * t6304;
t6187 = 0.1e1 / t6194;
t6764 = t6187 * t6305;
t6296 = 0.1e1 / t6318;
t6828 = t6296 * t6304;
t6299 = 0.1e1 / t6321;
t6827 = t6299 * t6304;
t6302 = 0.1e1 / t6324;
t6826 = t6302 * t6304;
t6250 = pkin(5) * t6309 + pkin(2);
t6295 = t6318 ^ 2;
t6808 = pkin(2) * t6295;
t6524 = -t6250 + 0.2e1 * t6808;
t6825 = t6320 * t6524;
t6254 = pkin(5) * t6312 + pkin(2);
t6298 = t6321 ^ 2;
t6807 = pkin(2) * t6298;
t6523 = -t6254 + 0.2e1 * t6807;
t6824 = t6323 * t6523;
t6258 = pkin(5) * t6315 + pkin(2);
t6301 = t6324 ^ 2;
t6806 = pkin(2) * t6301;
t6522 = -t6258 + 0.2e1 * t6806;
t6823 = t6326 * t6522;
t6796 = pkin(6) * t6304;
t6512 = (t6319 + 0.1e1) * (t6319 - 0.1e1) * t6796;
t6801 = pkin(2) * t6320;
t6649 = t6310 * t6801;
t6744 = t6304 * t6311;
t6819 = (-(pkin(1) * t6744 - pkin(5) * t6320) * t6310 + t6311 * t6512) * t6309 + t6649;
t6511 = (t6322 + 0.1e1) * (t6322 - 0.1e1) * t6796;
t6799 = pkin(2) * t6323;
t6647 = t6313 * t6799;
t6741 = t6304 * t6314;
t6818 = (-(pkin(1) * t6741 - pkin(5) * t6323) * t6313 + t6314 * t6511) * t6312 + t6647;
t6510 = (t6325 + 0.1e1) * (t6325 - 0.1e1) * t6796;
t6797 = pkin(2) * t6326;
t6648 = t6316 * t6797;
t6738 = t6304 * t6317;
t6817 = (-(pkin(1) * t6738 - pkin(5) * t6326) * t6316 + t6317 * t6510) * t6315 + t6648;
t6816 = 0.2e1 * pkin(1);
t6815 = 0.2e1 * t6291;
t6813 = t6815 - 0.2e1;
t6812 = pkin(1) * t6304;
t6281 = pkin(1) * t6310;
t6282 = pkin(1) * t6313;
t6283 = pkin(1) * t6316;
t6811 = pkin(1) * t6319;
t6810 = pkin(1) * t6322;
t6809 = pkin(1) * t6325;
t6802 = pkin(2) * t6318;
t6800 = pkin(2) * t6321;
t6798 = pkin(2) * t6324;
t6795 = pkin(6) * t6305;
t6791 = -0.2e1 * pkin(2) * pkin(6);
t6290 = t6304 ^ 2;
t6790 = MDP(4) * t6290;
t6789 = MDP(6) * t6304;
t6788 = MDP(7) * t6304;
t6787 = MDP(15) * t6304;
t6147 = t6168 * t6183;
t6148 = t6169 * t6183;
t6149 = t6170 * t6185;
t6150 = t6171 * t6185;
t6151 = t6172 * t6187;
t6152 = t6173 * t6187;
t6265 = pkin(1) * t6795;
t6732 = t6305 * t6310;
t6676 = pkin(1) * t6732;
t6509 = t6318 * t6676;
t6700 = pkin(2) * pkin(5) * t6304;
t6177 = 0.1e1 / ((-t6318 * t6700 + t6265) * t6319 - pkin(2) * t6509 + t6304 * (-pkin(5) * t6278 + t6266));
t6786 = t6177 * t6296;
t6329 = 0.1e1 / pkin(2);
t6785 = t6177 * t6329;
t6730 = t6305 * t6313;
t6675 = pkin(1) * t6730;
t6506 = t6321 * t6675;
t6178 = 0.1e1 / ((-t6321 * t6700 + t6265) * t6322 - pkin(2) * t6506 + t6304 * (-pkin(5) * t6279 + t6267));
t6784 = t6178 * t6299;
t6783 = t6178 * t6329;
t6728 = t6305 * t6316;
t6674 = pkin(1) * t6728;
t6503 = t6324 * t6674;
t6179 = 0.1e1 / ((-t6324 * t6700 + t6265) * t6325 - pkin(2) * t6503 + t6304 * (-pkin(5) * t6280 + t6268));
t6782 = t6179 * t6302;
t6781 = t6179 * t6329;
t6746 = t6304 * t6309;
t6180 = t6820 * t6320 + (-pkin(2) * t6746 - t6759) * t6311;
t6159 = t6180 * t6183;
t6184 = 0.1e1 / t6192 ^ 2;
t6780 = t6180 * t6184;
t6743 = t6304 * t6312;
t6181 = t6821 * t6323 + (-pkin(2) * t6743 - t6758) * t6314;
t6160 = t6181 * t6185;
t6186 = 0.1e1 / t6193 ^ 2;
t6779 = t6181 * t6186;
t6740 = t6304 * t6315;
t6182 = t6822 * t6326 + (-pkin(2) * t6740 - t6757) * t6317;
t6161 = t6182 * t6187;
t6188 = 0.1e1 / t6194 ^ 2;
t6778 = t6182 * t6188;
t6777 = t6183 * t6296;
t6775 = t6183 * t6319;
t6745 = t6304 * t6310;
t6661 = pkin(5) * t6745;
t6222 = t6305 * t6811 - t6661;
t6774 = t6184 * t6222;
t6292 = t6310 ^ 2;
t6773 = t6184 * t6292;
t6772 = t6184 * t6296;
t6771 = t6185 * t6299;
t6769 = t6185 * t6322;
t6742 = t6304 * t6313;
t6660 = pkin(5) * t6742;
t6223 = t6305 * t6810 - t6660;
t6768 = t6186 * t6223;
t6293 = t6313 ^ 2;
t6767 = t6186 * t6293;
t6766 = t6186 * t6299;
t6765 = t6187 * t6302;
t6763 = t6187 * t6325;
t6739 = t6304 * t6316;
t6659 = pkin(5) * t6739;
t6224 = -t6305 * t6809 + t6659;
t6762 = t6188 * t6224;
t6294 = t6316 ^ 2;
t6761 = t6188 * t6294;
t6760 = t6188 * t6302;
t6328 = pkin(2) ^ 2;
t6756 = t6295 * t6328;
t6755 = t6296 * t6305;
t6754 = t6296 * t6309;
t6753 = t6298 * t6328;
t6752 = t6299 * t6305;
t6751 = t6299 * t6312;
t6750 = t6301 * t6328;
t6749 = t6302 * t6305;
t6748 = t6302 * t6315;
t6747 = t6304 * t6305;
t6737 = t6304 * t6319;
t6736 = t6304 * t6322;
t6735 = t6304 * t6325;
t6734 = t6304 * t6329;
t6727 = t6305 * t6318;
t6725 = t6305 * t6321;
t6723 = t6305 * t6324;
t6721 = t6309 * t6310;
t6720 = t6309 * t6318;
t6719 = t6309 * t6319;
t6716 = t6311 * t6319;
t6715 = t6312 * t6313;
t6714 = t6312 * t6321;
t6713 = t6312 * t6322;
t6710 = t6314 * t6322;
t6709 = t6315 * t6316;
t6708 = t6315 * t6324;
t6707 = t6315 * t6325;
t6704 = t6317 * t6325;
t6699 = 0.2e1 * MDP(5) * t6290;
t6698 = 0.2e1 * t6147;
t6697 = 0.2e1 * t6148;
t6696 = 0.2e1 * t6149;
t6695 = 0.2e1 * t6150;
t6694 = 0.2e1 * t6151;
t6693 = 0.2e1 * t6152;
t6692 = 0.2e1 * t6159;
t6691 = 0.2e1 * t6160;
t6690 = 0.2e1 * t6161;
t6689 = t6183 * t6815;
t6688 = t6185 * t6815;
t6687 = t6187 * t6815;
t6686 = -0.2e1 * t6747;
t6685 = 0.2e1 * t6720;
t6684 = 0.2e1 * t6714;
t6683 = 0.2e1 * t6708;
t6682 = pkin(1) * t6785;
t6681 = pkin(1) * t6783;
t6680 = pkin(1) * t6781;
t6679 = t6296 * t6811;
t6678 = t6299 * t6810;
t6677 = t6302 * t6809;
t6664 = pkin(5) * t6183 * t6310;
t6663 = pkin(5) * t6185 * t6313;
t6662 = pkin(5) * t6187 * t6316;
t6658 = pkin(5) * t6737;
t6657 = pkin(5) * t6736;
t6656 = pkin(5) * t6735;
t6655 = pkin(6) * t6737;
t6654 = pkin(6) * t6736;
t6653 = pkin(6) * t6735;
t6652 = t6320 * t6794;
t6651 = t6323 * t6793;
t6650 = t6326 * t6792;
t6646 = 0.2e1 * pkin(2) * t6795;
t6645 = t6318 * t6791;
t6644 = t6321 * t6791;
t6643 = t6324 * t6791;
t6642 = t6814 * pkin(6);
t6297 = t6319 ^ 2;
t6269 = t6297 - 0.2e1;
t6243 = t6269 * t6805 - pkin(5);
t6201 = t6243 * t6320 * t6304 + t6311 * t6834;
t6240 = (t6297 - 0.1e1) * t6805 - pkin(5);
t6539 = t6304 * t6721;
t6425 = pkin(2) * t6319 * t6539;
t6377 = t6311 * t6425;
t6551 = t6275 * t6719;
t6507 = pkin(6) * t6551;
t6554 = t6272 * t6719;
t6508 = pkin(6) * t6554;
t6515 = t6295 * t6649;
t6105 = ((-t6243 * t6275 + t6272 * t6652) * t6318 + (-t6272 * t6825 - t6507) * t6310) * t6291 + (-(t6272 * t6716 - 0.2e1 * t6275 * t6745) * t6808 + (-t6201 * t6272 - t6275 * t6655) * t6318 - (t6250 * t6275 + t6320 * t6508) * t6745) * t6305 + t6272 * t6515 + (t6240 * t6275 + t6272 * t6377) * t6318 - t6819 * t6272 + t6834 * t6551;
t6093 = t6105 * t6777;
t6638 = t6105 * t6754;
t6300 = t6322 ^ 2;
t6270 = t6300 - 0.2e1;
t6244 = t6270 * t6804 - pkin(5);
t6202 = t6244 * t6323 * t6304 + t6314 * t6833;
t6241 = (t6300 - 0.1e1) * t6804 - pkin(5);
t6537 = t6304 * t6715;
t6424 = pkin(2) * t6322 * t6537;
t6376 = t6314 * t6424;
t6550 = t6276 * t6713;
t6504 = pkin(6) * t6550;
t6553 = t6273 * t6713;
t6505 = pkin(6) * t6553;
t6514 = t6298 * t6647;
t6106 = ((-t6244 * t6276 + t6273 * t6651) * t6321 + (-t6273 * t6824 - t6504) * t6313) * t6291 + (-(t6273 * t6710 - 0.2e1 * t6276 * t6742) * t6807 + (-t6202 * t6273 - t6276 * t6654) * t6321 - (t6254 * t6276 + t6323 * t6505) * t6742) * t6305 + t6273 * t6514 + (t6241 * t6276 + t6273 * t6376) * t6321 - t6818 * t6273 + t6833 * t6550;
t6094 = t6106 * t6771;
t6637 = t6106 * t6751;
t6303 = t6325 ^ 2;
t6271 = t6303 - 0.2e1;
t6245 = t6271 * t6803 - pkin(5);
t6203 = t6245 * t6326 * t6304 + t6317 * t6832;
t6242 = (t6303 - 0.1e1) * t6803 - pkin(5);
t6535 = t6304 * t6709;
t6423 = pkin(2) * t6325 * t6535;
t6375 = t6317 * t6423;
t6549 = t6277 * t6707;
t6501 = pkin(6) * t6549;
t6552 = t6274 * t6707;
t6502 = pkin(6) * t6552;
t6513 = t6301 * t6648;
t6107 = ((-t6245 * t6277 + t6274 * t6650) * t6324 + (-t6274 * t6823 - t6501) * t6316) * t6291 + (-(t6274 * t6704 - 0.2e1 * t6277 * t6739) * t6806 + (-t6203 * t6274 - t6277 * t6653) * t6324 - (t6258 * t6277 + t6326 * t6502) * t6739) * t6305 + t6274 * t6513 + (t6242 * t6277 + t6274 * t6375) * t6324 - t6817 * t6274 + t6832 * t6549;
t6095 = t6107 * t6765;
t6636 = t6107 * t6748;
t6108 = ((-t6243 * t6272 - t6275 * t6652) * t6318 + (t6275 * t6825 - t6508) * t6310) * t6291 + ((0.2e1 * t6272 * t6745 + t6275 * t6716) * t6808 + (t6201 * t6275 - t6272 * t6655) * t6318 + (-t6250 * t6272 + t6320 * t6507) * t6745) * t6305 - t6275 * t6515 + (t6240 * t6272 - t6275 * t6377) * t6318 + t6819 * t6275 + t6834 * t6554;
t6096 = t6108 * t6777;
t6635 = t6108 * t6754;
t6109 = ((-t6244 * t6273 - t6276 * t6651) * t6321 + (t6276 * t6824 - t6505) * t6313) * t6291 + ((0.2e1 * t6273 * t6742 + t6276 * t6710) * t6807 + (t6202 * t6276 - t6273 * t6654) * t6321 + (-t6254 * t6273 + t6323 * t6504) * t6742) * t6305 - t6276 * t6514 + (t6241 * t6273 - t6276 * t6376) * t6321 + t6818 * t6276 + t6833 * t6553;
t6097 = t6109 * t6771;
t6634 = t6109 * t6751;
t6110 = ((-t6245 * t6274 - t6277 * t6650) * t6324 + (t6277 * t6823 - t6502) * t6316) * t6291 + ((0.2e1 * t6274 * t6739 + t6277 * t6704) * t6806 + (t6203 * t6277 - t6274 * t6653) * t6324 + (-t6258 * t6274 + t6326 * t6501) * t6739) * t6305 - t6277 * t6513 + (t6242 * t6274 - t6277 * t6375) * t6324 + t6817 * t6277 + t6832 * t6552;
t6098 = t6110 * t6765;
t6633 = t6110 * t6748;
t6262 = t6281 + pkin(6);
t6251 = pkin(5) + t6805;
t6497 = t6814 * t6320 * t6251;
t6189 = t6262 * t6744 + t6310 * t6497;
t6252 = 0.2e1 * t6278 + pkin(1);
t6195 = t6252 * t6744 + t6497;
t6542 = t6304 * t6726;
t6437 = t6272 * t6542;
t6204 = t6275 * t6291 - t6275 + t6437;
t6228 = -t6291 * t6278 + t6834;
t6246 = t6281 - t6642;
t6422 = t6542 * t6278;
t6559 = t6251 * t6745;
t6440 = t6305 * t6559;
t6327 = pkin(6) ^ 2;
t6518 = -t6327 + t6756;
t6548 = t6310 * t6756;
t6560 = t6251 * t6747;
t6111 = (t6518 * t6272 * t6744 + t6204 * t6645) * t6297 + (t6204 * t6548 + (t6195 * t6272 - t6275 * t6560) * t6802 + (t6228 * t6275 - t6272 * t6422) * pkin(6)) * t6319 - (-pkin(6) * t6437 + t6246 * t6275) * t6802 + pkin(6) * (t6189 * t6272 - t6275 * t6440);
t6632 = t6111 * t6786;
t6434 = t6275 * t6542;
t6205 = t6272 * t6291 - t6272 - t6434;
t6419 = t6311 * t6518;
t6112 = (-t6304 * t6275 * t6419 + t6205 * t6645) * t6297 + (t6205 * t6548 - (t6195 * t6275 + t6272 * t6560) * t6802 + pkin(6) * (t6228 * t6272 + t6275 * t6422)) * t6319 - (pkin(6) * t6434 + t6246 * t6272) * t6802 - pkin(6) * (t6189 * t6275 + t6272 * t6440);
t6631 = t6112 * t6786;
t6263 = t6282 + pkin(6);
t6255 = pkin(5) + t6804;
t6496 = t6814 * t6323 * t6255;
t6190 = t6263 * t6741 + t6313 * t6496;
t6256 = 0.2e1 * t6279 + pkin(1);
t6196 = t6256 * t6741 + t6496;
t6541 = t6304 * t6724;
t6436 = t6273 * t6541;
t6206 = t6276 * t6291 - t6276 + t6436;
t6229 = -t6291 * t6279 + t6833;
t6247 = t6282 - t6642;
t6421 = t6541 * t6279;
t6557 = t6255 * t6742;
t6439 = t6305 * t6557;
t6517 = -t6327 + t6753;
t6546 = t6313 * t6753;
t6558 = t6255 * t6747;
t6113 = (t6517 * t6273 * t6741 + t6206 * t6644) * t6300 + (t6206 * t6546 + (t6196 * t6273 - t6276 * t6558) * t6800 + (t6229 * t6276 - t6273 * t6421) * pkin(6)) * t6322 - (-pkin(6) * t6436 + t6247 * t6276) * t6800 + pkin(6) * (t6190 * t6273 - t6276 * t6439);
t6630 = t6113 * t6784;
t6433 = t6276 * t6541;
t6207 = t6273 * t6291 - t6273 - t6433;
t6418 = t6314 * t6517;
t6114 = (-t6304 * t6276 * t6418 + t6207 * t6644) * t6300 + (t6207 * t6546 - (t6196 * t6276 + t6273 * t6558) * t6800 + pkin(6) * (t6229 * t6273 + t6276 * t6421)) * t6322 - (pkin(6) * t6433 + t6247 * t6273) * t6800 - pkin(6) * (t6190 * t6276 + t6273 * t6439);
t6629 = t6114 * t6784;
t6264 = t6283 + pkin(6);
t6259 = pkin(5) + t6803;
t6495 = t6814 * t6326 * t6259;
t6191 = t6264 * t6738 + t6316 * t6495;
t6260 = 0.2e1 * t6280 + pkin(1);
t6197 = t6260 * t6738 + t6495;
t6540 = t6304 * t6722;
t6435 = t6274 * t6540;
t6208 = t6277 * t6291 - t6277 + t6435;
t6230 = -t6291 * t6280 + t6832;
t6248 = t6283 - t6642;
t6420 = t6540 * t6280;
t6555 = t6259 * t6739;
t6438 = t6305 * t6555;
t6516 = -t6327 + t6750;
t6544 = t6316 * t6750;
t6556 = t6259 * t6747;
t6115 = (t6516 * t6274 * t6738 + t6208 * t6643) * t6303 + (t6208 * t6544 + (t6197 * t6274 - t6277 * t6556) * t6798 + (t6230 * t6277 - t6274 * t6420) * pkin(6)) * t6325 - (-pkin(6) * t6435 + t6248 * t6277) * t6798 + pkin(6) * (t6191 * t6274 - t6277 * t6438);
t6628 = t6115 * t6782;
t6432 = t6277 * t6540;
t6209 = t6274 * t6291 - t6274 - t6432;
t6417 = t6317 * t6516;
t6116 = (-t6304 * t6277 * t6417 + t6209 * t6643) * t6303 + (t6209 * t6544 - (t6197 * t6277 + t6274 * t6556) * t6798 + pkin(6) * (t6230 * t6274 + t6277 * t6420)) * t6325 - (pkin(6) * t6432 + t6248 * t6274) * t6798 - pkin(6) * (t6191 * t6277 + t6274 * t6438);
t6627 = t6116 * t6782;
t6138 = t6311 * (pkin(6) * t6703 - t6524 * t6310) * t6291 + ((-t6243 * t6744 + t6320 * t6834) * t6318 + (-pkin(6) * t6311 * t6539 + t6295 * t6801) * t6319) * t6305 + t6310 * t6311 * t6808 - t6318 * t6320 * t6425 + (-t6250 * t6311 - t6718 * t6812) * t6310 + t6512 * t6718;
t6135 = t6138 * t6777;
t6156 = t6180 * t6776;
t6127 = t6156 + t6135;
t6626 = t6127 * t6777;
t6139 = t6314 * (pkin(6) * t6702 - t6523 * t6313) * t6291 + ((-t6244 * t6741 + t6323 * t6833) * t6321 + (-pkin(6) * t6314 * t6537 + t6298 * t6799) * t6322) * t6305 + t6313 * t6314 * t6807 - t6321 * t6323 * t6424 + (-t6254 * t6314 - t6712 * t6812) * t6313 + t6511 * t6712;
t6136 = t6139 * t6771;
t6157 = t6181 * t6770;
t6129 = t6157 + t6136;
t6625 = t6129 * t6771;
t6140 = t6317 * (pkin(6) * t6701 - t6522 * t6316) * t6291 + ((-t6245 * t6738 + t6326 * t6832) * t6324 + (-pkin(6) * t6317 * t6535 + t6301 * t6797) * t6325) * t6305 + t6316 * t6317 * t6806 - t6324 * t6326 * t6423 + (-t6258 * t6317 - t6706 * t6812) * t6316 + t6510 * t6706;
t6137 = t6140 * t6765;
t6158 = t6182 * t6764;
t6131 = t6158 + t6137;
t6624 = t6131 * t6765;
t6153 = (t6311 * t6318 * t6646 + t6518 * t6320) * t6297 + ((t6251 * t6744 + t6252 * t6320) * t6802 - t6419 * t6732) * t6319 + (t6262 * t6320 + (-pkin(2) * t6727 + t6559) * t6311) * pkin(6);
t6584 = t6180 * t6775;
t6589 = t6296 * t6785;
t6132 = (t6153 * t6589 + t6584) * t6304;
t6623 = t6132 * t6786;
t6622 = t6132 * t6754;
t6154 = (t6314 * t6321 * t6646 + t6517 * t6323) * t6300 + ((t6255 * t6741 + t6256 * t6323) * t6800 - t6418 * t6730) * t6322 + (t6263 * t6323 + (-pkin(2) * t6725 + t6557) * t6314) * pkin(6);
t6580 = t6181 * t6769;
t6587 = t6299 * t6783;
t6133 = (t6154 * t6587 + t6580) * t6304;
t6621 = t6133 * t6784;
t6620 = t6133 * t6751;
t6155 = (t6317 * t6324 * t6646 + t6516 * t6326) * t6303 + ((t6259 * t6738 + t6260 * t6326) * t6798 - t6417 * t6728) * t6325 + (t6264 * t6326 + (-pkin(2) * t6723 + t6555) * t6317) * pkin(6);
t6576 = t6182 * t6763;
t6585 = t6302 * t6781;
t6134 = (t6155 * t6585 + t6576) * t6304;
t6619 = t6134 * t6782;
t6618 = t6134 * t6748;
t6617 = t6138 * t6754;
t6616 = t6139 * t6751;
t6615 = t6140 * t6748;
t6614 = t6153 * t6786;
t6613 = t6154 * t6784;
t6612 = t6155 * t6782;
t6611 = t6184 * t6831;
t6610 = t6168 * t6775;
t6609 = t6168 * t6774;
t6608 = t6168 * t6772;
t6607 = t6169 * t6775;
t6606 = t6169 * t6774;
t6605 = t6169 * t6772;
t6604 = t6186 * t6830;
t6603 = t6170 * t6769;
t6602 = t6170 * t6768;
t6601 = t6170 * t6766;
t6600 = t6171 * t6769;
t6599 = t6171 * t6768;
t6598 = t6171 * t6766;
t6597 = t6188 * t6829;
t6596 = t6172 * t6763;
t6595 = t6172 * t6762;
t6594 = t6172 * t6760;
t6593 = t6173 * t6763;
t6592 = t6173 * t6762;
t6591 = t6173 * t6760;
t6590 = t6177 * t6777;
t6588 = t6178 * t6771;
t6586 = t6179 * t6765;
t6583 = t6180 * t6774;
t6582 = t6180 * t6773;
t6581 = t6180 * t6772;
t6579 = t6181 * t6768;
t6578 = t6181 * t6767;
t6577 = t6181 * t6766;
t6575 = t6182 * t6762;
t6574 = t6182 * t6761;
t6573 = t6182 * t6760;
t6572 = t6183 * t6737;
t6571 = t6222 * t6772;
t6225 = t6658 + t6676;
t6570 = t6225 * t6772;
t6569 = t6184 * t6310 * t6319;
t6568 = t6185 * t6736;
t6567 = t6223 * t6766;
t6226 = t6657 + t6675;
t6566 = t6226 * t6766;
t6565 = t6186 * t6313 * t6322;
t6564 = t6187 * t6735;
t6563 = t6224 * t6760;
t6227 = t6656 + t6674;
t6562 = t6227 * t6760;
t6561 = t6188 * t6316 * t6325;
t6547 = t6296 * t6746;
t6545 = t6299 * t6743;
t6543 = t6302 * t6740;
t6538 = t6304 * t6717;
t6536 = t6304 * t6711;
t6534 = t6304 * t6705;
t6533 = (t6561 * t6829 + t6565 * t6830 + t6569 * t6831) * t6699 + (t6292 * t6611 + t6293 * t6604 + t6294 * t6597) * t6790 + (t6597 + t6604 + t6611) * MDP(1);
t6450 = t6182 * t6561;
t6453 = t6181 * t6565;
t6456 = t6180 * t6569;
t6532 = (t6168 * t6456 + t6170 * t6453 + t6172 * t6450) * t6699 + (t6168 * t6582 + t6170 * t6578 + t6172 * t6574) * t6790 + (t6168 * t6780 + t6170 * t6779 + t6172 * t6778) * MDP(1);
t6531 = (t6169 * t6456 + t6171 * t6453 + t6173 * t6450) * t6699 + (t6169 * t6582 + t6171 * t6578 + t6173 * t6574) * t6790 + (t6169 * t6780 + t6171 * t6779 + t6173 * t6778) * MDP(1);
t6530 = t6775 * t6816;
t6529 = t6769 * t6816;
t6528 = t6763 * t6816;
t6527 = 0.2e1 * t6661;
t6526 = 0.2e1 * t6660;
t6525 = 0.2e1 * t6659;
t6521 = t6269 * t6291 - t6297;
t6520 = t6270 * t6291 - t6300;
t6519 = t6271 * t6291 - t6303;
t6500 = (0.2e1 * t6295 - 0.1e1) * t6745;
t6499 = (0.2e1 * t6298 - 0.1e1) * t6742;
t6498 = (0.2e1 * t6301 - 0.1e1) * t6739;
t6494 = t6153 * t6177 * t6734;
t6493 = t6154 * t6178 * t6734;
t6492 = t6155 * t6179 * t6734;
t6491 = t6168 * t6571;
t6490 = t6168 * t6570;
t6489 = t6169 * t6571;
t6488 = t6169 * t6570;
t6487 = t6170 * t6567;
t6486 = t6170 * t6566;
t6485 = t6171 * t6567;
t6484 = t6171 * t6566;
t6483 = t6172 * t6563;
t6482 = t6172 * t6562;
t6481 = t6173 * t6563;
t6480 = t6173 * t6562;
t6210 = t6225 * t6309 + t6318 * t6812;
t6479 = t6210 * t6590;
t6213 = (pkin(1) * t6309 - pkin(5) * t6703) * t6304 - t6509;
t6478 = t6213 * t6590;
t6477 = t6210 * t6589;
t6476 = t6213 * t6589;
t6216 = t6539 - t6727;
t6475 = t6216 * t6589;
t6218 = t6538 + t6733;
t6474 = t6218 * t6589;
t6473 = t6319 * t6589;
t6211 = t6226 * t6312 + t6321 * t6812;
t6472 = t6211 * t6588;
t6214 = (pkin(1) * t6312 - pkin(5) * t6702) * t6304 - t6506;
t6471 = t6214 * t6588;
t6470 = t6211 * t6587;
t6469 = t6214 * t6587;
t6217 = t6537 - t6725;
t6468 = t6217 * t6587;
t6219 = t6536 + t6731;
t6467 = t6219 * t6587;
t6466 = t6322 * t6587;
t6212 = t6227 * t6315 + t6324 * t6812;
t6465 = t6212 * t6586;
t6215 = (pkin(1) * t6315 - pkin(5) * t6701) * t6304 - t6503;
t6464 = t6215 * t6586;
t6463 = t6212 * t6585;
t6462 = t6215 * t6585;
t6220 = t6535 - t6723;
t6461 = t6220 * t6585;
t6221 = t6534 + t6729;
t6460 = t6221 * t6585;
t6459 = t6325 * t6585;
t6458 = t6180 * t6571;
t6457 = t6180 * t6570;
t6455 = t6181 * t6567;
t6454 = t6181 * t6566;
t6452 = t6182 * t6563;
t6451 = t6182 * t6562;
t6449 = t6183 * t6539;
t6448 = t6183 * t6538;
t6447 = t6309 * t6571;
t6446 = t6185 * t6537;
t6445 = t6185 * t6536;
t6444 = t6312 * t6567;
t6443 = t6187 * t6535;
t6442 = t6187 * t6534;
t6441 = t6315 * t6563;
t6431 = t6183 * t6755 / 0.2e1;
t6430 = t6185 * t6752 / 0.2e1;
t6429 = t6187 * t6749 / 0.2e1;
t6428 = 0.2e1 * t6309 * t6538;
t6427 = 0.2e1 * t6312 * t6536;
t6426 = 0.2e1 * t6315 * t6534;
t6416 = t6183 * t6500;
t6415 = t6185 * t6499;
t6414 = t6187 * t6498;
t6413 = t6296 * t6494;
t6412 = t6299 * t6493;
t6411 = t6302 * t6492;
t6410 = t6168 * t6479;
t6409 = t6168 * t6478;
t6408 = t6168 * t6447;
t6407 = t6169 * t6479;
t6406 = t6169 * t6478;
t6405 = t6169 * t6447;
t6404 = t6170 * t6472;
t6403 = t6170 * t6471;
t6402 = t6170 * t6444;
t6401 = t6171 * t6472;
t6400 = t6171 * t6471;
t6399 = t6171 * t6444;
t6398 = t6172 * t6465;
t6397 = t6172 * t6464;
t6396 = t6172 * t6441;
t6395 = t6173 * t6465;
t6394 = t6173 * t6464;
t6393 = t6173 * t6441;
t6392 = t6180 * t6479;
t6391 = t6180 * t6478;
t6390 = t6304 * t6473;
t6389 = t6181 * t6472;
t6388 = t6181 * t6471;
t6387 = t6304 * t6466;
t6386 = t6182 * t6465;
t6385 = t6182 * t6464;
t6384 = t6304 * t6459;
t6383 = t6180 * t6447;
t6382 = t6181 * t6444;
t6381 = t6182 * t6441;
t6380 = t6589 * t6676;
t6379 = t6587 * t6675;
t6378 = t6585 * t6674;
t6141 = t6168 * t6776;
t6060 = 0.2e1 * t6141 + t6093;
t6374 = t6168 * (t6060 * t6183 + t6105 * t6772);
t6142 = t6169 * t6776;
t6062 = 0.2e1 * t6142 + t6096;
t6373 = t6169 * (t6062 * t6183 + t6108 * t6772);
t6143 = t6170 * t6770;
t6064 = 0.2e1 * t6143 + t6094;
t6372 = t6170 * (t6064 * t6185 + t6106 * t6766);
t6144 = t6171 * t6770;
t6066 = 0.2e1 * t6144 + t6097;
t6371 = t6171 * (t6066 * t6185 + t6109 * t6766);
t6145 = t6172 * t6764;
t6068 = 0.2e1 * t6145 + t6095;
t6370 = t6172 * (t6068 * t6187 + t6107 * t6760);
t6146 = t6173 * t6764;
t6070 = 0.2e1 * t6146 + t6098;
t6369 = t6173 * (t6070 * t6187 + t6110 * t6760);
t6126 = 0.2e1 * t6156 + t6135;
t6368 = t6180 * (t6126 * t6183 + t6138 * t6772);
t6128 = 0.2e1 * t6157 + t6136;
t6367 = t6181 * (t6128 * t6185 + t6139 * t6766);
t6130 = 0.2e1 * t6158 + t6137;
t6366 = t6182 * (t6130 * t6187 + t6140 * t6760);
t6362 = t6309 * t6686 + t6813 * t6717;
t6361 = t6312 * t6686 + t6813 * t6711;
t6360 = t6315 * t6686 + t6813 * t6705;
t6359 = t6318 * t6686 - t6813 * t6721;
t6358 = t6321 * t6686 - t6813 * t6715;
t6357 = t6324 * t6686 - t6813 * t6709;
t6356 = t6060 * t6148 + t6108 * t6608;
t6355 = t6060 * t6159 + t6138 * t6608;
t6354 = t6062 * t6147 + t6105 * t6605;
t6353 = t6062 * t6159 + t6138 * t6605;
t6352 = t6064 * t6150 + t6109 * t6601;
t6351 = t6064 * t6160 + t6139 * t6601;
t6350 = t6066 * t6149 + t6106 * t6598;
t6349 = t6066 * t6160 + t6139 * t6598;
t6348 = t6068 * t6152 + t6110 * t6594;
t6347 = t6068 * t6161 + t6140 * t6594;
t6346 = t6070 * t6151 + t6107 * t6591;
t6345 = t6070 * t6161 + t6140 * t6591;
t6344 = t6105 * t6581 + t6126 * t6147;
t6343 = t6106 * t6577 + t6128 * t6149;
t6342 = t6107 * t6573 + t6130 * t6151;
t6341 = t6108 * t6581 + t6126 * t6148;
t6340 = t6109 * t6577 + t6128 * t6150;
t6339 = t6110 * t6573 + t6130 * t6152;
t6338 = -(t6105 * t6664 + t6111 * t6682) * t6828 - (-t6105 * t6679 + t6168 * t6527) * t6776 + t6168 * t6530;
t6337 = -(t6106 * t6663 + t6113 * t6681) * t6827 - (-t6106 * t6678 + t6170 * t6526) * t6770 + t6170 * t6529;
t6336 = -(t6107 * t6662 + t6115 * t6680) * t6826 - (-t6107 * t6677 + t6172 * t6525) * t6764 + t6172 * t6528;
t6335 = -(t6108 * t6664 + t6112 * t6682) * t6828 - (-t6108 * t6679 + t6169 * t6527) * t6776 + t6169 * t6530;
t6334 = -(t6109 * t6663 + t6114 * t6681) * t6827 - (-t6109 * t6678 + t6171 * t6526) * t6770 + t6171 * t6529;
t6333 = -(t6110 * t6662 + t6116 * t6680) * t6826 - (-t6110 * t6677 + t6173 * t6525) * t6764 + t6173 * t6528;
t6332 = -(-pkin(1) * t6494 + t6138 * t6664) * t6828 - (-t6138 * t6679 + t6180 * t6527) * t6776 + t6180 * t6530;
t6331 = -(-pkin(1) * t6493 + t6139 * t6663) * t6827 - (-t6139 * t6678 + t6181 * t6526) * t6770 + t6181 * t6529;
t6330 = -(-pkin(1) * t6492 + t6140 * t6662) * t6826 - (-t6140 * t6677 + t6182 * t6525) * t6764 + t6182 * t6528;
t6176 = t6182 ^ 2;
t6175 = t6181 ^ 2;
t6174 = t6180 ^ 2;
t6167 = t6173 ^ 2;
t6166 = t6172 ^ 2;
t6165 = t6171 ^ 2;
t6164 = t6170 ^ 2;
t6163 = t6169 ^ 2;
t6162 = t6168 ^ 2;
t6125 = t6158 + t6137 / 0.2e1;
t6124 = t6157 + t6136 / 0.2e1;
t6123 = t6156 + t6135 / 0.2e1;
t6122 = t6140 * t6429 + t6161;
t6121 = t6139 * t6430 + t6160;
t6120 = t6138 * t6431 + t6159;
t6089 = t6131 * t6315 + t6182 * t6442;
t6088 = t6129 * t6312 + t6181 * t6445;
t6087 = t6127 * t6309 + t6180 * t6448;
t6086 = t6131 * t6324 - t6182 * t6443;
t6085 = t6129 * t6321 - t6181 * t6446;
t6084 = t6127 * t6318 - t6180 * t6449;
t6083 = t6161 + (-t6140 * t6749 + t6519 * t6182) * t6187;
t6082 = t6160 + (-t6139 * t6752 + t6520 * t6181) * t6185;
t6081 = t6159 + (-t6138 * t6755 + t6521 * t6180) * t6183;
t6080 = -t6116 * t6585 + t6173 * t6564;
t6079 = -t6115 * t6585 + t6172 * t6564;
t6078 = -t6114 * t6587 + t6171 * t6568;
t6077 = -t6113 * t6587 + t6170 * t6568;
t6076 = -t6112 * t6589 + t6169 * t6572;
t6075 = -t6111 * t6589 + t6168 * t6572;
t6074 = t6131 * t6683 + t6182 * t6414;
t6073 = t6129 * t6684 + t6181 * t6415;
t6072 = t6127 * t6685 + t6180 * t6416;
t6071 = t6146 + t6098;
t6069 = t6145 + t6095;
t6067 = t6144 + t6097;
t6065 = t6143 + t6094;
t6063 = t6142 + t6096;
t6061 = t6141 + t6093;
t6059 = t6146 + t6098 / 0.2e1;
t6058 = t6145 + t6095 / 0.2e1;
t6057 = t6144 + t6097 / 0.2e1;
t6056 = t6143 + t6094 / 0.2e1;
t6055 = t6142 + t6096 / 0.2e1;
t6054 = t6141 + t6093 / 0.2e1;
t6053 = t6110 * t6429 + t6152;
t6052 = t6109 * t6430 + t6150;
t6051 = t6108 * t6431 + t6148;
t6050 = t6107 * t6429 + t6151;
t6049 = t6106 * t6430 + t6149;
t6048 = t6105 * t6431 + t6147;
t6039 = -t6155 * t6304 * t6378 + (-t6155 * t6290 * t6459 + t6182 * t6687 - 0.2e1 * t6161) * pkin(5);
t6038 = -t6154 * t6304 * t6379 + (-t6154 * t6290 * t6466 + t6181 * t6688 - 0.2e1 * t6160) * pkin(5);
t6037 = -t6153 * t6304 * t6380 + (-t6153 * t6290 * t6473 + t6180 * t6689 - 0.2e1 * t6159) * pkin(5);
t6032 = -t6122 * t6283 - t6125 * t6656;
t6031 = t6122 * t6809 - t6125 * t6659;
t6030 = -t6121 * t6282 - t6124 * t6657;
t6029 = -t6120 * t6281 - t6123 * t6658;
t6028 = t6121 * t6810 - t6124 * t6660;
t6027 = t6120 * t6811 - t6123 * t6661;
t6026 = t6071 * t6315 + t6173 * t6442;
t6025 = t6069 * t6315 + t6172 * t6442;
t6024 = t6067 * t6312 + t6171 * t6445;
t6023 = t6065 * t6312 + t6170 * t6445;
t6022 = t6063 * t6309 + t6169 * t6448;
t6021 = t6061 * t6309 + t6168 * t6448;
t6020 = t6071 * t6324 - t6173 * t6443;
t6019 = t6069 * t6324 - t6172 * t6443;
t6018 = t6067 * t6321 - t6171 * t6446;
t6017 = t6065 * t6321 - t6170 * t6446;
t6016 = t6063 * t6318 - t6169 * t6449;
t6015 = t6061 * t6318 - t6168 * t6449;
t6011 = t6220 * t6411 + (-t6140 * t6304 + t6357 * t6182) * t6763;
t6010 = t6217 * t6412 + (-t6139 * t6304 + t6358 * t6181) * t6769;
t6009 = t6216 * t6413 + (-t6138 * t6304 + t6359 * t6180) * t6775;
t6008 = -t6221 * t6411 + (-t6140 * t6543 + t6360 * t6182) * t6763;
t6007 = -t6219 * t6412 + (-t6139 * t6545 + t6361 * t6181) * t6769;
t6006 = -t6218 * t6413 + (-t6138 * t6547 + t6362 * t6180) * t6775;
t5999 = t6152 + (-t6110 * t6749 + t6519 * t6173) * t6187;
t5998 = t6151 + (-t6107 * t6749 + t6519 * t6172) * t6187;
t5997 = t6150 + (-t6109 * t6752 + t6520 * t6171) * t6185;
t5996 = t6149 + (-t6106 * t6752 + t6520 * t6170) * t6185;
t5995 = t6148 + (-t6108 * t6755 + t6521 * t6169) * t6183;
t5994 = t6147 + (-t6105 * t6755 + t6521 * t6168) * t6183;
t5993 = t6071 * t6683 + t6173 * t6414;
t5992 = t6069 * t6683 + t6172 * t6414;
t5991 = t6067 * t6684 + t6171 * t6415;
t5990 = t6065 * t6684 + t6170 * t6415;
t5989 = t6063 * t6685 + t6169 * t6416;
t5988 = t6061 * t6685 + t6168 * t6416;
t5987 = t6116 * t6378 + (t6116 * t6384 + t6173 * t6687 - 0.2e1 * t6152) * pkin(5);
t5986 = t6115 * t6378 + (t6115 * t6384 + t6172 * t6687 - 0.2e1 * t6151) * pkin(5);
t5985 = t6114 * t6379 + (t6114 * t6387 + t6171 * t6688 - 0.2e1 * t6150) * pkin(5);
t5984 = t6113 * t6379 + (t6113 * t6387 + t6170 * t6688 - 0.2e1 * t6149) * pkin(5);
t5983 = t6112 * t6380 + (t6112 * t6390 + t6169 * t6689 - 0.2e1 * t6148) * pkin(5);
t5982 = t6111 * t6380 + (t6111 * t6390 + t6168 * t6689 - 0.2e1 * t6147) * pkin(5);
t5981 = -t6053 * t6283 - t6059 * t6656;
t5980 = t6053 * t6809 - t6059 * t6659;
t5979 = -t6050 * t6283 - t6058 * t6656;
t5978 = t6050 * t6809 - t6058 * t6659;
t5977 = -t6052 * t6282 - t6057 * t6657;
t5976 = -t6049 * t6282 - t6056 * t6657;
t5975 = -t6051 * t6281 - t6055 * t6658;
t5974 = -t6048 * t6281 - t6054 * t6658;
t5973 = t6052 * t6810 - t6057 * t6660;
t5972 = t6049 * t6810 - t6056 * t6660;
t5971 = t6051 * t6811 - t6055 * t6661;
t5970 = t6048 * t6811 - t6054 * t6661;
t5969 = t6083 * t6301 + t6125 * t6426 + t6131 * t6305;
t5968 = t6082 * t6298 + t6124 * t6427 + t6129 * t6305;
t5967 = t6081 * t6295 + t6123 * t6428 + t6127 * t6305;
t5966 = -t6083 * t6708 + t6125 * t6498;
t5965 = -t6082 * t6714 + t6124 * t6499;
t5964 = -t6081 * t6720 + t6123 * t6500;
t5963 = -t6116 * t6461 + (-t6110 * t6304 + t6357 * t6173) * t6763;
t5962 = -t6115 * t6461 + (-t6107 * t6304 + t6357 * t6172) * t6763;
t5961 = -t6114 * t6468 + (-t6109 * t6304 + t6358 * t6171) * t6769;
t5960 = -t6113 * t6468 + (-t6106 * t6304 + t6358 * t6170) * t6769;
t5959 = -t6112 * t6475 + (-t6108 * t6304 + t6359 * t6169) * t6775;
t5958 = -t6111 * t6475 + (-t6105 * t6304 + t6359 * t6168) * t6775;
t5957 = t6116 * t6460 + (-t6110 * t6543 + t6360 * t6173) * t6763;
t5956 = t6115 * t6460 + (-t6107 * t6543 + t6360 * t6172) * t6763;
t5955 = t6114 * t6467 + (-t6109 * t6545 + t6361 * t6171) * t6769;
t5954 = t6113 * t6467 + (-t6106 * t6545 + t6361 * t6170) * t6769;
t5953 = t6112 * t6474 + (-t6108 * t6547 + t6362 * t6169) * t6775;
t5952 = t6111 * t6474 + (-t6105 * t6547 + t6362 * t6168) * t6775;
t5951 = -t6315 * t6039 + t6324 * t6330;
t5950 = -t6324 * t6039 - t6315 * t6330;
t5949 = -t6312 * t6038 + t6321 * t6331;
t5948 = -t6321 * t6038 - t6312 * t6331;
t5947 = -t6309 * t6037 + t6318 * t6332;
t5946 = -t6318 * t6037 - t6309 * t6332;
t5945 = t5999 * t6301 + t6059 * t6426 + t6071 * t6305;
t5944 = t5998 * t6301 + t6058 * t6426 + t6069 * t6305;
t5943 = t5997 * t6298 + t6057 * t6427 + t6067 * t6305;
t5942 = t5996 * t6298 + t6056 * t6427 + t6065 * t6305;
t5941 = t5995 * t6295 + t6055 * t6428 + t6063 * t6305;
t5940 = t5994 * t6295 + t6054 * t6428 + t6061 * t6305;
t5939 = -t5999 * t6708 + t6059 * t6498;
t5938 = -t5998 * t6708 + t6058 * t6498;
t5937 = -t5997 * t6714 + t6057 * t6499;
t5936 = -t5996 * t6714 + t6056 * t6499;
t5935 = -t5995 * t6720 + t6055 * t6500;
t5934 = -t5994 * t6720 + t6054 * t6500;
t5933 = -t6315 * t5987 + t6324 * t6333;
t5932 = -t6324 * t5987 - t6315 * t6333;
t5931 = -t6315 * t5986 + t6324 * t6336;
t5930 = -t6324 * t5986 - t6315 * t6336;
t5929 = -t6312 * t5985 + t6321 * t6334;
t5928 = -t6321 * t5985 - t6312 * t6334;
t5927 = -t6312 * t5984 + t6321 * t6337;
t5926 = -t6321 * t5984 - t6312 * t6337;
t5925 = -t6309 * t5983 + t6318 * t6335;
t5924 = -t6318 * t5983 - t6309 * t6335;
t5923 = -t6309 * t5982 + t6318 * t6338;
t5922 = -t6318 * t5982 - t6309 * t6338;
t1 = [(t6163 * t6184 + t6165 * t6186 + t6167 * t6188) * MDP(1) + (t6163 * t6773 + t6165 * t6767 + t6167 * t6761) * t6790 + (t6163 * t6569 + t6165 * t6565 + t6167 * t6561) * t6699 + (t6310 * t6373 + t6313 * t6371 + t6316 * t6369) * t6789 + (t6319 * t6373 + t6322 * t6371 + t6325 * t6369) * t6788 + (t6063 * t6096 + t6067 * t6097 + t6071 * t6098 + (t6063 * t6148 + t6067 * t6150 + t6071 * t6152) * t6305) * MDP(8) + (t5971 * t6697 + t5973 * t6695 + t5980 * t6693 + t6108 * t6489 + t6109 * t6485 - t6110 * t6481) * MDP(9) + (t5975 * t6697 + t5977 * t6695 + t5981 * t6693 - t6108 * t6488 - t6109 * t6484 - t6110 * t6480) * MDP(10) + ((t5945 * t6173 + t6026 * t6633) * t6187 + (t5943 * t6171 + t6024 * t6634) * t6185 + (t5941 * t6169 + t6022 * t6635) * t6183) * MDP(11) + (t5935 * t6697 + t5937 * t6695 + t5939 * t6693 + t5989 * t6096 + t5991 * t6097 + t5993 * t6098) * MDP(12) + ((t6173 * t5957 - t6080 * t6633) * t6187 + (t6171 * t5955 - t6078 * t6634) * t6185 + (t6169 * t5953 - t6076 * t6635) * t6183 + (t6022 * t6631 + t6024 * t6629 + t6026 * t6627) * t6329) * MDP(13) + ((t5963 * t6173 - t6080 * t6110) * t6187 + (t5961 * t6171 - t6078 * t6109) * t6185 + (t5959 * t6169 - t6076 * t6108) * t6183 + (t6016 * t6631 + t6018 * t6629 + t6020 * t6627) * t6329) * MDP(14) + ((-t6076 * t6631 - t6078 * t6629 - t6080 * t6627) * t6329 + (t6076 * t6607 + t6078 * t6600 + t6080 * t6593) * t6304) * MDP(15) + ((-t6110 * t6762 + (-t6116 * t6463 + t5933) * t6187) * t6173 + (t6109 * t6768 + (-t6114 * t6470 + t5929) * t6185) * t6171 + (t6108 * t6774 + (-t6112 * t6477 + t5925) * t6183) * t6169) * MDP(16) + ((t6110 * t6441 + (t6116 * t6462 + t5932) * t6187) * t6173 + (-t6109 * t6444 + (t6114 * t6469 + t5928) * t6185) * t6171 + (-t6108 * t6447 + (t6112 * t6476 + t5924) * t6183) * t6169) * MDP(17) + MDP(18); (t6356 * t6310 + t6352 * t6313 + t6348 * t6316) * t6789 + (t6356 * t6319 + t6352 * t6322 + t6348 * t6325) * t6788 + (t6061 * t6096 + t6065 * t6097 + t6069 * t6098 + (t6061 * t6148 + t6065 * t6150 + t6069 * t6152) * t6305) * MDP(8) + (t5970 * t6697 + t5972 * t6695 + t5978 * t6693 + t6108 * t6491 + t6109 * t6487 - t6110 * t6483) * MDP(9) + (t5974 * t6697 + t5976 * t6695 + t5979 * t6693 - t6108 * t6490 - t6109 * t6486 - t6110 * t6482) * MDP(10) + ((t5944 * t6173 + t6025 * t6633) * t6187 + (t5942 * t6171 + t6023 * t6634) * t6185 + (t5940 * t6169 + t6021 * t6635) * t6183) * MDP(11) + (t5934 * t6697 + t5936 * t6695 + t5938 * t6693 + t5988 * t6096 + t5990 * t6097 + t5992 * t6098) * MDP(12) + ((t5956 * t6173 - t6079 * t6633) * t6187 + (t5954 * t6171 - t6077 * t6634) * t6185 + (t5952 * t6169 - t6075 * t6635) * t6183 + (t6021 * t6631 + t6023 * t6629 + t6025 * t6627) * t6329) * MDP(13) + ((t5962 * t6173 - t6079 * t6110) * t6187 + (t5960 * t6171 - t6077 * t6109) * t6185 + (t5958 * t6169 - t6075 * t6108) * t6183 + (t6015 * t6631 + t6017 * t6629 + t6019 * t6627) * t6329) * MDP(14) + ((-t6075 * t6631 - t6077 * t6629 - t6079 * t6627) * t6329 + (t6075 * t6607 + t6077 * t6600 + t6079 * t6593) * t6304) * MDP(15) + (t6108 * t6609 + t6109 * t6602 - t6110 * t6595 + t5923 * t6148 + t5927 * t6150 + t5931 * t6152 + (-t6112 * t6410 - t6114 * t6404 - t6116 * t6398) * t6329) * MDP(16) + (-t6108 * t6408 - t6109 * t6402 + t6110 * t6396 + t5922 * t6148 + t5926 * t6150 + t5930 * t6152 + (t6112 * t6409 + t6114 * t6403 + t6116 * t6397) * t6329) * MDP(17) + t6533; (t6310 * t6341 + t6313 * t6340 + t6316 * t6339) * t6789 + (t6319 * t6341 + t6322 * t6340 + t6325 * t6339) * t6788 + (t6108 * t6626 + t6109 * t6625 + t6110 * t6624 + (t6127 * t6148 + t6129 * t6150 + t6131 * t6152) * t6305) * MDP(8) + (t6027 * t6697 + t6028 * t6695 + t6031 * t6693 + t6108 * t6458 + t6109 * t6455 - t6110 * t6452) * MDP(9) + (t6029 * t6697 + t6030 * t6695 + t6032 * t6693 - t6108 * t6457 - t6109 * t6454 - t6110 * t6451) * MDP(10) + ((t5969 * t6173 + t6089 * t6633) * t6187 + (t5968 * t6171 + t6088 * t6634) * t6185 + (t5967 * t6169 + t6087 * t6635) * t6183) * MDP(11) + (t5964 * t6697 + t5965 * t6695 + t5966 * t6693 + t6072 * t6096 + t6073 * t6097 + t6074 * t6098) * MDP(12) + ((t6008 * t6173 - t6110 * t6618) * t6187 + (t6007 * t6171 - t6109 * t6620) * t6185 + (t6006 * t6169 - t6108 * t6622) * t6183 + (t6087 * t6631 + t6088 * t6629 + t6089 * t6627) * t6329) * MDP(13) + ((t6011 * t6173 - t6110 * t6134) * t6187 + (t6010 * t6171 - t6109 * t6133) * t6185 + (t6009 * t6169 - t6108 * t6132) * t6183 + (t6084 * t6631 + t6085 * t6629 + t6086 * t6627) * t6329) * MDP(14) + ((-t6112 * t6623 - t6114 * t6621 - t6116 * t6619) * t6329 + (t6132 * t6607 + t6133 * t6600 + t6134 * t6593) * t6304) * MDP(15) + (t6108 * t6583 + t6109 * t6579 - t6110 * t6575 + t5947 * t6148 + t5949 * t6150 + t5951 * t6152 + (-t6112 * t6392 - t6114 * t6389 - t6116 * t6386) * t6329) * MDP(16) + (-t6108 * t6383 - t6109 * t6382 + t6110 * t6381 + t5946 * t6148 + t5948 * t6150 + t5950 * t6152 + (t6112 * t6391 + t6114 * t6388 + t6116 * t6385) * t6329) * MDP(17) + t6531; (t6310 * t6354 + t6313 * t6350 + t6316 * t6346) * t6789 + (t6319 * t6354 + t6322 * t6350 + t6325 * t6346) * t6788 + (t6063 * t6093 + t6067 * t6094 + t6071 * t6095 + (t6063 * t6147 + t6067 * t6149 + t6071 * t6151) * t6305) * MDP(8) + (t5971 * t6698 + t5973 * t6696 + t5980 * t6694 + t6105 * t6489 + t6106 * t6485 - t6107 * t6481) * MDP(9) + (t5975 * t6698 + t5977 * t6696 + t5981 * t6694 - t6105 * t6488 - t6106 * t6484 - t6107 * t6480) * MDP(10) + ((t5945 * t6172 + t6026 * t6636) * t6187 + (t5943 * t6170 + t6024 * t6637) * t6185 + (t5941 * t6168 + t6022 * t6638) * t6183) * MDP(11) + (t5935 * t6698 + t5937 * t6696 + t5939 * t6694 + t5989 * t6093 + t5991 * t6094 + t5993 * t6095) * MDP(12) + ((t5957 * t6172 - t6080 * t6636) * t6187 + (t5955 * t6170 - t6078 * t6637) * t6185 + (t5953 * t6168 - t6076 * t6638) * t6183 + (t6022 * t6632 + t6024 * t6630 + t6026 * t6628) * t6329) * MDP(13) + ((t5963 * t6172 - t6080 * t6107) * t6187 + (t5961 * t6170 - t6078 * t6106) * t6185 + (t5959 * t6168 - t6076 * t6105) * t6183 + (t6016 * t6632 + t6018 * t6630 + t6020 * t6628) * t6329) * MDP(14) + ((-t6076 * t6632 - t6078 * t6630 - t6080 * t6628) * t6329 + (t6076 * t6610 + t6078 * t6603 + t6080 * t6596) * t6304) * MDP(15) + (t6105 * t6606 + t6106 * t6599 - t6107 * t6592 + t5925 * t6147 + t5929 * t6149 + t5933 * t6151 + (-t6111 * t6407 - t6113 * t6401 - t6115 * t6395) * t6329) * MDP(16) + (-t6105 * t6405 - t6106 * t6399 + t6107 * t6393 + t5924 * t6147 + t5928 * t6149 + t5932 * t6151 + (t6111 * t6406 + t6113 * t6400 + t6115 * t6394) * t6329) * MDP(17) + t6533; (t6162 * t6184 + t6164 * t6186 + t6166 * t6188) * MDP(1) + (t6162 * t6773 + t6164 * t6767 + t6166 * t6761) * t6790 + (t6162 * t6569 + t6164 * t6565 + t6166 * t6561) * t6699 + (t6310 * t6374 + t6313 * t6372 + t6316 * t6370) * t6789 + (t6319 * t6374 + t6322 * t6372 + t6325 * t6370) * t6788 + (t6061 * t6093 + t6065 * t6094 + t6069 * t6095 + (t6061 * t6147 + t6065 * t6149 + t6069 * t6151) * t6305) * MDP(8) + (t5970 * t6698 + t5972 * t6696 + t5978 * t6694 + t6105 * t6491 + t6106 * t6487 - t6107 * t6483) * MDP(9) + (t5974 * t6698 + t5976 * t6696 + t5979 * t6694 - t6105 * t6490 - t6106 * t6486 - t6107 * t6482) * MDP(10) + ((t5944 * t6172 + t6025 * t6636) * t6187 + (t5942 * t6170 + t6023 * t6637) * t6185 + (t5940 * t6168 + t6021 * t6638) * t6183) * MDP(11) + (t5934 * t6698 + t5936 * t6696 + t5938 * t6694 + t5988 * t6093 + t5990 * t6094 + t5992 * t6095) * MDP(12) + ((t5956 * t6172 - t6079 * t6636) * t6187 + (t5954 * t6170 - t6077 * t6637) * t6185 + (t5952 * t6168 - t6075 * t6638) * t6183 + (t6021 * t6632 + t6023 * t6630 + t6025 * t6628) * t6329) * MDP(13) + ((t5962 * t6172 - t6079 * t6107) * t6187 + (t5960 * t6170 - t6077 * t6106) * t6185 + (t5958 * t6168 - t6075 * t6105) * t6183 + (t6015 * t6632 + t6017 * t6630 + t6019 * t6628) * t6329) * MDP(14) + ((-t6075 * t6632 - t6077 * t6630 - t6079 * t6628) * t6329 + (t6075 * t6610 + t6077 * t6603 + t6079 * t6596) * t6304) * MDP(15) + ((-t6107 * t6762 + (-t6115 * t6463 + t5931) * t6187) * t6172 + (t6106 * t6768 + (-t6113 * t6470 + t5927) * t6185) * t6170 + (t6105 * t6774 + (-t6111 * t6477 + t5923) * t6183) * t6168) * MDP(16) + ((t6107 * t6441 + (t6115 * t6462 + t5930) * t6187) * t6172 + (-t6106 * t6444 + (t6113 * t6469 + t5926) * t6185) * t6170 + (-t6105 * t6447 + (t6111 * t6476 + t5922) * t6183) * t6168) * MDP(17) + MDP(18); (t6310 * t6344 + t6313 * t6343 + t6316 * t6342) * t6789 + (t6319 * t6344 + t6322 * t6343 + t6325 * t6342) * t6788 + (t6105 * t6626 + t6106 * t6625 + t6107 * t6624 + (t6127 * t6147 + t6129 * t6149 + t6131 * t6151) * t6305) * MDP(8) + (t6027 * t6698 + t6028 * t6696 + t6031 * t6694 + t6105 * t6458 + t6106 * t6455 - t6107 * t6452) * MDP(9) + (t6029 * t6698 + t6030 * t6696 + t6032 * t6694 - t6105 * t6457 - t6106 * t6454 - t6107 * t6451) * MDP(10) + ((t5969 * t6172 + t6089 * t6636) * t6187 + (t5968 * t6170 + t6088 * t6637) * t6185 + (t5967 * t6168 + t6087 * t6638) * t6183) * MDP(11) + (t5964 * t6698 + t5965 * t6696 + t5966 * t6694 + t6072 * t6093 + t6073 * t6094 + t6074 * t6095) * MDP(12) + ((t6008 * t6172 - t6107 * t6618) * t6187 + (t6007 * t6170 - t6106 * t6620) * t6185 + (t6006 * t6168 - t6105 * t6622) * t6183 + (t6087 * t6632 + t6088 * t6630 + t6089 * t6628) * t6329) * MDP(13) + ((t6011 * t6172 - t6107 * t6134) * t6187 + (t6010 * t6170 - t6106 * t6133) * t6185 + (t6009 * t6168 - t6105 * t6132) * t6183 + (t6084 * t6632 + t6085 * t6630 + t6086 * t6628) * t6329) * MDP(14) + ((-t6111 * t6623 - t6113 * t6621 - t6115 * t6619) * t6329 + (t6132 * t6610 + t6133 * t6603 + t6134 * t6596) * t6304) * MDP(15) + (t6105 * t6583 + t6106 * t6579 - t6107 * t6575 + t5947 * t6147 + t5949 * t6149 + t5951 * t6151 + (-t6111 * t6392 - t6113 * t6389 - t6115 * t6386) * t6329) * MDP(16) + (-t6105 * t6383 - t6106 * t6382 + t6107 * t6381 + t5946 * t6147 + t5948 * t6149 + t5950 * t6151 + (t6111 * t6391 + t6113 * t6388 + t6115 * t6385) * t6329) * MDP(17) + t6532; (t6310 * t6353 + t6313 * t6349 + t6316 * t6345) * t6789 + (t6319 * t6353 + t6322 * t6349 + t6325 * t6345) * t6788 + (t6063 * t6135 + t6067 * t6136 + t6071 * t6137 + (t6063 * t6159 + t6067 * t6160 + t6071 * t6161) * t6305) * MDP(8) + (t5971 * t6692 + t5973 * t6691 + t5980 * t6690 + t6138 * t6489 + t6139 * t6485 - t6140 * t6481) * MDP(9) + (t5975 * t6692 + t5977 * t6691 + t5981 * t6690 - t6138 * t6488 - t6139 * t6484 - t6140 * t6480) * MDP(10) + ((t5945 * t6182 + t6026 * t6615) * t6187 + (t5943 * t6181 + t6024 * t6616) * t6185 + (t5941 * t6180 + t6022 * t6617) * t6183) * MDP(11) + (t5935 * t6692 + t5937 * t6691 + t5939 * t6690 + t5989 * t6135 + t5991 * t6136 + t5993 * t6137) * MDP(12) + ((t5957 * t6182 - t6080 * t6615) * t6187 + (t5955 * t6181 - t6078 * t6616) * t6185 + (t5953 * t6180 - t6076 * t6617) * t6183 + (-t6022 * t6614 - t6024 * t6613 - t6026 * t6612) * t6734) * MDP(13) + ((t5963 * t6182 - t6080 * t6140) * t6187 + (t5961 * t6181 - t6078 * t6139) * t6185 + (t5959 * t6180 - t6076 * t6138) * t6183 + (-t6016 * t6614 - t6018 * t6613 - t6020 * t6612) * t6734) * MDP(14) + (t6076 * t6584 + t6078 * t6580 + t6080 * t6576 + (t6076 * t6614 + t6078 * t6613 + t6080 * t6612) * t6329) * t6787 + (t6138 * t6606 + t6139 * t6599 - t6140 * t6592 + t5925 * t6159 + t5929 * t6160 + t5933 * t6161 + (t6153 * t6407 + t6154 * t6401 + t6155 * t6395) * t6734) * MDP(16) + (-t6138 * t6405 - t6139 * t6399 + t6140 * t6393 + t5924 * t6159 + t5928 * t6160 + t5932 * t6161 + (-t6153 * t6406 - t6154 * t6400 - t6155 * t6394) * t6734) * MDP(17) + t6531; (t6310 * t6355 + t6313 * t6351 + t6316 * t6347) * t6789 + (t6319 * t6355 + t6322 * t6351 + t6325 * t6347) * t6788 + (t6061 * t6135 + t6065 * t6136 + t6069 * t6137 + (t6061 * t6159 + t6065 * t6160 + t6069 * t6161) * t6305) * MDP(8) + (t5970 * t6692 + t5972 * t6691 + t5978 * t6690 + t6138 * t6491 + t6139 * t6487 - t6140 * t6483) * MDP(9) + (t5974 * t6692 + t5976 * t6691 + t5979 * t6690 - t6138 * t6490 - t6139 * t6486 - t6140 * t6482) * MDP(10) + ((t5944 * t6182 + t6025 * t6615) * t6187 + (t5942 * t6181 + t6023 * t6616) * t6185 + (t5940 * t6180 + t6021 * t6617) * t6183) * MDP(11) + (t5934 * t6692 + t5936 * t6691 + t5938 * t6690 + t5988 * t6135 + t5990 * t6136 + t5992 * t6137) * MDP(12) + ((t5956 * t6182 - t6079 * t6615) * t6187 + (t5954 * t6181 - t6077 * t6616) * t6185 + (t5952 * t6180 - t6075 * t6617) * t6183 + (-t6021 * t6614 - t6023 * t6613 - t6025 * t6612) * t6734) * MDP(13) + ((t5962 * t6182 - t6079 * t6140) * t6187 + (t5960 * t6181 - t6077 * t6139) * t6185 + (t5958 * t6180 - t6075 * t6138) * t6183 + (-t6015 * t6614 - t6017 * t6613 - t6019 * t6612) * t6734) * MDP(14) + (t6075 * t6584 + t6077 * t6580 + t6079 * t6576 + (t6075 * t6614 + t6077 * t6613 + t6079 * t6612) * t6329) * t6787 + (t6138 * t6609 + t6139 * t6602 - t6140 * t6595 + t5923 * t6159 + t5927 * t6160 + t5931 * t6161 + (t6153 * t6410 + t6154 * t6404 + t6155 * t6398) * t6734) * MDP(16) + (-t6138 * t6408 - t6139 * t6402 + t6140 * t6396 + t5922 * t6159 + t5926 * t6160 + t5930 * t6161 + (-t6153 * t6409 - t6154 * t6403 - t6155 * t6397) * t6734) * MDP(17) + t6532; (t6174 * t6184 + t6175 * t6186 + t6176 * t6188) * MDP(1) + (t6174 * t6773 + t6175 * t6767 + t6176 * t6761) * t6790 + (t6174 * t6569 + t6175 * t6565 + t6176 * t6561) * t6699 + (t6310 * t6368 + t6313 * t6367 + t6316 * t6366) * t6789 + (t6319 * t6368 + t6322 * t6367 + t6325 * t6366) * t6788 + (t6127 * t6135 + t6129 * t6136 + t6131 * t6137 + (t6127 * t6159 + t6129 * t6160 + t6131 * t6161) * t6305) * MDP(8) + (t6027 * t6692 + t6028 * t6691 + t6031 * t6690 + t6138 * t6458 + t6139 * t6455 - t6140 * t6452) * MDP(9) + (t6029 * t6692 + t6030 * t6691 + t6032 * t6690 - t6138 * t6457 - t6139 * t6454 - t6140 * t6451) * MDP(10) + ((t5969 * t6182 + t6089 * t6615) * t6187 + (t5968 * t6181 + t6088 * t6616) * t6185 + (t5967 * t6180 + t6087 * t6617) * t6183) * MDP(11) + (t5964 * t6692 + t5965 * t6691 + t5966 * t6690 + t6072 * t6135 + t6073 * t6136 + t6074 * t6137) * MDP(12) + ((t6182 * t6008 - t6134 * t6615) * t6187 + (t6181 * t6007 - t6133 * t6616) * t6185 + (t6180 * t6006 - t6132 * t6617) * t6183 + (-t6087 * t6614 - t6088 * t6613 - t6089 * t6612) * t6734) * MDP(13) + ((t6011 * t6182 - t6134 * t6140) * t6187 + (t6010 * t6181 - t6133 * t6139) * t6185 + (t6009 * t6180 - t6132 * t6138) * t6183 + (-t6084 * t6614 - t6085 * t6613 - t6086 * t6612) * t6734) * MDP(14) + (t6132 * t6584 + t6133 * t6580 + t6134 * t6576 + (t6132 * t6614 + t6133 * t6613 + t6134 * t6612) * t6329) * t6787 + ((-t6140 * t6762 + (t6212 * t6411 + t5951) * t6187) * t6182 + (t6139 * t6768 + (t6211 * t6412 + t5949) * t6185) * t6181 + (t6138 * t6774 + (t6210 * t6413 + t5947) * t6183) * t6180) * MDP(16) + ((t6140 * t6441 + (-t6215 * t6411 + t5950) * t6187) * t6182 + (-t6139 * t6444 + (-t6214 * t6412 + t5948) * t6185) * t6181 + (-t6138 * t6447 + (-t6213 * t6413 + t5946) * t6183) * t6180) * MDP(17) + MDP(18);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
