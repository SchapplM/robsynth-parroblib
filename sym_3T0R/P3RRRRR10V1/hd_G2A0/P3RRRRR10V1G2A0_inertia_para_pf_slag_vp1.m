% Calculate inertia matrix for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% MX [3x3]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1(xP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:16:34
% EndTime: 2020-08-06 22:16:49
% DurationCPUTime: 15.43s
% Computational Cost: add. (14079->644), mult. (33777->1132), div. (648->10), fcn. (21780->32), ass. (0->445)
t1836 = m(3) * rSges(3,1);
t1741 = (pkin(5) * t1836);
t1875 = -2 * t1741;
t1562 = cos(qJ(3,1));
t1835 = m(3) * rSges(3,2);
t1494 = rSges(3,1) * t1835 - Icges(3,4);
t1553 = sin(qJ(3,1));
t1748 = t1553 * t1494;
t1575 = rSges(3,2) ^ 2;
t1577 = rSges(3,1) ^ 2;
t1511 = -t1575 + t1577;
t1451 = t1511 * m(3) - Icges(3,1) + Icges(3,2);
t1539 = t1562 ^ 2;
t1863 = t1451 * t1539;
t1874 = -0.2e1 * t1562 * t1748 + t1863;
t1559 = cos(qJ(3,2));
t1550 = sin(qJ(3,2));
t1752 = t1550 * t1494;
t1536 = t1559 ^ 2;
t1864 = t1451 * t1536;
t1873 = -0.2e1 * t1559 * t1752 + t1864;
t1556 = cos(qJ(3,3));
t1547 = sin(qJ(3,3));
t1756 = t1547 * t1494;
t1533 = t1556 ^ 2;
t1865 = t1451 * t1533;
t1872 = -0.2e1 * t1556 * t1756 + t1865;
t1557 = cos(qJ(2,3));
t1535 = t1557 ^ 2;
t1574 = rSges(3,3) ^ 2;
t1576 = rSges(2,2) ^ 2;
t1578 = rSges(2,1) ^ 2;
t1803 = Icges(2,1) + Icges(3,2);
t1862 = Icges(2,2) + Icges(3,3) - t1803 + (-t1576 + t1578) * m(2) + (-t1574 + t1575) * m(3);
t1871 = -(t1862 + t1872) * t1535 + t1547 * t1875;
t1560 = cos(qJ(2,2));
t1538 = t1560 ^ 2;
t1870 = -(t1862 + t1873) * t1538 + t1550 * t1875;
t1563 = cos(qJ(2,1));
t1541 = t1563 ^ 2;
t1869 = -(t1862 + t1874) * t1541 + t1553 * t1875;
t1834 = rSges(3,3) * m(3);
t1492 = rSges(3,2) * t1834 - Icges(3,6);
t1493 = rSges(3,1) * t1834 - Icges(3,5);
t1415 = -t1492 * t1556 - t1493 * t1547;
t1416 = -t1492 * t1559 - t1493 * t1550;
t1417 = -t1492 * t1562 - t1493 * t1553;
t1548 = sin(qJ(2,3));
t1565 = rSges(2,3) + pkin(5);
t1830 = m(2) * t1565;
t1591 = -rSges(2,1) * t1830 + Icges(2,5) + t1494;
t1618 = -rSges(2,2) * t1830 + pkin(5) * t1834 + Icges(2,6);
t1734 = t1547 * t1835;
t1838 = -0.2e1 * t1494;
t1861 = (t1618 - t1415) * t1557 + ((-t1451 * t1547 - t1741) * t1556 + t1533 * t1838 + pkin(5) * t1734 + t1591) * t1548;
t1551 = sin(qJ(2,2));
t1733 = t1550 * t1835;
t1860 = (t1618 - t1416) * t1560 + ((-t1451 * t1550 - t1741) * t1559 + t1536 * t1838 + pkin(5) * t1733 + t1591) * t1551;
t1554 = sin(qJ(2,1));
t1732 = t1553 * t1835;
t1859 = (t1618 - t1417) * t1563 + ((-t1451 * t1553 - t1741) * t1562 + t1539 * t1838 + pkin(5) * t1732 + t1591) * t1554;
t1543 = cos(pkin(3));
t1532 = t1543 ^ 2;
t1831 = t1532 - 0.1e1;
t1517 = t1548 * pkin(6);
t1858 = t1517 + pkin(1);
t1518 = t1551 * pkin(6);
t1857 = t1518 + pkin(1);
t1519 = t1554 * pkin(6);
t1856 = t1519 + pkin(1);
t1837 = m(2) * rSges(2,2);
t1801 = rSges(2,1) * t1837 - Icges(2,4);
t1558 = cos(qJ(1,3));
t1470 = t1547 * pkin(5) + pkin(2);
t1827 = pkin(2) * t1533;
t1665 = -t1470 + 0.2e1 * t1827;
t1855 = t1558 * t1665;
t1561 = cos(qJ(1,2));
t1474 = t1550 * pkin(5) + pkin(2);
t1826 = pkin(2) * t1536;
t1664 = -t1474 + 0.2e1 * t1826;
t1854 = t1561 * t1664;
t1564 = cos(qJ(1,1));
t1478 = t1553 * pkin(5) + pkin(2);
t1825 = pkin(2) * t1539;
t1663 = -t1478 + 0.2e1 * t1825;
t1853 = t1564 * t1663;
t1742 = t1562 * t1563;
t1849 = -pkin(2) * t1742 - t1519;
t1743 = t1559 * t1560;
t1848 = -pkin(2) * t1743 - t1518;
t1744 = t1556 * t1557;
t1847 = -pkin(2) * t1744 - t1517;
t1549 = sin(qJ(1,3));
t1542 = sin(pkin(3));
t1818 = pkin(6) * t1542;
t1654 = (t1557 + 0.1e1) * (t1557 - 0.1e1) * t1818;
t1809 = t1558 * pkin(2);
t1714 = t1548 * t1809;
t1765 = t1542 * t1549;
t1842 = (-(pkin(1) * t1765 - pkin(5) * t1558) * t1548 + t1549 * t1654) * t1547 + t1714;
t1552 = sin(qJ(1,2));
t1653 = (t1560 + 0.1e1) * (t1560 - 0.1e1) * t1818;
t1807 = t1561 * pkin(2);
t1712 = t1551 * t1807;
t1763 = t1542 * t1552;
t1841 = (-(pkin(1) * t1763 - pkin(5) * t1561) * t1551 + t1552 * t1653) * t1550 + t1712;
t1555 = sin(qJ(1,1));
t1652 = (t1563 + 0.1e1) * (t1563 - 0.1e1) * t1818;
t1805 = t1564 * pkin(2);
t1710 = t1554 * t1805;
t1761 = t1542 * t1555;
t1840 = (-(pkin(1) * t1761 - pkin(5) * t1564) * t1554 + t1555 * t1652) * t1553 + t1710;
t1839 = -0.2e1 * pkin(1);
t1568 = pkin(1) * rSges(3,1);
t1833 = pkin(1) * rSges(3,2);
t1832 = t1451 / 0.2e1;
t1829 = pkin(1) * t1542;
t1828 = pkin(1) * t1543;
t1520 = pkin(1) * t1548;
t1521 = pkin(1) * t1551;
t1522 = pkin(1) * t1554;
t1824 = pkin(2) * t1556;
t1823 = pkin(2) * t1559;
t1822 = pkin(2) * t1562;
t1821 = pkin(5) * t1557;
t1820 = pkin(5) * t1560;
t1819 = pkin(5) * t1563;
t1817 = pkin(6) * t1543;
t1815 = (t1576 + t1578) * m(2);
t1813 = t1547 * pkin(2);
t1812 = t1550 * pkin(2);
t1811 = t1553 * pkin(2);
t1810 = t1557 * pkin(6);
t1808 = t1560 * pkin(6);
t1806 = t1563 * pkin(6);
t1804 = -0.2e1 * pkin(2) * pkin(6);
t1802 = Icges(3,1) + Icges(2,3);
t1444 = (t1535 - 0.2e1) * t1813 - pkin(5);
t1406 = t1444 * t1558 * t1542 + t1549 * t1858;
t1441 = -pkin(5) + (t1535 - 0.1e1) * t1813;
t1544 = legFrame(3,2);
t1504 = sin(t1544);
t1507 = cos(t1544);
t1766 = t1542 * t1548;
t1674 = t1547 * t1766;
t1617 = pkin(2) * t1557 * t1674;
t1598 = t1549 * t1617;
t1755 = t1547 * t1557;
t1721 = pkin(6) * t1755;
t1648 = t1507 * t1721;
t1649 = t1504 * t1721;
t1655 = t1533 * t1714;
t1671 = t1858 * t1755;
t1718 = t1558 * t1810;
t1724 = t1542 * t1810;
t1753 = t1549 * t1557;
t1355 = ((-t1507 * t1444 + t1504 * t1718) * t1556 + (-t1504 * t1855 - t1648) * t1548) * t1532 + (-(t1504 * t1753 - 0.2e1 * t1507 * t1766) * t1827 + (-t1406 * t1504 - t1507 * t1724) * t1556 - (t1507 * t1470 + t1558 * t1649) * t1766) * t1543 + t1504 * t1655 + (t1441 * t1507 + t1504 * t1598) * t1556 - t1842 * t1504 + t1507 * t1671;
t1534 = 0.1e1 / t1556;
t1800 = t1355 * t1534;
t1445 = (t1538 - 0.2e1) * t1812 - pkin(5);
t1407 = t1445 * t1561 * t1542 + t1552 * t1857;
t1442 = -pkin(5) + (t1538 - 0.1e1) * t1812;
t1545 = legFrame(2,2);
t1505 = sin(t1545);
t1508 = cos(t1545);
t1764 = t1542 * t1551;
t1673 = t1550 * t1764;
t1616 = pkin(2) * t1560 * t1673;
t1597 = t1552 * t1616;
t1751 = t1550 * t1560;
t1720 = pkin(6) * t1751;
t1646 = t1508 * t1720;
t1647 = t1505 * t1720;
t1651 = t1536 * t1712;
t1670 = t1857 * t1751;
t1717 = t1561 * t1808;
t1723 = t1542 * t1808;
t1749 = t1552 * t1560;
t1356 = ((-t1508 * t1445 + t1505 * t1717) * t1559 + (-t1505 * t1854 - t1646) * t1551) * t1532 + (-(t1505 * t1749 - 0.2e1 * t1508 * t1764) * t1826 + (-t1407 * t1505 - t1508 * t1723) * t1559 - (t1508 * t1474 + t1561 * t1647) * t1764) * t1543 + t1505 * t1651 + (t1442 * t1508 + t1505 * t1597) * t1559 - t1841 * t1505 + t1508 * t1670;
t1537 = 0.1e1 / t1559;
t1799 = t1356 * t1537;
t1446 = (t1541 - 0.2e1) * t1811 - pkin(5);
t1408 = t1446 * t1564 * t1542 + t1555 * t1856;
t1443 = -pkin(5) + (t1541 - 0.1e1) * t1811;
t1546 = legFrame(1,2);
t1506 = sin(t1546);
t1509 = cos(t1546);
t1762 = t1542 * t1554;
t1672 = t1553 * t1762;
t1615 = pkin(2) * t1563 * t1672;
t1596 = t1555 * t1615;
t1747 = t1553 * t1563;
t1719 = pkin(6) * t1747;
t1644 = t1509 * t1719;
t1645 = t1506 * t1719;
t1650 = t1539 * t1710;
t1669 = t1856 * t1747;
t1716 = t1564 * t1806;
t1722 = t1542 * t1806;
t1745 = t1555 * t1563;
t1357 = ((-t1509 * t1446 + t1506 * t1716) * t1562 + (-t1506 * t1853 - t1644) * t1554) * t1532 + (-(t1506 * t1745 - 0.2e1 * t1509 * t1762) * t1825 + (-t1408 * t1506 - t1509 * t1722) * t1562 - (t1509 * t1478 + t1564 * t1645) * t1762) * t1543 + t1506 * t1650 + (t1443 * t1509 + t1506 * t1596) * t1562 - t1840 * t1506 + t1509 * t1669;
t1540 = 0.1e1 / t1562;
t1798 = t1357 * t1540;
t1358 = ((-t1504 * t1444 - t1507 * t1718) * t1556 + (t1507 * t1855 - t1649) * t1548) * t1532 + ((0.2e1 * t1504 * t1766 + t1507 * t1753) * t1827 + (t1406 * t1507 - t1504 * t1724) * t1556 + (-t1504 * t1470 + t1558 * t1648) * t1766) * t1543 - t1507 * t1655 + (t1441 * t1504 - t1507 * t1598) * t1556 + t1842 * t1507 + t1504 * t1671;
t1797 = t1358 * t1534;
t1359 = ((-t1505 * t1445 - t1508 * t1717) * t1559 + (t1508 * t1854 - t1647) * t1551) * t1532 + ((0.2e1 * t1505 * t1764 + t1508 * t1749) * t1826 + (t1407 * t1508 - t1505 * t1723) * t1559 + (-t1505 * t1474 + t1561 * t1646) * t1764) * t1543 - t1508 * t1651 + (t1442 * t1505 - t1508 * t1597) * t1559 + t1841 * t1508 + t1505 * t1670;
t1796 = t1359 * t1537;
t1360 = ((-t1506 * t1446 - t1509 * t1716) * t1562 + (t1509 * t1853 - t1645) * t1554) * t1532 + ((0.2e1 * t1506 * t1762 + t1509 * t1745) * t1825 + (t1408 * t1509 - t1506 * t1722) * t1562 + (-t1506 * t1478 + t1564 * t1644) * t1762) * t1543 - t1509 * t1650 + (t1443 * t1506 - t1509 * t1596) * t1562 + t1840 * t1509 + t1506 * t1669;
t1795 = t1360 * t1540;
t1569 = m(2) * rSges(2,1);
t1461 = -t1569 + t1734;
t1469 = -t1834 + t1837;
t1643 = (t1574 + t1575) * m(3) + t1815 + t1802;
t1367 = t1861 * t1542 + t1543 * ((-t1469 * t1548 + (t1556 * t1836 - t1461) * t1557) * pkin(1) + t1643 + t1872);
t1794 = t1367 * t1534;
t1462 = -t1569 + t1733;
t1368 = t1860 * t1542 + t1543 * ((-t1469 * t1551 + (t1559 * t1836 - t1462) * t1560) * pkin(1) + t1643 + t1873);
t1793 = t1368 * t1537;
t1463 = -t1569 + t1732;
t1369 = t1859 * t1542 + t1543 * ((-t1469 * t1554 + (t1562 * t1836 - t1463) * t1563) * pkin(1) + t1643 + t1874);
t1792 = t1369 * t1540;
t1754 = t1547 * t1558;
t1370 = t1549 * (pkin(6) * t1744 - t1665 * t1548) * t1532 + ((-t1444 * t1765 + t1558 * t1858) * t1556 + (-t1549 * pkin(6) * t1674 + t1533 * t1809) * t1557) * t1543 + t1548 * t1549 * t1827 - t1556 * t1558 * t1617 + (-t1549 * t1470 - t1754 * t1829) * t1548 + t1654 * t1754;
t1791 = t1370 * t1534;
t1750 = t1550 * t1561;
t1371 = t1552 * (pkin(6) * t1743 - t1664 * t1551) * t1532 + ((-t1445 * t1763 + t1561 * t1857) * t1559 + (-t1552 * pkin(6) * t1673 + t1536 * t1807) * t1560) * t1543 + t1551 * t1552 * t1826 - t1559 * t1561 * t1616 + (-t1552 * t1474 - t1750 * t1829) * t1551 + t1653 * t1750;
t1790 = t1371 * t1537;
t1746 = t1553 * t1564;
t1372 = t1555 * (pkin(6) * t1742 - t1663 * t1554) * t1532 + ((-t1446 * t1761 + t1564 * t1856) * t1562 + (-t1555 * pkin(6) * t1672 + t1539 * t1805) * t1563) * t1543 + t1554 * t1555 * t1825 - t1562 * t1564 * t1615 + (-t1555 * t1478 - t1746 * t1829) * t1554 + t1652 * t1746;
t1789 = t1372 * t1540;
t1570 = 0.2e1 * qJ(3,3);
t1738 = t1575 + t1577;
t1608 = Icges(2,3) + t1815 + (0.2e1 * t1574 + t1738) * m(3) / 0.2e1 + Icges(3,2) / 0.2e1 + Icges(3,1) / 0.2e1;
t1788 = (cos(t1570) * t1832 - t1494 * sin(t1570) + t1608) * t1534;
t1571 = 0.2e1 * qJ(3,2);
t1787 = (cos(t1571) * t1832 - t1494 * sin(t1571) + t1608) * t1537;
t1572 = 0.2e1 * qJ(3,1);
t1786 = (cos(t1572) * t1832 - t1494 * sin(t1572) + t1608) * t1540;
t1495 = pkin(1) * t1817;
t1497 = pkin(1) * t1813;
t1715 = t1548 * t1824;
t1735 = pkin(2) * pkin(5) * t1542;
t1785 = 0.1e1 / ((-t1556 * t1735 + t1495) * t1557 - t1715 * t1828 + t1542 * (-pkin(5) * t1517 + t1497)) * t1534;
t1498 = pkin(1) * t1812;
t1713 = t1551 * t1823;
t1784 = 0.1e1 / ((-t1559 * t1735 + t1495) * t1560 - t1713 * t1828 + t1542 * (-pkin(5) * t1518 + t1498)) * t1537;
t1499 = pkin(1) * t1811;
t1711 = t1554 * t1822;
t1783 = 0.1e1 / ((-t1562 * t1735 + t1495) * t1563 - t1711 * t1828 + t1542 * (-pkin(5) * t1519 + t1499)) * t1540;
t1782 = t1415 * t1534;
t1781 = t1416 * t1537;
t1780 = t1417 * t1540;
t1433 = -t1715 + t1810;
t1779 = t1433 * t1543;
t1434 = -t1713 + t1808;
t1778 = t1434 * t1543;
t1435 = -t1711 + t1806;
t1777 = t1435 * t1543;
t1776 = t1492 * t1547;
t1775 = t1492 * t1550;
t1774 = t1492 * t1553;
t1773 = t1493 * t1548;
t1772 = t1493 * t1551;
t1771 = t1493 * t1554;
t1581 = pkin(2) ^ 2;
t1770 = t1533 * t1581;
t1769 = t1536 * t1581;
t1768 = t1539 * t1581;
t1767 = t1542 * t1543;
t1582 = 0.1e1 / pkin(2);
t1760 = t1542 * t1582;
t1759 = t1543 * t1558;
t1758 = t1543 * t1561;
t1757 = t1543 * t1564;
t1740 = pkin(5) * t1835;
t1739 = 0.2e1 * t1801;
t1580 = pkin(5) ^ 2;
t1737 = pkin(1) ^ 2 + t1580;
t1736 = t1469 * t1839;
t1731 = -0.2e1 * t1767;
t1730 = t1543 * t1813;
t1729 = t1543 * t1812;
t1728 = t1543 * t1811;
t1727 = pkin(2) * t1754;
t1726 = pkin(2) * t1750;
t1725 = pkin(2) * t1746;
t1706 = 0.2e1 * pkin(2) * t1817;
t1705 = t1556 * t1804;
t1704 = t1559 * t1804;
t1703 = t1562 * t1804;
t1702 = t1831 * pkin(6);
t1482 = t1520 + pkin(6);
t1471 = pkin(5) + t1813;
t1642 = t1831 * t1558 * t1471;
t1397 = t1482 * t1765 + t1548 * t1642;
t1472 = 0.2e1 * t1517 + pkin(1);
t1400 = t1472 * t1765 + t1642;
t1677 = t1542 * t1759;
t1624 = t1504 * t1677;
t1409 = t1532 * t1507 - t1507 + t1624;
t1421 = -t1532 * t1517 + t1858;
t1447 = t1520 - t1702;
t1614 = pkin(6) * t1624;
t1683 = t1471 * t1767;
t1627 = t1507 * t1683;
t1579 = pkin(6) ^ 2;
t1658 = -t1579 + t1770;
t1680 = t1548 * t1770;
t1361 = (t1658 * t1504 * t1765 + t1409 * t1705) * t1535 + (t1409 * t1680 + (t1400 * t1504 - t1627) * t1824 + (t1507 * t1421 - t1548 * t1614) * pkin(6)) * t1557 - (t1507 * t1447 - t1614) * t1824 + pkin(6) * (t1397 * t1504 - t1548 * t1627);
t1695 = t1361 * t1785;
t1623 = t1507 * t1677;
t1410 = t1532 * t1504 - t1504 - t1623;
t1605 = t1658 * t1549;
t1613 = pkin(6) * t1623;
t1630 = t1504 * t1683;
t1362 = (-t1542 * t1507 * t1605 + t1410 * t1705) * t1535 + (t1410 * t1680 - (t1400 * t1507 + t1630) * t1824 + pkin(6) * (t1504 * t1421 + t1548 * t1613)) * t1557 - (t1504 * t1447 + t1613) * t1824 - pkin(6) * (t1397 * t1507 + t1548 * t1630);
t1694 = t1362 * t1785;
t1483 = t1521 + pkin(6);
t1475 = pkin(5) + t1812;
t1641 = t1831 * t1561 * t1475;
t1398 = t1483 * t1763 + t1551 * t1641;
t1476 = 0.2e1 * t1518 + pkin(1);
t1401 = t1476 * t1763 + t1641;
t1676 = t1542 * t1758;
t1622 = t1505 * t1676;
t1411 = t1532 * t1508 - t1508 + t1622;
t1422 = -t1532 * t1518 + t1857;
t1448 = t1521 - t1702;
t1612 = pkin(6) * t1622;
t1682 = t1475 * t1767;
t1626 = t1508 * t1682;
t1657 = -t1579 + t1769;
t1679 = t1551 * t1769;
t1363 = (t1657 * t1505 * t1763 + t1411 * t1704) * t1538 + (t1411 * t1679 + (t1401 * t1505 - t1626) * t1823 + (t1508 * t1422 - t1551 * t1612) * pkin(6)) * t1560 - (t1508 * t1448 - t1612) * t1823 + pkin(6) * (t1398 * t1505 - t1551 * t1626);
t1693 = t1363 * t1784;
t1621 = t1508 * t1676;
t1412 = t1532 * t1505 - t1505 - t1621;
t1607 = t1552 * t1657;
t1611 = pkin(6) * t1621;
t1629 = t1505 * t1682;
t1364 = (-t1542 * t1508 * t1607 + t1412 * t1704) * t1538 + (t1412 * t1679 - (t1401 * t1508 + t1629) * t1823 + pkin(6) * (t1505 * t1422 + t1551 * t1611)) * t1560 - (t1505 * t1448 + t1611) * t1823 - pkin(6) * (t1398 * t1508 + t1551 * t1629);
t1692 = t1364 * t1784;
t1484 = t1522 + pkin(6);
t1479 = pkin(5) + t1811;
t1640 = t1831 * t1564 * t1479;
t1399 = t1484 * t1761 + t1554 * t1640;
t1480 = 0.2e1 * t1519 + pkin(1);
t1402 = t1480 * t1761 + t1640;
t1675 = t1542 * t1757;
t1620 = t1506 * t1675;
t1413 = t1532 * t1509 - t1509 + t1620;
t1423 = -t1532 * t1519 + t1856;
t1449 = t1522 - t1702;
t1610 = pkin(6) * t1620;
t1681 = t1479 * t1767;
t1625 = t1509 * t1681;
t1656 = -t1579 + t1768;
t1678 = t1554 * t1768;
t1365 = (t1656 * t1506 * t1761 + t1413 * t1703) * t1541 + (t1413 * t1678 + (t1402 * t1506 - t1625) * t1822 + (t1509 * t1423 - t1554 * t1610) * pkin(6)) * t1563 - (t1509 * t1449 - t1610) * t1822 + pkin(6) * (t1399 * t1506 - t1554 * t1625);
t1691 = t1365 * t1783;
t1619 = t1509 * t1675;
t1414 = t1532 * t1506 - t1506 - t1619;
t1606 = t1555 * t1656;
t1609 = pkin(6) * t1619;
t1628 = t1506 * t1681;
t1366 = (-t1542 * t1509 * t1606 + t1414 * t1703) * t1541 + (t1414 * t1678 - (t1402 * t1509 + t1628) * t1822 + pkin(6) * (t1506 * t1423 + t1554 * t1609)) * t1563 - (t1506 * t1449 + t1609) * t1822 - pkin(6) * (t1399 * t1509 + t1554 * t1628);
t1690 = t1366 * t1783;
t1373 = (t1556 * t1549 * t1706 + t1658 * t1558) * t1535 + ((t1471 * t1765 + t1558 * t1472) * t1824 - t1548 * t1543 * t1605) * t1557 + (t1558 * t1482 + (t1471 * t1766 - t1543 * t1824) * t1549) * pkin(6);
t1689 = t1373 * t1785;
t1374 = (t1559 * t1552 * t1706 + t1657 * t1561) * t1538 + ((t1475 * t1763 + t1561 * t1476) * t1823 - t1551 * t1543 * t1607) * t1560 + (t1561 * t1483 + (t1475 * t1764 - t1543 * t1823) * t1552) * pkin(6);
t1688 = t1374 * t1784;
t1375 = (t1562 * t1555 * t1706 + t1656 * t1564) * t1541 + ((t1479 * t1761 + t1564 * t1480) * t1822 - t1554 * t1543 * t1606) * t1563 + (t1564 * t1484 + (t1479 * t1762 - t1543 * t1822) * t1555) * pkin(6);
t1687 = t1375 * t1783;
t1686 = t1582 * t1785;
t1685 = t1582 * t1784;
t1684 = t1582 * t1783;
t1464 = t1738 * m(3) + Icges(3,3);
t1376 = ((-t1773 - m(3) * (rSges(3,2) * t1821 + t1568)) * t1556 + (t1548 * t1492 - m(3) * (rSges(3,1) * t1821 - t1833)) * t1547 - t1557 * t1464) * t1542 - t1543 * (-Icges(3,5) * t1547 - Icges(3,6) * t1556 + (rSges(3,1) * t1547 + rSges(3,2) * t1556) * m(3) * (rSges(3,3) + t1520));
t1639 = t1376 * t1686;
t1377 = ((-t1772 - m(3) * (rSges(3,2) * t1820 + t1568)) * t1559 + (t1551 * t1492 - m(3) * (rSges(3,1) * t1820 - t1833)) * t1550 - t1560 * t1464) * t1542 - t1543 * (-Icges(3,5) * t1550 - Icges(3,6) * t1559 + (rSges(3,1) * t1550 + rSges(3,2) * t1559) * m(3) * (rSges(3,3) + t1521));
t1638 = t1377 * t1685;
t1378 = ((-t1771 - m(3) * (rSges(3,2) * t1819 + t1568)) * t1562 + (t1554 * t1492 - m(3) * (rSges(3,1) * t1819 - t1833)) * t1553 - t1563 * t1464) * t1542 - t1543 * (-Icges(3,5) * t1553 - Icges(3,6) * t1562 + (rSges(3,1) * t1553 + rSges(3,2) * t1562) * m(3) * (rSges(3,3) + t1522));
t1637 = t1378 * t1684;
t1636 = t1415 * t1686;
t1635 = t1464 * t1686;
t1634 = t1416 * t1685;
t1633 = t1464 * t1685;
t1632 = t1417 * t1684;
t1631 = t1464 * t1684;
t1604 = t1373 * t1542 * t1686;
t1603 = t1374 * t1542 * t1685;
t1602 = t1375 * t1542 * t1684;
t1595 = Icges(1,3) + (t1576 + (0.2e1 * pkin(5) + rSges(2,3)) * rSges(2,3) + t1737) * m(2) + (t1574 + t1577 + t1737) * m(3) + (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) + t1803;
t1587 = -(rSges(2,1) + t1565) * (-rSges(2,1) + t1565) * m(2) + (-t1580 - t1511) * m(3) + t1802 - t1803;
t1516 = 0.2e1 * m(3) * t1568;
t1515 = -0.2e1 * t1740;
t1514 = 0.2e1 * t1740;
t1440 = 0.2e1 * t1451;
t1405 = t1435 * t1757 + t1555 * t1849;
t1404 = t1434 * t1758 + t1552 * t1848;
t1403 = t1433 * t1759 + t1549 * t1847;
t1396 = 0.1e1 / (pkin(1) * t1777 + (t1849 * pkin(5) + t1499) * t1542);
t1395 = 0.1e1 / (pkin(1) * t1778 + (t1848 * pkin(5) + t1498) * t1542);
t1394 = 0.1e1 / (pkin(1) * t1779 + (t1847 * pkin(5) + t1497) * t1542);
t1393 = t1564 * t1849 + (-t1542 * t1811 - t1777) * t1555;
t1392 = t1561 * t1848 + (-t1542 * t1812 - t1778) * t1552;
t1391 = t1558 * t1847 + (-t1542 * t1813 - t1779) * t1549;
t1384 = (t1506 * t1435 + t1509 * t1725) * t1542 + t1405 * t1509 - t1506 * t1728;
t1383 = (t1509 * t1435 - t1506 * t1725) * t1542 - t1405 * t1506 - t1509 * t1728;
t1382 = (t1505 * t1434 + t1508 * t1726) * t1542 + t1404 * t1508 - t1505 * t1729;
t1381 = (t1508 * t1434 - t1505 * t1726) * t1542 - t1404 * t1505 - t1508 * t1729;
t1380 = (t1504 * t1433 + t1507 * t1727) * t1542 + t1403 * t1507 - t1504 * t1730;
t1379 = (t1507 * t1433 - t1504 * t1727) * t1542 - t1403 * t1504 - t1507 * t1730;
t1354 = (0.2e1 * t1554 * (-t1493 * t1562 + t1774 + t1801) * t1563 + t1440 * t1539 + (t1515 - 0.4e1 * t1748) * t1562 + t1587 + t1869) * t1532 - t1859 * t1731 + ((t1516 + 0.2e1 * t1771) * t1562 + (-t1739 - 0.2e1 * t1774) * t1554 + t1463 * t1839) * t1563 - t1863 + (t1514 + 0.2e1 * t1748) * t1562 + t1554 * t1736 + t1595 - t1869;
t1353 = (0.2e1 * t1551 * (-t1493 * t1559 + t1775 + t1801) * t1560 + t1440 * t1536 + (t1515 - 0.4e1 * t1752) * t1559 + t1587 + t1870) * t1532 - t1860 * t1731 + ((t1516 + 0.2e1 * t1772) * t1559 + (-t1739 - 0.2e1 * t1775) * t1551 + t1462 * t1839) * t1560 - t1864 + (t1514 + 0.2e1 * t1752) * t1559 + t1551 * t1736 + t1595 - t1870;
t1352 = (0.2e1 * t1548 * (-t1493 * t1556 + t1776 + t1801) * t1557 + t1440 * t1533 + (t1515 - 0.4e1 * t1756) * t1556 + t1587 + t1871) * t1532 - t1861 * t1731 + ((t1516 + 0.2e1 * t1773) * t1556 + (-t1739 - 0.2e1 * t1776) * t1548 + t1461 * t1839) * t1557 - t1865 + (t1514 + 0.2e1 * t1756) * t1556 + t1548 * t1736 + t1595 - t1871;
t1351 = -t1464 * t1602 + (t1372 * t1780 + t1378 * t1393) * t1396;
t1350 = -t1464 * t1603 + (t1371 * t1781 + t1377 * t1392) * t1395;
t1349 = -t1464 * t1604 + (t1370 * t1782 + t1376 * t1391) * t1394;
t1348 = -t1417 * t1602 + (t1369 * t1393 + t1372 * t1786) * t1396;
t1347 = -t1416 * t1603 + (t1368 * t1392 + t1371 * t1787) * t1395;
t1346 = -t1415 * t1604 + (t1367 * t1391 + t1370 * t1788) * t1394;
t1345 = t1366 * t1631 + (t1360 * t1780 + t1378 * t1384) * t1396;
t1344 = t1365 * t1631 + (t1357 * t1780 + t1378 * t1383) * t1396;
t1343 = t1364 * t1633 + (t1359 * t1781 + t1377 * t1382) * t1395;
t1342 = t1363 * t1633 + (t1356 * t1781 + t1377 * t1381) * t1395;
t1341 = t1362 * t1635 + (t1358 * t1782 + t1376 * t1380) * t1394;
t1340 = t1361 * t1635 + (t1355 * t1782 + t1376 * t1379) * t1394;
t1339 = t1366 * t1632 + (t1360 * t1786 + t1369 * t1384) * t1396;
t1338 = t1365 * t1632 + (t1357 * t1786 + t1369 * t1383) * t1396;
t1337 = t1364 * t1634 + (t1359 * t1787 + t1368 * t1382) * t1395;
t1336 = t1363 * t1634 + (t1356 * t1787 + t1368 * t1381) * t1395;
t1335 = t1362 * t1636 + (t1358 * t1788 + t1367 * t1380) * t1394;
t1334 = t1361 * t1636 + (t1355 * t1788 + t1367 * t1379) * t1394;
t1333 = -t1378 * t1602 + (t1354 * t1393 + t1369 * t1789) * t1396;
t1332 = -t1377 * t1603 + (t1353 * t1392 + t1368 * t1790) * t1395;
t1331 = -t1376 * t1604 + (t1352 * t1391 + t1367 * t1791) * t1394;
t1330 = t1366 * t1637 + (t1354 * t1384 + t1360 * t1792) * t1396;
t1329 = t1365 * t1637 + (t1354 * t1383 + t1357 * t1792) * t1396;
t1328 = t1364 * t1638 + (t1353 * t1382 + t1359 * t1793) * t1395;
t1327 = t1363 * t1638 + (t1353 * t1381 + t1356 * t1793) * t1395;
t1326 = t1362 * t1639 + (t1352 * t1380 + t1358 * t1794) * t1394;
t1325 = t1361 * t1639 + (t1352 * t1379 + t1355 * t1794) * t1394;
t1 = [m(4) + (t1330 * t1384 + t1339 * t1795) * t1396 + (t1328 * t1382 + t1337 * t1796) * t1395 + (t1326 * t1380 + t1335 * t1797) * t1394 + (t1341 * t1694 + t1343 * t1692 + t1345 * t1690) * t1582, (t1330 * t1383 + t1339 * t1798) * t1396 + (t1328 * t1381 + t1337 * t1799) * t1395 + (t1326 * t1379 + t1335 * t1800) * t1394 + (t1341 * t1695 + t1343 * t1693 + t1345 * t1691) * t1582, (t1330 * t1393 + t1339 * t1789) * t1396 + (t1328 * t1392 + t1337 * t1790) * t1395 + (t1326 * t1391 + t1335 * t1791) * t1394 + (-t1341 * t1689 - t1343 * t1688 - t1345 * t1687) * t1760; (t1329 * t1384 + t1338 * t1795) * t1396 + (t1327 * t1382 + t1336 * t1796) * t1395 + (t1325 * t1380 + t1334 * t1797) * t1394 + (t1340 * t1694 + t1342 * t1692 + t1344 * t1690) * t1582, m(4) + (t1329 * t1383 + t1338 * t1798) * t1396 + (t1327 * t1381 + t1336 * t1799) * t1395 + (t1325 * t1379 + t1334 * t1800) * t1394 + (t1340 * t1695 + t1342 * t1693 + t1344 * t1691) * t1582, (t1329 * t1393 + t1338 * t1789) * t1396 + (t1327 * t1392 + t1336 * t1790) * t1395 + (t1325 * t1391 + t1334 * t1791) * t1394 + (-t1340 * t1689 - t1342 * t1688 - t1344 * t1687) * t1760; (t1333 * t1384 + t1348 * t1795) * t1396 + (t1332 * t1382 + t1347 * t1796) * t1395 + (t1331 * t1380 + t1346 * t1797) * t1394 + (t1349 * t1694 + t1350 * t1692 + t1351 * t1690) * t1582, (t1333 * t1383 + t1348 * t1798) * t1396 + (t1332 * t1381 + t1347 * t1799) * t1395 + (t1331 * t1379 + t1346 * t1800) * t1394 + (t1349 * t1695 + t1350 * t1693 + t1351 * t1691) * t1582, m(4) + (t1333 * t1393 + t1348 * t1789) * t1396 + (t1332 * t1392 + t1347 * t1790) * t1395 + (t1331 * t1391 + t1346 * t1791) * t1394 + (-t1349 * t1689 - t1350 * t1688 - t1351 * t1687) * t1760;];
MX  = t1;
