% Calculate inertia matrix for parallel robot
% P3RRRRR10V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% MX [3x3]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 22:49
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2(xP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G2A0_inertia_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:21:21
% EndTime: 2020-08-06 22:21:31
% DurationCPUTime: 10.16s
% Computational Cost: add. (11325->596), mult. (27783->1079), div. (648->10), fcn. (21699->26), ass. (0->429)
t1419 = mrSges(3,3) - mrSges(2,2);
t1721 = t1419 * pkin(5) + Ifges(2,6);
t1423 = sin(qJ(3,3));
t1432 = cos(qJ(3,3));
t1334 = Ifges(3,5) * t1423 + Ifges(3,6) * t1432;
t1407 = t1432 ^ 2;
t1418 = Ifges(3,2) - Ifges(3,1);
t1424 = sin(qJ(2,3));
t1433 = cos(qJ(2,3));
t1607 = t1423 * t1432;
t1688 = Ifges(2,5) - Ifges(3,4);
t1692 = 2 * Ifges(3,4);
t1340 = t1423 * mrSges(3,2) - mrSges(2,1);
t1708 = -mrSges(3,1) * t1432 + t1340;
t1720 = t1433 * (-t1334 + t1721) + (t1708 * pkin(5) + t1407 * t1692 - t1418 * t1607 + t1688) * t1424;
t1426 = sin(qJ(3,2));
t1435 = cos(qJ(3,2));
t1335 = Ifges(3,5) * t1426 + Ifges(3,6) * t1435;
t1410 = t1435 ^ 2;
t1427 = sin(qJ(2,2));
t1436 = cos(qJ(2,2));
t1603 = t1426 * t1435;
t1341 = t1426 * mrSges(3,2) - mrSges(2,1);
t1707 = -mrSges(3,1) * t1435 + t1341;
t1719 = t1436 * (-t1335 + t1721) + (t1707 * pkin(5) + t1410 * t1692 - t1418 * t1603 + t1688) * t1427;
t1429 = sin(qJ(3,1));
t1438 = cos(qJ(3,1));
t1336 = Ifges(3,5) * t1429 + Ifges(3,6) * t1438;
t1413 = t1438 ^ 2;
t1430 = sin(qJ(2,1));
t1439 = cos(qJ(2,1));
t1599 = t1429 * t1438;
t1342 = t1429 * mrSges(3,2) - mrSges(2,1);
t1706 = -mrSges(3,1) * t1438 + t1342;
t1718 = t1439 * (-t1336 + t1721) + (t1706 * pkin(5) + t1413 * t1692 - t1418 * t1599 + t1688) * t1430;
t1417 = cos(pkin(3));
t1403 = t1417 ^ 2;
t1687 = t1403 - 0.1e1;
t1388 = t1424 * pkin(6);
t1717 = t1388 + pkin(1);
t1389 = t1427 * pkin(6);
t1716 = t1389 + pkin(1);
t1390 = t1430 * pkin(6);
t1715 = t1390 + pkin(1);
t1434 = cos(qJ(1,3));
t1671 = t1423 * pkin(5);
t1349 = pkin(2) + t1671;
t1684 = pkin(2) * t1407;
t1516 = -t1349 + 0.2e1 * t1684;
t1714 = t1434 * t1516;
t1437 = cos(qJ(1,2));
t1668 = t1426 * pkin(5);
t1353 = pkin(2) + t1668;
t1683 = pkin(2) * t1410;
t1515 = -t1353 + 0.2e1 * t1683;
t1713 = t1437 * t1515;
t1440 = cos(qJ(1,1));
t1665 = t1429 * pkin(5);
t1357 = pkin(2) + t1665;
t1682 = pkin(2) * t1413;
t1514 = -t1357 + 0.2e1 * t1682;
t1712 = t1440 * t1514;
t1561 = Ifges(3,4) * t1607;
t1337 = 0.2e1 * t1561;
t1610 = t1418 * t1407;
t1689 = Ifges(3,1) + Ifges(2,3);
t1711 = t1337 + t1610 + t1689;
t1560 = Ifges(3,4) * t1603;
t1338 = 0.2e1 * t1560;
t1609 = t1418 * t1410;
t1710 = t1338 + t1609 + t1689;
t1559 = Ifges(3,4) * t1599;
t1339 = 0.2e1 * t1559;
t1608 = t1418 * t1413;
t1709 = t1339 + t1608 + t1689;
t1690 = Ifges(2,1) + Ifges(3,2);
t1517 = Ifges(2,2) + Ifges(3,3) - t1690;
t1705 = -t1517 - t1608;
t1704 = -t1517 - t1609;
t1703 = -t1517 - t1610;
t1593 = t1438 * t1439;
t1702 = -pkin(2) * t1593 - t1390;
t1594 = t1435 * t1436;
t1701 = -pkin(2) * t1594 - t1389;
t1595 = t1432 * t1433;
t1700 = -pkin(2) * t1595 - t1388;
t1444 = m(2) + m(3);
t1699 = (-t1444 * pkin(5) - (2 * mrSges(2,3))) * pkin(5);
t1425 = sin(qJ(1,3));
t1416 = sin(pkin(3));
t1675 = pkin(6) * t1416;
t1505 = (t1433 + 0.1e1) * (t1433 - 0.1e1) * t1675;
t1663 = t1434 * pkin(2);
t1569 = t1424 * t1663;
t1619 = t1416 * t1425;
t1695 = (-(pkin(1) * t1619 - pkin(5) * t1434) * t1424 + t1425 * t1505) * t1423 + t1569;
t1428 = sin(qJ(1,2));
t1504 = (t1436 + 0.1e1) * (t1436 - 0.1e1) * t1675;
t1661 = t1437 * pkin(2);
t1567 = t1427 * t1661;
t1617 = t1416 * t1428;
t1694 = (-(pkin(1) * t1617 - pkin(5) * t1437) * t1427 + t1428 * t1504) * t1426 + t1567;
t1431 = sin(qJ(1,1));
t1503 = (t1439 + 0.1e1) * (t1439 - 0.1e1) * t1675;
t1659 = t1440 * pkin(2);
t1565 = t1430 * t1659;
t1615 = t1416 * t1431;
t1693 = (-(pkin(1) * t1615 - pkin(5) * t1440) * t1430 + t1431 * t1503) * t1429 + t1565;
t1686 = pkin(1) * t1416;
t1685 = pkin(1) * t1417;
t1391 = pkin(1) * t1424;
t1392 = pkin(1) * t1427;
t1393 = pkin(1) * t1430;
t1681 = pkin(2) * t1432;
t1680 = pkin(2) * t1435;
t1679 = pkin(2) * t1438;
t1678 = pkin(5) * t1433;
t1677 = pkin(5) * t1436;
t1676 = pkin(5) * t1439;
t1674 = pkin(6) * t1417;
t1672 = t1423 * pkin(2);
t1670 = t1424 * pkin(2);
t1669 = t1426 * pkin(2);
t1667 = t1427 * pkin(2);
t1666 = t1429 * pkin(2);
t1664 = t1433 * pkin(6);
t1662 = t1436 * pkin(6);
t1660 = t1439 * pkin(6);
t1655 = Ifges(3,4) * t1423;
t1654 = Ifges(3,4) * t1426;
t1653 = Ifges(3,4) * t1429;
t1652 = -0.2e1 * pkin(2) * pkin(6);
t1651 = Ifges(3,6) * t1423 + Ifges(2,4);
t1650 = Ifges(3,6) * t1426 + Ifges(2,4);
t1649 = Ifges(3,6) * t1429 + Ifges(2,4);
t1409 = t1433 ^ 2;
t1328 = (t1409 - 0.2e1) * t1672 - pkin(5);
t1298 = t1328 * t1434 * t1416 + t1425 * t1717;
t1325 = -pkin(5) + (t1409 - 0.1e1) * t1672;
t1420 = legFrame(3,2);
t1382 = sin(t1420);
t1385 = cos(t1420);
t1620 = t1416 * t1424;
t1520 = t1423 * t1620;
t1471 = pkin(2) * t1433 * t1520;
t1454 = t1425 * t1471;
t1606 = t1423 * t1433;
t1529 = t1385 * t1606;
t1500 = pkin(6) * t1529;
t1532 = t1382 * t1606;
t1501 = pkin(6) * t1532;
t1507 = t1407 * t1569;
t1573 = t1434 * t1664;
t1576 = t1416 * t1664;
t1604 = t1425 * t1433;
t1247 = ((-t1385 * t1328 + t1382 * t1573) * t1432 + (-t1382 * t1714 - t1500) * t1424) * t1403 + (-(t1382 * t1604 - 0.2e1 * t1385 * t1620) * t1684 + (-t1298 * t1382 - t1385 * t1576) * t1432 - (t1385 * t1349 + t1434 * t1501) * t1620) * t1417 + t1382 * t1507 + (t1325 * t1385 + t1382 * t1454) * t1432 - t1695 * t1382 + t1717 * t1529;
t1408 = 0.1e1 / t1432;
t1648 = t1247 * t1408;
t1412 = t1436 ^ 2;
t1329 = (t1412 - 0.2e1) * t1669 - pkin(5);
t1299 = t1329 * t1437 * t1416 + t1428 * t1716;
t1326 = -pkin(5) + (t1412 - 0.1e1) * t1669;
t1421 = legFrame(2,2);
t1383 = sin(t1421);
t1386 = cos(t1421);
t1618 = t1416 * t1427;
t1519 = t1426 * t1618;
t1470 = pkin(2) * t1436 * t1519;
t1453 = t1428 * t1470;
t1602 = t1426 * t1436;
t1528 = t1386 * t1602;
t1498 = pkin(6) * t1528;
t1531 = t1383 * t1602;
t1499 = pkin(6) * t1531;
t1502 = t1410 * t1567;
t1572 = t1437 * t1662;
t1575 = t1416 * t1662;
t1600 = t1428 * t1436;
t1248 = ((-t1386 * t1329 + t1383 * t1572) * t1435 + (-t1383 * t1713 - t1498) * t1427) * t1403 + (-(t1383 * t1600 - 0.2e1 * t1386 * t1618) * t1683 + (-t1299 * t1383 - t1386 * t1575) * t1435 - (t1386 * t1353 + t1437 * t1499) * t1618) * t1417 + t1383 * t1502 + (t1326 * t1386 + t1383 * t1453) * t1435 - t1694 * t1383 + t1716 * t1528;
t1411 = 0.1e1 / t1435;
t1647 = t1248 * t1411;
t1415 = t1439 ^ 2;
t1330 = (t1415 - 0.2e1) * t1666 - pkin(5);
t1300 = t1330 * t1440 * t1416 + t1431 * t1715;
t1327 = -pkin(5) + (t1415 - 0.1e1) * t1666;
t1422 = legFrame(1,2);
t1384 = sin(t1422);
t1387 = cos(t1422);
t1616 = t1416 * t1430;
t1518 = t1429 * t1616;
t1469 = pkin(2) * t1439 * t1518;
t1452 = t1431 * t1469;
t1598 = t1429 * t1439;
t1527 = t1387 * t1598;
t1496 = pkin(6) * t1527;
t1530 = t1384 * t1598;
t1497 = pkin(6) * t1530;
t1506 = t1413 * t1565;
t1571 = t1440 * t1660;
t1574 = t1416 * t1660;
t1596 = t1431 * t1439;
t1249 = ((-t1387 * t1330 + t1384 * t1571) * t1438 + (-t1384 * t1712 - t1496) * t1430) * t1403 + (-(t1384 * t1596 - 0.2e1 * t1387 * t1616) * t1682 + (-t1300 * t1384 - t1387 * t1574) * t1438 - (t1387 * t1357 + t1440 * t1497) * t1616) * t1417 + t1384 * t1506 + (t1327 * t1387 + t1384 * t1452) * t1438 - t1693 * t1384 + t1715 * t1527;
t1414 = 0.1e1 / t1438;
t1646 = t1249 * t1414;
t1250 = ((-t1382 * t1328 - t1385 * t1573) * t1432 + (t1385 * t1714 - t1501) * t1424) * t1403 + ((0.2e1 * t1382 * t1620 + t1385 * t1604) * t1684 + (t1298 * t1385 - t1382 * t1576) * t1432 + (-t1382 * t1349 + t1434 * t1500) * t1620) * t1417 - t1385 * t1507 + (t1325 * t1382 - t1385 * t1454) * t1432 + t1695 * t1385 + t1717 * t1532;
t1645 = t1250 * t1408;
t1251 = ((-t1383 * t1329 - t1386 * t1572) * t1435 + (t1386 * t1713 - t1499) * t1427) * t1403 + ((0.2e1 * t1383 * t1618 + t1386 * t1600) * t1683 + (t1299 * t1386 - t1383 * t1575) * t1435 + (-t1383 * t1353 + t1437 * t1498) * t1618) * t1417 - t1386 * t1502 + (t1326 * t1383 - t1386 * t1453) * t1435 + t1694 * t1386 + t1716 * t1531;
t1644 = t1251 * t1411;
t1252 = ((-t1384 * t1330 - t1387 * t1571) * t1438 + (t1387 * t1712 - t1497) * t1430) * t1403 + ((0.2e1 * t1384 * t1616 + t1387 * t1596) * t1682 + (t1300 * t1387 - t1384 * t1574) * t1438 + (-t1384 * t1357 + t1440 * t1496) * t1616) * t1417 - t1387 * t1506 + (t1327 * t1384 - t1387 * t1452) * t1438 + t1693 * t1387 + t1715 * t1530;
t1643 = t1252 * t1414;
t1605 = t1423 * t1434;
t1262 = t1425 * (pkin(6) * t1595 - t1516 * t1424) * t1403 + ((-t1328 * t1619 + t1434 * t1717) * t1432 + (-t1425 * pkin(6) * t1520 + t1407 * t1663) * t1433) * t1417 + t1407 * t1425 * t1670 - t1432 * t1434 * t1471 + (-t1425 * t1349 - t1605 * t1686) * t1424 + t1505 * t1605;
t1642 = t1262 * t1408;
t1601 = t1426 * t1437;
t1263 = t1428 * (pkin(6) * t1594 - t1515 * t1427) * t1403 + ((-t1329 * t1617 + t1437 * t1716) * t1435 + (-t1428 * pkin(6) * t1519 + t1410 * t1661) * t1436) * t1417 + t1410 * t1428 * t1667 - t1435 * t1437 * t1470 + (-t1428 * t1353 - t1601 * t1686) * t1427 + t1504 * t1601;
t1641 = t1263 * t1411;
t1597 = t1429 * t1440;
t1264 = t1431 * (pkin(6) * t1593 - t1514 * t1430) * t1403 + ((-t1330 * t1615 + t1440 * t1715) * t1438 + (-t1431 * pkin(6) * t1518 + t1413 * t1659) * t1439) * t1417 + t1430 * t1431 * t1682 - t1438 * t1440 * t1469 + (-t1431 * t1357 - t1597 * t1686) * t1430 + t1503 * t1597;
t1640 = t1264 * t1414;
t1268 = t1720 * t1416 + t1417 * ((t1419 * t1424 - t1708 * t1433) * pkin(1) + t1711);
t1639 = t1268 * t1408;
t1269 = t1719 * t1416 + t1417 * ((t1419 * t1427 - t1707 * t1436) * pkin(1) + t1710);
t1638 = t1269 * t1411;
t1270 = t1718 * t1416 + t1417 * ((t1419 * t1430 - t1706 * t1439) * pkin(1) + t1709);
t1637 = t1270 * t1414;
t1364 = pkin(1) * t1674;
t1365 = pkin(1) * t1672;
t1570 = t1432 * t1670;
t1590 = pkin(2) * pkin(5) * t1416;
t1636 = 0.1e1 / ((-t1432 * t1590 + t1364) * t1433 - t1570 * t1685 + t1416 * (-pkin(5) * t1388 + t1365)) * t1408;
t1366 = pkin(1) * t1669;
t1568 = t1435 * t1667;
t1635 = 0.1e1 / ((-t1435 * t1590 + t1364) * t1436 - t1568 * t1685 + t1416 * (-pkin(5) * t1389 + t1366)) * t1411;
t1367 = pkin(1) * t1666;
t1566 = t1430 * t1679;
t1634 = 0.1e1 / ((-t1438 * t1590 + t1364) * t1439 - t1566 * t1685 + t1416 * (-pkin(5) * t1390 + t1367)) * t1414;
t1633 = t1711 * t1408;
t1632 = t1710 * t1411;
t1631 = t1709 * t1414;
t1319 = -t1570 + t1664;
t1630 = t1319 * t1417;
t1320 = -t1568 + t1662;
t1629 = t1320 * t1417;
t1321 = -t1566 + t1660;
t1628 = t1321 * t1417;
t1627 = t1334 * t1408;
t1626 = t1335 * t1411;
t1625 = t1336 * t1414;
t1447 = pkin(2) ^ 2;
t1624 = t1407 * t1447;
t1623 = t1410 * t1447;
t1622 = t1413 * t1447;
t1621 = t1416 * t1417;
t1448 = 0.1e1 / pkin(2);
t1614 = t1416 * t1448;
t1613 = t1417 * t1434;
t1612 = t1417 * t1437;
t1611 = t1417 * t1440;
t1591 = 0.2e1 * t1419 * pkin(1);
t1589 = mrSges(3,1) * t1671;
t1588 = mrSges(3,1) * t1668;
t1587 = mrSges(3,1) * t1665;
t1586 = 0.2e1 * t1621;
t1582 = t1417 * t1672;
t1581 = t1417 * t1669;
t1580 = t1417 * t1666;
t1579 = pkin(2) * t1605;
t1578 = pkin(2) * t1601;
t1577 = pkin(2) * t1597;
t1558 = 0.2e1 * pkin(2) * t1674;
t1557 = t1432 * t1652;
t1556 = t1435 * t1652;
t1555 = t1438 * t1652;
t1551 = t1687 * pkin(6);
t1361 = t1391 + pkin(6);
t1350 = pkin(5) + t1672;
t1492 = t1687 * t1434 * t1350;
t1289 = t1361 * t1619 + t1424 * t1492;
t1351 = 0.2e1 * t1388 + pkin(1);
t1292 = t1351 * t1619 + t1492;
t1523 = t1416 * t1613;
t1477 = t1382 * t1523;
t1304 = t1403 * t1385 - t1385 + t1477;
t1313 = -t1403 * t1388 + t1717;
t1331 = t1391 - t1551;
t1468 = pkin(6) * t1477;
t1535 = t1350 * t1621;
t1480 = t1385 * t1535;
t1445 = pkin(6) ^ 2;
t1510 = -t1445 + t1624;
t1526 = t1424 * t1624;
t1253 = (t1510 * t1382 * t1619 + t1304 * t1557) * t1409 + (t1304 * t1526 + (t1292 * t1382 - t1480) * t1681 + (t1385 * t1313 - t1424 * t1468) * pkin(6)) * t1433 - (t1385 * t1331 - t1468) * t1681 + pkin(6) * (t1289 * t1382 - t1424 * t1480);
t1547 = t1253 * t1636;
t1476 = t1385 * t1523;
t1305 = t1403 * t1382 - t1382 - t1476;
t1462 = t1425 * t1510;
t1467 = pkin(6) * t1476;
t1483 = t1382 * t1535;
t1254 = (-t1416 * t1385 * t1462 + t1305 * t1557) * t1409 + (t1305 * t1526 - (t1292 * t1385 + t1483) * t1681 + pkin(6) * (t1382 * t1313 + t1424 * t1467)) * t1433 - (t1382 * t1331 + t1467) * t1681 - pkin(6) * (t1289 * t1385 + t1424 * t1483);
t1546 = t1254 * t1636;
t1362 = t1392 + pkin(6);
t1354 = pkin(5) + t1669;
t1491 = t1687 * t1437 * t1354;
t1290 = t1362 * t1617 + t1427 * t1491;
t1355 = 0.2e1 * t1389 + pkin(1);
t1293 = t1355 * t1617 + t1491;
t1522 = t1416 * t1612;
t1475 = t1383 * t1522;
t1306 = t1403 * t1386 - t1386 + t1475;
t1314 = -t1403 * t1389 + t1716;
t1332 = t1392 - t1551;
t1466 = pkin(6) * t1475;
t1534 = t1354 * t1621;
t1479 = t1386 * t1534;
t1509 = -t1445 + t1623;
t1525 = t1427 * t1623;
t1255 = (t1509 * t1383 * t1617 + t1306 * t1556) * t1412 + (t1306 * t1525 + (t1293 * t1383 - t1479) * t1680 + (t1386 * t1314 - t1427 * t1466) * pkin(6)) * t1436 - (t1386 * t1332 - t1466) * t1680 + pkin(6) * (t1290 * t1383 - t1427 * t1479);
t1545 = t1255 * t1635;
t1474 = t1386 * t1522;
t1307 = t1403 * t1383 - t1383 - t1474;
t1461 = t1428 * t1509;
t1465 = pkin(6) * t1474;
t1482 = t1383 * t1534;
t1256 = (-t1416 * t1386 * t1461 + t1307 * t1556) * t1412 + (t1307 * t1525 - (t1293 * t1386 + t1482) * t1680 + pkin(6) * (t1383 * t1314 + t1427 * t1465)) * t1436 - (t1383 * t1332 + t1465) * t1680 - pkin(6) * (t1290 * t1386 + t1427 * t1482);
t1544 = t1256 * t1635;
t1363 = t1393 + pkin(6);
t1358 = pkin(5) + t1666;
t1490 = t1687 * t1440 * t1358;
t1291 = t1363 * t1615 + t1430 * t1490;
t1359 = 0.2e1 * t1390 + pkin(1);
t1294 = t1359 * t1615 + t1490;
t1521 = t1416 * t1611;
t1473 = t1384 * t1521;
t1308 = t1403 * t1387 - t1387 + t1473;
t1315 = -t1403 * t1390 + t1715;
t1333 = t1393 - t1551;
t1464 = pkin(6) * t1473;
t1533 = t1358 * t1621;
t1478 = t1387 * t1533;
t1508 = -t1445 + t1622;
t1524 = t1430 * t1622;
t1257 = (t1508 * t1384 * t1615 + t1308 * t1555) * t1415 + (t1308 * t1524 + (t1294 * t1384 - t1478) * t1679 + (t1387 * t1315 - t1430 * t1464) * pkin(6)) * t1439 - (t1387 * t1333 - t1464) * t1679 + pkin(6) * (t1291 * t1384 - t1430 * t1478);
t1543 = t1257 * t1634;
t1472 = t1387 * t1521;
t1309 = t1403 * t1384 - t1384 - t1472;
t1460 = t1431 * t1508;
t1463 = pkin(6) * t1472;
t1481 = t1384 * t1533;
t1258 = (-t1416 * t1387 * t1460 + t1309 * t1555) * t1415 + (t1309 * t1524 - (t1294 * t1387 + t1481) * t1679 + pkin(6) * (t1384 * t1315 + t1430 * t1463)) * t1439 - (t1384 * t1333 + t1463) * t1679 - pkin(6) * (t1291 * t1387 + t1430 * t1481);
t1542 = t1258 * t1634;
t1265 = (t1432 * t1425 * t1558 + t1510 * t1434) * t1409 + ((t1350 * t1619 + t1434 * t1351) * t1681 - t1424 * t1417 * t1462) * t1433 + (t1434 * t1361 + (t1350 * t1620 - t1417 * t1681) * t1425) * pkin(6);
t1541 = t1265 * t1636;
t1266 = (t1435 * t1428 * t1558 + t1509 * t1437) * t1412 + ((t1354 * t1617 + t1437 * t1355) * t1680 - t1427 * t1417 * t1461) * t1436 + (t1437 * t1362 + (t1354 * t1618 - t1417 * t1680) * t1428) * pkin(6);
t1540 = t1266 * t1635;
t1267 = (t1438 * t1431 * t1558 + t1508 * t1440) * t1415 + ((t1358 * t1615 + t1440 * t1359) * t1679 - t1430 * t1417 * t1460) * t1439 + (t1440 * t1363 + (t1358 * t1616 - t1417 * t1679) * t1431) * pkin(6);
t1539 = t1267 * t1634;
t1538 = t1448 * t1636;
t1537 = t1448 * t1635;
t1536 = t1448 * t1634;
t1443 = pkin(1) * mrSges(3,1);
t1513 = -t1424 * Ifges(3,5) + t1443;
t1512 = -t1427 * Ifges(3,5) + t1443;
t1511 = -t1430 * Ifges(3,5) + t1443;
t1495 = Ifges(3,3) * t1538;
t1494 = Ifges(3,3) * t1537;
t1493 = Ifges(3,3) * t1536;
t1442 = pkin(1) * mrSges(3,2);
t1277 = ((-mrSges(3,1) * t1678 - t1424 * Ifges(3,6) + t1442) * t1423 + (-mrSges(3,2) * t1678 - t1513) * t1432 - Ifges(3,3) * t1433) * t1416 - t1417 * ((mrSges(3,1) * t1391 - Ifges(3,5)) * t1423 + (mrSges(3,2) * t1391 - Ifges(3,6)) * t1432);
t1489 = t1277 * t1538;
t1278 = ((-mrSges(3,1) * t1677 - t1427 * Ifges(3,6) + t1442) * t1426 + (-mrSges(3,2) * t1677 - t1512) * t1435 - Ifges(3,3) * t1436) * t1416 - t1417 * ((mrSges(3,1) * t1392 - Ifges(3,5)) * t1426 + (mrSges(3,2) * t1392 - Ifges(3,6)) * t1435);
t1488 = t1278 * t1537;
t1279 = ((-mrSges(3,1) * t1676 - t1430 * Ifges(3,6) + t1442) * t1429 + (-mrSges(3,2) * t1676 - t1511) * t1438 - Ifges(3,3) * t1439) * t1416 - t1417 * ((mrSges(3,1) * t1393 - Ifges(3,5)) * t1429 + (mrSges(3,2) * t1393 - Ifges(3,6)) * t1438);
t1487 = t1279 * t1536;
t1486 = t1334 * t1538;
t1485 = t1335 * t1537;
t1484 = t1336 * t1536;
t1459 = t1265 * t1416 * t1538;
t1458 = t1266 * t1416 * t1537;
t1457 = t1267 * t1416 * t1536;
t1456 = Ifges(2,3) - Ifges(2,1) - t1418 + t1699;
t1455 = t1444 * pkin(1) ^ 2 + Ifges(1,3) + t1690 - t1699;
t1441 = pkin(5) * mrSges(3,2);
t1404 = -0.2e1 * t1441;
t1297 = t1321 * t1611 + t1431 * t1702;
t1296 = t1320 * t1612 + t1428 * t1701;
t1295 = t1319 * t1613 + t1425 * t1700;
t1288 = 0.1e1 / (pkin(1) * t1628 + (pkin(5) * t1702 + t1367) * t1416);
t1287 = 0.1e1 / (pkin(1) * t1629 + (pkin(5) * t1701 + t1366) * t1416);
t1286 = 0.1e1 / (pkin(1) * t1630 + (pkin(5) * t1700 + t1365) * t1416);
t1285 = t1440 * t1702 + (-t1416 * t1666 - t1628) * t1431;
t1284 = t1437 * t1701 + (-t1416 * t1669 - t1629) * t1428;
t1283 = t1434 * t1700 + (-t1416 * t1672 - t1630) * t1425;
t1276 = (t1384 * t1321 + t1387 * t1577) * t1416 + t1297 * t1387 - t1384 * t1580;
t1275 = (t1387 * t1321 - t1384 * t1577) * t1416 - t1297 * t1384 - t1387 * t1580;
t1274 = (t1383 * t1320 + t1386 * t1578) * t1416 + t1296 * t1386 - t1383 * t1581;
t1273 = (t1386 * t1320 - t1383 * t1578) * t1416 - t1296 * t1383 - t1386 * t1581;
t1272 = (t1382 * t1319 + t1385 * t1579) * t1416 + t1295 * t1385 - t1382 * t1582;
t1271 = (t1385 * t1319 - t1382 * t1579) * t1416 - t1295 * t1382 - t1385 * t1582;
t1261 = ((-0.2e1 * t1559 + t1705) * t1415 - 0.2e1 * t1430 * (-Ifges(3,5) * t1438 + t1649) * t1439 + 0.2e1 * t1608 + (t1404 + 0.4e1 * t1653) * t1438 - 0.2e1 * t1587 + t1456) * t1403 + t1718 * t1586 + (t1339 - t1705) * t1415 + 0.2e1 * (-pkin(1) * t1342 + t1649 * t1430 + t1511 * t1438) * t1439 - t1608 + 0.2e1 * (t1441 - t1653) * t1438 + t1430 * t1591 + 0.2e1 * t1587 + t1455;
t1260 = ((-0.2e1 * t1560 + t1704) * t1412 - 0.2e1 * t1427 * (-Ifges(3,5) * t1435 + t1650) * t1436 + 0.2e1 * t1609 + (t1404 + 0.4e1 * t1654) * t1435 - 0.2e1 * t1588 + t1456) * t1403 + t1719 * t1586 + (t1338 - t1704) * t1412 + 0.2e1 * (-pkin(1) * t1341 + t1650 * t1427 + t1512 * t1435) * t1436 - t1609 + 0.2e1 * (t1441 - t1654) * t1435 + t1427 * t1591 + 0.2e1 * t1588 + t1455;
t1259 = ((-0.2e1 * t1561 + t1703) * t1409 - 0.2e1 * t1424 * (-Ifges(3,5) * t1432 + t1651) * t1433 + 0.2e1 * t1610 + (t1404 + 0.4e1 * t1655) * t1432 - 0.2e1 * t1589 + t1456) * t1403 + t1720 * t1586 + (t1337 - t1703) * t1409 + 0.2e1 * (-pkin(1) * t1340 + t1651 * t1424 + t1513 * t1432) * t1433 - t1610 + 0.2e1 * (t1441 - t1655) * t1432 + t1424 * t1591 + 0.2e1 * t1589 + t1455;
t1246 = -Ifges(3,3) * t1457 + (t1264 * t1625 + t1279 * t1285) * t1288;
t1245 = -Ifges(3,3) * t1458 + (t1263 * t1626 + t1278 * t1284) * t1287;
t1244 = -Ifges(3,3) * t1459 + (t1262 * t1627 + t1277 * t1283) * t1286;
t1243 = -t1336 * t1457 + (t1264 * t1631 + t1270 * t1285) * t1288;
t1242 = -t1335 * t1458 + (t1263 * t1632 + t1269 * t1284) * t1287;
t1241 = -t1334 * t1459 + (t1262 * t1633 + t1268 * t1283) * t1286;
t1240 = -t1279 * t1457 + (t1261 * t1285 + t1264 * t1637) * t1288;
t1239 = -t1278 * t1458 + (t1260 * t1284 + t1263 * t1638) * t1287;
t1238 = -t1277 * t1459 + (t1259 * t1283 + t1262 * t1639) * t1286;
t1237 = t1258 * t1493 + (t1252 * t1625 + t1276 * t1279) * t1288;
t1236 = t1257 * t1493 + (t1249 * t1625 + t1275 * t1279) * t1288;
t1235 = t1256 * t1494 + (t1251 * t1626 + t1274 * t1278) * t1287;
t1234 = t1255 * t1494 + (t1248 * t1626 + t1273 * t1278) * t1287;
t1233 = t1254 * t1495 + (t1250 * t1627 + t1272 * t1277) * t1286;
t1232 = t1253 * t1495 + (t1247 * t1627 + t1271 * t1277) * t1286;
t1231 = t1258 * t1484 + (t1252 * t1631 + t1270 * t1276) * t1288;
t1230 = t1257 * t1484 + (t1249 * t1631 + t1270 * t1275) * t1288;
t1229 = t1256 * t1485 + (t1251 * t1632 + t1269 * t1274) * t1287;
t1228 = t1255 * t1485 + (t1248 * t1632 + t1269 * t1273) * t1287;
t1227 = t1254 * t1486 + (t1250 * t1633 + t1268 * t1272) * t1286;
t1226 = t1253 * t1486 + (t1247 * t1633 + t1268 * t1271) * t1286;
t1225 = t1258 * t1487 + (t1252 * t1637 + t1261 * t1276) * t1288;
t1224 = t1257 * t1487 + (t1249 * t1637 + t1261 * t1275) * t1288;
t1223 = t1256 * t1488 + (t1251 * t1638 + t1260 * t1274) * t1287;
t1222 = t1255 * t1488 + (t1248 * t1638 + t1260 * t1273) * t1287;
t1221 = t1254 * t1489 + (t1250 * t1639 + t1259 * t1272) * t1286;
t1220 = t1253 * t1489 + (t1247 * t1639 + t1259 * t1271) * t1286;
t1 = [m(4) + (t1225 * t1276 + t1231 * t1643) * t1288 + (t1223 * t1274 + t1229 * t1644) * t1287 + (t1221 * t1272 + t1227 * t1645) * t1286 + (t1233 * t1546 + t1235 * t1544 + t1237 * t1542) * t1448, (t1225 * t1275 + t1231 * t1646) * t1288 + (t1223 * t1273 + t1229 * t1647) * t1287 + (t1221 * t1271 + t1227 * t1648) * t1286 + (t1233 * t1547 + t1235 * t1545 + t1237 * t1543) * t1448, (t1225 * t1285 + t1231 * t1640) * t1288 + (t1223 * t1284 + t1229 * t1641) * t1287 + (t1221 * t1283 + t1227 * t1642) * t1286 + (-t1233 * t1541 - t1235 * t1540 - t1237 * t1539) * t1614; (t1224 * t1276 + t1230 * t1643) * t1288 + (t1222 * t1274 + t1228 * t1644) * t1287 + (t1220 * t1272 + t1226 * t1645) * t1286 + (t1232 * t1546 + t1234 * t1544 + t1236 * t1542) * t1448, m(4) + (t1224 * t1275 + t1230 * t1646) * t1288 + (t1222 * t1273 + t1228 * t1647) * t1287 + (t1220 * t1271 + t1226 * t1648) * t1286 + (t1232 * t1547 + t1234 * t1545 + t1236 * t1543) * t1448, (t1224 * t1285 + t1230 * t1640) * t1288 + (t1222 * t1284 + t1228 * t1641) * t1287 + (t1220 * t1283 + t1226 * t1642) * t1286 + (-t1232 * t1541 - t1234 * t1540 - t1236 * t1539) * t1614; (t1240 * t1276 + t1243 * t1643) * t1288 + (t1239 * t1274 + t1242 * t1644) * t1287 + (t1238 * t1272 + t1241 * t1645) * t1286 + (t1244 * t1546 + t1245 * t1544 + t1246 * t1542) * t1448, (t1240 * t1275 + t1243 * t1646) * t1288 + (t1239 * t1273 + t1242 * t1647) * t1287 + (t1238 * t1271 + t1241 * t1648) * t1286 + (t1244 * t1547 + t1245 * t1545 + t1246 * t1543) * t1448, m(4) + (t1240 * t1285 + t1243 * t1640) * t1288 + (t1239 * t1284 + t1242 * t1641) * t1287 + (t1238 * t1283 + t1241 * t1642) * t1286 + (-t1244 * t1541 - t1245 * t1540 - t1246 * t1539) * t1614;];
MX  = t1;
