% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(6,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V1G3A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:22:45
% EndTime: 2020-08-06 23:28:09
% DurationCPUTime: 338.87s
% Computational Cost: add. (2646510->1944), mult. (6657489->3522), div. (84645->23), fcn. (5270355->26), ass. (0->1267)
t7403 = cos(qJ(3,3));
t7365 = 0.1e1 / t7403;
t8312 = 0.2e1 * t7365;
t7406 = cos(qJ(3,2));
t7371 = 0.1e1 / t7406;
t8311 = 0.2e1 * t7371;
t7409 = cos(qJ(3,1));
t7377 = 0.1e1 / t7409;
t8310 = 0.2e1 * t7377;
t7402 = sin(qJ(1,1));
t7411 = cos(qJ(1,1));
t7412 = xDP(3);
t7393 = legFrame(1,2);
t7334 = sin(t7393);
t7337 = cos(t7393);
t7413 = xDP(2);
t7414 = xDP(1);
t7539 = t7334 * t7413 - t7337 * t7414;
t7225 = t7402 * t7539 - t7411 * t7412;
t7246 = t7334 * t7414 + t7337 * t7413;
t7410 = cos(qJ(2,1));
t8138 = t7246 * t7410;
t7243 = pkin(6) * t8138;
t7174 = pkin(5) * t7225 + t7243;
t8223 = pkin(6) * t7410;
t7219 = t7225 * t8223;
t7228 = t7402 * t7412 + t7411 * t7539;
t7380 = t7410 ^ 2;
t7329 = t7380 - 0.2e1;
t7400 = sin(qJ(3,1));
t7342 = t7400 * pkin(2);
t7979 = t7329 * t7342;
t7279 = -pkin(5) + t7979;
t7401 = sin(qJ(2,1));
t7343 = t7401 * pkin(6);
t7307 = t7343 + pkin(1);
t7384 = cos(pkin(3));
t7359 = t7384 ^ 2;
t7376 = t7409 ^ 2;
t7383 = sin(pkin(3));
t8128 = (t7410 + 0.1e1) * (t7410 - 0.1e1);
t8226 = pkin(6) * t7383;
t7709 = t8128 * t8226;
t8236 = pkin(2) * t7401;
t7929 = t7225 * t8236;
t8102 = t7383 * t7401;
t7986 = -0.2e1 * t8102;
t8053 = t7401 * t7410;
t8141 = t7228 * t7383;
t8227 = pkin(5) * t7246;
t8240 = pkin(2) * t7376;
t8253 = 0.2e1 * t7376 - 0.1e1;
t7093 = ((-t7246 * t7279 - t7219) * t7409 + (t8253 * t7225 * pkin(2) - t7174 * t7400) * t7401) * t7359 + (-(t7228 * t7410 + t7246 * t7986) * t8240 + ((t7225 * t7979 - t7174) * t7383 - t7307 * t7228) * t7409 + ((t7219 - t8227) * t7400 - t7246 * pkin(2)) * t8102) * t7384 - t7376 * t7929 + ((t7246 * t8128 + t8053 * t8141) * t7342 - t8227) * t7409 + ((pkin(1) * t8141 + t7174) * t7401 - t7228 * t7709 + pkin(1) * t8138) * t7400 + t7929;
t7323 = pkin(1) * t7342;
t8054 = t7401 * t7409;
t7270 = -pkin(2) * t8054 + t8223;
t8135 = t7270 * t7384;
t8048 = t7409 * t7410;
t8296 = -pkin(2) * t8048 - t7343;
t7204 = pkin(1) * t8135 + (pkin(5) * t8296 + t7323) * t7383;
t7196 = 0.1e1 / t7204;
t8148 = t7196 * t7377;
t7087 = t7093 * t8148;
t7078 = pkin(6) * t7087;
t8105 = t7383 * t7384;
t7497 = t7225 * t8105 - t7246 * t7359;
t7171 = t7246 + t7497;
t7306 = 0.2e1 * t7343 + pkin(1);
t7346 = pkin(1) * t7401;
t7310 = t7346 + pkin(6);
t7305 = t7342 + pkin(5);
t7464 = (-t7225 * t7359 - t7246 * t8105 + t7225) * t7305;
t7482 = t7497 * pkin(6);
t7422 = pkin(6) ^ 2;
t7425 = pkin(2) ^ 2;
t8110 = t7376 * t7425;
t7721 = -t7422 + t8110;
t7784 = t7401 * t8110;
t8231 = pkin(2) * t7409;
t7999 = pkin(6) * t8231;
t7922 = 0.2e1 * t7999;
t7117 = (t7171 * t7922 + t7721 * t8141) * t7380 + (-t7171 * t7784 + (t7306 * t8141 + t7464) * t8231 + (t7246 * t7307 + t7401 * t7482) * pkin(6)) * t7410 - (t7246 * t7310 + t7482) * t8231 + (t7310 * t8141 + t7401 * t7464) * pkin(6);
t7261 = t7383 * (-pkin(5) * t7343 + t7323);
t8249 = pkin(1) * t7384;
t7317 = pkin(6) * t8249;
t8080 = t7384 * t7401;
t7983 = pkin(1) * t8080;
t7703 = t7409 * t7983;
t8095 = t7383 * t7409;
t7965 = pkin(2) * t8095;
t7186 = (-pkin(5) * t7965 + t7317) * t7410 - pkin(2) * t7703 + t7261;
t7179 = 0.1e1 / t7186;
t7875 = t7117 * t7179 * t7400;
t7099 = t7377 * t7875;
t6994 = t7099 - t7078;
t7426 = 0.1e1 / pkin(2);
t8168 = t7179 * t7426;
t7874 = t7117 * t8168;
t7661 = t7377 * t7874;
t7596 = pkin(5) * t7661;
t6997 = -t7078 + t7596;
t7156 = (t7219 - pkin(2) * (t7225 * t8054 + t7246 * t7400)) * t7384 + (t7243 - pkin(2) * (-t7225 * t7400 + t7246 * t8054)) * t7383 - t8296 * t7228;
t7150 = t7156 * t7196;
t7144 = t7384 * t7150;
t7033 = t7144 + t7087;
t7066 = -0.2e1 * t7078;
t7072 = pkin(1) * t7087;
t8169 = t7179 * t7377;
t7876 = t7117 * t8169;
t7111 = pkin(2) * t7876;
t7349 = pkin(1) * t7380;
t7285 = t7349 - t7307;
t7423 = pkin(5) ^ 2;
t7356 = t7423 + t7425;
t7428 = pkin(1) ^ 2;
t7753 = t7428 + t7356;
t7288 = t7422 + t7753;
t7294 = t7343 / 0.2e1 + pkin(1);
t7304 = pkin(5) * t7400 + pkin(2);
t7322 = pkin(5) * t7342;
t7313 = 0.2e1 * t7322;
t7316 = t7380 - 0.1e1 / 0.2e1;
t7326 = pkin(1) * t7343;
t8281 = 0.2e1 * pkin(6);
t7382 = pkin(1) * t8281;
t7416 = -0.3e1 * t7422;
t7418 = pkin(6) / 0.2e1;
t7075 = t7422 * t7087;
t7494 = -pkin(6) * t7099 + t7075;
t7566 = t7410 * t7661;
t7518 = t7400 * t7566;
t7105 = pkin(1) * t7661;
t7533 = t7401 * t7105;
t7567 = t7383 * t7661;
t7534 = pkin(1) * t7567;
t7811 = t7196 * t8053;
t7634 = t7156 * t7811;
t7542 = t7305 * t7634;
t7640 = t7305 * t7144;
t7602 = 0.2e1 * t7640;
t7615 = 0.3e1 * t7422 + t7753;
t7616 = t7401 * t7876;
t8187 = t7093 * t7377;
t7888 = t7383 * t8187;
t7619 = t7307 * t7888;
t7379 = t7410 * t7380;
t8147 = t7196 * t7383;
t7844 = t7156 * t8147;
t7637 = t7379 * t7844;
t8131 = (t7384 + 0.1e1) * (t7384 - 0.1e1);
t7638 = t8131 * t7150;
t8094 = t7383 * t7410;
t7949 = pkin(5) * t8094;
t7258 = t7949 + t7983;
t7378 = 0.1e1 / t7409 ^ 2;
t8072 = t7384 * t7410;
t7934 = pkin(1) * t8072;
t8162 = 0.1e1 / (pkin(6) * t7934 - t7258 * t8231 + t7261) * t7378;
t8189 = t7093 * t7196;
t7673 = t8162 * t8189;
t8261 = t7359 - 0.1e1;
t7700 = t8261 * t8053;
t7712 = pkin(6) * t7144;
t7748 = t7383 * t7317;
t7948 = pkin(6) * t8131;
t7752 = -0.2e1 * t7948;
t8004 = t7423 / 0.2e1 + t7425 / 0.2e1;
t7754 = t7422 + t8004;
t8002 = t7425 - t7422;
t7755 = t7322 + t8002;
t7671 = t7400 * t7087;
t7054 = pkin(2) * t7671;
t7071 = pkin(5) * t7087;
t7102 = pkin(6) * t7661;
t8011 = t7071 + t7102;
t7758 = t7054 + t8011;
t8081 = t7384 * t7400;
t7776 = t7383 * t8081;
t7375 = t7409 * t7376;
t8239 = pkin(2) * t7383;
t8092 = t7425 * t8239;
t7785 = t7375 * t8092;
t7801 = t7425 * t8131;
t7802 = t7409 * t8131;
t7812 = t7196 * t8110;
t7873 = t7117 * t8162;
t8186 = t7093 * t7425;
t7885 = t7377 * t8186;
t7945 = t7359 * t7343;
t7964 = pkin(2) * t8094;
t8014 = t7078 / 0.2e1 - t7099 / 0.2e1;
t7608 = pkin(6) * t7071;
t8017 = t7608 / 0.2e1 + pkin(6) * t7640;
t8026 = t7758 * t7401 + t7105;
t8127 = t7359 * t7422;
t8201 = t6997 * t7401;
t8273 = -0.2e1 * t7359;
t8109 = t7377 * t7384;
t7887 = t7093 * t8109;
t7046 = t7196 * t7887 / 0.2e1;
t8149 = t7196 * t7359;
t7792 = t7156 * t8149;
t8278 = 0.2e1 * t7792 + 0.2e1 * t7046 - t7150;
t8282 = -0.2e1 * pkin(6);
t8284 = 0.2e1 * pkin(1);
t6877 = (t7179 * (((t6994 * t7748 + (t7376 * t7885 * t8249 + ((t8284 + 0.3e1 * t7343 - 0.3e1 * t7945) * t8110 + (t7294 * t8282 + t7401 * t8127) * pkin(6)) * t7156) * t8147) * t7380 + (t7785 * t8278 + (t7401 * t7602 + t8026) * t7376 * t7801 + ((-(t7099 + t7066) * t7346 + t7494) * t7384 + ((t7322 + t7754) * t8273 + t7313 + 0.4e1 * t7326 + t7615) * t7150) * t7965 + (-t6997 * t7342 / 0.2e1 - t7111 / 0.2e1 + t8017) * t7401 * t7752) * t7410 + (t7784 * t8278 - t6994 * t7307 * t7384 + (t7382 + ((t7322 + t8004) * t8273 + t7313 + t7288) * t7401) * t7150) * t8226 + (-(t7416 + t8110) * t7637 + ((t7066 + t7596) * t7342 + t7111 - t7422 * t7661 - 0.4e1 * t8017) * t7380 + (t7533 + t7602 + t7758) * pkin(6)) * pkin(2) * t7802) * t7156 * t8148 + ((t7307 * t7410 * t7638 + t7534) * t8240 + (t7755 * t7380 * t7638 - (-t7876 + (t7144 * t7310 - t6997) * t7400) * t7964 + pkin(1) * t7616 * t8081) * t7409 + (-t7518 * t8249 - t7383 * ((t7072 - t8201) * t7400 - t7616) + (t8261 * t7409 * t7310 + t7285 * t7776 + t7304 * t7700) * t7150) * pkin(6)) * t7873) + (t7410 * t7033 * t7785 + (t7619 + (t7305 * t8053 * t8131 + (t7343 + t7349) * t8105) * t7156) * t7812 + (((t7346 + t7418) * t7144 + t8014) * t8094 - t7316 * t7305 * t7638) * t7922 - (t7542 * t7948 + (t7712 * t7349 + (-t7712 + t6994) * t7307) * t7383) * pkin(6)) * t7673) * t7426;
t7399 = sin(qJ(1,2));
t7408 = cos(qJ(1,2));
t7392 = legFrame(2,2);
t7333 = sin(t7392);
t7336 = cos(t7392);
t7540 = t7333 * t7413 - t7336 * t7414;
t7224 = t7399 * t7540 - t7408 * t7412;
t7245 = t7333 * t7414 + t7336 * t7413;
t7407 = cos(qJ(2,2));
t8139 = t7245 * t7407;
t7242 = pkin(6) * t8139;
t7173 = pkin(5) * t7224 + t7242;
t8224 = pkin(6) * t7407;
t7218 = t7224 * t8224;
t7227 = t7399 * t7412 + t7408 * t7540;
t7374 = t7407 ^ 2;
t7328 = t7374 - 0.2e1;
t7397 = sin(qJ(3,2));
t7340 = t7397 * pkin(2);
t7980 = t7328 * t7340;
t7278 = -pkin(5) + t7980;
t7398 = sin(qJ(2,2));
t7341 = t7398 * pkin(6);
t7303 = t7341 + pkin(1);
t7370 = t7406 ^ 2;
t8129 = (t7407 + 0.1e1) * (t7407 - 0.1e1);
t7710 = t8129 * t8226;
t8237 = pkin(2) * t7398;
t7931 = t7224 * t8237;
t8103 = t7383 * t7398;
t7987 = -0.2e1 * t8103;
t8059 = t7398 * t7407;
t8142 = t7227 * t7383;
t8228 = pkin(5) * t7245;
t8241 = pkin(2) * t7370;
t8256 = 0.2e1 * t7370 - 0.1e1;
t7092 = ((-t7245 * t7278 - t7218) * t7406 + (t8256 * t7224 * pkin(2) - t7173 * t7397) * t7398) * t7359 + (-(t7227 * t7407 + t7245 * t7987) * t8241 + ((t7224 * t7980 - t7173) * t7383 - t7303 * t7227) * t7406 + ((t7218 - t8228) * t7397 - t7245 * pkin(2)) * t8103) * t7384 - t7370 * t7931 + ((t7245 * t8129 + t8059 * t8142) * t7340 - t8228) * t7406 + ((pkin(1) * t8142 + t7173) * t7398 - t7227 * t7710 + pkin(1) * t8139) * t7397 + t7931;
t7321 = pkin(1) * t7340;
t8060 = t7398 * t7406;
t7269 = -pkin(2) * t8060 + t8224;
t8136 = t7269 * t7384;
t8050 = t7406 * t7407;
t8295 = -pkin(2) * t8050 - t7341;
t7203 = pkin(1) * t8136 + (pkin(5) * t8295 + t7321) * t7383;
t7193 = 0.1e1 / t7203;
t8154 = t7193 * t7371;
t7085 = t7092 * t8154;
t7077 = pkin(6) * t7085;
t7498 = t7224 * t8105 - t7245 * t7359;
t7170 = t7245 + t7498;
t7302 = 0.2e1 * t7341 + pkin(1);
t7345 = pkin(1) * t7398;
t7309 = t7345 + pkin(6);
t7301 = t7340 + pkin(5);
t7465 = (-t7224 * t7359 - t7245 * t8105 + t7224) * t7301;
t7483 = t7498 * pkin(6);
t8117 = t7370 * t7425;
t7722 = -t7422 + t8117;
t7579 = t7722 * t7383;
t7787 = t7398 * t8117;
t8233 = pkin(2) * t7406;
t8000 = pkin(6) * t8233;
t7924 = 0.2e1 * t8000;
t7116 = (t7170 * t7924 + t7227 * t7579) * t7374 + (-t7170 * t7787 + (t7302 * t8142 + t7465) * t8233 + (t7245 * t7303 + t7398 * t7483) * pkin(6)) * t7407 - (t7245 * t7309 + t7483) * t8233 + (t7309 * t8142 + t7398 * t7465) * pkin(6);
t7260 = t7383 * (-pkin(5) * t7341 + t7321);
t8083 = t7384 * t7398;
t7984 = pkin(1) * t8083;
t7705 = t7406 * t7984;
t8098 = t7383 * t7406;
t7967 = pkin(2) * t8098;
t7185 = (-pkin(5) * t7967 + t7317) * t7407 - pkin(2) * t7705 + t7260;
t7177 = 0.1e1 / t7185;
t7879 = t7116 * t7177 * t7397;
t7098 = t7371 * t7879;
t6993 = t7098 - t7077;
t8170 = t7177 * t7426;
t7878 = t7116 * t8170;
t7664 = t7371 * t7878;
t7597 = pkin(5) * t7664;
t6996 = -t7077 + t7597;
t7155 = (t7218 - pkin(2) * (t7224 * t8060 + t7245 * t7397)) * t7384 + (t7242 - pkin(2) * (-t7224 * t7397 + t7245 * t8060)) * t7383 - t8295 * t7227;
t7148 = t7155 * t7193;
t7143 = t7384 * t7148;
t7030 = t7143 + t7085;
t7065 = -0.2e1 * t7077;
t7070 = pkin(1) * t7085;
t8171 = t7177 * t7371;
t7880 = t7116 * t8171;
t7110 = pkin(2) * t7880;
t7348 = pkin(1) * t7374;
t7284 = t7348 - t7303;
t7292 = t7341 / 0.2e1 + pkin(1);
t7300 = pkin(5) * t7397 + pkin(2);
t7320 = pkin(5) * t7340;
t7312 = 0.2e1 * t7320;
t7315 = t7374 - 0.1e1 / 0.2e1;
t7325 = pkin(1) * t7341;
t7074 = t7422 * t7085;
t7495 = -pkin(6) * t7098 + t7074;
t7568 = t7407 * t7664;
t7519 = t7397 * t7568;
t7104 = pkin(1) * t7664;
t7535 = t7398 * t7104;
t7569 = t7383 * t7664;
t7536 = pkin(1) * t7569;
t7814 = t7193 * t8059;
t7643 = t7155 * t7814;
t7543 = t7301 * t7643;
t7649 = t7301 * t7143;
t7603 = 0.2e1 * t7649;
t7617 = t7398 * t7880;
t8192 = t7092 * t7371;
t7893 = t7383 * t8192;
t7620 = t7303 * t7893;
t7373 = t7407 * t7374;
t8153 = t7193 * t7383;
t7849 = t7155 * t8153;
t7646 = t7373 * t7849;
t7647 = t8131 * t7148;
t8097 = t7383 * t7407;
t7950 = pkin(5) * t8097;
t7257 = t7950 + t7984;
t7372 = 0.1e1 / t7406 ^ 2;
t8075 = t7384 * t7407;
t7935 = pkin(1) * t8075;
t8163 = 0.1e1 / (pkin(6) * t7935 - t7257 * t8233 + t7260) * t7372;
t8194 = t7092 * t7193;
t7678 = t8163 * t8194;
t7701 = t8261 * t8059;
t7713 = pkin(6) * t7143;
t7756 = t7320 + t8002;
t7676 = t7397 * t7085;
t7053 = pkin(2) * t7676;
t7069 = pkin(5) * t7085;
t7101 = pkin(6) * t7664;
t8012 = t7069 + t7101;
t7759 = t7053 + t8012;
t8084 = t7384 * t7397;
t7779 = t7383 * t8084;
t7369 = t7406 * t7370;
t7788 = t7369 * t8092;
t7803 = t7406 * t8131;
t7815 = t7193 * t8117;
t7877 = t7116 * t8163;
t8191 = t7092 * t7425;
t7890 = t7371 * t8191;
t7946 = t7359 * t7341;
t7966 = pkin(2) * t8097;
t8015 = t7077 / 0.2e1 - t7098 / 0.2e1;
t7609 = pkin(6) * t7069;
t8018 = t7609 / 0.2e1 + pkin(6) * t7649;
t8027 = t7759 * t7398 + t7104;
t8202 = t6996 * t7398;
t8116 = t7371 * t7384;
t7892 = t7092 * t8116;
t7048 = t7193 * t7892 / 0.2e1;
t8155 = t7193 * t7359;
t7793 = t7155 * t8155;
t8279 = 0.2e1 * t7793 + 0.2e1 * t7048 - t7148;
t6876 = (t7177 * (((t6993 * t7748 + (t7370 * t7890 * t8249 + ((t8284 + 0.3e1 * t7341 - 0.3e1 * t7946) * t8117 + (t7292 * t8282 + t7398 * t8127) * pkin(6)) * t7155) * t8153) * t7374 + (t7788 * t8279 + (t7398 * t7603 + t8027) * t7370 * t7801 + ((-(t7098 + t7065) * t7345 + t7495) * t7384 + ((t7320 + t7754) * t8273 + t7312 + 0.4e1 * t7325 + t7615) * t7148) * t7967 + (-t6996 * t7340 / 0.2e1 - t7110 / 0.2e1 + t8018) * t7398 * t7752) * t7407 + (t7787 * t8279 - t6993 * t7303 * t7384 + (t7382 + ((t7320 + t8004) * t8273 + t7312 + t7288) * t7398) * t7148) * t8226 + (-(t7416 + t8117) * t7646 + ((t7065 + t7597) * t7340 + t7110 - t7422 * t7664 - 0.4e1 * t8018) * t7374 + (t7535 + t7603 + t7759) * pkin(6)) * pkin(2) * t7803) * t7155 * t8154 + ((t7303 * t7407 * t7647 + t7536) * t8241 + (t7756 * t7374 * t7647 - (-t7880 + (t7143 * t7309 - t6996) * t7397) * t7966 + pkin(1) * t7617 * t8084) * t7406 + (-t7519 * t8249 - t7383 * ((t7070 - t8202) * t7397 - t7617) + (t8261 * t7406 * t7309 + t7284 * t7779 + t7300 * t7701) * t7148) * pkin(6)) * t7877) + (t7407 * t7030 * t7788 + (t7620 + (t7301 * t8059 * t8131 + (t7341 + t7348) * t8105) * t7155) * t7815 + (((t7345 + t7418) * t7143 + t8015) * t8097 - t7315 * t7301 * t7647) * t7924 - (t7543 * t7948 + (t7713 * t7348 + (-t7713 + t6993) * t7303) * t7383) * pkin(6)) * t7678) * t7426;
t7396 = sin(qJ(1,3));
t7405 = cos(qJ(1,3));
t7391 = legFrame(3,2);
t7332 = sin(t7391);
t7335 = cos(t7391);
t7541 = t7332 * t7413 - t7335 * t7414;
t7223 = t7396 * t7541 - t7405 * t7412;
t7244 = t7332 * t7414 + t7335 * t7413;
t7404 = cos(qJ(2,3));
t8140 = t7244 * t7404;
t7241 = pkin(6) * t8140;
t7172 = pkin(5) * t7223 + t7241;
t8225 = pkin(6) * t7404;
t7217 = t7223 * t8225;
t7226 = t7396 * t7412 + t7405 * t7541;
t7368 = t7404 ^ 2;
t7327 = t7368 - 0.2e1;
t7394 = sin(qJ(3,3));
t7338 = t7394 * pkin(2);
t7981 = t7327 * t7338;
t7277 = -pkin(5) + t7981;
t7395 = sin(qJ(2,3));
t7339 = t7395 * pkin(6);
t7299 = t7339 + pkin(1);
t7364 = t7403 ^ 2;
t8130 = (t7404 + 0.1e1) * (t7404 - 0.1e1);
t7711 = t8130 * t8226;
t8238 = pkin(2) * t7395;
t7933 = t7223 * t8238;
t8104 = t7383 * t7395;
t7988 = -0.2e1 * t8104;
t8065 = t7395 * t7404;
t8143 = t7226 * t7383;
t8229 = pkin(5) * t7244;
t8242 = pkin(2) * t7364;
t8259 = 0.2e1 * t7364 - 0.1e1;
t7091 = ((-t7244 * t7277 - t7217) * t7403 + (t8259 * t7223 * pkin(2) - t7172 * t7394) * t7395) * t7359 + (-(t7226 * t7404 + t7244 * t7988) * t8242 + ((t7223 * t7981 - t7172) * t7383 - t7299 * t7226) * t7403 + ((t7217 - t8229) * t7394 - t7244 * pkin(2)) * t8104) * t7384 - t7364 * t7933 + ((t7244 * t8130 + t8065 * t8143) * t7338 - t8229) * t7403 + ((pkin(1) * t8143 + t7172) * t7395 - t7226 * t7711 + pkin(1) * t8140) * t7394 + t7933;
t7319 = pkin(1) * t7338;
t8066 = t7395 * t7403;
t7268 = -pkin(2) * t8066 + t8225;
t8137 = t7268 * t7384;
t8052 = t7403 * t7404;
t8294 = -pkin(2) * t8052 - t7339;
t7202 = pkin(1) * t8137 + (pkin(5) * t8294 + t7319) * t7383;
t7190 = 0.1e1 / t7202;
t8160 = t7190 * t7365;
t7083 = t7091 * t8160;
t7076 = pkin(6) * t7083;
t7499 = t7223 * t8105 - t7244 * t7359;
t7169 = t7244 + t7499;
t7298 = 0.2e1 * t7339 + pkin(1);
t7344 = pkin(1) * t7395;
t7308 = t7344 + pkin(6);
t7297 = t7338 + pkin(5);
t7466 = (-t7223 * t7359 - t7244 * t8105 + t7223) * t7297;
t7484 = t7499 * pkin(6);
t8124 = t7364 * t7425;
t7723 = -t7422 + t8124;
t7790 = t7395 * t8124;
t8235 = pkin(2) * t7403;
t8001 = pkin(6) * t8235;
t7926 = 0.2e1 * t8001;
t7115 = (t7169 * t7926 + t7723 * t8143) * t7368 + (-t7169 * t7790 + (t7298 * t8143 + t7466) * t8235 + (t7244 * t7299 + t7395 * t7484) * pkin(6)) * t7404 - (t7244 * t7308 + t7484) * t8235 + (t7308 * t8143 + t7395 * t7466) * pkin(6);
t7259 = t7383 * (-pkin(5) * t7339 + t7319);
t8086 = t7384 * t7395;
t7985 = pkin(1) * t8086;
t7704 = t7403 * t7985;
t8101 = t7383 * t7403;
t7969 = pkin(2) * t8101;
t7184 = (-pkin(5) * t7969 + t7317) * t7404 - pkin(2) * t7704 + t7259;
t7175 = 0.1e1 / t7184;
t7883 = t7115 * t7175 * t7394;
t7097 = t7365 * t7883;
t6992 = t7097 - t7076;
t8172 = t7175 * t7426;
t7882 = t7115 * t8172;
t7667 = t7365 * t7882;
t7598 = pkin(5) * t7667;
t6995 = -t7076 + t7598;
t7154 = (t7217 - pkin(2) * (t7223 * t8066 + t7244 * t7394)) * t7384 + (t7241 - pkin(2) * (-t7223 * t7394 + t7244 * t8066)) * t7383 - t8294 * t7226;
t7146 = t7154 * t7190;
t7142 = t7384 * t7146;
t7027 = t7142 + t7083;
t7064 = -0.2e1 * t7076;
t7068 = pkin(1) * t7083;
t8173 = t7175 * t7365;
t7884 = t7115 * t8173;
t7109 = pkin(2) * t7884;
t7347 = pkin(1) * t7368;
t7283 = t7347 - t7299;
t7290 = t7339 / 0.2e1 + pkin(1);
t7296 = pkin(5) * t7394 + pkin(2);
t7318 = pkin(5) * t7338;
t7311 = 0.2e1 * t7318;
t7314 = t7368 - 0.1e1 / 0.2e1;
t7324 = pkin(1) * t7339;
t7073 = t7422 * t7083;
t7496 = -pkin(6) * t7097 + t7073;
t7570 = t7404 * t7667;
t7520 = t7394 * t7570;
t7103 = pkin(1) * t7667;
t7537 = t7395 * t7103;
t7571 = t7383 * t7667;
t7538 = pkin(1) * t7571;
t7817 = t7190 * t8065;
t7652 = t7154 * t7817;
t7544 = t7297 * t7652;
t7658 = t7297 * t7142;
t7604 = 0.2e1 * t7658;
t7618 = t7395 * t7884;
t8197 = t7091 * t7365;
t7898 = t7383 * t8197;
t7621 = t7299 * t7898;
t7367 = t7404 * t7368;
t8159 = t7190 * t7383;
t7854 = t7154 * t8159;
t7655 = t7367 * t7854;
t7656 = t8131 * t7146;
t8100 = t7383 * t7404;
t7951 = pkin(5) * t8100;
t7256 = t7951 + t7985;
t7366 = 0.1e1 / t7403 ^ 2;
t8077 = t7384 * t7404;
t7982 = pkin(1) * t8077;
t8164 = 0.1e1 / (pkin(6) * t7982 - t7256 * t8235 + t7259) * t7366;
t8199 = t7091 * t7190;
t7683 = t8164 * t8199;
t7702 = t8261 * t8065;
t7714 = pkin(6) * t7142;
t7757 = t7318 + t8002;
t7681 = t7394 * t7083;
t7052 = pkin(2) * t7681;
t7067 = pkin(5) * t7083;
t7100 = pkin(6) * t7667;
t8013 = t7067 + t7100;
t7760 = t7052 + t8013;
t8087 = t7384 * t7394;
t7782 = t7383 * t8087;
t7363 = t7403 * t7364;
t7791 = t7363 * t8092;
t7804 = t7403 * t8131;
t7818 = t7190 * t8124;
t7881 = t7115 * t8164;
t8196 = t7091 * t7425;
t7895 = t7365 * t8196;
t7947 = t7359 * t7339;
t7968 = pkin(2) * t8100;
t8016 = t7076 / 0.2e1 - t7097 / 0.2e1;
t7610 = pkin(6) * t7067;
t8019 = t7610 / 0.2e1 + pkin(6) * t7658;
t8028 = t7760 * t7395 + t7103;
t8203 = t6995 * t7395;
t8123 = t7365 * t7384;
t7897 = t7091 * t8123;
t7047 = t7190 * t7897 / 0.2e1;
t8161 = t7190 * t7359;
t7794 = t7154 * t8161;
t8280 = 0.2e1 * t7794 + 0.2e1 * t7047 - t7146;
t6875 = (t7175 * (((t6992 * t7748 + (t7364 * t7895 * t8249 + ((t8284 + 0.3e1 * t7339 - 0.3e1 * t7947) * t8124 + (t7290 * t8282 + t7395 * t8127) * pkin(6)) * t7154) * t8159) * t7368 + (t7791 * t8280 + (t7395 * t7604 + t8028) * t7364 * t7801 + ((-(t7097 + t7064) * t7344 + t7496) * t7384 + ((t7318 + t7754) * t8273 + t7311 + 0.4e1 * t7324 + t7615) * t7146) * t7969 + (-t6995 * t7338 / 0.2e1 - t7109 / 0.2e1 + t8019) * t7395 * t7752) * t7404 + (t7790 * t8280 - t6992 * t7299 * t7384 + (t7382 + ((t7318 + t8004) * t8273 + t7311 + t7288) * t7395) * t7146) * t8226 + (-(t7416 + t8124) * t7655 + ((t7064 + t7598) * t7338 + t7109 - t7422 * t7667 - 0.4e1 * t8019) * t7368 + (t7537 + t7604 + t7760) * pkin(6)) * pkin(2) * t7804) * t7154 * t8160 + ((t7299 * t7404 * t7656 + t7538) * t8242 + (t7757 * t7368 * t7656 - (-t7884 + (t7142 * t7308 - t6995) * t7394) * t7968 + pkin(1) * t7618 * t8087) * t7403 + (-t7520 * t8249 - t7383 * ((t7068 - t8203) * t7394 - t7618) + (t8261 * t7403 * t7308 + t7283 * t7782 + t7296 * t7702) * t7146) * pkin(6)) * t7881) + (t7404 * t7027 * t7791 + (t7621 + (t7297 * t8065 * t8131 + (t7339 + t7347) * t8105) * t7154) * t7818 + (((t7344 + t7418) * t7142 + t8016) * t8100 - t7314 * t7297 * t7656) * t7926 - (t7544 * t7948 + (t7714 * t7347 + (-t7714 + t6992) * t7299) * t7383) * pkin(6)) * t7683) * t7426;
t6991 = pkin(6) * t7671 - t7876;
t7421 = -0.2e1 * pkin(1);
t7587 = t7410 * pkin(5) * t7888;
t7840 = t7156 * t8094;
t8107 = t7377 * t7401;
t7886 = t7093 * t8107;
t8220 = t7380 * pkin(6);
t8246 = pkin(1) * t7400;
t8265 = -0.2e1 * t7400;
t6901 = ((-t7619 + ((t7349 - 0.2e1 * t7343 + t7421) * t8105 + pkin(5) * t7700) * t7156) * t7196 * t7376 + ((-t8220 / 0.2e1 + t7310) * t7792 * t8265 + ((-t7304 * t7840 - t7886 * t8246) * t7196 - t6991) * t7384 + (-t7587 + t7156 * (t7310 - t8220)) * t7196 * t7400) * t7409 - t7359 * t7542 + (pkin(1) * t7566 - t7285 * t7844) * t7384 + ((-t6997 - t7099) * t7401 + t7072) * t7383 + t7542) * t7179 * t7873;
t8204 = t6991 * t7383;
t6982 = t7307 * t8204;
t7057 = t7410 * t7072;
t7419 = pkin(5) / 0.2e1;
t7293 = t7342 + t7419;
t7527 = pkin(6) * t7304 * t7634;
t7593 = pkin(6) * t7400 * t7844;
t8132 = t7329 * t7359;
t7724 = -t7380 + t8132;
t7771 = t7383 * t8072;
t7989 = -0.2e1 * t8105;
t8112 = t7375 * t7425;
t8251 = t7380 - 0.1e1;
t7575 = ((t7150 + (t7156 * t7724 - t7887) * t7196) * t8112 - (t7057 * t7384 - t7383 * t8026 + (t7410 * (-t7343 + pkin(1)) * t7359 + (t7293 * t7989 + t8223) * t7401) * t7150) * t8240 + ((t7310 * t7384 + t7949) * t6994 + (-(t7326 - t7755) * t7359 + (-pkin(6) * t7305 + t7323 * t7401) * t7771 + (-t7359 * t7380 + t8251) * pkin(2) * t7304) * t7150) * t7409 - t7359 * t7527 - t7285 * t7384 * t7593 + t7527 + t6982) * t7673;
t7524 = t7111 - t7608;
t6946 = pkin(2) * t6997 + t7400 * t7524;
t8262 = t7071 / 0.2e1;
t6988 = t8262 + t7102 / 0.2e1;
t7081 = t7196 * t7885;
t7197 = 0.1e1 / t7204 ^ 2;
t7420 = 0.2e1 * pkin(5);
t7381 = pkin(2) * t7420;
t7138 = t7196 * t7840;
t7551 = t7293 * t7138;
t7614 = -0.3e1 * t7425 - t7422 - t7423 - t7428;
t7841 = t7156 * t8102;
t7636 = t7196 * t7841;
t8145 = t7196 * t7410;
t7842 = t7156 * t8145;
t7639 = t7306 * t7842;
t7670 = t7196 * t7886;
t7672 = t7380 * t7087;
t7805 = t7329 * t8110;
t7973 = t7380 * t7342;
t8111 = t7376 * t7401;
t7974 = pkin(2) * t8111;
t8005 = t7423 / 0.3e1 + t7425;
t8006 = -t7422 / 0.3e1 - 0.2e1 / 0.3e1 * t7425;
t8007 = t7422 / 0.2e1 + t7425;
t8020 = t7054 + t7102;
t8106 = t7380 * t7422;
t8180 = t7156 * t7377;
t8268 = -0.2e1 * t7383;
t8269 = -0.2e1 * t7380;
t8274 = 0.3e1 * t7384 * t7359;
t8306 = -0.4e1 * pkin(6);
t7694 = (((t7380 - 0.4e1 / 0.3e1) * t8112 + ((-0.2e1 / 0.3e1 * t7322 + t8006) * t7380 + 0.4e1 / 0.3e1 * t7322 + t8005) * t7409 + (0.4e1 / 0.3e1 * t8240 - 0.2e1 / 0.3e1 * t7304) * pkin(6) * t8053) * t7150 * t8274 + (t7805 * t8189 - ((t7072 + t8201) * t7410 + (-0.4e1 * t7305 + t7973) * t7636) * t8240 + (t7551 * t8306 - t7075 + t7081 + (-pkin(2) * t7672 + (-t7380 * t8011 + t7637 * t8281 + t7071 + 0.2e1 * t7102) * t7400) * pkin(2) + (-pkin(6) * t8189 + 0.2e1 * t7875) * pkin(1) * t8107) * t7409 + (t6946 * t7410 + (-t7381 + (-t7356 + t8106) * t7400) * t7844) * t7401) * t7359 + ((-0.3e1 * t7380 + 0.3e1) * t8112 * t7150 - (t7380 * t7534 + 0.2e1 * t7639 + ((t8262 + t8020) * t7401 + t7105) * t8268) * t8240 + (((pkin(1) * t7670 + t6997) * t7342 + t7524) * t8094 + (0.2e1 * (t7322 + t8007) * t7380 - 0.4e1 * t7322 - 0.2e1 * t7326 + t7614) * t7150) * t7409 - t8204 * t7349 + 0.2e1 * t7527 + t6982) * t7384 - t8251 * t7081 * t7375 + (t6997 * t7410 + (-t7342 - t7420 + t7973) * t7844) * t7974 + 0.2e1 * ((t7380 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t7087 + (t6988 * t7380 - t7533 / 0.2e1 - t6988 + (-pkin(6) * t7379 + t7310 * t7410) * t7844) * t7400) * t8231 + t7294 * t7593 * t8269 - t6946 * t8053 + ((t7288 * t7400 + t7381) * t7401 + t7400 * t7382) * t7844) * t7197 * t8180;
t6871 = t6901 - t7575 - t7694;
t8303 = t7093 ^ 2 * t7378;
t7086 = t7197 * t8303;
t7427 = 0.1e1 / pkin(2) ^ 2;
t7108 = t7117 ^ 2 / t7186 ^ 2 * t7427 * t7378;
t7000 = t7086 + t7108;
t7823 = t7179 * t8148;
t7642 = t7156 * t7823;
t7506 = t7117 * t7426 * t7642;
t7491 = 0.2e1 * t7506;
t8230 = pkin(2) * t7410;
t6958 = (((pkin(6) * t8054 + t8230) * t7383 + pkin(6) * t8081) * t7150 + t6991) * t7117 * t7823;
t7936 = pkin(6) * t8048;
t7970 = t7383 * t7342;
t8003 = t7422 + t7425;
t8071 = t7384 * t7422;
t8283 = -0.2e1 * pkin(2);
t8300 = t7197 * ((-(t7805 - t8106 + (0.2e1 * t7401 * t7936 + t7304) * pkin(2)) * t7792 + ((t7551 + t8014) * t8281 + (t7293 * t7841 * t8283 + t8186) * t7196 * t7409) * t7384 + t7156 * t7812 * t8128 + (-t8020 * t8102 + t7639) * t8231 + t6991 * t7964 + (-t8106 + t7322 + t7326 + t8003) * t7150) * t7156 + (t7033 * t8110 + (t7270 * t7970 + t8071) * t7150 + t7494) * t8187);
t6892 = t6958 - t8300;
t7906 = t6892 * t8102;
t8146 = t7196 * t7401;
t8207 = t6892 * t7410;
t8243 = pkin(1) * t7410;
t8309 = -(pkin(5) * t6871 * t7401 - pkin(1) * t6877) * t7383 + t8207 * t8284 - pkin(5) * (t7000 * t8094 + t7359 * t7491) - (pkin(1) * t7093 * t8146 - pkin(5) * t7874) * t7150 * t8310 + (-0.2e1 * t7156 * t7197 * t7587 + t6871 * t8243 - t7000 * t7346 - t7906 * t7420) * t7384;
t6990 = pkin(6) * t7676 - t7880;
t7588 = t7407 * pkin(5) * t7893;
t7845 = t7155 * t8097;
t8114 = t7371 * t7398;
t7891 = t7092 * t8114;
t8221 = t7374 * pkin(6);
t8247 = pkin(1) * t7397;
t8266 = -0.2e1 * t7397;
t6900 = ((-t7620 + ((t7348 - 0.2e1 * t7341 + t7421) * t8105 + pkin(5) * t7701) * t7155) * t7193 * t7370 + ((-t8221 / 0.2e1 + t7309) * t7793 * t8266 + ((-t7300 * t7845 - t7891 * t8247) * t7193 - t6990) * t7384 + (-t7588 + t7155 * (t7309 - t8221)) * t7193 * t7397) * t7406 - t7359 * t7543 + (pkin(1) * t7568 - t7284 * t7849) * t7384 + ((-t6996 - t7098) * t7398 + t7070) * t7383 + t7543) * t7177 * t7877;
t8205 = t6990 * t7383;
t6981 = t7303 * t8205;
t7056 = t7407 * t7070;
t7291 = t7340 + t7419;
t7528 = pkin(6) * t7300 * t7643;
t7594 = pkin(6) * t7397 * t7849;
t8133 = t7328 * t7359;
t7725 = -t7374 + t8133;
t7772 = t7383 * t8075;
t8119 = t7369 * t7425;
t8254 = t7374 - 0.1e1;
t7576 = ((t7148 + (t7155 * t7725 - t7892) * t7193) * t8119 - (t7056 * t7384 - t7383 * t8027 + (t7407 * (-t7341 + pkin(1)) * t7359 + (t7291 * t7989 + t8224) * t7398) * t7148) * t8241 + ((t7309 * t7384 + t7950) * t6993 + (-(t7325 - t7756) * t7359 + (-pkin(6) * t7301 + t7321 * t7398) * t7772 + (-t7359 * t7374 + t8254) * pkin(2) * t7300) * t7148) * t7406 - t7359 * t7528 - t7284 * t7384 * t7594 + t7528 + t6981) * t7678;
t7525 = t7110 - t7609;
t6945 = pkin(2) * t6996 + t7397 * t7525;
t8263 = t7069 / 0.2e1;
t6987 = t8263 + t7101 / 0.2e1;
t7080 = t7193 * t7890;
t7194 = 0.1e1 / t7203 ^ 2;
t7137 = t7193 * t7845;
t7553 = t7291 * t7137;
t7846 = t7155 * t8103;
t7645 = t7193 * t7846;
t8151 = t7193 * t7407;
t7847 = t7155 * t8151;
t7648 = t7302 * t7847;
t7675 = t7193 * t7891;
t7677 = t7374 * t7085;
t7806 = t7328 * t8117;
t7975 = t7374 * t7340;
t8118 = t7370 * t7398;
t7976 = pkin(2) * t8118;
t8021 = t7053 + t7101;
t8113 = t7374 * t7422;
t8181 = t7155 * t7371;
t8270 = -0.2e1 * t7374;
t7695 = (((t7374 - 0.4e1 / 0.3e1) * t8119 + ((-0.2e1 / 0.3e1 * t7320 + t8006) * t7374 + 0.4e1 / 0.3e1 * t7320 + t8005) * t7406 + (0.4e1 / 0.3e1 * t8241 - 0.2e1 / 0.3e1 * t7300) * pkin(6) * t8059) * t7148 * t8274 + (t7806 * t8194 - ((t7070 + t8202) * t7407 + (-0.4e1 * t7301 + t7975) * t7645) * t8241 + (t7553 * t8306 - t7074 + t7080 + (-pkin(2) * t7677 + (-t7374 * t8012 + t7646 * t8281 + t7069 + 0.2e1 * t7101) * t7397) * pkin(2) + (-pkin(6) * t8194 + 0.2e1 * t7879) * pkin(1) * t8114) * t7406 + (t6945 * t7407 + (-t7381 + (-t7356 + t8113) * t7397) * t7849) * t7398) * t7359 + ((-0.3e1 * t7374 + 0.3e1) * t8119 * t7148 - (t7374 * t7536 + 0.2e1 * t7648 + ((t8263 + t8021) * t7398 + t7104) * t8268) * t8241 + (((pkin(1) * t7675 + t6996) * t7340 + t7525) * t8097 + (0.2e1 * (t7320 + t8007) * t7374 - 0.4e1 * t7320 - 0.2e1 * t7325 + t7614) * t7148) * t7406 - t8205 * t7348 + 0.2e1 * t7528 + t6981) * t7384 - t8254 * t7080 * t7369 + (t6996 * t7407 + (-t7340 - t7420 + t7975) * t7849) * t7976 + 0.2e1 * ((t7374 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t7085 + (t6987 * t7374 - t7535 / 0.2e1 - t6987 + (-pkin(6) * t7373 + t7309 * t7407) * t7849) * t7397) * t8233 + t7292 * t7594 * t8270 - t6945 * t8059 + ((t7288 * t7397 + t7381) * t7398 + t7397 * t7382) * t7849) * t7194 * t8181;
t6870 = t6900 - t7576 - t7695;
t8304 = t7092 ^ 2 * t7372;
t7084 = t7194 * t8304;
t7107 = t7116 ^ 2 / t7185 ^ 2 * t7427 * t7372;
t6999 = t7084 + t7107;
t7825 = t7177 * t8154;
t7651 = t7155 * t7825;
t7508 = t7116 * t7426 * t7651;
t7492 = 0.2e1 * t7508;
t8232 = pkin(2) * t7407;
t6957 = (((pkin(6) * t8060 + t8232) * t7383 + pkin(6) * t8084) * t7148 + t6990) * t7116 * t7825;
t7937 = pkin(6) * t8050;
t7971 = t7383 * t7340;
t8301 = t7194 * ((-(t7806 - t8113 + (0.2e1 * t7398 * t7937 + t7300) * pkin(2)) * t7793 + ((t7553 + t8015) * t8281 + (t7291 * t7846 * t8283 + t8191) * t7193 * t7406) * t7384 + t7155 * t7815 * t8129 + (-t8021 * t8103 + t7648) * t8233 + t6990 * t7966 + (-t8113 + t7320 + t7325 + t8003) * t7148) * t7155 + (t7030 * t8117 + (t7269 * t7971 + t8071) * t7148 + t7495) * t8192);
t6891 = t6957 - t8301;
t7907 = t6891 * t8103;
t8152 = t7193 * t7398;
t8210 = t6891 * t7407;
t8244 = pkin(1) * t7407;
t8308 = -(pkin(5) * t6870 * t7398 - pkin(1) * t6876) * t7383 + t8210 * t8284 - pkin(5) * (t6999 * t8097 + t7359 * t7492) - (pkin(1) * t7092 * t8152 - pkin(5) * t7878) * t7148 * t8311 + (-0.2e1 * t7155 * t7194 * t7588 + t6870 * t8244 - t6999 * t7345 - t7907 * t7420) * t7384;
t6989 = pkin(6) * t7681 - t7884;
t7589 = t7404 * pkin(5) * t7898;
t7850 = t7154 * t8100;
t8121 = t7365 * t7395;
t7896 = t7091 * t8121;
t8222 = t7368 * pkin(6);
t8248 = pkin(1) * t7394;
t8267 = -0.2e1 * t7394;
t6899 = ((-t7621 + ((t7347 - 0.2e1 * t7339 + t7421) * t8105 + pkin(5) * t7702) * t7154) * t7190 * t7364 + ((-t8222 / 0.2e1 + t7308) * t7794 * t8267 + ((-t7296 * t7850 - t7896 * t8248) * t7190 - t6989) * t7384 + (-t7589 + t7154 * (t7308 - t8222)) * t7190 * t7394) * t7403 - t7359 * t7544 + (pkin(1) * t7570 - t7283 * t7854) * t7384 + ((-t6995 - t7097) * t7395 + t7068) * t7383 + t7544) * t7175 * t7881;
t8206 = t6989 * t7383;
t6980 = t7299 * t8206;
t7055 = t7404 * t7068;
t7289 = t7338 + t7419;
t7529 = pkin(6) * t7296 * t7652;
t7595 = pkin(6) * t7394 * t7854;
t8134 = t7327 * t7359;
t7726 = -t7368 + t8134;
t7773 = t7383 * t8077;
t8126 = t7363 * t7425;
t8257 = t7368 - 0.1e1;
t7577 = ((t7146 + (t7154 * t7726 - t7897) * t7190) * t8126 - (t7055 * t7384 - t7383 * t8028 + (t7404 * (-t7339 + pkin(1)) * t7359 + (t7289 * t7989 + t8225) * t7395) * t7146) * t8242 + ((t7308 * t7384 + t7951) * t6992 + (-(t7324 - t7757) * t7359 + (-pkin(6) * t7297 + t7319 * t7395) * t7773 + (-t7359 * t7368 + t8257) * pkin(2) * t7296) * t7146) * t7403 - t7359 * t7529 - t7283 * t7384 * t7595 + t7529 + t6980) * t7683;
t7526 = t7109 - t7610;
t6944 = pkin(2) * t6995 + t7394 * t7526;
t8264 = t7067 / 0.2e1;
t6986 = t8264 + t7100 / 0.2e1;
t7079 = t7190 * t7895;
t7191 = 0.1e1 / t7202 ^ 2;
t7136 = t7190 * t7850;
t7555 = t7289 * t7136;
t7851 = t7154 * t8104;
t7654 = t7190 * t7851;
t8157 = t7190 * t7404;
t7852 = t7154 * t8157;
t7657 = t7298 * t7852;
t7680 = t7190 * t7896;
t7682 = t7368 * t7083;
t7761 = t7327 * t8124;
t7977 = t7368 * t7338;
t8125 = t7364 * t7395;
t7978 = pkin(2) * t8125;
t8022 = t7052 + t7100;
t8120 = t7368 * t7422;
t8182 = t7154 * t7365;
t8271 = -0.2e1 * t7368;
t7696 = (((t7368 - 0.4e1 / 0.3e1) * t8126 + ((-0.2e1 / 0.3e1 * t7318 + t8006) * t7368 + 0.4e1 / 0.3e1 * t7318 + t8005) * t7403 + (0.4e1 / 0.3e1 * t8242 - 0.2e1 / 0.3e1 * t7296) * pkin(6) * t8065) * t7146 * t8274 + (t7761 * t8199 - ((t7068 + t8203) * t7404 + (-0.4e1 * t7297 + t7977) * t7654) * t8242 + (t7555 * t8306 - t7073 + t7079 + (-pkin(2) * t7682 + (-t7368 * t8013 + t7655 * t8281 + t7067 + 0.2e1 * t7100) * t7394) * pkin(2) + (-pkin(6) * t8199 + 0.2e1 * t7883) * pkin(1) * t8121) * t7403 + (t6944 * t7404 + (-t7381 + (-t7356 + t8120) * t7394) * t7854) * t7395) * t7359 + ((-0.3e1 * t7368 + 0.3e1) * t8126 * t7146 - (t7368 * t7538 + 0.2e1 * t7657 + ((t8264 + t8022) * t7395 + t7103) * t8268) * t8242 + (((pkin(1) * t7680 + t6995) * t7338 + t7526) * t8100 + (0.2e1 * (t7318 + t8007) * t7368 - 0.4e1 * t7318 - 0.2e1 * t7324 + t7614) * t7146) * t7403 - t8206 * t7347 + 0.2e1 * t7529 + t6980) * t7384 - t8257 * t7079 * t7363 + (t6995 * t7404 + (-t7338 - t7420 + t7977) * t7854) * t7978 + 0.2e1 * ((t7368 / 0.2e1 - 0.1e1 / 0.2e1) * pkin(2) * t7083 + (t6986 * t7368 - t7537 / 0.2e1 - t6986 + (-pkin(6) * t7367 + t7308 * t7404) * t7854) * t7394) * t8235 + t7290 * t7595 * t8271 - t6944 * t8065 + ((t7288 * t7394 + t7381) * t7395 + t7394 * t7382) * t7854) * t7191 * t8182;
t6869 = t6899 - t7577 - t7696;
t8305 = t7091 ^ 2 * t7366;
t7082 = t7191 * t8305;
t7106 = t7115 ^ 2 / t7184 ^ 2 * t7427 * t7366;
t6998 = t7082 + t7106;
t7827 = t7175 * t8160;
t7660 = t7154 * t7827;
t7510 = t7115 * t7426 * t7660;
t7493 = 0.2e1 * t7510;
t8234 = pkin(2) * t7404;
t6956 = (((pkin(6) * t8066 + t8234) * t7383 + pkin(6) * t8087) * t7146 + t6989) * t7115 * t7827;
t7938 = pkin(6) * t8052;
t7972 = t7383 * t7338;
t8302 = t7191 * ((-(t7761 - t8120 + (0.2e1 * t7395 * t7938 + t7296) * pkin(2)) * t7794 + ((t7555 + t8016) * t8281 + (t7289 * t7851 * t8283 + t8196) * t7190 * t7403) * t7384 + t7154 * t7818 * t8130 + (-t8022 * t8104 + t7657) * t8235 + t6989 * t7968 + (-t8120 + t7318 + t7324 + t8003) * t7146) * t7154 + (t7027 * t8124 + (t7268 * t7972 + t8071) * t7146 + t7496) * t8197);
t6890 = t6956 - t8302;
t7908 = t6890 * t8104;
t8158 = t7190 * t7395;
t8213 = t6890 * t7404;
t8245 = pkin(1) * t7404;
t8307 = -(pkin(5) * t6869 * t7395 - pkin(1) * t6875) * t7383 + t8213 * t8284 - pkin(5) * (t6998 * t8100 + t7359 * t7493) - (pkin(1) * t7091 * t8158 - pkin(5) * t7882) * t7146 * t8312 + (-0.2e1 * t7154 * t7191 * t7589 + t6869 * t8245 - t6998 * t7344 - t7908 * t7420) * t7384;
t7751 = -t7296 + 0.2e1 * t8242;
t8299 = t7396 * t7751;
t7750 = -t7300 + 0.2e1 * t8241;
t8298 = t7399 * t7750;
t7749 = -t7304 + 0.2e1 * t8240;
t8297 = t7402 * t7749;
t7932 = t7396 * t8238;
t8099 = t7383 * t7405;
t8287 = t7394 * (-(pkin(1) * t8099 + pkin(5) * t7396) * t7395 + t7405 * t7711) - t7932;
t7930 = t7399 * t8237;
t8096 = t7383 * t7408;
t8286 = t7397 * (-(pkin(1) * t8096 + pkin(5) * t7399) * t7398 + t7408 * t7710) - t7930;
t7928 = t7402 * t8236;
t8093 = t7383 * t7411;
t8285 = t7400 * (-(pkin(1) * t8093 + pkin(5) * t7402) * t7401 + t7411 * t7709) - t7928;
t8277 = -0.2e1 * t7136 + t7667;
t8276 = -0.2e1 * t7137 + t7664;
t8275 = -0.2e1 * t7138 + t7661;
t8272 = 0.2e1 * t7359;
t8260 = t8272 - 0.2e1;
t8258 = 0.4e1 * t7364 - 0.2e1;
t8255 = 0.4e1 * t7370 - 0.2e1;
t8252 = 0.4e1 * t7376 - 0.2e1;
t8250 = pkin(1) * t7383;
t7357 = t7383 ^ 2;
t8219 = MDP(4) * t7357;
t8218 = MDP(5) * t7357;
t8217 = MDP(6) * t7383;
t8216 = MDP(7) * t7383;
t8215 = t6890 * t7190;
t7954 = pkin(5) * t8104;
t8214 = t6890 * (-t7954 + t7982);
t8212 = t6891 * t7193;
t7953 = pkin(5) * t8103;
t8211 = t6891 * (-t7935 + t7953);
t8209 = t6892 * t7196;
t7952 = pkin(5) * t8102;
t8208 = t6892 * (-t7934 + t7952);
t8200 = t7091 * t7154;
t8198 = t7091 * t7191;
t8195 = t7092 * t7155;
t8193 = t7092 * t7194;
t8190 = t7093 * t7156;
t8188 = t7093 * t7197;
t7151 = t7154 ^ 2;
t7145 = t7151 * t7191;
t7192 = t7190 * t7191;
t8185 = t7151 * t7192;
t7152 = t7155 ^ 2;
t7147 = t7152 * t7194;
t7195 = t7193 * t7194;
t8184 = t7152 * t7195;
t7153 = t7156 ^ 2;
t7149 = t7153 * t7197;
t7198 = t7196 * t7197;
t8183 = t7153 * t7198;
t8085 = t7384 * t7396;
t7208 = t7268 * t8085 - t7405 * t8294;
t8069 = t7394 * t7396;
t7960 = pkin(2) * t8069;
t7963 = pkin(2) * t8087;
t7163 = (t7268 * t7335 + t7332 * t7960) * t7383 + t7208 * t7332 - t7335 * t7963;
t8179 = t7163 * t7190;
t7164 = (t7268 * t7332 - t7335 * t7960) * t7383 - t7208 * t7335 - t7332 * t7963;
t8178 = t7164 * t7190;
t8082 = t7384 * t7399;
t7209 = t7269 * t8082 - t7408 * t8295;
t8063 = t7397 * t7399;
t7959 = pkin(2) * t8063;
t7962 = pkin(2) * t8084;
t7165 = (t7269 * t7336 + t7333 * t7959) * t7383 + t7209 * t7333 - t7336 * t7962;
t8177 = t7165 * t7193;
t7166 = (t7269 * t7333 - t7336 * t7959) * t7383 - t7209 * t7336 - t7333 * t7962;
t8176 = t7166 * t7193;
t8079 = t7384 * t7402;
t7210 = t7270 * t8079 - t7411 * t8296;
t8057 = t7400 * t7402;
t7958 = pkin(2) * t8057;
t7961 = pkin(2) * t8081;
t7167 = (t7270 * t7337 + t7334 * t7958) * t7383 + t7210 * t7334 - t7337 * t7961;
t8175 = t7167 * t7196;
t7168 = (t7270 * t7334 - t7337 * t7958) * t7383 - t7210 * t7337 - t7334 * t7961;
t8174 = t7168 * t7196;
t7181 = -t8294 * t7396 + (-t7972 - t8137) * t7405;
t8167 = t7181 * t7190;
t7182 = -t8295 * t7399 + (-t7971 - t8136) * t7408;
t8166 = t7182 * t7193;
t7183 = -t8296 * t7402 + (-t7970 - t8135) * t7411;
t8165 = t7183 * t7196;
t8156 = t7191 * t7395;
t8150 = t7194 * t7398;
t8144 = t7197 * t7401;
t8122 = t7365 * t7394;
t8115 = t7371 * t7397;
t8108 = t7377 * t7400;
t8091 = t7383 * t7426;
t8090 = t7384 * t6869;
t8089 = t7384 * t6870;
t8088 = t7384 * t6871;
t8078 = t7384 * t7403;
t8076 = t7384 * t7406;
t8074 = t7384 * t7408;
t8073 = t7384 * t7409;
t8070 = t7394 * t7395;
t8068 = t7394 * t7403;
t8067 = t7394 * t7404;
t8064 = t7397 * t7398;
t8062 = t7397 * t7406;
t8061 = t7397 * t7407;
t8058 = t7400 * t7401;
t8056 = t7400 * t7409;
t8055 = t7400 * t7410;
t8051 = t7404 * t7405;
t8049 = t7407 * t7408;
t8047 = t7410 * t7411;
t6836 = -t6875 * t7985 + (-t6875 * t8100 + t6890 * t8272 - 0.2e1 * t6956 + 0.2e1 * t8302) * pkin(5);
t6953 = (-pkin(5) * t7654 + t7055) * t7384 + (-pkin(5) * t7680 - t7103 / 0.2e1) * t7383 + pkin(1) * t7852;
t8046 = -t7403 * t6836 - 0.2e1 * t6953 * t7882 - t8307 * t7394;
t7607 = -0.2e1 * t7667;
t8045 = t8307 * t7403 + (t6953 * t7607 - t6836) * t7394;
t6837 = -t6876 * t7984 + (-t6876 * t8097 + t6891 * t8272 - 0.2e1 * t6957 + 0.2e1 * t8301) * pkin(5);
t6954 = (-pkin(5) * t7645 + t7056) * t7384 + (-pkin(5) * t7675 - t7104 / 0.2e1) * t7383 + pkin(1) * t7847;
t8044 = -t7406 * t6837 - 0.2e1 * t6954 * t7878 - t8308 * t7397;
t7606 = -0.2e1 * t7664;
t8043 = t8308 * t7406 + (t6954 * t7606 - t6837) * t7397;
t6838 = -t6877 * t7983 + (-t6877 * t8094 + t6892 * t8272 - 0.2e1 * t6958 + 0.2e1 * t8300) * pkin(5);
t6955 = (-pkin(5) * t7636 + t7057) * t7384 + (-pkin(5) * t7670 - t7105 / 0.2e1) * t7383 + pkin(1) * t7842;
t8042 = -t7409 * t6838 - 0.2e1 * t6955 * t7874 - t8309 * t7400;
t7605 = -0.2e1 * t7661;
t8041 = t8309 * t7409 + (t6955 * t7605 - t6838) * t7400;
t6847 = t6892 * t7724 + t6892 - t8088;
t6940 = t7506 * t7989 + (-t7196 * t7567 + (-t7196 ^ 2 + t7197 * t7359) * t7410 * t7156) * t8187;
t7810 = t7197 * t8094;
t7546 = t7810 * t8303;
t7611 = t7724 + 0.1e1;
t7663 = t7156 * t7874;
t7901 = (t7138 + t7661) * t7093 * t7384;
t6889 = t7384 * t6892;
t6859 = t6889 - t7694 / 0.2e1 - t7575 / 0.2e1 + t6901 / 0.2e1;
t7915 = t6859 * t8102;
t8040 = -0.2e1 * t6847 * t8056 + t8252 * t7915 + 0.4e1 * t7400 * t6940 * t8054 + t8253 * t7546 + (t8252 * t7901 + (-0.4e1 * t7376 * t7611 + 0.2e1 * t8132 + t8269 + 0.2e1) * t7663) * t8148;
t6845 = t6890 * t7726 + t6890 - t8090;
t6938 = t7510 * t7989 + (-t7190 * t7571 + (-t7190 ^ 2 + t7191 * t7359) * t7404 * t7154) * t8197;
t7816 = t7191 * t8100;
t7545 = t7816 * t8305;
t7613 = t7726 + 0.1e1;
t7669 = t7154 * t7882;
t7905 = (t7136 + t7667) * t7091 * t7384;
t6887 = t7384 * t6890;
t6857 = t6887 - t7696 / 0.2e1 - t7577 / 0.2e1 + t6899 / 0.2e1;
t7917 = t6857 * t8104;
t8039 = -0.2e1 * t6845 * t8068 + t8258 * t7917 + 0.4e1 * t6938 * t7394 * t8066 + t8259 * t7545 + (t8258 * t7905 + (-0.4e1 * t7364 * t7613 + 0.2e1 * t8134 + t8271 + 0.2e1) * t7669) * t8160;
t6846 = t6891 * t7725 + t6891 - t8089;
t6939 = t7508 * t7989 + (-t7193 * t7569 + (-t7193 ^ 2 + t7194 * t7359) * t7407 * t7155) * t8192;
t7813 = t7194 * t8097;
t7547 = t7813 * t8304;
t7612 = t7725 + 0.1e1;
t7666 = t7155 * t7878;
t7903 = (t7137 + t7664) * t7092 * t7384;
t6888 = t7384 * t6891;
t6858 = t6888 - t7695 / 0.2e1 - t7576 / 0.2e1 + t6900 / 0.2e1;
t7916 = t6858 * t8103;
t8038 = -0.2e1 * t6846 * t8062 + t8255 * t7916 + 0.4e1 * t7397 * t6939 * t8060 + t8256 * t7547 + (t8255 * t7903 + (-0.4e1 * t7370 * t7612 + 0.2e1 * t8133 + t8270 + 0.2e1) * t7666) * t8154;
t6864 = t6869 + t6887;
t7022 = t7142 + t7083 / 0.2e1;
t7668 = t7395 * t7882;
t7770 = t7383 * t8070;
t7732 = 0.2e1 * t7770;
t8037 = t6857 * t7403 * t7732 + t6845 * t7364 + t6864 * t7384 + t7545 * t8068 - 0.2e1 * t6938 * t8125 + (-t7383 * t7022 * t7668 - (t7613 * t7669 - t7905) * t7190 * t8068) * t8312;
t6866 = t6870 + t6888;
t7023 = t7143 + t7085 / 0.2e1;
t7665 = t7398 * t7878;
t7768 = t7383 * t8064;
t7731 = 0.2e1 * t7768;
t8036 = t6858 * t7406 * t7731 + t6846 * t7370 + t6866 * t7384 + t7547 * t8062 - 0.2e1 * t6939 * t8118 + (-t7383 * t7023 * t7665 - (t7612 * t7666 - t7903) * t7193 * t8062) * t8311;
t6868 = t6871 + t6889;
t7024 = t7144 + t7087 / 0.2e1;
t7662 = t7401 * t7874;
t7766 = t7383 * t8058;
t7730 = 0.2e1 * t7766;
t8035 = t6859 * t7409 * t7730 + t6847 * t7376 + t6868 * t7384 + t7546 * t8056 - 0.2e1 * t6940 * t8111 + (-t7383 * t7024 * t7662 - (t7611 * t7663 - t7901) * t7196 * t8056) * t8310;
t7481 = t7404 * t7493;
t6963 = t7481 + t7383 * (t7082 - t7106);
t6977 = t7383 * t7481 - t7106;
t7781 = t7383 * t8086;
t7911 = t6869 * t8100;
t7992 = 0.4e1 * t7314 * t7365;
t8034 = -t7403 * t7911 + t6875 * (t7770 - t8078) + (t7403 * t7989 - t8260 * t8070) * t8213 + t6963 * t8066 + t6977 * t8087 + (-0.4e1 * (t7314 * t7681 + t7404 * t7668 / 0.2e1) * t8161 + (t7394 * t7992 + 0.2e1 * t7781) * t8198) * t7154;
t7479 = t7407 * t7492;
t6962 = t7479 + t7383 * (t7084 - t7107);
t6978 = t7383 * t7479 - t7107;
t7778 = t7383 * t8083;
t7910 = t6870 * t8097;
t7991 = 0.4e1 * t7315 * t7371;
t8033 = -t7406 * t7910 + t6876 * (t7768 - t8076) + (t7406 * t7989 - t8260 * t8064) * t8210 + t6962 * t8060 + t6978 * t8084 + (-0.4e1 * (t7315 * t7676 + t7407 * t7665 / 0.2e1) * t8155 + (t7397 * t7991 + 0.2e1 * t7778) * t8193) * t7155;
t7480 = t7410 * t7491;
t6964 = t7480 + t7383 * (t7086 - t7108);
t6979 = t7383 * t7480 - t7108;
t7775 = t7383 * t8080;
t7909 = t6871 * t8094;
t7990 = 0.4e1 * t7316 * t7377;
t8032 = -t7409 * t7909 + t6877 * (t7766 - t8073) + (t7409 * t7989 - t8260 * t8058) * t8207 + t6964 * t8054 + t6979 * t8081 + (-0.4e1 * (t7316 * t7671 + t7410 * t7662 / 0.2e1) * t8149 + (t7400 * t7990 + 0.2e1 * t7775) * t8188) * t7156;
t7769 = t7383 * t8066;
t8031 = -t7394 * t7911 - t6875 * (t7769 + t8087) + (t8260 * t8066 - 0.2e1 * t7782) * t8213 + t6963 * t8070 - t6977 * t8078 + (-0.2e1 * ((t7083 - 0.2e1 * t7682) * t7403 + t7395 * t7520) * t8161 + (t7732 * t8123 - 0.4e1 * t7314) * t8198) * t7154;
t7767 = t7383 * t8060;
t8030 = -t7397 * t7910 - t6876 * (t7767 + t8084) + (t8260 * t8060 - 0.2e1 * t7779) * t8210 + t6962 * t8064 - t6978 * t8076 + (-0.2e1 * ((t7085 - 0.2e1 * t7677) * t7406 + t7398 * t7519) * t8155 + (t7731 * t8116 - 0.4e1 * t7315) * t8193) * t7155;
t7765 = t7383 * t8054;
t8029 = -t7400 * t7909 - t6877 * (t7765 + t8081) + (t8260 * t8054 - 0.2e1 * t7776) * t8207 + t6964 * t8058 - t6979 * t8073 + (-0.2e1 * ((t7087 - 0.2e1 * t7672) * t7409 + t7401 * t7518) * t8149 + (t7730 * t8109 - 0.4e1 * t7316) * t8188) * t7156;
t7826 = t7366 * t8172;
t7523 = t7115 * t7826 * t8199;
t8025 = (t7136 + t7607) * t7142 - 0.2e1 * t7523;
t7824 = t7372 * t8170;
t7522 = t7116 * t7824 * t8194;
t8024 = (t7137 + t7606) * t7143 - 0.2e1 * t7522;
t7822 = t7378 * t8168;
t7521 = t7117 * t7822 * t8189;
t8023 = (t7138 + t7605) * t7144 - 0.2e1 * t7521;
t8010 = t7145 - t7082;
t8009 = t7147 - t7084;
t8008 = t7149 - t7086;
t7998 = t7365 * t8277;
t7997 = t7371 * t8276;
t7996 = t7377 * t8275;
t7995 = -0.2e1 * t8198;
t7994 = -0.2e1 * t8193;
t7993 = -0.2e1 * t8188;
t7944 = pkin(6) * t8100;
t7943 = pkin(6) * t8097;
t7942 = pkin(6) * t8094;
t7941 = t7396 * t8225;
t7940 = t7399 * t8224;
t7939 = t7402 * t8223;
t7927 = -0.2e1 * t8001;
t7925 = -0.2e1 * t8000;
t7923 = -0.2e1 * t7999;
t7921 = t8261 * pkin(6);
t6863 = t6869 + 0.2e1 * t6887;
t7914 = t6863 * t8158;
t6865 = t6870 + 0.2e1 * t6888;
t7913 = t6865 * t8152;
t6867 = t6871 + 0.2e1 * t6889;
t7912 = t6867 * t8146;
t7038 = t7136 - t7667;
t7904 = t7038 * t8182;
t7040 = t7137 - t7664;
t7902 = t7040 * t8181;
t7042 = t7138 - t7661;
t7900 = t7042 * t8180;
t7899 = t7091 * t8156;
t7894 = t7092 * t8150;
t7889 = t7093 * t8144;
t7211 = t7277 * t7383 * t7396 - t7299 * t7405;
t7274 = t8257 * t7338 - pkin(5);
t7764 = t7394 * t8065;
t7601 = t7764 * t8239;
t7532 = t7405 * t7601;
t7708 = t7394 * t7941;
t7717 = t7364 * t7932;
t7797 = t7335 * t8067;
t7121 = ((-t7277 * t7335 - t7332 * t7941) * t7403 + (-pkin(6) * t7797 + t7332 * t8299) * t7395) * t7359 + (-(t7332 * t8051 + t7335 * t7988) * t8242 + (t7211 * t7332 - t7335 * t7944) * t7403 + (-t7296 * t7335 + t7332 * t7708) * t8104) * t7384 - t7332 * t7717 + (t7274 * t7335 + t7332 * t7532) * t7403 - t8287 * t7332 + t7299 * t7797;
t7872 = t7121 * t8160;
t7212 = t7278 * t7383 * t7399 - t7303 * t7408;
t7275 = t8254 * t7340 - pkin(5);
t7763 = t7397 * t8059;
t7600 = t7763 * t8239;
t7531 = t7408 * t7600;
t7707 = t7397 * t7940;
t7716 = t7370 * t7930;
t7796 = t7336 * t8061;
t7122 = ((-t7278 * t7336 - t7333 * t7940) * t7406 + (-pkin(6) * t7796 + t7333 * t8298) * t7398) * t7359 + (-(t7333 * t8049 + t7336 * t7987) * t8241 + (t7212 * t7333 - t7336 * t7943) * t7406 + (-t7300 * t7336 + t7333 * t7707) * t8103) * t7384 - t7333 * t7716 + (t7275 * t7336 + t7333 * t7531) * t7406 - t8286 * t7333 + t7303 * t7796;
t7871 = t7122 * t8154;
t7213 = t7279 * t7383 * t7402 - t7307 * t7411;
t7276 = t8251 * t7342 - pkin(5);
t7762 = t7400 * t8053;
t7599 = t7762 * t8239;
t7530 = t7411 * t7599;
t7706 = t7400 * t7939;
t7715 = t7376 * t7928;
t7795 = t7337 * t8055;
t7123 = ((-t7279 * t7337 - t7334 * t7939) * t7409 + (-pkin(6) * t7795 + t7334 * t8297) * t7401) * t7359 + (-(t7334 * t8047 + t7337 * t7986) * t8240 + (t7213 * t7334 - t7337 * t7942) * t7409 + (-t7304 * t7337 + t7334 * t7706) * t8102) * t7384 - t7334 * t7715 + (t7276 * t7337 + t7334 * t7530) * t7409 - t8285 * t7334 + t7307 * t7795;
t7870 = t7123 * t8148;
t7800 = t7332 * t8067;
t7124 = ((-t7277 * t7332 + t7335 * t7941) * t7403 + (-pkin(6) * t7800 - t7335 * t8299) * t7395) * t7359 + ((0.2e1 * t7332 * t8104 + t7335 * t8051) * t8242 + (-t7211 * t7335 - t7332 * t7944) * t7403 - (t7296 * t7332 + t7335 * t7708) * t8104) * t7384 + t7335 * t7717 + (t7274 * t7332 - t7335 * t7532) * t7403 + t8287 * t7335 + t7299 * t7800;
t7869 = t7124 * t8160;
t7799 = t7333 * t8061;
t7125 = ((-t7278 * t7333 + t7336 * t7940) * t7406 + (-pkin(6) * t7799 - t7336 * t8298) * t7398) * t7359 + ((0.2e1 * t7333 * t8103 + t7336 * t8049) * t8241 + (-t7212 * t7336 - t7333 * t7943) * t7406 - (t7300 * t7333 + t7336 * t7707) * t8103) * t7384 + t7336 * t7716 + (t7275 * t7333 - t7336 * t7531) * t7406 + t8286 * t7336 + t7303 * t7799;
t7868 = t7125 * t8154;
t7798 = t7334 * t8055;
t7126 = ((-t7279 * t7334 + t7337 * t7939) * t7409 + (-pkin(6) * t7798 - t7337 * t8297) * t7401) * t7359 + ((0.2e1 * t7334 * t8102 + t7337 * t8047) * t8240 + (-t7213 * t7337 - t7334 * t7942) * t7409 - (t7304 * t7334 + t7337 * t7706) * t8102) * t7384 + t7337 * t7715 + (t7276 * t7334 - t7337 * t7530) * t7409 + t8285 * t7337 + t7307 * t7798;
t7867 = t7126 * t8148;
t7699 = t8261 * t7396 * t7297;
t7199 = t7308 * t8099 - t7395 * t7699;
t7205 = t7298 * t8099 - t7699;
t7780 = t7383 * t8085;
t7627 = t7332 * t7780;
t7229 = -t7335 * t7359 + t7335 + t7627;
t7262 = -t7947 + t7299;
t7280 = t7344 - t7921;
t7580 = t7723 * t7405;
t7592 = t7780 * t7339;
t7630 = t7297 * t7781;
t7809 = t7297 * t8105;
t7127 = (t7332 * t7383 * t7580 + t7229 * t7926) * t7368 + (-t7229 * t7790 + (t7205 * t7332 - t7335 * t7809) * t8235 + (t7262 * t7335 + t7332 * t7592) * pkin(6)) * t7404 - (pkin(6) * t7627 + t7280 * t7335) * t8235 + pkin(6) * (t7199 * t7332 - t7335 * t7630);
t7866 = t7127 * t8173;
t7624 = t7335 * t7780;
t7230 = t7332 * t7359 - t7332 + t7624;
t7128 = (-t7335 * t7723 * t8099 + t7230 * t7927) * t7368 + (t7230 * t7790 - (t7205 * t7335 + t7332 * t7809) * t8235 + pkin(6) * (t7262 * t7332 - t7335 * t7592)) * t7404 - (-pkin(6) * t7624 + t7280 * t7332) * t8235 - (t7199 * t7335 + t7332 * t7630) * pkin(6);
t7865 = t7128 * t8173;
t7698 = t8261 * t7399 * t7301;
t7200 = t7309 * t8096 - t7398 * t7698;
t7206 = t7302 * t8096 - t7698;
t7777 = t7383 * t8082;
t7626 = t7333 * t7777;
t7231 = -t7336 * t7359 + t7336 + t7626;
t7263 = -t7946 + t7303;
t7281 = t7345 - t7921;
t7591 = t7777 * t7341;
t7629 = t7301 * t7778;
t7808 = t7301 * t8105;
t7129 = (t7333 * t7408 * t7579 + t7231 * t7924) * t7374 + (-t7231 * t7787 + (t7206 * t7333 - t7336 * t7808) * t8233 + (t7263 * t7336 + t7333 * t7591) * pkin(6)) * t7407 - (pkin(6) * t7626 + t7281 * t7336) * t8233 + pkin(6) * (t7200 * t7333 - t7336 * t7629);
t7864 = t7129 * t8171;
t7623 = t7336 * t7777;
t7232 = t7333 * t7359 - t7333 + t7623;
t7130 = (-t7336 * t7722 * t8096 + t7232 * t7925) * t7374 + (t7232 * t7787 - (t7206 * t7336 + t7333 * t7808) * t8233 + pkin(6) * (t7263 * t7333 - t7336 * t7591)) * t7407 - (-pkin(6) * t7623 + t7281 * t7333) * t8233 - (t7200 * t7336 + t7333 * t7629) * pkin(6);
t7863 = t7130 * t8171;
t7697 = t8261 * t7402 * t7305;
t7201 = t7310 * t8093 - t7401 * t7697;
t7207 = t7306 * t8093 - t7697;
t7774 = t7383 * t8079;
t7625 = t7334 * t7774;
t7233 = -t7337 * t7359 + t7337 + t7625;
t7264 = -t7945 + t7307;
t7282 = t7346 - t7921;
t7578 = t7721 * t7411;
t7590 = t7774 * t7343;
t7628 = t7305 * t7775;
t7807 = t7305 * t8105;
t7131 = (t7334 * t7383 * t7578 + t7233 * t7922) * t7380 + (-t7233 * t7784 + (t7207 * t7334 - t7337 * t7807) * t8231 + (t7264 * t7337 + t7334 * t7590) * pkin(6)) * t7410 - (pkin(6) * t7625 + t7282 * t7337) * t8231 + pkin(6) * (t7201 * t7334 - t7337 * t7628);
t7862 = t7131 * t8169;
t7622 = t7337 * t7774;
t7234 = t7334 * t7359 - t7334 + t7622;
t7132 = (-t7337 * t7721 * t8093 + t7234 * t7923) * t7380 + (t7234 * t7784 - (t7207 * t7337 + t7334 * t7807) * t8231 + pkin(6) * (t7264 * t7334 - t7337 * t7590)) * t7410 - (-pkin(6) * t7622 + t7282 * t7334) * t8231 - (t7201 * t7337 + t7334 * t7628) * pkin(6);
t7861 = t7132 * t8169;
t7860 = (pkin(5) * t7773 + t7344) * t8185;
t7859 = t7384 * t8185;
t7858 = (pkin(5) * t7772 + t7345) * t8184;
t7857 = t7384 * t8184;
t7856 = (pkin(5) * t7771 + t7346) * t8183;
t7855 = t7384 * t8183;
t7853 = t7154 * t8158;
t7848 = t7155 * t8152;
t7843 = t7156 * t8146;
t7157 = ((-pkin(6) * t7764 - t7277 * t7403) * t8099 + (-t7299 * t7403 - t7364 * t8234) * t7396) * t7384 + t7403 * t7396 * t7601 + (t8250 * t7395 - t7711) * t8069 + ((-t7395 * t7751 + t7938) * t7359 + t7978 - t7296 * t7395) * t7405;
t7839 = t7157 * t8160;
t7158 = ((-pkin(6) * t7763 - t7278 * t7406) * t8096 + (-t7303 * t7406 - t7370 * t8232) * t7399) * t7384 + t7406 * t7399 * t7600 + (t8250 * t7398 - t7710) * t8063 + ((-t7398 * t7750 + t7937) * t7359 + t7976 - t7300 * t7398) * t7408;
t7838 = t7158 * t8154;
t7159 = ((-pkin(6) * t7762 - t7279 * t7409) * t8093 + (-t7307 * t7409 - t7376 * t8230) * t7402) * t7384 + t7409 * t7402 * t7599 + (t8250 * t7401 - t7709) * t8057 + ((-t7401 * t7749 + t7936) * t7359 + t7974 - t7304 * t7401) * t7411;
t7837 = t7159 * t8148;
t7160 = (t7384 * t7405 * t7927 + t7396 * t7723) * t7368 + ((-t7297 * t8099 + t7298 * t7396) * t8235 + t7580 * t8086) * t7404 + pkin(6) * (t7308 * t7396 + (pkin(2) * t8078 - t7297 * t8104) * t7405);
t7836 = t7160 * t8173;
t7161 = (t7399 * t7722 + t7925 * t8074) * t7374 + ((-t7301 * t8096 + t7302 * t7399) * t8233 + t7722 * t7398 * t8074) * t7407 + pkin(6) * (t7309 * t7399 + (pkin(2) * t8076 - t7301 * t8103) * t7408);
t7835 = t7161 * t8171;
t7162 = (t7384 * t7411 * t7923 + t7402 * t7721) * t7380 + ((-t7305 * t8093 + t7306 * t7402) * t8231 + t7578 * t8080) * t7410 + pkin(6) * (t7310 * t7402 + (pkin(2) * t8073 - t7305 * t8102) * t7411);
t7834 = t7162 * t8169;
t7833 = t7163 * t8157;
t7832 = t7164 * t8157;
t7831 = t7165 * t8151;
t7830 = t7166 * t8151;
t7829 = t7167 * t8145;
t7828 = t7168 * t8145;
t7821 = t7181 * t8157;
t7820 = t7182 * t8151;
t7819 = t7183 * t8145;
t7789 = t7368 * t7145;
t7786 = t7374 * t7147;
t7783 = t7380 * t7149;
t7013 = t8261 * t7852 + 0.2e1 * t7571;
t7653 = t7403 * t7853;
t7747 = t7365 * (0.2e1 * t6864 * t8068 + t8259 * t7908 + ((-0.2e1 * t7151 * t7816 + 0.4e1 * t7510) * t7384 + 0.4e1 * t7523) * t7364 + t7013 * t7653 * t8267 + t8025);
t7014 = t8261 * t7847 + 0.2e1 * t7569;
t7644 = t7406 * t7848;
t7746 = t7371 * (0.2e1 * t6866 * t8062 + t8256 * t7907 + ((-0.2e1 * t7152 * t7813 + 0.4e1 * t7508) * t7384 + 0.4e1 * t7522) * t7370 + t7014 * t7644 * t8266 + t8024);
t7015 = t8261 * t7842 + 0.2e1 * t7567;
t7635 = t7409 * t7843;
t7745 = t7377 * (0.2e1 * t6868 * t8056 + t8253 * t7906 + ((-0.2e1 * t7153 * t7810 + 0.4e1 * t7506) * t7384 + 0.4e1 * t7521) * t7376 + t7015 * t7635 * t8265 + t8023);
t7744 = t7163 * t7995;
t7743 = t7164 * t7995;
t7742 = t7181 * t7995;
t7741 = t7165 * t7994;
t7740 = t7166 * t7994;
t7739 = t7182 * t7994;
t7738 = t7167 * t7993;
t7737 = t7168 * t7993;
t7736 = t7183 * t7993;
t7735 = 0.2e1 * t7789;
t7734 = 0.2e1 * t7786;
t7733 = 0.2e1 * t7783;
t6872 = t6890 * t8100 + t6875;
t7139 = -0.2e1 * t7789;
t7118 = -t7145 + t7735;
t7445 = t7118 * t7359 + t6977 + t7145;
t7565 = t7781 * t7145;
t7729 = ((t7139 + t7445) * t7394 - t7403 * t7565) * t7365 - t6872;
t6873 = t6891 * t8097 + t6876;
t7140 = -0.2e1 * t7786;
t7119 = -t7147 + t7734;
t7444 = t7119 * t7359 + t6978 + t7147;
t7562 = t7778 * t7147;
t7728 = ((t7140 + t7444) * t7397 - t7406 * t7562) * t7371 - t6873;
t6874 = t6892 * t8094 + t6877;
t7141 = -0.2e1 * t7783;
t7120 = -t7149 + t7733;
t7443 = t7120 * t7359 + t6979 + t7149;
t7559 = t7775 * t7149;
t7727 = ((t7141 + t7443) * t7400 - t7409 * t7559) * t7377 - t6874;
t7693 = t8122 * t8214;
t7692 = t8115 * t8211;
t7691 = t8108 * t8208;
t7025 = 0.2e1 * t7142 + t7083;
t7690 = t7025 * t7899;
t7689 = t7025 * t7404 * t8198;
t7028 = 0.2e1 * t7143 + t7085;
t7688 = t7028 * t7894;
t7687 = t7028 * t7407 * t8193;
t7031 = 0.2e1 * t7144 + t7087;
t7686 = t7031 * t7889;
t7685 = t7031 * t7410 * t8188;
t7684 = t7154 * t7897;
t7679 = t7155 * t7892;
t7674 = t7156 * t7887;
t7659 = t7154 * t7826;
t7650 = t7155 * t7824;
t7641 = t7156 * t7822;
t7633 = t7192 * t7365 * t8065;
t7632 = t7195 * t7371 * t8059;
t7631 = t7198 * t7377 * t8053;
t6851 = t6864 * t7394 + t6890 * t7769;
t7586 = t7365 * (t6851 * t7394 - t8025 * t8068 + (t7013 * t7364 - t7571) * t7853);
t7585 = t7365 * ((-t7445 + t7735) * t7403 + (-t6872 - t7565) * t7394);
t6852 = t6866 * t7397 + t6891 * t7767;
t7584 = t7371 * (t6852 * t7397 - t8024 * t8062 + (t7014 * t7370 - t7569) * t7848);
t6853 = t6868 * t7400 + t6892 * t7765;
t7583 = t7377 * (t6853 * t7400 - t8023 * t8056 + (t7015 * t7376 - t7567) * t7843);
t7582 = t7377 * ((-t7443 + t7733) * t7409 + (-t6874 - t7559) * t7400);
t7581 = ((-t7444 + t7734) * t7406 + (-t6873 - t7562) * t7397) * t7371;
t7564 = t7860 * t8122;
t7563 = t7151 * t7633;
t7561 = t7858 * t8115;
t7560 = t7152 * t7632;
t7558 = t7856 * t8108;
t7557 = t7153 * t7631;
t7556 = t7404 * t7660;
t7554 = t7407 * t7651;
t7552 = t7410 * t7642;
t7550 = t7027 * t7654;
t7549 = t7030 * t7645;
t7548 = t7033 * t7636;
t7517 = t7127 * t7556;
t7516 = t7128 * t7556;
t7515 = t7129 * t7554;
t7514 = t7130 * t7554;
t7513 = t7131 * t7552;
t7512 = t7132 * t7552;
t7511 = t7160 * t7556;
t7509 = t7161 * t7554;
t7507 = t7162 * t7552;
t7247 = -pkin(5) * t7781 + t8245;
t7490 = t7247 * t8185 - t7256 * t8215;
t7489 = t7190 * t8214 + t7860;
t7248 = -pkin(5) * t7778 + t8244;
t7488 = t7248 * t8184 - t7257 * t8212;
t7487 = -t7193 * t8211 + t7858;
t7249 = -pkin(5) * t7775 + t8243;
t7486 = t7249 * t8183 - t7258 * t8209;
t7485 = -t7196 * t8208 + t7856;
t7475 = t6890 * t8158 - t7404 * t7859;
t7474 = t6890 * t8157 + t7395 * t7859;
t7473 = t6891 * t8152 - t7407 * t7857;
t7472 = t6891 * t8151 + t7398 * t7857;
t7471 = t6892 * t8146 - t7410 * t7855;
t7470 = t6892 * t8145 + t7401 * t7855;
t7463 = (-t6890 * (pkin(1) * t8101 + t7256 * t7394) + (pkin(5) * t7804 + t7247 * t7394) * t7145) * t8173;
t7295 = t8261 * pkin(5);
t7462 = (t6890 * ((-pkin(5) * t8052 + t8248) * t7383 - t7704) + (t7247 * t7403 - t7295 * t7394) * t7145) * t8173;
t7461 = (-t6891 * (pkin(1) * t8098 + t7257 * t7397) + (pkin(5) * t7803 + t7248 * t7397) * t7147) * t8171;
t7460 = (t6891 * ((-pkin(5) * t8050 + t8247) * t7383 - t7705) + (t7248 * t7406 - t7295 * t7397) * t7147) * t8171;
t7459 = (-t6892 * (pkin(1) * t8095 + t7258 * t7400) + (pkin(5) * t7802 + t7249 * t7400) * t7149) * t8169;
t7458 = (t6892 * ((-pkin(5) * t8048 + t8246) * t7383 - t7703) + (t7249 * t7409 - t7295 * t7400) * t7149) * t8169;
t7454 = t7192 * t7992 * t8200 + 0.2e1 * t6890 * t7817;
t7453 = t7395 ^ 2 * t8215 + 0.2e1 * t7633 * t8200;
t7452 = t7195 * t7991 * t8195 + 0.2e1 * t6891 * t7814;
t7451 = t7398 ^ 2 * t8212 + 0.2e1 * t7632 * t8195;
t7450 = t7198 * t7990 * t8190 + 0.2e1 * t6892 * t7811;
t7449 = t7401 ^ 2 * t8209 + 0.2e1 * t7631 * t8190;
t7032 = t7144 + 0.2e1 * t7087;
t7029 = t7143 + 0.2e1 * t7085;
t7026 = t7142 + 0.2e1 * t7083;
t7021 = t7048 + t7148;
t7020 = t7047 + t7146;
t7019 = t7046 + t7150;
t7009 = t7032 * t7400 + t7383 * t7635;
t7008 = t7029 * t7397 + t7383 * t7644;
t7007 = t7026 * t7394 + t7383 * t7653;
t7006 = t7032 * t7409 - t7400 * t7636;
t7005 = t7029 * t7406 - t7397 * t7645;
t7004 = t7026 * t7403 - t7394 * t7654;
t6973 = t7021 * t8244 - t7023 * t7953;
t6972 = t7020 * t8245 - t7022 * t7954;
t6971 = t7019 * t7346 + t7024 * t7949;
t6970 = t7021 * t7345 + t7023 * t7950;
t6969 = t7020 * t7344 + t7022 * t7951;
t6968 = t7019 * t8243 - t7024 * t7952;
t6934 = ((t7153 * t7724 - 0.2e1 * t7674) * t7197 + t8008) * t8056 - t8253 * t7548;
t6933 = ((t7152 * t7725 - 0.2e1 * t7679) * t7194 + t8009) * t8062 - t8256 * t7549;
t6932 = ((t7151 * t7726 - 0.2e1 * t7684) * t7191 + t8010) * t8068 - t8259 * t7550;
t6931 = (-0.2e1 * t7086 + t7141 + 0.2e1 * t7149) * t7376 + 0.4e1 * t7548 * t8056 + (-t8252 * t7674 + (t8253 * t8132 + t7380) * t7153) * t7197 - t8008;
t6930 = (-0.2e1 * t7084 + t7140 + 0.2e1 * t7147) * t7370 + 0.4e1 * t7549 * t8062 + (-t8255 * t7679 + (t8256 * t8133 + t7374) * t7152) * t7194 - t8009;
t6929 = (-0.2e1 * t7082 + t7139 + 0.2e1 * t7145) * t7364 + 0.4e1 * t7550 * t8068 + (-t8258 * t7684 + (t8259 * t8134 + t7368) * t7151) * t7191 - t8010;
t6862 = t8088 / 0.2e1 + t6892;
t6861 = t8089 / 0.2e1 + t6891;
t6860 = t8090 / 0.2e1 + t6890;
t6850 = t6868 * t7409 - t6892 * t7766;
t6849 = t6866 * t7406 - t6891 * t7768;
t6848 = t6864 * t7403 - t6890 * t7770;
t6829 = -0.2e1 * t6859 * t7949 - 0.2e1 * t6862 * t7346;
t6828 = -0.2e1 * pkin(5) * t7915 + 0.2e1 * t6862 * t8243;
t6827 = -0.2e1 * pkin(5) * t7917 + 0.2e1 * t6860 * t8245;
t6826 = -0.2e1 * t6858 * t7950 - 0.2e1 * t6861 * t7345;
t6825 = -0.2e1 * t6857 * t7951 - 0.2e1 * t6860 * t7344;
t6824 = -0.2e1 * pkin(5) * t7916 + 0.2e1 * t6861 * t8244;
t1 = [(t6890 * t8178 + t6891 * t8176 + t6892 * t8174) * MDP(1) + (-t7124 * t7563 - t7125 * t7560 - t7126 * t7557 + t7164 * t7453 + t7166 * t7451 + t7168 * t7449) * t8219 + (-t7118 * t7869 - t7119 * t7868 - t7120 * t7867 + t7164 * t7454 + t7166 * t7452 + t7168 * t7450) * t8218 + (t7164 * t7914 + t7166 * t7913 + t7168 * t7912 + (t7126 * t7471 + t7168 * t7685) * t7377 + (t7125 * t7473 + t7166 * t7687) * t7371 + (t7124 * t7475 + t7164 * t7689) * t7365) * t8217 + (t6863 * t7832 + t6865 * t7830 + t6867 * t7828 + (t7126 * t7470 - t7168 * t7686) * t7377 + (t7125 * t7472 - t7166 * t7688) * t7371 + (t7124 * t7474 - t7164 * t7690) * t7365) * t8216 + (t6864 * t7869 + t6866 * t7868 + t6868 * t7867 + (t6864 * t8178 + t6866 * t8176 + t6868 * t8174) * t7384) * MDP(8) + (t6824 * t8176 + t6827 * t8178 + t6828 * t8174 + (t6971 * t7737 + t7126 * t7485) * t7377 + (t6970 * t7740 + t7125 * t7487) * t7371 + (t6969 * t7743 + t7124 * t7489) * t7365) * MDP(9) + (t6825 * t8178 + t6826 * t8176 + t6829 * t8174 + (t6968 * t7737 + t7126 * t7486) * t7377 + (t6973 * t7740 + t7125 * t7488) * t7371 + (t6972 * t7743 + t7124 * t7490) * t7365) * MDP(10) + ((t6932 * t7865 + t6933 * t7863 + t6934 * t7861) * t7426 + (t7126 * t7583 + t7168 * t8035) * t7196 + (t7125 * t7584 + t7166 * t8036) * t7193 + (t7124 * t7586 + t7164 * t8037) * t7190) * MDP(11) + ((t6929 * t7865 + t6930 * t7863 + t6931 * t7861) * t7426 + (t7126 * t7745 + t7168 * t8040) * t7196 + (t7125 * t7746 + t7166 * t8038) * t7193 + (t7124 * t7747 + t7164 * t8039) * t7190) * MDP(12) + ((t7126 * t7582 + t7168 * t8029) * t7196 + (t7125 * t7581 + t7166 * t8030) * t7193 + (t7124 * t7585 + t7164 * t8031) * t7190 + (t6851 * t7865 + t6852 * t7863 + t6853 * t7861 + (t7004 * t7516 + t7005 * t7514 + t7006 * t7512) * t7383) * t7426) * MDP(13) + ((t7126 * t7727 + t7168 * t8032) * t7196 + (t7125 * t7728 + t7166 * t8033) * t7193 + (t7124 * t7729 + t7164 * t8034) * t7190 + (t6848 * t7865 + t6849 * t7863 + t6850 * t7861 + (-t7007 * t7516 - t7008 * t7514 - t7009 * t7512) * t7383) * t7426) * MDP(14) + ((-t6872 * t7865 - t6873 * t7863 - t6874 * t7861) * t7426 + (t6872 * t7832 + t6873 * t7830 + t6874 * t7828 + (t7126 * t7900 + (t7132 * t7641 + t7168 * t7996) * t7093) * t8144 + (t7125 * t7902 + (t7130 * t7650 + t7166 * t7997) * t7092) * t8150 + (t7124 * t7904 + (t7128 * t7659 + t7164 * t7998) * t7091) * t8156) * t7383) * MDP(15) + (t7124 * t7860 + t7125 * t7858 + t7126 * t7856 + (-t7126 * t8208 + t7168 * t8041) * t7196 + (-t7125 * t8211 + t7166 * t8043) * t7193 + (t7124 * t8214 + t7164 * t8045) * t7190 + (t7128 * t7463 + t7130 * t7461 + t7132 * t7459) * t7426) * MDP(16) + (-t7124 * t7564 - t7125 * t7561 - t7126 * t7558 + (t7126 * t7691 + t7168 * t8042) * t7196 + (t7125 * t7692 + t7166 * t8044) * t7193 + (-t7124 * t7693 + t7164 * t8046) * t7190 + (t7128 * t7462 + t7130 * t7460 + t7132 * t7458) * t7426) * MDP(17); (t6890 * t8179 + t6891 * t8177 + t6892 * t8175) * MDP(1) + (-t7121 * t7563 - t7122 * t7560 - t7123 * t7557 + t7163 * t7453 + t7165 * t7451 + t7167 * t7449) * t8219 + (-t7118 * t7872 - t7119 * t7871 - t7120 * t7870 + t7163 * t7454 + t7165 * t7452 + t7167 * t7450) * t8218 + (t7163 * t7914 + t7165 * t7913 + t7167 * t7912 + (t7123 * t7471 + t7167 * t7685) * t7377 + (t7122 * t7473 + t7165 * t7687) * t7371 + (t7121 * t7475 + t7163 * t7689) * t7365) * t8217 + (t6863 * t7833 + t6865 * t7831 + t6867 * t7829 + (t7123 * t7470 - t7167 * t7686) * t7377 + (t7122 * t7472 - t7165 * t7688) * t7371 + (t7121 * t7474 - t7163 * t7690) * t7365) * t8216 + (t6864 * t7872 + t6866 * t7871 + t6868 * t7870 + (t6864 * t8179 + t6866 * t8177 + t6868 * t8175) * t7384) * MDP(8) + (t6824 * t8177 + t6827 * t8179 + t6828 * t8175 + (t6971 * t7738 + t7123 * t7485) * t7377 + (t6970 * t7741 + t7122 * t7487) * t7371 + (t6969 * t7744 + t7121 * t7489) * t7365) * MDP(9) + (t6825 * t8179 + t6826 * t8177 + t6829 * t8175 + (t6968 * t7738 + t7123 * t7486) * t7377 + (t6973 * t7741 + t7122 * t7488) * t7371 + (t6972 * t7744 + t7121 * t7490) * t7365) * MDP(10) + ((t6932 * t7866 + t6933 * t7864 + t6934 * t7862) * t7426 + (t7123 * t7583 + t7167 * t8035) * t7196 + (t7122 * t7584 + t7165 * t8036) * t7193 + (t7121 * t7586 + t7163 * t8037) * t7190) * MDP(11) + ((t6929 * t7866 + t6930 * t7864 + t6931 * t7862) * t7426 + (t7123 * t7745 + t7167 * t8040) * t7196 + (t7122 * t7746 + t7165 * t8038) * t7193 + (t7121 * t7747 + t7163 * t8039) * t7190) * MDP(12) + ((t7123 * t7582 + t7167 * t8029) * t7196 + (t7122 * t7581 + t7165 * t8030) * t7193 + (t7121 * t7585 + t7163 * t8031) * t7190 + (t6851 * t7866 + t6852 * t7864 + t6853 * t7862 + (t7004 * t7517 + t7005 * t7515 + t7006 * t7513) * t7383) * t7426) * MDP(13) + ((t7123 * t7727 + t7167 * t8032) * t7196 + (t7122 * t7728 + t7165 * t8033) * t7193 + (t7121 * t7729 + t7163 * t8034) * t7190 + (t6848 * t7866 + t6849 * t7864 + t6850 * t7862 + (-t7007 * t7517 - t7008 * t7515 - t7009 * t7513) * t7383) * t7426) * MDP(14) + ((-t6872 * t7866 - t6873 * t7864 - t6874 * t7862) * t7426 + (t6872 * t7833 + t6873 * t7831 + t6874 * t7829 + (t7123 * t7900 + (t7131 * t7641 + t7167 * t7996) * t7093) * t8144 + (t7122 * t7902 + (t7129 * t7650 + t7165 * t7997) * t7092) * t8150 + (t7121 * t7904 + (t7127 * t7659 + t7163 * t7998) * t7091) * t8156) * t7383) * MDP(15) + (t7121 * t7860 + t7122 * t7858 + t7123 * t7856 + (-t7123 * t8208 + t7167 * t8041) * t7196 + (-t7122 * t8211 + t7165 * t8043) * t7193 + (t7121 * t8214 + t7163 * t8045) * t7190 + (t7127 * t7463 + t7129 * t7461 + t7131 * t7459) * t7426) * MDP(16) + (-t7121 * t7564 - t7122 * t7561 - t7123 * t7558 + (t7123 * t7691 + t7167 * t8042) * t7196 + (t7122 * t7692 + t7165 * t8044) * t7193 + (-t7121 * t7693 + t7163 * t8046) * t7190 + (t7127 * t7462 + t7129 * t7460 + t7131 * t7458) * t7426) * MDP(17); (t6890 * t8167 + t6891 * t8166 + t6892 * t8165) * MDP(1) + (-t7157 * t7563 - t7158 * t7560 - t7159 * t7557 + t7181 * t7453 + t7182 * t7451 + t7183 * t7449) * t8219 + (-t7118 * t7839 - t7119 * t7838 - t7120 * t7837 + t7181 * t7454 + t7182 * t7452 + t7183 * t7450) * t8218 + (t7181 * t7914 + t7182 * t7913 + t7183 * t7912 + (t7159 * t7471 + t7183 * t7685) * t7377 + (t7158 * t7473 + t7182 * t7687) * t7371 + (t7157 * t7475 + t7181 * t7689) * t7365) * t8217 + (t6863 * t7821 + t6865 * t7820 + t6867 * t7819 + (t7159 * t7470 - t7183 * t7686) * t7377 + (t7158 * t7472 - t7182 * t7688) * t7371 + (t7157 * t7474 - t7181 * t7690) * t7365) * t8216 + (t6864 * t7839 + t6866 * t7838 + t6868 * t7837 + (t6864 * t8167 + t6866 * t8166 + t6868 * t8165) * t7384) * MDP(8) + (t6824 * t8166 + t6827 * t8167 + t6828 * t8165 + (t6971 * t7736 + t7159 * t7485) * t7377 + (t6970 * t7739 + t7158 * t7487) * t7371 + (t6969 * t7742 + t7157 * t7489) * t7365) * MDP(9) + (t6825 * t8167 + t6826 * t8166 + t6829 * t8165 + (t6968 * t7736 + t7159 * t7486) * t7377 + (t6973 * t7739 + t7158 * t7488) * t7371 + (t6972 * t7742 + t7157 * t7490) * t7365) * MDP(10) + ((t6932 * t7836 + t6933 * t7835 + t6934 * t7834) * t8091 + (t7159 * t7583 + t7183 * t8035) * t7196 + (t7158 * t7584 + t7182 * t8036) * t7193 + (t7157 * t7586 + t7181 * t8037) * t7190) * MDP(11) + ((t6929 * t7836 + t6930 * t7835 + t6931 * t7834) * t8091 + (t7159 * t7745 + t7183 * t8040) * t7196 + (t7158 * t7746 + t7182 * t8038) * t7193 + (t7157 * t7747 + t7181 * t8039) * t7190) * MDP(12) + ((t7159 * t7582 + t7183 * t8029) * t7196 + (t7158 * t7581 + t7182 * t8030) * t7193 + (t7157 * t7585 + t7181 * t8031) * t7190 + ((t6851 * t7836 + t6852 * t7835 + t6853 * t7834) * t7383 + (t7004 * t7511 + t7005 * t7509 + t7006 * t7507) * t7357) * t7426) * MDP(13) + ((t7159 * t7727 + t7183 * t8032) * t7196 + (t7158 * t7728 + t7182 * t8033) * t7193 + (t7157 * t7729 + t7181 * t8034) * t7190 + ((t6848 * t7836 + t6849 * t7835 + t6850 * t7834) * t7383 + (-t7007 * t7511 - t7008 * t7509 - t7009 * t7507) * t7357) * t7426) * MDP(14) + ((t7154 * t7160 * t7175 * t7366 * t7899 + t7155 * t7161 * t7177 * t7372 * t7894 + t7156 * t7162 * t7179 * t7378 * t7889) * t7426 * t7357 + (t6872 * t7821 + t6873 * t7820 + t6874 * t7819 + (-t7162 * t6874 * t8168 + (t7042 * t7156 * t7159 + t7093 * t7183 * t8275) * t8144) * t7377 + (-t7161 * t6873 * t8170 + (t7040 * t7155 * t7158 + t7092 * t7182 * t8276) * t8150) * t7371 + (-t7160 * t6872 * t8172 + (t7038 * t7154 * t7157 + t7091 * t7181 * t8277) * t8156) * t7365) * t7383) * MDP(15) + (t7157 * t7860 + t7158 * t7858 + t7159 * t7856 + (-t7159 * t8208 + t7183 * t8041) * t7196 + (-t7158 * t8211 + t7182 * t8043) * t7193 + (t7157 * t8214 + t7181 * t8045) * t7190 + (t7160 * t7463 + t7161 * t7461 + t7162 * t7459) * t8091) * MDP(16) + (-t7157 * t7564 - t7158 * t7561 - t7159 * t7558 + (t7159 * t7691 + t7183 * t8042) * t7196 + (t7158 * t7692 + t7182 * t8044) * t7193 + (-t7157 * t7693 + t7181 * t8046) * t7190 + (t7160 * t7462 + t7161 * t7460 + t7162 * t7458) * t8091) * MDP(17);];
taucX  = t1;
