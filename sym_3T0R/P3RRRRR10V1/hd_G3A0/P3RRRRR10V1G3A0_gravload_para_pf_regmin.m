% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V1G3A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:16:11
% EndTime: 2020-08-06 23:16:19
% DurationCPUTime: 9.26s
% Computational Cost: add. (2889->520), mult. (8055->989), div. (171->10), fcn. (7224->26), ass. (0->376)
t4109 = cos(pkin(3));
t4098 = t4109 ^ 2;
t4350 = -t4098 + 0.1e1;
t4114 = sin(qJ(2,3));
t4086 = t4114 * pkin(6);
t4061 = t4086 + pkin(1);
t4117 = sin(qJ(2,2));
t4087 = t4117 * pkin(6);
t4065 = t4087 + pkin(1);
t4120 = sin(qJ(2,1));
t4088 = t4120 * pkin(6);
t4069 = t4088 + pkin(1);
t4115 = sin(qJ(1,3));
t4113 = sin(qJ(3,3));
t4058 = t4113 * pkin(5) + pkin(2);
t4122 = cos(qJ(3,3));
t4099 = t4122 ^ 2;
t4349 = pkin(2) * t4099;
t4190 = -t4058 + 0.2e1 * t4349;
t4360 = t4115 * t4190;
t4118 = sin(qJ(1,2));
t4116 = sin(qJ(3,2));
t4062 = t4116 * pkin(5) + pkin(2);
t4125 = cos(qJ(3,2));
t4102 = t4125 ^ 2;
t4348 = pkin(2) * t4102;
t4189 = -t4062 + 0.2e1 * t4348;
t4359 = t4118 * t4189;
t4121 = sin(qJ(1,1));
t4119 = sin(qJ(3,1));
t4066 = t4119 * pkin(5) + pkin(2);
t4128 = cos(qJ(3,1));
t4105 = t4128 ^ 2;
t4347 = pkin(2) * t4105;
t4188 = -t4066 + 0.2e1 * t4347;
t4358 = t4121 * t4188;
t4129 = cos(qJ(2,1));
t4256 = t4128 * t4129;
t4357 = -pkin(2) * t4256 - t4088;
t4126 = cos(qJ(2,2));
t4261 = t4125 * t4126;
t4356 = -pkin(2) * t4261 - t4087;
t4123 = cos(qJ(2,3));
t4267 = t4122 * t4123;
t4355 = -pkin(2) * t4267 - t4086;
t4112 = legFrame(1,2);
t4082 = sin(t4112);
t4085 = cos(t4112);
t4030 = t4085 * g(1) - t4082 * g(2);
t4130 = cos(qJ(1,1));
t4015 = -g(3) * t4121 + t4030 * t4130;
t4111 = legFrame(2,2);
t4081 = sin(t4111);
t4084 = cos(t4111);
t4029 = t4084 * g(1) - t4081 * g(2);
t4127 = cos(qJ(1,2));
t4013 = -g(3) * t4118 + t4029 * t4127;
t4110 = legFrame(3,2);
t4080 = sin(t4110);
t4083 = cos(t4110);
t4028 = t4083 * g(1) - t4080 * g(2);
t4124 = cos(qJ(1,3));
t4011 = -g(3) * t4115 + t4028 * t4124;
t4108 = sin(pkin(3));
t4342 = pkin(6) * t4108;
t4184 = (t4123 + 0.1e1) * (t4123 - 0.1e1) * t4342;
t4282 = t4115 * t4114;
t4234 = pkin(2) * t4282;
t4304 = t4108 * t4124;
t4354 = (-(pkin(1) * t4304 + t4115 * pkin(5)) * t4114 + t4124 * t4184) * t4113 - t4234;
t4183 = (t4126 + 0.1e1) * (t4126 - 0.1e1) * t4342;
t4277 = t4118 * t4117;
t4233 = pkin(2) * t4277;
t4302 = t4108 * t4127;
t4353 = (-(pkin(1) * t4302 + t4118 * pkin(5)) * t4117 + t4127 * t4183) * t4116 - t4233;
t4182 = (t4129 + 0.1e1) * (t4129 - 0.1e1) * t4342;
t4271 = t4121 * t4120;
t4232 = pkin(2) * t4271;
t4300 = t4108 * t4130;
t4352 = (-(pkin(1) * t4300 + t4121 * pkin(5)) * t4120 + t4130 * t4182) * t4119 - t4232;
t4351 = pkin(1) * pkin(2);
t4346 = pkin(2) * t4108;
t4345 = pkin(2) * t4122;
t4344 = pkin(2) * t4125;
t4343 = pkin(2) * t4128;
t4341 = g(1) * t4108;
t4337 = t4108 * g(2);
t4336 = t4113 * pkin(2);
t4335 = t4116 * pkin(2);
t4334 = t4119 * pkin(2);
t4025 = t4080 * g(1) + t4083 * g(2);
t4100 = 0.1e1 / t4122;
t4264 = t4124 * t4123;
t4265 = t4124 * t4114;
t4281 = t4115 * t4123;
t4305 = t4108 * t4123;
t4333 = (t4028 * (t4109 * t4281 + t4265) + g(3) * (t4109 * t4264 - t4282) - t4025 * t4305) * t4100;
t4016 = t4109 * t4282 - t4264;
t4019 = -t4109 * t4265 - t4281;
t4308 = t4108 * t4114;
t4332 = (g(3) * t4019 - t4028 * t4016 + t4025 * t4308) * t4100;
t4026 = t4081 * g(1) + t4084 * g(2);
t4103 = 0.1e1 / t4125;
t4258 = t4127 * t4126;
t4259 = t4127 * t4117;
t4276 = t4118 * t4126;
t4303 = t4108 * t4126;
t4331 = (t4029 * (t4109 * t4276 + t4259) + g(3) * (t4109 * t4258 - t4277) - t4026 * t4303) * t4103;
t4017 = t4109 * t4277 - t4258;
t4020 = -t4109 * t4259 - t4276;
t4307 = t4108 * t4117;
t4330 = (g(3) * t4020 - t4029 * t4017 + t4026 * t4307) * t4103;
t4027 = t4082 * g(1) + t4085 * g(2);
t4106 = 0.1e1 / t4128;
t4253 = t4130 * t4129;
t4254 = t4130 * t4120;
t4270 = t4121 * t4129;
t4301 = t4108 * t4129;
t4329 = (t4030 * (t4109 * t4270 + t4254) + g(3) * (t4109 * t4253 - t4271) - t4027 * t4301) * t4106;
t4018 = t4109 * t4271 - t4253;
t4021 = -t4109 * t4254 - t4270;
t4306 = t4108 * t4120;
t4328 = (g(3) * t4021 - t4030 * t4018 + t4027 * t4306) * t4106;
t4073 = pkin(1) * t4109 * pkin(6);
t4074 = pkin(1) * t4336;
t4268 = t4122 * t4109;
t4195 = t4114 * t4268;
t4252 = pkin(5) * t4346;
t4327 = 0.1e1 / ((-t4122 * t4252 + t4073) * t4123 - t4195 * t4351 + t4108 * (-pkin(5) * t4086 + t4074)) * t4100;
t4075 = pkin(1) * t4335;
t4262 = t4125 * t4109;
t4193 = t4117 * t4262;
t4326 = 0.1e1 / ((-t4125 * t4252 + t4073) * t4126 - t4193 * t4351 + t4108 * (-pkin(5) * t4087 + t4075)) * t4103;
t4076 = pkin(1) * t4334;
t4272 = t4120 * t4128;
t4192 = t4109 * t4272;
t4325 = 0.1e1 / ((-t4128 * t4252 + t4073) * t4129 - t4192 * t4351 + t4108 * (-pkin(5) * t4088 + t4076)) * t4106;
t4034 = t4123 * pkin(6) - t4114 * t4345;
t4315 = t4034 * t4109;
t3989 = 0.1e1 / (pkin(1) * t4315 + (t4355 * pkin(5) + t4074) * t4108);
t4010 = g(3) * t4124 + t4028 * t4115;
t4324 = t3989 * t4010;
t4323 = t3989 * t4011;
t4035 = t4126 * pkin(6) - t4117 * t4344;
t4314 = t4035 * t4109;
t3990 = 0.1e1 / (pkin(1) * t4314 + (t4356 * pkin(5) + t4075) * t4108);
t4012 = g(3) * t4127 + t4029 * t4118;
t4322 = t3990 * t4012;
t4321 = t3990 * t4013;
t4036 = -pkin(2) * t4272 + t4129 * pkin(6);
t4313 = t4036 * t4109;
t3991 = 0.1e1 / (pkin(1) * t4313 + (t4357 * pkin(5) + t4076) * t4108);
t4014 = g(3) * t4130 + t4030 * t4121;
t4320 = t3991 * t4014;
t4319 = t3991 * t4015;
t4132 = pkin(2) ^ 2;
t4312 = t4099 * t4132;
t4311 = t4102 * t4132;
t4310 = t4105 * t4132;
t4309 = t4108 * t4109;
t4133 = 0.1e1 / pkin(2);
t4299 = t4108 * t4133;
t4298 = t4109 * t4113;
t4297 = t4109 * t4114;
t4296 = t4109 * t4115;
t4295 = t4109 * t4116;
t4294 = t4109 * t4117;
t4293 = t4109 * t4118;
t4292 = t4109 * t4119;
t4291 = t4109 * t4120;
t4290 = t4109 * t4121;
t4289 = t4109 * t4124;
t4288 = t4109 * t4127;
t4287 = t4109 * t4128;
t4286 = t4109 * t4130;
t4285 = t4113 * t4108;
t4284 = t4113 * t4114;
t4283 = t4113 * t4115;
t4280 = t4116 * t4108;
t4279 = t4116 * t4117;
t4278 = t4116 * t4118;
t4275 = t4119 * t4108;
t4274 = t4119 * t4120;
t4273 = t4119 * t4121;
t4269 = t4122 * t4108;
t4266 = t4123 * t4113;
t4263 = t4125 * t4108;
t4260 = t4126 * t4116;
t4257 = t4128 * t4108;
t4255 = t4129 * t4119;
t4251 = pkin(6) * t4345;
t4250 = pkin(6) * t4344;
t4249 = pkin(6) * t4343;
t4248 = pkin(2) * t4298;
t4247 = pkin(2) * t4295;
t4246 = pkin(2) * t4292;
t4245 = pkin(2) * t4283;
t4244 = pkin(2) * t4278;
t4243 = pkin(2) * t4273;
t4242 = pkin(6) * t4305;
t4241 = pkin(6) * t4303;
t4240 = pkin(6) * t4301;
t4239 = pkin(6) * t4266;
t4238 = pkin(6) * t4281;
t4237 = pkin(6) * t4276;
t4236 = pkin(6) * t4255;
t4235 = pkin(6) * t4270;
t4228 = -0.2e1 * t4251;
t4227 = -0.2e1 * t4250;
t4226 = -0.2e1 * t4249;
t4225 = t4350 * pkin(6);
t4139 = t4019 * t4122 + t4124 * t4285;
t4221 = (t4028 * ((-t4195 + t4285) * t4115 + t4122 * t4264) + g(3) * t4139 + t4025 * (t4114 * t4269 + t4298)) * t4327;
t4138 = t4020 * t4125 + t4127 * t4280;
t4220 = (t4029 * ((-t4193 + t4280) * t4118 + t4125 * t4258) + g(3) * t4138 + t4026 * (t4117 * t4263 + t4295)) * t4326;
t4141 = t4017 * t4116 + t4118 * t4263;
t4219 = (-t4029 * t4141 - ((t4109 * t4279 + t4263) * t4127 + t4118 * t4260) * g(3) - t4026 * (-t4108 * t4279 + t4262)) * t4326;
t4137 = t4021 * t4128 + t4130 * t4275;
t4218 = (t4030 * ((-t4192 + t4275) * t4121 + t4128 * t4253) + g(3) * t4137 + t4027 * (t4120 * t4257 + t4292)) * t4325;
t4140 = t4018 * t4119 + t4121 * t4257;
t4217 = (-t4030 * t4140 - ((t4109 * t4274 + t4257) * t4130 + t4121 * t4255) * g(3) - t4027 * (-t4108 * t4274 + t4287)) * t4325;
t4142 = t4016 * t4113 + t4115 * t4269;
t4216 = (-t4142 * t4028 - ((t4109 * t4284 + t4269) * t4124 + t4115 * t4266) * g(3) - t4025 * (-t4108 * t4284 + t4268)) * t4327;
t3968 = ((g(1) * t4296 - t4337) * t4083 + (-g(2) * t4296 - t4341) * t4080 + g(3) * t4289) * t4123 + t4114 * t4011;
t4215 = t3968 * t4100 * t4113;
t3969 = ((g(1) * t4293 - t4337) * t4084 + (-g(2) * t4293 - t4341) * t4081 + g(3) * t4288) * t4126 + t4117 * t4013;
t4214 = t3969 * t4103 * t4116;
t3970 = ((g(1) * t4290 - t4337) * t4085 + (-g(2) * t4290 - t4341) * t4082 + g(3) * t4286) * t4129 + t4120 * t4015;
t4213 = t3970 * t4106 * t4119;
t4059 = pkin(5) + t4336;
t4212 = t4059 * t4309;
t4063 = pkin(5) + t4335;
t4211 = t4063 * t4309;
t4067 = pkin(5) + t4334;
t4210 = t4067 * t4309;
t4209 = t4081 * t4260;
t4208 = t4084 * t4260;
t4207 = t4114 * t4312;
t4206 = t4117 * t4311;
t4205 = t4120 * t4310;
t4204 = t4108 * t4296;
t4203 = t4108 * t4293;
t4202 = t4108 * t4290;
t4201 = t4114 * t4266;
t4200 = t4108 * t4283;
t4199 = t4117 * t4260;
t4198 = t4108 * t4278;
t4197 = t4120 * t4255;
t4196 = t4108 * t4273;
t4194 = t4061 * t4266;
t4191 = t4069 * t4255;
t4131 = pkin(6) ^ 2;
t4187 = -t4131 + t4312;
t4186 = -t4131 + t4311;
t4185 = -t4131 + t4310;
t4181 = t4099 * t4234;
t4180 = t4102 * t4233;
t4179 = t4105 * t4232;
t4178 = t4080 * t4238;
t4177 = t4083 * t4238;
t4176 = t4081 * t4237;
t4175 = t4084 * t4237;
t4174 = t4082 * t4235;
t4173 = t4085 * t4235;
t4101 = t4123 ^ 2;
t4043 = (t4101 - 0.2e1) * t4336 - pkin(5);
t4104 = t4126 ^ 2;
t4044 = (t4104 - 0.2e1) * t4335 - pkin(5);
t4107 = t4129 ^ 2;
t4045 = (t4107 - 0.2e1) * t4334 - pkin(5);
t4172 = t4350 * t4115 * t4059;
t4171 = t4350 * t4118 * t4063;
t4170 = t4350 * t4121 * t4067;
t4169 = t4080 * t4212;
t4168 = t4081 * t4211;
t4167 = t4082 * t4210;
t4166 = t4083 * t4212;
t4165 = t4084 * t4211;
t4164 = t4085 * t4210;
t4163 = t4080 * t4204;
t4162 = t4083 * t4204;
t4161 = t4081 * t4203;
t4160 = t4084 * t4203;
t4159 = t4082 * t4202;
t4158 = t4085 * t4202;
t4157 = t4201 * t4346;
t4156 = t4199 * t4346;
t4155 = t4197 * t4346;
t4154 = pkin(6) * t4163;
t4153 = pkin(6) * t4162;
t4152 = pkin(6) * t4161;
t4151 = pkin(6) * t4160;
t4150 = pkin(6) * t4159;
t4149 = pkin(6) * t4158;
t4148 = t4124 * t4187;
t4147 = t4186 * t4127;
t4146 = t4185 * t4130;
t4145 = t4124 * t4157;
t4144 = t4127 * t4156;
t4143 = t4130 * t4155;
t4091 = pkin(1) * t4120;
t4090 = pkin(1) * t4117;
t4089 = pkin(1) * t4114;
t4072 = t4091 + pkin(6);
t4071 = t4090 + pkin(6);
t4070 = t4089 + pkin(6);
t4068 = 0.2e1 * t4088 + pkin(1);
t4064 = 0.2e1 * t4087 + pkin(1);
t4060 = 0.2e1 * t4086 + pkin(1);
t4048 = t4091 + t4225;
t4047 = t4090 + t4225;
t4046 = t4089 + t4225;
t4042 = -pkin(5) + (t4107 - 0.1e1) * t4334;
t4041 = -pkin(5) + (t4104 - 0.1e1) * t4335;
t4040 = -pkin(5) + (t4101 - 0.1e1) * t4336;
t4024 = -t4098 * t4088 + t4069;
t4023 = -t4098 * t4087 + t4065;
t4022 = -t4098 * t4086 + t4061;
t4009 = t4098 * t4082 - t4082 + t4158;
t4008 = -t4098 * t4085 + t4085 + t4159;
t4007 = t4098 * t4081 - t4081 + t4160;
t4006 = -t4098 * t4084 + t4084 + t4161;
t4005 = t4098 * t4080 - t4080 + t4162;
t4004 = -t4098 * t4083 + t4083 + t4163;
t4003 = t4045 * t4121 * t4108 - t4069 * t4130;
t4002 = t4044 * t4118 * t4108 - t4065 * t4127;
t4001 = t4043 * t4115 * t4108 - t4061 * t4124;
t4000 = t4036 * t4290 - t4130 * t4357;
t3999 = t4035 * t4293 - t4127 * t4356;
t3998 = t4034 * t4296 - t4124 * t4355;
t3997 = t4068 * t4300 + t4170;
t3996 = t4064 * t4302 + t4171;
t3995 = t4060 * t4304 + t4172;
t3994 = t4072 * t4300 + t4120 * t4170;
t3993 = t4071 * t4302 + t4117 * t4171;
t3992 = t4070 * t4304 + t4114 * t4172;
t3988 = -t4121 * t4357 + (-pkin(2) * t4275 - t4313) * t4130;
t3987 = -t4118 * t4356 + (-pkin(2) * t4280 - t4314) * t4127;
t3986 = -t4115 * t4355 + (-pkin(2) * t4285 - t4315) * t4124;
t3982 = t4015 * t4129 * t4109 - t4120 * t4014;
t3981 = t4129 * t4014 + t4015 * t4291;
t3980 = t4013 * t4126 * t4109 - t4012 * t4117;
t3979 = t4012 * t4126 + t4013 * t4294;
t3978 = t4011 * t4123 * t4109 - t4010 * t4114;
t3977 = t4010 * t4123 + t4011 * t4297;
t3967 = -t4139 * t4028 + g(3) * (-t4016 * t4122 + t4200);
t3966 = -t4030 * t4137 + g(3) * (-t4018 * t4128 + t4196);
t3965 = -t4030 * (-t4021 * t4119 + t4130 * t4257) + g(3) * t4140;
t3964 = -t4029 * t4138 + g(3) * (-t4017 * t4125 + t4198);
t3963 = -t4029 * (-t4020 * t4116 + t4127 * t4263) + g(3) * t4141;
t3962 = -t4028 * (-t4019 * t4113 + t4124 * t4269) + g(3) * t4142;
t3961 = (t4082 * t4036 - t4085 * t4243) * t4108 - t4000 * t4085 - t4082 * t4246;
t3960 = (t4085 * t4036 + t4082 * t4243) * t4108 + t4000 * t4082 - t4085 * t4246;
t3959 = (t4081 * t4035 - t4084 * t4244) * t4108 - t3999 * t4084 - t4081 * t4247;
t3958 = (t4084 * t4035 + t4081 * t4244) * t4108 + t3999 * t4081 - t4084 * t4247;
t3957 = (t4080 * t4034 - t4083 * t4245) * t4108 - t3998 * t4083 - t4080 * t4248;
t3956 = (t4083 * t4034 + t4080 * t4245) * t4108 + t3998 * t4080 - t4083 * t4248;
t3949 = (t4185 * t4121 + t4226 * t4286) * t4107 + ((-t4067 * t4300 + t4121 * t4068) * t4343 + t4146 * t4291) * t4129 + pkin(6) * (t4121 * t4072 + (pkin(2) * t4287 - t4067 * t4306) * t4130);
t3948 = (t4186 * t4118 + t4227 * t4288) * t4104 + ((-t4063 * t4302 + t4118 * t4064) * t4344 + t4147 * t4294) * t4126 + pkin(6) * (t4118 * t4071 + (pkin(2) * t4262 - t4063 * t4307) * t4127);
t3947 = (t4187 * t4115 + t4228 * t4289) * t4101 + ((-t4059 * t4304 + t4115 * t4060) * t4345 + t4148 * t4297) * t4123 + pkin(6) * (t4115 * t4070 + (pkin(2) * t4268 - t4059 * t4308) * t4124);
t3946 = t4130 * (pkin(6) * t4256 - t4188 * t4120) * t4098 + ((-pkin(6) * t4197 - t4045 * t4128) * t4300 + (-t4069 * t4128 - t4129 * t4347) * t4121) * t4109 + t4254 * t4347 + t4128 * t4121 * t4155 + (pkin(1) * t4196 - t4130 * t4066) * t4120 - t4182 * t4273;
t3945 = t4127 * (pkin(6) * t4261 - t4189 * t4117) * t4098 + ((-pkin(6) * t4199 - t4044 * t4125) * t4302 + (-t4065 * t4125 - t4126 * t4348) * t4118) * t4109 + t4259 * t4348 + t4125 * t4118 * t4156 + (pkin(1) * t4198 - t4127 * t4062) * t4117 - t4183 * t4278;
t3944 = t4124 * (pkin(6) * t4267 - t4190 * t4114) * t4098 + ((-pkin(6) * t4201 - t4043 * t4122) * t4304 + (-t4061 * t4122 - t4123 * t4349) * t4115) * t4109 + t4265 * t4349 + t4122 * t4115 * t4157 + (pkin(1) * t4200 - t4124 * t4058) * t4114 - t4184 * t4283;
t3943 = (-t4185 * t4085 * t4300 + t4009 * t4226) * t4107 + (t4009 * t4205 - (t3997 * t4085 + t4167) * t4343 + pkin(6) * (t4082 * t4024 - t4120 * t4149)) * t4129 - (t4082 * t4048 - t4149) * t4343 - (t3994 * t4085 + t4120 * t4167) * pkin(6);
t3942 = (t4108 * t4082 * t4146 + 0.2e1 * t4008 * t4249) * t4107 + (-t4008 * t4205 + (t3997 * t4082 - t4164) * t4343 + (t4085 * t4024 + t4120 * t4150) * pkin(6)) * t4129 - (t4085 * t4048 + t4150) * t4343 + pkin(6) * (t3994 * t4082 - t4120 * t4164);
t3941 = (-t4186 * t4084 * t4302 + t4007 * t4227) * t4104 + (t4007 * t4206 - (t3996 * t4084 + t4168) * t4344 + pkin(6) * (t4081 * t4023 - t4117 * t4151)) * t4126 - (t4081 * t4047 - t4151) * t4344 - (t3993 * t4084 + t4117 * t4168) * pkin(6);
t3940 = (t4108 * t4081 * t4147 + 0.2e1 * t4006 * t4250) * t4104 + (-t4006 * t4206 + (t3996 * t4081 - t4165) * t4344 + (t4084 * t4023 + t4117 * t4152) * pkin(6)) * t4126 - (t4084 * t4047 + t4152) * t4344 + pkin(6) * (t3993 * t4081 - t4117 * t4165);
t3939 = (-t4187 * t4083 * t4304 + t4005 * t4228) * t4101 + (t4005 * t4207 - (t3995 * t4083 + t4169) * t4345 + pkin(6) * (t4080 * t4022 - t4114 * t4153)) * t4123 - (t4080 * t4046 - t4153) * t4345 - (t3992 * t4083 + t4114 * t4169) * pkin(6);
t3938 = (t4108 * t4080 * t4148 + 0.2e1 * t4004 * t4251) * t4101 + (-t4004 * t4207 + (t3995 * t4080 - t4166) * t4345 + (t4083 * t4022 + t4114 * t4154) * pkin(6)) * t4123 - (t4083 * t4046 + t4154) * t4345 + pkin(6) * (t3992 * t4080 - t4114 * t4166);
t3937 = ((-t4045 * t4082 + t4173) * t4128 + (-t4082 * t4236 - t4085 * t4358) * t4120) * t4098 + ((0.2e1 * t4082 * t4306 + t4085 * t4253) * t4347 + (-t4003 * t4085 - t4082 * t4240) * t4128 - (t4082 * t4066 + t4119 * t4173) * t4306) * t4109 + t4085 * t4179 + (t4082 * t4042 - t4085 * t4143) * t4128 + t4352 * t4085 + t4082 * t4191;
t3936 = ((-t4044 * t4081 + t4175) * t4125 + (-pkin(6) * t4209 - t4084 * t4359) * t4117) * t4098 + ((0.2e1 * t4081 * t4307 + t4084 * t4258) * t4348 + (-t4002 * t4084 - t4081 * t4241) * t4125 - (t4081 * t4062 + t4116 * t4175) * t4307) * t4109 + t4084 * t4180 + (t4081 * t4041 - t4084 * t4144) * t4125 + t4353 * t4084 + t4065 * t4209;
t3935 = ((-t4043 * t4080 + t4177) * t4122 + (-t4080 * t4239 - t4083 * t4360) * t4114) * t4098 + ((0.2e1 * t4080 * t4308 + t4083 * t4264) * t4349 + (-t4001 * t4083 - t4080 * t4242) * t4122 - (t4080 * t4058 + t4113 * t4177) * t4308) * t4109 + t4083 * t4181 + (t4080 * t4040 - t4083 * t4145) * t4122 + t4354 * t4083 + t4080 * t4194;
t3934 = ((-t4045 * t4085 - t4174) * t4128 + (t4082 * t4358 - t4085 * t4236) * t4120) * t4098 + (-(t4082 * t4253 - 0.2e1 * t4085 * t4306) * t4347 + (t4003 * t4082 - t4085 * t4240) * t4128 + (-t4085 * t4066 + t4119 * t4174) * t4306) * t4109 - t4082 * t4179 + (t4085 * t4042 + t4082 * t4143) * t4128 - t4352 * t4082 + t4085 * t4191;
t3933 = ((-t4044 * t4084 - t4176) * t4125 + (-pkin(6) * t4208 + t4081 * t4359) * t4117) * t4098 + (-(t4081 * t4258 - 0.2e1 * t4084 * t4307) * t4348 + (t4002 * t4081 - t4084 * t4241) * t4125 + (-t4084 * t4062 + t4116 * t4176) * t4307) * t4109 - t4081 * t4180 + (t4084 * t4041 + t4081 * t4144) * t4125 - t4353 * t4081 + t4065 * t4208;
t3932 = ((-t4043 * t4083 - t4178) * t4122 + (t4080 * t4360 - t4083 * t4239) * t4114) * t4098 + (-(t4080 * t4264 - 0.2e1 * t4083 * t4308) * t4349 + (t4001 * t4080 - t4083 * t4242) * t4122 + (-t4083 * t4058 + t4113 * t4178) * t4308) * t4109 - t4080 * t4181 + (t4083 * t4040 + t4080 * t4145) * t4122 - t4354 * t4080 + t4083 * t4194;
t1 = [0, t3957 * t4324 + t3959 * t4322 + t3961 * t4320, t3957 * t4323 + t3959 * t4321 + t3961 * t4319, 0, 0, 0, 0, 0, (t3937 * t4329 + t3961 * t3981) * t3991 + (t3936 * t4331 + t3959 * t3979) * t3990 + (t3935 * t4333 + t3957 * t3977) * t3989, (t3937 * t4328 + t3961 * t3982) * t3991 + (t3936 * t4330 + t3959 * t3980) * t3990 + (t3935 * t4332 + t3957 * t3978) * t3989, 0, 0, 0, 0, 0, (t3937 * t3970 + t3961 * t3966) * t3991 + (t3936 * t3969 + t3959 * t3964) * t3990 + (t3935 * t3968 + t3957 * t3967) * t3989 + (t3939 * t4216 + t3941 * t4219 + t3943 * t4217) * t4133, (-t3937 * t4213 + t3961 * t3965) * t3991 + (-t3936 * t4214 + t3959 * t3963) * t3990 + (-t3935 * t4215 + t3957 * t3962) * t3989 + (t3939 * t4221 + t3941 * t4220 + t3943 * t4218) * t4133, -g(1); 0, t3956 * t4324 + t3958 * t4322 + t3960 * t4320, t3956 * t4323 + t3958 * t4321 + t3960 * t4319, 0, 0, 0, 0, 0, (t3934 * t4329 + t3960 * t3981) * t3991 + (t3933 * t4331 + t3958 * t3979) * t3990 + (t3932 * t4333 + t3956 * t3977) * t3989, (t3934 * t4328 + t3960 * t3982) * t3991 + (t3933 * t4330 + t3958 * t3980) * t3990 + (t3932 * t4332 + t3956 * t3978) * t3989, 0, 0, 0, 0, 0, (t3934 * t3970 + t3960 * t3966) * t3991 + (t3933 * t3969 + t3958 * t3964) * t3990 + (t3932 * t3968 + t3956 * t3967) * t3989 + (t3938 * t4216 + t3940 * t4219 + t3942 * t4217) * t4133, (-t3934 * t4213 + t3960 * t3965) * t3991 + (-t3933 * t4214 + t3958 * t3963) * t3990 + (-t3932 * t4215 + t3956 * t3962) * t3989 + (t3938 * t4221 + t3940 * t4220 + t3942 * t4218) * t4133, -g(2); 0, t3986 * t4324 + t3987 * t4322 + t3988 * t4320, t3986 * t4323 + t3987 * t4321 + t3988 * t4319, 0, 0, 0, 0, 0, (t3946 * t4329 + t3981 * t3988) * t3991 + (t3945 * t4331 + t3979 * t3987) * t3990 + (t3944 * t4333 + t3977 * t3986) * t3989, (t3946 * t4328 + t3982 * t3988) * t3991 + (t3945 * t4330 + t3980 * t3987) * t3990 + (t3944 * t4332 + t3978 * t3986) * t3989, 0, 0, 0, 0, 0, (t3946 * t3970 + t3966 * t3988) * t3991 + (t3945 * t3969 + t3964 * t3987) * t3990 + (t3944 * t3968 + t3967 * t3986) * t3989 + (t3947 * t4216 + t3948 * t4219 + t3949 * t4217) * t4299, (-t3946 * t4213 + t3988 * t3965) * t3991 + (-t3945 * t4214 + t3987 * t3963) * t3990 + (-t3944 * t4215 + t3986 * t3962) * t3989 + (t3947 * t4221 + t3948 * t4220 + t3949 * t4218) * t4299, -g(3);];
tau_reg  = t1;
