% Calculate Gravitation load for parallel robot
% P3RRRRR10V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [3x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-06 23:28
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V1G3A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 22:59:41
% EndTime: 2020-08-06 22:59:49
% DurationCPUTime: 8.75s
% Computational Cost: add. (1518->429), mult. (3810->814), div. (54->10), fcn. (2652->26), ass. (0->294)
t3196 = legFrame(3,2);
t3164 = sin(t3196);
t3167 = cos(t3196);
t3115 = g(1) * t3167 - g(2) * t3164;
t3201 = sin(qJ(1,3));
t3210 = cos(qJ(1,3));
t3097 = -g(3) * t3201 + t3115 * t3210;
t3200 = sin(qJ(2,3));
t3209 = cos(qJ(2,3));
t3100 = g(3) * t3210 + t3115 * t3201;
t3112 = g(1) * t3164 + g(2) * t3167;
t3194 = sin(pkin(3));
t3195 = cos(pkin(3));
t3412 = -t3100 * t3195 + t3112 * t3194;
t3223 = t3209 * t3097 + t3200 * t3412;
t3197 = legFrame(2,2);
t3165 = sin(t3197);
t3168 = cos(t3197);
t3116 = g(1) * t3168 - g(2) * t3165;
t3204 = sin(qJ(1,2));
t3213 = cos(qJ(1,2));
t3098 = -g(3) * t3204 + t3116 * t3213;
t3203 = sin(qJ(2,2));
t3212 = cos(qJ(2,2));
t3101 = g(3) * t3213 + t3116 * t3204;
t3113 = g(1) * t3165 + g(2) * t3168;
t3413 = -t3101 * t3195 + t3113 * t3194;
t3222 = t3212 * t3098 + t3203 * t3413;
t3198 = legFrame(1,2);
t3166 = sin(t3198);
t3169 = cos(t3198);
t3117 = g(1) * t3169 - g(2) * t3166;
t3207 = sin(qJ(1,1));
t3216 = cos(qJ(1,1));
t3099 = -g(3) * t3207 + t3117 * t3216;
t3206 = sin(qJ(2,1));
t3215 = cos(qJ(2,1));
t3102 = g(3) * t3216 + t3117 * t3207;
t3114 = g(1) * t3166 + g(2) * t3169;
t3414 = -t3102 * t3195 + t3114 * t3194;
t3221 = t3215 * t3099 + t3206 * t3414;
t3302 = m(1) * rSges(1,1) + (m(2) + m(3)) * pkin(1);
t3183 = t3195 ^ 2;
t3400 = -t3183 + 0.1e1;
t3170 = t3200 * pkin(6);
t3142 = t3170 + pkin(1);
t3171 = t3203 * pkin(6);
t3146 = t3171 + pkin(1);
t3172 = t3206 * pkin(6);
t3150 = t3172 + pkin(1);
t3199 = sin(qJ(3,3));
t3139 = pkin(5) * t3199 + pkin(2);
t3208 = cos(qJ(3,3));
t3185 = t3208 ^ 2;
t3396 = pkin(2) * t3185;
t3277 = -t3139 + 0.2e1 * t3396;
t3420 = t3201 * t3277;
t3202 = sin(qJ(3,2));
t3143 = pkin(5) * t3202 + pkin(2);
t3211 = cos(qJ(3,2));
t3188 = t3211 ^ 2;
t3395 = pkin(2) * t3188;
t3276 = -t3143 + 0.2e1 * t3395;
t3419 = t3204 * t3276;
t3205 = sin(qJ(3,1));
t3147 = pkin(5) * t3205 + pkin(2);
t3214 = cos(qJ(3,1));
t3191 = t3214 ^ 2;
t3394 = pkin(2) * t3191;
t3275 = -t3147 + 0.2e1 * t3394;
t3418 = t3207 * t3275;
t3339 = t3214 * t3215;
t3417 = -pkin(2) * t3339 - t3172;
t3342 = t3211 * t3212;
t3416 = -pkin(2) * t3342 - t3171;
t3345 = t3208 * t3209;
t3415 = -pkin(2) * t3345 - t3170;
t3411 = t3100 * t3194 + t3112 * t3195;
t3410 = t3101 * t3194 + t3113 * t3195;
t3409 = t3102 * t3194 + t3114 * t3195;
t3386 = pkin(6) * t3194;
t3271 = (t3209 + 0.1e1) * (t3209 - 0.1e1) * t3386;
t3382 = t3200 * pkin(2);
t3309 = t3201 * t3382;
t3357 = t3194 * t3210;
t3408 = (-(pkin(1) * t3357 + pkin(5) * t3201) * t3200 + t3210 * t3271) * t3199 - t3309;
t3270 = (t3212 + 0.1e1) * (t3212 - 0.1e1) * t3386;
t3381 = t3203 * pkin(2);
t3308 = t3204 * t3381;
t3356 = t3194 * t3213;
t3407 = (-(pkin(1) * t3356 + pkin(5) * t3204) * t3203 + t3213 * t3270) * t3202 - t3308;
t3269 = (t3215 + 0.1e1) * (t3215 - 0.1e1) * t3386;
t3380 = t3206 * pkin(2);
t3307 = t3207 * t3380;
t3355 = t3194 * t3216;
t3406 = (-(pkin(1) * t3355 + pkin(5) * t3207) * t3206 + t3216 * t3269) * t3205 - t3307;
t3404 = m(1) * rSges(1,2);
t3403 = m(2) * rSges(2,1);
t3402 = m(3) * rSges(3,1);
t3401 = m(3) * rSges(3,2);
t3399 = m(3) / pkin(2);
t3398 = pkin(1) * t3194;
t3397 = pkin(1) * t3195;
t3393 = pkin(2) * t3194;
t3392 = pkin(2) * t3199;
t3391 = pkin(2) * t3202;
t3390 = pkin(2) * t3205;
t3389 = pkin(2) * t3208;
t3388 = pkin(2) * t3211;
t3387 = pkin(2) * t3214;
t3385 = pkin(6) * t3209;
t3384 = pkin(6) * t3212;
t3383 = pkin(6) * t3215;
t3158 = pkin(1) * t3392;
t3326 = t3208 * t3382;
t3121 = -t3326 + t3385;
t3367 = t3121 * t3195;
t3073 = 0.1e1 / (pkin(1) * t3367 + (pkin(5) * t3415 + t3158) * t3194);
t3106 = -t3199 * t3401 + t3208 * t3402 + t3403;
t3137 = m(2) * rSges(2,2) - rSges(3,3) * m(3);
t3335 = m(2) * (rSges(2,3) + pkin(5)) + pkin(5) * m(3);
t3229 = (t3106 * t3200 + t3137 * t3209) * t3195 - ((rSges(3,1) * t3199 + rSges(3,2) * t3208) * m(3) + t3335) * t3194 + t3404;
t3235 = t3106 * t3209 - t3137 * t3200;
t3336 = t3302 * g(3);
t3379 = (t3336 * t3210 + (-t3201 * t3229 + t3210 * t3235) * g(3) + (t3229 * t3210 + t3201 * (t3235 + t3302)) * t3115) * t3073;
t3159 = pkin(1) * t3391;
t3324 = t3211 * t3381;
t3122 = -t3324 + t3384;
t3366 = t3122 * t3195;
t3074 = 0.1e1 / (pkin(1) * t3366 + (pkin(5) * t3416 + t3159) * t3194);
t3107 = -t3202 * t3401 + t3211 * t3402 + t3403;
t3228 = (t3107 * t3203 + t3137 * t3212) * t3195 - ((rSges(3,1) * t3202 + rSges(3,2) * t3211) * m(3) + t3335) * t3194 + t3404;
t3234 = t3107 * t3212 - t3137 * t3203;
t3378 = (t3336 * t3213 + (-t3204 * t3228 + t3213 * t3234) * g(3) + (t3228 * t3213 + t3204 * (t3234 + t3302)) * t3116) * t3074;
t3160 = pkin(1) * t3390;
t3322 = t3214 * t3380;
t3123 = -t3322 + t3383;
t3365 = t3123 * t3195;
t3075 = 0.1e1 / (pkin(1) * t3365 + (pkin(5) * t3417 + t3160) * t3194);
t3108 = -t3205 * t3401 + t3214 * t3402 + t3403;
t3227 = (t3108 * t3206 + t3137 * t3215) * t3195 - ((rSges(3,1) * t3205 + rSges(3,2) * t3214) * m(3) + t3335) * t3194 + t3404;
t3233 = t3108 * t3215 - t3137 * t3206;
t3377 = (t3336 * t3216 + (-t3207 * t3227 + t3216 * t3233) * g(3) + (t3227 * t3216 + t3207 * (t3233 + t3302)) * t3117) * t3075;
t3219 = pkin(2) ^ 2;
t3364 = t3185 * t3219;
t3363 = t3188 * t3219;
t3362 = t3191 * t3219;
t3361 = t3194 * t3195;
t3360 = t3194 * t3200;
t3359 = t3194 * t3203;
t3358 = t3194 * t3206;
t3354 = t3195 * t3201;
t3353 = t3195 * t3204;
t3352 = t3195 * t3207;
t3351 = t3199 * t3201;
t3350 = t3199 * t3209;
t3349 = t3202 * t3204;
t3348 = t3202 * t3212;
t3347 = t3205 * t3207;
t3346 = t3205 * t3215;
t3343 = t3209 * t3210;
t3340 = t3212 * t3213;
t3337 = t3215 * t3216;
t3334 = pkin(5) * t3393;
t3333 = pkin(6) * t3389;
t3332 = pkin(6) * t3388;
t3331 = pkin(6) * t3387;
t3330 = t3195 * t3392;
t3329 = t3195 * t3391;
t3328 = t3195 * t3390;
t3327 = pkin(2) * t3351;
t3325 = pkin(2) * t3349;
t3323 = pkin(2) * t3347;
t3318 = t3194 * t3385;
t3317 = t3194 * t3384;
t3316 = t3194 * t3383;
t3315 = pkin(6) * t3350;
t3314 = t3201 * t3385;
t3313 = pkin(6) * t3348;
t3312 = t3204 * t3384;
t3311 = pkin(6) * t3346;
t3310 = t3207 * t3383;
t3306 = -0.2e1 * t3333;
t3305 = -0.2e1 * t3332;
t3304 = -0.2e1 * t3331;
t3303 = t3400 * pkin(6);
t3186 = 0.1e1 / t3208;
t3298 = (t3223 * t3137 + (t3097 * t3200 - t3209 * t3412) * t3106) * t3073 * t3186;
t3189 = 0.1e1 / t3211;
t3297 = (t3222 * t3137 + (t3098 * t3203 - t3212 * t3413) * t3107) * t3074 * t3189;
t3192 = 0.1e1 / t3214;
t3296 = (t3221 * t3137 + (t3099 * t3206 - t3215 * t3414) * t3108) * t3075 * t3192;
t3140 = pkin(5) + t3392;
t3295 = t3140 * t3361;
t3294 = t3140 * t3360;
t3144 = pkin(5) + t3391;
t3293 = t3144 * t3361;
t3292 = t3144 * t3359;
t3148 = pkin(5) + t3390;
t3291 = t3148 * t3361;
t3290 = t3148 * t3358;
t3289 = t3194 * t3354;
t3288 = t3194 * t3353;
t3287 = t3194 * t3352;
t3286 = t3200 * t3350;
t3285 = t3200 * t3364;
t3284 = t3203 * t3348;
t3283 = t3203 * t3363;
t3282 = t3206 * t3346;
t3281 = t3206 * t3362;
t3280 = t3142 * t3350;
t3279 = t3146 * t3348;
t3278 = t3150 * t3346;
t3218 = pkin(6) ^ 2;
t3274 = -t3218 + t3364;
t3273 = -t3218 + t3363;
t3272 = -t3218 + t3362;
t3268 = t3199 * t3314;
t3267 = t3202 * t3312;
t3266 = t3205 * t3310;
t3265 = t3185 * t3309;
t3264 = t3188 * t3308;
t3263 = t3191 * t3307;
t3187 = t3209 ^ 2;
t3130 = (t3187 - 0.2e1) * t3392 - pkin(5);
t3190 = t3212 ^ 2;
t3131 = (t3190 - 0.2e1) * t3391 - pkin(5);
t3193 = t3215 ^ 2;
t3132 = (t3193 - 0.2e1) * t3390 - pkin(5);
t3262 = t3400 * t3201 * t3140;
t3261 = t3400 * t3204 * t3144;
t3260 = t3400 * t3207 * t3148;
t3259 = t3195 * t3294;
t3258 = t3195 * t3292;
t3257 = t3195 * t3290;
t3256 = t3164 * t3289;
t3255 = t3165 * t3288;
t3254 = t3166 * t3287;
t3253 = t3167 * t3289;
t3252 = t3168 * t3288;
t3251 = t3169 * t3287;
t3154 = pkin(6) * t3397;
t3250 = ((-rSges(3,1) * t3411 + t3223 * rSges(3,2)) * t3208 + (t3223 * rSges(3,1) + rSges(3,2) * t3411) * t3199) / ((-t3208 * t3334 + t3154) * t3209 - t3326 * t3397 + t3194 * (-pkin(5) * t3170 + t3158)) * t3186 * t3399;
t3249 = ((-rSges(3,1) * t3410 + t3222 * rSges(3,2)) * t3211 + (t3222 * rSges(3,1) + rSges(3,2) * t3410) * t3202) / ((-t3211 * t3334 + t3154) * t3212 - t3324 * t3397 + t3194 * (-pkin(5) * t3171 + t3159)) * t3189 * t3399;
t3248 = ((-rSges(3,1) * t3409 + t3221 * rSges(3,2)) * t3214 + (t3221 * rSges(3,1) + rSges(3,2) * t3409) * t3205) / ((-t3214 * t3334 + t3154) * t3215 - t3322 * t3397 + t3194 * (-pkin(5) * t3172 + t3160)) * t3192 * t3399;
t3247 = t3286 * t3393;
t3246 = t3284 * t3393;
t3245 = t3282 * t3393;
t3244 = t3289 * t3170;
t3243 = t3288 * t3171;
t3242 = t3287 * t3172;
t3241 = t3274 * t3210;
t3240 = t3273 * t3213;
t3239 = t3272 * t3216;
t3232 = t3210 * t3247;
t3231 = t3213 * t3246;
t3230 = t3216 * t3245;
t3175 = pkin(1) * t3206;
t3174 = pkin(1) * t3203;
t3173 = pkin(1) * t3200;
t3153 = t3175 + pkin(6);
t3152 = t3174 + pkin(6);
t3151 = t3173 + pkin(6);
t3149 = 0.2e1 * t3172 + pkin(1);
t3145 = 0.2e1 * t3171 + pkin(1);
t3141 = 0.2e1 * t3170 + pkin(1);
t3135 = t3175 + t3303;
t3134 = t3174 + t3303;
t3133 = t3173 + t3303;
t3129 = (t3193 - 0.1e1) * t3390 - pkin(5);
t3128 = (t3190 - 0.1e1) * t3391 - pkin(5);
t3127 = (t3187 - 0.1e1) * t3392 - pkin(5);
t3111 = -t3172 * t3183 + t3150;
t3110 = -t3171 * t3183 + t3146;
t3109 = -t3170 * t3183 + t3142;
t3096 = t3166 * t3183 - t3166 + t3251;
t3095 = -t3169 * t3183 + t3169 + t3254;
t3094 = t3165 * t3183 - t3165 + t3252;
t3093 = -t3168 * t3183 + t3168 + t3255;
t3092 = t3164 * t3183 - t3164 + t3253;
t3091 = -t3167 * t3183 + t3167 + t3256;
t3087 = t3132 * t3194 * t3207 - t3150 * t3216;
t3086 = t3131 * t3194 * t3204 - t3146 * t3213;
t3085 = t3130 * t3194 * t3201 - t3142 * t3210;
t3084 = t3123 * t3352 - t3216 * t3417;
t3083 = t3122 * t3353 - t3213 * t3416;
t3082 = t3121 * t3354 - t3210 * t3415;
t3081 = t3149 * t3355 + t3260;
t3080 = t3145 * t3356 + t3261;
t3079 = t3141 * t3357 + t3262;
t3078 = t3153 * t3355 + t3206 * t3260;
t3077 = t3152 * t3356 + t3203 * t3261;
t3076 = t3151 * t3357 + t3200 * t3262;
t1 = [((t3123 * t3166 - t3169 * t3323) * t3194 - t3084 * t3169 - t3166 * t3328) * t3377 + (((-t3132 * t3166 + t3169 * t3310) * t3214 + (-t3166 * t3311 - t3169 * t3418) * t3206) * t3183 + ((0.2e1 * t3166 * t3358 + t3169 * t3337) * t3394 + (-t3087 * t3169 - t3166 * t3316) * t3214 - (t3147 * t3166 + t3169 * t3266) * t3358) * t3195 + t3169 * t3263 + (t3129 * t3166 - t3169 * t3230) * t3214 + t3406 * t3169 + t3166 * t3278) * t3296 + ((-t3169 * t3272 * t3355 + t3096 * t3304) * t3193 + (t3096 * t3281 - (t3081 * t3169 + t3166 * t3291) * t3387 + pkin(6) * (t3111 * t3166 - t3169 * t3242)) * t3215 - (-pkin(6) * t3251 + t3135 * t3166) * t3387 - (t3078 * t3169 + t3166 * t3257) * pkin(6)) * t3248 + ((t3122 * t3165 - t3168 * t3325) * t3194 - t3083 * t3168 - t3165 * t3329) * t3378 + (((-t3131 * t3165 + t3168 * t3312) * t3211 + (-t3165 * t3313 - t3168 * t3419) * t3203) * t3183 + ((0.2e1 * t3165 * t3359 + t3168 * t3340) * t3395 + (-t3086 * t3168 - t3165 * t3317) * t3211 - (t3143 * t3165 + t3168 * t3267) * t3359) * t3195 + t3168 * t3264 + (t3128 * t3165 - t3168 * t3231) * t3211 + t3407 * t3168 + t3165 * t3279) * t3297 + ((-t3168 * t3273 * t3356 + t3094 * t3305) * t3190 + (t3094 * t3283 - (t3080 * t3168 + t3165 * t3293) * t3388 + pkin(6) * (t3110 * t3165 - t3168 * t3243)) * t3212 - (-pkin(6) * t3252 + t3134 * t3165) * t3388 - (t3077 * t3168 + t3165 * t3258) * pkin(6)) * t3249 + ((t3121 * t3164 - t3167 * t3327) * t3194 - t3082 * t3167 - t3164 * t3330) * t3379 + (((-t3130 * t3164 + t3167 * t3314) * t3208 + (-t3164 * t3315 - t3167 * t3420) * t3200) * t3183 + ((0.2e1 * t3164 * t3360 + t3167 * t3343) * t3396 + (-t3085 * t3167 - t3164 * t3318) * t3208 - (t3139 * t3164 + t3167 * t3268) * t3360) * t3195 + t3167 * t3265 + (t3127 * t3164 - t3167 * t3232) * t3208 + t3408 * t3167 + t3164 * t3280) * t3298 + ((-t3167 * t3274 * t3357 + t3092 * t3306) * t3187 + (t3092 * t3285 - (t3079 * t3167 + t3164 * t3295) * t3389 + pkin(6) * (t3109 * t3164 - t3167 * t3244)) * t3209 - (-pkin(6) * t3253 + t3133 * t3164) * t3389 - (t3076 * t3167 + t3164 * t3259) * pkin(6)) * t3250 - m(4) * g(1); ((t3123 * t3169 + t3166 * t3323) * t3194 + t3084 * t3166 - t3169 * t3328) * t3377 + (((-t3132 * t3169 - t3166 * t3310) * t3214 + (t3166 * t3418 - t3169 * t3311) * t3206) * t3183 + (-(t3166 * t3337 - 0.2e1 * t3169 * t3358) * t3394 + (t3087 * t3166 - t3169 * t3316) * t3214 + (-t3147 * t3169 + t3166 * t3266) * t3358) * t3195 - t3166 * t3263 + (t3129 * t3169 + t3166 * t3230) * t3214 - t3406 * t3166 + t3169 * t3278) * t3296 + ((t3166 * t3194 * t3239 + 0.2e1 * t3095 * t3331) * t3193 + (-t3095 * t3281 + (t3081 * t3166 - t3169 * t3291) * t3387 + (t3111 * t3169 + t3166 * t3242) * pkin(6)) * t3215 - (pkin(6) * t3254 + t3135 * t3169) * t3387 + pkin(6) * (t3078 * t3166 - t3169 * t3257)) * t3248 + ((t3122 * t3168 + t3165 * t3325) * t3194 + t3083 * t3165 - t3168 * t3329) * t3378 + (((-t3131 * t3168 - t3165 * t3312) * t3211 + (t3165 * t3419 - t3168 * t3313) * t3203) * t3183 + (-(t3165 * t3340 - 0.2e1 * t3168 * t3359) * t3395 + (t3086 * t3165 - t3168 * t3317) * t3211 + (-t3143 * t3168 + t3165 * t3267) * t3359) * t3195 - t3165 * t3264 + (t3128 * t3168 + t3165 * t3231) * t3211 - t3407 * t3165 + t3168 * t3279) * t3297 + ((t3165 * t3194 * t3240 + 0.2e1 * t3093 * t3332) * t3190 + (-t3093 * t3283 + (t3080 * t3165 - t3168 * t3293) * t3388 + (t3110 * t3168 + t3165 * t3243) * pkin(6)) * t3212 - (pkin(6) * t3255 + t3134 * t3168) * t3388 + pkin(6) * (t3077 * t3165 - t3168 * t3258)) * t3249 + ((t3121 * t3167 + t3164 * t3327) * t3194 + t3082 * t3164 - t3167 * t3330) * t3379 + (((-t3130 * t3167 - t3164 * t3314) * t3208 + (t3164 * t3420 - t3167 * t3315) * t3200) * t3183 + (-(t3164 * t3343 - 0.2e1 * t3167 * t3360) * t3396 + (t3085 * t3164 - t3167 * t3318) * t3208 + (-t3139 * t3167 + t3164 * t3268) * t3360) * t3195 - t3164 * t3265 + (t3127 * t3167 + t3164 * t3232) * t3208 - t3408 * t3164 + t3167 * t3280) * t3298 + ((t3164 * t3194 * t3241 + 0.2e1 * t3091 * t3333) * t3187 + (-t3091 * t3285 + (t3079 * t3164 - t3167 * t3295) * t3389 + (t3109 * t3167 + t3164 * t3244) * pkin(6)) * t3209 - (pkin(6) * t3256 + t3133 * t3167) * t3389 + pkin(6) * (t3076 * t3164 - t3167 * t3259)) * t3250 - m(4) * g(2); (-t3417 * t3207 + (-t3194 * t3390 - t3365) * t3216) * t3377 + (((-pkin(6) * t3282 - t3132 * t3214) * t3355 + (-t3150 * t3214 - t3215 * t3394) * t3207) * t3195 + t3214 * t3207 * t3245 + (t3206 * t3398 - t3269) * t3347 + ((pkin(6) * t3339 - t3206 * t3275) * t3183 + t3191 * t3380 - t3206 * t3147) * t3216) * t3296 + ((t3195 * t3216 * t3304 + t3207 * t3272) * t3193 + ((-t3148 * t3355 + t3149 * t3207) * t3387 + t3206 * t3195 * t3239) * t3215 + pkin(6) * (t3153 * t3207 + (t3195 * t3387 - t3290) * t3216)) * t3194 * t3248 + (-t3416 * t3204 + (-t3194 * t3391 - t3366) * t3213) * t3378 + (((-pkin(6) * t3284 - t3131 * t3211) * t3356 + (-t3146 * t3211 - t3212 * t3395) * t3204) * t3195 + t3211 * t3204 * t3246 + (t3203 * t3398 - t3270) * t3349 + ((pkin(6) * t3342 - t3203 * t3276) * t3183 + t3188 * t3381 - t3203 * t3143) * t3213) * t3297 + ((t3195 * t3213 * t3305 + t3204 * t3273) * t3190 + ((-t3144 * t3356 + t3145 * t3204) * t3388 + t3203 * t3195 * t3240) * t3212 + pkin(6) * (t3152 * t3204 + (t3195 * t3388 - t3292) * t3213)) * t3194 * t3249 + (-t3415 * t3201 + (-t3194 * t3392 - t3367) * t3210) * t3379 + (((-pkin(6) * t3286 - t3130 * t3208) * t3357 + (-t3142 * t3208 - t3209 * t3396) * t3201) * t3195 + t3208 * t3201 * t3247 + (t3200 * t3398 - t3271) * t3351 + ((pkin(6) * t3345 - t3200 * t3277) * t3183 + t3185 * t3382 - t3200 * t3139) * t3210) * t3298 + ((t3195 * t3210 * t3306 + t3201 * t3274) * t3187 + ((-t3140 * t3357 + t3141 * t3201) * t3389 + t3200 * t3195 * t3241) * t3209 + pkin(6) * (t3151 * t3201 + (t3195 * t3389 - t3294) * t3210)) * t3194 * t3250 - m(4) * g(3);];
taugX  = t1;
