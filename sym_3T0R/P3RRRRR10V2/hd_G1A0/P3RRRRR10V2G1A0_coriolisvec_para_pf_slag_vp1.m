% Calculate vector of centrifugal and coriolis load on the joints for
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [3x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:38:14
% EndTime: 2020-08-06 23:41:39
% DurationCPUTime: 214.22s
% Computational Cost: add. (1721754->2193), mult. (2912124->3229), div. (50508->25), fcn. (2369586->26), ass. (0->1191)
t2905 = rSges(3,2) * pkin(2);
t3632 = rSges(3,1) * pkin(6);
t2733 = t2905 + t3632;
t2698 = m(3) * t2733;
t2904 = rSges(3,2) * pkin(6);
t3633 = rSges(3,1) * pkin(2);
t2732 = -t2904 + t3633;
t2891 = cos(qJ(3,3));
t2882 = sin(qJ(3,3));
t3626 = m(3) * t2882;
t3631 = rSges(3,1) * rSges(3,2);
t2901 = rSges(2,3) + pkin(6);
t3694 = m(2) * t2901;
t3700 = -rSges(2,1) * t3694 - Icges(3,4) + Icges(2,5) + (-pkin(2) * pkin(6) + t3631) * m(3);
t2922 = rSges(3,2) ^ 2;
t2924 = rSges(3,1) ^ 2;
t2802 = -t2922 + t2924;
t3565 = Icges(3,2) - Icges(3,1);
t2666 = m(3) * t2802 + t3565;
t3709 = t2666 * t2882;
t3725 = -t2732 * t3626 + t2891 * (-t3709 - t2698) + t3700;
t2894 = cos(qJ(3,2));
t2885 = sin(qJ(3,2));
t3625 = m(3) * t2885;
t3708 = t2666 * t2885;
t3724 = -t2732 * t3625 + t2894 * (-t3708 - t2698) + t3700;
t2897 = cos(qJ(3,1));
t2888 = sin(qJ(3,1));
t3624 = m(3) * t2888;
t3707 = t2666 * t2888;
t3723 = -t2732 * t3624 + t2897 * (-t3707 - t2698) + t3700;
t2931 = pkin(8) ^ 2;
t2932 = pkin(7) ^ 2;
t3355 = (-t2932 - t2931);
t3637 = (pkin(7) * pkin(8));
t3135 = -2 * t3637 + t3355;
t2810 = t2882 * pkin(3);
t2737 = t2810 + pkin(6);
t2870 = cos(pkin(4));
t2883 = sin(qJ(2,3));
t2814 = t2891 * pkin(3);
t2910 = pkin(8) + pkin(7);
t2850 = pkin(2) + t2910;
t2851 = pkin(2) - t2910;
t3479 = (t2814 + t2850) * (t2814 + t2851);
t3185 = t2883 * t3479;
t2869 = sin(pkin(4));
t3693 = t2814 + pkin(2);
t3463 = t3693 * t2869;
t2544 = -t2737 * t3463 + t2870 * t3185;
t2884 = sin(qJ(1,3));
t2893 = cos(qJ(1,3));
t3695 = 0.2e1 * t2910;
t3412 = t2883 * t3695;
t2703 = pkin(1) + t3412;
t3476 = t2703 * t3693;
t2532 = -t2544 * t2884 + t2893 * t3476;
t2535 = t2544 * t2893 + t2884 * t3476;
t3436 = t2869 * t2883;
t3182 = t2737 * t3436;
t2584 = t2870 * t3693 - t3182;
t2823 = pkin(1) * t2883;
t2718 = t2910 + t2823;
t2547 = -t2584 * t2884 + t2718 * t2893;
t2550 = t2584 * t2893 + t2718 * t2884;
t3417 = t2870 * t2910;
t3179 = t3693 * t3417;
t2553 = 0.2e1 * t2884 * t3179 + t2893 * t3479;
t2879 = legFrame(3,3);
t2792 = sin(t2879);
t2795 = cos(t2879);
t2892 = cos(qJ(2,3));
t2855 = t2892 ^ 2;
t3048 = t2893 * t3179;
t3158 = t2884 * t3479;
t2466 = (t2553 * t2795 + 0.2e1 * (t3048 - t3158 / 0.2e1) * t2792) * t2855 + (t2532 * t2795 - t2535 * t2792) * t2892 + (t2547 * t2795 - t2550 * t2792) * t2910;
t2469 = ((-0.2e1 * t3048 + t3158) * t2795 + t2553 * t2792) * t2855 + (t2532 * t2792 + t2535 * t2795) * t2892 + (t2547 * t2792 + t2550 * t2795) * t2910;
t2738 = t2810 - pkin(6);
t2937 = pkin(2) ^ 2;
t2853 = t2891 ^ 2;
t3594 = pkin(3) * t2853;
t3336 = pkin(6) * t3594;
t2711 = pkin(1) * t3417;
t3466 = t2711 * t2891;
t2541 = (t3466 + (pkin(2) * t2738 * t2891 + t2882 * t2937 - t3336) * t2869) * t2892;
t3608 = pkin(2) * t2870;
t2775 = pkin(1) * t3608;
t3428 = t2869 * t2910;
t3253 = pkin(6) * t3428;
t2619 = -t2775 - t3253;
t3613 = pkin(1) * t2870;
t3344 = pkin(3) * t3613;
t3120 = t2853 * t3344;
t3266 = pkin(2) * t3428;
t3437 = t2869 * t2882;
t3286 = pkin(1) * t3437;
t2511 = 0.1e1 / (t2541 + (t2619 * t2891 + t2882 * t3266 - t3120) * t2883 + t3693 * t3286);
t2908 = xDP(2);
t2909 = xDP(1);
t2907 = xDP(3);
t2936 = 0.1e1 / pkin(3);
t3401 = t2907 * t2936;
t3427 = t2869 * t2936;
t3400 = t2910 * t2883;
t2623 = pkin(1) * t2810 - pkin(6) * t3400;
t2700 = t3400 + pkin(1);
t3607 = pkin(2) * t2882;
t3269 = t2700 * t3607;
t3420 = t2870 * t2891;
t3279 = pkin(1) * t3420;
t3706 = t2883 * t3693;
t2523 = 0.1e1 / ((t3466 - (pkin(6) * t2891 - t3607) * t3463) * t2892 - t3279 * t3706 + (t2623 * t2891 + t3269) * t2869);
t2837 = pkin(1) * t2910;
t2847 = t2870 ^ 2;
t2781 = pkin(2) * t2814;
t2935 = pkin(3) ^ 2;
t2813 = t2853 * t2935;
t2996 = 0.2e1 * t2781 + t2813;
t3442 = t2850 * t2851;
t2965 = t2996 + t3442;
t3447 = (t2870 + 0.1e1) * (t2870 - 0.1e1);
t3176 = t2855 * t3447;
t3098 = -0.2e1 * t3176;
t3160 = t2869 * t3417;
t3431 = t2869 * t2892;
t3163 = t2870 * t3431;
t3498 = (t2837 * t2892 + (-t2737 * t3163 - t2718 + (t2847 + t3098) * t2910) * t3693 + ((t2847 * t3479 - t2965) * t2892 - t2737 * t3160) * t2883) * t2523;
t2364 = t3401 * t3498 + (-t2466 * t2909 - t2469 * t2908) * t2511 * t3427;
t2358 = pkin(1) * t2364;
t2597 = t2792 * t2893 + t2795 * t2884;
t2598 = -t2792 * t2884 + t2795 * t2893;
t2764 = t2910 * t2892;
t3159 = t2883 * t2764;
t3578 = t2855 * pkin(2);
t2989 = t3159 + t3578;
t2616 = -pkin(2) + t2989;
t3606 = pkin(2) * t2883;
t2648 = t2764 - t3606;
t2736 = pkin(6) * t2882 + pkin(3);
t3438 = t2869 * t2870;
t2787 = t2855 - 0.2e1;
t3450 = t2787 * t2882;
t2959 = ((pkin(3) * t3450 - pkin(6)) * t2891 + t2882 * t2616) * t3438 - (t2648 * t2891 + (t2736 - 0.2e1 * t3594) * t2883) * t2847 - (-t2736 + t3594) * t2883;
t2815 = t2892 * pkin(2);
t2645 = t2815 + t3400;
t2635 = pkin(1) + t2645;
t2746 = t2815 + pkin(1);
t3258 = t2892 * t2814;
t3446 = (t2892 + 0.1e1) * (t2892 - 0.1e1);
t2969 = -(-t2910 * t3446 + (t2746 + t3258) * t2883) * t3437 + (t2635 + t3258) * t3420;
t2478 = -t2597 * t2959 + t2598 * t2969;
t2479 = t2597 * t2969 + t2598 * t2959;
t2568 = (t2764 - t3706) * t3279;
t2575 = -pkin(6) * t2645 + t2746 * t2810;
t2603 = t2635 * t3607;
t3019 = -t2892 * t3336 + t2603;
t2526 = 0.1e1 / (t2568 + t2869 * (t2575 * t2891 + t3019));
t2606 = t2648 * t3613;
t3425 = t2870 * t2883;
t3282 = pkin(1) * t3425;
t3043 = t2869 * t2603 - (pkin(6) * t3431 + t3282) * t3594;
t2517 = 0.1e1 / ((t2575 * t2869 + t2606) * t2891 + t3043);
t3088 = -t2787 * t2847 + t2855;
t3166 = t2869 * t3425;
t3416 = t2882 * t2891;
t3629 = t2847 - 0.1e1;
t3575 = t3629 * pkin(6);
t3642 = 0.2e1 * t2853;
t3495 = ((-t2648 * t3438 + t3575) * t2891 + (-pkin(6) * t3166 - t2616 * t2847 + t2635 * t2892) * t2882 + (-(-t3088 + 0.1e1) * t3416 + (t3642 - 0.1e1) * t3166) * pkin(3)) * t2517;
t2442 = t2907 * t3495 + (t2478 * t2909 + t2479 * t2908) * t2526;
t3536 = t2442 * t2882;
t2400 = pkin(3) * t3536;
t2352 = pkin(7) * t2364;
t2349 = pkin(8) * t2364;
t2430 = pkin(6) * t2442;
t3362 = t2430 + t2349;
t3139 = -t2352 - t3362;
t3670 = t3139 - t2400;
t3719 = -t2883 * t3670 + t2358;
t2811 = t2885 * pkin(3);
t2740 = t2811 + pkin(6);
t2886 = sin(qJ(2,2));
t2817 = t2894 * pkin(3);
t3478 = (t2817 + t2850) * (t2817 + t2851);
t3184 = t2886 * t3478;
t3692 = t2817 + pkin(2);
t3462 = t3692 * t2869;
t2545 = -t2740 * t3462 + t2870 * t3184;
t2887 = sin(qJ(1,2));
t2896 = cos(qJ(1,2));
t3407 = t2886 * t3695;
t2704 = pkin(1) + t3407;
t3474 = t2704 * t3692;
t2533 = -t2545 * t2887 + t2896 * t3474;
t2536 = t2545 * t2896 + t2887 * t3474;
t3434 = t2869 * t2886;
t3181 = t2740 * t3434;
t2585 = t2870 * t3692 - t3181;
t2824 = pkin(1) * t2886;
t2719 = t2910 + t2824;
t2548 = -t2585 * t2887 + t2719 * t2896;
t2551 = t2585 * t2896 + t2719 * t2887;
t3178 = t3692 * t3417;
t2554 = 0.2e1 * t2887 * t3178 + t2896 * t3478;
t2880 = legFrame(2,3);
t2793 = sin(t2880);
t2796 = cos(t2880);
t2895 = cos(qJ(2,2));
t2859 = t2895 ^ 2;
t3047 = t2896 * t3178;
t3156 = t2887 * t3478;
t2467 = (t2554 * t2796 + 0.2e1 * (t3047 - t3156 / 0.2e1) * t2793) * t2859 + (t2533 * t2796 - t2536 * t2793) * t2895 + (t2548 * t2796 - t2551 * t2793) * t2910;
t2470 = ((-0.2e1 * t3047 + t3156) * t2796 + t2554 * t2793) * t2859 + (t2533 * t2793 + t2536 * t2796) * t2895 + (t2548 * t2793 + t2551 * t2796) * t2910;
t2741 = t2811 - pkin(6);
t2857 = t2894 ^ 2;
t3593 = pkin(3) * t2857;
t3335 = pkin(6) * t3593;
t3465 = t2711 * t2894;
t2542 = (t3465 + (pkin(2) * t2741 * t2894 + t2885 * t2937 - t3335) * t2869) * t2895;
t3119 = t2857 * t3344;
t3435 = t2869 * t2885;
t3285 = pkin(1) * t3435;
t2512 = 0.1e1 / (t2542 + (t2619 * t2894 + t2885 * t3266 - t3119) * t2886 + t3692 * t3285);
t3399 = t2910 * t2886;
t2624 = pkin(1) * t2811 - pkin(6) * t3399;
t2701 = t3399 + pkin(1);
t3605 = pkin(2) * t2885;
t3268 = t2701 * t3605;
t3419 = t2870 * t2894;
t3278 = pkin(1) * t3419;
t3705 = t2886 * t3692;
t2524 = 0.1e1 / ((t3465 - (pkin(6) * t2894 - t3605) * t3462) * t2895 - t3278 * t3705 + (t2624 * t2894 + t3268) * t2869);
t2782 = pkin(2) * t2817;
t2816 = t2857 * t2935;
t2995 = 0.2e1 * t2782 + t2816;
t2964 = t2995 + t3442;
t3175 = t2859 * t3447;
t3097 = -0.2e1 * t3175;
t3430 = t2869 * t2895;
t3162 = t2870 * t3430;
t3497 = (t2837 * t2895 + (-t2740 * t3162 - t2719 + (t2847 + t3097) * t2910) * t3692 + ((t2847 * t3478 - t2964) * t2895 - t2740 * t3160) * t2886) * t2524;
t2365 = t3401 * t3497 + (-t2467 * t2909 - t2470 * t2908) * t2512 * t3427;
t2359 = pkin(1) * t2365;
t2599 = t2793 * t2896 + t2796 * t2887;
t2600 = -t2793 * t2887 + t2796 * t2896;
t2765 = t2910 * t2895;
t3157 = t2886 * t2765;
t3577 = t2859 * pkin(2);
t2987 = t3157 + t3577;
t2617 = -pkin(2) + t2987;
t3604 = pkin(2) * t2886;
t2649 = t2765 - t3604;
t2739 = pkin(6) * t2885 + pkin(3);
t2788 = t2859 - 0.2e1;
t3449 = t2788 * t2885;
t2958 = ((pkin(3) * t3449 - pkin(6)) * t2894 + t2885 * t2617) * t3438 - (t2649 * t2894 + (t2739 - 0.2e1 * t3593) * t2886) * t2847 - (-t2739 + t3593) * t2886;
t2818 = t2895 * pkin(2);
t2646 = t2818 + t3399;
t2636 = pkin(1) + t2646;
t2748 = t2818 + pkin(1);
t3257 = t2895 * t2817;
t3445 = (t2895 + 0.1e1) * (t2895 - 0.1e1);
t2968 = -(-t2910 * t3445 + (t2748 + t3257) * t2886) * t3435 + (t2636 + t3257) * t3419;
t2480 = -t2599 * t2958 + t2600 * t2968;
t2481 = t2599 * t2968 + t2600 * t2958;
t2569 = (t2765 - t3705) * t3278;
t2576 = -pkin(6) * t2646 + t2748 * t2811;
t2604 = t2636 * t3605;
t3018 = -t2895 * t3335 + t2604;
t2527 = 0.1e1 / (t2569 + t2869 * (t2576 * t2894 + t3018));
t2607 = t2649 * t3613;
t3423 = t2870 * t2886;
t3281 = pkin(1) * t3423;
t3042 = t2869 * t2604 - (pkin(6) * t3430 + t3281) * t3593;
t2518 = 0.1e1 / ((t2576 * t2869 + t2607) * t2894 + t3042);
t3087 = -t2788 * t2847 + t2859;
t3165 = t2869 * t3423;
t3411 = t2885 * t2894;
t3641 = 0.2e1 * t2857;
t3494 = ((-t2649 * t3438 + t3575) * t2894 + (-pkin(6) * t3165 - t2617 * t2847 + t2636 * t2895) * t2885 + (-(-t3087 + 0.1e1) * t3411 + (t3641 - 0.1e1) * t3165) * pkin(3)) * t2518;
t2443 = t2907 * t3494 + (t2480 * t2909 + t2481 * t2908) * t2527;
t3532 = t2443 * t2885;
t2401 = pkin(3) * t3532;
t2353 = pkin(7) * t2365;
t2350 = pkin(8) * t2365;
t2431 = pkin(6) * t2443;
t3361 = t2431 + t2350;
t3138 = -t2353 - t3361;
t3671 = t3138 - t2401;
t3718 = -t2886 * t3671 + t2359;
t2812 = t2888 * pkin(3);
t2743 = t2812 + pkin(6);
t2889 = sin(qJ(2,1));
t2820 = t2897 * pkin(3);
t3477 = (t2820 + t2850) * (t2820 + t2851);
t3183 = t2889 * t3477;
t3691 = t2820 + pkin(2);
t3461 = t3691 * t2869;
t2546 = -t2743 * t3461 + t2870 * t3183;
t2890 = sin(qJ(1,1));
t2899 = cos(qJ(1,1));
t3402 = t2889 * t3695;
t2705 = pkin(1) + t3402;
t3472 = t2705 * t3691;
t2534 = -t2546 * t2890 + t2899 * t3472;
t2537 = t2546 * t2899 + t2890 * t3472;
t3432 = t2869 * t2889;
t3180 = t2743 * t3432;
t2586 = t2870 * t3691 - t3180;
t2825 = pkin(1) * t2889;
t2720 = t2910 + t2825;
t2549 = -t2586 * t2890 + t2720 * t2899;
t2552 = t2586 * t2899 + t2720 * t2890;
t3177 = t3691 * t3417;
t2555 = 0.2e1 * t2890 * t3177 + t2899 * t3477;
t2881 = legFrame(1,3);
t2794 = sin(t2881);
t2797 = cos(t2881);
t2898 = cos(qJ(2,1));
t2863 = t2898 ^ 2;
t3046 = t2899 * t3177;
t3154 = t2890 * t3477;
t2468 = (t2555 * t2797 + 0.2e1 * (t3046 - t3154 / 0.2e1) * t2794) * t2863 + (t2534 * t2797 - t2537 * t2794) * t2898 + (t2549 * t2797 - t2552 * t2794) * t2910;
t2471 = ((-0.2e1 * t3046 + t3154) * t2797 + t2555 * t2794) * t2863 + (t2534 * t2794 + t2537 * t2797) * t2898 + (t2549 * t2794 + t2552 * t2797) * t2910;
t2744 = t2812 - pkin(6);
t2861 = t2897 ^ 2;
t3592 = pkin(3) * t2861;
t3334 = pkin(6) * t3592;
t3464 = t2711 * t2897;
t2543 = (t3464 + (pkin(2) * t2744 * t2897 + t2888 * t2937 - t3334) * t2869) * t2898;
t3118 = t2861 * t3344;
t3433 = t2869 * t2888;
t3284 = pkin(1) * t3433;
t2513 = 0.1e1 / (t2543 + (t2619 * t2897 + t2888 * t3266 - t3118) * t2889 + t3691 * t3284);
t3398 = t2910 * t2889;
t2625 = pkin(1) * t2812 - pkin(6) * t3398;
t2702 = t3398 + pkin(1);
t3603 = pkin(2) * t2888;
t3267 = t2702 * t3603;
t3418 = t2870 * t2897;
t3277 = pkin(1) * t3418;
t3704 = t2889 * t3691;
t2525 = 0.1e1 / ((t3464 - (pkin(6) * t2897 - t3603) * t3461) * t2898 - t3277 * t3704 + (t2625 * t2897 + t3267) * t2869);
t2783 = pkin(2) * t2820;
t2819 = t2861 * t2935;
t2994 = 0.2e1 * t2783 + t2819;
t2963 = t2994 + t3442;
t3174 = t2863 * t3447;
t3096 = -0.2e1 * t3174;
t3429 = t2869 * t2898;
t3161 = t2870 * t3429;
t3496 = (t2837 * t2898 + (-t2743 * t3161 - t2720 + (t2847 + t3096) * t2910) * t3691 + ((t2847 * t3477 - t2963) * t2898 - t2743 * t3160) * t2889) * t2525;
t2366 = t3401 * t3496 + (-t2468 * t2909 - t2471 * t2908) * t2513 * t3427;
t2360 = pkin(1) * t2366;
t2601 = t2794 * t2899 + t2797 * t2890;
t2602 = -t2794 * t2890 + t2797 * t2899;
t2766 = t2910 * t2898;
t3155 = t2889 * t2766;
t3576 = t2863 * pkin(2);
t2985 = t3155 + t3576;
t2618 = -pkin(2) + t2985;
t3602 = pkin(2) * t2889;
t2650 = t2766 - t3602;
t2742 = pkin(6) * t2888 + pkin(3);
t2789 = t2863 - 0.2e1;
t3448 = t2789 * t2888;
t2957 = ((pkin(3) * t3448 - pkin(6)) * t2897 + t2888 * t2618) * t3438 - (t2650 * t2897 + (t2742 - 0.2e1 * t3592) * t2889) * t2847 - (-t2742 + t3592) * t2889;
t2821 = t2898 * pkin(2);
t2647 = t2821 + t3398;
t2637 = pkin(1) + t2647;
t2750 = t2821 + pkin(1);
t3256 = t2898 * t2820;
t3444 = (t2898 + 0.1e1) * (t2898 - 0.1e1);
t2967 = -(-t2910 * t3444 + (t2750 + t3256) * t2889) * t3433 + (t2637 + t3256) * t3418;
t2482 = -t2601 * t2957 + t2602 * t2967;
t2483 = t2601 * t2967 + t2602 * t2957;
t2570 = (t2766 - t3704) * t3277;
t2577 = -pkin(6) * t2647 + t2750 * t2812;
t2605 = t2637 * t3603;
t3017 = -t2898 * t3334 + t2605;
t2528 = 0.1e1 / (t2570 + t2869 * (t2577 * t2897 + t3017));
t2608 = t2650 * t3613;
t3421 = t2870 * t2889;
t3280 = pkin(1) * t3421;
t3041 = t2869 * t2605 - (pkin(6) * t3429 + t3280) * t3592;
t2519 = 0.1e1 / ((t2577 * t2869 + t2608) * t2897 + t3041);
t3086 = -t2789 * t2847 + t2863;
t3164 = t2869 * t3421;
t3406 = t2888 * t2897;
t3640 = 0.2e1 * t2861;
t3493 = ((-t2650 * t3438 + t3575) * t2897 + (-pkin(6) * t3164 - t2618 * t2847 + t2637 * t2898) * t2888 + (-(-t3086 + 0.1e1) * t3406 + (t3640 - 0.1e1) * t3164) * pkin(3)) * t2519;
t2444 = t2907 * t3493 + (t2482 * t2909 + t2483 * t2908) * t2528;
t3528 = t2444 * t2888;
t2402 = pkin(3) * t3528;
t2354 = pkin(7) * t2366;
t2351 = pkin(8) * t2366;
t2432 = pkin(6) * t2444;
t3360 = t2432 + t2351;
t3137 = -t2354 - t3360;
t3672 = t3137 - t2402;
t3717 = -t2889 * t3672 + t2360;
t3192 = t2602 * t3433;
t2497 = -(t2601 * t2898 + t2602 * t3421) * t3592 + (pkin(3) * t3192 + (-pkin(2) * t2601 + t2602 * t3417) * t2898 - (t2601 * t2910 + t2602 * t3608) * t2889) * t2897 + pkin(2) * t3192;
t2583 = t2744 * t2821 + t2625;
t2522 = 0.1e1 / ((t2583 * t2869 + t2608) * t2897 + t3041);
t2476 = t2497 * t2522 * t2908;
t3193 = t2601 * t3433;
t2498 = -(-t2601 * t3421 + t2602 * t2898) * t3592 + (-pkin(3) * t3193 + (-pkin(2) * t2602 - t2601 * t3417) * t2898 + (t2601 * t3608 - t2602 * t2910) * t2889) * t2897 - pkin(2) * t3193;
t2477 = t2498 * t2522 * t2909;
t3589 = pkin(3) * t2889;
t3262 = t2861 * t3589;
t3422 = t2870 * t2888;
t2540 = -t2869 * t3262 + (-pkin(3) * t3422 + t2650 * t2869) * t2897 - pkin(2) * t3422;
t2504 = t2540 * t2522 * t2907;
t2459 = t2477 + t2476 + t2504;
t3696 = 0.2e1 * t2459;
t3715 = pkin(2) * t3696;
t3194 = t2600 * t3435;
t2495 = -(t2599 * t2895 + t2600 * t3423) * t3593 + (pkin(3) * t3194 + (-pkin(2) * t2599 + t2600 * t3417) * t2895 - (t2599 * t2910 + t2600 * t3608) * t2886) * t2894 + pkin(2) * t3194;
t2582 = t2741 * t2818 + t2624;
t2521 = 0.1e1 / ((t2582 * t2869 + t2607) * t2894 + t3042);
t2474 = t2495 * t2521 * t2908;
t3195 = t2599 * t3435;
t2496 = -(-t2599 * t3423 + t2600 * t2895) * t3593 + (-pkin(3) * t3195 + (-pkin(2) * t2600 - t2599 * t3417) * t2895 + (t2599 * t3608 - t2600 * t2910) * t2886) * t2894 - pkin(2) * t3195;
t2475 = t2496 * t2521 * t2909;
t3590 = pkin(3) * t2886;
t3242 = t2857 * t3590;
t3424 = t2870 * t2885;
t2539 = -t2869 * t3242 + (-pkin(3) * t3424 + t2649 * t2869) * t2894 - pkin(2) * t3424;
t2503 = t2539 * t2521 * t2907;
t2458 = t2475 + t2474 + t2503;
t3697 = 0.2e1 * t2458;
t3714 = pkin(2) * t3697;
t3196 = t2598 * t3437;
t2493 = -(t2597 * t2892 + t2598 * t3425) * t3594 + (pkin(3) * t3196 + (-pkin(2) * t2597 + t2598 * t3417) * t2892 - (t2597 * t2910 + t2598 * t3608) * t2883) * t2891 + pkin(2) * t3196;
t2581 = t2738 * t2815 + t2623;
t2520 = 0.1e1 / ((t2581 * t2869 + t2606) * t2891 + t3043);
t2472 = t2493 * t2520 * t2908;
t3197 = t2597 * t3437;
t2494 = -(-t2597 * t3425 + t2598 * t2892) * t3594 + (-pkin(3) * t3197 + (-pkin(2) * t2598 - t2597 * t3417) * t2892 + (t2597 * t3608 - t2598 * t2910) * t2883) * t2891 - pkin(2) * t3197;
t2473 = t2494 * t2520 * t2909;
t3591 = pkin(3) * t2883;
t3245 = t2853 * t3591;
t3426 = t2870 * t2882;
t2538 = -t2869 * t3245 + (-pkin(3) * t3426 + t2648 * t2869) * t2891 - pkin(2) * t3426;
t2502 = t2538 * t2520 * t2907;
t2457 = t2473 + t2472 + t2502;
t3698 = 0.2e1 * t2457;
t3713 = pkin(2) * t3698;
t3712 = t2666 * t2853;
t3711 = t2666 * t2857;
t3710 = t2666 * t2861;
t2277 = t2352 + t2349;
t2278 = t2353 + t2350;
t2279 = t2354 + t2351;
t3394 = m(3) * t3633;
t2807 = 0.2e1 * t3394;
t3563 = -m(3) * t3631 + Icges(3,4);
t2770 = 0.2e1 * t3563;
t3460 = t2770 * t2882;
t3703 = -t3712 - (t3460 + t2807) * t2891;
t3459 = t2770 * t2885;
t3702 = -t3711 - (t3459 + t2807) * t2894;
t3458 = t2770 * t2888;
t3701 = -t3710 - (t3458 + t2807) * t2897;
t2900 = pkin(7) + rSges(3,3);
t3623 = m(3) * t2900;
t3699 = rSges(2,2) * t3694 - pkin(6) * t3623 - Icges(2,6);
t3562 = 0.2e1 * m(3);
t2709 = rSges(3,1) * t3623 - Icges(3,5);
t2656 = t2888 * t2709;
t2580 = -t2656 + t3699;
t3568 = rSges(3,2) * t2900;
t2706 = t3568 * m(3) - Icges(3,6);
t3467 = t2706 * t2897;
t3690 = (-t2580 + t3467) * t2898;
t2655 = t2885 * t2709;
t2579 = -t2655 + t3699;
t3468 = t2706 * t2894;
t3689 = (-t2579 + t3468) * t2895;
t2654 = t2882 * t2709;
t2578 = -t2654 + t3699;
t3469 = t2706 * t2891;
t3688 = (-t2578 + t3469) * t2892;
t3377 = 0.2e1 * t2277;
t3376 = 0.2e1 * t2278;
t3375 = 0.2e1 * t2279;
t3515 = t2457 * t2870;
t2313 = t2442 + t3515;
t2436 = pkin(1) * t2442;
t3687 = t2313 * t3400 + t2436;
t3508 = t2458 * t2870;
t2314 = t2443 + t3508;
t2437 = pkin(1) * t2443;
t3686 = t2314 * t3399 + t2437;
t3501 = t2459 * t2870;
t2315 = t2444 + t3501;
t2438 = pkin(1) * t2444;
t3685 = t2315 * t3398 + t2438;
t3393 = m(3) * t2905;
t3684 = -t3709 - t3393;
t3683 = -t3708 - t3393;
t3682 = -t3707 - t3393;
t3636 = m(2) * rSges(2,2);
t2644 = -rSges(2,1) * t3636 + pkin(2) * t3623 + Icges(2,4);
t3003 = -t2706 * t2888 + t2709 * t2897;
t2950 = t2644 + t3003;
t3004 = -t2706 * t2885 + t2709 * t2894;
t2951 = t2644 + t3004;
t3005 = -t2706 * t2882 + t2709 * t2891;
t2952 = t2644 + t3005;
t2778 = pkin(6) * t2810;
t3681 = 0.2e1 * t2778 - t2813;
t2779 = pkin(6) * t2811;
t3680 = 0.2e1 * t2779 - t2816;
t2780 = pkin(6) * t2812;
t3679 = 0.2e1 * t2780 - t2819;
t2923 = rSges(2,2) ^ 2;
t2925 = rSges(2,1) ^ 2;
t3065 = Icges(3,1) + Icges(2,3) + (t2900 ^ 2 + t2922 + t2937) * m(3) + (t2923 + t2925) * m(2);
t3675 = -t3065 + t3701;
t3674 = -t3065 + t3702;
t3673 = -t3065 + t3703;
t3140 = t2931 / 0.2e1 + t2932 / 0.2e1;
t3023 = t3140 + t3637;
t2865 = 2 * t3637;
t3064 = -t3355 + t2865;
t3669 = t3375 + 0.2e1 * t2402;
t3668 = t3376 + 0.2e1 * t2401;
t3667 = t3377 + 0.2e1 * t2400;
t2357 = pkin(6) * t2366;
t3526 = t2444 * t2910;
t2294 = t3526 - t2357;
t2356 = pkin(6) * t2365;
t3530 = t2443 * t2910;
t2293 = t3530 - t2356;
t2355 = pkin(6) * t2364;
t3534 = t2442 * t2910;
t2292 = t3534 - t2355;
t3572 = rSges(3,1) * t2888;
t3666 = rSges(3,2) * t2897 + t3572;
t3573 = rSges(3,1) * t2885;
t3665 = rSges(3,2) * t2894 + t3573;
t3574 = rSges(3,1) * t2882;
t3664 = rSges(3,2) * t2891 + t3574;
t3663 = pkin(2) * t3629;
t3662 = t2781 + t2813 - t2778;
t3661 = t2782 + t2816 - t2779;
t3660 = t2783 + t2819 - t2780;
t3659 = 3 * t3135;
t3567 = Icges(2,1) + Icges(3,2);
t2574 = (t2922 - (pkin(2) + t2900) * (-pkin(2) + t2900)) * m(3) + (-t2923 + t2925) * m(2) + Icges(2,2) + Icges(3,3) - t3567;
t3658 = 0.2e1 * pkin(1);
t2929 = 0.2e1 * pkin(2);
t2928 = 0.3e1 * pkin(2);
t3657 = -0.2e1 * pkin(3);
t3656 = 0.2e1 * pkin(6);
t3655 = -0.2e1 * t2364;
t3654 = -0.2e1 * t2365;
t3653 = -0.2e1 * t2366;
t3649 = -0.2e1 * t2666;
t3648 = -0.2e1 * t3563;
t3647 = 0.2e1 * t2837;
t2846 = t2870 * t2847;
t3646 = 0.2e1 * t2846;
t3645 = 0.3e1 * t2846;
t3644 = -0.2e1 * t2847;
t3643 = 0.2e1 * t2847;
t3639 = -0.2e1 * t2869;
t2912 = pkin(2) * m(3);
t3635 = m(3) * rSges(3,1);
t3634 = m(3) * rSges(3,2);
t2903 = pkin(1) * rSges(3,1);
t2902 = pkin(1) * rSges(3,2);
t3630 = 0.3e1 / 0.2e1 * t2937 + t3023;
t3627 = m(3) * t2732;
t3622 = pkin(1) * t2457;
t3621 = pkin(1) * t2458;
t3620 = pkin(1) * t2459;
t2735 = m(2) * rSges(2,1) + t2912;
t3318 = rSges(3,2) * t3626;
t2641 = t3318 - t2735;
t3619 = pkin(1) * t2641;
t3317 = rSges(3,2) * t3625;
t2642 = t3317 - t2735;
t3618 = pkin(1) * t2642;
t3316 = rSges(3,2) * t3624;
t2643 = t3316 - t2735;
t3617 = pkin(1) * t2643;
t2695 = -t3623 + t3636;
t3616 = pkin(1) * t2695;
t3615 = pkin(1) * t2735;
t3614 = pkin(1) * t2869;
t3612 = pkin(2) * t2364;
t3611 = pkin(2) * t2365;
t3610 = pkin(2) * t2366;
t2433 = pkin(2) * t2442;
t2434 = pkin(2) * t2443;
t2435 = pkin(2) * t2444;
t3609 = pkin(2) * t2869;
t3601 = pkin(2) * t2910;
t3600 = pkin(3) * t2364;
t3599 = pkin(3) * t2365;
t3598 = pkin(3) * t2366;
t3597 = pkin(3) * t2736;
t3596 = pkin(3) * t2739;
t3595 = pkin(3) * t2742;
t3588 = pkin(6) * t2457;
t3587 = pkin(6) * t2458;
t3586 = pkin(6) * t2459;
t3585 = pkin(6) * t2910;
t2426 = pkin(8) * t2443;
t2427 = pkin(8) * t2444;
t3584 = t2442 * pkin(3);
t2418 = t2442 * pkin(8);
t3583 = t2443 * pkin(3);
t3582 = t2444 * pkin(3);
t3564 = -0.2e1 * t3633;
t3209 = t2457 * t3436;
t3103 = 0.2e1 * t3209;
t3561 = ((pkin(2) * t3103 - t3139) * t2882 + t3584) * t2855;
t3204 = t2458 * t3434;
t3101 = 0.2e1 * t3204;
t3560 = ((pkin(2) * t3101 - t3138) * t2885 + t3583) * t2859;
t3199 = t2459 * t3432;
t3099 = 0.2e1 * t3199;
t3559 = ((pkin(2) * t3099 - t3137) * t2888 + t3582) * t2863;
t3558 = (t2810 * t3209 - t2433) * t2855;
t3557 = (t2811 * t3204 - t2434) * t2859;
t3556 = (t2812 * t3199 - t2435) * t2863;
t3555 = (t2457 - t2442) * (t2457 + t2442);
t3554 = (t2458 - t2443) * (t2458 + t2443);
t3553 = (t2459 - t2444) * (t2459 + t2444);
t3552 = t2364 * t3563;
t3551 = t2364 * t2853;
t3550 = t2364 * t2869;
t3549 = t2364 * t2883;
t3548 = t2364 * t2935;
t3547 = t2365 * t3563;
t3546 = t2365 * t2857;
t3545 = t2365 * t2869;
t3544 = t2365 * t2886;
t3543 = t2365 * t2935;
t3542 = t2366 * t3563;
t3541 = t2366 * t2861;
t3540 = t2366 * t2869;
t3539 = t2366 * t2889;
t3538 = t2366 * t2935;
t3537 = t2442 * t3563;
t3535 = t2442 * t2883;
t2420 = t2442 * t2935;
t3533 = t2443 * t3563;
t3531 = t2443 * t2886;
t2422 = t2443 * t2935;
t3529 = t2444 * t3563;
t3527 = t2444 * t2889;
t2424 = t2444 * t2935;
t2454 = t2457 ^ 2;
t3525 = t2454 * t2847;
t3524 = t2454 * t2855;
t2455 = t2458 ^ 2;
t3523 = t2455 * t2847;
t3522 = t2455 * t2859;
t2456 = t2459 ^ 2;
t3521 = t2456 * t2847;
t3520 = t2456 * t2863;
t3519 = t2457 * t3693;
t3518 = t2457 * t2847;
t3517 = t2457 * t2855;
t3516 = t2457 * t2869;
t3514 = t2457 * t2883;
t3513 = t2457 * t2892;
t3512 = t2458 * t3692;
t3511 = t2458 * t2847;
t3510 = t2458 * t2859;
t3509 = t2458 * t2869;
t3507 = t2458 * t2886;
t3506 = t2458 * t2895;
t3505 = t2459 * t3691;
t3504 = t2459 * t2847;
t3503 = t2459 * t2863;
t3502 = t2459 * t2869;
t3500 = t2459 * t2889;
t3499 = t2459 * t2898;
t3492 = t2616 * t2457;
t3491 = t2617 * t2458;
t3490 = t2618 * t2459;
t2686 = t2937 + t3064;
t3480 = t2686 * t2870;
t3475 = t2703 * t2892;
t3473 = t2704 * t2895;
t3471 = t2705 * t2898;
t3470 = t2706 * t2869;
t2328 = t2709 * t2364;
t2329 = t2709 * t2365;
t2330 = t2709 * t2366;
t2388 = t2709 * t2442;
t2389 = t2709 * t2443;
t2390 = t2709 * t2444;
t3457 = t3563 * t2853;
t3456 = t3563 * t2857;
t3455 = t3563 * t2861;
t3454 = t3563 * t2869;
t3453 = t3563 * t2882;
t3452 = t3563 * t2885;
t3451 = t3563 * t2888;
t3443 = t2847 * t2910;
t2852 = t2891 * t2853;
t3441 = t2852 * t2935;
t2856 = t2894 * t2857;
t3440 = t2856 * t2935;
t2868 = t2910 ^ 2;
t3439 = t2868 * t2870;
t3415 = t2882 * t2910;
t3414 = t2883 * t2709;
t3413 = t2883 * t2892;
t3410 = t2885 * t2910;
t3409 = t2886 * t2709;
t3408 = t2886 * t2895;
t3405 = t2888 * t2910;
t3404 = t2889 * t2709;
t3403 = t2889 * t2898;
t3397 = t2910 * t2935;
t2860 = t2897 * t2861;
t3396 = t2935 * t2860;
t3395 = m(3) * t3632;
t2849 = m(3) * t2903;
t2403 = pkin(6) * t3534;
t3365 = t2442 * pkin(7) + t2418;
t3386 = (-t2355 / 0.2e1 + t3365) * t2810 - t3548 / 0.2e1;
t2253 = t2403 + t3386;
t2271 = -t2355 + t3365;
t3246 = t2364 * t2810;
t3078 = t2910 * t3246;
t2999 = t2442 * t2686 - t3078;
t2274 = t2457 * t3480 + t2999;
t2283 = t3534 - t3246;
t2301 = t2400 + t2430;
t2310 = pkin(2) * t2313;
t2334 = pkin(1) * t3550;
t2337 = pkin(1) * t3549;
t2421 = t2442 * t2937;
t2685 = pkin(1) * t3442;
t2638 = t2870 * t2685;
t2933 = pkin(6) ^ 2;
t3354 = pkin(1) ^ 2 + t2933;
t3132 = t2932 + t3354;
t3007 = t2865 + t2931 + t3132;
t2640 = t2935 + t3007;
t2660 = -0.2e1 / 0.3e1 * t3637 - t2931 / 0.3e1 - t2932 / 0.3e1 + t2937;
t2687 = pkin(2) * t2711;
t2721 = pkin(1) * t3400;
t2838 = t2935 + t2937;
t2839 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t2854 = t2892 * t2855;
t2934 = pkin(3) * t2935;
t3254 = pkin(6) * t3442;
t2949 = t2883 * (((t2355 - 0.2e1 * t2418) * pkin(7) + t2421 + pkin(6) * t2349 + t3355 * t2442) * t2810 + t2364 * t3397 + t2442 * t3254) + ((0.2e1 * t2430 + t3667) * t2883 + t2358) * t2781 + t3719 * t2813;
t2972 = t2869 * t3269 - t2883 * t3120 + t2541;
t3133 = -t2933 / 0.2e1 - t2935 / 0.2e1 + t2937 / 0.2e1;
t2976 = t3133 + t3135;
t2977 = t2935 + t3354 - t3659;
t3006 = t3135 + t2838;
t3010 = t2457 * t2737 * t3185;
t3212 = t2737 * t3519;
t3058 = t2910 * t3212;
t3013 = t2846 * t3058;
t3027 = t2718 * t3515 + t2271;
t3044 = t2937 + t3659;
t2683 = -t3442 / 0.2e1;
t3045 = t2869 * t2683;
t3169 = t2457 * t3428;
t3057 = t2737 * t3169;
t3235 = -t2810 / 0.2e1;
t3069 = t2364 * t3235;
t3084 = t2882 * t3282;
t3085 = pkin(1) * t3160;
t3128 = 0.2e1 * t3266;
t3143 = 0.3e1 / 0.2e1 * t2660 * t2910;
t3144 = t2870 * t3630;
t3173 = t2869 * t3447;
t3210 = t2457 * t3447;
t3211 = t2457 * t3463;
t3218 = t2442 * t3436;
t3223 = t2364 * t2813;
t3228 = t3629 * t2910;
t3028 = -t2937 / 0.2e1 + t3140;
t3252 = (pkin(6) * t2418 + pkin(7) * t3362 + t2364 * t3028 + t3386) * t2814;
t3265 = t2277 * t2810;
t3275 = pkin(2) * t3550;
t3276 = t2935 * t3613;
t3307 = 0.2e1 * t3514;
t3308 = 0.2e1 * t3516;
t3325 = 0.2e1 * t2870;
t3348 = 0.2e1 * t2814;
t2223 = (-(t3044 + t2996) * t2854 * t3173 * t3519 + (-0.4e1 * t3013 + (-0.3e1 * (t2660 + t2996) * t2883 * t3169 - 0.2e1 * t3252 + (-0.2e1 * t2253 + t3223) * pkin(2)) * t2847 + ((t2442 * t2965 + t3078) * t3614 + 0.4e1 * t3058) * t2870 + (t2883 * t3143 + t2685 + t2996 * (t2839 * t2883 + pkin(1))) * t3308 - pkin(2) * t3223 + 0.2e1 * t3252 + t2253 * t2929) * t2855 + (t3010 * t3646 + (0.2e1 * (t2976 + t3662) * t3211 + t2949) * t2847 + (-t3010 + ((t3069 + t3534) * t2823 + t2277 * t3235 + t2421 / 0.2e1 + (t2813 / 0.2e1 + t2781 + t3023) * t2442) * t3463) * t3325 + (0.4e1 * t2721 + t2977 + t3681) * t3211 - t2949) * t2892 + 0.2e1 * t3013 + ((t3133 + t3662) * t3103 + (t2337 - t3670) * t2814 + pkin(2) * t2301) * t3443 + (((t2421 - t3265) * t2883 + pkin(1) * t2283) * t2869 - 0.2e1 * t3212 + (t2996 + t3064) * t3218) * t3417 + (t3647 + (t2640 + t3681) * t2883) * t3169 - (t2277 * t2823 - t2910 * t3670) * t2814 - t2301 * t3601) * t2523 * t2936 * t2457 + ((t2853 * t3276 + (t2737 * t3428 + t2775) * t3348 + t2737 * t3128 + t2638) * t3517 + (t2934 * t2313 * t2852 + (t2910 * t3069 + t2442 * t3630 + ((-t2737 * t3609 + t2711) * t2883 + t3144) * t2457) * t3348 + (t2737 * t3045 + t2687) * t3307 + t2274 * pkin(2)) * t2892 + (-t3057 / 0.2e1 + t3687 * pkin(2)) * t3348 + t2274 * t3400 - pkin(2) * t3057 + (t2457 * t3439 + t2999) * pkin(1) + ((-t2457 * t3182 + 0.3e1 * t2310) * t2892 + t3687) * t2813) / ((pkin(3) * t3286 + t2619 * t2883) * t2891 + t2972) * t2442 * t3427 + ((t2882 * t3085 + ((t2778 + t3006) * t2891 + (t2736 + t3594) * pkin(2)) * t3447) * t3517 + ((t2700 * t3210 + t3275) * t3594 + ((t2364 * t2838 - t2810 * t3027) * t2869 + t2703 * pkin(2) * t3210) * t2891 - (t2882 * t3027 - t3600) * t3609 - t2910 * (-t2736 * t3514 * t3629 + t2358 * t3426)) * t2892 + t2334 * t3594 + (t2718 * t2457 * t3228 + (pkin(3) * t3084 + t2700 * t3609) * t2364) * t2891 - (-pkin(3) * t3549 + (t2271 * t2883 + t2700 * t3515 + t2436) * t2882) * t3428 + t3084 * t3612) / ((-pkin(2) * t3282 + t2623 * t2869) * t2891 + t2972) * t2364;
t2397 = t2442 * t3415;
t2286 = t2397 - t3600;
t2289 = -t2403 + t3548;
t2415 = pkin(2) * t2430;
t2918 = pkin(6) / 0.2e1;
t2725 = t2810 + t2918;
t3104 = -0.2e1 * t3209;
t2448 = t2725 * t3104;
t2639 = 0.3e1 * t2935 + t3007;
t3353 = t2937 - t2933;
t2773 = -t2935 + t3353;
t2774 = t2868 + t2937;
t2826 = pkin(1) * t2855;
t2827 = pkin(1) * t2892;
t2840 = -pkin(7) / 0.2e1 - pkin(8) / 0.2e1;
t2930 = -0.2e1 * pkin(1);
t3031 = 0.2e1 * t2854 * t3169;
t2962 = pkin(3) * (pkin(6) * t3104 + t2433) + t3031 * t3607;
t2983 = -pkin(1) * t2815 - t2721 - t2774;
t3238 = pkin(2) * t3413;
t2988 = t2855 * t2910 - t3238;
t3072 = pkin(2) * t3159;
t3075 = pkin(2) * t3169;
t3094 = t2868 * t2442 + t2421;
t3326 = 0.2e1 * t2869;
t3116 = t2457 * t3326;
t3127 = -0.2e1 * t3253;
t3131 = pkin(2) * t3308;
t3134 = t2933 / 0.3e1 - t2937 / 0.3e1 + t2935;
t3153 = ((0.2e1 * t2472 + 0.2e1 * t2473 + 0.2e1 * t2502 - t3517) * t2847 + t2442 * t2870 + t3517 - t2457) * t3441;
t3172 = t2883 * t3442;
t3191 = t2736 * t3492;
t3217 = t2882 * t3535;
t2917 = pkin(6) / 0.3e1;
t3244 = (t2810 + t2917) * t3606;
t3249 = t2364 * t2815;
t3255 = pkin(6) * t3447;
t3261 = t2292 * t3591;
t3272 = t2442 * t3609;
t3283 = pkin(1) * t3428;
t3289 = pkin(1) * t3534;
t3306 = t2457 * t3695;
t3340 = pkin(2) * t3588;
t3343 = pkin(2) * t3584;
t3350 = -0.2e1 * t2837;
t3356 = -0.2e1 / 0.3e1 * t2935 + t3442 / 0.3e1;
t3359 = t2778 + t2935;
t3380 = t2334 + t3713;
t2228 = (t2457 * ((-0.4e1 / 0.3e1 + t2855) * t3441 + ((-0.2e1 / 0.3e1 * t2778 + t3356) * t2855 + 0.2e1 / 0.3e1 * t3072 + 0.4e1 / 0.3e1 * t2778 + t3134) * t2891 + (0.4e1 / 0.3e1 * t3594 - 0.2e1 / 0.3e1 * t2736) * t2616) * t3645 + (t2442 * t2787 * t3441 - (t3558 + (-t2292 * t2883 + t2436) * t2892 + 0.3e1 * t2433 - 0.4e1 * t2737 * t3209) * t3594 + ((-pkin(1) * t2433 + t2457 * t3127) * t2892 + (pkin(6) * t3131 - t3289) * t2883 + t2420 + (-t3561 + (t3031 + (pkin(2) * t3549 - 0.4e1 * t3169) * t2892 + 0.2e1 * (t2358 + t3131) * t2883 + t2430 + t3377) * t2882) * pkin(3) - t3094) * t2891 + ((-t3172 * t3516 - t2415) * t2882 - t3343) * t2855 + ((t2289 * t2883 - 0.2e1 * t3075) * t2882 - t3261) * t2892 + (t2773 * t3209 + t2415) * t2882 + t2962) * t2847 + ((-0.3e1 * t2855 + 0.3e1) * t2457 * t3441 - (t2787 * t2334 + (-t3249 + (-t2430 - t3667) * t2883) * t2869 + ((t3658 + 0.4e1 * t3400) * t2892 + (0.4e1 * t2855 - 0.2e1) * pkin(2)) * t2457) * t3594 + (0.2e1 * (t2683 + t3359) * t3517 + (((pkin(1) * t3535 - t2292) * t2810 + t2289) * t2869 - t2700 * t3713) * t2892 + (t3218 * t2928 - 0.4e1 * t3588) * t2810 + (pkin(6) * t3272 + t2457 * t3350) * t2883 - t2457 * t2639) * t2891 + ((-t2442 * t3283 + 0.2e1 * t3340) * t2882 + pkin(3) * t3380) * t2855 + ((pkin(1) * t3272 + pkin(6) * t3306) * t2882 + pkin(3) * t3306) * t3413 + (-0.2e1 * t3340 + (t2883 * t3094 + t3289) * t2869) * t2882 - pkin(3) * (t2277 * t3436 + t3380)) * t2870 + (-t2855 + 0.1e1) * t2420 * t2852 - (-t3558 - t2433 + (t2292 * t2892 + (t3656 + t2810) * t3516) * t2883) * t3594 + (-t2420 + (t3561 + (-t2364 * t3238 - t2337 + (t2718 * t2892 - t2910 * t2854) * t3116 + t3139) * t2882) * pkin(3)) * t2891 + ((t2415 + (t3172 + t3350) * t3516) * t2882 + t3343) * t2855 + (((pkin(1) * t3131 - t2289) * t2883 + 0.2e1 * t3075) * t2882 + t3261) * t2892 + (-t2415 + (t2640 * t2883 + t3647) * t3516) * t2882 - t2962) / (t2568 + t2869 * (t2581 * t2891 + t3019)) * t2457 + ((-t3153 - ((-t3578 + (-t3400 + pkin(1)) * t2892 + t2928) * t3518 + (t2448 + t2442 * (t2827 + t2929)) * t2870 + (-t3249 - t3719) * t2869 + t3492) * t3594 + (-(t2855 * t3597 - t2983 - t3359) * t3518 + ((((t2823 - t2910) * t2810 - t3585) * t2892 + 0.3e1 * t3244) * t3516 + t2718 * t3246 + t2983 * t2442) * t2870 + (pkin(2) * t2737 * t3535 - pkin(6) * t2283 * t2892) * t2869 + t2457 * t3446 * t3597) * t2891 - t2847 * t3191 - (pkin(1) * t2988 - t2774 * t2883 - t2837) * t3426 * t3516 + t2286 * t2635 * t2869 + t3191) * t2442 + (((pkin(1) * t3217 + t2286) * t2891 - t2364 * (t2827 + pkin(2))) * t2870 + ((t3246 - t2292) * t2883 - t2436 + (t2635 * t2853 + (pkin(6) * t3416 - pkin(2)) * t2892) * t2442) * t2869 + ((-(-t2815 + t2826 + t2930 - t3412) * t3438 - t3255 * t3413) * t2853 + (t2736 * t3163 + ((t2840 * t2855 + t3238 / 0.2e1 + t2718) * t3643 + t2988 - t2718) * t2882) * t2891 + (t2826 - t2700) * t3438 + t3629 * t2737 * t3413) * t2457) * t3600) * t2520;
t2919 = -0.3e1 / 0.2e1 * pkin(2);
t2992 = t2855 * t3442 + t3359;
t3081 = pkin(2) * t3217;
t2232 = ((t2313 * t3441 + 0.2e1 * t2310 * t3594 + (t2774 * t2313 - t3078) * t2891) * t2442 - ((t2313 * t3415 - t3600) * t2891 - t3612) * t3600) * t2517 + ((t3153 + (((t2919 + t2989) * t3644 + 0.2e1 * t3578 + t3475 - pkin(2)) * t3594 + (-(-t2937 + t2992 + 0.2e1 * t3072) * t2847 + pkin(2) * t3475 + t2721 + t2868 + t2992) * t2891 - t2736 * t3663) * t2457 + ((t2448 + 0.2e1 * t2433) * t3594 + (t2442 * t2774 - t3265) * t2891) * t2870) * t2520 + ((-(t2400 + t2277) * t3245 + ((pkin(3) * t2397 - t3548) * t2892 + t3081 * t3657) * t2891 + pkin(2) * (t2286 * t2892 - t3081) + ((0.2e1 * t2725 * t2764 - 0.3e1 * t3244) * t2891 + t2648 * t3607) * t3515) * t2520 + (-(t2853 * t3400 + t2892 * t3693) * t3600 + (t2648 * pkin(2) + ((t2764 - 0.2e1 * t3606) * t2891 - t3245) * pkin(3)) * t3536) * t2517) * t2869) * t2457;
t2298 = -0.2e1 * t3275 + t3622;
t3224 = t2364 * t3457;
t2322 = -0.4e1 * t3224;
t2391 = -0.2e1 * t3537;
t2392 = 0.2e1 * t3537;
t2406 = t2442 * t3564;
t3188 = t2666 * t3436;
t2445 = t2457 * t3188;
t3147 = pkin(2) * t3318;
t2713 = -0.2e1 * t3147;
t3296 = 0.2e1 * t3457;
t2490 = -(t3688 + (t3296 + t3725) * t2883) * t2869 - (t2713 + (-t2695 * t2883 + (t2891 * t3635 - t2641) * t2892) * pkin(1) - t3673) * t2870;
t2975 = t2713 + t2574;
t2529 = t2975 - t3703;
t2587 = t2654 + t3469;
t2712 = 0.2e1 * t3147;
t2956 = -t2770 * t2853 - t3725;
t3002 = t3394 + t3453;
t3059 = t3563 * t3209;
t3034 = -0.4e1 * t3059;
t2664 = t2922 * m(3) - Icges(3,2) / 0.2e1 + Icges(3,3) / 0.2e1 + Icges(3,1) / 0.2e1;
t3299 = t2664 * t3639;
t3311 = 0.2e1 * t3551;
t3324 = m(3) * t3574;
t3332 = 0.2e1 * t2442;
t3392 = t2490 * t2232 + (t2712 + t3673) * t2228 + t2587 * t2223 + (t3005 * t2364 * t3326 + (t2956 * t3438 + t3616 + (-t2529 * t2847 + 0.2e1 * t2891 * t3002 + t2975 + t3712) * t2883) * t2457) * t3513 - (t2322 + (-t2706 * t3209 + t3655 * t3684) * t2891 + t2578 * t3209 + (-pkin(2) * t3324 - t3563) * t3655) * t3515 + (-t2445 + t2392) * t3311 + (t2298 * t3514 * t3635 + (t2882 * t3034 + t3332 * t3684 - t2328) * t2364) * t2891 + (-t2298 * t3318 + t2364 * t3299 + t2457 * t3615) * t3514 + t2364 * ((t2364 * t3568 + t2406) * m(3) - Icges(3,6) * t2364) * t2882 + t2364 * t2391 + (-t3525 + (-t3098 + 0.1e1) * t2454) * t2952;
t2404 = pkin(6) * t3530;
t3364 = pkin(7) * t2443 + t2426;
t3385 = (-t2356 / 0.2e1 + t3364) * t2811 - t3543 / 0.2e1;
t2254 = t2404 + t3385;
t2272 = -t2356 + t3364;
t3243 = t2365 * t2811;
t3077 = t2910 * t3243;
t2998 = t2443 * t2686 - t3077;
t2275 = t2458 * t3480 + t2998;
t2284 = t3530 - t3243;
t2302 = t2401 + t2431;
t2311 = pkin(2) * t2314;
t2335 = pkin(1) * t3545;
t2338 = pkin(1) * t3544;
t2423 = t2443 * t2937;
t2722 = pkin(1) * t3399;
t2858 = t2895 * t2859;
t2948 = t2886 * (((t2356 - 0.2e1 * t2426) * pkin(7) + t2423 + pkin(6) * t2350 + t3355 * t2443) * t2811 + t2365 * t3397 + t2443 * t3254) + ((0.2e1 * t2431 + t3668) * t2886 + t2359) * t2782 + t3718 * t2816;
t2971 = t2869 * t3268 - t2886 * t3119 + t2542;
t3009 = t2458 * t2740 * t3184;
t3207 = t2740 * t3512;
t3054 = t2910 * t3207;
t3012 = t2846 * t3054;
t3026 = t2719 * t3508 + t2272;
t3168 = t2458 * t3428;
t3053 = t2740 * t3168;
t3234 = -t2811 / 0.2e1;
t3068 = t2365 * t3234;
t3083 = t2885 * t3281;
t3205 = t2458 * t3447;
t3206 = t2458 * t3462;
t3216 = t2443 * t3434;
t3221 = t2365 * t2816;
t3251 = (pkin(6) * t2426 + pkin(7) * t3361 + t2365 * t3028 + t3385) * t2817;
t3264 = t2278 * t2811;
t3274 = pkin(2) * t3545;
t3304 = 0.2e1 * t3507;
t3305 = 0.2e1 * t3509;
t3347 = 0.2e1 * t2817;
t2224 = (-(t3044 + t2995) * t2858 * t3173 * t3512 + (-0.4e1 * t3012 + (-0.3e1 * (t2660 + t2995) * t2886 * t3168 - 0.2e1 * t3251 + (-0.2e1 * t2254 + t3221) * pkin(2)) * t2847 + ((t2443 * t2964 + t3077) * t3614 + 0.4e1 * t3054) * t2870 + (t2886 * t3143 + t2685 + t2995 * (t2839 * t2886 + pkin(1))) * t3305 - pkin(2) * t3221 + 0.2e1 * t3251 + t2254 * t2929) * t2859 + (t3009 * t3646 + (0.2e1 * (t2976 + t3661) * t3206 + t2948) * t2847 + (-t3009 + ((t3068 + t3530) * t2824 + t2278 * t3234 + t2423 / 0.2e1 + (t2816 / 0.2e1 + t2782 + t3023) * t2443) * t3462) * t3325 + (0.4e1 * t2722 + t2977 + t3680) * t3206 - t2948) * t2895 + 0.2e1 * t3012 + ((t3133 + t3661) * t3101 + (t2338 - t3671) * t2817 + pkin(2) * t2302) * t3443 + (((t2423 - t3264) * t2886 + pkin(1) * t2284) * t2869 - 0.2e1 * t3207 + (t2995 + t3064) * t3216) * t3417 + (t3647 + (t2640 + t3680) * t2886) * t3168 - (t2278 * t2824 - t2910 * t3671) * t2817 - t2302 * t3601) * t2524 * t2936 * t2458 + ((t2857 * t3276 + (t2740 * t3428 + t2775) * t3347 + t2740 * t3128 + t2638) * t3510 + (t2934 * t2314 * t2856 + (t2910 * t3068 + t2443 * t3630 + ((-t2740 * t3609 + t2711) * t2886 + t3144) * t2458) * t3347 + (t2740 * t3045 + t2687) * t3304 + t2275 * pkin(2)) * t2895 + (-t3053 / 0.2e1 + t3686 * pkin(2)) * t3347 + t2275 * t3399 - pkin(2) * t3053 + (t2458 * t3439 + t2998) * pkin(1) + ((-t2458 * t3181 + 0.3e1 * t2311) * t2895 + t3686) * t2816) / ((pkin(3) * t3285 + t2619 * t2886) * t2894 + t2971) * t2443 * t3427 + ((t2885 * t3085 + ((t2779 + t3006) * t2894 + (t2739 + t3593) * pkin(2)) * t3447) * t3510 + ((t2701 * t3205 + t3274) * t3593 + ((t2365 * t2838 - t2811 * t3026) * t2869 + t2704 * pkin(2) * t3205) * t2894 - (t2885 * t3026 - t3599) * t3609 - t2910 * (-t2739 * t3507 * t3629 + t2359 * t3424)) * t2895 + t2335 * t3593 + (t2719 * t2458 * t3228 + (pkin(3) * t3083 + t2701 * t3609) * t2365) * t2894 - (-pkin(3) * t3544 + (t2272 * t2886 + t2701 * t3508 + t2437) * t2885) * t3428 + t3083 * t3611) / ((-pkin(2) * t3281 + t2624 * t2869) * t2894 + t2971) * t2365;
t2398 = t2443 * t3410;
t2287 = t2398 - t3599;
t2290 = -t2404 + t3543;
t2416 = pkin(2) * t2431;
t2727 = t2811 + t2918;
t3102 = -0.2e1 * t3204;
t2449 = t2727 * t3102;
t2828 = pkin(1) * t2859;
t2829 = pkin(1) * t2895;
t3030 = 0.2e1 * t2858 * t3168;
t2961 = pkin(3) * (pkin(6) * t3102 + t2434) + t3030 * t3605;
t2982 = -pkin(1) * t2818 - t2722 - t2774;
t3237 = pkin(2) * t3408;
t2986 = t2859 * t2910 - t3237;
t3071 = pkin(2) * t3157;
t3074 = pkin(2) * t3168;
t3093 = t2868 * t2443 + t2423;
t3115 = t2458 * t3326;
t3130 = pkin(2) * t3305;
t3152 = ((0.2e1 * t2474 + 0.2e1 * t2475 + 0.2e1 * t2503 - t3510) * t2847 + t2443 * t2870 + t3510 - t2458) * t3440;
t3171 = t2886 * t3442;
t3190 = t2739 * t3491;
t3215 = t2885 * t3531;
t3241 = (t2811 + t2917) * t3604;
t3248 = t2365 * t2818;
t3260 = t2293 * t3590;
t3271 = t2443 * t3609;
t3288 = pkin(1) * t3530;
t3303 = t2458 * t3695;
t3339 = pkin(2) * t3587;
t3342 = pkin(2) * t3583;
t3358 = t2779 + t2935;
t3379 = t2335 + t3714;
t2226 = (((-0.4e1 / 0.3e1 + t2859) * t3440 + ((-0.2e1 / 0.3e1 * t2779 + t3356) * t2859 + 0.2e1 / 0.3e1 * t3071 + 0.4e1 / 0.3e1 * t2779 + t3134) * t2894 + (0.4e1 / 0.3e1 * t3593 - 0.2e1 / 0.3e1 * t2739) * t2617) * t2458 * t3645 + (t2443 * t2788 * t3440 - (t3557 + (-t2293 * t2886 + t2437) * t2895 + 0.3e1 * t2434 - 0.4e1 * t2740 * t3204) * t3593 + ((-pkin(1) * t2434 + t2458 * t3127) * t2895 + (pkin(6) * t3130 - t3288) * t2886 + t2422 + (-t3560 + (t3030 + (pkin(2) * t3544 - 0.4e1 * t3168) * t2895 + 0.2e1 * (t2359 + t3130) * t2886 + t2431 + t3376) * t2885) * pkin(3) - t3093) * t2894 + ((-t3171 * t3509 - t2416) * t2885 - t3342) * t2859 + ((t2290 * t2886 - 0.2e1 * t3074) * t2885 - t3260) * t2895 + (t2773 * t3204 + t2416) * t2885 + t2961) * t2847 + ((-0.3e1 * t2859 + 0.3e1) * t2458 * t3440 - (t2788 * t2335 + (-t3248 + (-t2431 - t3668) * t2886) * t2869 + ((t3658 + 0.4e1 * t3399) * t2895 + (0.4e1 * t2859 - 0.2e1) * pkin(2)) * t2458) * t3593 + (0.2e1 * (t2683 + t3358) * t3510 + (((pkin(1) * t3531 - t2293) * t2811 + t2290) * t2869 - t2701 * t3714) * t2895 + (t2928 * t3216 - 0.4e1 * t3587) * t2811 + (pkin(6) * t3271 + t2458 * t3350) * t2886 - t2458 * t2639) * t2894 + ((-t2443 * t3283 + 0.2e1 * t3339) * t2885 + pkin(3) * t3379) * t2859 + ((pkin(1) * t3271 + pkin(6) * t3303) * t2885 + pkin(3) * t3303) * t3408 + (-0.2e1 * t3339 + (t2886 * t3093 + t3288) * t2869) * t2885 - pkin(3) * (t2278 * t3434 + t3379)) * t2870 + (-t2859 + 0.1e1) * t2422 * t2856 - (-t3557 - t2434 + (t2293 * t2895 + (t3656 + t2811) * t3509) * t2886) * t3593 + (-t2422 + (t3560 + (-t2365 * t3237 - t2338 + (t2719 * t2895 - t2910 * t2858) * t3115 + t3138) * t2885) * pkin(3)) * t2894 + ((t2416 + (t3171 + t3350) * t3509) * t2885 + t3342) * t2859 + (((pkin(1) * t3130 - t2290) * t2886 + 0.2e1 * t3074) * t2885 + t3260) * t2895 + (-t2416 + (t2640 * t2886 + t3647) * t3509) * t2885 - t2961) / (t2569 + t2869 * (t2582 * t2894 + t3018)) * t2458 + ((-t3152 - ((-t3577 + (-t3399 + pkin(1)) * t2895 + t2928) * t3511 + (t2449 + t2443 * (t2829 + t2929)) * t2870 + (-t3248 - t3718) * t2869 + t3491) * t3593 + (-(t2859 * t3596 - t2982 - t3358) * t3511 + ((((t2824 - t2910) * t2811 - t3585) * t2895 + 0.3e1 * t3241) * t3509 + t2719 * t3243 + t2982 * t2443) * t2870 + (pkin(2) * t2740 * t3531 - pkin(6) * t2284 * t2895) * t2869 + t2458 * t3445 * t3596) * t2894 - t2847 * t3190 - (pkin(1) * t2986 - t2774 * t2886 - t2837) * t3424 * t3509 + t2287 * t2636 * t2869 + t3190) * t2443 + (((pkin(1) * t3215 + t2287) * t2894 - t2365 * (t2829 + pkin(2))) * t2870 + ((t3243 - t2293) * t2886 - t2437 + (t2636 * t2857 + (pkin(6) * t3411 - pkin(2)) * t2895) * t2443) * t2869 + ((-(-t2818 + t2828 + t2930 - t3407) * t3438 - t3255 * t3408) * t2857 + (t2739 * t3162 + ((t2840 * t2859 + t3237 / 0.2e1 + t2719) * t3643 + t2986 - t2719) * t2885) * t2894 + (t2828 - t2701) * t3438 + t3629 * t2740 * t3408) * t2458) * t3599) * t2521;
t2991 = t2859 * t3442 + t3358;
t3080 = pkin(2) * t3215;
t2233 = ((t2314 * t3440 + 0.2e1 * t2311 * t3593 + (t2774 * t2314 - t3077) * t2894) * t2443 - ((t2314 * t3410 - t3599) * t2894 - t3611) * t3599) * t2518 + ((t3152 + (((t2919 + t2987) * t3644 + 0.2e1 * t3577 + t3473 - pkin(2)) * t3593 + (-(-t2937 + t2991 + 0.2e1 * t3071) * t2847 + pkin(2) * t3473 + t2722 + t2868 + t2991) * t2894 - t2739 * t3663) * t2458 + ((t2449 + 0.2e1 * t2434) * t3593 + (t2443 * t2774 - t3264) * t2894) * t2870) * t2521 + ((-(t2401 + t2278) * t3242 + ((pkin(3) * t2398 - t3543) * t2895 + t3080 * t3657) * t2894 + pkin(2) * (t2287 * t2895 - t3080) + ((0.2e1 * t2727 * t2765 - 0.3e1 * t3241) * t2894 + t2649 * t3605) * t3508) * t2521 + (-(t2857 * t3399 + t2895 * t3692) * t3599 + (t2649 * pkin(2) + ((t2765 - 0.2e1 * t3604) * t2894 - t3242) * pkin(3)) * t3532) * t2518) * t2869) * t2458;
t2299 = -0.2e1 * t3274 + t3621;
t3222 = t2365 * t3456;
t2323 = -0.4e1 * t3222;
t2393 = -0.2e1 * t3533;
t2394 = 0.2e1 * t3533;
t2407 = t2443 * t3564;
t3187 = t2666 * t3434;
t2446 = t2458 * t3187;
t3146 = pkin(2) * t3317;
t2715 = -0.2e1 * t3146;
t3295 = 0.2e1 * t3456;
t2491 = -(t3689 + (t3295 + t3724) * t2886) * t2869 - (t2715 + (-t2695 * t2886 + (t2894 * t3635 - t2642) * t2895) * pkin(1) - t3674) * t2870;
t2974 = t2715 + t2574;
t2530 = t2974 - t3702;
t2588 = t2655 + t3468;
t2714 = 0.2e1 * t3146;
t2955 = -t2770 * t2857 - t3724;
t3001 = t3394 + t3452;
t3055 = t3563 * t3204;
t3033 = -0.4e1 * t3055;
t3310 = 0.2e1 * t3546;
t3323 = m(3) * t3573;
t3331 = 0.2e1 * t2443;
t3391 = t2491 * t2233 + (t2714 + t3674) * t2226 + t2588 * t2224 + (t3004 * t2365 * t3326 + (t2955 * t3438 + t3616 + (-t2530 * t2847 + 0.2e1 * t2894 * t3001 + t2974 + t3711) * t2886) * t2458) * t3506 - (t2323 + (-t2706 * t3204 + t3654 * t3683) * t2894 + t2579 * t3204 + (-pkin(2) * t3323 - t3563) * t3654) * t3508 + (-t2446 + t2394) * t3310 + (t2299 * t3507 * t3635 + (t2885 * t3033 + t3331 * t3683 - t2329) * t2365) * t2894 + (-t2299 * t3317 + t2365 * t3299 + t2458 * t3615) * t3507 + t2365 * ((t2365 * t3568 + t2407) * m(3) - Icges(3,6) * t2365) * t2885 + t2365 * t2393 + (-t3523 + (-t3097 + 0.1e1) * t2455) * t2951;
t2405 = pkin(6) * t3526;
t3363 = pkin(7) * t2444 + t2427;
t3384 = (-t2357 / 0.2e1 + t3363) * t2812 - t3538 / 0.2e1;
t2255 = t2405 + t3384;
t2273 = -t2357 + t3363;
t3240 = t2366 * t2812;
t3076 = t2910 * t3240;
t2997 = t2444 * t2686 - t3076;
t2276 = t2459 * t3480 + t2997;
t2285 = t3526 - t3240;
t2303 = t2402 + t2432;
t2312 = pkin(2) * t2315;
t2336 = pkin(1) * t3540;
t2339 = pkin(1) * t3539;
t2425 = t2444 * t2937;
t2723 = pkin(1) * t3398;
t2862 = t2898 * t2863;
t2947 = t2889 * (((t2357 - 0.2e1 * t2427) * pkin(7) + t2425 + pkin(6) * t2351 + t3355 * t2444) * t2812 + t2366 * t3397 + t2444 * t3254) + ((0.2e1 * t2432 + t3669) * t2889 + t2360) * t2783 + t3717 * t2819;
t2970 = t2869 * t3267 - t2889 * t3118 + t2543;
t3008 = t2459 * t2743 * t3183;
t3202 = t2743 * t3505;
t3050 = t2910 * t3202;
t3011 = t2846 * t3050;
t3025 = t2720 * t3501 + t2273;
t3167 = t2459 * t3428;
t3049 = t2743 * t3167;
t3233 = -t2812 / 0.2e1;
t3067 = t2366 * t3233;
t3082 = t2888 * t3280;
t3200 = t2459 * t3447;
t3201 = t2459 * t3461;
t3214 = t2444 * t3432;
t3219 = t2366 * t2819;
t3250 = (pkin(6) * t2427 + pkin(7) * t3360 + t2366 * t3028 + t3384) * t2820;
t3263 = t2279 * t2812;
t3273 = pkin(2) * t3540;
t3301 = 0.2e1 * t3500;
t3302 = 0.2e1 * t3502;
t3346 = 0.2e1 * t2820;
t2225 = (-(t3044 + t2994) * t2862 * t3173 * t3505 + (-0.4e1 * t3011 + (-0.3e1 * (t2660 + t2994) * t2889 * t3167 - 0.2e1 * t3250 + (-0.2e1 * t2255 + t3219) * pkin(2)) * t2847 + ((t2444 * t2963 + t3076) * t3614 + 0.4e1 * t3050) * t2870 + (t2889 * t3143 + t2685 + t2994 * (t2839 * t2889 + pkin(1))) * t3302 - pkin(2) * t3219 + 0.2e1 * t3250 + t2255 * t2929) * t2863 + (t3008 * t3646 + (0.2e1 * (t2976 + t3660) * t3201 + t2947) * t2847 + (-t3008 + ((t3067 + t3526) * t2825 + t2279 * t3233 + t2425 / 0.2e1 + (t2819 / 0.2e1 + t2783 + t3023) * t2444) * t3461) * t3325 + (0.4e1 * t2723 + t2977 + t3679) * t3201 - t2947) * t2898 + 0.2e1 * t3011 + ((t3133 + t3660) * t3099 + (t2339 - t3672) * t2820 + pkin(2) * t2303) * t3443 + (((t2425 - t3263) * t2889 + pkin(1) * t2285) * t2869 - 0.2e1 * t3202 + (t2994 + t3064) * t3214) * t3417 + (t3647 + (t2640 + t3679) * t2889) * t3167 - (t2279 * t2825 - t2910 * t3672) * t2820 - t2303 * t3601) * t2525 * t2936 * t2459 + ((t2861 * t3276 + (t2743 * t3428 + t2775) * t3346 + t2743 * t3128 + t2638) * t3503 + (t2934 * t2315 * t2860 + (t2910 * t3067 + t2444 * t3630 + ((-t2743 * t3609 + t2711) * t2889 + t3144) * t2459) * t3346 + (t2743 * t3045 + t2687) * t3301 + t2276 * pkin(2)) * t2898 + (-t3049 / 0.2e1 + t3685 * pkin(2)) * t3346 + t2276 * t3398 - pkin(2) * t3049 + (t2459 * t3439 + t2997) * pkin(1) + ((-t2459 * t3180 + 0.3e1 * t2312) * t2898 + t3685) * t2819) / ((pkin(3) * t3284 + t2619 * t2889) * t2897 + t2970) * t2444 * t3427 + ((t2888 * t3085 + ((t2780 + t3006) * t2897 + (t2742 + t3592) * pkin(2)) * t3447) * t3503 + ((t2702 * t3200 + t3273) * t3592 + ((t2366 * t2838 - t2812 * t3025) * t2869 + t2705 * pkin(2) * t3200) * t2897 - (t2888 * t3025 - t3598) * t3609 - (-t2742 * t3500 * t3629 + t2360 * t3422) * t2910) * t2898 + t2336 * t3592 + (t2720 * t2459 * t3228 + (pkin(3) * t3082 + t2702 * t3609) * t2366) * t2897 - (-pkin(3) * t3539 + (t2273 * t2889 + t2702 * t3501 + t2438) * t2888) * t3428 + t3082 * t3610) / ((-pkin(2) * t3280 + t2625 * t2869) * t2897 + t2970) * t2366;
t2399 = t2444 * t3405;
t2288 = t2399 - t3598;
t2291 = -t2405 + t3538;
t2417 = pkin(2) * t2432;
t2729 = t2812 + t2918;
t3100 = -0.2e1 * t3199;
t2450 = t2729 * t3100;
t2822 = t2898 * pkin(1);
t2830 = pkin(1) * t2863;
t3029 = 0.2e1 * t2862 * t3167;
t2960 = pkin(3) * (pkin(6) * t3100 + t2435) + t3029 * t3603;
t2981 = -pkin(1) * t2821 - t2723 - t2774;
t3236 = pkin(2) * t3403;
t2984 = t2863 * t2910 - t3236;
t3070 = pkin(2) * t3155;
t3073 = pkin(2) * t3167;
t3092 = t2868 * t2444 + t2425;
t3114 = t2459 * t3326;
t3129 = pkin(2) * t3302;
t3151 = ((0.2e1 * t2476 + 0.2e1 * t2477 + 0.2e1 * t2504 - t3503) * t2847 + t2444 * t2870 + t3503 - t2459) * t3396;
t3170 = t2889 * t3442;
t3189 = t2742 * t3490;
t3213 = t2888 * t3527;
t3239 = (t2812 + t2917) * t3602;
t3247 = t2366 * t2821;
t3259 = t2294 * t3589;
t3270 = t2444 * t3609;
t3287 = pkin(1) * t3526;
t3300 = t2459 * t3695;
t3338 = pkin(2) * t3586;
t3341 = pkin(2) * t3582;
t3357 = t2780 + t2935;
t3378 = t2336 + t3715;
t2227 = (((-0.4e1 / 0.3e1 + t2863) * t3396 + ((-0.2e1 / 0.3e1 * t2780 + t3356) * t2863 + 0.2e1 / 0.3e1 * t3070 + 0.4e1 / 0.3e1 * t2780 + t3134) * t2897 + (0.4e1 / 0.3e1 * t3592 - 0.2e1 / 0.3e1 * t2742) * t2618) * t2459 * t3645 + (t2444 * t2789 * t3396 - (t3556 + (-t2294 * t2889 + t2438) * t2898 + 0.3e1 * t2435 - 0.4e1 * t2743 * t3199) * t3592 + ((-pkin(1) * t2435 + t2459 * t3127) * t2898 + (pkin(6) * t3129 - t3287) * t2889 + t2424 + (-t3559 + (t3029 + (pkin(2) * t3539 - 0.4e1 * t3167) * t2898 + 0.2e1 * (t2360 + t3129) * t2889 + t2432 + t3375) * t2888) * pkin(3) - t3092) * t2897 + ((-t3170 * t3502 - t2417) * t2888 - t3341) * t2863 + ((t2291 * t2889 - 0.2e1 * t3073) * t2888 - t3259) * t2898 + (t2773 * t3199 + t2417) * t2888 + t2960) * t2847 + ((-0.3e1 * t2863 + 0.3e1) * t2459 * t3396 - (t2789 * t2336 + (-t3247 + (-t2432 - t3669) * t2889) * t2869 + ((t3658 + 0.4e1 * t3398) * t2898 + (0.4e1 * t2863 - 0.2e1) * pkin(2)) * t2459) * t3592 + (0.2e1 * (t2683 + t3357) * t3503 + (((pkin(1) * t3527 - t2294) * t2812 + t2291) * t2869 - t2702 * t3715) * t2898 + (t2928 * t3214 - 0.4e1 * t3586) * t2812 + (pkin(6) * t3270 + t2459 * t3350) * t2889 - t2459 * t2639) * t2897 + ((-t2444 * t3283 + 0.2e1 * t3338) * t2888 + pkin(3) * t3378) * t2863 + ((pkin(1) * t3270 + pkin(6) * t3300) * t2888 + pkin(3) * t3300) * t3403 + (-0.2e1 * t3338 + (t2889 * t3092 + t3287) * t2869) * t2888 - pkin(3) * (t2279 * t3432 + t3378)) * t2870 + (-t2863 + 0.1e1) * t2424 * t2860 - (-t3556 - t2435 + (t2294 * t2898 + (t3656 + t2812) * t3502) * t2889) * t3592 + (-t2424 + (t3559 + (-t2366 * t3236 - t2339 + (t2720 * t2898 - t2910 * t2862) * t3114 + t3137) * t2888) * pkin(3)) * t2897 + ((t2417 + (t3170 + t3350) * t3502) * t2888 + t3341) * t2863 + (((pkin(1) * t3129 - t2291) * t2889 + 0.2e1 * t3073) * t2888 + t3259) * t2898 + (-t2417 + (t2640 * t2889 + t3647) * t3502) * t2888 - t2960) / (t2570 + t2869 * (t2583 * t2897 + t3017)) * t2459 + ((-t3151 - ((-t3576 + (-t3398 + pkin(1)) * t2898 + t2928) * t3504 + (t2450 + t2444 * (t2822 + t2929)) * t2870 + (-t3247 - t3717) * t2869 + t3490) * t3592 + (-(t2863 * t3595 - t2981 - t3357) * t3504 + ((((t2825 - t2910) * t2812 - t3585) * t2898 + 0.3e1 * t3239) * t3502 + t2720 * t3240 + t2981 * t2444) * t2870 + (pkin(2) * t2743 * t3527 - pkin(6) * t2285 * t2898) * t2869 + t2459 * t3444 * t3595) * t2897 - t2847 * t3189 - (pkin(1) * t2984 - t2774 * t2889 - t2837) * t3422 * t3502 + t2288 * t2637 * t2869 + t3189) * t2444 + (((pkin(1) * t3213 + t2288) * t2897 - t2366 * (t2822 + pkin(2))) * t2870 + ((t3240 - t2294) * t2889 - t2438 + (t2637 * t2861 + (pkin(6) * t3406 - pkin(2)) * t2898) * t2444) * t2869 + ((-(-t2821 + t2830 + t2930 - t3402) * t3438 - t3255 * t3403) * t2861 + (t2742 * t3161 + ((t2840 * t2863 + t3236 / 0.2e1 + t2720) * t3643 + t2984 - t2720) * t2888) * t2897 + (t2830 - t2702) * t3438 + t3629 * t2743 * t3403) * t2459) * t3598) * t2522;
t2990 = t2863 * t3442 + t3357;
t3079 = pkin(2) * t3213;
t2234 = ((t2315 * t3396 + 0.2e1 * t2312 * t3592 + (t2774 * t2315 - t3076) * t2897) * t2444 - ((t2315 * t3405 - t3598) * t2897 - t3610) * t3598) * t2519 + ((t3151 + (((t2919 + t2985) * t3644 + 0.2e1 * t3576 + t3471 - pkin(2)) * t3592 + (-(-t2937 + t2990 + 0.2e1 * t3070) * t2847 + pkin(2) * t3471 + t2723 + t2868 + t2990) * t2897 - t2742 * t3663) * t2459 + ((t2450 + 0.2e1 * t2435) * t3592 + (t2444 * t2774 - t3263) * t2897) * t2870) * t2522 + ((-(t2402 + t2279) * t3262 + ((pkin(3) * t2399 - t3538) * t2898 + t3079 * t3657) * t2897 + pkin(2) * (t2288 * t2898 - t3079) + ((0.2e1 * t2729 * t2766 - 0.3e1 * t3239) * t2897 + t2650 * t3603) * t3501) * t2522 + (-(t2861 * t3398 + t2898 * t3691) * t3598 + (t2650 * pkin(2) + ((t2766 - 0.2e1 * t3602) * t2897 - t3262) * pkin(3)) * t3528) * t2519) * t2869) * t2459;
t2300 = -0.2e1 * t3273 + t3620;
t3220 = t2366 * t3455;
t2324 = -0.4e1 * t3220;
t2395 = -0.2e1 * t3529;
t2396 = 0.2e1 * t3529;
t2408 = t2444 * t3564;
t3186 = t2666 * t3432;
t2447 = t2459 * t3186;
t3145 = pkin(2) * t3316;
t2717 = -0.2e1 * t3145;
t3294 = 0.2e1 * t3455;
t2492 = -(t3690 + (t3294 + t3723) * t2889) * t2869 - (t2717 + (-t2695 * t2889 + (t2897 * t3635 - t2643) * t2898) * pkin(1) - t3675) * t2870;
t2973 = t2717 + t2574;
t2531 = t2973 - t3701;
t2589 = t2656 + t3467;
t2716 = 0.2e1 * t3145;
t2954 = -t2770 * t2861 - t3723;
t3000 = t3394 + t3451;
t3051 = t3563 * t3199;
t3032 = -0.4e1 * t3051;
t3309 = 0.2e1 * t3541;
t3322 = m(3) * t3572;
t3330 = 0.2e1 * t2444;
t3390 = t2492 * t2234 + (t2716 + t3675) * t2227 + t2589 * t2225 + (t3003 * t2366 * t3326 + (t2954 * t3438 + t3616 + (-t2531 * t2847 + 0.2e1 * t2897 * t3000 + t2973 + t3710) * t2889) * t2459) * t3499 - (t2324 + (-t2706 * t3199 + t3653 * t3682) * t2897 + t2580 * t3199 + (-pkin(2) * t3322 - t3563) * t3653) * t3501 + (-t2447 + t2396) * t3309 + (t2300 * t3500 * t3635 + (t2888 * t3032 + t3330 * t3682 - t2330) * t2366) * t2897 + (-t2300 * t3316 + t2366 * t3299 + t2459 * t3615) * t3500 + t2366 * ((t2366 * t3568 + t2408) * m(3) - Icges(3,6) * t2366) * t2888 + t2366 * t2395 + (-t3521 + (-t3096 + 0.1e1) * t2456) * t2950;
t2439 = t2442 ^ 2;
t2651 = t2706 * t2883;
t2688 = (t2922 + t2924) * m(3) + Icges(3,3);
t2731 = t2904 + t3633;
t2734 = t2905 - t3632;
t2508 = -((-t3414 - m(3) * (t2731 * t2892 + t2903)) * t2891 + (t2651 + m(3) * (t2734 * t2892 + t2902)) * t2882 - t2688 * t2892) * t2869 + t2870 * (-t2882 * Icges(3,5) - Icges(3,6) * t2891 + t3664 * m(3) * (t2900 + t2823));
t2848 = m(3) * t2902;
t3063 = t2442 * t3209;
t3039 = 0.2e1 * t3063;
t3040 = -0.2e1 * t3063;
t3060 = t2666 * t3209;
t3117 = t3629 * t2905;
t3208 = t2457 * t3431;
t3297 = t2709 * t3639;
t3298 = 0.2e1 * t3470;
t3315 = rSges(3,2) * t2433;
t3389 = -t2223 * t2688 + t2228 * t2587 + t2232 * t2508 + (0.2e1 * (t2391 + t3060) * t3515 + t2666 * t3039) * t2853 + (-(t2709 * t3208 - m(3) * (t2732 * t3209 + 0.2e1 * t3315)) * t3515 + (t2442 * t3297 + t2457 * (t2651 + t2848)) * t3513 - m(3) * (-t2439 * t2905 + t3040 * t3633) + (-(t2666 * t3450 + t2706 * t3413 - t2698) * t2847 + t2855 * t3709 + (-t2855 * t3117 - t3632) * m(3)) * t2454) * t2891 + (-t3060 + t2392) * t3515 + t2664 * t3039 + ((-(t2442 * t3649 + t3034) * t3515 + 0.4e1 * t2442 * t3059 - t2666 * t3555) * t2891 - (t2709 * t3413 + (rSges(3,1) * t3578 - t2732) * m(3)) * t3525 + (t2706 * t3208 - m(3) * (t2733 * t3209 + t2406)) * t3515 + (t2442 * t3298 + t2457 * (t2849 + t3414)) * t3513 + (t2454 * t2904 + (rSges(3,2) * t3040 + (t2439 + t3524) * rSges(3,1)) * pkin(2)) * m(3)) * t2882 - ((t2454 * t3088 - t3555) * t3642 + t2787 * t3525 - t3524 + t3555) * t3563;
t2440 = t2443 ^ 2;
t2652 = t2706 * t2886;
t2509 = -((-t3409 - m(3) * (t2731 * t2895 + t2903)) * t2894 + (t2652 + m(3) * (t2734 * t2895 + t2902)) * t2885 - t2688 * t2895) * t2869 + t2870 * (-t2885 * Icges(3,5) - Icges(3,6) * t2894 + t3665 * m(3) * (t2900 + t2824));
t3062 = t2443 * t3204;
t3037 = 0.2e1 * t3062;
t3038 = -0.2e1 * t3062;
t3056 = t2666 * t3204;
t3203 = t2458 * t3430;
t3314 = rSges(3,2) * t2434;
t3388 = -t2224 * t2688 + t2226 * t2588 + t2233 * t2509 + (0.2e1 * (t2393 + t3056) * t3508 + t2666 * t3037) * t2857 + (-(t2709 * t3203 - m(3) * (t2732 * t3204 + 0.2e1 * t3314)) * t3508 + (t2443 * t3297 + t2458 * (t2652 + t2848)) * t3506 - m(3) * (-t2440 * t2905 + t3038 * t3633) + (-(t2666 * t3449 + t2706 * t3408 - t2698) * t2847 + t2859 * t3708 + (-t2859 * t3117 - t3632) * m(3)) * t2455) * t2894 + (-t3056 + t2394) * t3508 + t2664 * t3037 + ((-(t2443 * t3649 + t3033) * t3508 + 0.4e1 * t2443 * t3055 - t2666 * t3554) * t2894 - (t2709 * t3408 + (rSges(3,1) * t3577 - t2732) * m(3)) * t3523 + (t2706 * t3203 - m(3) * (t2733 * t3204 + t2407)) * t3508 + (t2443 * t3298 + t2458 * (t2849 + t3409)) * t3506 + (t2455 * t2904 + (rSges(3,2) * t3038 + (t2440 + t3522) * rSges(3,1)) * pkin(2)) * m(3)) * t2885 - ((t2455 * t3087 - t3554) * t3641 + t2788 * t3523 - t3522 + t3554) * t3563;
t2441 = t2444 ^ 2;
t2653 = t2706 * t2889;
t2510 = -((-t3404 - m(3) * (t2731 * t2898 + t2903)) * t2897 + (t2653 + m(3) * (t2734 * t2898 + t2902)) * t2888 - t2688 * t2898) * t2869 + t2870 * (-t2888 * Icges(3,5) - Icges(3,6) * t2897 + t3666 * m(3) * (t2900 + t2825));
t3061 = t2444 * t3199;
t3035 = 0.2e1 * t3061;
t3036 = -0.2e1 * t3061;
t3052 = t2666 * t3199;
t3198 = t2459 * t3429;
t3313 = rSges(3,2) * t2435;
t3387 = -t2225 * t2688 + t2227 * t2589 + t2234 * t2510 + (0.2e1 * (t2395 + t3052) * t3501 + t2666 * t3035) * t2861 + (-(t2709 * t3198 - m(3) * (t2732 * t3199 + 0.2e1 * t3313)) * t3501 + (t2444 * t3297 + t2459 * (t2653 + t2848)) * t3499 - m(3) * (-t2441 * t2905 + t3036 * t3633) + (-(t2666 * t3448 + t2706 * t3403 - t2698) * t2847 + t2863 * t3707 + (-t2863 * t3117 - t3632) * m(3)) * t2456) * t2897 + (-t3052 + t2396) * t3501 + t2664 * t3035 + ((-(t2444 * t3649 + t3032) * t3501 + 0.4e1 * t2444 * t3051 - t2666 * t3553) * t2897 - (t2709 * t3403 + (rSges(3,1) * t3576 - t2732) * m(3)) * t3521 + (t2706 * t3198 - m(3) * (t2733 * t3199 + t2408)) * t3501 + (t2444 * t3298 + t2459 * (t2849 + t3404)) * t3499 + (t2456 * t2904 + (rSges(3,2) * t3036 + (t2441 + t3520) * rSges(3,1)) * pkin(2)) * m(3)) * t2888 - ((t2456 * t3086 - t3553) * t3640 + t2789 * t3521 - t3520 + t3553) * t3563;
t3150 = m(3) * t3315;
t3383 = (t2328 - 0.2e1 * t3150) * t2882 + t2442 * t2574;
t3149 = m(3) * t3314;
t3382 = (t2329 - 0.2e1 * t3149) * t2885 + t2443 * t2574;
t3148 = m(3) * t3313;
t3381 = (t2330 - 0.2e1 * t3148) * t2888 + t2444 * t2574;
t2361 = t2364 ^ 2;
t3374 = t2361 - t2439;
t2362 = t2365 ^ 2;
t3373 = t2362 - t2440;
t2363 = t2366 ^ 2;
t3372 = t2363 - t2441;
t3371 = t2364 * t2698 - t2388;
t3370 = t2365 * t2698 - t2389;
t3369 = t2366 * t2698 - t2390;
t3352 = -0.2e1 * t2698;
t3351 = 0.2e1 * t3616;
t3345 = m(3) * t3614;
t3333 = t2912 / 0.2e1;
t3321 = t2364 * t3634;
t3320 = t2365 * t3634;
t3319 = t2366 * t3634;
t3293 = 0.2e1 * t3438;
t3292 = -0.2e1 * t3395;
t3291 = 0.2e1 * t3395;
t3290 = -0.2e1 * t2849;
t2806 = t2904 * t3562;
t3142 = rSges(3,1) * t3333;
t3141 = rSges(3,2) * t3333;
t3136 = 0.2e1 * t2644;
t3123 = t2361 * t3345;
t3122 = t2362 * t3345;
t3121 = t2363 * t3345;
t3113 = t2526 * t3392;
t2325 = t2706 * t2364;
t2265 = t3002 * t3332 + t2325;
t2295 = t2439 + t2361;
t2370 = t3699 * t2442;
t2373 = t2442 * t3709;
t2376 = t2644 * t2442;
t2382 = t2442 * t2695;
t2385 = t2706 * t2442;
t2665 = t2802 * t3562 - 0.2e1 * Icges(3,1) + 0.2e1 * Icges(3,2);
t2684 = 0.2e1 * t3627;
t2707 = 0.2e1 * t2706;
t2708 = 0.2e1 * t2709;
t2710 = -0.2e1 * m(3) * t2924 - Icges(3,3) - t3565;
t2772 = 0.4e1 * t3563;
t2808 = -0.2e1 * t3394;
t2809 = 0.2e1 * t2849;
t2953 = -(rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) - (t2923 + (t3656 + rSges(2,3)) * rSges(2,3) + t3354) * m(2) - (t2924 + (0.2e1 * pkin(7) + rSges(3,3)) * rSges(3,3) + t3132) * m(3) - Icges(1,3) - t3567;
t2966 = -(rSges(2,1) + t2901) * (-rSges(2,1) + t2901) * m(2) - Icges(2,1) + Icges(2,3) + (t3353 - t2802) * m(3) - t3565;
t3112 = ((-((-t3712 + (-t3460 + t2808) * t2891 + t2712 - t2574) * t2855 - 0.2e1 * t2952 * t3413 + t2665 * t2853 + (t2772 * t2882 + t2684) * t2891 + t2882 * t3352 + t2966) * t2847 + (t2883 * t2956 - t3688) * t3293 - t2529 * t2855 - ((t2708 * t2883 + t2809) * t2891 + (-t2707 * t2882 + t3136) * t2883 - 0.2e1 * t3619) * t2892 + t3712 - (-t3460 + t2806) * t2891 + t2883 * t3351 + t2882 * t3292 + t2953) * t2232 + t2490 * t2228 + t2508 * t2223 + 0.4e1 * t2457 * (-t3224 + (-t2388 + (t3709 / 0.2e1 + t3141) * t2364) * t2891 + (t2364 * t3142 + t2385) * t2882 - t2376 + t3552 / 0.2e1) * t3176 + ((t2265 * t2891 + t2442 * t3712 + t3383) * t2847 * t3307 + ((-t2364 * t3562 * t3664 - t2382) * t2436 + ((t2328 - t2373) * t2891 - t2325 * t2882 + (-t2698 * t2891 - t3627 * t2882 + t3296 + t3700) * t2442) * t3116) * t2870 + t2442 * (t2442 * t3454 - t2666 * t3514) * t3642 + ((-t2439 * t3709 - (-t2361 * t2734 + t2439 * t2733) * m(3)) * t2869 + (-pkin(1) * t3321 - t2265 * t2883) * t3698) * t2891 - 0.2e1 * t3383 * t3514 + ((t2361 * t2731 - t2439 * t2732) * t3626 + t2439 * t3700) * t2869 - 0.2e1 * (t2364 * t3324 + t2382) * t3622) * t2892 - 0.2e1 * (t2322 + (-t3655 * t3709 + t3371) * t2891 + (t2364 * t3627 + t2385) * t2882 - t2376 + 0.2e1 * t3552) * t3518 + (0.4e1 * (-t2445 + t3537) * t3551 + ((-0.2e1 * (t2385 + (0.4e1 * t3453 + t3627) * t2364) * t3516 - t2295 * t2849) * t2883 + 0.2e1 * (-t2373 - t3150 - t2328 / 0.2e1) * t2364) * t2891 + ((t2364 * t2666 + t2882 * t3371 + t2370) * t3308 - pkin(1) * (-t2295 * t3318 + t2439 * t2735)) * t2883 + ((m(3) * t2406 + t2325) * t2882 + t2391) * t2364) * t2870 + (-t2442 * t3188 + t2457 * t3648) * t3311 + ((t3374 * t3470 + (t2457 * t3290 + (t2806 - 0.4e1 * t3453) * t3550) * t2442) * t2883 + rSges(3,2) * t3123 - 0.2e1 * t2457 * (t2388 + (-t3395 - t3709) * t2364)) * t2891 + (((t2364 * t2442 * t3291 + t2709 * t3374) * t2882 + t2442 * (-t2364 * t2710 + t2370)) * t2869 + t2442 * t3619 * t3698) * t2883 + t3123 * t3574 + ((-pkin(6) * t3321 + t2385) * t2882 - t2376 + t3552) * t3698) * t2520;
t2326 = t2706 * t2365;
t2266 = t3001 * t3331 + t2326;
t2296 = t2440 + t2362;
t2371 = t3699 * t2443;
t2374 = t2443 * t3708;
t2377 = t2644 * t2443;
t2383 = t2443 * t2695;
t2386 = t2706 * t2443;
t3111 = ((-((-t3711 + (-t3459 + t2808) * t2894 + t2714 - t2574) * t2859 - 0.2e1 * t2951 * t3408 + t2665 * t2857 + (t2772 * t2885 + t2684) * t2894 + t2885 * t3352 + t2966) * t2847 + (t2886 * t2955 - t3689) * t3293 - t2530 * t2859 - ((t2708 * t2886 + t2809) * t2894 + (-t2707 * t2885 + t3136) * t2886 - 0.2e1 * t3618) * t2895 + t3711 - (-t3459 + t2806) * t2894 + t2886 * t3351 + t2885 * t3292 + t2953) * t2233 + t2491 * t2226 + t2509 * t2224 + 0.4e1 * t2458 * (-t3222 + (-t2389 + (t3708 / 0.2e1 + t3141) * t2365) * t2894 + (t2365 * t3142 + t2386) * t2885 - t2377 + t3547 / 0.2e1) * t3175 + ((t2266 * t2894 + t2443 * t3711 + t3382) * t2847 * t3304 + ((-t2365 * t3562 * t3665 - t2383) * t2437 + ((t2329 - t2374) * t2894 - t2326 * t2885 + (-t2698 * t2894 - t3627 * t2885 + t3295 + t3700) * t2443) * t3115) * t2870 + t2443 * (t2443 * t3454 - t2666 * t3507) * t3641 + ((-t2440 * t3708 - (-t2362 * t2734 + t2440 * t2733) * m(3)) * t2869 + (-pkin(1) * t3320 - t2266 * t2886) * t3697) * t2894 - 0.2e1 * t3382 * t3507 + ((t2362 * t2731 - t2440 * t2732) * t3625 + t2440 * t3700) * t2869 - 0.2e1 * (t2365 * t3323 + t2383) * t3621) * t2895 - 0.2e1 * (t2323 + (-t3654 * t3708 + t3370) * t2894 + (t2365 * t3627 + t2386) * t2885 - t2377 + 0.2e1 * t3547) * t3511 + (0.4e1 * (-t2446 + t3533) * t3546 + ((-0.2e1 * (t2386 + (0.4e1 * t3452 + t3627) * t2365) * t3509 - t2296 * t2849) * t2886 + 0.2e1 * (-t2374 - t3149 - t2329 / 0.2e1) * t2365) * t2894 + ((t2365 * t2666 + t2885 * t3370 + t2371) * t3305 - pkin(1) * (-t2296 * t3317 + t2440 * t2735)) * t2886 + ((m(3) * t2407 + t2326) * t2885 + t2393) * t2365) * t2870 + (-t2443 * t3187 + t2458 * t3648) * t3310 + ((t3373 * t3470 + (t2458 * t3290 + (t2806 - 0.4e1 * t3452) * t3545) * t2443) * t2886 + rSges(3,2) * t3122 - 0.2e1 * t2458 * (t2389 + (-t3395 - t3708) * t2365)) * t2894 + (((t2365 * t2443 * t3291 + t2709 * t3373) * t2885 + t2443 * (-t2365 * t2710 + t2371)) * t2869 + t2443 * t3618 * t3697) * t2886 + t3122 * t3573 + ((-pkin(6) * t3320 + t2386) * t2885 - t2377 + t3547) * t3697) * t2521;
t2327 = t2706 * t2366;
t2267 = t3000 * t3330 + t2327;
t2297 = t2441 + t2363;
t2372 = t3699 * t2444;
t2375 = t2444 * t3707;
t2378 = t2644 * t2444;
t2384 = t2444 * t2695;
t2387 = t2706 * t2444;
t3110 = ((-((-t3710 + (-t3458 + t2808) * t2897 + t2716 - t2574) * t2863 - 0.2e1 * t2950 * t3403 + t2665 * t2861 + (t2772 * t2888 + t2684) * t2897 + t2888 * t3352 + t2966) * t2847 + (t2889 * t2954 - t3690) * t3293 - t2531 * t2863 - ((t2708 * t2889 + t2809) * t2897 + (-t2707 * t2888 + t3136) * t2889 - 0.2e1 * t3617) * t2898 + t3710 - (-t3458 + t2806) * t2897 + t2889 * t3351 + t2888 * t3292 + t2953) * t2234 + t2492 * t2227 + t2510 * t2225 + 0.4e1 * t2459 * (-t3220 + (-t2390 + (t3707 / 0.2e1 + t3141) * t2366) * t2897 + (t2366 * t3142 + t2387) * t2888 - t2378 + t3542 / 0.2e1) * t3174 + ((t2267 * t2897 + t2444 * t3710 + t3381) * t2847 * t3301 + ((-t2366 * t3562 * t3666 - t2384) * t2438 + ((t2330 - t2375) * t2897 - t2327 * t2888 + (-t2698 * t2897 - t3627 * t2888 + t3294 + t3700) * t2444) * t3114) * t2870 + t2444 * (t2444 * t3454 - t2666 * t3500) * t3640 + ((-t2441 * t3707 - (-t2363 * t2734 + t2441 * t2733) * m(3)) * t2869 + (-pkin(1) * t3319 - t2267 * t2889) * t3696) * t2897 - 0.2e1 * t3381 * t3500 + ((t2363 * t2731 - t2441 * t2732) * t3624 + t2441 * t3700) * t2869 - 0.2e1 * (t2366 * t3322 + t2384) * t3620) * t2898 - 0.2e1 * (t2324 + (-t3653 * t3707 + t3369) * t2897 + (t2366 * t3627 + t2387) * t2888 - t2378 + 0.2e1 * t3542) * t3504 + (0.4e1 * (-t2447 + t3529) * t3541 + ((-0.2e1 * (t2387 + (0.4e1 * t3451 + t3627) * t2366) * t3502 - t2297 * t2849) * t2889 + 0.2e1 * (-t2375 - t3148 - t2330 / 0.2e1) * t2366) * t2897 + ((t2366 * t2666 + t2888 * t3369 + t2372) * t3302 - pkin(1) * (-t2297 * t3316 + t2441 * t2735)) * t2889 + ((m(3) * t2408 + t2327) * t2888 + t2395) * t2366) * t2870 + (-t2444 * t3186 + t2459 * t3648) * t3309 + ((t3372 * t3470 + (t2459 * t3290 + (t2806 - 0.4e1 * t3451) * t3540) * t2444) * t2889 + rSges(3,2) * t3121 - 0.2e1 * t2459 * (t2390 + (-t3395 - t3707) * t2366)) * t2897 + (((t2366 * t2444 * t3291 + t2709 * t3372) * t2888 + t2444 * (-t2366 * t2710 + t2372)) * t2869 + t2444 * t3617 * t3696) * t2889 + t3121 * t3572 + ((-pkin(6) * t3319 + t2387) * t2888 - t2378 + t3542) * t3696) * t2522;
t3109 = t3391 * t2527;
t3108 = t3390 * t2528;
t3107 = t3389 * t2511;
t3106 = t3388 * t2512;
t3105 = t3387 * t2513;
t1 = [t2498 * t3110 + t2496 * t3111 + t2494 * t3112 + t2482 * t3108 + t2480 * t3109 + t2478 * t3113 + (-t2466 * t3107 - t2467 * t3106 - t2468 * t3105) * t3427; t2497 * t3110 + t2495 * t3111 + t2493 * t3112 + t2483 * t3108 + t2481 * t3109 + t2479 * t3113 + (-t2469 * t3107 - t2470 * t3106 - t2471 * t3105) * t3427; t2540 * t3110 + t2539 * t3111 + t2538 * t3112 + t3390 * t3493 + t3391 * t3494 + t3392 * t3495 + (t3387 * t3496 + t3388 * t3497 + t3389 * t3498) * t2936;];
taucX  = t1;
