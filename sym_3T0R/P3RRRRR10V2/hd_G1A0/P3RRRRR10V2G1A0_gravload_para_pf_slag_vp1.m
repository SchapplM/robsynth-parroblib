% Calculate Gravitation load for parallel robot
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [3x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-06 23:41:39
% EndTime: 2020-08-06 23:41:44
% DurationCPUTime: 5.70s
% Computational Cost: add. (2319->455), mult. (4194->749), div. (36->16), fcn. (2913->26), ass. (0->271)
t3912 = cos(qJ(3,3));
t3881 = t3912 * pkin(3);
t3851 = t3881 + pkin(2);
t3904 = sin(qJ(2,3));
t4059 = t3851 * t3904;
t3915 = cos(qJ(3,2));
t3883 = t3915 * pkin(3);
t3853 = t3883 + pkin(2);
t3907 = sin(qJ(2,2));
t4058 = t3853 * t3907;
t3918 = cos(qJ(3,1));
t3885 = t3918 * pkin(3);
t3855 = t3885 + pkin(2);
t3910 = sin(qJ(2,1));
t4057 = t3855 * t3910;
t3899 = cos(pkin(4));
t3902 = legFrame(1,3);
t3872 = sin(t3902);
t3875 = cos(t3902);
t3813 = -g(1) * t3872 + g(2) * t3875;
t3816 = g(1) * t3875 + g(2) * t3872;
t3911 = sin(qJ(1,1));
t3920 = cos(qJ(1,1));
t3947 = t3813 * t3920 - t3816 * t3911;
t3898 = sin(pkin(4));
t4043 = g(3) * t3898;
t4056 = t3947 * t3899 + t4043;
t3901 = legFrame(2,3);
t3871 = sin(t3901);
t3874 = cos(t3901);
t3812 = -g(1) * t3871 + g(2) * t3874;
t3815 = g(1) * t3874 + g(2) * t3871;
t3908 = sin(qJ(1,2));
t3917 = cos(qJ(1,2));
t3948 = t3812 * t3917 - t3815 * t3908;
t4055 = t3948 * t3899 + t4043;
t3900 = legFrame(3,3);
t3870 = sin(t3900);
t3873 = cos(t3900);
t3811 = -g(1) * t3870 + g(2) * t3873;
t3814 = g(1) * t3873 + g(2) * t3870;
t3905 = sin(qJ(1,3));
t3914 = cos(qJ(1,3));
t3949 = t3811 * t3914 - t3814 * t3905;
t4054 = t3949 * t3899 + t4043;
t4042 = g(3) * t3899;
t3923 = pkin(8) + pkin(7);
t4053 = m(1) * rSges(1,2);
t4052 = m(3) / pkin(3);
t4051 = pkin(1) * t3899;
t4050 = pkin(2) * t3899;
t3903 = sin(qJ(3,3));
t4049 = pkin(2) * t3903;
t3906 = sin(qJ(3,2));
t4048 = pkin(2) * t3906;
t3909 = sin(qJ(3,1));
t4047 = pkin(2) * t3909;
t3892 = t3912 ^ 2;
t4046 = pkin(3) * t3892;
t3894 = t3915 ^ 2;
t4045 = pkin(3) * t3894;
t3896 = t3918 ^ 2;
t4044 = pkin(3) * t3896;
t3878 = t3903 * pkin(3);
t3879 = t3906 * pkin(3);
t3880 = t3909 * pkin(3);
t3913 = cos(qJ(2,3));
t3882 = t3913 * pkin(2);
t3916 = cos(qJ(2,2));
t3884 = t3916 * pkin(2);
t3919 = cos(qJ(2,1));
t3886 = t3919 * pkin(2);
t3889 = t3899 ^ 2;
t4041 = (t3889 - 0.1e1) * pkin(6);
t4040 = rSges(3,2) * t3898;
t4039 = -0.2e1 * pkin(2) * pkin(3);
t3891 = pkin(2) - t3923;
t3890 = pkin(2) + t3923;
t3860 = t3923 * t3913;
t3824 = -pkin(2) * t3904 + t3860;
t3801 = t3824 * t4051;
t3846 = t3878 - pkin(6);
t3994 = m(2) * rSges(2,1) + pkin(2) * m(3);
t3792 = (rSges(3,1) * t3912 - rSges(3,2) * t3903) * m(3) + t3994;
t3839 = (-pkin(7) - rSges(3,3)) * m(3) + m(2) * rSges(2,2);
t3981 = m(1) * rSges(1,1) + (m(2) + m(3)) * pkin(1);
t3937 = t3792 * t3913 - t3839 * t3904 + t3981;
t3995 = m(2) * (rSges(2,3) + pkin(6)) + pkin(6) * m(3);
t3943 = (t3792 * t3904 + t3839 * t3913) * t3899 - ((rSges(3,1) * t3903 + rSges(3,2) * t3912) * m(3) + t3995) * t3898 + t4053;
t3857 = t3923 * t3904;
t3955 = pkin(1) * t3878 - pkin(6) * t3857;
t3821 = t3882 + t3857;
t3818 = pkin(1) + t3821;
t3984 = t3818 * t4049;
t4012 = t3899 * t3904;
t4015 = t3898 * t3913;
t3958 = -(pkin(1) * t4012 + pkin(6) * t4015) * t4046 + t3898 * t3984;
t4038 = ((t3905 * t3937 + t3943 * t3914) * t3814 + (t3905 * t3943 - t3937 * t3914) * t3811) / (((t3846 * t3882 + t3955) * t3898 + t3801) * t3912 + t3958);
t3861 = t3923 * t3916;
t3825 = -pkin(2) * t3907 + t3861;
t3802 = t3825 * t4051;
t3848 = t3879 - pkin(6);
t3793 = (rSges(3,1) * t3915 - rSges(3,2) * t3906) * m(3) + t3994;
t3936 = t3793 * t3916 - t3839 * t3907 + t3981;
t3942 = (t3793 * t3907 + t3839 * t3916) * t3899 - ((rSges(3,1) * t3906 + rSges(3,2) * t3915) * m(3) + t3995) * t3898 + t4053;
t3858 = t3923 * t3907;
t3954 = pkin(1) * t3879 - pkin(6) * t3858;
t3822 = t3884 + t3858;
t3819 = pkin(1) + t3822;
t3983 = t3819 * t4048;
t4011 = t3899 * t3907;
t4014 = t3898 * t3916;
t3957 = -(pkin(1) * t4011 + pkin(6) * t4014) * t4045 + t3898 * t3983;
t4037 = ((t3908 * t3936 + t3942 * t3917) * t3815 + (t3908 * t3942 - t3936 * t3917) * t3812) / (((t3848 * t3884 + t3954) * t3898 + t3802) * t3915 + t3957);
t3862 = t3923 * t3919;
t3826 = -pkin(2) * t3910 + t3862;
t3803 = t3826 * t4051;
t3850 = t3880 - pkin(6);
t3794 = (rSges(3,1) * t3918 - rSges(3,2) * t3909) * m(3) + t3994;
t3935 = t3794 * t3919 - t3839 * t3910 + t3981;
t3941 = (t3794 * t3910 + t3839 * t3919) * t3899 - ((rSges(3,1) * t3909 + rSges(3,2) * t3918) * m(3) + t3995) * t3898 + t4053;
t3859 = t3923 * t3910;
t3953 = pkin(1) * t3880 - pkin(6) * t3859;
t3823 = t3886 + t3859;
t3820 = pkin(1) + t3823;
t3982 = t3820 * t4047;
t4010 = t3899 * t3910;
t4013 = t3898 * t3919;
t3956 = -(pkin(1) * t4010 + pkin(6) * t4013) * t4044 + t3898 * t3982;
t4036 = ((t3911 * t3935 + t3941 * t3920) * t3816 + (t3911 * t3941 - t3935 * t3920) * t3813) / (((t3850 * t3886 + t3953) * t3898 + t3803) * t3918 + t3956);
t3762 = t3811 * t3905 + t3814 * t3914;
t3817 = t3839 * t4043;
t4001 = t3913 * t3762;
t3732 = t3817 * t3904 + (t3949 * t4012 + t4001) * t3839 + (t3762 * t3904 - t3913 * t4054) * t3792;
t3852 = t3882 + pkin(1);
t3946 = -pkin(6) * t3821 + t3852 * t3878;
t4009 = t3899 * t3912;
t3987 = pkin(1) * t4009;
t3992 = pkin(6) * t4046;
t4035 = t3732 / ((t3860 - t4059) * t3987 + t3898 * (t3946 * t3912 - t3913 * t3992 + t3984));
t3763 = t3812 * t3908 + t3815 * t3917;
t3999 = t3916 * t3763;
t3733 = t3817 * t3907 + (t3948 * t4011 + t3999) * t3839 + (t3763 * t3907 - t3916 * t4055) * t3793;
t3854 = t3884 + pkin(1);
t3945 = -pkin(6) * t3822 + t3854 * t3879;
t4008 = t3899 * t3915;
t3986 = pkin(1) * t4008;
t3991 = pkin(6) * t4045;
t4034 = t3733 / ((t3861 - t4058) * t3986 + t3898 * (t3945 * t3915 - t3916 * t3991 + t3983));
t3764 = t3813 * t3911 + t3816 * t3920;
t3997 = t3919 * t3764;
t3734 = t3817 * t3910 + (t3947 * t4010 + t3997) * t3839 + (t3764 * t3910 - t3919 * t4056) * t3794;
t3856 = t3886 + pkin(1);
t3944 = -pkin(6) * t3823 + t3856 * t3880;
t4007 = t3899 * t3918;
t3985 = pkin(1) * t4007;
t3990 = pkin(6) * t4044;
t4033 = t3734 / ((t3862 - t4057) * t3985 + t3898 * (t3944 * t3918 - t3919 * t3990 + t3982));
t4032 = (pkin(1) + 0.2e1 * t3857) * t3851;
t4031 = (pkin(1) + 0.2e1 * t3858) * t3853;
t4030 = (pkin(1) + 0.2e1 * t3859) * t3855;
t4029 = (t3881 + t3890) * (t3881 + t3891);
t4028 = (t3883 + t3890) * (t3883 + t3891);
t4027 = (t3885 + t3890) * (t3885 + t3891);
t4026 = t3851 * t3898;
t4025 = t3853 * t3898;
t4024 = t3855 * t3898;
t4023 = t3890 * t3891;
t4022 = t3898 * t3899;
t4021 = t3898 * t3903;
t4020 = t3898 * t3904;
t4019 = t3898 * t3906;
t4018 = t3898 * t3907;
t4017 = t3898 * t3909;
t4016 = t3898 * t3910;
t4006 = t3899 * t3923;
t4005 = t3903 * t3899;
t4004 = t3906 * t3899;
t4003 = t3909 * t3899;
t4002 = t3912 * t3913;
t4000 = t3915 * t3916;
t3998 = t3918 * t3919;
t3996 = rSges(3,2) * t4042;
t3993 = pkin(3) * t4051;
t3989 = -0.2e1 * (t3899 + 0.1e1) * (t3899 - 0.1e1);
t3988 = t3898 * t4052;
t3840 = pkin(1) * t4006;
t3980 = t3903 * pkin(6) + pkin(3);
t3979 = t3906 * pkin(6) + pkin(3);
t3978 = t3909 * pkin(6) + pkin(3);
t3977 = t3851 * t4006;
t3976 = t3853 * t4006;
t3975 = t3855 * t4006;
t3974 = t3898 * t4006;
t3973 = t3898 * t4012;
t3972 = t3898 * t4011;
t3971 = t3898 * t4010;
t3795 = t3870 * t3914 + t3873 * t3905;
t3970 = t3795 * t4021;
t3796 = -t3870 * t3905 + t3873 * t3914;
t3969 = t3796 * t4021;
t3968 = t3905 * t4029;
t3797 = t3871 * t3917 + t3874 * t3908;
t3967 = t3797 * t4019;
t3798 = -t3871 * t3908 + t3874 * t3917;
t3966 = t3798 * t4019;
t3965 = t3908 * t4028;
t3799 = t3872 * t3920 + t3875 * t3911;
t3964 = t3799 * t4017;
t3800 = -t3872 * t3911 + t3875 * t3920;
t3963 = t3800 * t4017;
t3962 = t3911 * t4027;
t3961 = t3914 * t3977;
t3960 = t3917 * t3976;
t3959 = t3920 * t3975;
t3931 = t3904 * t4054 + t4001;
t3729 = ((t3949 * t3898 - t4042) * rSges(3,1) + t3931 * rSges(3,2)) * t3912 + t3903 * (t3931 * rSges(3,1) - t3949 * t4040 + t3996);
t3810 = -pkin(6) * t3898 * t3923 - pkin(1) * t4050;
t3928 = pkin(2) ^ 2;
t3952 = t3729 / (t3840 * t4002 + (t3810 * t3912 - t3892 * t3993) * t3904 + ((pkin(2) * t3846 * t3912 - t3992) * t3913 + (pkin(1) * t3851 + pkin(2) * t3857 + t3913 * t3928) * t3903) * t3898) * t3988;
t3930 = t3907 * t4055 + t3999;
t3730 = ((t3948 * t3898 - t4042) * rSges(3,1) + t3930 * rSges(3,2)) * t3915 + t3906 * (t3930 * rSges(3,1) - t3948 * t4040 + t3996);
t3951 = t3730 / (t3840 * t4000 + (t3810 * t3915 - t3894 * t3993) * t3907 + ((pkin(2) * t3848 * t3915 - t3991) * t3916 + (pkin(1) * t3853 + pkin(2) * t3858 + t3916 * t3928) * t3906) * t3898) * t3988;
t3929 = t3910 * t4056 + t3997;
t3731 = ((t3947 * t3898 - t4042) * rSges(3,1) + t3929 * rSges(3,2)) * t3918 + t3909 * (t3929 * rSges(3,1) - t3947 * t4040 + t3996);
t3950 = t3731 / (t3840 * t3998 + (t3810 * t3918 - t3896 * t3993) * t3910 + ((pkin(2) * t3850 * t3918 - t3990) * t3919 + (pkin(1) * t3855 + pkin(2) * t3859 + t3919 * t3928) * t3909) * t3898) * t3988;
t3940 = -(t3852 * t3904 + t3923 + (t3904 * t3881 - t3860) * t3913) * t4021 + (pkin(3) * t4002 + t3818) * t4009;
t3939 = -(t3854 * t3907 + t3923 + (t3907 * t3883 - t3861) * t3916) * t4019 + (pkin(3) * t4000 + t3819) * t4008;
t3938 = -(t3856 * t3910 + t3923 + (t3910 * t3885 - t3862) * t3919) * t4017 + (pkin(3) * t3998 + t3820) * t4007;
t3893 = t3913 ^ 2;
t3807 = pkin(2) * t3893 + t3904 * t3860 - pkin(2);
t3866 = t3893 - 0.2e1;
t3934 = ((t3866 * t3878 - pkin(6)) * t3912 + t3903 * t3807) * t4022 - (t3824 * t3912 + (t3980 - 0.2e1 * t4046) * t3904) * t3889 - t3904 * (-t3980 + t4046);
t3895 = t3916 ^ 2;
t3808 = pkin(2) * t3895 + t3907 * t3861 - pkin(2);
t3867 = t3895 - 0.2e1;
t3933 = ((t3867 * t3879 - pkin(6)) * t3915 + t3906 * t3808) * t4022 - (t3825 * t3915 + (t3979 - 0.2e1 * t4045) * t3907) * t3889 - t3907 * (-t3979 + t4045);
t3897 = t3919 ^ 2;
t3809 = pkin(2) * t3897 + t3910 * t3862 - pkin(2);
t3868 = t3897 - 0.2e1;
t3932 = ((t3868 * t3880 - pkin(6)) * t3918 + t3909 * t3809) * t4022 - (t3826 * t3918 + (t3978 - 0.2e1 * t4044) * t3910) * t3889 - t3910 * (-t3978 + t4044);
t3926 = pkin(3) ^ 2;
t3888 = pkin(1) * t3923;
t3849 = t3880 + pkin(6);
t3847 = t3879 + pkin(6);
t3845 = t3878 + pkin(6);
t3843 = pkin(1) * t3910 + t3923;
t3842 = pkin(1) * t3907 + t3923;
t3841 = pkin(1) * t3904 + t3923;
t3782 = -t3849 * t4016 + t3855 * t3899;
t3781 = -t3847 * t4018 + t3853 * t3899;
t3780 = -t3845 * t4020 + t3851 * t3899;
t3761 = 0.2e1 * t3911 * t3975 + t3920 * t4027;
t3760 = 0.2e1 * t3908 * t3976 + t3917 * t4028;
t3759 = 0.2e1 * t3905 * t3977 + t3914 * t4029;
t3758 = t3782 * t3920 + t3843 * t3911;
t3757 = t3781 * t3917 + t3842 * t3908;
t3756 = t3780 * t3914 + t3841 * t3905;
t3755 = -t3782 * t3911 + t3843 * t3920;
t3754 = -t3781 * t3908 + t3842 * t3917;
t3753 = -t3780 * t3905 + t3841 * t3914;
t3752 = -t3849 * t4024 + t4010 * t4027;
t3751 = -t3847 * t4025 + t4011 * t4028;
t3750 = -t3845 * t4026 + t4012 * t4029;
t3749 = t3752 * t3920 + t3911 * t4030;
t3748 = t3751 * t3917 + t3908 * t4031;
t3747 = t3750 * t3914 + t3905 * t4032;
t3746 = -t3752 * t3911 + t3920 * t4030;
t3745 = -t3751 * t3908 + t3917 * t4031;
t3744 = -t3750 * t3905 + t3914 * t4032;
t1 = [(-(-t3799 * t4010 + t3800 * t3919) * t4044 + (-pkin(3) * t3964 + (-pkin(2) * t3800 - t3799 * t4006) * t3919 + (t3799 * t4050 - t3800 * t3923) * t3910) * t3918 - pkin(2) * t3964) * t4036 + (-t3932 * t3799 + t3938 * t3800) * t4033 - ((t3761 * t3875 + 0.2e1 * (t3959 - t3962 / 0.2e1) * t3872) * t3897 + (t3746 * t3875 - t3749 * t3872) * t3919 + (t3755 * t3875 - t3758 * t3872) * t3923) * t3950 + (-(-t3797 * t4011 + t3798 * t3916) * t4045 + (-pkin(3) * t3967 + (-pkin(2) * t3798 - t3797 * t4006) * t3916 + (t3797 * t4050 - t3798 * t3923) * t3907) * t3915 - pkin(2) * t3967) * t4037 + (-t3933 * t3797 + t3939 * t3798) * t4034 - ((t3760 * t3874 + 0.2e1 * (t3960 - t3965 / 0.2e1) * t3871) * t3895 + (t3745 * t3874 - t3748 * t3871) * t3916 + (t3754 * t3874 - t3757 * t3871) * t3923) * t3951 + (-(-t3795 * t4012 + t3796 * t3913) * t4046 + (-pkin(3) * t3970 + (-pkin(2) * t3796 - t3795 * t4006) * t3913 + (t3795 * t4050 - t3796 * t3923) * t3904) * t3912 - pkin(2) * t3970) * t4038 + (-t3934 * t3795 + t3940 * t3796) * t4035 - ((t3759 * t3873 + 0.2e1 * (t3961 - t3968 / 0.2e1) * t3870) * t3893 + (t3744 * t3873 - t3747 * t3870) * t3913 + (t3753 * t3873 - t3756 * t3870) * t3923) * t3952 - m(4) * g(1); (-(t3799 * t3919 + t3800 * t4010) * t4044 + (pkin(3) * t3963 + (-pkin(2) * t3799 + t3800 * t4006) * t3919 - (t3799 * t3923 + t3800 * t4050) * t3910) * t3918 + pkin(2) * t3963) * t4036 + (t3799 * t3938 + t3800 * t3932) * t4033 - (((-0.2e1 * t3959 + t3962) * t3875 + t3761 * t3872) * t3897 + (t3746 * t3872 + t3749 * t3875) * t3919 + (t3755 * t3872 + t3758 * t3875) * t3923) * t3950 + (-(t3797 * t3916 + t3798 * t4011) * t4045 + (pkin(3) * t3966 + (-pkin(2) * t3797 + t3798 * t4006) * t3916 - (t3797 * t3923 + t3798 * t4050) * t3907) * t3915 + pkin(2) * t3966) * t4037 + (t3797 * t3939 + t3798 * t3933) * t4034 - (((-0.2e1 * t3960 + t3965) * t3874 + t3760 * t3871) * t3895 + (t3745 * t3871 + t3748 * t3874) * t3916 + (t3754 * t3871 + t3757 * t3874) * t3923) * t3951 + (-(t3795 * t3913 + t3796 * t4012) * t4046 + (pkin(3) * t3969 + (-pkin(2) * t3795 + t3796 * t4006) * t3913 - (t3795 * t3923 + t3796 * t4050) * t3904) * t3912 + pkin(2) * t3969) * t4038 + (t3795 * t3940 + t3796 * t3934) * t4035 - (((-0.2e1 * t3961 + t3968) * t3873 + t3759 * t3870) * t3893 + (t3744 * t3870 + t3747 * t3873) * t3913 + (t3753 * t3870 + t3756 * t3873) * t3923) * t3952 - m(4) * g(2); (-t4016 * t4044 + (-pkin(3) * t4003 + t3826 * t3898) * t3918 - pkin(2) * t4003) * t4036 + ((-t3826 * t4022 + t4041) * t3918 + (-pkin(6) * t3971 - t3809 * t3889 + t3919 * t3820) * t3909 + (-(t3868 * t3889 - t3897 + 0.1e1) * t3909 * t3918 + (0.2e1 * t3896 - 0.1e1) * t3971) * pkin(3)) / ((t3898 * t3944 + t3803) * t3918 + t3956) * t3734 + (-t4018 * t4045 + (-pkin(3) * t4004 + t3825 * t3898) * t3915 - pkin(2) * t4004) * t4037 + ((-t3825 * t4022 + t4041) * t3915 + (-pkin(6) * t3972 - t3808 * t3889 + t3916 * t3819) * t3906 + (-(t3867 * t3889 - t3895 + 0.1e1) * t3906 * t3915 + (0.2e1 * t3894 - 0.1e1) * t3972) * pkin(3)) / ((t3898 * t3945 + t3802) * t3915 + t3957) * t3733 + (-t4020 * t4046 + (-pkin(3) * t4005 + t3824 * t3898) * t3912 - pkin(2) * t4005) * t4038 + ((-t3824 * t4022 + t4041) * t3912 + (-pkin(6) * t3973 - t3807 * t3889 + t3913 * t3818) * t3903 + (-(t3866 * t3889 - t3893 + 0.1e1) * t3903 * t3912 + (0.2e1 * t3892 - 0.1e1) * t3973) * pkin(3)) / ((t3898 * t3946 + t3801) * t3912 + t3958) * t3732 - m(4) * g(3) + ((t3888 * t3919 + (-t3849 * t3899 * t4013 - t3843 + (t3897 * t3989 + t3889) * t3923) * t3855 + ((t3889 * t4027 - t3896 * t3926 + t3918 * t4039 - t4023) * t3919 - t3849 * t3974) * t3910) / ((t3840 * t3918 - (pkin(6) * t3918 - t4047) * t4024) * t3919 - t3985 * t4057 + (t3953 * t3918 + (t3859 + pkin(1)) * t4047) * t3898) * t3731 + (t3888 * t3916 + (-t3847 * t3899 * t4014 - t3842 + (t3895 * t3989 + t3889) * t3923) * t3853 + ((t3889 * t4028 - t3894 * t3926 + t3915 * t4039 - t4023) * t3916 - t3847 * t3974) * t3907) / ((t3915 * t3840 - (pkin(6) * t3915 - t4048) * t4025) * t3916 - t3986 * t4058 + (t3954 * t3915 + (t3858 + pkin(1)) * t4048) * t3898) * t3730 + (t3888 * t3913 + (-t3845 * t3899 * t4015 - t3841 + (t3893 * t3989 + t3889) * t3923) * t3851 + ((t3889 * t4029 - t3892 * t3926 + t3912 * t4039 - t4023) * t3913 - t3845 * t3974) * t3904) / ((t3840 * t3912 - (pkin(6) * t3912 - t4049) * t4026) * t3913 - t3987 * t4059 + (t3955 * t3912 + (t3857 + pkin(1)) * t4049) * t3898) * t3729) * t4052;];
taugX  = t1;
