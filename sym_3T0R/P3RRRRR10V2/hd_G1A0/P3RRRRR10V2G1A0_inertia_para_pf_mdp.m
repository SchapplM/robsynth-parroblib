% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR10V2G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 00:35:08
% EndTime: 2020-08-07 00:36:19
% DurationCPUTime: 76.58s
% Computational Cost: add. (147027->1493), mult. (266472->2520), div. (4509->19), fcn. (231183->26), ass. (0->865)
t7989 = legFrame(1,3);
t7953 = sin(t7989);
t7956 = cos(t7989);
t7998 = sin(qJ(1,1));
t8007 = cos(qJ(1,1));
t7865 = t7953 * t8007 + t7956 * t7998;
t7866 = -t7953 * t7998 + t7956 * t8007;
t8006 = cos(qJ(2,1));
t8008 = pkin(8) + pkin(7);
t7943 = t8008 * t8006;
t7997 = sin(qJ(2,1));
t7984 = t8006 ^ 2;
t8262 = (t7984 - 0.1e1) * pkin(2);
t7884 = t7997 * t7943 + t8262;
t8436 = pkin(2) * t7997;
t7897 = t7943 - t8436;
t7949 = t7984 - 0.2e1;
t7996 = sin(qJ(3,1));
t7961 = t7996 * pkin(3);
t7986 = cos(pkin(4));
t7973 = t7986 ^ 2;
t8005 = cos(qJ(3,1));
t8256 = pkin(6) * t7996 + pkin(3);
t7985 = sin(pkin(4));
t8344 = t7985 * t7986;
t7983 = t8005 ^ 2;
t8433 = pkin(3) * t7983;
t8020 = ((t7949 * t7961 - pkin(6)) * t8005 + t7996 * t7884) * t8344 - (t7897 * t8005 + (t8256 - 0.2e1 * t8433) * t7997) * t7973 - (-t8256 + t8433) * t7997;
t7940 = t8008 * t7997;
t7967 = t8006 * pkin(2);
t7894 = t7967 + t7940;
t7891 = pkin(1) + t7894;
t8303 = t8005 * t8006;
t8307 = t7997 * t8005;
t8323 = t7986 * t8005;
t8339 = t7985 * t7996;
t8461 = t7967 + pkin(1);
t8056 = -(t8461 * t7997 + t8008 + (pkin(3) * t8307 - t7943) * t8006) * t8339 + (pkin(3) * t8303 + t7891) * t8323;
t7760 = -t8020 * t7865 + t8056 * t7866;
t8077 = -pkin(6) * t7894 + t7961 * t8461;
t8437 = pkin(2) * t7996;
t8265 = t7891 * t8437;
t8281 = pkin(1) * t8323;
t8296 = pkin(6) * t8433;
t7966 = t8005 * pkin(3);
t7930 = t7966 + pkin(2);
t8479 = t7930 * t7997;
t7812 = 0.1e1 / ((t7943 - t8479) * t8281 + t7985 * (t8077 * t8005 - t8006 * t8296 + t8265));
t7736 = t7760 * t7812;
t7924 = t7961 + pkin(6);
t8328 = t7986 * t7997;
t8349 = t7930 * t7985;
t7974 = pkin(2) + t8008;
t7975 = pkin(2) - t8008;
t8355 = (t7966 + t7974) * (t7966 + t7975);
t7827 = -t7924 * t8349 + t8328 * t8355;
t8009 = 0.2e1 * t8008;
t8352 = (t7997 * t8009 + pkin(1)) * t7930;
t7815 = -t7827 * t7998 + t8007 * t8352;
t7818 = t7827 * t8007 + t7998 * t8352;
t8338 = t7985 * t7997;
t7848 = -t7924 * t8338 + t7930 * t7986;
t7970 = pkin(1) * t7997;
t7934 = t7970 + pkin(7);
t7919 = pkin(8) + t7934;
t7830 = -t7848 * t7998 + t7919 * t8007;
t7833 = t7848 * t8007 + t7919 * t7998;
t8321 = t7986 * t8008;
t8160 = t7930 * t8321;
t7836 = 0.2e1 * t7998 * t8160 + t8007 * t8355;
t8110 = t8007 * t8160;
t8147 = t7998 * t8355;
t7740 = (t7836 * t7956 + 0.2e1 * (t8110 - t8147 / 0.2e1) * t7953) * t7984 + (t7815 * t7956 - t7818 * t7953) * t8006 + (t7830 * t7956 - t7833 * t7953) * t8008;
t8164 = t7865 * t8339;
t8442 = pkin(2) * t7986;
t7779 = -(-t7865 * t8328 + t7866 * t8006) * t8433 + (-pkin(3) * t8164 + (-pkin(2) * t7866 - t7865 * t8321) * t8006 + (t7865 * t8442 - t7866 * t8008) * t7997) * t8005 - pkin(2) * t8164;
t8275 = pkin(6) * t8338;
t8446 = pkin(1) * t7986;
t7875 = t7897 * t8446;
t7925 = t7961 - pkin(6);
t8101 = pkin(1) * t7961 - pkin(6) * t7940;
t8335 = t7985 * t8006;
t8272 = pkin(6) * t8335;
t7879 = pkin(1) * t8328 + t8272;
t8104 = -t7879 * t8433 + t7985 * t8265;
t7804 = ((t7925 * t7967 + t8101) * t7985 + t7875) * t8005 + t8104;
t7798 = 0.1e1 / t7804;
t8295 = 0.2e1 * t7798;
t8109 = t8275 * t8295;
t7885 = -pkin(6) * t7985 * t8008 - pkin(1) * t8442;
t7916 = pkin(1) * t8321;
t8013 = pkin(2) ^ 2;
t8299 = pkin(3) * t8446;
t7794 = 0.1e1 / (t7916 * t8303 + (t7885 * t8005 - t7983 * t8299) * t7997 + ((pkin(2) * t7925 * t8005 - t8296) * t8006 + (pkin(1) * t7930 + pkin(2) * t7940 + t8006 * t8013) * t7996) * t7985);
t8012 = 0.1e1 / pkin(3);
t8334 = t7985 * t8012;
t8268 = pkin(7) * t8334;
t8131 = t7794 * t8268;
t8010 = 0.2e1 * pkin(2);
t8443 = pkin(1) * t8006;
t7937 = t8010 + t8443;
t8361 = t7812 * t7937;
t7903 = pkin(7) * t7997 + t8461;
t8306 = t7997 * t8006;
t8451 = ((pkin(7) * t8306 + t8262) * t7973 - t7903 * t8006) * t8295;
t8454 = t8012 * t8461;
t8476 = t8454 * t7794 * t7985;
t8496 = (t7740 * t8476 - (pkin(6) * t7736 - t7740 * t8131) * t7997) * t7985 - t7779 * t8451 - (-t7760 * t8361 + t7779 * t8109) * t7986;
t7761 = t8056 * t7865 + t8020 * t7866;
t7737 = t7761 * t7812;
t7743 = ((-0.2e1 * t8110 + t8147) * t7956 + t7836 * t7953) * t7984 + (t7815 * t7953 + t7818 * t7956) * t8006 + (t7830 * t7953 + t7833 * t7956) * t8008;
t8163 = t7866 * t8339;
t7778 = -(t7865 * t8006 + t7866 * t8328) * t8433 + (pkin(3) * t8163 + (-pkin(2) * t7865 + t7866 * t8321) * t8006 - (t7865 * t8008 + t7866 * t8442) * t7997) * t8005 + pkin(2) * t8163;
t8495 = (t7743 * t8476 - (pkin(6) * t7737 - t7743 * t8131) * t7997) * t7985 - t7778 * t8451 - (-t7761 * t8361 + t7778 * t8109) * t7986;
t7988 = legFrame(2,3);
t7952 = sin(t7988);
t7955 = cos(t7988);
t7995 = sin(qJ(1,2));
t8004 = cos(qJ(1,2));
t7863 = t7952 * t8004 + t7955 * t7995;
t7864 = -t7952 * t7995 + t7955 * t8004;
t8003 = cos(qJ(2,2));
t7942 = t8008 * t8003;
t7994 = sin(qJ(2,2));
t7982 = t8003 ^ 2;
t8263 = (t7982 - 0.1e1) * pkin(2);
t7883 = t7994 * t7942 + t8263;
t8438 = pkin(2) * t7994;
t7896 = t7942 - t8438;
t7948 = t7982 - 0.2e1;
t7993 = sin(qJ(3,2));
t7960 = t7993 * pkin(3);
t8002 = cos(qJ(3,2));
t8257 = pkin(6) * t7993 + pkin(3);
t7981 = t8002 ^ 2;
t8434 = pkin(3) * t7981;
t8021 = ((t7948 * t7960 - pkin(6)) * t8002 + t7993 * t7883) * t8344 - (t7896 * t8002 + (t8257 - 0.2e1 * t8434) * t7994) * t7973 - (-t8257 + t8434) * t7994;
t7939 = t8008 * t7994;
t7965 = t8003 * pkin(2);
t7893 = t7965 + t7939;
t7890 = pkin(1) + t7893;
t8304 = t8002 * t8003;
t8312 = t7994 * t8002;
t8325 = t7986 * t8002;
t8341 = t7985 * t7993;
t8462 = t7965 + pkin(1);
t8057 = -(t8462 * t7994 + t8008 + (pkin(3) * t8312 - t7942) * t8003) * t8341 + (pkin(3) * t8304 + t7890) * t8325;
t7758 = -t8021 * t7863 + t8057 * t7864;
t8078 = -pkin(6) * t7893 + t7960 * t8462;
t8439 = pkin(2) * t7993;
t8266 = t7890 * t8439;
t8282 = pkin(1) * t8325;
t8297 = pkin(6) * t8434;
t7964 = t8002 * pkin(3);
t7928 = t7964 + pkin(2);
t8480 = t7928 * t7994;
t7811 = 0.1e1 / ((t7942 - t8480) * t8282 + t7985 * (t8078 * t8002 - t8003 * t8297 + t8266));
t7734 = t7758 * t7811;
t7922 = t7960 + pkin(6);
t8330 = t7986 * t7994;
t8350 = t7928 * t7985;
t8356 = (t7964 + t7974) * (t7964 + t7975);
t7826 = -t7922 * t8350 + t8330 * t8356;
t8353 = (t7994 * t8009 + pkin(1)) * t7928;
t7814 = -t7826 * t7995 + t8004 * t8353;
t7817 = t7826 * t8004 + t7995 * t8353;
t8340 = t7985 * t7994;
t7847 = -t7922 * t8340 + t7928 * t7986;
t7969 = pkin(1) * t7994;
t7933 = t7969 + pkin(7);
t7918 = pkin(8) + t7933;
t7829 = -t7847 * t7995 + t7918 * t8004;
t7832 = t7847 * t8004 + t7918 * t7995;
t8161 = t7928 * t8321;
t7835 = 0.2e1 * t7995 * t8161 + t8004 * t8356;
t8111 = t8004 * t8161;
t8148 = t7995 * t8356;
t7739 = (t7835 * t7955 + 0.2e1 * (t8111 - t8148 / 0.2e1) * t7952) * t7982 + (t7814 * t7955 - t7817 * t7952) * t8003 + (t7829 * t7955 - t7832 * t7952) * t8008;
t8166 = t7863 * t8341;
t7777 = -(-t7863 * t8330 + t7864 * t8003) * t8434 + (-pkin(3) * t8166 + (-pkin(2) * t7864 - t7863 * t8321) * t8003 + (t7863 * t8442 - t7864 * t8008) * t7994) * t8002 - pkin(2) * t8166;
t8276 = pkin(6) * t8340;
t7874 = t7896 * t8446;
t7923 = t7960 - pkin(6);
t8102 = pkin(1) * t7960 - pkin(6) * t7939;
t8336 = t7985 * t8003;
t8273 = pkin(6) * t8336;
t7881 = pkin(1) * t8330 + t8273;
t8105 = -t7881 * t8434 + t7985 * t8266;
t7806 = ((t7923 * t7965 + t8102) * t7985 + t7874) * t8002 + t8105;
t7802 = 0.1e1 / t7806;
t8293 = 0.2e1 * t7802;
t8107 = t8276 * t8293;
t7793 = 0.1e1 / (t7916 * t8304 + (t7885 * t8002 - t7981 * t8299) * t7994 + ((pkin(2) * t7923 * t8002 - t8297) * t8003 + (pkin(1) * t7928 + pkin(2) * t7939 + t8003 * t8013) * t7993) * t7985);
t8132 = t7793 * t8268;
t8444 = pkin(1) * t8003;
t7936 = t8010 + t8444;
t8368 = t7811 * t7936;
t7901 = pkin(7) * t7994 + t8462;
t8311 = t7994 * t8003;
t8450 = ((pkin(7) * t8311 + t8263) * t7973 - t7901 * t8003) * t8293;
t8453 = t8012 * t8462;
t8477 = t8453 * t7793 * t7985;
t8494 = (t7739 * t8477 - (pkin(6) * t7734 - t7739 * t8132) * t7994) * t7985 - t7777 * t8450 - (-t7758 * t8368 + t7777 * t8107) * t7986;
t7759 = t8057 * t7863 + t8021 * t7864;
t7735 = t7759 * t7811;
t7742 = ((-0.2e1 * t8111 + t8148) * t7955 + t7835 * t7952) * t7982 + (t7814 * t7952 + t7817 * t7955) * t8003 + (t7829 * t7952 + t7832 * t7955) * t8008;
t8165 = t7864 * t8341;
t7776 = -(t7863 * t8003 + t7864 * t8330) * t8434 + (pkin(3) * t8165 + (-pkin(2) * t7863 + t7864 * t8321) * t8003 - (t7863 * t8008 + t7864 * t8442) * t7994) * t8002 + pkin(2) * t8165;
t8493 = (t7742 * t8477 - (pkin(6) * t7735 - t7742 * t8132) * t7994) * t7985 - t7776 * t8450 - (-t7759 * t8368 + t7776 * t8107) * t7986;
t7987 = legFrame(3,3);
t7951 = sin(t7987);
t7954 = cos(t7987);
t7992 = sin(qJ(1,3));
t8001 = cos(qJ(1,3));
t7861 = t7951 * t8001 + t7954 * t7992;
t7862 = -t7951 * t7992 + t7954 * t8001;
t8000 = cos(qJ(2,3));
t7941 = t8008 * t8000;
t7991 = sin(qJ(2,3));
t7980 = t8000 ^ 2;
t8264 = (t7980 - 0.1e1) * pkin(2);
t7882 = t7991 * t7941 + t8264;
t8440 = pkin(2) * t7991;
t7895 = t7941 - t8440;
t7947 = t7980 - 0.2e1;
t7990 = sin(qJ(3,3));
t7959 = t7990 * pkin(3);
t7999 = cos(qJ(3,3));
t8258 = pkin(6) * t7990 + pkin(3);
t7979 = t7999 ^ 2;
t8435 = pkin(3) * t7979;
t8022 = ((t7947 * t7959 - pkin(6)) * t7999 + t7990 * t7882) * t8344 - (t7895 * t7999 + (t8258 - 0.2e1 * t8435) * t7991) * t7973 - (-t8258 + t8435) * t7991;
t7938 = t8008 * t7991;
t7963 = t8000 * pkin(2);
t7892 = t7963 + t7938;
t7889 = pkin(1) + t7892;
t8305 = t7999 * t8000;
t8317 = t7991 * t7999;
t8327 = t7986 * t7999;
t8343 = t7985 * t7990;
t8463 = t7963 + pkin(1);
t8058 = -(t8463 * t7991 + t8008 + (pkin(3) * t8317 - t7941) * t8000) * t8343 + (pkin(3) * t8305 + t7889) * t8327;
t7756 = -t8022 * t7861 + t8058 * t7862;
t8079 = -pkin(6) * t7892 + t7959 * t8463;
t8441 = pkin(2) * t7990;
t8267 = t7889 * t8441;
t8283 = pkin(1) * t8327;
t8298 = pkin(6) * t8435;
t7962 = t7999 * pkin(3);
t7926 = t7962 + pkin(2);
t8481 = t7926 * t7991;
t7810 = 0.1e1 / ((t7941 - t8481) * t8283 + t7985 * (t8079 * t7999 - t8000 * t8298 + t8267));
t7732 = t7756 * t7810;
t7920 = t7959 + pkin(6);
t8332 = t7986 * t7991;
t8351 = t7926 * t7985;
t8357 = (t7962 + t7974) * (t7962 + t7975);
t7825 = -t7920 * t8351 + t8332 * t8357;
t8354 = (t7991 * t8009 + pkin(1)) * t7926;
t7813 = -t7825 * t7992 + t8001 * t8354;
t7816 = t7825 * t8001 + t7992 * t8354;
t8342 = t7985 * t7991;
t7846 = -t7920 * t8342 + t7926 * t7986;
t7968 = pkin(1) * t7991;
t7932 = t7968 + pkin(7);
t7917 = pkin(8) + t7932;
t7828 = -t7846 * t7992 + t7917 * t8001;
t7831 = t7846 * t8001 + t7917 * t7992;
t8162 = t7926 * t8321;
t7834 = 0.2e1 * t7992 * t8162 + t8001 * t8357;
t8112 = t8001 * t8162;
t8149 = t7992 * t8357;
t7738 = (t7834 * t7954 + 0.2e1 * (t8112 - t8149 / 0.2e1) * t7951) * t7980 + (t7813 * t7954 - t7816 * t7951) * t8000 + (t7828 * t7954 - t7831 * t7951) * t8008;
t8168 = t7861 * t8343;
t7775 = -(-t7861 * t8332 + t7862 * t8000) * t8435 + (-pkin(3) * t8168 + (-pkin(2) * t7862 - t7861 * t8321) * t8000 + (t7861 * t8442 - t7862 * t8008) * t7991) * t7999 - pkin(2) * t8168;
t8277 = pkin(6) * t8342;
t7873 = t7895 * t8446;
t7921 = t7959 - pkin(6);
t8103 = pkin(1) * t7959 - pkin(6) * t7938;
t8337 = t7985 * t8000;
t8274 = pkin(6) * t8337;
t7880 = pkin(1) * t8332 + t8274;
t8106 = -t7880 * t8435 + t7985 * t8267;
t7805 = ((t7921 * t7963 + t8103) * t7985 + t7873) * t7999 + t8106;
t7800 = 0.1e1 / t7805;
t8294 = 0.2e1 * t7800;
t8108 = t8277 * t8294;
t7792 = 0.1e1 / (t7916 * t8305 + (t7885 * t7999 - t7979 * t8299) * t7991 + ((pkin(2) * t7921 * t7999 - t8298) * t8000 + (pkin(1) * t7926 + pkin(2) * t7938 + t8000 * t8013) * t7990) * t7985);
t8133 = t7792 * t8268;
t8445 = pkin(1) * t8000;
t7935 = t8010 + t8445;
t8375 = t7810 * t7935;
t7899 = pkin(7) * t7991 + t8463;
t8316 = t7991 * t8000;
t8449 = ((pkin(7) * t8316 + t8264) * t7973 - t7899 * t8000) * t8294;
t8452 = t8012 * t8463;
t8478 = t8452 * t7792 * t7985;
t8492 = (t7738 * t8478 - (pkin(6) * t7732 - t7738 * t8133) * t7991) * t7985 - t7775 * t8449 - (-t7756 * t8375 + t7775 * t8108) * t7986;
t7757 = t8058 * t7861 + t8022 * t7862;
t7733 = t7757 * t7810;
t7741 = ((-0.2e1 * t8112 + t8149) * t7954 + t7834 * t7951) * t7980 + (t7813 * t7951 + t7816 * t7954) * t8000 + (t7828 * t7951 + t7831 * t7954) * t8008;
t8167 = t7862 * t8343;
t7774 = -(t7861 * t8000 + t7862 * t8332) * t8435 + (pkin(3) * t8167 + (-pkin(2) * t7861 + t7862 * t8321) * t8000 - (t7861 * t8008 + t7862 * t8442) * t7991) * t7999 + pkin(2) * t8167;
t8491 = (t7741 * t8478 - (pkin(6) * t7733 - t7741 * t8133) * t7991) * t7985 - t7774 * t8449 - (-t7757 * t8375 + t7774 * t8108) * t7986;
t8130 = (0.2e1 * t7979 - 0.1e1) * t8342;
t8139 = t7947 * t7973 - t7980;
t8319 = t7990 * t7999;
t8432 = (t7973 - 0.1e1) * pkin(6);
t7765 = ((-t7895 * t8344 + t8432) * t7999 + (-t7882 * t7973 + t7889 * t8000 - t7986 * t8277) * t7990 + (-(t8139 + 0.1e1) * t8319 + t7986 * t8130) * pkin(3)) / ((t8079 * t7985 + t7873) * t7999 + t8106);
t8333 = t7986 * t7990;
t7822 = -t8342 * t8435 + (-pkin(3) * t8333 + t7895 * t7985) * t7999 - pkin(2) * t8333;
t7971 = pkin(1) * t8008;
t8011 = pkin(3) ^ 2;
t8159 = t7985 * t8321;
t8292 = -0.2e1 * (t7986 + 0.1e1) * (t7986 - 0.1e1);
t8326 = t7986 * t8000;
t8345 = t7974 * t7975;
t8448 = -0.2e1 * pkin(2);
t8431 = pkin(3) * t8448;
t8402 = (t7971 * t8000 + (-t7920 * t7985 * t8326 - t7917 + (t7980 * t8292 + t7973) * t8008) * t7926 + ((t7973 * t8357 - t7979 * t8011 + t7999 * t8431 - t8345) * t8000 - t7920 * t8159) * t7991) / ((t7999 * t7916 - (pkin(6) * t7999 - t8441) * t8351) * t8000 - t8283 * t8481 + (t8103 * t7999 + (t7938 + pkin(1)) * t8441) * t7985);
t8216 = t8012 * t8402;
t8136 = pkin(7) * t8216;
t8484 = (t8402 * t8452 + (pkin(6) * t7765 + t8136) * t7991) * t7985 + t7822 * t8449 + (-t7935 * t7765 + t7822 * t8108) * t7986;
t8128 = (0.2e1 * t7981 - 0.1e1) * t8340;
t8138 = t7948 * t7973 - t7982;
t8314 = t7993 * t8002;
t7766 = ((-t7896 * t8344 + t8432) * t8002 + (-t7883 * t7973 + t7890 * t8003 - t7986 * t8276) * t7993 + (-(t8138 + 0.1e1) * t8314 + t7986 * t8128) * pkin(3)) / ((t8078 * t7985 + t7874) * t8002 + t8105);
t8331 = t7986 * t7993;
t7823 = -t8340 * t8434 + (-pkin(3) * t8331 + t7896 * t7985) * t8002 - pkin(2) * t8331;
t8324 = t7986 * t8003;
t8401 = (t7971 * t8003 + (-t7922 * t7985 * t8324 - t7918 + (t7982 * t8292 + t7973) * t8008) * t7928 + ((t7973 * t8356 - t7981 * t8011 + t8002 * t8431 - t8345) * t8003 - t7922 * t8159) * t7994) / ((t8002 * t7916 - (pkin(6) * t8002 - t8439) * t8350) * t8003 - t8282 * t8480 + (t8102 * t8002 + (t7939 + pkin(1)) * t8439) * t7985);
t8215 = t8012 * t8401;
t8135 = pkin(7) * t8215;
t8483 = (t8401 * t8453 + (pkin(6) * t7766 + t8135) * t7994) * t7985 + t7823 * t8450 + (-t7936 * t7766 + t7823 * t8107) * t7986;
t8126 = (0.2e1 * t7983 - 0.1e1) * t8338;
t8137 = t7949 * t7973 - t7984;
t8309 = t7996 * t8005;
t7767 = ((-t7897 * t8344 + t8432) * t8005 + (-t7884 * t7973 + t7891 * t8006 - t7986 * t8275) * t7996 + (-(t8137 + 0.1e1) * t8309 + t7986 * t8126) * pkin(3)) / ((t8077 * t7985 + t7875) * t8005 + t8104);
t8329 = t7986 * t7996;
t7824 = -t8338 * t8433 + (-pkin(3) * t8329 + t7897 * t7985) * t8005 - pkin(2) * t8329;
t8322 = t7986 * t8006;
t8400 = (t7971 * t8006 + (-t7924 * t7985 * t8322 - t7919 + (t7984 * t8292 + t7973) * t8008) * t7930 + ((t7973 * t8355 - t7983 * t8011 + t8005 * t8431 - t8345) * t8006 - t7924 * t8159) * t7997) / ((t8005 * t7916 - (pkin(6) * t8005 - t8437) * t8349) * t8006 - t8281 * t8479 + (t8101 * t8005 + (t7940 + pkin(1)) * t8437) * t7985);
t8214 = t8012 * t8400;
t8134 = pkin(7) * t8214;
t8482 = (t8400 * t8454 + (pkin(6) * t7767 + t8134) * t7997) * t7985 + t7824 * t8451 + (-t7937 * t7767 + t7824 * t8109) * t7986;
t8460 = t7774 * t7775;
t8459 = t7776 * t7777;
t8458 = t7778 * t7779;
t8447 = 0.2e1 * t7973 - 0.2e1;
t7972 = t7985 ^ 2;
t8430 = MDP(4) * t7972;
t8429 = MDP(6) * t7985;
t8428 = MDP(7) * t7985;
t8427 = MDP(15) * t7985;
t8408 = t7738 * t7792;
t8407 = t7739 * t7793;
t8406 = t7740 * t7794;
t8405 = t7741 * t7792;
t8404 = t7742 * t7793;
t8403 = t7743 * t7794;
t7750 = t7774 * t7800;
t7751 = t7775 * t7800;
t7752 = t7776 * t7802;
t7753 = t7777 * t7802;
t7754 = t7778 * t7798;
t7755 = t7779 * t7798;
t8399 = t7792 * t8012;
t8398 = t7793 * t8012;
t8397 = t7794 * t8012;
t8092 = -pkin(7) * t8006 + t8436;
t8396 = t7798 * t8092;
t8395 = t7798 * t7985;
t8394 = t7798 * t7986;
t8393 = t7798 * t8006;
t7799 = 0.1e1 / t7804 ^ 2;
t8392 = t7799 * t7824;
t7978 = t7997 ^ 2;
t8391 = t7799 * t7978;
t8094 = -pkin(7) * t8000 + t8440;
t8390 = t7800 * t8094;
t8389 = t7800 * t7985;
t8388 = t7800 * t7986;
t8387 = t7800 * t8000;
t7801 = 0.1e1 / t7805 ^ 2;
t8386 = t7801 * t7822;
t7976 = t7991 ^ 2;
t8385 = t7801 * t7976;
t8093 = -pkin(7) * t8003 + t8438;
t8384 = t7802 * t8093;
t8383 = t7802 * t7985;
t8382 = t7802 * t7986;
t8381 = t7802 * t8003;
t7803 = 0.1e1 / t7806 ^ 2;
t8380 = t7803 * t7823;
t7977 = t7994 ^ 2;
t8379 = t7803 * t7977;
t8378 = t7810 * t7822;
t7876 = pkin(1) * t8326 - t8277;
t8377 = t7810 * t7876;
t8376 = t7810 * t7880;
t8374 = t7810 * t7986;
t8373 = t7810 * t7990;
t8372 = t7810 * t7999;
t8371 = t7811 * t7823;
t7877 = pkin(1) * t8324 - t8276;
t8370 = t7811 * t7877;
t8369 = t7811 * t7881;
t8367 = t7811 * t7986;
t8366 = t7811 * t7993;
t8365 = t7811 * t8002;
t8364 = t7812 * t7824;
t7878 = pkin(1) * t8322 - t8275;
t8363 = t7812 * t7878;
t8362 = t7812 * t7879;
t8360 = t7812 * t7986;
t8359 = t7812 * t7996;
t8358 = t7812 * t8005;
t7786 = t7822 * t7800;
t7787 = t7823 * t7802;
t7788 = t7824 * t7798;
t8348 = t7932 * t7986;
t8347 = t7933 * t7986;
t8346 = t7934 * t7986;
t8320 = t7990 * t7991;
t8318 = t7990 * t8000;
t8315 = t7993 * t7994;
t8313 = t7993 * t8003;
t8310 = t7996 * t7997;
t8308 = t7996 * t8006;
t8302 = t7810 * t8448;
t8301 = t7811 * t8448;
t8300 = t7812 * t8448;
t8291 = -0.2e1 * t8344;
t8290 = -0.2e1 * t8319;
t8289 = 0.2e1 * t8319;
t8288 = -0.2e1 * t8314;
t8287 = 0.2e1 * t8314;
t8286 = -0.2e1 * t8309;
t8285 = 0.2e1 * t8309;
t8284 = t8447 * pkin(6);
t8280 = pkin(2) * t7765;
t8279 = pkin(2) * t7766;
t8278 = pkin(2) * t7767;
t8271 = pkin(7) * t7765;
t8270 = pkin(7) * t7766;
t8269 = pkin(7) * t7767;
t8255 = t7738 * t8399;
t8254 = t7739 * t8398;
t8253 = t7740 * t8397;
t8252 = t7741 * t8399;
t8251 = t7742 * t8398;
t8250 = t7743 * t8397;
t8249 = t7756 * t8377;
t8248 = t7756 * t8376;
t8247 = t7756 * t8373;
t8246 = t7756 * t8372;
t8245 = t7757 * t8377;
t8244 = t7757 * t8376;
t8243 = t7757 * t8373;
t8242 = t7757 * t8372;
t8241 = t7758 * t8370;
t8240 = t7758 * t8369;
t8239 = t7758 * t8366;
t8238 = t7758 * t8365;
t8237 = t7759 * t8370;
t8236 = t7759 * t8369;
t8235 = t7759 * t8366;
t8234 = t7759 * t8365;
t8233 = t7760 * t8363;
t8232 = t7760 * t8362;
t8231 = t7760 * t8359;
t8230 = t7760 * t8358;
t8229 = t7761 * t8363;
t8228 = t7761 * t8362;
t8227 = t7761 * t8359;
t8226 = t7761 * t8358;
t8225 = t7801 * t8460;
t8224 = t7774 * t8387;
t8223 = t7775 * t8387;
t8222 = t7803 * t8459;
t8221 = t7776 * t8381;
t8220 = t7777 * t8381;
t8219 = t7799 * t8458;
t8218 = t7778 * t8393;
t8217 = t7779 * t8393;
t8213 = t7876 * t7765;
t8212 = t7880 * t7765;
t8211 = t7990 * t7765;
t8210 = t7999 * t7765;
t8209 = t7877 * t7766;
t8208 = t7881 * t7766;
t8207 = t7993 * t7766;
t8206 = t8002 * t7766;
t8205 = t7878 * t7767;
t8204 = t7879 * t7767;
t8203 = t7996 * t7767;
t8202 = t8005 * t7767;
t8158 = t7985 * t8320;
t7867 = t8158 - t8327;
t8201 = t7867 * t8399;
t8157 = t7985 * t8317;
t7869 = t8157 + t8333;
t8200 = t7869 * t8399;
t8156 = t7985 * t8315;
t7868 = t8156 - t8325;
t8199 = t7868 * t8398;
t8155 = t7985 * t8312;
t7870 = t8155 + t8331;
t8198 = t7870 * t8398;
t8154 = t7985 * t8310;
t7871 = t8154 - t8323;
t8197 = t7871 * t8397;
t8153 = t7985 * t8307;
t7872 = t8153 + t8329;
t8196 = t7872 * t8397;
t8195 = t8006 * t7788;
t8194 = (pkin(6) * t8308 + t7903 * t8005) * t8395;
t8193 = (-pkin(6) * t8303 + t7903 * t7996) * t8395;
t8192 = t7824 * t8391;
t8191 = t7799 * t8306;
t8190 = t8000 * t7786;
t8189 = (pkin(6) * t8318 + t7899 * t7999) * t8389;
t8188 = (-pkin(6) * t8305 + t7899 * t7990) * t8389;
t8187 = t7822 * t8385;
t8186 = t7801 * t8316;
t8185 = t8003 * t7787;
t8184 = (-pkin(6) * t8304 + t7901 * t7993) * t8383;
t8183 = (pkin(6) * t8313 + t7901 * t8002) * t8383;
t8182 = t7823 * t8379;
t8181 = t7803 * t8311;
t8180 = t7822 * t8377;
t8179 = t7822 * t8376;
t8178 = t7810 * t8318;
t8177 = t7810 * t8305;
t8176 = t7823 * t8370;
t8175 = t7823 * t8369;
t8174 = t7811 * t8313;
t8173 = t7811 * t8304;
t8172 = t7824 * t8363;
t8171 = t7824 * t8362;
t8170 = t7812 * t8308;
t8169 = t7812 * t8303;
t7744 = t7774 * t8388;
t7745 = t7775 * t8388;
t7746 = t7776 * t8382;
t7747 = t7777 * t8382;
t7748 = t7778 * t8394;
t7749 = t7779 * t8394;
t8152 = t7986 * t7765;
t8151 = t7986 * t7766;
t8150 = t7986 * t7767;
t7783 = t7986 * t7786;
t7784 = t7986 * t7787;
t7785 = t7986 * t7788;
t8146 = t8374 / 0.2e1;
t8145 = t8367 / 0.2e1;
t8144 = t8360 / 0.2e1;
t8140 = 0.2e1 * MDP(5) * t7972;
t8143 = (t8181 * t8459 + t8186 * t8460 + t8191 * t8458) * t8140 + (t7976 * t8225 + t7977 * t8222 + t7978 * t8219) * t8430 + (t8219 + t8222 + t8225) * MDP(1);
t8113 = t7823 * t8181;
t8116 = t7822 * t8186;
t8119 = t7824 * t8191;
t8142 = (t7774 * t8116 + t7776 * t8113 + t7778 * t8119) * t8140 + (t7774 * t8187 + t7776 * t8182 + t7778 * t8192) * t8430 + (t7774 * t8386 + t7776 * t8380 + t7778 * t8392) * MDP(1);
t8141 = (t7775 * t8116 + t7777 * t8113 + t7779 * t8119) * t8140 + (t7775 * t8187 + t7777 * t8182 + t7779 * t8192) * t8430 + (t7775 * t8386 + t7777 * t8380 + t7779 * t8392) * MDP(1);
t8129 = (0.4e1 * t7979 - 0.2e1) * t8342;
t8127 = (0.4e1 * t7981 - 0.2e1) * t8340;
t8125 = (0.4e1 * t7983 - 0.2e1) * t8338;
t8124 = t8337 * t7765;
t8123 = t8336 * t7766;
t8122 = t8335 * t7767;
t8121 = t7798 * t8154;
t8120 = t7798 * t8153;
t8118 = t7800 * t8158;
t8117 = t7800 * t8157;
t8115 = t7802 * t8156;
t8114 = t7802 * t8155;
t8091 = 0.2e1 * t7990 * t8157;
t8090 = 0.2e1 * t7993 * t8155;
t8089 = 0.2e1 * t7996 * t8153;
t8088 = t7798 * t8137;
t8087 = t7800 * t8139;
t8086 = t7802 * t8138;
t8085 = t7798 * t8126;
t8084 = t7800 * t8130;
t8083 = t7802 * t8128;
t8076 = t7810 * t8094;
t8075 = t7811 * t8093;
t8074 = t7812 * t8092;
t7678 = 0.2e1 * t7744 + t7733;
t8073 = (t7678 + t7733) * t7750;
t7680 = 0.2e1 * t7745 + t7732;
t8072 = (t7680 + t7732) * t7751;
t7682 = 0.2e1 * t7746 + t7735;
t8071 = (t7682 + t7735) * t7752;
t7684 = 0.2e1 * t7747 + t7734;
t8070 = (t7684 + t7734) * t7753;
t7686 = 0.2e1 * t7748 + t7737;
t8069 = (t7686 + t7737) * t7754;
t7688 = 0.2e1 * t7749 + t7736;
t8068 = (t7688 + t7736) * t7755;
t7730 = 0.2e1 * t7785 + t7767;
t8067 = (t7730 + t7767) * t7788;
t7726 = 0.2e1 * t7783 + t7765;
t8066 = (t7726 + t7765) * t7786;
t7728 = 0.2e1 * t7784 + t7766;
t8065 = (t7728 + t7766) * t7787;
t8055 = t7798 * (-t7937 * t7986 + t8275);
t8054 = t7802 * (-t7936 * t7986 + t8276);
t8053 = (-t7935 * t7986 + t8277) * t7800;
t8052 = t7798 * (t7686 * t7779 + t7778 * t7736);
t8051 = t7798 * (t7686 * t7824 + t7778 * t7767);
t8050 = t7798 * (t7688 * t7778 + t7779 * t7737);
t8049 = t7798 * (t7688 * t7824 + t7779 * t7767);
t8048 = t7798 * (t7730 * t7779 + t7760 * t8364);
t8047 = t7798 * (t7730 * t7778 + t7761 * t8364);
t8046 = t7800 * (t7678 * t7775 + t7774 * t7732);
t8045 = t7800 * (t7678 * t7822 + t7774 * t7765);
t8044 = t7800 * (t7680 * t7774 + t7775 * t7733);
t8043 = t7800 * (t7680 * t7822 + t7775 * t7765);
t8042 = t7800 * (t7726 * t7775 + t7756 * t8378);
t8041 = t7800 * (t7726 * t7774 + t7757 * t8378);
t8040 = t7802 * (t7682 * t7777 + t7776 * t7734);
t8039 = t7802 * (t7682 * t7823 + t7776 * t7766);
t8038 = t7802 * (t7684 * t7776 + t7777 * t7735);
t8037 = t7802 * (t7684 * t7823 + t7777 * t7766);
t8036 = t7802 * (t7728 * t7777 + t7758 * t8371);
t8035 = t7802 * (t7728 * t7776 + t7759 * t8371);
t8028 = t7798 * (-t8092 * t8291 + t8284);
t8027 = t7800 * (-t8094 * t8291 + t8284);
t8026 = t7802 * (-t8093 * t8291 + t8284);
t8025 = (-t8274 - t8348) * t8399;
t8024 = (-t8273 - t8347) * t8398;
t8023 = (-t8272 - t8346) * t8397;
t8019 = (t7996 * t8291 + t8447 * t8307) * t8393;
t8018 = (t8005 * t8291 - t8447 * t8310) * t8393;
t8017 = (t7990 * t8291 + t8447 * t8317) * t8387;
t8016 = (t7999 * t8291 - t8447 * t8320) * t8387;
t8015 = (t7993 * t8291 + t8447 * t8312) * t8381;
t8014 = (t8002 * t8291 - t8447 * t8315) * t8381;
t7821 = t7824 ^ 2;
t7820 = t7823 ^ 2;
t7819 = t7822 ^ 2;
t7773 = t7779 ^ 2;
t7772 = t7778 ^ 2;
t7771 = t7777 ^ 2;
t7770 = t7776 ^ 2;
t7769 = t7775 ^ 2;
t7768 = t7774 ^ 2;
t7731 = t7785 + t7767;
t7729 = t7784 + t7766;
t7727 = t7783 + t7765;
t7725 = t7785 + t7767 / 0.2e1;
t7724 = t7784 + t7766 / 0.2e1;
t7723 = t7783 + t7765 / 0.2e1;
t7722 = t8150 / 0.2e1 + t7788;
t7721 = t8151 / 0.2e1 + t7787;
t7720 = t8152 / 0.2e1 + t7786;
t7719 = t7934 * t7785 + t8269;
t7718 = t7933 * t7784 + t8270;
t7717 = t7932 * t7783 + t8271;
t7713 = t7985 * t8195 - t8214;
t7712 = t7985 * t8185 - t8215;
t7711 = t7985 * t8190 - t8216;
t7710 = t7788 * t7985 * t8092 + t8134;
t7709 = t7787 * t7985 * t8093 + t8135;
t7708 = t7786 * t7985 * t8094 + t8136;
t7704 = t7731 * t7996 + t7824 * t8120;
t7703 = t7729 * t7993 + t7823 * t8114;
t7702 = t7727 * t7990 + t7822 * t8117;
t7701 = t7731 * t8005 - t7824 * t8121;
t7700 = t7729 * t8002 - t7823 * t8115;
t7699 = t7727 * t7999 - t7822 * t8118;
t7698 = t7824 * t8055 - 0.2e1 * t8278;
t7697 = t7823 * t8054 - 0.2e1 * t8279;
t7696 = t7822 * t8053 - 0.2e1 * t8280;
t7695 = -t7719 * t8005 + t7824 * t8193;
t7694 = -t7719 * t7996 - t7824 * t8194;
t7693 = -t7718 * t7993 - t7823 * t8183;
t7692 = -t7718 * t8002 + t7823 * t8184;
t7691 = -t7717 * t7999 + t7822 * t8188;
t7690 = -t7717 * t7990 - t7822 * t8189;
t7689 = t7749 + t7736;
t7687 = t7748 + t7737;
t7685 = t7747 + t7734;
t7683 = t7746 + t7735;
t7681 = t7745 + t7732;
t7679 = t7744 + t7733;
t7677 = t7749 + t7736 / 0.2e1;
t7676 = t7748 + t7737 / 0.2e1;
t7675 = t7747 + t7734 / 0.2e1;
t7674 = t7746 + t7735 / 0.2e1;
t7673 = t7745 + t7732 / 0.2e1;
t7672 = t7744 + t7733 / 0.2e1;
t7671 = t7761 * t8144 + t7754;
t7670 = t7760 * t8144 + t7755;
t7669 = t7759 * t8145 + t7752;
t7668 = t7758 * t8145 + t7753;
t7667 = t7757 * t8146 + t7750;
t7666 = t7756 * t8146 + t7751;
t7665 = pkin(7) * t7736 + t7934 * t7749;
t7664 = pkin(7) * t7737 + t7934 * t7748;
t7663 = pkin(7) * t7734 + t7933 * t7747;
t7662 = pkin(7) * t7735 + t7933 * t7746;
t7661 = pkin(7) * t7732 + t7932 * t7745;
t7660 = pkin(7) * t7733 + t7932 * t7744;
t7653 = t7824 * t8088 + t7788 - t8150;
t7652 = t7823 * t8086 + t7787 - t8151;
t7651 = t7822 * t8087 + t7786 - t8152;
t7650 = t7731 * t8285 + t7824 * t8085;
t7649 = t7729 * t8287 + t7823 * t8083;
t7648 = t7727 * t8289 + t7822 * t8084;
t7647 = (t8218 + t8250) * t7985;
t7646 = (t8221 + t8251) * t7985;
t7645 = (t8224 + t8252) * t7985;
t7644 = (t8217 + t8253) * t7985;
t7643 = (t8220 + t8254) * t7985;
t7642 = (t8223 + t8255) * t7985;
t7641 = (-pkin(7) * t8250 + t7778 * t8396) * t7985;
t7640 = (-pkin(7) * t8251 + t7776 * t8384) * t7985;
t7639 = (-pkin(7) * t8252 + t7774 * t8390) * t7985;
t7638 = -0.2e1 * t7722 * t7970 - 0.2e1 * t7725 * t8272;
t7637 = -0.2e1 * t7720 * t7968 - 0.2e1 * t7723 * t8274;
t7636 = -0.2e1 * t7721 * t7969 - 0.2e1 * t7724 * t8273;
t7635 = 0.2e1 * t7722 * t8443 - 0.2e1 * t7725 * t8275;
t7634 = 0.2e1 * t7721 * t8444 - 0.2e1 * t7724 * t8276;
t7633 = 0.2e1 * t7720 * t8445 - 0.2e1 * t7723 * t8277;
t7632 = (-pkin(7) * t8253 + t7779 * t8396) * t7985;
t7631 = (-pkin(7) * t8254 + t7777 * t8384) * t7985;
t7630 = (-pkin(7) * t8255 + t7775 * t8390) * t7985;
t7623 = -t7698 * t8005 - t7710 * t7996;
t7622 = t7698 * t7996 - t7710 * t8005;
t7621 = -t7697 * t8002 - t7709 * t7993;
t7620 = t7697 * t7993 - t7709 * t8002;
t7619 = -t7696 * t7999 - t7708 * t7990;
t7618 = t7696 * t7990 - t7708 * t7999;
t7617 = t7824 * t8019 + t7872 * t8214 - t7996 * t8122;
t7616 = t7823 * t8015 + t7870 * t8215 - t7993 * t8123;
t7615 = t7822 * t8017 + t7869 * t8216 - t7990 * t8124;
t7614 = t7824 * t8018 - t7871 * t8214 - t8005 * t8122;
t7613 = t7823 * t8014 - t7868 * t8215 - t8002 * t8123;
t7612 = t7822 * t8016 - t7867 * t8216 - t7999 * t8124;
t7611 = t7689 * t7996 + t7779 * t8120;
t7610 = t7687 * t7996 + t7778 * t8120;
t7609 = t7685 * t7993 + t7777 * t8114;
t7608 = t7683 * t7993 + t7776 * t8114;
t7607 = t7681 * t7990 + t7775 * t8117;
t7606 = t7679 * t7990 + t7774 * t8117;
t7605 = t7689 * t8005 - t7779 * t8121;
t7604 = t7687 * t8005 - t7778 * t8121;
t7603 = t7685 * t8002 - t7777 * t8115;
t7602 = t7683 * t8002 - t7776 * t8115;
t7601 = t7681 * t7999 - t7775 * t8118;
t7600 = t7679 * t7999 - t7774 * t8118;
t7599 = t7760 * t8300 + t7779 * t8055;
t7598 = t7761 * t8300 + t7778 * t8055;
t7597 = t7758 * t8301 + t7777 * t8054;
t7596 = t7759 * t8301 + t7776 * t8054;
t7595 = t7756 * t8302 + t7775 * t8053;
t7594 = t7757 * t8302 + t7774 * t8053;
t7593 = -t7665 * t8005 + t7779 * t8193;
t7592 = -t7665 * t7996 - t7779 * t8194;
t7591 = -t7664 * t8005 + t7778 * t8193;
t7590 = -t7664 * t7996 - t7778 * t8194;
t7589 = -t7663 * t7993 - t7777 * t8183;
t7588 = -t7663 * t8002 + t7777 * t8184;
t7587 = -t7662 * t7993 - t7776 * t8183;
t7586 = -t7662 * t8002 + t7776 * t8184;
t7585 = -t7661 * t7999 + t7775 * t8188;
t7584 = -t7661 * t7990 - t7775 * t8189;
t7583 = -t7660 * t7999 + t7774 * t8188;
t7582 = -t7660 * t7990 - t7774 * t8189;
t7575 = -t7760 * t8360 + t7779 * t8088 + t7755;
t7574 = -t7761 * t8360 + t7778 * t8088 + t7754;
t7573 = -t7758 * t8367 + t7777 * t8086 + t7753;
t7572 = -t7759 * t8367 + t7776 * t8086 + t7752;
t7571 = -t7756 * t8374 + t7775 * t8087 + t7751;
t7570 = -t7757 * t8374 + t7774 * t8087 + t7750;
t7569 = t7689 * t8285 + t7779 * t8085;
t7568 = t7687 * t8285 + t7778 * t8085;
t7567 = t7685 * t8287 + t7777 * t8083;
t7566 = t7683 * t8287 + t7776 * t8083;
t7565 = t7681 * t8289 + t7775 * t8084;
t7564 = t7679 * t8289 + t7774 * t8084;
t7563 = -0.2e1 * t7670 * t7970 - 0.2e1 * t7677 * t8272;
t7562 = -0.2e1 * t7671 * t7970 - 0.2e1 * t7676 * t8272;
t7561 = -0.2e1 * t7666 * t7968 - 0.2e1 * t7673 * t8274;
t7560 = -0.2e1 * t7667 * t7968 - 0.2e1 * t7672 * t8274;
t7559 = -0.2e1 * t7668 * t7969 - 0.2e1 * t7675 * t8273;
t7558 = -0.2e1 * t7669 * t7969 - 0.2e1 * t7674 * t8273;
t7557 = 0.2e1 * t7670 * t8443 - 0.2e1 * t7677 * t8275;
t7556 = 0.2e1 * t7671 * t8443 - 0.2e1 * t7676 * t8275;
t7555 = 0.2e1 * t7668 * t8444 - 0.2e1 * t7675 * t8276;
t7554 = 0.2e1 * t7669 * t8444 - 0.2e1 * t7674 * t8276;
t7553 = 0.2e1 * t7666 * t8445 - 0.2e1 * t7673 * t8277;
t7552 = 0.2e1 * t7667 * t8445 - 0.2e1 * t7672 * t8277;
t7551 = t8214 * t8346 + ((pkin(6) * t8214 - t8269) * t8006 + t7997 * t8278) * t7985 + t7824 * t8028;
t7550 = t8215 * t8347 + ((pkin(6) * t8215 - t8270) * t8003 + t7994 * t8279) * t7985 + t7823 * t8026;
t7549 = t8216 * t8348 + ((pkin(6) * t8216 - t8271) * t8000 + t7991 * t8280) * t7985 + t7822 * t8027;
t7548 = t7653 * t7983 + t7725 * t8089 + t7731 * t7986;
t7547 = t7652 * t7981 + t7724 * t8090 + t7729 * t7986;
t7546 = t7651 * t7979 + t7723 * t8091 + t7727 * t7986;
t7545 = t7653 * t8286 + t7725 * t8125;
t7544 = t7652 * t8288 + t7724 * t8127;
t7543 = t7651 * t8290 + t7723 * t8129;
t7539 = -t7598 * t8005 - t7641 * t7996;
t7538 = t7598 * t7996 - t7641 * t8005;
t7537 = -t7596 * t8002 - t7640 * t7993;
t7536 = t7596 * t7993 - t7640 * t8002;
t7535 = -t7594 * t7999 - t7639 * t7990;
t7534 = t7594 * t7990 - t7639 * t7999;
t7533 = -t7599 * t8005 - t7632 * t7996;
t7532 = t7599 * t7996 - t7632 * t8005;
t7531 = -t7597 * t8002 - t7631 * t7993;
t7530 = t7597 * t7993 - t7631 * t8002;
t7529 = -t7595 * t7999 - t7630 * t7990;
t7528 = t7595 * t7990 - t7630 * t7999;
t7527 = (-t7743 * t8196 - t7761 * t8170) * t7985 + t7778 * t8019;
t7526 = (-t7742 * t8198 - t7759 * t8174) * t7985 + t7776 * t8015;
t7525 = (-t7741 * t8200 - t7757 * t8178) * t7985 + t7774 * t8017;
t7524 = (t7743 * t8197 - t7761 * t8169) * t7985 + t7778 * t8018;
t7523 = (t7742 * t8199 - t7759 * t8173) * t7985 + t7776 * t8014;
t7522 = (t7741 * t8201 - t7757 * t8177) * t7985 + t7774 * t8016;
t7521 = (-t7740 * t8196 - t7760 * t8170) * t7985 + t7779 * t8019;
t7520 = (-t7739 * t8198 - t7758 * t8174) * t7985 + t7777 * t8015;
t7519 = (-t7738 * t8200 - t7756 * t8178) * t7985 + t7775 * t8017;
t7518 = (t7740 * t8197 - t7760 * t8169) * t7985 + t7779 * t8018;
t7517 = (t7739 * t8199 - t7758 * t8173) * t7985 + t7777 * t8014;
t7516 = (t7738 * t8201 - t7756 * t8177) * t7985 + t7775 * t8016;
t7515 = (t7743 * t8023 + t7761 * t8074) * t7985 + t7778 * t8028;
t7514 = (t7742 * t8024 + t7759 * t8075) * t7985 + t7776 * t8026;
t7513 = (t7741 * t8025 + t7757 * t8076) * t7985 + t7774 * t8027;
t7512 = (t7740 * t8023 + t7760 * t8074) * t7985 + t7779 * t8028;
t7511 = (t7739 * t8024 + t7758 * t8075) * t7985 + t7777 * t8026;
t7510 = (t7738 * t8025 + t7756 * t8076) * t7985 + t7775 * t8027;
t7509 = t7575 * t7983 + t7677 * t8089 + t7689 * t7986;
t7508 = t7574 * t7983 + t7676 * t8089 + t7687 * t7986;
t7507 = t7573 * t7981 + t7675 * t8090 + t7685 * t7986;
t7506 = t7572 * t7981 + t7674 * t8090 + t7683 * t7986;
t7505 = t7571 * t7979 + t7673 * t8091 + t7681 * t7986;
t7504 = t7570 * t7979 + t7672 * t8091 + t7679 * t7986;
t7503 = t7575 * t8286 + t7677 * t8125;
t7502 = t7574 * t8286 + t7676 * t8125;
t7501 = t7573 * t8288 + t7675 * t8127;
t7500 = t7572 * t8288 + t7674 * t8127;
t7499 = t7571 * t8290 + t7673 * t8129;
t7498 = t7570 * t8290 + t7672 * t8129;
t7497 = -t7551 * t7996 - t8482 * t8005;
t7496 = -t7551 * t8005 + t8482 * t7996;
t7495 = -t7993 * t7550 - t8483 * t8002;
t7494 = -t7550 * t8002 + t8483 * t7993;
t7493 = -t7549 * t7990 - t8484 * t7999;
t7492 = -t7549 * t7999 + t8484 * t7990;
t7491 = -t7515 * t7996 + t8495 * t8005;
t7490 = -t7515 * t8005 - t8495 * t7996;
t7489 = -t7993 * t7514 + t8493 * t8002;
t7488 = -t7514 * t8002 - t8493 * t7993;
t7487 = -t7513 * t7990 + t8491 * t7999;
t7486 = -t7513 * t7999 - t8491 * t7990;
t7485 = -t7512 * t7996 + t8496 * t8005;
t7484 = -t7512 * t8005 - t8496 * t7996;
t7483 = -t7993 * t7511 + t8494 * t8002;
t7482 = -t7511 * t8002 - t8494 * t7993;
t7481 = -t7510 * t7990 + t8492 * t7999;
t7480 = -t7510 * t7999 - t8492 * t7990;
t1 = [(t7769 * t7801 + t7771 * t7803 + t7773 * t7799) * MDP(1) + (t7769 * t8385 + t7771 * t8379 + t7773 * t8391) * t8430 + (t7769 * t8186 + t7771 * t8181 + t7773 * t8191) * t8140 + (t7991 * t8072 + t7994 * t8070 + t7997 * t8068) * t8429 + (t8000 * t8072 + t8003 * t8070 + t8006 * t8068) * t8428 + (t7681 * t7732 + t7685 * t7734 + t7689 * t7736 + (t7681 * t7751 + t7685 * t7753 + t7689 * t7755) * t7986) * MDP(8) + ((t7557 + t8233) * t7755 + (t7555 + t8241) * t7753 + (t7553 + t8249) * t7751) * MDP(9) + ((t7563 - t8232) * t7755 + (t7559 - t8240) * t7753 + (t7561 - t8248) * t7751) * MDP(10) + (t7505 * t7751 + t7507 * t7753 + t7509 * t7755 + t7607 * t8247 + t7609 * t8239 + t7611 * t8231) * MDP(11) + (t7499 * t7751 + t7501 * t7753 + t7503 * t7755 + t7565 * t7732 + t7567 * t7734 + t7569 * t7736) * MDP(12) + (-t7642 * t8247 - t7643 * t8239 - t7644 * t8231 + t7519 * t7751 + t7520 * t7753 + t7521 * t7755 + (-t7607 * t8408 - t7609 * t8407 - t7611 * t8406) * t8334) * MDP(13) + (-t7642 * t8246 - t7643 * t8238 - t7644 * t8230 + t7516 * t7751 + t7517 * t7753 + t7518 * t7755 + (-t7601 * t8408 - t7603 * t8407 - t7605 * t8406) * t8334) * MDP(14) + (t7642 * t8223 + t7643 * t8220 + t7644 * t8217 + (t7642 * t8408 + t7643 * t8407 + t7644 * t8406) * t8012) * t8427 + (t7481 * t7751 + t7483 * t7753 + t7485 * t7755 + t7529 * t7732 + t7531 * t7734 + t7533 * t7736 + (-t7584 * t8408 - t7589 * t8407 - t7592 * t8406) * t8334) * MDP(16) + (t7480 * t7751 + t7482 * t7753 + t7484 * t7755 + t7528 * t7732 + t7530 * t7734 + t7532 * t7736 + (-t7585 * t8408 - t7588 * t8407 - t7593 * t8406) * t8334) * MDP(17) + MDP(18); (t7991 * t8046 + t7994 * t8040 + t7997 * t8052) * t8429 + (t8000 * t8046 + t8003 * t8040 + t8006 * t8052) * t8428 + (t7679 * t7732 + t7683 * t7734 + t7687 * t7736 + (t7679 * t7751 + t7683 * t7753 + t7687 * t7755) * t7986) * MDP(8) + ((t7554 * t7777 + t7776 * t8241) * t7802 + (t7552 * t7775 + t7774 * t8249) * t7800 + (t7556 * t7779 + t7778 * t8233) * t7798) * MDP(9) + ((t7558 * t7777 - t7776 * t8240) * t7802 + (t7560 * t7775 - t7774 * t8248) * t7800 + (t7562 * t7779 - t7778 * t8232) * t7798) * MDP(10) + (t7504 * t7751 + t7506 * t7753 + t7508 * t7755 + t7606 * t8247 + t7608 * t8239 + t7610 * t8231) * MDP(11) + (t7498 * t7751 + t7500 * t7753 + t7502 * t7755 + t7564 * t7732 + t7566 * t7734 + t7568 * t7736) * MDP(12) + (-t7645 * t8247 - t7646 * t8239 - t7647 * t8231 + t7525 * t7751 + t7526 * t7753 + t7527 * t7755 + (-t7606 * t8408 - t7608 * t8407 - t7610 * t8406) * t8334) * MDP(13) + (-t7645 * t8246 - t7646 * t8238 - t7647 * t8230 + t7522 * t7751 + t7523 * t7753 + t7524 * t7755 + (-t7600 * t8408 - t7602 * t8407 - t7604 * t8406) * t8334) * MDP(14) + (t7645 * t8223 + t7646 * t8220 + t7647 * t8217 + (t7645 * t8408 + t7646 * t8407 + t7647 * t8406) * t8012) * t8427 + (t7487 * t7751 + t7489 * t7753 + t7491 * t7755 + t7535 * t7732 + t7537 * t7734 + t7539 * t7736 + (-t7582 * t8408 - t7587 * t8407 - t7590 * t8406) * t8334) * MDP(16) + (t7486 * t7751 + t7488 * t7753 + t7490 * t7755 + t7534 * t7732 + t7536 * t7734 + t7538 * t7736 + (-t7583 * t8408 - t7586 * t8407 - t7591 * t8406) * t8334) * MDP(17) + t8143; (t7991 * t8042 + t7994 * t8036 + t7997 * t8048) * t8429 + (t8000 * t8042 + t8003 * t8036 + t8006 * t8048) * t8428 + (t7727 * t7732 + t7729 * t7734 + t7731 * t7736 + (t7727 * t7751 + t7729 * t7753 + t7731 * t7755) * t7986) * MDP(8) + ((t7634 * t7777 + t7758 * t8176) * t7802 + (t7633 * t7775 + t7756 * t8180) * t7800 + (t7635 * t7779 + t7760 * t8172) * t7798) * MDP(9) + ((t7636 * t7777 - t7758 * t8175) * t7802 + (t7637 * t7775 - t7756 * t8179) * t7800 + (t7638 * t7779 - t7760 * t8171) * t7798) * MDP(10) + (t7546 * t7751 + t7547 * t7753 + t7548 * t7755 + t7702 * t8247 + t7703 * t8239 + t7704 * t8231) * MDP(11) + (t7543 * t7751 + t7544 * t7753 + t7545 * t7755 + t7648 * t7732 + t7649 * t7734 + t7650 * t7736) * MDP(12) + (-t7711 * t8247 - t7712 * t8239 - t7713 * t8231 + t7615 * t7751 + t7616 * t7753 + t7617 * t7755 + (-t7702 * t8408 - t7703 * t8407 - t7704 * t8406) * t8334) * MDP(13) + (-t7711 * t8246 - t7712 * t8238 - t7713 * t8230 + t7612 * t7751 + t7613 * t7753 + t7614 * t7755 + (-t7699 * t8408 - t7700 * t8407 - t7701 * t8406) * t8334) * MDP(14) + (t7711 * t8223 + t7712 * t8220 + t7713 * t8217 + (t7711 * t8408 + t7712 * t8407 + t7713 * t8406) * t8012) * t8427 + (t7493 * t7751 + t7495 * t7753 + t7497 * t7755 + t7619 * t7732 + t7621 * t7734 + t7623 * t7736 + (-t7690 * t8408 - t7693 * t8407 - t7694 * t8406) * t8334) * MDP(16) + (t7492 * t7751 + t7494 * t7753 + t7496 * t7755 + t7618 * t7732 + t7620 * t7734 + t7622 * t7736 + (-t7691 * t8408 - t7692 * t8407 - t7695 * t8406) * t8334) * MDP(17) + t8141; (t7991 * t8044 + t7994 * t8038 + t7997 * t8050) * t8429 + (t8000 * t8044 + t8003 * t8038 + t8006 * t8050) * t8428 + (t7681 * t7733 + t7685 * t7735 + t7689 * t7737 + (t7681 * t7750 + t7685 * t7752 + t7689 * t7754) * t7986) * MDP(8) + ((t7555 * t7776 + t7777 * t8237) * t7802 + (t7553 * t7774 + t7775 * t8245) * t7800 + (t7557 * t7778 + t7779 * t8229) * t7798) * MDP(9) + ((t7559 * t7776 - t7777 * t8236) * t7802 + (t7561 * t7774 - t7775 * t8244) * t7800 + (t7563 * t7778 - t7779 * t8228) * t7798) * MDP(10) + (t7505 * t7750 + t7507 * t7752 + t7509 * t7754 + t7607 * t8243 + t7609 * t8235 + t7611 * t8227) * MDP(11) + (t7499 * t7750 + t7501 * t7752 + t7503 * t7754 + t7565 * t7733 + t7567 * t7735 + t7569 * t7737) * MDP(12) + (-t7642 * t8243 - t7643 * t8235 - t7644 * t8227 + t7519 * t7750 + t7520 * t7752 + t7521 * t7754 + (-t7607 * t8405 - t7609 * t8404 - t7611 * t8403) * t8334) * MDP(13) + (-t7642 * t8242 - t7643 * t8234 - t7644 * t8226 + t7516 * t7750 + t7517 * t7752 + t7518 * t7754 + (-t7601 * t8405 - t7603 * t8404 - t7605 * t8403) * t8334) * MDP(14) + (t7642 * t8224 + t7643 * t8221 + t7644 * t8218 + (t7642 * t8405 + t7643 * t8404 + t7644 * t8403) * t8012) * t8427 + (t7481 * t7750 + t7483 * t7752 + t7485 * t7754 + t7529 * t7733 + t7531 * t7735 + t7533 * t7737 + (-t7584 * t8405 - t7589 * t8404 - t7592 * t8403) * t8334) * MDP(16) + (t7480 * t7750 + t7482 * t7752 + t7484 * t7754 + t7528 * t7733 + t7530 * t7735 + t7532 * t7737 + (-t7585 * t8405 - t7588 * t8404 - t7593 * t8403) * t8334) * MDP(17) + t8143; (t7768 * t7801 + t7770 * t7803 + t7772 * t7799) * MDP(1) + (t7768 * t8385 + t7770 * t8379 + t7772 * t8391) * t8430 + (t7768 * t8186 + t7770 * t8181 + t7772 * t8191) * t8140 + (t7991 * t8073 + t7994 * t8071 + t7997 * t8069) * t8429 + (t8000 * t8073 + t8003 * t8071 + t8006 * t8069) * t8428 + (t7679 * t7733 + t7683 * t7735 + t7687 * t7737 + (t7679 * t7750 + t7683 * t7752 + t7687 * t7754) * t7986) * MDP(8) + ((t7556 + t8229) * t7754 + (t7554 + t8237) * t7752 + (t7552 + t8245) * t7750) * MDP(9) + ((t7562 - t8228) * t7754 + (t7558 - t8236) * t7752 + (t7560 - t8244) * t7750) * MDP(10) + (t7504 * t7750 + t7506 * t7752 + t7508 * t7754 + t7606 * t8243 + t7608 * t8235 + t7610 * t8227) * MDP(11) + (t7498 * t7750 + t7500 * t7752 + t7502 * t7754 + t7564 * t7733 + t7566 * t7735 + t7568 * t7737) * MDP(12) + (-t7645 * t8243 - t7646 * t8235 - t7647 * t8227 + t7525 * t7750 + t7526 * t7752 + t7527 * t7754 + (-t7606 * t8405 - t7608 * t8404 - t7610 * t8403) * t8334) * MDP(13) + (-t7645 * t8242 - t7646 * t8234 - t7647 * t8226 + t7522 * t7750 + t7523 * t7752 + t7524 * t7754 + (-t7600 * t8405 - t7602 * t8404 - t7604 * t8403) * t8334) * MDP(14) + (t7645 * t8224 + t7646 * t8221 + t7647 * t8218 + (t7645 * t8405 + t7646 * t8404 + t7647 * t8403) * t8012) * t8427 + (t7487 * t7750 + t7489 * t7752 + t7491 * t7754 + t7535 * t7733 + t7537 * t7735 + t7539 * t7737 + (-t7582 * t8405 - t7587 * t8404 - t7590 * t8403) * t8334) * MDP(16) + (t7486 * t7750 + t7488 * t7752 + t7490 * t7754 + t7534 * t7733 + t7536 * t7735 + t7538 * t7737 + (-t7583 * t8405 - t7586 * t8404 - t7591 * t8403) * t8334) * MDP(17) + MDP(18); (t7991 * t8041 + t7994 * t8035 + t7997 * t8047) * t8429 + (t8000 * t8041 + t8003 * t8035 + t8006 * t8047) * t8428 + (t7727 * t7733 + t7729 * t7735 + t7731 * t7737 + (t7727 * t7750 + t7729 * t7752 + t7731 * t7754) * t7986) * MDP(8) + ((t7634 * t7776 + t7759 * t8176) * t7802 + (t7633 * t7774 + t7757 * t8180) * t7800 + (t7635 * t7778 + t7761 * t8172) * t7798) * MDP(9) + ((t7636 * t7776 - t7759 * t8175) * t7802 + (t7637 * t7774 - t7757 * t8179) * t7800 + (t7638 * t7778 - t7761 * t8171) * t7798) * MDP(10) + (t7546 * t7750 + t7547 * t7752 + t7548 * t7754 + t7702 * t8243 + t7703 * t8235 + t7704 * t8227) * MDP(11) + (t7543 * t7750 + t7544 * t7752 + t7545 * t7754 + t7648 * t7733 + t7649 * t7735 + t7650 * t7737) * MDP(12) + (-t7711 * t8243 - t7712 * t8235 - t7713 * t8227 + t7615 * t7750 + t7616 * t7752 + t7617 * t7754 + (-t7702 * t8405 - t7703 * t8404 - t7704 * t8403) * t8334) * MDP(13) + (-t7711 * t8242 - t7712 * t8234 - t7713 * t8226 + t7612 * t7750 + t7613 * t7752 + t7614 * t7754 + (-t7699 * t8405 - t7700 * t8404 - t7701 * t8403) * t8334) * MDP(14) + (t7711 * t8224 + t7712 * t8221 + t7713 * t8218 + (t7711 * t8405 + t7712 * t8404 + t7713 * t8403) * t8012) * t8427 + (t7493 * t7750 + t7495 * t7752 + t7497 * t7754 + t7619 * t7733 + t7621 * t7735 + t7623 * t7737 + (-t7690 * t8405 - t7693 * t8404 - t7694 * t8403) * t8334) * MDP(16) + (t7492 * t7750 + t7494 * t7752 + t7496 * t7754 + t7618 * t7733 + t7620 * t7735 + t7622 * t7737 + (-t7691 * t8405 - t7692 * t8404 - t7695 * t8403) * t8334) * MDP(17) + t8142; (t7991 * t8043 + t7994 * t8037 + t7997 * t8049) * t8429 + (t8000 * t8043 + t8003 * t8037 + t8006 * t8049) * t8428 + (t7681 * t7765 + t7685 * t7766 + t7689 * t7767 + (t7681 * t7786 + t7685 * t7787 + t7689 * t7788) * t7986) * MDP(8) + ((t7555 * t7823 + t7777 * t8209) * t7802 + (t7553 * t7822 + t7775 * t8213) * t7800 + (t7557 * t7824 + t7779 * t8205) * t7798) * MDP(9) + ((t7559 * t7823 - t7777 * t8208) * t7802 + (t7561 * t7822 - t7775 * t8212) * t7800 + (t7563 * t7824 - t7779 * t8204) * t7798) * MDP(10) + (t7505 * t7786 + t7507 * t7787 + t7509 * t7788 + t7607 * t8211 + t7609 * t8207 + t7611 * t8203) * MDP(11) + (t7499 * t7786 + t7501 * t7787 + t7503 * t7788 + t7565 * t7765 + t7567 * t7766 + t7569 * t7767) * MDP(12) + (-t7642 * t8211 - t7643 * t8207 - t7644 * t8203 + t7519 * t7786 + t7520 * t7787 + t7521 * t7788 + (t7607 * t8402 + t7609 * t8401 + t7611 * t8400) * t8012) * MDP(13) + (-t7642 * t8210 - t7643 * t8206 - t7644 * t8202 + t7516 * t7786 + t7517 * t7787 + t7518 * t7788 + (t7601 * t8402 + t7603 * t8401 + t7605 * t8400) * t8012) * MDP(14) + ((-t7642 * t8402 - t7643 * t8401 - t7644 * t8400) * t8012 + (t7642 * t8190 + t7643 * t8185 + t7644 * t8195) * t7985) * MDP(15) + (t7481 * t7786 + t7483 * t7787 + t7485 * t7788 + t7529 * t7765 + t7531 * t7766 + t7533 * t7767 + (t7584 * t8402 + t7589 * t8401 + t7592 * t8400) * t8012) * MDP(16) + (t7480 * t7786 + t7482 * t7787 + t7484 * t7788 + t7528 * t7765 + t7530 * t7766 + t7532 * t7767 + (t7585 * t8402 + t7588 * t8401 + t7593 * t8400) * t8012) * MDP(17) + t8141; (t7991 * t8045 + t7994 * t8039 + t7997 * t8051) * t8429 + (t8000 * t8045 + t8003 * t8039 + t8006 * t8051) * t8428 + (t7679 * t7765 + t7683 * t7766 + t7687 * t7767 + (t7679 * t7786 + t7683 * t7787 + t7687 * t7788) * t7986) * MDP(8) + ((t7554 * t7823 + t7776 * t8209) * t7802 + (t7552 * t7822 + t7774 * t8213) * t7800 + (t7556 * t7824 + t7778 * t8205) * t7798) * MDP(9) + ((t7558 * t7823 - t7776 * t8208) * t7802 + (t7560 * t7822 - t7774 * t8212) * t7800 + (t7562 * t7824 - t7778 * t8204) * t7798) * MDP(10) + (t7504 * t7786 + t7506 * t7787 + t7508 * t7788 + t7606 * t8211 + t7608 * t8207 + t7610 * t8203) * MDP(11) + (t7498 * t7786 + t7500 * t7787 + t7502 * t7788 + t7564 * t7765 + t7566 * t7766 + t7568 * t7767) * MDP(12) + (-t7645 * t8211 - t7646 * t8207 - t7647 * t8203 + t7525 * t7786 + t7526 * t7787 + t7527 * t7788 + (t7606 * t8402 + t7608 * t8401 + t7610 * t8400) * t8012) * MDP(13) + (-t7645 * t8210 - t7646 * t8206 - t7647 * t8202 + t7522 * t7786 + t7523 * t7787 + t7524 * t7788 + (t7600 * t8402 + t7602 * t8401 + t7604 * t8400) * t8012) * MDP(14) + ((-t7645 * t8402 - t7646 * t8401 - t7647 * t8400) * t8012 + (t7645 * t8190 + t7646 * t8185 + t7647 * t8195) * t7985) * MDP(15) + (t7487 * t7786 + t7489 * t7787 + t7491 * t7788 + t7535 * t7765 + t7537 * t7766 + t7539 * t7767 + (t7582 * t8402 + t7587 * t8401 + t7590 * t8400) * t8012) * MDP(16) + (t7486 * t7786 + t7488 * t7787 + t7490 * t7788 + t7534 * t7765 + t7536 * t7766 + t7538 * t7767 + (t7583 * t8402 + t7586 * t8401 + t7591 * t8400) * t8012) * MDP(17) + t8142; (t7799 * t7821 + t7801 * t7819 + t7803 * t7820) * MDP(1) + (t7819 * t8385 + t7820 * t8379 + t7821 * t8391) * t8430 + (t7819 * t8186 + t7820 * t8181 + t7821 * t8191) * t8140 + (t7991 * t8066 + t7994 * t8065 + t7997 * t8067) * t8429 + (t8000 * t8066 + t8003 * t8065 + t8006 * t8067) * t8428 + (t7727 * t7765 + t7729 * t7766 + t7731 * t7767 + (t7727 * t7786 + t7729 * t7787 + t7731 * t7788) * t7986) * MDP(8) + ((t7634 + t8209) * t7787 + (t7633 + t8213) * t7786 + (t7635 + t8205) * t7788) * MDP(9) + ((t7636 - t8208) * t7787 + (t7637 - t8212) * t7786 + (t7638 - t8204) * t7788) * MDP(10) + (t7546 * t7786 + t7547 * t7787 + t7548 * t7788 + t7702 * t8211 + t7703 * t8207 + t7704 * t8203) * MDP(11) + (t7543 * t7786 + t7544 * t7787 + t7545 * t7788 + t7648 * t7765 + t7649 * t7766 + t7650 * t7767) * MDP(12) + (-t7711 * t8211 - t7712 * t8207 - t7713 * t8203 + t7615 * t7786 + t7616 * t7787 + t7617 * t7788 + (t7702 * t8402 + t7703 * t8401 + t7704 * t8400) * t8012) * MDP(13) + (-t7711 * t8210 - t7712 * t8206 - t7713 * t8202 + t7612 * t7786 + t7613 * t7787 + t7614 * t7788 + (t7699 * t8402 + t7700 * t8401 + t7701 * t8400) * t8012) * MDP(14) + ((-t7711 * t8402 - t7712 * t8401 - t7713 * t8400) * t8012 + (t7711 * t8190 + t7712 * t8185 + t7713 * t8195) * t7985) * MDP(15) + (t7493 * t7786 + t7495 * t7787 + t7497 * t7788 + t7619 * t7765 + t7621 * t7766 + t7623 * t7767 + (t7690 * t8402 + t7693 * t8401 + t7694 * t8400) * t8012) * MDP(16) + (t7492 * t7786 + t7494 * t7787 + t7496 * t7788 + t7618 * t7765 + t7620 * t7766 + t7622 * t7767 + (t7691 * t8402 + t7692 * t8401 + t7695 * t8400) * t8012) * MDP(17) + MDP(18);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
