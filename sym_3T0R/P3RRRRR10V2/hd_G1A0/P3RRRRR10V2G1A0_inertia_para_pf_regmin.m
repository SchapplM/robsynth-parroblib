% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x18]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V2G1A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 00:05:33
% EndTime: 2020-08-07 00:06:44
% DurationCPUTime: 79.54s
% Computational Cost: add. (146898->1369), mult. (266337->2429), div. (4509->19), fcn. (231183->26), ass. (0->873)
t2527 = legFrame(1,3);
t2491 = sin(t2527);
t2494 = cos(t2527);
t2536 = sin(qJ(1,1));
t2545 = cos(qJ(1,1));
t2403 = t2545 * t2491 + t2536 * t2494;
t2404 = -t2536 * t2491 + t2545 * t2494;
t2544 = cos(qJ(2,1));
t2546 = pkin(8) + pkin(7);
t2481 = t2546 * t2544;
t2535 = sin(qJ(2,1));
t2522 = t2544 ^ 2;
t2796 = (t2522 - 0.1e1) * pkin(2);
t2422 = t2481 * t2535 + t2796;
t2973 = t2535 * pkin(2);
t2435 = t2481 - t2973;
t2487 = t2522 - 0.2e1;
t2534 = sin(qJ(3,1));
t2499 = t2534 * pkin(3);
t2524 = cos(pkin(4));
t2511 = t2524 ^ 2;
t2543 = cos(qJ(3,1));
t2790 = t2534 * pkin(6) + pkin(3);
t2523 = sin(pkin(4));
t2885 = t2523 * t2524;
t2521 = t2543 ^ 2;
t2978 = t2521 * pkin(3);
t2558 = ((t2487 * t2499 - pkin(6)) * t2543 + t2534 * t2422) * t2885 - (t2435 * t2543 + (t2790 - 0.2e1 * t2978) * t2535) * t2511 - t2535 * (-t2790 + t2978);
t2478 = t2546 * t2535;
t2505 = t2544 * pkin(2);
t2432 = t2505 + t2478;
t2429 = pkin(1) + t2432;
t2844 = t2543 * t2544;
t2848 = t2535 * t2543;
t2864 = t2524 * t2543;
t2880 = t2523 * t2534;
t3001 = t2505 + pkin(1);
t2594 = -(t3001 * t2535 + t2546 + (pkin(3) * t2848 - t2481) * t2544) * t2880 + (pkin(3) * t2844 + t2429) * t2864;
t2298 = -t2403 * t2558 + t2404 * t2594;
t2504 = t2543 * pkin(3);
t2468 = t2504 + pkin(2);
t2615 = -t2432 * pkin(6) + t2499 * t3001;
t2981 = pkin(2) * t2534;
t2803 = t2429 * t2981;
t2831 = pkin(6) * t2978;
t2350 = 0.1e1 / (pkin(1) * (-t2468 * t2535 + t2481) * t2864 + t2523 * (t2543 * t2615 - t2544 * t2831 + t2803));
t2274 = t2298 * t2350;
t2462 = t2499 + pkin(6);
t2869 = t2524 * t2535;
t2890 = t2468 * t2523;
t2512 = pkin(2) + t2546;
t2513 = pkin(2) - t2546;
t2896 = (t2504 + t2512) * (t2504 + t2513);
t2365 = -t2462 * t2890 + t2869 * t2896;
t2547 = 0.2e1 * t2546;
t2893 = (t2547 * t2535 + pkin(1)) * t2468;
t2353 = -t2365 * t2536 + t2545 * t2893;
t2356 = t2365 * t2545 + t2536 * t2893;
t2879 = t2523 * t2535;
t2386 = -t2462 * t2879 + t2524 * t2468;
t2508 = pkin(1) * t2535;
t2472 = t2508 + pkin(7);
t2457 = pkin(8) + t2472;
t2368 = -t2536 * t2386 + t2457 * t2545;
t2371 = t2386 * t2545 + t2536 * t2457;
t2862 = t2524 * t2546;
t2694 = t2468 * t2862;
t2374 = 0.2e1 * t2536 * t2694 + t2545 * t2896;
t2648 = t2545 * t2694;
t2681 = t2536 * t2896;
t2278 = (t2374 * t2494 + 0.2e1 * (t2648 - t2681 / 0.2e1) * t2491) * t2522 + (t2353 * t2494 - t2491 * t2356) * t2544 + (t2368 * t2494 - t2491 * t2371) * t2546;
t2698 = t2403 * t2880;
t2838 = t2546 * t2404;
t2839 = t2546 * t2403;
t2982 = pkin(2) * t2524;
t2317 = -(-t2403 * t2869 + t2404 * t2544) * t2978 + (-pkin(3) * t2698 + (-pkin(2) * t2404 - t2524 * t2839) * t2544 + (t2403 * t2982 - t2838) * t2535) * t2543 - pkin(2) * t2698;
t2802 = pkin(6) * t2879;
t2986 = pkin(1) * t2524;
t2413 = t2435 * t2986;
t2463 = t2499 - pkin(6);
t2639 = pkin(1) * t2499 - pkin(6) * t2478;
t2876 = t2523 * t2544;
t2799 = pkin(6) * t2876;
t2808 = pkin(1) * t2869;
t2417 = t2799 + t2808;
t2642 = -t2417 * t2978 + t2523 * t2803;
t2342 = ((t2463 * t2505 + t2639) * t2523 + t2413) * t2543 + t2642;
t2336 = 0.1e1 / t2342;
t2830 = 0.2e1 * t2336;
t2647 = t2802 * t2830;
t2423 = -t2523 * pkin(6) * t2546 - pkin(1) * t2982;
t2454 = pkin(1) * t2862;
t2551 = pkin(2) ^ 2;
t2834 = pkin(3) * t2986;
t2332 = 0.1e1 / (t2454 * t2844 + (t2423 * t2543 - t2521 * t2834) * t2535 + ((pkin(2) * t2463 * t2543 - t2831) * t2544 + (pkin(1) * t2468 + pkin(2) * t2478 + t2551 * t2544) * t2534) * t2523);
t2550 = 0.1e1 / pkin(3);
t2875 = t2523 * t2550;
t2810 = pkin(7) * t2875;
t2672 = t2332 * t2810;
t2548 = 0.2e1 * pkin(2);
t2983 = pkin(1) * t2544;
t2475 = t2548 + t2983;
t2905 = t2350 * t2475;
t2441 = pkin(7) * t2535 + t3001;
t2847 = t2535 * t2544;
t2991 = ((pkin(7) * t2847 + t2796) * t2511 - t2441 * t2544) * t2830;
t2994 = t2550 * t3001;
t3016 = t2994 * t2332 * t2523;
t3033 = (t2278 * t3016 - (pkin(6) * t2274 - t2278 * t2672) * t2535) * t2523 - t2317 * t2991 - (-t2298 * t2905 + t2317 * t2647) * t2524;
t2299 = t2403 * t2594 + t2404 * t2558;
t2275 = t2299 * t2350;
t2281 = ((-0.2e1 * t2648 + t2681) * t2494 + t2374 * t2491) * t2522 + (t2353 * t2491 + t2356 * t2494) * t2544 + (t2368 * t2491 + t2371 * t2494) * t2546;
t2697 = t2404 * t2880;
t2316 = -(t2403 * t2544 + t2404 * t2869) * t2978 + (pkin(3) * t2697 + (-pkin(2) * t2403 + t2524 * t2838) * t2544 - (t2404 * t2982 + t2839) * t2535) * t2543 + pkin(2) * t2697;
t3032 = (t2281 * t3016 - (pkin(6) * t2275 - t2281 * t2672) * t2535) * t2523 - t2316 * t2991 - (-t2299 * t2905 + t2316 * t2647) * t2524;
t2526 = legFrame(2,3);
t2490 = sin(t2526);
t2493 = cos(t2526);
t2533 = sin(qJ(1,2));
t2542 = cos(qJ(1,2));
t2401 = t2542 * t2490 + t2533 * t2493;
t2402 = -t2533 * t2490 + t2542 * t2493;
t2541 = cos(qJ(2,2));
t2480 = t2546 * t2541;
t2532 = sin(qJ(2,2));
t2520 = t2541 ^ 2;
t2797 = (t2520 - 0.1e1) * pkin(2);
t2421 = t2480 * t2532 + t2797;
t2974 = t2532 * pkin(2);
t2434 = t2480 - t2974;
t2486 = t2520 - 0.2e1;
t2531 = sin(qJ(3,2));
t2498 = t2531 * pkin(3);
t2540 = cos(qJ(3,2));
t2791 = t2531 * pkin(6) + pkin(3);
t2519 = t2540 ^ 2;
t2979 = t2519 * pkin(3);
t2559 = ((t2486 * t2498 - pkin(6)) * t2540 + t2531 * t2421) * t2885 - (t2434 * t2540 + (t2791 - 0.2e1 * t2979) * t2532) * t2511 - t2532 * (-t2791 + t2979);
t2477 = t2546 * t2532;
t2503 = t2541 * pkin(2);
t2431 = t2503 + t2477;
t2428 = pkin(1) + t2431;
t2845 = t2540 * t2541;
t2853 = t2532 * t2540;
t2866 = t2524 * t2540;
t2882 = t2523 * t2531;
t3002 = t2503 + pkin(1);
t2595 = -(t3002 * t2532 + t2546 + (pkin(3) * t2853 - t2480) * t2541) * t2882 + (pkin(3) * t2845 + t2428) * t2866;
t2296 = -t2401 * t2559 + t2402 * t2595;
t2502 = t2540 * pkin(3);
t2466 = t2502 + pkin(2);
t2616 = -t2431 * pkin(6) + t2498 * t3002;
t2975 = t2531 * pkin(2);
t2805 = t2428 * t2975;
t2832 = pkin(6) * t2979;
t2349 = 0.1e1 / (pkin(1) * (-t2466 * t2532 + t2480) * t2866 + t2523 * (t2540 * t2616 - t2541 * t2832 + t2805));
t2272 = t2296 * t2349;
t2460 = t2498 + pkin(6);
t2871 = t2524 * t2532;
t2891 = t2466 * t2523;
t2897 = (t2502 + t2512) * (t2502 + t2513);
t2364 = -t2460 * t2891 + t2871 * t2897;
t2894 = (t2547 * t2532 + pkin(1)) * t2466;
t2352 = -t2364 * t2533 + t2542 * t2894;
t2355 = t2364 * t2542 + t2533 * t2894;
t2881 = t2523 * t2532;
t2385 = -t2460 * t2881 + t2524 * t2466;
t2507 = pkin(1) * t2532;
t2471 = t2507 + pkin(7);
t2456 = pkin(8) + t2471;
t2367 = -t2533 * t2385 + t2456 * t2542;
t2370 = t2385 * t2542 + t2533 * t2456;
t2695 = t2466 * t2862;
t2373 = 0.2e1 * t2533 * t2695 + t2542 * t2897;
t2649 = t2542 * t2695;
t2682 = t2533 * t2897;
t2277 = (t2373 * t2493 + 0.2e1 * (t2649 - t2682 / 0.2e1) * t2490) * t2520 + (t2352 * t2493 - t2490 * t2355) * t2541 + (t2367 * t2493 - t2490 * t2370) * t2546;
t2700 = t2401 * t2882;
t2840 = t2546 * t2402;
t2841 = t2546 * t2401;
t2315 = -(-t2401 * t2871 + t2402 * t2541) * t2979 + (-pkin(3) * t2700 + (-pkin(2) * t2402 - t2524 * t2841) * t2541 + (t2401 * t2982 - t2840) * t2532) * t2540 - pkin(2) * t2700;
t2804 = pkin(6) * t2881;
t2412 = t2434 * t2986;
t2461 = t2498 - pkin(6);
t2640 = pkin(1) * t2498 - pkin(6) * t2477;
t2877 = t2523 * t2541;
t2800 = pkin(6) * t2877;
t2816 = pkin(1) * t2871;
t2419 = t2800 + t2816;
t2643 = -t2419 * t2979 + t2523 * t2805;
t2344 = ((t2461 * t2503 + t2640) * t2523 + t2412) * t2540 + t2643;
t2340 = 0.1e1 / t2344;
t2828 = 0.2e1 * t2340;
t2645 = t2804 * t2828;
t2331 = 0.1e1 / (t2454 * t2845 + (t2423 * t2540 - t2519 * t2834) * t2532 + ((pkin(2) * t2461 * t2540 - t2832) * t2541 + (pkin(1) * t2466 + pkin(2) * t2477 + t2551 * t2541) * t2531) * t2523);
t2673 = t2331 * t2810;
t2984 = pkin(1) * t2541;
t2474 = t2548 + t2984;
t2912 = t2349 * t2474;
t2439 = pkin(7) * t2532 + t3002;
t2852 = t2532 * t2541;
t2990 = ((pkin(7) * t2852 + t2797) * t2511 - t2439 * t2541) * t2828;
t2993 = t2550 * t3002;
t3017 = t2993 * t2331 * t2523;
t3031 = (t2277 * t3017 - (pkin(6) * t2272 - t2277 * t2673) * t2532) * t2523 - t2315 * t2990 - (-t2296 * t2912 + t2315 * t2645) * t2524;
t2297 = t2401 * t2595 + t2402 * t2559;
t2273 = t2297 * t2349;
t2280 = ((-0.2e1 * t2649 + t2682) * t2493 + t2373 * t2490) * t2520 + (t2352 * t2490 + t2355 * t2493) * t2541 + (t2367 * t2490 + t2370 * t2493) * t2546;
t2699 = t2402 * t2882;
t2314 = -(t2401 * t2541 + t2402 * t2871) * t2979 + (pkin(3) * t2699 + (-pkin(2) * t2401 + t2524 * t2840) * t2541 - (t2402 * t2982 + t2841) * t2532) * t2540 + pkin(2) * t2699;
t3030 = (t2280 * t3017 - (pkin(6) * t2273 - t2280 * t2673) * t2532) * t2523 - t2314 * t2990 - (-t2297 * t2912 + t2314 * t2645) * t2524;
t2525 = legFrame(3,3);
t2489 = sin(t2525);
t2492 = cos(t2525);
t2530 = sin(qJ(1,3));
t2539 = cos(qJ(1,3));
t2399 = t2539 * t2489 + t2530 * t2492;
t2400 = -t2530 * t2489 + t2539 * t2492;
t2538 = cos(qJ(2,3));
t2479 = t2546 * t2538;
t2529 = sin(qJ(2,3));
t2518 = t2538 ^ 2;
t2798 = (t2518 - 0.1e1) * pkin(2);
t2420 = t2479 * t2529 + t2798;
t2976 = t2529 * pkin(2);
t2433 = t2479 - t2976;
t2485 = t2518 - 0.2e1;
t2528 = sin(qJ(3,3));
t2497 = t2528 * pkin(3);
t2537 = cos(qJ(3,3));
t2792 = t2528 * pkin(6) + pkin(3);
t2517 = t2537 ^ 2;
t2980 = t2517 * pkin(3);
t2560 = ((t2485 * t2497 - pkin(6)) * t2537 + t2528 * t2420) * t2885 - (t2433 * t2537 + (t2792 - 0.2e1 * t2980) * t2529) * t2511 - t2529 * (-t2792 + t2980);
t2476 = t2546 * t2529;
t2501 = t2538 * pkin(2);
t2430 = t2501 + t2476;
t2427 = pkin(1) + t2430;
t2846 = t2537 * t2538;
t2858 = t2529 * t2537;
t2868 = t2524 * t2537;
t2884 = t2523 * t2528;
t3003 = t2501 + pkin(1);
t2596 = -(t3003 * t2529 + t2546 + (pkin(3) * t2858 - t2479) * t2538) * t2884 + (pkin(3) * t2846 + t2427) * t2868;
t2294 = -t2399 * t2560 + t2400 * t2596;
t2500 = t2537 * pkin(3);
t2464 = t2500 + pkin(2);
t2617 = -t2430 * pkin(6) + t2497 * t3003;
t2977 = t2528 * pkin(2);
t2807 = t2427 * t2977;
t2833 = pkin(6) * t2980;
t2348 = 0.1e1 / (pkin(1) * (-t2464 * t2529 + t2479) * t2868 + t2523 * (t2537 * t2617 - t2538 * t2833 + t2807));
t2270 = t2294 * t2348;
t2458 = t2497 + pkin(6);
t2873 = t2524 * t2529;
t2892 = t2464 * t2523;
t2898 = (t2500 + t2512) * (t2500 + t2513);
t2363 = -t2458 * t2892 + t2873 * t2898;
t2895 = (t2547 * t2529 + pkin(1)) * t2464;
t2351 = -t2363 * t2530 + t2539 * t2895;
t2354 = t2363 * t2539 + t2530 * t2895;
t2883 = t2523 * t2529;
t2384 = -t2458 * t2883 + t2524 * t2464;
t2506 = pkin(1) * t2529;
t2470 = t2506 + pkin(7);
t2455 = pkin(8) + t2470;
t2366 = -t2530 * t2384 + t2455 * t2539;
t2369 = t2384 * t2539 + t2530 * t2455;
t2696 = t2464 * t2862;
t2372 = 0.2e1 * t2530 * t2696 + t2539 * t2898;
t2650 = t2539 * t2696;
t2684 = t2530 * t2898;
t2276 = (t2372 * t2492 + 0.2e1 * (t2650 - t2684 / 0.2e1) * t2489) * t2518 + (t2351 * t2492 - t2489 * t2354) * t2538 + (t2366 * t2492 - t2489 * t2369) * t2546;
t2702 = t2399 * t2884;
t2842 = t2546 * t2400;
t2843 = t2546 * t2399;
t2313 = -(-t2399 * t2873 + t2400 * t2538) * t2980 + (-pkin(3) * t2702 + (-pkin(2) * t2400 - t2524 * t2843) * t2538 + (t2399 * t2982 - t2842) * t2529) * t2537 - pkin(2) * t2702;
t2806 = pkin(6) * t2883;
t2411 = t2433 * t2986;
t2459 = t2497 - pkin(6);
t2641 = pkin(1) * t2497 - pkin(6) * t2476;
t2878 = t2523 * t2538;
t2801 = pkin(6) * t2878;
t2817 = pkin(1) * t2873;
t2418 = t2801 + t2817;
t2644 = -t2418 * t2980 + t2523 * t2807;
t2343 = ((t2459 * t2501 + t2641) * t2523 + t2411) * t2537 + t2644;
t2338 = 0.1e1 / t2343;
t2829 = 0.2e1 * t2338;
t2646 = t2806 * t2829;
t2330 = 0.1e1 / (t2454 * t2846 + (t2423 * t2537 - t2517 * t2834) * t2529 + ((pkin(2) * t2459 * t2537 - t2833) * t2538 + (pkin(1) * t2464 + pkin(2) * t2476 + t2551 * t2538) * t2528) * t2523);
t2674 = t2330 * t2810;
t2985 = pkin(1) * t2538;
t2473 = t2548 + t2985;
t2919 = t2348 * t2473;
t2437 = pkin(7) * t2529 + t3003;
t2857 = t2529 * t2538;
t2989 = ((pkin(7) * t2857 + t2798) * t2511 - t2437 * t2538) * t2829;
t2992 = t2550 * t3003;
t3018 = t2992 * t2330 * t2523;
t3029 = (t2276 * t3018 - (pkin(6) * t2270 - t2276 * t2674) * t2529) * t2523 - t2313 * t2989 - (-t2294 * t2919 + t2313 * t2646) * t2524;
t2295 = t2399 * t2596 + t2400 * t2560;
t2271 = t2295 * t2348;
t2279 = ((-0.2e1 * t2650 + t2684) * t2492 + t2372 * t2489) * t2518 + (t2351 * t2489 + t2354 * t2492) * t2538 + (t2366 * t2489 + t2369 * t2492) * t2546;
t2701 = t2400 * t2884;
t2312 = -(t2399 * t2538 + t2400 * t2873) * t2980 + (pkin(3) * t2701 + (-pkin(2) * t2399 + t2524 * t2842) * t2538 - (t2400 * t2982 + t2843) * t2529) * t2537 + pkin(2) * t2701;
t3028 = (t2279 * t3018 - (pkin(6) * t2271 - t2279 * t2674) * t2529) * t2523 - t2312 * t2989 - (-t2295 * t2919 + t2312 * t2646) * t2524;
t2668 = (0.2e1 * t2517 - 0.1e1) * t2883;
t2677 = t2485 * t2511 - t2518;
t2860 = t2528 * t2537;
t2972 = (t2511 - 0.1e1) * pkin(6);
t2303 = ((-t2433 * t2885 + t2972) * t2537 + (-t2420 * t2511 + t2538 * t2427 - t2524 * t2806) * t2528 + (-(t2677 + 0.1e1) * t2860 + t2524 * t2668) * pkin(3)) / ((t2523 * t2617 + t2411) * t2537 + t2644);
t2874 = t2524 * t2528;
t2360 = -t2883 * t2980 + (-pkin(3) * t2874 + t2433 * t2523) * t2537 - pkin(2) * t2874;
t2509 = pkin(1) * t2546;
t2549 = pkin(3) ^ 2;
t2693 = t2523 * t2862;
t2826 = -0.2e1 * (t2524 + 0.1e1) * (t2524 - 0.1e1);
t2867 = t2524 * t2538;
t2886 = t2512 * t2513;
t2988 = -0.2e1 * pkin(2);
t2971 = pkin(3) * t2988;
t2946 = (t2509 * t2538 + (-t2458 * t2523 * t2867 - t2455 + (t2518 * t2826 + t2511) * t2546) * t2464 + ((t2511 * t2898 - t2517 * t2549 + t2537 * t2971 - t2886) * t2538 - t2458 * t2693) * t2529) / ((t2537 * t2454 - (pkin(6) * t2537 - t2977) * t2892) * t2538 - t2537 * t2464 * t2817 + (t2641 * t2537 + (t2476 + pkin(1)) * t2977) * t2523);
t2750 = t2550 * t2946;
t2671 = pkin(7) * t2750;
t3021 = t2523 * (t2946 * t2992 + (pkin(6) * t2303 + t2671) * t2529) + t2360 * t2989 + (-t2303 * t2473 + t2360 * t2646) * t2524;
t2666 = (0.2e1 * t2519 - 0.1e1) * t2881;
t2676 = t2486 * t2511 - t2520;
t2855 = t2531 * t2540;
t2304 = ((-t2434 * t2885 + t2972) * t2540 + (-t2421 * t2511 + t2541 * t2428 - t2524 * t2804) * t2531 + (-(t2676 + 0.1e1) * t2855 + t2524 * t2666) * pkin(3)) / ((t2523 * t2616 + t2412) * t2540 + t2643);
t2872 = t2524 * t2531;
t2361 = -t2881 * t2979 + (-pkin(3) * t2872 + t2434 * t2523) * t2540 - pkin(2) * t2872;
t2865 = t2524 * t2541;
t2945 = (t2509 * t2541 + (-t2460 * t2523 * t2865 - t2456 + (t2520 * t2826 + t2511) * t2546) * t2466 + ((t2511 * t2897 - t2519 * t2549 + t2540 * t2971 - t2886) * t2541 - t2460 * t2693) * t2532) / ((t2540 * t2454 - (pkin(6) * t2540 - t2975) * t2891) * t2541 - t2540 * t2466 * t2816 + (t2640 * t2540 + (t2477 + pkin(1)) * t2975) * t2523);
t2749 = t2550 * t2945;
t2670 = pkin(7) * t2749;
t3020 = t2523 * (t2945 * t2993 + (pkin(6) * t2304 + t2670) * t2532) + t2361 * t2990 + (-t2304 * t2474 + t2361 * t2645) * t2524;
t2664 = (0.2e1 * t2521 - 0.1e1) * t2879;
t2675 = t2487 * t2511 - t2522;
t2850 = t2534 * t2543;
t2305 = ((-t2435 * t2885 + t2972) * t2543 + (-t2422 * t2511 + t2544 * t2429 - t2524 * t2802) * t2534 + (-(t2675 + 0.1e1) * t2850 + t2524 * t2664) * pkin(3)) / ((t2523 * t2615 + t2413) * t2543 + t2642);
t2870 = t2524 * t2534;
t2362 = -t2879 * t2978 + (-pkin(3) * t2870 + t2435 * t2523) * t2543 - pkin(2) * t2870;
t2863 = t2524 * t2544;
t2944 = (t2509 * t2544 + (-t2462 * t2523 * t2863 - t2457 + (t2522 * t2826 + t2511) * t2546) * t2468 + ((t2511 * t2896 - t2521 * t2549 + t2543 * t2971 - t2886) * t2544 - t2462 * t2693) * t2535) / ((t2543 * t2454 - (pkin(6) * t2543 - t2981) * t2890) * t2544 - t2543 * t2468 * t2808 + (t2639 * t2543 + (t2478 + pkin(1)) * t2981) * t2523);
t2748 = t2550 * t2944;
t2669 = pkin(7) * t2748;
t3019 = t2523 * (t2944 * t2994 + (pkin(6) * t2305 + t2669) * t2535) + t2362 * t2991 + (-t2305 * t2475 + t2362 * t2647) * t2524;
t3000 = t2312 * t2313;
t2999 = t2314 * t2315;
t2998 = t2316 * t2317;
t2987 = 0.2e1 * t2511 - 0.2e1;
t2952 = t2276 * t2330;
t2951 = t2277 * t2331;
t2950 = t2278 * t2332;
t2949 = t2279 * t2330;
t2948 = t2280 * t2331;
t2947 = t2281 * t2332;
t2288 = t2312 * t2338;
t2289 = t2313 * t2338;
t2290 = t2314 * t2340;
t2291 = t2315 * t2340;
t2292 = t2316 * t2336;
t2293 = t2317 * t2336;
t2943 = t2330 * t2550;
t2942 = t2331 * t2550;
t2941 = t2332 * t2550;
t2630 = -t2544 * pkin(7) + t2973;
t2940 = t2336 * t2630;
t2939 = t2336 * t2523;
t2938 = t2336 * t2524;
t2937 = t2336 * t2544;
t2337 = 0.1e1 / t2342 ^ 2;
t2936 = t2337 * t2362;
t2516 = t2535 ^ 2;
t2935 = t2337 * t2516;
t2632 = -t2538 * pkin(7) + t2976;
t2934 = t2338 * t2632;
t2933 = t2338 * t2523;
t2932 = t2338 * t2524;
t2931 = t2338 * t2538;
t2339 = 0.1e1 / t2343 ^ 2;
t2930 = t2339 * t2360;
t2514 = t2529 ^ 2;
t2929 = t2339 * t2514;
t2631 = -t2541 * pkin(7) + t2974;
t2928 = t2340 * t2631;
t2927 = t2340 * t2523;
t2926 = t2340 * t2524;
t2925 = t2340 * t2541;
t2341 = 0.1e1 / t2344 ^ 2;
t2924 = t2341 * t2361;
t2515 = t2532 ^ 2;
t2923 = t2341 * t2515;
t2922 = t2348 * t2360;
t2414 = pkin(1) * t2867 - t2806;
t2921 = t2348 * t2414;
t2920 = t2348 * t2418;
t2918 = t2348 * t2524;
t2917 = t2348 * t2528;
t2916 = t2348 * t2537;
t2915 = t2349 * t2361;
t2415 = pkin(1) * t2865 - t2804;
t2914 = t2349 * t2415;
t2913 = t2349 * t2419;
t2911 = t2349 * t2524;
t2910 = t2349 * t2531;
t2909 = t2349 * t2540;
t2908 = t2350 * t2362;
t2416 = pkin(1) * t2863 - t2802;
t2907 = t2350 * t2416;
t2906 = t2350 * t2417;
t2904 = t2350 * t2524;
t2903 = t2350 * t2534;
t2902 = t2350 * t2543;
t2357 = t2360 ^ 2;
t2901 = t2357 * t2339;
t2358 = t2361 ^ 2;
t2900 = t2358 * t2341;
t2359 = t2362 ^ 2;
t2899 = t2359 * t2337;
t2324 = t2360 * t2338;
t2325 = t2361 * t2340;
t2326 = t2362 * t2336;
t2889 = t2470 * t2524;
t2888 = t2471 * t2524;
t2887 = t2472 * t2524;
t2861 = t2528 * t2529;
t2859 = t2528 * t2538;
t2856 = t2531 * t2532;
t2854 = t2531 * t2541;
t2851 = t2534 * t2535;
t2849 = t2534 * t2544;
t2837 = t2348 * t2988;
t2836 = t2349 * t2988;
t2835 = t2350 * t2988;
t2510 = t2523 ^ 2;
t2827 = 0.2e1 * t2510;
t2825 = -0.2e1 * t2885;
t2824 = -0.2e1 * t2860;
t2823 = 0.2e1 * t2860;
t2822 = -0.2e1 * t2855;
t2821 = 0.2e1 * t2855;
t2820 = -0.2e1 * t2850;
t2819 = 0.2e1 * t2850;
t2818 = t2987 * pkin(6);
t2815 = pkin(2) * t2303;
t2814 = pkin(2) * t2304;
t2813 = pkin(7) * t2303;
t2812 = pkin(7) * t2304;
t2811 = pkin(7) * t2305;
t2809 = pkin(2) * t2305;
t2789 = t2276 * t2943;
t2788 = t2277 * t2942;
t2787 = t2278 * t2941;
t2786 = t2279 * t2943;
t2785 = t2280 * t2942;
t2784 = t2281 * t2941;
t2783 = t2294 * t2921;
t2782 = t2294 * t2920;
t2781 = t2294 * t2917;
t2780 = t2294 * t2916;
t2779 = t2295 * t2921;
t2778 = t2295 * t2920;
t2777 = t2295 * t2917;
t2776 = t2295 * t2916;
t2775 = t2296 * t2914;
t2774 = t2296 * t2913;
t2773 = t2296 * t2910;
t2772 = t2296 * t2909;
t2771 = t2297 * t2914;
t2770 = t2297 * t2913;
t2769 = t2297 * t2910;
t2768 = t2297 * t2909;
t2767 = t2298 * t2907;
t2766 = t2298 * t2906;
t2765 = t2298 * t2903;
t2764 = t2298 * t2902;
t2763 = t2299 * t2907;
t2762 = t2299 * t2906;
t2761 = t2299 * t2903;
t2760 = t2299 * t2902;
t2759 = t2312 * t2931;
t2758 = t2313 * t2931;
t2757 = t2339 * t3000;
t2756 = t2314 * t2925;
t2755 = t2315 * t2925;
t2754 = t2341 * t2999;
t2753 = t2316 * t2937;
t2752 = t2317 * t2937;
t2751 = t2337 * t2998;
t2747 = t2414 * t2303;
t2746 = t2418 * t2303;
t2745 = t2528 * t2303;
t2744 = t2537 * t2303;
t2743 = t2415 * t2304;
t2742 = t2419 * t2304;
t2741 = t2531 * t2304;
t2740 = t2540 * t2304;
t2739 = t2416 * t2305;
t2738 = t2417 * t2305;
t2737 = t2534 * t2305;
t2736 = t2543 * t2305;
t2685 = t2523 * t2861;
t2405 = t2685 - t2868;
t2735 = t2405 * t2943;
t2692 = t2523 * t2858;
t2407 = t2692 + t2874;
t2734 = t2407 * t2943;
t2683 = t2523 * t2856;
t2406 = t2683 - t2866;
t2733 = t2406 * t2942;
t2691 = t2523 * t2853;
t2408 = t2691 + t2872;
t2732 = t2408 * t2942;
t2690 = t2523 * t2851;
t2409 = t2690 - t2864;
t2731 = t2409 * t2941;
t2689 = t2523 * t2848;
t2410 = t2689 + t2870;
t2730 = t2410 * t2941;
t2729 = t2544 * t2326;
t2728 = (pkin(6) * t2849 + t2543 * t2441) * t2939;
t2727 = (-pkin(6) * t2844 + t2534 * t2441) * t2939;
t2726 = t2362 * t2935;
t2725 = t2337 * t2847;
t2724 = t2538 * t2324;
t2723 = (pkin(6) * t2859 + t2537 * t2437) * t2933;
t2722 = (-pkin(6) * t2846 + t2528 * t2437) * t2933;
t2721 = t2360 * t2929;
t2720 = t2339 * t2857;
t2719 = t2541 * t2325;
t2718 = (-pkin(6) * t2845 + t2531 * t2439) * t2927;
t2717 = (pkin(6) * t2854 + t2540 * t2439) * t2927;
t2716 = t2361 * t2923;
t2715 = t2341 * t2852;
t2714 = t2360 * t2921;
t2713 = t2360 * t2920;
t2712 = t2348 * t2859;
t2711 = t2348 * t2846;
t2710 = t2361 * t2914;
t2709 = t2361 * t2913;
t2708 = t2349 * t2854;
t2707 = t2349 * t2845;
t2706 = t2362 * t2907;
t2705 = t2362 * t2906;
t2704 = t2350 * t2849;
t2703 = t2350 * t2844;
t2282 = t2312 * t2932;
t2283 = t2313 * t2932;
t2284 = t2314 * t2926;
t2285 = t2315 * t2926;
t2286 = t2316 * t2938;
t2287 = t2317 * t2938;
t2688 = t2524 * t2303;
t2687 = t2524 * t2304;
t2686 = t2524 * t2305;
t2321 = t2524 * t2324;
t2322 = t2524 * t2325;
t2323 = t2524 * t2326;
t2680 = t2918 / 0.2e1;
t2679 = t2911 / 0.2e1;
t2678 = t2904 / 0.2e1;
t2667 = (0.4e1 * t2517 - 0.2e1) * t2883;
t2665 = (0.4e1 * t2519 - 0.2e1) * t2881;
t2663 = (0.4e1 * t2521 - 0.2e1) * t2879;
t2662 = t2878 * t2303;
t2661 = t2877 * t2304;
t2660 = t2876 * t2305;
t2659 = t2336 * t2690;
t2658 = t2336 * t2689;
t2657 = t2362 * t2725;
t2656 = t2338 * t2685;
t2655 = t2338 * t2692;
t2654 = t2360 * t2720;
t2653 = t2340 * t2683;
t2652 = t2340 * t2691;
t2651 = t2361 * t2715;
t2629 = 0.2e1 * t2537 * t2685;
t2628 = 0.2e1 * t2540 * t2683;
t2627 = 0.2e1 * t2534 * t2689;
t2626 = t2336 * t2675;
t2625 = t2338 * t2677;
t2624 = t2340 * t2676;
t2623 = t2336 * t2664;
t2622 = t2338 * t2668;
t2621 = t2340 * t2666;
t2614 = t2348 * t2632;
t2613 = t2349 * t2631;
t2612 = t2350 * t2630;
t2216 = 0.2e1 * t2282 + t2271;
t2611 = (t2216 + t2271) * t2288;
t2218 = 0.2e1 * t2283 + t2270;
t2610 = (t2218 + t2270) * t2289;
t2220 = 0.2e1 * t2284 + t2273;
t2609 = (t2220 + t2273) * t2290;
t2222 = 0.2e1 * t2285 + t2272;
t2608 = (t2222 + t2272) * t2291;
t2224 = 0.2e1 * t2286 + t2275;
t2607 = (t2224 + t2275) * t2292;
t2226 = 0.2e1 * t2287 + t2274;
t2606 = (t2226 + t2274) * t2293;
t2268 = 0.2e1 * t2323 + t2305;
t2605 = (t2268 + t2305) * t2326;
t2264 = 0.2e1 * t2321 + t2303;
t2604 = (t2264 + t2303) * t2324;
t2266 = 0.2e1 * t2322 + t2304;
t2603 = (t2266 + t2304) * t2325;
t2593 = t2336 * (-t2475 * t2524 + t2802);
t2592 = t2338 * (-t2473 * t2524 + t2806);
t2591 = t2340 * (-t2474 * t2524 + t2804);
t2590 = t2336 * (t2224 * t2317 + t2274 * t2316);
t2589 = t2336 * (t2224 * t2362 + t2305 * t2316);
t2588 = t2336 * (t2226 * t2316 + t2275 * t2317);
t2587 = t2336 * (t2226 * t2362 + t2305 * t2317);
t2586 = t2336 * (t2268 * t2317 + t2298 * t2908);
t2585 = t2336 * (t2268 * t2316 + t2299 * t2908);
t2584 = t2338 * (t2216 * t2313 + t2270 * t2312);
t2583 = t2338 * (t2216 * t2360 + t2303 * t2312);
t2582 = t2338 * (t2218 * t2312 + t2271 * t2313);
t2581 = t2338 * (t2218 * t2360 + t2303 * t2313);
t2580 = t2338 * (t2264 * t2313 + t2294 * t2922);
t2579 = t2338 * (t2264 * t2312 + t2295 * t2922);
t2578 = t2340 * (t2220 * t2315 + t2272 * t2314);
t2577 = t2340 * (t2220 * t2361 + t2304 * t2314);
t2576 = t2340 * (t2222 * t2314 + t2273 * t2315);
t2575 = t2340 * (t2222 * t2361 + t2304 * t2315);
t2574 = t2340 * (t2266 * t2315 + t2296 * t2915);
t2573 = t2340 * (t2266 * t2314 + t2297 * t2915);
t2566 = t2336 * (-t2630 * t2825 + t2818);
t2565 = t2338 * (-t2632 * t2825 + t2818);
t2564 = t2340 * (-t2631 * t2825 + t2818);
t2563 = (-t2801 - t2889) * t2943;
t2562 = (-t2800 - t2888) * t2942;
t2561 = (-t2799 - t2887) * t2941;
t2557 = (t2534 * t2825 + t2987 * t2848) * t2937;
t2556 = (t2543 * t2825 - t2987 * t2851) * t2937;
t2555 = (t2528 * t2825 + t2987 * t2858) * t2931;
t2554 = (t2537 * t2825 - t2987 * t2861) * t2931;
t2553 = (t2531 * t2825 + t2987 * t2853) * t2925;
t2552 = (t2540 * t2825 - t2987 * t2856) * t2925;
t2311 = t2317 ^ 2;
t2310 = t2316 ^ 2;
t2309 = t2315 ^ 2;
t2308 = t2314 ^ 2;
t2307 = t2313 ^ 2;
t2306 = t2312 ^ 2;
t2269 = t2323 + t2305;
t2267 = t2322 + t2304;
t2265 = t2321 + t2303;
t2263 = t2323 + t2305 / 0.2e1;
t2262 = t2322 + t2304 / 0.2e1;
t2261 = t2321 + t2303 / 0.2e1;
t2260 = t2686 / 0.2e1 + t2326;
t2259 = t2687 / 0.2e1 + t2325;
t2258 = t2688 / 0.2e1 + t2324;
t2257 = t2323 * t2472 + t2811;
t2256 = t2322 * t2471 + t2812;
t2255 = t2321 * t2470 + t2813;
t2251 = t2523 * t2729 - t2748;
t2250 = t2523 * t2719 - t2749;
t2249 = t2523 * t2724 - t2750;
t2248 = t2326 * t2523 * t2630 + t2669;
t2247 = t2325 * t2523 * t2631 + t2670;
t2246 = t2324 * t2523 * t2632 + t2671;
t2242 = t2534 * t2269 + t2362 * t2658;
t2241 = t2531 * t2267 + t2361 * t2652;
t2240 = t2528 * t2265 + t2360 * t2655;
t2239 = t2543 * t2269 - t2362 * t2659;
t2238 = t2540 * t2267 - t2361 * t2653;
t2237 = t2537 * t2265 - t2360 * t2656;
t2236 = t2362 * t2593 - 0.2e1 * t2809;
t2235 = t2361 * t2591 - 0.2e1 * t2814;
t2234 = t2360 * t2592 - 0.2e1 * t2815;
t2233 = -t2257 * t2543 + t2362 * t2727;
t2232 = -t2257 * t2534 - t2362 * t2728;
t2231 = -t2531 * t2256 - t2361 * t2717;
t2230 = -t2540 * t2256 + t2361 * t2718;
t2229 = -t2537 * t2255 + t2360 * t2722;
t2228 = -t2528 * t2255 - t2360 * t2723;
t2227 = t2287 + t2274;
t2225 = t2286 + t2275;
t2223 = t2285 + t2272;
t2221 = t2284 + t2273;
t2219 = t2283 + t2270;
t2217 = t2282 + t2271;
t2215 = t2287 + t2274 / 0.2e1;
t2214 = t2286 + t2275 / 0.2e1;
t2213 = t2285 + t2272 / 0.2e1;
t2212 = t2284 + t2273 / 0.2e1;
t2211 = t2283 + t2270 / 0.2e1;
t2210 = t2282 + t2271 / 0.2e1;
t2209 = t2299 * t2678 + t2292;
t2208 = t2298 * t2678 + t2293;
t2207 = t2297 * t2679 + t2290;
t2206 = t2296 * t2679 + t2291;
t2205 = t2295 * t2680 + t2288;
t2204 = t2294 * t2680 + t2289;
t2203 = pkin(7) * t2274 + t2287 * t2472;
t2202 = pkin(7) * t2275 + t2286 * t2472;
t2201 = pkin(7) * t2272 + t2285 * t2471;
t2200 = pkin(7) * t2273 + t2284 * t2471;
t2199 = pkin(7) * t2270 + t2283 * t2470;
t2198 = pkin(7) * t2271 + t2282 * t2470;
t2191 = t2362 * t2626 + t2326 - t2686;
t2190 = t2361 * t2624 + t2325 - t2687;
t2189 = t2360 * t2625 + t2324 - t2688;
t2188 = t2269 * t2819 + t2362 * t2623;
t2187 = t2267 * t2821 + t2361 * t2621;
t2186 = t2265 * t2823 + t2360 * t2622;
t2185 = (t2753 + t2784) * t2523;
t2184 = (t2756 + t2785) * t2523;
t2183 = (t2759 + t2786) * t2523;
t2182 = (t2752 + t2787) * t2523;
t2181 = (t2755 + t2788) * t2523;
t2180 = (t2758 + t2789) * t2523;
t2179 = (-pkin(7) * t2784 + t2316 * t2940) * t2523;
t2178 = (-pkin(7) * t2785 + t2314 * t2928) * t2523;
t2177 = (-pkin(7) * t2786 + t2312 * t2934) * t2523;
t2176 = -0.2e1 * t2260 * t2508 - 0.2e1 * t2263 * t2799;
t2175 = -0.2e1 * t2258 * t2506 - 0.2e1 * t2261 * t2801;
t2174 = -0.2e1 * t2259 * t2507 - 0.2e1 * t2262 * t2800;
t2173 = 0.2e1 * t2260 * t2983 - 0.2e1 * t2263 * t2802;
t2172 = 0.2e1 * t2259 * t2984 - 0.2e1 * t2262 * t2804;
t2171 = 0.2e1 * t2258 * t2985 - 0.2e1 * t2261 * t2806;
t2170 = (-pkin(7) * t2787 + t2317 * t2940) * t2523;
t2169 = (-pkin(7) * t2788 + t2315 * t2928) * t2523;
t2168 = (-pkin(7) * t2789 + t2313 * t2934) * t2523;
t2161 = -t2236 * t2543 - t2248 * t2534;
t2160 = t2236 * t2534 - t2248 * t2543;
t2159 = -t2235 * t2540 - t2531 * t2247;
t2158 = t2235 * t2531 - t2247 * t2540;
t2157 = -t2234 * t2537 - t2246 * t2528;
t2156 = t2234 * t2528 - t2246 * t2537;
t2155 = t2362 * t2557 + t2410 * t2748 - t2534 * t2660;
t2154 = t2361 * t2553 + t2408 * t2749 - t2531 * t2661;
t2153 = t2360 * t2555 + t2407 * t2750 - t2528 * t2662;
t2152 = t2362 * t2556 - t2409 * t2748 - t2543 * t2660;
t2151 = t2361 * t2552 - t2406 * t2749 - t2540 * t2661;
t2150 = t2360 * t2554 - t2405 * t2750 - t2537 * t2662;
t2149 = t2534 * t2227 + t2317 * t2658;
t2148 = t2534 * t2225 + t2316 * t2658;
t2147 = t2531 * t2223 + t2315 * t2652;
t2146 = t2531 * t2221 + t2314 * t2652;
t2145 = t2528 * t2219 + t2313 * t2655;
t2144 = t2528 * t2217 + t2312 * t2655;
t2143 = t2543 * t2227 - t2317 * t2659;
t2142 = t2543 * t2225 - t2316 * t2659;
t2141 = t2540 * t2223 - t2315 * t2653;
t2140 = t2540 * t2221 - t2314 * t2653;
t2139 = t2537 * t2219 - t2313 * t2656;
t2138 = t2537 * t2217 - t2312 * t2656;
t2137 = t2298 * t2835 + t2317 * t2593;
t2136 = t2299 * t2835 + t2316 * t2593;
t2135 = t2296 * t2836 + t2315 * t2591;
t2134 = t2297 * t2836 + t2314 * t2591;
t2133 = t2294 * t2837 + t2313 * t2592;
t2132 = t2295 * t2837 + t2312 * t2592;
t2131 = -t2203 * t2543 + t2317 * t2727;
t2130 = -t2203 * t2534 - t2317 * t2728;
t2129 = -t2202 * t2543 + t2316 * t2727;
t2128 = -t2202 * t2534 - t2316 * t2728;
t2127 = -t2531 * t2201 - t2315 * t2717;
t2126 = -t2540 * t2201 + t2315 * t2718;
t2125 = -t2531 * t2200 - t2314 * t2717;
t2124 = -t2540 * t2200 + t2314 * t2718;
t2123 = -t2537 * t2199 + t2313 * t2722;
t2122 = -t2528 * t2199 - t2313 * t2723;
t2121 = -t2537 * t2198 + t2312 * t2722;
t2120 = -t2528 * t2198 - t2312 * t2723;
t2119 = t2313 * t2930 + t2315 * t2924 + t2317 * t2936;
t2118 = t2312 * t2930 + t2314 * t2924 + t2316 * t2936;
t2117 = (t2313 * t2721 + t2315 * t2716 + t2317 * t2726) * t2510;
t2116 = (t2312 * t2721 + t2314 * t2716 + t2316 * t2726) * t2510;
t2115 = (t2313 * t2654 + t2315 * t2651 + t2317 * t2657) * t2827;
t2114 = (t2312 * t2654 + t2314 * t2651 + t2316 * t2657) * t2827;
t2113 = -t2298 * t2904 + t2317 * t2626 + t2293;
t2112 = -t2299 * t2904 + t2316 * t2626 + t2292;
t2111 = -t2296 * t2911 + t2315 * t2624 + t2291;
t2110 = -t2297 * t2911 + t2314 * t2624 + t2290;
t2109 = -t2294 * t2918 + t2313 * t2625 + t2289;
t2108 = -t2295 * t2918 + t2312 * t2625 + t2288;
t2107 = t2227 * t2819 + t2317 * t2623;
t2106 = t2225 * t2819 + t2316 * t2623;
t2105 = t2223 * t2821 + t2315 * t2621;
t2104 = t2221 * t2821 + t2314 * t2621;
t2103 = t2219 * t2823 + t2313 * t2622;
t2102 = t2217 * t2823 + t2312 * t2622;
t2101 = -0.2e1 * t2208 * t2508 - 0.2e1 * t2215 * t2799;
t2100 = -0.2e1 * t2209 * t2508 - 0.2e1 * t2214 * t2799;
t2099 = -0.2e1 * t2204 * t2506 - 0.2e1 * t2211 * t2801;
t2098 = -0.2e1 * t2205 * t2506 - 0.2e1 * t2210 * t2801;
t2097 = -0.2e1 * t2206 * t2507 - 0.2e1 * t2213 * t2800;
t2096 = -0.2e1 * t2207 * t2507 - 0.2e1 * t2212 * t2800;
t2095 = 0.2e1 * t2208 * t2983 - 0.2e1 * t2215 * t2802;
t2094 = 0.2e1 * t2209 * t2983 - 0.2e1 * t2214 * t2802;
t2093 = 0.2e1 * t2206 * t2984 - 0.2e1 * t2213 * t2804;
t2092 = 0.2e1 * t2207 * t2984 - 0.2e1 * t2212 * t2804;
t2091 = 0.2e1 * t2204 * t2985 - 0.2e1 * t2211 * t2806;
t2090 = 0.2e1 * t2205 * t2985 - 0.2e1 * t2210 * t2806;
t2089 = t2748 * t2887 + ((pkin(6) * t2748 - t2811) * t2544 + t2535 * t2809) * t2523 + t2362 * t2566;
t2088 = t2749 * t2888 + ((pkin(6) * t2749 - t2812) * t2541 + t2532 * t2814) * t2523 + t2361 * t2564;
t2087 = t2750 * t2889 + ((pkin(6) * t2750 - t2813) * t2538 + t2529 * t2815) * t2523 + t2360 * t2565;
t2086 = t2191 * t2521 + t2263 * t2627 + t2269 * t2524;
t2085 = t2190 * t2519 + t2262 * t2628 + t2267 * t2524;
t2084 = t2189 * t2517 + t2261 * t2629 + t2265 * t2524;
t2083 = t2191 * t2820 + t2263 * t2663;
t2082 = t2190 * t2822 + t2262 * t2665;
t2081 = t2189 * t2824 + t2261 * t2667;
t2080 = t2751 + t2754 + t2757;
t2079 = (t2514 * t2757 + t2515 * t2754 + t2516 * t2751) * t2510;
t2078 = (t2715 * t2999 + t2720 * t3000 + t2725 * t2998) * t2827;
t2077 = -t2136 * t2543 - t2179 * t2534;
t2076 = t2136 * t2534 - t2179 * t2543;
t2075 = -t2134 * t2540 - t2531 * t2178;
t2074 = t2134 * t2531 - t2178 * t2540;
t2073 = -t2132 * t2537 - t2177 * t2528;
t2072 = t2132 * t2528 - t2177 * t2537;
t2071 = -t2137 * t2543 - t2170 * t2534;
t2070 = t2137 * t2534 - t2170 * t2543;
t2069 = -t2135 * t2540 - t2531 * t2169;
t2068 = t2135 * t2531 - t2169 * t2540;
t2067 = -t2133 * t2537 - t2168 * t2528;
t2066 = t2133 * t2528 - t2168 * t2537;
t2065 = (-t2281 * t2730 - t2299 * t2704) * t2523 + t2316 * t2557;
t2064 = (-t2280 * t2732 - t2297 * t2708) * t2523 + t2314 * t2553;
t2063 = (-t2279 * t2734 - t2295 * t2712) * t2523 + t2312 * t2555;
t2062 = (t2281 * t2731 - t2299 * t2703) * t2523 + t2316 * t2556;
t2061 = (t2280 * t2733 - t2297 * t2707) * t2523 + t2314 * t2552;
t2060 = (t2279 * t2735 - t2295 * t2711) * t2523 + t2312 * t2554;
t2059 = (-t2278 * t2730 - t2298 * t2704) * t2523 + t2317 * t2557;
t2058 = (-t2277 * t2732 - t2296 * t2708) * t2523 + t2315 * t2553;
t2057 = (-t2276 * t2734 - t2294 * t2712) * t2523 + t2313 * t2555;
t2056 = (t2278 * t2731 - t2298 * t2703) * t2523 + t2317 * t2556;
t2055 = (t2277 * t2733 - t2296 * t2707) * t2523 + t2315 * t2552;
t2054 = (t2276 * t2735 - t2294 * t2711) * t2523 + t2313 * t2554;
t2053 = (t2281 * t2561 + t2299 * t2612) * t2523 + t2316 * t2566;
t2052 = (t2280 * t2562 + t2297 * t2613) * t2523 + t2314 * t2564;
t2051 = (t2279 * t2563 + t2295 * t2614) * t2523 + t2312 * t2565;
t2050 = (t2278 * t2561 + t2298 * t2612) * t2523 + t2317 * t2566;
t2049 = (t2277 * t2562 + t2296 * t2613) * t2523 + t2315 * t2564;
t2048 = (t2276 * t2563 + t2294 * t2614) * t2523 + t2313 * t2565;
t2047 = t2113 * t2521 + t2215 * t2627 + t2227 * t2524;
t2046 = t2112 * t2521 + t2214 * t2627 + t2225 * t2524;
t2045 = t2111 * t2519 + t2213 * t2628 + t2223 * t2524;
t2044 = t2110 * t2519 + t2212 * t2628 + t2221 * t2524;
t2043 = t2109 * t2517 + t2211 * t2629 + t2219 * t2524;
t2042 = t2108 * t2517 + t2210 * t2629 + t2217 * t2524;
t2041 = t2113 * t2820 + t2215 * t2663;
t2040 = t2112 * t2820 + t2214 * t2663;
t2039 = t2111 * t2822 + t2213 * t2665;
t2038 = t2110 * t2822 + t2212 * t2665;
t2037 = t2109 * t2824 + t2211 * t2667;
t2036 = t2108 * t2824 + t2210 * t2667;
t2035 = -t2089 * t2534 - t3019 * t2543;
t2034 = -t2089 * t2543 + t3019 * t2534;
t2033 = -t2531 * t2088 - t3020 * t2540;
t2032 = -t2088 * t2540 + t3020 * t2531;
t2031 = -t2087 * t2528 - t3021 * t2537;
t2030 = -t2087 * t2537 + t3021 * t2528;
t2029 = -t2053 * t2534 + t3032 * t2543;
t2028 = -t2053 * t2543 - t3032 * t2534;
t2027 = -t2531 * t2052 + t2540 * t3030;
t2026 = -t2052 * t2540 - t2531 * t3030;
t2025 = -t2051 * t2528 + t2537 * t3028;
t2024 = -t2051 * t2537 - t2528 * t3028;
t2023 = -t2050 * t2534 + t3033 * t2543;
t2022 = -t2050 * t2543 - t3033 * t2534;
t2021 = -t2531 * t2049 + t3031 * t2540;
t2020 = -t2049 * t2540 - t3031 * t2531;
t2019 = -t2048 * t2528 + t2537 * t3029;
t2018 = -t2048 * t2537 - t2528 * t3029;
t1 = [t2307 * t2339 + t2309 * t2341 + t2311 * t2337, 0, 0, (t2307 * t2929 + t2309 * t2923 + t2311 * t2935) * t2510, (t2307 * t2720 + t2309 * t2715 + t2311 * t2725) * t2827, (t2529 * t2610 + t2532 * t2608 + t2535 * t2606) * t2523, (t2538 * t2610 + t2541 * t2608 + t2544 * t2606) * t2523, t2219 * t2270 + t2223 * t2272 + t2227 * t2274 + (t2219 * t2289 + t2223 * t2291 + t2227 * t2293) * t2524, (t2095 + t2767) * t2293 + (t2093 + t2775) * t2291 + (t2091 + t2783) * t2289, (t2101 - t2766) * t2293 + (t2097 - t2774) * t2291 + (t2099 - t2782) * t2289, t2043 * t2289 + t2045 * t2291 + t2047 * t2293 + t2145 * t2781 + t2147 * t2773 + t2149 * t2765, t2037 * t2289 + t2039 * t2291 + t2041 * t2293 + t2103 * t2270 + t2105 * t2272 + t2107 * t2274, -t2180 * t2781 - t2181 * t2773 - t2182 * t2765 + t2057 * t2289 + t2058 * t2291 + t2059 * t2293 + (-t2145 * t2952 - t2147 * t2951 - t2149 * t2950) * t2875, -t2180 * t2780 - t2181 * t2772 - t2182 * t2764 + t2054 * t2289 + t2055 * t2291 + t2056 * t2293 + (-t2139 * t2952 - t2141 * t2951 - t2143 * t2950) * t2875, (t2180 * t2758 + t2181 * t2755 + t2182 * t2752 + (t2180 * t2952 + t2181 * t2951 + t2182 * t2950) * t2550) * t2523, t2019 * t2289 + t2021 * t2291 + t2023 * t2293 + t2067 * t2270 + t2069 * t2272 + t2071 * t2274 + (-t2122 * t2952 - t2127 * t2951 - t2130 * t2950) * t2875, t2018 * t2289 + t2020 * t2291 + t2022 * t2293 + t2066 * t2270 + t2068 * t2272 + t2070 * t2274 + (-t2123 * t2952 - t2126 * t2951 - t2131 * t2950) * t2875, 1; t2080, 0, 0, t2079, t2078, (t2529 * t2584 + t2532 * t2578 + t2535 * t2590) * t2523, (t2538 * t2584 + t2541 * t2578 + t2544 * t2590) * t2523, t2217 * t2270 + t2221 * t2272 + t2225 * t2274 + (t2217 * t2289 + t2221 * t2291 + t2225 * t2293) * t2524, (t2092 * t2315 + t2314 * t2775) * t2340 + (t2090 * t2313 + t2312 * t2783) * t2338 + (t2094 * t2317 + t2316 * t2767) * t2336, (t2096 * t2315 - t2314 * t2774) * t2340 + (t2098 * t2313 - t2312 * t2782) * t2338 + (t2100 * t2317 - t2316 * t2766) * t2336, t2042 * t2289 + t2044 * t2291 + t2046 * t2293 + t2144 * t2781 + t2146 * t2773 + t2148 * t2765, t2036 * t2289 + t2038 * t2291 + t2040 * t2293 + t2102 * t2270 + t2104 * t2272 + t2106 * t2274, -t2183 * t2781 - t2184 * t2773 - t2185 * t2765 + t2063 * t2289 + t2064 * t2291 + t2065 * t2293 + (-t2144 * t2952 - t2146 * t2951 - t2148 * t2950) * t2875, -t2183 * t2780 - t2184 * t2772 - t2185 * t2764 + t2060 * t2289 + t2061 * t2291 + t2062 * t2293 + (-t2138 * t2952 - t2140 * t2951 - t2142 * t2950) * t2875, (t2183 * t2758 + t2184 * t2755 + t2185 * t2752 + (t2183 * t2952 + t2184 * t2951 + t2185 * t2950) * t2550) * t2523, t2025 * t2289 + t2027 * t2291 + t2029 * t2293 + t2073 * t2270 + t2075 * t2272 + t2077 * t2274 + (-t2120 * t2952 - t2125 * t2951 - t2128 * t2950) * t2875, t2024 * t2289 + t2026 * t2291 + t2028 * t2293 + t2072 * t2270 + t2074 * t2272 + t2076 * t2274 + (-t2121 * t2952 - t2124 * t2951 - t2129 * t2950) * t2875, 0; t2119, 0, 0, t2117, t2115, (t2529 * t2580 + t2532 * t2574 + t2535 * t2586) * t2523, (t2538 * t2580 + t2541 * t2574 + t2544 * t2586) * t2523, t2265 * t2270 + t2267 * t2272 + t2269 * t2274 + (t2265 * t2289 + t2267 * t2291 + t2269 * t2293) * t2524, (t2172 * t2315 + t2296 * t2710) * t2340 + (t2171 * t2313 + t2294 * t2714) * t2338 + (t2173 * t2317 + t2298 * t2706) * t2336, (t2174 * t2315 - t2296 * t2709) * t2340 + (t2175 * t2313 - t2294 * t2713) * t2338 + (t2176 * t2317 - t2298 * t2705) * t2336, t2084 * t2289 + t2085 * t2291 + t2086 * t2293 + t2240 * t2781 + t2241 * t2773 + t2242 * t2765, t2081 * t2289 + t2082 * t2291 + t2083 * t2293 + t2186 * t2270 + t2187 * t2272 + t2188 * t2274, -t2249 * t2781 - t2250 * t2773 - t2251 * t2765 + t2153 * t2289 + t2154 * t2291 + t2155 * t2293 + (-t2240 * t2952 - t2241 * t2951 - t2242 * t2950) * t2875, -t2249 * t2780 - t2250 * t2772 - t2251 * t2764 + t2150 * t2289 + t2151 * t2291 + t2152 * t2293 + (-t2237 * t2952 - t2238 * t2951 - t2239 * t2950) * t2875, (t2249 * t2758 + t2250 * t2755 + t2251 * t2752 + (t2249 * t2952 + t2250 * t2951 + t2251 * t2950) * t2550) * t2523, t2031 * t2289 + t2033 * t2291 + t2035 * t2293 + t2157 * t2270 + t2159 * t2272 + t2161 * t2274 + (-t2228 * t2952 - t2231 * t2951 - t2232 * t2950) * t2875, t2030 * t2289 + t2032 * t2291 + t2034 * t2293 + t2156 * t2270 + t2158 * t2272 + t2160 * t2274 + (-t2229 * t2952 - t2230 * t2951 - t2233 * t2950) * t2875, 0; t2080, 0, 0, t2079, t2078, (t2529 * t2582 + t2532 * t2576 + t2535 * t2588) * t2523, (t2538 * t2582 + t2541 * t2576 + t2544 * t2588) * t2523, t2219 * t2271 + t2223 * t2273 + t2227 * t2275 + (t2219 * t2288 + t2223 * t2290 + t2227 * t2292) * t2524, (t2093 * t2314 + t2315 * t2771) * t2340 + (t2091 * t2312 + t2313 * t2779) * t2338 + (t2095 * t2316 + t2317 * t2763) * t2336, (t2097 * t2314 - t2315 * t2770) * t2340 + (t2099 * t2312 - t2313 * t2778) * t2338 + (t2101 * t2316 - t2317 * t2762) * t2336, t2043 * t2288 + t2045 * t2290 + t2047 * t2292 + t2145 * t2777 + t2147 * t2769 + t2149 * t2761, t2037 * t2288 + t2039 * t2290 + t2041 * t2292 + t2103 * t2271 + t2105 * t2273 + t2107 * t2275, -t2180 * t2777 - t2181 * t2769 - t2182 * t2761 + t2057 * t2288 + t2058 * t2290 + t2059 * t2292 + (-t2145 * t2949 - t2147 * t2948 - t2149 * t2947) * t2875, -t2180 * t2776 - t2181 * t2768 - t2182 * t2760 + t2054 * t2288 + t2055 * t2290 + t2056 * t2292 + (-t2139 * t2949 - t2141 * t2948 - t2143 * t2947) * t2875, (t2180 * t2759 + t2181 * t2756 + t2182 * t2753 + (t2180 * t2949 + t2181 * t2948 + t2182 * t2947) * t2550) * t2523, t2019 * t2288 + t2021 * t2290 + t2023 * t2292 + t2067 * t2271 + t2069 * t2273 + t2071 * t2275 + (-t2122 * t2949 - t2127 * t2948 - t2130 * t2947) * t2875, t2018 * t2288 + t2020 * t2290 + t2022 * t2292 + t2066 * t2271 + t2068 * t2273 + t2070 * t2275 + (-t2123 * t2949 - t2126 * t2948 - t2131 * t2947) * t2875, 0; t2306 * t2339 + t2308 * t2341 + t2310 * t2337, 0, 0, (t2306 * t2929 + t2308 * t2923 + t2310 * t2935) * t2510, (t2306 * t2720 + t2308 * t2715 + t2310 * t2725) * t2827, (t2529 * t2611 + t2532 * t2609 + t2535 * t2607) * t2523, (t2538 * t2611 + t2541 * t2609 + t2544 * t2607) * t2523, t2217 * t2271 + t2221 * t2273 + t2225 * t2275 + (t2217 * t2288 + t2221 * t2290 + t2225 * t2292) * t2524, (t2094 + t2763) * t2292 + (t2092 + t2771) * t2290 + (t2090 + t2779) * t2288, (t2100 - t2762) * t2292 + (t2096 - t2770) * t2290 + (t2098 - t2778) * t2288, t2042 * t2288 + t2044 * t2290 + t2046 * t2292 + t2144 * t2777 + t2146 * t2769 + t2148 * t2761, t2036 * t2288 + t2038 * t2290 + t2040 * t2292 + t2102 * t2271 + t2104 * t2273 + t2106 * t2275, -t2183 * t2777 - t2184 * t2769 - t2185 * t2761 + t2063 * t2288 + t2064 * t2290 + t2065 * t2292 + (-t2144 * t2949 - t2146 * t2948 - t2148 * t2947) * t2875, -t2183 * t2776 - t2184 * t2768 - t2185 * t2760 + t2060 * t2288 + t2061 * t2290 + t2062 * t2292 + (-t2138 * t2949 - t2140 * t2948 - t2142 * t2947) * t2875, (t2183 * t2759 + t2184 * t2756 + t2185 * t2753 + (t2183 * t2949 + t2184 * t2948 + t2185 * t2947) * t2550) * t2523, t2025 * t2288 + t2027 * t2290 + t2029 * t2292 + t2073 * t2271 + t2075 * t2273 + t2077 * t2275 + (-t2120 * t2949 - t2125 * t2948 - t2128 * t2947) * t2875, t2024 * t2288 + t2026 * t2290 + t2028 * t2292 + t2072 * t2271 + t2074 * t2273 + t2076 * t2275 + (-t2121 * t2949 - t2124 * t2948 - t2129 * t2947) * t2875, 1; t2118, 0, 0, t2116, t2114, (t2529 * t2579 + t2532 * t2573 + t2535 * t2585) * t2523, (t2538 * t2579 + t2541 * t2573 + t2544 * t2585) * t2523, t2265 * t2271 + t2267 * t2273 + t2269 * t2275 + (t2265 * t2288 + t2267 * t2290 + t2269 * t2292) * t2524, (t2172 * t2314 + t2297 * t2710) * t2340 + (t2171 * t2312 + t2295 * t2714) * t2338 + (t2173 * t2316 + t2299 * t2706) * t2336, (t2174 * t2314 - t2297 * t2709) * t2340 + (t2175 * t2312 - t2295 * t2713) * t2338 + (t2176 * t2316 - t2299 * t2705) * t2336, t2084 * t2288 + t2085 * t2290 + t2086 * t2292 + t2240 * t2777 + t2241 * t2769 + t2242 * t2761, t2081 * t2288 + t2082 * t2290 + t2083 * t2292 + t2186 * t2271 + t2187 * t2273 + t2188 * t2275, -t2249 * t2777 - t2250 * t2769 - t2251 * t2761 + t2153 * t2288 + t2154 * t2290 + t2155 * t2292 + (-t2240 * t2949 - t2241 * t2948 - t2242 * t2947) * t2875, -t2249 * t2776 - t2250 * t2768 - t2251 * t2760 + t2150 * t2288 + t2151 * t2290 + t2152 * t2292 + (-t2237 * t2949 - t2238 * t2948 - t2239 * t2947) * t2875, (t2249 * t2759 + t2250 * t2756 + t2251 * t2753 + (t2249 * t2949 + t2250 * t2948 + t2251 * t2947) * t2550) * t2523, t2031 * t2288 + t2033 * t2290 + t2035 * t2292 + t2157 * t2271 + t2159 * t2273 + t2161 * t2275 + (-t2228 * t2949 - t2231 * t2948 - t2232 * t2947) * t2875, t2030 * t2288 + t2032 * t2290 + t2034 * t2292 + t2156 * t2271 + t2158 * t2273 + t2160 * t2275 + (-t2229 * t2949 - t2230 * t2948 - t2233 * t2947) * t2875, 0; t2119, 0, 0, t2117, t2115, (t2529 * t2581 + t2532 * t2575 + t2535 * t2587) * t2523, (t2538 * t2581 + t2541 * t2575 + t2544 * t2587) * t2523, t2219 * t2303 + t2223 * t2304 + t2227 * t2305 + (t2219 * t2324 + t2223 * t2325 + t2227 * t2326) * t2524, (t2093 * t2361 + t2315 * t2743) * t2340 + (t2091 * t2360 + t2313 * t2747) * t2338 + (t2095 * t2362 + t2317 * t2739) * t2336, (t2097 * t2361 - t2315 * t2742) * t2340 + (t2099 * t2360 - t2313 * t2746) * t2338 + (t2101 * t2362 - t2317 * t2738) * t2336, t2043 * t2324 + t2045 * t2325 + t2047 * t2326 + t2145 * t2745 + t2147 * t2741 + t2149 * t2737, t2037 * t2324 + t2039 * t2325 + t2041 * t2326 + t2103 * t2303 + t2105 * t2304 + t2107 * t2305, -t2180 * t2745 - t2181 * t2741 - t2182 * t2737 + t2057 * t2324 + t2058 * t2325 + t2059 * t2326 + (t2145 * t2946 + t2147 * t2945 + t2149 * t2944) * t2550, -t2180 * t2744 - t2181 * t2740 - t2182 * t2736 + t2054 * t2324 + t2055 * t2325 + t2056 * t2326 + (t2139 * t2946 + t2141 * t2945 + t2143 * t2944) * t2550, (-t2180 * t2946 - t2181 * t2945 - t2182 * t2944) * t2550 + (t2180 * t2724 + t2181 * t2719 + t2182 * t2729) * t2523, t2019 * t2324 + t2021 * t2325 + t2023 * t2326 + t2067 * t2303 + t2069 * t2304 + t2071 * t2305 + (t2122 * t2946 + t2127 * t2945 + t2130 * t2944) * t2550, t2018 * t2324 + t2020 * t2325 + t2022 * t2326 + t2066 * t2303 + t2068 * t2304 + t2070 * t2305 + (t2123 * t2946 + t2126 * t2945 + t2131 * t2944) * t2550, 0; t2118, 0, 0, t2116, t2114, (t2529 * t2583 + t2532 * t2577 + t2535 * t2589) * t2523, (t2538 * t2583 + t2541 * t2577 + t2544 * t2589) * t2523, t2217 * t2303 + t2221 * t2304 + t2225 * t2305 + (t2217 * t2324 + t2221 * t2325 + t2225 * t2326) * t2524, (t2092 * t2361 + t2314 * t2743) * t2340 + (t2090 * t2360 + t2312 * t2747) * t2338 + (t2094 * t2362 + t2316 * t2739) * t2336, (t2096 * t2361 - t2314 * t2742) * t2340 + (t2098 * t2360 - t2312 * t2746) * t2338 + (t2100 * t2362 - t2316 * t2738) * t2336, t2042 * t2324 + t2044 * t2325 + t2046 * t2326 + t2144 * t2745 + t2146 * t2741 + t2148 * t2737, t2036 * t2324 + t2038 * t2325 + t2040 * t2326 + t2102 * t2303 + t2104 * t2304 + t2106 * t2305, -t2183 * t2745 - t2184 * t2741 - t2185 * t2737 + t2063 * t2324 + t2064 * t2325 + t2065 * t2326 + (t2144 * t2946 + t2146 * t2945 + t2148 * t2944) * t2550, -t2183 * t2744 - t2184 * t2740 - t2185 * t2736 + t2060 * t2324 + t2061 * t2325 + t2062 * t2326 + (t2138 * t2946 + t2140 * t2945 + t2142 * t2944) * t2550, (-t2183 * t2946 - t2184 * t2945 - t2185 * t2944) * t2550 + (t2183 * t2724 + t2184 * t2719 + t2185 * t2729) * t2523, t2025 * t2324 + t2027 * t2325 + t2029 * t2326 + t2073 * t2303 + t2075 * t2304 + t2077 * t2305 + (t2120 * t2946 + t2125 * t2945 + t2128 * t2944) * t2550, t2024 * t2324 + t2026 * t2325 + t2028 * t2326 + t2072 * t2303 + t2074 * t2304 + t2076 * t2305 + (t2121 * t2946 + t2124 * t2945 + t2129 * t2944) * t2550, 0; t2899 + t2900 + t2901, 0, 0, (t2514 * t2901 + t2515 * t2900 + t2516 * t2899) * t2510, (t2357 * t2720 + t2358 * t2715 + t2359 * t2725) * t2827, (t2529 * t2604 + t2532 * t2603 + t2535 * t2605) * t2523, (t2538 * t2604 + t2541 * t2603 + t2544 * t2605) * t2523, t2265 * t2303 + t2267 * t2304 + t2269 * t2305 + (t2265 * t2324 + t2267 * t2325 + t2269 * t2326) * t2524, (t2172 + t2743) * t2325 + (t2171 + t2747) * t2324 + (t2173 + t2739) * t2326, (t2174 - t2742) * t2325 + (t2175 - t2746) * t2324 + (t2176 - t2738) * t2326, t2084 * t2324 + t2085 * t2325 + t2086 * t2326 + t2240 * t2745 + t2241 * t2741 + t2242 * t2737, t2081 * t2324 + t2082 * t2325 + t2083 * t2326 + t2186 * t2303 + t2187 * t2304 + t2188 * t2305, -t2249 * t2745 - t2250 * t2741 - t2251 * t2737 + t2153 * t2324 + t2154 * t2325 + t2155 * t2326 + (t2240 * t2946 + t2241 * t2945 + t2242 * t2944) * t2550, -t2249 * t2744 - t2250 * t2740 - t2251 * t2736 + t2150 * t2324 + t2151 * t2325 + t2152 * t2326 + (t2237 * t2946 + t2238 * t2945 + t2239 * t2944) * t2550, (-t2249 * t2946 - t2250 * t2945 - t2251 * t2944) * t2550 + (t2249 * t2724 + t2250 * t2719 + t2251 * t2729) * t2523, t2031 * t2324 + t2033 * t2325 + t2035 * t2326 + t2157 * t2303 + t2159 * t2304 + t2161 * t2305 + (t2228 * t2946 + t2231 * t2945 + t2232 * t2944) * t2550, t2030 * t2324 + t2032 * t2325 + t2034 * t2326 + t2156 * t2303 + t2158 * t2304 + t2160 * t2305 + (t2229 * t2946 + t2230 * t2945 + t2233 * t2944) * t2550, 1;];
tau_reg  = t1;
