% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 00:48
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRRRR10V2G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G1A0_invdyn_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 00:19:28
% EndTime: 2020-08-07 00:35:08
% DurationCPUTime: 981.28s
% Computational Cost: add. (12581394->2755), mult. (22608264->4073), div. (172332->44), fcn. (17432391->26), ass. (0->1542)
t6415 = sin(pkin(4));
t7348 = -0.2e1 * t6415;
t6416 = cos(pkin(4));
t6433 = sin(qJ(1,3));
t6442 = cos(qJ(1,3));
t6450 = xDP(2);
t6451 = xDP(1);
t6211 = t6433 * t6451 - t6442 * t6450;
t6214 = t6433 * t6450 + t6442 * t6451;
t6425 = legFrame(3,3);
t6345 = sin(t6425);
t6348 = cos(t6425);
t6111 = -t6211 * t6345 + t6214 * t6348;
t6441 = cos(qJ(2,3));
t6093 = t6441 * t6111;
t6108 = t6211 * t6348 + t6214 * t6345;
t6449 = xDP(3);
t6452 = pkin(8) + pkin(7);
t7117 = t6449 * t6452;
t6260 = t6415 * t7117;
t6432 = sin(qJ(2,3));
t6440 = cos(qJ(3,3));
t7149 = t6415 * t6449;
t6604 = t6108 * t6416 - t7149;
t7137 = t6416 * t6452;
t6296 = t6449 * t6416;
t6431 = sin(qJ(3,3));
t7219 = (t6108 * t6415 + t6296) * t6431;
t6399 = t6440 ^ 2;
t7303 = t6399 * pkin(3);
t5961 = -(-t6432 * t6604 + t6093) * t7303 + ((-pkin(2) * t6111 - t6108 * t7137 + t6260) * t6441 + (pkin(2) * t6604 - t6111 * t6452) * t6432 - pkin(3) * t7219) * t6440 - pkin(2) * t7219;
t6279 = pkin(1) * t7137;
t6353 = t6431 * pkin(3);
t6299 = t6353 - pkin(6);
t7330 = pkin(2) * t6415;
t6153 = t6299 * t7330 + t6279;
t6361 = t6441 * pkin(2);
t7116 = t6452 * t6432;
t6226 = t6361 + t7116;
t6220 = pkin(1) + t6226;
t7328 = pkin(2) * t6431;
t6165 = t6220 * t7328;
t7145 = t6416 * t6432;
t7025 = pkin(1) * t7145;
t7154 = t6415 * t6441;
t6691 = t6415 * t6165 - (pkin(6) * t7154 + t7025) * t7303;
t7329 = pkin(2) * t6416;
t6329 = pkin(1) * t7329;
t7148 = t6415 * t6452;
t6204 = -pkin(6) * t7148 - t6329;
t7161 = t6415 * t6431;
t7028 = pkin(1) * t7161;
t7089 = pkin(3) * t7028 + t6204 * t6432;
t6034 = (t6153 * t6441 + t7089) * t6440 + t6691;
t5955 = t5961 ^ 2 / t6034 ^ 2;
t6948 = t6415 * t5955;
t6472 = 0.1e1 / pkin(3);
t6453 = 0.2e1 * t6452;
t7131 = t6432 * t6453;
t6276 = pkin(1) + t7131;
t6373 = pkin(1) * t6432;
t6283 = t6452 + t6373;
t6289 = pkin(1) * t7117;
t6359 = t6440 * pkin(3);
t6306 = t6359 + pkin(2);
t6401 = t6441 ^ 2;
t6298 = t6353 + pkin(6);
t6395 = t6416 ^ 2;
t6883 = t6415 * t6296;
t6492 = t6298 * (t6108 * t6395 - t6108 - t6883);
t7343 = t6395 - 0.1e1;
t6807 = t7343 * t6449;
t7162 = t6415 * t6416;
t6914 = t6108 * t7162;
t6528 = t6807 + t6914;
t7183 = (t6416 + 0.1e1) * (t6416 - 0.1e1);
t6896 = t6449 * t7183;
t6911 = t6415 * t6093;
t7132 = t6432 * t6449;
t7133 = t6432 * t6441;
t6396 = pkin(2) + t6452;
t6397 = pkin(2) - t6452;
t7198 = (t6359 + t6396) * (t6359 + t6397);
t7213 = t6111 * t6415;
t7421 = 0.2e1 * t6401;
t5931 = t6289 * t6441 + (-t6401 * t7213 + t6528 * t7133) * t7198 + (-pkin(1) * t7132 - t6276 * t6911 + t6441 * t6492) * t6306 + (-t6283 * t7213 + t6432 * t6492 + ((-t6896 - t6914) * t7421 + t6528) * t6306) * t6452;
t7317 = pkin(6) * t6440;
t6249 = t7317 - t7328;
t7140 = t6416 * t6440;
t7022 = pkin(1) * t7140;
t7192 = t6306 * t6415;
t7433 = t6306 * t6432;
t6552 = -t7022 * t7433 + (-t6249 * t7192 + t6279 * t6440) * t6441;
t6069 = (pkin(1) * t6306 * t6431 - t6249 * t7116) * t6415 + t6552;
t7267 = t5931 / t6069;
t5923 = t6472 * t7267;
t7264 = t5961 / t6034;
t6932 = t6441 * t7264;
t6733 = t6415 * t6932;
t5811 = -t5923 + t6733;
t6307 = t6361 + pkin(1);
t6138 = -pkin(6) * t6226 + t6307 * t6353;
t6321 = t6452 * t6441;
t7327 = pkin(2) * t6432;
t6229 = t6321 - t7327;
t7333 = pkin(1) * t6416;
t6168 = t6229 * t7333;
t6040 = 0.1e1 / ((t6138 * t6415 + t6168) * t6440 + t6691);
t6931 = t6452 * t7264;
t6715 = t6415 * t6931;
t6625 = t6432 * t6715;
t6096 = t6108 * pkin(6);
t6339 = t6401 - 0.2e1;
t6372 = pkin(2) * t6449;
t7182 = (t6441 + 0.1e1) * (t6441 - 0.1e1);
t6673 = t6307 * t6432 - t6452 * t7182;
t6879 = t6415 * t7132;
t7216 = t6108 * t6432;
t6991 = pkin(3) * t7216;
t6370 = t6449 * pkin(6);
t7092 = t6108 * t6321 + t6370;
t7120 = t6440 * t6449;
t7172 = t6401 * t6449;
t7188 = t6339 * t6431;
t7222 = (t6321 * t6449 - t6096) * t6432;
t7340 = 0.2e1 * t6399 - 0.1e1;
t5889 = ((-pkin(2) * t7172 + t6372 - t7222) * t6431 + (-pkin(2) * t7216 + t7092) * t6440 + (-t7120 * t7188 - t7216 * t7340) * pkin(3)) * t6395 + (-(t7092 * t6432 + (pkin(2) * t7182 + t6339 * t6359) * t6108) * t7161 + (t6093 + 0.2e1 * t6879) * t7303 + ((-t6229 * t6449 + t6096) * t6415 + t6220 * t6111) * t6440 - pkin(3) * t6879) * t6416 + (-(t6432 * t6911 + t6449 - t7172) * t6359 - t6673 * t7213 + t7222 + t6449 * t6441 * t6307) * t6431 + t6399 * t6991 - pkin(6) * t7120 - t6991;
t6135 = (t6321 - t7433) * t7022;
t6280 = t6441 * t6359;
t6836 = t6280 + t6226;
t6060 = t6135 + t6415 * ((pkin(2) * t6220 + t6307 * t6359) * t6431 - t6836 * t7317);
t5881 = t5889 / t6060;
t5943 = t6416 * t7264;
t5803 = t5943 + t5881;
t7273 = t5803 * t6431;
t5715 = (t6399 * t6625 + (pkin(3) * t6733 + t6452 * t7273 - t7267) * t6440 + pkin(2) * t5811) * t6040 * t7267;
t6429 = xDDP(2);
t6159 = t6345 * t6442 + t6348 * t6433;
t6160 = -t6345 * t6433 + t6348 * t6442;
t6907 = t6160 * t7161;
t6003 = -(t6159 * t6441 + t6160 * t7145) * t7303 + (pkin(3) * t6907 + (-pkin(2) * t6159 + t6160 * t7137) * t6441 - (t6159 * t6452 + t6160 * t7329) * t6432) * t6440 + pkin(2) * t6907;
t6217 = pkin(1) * t6353 - pkin(6) * t7116;
t6141 = t6299 * t6361 + t6217;
t6043 = 0.1e1 / ((t6141 * t6415 + t6168) * t6440 + t6691);
t7243 = t6003 * t6043;
t5982 = t6429 * t7243;
t6430 = xDDP(1);
t6908 = t6159 * t7161;
t6004 = -(-t6159 * t7145 + t6160 * t6441) * t7303 + (-pkin(3) * t6908 + (-pkin(2) * t6160 - t6159 * t7137) * t6441 + (t6159 * t7329 - t6160 * t6452) * t6432) * t6440 - pkin(2) * t6908;
t7242 = t6004 * t6043;
t5983 = t6430 * t7242;
t6428 = xDDP(3);
t7146 = t6416 * t6431;
t7160 = t6415 * t6432;
t7454 = t6229 * t6415;
t6084 = -t7160 * t7303 + (-pkin(3) * t7146 + t7454) * t6440 - pkin(2) * t7146;
t7228 = t6043 * t6084;
t6012 = t6428 * t7228;
t6963 = t6452 * t5881;
t5754 = t6431 * t6963 - t7267;
t5910 = pkin(8) * t5923;
t5913 = pkin(7) * t5923;
t5784 = t5913 + t5910;
t6994 = pkin(3) * t5881;
t5841 = t6431 * t6994;
t5864 = pkin(2) * t5881;
t6460 = pkin(6) / 0.2e1;
t6291 = t6353 + t6460;
t6933 = t6432 * t7264;
t6734 = t6415 * t6933;
t6685 = -0.2e1 * t6734;
t5934 = t6291 * t6685;
t6286 = pkin(1) * t7116;
t6414 = t6452 ^ 2;
t6474 = pkin(2) ^ 2;
t6328 = t6414 + t6474;
t6360 = t6401 * pkin(2);
t6461 = -0.3e1 / 0.2e1 * pkin(2);
t6964 = t6432 * t5881;
t6757 = t6431 * t6964;
t6667 = pkin(2) * t6757;
t6868 = t6432 * t6321;
t6670 = t6360 + t6868;
t6781 = pkin(2) * t6868;
t6934 = t6415 * t7264;
t6872 = t6416 * t5881;
t6398 = t6440 * t6399;
t6471 = pkin(3) ^ 2;
t7174 = t6398 * t6471;
t7189 = t6339 * t6395;
t7413 = -t6401 + 0.1e1;
t6975 = (t6872 + (-t7189 - t7413) * t7264) * t7174;
t6297 = pkin(6) * t6431 + pkin(3);
t6979 = t7343 * t6297;
t6459 = pkin(6) / 0.3e1;
t6986 = (t6353 + t6459) * t7327;
t7010 = t5784 * t6353;
t7018 = pkin(2) * t7264;
t7068 = t6474 - t6471;
t7072 = t6414 + t6471;
t7319 = pkin(3) * t6415;
t7353 = -0.2e1 * t6395;
t6330 = pkin(6) * t6353;
t7175 = t6396 * t6397;
t7388 = t6401 * t7175 + t6330;
t7414 = -0.2e1 * t7319;
t6774 = (t6975 + ((t5934 + 0.2e1 * t5864) * t6416 - (t5841 + t5784) * t7160) * t7303 + ((-t7010 + t6328 * t5881 + (0.2e1 * t6291 * t6321 - 0.3e1 * t6986) * t6934) * t6416 + (t5754 * t7319 + t6276 * t7018) * t6441 + t6667 * t7414) * t6440 + (t5754 * t6441 - t6667) * t7330 + (((t6461 + t6670) * t7353 + 0.2e1 * t6360 + t6276 * t6441 - pkin(2)) * t7303 + (-(0.2e1 * t6781 - t7068 + t7388) * t6395 + t6286 + t7072 + t7388) * t6440 + pkin(2) * (t7146 * t7454 - t6979)) * t7264) * t6043 * t7264;
t6507 = t5715 + t5982 + t5983 + t6012 - t6774;
t5793 = t5803 * pkin(2);
t6580 = t6734 * t6353;
t6735 = t6431 * t6934;
t6954 = t6452 * t7267;
t7282 = (t5803 * t7174 + 0.2e1 * (-t6580 / 0.2e1 + t5793) * t7303 + (t5803 * t6328 + ((t6321 - 0.2e1 * t7327) * pkin(3) * t6934 - t6954) * t6431) * t6440 + t6229 * pkin(2) * t6735) * t6040;
t6765 = t5881 * t7282;
t5670 = t6507 - t6765;
t5667 = pkin(1) * t5670;
t6354 = t6433 * g(1);
t7297 = t6442 * g(2);
t6243 = -t6354 + t7297;
t7298 = t6442 * g(1);
t7300 = t6433 * g(2);
t6244 = t7298 + t7300;
t7085 = t6243 * t6348 - t6244 * t6345;
t7467 = t5667 - t7085;
t6525 = -pkin(6) * t6948 - t7467;
t5632 = t6525 * t6416;
t5663 = pkin(6) * t5670;
t6627 = t5923 * t7264;
t5821 = pkin(2) * t6627;
t6473 = 0.1e1 / pkin(3) ^ 2;
t5922 = t5931 ^ 2 * t6473 / t6069 ^ 2;
t5907 = pkin(7) * t5922;
t6458 = -g(3) / 0.2e1;
t7086 = t6243 * t6345 + t6244 * t6348;
t6839 = pkin(1) * t5955 + t7086;
t6892 = t6401 * t5955;
t6982 = pkin(2) * t7133;
t7352 = 0.2e1 * t6395;
t7342 = t7352 - 0.2e1;
t7031 = pkin(7) * t7342;
t7065 = -0.2e1 * t7329;
t7410 = t7343 * pkin(7);
t7479 = -(t5632 + (pkin(7) * t6627 + t6458) * t7348) * t6441 + (-(0.2e1 * t5821 + t5663) * t6415 + t6839) * t6432 - t5670 * t7065 - (t6982 * t7342 + t7410) * t5955 + t6892 * t7031 - t5907;
t6436 = sin(qJ(1,2));
t6445 = cos(qJ(1,2));
t6212 = t6436 * t6451 - t6445 * t6450;
t6215 = t6436 * t6450 + t6445 * t6451;
t6426 = legFrame(2,3);
t6346 = sin(t6426);
t6349 = cos(t6426);
t6112 = -t6212 * t6346 + t6215 * t6349;
t6444 = cos(qJ(2,2));
t6094 = t6444 * t6112;
t6109 = t6212 * t6349 + t6215 * t6346;
t6435 = sin(qJ(2,2));
t6443 = cos(qJ(3,2));
t6603 = t6109 * t6416 - t7149;
t6434 = sin(qJ(3,2));
t7218 = (t6109 * t6415 + t6296) * t6434;
t6403 = t6443 ^ 2;
t7302 = t6403 * pkin(3);
t5962 = -(-t6435 * t6603 + t6094) * t7302 + ((-pkin(2) * t6112 - t6109 * t7137 + t6260) * t6444 + (pkin(2) * t6603 - t6112 * t6452) * t6435 - pkin(3) * t7218) * t6443 - pkin(2) * t7218;
t6355 = t6434 * pkin(3);
t6302 = t6355 - pkin(6);
t6154 = t6302 * t7330 + t6279;
t6365 = t6444 * pkin(2);
t7115 = t6452 * t6435;
t6227 = t6365 + t7115;
t6221 = pkin(1) + t6227;
t7326 = pkin(2) * t6434;
t6166 = t6221 * t7326;
t7143 = t6416 * t6435;
t7024 = pkin(1) * t7143;
t7152 = t6415 * t6444;
t6690 = t6415 * t6166 - (pkin(6) * t7152 + t7024) * t7302;
t7159 = t6415 * t6434;
t7027 = pkin(1) * t7159;
t7088 = pkin(3) * t7027 + t6204 * t6435;
t6035 = (t6154 * t6444 + t7088) * t6443 + t6690;
t5956 = t5962 ^ 2 / t6035 ^ 2;
t6944 = t6415 * t5956;
t7126 = t6435 * t6453;
t6277 = pkin(1) + t7126;
t6374 = pkin(1) * t6435;
t6284 = t6452 + t6374;
t6363 = t6443 * pkin(3);
t6308 = t6363 + pkin(2);
t6405 = t6444 ^ 2;
t6301 = t6355 + pkin(6);
t6491 = t6301 * (t6109 * t6395 - t6109 - t6883);
t6913 = t6109 * t7162;
t6527 = t6807 + t6913;
t6910 = t6415 * t6094;
t7127 = t6435 * t6449;
t7128 = t6435 * t6444;
t7197 = (t6363 + t6396) * (t6363 + t6397);
t7212 = t6112 * t6415;
t7420 = 0.2e1 * t6405;
t5932 = t6289 * t6444 + (-t6405 * t7212 + t6527 * t7128) * t7197 + (-pkin(1) * t7127 - t6277 * t6910 + t6444 * t6491) * t6308 + (-t6284 * t7212 + t6435 * t6491 + ((-t6896 - t6913) * t7420 + t6527) * t6308) * t6452;
t7316 = pkin(6) * t6443;
t6250 = t7316 - t7326;
t7139 = t6416 * t6443;
t7021 = pkin(1) * t7139;
t7191 = t6308 * t6415;
t7432 = t6308 * t6435;
t6551 = -t7021 * t7432 + (-t6250 * t7191 + t6279 * t6443) * t6444;
t6070 = (pkin(1) * t6308 * t6434 - t6250 * t7115) * t6415 + t6551;
t7266 = t5932 / t6070;
t5925 = t6472 * t7266;
t7263 = t5962 / t6035;
t6925 = t6444 * t7263;
t6714 = t6415 * t6925;
t5812 = -t5925 + t6714;
t6309 = t6365 + pkin(1);
t6139 = -pkin(6) * t6227 + t6309 * t6355;
t6322 = t6452 * t6444;
t7325 = pkin(2) * t6435;
t6230 = t6322 - t7325;
t6169 = t6230 * t7333;
t6041 = 0.1e1 / ((t6139 * t6415 + t6169) * t6443 + t6690);
t6924 = t6452 * t7263;
t6713 = t6415 * t6924;
t6620 = t6435 * t6713;
t6097 = t6109 * pkin(6);
t6340 = t6405 - 0.2e1;
t7181 = (t6444 + 0.1e1) * (t6444 - 0.1e1);
t6672 = t6309 * t6435 - t6452 * t7181;
t6876 = t6415 * t7127;
t7215 = t6109 * t6435;
t6990 = pkin(3) * t7215;
t7091 = t6109 * t6322 + t6370;
t7119 = t6443 * t6449;
t7169 = t6405 * t6449;
t7186 = t6340 * t6434;
t7221 = (t6322 * t6449 - t6097) * t6435;
t7338 = 0.2e1 * t6403 - 0.1e1;
t5890 = ((-pkin(2) * t7169 + t6372 - t7221) * t6434 + (-pkin(2) * t7215 + t7091) * t6443 + (-t7119 * t7186 - t7215 * t7338) * pkin(3)) * t6395 + (-(t7091 * t6435 + (pkin(2) * t7181 + t6340 * t6363) * t6109) * t7159 + (t6094 + 0.2e1 * t6876) * t7302 + ((-t6230 * t6449 + t6097) * t6415 + t6221 * t6112) * t6443 - pkin(3) * t6876) * t6416 + (-(t6435 * t6910 + t6449 - t7169) * t6363 - t6672 * t7212 + t7221 + t6449 * t6444 * t6309) * t6434 + t6403 * t6990 - pkin(6) * t7119 - t6990;
t6136 = (t6322 - t7432) * t7021;
t6281 = t6444 * t6363;
t6835 = t6281 + t6227;
t6061 = t6136 + ((pkin(2) * t6221 + t6309 * t6363) * t6434 - t6835 * t7316) * t6415;
t5883 = t5890 / t6061;
t5944 = t6416 * t7263;
t5805 = t5944 + t5883;
t7272 = t5805 * t6434;
t5716 = (t6403 * t6620 + (pkin(3) * t6714 + t6452 * t7272 - t7266) * t6443 + pkin(2) * t5812) * t6041 * t7266;
t6161 = t6346 * t6445 + t6349 * t6436;
t6162 = -t6346 * t6436 + t6349 * t6445;
t6905 = t6162 * t7159;
t6005 = -(t6161 * t6444 + t6162 * t7143) * t7302 + (pkin(3) * t6905 + (-pkin(2) * t6161 + t6162 * t7137) * t6444 - (t6161 * t6452 + t6162 * t7329) * t6435) * t6443 + pkin(2) * t6905;
t6218 = pkin(1) * t6355 - pkin(6) * t7115;
t6142 = t6302 * t6365 + t6218;
t6044 = 0.1e1 / ((t6142 * t6415 + t6169) * t6443 + t6690);
t7241 = t6005 * t6044;
t5984 = t6429 * t7241;
t6906 = t6161 * t7159;
t6006 = -(-t6161 * t7143 + t6162 * t6444) * t7302 + (-pkin(3) * t6906 + (-pkin(2) * t6162 - t6161 * t7137) * t6444 + (t6161 * t7329 - t6162 * t6452) * t6435) * t6443 - pkin(2) * t6906;
t7240 = t6006 * t6044;
t5985 = t6430 * t7240;
t7144 = t6416 * t6434;
t7158 = t6415 * t6435;
t7453 = t6230 * t6415;
t6085 = -t7158 * t7302 + (-pkin(3) * t7144 + t7453) * t6443 - pkin(2) * t7144;
t7225 = t6044 * t6085;
t6013 = t6428 * t7225;
t6960 = t6452 * t5883;
t5755 = t6434 * t6960 - t7266;
t5911 = pkin(8) * t5925;
t5914 = pkin(7) * t5925;
t5785 = t5914 + t5911;
t6993 = pkin(3) * t5883;
t5842 = t6434 * t6993;
t5870 = pkin(2) * t5883;
t6293 = t6355 + t6460;
t6926 = t6435 * t7263;
t6728 = t6415 * t6926;
t6683 = -0.2e1 * t6728;
t5935 = t6293 * t6683;
t6287 = pkin(1) * t7115;
t6364 = t6405 * pkin(2);
t6961 = t6435 * t5883;
t6754 = t6434 * t6961;
t6666 = pkin(2) * t6754;
t6864 = t6435 * t6322;
t6669 = t6364 + t6864;
t6780 = pkin(2) * t6864;
t6927 = t6415 * t7263;
t6871 = t6416 * t5883;
t6402 = t6443 * t6403;
t7171 = t6402 * t6471;
t7187 = t6340 * t6395;
t7412 = -t6405 + 0.1e1;
t6974 = (t6871 + (-t7187 - t7412) * t7263) * t7171;
t6300 = pkin(6) * t6434 + pkin(3);
t6978 = t7343 * t6300;
t6988 = (t6355 + t6459) * t7325;
t7009 = t5785 * t6355;
t7017 = pkin(2) * t7263;
t6331 = pkin(6) * t6355;
t7387 = t6405 * t7175 + t6331;
t6773 = (t6974 + ((t5935 + 0.2e1 * t5870) * t6416 - (t5842 + t5785) * t7158) * t7302 + ((-t7009 + t6328 * t5883 + (0.2e1 * t6293 * t6322 - 0.3e1 * t6988) * t6927) * t6416 + (t5755 * t7319 + t6277 * t7017) * t6444 + t6666 * t7414) * t6443 + (t5755 * t6444 - t6666) * t7330 + (((t6461 + t6669) * t7353 + 0.2e1 * t6364 + t6277 * t6444 - pkin(2)) * t7302 + (-(0.2e1 * t6780 - t7068 + t7387) * t6395 + t6287 + t7072 + t7387) * t6443 + pkin(2) * (t7144 * t7453 - t6978)) * t7263) * t6044 * t7263;
t6506 = t5716 + t5984 + t5985 + t6013 - t6773;
t5794 = t5805 * pkin(2);
t6579 = t6728 * t6355;
t6729 = t6434 * t6927;
t6952 = t6452 * t7266;
t7281 = (t5805 * t7171 + 0.2e1 * (-t6579 / 0.2e1 + t5794) * t7302 + (t5805 * t6328 + ((t6322 - 0.2e1 * t7325) * pkin(3) * t6927 - t6952) * t6434) * t6443 + t6230 * pkin(2) * t6729) * t6041;
t6764 = t5883 * t7281;
t5671 = t6506 - t6764;
t5668 = pkin(1) * t5671;
t6356 = t6436 * g(1);
t7295 = t6445 * g(2);
t6245 = -t6356 + t7295;
t7296 = t6445 * g(1);
t7299 = t6436 * g(2);
t6246 = t7296 + t7299;
t7081 = t6245 * t6349 - t6246 * t6346;
t7466 = t5668 - t7081;
t6524 = -pkin(6) * t6944 - t7466;
t5634 = t6524 * t6416;
t5664 = pkin(6) * t5671;
t6622 = t5925 * t7263;
t5822 = pkin(2) * t6622;
t5924 = t5932 ^ 2 * t6473 / t6070 ^ 2;
t5908 = pkin(7) * t5924;
t7082 = t6245 * t6346 + t6246 * t6349;
t6838 = pkin(1) * t5956 + t7082;
t6891 = t6405 * t5956;
t6981 = pkin(2) * t7128;
t7478 = -(t5634 + (pkin(7) * t6622 + t6458) * t7348) * t6444 + (-(0.2e1 * t5822 + t5664) * t6415 + t6838) * t6435 - t5671 * t7065 - (t6981 * t7342 + t7410) * t5956 + t6891 * t7031 - t5908;
t6439 = sin(qJ(1,1));
t6448 = cos(qJ(1,1));
t6213 = t6439 * t6451 - t6448 * t6450;
t6216 = t6439 * t6450 + t6448 * t6451;
t6427 = legFrame(1,3);
t6347 = sin(t6427);
t6350 = cos(t6427);
t6113 = -t6213 * t6347 + t6216 * t6350;
t6447 = cos(qJ(2,1));
t6095 = t6447 * t6113;
t6110 = t6213 * t6350 + t6216 * t6347;
t6438 = sin(qJ(2,1));
t6446 = cos(qJ(3,1));
t6602 = t6110 * t6416 - t7149;
t6437 = sin(qJ(3,1));
t7217 = (t6110 * t6415 + t6296) * t6437;
t6407 = t6446 ^ 2;
t7301 = t6407 * pkin(3);
t5963 = -(-t6438 * t6602 + t6095) * t7301 + ((-pkin(2) * t6113 - t6110 * t7137 + t6260) * t6447 + (pkin(2) * t6602 - t6113 * t6452) * t6438 - pkin(3) * t7217) * t6446 - pkin(2) * t7217;
t6357 = t6437 * pkin(3);
t6305 = t6357 - pkin(6);
t6155 = t6305 * t7330 + t6279;
t6369 = t6447 * pkin(2);
t7114 = t6452 * t6438;
t6228 = t6369 + t7114;
t6222 = pkin(1) + t6228;
t7324 = pkin(2) * t6437;
t6167 = t6222 * t7324;
t7141 = t6416 * t6438;
t7023 = pkin(1) * t7141;
t7150 = t6415 * t6447;
t6689 = t6415 * t6167 - (pkin(6) * t7150 + t7023) * t7301;
t7157 = t6415 * t6437;
t7026 = pkin(1) * t7157;
t7087 = pkin(3) * t7026 + t6204 * t6438;
t6033 = (t6155 * t6447 + t7087) * t6446 + t6689;
t5957 = t5963 ^ 2 / t6033 ^ 2;
t6940 = t6415 * t5957;
t7121 = t6438 * t6453;
t6278 = pkin(1) + t7121;
t6375 = pkin(1) * t6438;
t6285 = t6452 + t6375;
t6367 = t6446 * pkin(3);
t6310 = t6367 + pkin(2);
t6409 = t6447 ^ 2;
t6304 = t6357 + pkin(6);
t6490 = t6304 * (t6110 * t6395 - t6110 - t6883);
t6912 = t6110 * t7162;
t6526 = t6807 + t6912;
t6909 = t6415 * t6095;
t7122 = t6438 * t6449;
t7123 = t6438 * t6447;
t7196 = (t6367 + t6396) * (t6367 + t6397);
t7211 = t6113 * t6415;
t7419 = 0.2e1 * t6409;
t5933 = t6289 * t6447 + (-t6409 * t7211 + t6526 * t7123) * t7196 + (-pkin(1) * t7122 - t6278 * t6909 + t6447 * t6490) * t6310 + (-t6285 * t7211 + t6438 * t6490 + ((-t6896 - t6912) * t7419 + t6526) * t6310) * t6452;
t7315 = pkin(6) * t6446;
t6251 = t7315 - t7324;
t7138 = t6416 * t6446;
t7020 = pkin(1) * t7138;
t7190 = t6310 * t6415;
t7431 = t6310 * t6438;
t6550 = -t7020 * t7431 + (-t6251 * t7190 + t6279 * t6446) * t6447;
t6071 = (pkin(1) * t6310 * t6437 - t6251 * t7114) * t6415 + t6550;
t7265 = t5933 / t6071;
t5927 = t6472 * t7265;
t7262 = t5963 / t6033;
t6916 = t6447 * t7262;
t6721 = t6415 * t6916;
t5813 = -t5927 + t6721;
t6311 = t6369 + pkin(1);
t6140 = -pkin(6) * t6228 + t6311 * t6357;
t6323 = t6452 * t6447;
t7323 = pkin(2) * t6438;
t6231 = t6323 - t7323;
t6170 = t6231 * t7333;
t6039 = 0.1e1 / ((t6140 * t6415 + t6170) * t6446 + t6689);
t6915 = t6452 * t7262;
t6712 = t6415 * t6915;
t6615 = t6438 * t6712;
t6098 = t6110 * pkin(6);
t6341 = t6409 - 0.2e1;
t7180 = (t6447 + 0.1e1) * (t6447 - 0.1e1);
t6671 = t6311 * t6438 - t6452 * t7180;
t6873 = t6415 * t7122;
t7214 = t6110 * t6438;
t6989 = pkin(3) * t7214;
t7090 = t6110 * t6323 + t6370;
t7118 = t6446 * t6449;
t7166 = t6409 * t6449;
t7184 = t6341 * t6437;
t7220 = (t6323 * t6449 - t6098) * t6438;
t7336 = 0.2e1 * t6407 - 0.1e1;
t5891 = ((-pkin(2) * t7166 + t6372 - t7220) * t6437 + (-pkin(2) * t7214 + t7090) * t6446 + (-t7118 * t7184 - t7214 * t7336) * pkin(3)) * t6395 + (-(t7090 * t6438 + (pkin(2) * t7180 + t6341 * t6367) * t6110) * t7157 + (t6095 + 0.2e1 * t6873) * t7301 + ((-t6231 * t6449 + t6098) * t6415 + t6222 * t6113) * t6446 - pkin(3) * t6873) * t6416 + (-(t6438 * t6909 + t6449 - t7166) * t6367 - t6671 * t7211 + t7220 + t6449 * t6447 * t6311) * t6437 + t6407 * t6989 - pkin(6) * t7118 - t6989;
t6137 = (t6323 - t7431) * t7020;
t6282 = t6447 * t6367;
t6834 = t6282 + t6228;
t6062 = t6137 + ((pkin(2) * t6222 + t6311 * t6367) * t6437 - t6834 * t7315) * t6415;
t5885 = t5891 / t6062;
t5945 = t6416 * t7262;
t5807 = t5945 + t5885;
t7271 = t5807 * t6437;
t5717 = (t6407 * t6615 + (pkin(3) * t6721 + t6452 * t7271 - t7265) * t6446 + pkin(2) * t5813) * t6039 * t7265;
t6163 = t6347 * t6448 + t6350 * t6439;
t6164 = -t6347 * t6439 + t6350 * t6448;
t6903 = t6164 * t7157;
t6007 = -(t6163 * t6447 + t6164 * t7141) * t7301 + (pkin(3) * t6903 + (-pkin(2) * t6163 + t6164 * t7137) * t6447 - (t6163 * t6452 + t6164 * t7329) * t6438) * t6446 + pkin(2) * t6903;
t6219 = pkin(1) * t6357 - pkin(6) * t7114;
t6143 = t6305 * t6369 + t6219;
t6042 = 0.1e1 / ((t6143 * t6415 + t6170) * t6446 + t6689);
t7239 = t6007 * t6042;
t5986 = t6429 * t7239;
t6904 = t6163 * t7157;
t6008 = -(-t6163 * t7141 + t6164 * t6447) * t7301 + (-pkin(3) * t6904 + (-pkin(2) * t6164 - t6163 * t7137) * t6447 + (t6163 * t7329 - t6164 * t6452) * t6438) * t6446 - pkin(2) * t6904;
t7238 = t6008 * t6042;
t5987 = t6430 * t7238;
t7142 = t6416 * t6437;
t7156 = t6415 * t6438;
t7452 = t6231 * t6415;
t6086 = -t7156 * t7301 + (-pkin(3) * t7142 + t7452) * t6446 - pkin(2) * t7142;
t7231 = t6042 * t6086;
t6014 = t6428 * t7231;
t6956 = t6452 * t5885;
t5756 = t6437 * t6956 - t7265;
t5912 = pkin(8) * t5927;
t5915 = pkin(7) * t5927;
t5786 = t5915 + t5912;
t6992 = pkin(3) * t5885;
t5843 = t6437 * t6992;
t5875 = pkin(2) * t5885;
t6295 = t6357 + t6460;
t6917 = t6438 * t7262;
t6722 = t6415 * t6917;
t6681 = -0.2e1 * t6722;
t5936 = t6295 * t6681;
t6288 = pkin(1) * t7114;
t6368 = t6409 * pkin(2);
t6957 = t6438 * t5885;
t6751 = t6437 * t6957;
t6665 = pkin(2) * t6751;
t6861 = t6438 * t6323;
t6668 = t6368 + t6861;
t6779 = pkin(2) * t6861;
t6918 = t6415 * t7262;
t6920 = t6395 * t7262;
t6958 = t6416 * t5885;
t6406 = t6446 * t6407;
t7168 = t6406 * t6471;
t7185 = t6341 * t6395;
t7411 = -t6409 + 0.1e1;
t6973 = (t6958 + (-t7185 - t7411) * t7262) * t7168;
t6303 = pkin(6) * t6437 + pkin(3);
t6977 = t7343 * t6303;
t6983 = (t6357 + t6459) * t7323;
t7008 = t5786 * t6357;
t7016 = pkin(2) * t7262;
t6332 = pkin(6) * t6357;
t7386 = t6409 * t7175 + t6332;
t6772 = (t6973 + ((t5936 + 0.2e1 * t5875) * t6416 - (t5843 + t5786) * t7156 + ((t6461 + t6668) * t7353 + 0.2e1 * t6368 + t6278 * t6447 - pkin(2)) * t7262) * t7301 + (-(0.2e1 * t6779 - t7068 + t7386) * t6920 + (-t7008 + t6328 * t5885 + (0.2e1 * t6295 * t6323 - 0.3e1 * t6983) * t6918) * t6416 + (t5756 * t7319 + t6278 * t7016) * t6447 + t6665 * t7414 + (t6288 + t7072 + t7386) * t7262) * t6446 + pkin(2) * ((t5756 * t6447 - t6665) * t6415 + (t7142 * t7452 - t6977) * t7262)) * t6042 * t7262;
t6505 = t5717 + t5986 + t5987 + t6014 - t6772;
t5795 = t5807 * pkin(2);
t6578 = t6722 * t6357;
t6723 = t6437 * t6918;
t6950 = t6452 * t7265;
t7280 = (t5807 * t7168 + 0.2e1 * (-t6578 / 0.2e1 + t5795) * t7301 + (t5807 * t6328 + ((t6323 - 0.2e1 * t7323) * pkin(3) * t6918 - t6950) * t6437) * t6446 + pkin(2) * t6231 * t6723) * t6039;
t6763 = t5885 * t7280;
t5672 = t6505 - t6763;
t5669 = pkin(1) * t5672;
t6371 = g(1) * t6439;
t7308 = g(2) * t6448;
t6247 = -t6371 + t7308;
t7309 = g(2) * t6439;
t7310 = g(1) * t6448;
t6248 = t7309 + t7310;
t7077 = t6247 * t6350 - t6248 * t6347;
t7465 = t5669 - t7077;
t6523 = -pkin(6) * t6940 - t7465;
t5636 = t6523 * t6416;
t5658 = t5672 * pkin(6);
t6617 = t5927 * t7262;
t5820 = pkin(2) * t6617;
t5926 = t5933 ^ 2 * t6473 / t6071 ^ 2;
t5909 = pkin(7) * t5926;
t7078 = t6247 * t6347 + t6248 * t6350;
t6837 = pkin(1) * t5957 + t7078;
t6890 = t6409 * t5957;
t6980 = pkin(2) * t7123;
t7477 = -(t5636 + (pkin(7) * t6617 + t6458) * t7348) * t6447 + (-(0.2e1 * t5820 + t5658) * t6415 + t6837) * t6438 - t5672 * t7065 - (t6980 * t7342 + t7410) * t5957 + t6890 * t7031 - t5909;
t6343 = g(3) * t6415;
t7476 = t5632 + t6343;
t7474 = t5634 + t6343;
t7472 = t5636 + t6343;
t7136 = t6428 * t6472;
t6273 = t7116 + pkin(1);
t7015 = t6273 * t7328;
t6045 = 0.1e1 / ((t6217 * t6440 + t7015) * t6415 + t6552);
t6388 = pkin(1) * t6452;
t6333 = pkin(2) * t6359;
t6358 = t6399 * t6471;
t6598 = 0.2e1 * t6333 + t6358;
t6522 = t6598 + t7175;
t6882 = t6415 * t7137;
t6886 = t6416 * t7154;
t7033 = -0.2e1 * t7183;
t7237 = (t6388 * t6441 + (-t6298 * t6886 - t6283 + (t6401 * t7033 + t6395) * t6452) * t6306 + ((t6395 * t7198 - t6522) * t6441 - t6298 * t6882) * t6432) * t6045;
t5994 = t7136 * t7237;
t5859 = pkin(8) * t5881;
t5860 = pkin(7) * t5881;
t5916 = pkin(6) * t5923;
t7098 = t5916 - t5860;
t5745 = t5859 - t7098;
t5878 = pkin(1) * t5881;
t6389 = t6471 + t6474;
t7060 = pkin(6) * t7303;
t6090 = (t6153 * t6440 + (t6431 * t6474 - t7060) * t6415) * t6441;
t7061 = pkin(3) * t7333;
t6827 = t6399 * t7061;
t6540 = t6415 * t7015 - t6432 * t6827 + t6090;
t5919 = pkin(1) * t5923;
t6586 = t5919 * t7146;
t6592 = t5943 * t6283 + t5745;
t6467 = pkin(8) ^ 2;
t6468 = pkin(7) ^ 2;
t7070 = t6467 + t6468;
t7345 = pkin(8) * pkin(7);
t7385 = 0.2e1 * t7345 + t7070;
t6611 = -t7385 + t6389;
t6718 = t6415 * t5923;
t6736 = t7183 * t7264;
t6794 = pkin(1) * t6882;
t6935 = t6401 * t7264;
t6955 = t6399 * t7267;
t7147 = t6415 * t6472;
t7011 = pkin(2) * t7147;
t7334 = pkin(1) * t6415;
t6771 = ((t6431 * t6794 + ((t6330 + t6611) * t6440 + (t6297 + t7303) * pkin(2)) * t7183) * t6935 + ((pkin(2) * t6718 + t6273 * t6736) * t7303 + ((t5923 * t6389 - t6353 * t6592) * t6415 + pkin(2) * t6276 * t6736) * t6440 - (t6431 * t6592 - t7267) * t7330 - t6452 * (-t6933 * t6979 + t6586)) * t6441 + t6955 * t7334 + (t7343 * t6283 * t6931 + (t6273 * t7011 + t6431 * t7025) * t7267) * t6440 - (-t6432 * t7267 + (t5745 * t6432 + t5943 * t6273 + t5878) * t6431) * t7148 + t6586 * t7327) / ((-pkin(2) * t7025 + t6217 * t6415) * t6440 + t6540) * t7267;
t5847 = pkin(6) * t6963;
t6854 = -t7267 / 0.2e1;
t7113 = (t5860 + t5859 - t5916 / 0.2e1) * t6353 + pkin(3) * t6854;
t5721 = t5847 + t7113;
t5861 = pkin(6) * t5881;
t6842 = t5861 + t5784;
t5733 = t5841 + t6842;
t5751 = t5841 + t5861;
t6870 = t6431 * t7267;
t5757 = t6963 - t6870;
t5863 = t6474 * t5881;
t6469 = pkin(6) ^ 2;
t7069 = pkin(1) ^ 2 + t6469;
t6612 = t7385 + t7069;
t6225 = t6471 + t6612;
t6239 = -0.2e1 / 0.3e1 * t7345 - t6467 / 0.3e1 - t6468 / 0.3e1 + t6474;
t6261 = pkin(1) * t7175;
t6390 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t6400 = t6441 * t6401;
t6465 = 0.2e1 * pkin(2);
t7101 = 0.2e1 * t5784;
t7379 = t7101 + 0.2e1 * t5841;
t7430 = t5733 * t6432 + t5919;
t6495 = t6432 * (t5861 * t7175 + (((t5916 - 0.2e1 * t5859) * pkin(7) + t5863 + pkin(6) * t5910 - t7070 * t5881) * t6431 + t6954) * pkin(3)) + ((0.2e1 * t5861 + t7379) * t6432 + t5919) * t6333 + t7430 * t6358;
t6829 = -t6469 / 0.2e1 - t6471 / 0.2e1 + t6474 / 0.2e1;
t6553 = t6829 - t7385;
t7372 = 0.3e1 * t7385;
t6554 = t6471 + t7069 + t7372;
t6902 = t6432 * t7198;
t6936 = t6298 * t7264;
t6564 = t6902 * t6936;
t6394 = t6416 * t6395;
t6738 = t6306 * t6936;
t6624 = t6452 * t6738;
t6572 = t6394 * t6624;
t6846 = t6467 / 0.2e1 + t6468 / 0.2e1;
t6646 = t6846 + t7345;
t6684 = 0.2e1 * t6734;
t6698 = t6474 - t7372;
t6750 = t6432 * t5923;
t6701 = pkin(1) * t6750 + t6842;
t6704 = t6431 * t6854;
t6737 = t6306 * t6934;
t6749 = t6452 * t6870;
t6758 = t6415 * t6964;
t6788 = pkin(3) * t6955;
t6813 = 0.2e1 * t6934;
t6850 = 0.3e1 / 0.2e1 * t6239 * t6452;
t6965 = t6415 * t5881;
t6573 = t6472 * (-t6474 / 0.2e1 + t6846);
t6997 = ((t5861 + t5910) * pkin(7) + pkin(6) * t5859 + t6573 * t7267 + t7113) * t6359;
t7176 = t6395 * t6452;
t7322 = pkin(2) * t6452;
t7355 = 0.2e1 * t6394;
t7356 = 0.2e1 * t6388;
t7375 = t6333 + t6358 - t6330;
t7391 = 0.2e1 * t6330 - t6358;
t7418 = 0.2e1 * t6416;
t6777 = (-(t6698 + t6598) * t6400 * t6736 * t7192 + (-0.4e1 * t6572 + (-0.3e1 * (t6239 + t6598) * t6625 - 0.2e1 * t6997 + (-0.2e1 * t5721 + t6788) * pkin(2)) * t6395 + ((t5881 * t6522 + t6749) * t7334 + 0.4e1 * t6624) * t6416 + (t6432 * t6850 + t6261 + t6598 * (t6390 * t6432 + pkin(1))) * t6813 - pkin(2) * t6788 + 0.2e1 * t6997 + t5721 * t6465) * t6401 + (t6564 * t7355 + (0.2e1 * (t6553 + t7375) * t6737 + t6495) * t6395 + (((t6704 + t6963) * t6373 - t7010 / 0.2e1 + t5863 / 0.2e1) * t7192 - t6564 + (t6358 / 0.2e1 + t6333 + t6646) * t6306 * t6965) * t7418 + (0.4e1 * t6286 + t6554 + t7391) * t6737 - t6495) * t6441 + 0.2e1 * t6572 + ((t6829 + t7375) * t6684 + (t5841 + t6701) * t6359 + pkin(2) * t5751) * t7176 + (((t5863 - t7010) * t6432 + t5757 * pkin(1)) * t6415 - 0.2e1 * t6738 + (t6598 + t7385) * t6758) * t7137 + (t7356 + (t6225 + t7391) * t6432) * t6715 - (t5733 * t6452 + t5784 * t6373) * t6359 - t5751 * t7322) * t6045 * t7264;
t6504 = t6771 + t6777;
t7012 = pkin(2) * t7148;
t6024 = 0.1e1 / (t6090 + (t6204 * t6440 + t6431 * t7012 - t6827) * t6432 + t6306 * t7028);
t6265 = t6474 + t7385;
t6589 = t6265 * t5881 - t6749;
t5748 = t5943 * t6265 + t6589;
t6223 = t6416 * t6261;
t6266 = pkin(2) * t6279;
t6470 = pkin(3) * t6471;
t6623 = t6298 * t6715;
t6259 = -t7175 / 0.2e1;
t6705 = t6415 * t6259;
t6828 = 0.2e1 * t7012;
t7344 = 0.3e1 / 0.2e1 * t6474 + t6646;
t6851 = t6416 * t7344;
t7019 = t6471 * t7333;
t7064 = 0.2e1 * t6359;
t7396 = t5803 * t7116 + t5878;
t7436 = t6298 * t6734;
t6766 = ((t6399 * t7019 + (t6298 * t7148 + t6329) * t7064 + t6298 * t6828 + t6223) * t6935 + (t6470 * t5803 * t6398 + (t6452 * t6704 + t5881 * t7344 + ((-t6298 * t7330 + t6279) * t6432 + t6851) * t7264) * t7064 + 0.2e1 * (t6298 * t6705 + t6266) * t6933 + pkin(2) * t5748) * t6441 + (-t6623 / 0.2e1 + t7396 * pkin(2)) * t7064 + t5748 * t7116 - pkin(2) * t6623 + (t5943 * t6414 + t6589) * pkin(1) + ((0.3e1 * t5793 - t7436) * t6441 + t7396) * t6358) / (t6440 * t7089 + t6540) * t5881;
t6099 = -t6298 * t7192 + t6416 * t6902;
t7195 = t6276 * t6306;
t6072 = -t6099 * t6433 + t6442 * t7195;
t6075 = t6099 * t6442 + t6433 * t7195;
t6144 = -t6298 * t7160 + t6306 * t6416;
t6102 = -t6144 * t6433 + t6283 * t6442;
t6105 = t6144 * t6442 + t6283 * t6433;
t6899 = t6306 * t7137;
t6114 = 0.2e1 * t6433 * t6899 + t6442 * t7198;
t6711 = t6442 * t6899;
t6867 = t6433 * t7198;
t5979 = ((-0.2e1 * t6711 + t6867) * t6348 + t6114 * t6345) * t6401 + (t6072 * t6345 + t6075 * t6348) * t6441 + (t6102 * t6345 + t6105 * t6348) * t6452;
t7254 = t5979 * t6429;
t5976 = (t6114 * t6348 + 0.2e1 * (t6711 - t6867 / 0.2e1) * t6345) * t6401 + (t6072 * t6348 - t6075 * t6345) * t6441 + (t6102 * t6348 - t6105 * t6345) * t6452;
t7260 = t5976 * t6430;
t7368 = t6024 * (t7254 + t7260) + t6766;
t5553 = t5994 + (-t6415 * t7368 - t6504) * t6472;
t5763 = pkin(3) * t7267 - t5847;
t5844 = pkin(1) * t6964;
t5856 = pkin(2) * t5861;
t5862 = t6471 * t5881;
t5892 = pkin(1) * t6718;
t6177 = -pkin(2) + t6670;
t6224 = 0.3e1 * t6471 + t6612;
t6327 = -t6469 + t7068;
t6464 = 0.3e1 * pkin(2);
t6466 = -0.2e1 * pkin(1);
t6595 = 0.2e1 * t6400 * t6715;
t6498 = pkin(3) * (pkin(6) * t6685 + t5864) + t6595 * t7328;
t6645 = -t6441 * t7060 + t6165;
t6658 = pkin(2) * t6715;
t6790 = pkin(2) * t5923;
t6661 = t6441 * t6790;
t6679 = t5881 * t6414 + t5863;
t6694 = pkin(2) * t6813;
t6793 = pkin(2) * t6965;
t6797 = pkin(1) * t6963;
t6812 = 0.2e1 * t6931;
t6816 = 0.2e1 * t7264;
t7004 = pkin(6) * t7264;
t6819 = pkin(2) * t7004;
t6822 = pkin(2) * t6994;
t6824 = pkin(1) * t5864;
t6830 = t6469 / 0.3e1 - t6474 / 0.3e1 + t6471;
t7107 = -t6963 + t5916;
t7451 = t6432 * t7107;
t6987 = pkin(3) * t7451;
t7067 = -0.2e1 * t6388;
t7071 = -0.2e1 / 0.3e1 * t6471 + t7175 / 0.3e1;
t7074 = t6259 + t6471;
t7104 = t5892 + 0.2e1 * t7018;
t7276 = (-t5864 + t6580) * t6401;
t7279 = ((pkin(2) * t6684 + t6842) * t6431 + t6994) * t6401;
t7351 = 0.4e1 * t6401;
t7339 = t7351 - 0.2e1;
t7354 = 0.3e1 * t6394;
t7360 = 0.2e1 * pkin(6);
t7361 = -0.2e1 * pkin(6);
t7362 = 0.2e1 * pkin(1);
t7403 = t6398 * t5862;
t5586 = (((-0.4e1 / 0.3e1 + t6401) * t7174 + ((-0.2e1 / 0.3e1 * t6330 + t7071) * t6401 + 0.2e1 / 0.3e1 * t6781 + 0.4e1 / 0.3e1 * t6330 + t6830) * t6440 + (0.4e1 / 0.3e1 * t7303 - 0.2e1 / 0.3e1 * t6297) * t6177) * t7264 * t7354 + (t6339 * t7403 - (t7276 + (t5878 + t7451) * t6441 + 0.3e1 * t5864 - 0.4e1 * t7436) * t7303 + ((t6715 * t7361 - t6824) * t6441 + (pkin(6) * t6694 - t6797) * t6432 + t5862 + (-t7279 + (t6595 + (pkin(2) * t6750 - 0.4e1 * t6715) * t6441 + 0.2e1 * (t5919 + t6694) * t6432 + t5861 + t7101) * t6431) * pkin(3) - t6679) * t6440 + ((-t6734 * t7175 - t5856) * t6431 - t6822) * t6401 + ((t5763 * t6432 - 0.2e1 * t6658) * t6431 + t6987) * t6441 + (t6327 * t6734 + t5856) * t6431 + t6498) * t6395 + ((-0.3e1 * t6401 + 0.3e1) * t7174 * t7264 - (t6339 * t5892 + (-t6661 + (-t5861 - t7379) * t6432) * t6415 + ((t7362 + 0.4e1 * t7116) * t6441 + t7339 * pkin(2)) * t7264) * t7303 + (0.2e1 * (t6330 + t7074) * t6935 + (((t5844 + t7107) * t6353 + t5763) * t6415 - t6273 * pkin(2) * t6816) * t6441 + (t6758 * t6464 - 0.4e1 * t7004) * t6353 + (pkin(6) * t6793 + t6466 * t6931) * t6432 - t6224 * t7264) * t6440 + ((-t6415 * t6797 + 0.2e1 * t6819) * t6431 + pkin(3) * t7104) * t6401 + ((pkin(1) * t6793 + pkin(6) * t6812) * t6431 + pkin(3) * t6812) * t7133 + (-0.2e1 * t6819 + (t6432 * t6679 + t6797) * t6415) * t6431 - pkin(3) * (t5784 * t7160 + t7104)) * t6416 + t7413 * t7403 - (-t7276 - t5864 + (-t7107 * t6441 + (t7360 + t6353) * t6934) * t6432) * t7303 + (-t5862 + (t7279 + (-t6432 * t6661 + (t6283 * t6441 - t6452 * t6400) * t6415 * t6816 - t6701) * t6431) * pkin(3)) * t6440 + ((t5856 + (t6432 * t7175 + t7067) * t6934) * t6431 + t6822) * t6401 + (((pkin(1) * t6694 - t5763) * t6432 + 0.2e1 * t6658) * t6431 - t6987) * t6441 + (-t5856 + (t6225 * t6432 + t7356) * t6934) * t6431 - t6498) / (t6135 + t6415 * (t6141 * t6440 + t6645)) * t7264;
t6377 = pkin(1) * t6441;
t6577 = t6401 * t6452 - t6982;
t6720 = t6177 * t6297 * t7264;
t6831 = t6414 + t7068;
t7314 = pkin(6) * t6452;
t7321 = pkin(3) * t6297;
t5679 = (-t6975 - ((t5934 + (t6377 + t6465) * t5881) * t6416 + (-t6661 - t7430) * t6415 + ((-t6360 + (-t7116 + pkin(1)) * t6441 + t6464) * t6395 + t6177) * t7264) * t7303 + ((-t6441 * t6824 + t6283 * t6870 - (t6286 + t6328) * t5881) * t6416 + (pkin(2) * t6298 * t6964 - pkin(6) * t5757 * t6441) * t6415 + (-(pkin(1) * t6361 + t6401 * t7321 + t6286 - t6330 + t6831) * t6395 + (((t6373 - t6452) * t6353 - t7314) * t6441 + 0.3e1 * t6986) * t7162 + t7182 * t7321) * t7264) * t6440 - t6395 * t6720 - (pkin(1) * t6577 - t6328 * t6432 - t6388) * t6416 * t6735 + t5754 * t6220 * t6415 + t6720) * t6043 * t5881;
t6376 = pkin(1) * t6401;
t6391 = -pkin(7) / 0.2e1 - pkin(8) / 0.2e1;
t7001 = pkin(6) * t7183;
t7135 = t6431 * t6440;
t5694 = (((pkin(1) * t6757 + t5754) * t6440 - (t6377 + pkin(2)) * t5923) * t6416 + ((t6870 + t7107) * t6432 - t5878 + (t6220 * t6399 + (pkin(6) * t7135 - pkin(2)) * t6441) * t5881) * t6415 + ((-(-t6361 + t6376 + t6466 - t7131) * t7162 - t7001 * t7133) * t6399 + (t6297 * t6886 + ((t6391 * t6401 + t6982 / 0.2e1 + t6283) * t7352 + t6577 - t6283) * t6431) * t6440 + (t6376 - t6273) * t7162 + t7343 * t6298 * t7133) * t7264) * t6043 * t7267;
t6510 = ((pkin(3) * t7188 - pkin(6)) * t6440 + t6431 * t6177) * t7162 - (t6229 * t6440 + (t6297 - 0.2e1 * t7303) * t6432) * t6395 - (-t6297 + t7303) * t6432;
t6531 = -(t6280 * t6432 + t6673) * t7161 + (pkin(1) + t6836) * t7140;
t5988 = -t6159 * t6510 + t6160 * t6531;
t6048 = 0.1e1 / (t6135 + t6415 * (t6138 * t6440 + t6645));
t7249 = t5988 * t6048;
t5970 = t6430 * t7249;
t5989 = t6159 * t6531 + t6160 * t6510;
t7248 = t5989 * t6048;
t5971 = t6429 * t7248;
t6800 = -t6401 + t7189;
t6697 = t6800 + 0.1e1;
t6889 = t6415 * t7145;
t7455 = pkin(6) * t7343;
t7234 = ((-t6229 * t7162 + t7455) * t6440 + (-pkin(6) * t6889 - t6177 * t6395 + t6220 * t6441) * t6431 + (-t6697 * t7135 + t6889 * t7340) * pkin(3)) * t6040;
t6000 = t6428 * t7234;
t5574 = t5970 + t5971 + t6000 - t5586 - t5679 - t5694;
t5660 = pkin(7) * t5670;
t6759 = t7264 * t5881;
t5808 = pkin(2) * t6759;
t6845 = 0.2e1 * t5667 - t7085;
t5665 = pkin(2) * t5670;
t6664 = pkin(7) * t6759;
t7288 = (0.2e1 * t5665 + 0.4e1 * t6664) * t6401;
t7307 = t5553 * pkin(7);
t7370 = -t7098 * t7264 + t5665;
t5880 = t5889 ^ 2 / t6060 ^ 2;
t7394 = t5880 + t5922;
t7470 = (-(pkin(2) * t5553 + pkin(6) * t7394) * t6415 - (0.4e1 * t5808 - 0.2e1 * t5660) * t6432 + t6845) * t6441 - (t7288 - 0.4e1 * (t5808 - t5660 / 0.2e1) * t7133 - 0.2e1 * t7370) * t6395 - (pkin(1) * t5553 + (pkin(6) * t5574 + t7307) * t6432) * t6415 - 0.2e1 * (t5844 - t7098) * t7264 + t7288;
t6274 = t7115 + pkin(1);
t7014 = t6274 * t7326;
t6046 = 0.1e1 / ((t6218 * t6443 + t7014) * t6415 + t6551);
t6334 = pkin(2) * t6363;
t6362 = t6403 * t6471;
t6597 = 0.2e1 * t6334 + t6362;
t6521 = t6597 + t7175;
t6885 = t6416 * t7152;
t7236 = (t6388 * t6444 + (-t6301 * t6885 - t6284 + (t6405 * t7033 + t6395) * t6452) * t6308 + ((t6395 * t7197 - t6521) * t6444 - t6301 * t6882) * t6435) * t6046;
t5995 = t7136 * t7236;
t5865 = pkin(8) * t5883;
t5866 = pkin(7) * t5883;
t5917 = pkin(6) * t5925;
t7097 = t5917 - t5866;
t5746 = t5865 - t7097;
t5879 = pkin(1) * t5883;
t7059 = pkin(6) * t7302;
t6091 = (t6154 * t6443 + (t6434 * t6474 - t7059) * t6415) * t6444;
t6826 = t6403 * t7061;
t6539 = t6415 * t7014 - t6435 * t6826 + t6091;
t5920 = pkin(1) * t5925;
t6585 = t5920 * t7144;
t6591 = t5944 * t6284 + t5746;
t6717 = t6415 * t5925;
t6730 = t7183 * t7263;
t6928 = t6405 * t7263;
t6953 = t6403 * t7266;
t6770 = ((t6434 * t6794 + ((t6331 + t6611) * t6443 + (t6300 + t7302) * pkin(2)) * t7183) * t6928 + ((pkin(2) * t6717 + t6274 * t6730) * t7302 + ((t5925 * t6389 - t6355 * t6591) * t6415 + t6277 * pkin(2) * t6730) * t6443 - (t6434 * t6591 - t7266) * t7330 - t6452 * (-t6926 * t6978 + t6585)) * t6444 + t6953 * t7334 + (t7343 * t6284 * t6924 + (t6274 * t7011 + t6434 * t7024) * t7266) * t6443 - (-t6435 * t7266 + (t5746 * t6435 + t5944 * t6274 + t5879) * t6434) * t7148 + t6585 * t7325) / ((-pkin(2) * t7024 + t6218 * t6415) * t6443 + t6539) * t7266;
t5848 = pkin(6) * t6960;
t6853 = -t7266 / 0.2e1;
t7112 = (t5866 + t5865 - t5917 / 0.2e1) * t6355 + pkin(3) * t6853;
t5722 = t5848 + t7112;
t5867 = pkin(6) * t5883;
t6841 = t5867 + t5785;
t5734 = t5842 + t6841;
t5752 = t5842 + t5867;
t6866 = t6434 * t7266;
t5758 = t6960 - t6866;
t5869 = t6474 * t5883;
t6404 = t6444 * t6405;
t7100 = 0.2e1 * t5785;
t7380 = t7100 + 0.2e1 * t5842;
t7429 = t5734 * t6435 + t5920;
t6494 = t6435 * (t5867 * t7175 + (((t5917 - 0.2e1 * t5865) * pkin(7) + t5869 + pkin(6) * t5911 - t7070 * t5883) * t6434 + t6952) * pkin(3)) + ((0.2e1 * t5867 + t7380) * t6435 + t5920) * t6334 + t7429 * t6362;
t6901 = t6435 * t7197;
t6929 = t6301 * t7263;
t6561 = t6901 * t6929;
t6732 = t6308 * t6929;
t6619 = t6452 * t6732;
t6571 = t6394 * t6619;
t6682 = 0.2e1 * t6728;
t6748 = t6435 * t5925;
t6700 = pkin(1) * t6748 + t6841;
t6703 = t6434 * t6853;
t6731 = t6308 * t6927;
t6747 = t6452 * t6866;
t6755 = t6415 * t6961;
t6787 = pkin(3) * t6953;
t6811 = 0.2e1 * t6927;
t6962 = t6415 * t5883;
t6996 = ((t5867 + t5911) * pkin(7) + pkin(6) * t5865 + t6573 * t7266 + t7112) * t6363;
t7374 = t6334 + t6362 - t6331;
t7390 = 0.2e1 * t6331 - t6362;
t6776 = (-(t6698 + t6597) * t6404 * t6730 * t7191 + (-0.4e1 * t6571 + (-0.3e1 * (t6239 + t6597) * t6620 - 0.2e1 * t6996 + (-0.2e1 * t5722 + t6787) * pkin(2)) * t6395 + ((t5883 * t6521 + t6747) * t7334 + 0.4e1 * t6619) * t6416 + (t6435 * t6850 + t6261 + t6597 * (t6390 * t6435 + pkin(1))) * t6811 - pkin(2) * t6787 + 0.2e1 * t6996 + t5722 * t6465) * t6405 + (t6561 * t7355 + (0.2e1 * (t6553 + t7374) * t6731 + t6494) * t6395 + (((t6703 + t6960) * t6374 - t7009 / 0.2e1 + t5869 / 0.2e1) * t7191 - t6561 + (t6362 / 0.2e1 + t6334 + t6646) * t6308 * t6962) * t7418 + (0.4e1 * t6287 + t6554 + t7390) * t6731 - t6494) * t6444 + 0.2e1 * t6571 + ((t6829 + t7374) * t6682 + (t5842 + t6700) * t6363 + pkin(2) * t5752) * t7176 + (((t5869 - t7009) * t6435 + t5758 * pkin(1)) * t6415 - 0.2e1 * t6732 + (t6597 + t7385) * t6755) * t7137 + (t7356 + (t6225 + t7390) * t6435) * t6713 - (t5734 * t6452 + t5785 * t6374) * t6363 - t5752 * t7322) * t6046 * t7263;
t6503 = t6770 + t6776;
t6025 = 0.1e1 / (t6091 + (t6204 * t6443 + t6434 * t7012 - t6826) * t6435 + t6308 * t7027);
t6588 = t6265 * t5883 - t6747;
t5749 = t5944 * t6265 + t6588;
t6618 = t6301 * t6713;
t7063 = 0.2e1 * t6363;
t7395 = t5805 * t7115 + t5879;
t7435 = t6301 * t6728;
t6768 = ((t6403 * t7019 + (t6301 * t7148 + t6329) * t7063 + t6301 * t6828 + t6223) * t6928 + (t6470 * t5805 * t6402 + (t6452 * t6703 + t5883 * t7344 + ((-t6301 * t7330 + t6279) * t6435 + t6851) * t7263) * t7063 + 0.2e1 * (t6301 * t6705 + t6266) * t6926 + pkin(2) * t5749) * t6444 + (-t6618 / 0.2e1 + t7395 * pkin(2)) * t7063 + t5749 * t7115 - pkin(2) * t6618 + (t5944 * t6414 + t6588) * pkin(1) + ((0.3e1 * t5794 - t7435) * t6444 + t7395) * t6362) / (t6443 * t7088 + t6539) * t5883;
t6100 = -t6301 * t7191 + t6416 * t6901;
t7194 = t6277 * t6308;
t6073 = -t6100 * t6436 + t6445 * t7194;
t6076 = t6100 * t6445 + t6436 * t7194;
t6145 = -t6301 * t7158 + t6308 * t6416;
t6103 = -t6145 * t6436 + t6284 * t6445;
t6106 = t6145 * t6445 + t6284 * t6436;
t6898 = t6308 * t7137;
t6115 = 0.2e1 * t6436 * t6898 + t6445 * t7197;
t6710 = t6445 * t6898;
t6863 = t6436 * t7197;
t5980 = ((-0.2e1 * t6710 + t6863) * t6349 + t6115 * t6346) * t6405 + (t6073 * t6346 + t6076 * t6349) * t6444 + (t6103 * t6346 + t6106 * t6349) * t6452;
t7252 = t5980 * t6429;
t5977 = (t6115 * t6349 + 0.2e1 * (t6710 - t6863 / 0.2e1) * t6346) * t6405 + (t6073 * t6349 - t6076 * t6346) * t6444 + (t6103 * t6349 - t6106 * t6346) * t6452;
t7258 = t5977 * t6430;
t7367 = t6025 * (t7252 + t7258) + t6768;
t5554 = t5995 + (-t6415 * t7367 - t6503) * t6472;
t5764 = pkin(3) * t7266 - t5848;
t5845 = pkin(1) * t6961;
t5857 = pkin(2) * t5867;
t5868 = t6471 * t5883;
t5893 = pkin(1) * t6717;
t6178 = -pkin(2) + t6669;
t6594 = 0.2e1 * t6404 * t6713;
t6497 = pkin(3) * (pkin(6) * t6683 + t5870) + t6594 * t7326;
t6644 = -t6444 * t7059 + t6166;
t6657 = pkin(2) * t6713;
t6789 = pkin(2) * t5925;
t6660 = t6444 * t6789;
t6678 = t5883 * t6414 + t5869;
t6693 = pkin(2) * t6811;
t6792 = pkin(2) * t6962;
t6796 = pkin(1) * t6960;
t6810 = 0.2e1 * t6924;
t6815 = 0.2e1 * t7263;
t7003 = pkin(6) * t7263;
t6818 = pkin(2) * t7003;
t6821 = pkin(2) * t6993;
t6823 = pkin(1) * t5870;
t7106 = -t6960 + t5917;
t7450 = t6435 * t7106;
t6985 = pkin(3) * t7450;
t7103 = t5893 + 0.2e1 * t7017;
t7275 = (-t5870 + t6579) * t6405;
t7278 = ((pkin(2) * t6682 + t6841) * t6434 + t6993) * t6405;
t7350 = 0.4e1 * t6405;
t7337 = t7350 - 0.2e1;
t7402 = t6402 * t5868;
t5587 = (((t6405 - 0.4e1 / 0.3e1) * t7171 + ((-0.2e1 / 0.3e1 * t6331 + t7071) * t6405 + 0.2e1 / 0.3e1 * t6780 + 0.4e1 / 0.3e1 * t6331 + t6830) * t6443 + (0.4e1 / 0.3e1 * t7302 - 0.2e1 / 0.3e1 * t6300) * t6178) * t7263 * t7354 + (t6340 * t7402 - (t7275 + (t5879 + t7450) * t6444 + 0.3e1 * t5870 - 0.4e1 * t7435) * t7302 + ((t6713 * t7361 - t6823) * t6444 + (pkin(6) * t6693 - t6796) * t6435 + t5868 + (-t7278 + (t6594 + (pkin(2) * t6748 - 0.4e1 * t6713) * t6444 + 0.2e1 * (t5920 + t6693) * t6435 + t5867 + t7100) * t6434) * pkin(3) - t6678) * t6443 + ((-t6728 * t7175 - t5857) * t6434 - t6821) * t6405 + ((t5764 * t6435 - 0.2e1 * t6657) * t6434 + t6985) * t6444 + (t6327 * t6728 + t5857) * t6434 + t6497) * t6395 + ((-0.3e1 * t6405 + 0.3e1) * t7171 * t7263 - (t6340 * t5893 + (-t6660 + (-t5867 - t7380) * t6435) * t6415 + ((t7362 + 0.4e1 * t7115) * t6444 + t7337 * pkin(2)) * t7263) * t7302 + (0.2e1 * (t6331 + t7074) * t6928 + (((t5845 + t7106) * t6355 + t5764) * t6415 - t6274 * pkin(2) * t6815) * t6444 + (t6755 * t6464 - 0.4e1 * t7003) * t6355 + (pkin(6) * t6792 + t6466 * t6924) * t6435 - t6224 * t7263) * t6443 + ((-t6415 * t6796 + 0.2e1 * t6818) * t6434 + pkin(3) * t7103) * t6405 + ((pkin(1) * t6792 + pkin(6) * t6810) * t6434 + pkin(3) * t6810) * t7128 + (-0.2e1 * t6818 + (t6435 * t6678 + t6796) * t6415) * t6434 - pkin(3) * (t5785 * t7158 + t7103)) * t6416 + t7412 * t7402 - (-t7275 - t5870 + (-t7106 * t6444 + (t7360 + t6355) * t6927) * t6435) * t7302 + (-t5868 + (t7278 + (-t6435 * t6660 + (t6284 * t6444 - t6452 * t6404) * t6415 * t6815 - t6700) * t6434) * pkin(3)) * t6443 + ((t5857 + (t6435 * t7175 + t7067) * t6927) * t6434 + t6821) * t6405 + (((pkin(1) * t6693 - t5764) * t6435 + 0.2e1 * t6657) * t6434 - t6985) * t6444 + (-t5857 + (t6225 * t6435 + t7356) * t6927) * t6434 - t6497) / (t6136 + t6415 * (t6142 * t6443 + t6644)) * t7263;
t6379 = pkin(1) * t6444;
t6576 = t6405 * t6452 - t6981;
t6719 = t6178 * t6300 * t7263;
t7320 = pkin(3) * t6300;
t5680 = (-t6974 - ((t5935 + (t6379 + t6465) * t5883) * t6416 + (-t6660 - t7429) * t6415 + ((-t6364 + (-t7115 + pkin(1)) * t6444 + t6464) * t6395 + t6178) * t7263) * t7302 + ((-t6444 * t6823 + t6284 * t6866 - (t6287 + t6328) * t5883) * t6416 + (pkin(2) * t6301 * t6961 - pkin(6) * t5758 * t6444) * t6415 + (-(pkin(1) * t6365 + t6405 * t7320 + t6287 - t6331 + t6831) * t6395 + (((t6374 - t6452) * t6355 - t7314) * t6444 + 0.3e1 * t6988) * t7162 + t7181 * t7320) * t7263) * t6443 - t6395 * t6719 - (pkin(1) * t6576 - t6328 * t6435 - t6388) * t6416 * t6729 + t5755 * t6221 * t6415 + t6719) * t6044 * t5883;
t6378 = pkin(1) * t6405;
t7130 = t6434 * t6443;
t5695 = (((pkin(1) * t6754 + t5755) * t6443 - (t6379 + pkin(2)) * t5925) * t6416 + ((t6866 + t7106) * t6435 - t5879 + (t6221 * t6403 + (pkin(6) * t7130 - pkin(2)) * t6444) * t5883) * t6415 + ((-(-t6365 + t6378 + t6466 - t7126) * t7162 - t7001 * t7128) * t6403 + (t6300 * t6885 + ((t6391 * t6405 + t6981 / 0.2e1 + t6284) * t7352 + t6576 - t6284) * t6434) * t6443 + (t6378 - t6274) * t7162 + t7343 * t6301 * t7128) * t7263) * t6044 * t7266;
t6509 = ((pkin(3) * t7186 - pkin(6)) * t6443 + t6434 * t6178) * t7162 - (t6230 * t6443 + (t6300 - 0.2e1 * t7302) * t6435) * t6395 - (-t6300 + t7302) * t6435;
t6530 = -(t6281 * t6435 + t6672) * t7159 + (pkin(1) + t6835) * t7139;
t5990 = -t6161 * t6509 + t6162 * t6530;
t6049 = 0.1e1 / (t6136 + t6415 * (t6139 * t6443 + t6644));
t7247 = t5990 * t6049;
t5972 = t6430 * t7247;
t5991 = t6161 * t6530 + t6162 * t6509;
t7246 = t5991 * t6049;
t5973 = t6429 * t7246;
t6799 = -t6405 + t7187;
t6696 = t6799 + 0.1e1;
t6888 = t6415 * t7143;
t7233 = ((-t6230 * t7162 + t7455) * t6443 + (-pkin(6) * t6888 - t6178 * t6395 + t6221 * t6444) * t6434 + (-t6696 * t7130 + t6888 * t7338) * pkin(3)) * t6041;
t6001 = t6428 * t7233;
t5575 = t5972 + t5973 + t6001 - t5587 - t5680 - t5695;
t5661 = pkin(7) * t5671;
t6756 = t7263 * t5883;
t5809 = pkin(2) * t6756;
t6844 = 0.2e1 * t5668 - t7081;
t5666 = pkin(2) * t5671;
t6663 = pkin(7) * t6756;
t7287 = (0.2e1 * t5666 + 0.4e1 * t6663) * t6405;
t7306 = t5554 * pkin(7);
t7369 = -t7097 * t7263 + t5666;
t5882 = t5890 ^ 2 / t6061 ^ 2;
t7393 = t5882 + t5924;
t7469 = (-(pkin(2) * t5554 + pkin(6) * t7393) * t6415 - (0.4e1 * t5809 - 0.2e1 * t5661) * t6435 + t6844) * t6444 - (t7287 - 0.4e1 * (t5809 - t5661 / 0.2e1) * t7128 - 0.2e1 * t7369) * t6395 - (pkin(1) * t5554 + (pkin(6) * t5575 + t7306) * t6435) * t6415 - 0.2e1 * (t5845 - t7097) * t7263 + t7287;
t6275 = t7114 + pkin(1);
t7013 = t6275 * t7324;
t6047 = 0.1e1 / ((t6219 * t6446 + t7013) * t6415 + t6550);
t6335 = pkin(2) * t6367;
t6366 = t6407 * t6471;
t6596 = 0.2e1 * t6335 + t6366;
t6520 = t6596 + t7175;
t6884 = t6416 * t7150;
t7235 = (t6388 * t6447 + (-t6304 * t6884 - t6285 + (t6409 * t7033 + t6395) * t6452) * t6310 + ((t6395 * t7196 - t6520) * t6447 - t6304 * t6882) * t6438) * t6047;
t5996 = t7136 * t7235;
t5877 = pkin(8) * t5885;
t5871 = pkin(7) * t5885;
t5918 = pkin(6) * t5927;
t7096 = t5918 - t5871;
t5747 = t5877 - t7096;
t5876 = pkin(1) * t5885;
t7058 = pkin(6) * t7301;
t6092 = (t6155 * t6446 + (t6437 * t6474 - t7058) * t6415) * t6447;
t6825 = t6407 * t7061;
t6538 = t6415 * t7013 - t6438 * t6825 + t6092;
t5921 = pkin(1) * t5927;
t6584 = t5921 * t7142;
t6590 = t5945 * t6285 + t5747;
t6716 = t6415 * t5927;
t6724 = t7183 * t7262;
t6919 = t6409 * t7262;
t6951 = t6407 * t7265;
t6769 = ((t6437 * t6794 + ((t6332 + t6611) * t6446 + (t6303 + t7301) * pkin(2)) * t7183) * t6919 + ((pkin(2) * t6716 + t6275 * t6724) * t7301 + ((t5927 * t6389 - t6357 * t6590) * t6415 + pkin(2) * t6278 * t6724) * t6446 - (t6437 * t6590 - t7265) * t7330 - (-t6917 * t6977 + t6584) * t6452) * t6447 + t6951 * t7334 + (t7343 * t6285 * t6915 + (t6275 * t7011 + t6437 * t7023) * t7265) * t6446 - (-t6438 * t7265 + (t5747 * t6438 + t5945 * t6275 + t5876) * t6437) * t7148 + t6584 * t7323) / ((-pkin(2) * t7023 + t6219 * t6415) * t6446 + t6538) * t7265;
t5849 = pkin(6) * t6956;
t6852 = -t7265 / 0.2e1;
t7111 = (t5871 + t5877 - t5918 / 0.2e1) * t6357 + pkin(3) * t6852;
t5723 = t5849 + t7111;
t5872 = pkin(6) * t5885;
t6840 = t5872 + t5786;
t5735 = t5843 + t6840;
t5753 = t5843 + t5872;
t6862 = t6437 * t7265;
t5759 = t6956 - t6862;
t5874 = t6474 * t5885;
t6408 = t6447 * t6409;
t7099 = 0.2e1 * t5786;
t7381 = t7099 + 0.2e1 * t5843;
t7428 = t5735 * t6438 + t5921;
t6493 = (t5872 * t7175 + (((t5918 - 0.2e1 * t5877) * pkin(7) + t5874 + pkin(6) * t5912 - t7070 * t5885) * t6437 + t6950) * pkin(3)) * t6438 + ((0.2e1 * t5872 + t7381) * t6438 + t5921) * t6335 + t7428 * t6366;
t6900 = t6438 * t7196;
t6921 = t6304 * t7262;
t6558 = t6900 * t6921;
t6726 = t6310 * t6921;
t6614 = t6452 * t6726;
t6570 = t6394 * t6614;
t6680 = 0.2e1 * t6722;
t6746 = t6438 * t5927;
t6699 = pkin(1) * t6746 + t6840;
t6702 = t6437 * t6852;
t6725 = t6310 * t6918;
t6745 = t6452 * t6862;
t6752 = t6415 * t6957;
t6786 = pkin(3) * t6951;
t6809 = 0.2e1 * t6918;
t6959 = t6415 * t5885;
t6995 = ((t5872 + t5912) * pkin(7) + pkin(8) * t5872 + t6573 * t7265 + t7111) * t6367;
t7373 = t6335 + t6366 - t6332;
t7389 = 0.2e1 * t6332 - t6366;
t6775 = (-(t6698 + t6596) * t6408 * t6724 * t7190 + (-0.4e1 * t6570 + (-0.3e1 * (t6239 + t6596) * t6615 - 0.2e1 * t6995 + (-0.2e1 * t5723 + t6786) * pkin(2)) * t6395 + ((t5885 * t6520 + t6745) * t7334 + 0.4e1 * t6614) * t6416 + (t6438 * t6850 + t6261 + t6596 * (t6390 * t6438 + pkin(1))) * t6809 - pkin(2) * t6786 + 0.2e1 * t6995 + t5723 * t6465) * t6409 + (t6558 * t7355 + (0.2e1 * (t6553 + t7373) * t6725 + t6493) * t6395 + (((t6702 + t6956) * t6375 - t7008 / 0.2e1 + t5874 / 0.2e1) * t7190 - t6558 + (t6366 / 0.2e1 + t6335 + t6646) * t6310 * t6959) * t7418 + (0.4e1 * t6288 + t6554 + t7389) * t6725 - t6493) * t6447 + 0.2e1 * t6570 + ((t6829 + t7373) * t6680 + (t5843 + t6699) * t6367 + pkin(2) * t5753) * t7176 + (((t5874 - t7008) * t6438 + t5759 * pkin(1)) * t6415 - 0.2e1 * t6726 + (t6596 + t7385) * t6752) * t7137 + (t7356 + (t6225 + t7389) * t6438) * t6712 - (t5735 * t6452 + t5786 * t6375) * t6367 - t5753 * t7322) * t6047 * t7262;
t6502 = t6769 + t6775;
t6026 = 0.1e1 / (t6092 + (t6204 * t6446 + t6437 * t7012 - t6825) * t6438 + t6310 * t7026);
t6587 = t6265 * t5885 - t6745;
t5750 = t5945 * t6265 + t6587;
t6613 = t6304 * t6712;
t7062 = 0.2e1 * t6367;
t7397 = t5807 * t7114 + t5876;
t7434 = t6304 * t6722;
t6767 = ((t6407 * t7019 + (t6304 * t7148 + t6329) * t7062 + t6304 * t6828 + t6223) * t6919 + (t6470 * t5807 * t6406 + (t6452 * t6702 + t5885 * t7344 + ((-t6304 * t7330 + t6279) * t6438 + t6851) * t7262) * t7062 + 0.2e1 * (t6304 * t6705 + t6266) * t6917 + pkin(2) * t5750) * t6447 + (-t6613 / 0.2e1 + t7397 * pkin(2)) * t7062 + t5750 * t7114 - pkin(2) * t6613 + (t5945 * t6414 + t6587) * pkin(1) + ((0.3e1 * t5795 - t7434) * t6447 + t7397) * t6366) / (t6446 * t7087 + t6538) * t5885;
t6101 = -t6304 * t7190 + t6416 * t6900;
t7193 = t6278 * t6310;
t6074 = -t6101 * t6439 + t6448 * t7193;
t6077 = t6101 * t6448 + t6439 * t7193;
t6146 = -t6304 * t7156 + t6310 * t6416;
t6104 = -t6146 * t6439 + t6285 * t6448;
t6107 = t6146 * t6448 + t6285 * t6439;
t6897 = t6310 * t7137;
t6116 = 0.2e1 * t6439 * t6897 + t6448 * t7196;
t6709 = t6448 * t6897;
t6860 = t6439 * t7196;
t5981 = ((-0.2e1 * t6709 + t6860) * t6350 + t6116 * t6347) * t6409 + (t6074 * t6347 + t6077 * t6350) * t6447 + (t6104 * t6347 + t6107 * t6350) * t6452;
t7250 = t5981 * t6429;
t5978 = (t6116 * t6350 + 0.2e1 * (t6709 - t6860 / 0.2e1) * t6347) * t6409 + (t6074 * t6350 - t6077 * t6347) * t6447 + (t6104 * t6350 - t6107 * t6347) * t6452;
t7256 = t5978 * t6430;
t7366 = t6026 * (t7250 + t7256) + t6767;
t5555 = t5996 + (-t6415 * t7366 - t6502) * t6472;
t5765 = pkin(3) * t7265 - t5849;
t5846 = pkin(1) * t6957;
t5858 = pkin(2) * t5872;
t5873 = t6471 * t5885;
t5894 = pkin(1) * t6716;
t6179 = -pkin(2) + t6668;
t6593 = 0.2e1 * t6408 * t6712;
t6496 = pkin(3) * (pkin(6) * t6681 + t5875) + t6593 * t7324;
t6643 = -t6447 * t7058 + t6167;
t6656 = pkin(2) * t6712;
t6785 = pkin(2) * t5927;
t6659 = t6447 * t6785;
t6677 = t5885 * t6414 + t5874;
t6692 = pkin(2) * t6809;
t6791 = pkin(2) * t6959;
t6795 = pkin(1) * t6956;
t6808 = 0.2e1 * t6915;
t6814 = 0.2e1 * t7262;
t7002 = pkin(6) * t7262;
t6817 = pkin(2) * t7002;
t6820 = pkin(2) * t6992;
t7105 = -t6956 + t5918;
t7449 = t6438 * t7105;
t6984 = pkin(3) * t7449;
t7073 = t6332 + t6471;
t7102 = t5894 + 0.2e1 * t7016;
t7274 = (-t5875 + t6578) * t6409;
t7277 = ((pkin(2) * t6680 + t6840) * t6437 + t6992) * t6409;
t7349 = 0.4e1 * t6409;
t7335 = t7349 - 0.2e1;
t7401 = t6406 * t5873;
t5588 = (((-0.4e1 / 0.3e1 + t6409) * t7168 + ((-0.2e1 / 0.3e1 * t6332 + t7071) * t6409 + 0.2e1 / 0.3e1 * t6779 + 0.4e1 / 0.3e1 * t6332 + t6830) * t6446 + (0.4e1 / 0.3e1 * t7301 - 0.2e1 / 0.3e1 * t6303) * t6179) * t7262 * t7354 + (t6341 * t7401 - (t7274 + (t5876 + t7449) * t6447 + 0.3e1 * t5875 - 0.4e1 * t7434) * t7301 + ((-pkin(1) * t5875 + t6712 * t7361) * t6447 + (pkin(6) * t6692 - t6795) * t6438 + t5873 + (-t7277 + (t6593 + (pkin(2) * t6746 - 0.4e1 * t6712) * t6447 + 0.2e1 * (t5921 + t6692) * t6438 + t5872 + t7099) * t6437) * pkin(3) - t6677) * t6446 + ((-t6722 * t7175 - t5858) * t6437 - t6820) * t6409 + ((t5765 * t6438 - 0.2e1 * t6656) * t6437 + t6984) * t6447 + (t6327 * t6722 + t5858) * t6437 + t6496) * t6395 + ((-0.3e1 * t6409 + 0.3e1) * t7168 * t7262 - (t6341 * t5894 + (-t6659 + (-t5872 - t7381) * t6438) * t6415 + ((t7362 + 0.4e1 * t7114) * t6447 + t7335 * pkin(2)) * t7262) * t7301 + (0.2e1 * (t6259 + t7073) * t6919 + (((t5846 + t7105) * t6357 + t5765) * t6415 - t6275 * pkin(2) * t6814) * t6447 + (t6752 * t6464 - 0.4e1 * t7002) * t6357 + (pkin(6) * t6791 + t6466 * t6915) * t6438 - t6224 * t7262) * t6446 + ((-t6415 * t6795 + 0.2e1 * t6817) * t6437 + pkin(3) * t7102) * t6409 + ((pkin(1) * t6791 + pkin(6) * t6808) * t6437 + pkin(3) * t6808) * t7123 + (-0.2e1 * t6817 + (t6438 * t6677 + t6795) * t6415) * t6437 - pkin(3) * (t5786 * t7156 + t7102)) * t6416 + t7411 * t7401 - (-t7274 - t5875 + (-t7105 * t6447 + (t7360 + t6357) * t6918) * t6438) * t7301 + (-t5873 + (t7277 + (-t6438 * t6659 + (t6285 * t6447 - t6452 * t6408) * t6415 * t6814 - t6699) * t6437) * pkin(3)) * t6446 + ((t5858 + (t6438 * t7175 + t7067) * t6918) * t6437 + t6820) * t6409 + (((pkin(1) * t6692 - t5765) * t6438 + 0.2e1 * t6656) * t6437 - t6984) * t6447 + (-t5858 + (t6225 * t6438 + t7356) * t6918) * t6437 - t6496) / (t6137 + t6415 * (t6143 * t6446 + t6643)) * t7262;
t6381 = pkin(1) * t6447;
t6574 = -pkin(1) * t6369 - t6288 - t6328;
t6575 = t6409 * t6452 - t6980;
t6922 = t6303 * t7262;
t6727 = t6179 * t6922;
t5681 = (-t6973 - ((t5936 + (t6381 + t6465) * t5885) * t6416 + (-t6659 - t7428) * t6415 + ((-t6368 + (-t7114 + pkin(1)) * t6447 + t6464) * t6395 + t6179) * t7262) * t7301 + (-(pkin(3) * t6303 * t6409 - t6574 - t7073) * t6920 + ((((t6375 - t6452) * t6357 - t7314) * t6447 + 0.3e1 * t6983) * t6918 + t6285 * t6862 + t6574 * t5885) * t6416 + (pkin(2) * t6304 * t6957 - pkin(6) * t5759 * t6447) * t6415 + pkin(3) * t6922 * t7180) * t6446 - t6395 * t6727 - (pkin(1) * t6575 - t6328 * t6438 - t6388) * t6416 * t6723 + t5756 * t6222 * t6415 + t6727) * t6042 * t5885;
t6380 = pkin(1) * t6409;
t7125 = t6437 * t6446;
t5696 = (((pkin(1) * t6751 + t5756) * t6446 - (t6381 + pkin(2)) * t5927) * t6416 + ((t6862 + t7105) * t6438 - t5876 + (t6222 * t6407 + (pkin(6) * t7125 - pkin(2)) * t6447) * t5885) * t6415 + ((-(-t6369 + t6380 + t6466 - t7121) * t7162 - t7001 * t7123) * t6407 + (t6303 * t6884 + ((t6391 * t6409 + t6980 / 0.2e1 + t6285) * t7352 + t6575 - t6285) * t6437) * t6446 + (t6380 - t6275) * t7162 + t7343 * t6304 * t7123) * t7262) * t6042 * t7265;
t6508 = ((pkin(3) * t7184 - pkin(6)) * t6446 + t6437 * t6179) * t7162 - (t6231 * t6446 + (t6303 - 0.2e1 * t7301) * t6438) * t6395 - (-t6303 + t7301) * t6438;
t6529 = -(t6282 * t6438 + t6671) * t7157 + (pkin(1) + t6834) * t7138;
t5992 = -t6163 * t6508 + t6164 * t6529;
t6050 = 0.1e1 / (t6137 + t6415 * (t6140 * t6446 + t6643));
t7245 = t5992 * t6050;
t5974 = t6430 * t7245;
t5993 = t6163 * t6529 + t6164 * t6508;
t7244 = t5993 * t6050;
t5975 = t6429 * t7244;
t6798 = -t6409 + t7185;
t6695 = t6798 + 0.1e1;
t6887 = t6415 * t7141;
t7232 = ((-t6231 * t7162 + t7455) * t6446 + (-pkin(6) * t6887 - t6179 * t6395 + t6222 * t6447) * t6437 + (-t6695 * t7125 + t6887 * t7336) * pkin(3)) * t6039;
t6002 = t6428 * t7232;
t5576 = t5974 + t5975 + t6002 - t5588 - t5681 - t5696;
t5662 = pkin(7) * t5672;
t6753 = t7262 * t5885;
t5810 = pkin(2) * t6753;
t6843 = 0.2e1 * t5669 - t7077;
t5659 = t5672 * pkin(2);
t6662 = pkin(7) * t6753;
t7286 = (0.2e1 * t5659 + 0.4e1 * t6662) * t6409;
t7305 = t5555 * pkin(7);
t7371 = -t7096 * t7262 + t5659;
t5884 = t5891 ^ 2 / t6062 ^ 2;
t7392 = t5884 + t5926;
t7468 = (-(pkin(2) * t5555 + pkin(6) * t7392) * t6415 - (0.4e1 * t5810 - 0.2e1 * t5662) * t6438 + t6843) * t6447 - (t7286 - 0.4e1 * (t5810 - t5662 / 0.2e1) * t7123 - 0.2e1 * t7371) * t6395 - (pkin(1) * t5555 + (pkin(6) * t5576 + t7305) * t6438) * t6415 - 0.2e1 * (t5846 - t7096) * t7262 + t7286;
t5571 = pkin(1) * t5574;
t5628 = t5821 + t5663;
t7461 = t6432 * (-pkin(1) * t7394 + t5628 * t7348 + t7086) - ((t5861 - t5913) * t6813 - t5571) * t6441 - t5907;
t5572 = pkin(1) * t5575;
t5630 = t5822 + t5664;
t7459 = t6435 * (-pkin(1) * t7393 + t5630 * t7348 + t7082) - ((t5867 - t5914) * t6811 - t5572) * t6444 - t5908;
t5573 = pkin(1) * t5576;
t5626 = t5820 + t5658;
t7457 = t6438 * (-pkin(1) * t7392 + t5626 * t7348 + t7078) - ((t5872 - t5915) * t6809 - t5573) * t6447 - t5909;
t7005 = t6415 * t5658;
t7448 = -pkin(1) * t5884 - 0.2e1 * t7005 + t7078;
t7318 = pkin(6) * t6415;
t7006 = t5671 * t7318;
t7447 = -pkin(1) * t5882 - 0.2e1 * t7006 + t7082;
t7007 = t5670 * t7318;
t7446 = -pkin(1) * t5880 - 0.2e1 * t7007 + t7086;
t7417 = 0.2e1 * t6441;
t7416 = 0.2e1 * t6444;
t7415 = 0.2e1 * t6447;
t6686 = -0.2e1 * t6753;
t6687 = -0.2e1 * t6756;
t6688 = -0.2e1 * t6759;
t7406 = t6395 * t7335;
t7405 = t6395 * t7337;
t7404 = t6395 * t7339;
t5649 = t6432 * t5670;
t6635 = t6441 * t6759;
t6519 = t5649 + t6635;
t5650 = t6435 * t5671;
t6632 = t6444 * t6756;
t6518 = t5650 + t6632;
t5651 = t5672 * t6438;
t6629 = t6447 * t6753;
t6517 = t5651 + t6629;
t7384 = -pkin(7) * t7123 - t6368;
t7383 = -pkin(7) * t7128 - t6364;
t7382 = -pkin(7) * t7133 - t6360;
t6232 = t7297 / 0.2e1 - t6354 / 0.2e1;
t6233 = t7298 / 0.2e1 + t7300 / 0.2e1;
t6569 = t6401 * t6627;
t6634 = t5923 * t5881;
t6583 = pkin(2) * t6634;
t6708 = -t5922 / 0.2e1;
t6857 = t5880 / 0.2e1;
t7313 = pkin(7) * t5574;
t7332 = pkin(2) * t5574;
t7346 = pkin(7) / 0.2e1;
t7359 = -0.2e1 * (t6627 * t7382 + t5628) * t6395 - 0.2e1 * (((t5808 - t5660) * t6415 + pkin(1) * t6634) * t6441 + t7370 * t7160 + t6583 + (t6373 / 0.2e1 + t7346) * t5553) * t6416 - 0.2e1 * pkin(2) * t6569 - 0.2e1 * ((-t7313 / 0.2e1 + t5553 * t6460 + (t6857 + t6708) * pkin(2)) * t6415 + (pkin(7) * t6432 + pkin(1)) * t6627) * t6441 - 0.2e1 * ((-pkin(6) * t6634 + pkin(7) * t6857 - t5907 / 0.2e1 + t7332 / 0.2e1) * t6432 + t6233 * t6348 + t6232 * t6345 + pkin(1) * t6708) * t6415 + 0.2e1 * t5663;
t6234 = t7295 / 0.2e1 - t6356 / 0.2e1;
t6235 = t7296 / 0.2e1 + t7299 / 0.2e1;
t6568 = t6405 * t6622;
t6631 = t5925 * t5883;
t6582 = pkin(2) * t6631;
t6707 = -t5924 / 0.2e1;
t6856 = t5882 / 0.2e1;
t7312 = pkin(7) * t5575;
t7331 = pkin(2) * t5575;
t7358 = -0.2e1 * (t6622 * t7383 + t5630) * t6395 - 0.2e1 * (((t5809 - t5661) * t6415 + pkin(1) * t6631) * t6444 + t7369 * t7158 + t6582 + (t6374 / 0.2e1 + t7346) * t5554) * t6416 - 0.2e1 * pkin(2) * t6568 - 0.2e1 * ((-t7312 / 0.2e1 + t5554 * t6460 + (t6856 + t6707) * pkin(2)) * t6415 + (pkin(7) * t6435 + pkin(1)) * t6622) * t6444 - 0.2e1 * ((-pkin(6) * t6631 + pkin(7) * t6856 - t5908 / 0.2e1 + t7331 / 0.2e1) * t6435 + t6235 * t6349 + t6234 * t6346 + pkin(1) * t6707) * t6415 + 0.2e1 * t5664;
t6236 = t7308 / 0.2e1 - t6371 / 0.2e1;
t6237 = t7310 / 0.2e1 + t7309 / 0.2e1;
t6567 = t6409 * t6617;
t6628 = t5927 * t5885;
t6581 = pkin(2) * t6628;
t6706 = -t5926 / 0.2e1;
t6855 = t5884 / 0.2e1;
t7304 = t5576 * pkin(2);
t7311 = pkin(7) * t5576;
t7357 = -0.2e1 * (t6617 * t7384 + t5626) * t6395 - 0.2e1 * (((t5810 - t5662) * t6415 + pkin(1) * t6628) * t6447 + t7371 * t7156 + t6581 + (t6375 / 0.2e1 + t7346) * t5555) * t6416 - 0.2e1 * pkin(2) * t6567 - 0.2e1 * ((-t7311 / 0.2e1 + t5555 * t6460 + (t6855 + t6706) * pkin(2)) * t6415 + (pkin(7) * t6438 + pkin(1)) * t6617) * t6447 - 0.2e1 * ((pkin(7) * t6855 - t5909 / 0.2e1 + t7304 / 0.2e1 - pkin(6) * t6628) * t6438 + t6237 * t6350 + t6236 * t6347 + pkin(1) * t6706) * t6415 + 0.2e1 * t5658;
t7341 = t7352 - 0.1e1;
t6393 = t6415 ^ 2;
t7293 = MDP(4) * t6393;
t7292 = MDP(5) * t6393;
t7291 = MDP(6) * t6415;
t7290 = MDP(7) * t6415;
t7289 = MDP(15) * t6415;
t7285 = t5670 * t6441;
t7284 = t5671 * t6444;
t7283 = t5672 * t6447;
t7261 = t5976 * t6024;
t7259 = t5977 * t6025;
t7257 = t5978 * t6026;
t7255 = t5979 * t6024;
t7253 = t5980 * t6025;
t7251 = t5981 * t6026;
t6207 = g(1) * t6347 - g(2) * t6350;
t6210 = g(1) * t6350 + g(2) * t6347;
t7230 = t6042 * (t6207 * t6448 + t6210 * t6439);
t7229 = t6042 * (-t6207 * t6439 + t6210 * t6448);
t6205 = g(1) * t6345 - g(2) * t6348;
t6208 = g(1) * t6348 + g(2) * t6345;
t7227 = t6043 * (t6205 * t6442 + t6208 * t6433);
t7226 = t6043 * (-t6205 * t6433 + t6208 * t6442);
t6206 = g(1) * t6346 - g(2) * t6349;
t6209 = g(1) * t6349 + g(2) * t6346;
t7224 = t6044 * (t6206 * t6445 + t6209 * t6436);
t7223 = t6044 * (-t6206 * t6436 + t6209 * t6445);
t7179 = t6395 * t6432;
t7178 = t6395 * t6435;
t7177 = t6395 * t6438;
t7173 = t6401 * t5670;
t7170 = t6405 * t5671;
t7167 = t6409 * t5672;
t7165 = t6415 * t5574;
t7164 = t6415 * t5575;
t7163 = t6415 * t5576;
t7155 = t6415 * t6440;
t7153 = t6415 * t6443;
t7151 = t6415 * t6446;
t7134 = t6432 * t5574;
t7129 = t6435 * t5575;
t7124 = t6438 * t5576;
t7110 = -0.2e1 * t5808 + t5660;
t7109 = -0.2e1 * t5809 + t5661;
t7108 = -0.2e1 * t5810 + t5662;
t7095 = t5955 - t5880;
t7094 = t5956 - t5882;
t7093 = t5957 - t5884;
t7057 = 0.2e1 * t6415;
t7055 = 0.4e1 * t6416;
t6565 = t6432 * t6627;
t7054 = (t6565 - t7165 / 0.2e1) * t7417;
t6562 = t6435 * t6622;
t7053 = (t6562 - t7164 / 0.2e1) * t7416;
t6559 = t6438 * t6617;
t7052 = (t6559 - t7163 / 0.2e1) * t7415;
t7051 = -0.2e1 * t7243;
t7050 = 0.2e1 * t7243;
t7049 = -0.2e1 * t7242;
t7048 = 0.2e1 * t7242;
t7047 = -0.2e1 * t7241;
t7046 = 0.2e1 * t7241;
t7045 = -0.2e1 * t7240;
t7044 = 0.2e1 * t7240;
t7043 = -0.2e1 * t7239;
t7042 = 0.2e1 * t7239;
t7041 = -0.2e1 * t7238;
t7040 = 0.2e1 * t7238;
t7039 = -0.2e1 * t7231;
t7038 = 0.2e1 * t7231;
t7037 = -0.2e1 * t7228;
t7036 = 0.2e1 * t7228;
t7035 = -0.2e1 * t7225;
t7034 = 0.2e1 * t7225;
t6976 = t5672 * t7123;
t6972 = (t5881 + t5923) * (t5881 - t5923) * t6415;
t6971 = (t5883 + t5925) * (t5883 - t5925) * t6415;
t6970 = (t5885 + t5927) * (t5885 - t5927) * t6415;
t6966 = t6444 * t5882;
t6949 = t6395 * t5955;
t6947 = t6432 * t5955;
t6946 = t6441 * t5955;
t6945 = t6395 * t5956;
t6943 = t6435 * t5956;
t6942 = t6444 * t5956;
t6941 = t6395 * t5957;
t6939 = t6438 * t5957;
t6938 = t6447 * t5957;
t6881 = t6415 * t5649;
t6880 = t6432 * t7155;
t6878 = t6415 * t5650;
t6877 = t6435 * t7153;
t6875 = t5672 * t7156;
t6874 = t6438 * t7151;
t6869 = t5670 * t7133;
t6865 = t5671 * t7128;
t6859 = t6441 * t5880;
t6858 = t6447 * t5884;
t6849 = -t7173 / 0.2e1;
t6848 = -t7170 / 0.2e1;
t6847 = -t7167 / 0.2e1;
t6784 = t5880 * t7318;
t6783 = t5882 * t7318;
t6782 = t5884 * t7318;
t6762 = t5811 * t6933;
t6761 = t5812 * t6926;
t6760 = t5813 * t6917;
t6744 = t6048 * t6946;
t6743 = t6415 * t6946;
t6742 = t6049 * t6942;
t6741 = t6415 * t6942;
t6740 = t6050 * t6938;
t6739 = t6415 * t6938;
t6676 = -t5955 + t6949;
t6675 = -t5956 + t6945;
t6674 = -t5957 + t6941;
t6639 = t6048 * t6762;
t6638 = t6049 * t6761;
t6637 = t6050 * t6760;
t6636 = t6415 * t6759;
t6633 = t6415 * t6756;
t6630 = t6415 * t6753;
t6626 = t6432 * t6736;
t6621 = t6435 * t6730;
t6616 = t6438 * t6724;
t5823 = 0.2e1 * t6627;
t5824 = 0.2e1 * t6622;
t5825 = 0.2e1 * t6617;
t6566 = t6432 * t6634;
t6563 = t6435 * t6631;
t6560 = t6438 * t6628;
t6557 = -t5586 / 0.2e1 - t5679 / 0.2e1 - t5694 / 0.2e1 + t5970 / 0.2e1 + t5971 / 0.2e1 + t6000 / 0.2e1;
t6556 = -t5587 / 0.2e1 - t5680 / 0.2e1 - t5695 / 0.2e1 + t5972 / 0.2e1 + t5973 / 0.2e1 + t6001 / 0.2e1;
t6555 = -t5588 / 0.2e1 - t5681 / 0.2e1 - t5696 / 0.2e1 + t5974 / 0.2e1 + t5975 / 0.2e1 + t6002 / 0.2e1;
t6546 = t6415 * t5823;
t6545 = t6415 * t5824;
t6544 = t6415 * t5825;
t6537 = t6415 * t6566;
t6536 = t6415 * t6565;
t6535 = t6415 * t6563;
t6534 = t6415 * t6562;
t6533 = t6415 * t6560;
t6532 = t6415 * t6559;
t5646 = t6416 * t5670;
t5541 = t5646 + t5574;
t5647 = t6416 * t5671;
t5542 = t5647 + t5575;
t5648 = t6416 * t5672;
t5543 = t5648 + t5576;
t5640 = t6416 * t6947 + t7285;
t5641 = t6416 * t6943 + t7284;
t5644 = t6416 * t6939 + t7283;
t6513 = pkin(1) * t6688 - pkin(6) * t7165;
t6512 = pkin(1) * t6687 - pkin(6) * t7164;
t6511 = pkin(1) * t6686 - pkin(6) * t7163;
t6501 = -t5553 * t7160 - t5922 * t6416 + t6688 + 0.2e1 * t6869;
t6500 = -t5554 * t7158 - t5924 * t6416 + t6687 + 0.2e1 * t6865;
t6499 = -t5555 * t7156 - t5926 * t6416 + t6686 + 0.2e1 * t6976;
t6489 = t6441 * t6546 + t6676 * t7421 - t5922 - t6676;
t6488 = t6444 * t6545 + t6675 * t7420 - t5924 - t6675;
t6487 = t6447 * t6544 + t6674 * t7419 - t5926 - t6674;
t6486 = t6946 * t7179 + (t6546 - t6946) * t6432 - t5541;
t6485 = t6942 * t7178 + (t6545 - t6942) * t6435 - t5542;
t6484 = t6938 * t7177 + (t6544 - t6938) * t6438 - t5543;
t5942 = -0.2e1 * t6890;
t5941 = -0.2e1 * t6891;
t5940 = -0.2e1 * t6892;
t5834 = t5942 + t5957;
t5833 = t5941 + t5956;
t5832 = t5940 + t5955;
t5816 = -0.2e1 * t6532;
t5815 = -0.2e1 * t6534;
t5814 = -0.2e1 * t6536;
t5806 = t5945 + 0.2e1 * t5885;
t5804 = t5944 + 0.2e1 * t5883;
t5802 = t5943 + 0.2e1 * t5881;
t5801 = t5945 + t5885 / 0.2e1;
t5800 = t5944 + t5883 / 0.2e1;
t5799 = t5943 + t5881 / 0.2e1;
t5798 = t6438 * t6630;
t5797 = t6435 * t6633;
t5796 = t6432 * t6636;
t5783 = -0.2e1 * t6628;
t5782 = 0.4e1 * t6628;
t5781 = -0.2e1 * t6631;
t5780 = 0.4e1 * t6631;
t5779 = -0.2e1 * t6634;
t5778 = 0.4e1 * t6634;
t5708 = (t5957 * t6798 + t6416 * t6686 + t7093) * t7125 - t7336 * t5807 * t6722;
t5707 = (t5956 * t6799 + t6416 * t6687 + t7094) * t7130 - t7338 * t5805 * t6728;
t5706 = (t5955 * t6800 + t6416 * t6688 + t7095) * t7135 - t7340 * t5803 * t6734;
t5702 = (-0.2e1 * t5884 + t5942 + 0.2e1 * t5957) * t6407 + (0.4e1 * t6874 * t7271 + (-0.4e1 * t6407 + 0.2e1) * t6958) * t7262 + (t7185 * t7336 + t6409) * t5957 - t7093;
t5701 = (-0.2e1 * t5882 + t5941 + 0.2e1 * t5956) * t6403 + (0.4e1 * t6877 * t7272 + (-0.4e1 * t6403 + 0.2e1) * t6871) * t7263 + (t7187 * t7338 + t6405) * t5956 - t7094;
t5700 = (-0.2e1 * t5880 + t5940 + 0.2e1 * t5955) * t6399 + (0.4e1 * t6880 * t7273 + (-0.4e1 * t6399 + 0.2e1) * t6872) * t7264 + (t7189 * t7340 + t6401) * t5955 - t7095;
t5645 = t6416 * t6938 - t5651;
t5643 = t6416 * t6942 - t5650;
t5642 = t6416 * t6946 - t5649;
t5639 = t6837 - t7005;
t5638 = t6838 - t7006;
t5637 = t6839 - t7007;
t5624 = t5672 * t6446 - t6437 * t6617;
t5623 = t5671 * t6443 - t6434 * t6622;
t5622 = t5670 * t6440 - t6431 * t6627;
t5621 = t5672 * t6437 + t6446 * t6617;
t5620 = t5671 * t6434 + t6443 * t6622;
t5619 = t5670 * t6431 + t6440 * t6627;
t5603 = t5649 + 0.2e1 * t6635;
t5602 = t5651 + 0.2e1 * t6629;
t5601 = t5650 + 0.2e1 * t6632;
t5600 = t6976 + (t7419 - 0.1e1) * t6753;
t5599 = t6865 + (t7420 - 0.1e1) * t6756;
t5598 = t6869 + (t7421 - 0.1e1) * t6759;
t5597 = t5639 * t6447 + t7472 * t6438;
t5596 = t6438 * t5639 - t7472 * t6447;
t5595 = t5638 * t6444 + t7474 * t6435;
t5594 = t6435 * t5638 - t7474 * t6444;
t5593 = t5637 * t6441 + t7476 * t6432;
t5592 = t5637 * t6432 - t7476 * t6441;
t5579 = ((pkin(7) * t6447 - t7323) * t6940 + g(3)) * t6416 + ((t5659 + 0.2e1 * t6662) * t6447 + t7108 * t6438 + t7465) * t6415 - t7455 * t5957;
t5578 = ((pkin(7) * t6444 - t7325) * t6944 + g(3)) * t6416 + ((t5666 + 0.2e1 * t6663) * t6444 + t7109 * t6435 + t7466) * t6415 - t7455 * t5956;
t5577 = ((pkin(7) * t6441 - t7327) * t6948 + g(3)) * t6416 + ((t5665 + 0.2e1 * t6664) * t6441 + t7110 * t6432 + t7467) * t6415 - t7455 * t5955;
t5570 = -0.2e1 * t7331;
t5569 = 0.2e1 * t7331;
t5568 = -0.2e1 * t7332;
t5567 = 0.2e1 * t7332;
t5566 = -0.2e1 * t7304;
t5565 = 0.2e1 * t7304;
t5561 = t6630 * t7361 + t5573;
t5560 = t6633 * t7361 + t5572;
t5559 = t6636 * t7361 + t5571;
t5549 = t5798 + t5996 / 0.2e1 + (-t6775 / 0.2e1 - t6769 / 0.2e1 + (-t6767 / 0.2e1 + (-t7256 / 0.2e1 - t7250 / 0.2e1) * t6026) * t6415) * t6472;
t5548 = t5797 + t5995 / 0.2e1 + (-t6776 / 0.2e1 - t6770 / 0.2e1 + (-t6768 / 0.2e1 + (-t7258 / 0.2e1 - t7252 / 0.2e1) * t6025) * t6415) * t6472;
t5547 = t5796 + t5994 / 0.2e1 + (-t6777 / 0.2e1 - t6771 / 0.2e1 + (-t6766 / 0.2e1 + (-t7260 / 0.2e1 - t7254 / 0.2e1) * t6024) * t6415) * t6472;
t5540 = t5648 + t6555;
t5539 = t5647 + t6556;
t5538 = t5646 + t6557;
t5537 = t5801 * t5885 * t6447 + t5540 * t6438;
t5536 = -t5540 * t6447 + t5801 * t6957;
t5535 = t5800 * t5883 * t6444 + t5539 * t6435;
t5534 = -t5539 * t6444 + t5800 * t6961;
t5533 = t5799 * t5881 * t6441 + t5538 * t6432;
t5532 = -t5538 * t6441 + t5799 * t6964;
t5531 = -t5996 + t6502 * t6472 + (t6472 * t7366 + t5644) * t6415;
t5530 = -t5995 + t6503 * t6472 + (t6472 * t7367 + t5641) * t6415;
t5529 = -t5994 + t6504 * t6472 + (t6472 * t7368 + t5640) * t6415;
t5528 = -t5672 * t7150 + t5555 + t5798;
t5527 = -t5671 * t7152 + t5554 + t5797;
t5526 = -t5670 * t7154 + t5553 + t5796;
t5525 = t6415 * t6847 + t5549 * t6447 - t6560 / 0.2e1;
t5524 = t6415 * t6848 + t5548 * t6444 - t6563 / 0.2e1;
t5523 = t6415 * t6849 + t5547 * t6441 - t6566 / 0.2e1;
t5522 = -t6437 * t5531 - t6446 * t6487;
t5521 = -t6446 * t5531 + t6437 * t6487;
t5520 = -t6434 * t5530 - t6443 * t6488;
t5519 = -t6443 * t5530 + t6434 * t6488;
t5518 = -t6431 * t5529 - t6440 * t6489;
t5517 = -t6440 * t5529 + t6431 * t6489;
t5516 = (-t5806 * t7157 + t6446 * t6616) * t6916 + t6446 * t5543 - t6437 * t6875;
t5515 = (t5806 * t7151 + t6437 * t6616) * t6916 + t6437 * t5543 + t5672 * t6874;
t5514 = (-t5804 * t7159 + t6443 * t6621) * t6925 + t6443 * t5542 - t6434 * t6878;
t5513 = (t5804 * t7153 + t6434 * t6621) * t6925 + t6434 * t5542 + t5671 * t6877;
t5512 = (-t5802 * t7161 + t6440 * t6626) * t6932 + t6440 * t5541 - t6431 * t6881;
t5511 = (t5802 * t7155 + t6431 * t6626) * t6932 + t6431 * t5541 + t5670 * t6880;
t5510 = (t5957 * t7329 + t5662) * t7150 + (pkin(7) * t6722 - 0.2e1 * t6785) * t5945 - pkin(2) * t6875 - 0.2e1 * t6581 - t7305;
t5509 = (t5956 * t7329 + t5661) * t7152 + (pkin(7) * t6728 - 0.2e1 * t6789) * t5944 - pkin(2) * t6878 - 0.2e1 * t6582 - t7306;
t5508 = (t5955 * t7329 + t5660) * t7154 + (pkin(7) * t6734 - 0.2e1 * t6790) * t5943 - pkin(2) * t6881 - 0.2e1 * t6583 - t7307;
t5507 = t7384 * t6941 + (t6438 * t6523 - t7108) * t6416 + (-pkin(6) * t7283 + g(3) * t6438) * t6415 + (pkin(7) * t6939 + t6837) * t6447 - t7311 + (t6941 + t6890 + t5884) * pkin(2);
t5506 = t7383 * t6945 + (t6435 * t6524 - t7109) * t6416 + (-pkin(6) * t7284 + g(3) * t6435) * t6415 + (pkin(7) * t6943 + t6838) * t6444 - t7312 + (t6945 + t6891 + t5882) * pkin(2);
t5505 = t7382 * t6949 + (t6432 * t6525 - t7110) * t6416 + (-pkin(6) * t7285 + g(3) * t6432) * t6415 + (pkin(7) * t6947 + t6839) * t6441 - t7313 + (t6949 + t6892 + t5880) * pkin(2);
t5504 = ((0.4e1 * t6617 - 0.2e1 * t6739) * t6416 + 0.2e1 * t6875 + t5782) * t6407 - 0.2e1 * t6484 * t7125 + (-0.2e1 * t5927 + t6721) * t5945 - t6875 + t5783;
t5503 = ((0.4e1 * t6622 - 0.2e1 * t6741) * t6416 + 0.2e1 * t6878 + t5780) * t6403 - 0.2e1 * t6485 * t7130 + (-0.2e1 * t5925 + t6714) * t5944 - t6878 + t5781;
t5502 = ((0.4e1 * t6627 - 0.2e1 * t6743) * t6416 + 0.2e1 * t6881 + t5778) * t6399 - 0.2e1 * t6486 * t7135 + (-0.2e1 * t5923 + t6733) * t5943 - t6881 + t5779;
t5498 = (t5561 * t6416 - t6782 + t6843) * t6447 + (t6416 * t7448 + t6511) * t6438;
t5497 = (t5560 * t6416 - t6783 + t6844) * t6444 + (t6416 * t7447 + t6512) * t6435;
t5496 = (t5559 * t6416 - t6784 + t6845) * t6441 + (t6416 * t7446 + t6513) * t6432;
t5495 = (-t6438 * t5561 + t6447 * t7448) * t6416 + t6511 * t6447 - 0.2e1 * t6438 * (-t6236 * t6350 + t6237 * t6347 - t6782 / 0.2e1 + t5669);
t5494 = (-t6435 * t5560 + t6444 * t7447) * t6416 + t6512 * t6444 - 0.2e1 * t6435 * (-t6234 * t6349 + t6235 * t6346 - t6783 / 0.2e1 + t5668);
t5493 = (-t6432 * t5559 + t6441 * t7446) * t6416 + t6513 * t6441 - 0.2e1 * t6432 * (-t6232 * t6348 + t6233 * t6345 - t6784 / 0.2e1 + t5667);
t5492 = t5507 * t6446 + t5579 * t6437;
t5491 = t5507 * t6437 - t5579 * t6446;
t5490 = t5506 * t6443 + t5578 * t6434;
t5489 = t5506 * t6434 - t5578 * t6443;
t5488 = t5505 * t6440 + t5577 * t6431;
t5487 = t5505 * t6431 - t5577 * t6440;
t5486 = t6484 * t6407 + (t6875 + (t5825 - t6739) * t6416 + 0.2e1 * t6628) * t7125 - t6532 + t5543;
t5485 = t6485 * t6403 + (t6878 + (t5824 - t6741) * t6416 + 0.2e1 * t6631) * t7130 - t6534 + t5542;
t5484 = t6486 * t6399 + (t6881 + (t5823 - t6743) * t6416 + 0.2e1 * t6634) * t7135 - t6536 + t5541;
t5483 = t6446 * t5510 + (t5566 - t7477) * t6437;
t5482 = t5510 * t6437 + (t5565 + t7477) * t6446;
t5481 = t6443 * t5509 + (t5570 - t7478) * t6434;
t5480 = t6434 * t5509 + (t5569 + t7478) * t6443;
t5479 = t6440 * t5508 + (t5568 - t7479) * t6431;
t5478 = t5508 * t6431 + (t5567 + t7479) * t6440;
t5477 = (t5549 * t6446 - t5624 * t7150) * t7418 + t6446 * t7052 + (t5621 * t6447 * t7353 + t6446 * t6970) * t6438 + ((t7349 - t7406) * t6753 + t6499) * t6437;
t5476 = (-t5621 * t7162 + t5624 * t7177) * t7415 + (t5549 * t7418 + t6438 * t6970 + t7052) * t6437 + ((-0.4e1 * t6409 + t7406) * t6753 - t6499) * t6446;
t5475 = (t5548 * t6443 - t5623 * t7152) * t7418 + t6443 * t7053 + (t5620 * t6444 * t7353 + t6443 * t6971) * t6435 + ((t7350 - t7405) * t6756 + t6500) * t6434;
t5474 = (-t5620 * t7162 + t5623 * t7178) * t7416 + (t5548 * t7418 + t6435 * t6971 + t7053) * t6434 + ((-0.4e1 * t6405 + t7405) * t6756 - t6500) * t6443;
t5473 = (t5547 * t6440 - t5622 * t7154) * t7418 + t6440 * t7054 + (t5619 * t6441 * t7353 + t6440 * t6972) * t6432 + ((t7351 - t7404) * t6759 + t6501) * t6431;
t5472 = (-t5619 * t7162 + t5622 * t7179) * t7417 + (t5547 * t7418 + t6432 * t6972 + t7054) * t6431 + ((-0.4e1 * t6401 + t7404) * t6759 - t6501) * t6440;
t5471 = ((-0.2e1 * t5717 - 0.2e1 * t5986 - 0.2e1 * t5987 - 0.2e1 * t6014 + 0.2e1 * t6772 + t7167) * t6395 + (0.4e1 * t6532 - t5576) * t6416 - t7167 + (t7341 * t7280 + (-t6916 * t7342 + 0.2e1 * t6716) * t6438) * t5885 + t6505) * t6407 + 0.2e1 * ((t6517 * t6416 + t6447 * t6855 + t7124 / 0.2e1) * t6415 + (t6958 + (t7180 - t7185) * t7262) * t5927) * t7125 + t6395 * t5672 + (t5816 + t5576) * t6416 - t6533;
t5470 = ((-0.2e1 * t5715 - 0.2e1 * t5982 - 0.2e1 * t5983 - 0.2e1 * t6012 + 0.2e1 * t6774 + t7173) * t6395 + (0.4e1 * t6536 - t5574) * t6416 - t7173 + (t7341 * t7282 + (-t6932 * t7342 + 0.2e1 * t6718) * t6432) * t5881 + t6507) * t6399 + 0.2e1 * ((t6519 * t6416 + t6441 * t6857 + t7134 / 0.2e1) * t6415 + (t6872 + (t7182 - t7189) * t7264) * t5923) * t7135 + t6395 * t5670 + (t5814 + t5574) * t6416 - t6537;
t5469 = ((-0.2e1 * t5716 - 0.2e1 * t5984 - 0.2e1 * t5985 - 0.2e1 * t6013 + 0.2e1 * t6773 + t7170) * t6395 + (0.4e1 * t6534 - t5575) * t6416 - t7170 + (t7341 * t7281 + (-t6925 * t7342 + 0.2e1 * t6717) * t6435) * t5883 + t6506) * t6403 + 0.2e1 * ((t6518 * t6416 + t6444 * t6856 + t7129 / 0.2e1) * t6415 + (t6871 + (t7181 - t7187) * t7263) * t5925) * t7130 + t6395 * t5671 + (t5815 + t5575) * t6416 - t6535;
t5468 = (t5782 * t6416 - 0.4e1 * t6617 * t6695) * t6407 + 0.4e1 * ((t6847 + (t6438 * t6916 - t7280) * t5885 + t6505) * t6395 + (t5816 + t6555) * t6416 - t6438 * t6629 - t6533 + t7167 / 0.2e1 - t5987 / 0.2e1 - t5986 / 0.2e1 - t6014 / 0.2e1 + t6772 / 0.2e1 + t6763 / 0.2e1 - t5717 / 0.2e1) * t7125 + t5825 * t7185 + (-t6517 * t7057 + t5783) * t6416 - 0.2e1 * t6567 + t5825 + ((t6517 * t7055 + 0.2e1 * t6858 + 0.2e1 * t7124) * t6407 - t6858 - t7124) * t6415;
t5467 = (t5780 * t6416 - 0.4e1 * t6622 * t6696) * t6403 + 0.4e1 * ((t6848 + (t6435 * t6925 - t7281) * t5883 + t6506) * t6395 + (t5815 + t6556) * t6416 - t6435 * t6632 - t6535 + t7170 / 0.2e1 - t5985 / 0.2e1 - t5984 / 0.2e1 - t6013 / 0.2e1 + t6773 / 0.2e1 + t6764 / 0.2e1 - t5716 / 0.2e1) * t7130 + t5824 * t7187 + (-t6518 * t7057 + t5781) * t6416 - 0.2e1 * t6568 + t5824 + ((t6518 * t7055 + 0.2e1 * t6966 + 0.2e1 * t7129) * t6403 - t6966 - t7129) * t6415;
t5466 = (t5778 * t6416 - 0.4e1 * t6627 * t6697) * t6399 + 0.4e1 * ((t6849 + (t6432 * t6932 - t7282) * t5881 + t6507) * t6395 + (t5814 + t6557) * t6416 - t6432 * t6635 - t6537 + t7173 / 0.2e1 - t5983 / 0.2e1 - t5982 / 0.2e1 - t6012 / 0.2e1 + t6774 / 0.2e1 + t6765 / 0.2e1 - t5715 / 0.2e1) * t7135 + t5823 * t7189 + (-t6519 * t7057 + t5779) * t6416 - 0.2e1 * t6569 + t5823 + ((t6519 * t7055 + 0.2e1 * t6859 + 0.2e1 * t7134) * t6399 - t6859 - t7134) * t6415;
t5462 = ((t5565 + t7457) * t6416 + t7468) * t6446 + t6437 * t7357;
t5461 = ((t5566 - t7457) * t6416 - t7468) * t6437 + t6446 * t7357;
t5460 = ((t5569 + t7459) * t6416 + t7469) * t6443 + t6434 * t7358;
t5459 = ((t5570 - t7459) * t6416 - t7469) * t6434 + t6443 * t7358;
t5458 = ((t5567 + t7461) * t6416 + t7470) * t6440 + t6431 * t7359;
t5457 = ((t5568 - t7461) * t6416 - t7470) * t6431 + t6440 * t7359;
t1 = [(t5670 * t7242 + t5671 * t7240 + t5672 * t7238) * MDP(1) + (t6004 * t7227 + t6006 * t7224 + t6008 * t7230) * MDP(2) + (t6004 * t7226 + t6006 * t7223 + t6008 * t7229) * MDP(3) + ((t5602 * t7238 - t5992 * t6740) * t6438 + (t5601 * t7240 - t5990 * t6742) * t6435 + (t5603 * t7242 - t5988 * t6744) * t6432) * t7293 + (t5598 * t7048 + t5599 * t7044 + t5600 * t7040 + t5832 * t7249 + t5833 * t7247 + t5834 * t7245) * t7292 + (t5533 * t7048 + t5535 * t7044 + t5537 * t7040 - t5642 * t7249 - t5643 * t7247 - t5645 * t7245) * t7291 + (t5532 * t7049 + t5534 * t7045 + t5536 * t7041 + t5640 * t7249 + t5641 * t7247 + t5644 * t7245) * t7290 + (t5541 * t7249 + t5542 * t7247 + t5543 * t7245 + (t5541 * t7242 + t5542 * t7240 + t5543 * t7238) * t6416) * MDP(8) + (t5496 * t7242 + t5497 * t7240 + t5498 * t7238 + t5592 * t7249 + t5594 * t7247 + t5596 * t7245) * MDP(9) + (t5493 * t7242 + t5494 * t7240 + t5495 * t7238 + t5593 * t7249 + t5595 * t7247 + t5597 * t7245) * MDP(10) + (t5469 * t7240 + t5470 * t7242 + t5471 * t7238 + t5484 * t7249 + t5485 * t7247 + t5486 * t7245 + (-t5706 * t7261 - t5707 * t7259 - t5708 * t7257) * t7147) * MDP(11) + (t5466 * t7242 + t5467 * t7240 + t5468 * t7238 + t5502 * t7249 + t5503 * t7247 + t5504 * t7245 + (-t5700 * t7261 - t5701 * t7259 - t5702 * t7257) * t7147) * MDP(12) + (t5472 * t7242 + t5474 * t7240 + t5476 * t7238 + t5518 * t7249 + t5520 * t7247 + t5522 * t7245 + (-t5511 * t7261 - t5513 * t7259 - t5515 * t7257) * t7147) * MDP(13) + (t5473 * t7242 + t5475 * t7240 + t5477 * t7238 + t5517 * t7249 + t5519 * t7247 + t5521 * t7245 + (-t5512 * t7261 - t5514 * t7259 - t5516 * t7257) * t7147) * MDP(14) + (t5988 * t6639 + t5990 * t6638 + t5992 * t6637 + t5523 * t7049 + t5524 * t7045 + t5525 * t7041 + (-t5526 * t7261 - t5527 * t7259 - t5528 * t7257) * t6472) * t7289 + (t5458 * t7242 + t5460 * t7240 + t5462 * t7238 + t5478 * t7249 + t5480 * t7247 + t5482 * t7245 + (-t5487 * t7261 - t5489 * t7259 - t5491 * t7257) * t7147) * MDP(16) + (t5457 * t7242 + t5459 * t7240 + t5461 * t7238 + t5479 * t7249 + t5481 * t7247 + t5483 * t7245 + (-t5488 * t7261 - t5490 * t7259 - t5492 * t7257) * t7147) * MDP(17) + (t6430 - g(1)) * MDP(18); (t5670 * t7243 + t5671 * t7241 + t5672 * t7239) * MDP(1) + (t6003 * t7227 + t6005 * t7224 + t6007 * t7230) * MDP(2) + (t6003 * t7226 + t6005 * t7223 + t6007 * t7229) * MDP(3) + ((t5602 * t7239 - t5993 * t6740) * t6438 + (t5601 * t7241 - t5991 * t6742) * t6435 + (t5603 * t7243 - t5989 * t6744) * t6432) * t7293 + (t5598 * t7050 + t5599 * t7046 + t5600 * t7042 + t5832 * t7248 + t5833 * t7246 + t5834 * t7244) * t7292 + (t5533 * t7050 + t5535 * t7046 + t5537 * t7042 - t5642 * t7248 - t5643 * t7246 - t5645 * t7244) * t7291 + (t5532 * t7051 + t5534 * t7047 + t5536 * t7043 + t5640 * t7248 + t5641 * t7246 + t5644 * t7244) * t7290 + (t5541 * t7248 + t5542 * t7246 + t5543 * t7244 + (t5541 * t7243 + t5542 * t7241 + t5543 * t7239) * t6416) * MDP(8) + (t5496 * t7243 + t5497 * t7241 + t5498 * t7239 + t5592 * t7248 + t5594 * t7246 + t5596 * t7244) * MDP(9) + (t5493 * t7243 + t5494 * t7241 + t5495 * t7239 + t5593 * t7248 + t5595 * t7246 + t5597 * t7244) * MDP(10) + (t5469 * t7241 + t5470 * t7243 + t5471 * t7239 + t5484 * t7248 + t5485 * t7246 + t5486 * t7244 + (-t5706 * t7255 - t5707 * t7253 - t5708 * t7251) * t7147) * MDP(11) + (t5466 * t7243 + t5467 * t7241 + t5468 * t7239 + t5502 * t7248 + t5503 * t7246 + t5504 * t7244 + (-t5700 * t7255 - t5701 * t7253 - t5702 * t7251) * t7147) * MDP(12) + (t5472 * t7243 + t5474 * t7241 + t5476 * t7239 + t5518 * t7248 + t5520 * t7246 + t5522 * t7244 + (-t5511 * t7255 - t5513 * t7253 - t5515 * t7251) * t7147) * MDP(13) + (t5473 * t7243 + t5475 * t7241 + t5477 * t7239 + t5517 * t7248 + t5519 * t7246 + t5521 * t7244 + (-t5512 * t7255 - t5514 * t7253 - t5516 * t7251) * t7147) * MDP(14) + (t5989 * t6639 + t5991 * t6638 + t5993 * t6637 + t5523 * t7051 + t5524 * t7047 + t5525 * t7043 + (-t5526 * t7255 - t5527 * t7253 - t5528 * t7251) * t6472) * t7289 + (t5458 * t7243 + t5460 * t7241 + t5462 * t7239 + t5478 * t7248 + t5480 * t7246 + t5482 * t7244 + (-t5487 * t7255 - t5489 * t7253 - t5491 * t7251) * t7147) * MDP(16) + (t5457 * t7243 + t5459 * t7241 + t5461 * t7239 + t5479 * t7248 + t5481 * t7246 + t5483 * t7244 + (-t5488 * t7255 - t5490 * t7253 - t5492 * t7251) * t7147) * MDP(17) + (t6429 - g(2)) * MDP(18); (t5670 * t7228 + t5671 * t7225 + t5672 * t7231) * MDP(1) + (t6084 * t7227 + t6085 * t7224 + t6086 * t7230) * MDP(2) + (t6084 * t7226 + t6085 * t7223 + t6086 * t7229) * MDP(3) + ((t5602 * t7231 - t6938 * t7232) * t6438 + (t5601 * t7225 - t6942 * t7233) * t6435 + (t5603 * t7228 - t6946 * t7234) * t6432) * t7293 + (t5598 * t7036 + t5599 * t7034 + t5600 * t7038 + t5832 * t7234 + t5833 * t7233 + t5834 * t7232) * t7292 + (t5533 * t7036 + t5535 * t7034 + t5537 * t7038 - t5642 * t7234 - t5643 * t7233 - t5645 * t7232) * t7291 + (t5532 * t7037 + t5534 * t7035 + t5536 * t7039 + t5640 * t7234 + t5641 * t7233 + t5644 * t7232) * t7290 + (t5541 * t7234 + t5542 * t7233 + t5543 * t7232 + (t5541 * t7228 + t5542 * t7225 + t5543 * t7231) * t6416) * MDP(8) + (t5496 * t7228 + t5497 * t7225 + t5498 * t7231 + t5592 * t7234 + t5594 * t7233 + t5596 * t7232) * MDP(9) + (t5493 * t7228 + t5494 * t7225 + t5495 * t7231 + t5593 * t7234 + t5595 * t7233 + t5597 * t7232) * MDP(10) + (t5469 * t7225 + t5470 * t7228 + t5471 * t7231 + t5484 * t7234 + t5485 * t7233 + t5486 * t7232 + (t5706 * t7237 + t5707 * t7236 + t5708 * t7235) * t6472) * MDP(11) + (t5466 * t7228 + t5467 * t7225 + t5468 * t7231 + t5502 * t7234 + t5503 * t7233 + t5504 * t7232 + (t5700 * t7237 + t5701 * t7236 + t5702 * t7235) * t6472) * MDP(12) + (t5472 * t7228 + t5474 * t7225 + t5476 * t7231 + t5518 * t7234 + t5520 * t7233 + t5522 * t7232 + (t5511 * t7237 + t5513 * t7236 + t5515 * t7235) * t6472) * MDP(13) + (t5473 * t7228 + t5475 * t7225 + t5477 * t7231 + t5517 * t7234 + t5519 * t7233 + t5521 * t7232 + (t5512 * t7237 + t5514 * t7236 + t5516 * t7235) * t6472) * MDP(14) + ((t5526 * t7237 + t5527 * t7236 + t5528 * t7235) * t6472 + (t5523 * t7037 + t5524 * t7035 + t5525 * t7039 + t6760 * t7232 + t6761 * t7233 + t6762 * t7234) * t6415) * MDP(15) + (t5458 * t7228 + t5460 * t7225 + t5462 * t7231 + t5478 * t7234 + t5480 * t7233 + t5482 * t7232 + (t5487 * t7237 + t5489 * t7236 + t5491 * t7235) * t6472) * MDP(16) + (t5457 * t7228 + t5459 * t7225 + t5461 * t7231 + t5479 * t7234 + t5481 * t7233 + t5483 * t7232 + (t5488 * t7237 + t5490 * t7236 + t5492 * t7235) * t6472) * MDP(17) + (t6428 - g(3)) * MDP(18);];
tauX  = t1;
