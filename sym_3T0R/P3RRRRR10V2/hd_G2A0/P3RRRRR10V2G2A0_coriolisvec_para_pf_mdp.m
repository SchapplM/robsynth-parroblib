% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:54:51
% EndTime: 2020-08-07 02:06:41
% DurationCPUTime: 757.45s
% Computational Cost: add. (9487887->2670), mult. (18655731->4307), div. (125172->38), fcn. (14243331->26), ass. (0->1580)
t9721 = sin(qJ(2,3));
t9730 = cos(qJ(2,3));
t10579 = t9721 * t9730;
t9705 = sin(pkin(4));
t10258 = t9705 * t10579;
t10622 = t9705 * t9721;
t9717 = legFrame(3,2);
t9636 = sin(t9717);
t9740 = xDP(1);
t10648 = t9636 * t9740;
t9639 = cos(t9717);
t9739 = xDP(2);
t9472 = t9639 * t9739 + t10648;
t10310 = t9472 * t10622;
t9722 = sin(qJ(1,3));
t9738 = xDP(3);
t10574 = t9722 * t9738;
t9731 = cos(qJ(1,3));
t10639 = t9639 * t9740;
t9903 = -t9636 * t9739 + t10639;
t9451 = t9731 * t9903 - t10574;
t10701 = t9451 * t9721;
t10424 = pkin(3) * t10701;
t9720 = sin(qJ(3,3));
t10623 = t9705 * t9720;
t10632 = (t9730 + 0.1e1) * (t9730 - 0.1e1);
t9729 = cos(qJ(3,3));
t10788 = pkin(6) * t9729;
t9689 = t9729 ^ 2;
t10792 = pkin(3) * t9689;
t9448 = t9722 * t9903 + t9731 * t9738;
t9445 = t9730 * t9448;
t9660 = pkin(1) * t9721;
t9595 = t9660 + pkin(7);
t9563 = pkin(8) + t9595;
t10451 = pkin(2) * t10579;
t9691 = t9730 ^ 2;
t9741 = pkin(8) + pkin(7);
t9873 = t9691 * t9741 - t10451;
t9466 = -t9873 + t9563;
t10536 = t9741 * t9721;
t9657 = pkin(2) * t9730;
t10499 = t10536 + t9657;
t9521 = pkin(1) + t10499;
t10803 = pkin(2) * t9721;
t9610 = t9741 * t9730;
t9526 = t9610 - t10803;
t9646 = t9729 * pkin(3);
t9706 = cos(pkin(4));
t9682 = t9706 ^ 2;
t10488 = 0.2e1 * t10792;
t10798 = pkin(2) * t9729;
t9577 = pkin(6) * t9720 + pkin(3);
t9777 = t9721 * (t10488 - t9577 + t10798) - t9729 * t9610;
t9544 = t9721 * t9610;
t9647 = t9691 * pkin(2);
t10502 = t9544 + t9647;
t10889 = -pkin(2) + t10502;
t9630 = t9691 - 0.2e1;
t9801 = t9630 * t9646 + t10889;
t9555 = t10536 + pkin(1);
t9977 = t9555 * t9730 + t9647;
t9295 = ((-t9720 * t9801 + t10788) * t9472 + t9777 * t9451) * t9682 + ((-pkin(6) * t9472 * t9721 + t9451 * t9801) * t10623 + (t9445 + 0.2e1 * t10310) * t10792 + ((-pkin(6) * t9451 - t9472 * t9526) * t9705 + t9448 * t9521) * t9729 - pkin(3) * t10310) * t9706 + (pkin(6) * t10701 + (-t10258 * t9646 - t9466 * t9705) * t9448 + (t10632 * t9646 + t9977) * t9472) * t9720 - t9689 * t10424 - t9472 * t10788 + t10424;
t10548 = t9729 * t9730;
t10894 = t9657 + pkin(1);
t10591 = t9706 * t9729;
t10897 = t9646 + pkin(2);
t9454 = (-t10897 * t9721 + t9610) * pkin(1) * t10591;
t9421 = t9454 + t9705 * ((pkin(2) * t9521 + t10894 * t9646) * t9720 - (pkin(3) * t10548 + t10499) * t10788);
t9284 = t9295 / t9421;
t10381 = t9741 * t9284;
t10810 = pkin(1) * t10897;
t10804 = pkin(2) * t9720;
t9533 = t10788 - t10804;
t10580 = t9721 * t9729;
t10247 = t9706 * t10580;
t10664 = t10897 * t9705;
t10585 = t9706 * t9741;
t9562 = pkin(1) * t10585;
t10678 = t9562 * t9729;
t9849 = -t10247 * t10810 + (-t10664 * t9533 + t10678) * t9730;
t9433 = (-t10536 * t9533 + t10810 * t9720) * t9705 + t9849;
t9424 = 0.1e1 / t9433;
t9761 = 0.1e1 / pkin(3);
t10705 = t9424 * t9761;
t10004 = t9739 * t10897;
t10651 = (t9706 + 0.1e1) * (t9706 - 0.1e1);
t10289 = t9741 * t10651;
t10042 = t10897 * t10289;
t9683 = pkin(2) + t9741;
t9684 = pkin(2) - t9741;
t10690 = (t9646 + t9683) * (t9646 + t9684);
t10304 = t9721 * t10690;
t10313 = t9451 * t10585;
t10605 = t9705 * t9741;
t10624 = t9705 * t9706;
t10629 = t9682 * t9741;
t9642 = t9720 * pkin(3);
t9578 = t9642 + pkin(6);
t10671 = t9578 * t9721;
t9742 = 0.2e1 * t9741;
t10577 = t9721 * t9742;
t9558 = pkin(1) + t10577;
t10684 = t9558 * t10897;
t10696 = t9472 * t10897;
t10702 = t9451 * t9706;
t10821 = t9682 - 0.1e1;
t9675 = pkin(1) * t9741;
t9569 = t9739 * t9675;
t9570 = t9740 * t9675;
t9337 = ((0.2e1 * t10313 * t10897 - t10690 * t9448) * t9705 - 0.2e1 * t9472 * t10042) * t9691 + ((-t10304 * t10702 - t10684 * t9448) * t9705 + t9569 * t9639 + t9570 * t9636 + t10821 * t9472 * t10304 + ((-t10624 * t9472 - t9451 * t9682 - t10574) * t10897 + (-t10004 * t9636 + t10639 * t10897) * t9731) * t9578) * t9730 - ((t10671 * t9472 + t10897 * t9451) * t9706 + t9448 * t9563) * t10605 - (t10671 * t9451 - t10696) * t10629 + (t9451 * t9741 * t9578 + (-t10004 * t9639 - t10648 * t10897) * pkin(1)) * t9721 - t9741 * t10696;
t9329 = t9337 * t10705;
t9322 = pkin(6) * t9329;
t9157 = -t9322 + t10381;
t10923 = t9157 * t9721;
t9724 = sin(qJ(2,2));
t9733 = cos(qJ(2,2));
t10567 = t9724 * t9733;
t10254 = t9705 * t10567;
t10619 = t9705 * t9724;
t9718 = legFrame(2,2);
t9637 = sin(t9718);
t10645 = t9637 * t9740;
t9640 = cos(t9718);
t9473 = t9640 * t9739 + t10645;
t10309 = t9473 * t10619;
t9725 = sin(qJ(1,2));
t10562 = t9725 * t9738;
t9734 = cos(qJ(1,2));
t10636 = t9640 * t9740;
t9902 = -t9637 * t9739 + t10636;
t9452 = t9734 * t9902 - t10562;
t10699 = t9452 * t9724;
t10423 = pkin(3) * t10699;
t9723 = sin(qJ(3,2));
t10620 = t9705 * t9723;
t10631 = (t9733 + 0.1e1) * (t9733 - 0.1e1);
t9732 = cos(qJ(3,2));
t10786 = pkin(6) * t9732;
t9693 = t9732 ^ 2;
t10791 = pkin(3) * t9693;
t9449 = t9725 * t9902 + t9734 * t9738;
t9446 = t9733 * t9449;
t9661 = pkin(1) * t9724;
t9596 = t9661 + pkin(7);
t9564 = pkin(8) + t9596;
t10450 = pkin(2) * t10567;
t9695 = t9733 ^ 2;
t9872 = t9695 * t9741 - t10450;
t9467 = -t9872 + t9564;
t10535 = t9741 * t9724;
t9658 = pkin(2) * t9733;
t10498 = t10535 + t9658;
t9522 = pkin(1) + t10498;
t10801 = pkin(2) * t9724;
t9611 = t9741 * t9733;
t9527 = t9611 - t10801;
t9649 = t9732 * pkin(3);
t10487 = 0.2e1 * t10791;
t10796 = pkin(2) * t9732;
t9580 = pkin(6) * t9723 + pkin(3);
t9776 = t9724 * (t10487 - t9580 + t10796) - t9732 * t9611;
t9545 = t9724 * t9611;
t9650 = t9695 * pkin(2);
t10501 = t9545 + t9650;
t10890 = -pkin(2) + t10501;
t9631 = t9695 - 0.2e1;
t9800 = t9631 * t9649 + t10890;
t9556 = t10535 + pkin(1);
t9976 = t9556 * t9733 + t9650;
t9296 = ((-t9723 * t9800 + t10786) * t9473 + t9776 * t9452) * t9682 + ((-pkin(6) * t9473 * t9724 + t9452 * t9800) * t10620 + (t9446 + 0.2e1 * t10309) * t10791 + ((-pkin(6) * t9452 - t9473 * t9527) * t9705 + t9449 * t9522) * t9732 - pkin(3) * t10309) * t9706 + (pkin(6) * t10699 + (-t10254 * t9649 - t9467 * t9705) * t9449 + (t10631 * t9649 + t9976) * t9473) * t9723 - t9693 * t10423 - t9473 * t10786 + t10423;
t10544 = t9732 * t9733;
t10893 = t9658 + pkin(1);
t10589 = t9706 * t9732;
t10896 = t9649 + pkin(2);
t9455 = (-t10896 * t9724 + t9611) * pkin(1) * t10589;
t9422 = t9455 + ((pkin(2) * t9522 + t10893 * t9649) * t9723 - (pkin(3) * t10544 + t10498) * t10786) * t9705;
t9286 = t9296 / t9422;
t10374 = t9741 * t9286;
t10809 = pkin(1) * t10896;
t10802 = pkin(2) * t9723;
t9535 = t10786 - t10802;
t10568 = t9724 * t9732;
t10245 = t9706 * t10568;
t10661 = t10896 * t9705;
t10677 = t9562 * t9732;
t9848 = -t10245 * t10809 + (-t10661 * t9535 + t10677) * t9733;
t9434 = (-t10535 * t9535 + t10809 * t9723) * t9705 + t9848;
t9426 = 0.1e1 / t9434;
t10704 = t9426 * t9761;
t10003 = t9739 * t10896;
t10041 = t10896 * t10289;
t10689 = (t9649 + t9683) * (t9649 + t9684);
t10303 = t9724 * t10689;
t10312 = t9452 * t10585;
t9643 = t9723 * pkin(3);
t9581 = t9643 + pkin(6);
t10669 = t9581 * t9724;
t10565 = t9724 * t9742;
t9559 = pkin(1) + t10565;
t10682 = t9559 * t10896;
t10695 = t9473 * t10896;
t10700 = t9452 * t9706;
t9338 = ((0.2e1 * t10312 * t10896 - t10689 * t9449) * t9705 - 0.2e1 * t9473 * t10041) * t9695 + ((-t10303 * t10700 - t10682 * t9449) * t9705 + t9569 * t9640 + t9570 * t9637 + t10821 * t9473 * t10303 + ((-t10624 * t9473 - t9452 * t9682 - t10562) * t10896 + (-t10003 * t9637 + t10636 * t10896) * t9734) * t9581) * t9733 - ((t10669 * t9473 + t10896 * t9452) * t9706 + t9449 * t9564) * t10605 - (t10669 * t9452 - t10695) * t10629 + (t9452 * t9741 * t9581 + (-t10003 * t9640 - t10645 * t10896) * pkin(1)) * t9724 - t9741 * t10695;
t9331 = t9338 * t10704;
t9323 = pkin(6) * t9331;
t9158 = -t9323 + t10374;
t10922 = t9158 * t9724;
t9727 = sin(qJ(2,1));
t9736 = cos(qJ(2,1));
t10555 = t9727 * t9736;
t10250 = t9705 * t10555;
t10616 = t9705 * t9727;
t9719 = legFrame(1,2);
t9638 = sin(t9719);
t10642 = t9638 * t9740;
t9641 = cos(t9719);
t9474 = t9641 * t9739 + t10642;
t10308 = t9474 * t10616;
t9728 = sin(qJ(1,1));
t10550 = t9728 * t9738;
t9737 = cos(qJ(1,1));
t10633 = t9641 * t9740;
t9901 = -t9638 * t9739 + t10633;
t9453 = t9737 * t9901 - t10550;
t10697 = t9453 * t9727;
t10422 = pkin(3) * t10697;
t9726 = sin(qJ(3,1));
t10617 = t9705 * t9726;
t10630 = (t9736 + 0.1e1) * (t9736 - 0.1e1);
t9735 = cos(qJ(3,1));
t10784 = pkin(6) * t9735;
t9697 = t9735 ^ 2;
t10790 = pkin(3) * t9697;
t9450 = t9728 * t9901 + t9737 * t9738;
t9447 = t9736 * t9450;
t9662 = pkin(1) * t9727;
t9597 = t9662 + pkin(7);
t9565 = pkin(8) + t9597;
t10449 = pkin(2) * t10555;
t9699 = t9736 ^ 2;
t9871 = t9699 * t9741 - t10449;
t9468 = -t9871 + t9565;
t10534 = t9741 * t9727;
t9659 = pkin(2) * t9736;
t10497 = t10534 + t9659;
t9523 = pkin(1) + t10497;
t10799 = pkin(2) * t9727;
t9612 = t9741 * t9736;
t9528 = t9612 - t10799;
t9652 = t9735 * pkin(3);
t10486 = 0.2e1 * t10790;
t10794 = pkin(2) * t9735;
t9583 = pkin(6) * t9726 + pkin(3);
t9775 = t9727 * (t10486 - t9583 + t10794) - t9735 * t9612;
t9546 = t9727 * t9612;
t9653 = t9699 * pkin(2);
t10500 = t9546 + t9653;
t10891 = -pkin(2) + t10500;
t9632 = t9699 - 0.2e1;
t9799 = t9632 * t9652 + t10891;
t9557 = t10534 + pkin(1);
t9975 = t9557 * t9736 + t9653;
t9297 = ((-t9726 * t9799 + t10784) * t9474 + t9775 * t9453) * t9682 + ((-pkin(6) * t9474 * t9727 + t9453 * t9799) * t10617 + (t9447 + 0.2e1 * t10308) * t10790 + ((-pkin(6) * t9453 - t9474 * t9528) * t9705 + t9523 * t9450) * t9735 - pkin(3) * t10308) * t9706 + (pkin(6) * t10697 + (-t10250 * t9652 - t9468 * t9705) * t9450 + (t10630 * t9652 + t9975) * t9474) * t9726 - t9697 * t10422 - t9474 * t10784 + t10422;
t10540 = t9735 * t9736;
t10892 = t9659 + pkin(1);
t10587 = t9706 * t9735;
t10895 = t9652 + pkin(2);
t9456 = (-t10895 * t9727 + t9612) * pkin(1) * t10587;
t9423 = t9456 + ((pkin(2) * t9523 + t10892 * t9652) * t9726 - (pkin(3) * t10540 + t10497) * t10784) * t9705;
t9288 = t9297 / t9423;
t10366 = t9741 * t9288;
t10808 = pkin(1) * t10895;
t10800 = pkin(2) * t9726;
t9537 = t10784 - t10800;
t10556 = t9727 * t9735;
t10243 = t9706 * t10556;
t10658 = t10895 * t9705;
t10676 = t9562 * t9735;
t9847 = -t10243 * t10808 + (-t10658 * t9537 + t10676) * t9736;
t9435 = (-t10534 * t9537 + t10808 * t9726) * t9705 + t9847;
t9428 = 0.1e1 / t9435;
t10703 = t9428 * t9761;
t10002 = t10895 * t9739;
t10040 = t10895 * t10289;
t10688 = (t9652 + t9683) * (t9652 + t9684);
t10302 = t9727 * t10688;
t10311 = t9453 * t10585;
t9644 = t9726 * pkin(3);
t9584 = t9644 + pkin(6);
t10667 = t9584 * t9727;
t10553 = t9727 * t9742;
t9560 = pkin(1) + t10553;
t10680 = t9560 * t10895;
t10694 = t9474 * t10895;
t10698 = t9453 * t9706;
t9339 = ((0.2e1 * t10311 * t10895 - t10688 * t9450) * t9705 - 0.2e1 * t9474 * t10040) * t9699 + ((-t10302 * t10698 - t10680 * t9450) * t9705 + t9569 * t9641 + t9570 * t9638 + t10821 * t9474 * t10302 + ((-t10624 * t9474 - t9453 * t9682 - t10550) * t10895 + (-t10002 * t9638 + t10633 * t10895) * t9737) * t9584) * t9736 - ((t10667 * t9474 + t10895 * t9453) * t9706 + t9450 * t9565) * t10605 - (t10667 * t9453 - t10694) * t10629 + (t9453 * t9741 * t9584 + (-t10002 * t9641 - t10642 * t10895) * pkin(1)) * t9727 - t9741 * t10694;
t9333 = t9339 * t10703;
t9324 = pkin(6) * t9333;
t9159 = -t9324 + t10366;
t10921 = t9159 * t9727;
t9757 = pkin(8) ^ 2;
t9758 = pkin(7) ^ 2;
t10493 = t9757 + t9758;
t9743 = pkin(8) * pkin(7);
t9702 = -0.2e1 * t9743;
t10920 = t9702 - t10493;
t10479 = 0.2e1 * t9730;
t10478 = 0.2e1 * t9733;
t10477 = 0.2e1 * t9736;
t10819 = 0.2e1 * t9689 - 0.1e1;
t10816 = 0.2e1 * t9693 - 0.1e1;
t10813 = 0.2e1 * t9697 - 0.1e1;
t10448 = pkin(3) * t10623;
t10600 = t9706 * t9720;
t9852 = t9705 * t9526;
t9798 = -pkin(3) * t10600 + t9852;
t9367 = -(t9445 + (t9472 * t9705 + t10702) * t9721) * t10792 + (t9451 * t10448 + (-pkin(2) * t9448 + t10313) * t9730 + (-pkin(2) * t10702 - t9448 * t9741) * t9721 + t9798 * t9472) * t9729 + (t9451 * t9705 - t9472 * t9706) * t10804;
t9475 = t9521 * t10804;
t10613 = t9705 * t9730;
t10430 = pkin(6) * t10613;
t10599 = t9706 * t9721;
t10464 = pkin(1) * t10599;
t9494 = t10430 + t10464;
t10007 = -t10792 * t9494 + t9705 * t9475;
t9518 = pkin(1) * t9642 - pkin(6) * t10536;
t9579 = t9642 - pkin(6);
t9463 = t9579 * t9657 + t9518;
t10806 = pkin(1) * t9706;
t9481 = t9526 * t10806;
t9404 = (t9463 * t9705 + t9481) * t9729 + t10007;
t9399 = 0.1e1 / t9404;
t10735 = t9367 * t9399;
t10344 = t9721 * t10735;
t10073 = t9705 * t10344;
t10342 = t9730 * t10735;
t9343 = t9705 * t10342;
t10509 = t9343 - 0.2e1 * t9329;
t10345 = t9720 * t10735;
t10074 = t9705 * t10345;
t10744 = t9337 * t9424;
t10362 = t9741 * t10744;
t10097 = t9720 * t10362;
t10142 = pkin(2) * t9544;
t10385 = t9706 * t9284;
t9688 = t9729 * t9689;
t9760 = pkin(3) ^ 2;
t10627 = t9688 * t9760;
t10654 = t9630 * t9682;
t10817 = t9691 - 0.1e1;
t10233 = (t10385 + (t10817 - t10654) * t10735) * t10627;
t10270 = t9705 * t10600;
t10346 = t9705 * t10735;
t9749 = pkin(6) / 0.3e1;
t10458 = (t9642 + t9749) * t10803;
t10470 = 0.2e1 * t10605;
t10683 = t9558 * t9730;
t9151 = t9720 * t10381 - t10744;
t10750 = t9151 * t9730;
t10805 = pkin(2) * t9705;
t10836 = -0.3e1 * t9705;
t10838 = -0.2e1 * t9682;
t9349 = t9706 * t10735;
t9201 = t9349 + t9284;
t9215 = t9343 - t9329;
t10384 = t9720 * t9284;
t9244 = pkin(3) * t10384;
t9269 = pkin(2) * t9284;
t9307 = t9741 * t9329;
t10001 = -0.2e1 * t10073;
t9750 = pkin(6) / 0.2e1;
t9572 = t9642 + t9750;
t9342 = t9572 * t10001;
t9400 = 0.1e1 / t9404 ^ 2;
t9460 = -pkin(6) * t10499 + t10894 * t9642;
t9566 = pkin(1) * t10536;
t9704 = t9741 ^ 2;
t9763 = pkin(2) ^ 2;
t9620 = t9704 + t9763;
t9751 = -0.3e1 / 0.2e1 * pkin(2);
t9934 = t9720 * t10073;
t9876 = pkin(3) * t9934;
t9621 = pkin(6) * t9642;
t10496 = t9621 + t9760;
t10628 = t9683 * t9684;
t9885 = t10628 * t9691 + t10496;
t10341 = t9741 * t10735;
t10072 = t9705 * t10341;
t9933 = t9721 * t10072;
t10383 = t9721 * t9284;
t10113 = t9720 * t10383;
t9992 = pkin(2) * t10113;
t9013 = -(t10233 + (t9284 * t9620 - t10097) * t10591 + (-t9992 + t10750) * t10805 + ((t9342 + 0.2e1 * t9269) * t9706 * t9689 + (-(t9244 + t9307) * t9721 * t9689 + (-0.2e1 * t9992 + t10750) * t9729) * t9705) * pkin(3) + (((t9751 + t10502) * t10838 + 0.2e1 * t9647 + t10683 - pkin(2)) * t10792 + (-(-t9763 + t9885 + 0.2e1 * t10142) * t9682 + (t10470 * t9572 * t9730 + t10458 * t10836) * t9706 + pkin(2) * t10683 + t9566 + t9704 + t9885) * t9729 + pkin(2) * (t10270 * t9526 - t9577 * t9682 + t9577)) * t10735) * t9400 * t9367 + (-(t9201 * t10627 + (-t9876 / 0.2e1 + t9201 * pkin(2)) * t10488 + (t9201 * t9620 + ((t9610 - 0.2e1 * t10803) * pkin(3) * t10346 - t10362) * t9720) * t9729 + t9526 * pkin(2) * t10074) * t9284 + (t9689 * t9933 + (t9201 * t9720 * t9741 + pkin(3) * t9343 - t10744) * t9729 + pkin(2) * t9215) * t10744) / ((t9460 * t9705 + t9481) * t9729 + t10007);
t10758 = t9013 * t9705;
t10000 = 0.2e1 * t10073;
t10879 = t9757 / 0.2e1 + t9758 / 0.2e1;
t9715 = t9763 / 0.2e1;
t10014 = t9715 + t9743 + t10879;
t10866 = 0.3e1 * t10920;
t10015 = t9763 + t10866;
t10230 = -t10744 / 0.2e1;
t10024 = t9720 * t10230;
t10223 = 0.2e1 * t9743 + t10493;
t9548 = t9763 + t10223;
t9229 = t9548 * t9284;
t10382 = t9729 * t9284;
t10133 = pkin(2) * t10382;
t9241 = pkin(3) * t10133;
t10380 = t9760 * t9284;
t9245 = t9689 * t10380;
t10021 = t9229 / 0.2e1 + t9245 / 0.2e1 + t9241 + t9741 * t10024;
t10054 = t9578 * t10304;
t10075 = t10651 * t10735;
t10076 = t9578 * t10897 * t10735;
t10102 = t9705 * t9329;
t10115 = t10628 * t9284;
t10123 = t10821 * t10735;
t9681 = t9706 * t9682;
t10124 = 0.2e1 * t9681 - 0.2e1 * t9706;
t10364 = t9689 * t10744;
t10144 = pkin(3) * t10364;
t10161 = t9705 * t9562;
t9759 = pkin(6) ^ 2;
t10221 = -t9759 / 0.2e1 - t9760 / 0.2e1 + t9715;
t9529 = -0.2e1 / 0.3e1 * t9743 - t9757 / 0.3e1 - t9758 / 0.3e1 + t9763;
t10227 = 0.3e1 / 0.2e1 * t9529 * t9741;
t10347 = t9691 * t10735;
t9267 = pkin(6) * t9284;
t9313 = pkin(8) * t9329;
t10515 = t9267 + t9313;
t9265 = pkin(8) * t9284;
t9266 = pkin(7) * t9284;
t10527 = (t9266 + t9265 - t9322 / 0.2e1) * t9642 + pkin(3) * t10230;
t9861 = t9761 * (-t9763 / 0.2e1 + t10879);
t10427 = (pkin(6) * t9265 + pkin(7) * t10515 + t10744 * t9861 + t10527) * t9646;
t10454 = pkin(2) * t10599;
t10604 = t9705 * t9761;
t10455 = pkin(2) * t10604;
t10461 = t9555 * t10804;
t10465 = pkin(1) * t10624;
t10471 = 0.2e1 * t10624;
t10521 = 0.2e1 * t9241 + t9245;
t10807 = pkin(1) * t9705;
t10837 = 0.2e1 * t9682;
t10840 = 0.2e1 * t9681;
t10841 = 0.2e1 * t9675;
t9624 = pkin(2) * t9646;
t9645 = t9689 * t9760;
t10869 = t9624 + t9645 - t9621;
t10882 = 0.2e1 * t9621 - t9645;
t10901 = -0.4e1 * t9681;
t9253 = pkin(6) * t10381;
t9082 = t9253 + t10527;
t9163 = t9322 - t9266;
t9133 = t9265 - t9163;
t10363 = t9720 * t10744;
t9154 = t10381 - t10363;
t9281 = pkin(1) * t9284;
t10492 = pkin(1) ^ 2 + t9759;
t9908 = t10223 + t10492;
t9525 = t9760 + t9908;
t9547 = pkin(1) * t10628;
t9676 = t9760 + t9763;
t9677 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t9690 = t9730 * t9691;
t9755 = 0.2e1 * pkin(2);
t10220 = t9763 - t10493;
t9325 = pkin(1) * t9329;
t9317 = pkin(7) * t9329;
t10018 = t9244 + t9317 + t10515;
t9897 = t10018 * t9721;
t10876 = t9897 + t9325;
t9795 = (pkin(6) * t10115 + (((t9322 - 0.2e1 * t9265) * pkin(7) + pkin(6) * t9313) * t9720 + t10362 + t10220 * t10384) * pkin(3)) * t9721 + (t9325 + 0.2e1 * t9897) * t9624 + t10876 * t9645;
t10147 = t9578 * t9269;
t10100 = t9721 * t9329;
t9304 = pkin(1) * t10100;
t9825 = (t9304 + t10018) * t9646 + t10147;
t10485 = pkin(6) * t10792;
t9837 = -t10464 * t10792 + (t10678 + (t10798 * t9579 + t9720 * t9763 - t10485) * t9705) * t9730 + t9705 * t10461;
t9853 = t10221 + t10920;
t9854 = t9760 + t10492 - t10866;
t10101 = t9720 * t9329;
t9882 = t10101 * t10806;
t9888 = t9229 - t10097;
t9891 = t9349 * t9563 + t9133;
t9900 = 0.2e1 * t9624 + t9645;
t9907 = t9702 + t9760 + t10220;
t9917 = t9578 * t10042;
t9932 = t9741 * t10076;
t8992 = (0.1e1 / ((t9518 * t9729 + t10461) * t9705 + t9849) * (t10735 * (-(t10015 + t9900) * t9690 * t10075 * t10664 + (t9932 * t10901 + (-0.3e1 * (t9529 + t9900) * t9933 - 0.2e1 * t10427 + (-0.2e1 * t9082 + t10144) * pkin(2)) * t9682 + ((t10097 + t10115 + t10521) * t10807 + 0.4e1 * t9932) * t9706 + 0.2e1 * (t9721 * t10227 + t9547 + t9900 * (t9677 * t9721 + pkin(1))) * t10346 - pkin(2) * t10144 + 0.2e1 * t10427 + t9082 * t9755) * t9691 + (t9795 * t9682 + t10897 * ((t10024 + t10381) * t9660 + t10021) * t10471 + (((t9853 + t10869) * t10837 + 0.4e1 * t9566 + t9854 + t10882) * t10664 + t10054 * t10124) * t10735 - t9795) * t9730 + (t10076 * t10840 + ((t10221 + t10869) * t10000 + t9825) * t9682 + (-0.2e1 * t10076 + t9154 * t10807 + (t9284 * t9900 + t9888) * t10622) * t9706 + (t10841 + (t9525 + t10882) * t9721) * t10346 - t9825) * t9741) + ((t10465 * t10690 - 0.2e1 * t9917) * t10347 + (0.2e1 * ((t9645 / 0.2e1 + t9624 + t9566 + t10014) * t9349 + t10021) * t10664 + t10054 * t10075) * t9730 + ((t9675 + (t9548 + t9900) * t9721) * t9741 * t9349 + t9555 * (t9888 + t10521)) * t9705 + t9917 * t10735) * t9284) + ((t9720 * t10161 + ((t9621 + t9907) * t9729 + (t9577 + t10792) * pkin(2)) * t10651) * t10347 + ((pkin(2) * t10102 + t10075 * t9555) * t10792 + ((t9329 * t9676 - t9642 * t9891) * t9705 + pkin(2) * t9558 * t10075) * t9729 - (t9720 * t9891 - t10744) * t10805 - (-t10344 * t10821 * t9577 + t9882) * t9741) * t9730 + t10364 * t10807 + (t9741 * t9563 * t10123 + (t10455 * t9555 + t10464 * t9720) * t10744) * t9729 - (-t9721 * t10744 + (t9133 * t9721 + t9349 * t9555 + t9281) * t9720) * t10605 + t9882 * t10803) / ((-pkin(1) * t10454 + t9518 * t9705) * t9729 + t9837) * t10744) * t9761;
t10781 = pkin(7) * t8992;
t9952 = t9329 * t9284;
t9879 = pkin(2) * t9952;
t9169 = -0.2e1 * t9879;
t9534 = pkin(7) * t9730 - t10803;
t10919 = t10758 * t9534 + t10781 + (pkin(2) * t10509 + pkin(7) * t10073) * t9349 + t9169;
t10447 = pkin(3) * t10620;
t10597 = t9706 * t9723;
t9851 = t9705 * t9527;
t9797 = -pkin(3) * t10597 + t9851;
t9368 = -(t9446 + (t9473 * t9705 + t10700) * t9724) * t10791 + (t9452 * t10447 + (-pkin(2) * t9449 + t10312) * t9733 + (-pkin(2) * t10700 - t9449 * t9741) * t9724 + t9797 * t9473) * t9732 + (t9452 * t9705 - t9473 * t9706) * t10802;
t9476 = t9522 * t10802;
t10610 = t9705 * t9733;
t10429 = pkin(6) * t10610;
t10596 = t9706 * t9724;
t10463 = pkin(1) * t10596;
t9495 = t10429 + t10463;
t10006 = -t10791 * t9495 + t9705 * t9476;
t9519 = pkin(1) * t9643 - pkin(6) * t10535;
t9582 = t9643 - pkin(6);
t9464 = t9582 * t9658 + t9519;
t9482 = t9527 * t10806;
t9405 = (t9464 * t9705 + t9482) * t9732 + t10006;
t9401 = 0.1e1 / t9405;
t10734 = t9368 * t9401;
t10334 = t9724 * t10734;
t10065 = t9705 * t10334;
t10332 = t9733 * t10734;
t9344 = t9705 * t10332;
t10508 = t9344 - 0.2e1 * t9331;
t10335 = t9723 * t10734;
t10066 = t9705 * t10335;
t10743 = t9338 * t9426;
t10359 = t9741 * t10743;
t10091 = t9723 * t10359;
t10139 = pkin(2) * t9545;
t10249 = t9706 * t9286;
t9692 = t9732 * t9693;
t10626 = t9692 * t9760;
t10653 = t9631 * t9682;
t10814 = t9695 - 0.1e1;
t10232 = (t10249 + (t10814 - t10653) * t10734) * t10626;
t10268 = t9705 * t10597;
t10336 = t9705 * t10734;
t10457 = (t9643 + t9749) * t10801;
t10681 = t9559 * t9733;
t9152 = t9723 * t10374 - t10743;
t10749 = t9152 * t9733;
t9350 = t9706 * t10734;
t9204 = t9350 + t9286;
t9217 = t9344 - t9331;
t10377 = t9723 * t9286;
t9246 = pkin(3) * t10377;
t9274 = pkin(2) * t9286;
t9308 = t9741 * t9331;
t9574 = t9643 + t9750;
t9999 = -0.2e1 * t10065;
t9340 = t9574 * t9999;
t9402 = 0.1e1 / t9405 ^ 2;
t9461 = -pkin(6) * t10498 + t10893 * t9643;
t9567 = pkin(1) * t10535;
t9927 = t9723 * t10065;
t9875 = pkin(3) * t9927;
t9622 = pkin(6) * t9643;
t10495 = t9622 + t9760;
t9884 = t10628 * t9695 + t10495;
t10331 = t9741 * t10734;
t10064 = t9705 * t10331;
t9926 = t9724 * t10064;
t10376 = t9724 * t9286;
t10108 = t9723 * t10376;
t9991 = pkin(2) * t10108;
t9014 = -(t10232 + (t9286 * t9620 - t10091) * t10589 + (-t9991 + t10749) * t10805 + ((t9340 + 0.2e1 * t9274) * t9706 * t9693 + (-(t9246 + t9308) * t9724 * t9693 + (-0.2e1 * t9991 + t10749) * t9732) * t9705) * pkin(3) + (((t9751 + t10501) * t10838 + 0.2e1 * t9650 + t10681 - pkin(2)) * t10791 + (-(-t9763 + t9884 + 0.2e1 * t10139) * t9682 + (t10470 * t9574 * t9733 + t10457 * t10836) * t9706 + pkin(2) * t10681 + t9567 + t9704 + t9884) * t9732 + pkin(2) * (t10268 * t9527 - t9580 * t9682 + t9580)) * t10734) * t9402 * t9368 + (-(t9204 * t10626 + (-t9875 / 0.2e1 + t9204 * pkin(2)) * t10487 + (t9204 * t9620 + ((t9611 - 0.2e1 * t10801) * pkin(3) * t10336 - t10359) * t9723) * t9732 + t9527 * pkin(2) * t10066) * t9286 + (t9693 * t9926 + (t9204 * t9723 * t9741 + pkin(3) * t9344 - t10743) * t9732 + pkin(2) * t9217) * t10743) / ((t9461 * t9705 + t9482) * t9732 + t10006);
t10755 = t9014 * t9705;
t10229 = -t10743 / 0.2e1;
t10023 = t9723 * t10229;
t9230 = t9548 * t9286;
t10375 = t9732 * t9286;
t10131 = pkin(2) * t10375;
t9242 = pkin(3) * t10131;
t10373 = t9760 * t9286;
t9247 = t9693 * t10373;
t10020 = t9230 / 0.2e1 + t9247 / 0.2e1 + t9242 + t9741 * t10023;
t10052 = t9581 * t10303;
t10067 = t10651 * t10734;
t10068 = t9581 * t10896 * t10734;
t10096 = t9705 * t9331;
t10110 = t10628 * t9286;
t10122 = t10821 * t10734;
t10361 = t9693 * t10743;
t10154 = pkin(3) * t10361;
t10337 = t9695 * t10734;
t9272 = pkin(6) * t9286;
t9314 = pkin(8) * t9331;
t10514 = t9272 + t9314;
t9270 = pkin(8) * t9286;
t9271 = pkin(7) * t9286;
t10526 = (t9271 + t9270 - t9323 / 0.2e1) * t9643 + pkin(3) * t10229;
t10426 = (pkin(6) * t9270 + pkin(7) * t10514 + t10743 * t9861 + t10526) * t9649;
t10453 = pkin(2) * t10596;
t10460 = t9556 * t10802;
t10520 = 0.2e1 * t9242 + t9247;
t9625 = pkin(2) * t9649;
t9648 = t9693 * t9760;
t10868 = t9625 + t9648 - t9622;
t10881 = 0.2e1 * t9622 - t9648;
t9254 = pkin(6) * t10374;
t9083 = t9254 + t10526;
t9164 = t9323 - t9271;
t9134 = t9270 - t9164;
t10360 = t9723 * t10743;
t9155 = t10374 - t10360;
t9282 = pkin(1) * t9286;
t9694 = t9733 * t9695;
t9326 = pkin(1) * t9331;
t9319 = pkin(7) * t9331;
t10017 = t9246 + t9319 + t10514;
t9896 = t10017 * t9724;
t10877 = t9896 + t9326;
t9794 = (pkin(6) * t10110 + (((t9323 - 0.2e1 * t9270) * pkin(7) + pkin(6) * t9314) * t9723 + t10359 + t10220 * t10377) * pkin(3)) * t9724 + (t9326 + 0.2e1 * t9896) * t9625 + t10877 * t9648;
t10146 = t9581 * t9274;
t10094 = t9724 * t9331;
t9305 = pkin(1) * t10094;
t9824 = (t9305 + t10017) * t9649 + t10146;
t10484 = pkin(6) * t10791;
t9836 = -t10463 * t10791 + (t10677 + (t10796 * t9582 + t9723 * t9763 - t10484) * t9705) * t9733 + t9705 * t10460;
t10095 = t9723 * t9331;
t9881 = t10095 * t10806;
t9887 = t9230 - t10091;
t9890 = t9350 * t9564 + t9134;
t9899 = 0.2e1 * t9625 + t9648;
t9916 = t9581 * t10041;
t9925 = t9741 * t10068;
t9998 = 0.2e1 * t10065;
t8993 = (0.1e1 / ((t9519 * t9732 + t10460) * t9705 + t9848) * (t10734 * (-(t10015 + t9899) * t9694 * t10067 * t10661 + (t9925 * t10901 + (-0.3e1 * (t9529 + t9899) * t9926 - 0.2e1 * t10426 + (-0.2e1 * t9083 + t10154) * pkin(2)) * t9682 + ((t10091 + t10110 + t10520) * t10807 + 0.4e1 * t9925) * t9706 + 0.2e1 * (t9724 * t10227 + t9547 + t9899 * (t9677 * t9724 + pkin(1))) * t10336 - pkin(2) * t10154 + 0.2e1 * t10426 + t9083 * t9755) * t9695 + (t9794 * t9682 + t10896 * ((t10023 + t10374) * t9661 + t10020) * t10471 + (((t9853 + t10868) * t10837 + 0.4e1 * t9567 + t9854 + t10881) * t10661 + t10052 * t10124) * t10734 - t9794) * t9733 + (t10068 * t10840 + ((t10221 + t10868) * t9998 + t9824) * t9682 + (-0.2e1 * t10068 + t9155 * t10807 + (t9286 * t9899 + t9887) * t10619) * t9706 + (t10841 + (t9525 + t10881) * t9724) * t10336 - t9824) * t9741) + ((t10465 * t10689 - 0.2e1 * t9916) * t10337 + (0.2e1 * ((t9648 / 0.2e1 + t9625 + t9567 + t10014) * t9350 + t10020) * t10661 + t10052 * t10067) * t9733 + ((t9675 + (t9548 + t9899) * t9724) * t9741 * t9350 + t9556 * (t9887 + t10520)) * t9705 + t9916 * t10734) * t9286) + ((t9723 * t10161 + ((t9622 + t9907) * t9732 + (t9580 + t10791) * pkin(2)) * t10651) * t10337 + ((pkin(2) * t10096 + t10067 * t9556) * t10791 + ((t9331 * t9676 - t9643 * t9890) * t9705 + pkin(2) * t9559 * t10067) * t9732 - (t9723 * t9890 - t10743) * t10805 - (-t10334 * t10821 * t9580 + t9881) * t9741) * t9733 + t10361 * t10807 + (t9741 * t9564 * t10122 + (t10455 * t9556 + t10463 * t9723) * t10743) * t9732 - (-t9724 * t10743 + (t9134 * t9724 + t9350 * t9556 + t9282) * t9723) * t10605 + t9881 * t10801) / ((-pkin(1) * t10453 + t9519 * t9705) * t9732 + t9836) * t10743) * t9761;
t10780 = pkin(7) * t8993;
t9950 = t9331 * t9286;
t9878 = pkin(2) * t9950;
t9170 = -0.2e1 * t9878;
t9536 = pkin(7) * t9733 - t10801;
t10918 = t10755 * t9536 + t10780 + (pkin(2) * t10508 + pkin(7) * t10065) * t9350 + t9170;
t10446 = pkin(3) * t10617;
t10594 = t9706 * t9726;
t9850 = t9705 * t9528;
t9796 = -pkin(3) * t10594 + t9850;
t9369 = -(t9447 + (t9474 * t9705 + t10698) * t9727) * t10790 + (t9453 * t10446 + (-pkin(2) * t9450 + t10311) * t9736 + (-pkin(2) * t10698 - t9450 * t9741) * t9727 + t9796 * t9474) * t9735 + (t9453 * t9705 - t9474 * t9706) * t10800;
t9477 = t9523 * t10800;
t10607 = t9705 * t9736;
t10428 = pkin(6) * t10607;
t10593 = t9706 * t9727;
t10462 = pkin(1) * t10593;
t9493 = t10428 + t10462;
t10005 = -t10790 * t9493 + t9705 * t9477;
t9520 = pkin(1) * t9644 - pkin(6) * t10534;
t9585 = t9644 - pkin(6);
t9465 = t9585 * t9659 + t9520;
t9483 = t9528 * t10806;
t9403 = (t9465 * t9705 + t9483) * t9735 + t10005;
t9397 = 0.1e1 / t9403;
t10733 = t9369 * t9397;
t10324 = t9727 * t10733;
t10057 = t9705 * t10324;
t10322 = t9736 * t10733;
t9345 = t9705 * t10322;
t10507 = t9345 - 0.2e1 * t9333;
t10325 = t9726 * t10733;
t10058 = t9705 * t10325;
t10742 = t9339 * t9428;
t10356 = t9741 * t10742;
t10085 = t9726 * t10356;
t10136 = pkin(2) * t9546;
t10370 = t9706 * t9288;
t9696 = t9735 * t9697;
t10625 = t9696 * t9760;
t10652 = t9632 * t9682;
t10811 = t9699 - 0.1e1;
t10231 = (t10370 + (t10811 - t10652) * t10733) * t10625;
t10266 = t9705 * t10594;
t10326 = t9705 * t10733;
t10456 = (t9644 + t9749) * t10799;
t10679 = t9560 * t9736;
t9153 = t9726 * t10366 - t10742;
t10748 = t9153 * t9736;
t9351 = t9706 * t10733;
t9207 = t9351 + t9288;
t9219 = t9345 - t9333;
t10369 = t9726 * t9288;
t9248 = pkin(3) * t10369;
t9278 = pkin(2) * t9288;
t9309 = t9741 * t9333;
t9576 = t9644 + t9750;
t9997 = -0.2e1 * t10057;
t9341 = t9576 * t9997;
t9398 = 0.1e1 / t9403 ^ 2;
t9462 = -pkin(6) * t10497 + t10892 * t9644;
t9568 = pkin(1) * t10534;
t9920 = t9726 * t10057;
t9874 = pkin(3) * t9920;
t9623 = pkin(6) * t9644;
t10494 = t9623 + t9760;
t9883 = t10628 * t9699 + t10494;
t10321 = t9741 * t10733;
t10056 = t9705 * t10321;
t9919 = t9727 * t10056;
t10368 = t9727 * t9288;
t10103 = t9726 * t10368;
t9990 = pkin(2) * t10103;
t9015 = -(t10231 + (t9288 * t9620 - t10085) * t10587 + (-t9990 + t10748) * t10805 + ((t9341 + 0.2e1 * t9278) * t9706 * t9697 + (-(t9248 + t9309) * t9727 * t9697 + (-0.2e1 * t9990 + t10748) * t9735) * t9705) * pkin(3) + (((t9751 + t10500) * t10838 + 0.2e1 * t9653 + t10679 - pkin(2)) * t10790 + (-(-t9763 + t9883 + 0.2e1 * t10136) * t9682 + (t10470 * t9576 * t9736 + t10456 * t10836) * t9706 + pkin(2) * t10679 + t9568 + t9704 + t9883) * t9735 + pkin(2) * (t10266 * t9528 - t9583 * t9682 + t9583)) * t10733) * t9398 * t9369 + (-(t9207 * t10625 + (-t9874 / 0.2e1 + t9207 * pkin(2)) * t10486 + (t9207 * t9620 + ((t9612 - 0.2e1 * t10799) * pkin(3) * t10326 - t10356) * t9726) * t9735 + t9528 * pkin(2) * t10058) * t9288 + (t9697 * t9919 + (t9207 * t9726 * t9741 + pkin(3) * t9345 - t10742) * t9735 + pkin(2) * t9219) * t10742) / ((t9462 * t9705 + t9483) * t9735 + t10005);
t10752 = t9015 * t9705;
t10228 = -t10742 / 0.2e1;
t10022 = t9726 * t10228;
t9231 = t9548 * t9288;
t10367 = t9735 * t9288;
t10129 = pkin(2) * t10367;
t9243 = pkin(3) * t10129;
t10365 = t9760 * t9288;
t9249 = t9697 * t10365;
t10019 = t9231 / 0.2e1 + t9249 / 0.2e1 + t9243 + t9741 * t10022;
t10050 = t9584 * t10302;
t10059 = t10651 * t10733;
t10060 = t9584 * t10895 * t10733;
t10090 = t9705 * t9333;
t10105 = t10628 * t9288;
t10121 = t10821 * t10733;
t10358 = t9697 * t10742;
t10143 = pkin(3) * t10358;
t10327 = t9699 * t10733;
t9276 = pkin(6) * t9288;
t9315 = pkin(8) * t9333;
t10513 = t9276 + t9315;
t9275 = pkin(7) * t9288;
t9280 = pkin(8) * t9288;
t10525 = (t9275 + t9280 - t9324 / 0.2e1) * t9644 + pkin(3) * t10228;
t10425 = (pkin(7) * t10513 + pkin(8) * t9276 + t10742 * t9861 + t10525) * t9652;
t10452 = pkin(2) * t10593;
t10459 = t9557 * t10800;
t10519 = 0.2e1 * t9243 + t9249;
t9626 = pkin(2) * t9652;
t9651 = t9697 * t9760;
t10867 = t9626 + t9651 - t9623;
t10880 = 0.2e1 * t9623 - t9651;
t9255 = pkin(6) * t10366;
t9084 = t9255 + t10525;
t9165 = t9324 - t9275;
t9135 = t9280 - t9165;
t10357 = t9726 * t10742;
t9156 = t10366 - t10357;
t9279 = pkin(1) * t9288;
t9698 = t9736 * t9699;
t9327 = pkin(1) * t9333;
t9321 = pkin(7) * t9333;
t10016 = t9248 + t9321 + t10513;
t9895 = t10016 * t9727;
t10878 = t9895 + t9327;
t9793 = (pkin(6) * t10105 + (((t9324 - 0.2e1 * t9280) * pkin(7) + pkin(6) * t9315) * t9726 + t10356 + t10220 * t10369) * pkin(3)) * t9727 + (t9327 + 0.2e1 * t9895) * t9626 + t10878 * t9651;
t10145 = t9584 * t9278;
t10088 = t9727 * t9333;
t9306 = pkin(1) * t10088;
t9823 = (t9306 + t10016) * t9652 + t10145;
t10483 = pkin(6) * t10790;
t9835 = -t10462 * t10790 + (t10676 + (t10794 * t9585 + t9726 * t9763 - t10483) * t9705) * t9736 + t9705 * t10459;
t10089 = t9726 * t9333;
t9880 = t10089 * t10806;
t9886 = t9231 - t10085;
t9889 = t9351 * t9565 + t9135;
t9898 = 0.2e1 * t9626 + t9651;
t9915 = t9584 * t10040;
t9918 = t9741 * t10060;
t9996 = 0.2e1 * t10057;
t8994 = (0.1e1 / ((t9520 * t9735 + t10459) * t9705 + t9847) * (t10733 * (-(t10015 + t9898) * t9698 * t10059 * t10658 + (t9918 * t10901 + (-0.3e1 * (t9529 + t9898) * t9919 - 0.2e1 * t10425 + (-0.2e1 * t9084 + t10143) * pkin(2)) * t9682 + ((t10085 + t10105 + t10519) * t10807 + 0.4e1 * t9918) * t9706 + 0.2e1 * (t9727 * t10227 + t9547 + t9898 * (t9677 * t9727 + pkin(1))) * t10326 - pkin(2) * t10143 + 0.2e1 * t10425 + t9084 * t9755) * t9699 + (t9793 * t9682 + t10895 * ((t10022 + t10366) * t9662 + t10019) * t10471 + (((t9853 + t10867) * t10837 + 0.4e1 * t9568 + t9854 + t10880) * t10658 + t10050 * t10124) * t10733 - t9793) * t9736 + (t10060 * t10840 + ((t10221 + t10867) * t9996 + t9823) * t9682 + (-0.2e1 * t10060 + t9156 * t10807 + (t9288 * t9898 + t9886) * t10616) * t9706 + (t10841 + (t9525 + t10880) * t9727) * t10326 - t9823) * t9741) + ((t10465 * t10688 - 0.2e1 * t9915) * t10327 + (0.2e1 * ((t9651 / 0.2e1 + t9626 + t9568 + t10014) * t9351 + t10019) * t10658 + t10050 * t10059) * t9736 + ((t9675 + (t9548 + t9898) * t9727) * t9741 * t9351 + t9557 * (t9886 + t10519)) * t9705 + t9915 * t10733) * t9288) + ((t9726 * t10161 + ((t9623 + t9907) * t9735 + (t9583 + t10790) * pkin(2)) * t10651) * t10327 + ((pkin(2) * t10090 + t10059 * t9557) * t10790 + ((t9333 * t9676 - t9644 * t9889) * t9705 + pkin(2) * t9560 * t10059) * t9735 - (t9726 * t9889 - t10742) * t10805 - (-t10324 * t10821 * t9583 + t9880) * t9741) * t9736 + t10358 * t10807 + (t9741 * t9565 * t10121 + (t10455 * t9557 + t10462 * t9726) * t10742) * t9735 - (-t9727 * t10742 + (t9135 * t9727 + t9351 * t9557 + t9279) * t9726) * t10605 + t9880 * t10799) / ((-pkin(1) * t10452 + t9520 * t9705) * t9735 + t9835) * t10742) * t9761;
t10779 = pkin(7) * t8994;
t9948 = t9333 * t9288;
t9877 = pkin(2) * t9948;
t9171 = -0.2e1 * t9877;
t9538 = pkin(7) * t9736 - t10799;
t10917 = t10752 * t9538 + t10779 + (pkin(2) * t10507 + pkin(7) * t10057) * t9351 + t9171;
t10269 = t9705 * t10599;
t8971 = t9013 * t10613 + t8992;
t9364 = t9367 ^ 2;
t9355 = t9364 * t9400;
t10916 = -t10269 * t9355 - t8971;
t10267 = t9705 * t10596;
t8972 = t9014 * t10610 + t8993;
t9365 = t9368 ^ 2;
t9356 = t9365 * t9402;
t10915 = -t10267 * t9356 - t8972;
t10265 = t9705 * t10593;
t8973 = t9015 * t10607 + t8994;
t9366 = t9369 ^ 2;
t9357 = t9366 * t9398;
t10914 = -t10265 * t9357 - t8973;
t10153 = pkin(6) * t10269;
t10693 = (pkin(7) * t10579 - pkin(2) + t9647) * t9682;
t10349 = t9577 * t10735;
t10077 = t10889 * t10349;
t10348 = t9682 * t10735;
t10782 = pkin(6) * t9741;
t10787 = pkin(6) * t9730;
t10873 = t9620 * t9721 + t9675;
t9664 = pkin(1) * t9730;
t9598 = t9664 + t9755;
t9754 = 0.3e1 * pkin(2);
t9870 = -pkin(1) * t9657 - t9566 - t9620;
t10098 = t9730 * t9329;
t9989 = pkin(2) * t10098;
t10393 = (-t10233 - ((t9284 * t9598 + t9342) * t9706 + (-t9989 - t10876) * t9705 + ((-t9647 + (-t10536 + pkin(1)) * t9730 + t9754) * t9682 + t10889) * t10735) * t10792 + (-(pkin(3) * t9577 * t9691 - t10496 - t9870) * t10348 + ((((t9660 - t9741) * t9642 - t10782) * t9730 + 0.3e1 * t10458) * t10346 + t9563 * t10363 + t9870 * t9284) * t9706 + (t10147 * t9721 - t10787 * t9154) * t9705 + pkin(3) * t10349 * t10632) * t9729 - t9682 * t10077 - (pkin(1) * t9873 - t10873) * t9706 * t10074 + t9521 * t9151 * t9705 + t10077) * t9284;
t10157 = pkin(2) * t10346;
t10010 = 0.2e1 * t10157;
t10114 = t9688 * t10380;
t10386 = t9705 * t9284;
t10160 = pkin(2) * t10386;
t10164 = pkin(1) * t10381;
t10170 = -(pkin(2) * t10000 + t9267 + t9307) * t9691 + t9267;
t10176 = 0.2e1 * t10341;
t10212 = 0.2e1 * t10735;
t10436 = pkin(6) * t10735;
t10215 = pkin(2) * t10436;
t9268 = pkin(3) * t9284;
t10218 = pkin(2) * t9268;
t10222 = t9759 / 0.3e1 - t9763 / 0.3e1 + t9760;
t10276 = t9721 * t10628;
t10444 = pkin(3) * t10923;
t10490 = -0.2e1 * t9675;
t10503 = t10628 / 0.3e1 - 0.2e1 / 0.3e1 * t9760;
t9301 = pkin(1) * t10102;
t10512 = t10735 * t9755 + t9301;
t10747 = (-t9269 + t9876) * t9691;
t10839 = 0.3e1 * t9681;
t10846 = 0.2e1 * pkin(6);
t10847 = -0.2e1 * pkin(6);
t10850 = 0.2e1 * pkin(1);
t10900 = 0.2e1 * t9721;
t9160 = pkin(3) * t10744 - t9253;
t9250 = pkin(1) * t10383;
t9262 = pkin(2) * t9267;
t9524 = 0.3e1 * t9760 + t9908;
t9543 = -t10628 / 0.2e1;
t10491 = t9763 - t9760;
t9561 = t9704 + t10491;
t9616 = -t9759 + t10491;
t9756 = -0.2e1 * pkin(1);
t9894 = 0.2e1 * t9690 * t10072;
t9804 = pkin(3) * (pkin(6) * t10001 + t9269) + t10804 * t9894;
t9947 = t9721 * t10098;
t9971 = -t10485 * t9730 + t9475;
t9983 = pkin(2) * t10072;
t10407 = (((t9691 - 0.4e1 / 0.3e1) * t10627 + ((-0.2e1 / 0.3e1 * t9621 + t10503) * t9691 + 0.2e1 / 0.3e1 * t10142 + 0.4e1 / 0.3e1 * t9621 + t10222) * t9729 + (0.4e1 / 0.3e1 * t10792 - 0.2e1 / 0.3e1 * t9577) * t10889) * t10735 * t10839 + (t9630 * t10114 - (t10747 + (t9281 - t10923) * t9730 + 0.3e1 * t9269 - 0.4e1 * t9578 * t10073) * t10792 + ((-pkin(1) * t9269 + t10072 * t10847) * t9730 + (pkin(6) * t10010 - t10164) * t9721 - t9561 * t9284 + (-t9268 * t9691 + (t9894 + (pkin(2) * t10100 - 0.4e1 * t10072) * t9730 + (t9325 + t10010) * t10900 + 0.2e1 * t9307 + t10170) * t9720) * pkin(3)) * t9729 + ((-t10073 * t10628 - t9262) * t9720 - t10218) * t9691 + ((t9160 * t9721 - 0.2e1 * t9983) * t9720 - t10444) * t9730 + (t10073 * t9616 + t9262) * t9720 + t9804) * t9682 + ((-0.3e1 * t9691 + 0.3e1) * t10627 * t10735 - (t9630 * t9301 + (-t9989 + (-t9267 - 0.2e1 * t9307 - 0.2e1 * t9244) * t9721) * t9705 + ((t10850 + 0.4e1 * t10536) * t9730 + (0.4e1 * t9691 - 0.2e1) * pkin(2)) * t10735) * t10792 + (0.2e1 * (t9543 + t10496) * t10347 + (((t9250 - t9157) * t9642 + t9160) * t9705 - t9555 * pkin(2) * t10212) * t9730 + (0.3e1 * t10160 * t9721 - 0.4e1 * t10436) * t9642 + (pkin(6) * t10160 + t10341 * t9756) * t9721 - t9524 * t10735) * t9729 + ((-t10164 * t9705 + 0.2e1 * t10215) * t9720 + pkin(3) * t10512) * t9691 + ((pkin(1) * t10160 + pkin(6) * t10176) * t9720 + pkin(3) * t10176) * t10579 + (t10386 * t10873 - 0.2e1 * t10215) * t9720 - (t10622 * t9307 + t10512) * pkin(3)) * t9706 - t10817 * t10114 - (-t10747 - t9269 + (t9157 * t9730 + (t10846 + t9642) * t10346) * t9721) * t10792 - (-t10817 * t9268 + (pkin(2) * t9947 + t9304 + t9307 + (t9741 * t9690 - (t9741 + t9660) * t9730) * t9705 * t10212 + t10170) * t9720) * t9646 + ((t9262 + (t10276 + t10490) * t10346) * t9720 + t10218) * t9691 + (((pkin(1) * t10010 - t9160) * t9721 + 0.2e1 * t9983) * t9720 + t10444) * t9730 + (-t9262 + (t9525 * t9721 + t10841) * t10346) * t9720 - t9804) / (t9454 + (t9463 * t9729 + t9971) * t9705) * t9367;
t10590 = t9706 * t9730;
t10264 = t9705 * t10590;
t10292 = t9721 * t10651;
t10583 = t9720 * t9729;
t10831 = 0.2e1 * t9720;
t9663 = pkin(1) * t9691;
t9748 = -pkin(7) / 0.2e1;
t9678 = t9748 - pkin(8) / 0.2e1;
t9033 = ((pkin(1) * t10113 + t9151) * t9729 - (t9664 + pkin(2)) * t9329) * t9706 + ((t10363 - t9157) * t9721 - t9281 + (t9521 * t9689 + (pkin(6) * t10583 - pkin(2)) * t9730) * t9284) * t9705 + ((-(-t9657 + t9663 + t9756 - t10577) * t10624 - t10292 * t10787) * t9689 + (t9577 * t10264 + (t9678 * t9691 + t10451 / 0.2e1 + t9563) * t9682 * t10831 - t9720 * t9466) * t9729 + (t9663 - t9555) * t10624 + t10821 * t9578 * t10579) * t10735;
t8996 = (-t10744 * t9033 - t10393 - t10407) * t9399;
t10777 = pkin(7) * t8996;
t9010 = t9706 * t9013;
t9283 = t9295 ^ 2 / t9421 ^ 2;
t9654 = pkin(7) * t9721;
t9589 = t9654 + pkin(1);
t9914 = t9349 * t9284;
t10913 = -t9010 * t9595 - t10777 + (0.2e1 * t9914 + t9283) * pkin(2) + (t9589 * t9730 - t10153 - t10693 + t9647) * t9355;
t10152 = pkin(6) * t10267;
t10692 = (pkin(7) * t10567 - pkin(2) + t9650) * t9682;
t10339 = t9580 * t10734;
t10069 = t10890 * t10339;
t10338 = t9682 * t10734;
t10785 = pkin(6) * t9733;
t10874 = t9620 * t9724 + t9675;
t9666 = pkin(1) * t9733;
t9599 = t9666 + t9755;
t9869 = -pkin(1) * t9658 - t9567 - t9620;
t10092 = t9733 * t9331;
t9987 = pkin(2) * t10092;
t10392 = (-t10232 - ((t9286 * t9599 + t9340) * t9706 + (-t9987 - t10877) * t9705 + ((-t9650 + (-t10535 + pkin(1)) * t9733 + t9754) * t9682 + t10890) * t10734) * t10791 + (-(pkin(3) * t9580 * t9695 - t10495 - t9869) * t10338 + ((((t9661 - t9741) * t9643 - t10782) * t9733 + 0.3e1 * t10457) * t10336 + t9564 * t10360 + t9869 * t9286) * t9706 + (t10146 * t9724 - t10785 * t9155) * t9705 + pkin(3) * t10339 * t10631) * t9732 - t9682 * t10069 - (pkin(1) * t9872 - t10874) * t9706 * t10066 + t9522 * t9152 * t9705 + t10069) * t9286;
t10156 = pkin(2) * t10336;
t10009 = 0.2e1 * t10156;
t10109 = t9692 * t10373;
t10378 = t9705 * t9286;
t10159 = pkin(2) * t10378;
t10163 = pkin(1) * t10374;
t10169 = -(pkin(2) * t9998 + t9272 + t9308) * t9695 + t9272;
t10175 = 0.2e1 * t10331;
t10211 = 0.2e1 * t10734;
t10435 = pkin(6) * t10734;
t10214 = pkin(2) * t10435;
t9273 = pkin(3) * t9286;
t10217 = pkin(2) * t9273;
t10275 = t9724 * t10628;
t10442 = pkin(3) * t10922;
t9302 = pkin(1) * t10096;
t10511 = t10734 * t9755 + t9302;
t10746 = (-t9274 + t9875) * t9695;
t10899 = 0.2e1 * t9724;
t9161 = pkin(3) * t10743 - t9254;
t9251 = pkin(1) * t10376;
t9263 = pkin(2) * t9272;
t9893 = 0.2e1 * t9694 * t10064;
t9803 = pkin(3) * (pkin(6) * t9999 + t9274) + t10802 * t9893;
t9946 = t9724 * t10092;
t9970 = -t10484 * t9733 + t9476;
t9982 = pkin(2) * t10064;
t10406 = (((-0.4e1 / 0.3e1 + t9695) * t10626 + ((-0.2e1 / 0.3e1 * t9622 + t10503) * t9695 + 0.2e1 / 0.3e1 * t10139 + 0.4e1 / 0.3e1 * t9622 + t10222) * t9732 + (0.4e1 / 0.3e1 * t10791 - 0.2e1 / 0.3e1 * t9580) * t10890) * t10734 * t10839 + (t9631 * t10109 - (t10746 + (t9282 - t10922) * t9733 + 0.3e1 * t9274 - 0.4e1 * t9581 * t10065) * t10791 + ((-pkin(1) * t9274 + t10064 * t10847) * t9733 + (pkin(6) * t10009 - t10163) * t9724 - t9561 * t9286 + (-t9273 * t9695 + (t9893 + (pkin(2) * t10094 - 0.4e1 * t10064) * t9733 + (t9326 + t10009) * t10899 + 0.2e1 * t9308 + t10169) * t9723) * pkin(3)) * t9732 + ((-t10065 * t10628 - t9263) * t9723 - t10217) * t9695 + ((t9161 * t9724 - 0.2e1 * t9982) * t9723 - t10442) * t9733 + (t10065 * t9616 + t9263) * t9723 + t9803) * t9682 + ((-0.3e1 * t9695 + 0.3e1) * t10626 * t10734 - (t9631 * t9302 + (-t9987 + (-t9272 - 0.2e1 * t9308 - 0.2e1 * t9246) * t9724) * t9705 + ((t10850 + 0.4e1 * t10535) * t9733 + (0.4e1 * t9695 - 0.2e1) * pkin(2)) * t10734) * t10791 + (0.2e1 * (t9543 + t10495) * t10337 + (((t9251 - t9158) * t9643 + t9161) * t9705 - t9556 * pkin(2) * t10211) * t9733 + (0.3e1 * t10159 * t9724 - 0.4e1 * t10435) * t9643 + (pkin(6) * t10159 + t10331 * t9756) * t9724 - t9524 * t10734) * t9732 + ((-t10163 * t9705 + 0.2e1 * t10214) * t9723 + pkin(3) * t10511) * t9695 + ((pkin(1) * t10159 + pkin(6) * t10175) * t9723 + pkin(3) * t10175) * t10567 + (t10378 * t10874 - 0.2e1 * t10214) * t9723 - (t10619 * t9308 + t10511) * pkin(3)) * t9706 - t10814 * t10109 - (-t10746 - t9274 + (t9158 * t9733 + (t10846 + t9643) * t10336) * t9724) * t10791 - (-t10814 * t9273 + (pkin(2) * t9946 + t9305 + t9308 + (t9741 * t9694 - (t9741 + t9661) * t9733) * t9705 * t10211 + t10169) * t9723) * t9649 + ((t9263 + (t10275 + t10490) * t10336) * t9723 + t10217) * t9695 + (((pkin(1) * t10009 - t9161) * t9724 + 0.2e1 * t9982) * t9723 + t10442) * t9733 + (-t9263 + (t9525 * t9724 + t10841) * t10336) * t9723 - t9803) / (t9455 + (t9464 * t9732 + t9970) * t9705) * t9368;
t10588 = t9706 * t9733;
t10263 = t9705 * t10588;
t10291 = t9724 * t10651;
t10571 = t9723 * t9732;
t10829 = 0.2e1 * t9723;
t9665 = pkin(1) * t9695;
t9031 = ((pkin(1) * t10108 + t9152) * t9732 - (t9666 + pkin(2)) * t9331) * t9706 + ((t10360 - t9158) * t9724 - t9282 + (t9522 * t9693 + (pkin(6) * t10571 - pkin(2)) * t9733) * t9286) * t9705 + ((-(-t9658 + t9665 + t9756 - t10565) * t10624 - t10291 * t10785) * t9693 + (t9580 * t10263 + (t9678 * t9695 + t10450 / 0.2e1 + t9564) * t9682 * t10829 - t9723 * t9467) * t9732 + (t9665 - t9556) * t10624 + t10821 * t9581 * t10567) * t10734;
t8997 = (-t10743 * t9031 - t10392 - t10406) * t9401;
t10776 = pkin(7) * t8997;
t9011 = t9706 * t9014;
t9285 = t9296 ^ 2 / t9422 ^ 2;
t9655 = pkin(7) * t9724;
t9590 = t9655 + pkin(1);
t9913 = t9350 * t9286;
t10912 = -t9011 * t9596 - t10776 + (0.2e1 * t9913 + t9285) * pkin(2) + (t9590 * t9733 - t10152 - t10692 + t9650) * t9356;
t10151 = pkin(6) * t10265;
t10691 = (pkin(7) * t10555 - pkin(2) + t9653) * t9682;
t10329 = t9583 * t10733;
t10061 = t10891 * t10329;
t10328 = t9682 * t10733;
t10783 = pkin(6) * t9736;
t10875 = t9620 * t9727 + t9675;
t9668 = pkin(1) * t9736;
t9600 = t9668 + t9755;
t9868 = -pkin(1) * t9659 - t9568 - t9620;
t10086 = t9736 * t9333;
t9985 = pkin(2) * t10086;
t10391 = (-t10231 - ((t9288 * t9600 + t9341) * t9706 + (-t9985 - t10878) * t9705 + ((-t9653 + (-t10534 + pkin(1)) * t9736 + t9754) * t9682 + t10891) * t10733) * t10790 + (-(pkin(3) * t9583 * t9699 - t10494 - t9868) * t10328 + ((((t9662 - t9741) * t9644 - t10782) * t9736 + 0.3e1 * t10456) * t10326 + t9565 * t10357 + t9868 * t9288) * t9706 + (t10145 * t9727 - t10783 * t9156) * t9705 + pkin(3) * t10329 * t10630) * t9735 - t9682 * t10061 - (pkin(1) * t9871 - t10875) * t9706 * t10058 + t9523 * t9153 * t9705 + t10061) * t9288;
t10155 = pkin(2) * t10326;
t10008 = 0.2e1 * t10155;
t10104 = t9696 * t10365;
t10371 = t9705 * t9288;
t10158 = pkin(2) * t10371;
t10162 = pkin(1) * t10366;
t10168 = -(pkin(2) * t9996 + t9276 + t9309) * t9699 + t9276;
t10174 = 0.2e1 * t10321;
t10210 = 0.2e1 * t10733;
t10434 = pkin(6) * t10733;
t10213 = pkin(2) * t10434;
t9277 = pkin(3) * t9288;
t10216 = pkin(2) * t9277;
t10274 = t9727 * t10628;
t10440 = pkin(3) * t10921;
t9303 = pkin(1) * t10090;
t10510 = t10733 * t9755 + t9303;
t10745 = (-t9278 + t9874) * t9699;
t10898 = 0.2e1 * t9727;
t9162 = pkin(3) * t10742 - t9255;
t9252 = pkin(1) * t10368;
t9264 = pkin(2) * t9276;
t9892 = 0.2e1 * t9698 * t10056;
t9802 = pkin(3) * (pkin(6) * t9997 + t9278) + t10800 * t9892;
t9945 = t9727 * t10086;
t9969 = -t10483 * t9736 + t9477;
t9981 = pkin(2) * t10056;
t10408 = (((-0.4e1 / 0.3e1 + t9699) * t10625 + ((-0.2e1 / 0.3e1 * t9623 + t10503) * t9699 + 0.2e1 / 0.3e1 * t10136 + 0.4e1 / 0.3e1 * t9623 + t10222) * t9735 + (0.4e1 / 0.3e1 * t10790 - 0.2e1 / 0.3e1 * t9583) * t10891) * t10733 * t10839 + (t9632 * t10104 - (t10745 + (t9279 - t10921) * t9736 + 0.3e1 * t9278 - 0.4e1 * t9584 * t10057) * t10790 + ((-pkin(1) * t9278 + t10056 * t10847) * t9736 + (pkin(6) * t10008 - t10162) * t9727 - t9561 * t9288 + (-t9277 * t9699 + (t9892 + (pkin(2) * t10088 - 0.4e1 * t10056) * t9736 + (t9327 + t10008) * t10898 + 0.2e1 * t9309 + t10168) * t9726) * pkin(3)) * t9735 + ((-t10057 * t10628 - t9264) * t9726 - t10216) * t9699 + ((t9162 * t9727 - 0.2e1 * t9981) * t9726 - t10440) * t9736 + (t10057 * t9616 + t9264) * t9726 + t9802) * t9682 + ((-0.3e1 * t9699 + 0.3e1) * t10625 * t10733 - (t9632 * t9303 + (-t9985 + (-t9276 - 0.2e1 * t9309 - 0.2e1 * t9248) * t9727) * t9705 + ((t10850 + 0.4e1 * t10534) * t9736 + (0.4e1 * t9699 - 0.2e1) * pkin(2)) * t10733) * t10790 + (0.2e1 * (t9543 + t10494) * t10327 + (((t9252 - t9159) * t9644 + t9162) * t9705 - t9557 * pkin(2) * t10210) * t9736 + (0.3e1 * t10158 * t9727 - 0.4e1 * t10434) * t9644 + (pkin(6) * t10158 + t10321 * t9756) * t9727 - t9524 * t10733) * t9735 + ((-t10162 * t9705 + 0.2e1 * t10213) * t9726 + pkin(3) * t10510) * t9699 + ((pkin(1) * t10158 + pkin(6) * t10174) * t9726 + pkin(3) * t10174) * t10555 + (t10371 * t10875 - 0.2e1 * t10213) * t9726 - (t10616 * t9309 + t10510) * pkin(3)) * t9706 - t10811 * t10104 - (-t10745 - t9278 + (t9159 * t9736 + (t10846 + t9644) * t10326) * t9727) * t10790 - (-t10811 * t9277 + (pkin(2) * t9945 + t9306 + t9309 + (t9741 * t9698 - (t9741 + t9662) * t9736) * t9705 * t10210 + t10168) * t9726) * t9652 + ((t9264 + (t10274 + t10490) * t10326) * t9726 + t10216) * t9699 + (((pkin(1) * t10008 - t9162) * t9727 + 0.2e1 * t9981) * t9726 + t10440) * t9736 + (-t9264 + (t9525 * t9727 + t10841) * t10326) * t9726 - t9802) / (t9456 + (t9465 * t9735 + t9969) * t9705) * t9369;
t10586 = t9706 * t9736;
t10262 = t9705 * t10586;
t10290 = t9727 * t10651;
t10559 = t9726 * t9735;
t10827 = 0.2e1 * t9726;
t9667 = pkin(1) * t9699;
t9032 = ((pkin(1) * t10103 + t9153) * t9735 - (t9668 + pkin(2)) * t9333) * t9706 + ((t10357 - t9159) * t9727 - t9279 + (t9523 * t9697 + (pkin(6) * t10559 - pkin(2)) * t9736) * t9288) * t9705 + ((-(-t9659 + t9667 + t9756 - t10553) * t10624 - t10290 * t10783) * t9697 + (t9583 * t10262 + (t9678 * t9699 + t10449 / 0.2e1 + t9565) * t9682 * t10827 - t9726 * t9468) * t9735 + (t9667 - t9557) * t10624 + t10821 * t9584 * t10555) * t10733;
t8995 = (-t10742 * t9032 - t10391 - t10408) * t9397;
t10778 = pkin(7) * t8995;
t9012 = t9706 * t9015;
t9287 = t9297 ^ 2 / t9423 ^ 2;
t9656 = pkin(7) * t9727;
t9591 = t9656 + pkin(1);
t9912 = t9351 * t9288;
t10911 = -t9012 * t9597 - t10778 + (0.2e1 * t9912 + t9287) * pkin(2) + (t9591 * t9736 - t10151 - t10691 + t9653) * t9357;
t10165 = -t9699 + t10652;
t10320 = t9369 * t10703;
t9921 = t9397 * t9339 * t10320;
t10910 = (t10165 + 0.1e1) * t9921;
t10166 = -t9695 + t10653;
t10330 = t9368 * t10704;
t9928 = t9401 * t9338 * t10330;
t10909 = (t10166 + 0.1e1) * t9928;
t10167 = -t9691 + t10654;
t10340 = t9367 * t10705;
t9935 = t9399 * t9337 * t10340;
t10908 = (t10167 + 0.1e1) * t9935;
t10351 = t9727 * t9357;
t10431 = pkin(6) * t10616;
t10773 = pkin(7) * t9699;
t10848 = -0.2e1 * pkin(2);
t10870 = pkin(6) * t10262 + t9662;
t9762 = 0.1e1 / pkin(3) ^ 2;
t9332 = t9339 ^ 2 * t9762 / t9435 ^ 2;
t9320 = pkin(7) * t9332;
t9858 = t9705 * t9921;
t9826 = t9858 * t9755;
t10907 = t9357 * (t10837 * (-t10449 + t9748 + t10773) + pkin(7) - 0.2e1 * t10773 + t10870) + (pkin(2) * t10351 + pkin(7) * t9858) * t10477 - t9727 * t9826 - t9320 - t8995 * t10848 - (-t9600 * t9706 + t10431) * t9015;
t10353 = t9724 * t9356;
t10432 = pkin(6) * t10619;
t10774 = pkin(7) * t9695;
t10871 = pkin(6) * t10263 + t9661;
t9330 = t9338 ^ 2 * t9762 / t9434 ^ 2;
t9318 = pkin(7) * t9330;
t9859 = t9705 * t9928;
t9827 = t9859 * t9755;
t10906 = t9356 * (t10837 * (-t10450 + t9748 + t10774) + pkin(7) - 0.2e1 * t10774 + t10871) + (pkin(2) * t10353 + pkin(7) * t9859) * t10478 - t9724 * t9827 - t9318 - t8997 * t10848 - (-t9599 * t9706 + t10432) * t9014;
t10355 = t9721 * t9355;
t10433 = pkin(6) * t10622;
t10775 = pkin(7) * t9691;
t10872 = pkin(6) * t10264 + t9660;
t9328 = t9337 ^ 2 * t9762 / t9433 ^ 2;
t9316 = pkin(7) * t9328;
t9860 = t9705 * t9935;
t9828 = t9860 * t9755;
t10905 = t9355 * (t10837 * (-t10451 + t9748 + t10775) + pkin(7) - 0.2e1 * t10775 + t10872) + (pkin(2) * t10355 + pkin(7) * t9860) * t10479 - t9721 * t9828 - t9316 - t8996 * t10848 - (-t9598 * t9706 + t10433) * t9013;
t10402 = t9013 * t10622;
t9530 = t9654 + t10894;
t10904 = (-t10894 * t8992 + (pkin(6) * t8996 - t10781) * t9721) * t9705 + 0.2e1 * (-t9530 * t9730 + t10693) * t9013 + (t10402 * t10846 - t8996 * t9598) * t9706;
t10398 = t9014 * t10619;
t9531 = t9655 + t10893;
t10903 = (-t10893 * t8993 + (pkin(6) * t8997 - t10780) * t9724) * t9705 + 0.2e1 * (-t9531 * t9733 + t10692) * t9014 + (t10398 * t10846 - t8997 * t9599) * t9706;
t10394 = t9015 * t10616;
t9532 = t9656 + t10892;
t10902 = (-t10892 * t8994 + (pkin(6) * t8995 - t10779) * t9727) * t9705 + 0.2e1 * (-t9532 * t9736 + t10691) * t9015 + (t10394 * t10846 - t8995 * t9600) * t9706;
t10888 = t9215 * t9367;
t10887 = t9217 * t9368;
t10886 = t9219 * t9369;
t10885 = t9328 - t9283;
t10884 = t9330 - t9285;
t10883 = t9332 - t9287;
t10125 = t9632 * t9644 - pkin(6);
t10606 = t9705 * t9737;
t10853 = t10125 * t10606 + t9728 * t9523;
t10126 = t9631 * t9643 - pkin(6);
t10609 = t9705 * t9734;
t10852 = t10126 * t10609 + t9725 * t9522;
t10127 = t9630 * t9642 - pkin(6);
t10612 = t9705 * t9731;
t10851 = t10127 * t10612 + t9722 * t9521;
t10849 = -0.4e1 * pkin(2);
t10845 = 0.2e1 * pkin(7);
t10844 = -0.2e1 * t9343 + t9329;
t10843 = -0.2e1 * t9344 + t9331;
t10842 = -0.2e1 * t9345 + t9333;
t10835 = -0.2e1 * t9705;
t10834 = 0.2e1 * t9705;
t10833 = -0.2e1 * t9706;
t10832 = -0.2e1 * t9720;
t10830 = -0.2e1 * t9723;
t10828 = -0.2e1 * t9726;
t10826 = -0.2e1 * t9729;
t10825 = -0.2e1 * t9732;
t10824 = -0.2e1 * t9735;
t10823 = -0.4e1 * t9682 + 0.4e1;
t10822 = t10838 + 0.1e1;
t10820 = t10837 - 0.2e1;
t10818 = 0.4e1 * t9689 - 0.2e1;
t10815 = 0.4e1 * t9693 - 0.2e1;
t10812 = 0.4e1 * t9697 - 0.2e1;
t10797 = pkin(2) * t9731;
t10795 = pkin(2) * t9734;
t10793 = pkin(2) * t9737;
t10789 = pkin(6) * t9705;
t9680 = t9705 ^ 2;
t10772 = MDP(4) * t9680;
t10771 = MDP(5) * t9680;
t10770 = MDP(6) * t9705;
t10769 = MDP(7) * t9705;
t10765 = t8971 * t9730;
t10764 = t8972 * t9733;
t10763 = t8973 * t9736;
t10759 = t9013 * t9399;
t10757 = t9013 * t9730;
t10756 = t9014 * t9401;
t10754 = t9014 * t9733;
t10753 = t9015 * t9397;
t10751 = t9015 * t9736;
t10038 = t9722 * t10258;
t10578 = t9721 * t9731;
t10287 = t9636 * t10578;
t10141 = pkin(3) * t10287;
t10282 = t9639 * t10622;
t10575 = t9722 * t9730;
t10641 = t9639 * t9721;
t10649 = t9636 * t9731;
t9774 = -t10127 * t9729 - t10889 * t9720;
t10582 = t9720 * t9731;
t9810 = t10889 * t10582;
t10621 = t9705 * t9722;
t9840 = pkin(6) * t10578 - t10621 * t9466;
t9358 = (-t10649 * t9777 + t9774 * t9639) * t9682 + (-(t10575 * t9636 - 0.2e1 * t10282) * t10792 + (-t10851 * t9636 - t9639 * t9852) * t9729 - (t10641 * t9577 + t9636 * t9810) * t9705) * t9706 + t9689 * t10141 + ((t10038 * t9636 + t9639 * t9691 - t9639) * t9642 - t9639 * pkin(6)) * t9729 + (-t9636 * t9840 + t9639 * t9977) * t9720 - t10141;
t9409 = 0.1e1 / ((t9460 * t9729 + t9971) * t9705 + t9454);
t10741 = t9358 * t9409;
t10036 = t9725 * t10254;
t10566 = t9724 * t9734;
t10285 = t9637 * t10566;
t10138 = pkin(3) * t10285;
t10280 = t9640 * t10619;
t10563 = t9725 * t9733;
t10638 = t9640 * t9724;
t10646 = t9637 * t9734;
t9773 = -t10126 * t9732 - t10890 * t9723;
t10570 = t9723 * t9734;
t9809 = t10890 * t10570;
t10618 = t9705 * t9725;
t9839 = pkin(6) * t10566 - t10618 * t9467;
t9359 = (-t10646 * t9776 + t9773 * t9640) * t9682 + (-(t10563 * t9637 - 0.2e1 * t10280) * t10791 + (-t10852 * t9637 - t9640 * t9851) * t9732 - (t10638 * t9580 + t9637 * t9809) * t9705) * t9706 + t9693 * t10138 + ((t10036 * t9637 + t9640 * t9695 - t9640) * t9643 - t9640 * pkin(6)) * t9732 + (-t9637 * t9839 + t9640 * t9976) * t9723 - t10138;
t9410 = 0.1e1 / ((t9461 * t9732 + t9970) * t9705 + t9455);
t10740 = t9359 * t9410;
t10034 = t9728 * t10250;
t10554 = t9727 * t9737;
t10283 = t9638 * t10554;
t10135 = pkin(3) * t10283;
t10278 = t9641 * t10616;
t10551 = t9728 * t9736;
t10635 = t9641 * t9727;
t10643 = t9638 * t9737;
t9772 = -t10125 * t9735 - t10891 * t9726;
t10558 = t9726 * t9737;
t9808 = t10891 * t10558;
t10615 = t9705 * t9728;
t9838 = pkin(6) * t10554 - t10615 * t9468;
t9360 = (-t10643 * t9775 + t9772 * t9641) * t9682 + (-(t10551 * t9638 - 0.2e1 * t10278) * t10790 + (-t10853 * t9638 - t9641 * t9850) * t9735 - (t10635 * t9583 + t9638 * t9808) * t9705) * t9706 + t9697 * t10135 + ((t10034 * t9638 + t9641 * t9699 - t9641) * t9644 - t9641 * pkin(6)) * t9735 + (-t9638 * t9838 + t9641 * t9975) * t9726 - t10135;
t9411 = 0.1e1 / ((t9462 * t9735 + t9969) * t9705 + t9456);
t10739 = t9360 * t9411;
t10281 = t9639 * t10578;
t10140 = pkin(3) * t10281;
t10288 = t9636 * t10622;
t10640 = t9639 * t9731;
t10650 = t9636 * t9721;
t9361 = (t10640 * t9777 + t9636 * t9774) * t9682 + ((t10575 * t9639 + 0.2e1 * t10288) * t10792 + (t10851 * t9639 - t9636 * t9852) * t9729 + t9705 * (-t10650 * t9577 + t9639 * t9810)) * t9706 - t9689 * t10140 + ((-t10038 * t9639 + t9636 * t9691 - t9636) * t9642 - t9636 * pkin(6)) * t9729 + (t9636 * t9977 + t9639 * t9840) * t9720 + t10140;
t10738 = t9361 * t9409;
t10279 = t9640 * t10566;
t10137 = pkin(3) * t10279;
t10286 = t9637 * t10619;
t10637 = t9640 * t9734;
t10647 = t9637 * t9724;
t9362 = (t10637 * t9776 + t9637 * t9773) * t9682 + ((t10563 * t9640 + 0.2e1 * t10286) * t10791 + (t10852 * t9640 - t9637 * t9851) * t9732 + t9705 * (-t10647 * t9580 + t9640 * t9809)) * t9706 - t9693 * t10137 + ((-t10036 * t9640 + t9637 * t9695 - t9637) * t9643 - t9637 * pkin(6)) * t9732 + (t9637 * t9976 + t9640 * t9839) * t9723 + t10137;
t10737 = t9362 * t9410;
t10277 = t9641 * t10554;
t10134 = pkin(3) * t10277;
t10284 = t9638 * t10616;
t10634 = t9641 * t9737;
t10644 = t9638 * t9727;
t9363 = (t10634 * t9775 + t9638 * t9772) * t9682 + ((t10551 * t9641 + 0.2e1 * t10284) * t10790 + (t10853 * t9641 - t9638 * t9850) * t9735 + t9705 * (-t10644 * t9583 + t9641 * t9808)) * t9706 - t9697 * t10134 + ((-t10034 * t9641 + t9638 * t9699 - t9638) * t9644 - t9638 * pkin(6)) * t9735 + (t9638 * t9975 + t9641 * t9838) * t9726 + t10134;
t10736 = t9363 * t9411;
t10298 = t10897 * t10649;
t10031 = t9578 * t10298;
t10048 = t9578 * t10287;
t10053 = t9731 * t10304;
t10301 = t9722 * t10684;
t10545 = t9731 * t9741;
t10242 = t9706 * t10545;
t10316 = (t10897 * t10242 - t9722 * t10690 / 0.2e1) * t9691 * t9705;
t10665 = t10897 * t9639;
t10675 = t9563 * t9722;
t9457 = t9675 - t10304;
t10473 = -0.2e1 * t10651;
t9995 = t10897 * t9691 * t10473;
t9370 = -0.2e1 * t9636 * t10316 + (((t10053 * t9636 - t10665 * t9578) * t9706 + t9636 * t10301) * t9705 + (t10304 * t9639 + t10031) * t9682 - t10031 + t9457 * t9639) * t9730 - t9563 * t10665 + (t9639 * t9995 + ((-t10641 * t9578 + t10298) * t9706 + t9636 * t10675) * t9705 + (t10048 + t10665) * t9682 - t10048) * t9741;
t10732 = t9370 * t9424;
t10297 = t10897 * t10640;
t10030 = t9578 * t10297;
t10047 = t9578 * t10281;
t10666 = t10897 * t9636;
t9371 = 0.2e1 * t9639 * t10316 + (((-t10053 * t9639 - t10666 * t9578) * t9706 - t9639 * t10301) * t9705 + (t10304 * t9636 - t10030) * t9682 + t10030 + t9457 * t9636) * t9730 - t9563 * t10666 + (t9636 * t9995 - ((t10650 * t9578 + t10297) * t9706 + t9639 * t10675) * t9705 - (t10047 - t10666) * t9682 + t10047) * t9741;
t10731 = t9371 * t9424;
t10296 = t10896 * t10646;
t10028 = t9581 * t10296;
t10046 = t9581 * t10285;
t10051 = t9734 * t10303;
t10300 = t9725 * t10682;
t10541 = t9734 * t9741;
t10241 = t9706 * t10541;
t10315 = (t10896 * t10241 - t9725 * t10689 / 0.2e1) * t9695 * t9705;
t10662 = t10896 * t9640;
t10674 = t9564 * t9725;
t9458 = t9675 - t10303;
t9994 = t10896 * t9695 * t10473;
t9372 = -0.2e1 * t9637 * t10315 + (((t10051 * t9637 - t10662 * t9581) * t9706 + t9637 * t10300) * t9705 + (t10303 * t9640 + t10028) * t9682 - t10028 + t9458 * t9640) * t9733 - t9564 * t10662 + (t9640 * t9994 + ((-t10638 * t9581 + t10296) * t9706 + t9637 * t10674) * t9705 + (t10046 + t10662) * t9682 - t10046) * t9741;
t10730 = t9372 * t9426;
t10295 = t10896 * t10637;
t10027 = t9581 * t10295;
t10045 = t9581 * t10279;
t10663 = t10896 * t9637;
t9373 = 0.2e1 * t9640 * t10315 + (((-t10051 * t9640 - t10663 * t9581) * t9706 - t9640 * t10300) * t9705 + (t10303 * t9637 - t10027) * t9682 + t10027 + t9458 * t9637) * t9733 - t9564 * t10663 + (t9637 * t9994 - ((t10647 * t9581 + t10295) * t9706 + t9640 * t10674) * t9705 - (t10045 - t10663) * t9682 + t10045) * t9741;
t10729 = t9373 * t9426;
t10294 = t10895 * t10643;
t10026 = t9584 * t10294;
t10044 = t9584 * t10283;
t10049 = t9737 * t10302;
t10299 = t9728 * t10680;
t10537 = t9737 * t9741;
t10240 = t9706 * t10537;
t10314 = (t10895 * t10240 - t9728 * t10688 / 0.2e1) * t9699 * t9705;
t10659 = t10895 * t9641;
t10673 = t9565 * t9728;
t9459 = t9675 - t10302;
t9993 = t10895 * t9699 * t10473;
t9374 = -0.2e1 * t9638 * t10314 + (((t10049 * t9638 - t10659 * t9584) * t9706 + t9638 * t10299) * t9705 + (t10302 * t9641 + t10026) * t9682 - t10026 + t9459 * t9641) * t9736 - t9565 * t10659 + (t9641 * t9993 + ((-t10635 * t9584 + t10294) * t9706 + t9638 * t10673) * t9705 + (t10044 + t10659) * t9682 - t10044) * t9741;
t10728 = t9374 * t9428;
t10293 = t10895 * t10634;
t10025 = t9584 * t10293;
t10043 = t9584 * t10277;
t10660 = t10895 * t9638;
t9375 = 0.2e1 * t9641 * t10314 + (((-t10049 * t9641 - t10660 * t9584) * t9706 - t9641 * t10299) * t9705 + (t10302 * t9638 - t10025) * t9682 + t10025 + t9459 * t9638) * t9736 - t9565 * t10660 + (t9638 * t9993 - ((t10644 * t9584 + t10293) * t9706 + t9641 * t10673) * t9705 - (t10043 - t10660) * t9682 + t10043) * t9741;
t10727 = t9375 * t9428;
t10219 = t10585 * t9755;
t10581 = t9721 * t9722;
t10248 = t9706 * t10581;
t10546 = t9731 * t9558;
t10672 = t9578 * t9705;
t10573 = t9722 * t9741;
t9508 = t10573 * t9706 + t10797;
t9514 = -pkin(2) * t10806 - pkin(6) * t10605;
t10726 = ((t9722 * t10219 + 0.2e1 * t9508 * t9646 + (t9645 + t10628) * t9731) * t9691 + (-t10248 * t9645 + ((-0.2e1 * t10454 + t10672) * t9722 + t10546) * t9646 + (pkin(2) * t10672 - t10276 * t9706) * t9722 + pkin(2) * t10546) * t9730 + (t9731 * t9563 + (t10622 * t9578 - t10897 * t9706) * t9722) * t9741) / ((pkin(1) * t10448 + t9514 * t9721) * t9729 + t9837);
t10569 = t9724 * t9725;
t10246 = t9706 * t10569;
t10542 = t9734 * t9559;
t10670 = t9581 * t9705;
t10561 = t9725 * t9741;
t9509 = t10561 * t9706 + t10795;
t10725 = ((t9725 * t10219 + 0.2e1 * t9509 * t9649 + (t9648 + t10628) * t9734) * t9695 + (-t10246 * t9648 + ((-0.2e1 * t10453 + t10670) * t9725 + t10542) * t9649 + (pkin(2) * t10670 - t10275 * t9706) * t9725 + pkin(2) * t10542) * t9733 + (t9734 * t9564 + (t10619 * t9581 - t10896 * t9706) * t9725) * t9741) / ((pkin(1) * t10447 + t9514 * t9724) * t9732 + t9836);
t10557 = t9727 * t9728;
t10244 = t9706 * t10557;
t10538 = t9737 * t9560;
t10668 = t9584 * t9705;
t10549 = t9728 * t9741;
t9510 = t10549 * t9706 + t10793;
t10724 = ((t9728 * t10219 + 0.2e1 * t9510 * t9652 + (t9651 + t10628) * t9737) * t9699 + (-t10244 * t9651 + ((-0.2e1 * t10452 + t10668) * t9728 + t10538) * t9652 + (pkin(2) * t10668 - t10274 * t9706) * t9728 + pkin(2) * t10538) * t9736 + (t9737 * t9565 + (t10616 * t9584 - t10895 * t9706) * t9728) * t9741) / ((pkin(1) * t10446 + t9514 * t9727) * t9735 + t9835);
t10445 = pkin(3) * t10582;
t10547 = t9730 * t9731;
t10598 = t9706 * t9722;
t9379 = ((-t10127 * t10598 - t10445 * t10579) * t9729 - (t10889 * t10598 + t9731 * (-t10632 * t9741 + t10894 * t9721)) * t9720) * t9705 + (t10547 * t9706 + t10581 * t10822) * t10792 + (t10598 * t9526 + t9521 * t9731) * t10591 + t9722 * t9577 * t10292;
t10723 = t9379 * t9409;
t10443 = pkin(3) * t10570;
t10543 = t9733 * t9734;
t10595 = t9706 * t9725;
t9380 = ((-t10126 * t10595 - t10443 * t10567) * t9732 - (t10890 * t10595 + t9734 * (-t10631 * t9741 + t10893 * t9724)) * t9723) * t9705 + (t10543 * t9706 + t10569 * t10822) * t10791 + (t10595 * t9527 + t9522 * t9734) * t10589 + t9725 * t9580 * t10291;
t10722 = t9380 * t9410;
t10441 = pkin(3) * t10558;
t10539 = t9736 * t9737;
t10592 = t9706 * t9728;
t9381 = ((-t10125 * t10592 - t10441 * t10555) * t9735 - (t10891 * t10592 + t9737 * (-t10630 * t9741 + t10892 * t9727)) * t9726) * t9705 + (t10539 * t9706 + t10557 * t10822) * t10790 + (t10592 * t9528 + t9523 * t9737) * t10587 + t9728 * t9583 * t10290;
t10721 = t9381 * t9411;
t9478 = t10578 * t9706 + t10575;
t9807 = t10445 * t9705 - (t10797 * t9706 + t10573) * t9721 + (-pkin(2) * t9722 + t10242) * t9730;
t9382 = -(t9478 * t9639 + t10288) * t10792 + (t9636 * t9798 + t9639 * t9807) * t9729 + (t10612 * t9639 - t9636 * t9706) * t10804;
t10720 = t9382 * t9399;
t9383 = (t9478 * t9636 - t10282) * t10792 + (-t9636 * t9807 + t9639 * t9798) * t9729 - (t10612 * t9636 + t9639 * t9706) * t10804;
t10719 = t9383 * t9399;
t9479 = t10566 * t9706 + t10563;
t9806 = t10443 * t9705 - (t10795 * t9706 + t10561) * t9724 + (-pkin(2) * t9725 + t10241) * t9733;
t9384 = -(t9479 * t9640 + t10286) * t10791 + (t9637 * t9797 + t9640 * t9806) * t9732 + (t10609 * t9640 - t9637 * t9706) * t10802;
t10718 = t9384 * t9401;
t9385 = (t9479 * t9637 - t10280) * t10791 + (-t9637 * t9806 + t9640 * t9797) * t9732 - (t10609 * t9637 + t9640 * t9706) * t10802;
t10717 = t9385 * t9401;
t9480 = t10554 * t9706 + t10551;
t9805 = t10441 * t9705 - (t10793 * t9706 + t10549) * t9727 + (-pkin(2) * t9728 + t10240) * t9736;
t9386 = -(t9480 * t9641 + t10284) * t10790 + (t9638 * t9796 + t9641 * t9805) * t9735 + (t10606 * t9641 - t9638 * t9706) * t10800;
t10716 = t9386 * t9397;
t9387 = (t9480 * t9638 - t10278) * t10790 + (-t9638 * t9805 + t9641 * t9796) * t9735 - (t10606 * t9638 + t9641 * t9706) * t10800;
t10715 = t9387 * t9397;
t10252 = t9726 * t10615;
t9432 = -(-t10244 + t10539) * t10790 + (-pkin(3) * t10252 - t9510 * t9736 - t9727 * (-pkin(2) * t10592 + t10537)) * t9735 - pkin(2) * t10252;
t10714 = t9397 * t9432;
t10713 = t9398 * t9736;
t10260 = t9720 * t10621;
t9430 = -(-t10248 + t10547) * t10792 + (-pkin(3) * t10260 - t9508 * t9730 - t9721 * (-pkin(2) * t10598 + t10545)) * t9729 - pkin(2) * t10260;
t10712 = t9399 * t9430;
t10711 = t9400 * t9730;
t10256 = t9723 * t10618;
t9431 = -(-t10246 + t10543) * t10791 + (-pkin(3) * t10256 - t9509 * t9733 - t9724 * (-pkin(2) * t10595 + t10541)) * t9732 - pkin(2) * t10256;
t10710 = t9401 * t9431;
t10709 = t9402 * t9733;
t10708 = t9409 * t9721;
t10707 = t9410 * t9724;
t10706 = t9411 * t9727;
t10614 = t9705 * t9729;
t10611 = t9705 * t9732;
t10608 = t9705 * t9735;
t10603 = t9706 * t8995;
t10602 = t9706 * t8996;
t10601 = t9706 * t8997;
t10584 = t9720 * t9721;
t10572 = t9723 * t9724;
t10560 = t9726 * t9727;
t10307 = t9534 * t10624;
t10421 = t10821 * pkin(6);
t9112 = 0.2e1 * t9534 * t10386 + (t10307 - t10421) * t10735;
t10533 = (-pkin(6) * t10548 + t9530 * t9720) * t10758 + t10345 * t9112 + t10913 * t9729;
t10323 = t9735 * t10733;
t10305 = t9538 * t10624;
t9114 = 0.2e1 * t9538 * t10371 + (t10305 - t10421) * t10733;
t10532 = -t9532 * t9735 * t10752 - t10323 * t9114 + (-t10783 * t10752 + t10911) * t9726;
t10343 = t9729 * t10735;
t10531 = -t9530 * t9729 * t10758 - t10343 * t9112 + (-t10787 * t10758 + t10913) * t9720;
t10333 = t9732 * t10734;
t10306 = t9536 * t10624;
t9113 = 0.2e1 * t9536 * t10378 + (t10306 - t10421) * t10734;
t10530 = -t9531 * t9732 * t10755 - t10333 * t9113 + (-t10785 * t10755 + t10912) * t9723;
t10529 = (-pkin(6) * t10544 + t9531 * t9723) * t10755 + t10335 * t9113 + t10912 * t9732;
t10528 = (-pkin(6) * t10540 + t9532 * t9726) * t10752 + t10325 * t9114 + t10911 * t9735;
t10524 = t10509 * t9349 - 0.2e1 * t9952;
t10523 = t10508 * t9350 - 0.2e1 * t9950;
t10522 = t10507 * t9351 - 0.2e1 * t9948;
t10506 = t9355 - t9283;
t10505 = t9356 - t9285;
t10504 = t9357 - t9287;
t10476 = -0.2e1 * t9284;
t10475 = -0.2e1 * t9286;
t10474 = -0.2e1 * t9288;
t10472 = -0.2e1 * t10624;
t10469 = -0.2e1 * t10583;
t10468 = -0.2e1 * t10571;
t10467 = -0.2e1 * t10559;
t10466 = t10820 * pkin(6);
t9172 = t9283 + t9328;
t10439 = t9172 * t10789;
t9173 = t9285 + t9330;
t10438 = t9173 * t10789;
t9174 = t9287 + t9332;
t10437 = t9174 * t10789;
t8980 = t9010 + (-t10407 / 0.2e1 - t10393 / 0.2e1 + t9033 * t10230) * t9399;
t10414 = t8980 * t10622;
t8981 = t9011 + (-t10406 / 0.2e1 - t10392 / 0.2e1 + t9031 * t10229) * t9401;
t10413 = t8981 * t10619;
t8982 = t9012 + (-t10408 / 0.2e1 - t10391 / 0.2e1 + t9032 * t10228) * t9397;
t10412 = t8982 * t10616;
t10411 = t8995 * t10607;
t10410 = t8996 * t10613;
t10409 = t8997 * t10610;
t10405 = t9721 ^ 2 * t10759;
t10404 = t9013 * t10708;
t10403 = t9409 * t10757;
t10401 = t9724 ^ 2 * t10756;
t10400 = t9014 * t10707;
t10399 = t9410 * t10754;
t10397 = t9727 ^ 2 * t10753;
t10396 = t9015 * t10706;
t10395 = t9411 * t10751;
t10390 = t9409 * t10888;
t10389 = t9410 * t10887;
t10388 = t9411 * t10886;
t10387 = t9367 * t9284;
t10379 = t9368 * t9286;
t10372 = t9369 * t9288;
t10354 = t9364 * t10711;
t10352 = t9365 * t10709;
t10350 = t9366 * t10713;
t10319 = t9379 * t10708;
t10318 = t9380 * t10707;
t10317 = t9381 * t10706;
t10273 = t9691 * t9355;
t10272 = t9695 * t9356;
t10271 = t9699 * t9357;
t10261 = t9705 * t10584;
t10259 = t9705 * t10580;
t10257 = t9705 * t10572;
t10255 = t9705 * t10568;
t10253 = t9705 * t10560;
t10251 = t9705 * t10556;
t10239 = t9720 * t10580;
t10238 = t9723 * t10568;
t10237 = t9726 * t10556;
t10087 = t9735 * t9333;
t8919 = -t8994 * t9597 * t9706 + ((-pkin(6) * t8994 - t10778) * t9736 + t8995 * t10799) * t9705 + (-0.2e1 * t10305 + t10466) * t9015;
t9102 = (-pkin(7) * t9287 + t10846 * t9948 + t9320) * t9727 + pkin(1) * t9332;
t9111 = t9320 + (pkin(1) * t9174 + t9826) * t9727;
t9132 = t9252 - t9165;
t9984 = pkin(2) * t10087;
t9150 = t10369 * t10845 + t9984;
t9168 = t9276 - t9321;
t9225 = t9327 + t10155;
t9855 = t9591 * t9921;
t10107 = t9369 * t10368;
t9949 = t9397 * t10107;
t9954 = t9165 * t10057;
t10209 = t9397 * (t10902 * t9726 - t9735 * t8919 + 0.2e1 * (t9150 * t9699 + (pkin(7) * t10087 + t10369 * t10848) * t10555 - t9984 + t9726 * t9165) * t10328 + ((t10058 * t9168 - t10367 * t9225) * t10477 + (t9171 + 0.2e1 * t9954) * t9735 + t9726 * t9111) * t9706 - 0.2e1 * t9150 * t10327 + (t9855 * t10824 + t9726 * t10437 + (t10608 * t10883 + 0.4e1 * t9726 * t9949) * pkin(2)) * t9736 + t9102 * t10608 + 0.2e1 * t9132 * t10325);
t10128 = pkin(7) * t10367;
t9909 = t10089 / 0.2e1;
t9978 = pkin(2) * t10089;
t10208 = t9397 * (-t10902 * t9735 - t9726 * t8919 - 0.4e1 * ((t10128 - t9978 / 0.2e1) * t9699 - (pkin(7) * t9909 + t10129) * t10555 + (t9324 / 0.2e1 - t9275 / 0.2e1) * t9735 + pkin(2) * t9909) * t10328 + ((-t10323 * t9168 * t9705 - t10369 * t9225) * t10477 - t9111 * t9735 + (-t9877 + t9954) * t10827) * t9706 + (-0.2e1 * t9978 + 0.4e1 * t10128) * t10327 + ((t10849 * t9949 - t10437) * t9735 + (t9855 + (t9287 / 0.2e1 - t9332 / 0.2e1) * t10805) * t10828) * t9736 - 0.2e1 * t9132 * t10323 + t9102 * t10617);
t10033 = t10607 * t9287;
t10106 = (t9345 + t9333) * t10370;
t8952 = t10165 * t9015 - t10603 + t9015;
t9957 = t9736 * t10121;
t9081 = t9858 * t10833 + (t9957 - t10090) * t9288;
t10207 = t9397 * (t10412 * t10812 + t10467 * t8952 + (0.2e1 * t10033 + 0.4e1 * t10106) * t9697 + 0.4e1 * t9081 * t10237 - 0.2e1 * t10106 - t10033 - 0.2e1 * t10813 * t10910);
t10035 = t9705 * t10237;
t8991 = t9012 + t8995;
t9196 = t9351 + t9288 / 0.2e1;
t10206 = t9397 * (0.2e1 * t10035 * t8982 + t8952 * t9697 + t8991 * t9706 + (-t10106 - t10033 / 0.2e1 + t10910) * t10467 + (-t10090 * t9196 - t9081 * t9697) * t10898);
t9841 = t9921 * t10477;
t9115 = -t10883 * t9705 + t9841;
t9141 = t9705 * t9841 - t9332;
t9619 = t9699 - 0.1e1 / 0.2e1;
t10205 = t9397 * (-t9735 * t10411 + t8994 * (t10253 - t10587) + (t10472 * t9735 - t10560 * t10820) * t10751 + t9115 * t10556 + t9141 * t10594 + (t9682 * t9945 * t10824 + (t10823 * t9619 * t9726 + t10243 * t10834) * t9288) * t10733);
t10204 = t9397 * (-t9726 * t10411 - t8994 * (t10251 + t10594) + (t10556 * t10820 - 0.2e1 * t10266) * t10751 + t9115 * t10560 - t9141 * t10587 + (-((t10474 * t9699 + t9288) * t9735 + t9726 * t9945) * t9682 + t10103 * t10624 - 0.2e1 * t9619 * t10367) * t10210);
t10099 = t9729 * t9329;
t8917 = -t8992 * t9595 * t9706 + ((-pkin(6) * t8992 - t10777) * t9730 + t8996 * t10803) * t9705 + (-0.2e1 * t10307 + t10466) * t9013;
t9100 = (-pkin(7) * t9283 + t10846 * t9952 + t9316) * t9721 + pkin(1) * t9328;
t9109 = t9316 + (pkin(1) * t9172 + t9828) * t9721;
t9130 = t9250 - t9163;
t9988 = pkin(2) * t10099;
t9148 = t10384 * t10845 + t9988;
t9166 = t9267 - t9317;
t9223 = t9325 + t10157;
t9857 = t9589 * t9935;
t10117 = t9367 * t10383;
t9953 = t9399 * t10117;
t9956 = t9163 * t10073;
t10203 = t9399 * (t10904 * t9720 - t8917 * t9729 + 0.2e1 * (t9148 * t9691 + (pkin(7) * t10099 + t10384 * t10848) * t10579 - t9988 + t9720 * t9163) * t10348 + ((t10074 * t9166 - t10382 * t9223) * t10479 + (t9169 + 0.2e1 * t9956) * t9729 + t9720 * t9109) * t9706 - 0.2e1 * t9148 * t10347 + (t9857 * t10826 + t9720 * t10439 + (t10614 * t10885 + 0.4e1 * t9720 * t9953) * pkin(2)) * t9730 + t9100 * t10614 + 0.2e1 * t9130 * t10345);
t10132 = pkin(7) * t10382;
t9911 = t10101 / 0.2e1;
t9980 = pkin(2) * t10101;
t10202 = t9399 * (-t10904 * t9729 - t8917 * t9720 - 0.4e1 * ((t10132 - t9980 / 0.2e1) * t9691 - (pkin(7) * t9911 + t10133) * t10579 + (t9322 / 0.2e1 - t9266 / 0.2e1) * t9729 + pkin(2) * t9911) * t10348 + ((-t10343 * t9166 * t9705 - t10384 * t9223) * t10479 - t9109 * t9729 + (-t9879 + t9956) * t10831) * t9706 + (-0.2e1 * t9980 + 0.4e1 * t10132) * t10347 + ((t10849 * t9953 - t10439) * t9729 + (t9857 + (t9283 / 0.2e1 - t9328 / 0.2e1) * t10805) * t10832) * t9730 - 0.2e1 * t9130 * t10343 + t9100 * t10623);
t10032 = t10613 * t9283;
t10116 = (t9343 + t9329) * t10385;
t8950 = t10167 * t9013 - t10602 + t9013;
t9959 = t9730 * t10123;
t9079 = t9860 * t10833 + (t9959 - t10102) * t9284;
t10201 = t9399 * (t10414 * t10818 + t10469 * t8950 + (0.2e1 * t10032 + 0.4e1 * t10116) * t9689 + 0.4e1 * t9079 * t10239 - 0.2e1 * t10116 - t10032 - 0.2e1 * t10819 * t10908);
t10039 = t9705 * t10239;
t8987 = t9010 + t8996;
t9194 = t9349 + t9284 / 0.2e1;
t10200 = t9399 * (0.2e1 * t10039 * t8980 + t8950 * t9689 + t8987 * t9706 + (-t10116 - t10032 / 0.2e1 + t10908) * t10469 + (-t10102 * t9194 - t9079 * t9689) * t10900);
t9843 = t9935 * t10479;
t9116 = -t10885 * t9705 + t9843;
t9139 = t9705 * t9843 - t9328;
t9617 = t9691 - 0.1e1 / 0.2e1;
t10199 = t9399 * (-t9729 * t10410 + t8992 * (t10261 - t10591) + (t10472 * t9729 - t10584 * t10820) * t10757 + t9116 * t10580 + t9139 * t10600 + (t9682 * t9947 * t10826 + (t10823 * t9617 * t9720 + t10247 * t10834) * t9284) * t10735);
t10198 = t9399 * (-t9720 * t10410 - t8992 * (t10259 + t10600) + (t10580 * t10820 - 0.2e1 * t10270) * t10757 + t9116 * t10584 - t9139 * t10591 + (-((t10476 * t9691 + t9284) * t9729 + t9720 * t9947) * t9682 + t10113 * t10624 - 0.2e1 * t9617 * t10382) * t10212);
t10093 = t9732 * t9331;
t8918 = -t8993 * t9596 * t9706 + ((-pkin(6) * t8993 - t10776) * t9733 + t8997 * t10801) * t9705 + (-0.2e1 * t10306 + t10466) * t9014;
t9101 = (-pkin(7) * t9285 + t10846 * t9950 + t9318) * t9724 + pkin(1) * t9330;
t9110 = t9318 + (pkin(1) * t9173 + t9827) * t9724;
t9131 = t9251 - t9164;
t9986 = pkin(2) * t10093;
t9149 = t10377 * t10845 + t9986;
t9167 = t9272 - t9319;
t9224 = t9326 + t10156;
t9856 = t9590 * t9928;
t10112 = t9368 * t10376;
t9951 = t9401 * t10112;
t9955 = t9164 * t10065;
t10197 = t9401 * (t10903 * t9723 - t8918 * t9732 + 0.2e1 * (t9149 * t9695 + (pkin(7) * t10093 + t10377 * t10848) * t10567 - t9986 + t9723 * t9164) * t10338 + ((t10066 * t9167 - t10375 * t9224) * t10478 + (t9170 + 0.2e1 * t9955) * t9732 + t9723 * t9110) * t9706 - 0.2e1 * t9149 * t10337 + (t9856 * t10825 + t9723 * t10438 + (t10611 * t10884 + 0.4e1 * t9723 * t9951) * pkin(2)) * t9733 + t9101 * t10611 + 0.2e1 * t9131 * t10335);
t10130 = pkin(7) * t10375;
t9910 = t10095 / 0.2e1;
t9979 = pkin(2) * t10095;
t10196 = t9401 * (-t10903 * t9732 - t8918 * t9723 - 0.4e1 * ((t10130 - t9979 / 0.2e1) * t9695 - (pkin(7) * t9910 + t10131) * t10567 + (t9323 / 0.2e1 - t9271 / 0.2e1) * t9732 + pkin(2) * t9910) * t10338 + ((-t10333 * t9167 * t9705 - t10377 * t9224) * t10478 - t9110 * t9732 + (-t9878 + t9955) * t10829) * t9706 + (-0.2e1 * t9979 + 0.4e1 * t10130) * t10337 + ((t10849 * t9951 - t10438) * t9732 + (t9856 + (t9285 / 0.2e1 - t9330 / 0.2e1) * t10805) * t10830) * t9733 - 0.2e1 * t9131 * t10333 + t9101 * t10620);
t10029 = t10610 * t9285;
t10111 = (t9344 + t9331) * t10249;
t8951 = t10166 * t9014 - t10601 + t9014;
t9958 = t9733 * t10122;
t9080 = t9859 * t10833 + (t9958 - t10096) * t9286;
t10195 = t9401 * (t10413 * t10815 + t10468 * t8951 + (0.2e1 * t10029 + 0.4e1 * t10111) * t9693 + 0.4e1 * t9080 * t10238 - 0.2e1 * t10111 - t10029 - 0.2e1 * t10816 * t10909);
t10037 = t9705 * t10238;
t8989 = t9011 + t8997;
t9195 = t9350 + t9286 / 0.2e1;
t10194 = t9401 * (0.2e1 * t10037 * t8981 + t8951 * t9693 + t8989 * t9706 + (-t10111 - t10029 / 0.2e1 + t10909) * t10468 + (-t10096 * t9195 - t9080 * t9693) * t10899);
t9842 = t9928 * t10478;
t9117 = -t10884 * t9705 + t9842;
t9140 = t9705 * t9842 - t9330;
t9618 = t9695 - 0.1e1 / 0.2e1;
t10193 = t9401 * (-t9732 * t10409 + t8993 * (t10257 - t10589) + (t10472 * t9732 - t10572 * t10820) * t10754 + t9117 * t10568 + t9140 * t10597 + (t9682 * t9946 * t10825 + (t10823 * t9618 * t9723 + t10245 * t10834) * t9286) * t10734);
t10192 = t9401 * (-t9723 * t10409 - t8993 * (t10255 + t10597) + (t10568 * t10820 - 0.2e1 * t10268) * t10754 + t9117 * t10572 - t9140 * t10589 + (-((t10475 * t9695 + t9286) * t9732 + t9723 * t9946) * t9682 + t10108 * t10624 - 0.2e1 * t9618 * t10375) * t10211);
t10191 = t9409 * (-t10905 * t9720 + t10919 * t9729);
t10190 = t9409 * (t10905 * t9729 + t10919 * t9720);
t10071 = t9721 * t10343;
t9178 = t9959 + 0.2e1 * t10102;
t10189 = t9409 * (t10402 * t10819 + 0.2e1 * t10583 * t8987 + ((t10354 * t10835 + 0.4e1 * t9935) * t9706 + 0.4e1 * t9952) * t9689 + t9178 * t10071 * t10832 + t10524);
t10188 = t9410 * (-t10906 * t9723 + t10918 * t9732);
t10187 = t9410 * (t10906 * t9732 + t10918 * t9723);
t10063 = t9724 * t10333;
t9179 = t9958 + 0.2e1 * t10096;
t10186 = t9410 * (t10398 * t10816 + 0.2e1 * t10571 * t8989 + ((t10352 * t10835 + 0.4e1 * t9928) * t9706 + 0.4e1 * t9950) * t9693 + t9179 * t10063 * t10830 + t10523);
t10185 = t9411 * (-t10907 * t9726 + t10917 * t9735);
t10184 = t9411 * (t10907 * t9735 + t10917 * t9726);
t10055 = t9727 * t10323;
t9180 = t9957 + 0.2e1 * t10090;
t10183 = t9411 * (t10394 * t10813 + 0.2e1 * t10559 * t8991 + ((t10350 * t10835 + 0.4e1 * t9921) * t9706 + 0.4e1 * t9948) * t9697 + t9180 * t10055 * t10828 + t10522);
t10182 = t9424 * t10533;
t10181 = t9424 * t10531;
t10180 = t9426 * t10530;
t10179 = t9426 * t10529;
t10178 = t9428 * t10532;
t10177 = t9428 * t10528;
t10173 = 0.2e1 * t10273;
t10172 = 0.2e1 * t10272;
t10171 = 0.2e1 * t10271;
t10084 = t9409 * t10355;
t10083 = t9409 * t10354;
t10082 = t9410 * t10353;
t10081 = t9410 * t10352;
t10080 = t9411 * t10351;
t10079 = t9411 * t10350;
t10078 = t9424 * t10342;
t10070 = t9426 * t10332;
t10062 = t9428 * t10322;
t8965 = t10259 * t9013 + t8987 * t9720;
t9968 = t9409 * (t8965 * t9720 - t10524 * t10583 + (t9178 * t9689 - t10102) * t10344);
t9289 = -t9355 + t10173;
t9780 = t9289 * t9682 + t9139 + t9355;
t9967 = t9409 * ((-t9780 + t10173) * t9729 + t10916 * t9720);
t8966 = t10255 * t9014 + t8989 * t9723;
t9966 = t9410 * (t8966 * t9723 - t10523 * t10571 + (t9179 * t9693 - t10096) * t10334);
t9347 = -0.2e1 * t10272;
t9290 = -t9356 + t10172;
t9779 = t9290 * t9682 + t9140 + t9356;
t9965 = t9410 * ((t9347 + t9779) * t9723 + t10915 * t9732);
t9964 = t9410 * ((-t9779 + t10172) * t9732 + t10915 * t9723);
t8967 = t10251 * t9015 + t8991 * t9726;
t9963 = t9411 * (t8967 * t9726 - t10522 * t10559 + (t9180 * t9697 - t10090) * t10324);
t9348 = -0.2e1 * t10271;
t9291 = -t9357 + t10171;
t9778 = t9291 * t9682 + t9141 + t9357;
t9962 = t9411 * ((t9348 + t9778) * t9726 + t10914 * t9735);
t9961 = t9411 * ((-t9778 + t10171) * t9735 + t10914 * t9726);
t9346 = -0.2e1 * t10273;
t9960 = ((t9346 + t9780) * t9720 + t10916 * t9729) * t9409;
t9944 = t9721 * t10083;
t9942 = t9724 * t10081;
t9940 = t9727 * t10079;
t9938 = t9370 * t10078;
t9937 = t9371 * t10078;
t9936 = t10342 * t10726;
t9931 = t9372 * t10070;
t9930 = t9373 * t10070;
t9929 = t10332 * t10725;
t9924 = t9374 * t10062;
t9923 = t9375 * t10062;
t9922 = t10322 * t10724;
t8983 = t10603 / 0.2e1 + t9015;
t9198 = t10370 / 0.2e1 + t10733;
t9867 = t9397 * (t10474 * (-t10431 * t9196 + t9198 * t9668) - 0.2e1 * t10428 * t8982 - 0.2e1 * t8983 * t9662);
t9866 = t9397 * (t10474 * (t10428 * t9196 + t9198 * t9662) + t10412 * t10847 + 0.2e1 * t8983 * t9668);
t8984 = t10602 / 0.2e1 + t9013;
t9197 = t10385 / 0.2e1 + t10735;
t9865 = t9399 * (t10476 * (-t10433 * t9194 + t9197 * t9664) - 0.2e1 * t10430 * t8980 - 0.2e1 * t8984 * t9660);
t9864 = t9399 * (t10476 * (t10430 * t9194 + t9197 * t9660) + t10414 * t10847 + 0.2e1 * t8984 * t9664);
t8985 = t10601 / 0.2e1 + t9014;
t9193 = t10249 / 0.2e1 + t10734;
t9863 = t9401 * (t10475 * (-t10432 * t9195 + t9193 * t9666) - 0.2e1 * t10429 * t8981 - 0.2e1 * t8985 * t9661);
t9862 = t9401 * (t10475 * (t10429 * t9195 + t9193 * t9661) + t10413 * t10847 + 0.2e1 * t8985 * t9666);
t9822 = t9409 * (-t9013 * t9494 + t9355 * (t9664 - t10153));
t9821 = t9409 * (t9013 * (pkin(1) * t10590 - t10433) + t9355 * t10872);
t9820 = t9410 * (-t9014 * t9495 + t9356 * (t9666 - t10152));
t9819 = t9410 * (t9014 * (pkin(1) * t10588 - t10432) + t9356 * t10871);
t9818 = t9411 * (-t9015 * t9493 + t9357 * (t9668 - t10151));
t9817 = t9411 * (t9015 * (pkin(1) * t10586 - t10431) + t9357 * t10870);
t8990 = 0.2e1 * t9012 + t8995;
t9205 = 0.2e1 * t9351 + t9288;
t9816 = t9397 * (t9205 * t9288 * t9736 + t8990 * t9727);
t9815 = t9397 * (-t10368 * t9205 + t8990 * t9736);
t8986 = 0.2e1 * t9010 + t8996;
t9199 = 0.2e1 * t9349 + t9284;
t9814 = t9399 * (t9199 * t9284 * t9730 + t8986 * t9721);
t9813 = t9399 * (-t10383 * t9199 + t8986 * t9730);
t8988 = 0.2e1 * t9011 + t8997;
t9202 = 0.2e1 * t9350 + t9286;
t9812 = t9401 * (t9202 * t9286 * t9733 + t8988 * t9724);
t9811 = t9401 * (-t10376 * t9202 + t8988 * t9733);
t9792 = 0.4e1 * t10387 * t9400 * t9617 + 0.2e1 * t10579 * t10759;
t9791 = 0.2e1 * t10117 * t10711 + t10405;
t9790 = 0.4e1 * t10379 * t9402 * t9618 + 0.2e1 * t10567 * t10756;
t9789 = 0.2e1 * t10112 * t10709 + t10401;
t9788 = 0.4e1 * t10372 * t9398 * t9619 + 0.2e1 * t10555 * t10753;
t9787 = 0.2e1 * t10107 * t10713 + t10397;
t9206 = t9351 + 0.2e1 * t9288;
t9203 = t9350 + 0.2e1 * t9286;
t9200 = t9349 + 0.2e1 * t9284;
t9147 = t10055 * t9705 + t9206 * t9726;
t9146 = t10063 * t9705 + t9203 * t9723;
t9145 = t10071 * t9705 + t9200 * t9720;
t9144 = t9206 * t9735 - t9920;
t9143 = t9203 * t9732 - t9927;
t9142 = t9200 * t9729 - t9934;
t9066 = (t10165 * t9357 + t10504 - 0.2e1 * t9912) * t10559 - t10813 * t9207 * t10057;
t9065 = (t10166 * t9356 + t10505 - 0.2e1 * t9913) * t10571 - t10816 * t9204 * t10065;
t9064 = (t10167 * t9355 + t10506 - 0.2e1 * t9914) * t10583 - t10819 * t9201 * t10073;
t9051 = (-0.2e1 * t9287 + t9348 + 0.2e1 * t9357) * t9697 + (0.4e1 * t10035 * t9207 - t10370 * t10812) * t10733 + (t10652 * t10813 + t9699) * t9357 - t10504;
t9050 = (-0.2e1 * t9285 + t9347 + 0.2e1 * t9356) * t9693 + (0.4e1 * t10037 * t9204 - t10249 * t10815) * t10734 + (t10653 * t10816 + t9695) * t9356 - t10505;
t9049 = (-0.2e1 * t9283 + t9346 + 0.2e1 * t9355) * t9689 + (0.4e1 * t10039 * t9201 - t10385 * t10818) * t10735 + (t10654 * t10819 + t9691) * t9355 - t10506;
t8964 = -t10253 * t9015 + t8991 * t9735;
t8963 = -t10257 * t9014 + t8989 * t9732;
t8962 = -t10261 * t9013 + t8987 * t9729;
t1 = [(t10716 * t9015 + t10718 * t9014 + t10720 * t9013) * MDP(1) + (-t9361 * t9944 - t9362 * t9942 - t9363 * t9940 + t9382 * t9791 + t9384 * t9789 + t9386 * t9787) * t10772 + (-t10736 * t9291 - t10737 * t9290 - t10738 * t9289 + t9382 * t9792 + t9384 * t9790 + t9386 * t9788) * t10771 + (t9361 * t10404 + t9362 * t10400 + t9363 * t10396 + t9386 * t9816 + t9384 * t9812 + t9382 * t9814 + (-t10079 * t9363 - t10081 * t9362 - t10083 * t9361) * t9706) * t10770 + (t9361 * t10403 + t9362 * t10399 + t9363 * t10395 + t9386 * t9815 + t9384 * t9811 + t9382 * t9813 + (t10080 * t9363 + t10082 * t9362 + t10084 * t9361) * t9706) * t10769 + (t8987 * t10738 + t8989 * t10737 + t8991 * t10736 + (t10716 * t8991 + t10718 * t8989 + t10720 * t8987) * t9706) * MDP(8) + (t9361 * t9821 + t9362 * t9819 + t9363 * t9817 + t9382 * t9864 + t9384 * t9862 + t9386 * t9866) * MDP(9) + (t9361 * t9822 + t9362 * t9820 + t9363 * t9818 + t9382 * t9865 + t9384 * t9863 + t9386 * t9867) * MDP(10) + (t9386 * t10206 + t9384 * t10194 + t9382 * t10200 + t9363 * t9963 + t9362 * t9966 + t9361 * t9968 + (t10727 * t9066 + t10729 * t9065 + t10731 * t9064) * t9761) * MDP(11) + (t9386 * t10207 + t9384 * t10195 + t9382 * t10201 + t9363 * t10183 + t9362 * t10186 + t9361 * t10189 + (t10727 * t9051 + t10729 * t9050 + t10731 * t9049) * t9761) * MDP(12) + (t9386 * t10204 + t9384 * t10192 + t9382 * t10198 + t9363 * t9961 + t9362 * t9964 + t9361 * t9967 + (t8965 * t10731 + t8966 * t10729 + t8967 * t10727 + (t9142 * t9937 + t9143 * t9930 + t9144 * t9923) * t9705) * t9761) * MDP(13) + (t9386 * t10205 + t9384 * t10193 + t9382 * t10199 + t9363 * t9962 + t9362 * t9965 + t9361 * t9960 + (t8962 * t10731 + t8963 * t10729 + t8964 * t10727 + (-t9145 * t9937 - t9146 * t9930 - t9147 * t9923) * t9705) * t9761) * MDP(14) + ((-t10727 * t8973 - t10729 * t8972 - t10731 * t8971) * t9761 + ((t9384 * t10764 + (t9362 * t10389 + (t10330 * t9373 + t10843 * t9384) * t9286) * t9724) * t9401 + (t9382 * t10765 + (t9361 * t10390 + (t10340 * t9371 + t10844 * t9382) * t9284) * t9721) * t9399 + (t9386 * t10763 + (t9363 * t10388 + (t10320 * t9375 + t10842 * t9386) * t9288) * t9727) * t9397) * t9705) * MDP(15) + (t9386 * t10208 + t9384 * t10196 + t9382 * t10202 + t9363 * t10184 + t9362 * t10187 + t9361 * t10190 + (t10178 * t9375 + t10180 * t9373 + t10181 * t9371) * t9761) * MDP(16) + (t9386 * t10209 + t9384 * t10197 + t9382 * t10203 + t9363 * t10185 + t9362 * t10188 + t9361 * t10191 + (t10177 * t9375 + t10179 * t9373 + t10182 * t9371) * t9761) * MDP(17); (t10715 * t9015 + t10717 * t9014 + t10719 * t9013) * MDP(1) + (-t9358 * t9944 - t9359 * t9942 - t9360 * t9940 + t9383 * t9791 + t9385 * t9789 + t9387 * t9787) * t10772 + (-t10739 * t9291 - t10740 * t9290 - t10741 * t9289 + t9383 * t9792 + t9385 * t9790 + t9387 * t9788) * t10771 + (t9358 * t10404 + t9359 * t10400 + t9360 * t10396 + t9387 * t9816 + t9385 * t9812 + t9383 * t9814 + (-t10079 * t9360 - t10081 * t9359 - t10083 * t9358) * t9706) * t10770 + (t9358 * t10403 + t9359 * t10399 + t9360 * t10395 + t9387 * t9815 + t9385 * t9811 + t9383 * t9813 + (t10080 * t9360 + t10082 * t9359 + t10084 * t9358) * t9706) * t10769 + (t8987 * t10741 + t8989 * t10740 + t8991 * t10739 + (t10715 * t8991 + t10717 * t8989 + t10719 * t8987) * t9706) * MDP(8) + (t9358 * t9821 + t9359 * t9819 + t9360 * t9817 + t9383 * t9864 + t9385 * t9862 + t9387 * t9866) * MDP(9) + (t9358 * t9822 + t9359 * t9820 + t9360 * t9818 + t9383 * t9865 + t9385 * t9863 + t9387 * t9867) * MDP(10) + (t9387 * t10206 + t9385 * t10194 + t9383 * t10200 + t9360 * t9963 + t9359 * t9966 + t9358 * t9968 + (t10728 * t9066 + t10730 * t9065 + t10732 * t9064) * t9761) * MDP(11) + (t9387 * t10207 + t9385 * t10195 + t9383 * t10201 + t9360 * t10183 + t9359 * t10186 + t9358 * t10189 + (t10728 * t9051 + t10730 * t9050 + t10732 * t9049) * t9761) * MDP(12) + (t9387 * t10204 + t9385 * t10192 + t9383 * t10198 + t9360 * t9961 + t9359 * t9964 + t9358 * t9967 + (t8965 * t10732 + t8966 * t10730 + t8967 * t10728 + (t9142 * t9938 + t9143 * t9931 + t9144 * t9924) * t9705) * t9761) * MDP(13) + (t9387 * t10205 + t9385 * t10193 + t9383 * t10199 + t9360 * t9962 + t9359 * t9965 + t9358 * t9960 + (t8962 * t10732 + t8963 * t10730 + t8964 * t10728 + (-t9145 * t9938 - t9146 * t9931 - t9147 * t9924) * t9705) * t9761) * MDP(14) + ((-t10728 * t8973 - t10730 * t8972 - t10732 * t8971) * t9761 + ((t9385 * t10764 + (t9359 * t10389 + (t10330 * t9372 + t10843 * t9385) * t9286) * t9724) * t9401 + (t9383 * t10765 + (t9358 * t10390 + (t10340 * t9370 + t10844 * t9383) * t9284) * t9721) * t9399 + (t9387 * t10763 + (t9360 * t10388 + (t10320 * t9374 + t10842 * t9387) * t9288) * t9727) * t9397) * t9705) * MDP(15) + (t9387 * t10208 + t9385 * t10196 + t9383 * t10202 + t9360 * t10184 + t9359 * t10187 + t9358 * t10190 + (t10178 * t9374 + t10180 * t9372 + t10181 * t9370) * t9761) * MDP(16) + (t9387 * t10209 + t9385 * t10197 + t9383 * t10203 + t9360 * t10185 + t9359 * t10188 + t9358 * t10191 + (t10177 * t9374 + t10179 * t9372 + t10182 * t9370) * t9761) * MDP(17); (t10710 * t9014 + t10712 * t9013 + t10714 * t9015) * MDP(1) + (t9430 * t10405 + t9431 * t10401 + t9432 * t10397 + (0.2e1 * t10379 * t9431 - t10722 * t9365) * t9402 * t10567 + (0.2e1 * t10387 * t9430 - t10723 * t9364) * t9400 * t10579 + (0.2e1 * t10372 * t9432 - t10721 * t9366) * t9398 * t10555) * t10772 + (-t10721 * t9291 - t10722 * t9290 - t10723 * t9289 + t9430 * t9792 + t9431 * t9790 + t9432 * t9788) * t10771 + (t9013 * t10319 + t9014 * t10318 + t9015 * t10317 + t9431 * t9812 + t9430 * t9814 + t9432 * t9816 + (-t10079 * t9381 - t10081 * t9380 - t10083 * t9379) * t9706) * t10770 + (t9379 * t10403 + t9380 * t10399 + t9381 * t10395 + t9431 * t9811 + t9430 * t9813 + t9432 * t9815 + (t10080 * t9381 + t10082 * t9380 + t10084 * t9379) * t9706) * t10769 + (t8987 * t10723 + t8989 * t10722 + t8991 * t10721 + (t10710 * t8989 + t10712 * t8987 + t10714 * t8991) * t9706) * MDP(8) + (t9379 * t9821 + t9380 * t9819 + t9381 * t9817 + t9430 * t9864 + t9431 * t9862 + t9432 * t9866) * MDP(9) + (t9379 * t9822 + t9380 * t9820 + t9381 * t9818 + t9430 * t9865 + t9431 * t9863 + t9432 * t9867) * MDP(10) + (t9431 * t10194 + t9430 * t10200 + t9432 * t10206 + t9381 * t9963 + t9380 * t9966 + t9379 * t9968 + (-t10724 * t9066 - t10725 * t9065 - t10726 * t9064) * t10604) * MDP(11) + (t9431 * t10195 + t9430 * t10201 + t9432 * t10207 + t9381 * t10183 + t9380 * t10186 + t9379 * t10189 + (-t10724 * t9051 - t10725 * t9050 - t10726 * t9049) * t10604) * MDP(12) + (t9431 * t10192 + t9430 * t10198 + t9432 * t10204 + t9381 * t9961 + t9380 * t9964 + t9379 * t9967 + ((-t10724 * t8967 - t10725 * t8966 - t10726 * t8965) * t9705 + (-t9142 * t9936 - t9143 * t9929 - t9144 * t9922) * t9680) * t9761) * MDP(13) + (t9431 * t10193 + t9430 * t10199 + t9432 * t10205 + t9381 * t9962 + t9380 * t9965 + t9379 * t9960 + ((-t10724 * t8964 - t10725 * t8963 - t10726 * t8962) * t9705 + (t9145 * t9936 + t9146 * t9929 + t9147 * t9922) * t9680) * t9761) * MDP(14) + ((-t10724 * t9949 - t10725 * t9951 - t10726 * t9953) * t9761 * t9680 + ((t10724 * t8973 + t10725 * t8972 + t10726 * t8971) * t9761 + (t10318 * t10887 + (t10376 * t10843 + t10764) * t9431) * t9401 + (t10319 * t10888 + (t10383 * t10844 + t10765) * t9430) * t9399 + (t10317 * t10886 + (t10368 * t10842 + t10763) * t9432) * t9397) * t9705) * MDP(15) + (t9431 * t10196 + t9430 * t10202 + t9432 * t10208 + t9381 * t10184 + t9380 * t10187 + t9379 * t10190 + (-t10530 * t10725 - t10531 * t10726 - t10532 * t10724) * t10604) * MDP(16) + (t9431 * t10197 + t9430 * t10203 + t9432 * t10209 + t9381 * t10185 + t9380 * t10188 + t9379 * t10191 + (-t10528 * t10724 - t10529 * t10725 - t10533 * t10726) * t10604) * MDP(17);];
taucX  = t1;
