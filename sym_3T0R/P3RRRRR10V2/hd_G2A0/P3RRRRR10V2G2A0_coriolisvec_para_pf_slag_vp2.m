% Calculate vector of centrifugal and coriolis load on the joints for
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% taucX [3x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_coriolisvec_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:08:03
% EndTime: 2020-08-07 01:11:45
% DurationCPUTime: 234.74s
% Computational Cost: add. (1778043->2210), mult. (3361170->3197), div. (45837->25), fcn. (2747364->26), ass. (0->1250)
t2838 = pkin(7) * mrSges(3,1) - Ifges(3,5);
t2935 = sin(qJ(3,3));
t2731 = t2838 * t2935;
t3768 = mrSges(3,2) * pkin(7);
t2835 = -Ifges(3,6) + t3768;
t2944 = cos(qJ(3,3));
t2657 = t2835 * t2944 + t2731;
t2847 = pkin(7) * m(3) + mrSges(3,3);
t2815 = -mrSges(2,2) + t2847;
t3870 = t2815 * pkin(6) + Ifges(2,6);
t3873 = t3870 + t2657;
t2938 = sin(qJ(3,2));
t2732 = t2838 * t2938;
t2947 = cos(qJ(3,2));
t2658 = t2835 * t2947 + t2732;
t3872 = t3870 + t2658;
t2941 = sin(qJ(3,1));
t2733 = t2838 * t2941;
t2950 = cos(qJ(3,1));
t2659 = t2835 * t2950 + t2733;
t3871 = t3870 + t2659;
t2961 = pkin(8) + pkin(7);
t2880 = pkin(1) * t2961;
t2942 = sin(qJ(2,1));
t2859 = t2950 * pkin(3);
t2889 = pkin(2) + t2961;
t2890 = pkin(2) - t2961;
t3599 = (t2859 + t2889) * (t2859 + t2890);
t3256 = t2942 * t3599;
t2641 = t2880 - t3256;
t2867 = pkin(1) * t2942;
t2752 = t2961 + t2867;
t2851 = t2941 * pkin(3);
t2786 = t2851 + pkin(6);
t2934 = legFrame(1,2);
t2843 = sin(t2934);
t2846 = cos(t2934);
t2919 = cos(pkin(4));
t2888 = t2919 ^ 2;
t2918 = sin(pkin(4));
t2951 = cos(qJ(2,1));
t2912 = t2951 ^ 2;
t3558 = (t2919 + 0.1e1) * (t2919 - 0.1e1);
t3244 = t2912 * t3558;
t3844 = t2859 + pkin(2);
t3086 = -0.2e1 * t3844 * t3244;
t2952 = cos(qJ(1,1));
t3552 = t2843 * t2952;
t3248 = t3844 * t3552;
t3111 = t2786 * t3248;
t3482 = t2942 * t2952;
t3233 = t2843 * t3482;
t3120 = t2786 * t3233;
t3125 = t2952 * t3256;
t2962 = 0.2e1 * t2961;
t3481 = t2942 * t2962;
t2746 = pkin(1) + t3481;
t2943 = sin(qJ(1,1));
t3253 = t2746 * t3844 * t2943;
t3469 = t2952 * t2961;
t3207 = t2919 * t3469;
t3259 = (t3844 * t3207 - t2943 * t3599 / 0.2e1) * t2912 * t2918;
t3547 = t2846 * t2942;
t3570 = t3844 * t2846;
t3590 = t2752 * t2943;
t2565 = -0.2e1 * t2843 * t3259 + (((-t2786 * t3570 + t2843 * t3125) * t2919 + t2843 * t3253) * t2918 + (t2846 * t3256 + t3111) * t2888 - t3111 + t2641 * t2846) * t2951 - t2752 * t3570 + (t2846 * t3086 + ((-t2786 * t3547 + t3248) * t2919 + t2843 * t3590) * t2918 + (t3120 + t3570) * t2888 - t3120) * t2961;
t3546 = t2846 * t2952;
t3247 = t3844 * t3546;
t3110 = t2786 * t3247;
t3227 = t2846 * t3482;
t3119 = t2786 * t3227;
t3553 = t2843 * t2942;
t3571 = t3844 * t2843;
t2566 = 0.2e1 * t2846 * t3259 + (((-t2786 * t3571 - t2846 * t3125) * t2919 - t2846 * t3253) * t2918 + (t2843 * t3256 - t3110) * t2888 + t3110 + t2641 * t2843) * t2951 - t2752 * t3571 + (t2843 * t3086 - ((t2786 * t3553 + t3247) * t2919 + t2846 * t3590) * t2918 - (t3119 - t3571) * t2888 + t3119) * t2961;
t3705 = pkin(6) * t2950;
t3729 = pkin(2) * t2941;
t2707 = t3705 - t3729;
t3506 = t2919 * t2950;
t3354 = pkin(1) * t3506;
t3569 = t3844 * t2918;
t3505 = t2919 * t2961;
t2748 = pkin(1) * t3505;
t3593 = t2748 * t2950;
t3856 = t2942 * t3844;
t3026 = -t3354 * t3856 + (-t2707 * t3569 + t3593) * t2951;
t3461 = t2961 * t2942;
t3741 = pkin(1) * t2941;
t2614 = 0.1e1 / ((-t2707 * t3461 + t3741 * t3844) * t2918 + t3026);
t2958 = xDP(3);
t2985 = 0.1e1 / pkin(3);
t3518 = t2918 * t2985;
t3213 = t2958 * t3518;
t2960 = xDP(1);
t3467 = t2960 * t2985;
t2959 = xDP(2);
t3468 = t2959 * t2985;
t3478 = t2943 * t2961;
t3722 = pkin(2) * t2952;
t2686 = t2919 * t3478 + t3722;
t3519 = t2918 * t2961;
t3744 = pkin(1) * t2919;
t2687 = -pkin(2) * t3744 - pkin(6) * t3519;
t2910 = t2950 ^ 2;
t2984 = pkin(3) ^ 2;
t2858 = t2910 * t2984;
t2787 = t2851 - pkin(6);
t2986 = pkin(2) ^ 2;
t3533 = t2910 * t2942;
t3336 = pkin(3) * t3533;
t2743 = t3461 + pkin(1);
t3345 = t2743 * t3729;
t3713 = pkin(3) * t2910;
t3402 = pkin(6) * t3713;
t3723 = pkin(2) * t2950;
t3014 = -t3336 * t3744 + (t3593 + (t2787 * t3723 + t2941 * t2986 - t3402) * t2918) * t2951 + t2918 * t3345;
t2979 = 0.2e1 * pkin(2);
t3192 = t3505 * t2979;
t3484 = t2942 * t2943;
t3210 = t2919 * t3484;
t3542 = t2889 * t2890;
t3223 = t2919 * t3542;
t3510 = t2919 * t2942;
t3342 = pkin(2) * t3510;
t3360 = t2918 * t3741;
t3470 = t2952 * t2746;
t3527 = t2918 * t2942;
t3578 = t2786 * t2918;
t3608 = ((t2943 * t3192 + 0.2e1 * t2686 * t2859 + (t2858 + t3542) * t2952) * t2912 + (-t3210 * t2858 + ((-0.2e1 * t3342 + t3578) * t2943 + t3470) * t2859 + (pkin(2) * t3578 - t2942 * t3223) * t2943 + pkin(2) * t3470) * t2951 + (t2952 * t2752 + (t2786 * t3527 - t2919 * t3844) * t2943) * t2961) / ((pkin(3) * t3360 + t2687 * t2942) * t2950 + t3014);
t2527 = -t3213 * t3608 + (t2565 * t3468 + t2566 * t3467) * t2614;
t2521 = pkin(1) * t2527;
t2785 = pkin(6) * t2941 + pkin(3);
t2833 = t2912 - 0.2e1;
t3141 = t2833 * t2851 - pkin(6);
t2809 = t2961 * t2951;
t2719 = t2942 * t2809;
t2860 = t2912 * pkin(2);
t3429 = t2719 + t2860;
t3849 = -pkin(2) + t3429;
t2995 = -t2941 * t3849 - t2950 * t3141;
t3486 = t2941 * t2952;
t3008 = t3849 * t3486;
t3483 = t2942 * t2951;
t3339 = pkin(2) * t3483;
t3042 = -t2912 * t2961 + t3339;
t2653 = t3042 + t2752;
t3526 = t2918 * t2943;
t3017 = pkin(6) * t3482 - t2653 * t3526;
t3728 = pkin(2) * t2942;
t2702 = t2809 - t3728;
t3029 = t2918 * t2702;
t3076 = t2743 * t2951 + t2860;
t3479 = t2943 * t2951;
t3116 = t3479 * t3527;
t3148 = pkin(3) * t3233;
t3228 = t2846 * t3527;
t2864 = pkin(2) * t2951;
t3422 = t3461 + t2864;
t2694 = pkin(1) + t3422;
t3520 = t2918 * t2952;
t3801 = t2943 * t2694 + t3141 * t3520;
t3408 = 0.2e1 * t3713;
t3802 = t2942 * (-t2785 + t3408 + t3723) - t2950 * t2809;
t2557 = (t2995 * t2846 - t3552 * t3802) * t2888 + (-(t2843 * t3479 - 0.2e1 * t3228) * t3713 + (-t2843 * t3801 - t2846 * t3029) * t2950 - (t2785 * t3547 + t2843 * t3008) * t2918) * t2919 + t2910 * t3148 + ((t2843 * t3116 + t2846 * t2912 - t2846) * t2851 - t2846 * pkin(6)) * t2950 + (-t2843 * t3017 + t2846 * t3076) * t2941 - t3148;
t3147 = pkin(3) * t3227;
t3234 = t2843 * t3527;
t2560 = (t2995 * t2843 + t3546 * t3802) * t2888 + ((t2846 * t3479 + 0.2e1 * t3234) * t3713 + (-t2843 * t3029 + t2846 * t3801) * t2950 + t2918 * (-t2785 * t3553 + t2846 * t3008)) * t2919 - t2910 * t3147 + ((t2843 * t2912 - t2846 * t3116 - t2843) * t2851 - t2843 * pkin(6)) * t2950 + (t2843 * t3076 + t2846 * t3017) * t2941 + t3147;
t2793 = t2864 + pkin(1);
t3240 = t2942 * t3558;
t3331 = pkin(3) * t3486;
t3471 = t2951 * t2952;
t3509 = t2919 * t2943;
t3543 = (t2951 + 0.1e1) * (t2951 - 0.1e1);
t3781 = -0.2e1 * t2888;
t3760 = t3781 + 0.1e1;
t2581 = ((-t3141 * t3509 - t3331 * t3483) * t2950 - (t3849 * t3509 + t2952 * (t2793 * t2942 - t2961 * t3543)) * t2941) * t2918 + (t2919 * t3471 + t3484 * t3760) * t3713 + (t2694 * t2952 + t2702 * t3509) * t3506 + t2943 * t2785 * t3240;
t2638 = (t2809 - t3856) * t3354;
t2647 = -pkin(6) * t3422 + t2793 * t2851;
t2662 = t2694 * t3729;
t3069 = -t2951 * t3402 + t2662;
t2611 = 0.1e1 / ((t2647 * t2950 + t3069) * t2918 + t2638);
t2494 = (t2557 * t2959 + t2560 * t2960 + t2581 * t2958) * t2611;
t3649 = t2494 * t2941;
t2448 = pkin(3) * t3649;
t2482 = pkin(6) * t2494;
t2512 = pkin(8) * t2527;
t3442 = t2482 + t2512;
t3817 = -pkin(7) * t2527 - t2448 - t3442;
t3051 = t2942 * t3817;
t3868 = -t3051 + t2521;
t2939 = sin(qJ(2,2));
t2856 = t2947 * pkin(3);
t3600 = (t2856 + t2889) * (t2856 + t2890);
t3257 = t2939 * t3600;
t2640 = t2880 - t3257;
t2866 = pkin(1) * t2939;
t2751 = t2961 + t2866;
t2850 = t2938 * pkin(3);
t2783 = t2850 + pkin(6);
t2933 = legFrame(2,2);
t2842 = sin(t2933);
t2845 = cos(t2933);
t2948 = cos(qJ(2,2));
t2908 = t2948 ^ 2;
t3245 = t2908 * t3558;
t3845 = t2856 + pkin(2);
t3087 = -0.2e1 * t3845 * t3245;
t2949 = cos(qJ(1,2));
t3554 = t2842 * t2949;
t3250 = t3845 * t3554;
t3113 = t2783 * t3250;
t3491 = t2939 * t2949;
t3235 = t2842 * t3491;
t3122 = t2783 * t3235;
t3127 = t2949 * t3257;
t3490 = t2939 * t2962;
t2745 = pkin(1) + t3490;
t2940 = sin(qJ(1,2));
t3254 = t2745 * t3845 * t2940;
t3472 = t2949 * t2961;
t3208 = t2919 * t3472;
t3260 = (t3845 * t3208 - t2940 * t3600 / 0.2e1) * t2908 * t2918;
t3549 = t2845 * t2939;
t3573 = t3845 * t2845;
t3591 = t2751 * t2940;
t2563 = -0.2e1 * t2842 * t3260 + (((-t2783 * t3573 + t2842 * t3127) * t2919 + t2842 * t3254) * t2918 + (t2845 * t3257 + t3113) * t2888 - t3113 + t2640 * t2845) * t2948 - t2751 * t3573 + (t2845 * t3087 + ((-t2783 * t3549 + t3250) * t2919 + t2842 * t3591) * t2918 + (t3122 + t3573) * t2888 - t3122) * t2961;
t3548 = t2845 * t2949;
t3249 = t3845 * t3548;
t3112 = t2783 * t3249;
t3229 = t2845 * t3491;
t3121 = t2783 * t3229;
t3555 = t2842 * t2939;
t3574 = t3845 * t2842;
t2564 = 0.2e1 * t2845 * t3260 + (((-t2783 * t3574 - t2845 * t3127) * t2919 - t2845 * t3254) * t2918 + (t2842 * t3257 - t3112) * t2888 + t3112 + t2640 * t2842) * t2948 - t2751 * t3574 + (t2842 * t3087 - ((t2783 * t3555 + t3249) * t2919 + t2845 * t3591) * t2918 - (t3121 - t3574) * t2888 + t3121) * t2961;
t3707 = pkin(6) * t2947;
t3731 = pkin(2) * t2938;
t2706 = t3707 - t3731;
t3507 = t2919 * t2947;
t3355 = pkin(1) * t3507;
t3572 = t3845 * t2918;
t3594 = t2748 * t2947;
t3857 = t2939 * t3845;
t3027 = -t3355 * t3857 + (-t2706 * t3572 + t3594) * t2948;
t3462 = t2961 * t2939;
t3742 = pkin(1) * t2938;
t2613 = 0.1e1 / ((-t2706 * t3462 + t3742 * t3845) * t2918 + t3027);
t3487 = t2940 * t2961;
t3724 = pkin(2) * t2949;
t2685 = t2919 * t3487 + t3724;
t2906 = t2947 ^ 2;
t2855 = t2906 * t2984;
t2784 = t2850 - pkin(6);
t3536 = t2906 * t2939;
t3332 = pkin(3) * t3536;
t2742 = t3462 + pkin(1);
t3346 = t2742 * t3731;
t3714 = pkin(3) * t2906;
t3403 = pkin(6) * t3714;
t3725 = pkin(2) * t2947;
t3015 = -t3332 * t3744 + (t3594 + (t2784 * t3725 + t2938 * t2986 - t3403) * t2918) * t2948 + t2918 * t3346;
t3493 = t2939 * t2940;
t3211 = t2919 * t3493;
t3513 = t2919 * t2939;
t3343 = pkin(2) * t3513;
t3361 = t2918 * t3742;
t3473 = t2949 * t2745;
t3529 = t2918 * t2939;
t3581 = t2783 * t2918;
t3609 = ((t2940 * t3192 + 0.2e1 * t2685 * t2856 + (t2855 + t3542) * t2949) * t2908 + (-t3211 * t2855 + ((-0.2e1 * t3343 + t3581) * t2940 + t3473) * t2856 + (pkin(2) * t3581 - t2939 * t3223) * t2940 + pkin(2) * t3473) * t2948 + (t2949 * t2751 + (t2783 * t3529 - t2919 * t3845) * t2940) * t2961) / ((pkin(3) * t3361 + t2687 * t2939) * t2947 + t3015);
t2526 = -t3213 * t3609 + (t2563 * t3468 + t2564 * t3467) * t2613;
t2520 = pkin(1) * t2526;
t2782 = pkin(6) * t2938 + pkin(3);
t2832 = t2908 - 0.2e1;
t3142 = t2832 * t2850 - pkin(6);
t2808 = t2961 * t2948;
t2718 = t2939 * t2808;
t2857 = t2908 * pkin(2);
t3430 = t2718 + t2857;
t3848 = -pkin(2) + t3430;
t2996 = -t2938 * t3848 - t2947 * t3142;
t3495 = t2938 * t2949;
t3009 = t3848 * t3495;
t3492 = t2939 * t2948;
t3340 = pkin(2) * t3492;
t3043 = -t2908 * t2961 + t3340;
t2652 = t3043 + t2751;
t3528 = t2918 * t2940;
t3018 = pkin(6) * t3491 - t2652 * t3528;
t3730 = pkin(2) * t2939;
t2701 = t2808 - t3730;
t3030 = t2918 * t2701;
t3077 = t2742 * t2948 + t2857;
t3488 = t2940 * t2948;
t3117 = t3488 * t3529;
t3151 = pkin(3) * t3235;
t3230 = t2845 * t3529;
t2863 = pkin(2) * t2948;
t3423 = t3462 + t2863;
t2693 = pkin(1) + t3423;
t3522 = t2918 * t2949;
t3800 = t2940 * t2693 + t3142 * t3522;
t3409 = 0.2e1 * t3714;
t3803 = t2939 * (-t2782 + t3409 + t3725) - t2947 * t2808;
t2556 = (t2996 * t2845 - t3554 * t3803) * t2888 + (-(t2842 * t3488 - 0.2e1 * t3230) * t3714 + (-t2842 * t3800 - t2845 * t3030) * t2947 - (t2782 * t3549 + t2842 * t3009) * t2918) * t2919 + t2906 * t3151 + ((t2842 * t3117 + t2845 * t2908 - t2845) * t2850 - t2845 * pkin(6)) * t2947 + (-t2842 * t3018 + t2845 * t3077) * t2938 - t3151;
t3150 = pkin(3) * t3229;
t3236 = t2842 * t3529;
t2559 = (t2996 * t2842 + t3548 * t3803) * t2888 + ((t2845 * t3488 + 0.2e1 * t3236) * t3714 + (-t2842 * t3030 + t2845 * t3800) * t2947 + t2918 * (-t2782 * t3555 + t2845 * t3009)) * t2919 - t2906 * t3150 + ((t2842 * t2908 - t2845 * t3117 - t2842) * t2850 - t2842 * pkin(6)) * t2947 + (t2842 * t3077 + t2845 * t3018) * t2938 + t3150;
t2792 = t2863 + pkin(1);
t3241 = t2939 * t3558;
t3333 = pkin(3) * t3495;
t3474 = t2948 * t2949;
t3512 = t2919 * t2940;
t3544 = (t2948 + 0.1e1) * (t2948 - 0.1e1);
t2580 = ((-t3142 * t3512 - t3333 * t3492) * t2947 - (t3848 * t3512 + t2949 * (t2792 * t2939 - t2961 * t3544)) * t2938) * t2918 + (t2919 * t3474 + t3493 * t3760) * t3714 + (t2693 * t2949 + t2701 * t3512) * t3507 + t2940 * t2782 * t3241;
t2637 = (t2808 - t3857) * t3355;
t2646 = -pkin(6) * t3423 + t2792 * t2850;
t2661 = t2693 * t3731;
t3070 = -t2948 * t3403 + t2661;
t2610 = 0.1e1 / ((t2646 * t2947 + t3070) * t2918 + t2637);
t2493 = (t2556 * t2959 + t2559 * t2960 + t2580 * t2958) * t2610;
t3653 = t2493 * t2938;
t2446 = pkin(3) * t3653;
t2481 = pkin(6) * t2493;
t2511 = pkin(8) * t2526;
t3443 = t2481 + t2511;
t3816 = -pkin(7) * t2526 - t2446 - t3443;
t3052 = t2939 * t3816;
t3867 = -t3052 + t2520;
t2936 = sin(qJ(2,3));
t2853 = t2944 * pkin(3);
t3601 = (t2853 + t2889) * (t2853 + t2890);
t3258 = t2936 * t3601;
t2639 = t2880 - t3258;
t2865 = pkin(1) * t2936;
t2750 = t2961 + t2865;
t2849 = t2935 * pkin(3);
t2780 = t2849 + pkin(6);
t2932 = legFrame(3,2);
t2841 = sin(t2932);
t2844 = cos(t2932);
t2945 = cos(qJ(2,3));
t2904 = t2945 ^ 2;
t3246 = t2904 * t3558;
t3846 = t2853 + pkin(2);
t3088 = -0.2e1 * t3846 * t3246;
t2946 = cos(qJ(1,3));
t3556 = t2841 * t2946;
t3252 = t3846 * t3556;
t3115 = t2780 * t3252;
t3500 = t2936 * t2946;
t3237 = t2841 * t3500;
t3124 = t2780 * t3237;
t3129 = t2946 * t3258;
t3499 = t2936 * t2962;
t2744 = pkin(1) + t3499;
t2937 = sin(qJ(1,3));
t3255 = t2744 * t3846 * t2937;
t3475 = t2946 * t2961;
t3209 = t2919 * t3475;
t3261 = (t3846 * t3209 - t2937 * t3601 / 0.2e1) * t2904 * t2918;
t3551 = t2844 * t2936;
t3576 = t3846 * t2844;
t3592 = t2750 * t2937;
t2561 = -0.2e1 * t2841 * t3261 + (((-t2780 * t3576 + t2841 * t3129) * t2919 + t2841 * t3255) * t2918 + (t2844 * t3258 + t3115) * t2888 - t3115 + t2639 * t2844) * t2945 - t2750 * t3576 + (t2844 * t3088 + ((-t2780 * t3551 + t3252) * t2919 + t2841 * t3592) * t2918 + (t3124 + t3576) * t2888 - t3124) * t2961;
t3550 = t2844 * t2946;
t3251 = t3846 * t3550;
t3114 = t2780 * t3251;
t3231 = t2844 * t3500;
t3123 = t2780 * t3231;
t3557 = t2841 * t2936;
t3577 = t3846 * t2841;
t2562 = 0.2e1 * t2844 * t3261 + (((-t2780 * t3577 - t2844 * t3129) * t2919 - t2844 * t3255) * t2918 + (t2841 * t3258 - t3114) * t2888 + t3114 + t2639 * t2841) * t2945 - t2750 * t3577 + (t2841 * t3088 - ((t2780 * t3557 + t3251) * t2919 + t2844 * t3592) * t2918 - (t3123 - t3577) * t2888 + t3123) * t2961;
t3709 = pkin(6) * t2944;
t3733 = pkin(2) * t2935;
t2705 = t3709 - t3733;
t3508 = t2919 * t2944;
t3356 = pkin(1) * t3508;
t3575 = t3846 * t2918;
t3595 = t2748 * t2944;
t3858 = t2936 * t3846;
t3028 = -t3356 * t3858 + (-t2705 * t3575 + t3595) * t2945;
t3463 = t2961 * t2936;
t3743 = pkin(1) * t2935;
t2612 = 0.1e1 / ((-t2705 * t3463 + t3743 * t3846) * t2918 + t3028);
t3496 = t2937 * t2961;
t3726 = pkin(2) * t2946;
t2684 = t2919 * t3496 + t3726;
t2902 = t2944 ^ 2;
t2852 = t2902 * t2984;
t2781 = t2849 - pkin(6);
t3539 = t2902 * t2936;
t3334 = pkin(3) * t3539;
t2741 = t3463 + pkin(1);
t3347 = t2741 * t3733;
t3715 = pkin(3) * t2902;
t3404 = pkin(6) * t3715;
t3727 = pkin(2) * t2944;
t3016 = -t3334 * t3744 + (t3595 + (t2781 * t3727 + t2935 * t2986 - t3404) * t2918) * t2945 + t2918 * t3347;
t3502 = t2936 * t2937;
t3212 = t2919 * t3502;
t3516 = t2919 * t2936;
t3344 = pkin(2) * t3516;
t3362 = t2918 * t3743;
t3476 = t2946 * t2744;
t3531 = t2918 * t2936;
t3584 = t2780 * t2918;
t3610 = ((t2937 * t3192 + 0.2e1 * t2684 * t2853 + (t2852 + t3542) * t2946) * t2904 + (-t3212 * t2852 + ((-0.2e1 * t3344 + t3584) * t2937 + t3476) * t2853 + (pkin(2) * t3584 - t2936 * t3223) * t2937 + pkin(2) * t3476) * t2945 + (t2946 * t2750 + (t2780 * t3531 - t2919 * t3846) * t2937) * t2961) / ((pkin(3) * t3362 + t2687 * t2936) * t2944 + t3016);
t2525 = -t3213 * t3610 + (t2561 * t3468 + t2562 * t3467) * t2612;
t2519 = pkin(1) * t2525;
t2779 = pkin(6) * t2935 + pkin(3);
t2831 = t2904 - 0.2e1;
t3143 = t2831 * t2849 - pkin(6);
t2807 = t2961 * t2945;
t2717 = t2936 * t2807;
t2854 = t2904 * pkin(2);
t3431 = t2717 + t2854;
t3847 = -pkin(2) + t3431;
t2997 = -t2935 * t3847 - t2944 * t3143;
t3504 = t2935 * t2946;
t3010 = t3847 * t3504;
t3501 = t2936 * t2945;
t3341 = pkin(2) * t3501;
t3044 = -t2904 * t2961 + t3341;
t2651 = t3044 + t2750;
t3530 = t2918 * t2937;
t3019 = pkin(6) * t3500 - t2651 * t3530;
t3732 = pkin(2) * t2936;
t2700 = t2807 - t3732;
t3031 = t2918 * t2700;
t3078 = t2741 * t2945 + t2854;
t3497 = t2937 * t2945;
t3118 = t3497 * t3531;
t3154 = pkin(3) * t3237;
t3232 = t2844 * t3531;
t2862 = pkin(2) * t2945;
t3424 = t3463 + t2862;
t2692 = pkin(1) + t3424;
t3524 = t2918 * t2946;
t3799 = t2937 * t2692 + t3143 * t3524;
t3410 = 0.2e1 * t3715;
t3804 = t2936 * (-t2779 + t3410 + t3727) - t2944 * t2807;
t2555 = (t2997 * t2844 - t3556 * t3804) * t2888 + (-(t2841 * t3497 - 0.2e1 * t3232) * t3715 + (-t2841 * t3799 - t2844 * t3031) * t2944 - (t2779 * t3551 + t2841 * t3010) * t2918) * t2919 + t2902 * t3154 + ((t2841 * t3118 + t2844 * t2904 - t2844) * t2849 - t2844 * pkin(6)) * t2944 + (-t2841 * t3019 + t2844 * t3078) * t2935 - t3154;
t3153 = pkin(3) * t3231;
t3238 = t2841 * t3531;
t2558 = (t2997 * t2841 + t3550 * t3804) * t2888 + ((t2844 * t3497 + 0.2e1 * t3238) * t3715 + (-t2841 * t3031 + t2844 * t3799) * t2944 + t2918 * (-t2779 * t3557 + t2844 * t3010)) * t2919 - t2902 * t3153 + ((t2841 * t2904 - t2844 * t3118 - t2841) * t2849 - t2841 * pkin(6)) * t2944 + (t2841 * t3078 + t2844 * t3019) * t2935 + t3153;
t2791 = t2862 + pkin(1);
t3242 = t2936 * t3558;
t3335 = pkin(3) * t3504;
t3477 = t2945 * t2946;
t3515 = t2919 * t2937;
t3545 = (t2945 + 0.1e1) * (t2945 - 0.1e1);
t2579 = ((-t3143 * t3515 - t3335 * t3501) * t2944 - (t3847 * t3515 + t2946 * (t2791 * t2936 - t2961 * t3545)) * t2935) * t2918 + (t2919 * t3477 + t3502 * t3760) * t3715 + (t2692 * t2946 + t2700 * t3515) * t3508 + t2937 * t2779 * t3242;
t2636 = (t2807 - t3858) * t3356;
t2645 = -pkin(6) * t3424 + t2791 * t2849;
t2660 = t2692 * t3733;
t3071 = -t2945 * t3404 + t2660;
t2609 = 0.1e1 / ((t2645 * t2944 + t3071) * t2918 + t2636);
t2492 = (t2555 * t2959 + t2558 * t2960 + t2579 * t2958) * t2609;
t3657 = t2492 * t2935;
t2444 = pkin(3) * t3657;
t2480 = pkin(6) * t2492;
t2510 = pkin(8) * t2525;
t3444 = t2480 + t2510;
t3815 = -pkin(7) * t2525 - t2444 - t3444;
t3053 = t2936 * t3815;
t3866 = -t3053 + t2519;
t2516 = pkin(6) * t2525;
t3655 = t2492 * t2961;
t3812 = t3655 - t2516;
t3667 = t3812 * t2945;
t2517 = pkin(6) * t2526;
t3651 = t2493 * t2961;
t3813 = t3651 - t2517;
t3666 = t3813 * t2948;
t2518 = pkin(6) * t2527;
t3647 = t2494 * t2961;
t3814 = t3647 - t2518;
t3665 = t3814 * t2951;
t2740 = t2847 * pkin(2) + Ifges(2,4);
t3057 = t2835 * t2941 - t2838 * t2950;
t2644 = t2740 - t3057;
t3058 = t2835 * t2938 - t2838 * t2947;
t2643 = t2740 - t3058;
t3059 = t2835 * t2935 - t2838 * t2944;
t2642 = t2740 - t3059;
t3688 = Ifges(3,4) * t2902;
t2819 = 0.2e1 * t3688;
t3770 = pkin(2) * pkin(6);
t2708 = m(3) * t3770 + pkin(6) * mrSges(2,1) + Ifges(3,4) - Ifges(2,5);
t2953 = pkin(6) * mrSges(3,2);
t3766 = pkin(2) * mrSges(3,1);
t2769 = -t2953 + t3766;
t3589 = t2769 * t2935;
t3034 = -t2708 - t3589;
t3865 = t2819 + t3034;
t3687 = Ifges(3,4) * t2906;
t2820 = 0.2e1 * t3687;
t3588 = t2769 * t2938;
t3033 = -t2708 - t3588;
t3864 = t2820 + t3033;
t3686 = Ifges(3,4) * t2910;
t2821 = 0.2e1 * t3686;
t3587 = t2769 * t2941;
t3032 = -t2708 - t3587;
t3863 = t2821 + t3032;
t3862 = 0.2e1 * t2902;
t3861 = 0.2e1 * t2906;
t3860 = 0.2e1 * t2910;
t3853 = 0.2e1 * t2888;
t3859 = t3853 - 0.2e1;
t3754 = t2912 - 0.1e1;
t3367 = t3754 * pkin(2);
t3756 = t2908 - 0.1e1;
t3368 = t3756 * pkin(2);
t3758 = t2904 - 0.1e1;
t3369 = t3758 * pkin(2);
t2964 = pkin(8) * pkin(7);
t2981 = pkin(8) ^ 2;
t2982 = pkin(7) ^ 2;
t3417 = t2981 + t2982;
t3196 = 0.2e1 * t2964 + t3417;
t3793 = 0.2e1 * t2525;
t3792 = 0.2e1 * t2526;
t3791 = 0.2e1 * t2527;
t2887 = t2919 * t2888;
t3854 = -0.4e1 * t2887;
t3393 = 0.2e1 * t2918;
t3776 = 0.2e1 * t2945;
t3775 = 0.2e1 * t2948;
t3774 = 0.2e1 * t2951;
t3852 = -0.3e1 * t2961;
t3851 = -Ifges(2,1) - Ifges(3,2);
t3850 = -Ifges(3,1) - Ifges(2,3);
t2489 = t2492 ^ 2;
t3843 = Ifges(3,4) * t2489;
t2490 = t2493 ^ 2;
t3842 = Ifges(3,4) * t2490;
t2491 = t2494 ^ 2;
t3841 = Ifges(3,4) * t2491;
t2663 = t2919 * t3500 + t3497;
t3517 = t2919 * t2935;
t3004 = -pkin(3) * t3517 + t3031;
t3007 = -(t2919 * t3726 + t3496) * t2936 + (-pkin(2) * t2937 + t3209) * t2945 + t2918 * t3335;
t2585 = -(t2663 * t2844 + t3238) * t3715 + (t2841 * t3004 + t2844 * t3007) * t2944 + (-t2841 * t2919 + t2844 * t3524) * t3733;
t2689 = pkin(1) * t2849 - pkin(6) * t3463;
t2648 = t2781 * t2862 + t2689;
t2666 = t2700 * t3744;
t3525 = t2918 * t2945;
t3324 = pkin(6) * t3525;
t3359 = pkin(1) * t3516;
t3097 = t2918 * t2660 - (t3324 + t3359) * t3715;
t2603 = 0.1e1 / ((t2648 * t2918 + t2666) * t2944 + t3097);
t2570 = t2585 * t2603 * t2960;
t2586 = (t2663 * t2841 - t3232) * t3715 + (-t2841 * t3007 + t2844 * t3004) * t2944 - (t2841 * t3524 + t2844 * t2919) * t3733;
t2571 = t2586 * t2603 * t2959;
t3216 = t2935 * t3530;
t2615 = -(-t3212 + t3477) * t3715 + (-pkin(3) * t3216 - t2684 * t2945 - t2936 * (-pkin(2) * t3515 + t3475)) * t2944 - pkin(2) * t3216;
t2582 = t2615 * t2603 * t2958;
t2540 = t2570 + t2571 + t2582;
t2537 = t2540 ^ 2;
t3840 = Ifges(3,4) * t2537;
t2664 = t2919 * t3491 + t3488;
t3514 = t2919 * t2938;
t3003 = -pkin(3) * t3514 + t3030;
t3006 = -(t2919 * t3724 + t3487) * t2939 + (-pkin(2) * t2940 + t3208) * t2948 + t2918 * t3333;
t2587 = -(t2664 * t2845 + t3236) * t3714 + (t2842 * t3003 + t2845 * t3006) * t2947 + (-t2842 * t2919 + t2845 * t3522) * t3731;
t2690 = pkin(1) * t2850 - pkin(6) * t3462;
t2649 = t2784 * t2863 + t2690;
t2667 = t2701 * t3744;
t3523 = t2918 * t2948;
t3323 = pkin(6) * t3523;
t3358 = pkin(1) * t3513;
t3096 = t2918 * t2661 - (t3323 + t3358) * t3714;
t2604 = 0.1e1 / ((t2649 * t2918 + t2667) * t2947 + t3096);
t2572 = t2587 * t2604 * t2960;
t2588 = (t2664 * t2842 - t3230) * t3714 + (-t2842 * t3006 + t2845 * t3003) * t2947 - (t2842 * t3522 + t2845 * t2919) * t3731;
t2573 = t2588 * t2604 * t2959;
t3215 = t2938 * t3528;
t2616 = -(-t3211 + t3474) * t3714 + (-pkin(3) * t3215 - t2685 * t2948 - t2939 * (-pkin(2) * t3512 + t3472)) * t2947 - pkin(2) * t3215;
t2583 = t2616 * t2604 * t2958;
t2541 = t2572 + t2573 + t2583;
t2538 = t2541 ^ 2;
t3839 = Ifges(3,4) * t2538;
t2665 = t2919 * t3482 + t3479;
t3511 = t2919 * t2941;
t3002 = -pkin(3) * t3511 + t3029;
t3005 = -(t2919 * t3722 + t3478) * t2942 + (-pkin(2) * t2943 + t3207) * t2951 + t2918 * t3331;
t2589 = -(t2665 * t2846 + t3234) * t3713 + (t2843 * t3002 + t2846 * t3005) * t2950 + (-t2843 * t2919 + t2846 * t3520) * t3729;
t2691 = pkin(1) * t2851 - pkin(6) * t3461;
t2650 = t2787 * t2864 + t2691;
t2668 = t2702 * t3744;
t3521 = t2918 * t2951;
t3322 = pkin(6) * t3521;
t3357 = pkin(1) * t3510;
t3095 = t2918 * t2662 - (t3322 + t3357) * t3713;
t2605 = 0.1e1 / ((t2650 * t2918 + t2668) * t2950 + t3095);
t2574 = t2589 * t2605 * t2960;
t2590 = (t2665 * t2843 - t3228) * t3713 + (-t2843 * t3005 + t2846 * t3002) * t2950 - (t2843 * t3520 + t2846 * t2919) * t3729;
t2575 = t2590 * t2605 * t2959;
t3214 = t2941 * t3526;
t2617 = -(-t3210 + t3471) * t3713 + (-pkin(3) * t3214 - t2686 * t2951 - t2942 * (-pkin(2) * t3509 + t3469)) * t2950 - pkin(2) * t3214;
t2584 = t2617 * t2605 * t2958;
t2542 = t2574 + t2575 + t2584;
t2539 = t2542 ^ 2;
t3838 = Ifges(3,4) * t2539;
t3645 = t2525 * t2935;
t3641 = t2526 * t2938;
t3637 = t2527 * t2941;
t3541 = t2944 * t2852;
t3538 = t2947 * t2855;
t3535 = t2950 * t2858;
t3638 = t2527 * t2918;
t2500 = pkin(1) * t3638;
t3735 = pkin(2) * t2542;
t2536 = 0.2e1 * t3735;
t3837 = (t2500 + t2536) * t2919;
t3642 = t2526 * t2918;
t2499 = pkin(1) * t3642;
t3736 = pkin(2) * t2541;
t2535 = 0.2e1 * t3736;
t3836 = (t2499 + t2535) * t2919;
t3646 = t2525 * t2918;
t2498 = pkin(1) * t3646;
t3737 = pkin(2) * t2540;
t2534 = 0.2e1 * t3737;
t3835 = (t2498 + t2534) * t2919;
t3633 = t2537 * t2904;
t3834 = t2489 + t3633;
t3631 = t2538 * t2908;
t3833 = t2490 + t3631;
t3629 = t2539 * t2912;
t3832 = t2491 + t3629;
t2930 = Ifges(3,2) - Ifges(3,1);
t2762 = t2930 * t2902;
t2893 = 0.2e1 * t3766;
t3685 = Ifges(3,4) * t2935;
t3399 = 0.2e1 * t3685;
t3831 = (t2893 + t3399) * t2944 + t2762;
t2763 = t2930 * t2906;
t3684 = Ifges(3,4) * t2938;
t3397 = 0.2e1 * t3684;
t3830 = (t2893 + t3397) * t2947 + t2763;
t2764 = t2930 * t2910;
t3683 = Ifges(3,4) * t2941;
t3395 = 0.2e1 * t3683;
t3829 = (t2893 + t3395) * t2950 + t2764;
t2765 = t2930 * t2935;
t3764 = pkin(6) * mrSges(3,1);
t3765 = pkin(2) * mrSges(3,2);
t2770 = t3764 + t3765;
t3828 = -t2765 - t2770;
t3094 = t2765 + t3765;
t2766 = t2930 * t2938;
t3827 = -t2766 - t2770;
t3093 = t2766 + t3765;
t2767 = t2930 * t2941;
t3826 = -t2767 - t2770;
t3092 = t2767 + t3765;
t2822 = pkin(6) * t2849;
t3825 = 0.2e1 * t2822 - t2852;
t2823 = pkin(6) * t2850;
t3824 = 0.2e1 * t2823 - t2855;
t2824 = pkin(6) * t2851;
t3823 = 0.2e1 * t2824 - t2858;
t2825 = pkin(2) * t2853;
t3056 = 0.2e1 * t2825 + t2852;
t2826 = pkin(2) * t2856;
t3055 = 0.2e1 * t2826 + t2855;
t2827 = pkin(2) * t2859;
t3054 = 0.2e1 * t2827 + t2858;
t2963 = m(2) + m(3);
t2983 = pkin(6) ^ 2;
t3822 = -0.2e1 * mrSges(2,3) * pkin(6) - t2963 * t2983;
t3821 = t2981 / 0.2e1 + t2982 / 0.2e1;
t2452 = pkin(6) * t3647;
t3635 = t2527 * t2984;
t2392 = -t2452 + t3635;
t3820 = t2392 * t3483 - t2482 * t3367;
t2451 = pkin(6) * t3651;
t3639 = t2526 * t2984;
t2391 = -t2451 + t3639;
t3819 = t2391 * t3492 - t2481 * t3368;
t2450 = pkin(6) * t3655;
t3643 = t2525 * t2984;
t2390 = -t2450 + t3643;
t3818 = t2390 * t3501 - t2480 * t3369;
t2917 = t2961 ^ 2;
t3415 = t2986 - t2984;
t2747 = t2917 + t3415;
t2753 = pkin(1) * t3463;
t3811 = -pkin(1) * t2862 - t2747 - t2753;
t2754 = pkin(1) * t3462;
t3810 = -pkin(1) * t2863 - t2747 - t2754;
t2755 = pkin(1) * t3461;
t2861 = t2951 * pkin(1);
t3809 = -pkin(2) * t2861 - t2747 - t2755;
t3808 = t2825 + t2852 - t2822;
t3807 = t2826 + t2855 - t2823;
t3806 = t2827 + t2858 - t2824;
t3805 = 0.3e1 * t3196;
t2978 = 0.3e1 * pkin(2);
t3798 = -0.2e1 * mrSges(3,2);
t3797 = 0.4e1 * Ifges(3,4);
t2504 = t2525 * t2961;
t3796 = 0.2e1 * t2504;
t2505 = t2526 * t2961;
t3795 = 0.2e1 * t2505;
t2506 = t2527 * t2961;
t3794 = 0.2e1 * t2506;
t3790 = -0.4e1 * t2540;
t3789 = -0.2e1 * t2540;
t3788 = -0.4e1 * t2541;
t3787 = -0.2e1 * t2541;
t3786 = -0.4e1 * t2542;
t3785 = -0.2e1 * t2542;
t3784 = 0.2e1 * t2887;
t3783 = 0.3e1 * t2887;
t3782 = 0.4e1 * t2887;
t3779 = 0.2e1 * t2904;
t3778 = 0.2e1 * t2908;
t3777 = 0.2e1 * t2912;
t3773 = 0.2e1 * t2953;
t3772 = pkin(1) * pkin(2);
t3771 = pkin(1) * pkin(3);
t3767 = mrSges(3,3) * pkin(7);
t2956 = pkin(1) * mrSges(3,1);
t2955 = pkin(1) * mrSges(3,2);
t3763 = t2769 / 0.2e1;
t3762 = t2769 / 0.4e1;
t3761 = -t2838 / 0.2e1;
t3759 = t2888 - 0.1e1;
t3757 = t3779 - 0.2e1;
t3755 = t3778 - 0.2e1;
t3753 = t3777 - 0.2e1;
t2486 = pkin(1) * t2492;
t2487 = pkin(1) * t2493;
t2488 = pkin(1) * t2494;
t3752 = pkin(1) * t2540;
t3751 = pkin(1) * t2541;
t3750 = pkin(1) * t2542;
t2848 = m(3) * pkin(2) + mrSges(2,1);
t3694 = mrSges(3,2) * t2935;
t2714 = -t2848 + t3694;
t3749 = pkin(1) * t2714;
t3693 = mrSges(3,2) * t2938;
t2715 = -t2848 + t3693;
t3748 = pkin(1) * t2715;
t3692 = mrSges(3,2) * t2941;
t2716 = -t2848 + t3692;
t3747 = pkin(1) * t2716;
t3746 = pkin(1) * t2815;
t3745 = pkin(1) * t2918;
t2483 = pkin(2) * t2492;
t2484 = pkin(2) * t2493;
t2485 = pkin(2) * t2494;
t3740 = pkin(2) * t2525;
t3739 = pkin(2) * t2526;
t3738 = pkin(2) * t2527;
t3734 = pkin(2) * t2918;
t3721 = pkin(3) * t2525;
t3720 = pkin(3) * t2526;
t3719 = pkin(3) * t2527;
t3718 = pkin(3) * t2779;
t3717 = pkin(3) * t2782;
t3716 = pkin(3) * t2785;
t3712 = pkin(6) * t2537;
t3711 = pkin(6) * t2538;
t3710 = pkin(6) * t2539;
t3708 = pkin(6) * t2945;
t3706 = pkin(6) * t2948;
t3704 = pkin(6) * t2951;
t3703 = pkin(6) * t2961;
t2478 = pkin(8) * t2493;
t2471 = t2492 * pkin(8);
t2475 = t2494 * pkin(8);
t3702 = t2700 * pkin(2);
t3701 = t2701 * pkin(2);
t3700 = t2702 * pkin(2);
t3698 = mrSges(3,1) * t2492;
t3697 = mrSges(3,1) * t2493;
t3696 = mrSges(3,1) * t2494;
t3695 = mrSges(3,1) * t2941;
t3691 = Ifges(3,4) * t2525;
t3690 = Ifges(3,4) * t2526;
t3689 = Ifges(3,4) * t2527;
t3682 = t2492 * Ifges(3,4);
t3681 = t2493 * Ifges(3,4);
t3680 = t2494 * Ifges(3,4);
t3679 = t2935 * mrSges(3,1);
t3678 = t2938 * mrSges(3,1);
t3675 = -0.2e1 * t2955;
t3674 = -0.2e1 * t3766;
t3673 = -0.2e1 * t3764;
t3672 = 0.2e1 * t3764;
t3503 = t2935 * t2961;
t2387 = t2492 * t3503 - t3721;
t3670 = t2387 * t2945;
t3494 = t2938 * t2961;
t2388 = t2493 * t3494 - t3720;
t3669 = t2388 * t2948;
t3485 = t2941 * t2961;
t2389 = t2494 * t3485 - t3719;
t3668 = t2389 * t2951;
t3271 = t2540 * t3531;
t3664 = (t2849 * t3271 - t2483) * t2904;
t3267 = t2541 * t3529;
t3663 = (t2850 * t3267 - t2484) * t2908;
t3263 = t2542 * t3527;
t3662 = (t2851 * t3263 - t2485) * t2912;
t3661 = t2492 * t2853;
t3660 = t2493 * t2856;
t3659 = t2494 * t2859;
t3658 = t2492 * t2919;
t3656 = t2492 * t2936;
t3654 = t2493 * t2919;
t3652 = t2493 * t2939;
t3650 = t2494 * t2919;
t3648 = t2494 * t2942;
t3644 = t2525 * t2936;
t3640 = t2526 * t2939;
t3636 = t2527 * t2942;
t3634 = t2537 * t2888;
t3632 = t2538 * t2888;
t3630 = t2539 * t2888;
t3628 = t2540 * t2888;
t3627 = t2540 * t2904;
t3626 = t2540 * t2918;
t3625 = t2540 * t2919;
t3624 = t2540 * t2936;
t3623 = t2540 * t2945;
t3622 = t2541 * t2888;
t3621 = t2541 * t2908;
t3620 = t2541 * t2918;
t3619 = t2541 * t2919;
t3618 = t2541 * t2939;
t3617 = t2541 * t2948;
t3616 = t2542 * t2888;
t3615 = t2542 * t2912;
t3614 = t2542 * t2918;
t3613 = t2542 * t2919;
t3612 = t2542 * t2942;
t3611 = t2542 * t2951;
t3604 = t3847 * t2779;
t3603 = t3848 * t2782;
t3602 = t3849 * t2785;
t3598 = t2744 * t2945;
t3597 = t2745 * t2948;
t3596 = t2746 * t2951;
t3586 = t2779 * t2888;
t3585 = t2780 * t3846;
t3583 = t2782 * t2888;
t3582 = t2783 * t3845;
t3580 = t2785 * t2888;
t3579 = t2786 * t3844;
t2814 = t2917 + t2986;
t3568 = t2814 * t2936;
t3567 = t2814 * t2939;
t3566 = t2814 * t2942;
t3565 = t2835 * t2525;
t3564 = t2835 * t2526;
t3563 = t2835 * t2527;
t3562 = t2835 * t2918;
t3561 = t2838 * t2525;
t3560 = t2838 * t2526;
t3559 = t2838 * t2527;
t3540 = t2902 * t2918;
t3537 = t2906 * t2918;
t3534 = t2910 * t2918;
t3532 = t2918 * t2919;
t2903 = t2945 * t2904;
t3466 = t2961 * t2903;
t2907 = t2948 * t2908;
t3465 = t2961 * t2907;
t2911 = t2951 * t2912;
t3464 = t2961 * t2911;
t3460 = t2961 * t2984;
t3447 = t2492 * pkin(7) + t2471;
t3456 = (-t2516 / 0.2e1 + t3447) * t2849 - t3643 / 0.2e1;
t2360 = t2450 + t3456;
t2378 = -t2516 + t3447;
t3313 = pkin(3) * t3645;
t2384 = t3655 - t3313;
t2721 = t2986 + t3196;
t2414 = t2492 * t2721;
t2445 = t2492 * t2852;
t2987 = pkin(1) ^ 2;
t3416 = t2983 + t2987;
t3062 = t3196 + t3416;
t2696 = t2984 + t3062;
t2703 = -0.2e1 / 0.3e1 * t2964 - t2981 / 0.3e1 - t2982 / 0.3e1 + t2986;
t2720 = pkin(1) * t3542;
t2834 = 0.2e1 * t2880;
t2881 = t2984 + t2986;
t2884 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t3193 = t2986 - t3417;
t3101 = pkin(3) * t3193;
t3325 = pkin(6) * t3542;
t3001 = (((t2516 - 0.2e1 * t2471) * pkin(7) + pkin(6) * t2510) * t2849 + t2525 * t3460 + (t2935 * t3101 + t3325) * t2492) * t2936 + (t2519 - 0.2e1 * t3053) * t2825 + t3866 * t2852;
t2501 = pkin(1) * t3644;
t3320 = t2780 * t2483;
t3025 = (t2501 - t3815) * t2853 + t3320;
t2915 = -0.2e1 * t2964;
t2928 = t2986 / 0.2e1;
t3194 = -t2983 / 0.2e1 - t2984 / 0.2e1 + t2928;
t3037 = t2915 + t3194 - t3417;
t3038 = t2984 + t3416 + t3805;
t3061 = t2915 + t2984 + t3193;
t3239 = t2961 * t3558;
t3065 = t3239 * t3585;
t3084 = t2750 * t3625 + t2378;
t3102 = t2928 + t2964 + t3821;
t3103 = t2986 - t3805;
t3353 = t2492 * t3727;
t2435 = pkin(3) * t3353;
t3146 = -t3313 / 0.2e1;
t3109 = t2414 / 0.2e1 + t2445 / 0.2e1 + t2435 + t2961 * t3146;
t3130 = t2780 * t3258;
t3273 = t2540 * t3585;
t3133 = t2961 * t3273;
t3140 = 0.2e1 * t2887 - 0.2e1 * t2919;
t3280 = t2525 * t3503;
t3158 = pkin(3) * t3280;
t3164 = t2935 * t3359;
t3165 = t2918 * t2748;
t3180 = 0.2e1 * t3271;
t3200 = 0.3e1 / 0.2e1 * t2703 * t2961;
t3243 = t2918 * t3558;
t3272 = t2540 * t3558;
t3281 = t2525 * t2852;
t3282 = t2525 * t3540;
t3295 = t3759 * t2961;
t3085 = -t2986 / 0.2e1 + t3821;
t3338 = (pkin(6) * t2471 + pkin(7) * t3444 + t2525 * t3085 + t3456) * t2853;
t3350 = pkin(2) * t3646;
t3363 = pkin(1) * t3532;
t3374 = 0.2e1 * t3532;
t3453 = 0.2e1 * t2435 + t2445;
t2333 = ((t2935 * t3165 + ((t2822 + t3061) * t2944 + (t2779 + t3715) * pkin(2)) * t3558) * t3627 + ((t2741 * t3272 + t3350) * t3715 + ((t2525 * t2881 - t2849 * t3084) * t2918 + t2744 * pkin(2) * t3272) * t2944 - (t2935 * t3084 - t3721) * t3734 - t2961 * (-t2779 * t3624 * t3759 + t2519 * t3517)) * t2945 + t3282 * t3771 + (t2750 * t2540 * t3295 + (pkin(3) * t3164 + t2741 * t3734) * t2525) * t2944 - (-pkin(3) * t3644 + (t2378 * t2936 + t2741 * t3625 + t2486) * t2935) * t3519 + t3164 * t3740) / ((-pkin(1) * t3344 + t2689 * t2918) * t2944 + t3016) * t2525 + ((-t2540 * t3846 * (t3103 + t3056) * t2903 * t3243 + (t3133 * t3854 + ((t2703 + t3056) * t3271 * t3852 - 0.2e1 * t3338 + (-0.2e1 * t2360 + t3281) * pkin(2)) * t2888 + ((t2492 * t3542 + t3158 + t3453) * t3745 + 0.4e1 * t3133) * t2919 + 0.2e1 * (t2936 * t3200 + t2720 + t3056 * (t2884 * t2936 + pkin(1))) * t3626 - pkin(2) * t3281 + 0.2e1 * t3338 + t2360 * t2979) * t2904 + (t3001 * t2888 + ((t3146 + t3655) * t2865 + t3109) * t3846 * t3374 + (((t3037 + t3808) * t3853 + 0.4e1 * t2753 + t3038 + t3825) * t3575 + t3130 * t3140) * t2540 - t3001) * t2945 + t2961 * (t3273 * t3784 + ((t3194 + t3808) * t3180 + t3025) * t2888 + (t2384 * t3745 - 0.2e1 * t3273 + (t2445 + t2414 + (-t3280 + 0.2e1 * t3353) * pkin(3)) * t3531) * t2919 + (t2834 + (t2696 + t3825) * t2936) * t3626 - t3025)) * t2540 + ((t3363 * t3601 - 0.2e1 * t3065) * t3627 + (0.2e1 * ((t2852 / 0.2e1 + t2825 + t2753 + t3102) * t3625 + t3109) * t3575 + t3130 * t3272) * t2945 + (t2540 * (t2880 + (t2721 + t3056) * t2936) * t3505 + t2741 * (t2414 - t3158 + t3453)) * t2918 + t2540 * t3065) * t2492) / ((t2689 * t2944 + t3347) * t2918 + t3028) * t2985;
t3181 = -0.2e1 * t3271;
t2404 = pkin(6) * t3181 + t2483;
t2973 = pkin(6) / 0.2e1;
t2757 = t2849 + t2973;
t2528 = t2757 * t3181;
t2695 = 0.3e1 * t2984 + t3062;
t2713 = -t3542 / 0.2e1;
t2813 = -t2983 + t3415;
t2868 = pkin(1) * t2904;
t2869 = pkin(1) * t2945;
t2885 = -pkin(7) / 0.2e1 - pkin(8) / 0.2e1;
t2980 = -0.2e1 * pkin(1);
t3068 = t3758 * t3541;
t3081 = -t3661 - t2483;
t3155 = pkin(2) * t2717;
t3100 = pkin(2) * t3180;
t3171 = (t2480 + t2504 + t3100) * t2904 - t2480;
t3191 = t3532 * t3770;
t3195 = t2983 / 0.3e1 - t2986 / 0.3e1 + t2984;
t3206 = t2780 * t3501;
t3222 = t2919 * t3525;
t3226 = t2904 * t3542;
t3270 = t2540 * t2807;
t3285 = t2935 * t3656;
t3291 = ((0.2e1 * t2570 + 0.2e1 * t2571 + 0.2e1 * t2582 - t3627) * t2888 + t3658 + t3627 - t2540) * t3541;
t2972 = pkin(6) / 0.3e1;
t3307 = (t2849 + t2972) * t3732;
t3314 = t2525 * t2862;
t3319 = t2492 * t2862;
t3329 = pkin(6) * t3625;
t3330 = pkin(6) * t3626;
t3373 = 0.2e1 * t3501;
t3414 = 0.2e1 * t3752;
t3421 = t2822 + t2984;
t3432 = t3542 / 0.3e1 - 0.2e1 / 0.3e1 * t2984;
t2336 = (t2390 * t2944 * t3222 + ((t2831 * t3541 + t2944 * t3811) * t2888 + t2936 * t2944 * t3191 - t3068) * t2492 + (((-0.4e1 / 0.3e1 + t2904) * t3541 + ((-0.2e1 / 0.3e1 * t2822 + t3432) * t2904 + 0.2e1 / 0.3e1 * t3155 + 0.4e1 / 0.3e1 * t2822 + t3195) * t2944 - 0.2e1 / 0.3e1 * t3604) * t3783 + (-0.3e1 * t3068 + ((t2713 + t3421) * t3779 + (-pkin(2) * t3463 - t3772) * t3776 - 0.2e1 * t2753 - t2695) * t2944) * t2919 - t3031 * t3853 * t3709) * t2540 + (t3818 * t2888 + (pkin(2) * t3757 + 0.2e1 * t2717) * t3329 + ((t3568 + (t2961 + t3044) * pkin(1)) * t3658 + (-t3757 * t2880 + ((t2813 - t3226) * t2888 + t3226 + t2696) * t2936 + (pkin(1) * t3373 + ((t2903 - t2945) * t3853 - 0.2e1 * t2903 + t3776) * t2961) * pkin(2)) * t2540) * t2918 - t3818) * t2935 + (t2404 * t2888 - t3835 - t3661 - t2404 + (t2888 * t3081 - t3081 + t3835) * t2904 + (t2540 * t3847 * t3782 + (-t2486 * t2945 - 0.3e1 * t2483 - t3664) * t2888 + (-(t2498 + 0.4e1 * t3737) * t2904 - (-t3350 + t3414) * t2945 + 0.2e1 * t2498 + t2534) * t2919 + t3664 + t2483) * t2902 + ((-(-0.4e1 * t3330 - t3667) * t2902 - t3667) * t2888 + (-(0.4e1 * t3270 - (t2480 + t3796) * t2918) * t2902 + 0.2e1 * t3270 - t2525 * t3519) * t2919 - (0.2e1 * t3330 + t3667) * t2902 + t3667) * t2936 + (((t3796 - t3171) * t2888 - 0.4e1 * t3329 - t2501 - t2504 + ((0.2e1 * t2519 + t3314) * t2888 - t3314) * t2936 + (((pkin(1) * t3656 - t3812) * t2945 + t3656 * t2978) * t2919 + ((-0.4e1 * t2807 + 0.2e1 * t3466 + 0.4e1 * t3732) * t2888 - 0.2e1 * t3466 + t2750 * t3776) * t2540) * t2918 + t3171) * t2944 + (-t2540 + 0.4e1 * t3628 + 0.2e1 * t3658) * t2918 * t3334) * t2935) * pkin(3)) / (t2636 + (t2648 * t2944 + t3071) * t2918) * t2540 + ((-t3291 - ((t2528 + t2492 * (t2869 + t2979)) * t2919 + (-t3314 - t3866) * t2918) * t3715 + ((-pkin(1) * t3319 + t2750 * t3313 - t2492 * (t2753 + t2814)) * t2919 + (-t2384 * t3708 + t2936 * t3320) * t2918) * t2944 + t2692 * t2387 * t2918) * t2492 + (t2492 * t2692 * t3540 + (t3324 * t3657 + (pkin(1) * t3285 + t2387) * t2919) * t2944 + (-t3319 + (t3313 - t3812) * t2936 - t2486) * t2918 - t2525 * (t2869 + pkin(2)) * t2919) * t3721 + ((-((-t2854 + (-t3463 + pkin(1)) * t2945 + t2978) * t2888 + t3847) * t3715 + (-(t2904 * t3718 - t2822 - t3811) * t2888 + (((t2865 - t2961) * t2849 - t3703) * t2945 + 0.3e1 * t3307) * t3532 + t3545 * t3718) * t2944 - t3847 * t3586 - t2918 * (-pkin(1) * t3044 - t2880 - t3568) * t3517 + t3604) * t2492 + ((-(-t2862 + t2868 + t2980 - t3499) * t3532 - t3242 * t3708) * t2902 + (t2779 * t3222 + ((t2885 * t2904 + t3341 / 0.2e1 + t2750) * t3853 - t2651) * t2935) * t2944 + (t2868 - t2741) * t3532 + t2888 * t3206 - t3206) * t3721) * t2540) * t2603;
t2405 = t2492 + t3625;
t2600 = 0.1e1 / ((t2645 * t2918 + t2666) * t2944 + t3097);
t2974 = -0.3e1 / 0.2e1 * pkin(2);
t3047 = t3226 + t3421;
t3161 = pkin(2) * t3285;
t2342 = ((-t3158 * t2944 + (pkin(2) * t3410 + t2814 * t2944 + t3541) * t2405) * t2492 - ((t2405 * t3503 - t3721) * t2944 - t3740) * t3721) * t2600 + ((t3291 + (((t2974 + t3431) * t3781 + 0.2e1 * t2854 + t3598 - pkin(2)) * t3715 + (-(-t2986 + t3047 + 0.2e1 * t3155) * t2888 + pkin(2) * t3598 + t2753 + t2917 + t3047) * t2944 + (t2779 - t3586) * pkin(2)) * t2540 + ((t2528 + 0.2e1 * t2483) * t3715 + (t2492 * t2814 - t3158) * t2944) * t2919) * t2603 + (((-t3161 + t3670) * pkin(2) + ((0.2e1 * t2757 * t2807 - 0.3e1 * t3307) * t2944 + t2935 * t3702) * t3625 + (-(t2444 + t2504) * t3539 + (-0.2e1 * t3161 + t3670) * t2944) * pkin(3)) * t2603 + (-(t2902 * t3463 + t2945 * t3846) * t3721 + (t3702 + ((t2807 - 0.2e1 * t3732) * t2944 - t3334) * pkin(3)) * t3657) * t2600) * t2918) * t2540;
t2768 = t2953 + t3766;
t2771 = -t3764 + t3765;
t3168 = t2936 * t2838 + t2956;
t3301 = pkin(7) + t2865;
t3428 = t2835 * t2936 + t2955;
t2597 = -((-t2768 * t2945 - t3168) * t2944 + (t2771 * t2945 + t3428) * t2935 - Ifges(3,3) * t2945) * t2918 + t2919 * ((mrSges(3,2) * t3301 - Ifges(3,6)) * t2944 + t2935 * (mrSges(3,1) * t3301 - Ifges(3,5)));
t2882 = -Ifges(3,3) + t2930;
t3139 = t2492 * t3271;
t3219 = t2930 * t3531;
t3376 = -0.2e1 * t2838 * t2918;
t3377 = 0.2e1 * t3562;
t3385 = pkin(2) * t3698;
t2465 = -0.2e1 * t3682;
t3435 = t2540 * t3219 + t2465;
t3459 = -Ifges(3,3) * t2333 + t2336 * t2657 + t2342 * t2597 + (-t3843 + (t2492 * t3219 + t2919 * t3435) * t2540 + (t2831 * t2888 - t3758) * t3840) * t3862 + (-(mrSges(3,2) * t3369 + t2765 * t2831 + t2835 * t3501 - t3764) * t3634 + 0.2e1 * (t3094 * t2492 + (t2945 * t3761 + (t3399 + t3763) * t2936) * t3626) * t3625 + (t3139 * t3797 + (t3633 - (t2540 - t2492) * (t2540 + t2492)) * t2930) * t2935 + (t2492 * t3376 + t2540 * t3428) * t3623 + t3100 * t3698 - mrSges(3,1) * t3712 + t3834 * t3765) * t2944 - ((mrSges(3,1) * t3369 + t2838 * t3501 + t2953) * t2935 + Ifges(3,4) * t2831) * t3634 - ((-0.2e1 * t3385 + (t2770 * t2936 - t2835 * t2945) * t3626) * t2935 + t3435) * t3625 + ((t2492 * t3377 + t2540 * t3168) * t3623 + mrSges(3,2) * t3712 + (mrSges(3,1) * t3834 + t3139 * t3798) * pkin(2)) * t2935 + Ifges(3,4) * t3633 - t2882 * t3139 - t3840 + t3843;
t3445 = pkin(7) * t2493 + t2478;
t3454 = (-t2517 / 0.2e1 + t3445) * t2850 - t3639 / 0.2e1;
t2362 = t2451 + t3454;
t2379 = -t2517 + t3445;
t3311 = pkin(3) * t3641;
t2385 = t3651 - t3311;
t2415 = t2493 * t2721;
t2447 = t2493 * t2855;
t3000 = (((t2517 - 0.2e1 * t2478) * pkin(7) + pkin(6) * t2511) * t2850 + t2526 * t3460 + (t2938 * t3101 + t3325) * t2493) * t2939 + (t2520 - 0.2e1 * t3052) * t2826 + t3867 * t2855;
t2502 = pkin(1) * t3640;
t3318 = t2783 * t2484;
t3024 = (t2502 - t3816) * t2856 + t3318;
t3064 = t3239 * t3582;
t3083 = t2751 * t3619 + t2379;
t3352 = t2493 * t3725;
t2436 = pkin(3) * t3352;
t3145 = -t3311 / 0.2e1;
t3108 = t2415 / 0.2e1 + t2447 / 0.2e1 + t2436 + t2961 * t3145;
t3128 = t2783 * t3257;
t3269 = t2541 * t3582;
t3132 = t2961 * t3269;
t3277 = t2526 * t3494;
t3157 = pkin(3) * t3277;
t3163 = t2938 * t3358;
t3178 = 0.2e1 * t3267;
t3268 = t2541 * t3558;
t3278 = t2526 * t2855;
t3279 = t2526 * t3537;
t3337 = (pkin(6) * t2478 + pkin(7) * t3443 + t2526 * t3085 + t3454) * t2856;
t3349 = pkin(2) * t3642;
t3452 = 0.2e1 * t2436 + t2447;
t2334 = ((t2938 * t3165 + ((t2823 + t3061) * t2947 + (t2782 + t3714) * pkin(2)) * t3558) * t3621 + ((t2742 * t3268 + t3349) * t3714 + ((t2526 * t2881 - t2850 * t3083) * t2918 + t2745 * pkin(2) * t3268) * t2947 - (t2938 * t3083 - t3720) * t3734 - t2961 * (-t2782 * t3618 * t3759 + t2520 * t3514)) * t2948 + t3279 * t3771 + (t2751 * t2541 * t3295 + (pkin(3) * t3163 + t2742 * t3734) * t2526) * t2947 - (-pkin(3) * t3640 + (t2379 * t2939 + t2742 * t3619 + t2487) * t2938) * t3519 + t3163 * t3739) / ((-pkin(1) * t3343 + t2690 * t2918) * t2947 + t3015) * t2526 + ((-t2541 * t3845 * (t3103 + t3055) * t2907 * t3243 + (t3132 * t3854 + ((t2703 + t3055) * t3267 * t3852 - 0.2e1 * t3337 + (-0.2e1 * t2362 + t3278) * pkin(2)) * t2888 + ((t2493 * t3542 + t3157 + t3452) * t3745 + 0.4e1 * t3132) * t2919 + 0.2e1 * (t2939 * t3200 + t2720 + t3055 * (t2884 * t2939 + pkin(1))) * t3620 - pkin(2) * t3278 + 0.2e1 * t3337 + t2362 * t2979) * t2908 + (t3000 * t2888 + t3845 * ((t3145 + t3651) * t2866 + t3108) * t3374 + (((t3037 + t3807) * t3853 + 0.4e1 * t2754 + t3038 + t3824) * t3572 + t3128 * t3140) * t2541 - t3000) * t2948 + t2961 * (t3269 * t3784 + ((t3194 + t3807) * t3178 + t3024) * t2888 + (t2385 * t3745 - 0.2e1 * t3269 + (t2447 + t2415 + (-t3277 + 0.2e1 * t3352) * pkin(3)) * t3529) * t2919 + (t2834 + (t2696 + t3824) * t2939) * t3620 - t3024)) * t2541 + ((t3363 * t3600 - 0.2e1 * t3064) * t3621 + (0.2e1 * ((t2855 / 0.2e1 + t2826 + t2754 + t3102) * t3619 + t3108) * t3572 + t3128 * t3268) * t2948 + (t2541 * (t2880 + (t2721 + t3055) * t2939) * t3505 + t2742 * (t2415 - t3157 + t3452)) * t2918 + t2541 * t3064) * t2493) / ((t2690 * t2947 + t3346) * t2918 + t3027) * t2985;
t3179 = -0.2e1 * t3267;
t2402 = pkin(6) * t3179 + t2484;
t2759 = t2850 + t2973;
t2529 = t2759 * t3179;
t2870 = pkin(1) * t2908;
t2871 = pkin(1) * t2948;
t3067 = t3756 * t3538;
t3080 = -t3660 - t2484;
t3152 = pkin(2) * t2718;
t3099 = pkin(2) * t3178;
t3170 = (t2481 + t2505 + t3099) * t2908 - t2481;
t3205 = t2783 * t3492;
t3221 = t2919 * t3523;
t3225 = t2908 * t3542;
t3266 = t2541 * t2808;
t3284 = t2938 * t3652;
t3290 = ((0.2e1 * t2572 + 0.2e1 * t2573 + 0.2e1 * t2583 - t3621) * t2888 + t3654 + t3621 - t2541) * t3538;
t3306 = (t2850 + t2972) * t3730;
t3308 = pkin(6) * t3620;
t3312 = t2526 * t2863;
t3317 = t2493 * t2863;
t3328 = pkin(6) * t3619;
t3372 = 0.2e1 * t3492;
t3413 = 0.2e1 * t3751;
t3420 = t2823 + t2984;
t2337 = (t2391 * t2947 * t3221 + ((t2832 * t3538 + t2947 * t3810) * t2888 + t2939 * t2947 * t3191 - t3067) * t2493 + (((t2908 - 0.4e1 / 0.3e1) * t3538 + ((-0.2e1 / 0.3e1 * t2823 + t3432) * t2908 + 0.2e1 / 0.3e1 * t3152 + 0.4e1 / 0.3e1 * t2823 + t3195) * t2947 - 0.2e1 / 0.3e1 * t3603) * t3783 + (-0.3e1 * t3067 + ((t2713 + t3420) * t3778 + (-pkin(2) * t3462 - t3772) * t3775 - 0.2e1 * t2754 - t2695) * t2947) * t2919 - t3030 * t3853 * t3707) * t2541 + (t3819 * t2888 + (pkin(2) * t3755 + 0.2e1 * t2718) * t3328 + ((t3567 + (t2961 + t3043) * pkin(1)) * t3654 + (-t3755 * t2880 + ((t2813 - t3225) * t2888 + t3225 + t2696) * t2939 + (pkin(1) * t3372 + ((t2907 - t2948) * t3853 - 0.2e1 * t2907 + t3775) * t2961) * pkin(2)) * t2541) * t2918 - t3819) * t2938 + (t2402 * t2888 - t3836 - t3660 - t2402 + (t2888 * t3080 - t3080 + t3836) * t2908 + (t2541 * t3848 * t3782 + (-t2487 * t2948 - 0.3e1 * t2484 - t3663) * t2888 + (-(t2499 + 0.4e1 * t3736) * t2908 - (-t3349 + t3413) * t2948 + 0.2e1 * t2499 + t2535) * t2919 + t3663 + t2484) * t2906 + ((-(-0.4e1 * t3308 - t3666) * t2906 - t3666) * t2888 + (-(0.4e1 * t3266 - (t2481 + t3795) * t2918) * t2906 + 0.2e1 * t3266 - t2526 * t3519) * t2919 - (0.2e1 * t3308 + t3666) * t2906 + t3666) * t2939 + (((t3795 - t3170) * t2888 - 0.4e1 * t3328 - t2502 - t2505 + ((0.2e1 * t2520 + t3312) * t2888 - t3312) * t2939 + (((pkin(1) * t3652 - t3813) * t2948 + t3652 * t2978) * t2919 + ((-0.4e1 * t2808 + 0.2e1 * t3465 + 0.4e1 * t3730) * t2888 - 0.2e1 * t3465 + t2751 * t3775) * t2541) * t2918 + t3170) * t2947 + (-t2541 + 0.4e1 * t3622 + 0.2e1 * t3654) * t2918 * t3332) * t2938) * pkin(3)) / (t2637 + (t2649 * t2947 + t3070) * t2918) * t2541 + ((-t3290 - ((t2529 + t2493 * (t2871 + t2979)) * t2919 + (-t3312 - t3867) * t2918) * t3714 + ((-pkin(1) * t3317 + t2751 * t3311 - t2493 * (t2754 + t2814)) * t2919 + (-t2385 * t3706 + t2939 * t3318) * t2918) * t2947 + t2693 * t2388 * t2918) * t2493 + (t2493 * t2693 * t3537 + (t3323 * t3653 + (pkin(1) * t3284 + t2388) * t2919) * t2947 + (-t3317 + (t3311 - t3813) * t2939 - t2487) * t2918 - t2526 * (t2871 + pkin(2)) * t2919) * t3720 + ((-((-t2857 + (-t3462 + pkin(1)) * t2948 + t2978) * t2888 + t3848) * t3714 + (-(t2908 * t3717 - t2823 - t3810) * t2888 + (((t2866 - t2961) * t2850 - t3703) * t2948 + 0.3e1 * t3306) * t3532 + t3544 * t3717) * t2947 - t3848 * t3583 - (-pkin(1) * t3043 - t2880 - t3567) * t2918 * t3514 + t3603) * t2493 + ((-(-t2863 + t2870 + t2980 - t3490) * t3532 - t3241 * t3706) * t2906 + (t2782 * t3221 + ((t2885 * t2908 + t3340 / 0.2e1 + t2751) * t3853 - t2652) * t2938) * t2947 + (t2870 - t2742) * t3532 + t2888 * t3205 - t3205) * t3720) * t2541) * t2604;
t2406 = t2493 + t3619;
t2601 = 0.1e1 / ((t2646 * t2918 + t2667) * t2947 + t3096);
t3046 = t3225 + t3420;
t3160 = pkin(2) * t3284;
t2343 = ((-t3157 * t2947 + (pkin(2) * t3409 + t2814 * t2947 + t3538) * t2406) * t2493 - ((t2406 * t3494 - t3720) * t2947 - t3739) * t3720) * t2601 + ((t3290 + (((t2974 + t3430) * t3781 + 0.2e1 * t2857 + t3597 - pkin(2)) * t3714 + (-(-t2986 + t3046 + 0.2e1 * t3152) * t2888 + pkin(2) * t3597 + t2754 + t2917 + t3046) * t2947 + (t2782 - t3583) * pkin(2)) * t2541 + ((t2529 + 0.2e1 * t2484) * t3714 + (t2493 * t2814 - t3157) * t2947) * t2919) * t2604 + (((-t3160 + t3669) * pkin(2) + ((0.2e1 * t2759 * t2808 - 0.3e1 * t3306) * t2947 + t2938 * t3701) * t3619 + (-(t2446 + t2505) * t3536 + (-0.2e1 * t3160 + t3669) * t2947) * pkin(3)) * t2604 + (-(t2906 * t3462 + t2948 * t3845) * t3720 + (t3701 + ((t2808 - 0.2e1 * t3730) * t2947 - t3332) * pkin(3)) * t3653) * t2601) * t2918) * t2541;
t3167 = t2939 * t2838 + t2956;
t3300 = pkin(7) + t2866;
t3427 = t2835 * t2939 + t2955;
t2598 = -((-t2768 * t2948 - t3167) * t2947 + (t2771 * t2948 + t3427) * t2938 - Ifges(3,3) * t2948) * t2918 + t2919 * ((mrSges(3,2) * t3300 - Ifges(3,6)) * t2947 + t2938 * (mrSges(3,1) * t3300 - Ifges(3,5)));
t3138 = t2493 * t3267;
t3218 = t2930 * t3529;
t3383 = pkin(2) * t3697;
t2466 = -0.2e1 * t3681;
t3434 = t2541 * t3218 + t2466;
t3458 = -Ifges(3,3) * t2334 + t2337 * t2658 + t2343 * t2598 + (-t3842 + (t2493 * t3218 + t2919 * t3434) * t2541 + (t2832 * t2888 - t3756) * t3839) * t3861 + (-(mrSges(3,2) * t3368 + t2766 * t2832 + t2835 * t3492 - t3764) * t3632 + 0.2e1 * (t3093 * t2493 + (t2948 * t3761 + (t3397 + t3763) * t2939) * t3620) * t3619 + (t3138 * t3797 + (t3631 - (t2541 - t2493) * (t2541 + t2493)) * t2930) * t2938 + (t2493 * t3376 + t2541 * t3427) * t3617 + t3099 * t3697 - mrSges(3,1) * t3711 + t3833 * t3765) * t2947 - ((mrSges(3,1) * t3368 + t2838 * t3492 + t2953) * t2938 + Ifges(3,4) * t2832) * t3632 - ((-0.2e1 * t3383 + (t2770 * t2939 - t2835 * t2948) * t3620) * t2938 + t3434) * t3619 + ((t2493 * t3377 + t2541 * t3167) * t3617 + mrSges(3,2) * t3711 + (mrSges(3,1) * t3833 + t3138 * t3798) * pkin(2)) * t2938 + Ifges(3,4) * t3631 - t2882 * t3138 - t3839 + t3842;
t3446 = t2494 * pkin(7) + t2475;
t3455 = (-t2518 / 0.2e1 + t3446) * t2851 - t3635 / 0.2e1;
t2361 = t2452 + t3455;
t2380 = -t2518 + t3446;
t3309 = pkin(3) * t3637;
t2386 = t3647 - t3309;
t2416 = t2494 * t2721;
t2449 = t2494 * t2858;
t2999 = (((t2518 - 0.2e1 * t2475) * pkin(7) + pkin(6) * t2512) * t2851 + t2527 * t3460 + (t2941 * t3101 + t3325) * t2494) * t2942 + (t2521 - 0.2e1 * t3051) * t2827 + t3868 * t2858;
t2503 = pkin(1) * t3636;
t3316 = t2786 * t2485;
t3023 = (t2503 - t3817) * t2859 + t3316;
t3063 = t3239 * t3579;
t3082 = t2752 * t3613 + t2380;
t3351 = t2494 * t3723;
t2437 = pkin(3) * t3351;
t3144 = -t3309 / 0.2e1;
t3107 = t2416 / 0.2e1 + t2449 / 0.2e1 + t2437 + t2961 * t3144;
t3126 = t2786 * t3256;
t3265 = t2542 * t3579;
t3131 = t2961 * t3265;
t3274 = t2527 * t3485;
t3156 = pkin(3) * t3274;
t3162 = t2941 * t3357;
t3176 = 0.2e1 * t3263;
t3264 = t2542 * t3558;
t3275 = t2527 * t2858;
t3276 = t2527 * t3534;
t3321 = (pkin(6) * t2475 + pkin(7) * t3442 + t2527 * t3085 + t3455) * t2859;
t3348 = pkin(2) * t3638;
t3451 = 0.2e1 * t2437 + t2449;
t2335 = ((t2941 * t3165 + ((t2824 + t3061) * t2950 + (t2785 + t3713) * pkin(2)) * t3558) * t3615 + ((t2743 * t3264 + t3348) * t3713 + ((t2527 * t2881 - t2851 * t3082) * t2918 + t2746 * pkin(2) * t3264) * t2950 - (t2941 * t3082 - t3719) * t3734 - t2961 * (-t2785 * t3612 * t3759 + t2521 * t3511)) * t2951 + t3276 * t3771 + (t2752 * t2542 * t3295 + (pkin(3) * t3162 + t2743 * t3734) * t2527) * t2950 - (-pkin(3) * t3636 + (t2380 * t2942 + t2743 * t3613 + t2488) * t2941) * t3519 + t3162 * t3738) / ((-pkin(1) * t3342 + t2691 * t2918) * t2950 + t3014) * t2527 + ((-t2542 * t3844 * (t3103 + t3054) * t2911 * t3243 + (t3131 * t3854 + ((t2703 + t3054) * t3263 * t3852 - 0.2e1 * t3321 + (-0.2e1 * t2361 + t3275) * pkin(2)) * t2888 + ((t2494 * t3542 + t3156 + t3451) * t3745 + 0.4e1 * t3131) * t2919 + 0.2e1 * (t2942 * t3200 + t2720 + t3054 * (t2884 * t2942 + pkin(1))) * t3614 - pkin(2) * t3275 + 0.2e1 * t3321 + t2361 * t2979) * t2912 + (t2999 * t2888 + t3844 * ((t3144 + t3647) * t2867 + t3107) * t3374 + (((t3037 + t3806) * t3853 + 0.4e1 * t2755 + t3038 + t3823) * t3569 + t3126 * t3140) * t2542 - t2999) * t2951 + t2961 * (t3265 * t3784 + ((t3194 + t3806) * t3176 + t3023) * t2888 + (t2386 * t3745 - 0.2e1 * t3265 + (t2449 + t2416 + (-t3274 + 0.2e1 * t3351) * pkin(3)) * t3527) * t2919 + (t2834 + (t2696 + t3823) * t2942) * t3614 - t3023)) * t2542 + ((t3363 * t3599 - 0.2e1 * t3063) * t3615 + (0.2e1 * ((t2858 / 0.2e1 + t2827 + t2755 + t3102) * t3613 + t3107) * t3569 + t3126 * t3264) * t2951 + (t2542 * (t2880 + (t2721 + t3054) * t2942) * t3505 + t2743 * (t2416 - t3156 + t3451)) * t2918 + t2542 * t3063) * t2494) / ((t2691 * t2950 + t3345) * t2918 + t3026) * t2985;
t3177 = -0.2e1 * t3263;
t2403 = pkin(6) * t3177 + t2485;
t2761 = t2851 + t2973;
t2530 = t2761 * t3177;
t2872 = pkin(1) * t2912;
t3066 = t3754 * t3535;
t3079 = -t3659 - t2485;
t3149 = pkin(2) * t2719;
t3098 = pkin(2) * t3176;
t3169 = (t2482 + t2506 + t3098) * t2912 - t2482;
t3204 = t2786 * t3483;
t3220 = t2919 * t3521;
t3224 = t2912 * t3542;
t3262 = t2542 * t2809;
t3283 = t2941 * t3648;
t3289 = ((0.2e1 * t2574 + 0.2e1 * t2575 + 0.2e1 * t2584 - t3615) * t2888 + t3650 + t3615 - t2542) * t3535;
t3305 = (t2851 + t2972) * t3728;
t3310 = t2527 * t2864;
t3315 = t2494 * t2864;
t3326 = pkin(6) * t3613;
t3327 = pkin(6) * t3614;
t3371 = 0.2e1 * t3483;
t3412 = 0.2e1 * t3750;
t3419 = t2824 + t2984;
t2338 = (t2392 * t2950 * t3220 + ((t2833 * t3535 + t2950 * t3809) * t2888 + t2942 * t2950 * t3191 - t3066) * t2494 + (((-0.4e1 / 0.3e1 + t2912) * t3535 + ((-0.2e1 / 0.3e1 * t2824 + t3432) * t2912 + 0.2e1 / 0.3e1 * t3149 + 0.4e1 / 0.3e1 * t2824 + t3195) * t2950 - 0.2e1 / 0.3e1 * t3602) * t3783 + (-0.3e1 * t3066 + ((t2713 + t3419) * t3777 + (-pkin(2) * t3461 - t3772) * t3774 - 0.2e1 * t2755 - t2695) * t2950) * t2919 - t3029 * t3853 * t3705) * t2542 + (t3820 * t2888 + (pkin(2) * t3753 + 0.2e1 * t2719) * t3326 + ((t3566 + (t2961 + t3042) * pkin(1)) * t3650 + (-t3753 * t2880 + ((t2813 - t3224) * t2888 + t3224 + t2696) * t2942 + (pkin(1) * t3371 + ((t2911 - t2951) * t3853 - 0.2e1 * t2911 + t3774) * t2961) * pkin(2)) * t2542) * t2918 - t3820) * t2941 + (t2403 * t2888 - t3837 - t3659 - t2403 + (t2888 * t3079 - t3079 + t3837) * t2912 + (t2542 * t3849 * t3782 + (-t2488 * t2951 - 0.3e1 * t2485 - t3662) * t2888 + (-(t2500 + 0.4e1 * t3735) * t2912 - (-t3348 + t3412) * t2951 + 0.2e1 * t2500 + t2536) * t2919 + t3662 + t2485) * t2910 + ((-(-0.4e1 * t3327 - t3665) * t2910 - t3665) * t2888 + (-(0.4e1 * t3262 - (t2482 + t3794) * t2918) * t2910 + 0.2e1 * t3262 - t2527 * t3519) * t2919 - (0.2e1 * t3327 + t3665) * t2910 + t3665) * t2942 + (((t3794 - t3169) * t2888 - 0.4e1 * t3326 - t2503 - t2506 + ((0.2e1 * t2521 + t3310) * t2888 - t3310) * t2942 + (((pkin(1) * t3648 - t3814) * t2951 + t3648 * t2978) * t2919 + ((-0.4e1 * t2809 + 0.2e1 * t3464 + 0.4e1 * t3728) * t2888 - 0.2e1 * t3464 + t2752 * t3774) * t2542) * t2918 + t3169) * t2950 + (-t2542 + 0.4e1 * t3616 + 0.2e1 * t3650) * t2918 * t3336) * t2941) * pkin(3)) / (t2638 + (t2650 * t2950 + t3069) * t2918) * t2542 + ((-t3289 - ((t2530 + t2494 * (t2861 + t2979)) * t2919 + (-t3310 - t3868) * t2918) * t3713 + ((-pkin(1) * t3315 + t2752 * t3309 - t2494 * (t2755 + t2814)) * t2919 + (-t2386 * t3704 + t2942 * t3316) * t2918) * t2950 + t2694 * t2389 * t2918) * t2494 + (t2494 * t2694 * t3534 + (t3322 * t3649 + (pkin(1) * t3283 + t2389) * t2919) * t2950 + (-t3315 + (t3309 - t3814) * t2942 - t2488) * t2918 - t2527 * (t2861 + pkin(2)) * t2919) * t3719 + ((-((-t2860 + (-t3461 + pkin(1)) * t2951 + t2978) * t2888 + t3849) * t3713 + (-(t2912 * t3716 - t2824 - t3809) * t2888 + (((t2867 - t2961) * t2851 - t3703) * t2951 + 0.3e1 * t3305) * t3532 + t3543 * t3716) * t2950 - t3849 * t3580 - (-pkin(1) * t3042 - t2880 - t3566) * t2918 * t3511 + t3602) * t2494 + ((-(-t2864 + t2872 + t2980 - t3481) * t3532 - t3240 * t3704) * t2910 + (t2785 * t3220 + ((t2885 * t2912 + t3339 / 0.2e1 + t2752) * t3853 - t2653) * t2941) * t2950 + (t2872 - t2743) * t3532 + t2888 * t3204 - t3204) * t3719) * t2542) * t2605;
t2407 = t2494 + t3613;
t2602 = 0.1e1 / ((t2647 * t2918 + t2668) * t2950 + t3095);
t3045 = t3224 + t3419;
t3159 = pkin(2) * t3283;
t2344 = ((-t3156 * t2950 + (pkin(2) * t3408 + t2814 * t2950 + t3535) * t2407) * t2494 - ((t2407 * t3485 - t3719) * t2950 - t3738) * t3719) * t2602 + ((t3289 + (((t2974 + t3429) * t3781 + 0.2e1 * t2860 + t3596 - pkin(2)) * t3713 + (-(-t2986 + t3045 + 0.2e1 * t3149) * t2888 + pkin(2) * t3596 + t2755 + t2917 + t3045) * t2950 + (t2785 - t3580) * pkin(2)) * t2542 + ((t2530 + 0.2e1 * t2485) * t3713 + (t2494 * t2814 - t3156) * t2950) * t2919) * t2605 + (((-t3159 + t3668) * pkin(2) + ((0.2e1 * t2761 * t2809 - 0.3e1 * t3305) * t2950 + t2941 * t3700) * t3613 + (-(t2448 + t2506) * t3533 + (-0.2e1 * t3159 + t3668) * t2950) * pkin(3)) * t2605 + (-(t2910 * t3461 + t2951 * t3844) * t3719 + (t3700 + ((t2809 - 0.2e1 * t3728) * t2950 - t3336) * pkin(3)) * t3649) * t2602) * t2918) * t2542;
t3166 = t2942 * t2838 + t2956;
t3299 = pkin(7) + t2867;
t3426 = t2835 * t2942 + t2955;
t2599 = -((-t2768 * t2951 - t3166) * t2950 + (t2771 * t2951 + t3426) * t2941 - Ifges(3,3) * t2951) * t2918 + t2919 * ((mrSges(3,2) * t3299 - Ifges(3,6)) * t2950 + t2941 * (mrSges(3,1) * t3299 - Ifges(3,5)));
t3137 = t2494 * t3263;
t3217 = t2930 * t3527;
t3381 = pkin(2) * t3696;
t2467 = -0.2e1 * t3680;
t3433 = t2542 * t3217 + t2467;
t3457 = -Ifges(3,3) * t2335 + t2338 * t2659 + t2344 * t2599 + (-t3841 + (t2494 * t3217 + t2919 * t3433) * t2542 + (t2833 * t2888 - t3754) * t3838) * t3860 + (-(mrSges(3,2) * t3367 + t2767 * t2833 + t2835 * t3483 - t3764) * t3630 + 0.2e1 * (t3092 * t2494 + (t2951 * t3761 + (t3395 + t3763) * t2942) * t3614) * t3613 + (t3137 * t3797 + (t3629 - (t2542 - t2494) * (t2542 + t2494)) * t2930) * t2941 + (t2494 * t3376 + t2542 * t3426) * t3611 + t3098 * t3696 - mrSges(3,1) * t3710 + t3832 * t3765) * t2950 - ((mrSges(3,1) * t3367 + t2838 * t3483 + t2953) * t2941 + Ifges(3,4) * t2833) * t3630 - ((-0.2e1 * t3381 + (t2770 * t2942 - t2835 * t2951) * t3614) * t2941 + t3433) * t3613 + ((t2494 * t3377 + t2542 * t3166) * t3611 + mrSges(3,2) * t3710 + (mrSges(3,1) * t3832 + t3137 * t3798) * pkin(2)) * t2941 + Ifges(3,4) * t3629 - t2882 * t3137 - t3838 + t3841;
t3425 = 0.2e1 * t2740;
t3418 = -0.2e1 * t2953 + t2893;
t3411 = -0.2e1 * t3746;
t3401 = Ifges(3,4) * t3393;
t3400 = -0.4e1 * t3685;
t3398 = -0.4e1 * t3684;
t3396 = -0.4e1 * t3683;
t3392 = mrSges(3,2) * t3745;
t3391 = mrSges(3,1) * t3752;
t3390 = mrSges(3,1) * t3751;
t3389 = mrSges(3,1) * t3750;
t3388 = pkin(2) * t3694;
t3387 = pkin(2) * t3693;
t3386 = pkin(2) * t3692;
t3384 = mrSges(3,2) * t2483;
t3382 = mrSges(3,2) * t2484;
t3380 = mrSges(3,2) * t2485;
t3379 = -t3766 / 0.2e1;
t3378 = -t3765 / 0.2e1;
t3375 = -0.2e1 * t3532;
t2966 = m(3) * t2986;
t3370 = t2966 + t3851;
t3366 = t2540 * t3749;
t3365 = t2541 * t3748;
t3364 = t2542 * t3747;
t3304 = t2525 * t3688;
t3303 = t2526 * t3687;
t3302 = t2527 * t3686;
t2420 = t2492 * t2765;
t2421 = t2493 * t2766;
t2422 = t2494 * t2767;
t2522 = t2525 ^ 2;
t2396 = t2489 + t2522;
t2408 = t3870 * t2492;
t2417 = t2740 * t2492;
t2423 = t2492 * t2815;
t2438 = t2835 * t2492;
t2441 = t2838 * t2492;
t2453 = -0.2e1 * t3384;
t2454 = 0.2e1 * t3385;
t2633 = t3873 * t2945;
t2774 = -0.2e1 * t3388;
t2896 = 0.2e1 * t3767;
t2965 = m(3) * t2982;
t3175 = -t2965 - t2966 + t3850;
t3050 = t3175 - t3831;
t2591 = -((t2944 * t3828 + t3865) * t2936 + t2633) * t2918 - t2919 * (t2774 + t2896 + (t2815 * t2936 + (mrSges(3,1) * t2944 - t2714) * t2945) * pkin(1) - t3050);
t2621 = -0.2e1 * t3688 + (t3094 + t3764) * t2944 - t3034;
t2897 = -0.2e1 * t3767;
t3060 = Ifges(2,2) + Ifges(3,3) - t2965 + t3370;
t2688 = t2897 + t3060;
t2624 = t2774 + t2688 + t3831;
t2772 = 0.2e1 * t2770;
t2773 = 0.2e1 * t3388;
t2794 = t3768 / 0.4e1 - Ifges(3,6) / 0.4e1;
t2836 = 0.2e1 * t2835;
t2837 = 0.2e1 * t2838;
t2883 = -Ifges(3,3) - t2930;
t2895 = 0.2e1 * t2956;
t2931 = 0.2e1 * t2930;
t2998 = -t2963 * t2987 - Ifges(1,3) + t2897 - t2965 + t3822 + t3851;
t3035 = t3370 + t3822 - t3850;
t3036 = t2896 - t3060;
t3136 = t2930 * t3282;
t3091 = -0.2e1 * t3136;
t3190 = t2603 * ((-(t3773 - 0.2e1 * t3685) * t2944 - ((t2773 + t3036 - t3831) * t2904 - t2642 * t3373 + t2931 * t2902 + (t3418 + 0.4e1 * t3685) * t2944 - t2772 * t2935 + t3035) * t2888 + t2762 + t2935 * t3673 + t2936 * t3411 + (-t2621 * t2936 + t2633) * t3375 + t2998 - t2624 * t2904 - ((t2837 * t2936 + t2895) * t2944 + (-t2836 * t2935 + t3425) * t2936 - 0.2e1 * t3749) * t2945) * t2342 + t2591 * t2336 + t2597 * t2333 + (t3304 + (t2441 + (-t2765 / 0.2e1 + t3378) * t2525) * t2944 + (t2525 * t3379 - t2438) * t2935 + t2417 - t3691 / 0.2e1) * t3246 * t3790 + (((t2423 + (-mrSges(3,2) * t2944 - t3679) * t3793) * t2486 + ((-t2420 + t3561) * t2944 - t3565 * t2935 + (-t2770 * t2944 + t3865) * t2492) * t2540 * t3393) * t2919 + t2489 * t2902 * t3401 + ((t2489 * t3828 + t2522 * t2771) * t2918 + t2540 * t2525 * t3675) * t2944 + ((-t2489 * t2769 + t2522 * t2768) * t2935 - t2489 * t2708) * t2918 + (-mrSges(3,1) * t3645 + t2423) * t3414 + t3859 * ((t2454 + t3565) * t2944 + (t2453 + t3561) * t2935 + (t2944 * t3399 + t2688 + t2762) * t2492) * t3624) * t2945 + 0.2e1 * (-t2438 * t2935 + t2441 * t2944 + t2417 + ((-t2770 - 0.2e1 * t2765) * t2944 - t3589 + (0.4e1 * t2902 - 0.2e1) * Ifges(3,4)) * t2525) * t3628 + ((t3136 * t3790 + (-0.8e1 * (t2794 * t2492 + (t3685 + t3762) * t2525) * t3626 - t2396 * t2956) * t2944 - 0.2e1 * ((-t2525 * t2770 + t2441) * t2935 + t2408 - t2525 * t2930) * t3626 - (-t2396 * t3694 + t2489 * t2848) * pkin(1)) * t2936 + ((-t2420 - t3384 - t3561 / 0.2e1) * t2944 + (-t3385 + t3565 / 0.2e1) * t2935 + (t3862 - 0.1e1) * t3682) * t3793) * t2919 + ((t2731 * t2918 + t2944 * t3562) * (-t2489 + t2522) + (t3091 + (-0.2e1 * t3391 + (t3400 + t3773) * t3646) * t2944 + (-t2525 * t2883 + t3645 * t3672 - t2408) * t2918 + 0.2e1 * t3366) * t2492) * t2936 + t3304 * t3790 + (t2522 * t3392 + (t2441 + (-t2765 - t3764) * t2525) * t3789) * t2944 + mrSges(3,1) * t2522 * t3362 + ((mrSges(3,2) * t2516 - t2438) * t2935 + t2417 - t3691) * t3789);
t2523 = t2526 ^ 2;
t2397 = t2490 + t2523;
t2409 = t3870 * t2493;
t2418 = t2740 * t2493;
t2424 = t2493 * t2815;
t2439 = t2835 * t2493;
t2442 = t2838 * t2493;
t2455 = -0.2e1 * t3382;
t2456 = 0.2e1 * t3383;
t2634 = t3872 * t2948;
t2776 = -0.2e1 * t3387;
t3049 = t3175 - t3830;
t2592 = -((t2947 * t3827 + t3864) * t2939 + t2634) * t2918 - t2919 * (t2776 + t2896 + (t2815 * t2939 + (mrSges(3,1) * t2947 - t2715) * t2948) * pkin(1) - t3049);
t2622 = -0.2e1 * t3687 + (t3093 + t3764) * t2947 - t3033;
t2625 = t2776 + t2688 + t3830;
t2775 = 0.2e1 * t3387;
t3135 = t2930 * t3279;
t3090 = -0.2e1 * t3135;
t3189 = t2604 * ((-(t3773 - 0.2e1 * t3684) * t2947 - ((t2775 + t3036 - t3830) * t2908 - t2643 * t3372 + t2931 * t2906 + (t3418 + 0.4e1 * t3684) * t2947 - t2772 * t2938 + t3035) * t2888 + t2763 + t2938 * t3673 + t2939 * t3411 + (-t2622 * t2939 + t2634) * t3375 + t2998 - t2625 * t2908 - ((t2837 * t2939 + t2895) * t2947 + (-t2836 * t2938 + t3425) * t2939 - 0.2e1 * t3748) * t2948) * t2343 + t2592 * t2337 + t2598 * t2334 + (t3303 + (t2442 + (-t2766 / 0.2e1 + t3378) * t2526) * t2947 + (t2526 * t3379 - t2439) * t2938 + t2418 - t3690 / 0.2e1) * t3245 * t3788 + (((t2424 + (-mrSges(3,2) * t2947 - t3678) * t3792) * t2487 + ((-t2421 + t3560) * t2947 - t3564 * t2938 + (-t2770 * t2947 + t3864) * t2493) * t2541 * t3393) * t2919 + t2490 * t2906 * t3401 + ((t2490 * t3827 + t2523 * t2771) * t2918 + t2541 * t2526 * t3675) * t2947 + ((-t2490 * t2769 + t2523 * t2768) * t2938 - t2490 * t2708) * t2918 + (-mrSges(3,1) * t3641 + t2424) * t3413 + t3859 * ((t2456 + t3564) * t2947 + (t2455 + t3560) * t2938 + (t2947 * t3397 + t2688 + t2763) * t2493) * t3618) * t2948 + 0.2e1 * (-t2439 * t2938 + t2442 * t2947 + t2418 + ((-t2770 - 0.2e1 * t2766) * t2947 - t3588 + (0.4e1 * t2906 - 0.2e1) * Ifges(3,4)) * t2526) * t3622 + ((t3135 * t3788 + (-0.8e1 * (t2794 * t2493 + (t3684 + t3762) * t2526) * t3620 - t2397 * t2956) * t2947 - 0.2e1 * ((-t2526 * t2770 + t2442) * t2938 + t2409 - t2526 * t2930) * t3620 - (-t2397 * t3693 + t2490 * t2848) * pkin(1)) * t2939 + ((-t2421 - t3382 - t3560 / 0.2e1) * t2947 + (-t3383 + t3564 / 0.2e1) * t2938 + (t3861 - 0.1e1) * t3681) * t3792) * t2919 + ((t2732 * t2918 + t2947 * t3562) * (-t2490 + t2523) + (t3090 + (-0.2e1 * t3390 + (t3398 + t3773) * t3642) * t2947 + (-t2526 * t2883 + t3641 * t3672 - t2409) * t2918 + 0.2e1 * t3365) * t2493) * t2939 + t3303 * t3788 + (t2523 * t3392 + (t2442 + (-t2766 - t3764) * t2526) * t3787) * t2947 + mrSges(3,1) * t2523 * t3361 + ((mrSges(3,2) * t2517 - t2439) * t2938 + t2418 - t3690) * t3787);
t2524 = t2527 ^ 2;
t2398 = t2491 + t2524;
t2410 = t3870 * t2494;
t2419 = t2740 * t2494;
t2425 = t2494 * t2815;
t2440 = t2835 * t2494;
t2443 = t2838 * t2494;
t2457 = -0.2e1 * t3380;
t2458 = 0.2e1 * t3381;
t2635 = t3871 * t2951;
t2778 = -0.2e1 * t3386;
t3048 = t3175 - t3829;
t2593 = -((t2950 * t3826 + t3863) * t2942 + t2635) * t2918 - t2919 * (t2778 + t2896 + (t2815 * t2942 + (mrSges(3,1) * t2950 - t2716) * t2951) * pkin(1) - t3048);
t2623 = -0.2e1 * t3686 + (t3092 + t3764) * t2950 - t3032;
t2626 = t2778 + t2688 + t3829;
t2777 = 0.2e1 * t3386;
t3134 = t2930 * t3276;
t3089 = -0.2e1 * t3134;
t3188 = t2605 * ((-(t3773 - 0.2e1 * t3683) * t2950 - ((t2777 + t3036 - t3829) * t2912 - t2644 * t3371 + t2931 * t2910 + (t3418 + 0.4e1 * t3683) * t2950 - t2772 * t2941 + t3035) * t2888 + t2764 + t2941 * t3673 + t2942 * t3411 + (-t2623 * t2942 + t2635) * t3375 + t2998 - t2626 * t2912 - ((t2837 * t2942 + t2895) * t2950 + (-t2836 * t2941 + t3425) * t2942 - 0.2e1 * t3747) * t2951) * t2344 + t2593 * t2338 + t2599 * t2335 + (t3302 + (t2443 + (-t2767 / 0.2e1 + t3378) * t2527) * t2950 + (t2527 * t3379 - t2440) * t2941 + t2419 - t3689 / 0.2e1) * t3244 * t3786 + (((t2425 + (-mrSges(3,2) * t2950 - t3695) * t3791) * t2488 + ((-t2422 + t3559) * t2950 - t3563 * t2941 + (-t2770 * t2950 + t3863) * t2494) * t2542 * t3393) * t2919 + t2491 * t2910 * t3401 + ((t2491 * t3826 + t2524 * t2771) * t2918 + t2542 * t2527 * t3675) * t2950 + ((-t2491 * t2769 + t2524 * t2768) * t2941 - t2491 * t2708) * t2918 + (-mrSges(3,1) * t3637 + t2425) * t3412 + t3859 * ((t2458 + t3563) * t2950 + (t2457 + t3559) * t2941 + (t2950 * t3395 + t2688 + t2764) * t2494) * t3612) * t2951 + 0.2e1 * (-t2440 * t2941 + t2443 * t2950 + t2419 + ((-t2770 - 0.2e1 * t2767) * t2950 - t3587 + (0.4e1 * t2910 - 0.2e1) * Ifges(3,4)) * t2527) * t3616 + ((t3134 * t3786 + (-0.8e1 * (t2794 * t2494 + (t3683 + t3762) * t2527) * t3614 - t2398 * t2956) * t2950 - 0.2e1 * ((-t2527 * t2770 + t2443) * t2941 + t2410 - t2527 * t2930) * t3614 - (-t2398 * t3692 + t2491 * t2848) * pkin(1)) * t2942 + ((-t2422 - t3380 - t3559 / 0.2e1) * t2950 + (-t3381 + t3563 / 0.2e1) * t2941 + (t3860 - 0.1e1) * t3680) * t3791) * t2919 + ((t2733 * t2918 + t2950 * t3562) * (-t2491 + t2524) + (t3089 + (-0.2e1 * t3389 + (t3396 + t3773) * t3638) * t2950 + (-t2527 * t2883 + t3637 * t3672 - t2410) * t2918 + 0.2e1 * t3364) * t2494) * t2942 + t3302 * t3786 + (t2524 * t3392 + (t2443 + (-t2767 - t3764) * t2527) * t3785) * t2950 + mrSges(3,1) * t2524 * t3360 + ((mrSges(3,2) * t2518 - t2440) * t2941 + t2419 - t3689) * t3785);
t3187 = t2610 * (t2592 * t2343 + (t2775 + t2897 + t3049) * t2337 + t2658 * t2334 - (t2625 * t2939 * t3759 - t2622 * t3532 + t3746) * t2541 * t3617 + (t3872 * t3267 + (-pkin(2) * t3678 - t2947 * t3093 - Ifges(3,4) + t2820) * t3792) * t3619 + (t3090 + (t3390 + (t3398 + t3674) * t3642) * t2947 - (t2776 - t2882) * t3642 - t3365) * t3618 + 0.4e1 * t2493 * t3303 + (-t3058 * t3393 * t3617 + (-0.2e1 * t2421 + t2455 - t3560) * t2947 - (t2456 - t3564) * t2938 + t2466) * t2526 + (-t3632 + (0.2e1 * t3245 + 0.1e1) * t2538) * t2643);
t3186 = t2612 * t3459;
t3185 = t2613 * t3458;
t3184 = (t2591 * t2342 + (t2773 + t2897 + t3050) * t2336 + t2657 * t2333 - (t2624 * t2936 * t3759 - t2621 * t3532 + t3746) * t2540 * t3623 + (t3873 * t3271 + (-pkin(2) * t3679 - t2944 * t3094 - Ifges(3,4) + t2819) * t3793) * t3625 + (t3091 + (t3391 + (t3400 + t3674) * t3646) * t2944 - (t2774 - t2882) * t3646 - t3366) * t3624 + 0.4e1 * t2492 * t3304 + (-t3059 * t3393 * t3623 + (-0.2e1 * t2420 + t2453 - t3561) * t2944 - (t2454 - t3565) * t2935 + t2465) * t2525 + (-t3634 + (0.2e1 * t3246 + 0.1e1) * t2537) * t2642) * t2609;
t3183 = (t2593 * t2344 + (t2777 + t2897 + t3048) * t2338 + t2659 * t2335 - (t2626 * t2942 * t3759 - t2623 * t3532 + t3746) * t2542 * t3611 + (t3871 * t3263 + (-pkin(2) * t3695 - t2950 * t3092 - Ifges(3,4) + t2821) * t3791) * t3613 + (t3089 + (t3389 + (t3396 + t3674) * t3638) * t2950 - (t2778 - t2882) * t3638 - t3364) * t3612 + 0.4e1 * t2494 * t3302 + (-t3057 * t3393 * t3611 + (-0.2e1 * t2422 + t2457 - t3559) * t2950 - (t2458 - t3563) * t2941 + t2467) * t2527 + (-t3630 + (0.2e1 * t3244 + 0.1e1) * t2539) * t2644) * t2611;
t3182 = t3457 * t2614;
t1 = [t2589 * t3188 + t2587 * t3189 + t2585 * t3190 + t2560 * t3183 + t2559 * t3187 + t2558 * t3184 + (t2562 * t3186 + t2564 * t3185 + t2566 * t3182) * t2985; t2590 * t3188 + t2588 * t3189 + t2586 * t3190 + t2557 * t3183 + t2556 * t3187 + t2555 * t3184 + (t2561 * t3186 + t2563 * t3185 + t2565 * t3182) * t2985; t2617 * t3188 + t2616 * t3189 + t2615 * t3190 + t2581 * t3183 + t2580 * t3187 + t2579 * t3184 + (-t3457 * t3608 - t3458 * t3609 - t3459 * t3610) * t3518;];
taucX  = t1;
