% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V2G2A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 02:06:41
% EndTime: 2020-08-07 02:06:57
% DurationCPUTime: 16.06s
% Computational Cost: add. (5322->691), mult. (10725->1188), div. (126->13), fcn. (9474->26), ass. (0->454)
t11132 = cos(qJ(3,3));
t11093 = t11132 * pkin(3);
t11067 = t11093 + pkin(2);
t11135 = cos(qJ(3,2));
t11094 = t11135 * pkin(3);
t11068 = t11094 + pkin(2);
t11138 = cos(qJ(3,1));
t11095 = t11138 * pkin(3);
t11069 = t11095 + pkin(2);
t11139 = cos(qJ(2,1));
t11141 = pkin(8) + pkin(7);
t11078 = t11141 * t11139;
t11130 = sin(qJ(2,1));
t11038 = -pkin(2) * t11130 + t11078;
t11118 = sin(pkin(4));
t11166 = t11118 * t11038;
t11136 = cos(qJ(2,2));
t11077 = t11141 * t11136;
t11127 = sin(qJ(2,2));
t11037 = -pkin(2) * t11127 + t11077;
t11167 = t11118 * t11037;
t11133 = cos(qJ(2,3));
t11076 = t11141 * t11133;
t11124 = sin(qJ(2,3));
t11036 = -pkin(2) * t11124 + t11076;
t11168 = t11118 * t11036;
t11113 = t11133 ^ 2;
t11453 = t11141 * t11113;
t11115 = t11136 ^ 2;
t11452 = t11141 * t11115;
t11117 = t11139 ^ 2;
t11451 = t11141 * t11117;
t11123 = sin(qJ(3,3));
t11269 = t11123 * pkin(6) + pkin(3);
t11112 = t11132 ^ 2;
t11430 = t11112 * pkin(3);
t11434 = pkin(2) * t11132;
t11450 = (-t11269 + 0.2e1 * t11430 + t11434) * t11124 - t11132 * t11076;
t11126 = sin(qJ(3,2));
t11268 = t11126 * pkin(6) + pkin(3);
t11114 = t11135 ^ 2;
t11428 = t11114 * pkin(3);
t11433 = pkin(2) * t11135;
t11449 = (-t11268 + 0.2e1 * t11428 + t11433) * t11127 - t11135 * t11077;
t11129 = sin(qJ(3,1));
t11267 = t11129 * pkin(6) + pkin(3);
t11116 = t11138 ^ 2;
t11426 = t11116 * pkin(3);
t11432 = pkin(2) * t11138;
t11448 = (-t11267 + 0.2e1 * t11426 + t11432) * t11130 - t11138 * t11078;
t11075 = t11141 * t11130;
t11104 = pkin(2) * t11139;
t11289 = t11075 + t11104;
t11035 = pkin(1) + t11289;
t11131 = sin(qJ(1,1));
t11092 = t11129 * pkin(3);
t11202 = (t11117 - 0.2e1) * t11092 - pkin(6);
t11140 = cos(qJ(1,1));
t11345 = t11118 * t11140;
t11447 = t11131 * t11035 + t11202 * t11345;
t11074 = t11141 * t11127;
t11103 = pkin(2) * t11136;
t11290 = t11074 + t11103;
t11034 = pkin(1) + t11290;
t11128 = sin(qJ(1,2));
t11091 = t11126 * pkin(3);
t11203 = (t11115 - 0.2e1) * t11091 - pkin(6);
t11137 = cos(qJ(1,2));
t11347 = t11118 * t11137;
t11446 = t11128 * t11034 + t11203 * t11347;
t11073 = t11141 * t11124;
t11102 = pkin(2) * t11133;
t11291 = t11073 + t11102;
t11033 = pkin(1) + t11291;
t11125 = sin(qJ(1,3));
t11090 = t11123 * pkin(3);
t11204 = (t11113 - 0.2e1) * t11090 - pkin(6);
t11134 = cos(qJ(1,3));
t11349 = t11118 * t11134;
t11445 = t11125 * t11033 + t11204 * t11349;
t11119 = cos(pkin(4));
t11109 = t11119 ^ 2;
t11444 = -0.2e1 * t11109 + 0.1e1;
t11443 = pkin(1) * t11067;
t11442 = pkin(1) * t11068;
t11441 = pkin(1) * t11069;
t11440 = pkin(1) * t11119;
t11439 = pkin(2) * t11119;
t11436 = pkin(2) * t11129;
t11431 = g(1) * t11118;
t11429 = t11113 * pkin(2);
t11427 = t11115 * pkin(2);
t11425 = t11117 * pkin(2);
t11424 = t11118 * g(2);
t11423 = t11123 * pkin(2);
t11422 = t11126 * pkin(2);
t11111 = pkin(2) - t11141;
t11110 = pkin(2) + t11141;
t11324 = t11125 * t11141;
t11023 = t11134 * pkin(2) + t11119 * t11324;
t11026 = -pkin(6) * t11141 * t11118 - pkin(1) * t11439;
t11054 = t11073 + pkin(1);
t11058 = pkin(1) * t11124 + t11141;
t11061 = t11090 + pkin(6);
t11062 = t11090 - pkin(6);
t11144 = pkin(2) ^ 2;
t11331 = t11119 * t11141;
t11211 = 0.2e1 * pkin(2) * t11331;
t11326 = t11125 * t11124;
t11244 = t11119 * t11326;
t11360 = t11110 * t11111;
t11251 = t11119 * t11360;
t11343 = t11119 * t11124;
t11281 = pkin(1) * t11343;
t11285 = pkin(6) * t11430;
t11288 = pkin(1) * t11090;
t11292 = -0.2e1 * t11439;
t11039 = pkin(1) + 0.2e1 * t11073;
t11307 = t11134 * t11039;
t11330 = t11123 * t11118;
t11353 = t11118 * t11124;
t11356 = t11118 * t11061;
t11142 = pkin(3) ^ 2;
t11359 = t11112 * t11142;
t11057 = pkin(1) * t11331;
t11382 = t11057 * t11132;
t11421 = ((t11125 * t11211 + 0.2e1 * t11023 * t11093 + (t11359 + t11360) * t11134) * t11113 + (-t11244 * t11359 + ((t11124 * t11292 + t11356) * t11125 + t11307) * t11093 + (pkin(2) * t11356 - t11124 * t11251) * t11125 + pkin(2) * t11307) * t11133 + (t11134 * t11058 + (t11061 * t11353 - t11067 * t11119) * t11125) * t11141) / ((t11382 + (t11062 * t11434 + t11123 * t11144 - t11285) * t11118) * t11133 - t11281 * t11430 + (t11026 * t11124 + t11118 * t11288) * t11132 + pkin(2) * t11054 * t11330);
t11317 = t11128 * t11141;
t11024 = t11137 * pkin(2) + t11119 * t11317;
t11055 = t11074 + pkin(1);
t11059 = pkin(1) * t11127 + t11141;
t11063 = t11091 + pkin(6);
t11064 = t11091 - pkin(6);
t11319 = t11128 * t11127;
t11237 = t11119 * t11319;
t11340 = t11119 * t11127;
t11280 = pkin(1) * t11340;
t11284 = pkin(6) * t11428;
t11287 = pkin(1) * t11091;
t11040 = pkin(1) + 0.2e1 * t11074;
t11301 = t11137 * t11040;
t11323 = t11126 * t11118;
t11352 = t11118 * t11127;
t11355 = t11118 * t11063;
t11358 = t11114 * t11142;
t11381 = t11057 * t11135;
t11420 = ((t11128 * t11211 + 0.2e1 * t11024 * t11094 + (t11358 + t11360) * t11137) * t11115 + (-t11237 * t11358 + ((t11127 * t11292 + t11355) * t11128 + t11301) * t11094 + (pkin(2) * t11355 - t11127 * t11251) * t11128 + pkin(2) * t11301) * t11136 + (t11137 * t11059 + (t11063 * t11352 - t11068 * t11119) * t11128) * t11141) / ((t11381 + (t11064 * t11433 + t11126 * t11144 - t11284) * t11118) * t11136 - t11280 * t11428 + (t11026 * t11127 + t11118 * t11287) * t11135 + pkin(2) * t11055 * t11323);
t11310 = t11131 * t11141;
t11025 = t11140 * pkin(2) + t11119 * t11310;
t11056 = t11075 + pkin(1);
t11060 = pkin(1) * t11130 + t11141;
t11065 = t11092 + pkin(6);
t11066 = t11092 - pkin(6);
t11312 = t11131 * t11130;
t11230 = t11119 * t11312;
t11337 = t11119 * t11130;
t11279 = pkin(1) * t11337;
t11283 = pkin(6) * t11426;
t11286 = pkin(1) * t11092;
t11041 = pkin(1) + 0.2e1 * t11075;
t11296 = t11140 * t11041;
t11316 = t11129 * t11118;
t11351 = t11118 * t11130;
t11354 = t11118 * t11065;
t11357 = t11116 * t11142;
t11380 = t11057 * t11138;
t11419 = ((t11131 * t11211 + 0.2e1 * t11025 * t11095 + (t11357 + t11360) * t11140) * t11117 + (-t11230 * t11357 + ((t11130 * t11292 + t11354) * t11131 + t11296) * t11095 + (pkin(2) * t11354 - t11130 * t11251) * t11131 + pkin(2) * t11296) * t11139 + (t11140 * t11060 + (t11065 * t11351 - t11069 * t11119) * t11131) * t11141) / ((t11380 + (t11066 * t11432 + t11129 * t11144 - t11283) * t11118) * t11139 - t11279 * t11426 + (t11026 * t11130 + t11118 * t11286) * t11138 + pkin(2) * t11056 * t11316);
t11308 = t11132 * t11119;
t11229 = t11124 * t11308;
t11008 = t11229 - t11330;
t11120 = legFrame(3,2);
t11084 = sin(t11120);
t11087 = cos(t11120);
t11027 = t11084 * g(1) + t11087 * g(2);
t11030 = t11087 * g(1) - t11084 * g(2);
t11305 = t11134 * t11133;
t11309 = t11132 * t11118;
t11325 = t11125 * t11133;
t11344 = t11119 * t11123;
t10948 = (-t11008 * t11125 + t11132 * t11305) * g(3) + t11030 * (t11008 * t11134 + t11132 * t11325) + t11027 * (t11124 * t11309 + t11344);
t11042 = t11132 * pkin(6) - t11423;
t10963 = 0.1e1 / ((-t11067 * t11042 * t11118 + t11382) * t11133 + (-t11042 * t11073 + t11123 * t11443) * t11118 - t11229 * t11443);
t11418 = t10948 * t10963;
t11303 = t11135 * t11118;
t11322 = t11126 * t11127;
t11006 = t11119 * t11322 + t11303;
t11299 = t11137 * t11136;
t11015 = -t11237 + t11299;
t11121 = legFrame(2,2);
t11085 = sin(t11121);
t11088 = cos(t11121);
t11028 = t11085 * g(1) + t11088 * g(2);
t11031 = t11088 * g(1) - t11085 * g(2);
t11302 = t11135 * t11119;
t11318 = t11128 * t11136;
t10949 = (t11015 * t11126 - t11128 * t11303) * g(3) + t11031 * (t11006 * t11137 + t11126 * t11318) - t11028 * (-t11118 * t11322 + t11302);
t11043 = t11135 * pkin(6) - t11422;
t11224 = t11127 * t11302;
t10964 = 0.1e1 / ((-t11068 * t11043 * t11118 + t11381) * t11136 + (-t11043 * t11074 + t11126 * t11442) * t11118 - t11224 * t11442);
t11417 = t10949 * t10964;
t11009 = t11224 - t11323;
t11341 = t11119 * t11126;
t10950 = g(3) * (-t11009 * t11128 + t11135 * t11299) + (t11009 * t11137 + t11135 * t11318) * t11031 + t11028 * (t11127 * t11303 + t11341);
t11416 = t10950 * t10964;
t11333 = t11119 * t11138;
t11219 = t11130 * t11333;
t11010 = t11219 - t11316;
t11122 = legFrame(1,2);
t11086 = sin(t11122);
t11089 = cos(t11122);
t11029 = t11086 * g(1) + t11089 * g(2);
t11032 = t11089 * g(1) - t11086 * g(2);
t11294 = t11140 * t11139;
t11297 = t11138 * t11118;
t11311 = t11131 * t11139;
t11338 = t11119 * t11129;
t10951 = g(3) * (-t11010 * t11131 + t11138 * t11294) + (t11010 * t11140 + t11138 * t11311) * t11032 + t11029 * (t11130 * t11297 + t11338);
t11044 = t11138 * pkin(6) - t11436;
t10965 = 0.1e1 / ((-t11069 * t11044 * t11118 + t11380) * t11139 + (-t11044 * t11075 + t11129 * t11441) * t11118 - t11219 * t11441);
t11415 = t10951 * t10965;
t11329 = t11123 * t11124;
t11005 = t11119 * t11329 + t11309;
t11014 = -t11244 + t11305;
t10952 = g(3) * (t11014 * t11123 - t11125 * t11309) + t11030 * (t11005 * t11134 + t11123 * t11325) - t11027 * (-t11118 * t11329 + t11308);
t11414 = t10952 * t10963;
t11315 = t11129 * t11130;
t11007 = t11119 * t11315 + t11297;
t11016 = -t11230 + t11294;
t10953 = g(3) * (t11016 * t11129 - t11131 * t11297) + (t11007 * t11140 + t11129 * t11311) * t11032 - t11029 * (-t11118 * t11315 + t11333);
t11413 = t10953 * t10965;
t11274 = t11035 * t11436;
t11346 = t11118 * t11139;
t10957 = 0.1e1 / (-(pkin(6) * t11346 + t11279) * t11426 + ((-pkin(6) * t11075 + t11066 * t11104 + t11286) * t11118 + t11038 * t11440) * t11138 + t11118 * t11274);
t11295 = t11140 * t11130;
t11013 = t11119 * t11295 + t11311;
t11236 = t11129 * t11294;
t11412 = t10957 * (-g(3) * (t11013 * t11129 + t11140 * t11297) + t11032 * (-t11007 * t11131 + t11236));
t11314 = t11129 * t11140;
t11216 = t11118 * t11314;
t11231 = t11131 * t11316;
t11411 = t10957 * (g(3) * (t11013 * t11138 - t11216) - t11032 * (t11016 * t11138 + t11231));
t10998 = -g(3) * t11131 + t11032 * t11140;
t11001 = g(3) * t11140 + t11032 * t11131;
t11410 = t10957 * (-t10998 * t11139 + t11001 * t11337);
t11409 = t10957 * (t11001 * t11139 * t11119 + t10998 * t11130);
t11408 = t10957 * t10998;
t11407 = t10957 * t11001;
t11278 = t11033 * t11423;
t11350 = t11118 * t11133;
t10958 = 0.1e1 / (-(pkin(6) * t11350 + t11281) * t11430 + ((-pkin(6) * t11073 + t11062 * t11102 + t11288) * t11118 + t11036 * t11440) * t11132 + t11118 * t11278);
t11306 = t11134 * t11124;
t11011 = t11119 * t11306 + t11325;
t11250 = t11123 * t11305;
t11406 = t10958 * (-g(3) * (t11011 * t11123 + t11134 * t11309) + t11030 * (-t11005 * t11125 + t11250));
t11328 = t11123 * t11134;
t11226 = t11118 * t11328;
t11245 = t11125 * t11330;
t11405 = t10958 * (g(3) * (t11011 * t11132 - t11226) - t11030 * (t11014 * t11132 + t11245));
t10996 = -g(3) * t11125 + t11030 * t11134;
t10999 = g(3) * t11134 + t11030 * t11125;
t11404 = t10958 * (-t11133 * t10996 + t10999 * t11343);
t11403 = t10958 * (t10999 * t11133 * t11119 + t10996 * t11124);
t11402 = t10958 * t10996;
t11401 = t10958 * t10999;
t11276 = t11034 * t11422;
t11348 = t11118 * t11136;
t10959 = 0.1e1 / (-(pkin(6) * t11348 + t11280) * t11428 + ((-pkin(6) * t11074 + t11064 * t11103 + t11287) * t11118 + t11037 * t11440) * t11135 + t11118 * t11276);
t11300 = t11137 * t11127;
t11012 = t11119 * t11300 + t11318;
t11321 = t11126 * t11137;
t11221 = t11118 * t11321;
t11238 = t11128 * t11323;
t11400 = t10959 * ((t11012 * t11135 - t11221) * g(3) - t11031 * (t11015 * t11135 + t11238));
t11243 = t11126 * t11299;
t11399 = t10959 * (-g(3) * (t11012 * t11126 + t11137 * t11303) + t11031 * (-t11006 * t11128 + t11243));
t10997 = -g(3) * t11128 + t11031 * t11137;
t11000 = g(3) * t11137 + t11031 * t11128;
t11398 = t10959 * (-t10997 * t11136 + t11000 * t11340);
t11397 = t10959 * (t11000 * t11136 * t11119 + t10997 * t11127);
t11396 = t10959 * t10997;
t11395 = t10959 * t11000;
t11070 = t11102 + pkin(1);
t10960 = 0.1e1 / ((-t11133 * t11285 + (-pkin(6) * t11291 + t11070 * t11090) * t11132 + t11278) * t11118 + (-t11067 * t11124 + t11076) * pkin(1) * t11308);
t11335 = t11119 * t11134;
t11342 = t11119 * t11125;
t11394 = t10960 * (((-g(1) * t11335 - t11424) * t11087 + (g(2) * t11335 - t11431) * t11084 + g(3) * t11342) * t11133 + t11124 * t10999);
t11045 = t11119 * t11305;
t11393 = t10960 * (g(3) * (t11119 * t11325 + t11306) - t11030 * (t11045 - t11326) - t11027 * t11350);
t11392 = t10960 * (g(3) * t11014 + t11030 * t11011 + t11027 * t11353);
t11071 = t11103 + pkin(1);
t10961 = 0.1e1 / ((-t11136 * t11284 + (-pkin(6) * t11290 + t11071 * t11091) * t11135 + t11276) * t11118 + (-t11068 * t11127 + t11077) * pkin(1) * t11302);
t11334 = t11119 * t11137;
t11339 = t11119 * t11128;
t11391 = t10961 * (((-g(1) * t11334 - t11424) * t11088 + (g(2) * t11334 - t11431) * t11085 + g(3) * t11339) * t11136 + t11127 * t11000);
t11046 = t11119 * t11299;
t11390 = t10961 * (g(3) * (t11119 * t11318 + t11300) - t11031 * (t11046 - t11319) - t11028 * t11348);
t11389 = t10961 * (g(3) * t11015 + t11031 * t11012 + t11028 * t11352);
t11072 = t11104 + pkin(1);
t10962 = 0.1e1 / ((-t11139 * t11283 + (-pkin(6) * t11289 + t11072 * t11092) * t11138 + t11274) * t11118 + (-t11069 * t11130 + t11078) * pkin(1) * t11333);
t11332 = t11119 * t11140;
t11336 = t11119 * t11131;
t11388 = t10962 * (((-g(1) * t11332 - t11424) * t11089 + (g(2) * t11332 - t11431) * t11086 + g(3) * t11336) * t11139 + t11130 * t11001);
t11047 = t11119 * t11294;
t11387 = t10962 * (g(3) * (t11119 * t11311 + t11295) - t11032 * (t11047 - t11312) - t11029 * t11346);
t11386 = t10962 * (g(3) * t11016 + t11032 * t11013 + t11029 * t11351);
t11385 = (t11093 + t11110) * (t11093 + t11111);
t11384 = (t11094 + t11110) * (t11094 + t11111);
t11383 = (t11095 + t11110) * (t11095 + t11111);
t11379 = t11058 * t11125;
t11378 = t11059 * t11128;
t11377 = t11060 * t11131;
t11376 = (t11119 + 0.1e1) * (t11119 - 0.1e1);
t11375 = t11084 * t11067;
t11374 = t11084 * t11124;
t11373 = t11084 * t11134;
t11372 = t11085 * t11068;
t11371 = t11085 * t11127;
t11370 = t11085 * t11137;
t11369 = t11086 * t11069;
t11368 = t11086 * t11130;
t11367 = t11086 * t11140;
t11366 = t11087 * t11067;
t11365 = t11087 * t11134;
t11364 = t11088 * t11068;
t11363 = t11088 * t11137;
t11362 = t11089 * t11069;
t11361 = t11089 * t11140;
t11304 = t11134 * t11141;
t11298 = t11137 * t11141;
t11293 = t11140 * t11141;
t11282 = -0.2e1 * t11376;
t11277 = pkin(3) * t11306;
t11275 = pkin(3) * t11300;
t11273 = pkin(3) * t11295;
t11266 = t11123 * t11394;
t11265 = t11132 * t11394;
t11264 = t11126 * t11391;
t11263 = t11135 * t11391;
t11262 = t11129 * t11388;
t11261 = t11138 * t11388;
t11225 = t11119 * t11304;
t11260 = (t11067 * t11225 - t11125 * t11385 / 0.2e1) * t11113 * t11118;
t11220 = t11119 * t11298;
t11259 = (t11068 * t11220 - t11128 * t11384 / 0.2e1) * t11115 * t11118;
t11215 = t11119 * t11293;
t11258 = (t11069 * t11215 - t11131 * t11383 / 0.2e1) * t11117 * t11118;
t11257 = t11039 * t11067 * t11125;
t11256 = t11040 * t11068 * t11128;
t11255 = t11041 * t11069 * t11131;
t11254 = t11124 * t11385;
t11253 = t11127 * t11384;
t11252 = t11130 * t11383;
t11249 = t11061 * t11374;
t11248 = t11084 * t11353;
t11247 = t11124 * t11087 * t11061;
t11246 = t11087 * t11353;
t11242 = t11063 * t11371;
t11241 = t11085 * t11352;
t11240 = t11127 * t11088 * t11063;
t11239 = t11088 * t11352;
t11235 = t11065 * t11368;
t11234 = t11086 * t11351;
t11233 = t11130 * t11089 * t11065;
t11232 = t11089 * t11351;
t11228 = t11067 * t11373;
t11227 = t11067 * t11365;
t11223 = t11068 * t11370;
t11222 = t11068 * t11363;
t11218 = t11069 * t11367;
t11217 = t11069 * t11361;
t11210 = t11084 * t11277;
t11209 = t11087 * t11277;
t11208 = t11085 * t11275;
t11207 = t11088 * t11275;
t11206 = t11086 * t11273;
t11205 = t11089 * t11273;
t11201 = t11124 * t11269;
t11200 = t11127 * t11268;
t11199 = t11130 * t11267;
t11198 = t11325 * t11353;
t11197 = t11318 * t11352;
t11196 = t11311 * t11351;
t11195 = t11084 * t11254;
t11194 = t11087 * t11254;
t11193 = t11085 * t11253;
t11192 = t11088 * t11253;
t11191 = t11086 * t11252;
t11190 = t11089 * t11252;
t11189 = t11061 * t11228;
t11188 = t11061 * t11227;
t11187 = t11134 * t11249;
t11186 = t11134 * t11247;
t11185 = t11063 * t11223;
t11184 = t11063 * t11222;
t11183 = t11137 * t11242;
t11182 = t11137 * t11240;
t11181 = t11065 * t11218;
t11180 = t11065 * t11217;
t11179 = t11140 * t11235;
t11178 = t11140 * t11233;
t11177 = t11067 * t11113 * t11282;
t11176 = t11068 * t11115 * t11282;
t11175 = t11069 * t11117 * t11282;
t11174 = t11054 * t11133 + t11429;
t11173 = t11055 * t11136 + t11427;
t11172 = t11056 * t11139 + t11425;
t11165 = t11124 * t11076 - pkin(2) + t11429;
t11164 = t11127 * t11077 - pkin(2) + t11427;
t11163 = t11130 * t11078 - pkin(2) + t11425;
t11162 = -(t11124 * t11102 + t11058 - t11453) * t11118 * t11125 + pkin(6) * t11306;
t11161 = -(t11127 * t11103 + t11059 - t11452) * t11118 * t11128 + pkin(6) * t11300;
t11160 = -(t11130 * t11104 + t11060 - t11451) * t11118 * t11131 + pkin(6) * t11295;
t11156 = t11165 * t11328;
t11155 = t11164 * t11321;
t11154 = t11163 * t11314;
t11153 = pkin(3) * t11226 - (pkin(2) * t11335 + t11324) * t11124 + (-t11125 * pkin(2) + t11225) * t11133;
t11152 = pkin(3) * t11221 - (pkin(2) * t11334 + t11317) * t11127 + (-t11128 * pkin(2) + t11220) * t11136;
t11151 = pkin(3) * t11216 - (pkin(2) * t11332 + t11310) * t11130 + (-t11131 * pkin(2) + t11215) * t11139;
t11150 = -pkin(3) * t11344 + t11168;
t11149 = -pkin(3) * t11341 + t11167;
t11148 = -pkin(3) * t11338 + t11166;
t11147 = -t11165 * t11123 - t11204 * t11132;
t11146 = -t11164 * t11126 - t11203 * t11135;
t11145 = -t11163 * t11129 - t11202 * t11138;
t11143 = 0.1e1 / pkin(3);
t11108 = pkin(1) * t11141;
t10995 = t11108 - t11252;
t10994 = t11108 - t11253;
t10993 = t11108 - t11254;
t10968 = -t11016 * t11426 + (-pkin(3) * t11231 - t11025 * t11139 - t11130 * (-pkin(2) * t11336 + t11293)) * t11138 - pkin(2) * t11231;
t10967 = -t11015 * t11428 + (-pkin(3) * t11238 - t11024 * t11136 - t11127 * (-pkin(2) * t11339 + t11298)) * t11135 - pkin(2) * t11238;
t10966 = -t11014 * t11430 + (-pkin(3) * t11245 - t11023 * t11133 - t11124 * (-pkin(2) * t11342 + t11304)) * t11132 - pkin(2) * t11245;
t10947 = (t11086 * t11013 - t11232) * t11426 + (-t11151 * t11086 + t11148 * t11089) * t11138 - (t11086 * t11345 + t11119 * t11089) * t11436;
t10946 = -(t11089 * t11013 + t11234) * t11426 + (t11148 * t11086 + t11151 * t11089) * t11138 + (-t11119 * t11086 + t11089 * t11345) * t11436;
t10945 = (t11085 * t11012 - t11239) * t11428 + (-t11152 * t11085 + t11149 * t11088) * t11135 - (t11085 * t11347 + t11119 * t11088) * t11422;
t10944 = -(t11088 * t11012 + t11241) * t11428 + (t11149 * t11085 + t11152 * t11088) * t11135 + (-t11119 * t11085 + t11088 * t11347) * t11422;
t10943 = (t11084 * t11011 - t11246) * t11430 + (-t11153 * t11084 + t11150 * t11087) * t11132 - (t11084 * t11349 + t11119 * t11087) * t11423;
t10942 = -(t11087 * t11011 + t11248) * t11430 + (t11150 * t11084 + t11153 * t11087) * t11132 + (-t11119 * t11084 + t11087 * t11349) * t11423;
t10941 = ((-t11130 * pkin(3) * t11236 - t11202 * t11336) * t11138 - (t11163 * t11336 + t11140 * (t11072 * t11130 + t11141 - t11451)) * t11129) * t11118 + (t11444 * t11312 + t11047) * t11426 + (t11140 * t11035 + t11038 * t11336) * t11333 + t11131 * t11199 * t11376;
t10940 = ((-t11127 * pkin(3) * t11243 - t11203 * t11339) * t11135 - (t11164 * t11339 + t11137 * (t11071 * t11127 + t11141 - t11452)) * t11126) * t11118 + (t11444 * t11319 + t11046) * t11428 + (t11137 * t11034 + t11037 * t11339) * t11302 + t11128 * t11200 * t11376;
t10939 = ((-t11124 * pkin(3) * t11250 - t11204 * t11342) * t11132 - (t11165 * t11342 + t11134 * (t11070 * t11124 + t11141 - t11453)) * t11123) * t11118 + (t11444 * t11326 + t11045) * t11430 + (t11134 * t11033 + t11036 * t11342) * t11308 + t11125 * t11201 * t11376;
t10935 = 0.2e1 * t11089 * t11258 + (((-t11065 * t11369 - t11140 * t11190) * t11119 - t11089 * t11255) * t11118 + (-t11180 + t11191) * t11109 + t11180 + t10995 * t11086) * t11139 - t11060 * t11369 + (t11086 * t11175 - ((t11217 + t11235) * t11119 + t11089 * t11377) * t11118 - (t11178 - t11369) * t11109 + t11178) * t11141;
t10934 = -0.2e1 * t11086 * t11258 + (((-t11065 * t11362 + t11140 * t11191) * t11119 + t11086 * t11255) * t11118 + (t11181 + t11190) * t11109 - t11181 + t10995 * t11089) * t11139 - t11060 * t11362 + (t11089 * t11175 + ((t11218 - t11233) * t11119 + t11086 * t11377) * t11118 + (t11179 + t11362) * t11109 - t11179) * t11141;
t10933 = 0.2e1 * t11088 * t11259 + (((-t11063 * t11372 - t11137 * t11192) * t11119 - t11088 * t11256) * t11118 + (-t11184 + t11193) * t11109 + t11184 + t10994 * t11085) * t11136 - t11059 * t11372 + (t11085 * t11176 - ((t11222 + t11242) * t11119 + t11088 * t11378) * t11118 - (t11182 - t11372) * t11109 + t11182) * t11141;
t10932 = -0.2e1 * t11085 * t11259 + (((-t11063 * t11364 + t11137 * t11193) * t11119 + t11085 * t11256) * t11118 + (t11185 + t11192) * t11109 - t11185 + t10994 * t11088) * t11136 - t11059 * t11364 + (t11088 * t11176 + ((t11223 - t11240) * t11119 + t11085 * t11378) * t11118 + (t11183 + t11364) * t11109 - t11183) * t11141;
t10931 = 0.2e1 * t11087 * t11260 + (((-t11061 * t11375 - t11134 * t11194) * t11119 - t11087 * t11257) * t11118 + (-t11188 + t11195) * t11109 + t11188 + t10993 * t11084) * t11133 - t11058 * t11375 + (t11084 * t11177 - ((t11227 + t11249) * t11119 + t11087 * t11379) * t11118 - (t11186 - t11375) * t11109 + t11186) * t11141;
t10930 = -0.2e1 * t11084 * t11260 + (((-t11061 * t11366 + t11134 * t11195) * t11119 + t11084 * t11257) * t11118 + (t11189 + t11194) * t11109 - t11189 + t10993 * t11087) * t11133 - t11058 * t11366 + (t11087 * t11177 + ((t11228 - t11247) * t11119 + t11084 * t11379) * t11118 + (t11187 + t11366) * t11109 - t11187) * t11141;
t10929 = (t11145 * t11086 + t11448 * t11361) * t11109 + ((t11089 * t11311 + 0.2e1 * t11234) * t11426 + (-t11086 * t11166 + t11447 * t11089) * t11138 + t11118 * (t11089 * t11154 - t11267 * t11368)) * t11119 - t11116 * t11205 + ((t11117 * t11086 - t11089 * t11196 - t11086) * t11092 - t11086 * pkin(6)) * t11138 + (t11172 * t11086 + t11160 * t11089) * t11129 + t11205;
t10928 = (t11146 * t11085 + t11449 * t11363) * t11109 + ((t11088 * t11318 + 0.2e1 * t11241) * t11428 + (-t11085 * t11167 + t11446 * t11088) * t11135 + t11118 * (t11088 * t11155 - t11268 * t11371)) * t11119 - t11114 * t11207 + ((t11115 * t11085 - t11088 * t11197 - t11085) * t11091 - t11085 * pkin(6)) * t11135 + (t11173 * t11085 + t11161 * t11088) * t11126 + t11207;
t10927 = (t11147 * t11084 + t11450 * t11365) * t11109 + ((t11087 * t11325 + 0.2e1 * t11248) * t11430 + (-t11084 * t11168 + t11445 * t11087) * t11132 + t11118 * (t11087 * t11156 - t11269 * t11374)) * t11119 - t11112 * t11209 + ((t11113 * t11084 - t11087 * t11198 - t11084) * t11090 - t11084 * pkin(6)) * t11132 + (t11174 * t11084 + t11162 * t11087) * t11123 + t11209;
t10926 = (t11145 * t11089 - t11448 * t11367) * t11109 + (-(t11086 * t11311 - 0.2e1 * t11232) * t11426 + (-t11447 * t11086 - t11089 * t11166) * t11138 - (t11086 * t11154 + t11089 * t11199) * t11118) * t11119 + t11116 * t11206 + ((t11086 * t11196 + t11117 * t11089 - t11089) * t11092 - t11089 * pkin(6)) * t11138 + (-t11160 * t11086 + t11172 * t11089) * t11129 - t11206;
t10925 = (t11146 * t11088 - t11449 * t11370) * t11109 + (-(t11085 * t11318 - 0.2e1 * t11239) * t11428 + (-t11446 * t11085 - t11088 * t11167) * t11135 - (t11085 * t11155 + t11088 * t11200) * t11118) * t11119 + t11114 * t11208 + ((t11085 * t11197 + t11115 * t11088 - t11088) * t11091 - t11088 * pkin(6)) * t11135 + (-t11161 * t11085 + t11173 * t11088) * t11126 - t11208;
t10924 = (t11147 * t11087 - t11450 * t11373) * t11109 + (-(t11084 * t11325 - 0.2e1 * t11246) * t11430 + (-t11445 * t11084 - t11087 * t11168) * t11132 - (t11084 * t11156 + t11087 * t11201) * t11118) * t11119 + t11112 * t11210 + ((t11084 * t11198 + t11113 * t11087 - t11087) * t11090 - t11087 * pkin(6)) * t11132 + (-t11162 * t11084 + t11174 * t11087) * t11123 - t11210;
t1 = [(-t10942 * t11402 - t10944 * t11396 - t10946 * t11408) * MDP(2) + (t10942 * t11401 + t10944 * t11395 + t10946 * t11407) * MDP(3) + (t10927 * t11393 + t10928 * t11390 + t10929 * t11387 + t10942 * t11404 + t10944 * t11398 + t10946 * t11410) * MDP(9) + (t10927 * t11392 + t10928 * t11389 + t10929 * t11386 + t10942 * t11403 + t10944 * t11397 + t10946 * t11409) * MDP(10) + (t10927 * t11265 + t10928 * t11263 + t10929 * t11261 + t10942 * t11405 + t10944 * t11400 + t10946 * t11411) * MDP(16) + (-t10927 * t11266 - t10928 * t11264 - t10929 * t11262 + t10942 * t11406 + t10944 * t11399 + t10946 * t11412) * MDP(17) - g(1) * MDP(18) + ((t10931 * t11414 + t10933 * t11417 + t10935 * t11413) * MDP(16) + (t10931 * t11418 + t10933 * t11416 + t10935 * t11415) * MDP(17)) * t11143; (-t10943 * t11402 - t10945 * t11396 - t10947 * t11408) * MDP(2) + (t10943 * t11401 + t10945 * t11395 + t10947 * t11407) * MDP(3) + (t10924 * t11393 + t10925 * t11390 + t10926 * t11387 + t10943 * t11404 + t10945 * t11398 + t10947 * t11410) * MDP(9) + (t10924 * t11392 + t10925 * t11389 + t10926 * t11386 + t10943 * t11403 + t10945 * t11397 + t10947 * t11409) * MDP(10) + (t10924 * t11265 + t10925 * t11263 + t10926 * t11261 + t10943 * t11405 + t10945 * t11400 + t10947 * t11411) * MDP(16) + (-t10924 * t11266 - t10925 * t11264 - t10926 * t11262 + t10943 * t11406 + t10945 * t11399 + t10947 * t11412) * MDP(17) - g(2) * MDP(18) + ((t10930 * t11414 + t10932 * t11417 + t10934 * t11413) * MDP(16) + (t10930 * t11418 + t10932 * t11416 + t10934 * t11415) * MDP(17)) * t11143; (-t10966 * t11402 - t10967 * t11396 - t10968 * t11408) * MDP(2) + (t10966 * t11401 + t10967 * t11395 + t10968 * t11407) * MDP(3) + (t10939 * t11393 + t10940 * t11390 + t10941 * t11387 + t10966 * t11404 + t10967 * t11398 + t10968 * t11410) * MDP(9) + (t10939 * t11392 + t10940 * t11389 + t10941 * t11386 + t10966 * t11403 + t10967 * t11397 + t10968 * t11409) * MDP(10) + (t10939 * t11265 + t10940 * t11263 + t10941 * t11261 + t10966 * t11405 + t10967 * t11400 + t10968 * t11411) * MDP(16) + (-t10939 * t11266 - t10940 * t11264 - t10941 * t11262 + t10966 * t11406 + t10967 * t11399 + t10968 * t11412) * MDP(17) - g(3) * MDP(18) + ((-t10949 * t11420 - t10952 * t11421 - t10953 * t11419) * MDP(16) + (-t10948 * t11421 - t10950 * t11420 - t10951 * t11419) * MDP(17)) * t11143 * t11118;];
taugX  = t1;
