% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V2G2A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_gravload_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:39:33
% EndTime: 2020-08-07 01:39:46
% DurationCPUTime: 14.03s
% Computational Cost: add. (5307->676), mult. (10704->1164), div. (126->13), fcn. (9474->26), ass. (0->455)
t5394 = cos(qJ(3,3));
t5355 = t5394 * pkin(3);
t5329 = t5355 + pkin(2);
t5397 = cos(qJ(3,2));
t5356 = t5397 * pkin(3);
t5330 = t5356 + pkin(2);
t5400 = cos(qJ(3,1));
t5357 = t5400 * pkin(3);
t5331 = t5357 + pkin(2);
t5401 = cos(qJ(2,1));
t5403 = pkin(8) + pkin(7);
t5340 = t5403 * t5401;
t5392 = sin(qJ(2,1));
t5300 = -pkin(2) * t5392 + t5340;
t5380 = sin(pkin(4));
t5428 = t5380 * t5300;
t5398 = cos(qJ(2,2));
t5339 = t5403 * t5398;
t5389 = sin(qJ(2,2));
t5299 = -pkin(2) * t5389 + t5339;
t5429 = t5380 * t5299;
t5395 = cos(qJ(2,3));
t5338 = t5403 * t5395;
t5386 = sin(qJ(2,3));
t5298 = -pkin(2) * t5386 + t5338;
t5430 = t5380 * t5298;
t5375 = t5395 ^ 2;
t5716 = t5403 * t5375;
t5377 = t5398 ^ 2;
t5715 = t5403 * t5377;
t5379 = t5401 ^ 2;
t5714 = t5403 * t5379;
t5385 = sin(qJ(3,3));
t5531 = t5385 * pkin(6) + pkin(3);
t5374 = t5394 ^ 2;
t5693 = t5374 * pkin(3);
t5697 = pkin(2) * t5394;
t5713 = t5386 * (-t5531 + 0.2e1 * t5693 + t5697) - t5394 * t5338;
t5388 = sin(qJ(3,2));
t5530 = t5388 * pkin(6) + pkin(3);
t5376 = t5397 ^ 2;
t5691 = t5376 * pkin(3);
t5696 = pkin(2) * t5397;
t5712 = t5389 * (-t5530 + 0.2e1 * t5691 + t5696) - t5397 * t5339;
t5391 = sin(qJ(3,1));
t5529 = t5391 * pkin(6) + pkin(3);
t5378 = t5400 ^ 2;
t5689 = t5378 * pkin(3);
t5695 = pkin(2) * t5400;
t5711 = t5392 * (-t5529 + 0.2e1 * t5689 + t5695) - t5400 * t5340;
t5337 = t5403 * t5392;
t5366 = pkin(2) * t5401;
t5552 = t5337 + t5366;
t5297 = pkin(1) + t5552;
t5393 = sin(qJ(1,1));
t5354 = t5391 * pkin(3);
t5464 = (t5379 - 0.2e1) * t5354 - pkin(6);
t5402 = cos(qJ(1,1));
t5608 = t5380 * t5402;
t5710 = t5393 * t5297 + t5464 * t5608;
t5336 = t5403 * t5389;
t5365 = pkin(2) * t5398;
t5553 = t5336 + t5365;
t5296 = pkin(1) + t5553;
t5390 = sin(qJ(1,2));
t5353 = t5388 * pkin(3);
t5465 = (t5377 - 0.2e1) * t5353 - pkin(6);
t5399 = cos(qJ(1,2));
t5610 = t5380 * t5399;
t5709 = t5390 * t5296 + t5465 * t5610;
t5335 = t5403 * t5386;
t5364 = pkin(2) * t5395;
t5554 = t5335 + t5364;
t5295 = pkin(1) + t5554;
t5387 = sin(qJ(1,3));
t5352 = t5385 * pkin(3);
t5466 = (t5375 - 0.2e1) * t5352 - pkin(6);
t5396 = cos(qJ(1,3));
t5612 = t5380 * t5396;
t5708 = t5387 * t5295 + t5466 * t5612;
t5381 = cos(pkin(4));
t5371 = t5381 ^ 2;
t5707 = -0.2e1 * t5371 + 0.1e1;
t5706 = pkin(1) * t5329;
t5705 = pkin(1) * t5330;
t5704 = pkin(1) * t5331;
t5703 = pkin(1) * t5381;
t5702 = pkin(2) * t5381;
t5699 = pkin(2) * t5391;
t5694 = g(1) * t5380;
t5692 = t5375 * pkin(2);
t5690 = t5377 * pkin(2);
t5688 = t5379 * pkin(2);
t5687 = t5380 * g(2);
t5686 = t5385 * pkin(2);
t5685 = t5388 * pkin(2);
t5373 = pkin(2) - t5403;
t5372 = pkin(2) + t5403;
t5586 = t5387 * t5403;
t5285 = t5396 * pkin(2) + t5381 * t5586;
t5288 = -pkin(6) * t5403 * t5380 - pkin(1) * t5702;
t5316 = t5335 + pkin(1);
t5320 = pkin(1) * t5386 + t5403;
t5323 = t5352 + pkin(6);
t5324 = t5352 - pkin(6);
t5406 = pkin(2) ^ 2;
t5593 = t5381 * t5403;
t5473 = 0.2e1 * pkin(2) * t5593;
t5588 = t5387 * t5386;
t5506 = t5381 * t5588;
t5623 = t5372 * t5373;
t5513 = t5381 * t5623;
t5605 = t5381 * t5386;
t5543 = pkin(1) * t5605;
t5547 = pkin(6) * t5693;
t5550 = pkin(1) * t5352;
t5551 = -0.2e1 * t5702;
t5301 = pkin(1) + 0.2e1 * t5335;
t5569 = t5396 * t5301;
t5592 = t5385 * t5380;
t5616 = t5380 * t5386;
t5619 = t5380 * t5323;
t5404 = pkin(3) ^ 2;
t5622 = t5374 * t5404;
t5319 = pkin(1) * t5593;
t5645 = t5319 * t5394;
t5684 = ((t5387 * t5473 + 0.2e1 * t5285 * t5355 + (t5622 + t5623) * t5396) * t5375 + (-t5506 * t5622 + ((t5386 * t5551 + t5619) * t5387 + t5569) * t5355 + (pkin(2) * t5619 - t5386 * t5513) * t5387 + pkin(2) * t5569) * t5395 + (t5396 * t5320 + (t5323 * t5616 - t5329 * t5381) * t5387) * t5403) / ((t5645 + (t5324 * t5697 + t5385 * t5406 - t5547) * t5380) * t5395 - t5543 * t5693 + (t5288 * t5386 + t5380 * t5550) * t5394 + pkin(2) * t5316 * t5592);
t5579 = t5390 * t5403;
t5286 = t5399 * pkin(2) + t5381 * t5579;
t5317 = t5336 + pkin(1);
t5321 = pkin(1) * t5389 + t5403;
t5325 = t5353 + pkin(6);
t5326 = t5353 - pkin(6);
t5581 = t5390 * t5389;
t5499 = t5381 * t5581;
t5602 = t5381 * t5389;
t5542 = pkin(1) * t5602;
t5546 = pkin(6) * t5691;
t5549 = pkin(1) * t5353;
t5302 = pkin(1) + 0.2e1 * t5336;
t5563 = t5399 * t5302;
t5585 = t5388 * t5380;
t5615 = t5380 * t5389;
t5618 = t5380 * t5325;
t5621 = t5376 * t5404;
t5644 = t5319 * t5397;
t5683 = ((t5390 * t5473 + 0.2e1 * t5286 * t5356 + (t5621 + t5623) * t5399) * t5377 + (-t5499 * t5621 + ((t5389 * t5551 + t5618) * t5390 + t5563) * t5356 + (pkin(2) * t5618 - t5389 * t5513) * t5390 + pkin(2) * t5563) * t5398 + (t5399 * t5321 + (t5325 * t5615 - t5330 * t5381) * t5390) * t5403) / ((t5644 + (t5326 * t5696 + t5388 * t5406 - t5546) * t5380) * t5398 - t5542 * t5691 + (t5288 * t5389 + t5380 * t5549) * t5397 + pkin(2) * t5317 * t5585);
t5572 = t5393 * t5403;
t5287 = t5402 * pkin(2) + t5381 * t5572;
t5318 = t5337 + pkin(1);
t5322 = pkin(1) * t5392 + t5403;
t5327 = t5354 + pkin(6);
t5328 = t5354 - pkin(6);
t5574 = t5393 * t5392;
t5492 = t5381 * t5574;
t5599 = t5381 * t5392;
t5541 = pkin(1) * t5599;
t5545 = pkin(6) * t5689;
t5548 = pkin(1) * t5354;
t5303 = pkin(1) + 0.2e1 * t5337;
t5558 = t5402 * t5303;
t5578 = t5391 * t5380;
t5614 = t5380 * t5392;
t5617 = t5380 * t5327;
t5620 = t5378 * t5404;
t5643 = t5319 * t5400;
t5682 = ((t5393 * t5473 + 0.2e1 * t5287 * t5357 + (t5620 + t5623) * t5402) * t5379 + (-t5492 * t5620 + ((t5392 * t5551 + t5617) * t5393 + t5558) * t5357 + (pkin(2) * t5617 - t5392 * t5513) * t5393 + pkin(2) * t5558) * t5401 + (t5402 * t5322 + (t5327 * t5614 - t5331 * t5381) * t5393) * t5403) / ((t5643 + (t5328 * t5695 + t5391 * t5406 - t5545) * t5380) * t5401 - t5541 * t5689 + (t5288 * t5392 + t5380 * t5548) * t5400 + pkin(2) * t5318 * t5578);
t5570 = t5394 * t5381;
t5491 = t5386 * t5570;
t5270 = t5491 - t5592;
t5382 = legFrame(3,2);
t5346 = sin(t5382);
t5349 = cos(t5382);
t5289 = t5346 * g(1) + t5349 * g(2);
t5292 = t5349 * g(1) - t5346 * g(2);
t5567 = t5396 * t5395;
t5571 = t5394 * t5380;
t5587 = t5387 * t5395;
t5606 = t5381 * t5385;
t5210 = (-t5270 * t5387 + t5394 * t5567) * g(3) + t5292 * (t5270 * t5396 + t5394 * t5587) + t5289 * (t5386 * t5571 + t5606);
t5304 = t5394 * pkin(6) - t5686;
t5225 = 0.1e1 / ((-t5329 * t5304 * t5380 + t5645) * t5395 + (-t5304 * t5335 + t5385 * t5706) * t5380 - t5491 * t5706);
t5681 = t5210 * t5225;
t5565 = t5397 * t5380;
t5584 = t5388 * t5389;
t5268 = t5381 * t5584 + t5565;
t5561 = t5399 * t5398;
t5277 = -t5499 + t5561;
t5383 = legFrame(2,2);
t5347 = sin(t5383);
t5350 = cos(t5383);
t5290 = t5347 * g(1) + t5350 * g(2);
t5293 = t5350 * g(1) - t5347 * g(2);
t5564 = t5397 * t5381;
t5580 = t5390 * t5398;
t5211 = (t5277 * t5388 - t5390 * t5565) * g(3) + t5293 * (t5268 * t5399 + t5388 * t5580) - t5290 * (-t5380 * t5584 + t5564);
t5305 = t5397 * pkin(6) - t5685;
t5486 = t5389 * t5564;
t5226 = 0.1e1 / ((-t5330 * t5305 * t5380 + t5644) * t5398 + (-t5305 * t5336 + t5388 * t5705) * t5380 - t5486 * t5705);
t5680 = t5211 * t5226;
t5271 = t5486 - t5585;
t5603 = t5381 * t5388;
t5212 = g(3) * (-t5271 * t5390 + t5397 * t5561) + (t5271 * t5399 + t5397 * t5580) * t5293 + t5290 * (t5389 * t5565 + t5603);
t5679 = t5212 * t5226;
t5595 = t5381 * t5400;
t5481 = t5392 * t5595;
t5272 = t5481 - t5578;
t5384 = legFrame(1,2);
t5348 = sin(t5384);
t5351 = cos(t5384);
t5291 = t5348 * g(1) + t5351 * g(2);
t5294 = t5351 * g(1) - t5348 * g(2);
t5556 = t5402 * t5401;
t5559 = t5400 * t5380;
t5573 = t5393 * t5401;
t5600 = t5381 * t5391;
t5213 = g(3) * (-t5272 * t5393 + t5400 * t5556) + (t5272 * t5402 + t5400 * t5573) * t5294 + t5291 * (t5392 * t5559 + t5600);
t5306 = t5400 * pkin(6) - t5699;
t5227 = 0.1e1 / ((-t5331 * t5306 * t5380 + t5643) * t5401 + (-t5306 * t5337 + t5391 * t5704) * t5380 - t5481 * t5704);
t5678 = t5213 * t5227;
t5591 = t5385 * t5386;
t5267 = t5381 * t5591 + t5571;
t5276 = -t5506 + t5567;
t5214 = g(3) * (t5276 * t5385 - t5387 * t5571) + t5292 * (t5267 * t5396 + t5385 * t5587) - t5289 * (-t5380 * t5591 + t5570);
t5677 = t5214 * t5225;
t5577 = t5391 * t5392;
t5269 = t5381 * t5577 + t5559;
t5278 = -t5492 + t5556;
t5215 = g(3) * (t5278 * t5391 - t5393 * t5559) + (t5269 * t5402 + t5391 * t5573) * t5294 - t5291 * (-t5380 * t5577 + t5595);
t5676 = t5215 * t5227;
t5536 = t5297 * t5699;
t5609 = t5380 * t5401;
t5219 = 0.1e1 / (-(pkin(6) * t5609 + t5541) * t5689 + ((-pkin(6) * t5337 + t5328 * t5366 + t5548) * t5380 + t5300 * t5703) * t5400 + t5380 * t5536);
t5557 = t5402 * t5392;
t5275 = t5381 * t5557 + t5573;
t5498 = t5391 * t5556;
t5675 = t5219 * (-g(3) * (t5275 * t5391 + t5402 * t5559) + t5294 * (-t5269 * t5393 + t5498));
t5576 = t5391 * t5402;
t5478 = t5380 * t5576;
t5493 = t5393 * t5578;
t5674 = t5219 * (g(3) * (t5275 * t5400 - t5478) - t5294 * (t5278 * t5400 + t5493));
t5260 = -g(3) * t5393 + t5294 * t5402;
t5263 = g(3) * t5402 + t5294 * t5393;
t5673 = t5219 * (-t5260 * t5401 + t5263 * t5599);
t5672 = t5219 * (t5263 * t5401 * t5381 + t5260 * t5392);
t5671 = t5219 * t5260;
t5670 = t5219 * t5263;
t5540 = t5295 * t5686;
t5613 = t5380 * t5395;
t5220 = 0.1e1 / (-(pkin(6) * t5613 + t5543) * t5693 + ((-pkin(6) * t5335 + t5324 * t5364 + t5550) * t5380 + t5298 * t5703) * t5394 + t5380 * t5540);
t5568 = t5396 * t5386;
t5273 = t5381 * t5568 + t5587;
t5512 = t5385 * t5567;
t5669 = t5220 * (-g(3) * (t5273 * t5385 + t5396 * t5571) + t5292 * (-t5267 * t5387 + t5512));
t5590 = t5385 * t5396;
t5488 = t5380 * t5590;
t5507 = t5387 * t5592;
t5668 = t5220 * (g(3) * (t5273 * t5394 - t5488) - t5292 * (t5276 * t5394 + t5507));
t5258 = -g(3) * t5387 + t5292 * t5396;
t5261 = g(3) * t5396 + t5292 * t5387;
t5667 = t5220 * (-t5395 * t5258 + t5261 * t5605);
t5666 = t5220 * (t5261 * t5395 * t5381 + t5258 * t5386);
t5665 = t5220 * t5258;
t5664 = t5220 * t5261;
t5538 = t5296 * t5685;
t5611 = t5380 * t5398;
t5221 = 0.1e1 / (-(pkin(6) * t5611 + t5542) * t5691 + ((-pkin(6) * t5336 + t5326 * t5365 + t5549) * t5380 + t5299 * t5703) * t5397 + t5380 * t5538);
t5562 = t5399 * t5389;
t5274 = t5381 * t5562 + t5580;
t5583 = t5388 * t5399;
t5483 = t5380 * t5583;
t5500 = t5390 * t5585;
t5663 = t5221 * ((t5274 * t5397 - t5483) * g(3) - t5293 * (t5277 * t5397 + t5500));
t5505 = t5388 * t5561;
t5662 = t5221 * (-g(3) * (t5274 * t5388 + t5399 * t5565) + t5293 * (-t5268 * t5390 + t5505));
t5259 = -g(3) * t5390 + t5293 * t5399;
t5262 = g(3) * t5399 + t5293 * t5390;
t5661 = t5221 * (-t5259 * t5398 + t5262 * t5602);
t5660 = t5221 * (t5262 * t5398 * t5381 + t5259 * t5389);
t5659 = t5221 * t5259;
t5658 = t5221 * t5262;
t5332 = t5364 + pkin(1);
t5222 = 0.1e1 / ((-t5395 * t5547 + (-pkin(6) * t5554 + t5332 * t5352) * t5394 + t5540) * t5380 + (-t5329 * t5386 + t5338) * pkin(1) * t5570);
t5597 = t5381 * t5396;
t5604 = t5381 * t5387;
t5657 = t5222 * (((-g(1) * t5597 - t5687) * t5349 + (g(2) * t5597 - t5694) * t5346 + g(3) * t5604) * t5395 + t5386 * t5261);
t5307 = t5381 * t5567;
t5656 = t5222 * (g(3) * (t5381 * t5587 + t5568) - t5292 * (t5307 - t5588) - t5289 * t5613);
t5655 = t5222 * (g(3) * t5276 + t5292 * t5273 + t5289 * t5616);
t5333 = t5365 + pkin(1);
t5223 = 0.1e1 / ((-t5398 * t5546 + (-pkin(6) * t5553 + t5333 * t5353) * t5397 + t5538) * t5380 + (-t5330 * t5389 + t5339) * pkin(1) * t5564);
t5596 = t5381 * t5399;
t5601 = t5381 * t5390;
t5654 = t5223 * (((-g(1) * t5596 - t5687) * t5350 + (g(2) * t5596 - t5694) * t5347 + g(3) * t5601) * t5398 + t5389 * t5262);
t5308 = t5381 * t5561;
t5653 = t5223 * (g(3) * (t5381 * t5580 + t5562) - t5293 * (t5308 - t5581) - t5290 * t5611);
t5652 = t5223 * (g(3) * t5277 + t5293 * t5274 + t5290 * t5615);
t5334 = t5366 + pkin(1);
t5224 = 0.1e1 / ((-t5401 * t5545 + (-pkin(6) * t5552 + t5334 * t5354) * t5400 + t5536) * t5380 + (-t5331 * t5392 + t5340) * pkin(1) * t5595);
t5594 = t5381 * t5402;
t5598 = t5381 * t5393;
t5651 = t5224 * (((-g(1) * t5594 - t5687) * t5351 + (g(2) * t5594 - t5694) * t5348 + g(3) * t5598) * t5401 + t5392 * t5263);
t5309 = t5381 * t5556;
t5650 = t5224 * (g(3) * (t5381 * t5573 + t5557) - t5294 * (t5309 - t5574) - t5291 * t5609);
t5649 = t5224 * (g(3) * t5278 + t5294 * t5275 + t5291 * t5614);
t5648 = (t5355 + t5372) * (t5355 + t5373);
t5647 = (t5356 + t5372) * (t5356 + t5373);
t5646 = (t5357 + t5372) * (t5357 + t5373);
t5642 = t5320 * t5387;
t5641 = t5321 * t5390;
t5640 = t5322 * t5393;
t5639 = (t5381 + 0.1e1) * (t5381 - 0.1e1);
t5638 = t5346 * t5329;
t5637 = t5346 * t5386;
t5636 = t5346 * t5396;
t5635 = t5347 * t5330;
t5634 = t5347 * t5389;
t5633 = t5347 * t5399;
t5632 = t5348 * t5331;
t5631 = t5348 * t5392;
t5630 = t5348 * t5402;
t5629 = t5349 * t5329;
t5628 = t5349 * t5396;
t5627 = t5350 * t5330;
t5626 = t5350 * t5399;
t5625 = t5351 * t5331;
t5624 = t5351 * t5402;
t5405 = 0.1e1 / pkin(3);
t5607 = t5380 * t5405;
t5566 = t5396 * t5403;
t5560 = t5399 * t5403;
t5555 = t5402 * t5403;
t5544 = -0.2e1 * t5639;
t5539 = pkin(3) * t5568;
t5537 = pkin(3) * t5562;
t5535 = pkin(3) * t5557;
t5528 = t5385 * t5657;
t5527 = t5394 * t5657;
t5526 = t5388 * t5654;
t5525 = t5397 * t5654;
t5524 = t5391 * t5651;
t5523 = t5400 * t5651;
t5487 = t5381 * t5566;
t5522 = (t5329 * t5487 - t5387 * t5648 / 0.2e1) * t5375 * t5380;
t5482 = t5381 * t5560;
t5521 = (t5330 * t5482 - t5390 * t5647 / 0.2e1) * t5377 * t5380;
t5477 = t5381 * t5555;
t5520 = (t5331 * t5477 - t5393 * t5646 / 0.2e1) * t5379 * t5380;
t5519 = t5301 * t5329 * t5387;
t5518 = t5302 * t5330 * t5390;
t5517 = t5303 * t5331 * t5393;
t5516 = t5386 * t5648;
t5515 = t5389 * t5647;
t5514 = t5392 * t5646;
t5511 = t5323 * t5637;
t5510 = t5346 * t5616;
t5509 = t5386 * t5349 * t5323;
t5508 = t5349 * t5616;
t5504 = t5325 * t5634;
t5503 = t5347 * t5615;
t5502 = t5389 * t5350 * t5325;
t5501 = t5350 * t5615;
t5497 = t5327 * t5631;
t5496 = t5348 * t5614;
t5495 = t5392 * t5351 * t5327;
t5494 = t5351 * t5614;
t5490 = t5329 * t5636;
t5489 = t5329 * t5628;
t5485 = t5330 * t5633;
t5484 = t5330 * t5626;
t5480 = t5331 * t5630;
t5479 = t5331 * t5624;
t5472 = t5346 * t5539;
t5471 = t5349 * t5539;
t5470 = t5347 * t5537;
t5469 = t5350 * t5537;
t5468 = t5348 * t5535;
t5467 = t5351 * t5535;
t5463 = t5587 * t5616;
t5462 = t5580 * t5615;
t5461 = t5573 * t5614;
t5460 = t5346 * t5516;
t5459 = t5349 * t5516;
t5458 = t5347 * t5515;
t5457 = t5350 * t5515;
t5456 = t5348 * t5514;
t5455 = t5351 * t5514;
t5454 = t5323 * t5490;
t5453 = t5323 * t5489;
t5452 = t5396 * t5511;
t5451 = t5396 * t5509;
t5450 = t5325 * t5485;
t5449 = t5325 * t5484;
t5448 = t5399 * t5504;
t5447 = t5399 * t5502;
t5446 = t5327 * t5480;
t5445 = t5327 * t5479;
t5444 = t5402 * t5497;
t5443 = t5402 * t5495;
t5442 = t5386 * t5531;
t5441 = t5389 * t5530;
t5440 = t5392 * t5529;
t5439 = t5329 * t5375 * t5544;
t5438 = t5330 * t5377 * t5544;
t5437 = t5331 * t5379 * t5544;
t5436 = t5316 * t5395 + t5692;
t5435 = t5317 * t5398 + t5690;
t5434 = t5318 * t5401 + t5688;
t5427 = t5386 * t5338 - pkin(2) + t5692;
t5426 = t5389 * t5339 - pkin(2) + t5690;
t5425 = t5392 * t5340 - pkin(2) + t5688;
t5424 = -(t5386 * t5364 + t5320 - t5716) * t5380 * t5387 + pkin(6) * t5568;
t5423 = -(t5389 * t5365 + t5321 - t5715) * t5380 * t5390 + pkin(6) * t5562;
t5422 = -(t5392 * t5366 + t5322 - t5714) * t5380 * t5393 + pkin(6) * t5557;
t5418 = t5427 * t5590;
t5417 = t5426 * t5583;
t5416 = t5425 * t5576;
t5415 = pkin(3) * t5488 - (pkin(2) * t5597 + t5586) * t5386 + (-t5387 * pkin(2) + t5487) * t5395;
t5414 = pkin(3) * t5483 - (pkin(2) * t5596 + t5579) * t5389 + (-t5390 * pkin(2) + t5482) * t5398;
t5413 = pkin(3) * t5478 - (pkin(2) * t5594 + t5572) * t5392 + (-t5393 * pkin(2) + t5477) * t5401;
t5412 = -pkin(3) * t5606 + t5430;
t5411 = -pkin(3) * t5603 + t5429;
t5410 = -pkin(3) * t5600 + t5428;
t5409 = -t5427 * t5385 - t5466 * t5394;
t5408 = -t5426 * t5388 - t5465 * t5397;
t5407 = -t5425 * t5391 - t5464 * t5400;
t5370 = pkin(1) * t5403;
t5257 = t5370 - t5514;
t5256 = t5370 - t5515;
t5255 = t5370 - t5516;
t5230 = -t5278 * t5689 + (-pkin(3) * t5493 - t5287 * t5401 - t5392 * (-pkin(2) * t5598 + t5555)) * t5400 - pkin(2) * t5493;
t5229 = -t5277 * t5691 + (-pkin(3) * t5500 - t5286 * t5398 - t5389 * (-pkin(2) * t5601 + t5560)) * t5397 - pkin(2) * t5500;
t5228 = -t5276 * t5693 + (-pkin(3) * t5507 - t5285 * t5395 - t5386 * (-pkin(2) * t5604 + t5566)) * t5394 - pkin(2) * t5507;
t5209 = (t5348 * t5275 - t5494) * t5689 + (-t5413 * t5348 + t5410 * t5351) * t5400 - (t5348 * t5608 + t5381 * t5351) * t5699;
t5208 = -(t5351 * t5275 + t5496) * t5689 + (t5348 * t5410 + t5351 * t5413) * t5400 + (-t5381 * t5348 + t5351 * t5608) * t5699;
t5207 = (t5347 * t5274 - t5501) * t5691 + (-t5347 * t5414 + t5350 * t5411) * t5397 - (t5347 * t5610 + t5381 * t5350) * t5685;
t5206 = -(t5350 * t5274 + t5503) * t5691 + (t5347 * t5411 + t5350 * t5414) * t5397 + (-t5381 * t5347 + t5350 * t5610) * t5685;
t5205 = (t5346 * t5273 - t5508) * t5693 + (-t5346 * t5415 + t5349 * t5412) * t5394 - (t5346 * t5612 + t5381 * t5349) * t5686;
t5204 = -(t5349 * t5273 + t5510) * t5693 + (t5346 * t5412 + t5349 * t5415) * t5394 + (-t5381 * t5346 + t5349 * t5612) * t5686;
t5203 = ((-t5392 * pkin(3) * t5498 - t5464 * t5598) * t5400 - (t5425 * t5598 + t5402 * (t5334 * t5392 + t5403 - t5714)) * t5391) * t5380 + (t5707 * t5574 + t5309) * t5689 + (t5402 * t5297 + t5300 * t5598) * t5595 + t5393 * t5440 * t5639;
t5202 = ((-t5389 * pkin(3) * t5505 - t5465 * t5601) * t5397 - (t5426 * t5601 + t5399 * (t5333 * t5389 + t5403 - t5715)) * t5388) * t5380 + (t5707 * t5581 + t5308) * t5691 + (t5399 * t5296 + t5299 * t5601) * t5564 + t5390 * t5441 * t5639;
t5201 = ((-t5386 * pkin(3) * t5512 - t5466 * t5604) * t5394 - (t5427 * t5604 + t5396 * (t5332 * t5386 + t5403 - t5716)) * t5385) * t5380 + (t5707 * t5588 + t5307) * t5693 + (t5396 * t5295 + t5298 * t5604) * t5570 + t5387 * t5442 * t5639;
t5197 = 0.2e1 * t5351 * t5520 + (((-t5327 * t5632 - t5402 * t5455) * t5381 - t5351 * t5517) * t5380 + (-t5445 + t5456) * t5371 + t5445 + t5257 * t5348) * t5401 - t5322 * t5632 + (t5348 * t5437 - ((t5479 + t5497) * t5381 + t5351 * t5640) * t5380 - (t5443 - t5632) * t5371 + t5443) * t5403;
t5196 = -0.2e1 * t5348 * t5520 + (((-t5327 * t5625 + t5402 * t5456) * t5381 + t5348 * t5517) * t5380 + (t5446 + t5455) * t5371 - t5446 + t5257 * t5351) * t5401 - t5322 * t5625 + (t5351 * t5437 + ((t5480 - t5495) * t5381 + t5348 * t5640) * t5380 + (t5444 + t5625) * t5371 - t5444) * t5403;
t5195 = 0.2e1 * t5350 * t5521 + (((-t5325 * t5635 - t5399 * t5457) * t5381 - t5350 * t5518) * t5380 + (-t5449 + t5458) * t5371 + t5449 + t5256 * t5347) * t5398 - t5321 * t5635 + (t5347 * t5438 - ((t5484 + t5504) * t5381 + t5350 * t5641) * t5380 - (t5447 - t5635) * t5371 + t5447) * t5403;
t5194 = -0.2e1 * t5347 * t5521 + (((-t5325 * t5627 + t5399 * t5458) * t5381 + t5347 * t5518) * t5380 + (t5450 + t5457) * t5371 - t5450 + t5256 * t5350) * t5398 - t5321 * t5627 + (t5350 * t5438 + ((t5485 - t5502) * t5381 + t5347 * t5641) * t5380 + (t5448 + t5627) * t5371 - t5448) * t5403;
t5193 = 0.2e1 * t5349 * t5522 + (((-t5323 * t5638 - t5396 * t5459) * t5381 - t5349 * t5519) * t5380 + (-t5453 + t5460) * t5371 + t5453 + t5255 * t5346) * t5395 - t5320 * t5638 + (t5346 * t5439 - ((t5489 + t5511) * t5381 + t5349 * t5642) * t5380 - (t5451 - t5638) * t5371 + t5451) * t5403;
t5192 = -0.2e1 * t5346 * t5522 + (((-t5323 * t5629 + t5396 * t5460) * t5381 + t5346 * t5519) * t5380 + (t5454 + t5459) * t5371 - t5454 + t5255 * t5349) * t5395 - t5320 * t5629 + (t5349 * t5439 + ((t5490 - t5509) * t5381 + t5346 * t5642) * t5380 + (t5452 + t5629) * t5371 - t5452) * t5403;
t5191 = (t5407 * t5348 + t5711 * t5624) * t5371 + ((t5351 * t5573 + 0.2e1 * t5496) * t5689 + (-t5348 * t5428 + t5710 * t5351) * t5400 + t5380 * (t5351 * t5416 - t5529 * t5631)) * t5381 - t5378 * t5467 + ((t5379 * t5348 - t5351 * t5461 - t5348) * t5354 - t5348 * pkin(6)) * t5400 + (t5348 * t5434 + t5351 * t5422) * t5391 + t5467;
t5190 = (t5408 * t5347 + t5712 * t5626) * t5371 + ((t5350 * t5580 + 0.2e1 * t5503) * t5691 + (-t5347 * t5429 + t5709 * t5350) * t5397 + t5380 * (t5350 * t5417 - t5530 * t5634)) * t5381 - t5376 * t5469 + ((t5377 * t5347 - t5350 * t5462 - t5347) * t5353 - t5347 * pkin(6)) * t5397 + (t5347 * t5435 + t5350 * t5423) * t5388 + t5469;
t5189 = (t5409 * t5346 + t5713 * t5628) * t5371 + ((t5349 * t5587 + 0.2e1 * t5510) * t5693 + (-t5346 * t5430 + t5708 * t5349) * t5394 + t5380 * (t5349 * t5418 - t5531 * t5637)) * t5381 - t5374 * t5471 + ((t5375 * t5346 - t5349 * t5463 - t5346) * t5352 - t5346 * pkin(6)) * t5394 + (t5346 * t5436 + t5349 * t5424) * t5385 + t5471;
t5188 = (t5407 * t5351 - t5711 * t5630) * t5371 + (-(t5348 * t5573 - 0.2e1 * t5494) * t5689 + (-t5710 * t5348 - t5351 * t5428) * t5400 - (t5348 * t5416 + t5351 * t5440) * t5380) * t5381 + t5378 * t5468 + ((t5348 * t5461 + t5379 * t5351 - t5351) * t5354 - t5351 * pkin(6)) * t5400 + (-t5348 * t5422 + t5351 * t5434) * t5391 - t5468;
t5187 = (t5408 * t5350 - t5712 * t5633) * t5371 + (-(t5347 * t5580 - 0.2e1 * t5501) * t5691 + (-t5709 * t5347 - t5350 * t5429) * t5397 - (t5347 * t5417 + t5350 * t5441) * t5380) * t5381 + t5376 * t5470 + ((t5347 * t5462 + t5377 * t5350 - t5350) * t5353 - t5350 * pkin(6)) * t5397 + (-t5347 * t5423 + t5350 * t5435) * t5388 - t5470;
t5186 = (t5409 * t5349 - t5713 * t5636) * t5371 + (-(t5346 * t5587 - 0.2e1 * t5508) * t5693 + (-t5708 * t5346 - t5349 * t5430) * t5394 - (t5346 * t5418 + t5349 * t5442) * t5380) * t5381 + t5374 * t5472 + ((t5346 * t5463 + t5375 * t5349 - t5349) * t5352 - t5349 * pkin(6)) * t5394 + (-t5346 * t5424 + t5349 * t5436) * t5385 - t5472;
t1 = [0, -t5204 * t5665 - t5206 * t5659 - t5208 * t5671, t5204 * t5664 + t5206 * t5658 + t5208 * t5670, 0, 0, 0, 0, 0, t5189 * t5656 + t5190 * t5653 + t5191 * t5650 + t5204 * t5667 + t5206 * t5661 + t5208 * t5673, t5189 * t5655 + t5190 * t5652 + t5191 * t5649 + t5204 * t5666 + t5206 * t5660 + t5208 * t5672, 0, 0, 0, 0, 0, t5189 * t5527 + t5190 * t5525 + t5191 * t5523 + t5204 * t5668 + t5206 * t5663 + t5208 * t5674 + (t5193 * t5677 + t5195 * t5680 + t5197 * t5676) * t5405, -t5189 * t5528 - t5190 * t5526 - t5191 * t5524 + t5204 * t5669 + t5206 * t5662 + t5208 * t5675 + (t5193 * t5681 + t5195 * t5679 + t5197 * t5678) * t5405, -g(1); 0, -t5205 * t5665 - t5207 * t5659 - t5209 * t5671, t5205 * t5664 + t5207 * t5658 + t5209 * t5670, 0, 0, 0, 0, 0, t5186 * t5656 + t5187 * t5653 + t5188 * t5650 + t5205 * t5667 + t5207 * t5661 + t5209 * t5673, t5186 * t5655 + t5187 * t5652 + t5188 * t5649 + t5205 * t5666 + t5207 * t5660 + t5209 * t5672, 0, 0, 0, 0, 0, t5186 * t5527 + t5187 * t5525 + t5188 * t5523 + t5205 * t5668 + t5207 * t5663 + t5209 * t5674 + (t5192 * t5677 + t5194 * t5680 + t5196 * t5676) * t5405, -t5186 * t5528 - t5187 * t5526 - t5188 * t5524 + t5205 * t5669 + t5207 * t5662 + t5209 * t5675 + (t5192 * t5681 + t5194 * t5679 + t5196 * t5678) * t5405, -g(2); 0, -t5228 * t5665 - t5229 * t5659 - t5230 * t5671, t5228 * t5664 + t5229 * t5658 + t5230 * t5670, 0, 0, 0, 0, 0, t5201 * t5656 + t5202 * t5653 + t5203 * t5650 + t5228 * t5667 + t5229 * t5661 + t5230 * t5673, t5201 * t5655 + t5202 * t5652 + t5203 * t5649 + t5228 * t5666 + t5229 * t5660 + t5230 * t5672, 0, 0, 0, 0, 0, t5201 * t5527 + t5202 * t5525 + t5203 * t5523 + t5230 * t5674 + t5228 * t5668 + t5229 * t5663 + (-t5211 * t5683 - t5214 * t5684 - t5215 * t5682) * t5607, -t5201 * t5528 - t5202 * t5526 - t5203 * t5524 + t5230 * t5675 + t5228 * t5669 + t5229 * t5662 + (-t5210 * t5684 - t5212 * t5683 - t5213 * t5682) * t5607, -g(3);];
tau_reg  = t1;
