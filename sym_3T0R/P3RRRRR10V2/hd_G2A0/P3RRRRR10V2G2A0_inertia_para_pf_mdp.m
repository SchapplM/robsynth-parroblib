% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR10V2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G2A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:53:21
% EndTime: 2020-08-07 01:54:51
% DurationCPUTime: 97.51s
% Computational Cost: add. (164838->1643), mult. (328761->2811), div. (4509->16), fcn. (278892->26), ass. (0->983)
t8249 = legFrame(1,2);
t8212 = sin(t8249);
t8215 = cos(t8249);
t8256 = sin(qJ(3,1));
t8218 = t8256 * pkin(3);
t8246 = cos(pkin(4));
t8233 = t8246 ^ 2;
t8265 = cos(qJ(3,1));
t8243 = t8265 ^ 2;
t8266 = cos(qJ(2,1));
t8244 = t8266 ^ 2;
t8245 = sin(pkin(4));
t8268 = pkin(8) + pkin(7);
t8204 = t8268 * t8266;
t8257 = sin(qJ(2,1));
t8224 = t8244 * pkin(2);
t8890 = t8224 - pkin(2);
t8328 = t8257 * t8204 + t8890;
t8207 = t8244 - 0.2e1;
t8427 = t8207 * t8218 - pkin(6);
t8274 = -t8256 * t8328 - t8265 * t8427;
t8267 = cos(qJ(1,1));
t8669 = t8256 * t8267;
t8289 = t8328 * t8669;
t8230 = pkin(1) * t8257;
t8195 = t8230 + pkin(7);
t8180 = pkin(8) + t8195;
t8665 = t8257 * t8267;
t8666 = t8257 * t8266;
t8258 = sin(qJ(1,1));
t8713 = t8245 * t8258;
t8865 = t8244 * t8268;
t8325 = pkin(6) * t8665 - (pkin(2) * t8666 + t8180 - t8865) * t8713;
t8836 = pkin(2) * t8257;
t8155 = t8204 - t8836;
t8331 = t8245 * t8155;
t8201 = t8268 * t8257;
t8173 = t8201 + pkin(1);
t8361 = t8173 * t8266 + t8224;
t8589 = t8256 * pkin(6) + pkin(3);
t8379 = t8257 * t8589;
t8663 = t8258 * t8266;
t8714 = t8245 * t8257;
t8400 = t8663 * t8714;
t8478 = t8212 * t8665;
t8431 = pkin(3) * t8478;
t8473 = t8215 * t8714;
t8726 = t8212 * t8267;
t8827 = t8243 * pkin(3);
t8227 = pkin(2) * t8266;
t8647 = t8201 + t8227;
t8152 = pkin(1) + t8647;
t8707 = t8245 * t8267;
t8852 = t8258 * t8152 + t8427 * t8707;
t8831 = pkin(2) * t8265;
t8853 = t8257 * (-t8589 + 0.2e1 * t8827 + t8831) - t8265 * t8204;
t8034 = (t8274 * t8215 - t8726 * t8853) * t8233 + (-(t8212 * t8663 - 0.2e1 * t8473) * t8827 + (-t8212 * t8852 - t8215 * t8331) * t8265 - (t8212 * t8289 + t8215 * t8379) * t8245) * t8246 + t8243 * t8431 + ((t8212 * t8400 + t8215 * t8244 - t8215) * t8218 - t8215 * pkin(6)) * t8265 + (-t8212 * t8325 + t8215 * t8361) * t8256 - t8431;
t8837 = pkin(2) * t8256;
t8598 = t8152 * t8837;
t8697 = t8246 * t8265;
t8619 = pkin(1) * t8697;
t8637 = pkin(6) * t8827;
t8871 = t8227 + pkin(1);
t8223 = t8265 * pkin(3);
t8189 = t8223 + pkin(2);
t8902 = t8189 * t8257;
t8097 = 0.1e1 / ((-t8266 * t8637 + (-pkin(6) * t8647 + t8218 * t8871) * t8265 + t8598) * t8245 + (t8204 - t8902) * t8619);
t7998 = t8034 * t8097;
t8231 = pkin(1) * t8268;
t8234 = pkin(2) + t8268;
t8235 = pkin(2) - t8268;
t8748 = (t8223 + t8234) * (t8223 + t8235);
t8493 = t8257 * t8748;
t8112 = t8231 - t8493;
t8185 = t8218 + pkin(6);
t8732 = (t8246 + 0.1e1) * (t8246 - 0.1e1);
t8633 = -0.2e1 * t8732;
t8367 = t8189 * t8244 * t8633;
t8389 = t8185 * t8478;
t8485 = t8189 * t8726;
t8391 = t8185 * t8485;
t8403 = t8267 * t8493;
t8269 = 0.2e1 * t8268;
t8176 = t8257 * t8269 + pkin(1);
t8490 = t8176 * t8189 * t8258;
t8650 = t8267 * t8268;
t8456 = t8246 * t8650;
t8496 = (t8189 * t8456 - t8258 * t8748 / 0.2e1) * t8244 * t8245;
t8733 = t8189 * t8215;
t8742 = t8180 * t8258;
t8042 = -0.2e1 * t8212 * t8496 + (((-t8185 * t8733 + t8212 * t8403) * t8246 + t8212 * t8490) * t8245 + (t8215 * t8493 + t8391) * t8233 - t8391 + t8112 * t8215) * t8266 - t8180 * t8733 + (t8215 * t8367 + ((-t8185 * t8215 * t8257 + t8485) * t8246 + t8212 * t8742) * t8245 + (t8389 + t8733) * t8233 - t8389) * t8268;
t8130 = t8246 * t8665 + t8663;
t8701 = t8246 * t8256;
t8283 = -pkin(3) * t8701 + t8331;
t8613 = pkin(3) * t8669;
t8662 = t8258 * t8268;
t8830 = pkin(2) * t8267;
t8286 = -(t8246 * t8830 + t8662) * t8257 + (-pkin(2) * t8258 + t8456) * t8266 + t8245 * t8613;
t8082 = (t8130 * t8212 - t8473) * t8827 + (-t8212 * t8286 + t8215 * t8283) * t8265 - (t8212 * t8707 + t8215 * t8246) * t8837;
t8708 = t8245 * t8266;
t8607 = pkin(6) * t8708;
t8622 = t8246 * t8230;
t8134 = t8607 + t8622;
t8186 = t8218 - pkin(6);
t8640 = pkin(1) * t8218;
t8846 = pkin(1) * t8246;
t8092 = -t8134 * t8827 + ((-pkin(6) * t8201 + t8186 * t8227 + t8640) * t8245 + t8155 * t8846) * t8265 + t8245 * t8598;
t8086 = 0.1e1 / t8092;
t8536 = t8086 * t8714;
t8874 = 0.2e1 * pkin(6);
t8387 = t8536 * t8874;
t8163 = pkin(6) * t8265 - t8837;
t8696 = t8246 * t8268;
t8177 = pkin(1) * t8696;
t8745 = t8177 * t8265;
t8103 = 0.1e1 / ((-t8163 * t8189 * t8245 + t8745) * t8266 + (pkin(1) * t8189 * t8256 - t8163 * t8201) * t8245 - t8619 * t8902);
t8272 = 0.1e1 / pkin(3);
t8751 = t8103 * t8272;
t8572 = t8042 * t8751;
t8440 = pkin(7) * t8572;
t8270 = 0.2e1 * pkin(2);
t8843 = pkin(1) * t8266;
t8198 = t8270 + t8843;
t8757 = t8097 * t8198;
t8158 = pkin(7) * t8257 + t8871;
t8858 = 0.2e1 * ((pkin(7) * t8666 + t8890) * t8233 - t8158 * t8266) * t8086;
t8861 = t8272 * t8871;
t8887 = t8103 * t8861;
t8910 = (t8042 * t8887 + (pkin(6) * t7998 + t8440) * t8257) * t8245 + t8082 * t8858 + (-t8034 * t8757 + t8082 * t8387) * t8246;
t8472 = t8215 * t8665;
t8430 = pkin(3) * t8472;
t8479 = t8212 * t8714;
t8723 = t8215 * t8267;
t8727 = t8212 * t8257;
t8037 = (t8274 * t8212 + t8723 * t8853) * t8233 + ((t8215 * t8663 + 0.2e1 * t8479) * t8827 + (-t8212 * t8331 + t8215 * t8852) * t8265 + t8245 * (t8215 * t8289 - t8589 * t8727)) * t8246 - t8243 * t8430 + ((t8212 * t8244 - t8215 * t8400 - t8212) * t8218 - t8212 * pkin(6)) * t8265 + (t8212 * t8361 + t8215 * t8325) * t8256 + t8430;
t8001 = t8037 * t8097;
t8388 = t8185 * t8472;
t8484 = t8189 * t8723;
t8390 = t8185 * t8484;
t8734 = t8189 * t8212;
t8043 = 0.2e1 * t8215 * t8496 + (((-t8185 * t8734 - t8215 * t8403) * t8246 - t8215 * t8490) * t8245 + (t8212 * t8493 - t8390) * t8233 + t8390 + t8112 * t8212) * t8266 - t8180 * t8734 + (t8212 * t8367 - ((t8185 * t8727 + t8484) * t8246 + t8215 * t8742) * t8245 - (t8388 - t8734) * t8233 + t8388) * t8268;
t8081 = -(t8130 * t8215 + t8479) * t8827 + (t8212 * t8283 + t8215 * t8286) * t8265 + (-t8212 * t8246 + t8215 * t8707) * t8837;
t8571 = t8043 * t8751;
t8439 = pkin(7) * t8571;
t8909 = (t8043 * t8887 + (pkin(6) * t8001 + t8439) * t8257) * t8245 + t8081 * t8858 + (-t8037 * t8757 + t8081 * t8387) * t8246;
t8248 = legFrame(2,2);
t8211 = sin(t8248);
t8214 = cos(t8248);
t8253 = sin(qJ(3,2));
t8217 = t8253 * pkin(3);
t8262 = cos(qJ(3,2));
t8241 = t8262 ^ 2;
t8263 = cos(qJ(2,2));
t8242 = t8263 ^ 2;
t8203 = t8268 * t8263;
t8254 = sin(qJ(2,2));
t8222 = t8242 * pkin(2);
t8891 = t8222 - pkin(2);
t8329 = t8254 * t8203 + t8891;
t8206 = t8242 - 0.2e1;
t8428 = t8206 * t8217 - pkin(6);
t8275 = -t8253 * t8329 - t8262 * t8428;
t8264 = cos(qJ(1,2));
t8680 = t8253 * t8264;
t8290 = t8329 * t8680;
t8229 = pkin(1) * t8254;
t8194 = t8229 + pkin(7);
t8179 = pkin(8) + t8194;
t8676 = t8254 * t8264;
t8677 = t8254 * t8263;
t8255 = sin(qJ(1,2));
t8715 = t8245 * t8255;
t8866 = t8242 * t8268;
t8326 = pkin(6) * t8676 - (pkin(2) * t8677 + t8179 - t8866) * t8715;
t8838 = pkin(2) * t8254;
t8154 = t8203 - t8838;
t8332 = t8245 * t8154;
t8200 = t8268 * t8254;
t8172 = t8200 + pkin(1);
t8362 = t8172 * t8263 + t8222;
t8590 = t8253 * pkin(6) + pkin(3);
t8380 = t8254 * t8590;
t8674 = t8255 * t8263;
t8716 = t8245 * t8254;
t8401 = t8674 * t8716;
t8480 = t8211 * t8676;
t8433 = pkin(3) * t8480;
t8475 = t8214 * t8716;
t8728 = t8211 * t8264;
t8828 = t8241 * pkin(3);
t8226 = pkin(2) * t8263;
t8648 = t8200 + t8226;
t8151 = pkin(1) + t8648;
t8709 = t8245 * t8264;
t8851 = t8255 * t8151 + t8428 * t8709;
t8833 = pkin(2) * t8262;
t8854 = t8254 * (-t8590 + 0.2e1 * t8828 + t8833) - t8262 * t8203;
t8033 = (t8275 * t8214 - t8728 * t8854) * t8233 + (-(t8211 * t8674 - 0.2e1 * t8475) * t8828 + (-t8211 * t8851 - t8214 * t8332) * t8262 - (t8211 * t8290 + t8214 * t8380) * t8245) * t8246 + t8241 * t8433 + ((t8211 * t8401 + t8214 * t8242 - t8214) * t8217 - t8214 * pkin(6)) * t8262 + (-t8211 * t8326 + t8214 * t8362) * t8253 - t8433;
t8839 = pkin(2) * t8253;
t8599 = t8151 * t8839;
t8698 = t8246 * t8262;
t8620 = pkin(1) * t8698;
t8638 = pkin(6) * t8828;
t8872 = t8226 + pkin(1);
t8221 = t8262 * pkin(3);
t8188 = t8221 + pkin(2);
t8903 = t8188 * t8254;
t8096 = 0.1e1 / ((-t8263 * t8638 + (-pkin(6) * t8648 + t8217 * t8872) * t8262 + t8599) * t8245 + (t8203 - t8903) * t8620);
t7997 = t8033 * t8096;
t8749 = (t8221 + t8234) * (t8221 + t8235);
t8494 = t8254 * t8749;
t8111 = t8231 - t8494;
t8183 = t8217 + pkin(6);
t8368 = t8188 * t8242 * t8633;
t8393 = t8183 * t8480;
t8487 = t8188 * t8728;
t8395 = t8183 * t8487;
t8404 = t8264 * t8494;
t8175 = t8254 * t8269 + pkin(1);
t8491 = t8175 * t8188 * t8255;
t8654 = t8264 * t8268;
t8457 = t8246 * t8654;
t8497 = (t8188 * t8457 - t8255 * t8749 / 0.2e1) * t8242 * t8245;
t8735 = t8188 * t8214;
t8743 = t8179 * t8255;
t8040 = -0.2e1 * t8211 * t8497 + (((-t8183 * t8735 + t8211 * t8404) * t8246 + t8211 * t8491) * t8245 + (t8214 * t8494 + t8395) * t8233 - t8395 + t8111 * t8214) * t8263 - t8179 * t8735 + (t8214 * t8368 + ((-t8183 * t8214 * t8254 + t8487) * t8246 + t8211 * t8743) * t8245 + (t8393 + t8735) * t8233 - t8393) * t8268;
t8129 = t8246 * t8676 + t8674;
t8703 = t8246 * t8253;
t8284 = -pkin(3) * t8703 + t8332;
t8614 = pkin(3) * t8680;
t8673 = t8255 * t8268;
t8832 = pkin(2) * t8264;
t8287 = -(t8246 * t8832 + t8673) * t8254 + (-pkin(2) * t8255 + t8457) * t8263 + t8245 * t8614;
t8080 = (t8129 * t8211 - t8475) * t8828 + (-t8211 * t8287 + t8214 * t8284) * t8262 - (t8211 * t8709 + t8214 * t8246) * t8839;
t8710 = t8245 * t8263;
t8608 = pkin(6) * t8710;
t8623 = t8246 * t8229;
t8136 = t8608 + t8623;
t8184 = t8217 - pkin(6);
t8641 = pkin(1) * t8217;
t8094 = -t8136 * t8828 + ((-pkin(6) * t8200 + t8184 * t8226 + t8641) * t8245 + t8154 * t8846) * t8262 + t8245 * t8599;
t8090 = 0.1e1 / t8094;
t8520 = t8090 * t8716;
t8385 = t8520 * t8874;
t8161 = pkin(6) * t8262 - t8839;
t8746 = t8177 * t8262;
t8102 = 0.1e1 / ((-t8161 * t8188 * t8245 + t8746) * t8263 + (pkin(1) * t8188 * t8253 - t8161 * t8200) * t8245 - t8620 * t8903);
t8752 = t8102 * t8272;
t8574 = t8040 * t8752;
t8442 = pkin(7) * t8574;
t8844 = pkin(1) * t8263;
t8197 = t8270 + t8844;
t8764 = t8096 * t8197;
t8157 = pkin(7) * t8254 + t8872;
t8857 = 0.2e1 * ((pkin(7) * t8677 + t8891) * t8233 - t8157 * t8263) * t8090;
t8860 = t8272 * t8872;
t8888 = t8102 * t8860;
t8908 = (t8040 * t8888 + (pkin(6) * t7997 + t8442) * t8254) * t8245 + t8080 * t8857 + (-t8033 * t8764 + t8080 * t8385) * t8246;
t8474 = t8214 * t8676;
t8432 = pkin(3) * t8474;
t8481 = t8211 * t8716;
t8724 = t8214 * t8264;
t8729 = t8211 * t8254;
t8036 = (t8275 * t8211 + t8724 * t8854) * t8233 + ((t8214 * t8674 + 0.2e1 * t8481) * t8828 + (-t8211 * t8332 + t8214 * t8851) * t8262 + t8245 * (t8214 * t8290 - t8590 * t8729)) * t8246 - t8241 * t8432 + ((t8211 * t8242 - t8214 * t8401 - t8211) * t8217 - t8211 * pkin(6)) * t8262 + (t8211 * t8362 + t8214 * t8326) * t8253 + t8432;
t8000 = t8036 * t8096;
t8392 = t8183 * t8474;
t8486 = t8188 * t8724;
t8394 = t8183 * t8486;
t8736 = t8188 * t8211;
t8041 = 0.2e1 * t8214 * t8497 + (((-t8183 * t8736 - t8214 * t8404) * t8246 - t8214 * t8491) * t8245 + (t8211 * t8494 - t8394) * t8233 + t8394 + t8111 * t8211) * t8263 - t8179 * t8736 + (t8211 * t8368 - ((t8183 * t8729 + t8486) * t8246 + t8214 * t8743) * t8245 - (t8392 - t8736) * t8233 + t8392) * t8268;
t8079 = -(t8129 * t8214 + t8481) * t8828 + (t8211 * t8284 + t8214 * t8287) * t8262 + (-t8211 * t8246 + t8214 * t8709) * t8839;
t8573 = t8041 * t8752;
t8441 = pkin(7) * t8573;
t8907 = (t8041 * t8888 + (pkin(6) * t8000 + t8441) * t8254) * t8245 + t8079 * t8857 + (-t8036 * t8764 + t8079 * t8385) * t8246;
t8247 = legFrame(3,2);
t8210 = sin(t8247);
t8213 = cos(t8247);
t8250 = sin(qJ(3,3));
t8216 = t8250 * pkin(3);
t8259 = cos(qJ(3,3));
t8239 = t8259 ^ 2;
t8260 = cos(qJ(2,3));
t8240 = t8260 ^ 2;
t8202 = t8268 * t8260;
t8251 = sin(qJ(2,3));
t8220 = t8240 * pkin(2);
t8892 = t8220 - pkin(2);
t8330 = t8251 * t8202 + t8892;
t8205 = t8240 - 0.2e1;
t8429 = t8205 * t8216 - pkin(6);
t8276 = -t8250 * t8330 - t8259 * t8429;
t8261 = cos(qJ(1,3));
t8691 = t8250 * t8261;
t8291 = t8330 * t8691;
t8228 = pkin(1) * t8251;
t8193 = t8228 + pkin(7);
t8178 = pkin(8) + t8193;
t8687 = t8251 * t8261;
t8688 = t8251 * t8260;
t8252 = sin(qJ(1,3));
t8717 = t8245 * t8252;
t8867 = t8240 * t8268;
t8327 = pkin(6) * t8687 - (pkin(2) * t8688 + t8178 - t8867) * t8717;
t8840 = pkin(2) * t8251;
t8153 = t8202 - t8840;
t8333 = t8245 * t8153;
t8199 = t8268 * t8251;
t8171 = t8199 + pkin(1);
t8363 = t8171 * t8260 + t8220;
t8591 = t8250 * pkin(6) + pkin(3);
t8381 = t8251 * t8591;
t8685 = t8252 * t8260;
t8718 = t8245 * t8251;
t8402 = t8685 * t8718;
t8482 = t8210 * t8687;
t8435 = pkin(3) * t8482;
t8477 = t8213 * t8718;
t8730 = t8210 * t8261;
t8829 = t8239 * pkin(3);
t8225 = pkin(2) * t8260;
t8649 = t8199 + t8225;
t8150 = pkin(1) + t8649;
t8711 = t8245 * t8261;
t8850 = t8252 * t8150 + t8429 * t8711;
t8835 = pkin(2) * t8259;
t8855 = t8251 * (-t8591 + 0.2e1 * t8829 + t8835) - t8259 * t8202;
t8032 = (t8276 * t8213 - t8730 * t8855) * t8233 + (-(t8210 * t8685 - 0.2e1 * t8477) * t8829 + (-t8210 * t8850 - t8213 * t8333) * t8259 - (t8210 * t8291 + t8213 * t8381) * t8245) * t8246 + t8239 * t8435 + ((t8210 * t8402 + t8213 * t8240 - t8213) * t8216 - t8213 * pkin(6)) * t8259 + (-t8210 * t8327 + t8213 * t8363) * t8250 - t8435;
t8841 = pkin(2) * t8250;
t8600 = t8150 * t8841;
t8699 = t8246 * t8259;
t8621 = pkin(1) * t8699;
t8639 = pkin(6) * t8829;
t8873 = t8225 + pkin(1);
t8219 = t8259 * pkin(3);
t8187 = t8219 + pkin(2);
t8904 = t8187 * t8251;
t8095 = 0.1e1 / ((-t8260 * t8639 + (-pkin(6) * t8649 + t8216 * t8873) * t8259 + t8600) * t8245 + (t8202 - t8904) * t8621);
t7996 = t8032 * t8095;
t8750 = (t8219 + t8234) * (t8219 + t8235);
t8495 = t8251 * t8750;
t8110 = t8231 - t8495;
t8181 = t8216 + pkin(6);
t8369 = t8187 * t8240 * t8633;
t8397 = t8181 * t8482;
t8489 = t8187 * t8730;
t8399 = t8181 * t8489;
t8405 = t8261 * t8495;
t8174 = t8251 * t8269 + pkin(1);
t8492 = t8174 * t8187 * t8252;
t8658 = t8261 * t8268;
t8458 = t8246 * t8658;
t8498 = (t8187 * t8458 - t8252 * t8750 / 0.2e1) * t8240 * t8245;
t8737 = t8187 * t8213;
t8744 = t8178 * t8252;
t8038 = -0.2e1 * t8210 * t8498 + (((-t8181 * t8737 + t8210 * t8405) * t8246 + t8210 * t8492) * t8245 + (t8213 * t8495 + t8399) * t8233 - t8399 + t8110 * t8213) * t8260 - t8178 * t8737 + (t8213 * t8369 + ((-t8181 * t8213 * t8251 + t8489) * t8246 + t8210 * t8744) * t8245 + (t8397 + t8737) * t8233 - t8397) * t8268;
t8128 = t8246 * t8687 + t8685;
t8705 = t8246 * t8250;
t8285 = -pkin(3) * t8705 + t8333;
t8615 = pkin(3) * t8691;
t8684 = t8252 * t8268;
t8834 = pkin(2) * t8261;
t8288 = -(t8246 * t8834 + t8684) * t8251 + (-pkin(2) * t8252 + t8458) * t8260 + t8245 * t8615;
t8078 = (t8128 * t8210 - t8477) * t8829 + (-t8210 * t8288 + t8213 * t8285) * t8259 - (t8210 * t8711 + t8213 * t8246) * t8841;
t8712 = t8245 * t8260;
t8609 = pkin(6) * t8712;
t8624 = t8246 * t8228;
t8135 = t8609 + t8624;
t8182 = t8216 - pkin(6);
t8642 = pkin(1) * t8216;
t8093 = -t8135 * t8829 + ((-pkin(6) * t8199 + t8182 * t8225 + t8642) * t8245 + t8153 * t8846) * t8259 + t8245 * t8600;
t8088 = 0.1e1 / t8093;
t8528 = t8088 * t8718;
t8386 = t8528 * t8874;
t8159 = pkin(6) * t8259 - t8841;
t8747 = t8177 * t8259;
t8101 = 0.1e1 / ((-t8159 * t8187 * t8245 + t8747) * t8260 + (pkin(1) * t8187 * t8250 - t8159 * t8199) * t8245 - t8621 * t8904);
t8753 = t8101 * t8272;
t8576 = t8038 * t8753;
t8444 = pkin(7) * t8576;
t8845 = pkin(1) * t8260;
t8196 = t8270 + t8845;
t8771 = t8095 * t8196;
t8156 = pkin(7) * t8251 + t8873;
t8856 = 0.2e1 * ((pkin(7) * t8688 + t8892) * t8233 - t8156 * t8260) * t8088;
t8859 = t8272 * t8873;
t8889 = t8101 * t8859;
t8906 = (t8038 * t8889 + (pkin(6) * t7996 + t8444) * t8251) * t8245 + t8078 * t8856 + (-t8032 * t8771 + t8078 * t8386) * t8246;
t8476 = t8213 * t8687;
t8434 = pkin(3) * t8476;
t8483 = t8210 * t8718;
t8725 = t8213 * t8261;
t8731 = t8210 * t8251;
t8035 = (t8276 * t8210 + t8725 * t8855) * t8233 + ((t8213 * t8685 + 0.2e1 * t8483) * t8829 + (-t8210 * t8333 + t8213 * t8850) * t8259 + t8245 * (t8213 * t8291 - t8591 * t8731)) * t8246 - t8239 * t8434 + ((t8210 * t8240 - t8213 * t8402 - t8210) * t8216 - t8210 * pkin(6)) * t8259 + (t8210 * t8363 + t8213 * t8327) * t8250 + t8434;
t7999 = t8035 * t8095;
t8396 = t8181 * t8476;
t8488 = t8187 * t8725;
t8398 = t8181 * t8488;
t8738 = t8187 * t8210;
t8039 = 0.2e1 * t8213 * t8498 + (((-t8181 * t8738 - t8213 * t8405) * t8246 - t8213 * t8492) * t8245 + (t8210 * t8495 - t8398) * t8233 + t8398 + t8110 * t8210) * t8260 - t8178 * t8738 + (t8210 * t8369 - ((t8181 * t8731 + t8488) * t8246 + t8213 * t8744) * t8245 - (t8396 - t8738) * t8233 + t8396) * t8268;
t8077 = -(t8128 * t8213 + t8483) * t8829 + (t8210 * t8285 + t8213 * t8288) * t8259 + (-t8210 * t8246 + t8213 * t8711) * t8841;
t8575 = t8039 * t8753;
t8443 = pkin(7) * t8575;
t8905 = (t8039 * t8889 + (pkin(6) * t7999 + t8443) * t8251) * t8245 + t8077 * t8856 + (-t8035 * t8771 + t8077 * t8386) * t8246;
t8660 = t8260 * t8261;
t8690 = t8251 * t8252;
t8704 = t8246 * t8252;
t8848 = -0.2e1 * t8233 + 0.1e1;
t8062 = ((-t8429 * t8704 - t8615 * t8688) * t8259 - (t8330 * t8704 + t8261 * (t8251 * t8873 + t8268 - t8867)) * t8250) * t8245 + (t8246 * t8660 + t8848 * t8690) * t8829 + (t8150 * t8261 + t8153 * t8704) * t8699 + t8252 * t8381 * t8732;
t8044 = t8062 * t8095;
t8143 = t8246 * t8684 + t8834;
t8461 = t8246 * t8690;
t8469 = t8250 * t8717;
t8104 = -(-t8461 + t8660) * t8829 + (-pkin(3) * t8469 - t8143 * t8260 - t8251 * (-pkin(2) * t8704 + t8658)) * t8259 - pkin(2) * t8469;
t8842 = pkin(2) * t8246;
t8146 = -pkin(6) * t8245 * t8268 - pkin(1) * t8842;
t8273 = pkin(2) ^ 2;
t8446 = t8696 * t8270;
t8722 = t8234 * t8235;
t8471 = t8246 * t8722;
t8643 = -0.2e1 * t8842;
t8659 = t8261 * t8174;
t8271 = pkin(3) ^ 2;
t8721 = t8239 * t8271;
t8741 = t8181 * t8245;
t8798 = ((t8252 * t8446 + 0.2e1 * t8143 * t8219 + (t8721 + t8722) * t8261) * t8240 + (-t8461 * t8721 + ((t8251 * t8643 + t8741) * t8252 + t8659) * t8219 + (pkin(2) * t8741 - t8251 * t8471) * t8252 + pkin(2) * t8659) * t8260 + (t8261 * t8178 + (t8181 * t8718 - t8187 * t8246) * t8252) * t8268) / ((t8747 + (t8182 * t8835 + t8250 * t8273 - t8639) * t8245) * t8260 - t8624 * t8829 + (t8146 * t8251 + t8245 * t8642) * t8259 + t8245 * t8171 * t8841);
t8570 = t8272 * t8798;
t8438 = pkin(7) * t8570;
t8895 = (t8859 * t8245 * t8798 - (pkin(6) * t8044 - t8245 * t8438) * t8251) * t8245 - t8104 * t8856 - (-t8062 * t8771 + t8104 * t8386) * t8246;
t8656 = t8263 * t8264;
t8679 = t8254 * t8255;
t8702 = t8246 * t8255;
t8063 = ((-t8428 * t8702 - t8614 * t8677) * t8262 - (t8329 * t8702 + t8264 * (t8254 * t8872 + t8268 - t8866)) * t8253) * t8245 + (t8246 * t8656 + t8848 * t8679) * t8828 + (t8151 * t8264 + t8154 * t8702) * t8698 + t8255 * t8380 * t8732;
t8045 = t8063 * t8096;
t8144 = t8246 * t8673 + t8832;
t8460 = t8246 * t8679;
t8466 = t8253 * t8715;
t8105 = -(-t8460 + t8656) * t8828 + (-pkin(3) * t8466 - t8144 * t8263 - t8254 * (-pkin(2) * t8702 + t8654)) * t8262 - pkin(2) * t8466;
t8655 = t8264 * t8175;
t8720 = t8241 * t8271;
t8740 = t8183 * t8245;
t8797 = ((t8255 * t8446 + 0.2e1 * t8144 * t8221 + (t8720 + t8722) * t8264) * t8242 + (-t8460 * t8720 + ((t8254 * t8643 + t8740) * t8255 + t8655) * t8221 + (pkin(2) * t8740 - t8254 * t8471) * t8255 + pkin(2) * t8655) * t8263 + (t8264 * t8179 + (t8183 * t8716 - t8188 * t8246) * t8255) * t8268) / ((t8746 + (t8184 * t8833 + t8253 * t8273 - t8638) * t8245) * t8263 - t8623 * t8828 + (t8146 * t8254 + t8245 * t8641) * t8262 + t8245 * t8172 * t8839);
t8569 = t8272 * t8797;
t8437 = pkin(7) * t8569;
t8894 = (t8860 * t8245 * t8797 - (pkin(6) * t8045 - t8245 * t8437) * t8254) * t8245 - t8105 * t8857 - (-t8063 * t8764 + t8105 * t8385) * t8246;
t8652 = t8266 * t8267;
t8668 = t8257 * t8258;
t8700 = t8246 * t8258;
t8064 = ((-t8427 * t8700 - t8613 * t8666) * t8265 - (t8328 * t8700 + t8267 * (t8257 * t8871 + t8268 - t8865)) * t8256) * t8245 + (t8246 * t8652 + t8848 * t8668) * t8827 + (t8152 * t8267 + t8155 * t8700) * t8697 + t8258 * t8379 * t8732;
t8046 = t8064 * t8097;
t8145 = t8246 * t8662 + t8830;
t8459 = t8246 * t8668;
t8463 = t8256 * t8713;
t8106 = -(-t8459 + t8652) * t8827 + (-pkin(3) * t8463 - t8145 * t8266 - t8257 * (-pkin(2) * t8700 + t8650)) * t8265 - pkin(2) * t8463;
t8651 = t8267 * t8176;
t8719 = t8243 * t8271;
t8739 = t8185 * t8245;
t8796 = ((t8258 * t8446 + 0.2e1 * t8145 * t8223 + (t8719 + t8722) * t8267) * t8244 + (-t8459 * t8719 + ((t8257 * t8643 + t8739) * t8258 + t8651) * t8223 + (pkin(2) * t8739 - t8257 * t8471) * t8258 + pkin(2) * t8651) * t8266 + (t8267 * t8180 + (t8185 * t8714 - t8189 * t8246) * t8258) * t8268) / ((t8745 + (t8186 * t8831 + t8256 * t8273 - t8637) * t8245) * t8266 - t8622 * t8827 + (t8146 * t8257 + t8245 * t8640) * t8265 + t8245 * t8173 * t8837);
t8568 = t8272 * t8796;
t8436 = pkin(7) * t8568;
t8893 = (t8861 * t8245 * t8796 - (pkin(6) * t8046 - t8245 * t8436) * t8257) * t8245 - t8106 * t8858 - (-t8064 * t8757 + t8106 * t8387) * t8246;
t8870 = t8077 * t8078;
t8869 = t8079 * t8080;
t8868 = t8081 * t8082;
t8849 = -0.2e1 * pkin(2);
t8847 = 0.2e1 * t8233 - 0.2e1;
t8232 = t8245 ^ 2;
t8826 = MDP(4) * t8232;
t8825 = MDP(6) * t8245;
t8824 = MDP(7) * t8245;
t8823 = MDP(15) * t8245;
t8804 = t8038 * t8101;
t8803 = t8039 * t8101;
t8802 = t8040 * t8102;
t8801 = t8041 * t8102;
t8800 = t8042 * t8103;
t8799 = t8043 * t8103;
t8053 = t8077 * t8088;
t8795 = t8077 * t8095;
t8054 = t8078 * t8088;
t8794 = t8078 * t8095;
t8055 = t8079 * t8090;
t8793 = t8079 * t8096;
t8056 = t8080 * t8090;
t8792 = t8080 * t8096;
t8057 = t8081 * t8086;
t8791 = t8081 * t8097;
t8058 = t8082 * t8086;
t8790 = t8082 * t8097;
t8789 = t8086 * t8245;
t8788 = t8086 * t8246;
t8787 = t8086 * t8266;
t8087 = 0.1e1 / t8092 ^ 2;
t8786 = t8087 * t8106;
t8238 = t8257 ^ 2;
t8785 = t8087 * t8238;
t8784 = t8088 * t8245;
t8783 = t8088 * t8246;
t8782 = t8088 * t8260;
t8089 = 0.1e1 / t8093 ^ 2;
t8781 = t8089 * t8104;
t8236 = t8251 ^ 2;
t8780 = t8089 * t8236;
t8779 = t8090 * t8245;
t8778 = t8090 * t8246;
t8777 = t8090 * t8263;
t8091 = 0.1e1 / t8094 ^ 2;
t8776 = t8091 * t8105;
t8237 = t8254 ^ 2;
t8775 = t8091 * t8237;
t8774 = t8095 * t8104;
t8612 = pkin(6) * t8718;
t8773 = t8095 * (t8246 * t8845 - t8612);
t8772 = t8095 * t8135;
t8770 = t8095 * t8246;
t8769 = t8095 * t8250;
t8768 = t8095 * t8259;
t8767 = t8096 * t8105;
t8611 = pkin(6) * t8716;
t8766 = t8096 * (t8246 * t8844 - t8611);
t8765 = t8096 * t8136;
t8763 = t8096 * t8246;
t8762 = t8096 * t8253;
t8761 = t8096 * t8262;
t8760 = t8097 * t8106;
t8610 = pkin(6) * t8714;
t8759 = t8097 * (t8246 * t8843 - t8610);
t8758 = t8097 * t8134;
t8756 = t8097 * t8246;
t8755 = t8097 * t8256;
t8754 = t8097 * t8265;
t8068 = t8104 * t8088;
t8069 = t8105 * t8090;
t8070 = t8106 * t8086;
t8706 = t8245 * t8272;
t8695 = t8246 * t8272;
t8694 = t8250 * t8251;
t8693 = t8250 * t8259;
t8692 = t8250 * t8260;
t8689 = t8251 * t8259;
t8683 = t8253 * t8254;
t8682 = t8253 * t8262;
t8681 = t8253 * t8263;
t8678 = t8254 * t8262;
t8672 = t8256 * t8257;
t8671 = t8256 * t8265;
t8670 = t8256 * t8266;
t8667 = t8257 * t8265;
t8661 = t8259 * t8260;
t8657 = t8262 * t8263;
t8653 = t8265 * t8266;
t8646 = t8095 * t8849;
t8645 = t8096 * t8849;
t8644 = t8097 * t8849;
t8632 = -0.2e1 * t8245 * t8246;
t8631 = -0.2e1 * t8693;
t8630 = 0.2e1 * t8693;
t8629 = -0.2e1 * t8682;
t8628 = 0.2e1 * t8682;
t8627 = -0.2e1 * t8671;
t8626 = 0.2e1 * t8671;
t8625 = t8847 * pkin(6);
t8618 = t8095 * t8840;
t8617 = t8096 * t8838;
t8616 = t8097 * t8836;
t8606 = pkin(7) * t7996;
t8605 = pkin(7) * t7997;
t8604 = pkin(7) * t7998;
t8603 = pkin(7) * t7999;
t8602 = pkin(7) * t8000;
t8601 = pkin(7) * t8001;
t8588 = t8032 * t8769;
t8587 = t8032 * t8768;
t8586 = t8033 * t8762;
t8585 = t8033 * t8761;
t8584 = t8034 * t8755;
t8583 = t8034 * t8754;
t8582 = t8035 * t8769;
t8581 = t8035 * t8768;
t8580 = t8036 * t8762;
t8579 = t8036 * t8761;
t8578 = t8037 * t8755;
t8577 = t8037 * t8754;
t8567 = t8062 * t8769;
t8566 = t8062 * t8768;
t8565 = t8063 * t8762;
t8564 = t8063 * t8761;
t8563 = t8064 * t8755;
t8562 = t8064 * t8754;
t8561 = t8089 * t8870;
t8560 = t8077 * t8782;
t8559 = t8077 * t8773;
t8558 = t8077 * t8772;
t8557 = t8078 * t8782;
t8556 = t8078 * t8773;
t8555 = t8078 * t8772;
t8554 = t8091 * t8869;
t8553 = t8079 * t8777;
t8552 = t8079 * t8766;
t8551 = t8079 * t8765;
t8550 = t8080 * t8777;
t8549 = t8080 * t8766;
t8548 = t8080 * t8765;
t8547 = t8087 * t8868;
t8546 = t8081 * t8787;
t8545 = t8081 * t8759;
t8544 = t8081 * t8758;
t8543 = t8082 * t8787;
t8542 = t8082 * t8759;
t8541 = t8082 * t8758;
t8540 = t8266 * t8070;
t8539 = (pkin(6) * t8670 + t8158 * t8265) * t8789;
t8538 = (-pkin(6) * t8653 + t8158 * t8256) * t8789;
t8370 = -pkin(7) * t8266 + t8836;
t8537 = t8370 * t8789;
t8535 = t8086 * t8708;
t8534 = t8106 * t8785;
t8533 = t8087 * t8666;
t8532 = t8260 * t8068;
t8531 = (pkin(6) * t8692 + t8156 * t8259) * t8784;
t8530 = (-pkin(6) * t8661 + t8156 * t8250) * t8784;
t8372 = -pkin(7) * t8260 + t8840;
t8529 = t8372 * t8784;
t8527 = t8088 * t8712;
t8526 = t8104 * t8780;
t8525 = t8089 * t8688;
t8524 = t8263 * t8069;
t8523 = (pkin(6) * t8681 + t8157 * t8262) * t8779;
t8522 = (-pkin(6) * t8657 + t8157 * t8253) * t8779;
t8371 = -pkin(7) * t8263 + t8838;
t8521 = t8371 * t8779;
t8519 = t8090 * t8710;
t8518 = t8105 * t8775;
t8517 = t8091 * t8677;
t8516 = t8104 * t8773;
t8515 = t8104 * t8772;
t8514 = t8095 * t8692;
t8513 = t8095 * t8661;
t8512 = t8105 * t8766;
t8511 = t8105 * t8765;
t8510 = t8096 * t8681;
t8509 = t8096 * t8657;
t8508 = t8106 * t8759;
t8507 = t8106 * t8758;
t8506 = t8097 * t8670;
t8505 = t8097 * t8653;
t8470 = t8245 * t8694;
t8122 = t8470 - t8699;
t8504 = t8122 * t8753;
t8468 = t8245 * t8689;
t8124 = t8468 + t8705;
t8503 = t8124 * t8753;
t8467 = t8245 * t8683;
t8123 = t8467 - t8698;
t8502 = t8123 * t8752;
t8465 = t8245 * t8678;
t8125 = t8465 + t8703;
t8501 = t8125 * t8752;
t8464 = t8245 * t8672;
t8126 = t8464 - t8697;
t8500 = t8126 * t8751;
t8462 = t8245 * t8667;
t8127 = t8462 + t8701;
t8499 = t8127 * t8751;
t8047 = t8077 * t8783;
t8048 = t8078 * t8783;
t8049 = t8079 * t8778;
t8050 = t8080 * t8778;
t8051 = t8081 * t8788;
t8052 = t8082 * t8788;
t8065 = t8246 * t8068;
t8066 = t8246 * t8069;
t8067 = t8246 * t8070;
t8452 = t8770 / 0.2e1;
t8451 = t8763 / 0.2e1;
t8450 = t8756 / 0.2e1;
t8445 = 0.2e1 * MDP(5) * t8232;
t8449 = (t8517 * t8869 + t8525 * t8870 + t8533 * t8868) * t8445 + (t8236 * t8561 + t8237 * t8554 + t8238 * t8547) * t8826 + (t8547 + t8554 + t8561) * MDP(1);
t8415 = t8105 * t8517;
t8418 = t8104 * t8525;
t8421 = t8106 * t8533;
t8448 = (t8077 * t8418 + t8079 * t8415 + t8081 * t8421) * t8445 + (t8077 * t8526 + t8079 * t8518 + t8081 * t8534) * t8826 + (t8077 * t8781 + t8079 * t8776 + t8081 * t8786) * MDP(1);
t8447 = (t8078 * t8418 + t8080 * t8415 + t8082 * t8421) * t8445 + (t8078 * t8526 + t8080 * t8518 + t8082 * t8534) * t8826 + (t8078 * t8781 + t8080 * t8776 + t8082 * t8786) * MDP(1);
t8426 = (0.4e1 * t8239 - 0.2e1) * t8718;
t8425 = (0.4e1 * t8241 - 0.2e1) * t8716;
t8424 = (0.4e1 * t8243 - 0.2e1) * t8714;
t8423 = t8086 * t8464;
t8422 = t8086 * t8462;
t8420 = t8088 * t8470;
t8419 = t8088 * t8468;
t8417 = t8090 * t8467;
t8416 = t8090 * t8465;
t8414 = t8245 * t8514;
t8413 = t8245 * t8513;
t8412 = t8245 * t8510;
t8411 = t8245 * t8509;
t8410 = t8245 * t8506;
t8409 = t8245 * t8505;
t8408 = t8101 * t8193 * t8695;
t8407 = t8102 * t8194 * t8695;
t8406 = t8103 * t8195 * t8695;
t8366 = 0.2e1 * t8250 * t8468;
t8365 = 0.2e1 * t8253 * t8465;
t8364 = 0.2e1 * t8256 * t8462;
t8357 = t8086 * (t8207 * t8233 - t8244);
t8356 = t8088 * (t8205 * t8233 - t8240);
t8355 = t8090 * (t8206 * t8233 - t8242);
t8354 = (0.2e1 * t8243 - 0.1e1) * t8536;
t8353 = (0.2e1 * t8239 - 0.1e1) * t8528;
t8352 = (0.2e1 * t8241 - 0.1e1) * t8520;
t7954 = 0.2e1 * t8047 + t7999;
t8342 = (t7954 + t7999) * t8053;
t7956 = 0.2e1 * t8048 + t7996;
t8341 = (t7956 + t7996) * t8054;
t7958 = 0.2e1 * t8049 + t8000;
t8340 = (t7958 + t8000) * t8055;
t7960 = 0.2e1 * t8050 + t7997;
t8339 = (t7960 + t7997) * t8056;
t7962 = 0.2e1 * t8051 + t8001;
t8338 = (t7962 + t8001) * t8057;
t7964 = 0.2e1 * t8052 + t7998;
t8337 = (t7964 + t7998) * t8058;
t8030 = 0.2e1 * t8067 + t8046;
t8336 = (t8030 + t8046) * t8070;
t8026 = 0.2e1 * t8065 + t8044;
t8335 = (t8026 + t8044) * t8068;
t8028 = 0.2e1 * t8066 + t8045;
t8334 = (t8028 + t8045) * t8069;
t8321 = t8086 * (-t8198 * t8246 + t8610);
t8320 = t8088 * (-t8196 * t8246 + t8612);
t8319 = t8090 * (-t8197 * t8246 + t8611);
t8318 = t8086 * (t7962 * t8082 + t8034 * t8791);
t8317 = t8086 * (t7962 * t8106 + t8064 * t8791);
t8316 = t8086 * (t7964 * t8081 + t8037 * t8790);
t8315 = t8086 * (t7964 * t8106 + t8064 * t8790);
t8314 = t8086 * (t8030 * t8082 + t8034 * t8760);
t8313 = t8086 * (t8030 * t8081 + t8037 * t8760);
t8312 = t8088 * (t7954 * t8078 + t8032 * t8795);
t8311 = t8088 * (t7954 * t8104 + t8062 * t8795);
t8310 = t8088 * (t7956 * t8077 + t8035 * t8794);
t8309 = t8088 * (t7956 * t8104 + t8062 * t8794);
t8308 = t8088 * (t8026 * t8078 + t8032 * t8774);
t8307 = t8088 * (t8026 * t8077 + t8035 * t8774);
t8306 = t8090 * (t7958 * t8080 + t8033 * t8793);
t8305 = t8090 * (t7958 * t8105 + t8063 * t8793);
t8304 = t8090 * (t7960 * t8079 + t8036 * t8792);
t8303 = t8090 * (t7960 * t8105 + t8063 * t8792);
t8302 = t8090 * (t8028 * t8080 + t8033 * t8767);
t8301 = t8090 * (t8028 * t8079 + t8036 * t8767);
t8294 = t8086 * (-t8370 * t8632 + t8625);
t8293 = t8088 * (-t8372 * t8632 + t8625);
t8292 = t8090 * (-t8371 * t8632 + t8625);
t8282 = (t8256 * t8632 + t8847 * t8667) * t8787;
t8281 = (t8265 * t8632 - t8847 * t8672) * t8787;
t8280 = (t8250 * t8632 + t8847 * t8689) * t8782;
t8279 = (t8259 * t8632 - t8847 * t8694) * t8782;
t8278 = (t8253 * t8632 + t8847 * t8678) * t8777;
t8277 = (t8262 * t8632 - t8847 * t8683) * t8777;
t8100 = t8106 ^ 2;
t8099 = t8105 ^ 2;
t8098 = t8104 ^ 2;
t8076 = t8082 ^ 2;
t8075 = t8081 ^ 2;
t8074 = t8080 ^ 2;
t8073 = t8079 ^ 2;
t8072 = t8078 ^ 2;
t8071 = t8077 ^ 2;
t8031 = t8067 + t8046;
t8029 = t8066 + t8045;
t8027 = t8065 + t8044;
t8025 = t8067 + t8046 / 0.2e1;
t8024 = t8066 + t8045 / 0.2e1;
t8023 = t8065 + t8044 / 0.2e1;
t8022 = t8064 * t8450 + t8070;
t8021 = t8063 * t8451 + t8069;
t8020 = t8062 * t8452 + t8068;
t8019 = pkin(7) * t8046 + t8067 * t8195;
t8018 = pkin(7) * t8045 + t8066 * t8194;
t8017 = pkin(7) * t8044 + t8065 * t8193;
t8007 = (t8540 + t8568) * t8245;
t8006 = (t8524 + t8569) * t8245;
t8005 = (t8532 + t8570) * t8245;
t8004 = (t8070 * t8370 - t8436) * t8245;
t8003 = (t8069 * t8371 - t8437) * t8245;
t8002 = (t8068 * t8372 - t8438) * t8245;
t7992 = t8031 * t8256 + t8106 * t8422;
t7991 = t8029 * t8253 + t8105 * t8416;
t7990 = t8027 * t8250 + t8104 * t8419;
t7989 = t8031 * t8265 - t8106 * t8423;
t7988 = t8029 * t8262 - t8105 * t8417;
t7987 = t8027 * t8259 - t8104 * t8420;
t7986 = t8064 * t8644 + t8106 * t8321;
t7985 = t8063 * t8645 + t8105 * t8319;
t7984 = t8062 * t8646 + t8104 * t8320;
t7983 = -t8019 * t8265 + t8106 * t8538;
t7982 = -t8018 * t8262 + t8105 * t8522;
t7981 = -t8018 * t8253 - t8105 * t8523;
t7980 = -t8017 * t8250 - t8104 * t8531;
t7979 = -t8019 * t8256 - t8106 * t8539;
t7978 = -t8017 * t8259 + t8104 * t8530;
t7977 = t8082 * t8535 - t8572;
t7976 = t8081 * t8535 - t8571;
t7975 = t8080 * t8519 - t8574;
t7974 = t8079 * t8519 - t8573;
t7973 = t8078 * t8527 - t8576;
t7972 = t8077 * t8527 - t8575;
t7971 = t8082 * t8537 + t8440;
t7970 = t8081 * t8537 + t8439;
t7969 = t8080 * t8521 + t8442;
t7968 = t8079 * t8521 + t8441;
t7967 = t8078 * t8529 + t8444;
t7966 = t8077 * t8529 + t8443;
t7965 = t8052 + t7998;
t7963 = t8051 + t8001;
t7961 = t8050 + t7997;
t7959 = t8049 + t8000;
t7957 = t8048 + t7996;
t7955 = t8047 + t7999;
t7953 = t8052 + t7998 / 0.2e1;
t7952 = t8051 + t8001 / 0.2e1;
t7951 = t8050 + t7997 / 0.2e1;
t7950 = t8049 + t8000 / 0.2e1;
t7949 = t8048 + t7996 / 0.2e1;
t7948 = t8047 + t7999 / 0.2e1;
t7947 = t8037 * t8450 + t8057;
t7946 = t8036 * t8451 + t8055;
t7945 = t8035 * t8452 + t8053;
t7944 = t8034 * t8450 + t8058;
t7943 = t8033 * t8451 + t8056;
t7942 = t8032 * t8452 + t8054;
t7941 = t8052 * t8195 + t8604;
t7940 = t8051 * t8195 + t8601;
t7939 = t8050 * t8194 + t8605;
t7938 = t8049 * t8194 + t8602;
t7937 = t8048 * t8193 + t8606;
t7936 = t8047 * t8193 + t8603;
t7929 = -t8064 * t8756 + t8106 * t8357 + t8070;
t7928 = -t8063 * t8763 + t8105 * t8355 + t8069;
t7927 = -t8062 * t8770 + t8104 * t8356 + t8068;
t7926 = t8031 * t8626 + t8106 * t8354;
t7925 = t8029 * t8628 + t8105 * t8352;
t7924 = t8027 * t8630 + t8104 * t8353;
t7923 = 0.2e1 * t8021 * t8844 - 0.2e1 * t8024 * t8611;
t7922 = 0.2e1 * t8022 * t8843 - 0.2e1 * t8025 * t8610;
t7921 = -0.2e1 * t8022 * t8230 - 0.2e1 * t8025 * t8607;
t7920 = 0.2e1 * t8020 * t8845 - 0.2e1 * t8023 * t8612;
t7919 = -0.2e1 * t8020 * t8228 - 0.2e1 * t8023 * t8609;
t7918 = -0.2e1 * t8021 * t8229 - 0.2e1 * t8024 * t8608;
t7905 = t7965 * t8256 + t8082 * t8422;
t7904 = t7963 * t8256 + t8081 * t8422;
t7903 = t7961 * t8253 + t8080 * t8416;
t7902 = t7959 * t8253 + t8079 * t8416;
t7901 = t7957 * t8250 + t8078 * t8419;
t7900 = t7955 * t8250 + t8077 * t8419;
t7899 = t7965 * t8265 - t8082 * t8423;
t7898 = t7963 * t8265 - t8081 * t8423;
t7897 = t7961 * t8262 - t8080 * t8417;
t7896 = t7959 * t8262 - t8079 * t8417;
t7895 = t7957 * t8259 - t8078 * t8420;
t7894 = t7955 * t8259 - t8077 * t8420;
t7893 = t8034 * t8644 + t8082 * t8321;
t7892 = t8037 * t8644 + t8081 * t8321;
t7891 = t8033 * t8645 + t8080 * t8319;
t7890 = t8036 * t8645 + t8079 * t8319;
t7889 = t8032 * t8646 + t8078 * t8320;
t7888 = t8035 * t8646 + t8077 * t8320;
t7887 = -t7941 * t8265 + t8082 * t8538;
t7886 = -t7940 * t8265 + t8081 * t8538;
t7885 = -t7939 * t8262 + t8080 * t8522;
t7884 = -t7938 * t8262 + t8079 * t8522;
t7883 = -t7939 * t8253 - t8080 * t8523;
t7882 = -t7938 * t8253 - t8079 * t8523;
t7881 = -t7937 * t8250 - t8078 * t8531;
t7880 = -t7936 * t8250 - t8077 * t8531;
t7879 = -t7941 * t8256 - t8082 * t8539;
t7878 = -t7940 * t8256 - t8081 * t8539;
t7877 = -t7937 * t8259 + t8078 * t8530;
t7876 = -t7936 * t8259 + t8077 * t8530;
t7875 = -t7986 * t8265 - t8004 * t8256;
t7874 = t7986 * t8256 - t8004 * t8265;
t7873 = -t7985 * t8262 - t8003 * t8253;
t7872 = t7985 * t8253 - t8003 * t8262;
t7871 = -t7984 * t8259 - t8002 * t8250;
t7870 = t7984 * t8250 - t8002 * t8259;
t7869 = (-t8064 * t8506 - t8127 * t8568) * t8245 + t8106 * t8282;
t7868 = (-t8063 * t8510 - t8125 * t8569) * t8245 + t8105 * t8278;
t7867 = (-t8062 * t8514 - t8124 * t8570) * t8245 + t8104 * t8280;
t7866 = (-t8064 * t8505 + t8126 * t8568) * t8245 + t8106 * t8281;
t7865 = (-t8063 * t8509 + t8123 * t8569) * t8245 + t8105 * t8277;
t7864 = (-t8062 * t8513 + t8122 * t8570) * t8245 + t8104 * t8279;
t7860 = -t8034 * t8756 + t8082 * t8357 + t8058;
t7859 = -t8037 * t8756 + t8081 * t8357 + t8057;
t7858 = -t8033 * t8763 + t8080 * t8355 + t8056;
t7857 = -t8036 * t8763 + t8079 * t8355 + t8055;
t7856 = -t8032 * t8770 + t8078 * t8356 + t8054;
t7855 = -t8035 * t8770 + t8077 * t8356 + t8053;
t7854 = t7965 * t8626 + t8082 * t8354;
t7853 = t7963 * t8626 + t8081 * t8354;
t7852 = t7961 * t8628 + t8080 * t8352;
t7851 = t7959 * t8628 + t8079 * t8352;
t7850 = t7957 * t8630 + t8078 * t8353;
t7849 = t7955 * t8630 + t8077 * t8353;
t7848 = 0.2e1 * t7943 * t8844 - 0.2e1 * t7951 * t8611;
t7847 = 0.2e1 * t7946 * t8844 - 0.2e1 * t7950 * t8611;
t7846 = 0.2e1 * t7944 * t8843 - 0.2e1 * t7953 * t8610;
t7845 = -0.2e1 * t7944 * t8230 - 0.2e1 * t7953 * t8607;
t7844 = 0.2e1 * t7947 * t8843 - 0.2e1 * t7952 * t8610;
t7843 = -0.2e1 * t7947 * t8230 - 0.2e1 * t7952 * t8607;
t7842 = 0.2e1 * t7942 * t8845 - 0.2e1 * t7949 * t8612;
t7841 = -0.2e1 * t7942 * t8228 - 0.2e1 * t7949 * t8609;
t7840 = 0.2e1 * t7945 * t8845 - 0.2e1 * t7948 * t8612;
t7839 = -0.2e1 * t7945 * t8228 - 0.2e1 * t7948 * t8609;
t7838 = -0.2e1 * t7943 * t8229 - 0.2e1 * t7951 * t8608;
t7837 = -0.2e1 * t7946 * t8229 - 0.2e1 * t7950 * t8608;
t7836 = (t8370 * t8046 + (-t8195 * t8246 - t8607) * t8568) * t8245 + t8106 * t8294;
t7835 = (t8371 * t8045 + (-t8194 * t8246 - t8608) * t8569) * t8245 + t8105 * t8292;
t7834 = (t8372 * t8044 + (-t8193 * t8246 - t8609) * t8570) * t8245 + t8104 * t8293;
t7833 = t7929 * t8243 + t8025 * t8364 + t8031 * t8246;
t7832 = t7928 * t8241 + t8024 * t8365 + t8029 * t8246;
t7831 = t7927 * t8239 + t8023 * t8366 + t8027 * t8246;
t7830 = t7928 * t8629 + t8024 * t8425;
t7829 = t7929 * t8627 + t8025 * t8424;
t7828 = t7927 * t8631 + t8023 * t8426;
t7827 = -t7893 * t8265 - t7971 * t8256;
t7826 = t7893 * t8256 - t7971 * t8265;
t7825 = -t7892 * t8265 - t7970 * t8256;
t7824 = t7892 * t8256 - t7970 * t8265;
t7823 = -t7891 * t8262 - t7969 * t8253;
t7822 = t7891 * t8253 - t7969 * t8262;
t7821 = -t7890 * t8262 - t7968 * t8253;
t7820 = t7890 * t8253 - t7968 * t8262;
t7819 = -t7889 * t8259 - t7967 * t8250;
t7818 = t7889 * t8250 - t7967 * t8259;
t7817 = -t7888 * t8259 - t7966 * t8250;
t7816 = t7888 * t8250 - t7966 * t8259;
t7815 = -t8034 * t8410 + t8042 * t8499 + t8082 * t8282;
t7814 = -t8037 * t8410 + t8043 * t8499 + t8081 * t8282;
t7813 = -t8033 * t8412 + t8040 * t8501 + t8080 * t8278;
t7812 = -t8036 * t8412 + t8041 * t8501 + t8079 * t8278;
t7811 = -t8032 * t8414 + t8038 * t8503 + t8078 * t8280;
t7810 = -t8035 * t8414 + t8039 * t8503 + t8077 * t8280;
t7809 = -t8034 * t8409 - t8042 * t8500 + t8082 * t8281;
t7808 = -t8037 * t8409 - t8043 * t8500 + t8081 * t8281;
t7807 = -t8033 * t8411 - t8040 * t8502 + t8080 * t8277;
t7806 = -t8036 * t8411 - t8041 * t8502 + t8079 * t8277;
t7805 = -t8032 * t8413 - t8038 * t8504 + t8078 * t8279;
t7804 = -t8035 * t8413 - t8039 * t8504 + t8077 * t8279;
t7803 = t8042 * t8406 + ((pkin(6) * t8572 - t8604) * t8266 + t8034 * t8616) * t8245 + t8082 * t8294;
t7802 = t8043 * t8406 + ((pkin(6) * t8571 - t8601) * t8266 + t8037 * t8616) * t8245 + t8081 * t8294;
t7801 = t8040 * t8407 + ((pkin(6) * t8574 - t8605) * t8263 + t8033 * t8617) * t8245 + t8080 * t8292;
t7800 = t8041 * t8407 + ((pkin(6) * t8573 - t8602) * t8263 + t8036 * t8617) * t8245 + t8079 * t8292;
t7799 = t8038 * t8408 + ((pkin(6) * t8576 - t8606) * t8260 + t8032 * t8618) * t8245 + t8078 * t8293;
t7798 = t8039 * t8408 + ((pkin(6) * t8575 - t8603) * t8260 + t8035 * t8618) * t8245 + t8077 * t8293;
t7797 = t7860 * t8243 + t7953 * t8364 + t7965 * t8246;
t7796 = t7859 * t8243 + t7952 * t8364 + t7963 * t8246;
t7795 = t7858 * t8241 + t7951 * t8365 + t7961 * t8246;
t7794 = t7857 * t8241 + t7950 * t8365 + t7959 * t8246;
t7793 = t7856 * t8239 + t7949 * t8366 + t7957 * t8246;
t7792 = t7855 * t8239 + t7948 * t8366 + t7955 * t8246;
t7791 = t7858 * t8629 + t7951 * t8425;
t7790 = t7857 * t8629 + t7950 * t8425;
t7789 = t7860 * t8627 + t7953 * t8424;
t7788 = t7859 * t8627 + t7952 * t8424;
t7787 = t7856 * t8631 + t7949 * t8426;
t7786 = t7855 * t8631 + t7948 * t8426;
t7785 = -t8256 * t7836 + t8893 * t8265;
t7784 = -t8265 * t7836 - t8893 * t8256;
t7783 = -t7835 * t8253 + t8894 * t8262;
t7782 = -t7835 * t8262 - t8894 * t8253;
t7781 = -t7834 * t8250 + t8895 * t8259;
t7780 = -t7834 * t8259 - t8895 * t8250;
t7779 = -t8256 * t7803 - t8910 * t8265;
t7778 = -t8265 * t7803 + t8910 * t8256;
t7777 = -t8256 * t7802 - t8909 * t8265;
t7776 = -t8265 * t7802 + t8909 * t8256;
t7775 = -t7801 * t8253 - t8908 * t8262;
t7774 = -t7801 * t8262 + t8908 * t8253;
t7773 = -t7800 * t8253 - t8907 * t8262;
t7772 = -t7800 * t8262 + t8907 * t8253;
t7771 = -t7799 * t8250 - t8906 * t8259;
t7770 = -t7799 * t8259 + t8906 * t8250;
t7769 = -t7798 * t8250 - t8905 * t8259;
t7768 = -t7798 * t8259 + t8905 * t8250;
t1 = [(t8071 * t8089 + t8073 * t8091 + t8075 * t8087) * MDP(1) + (t8071 * t8780 + t8073 * t8775 + t8075 * t8785) * t8826 + (t8071 * t8525 + t8073 * t8517 + t8075 * t8533) * t8445 + (t8251 * t8342 + t8254 * t8340 + t8257 * t8338) * t8825 + (t8260 * t8342 + t8263 * t8340 + t8266 * t8338) * t8824 + (t7955 * t7999 + t7959 * t8000 + t7963 * t8001 + (t7955 * t8053 + t7959 * t8055 + t7963 * t8057) * t8246) * MDP(8) + ((t8037 * t8759 + t7844) * t8057 + (t8036 * t8766 + t7847) * t8055 + (t8035 * t8773 + t7840) * t8053) * MDP(9) + ((-t8037 * t8758 + t7843) * t8057 + (-t8036 * t8765 + t7837) * t8055 + (-t8035 * t8772 + t7839) * t8053) * MDP(10) + (t7792 * t8053 + t7794 * t8055 + t7796 * t8057 + t7900 * t8582 + t7902 * t8580 + t7904 * t8578) * MDP(11) + (t7786 * t8053 + t7788 * t8057 + t7790 * t8055 + t7849 * t7999 + t7851 * t8000 + t7853 * t8001) * MDP(12) + (-t7972 * t8582 - t7974 * t8580 - t7976 * t8578 + t7810 * t8053 + t7812 * t8055 + t7814 * t8057 + (t7900 * t8803 + t7902 * t8801 + t7904 * t8799) * t8272) * MDP(13) + (-t7972 * t8581 - t7974 * t8579 - t7976 * t8577 + t7804 * t8053 + t7806 * t8055 + t7808 * t8057 + (t7894 * t8803 + t7896 * t8801 + t7898 * t8799) * t8272) * MDP(14) + ((-t7972 * t8803 - t7974 * t8801 - t7976 * t8799) * t8272 + (t7972 * t8560 + t7974 * t8553 + t7976 * t8546) * t8245) * MDP(15) + (t7769 * t8053 + t7773 * t8055 + t7777 * t8057 + t7817 * t7999 + t7821 * t8000 + t7825 * t8001 + (t7878 * t8799 + t7880 * t8803 + t7882 * t8801) * t8272) * MDP(16) + (t7768 * t8053 + t7772 * t8055 + t7776 * t8057 + t7816 * t7999 + t7820 * t8000 + t7824 * t8001 + (t7876 * t8803 + t7884 * t8801 + t7886 * t8799) * t8272) * MDP(17) + MDP(18); (t8251 * t8310 + t8254 * t8304 + t8257 * t8316) * t8825 + (t8260 * t8310 + t8263 * t8304 + t8266 * t8316) * t8824 + (t7957 * t7999 + t7961 * t8000 + t7965 * t8001 + (t7957 * t8053 + t7961 * t8055 + t7965 * t8057) * t8246) * MDP(8) + ((t7848 * t8079 + t8036 * t8549) * t8090 + (t7842 * t8077 + t8035 * t8556) * t8088 + (t7846 * t8081 + t8037 * t8542) * t8086) * MDP(9) + ((t7838 * t8079 - t8036 * t8548) * t8090 + (t7841 * t8077 - t8035 * t8555) * t8088 + (t7845 * t8081 - t8037 * t8541) * t8086) * MDP(10) + (t7793 * t8053 + t7795 * t8055 + t7797 * t8057 + t7901 * t8582 + t7903 * t8580 + t7905 * t8578) * MDP(11) + (t7787 * t8053 + t7789 * t8057 + t7791 * t8055 + t7850 * t7999 + t7852 * t8000 + t7854 * t8001) * MDP(12) + (-t7973 * t8582 - t7975 * t8580 - t7977 * t8578 + t7811 * t8053 + t7813 * t8055 + t7815 * t8057 + (t7901 * t8803 + t7903 * t8801 + t7905 * t8799) * t8272) * MDP(13) + (-t7973 * t8581 - t7975 * t8579 - t7977 * t8577 + t7805 * t8053 + t7807 * t8055 + t7809 * t8057 + (t7895 * t8803 + t7897 * t8801 + t7899 * t8799) * t8272) * MDP(14) + ((-t7973 * t8803 - t7975 * t8801 - t7977 * t8799) * t8272 + (t7973 * t8560 + t7975 * t8553 + t7977 * t8546) * t8245) * MDP(15) + (t7771 * t8053 + t7775 * t8055 + t7779 * t8057 + t7819 * t7999 + t7823 * t8000 + t7827 * t8001 + (t7879 * t8799 + t7881 * t8803 + t7883 * t8801) * t8272) * MDP(16) + (t7770 * t8053 + t7774 * t8055 + t7778 * t8057 + t7818 * t7999 + t7822 * t8000 + t7826 * t8001 + (t7877 * t8803 + t7885 * t8801 + t7887 * t8799) * t8272) * MDP(17) + t8449; (t8251 * t8307 + t8254 * t8301 + t8257 * t8313) * t8825 + (t8260 * t8307 + t8263 * t8301 + t8266 * t8313) * t8824 + (t8027 * t7999 + t8029 * t8000 + t8031 * t8001 + (t8027 * t8053 + t8029 * t8055 + t8031 * t8057) * t8246) * MDP(8) + ((t7923 * t8079 + t8036 * t8512) * t8090 + (t7920 * t8077 + t8035 * t8516) * t8088 + (t7922 * t8081 + t8037 * t8508) * t8086) * MDP(9) + ((t7918 * t8079 - t8036 * t8511) * t8090 + (t7919 * t8077 - t8035 * t8515) * t8088 + (t7921 * t8081 - t8037 * t8507) * t8086) * MDP(10) + (t7831 * t8053 + t7832 * t8055 + t7833 * t8057 + t7990 * t8582 + t7991 * t8580 + t7992 * t8578) * MDP(11) + (t7828 * t8053 + t7829 * t8057 + t7830 * t8055 + t7924 * t7999 + t7925 * t8000 + t7926 * t8001) * MDP(12) + (-t8005 * t8582 - t8006 * t8580 - t8007 * t8578 + t7867 * t8053 + t7868 * t8055 + t7869 * t8057 + (t7990 * t8803 + t7991 * t8801 + t7992 * t8799) * t8272) * MDP(13) + (-t8005 * t8581 - t8006 * t8579 - t8007 * t8577 + t7864 * t8053 + t7865 * t8055 + t7866 * t8057 + (t7987 * t8803 + t7988 * t8801 + t7989 * t8799) * t8272) * MDP(14) + ((-t8005 * t8803 - t8006 * t8801 - t8007 * t8799) * t8272 + (t8005 * t8560 + t8006 * t8553 + t8007 * t8546) * t8245) * MDP(15) + (t7781 * t8053 + t7783 * t8055 + t7785 * t8057 + t7871 * t7999 + t7873 * t8000 + t7875 * t8001 + (t7979 * t8799 + t7980 * t8803 + t7981 * t8801) * t8272) * MDP(16) + (t7780 * t8053 + t7782 * t8055 + t7784 * t8057 + t7870 * t7999 + t7872 * t8000 + t7874 * t8001 + (t7978 * t8803 + t7982 * t8801 + t7983 * t8799) * t8272) * MDP(17) + t8448; (t8251 * t8312 + t8254 * t8306 + t8257 * t8318) * t8825 + (t8260 * t8312 + t8263 * t8306 + t8266 * t8318) * t8824 + (t7955 * t7996 + t7959 * t7997 + t7963 * t7998 + (t7955 * t8054 + t7959 * t8056 + t7963 * t8058) * t8246) * MDP(8) + ((t7847 * t8080 + t8033 * t8552) * t8090 + (t7840 * t8078 + t8032 * t8559) * t8088 + (t7844 * t8082 + t8034 * t8545) * t8086) * MDP(9) + ((t7837 * t8080 - t8033 * t8551) * t8090 + (t7839 * t8078 - t8032 * t8558) * t8088 + (t7843 * t8082 - t8034 * t8544) * t8086) * MDP(10) + (t7792 * t8054 + t7794 * t8056 + t7796 * t8058 + t7900 * t8588 + t7902 * t8586 + t7904 * t8584) * MDP(11) + (t7786 * t8054 + t7788 * t8058 + t7790 * t8056 + t7849 * t7996 + t7851 * t7997 + t7853 * t7998) * MDP(12) + (-t7972 * t8588 - t7974 * t8586 - t7976 * t8584 + t7810 * t8054 + t7812 * t8056 + t7814 * t8058 + (t7900 * t8804 + t7902 * t8802 + t7904 * t8800) * t8272) * MDP(13) + (-t7972 * t8587 - t7974 * t8585 - t7976 * t8583 + t7804 * t8054 + t7806 * t8056 + t7808 * t8058 + (t7894 * t8804 + t7896 * t8802 + t7898 * t8800) * t8272) * MDP(14) + ((-t7972 * t8804 - t7974 * t8802 - t7976 * t8800) * t8272 + (t7972 * t8557 + t7974 * t8550 + t7976 * t8543) * t8245) * MDP(15) + (t7769 * t8054 + t7773 * t8056 + t7777 * t8058 + t7817 * t7996 + t7821 * t7997 + t7825 * t7998 + (t7878 * t8800 + t7880 * t8804 + t7882 * t8802) * t8272) * MDP(16) + (t7768 * t8054 + t7772 * t8056 + t7776 * t8058 + t7816 * t7996 + t7820 * t7997 + t7824 * t7998 + (t7876 * t8804 + t7884 * t8802 + t7886 * t8800) * t8272) * MDP(17) + t8449; (t8072 * t8089 + t8074 * t8091 + t8076 * t8087) * MDP(1) + (t8072 * t8780 + t8074 * t8775 + t8076 * t8785) * t8826 + (t8072 * t8525 + t8074 * t8517 + t8076 * t8533) * t8445 + (t8251 * t8341 + t8254 * t8339 + t8257 * t8337) * t8825 + (t8260 * t8341 + t8263 * t8339 + t8266 * t8337) * t8824 + (t7957 * t7996 + t7961 * t7997 + t7965 * t7998 + (t7957 * t8054 + t7961 * t8056 + t7965 * t8058) * t8246) * MDP(8) + ((t8034 * t8759 + t7846) * t8058 + (t8033 * t8766 + t7848) * t8056 + (t8032 * t8773 + t7842) * t8054) * MDP(9) + ((-t8034 * t8758 + t7845) * t8058 + (-t8033 * t8765 + t7838) * t8056 + (-t8032 * t8772 + t7841) * t8054) * MDP(10) + (t7793 * t8054 + t7795 * t8056 + t7797 * t8058 + t7901 * t8588 + t7903 * t8586 + t7905 * t8584) * MDP(11) + (t7787 * t8054 + t7789 * t8058 + t7791 * t8056 + t7850 * t7996 + t7852 * t7997 + t7854 * t7998) * MDP(12) + (-t7973 * t8588 - t7975 * t8586 - t7977 * t8584 + t7811 * t8054 + t7813 * t8056 + t7815 * t8058 + (t7901 * t8804 + t7903 * t8802 + t7905 * t8800) * t8272) * MDP(13) + (-t7973 * t8587 - t7975 * t8585 - t7977 * t8583 + t7805 * t8054 + t7807 * t8056 + t7809 * t8058 + (t7895 * t8804 + t7897 * t8802 + t7899 * t8800) * t8272) * MDP(14) + ((-t7973 * t8804 - t7975 * t8802 - t7977 * t8800) * t8272 + (t7973 * t8557 + t7975 * t8550 + t7977 * t8543) * t8245) * MDP(15) + (t7771 * t8054 + t7775 * t8056 + t7779 * t8058 + t7819 * t7996 + t7823 * t7997 + t7827 * t7998 + (t7879 * t8800 + t7881 * t8804 + t7883 * t8802) * t8272) * MDP(16) + (t7770 * t8054 + t7774 * t8056 + t7778 * t8058 + t7818 * t7996 + t7822 * t7997 + t7826 * t7998 + (t7877 * t8804 + t7885 * t8802 + t7887 * t8800) * t8272) * MDP(17) + MDP(18); (t8251 * t8308 + t8254 * t8302 + t8257 * t8314) * t8825 + (t8260 * t8308 + t8263 * t8302 + t8266 * t8314) * t8824 + (t8027 * t7996 + t8029 * t7997 + t8031 * t7998 + (t8027 * t8054 + t8029 * t8056 + t8031 * t8058) * t8246) * MDP(8) + ((t7923 * t8080 + t8033 * t8512) * t8090 + (t7920 * t8078 + t8032 * t8516) * t8088 + (t7922 * t8082 + t8034 * t8508) * t8086) * MDP(9) + ((t7918 * t8080 - t8033 * t8511) * t8090 + (t7919 * t8078 - t8032 * t8515) * t8088 + (t7921 * t8082 - t8034 * t8507) * t8086) * MDP(10) + (t7831 * t8054 + t7832 * t8056 + t7833 * t8058 + t7990 * t8588 + t7991 * t8586 + t7992 * t8584) * MDP(11) + (t7828 * t8054 + t7829 * t8058 + t7830 * t8056 + t7924 * t7996 + t7925 * t7997 + t7926 * t7998) * MDP(12) + (-t8005 * t8588 - t8006 * t8586 - t8007 * t8584 + t7867 * t8054 + t7868 * t8056 + t7869 * t8058 + (t7990 * t8804 + t7991 * t8802 + t7992 * t8800) * t8272) * MDP(13) + (-t8005 * t8587 - t8006 * t8585 - t8007 * t8583 + t7864 * t8054 + t7865 * t8056 + t7866 * t8058 + (t7987 * t8804 + t7988 * t8802 + t7989 * t8800) * t8272) * MDP(14) + ((-t8005 * t8804 - t8006 * t8802 - t8007 * t8800) * t8272 + (t8005 * t8557 + t8006 * t8550 + t8007 * t8543) * t8245) * MDP(15) + (t7781 * t8054 + t7783 * t8056 + t7785 * t8058 + t7871 * t7996 + t7873 * t7997 + t7875 * t7998 + (t7979 * t8800 + t7980 * t8804 + t7981 * t8802) * t8272) * MDP(16) + (t7780 * t8054 + t7782 * t8056 + t7784 * t8058 + t7870 * t7996 + t7872 * t7997 + t7874 * t7998 + (t7978 * t8804 + t7982 * t8802 + t7983 * t8800) * t8272) * MDP(17) + t8447; (t8251 * t8311 + t8254 * t8305 + t8257 * t8317) * t8825 + (t8260 * t8311 + t8263 * t8305 + t8266 * t8317) * t8824 + (t7955 * t8044 + t7959 * t8045 + t7963 * t8046 + (t7955 * t8068 + t7959 * t8069 + t7963 * t8070) * t8246) * MDP(8) + ((t7847 * t8105 + t8063 * t8552) * t8090 + (t7840 * t8104 + t8062 * t8559) * t8088 + (t7844 * t8106 + t8064 * t8545) * t8086) * MDP(9) + ((t7837 * t8105 - t8063 * t8551) * t8090 + (t7839 * t8104 - t8062 * t8558) * t8088 + (t7843 * t8106 - t8064 * t8544) * t8086) * MDP(10) + (t7792 * t8068 + t7794 * t8069 + t7796 * t8070 + t7900 * t8567 + t7902 * t8565 + t7904 * t8563) * MDP(11) + (t7786 * t8068 + t7788 * t8070 + t7790 * t8069 + t7849 * t8044 + t7851 * t8045 + t7853 * t8046) * MDP(12) + (-t7972 * t8567 - t7974 * t8565 - t7976 * t8563 + t7810 * t8068 + t7812 * t8069 + t7814 * t8070 + (-t7900 * t8798 - t7902 * t8797 - t7904 * t8796) * t8706) * MDP(13) + (-t7972 * t8566 - t7974 * t8564 - t7976 * t8562 + t7804 * t8068 + t7806 * t8069 + t7808 * t8070 + (-t7894 * t8798 - t7896 * t8797 - t7898 * t8796) * t8706) * MDP(14) + (t7972 * t8532 + t7974 * t8524 + t7976 * t8540 + (t7972 * t8798 + t7974 * t8797 + t7976 * t8796) * t8272) * t8823 + (t7769 * t8068 + t7773 * t8069 + t7777 * t8070 + t7817 * t8044 + t7821 * t8045 + t7825 * t8046 + (-t7878 * t8796 - t7880 * t8798 - t7882 * t8797) * t8706) * MDP(16) + (t7768 * t8068 + t7772 * t8069 + t7776 * t8070 + t7816 * t8044 + t7820 * t8045 + t7824 * t8046 + (-t7876 * t8798 - t7884 * t8797 - t7886 * t8796) * t8706) * MDP(17) + t8448; (t8251 * t8309 + t8254 * t8303 + t8257 * t8315) * t8825 + (t8260 * t8309 + t8263 * t8303 + t8266 * t8315) * t8824 + (t7957 * t8044 + t7961 * t8045 + t7965 * t8046 + (t7957 * t8068 + t7961 * t8069 + t7965 * t8070) * t8246) * MDP(8) + ((t7848 * t8105 + t8063 * t8549) * t8090 + (t7842 * t8104 + t8062 * t8556) * t8088 + (t7846 * t8106 + t8064 * t8542) * t8086) * MDP(9) + ((t7838 * t8105 - t8063 * t8548) * t8090 + (t7841 * t8104 - t8062 * t8555) * t8088 + (t7845 * t8106 - t8064 * t8541) * t8086) * MDP(10) + (t7793 * t8068 + t7795 * t8069 + t7797 * t8070 + t7901 * t8567 + t7903 * t8565 + t7905 * t8563) * MDP(11) + (t7787 * t8068 + t7789 * t8070 + t7791 * t8069 + t7850 * t8044 + t7852 * t8045 + t7854 * t8046) * MDP(12) + (-t7973 * t8567 - t7975 * t8565 - t7977 * t8563 + t7811 * t8068 + t7813 * t8069 + t7815 * t8070 + (-t7901 * t8798 - t7903 * t8797 - t7905 * t8796) * t8706) * MDP(13) + (-t7973 * t8566 - t7975 * t8564 - t7977 * t8562 + t7805 * t8068 + t7807 * t8069 + t7809 * t8070 + (-t7895 * t8798 - t7897 * t8797 - t7899 * t8796) * t8706) * MDP(14) + (t7973 * t8532 + t7975 * t8524 + t7977 * t8540 + (t7973 * t8798 + t7975 * t8797 + t7977 * t8796) * t8272) * t8823 + (t7771 * t8068 + t7775 * t8069 + t7779 * t8070 + t7819 * t8044 + t7823 * t8045 + t7827 * t8046 + (-t7879 * t8796 - t7881 * t8798 - t7883 * t8797) * t8706) * MDP(16) + (t7770 * t8068 + t7774 * t8069 + t7778 * t8070 + t7818 * t8044 + t7822 * t8045 + t7826 * t8046 + (-t7877 * t8798 - t7885 * t8797 - t7887 * t8796) * t8706) * MDP(17) + t8447; (t8087 * t8100 + t8089 * t8098 + t8091 * t8099) * MDP(1) + (t8098 * t8780 + t8099 * t8775 + t8100 * t8785) * t8826 + (t8098 * t8525 + t8099 * t8517 + t8100 * t8533) * t8445 + (t8251 * t8335 + t8254 * t8334 + t8257 * t8336) * t8825 + (t8260 * t8335 + t8263 * t8334 + t8266 * t8336) * t8824 + (t8027 * t8044 + t8029 * t8045 + t8031 * t8046 + (t8027 * t8068 + t8029 * t8069 + t8031 * t8070) * t8246) * MDP(8) + ((t8063 * t8766 + t7923) * t8069 + (t8062 * t8773 + t7920) * t8068 + (t8064 * t8759 + t7922) * t8070) * MDP(9) + ((-t8063 * t8765 + t7918) * t8069 + (-t8062 * t8772 + t7919) * t8068 + (-t8064 * t8758 + t7921) * t8070) * MDP(10) + (t7831 * t8068 + t7832 * t8069 + t7833 * t8070 + t7990 * t8567 + t7991 * t8565 + t7992 * t8563) * MDP(11) + (t7828 * t8068 + t7829 * t8070 + t7830 * t8069 + t7924 * t8044 + t7925 * t8045 + t7926 * t8046) * MDP(12) + (-t8005 * t8567 - t8006 * t8565 - t8007 * t8563 + t7867 * t8068 + t7868 * t8069 + t7869 * t8070 + (-t7990 * t8798 - t7991 * t8797 - t7992 * t8796) * t8706) * MDP(13) + (-t8005 * t8566 - t8006 * t8564 - t8007 * t8562 + t7864 * t8068 + t7865 * t8069 + t7866 * t8070 + (-t7987 * t8798 - t7988 * t8797 - t7989 * t8796) * t8706) * MDP(14) + (t8005 * t8532 + t8006 * t8524 + t8007 * t8540 + (t8005 * t8798 + t8006 * t8797 + t8007 * t8796) * t8272) * t8823 + (t7781 * t8068 + t7783 * t8069 + t7785 * t8070 + t7871 * t8044 + t7873 * t8045 + t7875 * t8046 + (-t7979 * t8796 - t7980 * t8798 - t7981 * t8797) * t8706) * MDP(16) + (t7780 * t8068 + t7782 * t8069 + t7784 * t8070 + t7870 * t8044 + t7872 * t8045 + t7874 * t8046 + (-t7978 * t8798 - t7982 * t8797 - t7983 * t8796) * t8706) * MDP(17) + MDP(18);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
