% Calculate minimal parameter regressor of inverse dynamics forces for
% P3RRRRR10V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% xDDP [3x1]
%   Generalized platform accelerations
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G2A0_convert_par2_MPV_fixb.m

% Output:
% tauX [3x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 02:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P3RRRRR10V2G2A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [3 1]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: xDDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G2A0_invdyn_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 01:39:46
% EndTime: 2020-08-07 01:53:21
% DurationCPUTime: 861.60s
% Computational Cost: add. (11610252->2818), mult. (22840233->4285), div. (155610->38), fcn. (17471637->26), ass. (0->1593)
t6647 = cos(qJ(2,3));
t6658 = pkin(8) + pkin(7);
t6527 = t6658 * t6647;
t6638 = sin(qJ(2,3));
t7622 = pkin(2) * t6638;
t6443 = t6527 - t7622;
t6619 = sin(pkin(4));
t6780 = t6619 * t6443;
t6650 = cos(qJ(2,2));
t6528 = t6658 * t6650;
t6641 = sin(qJ(2,2));
t7620 = pkin(2) * t6641;
t6444 = t6528 - t7620;
t6779 = t6619 * t6444;
t6653 = cos(qJ(2,1));
t6529 = t6658 * t6653;
t6644 = sin(qJ(2,1));
t7618 = pkin(2) * t6644;
t6445 = t6529 - t7618;
t6778 = t6619 * t6445;
t6677 = 0.1e1 / pkin(3);
t6639 = sin(qJ(1,3));
t6648 = cos(qJ(1,3));
t6655 = xDP(3);
t6631 = legFrame(3,2);
t6550 = sin(t6631);
t6656 = xDP(2);
t6553 = cos(t6631);
t6657 = xDP(1);
t7454 = t6553 * t6657;
t6837 = -t6550 * t6656 + t7454;
t6356 = t6639 * t6837 + t6648 * t6655;
t7382 = t6639 * t6655;
t6359 = t6648 * t6837 - t7382;
t7466 = t6550 * t6657;
t6386 = t6553 * t6656 + t7466;
t6577 = pkin(1) * t6638;
t6480 = t6658 + t6577;
t6592 = pkin(1) * t6658;
t6486 = t6656 * t6592;
t6487 = t6657 * t6592;
t6637 = sin(qJ(3,3));
t6556 = t6637 * pkin(3);
t6495 = t6556 + pkin(6);
t6620 = cos(pkin(4));
t6599 = t6620 ^ 2;
t6605 = t6647 ^ 2;
t6646 = cos(qJ(3,3));
t6560 = t6646 * pkin(3);
t7722 = t6560 + pkin(2);
t6903 = t7722 * t6656;
t7470 = (t6620 + 0.1e1) * (t6620 - 0.1e1);
t7123 = t6658 * t7470;
t6937 = t7722 * t7123;
t6600 = pkin(2) + t6658;
t6601 = pkin(2) - t6658;
t7506 = (t6560 + t6600) * (t6560 + t6601);
t7138 = t6638 * t7506;
t7394 = t6620 * t6658;
t7144 = t6359 * t7394;
t7408 = t6619 * t6658;
t7428 = t6619 * t6620;
t7439 = t6599 * t6658;
t7490 = t6495 * t6638;
t6659 = 0.2e1 * t6658;
t7385 = t6638 * t6659;
t6475 = pkin(1) + t7385;
t7500 = t6475 * t7722;
t7515 = t6386 * t7722;
t7521 = t6359 * t6620;
t7642 = t6599 - 0.1e1;
t6203 = ((-t6356 * t7506 + 0.2e1 * t7144 * t7722) * t6619 - 0.2e1 * t6386 * t6937) * t6605 + ((-t6356 * t7500 - t7138 * t7521) * t6619 + t6486 * t6553 + t6487 * t6550 + t7642 * t6386 * t7138 + ((-t6359 * t6599 - t6386 * t7428 - t7382) * t7722 + (-t6550 * t6903 + t7454 * t7722) * t6648) * t6495) * t6647 - ((t6359 * t7722 + t6386 * t7490) * t6620 + t6356 * t6480) * t7408 - (t6359 * t7490 - t7515) * t7439 + (t6359 * t6658 * t6495 + (-t6553 * t6903 - t7466 * t7722) * pkin(1)) * t6638 - t6658 * t7515;
t7594 = t6646 * pkin(6);
t7623 = pkin(2) * t6637;
t6447 = t7594 - t7623;
t7397 = t6620 * t6646;
t7268 = pkin(1) * t7397;
t7483 = t7722 * t6619;
t6479 = pkin(1) * t7394;
t7494 = t6479 * t6646;
t7761 = t6638 * t7722;
t6777 = -t7268 * t7761 + (-t6447 * t7483 + t7494) * t6647;
t7349 = t6658 * t6638;
t6341 = (pkin(1) * t6637 * t7722 - t6447 * t7349) * t6619 + t6777;
t6332 = 0.1e1 / t6341;
t7563 = t6203 * t6332;
t6195 = t6677 * t7563;
t6188 = pkin(6) * t6195;
t6353 = t6647 * t6356;
t7387 = t6638 * t6647;
t7255 = pkin(2) * t7387;
t6807 = t6605 * t6658 - t7255;
t6380 = -t6807 + t6480;
t6574 = pkin(2) * t6647;
t7316 = t7349 + t6574;
t6438 = pkin(1) + t7316;
t6603 = t6646 ^ 2;
t6494 = pkin(6) * t6637 + pkin(3);
t7611 = pkin(3) * t6603;
t7303 = 0.2e1 * t7611;
t7617 = pkin(2) * t6646;
t6702 = t6638 * (-t6494 + t7303 + t7617) - t6646 * t6527;
t6544 = t6605 - 0.2e1;
t6458 = t6638 * t6527;
t6561 = t6605 * pkin(2);
t7319 = t6458 + t6561;
t7723 = -pkin(2) + t7319;
t6711 = t6544 * t6560 + t7723;
t6472 = t7349 + pkin(1);
t6872 = t6472 * t6647 + t6561;
t7101 = t6619 * t7387;
t7425 = t6619 * t6638;
t7141 = t6386 * t7425;
t7520 = t6359 * t6638;
t7231 = pkin(3) * t7520;
t7426 = t6619 * t6637;
t7445 = (t6647 + 0.1e1) * (t6647 - 0.1e1);
t6161 = ((-t6637 * t6711 + t7594) * t6386 + t6702 * t6359) * t6599 + ((-pkin(6) * t6386 * t6638 + t6359 * t6711) * t7426 + (t6353 + 0.2e1 * t7141) * t7611 + ((-pkin(6) * t6359 - t6386 * t6443) * t6619 + t6356 * t6438) * t6646 - pkin(3) * t7141) * t6620 + (pkin(6) * t7520 + (-t6380 * t6619 - t6560 * t7101) * t6356 + (t6560 * t7445 + t6872) * t6386) * t6637 - t6603 * t7231 - t6386 * t7594 + t7231;
t6362 = (t6527 - t7761) * t7268;
t6506 = t6574 + pkin(1);
t6329 = t6362 + t6619 * ((pkin(2) * t6438 + t6506 * t6560) * t6637 - (t6560 * t6647 + t7316) * t7594);
t6144 = t6161 / t6329;
t7204 = t6658 * t6144;
t7337 = -t7204 + t6188;
t7767 = t6638 * t7337;
t6642 = sin(qJ(1,2));
t6651 = cos(qJ(1,2));
t6632 = legFrame(2,2);
t6551 = sin(t6632);
t6554 = cos(t6632);
t7450 = t6554 * t6657;
t6836 = -t6551 * t6656 + t7450;
t6357 = t6642 * t6836 + t6651 * t6655;
t7371 = t6642 * t6655;
t6360 = t6651 * t6836 - t7371;
t7462 = t6551 * t6657;
t6387 = t6554 * t6656 + t7462;
t6578 = pkin(1) * t6641;
t6481 = t6658 + t6578;
t6640 = sin(qJ(3,2));
t6557 = t6640 * pkin(3);
t6498 = t6557 + pkin(6);
t6609 = t6650 ^ 2;
t6649 = cos(qJ(3,2));
t6563 = t6649 * pkin(3);
t7721 = t6563 + pkin(2);
t6905 = t6656 * t7721;
t6936 = t7721 * t7123;
t7505 = (t6563 + t6600) * (t6563 + t6601);
t7137 = t6641 * t7505;
t7143 = t6360 * t7394;
t7488 = t6498 * t6641;
t7374 = t6641 * t6659;
t6476 = pkin(1) + t7374;
t7498 = t6476 * t7721;
t7514 = t6387 * t7721;
t7519 = t6360 * t6620;
t6204 = ((-t6357 * t7505 + 0.2e1 * t7143 * t7721) * t6619 - 0.2e1 * t6387 * t6936) * t6609 + ((-t6357 * t7498 - t7137 * t7519) * t6619 + t6486 * t6554 + t6487 * t6551 + t7642 * t6387 * t7137 + ((-t6360 * t6599 - t6387 * t7428 - t7371) * t7721 + (-t6551 * t6905 + t7450 * t7721) * t6651) * t6498) * t6650 - ((t6360 * t7721 + t6387 * t7488) * t6620 + t6357 * t6481) * t7408 - (t6360 * t7488 - t7514) * t7439 + (t6360 * t6658 * t6498 + (-t6554 * t6905 - t7462 * t7721) * pkin(1)) * t6641 - t6658 * t7514;
t7593 = t6649 * pkin(6);
t7621 = pkin(2) * t6640;
t6448 = t7593 - t7621;
t7396 = t6620 * t6649;
t7267 = pkin(1) * t7396;
t7480 = t7721 * t6619;
t7493 = t6479 * t6649;
t7760 = t6641 * t7721;
t6776 = -t7267 * t7760 + (-t6448 * t7480 + t7493) * t6650;
t7348 = t6658 * t6641;
t6342 = (pkin(1) * t6640 * t7721 - t6448 * t7348) * t6619 + t6776;
t6334 = 0.1e1 / t6342;
t7562 = t6204 * t6334;
t6197 = t6677 * t7562;
t6189 = pkin(6) * t6197;
t6354 = t6650 * t6357;
t7376 = t6641 * t6650;
t7254 = pkin(2) * t7376;
t6806 = t6609 * t6658 - t7254;
t6381 = -t6806 + t6481;
t6575 = pkin(2) * t6650;
t7315 = t7348 + t6575;
t6439 = pkin(1) + t7315;
t6607 = t6649 ^ 2;
t6497 = pkin(6) * t6640 + pkin(3);
t7610 = pkin(3) * t6607;
t7302 = 0.2e1 * t7610;
t7615 = pkin(2) * t6649;
t6701 = t6641 * (-t6497 + t7302 + t7615) - t6649 * t6528;
t6545 = t6609 - 0.2e1;
t6460 = t6641 * t6528;
t6564 = t6609 * pkin(2);
t7318 = t6460 + t6564;
t7724 = -pkin(2) + t7318;
t6710 = t6545 * t6563 + t7724;
t6473 = t7348 + pkin(1);
t6871 = t6473 * t6650 + t6564;
t7097 = t6619 * t7376;
t7422 = t6619 * t6641;
t7140 = t6387 * t7422;
t7518 = t6360 * t6641;
t7230 = pkin(3) * t7518;
t7423 = t6619 * t6640;
t7444 = (t6650 + 0.1e1) * (t6650 - 0.1e1);
t6162 = ((-t6640 * t6710 + t7593) * t6387 + t6701 * t6360) * t6599 + ((-pkin(6) * t6387 * t6641 + t6360 * t6710) * t7423 + (t6354 + 0.2e1 * t7140) * t7610 + ((-pkin(6) * t6360 - t6387 * t6444) * t6619 + t6357 * t6439) * t6649 - pkin(3) * t7140) * t6620 + (pkin(6) * t7518 + (-t6381 * t6619 - t6563 * t7097) * t6357 + (t6563 * t7444 + t6871) * t6387) * t6640 - t6607 * t7230 - t6387 * t7593 + t7230;
t6363 = (t6528 - t7760) * t7267;
t6507 = t6575 + pkin(1);
t6330 = t6363 + ((pkin(2) * t6439 + t6507 * t6563) * t6640 - (t6563 * t6650 + t7315) * t7593) * t6619;
t6146 = t6162 / t6330;
t7198 = t6658 * t6146;
t7336 = -t7198 + t6189;
t7766 = t6641 * t7336;
t6645 = sin(qJ(1,1));
t6654 = cos(qJ(1,1));
t6633 = legFrame(1,2);
t6552 = sin(t6633);
t6555 = cos(t6633);
t7446 = t6555 * t6657;
t6835 = -t6552 * t6656 + t7446;
t6358 = t6645 * t6835 + t6654 * t6655;
t7360 = t6645 * t6655;
t6361 = t6654 * t6835 - t7360;
t7458 = t6552 * t6657;
t6388 = t6555 * t6656 + t7458;
t6579 = pkin(1) * t6644;
t6482 = t6658 + t6579;
t6643 = sin(qJ(3,1));
t6558 = t6643 * pkin(3);
t6501 = t6558 + pkin(6);
t6613 = t6653 ^ 2;
t6652 = cos(qJ(3,1));
t6566 = t6652 * pkin(3);
t7720 = t6566 + pkin(2);
t6904 = t6656 * t7720;
t6935 = t7720 * t7123;
t7504 = (t6566 + t6600) * (t6566 + t6601);
t7136 = t6644 * t7504;
t7142 = t6361 * t7394;
t7486 = t6501 * t6644;
t7363 = t6644 * t6659;
t6477 = pkin(1) + t7363;
t7496 = t6477 * t7720;
t7513 = t6388 * t7720;
t7517 = t6361 * t6620;
t6205 = ((-t6358 * t7504 + 0.2e1 * t7142 * t7720) * t6619 - 0.2e1 * t6388 * t6935) * t6613 + ((-t6358 * t7496 - t7136 * t7517) * t6619 + t6486 * t6555 + t6487 * t6552 + t7642 * t6388 * t7136 + ((-t6361 * t6599 - t6388 * t7428 - t7360) * t7720 + (-t6552 * t6904 + t7446 * t7720) * t6654) * t6501) * t6653 - ((t6361 * t7720 + t6388 * t7486) * t6620 + t6358 * t6482) * t7408 - (t6361 * t7486 - t7513) * t7439 + (t6361 * t6658 * t6501 + (-t6555 * t6904 - t7458 * t7720) * pkin(1)) * t6644 - t6658 * t7513;
t7592 = t6652 * pkin(6);
t7619 = pkin(2) * t6643;
t6449 = t7592 - t7619;
t7395 = t6620 * t6652;
t7266 = pkin(1) * t7395;
t7477 = t7720 * t6619;
t7492 = t6479 * t6652;
t7759 = t6644 * t7720;
t6775 = -t7266 * t7759 + (-t6449 * t7477 + t7492) * t6653;
t7347 = t6658 * t6644;
t6343 = (pkin(1) * t6643 * t7720 - t6449 * t7347) * t6619 + t6775;
t6336 = 0.1e1 / t6343;
t7561 = t6205 * t6336;
t6199 = t6677 * t7561;
t6190 = pkin(6) * t6199;
t6355 = t6653 * t6358;
t7365 = t6644 * t6653;
t7253 = pkin(2) * t7365;
t6805 = t6613 * t6658 - t7253;
t6382 = -t6805 + t6482;
t6576 = pkin(2) * t6653;
t7314 = t7347 + t6576;
t6440 = pkin(1) + t7314;
t6611 = t6652 ^ 2;
t6500 = pkin(6) * t6643 + pkin(3);
t7609 = pkin(3) * t6611;
t7301 = 0.2e1 * t7609;
t7613 = pkin(2) * t6652;
t6700 = t6644 * (-t6500 + t7301 + t7613) - t6652 * t6529;
t6546 = t6613 - 0.2e1;
t6462 = t6644 * t6529;
t6567 = t6613 * pkin(2);
t7317 = t6462 + t6567;
t7725 = -pkin(2) + t7317;
t6709 = t6546 * t6566 + t7725;
t6474 = t7347 + pkin(1);
t6870 = t6474 * t6653 + t6567;
t7093 = t6619 * t7365;
t7419 = t6619 * t6644;
t7139 = t6388 * t7419;
t7516 = t6361 * t6644;
t7229 = pkin(3) * t7516;
t7420 = t6619 * t6643;
t7443 = (t6653 + 0.1e1) * (t6653 - 0.1e1);
t6163 = ((-t6643 * t6709 + t7592) * t6388 + t6700 * t6361) * t6599 + ((-pkin(6) * t6388 * t6644 + t6361 * t6709) * t7420 + (t6355 + 0.2e1 * t7139) * t7609 + ((-pkin(6) * t6361 - t6388 * t6445) * t6619 + t6440 * t6358) * t6652 - pkin(3) * t7139) * t6620 + (pkin(6) * t7516 + (-t6382 * t6619 - t6566 * t7093) * t6358 + (t6566 * t7443 + t6870) * t6388) * t6643 - t6611 * t7229 - t6388 * t7592 + t7229;
t6364 = (t6529 - t7759) * t7266;
t6508 = t6576 + pkin(1);
t6331 = t6364 + ((pkin(2) * t6440 + t6508 * t6566) * t6643 - (t6566 * t6653 + t7314) * t7592) * t6619;
t6148 = t6163 / t6331;
t7191 = t6658 * t6148;
t7335 = -t7191 + t6190;
t7765 = t6644 * t7335;
t7406 = t6620 * t6637;
t6708 = -pkin(3) * t7406 + t6780;
t7252 = pkin(3) * t7426;
t6260 = -(t6353 + (t6386 * t6619 + t7521) * t6638) * t7611 + (t6359 * t7252 + (-pkin(2) * t6356 + t7144) * t6647 + (-pkin(2) * t7521 - t6356 * t6658) * t6638 + t6708 * t6386) * t6646 + (t6359 * t6619 - t6386 * t6620) * t7623;
t6429 = pkin(1) * t6556 - pkin(6) * t7349;
t6496 = t6556 - pkin(6);
t6371 = t6496 * t6574 + t6429;
t7629 = pkin(1) * t6620;
t6404 = t6443 * t7629;
t6389 = t6438 * t7623;
t7405 = t6620 * t6638;
t7271 = pkin(1) * t7405;
t7416 = t6619 * t6647;
t6908 = t6619 * t6389 - (pkin(6) * t7416 + t7271) * t7611;
t6312 = (t6371 * t6619 + t6404) * t6646 + t6908;
t6307 = 0.1e1 / t6312;
t7554 = t6260 * t6307;
t7163 = t6647 * t7554;
t6965 = t6619 * t7163;
t6074 = -t6195 + t6965;
t6368 = -pkin(6) * t7316 + t6506 * t6556;
t6303 = 0.1e1 / ((t6368 * t6619 + t6404) * t6646 + t6908);
t7162 = t6658 * t7554;
t6964 = t6619 * t7162;
t6852 = t6638 * t6964;
t6230 = t6620 * t7554;
t6063 = t6230 + t6144;
t7569 = t6063 * t6637;
t5987 = (t6603 * t6852 + (pkin(3) * t6965 + t6658 * t7569 - t7563) * t6646 + pkin(2) * t6074) * t6303 * t7563;
t6636 = xDDP(1);
t7383 = t6639 * t6647;
t7386 = t6638 * t6648;
t6392 = t6620 * t7386 + t7383;
t7356 = t6648 * t6658;
t7088 = t6620 * t7356;
t7390 = t6637 * t6648;
t7249 = pkin(3) * t7390;
t7381 = t6639 * t6658;
t7616 = pkin(2) * t6648;
t6717 = -(t6620 * t7616 + t7381) * t6638 + (-pkin(2) * t6639 + t7088) * t6647 + t6619 * t7249;
t7122 = t6550 * t7425;
t7415 = t6619 * t6648;
t6290 = -(t6392 * t6553 + t7122) * t7611 + (t6550 * t6708 + t6553 * t6717) * t6646 + (-t6550 * t6620 + t6553 * t7415) * t7623;
t7536 = t6290 * t6307;
t6275 = t6636 * t7536;
t6635 = xDDP(2);
t7116 = t6553 * t7425;
t6291 = (t6392 * t6550 - t7116) * t7611 + (-t6550 * t6717 + t6553 * t6708) * t6646 - (t6550 * t7415 + t6553 * t6620) * t7623;
t7535 = t6291 * t6307;
t6276 = t6635 * t7535;
t6634 = xDDP(3);
t6422 = t6620 * t7381 + t7616;
t7388 = t6638 * t6639;
t7091 = t6620 * t7388;
t7424 = t6619 * t6639;
t7104 = t6637 * t7424;
t7358 = t6647 * t6648;
t7404 = t6620 * t6639;
t6338 = -(-t7091 + t7358) * t7611 + (-pkin(3) * t7104 - t6422 * t6647 - t6638 * (-pkin(2) * t7404 + t7356)) * t6646 - pkin(2) * t7104;
t7527 = t6307 * t6338;
t6287 = t6634 * t7527;
t7206 = t6637 * t6144;
t6104 = pkin(3) * t7206;
t6129 = pkin(2) * t6144;
t6173 = t6658 * t6195;
t6666 = pkin(6) / 0.2e1;
t6489 = t6556 + t6666;
t7553 = t6260 * t6638;
t7164 = t6307 * t7553;
t6966 = t6619 * t7164;
t6899 = -0.2e1 * t6966;
t6223 = t6489 * t6899;
t6308 = 0.1e1 / t6312 ^ 2;
t6483 = pkin(1) * t7349;
t6618 = t6658 ^ 2;
t6679 = pkin(2) ^ 2;
t6534 = t6618 + t6679;
t6667 = -0.3e1 / 0.2e1 * pkin(2);
t6535 = pkin(6) * t6556;
t6676 = pkin(3) ^ 2;
t7313 = t6535 + t6676;
t7438 = t6600 * t6601;
t6819 = t6605 * t7438 + t7313;
t7205 = t6638 * t6144;
t6994 = t6637 * t7205;
t6887 = pkin(2) * t6994;
t7187 = t6658 * t7563;
t6983 = t6637 * t7187;
t7019 = pkin(2) * t6458;
t7207 = t6620 * t6144;
t6602 = t6646 * t6603;
t7437 = t6602 * t6676;
t7473 = t6544 * t6599;
t7638 = t6605 - 0.1e1;
t7080 = (t7207 + (t7638 - t7473) * t7554) * t7437;
t6665 = pkin(6) / 0.3e1;
t7262 = (t6556 + t6665) * t7622;
t7277 = 0.2e1 * t7408;
t7499 = t6475 * t6647;
t6020 = t6637 * t7204 - t7563;
t7575 = t6020 * t6647;
t7625 = pkin(2) * t6619;
t7646 = -0.3e1 * t6619;
t7651 = -0.2e1 * t6599;
t7219 = (t7080 + (t6144 * t6534 - t6983) * t7397 + (-t6887 + t7575) * t7625 + ((t6223 + 0.2e1 * t6129) * t6620 * t6603 + (-(t6104 + t6173) * t6638 * t6603 + (-0.2e1 * t6887 + t7575) * t6646) * t6619) * pkin(3) + (((t6667 + t7319) * t7651 + 0.2e1 * t6561 + t7499 - pkin(2)) * t7611 + (-(-t6679 + t6819 + 0.2e1 * t7019) * t6599 + (t6489 * t6647 * t7277 + t7262 * t7646) * t6620 + pkin(2) * t7499 + t6483 + t6618 + t6819) * t6646 + pkin(2) * (-t6494 * t6599 + t7406 * t6780 + t6494)) * t7554) * t6308 * t6260;
t6741 = t5987 + t6275 + t6276 + t6287 - t7219;
t6810 = t6966 * t6556;
t7165 = t6619 * t7554;
t6967 = t6637 * t7165;
t7578 = (t6063 * t7437 + (-t6810 / 0.2e1 + t6063 * pkin(2)) * t7303 + (t6063 * t6534 + ((t6527 - 0.2e1 * t7622) * pkin(3) * t7165 - t7187) * t6637) * t6646 + t6443 * pkin(2) * t6967) * t6303;
t7003 = t6144 * t7578;
t5942 = t6741 - t7003;
t5933 = pkin(6) * t5942;
t6854 = t6195 * t7554;
t6080 = pkin(2) * t6854;
t6083 = 0.2e1 * t6854;
t6678 = 0.1e1 / pkin(3) ^ 2;
t6194 = t6203 ^ 2 * t6678 / t6341 ^ 2;
t6182 = pkin(7) * t6194;
t6242 = t6260 ^ 2 * t6308;
t6571 = g(3) * t6648;
t7456 = t6553 * t6639;
t7468 = t6550 * t6639;
t6218 = pkin(1) * t6242 + g(1) * t7456 - g(2) * t7468 + t6571;
t6432 = t6550 * g(1) + t6553 * g(2);
t7107 = t6605 * t6242;
t7650 = 0.2e1 * t6599;
t7641 = t7650 - 0.2e1;
t7275 = pkin(7) * t7641;
t7624 = pkin(2) * t6620;
t7304 = -0.2e1 * t7624;
t5939 = pkin(1) * t5942;
t6568 = g(3) * t6639;
t7455 = t6553 * t6648;
t7467 = t6550 * t6648;
t6774 = -g(1) * t7455 + g(2) * t7467 + t5939 + t6568;
t7179 = t6619 * t6242;
t5906 = pkin(6) * t7179 + t6774;
t7584 = t5906 * t6620;
t7726 = t7642 * pkin(7);
t7764 = -t6242 * (t7255 * t7641 + t7726) + (t7584 + (pkin(7) * t6083 - t6432) * t6619) * t6647 - 0.2e1 * (t6080 + t5933 / 0.2e1) * t7425 - t5942 * t7304 + t7275 * t7107 + t6218 * t6638 - t6182;
t7403 = t6620 * t6640;
t6707 = -pkin(3) * t7403 + t6779;
t7251 = pkin(3) * t7423;
t6261 = -(t6354 + (t6387 * t6619 + t7519) * t6641) * t7610 + (t6360 * t7251 + (-pkin(2) * t6357 + t7143) * t6650 + (-pkin(2) * t7519 - t6357 * t6658) * t6641 + t6707 * t6387) * t6649 + (t6360 * t6619 - t6387 * t6620) * t7621;
t6430 = pkin(1) * t6557 - pkin(6) * t7348;
t6499 = t6557 - pkin(6);
t6372 = t6499 * t6575 + t6430;
t6405 = t6444 * t7629;
t6390 = t6439 * t7621;
t7402 = t6620 * t6641;
t7270 = pkin(1) * t7402;
t7413 = t6619 * t6650;
t6907 = t6619 * t6390 - (pkin(6) * t7413 + t7270) * t7610;
t6313 = (t6372 * t6619 + t6405) * t6649 + t6907;
t6309 = 0.1e1 / t6313;
t7552 = t6261 * t6309;
t7156 = t6650 * t7552;
t6958 = t6619 * t7156;
t6075 = -t6197 + t6958;
t6369 = -pkin(6) * t7315 + t6507 * t6557;
t6304 = 0.1e1 / ((t6369 * t6619 + t6405) * t6649 + t6907);
t7155 = t6658 * t7552;
t6957 = t6619 * t7155;
t6848 = t6641 * t6957;
t6231 = t6620 * t7552;
t6065 = t6231 + t6146;
t7568 = t6065 * t6640;
t5988 = (t6607 * t6848 + (pkin(3) * t6958 + t6658 * t7568 - t7562) * t6649 + pkin(2) * t6075) * t6304 * t7562;
t7372 = t6642 * t6650;
t7375 = t6641 * t6651;
t6393 = t6620 * t7375 + t7372;
t7353 = t6651 * t6658;
t7087 = t6620 * t7353;
t7379 = t6640 * t6651;
t7247 = pkin(3) * t7379;
t7370 = t6642 * t6658;
t7614 = pkin(2) * t6651;
t6716 = -(t6620 * t7614 + t7370) * t6641 + (-pkin(2) * t6642 + t7087) * t6650 + t6619 * t7247;
t7120 = t6551 * t7422;
t7412 = t6619 * t6651;
t6292 = -(t6393 * t6554 + t7120) * t7610 + (t6551 * t6707 + t6554 * t6716) * t6649 + (-t6551 * t6620 + t6554 * t7412) * t7621;
t7534 = t6292 * t6309;
t6277 = t6636 * t7534;
t7114 = t6554 * t7422;
t6293 = (t6393 * t6551 - t7114) * t7610 + (-t6551 * t6716 + t6554 * t6707) * t6649 - (t6551 * t7412 + t6554 * t6620) * t7621;
t7533 = t6293 * t6309;
t6278 = t6635 * t7533;
t6423 = t6620 * t7370 + t7614;
t7377 = t6641 * t6642;
t7090 = t6620 * t7377;
t7421 = t6619 * t6642;
t7100 = t6640 * t7421;
t7355 = t6650 * t6651;
t7401 = t6620 * t6642;
t6339 = -(-t7090 + t7355) * t7610 + (-pkin(3) * t7100 - t6423 * t6650 - t6641 * (-pkin(2) * t7401 + t7353)) * t6649 - pkin(2) * t7100;
t7524 = t6309 * t6339;
t6288 = t6634 * t7524;
t7200 = t6640 * t6146;
t6106 = pkin(3) * t7200;
t6134 = pkin(2) * t6146;
t6174 = t6658 * t6197;
t6491 = t6557 + t6666;
t7551 = t6261 * t6641;
t7157 = t6309 * t7551;
t6959 = t6619 * t7157;
t6897 = -0.2e1 * t6959;
t6221 = t6491 * t6897;
t6310 = 0.1e1 / t6313 ^ 2;
t6484 = pkin(1) * t7348;
t6536 = pkin(6) * t6557;
t7312 = t6536 + t6676;
t6818 = t6609 * t7438 + t7312;
t7199 = t6641 * t6146;
t6990 = t6640 * t7199;
t6886 = pkin(2) * t6990;
t7184 = t6658 * t7562;
t6980 = t6640 * t7184;
t7016 = pkin(2) * t6460;
t7092 = t6620 * t6146;
t6606 = t6649 * t6607;
t7435 = t6606 * t6676;
t7472 = t6545 * t6599;
t7635 = t6609 - 0.1e1;
t7079 = (t7092 + (t7635 - t7472) * t7552) * t7435;
t7261 = (t6557 + t6665) * t7620;
t7497 = t6476 * t6650;
t6021 = t6640 * t7198 - t7562;
t7574 = t6021 * t6650;
t7218 = (t7079 + (t6146 * t6534 - t6980) * t7396 + (-t6886 + t7574) * t7625 + ((t6221 + 0.2e1 * t6134) * t6620 * t6607 + (-(t6106 + t6174) * t6641 * t6607 + (-0.2e1 * t6886 + t7574) * t6649) * t6619) * pkin(3) + (((t6667 + t7318) * t7651 + 0.2e1 * t6564 + t7497 - pkin(2)) * t7610 + (-(-t6679 + t6818 + 0.2e1 * t7016) * t6599 + (t6491 * t6650 * t7277 + t7261 * t7646) * t6620 + pkin(2) * t7497 + t6484 + t6618 + t6818) * t6649 + pkin(2) * (-t6497 * t6599 + t7403 * t6779 + t6497)) * t7552) * t6310 * t6261;
t6740 = t5988 + t6277 + t6278 + t6288 - t7218;
t6809 = t6959 * t6557;
t7158 = t6619 * t7552;
t6960 = t6640 * t7158;
t7577 = (t6065 * t7435 + (-t6809 / 0.2e1 + t6065 * pkin(2)) * t7302 + (t6065 * t6534 + ((t6528 - 0.2e1 * t7620) * pkin(3) * t7158 - t7184) * t6640) * t6649 + t6444 * pkin(2) * t6960) * t6304;
t7002 = t6146 * t7577;
t5943 = t6740 - t7002;
t5934 = pkin(6) * t5943;
t6850 = t6197 * t7552;
t6081 = pkin(2) * t6850;
t6084 = 0.2e1 * t6850;
t6196 = t6204 ^ 2 * t6678 / t6342 ^ 2;
t6184 = pkin(7) * t6196;
t6243 = t6261 ^ 2 * t6310;
t6572 = g(3) * t6651;
t7452 = t6554 * t6642;
t7464 = t6551 * t6642;
t6219 = pkin(1) * t6243 + g(1) * t7452 - g(2) * t7464 + t6572;
t6433 = t6551 * g(1) + t6554 * g(2);
t7106 = t6609 * t6243;
t5940 = pkin(1) * t5943;
t6569 = g(3) * t6642;
t7451 = t6554 * t6651;
t7463 = t6551 * t6651;
t6773 = -g(1) * t7451 + g(2) * t7463 + t5940 + t6569;
t7175 = t6619 * t6243;
t5907 = pkin(6) * t7175 + t6773;
t7583 = t5907 * t6620;
t7763 = -t6243 * (t7254 * t7641 + t7726) + (t7583 + (pkin(7) * t6084 - t6433) * t6619) * t6650 - 0.2e1 * (t6081 + t5934 / 0.2e1) * t7422 - t5943 * t7304 + t7275 * t7106 + t6219 * t6641 - t6184;
t7400 = t6620 * t6643;
t6706 = -pkin(3) * t7400 + t6778;
t7250 = pkin(3) * t7420;
t6262 = -(t6355 + (t6388 * t6619 + t7517) * t6644) * t7609 + (t6361 * t7250 + (-pkin(2) * t6358 + t7142) * t6653 + (-pkin(2) * t7517 - t6358 * t6658) * t6644 + t6706 * t6388) * t6652 + (t6361 * t6619 - t6388 * t6620) * t7619;
t6431 = pkin(1) * t6558 - pkin(6) * t7347;
t6502 = t6558 - pkin(6);
t6373 = t6502 * t6576 + t6431;
t6406 = t6445 * t7629;
t6391 = t6440 * t7619;
t7399 = t6620 * t6644;
t7269 = pkin(1) * t7399;
t7410 = t6619 * t6653;
t6906 = t6619 * t6391 - (pkin(6) * t7410 + t7269) * t7609;
t6311 = (t6373 * t6619 + t6406) * t6652 + t6906;
t6305 = 0.1e1 / t6311;
t7550 = t6262 * t6305;
t7149 = t6653 * t7550;
t6951 = t6619 * t7149;
t6076 = -t6199 + t6951;
t6370 = -pkin(6) * t7314 + t6508 * t6558;
t6302 = 0.1e1 / ((t6370 * t6619 + t6406) * t6652 + t6906);
t7148 = t6658 * t7550;
t6950 = t6619 * t7148;
t6844 = t6644 * t6950;
t6232 = t6620 * t7550;
t6067 = t6232 + t6148;
t7567 = t6067 * t6643;
t5989 = (t6611 * t6844 + (pkin(3) * t6951 + t6658 * t7567 - t7561) * t6652 + pkin(2) * t6076) * t6302 * t7561;
t7361 = t6645 * t6653;
t7364 = t6644 * t6654;
t6394 = t6620 * t7364 + t7361;
t7350 = t6654 * t6658;
t7086 = t6620 * t7350;
t7368 = t6643 * t6654;
t7245 = pkin(3) * t7368;
t7359 = t6645 * t6658;
t7612 = pkin(2) * t6654;
t6715 = -(t6620 * t7612 + t7359) * t6644 + (-pkin(2) * t6645 + t7086) * t6653 + t6619 * t7245;
t7118 = t6552 * t7419;
t7409 = t6619 * t6654;
t6294 = -(t6394 * t6555 + t7118) * t7609 + (t6552 * t6706 + t6555 * t6715) * t6652 + (-t6552 * t6620 + t6555 * t7409) * t7619;
t7532 = t6294 * t6305;
t6279 = t6636 * t7532;
t7112 = t6555 * t7419;
t6295 = (t6394 * t6552 - t7112) * t7609 + (-t6552 * t6715 + t6555 * t6706) * t6652 - (t6552 * t7409 + t6555 * t6620) * t7619;
t7531 = t6295 * t6305;
t6280 = t6635 * t7531;
t6424 = t6620 * t7359 + t7612;
t7366 = t6644 * t6645;
t7089 = t6620 * t7366;
t7418 = t6619 * t6645;
t7096 = t6643 * t7418;
t7352 = t6653 * t6654;
t7398 = t6620 * t6645;
t6340 = -(-t7089 + t7352) * t7609 + (-pkin(3) * t7096 - t6424 * t6653 - t6644 * (-pkin(2) * t7398 + t7350)) * t6652 - pkin(2) * t7096;
t7530 = t6305 * t6340;
t6289 = t6634 * t7530;
t7193 = t6643 * t6148;
t6108 = pkin(3) * t7193;
t6138 = pkin(2) * t6148;
t6175 = t6658 * t6199;
t6493 = t6558 + t6666;
t7549 = t6262 * t6644;
t7150 = t6305 * t7549;
t6952 = t6619 * t7150;
t6895 = -0.2e1 * t6952;
t6222 = t6493 * t6895;
t6306 = 0.1e1 / t6311 ^ 2;
t6485 = pkin(1) * t7347;
t6537 = pkin(6) * t6558;
t7311 = t6537 + t6676;
t6817 = t6613 * t7438 + t7311;
t7192 = t6644 * t6148;
t6986 = t6643 * t7192;
t6885 = pkin(2) * t6986;
t7181 = t6658 * t7561;
t6977 = t6643 * t7181;
t7013 = pkin(2) * t6462;
t7194 = t6620 * t6148;
t6610 = t6652 * t6611;
t7433 = t6610 * t6676;
t7471 = t6546 * t6599;
t7632 = t6613 - 0.1e1;
t7078 = (t7194 + (t7632 - t7471) * t7550) * t7433;
t7260 = (t6558 + t6665) * t7618;
t7495 = t6477 * t6653;
t6022 = t6643 * t7191 - t7561;
t7573 = t6022 * t6653;
t7217 = (t7078 + (t6148 * t6534 - t6977) * t7395 + (-t6885 + t7573) * t7625 + ((t6222 + 0.2e1 * t6138) * t6620 * t6611 + (-(t6108 + t6175) * t6644 * t6611 + (-0.2e1 * t6885 + t7573) * t6652) * t6619) * pkin(3) + (((t6667 + t7317) * t7651 + 0.2e1 * t6567 + t7495 - pkin(2)) * t7609 + (-(-t6679 + t6817 + 0.2e1 * t7013) * t6599 + (t6493 * t6653 * t7277 + t7260 * t7646) * t6620 + pkin(2) * t7495 + t6485 + t6618 + t6817) * t6652 + pkin(2) * (-t6500 * t6599 + t7400 * t6778 + t6500)) * t7550) * t6306 * t6262;
t6739 = t5989 + t6279 + t6280 + t6289 - t7217;
t6808 = t6952 * t6558;
t7151 = t6619 * t7550;
t6953 = t6643 * t7151;
t7576 = (t6067 * t7433 + (-t6808 / 0.2e1 + t6067 * pkin(2)) * t7301 + (t6067 * t6534 + ((t6529 - 0.2e1 * t7618) * pkin(3) * t7151 - t7181) * t6643) * t6652 + t6445 * pkin(2) * t6953) * t6302;
t7001 = t6148 * t7576;
t5944 = t6739 - t7001;
t5935 = pkin(6) * t5944;
t6846 = t6199 * t7550;
t6082 = pkin(2) * t6846;
t6085 = 0.2e1 * t6846;
t6198 = t6205 ^ 2 * t6678 / t6343 ^ 2;
t6186 = pkin(7) * t6198;
t6244 = t6262 ^ 2 * t6306;
t6573 = g(3) * t6654;
t7448 = t6555 * t6645;
t7460 = t6552 * t6645;
t6220 = pkin(1) * t6244 + g(1) * t7448 - g(2) * t7460 + t6573;
t6434 = t6552 * g(1) + t6555 * g(2);
t7105 = t6613 * t6244;
t5941 = pkin(1) * t5944;
t6570 = g(3) * t6645;
t7447 = t6555 * t6654;
t7459 = t6552 * t6654;
t6772 = -g(1) * t7447 + g(2) * t7459 + t5941 + t6570;
t7171 = t6619 * t6244;
t5908 = pkin(6) * t7171 + t6772;
t7582 = t5908 * t6620;
t7762 = -t6244 * (t7253 * t7641 + t7726) + (t7582 + (pkin(7) * t6085 - t6434) * t6619) * t6653 - 0.2e1 * (t6082 + t5935 / 0.2e1) * t7419 - t5944 * t7304 + t7275 * t7105 + t6220 * t6644 - t6186;
t6515 = t6550 * g(2);
t7597 = t6553 * g(1);
t6435 = -t6515 + t7597;
t6397 = t6435 * t6648;
t7758 = t6568 - t6397;
t6517 = t6551 * g(2);
t7596 = t6554 * g(1);
t6436 = -t6517 + t7596;
t6400 = t6436 * t6651;
t7757 = t6569 - t6400;
t6519 = t6552 * g(2);
t7595 = t6555 * g(1);
t6437 = -t6519 + t7595;
t6403 = t6437 * t6654;
t7756 = t6570 - t6403;
t7755 = t6435 * t6639 + t6571;
t7754 = t6436 * t6642 + t6572;
t7753 = t6437 * t6645 + t6573;
t6660 = pkin(8) * pkin(7);
t6673 = pkin(8) ^ 2;
t6674 = pkin(7) ^ 2;
t7309 = t6673 + t6674;
t7064 = 0.2e1 * t6660 + t7309;
t6193 = pkin(1) * t6199;
t6187 = pkin(7) * t6199;
t6136 = pkin(6) * t6148;
t6181 = pkin(8) * t6199;
t7332 = t6136 + t6181;
t6914 = t6108 + t6187 + t7332;
t6829 = t6914 * t6644;
t7752 = t6829 + t6193;
t6192 = pkin(1) * t6197;
t6185 = pkin(7) * t6197;
t6132 = pkin(6) * t6146;
t6180 = pkin(8) * t6197;
t7333 = t6132 + t6180;
t6915 = t6106 + t6185 + t7333;
t6830 = t6915 * t6641;
t7751 = t6830 + t6192;
t6191 = pkin(1) * t6195;
t6183 = pkin(7) * t6195;
t6127 = pkin(6) * t6144;
t6179 = pkin(8) * t6195;
t7334 = t6127 + t6179;
t6916 = t6104 + t6183 + t7334;
t6831 = t6916 * t6638;
t7750 = t6831 + t6191;
t7393 = t6635 * t6677;
t6365 = t6592 - t7138;
t7279 = -0.2e1 * t7470;
t6893 = t7722 * t6605 * t7279;
t7132 = t7722 * t7467;
t6931 = t6495 * t7132;
t7121 = t6550 * t7386;
t6943 = t6495 * t7121;
t6946 = t6648 * t7138;
t7135 = t6639 * t7500;
t7147 = (t7722 * t7088 - t6639 * t7506 / 0.2e1) * t6605 * t6619;
t7457 = t6553 * t6638;
t7484 = t7722 * t6553;
t7548 = (-0.2e1 * t6550 * t7147 + (((-t6495 * t7484 + t6550 * t6946) * t6620 + t6550 * t7135) * t6619 + (t6553 * t7138 + t6931) * t6599 - t6931 + t6365 * t6553) * t6647 - t6480 * t7484 + (t6553 * t6893 + ((-t6495 * t7457 + t7132) * t6620 + t6480 * t7468) * t6619 + (t6943 + t7484) * t6599 - t6943) * t6658) * t6332;
t6245 = t7393 * t7548;
t7392 = t6636 * t6677;
t7131 = t7722 * t7455;
t6930 = t6495 * t7131;
t7115 = t6553 * t7386;
t6942 = t6495 * t7115;
t7469 = t6550 * t6638;
t7485 = t7722 * t6550;
t7547 = (0.2e1 * t6553 * t7147 + (((-t6495 * t7485 - t6553 * t6946) * t6620 - t6553 * t7135) * t6619 + (t6550 * t7138 - t6930) * t6599 + t6930 + t6365 * t6550) * t6647 - t6480 * t7485 + (t6550 * t6893 - ((t6495 * t7469 + t7131) * t6620 + t6480 * t7456) * t6619 - (t6942 - t7485) * t6599 + t6942) * t6658) * t6332;
t6246 = t7392 * t7547;
t7265 = t6472 * t7623;
t6314 = 0.1e1 / ((t6429 * t6646 + t7265) * t6619 + t6777);
t7427 = t6619 * t6634;
t6428 = -pkin(1) * t7624 - pkin(6) * t7408;
t6559 = t6603 * t6676;
t7300 = pkin(6) * t7611;
t6762 = -t7271 * t7611 + (t7494 + (t6496 * t7617 + t6637 * t6679 - t7300) * t6619) * t6647 + t6619 * t7265;
t6671 = 0.2e1 * pkin(2);
t7060 = t7394 * t6671;
t7110 = t6638 * t7438;
t7258 = pkin(2) * t7405;
t7357 = t6648 * t6475;
t7491 = t6495 * t6619;
t7542 = ((t6639 * t7060 + 0.2e1 * t6422 * t6560 + (t6559 + t7438) * t6648) * t6605 + (-t7091 * t6559 + ((-0.2e1 * t7258 + t7491) * t6639 + t7357) * t6560 + (pkin(2) * t7491 - t6620 * t7110) * t6639 + pkin(2) * t7357) * t6647 + (t6648 * t6480 + (t6495 * t7425 - t6620 * t7722) * t6639) * t6658) / ((pkin(1) * t7252 + t6428 * t6638) * t6646 + t6762);
t6949 = t7427 * t7542;
t6125 = pkin(8) * t6144;
t6126 = pkin(7) * t6144;
t7328 = t6188 - t6126;
t6014 = t6125 - t7328;
t6141 = pkin(1) * t6144;
t6593 = t6676 + t6679;
t6816 = t6191 * t7406;
t6825 = t6230 * t6480 + t6014;
t6616 = -0.2e1 * t6660;
t7061 = t6679 - t7309;
t6838 = t6616 + t6676 + t7061;
t6968 = t7470 * t7554;
t6985 = t6619 * t6195;
t7032 = t6619 * t6479;
t7166 = t6605 * t7554;
t7189 = t6603 * t7563;
t7407 = t6619 * t6677;
t7259 = pkin(2) * t7407;
t7630 = pkin(1) * t6619;
t7006 = ((t6637 * t7032 + ((t6535 + t6838) * t6646 + (t6494 + t7611) * pkin(2)) * t7470) * t7166 + ((pkin(2) * t6985 + t6472 * t6968) * t7611 + ((t6195 * t6593 - t6556 * t6825) * t6619 + pkin(2) * t6475 * t6968) * t6646 - (t6637 * t6825 - t7563) * t7625 - (-t6494 * t7164 * t7642 + t6816) * t6658) * t6647 + t7189 * t7630 + (t7642 * t6480 * t7162 + (t6472 * t7259 + t6637 * t7271) * t7563) * t6646 - (-t6638 * t7563 + (t6014 * t6638 + t6230 * t6472 + t6141) * t6637) * t7408 + t6816 * t7622) / ((-pkin(1) * t7258 + t6429 * t6619) * t6646 + t6762) * t7563;
t6465 = t6679 + t7064;
t6538 = pkin(2) * t6560;
t6089 = t6465 * t6144;
t6822 = t6089 - t6983;
t6834 = 0.2e1 * t6538 + t6559;
t6842 = t6495 * t6937;
t6853 = t6638 * t6968;
t6629 = t6679 / 0.2e1;
t7707 = t6673 / 0.2e1 + t6674 / 0.2e1;
t6912 = t6629 + t6660 + t7707;
t6128 = pkin(3) * t6144;
t7059 = pkin(2) * t6128;
t6101 = t6646 * t7059;
t7203 = t6676 * t6144;
t6105 = t6603 * t7203;
t7074 = -t7563 / 0.2e1;
t6922 = t6637 * t7074;
t6919 = t6089 / 0.2e1 + t6105 / 0.2e1 + t6101 + t6658 * t6922;
t7272 = pkin(1) * t7428;
t7340 = 0.2e1 * t6101 + t6105;
t7216 = ((t7272 * t7506 - 0.2e1 * t6842) * t7166 + (0.2e1 * ((t6559 / 0.2e1 + t6538 + t6483 + t6912) * t6230 + t6919) * t7483 + t6495 * t6853 * t7506) * t6647 + ((t6592 + (t6465 + t6834) * t6638) * t6658 * t6230 + t6472 * (t6822 + t7340)) * t6619 + t6842 * t7554) * t6144;
t6113 = pkin(6) * t7204;
t7346 = (t6126 + t6125 - t6188 / 0.2e1) * t6556 + pkin(3) * t7074;
t5990 = t6113 + t7346;
t7188 = t6637 * t7563;
t6023 = t7204 - t7188;
t6675 = pkin(6) ^ 2;
t7308 = pkin(1) ^ 2 + t6675;
t6839 = t7064 + t7308;
t6442 = t6676 + t6839;
t6446 = -0.2e1 / 0.3e1 * t6660 - t6673 / 0.3e1 - t6674 / 0.3e1 + t6679;
t6464 = pkin(1) * t7438;
t6594 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t6604 = t6647 * t6605;
t6996 = t7438 * t6144;
t6705 = (pkin(6) * t6996 + (((t6188 - 0.2e1 * t6125) * pkin(7) + pkin(6) * t6179) * t6637 + t7187 + t7061 * t7206) * pkin(3)) * t6638 + (t6191 + 0.2e1 * t6831) * t6538 + t7750 * t6559;
t6984 = t6638 * t6195;
t6170 = pkin(1) * t6984;
t7027 = t6495 * t6129;
t6747 = (t6170 + t6916) * t6560 + t7027;
t7062 = -t6675 / 0.2e1 - t6676 / 0.2e1 + t6629;
t6784 = t6616 + t7062 - t7309;
t7682 = 0.3e1 * t7064;
t6785 = t6676 + t7308 + t7682;
t6969 = t6495 * t7722 * t7554;
t6851 = t6658 * t6969;
t6898 = 0.2e1 * t6966;
t6913 = t6679 - t7682;
t6598 = t6620 * t6599;
t7007 = 0.2e1 * t6598 - 0.2e1 * t6620;
t7024 = pkin(3) * t7189;
t7050 = 0.2e1 * t7165;
t7071 = 0.3e1 / 0.2e1 * t6446 * t6658;
t6798 = t6677 * (-t6679 / 0.2e1 + t7707);
t7234 = (pkin(6) * t6125 + pkin(7) * t7334 + t6798 * t7563 + t7346) * t6560;
t7278 = 0.2e1 * t7428;
t7653 = 0.2e1 * t6598;
t7654 = 0.2e1 * t6592;
t7685 = t6538 + t6559 - t6535;
t7710 = 0.2e1 * t6535 - t6559;
t7737 = -0.4e1 * t6598;
t7225 = (-(t6913 + t6834) * t6604 * t6968 * t7483 + (t6851 * t7737 + (-0.3e1 * (t6446 + t6834) * t6852 - 0.2e1 * t7234 + (-0.2e1 * t5990 + t7024) * pkin(2)) * t6599 + ((t6983 + t6996 + t7340) * t7630 + 0.4e1 * t6851) * t6620 + (t6638 * t7071 + t6464 + t6834 * (t6594 * t6638 + pkin(1))) * t7050 - pkin(2) * t7024 + 0.2e1 * t7234 + t5990 * t6671) * t6605 + (t6705 * t6599 + t7722 * ((t6922 + t7204) * t6577 + t6919) * t7278 + (((t6784 + t7685) * t7650 + 0.4e1 * t6483 + t6785 + t7710) * t7483 + t6495 * t7007 * t7138) * t7554 - t6705) * t6647 + (t6969 * t7653 + ((t7062 + t7685) * t6898 + t6747) * t6599 + (-0.2e1 * t6969 + t6023 * t7630 + (t6144 * t6834 + t6822) * t7425) * t6620 + (t7654 + (t6442 + t7710) * t6638) * t7165 - t6747) * t6658) * t7554;
t5822 = -t6677 * (t6314 * (t7216 + t7225) + t6949 + t7006) + t6245 + t6246;
t6029 = pkin(3) * t7563 - t6113;
t6110 = pkin(1) * t7205;
t6122 = pkin(2) * t6127;
t6167 = pkin(1) * t6985;
t6441 = 0.3e1 * t6676 + t6839;
t6454 = -t7438 / 0.2e1;
t7307 = t6679 - t6676;
t6478 = t6618 + t7307;
t6533 = -t6675 + t7307;
t6672 = -0.2e1 * pkin(1);
t6828 = 0.2e1 * t6604 * t6964;
t6714 = pkin(3) * (pkin(6) * t6899 + t6129) + t6828 * t7623;
t6866 = -t6647 * t7300 + t6389;
t6878 = pkin(2) * t6964;
t7023 = pkin(2) * t6195;
t6881 = t6647 * t7023;
t6911 = pkin(2) * t7050;
t6995 = t6602 * t7203;
t7208 = t6619 * t6144;
t7031 = pkin(2) * t7208;
t7035 = pkin(1) * t7204;
t7041 = -(pkin(2) * t6898 + t6127 + t6173) * t6605 + t6127;
t7049 = 0.2e1 * t7162;
t7053 = 0.2e1 * t7554;
t7240 = pkin(6) * t7554;
t7056 = pkin(2) * t7240;
t7063 = t6675 / 0.3e1 - t6679 / 0.3e1 + t6676;
t7248 = pkin(3) * t7767;
t7306 = -0.2e1 * t6592;
t7310 = -0.2e1 / 0.3e1 * t6676 + t7438 / 0.3e1;
t7331 = t7554 * t6671 + t6167;
t7572 = (-t6129 + t6810) * t6605;
t7649 = 0.4e1 * t6605;
t7637 = t7649 - 0.2e1;
t7652 = 0.3e1 * t6598;
t7664 = 0.2e1 * pkin(6);
t7665 = -0.2e1 * pkin(6);
t7666 = 0.2e1 * pkin(1);
t7698 = t6534 * t6638 + t6592;
t5856 = (((t6605 - 0.4e1 / 0.3e1) * t7437 + ((-0.2e1 / 0.3e1 * t6535 + t7310) * t6605 + 0.2e1 / 0.3e1 * t7019 + 0.4e1 / 0.3e1 * t6535 + t7063) * t6646 + (0.4e1 / 0.3e1 * t7611 - 0.2e1 / 0.3e1 * t6494) * t7723) * t7554 * t7652 + (t6544 * t6995 - (t7572 + (t6141 + t7767) * t6647 + 0.3e1 * t6129 - 0.4e1 * t6495 * t6966) * t7611 + ((-pkin(1) * t6129 + t6964 * t7665) * t6647 + (pkin(6) * t6911 - t7035) * t6638 - t6478 * t6144 + (-t6128 * t6605 + (t6828 + (pkin(2) * t6984 - 0.4e1 * t6964) * t6647 + 0.2e1 * (t6191 + t6911) * t6638 + 0.2e1 * t6173 + t7041) * t6637) * pkin(3)) * t6646 + ((-t6966 * t7438 - t6122) * t6637 - t7059) * t6605 + ((t6029 * t6638 - 0.2e1 * t6878) * t6637 + t7248) * t6647 + (t6533 * t6966 + t6122) * t6637 + t6714) * t6599 + ((-0.3e1 * t6605 + 0.3e1) * t7437 * t7554 - (t6544 * t6167 + (-t6881 + (-t6127 - 0.2e1 * t6173 - 0.2e1 * t6104) * t6638) * t6619 + ((t7666 + 0.4e1 * t7349) * t6647 + t7637 * pkin(2)) * t7554) * t7611 + (0.2e1 * (t6454 + t7313) * t7166 + (((t6110 + t7337) * t6556 + t6029) * t6619 - t6472 * pkin(2) * t7053) * t6647 + (0.3e1 * t6638 * t7031 - 0.4e1 * t7240) * t6556 + (pkin(6) * t7031 + t6672 * t7162) * t6638 - t6441 * t7554) * t6646 + ((-t6619 * t7035 + 0.2e1 * t7056) * t6637 + pkin(3) * t7331) * t6605 + ((pkin(1) * t7031 + pkin(6) * t7049) * t6637 + pkin(3) * t7049) * t7387 + (t7208 * t7698 - 0.2e1 * t7056) * t6637 - (t6173 * t7425 + t7331) * pkin(3)) * t6620 - t7638 * t6995 - (-t7572 - t6129 + (-t7337 * t6647 + (t7664 + t6556) * t7165) * t6638) * t7611 - (-t7638 * t6128 + (t6638 * t6881 + t6170 + t6173 + (-t6480 * t6647 + t6658 * t6604) * t6619 * t7053 + t7041) * t6637) * t6560 + ((t6122 + (t7110 + t7306) * t7165) * t6637 + t7059) * t6605 + (((pkin(1) * t6911 - t6029) * t6638 + 0.2e1 * t6878) * t6637 - t7248) * t6647 + (-t6122 + (t6442 * t6638 + t7654) * t7165) * t6637 - t6714) / (t6362 + (t6371 * t6646 + t6866) * t6619) * t7554;
t6581 = pkin(1) * t6647;
t6670 = 0.3e1 * pkin(2);
t6801 = -pkin(1) * t6574 - t6483 - t6534;
t7167 = t6494 * t7554;
t6970 = t7723 * t7167;
t7209 = t6307 * t6144;
t7604 = pkin(6) * t6658;
t7607 = pkin(6) * t6647;
t5948 = (-t7080 - ((t6223 + (t6581 + t6671) * t6144) * t6620 + (-t6881 - t7750) * t6619 + ((-t6561 + (-t7349 + pkin(1)) * t6647 + t6670) * t6599 + t7723) * t7554) * t7611 + (-(pkin(3) * t6494 * t6605 - t6801 - t7313) * t6599 * t7554 + ((((t6577 - t6658) * t6556 - t7604) * t6647 + 0.3e1 * t7262) * t7165 + t6480 * t7188 + t6801 * t6144) * t6620 + (-t6023 * t7607 + t6638 * t7027) * t6619 + pkin(3) * t7167 * t7445) * t6646 - t6599 * t6970 - (pkin(1) * t6807 - t7698) * t6620 * t6967 + t6438 * t6020 * t6619 + t6970) * t7209;
t6580 = pkin(1) * t6605;
t6595 = -pkin(7) / 0.2e1 - pkin(8) / 0.2e1;
t7126 = t6638 * t7470;
t7391 = t6637 * t6646;
t5965 = (((pkin(1) * t6994 + t6020) * t6646 - (t6581 + pkin(2)) * t6195) * t6620 + ((t7188 + t7337) * t6638 - t6141 + (t6438 * t6603 + (pkin(6) * t7391 - pkin(2)) * t6647) * t6144) * t6619 + ((-(-t6574 + t6580 + t6672 - t7385) * t7428 - t7126 * t7607) * t6603 + (t6494 * t6620 * t7416 + ((t6595 * t6605 + t7255 / 0.2e1 + t6480) * t7650 - t6380) * t6637) * t6646 + (t6580 - t6472) * t7428 + t7642 * t6495 * t7387) * t7554) * t6307 * t7563;
t7010 = t6544 * t6556 - pkin(6);
t6696 = -t6637 * t7723 - t6646 * t7010;
t6726 = t7723 * t7390;
t6765 = pkin(6) * t7386 - t6380 * t7424;
t6934 = t6639 * t7101;
t7018 = pkin(3) * t7121;
t7673 = t6639 * t6438 + t7010 * t7415;
t6251 = (t6696 * t6553 - t6702 * t7467) * t6599 + (-(t6550 * t7383 - 0.2e1 * t7116) * t7611 + (-t6550 * t7673 - t6553 * t6780) * t6646 - (t6494 * t7457 + t6550 * t6726) * t6619) * t6620 + t6603 * t7018 + ((t6550 * t6934 + t6553 * t6605 - t6553) * t6556 - t6553 * pkin(6)) * t6646 + (-t6550 * t6765 + t6553 * t6872) * t6637 - t7018;
t6317 = 0.1e1 / ((t6368 * t6646 + t6866) * t6619 + t6362);
t7560 = t6251 * t6317;
t6212 = t6635 * t7560;
t7017 = pkin(3) * t7115;
t6254 = (t6550 * t6696 + t6702 * t7455) * t6599 + ((t6553 * t7383 + 0.2e1 * t7122) * t7611 + (-t6550 * t6780 + t6553 * t7673) * t6646 + t6619 * (-t6494 * t7469 + t6553 * t6726)) * t6620 - t6603 * t7017 + ((t6550 * t6605 - t6553 * t6934 - t6550) * t6556 - t6550 * pkin(6)) * t6646 + (t6550 * t6872 + t6553 * t6765) * t6637 + t7017;
t7557 = t6254 * t6317;
t6215 = t6636 * t7557;
t7640 = t7650 - 0.1e1;
t6284 = ((-t7010 * t7404 - t7249 * t7387) * t6646 - (t7723 * t7404 + t6648 * (t6506 * t6638 - t6658 * t7445)) * t6637) * t6619 + (t6620 * t7358 - t7388 * t7640) * t7611 + (t6438 * t6648 + t6443 * t7404) * t7397 + t6639 * t6494 * t7126;
t7539 = t6284 * t6317;
t6272 = t6634 * t7539;
t5843 = t6215 + t6212 + t6272 - t5856 - t5948 - t5965;
t5930 = pkin(7) * t5942;
t6997 = t6260 * t7209;
t6068 = pkin(2) * t6997;
t5936 = pkin(2) * t5942;
t6884 = pkin(7) * t6997;
t7587 = (0.2e1 * t5936 + 0.4e1 * t6884) * t6605;
t7603 = pkin(7) * t5822;
t7681 = -t7328 * t7554 + t5936;
t7746 = -(t7587 - 0.4e1 * (t6068 - t5930 / 0.2e1) * t7387 - 0.2e1 * t7681) * t6599 - (pkin(1) * t5822 + (pkin(6) * t5843 + t7603) * t6638) * t6619 - 0.2e1 * (t6110 - t7328) * t7554 + t7587;
t6366 = t6592 - t7137;
t6892 = t7721 * t6609 * t7279;
t7130 = t7721 * t7463;
t6929 = t6498 * t7130;
t7119 = t6551 * t7375;
t6941 = t6498 * t7119;
t6945 = t6651 * t7137;
t7134 = t6642 * t7498;
t7146 = (t7721 * t7087 - t6642 * t7505 / 0.2e1) * t6609 * t6619;
t7453 = t6554 * t6641;
t7481 = t7721 * t6554;
t7546 = (-0.2e1 * t6551 * t7146 + (((-t6498 * t7481 + t6551 * t6945) * t6620 + t6551 * t7134) * t6619 + (t6554 * t7137 + t6929) * t6599 - t6929 + t6366 * t6554) * t6650 - t6481 * t7481 + (t6554 * t6892 + ((-t6498 * t7453 + t7130) * t6620 + t6481 * t7464) * t6619 + (t6941 + t7481) * t6599 - t6941) * t6658) * t6334;
t6247 = t7393 * t7546;
t7129 = t7721 * t7451;
t6928 = t6498 * t7129;
t7113 = t6554 * t7375;
t6940 = t6498 * t7113;
t7465 = t6551 * t6641;
t7482 = t7721 * t6551;
t7545 = (0.2e1 * t6554 * t7146 + (((-t6498 * t7482 - t6554 * t6945) * t6620 - t6554 * t7134) * t6619 + (t6551 * t7137 - t6928) * t6599 + t6928 + t6366 * t6551) * t6650 - t6481 * t7482 + (t6551 * t6892 - ((t6498 * t7465 + t7129) * t6620 + t6481 * t7452) * t6619 - (t6940 - t7482) * t6599 + t6940) * t6658) * t6334;
t6248 = t7392 * t7545;
t7264 = t6473 * t7621;
t6315 = 0.1e1 / ((t6430 * t6649 + t7264) * t6619 + t6776);
t6562 = t6607 * t6676;
t7299 = pkin(6) * t7610;
t6761 = -t7270 * t7610 + (t7493 + (t6499 * t7615 + t6640 * t6679 - t7299) * t6619) * t6650 + t6619 * t7264;
t7109 = t6641 * t7438;
t7257 = pkin(2) * t7402;
t7354 = t6651 * t6476;
t7489 = t6498 * t6619;
t7541 = ((t6642 * t7060 + 0.2e1 * t6423 * t6563 + (t6562 + t7438) * t6651) * t6609 + (-t7090 * t6562 + ((-0.2e1 * t7257 + t7489) * t6642 + t7354) * t6563 + (pkin(2) * t7489 - t6620 * t7109) * t6642 + pkin(2) * t7354) * t6650 + (t6651 * t6481 + (t6498 * t7422 - t6620 * t7721) * t6642) * t6658) / ((pkin(1) * t7251 + t6428 * t6641) * t6649 + t6761);
t6948 = t7427 * t7541;
t6130 = pkin(8) * t6146;
t6131 = pkin(7) * t6146;
t7327 = t6189 - t6131;
t6015 = t6130 - t7327;
t6142 = pkin(1) * t6146;
t6815 = t6192 * t7403;
t6824 = t6231 * t6481 + t6015;
t6961 = t7470 * t7552;
t6982 = t6619 * t6197;
t7159 = t6609 * t7552;
t7186 = t6607 * t7562;
t7005 = ((t6640 * t7032 + ((t6536 + t6838) * t6649 + (t6497 + t7610) * pkin(2)) * t7470) * t7159 + ((pkin(2) * t6982 + t6473 * t6961) * t7610 + ((t6197 * t6593 - t6557 * t6824) * t6619 + pkin(2) * t6476 * t6961) * t6649 - (t6640 * t6824 - t7562) * t7625 - (-t6497 * t7157 * t7642 + t6815) * t6658) * t6650 + t7186 * t7630 + (t7642 * t6481 * t7155 + (t6473 * t7259 + t6640 * t7270) * t7562) * t6649 - (-t6641 * t7562 + (t6015 * t6641 + t6231 * t6473 + t6142) * t6640) * t7408 + t6815 * t7620) / ((-pkin(1) * t7257 + t6430 * t6619) * t6649 + t6761) * t7562;
t6539 = pkin(2) * t6563;
t6090 = t6465 * t6146;
t6821 = t6090 - t6980;
t6833 = 0.2e1 * t6539 + t6562;
t6841 = t6498 * t6936;
t6849 = t6641 * t6961;
t6133 = pkin(3) * t6146;
t7058 = pkin(2) * t6133;
t6102 = t6649 * t7058;
t7197 = t6676 * t6146;
t6107 = t6607 * t7197;
t7073 = -t7562 / 0.2e1;
t6921 = t6640 * t7073;
t6918 = t6090 / 0.2e1 + t6107 / 0.2e1 + t6102 + t6658 * t6921;
t7339 = 0.2e1 * t6102 + t6107;
t7215 = ((t7272 * t7505 - 0.2e1 * t6841) * t7159 + (0.2e1 * ((t6562 / 0.2e1 + t6539 + t6484 + t6912) * t6231 + t6918) * t7480 + t6498 * t6849 * t7505) * t6650 + ((t6592 + (t6465 + t6833) * t6641) * t6658 * t6231 + t6473 * (t6821 + t7339)) * t6619 + t6841 * t7552) * t6146;
t6114 = pkin(6) * t7198;
t7345 = (t6131 + t6130 - t6189 / 0.2e1) * t6557 + pkin(3) * t7073;
t5991 = t6114 + t7345;
t7185 = t6640 * t7562;
t6024 = t7198 - t7185;
t6608 = t6650 * t6609;
t6992 = t7438 * t6146;
t6704 = (pkin(6) * t6992 + (((t6189 - 0.2e1 * t6130) * pkin(7) + pkin(6) * t6180) * t6640 + t7184 + t7061 * t7200) * pkin(3)) * t6641 + (t6192 + 0.2e1 * t6830) * t6539 + t7751 * t6562;
t6981 = t6641 * t6197;
t6171 = pkin(1) * t6981;
t7026 = t6498 * t6134;
t6746 = (t6171 + t6915) * t6563 + t7026;
t6962 = t6498 * t7721 * t7552;
t6847 = t6658 * t6962;
t6896 = 0.2e1 * t6959;
t7022 = pkin(3) * t7186;
t7048 = 0.2e1 * t7158;
t7233 = (pkin(6) * t6130 + pkin(7) * t7333 + t6798 * t7562 + t7345) * t6563;
t7684 = t6539 + t6562 - t6536;
t7709 = 0.2e1 * t6536 - t6562;
t7224 = (-(t6913 + t6833) * t6608 * t6961 * t7480 + (t6847 * t7737 + (-0.3e1 * (t6446 + t6833) * t6848 - 0.2e1 * t7233 + (-0.2e1 * t5991 + t7022) * pkin(2)) * t6599 + ((t6980 + t6992 + t7339) * t7630 + 0.4e1 * t6847) * t6620 + (t6641 * t7071 + t6464 + t6833 * (t6594 * t6641 + pkin(1))) * t7048 - pkin(2) * t7022 + 0.2e1 * t7233 + t5991 * t6671) * t6609 + (t6704 * t6599 + t7721 * ((t6921 + t7198) * t6578 + t6918) * t7278 + (((t6784 + t7684) * t7650 + 0.4e1 * t6484 + t6785 + t7709) * t7480 + t6498 * t7007 * t7137) * t7552 - t6704) * t6650 + (t6962 * t7653 + ((t7062 + t7684) * t6896 + t6746) * t6599 + (-0.2e1 * t6962 + t6024 * t7630 + (t6146 * t6833 + t6821) * t7422) * t6620 + (t7654 + (t6442 + t7709) * t6641) * t7158 - t6746) * t6658) * t7552;
t5823 = -t6677 * (t6315 * (t7215 + t7224) + t6948 + t7005) + t6247 + t6248;
t6030 = pkin(3) * t7562 - t6114;
t6111 = pkin(1) * t7199;
t6123 = pkin(2) * t6132;
t6168 = pkin(1) * t6982;
t6827 = 0.2e1 * t6608 * t6957;
t6713 = pkin(3) * (pkin(6) * t6897 + t6134) + t6827 * t7621;
t6865 = -t6650 * t7299 + t6390;
t6877 = pkin(2) * t6957;
t7021 = pkin(2) * t6197;
t6880 = t6650 * t7021;
t6910 = pkin(2) * t7048;
t6991 = t6606 * t7197;
t7201 = t6619 * t6146;
t7030 = pkin(2) * t7201;
t7034 = pkin(1) * t7198;
t7040 = -(pkin(2) * t6896 + t6132 + t6174) * t6609 + t6132;
t7047 = 0.2e1 * t7155;
t7052 = 0.2e1 * t7552;
t7239 = pkin(6) * t7552;
t7055 = pkin(2) * t7239;
t7246 = pkin(3) * t7766;
t7330 = t7552 * t6671 + t6168;
t7571 = (-t6134 + t6809) * t6609;
t7648 = 0.4e1 * t6609;
t7634 = t7648 - 0.2e1;
t7699 = t6534 * t6641 + t6592;
t5857 = (((-0.4e1 / 0.3e1 + t6609) * t7435 + ((-0.2e1 / 0.3e1 * t6536 + t7310) * t6609 + 0.2e1 / 0.3e1 * t7016 + 0.4e1 / 0.3e1 * t6536 + t7063) * t6649 + (0.4e1 / 0.3e1 * t7610 - 0.2e1 / 0.3e1 * t6497) * t7724) * t7552 * t7652 + (t6545 * t6991 - (t7571 + (t6142 + t7766) * t6650 + 0.3e1 * t6134 - 0.4e1 * t6498 * t6959) * t7610 + ((-pkin(1) * t6134 + t6957 * t7665) * t6650 + (pkin(6) * t6910 - t7034) * t6641 - t6478 * t6146 + (-t6133 * t6609 + (t6827 + (pkin(2) * t6981 - 0.4e1 * t6957) * t6650 + 0.2e1 * (t6192 + t6910) * t6641 + 0.2e1 * t6174 + t7040) * t6640) * pkin(3)) * t6649 + ((-t6959 * t7438 - t6123) * t6640 - t7058) * t6609 + ((t6030 * t6641 - 0.2e1 * t6877) * t6640 + t7246) * t6650 + (t6533 * t6959 + t6123) * t6640 + t6713) * t6599 + ((-0.3e1 * t6609 + 0.3e1) * t7435 * t7552 - (t6545 * t6168 + (-t6880 + (-t6132 - 0.2e1 * t6174 - 0.2e1 * t6106) * t6641) * t6619 + ((t7666 + 0.4e1 * t7348) * t6650 + t7634 * pkin(2)) * t7552) * t7610 + (0.2e1 * (t6454 + t7312) * t7159 + (((t6111 + t7336) * t6557 + t6030) * t6619 - t6473 * pkin(2) * t7052) * t6650 + (0.3e1 * t6641 * t7030 - 0.4e1 * t7239) * t6557 + (pkin(6) * t7030 + t6672 * t7155) * t6641 - t6441 * t7552) * t6649 + ((-t6619 * t7034 + 0.2e1 * t7055) * t6640 + pkin(3) * t7330) * t6609 + ((pkin(1) * t7030 + pkin(6) * t7047) * t6640 + pkin(3) * t7047) * t7376 + (t7201 * t7699 - 0.2e1 * t7055) * t6640 - (t6174 * t7422 + t7330) * pkin(3)) * t6620 - t7635 * t6991 - (-t7571 - t6134 + (-t7336 * t6650 + (t7664 + t6557) * t7158) * t6641) * t7610 - (-t7635 * t6133 + (t6641 * t6880 + t6171 + t6174 + (-t6481 * t6650 + t6658 * t6608) * t6619 * t7052 + t7040) * t6640) * t6563 + ((t6123 + (t7109 + t7306) * t7158) * t6640 + t7058) * t6609 + (((pkin(1) * t6910 - t6030) * t6641 + 0.2e1 * t6877) * t6640 - t7246) * t6650 + (-t6123 + (t6442 * t6641 + t7654) * t7158) * t6640 - t6713) / (t6363 + (t6372 * t6649 + t6865) * t6619) * t7552;
t6583 = pkin(1) * t6650;
t6800 = -pkin(1) * t6575 - t6484 - t6534;
t7160 = t6497 * t7552;
t6963 = t7724 * t7160;
t7202 = t6309 * t6146;
t7606 = pkin(6) * t6650;
t5949 = (-t7079 - ((t6221 + (t6583 + t6671) * t6146) * t6620 + (-t6880 - t7751) * t6619 + ((-t6564 + (-t7348 + pkin(1)) * t6650 + t6670) * t6599 + t7724) * t7552) * t7610 + (-(pkin(3) * t6497 * t6609 - t6800 - t7312) * t6599 * t7552 + ((((t6578 - t6658) * t6557 - t7604) * t6650 + 0.3e1 * t7261) * t7158 + t6481 * t7185 + t6800 * t6146) * t6620 + (-t6024 * t7606 + t6641 * t7026) * t6619 + pkin(3) * t7160 * t7444) * t6649 - t6599 * t6963 - (pkin(1) * t6806 - t7699) * t6620 * t6960 + t6439 * t6021 * t6619 + t6963) * t7202;
t6582 = pkin(1) * t6609;
t7125 = t6641 * t7470;
t7380 = t6640 * t6649;
t5963 = (((pkin(1) * t6990 + t6021) * t6649 - (t6583 + pkin(2)) * t6197) * t6620 + ((t7185 + t7336) * t6641 - t6142 + (t6439 * t6607 + (pkin(6) * t7380 - pkin(2)) * t6650) * t6146) * t6619 + ((-(-t6575 + t6582 + t6672 - t7374) * t7428 - t7125 * t7606) * t6607 + (t6497 * t6620 * t7413 + ((t6595 * t6609 + t7254 / 0.2e1 + t6481) * t7650 - t6381) * t6640) * t6649 + (t6582 - t6473) * t7428 + t7642 * t6498 * t7376) * t7552) * t6309 * t7562;
t7009 = t6545 * t6557 - pkin(6);
t6695 = -t6640 * t7724 - t6649 * t7009;
t6725 = t7724 * t7379;
t6764 = pkin(6) * t7375 - t6381 * t7421;
t6933 = t6642 * t7097;
t7015 = pkin(3) * t7119;
t7674 = t6642 * t6439 + t7009 * t7412;
t6252 = (t6695 * t6554 - t6701 * t7463) * t6599 + (-(t6551 * t7372 - 0.2e1 * t7114) * t7610 + (-t6551 * t7674 - t6554 * t6779) * t6649 - (t6497 * t7453 + t6551 * t6725) * t6619) * t6620 + t6607 * t7015 + ((t6551 * t6933 + t6554 * t6609 - t6554) * t6557 - t6554 * pkin(6)) * t6649 + (-t6551 * t6764 + t6554 * t6871) * t6640 - t7015;
t6318 = 0.1e1 / ((t6369 * t6649 + t6865) * t6619 + t6363);
t7559 = t6252 * t6318;
t6213 = t6635 * t7559;
t7014 = pkin(3) * t7113;
t6255 = (t6551 * t6695 + t6701 * t7451) * t6599 + ((t6554 * t7372 + 0.2e1 * t7120) * t7610 + (-t6551 * t6779 + t6554 * t7674) * t6649 + t6619 * (-t6497 * t7465 + t6554 * t6725)) * t6620 - t6607 * t7014 + ((t6551 * t6609 - t6554 * t6933 - t6551) * t6557 - t6551 * pkin(6)) * t6649 + (t6551 * t6871 + t6554 * t6764) * t6640 + t7014;
t7556 = t6255 * t6318;
t6216 = t6636 * t7556;
t6285 = ((-t7009 * t7401 - t7247 * t7376) * t6649 - (t7724 * t7401 + t6651 * (t6507 * t6641 - t6658 * t7444)) * t6640) * t6619 + (t6620 * t7355 - t7377 * t7640) * t7610 + (t6439 * t6651 + t6444 * t7401) * t7396 + t6642 * t6497 * t7125;
t7538 = t6285 * t6318;
t6273 = t6634 * t7538;
t5844 = t6216 + t6213 + t6273 - t5857 - t5949 - t5963;
t5931 = pkin(7) * t5943;
t6993 = t6261 * t7202;
t6069 = pkin(2) * t6993;
t5937 = pkin(2) * t5943;
t6883 = pkin(7) * t6993;
t7586 = (0.2e1 * t5937 + 0.4e1 * t6883) * t6609;
t7602 = pkin(7) * t5823;
t7680 = -t7327 * t7552 + t5937;
t7745 = -(t7586 - 0.4e1 * (t6069 - t5931 / 0.2e1) * t7376 - 0.2e1 * t7680) * t6599 - (pkin(1) * t5823 + (pkin(6) * t5844 + t7602) * t6641) * t6619 - 0.2e1 * (t6111 - t7327) * t7552 + t7586;
t6367 = t6592 - t7136;
t6891 = t7720 * t6613 * t7279;
t7128 = t7720 * t7459;
t6927 = t6501 * t7128;
t7117 = t6552 * t7364;
t6939 = t6501 * t7117;
t6944 = t6654 * t7136;
t7133 = t6645 * t7496;
t7145 = (t7720 * t7086 - t6645 * t7504 / 0.2e1) * t6613 * t6619;
t7449 = t6555 * t6644;
t7478 = t7720 * t6555;
t7544 = (-0.2e1 * t6552 * t7145 + (((-t6501 * t7478 + t6552 * t6944) * t6620 + t6552 * t7133) * t6619 + (t6555 * t7136 + t6927) * t6599 - t6927 + t6367 * t6555) * t6653 - t6482 * t7478 + (t6555 * t6891 + ((-t6501 * t7449 + t7128) * t6620 + t6482 * t7460) * t6619 + (t6939 + t7478) * t6599 - t6939) * t6658) * t6336;
t6249 = t7393 * t7544;
t7127 = t7720 * t7447;
t6926 = t6501 * t7127;
t7111 = t6555 * t7364;
t6938 = t6501 * t7111;
t7461 = t6552 * t6644;
t7479 = t7720 * t6552;
t7543 = (0.2e1 * t6555 * t7145 + (((-t6501 * t7479 - t6555 * t6944) * t6620 - t6555 * t7133) * t6619 + (t6552 * t7136 - t6926) * t6599 + t6926 + t6367 * t6552) * t6653 - t6482 * t7479 + (t6552 * t6891 - ((t6501 * t7461 + t7127) * t6620 + t6482 * t7448) * t6619 - (t6938 - t7479) * t6599 + t6938) * t6658) * t6336;
t6250 = t7392 * t7543;
t7263 = t6474 * t7619;
t6316 = 0.1e1 / ((t6431 * t6652 + t7263) * t6619 + t6775);
t6565 = t6611 * t6676;
t7298 = pkin(6) * t7609;
t6760 = -t7269 * t7609 + (t7492 + (t6502 * t7613 + t6643 * t6679 - t7298) * t6619) * t6653 + t6619 * t7263;
t7108 = t6644 * t7438;
t7256 = pkin(2) * t7399;
t7351 = t6654 * t6477;
t7487 = t6501 * t6619;
t7540 = ((t6645 * t7060 + 0.2e1 * t6424 * t6566 + (t6565 + t7438) * t6654) * t6613 + (-t7089 * t6565 + ((-0.2e1 * t7256 + t7487) * t6645 + t7351) * t6566 + (pkin(2) * t7487 - t6620 * t7108) * t6645 + pkin(2) * t7351) * t6653 + (t6654 * t6482 + (t6501 * t7419 - t6620 * t7720) * t6645) * t6658) / ((pkin(1) * t7250 + t6428 * t6644) * t6652 + t6760);
t6947 = t7427 * t7540;
t6140 = pkin(8) * t6148;
t6135 = pkin(7) * t6148;
t7326 = t6190 - t6135;
t6016 = t6140 - t7326;
t6139 = pkin(1) * t6148;
t6814 = t6193 * t7400;
t6823 = t6232 * t6482 + t6016;
t6954 = t7470 * t7550;
t6979 = t6619 * t6199;
t7152 = t6613 * t7550;
t7183 = t6611 * t7561;
t7004 = ((t6643 * t7032 + ((t6537 + t6838) * t6652 + (t6500 + t7609) * pkin(2)) * t7470) * t7152 + ((pkin(2) * t6979 + t6474 * t6954) * t7609 + ((t6199 * t6593 - t6558 * t6823) * t6619 + pkin(2) * t6477 * t6954) * t6652 - (t6643 * t6823 - t7561) * t7625 - (-t6500 * t7150 * t7642 + t6814) * t6658) * t6653 + t7183 * t7630 + (t7642 * t6482 * t7148 + (t6474 * t7259 + t6643 * t7269) * t7561) * t6652 - (-t6644 * t7561 + (t6016 * t6644 + t6232 * t6474 + t6139) * t6643) * t7408 + t6814 * t7618) / ((-pkin(1) * t7256 + t6431 * t6619) * t6652 + t6760) * t7561;
t6540 = pkin(2) * t6566;
t6091 = t6465 * t6148;
t6820 = t6091 - t6977;
t6832 = 0.2e1 * t6540 + t6565;
t6840 = t6501 * t6935;
t6845 = t6644 * t6954;
t6137 = pkin(3) * t6148;
t7057 = pkin(2) * t6137;
t6103 = t6652 * t7057;
t7190 = t6676 * t6148;
t6109 = t6611 * t7190;
t7072 = -t7561 / 0.2e1;
t6920 = t6643 * t7072;
t6917 = t6091 / 0.2e1 + t6109 / 0.2e1 + t6103 + t6658 * t6920;
t7338 = 0.2e1 * t6103 + t6109;
t7214 = ((t7272 * t7504 - 0.2e1 * t6840) * t7152 + (0.2e1 * ((t6565 / 0.2e1 + t6540 + t6485 + t6912) * t6232 + t6917) * t7477 + t6501 * t6845 * t7504) * t6653 + ((t6592 + (t6465 + t6832) * t6644) * t6658 * t6232 + t6474 * (t6820 + t7338)) * t6619 + t6840 * t7550) * t6148;
t6115 = pkin(6) * t7191;
t7344 = (t6135 + t6140 - t6190 / 0.2e1) * t6558 + pkin(3) * t7072;
t5992 = t6115 + t7344;
t7182 = t6643 * t7561;
t6025 = t7191 - t7182;
t6612 = t6653 * t6613;
t6988 = t7438 * t6148;
t6703 = (pkin(6) * t6988 + (((t6190 - 0.2e1 * t6140) * pkin(7) + pkin(6) * t6181) * t6643 + t7181 + t7061 * t7193) * pkin(3)) * t6644 + (t6193 + 0.2e1 * t6829) * t6540 + t7752 * t6565;
t6978 = t6644 * t6199;
t6172 = pkin(1) * t6978;
t7025 = t6501 * t6138;
t6745 = (t6172 + t6914) * t6566 + t7025;
t6955 = t6501 * t7720 * t7550;
t6843 = t6658 * t6955;
t6894 = 0.2e1 * t6952;
t7028 = pkin(3) * t7183;
t7046 = 0.2e1 * t7151;
t7232 = (pkin(7) * t7332 + pkin(8) * t6136 + t6798 * t7561 + t7344) * t6566;
t7683 = t6540 + t6565 - t6537;
t7708 = 0.2e1 * t6537 - t6565;
t7223 = (-(t6913 + t6832) * t6612 * t6954 * t7477 + (t6843 * t7737 + (-0.3e1 * (t6446 + t6832) * t6844 - 0.2e1 * t7232 + (-0.2e1 * t5992 + t7028) * pkin(2)) * t6599 + ((t6977 + t6988 + t7338) * t7630 + 0.4e1 * t6843) * t6620 + (t6644 * t7071 + t6464 + t6832 * (t6594 * t6644 + pkin(1))) * t7046 - pkin(2) * t7028 + 0.2e1 * t7232 + t5992 * t6671) * t6613 + (t6703 * t6599 + t7720 * ((t6920 + t7191) * t6579 + t6917) * t7278 + (((t6784 + t7683) * t7650 + 0.4e1 * t6485 + t6785 + t7708) * t7477 + t6501 * t7007 * t7136) * t7550 - t6703) * t6653 + (t6955 * t7653 + ((t7062 + t7683) * t6894 + t6745) * t6599 + (-0.2e1 * t6955 + t6025 * t7630 + (t6148 * t6832 + t6820) * t7419) * t6620 + (t7654 + (t6442 + t7708) * t6644) * t7151 - t6745) * t6658) * t7550;
t5824 = -t6677 * (t6316 * (t7214 + t7223) + t6947 + t7004) + t6249 + t6250;
t6031 = pkin(3) * t7561 - t6115;
t6112 = pkin(1) * t7192;
t6124 = pkin(2) * t6136;
t6169 = pkin(1) * t6979;
t6826 = 0.2e1 * t6612 * t6950;
t6712 = pkin(3) * (pkin(6) * t6895 + t6138) + t6826 * t7619;
t6864 = -t6653 * t7298 + t6391;
t6876 = pkin(2) * t6950;
t7020 = pkin(2) * t6199;
t6879 = t6653 * t7020;
t6909 = pkin(2) * t7046;
t6987 = t6610 * t7190;
t7195 = t6619 * t6148;
t7029 = pkin(2) * t7195;
t7033 = pkin(1) * t7191;
t7039 = -(pkin(2) * t6894 + t6136 + t6175) * t6613 + t6136;
t7045 = 0.2e1 * t7148;
t7051 = 0.2e1 * t7550;
t7238 = pkin(6) * t7550;
t7054 = pkin(2) * t7238;
t7244 = pkin(3) * t7765;
t7329 = t7550 * t6671 + t6169;
t7570 = (-t6138 + t6808) * t6613;
t7647 = 0.4e1 * t6613;
t7631 = t7647 - 0.2e1;
t7700 = t6534 * t6644 + t6592;
t5855 = (((-0.4e1 / 0.3e1 + t6613) * t7433 + ((-0.2e1 / 0.3e1 * t6537 + t7310) * t6613 + 0.2e1 / 0.3e1 * t7013 + 0.4e1 / 0.3e1 * t6537 + t7063) * t6652 + (0.4e1 / 0.3e1 * t7609 - 0.2e1 / 0.3e1 * t6500) * t7725) * t7550 * t7652 + (t6546 * t6987 - (t7570 + (t6139 + t7765) * t6653 + 0.3e1 * t6138 - 0.4e1 * t6501 * t6952) * t7609 + ((-pkin(1) * t6138 + t6950 * t7665) * t6653 + (pkin(6) * t6909 - t7033) * t6644 - t6478 * t6148 + (-t6137 * t6613 + (t6826 + (pkin(2) * t6978 - 0.4e1 * t6950) * t6653 + 0.2e1 * (t6193 + t6909) * t6644 + 0.2e1 * t6175 + t7039) * t6643) * pkin(3)) * t6652 + ((-t6952 * t7438 - t6124) * t6643 - t7057) * t6613 + ((t6031 * t6644 - 0.2e1 * t6876) * t6643 + t7244) * t6653 + (t6533 * t6952 + t6124) * t6643 + t6712) * t6599 + ((-0.3e1 * t6613 + 0.3e1) * t7433 * t7550 - (t6546 * t6169 + (-t6879 + (-t6136 - 0.2e1 * t6175 - 0.2e1 * t6108) * t6644) * t6619 + ((t7666 + 0.4e1 * t7347) * t6653 + t7631 * pkin(2)) * t7550) * t7609 + (0.2e1 * (t6454 + t7311) * t7152 + (((t6112 + t7335) * t6558 + t6031) * t6619 - t6474 * pkin(2) * t7051) * t6653 + (0.3e1 * t6644 * t7029 - 0.4e1 * t7238) * t6558 + (pkin(6) * t7029 + t6672 * t7148) * t6644 - t6441 * t7550) * t6652 + ((-t6619 * t7033 + 0.2e1 * t7054) * t6643 + pkin(3) * t7329) * t6613 + ((pkin(1) * t7029 + pkin(6) * t7045) * t6643 + pkin(3) * t7045) * t7365 + (t7195 * t7700 - 0.2e1 * t7054) * t6643 - (t6175 * t7419 + t7329) * pkin(3)) * t6620 - t7632 * t6987 - (-t7570 - t6138 + (-t7335 * t6653 + (t7664 + t6558) * t7151) * t6644) * t7609 - (-t7632 * t6137 + (t6644 * t6879 + t6172 + t6175 + (-t6482 * t6653 + t6658 * t6612) * t6619 * t7051 + t7039) * t6643) * t6566 + ((t6124 + (t7108 + t7306) * t7151) * t6643 + t7057) * t6613 + (((pkin(1) * t6909 - t6031) * t6644 + 0.2e1 * t6876) * t6643 - t7244) * t6653 + (-t6124 + (t6442 * t6644 + t7654) * t7151) * t6643 - t6712) / (t6364 + (t6373 * t6652 + t6864) * t6619) * t7550;
t6585 = pkin(1) * t6653;
t6799 = -pkin(1) * t6576 - t6485 - t6534;
t7153 = t6500 * t7550;
t6956 = t7725 * t7153;
t7196 = t6305 * t6148;
t7605 = pkin(6) * t6653;
t5950 = (-t7078 - ((t6222 + (t6585 + t6671) * t6148) * t6620 + (-t6879 - t7752) * t6619 + ((-t6567 + (-t7347 + pkin(1)) * t6653 + t6670) * t6599 + t7725) * t7550) * t7609 + (-(pkin(3) * t6500 * t6613 - t6799 - t7311) * t6599 * t7550 + ((((t6579 - t6658) * t6558 - t7604) * t6653 + 0.3e1 * t7260) * t7151 + t6482 * t7182 + t6799 * t6148) * t6620 + (-t6025 * t7605 + t6644 * t7025) * t6619 + pkin(3) * t7153 * t7443) * t6652 - t6599 * t6956 - (pkin(1) * t6805 - t7700) * t6620 * t6953 + t6440 * t6022 * t6619 + t6956) * t7196;
t6584 = pkin(1) * t6613;
t7124 = t6644 * t7470;
t7369 = t6643 * t6652;
t5964 = (((pkin(1) * t6986 + t6022) * t6652 - (t6585 + pkin(2)) * t6199) * t6620 + ((t7182 + t7335) * t6644 - t6139 + (t6440 * t6611 + (pkin(6) * t7369 - pkin(2)) * t6653) * t6148) * t6619 + ((-(-t6576 + t6584 + t6672 - t7363) * t7428 - t7124 * t7605) * t6611 + (t6500 * t6620 * t7410 + ((t6595 * t6613 + t7253 / 0.2e1 + t6482) * t7650 - t6382) * t6643) * t6652 + (t6584 - t6474) * t7428 + t7642 * t6501 * t7365) * t7550) * t6305 * t7561;
t7008 = t6546 * t6558 - pkin(6);
t6694 = -t6643 * t7725 - t6652 * t7008;
t6724 = t7725 * t7368;
t6763 = pkin(6) * t7364 - t6382 * t7418;
t6932 = t6645 * t7093;
t7012 = pkin(3) * t7117;
t7675 = t6645 * t6440 + t7008 * t7409;
t6253 = (t6694 * t6555 - t6700 * t7459) * t6599 + (-(t6552 * t7361 - 0.2e1 * t7112) * t7609 + (-t6552 * t7675 - t6555 * t6778) * t6652 - (t6500 * t7449 + t6552 * t6724) * t6619) * t6620 + t6611 * t7012 + ((t6552 * t6932 + t6555 * t6613 - t6555) * t6558 - t6555 * pkin(6)) * t6652 + (-t6552 * t6763 + t6555 * t6870) * t6643 - t7012;
t6319 = 0.1e1 / ((t6370 * t6652 + t6864) * t6619 + t6364);
t7558 = t6253 * t6319;
t6214 = t6635 * t7558;
t7011 = pkin(3) * t7111;
t6256 = (t6552 * t6694 + t6700 * t7447) * t6599 + ((t6555 * t7361 + 0.2e1 * t7118) * t7609 + (-t6552 * t6778 + t6555 * t7675) * t6652 + t6619 * (-t6500 * t7461 + t6555 * t6724)) * t6620 - t6611 * t7011 + ((t6552 * t6613 - t6555 * t6932 - t6552) * t6558 - t6552 * pkin(6)) * t6652 + (t6552 * t6870 + t6555 * t6763) * t6643 + t7011;
t7555 = t6256 * t6319;
t6217 = t6636 * t7555;
t6286 = ((-t7008 * t7398 - t7245 * t7365) * t6652 - (t7725 * t7398 + t6654 * (t6508 * t6644 - t6658 * t7443)) * t6643) * t6619 + (t6620 * t7352 - t7366 * t7640) * t7609 + (t6440 * t6654 + t6445 * t7398) * t7395 + t6645 * t6500 * t7124;
t7537 = t6286 * t6319;
t6274 = t6634 * t7537;
t5845 = t6217 + t6214 + t6274 - t5855 - t5950 - t5964;
t5932 = pkin(7) * t5944;
t6989 = t6262 * t7196;
t6070 = pkin(2) * t6989;
t5938 = pkin(2) * t5944;
t6882 = pkin(7) * t6989;
t7585 = (0.2e1 * t5938 + 0.4e1 * t6882) * t6613;
t7601 = pkin(7) * t5824;
t7679 = -t7326 * t7550 + t5938;
t7744 = -(t7585 - 0.4e1 * (t6070 - t5932 / 0.2e1) * t7365 - 0.2e1 * t7679) * t6599 - (pkin(1) * t5824 + (pkin(6) * t5845 + t7601) * t6644) * t6619 - 0.2e1 * (t6112 - t7326) * t7550 + t7585;
t5840 = pkin(1) * t5843;
t5897 = t6080 + t5933;
t7645 = -0.2e1 * t6619;
t6143 = t6161 ^ 2 / t6329 ^ 2;
t7713 = t6143 + t6194;
t7743 = t6638 * (-pkin(1) * t7713 + t5897 * t7645 + t7755) - ((t6127 - t6183) * t7050 - t5840) * t6647 - t6182;
t5841 = pkin(1) * t5844;
t5898 = t6081 + t5934;
t6145 = t6162 ^ 2 / t6330 ^ 2;
t7712 = t6145 + t6196;
t7742 = t6641 * (-pkin(1) * t7712 + t5898 * t7645 + t7754) - ((t6132 - t6185) * t7048 - t5841) * t6650 - t6184;
t5842 = pkin(1) * t5845;
t5899 = t6082 + t5935;
t6147 = t6163 ^ 2 / t6331 ^ 2;
t7711 = t6147 + t6198;
t7741 = t6644 * (-pkin(1) * t7711 + t5899 * t7645 + t7753) - ((t6136 - t6187) * t7046 - t5842) * t6653 - t6186;
t7736 = 0.2e1 * t6605;
t7735 = 0.2e1 * t6609;
t7734 = 0.2e1 * t6613;
t7733 = 0.2e1 * t6620;
t7732 = 0.2e1 * t6647;
t7731 = 0.2e1 * t6650;
t7730 = 0.2e1 * t6653;
t7729 = 0.4e1 * t6846;
t7728 = 0.4e1 * t6850;
t7727 = 0.4e1 * t6854;
t6900 = -0.2e1 * t6989;
t6901 = -0.2e1 * t6993;
t6902 = -0.2e1 * t6997;
t7719 = t6599 * t7631;
t7718 = t6599 * t7634;
t7717 = t6599 * t7637;
t5921 = t5942 * t6638;
t6862 = t6647 * t6997;
t6735 = t5921 + t6862;
t5922 = t5943 * t6641;
t6859 = t6650 * t6993;
t6734 = t5922 + t6859;
t5923 = t5944 * t6644;
t6856 = t6653 * t6989;
t6733 = t5923 + t6856;
t7706 = -(pkin(2) * t5824 + pkin(6) * t7711) * t6619 - (0.4e1 * t6070 - 0.2e1 * t5932) * t6644 + t7756;
t7705 = -(pkin(2) * t5823 + pkin(6) * t7712) * t6619 - (0.4e1 * t6069 - 0.2e1 * t5931) * t6641 + t7757;
t7704 = -(pkin(2) * t5822 + pkin(6) * t7713) * t6619 - (0.4e1 * t6068 - 0.2e1 * t5930) * t6638 + t7758;
t7703 = -pkin(7) * t7365 - t6567;
t7702 = -pkin(7) * t7376 - t6564;
t7701 = -pkin(7) * t7387 - t6561;
t7694 = -t6434 * t6619 + t7582;
t7692 = -t6433 * t6619 + t7583;
t7690 = -t6432 * t6619 + t7584;
t7608 = pkin(6) * t6619;
t7241 = t5944 * t7608;
t7429 = t6619 * t5845;
t7669 = (-pkin(1) * t6147 - 0.2e1 * t7241 + t7753) * t6620 + pkin(1) * t6900 - pkin(6) * t7429;
t7242 = t5943 * t7608;
t7430 = t6619 * t5844;
t7668 = (-pkin(1) * t6145 - 0.2e1 * t7242 + t7754) * t6620 + pkin(1) * t6901 - pkin(6) * t7430;
t7243 = t5942 * t7608;
t7431 = t6619 * t5843;
t7667 = (-pkin(1) * t6143 - 0.2e1 * t7243 + t7755) * t6620 + pkin(1) * t6902 - pkin(6) * t7431;
t6425 = t7597 / 0.2e1 - t6515 / 0.2e1;
t6797 = t6605 * t6854;
t6861 = t6195 * t6144;
t6813 = pkin(2) * t6861;
t6925 = -t6194 / 0.2e1;
t7077 = t6143 / 0.2e1;
t7600 = pkin(7) * t5843;
t7628 = pkin(2) * t5843;
t7643 = pkin(7) / 0.2e1;
t7663 = -0.2e1 * (t6854 * t7701 + t5897) * t6599 - 0.2e1 * (((t6068 - t5930) * t6619 + pkin(1) * t6861) * t6647 + t7681 * t7425 + t6813 + (t7643 + t6577 / 0.2e1) * t5822) * t6620 - 0.2e1 * pkin(2) * t6797 - 0.2e1 * ((-t7600 / 0.2e1 + t5822 * t6666 + (t7077 + t6925) * pkin(2)) * t6619 + (pkin(7) * t6638 + pkin(1)) * t6854) * t6647 - 0.2e1 * ((pkin(7) * t7077 - t6182 / 0.2e1 + t7628 / 0.2e1 - pkin(6) * t6861) * t6638 + t6425 * t6639 + pkin(1) * t6925 + t6571 / 0.2e1) * t6619 + 0.2e1 * t5933;
t6426 = t7596 / 0.2e1 - t6517 / 0.2e1;
t6796 = t6609 * t6850;
t6858 = t6197 * t6146;
t6812 = pkin(2) * t6858;
t6924 = -t6196 / 0.2e1;
t7076 = t6145 / 0.2e1;
t7599 = pkin(7) * t5844;
t7627 = pkin(2) * t5844;
t7662 = -0.2e1 * (t6850 * t7702 + t5898) * t6599 - 0.2e1 * (((t6069 - t5931) * t6619 + pkin(1) * t6858) * t6650 + t7680 * t7422 + t6812 + (t7643 + t6578 / 0.2e1) * t5823) * t6620 - 0.2e1 * pkin(2) * t6796 - 0.2e1 * ((-t7599 / 0.2e1 + t5823 * t6666 + (t7076 + t6924) * pkin(2)) * t6619 + (pkin(7) * t6641 + pkin(1)) * t6850) * t6650 - 0.2e1 * ((-pkin(6) * t6858 + pkin(7) * t7076 - t6184 / 0.2e1 + t7627 / 0.2e1) * t6641 + t6426 * t6642 + pkin(1) * t6924 + t6572 / 0.2e1) * t6619 + 0.2e1 * t5934;
t6427 = t7595 / 0.2e1 - t6519 / 0.2e1;
t6795 = t6613 * t6846;
t6855 = t6199 * t6148;
t6811 = pkin(2) * t6855;
t6923 = -t6198 / 0.2e1;
t7075 = t6147 / 0.2e1;
t7598 = pkin(7) * t5845;
t7626 = pkin(2) * t5845;
t7661 = -0.2e1 * (t6846 * t7703 + t5899) * t6599 - 0.2e1 * (((t6070 - t5932) * t6619 + pkin(1) * t6855) * t6653 + t7679 * t7419 + t6811 + (t7643 + t6579 / 0.2e1) * t5824) * t6620 - 0.2e1 * pkin(2) * t6795 - 0.2e1 * ((-t7598 / 0.2e1 + t5824 * t6666 + (t7075 + t6923) * pkin(2)) * t6619 + (pkin(7) * t6644 + pkin(1)) * t6846) * t6653 - 0.2e1 * ((-pkin(6) * t6855 + pkin(7) * t7075 - t6186 / 0.2e1 + t7626 / 0.2e1) * t6644 + t6427 * t6645 + pkin(1) * t6923 + t6573 / 0.2e1) * t6619 + 0.2e1 * t5935;
t6857 = t6619 * t6989;
t6058 = t6644 * t6857;
t5818 = t6058 + t6250 / 0.2e1 + t6249 / 0.2e1 + (-t6947 / 0.2e1 - t7004 / 0.2e1 + (-t7223 / 0.2e1 - t7214 / 0.2e1) * t6316) * t6677;
t6790 = t6644 * t6855;
t7432 = t6613 * t5944;
t7068 = -t7432 / 0.2e1;
t7660 = -0.2e1 * t5818 * t6653 + t7068 * t7645 + t6790;
t6863 = t6619 * t6997;
t6056 = t6638 * t6863;
t5816 = t6056 + t6246 / 0.2e1 + t6245 / 0.2e1 + (-t6949 / 0.2e1 - t7006 / 0.2e1 + (-t7225 / 0.2e1 - t7216 / 0.2e1) * t6314) * t6677;
t6794 = t6638 * t6861;
t7436 = t6605 * t5942;
t7070 = -t7436 / 0.2e1;
t7659 = -0.2e1 * t5816 * t6647 + t7070 * t7645 + t6794;
t6860 = t6619 * t6993;
t6057 = t6641 * t6860;
t5817 = t6057 + t6248 / 0.2e1 + t6247 / 0.2e1 + (-t6948 / 0.2e1 - t7005 / 0.2e1 + (-t7224 / 0.2e1 - t7215 / 0.2e1) * t6315) * t6677;
t6792 = t6641 * t6858;
t7434 = t6609 * t5943;
t7069 = -t7434 / 0.2e1;
t7658 = -0.2e1 * t5817 * t6650 + t7069 * t7645 + t6792;
t7657 = -0.2e1 * t5939;
t7656 = -0.2e1 * t5940;
t7655 = -0.2e1 * t5941;
t7639 = 0.2e1 * t6603 - 0.1e1;
t7636 = 0.2e1 * t6607 - 0.1e1;
t7633 = 0.2e1 * t6611 - 0.1e1;
t6597 = t6619 ^ 2;
t7591 = MDP(4) * t6597;
t7590 = MDP(5) * t6597;
t7589 = MDP(6) * t6619;
t7588 = MDP(7) * t6619;
t7581 = t5942 * t6647;
t7580 = t5943 * t6650;
t7579 = t5944 * t6653;
t7529 = t6305 * t7756;
t7528 = t6305 * t7753;
t7526 = t6307 * t7758;
t7525 = t6307 * t7755;
t7523 = t6309 * t7757;
t7522 = t6309 * t7754;
t7442 = t6599 * t6638;
t7441 = t6599 * t6641;
t7440 = t6599 * t6644;
t7417 = t6619 * t6646;
t7414 = t6619 * t6649;
t7411 = t6619 * t6652;
t7389 = t6638 * t5843;
t7378 = t6641 * t5844;
t7367 = t6644 * t5845;
t7343 = -0.2e1 * t6068 + t5930;
t7342 = -0.2e1 * t6069 + t5931;
t7341 = -0.2e1 * t6070 + t5932;
t7325 = t6242 - t6143;
t7324 = t6243 - t6145;
t7323 = t6244 - t6147;
t7297 = 0.2e1 * t6619;
t7295 = 0.4e1 * t6620;
t5918 = t6620 * t5942;
t6787 = -t5856 / 0.2e1 - t5948 / 0.2e1 - t5965 / 0.2e1 + t6212 / 0.2e1 + t6215 / 0.2e1 + t6272 / 0.2e1;
t5807 = t5918 + t6787;
t6059 = t6230 + t6144 / 0.2e1;
t7294 = -0.2e1 * (-t5807 * t6647 + t6059 * t7205) * t6307;
t5919 = t6620 * t5943;
t6786 = -t5857 / 0.2e1 - t5949 / 0.2e1 - t5963 / 0.2e1 + t6213 / 0.2e1 + t6216 / 0.2e1 + t6273 / 0.2e1;
t5808 = t5919 + t6786;
t6060 = t6231 + t6146 / 0.2e1;
t7293 = -0.2e1 * (-t5808 * t6650 + t6060 * t7199) * t6309;
t5920 = t6620 * t5944;
t6788 = -t5855 / 0.2e1 - t5950 / 0.2e1 - t5964 / 0.2e1 + t6214 / 0.2e1 + t6217 / 0.2e1 + t6274 / 0.2e1;
t5809 = t5920 + t6788;
t6061 = t6232 + t6148 / 0.2e1;
t7292 = -0.2e1 * (-t5809 * t6653 + t6061 * t7192) * t6305;
t6793 = t6638 * t6854;
t7291 = (t6793 - t7431 / 0.2e1) * t7732;
t6791 = t6641 * t6850;
t7290 = (t6791 - t7430 / 0.2e1) * t7731;
t6789 = t6644 * t6846;
t7289 = (t6789 - t7429 / 0.2e1) * t7730;
t7288 = 0.2e1 * t7536;
t7287 = 0.2e1 * t7535;
t7286 = 0.2e1 * t7534;
t7285 = 0.2e1 * t7533;
t7284 = 0.2e1 * t7532;
t7283 = 0.2e1 * t7531;
t7282 = 0.2e1 * t7530;
t7281 = 0.2e1 * t7527;
t7280 = 0.2e1 * t7524;
t7276 = pkin(6) * t7642;
t7222 = t5942 * t7387;
t7221 = t5943 * t7376;
t7220 = t5944 * t7365;
t7213 = (t6144 + t6195) * (t6144 - t6195) * t6619;
t7212 = (t6146 + t6197) * (t6146 - t6197) * t6619;
t7211 = (t6148 + t6199) * (t6148 - t6199) * t6619;
t7210 = t6650 * t6145;
t7180 = t6599 * t6242;
t7178 = t6638 * t6242;
t7177 = t6647 * t6242;
t7176 = t6599 * t6243;
t7174 = t6641 * t6243;
t7173 = t6650 * t6243;
t7172 = t6599 * t6244;
t7170 = t6644 * t6244;
t7169 = t6653 * t6244;
t7103 = t5942 * t7425;
t7102 = t6638 * t7417;
t7099 = t5943 * t7422;
t7098 = t6641 * t7414;
t7095 = t5944 * t7419;
t7094 = t6644 * t7411;
t7085 = t6647 * t6143;
t7084 = t6653 * t6147;
t7038 = -t6605 + t7473;
t7037 = -t6609 + t7472;
t7036 = -t6613 + t7471;
t7000 = t6074 * t6317 * t7553;
t6999 = t6075 * t6318 * t7551;
t6998 = t6076 * t6319 * t7549;
t6976 = t6317 * t7177;
t6975 = t6619 * t7177;
t6974 = t6318 * t7173;
t6973 = t6619 * t7173;
t6972 = t6319 * t7169;
t6971 = t6619 * t7169;
t6890 = -t6242 + t7180;
t6889 = -t6243 + t7176;
t6888 = -t6244 + t7172;
t6768 = t6619 * t6083;
t6767 = t6619 * t6084;
t6766 = t6619 * t6085;
t6759 = t6619 * t6790;
t6758 = t6619 * t6789;
t6757 = t6619 * t6794;
t6756 = t6619 * t6793;
t6755 = t6619 * t6792;
t6754 = t6619 * t6791;
t5810 = t5918 + t5843;
t5811 = t5919 + t5844;
t5812 = t5920 + t5845;
t5912 = t6620 * t7178 + t7581;
t5913 = t6620 * t7174 + t7580;
t5916 = t6620 * t7170 + t7579;
t6738 = (t6863 * t7665 + t5840) * t6620 - t6143 * t7608 + t6568;
t6737 = (t6860 * t7665 + t5841) * t6620 - t6145 * t7608 + t6569;
t6736 = (t6857 * t7665 + t5842) * t6620 - t6147 * t7608 + t6570;
t6720 = -t5822 * t7425 - t6194 * t6620 + t6902 + 0.2e1 * t7222;
t6719 = -t5823 * t7422 - t6196 * t6620 + t6901 + 0.2e1 * t7221;
t6718 = -t5824 * t7419 - t6198 * t6620 + t6900 + 0.2e1 * t7220;
t6693 = t6647 * t6768 + t6890 * t7736 - t6194 - t6890;
t6692 = t6650 * t6767 + t6889 * t7735 - t6196 - t6889;
t6691 = t6653 * t6766 + t6888 * t7734 - t6198 - t6888;
t6690 = t7177 * t7442 + (t6768 - t7177) * t6638 - t5810;
t6689 = t7173 * t7441 + (t6767 - t7173) * t6641 - t5811;
t6688 = t7169 * t7440 + (t6766 - t7169) * t6644 - t5812;
t6229 = -0.2e1 * t7105;
t6228 = -0.2e1 * t7106;
t6227 = -0.2e1 * t7107;
t6157 = t6229 + t6244;
t6156 = t6228 + t6243;
t6155 = t6227 + t6242;
t6079 = -0.2e1 * t6758;
t6078 = -0.2e1 * t6754;
t6077 = -0.2e1 * t6756;
t6066 = t6232 + 0.2e1 * t6148;
t6064 = t6231 + 0.2e1 * t6146;
t6062 = t6230 + 0.2e1 * t6144;
t6049 = -0.2e1 * t6855;
t6048 = 0.4e1 * t6855;
t6047 = -0.2e1 * t6858;
t6046 = 0.4e1 * t6858;
t6045 = -0.2e1 * t6861;
t6044 = 0.4e1 * t6861;
t5980 = (t6244 * t7036 + t6620 * t6900 + t7323) * t7369 - t7633 * t6067 * t6952;
t5979 = (t6243 * t7037 + t6620 * t6901 + t7324) * t7380 - t7636 * t6065 * t6959;
t5978 = (t6242 * t7038 + t6620 * t6902 + t7325) * t7391 - t7639 * t6063 * t6966;
t5974 = (-0.2e1 * t6147 + t6229 + 0.2e1 * t6244) * t6611 + (0.4e1 * t7094 * t7567 + (-0.4e1 * t6611 + 0.2e1) * t7194) * t7550 + (t7471 * t7633 + t6613) * t6244 - t7323;
t5973 = (-0.2e1 * t6145 + t6228 + 0.2e1 * t6243) * t6607 + (0.4e1 * t7098 * t7568 + (-0.4e1 * t6607 + 0.2e1) * t7092) * t7552 + (t7472 * t7636 + t6609) * t6243 - t7324;
t5972 = (-0.2e1 * t6143 + t6227 + 0.2e1 * t6242) * t6603 + (0.4e1 * t7102 * t7569 + (-0.4e1 * t6603 + 0.2e1) * t7207) * t7554 + (t7473 * t7639 + t6605) * t6242 - t7325;
t5929 = 0.2e1 * t5941;
t5928 = 0.2e1 * t5940;
t5927 = 0.2e1 * t5939;
t5917 = t6620 * t7169 - t5923;
t5915 = t6620 * t7173 - t5922;
t5914 = t6620 * t7177 - t5921;
t5911 = t6220 - t7241;
t5910 = t6219 - t7242;
t5909 = t6218 - t7243;
t5893 = t5944 * t6652 - t6643 * t6846;
t5892 = t5943 * t6649 - t6640 * t6850;
t5891 = t5942 * t6646 - t6637 * t6854;
t5890 = t5944 * t6643 + t6652 * t6846;
t5889 = t5943 * t6640 + t6649 * t6850;
t5888 = t5942 * t6637 + t6646 * t6854;
t5872 = t5923 + 0.2e1 * t6856;
t5871 = t5922 + 0.2e1 * t6859;
t5870 = t5921 + 0.2e1 * t6862;
t5869 = t7220 + (t7734 - 0.1e1) * t6989;
t5868 = t7221 + (t7735 - 0.1e1) * t6993;
t5867 = t7222 + (t7736 - 0.1e1) * t6997;
t5866 = t6653 * t5911 - t6644 * t7694;
t5865 = t6644 * t5911 + t6653 * t7694;
t5864 = t6650 * t5910 - t6641 * t7692;
t5863 = t6641 * t5910 + t6650 * t7692;
t5862 = t6647 * t5909 - t6638 * t7690;
t5861 = t6638 * t5909 + t6647 * t7690;
t5848 = ((pkin(7) * t6653 - t7618) * t7171 + t6434) * t6620 + ((t5938 + 0.2e1 * t6882) * t6653 + t7341 * t6644 + t6772) * t6619 - t7276 * t6244;
t5847 = ((pkin(7) * t6650 - t7620) * t7175 + t6433) * t6620 + ((t5937 + 0.2e1 * t6883) * t6650 + t7342 * t6641 + t6773) * t6619 - t7276 * t6243;
t5846 = ((pkin(7) * t6647 - t7622) * t7179 + t6432) * t6620 + ((t5936 + 0.2e1 * t6884) * t6647 + t7343 * t6638 + t6774) * t6619 - t7276 * t6242;
t5839 = -0.2e1 * t7626;
t5838 = 0.2e1 * t7626;
t5837 = -0.2e1 * t7627;
t5836 = 0.2e1 * t7627;
t5835 = -0.2e1 * t7628;
t5834 = 0.2e1 * t7628;
t5806 = t6061 * t6148 * t6653 + t5809 * t6644;
t5804 = t6060 * t6146 * t6650 + t5808 * t6641;
t5802 = t6059 * t6144 * t6647 + t5807 * t6638;
t5800 = t5916 * t6619 - t5824;
t5799 = t5913 * t6619 - t5823;
t5798 = t5912 * t6619 - t5822;
t5797 = -t5944 * t7410 + t5824 + t6058;
t5796 = -t5943 * t7413 + t5823 + t6057;
t5795 = -t5942 * t7416 + t5822 + t6056;
t5791 = -t6643 * t5800 - t6652 * t6691;
t5790 = -t6652 * t5800 + t6643 * t6691;
t5789 = -t6640 * t5799 - t6649 * t6692;
t5788 = -t6649 * t5799 + t6640 * t6692;
t5787 = -t6637 * t5798 - t6646 * t6693;
t5786 = -t6646 * t5798 + t6637 * t6693;
t5785 = (-t6066 * t7420 + t6652 * t6845) * t7149 + t6652 * t5812 - t6643 * t7095;
t5784 = (-t6062 * t7426 + t6646 * t6853) * t7163 + t6646 * t5810 - t6637 * t7103;
t5783 = (t6066 * t7411 + t6643 * t6845) * t7149 + t6643 * t5812 + t5944 * t7094;
t5782 = (-t6064 * t7423 + t6649 * t6849) * t7156 + t6649 * t5811 - t6640 * t7099;
t5781 = (t6064 * t7414 + t6640 * t6849) * t7156 + t6640 * t5811 + t5943 * t7098;
t5780 = (t6062 * t7417 + t6637 * t6853) * t7163 + t6637 * t5810 + t5942 * t7102;
t5779 = (t6244 * t7624 + t5932) * t7410 + (pkin(7) * t6952 - 0.2e1 * t7020) * t6232 - pkin(2) * t7095 - 0.2e1 * t6811 - t7601;
t5778 = (t6243 * t7624 + t5931) * t7413 + (pkin(7) * t6959 - 0.2e1 * t7021) * t6231 - pkin(2) * t7099 - 0.2e1 * t6812 - t7602;
t5777 = (t6242 * t7624 + t5930) * t7416 + (pkin(7) * t6966 - 0.2e1 * t7023) * t6230 - pkin(2) * t7103 - 0.2e1 * t6813 - t7603;
t5776 = t7703 * t7172 + (-t5908 * t6644 - t7341) * t6620 + (-pkin(6) * t7579 + t6434 * t6644) * t6619 + (pkin(7) * t7170 + t6220) * t6653 - t7598 + (t7172 + t7105 + t6147) * pkin(2);
t5775 = t7702 * t7176 + (-t5907 * t6641 - t7342) * t6620 + (-pkin(6) * t7580 + t6433 * t6641) * t6619 + (pkin(7) * t7174 + t6219) * t6650 - t7599 + (t7176 + t7106 + t6145) * pkin(2);
t5774 = t7701 * t7180 + (-t5906 * t6638 - t7343) * t6620 + (-pkin(6) * t7581 + t6432 * t6638) * t6619 + (pkin(7) * t7178 + t6218) * t6647 - t7600 + (t7180 + t7107 + t6143) * pkin(2);
t5773 = ((t7729 - 0.2e1 * t6971) * t6620 + 0.2e1 * t7095 + t6048) * t6611 - 0.2e1 * t6688 * t7369 + (-0.2e1 * t6199 + t6951) * t6232 - t7095 + t6049;
t5772 = ((t7728 - 0.2e1 * t6973) * t6620 + 0.2e1 * t7099 + t6046) * t6607 - 0.2e1 * t6689 * t7380 + (-0.2e1 * t6197 + t6958) * t6231 - t7099 + t6047;
t5771 = ((t7727 - 0.2e1 * t6975) * t6620 + 0.2e1 * t7103 + t6044) * t6603 - 0.2e1 * t6690 * t7391 + (-0.2e1 * t6195 + t6965) * t6230 - t7103 + t6045;
t5767 = (t5929 - t6403 + t6736) * t6653 + t7669 * t6644;
t5766 = (t5928 - t6400 + t6737) * t6650 + t7668 * t6641;
t5765 = (t5927 - t6397 + t6738) * t6647 + t7667 * t6638;
t5764 = t7669 * t6653 + (0.2e1 * t6427 * t6654 - t6736 + t7655) * t6644;
t5763 = t7668 * t6650 + (0.2e1 * t6426 * t6651 - t6737 + t7656) * t6641;
t5762 = t7667 * t6647 + (0.2e1 * t6425 * t6648 - t6738 + t7657) * t6638;
t5761 = t5776 * t6652 + t5848 * t6643;
t5760 = t5776 * t6643 - t5848 * t6652;
t5759 = t5775 * t6649 + t5847 * t6640;
t5758 = t5775 * t6640 - t5847 * t6649;
t5757 = t5774 * t6646 + t5846 * t6637;
t5756 = t5774 * t6637 - t5846 * t6646;
t5755 = t6688 * t6611 + (t7095 + (t6085 - t6971) * t6620 + 0.2e1 * t6855) * t7369 - t6758 + t5812;
t5754 = t6689 * t6607 + (t7099 + (t6084 - t6973) * t6620 + 0.2e1 * t6858) * t7380 - t6754 + t5811;
t5753 = t6690 * t6603 + (t7103 + (t6083 - t6975) * t6620 + 0.2e1 * t6861) * t7391 - t6756 + t5810;
t5752 = t6652 * t5779 + (t5839 - t7762) * t6643;
t5751 = t5779 * t6643 + (t5838 + t7762) * t6652;
t5750 = t6649 * t5778 + (t5837 - t7763) * t6640;
t5749 = t5778 * t6640 + (t5836 + t7763) * t6649;
t5748 = t6646 * t5777 + (t5835 - t7764) * t6637;
t5747 = t5777 * t6637 + (t5834 + t7764) * t6646;
t5746 = (t5818 * t6652 - t5893 * t7410) * t7733 + t6652 * t7289 + (t5890 * t6653 * t7651 + t6652 * t7211) * t6644 + ((t7647 - t7719) * t6989 + t6718) * t6643;
t5745 = (-t5890 * t7428 + t5893 * t7440) * t7730 + (t5818 * t7733 + t6644 * t7211 + t7289) * t6643 + ((-0.4e1 * t6613 + t7719) * t6989 - t6718) * t6652;
t5744 = (t5817 * t6649 - t5892 * t7413) * t7733 + t6649 * t7290 + (t5889 * t6650 * t7651 + t6649 * t7212) * t6641 + ((t7648 - t7718) * t6993 + t6719) * t6640;
t5743 = (-t5889 * t7428 + t5892 * t7441) * t7731 + (t5817 * t7733 + t6641 * t7212 + t7290) * t6640 + ((-0.4e1 * t6609 + t7718) * t6993 - t6719) * t6649;
t5742 = (t5816 * t6646 - t5891 * t7416) * t7733 + t6646 * t7291 + (t5888 * t6647 * t7651 + t6646 * t7213) * t6638 + ((t7649 - t7717) * t6997 + t6720) * t6637;
t5741 = (-t5888 * t7428 + t5891 * t7442) * t7732 + (t5816 * t7733 + t6638 * t7213 + t7291) * t6637 + ((-0.4e1 * t6605 + t7717) * t6997 - t6720) * t6646;
t5740 = ((-0.2e1 * t5989 - 0.2e1 * t6279 - 0.2e1 * t6280 - 0.2e1 * t6289 + 0.2e1 * t7217 + t7432) * t6599 + (0.4e1 * t6758 - t5845) * t6620 - t7432 + (t7640 * t7576 + (-t7149 * t7641 + 0.2e1 * t6979) * t6644) * t6148 + t6739) * t6611 + 0.2e1 * ((t6733 * t6620 + t6653 * t7075 + t7367 / 0.2e1) * t6619 + (t7194 + (t7443 - t7471) * t7550) * t6199) * t7369 + t6599 * t5944 + (t6079 + t5845) * t6620 - t6759;
t5739 = ((-0.2e1 * t5987 - 0.2e1 * t6275 - 0.2e1 * t6276 - 0.2e1 * t6287 + 0.2e1 * t7219 + t7436) * t6599 + (0.4e1 * t6756 - t5843) * t6620 - t7436 + (t7640 * t7578 + (-t7163 * t7641 + 0.2e1 * t6985) * t6638) * t6144 + t6741) * t6603 + 0.2e1 * ((t6735 * t6620 + t6647 * t7077 + t7389 / 0.2e1) * t6619 + (t7207 + (t7445 - t7473) * t7554) * t6195) * t7391 + t6599 * t5942 + (t6077 + t5843) * t6620 - t6757;
t5738 = ((-0.2e1 * t5988 - 0.2e1 * t6277 - 0.2e1 * t6278 - 0.2e1 * t6288 + 0.2e1 * t7218 + t7434) * t6599 + (0.4e1 * t6754 - t5844) * t6620 - t7434 + (t7640 * t7577 + (-t7156 * t7641 + 0.2e1 * t6982) * t6641) * t6146 + t6740) * t6607 + 0.2e1 * ((t6734 * t6620 + t6650 * t7076 + t7378 / 0.2e1) * t6619 + (t7092 + (t7444 - t7472) * t7552) * t6197) * t7380 + t6599 * t5943 + (t6078 + t5844) * t6620 - t6755;
t5737 = (t6048 * t6620 + (-t7036 - 0.1e1) * t7729) * t6611 + 0.4e1 * ((t7068 + (t6644 * t7149 - t7576) * t6148 + t6739) * t6599 + (t6079 + t6788) * t6620 - t6644 * t6856 - t6759 + t7432 / 0.2e1 - t6279 / 0.2e1 - t6280 / 0.2e1 - t6289 / 0.2e1 + t7217 / 0.2e1 + t7001 / 0.2e1 - t5989 / 0.2e1) * t7369 + t6085 * t7471 + (-t6733 * t7297 + t6049) * t6620 - 0.2e1 * t6795 + t6085 + ((t6733 * t7295 + 0.2e1 * t7084 + 0.2e1 * t7367) * t6611 - t7084 - t7367) * t6619;
t5736 = (t6046 * t6620 + (-t7037 - 0.1e1) * t7728) * t6607 + 0.4e1 * ((t7069 + (t6641 * t7156 - t7577) * t6146 + t6740) * t6599 + (t6078 + t6786) * t6620 - t6641 * t6859 - t6755 + t7434 / 0.2e1 - t6277 / 0.2e1 - t6278 / 0.2e1 - t6288 / 0.2e1 + t7218 / 0.2e1 + t7002 / 0.2e1 - t5988 / 0.2e1) * t7380 + t6084 * t7472 + (-t6734 * t7297 + t6047) * t6620 - 0.2e1 * t6796 + t6084 + ((t6734 * t7295 + 0.2e1 * t7210 + 0.2e1 * t7378) * t6607 - t7210 - t7378) * t6619;
t5735 = (t6044 * t6620 + (-t7038 - 0.1e1) * t7727) * t6603 + 0.4e1 * ((t7070 + (t6638 * t7163 - t7578) * t6144 + t6741) * t6599 + (t6077 + t6787) * t6620 - t6638 * t6862 - t6757 + t7436 / 0.2e1 - t6275 / 0.2e1 - t6276 / 0.2e1 - t6287 / 0.2e1 + t7219 / 0.2e1 + t7003 / 0.2e1 - t5987 / 0.2e1) * t7391 + t6083 * t7473 + (-t6735 * t7297 + t6045) * t6620 - 0.2e1 * t6797 + t6083 + ((t6735 * t7295 + 0.2e1 * t7085 + 0.2e1 * t7389) * t6603 - t7085 - t7389) * t6619;
t5731 = ((t5838 + t7741) * t6620 + (t5929 + t7706) * t6653 + t7744) * t6652 + t6643 * t7661;
t5730 = ((t5839 - t7741) * t6620 + (t7655 - t7706) * t6653 - t7744) * t6643 + t6652 * t7661;
t5729 = ((t5836 + t7742) * t6620 + (t5928 + t7705) * t6650 + t7745) * t6649 + t6640 * t7662;
t5728 = ((t5837 - t7742) * t6620 + (t7656 - t7705) * t6650 - t7745) * t6640 + t6649 * t7662;
t5727 = ((t5834 + t7743) * t6620 + (t5927 + t7704) * t6647 + t7746) * t6646 + t6637 * t7663;
t5726 = ((t5835 - t7743) * t6620 + (t7657 - t7704) * t6647 - t7746) * t6637 + t6646 * t7663;
t1 = [(t5942 * t7536 + t5943 * t7534 + t5944 * t7532) * MDP(1) + (t6290 * t7526 + t6292 * t7523 + t6294 * t7529) * MDP(2) + (t6290 * t7525 + t6292 * t7522 + t6294 * t7528) * MDP(3) + ((t5872 * t7532 - t6256 * t6972) * t6644 + (t5871 * t7534 - t6255 * t6974) * t6641 + (t5870 * t7536 - t6254 * t6976) * t6638) * t7591 + (t5867 * t7288 + t5868 * t7286 + t5869 * t7284 + t6155 * t7557 + t6156 * t7556 + t6157 * t7555) * t7590 + (t5802 * t7288 + t5804 * t7286 + t5806 * t7284 - t5914 * t7557 - t5915 * t7556 - t5917 * t7555) * t7589 + (t5912 * t7557 + t5913 * t7556 + t5916 * t7555 + t6290 * t7294 + t6292 * t7293 + t6294 * t7292) * t7588 + (t5810 * t7557 + t5811 * t7556 + t5812 * t7555 + (t5810 * t7536 + t5811 * t7534 + t5812 * t7532) * t6620) * MDP(8) + (t5765 * t7536 + t5766 * t7534 + t5767 * t7532 + t5861 * t7557 + t5863 * t7556 + t5865 * t7555) * MDP(9) + (t5762 * t7536 + t5763 * t7534 + t5764 * t7532 + t5862 * t7557 + t5864 * t7556 + t5866 * t7555) * MDP(10) + (t5738 * t7534 + t5739 * t7536 + t5740 * t7532 + t5753 * t7557 + t5754 * t7556 + t5755 * t7555 + (t5978 * t7547 + t5979 * t7545 + t5980 * t7543) * t6677) * MDP(11) + (t5735 * t7536 + t5736 * t7534 + t5737 * t7532 + t5771 * t7557 + t5772 * t7556 + t5773 * t7555 + (t5972 * t7547 + t5973 * t7545 + t5974 * t7543) * t6677) * MDP(12) + (t5741 * t7536 + t5743 * t7534 + t5745 * t7532 + t5787 * t7557 + t5789 * t7556 + t5791 * t7555 + (t5780 * t7547 + t5781 * t7545 + t5783 * t7543) * t6677) * MDP(13) + (t5742 * t7536 + t5744 * t7534 + t5746 * t7532 + t5786 * t7557 + t5788 * t7556 + t5790 * t7555 + (t5782 * t7545 + t5784 * t7547 + t5785 * t7543) * t6677) * MDP(14) + ((t5795 * t7547 + t5796 * t7545 + t5797 * t7543) * t6677 + ((t6255 * t6999 + t6292 * t7658) * t6309 + (t6254 * t7000 + t6290 * t7659) * t6307 + (t6256 * t6998 + t6294 * t7660) * t6305) * t6619) * MDP(15) + (t5727 * t7536 + t5729 * t7534 + t5731 * t7532 + t5747 * t7557 + t5749 * t7556 + t5751 * t7555 + (t5756 * t7547 + t5758 * t7545 + t5760 * t7543) * t6677) * MDP(16) + (t5726 * t7536 + t5728 * t7534 + t5730 * t7532 + t5748 * t7557 + t5750 * t7556 + t5752 * t7555 + (t5757 * t7547 + t5759 * t7545 + t5761 * t7543) * t6677) * MDP(17) + (t6636 - g(1)) * MDP(18); (t5942 * t7535 + t5943 * t7533 + t5944 * t7531) * MDP(1) + (t6291 * t7526 + t6293 * t7523 + t6295 * t7529) * MDP(2) + (t6291 * t7525 + t6293 * t7522 + t6295 * t7528) * MDP(3) + ((t5872 * t7531 - t6253 * t6972) * t6644 + (t5871 * t7533 - t6252 * t6974) * t6641 + (t5870 * t7535 - t6251 * t6976) * t6638) * t7591 + (t5867 * t7287 + t5868 * t7285 + t5869 * t7283 + t6155 * t7560 + t6156 * t7559 + t6157 * t7558) * t7590 + (t5802 * t7287 + t5804 * t7285 + t5806 * t7283 - t5914 * t7560 - t5915 * t7559 - t5917 * t7558) * t7589 + (t5912 * t7560 + t5913 * t7559 + t5916 * t7558 + t6291 * t7294 + t6293 * t7293 + t6295 * t7292) * t7588 + (t5810 * t7560 + t5811 * t7559 + t5812 * t7558 + (t5810 * t7535 + t5811 * t7533 + t5812 * t7531) * t6620) * MDP(8) + (t5765 * t7535 + t5766 * t7533 + t5767 * t7531 + t5861 * t7560 + t5863 * t7559 + t5865 * t7558) * MDP(9) + (t5762 * t7535 + t5763 * t7533 + t5764 * t7531 + t5862 * t7560 + t5864 * t7559 + t5866 * t7558) * MDP(10) + (t5738 * t7533 + t5739 * t7535 + t5740 * t7531 + t5753 * t7560 + t5754 * t7559 + t5755 * t7558 + (t5978 * t7548 + t5979 * t7546 + t5980 * t7544) * t6677) * MDP(11) + (t5735 * t7535 + t5736 * t7533 + t5737 * t7531 + t5771 * t7560 + t5772 * t7559 + t5773 * t7558 + (t5972 * t7548 + t5973 * t7546 + t5974 * t7544) * t6677) * MDP(12) + (t5741 * t7535 + t5743 * t7533 + t5745 * t7531 + t5787 * t7560 + t5789 * t7559 + t5791 * t7558 + (t5780 * t7548 + t5781 * t7546 + t5783 * t7544) * t6677) * MDP(13) + (t5742 * t7535 + t5744 * t7533 + t5746 * t7531 + t5786 * t7560 + t5788 * t7559 + t5790 * t7558 + (t5782 * t7546 + t5784 * t7548 + t5785 * t7544) * t6677) * MDP(14) + ((t5795 * t7548 + t5796 * t7546 + t5797 * t7544) * t6677 + ((t6252 * t6999 + t6293 * t7658) * t6309 + (t6251 * t7000 + t6291 * t7659) * t6307 + (t6253 * t6998 + t6295 * t7660) * t6305) * t6619) * MDP(15) + (t5727 * t7535 + t5729 * t7533 + t5731 * t7531 + t5747 * t7560 + t5749 * t7559 + t5751 * t7558 + (t5756 * t7548 + t5758 * t7546 + t5760 * t7544) * t6677) * MDP(16) + (t5726 * t7535 + t5728 * t7533 + t5730 * t7531 + t5748 * t7560 + t5750 * t7559 + t5752 * t7558 + (t5757 * t7548 + t5759 * t7546 + t5761 * t7544) * t6677) * MDP(17) + (t6635 - g(2)) * MDP(18); (t5942 * t7527 + t5943 * t7524 + t5944 * t7530) * MDP(1) + (t6338 * t7526 + t6339 * t7523 + t6340 * t7529) * MDP(2) + (t6338 * t7525 + t6339 * t7522 + t6340 * t7528) * MDP(3) + ((t5872 * t7530 - t6286 * t6972) * t6644 + (t5871 * t7524 - t6285 * t6974) * t6641 + (t5870 * t7527 - t6284 * t6976) * t6638) * t7591 + (t5867 * t7281 + t5868 * t7280 + t5869 * t7282 + t6155 * t7539 + t6156 * t7538 + t6157 * t7537) * t7590 + (t5802 * t7281 + t5804 * t7280 + t5806 * t7282 - t5914 * t7539 - t5915 * t7538 - t5917 * t7537) * t7589 + (t5912 * t7539 + t5913 * t7538 + t5916 * t7537 + t6338 * t7294 + t6339 * t7293 + t6340 * t7292) * t7588 + (t5810 * t7539 + t5811 * t7538 + t5812 * t7537 + (t5810 * t7527 + t5811 * t7524 + t5812 * t7530) * t6620) * MDP(8) + (t5765 * t7527 + t5766 * t7524 + t5767 * t7530 + t5861 * t7539 + t5863 * t7538 + t5865 * t7537) * MDP(9) + (t5762 * t7527 + t5763 * t7524 + t5764 * t7530 + t5862 * t7539 + t5864 * t7538 + t5866 * t7537) * MDP(10) + (t5738 * t7524 + t5739 * t7527 + t5740 * t7530 + t5753 * t7539 + t5754 * t7538 + t5755 * t7537 + (-t5978 * t7542 - t5979 * t7541 - t5980 * t7540) * t7407) * MDP(11) + (t5735 * t7527 + t5736 * t7524 + t5737 * t7530 + t5771 * t7539 + t5772 * t7538 + t5773 * t7537 + (-t5972 * t7542 - t5973 * t7541 - t5974 * t7540) * t7407) * MDP(12) + (t5741 * t7527 + t5743 * t7524 + t5745 * t7530 + t5787 * t7539 + t5789 * t7538 + t5791 * t7537 + (-t5780 * t7542 - t5781 * t7541 - t5783 * t7540) * t7407) * MDP(13) + (t5742 * t7527 + t5744 * t7524 + t5746 * t7530 + t5786 * t7539 + t5788 * t7538 + t5790 * t7537 + (-t5782 * t7541 - t5784 * t7542 - t5785 * t7540) * t7407) * MDP(14) + ((t6285 * t6999 + t6339 * t7658) * t6309 + (t6284 * t7000 + t6338 * t7659) * t6307 + (t6286 * t6998 + t6340 * t7660) * t6305 + (-t5795 * t7542 - t5796 * t7541 - t5797 * t7540) * t6677) * t6619 * MDP(15) + (t5727 * t7527 + t5729 * t7524 + t5731 * t7530 + t5747 * t7539 + t5749 * t7538 + t5751 * t7537 + (-t5756 * t7542 - t5758 * t7541 - t5760 * t7540) * t7407) * MDP(16) + (t5726 * t7527 + t5728 * t7524 + t5730 * t7530 + t5748 * t7539 + t5750 * t7538 + t5752 * t7537 + (-t5757 * t7542 - t5759 * t7541 - t5761 * t7540) * t7407) * MDP(17) + (t6634 - g(3)) * MDP(18);];
tauX  = t1;
