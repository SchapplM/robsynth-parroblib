% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:13:31
% EndTime: 2020-08-07 03:25:14
% DurationCPUTime: 746.94s
% Computational Cost: add. (9487887->2679), mult. (18655803->4303), div. (125172->38), fcn. (14243331->26), ass. (0->1582)
t9746 = sin(qJ(2,3));
t9755 = cos(qJ(2,3));
t10599 = t9746 * t9755;
t9730 = sin(pkin(4));
t10280 = t9730 * t10599;
t10642 = t9730 * t9746;
t9742 = legFrame(3,2);
t9664 = cos(t9742);
t9764 = xDP(2);
t10659 = t9664 * t9764;
t9661 = sin(t9742);
t9765 = xDP(1);
t9496 = t9661 * t9765 + t10659;
t10332 = t9496 * t10642;
t9756 = cos(qJ(1,3));
t9763 = xDP(3);
t10571 = t9756 * t9763;
t9747 = sin(qJ(1,3));
t10668 = t9661 * t9764;
t9925 = -t9664 * t9765 + t10668;
t10883 = t9747 * t9925 - t10571;
t10724 = t10883 * t9746;
t10452 = pkin(3) * t10724;
t9745 = sin(qJ(3,3));
t10643 = t9730 * t9745;
t10652 = (t9755 + 0.1e1) * (t9755 - 0.1e1);
t9754 = cos(qJ(3,3));
t10798 = t9754 * pkin(6);
t9714 = t9754 ^ 2;
t10815 = pkin(3) * t9714;
t10510 = 0.2e1 * t10815;
t10821 = pkin(2) * t9754;
t9601 = pkin(6) * t9745 + pkin(3);
t9766 = pkin(8) + pkin(7);
t9634 = t9766 * t9755;
t10886 = t9746 * (t10510 - t9601 + t10821) - t9754 * t9634;
t9475 = -t9747 * t9763 - t9756 * t9925;
t9469 = t9755 * t9475;
t9685 = pkin(1) * t9746;
t9619 = t9685 + pkin(7);
t9587 = pkin(8) + t9619;
t10476 = pkin(2) * t10599;
t9716 = t9755 ^ 2;
t9895 = t9716 * t9766 - t10476;
t9490 = -t9895 + t9587;
t10559 = t9766 * t9746;
t9682 = pkin(2) * t9755;
t10522 = t10559 + t9682;
t9545 = pkin(1) + t10522;
t10826 = pkin(2) * t9746;
t9550 = t9634 - t10826;
t9671 = t9754 * pkin(3);
t9731 = cos(pkin(4));
t9707 = t9731 ^ 2;
t9568 = t9746 * t9634;
t9672 = t9716 * pkin(2);
t10525 = t9568 + t9672;
t10918 = -pkin(2) + t10525;
t9654 = t9716 - 0.2e1;
t9826 = t9654 * t9671 + t10918;
t9579 = t10559 + pkin(1);
t9999 = t9579 * t9755 + t9672;
t9319 = ((-t9745 * t9826 + t10798) * t9496 + t10886 * t10883) * t9707 + (-(pkin(6) * t9496 * t9746 - t10883 * t9826) * t10643 + (t9469 + 0.2e1 * t10332) * t10815 + ((-pkin(6) * t10883 - t9496 * t9550) * t9730 + t9475 * t9545) * t9754 - pkin(3) * t10332) * t9731 + (pkin(6) * t10724 + (-t10280 * t9671 - t9490 * t9730) * t9475 + (t10652 * t9671 + t9999) * t9496) * t9745 - t9714 * t10452 - t9496 * t10798 + t10452;
t10574 = t9754 * t9755;
t10923 = t9682 + pkin(1);
t10614 = t9731 * t9754;
t10926 = t9671 + pkin(2);
t9478 = pkin(1) * (-t10926 * t9746 + t9634) * t10614;
t9445 = t9478 + t9730 * ((pkin(2) * t9545 + t10923 * t9671) * t9745 - (pkin(3) * t10574 + t10522) * t10798);
t9308 = t9319 / t9445;
t10400 = t9766 * t9308;
t10833 = pkin(1) * t10926;
t10827 = pkin(2) * t9745;
t9557 = t10798 - t10827;
t10600 = t9746 * t9754;
t10270 = t9731 * t10600;
t10684 = t10926 * t9730;
t10605 = t9731 * t9766;
t9586 = pkin(1) * t10605;
t10698 = t9586 * t9754;
t9874 = -t10270 * t10833 + (-t10684 * t9557 + t10698) * t9755;
t9457 = (-t10559 * t9557 + t9745 * t10833) * t9730 + t9874;
t9448 = 0.1e1 / t9457;
t9786 = 0.1e1 / pkin(3);
t10728 = t9448 * t9786;
t10026 = t9765 * t10926;
t10671 = (t9731 + 0.1e1) * (t9731 - 0.1e1);
t10311 = t9766 * t10671;
t10068 = t10926 * t10311;
t9708 = pkin(2) + t9766;
t9709 = pkin(2) - t9766;
t10710 = (t9671 + t9708) * (t9671 + t9709);
t10326 = t9746 * t10710;
t10335 = t10883 * t10605;
t10625 = t9730 * t9766;
t10644 = t9730 * t9731;
t10649 = t9707 * t9766;
t9667 = t9745 * pkin(3);
t9602 = t9667 + pkin(6);
t10691 = t9602 * t9746;
t9767 = 0.2e1 * t9766;
t10598 = t9746 * t9767;
t9582 = pkin(1) + t10598;
t10704 = t9582 * t10926;
t10719 = t9496 * t10926;
t10725 = t10883 * t9731;
t10844 = t9707 - 0.1e1;
t10949 = 0.2e1 * t10926;
t9700 = pkin(1) * t9766;
t9593 = t9764 * t9700;
t9594 = t9765 * t9700;
t9361 = ((t10335 * t10949 - t10710 * t9475) * t9730 - 0.2e1 * t9496 * t10068) * t9716 + ((-t10326 * t10725 - t10704 * t9475) * t9730 + t9593 * t9664 + t9594 * t9661 + t10844 * t9496 * t10326 + ((-t10644 * t9496 - t10883 * t9707 - t10571) * t10926 + (-t10026 * t9664 + t10668 * t10926) * t9747) * t9602) * t9755 - ((t10691 * t9496 + t10883 * t10926) * t9731 + t9475 * t9587) * t10625 + (-t10691 * t10883 + t10719) * t10649 + (t10883 * t9766 * t9602 + (-t10026 * t9661 - t10659 * t10926) * pkin(1)) * t9746 - t9766 * t10719;
t9353 = t9361 * t10728;
t9346 = pkin(6) * t9353;
t9181 = -t9346 + t10400;
t10955 = t9181 * t9746;
t9749 = sin(qJ(2,2));
t9758 = cos(qJ(2,2));
t10589 = t9749 * t9758;
t10276 = t9730 * t10589;
t10639 = t9730 * t9749;
t9743 = legFrame(2,2);
t9665 = cos(t9743);
t10656 = t9665 * t9764;
t9662 = sin(t9743);
t9497 = t9662 * t9765 + t10656;
t10331 = t9497 * t10639;
t9759 = cos(qJ(1,2));
t10566 = t9759 * t9763;
t9750 = sin(qJ(1,2));
t10665 = t9662 * t9764;
t9924 = -t9665 * t9765 + t10665;
t10884 = t9750 * t9924 - t10566;
t10722 = t10884 * t9749;
t10449 = pkin(3) * t10722;
t9748 = sin(qJ(3,2));
t10640 = t9730 * t9748;
t10651 = (t9758 + 0.1e1) * (t9758 - 0.1e1);
t9757 = cos(qJ(3,2));
t10797 = t9757 * pkin(6);
t9718 = t9757 ^ 2;
t10814 = pkin(3) * t9718;
t10509 = 0.2e1 * t10814;
t10820 = pkin(2) * t9757;
t9604 = pkin(6) * t9748 + pkin(3);
t9635 = t9766 * t9758;
t10887 = t9749 * (t10509 - t9604 + t10820) - t9757 * t9635;
t9476 = -t9750 * t9763 - t9759 * t9924;
t9470 = t9758 * t9476;
t9686 = pkin(1) * t9749;
t9620 = t9686 + pkin(7);
t9588 = pkin(8) + t9620;
t10475 = pkin(2) * t10589;
t9720 = t9758 ^ 2;
t9894 = t9720 * t9766 - t10475;
t9491 = -t9894 + t9588;
t10558 = t9766 * t9749;
t9683 = pkin(2) * t9758;
t10521 = t10558 + t9683;
t9546 = pkin(1) + t10521;
t10824 = pkin(2) * t9749;
t9551 = t9635 - t10824;
t9674 = t9757 * pkin(3);
t9569 = t9749 * t9635;
t9675 = t9720 * pkin(2);
t10524 = t9569 + t9675;
t10919 = -pkin(2) + t10524;
t9655 = t9720 - 0.2e1;
t9825 = t9655 * t9674 + t10919;
t9580 = t10558 + pkin(1);
t9998 = t9580 * t9758 + t9675;
t9320 = ((-t9748 * t9825 + t10797) * t9497 + t10887 * t10884) * t9707 + (-(pkin(6) * t9497 * t9749 - t10884 * t9825) * t10640 + (t9470 + 0.2e1 * t10331) * t10814 + ((-pkin(6) * t10884 - t9497 * t9551) * t9730 + t9476 * t9546) * t9757 - pkin(3) * t10331) * t9731 + (pkin(6) * t10722 + (-t10276 * t9674 - t9491 * t9730) * t9476 + (t10651 * t9674 + t9998) * t9497) * t9748 - t9718 * t10449 - t9497 * t10797 + t10449;
t10569 = t9757 * t9758;
t10922 = t9683 + pkin(1);
t10611 = t9731 * t9757;
t10925 = t9674 + pkin(2);
t9479 = pkin(1) * (-t10925 * t9749 + t9635) * t10611;
t9446 = t9479 + ((pkin(2) * t9546 + t10922 * t9674) * t9748 - (pkin(3) * t10569 + t10521) * t10797) * t9730;
t9310 = t9320 / t9446;
t10392 = t9766 * t9310;
t10832 = pkin(1) * t10925;
t10825 = pkin(2) * t9748;
t9559 = t10797 - t10825;
t10590 = t9749 * t9757;
t10267 = t9731 * t10590;
t10681 = t10925 * t9730;
t10697 = t9586 * t9757;
t9873 = -t10267 * t10832 + (-t10681 * t9559 + t10697) * t9758;
t9458 = (-t10558 * t9559 + t9748 * t10832) * t9730 + t9873;
t9450 = 0.1e1 / t9458;
t10727 = t9450 * t9786;
t10024 = t10925 * t9765;
t10067 = t10925 * t10311;
t10709 = (t9674 + t9708) * (t9674 + t9709);
t10325 = t9749 * t10709;
t10334 = t10884 * t10605;
t9668 = t9748 * pkin(3);
t9605 = t9668 + pkin(6);
t10689 = t9605 * t9749;
t10588 = t9749 * t9767;
t9583 = pkin(1) + t10588;
t10702 = t9583 * t10925;
t10718 = t9497 * t10925;
t10723 = t10884 * t9731;
t10950 = 0.2e1 * t10925;
t9362 = ((t10334 * t10950 - t10709 * t9476) * t9730 - 0.2e1 * t9497 * t10067) * t9720 + ((-t10325 * t10723 - t10702 * t9476) * t9730 + t9593 * t9665 + t9594 * t9662 + t10844 * t9497 * t10325 + ((-t10644 * t9497 - t10884 * t9707 - t10566) * t10925 + (-t10024 * t9665 + t10665 * t10925) * t9750) * t9605) * t9758 - ((t10689 * t9497 + t10884 * t10925) * t9731 + t9476 * t9588) * t10625 + (-t10689 * t10884 + t10718) * t10649 + (t10884 * t9766 * t9605 + (-t10024 * t9662 - t10656 * t10925) * pkin(1)) * t9749 - t9766 * t10718;
t9355 = t9362 * t10727;
t9347 = pkin(6) * t9355;
t9182 = -t9347 + t10392;
t10954 = t9182 * t9749;
t9752 = sin(qJ(2,1));
t9761 = cos(qJ(2,1));
t10579 = t9752 * t9761;
t10272 = t9730 * t10579;
t10636 = t9730 * t9752;
t9744 = legFrame(1,2);
t9666 = cos(t9744);
t10653 = t9666 * t9764;
t9663 = sin(t9744);
t9498 = t9663 * t9765 + t10653;
t10330 = t9498 * t10636;
t9762 = cos(qJ(1,1));
t10561 = t9762 * t9763;
t9753 = sin(qJ(1,1));
t10662 = t9663 * t9764;
t9923 = -t9666 * t9765 + t10662;
t10885 = t9753 * t9923 - t10561;
t10720 = t10885 * t9752;
t10446 = pkin(3) * t10720;
t9751 = sin(qJ(3,1));
t10637 = t9730 * t9751;
t10650 = (t9761 + 0.1e1) * (t9761 - 0.1e1);
t9760 = cos(qJ(3,1));
t10796 = t9760 * pkin(6);
t9722 = t9760 ^ 2;
t10813 = pkin(3) * t9722;
t10508 = 0.2e1 * t10813;
t10819 = pkin(2) * t9760;
t9607 = pkin(6) * t9751 + pkin(3);
t9636 = t9766 * t9761;
t10888 = t9752 * (t10508 - t9607 + t10819) - t9760 * t9636;
t9477 = -t9753 * t9763 - t9762 * t9923;
t9471 = t9761 * t9477;
t9687 = pkin(1) * t9752;
t9621 = t9687 + pkin(7);
t9589 = pkin(8) + t9621;
t10474 = pkin(2) * t10579;
t9724 = t9761 ^ 2;
t9893 = t9724 * t9766 - t10474;
t9492 = -t9893 + t9589;
t10557 = t9766 * t9752;
t9684 = pkin(2) * t9761;
t10520 = t10557 + t9684;
t9547 = pkin(1) + t10520;
t10822 = pkin(2) * t9752;
t9552 = t9636 - t10822;
t9677 = t9760 * pkin(3);
t9570 = t9752 * t9636;
t9678 = t9724 * pkin(2);
t10523 = t9570 + t9678;
t10920 = -pkin(2) + t10523;
t9656 = t9724 - 0.2e1;
t9824 = t9656 * t9677 + t10920;
t9581 = t10557 + pkin(1);
t9997 = t9581 * t9761 + t9678;
t9321 = ((-t9751 * t9824 + t10796) * t9498 + t10888 * t10885) * t9707 + (-(pkin(6) * t9498 * t9752 - t10885 * t9824) * t10637 + (t9471 + 0.2e1 * t10330) * t10813 + ((-pkin(6) * t10885 - t9498 * t9552) * t9730 + t9547 * t9477) * t9760 - pkin(3) * t10330) * t9731 + (pkin(6) * t10720 + (-t10272 * t9677 - t9492 * t9730) * t9477 + (t10650 * t9677 + t9997) * t9498) * t9751 - t9722 * t10446 - t9498 * t10796 + t10446;
t10564 = t9760 * t9761;
t10921 = t9684 + pkin(1);
t10608 = t9731 * t9760;
t10924 = t9677 + pkin(2);
t9480 = pkin(1) * (-t10924 * t9752 + t9636) * t10608;
t9447 = t9480 + ((pkin(2) * t9547 + t10921 * t9677) * t9751 - (pkin(3) * t10564 + t10520) * t10796) * t9730;
t9312 = t9321 / t9447;
t10385 = t9766 * t9312;
t10831 = pkin(1) * t10924;
t10823 = pkin(2) * t9751;
t9561 = t10796 - t10823;
t10580 = t9752 * t9760;
t10264 = t9731 * t10580;
t10678 = t10924 * t9730;
t10696 = t9586 * t9760;
t9872 = -t10264 * t10831 + (-t10678 * t9561 + t10696) * t9761;
t9459 = (-t10557 * t9561 + t9751 * t10831) * t9730 + t9872;
t9452 = 0.1e1 / t9459;
t10726 = t9452 * t9786;
t10025 = t9765 * t10924;
t10066 = t10924 * t10311;
t10708 = (t9677 + t9708) * (t9677 + t9709);
t10324 = t9752 * t10708;
t10333 = t10885 * t10605;
t9669 = t9751 * pkin(3);
t9608 = t9669 + pkin(6);
t10687 = t9608 * t9752;
t10578 = t9752 * t9767;
t9584 = pkin(1) + t10578;
t10700 = t9584 * t10924;
t10717 = t9498 * t10924;
t10721 = t10885 * t9731;
t10951 = 0.2e1 * t10924;
t9363 = ((t10333 * t10951 - t10708 * t9477) * t9730 - 0.2e1 * t9498 * t10066) * t9724 + ((-t10324 * t10721 - t10700 * t9477) * t9730 + t9593 * t9666 + t9594 * t9663 + t10844 * t9498 * t10324 + ((-t10644 * t9498 - t10885 * t9707 - t10561) * t10924 + (-t10025 * t9666 + t10662 * t10924) * t9753) * t9608) * t9761 - ((t10687 * t9498 + t10885 * t10924) * t9731 + t9477 * t9589) * t10625 + (-t10687 * t10885 + t10717) * t10649 + (t10885 * t9766 * t9608 + (-t10025 * t9663 - t10653 * t10924) * pkin(1)) * t9752 - t9766 * t10717;
t9357 = t9363 * t10726;
t9348 = pkin(6) * t9357;
t9183 = -t9348 + t10385;
t10953 = t9183 * t9752;
t9782 = pkin(8) ^ 2;
t9783 = pkin(7) ^ 2;
t10515 = t9782 + t9783;
t9768 = pkin(8) * pkin(7);
t9727 = -0.2e1 * t9768;
t10952 = t9727 - t10515;
t10501 = 0.2e1 * t9755;
t10500 = 0.2e1 * t9758;
t10499 = 0.2e1 * t9761;
t10842 = 0.2e1 * t9714 - 0.1e1;
t10839 = 0.2e1 * t9718 - 0.1e1;
t10836 = 0.2e1 * t9722 - 0.1e1;
t10473 = pkin(3) * t10643;
t10620 = t9731 * t9745;
t9877 = t9730 * t9550;
t9823 = -pkin(3) * t10620 + t9877;
t9391 = -(t9469 + (t9496 * t9730 + t10725) * t9746) * t10815 + (t10883 * t10473 + (-pkin(2) * t9475 + t10335) * t9755 + (-pkin(2) * t10725 - t9475 * t9766) * t9746 + t9823 * t9496) * t9754 - (-t10883 * t9730 + t9496 * t9731) * t10827;
t9499 = t9545 * t10827;
t10633 = t9730 * t9755;
t10458 = pkin(6) * t10633;
t10619 = t9731 * t9746;
t10486 = pkin(1) * t10619;
t9518 = t10458 + t10486;
t10029 = -t9518 * t10815 + t9730 * t9499;
t9542 = pkin(1) * t9667 - pkin(6) * t10559;
t9603 = t9667 - pkin(6);
t9487 = t9603 * t9682 + t9542;
t10829 = pkin(1) * t9731;
t9505 = t9550 * t10829;
t9428 = (t9487 * t9730 + t9505) * t9754 + t10029;
t9423 = 0.1e1 / t9428;
t10758 = t9391 * t9423;
t10364 = t9746 * t10758;
t10099 = t9730 * t10364;
t10362 = t9755 * t10758;
t9367 = t9730 * t10362;
t10532 = t9367 - 0.2e1 * t9353;
t10402 = t9746 * t9308;
t10135 = t9745 * t10402;
t10014 = pkin(2) * t10135;
t10365 = t9745 * t10758;
t10100 = t9730 * t10365;
t10767 = t9361 * t9448;
t10381 = t9766 * t10767;
t10120 = t9745 * t10381;
t10164 = pkin(2) * t9568;
t10292 = t9730 * t10620;
t10366 = t9730 * t10758;
t10404 = t9731 * t9308;
t9713 = t9754 * t9714;
t9785 = pkin(3) ^ 2;
t10647 = t9713 * t9785;
t10674 = t9654 * t9707;
t10840 = t9716 - 0.1e1;
t10412 = (t10404 + (t10840 - t10674) * t10758) * t10647;
t9774 = pkin(6) / 0.3e1;
t10450 = (t9667 + t9774) * t10826;
t10492 = 0.2e1 * t10625;
t10703 = t9582 * t9755;
t9175 = t9745 * t10400 - t10767;
t10773 = t9175 * t9755;
t10828 = pkin(2) * t9730;
t10859 = -0.3e1 * t9730;
t10861 = -0.2e1 * t9707;
t9373 = t9731 * t10758;
t9225 = t9373 + t9308;
t9239 = t9367 - t9353;
t10403 = t9745 * t9308;
t9268 = pkin(3) * t10403;
t9293 = pkin(2) * t9308;
t9331 = t9766 * t9353;
t10023 = -0.2e1 * t10099;
t9775 = pkin(6) / 0.2e1;
t9596 = t9667 + t9775;
t9364 = t9596 * t10023;
t9424 = 0.1e1 / t9428 ^ 2;
t9484 = -pkin(6) * t10522 + t10923 * t9667;
t9590 = pkin(1) * t10559;
t9729 = t9766 ^ 2;
t9788 = pkin(2) ^ 2;
t9644 = t9729 + t9788;
t9776 = -0.3e1 / 0.2e1 * pkin(2);
t9956 = t9745 * t10099;
t9898 = pkin(3) * t9956;
t9645 = pkin(6) * t9667;
t10519 = t9645 + t9785;
t10648 = t9708 * t9709;
t9907 = t10648 * t9716 + t10519;
t10361 = t9766 * t10758;
t10062 = t9730 * t10361;
t9955 = t9746 * t10062;
t9037 = -(t10412 + (t9308 * t9644 - t10120) * t10614 + (-t10014 + t10773) * t10828 + ((t9364 + 0.2e1 * t9293) * t9731 * t9714 + (-(t9268 + t9331) * t9746 * t9714 + (-0.2e1 * t10014 + t10773) * t9754) * t9730) * pkin(3) + (((t9776 + t10525) * t10861 + 0.2e1 * t9672 + t10703 - pkin(2)) * t10815 + (-(-t9788 + t9907 + 0.2e1 * t10164) * t9707 + (t10492 * t9596 * t9755 + t10450 * t10859) * t9731 + pkin(2) * t10703 + t9590 + t9729 + t9907) * t9754 + pkin(2) * (t10292 * t9550 - t9601 * t9707 + t9601)) * t10758) * t9424 * t9391 + (-(t9225 * t10647 + (-t9898 / 0.2e1 + t9225 * pkin(2)) * t10510 + (t9644 * t9225 + ((t9634 - 0.2e1 * t10826) * pkin(3) * t10366 - t10381) * t9745) * t9754 + pkin(2) * t9550 * t10100) * t9308 + (t9714 * t9955 + (t9225 * t9745 * t9766 + pkin(3) * t9367 - t10767) * t9754 + pkin(2) * t9239) * t10767) / ((t9484 * t9730 + t9505) * t9754 + t10029);
t10781 = t9037 * t9730;
t10022 = 0.2e1 * t10099;
t10908 = t9782 / 0.2e1 + t9783 / 0.2e1;
t9740 = t9788 / 0.2e1;
t10036 = t9740 + t9768 + t10908;
t10895 = 0.3e1 * t10952;
t10037 = t9788 + t10895;
t10255 = -t10767 / 0.2e1;
t10046 = t9745 * t10255;
t10248 = 0.2e1 * t9768 + t10515;
t9572 = t9788 + t10248;
t9253 = t9572 * t9308;
t10401 = t9754 * t9308;
t10155 = pkin(2) * t10401;
t9265 = pkin(3) * t10155;
t10399 = t9785 * t9308;
t9269 = t9714 * t10399;
t10043 = t9253 / 0.2e1 + t9269 / 0.2e1 + t9265 + t9766 * t10046;
t10065 = t9730 * t9353;
t10080 = t9602 * t10326;
t10101 = t10671 * t10758;
t10102 = t9602 * t10926 * t10758;
t10137 = t10648 * t9308;
t10145 = t10844 * t10758;
t9706 = t9731 * t9707;
t10146 = 0.2e1 * t9706 - 0.2e1 * t9731;
t10383 = t9714 * t10767;
t10176 = pkin(3) * t10383;
t10183 = t9730 * t9586;
t9784 = pkin(6) ^ 2;
t10246 = -t9784 / 0.2e1 - t9785 / 0.2e1 + t9740;
t9553 = -0.2e1 / 0.3e1 * t9768 - t9782 / 0.3e1 - t9783 / 0.3e1 + t9788;
t10252 = 0.3e1 / 0.2e1 * t9553 * t9766;
t10367 = t9716 * t10758;
t9291 = pkin(6) * t9308;
t9338 = pkin(8) * t9353;
t10538 = t9291 + t9338;
t9289 = pkin(8) * t9308;
t9290 = pkin(7) * t9308;
t10550 = (t9290 + t9289 - t9346 / 0.2e1) * t9667 + pkin(3) * t10255;
t9886 = t9786 * (-t9788 / 0.2e1 + t10908);
t10455 = (pkin(6) * t9289 + pkin(7) * t10538 + t10767 * t9886 + t10550) * t9671;
t10479 = pkin(2) * t10619;
t10624 = t9730 * t9786;
t10480 = pkin(2) * t10624;
t10483 = t9579 * t10827;
t10487 = pkin(1) * t10644;
t10493 = 0.2e1 * t10644;
t10544 = 0.2e1 * t9265 + t9269;
t10830 = pkin(1) * t9730;
t10860 = 0.2e1 * t9707;
t10863 = 0.2e1 * t9706;
t10864 = 0.2e1 * t9700;
t9648 = pkin(2) * t9671;
t9670 = t9714 * t9785;
t10898 = t9648 + t9670 - t9645;
t10911 = 0.2e1 * t9645 - t9670;
t10930 = -0.4e1 * t9706;
t9277 = pkin(6) * t10400;
t9106 = t9277 + t10550;
t9187 = t9346 - t9290;
t9157 = t9289 - t9187;
t10382 = t9745 * t10767;
t9178 = t10400 - t10382;
t9305 = pkin(1) * t9308;
t10514 = pkin(1) ^ 2 + t9784;
t9930 = t10248 + t10514;
t9549 = t9785 + t9930;
t9571 = pkin(1) * t10648;
t9701 = t9785 + t9788;
t9702 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t9715 = t9755 * t9716;
t9780 = 0.2e1 * pkin(2);
t10245 = t9788 - t10515;
t9349 = pkin(1) * t9353;
t9339 = pkin(7) * t9353;
t10040 = t9268 + t9339 + t10538;
t9919 = t10040 * t9746;
t10905 = t9919 + t9349;
t9820 = t9746 * (pkin(6) * t10137 + (((t9346 - 0.2e1 * t9289) * pkin(7) + pkin(6) * t9338) * t9745 + t10381 + t10245 * t10403) * pkin(3)) + (t9349 + 0.2e1 * t9919) * t9648 + t10905 * t9670;
t10167 = t9602 * t9293;
t10123 = t9746 * t9353;
t9328 = pkin(1) * t10123;
t9850 = (t9328 + t10040) * t9671 + t10167;
t10507 = pkin(6) * t10815;
t9862 = -t10486 * t10815 + (t10698 + (t9603 * t10821 + t9745 * t9788 - t10507) * t9730) * t9755 + t9730 * t10483;
t9878 = t10246 + t10952;
t9879 = t9785 + t10514 - t10895;
t10124 = t9745 * t9353;
t9904 = t10124 * t10829;
t9910 = t9253 - t10120;
t9913 = t9373 * t9587 + t9157;
t9922 = 0.2e1 * t9648 + t9670;
t9929 = t9727 + t9785 + t10245;
t9939 = t9602 * t10068;
t9954 = t9766 * t10102;
t9016 = (0.1e1 / ((t9542 * t9754 + t10483) * t9730 + t9874) * (t10758 * (-(t10037 + t9922) * t9715 * t10101 * t10684 + (t9954 * t10930 + (-0.3e1 * (t9553 + t9922) * t9955 - 0.2e1 * t10455 + (-0.2e1 * t9106 + t10176) * pkin(2)) * t9707 + ((t10120 + t10137 + t10544) * t10830 + 0.4e1 * t9954) * t9731 + 0.2e1 * (t9746 * t10252 + t9571 + t9922 * (t9702 * t9746 + pkin(1))) * t10366 - pkin(2) * t10176 + 0.2e1 * t10455 + t9106 * t9780) * t9716 + (t9820 * t9707 + ((t10046 + t10400) * t9685 + t10043) * t10926 * t10493 + (((t9878 + t10898) * t10860 + 0.4e1 * t9590 + t9879 + t10911) * t10684 + t10080 * t10146) * t10758 - t9820) * t9755 + (t10102 * t10863 + ((t10246 + t10898) * t10022 + t9850) * t9707 + (-0.2e1 * t10102 + t9178 * t10830 + (t9308 * t9922 + t9910) * t10642) * t9731 + (t10864 + (t9549 + t10911) * t9746) * t10366 - t9850) * t9766) + ((t10487 * t10710 - 0.2e1 * t9939) * t10367 + (0.2e1 * ((t9670 / 0.2e1 + t9648 + t9590 + t10036) * t9373 + t10043) * t10684 + t10080 * t10101) * t9755 + ((t9700 + (t9572 + t9922) * t9746) * t9766 * t9373 + t9579 * (t9910 + t10544)) * t9730 + t9939 * t10758) * t9308) + ((t9745 * t10183 + ((t9645 + t9929) * t9754 + (t9601 + t10815) * pkin(2)) * t10671) * t10367 + ((pkin(2) * t10065 + t10101 * t9579) * t10815 + ((t9353 * t9701 - t9667 * t9913) * t9730 + t9582 * pkin(2) * t10101) * t9754 - (t9745 * t9913 - t10767) * t10828 - (-t10364 * t10844 * t9601 + t9904) * t9766) * t9755 + t10383 * t10830 + (t9766 * t9587 * t10145 + (t10480 * t9579 + t10486 * t9745) * t10767) * t9754 - (-t9746 * t10767 + (t9157 * t9746 + t9373 * t9579 + t9305) * t9745) * t10625 + t9904 * t10826) / ((-pkin(1) * t10479 + t9542 * t9730) * t9754 + t9862) * t10767) * t9786;
t10807 = pkin(7) * t9016;
t9974 = t9353 * t9308;
t9900 = pkin(2) * t9974;
t9193 = -0.2e1 * t9900;
t9558 = pkin(7) * t9755 - t10826;
t10948 = t10781 * t9558 + t10807 + (pkin(2) * t10532 + pkin(7) * t10099) * t9373 + t9193;
t10472 = pkin(3) * t10640;
t10618 = t9731 * t9748;
t9876 = t9730 * t9551;
t9822 = -pkin(3) * t10618 + t9876;
t9392 = -(t9470 + (t9497 * t9730 + t10723) * t9749) * t10814 + (t10884 * t10472 + (-pkin(2) * t9476 + t10334) * t9758 + (-pkin(2) * t10723 - t9476 * t9766) * t9749 + t9822 * t9497) * t9757 - (-t10884 * t9730 + t9497 * t9731) * t10825;
t9500 = t9546 * t10825;
t10630 = t9730 * t9758;
t10457 = pkin(6) * t10630;
t10617 = t9731 * t9749;
t10485 = pkin(1) * t10617;
t9519 = t10457 + t10485;
t10028 = -t9519 * t10814 + t9730 * t9500;
t9543 = pkin(1) * t9668 - pkin(6) * t10558;
t9606 = t9668 - pkin(6);
t9488 = t9606 * t9683 + t9543;
t9506 = t9551 * t10829;
t9429 = (t9488 * t9730 + t9506) * t9757 + t10028;
t9425 = 0.1e1 / t9429;
t10757 = t9392 * t9425;
t10355 = t9749 * t10757;
t10093 = t9730 * t10355;
t10353 = t9758 * t10757;
t9368 = t9730 * t10353;
t10531 = t9368 - 0.2e1 * t9355;
t10394 = t9749 * t9310;
t10130 = t9748 * t10394;
t10013 = pkin(2) * t10130;
t10356 = t9748 * t10757;
t10094 = t9730 * t10356;
t10766 = t9362 * t9450;
t10378 = t9766 * t10766;
t10115 = t9748 * t10378;
t10161 = pkin(2) * t9569;
t10290 = t9730 * t10618;
t10357 = t9730 * t10757;
t10396 = t9731 * t9310;
t9717 = t9757 * t9718;
t10646 = t9717 * t9785;
t10673 = t9655 * t9707;
t10837 = t9720 - 0.1e1;
t10411 = (t10396 + (t10837 - t10673) * t10757) * t10646;
t10447 = (t9668 + t9774) * t10824;
t10701 = t9583 * t9758;
t9176 = t9748 * t10392 - t10766;
t10772 = t9176 * t9758;
t9374 = t9731 * t10757;
t9228 = t9374 + t9310;
t9241 = t9368 - t9355;
t10395 = t9748 * t9310;
t9270 = pkin(3) * t10395;
t9298 = pkin(2) * t9310;
t9332 = t9766 * t9355;
t10021 = -0.2e1 * t10093;
t9598 = t9668 + t9775;
t9365 = t9598 * t10021;
t9426 = 0.1e1 / t9429 ^ 2;
t9485 = -pkin(6) * t10521 + t10922 * t9668;
t9591 = pkin(1) * t10558;
t9949 = t9748 * t10093;
t9897 = pkin(3) * t9949;
t9646 = pkin(6) * t9668;
t10518 = t9646 + t9785;
t9906 = t10648 * t9720 + t10518;
t10352 = t9766 * t10757;
t10092 = t9730 * t10352;
t9948 = t9749 * t10092;
t9038 = -(t10411 + (t9310 * t9644 - t10115) * t10611 + (-t10013 + t10772) * t10828 + ((t9365 + 0.2e1 * t9298) * t9731 * t9718 + (-(t9270 + t9332) * t9749 * t9718 + (-0.2e1 * t10013 + t10772) * t9757) * t9730) * pkin(3) + (((t9776 + t10524) * t10861 + 0.2e1 * t9675 + t10701 - pkin(2)) * t10814 + (-(-t9788 + t9906 + 0.2e1 * t10161) * t9707 + (t10492 * t9598 * t9758 + t10447 * t10859) * t9731 + pkin(2) * t10701 + t9591 + t9729 + t9906) * t9757 + pkin(2) * (t10290 * t9551 - t9604 * t9707 + t9604)) * t10757) * t9426 * t9392 + (-(t9228 * t10646 + (-t9897 / 0.2e1 + t9228 * pkin(2)) * t10509 + (t9644 * t9228 + ((t9635 - 0.2e1 * t10824) * pkin(3) * t10357 - t10378) * t9748) * t9757 + pkin(2) * t9551 * t10094) * t9310 + (t9718 * t9948 + (t9228 * t9748 * t9766 + pkin(3) * t9368 - t10766) * t9757 + pkin(2) * t9241) * t10766) / ((t9485 * t9730 + t9506) * t9757 + t10028);
t10778 = t9038 * t9730;
t10020 = 0.2e1 * t10093;
t10254 = -t10766 / 0.2e1;
t10045 = t9748 * t10254;
t9254 = t9572 * t9310;
t10393 = t9757 * t9310;
t10153 = pkin(2) * t10393;
t9266 = pkin(3) * t10153;
t10391 = t9785 * t9310;
t9271 = t9718 * t10391;
t10042 = t9254 / 0.2e1 + t9271 / 0.2e1 + t9266 + t9766 * t10045;
t10064 = t9730 * t9355;
t10078 = t9605 * t10325;
t10095 = t10671 * t10757;
t10096 = t9605 * t10925 * t10757;
t10132 = t10648 * t9310;
t10144 = t10844 * t10757;
t10380 = t9718 * t10766;
t10175 = pkin(3) * t10380;
t10358 = t9720 * t10757;
t9296 = pkin(6) * t9310;
t9342 = pkin(8) * t9355;
t10537 = t9296 + t9342;
t9294 = pkin(8) * t9310;
t9295 = pkin(7) * t9310;
t10549 = (t9295 + t9294 - t9347 / 0.2e1) * t9668 + pkin(3) * t10254;
t10454 = (pkin(6) * t9294 + pkin(7) * t10537 + t10766 * t9886 + t10549) * t9674;
t10478 = pkin(2) * t10617;
t10482 = t9580 * t10825;
t10543 = 0.2e1 * t9266 + t9271;
t9649 = pkin(2) * t9674;
t9673 = t9718 * t9785;
t10897 = t9649 + t9673 - t9646;
t10910 = 0.2e1 * t9646 - t9673;
t9278 = pkin(6) * t10392;
t9107 = t9278 + t10549;
t9188 = t9347 - t9295;
t9158 = t9294 - t9188;
t10379 = t9748 * t10766;
t9179 = t10392 - t10379;
t9306 = pkin(1) * t9310;
t9719 = t9758 * t9720;
t9350 = pkin(1) * t9355;
t9344 = pkin(7) * t9355;
t10039 = t9270 + t9344 + t10537;
t9918 = t10039 * t9749;
t10906 = t9918 + t9350;
t9819 = t9749 * (pkin(6) * t10132 + (((t9347 - 0.2e1 * t9294) * pkin(7) + pkin(6) * t9342) * t9748 + t10378 + t10245 * t10395) * pkin(3)) + (t9350 + 0.2e1 * t9918) * t9649 + t10906 * t9673;
t10166 = t9605 * t9298;
t10118 = t9749 * t9355;
t9329 = pkin(1) * t10118;
t9849 = (t9329 + t10039) * t9674 + t10166;
t10506 = pkin(6) * t10814;
t9861 = -t10485 * t10814 + (t10697 + (t9606 * t10820 + t9748 * t9788 - t10506) * t9730) * t9758 + t9730 * t10482;
t10119 = t9748 * t9355;
t9903 = t10119 * t10829;
t9909 = t9254 - t10115;
t9912 = t9374 * t9588 + t9158;
t9921 = 0.2e1 * t9649 + t9673;
t9938 = t9605 * t10067;
t9947 = t9766 * t10096;
t9017 = (0.1e1 / ((t9543 * t9757 + t10482) * t9730 + t9873) * (t10757 * (-(t10037 + t9921) * t9719 * t10095 * t10681 + (t9947 * t10930 + (-0.3e1 * (t9553 + t9921) * t9948 - 0.2e1 * t10454 + (-0.2e1 * t9107 + t10175) * pkin(2)) * t9707 + ((t10115 + t10132 + t10543) * t10830 + 0.4e1 * t9947) * t9731 + 0.2e1 * (t9749 * t10252 + t9571 + t9921 * (t9702 * t9749 + pkin(1))) * t10357 - pkin(2) * t10175 + 0.2e1 * t10454 + t9107 * t9780) * t9720 + (t9819 * t9707 + ((t10045 + t10392) * t9686 + t10042) * t10925 * t10493 + (((t9878 + t10897) * t10860 + 0.4e1 * t9591 + t9879 + t10910) * t10681 + t10078 * t10146) * t10757 - t9819) * t9758 + t9766 * (t10096 * t10863 + ((t10246 + t10897) * t10020 + t9849) * t9707 + (-0.2e1 * t10096 + t9179 * t10830 + (t9310 * t9921 + t9909) * t10639) * t9731 + (t10864 + (t9549 + t10910) * t9749) * t10357 - t9849)) + ((t10487 * t10709 - 0.2e1 * t9938) * t10358 + (0.2e1 * ((t9673 / 0.2e1 + t9649 + t9591 + t10036) * t9374 + t10042) * t10681 + t10078 * t10095) * t9758 + ((t9700 + (t9572 + t9921) * t9749) * t9766 * t9374 + (t9909 + t10543) * t9580) * t9730 + t9938 * t10757) * t9310) + ((t9748 * t10183 + ((t9646 + t9929) * t9757 + (t9604 + t10814) * pkin(2)) * t10671) * t10358 + ((pkin(2) * t10064 + t10095 * t9580) * t10814 + ((t9355 * t9701 - t9668 * t9912) * t9730 + t9583 * pkin(2) * t10095) * t9757 - (t9748 * t9912 - t10766) * t10828 - (-t10355 * t10844 * t9604 + t9903) * t9766) * t9758 + t10380 * t10830 + (t9766 * t9588 * t10144 + (t10480 * t9580 + t10485 * t9748) * t10766) * t9757 - (-t9749 * t10766 + (t9158 * t9749 + t9374 * t9580 + t9306) * t9748) * t10625 + t9903 * t10824) / ((-pkin(1) * t10478 + t9543 * t9730) * t9757 + t9861) * t10766) * t9786;
t10806 = pkin(7) * t9017;
t9972 = t9355 * t9310;
t9901 = pkin(2) * t9972;
t9195 = -0.2e1 * t9901;
t9560 = pkin(7) * t9758 - t10824;
t10947 = t10778 * t9560 + t10806 + (pkin(2) * t10531 + pkin(7) * t10093) * t9374 + t9195;
t10471 = pkin(3) * t10637;
t10616 = t9731 * t9751;
t9875 = t9730 * t9552;
t9821 = -pkin(3) * t10616 + t9875;
t9393 = -(t9471 + (t9498 * t9730 + t10721) * t9752) * t10813 + (t10885 * t10471 + (-pkin(2) * t9477 + t10333) * t9761 + (-pkin(2) * t10721 - t9477 * t9766) * t9752 + t9821 * t9498) * t9760 - (-t10885 * t9730 + t9498 * t9731) * t10823;
t9501 = t9547 * t10823;
t10627 = t9730 * t9761;
t10456 = pkin(6) * t10627;
t10615 = t9731 * t9752;
t10484 = pkin(1) * t10615;
t9517 = t10456 + t10484;
t10027 = -t9517 * t10813 + t9730 * t9501;
t9544 = pkin(1) * t9669 - pkin(6) * t10557;
t9609 = t9669 - pkin(6);
t9489 = t9609 * t9684 + t9544;
t9507 = t9552 * t10829;
t9427 = (t9489 * t9730 + t9507) * t9760 + t10027;
t9421 = 0.1e1 / t9427;
t10756 = t9393 * t9421;
t10346 = t9752 * t10756;
t10086 = t9730 * t10346;
t10344 = t9761 * t10756;
t9369 = t9730 * t10344;
t10530 = t9369 - 0.2e1 * t9357;
t10387 = t9752 * t9312;
t10125 = t9751 * t10387;
t10012 = pkin(2) * t10125;
t10347 = t9751 * t10756;
t10087 = t9730 * t10347;
t10765 = t9363 * t9452;
t10375 = t9766 * t10765;
t10110 = t9751 * t10375;
t10158 = pkin(2) * t9570;
t10288 = t9730 * t10616;
t10348 = t9730 * t10756;
t10271 = t9731 * t9312;
t9721 = t9760 * t9722;
t10645 = t9721 * t9785;
t10672 = t9656 * t9707;
t10834 = t9724 - 0.1e1;
t10410 = (t10271 + (t10834 - t10672) * t10756) * t10645;
t10444 = (t9669 + t9774) * t10822;
t10699 = t9584 * t9761;
t9177 = t9751 * t10385 - t10765;
t10771 = t9177 * t9761;
t9375 = t9731 * t10756;
t9231 = t9375 + t9312;
t9243 = t9369 - t9357;
t10388 = t9751 * t9312;
t9272 = pkin(3) * t10388;
t9302 = pkin(2) * t9312;
t9333 = t9766 * t9357;
t10019 = -0.2e1 * t10086;
t9600 = t9669 + t9775;
t9366 = t9600 * t10019;
t9422 = 0.1e1 / t9427 ^ 2;
t9486 = -pkin(6) * t10520 + t10921 * t9669;
t9592 = pkin(1) * t10557;
t9942 = t9751 * t10086;
t9896 = pkin(3) * t9942;
t9647 = pkin(6) * t9669;
t10517 = t9647 + t9785;
t9905 = t10648 * t9724 + t10517;
t10343 = t9766 * t10756;
t10085 = t9730 * t10343;
t9941 = t9752 * t10085;
t9039 = -(t10410 + (t9312 * t9644 - t10110) * t10608 + (-t10012 + t10771) * t10828 + ((t9366 + 0.2e1 * t9302) * t9731 * t9722 + (-(t9272 + t9333) * t9752 * t9722 + (-0.2e1 * t10012 + t10771) * t9760) * t9730) * pkin(3) + (((t9776 + t10523) * t10861 + 0.2e1 * t9678 + t10699 - pkin(2)) * t10813 + (-(-t9788 + t9905 + 0.2e1 * t10158) * t9707 + (t10492 * t9600 * t9761 + t10444 * t10859) * t9731 + pkin(2) * t10699 + t9592 + t9729 + t9905) * t9760 + pkin(2) * (t10288 * t9552 - t9607 * t9707 + t9607)) * t10756) * t9422 * t9393 + (-(t9231 * t10645 + (-t9896 / 0.2e1 + t9231 * pkin(2)) * t10508 + (t9644 * t9231 + ((t9636 - 0.2e1 * t10822) * pkin(3) * t10348 - t10375) * t9751) * t9760 + pkin(2) * t9552 * t10087) * t9312 + (t9722 * t9941 + (t9231 * t9751 * t9766 + pkin(3) * t9369 - t10765) * t9760 + pkin(2) * t9243) * t10765) / ((t9486 * t9730 + t9507) * t9760 + t10027);
t10775 = t9039 * t9730;
t10018 = 0.2e1 * t10086;
t10253 = -t10765 / 0.2e1;
t10044 = t9751 * t10253;
t9255 = t9572 * t9312;
t10386 = t9760 * t9312;
t10151 = pkin(2) * t10386;
t9267 = pkin(3) * t10151;
t10384 = t9785 * t9312;
t9273 = t9722 * t10384;
t10041 = t9255 / 0.2e1 + t9273 / 0.2e1 + t9267 + t9766 * t10044;
t10063 = t9730 * t9357;
t10076 = t9608 * t10324;
t10088 = t10671 * t10756;
t10089 = t9608 * t10924 * t10756;
t10127 = t10648 * t9312;
t10143 = t10844 * t10756;
t10377 = t9722 * t10765;
t10174 = pkin(3) * t10377;
t10349 = t9724 * t10756;
t9300 = pkin(6) * t9312;
t9343 = pkin(8) * t9357;
t10536 = t9300 + t9343;
t9299 = pkin(7) * t9312;
t9304 = pkin(8) * t9312;
t10548 = (t9299 + t9304 - t9348 / 0.2e1) * t9669 + pkin(3) * t10253;
t10453 = (pkin(7) * t10536 + pkin(8) * t9300 + t10765 * t9886 + t10548) * t9677;
t10477 = pkin(2) * t10615;
t10481 = t9581 * t10823;
t10542 = 0.2e1 * t9267 + t9273;
t9650 = pkin(2) * t9677;
t9676 = t9722 * t9785;
t10896 = t9650 + t9676 - t9647;
t10909 = 0.2e1 * t9647 - t9676;
t9279 = pkin(6) * t10385;
t9108 = t9279 + t10548;
t9189 = t9348 - t9299;
t9159 = t9304 - t9189;
t10376 = t9751 * t10765;
t9180 = t10385 - t10376;
t9303 = pkin(1) * t9312;
t9723 = t9761 * t9724;
t9351 = pkin(1) * t9357;
t9345 = pkin(7) * t9357;
t10038 = t9272 + t9345 + t10536;
t9917 = t10038 * t9752;
t10907 = t9917 + t9351;
t9818 = t9752 * (pkin(6) * t10127 + (((t9348 - 0.2e1 * t9304) * pkin(7) + pkin(6) * t9343) * t9751 + t10375 + t10245 * t10388) * pkin(3)) + (t9351 + 0.2e1 * t9917) * t9650 + t10907 * t9676;
t10165 = t9608 * t9302;
t10113 = t9752 * t9357;
t9330 = pkin(1) * t10113;
t9848 = (t9330 + t10038) * t9677 + t10165;
t10505 = pkin(6) * t10813;
t9860 = -t10484 * t10813 + (t10696 + (t9609 * t10819 + t9751 * t9788 - t10505) * t9730) * t9761 + t9730 * t10481;
t10114 = t9751 * t9357;
t9902 = t10114 * t10829;
t9908 = t9255 - t10110;
t9911 = t9375 * t9589 + t9159;
t9920 = 0.2e1 * t9650 + t9676;
t9937 = t9608 * t10066;
t9940 = t9766 * t10089;
t9018 = (0.1e1 / ((t9544 * t9760 + t10481) * t9730 + t9872) * (t10756 * (-(t10037 + t9920) * t9723 * t10088 * t10678 + (t9940 * t10930 + (-0.3e1 * (t9553 + t9920) * t9941 - 0.2e1 * t10453 + (-0.2e1 * t9108 + t10174) * pkin(2)) * t9707 + ((t10110 + t10127 + t10542) * t10830 + 0.4e1 * t9940) * t9731 + 0.2e1 * (t9752 * t10252 + t9571 + t9920 * (t9702 * t9752 + pkin(1))) * t10348 - pkin(2) * t10174 + 0.2e1 * t10453 + t9108 * t9780) * t9724 + (t9818 * t9707 + ((t10044 + t10385) * t9687 + t10041) * t10924 * t10493 + (((t9878 + t10896) * t10860 + 0.4e1 * t9592 + t9879 + t10909) * t10678 + t10076 * t10146) * t10756 - t9818) * t9761 + t9766 * (t10089 * t10863 + ((t10246 + t10896) * t10018 + t9848) * t9707 + (-0.2e1 * t10089 + t9180 * t10830 + (t9312 * t9920 + t9908) * t10636) * t9731 + (t10864 + (t9549 + t10909) * t9752) * t10348 - t9848)) + ((t10487 * t10708 - 0.2e1 * t9937) * t10349 + (0.2e1 * ((t9676 / 0.2e1 + t9650 + t9592 + t10036) * t9375 + t10041) * t10678 + t10076 * t10088) * t9761 + ((t9700 + (t9572 + t9920) * t9752) * t9766 * t9375 + (t9908 + t10542) * t9581) * t9730 + t9937 * t10756) * t9312) + ((t9751 * t10183 + ((t9647 + t9929) * t9760 + (t9607 + t10813) * pkin(2)) * t10671) * t10349 + ((pkin(2) * t10063 + t10088 * t9581) * t10813 + ((t9357 * t9701 - t9669 * t9911) * t9730 + t9584 * pkin(2) * t10088) * t9760 - (t9751 * t9911 - t10765) * t10828 - (-t10346 * t10844 * t9607 + t9902) * t9766) * t9761 + t10377 * t10830 + (t9766 * t9589 * t10143 + (t10480 * t9581 + t10484 * t9751) * t10765) * t9760 - (-t9752 * t10765 + (t9159 * t9752 + t9375 * t9581 + t9303) * t9751) * t10625 + t9902 * t10822) / ((-pkin(1) * t10477 + t9544 * t9730) * t9760 + t9860) * t10765) * t9786;
t10805 = pkin(7) * t9018;
t9970 = t9357 * t9312;
t9899 = pkin(2) * t9970;
t9194 = -0.2e1 * t9899;
t9562 = pkin(7) * t9761 - t10822;
t10946 = t10775 * t9562 + t10805 + (pkin(2) * t10530 + pkin(7) * t10086) * t9375 + t9194;
t10291 = t9730 * t10619;
t8995 = t9037 * t10633 + t9016;
t9388 = t9391 ^ 2;
t9379 = t9388 * t9424;
t10945 = -t10291 * t9379 - t8995;
t10289 = t9730 * t10617;
t8996 = t9038 * t10630 + t9017;
t9389 = t9392 ^ 2;
t9380 = t9389 * t9426;
t10944 = -t10289 * t9380 - t8996;
t10287 = t9730 * t10615;
t8997 = t9039 * t10627 + t9018;
t9390 = t9393 ^ 2;
t9381 = t9390 * t9422;
t10943 = -t10287 * t9381 - t8997;
t10173 = pkin(6) * t10291;
t10716 = (pkin(7) * t10599 - pkin(2) + t9672) * t9707;
t10121 = t9755 * t9353;
t10011 = pkin(2) * t10121;
t10083 = t10918 * t9601 * t10758;
t10243 = pkin(1) * t9293;
t10808 = pkin(6) * t9766;
t10811 = pkin(6) * t9755;
t10818 = pkin(3) * t9601;
t10902 = t9644 * t9746 + t9700;
t10513 = t9788 - t9785;
t9585 = t9729 + t10513;
t9689 = pkin(1) * t9755;
t9622 = t9689 + t9780;
t9779 = 0.3e1 * pkin(2);
t10415 = (-t10412 - ((t9308 * t9622 + t9364) * t9731 + (-t10011 - t10905) * t9730 + ((-t9672 + (-t10559 + pkin(1)) * t9755 + t9779) * t9707 + t10918) * t10758) * t10815 + ((-t9755 * t10243 + t9587 * t10382 - (t9590 + t9644) * t9308) * t9731 + (t10167 * t9746 - t10811 * t9178) * t9730 + (-(pkin(1) * t9682 + t10818 * t9716 + t9585 + t9590 - t9645) * t9707 + (((t9685 - t9766) * t9667 - t10808) * t9755 + 0.3e1 * t10450) * t10644 + t10652 * t10818) * t10758) * t9754 - t9707 * t10083 - (pkin(1) * t9895 - t10902) * t9731 * t10100 + t9175 * t9545 * t9730 + t10083) * t9308;
t10005 = pkin(2) * t10062;
t10179 = pkin(2) * t10366;
t10032 = 0.2e1 * t10179;
t10136 = t9713 * t10399;
t10405 = t9730 * t9308;
t10182 = pkin(2) * t10405;
t10186 = pkin(1) * t10400;
t10192 = -(pkin(2) * t10022 + t9291 + t9331) * t9716 + t9291;
t10198 = 0.2e1 * t10361;
t10234 = 0.2e1 * t10758;
t10464 = pkin(6) * t10758;
t10237 = pkin(2) * t10464;
t9292 = pkin(3) * t9308;
t10240 = pkin(2) * t9292;
t10247 = t9784 / 0.3e1 - t9788 / 0.3e1 + t9785;
t10298 = t9746 * t10648;
t10451 = pkin(3) * t10955;
t10512 = -0.2e1 * t9700;
t10526 = t10648 / 0.3e1 - 0.2e1 / 0.3e1 * t9785;
t9325 = pkin(1) * t10065;
t10535 = t10758 * t9780 + t9325;
t10770 = (-t9293 + t9898) * t9716;
t10862 = 0.3e1 * t9706;
t10869 = 0.2e1 * pkin(6);
t10870 = -0.2e1 * pkin(6);
t10873 = 0.2e1 * pkin(1);
t10929 = 0.2e1 * t9746;
t9184 = pkin(3) * t10767 - t9277;
t9274 = pkin(1) * t10402;
t9286 = pkin(2) * t9291;
t9548 = 0.3e1 * t9785 + t9930;
t9567 = -t10648 / 0.2e1;
t9640 = -t9784 + t10513;
t9781 = -0.2e1 * pkin(1);
t9916 = 0.2e1 * t9715 * t10062;
t9829 = pkin(3) * (pkin(6) * t10023 + t9293) + t9916 * t10827;
t9969 = t9746 * t10121;
t9993 = -t10507 * t9755 + t9499;
t10429 = (((-0.4e1 / 0.3e1 + t9716) * t10647 + ((-0.2e1 / 0.3e1 * t9645 + t10526) * t9716 + 0.2e1 / 0.3e1 * t10164 + 0.4e1 / 0.3e1 * t9645 + t10247) * t9754 + (0.4e1 / 0.3e1 * t10815 - 0.2e1 / 0.3e1 * t9601) * t10918) * t10758 * t10862 + (t9654 * t10136 - (t10770 + (t9305 - t10955) * t9755 + 0.3e1 * t9293 - 0.4e1 * t9602 * t10099) * t10815 + ((t10062 * t10870 - t10243) * t9755 + (pkin(6) * t10032 - t10186) * t9746 - t9585 * t9308 + (-t9292 * t9716 + (t9916 + (pkin(2) * t10123 - 0.4e1 * t10062) * t9755 + (t9349 + t10032) * t10929 + 0.2e1 * t9331 + t10192) * t9745) * pkin(3)) * t9754 + ((-t10099 * t10648 - t9286) * t9745 - t10240) * t9716 + ((t9184 * t9746 - 0.2e1 * t10005) * t9745 - t10451) * t9755 + (t10099 * t9640 + t9286) * t9745 + t9829) * t9707 + ((-0.3e1 * t9716 + 0.3e1) * t10647 * t10758 - (t9654 * t9325 + (-t10011 + (-t9291 - 0.2e1 * t9331 - 0.2e1 * t9268) * t9746) * t9730 + ((t10873 + 0.4e1 * t10559) * t9755 + (0.4e1 * t9716 - 0.2e1) * pkin(2)) * t10758) * t10815 + (0.2e1 * (t9567 + t10519) * t10367 + (((t9274 - t9181) * t9667 + t9184) * t9730 - t9579 * pkin(2) * t10234) * t9755 + (0.3e1 * t10182 * t9746 - 0.4e1 * t10464) * t9667 + (pkin(6) * t10182 + t10361 * t9781) * t9746 - t9548 * t10758) * t9754 + ((-t10186 * t9730 + 0.2e1 * t10237) * t9745 + pkin(3) * t10535) * t9716 + ((pkin(1) * t10182 + pkin(6) * t10198) * t9745 + pkin(3) * t10198) * t10599 + (t10902 * t10405 - 0.2e1 * t10237) * t9745 - (t10065 * t10559 + t10535) * pkin(3)) * t9731 - t10840 * t10136 - (-t10770 - t9293 + (t9181 * t9755 + (t10869 + t9667) * t10366) * t9746) * t10815 - (-t10840 * t9292 + (pkin(2) * t9969 + t9328 + t9331 + (t9766 * t9715 - (t9766 + t9685) * t9755) * t9730 * t10234 + t10192) * t9745) * t9671 + ((t9286 + (t10298 + t10512) * t10366) * t9745 + t10240) * t9716 + (((pkin(1) * t10032 - t9184) * t9746 + 0.2e1 * t10005) * t9745 + t10451) * t9755 + (-t9286 + (t9549 * t9746 + t10864) * t10366) * t9745 - t9829) / (t9478 + (t9487 * t9754 + t9993) * t9730) * t9391;
t10613 = t9731 * t9755;
t10286 = t9730 * t10613;
t10314 = t9746 * t10671;
t10602 = t9745 * t9754;
t10854 = 0.2e1 * t9745;
t9688 = pkin(1) * t9716;
t9773 = -pkin(7) / 0.2e1;
t9703 = t9773 - pkin(8) / 0.2e1;
t9055 = ((pkin(1) * t10135 + t9175) * t9754 - (t9689 + pkin(2)) * t9353) * t9731 + ((t10382 - t9181) * t9746 - t9305 + (t9545 * t9714 + (pkin(6) * t10602 - pkin(2)) * t9755) * t9308) * t9730 + ((-(-t9682 + t9688 + t9781 - t10598) * t10644 - t10314 * t10811) * t9714 + (t9601 * t10286 + (t9703 * t9716 + t10476 / 0.2e1 + t9587) * t9707 * t10854 - t9490 * t9745) * t9754 + (t9688 - t9579) * t10644 + t10844 * t9602 * t10599) * t10758;
t9020 = (-t10767 * t9055 - t10415 - t10429) * t9423;
t10803 = pkin(7) * t9020;
t9034 = t9731 * t9037;
t9307 = t9319 ^ 2 / t9445 ^ 2;
t9679 = pkin(7) * t9746;
t9613 = t9679 + pkin(1);
t9936 = t9373 * t9308;
t10942 = -t9034 * t9619 - t10803 + (0.2e1 * t9936 + t9307) * pkin(2) + (t9613 * t9755 - t10173 - t10716 + t9672) * t9379;
t10172 = pkin(6) * t10289;
t10715 = (pkin(7) * t10589 - pkin(2) + t9675) * t9707;
t10116 = t9758 * t9355;
t10009 = pkin(2) * t10116;
t10082 = t10919 * t9604 * t10757;
t10242 = pkin(1) * t9298;
t10810 = pkin(6) * t9758;
t10817 = pkin(3) * t9604;
t10903 = t9644 * t9749 + t9700;
t9691 = pkin(1) * t9758;
t9623 = t9691 + t9780;
t10414 = (-t10411 - ((t9310 * t9623 + t9365) * t9731 + (-t10009 - t10906) * t9730 + ((-t9675 + (-t10558 + pkin(1)) * t9758 + t9779) * t9707 + t10919) * t10757) * t10814 + ((-t9758 * t10242 + t9588 * t10379 - (t9591 + t9644) * t9310) * t9731 + (t10166 * t9749 - t10810 * t9179) * t9730 + (-(pkin(1) * t9683 + t10817 * t9720 + t9585 + t9591 - t9646) * t9707 + (((t9686 - t9766) * t9668 - t10808) * t9758 + 0.3e1 * t10447) * t10644 + t10651 * t10817) * t10757) * t9757 - t9707 * t10082 - (pkin(1) * t9894 - t10903) * t9731 * t10094 + t9176 * t9546 * t9730 + t10082) * t9310;
t10004 = pkin(2) * t10092;
t10178 = pkin(2) * t10357;
t10031 = 0.2e1 * t10178;
t10131 = t9717 * t10391;
t10397 = t9730 * t9310;
t10181 = pkin(2) * t10397;
t10185 = pkin(1) * t10392;
t10191 = -(pkin(2) * t10020 + t9296 + t9332) * t9720 + t9296;
t10197 = 0.2e1 * t10352;
t10233 = 0.2e1 * t10757;
t10463 = pkin(6) * t10757;
t10236 = pkin(2) * t10463;
t9297 = pkin(3) * t9310;
t10239 = pkin(2) * t9297;
t10297 = t9749 * t10648;
t10448 = pkin(3) * t10954;
t9326 = pkin(1) * t10064;
t10534 = t10757 * t9780 + t9326;
t10769 = (-t9298 + t9897) * t9720;
t10928 = 0.2e1 * t9749;
t9185 = pkin(3) * t10766 - t9278;
t9275 = pkin(1) * t10394;
t9287 = pkin(2) * t9296;
t9915 = 0.2e1 * t9719 * t10092;
t9828 = pkin(3) * (pkin(6) * t10021 + t9298) + t9915 * t10825;
t9968 = t9749 * t10116;
t9992 = -t10506 * t9758 + t9500;
t10428 = (((t9720 - 0.4e1 / 0.3e1) * t10646 + ((-0.2e1 / 0.3e1 * t9646 + t10526) * t9720 + 0.2e1 / 0.3e1 * t10161 + 0.4e1 / 0.3e1 * t9646 + t10247) * t9757 + (0.4e1 / 0.3e1 * t10814 - 0.2e1 / 0.3e1 * t9604) * t10919) * t10757 * t10862 + (t9655 * t10131 - (t10769 + (t9306 - t10954) * t9758 + 0.3e1 * t9298 - 0.4e1 * t9605 * t10093) * t10814 + ((t10092 * t10870 - t10242) * t9758 + (pkin(6) * t10031 - t10185) * t9749 - t9585 * t9310 + (-t9297 * t9720 + (t9915 + (pkin(2) * t10118 - 0.4e1 * t10092) * t9758 + (t9350 + t10031) * t10928 + 0.2e1 * t9332 + t10191) * t9748) * pkin(3)) * t9757 + ((-t10093 * t10648 - t9287) * t9748 - t10239) * t9720 + ((t9185 * t9749 - 0.2e1 * t10004) * t9748 - t10448) * t9758 + (t10093 * t9640 + t9287) * t9748 + t9828) * t9707 + ((-0.3e1 * t9720 + 0.3e1) * t10646 * t10757 - (t9655 * t9326 + (-t10009 + (-t9296 - 0.2e1 * t9332 - 0.2e1 * t9270) * t9749) * t9730 + ((t10873 + 0.4e1 * t10558) * t9758 + (0.4e1 * t9720 - 0.2e1) * pkin(2)) * t10757) * t10814 + (0.2e1 * (t9567 + t10518) * t10358 + (((t9275 - t9182) * t9668 + t9185) * t9730 - t9580 * pkin(2) * t10233) * t9758 + (0.3e1 * t10181 * t9749 - 0.4e1 * t10463) * t9668 + (pkin(6) * t10181 + t10352 * t9781) * t9749 - t9548 * t10757) * t9757 + ((-t10185 * t9730 + 0.2e1 * t10236) * t9748 + pkin(3) * t10534) * t9720 + ((pkin(1) * t10181 + pkin(6) * t10197) * t9748 + pkin(3) * t10197) * t10589 + (t10903 * t10397 - 0.2e1 * t10236) * t9748 - (t10064 * t10558 + t10534) * pkin(3)) * t9731 - t10837 * t10131 - (-t10769 - t9298 + (t9182 * t9758 + (t10869 + t9668) * t10357) * t9749) * t10814 - (-t10837 * t9297 + (pkin(2) * t9968 + t9329 + t9332 + (t9766 * t9719 - (t9766 + t9686) * t9758) * t9730 * t10233 + t10191) * t9748) * t9674 + ((t9287 + (t10297 + t10512) * t10357) * t9748 + t10239) * t9720 + (((pkin(1) * t10031 - t9185) * t9749 + 0.2e1 * t10004) * t9748 + t10448) * t9758 + (-t9287 + (t9549 * t9749 + t10864) * t10357) * t9748 - t9828) / (t9479 + (t9488 * t9757 + t9992) * t9730) * t9392;
t10610 = t9731 * t9758;
t10285 = t9730 * t10610;
t10313 = t9749 * t10671;
t10592 = t9748 * t9757;
t10852 = 0.2e1 * t9748;
t9690 = pkin(1) * t9720;
t9056 = ((pkin(1) * t10130 + t9176) * t9757 - (t9691 + pkin(2)) * t9355) * t9731 + ((t10379 - t9182) * t9749 - t9306 + (t9546 * t9718 + (pkin(6) * t10592 - pkin(2)) * t9758) * t9310) * t9730 + ((-(-t9683 + t9690 + t9781 - t10588) * t10644 - t10313 * t10810) * t9718 + (t9604 * t10285 + (t9703 * t9720 + t10475 / 0.2e1 + t9588) * t9707 * t10852 - t9491 * t9748) * t9757 + (t9690 - t9580) * t10644 + t10844 * t9605 * t10589) * t10757;
t9021 = (-t10766 * t9056 - t10414 - t10428) * t9425;
t10802 = pkin(7) * t9021;
t9035 = t9731 * t9038;
t9309 = t9320 ^ 2 / t9446 ^ 2;
t9680 = pkin(7) * t9749;
t9614 = t9680 + pkin(1);
t9935 = t9374 * t9310;
t10941 = -t9035 * t9620 - t10802 + (0.2e1 * t9935 + t9309) * pkin(2) + (t9614 * t9758 - t10172 - t10715 + t9675) * t9380;
t10171 = pkin(6) * t10287;
t10714 = (pkin(7) * t10579 - pkin(2) + t9678) * t9707;
t10111 = t9761 * t9357;
t10007 = pkin(2) * t10111;
t10081 = t10920 * t9607 * t10756;
t10241 = pkin(1) * t9302;
t10809 = pkin(6) * t9761;
t10816 = pkin(3) * t9607;
t10904 = t9644 * t9752 + t9700;
t9693 = pkin(1) * t9761;
t9624 = t9693 + t9780;
t10413 = (-t10410 - ((t9312 * t9624 + t9366) * t9731 + (-t10007 - t10907) * t9730 + ((-t9678 + (-t10557 + pkin(1)) * t9761 + t9779) * t9707 + t10920) * t10756) * t10813 + ((-t9761 * t10241 + t9589 * t10376 - (t9592 + t9644) * t9312) * t9731 + (t10165 * t9752 - t10809 * t9180) * t9730 + (-(pkin(1) * t9684 + t10816 * t9724 + t9585 + t9592 - t9647) * t9707 + (((t9687 - t9766) * t9669 - t10808) * t9761 + 0.3e1 * t10444) * t10644 + t10650 * t10816) * t10756) * t9760 - t9707 * t10081 - (pkin(1) * t9893 - t10904) * t9731 * t10087 + t9177 * t9547 * t9730 + t10081) * t9312;
t10003 = pkin(2) * t10085;
t10177 = pkin(2) * t10348;
t10030 = 0.2e1 * t10177;
t10126 = t9721 * t10384;
t10389 = t9730 * t9312;
t10180 = pkin(2) * t10389;
t10184 = pkin(1) * t10385;
t10190 = -(pkin(2) * t10018 + t9300 + t9333) * t9724 + t9300;
t10196 = 0.2e1 * t10343;
t10232 = 0.2e1 * t10756;
t10462 = pkin(6) * t10756;
t10235 = pkin(2) * t10462;
t9301 = pkin(3) * t9312;
t10238 = pkin(2) * t9301;
t10296 = t9752 * t10648;
t10445 = pkin(3) * t10953;
t9327 = pkin(1) * t10063;
t10533 = t10756 * t9780 + t9327;
t10768 = (-t9302 + t9896) * t9724;
t10927 = 0.2e1 * t9752;
t9186 = pkin(3) * t10765 - t9279;
t9276 = pkin(1) * t10387;
t9288 = pkin(2) * t9300;
t9914 = 0.2e1 * t9723 * t10085;
t9827 = pkin(3) * (pkin(6) * t10019 + t9302) + t9914 * t10823;
t9967 = t9752 * t10111;
t9991 = -t10505 * t9761 + t9501;
t10430 = (((t9724 - 0.4e1 / 0.3e1) * t10645 + ((-0.2e1 / 0.3e1 * t9647 + t10526) * t9724 + 0.2e1 / 0.3e1 * t10158 + 0.4e1 / 0.3e1 * t9647 + t10247) * t9760 + (0.4e1 / 0.3e1 * t10813 - 0.2e1 / 0.3e1 * t9607) * t10920) * t10756 * t10862 + (t9656 * t10126 - (t10768 + (t9303 - t10953) * t9761 + 0.3e1 * t9302 - 0.4e1 * t9608 * t10086) * t10813 + ((t10085 * t10870 - t10241) * t9761 + (pkin(6) * t10030 - t10184) * t9752 - t9585 * t9312 + (-t9301 * t9724 + (t9914 + (pkin(2) * t10113 - 0.4e1 * t10085) * t9761 + (t9351 + t10030) * t10927 + 0.2e1 * t9333 + t10190) * t9751) * pkin(3)) * t9760 + ((-t10086 * t10648 - t9288) * t9751 - t10238) * t9724 + ((t9186 * t9752 - 0.2e1 * t10003) * t9751 - t10445) * t9761 + (t10086 * t9640 + t9288) * t9751 + t9827) * t9707 + ((-0.3e1 * t9724 + 0.3e1) * t10645 * t10756 - (t9656 * t9327 + (-t10007 + (-t9300 - 0.2e1 * t9333 - 0.2e1 * t9272) * t9752) * t9730 + ((t10873 + 0.4e1 * t10557) * t9761 + (0.4e1 * t9724 - 0.2e1) * pkin(2)) * t10756) * t10813 + (0.2e1 * (t9567 + t10517) * t10349 + (((t9276 - t9183) * t9669 + t9186) * t9730 - t9581 * pkin(2) * t10232) * t9761 + (0.3e1 * t10180 * t9752 - 0.4e1 * t10462) * t9669 + (pkin(6) * t10180 + t10343 * t9781) * t9752 - t9548 * t10756) * t9760 + ((-t10184 * t9730 + 0.2e1 * t10235) * t9751 + pkin(3) * t10533) * t9724 + ((pkin(1) * t10180 + pkin(6) * t10196) * t9751 + pkin(3) * t10196) * t10579 + (t10904 * t10389 - 0.2e1 * t10235) * t9751 - (t10063 * t10557 + t10533) * pkin(3)) * t9731 - t10834 * t10126 - (-t10768 - t9302 + (t9183 * t9761 + (t10869 + t9669) * t10348) * t9752) * t10813 - (-t10834 * t9301 + (pkin(2) * t9967 + t9330 + t9333 + (t9766 * t9723 - (t9766 + t9687) * t9761) * t9730 * t10232 + t10190) * t9751) * t9677 + ((t9288 + (t10296 + t10512) * t10348) * t9751 + t10238) * t9724 + (((pkin(1) * t10030 - t9186) * t9752 + 0.2e1 * t10003) * t9751 + t10445) * t9761 + (-t9288 + (t9549 * t9752 + t10864) * t10348) * t9751 - t9827) / (t9480 + (t9489 * t9760 + t9991) * t9730) * t9393;
t10607 = t9731 * t9761;
t10284 = t9730 * t10607;
t10312 = t9752 * t10671;
t10582 = t9751 * t9760;
t10850 = 0.2e1 * t9751;
t9692 = pkin(1) * t9724;
t9057 = ((pkin(1) * t10125 + t9177) * t9760 - (t9693 + pkin(2)) * t9357) * t9731 + ((t10376 - t9183) * t9752 - t9303 + (t9547 * t9722 + (pkin(6) * t10582 - pkin(2)) * t9761) * t9312) * t9730 + ((-(-t9684 + t9692 + t9781 - t10578) * t10644 - t10312 * t10809) * t9722 + (t9607 * t10284 + (t9703 * t9724 + t10474 / 0.2e1 + t9589) * t9707 * t10850 - t9492 * t9751) * t9760 + (t9692 - t9581) * t10644 + t10844 * t9608 * t10579) * t10756;
t9019 = (-t10765 * t9057 - t10413 - t10430) * t9421;
t10804 = pkin(7) * t9019;
t9036 = t9731 * t9039;
t9311 = t9321 ^ 2 / t9447 ^ 2;
t9681 = pkin(7) * t9752;
t9615 = t9681 + pkin(1);
t9934 = t9375 * t9312;
t10940 = -t9036 * t9621 - t10804 + (0.2e1 * t9934 + t9311) * pkin(2) + (t9615 * t9761 - t10171 - t10714 + t9678) * t9381;
t10187 = -t9724 + t10672;
t10342 = t9393 * t10726;
t9943 = t9421 * t9363 * t10342;
t10939 = (t10187 + 0.1e1) * t9943;
t10188 = -t9720 + t10673;
t10351 = t9392 * t10727;
t9950 = t9425 * t9362 * t10351;
t10938 = (t10188 + 0.1e1) * t9950;
t10189 = -t9716 + t10674;
t10360 = t9391 * t10728;
t9957 = t9423 * t9361 * t10360;
t10937 = (t10189 + 0.1e1) * t9957;
t10370 = t9752 * t9381;
t10459 = pkin(6) * t10636;
t10799 = pkin(7) * t9724;
t10871 = -0.2e1 * pkin(2);
t10899 = pkin(6) * t10284 + t9687;
t9787 = 0.1e1 / pkin(3) ^ 2;
t9356 = t9363 ^ 2 / t9459 ^ 2 * t9787;
t9341 = pkin(7) * t9356;
t9883 = t9730 * t9943;
t9851 = t9883 * t9780;
t10936 = t9381 * ((-t10474 + t9773 + t10799) * t10860 + pkin(7) - 0.2e1 * t10799 + t10899) + (pkin(2) * t10370 + pkin(7) * t9883) * t10499 - t9752 * t9851 - t9341 - t9019 * t10871 - (-t9624 * t9731 + t10459) * t9039;
t10372 = t9749 * t9380;
t10460 = pkin(6) * t10639;
t10800 = pkin(7) * t9720;
t10900 = pkin(6) * t10285 + t9686;
t9354 = t9362 ^ 2 / t9458 ^ 2 * t9787;
t9340 = pkin(7) * t9354;
t9884 = t9730 * t9950;
t9852 = t9884 * t9780;
t10935 = t9380 * ((-t10475 + t9773 + t10800) * t10860 + pkin(7) - 0.2e1 * t10800 + t10900) + (pkin(2) * t10372 + pkin(7) * t9884) * t10500 - t9749 * t9852 - t9340 - t9021 * t10871 - (-t9623 * t9731 + t10460) * t9038;
t10374 = t9746 * t9379;
t10461 = pkin(6) * t10642;
t10801 = pkin(7) * t9716;
t10901 = pkin(6) * t10286 + t9685;
t9352 = t9361 ^ 2 / t9457 ^ 2 * t9787;
t9337 = pkin(7) * t9352;
t9885 = t9730 * t9957;
t9853 = t9885 * t9780;
t10934 = t9379 * ((-t10476 + t9773 + t10801) * t10860 + pkin(7) - 0.2e1 * t10801 + t10901) + (pkin(2) * t10374 + pkin(7) * t9885) * t10501 - t9746 * t9853 - t9337 - t9020 * t10871 - (-t9622 * t9731 + t10461) * t9037;
t10424 = t9037 * t10642;
t9554 = t9679 + t10923;
t10933 = (-t10923 * t9016 + (pkin(6) * t9020 - t10807) * t9746) * t9730 + 0.2e1 * (-t9554 * t9755 + t10716) * t9037 + (t10424 * t10869 - t9020 * t9622) * t9731;
t10420 = t9038 * t10639;
t9555 = t9680 + t10922;
t10932 = (-t10922 * t9017 + (pkin(6) * t9021 - t10806) * t9749) * t9730 + 0.2e1 * (-t9555 * t9758 + t10715) * t9038 + (t10420 * t10869 - t9021 * t9623) * t9731;
t10416 = t9039 * t10636;
t9556 = t9681 + t10921;
t10931 = (-t10921 * t9018 + (pkin(6) * t9019 - t10805) * t9752) * t9730 + 0.2e1 * (-t9556 * t9761 + t10714) * t9039 + (t10416 * t10869 - t9019 * t9624) * t9731;
t10917 = t9239 * t9391;
t10916 = t9241 * t9392;
t10915 = t9243 * t9393;
t10914 = t9352 - t9307;
t10913 = t9354 - t9309;
t10912 = t9356 - t9311;
t10147 = t9656 * t9669 - pkin(6);
t10635 = t9730 * t9753;
t10876 = t10147 * t10635 - t9547 * t9762;
t10148 = t9655 * t9668 - pkin(6);
t10638 = t9730 * t9750;
t10875 = t10148 * t10638 - t9546 * t9759;
t10149 = t9654 * t9667 - pkin(6);
t10641 = t9730 * t9747;
t10874 = t10149 * t10641 - t9545 * t9756;
t10872 = -0.4e1 * pkin(2);
t10868 = 0.2e1 * pkin(7);
t10867 = -0.2e1 * t9367 + t9353;
t10866 = -0.2e1 * t9368 + t9355;
t10865 = -0.2e1 * t9369 + t9357;
t10858 = -0.2e1 * t9730;
t10857 = 0.2e1 * t9730;
t10856 = -0.2e1 * t9731;
t10855 = -0.2e1 * t9745;
t10853 = -0.2e1 * t9748;
t10851 = -0.2e1 * t9751;
t10849 = -0.2e1 * t9754;
t10848 = -0.2e1 * t9757;
t10847 = -0.2e1 * t9760;
t10846 = t9731 / 0.2e1;
t10845 = -0.4e1 * t9707 + 0.4e1;
t10843 = t10860 - 0.2e1;
t10841 = 0.4e1 * t9714 - 0.2e1;
t10838 = 0.4e1 * t9718 - 0.2e1;
t10835 = 0.4e1 * t9722 - 0.2e1;
t10812 = pkin(6) * t9730;
t9658 = t9731 * pkin(2);
t9705 = t9730 ^ 2;
t10795 = MDP(4) * t9705;
t10794 = MDP(5) * t9705;
t10793 = MDP(6) * t9730;
t10792 = MDP(7) * t9730;
t10788 = t8995 * t9755;
t10787 = t8996 * t9758;
t10786 = t8997 * t9761;
t10782 = t9037 * t9423;
t10780 = t9037 * t9755;
t10779 = t9038 * t9425;
t10777 = t9038 * t9758;
t10776 = t9039 * t9421;
t10774 = t9039 * t9761;
t10060 = t9756 * t10280;
t10601 = t9746 * t9747;
t10309 = t9661 * t10601;
t10163 = pkin(3) * t10309;
t10304 = t9664 * t10642;
t10573 = t9755 * t9756;
t10661 = t9664 * t9746;
t10669 = t9661 * t9747;
t9799 = -t10149 * t9754 - t10918 * t9745;
t10603 = t9745 * t9747;
t9835 = t10918 * t10603;
t10632 = t9730 * t9756;
t9865 = pkin(6) * t10601 + t10632 * t9490;
t9382 = (t10886 * t10669 + t9799 * t9664) * t9707 + (-(t10573 * t9661 - 0.2e1 * t10304) * t10815 + (t10874 * t9661 - t9664 * t9877) * t9754 + t9730 * (-t10661 * t9601 + t9661 * t9835)) * t9731 - t9714 * t10163 + ((t10060 * t9661 + t9664 * t9716 - t9664) * t9667 - t9664 * pkin(6)) * t9754 + (t9661 * t9865 + t9664 * t9999) * t9745 + t10163;
t9433 = 0.1e1 / ((t9484 * t9754 + t9993) * t9730 + t9478);
t10764 = t9382 * t9433;
t10058 = t9759 * t10276;
t10591 = t9749 * t9750;
t10307 = t9662 * t10591;
t10160 = pkin(3) * t10307;
t10302 = t9665 * t10639;
t10568 = t9758 * t9759;
t10658 = t9665 * t9749;
t10666 = t9662 * t9750;
t9798 = -t10148 * t9757 - t10919 * t9748;
t10593 = t9748 * t9750;
t9834 = t10919 * t10593;
t10629 = t9730 * t9759;
t9864 = pkin(6) * t10591 + t10629 * t9491;
t9383 = (t10887 * t10666 + t9798 * t9665) * t9707 + (-(t10568 * t9662 - 0.2e1 * t10302) * t10814 + (t10875 * t9662 - t9665 * t9876) * t9757 + t9730 * (-t10658 * t9604 + t9662 * t9834)) * t9731 - t9718 * t10160 + ((t10058 * t9662 + t9665 * t9720 - t9665) * t9668 - t9665 * pkin(6)) * t9757 + (t9662 * t9864 + t9665 * t9998) * t9748 + t10160;
t9434 = 0.1e1 / ((t9485 * t9757 + t9992) * t9730 + t9479);
t10763 = t9383 * t9434;
t10056 = t9762 * t10272;
t10581 = t9752 * t9753;
t10305 = t9663 * t10581;
t10157 = pkin(3) * t10305;
t10300 = t9666 * t10636;
t10563 = t9761 * t9762;
t10655 = t9666 * t9752;
t10663 = t9663 * t9753;
t9797 = -t10147 * t9760 - t10920 * t9751;
t10583 = t9751 * t9753;
t9833 = t10920 * t10583;
t10626 = t9730 * t9762;
t9863 = pkin(6) * t10581 + t10626 * t9492;
t9384 = (t10888 * t10663 + t9797 * t9666) * t9707 + (-(t10563 * t9663 - 0.2e1 * t10300) * t10813 + (t10876 * t9663 - t9666 * t9875) * t9760 + t9730 * (-t10655 * t9607 + t9663 * t9833)) * t9731 - t9722 * t10157 + ((t10056 * t9663 + t9666 * t9724 - t9666) * t9669 - t9666 * pkin(6)) * t9760 + (t9663 * t9863 + t9666 * t9997) * t9751 + t10157;
t9435 = 0.1e1 / ((t9486 * t9760 + t9991) * t9730 + t9480);
t10762 = t9384 * t9435;
t10303 = t9664 * t10601;
t10162 = pkin(3) * t10303;
t10310 = t9661 * t10642;
t10660 = t9664 * t9747;
t10670 = t9661 * t9746;
t9385 = (-t10660 * t10886 + t9661 * t9799) * t9707 + ((t10573 * t9664 + 0.2e1 * t10310) * t10815 + (-t10874 * t9664 - t9661 * t9877) * t9754 - t9730 * (t10670 * t9601 + t9664 * t9835)) * t9731 + t9714 * t10162 + (-(t10060 * t9664 - t9661 * t9716 + t9661) * t9667 - t9661 * pkin(6)) * t9754 + (t9661 * t9999 - t9664 * t9865) * t9745 - t10162;
t10761 = t9385 * t9433;
t10301 = t9665 * t10591;
t10159 = pkin(3) * t10301;
t10308 = t9662 * t10639;
t10657 = t9665 * t9750;
t10667 = t9662 * t9749;
t9386 = (-t10657 * t10887 + t9662 * t9798) * t9707 + ((t10568 * t9665 + 0.2e1 * t10308) * t10814 + (-t10875 * t9665 - t9662 * t9876) * t9757 - t9730 * (t10667 * t9604 + t9665 * t9834)) * t9731 + t9718 * t10159 + (-(t10058 * t9665 - t9662 * t9720 + t9662) * t9668 - t9662 * pkin(6)) * t9757 + (t9662 * t9998 - t9665 * t9864) * t9748 - t10159;
t10760 = t9386 * t9434;
t10299 = t9666 * t10581;
t10156 = pkin(3) * t10299;
t10306 = t9663 * t10636;
t10654 = t9666 * t9753;
t10664 = t9663 * t9752;
t9387 = (-t10654 * t10888 + t9663 * t9797) * t9707 + ((t10563 * t9666 + 0.2e1 * t10306) * t10813 + (-t10876 * t9666 - t9663 * t9875) * t9760 - t9730 * (t10664 * t9607 + t9666 * t9833)) * t9731 + t9722 * t10156 + (-(t10056 * t9666 - t9663 * t9724 + t9663) * t9669 - t9663 * pkin(6)) * t9760 + (t9663 * t9997 - t9666 * t9863) * t9751 - t10156;
t10759 = t9387 * t9435;
t10495 = -0.2e1 * t10671;
t10017 = t10926 * t9716 * t10495;
t10320 = t10926 * t10669;
t10054 = t9602 * t10320;
t10074 = t9602 * t10309;
t10079 = t9747 * t10326;
t10323 = t9756 * t10704;
t10595 = t9747 * t9766;
t10268 = t9731 * t10595;
t10338 = (t10268 * t10949 + t10710 * t9756) * t9716 * t9730;
t10685 = t10926 * t9664;
t10695 = t9587 * t9756;
t9481 = t9700 - t10326;
t9394 = t9661 * t10338 + (((-t10079 * t9661 - t10685 * t9602) * t9731 + t9661 * t10323) * t9730 + (t10326 * t9664 - t10054) * t9707 + t10054 + t9664 * t9481) * t9755 - t9587 * t10685 + (t9664 * t10017 + ((-t10661 * t9602 - t10320) * t9731 + t9661 * t10695) * t9730 + (-t10074 + t10685) * t9707 + t10074) * t9766;
t10755 = t9394 * t9448;
t10016 = t10925 * t9720 * t10495;
t10318 = t10925 * t10666;
t10052 = t9605 * t10318;
t10072 = t9605 * t10307;
t10077 = t9750 * t10325;
t10322 = t9759 * t10702;
t10585 = t9750 * t9766;
t10265 = t9731 * t10585;
t10337 = (t10265 * t10950 + t10709 * t9759) * t9720 * t9730;
t10682 = t10925 * t9665;
t10694 = t9588 * t9759;
t9482 = t9700 - t10325;
t9395 = t9662 * t10337 + (((-t10077 * t9662 - t10682 * t9605) * t9731 + t9662 * t10322) * t9730 + (t10325 * t9665 - t10052) * t9707 + t10052 + t9665 * t9482) * t9758 - t9588 * t10682 + (t9665 * t10016 + ((-t10658 * t9605 - t10318) * t9731 + t9662 * t10694) * t9730 + (-t10072 + t10682) * t9707 + t10072) * t9766;
t10754 = t9395 * t9450;
t10015 = t10924 * t9724 * t10495;
t10316 = t10924 * t10663;
t10050 = t9608 * t10316;
t10070 = t9608 * t10305;
t10075 = t9753 * t10324;
t10321 = t9762 * t10700;
t10575 = t9753 * t9766;
t10262 = t9731 * t10575;
t10336 = (t10262 * t10951 + t10708 * t9762) * t9724 * t9730;
t10679 = t10924 * t9666;
t10693 = t9589 * t9762;
t9483 = t9700 - t10324;
t9396 = t9663 * t10336 + (((-t10075 * t9663 - t10679 * t9608) * t9731 + t9663 * t10321) * t9730 + (t10324 * t9666 - t10050) * t9707 + t10050 + t9666 * t9483) * t9761 - t9589 * t10679 + (t9666 * t10015 + ((-t10655 * t9608 - t10316) * t9731 + t9663 * t10693) * t9730 + (-t10070 + t10679) * t9707 + t10070) * t9766;
t10753 = t9396 * t9452;
t10319 = t10926 * t10660;
t10053 = t9602 * t10319;
t10073 = t9602 * t10303;
t10686 = t10926 * t9661;
t9397 = -t9664 * t10338 + (((t10079 * t9664 - t10686 * t9602) * t9731 - t9664 * t10323) * t9730 + (t10326 * t9661 + t10053) * t9707 - t10053 + t9661 * t9481) * t9755 - t9587 * t10686 + (t9661 * t10017 - ((t10670 * t9602 - t10319) * t9731 + t9664 * t10695) * t9730 + (t10073 + t10686) * t9707 - t10073) * t9766;
t10752 = t9397 * t9448;
t10317 = t10925 * t10657;
t10051 = t9605 * t10317;
t10071 = t9605 * t10301;
t10683 = t10925 * t9662;
t9398 = -t9665 * t10337 + (((t10077 * t9665 - t10683 * t9605) * t9731 - t9665 * t10322) * t9730 + (t10325 * t9662 + t10051) * t9707 - t10051 + t9662 * t9482) * t9758 - t9588 * t10683 + (t9662 * t10016 - ((t10667 * t9605 - t10317) * t9731 + t9665 * t10694) * t9730 + (t10071 + t10683) * t9707 - t10071) * t9766;
t10751 = t9398 * t9450;
t10315 = t10924 * t10654;
t10049 = t9608 * t10315;
t10069 = t9608 * t10299;
t10680 = t10924 * t9663;
t9399 = -t9666 * t10336 + (((t10075 * t9666 - t10680 * t9608) * t9731 - t9666 * t10321) * t9730 + (t10324 * t9663 + t10049) * t9707 - t10049 + t9663 * t9483) * t9761 - t9589 * t10680 + (t9663 * t10015 - ((t10664 * t9608 - t10315) * t9731 + t9666 * t10693) * t9730 + (t10069 + t10680) * t9707 - t10069) * t9766;
t10750 = t9399 * t9452;
t10244 = t10605 * t10871;
t10572 = t9756 * t9746;
t10269 = t9731 * t10572;
t10597 = t9747 * t9582;
t10692 = t9602 * t9730;
t10570 = t9756 * t9766;
t9532 = -pkin(2) * t9747 + t10570 * t9731;
t9538 = -pkin(1) * t9658 - pkin(6) * t10625;
t10749 = ((t9756 * t10244 - 0.2e1 * t9532 * t9671 + (t9670 + t10648) * t9747) * t9716 + (t10269 * t9670 + ((0.2e1 * t10479 - t10692) * t9756 + t10597) * t9671 + (-pkin(2) * t10692 + t10298 * t9731) * t9756 + pkin(2) * t10597) * t9755 + t9766 * (t9747 * t9587 + (pkin(3) * t10614 - t10642 * t9602 + t9658) * t9756)) / ((pkin(1) * t10473 + t9538 * t9746) * t9754 + t9862);
t10567 = t9759 * t9749;
t10266 = t9731 * t10567;
t10587 = t9750 * t9583;
t10690 = t9605 * t9730;
t10565 = t9759 * t9766;
t9533 = -pkin(2) * t9750 + t10565 * t9731;
t10748 = ((t9759 * t10244 - 0.2e1 * t9533 * t9674 + (t9673 + t10648) * t9750) * t9720 + (t10266 * t9673 + ((0.2e1 * t10478 - t10690) * t9759 + t10587) * t9674 + (-pkin(2) * t10690 + t10297 * t9731) * t9759 + pkin(2) * t10587) * t9758 + t9766 * (t9750 * t9588 + (pkin(3) * t10611 - t10639 * t9605 + t9658) * t9759)) / ((pkin(1) * t10472 + t9538 * t9749) * t9757 + t9861);
t10562 = t9762 * t9752;
t10263 = t9731 * t10562;
t10577 = t9753 * t9584;
t10688 = t9608 * t9730;
t10560 = t9762 * t9766;
t9534 = -pkin(2) * t9753 + t10560 * t9731;
t10747 = ((t9762 * t10244 - 0.2e1 * t9534 * t9677 + (t9676 + t10648) * t9753) * t9724 + (t10263 * t9676 + ((0.2e1 * t10477 - t10688) * t9762 + t10577) * t9677 + (-pkin(2) * t10688 + t10296 * t9731) * t9762 + pkin(2) * t10577) * t9761 + t9766 * (t9753 * t9589 + (pkin(3) * t10608 - t10636 * t9608 + t9658) * t9762)) / ((pkin(1) * t10471 + t9538 * t9752) * t9760 + t9860);
t10470 = pkin(3) * t10603;
t10516 = t9707 - 0.1e1 / 0.2e1;
t10596 = t9747 * t9755;
t10612 = t9731 * t9756;
t9403 = ((-t10149 * t10612 + t10470 * t10599) * t9754 + (-t10918 * t10612 + t9747 * (-t10652 * t9766 + t10923 * t9746)) * t9745) * t9730 - 0.2e1 * (t10516 * t10572 + t10596 * t10846) * t10815 - (-t10612 * t9550 + t9545 * t9747) * t10614 + t9756 * t9601 * t10314;
t10746 = t9403 * t9433;
t10469 = pkin(3) * t10593;
t10586 = t9750 * t9758;
t10609 = t9731 * t9759;
t9404 = ((-t10148 * t10609 + t10469 * t10589) * t9757 + (-t10919 * t10609 + t9750 * (-t10651 * t9766 + t10922 * t9749)) * t9748) * t9730 - 0.2e1 * (t10516 * t10567 + t10586 * t10846) * t10814 - (-t10609 * t9551 + t9546 * t9750) * t10611 + t9759 * t9604 * t10313;
t10745 = t9404 * t9434;
t10468 = pkin(3) * t10583;
t10576 = t9753 * t9761;
t10606 = t9731 * t9762;
t9405 = ((-t10147 * t10606 + t10468 * t10579) * t9760 + (-t10920 * t10606 + t9753 * (-t10650 * t9766 + t10921 * t9752)) * t9751) * t9730 - 0.2e1 * (t10516 * t10562 + t10576 * t10846) * t10813 - (-t10606 * t9552 + t9547 * t9753) * t10608 + t9762 * t9607 * t10312;
t10744 = t9405 * t9435;
t9502 = -t10601 * t9731 + t10573;
t9832 = t10470 * t9730 + (-t9747 * t9658 + t10570) * t9746 + (pkin(2) * t9756 + t10268) * t9755;
t9406 = -(t9502 * t9664 + t10310) * t10815 + (t9661 * t9823 - t9664 * t9832) * t9754 - (t10641 * t9664 + t9661 * t9731) * t10827;
t10743 = t9406 * t9423;
t9503 = -t10591 * t9731 + t10568;
t9831 = t10469 * t9730 + (-t9750 * t9658 + t10565) * t9749 + (pkin(2) * t9759 + t10265) * t9758;
t9407 = -(t9503 * t9665 + t10308) * t10814 + (t9662 * t9822 - t9665 * t9831) * t9757 - (t10638 * t9665 + t9662 * t9731) * t10825;
t10742 = t9407 * t9425;
t9504 = -t10581 * t9731 + t10563;
t9830 = t10468 * t9730 + (-t9753 * t9658 + t10560) * t9752 + (pkin(2) * t9762 + t10262) * t9761;
t9408 = -(t9504 * t9666 + t10306) * t10813 + (t9663 * t9821 - t9666 * t9830) * t9760 - (t10635 * t9666 + t9663 * t9731) * t10823;
t10741 = t9408 * t9421;
t9409 = (t9502 * t9661 - t10304) * t10815 + (t9661 * t9832 + t9664 * t9823) * t9754 + (t10641 * t9661 - t9664 * t9731) * t10827;
t10740 = t9409 * t9423;
t9410 = (t9503 * t9662 - t10302) * t10814 + (t9662 * t9831 + t9665 * t9822) * t9757 + (t10638 * t9662 - t9665 * t9731) * t10825;
t10739 = t9410 * t9425;
t9411 = (t9504 * t9663 - t10300) * t10813 + (t9663 * t9830 + t9666 * t9821) * t9760 + (t10635 * t9663 - t9666 * t9731) * t10823;
t10738 = t9411 * t9421;
t10274 = t9751 * t10626;
t9456 = (t10263 + t10576) * t10813 + (-pkin(3) * t10274 - t9534 * t9761 + (pkin(2) * t10606 + t10575) * t9752) * t9760 - pkin(2) * t10274;
t10737 = t9421 * t9456;
t10736 = t9422 * t9761;
t10282 = t9745 * t10632;
t9454 = (t10269 + t10596) * t10815 + (-pkin(3) * t10282 - t9532 * t9755 + (pkin(2) * t10612 + t10595) * t9746) * t9754 - pkin(2) * t10282;
t10735 = t9423 * t9454;
t10734 = t9424 * t9755;
t10278 = t9748 * t10629;
t9455 = (t10266 + t10586) * t10814 + (-pkin(3) * t10278 - t9533 * t9758 + (pkin(2) * t10609 + t10585) * t9749) * t9757 - pkin(2) * t10278;
t10733 = t9425 * t9455;
t10732 = t9426 * t9758;
t10731 = t9433 * t9746;
t10730 = t9434 * t9749;
t10729 = t9435 * t9752;
t10634 = t9730 * t9754;
t10631 = t9730 * t9757;
t10628 = t9730 * t9760;
t10623 = t9731 * t9019;
t10622 = t9731 * t9020;
t10621 = t9731 * t9021;
t10604 = t9745 * t9746;
t10594 = t9748 * t9749;
t10584 = t9751 * t9752;
t10363 = t9754 * t10758;
t10329 = t9558 * t10644;
t10443 = t10844 * pkin(6);
t9136 = 0.2e1 * t9558 * t10405 + (t10329 - t10443) * t10758;
t10556 = -t9554 * t9754 * t10781 - t10363 * t9136 + (-t10811 * t10781 + t10942) * t9745;
t10354 = t9757 * t10757;
t10328 = t9560 * t10644;
t9137 = 0.2e1 * t9560 * t10397 + (t10328 - t10443) * t10757;
t10555 = -t9555 * t9757 * t10778 - t10354 * t9137 + (-t10810 * t10778 + t10941) * t9748;
t10554 = (-pkin(6) * t10569 + t9555 * t9748) * t10778 + t10356 * t9137 + t10941 * t9757;
t10345 = t9760 * t10756;
t10327 = t9562 * t10644;
t9138 = 0.2e1 * t9562 * t10389 + (t10327 - t10443) * t10756;
t10553 = -t9556 * t9760 * t10775 - t10345 * t9138 + (-t10809 * t10775 + t10940) * t9751;
t10552 = (-pkin(6) * t10564 + t9556 * t9751) * t10775 + t10347 * t9138 + t10940 * t9760;
t10551 = (-pkin(6) * t10574 + t9554 * t9745) * t10781 + t10365 * t9136 + t10942 * t9754;
t10547 = t10532 * t9373 - 0.2e1 * t9974;
t10546 = t10531 * t9374 - 0.2e1 * t9972;
t10545 = t10530 * t9375 - 0.2e1 * t9970;
t10529 = t9379 - t9307;
t10528 = t9380 - t9309;
t10527 = t9381 - t9311;
t10498 = -0.2e1 * t9308;
t10497 = -0.2e1 * t9310;
t10496 = -0.2e1 * t9312;
t10494 = -0.2e1 * t10644;
t10491 = -0.2e1 * t10602;
t10490 = -0.2e1 * t10592;
t10489 = -0.2e1 * t10582;
t10488 = t10843 * pkin(6);
t9196 = t9307 + t9352;
t10467 = t9196 * t10812;
t9197 = t9309 + t9354;
t10466 = t9197 * t10812;
t9198 = t9311 + t9356;
t10465 = t9198 * t10812;
t9004 = t9034 + (-t10429 / 0.2e1 - t10415 / 0.2e1 + t9055 * t10255) * t9423;
t10436 = t9004 * t10642;
t9005 = t9035 + (-t10428 / 0.2e1 - t10414 / 0.2e1 + t9056 * t10254) * t9425;
t10435 = t9005 * t10639;
t9006 = t9036 + (-t10430 / 0.2e1 - t10413 / 0.2e1 + t9057 * t10253) * t9421;
t10434 = t9006 * t10636;
t10433 = t9019 * t10627;
t10432 = t9020 * t10633;
t10431 = t9021 * t10630;
t10427 = t9746 ^ 2 * t10782;
t10426 = t9037 * t10731;
t10425 = t9433 * t10780;
t10423 = t9749 ^ 2 * t10779;
t10422 = t9038 * t10730;
t10421 = t9434 * t10777;
t10419 = t9752 ^ 2 * t10776;
t10418 = t9039 * t10729;
t10417 = t9435 * t10774;
t10409 = t9433 * t10917;
t10408 = t9434 * t10916;
t10407 = t9435 * t10915;
t10406 = t9391 * t9308;
t10398 = t9392 * t9310;
t10390 = t9393 * t9312;
t10373 = t9388 * t10734;
t10371 = t9389 * t10732;
t10369 = t9390 * t10736;
t10368 = t9707 * t10758;
t10359 = t9707 * t10757;
t10350 = t9707 * t10756;
t10341 = t9403 * t10731;
t10340 = t9404 * t10730;
t10339 = t9405 * t10729;
t10295 = t9716 * t9379;
t10294 = t9720 * t9380;
t10293 = t9724 * t9381;
t10283 = t9730 * t10604;
t10281 = t9730 * t10600;
t10279 = t9730 * t10594;
t10277 = t9730 * t10590;
t10275 = t9730 * t10584;
t10273 = t9730 * t10580;
t10261 = t9745 * t10600;
t10260 = t9748 * t10590;
t10259 = t9751 * t10580;
t10112 = t9760 * t9357;
t10006 = pkin(2) * t10112;
t8943 = -t9018 * t9621 * t9731 + ((-pkin(6) * t9018 - t10804) * t9761 + t9019 * t10822) * t9730 + (-0.2e1 * t10327 + t10488) * t9039;
t9125 = (-pkin(7) * t9311 + t9970 * t10869 + t9341) * t9752 + pkin(1) * t9356;
t9135 = t9341 + (pkin(1) * t9198 + t9851) * t9752;
t9156 = t9276 - t9189;
t9174 = t10388 * t10868 + t10006;
t9192 = t9300 - t9345;
t9249 = t9351 + t10177;
t9880 = t9615 * t9943;
t10129 = t9393 * t10387;
t9971 = t9421 * t10129;
t9976 = t9189 * t10086;
t10231 = t9421 * (t10931 * t9751 - t8943 * t9760 + 0.2e1 * (t9174 * t9724 + (pkin(7) * t10112 + t10388 * t10871) * t10579 - t10006 + t9751 * t9189) * t10350 + ((t10087 * t9192 - t10386 * t9249) * t10499 + (t9194 + 0.2e1 * t9976) * t9760 + t9135 * t9751) * t9731 - 0.2e1 * t9174 * t10349 + (t9880 * t10847 + t9751 * t10465 + (t10912 * t10628 + 0.4e1 * t9751 * t9971) * pkin(2)) * t9761 + t9125 * t10628 + 0.2e1 * t9156 * t10347);
t10000 = pkin(2) * t10114;
t10150 = pkin(7) * t10386;
t9931 = t10114 / 0.2e1;
t10230 = t9421 * (-t10931 * t9760 - t8943 * t9751 - 0.4e1 * ((t10150 - t10000 / 0.2e1) * t9724 - (pkin(7) * t9931 + t10151) * t10579 + (t9348 / 0.2e1 - t9299 / 0.2e1) * t9760 + pkin(2) * t9931) * t10350 + ((-t10345 * t9192 * t9730 - t10388 * t9249) * t10499 - t9135 * t9760 + (-t9899 + t9976) * t10850) * t9731 + (-0.2e1 * t10000 + 0.4e1 * t10150) * t10349 + ((t9971 * t10872 - t10465) * t9760 + (t9880 + (t9311 / 0.2e1 - t9356 / 0.2e1) * t10828) * t10851) * t9761 - 0.2e1 * t9156 * t10345 + t9125 * t10637);
t10055 = t10627 * t9311;
t10128 = (t9369 + t9357) * t10271;
t8976 = t10187 * t9039 - t10623 + t9039;
t9979 = t9761 * t10143;
t9105 = t9883 * t10856 + (t9979 - t10063) * t9312;
t10229 = t9421 * (t10434 * t10835 + t10489 * t8976 + (0.2e1 * t10055 + 0.4e1 * t10128) * t9722 + 0.4e1 * t9105 * t10259 - 0.2e1 * t10128 - t10055 - 0.2e1 * t10836 * t10939);
t10057 = t9730 * t10259;
t9015 = t9036 + t9019;
t9220 = t9375 + t9312 / 0.2e1;
t10228 = t9421 * (0.2e1 * t10057 * t9006 + t8976 * t9722 + t9015 * t9731 + (-t10128 - t10055 / 0.2e1 + t10939) * t10489 + (-t10063 * t9220 - t9105 * t9722) * t10927);
t9867 = t9943 * t10499;
t9141 = -t9730 * t10912 + t9867;
t9165 = t9730 * t9867 - t9356;
t9643 = t9724 - 0.1e1 / 0.2e1;
t10227 = t9421 * (-t9760 * t10433 + t9018 * (t10275 - t10608) + (t10494 * t9760 - t10584 * t10843) * t10774 + t9141 * t10580 + t9165 * t10616 + (t9707 * t9967 * t10847 + (t10845 * t9643 * t9751 + t10264 * t10857) * t9312) * t10756);
t10226 = t9421 * (-t9751 * t10433 - t9018 * (t10273 + t10616) + (t10580 * t10843 - 0.2e1 * t10288) * t10774 + t9141 * t10584 - t9165 * t10608 + (-((t10496 * t9724 + t9312) * t9760 + t9751 * t9967) * t9707 + t10125 * t10644 - 0.2e1 * t9643 * t10386) * t10232);
t10122 = t9754 * t9353;
t10010 = pkin(2) * t10122;
t8941 = -t9016 * t9619 * t9731 + ((-pkin(6) * t9016 - t10803) * t9755 + t9020 * t10826) * t9730 + (-0.2e1 * t10329 + t10488) * t9037;
t9124 = (-pkin(7) * t9307 + t9974 * t10869 + t9337) * t9746 + pkin(1) * t9352;
t9133 = t9337 + (pkin(1) * t9196 + t9853) * t9746;
t9154 = t9274 - t9187;
t9172 = t10403 * t10868 + t10010;
t9190 = t9291 - t9339;
t9247 = t9349 + t10179;
t9882 = t9613 * t9957;
t10139 = t9391 * t10402;
t9975 = t9423 * t10139;
t9978 = t9187 * t10099;
t10225 = t9423 * (t10933 * t9745 - t8941 * t9754 + 0.2e1 * (t9172 * t9716 + (pkin(7) * t10122 + t10403 * t10871) * t10599 - t10010 + t9745 * t9187) * t10368 + ((t10100 * t9190 - t10401 * t9247) * t10501 + (t9193 + 0.2e1 * t9978) * t9754 + t9133 * t9745) * t9731 - 0.2e1 * t9172 * t10367 + (t9882 * t10849 + t9745 * t10467 + (t10914 * t10634 + 0.4e1 * t9745 * t9975) * pkin(2)) * t9755 + t9124 * t10634 + 0.2e1 * t9154 * t10365);
t10002 = pkin(2) * t10124;
t10154 = pkin(7) * t10401;
t9933 = t10124 / 0.2e1;
t10224 = t9423 * (-t10933 * t9754 - t8941 * t9745 - 0.4e1 * ((t10154 - t10002 / 0.2e1) * t9716 - (pkin(7) * t9933 + t10155) * t10599 + (t9346 / 0.2e1 - t9290 / 0.2e1) * t9754 + pkin(2) * t9933) * t10368 + ((-t10363 * t9190 * t9730 - t10403 * t9247) * t10501 - t9133 * t9754 + (-t9900 + t9978) * t10854) * t9731 + (-0.2e1 * t10002 + 0.4e1 * t10154) * t10367 + ((t9975 * t10872 - t10467) * t9754 + (t9882 + (t9307 / 0.2e1 - t9352 / 0.2e1) * t10828) * t10855) * t9755 - 0.2e1 * t9154 * t10363 + t9124 * t10643);
t10048 = t10633 * t9307;
t10138 = (t9367 + t9353) * t10404;
t8974 = t10189 * t9037 - t10622 + t9037;
t9981 = t9755 * t10145;
t9103 = t9885 * t10856 + (t9981 - t10065) * t9308;
t10223 = t9423 * (t10436 * t10841 + t10491 * t8974 + (0.2e1 * t10048 + 0.4e1 * t10138) * t9714 + 0.4e1 * t9103 * t10261 - 0.2e1 * t10138 - t10048 - 0.2e1 * t10842 * t10937);
t10061 = t9730 * t10261;
t9011 = t9034 + t9020;
t9218 = t9373 + t9308 / 0.2e1;
t10222 = t9423 * (0.2e1 * t10061 * t9004 + t8974 * t9714 + t9011 * t9731 + (-t10138 - t10048 / 0.2e1 + t10937) * t10491 + (-t10065 * t9218 - t9103 * t9714) * t10929);
t9866 = t9957 * t10501;
t9139 = -t9730 * t10914 + t9866;
t9163 = t9730 * t9866 - t9352;
t9641 = t9716 - 0.1e1 / 0.2e1;
t10221 = t9423 * (-t9754 * t10432 + t9016 * (t10283 - t10614) + (t10494 * t9754 - t10604 * t10843) * t10780 + t9139 * t10600 + t9163 * t10620 + (t9707 * t9969 * t10849 + (t10845 * t9641 * t9745 + t10270 * t10857) * t9308) * t10758);
t10220 = t9423 * (-t9745 * t10432 - t9016 * (t10281 + t10620) + (t10600 * t10843 - 0.2e1 * t10292) * t10780 + t9139 * t10604 - t9163 * t10614 + (-((t10498 * t9716 + t9308) * t9754 + t9745 * t9969) * t9707 + t10135 * t10644 - 0.2e1 * t9641 * t10401) * t10234);
t10117 = t9757 * t9355;
t10008 = pkin(2) * t10117;
t8942 = -t9017 * t9620 * t9731 + ((-pkin(6) * t9017 - t10802) * t9758 + t9021 * t10824) * t9730 + (-0.2e1 * t10328 + t10488) * t9038;
t9126 = (-pkin(7) * t9309 + t9972 * t10869 + t9340) * t9749 + pkin(1) * t9354;
t9134 = t9340 + (pkin(1) * t9197 + t9852) * t9749;
t9155 = t9275 - t9188;
t9173 = t10395 * t10868 + t10008;
t9191 = t9296 - t9344;
t9248 = t9350 + t10178;
t9881 = t9614 * t9950;
t10134 = t9392 * t10394;
t9973 = t9425 * t10134;
t9977 = t9188 * t10093;
t10219 = t9425 * (t10932 * t9748 - t8942 * t9757 + 0.2e1 * (t9173 * t9720 + (pkin(7) * t10117 + t10395 * t10871) * t10589 - t10008 + t9748 * t9188) * t10359 + ((t10094 * t9191 - t10393 * t9248) * t10500 + (t9195 + 0.2e1 * t9977) * t9757 + t9134 * t9748) * t9731 - 0.2e1 * t9173 * t10358 + (t9881 * t10848 + t9748 * t10466 + (t10913 * t10631 + 0.4e1 * t9748 * t9973) * pkin(2)) * t9758 + t9126 * t10631 + 0.2e1 * t9155 * t10356);
t10001 = pkin(2) * t10119;
t10152 = pkin(7) * t10393;
t9932 = t10119 / 0.2e1;
t10218 = t9425 * (-t10932 * t9757 - t8942 * t9748 - 0.4e1 * ((t10152 - t10001 / 0.2e1) * t9720 - (pkin(7) * t9932 + t10153) * t10589 + (t9347 / 0.2e1 - t9295 / 0.2e1) * t9757 + pkin(2) * t9932) * t10359 + ((-t10354 * t9191 * t9730 - t10395 * t9248) * t10500 - t9134 * t9757 + (-t9901 + t9977) * t10852) * t9731 + (-0.2e1 * t10001 + 0.4e1 * t10152) * t10358 + ((t9973 * t10872 - t10466) * t9757 + (t9881 + (t9309 / 0.2e1 - t9354 / 0.2e1) * t10828) * t10853) * t9758 - 0.2e1 * t9155 * t10354 + t9126 * t10640);
t10047 = t10630 * t9309;
t10133 = (t9368 + t9355) * t10396;
t8975 = t10188 * t9038 - t10621 + t9038;
t9980 = t9758 * t10144;
t9104 = t9884 * t10856 + (t9980 - t10064) * t9310;
t10217 = t9425 * (t10435 * t10838 + t10490 * t8975 + (0.2e1 * t10047 + 0.4e1 * t10133) * t9718 + 0.4e1 * t9104 * t10260 - 0.2e1 * t10133 - t10047 - 0.2e1 * t10839 * t10938);
t10059 = t9730 * t10260;
t9013 = t9035 + t9021;
t9219 = t9374 + t9310 / 0.2e1;
t10216 = t9425 * (0.2e1 * t10059 * t9005 + t8975 * t9718 + t9013 * t9731 + (-t10133 - t10047 / 0.2e1 + t10938) * t10490 + (-t10064 * t9219 - t9104 * t9718) * t10928);
t9868 = t9950 * t10500;
t9140 = -t9730 * t10913 + t9868;
t9164 = t9730 * t9868 - t9354;
t9642 = t9720 - 0.1e1 / 0.2e1;
t10215 = t9425 * (-t9757 * t10431 + t9017 * (t10279 - t10611) + (t10494 * t9757 - t10594 * t10843) * t10777 + t9140 * t10590 + t9164 * t10618 + (t9707 * t9968 * t10848 + (t10845 * t9642 * t9748 + t10267 * t10857) * t9310) * t10757);
t10214 = t9425 * (-t9748 * t10431 - t9017 * (t10277 + t10618) + (t10590 * t10843 - 0.2e1 * t10290) * t10777 + t9140 * t10594 - t9164 * t10611 + (-((t10497 * t9720 + t9310) * t9757 + t9748 * t9968) * t9707 + t10130 * t10644 - 0.2e1 * t9642 * t10393) * t10233);
t10213 = t9433 * (-t10934 * t9745 + t10948 * t9754);
t10212 = t9433 * (t10934 * t9754 + t10948 * t9745);
t10098 = t9746 * t10363;
t9202 = t9981 + 0.2e1 * t10065;
t10211 = t9433 * (t10424 * t10842 + 0.2e1 * t9011 * t10602 + ((t10373 * t10858 + 0.4e1 * t9957) * t9731 + 0.4e1 * t9974) * t9714 + t9202 * t10098 * t10855 + t10547);
t10210 = t9434 * (-t10935 * t9748 + t10947 * t9757);
t10209 = t9434 * (t10935 * t9757 + t10947 * t9748);
t10091 = t9749 * t10354;
t9203 = t9980 + 0.2e1 * t10064;
t10208 = t9434 * (t10420 * t10839 + 0.2e1 * t9013 * t10592 + ((t10371 * t10858 + 0.4e1 * t9950) * t9731 + 0.4e1 * t9972) * t9718 + t9203 * t10091 * t10853 + t10546);
t10207 = t9435 * (-t10936 * t9751 + t10946 * t9760);
t10206 = t9435 * (t10936 * t9760 + t10946 * t9751);
t10084 = t9752 * t10345;
t9204 = t9979 + 0.2e1 * t10063;
t10205 = t9435 * (t10416 * t10836 + 0.2e1 * t9015 * t10582 + ((t10369 * t10858 + 0.4e1 * t9943) * t9731 + 0.4e1 * t9970) * t9722 + t9204 * t10084 * t10851 + t10545);
t10204 = t9448 * t10556;
t10203 = t9448 * t10551;
t10202 = t9450 * t10555;
t10201 = t9450 * t10554;
t10200 = t9452 * t10553;
t10199 = t9452 * t10552;
t10195 = 0.2e1 * t10295;
t10194 = 0.2e1 * t10294;
t10193 = 0.2e1 * t10293;
t10109 = t9433 * t10374;
t10108 = t9433 * t10373;
t10107 = t9434 * t10372;
t10106 = t9434 * t10371;
t10105 = t9435 * t10370;
t10104 = t9435 * t10369;
t10103 = t9448 * t10362;
t10097 = t9450 * t10353;
t10090 = t9452 * t10344;
t8989 = t10281 * t9037 + t9011 * t9745;
t9990 = t9433 * (t8989 * t9745 - t10547 * t10602 + (t9202 * t9714 - t10065) * t10364);
t9370 = -0.2e1 * t10295;
t9313 = -t9379 + t10195;
t9805 = t9313 * t9707 + t9163 + t9379;
t9989 = t9433 * ((t9370 + t9805) * t9745 + t10945 * t9754);
t9988 = t9433 * ((-t9805 + t10195) * t9754 + t10945 * t9745);
t8990 = t10277 * t9038 + t9013 * t9748;
t9987 = t9434 * (t8990 * t9748 - t10546 * t10592 + (t9203 * t9718 - t10064) * t10355);
t9371 = -0.2e1 * t10294;
t9314 = -t9380 + t10194;
t9804 = t9314 * t9707 + t9164 + t9380;
t9986 = t9434 * ((t9371 + t9804) * t9748 + t10944 * t9757);
t9985 = t9434 * ((-t9804 + t10194) * t9757 + t10944 * t9748);
t8991 = t10273 * t9039 + t9015 * t9751;
t9984 = t9435 * (t8991 * t9751 - t10545 * t10582 + (t9204 * t9722 - t10063) * t10346);
t9372 = -0.2e1 * t10293;
t9315 = -t9381 + t10193;
t9803 = t9315 * t9707 + t9165 + t9381;
t9983 = t9435 * ((t9372 + t9803) * t9751 + t10943 * t9760);
t9982 = t9435 * ((-t9803 + t10193) * t9760 + t10943 * t9751);
t9966 = t9746 * t10108;
t9964 = t9749 * t10106;
t9962 = t9752 * t10104;
t9960 = t9394 * t10103;
t9959 = t9397 * t10103;
t9958 = t10362 * t10749;
t9953 = t9395 * t10097;
t9952 = t9398 * t10097;
t9951 = t10353 * t10748;
t9946 = t9396 * t10090;
t9945 = t9399 * t10090;
t9944 = t10344 * t10747;
t9007 = t10623 / 0.2e1 + t9039;
t9217 = t10271 / 0.2e1 + t10756;
t9892 = t9421 * (t10496 * (t10456 * t9220 + t9217 * t9687) + t10434 * t10870 + 0.2e1 * t9007 * t9693);
t9891 = t9421 * (t10496 * (-t10459 * t9220 + t9217 * t9693) - 0.2e1 * t10456 * t9006 - 0.2e1 * t9007 * t9687);
t9008 = t10622 / 0.2e1 + t9037;
t9221 = t10404 / 0.2e1 + t10758;
t9890 = t9423 * (t10498 * (t10458 * t9218 + t9221 * t9685) + t10436 * t10870 + 0.2e1 * t9008 * t9689);
t9889 = t9423 * (t10498 * (-t10461 * t9218 + t9221 * t9689) - 0.2e1 * t10458 * t9004 - 0.2e1 * t9008 * t9685);
t9009 = t10621 / 0.2e1 + t9038;
t9222 = t10396 / 0.2e1 + t10757;
t9888 = t9425 * (t10497 * (t10457 * t9219 + t9222 * t9686) + t10435 * t10870 + 0.2e1 * t9009 * t9691);
t9887 = t9425 * (t10497 * (-t10460 * t9219 + t9222 * t9691) - 0.2e1 * t10457 * t9005 - 0.2e1 * t9009 * t9686);
t9847 = t9433 * (-t9037 * t9518 + t9379 * (t9689 - t10173));
t9846 = t9433 * (t9037 * (pkin(1) * t10613 - t10461) + t9379 * t10901);
t9845 = t9434 * (-t9038 * t9519 + t9380 * (t9691 - t10172));
t9844 = t9434 * (t9038 * (pkin(1) * t10610 - t10460) + t9380 * t10900);
t9843 = t9435 * (-t9039 * t9517 + t9381 * (t9693 - t10171));
t9842 = t9435 * (t9039 * (pkin(1) * t10607 - t10459) + t9381 * t10899);
t9014 = 0.2e1 * t9036 + t9019;
t9229 = 0.2e1 * t9375 + t9312;
t9841 = t9421 * (t9229 * t9312 * t9761 + t9014 * t9752);
t9840 = t9421 * (-t10387 * t9229 + t9014 * t9761);
t9010 = 0.2e1 * t9034 + t9020;
t9223 = 0.2e1 * t9373 + t9308;
t9839 = t9423 * (t9223 * t9308 * t9755 + t9010 * t9746);
t9838 = t9423 * (-t10402 * t9223 + t9010 * t9755);
t9012 = 0.2e1 * t9035 + t9021;
t9226 = 0.2e1 * t9374 + t9310;
t9837 = t9425 * (t9226 * t9310 * t9758 + t9012 * t9749);
t9836 = t9425 * (-t10394 * t9226 + t9012 * t9758);
t9817 = 0.4e1 * t10406 * t9424 * t9641 + 0.2e1 * t10599 * t10782;
t9816 = 0.2e1 * t10139 * t10734 + t10427;
t9815 = 0.4e1 * t10398 * t9426 * t9642 + 0.2e1 * t10589 * t10779;
t9814 = 0.2e1 * t10134 * t10732 + t10423;
t9813 = 0.4e1 * t10390 * t9422 * t9643 + 0.2e1 * t10579 * t10776;
t9812 = 0.2e1 * t10129 * t10736 + t10419;
t9230 = t9375 + 0.2e1 * t9312;
t9227 = t9374 + 0.2e1 * t9310;
t9224 = t9373 + 0.2e1 * t9308;
t9171 = t10084 * t9730 + t9230 * t9751;
t9170 = t10091 * t9730 + t9227 * t9748;
t9169 = t10098 * t9730 + t9224 * t9745;
t9168 = t9230 * t9760 - t9942;
t9167 = t9227 * t9757 - t9949;
t9166 = t9224 * t9754 - t9956;
t9090 = (t10187 * t9381 + t10527 - 0.2e1 * t9934) * t10582 - t10836 * t9231 * t10086;
t9089 = (t10188 * t9380 + t10528 - 0.2e1 * t9935) * t10592 - t10839 * t9228 * t10093;
t9088 = (t10189 * t9379 + t10529 - 0.2e1 * t9936) * t10602 - t10842 * t9225 * t10099;
t9075 = (-0.2e1 * t9311 + t9372 + 0.2e1 * t9381) * t9722 + (0.4e1 * t10057 * t9231 - t10271 * t10835) * t10756 + (t10672 * t10836 + t9724) * t9381 - t10527;
t9074 = (-0.2e1 * t9309 + t9371 + 0.2e1 * t9380) * t9718 + (0.4e1 * t10059 * t9228 - t10396 * t10838) * t10757 + (t10673 * t10839 + t9720) * t9380 - t10528;
t9073 = (-0.2e1 * t9307 + t9370 + 0.2e1 * t9379) * t9714 + (0.4e1 * t10061 * t9225 - t10404 * t10841) * t10758 + (t10674 * t10842 + t9716) * t9379 - t10529;
t8988 = -t10275 * t9039 + t9015 * t9760;
t8987 = -t10279 * t9038 + t9013 * t9757;
t8986 = -t10283 * t9037 + t9011 * t9754;
t1 = [(t10741 * t9039 + t10742 * t9038 + t10743 * t9037) * MDP(1) + (-t9385 * t9966 - t9386 * t9964 - t9387 * t9962 + t9406 * t9816 + t9407 * t9814 + t9408 * t9812) * t10795 + (-t10759 * t9315 - t10760 * t9314 - t10761 * t9313 + t9406 * t9817 + t9407 * t9815 + t9408 * t9813) * t10794 + (t9385 * t10426 + t9386 * t10422 + t9387 * t10418 + t9408 * t9841 + t9407 * t9837 + t9406 * t9839 + (-t10104 * t9387 - t10106 * t9386 - t10108 * t9385) * t9731) * t10793 + (t9385 * t10425 + t9386 * t10421 + t9387 * t10417 + t9408 * t9840 + t9407 * t9836 + t9406 * t9838 + (t10105 * t9387 + t10107 * t9386 + t10109 * t9385) * t9731) * t10792 + (t9011 * t10761 + t9013 * t10760 + t9015 * t10759 + (t10741 * t9015 + t10742 * t9013 + t10743 * t9011) * t9731) * MDP(8) + (t9385 * t9846 + t9386 * t9844 + t9387 * t9842 + t9406 * t9890 + t9407 * t9888 + t9408 * t9892) * MDP(9) + (t9385 * t9847 + t9386 * t9845 + t9387 * t9843 + t9406 * t9889 + t9407 * t9887 + t9408 * t9891) * MDP(10) + (t9408 * t10228 + t9407 * t10216 + t9406 * t10222 + t9387 * t9984 + t9386 * t9987 + t9385 * t9990 + (t10750 * t9090 + t10751 * t9089 + t10752 * t9088) * t9786) * MDP(11) + (t9408 * t10229 + t9407 * t10217 + t9406 * t10223 + t9387 * t10205 + t9386 * t10208 + t9385 * t10211 + (t10750 * t9075 + t10751 * t9074 + t10752 * t9073) * t9786) * MDP(12) + (t9408 * t10226 + t9407 * t10214 + t9406 * t10220 + t9387 * t9982 + t9386 * t9985 + t9385 * t9988 + (t8989 * t10752 + t8990 * t10751 + t8991 * t10750 + (t9166 * t9959 + t9167 * t9952 + t9168 * t9945) * t9730) * t9786) * MDP(13) + (t9408 * t10227 + t9407 * t10215 + t9406 * t10221 + t9387 * t9983 + t9386 * t9986 + t9385 * t9989 + (t8986 * t10752 + t8987 * t10751 + t8988 * t10750 + (-t9169 * t9959 - t9170 * t9952 - t9171 * t9945) * t9730) * t9786) * MDP(14) + ((-t10750 * t8997 - t10751 * t8996 - t10752 * t8995) * t9786 + ((t9407 * t10787 + (t9386 * t10408 + (t10351 * t9398 + t9407 * t10866) * t9310) * t9749) * t9425 + (t9406 * t10788 + (t9385 * t10409 + (t10360 * t9397 + t9406 * t10867) * t9308) * t9746) * t9423 + (t9408 * t10786 + (t9387 * t10407 + (t10342 * t9399 + t9408 * t10865) * t9312) * t9752) * t9421) * t9730) * MDP(15) + (t9408 * t10230 + t9407 * t10218 + t9406 * t10224 + t9387 * t10206 + t9386 * t10209 + t9385 * t10212 + (t10200 * t9399 + t10202 * t9398 + t10204 * t9397) * t9786) * MDP(16) + (t9408 * t10231 + t9407 * t10219 + t9406 * t10225 + t9387 * t10207 + t9386 * t10210 + t9385 * t10213 + (t10199 * t9399 + t10201 * t9398 + t10203 * t9397) * t9786) * MDP(17); (t10738 * t9039 + t10739 * t9038 + t10740 * t9037) * MDP(1) + (-t9382 * t9966 - t9383 * t9964 - t9384 * t9962 + t9409 * t9816 + t9410 * t9814 + t9411 * t9812) * t10795 + (-t10762 * t9315 - t10763 * t9314 - t10764 * t9313 + t9409 * t9817 + t9410 * t9815 + t9411 * t9813) * t10794 + (t9382 * t10426 + t9383 * t10422 + t9384 * t10418 + t9411 * t9841 + t9410 * t9837 + t9409 * t9839 + (-t10104 * t9384 - t10106 * t9383 - t10108 * t9382) * t9731) * t10793 + (t9382 * t10425 + t9383 * t10421 + t9384 * t10417 + t9411 * t9840 + t9410 * t9836 + t9409 * t9838 + (t10105 * t9384 + t10107 * t9383 + t10109 * t9382) * t9731) * t10792 + (t9011 * t10764 + t9013 * t10763 + t9015 * t10762 + (t10738 * t9015 + t10739 * t9013 + t10740 * t9011) * t9731) * MDP(8) + (t9382 * t9846 + t9383 * t9844 + t9384 * t9842 + t9409 * t9890 + t9410 * t9888 + t9411 * t9892) * MDP(9) + (t9382 * t9847 + t9383 * t9845 + t9384 * t9843 + t9409 * t9889 + t9410 * t9887 + t9411 * t9891) * MDP(10) + (t9411 * t10228 + t9410 * t10216 + t9409 * t10222 + t9384 * t9984 + t9383 * t9987 + t9382 * t9990 + (t10753 * t9090 + t10754 * t9089 + t10755 * t9088) * t9786) * MDP(11) + (t9411 * t10229 + t9410 * t10217 + t9409 * t10223 + t9384 * t10205 + t9383 * t10208 + t9382 * t10211 + (t10753 * t9075 + t10754 * t9074 + t10755 * t9073) * t9786) * MDP(12) + (t9411 * t10226 + t9410 * t10214 + t9409 * t10220 + t9384 * t9982 + t9383 * t9985 + t9382 * t9988 + (t8989 * t10755 + t8990 * t10754 + t8991 * t10753 + (t9166 * t9960 + t9167 * t9953 + t9168 * t9946) * t9730) * t9786) * MDP(13) + (t9411 * t10227 + t9410 * t10215 + t9409 * t10221 + t9384 * t9983 + t9383 * t9986 + t9382 * t9989 + (t8986 * t10755 + t8987 * t10754 + t8988 * t10753 + (-t9169 * t9960 - t9170 * t9953 - t9171 * t9946) * t9730) * t9786) * MDP(14) + ((-t10753 * t8997 - t10754 * t8996 - t10755 * t8995) * t9786 + ((t9410 * t10787 + (t9383 * t10408 + (t10351 * t9395 + t9410 * t10866) * t9310) * t9749) * t9425 + (t9409 * t10788 + (t9382 * t10409 + (t10360 * t9394 + t9409 * t10867) * t9308) * t9746) * t9423 + (t9411 * t10786 + (t9384 * t10407 + (t10342 * t9396 + t9411 * t10865) * t9312) * t9752) * t9421) * t9730) * MDP(15) + (t9411 * t10230 + t9410 * t10218 + t9409 * t10224 + t9384 * t10206 + t9383 * t10209 + t9382 * t10212 + (t10200 * t9396 + t10202 * t9395 + t10204 * t9394) * t9786) * MDP(16) + (t9411 * t10231 + t9410 * t10219 + t9409 * t10225 + t9384 * t10207 + t9383 * t10210 + t9382 * t10213 + (t10199 * t9396 + t10201 * t9395 + t10203 * t9394) * t9786) * MDP(17); (t10733 * t9038 + t10735 * t9037 + t10737 * t9039) * MDP(1) + (t9454 * t10427 + t9455 * t10423 + t9456 * t10419 + (0.2e1 * t10398 * t9455 - t10745 * t9389) * t9426 * t10589 + (0.2e1 * t10406 * t9454 - t10746 * t9388) * t9424 * t10599 + (0.2e1 * t10390 * t9456 - t10744 * t9390) * t9422 * t10579) * t10795 + (-t10744 * t9315 - t10745 * t9314 - t10746 * t9313 + t9454 * t9817 + t9455 * t9815 + t9456 * t9813) * t10794 + (t9037 * t10341 + t9038 * t10340 + t9039 * t10339 + t9455 * t9837 + t9454 * t9839 + t9456 * t9841 + (-t10104 * t9405 - t10106 * t9404 - t10108 * t9403) * t9731) * t10793 + (t9403 * t10425 + t9404 * t10421 + t9405 * t10417 + t9455 * t9836 + t9454 * t9838 + t9456 * t9840 + (t10105 * t9405 + t10107 * t9404 + t10109 * t9403) * t9731) * t10792 + (t9011 * t10746 + t9013 * t10745 + t9015 * t10744 + (t10733 * t9013 + t10735 * t9011 + t10737 * t9015) * t9731) * MDP(8) + (t9403 * t9846 + t9404 * t9844 + t9405 * t9842 + t9454 * t9890 + t9455 * t9888 + t9456 * t9892) * MDP(9) + (t9403 * t9847 + t9404 * t9845 + t9405 * t9843 + t9454 * t9889 + t9455 * t9887 + t9456 * t9891) * MDP(10) + (t9455 * t10216 + t9454 * t10222 + t9456 * t10228 + t9405 * t9984 + t9404 * t9987 + t9403 * t9990 + (t10747 * t9090 + t10748 * t9089 + t10749 * t9088) * t10624) * MDP(11) + (t9455 * t10217 + t9454 * t10223 + t9456 * t10229 + t9405 * t10205 + t9404 * t10208 + t9403 * t10211 + (t10747 * t9075 + t10748 * t9074 + t10749 * t9073) * t10624) * MDP(12) + (t9455 * t10214 + t9454 * t10220 + t9456 * t10226 + t9405 * t9982 + t9404 * t9985 + t9403 * t9988 + ((t10747 * t8991 + t10748 * t8990 + t10749 * t8989) * t9730 + (t9166 * t9958 + t9167 * t9951 + t9168 * t9944) * t9705) * t9786) * MDP(13) + (t9455 * t10215 + t9454 * t10221 + t9456 * t10227 + t9405 * t9983 + t9404 * t9986 + t9403 * t9989 + ((t10747 * t8988 + t10748 * t8987 + t10749 * t8986) * t9730 + (-t9169 * t9958 - t9170 * t9951 - t9171 * t9944) * t9705) * t9786) * MDP(14) + ((t10747 * t9971 + t10748 * t9973 + t10749 * t9975) * t9786 * t9705 + ((-t10747 * t8997 - t10748 * t8996 - t10749 * t8995) * t9786 + (t10340 * t10916 + (t10394 * t10866 + t10787) * t9455) * t9425 + (t10341 * t10917 + (t10402 * t10867 + t10788) * t9454) * t9423 + (t10339 * t10915 + (t10387 * t10865 + t10786) * t9456) * t9421) * t9730) * MDP(15) + (t9455 * t10218 + t9454 * t10224 + t9456 * t10230 + t9405 * t10206 + t9404 * t10209 + t9403 * t10212 + (t10553 * t10747 + t10555 * t10748 + t10556 * t10749) * t10624) * MDP(16) + (t9455 * t10219 + t9454 * t10225 + t9456 * t10231 + t9405 * t10207 + t9404 * t10210 + t9403 * t10213 + (t10551 * t10749 + t10552 * t10747 + t10554 * t10748) * t10624) * MDP(17);];
taucX  = t1;
