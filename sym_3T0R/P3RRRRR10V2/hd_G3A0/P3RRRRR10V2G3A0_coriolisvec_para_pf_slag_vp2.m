% Calculate vector of centrifugal and coriolis load on the joints for
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% taucX [3x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_coriolisvec_para_pf_slag_vp2: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 02:26:59
% EndTime: 2020-08-07 02:30:41
% DurationCPUTime: 234.70s
% Computational Cost: add. (1778043->2213), mult. (3363150->3197), div. (45837->25), fcn. (2747364->26), ass. (0->1249)
t2842 = pkin(7) * mrSges(3,1) - Ifges(3,5);
t2939 = sin(qJ(3,3));
t2734 = t2842 * t2939;
t3770 = mrSges(3,2) * pkin(7);
t2839 = -Ifges(3,6) + t3770;
t2948 = cos(qJ(3,3));
t2660 = t2839 * t2948 + t2734;
t2851 = pkin(7) * m(3) + mrSges(3,3);
t2818 = -mrSges(2,2) + t2851;
t3872 = t2818 * pkin(6) + Ifges(2,6);
t3875 = t3872 + t2660;
t2942 = sin(qJ(3,2));
t2735 = t2842 * t2942;
t2951 = cos(qJ(3,2));
t2661 = t2839 * t2951 + t2735;
t3874 = t3872 + t2661;
t2945 = sin(qJ(3,1));
t2736 = t2842 * t2945;
t2954 = cos(qJ(3,1));
t2662 = t2839 * t2954 + t2736;
t3873 = t3872 + t2662;
t2965 = pkin(8) + pkin(7);
t2884 = pkin(1) * t2965;
t2946 = sin(qJ(2,1));
t2863 = t2954 * pkin(3);
t2893 = pkin(2) + t2965;
t2894 = pkin(2) - t2965;
t3604 = (t2863 + t2893) * (t2863 + t2894);
t3266 = t2946 * t3604;
t2644 = t2884 - t3266;
t2871 = pkin(1) * t2946;
t2755 = t2965 + t2871;
t2855 = t2945 * pkin(3);
t2789 = t2855 + pkin(6);
t2938 = legFrame(1,2);
t2847 = sin(t2938);
t2850 = cos(t2938);
t2923 = cos(pkin(4));
t2892 = t2923 ^ 2;
t2922 = sin(pkin(4));
t2955 = cos(qJ(2,1));
t2916 = t2955 ^ 2;
t3560 = (t2923 + 0.1e1) * (t2923 - 0.1e1);
t3254 = t2916 * t3560;
t3846 = t2863 + pkin(2);
t3090 = -0.2e1 * t3846 * t3254;
t2947 = sin(qJ(1,1));
t3554 = t2847 * t2947;
t3258 = t3846 * t3554;
t3115 = t2789 * t3258;
t3488 = t2946 * t2947;
t3243 = t2847 * t3488;
t3124 = t2789 * t3243;
t3129 = t2947 * t3266;
t2966 = 0.2e1 * t2965;
t3486 = t2946 * t2966;
t2749 = pkin(1) + t3486;
t2956 = cos(qJ(1,1));
t3263 = t2749 * t3846 * t2956;
t3483 = t2947 * t2965;
t3217 = t2923 * t3483;
t3269 = (t2956 * t3604 + 0.2e1 * t3217 * t3846) * t2916 * t2922;
t3549 = t2850 * t2946;
t3572 = t3846 * t2850;
t3595 = t2755 * t2956;
t2563 = t2847 * t3269 + (((-t2789 * t3572 - t2847 * t3129) * t2923 + t2847 * t3263) * t2922 + (t2850 * t3266 - t3115) * t2892 + t3115 + t2850 * t2644) * t2955 - t2755 * t3572 + (t2850 * t3090 + ((-t2789 * t3549 - t3258) * t2923 + t2847 * t3595) * t2922 + (-t3124 + t3572) * t2892 + t3124) * t2965;
t3548 = t2850 * t2947;
t3257 = t3846 * t3548;
t3114 = t2789 * t3257;
t3237 = t2850 * t3488;
t3123 = t2789 * t3237;
t3555 = t2847 * t2946;
t3573 = t3846 * t2847;
t2566 = -t2850 * t3269 + (((-t2789 * t3573 + t2850 * t3129) * t2923 - t2850 * t3263) * t2922 + (t2847 * t3266 + t3114) * t2892 - t3114 + t2847 * t2644) * t2955 - t2755 * t3573 + (t2847 * t3090 - ((t2789 * t3555 - t3257) * t2923 + t2850 * t3595) * t2922 + (t3123 + t3573) * t2892 - t3123) * t2965;
t3712 = pkin(6) * t2954;
t3733 = pkin(2) * t2945;
t2710 = t3712 - t3733;
t3509 = t2923 * t2954;
t3358 = pkin(1) * t3509;
t3571 = t3846 * t2922;
t3507 = t2923 * t2965;
t2751 = pkin(1) * t3507;
t3598 = t2751 * t2954;
t3858 = t2946 * t3846;
t3030 = -t3358 * t3858 + (-t2710 * t3571 + t3598) * t2955;
t3466 = t2965 * t2946;
t3743 = pkin(1) * t2945;
t2617 = 0.1e1 / ((-t2710 * t3466 + t3743 * t3846) * t2922 + t3030);
t2962 = xDP(3);
t2989 = 0.1e1 / pkin(3);
t3520 = t2922 * t2989;
t3223 = t2962 * t3520;
t2964 = xDP(1);
t3472 = t2964 * t2989;
t2963 = xDP(2);
t3473 = t2963 * t2989;
t3474 = t2956 * t2965;
t2689 = -pkin(2) * t2947 + t2923 * t3474;
t2838 = t2923 * pkin(2);
t3521 = t2922 * t2965;
t2690 = -pkin(1) * t2838 - pkin(6) * t3521;
t2914 = t2954 ^ 2;
t2988 = pkin(3) ^ 2;
t2862 = t2914 * t2988;
t2790 = t2855 - pkin(6);
t2990 = pkin(2) ^ 2;
t3535 = t2914 * t2946;
t3340 = pkin(3) * t3535;
t2746 = t3466 + pkin(1);
t3350 = t2746 * t3733;
t3720 = pkin(3) * t2914;
t3406 = pkin(6) * t3720;
t3729 = pkin(2) * t2954;
t3746 = pkin(1) * t2923;
t3018 = -t3340 * t3746 + (t3598 + (t2790 * t3729 + t2945 * t2990 - t3406) * t2922) * t2955 + t2922 * t3350;
t3196 = -0.2e1 * pkin(2) * t3507;
t3475 = t2956 * t2946;
t3218 = t2923 * t3475;
t3544 = t2893 * t2894;
t3233 = t2923 * t3544;
t3514 = t2923 * t2946;
t3347 = pkin(2) * t3514;
t3364 = t2922 * t3743;
t3485 = t2947 * t2749;
t3529 = t2922 * t2946;
t3580 = t2789 * t2922;
t3613 = ((t2956 * t3196 - 0.2e1 * t2689 * t2863 + (t2862 + t3544) * t2947) * t2916 + (t3218 * t2862 + ((0.2e1 * t3347 - t3580) * t2956 + t3485) * t2863 + (-pkin(2) * t3580 + t2946 * t3233) * t2956 + pkin(2) * t3485) * t2955 + t2965 * (t2947 * t2755 + (pkin(3) * t3509 - t2789 * t3529 + t2838) * t2956)) / ((pkin(3) * t3364 + t2690 * t2946) * t2954 + t3018);
t2527 = t3223 * t3613 + (t2563 * t3473 + t2566 * t3472) * t2617;
t2521 = pkin(1) * t2527;
t2788 = pkin(6) * t2945 + pkin(3);
t2836 = t2916 - 0.2e1;
t3145 = t2836 * t2855 - pkin(6);
t2812 = t2965 * t2955;
t2722 = t2946 * t2812;
t2864 = t2916 * pkin(2);
t3434 = t2722 + t2864;
t3851 = -pkin(2) + t3434;
t2999 = -t2945 * t3851 - t3145 * t2954;
t3490 = t2945 * t2947;
t3012 = t3851 * t3490;
t3487 = t2946 * t2955;
t3344 = pkin(2) * t3487;
t3046 = -t2916 * t2965 + t3344;
t2656 = t3046 + t2755;
t3522 = t2922 * t2956;
t3021 = pkin(6) * t3488 + t2656 * t3522;
t3732 = pkin(2) * t2946;
t2705 = t2812 - t3732;
t3033 = t2922 * t2705;
t3080 = t2746 * t2955 + t2864;
t3523 = t2922 * t2955;
t3120 = t3475 * t3523;
t3152 = pkin(3) * t3243;
t3238 = t2850 * t3529;
t3476 = t2955 * t2956;
t2868 = pkin(2) * t2955;
t3427 = t3466 + t2868;
t2697 = pkin(1) + t3427;
t3528 = t2922 * t2947;
t3803 = -t2697 * t2956 + t3145 * t3528;
t3412 = 0.2e1 * t3720;
t3804 = t2946 * (-t2788 + t3412 + t3729) - t2954 * t2812;
t2557 = (t2999 * t2850 + t3554 * t3804) * t2892 + (-(t2847 * t3476 - 0.2e1 * t3238) * t3720 + (t2847 * t3803 - t2850 * t3033) * t2954 + t2922 * (-t2788 * t3549 + t2847 * t3012)) * t2923 - t2914 * t3152 + ((t2847 * t3120 + t2850 * t2916 - t2850) * t2855 - t2850 * pkin(6)) * t2954 + (t2847 * t3021 + t2850 * t3080) * t2945 + t3152;
t3151 = pkin(3) * t3237;
t3244 = t2847 * t3529;
t2560 = (t2999 * t2847 - t3548 * t3804) * t2892 + ((t2850 * t3476 + 0.2e1 * t3244) * t3720 + (-t2847 * t3033 - t2850 * t3803) * t2954 - t2922 * (t2788 * t3555 + t2850 * t3012)) * t2923 + t2914 * t3151 + (-(-t2847 * t2916 + t2850 * t3120 + t2847) * t2855 - t2847 * pkin(6)) * t2954 + (t2847 * t3080 - t2850 * t3021) * t2945 - t3151;
t2796 = t2868 + pkin(1);
t3250 = t2946 * t3560;
t3335 = pkin(3) * t3490;
t3423 = t2892 - 0.1e1 / 0.2e1;
t3484 = t2947 * t2955;
t3508 = t2923 * t2956;
t3545 = (t2955 + 0.1e1) * (t2955 - 0.1e1);
t3762 = t2923 / 0.2e1;
t2584 = ((-t3145 * t3508 + t3335 * t3487) * t2954 + (-t3851 * t3508 + t2947 * (t2796 * t2946 - t2965 * t3545)) * t2945) * t2922 - 0.2e1 * (t3423 * t3475 + t3484 * t3762) * t3720 - (t2697 * t2947 - t2705 * t3508) * t3509 + t2956 * t2788 * t3250;
t2641 = (t2812 - t3858) * t3358;
t2650 = -pkin(6) * t3427 + t2796 * t2855;
t2665 = t2697 * t3733;
t3073 = -t2955 * t3406 + t2665;
t2614 = 0.1e1 / ((t2650 * t2954 + t3073) * t2922 + t2641);
t2494 = (t2557 * t2963 + t2560 * t2964 + t2584 * t2962) * t2614;
t3654 = t2494 * t2945;
t2448 = pkin(3) * t3654;
t2483 = pkin(6) * t2494;
t2512 = pkin(8) * t2527;
t3447 = t2483 + t2512;
t3819 = -pkin(7) * t2527 - t2448 - t3447;
t3055 = t2946 * t3819;
t3870 = -t3055 + t2521;
t2943 = sin(qJ(2,2));
t2860 = t2951 * pkin(3);
t3605 = (t2860 + t2893) * (t2860 + t2894);
t3267 = t2943 * t3605;
t2643 = t2884 - t3267;
t2870 = pkin(1) * t2943;
t2754 = t2965 + t2870;
t2854 = t2942 * pkin(3);
t2786 = t2854 + pkin(6);
t2937 = legFrame(2,2);
t2846 = sin(t2937);
t2849 = cos(t2937);
t2952 = cos(qJ(2,2));
t2912 = t2952 ^ 2;
t3255 = t2912 * t3560;
t3847 = t2860 + pkin(2);
t3091 = -0.2e1 * t3847 * t3255;
t2944 = sin(qJ(1,2));
t3556 = t2846 * t2944;
t3260 = t3847 * t3556;
t3117 = t2786 * t3260;
t3496 = t2943 * t2944;
t3245 = t2846 * t3496;
t3126 = t2786 * t3245;
t3131 = t2944 * t3267;
t3494 = t2943 * t2966;
t2748 = pkin(1) + t3494;
t2953 = cos(qJ(1,2));
t3264 = t2748 * t3847 * t2953;
t3491 = t2944 * t2965;
t3219 = t2923 * t3491;
t3270 = (t2953 * t3605 + 0.2e1 * t3219 * t3847) * t2912 * t2922;
t3551 = t2849 * t2943;
t3575 = t3847 * t2849;
t3596 = t2754 * t2953;
t2562 = t2846 * t3270 + (((-t2786 * t3575 - t2846 * t3131) * t2923 + t2846 * t3264) * t2922 + (t2849 * t3267 - t3117) * t2892 + t3117 + t2849 * t2643) * t2952 - t2754 * t3575 + (t2849 * t3091 + ((-t2786 * t3551 - t3260) * t2923 + t2846 * t3596) * t2922 + (-t3126 + t3575) * t2892 + t3126) * t2965;
t3550 = t2849 * t2944;
t3259 = t3847 * t3550;
t3116 = t2786 * t3259;
t3239 = t2849 * t3496;
t3125 = t2786 * t3239;
t3557 = t2846 * t2943;
t3576 = t3847 * t2846;
t2565 = -t2849 * t3270 + (((-t2786 * t3576 + t2849 * t3131) * t2923 - t2849 * t3264) * t2922 + (t2846 * t3267 + t3116) * t2892 - t3116 + t2846 * t2643) * t2952 - t2754 * t3576 + (t2846 * t3091 - ((t2786 * t3557 - t3259) * t2923 + t2849 * t3596) * t2922 + (t3125 + t3576) * t2892 - t3125) * t2965;
t3714 = pkin(6) * t2951;
t3735 = pkin(2) * t2942;
t2709 = t3714 - t3735;
t3511 = t2923 * t2951;
t3359 = pkin(1) * t3511;
t3574 = t3847 * t2922;
t3599 = t2751 * t2951;
t3859 = t2943 * t3847;
t3031 = -t3359 * t3859 + (-t2709 * t3574 + t3599) * t2952;
t3467 = t2965 * t2943;
t3744 = pkin(1) * t2942;
t2616 = 0.1e1 / ((-t2709 * t3467 + t3744 * t3847) * t2922 + t3031);
t3477 = t2953 * t2965;
t2688 = -pkin(2) * t2944 + t2923 * t3477;
t2910 = t2951 ^ 2;
t2859 = t2910 * t2988;
t2787 = t2854 - pkin(6);
t3538 = t2910 * t2943;
t3336 = pkin(3) * t3538;
t2745 = t3467 + pkin(1);
t3351 = t2745 * t3735;
t3721 = pkin(3) * t2910;
t3407 = pkin(6) * t3721;
t3730 = pkin(2) * t2951;
t3019 = -t3336 * t3746 + (t3599 + (t2787 * t3730 + t2942 * t2990 - t3407) * t2922) * t2952 + t2922 * t3351;
t3478 = t2953 * t2943;
t3220 = t2923 * t3478;
t3516 = t2923 * t2943;
t3348 = pkin(2) * t3516;
t3365 = t2922 * t3744;
t3493 = t2944 * t2748;
t3531 = t2922 * t2943;
t3584 = t2786 * t2922;
t3614 = ((t2953 * t3196 - 0.2e1 * t2688 * t2860 + (t2859 + t3544) * t2944) * t2912 + (t3220 * t2859 + ((0.2e1 * t3348 - t3584) * t2953 + t3493) * t2860 + (-pkin(2) * t3584 + t2943 * t3233) * t2953 + pkin(2) * t3493) * t2952 + t2965 * (t2944 * t2754 + (pkin(3) * t3511 - t2786 * t3531 + t2838) * t2953)) / ((pkin(3) * t3365 + t2690 * t2943) * t2951 + t3019);
t2526 = t3223 * t3614 + (t2562 * t3473 + t2565 * t3472) * t2616;
t2520 = pkin(1) * t2526;
t2785 = pkin(6) * t2942 + pkin(3);
t2835 = t2912 - 0.2e1;
t3146 = t2835 * t2854 - pkin(6);
t2811 = t2965 * t2952;
t2721 = t2943 * t2811;
t2861 = t2912 * pkin(2);
t3435 = t2721 + t2861;
t3850 = -pkin(2) + t3435;
t3000 = -t2942 * t3850 - t3146 * t2951;
t3498 = t2942 * t2944;
t3013 = t3850 * t3498;
t3495 = t2943 * t2952;
t3345 = pkin(2) * t3495;
t3047 = -t2912 * t2965 + t3345;
t2655 = t3047 + t2754;
t3524 = t2922 * t2953;
t3022 = pkin(6) * t3496 + t2655 * t3524;
t3734 = pkin(2) * t2943;
t2704 = t2811 - t3734;
t3034 = t2922 * t2704;
t3081 = t2745 * t2952 + t2861;
t3525 = t2922 * t2952;
t3121 = t3478 * t3525;
t3155 = pkin(3) * t3245;
t3240 = t2849 * t3531;
t3479 = t2952 * t2953;
t2867 = pkin(2) * t2952;
t3428 = t3467 + t2867;
t2696 = pkin(1) + t3428;
t3530 = t2922 * t2944;
t3802 = -t2696 * t2953 + t3146 * t3530;
t3413 = 0.2e1 * t3721;
t3805 = t2943 * (-t2785 + t3413 + t3730) - t2951 * t2811;
t2556 = (t3000 * t2849 + t3556 * t3805) * t2892 + (-(t2846 * t3479 - 0.2e1 * t3240) * t3721 + (t2846 * t3802 - t2849 * t3034) * t2951 + t2922 * (-t2785 * t3551 + t2846 * t3013)) * t2923 - t2910 * t3155 + ((t2846 * t3121 + t2849 * t2912 - t2849) * t2854 - t2849 * pkin(6)) * t2951 + (t2846 * t3022 + t2849 * t3081) * t2942 + t3155;
t3154 = pkin(3) * t3239;
t3246 = t2846 * t3531;
t2559 = (t3000 * t2846 - t3550 * t3805) * t2892 + ((t2849 * t3479 + 0.2e1 * t3246) * t3721 + (-t2846 * t3034 - t2849 * t3802) * t2951 - t2922 * (t2785 * t3557 + t2849 * t3013)) * t2923 + t2910 * t3154 + (-(-t2846 * t2912 + t2849 * t3121 + t2846) * t2854 - t2846 * pkin(6)) * t2951 + (t2846 * t3081 - t2849 * t3022) * t2942 - t3154;
t2795 = t2867 + pkin(1);
t3251 = t2943 * t3560;
t3337 = pkin(3) * t3498;
t3492 = t2944 * t2952;
t3510 = t2923 * t2953;
t3546 = (t2952 + 0.1e1) * (t2952 - 0.1e1);
t2583 = ((-t3146 * t3510 + t3337 * t3495) * t2951 + (-t3850 * t3510 + t2944 * (t2795 * t2943 - t2965 * t3546)) * t2942) * t2922 - 0.2e1 * (t3423 * t3478 + t3492 * t3762) * t3721 - (t2696 * t2944 - t2704 * t3510) * t3511 + t2953 * t2785 * t3251;
t2640 = (t2811 - t3859) * t3359;
t2649 = -pkin(6) * t3428 + t2795 * t2854;
t2664 = t2696 * t3735;
t3074 = -t2952 * t3407 + t2664;
t2613 = 0.1e1 / ((t2649 * t2951 + t3074) * t2922 + t2640);
t2493 = (t2556 * t2963 + t2559 * t2964 + t2583 * t2962) * t2613;
t3658 = t2493 * t2942;
t2446 = pkin(3) * t3658;
t2482 = pkin(6) * t2493;
t2511 = pkin(8) * t2526;
t3448 = t2482 + t2511;
t3818 = -pkin(7) * t2526 - t2446 - t3448;
t3056 = t2943 * t3818;
t3869 = -t3056 + t2520;
t2940 = sin(qJ(2,3));
t2857 = t2948 * pkin(3);
t3606 = (t2857 + t2893) * (t2857 + t2894);
t3268 = t2940 * t3606;
t2642 = t2884 - t3268;
t2869 = pkin(1) * t2940;
t2753 = t2965 + t2869;
t2853 = t2939 * pkin(3);
t2783 = t2853 + pkin(6);
t2936 = legFrame(3,2);
t2845 = sin(t2936);
t2848 = cos(t2936);
t2949 = cos(qJ(2,3));
t2908 = t2949 ^ 2;
t3256 = t2908 * t3560;
t3848 = t2857 + pkin(2);
t3092 = -0.2e1 * t3848 * t3256;
t2941 = sin(qJ(1,3));
t3558 = t2845 * t2941;
t3262 = t3848 * t3558;
t3119 = t2783 * t3262;
t3504 = t2940 * t2941;
t3247 = t2845 * t3504;
t3128 = t2783 * t3247;
t3133 = t2941 * t3268;
t3502 = t2940 * t2966;
t2747 = pkin(1) + t3502;
t2950 = cos(qJ(1,3));
t3265 = t2747 * t3848 * t2950;
t3499 = t2941 * t2965;
t3221 = t2923 * t3499;
t3271 = (t2950 * t3606 + 0.2e1 * t3221 * t3848) * t2908 * t2922;
t3553 = t2848 * t2940;
t3578 = t3848 * t2848;
t3597 = t2753 * t2950;
t2561 = t2845 * t3271 + (((-t2783 * t3578 - t2845 * t3133) * t2923 + t2845 * t3265) * t2922 + (t2848 * t3268 - t3119) * t2892 + t3119 + t2848 * t2642) * t2949 - t2753 * t3578 + (t2848 * t3092 + ((-t2783 * t3553 - t3262) * t2923 + t2845 * t3597) * t2922 + (-t3128 + t3578) * t2892 + t3128) * t2965;
t3552 = t2848 * t2941;
t3261 = t3848 * t3552;
t3118 = t2783 * t3261;
t3241 = t2848 * t3504;
t3127 = t2783 * t3241;
t3559 = t2845 * t2940;
t3579 = t3848 * t2845;
t2564 = -t2848 * t3271 + (((-t2783 * t3579 + t2848 * t3133) * t2923 - t2848 * t3265) * t2922 + (t2845 * t3268 + t3118) * t2892 - t3118 + t2845 * t2642) * t2949 - t2753 * t3579 + (t2845 * t3092 - ((t2783 * t3559 - t3261) * t2923 + t2848 * t3597) * t2922 + (t3127 + t3579) * t2892 - t3127) * t2965;
t3716 = pkin(6) * t2948;
t3737 = pkin(2) * t2939;
t2708 = t3716 - t3737;
t3513 = t2923 * t2948;
t3360 = pkin(1) * t3513;
t3577 = t3848 * t2922;
t3600 = t2751 * t2948;
t3860 = t2940 * t3848;
t3032 = -t3360 * t3860 + (-t2708 * t3577 + t3600) * t2949;
t3468 = t2965 * t2940;
t3745 = pkin(1) * t2939;
t2615 = 0.1e1 / ((-t2708 * t3468 + t3745 * t3848) * t2922 + t3032);
t3480 = t2950 * t2965;
t2687 = -pkin(2) * t2941 + t2923 * t3480;
t2906 = t2948 ^ 2;
t2856 = t2906 * t2988;
t2784 = t2853 - pkin(6);
t3541 = t2906 * t2940;
t3338 = pkin(3) * t3541;
t2744 = t3468 + pkin(1);
t3352 = t2744 * t3737;
t3722 = pkin(3) * t2906;
t3408 = pkin(6) * t3722;
t3731 = pkin(2) * t2948;
t3020 = -t3338 * t3746 + (t3600 + (t2784 * t3731 + t2939 * t2990 - t3408) * t2922) * t2949 + t2922 * t3352;
t3481 = t2950 * t2940;
t3222 = t2923 * t3481;
t3518 = t2923 * t2940;
t3349 = pkin(2) * t3518;
t3366 = t2922 * t3745;
t3501 = t2941 * t2747;
t3533 = t2922 * t2940;
t3588 = t2783 * t2922;
t3615 = ((t2950 * t3196 - 0.2e1 * t2687 * t2857 + (t2856 + t3544) * t2941) * t2908 + (t3222 * t2856 + ((0.2e1 * t3349 - t3588) * t2950 + t3501) * t2857 + (-pkin(2) * t3588 + t2940 * t3233) * t2950 + pkin(2) * t3501) * t2949 + t2965 * (t2941 * t2753 + (pkin(3) * t3513 - t2783 * t3533 + t2838) * t2950)) / ((pkin(3) * t3366 + t2690 * t2940) * t2948 + t3020);
t2525 = t3223 * t3615 + (t2561 * t3473 + t2564 * t3472) * t2615;
t2519 = pkin(1) * t2525;
t2782 = pkin(6) * t2939 + pkin(3);
t2834 = t2908 - 0.2e1;
t3147 = t2834 * t2853 - pkin(6);
t2810 = t2965 * t2949;
t2720 = t2940 * t2810;
t2858 = t2908 * pkin(2);
t3436 = t2720 + t2858;
t3849 = -pkin(2) + t3436;
t3001 = -t2939 * t3849 - t3147 * t2948;
t3506 = t2939 * t2941;
t3014 = t3849 * t3506;
t3503 = t2940 * t2949;
t3346 = pkin(2) * t3503;
t3048 = -t2908 * t2965 + t3346;
t2654 = t3048 + t2753;
t3526 = t2922 * t2950;
t3023 = pkin(6) * t3504 + t2654 * t3526;
t3736 = pkin(2) * t2940;
t2703 = t2810 - t3736;
t3035 = t2922 * t2703;
t3082 = t2744 * t2949 + t2858;
t3527 = t2922 * t2949;
t3122 = t3481 * t3527;
t3158 = pkin(3) * t3247;
t3242 = t2848 * t3533;
t3482 = t2949 * t2950;
t2866 = pkin(2) * t2949;
t3429 = t3468 + t2866;
t2695 = pkin(1) + t3429;
t3532 = t2922 * t2941;
t3801 = -t2695 * t2950 + t3147 * t3532;
t3414 = 0.2e1 * t3722;
t3806 = t2940 * (-t2782 + t3414 + t3731) - t2948 * t2810;
t2555 = (t3001 * t2848 + t3558 * t3806) * t2892 + (-(t2845 * t3482 - 0.2e1 * t3242) * t3722 + (t2845 * t3801 - t2848 * t3035) * t2948 + t2922 * (-t2782 * t3553 + t2845 * t3014)) * t2923 - t2906 * t3158 + ((t2845 * t3122 + t2848 * t2908 - t2848) * t2853 - t2848 * pkin(6)) * t2948 + (t2845 * t3023 + t2848 * t3082) * t2939 + t3158;
t3157 = pkin(3) * t3241;
t3248 = t2845 * t3533;
t2558 = (t3001 * t2845 - t3552 * t3806) * t2892 + ((t2848 * t3482 + 0.2e1 * t3248) * t3722 + (-t2845 * t3035 - t2848 * t3801) * t2948 - t2922 * (t2782 * t3559 + t2848 * t3014)) * t2923 + t2906 * t3157 + (-(-t2845 * t2908 + t2848 * t3122 + t2845) * t2853 - t2845 * pkin(6)) * t2948 + (t2845 * t3082 - t2848 * t3023) * t2939 - t3157;
t2794 = t2866 + pkin(1);
t3252 = t2940 * t3560;
t3339 = pkin(3) * t3506;
t3500 = t2941 * t2949;
t3512 = t2923 * t2950;
t3547 = (t2949 + 0.1e1) * (t2949 - 0.1e1);
t2582 = ((-t3147 * t3512 + t3339 * t3503) * t2948 + (-t3849 * t3512 + t2941 * (t2794 * t2940 - t2965 * t3547)) * t2939) * t2922 - 0.2e1 * (t3423 * t3481 + t3500 * t3762) * t3722 - (t2695 * t2941 - t2703 * t3512) * t3513 + t2950 * t2782 * t3252;
t2639 = (t2810 - t3860) * t3360;
t2648 = -pkin(6) * t3429 + t2794 * t2853;
t2663 = t2695 * t3737;
t3075 = -t2949 * t3408 + t2663;
t2612 = 0.1e1 / ((t2648 * t2948 + t3075) * t2922 + t2639);
t2492 = (t2555 * t2963 + t2558 * t2964 + t2582 * t2962) * t2612;
t3662 = t2492 * t2939;
t2444 = pkin(3) * t3662;
t2481 = pkin(6) * t2492;
t2510 = pkin(8) * t2525;
t3449 = t2481 + t2510;
t3817 = -pkin(7) * t2525 - t2444 - t3449;
t3057 = t2940 * t3817;
t3868 = -t3057 + t2519;
t2516 = pkin(6) * t2525;
t3660 = t2492 * t2965;
t3814 = t3660 - t2516;
t3672 = t3814 * t2949;
t2517 = pkin(6) * t2526;
t3656 = t2493 * t2965;
t3815 = t3656 - t2517;
t3671 = t3815 * t2952;
t2518 = pkin(6) * t2527;
t3652 = t2494 * t2965;
t3816 = t3652 - t2518;
t3670 = t3816 * t2955;
t2743 = t2851 * pkin(2) + Ifges(2,4);
t3061 = t2839 * t2945 - t2842 * t2954;
t2647 = t2743 - t3061;
t3062 = t2839 * t2942 - t2842 * t2951;
t2646 = t2743 - t3062;
t3063 = t2839 * t2939 - t2842 * t2948;
t2645 = t2743 - t3063;
t3691 = Ifges(3,4) * t2906;
t2822 = 0.2e1 * t3691;
t3772 = pkin(2) * pkin(6);
t2711 = m(3) * t3772 + pkin(6) * mrSges(2,1) + Ifges(3,4) - Ifges(2,5);
t2957 = pkin(6) * mrSges(3,2);
t3768 = pkin(2) * mrSges(3,1);
t2772 = -t2957 + t3768;
t3594 = t2772 * t2939;
t3038 = -t2711 - t3594;
t3867 = t2822 + t3038;
t3690 = Ifges(3,4) * t2910;
t2823 = 0.2e1 * t3690;
t3593 = t2772 * t2942;
t3037 = -t2711 - t3593;
t3866 = t2823 + t3037;
t3689 = Ifges(3,4) * t2914;
t2824 = 0.2e1 * t3689;
t3592 = t2772 * t2945;
t3036 = -t2711 - t3592;
t3865 = t2824 + t3036;
t3864 = 0.2e1 * t2906;
t3863 = 0.2e1 * t2910;
t3862 = 0.2e1 * t2914;
t3855 = 0.2e1 * t2892;
t3861 = t3855 - 0.2e1;
t3758 = t2912 - 0.1e1;
t3372 = t3758 * pkin(2);
t3760 = t2908 - 0.1e1;
t3373 = t3760 * pkin(2);
t2968 = pkin(8) * pkin(7);
t2985 = pkin(8) ^ 2;
t2986 = pkin(7) ^ 2;
t3421 = t2985 + t2986;
t3200 = 0.2e1 * t2968 + t3421;
t3795 = 0.2e1 * t2525;
t3794 = 0.2e1 * t2526;
t3793 = 0.2e1 * t2527;
t2891 = t2923 * t2892;
t3856 = -0.4e1 * t2891;
t3397 = 0.2e1 * t2922;
t3778 = 0.2e1 * t2949;
t3777 = 0.2e1 * t2952;
t3776 = 0.2e1 * t2955;
t3854 = -0.3e1 * t2965;
t3853 = -Ifges(2,1) - Ifges(3,2);
t3852 = -Ifges(3,1) - Ifges(2,3);
t3756 = t2916 - 0.1e1;
t2489 = t2492 ^ 2;
t3845 = Ifges(3,4) * t2489;
t2490 = t2493 ^ 2;
t3844 = Ifges(3,4) * t2490;
t2491 = t2494 ^ 2;
t3843 = Ifges(3,4) * t2491;
t2666 = -t2923 * t3504 + t3482;
t3519 = t2923 * t2939;
t3008 = -pkin(3) * t3519 + t3035;
t3011 = (-t2838 * t2941 + t3480) * t2940 + (pkin(2) * t2950 + t3221) * t2949 + t2922 * t3339;
t2588 = -(t2666 * t2848 + t3248) * t3722 + (t2845 * t3008 - t2848 * t3011) * t2948 - (t2845 * t2923 + t2848 * t3532) * t3737;
t2692 = pkin(1) * t2853 - pkin(6) * t3468;
t2651 = t2784 * t2866 + t2692;
t2669 = t2703 * t3746;
t3327 = pkin(6) * t3527;
t3363 = pkin(1) * t3518;
t3101 = t2922 * t2663 - (t3327 + t3363) * t3722;
t2606 = 0.1e1 / ((t2651 * t2922 + t2669) * t2948 + t3101);
t2573 = t2588 * t2606 * t2964;
t2591 = (t2666 * t2845 - t3242) * t3722 + (t2845 * t3011 + t2848 * t3008) * t2948 + (t2845 * t3532 - t2848 * t2923) * t3737;
t2576 = t2591 * t2606 * t2963;
t3226 = t2939 * t3526;
t2618 = (t3222 + t3500) * t3722 + (-pkin(3) * t3226 - t2687 * t2949 + (pkin(2) * t3512 + t3499) * t2940) * t2948 - pkin(2) * t3226;
t2585 = t2618 * t2606 * t2962;
t2540 = t2573 + t2576 + t2585;
t2537 = t2540 ^ 2;
t3842 = Ifges(3,4) * t2537;
t2667 = -t2923 * t3496 + t3479;
t3517 = t2923 * t2942;
t3007 = -pkin(3) * t3517 + t3034;
t3010 = (-t2838 * t2944 + t3477) * t2943 + (pkin(2) * t2953 + t3219) * t2952 + t2922 * t3337;
t2589 = -(t2667 * t2849 + t3246) * t3721 + (t2846 * t3007 - t2849 * t3010) * t2951 - (t2846 * t2923 + t2849 * t3530) * t3735;
t2693 = pkin(1) * t2854 - pkin(6) * t3467;
t2652 = t2787 * t2867 + t2693;
t2670 = t2704 * t3746;
t3326 = pkin(6) * t3525;
t3362 = pkin(1) * t3516;
t3100 = t2922 * t2664 - (t3326 + t3362) * t3721;
t2607 = 0.1e1 / ((t2652 * t2922 + t2670) * t2951 + t3100);
t2574 = t2589 * t2607 * t2964;
t2592 = (t2667 * t2846 - t3240) * t3721 + (t2846 * t3010 + t2849 * t3007) * t2951 + (t2846 * t3530 - t2849 * t2923) * t3735;
t2577 = t2592 * t2607 * t2963;
t3225 = t2942 * t3524;
t2619 = (t3220 + t3492) * t3721 + (-pkin(3) * t3225 - t2688 * t2952 + (pkin(2) * t3510 + t3491) * t2943) * t2951 - pkin(2) * t3225;
t2586 = t2619 * t2607 * t2962;
t2541 = t2574 + t2577 + t2586;
t2538 = t2541 ^ 2;
t3841 = Ifges(3,4) * t2538;
t2668 = -t2923 * t3488 + t3476;
t3515 = t2923 * t2945;
t3006 = -pkin(3) * t3515 + t3033;
t3009 = (-t2838 * t2947 + t3474) * t2946 + (pkin(2) * t2956 + t3217) * t2955 + t2922 * t3335;
t2590 = -(t2668 * t2850 + t3244) * t3720 + (t2847 * t3006 - t2850 * t3009) * t2954 - (t2847 * t2923 + t2850 * t3528) * t3733;
t2694 = pkin(1) * t2855 - pkin(6) * t3466;
t2653 = t2790 * t2868 + t2694;
t2671 = t2705 * t3746;
t3325 = pkin(6) * t3523;
t3361 = pkin(1) * t3514;
t3099 = t2922 * t2665 - (t3325 + t3361) * t3720;
t2608 = 0.1e1 / ((t2653 * t2922 + t2671) * t2954 + t3099);
t2575 = t2590 * t2608 * t2964;
t2593 = (t2668 * t2847 - t3238) * t3720 + (t2847 * t3009 + t2850 * t3006) * t2954 + (t2847 * t3528 - t2850 * t2923) * t3733;
t2578 = t2593 * t2608 * t2963;
t3224 = t2945 * t3522;
t2620 = (t3218 + t3484) * t3720 + (-pkin(3) * t3224 - t2689 * t2955 + (pkin(2) * t3508 + t3483) * t2946) * t2954 - pkin(2) * t3224;
t2587 = t2620 * t2608 * t2962;
t2542 = t2575 + t2578 + t2587;
t2539 = t2542 ^ 2;
t3840 = Ifges(3,4) * t2539;
t3650 = t2525 * t2939;
t3646 = t2526 * t2942;
t3642 = t2527 * t2945;
t3543 = t2948 * t2856;
t3540 = t2951 * t2859;
t3537 = t2954 * t2862;
t3643 = t2527 * t2922;
t2500 = pkin(1) * t3643;
t3739 = pkin(2) * t2542;
t2536 = 0.2e1 * t3739;
t3839 = (t2500 + t2536) * t2923;
t3647 = t2526 * t2922;
t2499 = pkin(1) * t3647;
t3708 = t2541 * pkin(2);
t2535 = 0.2e1 * t3708;
t3838 = (t2499 + t2535) * t2923;
t3651 = t2525 * t2922;
t2498 = pkin(1) * t3651;
t3709 = t2540 * pkin(2);
t2534 = 0.2e1 * t3709;
t3837 = (t2498 + t2534) * t2923;
t3638 = t2537 * t2908;
t3836 = t2489 + t3638;
t3636 = t2538 * t2912;
t3835 = t2490 + t3636;
t3634 = t2539 * t2916;
t3834 = t2491 + t3634;
t2934 = Ifges(3,2) - Ifges(3,1);
t2765 = t2934 * t2906;
t2897 = 0.2e1 * t3768;
t3688 = Ifges(3,4) * t2939;
t3403 = 0.2e1 * t3688;
t3833 = (t2897 + t3403) * t2948 + t2765;
t2766 = t2934 * t2910;
t3687 = Ifges(3,4) * t2942;
t3401 = 0.2e1 * t3687;
t3832 = (t2897 + t3401) * t2951 + t2766;
t2767 = t2934 * t2914;
t3686 = Ifges(3,4) * t2945;
t3399 = 0.2e1 * t3686;
t3831 = (t2897 + t3399) * t2954 + t2767;
t2768 = t2934 * t2939;
t3766 = pkin(6) * mrSges(3,1);
t3767 = pkin(2) * mrSges(3,2);
t2773 = t3766 + t3767;
t3830 = -t2768 - t2773;
t3098 = t2768 + t3767;
t2769 = t2934 * t2942;
t3829 = -t2769 - t2773;
t3097 = t2769 + t3767;
t2770 = t2934 * t2945;
t3828 = -t2770 - t2773;
t3096 = t2770 + t3767;
t2825 = pkin(6) * t2853;
t3827 = 0.2e1 * t2825 - t2856;
t2826 = pkin(6) * t2854;
t3826 = 0.2e1 * t2826 - t2859;
t2827 = pkin(6) * t2855;
t3825 = 0.2e1 * t2827 - t2862;
t2828 = pkin(2) * t2857;
t3060 = 0.2e1 * t2828 + t2856;
t2829 = pkin(2) * t2860;
t3059 = 0.2e1 * t2829 + t2859;
t2830 = pkin(2) * t2863;
t3058 = 0.2e1 * t2830 + t2862;
t2967 = m(2) + m(3);
t2987 = pkin(6) ^ 2;
t3824 = -0.2e1 * mrSges(2,3) * pkin(6) - t2967 * t2987;
t3823 = t2985 / 0.2e1 + t2986 / 0.2e1;
t2452 = pkin(6) * t3652;
t3640 = t2527 * t2988;
t2392 = -t2452 + t3640;
t2478 = t2494 * pkin(2);
t3822 = -t3756 * pkin(6) * t2478 + t2392 * t3487;
t2451 = pkin(6) * t3656;
t3644 = t2526 * t2988;
t2391 = -t2451 + t3644;
t3821 = t2391 * t3495 - t2482 * t3372;
t2450 = pkin(6) * t3660;
t3648 = t2525 * t2988;
t2390 = -t2450 + t3648;
t3820 = t2390 * t3503 - t2481 * t3373;
t2921 = t2965 ^ 2;
t3419 = t2990 - t2988;
t2750 = t2921 + t3419;
t2756 = pkin(1) * t3468;
t3813 = -pkin(1) * t2866 - t2750 - t2756;
t2757 = pkin(1) * t3467;
t3812 = -pkin(1) * t2867 - t2750 - t2757;
t2758 = pkin(1) * t3466;
t2865 = t2955 * pkin(1);
t3811 = -pkin(2) * t2865 - t2750 - t2758;
t3810 = t2828 + t2856 - t2825;
t3809 = t2829 + t2859 - t2826;
t3808 = t2830 + t2862 - t2827;
t3807 = 0.3e1 * t3200;
t2983 = 0.2e1 * pkin(2);
t2982 = 0.3e1 * pkin(2);
t3800 = -0.2e1 * mrSges(3,2);
t3799 = 0.4e1 * Ifges(3,4);
t2504 = t2525 * t2965;
t3798 = 0.2e1 * t2504;
t2505 = t2526 * t2965;
t3797 = 0.2e1 * t2505;
t2506 = t2527 * t2965;
t3796 = 0.2e1 * t2506;
t3792 = -0.4e1 * t2540;
t3791 = -0.2e1 * t2540;
t3790 = -0.4e1 * t2541;
t3789 = -0.2e1 * t2541;
t3788 = -0.4e1 * t2542;
t3787 = -0.2e1 * t2542;
t3786 = 0.2e1 * t2891;
t3785 = 0.3e1 * t2891;
t3784 = 0.4e1 * t2891;
t3783 = -0.2e1 * t2892;
t3781 = 0.2e1 * t2908;
t3780 = 0.2e1 * t2912;
t3779 = 0.2e1 * t2916;
t3775 = 0.2e1 * t2957;
t3774 = pkin(1) * pkin(2);
t3773 = pkin(1) * pkin(3);
t3769 = mrSges(3,3) * pkin(7);
t2960 = pkin(1) * mrSges(3,1);
t2959 = pkin(1) * mrSges(3,2);
t3765 = t2772 / 0.2e1;
t3764 = t2772 / 0.4e1;
t3763 = -t2842 / 0.2e1;
t3761 = t2892 - 0.1e1;
t3759 = t3781 - 0.2e1;
t3757 = t3780 - 0.2e1;
t3755 = t3779 - 0.2e1;
t2486 = pkin(1) * t2492;
t2487 = pkin(1) * t2493;
t2488 = pkin(1) * t2494;
t3754 = pkin(1) * t2540;
t3753 = pkin(1) * t2541;
t3752 = pkin(1) * t2542;
t2852 = m(3) * pkin(2) + mrSges(2,1);
t3697 = mrSges(3,2) * t2939;
t2717 = -t2852 + t3697;
t3751 = pkin(1) * t2717;
t3696 = mrSges(3,2) * t2942;
t2718 = -t2852 + t3696;
t3750 = pkin(1) * t2718;
t3695 = mrSges(3,2) * t2945;
t2719 = -t2852 + t3695;
t3749 = pkin(1) * t2719;
t3748 = pkin(1) * t2818;
t3747 = pkin(1) * t2922;
t2484 = pkin(2) * t2492;
t2485 = pkin(2) * t2493;
t3742 = pkin(2) * t2525;
t3741 = pkin(2) * t2526;
t3740 = pkin(2) * t2527;
t3738 = pkin(2) * t2922;
t3728 = pkin(3) * t2525;
t3727 = pkin(3) * t2526;
t3726 = pkin(3) * t2527;
t3725 = pkin(3) * t2782;
t3724 = pkin(3) * t2785;
t3723 = pkin(3) * t2788;
t3719 = pkin(6) * t2537;
t3718 = pkin(6) * t2538;
t3717 = pkin(6) * t2539;
t3715 = pkin(6) * t2949;
t3713 = pkin(6) * t2952;
t3711 = pkin(6) * t2955;
t3710 = pkin(6) * t2965;
t2479 = pkin(8) * t2492;
t2472 = t2493 * pkin(8);
t2475 = t2494 * pkin(8);
t3707 = t2703 * pkin(2);
t3706 = t2704 * pkin(2);
t3705 = t2705 * pkin(2);
t3703 = mrSges(3,1) * t2492;
t3702 = mrSges(3,1) * t2493;
t3701 = mrSges(3,1) * t2494;
t3700 = mrSges(3,1) * t2939;
t3699 = mrSges(3,1) * t2942;
t3698 = mrSges(3,1) * t2945;
t3694 = Ifges(3,4) * t2525;
t3693 = Ifges(3,4) * t2526;
t3692 = Ifges(3,4) * t2527;
t3685 = t2492 * Ifges(3,4);
t3684 = t2493 * Ifges(3,4);
t3683 = t2494 * Ifges(3,4);
t3680 = -0.2e1 * t2959;
t3679 = -0.2e1 * t3768;
t3678 = -0.2e1 * t3766;
t3677 = 0.2e1 * t3766;
t3505 = t2939 * t2965;
t2387 = t2492 * t3505 - t3728;
t3675 = t2387 * t2949;
t3497 = t2942 * t2965;
t2388 = t2493 * t3497 - t3727;
t3674 = t2388 * t2952;
t3489 = t2945 * t2965;
t2389 = t2494 * t3489 - t3726;
t3673 = t2389 * t2955;
t3281 = t2540 * t3533;
t3669 = (t2853 * t3281 - t2484) * t2908;
t3277 = t2541 * t3531;
t3668 = (t2854 * t3277 - t2485) * t2912;
t3273 = t2542 * t3529;
t3667 = (t2855 * t3273 - t2478) * t2916;
t3666 = t2492 * t2857;
t3665 = t2493 * t2860;
t3664 = t2494 * t2863;
t3663 = t2492 * t2923;
t3661 = t2492 * t2940;
t3659 = t2493 * t2923;
t3657 = t2493 * t2943;
t3655 = t2494 * t2923;
t3653 = t2494 * t2946;
t3649 = t2525 * t2940;
t3645 = t2526 * t2943;
t3641 = t2527 * t2946;
t3639 = t2537 * t2892;
t3637 = t2538 * t2892;
t3635 = t2539 * t2892;
t3633 = t2540 * t2892;
t3632 = t2540 * t2908;
t3631 = t2540 * t2922;
t3630 = t2540 * t2923;
t3629 = t2540 * t2940;
t3628 = t2540 * t2949;
t3627 = t2541 * t2892;
t3626 = t2541 * t2912;
t3625 = t2541 * t2922;
t3624 = t2541 * t2923;
t3623 = t2541 * t2943;
t3622 = t2541 * t2952;
t3621 = t2542 * t2892;
t3620 = t2542 * t2916;
t3619 = t2542 * t2922;
t3618 = t2542 * t2923;
t3617 = t2542 * t2946;
t3616 = t2542 * t2955;
t3603 = t2747 * t2949;
t3602 = t2748 * t2952;
t3601 = t2749 * t2955;
t3591 = t2782 * t3849;
t3590 = t2782 * t2892;
t3589 = t2783 * t3848;
t3587 = t2785 * t3850;
t3586 = t2785 * t2892;
t3585 = t2786 * t3847;
t3583 = t2788 * t3851;
t3582 = t2788 * t2892;
t3581 = t2789 * t3846;
t2817 = t2921 + t2990;
t3570 = t2817 * t2940;
t3569 = t2817 * t2943;
t3568 = t2817 * t2946;
t3567 = t2839 * t2525;
t3566 = t2839 * t2526;
t3565 = t2839 * t2527;
t3564 = t2839 * t2922;
t3563 = t2842 * t2525;
t3562 = t2842 * t2526;
t3561 = t2842 * t2527;
t3542 = t2906 * t2922;
t3539 = t2910 * t2922;
t3536 = t2914 * t2922;
t3534 = t2922 * t2923;
t2907 = t2949 * t2908;
t3471 = t2965 * t2907;
t2911 = t2952 * t2912;
t3470 = t2965 * t2911;
t2915 = t2955 * t2916;
t3469 = t2965 * t2915;
t3465 = t2965 * t2988;
t3450 = pkin(7) * t2492 + t2479;
t3459 = (-t2516 / 0.2e1 + t3450) * t2853 - t3648 / 0.2e1;
t2362 = t2450 + t3459;
t2378 = -t2516 + t3450;
t3316 = pkin(3) * t3650;
t2384 = t3660 - t3316;
t2724 = t2990 + t3200;
t2414 = t2492 * t2724;
t2445 = t2492 * t2856;
t2991 = pkin(1) ^ 2;
t3420 = t2987 + t2991;
t3066 = t3200 + t3420;
t2699 = t2988 + t3066;
t2706 = -0.2e1 / 0.3e1 * t2968 - t2985 / 0.3e1 - t2986 / 0.3e1 + t2990;
t2723 = pkin(1) * t3544;
t2837 = 0.2e1 * t2884;
t2885 = t2988 + t2990;
t2888 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t3197 = t2990 - t3421;
t3105 = pkin(3) * t3197;
t3328 = pkin(6) * t3544;
t3005 = t2940 * (((t2516 - 0.2e1 * t2479) * pkin(7) + pkin(6) * t2510) * t2853 + t2525 * t3465 + (t2939 * t3105 + t3328) * t2492) + (t2519 - 0.2e1 * t3057) * t2828 + t3868 * t2856;
t2501 = pkin(1) * t3649;
t3324 = t2783 * t2484;
t3029 = (t2501 - t3817) * t2857 + t3324;
t2919 = -0.2e1 * t2968;
t2932 = t2990 / 0.2e1;
t3198 = -t2987 / 0.2e1 - t2988 / 0.2e1 + t2932;
t3041 = t2919 + t3198 - t3421;
t3042 = t2988 + t3420 + t3807;
t3065 = t2919 + t2988 + t3197;
t3249 = t2965 * t3560;
t3069 = t3249 * t3589;
t3088 = t2753 * t3630 + t2378;
t3106 = t2932 + t2968 + t3823;
t3107 = t2990 - t3807;
t3357 = t2492 * t3731;
t2435 = pkin(3) * t3357;
t3150 = -t3316 / 0.2e1;
t3113 = t2414 / 0.2e1 + t2445 / 0.2e1 + t2435 + t2965 * t3150;
t3134 = t2783 * t3268;
t3283 = t2540 * t3589;
t3137 = t2965 * t3283;
t3144 = 0.2e1 * t2891 - 0.2e1 * t2923;
t3290 = t2525 * t3505;
t3162 = pkin(3) * t3290;
t3168 = t2939 * t3363;
t3169 = t2922 * t2751;
t3184 = 0.2e1 * t3281;
t3204 = 0.3e1 / 0.2e1 * t2706 * t2965;
t3253 = t2922 * t3560;
t3282 = t2540 * t3560;
t3291 = t2525 * t2856;
t3292 = t2525 * t3542;
t3299 = t3761 * t2965;
t3089 = -t2990 / 0.2e1 + t3823;
t3341 = (pkin(6) * t2479 + pkin(7) * t3449 + t2525 * t3089 + t3459) * t2857;
t3355 = pkin(2) * t3651;
t3367 = pkin(1) * t3534;
t3378 = 0.2e1 * t3534;
t3458 = 0.2e1 * t2435 + t2445;
t2333 = ((t2939 * t3169 + ((t2825 + t3065) * t2948 + (t2782 + t3722) * pkin(2)) * t3560) * t3632 + ((t2744 * t3282 + t3355) * t3722 + ((t2525 * t2885 - t2853 * t3088) * t2922 + t2747 * pkin(2) * t3282) * t2948 - (t2939 * t3088 - t3728) * t3738 - t2965 * (-t2782 * t3629 * t3761 + t2519 * t3519)) * t2949 + t3292 * t3773 + (t2753 * t2540 * t3299 + (pkin(3) * t3168 + t2744 * t3738) * t2525) * t2948 - (-pkin(3) * t3649 + (t2378 * t2940 + t2744 * t3630 + t2486) * t2939) * t3521 + t3168 * t3742) / ((-pkin(1) * t3349 + t2692 * t2922) * t2948 + t3020) * t2525 + ((-t2540 * t3848 * (t3107 + t3060) * t2907 * t3253 + (t3137 * t3856 + ((t2706 + t3060) * t3281 * t3854 - 0.2e1 * t3341 + (-0.2e1 * t2362 + t3291) * pkin(2)) * t2892 + ((t2492 * t3544 + t3162 + t3458) * t3747 + 0.4e1 * t3137) * t2923 + 0.2e1 * (t2940 * t3204 + t2723 + t3060 * (t2888 * t2940 + pkin(1))) * t3631 - pkin(2) * t3291 + 0.2e1 * t3341 + t2362 * t2983) * t2908 + (t3005 * t2892 + ((t3150 + t3660) * t2869 + t3113) * t3848 * t3378 + (((t3041 + t3810) * t3855 + 0.4e1 * t2756 + t3042 + t3827) * t3577 + t3134 * t3144) * t2540 - t3005) * t2949 + t2965 * (t3283 * t3786 + ((t3198 + t3810) * t3184 + t3029) * t2892 + (t2384 * t3747 - 0.2e1 * t3283 + (t2445 + t2414 + (-t3290 + 0.2e1 * t3357) * pkin(3)) * t3533) * t2923 + (t2837 + (t2699 + t3827) * t2940) * t3631 - t3029)) * t2540 + ((t3367 * t3606 - 0.2e1 * t3069) * t3632 + (0.2e1 * ((t2856 / 0.2e1 + t2828 + t2756 + t3106) * t3630 + t3113) * t3577 + t3134 * t3282) * t2949 + (t2540 * (t2884 + (t2724 + t3060) * t2940) * t3507 + t2744 * (t2414 - t3162 + t3458)) * t2922 + t2540 * t3069) * t2492) / ((t2692 * t2948 + t3352) * t2922 + t3032) * t2989;
t3185 = -0.2e1 * t3281;
t2402 = pkin(6) * t3185 + t2484;
t2977 = pkin(6) / 0.2e1;
t2760 = t2853 + t2977;
t2528 = t2760 * t3185;
t2698 = 0.3e1 * t2988 + t3066;
t2716 = -t3544 / 0.2e1;
t2816 = -t2987 + t3419;
t2872 = pkin(1) * t2908;
t2873 = pkin(1) * t2949;
t2889 = -pkin(7) / 0.2e1 - pkin(8) / 0.2e1;
t2984 = -0.2e1 * pkin(1);
t3072 = t3760 * t3543;
t3085 = -t3666 - t2484;
t3159 = pkin(2) * t2720;
t3104 = pkin(2) * t3184;
t3175 = (t2481 + t2504 + t3104) * t2908 - t2481;
t3195 = t3534 * t3772;
t3199 = t2987 / 0.3e1 - t2990 / 0.3e1 + t2988;
t3207 = ((0.2e1 * t2573 + 0.2e1 * t2576 + 0.2e1 * t2585 - t3632) * t2892 + t3663 + t3632 - t2540) * t3543;
t3213 = t2783 * t3503;
t3232 = t2923 * t3527;
t3236 = t2908 * t3544;
t3280 = t2540 * t2810;
t3295 = t2939 * t3661;
t2976 = pkin(6) / 0.3e1;
t3311 = (t2853 + t2976) * t3736;
t3317 = t2525 * t2866;
t3323 = t2492 * t2866;
t3333 = pkin(6) * t3630;
t3334 = pkin(6) * t3631;
t3377 = 0.2e1 * t3503;
t3418 = 0.2e1 * t3754;
t3426 = t2825 + t2988;
t3437 = t3544 / 0.3e1 - 0.2e1 / 0.3e1 * t2988;
t2337 = (t2390 * t2948 * t3232 + ((t2834 * t3543 + t2948 * t3813) * t2892 + t2940 * t2948 * t3195 - t3072) * t2492 + (((-0.4e1 / 0.3e1 + t2908) * t3543 + ((-0.2e1 / 0.3e1 * t2825 + t3437) * t2908 + 0.2e1 / 0.3e1 * t3159 + 0.4e1 / 0.3e1 * t2825 + t3199) * t2948 - 0.2e1 / 0.3e1 * t3591) * t3785 + (-0.3e1 * t3072 + ((t2716 + t3426) * t3781 + (-pkin(2) * t3468 - t3774) * t3778 - 0.2e1 * t2756 - t2698) * t2948) * t2923 - t3035 * t3855 * t3716) * t2540 + (t3820 * t2892 + (pkin(2) * t3759 + 0.2e1 * t2720) * t3333 + ((t3570 + (t2965 + t3048) * pkin(1)) * t3663 + (-t3759 * t2884 + ((t2816 - t3236) * t2892 + t3236 + t2699) * t2940 + (pkin(1) * t3377 + ((t2907 - t2949) * t3855 - 0.2e1 * t2907 + t3778) * t2965) * pkin(2)) * t2540) * t2922 - t3820) * t2939 + (t2402 * t2892 - t3837 - t3666 - t2402 + (t2892 * t3085 - t3085 + t3837) * t2908 + (t2540 * t3849 * t3784 + (-t2486 * t2949 - 0.3e1 * t2484 - t3669) * t2892 + (-(t2498 + 0.4e1 * t3709) * t2908 - (-t3355 + t3418) * t2949 + 0.2e1 * t2498 + t2534) * t2923 + t3669 + t2484) * t2906 + ((-(-0.4e1 * t3334 - t3672) * t2906 - t3672) * t2892 + (-(0.4e1 * t3280 - t2922 * (t2481 + t3798)) * t2906 + 0.2e1 * t3280 - t2525 * t3521) * t2923 - (0.2e1 * t3334 + t3672) * t2906 + t3672) * t2940 + (((t3798 - t3175) * t2892 - 0.4e1 * t3333 - t2501 - t2504 + ((0.2e1 * t2519 + t3317) * t2892 - t3317) * t2940 + (((pkin(1) * t3661 - t3814) * t2949 + t3661 * t2982) * t2923 + ((-0.4e1 * t2810 + 0.2e1 * t3471 + 0.4e1 * t3736) * t2892 - 0.2e1 * t3471 + t2753 * t3778) * t2540) * t2922 + t3175) * t2948 + (-t2540 + 0.4e1 * t3633 + 0.2e1 * t3663) * t2922 * t3338) * t2939) * pkin(3)) / (t2639 + t2922 * (t2651 * t2948 + t3075)) * t2540 + ((-t3207 - ((t2528 + t2492 * (t2873 + t2983)) * t2923 + (-t3317 - t3868) * t2922) * t3722 + ((-pkin(1) * t3323 + t2753 * t3316 - t2492 * (t2756 + t2817)) * t2923 + (-t2384 * t3715 + t2940 * t3324) * t2922) * t2948 + t2387 * t2695 * t2922) * t2492 + (t2492 * t2695 * t3542 + (t3327 * t3662 + (pkin(1) * t3295 + t2387) * t2923) * t2948 + (-t3323 + (t3316 - t3814) * t2940 - t2486) * t2922 - t2525 * (t2873 + pkin(2)) * t2923) * t3728 + ((-((-t2858 + (-t3468 + pkin(1)) * t2949 + t2982) * t2892 + t3849) * t3722 + (-(t2908 * t3725 - t2825 - t3813) * t2892 + (((t2869 - t2965) * t2853 - t3710) * t2949 + 0.3e1 * t3311) * t3534 + t3547 * t3725) * t2948 - t3849 * t3590 - t2922 * (-t3048 * pkin(1) - t2884 - t3570) * t3519 + t3591) * t2492 + ((-(-t2866 + t2872 + t2984 - t3502) * t3534 - t3252 * t3715) * t2906 + (t2782 * t3232 + ((t2889 * t2908 + t3346 / 0.2e1 + t2753) * t3855 - t2654) * t2939) * t2948 + (t2872 - t2744) * t3534 + t2892 * t3213 - t3213) * t3728) * t2540) * t2606;
t2405 = t2492 + t3630;
t2603 = 0.1e1 / ((t2648 * t2922 + t2669) * t2948 + t3101);
t2978 = -0.3e1 / 0.2e1 * pkin(2);
t3051 = t3236 + t3426;
t3165 = pkin(2) * t3295;
t2342 = ((-t3162 * t2948 + (pkin(2) * t3414 + t2817 * t2948 + t3543) * t2405) * t2492 - ((t2405 * t3505 - t3728) * t2948 - t3742) * t3728) * t2603 + ((t3207 + (((t2978 + t3436) * t3783 + 0.2e1 * t2858 + t3603 - pkin(2)) * t3722 + (-(-t2990 + t3051 + 0.2e1 * t3159) * t2892 + pkin(2) * t3603 + t2756 + t2921 + t3051) * t2948 + (t2782 - t3590) * pkin(2)) * t2540 + ((t2528 + 0.2e1 * t2484) * t3722 + (t2492 * t2817 - t3162) * t2948) * t2923) * t2606 + (((-t3165 + t3675) * pkin(2) + ((0.2e1 * t2760 * t2810 - 0.3e1 * t3311) * t2948 + t2939 * t3707) * t3630 + (-(t2444 + t2504) * t3541 + (-0.2e1 * t3165 + t3675) * t2948) * pkin(3)) * t2606 + (-(t2906 * t3468 + t2949 * t3848) * t3728 + (t3707 + ((t2810 - 0.2e1 * t3736) * t2948 - t3338) * pkin(3)) * t3662) * t2603) * t2922) * t2540;
t2771 = t2957 + t3768;
t2774 = -t3766 + t3767;
t3172 = t2940 * t2842 + t2960;
t3305 = pkin(7) + t2869;
t3433 = t2839 * t2940 + t2959;
t2600 = -((-t2771 * t2949 - t3172) * t2948 + (t2774 * t2949 + t3433) * t2939 - t2949 * Ifges(3,3)) * t2922 + t2923 * ((mrSges(3,2) * t3305 - Ifges(3,6)) * t2948 + t2939 * (mrSges(3,1) * t3305 - Ifges(3,5)));
t2886 = -Ifges(3,3) + t2934;
t3143 = t2492 * t3281;
t3229 = t2934 * t3533;
t3380 = -0.2e1 * t2842 * t2922;
t3381 = 0.2e1 * t3564;
t3389 = pkin(2) * t3703;
t2465 = -0.2e1 * t3685;
t3440 = t2540 * t3229 + t2465;
t3464 = -Ifges(3,3) * t2333 + t2337 * t2660 + t2342 * t2600 + (-t3845 + (t2492 * t3229 + t2923 * t3440) * t2540 + (t2834 * t2892 - t3760) * t3842) * t3864 + (-(mrSges(3,2) * t3373 + t2768 * t2834 + t2839 * t3503 - t3766) * t3639 + 0.2e1 * (t3098 * t2492 + (t2949 * t3763 + (t3403 + t3765) * t2940) * t3631) * t3630 + (t3143 * t3799 + (t3638 - (t2540 - t2492) * (t2540 + t2492)) * t2934) * t2939 + (t2492 * t3380 + t2540 * t3433) * t3628 + t3104 * t3703 - mrSges(3,1) * t3719 + t3836 * t3767) * t2948 - ((mrSges(3,1) * t3373 + t2842 * t3503 + t2957) * t2939 + Ifges(3,4) * t2834) * t3639 - ((-0.2e1 * t3389 + (t2773 * t2940 - t2839 * t2949) * t3631) * t2939 + t3440) * t3630 + ((t2492 * t3381 + t2540 * t3172) * t3628 + mrSges(3,2) * t3719 + (mrSges(3,1) * t3836 + t3143 * t3800) * pkin(2)) * t2939 + Ifges(3,4) * t3638 - t2886 * t3143 - t3842 + t3845;
t3452 = t2493 * pkin(7) + t2472;
t3461 = (-t2517 / 0.2e1 + t3452) * t2854 - t3644 / 0.2e1;
t2360 = t2451 + t3461;
t2379 = -t2517 + t3452;
t3314 = pkin(3) * t3646;
t2385 = t3656 - t3314;
t2415 = t2493 * t2724;
t2447 = t2493 * t2859;
t3004 = t2943 * (((t2517 - 0.2e1 * t2472) * pkin(7) + pkin(6) * t2511) * t2854 + t2526 * t3465 + (t2942 * t3105 + t3328) * t2493) + (t2520 - 0.2e1 * t3056) * t2829 + t3869 * t2859;
t2502 = pkin(1) * t3645;
t3322 = t2786 * t2485;
t3028 = (t2502 - t3818) * t2860 + t3322;
t3068 = t3249 * t3585;
t3087 = t2754 * t3624 + t2379;
t3356 = t2493 * t3730;
t2436 = pkin(3) * t3356;
t3149 = -t3314 / 0.2e1;
t3112 = t2415 / 0.2e1 + t2447 / 0.2e1 + t2436 + t2965 * t3149;
t3132 = t2786 * t3267;
t3279 = t2541 * t3585;
t3136 = t2965 * t3279;
t3287 = t2526 * t3497;
t3161 = pkin(3) * t3287;
t3167 = t2942 * t3362;
t3182 = 0.2e1 * t3277;
t3278 = t2541 * t3560;
t3288 = t2526 * t2859;
t3289 = t2526 * t3539;
t3343 = (pkin(6) * t2472 + pkin(7) * t3448 + t2526 * t3089 + t3461) * t2860;
t3354 = pkin(2) * t3647;
t3457 = 0.2e1 * t2436 + t2447;
t2334 = ((t2942 * t3169 + ((t2826 + t3065) * t2951 + (t2785 + t3721) * pkin(2)) * t3560) * t3626 + ((t2745 * t3278 + t3354) * t3721 + ((t2526 * t2885 - t2854 * t3087) * t2922 + t2748 * pkin(2) * t3278) * t2951 - (t2942 * t3087 - t3727) * t3738 - t2965 * (-t2785 * t3623 * t3761 + t2520 * t3517)) * t2952 + t3289 * t3773 + (t2754 * t2541 * t3299 + (pkin(3) * t3167 + t2745 * t3738) * t2526) * t2951 - (-pkin(3) * t3645 + (t2379 * t2943 + t2745 * t3624 + t2487) * t2942) * t3521 + t3167 * t3741) / ((-pkin(1) * t3348 + t2693 * t2922) * t2951 + t3019) * t2526 + ((-t2541 * t3847 * (t3107 + t3059) * t2911 * t3253 + (t3136 * t3856 + ((t2706 + t3059) * t3277 * t3854 - 0.2e1 * t3343 + (-0.2e1 * t2360 + t3288) * pkin(2)) * t2892 + ((t2493 * t3544 + t3161 + t3457) * t3747 + 0.4e1 * t3136) * t2923 + 0.2e1 * (t2943 * t3204 + t2723 + t3059 * (t2888 * t2943 + pkin(1))) * t3625 - pkin(2) * t3288 + 0.2e1 * t3343 + t2360 * t2983) * t2912 + (t3004 * t2892 + ((t3149 + t3656) * t2870 + t3112) * t3847 * t3378 + (((t3041 + t3809) * t3855 + 0.4e1 * t2757 + t3042 + t3826) * t3574 + t3132 * t3144) * t2541 - t3004) * t2952 + t2965 * (t3279 * t3786 + ((t3198 + t3809) * t3182 + t3028) * t2892 + (t2385 * t3747 - 0.2e1 * t3279 + (t2447 + t2415 + (-t3287 + 0.2e1 * t3356) * pkin(3)) * t3531) * t2923 + (t2837 + (t2699 + t3826) * t2943) * t3625 - t3028)) * t2541 + ((t3367 * t3605 - 0.2e1 * t3068) * t3626 + (0.2e1 * ((t2859 / 0.2e1 + t2829 + t2757 + t3106) * t3624 + t3112) * t3574 + t3132 * t3278) * t2952 + (t2541 * (t2884 + (t2724 + t3059) * t2943) * t3507 + t2745 * (t2415 - t3161 + t3457)) * t2922 + t2541 * t3068) * t2493) / ((t2693 * t2951 + t3351) * t2922 + t3031) * t2989;
t3183 = -0.2e1 * t3277;
t2403 = pkin(6) * t3183 + t2485;
t2762 = t2854 + t2977;
t2529 = t2762 * t3183;
t2874 = pkin(1) * t2912;
t2875 = pkin(1) * t2952;
t3071 = t3758 * t3540;
t3084 = -t3665 - t2485;
t3156 = pkin(2) * t2721;
t3103 = pkin(2) * t3182;
t3174 = (t2482 + t2505 + t3103) * t2912 - t2482;
t3206 = ((0.2e1 * t2574 + 0.2e1 * t2577 + 0.2e1 * t2586 - t3626) * t2892 + t3659 + t3626 - t2541) * t3540;
t3212 = t2786 * t3495;
t3231 = t2923 * t3525;
t3235 = t2912 * t3544;
t3276 = t2541 * t2811;
t3294 = t2942 * t3657;
t3310 = (t2854 + t2976) * t3734;
t3315 = t2526 * t2867;
t3321 = t2493 * t2867;
t3331 = pkin(6) * t3624;
t3332 = pkin(6) * t3625;
t3376 = 0.2e1 * t3495;
t3417 = 0.2e1 * t3753;
t3425 = t2826 + t2988;
t2338 = (t2391 * t2951 * t3231 + ((t2835 * t3540 + t2951 * t3812) * t2892 + t2943 * t2951 * t3195 - t3071) * t2493 + (((-0.4e1 / 0.3e1 + t2912) * t3540 + ((-0.2e1 / 0.3e1 * t2826 + t3437) * t2912 + 0.2e1 / 0.3e1 * t3156 + 0.4e1 / 0.3e1 * t2826 + t3199) * t2951 - 0.2e1 / 0.3e1 * t3587) * t3785 + (-0.3e1 * t3071 + ((t2716 + t3425) * t3780 + (-pkin(2) * t3467 - t3774) * t3777 - 0.2e1 * t2757 - t2698) * t2951) * t2923 - t3034 * t3855 * t3714) * t2541 + (t3821 * t2892 + (pkin(2) * t3757 + 0.2e1 * t2721) * t3331 + ((t3569 + (t2965 + t3047) * pkin(1)) * t3659 + (-t3757 * t2884 + ((t2816 - t3235) * t2892 + t3235 + t2699) * t2943 + (pkin(1) * t3376 + ((t2911 - t2952) * t3855 - 0.2e1 * t2911 + t3777) * t2965) * pkin(2)) * t2541) * t2922 - t3821) * t2942 + (t2403 * t2892 - t3838 - t3665 - t2403 + (t2892 * t3084 - t3084 + t3838) * t2912 + (t2541 * t3850 * t3784 + (-t2487 * t2952 - 0.3e1 * t2485 - t3668) * t2892 + (-(t2499 + 0.4e1 * t3708) * t2912 - (-t3354 + t3417) * t2952 + 0.2e1 * t2499 + t2535) * t2923 + t3668 + t2485) * t2910 + ((-(-0.4e1 * t3332 - t3671) * t2910 - t3671) * t2892 + (-(0.4e1 * t3276 - t2922 * (t2482 + t3797)) * t2910 + 0.2e1 * t3276 - t2526 * t3521) * t2923 - (0.2e1 * t3332 + t3671) * t2910 + t3671) * t2943 + (((t3797 - t3174) * t2892 - 0.4e1 * t3331 - t2502 - t2505 + ((0.2e1 * t2520 + t3315) * t2892 - t3315) * t2943 + (((pkin(1) * t3657 - t3815) * t2952 + t3657 * t2982) * t2923 + ((-0.4e1 * t2811 + 0.2e1 * t3470 + 0.4e1 * t3734) * t2892 - 0.2e1 * t3470 + t2754 * t3777) * t2541) * t2922 + t3174) * t2951 + (-t2541 + 0.4e1 * t3627 + 0.2e1 * t3659) * t2922 * t3336) * t2942) * pkin(3)) / (t2640 + t2922 * (t2652 * t2951 + t3074)) * t2541 + ((-t3206 - ((t2529 + t2493 * (t2875 + t2983)) * t2923 + (-t3315 - t3869) * t2922) * t3721 + ((-pkin(1) * t3321 + t2754 * t3314 - t2493 * (t2757 + t2817)) * t2923 + (-t2385 * t3713 + t2943 * t3322) * t2922) * t2951 + t2388 * t2696 * t2922) * t2493 + (t2493 * t2696 * t3539 + (t3326 * t3658 + (pkin(1) * t3294 + t2388) * t2923) * t2951 + (-t3321 + (t3314 - t3815) * t2943 - t2487) * t2922 - t2526 * (t2875 + pkin(2)) * t2923) * t3727 + ((-((-t2861 + (-t3467 + pkin(1)) * t2952 + t2982) * t2892 + t3850) * t3721 + (-(t2912 * t3724 - t2826 - t3812) * t2892 + (((t2870 - t2965) * t2854 - t3710) * t2952 + 0.3e1 * t3310) * t3534 + t3546 * t3724) * t2951 - t3850 * t3586 - t2922 * (-t3047 * pkin(1) - t2884 - t3569) * t3517 + t3587) * t2493 + ((-(-t2867 + t2874 + t2984 - t3494) * t3534 - t3251 * t3713) * t2910 + (t2785 * t3231 + ((t2889 * t2912 + t3345 / 0.2e1 + t2754) * t3855 - t2655) * t2942) * t2951 + (t2874 - t2745) * t3534 + t2892 * t3212 - t3212) * t3727) * t2541) * t2607;
t2406 = t2493 + t3624;
t2604 = 0.1e1 / ((t2649 * t2922 + t2670) * t2951 + t3100);
t3050 = t3235 + t3425;
t3164 = pkin(2) * t3294;
t2343 = ((-t3161 * t2951 + (pkin(2) * t3413 + t2817 * t2951 + t3540) * t2406) * t2493 - ((t2406 * t3497 - t3727) * t2951 - t3741) * t3727) * t2604 + ((t3206 + (((t2978 + t3435) * t3783 + 0.2e1 * t2861 + t3602 - pkin(2)) * t3721 + (-(-t2990 + t3050 + 0.2e1 * t3156) * t2892 + pkin(2) * t3602 + t2757 + t2921 + t3050) * t2951 + (t2785 - t3586) * pkin(2)) * t2541 + ((t2529 + 0.2e1 * t2485) * t3721 + (t2493 * t2817 - t3161) * t2951) * t2923) * t2607 + (((-t3164 + t3674) * pkin(2) + ((0.2e1 * t2762 * t2811 - 0.3e1 * t3310) * t2951 + t2942 * t3706) * t3624 + (-(t2446 + t2505) * t3538 + (-0.2e1 * t3164 + t3674) * t2951) * pkin(3)) * t2607 + (-(t2910 * t3467 + t2952 * t3847) * t3727 + (t3706 + ((t2811 - 0.2e1 * t3734) * t2951 - t3336) * pkin(3)) * t3658) * t2604) * t2922) * t2541;
t3171 = t2943 * t2842 + t2960;
t3304 = pkin(7) + t2870;
t3432 = t2839 * t2943 + t2959;
t2601 = -((-t2771 * t2952 - t3171) * t2951 + (t2774 * t2952 + t3432) * t2942 - t2952 * Ifges(3,3)) * t2922 + t2923 * ((mrSges(3,2) * t3304 - Ifges(3,6)) * t2951 + t2942 * (mrSges(3,1) * t3304 - Ifges(3,5)));
t3142 = t2493 * t3277;
t3228 = t2934 * t3531;
t3387 = pkin(2) * t3702;
t2466 = -0.2e1 * t3684;
t3439 = t2541 * t3228 + t2466;
t3463 = -Ifges(3,3) * t2334 + t2338 * t2661 + t2343 * t2601 + (-t3844 + (t2493 * t3228 + t2923 * t3439) * t2541 + (t2835 * t2892 - t3758) * t3841) * t3863 + (-(mrSges(3,2) * t3372 + t2769 * t2835 + t2839 * t3495 - t3766) * t3637 + 0.2e1 * (t3097 * t2493 + (t2952 * t3763 + (t3401 + t3765) * t2943) * t3625) * t3624 + (t3142 * t3799 + (t3636 - (t2541 - t2493) * (t2541 + t2493)) * t2934) * t2942 + (t2493 * t3380 + t2541 * t3432) * t3622 + t3103 * t3702 - mrSges(3,1) * t3718 + t3835 * t3767) * t2951 - ((mrSges(3,1) * t3372 + t2842 * t3495 + t2957) * t2942 + Ifges(3,4) * t2835) * t3637 - ((-0.2e1 * t3387 + (t2773 * t2943 - t2839 * t2952) * t3625) * t2942 + t3439) * t3624 + ((t2493 * t3381 + t2541 * t3171) * t3622 + mrSges(3,2) * t3718 + (mrSges(3,1) * t3835 + t3142 * t3800) * pkin(2)) * t2942 + Ifges(3,4) * t3636 - t2886 * t3142 - t3841 + t3844;
t3451 = t2494 * pkin(7) + t2475;
t3460 = (-t2518 / 0.2e1 + t3451) * t2855 - t3640 / 0.2e1;
t2361 = t2452 + t3460;
t2380 = -t2518 + t3451;
t3312 = pkin(3) * t3642;
t2386 = t3652 - t3312;
t2416 = t2494 * t2724;
t2449 = t2494 * t2862;
t3003 = t2946 * (((t2518 - 0.2e1 * t2475) * pkin(7) + pkin(6) * t2512) * t2855 + t2527 * t3465 + (t2945 * t3105 + t3328) * t2494) + (t2521 - 0.2e1 * t3055) * t2830 + t3870 * t2862;
t2503 = pkin(1) * t3641;
t3320 = t2789 * t2478;
t3027 = (t2503 - t3819) * t2863 + t3320;
t3067 = t3249 * t3581;
t3086 = t2755 * t3618 + t2380;
t3319 = t2954 * t2478;
t2437 = pkin(3) * t3319;
t3148 = -t3312 / 0.2e1;
t3111 = t2416 / 0.2e1 + t2449 / 0.2e1 + t2437 + t2965 * t3148;
t3130 = t2789 * t3266;
t3275 = t2542 * t3581;
t3135 = t2965 * t3275;
t3284 = t2527 * t3489;
t3160 = pkin(3) * t3284;
t3166 = t2945 * t3361;
t3180 = 0.2e1 * t3273;
t3274 = t2542 * t3560;
t3285 = t2527 * t2862;
t3286 = t2527 * t3536;
t3342 = (pkin(6) * t2475 + pkin(7) * t3447 + t2527 * t3089 + t3460) * t2863;
t3353 = pkin(2) * t3643;
t3456 = 0.2e1 * t2437 + t2449;
t2335 = ((t2945 * t3169 + ((t2827 + t3065) * t2954 + (t2788 + t3720) * pkin(2)) * t3560) * t3620 + ((t2746 * t3274 + t3353) * t3720 + ((t2527 * t2885 - t2855 * t3086) * t2922 + t2749 * pkin(2) * t3274) * t2954 - (t2945 * t3086 - t3726) * t3738 - t2965 * (-t2788 * t3617 * t3761 + t2521 * t3515)) * t2955 + t3286 * t3773 + (t2755 * t2542 * t3299 + (pkin(3) * t3166 + t2746 * t3738) * t2527) * t2954 - (-pkin(3) * t3641 + (t2380 * t2946 + t2746 * t3618 + t2488) * t2945) * t3521 + t3166 * t3740) / ((-pkin(1) * t3347 + t2694 * t2922) * t2954 + t3018) * t2527 + ((-t2542 * t3846 * (t3107 + t3058) * t2915 * t3253 + (t3135 * t3856 + ((t2706 + t3058) * t3273 * t3854 - 0.2e1 * t3342 + (-0.2e1 * t2361 + t3285) * pkin(2)) * t2892 + ((t2494 * t3544 + t3160 + t3456) * t3747 + 0.4e1 * t3135) * t2923 + 0.2e1 * (t2946 * t3204 + t2723 + t3058 * (t2888 * t2946 + pkin(1))) * t3619 - pkin(2) * t3285 + 0.2e1 * t3342 + t2361 * t2983) * t2916 + (t3003 * t2892 + ((t3148 + t3652) * t2871 + t3111) * t3846 * t3378 + (((t3041 + t3808) * t3855 + 0.4e1 * t2758 + t3042 + t3825) * t3571 + t3130 * t3144) * t2542 - t3003) * t2955 + t2965 * (t3275 * t3786 + ((t3198 + t3808) * t3180 + t3027) * t2892 + (t2386 * t3747 - 0.2e1 * t3275 + (t2449 + t2416 + (-t3284 + 0.2e1 * t3319) * pkin(3)) * t3529) * t2923 + (t2837 + (t2699 + t3825) * t2946) * t3619 - t3027)) * t2542 + ((t3367 * t3604 - 0.2e1 * t3067) * t3620 + (0.2e1 * ((t2862 / 0.2e1 + t2830 + t2758 + t3106) * t3618 + t3111) * t3571 + t3130 * t3274) * t2955 + (t2542 * (t2884 + (t2724 + t3058) * t2946) * t3507 + t2746 * (t2416 - t3160 + t3456)) * t2922 + t2542 * t3067) * t2494) / ((t2694 * t2954 + t3350) * t2922 + t3030) * t2989;
t3181 = -0.2e1 * t3273;
t2404 = pkin(6) * t3181 + t2478;
t2764 = t2855 + t2977;
t2530 = t2764 * t3181;
t2876 = pkin(1) * t2916;
t3070 = t3756 * t3537;
t3083 = -t3664 - t2478;
t3153 = pkin(2) * t2722;
t3102 = pkin(2) * t3180;
t3173 = (t2483 + t2506 + t3102) * t2916 - t2483;
t3205 = ((0.2e1 * t2575 + 0.2e1 * t2578 + 0.2e1 * t2587 - t3620) * t2892 + t3655 + t3620 - t2542) * t3537;
t3211 = t2789 * t3487;
t3230 = t2923 * t3523;
t3234 = t2916 * t3544;
t3272 = t2542 * t2812;
t3293 = t2945 * t3653;
t3309 = (t2855 + t2976) * t3732;
t3313 = t2527 * t2868;
t3318 = t2955 * t2478;
t3329 = pkin(6) * t3618;
t3330 = pkin(6) * t3619;
t3375 = 0.2e1 * t3487;
t3416 = 0.2e1 * t3752;
t3424 = t2827 + t2988;
t2336 = (t2392 * t2954 * t3230 + ((t2836 * t3537 + t2954 * t3811) * t2892 + t2946 * t2954 * t3195 - t3070) * t2494 + (((t2916 - 0.4e1 / 0.3e1) * t3537 + ((-0.2e1 / 0.3e1 * t2827 + t3437) * t2916 + 0.2e1 / 0.3e1 * t3153 + 0.4e1 / 0.3e1 * t2827 + t3199) * t2954 - 0.2e1 / 0.3e1 * t3583) * t3785 + (-0.3e1 * t3070 + ((t2716 + t3424) * t3779 + (-pkin(2) * t3466 - t3774) * t3776 - 0.2e1 * t2758 - t2698) * t2954) * t2923 - t3033 * t3855 * t3712) * t2542 + (t3822 * t2892 + (pkin(2) * t3755 + 0.2e1 * t2722) * t3329 + ((t3568 + (t2965 + t3046) * pkin(1)) * t3655 + (-t3755 * t2884 + ((t2816 - t3234) * t2892 + t3234 + t2699) * t2946 + (pkin(1) * t3375 + ((t2915 - t2955) * t3855 - 0.2e1 * t2915 + t3776) * t2965) * pkin(2)) * t2542) * t2922 - t3822) * t2945 + (t2404 * t2892 - t3839 - t3664 - t2404 + (t2892 * t3083 - t3083 + t3839) * t2916 + (t2542 * t3851 * t3784 + (-t2488 * t2955 - 0.3e1 * t2478 - t3667) * t2892 + (-(t2500 + 0.4e1 * t3739) * t2916 - (-t3353 + t3416) * t2955 + 0.2e1 * t2500 + t2536) * t2923 + t3667 + t2478) * t2914 + ((-(-0.4e1 * t3330 - t3670) * t2914 - t3670) * t2892 + (-(0.4e1 * t3272 - t2922 * (t2483 + t3796)) * t2914 + 0.2e1 * t3272 - t2527 * t3521) * t2923 - (0.2e1 * t3330 + t3670) * t2914 + t3670) * t2946 + (((t3796 - t3173) * t2892 - 0.4e1 * t3329 - t2503 - t2506 + ((0.2e1 * t2521 + t3313) * t2892 - t3313) * t2946 + (((pkin(1) * t3653 - t3816) * t2955 + t3653 * t2982) * t2923 + ((-0.4e1 * t2812 + 0.2e1 * t3469 + 0.4e1 * t3732) * t2892 - 0.2e1 * t3469 + t2755 * t3776) * t2542) * t2922 + t3173) * t2954 + (-t2542 + 0.4e1 * t3621 + 0.2e1 * t3655) * t2922 * t3340) * t2945) * pkin(3)) / (t2641 + t2922 * (t2653 * t2954 + t3073)) * t2542 + ((-t3205 - ((t2530 + t2494 * (t2865 + t2983)) * t2923 + (-t3313 - t3870) * t2922) * t3720 + ((-pkin(1) * t3318 + t2755 * t3312 - t2494 * (t2758 + t2817)) * t2923 + (-t2386 * t3711 + t2946 * t3320) * t2922) * t2954 + t2389 * t2697 * t2922) * t2494 + (t2494 * t2697 * t3536 + (t3325 * t3654 + (pkin(1) * t3293 + t2389) * t2923) * t2954 + (-t3318 + (t3312 - t3816) * t2946 - t2488) * t2922 - t2527 * (t2865 + pkin(2)) * t2923) * t3726 + ((-((-t2864 + (-t3466 + pkin(1)) * t2955 + t2982) * t2892 + t3851) * t3720 + (-(t2916 * t3723 - t2827 - t3811) * t2892 + (((t2871 - t2965) * t2855 - t3710) * t2955 + 0.3e1 * t3309) * t3534 + t3545 * t3723) * t2954 - t3851 * t3582 - t2922 * (-t3046 * pkin(1) - t2884 - t3568) * t3515 + t3583) * t2494 + ((-(-t2868 + t2876 + t2984 - t3486) * t3534 - t3250 * t3711) * t2914 + (t2788 * t3230 + ((t2889 * t2916 + t3344 / 0.2e1 + t2755) * t3855 - t2656) * t2945) * t2954 + (t2876 - t2746) * t3534 + t2892 * t3211 - t3211) * t3726) * t2542) * t2608;
t2407 = t2494 + t3618;
t2605 = 0.1e1 / ((t2650 * t2922 + t2671) * t2954 + t3099);
t3049 = t3234 + t3424;
t3163 = pkin(2) * t3293;
t2344 = ((-t3160 * t2954 + (pkin(2) * t3412 + t2817 * t2954 + t3537) * t2407) * t2494 - ((t2407 * t3489 - t3726) * t2954 - t3740) * t3726) * t2605 + ((t3205 + (((t2978 + t3434) * t3783 + 0.2e1 * t2864 + t3601 - pkin(2)) * t3720 + (-(-t2990 + t3049 + 0.2e1 * t3153) * t2892 + pkin(2) * t3601 + t2758 + t2921 + t3049) * t2954 + (t2788 - t3582) * pkin(2)) * t2542 + ((t2530 + 0.2e1 * t2478) * t3720 + (t2494 * t2817 - t3160) * t2954) * t2923) * t2608 + (((-t3163 + t3673) * pkin(2) + ((0.2e1 * t2764 * t2812 - 0.3e1 * t3309) * t2954 + t2945 * t3705) * t3618 + (-(t2448 + t2506) * t3535 + (-0.2e1 * t3163 + t3673) * t2954) * pkin(3)) * t2608 + (-(t2914 * t3466 + t2955 * t3846) * t3726 + (t3705 + ((t2812 - 0.2e1 * t3732) * t2954 - t3340) * pkin(3)) * t3654) * t2605) * t2922) * t2542;
t3170 = t2946 * t2842 + t2960;
t3303 = pkin(7) + t2871;
t3431 = t2839 * t2946 + t2959;
t2602 = -((-t2771 * t2955 - t3170) * t2954 + (t2774 * t2955 + t3431) * t2945 - t2955 * Ifges(3,3)) * t2922 + t2923 * ((mrSges(3,2) * t3303 - Ifges(3,6)) * t2954 + t2945 * (mrSges(3,1) * t3303 - Ifges(3,5)));
t3141 = t2494 * t3273;
t3227 = t2934 * t3529;
t3371 = t3756 * pkin(2);
t3385 = pkin(2) * t3701;
t2467 = -0.2e1 * t3683;
t3438 = t2542 * t3227 + t2467;
t3462 = -Ifges(3,3) * t2335 + t2336 * t2662 + t2344 * t2602 + (-t3843 + (t2494 * t3227 + t2923 * t3438) * t2542 + (t2836 * t2892 - t3756) * t3840) * t3862 + (-(mrSges(3,2) * t3371 + t2770 * t2836 + t2839 * t3487 - t3766) * t3635 + 0.2e1 * (t3096 * t2494 + (t2955 * t3763 + (t3399 + t3765) * t2946) * t3619) * t3618 + (t3141 * t3799 + (t3634 - (t2542 - t2494) * (t2542 + t2494)) * t2934) * t2945 + (t2494 * t3380 + t2542 * t3431) * t3616 + t3102 * t3701 - mrSges(3,1) * t3717 + t3834 * t3767) * t2954 - ((mrSges(3,1) * t3371 + t2842 * t3487 + t2957) * t2945 + Ifges(3,4) * t2836) * t3635 - ((-0.2e1 * t3385 + (t2773 * t2946 - t2839 * t2955) * t3619) * t2945 + t3438) * t3618 + ((t2494 * t3381 + t2542 * t3170) * t3616 + mrSges(3,2) * t3717 + (mrSges(3,1) * t3834 + t3141 * t3800) * pkin(2)) * t2945 + Ifges(3,4) * t3634 - t2886 * t3141 - t3840 + t3843;
t3430 = 0.2e1 * t2743;
t3422 = -0.2e1 * t2957 + t2897;
t3415 = -0.2e1 * t3748;
t3405 = Ifges(3,4) * t3397;
t3404 = -0.4e1 * t3688;
t3402 = -0.4e1 * t3687;
t3400 = -0.4e1 * t3686;
t3396 = mrSges(3,2) * t3747;
t3395 = mrSges(3,1) * t3754;
t3394 = mrSges(3,1) * t3753;
t3393 = mrSges(3,1) * t3752;
t3392 = pkin(2) * t3697;
t3391 = pkin(2) * t3696;
t3390 = pkin(2) * t3695;
t3388 = mrSges(3,2) * t2484;
t3386 = mrSges(3,2) * t2485;
t3384 = mrSges(3,2) * t2478;
t3383 = -t3768 / 0.2e1;
t3382 = -t3767 / 0.2e1;
t3379 = -0.2e1 * t3534;
t2970 = m(3) * t2990;
t3374 = t2970 + t3853;
t3370 = t2540 * t3751;
t3369 = t2541 * t3750;
t3368 = t2542 * t3749;
t3308 = t2525 * t3691;
t3307 = t2526 * t3690;
t3306 = t2527 * t3689;
t2420 = t2492 * t2768;
t2421 = t2493 * t2769;
t2422 = t2494 * t2770;
t2455 = -0.2e1 * t3386;
t2456 = 0.2e1 * t3387;
t2637 = t2952 * t3874;
t2779 = -0.2e1 * t3391;
t2900 = 0.2e1 * t3769;
t2969 = m(3) * t2986;
t3179 = -t2969 - t2970 + t3852;
t3053 = t3179 - t3832;
t2595 = -((t2951 * t3829 + t3866) * t2943 + t2637) * t2922 - (t2779 + t2900 + (t2818 * t2943 + (mrSges(3,1) * t2951 - t2718) * t2952) * pkin(1) - t3053) * t2923;
t2625 = -0.2e1 * t3690 + (t3097 + t3766) * t2951 - t3037;
t2901 = -0.2e1 * t3769;
t3064 = Ifges(2,2) + Ifges(3,3) - t2969 + t3374;
t2691 = t2901 + t3064;
t2628 = t2779 + t2691 + t3832;
t2778 = 0.2e1 * t3391;
t3139 = t2934 * t3289;
t3094 = -0.2e1 * t3139;
t3194 = t2613 * (t2595 * t2343 + (t2778 + t2901 + t3053) * t2338 + t2661 * t2334 - (t2628 * t2943 * t3761 - t2625 * t3534 + t3748) * t2541 * t3622 + (t3874 * t3277 + (-pkin(2) * t3699 - t2951 * t3097 - Ifges(3,4) + t2823) * t3794) * t3624 + (t3094 + (t3394 + (t3402 + t3679) * t3647) * t2951 - (t2779 - t2886) * t3647 - t3369) * t3623 + 0.4e1 * t2493 * t3307 + (-t3062 * t3397 * t3622 + (-0.2e1 * t2421 + t2455 - t3562) * t2951 - (t2456 - t3566) * t2942 + t2466) * t2526 + (-t3637 + (0.2e1 * t3255 + 0.1e1) * t2538) * t2646);
t2457 = -0.2e1 * t3384;
t2458 = 0.2e1 * t3385;
t2638 = t2955 * t3873;
t2781 = -0.2e1 * t3390;
t3052 = t3179 - t3831;
t2596 = -((t2954 * t3828 + t3865) * t2946 + t2638) * t2922 - (t2781 + t2900 + (t2818 * t2946 + (mrSges(3,1) * t2954 - t2719) * t2955) * pkin(1) - t3052) * t2923;
t2626 = -0.2e1 * t3689 + (t3096 + t3766) * t2954 - t3036;
t2629 = t2781 + t2691 + t3831;
t2780 = 0.2e1 * t3390;
t3138 = t2934 * t3286;
t3093 = -0.2e1 * t3138;
t3193 = t2614 * (t2596 * t2344 + (t2780 + t2901 + t3052) * t2336 + t2662 * t2335 - (t2629 * t2946 * t3761 - t2626 * t3534 + t3748) * t2542 * t3616 + (t3873 * t3273 + (-pkin(2) * t3698 - t2954 * t3096 - Ifges(3,4) + t2824) * t3793) * t3618 + (t3093 + (t3393 + (t3400 + t3679) * t3643) * t2954 - (t2781 - t2886) * t3643 - t3368) * t3617 + 0.4e1 * t2494 * t3306 + (-t3061 * t3397 * t3616 + (-0.2e1 * t2422 + t2457 - t3561) * t2954 - (t2458 - t3565) * t2945 + t2467) * t2527 + (-t3635 + (0.2e1 * t3254 + 0.1e1) * t2539) * t2647);
t3192 = t2615 * t3464;
t2522 = t2525 ^ 2;
t2396 = t2489 + t2522;
t2408 = t3872 * t2492;
t2417 = t2743 * t2492;
t2423 = t2492 * t2818;
t2438 = t2839 * t2492;
t2441 = t2842 * t2492;
t2453 = -0.2e1 * t3388;
t2454 = 0.2e1 * t3389;
t2636 = t2949 * t3875;
t2777 = -0.2e1 * t3392;
t3054 = t3179 - t3833;
t2594 = -((t2948 * t3830 + t3867) * t2940 + t2636) * t2922 - (t2777 + t2900 + (t2818 * t2940 + (mrSges(3,1) * t2948 - t2717) * t2949) * pkin(1) - t3054) * t2923;
t2624 = -0.2e1 * t3691 + (t3098 + t3766) * t2948 - t3038;
t2627 = t2777 + t2691 + t3833;
t2775 = 0.2e1 * t2773;
t2776 = 0.2e1 * t3392;
t2797 = t3770 / 0.4e1 - Ifges(3,6) / 0.4e1;
t2840 = 0.2e1 * t2839;
t2841 = 0.2e1 * t2842;
t2887 = -Ifges(3,3) - t2934;
t2899 = 0.2e1 * t2960;
t2935 = 0.2e1 * t2934;
t3002 = -t2967 * t2991 - Ifges(1,3) + t2901 - t2969 + t3824 + t3853;
t3039 = t3374 + t3824 - t3852;
t3040 = t2900 - t3064;
t3140 = t2934 * t3292;
t3095 = -0.2e1 * t3140;
t3191 = ((-(t3775 - 0.2e1 * t3688) * t2948 - t2627 * t2908 + t3002 - ((t2776 + t3040 - t3833) * t2908 - t2645 * t3377 + t2935 * t2906 + (t3422 + 0.4e1 * t3688) * t2948 - t2775 * t2939 + t3039) * t2892 + t2939 * t3678 + t2940 * t3415 - ((t2841 * t2940 + t2899) * t2948 + (-t2840 * t2939 + t3430) * t2940 - 0.2e1 * t3751) * t2949 + (-t2624 * t2940 + t2636) * t3379 + t2765) * t2342 + t2594 * t2337 + t2600 * t2333 + (t3308 + (t2441 + (-t2768 / 0.2e1 + t3382) * t2525) * t2948 + (t2525 * t3383 - t2438) * t2939 + t2417 - t3694 / 0.2e1) * t3256 * t3792 + (((t2423 + (-mrSges(3,2) * t2948 - t3700) * t3795) * t2486 + ((-t2420 + t3563) * t2948 - t3567 * t2939 + (-t2773 * t2948 + t3867) * t2492) * t2540 * t3397) * t2923 + t2489 * t2906 * t3405 + ((t2489 * t3830 + t2522 * t2774) * t2922 + t2540 * t2525 * t3680) * t2948 + ((-t2489 * t2772 + t2522 * t2771) * t2939 - t2489 * t2711) * t2922 + (-mrSges(3,1) * t3650 + t2423) * t3418 + t3861 * ((t2454 + t3567) * t2948 + (t2453 + t3563) * t2939 + (t2948 * t3403 + t2691 + t2765) * t2492) * t3629) * t2949 + 0.2e1 * (-t2438 * t2939 + t2441 * t2948 + t2417 + ((-t2773 - 0.2e1 * t2768) * t2948 - t3594 + (0.4e1 * t2906 - 0.2e1) * Ifges(3,4)) * t2525) * t3633 + ((t3140 * t3792 + (-0.8e1 * (t2797 * t2492 + (t3688 + t3764) * t2525) * t3631 - t2396 * t2960) * t2948 - 0.2e1 * ((-t2525 * t2773 + t2441) * t2939 + t2408 - t2525 * t2934) * t3631 - (-t2396 * t3697 + t2489 * t2852) * pkin(1)) * t2940 + ((-t2420 - t3388 - t3563 / 0.2e1) * t2948 + (-t3389 + t3567 / 0.2e1) * t2939 + (t3864 - 0.1e1) * t3685) * t3795) * t2923 + ((t2734 * t2922 + t3564 * t2948) * (-t2489 + t2522) + (t3095 + (-0.2e1 * t3395 + (t3404 + t3775) * t3651) * t2948 + (-t2525 * t2887 + t3650 * t3677 - t2408) * t2922 + 0.2e1 * t3370) * t2492) * t2940 + t3308 * t3792 + (t2522 * t3396 + (t2441 + (-t2768 - t3766) * t2525) * t3791) * t2948 + mrSges(3,1) * t2522 * t3366 + ((mrSges(3,2) * t2516 - t2438) * t2939 + t2417 - t3694) * t3791) * t2606;
t2523 = t2526 ^ 2;
t2397 = t2490 + t2523;
t2409 = t3872 * t2493;
t2418 = t2743 * t2493;
t2424 = t2493 * t2818;
t2439 = t2839 * t2493;
t2442 = t2842 * t2493;
t3190 = ((-(t3775 - 0.2e1 * t3687) * t2951 - t2628 * t2912 + t3002 - ((t2778 + t3040 - t3832) * t2912 - t2646 * t3376 + t2935 * t2910 + (t3422 + 0.4e1 * t3687) * t2951 - t2775 * t2942 + t3039) * t2892 - ((t2841 * t2943 + t2899) * t2951 + (-t2840 * t2942 + t3430) * t2943 - 0.2e1 * t3750) * t2952 + t2942 * t3678 + t2943 * t3415 + t2766 + (-t2625 * t2943 + t2637) * t3379) * t2343 + t2595 * t2338 + t2601 * t2334 + (t3307 + (t2442 + (-t2769 / 0.2e1 + t3382) * t2526) * t2951 + (t2526 * t3383 - t2439) * t2942 + t2418 - t3693 / 0.2e1) * t3255 * t3790 + (((t2424 + (-mrSges(3,2) * t2951 - t3699) * t3794) * t2487 + ((-t2421 + t3562) * t2951 - t3566 * t2942 + (-t2773 * t2951 + t3866) * t2493) * t2541 * t3397) * t2923 + t2490 * t2910 * t3405 + ((t2490 * t3829 + t2523 * t2774) * t2922 + t2541 * t2526 * t3680) * t2951 + ((-t2490 * t2772 + t2523 * t2771) * t2942 - t2490 * t2711) * t2922 + (-mrSges(3,1) * t3646 + t2424) * t3417 + t3861 * ((t2456 + t3566) * t2951 + (t2455 + t3562) * t2942 + (t2951 * t3401 + t2691 + t2766) * t2493) * t3623) * t2952 + 0.2e1 * (-t2439 * t2942 + t2442 * t2951 + t2418 + ((-t2773 - 0.2e1 * t2769) * t2951 - t3593 + (0.4e1 * t2910 - 0.2e1) * Ifges(3,4)) * t2526) * t3627 + ((t3139 * t3790 + (-0.8e1 * (t2797 * t2493 + (t3687 + t3764) * t2526) * t3625 - t2397 * t2960) * t2951 - 0.2e1 * ((-t2526 * t2773 + t2442) * t2942 + t2409 - t2526 * t2934) * t3625 - (-t2397 * t3696 + t2490 * t2852) * pkin(1)) * t2943 + ((-t2421 - t3386 - t3562 / 0.2e1) * t2951 + (-t3387 + t3566 / 0.2e1) * t2942 + (t3863 - 0.1e1) * t3684) * t3794) * t2923 + ((t2735 * t2922 + t3564 * t2951) * (-t2490 + t2523) + (t3094 + (-0.2e1 * t3394 + (t3402 + t3775) * t3647) * t2951 + (-t2526 * t2887 + t3646 * t3677 - t2409) * t2922 + 0.2e1 * t3369) * t2493) * t2943 + t3307 * t3790 + (t2523 * t3396 + (t2442 + (-t2769 - t3766) * t2526) * t3789) * t2951 + mrSges(3,1) * t2523 * t3365 + ((mrSges(3,2) * t2517 - t2439) * t2942 + t2418 - t3693) * t3789) * t2607;
t2524 = t2527 ^ 2;
t2398 = t2491 + t2524;
t2410 = t3872 * t2494;
t2419 = t2743 * t2494;
t2425 = t2494 * t2818;
t2440 = t2839 * t2494;
t2443 = t2842 * t2494;
t3189 = ((-(t3775 - 0.2e1 * t3686) * t2954 - t2629 * t2916 + t3002 - ((t2780 + t3040 - t3831) * t2916 - t2647 * t3375 + t2935 * t2914 + (t3422 + 0.4e1 * t3686) * t2954 - t2775 * t2945 + t3039) * t2892 - ((t2841 * t2946 + t2899) * t2954 + (-t2840 * t2945 + t3430) * t2946 - 0.2e1 * t3749) * t2955 + t2945 * t3678 + t2946 * t3415 + (-t2626 * t2946 + t2638) * t3379 + t2767) * t2344 + t2596 * t2336 + t2602 * t2335 + (t3306 + (t2443 + (-t2770 / 0.2e1 + t3382) * t2527) * t2954 + (t2527 * t3383 - t2440) * t2945 + t2419 - t3692 / 0.2e1) * t3254 * t3788 + (((t2425 + (-mrSges(3,2) * t2954 - t3698) * t3793) * t2488 + ((-t2422 + t3561) * t2954 - t3565 * t2945 + (-t2773 * t2954 + t3865) * t2494) * t2542 * t3397) * t2923 + t2491 * t2914 * t3405 + ((t2491 * t3828 + t2524 * t2774) * t2922 + t2542 * t2527 * t3680) * t2954 + ((-t2491 * t2772 + t2524 * t2771) * t2945 - t2491 * t2711) * t2922 + (-mrSges(3,1) * t3642 + t2425) * t3416 + t3861 * ((t2458 + t3565) * t2954 + (t2457 + t3561) * t2945 + (t2954 * t3399 + t2691 + t2767) * t2494) * t3617) * t2955 + 0.2e1 * (-t2440 * t2945 + t2443 * t2954 + t2419 + ((-t2773 - 0.2e1 * t2770) * t2954 - t3592 + (0.4e1 * t2914 - 0.2e1) * Ifges(3,4)) * t2527) * t3621 + ((t3138 * t3788 + (-0.8e1 * (t2797 * t2494 + (t3686 + t3764) * t2527) * t3619 - t2398 * t2960) * t2954 - 0.2e1 * ((-t2527 * t2773 + t2443) * t2945 + t2410 - t2527 * t2934) * t3619 - (-t2398 * t3695 + t2491 * t2852) * pkin(1)) * t2946 + ((-t2422 - t3384 - t3561 / 0.2e1) * t2954 + (-t3385 + t3565 / 0.2e1) * t2945 + (t3862 - 0.1e1) * t3683) * t3793) * t2923 + ((t2736 * t2922 + t3564 * t2954) * (-t2491 + t2524) + (t3093 + (-0.2e1 * t3393 + (t3400 + t3775) * t3643) * t2954 + (-t2527 * t2887 + t3642 * t3677 - t2410) * t2922 + 0.2e1 * t3368) * t2494) * t2946 + t3306 * t3788 + (t2524 * t3396 + (t2443 + (-t2770 - t3766) * t2527) * t3787) * t2954 + mrSges(3,1) * t2524 * t3364 + ((mrSges(3,2) * t2518 - t2440) * t2945 + t2419 - t3692) * t3787) * t2608;
t3188 = (t2594 * t2342 + (t2776 + t2901 + t3054) * t2337 + t2660 * t2333 - (t2627 * t2940 * t3761 - t2624 * t3534 + t3748) * t2540 * t3628 + (t3875 * t3281 + (-pkin(2) * t3700 - t2948 * t3098 - Ifges(3,4) + t2822) * t3795) * t3630 + (t3095 + (t3395 + (t3404 + t3679) * t3651) * t2948 - (t2777 - t2886) * t3651 - t3370) * t3629 + 0.4e1 * t2492 * t3308 + (-t3063 * t3397 * t3628 + (-0.2e1 * t2420 + t2453 - t3563) * t2948 - (t2454 - t3567) * t2939 + t2465) * t2525 + (-t3639 + (0.2e1 * t3256 + 0.1e1) * t2537) * t2645) * t2612;
t3187 = t3463 * t2616;
t3186 = t3462 * t2617;
t1 = [t2590 * t3189 + t2589 * t3190 + t2588 * t3191 + t2560 * t3193 + t2559 * t3194 + t2558 * t3188 + (t2564 * t3192 + t2565 * t3187 + t2566 * t3186) * t2989; t2593 * t3189 + t2592 * t3190 + t2591 * t3191 + t2557 * t3193 + t2556 * t3194 + t2555 * t3188 + (t2561 * t3192 + t2562 * t3187 + t2563 * t3186) * t2989; t2620 * t3189 + t2619 * t3190 + t2618 * t3191 + t2584 * t3193 + t2583 * t3194 + t2582 * t3188 + (t3462 * t3613 + t3463 * t3614 + t3464 * t3615) * t3520;];
taucX  = t1;
