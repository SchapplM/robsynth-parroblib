% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G3A0_convert_par2_MPV_fixb.m

% Output:
% taugX [3x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P3RRRRR10V2G3A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:25:14
% EndTime: 2020-08-07 03:25:27
% DurationCPUTime: 14.01s
% Computational Cost: add. (5322->688), mult. (10737->1190), div. (126->13), fcn. (9474->26), ass. (0->457)
t11159 = cos(qJ(3,3));
t11126 = t11159 * pkin(3);
t11099 = t11126 + pkin(2);
t11162 = cos(qJ(3,2));
t11127 = t11162 * pkin(3);
t11100 = t11127 + pkin(2);
t11165 = cos(qJ(3,1));
t11128 = t11165 * pkin(3);
t11101 = t11128 + pkin(2);
t11160 = cos(qJ(2,3));
t11140 = t11160 ^ 2;
t11168 = pkin(8) + pkin(7);
t11494 = t11140 * t11168;
t11163 = cos(qJ(2,2));
t11142 = t11163 ^ 2;
t11493 = t11142 * t11168;
t11166 = cos(qJ(2,1));
t11144 = t11166 ^ 2;
t11492 = t11144 * t11168;
t11110 = t11168 * t11166;
t11157 = sin(qJ(2,1));
t11064 = -pkin(2) * t11157 + t11110;
t11145 = sin(pkin(4));
t11199 = t11145 * t11064;
t11109 = t11168 * t11163;
t11154 = sin(qJ(2,2));
t11063 = -pkin(2) * t11154 + t11109;
t11200 = t11145 * t11063;
t11108 = t11168 * t11160;
t11151 = sin(qJ(2,3));
t11062 = -pkin(2) * t11151 + t11108;
t11201 = t11145 * t11062;
t11149 = legFrame(1,2);
t11119 = sin(t11149);
t11122 = cos(t11149);
t11058 = g(1) * t11122 - g(2) * t11119;
t11158 = sin(qJ(1,1));
t11167 = cos(qJ(1,1));
t11033 = -g(3) * t11158 + t11058 * t11167;
t11148 = legFrame(2,2);
t11118 = sin(t11148);
t11121 = cos(t11148);
t11057 = g(1) * t11121 - g(2) * t11118;
t11155 = sin(qJ(1,2));
t11164 = cos(qJ(1,2));
t11031 = -g(3) * t11155 + t11057 * t11164;
t11147 = legFrame(3,2);
t11117 = sin(t11147);
t11120 = cos(t11147);
t11056 = g(1) * t11120 - g(2) * t11117;
t11152 = sin(qJ(1,3));
t11161 = cos(qJ(1,3));
t11029 = -g(3) * t11152 + t11056 * t11161;
t11150 = sin(qJ(3,3));
t11302 = t11150 * pkin(6) + pkin(3);
t11139 = t11159 ^ 2;
t11467 = t11139 * pkin(3);
t11475 = pkin(2) * t11159;
t11491 = t11151 * (-t11302 + 0.2e1 * t11467 + t11475) - t11159 * t11108;
t11153 = sin(qJ(3,2));
t11301 = t11153 * pkin(6) + pkin(3);
t11141 = t11162 ^ 2;
t11465 = t11141 * pkin(3);
t11474 = pkin(2) * t11162;
t11490 = t11154 * (-t11301 + 0.2e1 * t11465 + t11474) - t11162 * t11109;
t11156 = sin(qJ(3,1));
t11300 = t11156 * pkin(6) + pkin(3);
t11143 = t11165 ^ 2;
t11463 = t11143 * pkin(3);
t11473 = pkin(2) * t11165;
t11489 = t11157 * (-t11300 + 0.2e1 * t11463 + t11473) - t11165 * t11110;
t11107 = t11168 * t11157;
t11131 = pkin(2) * t11166;
t11316 = t11107 + t11131;
t11061 = pkin(1) + t11316;
t11125 = t11156 * pkin(3);
t11232 = (t11144 - 0.2e1) * t11125 - pkin(6);
t11375 = t11145 * t11158;
t11488 = -t11061 * t11167 + t11232 * t11375;
t11106 = t11168 * t11154;
t11130 = pkin(2) * t11163;
t11317 = t11106 + t11130;
t11060 = pkin(1) + t11317;
t11124 = t11153 * pkin(3);
t11233 = (t11142 - 0.2e1) * t11124 - pkin(6);
t11378 = t11145 * t11155;
t11487 = -t11060 * t11164 + t11233 * t11378;
t11105 = t11168 * t11151;
t11129 = pkin(2) * t11160;
t11318 = t11105 + t11129;
t11059 = pkin(1) + t11318;
t11123 = t11150 * pkin(3);
t11234 = (t11140 - 0.2e1) * t11123 - pkin(6);
t11381 = t11145 * t11152;
t11486 = -t11059 * t11161 + t11234 * t11381;
t11485 = pkin(1) * t11099;
t11484 = pkin(1) * t11100;
t11483 = pkin(1) * t11101;
t11146 = cos(pkin(4));
t11482 = pkin(1) * t11146;
t11481 = pkin(2) * t11150;
t11479 = pkin(2) * t11153;
t11477 = pkin(2) * t11156;
t11472 = g(1) * t11145;
t11471 = g(2) * t11145;
t11466 = t11140 * pkin(2);
t11464 = t11142 * pkin(2);
t11462 = t11144 * pkin(2);
t11114 = t11146 * pkin(2);
t11138 = pkin(2) - t11168;
t11137 = pkin(2) + t11168;
t11136 = t11146 ^ 2;
t11461 = t11136 - 0.1e1 / 0.2e1;
t11326 = t11161 * t11168;
t11049 = -pkin(2) * t11152 + t11146 * t11326;
t11052 = -pkin(6) * t11145 * t11168 - pkin(1) * t11114;
t11080 = t11105 + pkin(1);
t11084 = pkin(1) * t11151 + t11168;
t11093 = t11123 + pkin(6);
t11094 = t11123 - pkin(6);
t11171 = pkin(2) ^ 2;
t11350 = t11146 * t11168;
t11241 = -0.2e1 * pkin(2) * t11350;
t11328 = t11161 * t11151;
t11247 = t11146 * t11328;
t11387 = t11137 * t11138;
t11270 = t11146 * t11387;
t11364 = t11146 * t11151;
t11308 = pkin(1) * t11364;
t11312 = pkin(6) * t11467;
t11315 = pkin(1) * t11123;
t11319 = 0.2e1 * t11114;
t11065 = pkin(1) + 0.2e1 * t11105;
t11345 = t11152 * t11065;
t11356 = t11146 * t11159;
t11382 = t11145 * t11151;
t11383 = t11145 * t11150;
t11169 = pkin(3) ^ 2;
t11386 = t11139 * t11169;
t11412 = t11093 * t11145;
t11083 = pkin(1) * t11350;
t11415 = t11083 * t11159;
t11460 = ((t11161 * t11241 - 0.2e1 * t11049 * t11126 + (t11386 + t11387) * t11152) * t11140 + (t11247 * t11386 + ((t11151 * t11319 - t11412) * t11161 + t11345) * t11126 + (-pkin(2) * t11412 + t11151 * t11270) * t11161 + pkin(2) * t11345) * t11160 + t11168 * (t11152 * t11084 + (pkin(3) * t11356 - t11093 * t11382 + t11114) * t11161)) / ((t11415 + (t11094 * t11475 + t11150 * t11171 - t11312) * t11145) * t11160 - t11308 * t11467 + (t11052 * t11151 + t11145 * t11315) * t11159 + t11080 * pkin(2) * t11383);
t11323 = t11164 * t11168;
t11050 = -pkin(2) * t11155 + t11146 * t11323;
t11081 = t11106 + pkin(1);
t11085 = pkin(1) * t11154 + t11168;
t11095 = t11124 + pkin(6);
t11096 = t11124 - pkin(6);
t11325 = t11164 * t11154;
t11246 = t11146 * t11325;
t11361 = t11146 * t11154;
t11307 = pkin(1) * t11361;
t11311 = pkin(6) * t11465;
t11314 = pkin(1) * t11124;
t11066 = pkin(1) + 0.2e1 * t11106;
t11338 = t11155 * t11066;
t11354 = t11146 * t11162;
t11379 = t11145 * t11154;
t11380 = t11145 * t11153;
t11385 = t11141 * t11169;
t11411 = t11095 * t11145;
t11414 = t11083 * t11162;
t11459 = ((t11164 * t11241 - 0.2e1 * t11050 * t11127 + (t11385 + t11387) * t11155) * t11142 + (t11246 * t11385 + ((t11154 * t11319 - t11411) * t11164 + t11338) * t11127 + (-pkin(2) * t11411 + t11154 * t11270) * t11164 + pkin(2) * t11338) * t11163 + t11168 * (t11155 * t11085 + (pkin(3) * t11354 - t11095 * t11379 + t11114) * t11164)) / ((t11414 + (t11096 * t11474 + t11153 * t11171 - t11311) * t11145) * t11163 - t11307 * t11465 + (t11052 * t11154 + t11145 * t11314) * t11162 + t11081 * pkin(2) * t11380);
t11320 = t11167 * t11168;
t11051 = -pkin(2) * t11158 + t11146 * t11320;
t11082 = t11107 + pkin(1);
t11086 = pkin(1) * t11157 + t11168;
t11097 = t11125 + pkin(6);
t11098 = t11125 - pkin(6);
t11322 = t11167 * t11157;
t11245 = t11146 * t11322;
t11358 = t11146 * t11157;
t11306 = pkin(1) * t11358;
t11310 = pkin(6) * t11463;
t11313 = pkin(1) * t11125;
t11067 = pkin(1) + 0.2e1 * t11107;
t11331 = t11158 * t11067;
t11352 = t11146 * t11165;
t11376 = t11145 * t11157;
t11377 = t11145 * t11156;
t11384 = t11143 * t11169;
t11410 = t11097 * t11145;
t11413 = t11083 * t11165;
t11458 = ((t11167 * t11241 - 0.2e1 * t11051 * t11128 + (t11384 + t11387) * t11158) * t11144 + (t11245 * t11384 + ((t11157 * t11319 - t11410) * t11167 + t11331) * t11128 + (-pkin(2) * t11410 + t11157 * t11270) * t11167 + pkin(2) * t11331) * t11166 + t11168 * (t11158 * t11086 + (pkin(3) * t11352 - t11097 * t11376 + t11114) * t11167)) / ((t11413 + (t11098 * t11473 + t11156 * t11171 - t11310) * t11145) * t11166 - t11306 * t11463 + (t11052 * t11157 + t11145 * t11313) * t11165 + t11082 * pkin(2) * t11377);
t11053 = g(1) * t11117 + g(2) * t11120;
t11344 = t11152 * t11160;
t11040 = -t11247 - t11344;
t11372 = t11145 * t11161;
t11268 = t11150 * t11372;
t11195 = t11040 * t11159 + t11268;
t11346 = t11151 * t11159;
t11263 = t11146 * t11346;
t11327 = t11161 * t11160;
t11365 = t11146 * t11150;
t10980 = t11056 * ((-t11263 + t11383) * t11152 + t11159 * t11327) + g(3) * t11195 + t11053 * (t11145 * t11346 + t11365);
t11068 = t11159 * pkin(6) - t11481;
t10995 = 0.1e1 / ((-t11068 * t11099 * t11145 + t11415) * t11160 + (-t11068 * t11105 + t11150 * t11485) * t11145 - t11263 * t11485);
t11457 = t10980 * t10995;
t11347 = t11151 * t11152;
t11037 = t11146 * t11347 - t11327;
t11374 = t11145 * t11159;
t11198 = t11037 * t11150 + t11152 * t11374;
t11256 = t11150 * t11344;
t11349 = t11150 * t11151;
t10981 = -t11056 * t11198 - ((t11146 * t11349 + t11374) * t11161 + t11256) * g(3) - t11053 * (-t11145 * t11349 + t11356);
t11456 = t10981 * t10995;
t11054 = g(1) * t11118 + g(2) * t11121;
t11337 = t11155 * t11163;
t11041 = -t11246 - t11337;
t11369 = t11145 * t11164;
t11266 = t11153 * t11369;
t11194 = t11041 * t11162 + t11266;
t11339 = t11154 * t11162;
t11261 = t11146 * t11339;
t11324 = t11164 * t11163;
t11362 = t11146 * t11153;
t10982 = t11057 * ((-t11261 + t11380) * t11155 + t11162 * t11324) + g(3) * t11194 + t11054 * (t11145 * t11339 + t11362);
t11069 = t11162 * pkin(6) - t11479;
t10996 = 0.1e1 / ((-t11069 * t11100 * t11145 + t11414) * t11163 + (-t11069 * t11106 + t11153 * t11484) * t11145 - t11261 * t11484);
t11455 = t10982 * t10996;
t11055 = g(1) * t11119 + g(2) * t11122;
t11330 = t11158 * t11166;
t11042 = -t11245 - t11330;
t11366 = t11145 * t11167;
t11264 = t11156 * t11366;
t11193 = t11042 * t11165 + t11264;
t11332 = t11157 * t11165;
t11259 = t11146 * t11332;
t11321 = t11167 * t11166;
t11359 = t11146 * t11156;
t10983 = ((-t11259 + t11377) * t11158 + t11165 * t11321) * t11058 + g(3) * t11193 + t11055 * (t11145 * t11332 + t11359);
t11070 = t11165 * pkin(6) - t11477;
t10997 = 0.1e1 / ((-t11070 * t11101 * t11145 + t11413) * t11166 + (-t11070 * t11107 + t11156 * t11483) * t11145 - t11259 * t11483);
t11454 = t10983 * t10997;
t11340 = t11154 * t11155;
t11038 = t11146 * t11340 - t11324;
t11371 = t11145 * t11162;
t11197 = t11038 * t11153 + t11155 * t11371;
t11252 = t11153 * t11337;
t11342 = t11153 * t11154;
t10984 = -t11197 * t11057 - ((t11146 * t11342 + t11371) * t11164 + t11252) * g(3) - t11054 * (-t11145 * t11342 + t11354);
t11453 = t10984 * t10996;
t11333 = t11157 * t11158;
t11039 = t11146 * t11333 - t11321;
t11368 = t11145 * t11165;
t11196 = t11039 * t11156 + t11158 * t11368;
t11248 = t11156 * t11330;
t11335 = t11156 * t11157;
t10985 = -t11196 * t11058 - ((t11146 * t11335 + t11368) * t11167 + t11248) * g(3) - t11055 * (-t11145 * t11335 + t11352);
t11452 = t10985 * t10997;
t11303 = t11061 * t11477;
t11367 = t11145 * t11166;
t10989 = 0.1e1 / (-(pkin(6) * t11367 + t11306) * t11463 + ((-pkin(6) * t11107 + t11098 * t11131 + t11313) * t11145 + t11064 * t11482) * t11165 + t11145 * t11303);
t11451 = t10989 * (-t11058 * (-t11042 * t11156 + t11165 * t11366) + g(3) * t11196);
t11334 = t11156 * t11158;
t11265 = t11145 * t11334;
t11450 = t10989 * (-t11193 * t11058 + g(3) * (-t11039 * t11165 + t11265));
t11032 = g(3) * t11167 + t11058 * t11158;
t11449 = t10989 * (t11032 * t11166 + t11033 * t11358);
t11448 = t10989 * (t11033 * t11146 * t11166 - t11032 * t11157);
t11447 = t10989 * t11032;
t11446 = t10989 * t11033;
t11305 = t11059 * t11481;
t11373 = t11145 * t11160;
t10990 = 0.1e1 / (-(pkin(6) * t11373 + t11308) * t11467 + ((-pkin(6) * t11105 + t11094 * t11129 + t11315) * t11145 + t11062 * t11482) * t11159 + t11145 * t11305);
t11445 = t10990 * (-t11056 * (-t11040 * t11150 + t11159 * t11372) + g(3) * t11198);
t11348 = t11150 * t11152;
t11269 = t11145 * t11348;
t11444 = t10990 * (-t11056 * t11195 + g(3) * (-t11037 * t11159 + t11269));
t11028 = g(3) * t11161 + t11056 * t11152;
t11443 = t10990 * (t11028 * t11160 + t11029 * t11364);
t11442 = t10990 * (t11029 * t11146 * t11160 - t11028 * t11151);
t11441 = t10990 * t11028;
t11440 = t10990 * t11029;
t11304 = t11060 * t11479;
t11370 = t11145 * t11163;
t10991 = 0.1e1 / (-(pkin(6) * t11370 + t11307) * t11465 + ((-pkin(6) * t11106 + t11096 * t11130 + t11314) * t11145 + t11063 * t11482) * t11162 + t11145 * t11304);
t11439 = t10991 * (-t11057 * (-t11041 * t11153 + t11162 * t11369) + g(3) * t11197);
t11341 = t11153 * t11155;
t11267 = t11145 * t11341;
t11438 = t10991 * (-t11194 * t11057 + g(3) * (-t11038 * t11162 + t11267));
t11030 = g(3) * t11164 + t11057 * t11155;
t11437 = t10991 * (t11030 * t11163 + t11031 * t11361);
t11436 = t10991 * (t11031 * t11146 * t11163 - t11030 * t11154);
t11435 = t10991 * t11030;
t11434 = t10991 * t11031;
t11102 = t11129 + pkin(1);
t10992 = 0.1e1 / ((-t11160 * t11312 + (-pkin(6) * t11318 + t11102 * t11123) * t11159 + t11305) * t11145 + pkin(1) * (-t11099 * t11151 + t11108) * t11356);
t11355 = t11146 * t11161;
t11363 = t11146 * t11152;
t11433 = t10992 * (((g(1) * t11363 - t11471) * t11120 + (-g(2) * t11363 - t11472) * t11117 + g(3) * t11355) * t11160 + t11151 * t11029);
t11257 = t11146 * t11344;
t11432 = t10992 * (t11056 * (t11257 + t11328) + g(3) * (t11146 * t11327 - t11347) - t11053 * t11373);
t11431 = t10992 * (g(3) * t11040 - t11037 * t11056 + t11053 * t11382);
t11103 = t11130 + pkin(1);
t10993 = 0.1e1 / ((-t11163 * t11311 + (-pkin(6) * t11317 + t11103 * t11124) * t11162 + t11304) * t11145 + pkin(1) * (-t11100 * t11154 + t11109) * t11354);
t11353 = t11146 * t11164;
t11360 = t11146 * t11155;
t11430 = t10993 * (((g(1) * t11360 - t11471) * t11121 + (-g(2) * t11360 - t11472) * t11118 + g(3) * t11353) * t11163 + t11154 * t11031);
t11253 = t11146 * t11337;
t11429 = t10993 * (t11057 * (t11253 + t11325) + g(3) * (t11146 * t11324 - t11340) - t11054 * t11370);
t11428 = t10993 * (g(3) * t11041 - t11038 * t11057 + t11054 * t11379);
t11104 = t11131 + pkin(1);
t10994 = 0.1e1 / ((-t11166 * t11310 + (-pkin(6) * t11316 + t11104 * t11125) * t11165 + t11303) * t11145 + pkin(1) * (-t11101 * t11157 + t11110) * t11352);
t11351 = t11146 * t11167;
t11357 = t11146 * t11158;
t11427 = t10994 * (((g(1) * t11357 - t11471) * t11122 + (-g(2) * t11357 - t11472) * t11119 + g(3) * t11351) * t11166 + t11157 * t11033);
t11249 = t11146 * t11330;
t11426 = t10994 * (t11058 * (t11249 + t11322) + g(3) * (t11146 * t11321 - t11333) - t11055 * t11367);
t11425 = t10994 * (g(3) * t11042 - t11039 * t11058 + t11055 * t11376);
t11418 = (t11126 + t11137) * (t11126 + t11138);
t11417 = (t11127 + t11137) * (t11127 + t11138);
t11416 = (t11128 + t11137) * (t11128 + t11138);
t11409 = t11099 * t11117;
t11408 = t11099 * t11120;
t11407 = t11100 * t11118;
t11406 = t11100 * t11121;
t11405 = t11101 * t11119;
t11404 = t11101 * t11122;
t11403 = (t11146 + 0.1e1) * (t11146 - 0.1e1);
t11402 = t11117 * t11084;
t11401 = t11117 * t11152;
t11400 = t11118 * t11085;
t11399 = t11118 * t11155;
t11398 = t11119 * t11086;
t11397 = t11119 * t11158;
t11396 = t11120 * t11084;
t11395 = t11120 * t11151;
t11394 = t11120 * t11152;
t11393 = t11121 * t11085;
t11392 = t11121 * t11154;
t11391 = t11121 * t11155;
t11390 = t11122 * t11086;
t11389 = t11122 * t11157;
t11388 = t11122 * t11158;
t11343 = t11152 * t11168;
t11336 = t11155 * t11168;
t11329 = t11158 * t11168;
t11309 = -0.2e1 * t11403;
t11299 = t11150 * t11433;
t11298 = t11159 * t11433;
t11297 = t11153 * t11430;
t11296 = t11162 * t11430;
t11295 = t11156 * t11427;
t11294 = t11165 * t11427;
t11262 = t11146 * t11343;
t11293 = (0.2e1 * t11099 * t11262 + t11161 * t11418) * t11145 * t11140;
t11260 = t11146 * t11336;
t11292 = (0.2e1 * t11100 * t11260 + t11164 * t11417) * t11145 * t11142;
t11258 = t11146 * t11329;
t11291 = (0.2e1 * t11101 * t11258 + t11167 * t11416) * t11145 * t11144;
t11290 = t11065 * t11099 * t11161;
t11289 = t11066 * t11100 * t11164;
t11288 = t11067 * t11101 * t11167;
t11287 = t11151 * t11418;
t11286 = t11154 * t11417;
t11285 = t11157 * t11416;
t11284 = t11099 * t11401;
t11283 = t11099 * t11394;
t11282 = t11100 * t11399;
t11281 = t11100 * t11391;
t11280 = t11101 * t11397;
t11279 = t11101 * t11388;
t11278 = t11117 * t11382;
t11277 = t11117 * t11347;
t11276 = t11118 * t11340;
t11275 = t11119 * t11333;
t11274 = t11120 * t11382;
t11273 = t11120 * t11347;
t11272 = t11121 * t11340;
t11271 = t11122 * t11333;
t11255 = t11118 * t11379;
t11254 = t11121 * t11379;
t11251 = t11119 * t11376;
t11250 = t11122 * t11376;
t11240 = pkin(3) * t11277;
t11239 = pkin(3) * t11273;
t11238 = pkin(3) * t11276;
t11237 = pkin(3) * t11272;
t11236 = pkin(3) * t11275;
t11235 = pkin(3) * t11271;
t11231 = t11151 * t11302;
t11230 = t11154 * t11301;
t11229 = t11157 * t11300;
t11228 = t11152 * t11287;
t11227 = t11155 * t11286;
t11226 = t11158 * t11285;
t11225 = t11327 * t11382;
t11224 = t11324 * t11379;
t11223 = t11321 * t11376;
t11222 = t11093 * t11284;
t11221 = t11093 * t11283;
t11220 = t11093 * t11277;
t11219 = t11093 * t11273;
t11218 = t11095 * t11282;
t11217 = t11095 * t11281;
t11216 = t11095 * t11276;
t11215 = t11095 * t11272;
t11214 = t11097 * t11280;
t11213 = t11097 * t11279;
t11212 = t11097 * t11275;
t11211 = t11097 * t11271;
t11210 = t11099 * t11140 * t11309;
t11209 = t11100 * t11142 * t11309;
t11208 = t11101 * t11144 * t11309;
t11207 = t11080 * t11160 + t11466;
t11206 = t11081 * t11163 + t11464;
t11205 = t11082 * t11166 + t11462;
t11192 = t11151 * t11108 - pkin(2) + t11466;
t11191 = t11154 * t11109 - pkin(2) + t11464;
t11190 = t11157 * t11110 - pkin(2) + t11462;
t11189 = pkin(6) * t11347 + (t11151 * t11129 + t11084 - t11494) * t11372;
t11188 = pkin(6) * t11340 + (t11154 * t11130 + t11085 - t11493) * t11369;
t11187 = pkin(6) * t11333 + (t11157 * t11131 + t11086 - t11492) * t11366;
t11183 = t11192 * t11348;
t11182 = t11191 * t11341;
t11181 = t11190 * t11334;
t11180 = pkin(3) * t11269 + (-pkin(2) * t11363 + t11326) * t11151 + (pkin(2) * t11161 + t11262) * t11160;
t11179 = pkin(3) * t11267 + (-pkin(2) * t11360 + t11323) * t11154 + (pkin(2) * t11164 + t11260) * t11163;
t11178 = pkin(3) * t11265 + (-pkin(2) * t11357 + t11320) * t11157 + (pkin(2) * t11167 + t11258) * t11166;
t11177 = -pkin(3) * t11365 + t11201;
t11176 = -pkin(3) * t11362 + t11200;
t11175 = -pkin(3) * t11359 + t11199;
t11174 = -t11192 * t11150 - t11234 * t11159;
t11173 = -t11191 * t11153 - t11233 * t11162;
t11172 = -t11190 * t11156 - t11232 * t11165;
t11170 = 0.1e1 / pkin(3);
t11135 = pkin(1) * t11168;
t11027 = t11135 - t11285;
t11026 = t11135 - t11286;
t11025 = t11135 - t11287;
t11000 = -t11042 * t11463 + (-pkin(3) * t11264 - t11051 * t11166 + (pkin(2) * t11351 + t11329) * t11157) * t11165 - pkin(2) * t11264;
t10999 = -t11041 * t11465 + (-pkin(3) * t11266 - t11050 * t11163 + (pkin(2) * t11353 + t11336) * t11154) * t11162 - pkin(2) * t11266;
t10998 = -t11040 * t11467 + (-pkin(3) * t11268 - t11049 * t11160 + (pkin(2) * t11355 + t11343) * t11151) * t11159 - pkin(2) * t11268;
t10979 = (-t11039 * t11119 - t11250) * t11463 + (t11119 * t11178 + t11122 * t11175) * t11165 + (t11119 * t11375 - t11122 * t11146) * t11477;
t10978 = (-t11038 * t11118 - t11254) * t11465 + (t11118 * t11179 + t11121 * t11176) * t11162 + (t11118 * t11378 - t11121 * t11146) * t11479;
t10977 = (-t11037 * t11117 - t11274) * t11467 + (t11117 * t11180 + t11120 * t11177) * t11159 + (t11117 * t11381 - t11120 * t11146) * t11481;
t10976 = -(-t11039 * t11122 + t11251) * t11463 + (t11119 * t11175 - t11122 * t11178) * t11165 - (t11119 * t11146 + t11122 * t11375) * t11477;
t10975 = -(-t11038 * t11121 + t11255) * t11465 + (t11118 * t11176 - t11121 * t11179) * t11162 - (t11118 * t11146 + t11121 * t11378) * t11479;
t10974 = -(-t11037 * t11120 + t11278) * t11467 + (t11117 * t11177 - t11120 * t11180) * t11159 - (t11117 * t11146 + t11120 * t11381) * t11481;
t10973 = ((t11157 * pkin(3) * t11248 - t11232 * t11351) * t11165 + (-t11190 * t11351 + t11158 * (t11104 * t11157 + t11168 - t11492)) * t11156) * t11145 - 0.2e1 * (t11249 / 0.2e1 + t11461 * t11322) * t11463 - (t11061 * t11158 - t11064 * t11351) * t11352 + t11167 * t11229 * t11403;
t10972 = ((t11154 * pkin(3) * t11252 - t11233 * t11353) * t11162 + (-t11191 * t11353 + t11155 * (t11103 * t11154 + t11168 - t11493)) * t11153) * t11145 - 0.2e1 * (t11253 / 0.2e1 + t11461 * t11325) * t11465 - (t11060 * t11155 - t11063 * t11353) * t11354 + t11164 * t11230 * t11403;
t10971 = ((t11151 * pkin(3) * t11256 - t11234 * t11355) * t11159 + (-t11192 * t11355 + t11152 * (t11102 * t11151 + t11168 - t11494)) * t11150) * t11145 - 0.2e1 * (t11257 / 0.2e1 + t11461 * t11328) * t11467 - (t11059 * t11152 - t11062 * t11355) * t11356 + t11161 * t11231 * t11403;
t10967 = -t11122 * t11291 + (((-t11097 * t11405 + t11122 * t11226) * t11146 - t11122 * t11288) * t11145 + (t11119 * t11285 + t11213) * t11136 - t11213 + t11119 * t11027) * t11166 - t11101 * t11398 + (t11119 * t11208 - ((t11097 * t11119 * t11157 - t11279) * t11146 + t11167 * t11390) * t11145 + (t11211 + t11405) * t11136 - t11211) * t11168;
t10966 = -t11121 * t11292 + (((-t11095 * t11407 + t11121 * t11227) * t11146 - t11121 * t11289) * t11145 + (t11118 * t11286 + t11217) * t11136 - t11217 + t11118 * t11026) * t11163 - t11100 * t11400 + (t11118 * t11209 - ((t11095 * t11118 * t11154 - t11281) * t11146 + t11164 * t11393) * t11145 + (t11215 + t11407) * t11136 - t11215) * t11168;
t10965 = -t11120 * t11293 + (((-t11093 * t11409 + t11120 * t11228) * t11146 - t11120 * t11290) * t11145 + (t11117 * t11287 + t11221) * t11136 - t11221 + t11117 * t11025) * t11160 - t11099 * t11402 + (t11117 * t11210 - ((t11093 * t11117 * t11151 - t11283) * t11146 + t11161 * t11396) * t11145 + (t11219 + t11409) * t11136 - t11219) * t11168;
t10964 = t11119 * t11291 + (((-t11097 * t11404 - t11119 * t11226) * t11146 + t11119 * t11288) * t11145 + (t11122 * t11285 - t11214) * t11136 + t11214 + t11122 * t11027) * t11166 - t11101 * t11390 + (t11122 * t11208 + ((-t11097 * t11389 - t11280) * t11146 + t11167 * t11398) * t11145 + (-t11212 + t11404) * t11136 + t11212) * t11168;
t10963 = t11118 * t11292 + (((-t11095 * t11406 - t11118 * t11227) * t11146 + t11118 * t11289) * t11145 + (t11121 * t11286 - t11218) * t11136 + t11218 + t11121 * t11026) * t11163 - t11100 * t11393 + (t11121 * t11209 + ((-t11095 * t11392 - t11282) * t11146 + t11164 * t11400) * t11145 + (-t11216 + t11406) * t11136 + t11216) * t11168;
t10962 = t11117 * t11293 + (((-t11093 * t11408 - t11117 * t11228) * t11146 + t11117 * t11290) * t11145 + (t11120 * t11287 - t11222) * t11136 + t11222 + t11120 * t11025) * t11160 - t11099 * t11396 + (t11120 * t11210 + ((-t11093 * t11395 - t11284) * t11146 + t11161 * t11402) * t11145 + (-t11220 + t11408) * t11136 + t11220) * t11168;
t10961 = (t11172 * t11119 - t11489 * t11388) * t11136 + ((t11122 * t11321 + 0.2e1 * t11251) * t11463 + (-t11119 * t11199 - t11488 * t11122) * t11165 - t11145 * (t11119 * t11229 + t11122 * t11181)) * t11146 + t11143 * t11235 + (-(-t11119 * t11144 + t11122 * t11223 + t11119) * t11125 - t11119 * pkin(6)) * t11165 + (t11205 * t11119 - t11187 * t11122) * t11156 - t11235;
t10960 = (t11173 * t11118 - t11490 * t11391) * t11136 + ((t11121 * t11324 + 0.2e1 * t11255) * t11465 + (-t11118 * t11200 - t11487 * t11121) * t11162 - t11145 * (t11118 * t11230 + t11121 * t11182)) * t11146 + t11141 * t11237 + (-(-t11118 * t11142 + t11121 * t11224 + t11118) * t11124 - t11118 * pkin(6)) * t11162 + (t11206 * t11118 - t11188 * t11121) * t11153 - t11237;
t10959 = (t11174 * t11117 - t11491 * t11394) * t11136 + ((t11120 * t11327 + 0.2e1 * t11278) * t11467 + (-t11117 * t11201 - t11486 * t11120) * t11159 - t11145 * (t11117 * t11231 + t11120 * t11183)) * t11146 + t11139 * t11239 + (-(-t11117 * t11140 + t11120 * t11225 + t11117) * t11123 - t11117 * pkin(6)) * t11159 + (t11207 * t11117 - t11189 * t11120) * t11150 - t11239;
t10958 = (t11172 * t11122 + t11489 * t11397) * t11136 + (-(t11119 * t11321 - 0.2e1 * t11250) * t11463 + (t11488 * t11119 - t11122 * t11199) * t11165 + t11145 * (t11119 * t11181 - t11300 * t11389)) * t11146 - t11143 * t11236 + ((t11119 * t11223 + t11122 * t11144 - t11122) * t11125 - t11122 * pkin(6)) * t11165 + (t11187 * t11119 + t11205 * t11122) * t11156 + t11236;
t10957 = (t11173 * t11121 + t11490 * t11399) * t11136 + (-(t11118 * t11324 - 0.2e1 * t11254) * t11465 + (t11487 * t11118 - t11121 * t11200) * t11162 + t11145 * (t11118 * t11182 - t11301 * t11392)) * t11146 - t11141 * t11238 + ((t11118 * t11224 + t11121 * t11142 - t11121) * t11124 - t11121 * pkin(6)) * t11162 + (t11188 * t11118 + t11206 * t11121) * t11153 + t11238;
t10956 = (t11174 * t11120 + t11491 * t11401) * t11136 + (-(t11117 * t11327 - 0.2e1 * t11274) * t11467 + (t11486 * t11117 - t11120 * t11201) * t11159 + t11145 * (t11117 * t11183 - t11302 * t11395)) * t11146 - t11139 * t11240 + ((t11117 * t11225 + t11120 * t11140 - t11120) * t11123 - t11120 * pkin(6)) * t11159 + (t11117 * t11189 + t11120 * t11207) * t11150 + t11240;
t1 = [(t10974 * t11441 + t10975 * t11435 + t10976 * t11447) * MDP(2) + (t10974 * t11440 + t10975 * t11434 + t10976 * t11446) * MDP(3) + (t10959 * t11432 + t10960 * t11429 + t10961 * t11426 + t10974 * t11443 + t10975 * t11437 + t10976 * t11449) * MDP(9) + (t10959 * t11431 + t10960 * t11428 + t10961 * t11425 + t10974 * t11442 + t10975 * t11436 + t10976 * t11448) * MDP(10) + (t10959 * t11298 + t10960 * t11296 + t10961 * t11294 + t10974 * t11444 + t10975 * t11438 + t10976 * t11450) * MDP(16) + (-t10959 * t11299 - t10960 * t11297 - t10961 * t11295 + t10974 * t11445 + t10975 * t11439 + t10976 * t11451) * MDP(17) - g(1) * MDP(18) + ((t10965 * t11456 + t10966 * t11453 + t10967 * t11452) * MDP(16) + (t10965 * t11457 + t10966 * t11455 + t10967 * t11454) * MDP(17)) * t11170; (t10977 * t11441 + t10978 * t11435 + t10979 * t11447) * MDP(2) + (t10977 * t11440 + t10978 * t11434 + t10979 * t11446) * MDP(3) + (t10956 * t11432 + t10957 * t11429 + t10958 * t11426 + t10977 * t11443 + t10978 * t11437 + t10979 * t11449) * MDP(9) + (t10956 * t11431 + t10957 * t11428 + t10958 * t11425 + t10977 * t11442 + t10978 * t11436 + t10979 * t11448) * MDP(10) + (t10956 * t11298 + t10957 * t11296 + t10958 * t11294 + t10977 * t11444 + t10978 * t11438 + t10979 * t11450) * MDP(16) + (-t10956 * t11299 - t10957 * t11297 - t10958 * t11295 + t10977 * t11445 + t10978 * t11439 + t10979 * t11451) * MDP(17) - g(2) * MDP(18) + ((t10962 * t11456 + t10963 * t11453 + t10964 * t11452) * MDP(16) + (t10962 * t11457 + t10963 * t11455 + t10964 * t11454) * MDP(17)) * t11170; (t10998 * t11441 + t10999 * t11435 + t11000 * t11447) * MDP(2) + (t10998 * t11440 + t10999 * t11434 + t11000 * t11446) * MDP(3) + (t10971 * t11432 + t10972 * t11429 + t10973 * t11426 + t10998 * t11443 + t10999 * t11437 + t11000 * t11449) * MDP(9) + (t10971 * t11431 + t10972 * t11428 + t10973 * t11425 + t10998 * t11442 + t10999 * t11436 + t11000 * t11448) * MDP(10) + (t10971 * t11298 + t10972 * t11296 + t10973 * t11294 + t10998 * t11444 + t10999 * t11438 + t11000 * t11450) * MDP(16) + (-t10971 * t11299 - t10972 * t11297 - t10973 * t11295 + t10998 * t11445 + t10999 * t11439 + t11000 * t11451) * MDP(17) - g(3) * MDP(18) + ((t10981 * t11460 + t10984 * t11459 + t10985 * t11458) * MDP(16) + (t10980 * t11460 + t10982 * t11459 + t10983 * t11458) * MDP(17)) * t11170 * t11145;];
taugX  = t1;
