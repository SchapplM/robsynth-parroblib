% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x18]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR10V2G3A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,1),zeros(3,3),zeros(3,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_gravload_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 02:58:15
% EndTime: 2020-08-07 02:58:26
% DurationCPUTime: 12.50s
% Computational Cost: add. (5307->673), mult. (10716->1166), div. (126->13), fcn. (9474->26), ass. (0->458)
t5399 = cos(qJ(3,3));
t5366 = t5399 * pkin(3);
t5339 = t5366 + pkin(2);
t5402 = cos(qJ(3,2));
t5367 = t5402 * pkin(3);
t5340 = t5367 + pkin(2);
t5405 = cos(qJ(3,1));
t5368 = t5405 * pkin(3);
t5341 = t5368 + pkin(2);
t5400 = cos(qJ(2,3));
t5380 = t5400 ^ 2;
t5408 = pkin(8) + pkin(7);
t5735 = t5380 * t5408;
t5403 = cos(qJ(2,2));
t5382 = t5403 ^ 2;
t5734 = t5382 * t5408;
t5406 = cos(qJ(2,1));
t5384 = t5406 ^ 2;
t5733 = t5384 * t5408;
t5350 = t5408 * t5406;
t5397 = sin(qJ(2,1));
t5304 = -pkin(2) * t5397 + t5350;
t5385 = sin(pkin(4));
t5433 = t5385 * t5304;
t5349 = t5408 * t5403;
t5394 = sin(qJ(2,2));
t5303 = -pkin(2) * t5394 + t5349;
t5434 = t5385 * t5303;
t5348 = t5408 * t5400;
t5391 = sin(qJ(2,3));
t5302 = -pkin(2) * t5391 + t5348;
t5435 = t5385 * t5302;
t5389 = legFrame(1,2);
t5359 = sin(t5389);
t5362 = cos(t5389);
t5298 = g(1) * t5362 - g(2) * t5359;
t5398 = sin(qJ(1,1));
t5407 = cos(qJ(1,1));
t5273 = -g(3) * t5398 + t5298 * t5407;
t5388 = legFrame(2,2);
t5358 = sin(t5388);
t5361 = cos(t5388);
t5297 = g(1) * t5361 - g(2) * t5358;
t5395 = sin(qJ(1,2));
t5404 = cos(qJ(1,2));
t5271 = -g(3) * t5395 + t5297 * t5404;
t5387 = legFrame(3,2);
t5357 = sin(t5387);
t5360 = cos(t5387);
t5296 = g(1) * t5360 - g(2) * t5357;
t5392 = sin(qJ(1,3));
t5401 = cos(qJ(1,3));
t5269 = -g(3) * t5392 + t5296 * t5401;
t5390 = sin(qJ(3,3));
t5542 = t5390 * pkin(6) + pkin(3);
t5379 = t5399 ^ 2;
t5705 = t5379 * pkin(3);
t5713 = pkin(2) * t5399;
t5732 = (-t5542 + 0.2e1 * t5705 + t5713) * t5391 - t5399 * t5348;
t5393 = sin(qJ(3,2));
t5541 = t5393 * pkin(6) + pkin(3);
t5381 = t5402 ^ 2;
t5704 = t5381 * pkin(3);
t5712 = pkin(2) * t5402;
t5731 = (-t5541 + 0.2e1 * t5704 + t5712) * t5394 - t5402 * t5349;
t5396 = sin(qJ(3,1));
t5540 = t5396 * pkin(6) + pkin(3);
t5383 = t5405 ^ 2;
t5703 = t5383 * pkin(3);
t5711 = pkin(2) * t5405;
t5730 = (-t5540 + 0.2e1 * t5703 + t5711) * t5397 - t5405 * t5350;
t5347 = t5408 * t5397;
t5371 = pkin(2) * t5406;
t5558 = t5347 + t5371;
t5301 = pkin(1) + t5558;
t5365 = t5396 * pkin(3);
t5472 = (t5384 - 0.2e1) * t5365 - pkin(6);
t5617 = t5385 * t5398;
t5729 = -t5301 * t5407 + t5472 * t5617;
t5346 = t5408 * t5394;
t5370 = pkin(2) * t5403;
t5559 = t5346 + t5370;
t5300 = pkin(1) + t5559;
t5364 = t5393 * pkin(3);
t5473 = (t5382 - 0.2e1) * t5364 - pkin(6);
t5620 = t5385 * t5395;
t5728 = -t5300 * t5404 + t5473 * t5620;
t5345 = t5408 * t5391;
t5369 = pkin(2) * t5400;
t5560 = t5345 + t5369;
t5299 = pkin(1) + t5560;
t5363 = t5390 * pkin(3);
t5474 = (t5380 - 0.2e1) * t5363 - pkin(6);
t5623 = t5385 * t5392;
t5727 = -t5299 * t5401 + t5474 * t5623;
t5726 = pkin(1) * t5339;
t5725 = pkin(1) * t5340;
t5724 = pkin(1) * t5341;
t5386 = cos(pkin(4));
t5723 = pkin(1) * t5386;
t5722 = pkin(2) * t5380;
t5721 = pkin(2) * t5382;
t5720 = pkin(2) * t5384;
t5719 = pkin(2) * t5390;
t5717 = pkin(2) * t5393;
t5715 = pkin(2) * t5396;
t5710 = g(1) * t5385;
t5709 = g(2) * t5385;
t5354 = t5386 * pkin(2);
t5378 = pkin(2) - t5408;
t5377 = pkin(2) + t5408;
t5569 = t5401 * t5408;
t5289 = -pkin(2) * t5392 + t5386 * t5569;
t5292 = -pkin(6) * t5385 * t5408 - pkin(1) * t5354;
t5320 = t5345 + pkin(1);
t5324 = pkin(1) * t5391 + t5408;
t5333 = t5363 + pkin(6);
t5334 = t5363 - pkin(6);
t5411 = pkin(2) ^ 2;
t5594 = t5386 * t5408;
t5481 = -0.2e1 * pkin(2) * t5594;
t5571 = t5401 * t5391;
t5487 = t5386 * t5571;
t5629 = t5377 * t5378;
t5509 = t5386 * t5629;
t5608 = t5386 * t5391;
t5548 = pkin(1) * t5608;
t5552 = pkin(6) * t5705;
t5555 = pkin(1) * t5363;
t5556 = 0.2e1 * t5354;
t5305 = pkin(1) + 0.2e1 * t5345;
t5589 = t5392 * t5305;
t5600 = t5386 * t5399;
t5624 = t5385 * t5391;
t5625 = t5385 * t5390;
t5409 = pkin(3) ^ 2;
t5628 = t5379 * t5409;
t5654 = t5333 * t5385;
t5323 = pkin(1) * t5594;
t5657 = t5323 * t5399;
t5702 = ((t5401 * t5481 - 0.2e1 * t5289 * t5366 + (t5628 + t5629) * t5392) * t5380 + (t5487 * t5628 + ((t5391 * t5556 - t5654) * t5401 + t5589) * t5366 + (-pkin(2) * t5654 + t5391 * t5509) * t5401 + pkin(2) * t5589) * t5400 + t5408 * (t5392 * t5324 + (pkin(3) * t5600 - t5333 * t5624 + t5354) * t5401)) / ((t5657 + (t5334 * t5713 + t5390 * t5411 - t5552) * t5385) * t5400 - t5548 * t5705 + (t5292 * t5391 + t5385 * t5555) * t5399 + t5320 * pkin(2) * t5625);
t5565 = t5404 * t5408;
t5290 = -pkin(2) * t5395 + t5386 * t5565;
t5321 = t5346 + pkin(1);
t5325 = pkin(1) * t5394 + t5408;
t5335 = t5364 + pkin(6);
t5336 = t5364 - pkin(6);
t5567 = t5404 * t5394;
t5486 = t5386 * t5567;
t5605 = t5386 * t5394;
t5547 = pkin(1) * t5605;
t5551 = pkin(6) * t5704;
t5554 = pkin(1) * t5364;
t5306 = pkin(1) + 0.2e1 * t5346;
t5582 = t5395 * t5306;
t5598 = t5386 * t5402;
t5621 = t5385 * t5394;
t5622 = t5385 * t5393;
t5627 = t5381 * t5409;
t5653 = t5335 * t5385;
t5656 = t5323 * t5402;
t5701 = ((t5404 * t5481 - 0.2e1 * t5290 * t5367 + (t5627 + t5629) * t5395) * t5382 + (t5486 * t5627 + ((t5394 * t5556 - t5653) * t5404 + t5582) * t5367 + (-pkin(2) * t5653 + t5394 * t5509) * t5404 + pkin(2) * t5582) * t5403 + t5408 * (t5395 * t5325 + (pkin(3) * t5598 - t5335 * t5621 + t5354) * t5404)) / ((t5656 + (t5336 * t5712 + t5393 * t5411 - t5551) * t5385) * t5403 - t5547 * t5704 + (t5292 * t5394 + t5385 * t5554) * t5402 + t5321 * pkin(2) * t5622);
t5561 = t5407 * t5408;
t5291 = -pkin(2) * t5398 + t5386 * t5561;
t5322 = t5347 + pkin(1);
t5326 = pkin(1) * t5397 + t5408;
t5337 = t5365 + pkin(6);
t5338 = t5365 - pkin(6);
t5563 = t5407 * t5397;
t5485 = t5386 * t5563;
t5602 = t5386 * t5397;
t5546 = pkin(1) * t5602;
t5550 = pkin(6) * t5703;
t5553 = pkin(1) * t5365;
t5307 = pkin(1) + 0.2e1 * t5347;
t5575 = t5398 * t5307;
t5596 = t5386 * t5405;
t5618 = t5385 * t5397;
t5619 = t5385 * t5396;
t5626 = t5383 * t5409;
t5652 = t5337 * t5385;
t5655 = t5323 * t5405;
t5700 = ((t5407 * t5481 - 0.2e1 * t5291 * t5368 + (t5626 + t5629) * t5398) * t5384 + (t5485 * t5626 + ((t5397 * t5556 - t5652) * t5407 + t5575) * t5368 + (-pkin(2) * t5652 + t5397 * t5509) * t5407 + pkin(2) * t5575) * t5406 + t5408 * (t5398 * t5326 + (pkin(3) * t5596 - t5337 * t5618 + t5354) * t5407)) / ((t5655 + (t5338 * t5711 + t5396 * t5411 - t5550) * t5385) * t5406 - t5546 * t5703 + (t5292 * t5397 + t5385 * t5553) * t5405 + t5322 * pkin(2) * t5619);
t5293 = g(1) * t5357 + g(2) * t5360;
t5588 = t5392 * t5400;
t5280 = -t5487 - t5588;
t5615 = t5385 * t5401;
t5507 = t5390 * t5615;
t5438 = t5280 * t5399 + t5507;
t5590 = t5391 * t5399;
t5503 = t5386 * t5590;
t5570 = t5401 * t5400;
t5609 = t5386 * t5390;
t5220 = t5296 * ((-t5503 + t5625) * t5392 + t5399 * t5570) + g(3) * t5438 + t5293 * (t5385 * t5590 + t5609);
t5308 = t5399 * pkin(6) - t5719;
t5235 = 0.1e1 / ((-t5308 * t5339 * t5385 + t5657) * t5400 + (-t5308 * t5345 + t5390 * t5726) * t5385 - t5503 * t5726);
t5699 = t5220 * t5235;
t5591 = t5391 * t5392;
t5277 = t5386 * t5591 - t5570;
t5616 = t5385 * t5399;
t5441 = t5277 * t5390 + t5392 * t5616;
t5495 = t5390 * t5588;
t5593 = t5390 * t5391;
t5221 = -t5296 * t5441 - ((t5386 * t5593 + t5616) * t5401 + t5495) * g(3) - t5293 * (-t5385 * t5593 + t5600);
t5698 = t5221 * t5235;
t5294 = g(1) * t5358 + g(2) * t5361;
t5581 = t5395 * t5403;
t5281 = -t5486 - t5581;
t5613 = t5385 * t5404;
t5506 = t5393 * t5613;
t5437 = t5281 * t5402 + t5506;
t5583 = t5394 * t5402;
t5501 = t5386 * t5583;
t5566 = t5404 * t5403;
t5606 = t5386 * t5393;
t5222 = t5297 * ((-t5501 + t5622) * t5395 + t5402 * t5566) + g(3) * t5437 + t5294 * (t5385 * t5583 + t5606);
t5309 = t5402 * pkin(6) - t5717;
t5236 = 0.1e1 / ((-t5309 * t5340 * t5385 + t5656) * t5403 + (-t5309 * t5346 + t5393 * t5725) * t5385 - t5501 * t5725);
t5697 = t5222 * t5236;
t5295 = g(1) * t5359 + g(2) * t5362;
t5574 = t5398 * t5406;
t5282 = -t5485 - t5574;
t5611 = t5385 * t5407;
t5504 = t5396 * t5611;
t5436 = t5282 * t5405 + t5504;
t5576 = t5397 * t5405;
t5499 = t5386 * t5576;
t5562 = t5407 * t5406;
t5603 = t5386 * t5396;
t5223 = ((-t5499 + t5619) * t5398 + t5405 * t5562) * t5298 + g(3) * t5436 + t5295 * (t5385 * t5576 + t5603);
t5310 = t5405 * pkin(6) - t5715;
t5237 = 0.1e1 / ((-t5310 * t5341 * t5385 + t5655) * t5406 + (-t5310 * t5347 + t5396 * t5724) * t5385 - t5499 * t5724);
t5696 = t5223 * t5237;
t5584 = t5394 * t5395;
t5278 = t5386 * t5584 - t5566;
t5614 = t5385 * t5402;
t5440 = t5278 * t5393 + t5395 * t5614;
t5490 = t5393 * t5581;
t5586 = t5393 * t5394;
t5224 = -t5440 * t5297 - ((t5386 * t5586 + t5614) * t5404 + t5490) * g(3) - t5294 * (-t5385 * t5586 + t5598);
t5695 = t5224 * t5236;
t5577 = t5397 * t5398;
t5279 = t5386 * t5577 - t5562;
t5612 = t5385 * t5405;
t5439 = t5279 * t5396 + t5398 * t5612;
t5488 = t5396 * t5574;
t5579 = t5396 * t5397;
t5225 = -t5439 * t5298 - ((t5386 * t5579 + t5612) * t5407 + t5488) * g(3) - t5295 * (-t5385 * t5579 + t5596);
t5694 = t5225 * t5237;
t5543 = t5301 * t5715;
t5564 = t5406 * t5385;
t5229 = 0.1e1 / (-(pkin(6) * t5564 + t5546) * t5703 + ((-pkin(6) * t5347 + t5338 * t5371 + t5553) * t5385 + t5304 * t5723) * t5405 + t5385 * t5543);
t5693 = t5229 * (-t5298 * (-t5282 * t5396 + t5405 * t5611) + g(3) * t5439);
t5578 = t5396 * t5398;
t5505 = t5385 * t5578;
t5692 = t5229 * (-t5436 * t5298 + g(3) * (-t5279 * t5405 + t5505));
t5272 = g(3) * t5407 + t5298 * t5398;
t5691 = t5229 * (t5272 * t5406 + t5273 * t5602);
t5690 = t5229 * (t5273 * t5386 * t5406 - t5272 * t5397);
t5689 = t5229 * t5272;
t5688 = t5229 * t5273;
t5545 = t5299 * t5719;
t5572 = t5400 * t5385;
t5230 = 0.1e1 / (-(pkin(6) * t5572 + t5548) * t5705 + ((-pkin(6) * t5345 + t5334 * t5369 + t5555) * t5385 + t5302 * t5723) * t5399 + t5385 * t5545);
t5687 = t5230 * (-t5296 * (-t5280 * t5390 + t5399 * t5615) + g(3) * t5441);
t5592 = t5390 * t5392;
t5508 = t5385 * t5592;
t5686 = t5230 * (-t5296 * t5438 + g(3) * (-t5277 * t5399 + t5508));
t5268 = g(3) * t5401 + t5296 * t5392;
t5685 = t5230 * (t5268 * t5400 + t5269 * t5608);
t5684 = t5230 * (t5269 * t5386 * t5400 - t5268 * t5391);
t5683 = t5230 * t5268;
t5682 = t5230 * t5269;
t5544 = t5300 * t5717;
t5568 = t5403 * t5385;
t5231 = 0.1e1 / (-(pkin(6) * t5568 + t5547) * t5704 + ((-pkin(6) * t5346 + t5336 * t5370 + t5554) * t5385 + t5303 * t5723) * t5402 + t5385 * t5544);
t5681 = t5231 * (-t5297 * (-t5281 * t5393 + t5402 * t5613) + g(3) * t5440);
t5585 = t5393 * t5395;
t5492 = t5385 * t5585;
t5680 = t5231 * (-t5437 * t5297 + g(3) * (-t5278 * t5402 + t5492));
t5270 = g(3) * t5404 + t5297 * t5395;
t5679 = t5231 * (t5270 * t5403 + t5271 * t5605);
t5678 = t5231 * (t5271 * t5386 * t5403 - t5270 * t5394);
t5677 = t5231 * t5270;
t5676 = t5231 * t5271;
t5342 = t5369 + pkin(1);
t5232 = 0.1e1 / ((-t5400 * t5552 + (-pkin(6) * t5560 + t5342 * t5363) * t5399 + t5545) * t5385 + pkin(1) * (-t5339 * t5391 + t5348) * t5600);
t5599 = t5386 * t5401;
t5607 = t5386 * t5392;
t5675 = t5232 * (((g(1) * t5607 - t5709) * t5360 + (-g(2) * t5607 - t5710) * t5357 + g(3) * t5599) * t5400 + t5391 * t5269);
t5496 = t5386 * t5588;
t5674 = t5232 * (t5296 * (t5496 + t5571) + g(3) * (t5386 * t5570 - t5591) - t5293 * t5572);
t5673 = t5232 * (g(3) * t5280 - t5277 * t5296 + t5293 * t5624);
t5343 = t5370 + pkin(1);
t5233 = 0.1e1 / ((-t5403 * t5551 + (-pkin(6) * t5559 + t5343 * t5364) * t5402 + t5544) * t5385 + pkin(1) * (-t5340 * t5394 + t5349) * t5598);
t5597 = t5386 * t5404;
t5604 = t5386 * t5395;
t5672 = t5233 * (((g(1) * t5604 - t5709) * t5361 + (-g(2) * t5604 - t5710) * t5358 + g(3) * t5597) * t5403 + t5394 * t5271);
t5491 = t5386 * t5581;
t5671 = t5233 * (t5297 * (t5491 + t5567) + g(3) * (t5386 * t5566 - t5584) - t5294 * t5568);
t5670 = t5233 * (g(3) * t5281 - t5278 * t5297 + t5294 * t5621);
t5344 = t5371 + pkin(1);
t5234 = 0.1e1 / ((-t5406 * t5550 + (-pkin(6) * t5558 + t5344 * t5365) * t5405 + t5543) * t5385 + pkin(1) * (-t5341 * t5397 + t5350) * t5596);
t5595 = t5386 * t5407;
t5601 = t5386 * t5398;
t5669 = t5234 * (((g(1) * t5601 - t5709) * t5362 + (-g(2) * t5601 - t5710) * t5359 + g(3) * t5595) * t5406 + t5397 * t5273);
t5489 = t5386 * t5574;
t5668 = t5234 * (t5298 * (t5489 + t5563) + g(3) * (t5386 * t5562 - t5577) - t5295 * t5564);
t5667 = t5234 * (g(3) * t5282 - t5279 * t5298 + t5295 * t5618);
t5660 = (t5366 + t5377) * (t5366 + t5378);
t5659 = (t5367 + t5377) * (t5367 + t5378);
t5658 = (t5368 + t5377) * (t5368 + t5378);
t5651 = t5339 * t5357;
t5650 = t5339 * t5360;
t5649 = t5340 * t5358;
t5648 = t5340 * t5361;
t5647 = t5341 * t5359;
t5646 = t5341 * t5362;
t5645 = (t5386 + 0.1e1) * (t5386 - 0.1e1);
t5644 = t5357 * t5324;
t5643 = t5357 * t5392;
t5642 = t5358 * t5325;
t5641 = t5358 * t5395;
t5640 = t5359 * t5326;
t5639 = t5359 * t5398;
t5638 = t5360 * t5324;
t5637 = t5360 * t5391;
t5636 = t5360 * t5392;
t5635 = t5361 * t5325;
t5634 = t5361 * t5394;
t5633 = t5361 * t5395;
t5632 = t5362 * t5326;
t5631 = t5362 * t5397;
t5630 = t5362 * t5398;
t5410 = 0.1e1 / pkin(3);
t5610 = t5385 * t5410;
t5587 = t5392 * t5408;
t5580 = t5395 * t5408;
t5573 = t5398 * t5408;
t5376 = t5386 ^ 2;
t5557 = t5376 - 0.1e1 / 0.2e1;
t5549 = -0.2e1 * t5645;
t5539 = t5390 * t5675;
t5538 = t5399 * t5675;
t5537 = t5393 * t5672;
t5536 = t5402 * t5672;
t5535 = t5396 * t5669;
t5534 = t5405 * t5669;
t5502 = t5386 * t5587;
t5533 = (0.2e1 * t5339 * t5502 + t5401 * t5660) * t5385 * t5380;
t5500 = t5386 * t5580;
t5532 = (0.2e1 * t5340 * t5500 + t5404 * t5659) * t5385 * t5382;
t5498 = t5386 * t5573;
t5531 = (0.2e1 * t5341 * t5498 + t5407 * t5658) * t5385 * t5384;
t5530 = t5305 * t5339 * t5401;
t5529 = t5306 * t5340 * t5404;
t5528 = t5307 * t5341 * t5407;
t5527 = t5391 * t5660;
t5526 = t5394 * t5659;
t5525 = t5397 * t5658;
t5524 = t5339 * t5643;
t5523 = t5339 * t5636;
t5522 = t5340 * t5641;
t5521 = t5340 * t5633;
t5520 = t5341 * t5639;
t5519 = t5341 * t5630;
t5518 = t5357 * t5591;
t5517 = t5358 * t5584;
t5516 = t5359 * t5618;
t5515 = t5359 * t5577;
t5514 = t5360 * t5624;
t5513 = t5360 * t5591;
t5512 = t5361 * t5584;
t5511 = t5362 * t5618;
t5510 = t5362 * t5577;
t5497 = t5357 * t5624;
t5494 = t5358 * t5621;
t5493 = t5361 * t5621;
t5480 = pkin(3) * t5518;
t5479 = pkin(3) * t5513;
t5478 = pkin(3) * t5517;
t5477 = pkin(3) * t5512;
t5476 = pkin(3) * t5515;
t5475 = pkin(3) * t5510;
t5471 = t5392 * t5527;
t5470 = t5395 * t5526;
t5469 = t5398 * t5525;
t5468 = t5333 * t5518;
t5467 = t5333 * t5513;
t5466 = t5335 * t5517;
t5465 = t5335 * t5512;
t5464 = t5337 * t5515;
t5463 = t5337 * t5510;
t5462 = t5570 * t5624;
t5461 = t5566 * t5621;
t5460 = t5562 * t5618;
t5459 = t5333 * t5524;
t5458 = t5333 * t5523;
t5457 = t5335 * t5522;
t5456 = t5335 * t5521;
t5455 = t5337 * t5520;
t5454 = t5337 * t5519;
t5453 = t5391 * t5542;
t5452 = t5394 * t5541;
t5451 = t5397 * t5540;
t5450 = t5339 * t5380 * t5549;
t5449 = t5340 * t5382 * t5549;
t5448 = t5341 * t5384 * t5549;
t5447 = t5320 * t5400 + t5722;
t5446 = t5321 * t5403 + t5721;
t5445 = t5322 * t5406 + t5720;
t5432 = t5391 * t5348 - pkin(2) + t5722;
t5431 = t5394 * t5349 - pkin(2) + t5721;
t5430 = t5397 * t5350 - pkin(2) + t5720;
t5429 = pkin(6) * t5591 + (t5391 * t5369 + t5324 - t5735) * t5615;
t5428 = pkin(6) * t5584 + (t5394 * t5370 + t5325 - t5734) * t5613;
t5427 = pkin(6) * t5577 + (t5397 * t5371 + t5326 - t5733) * t5611;
t5423 = t5432 * t5592;
t5422 = t5431 * t5585;
t5421 = t5430 * t5578;
t5420 = pkin(3) * t5508 + (-pkin(2) * t5607 + t5569) * t5391 + (pkin(2) * t5401 + t5502) * t5400;
t5419 = pkin(3) * t5492 + (-pkin(2) * t5604 + t5565) * t5394 + (pkin(2) * t5404 + t5500) * t5403;
t5418 = pkin(3) * t5505 + (-pkin(2) * t5601 + t5561) * t5397 + (pkin(2) * t5407 + t5498) * t5406;
t5417 = -pkin(3) * t5609 + t5435;
t5416 = -pkin(3) * t5606 + t5434;
t5415 = -pkin(3) * t5603 + t5433;
t5414 = -t5432 * t5390 - t5474 * t5399;
t5413 = -t5431 * t5393 - t5473 * t5402;
t5412 = -t5430 * t5396 - t5472 * t5405;
t5375 = pkin(1) * t5408;
t5267 = t5375 - t5525;
t5266 = t5375 - t5526;
t5265 = t5375 - t5527;
t5240 = -t5282 * t5703 + (-pkin(3) * t5504 - t5291 * t5406 + (pkin(2) * t5595 + t5573) * t5397) * t5405 - pkin(2) * t5504;
t5239 = -t5281 * t5704 + (-pkin(3) * t5506 - t5290 * t5403 + (pkin(2) * t5597 + t5580) * t5394) * t5402 - pkin(2) * t5506;
t5238 = -t5280 * t5705 + (-pkin(3) * t5507 - t5289 * t5400 + (pkin(2) * t5599 + t5587) * t5391) * t5399 - pkin(2) * t5507;
t5219 = (-t5279 * t5359 - t5511) * t5703 + (t5418 * t5359 + t5415 * t5362) * t5405 + (t5359 * t5617 - t5362 * t5386) * t5715;
t5218 = (-t5278 * t5358 - t5493) * t5704 + (t5419 * t5358 + t5416 * t5361) * t5402 + (t5358 * t5620 - t5361 * t5386) * t5717;
t5217 = (-t5277 * t5357 - t5514) * t5705 + (t5420 * t5357 + t5417 * t5360) * t5399 + (t5357 * t5623 - t5360 * t5386) * t5719;
t5216 = -(-t5279 * t5362 + t5516) * t5703 + (t5415 * t5359 - t5418 * t5362) * t5405 - (t5359 * t5386 + t5362 * t5617) * t5715;
t5215 = -(-t5278 * t5361 + t5494) * t5704 + (t5416 * t5358 - t5419 * t5361) * t5402 - (t5358 * t5386 + t5361 * t5620) * t5717;
t5214 = -(-t5277 * t5360 + t5497) * t5705 + (t5417 * t5357 - t5420 * t5360) * t5399 - (t5357 * t5386 + t5360 * t5623) * t5719;
t5213 = ((t5397 * pkin(3) * t5488 - t5472 * t5595) * t5405 + (-t5430 * t5595 + t5398 * (t5344 * t5397 + t5408 - t5733)) * t5396) * t5385 - 0.2e1 * (t5489 / 0.2e1 + t5557 * t5563) * t5703 - (t5301 * t5398 - t5304 * t5595) * t5596 + t5407 * t5451 * t5645;
t5212 = ((t5394 * pkin(3) * t5490 - t5473 * t5597) * t5402 + (-t5431 * t5597 + t5395 * (t5343 * t5394 + t5408 - t5734)) * t5393) * t5385 - 0.2e1 * (t5491 / 0.2e1 + t5557 * t5567) * t5704 - (t5300 * t5395 - t5303 * t5597) * t5598 + t5404 * t5452 * t5645;
t5211 = ((t5391 * pkin(3) * t5495 - t5474 * t5599) * t5399 + (-t5432 * t5599 + t5392 * (t5342 * t5391 + t5408 - t5735)) * t5390) * t5385 - 0.2e1 * (t5496 / 0.2e1 + t5557 * t5571) * t5705 - (t5299 * t5392 - t5302 * t5599) * t5600 + t5401 * t5453 * t5645;
t5207 = -t5362 * t5531 + (((-t5337 * t5647 + t5362 * t5469) * t5386 - t5362 * t5528) * t5385 + (t5359 * t5525 + t5454) * t5376 - t5454 + t5359 * t5267) * t5406 - t5341 * t5640 + (t5359 * t5448 - ((t5337 * t5359 * t5397 - t5519) * t5386 + t5407 * t5632) * t5385 + (t5463 + t5647) * t5376 - t5463) * t5408;
t5206 = -t5361 * t5532 + (((-t5335 * t5649 + t5361 * t5470) * t5386 - t5361 * t5529) * t5385 + (t5358 * t5526 + t5456) * t5376 - t5456 + t5358 * t5266) * t5403 - t5340 * t5642 + (t5358 * t5449 - ((t5335 * t5358 * t5394 - t5521) * t5386 + t5404 * t5635) * t5385 + (t5465 + t5649) * t5376 - t5465) * t5408;
t5205 = -t5360 * t5533 + (((-t5333 * t5651 + t5360 * t5471) * t5386 - t5360 * t5530) * t5385 + (t5357 * t5527 + t5458) * t5376 - t5458 + t5357 * t5265) * t5400 - t5339 * t5644 + (t5357 * t5450 - ((t5333 * t5357 * t5391 - t5523) * t5386 + t5401 * t5638) * t5385 + (t5467 + t5651) * t5376 - t5467) * t5408;
t5204 = t5359 * t5531 + (((-t5337 * t5646 - t5359 * t5469) * t5386 + t5359 * t5528) * t5385 + (t5362 * t5525 - t5455) * t5376 + t5455 + t5362 * t5267) * t5406 - t5341 * t5632 + (t5362 * t5448 + ((-t5337 * t5631 - t5520) * t5386 + t5407 * t5640) * t5385 + (-t5464 + t5646) * t5376 + t5464) * t5408;
t5203 = t5358 * t5532 + (((-t5335 * t5648 - t5358 * t5470) * t5386 + t5358 * t5529) * t5385 + (t5361 * t5526 - t5457) * t5376 + t5457 + t5361 * t5266) * t5403 - t5340 * t5635 + (t5361 * t5449 + ((-t5335 * t5634 - t5522) * t5386 + t5404 * t5642) * t5385 + (-t5466 + t5648) * t5376 + t5466) * t5408;
t5202 = t5357 * t5533 + (((-t5333 * t5650 - t5357 * t5471) * t5386 + t5357 * t5530) * t5385 + (t5360 * t5527 - t5459) * t5376 + t5459 + t5360 * t5265) * t5400 - t5339 * t5638 + (t5360 * t5450 + ((-t5333 * t5637 - t5524) * t5386 + t5401 * t5644) * t5385 + (-t5468 + t5650) * t5376 + t5468) * t5408;
t5201 = (t5412 * t5359 - t5730 * t5630) * t5376 + ((t5362 * t5562 + 0.2e1 * t5516) * t5703 + (-t5359 * t5433 - t5729 * t5362) * t5405 - t5385 * (t5359 * t5451 + t5362 * t5421)) * t5386 + t5383 * t5475 + (-(-t5359 * t5384 + t5362 * t5460 + t5359) * t5365 - t5359 * pkin(6)) * t5405 + (t5445 * t5359 - t5427 * t5362) * t5396 - t5475;
t5200 = (t5413 * t5358 - t5731 * t5633) * t5376 + ((t5361 * t5566 + 0.2e1 * t5494) * t5704 + (-t5358 * t5434 - t5728 * t5361) * t5402 - t5385 * (t5358 * t5452 + t5361 * t5422)) * t5386 + t5381 * t5477 + (-(-t5358 * t5382 + t5361 * t5461 + t5358) * t5364 - t5358 * pkin(6)) * t5402 + (t5446 * t5358 - t5428 * t5361) * t5393 - t5477;
t5199 = (t5414 * t5357 - t5732 * t5636) * t5376 + ((t5360 * t5570 + 0.2e1 * t5497) * t5705 + (-t5357 * t5435 - t5727 * t5360) * t5399 - t5385 * (t5357 * t5453 + t5360 * t5423)) * t5386 + t5379 * t5479 + (-(-t5357 * t5380 + t5360 * t5462 + t5357) * t5363 - t5357 * pkin(6)) * t5399 + (t5447 * t5357 - t5429 * t5360) * t5390 - t5479;
t5198 = (t5412 * t5362 + t5730 * t5639) * t5376 + (-(t5359 * t5562 - 0.2e1 * t5511) * t5703 + (t5729 * t5359 - t5362 * t5433) * t5405 + t5385 * (t5359 * t5421 - t5540 * t5631)) * t5386 - t5383 * t5476 + ((t5359 * t5460 + t5362 * t5384 - t5362) * t5365 - t5362 * pkin(6)) * t5405 + (t5427 * t5359 + t5445 * t5362) * t5396 + t5476;
t5197 = (t5413 * t5361 + t5731 * t5641) * t5376 + (-(t5358 * t5566 - 0.2e1 * t5493) * t5704 + (t5728 * t5358 - t5361 * t5434) * t5402 + t5385 * (t5358 * t5422 - t5541 * t5634)) * t5386 - t5381 * t5478 + ((t5358 * t5461 + t5361 * t5382 - t5361) * t5364 - t5361 * pkin(6)) * t5402 + (t5428 * t5358 + t5446 * t5361) * t5393 + t5478;
t5196 = (t5414 * t5360 + t5732 * t5643) * t5376 + (-(t5357 * t5570 - 0.2e1 * t5514) * t5705 + (t5727 * t5357 - t5360 * t5435) * t5399 + t5385 * (t5357 * t5423 - t5542 * t5637)) * t5386 - t5379 * t5480 + ((t5357 * t5462 + t5360 * t5380 - t5360) * t5363 - t5360 * pkin(6)) * t5399 + (t5429 * t5357 + t5447 * t5360) * t5390 + t5480;
t1 = [0, t5214 * t5683 + t5215 * t5677 + t5216 * t5689, t5214 * t5682 + t5215 * t5676 + t5216 * t5688, 0, 0, 0, 0, 0, t5199 * t5674 + t5200 * t5671 + t5201 * t5668 + t5214 * t5685 + t5215 * t5679 + t5216 * t5691, t5199 * t5673 + t5200 * t5670 + t5201 * t5667 + t5214 * t5684 + t5215 * t5678 + t5216 * t5690, 0, 0, 0, 0, 0, t5199 * t5538 + t5200 * t5536 + t5201 * t5534 + t5214 * t5686 + t5215 * t5680 + t5216 * t5692 + (t5205 * t5698 + t5206 * t5695 + t5207 * t5694) * t5410, -t5199 * t5539 - t5200 * t5537 - t5201 * t5535 + t5214 * t5687 + t5215 * t5681 + t5216 * t5693 + (t5205 * t5699 + t5206 * t5697 + t5207 * t5696) * t5410, -g(1); 0, t5217 * t5683 + t5218 * t5677 + t5219 * t5689, t5217 * t5682 + t5218 * t5676 + t5219 * t5688, 0, 0, 0, 0, 0, t5196 * t5674 + t5197 * t5671 + t5198 * t5668 + t5217 * t5685 + t5218 * t5679 + t5219 * t5691, t5196 * t5673 + t5197 * t5670 + t5198 * t5667 + t5217 * t5684 + t5218 * t5678 + t5219 * t5690, 0, 0, 0, 0, 0, t5196 * t5538 + t5197 * t5536 + t5198 * t5534 + t5217 * t5686 + t5218 * t5680 + t5219 * t5692 + (t5202 * t5698 + t5203 * t5695 + t5204 * t5694) * t5410, -t5196 * t5539 - t5197 * t5537 - t5198 * t5535 + t5217 * t5687 + t5218 * t5681 + t5219 * t5693 + (t5202 * t5699 + t5203 * t5697 + t5204 * t5696) * t5410, -g(2); 0, t5238 * t5683 + t5239 * t5677 + t5240 * t5689, t5238 * t5682 + t5239 * t5676 + t5240 * t5688, 0, 0, 0, 0, 0, t5211 * t5674 + t5212 * t5671 + t5213 * t5668 + t5238 * t5685 + t5239 * t5679 + t5240 * t5691, t5211 * t5673 + t5212 * t5670 + t5213 * t5667 + t5238 * t5684 + t5239 * t5678 + t5240 * t5690, 0, 0, 0, 0, 0, t5211 * t5538 + t5212 * t5536 + t5213 * t5534 + t5240 * t5692 + t5238 * t5686 + t5239 * t5680 + (t5221 * t5702 + t5224 * t5701 + t5225 * t5700) * t5610, -t5211 * t5539 - t5212 * t5537 - t5213 * t5535 + t5240 * t5693 + t5238 * t5687 + t5239 * t5681 + (t5220 * t5702 + t5222 * t5701 + t5223 * t5700) * t5610, -g(3);];
tau_reg  = t1;
