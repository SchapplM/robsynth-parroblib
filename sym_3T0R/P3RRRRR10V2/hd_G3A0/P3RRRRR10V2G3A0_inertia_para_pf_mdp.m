% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR10V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR10V2G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:25
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR10V2G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(8,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR10V2G3A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:12:03
% EndTime: 2020-08-07 03:13:31
% DurationCPUTime: 94.76s
% Computational Cost: add. (164838->1646), mult. (329121->2811), div. (4509->16), fcn. (278892->26), ass. (0->981)
t8279 = legFrame(1,2);
t8242 = sin(t8279);
t8245 = cos(t8279);
t8286 = sin(qJ(3,1));
t8248 = t8286 * pkin(3);
t8276 = cos(pkin(4));
t8263 = t8276 ^ 2;
t8295 = cos(qJ(3,1));
t8273 = t8295 ^ 2;
t8296 = cos(qJ(2,1));
t8274 = t8296 ^ 2;
t8275 = sin(pkin(4));
t8298 = pkin(8) + pkin(7);
t8233 = t8298 * t8296;
t8287 = sin(qJ(2,1));
t8254 = t8274 * pkin(2);
t8917 = t8254 - pkin(2);
t8358 = t8287 * t8233 + t8917;
t8236 = t8274 - 0.2e1;
t8460 = t8236 * t8248 - pkin(6);
t8304 = -t8358 * t8286 - t8460 * t8295;
t8288 = sin(qJ(1,1));
t8698 = t8286 * t8288;
t8319 = t8358 * t8698;
t8260 = pkin(1) * t8287;
t8224 = t8260 + pkin(7);
t8209 = pkin(8) + t8224;
t8693 = t8287 * t8296;
t8695 = t8287 * t8288;
t8297 = cos(qJ(1,1));
t8732 = t8275 * t8297;
t8889 = t8274 * t8298;
t8355 = pkin(6) * t8695 + (pkin(2) * t8693 + t8209 - t8889) * t8732;
t8861 = pkin(2) * t8287;
t8184 = t8233 - t8861;
t8361 = t8275 * t8184;
t8230 = t8298 * t8287;
t8202 = t8230 + pkin(1);
t8391 = t8202 * t8296 + t8254;
t8679 = t8297 * t8287;
t8733 = t8275 * t8296;
t8424 = t8679 * t8733;
t8508 = t8242 * t8695;
t8464 = pkin(3) * t8508;
t8739 = t8275 * t8287;
t8503 = t8245 * t8739;
t8619 = pkin(6) * t8286 + pkin(3);
t8680 = t8296 * t8297;
t8749 = t8245 * t8287;
t8754 = t8242 * t8288;
t8855 = pkin(3) * t8273;
t8257 = pkin(2) * t8296;
t8675 = t8230 + t8257;
t8181 = pkin(1) + t8675;
t8738 = t8275 * t8288;
t8876 = -t8181 * t8297 + t8460 * t8738;
t8858 = pkin(2) * t8295;
t8877 = t8287 * (-t8619 + 0.2e1 * t8855 + t8858) - t8295 * t8233;
t8060 = (t8304 * t8245 + t8754 * t8877) * t8263 + (-(t8242 * t8680 - 0.2e1 * t8503) * t8855 + (t8242 * t8876 - t8245 * t8361) * t8295 + t8275 * (t8242 * t8319 - t8619 * t8749)) * t8276 - t8273 * t8464 + ((t8242 * t8424 + t8245 * t8274 - t8245) * t8248 - t8245 * pkin(6)) * t8295 + (t8355 * t8242 + t8391 * t8245) * t8286 + t8464;
t8862 = pkin(2) * t8286;
t8625 = t8181 * t8862;
t8723 = t8276 * t8295;
t8646 = pkin(1) * t8723;
t8664 = pkin(6) * t8855;
t8895 = t8257 + pkin(1);
t8253 = t8295 * pkin(3);
t8218 = t8253 + pkin(2);
t8911 = t8218 * t8287;
t8126 = 0.1e1 / ((-t8296 * t8664 + (-pkin(6) * t8675 + t8248 * t8895) * t8295 + t8625) * t8275 + (t8233 - t8911) * t8646);
t8024 = t8060 * t8126;
t8261 = pkin(1) * t8298;
t8264 = pkin(2) + t8298;
t8265 = pkin(2) - t8298;
t8773 = (t8253 + t8264) * (t8253 + t8265);
t8523 = t8287 * t8773;
t8141 = t8261 - t8523;
t8214 = t8248 + pkin(6);
t8757 = (t8276 + 0.1e1) * (t8276 - 0.1e1);
t8660 = -0.2e1 * t8757;
t8397 = t8218 * t8274 * t8660;
t8515 = t8218 * t8754;
t8419 = t8214 * t8515;
t8428 = t8214 * t8508;
t8433 = t8288 * t8523;
t8299 = 0.2e1 * t8298;
t8205 = t8287 * t8299 + pkin(1);
t8520 = t8205 * t8218 * t8297;
t8690 = t8288 * t8298;
t8486 = t8276 * t8690;
t8526 = (0.2e1 * t8218 * t8486 + t8297 * t8773) * t8274 * t8275;
t8758 = t8218 * t8245;
t8767 = t8209 * t8297;
t8066 = t8242 * t8526 + (((-t8214 * t8758 - t8242 * t8433) * t8276 + t8242 * t8520) * t8275 + (t8245 * t8523 - t8419) * t8263 + t8419 + t8245 * t8141) * t8296 - t8209 * t8758 + (t8245 * t8397 + ((-t8214 * t8749 - t8515) * t8276 + t8242 * t8767) * t8275 + (-t8428 + t8758) * t8263 + t8428) * t8298;
t8159 = -t8276 * t8695 + t8680;
t8728 = t8276 * t8286;
t8313 = -pkin(3) * t8728 + t8361;
t8237 = t8276 * pkin(2);
t8640 = pkin(3) * t8698;
t8678 = t8297 * t8298;
t8316 = (-t8288 * t8237 + t8678) * t8287 + (pkin(2) * t8297 + t8486) * t8296 + t8275 * t8640;
t8111 = (t8159 * t8242 - t8503) * t8855 + (t8242 * t8316 + t8245 * t8313) * t8295 + (t8242 * t8738 - t8245 * t8276) * t8862;
t8634 = pkin(6) * t8733;
t8649 = t8276 * t8260;
t8163 = t8634 + t8649;
t8215 = t8248 - pkin(6);
t8667 = pkin(1) * t8248;
t8870 = pkin(1) * t8276;
t8121 = -t8163 * t8855 + ((-pkin(6) * t8230 + t8215 * t8257 + t8667) * t8275 + t8184 * t8870) * t8295 + t8275 * t8625;
t8115 = 0.1e1 / t8121;
t8566 = t8115 * t8739;
t8898 = 0.2e1 * pkin(6);
t8417 = t8566 * t8898;
t8192 = pkin(6) * t8295 - t8862;
t8721 = t8276 * t8298;
t8206 = pkin(1) * t8721;
t8770 = t8206 * t8295;
t8132 = 0.1e1 / ((-t8192 * t8218 * t8275 + t8770) * t8296 + (pkin(1) * t8218 * t8286 - t8192 * t8230) * t8275 - t8646 * t8911);
t8302 = 0.1e1 / pkin(3);
t8779 = t8132 * t8302;
t8604 = t8066 * t8779;
t8472 = pkin(7) * t8604;
t8300 = 0.2e1 * pkin(2);
t8867 = pkin(1) * t8296;
t8227 = t8300 + t8867;
t8785 = t8126 * t8227;
t8187 = pkin(7) * t8287 + t8895;
t8882 = 0.2e1 * ((pkin(7) * t8693 + t8917) * t8263 - t8187 * t8296) * t8115;
t8885 = t8302 * t8895;
t8914 = t8132 * t8885;
t8934 = (t8066 * t8914 + (pkin(6) * t8024 + t8472) * t8287) * t8275 + t8111 * t8882 + (-t8060 * t8785 + t8111 * t8417) * t8276;
t8278 = legFrame(2,2);
t8241 = sin(t8278);
t8244 = cos(t8278);
t8283 = sin(qJ(3,2));
t8247 = t8283 * pkin(3);
t8292 = cos(qJ(3,2));
t8271 = t8292 ^ 2;
t8293 = cos(qJ(2,2));
t8272 = t8293 ^ 2;
t8232 = t8298 * t8293;
t8284 = sin(qJ(2,2));
t8252 = t8272 * pkin(2);
t8918 = t8252 - pkin(2);
t8359 = t8284 * t8232 + t8918;
t8235 = t8272 - 0.2e1;
t8461 = t8235 * t8247 - pkin(6);
t8305 = -t8359 * t8283 - t8461 * t8292;
t8285 = sin(qJ(1,2));
t8708 = t8283 * t8285;
t8320 = t8359 * t8708;
t8259 = pkin(1) * t8284;
t8223 = t8259 + pkin(7);
t8208 = pkin(8) + t8223;
t8703 = t8284 * t8293;
t8705 = t8284 * t8285;
t8294 = cos(qJ(1,2));
t8734 = t8275 * t8294;
t8890 = t8272 * t8298;
t8356 = pkin(6) * t8705 + (pkin(2) * t8703 + t8208 - t8890) * t8734;
t8863 = pkin(2) * t8284;
t8183 = t8232 - t8863;
t8362 = t8275 * t8183;
t8229 = t8298 * t8284;
t8201 = t8229 + pkin(1);
t8392 = t8201 * t8293 + t8252;
t8683 = t8294 * t8284;
t8735 = t8275 * t8293;
t8425 = t8683 * t8735;
t8510 = t8241 * t8705;
t8466 = pkin(3) * t8510;
t8741 = t8275 * t8284;
t8505 = t8244 * t8741;
t8620 = pkin(6) * t8283 + pkin(3);
t8684 = t8293 * t8294;
t8751 = t8244 * t8284;
t8755 = t8241 * t8285;
t8856 = pkin(3) * t8271;
t8256 = pkin(2) * t8293;
t8676 = t8229 + t8256;
t8180 = pkin(1) + t8676;
t8740 = t8275 * t8285;
t8875 = -t8180 * t8294 + t8461 * t8740;
t8859 = pkin(2) * t8292;
t8878 = t8284 * (-t8620 + 0.2e1 * t8856 + t8859) - t8292 * t8232;
t8059 = (t8305 * t8244 + t8755 * t8878) * t8263 + (-(t8241 * t8684 - 0.2e1 * t8505) * t8856 + (t8241 * t8875 - t8244 * t8362) * t8292 + t8275 * (t8241 * t8320 - t8620 * t8751)) * t8276 - t8271 * t8466 + ((t8241 * t8425 + t8244 * t8272 - t8244) * t8247 - t8244 * pkin(6)) * t8292 + (t8356 * t8241 + t8392 * t8244) * t8283 + t8466;
t8864 = pkin(2) * t8283;
t8626 = t8180 * t8864;
t8725 = t8276 * t8292;
t8647 = pkin(1) * t8725;
t8665 = pkin(6) * t8856;
t8896 = t8256 + pkin(1);
t8251 = t8292 * pkin(3);
t8217 = t8251 + pkin(2);
t8912 = t8217 * t8284;
t8125 = 0.1e1 / ((-t8293 * t8665 + (-pkin(6) * t8676 + t8247 * t8896) * t8292 + t8626) * t8275 + (t8232 - t8912) * t8647);
t8023 = t8059 * t8125;
t8774 = (t8251 + t8264) * (t8251 + t8265);
t8524 = t8284 * t8774;
t8140 = t8261 - t8524;
t8212 = t8247 + pkin(6);
t8398 = t8217 * t8272 * t8660;
t8517 = t8217 * t8755;
t8421 = t8212 * t8517;
t8430 = t8212 * t8510;
t8434 = t8285 * t8524;
t8204 = t8284 * t8299 + pkin(1);
t8521 = t8204 * t8217 * t8294;
t8700 = t8285 * t8298;
t8488 = t8276 * t8700;
t8527 = (0.2e1 * t8217 * t8488 + t8294 * t8774) * t8272 * t8275;
t8760 = t8217 * t8244;
t8768 = t8208 * t8294;
t8065 = t8241 * t8527 + (((-t8212 * t8760 - t8241 * t8434) * t8276 + t8241 * t8521) * t8275 + (t8244 * t8524 - t8421) * t8263 + t8421 + t8244 * t8140) * t8293 - t8208 * t8760 + (t8244 * t8398 + ((-t8212 * t8751 - t8517) * t8276 + t8241 * t8768) * t8275 + (-t8430 + t8760) * t8263 + t8430) * t8298;
t8158 = -t8276 * t8705 + t8684;
t8729 = t8276 * t8283;
t8314 = -pkin(3) * t8729 + t8362;
t8641 = pkin(3) * t8708;
t8682 = t8294 * t8298;
t8317 = (-t8285 * t8237 + t8682) * t8284 + (pkin(2) * t8294 + t8488) * t8293 + t8275 * t8641;
t8110 = (t8158 * t8241 - t8505) * t8856 + (t8241 * t8317 + t8244 * t8314) * t8292 + (t8241 * t8740 - t8244 * t8276) * t8864;
t8635 = pkin(6) * t8735;
t8650 = t8276 * t8259;
t8165 = t8635 + t8650;
t8213 = t8247 - pkin(6);
t8668 = pkin(1) * t8247;
t8123 = -t8165 * t8856 + ((-pkin(6) * t8229 + t8213 * t8256 + t8668) * t8275 + t8183 * t8870) * t8292 + t8275 * t8626;
t8119 = 0.1e1 / t8123;
t8550 = t8119 * t8741;
t8415 = t8550 * t8898;
t8190 = pkin(6) * t8292 - t8864;
t8771 = t8206 * t8292;
t8131 = 0.1e1 / ((-t8190 * t8217 * t8275 + t8771) * t8293 + (pkin(1) * t8217 * t8283 - t8190 * t8229) * t8275 - t8647 * t8912);
t8780 = t8131 * t8302;
t8605 = t8065 * t8780;
t8473 = pkin(7) * t8605;
t8868 = pkin(1) * t8293;
t8226 = t8300 + t8868;
t8792 = t8125 * t8226;
t8186 = pkin(7) * t8284 + t8896;
t8881 = 0.2e1 * ((pkin(7) * t8703 + t8918) * t8263 - t8186 * t8293) * t8119;
t8884 = t8302 * t8896;
t8915 = t8131 * t8884;
t8933 = (t8065 * t8915 + (pkin(6) * t8023 + t8473) * t8284) * t8275 + t8110 * t8881 + (-t8059 * t8792 + t8110 * t8415) * t8276;
t8277 = legFrame(3,2);
t8240 = sin(t8277);
t8243 = cos(t8277);
t8280 = sin(qJ(3,3));
t8246 = t8280 * pkin(3);
t8289 = cos(qJ(3,3));
t8269 = t8289 ^ 2;
t8290 = cos(qJ(2,3));
t8270 = t8290 ^ 2;
t8231 = t8298 * t8290;
t8281 = sin(qJ(2,3));
t8250 = t8270 * pkin(2);
t8919 = t8250 - pkin(2);
t8360 = t8281 * t8231 + t8919;
t8234 = t8270 - 0.2e1;
t8462 = t8234 * t8246 - pkin(6);
t8306 = -t8360 * t8280 - t8462 * t8289;
t8282 = sin(qJ(1,3));
t8718 = t8280 * t8282;
t8321 = t8360 * t8718;
t8258 = pkin(1) * t8281;
t8222 = t8258 + pkin(7);
t8207 = pkin(8) + t8222;
t8713 = t8281 * t8290;
t8715 = t8281 * t8282;
t8291 = cos(qJ(1,3));
t8736 = t8275 * t8291;
t8891 = t8270 * t8298;
t8357 = pkin(6) * t8715 + (pkin(2) * t8713 + t8207 - t8891) * t8736;
t8865 = pkin(2) * t8281;
t8182 = t8231 - t8865;
t8363 = t8275 * t8182;
t8228 = t8298 * t8281;
t8200 = t8228 + pkin(1);
t8393 = t8200 * t8290 + t8250;
t8687 = t8291 * t8281;
t8737 = t8275 * t8290;
t8426 = t8687 * t8737;
t8512 = t8240 * t8715;
t8468 = pkin(3) * t8512;
t8743 = t8275 * t8281;
t8507 = t8243 * t8743;
t8621 = pkin(6) * t8280 + pkin(3);
t8688 = t8290 * t8291;
t8753 = t8243 * t8281;
t8756 = t8240 * t8282;
t8857 = pkin(3) * t8269;
t8255 = pkin(2) * t8290;
t8677 = t8228 + t8255;
t8179 = pkin(1) + t8677;
t8742 = t8275 * t8282;
t8874 = -t8179 * t8291 + t8462 * t8742;
t8860 = pkin(2) * t8289;
t8879 = t8281 * (-t8621 + 0.2e1 * t8857 + t8860) - t8289 * t8231;
t8058 = (t8306 * t8243 + t8756 * t8879) * t8263 + (-(t8240 * t8688 - 0.2e1 * t8507) * t8857 + (t8240 * t8874 - t8243 * t8363) * t8289 + t8275 * (t8240 * t8321 - t8621 * t8753)) * t8276 - t8269 * t8468 + ((t8240 * t8426 + t8243 * t8270 - t8243) * t8246 - t8243 * pkin(6)) * t8289 + (t8357 * t8240 + t8393 * t8243) * t8280 + t8468;
t8866 = pkin(2) * t8280;
t8627 = t8179 * t8866;
t8727 = t8276 * t8289;
t8648 = pkin(1) * t8727;
t8666 = pkin(6) * t8857;
t8897 = t8255 + pkin(1);
t8249 = t8289 * pkin(3);
t8216 = t8249 + pkin(2);
t8913 = t8216 * t8281;
t8124 = 0.1e1 / ((-t8290 * t8666 + (-pkin(6) * t8677 + t8246 * t8897) * t8289 + t8627) * t8275 + (t8231 - t8913) * t8648);
t8022 = t8058 * t8124;
t8775 = (t8249 + t8264) * (t8249 + t8265);
t8525 = t8281 * t8775;
t8139 = t8261 - t8525;
t8210 = t8246 + pkin(6);
t8399 = t8216 * t8270 * t8660;
t8519 = t8216 * t8756;
t8423 = t8210 * t8519;
t8432 = t8210 * t8512;
t8435 = t8282 * t8525;
t8203 = t8281 * t8299 + pkin(1);
t8522 = t8203 * t8216 * t8291;
t8710 = t8282 * t8298;
t8490 = t8276 * t8710;
t8528 = (0.2e1 * t8216 * t8490 + t8291 * t8775) * t8270 * t8275;
t8762 = t8216 * t8243;
t8769 = t8207 * t8291;
t8064 = t8240 * t8528 + (((-t8210 * t8762 - t8240 * t8435) * t8276 + t8240 * t8522) * t8275 + (t8243 * t8525 - t8423) * t8263 + t8423 + t8243 * t8139) * t8290 - t8207 * t8762 + (t8243 * t8399 + ((-t8210 * t8753 - t8519) * t8276 + t8240 * t8769) * t8275 + (-t8432 + t8762) * t8263 + t8432) * t8298;
t8157 = -t8276 * t8715 + t8688;
t8730 = t8276 * t8280;
t8315 = -pkin(3) * t8730 + t8363;
t8642 = pkin(3) * t8718;
t8686 = t8291 * t8298;
t8318 = (-t8282 * t8237 + t8686) * t8281 + (pkin(2) * t8291 + t8490) * t8290 + t8275 * t8642;
t8109 = (t8157 * t8240 - t8507) * t8857 + (t8240 * t8318 + t8243 * t8315) * t8289 + (t8240 * t8742 - t8243 * t8276) * t8866;
t8636 = pkin(6) * t8737;
t8651 = t8276 * t8258;
t8164 = t8636 + t8651;
t8211 = t8246 - pkin(6);
t8669 = pkin(1) * t8246;
t8122 = -t8164 * t8857 + ((-pkin(6) * t8228 + t8211 * t8255 + t8669) * t8275 + t8182 * t8870) * t8289 + t8275 * t8627;
t8117 = 0.1e1 / t8122;
t8558 = t8117 * t8743;
t8416 = t8558 * t8898;
t8188 = pkin(6) * t8289 - t8866;
t8772 = t8206 * t8289;
t8130 = 0.1e1 / ((-t8188 * t8216 * t8275 + t8772) * t8290 + (pkin(1) * t8216 * t8280 - t8188 * t8228) * t8275 - t8648 * t8913);
t8781 = t8130 * t8302;
t8606 = t8064 * t8781;
t8474 = pkin(7) * t8606;
t8869 = pkin(1) * t8290;
t8225 = t8300 + t8869;
t8799 = t8124 * t8225;
t8185 = pkin(7) * t8281 + t8897;
t8880 = 0.2e1 * ((pkin(7) * t8713 + t8919) * t8263 - t8185 * t8290) * t8117;
t8883 = t8302 * t8897;
t8916 = t8130 * t8883;
t8932 = (t8064 * t8916 + (pkin(6) * t8022 + t8474) * t8281) * t8275 + t8109 * t8880 + (-t8058 * t8799 + t8109 * t8416) * t8276;
t8409 = t8287 * t8619;
t8502 = t8245 * t8695;
t8463 = pkin(3) * t8502;
t8509 = t8242 * t8739;
t8748 = t8245 * t8288;
t8063 = (t8304 * t8242 - t8748 * t8877) * t8263 + ((t8245 * t8680 + 0.2e1 * t8509) * t8855 + (-t8242 * t8361 - t8245 * t8876) * t8295 - t8275 * (t8242 * t8409 + t8245 * t8319)) * t8276 + t8273 * t8463 + (-(-t8242 * t8274 + t8245 * t8424 + t8242) * t8248 - t8242 * pkin(6)) * t8295 + (t8391 * t8242 - t8355 * t8245) * t8286 - t8463;
t8027 = t8063 * t8126;
t8514 = t8218 * t8748;
t8418 = t8214 * t8514;
t8427 = t8214 * t8502;
t8759 = t8218 * t8242;
t8069 = -t8245 * t8526 + (((-t8214 * t8759 + t8245 * t8433) * t8276 - t8245 * t8520) * t8275 + (t8242 * t8523 + t8418) * t8263 - t8418 + t8242 * t8141) * t8296 - t8209 * t8759 + (t8242 * t8397 - ((t8214 * t8242 * t8287 - t8514) * t8276 + t8245 * t8767) * t8275 + (t8427 + t8759) * t8263 - t8427) * t8298;
t8108 = -(t8159 * t8245 + t8509) * t8855 + (t8242 * t8313 - t8245 * t8316) * t8295 - (t8242 * t8276 + t8245 * t8738) * t8862;
t8601 = t8069 * t8779;
t8469 = pkin(7) * t8601;
t8931 = (t8069 * t8914 + (pkin(6) * t8027 + t8469) * t8287) * t8275 + t8108 * t8882 + (-t8063 * t8785 + t8108 * t8417) * t8276;
t8410 = t8284 * t8620;
t8504 = t8244 * t8705;
t8465 = pkin(3) * t8504;
t8511 = t8241 * t8741;
t8750 = t8244 * t8285;
t8062 = (t8305 * t8241 - t8750 * t8878) * t8263 + ((t8244 * t8684 + 0.2e1 * t8511) * t8856 + (-t8241 * t8362 - t8244 * t8875) * t8292 - t8275 * (t8241 * t8410 + t8244 * t8320)) * t8276 + t8271 * t8465 + (-(-t8241 * t8272 + t8244 * t8425 + t8241) * t8247 - t8241 * pkin(6)) * t8292 + (t8392 * t8241 - t8356 * t8244) * t8283 - t8465;
t8026 = t8062 * t8125;
t8516 = t8217 * t8750;
t8420 = t8212 * t8516;
t8429 = t8212 * t8504;
t8761 = t8217 * t8241;
t8068 = -t8244 * t8527 + (((-t8212 * t8761 + t8244 * t8434) * t8276 - t8244 * t8521) * t8275 + (t8241 * t8524 + t8420) * t8263 - t8420 + t8241 * t8140) * t8293 - t8208 * t8761 + (t8241 * t8398 - ((t8212 * t8241 * t8284 - t8516) * t8276 + t8244 * t8768) * t8275 + (t8429 + t8761) * t8263 - t8429) * t8298;
t8107 = -(t8158 * t8244 + t8511) * t8856 + (t8241 * t8314 - t8244 * t8317) * t8292 - (t8241 * t8276 + t8244 * t8740) * t8864;
t8602 = t8068 * t8780;
t8470 = pkin(7) * t8602;
t8930 = (t8068 * t8915 + (pkin(6) * t8026 + t8470) * t8284) * t8275 + t8107 * t8881 + (-t8062 * t8792 + t8107 * t8415) * t8276;
t8411 = t8281 * t8621;
t8506 = t8243 * t8715;
t8467 = pkin(3) * t8506;
t8513 = t8240 * t8743;
t8752 = t8243 * t8282;
t8061 = (t8306 * t8240 - t8752 * t8879) * t8263 + ((t8243 * t8688 + 0.2e1 * t8513) * t8857 + (-t8240 * t8363 - t8243 * t8874) * t8289 - t8275 * (t8240 * t8411 + t8243 * t8321)) * t8276 + t8269 * t8467 + (-(-t8240 * t8270 + t8243 * t8426 + t8240) * t8246 - t8240 * pkin(6)) * t8289 + (t8393 * t8240 - t8357 * t8243) * t8280 - t8467;
t8025 = t8061 * t8124;
t8518 = t8216 * t8752;
t8422 = t8210 * t8518;
t8431 = t8210 * t8506;
t8763 = t8216 * t8240;
t8067 = -t8243 * t8528 + (((-t8210 * t8763 + t8243 * t8435) * t8276 - t8243 * t8522) * t8275 + (t8240 * t8525 + t8422) * t8263 - t8422 + t8240 * t8139) * t8290 - t8207 * t8763 + (t8240 * t8399 - ((t8210 * t8240 * t8281 - t8518) * t8276 + t8243 * t8769) * t8275 + (t8431 + t8763) * t8263 - t8431) * t8298;
t8106 = -(t8157 * t8243 + t8513) * t8857 + (t8240 * t8315 - t8243 * t8318) * t8289 - (t8240 * t8276 + t8243 * t8742) * t8866;
t8603 = t8067 * t8781;
t8471 = pkin(7) * t8603;
t8929 = (t8067 * t8916 + (pkin(6) * t8025 + t8471) * t8281) * t8275 + t8106 * t8880 + (-t8061 * t8799 + t8106 * t8416) * t8276;
t8674 = t8263 - 0.1e1 / 0.2e1;
t8711 = t8282 * t8290;
t8726 = t8276 * t8291;
t8872 = t8276 / 0.2e1;
t8091 = ((-t8462 * t8726 + t8642 * t8713) * t8289 + (-t8360 * t8726 + t8282 * (t8281 * t8897 + t8298 - t8891)) * t8280) * t8275 - 0.2e1 * (t8674 * t8687 + t8711 * t8872) * t8857 - (t8179 * t8282 - t8182 * t8726) * t8727 + t8291 * t8411 * t8757;
t8073 = t8091 * t8124;
t8172 = -pkin(2) * t8282 + t8276 * t8686;
t8491 = t8276 * t8687;
t8499 = t8280 * t8736;
t8133 = (t8491 + t8711) * t8857 + (-pkin(3) * t8499 - t8172 * t8290 + (pkin(2) * t8726 + t8710) * t8281) * t8289 - pkin(2) * t8499;
t8175 = -pkin(6) * t8275 * t8298 - pkin(1) * t8237;
t8303 = pkin(2) ^ 2;
t8873 = -0.2e1 * pkin(2);
t8476 = t8721 * t8873;
t8747 = t8264 * t8265;
t8501 = t8276 * t8747;
t8670 = 0.2e1 * t8237;
t8712 = t8282 * t8203;
t8301 = pkin(3) ^ 2;
t8746 = t8269 * t8301;
t8766 = t8210 * t8275;
t8826 = ((t8291 * t8476 - 0.2e1 * t8172 * t8249 + (t8746 + t8747) * t8282) * t8270 + (t8491 * t8746 + ((t8281 * t8670 - t8766) * t8291 + t8712) * t8249 + (-pkin(2) * t8766 + t8281 * t8501) * t8291 + pkin(2) * t8712) * t8290 + t8298 * (t8282 * t8207 + (pkin(3) * t8727 - t8210 * t8743 + t8237) * t8291)) / ((t8772 + (t8211 * t8860 + t8280 * t8303 - t8666) * t8275) * t8290 - t8651 * t8857 + (t8175 * t8281 + t8275 * t8669) * t8289 + t8200 * t8275 * t8866);
t8600 = t8302 * t8826;
t8456 = t8275 * t8600;
t8922 = (t8883 * t8275 * t8826 + (pkin(6) * t8073 + pkin(7) * t8456) * t8281) * t8275 + t8133 * t8880 + (-t8091 * t8799 + t8133 * t8416) * t8276;
t8701 = t8285 * t8293;
t8724 = t8276 * t8294;
t8092 = ((-t8461 * t8724 + t8641 * t8703) * t8292 + (-t8359 * t8724 + t8285 * (t8284 * t8896 + t8298 - t8890)) * t8283) * t8275 - 0.2e1 * (t8674 * t8683 + t8701 * t8872) * t8856 - (t8180 * t8285 - t8183 * t8724) * t8725 + t8294 * t8410 * t8757;
t8074 = t8092 * t8125;
t8173 = -pkin(2) * t8285 + t8276 * t8682;
t8489 = t8276 * t8683;
t8496 = t8283 * t8734;
t8134 = (t8489 + t8701) * t8856 + (-pkin(3) * t8496 - t8173 * t8293 + (pkin(2) * t8724 + t8700) * t8284) * t8292 - pkin(2) * t8496;
t8702 = t8285 * t8204;
t8745 = t8271 * t8301;
t8765 = t8212 * t8275;
t8825 = ((t8294 * t8476 - 0.2e1 * t8173 * t8251 + (t8745 + t8747) * t8285) * t8272 + (t8489 * t8745 + ((t8284 * t8670 - t8765) * t8294 + t8702) * t8251 + (-pkin(2) * t8765 + t8284 * t8501) * t8294 + pkin(2) * t8702) * t8293 + t8298 * (t8285 * t8208 + (pkin(3) * t8725 - t8212 * t8741 + t8237) * t8294)) / ((t8771 + (t8213 * t8859 + t8283 * t8303 - t8665) * t8275) * t8293 - t8650 * t8856 + (t8175 * t8284 + t8275 * t8668) * t8292 + t8201 * t8275 * t8864);
t8599 = t8302 * t8825;
t8455 = t8275 * t8599;
t8921 = (t8884 * t8275 * t8825 + (pkin(6) * t8074 + pkin(7) * t8455) * t8284) * t8275 + t8134 * t8881 + (-t8092 * t8792 + t8134 * t8415) * t8276;
t8691 = t8288 * t8296;
t8722 = t8276 * t8297;
t8093 = ((-t8460 * t8722 + t8640 * t8693) * t8295 + (-t8358 * t8722 + t8288 * (t8287 * t8895 + t8298 - t8889)) * t8286) * t8275 - 0.2e1 * (t8674 * t8679 + t8691 * t8872) * t8855 - (t8181 * t8288 - t8184 * t8722) * t8723 + t8297 * t8409 * t8757;
t8075 = t8093 * t8126;
t8174 = -pkin(2) * t8288 + t8276 * t8678;
t8487 = t8276 * t8679;
t8493 = t8286 * t8732;
t8135 = (t8487 + t8691) * t8855 + (-pkin(3) * t8493 - t8174 * t8296 + (pkin(2) * t8722 + t8690) * t8287) * t8295 - pkin(2) * t8493;
t8692 = t8288 * t8205;
t8744 = t8273 * t8301;
t8764 = t8214 * t8275;
t8824 = ((t8297 * t8476 - 0.2e1 * t8174 * t8253 + (t8744 + t8747) * t8288) * t8274 + (t8487 * t8744 + ((t8287 * t8670 - t8764) * t8297 + t8692) * t8253 + (-pkin(2) * t8764 + t8287 * t8501) * t8297 + pkin(2) * t8692) * t8296 + t8298 * (t8288 * t8209 + (pkin(3) * t8723 - t8214 * t8739 + t8237) * t8297)) / ((t8770 + (t8215 * t8858 + t8286 * t8303 - t8664) * t8275) * t8296 - t8649 * t8855 + (t8175 * t8287 + t8275 * t8667) * t8295 + t8202 * t8275 * t8862);
t8598 = t8302 * t8824;
t8454 = t8275 * t8598;
t8920 = (t8885 * t8275 * t8824 + (pkin(6) * t8075 + pkin(7) * t8454) * t8287) * t8275 + t8135 * t8882 + (-t8093 * t8785 + t8135 * t8417) * t8276;
t8894 = t8106 * t8109;
t8893 = t8107 * t8110;
t8892 = t8108 * t8111;
t8871 = 0.2e1 * t8263 - 0.2e1;
t8262 = t8275 ^ 2;
t8854 = MDP(4) * t8262;
t8853 = MDP(6) * t8275;
t8852 = MDP(7) * t8275;
t8851 = MDP(15) * t8275;
t8832 = t8064 * t8130;
t8831 = t8065 * t8131;
t8830 = t8066 * t8132;
t8829 = t8067 * t8130;
t8828 = t8068 * t8131;
t8827 = t8069 * t8132;
t8082 = t8106 * t8117;
t8823 = t8106 * t8124;
t8083 = t8107 * t8119;
t8822 = t8107 * t8125;
t8084 = t8108 * t8115;
t8821 = t8108 * t8126;
t8085 = t8109 * t8117;
t8820 = t8109 * t8124;
t8086 = t8110 * t8119;
t8819 = t8110 * t8125;
t8087 = t8111 * t8115;
t8818 = t8111 * t8126;
t8817 = t8115 * t8275;
t8816 = t8115 * t8276;
t8815 = t8115 * t8296;
t8116 = 0.1e1 / t8121 ^ 2;
t8814 = t8116 * t8135;
t8268 = t8287 ^ 2;
t8813 = t8116 * t8268;
t8812 = t8117 * t8275;
t8811 = t8117 * t8276;
t8810 = t8117 * t8290;
t8118 = 0.1e1 / t8122 ^ 2;
t8809 = t8118 * t8133;
t8266 = t8281 ^ 2;
t8808 = t8118 * t8266;
t8807 = t8119 * t8275;
t8806 = t8119 * t8276;
t8805 = t8119 * t8293;
t8120 = 0.1e1 / t8123 ^ 2;
t8804 = t8120 * t8134;
t8267 = t8284 ^ 2;
t8803 = t8120 * t8267;
t8802 = t8124 * t8133;
t8639 = pkin(6) * t8743;
t8801 = t8124 * (t8276 * t8869 - t8639);
t8800 = t8124 * t8164;
t8798 = t8124 * t8276;
t8797 = t8124 * t8280;
t8796 = t8124 * t8289;
t8795 = t8125 * t8134;
t8638 = pkin(6) * t8741;
t8794 = t8125 * (t8276 * t8868 - t8638);
t8793 = t8125 * t8165;
t8791 = t8125 * t8276;
t8790 = t8125 * t8283;
t8789 = t8125 * t8292;
t8788 = t8126 * t8135;
t8637 = pkin(6) * t8739;
t8787 = t8126 * (t8276 * t8867 - t8637);
t8786 = t8126 * t8163;
t8784 = t8126 * t8276;
t8783 = t8126 * t8286;
t8782 = t8126 * t8295;
t8097 = t8133 * t8117;
t8098 = t8134 * t8119;
t8099 = t8135 * t8115;
t8731 = t8275 * t8302;
t8720 = t8276 * t8302;
t8719 = t8280 * t8281;
t8717 = t8280 * t8289;
t8716 = t8280 * t8290;
t8714 = t8281 * t8289;
t8709 = t8283 * t8284;
t8707 = t8283 * t8292;
t8706 = t8283 * t8293;
t8704 = t8284 * t8292;
t8699 = t8286 * t8287;
t8697 = t8286 * t8295;
t8696 = t8286 * t8296;
t8694 = t8287 * t8295;
t8689 = t8289 * t8290;
t8685 = t8292 * t8293;
t8681 = t8295 * t8296;
t8673 = t8124 * t8873;
t8672 = t8125 * t8873;
t8671 = t8126 * t8873;
t8659 = -0.2e1 * t8275 * t8276;
t8658 = -0.2e1 * t8717;
t8657 = 0.2e1 * t8717;
t8656 = -0.2e1 * t8707;
t8655 = 0.2e1 * t8707;
t8654 = -0.2e1 * t8697;
t8653 = 0.2e1 * t8697;
t8652 = t8871 * pkin(6);
t8645 = t8124 * t8865;
t8644 = t8125 * t8863;
t8643 = t8126 * t8861;
t8633 = pkin(7) * t8022;
t8632 = pkin(7) * t8023;
t8631 = pkin(7) * t8024;
t8630 = pkin(7) * t8025;
t8629 = pkin(7) * t8026;
t8628 = pkin(7) * t8027;
t8618 = t8058 * t8797;
t8617 = t8058 * t8796;
t8616 = t8059 * t8790;
t8615 = t8059 * t8789;
t8614 = t8060 * t8783;
t8613 = t8060 * t8782;
t8612 = t8061 * t8797;
t8611 = t8061 * t8796;
t8610 = t8062 * t8790;
t8609 = t8062 * t8789;
t8608 = t8063 * t8783;
t8607 = t8063 * t8782;
t8597 = t8091 * t8797;
t8596 = t8091 * t8796;
t8595 = t8092 * t8790;
t8594 = t8092 * t8789;
t8593 = t8093 * t8783;
t8592 = t8093 * t8782;
t8591 = t8118 * t8894;
t8590 = t8106 * t8810;
t8589 = t8106 * t8801;
t8588 = t8106 * t8800;
t8587 = t8120 * t8893;
t8586 = t8107 * t8805;
t8585 = t8107 * t8794;
t8584 = t8107 * t8793;
t8583 = t8116 * t8892;
t8582 = t8108 * t8815;
t8581 = t8108 * t8787;
t8580 = t8108 * t8786;
t8579 = t8109 * t8810;
t8578 = t8109 * t8801;
t8577 = t8109 * t8800;
t8576 = t8110 * t8805;
t8575 = t8110 * t8794;
t8574 = t8110 * t8793;
t8573 = t8111 * t8815;
t8572 = t8111 * t8787;
t8571 = t8111 * t8786;
t8570 = t8296 * t8099;
t8569 = (pkin(6) * t8696 + t8187 * t8295) * t8817;
t8568 = (-pkin(6) * t8681 + t8187 * t8286) * t8817;
t8400 = -pkin(7) * t8296 + t8861;
t8567 = t8400 * t8817;
t8565 = t8115 * t8733;
t8564 = t8135 * t8813;
t8563 = t8116 * t8693;
t8562 = t8290 * t8097;
t8561 = (pkin(6) * t8716 + t8185 * t8289) * t8812;
t8560 = (-pkin(6) * t8689 + t8185 * t8280) * t8812;
t8402 = -pkin(7) * t8290 + t8865;
t8559 = t8402 * t8812;
t8557 = t8117 * t8737;
t8556 = t8133 * t8808;
t8555 = t8118 * t8713;
t8554 = t8293 * t8098;
t8553 = (pkin(6) * t8706 + t8186 * t8292) * t8807;
t8552 = (-pkin(6) * t8685 + t8186 * t8283) * t8807;
t8401 = -pkin(7) * t8293 + t8863;
t8551 = t8401 * t8807;
t8549 = t8119 * t8735;
t8548 = t8134 * t8803;
t8547 = t8120 * t8703;
t8546 = t8133 * t8801;
t8545 = t8133 * t8800;
t8544 = t8124 * t8716;
t8543 = t8124 * t8689;
t8542 = t8134 * t8794;
t8541 = t8134 * t8793;
t8540 = t8125 * t8706;
t8539 = t8125 * t8685;
t8538 = t8135 * t8787;
t8537 = t8135 * t8786;
t8536 = t8126 * t8696;
t8535 = t8126 * t8681;
t8500 = t8275 * t8719;
t8151 = t8500 - t8727;
t8534 = t8151 * t8781;
t8498 = t8275 * t8714;
t8153 = t8498 + t8730;
t8533 = t8153 * t8781;
t8497 = t8275 * t8709;
t8152 = t8497 - t8725;
t8532 = t8152 * t8780;
t8495 = t8275 * t8704;
t8154 = t8495 + t8729;
t8531 = t8154 * t8780;
t8494 = t8275 * t8699;
t8155 = t8494 - t8723;
t8530 = t8155 * t8779;
t8492 = t8275 * t8694;
t8156 = t8492 + t8728;
t8529 = t8156 * t8779;
t8076 = t8106 * t8811;
t8077 = t8107 * t8806;
t8078 = t8108 * t8816;
t8079 = t8109 * t8811;
t8080 = t8110 * t8806;
t8081 = t8111 * t8816;
t8094 = t8276 * t8097;
t8095 = t8276 * t8098;
t8096 = t8276 * t8099;
t8482 = t8798 / 0.2e1;
t8481 = t8791 / 0.2e1;
t8480 = t8784 / 0.2e1;
t8475 = 0.2e1 * MDP(5) * t8262;
t8479 = (t8547 * t8893 + t8555 * t8894 + t8563 * t8892) * t8475 + (t8266 * t8591 + t8267 * t8587 + t8268 * t8583) * t8854 + (t8583 + t8587 + t8591) * MDP(1);
t8445 = t8134 * t8547;
t8448 = t8133 * t8555;
t8451 = t8135 * t8563;
t8478 = (t8106 * t8448 + t8107 * t8445 + t8108 * t8451) * t8475 + (t8106 * t8556 + t8107 * t8548 + t8108 * t8564) * t8854 + (t8106 * t8809 + t8107 * t8804 + t8108 * t8814) * MDP(1);
t8477 = (t8109 * t8448 + t8110 * t8445 + t8111 * t8451) * t8475 + (t8109 * t8556 + t8110 * t8548 + t8111 * t8564) * t8854 + (t8109 * t8809 + t8110 * t8804 + t8111 * t8814) * MDP(1);
t8459 = (0.4e1 * t8269 - 0.2e1) * t8743;
t8458 = (0.4e1 * t8271 - 0.2e1) * t8741;
t8457 = (0.4e1 * t8273 - 0.2e1) * t8739;
t8453 = t8115 * t8494;
t8452 = t8115 * t8492;
t8450 = t8117 * t8500;
t8449 = t8117 * t8498;
t8447 = t8119 * t8497;
t8446 = t8119 * t8495;
t8444 = t8275 * t8544;
t8443 = t8275 * t8543;
t8442 = t8275 * t8540;
t8441 = t8275 * t8539;
t8440 = t8275 * t8536;
t8439 = t8275 * t8535;
t8438 = t8130 * t8222 * t8720;
t8437 = t8131 * t8223 * t8720;
t8436 = t8132 * t8224 * t8720;
t8396 = 0.2e1 * t8280 * t8498;
t8395 = 0.2e1 * t8283 * t8495;
t8394 = 0.2e1 * t8286 * t8492;
t8387 = t8115 * (t8236 * t8263 - t8274);
t8386 = t8117 * (t8234 * t8263 - t8270);
t8385 = t8119 * (t8235 * t8263 - t8272);
t8384 = (0.2e1 * t8273 - 0.1e1) * t8566;
t8383 = (0.2e1 * t8269 - 0.1e1) * t8558;
t8382 = (0.2e1 * t8271 - 0.1e1) * t8550;
t7980 = 0.2e1 * t8076 + t8025;
t8372 = (t7980 + t8025) * t8082;
t7982 = 0.2e1 * t8077 + t8026;
t8371 = (t7982 + t8026) * t8083;
t7984 = 0.2e1 * t8078 + t8027;
t8370 = (t7984 + t8027) * t8084;
t7986 = 0.2e1 * t8079 + t8022;
t8369 = (t7986 + t8022) * t8085;
t7988 = 0.2e1 * t8080 + t8023;
t8368 = (t7988 + t8023) * t8086;
t7990 = 0.2e1 * t8081 + t8024;
t8367 = (t7990 + t8024) * t8087;
t8056 = 0.2e1 * t8096 + t8075;
t8366 = (t8056 + t8075) * t8099;
t8052 = 0.2e1 * t8094 + t8073;
t8365 = (t8052 + t8073) * t8097;
t8054 = 0.2e1 * t8095 + t8074;
t8364 = (t8054 + t8074) * t8098;
t8351 = t8115 * (-t8227 * t8276 + t8637);
t8350 = t8117 * (-t8225 * t8276 + t8639);
t8349 = t8119 * (-t8226 * t8276 + t8638);
t8348 = t8115 * (t7984 * t8111 + t8060 * t8821);
t8347 = t8115 * (t7984 * t8135 + t8093 * t8821);
t8346 = t8115 * (t7990 * t8108 + t8063 * t8818);
t8345 = t8115 * (t7990 * t8135 + t8093 * t8818);
t8344 = t8115 * (t8056 * t8111 + t8060 * t8788);
t8343 = t8115 * (t8056 * t8108 + t8063 * t8788);
t8342 = t8117 * (t7980 * t8109 + t8058 * t8823);
t8341 = t8117 * (t7980 * t8133 + t8091 * t8823);
t8340 = t8117 * (t7986 * t8106 + t8061 * t8820);
t8339 = t8117 * (t7986 * t8133 + t8091 * t8820);
t8338 = t8117 * (t8052 * t8109 + t8058 * t8802);
t8337 = t8117 * (t8052 * t8106 + t8061 * t8802);
t8336 = t8119 * (t7982 * t8110 + t8059 * t8822);
t8335 = t8119 * (t7982 * t8134 + t8092 * t8822);
t8334 = t8119 * (t7988 * t8107 + t8062 * t8819);
t8333 = t8119 * (t7988 * t8134 + t8092 * t8819);
t8332 = t8119 * (t8054 * t8110 + t8059 * t8795);
t8331 = t8119 * (t8054 * t8107 + t8062 * t8795);
t8324 = t8115 * (-t8400 * t8659 + t8652);
t8323 = t8117 * (-t8402 * t8659 + t8652);
t8322 = t8119 * (-t8401 * t8659 + t8652);
t8312 = (t8286 * t8659 + t8871 * t8694) * t8815;
t8311 = (t8295 * t8659 - t8871 * t8699) * t8815;
t8310 = (t8280 * t8659 + t8871 * t8714) * t8810;
t8309 = (t8289 * t8659 - t8871 * t8719) * t8810;
t8308 = (t8283 * t8659 + t8871 * t8704) * t8805;
t8307 = (t8292 * t8659 - t8871 * t8709) * t8805;
t8129 = t8135 ^ 2;
t8128 = t8134 ^ 2;
t8127 = t8133 ^ 2;
t8105 = t8111 ^ 2;
t8104 = t8110 ^ 2;
t8103 = t8109 ^ 2;
t8102 = t8108 ^ 2;
t8101 = t8107 ^ 2;
t8100 = t8106 ^ 2;
t8057 = t8096 + t8075;
t8055 = t8095 + t8074;
t8053 = t8094 + t8073;
t8051 = t8096 + t8075 / 0.2e1;
t8050 = t8095 + t8074 / 0.2e1;
t8049 = t8094 + t8073 / 0.2e1;
t8048 = t8093 * t8480 + t8099;
t8047 = t8092 * t8481 + t8098;
t8046 = t8091 * t8482 + t8097;
t8045 = pkin(7) * t8075 + t8224 * t8096;
t8044 = pkin(7) * t8074 + t8223 * t8095;
t8043 = pkin(7) * t8073 + t8222 * t8094;
t8033 = t8135 * t8565 - t8454;
t8032 = t8134 * t8549 - t8455;
t8031 = t8133 * t8557 - t8456;
t8030 = (pkin(7) * t8598 + t8099 * t8400) * t8275;
t8029 = (pkin(7) * t8599 + t8098 * t8401) * t8275;
t8028 = (pkin(7) * t8600 + t8097 * t8402) * t8275;
t8018 = t8057 * t8286 + t8135 * t8452;
t8017 = t8055 * t8283 + t8134 * t8446;
t8016 = t8053 * t8280 + t8133 * t8449;
t8015 = t8057 * t8295 - t8135 * t8453;
t8014 = t8055 * t8292 - t8134 * t8447;
t8013 = t8053 * t8289 - t8133 * t8450;
t8012 = t8093 * t8671 + t8135 * t8351;
t8011 = t8092 * t8672 + t8134 * t8349;
t8010 = t8091 * t8673 + t8133 * t8350;
t8009 = -t8043 * t8289 + t8133 * t8560;
t8008 = -t8045 * t8295 + t8135 * t8568;
t8007 = -t8045 * t8286 - t8135 * t8569;
t8006 = -t8044 * t8292 + t8134 * t8552;
t8005 = -t8044 * t8283 - t8134 * t8553;
t8004 = -t8043 * t8280 - t8133 * t8561;
t8003 = t8111 * t8565 - t8604;
t8002 = t8108 * t8565 - t8601;
t8001 = t8110 * t8549 - t8605;
t8000 = t8107 * t8549 - t8602;
t7999 = t8109 * t8557 - t8606;
t7998 = t8106 * t8557 - t8603;
t7997 = t8111 * t8567 + t8472;
t7996 = t8110 * t8551 + t8473;
t7995 = t8109 * t8559 + t8474;
t7994 = t8108 * t8567 + t8469;
t7993 = t8107 * t8551 + t8470;
t7992 = t8106 * t8559 + t8471;
t7991 = t8081 + t8024;
t7989 = t8080 + t8023;
t7987 = t8079 + t8022;
t7985 = t8078 + t8027;
t7983 = t8077 + t8026;
t7981 = t8076 + t8025;
t7979 = t8081 + t8024 / 0.2e1;
t7978 = t8080 + t8023 / 0.2e1;
t7977 = t8079 + t8022 / 0.2e1;
t7976 = t8078 + t8027 / 0.2e1;
t7975 = t8077 + t8026 / 0.2e1;
t7974 = t8076 + t8025 / 0.2e1;
t7973 = t8063 * t8480 + t8084;
t7972 = t8062 * t8481 + t8083;
t7971 = t8061 * t8482 + t8082;
t7970 = t8060 * t8480 + t8087;
t7969 = t8059 * t8481 + t8086;
t7968 = t8058 * t8482 + t8085;
t7967 = t8224 * t8081 + t8631;
t7966 = t8223 * t8080 + t8632;
t7965 = t8222 * t8079 + t8633;
t7964 = t8224 * t8078 + t8628;
t7963 = t8223 * t8077 + t8629;
t7962 = t8222 * t8076 + t8630;
t7955 = -t8093 * t8784 + t8135 * t8387 + t8099;
t7954 = -t8092 * t8791 + t8134 * t8385 + t8098;
t7953 = -t8091 * t8798 + t8133 * t8386 + t8097;
t7952 = t8057 * t8653 + t8135 * t8384;
t7951 = t8055 * t8655 + t8134 * t8382;
t7950 = t8053 * t8657 + t8133 * t8383;
t7949 = -0.2e1 * t8048 * t8260 - 0.2e1 * t8051 * t8634;
t7948 = -0.2e1 * t8047 * t8259 - 0.2e1 * t8050 * t8635;
t7947 = 0.2e1 * t8047 * t8868 - 0.2e1 * t8050 * t8638;
t7946 = -0.2e1 * t8046 * t8258 - 0.2e1 * t8049 * t8636;
t7945 = 0.2e1 * t8046 * t8869 - 0.2e1 * t8049 * t8639;
t7944 = 0.2e1 * t8048 * t8867 - 0.2e1 * t8051 * t8637;
t7931 = t7991 * t8286 + t8111 * t8452;
t7930 = t7985 * t8286 + t8108 * t8452;
t7929 = t7989 * t8283 + t8110 * t8446;
t7928 = t7983 * t8283 + t8107 * t8446;
t7927 = t7987 * t8280 + t8109 * t8449;
t7926 = t7981 * t8280 + t8106 * t8449;
t7925 = t7991 * t8295 - t8111 * t8453;
t7924 = t7985 * t8295 - t8108 * t8453;
t7923 = t7989 * t8292 - t8110 * t8447;
t7922 = t7983 * t8292 - t8107 * t8447;
t7921 = t7987 * t8289 - t8109 * t8450;
t7920 = t7981 * t8289 - t8106 * t8450;
t7919 = t8060 * t8671 + t8111 * t8351;
t7918 = t8063 * t8671 + t8108 * t8351;
t7917 = t8059 * t8672 + t8110 * t8349;
t7916 = t8062 * t8672 + t8107 * t8349;
t7915 = t8058 * t8673 + t8109 * t8350;
t7914 = t8061 * t8673 + t8106 * t8350;
t7913 = -t7965 * t8289 + t8109 * t8560;
t7912 = -t7962 * t8289 + t8106 * t8560;
t7911 = -t7967 * t8295 + t8111 * t8568;
t7910 = -t7967 * t8286 - t8111 * t8569;
t7909 = -t7966 * t8292 + t8110 * t8552;
t7908 = -t7966 * t8283 - t8110 * t8553;
t7907 = -t7965 * t8280 - t8109 * t8561;
t7906 = -t7964 * t8295 + t8108 * t8568;
t7905 = -t7964 * t8286 - t8108 * t8569;
t7904 = -t7963 * t8292 + t8107 * t8552;
t7903 = -t7963 * t8283 - t8107 * t8553;
t7902 = -t7962 * t8280 - t8106 * t8561;
t7901 = -t8012 * t8295 - t8030 * t8286;
t7900 = t8012 * t8286 - t8030 * t8295;
t7899 = -t8011 * t8292 - t8029 * t8283;
t7898 = t8011 * t8283 - t8029 * t8292;
t7897 = -t8010 * t8289 - t8028 * t8280;
t7896 = t8010 * t8280 - t8028 * t8289;
t7895 = (-t8093 * t8536 + t8156 * t8598) * t8275 + t8135 * t8312;
t7894 = (-t8092 * t8540 + t8154 * t8599) * t8275 + t8134 * t8308;
t7893 = (-t8091 * t8544 + t8153 * t8600) * t8275 + t8133 * t8310;
t7892 = (-t8093 * t8535 - t8155 * t8598) * t8275 + t8135 * t8311;
t7891 = (-t8092 * t8539 - t8152 * t8599) * t8275 + t8134 * t8307;
t7890 = (-t8091 * t8543 - t8151 * t8600) * t8275 + t8133 * t8309;
t7886 = -t8060 * t8784 + t8111 * t8387 + t8087;
t7885 = -t8059 * t8791 + t8110 * t8385 + t8086;
t7884 = -t8058 * t8798 + t8109 * t8386 + t8085;
t7883 = -t8063 * t8784 + t8108 * t8387 + t8084;
t7882 = -t8062 * t8791 + t8107 * t8385 + t8083;
t7881 = -t8061 * t8798 + t8106 * t8386 + t8082;
t7880 = t7991 * t8653 + t8111 * t8384;
t7879 = t7985 * t8653 + t8108 * t8384;
t7878 = t7989 * t8655 + t8110 * t8382;
t7877 = t7983 * t8655 + t8107 * t8382;
t7876 = t7987 * t8657 + t8109 * t8383;
t7875 = t7981 * t8657 + t8106 * t8383;
t7874 = -0.2e1 * t7970 * t8260 - 0.2e1 * t7979 * t8634;
t7873 = -0.2e1 * t7969 * t8259 - 0.2e1 * t7978 * t8635;
t7872 = 0.2e1 * t7969 * t8868 - 0.2e1 * t7978 * t8638;
t7871 = -0.2e1 * t7968 * t8258 - 0.2e1 * t7977 * t8636;
t7870 = 0.2e1 * t7968 * t8869 - 0.2e1 * t7977 * t8639;
t7869 = -0.2e1 * t7973 * t8260 - 0.2e1 * t7976 * t8634;
t7868 = -0.2e1 * t7972 * t8259 - 0.2e1 * t7975 * t8635;
t7867 = 0.2e1 * t7972 * t8868 - 0.2e1 * t7975 * t8638;
t7866 = -0.2e1 * t7971 * t8258 - 0.2e1 * t7974 * t8636;
t7865 = 0.2e1 * t7971 * t8869 - 0.2e1 * t7974 * t8639;
t7864 = 0.2e1 * t7970 * t8867 - 0.2e1 * t7979 * t8637;
t7863 = 0.2e1 * t7973 * t8867 - 0.2e1 * t7976 * t8637;
t7862 = (t8400 * t8075 + (t8224 * t8276 + t8634) * t8598) * t8275 + t8135 * t8324;
t7861 = (t8401 * t8074 + (t8223 * t8276 + t8635) * t8599) * t8275 + t8134 * t8322;
t7860 = (t8402 * t8073 + (t8222 * t8276 + t8636) * t8600) * t8275 + t8133 * t8323;
t7859 = t7955 * t8273 + t8051 * t8394 + t8057 * t8276;
t7858 = t7954 * t8271 + t8050 * t8395 + t8055 * t8276;
t7857 = t7953 * t8269 + t8049 * t8396 + t8053 * t8276;
t7856 = t7955 * t8654 + t8051 * t8457;
t7855 = t7954 * t8656 + t8050 * t8458;
t7854 = t7953 * t8658 + t8049 * t8459;
t7853 = -t7919 * t8295 - t7997 * t8286;
t7852 = t7919 * t8286 - t7997 * t8295;
t7851 = -t7918 * t8295 - t7994 * t8286;
t7850 = t7918 * t8286 - t7994 * t8295;
t7849 = -t7917 * t8292 - t7996 * t8283;
t7848 = t7917 * t8283 - t7996 * t8292;
t7847 = -t7916 * t8292 - t7993 * t8283;
t7846 = t7916 * t8283 - t7993 * t8292;
t7845 = -t7915 * t8289 - t7995 * t8280;
t7844 = t7915 * t8280 - t7995 * t8289;
t7843 = -t7914 * t8289 - t7992 * t8280;
t7842 = t7914 * t8280 - t7992 * t8289;
t7841 = -t8060 * t8440 + t8066 * t8529 + t8111 * t8312;
t7840 = -t8059 * t8442 + t8065 * t8531 + t8110 * t8308;
t7839 = -t8058 * t8444 + t8064 * t8533 + t8109 * t8310;
t7838 = -t8063 * t8440 + t8069 * t8529 + t8108 * t8312;
t7837 = -t8062 * t8442 + t8068 * t8531 + t8107 * t8308;
t7836 = -t8061 * t8444 + t8067 * t8533 + t8106 * t8310;
t7835 = -t8060 * t8439 - t8066 * t8530 + t8111 * t8311;
t7834 = -t8063 * t8439 - t8069 * t8530 + t8108 * t8311;
t7833 = -t8059 * t8441 - t8065 * t8532 + t8110 * t8307;
t7832 = -t8062 * t8441 - t8068 * t8532 + t8107 * t8307;
t7831 = -t8058 * t8443 - t8064 * t8534 + t8109 * t8309;
t7830 = -t8061 * t8443 - t8067 * t8534 + t8106 * t8309;
t7829 = t8066 * t8436 + ((pkin(6) * t8604 - t8631) * t8296 + t8060 * t8643) * t8275 + t8111 * t8324;
t7828 = t8065 * t8437 + ((pkin(6) * t8605 - t8632) * t8293 + t8059 * t8644) * t8275 + t8110 * t8322;
t7827 = t8064 * t8438 + ((pkin(6) * t8606 - t8633) * t8290 + t8058 * t8645) * t8275 + t8109 * t8323;
t7826 = t8069 * t8436 + ((pkin(6) * t8601 - t8628) * t8296 + t8063 * t8643) * t8275 + t8108 * t8324;
t7825 = t8068 * t8437 + ((pkin(6) * t8602 - t8629) * t8293 + t8062 * t8644) * t8275 + t8107 * t8322;
t7824 = t8067 * t8438 + ((pkin(6) * t8603 - t8630) * t8290 + t8061 * t8645) * t8275 + t8106 * t8323;
t7823 = t7886 * t8273 + t7979 * t8394 + t7991 * t8276;
t7822 = t7885 * t8271 + t7978 * t8395 + t7989 * t8276;
t7821 = t7884 * t8269 + t7977 * t8396 + t7987 * t8276;
t7820 = t7883 * t8273 + t7976 * t8394 + t7985 * t8276;
t7819 = t7882 * t8271 + t7975 * t8395 + t7983 * t8276;
t7818 = t7881 * t8269 + t7974 * t8396 + t7981 * t8276;
t7817 = t7886 * t8654 + t7979 * t8457;
t7816 = t7883 * t8654 + t7976 * t8457;
t7815 = t7885 * t8656 + t7978 * t8458;
t7814 = t7882 * t8656 + t7975 * t8458;
t7813 = t7884 * t8658 + t7977 * t8459;
t7812 = t7881 * t8658 + t7974 * t8459;
t7811 = -t7862 * t8286 - t8920 * t8295;
t7810 = -t7862 * t8295 + t8920 * t8286;
t7809 = -t7861 * t8283 - t8921 * t8292;
t7808 = -t7861 * t8292 + t8921 * t8283;
t7807 = -t7860 * t8280 - t8922 * t8289;
t7806 = -t7860 * t8289 + t8922 * t8280;
t7805 = -t7829 * t8286 - t8295 * t8934;
t7804 = -t7829 * t8295 + t8286 * t8934;
t7803 = -t7828 * t8283 - t8292 * t8933;
t7802 = -t7828 * t8292 + t8283 * t8933;
t7801 = -t7827 * t8280 - t8289 * t8932;
t7800 = -t7827 * t8289 + t8280 * t8932;
t7799 = -t7826 * t8286 - t8295 * t8931;
t7798 = -t7826 * t8295 + t8286 * t8931;
t7797 = -t7825 * t8283 - t8292 * t8930;
t7796 = -t7825 * t8292 + t8283 * t8930;
t7795 = -t7824 * t8280 - t8289 * t8929;
t7794 = -t7824 * t8289 + t8280 * t8929;
t1 = [(t8100 * t8118 + t8101 * t8120 + t8102 * t8116) * MDP(1) + (t8100 * t8808 + t8101 * t8803 + t8102 * t8813) * t8854 + (t8100 * t8555 + t8101 * t8547 + t8102 * t8563) * t8475 + (t8281 * t8372 + t8284 * t8371 + t8287 * t8370) * t8853 + (t8290 * t8372 + t8293 * t8371 + t8296 * t8370) * t8852 + (t7981 * t8025 + t7983 * t8026 + t7985 * t8027 + (t7981 * t8082 + t7983 * t8083 + t7985 * t8084) * t8276) * MDP(8) + ((t8063 * t8787 + t7863) * t8084 + (t8062 * t8794 + t7867) * t8083 + (t8061 * t8801 + t7865) * t8082) * MDP(9) + ((-t8063 * t8786 + t7869) * t8084 + (-t8062 * t8793 + t7868) * t8083 + (-t8061 * t8800 + t7866) * t8082) * MDP(10) + (t7818 * t8082 + t7819 * t8083 + t7820 * t8084 + t7926 * t8612 + t7928 * t8610 + t7930 * t8608) * MDP(11) + (t7812 * t8082 + t7814 * t8083 + t7816 * t8084 + t7875 * t8025 + t7877 * t8026 + t7879 * t8027) * MDP(12) + (-t7998 * t8612 - t8000 * t8610 - t8002 * t8608 + t7836 * t8082 + t7837 * t8083 + t7838 * t8084 + (t7926 * t8829 + t7928 * t8828 + t7930 * t8827) * t8302) * MDP(13) + (-t7998 * t8611 - t8000 * t8609 - t8002 * t8607 + t7830 * t8082 + t7832 * t8083 + t7834 * t8084 + (t7920 * t8829 + t7922 * t8828 + t7924 * t8827) * t8302) * MDP(14) + ((-t7998 * t8829 - t8000 * t8828 - t8002 * t8827) * t8302 + (t7998 * t8590 + t8000 * t8586 + t8002 * t8582) * t8275) * MDP(15) + (t7795 * t8082 + t7797 * t8083 + t7799 * t8084 + t7843 * t8025 + t7847 * t8026 + t7851 * t8027 + (t7902 * t8829 + t7903 * t8828 + t7905 * t8827) * t8302) * MDP(16) + (t7794 * t8082 + t7796 * t8083 + t7798 * t8084 + t7842 * t8025 + t7846 * t8026 + t7850 * t8027 + (t7904 * t8828 + t7906 * t8827 + t7912 * t8829) * t8302) * MDP(17) + MDP(18); (t8281 * t8340 + t8284 * t8334 + t8287 * t8346) * t8853 + (t8290 * t8340 + t8293 * t8334 + t8296 * t8346) * t8852 + (t7987 * t8025 + t7989 * t8026 + t7991 * t8027 + (t7987 * t8082 + t7989 * t8083 + t7991 * t8084) * t8276) * MDP(8) + ((t7872 * t8107 + t8062 * t8575) * t8119 + (t7870 * t8106 + t8061 * t8578) * t8117 + (t7864 * t8108 + t8063 * t8572) * t8115) * MDP(9) + ((t7873 * t8107 - t8062 * t8574) * t8119 + (t7871 * t8106 - t8061 * t8577) * t8117 + (t7874 * t8108 - t8063 * t8571) * t8115) * MDP(10) + (t7821 * t8082 + t7822 * t8083 + t7823 * t8084 + t7927 * t8612 + t7929 * t8610 + t7931 * t8608) * MDP(11) + (t7813 * t8082 + t7815 * t8083 + t7817 * t8084 + t7876 * t8025 + t7878 * t8026 + t7880 * t8027) * MDP(12) + (-t7999 * t8612 - t8001 * t8610 - t8003 * t8608 + t7839 * t8082 + t7840 * t8083 + t7841 * t8084 + (t7927 * t8829 + t7929 * t8828 + t7931 * t8827) * t8302) * MDP(13) + (-t7999 * t8611 - t8001 * t8609 - t8003 * t8607 + t7831 * t8082 + t7833 * t8083 + t7835 * t8084 + (t7921 * t8829 + t7923 * t8828 + t7925 * t8827) * t8302) * MDP(14) + ((-t7999 * t8829 - t8001 * t8828 - t8003 * t8827) * t8302 + (t7999 * t8590 + t8001 * t8586 + t8003 * t8582) * t8275) * MDP(15) + (t7801 * t8082 + t7803 * t8083 + t7805 * t8084 + t7845 * t8025 + t7849 * t8026 + t7853 * t8027 + (t7907 * t8829 + t7908 * t8828 + t7910 * t8827) * t8302) * MDP(16) + (t7800 * t8082 + t7802 * t8083 + t7804 * t8084 + t7844 * t8025 + t7848 * t8026 + t7852 * t8027 + (t7909 * t8828 + t7911 * t8827 + t7913 * t8829) * t8302) * MDP(17) + t8479; (t8281 * t8337 + t8284 * t8331 + t8287 * t8343) * t8853 + (t8290 * t8337 + t8293 * t8331 + t8296 * t8343) * t8852 + (t8053 * t8025 + t8055 * t8026 + t8057 * t8027 + (t8053 * t8082 + t8055 * t8083 + t8057 * t8084) * t8276) * MDP(8) + ((t7947 * t8107 + t8062 * t8542) * t8119 + (t7945 * t8106 + t8061 * t8546) * t8117 + (t7944 * t8108 + t8063 * t8538) * t8115) * MDP(9) + ((t7948 * t8107 - t8062 * t8541) * t8119 + (t7946 * t8106 - t8061 * t8545) * t8117 + (t7949 * t8108 - t8063 * t8537) * t8115) * MDP(10) + (t7857 * t8082 + t7858 * t8083 + t7859 * t8084 + t8016 * t8612 + t8017 * t8610 + t8018 * t8608) * MDP(11) + (t7854 * t8082 + t7855 * t8083 + t7856 * t8084 + t7950 * t8025 + t7951 * t8026 + t7952 * t8027) * MDP(12) + (-t8031 * t8612 - t8032 * t8610 - t8033 * t8608 + t7893 * t8082 + t7894 * t8083 + t7895 * t8084 + (t8016 * t8829 + t8017 * t8828 + t8018 * t8827) * t8302) * MDP(13) + (-t8031 * t8611 - t8032 * t8609 - t8033 * t8607 + t7890 * t8082 + t7891 * t8083 + t7892 * t8084 + (t8013 * t8829 + t8014 * t8828 + t8015 * t8827) * t8302) * MDP(14) + ((-t8031 * t8829 - t8032 * t8828 - t8033 * t8827) * t8302 + (t8031 * t8590 + t8032 * t8586 + t8033 * t8582) * t8275) * MDP(15) + (t7807 * t8082 + t7809 * t8083 + t7811 * t8084 + t7897 * t8025 + t7899 * t8026 + t7901 * t8027 + (t8004 * t8829 + t8005 * t8828 + t8007 * t8827) * t8302) * MDP(16) + (t7806 * t8082 + t7808 * t8083 + t7810 * t8084 + t7896 * t8025 + t7898 * t8026 + t7900 * t8027 + (t8006 * t8828 + t8008 * t8827 + t8009 * t8829) * t8302) * MDP(17) + t8478; (t8281 * t8342 + t8284 * t8336 + t8287 * t8348) * t8853 + (t8290 * t8342 + t8293 * t8336 + t8296 * t8348) * t8852 + (t7981 * t8022 + t7983 * t8023 + t7985 * t8024 + (t7981 * t8085 + t7983 * t8086 + t7985 * t8087) * t8276) * MDP(8) + ((t7867 * t8110 + t8059 * t8585) * t8119 + (t7865 * t8109 + t8058 * t8589) * t8117 + (t7863 * t8111 + t8060 * t8581) * t8115) * MDP(9) + ((t7868 * t8110 - t8059 * t8584) * t8119 + (t7866 * t8109 - t8058 * t8588) * t8117 + (t7869 * t8111 - t8060 * t8580) * t8115) * MDP(10) + (t7818 * t8085 + t7819 * t8086 + t7820 * t8087 + t7926 * t8618 + t7928 * t8616 + t7930 * t8614) * MDP(11) + (t7812 * t8085 + t7814 * t8086 + t7816 * t8087 + t7875 * t8022 + t7877 * t8023 + t7879 * t8024) * MDP(12) + (-t7998 * t8618 - t8000 * t8616 - t8002 * t8614 + t7836 * t8085 + t7837 * t8086 + t7838 * t8087 + (t7926 * t8832 + t7928 * t8831 + t7930 * t8830) * t8302) * MDP(13) + (-t7998 * t8617 - t8000 * t8615 - t8002 * t8613 + t7830 * t8085 + t7832 * t8086 + t7834 * t8087 + (t7920 * t8832 + t7922 * t8831 + t7924 * t8830) * t8302) * MDP(14) + ((-t7998 * t8832 - t8000 * t8831 - t8002 * t8830) * t8302 + (t7998 * t8579 + t8000 * t8576 + t8002 * t8573) * t8275) * MDP(15) + (t7795 * t8085 + t7797 * t8086 + t7799 * t8087 + t7843 * t8022 + t7847 * t8023 + t7851 * t8024 + (t7902 * t8832 + t7903 * t8831 + t7905 * t8830) * t8302) * MDP(16) + (t7794 * t8085 + t7796 * t8086 + t7798 * t8087 + t7842 * t8022 + t7846 * t8023 + t7850 * t8024 + (t7904 * t8831 + t7906 * t8830 + t7912 * t8832) * t8302) * MDP(17) + t8479; (t8103 * t8118 + t8104 * t8120 + t8105 * t8116) * MDP(1) + (t8103 * t8808 + t8104 * t8803 + t8105 * t8813) * t8854 + (t8103 * t8555 + t8104 * t8547 + t8105 * t8563) * t8475 + (t8281 * t8369 + t8284 * t8368 + t8287 * t8367) * t8853 + (t8290 * t8369 + t8293 * t8368 + t8296 * t8367) * t8852 + (t7987 * t8022 + t7989 * t8023 + t7991 * t8024 + (t7987 * t8085 + t7989 * t8086 + t7991 * t8087) * t8276) * MDP(8) + ((t8060 * t8787 + t7864) * t8087 + (t8059 * t8794 + t7872) * t8086 + (t8058 * t8801 + t7870) * t8085) * MDP(9) + ((-t8060 * t8786 + t7874) * t8087 + (-t8059 * t8793 + t7873) * t8086 + (-t8058 * t8800 + t7871) * t8085) * MDP(10) + (t7821 * t8085 + t7822 * t8086 + t7823 * t8087 + t7927 * t8618 + t7929 * t8616 + t7931 * t8614) * MDP(11) + (t7813 * t8085 + t7815 * t8086 + t7817 * t8087 + t7876 * t8022 + t7878 * t8023 + t7880 * t8024) * MDP(12) + (-t7999 * t8618 - t8001 * t8616 - t8003 * t8614 + t7839 * t8085 + t7840 * t8086 + t7841 * t8087 + (t7927 * t8832 + t7929 * t8831 + t7931 * t8830) * t8302) * MDP(13) + (-t7999 * t8617 - t8001 * t8615 - t8003 * t8613 + t7831 * t8085 + t7833 * t8086 + t7835 * t8087 + (t7921 * t8832 + t7923 * t8831 + t7925 * t8830) * t8302) * MDP(14) + ((-t7999 * t8832 - t8001 * t8831 - t8003 * t8830) * t8302 + (t7999 * t8579 + t8001 * t8576 + t8003 * t8573) * t8275) * MDP(15) + (t7801 * t8085 + t7803 * t8086 + t7805 * t8087 + t7845 * t8022 + t7849 * t8023 + t7853 * t8024 + (t7907 * t8832 + t7908 * t8831 + t7910 * t8830) * t8302) * MDP(16) + (t7800 * t8085 + t7802 * t8086 + t7804 * t8087 + t7844 * t8022 + t7848 * t8023 + t7852 * t8024 + (t7909 * t8831 + t7911 * t8830 + t7913 * t8832) * t8302) * MDP(17) + MDP(18); (t8281 * t8338 + t8284 * t8332 + t8287 * t8344) * t8853 + (t8290 * t8338 + t8293 * t8332 + t8296 * t8344) * t8852 + (t8053 * t8022 + t8055 * t8023 + t8057 * t8024 + (t8053 * t8085 + t8055 * t8086 + t8057 * t8087) * t8276) * MDP(8) + ((t7947 * t8110 + t8059 * t8542) * t8119 + (t7945 * t8109 + t8058 * t8546) * t8117 + (t7944 * t8111 + t8060 * t8538) * t8115) * MDP(9) + ((t7948 * t8110 - t8059 * t8541) * t8119 + (t7946 * t8109 - t8058 * t8545) * t8117 + (t7949 * t8111 - t8060 * t8537) * t8115) * MDP(10) + (t7857 * t8085 + t7858 * t8086 + t7859 * t8087 + t8016 * t8618 + t8017 * t8616 + t8018 * t8614) * MDP(11) + (t7854 * t8085 + t7855 * t8086 + t7856 * t8087 + t7950 * t8022 + t7951 * t8023 + t7952 * t8024) * MDP(12) + (-t8031 * t8618 - t8032 * t8616 - t8033 * t8614 + t7893 * t8085 + t7894 * t8086 + t7895 * t8087 + (t8016 * t8832 + t8017 * t8831 + t8018 * t8830) * t8302) * MDP(13) + (-t8031 * t8617 - t8032 * t8615 - t8033 * t8613 + t7890 * t8085 + t7891 * t8086 + t7892 * t8087 + (t8013 * t8832 + t8014 * t8831 + t8015 * t8830) * t8302) * MDP(14) + ((-t8031 * t8832 - t8032 * t8831 - t8033 * t8830) * t8302 + (t8031 * t8579 + t8032 * t8576 + t8033 * t8573) * t8275) * MDP(15) + (t7807 * t8085 + t7809 * t8086 + t7811 * t8087 + t7897 * t8022 + t7899 * t8023 + t7901 * t8024 + (t8004 * t8832 + t8005 * t8831 + t8007 * t8830) * t8302) * MDP(16) + (t7806 * t8085 + t7808 * t8086 + t7810 * t8087 + t7896 * t8022 + t7898 * t8023 + t7900 * t8024 + (t8006 * t8831 + t8008 * t8830 + t8009 * t8832) * t8302) * MDP(17) + t8477; (t8281 * t8341 + t8284 * t8335 + t8287 * t8347) * t8853 + (t8290 * t8341 + t8293 * t8335 + t8296 * t8347) * t8852 + (t7981 * t8073 + t7983 * t8074 + t7985 * t8075 + (t7981 * t8097 + t7983 * t8098 + t7985 * t8099) * t8276) * MDP(8) + ((t7867 * t8134 + t8092 * t8585) * t8119 + (t7865 * t8133 + t8091 * t8589) * t8117 + (t7863 * t8135 + t8093 * t8581) * t8115) * MDP(9) + ((t7868 * t8134 - t8092 * t8584) * t8119 + (t7866 * t8133 - t8091 * t8588) * t8117 + (t7869 * t8135 - t8093 * t8580) * t8115) * MDP(10) + (t7818 * t8097 + t7819 * t8098 + t7820 * t8099 + t7926 * t8597 + t7928 * t8595 + t7930 * t8593) * MDP(11) + (t7812 * t8097 + t7814 * t8098 + t7816 * t8099 + t7875 * t8073 + t7877 * t8074 + t7879 * t8075) * MDP(12) + (-t7998 * t8597 - t8000 * t8595 - t8002 * t8593 + t7836 * t8097 + t7837 * t8098 + t7838 * t8099 + (t7926 * t8826 + t7928 * t8825 + t7930 * t8824) * t8731) * MDP(13) + (-t7998 * t8596 - t8000 * t8594 - t8002 * t8592 + t7830 * t8097 + t7832 * t8098 + t7834 * t8099 + (t7920 * t8826 + t7922 * t8825 + t7924 * t8824) * t8731) * MDP(14) + (t7998 * t8562 + t8000 * t8554 + t8002 * t8570 + (-t7998 * t8826 - t8000 * t8825 - t8002 * t8824) * t8302) * t8851 + (t7795 * t8097 + t7797 * t8098 + t7799 * t8099 + t7843 * t8073 + t7847 * t8074 + t7851 * t8075 + (t7902 * t8826 + t7903 * t8825 + t7905 * t8824) * t8731) * MDP(16) + (t7794 * t8097 + t7796 * t8098 + t7798 * t8099 + t7842 * t8073 + t7846 * t8074 + t7850 * t8075 + (t7904 * t8825 + t7906 * t8824 + t7912 * t8826) * t8731) * MDP(17) + t8478; (t8281 * t8339 + t8284 * t8333 + t8287 * t8345) * t8853 + (t8290 * t8339 + t8293 * t8333 + t8296 * t8345) * t8852 + (t7987 * t8073 + t7989 * t8074 + t7991 * t8075 + (t7987 * t8097 + t7989 * t8098 + t7991 * t8099) * t8276) * MDP(8) + ((t7872 * t8134 + t8092 * t8575) * t8119 + (t7870 * t8133 + t8091 * t8578) * t8117 + (t7864 * t8135 + t8093 * t8572) * t8115) * MDP(9) + ((t7873 * t8134 - t8092 * t8574) * t8119 + (t7871 * t8133 - t8091 * t8577) * t8117 + (t7874 * t8135 - t8093 * t8571) * t8115) * MDP(10) + (t7821 * t8097 + t7822 * t8098 + t7823 * t8099 + t7927 * t8597 + t7929 * t8595 + t7931 * t8593) * MDP(11) + (t7813 * t8097 + t7815 * t8098 + t7817 * t8099 + t7876 * t8073 + t7878 * t8074 + t7880 * t8075) * MDP(12) + (-t7999 * t8597 - t8001 * t8595 - t8003 * t8593 + t7839 * t8097 + t7840 * t8098 + t7841 * t8099 + (t7927 * t8826 + t7929 * t8825 + t7931 * t8824) * t8731) * MDP(13) + (-t7999 * t8596 - t8001 * t8594 - t8003 * t8592 + t7831 * t8097 + t7833 * t8098 + t7835 * t8099 + (t7921 * t8826 + t7923 * t8825 + t7925 * t8824) * t8731) * MDP(14) + (t7999 * t8562 + t8001 * t8554 + t8003 * t8570 + (-t7999 * t8826 - t8001 * t8825 - t8003 * t8824) * t8302) * t8851 + (t7801 * t8097 + t7803 * t8098 + t7805 * t8099 + t7845 * t8073 + t7849 * t8074 + t7853 * t8075 + (t7907 * t8826 + t7908 * t8825 + t7910 * t8824) * t8731) * MDP(16) + (t7800 * t8097 + t7802 * t8098 + t7804 * t8099 + t7844 * t8073 + t7848 * t8074 + t7852 * t8075 + (t7909 * t8825 + t7911 * t8824 + t7913 * t8826) * t8731) * MDP(17) + t8477; (t8116 * t8129 + t8118 * t8127 + t8120 * t8128) * MDP(1) + (t8127 * t8808 + t8128 * t8803 + t8129 * t8813) * t8854 + (t8127 * t8555 + t8128 * t8547 + t8129 * t8563) * t8475 + (t8281 * t8365 + t8284 * t8364 + t8287 * t8366) * t8853 + (t8290 * t8365 + t8293 * t8364 + t8296 * t8366) * t8852 + (t8053 * t8073 + t8055 * t8074 + t8057 * t8075 + (t8053 * t8097 + t8055 * t8098 + t8057 * t8099) * t8276) * MDP(8) + ((t8092 * t8794 + t7947) * t8098 + (t8091 * t8801 + t7945) * t8097 + (t8093 * t8787 + t7944) * t8099) * MDP(9) + ((-t8092 * t8793 + t7948) * t8098 + (-t8091 * t8800 + t7946) * t8097 + (-t8093 * t8786 + t7949) * t8099) * MDP(10) + (t7857 * t8097 + t7858 * t8098 + t7859 * t8099 + t8016 * t8597 + t8017 * t8595 + t8018 * t8593) * MDP(11) + (t7854 * t8097 + t7855 * t8098 + t7856 * t8099 + t7950 * t8073 + t7951 * t8074 + t7952 * t8075) * MDP(12) + (-t8031 * t8597 - t8032 * t8595 - t8033 * t8593 + t7893 * t8097 + t7894 * t8098 + t7895 * t8099 + (t8016 * t8826 + t8017 * t8825 + t8018 * t8824) * t8731) * MDP(13) + (-t8031 * t8596 - t8032 * t8594 - t8033 * t8592 + t7890 * t8097 + t7891 * t8098 + t7892 * t8099 + (t8013 * t8826 + t8014 * t8825 + t8015 * t8824) * t8731) * MDP(14) + (t8031 * t8562 + t8032 * t8554 + t8033 * t8570 + (-t8031 * t8826 - t8032 * t8825 - t8033 * t8824) * t8302) * t8851 + (t7807 * t8097 + t7809 * t8098 + t7811 * t8099 + t7897 * t8073 + t7899 * t8074 + t7901 * t8075 + (t8004 * t8826 + t8005 * t8825 + t8007 * t8824) * t8731) * MDP(16) + (t7806 * t8097 + t7808 * t8098 + t7810 * t8099 + t7896 * t8073 + t7898 * t8074 + t7900 * t8075 + (t8006 * t8825 + t8008 * t8824 + t8009 * t8826) * t8731) * MDP(17) + MDP(18);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
