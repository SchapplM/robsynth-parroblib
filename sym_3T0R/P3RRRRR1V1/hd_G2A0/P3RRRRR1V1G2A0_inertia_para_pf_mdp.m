% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR1V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR1V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_mdp: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:35:26
% EndTime: 2020-08-07 03:35:37
% DurationCPUTime: 10.85s
% Computational Cost: add. (5673->624), mult. (10353->1159), div. (2133->15), fcn. (11757->33), ass. (0->456)
t3056 = cos(qJ(2,3));
t3010 = t3056 * pkin(2) + pkin(1);
t3399 = -0.2e1 * t3010;
t3398 = 0.2e1 * t3010;
t3059 = cos(qJ(2,2));
t3011 = t3059 * pkin(2) + pkin(1);
t3397 = -0.2e1 * t3011;
t3396 = 0.2e1 * t3011;
t3062 = cos(qJ(2,1));
t3012 = t3062 * pkin(2) + pkin(1);
t3395 = -0.2e1 * t3012;
t3394 = 0.2e1 * t3012;
t3393 = 0.2e1 * pkin(1);
t3392 = 2 * MDP(5);
t3391 = 4 * MDP(12);
t3382 = qJ(2,3) + qJ(3,3);
t2998 = cos(qJ(1,3) - t3382) + cos(qJ(1,3) + t3382);
t3390 = -t2998 / 0.2e1;
t3389 = t2998 / 0.2e1;
t3383 = qJ(2,2) + qJ(3,2);
t2999 = cos(qJ(1,2) - t3383) + cos(qJ(1,2) + t3383);
t3388 = -t2999 / 0.2e1;
t3387 = t2999 / 0.2e1;
t3384 = qJ(2,1) + qJ(3,1);
t3000 = cos(qJ(1,1) - t3384) + cos(qJ(1,1) + t3384);
t3386 = -t3000 / 0.2e1;
t3385 = t3000 / 0.2e1;
t3065 = 0.1e1 / pkin(2);
t3381 = MDP(6) * t3065;
t3380 = MDP(7) * t3065;
t3379 = MDP(8) / pkin(2) ^ 2;
t3378 = MDP(15) * t3065;
t3055 = cos(qJ(3,3));
t3046 = sin(qJ(3,3));
t3047 = sin(qJ(2,3));
t3311 = t3046 * t3047;
t2986 = -t3055 * t3056 + t3311;
t3043 = legFrame(3,2);
t3019 = sin(t3043);
t3048 = sin(qJ(1,3));
t3332 = t3019 * t3048;
t3310 = t3046 * t3056;
t2989 = t3047 * t3055 + t3310;
t3022 = cos(t3043);
t3358 = t2989 * t3022;
t2938 = t2986 * t3332 - t3358;
t3028 = 0.1e1 / t3046;
t3377 = t2938 * t3028;
t3329 = t3022 * t3048;
t3359 = t2989 * t3019;
t2939 = -t2986 * t3329 - t3359;
t3376 = t2939 * t3028;
t3058 = cos(qJ(3,2));
t3049 = sin(qJ(3,2));
t3050 = sin(qJ(2,2));
t3308 = t3049 * t3050;
t2987 = -t3058 * t3059 + t3308;
t3044 = legFrame(2,2);
t3020 = sin(t3044);
t3051 = sin(qJ(1,2));
t3331 = t3020 * t3051;
t3307 = t3049 * t3059;
t2990 = t3050 * t3058 + t3307;
t3023 = cos(t3044);
t3356 = t2990 * t3023;
t2940 = t2987 * t3331 - t3356;
t3032 = 0.1e1 / t3049;
t3375 = t2940 * t3032;
t3327 = t3023 * t3051;
t3357 = t2990 * t3020;
t2941 = -t2987 * t3327 - t3357;
t3374 = t2941 * t3032;
t3061 = cos(qJ(3,1));
t3052 = sin(qJ(3,1));
t3053 = sin(qJ(2,1));
t3305 = t3052 * t3053;
t2988 = -t3061 * t3062 + t3305;
t3045 = legFrame(1,2);
t3021 = sin(t3045);
t3054 = sin(qJ(1,1));
t3330 = t3021 * t3054;
t3304 = t3052 * t3062;
t2991 = t3053 * t3061 + t3304;
t3024 = cos(t3045);
t3354 = t2991 * t3024;
t2942 = t2988 * t3330 - t3354;
t3036 = 0.1e1 / t3052;
t3373 = t2942 * t3036;
t3325 = t3024 * t3054;
t3355 = t2991 * t3021;
t2943 = -t2988 * t3325 - t3355;
t3372 = t2943 * t3036;
t3007 = pkin(3) * t3055 + pkin(2);
t2977 = pkin(3) * t3310 + t3007 * t3047;
t2980 = -pkin(3) * t3311 + t3007 * t3056;
t2944 = t2977 * t3019 - t2980 * t3329;
t3371 = t2944 * t3028;
t3008 = pkin(3) * t3058 + pkin(2);
t2978 = pkin(3) * t3307 + t3008 * t3050;
t2981 = -pkin(3) * t3308 + t3008 * t3059;
t2945 = t2978 * t3020 - t2981 * t3327;
t3370 = t2945 * t3032;
t3009 = pkin(3) * t3061 + pkin(2);
t2979 = pkin(3) * t3304 + t3009 * t3053;
t2982 = -pkin(3) * t3305 + t3009 * t3062;
t2946 = t2979 * t3021 - t2982 * t3325;
t3369 = t2946 * t3036;
t2947 = t2977 * t3022 + t2980 * t3332;
t3368 = t2947 * t3028;
t2948 = t2978 * t3023 + t2981 * t3331;
t3367 = t2948 * t3032;
t2949 = t2979 * t3024 + t2982 * t3330;
t3366 = t2949 * t3036;
t3064 = 0.1e1 / pkin(3);
t3057 = cos(qJ(1,3));
t3362 = t2980 * t3057;
t3228 = t3064 * t3362;
t3321 = t3028 * t3065;
t2956 = (t3389 - t3228) * t3321;
t3365 = t2956 * t3028;
t3060 = cos(qJ(1,2));
t3361 = t2981 * t3060;
t3227 = t3064 * t3361;
t3317 = t3032 * t3065;
t2957 = (t3387 - t3227) * t3317;
t3364 = t2957 * t3032;
t3063 = cos(qJ(1,1));
t3360 = t2982 * t3063;
t3226 = t3064 * t3360;
t3313 = t3036 * t3065;
t2958 = (t3385 - t3226) * t3313;
t3363 = t2958 * t3036;
t3001 = pkin(3) * cos(t3382) + t3010;
t2992 = 0.1e1 / t3001;
t3353 = t2992 * t3028;
t3352 = t2992 * t3048;
t2993 = 0.1e1 / t3001 ^ 2;
t3031 = t3048 ^ 2;
t3351 = t2993 * t3031;
t3040 = t3057 ^ 2;
t3350 = t2993 * t3040;
t3349 = t2993 * t3047;
t3348 = t2993 * t3056;
t3002 = pkin(3) * cos(t3383) + t3011;
t2994 = 0.1e1 / t3002;
t3347 = t2994 * t3032;
t3346 = t2994 * t3051;
t2995 = 0.1e1 / t3002 ^ 2;
t3035 = t3051 ^ 2;
t3345 = t2995 * t3035;
t3041 = t3060 ^ 2;
t3344 = t2995 * t3041;
t3343 = t2995 * t3050;
t3342 = t2995 * t3059;
t3003 = pkin(3) * cos(t3384) + t3012;
t2996 = 0.1e1 / t3003;
t3341 = t2996 * t3036;
t3340 = t2996 * t3054;
t2997 = 0.1e1 / t3003 ^ 2;
t3039 = t3054 ^ 2;
t3339 = t2997 * t3039;
t3042 = t3063 ^ 2;
t3338 = t2997 * t3042;
t3337 = t2997 * t3053;
t3336 = t2997 * t3062;
t3335 = t2998 * t3028;
t3334 = t2999 * t3032;
t3333 = t3000 * t3036;
t3328 = t3022 * t3057;
t3326 = t3023 * t3060;
t3324 = t3024 * t3063;
t3323 = t3028 * t3055;
t3322 = t3028 * t3057;
t3029 = 0.1e1 / t3046 ^ 2;
t3320 = t3029 * t3055;
t3319 = t3032 * t3058;
t3318 = t3032 * t3060;
t3033 = 0.1e1 / t3049 ^ 2;
t3316 = t3033 * t3058;
t3315 = t3036 * t3061;
t3314 = t3036 * t3063;
t3037 = 0.1e1 / t3052 ^ 2;
t3312 = t3037 * t3061;
t3309 = t3047 * t3056;
t3306 = t3050 * t3059;
t3303 = t3053 * t3062;
t3302 = t3064 * t3065;
t3301 = MDP(9) * t3393;
t3300 = MDP(10) * t3393;
t3299 = 0.2e1 * t3381;
t3298 = 0.2e1 * t3380;
t3297 = t2993 * t3399;
t3296 = t2995 * t3397;
t3295 = t2997 * t3395;
t3294 = t2938 * t3323;
t3293 = t2938 * t3321;
t3292 = t2939 * t3323;
t3291 = t2939 * t3321;
t3290 = t2940 * t3319;
t3289 = t2940 * t3317;
t3288 = t2941 * t3319;
t3287 = t2941 * t3317;
t3286 = t2942 * t3315;
t3285 = t2942 * t3313;
t3284 = t2943 * t3315;
t3283 = t2943 * t3313;
t3282 = t2944 * t3320;
t3281 = t2945 * t3316;
t3280 = t2946 * t3312;
t3279 = t2947 * t3320;
t3278 = t2948 * t3316;
t3277 = t2949 * t3312;
t2959 = (t2998 - t3228) * t3321;
t3276 = t2959 * t3323;
t2960 = (t2999 - t3227) * t3317;
t3275 = t2960 * t3319;
t2961 = (t3000 - t3226) * t3313;
t3274 = t2961 * t3315;
t3273 = t2980 * t3322;
t3272 = t2981 * t3318;
t3271 = t2982 * t3314;
t3270 = t2986 * t3352;
t3269 = t2987 * t3346;
t3268 = t2988 * t3340;
t3267 = t2989 * t3352;
t3266 = t2990 * t3346;
t3265 = t2991 * t3340;
t3264 = t2992 * t3019 * t3057;
t3263 = t2992 * t3328;
t3262 = t3028 * t3352;
t3261 = t2992 * t3322;
t3013 = t3019 ^ 2;
t3260 = t3013 * t3350;
t3016 = t3022 ^ 2;
t3259 = t3016 * t3350;
t3030 = t3047 ^ 2;
t3258 = t3030 * t3350;
t3257 = t3040 * t3349;
t3256 = t3040 * t3348;
t3255 = t2993 * t3309;
t3254 = t2993 * t3048 * t3057;
t3253 = t2994 * t3020 * t3060;
t3252 = t2994 * t3326;
t3251 = t3032 * t3346;
t3250 = t2994 * t3318;
t3014 = t3020 ^ 2;
t3249 = t3014 * t3344;
t3017 = t3023 ^ 2;
t3248 = t3017 * t3344;
t3034 = t3050 ^ 2;
t3247 = t3034 * t3344;
t3246 = t3041 * t3343;
t3245 = t3041 * t3342;
t3244 = t2995 * t3306;
t3243 = t2995 * t3051 * t3060;
t3242 = t2996 * t3021 * t3063;
t3241 = t2996 * t3324;
t3240 = t3036 * t3340;
t3239 = t2996 * t3314;
t3015 = t3021 ^ 2;
t3238 = t3015 * t3338;
t3018 = t3024 ^ 2;
t3237 = t3018 * t3338;
t3038 = t3053 ^ 2;
t3236 = t3038 * t3338;
t3235 = t3042 * t3337;
t3234 = t3042 * t3336;
t3233 = t2997 * t3303;
t3232 = t2997 * t3054 * t3063;
t3231 = t3028 * t3302;
t3230 = t3032 * t3302;
t3229 = t3036 * t3302;
t3225 = -t3335 / 0.2e1;
t3224 = t3335 / 0.2e1;
t3223 = t3029 * t3389;
t3222 = t3055 * t3389;
t3221 = t3057 * t3389;
t3220 = -t3334 / 0.2e1;
t3219 = t3334 / 0.2e1;
t3218 = t3033 * t3387;
t3217 = t3058 * t3387;
t3216 = t3060 * t3387;
t3215 = -t3333 / 0.2e1;
t3214 = t3333 / 0.2e1;
t3213 = t3037 * t3385;
t3212 = t3061 * t3385;
t3211 = t3063 * t3385;
t3151 = t3021 * t3024 * t3338;
t3081 = t3151 * t3394;
t3161 = t3020 * t3023 * t3344;
t3084 = t3161 * t3396;
t3171 = t3019 * t3022 * t3350;
t3087 = t3171 * t3398;
t3210 = t2986 * t3087 + t2987 * t3084 + t2988 * t3081;
t3209 = t2989 * t3087 + t2990 * t3084 + t2991 * t3081;
t3150 = t3021 * t3232;
t3080 = t3150 * t3395;
t3160 = t3020 * t3243;
t3083 = t3160 * t3397;
t3170 = t3019 * t3254;
t3086 = t3170 * t3399;
t3208 = t2986 * t3086 + t2987 * t3083 + t2988 * t3080;
t3207 = t2989 * t3086 + t2990 * t3083 + t2991 * t3080;
t3149 = t3024 * t3232;
t3079 = t3149 * t3394;
t3159 = t3023 * t3243;
t3082 = t3159 * t3396;
t3169 = t3022 * t3254;
t3085 = t3169 * t3398;
t3206 = t2986 * t3085 + t2987 * t3082 + t2988 * t3079;
t3205 = t2989 * t3085 + t2990 * t3082 + t2991 * t3079;
t3204 = t3031 * t3297;
t3203 = t3040 * t3297;
t3202 = t3035 * t3296;
t3201 = t3041 * t3296;
t3200 = t3039 * t3295;
t3199 = t3042 * t3295;
t3198 = t2980 * t3040 * t3353;
t3197 = t3320 * t3362;
t3196 = t2981 * t3041 * t3347;
t3195 = t3316 * t3361;
t3194 = t2982 * t3042 * t3341;
t3193 = t3312 * t3360;
t3192 = t2986 * t3264;
t3191 = t2986 * t3263;
t3190 = t2986 * t3262;
t3189 = t2987 * t3253;
t3188 = t2987 * t3252;
t3187 = t2987 * t3251;
t3186 = t2988 * t3242;
t3185 = t2988 * t3241;
t3184 = t2988 * t3240;
t3183 = t2989 * t3264;
t3182 = t2989 * t3263;
t3181 = t2989 * t3262;
t3180 = t2990 * t3253;
t3179 = t2990 * t3252;
t3178 = t2990 * t3251;
t3177 = t2991 * t3242;
t3176 = t2991 * t3241;
t3175 = t2991 * t3240;
t3174 = t2998 * t3262;
t3173 = t3019 * t3261;
t3172 = t3022 * t3261;
t3168 = t3030 * t3254;
t3167 = t3040 * t3255;
t3166 = t3047 * t3254;
t3165 = t3056 * t3254;
t3164 = t2999 * t3251;
t3163 = t3020 * t3250;
t3162 = t3023 * t3250;
t3158 = t3034 * t3243;
t3157 = t3041 * t3244;
t3156 = t3050 * t3243;
t3155 = t3059 * t3243;
t3154 = t3000 * t3240;
t3153 = t3021 * t3239;
t3152 = t3024 * t3239;
t3148 = t3038 * t3232;
t3147 = t3042 * t3233;
t3146 = t3053 * t3232;
t3145 = t3062 * t3232;
t3144 = t2992 * t3225;
t3143 = t2994 * t3220;
t3142 = t2996 * t3215;
t3141 = t3028 * t3222;
t3140 = t3028 * t3221;
t3139 = t3029 * t3222;
t3138 = t3032 * t3217;
t3137 = t3032 * t3216;
t3136 = t3033 * t3217;
t3135 = t3036 * t3212;
t3134 = t3036 * t3211;
t3133 = t3037 * t3212;
t3132 = t3013 * t3203;
t3131 = t3016 * t3203;
t3130 = t3014 * t3201;
t3129 = t3017 * t3201;
t3128 = t3015 * t3199;
t3127 = t3018 * t3199;
t3126 = t2938 * t3173;
t3125 = t2939 * t3172;
t3124 = t2940 * t3163;
t3123 = t2941 * t3162;
t3122 = t2942 * t3153;
t3121 = t2943 * t3152;
t3120 = t3019 * t3198;
t3119 = t3022 * t3198;
t3118 = t2980 * t3048 * t3261;
t3117 = t3020 * t3196;
t3116 = t3023 * t3196;
t3115 = t2981 * t3051 * t3250;
t3114 = t3021 * t3194;
t3113 = t3024 * t3194;
t3112 = t2982 * t3054 * t3239;
t3111 = t2986 * t3173;
t3110 = t2986 * t3172;
t3109 = t2987 * t3163;
t3108 = t2987 * t3162;
t3107 = t2988 * t3153;
t3106 = t2988 * t3152;
t3105 = t2989 * t3173;
t3104 = t2989 * t3172;
t3103 = t2990 * t3163;
t3102 = t2990 * t3162;
t3101 = t2991 * t3153;
t3100 = t2991 * t3152;
t3099 = t3056 * t3171;
t3098 = t3047 * t3165;
t3097 = t3059 * t3161;
t3096 = t3050 * t3155;
t3095 = t3062 * t3151;
t3094 = t3053 * t3145;
t3093 = t3057 * t3144;
t3092 = t2992 * t3140;
t3091 = t3060 * t3143;
t3090 = t2994 * t3137;
t3089 = t3063 * t3142;
t3088 = t2996 * t3134;
t3078 = (-t2938 * t3022 + t2939 * t3019) * t3261;
t3077 = (-t2940 * t3023 + t2941 * t3020) * t3250;
t3076 = (-t2942 * t3024 + t2943 * t3021) * t3239;
t3075 = (t2938 * t3048 + t3019 * t3221) * t3353;
t3074 = (t2939 * t3048 + t3328 * t3390) * t3353;
t3073 = (t2940 * t3051 + t3020 * t3216) * t3347;
t3072 = (t2941 * t3051 + t3326 * t3388) * t3347;
t3071 = (t2942 * t3054 + t3021 * t3211) * t3341;
t3070 = (t2943 * t3054 + t3324 * t3386) * t3341;
t2974 = (t3055 ^ 2 - 0.1e1 / 0.2e1) * t3309 + (t3056 ^ 2 - 0.1e1 / 0.2e1) * t3055 * t3046;
t2975 = (t3058 ^ 2 - 0.1e1 / 0.2e1) * t3306 + (t3059 ^ 2 - 0.1e1 / 0.2e1) * t3058 * t3049;
t2976 = (t3061 ^ 2 - 0.1e1 / 0.2e1) * t3303 + (t3062 ^ 2 - 0.1e1 / 0.2e1) * t3061 * t3052;
t2983 = t2989 ^ 2;
t2984 = t2990 ^ 2;
t2985 = t2991 ^ 2;
t3069 = (t3047 * t3078 + t3050 * t3077 + t3053 * t3076) * t3381 + (t3056 * t3078 + t3059 * t3077 + t3062 * t3076) * t3380 + (t2938 * t2939 * t3029 + t2940 * t2941 * t3033 + t2942 * t2943 * t3037) * t3379 + (-t2974 * t3171 - t2975 * t3161 - t2976 * t3151) * t3391 + (-t2983 * t3171 - t2984 * t3161 - t2985 * t3151) * MDP(11) + (-t3047 * t3099 - t3050 * t3097 - t3053 * t3095) * t3392 + (t3047 * t3171 + t3050 * t3161 + t3053 * t3151) * t3300 + (-t3095 - t3097 - t3099) * t3301 + (-t3030 * t3171 - t3034 * t3161 - t3038 * t3151) * MDP(4) + (-t3151 - t3161 - t3171) * MDP(1);
t3068 = (t3047 * t3075 + t3050 * t3073 + t3053 * t3071) * t3381 + (t3056 * t3075 + t3059 * t3073 + t3062 * t3071) * t3380 + (t2938 * t3223 + t2940 * t3218 + t2942 * t3213) * t3379 + (t2974 * t3170 + t2975 * t3160 + t2976 * t3150) * t3391 + (t2983 * t3170 + t2984 * t3160 + t2985 * t3150) * MDP(11) + (t3019 * t3098 + t3020 * t3096 + t3021 * t3094) * t3392 + (-t3019 * t3166 - t3020 * t3156 - t3021 * t3146) * t3300 + (t3019 * t3165 + t3020 * t3155 + t3021 * t3145) * t3301 + (t3019 * t3168 + t3020 * t3158 + t3021 * t3148) * MDP(4) + (t3150 + t3160 + t3170) * MDP(1);
t3067 = (t3047 * t3074 + t3050 * t3072 + t3053 * t3070) * t3381 + (t3056 * t3074 + t3059 * t3072 + t3062 * t3070) * t3380 + (t2939 * t3223 + t2941 * t3218 + t2943 * t3213) * t3379 + (-t2974 * t3169 - t2975 * t3159 - t2976 * t3149) * t3391 + (-t2983 * t3169 - t2984 * t3159 - t2985 * t3149) * MDP(11) + (-t3022 * t3098 - t3023 * t3096 - t3024 * t3094) * t3392 + (t3022 * t3166 + t3023 * t3156 + t3024 * t3146) * t3300 + (-t3022 * t3165 - t3023 * t3155 - t3024 * t3145) * t3301 + (-t3022 * t3168 - t3023 * t3158 - t3024 * t3148) * MDP(4) + (-t3149 - t3159 - t3169) * MDP(1);
t2937 = t2949 * t3229;
t2936 = t2948 * t3230;
t2935 = t2947 * t3231;
t2934 = t2946 * t3229;
t2933 = t2945 * t3230;
t2932 = t2944 * t3231;
t2916 = t2934 + t3283;
t2915 = t2934 + 0.2e1 * t3283;
t2914 = t2933 + t3287;
t2913 = t2933 + 0.2e1 * t3287;
t2912 = t2932 + t3291;
t2911 = t2932 + 0.2e1 * t3291;
t2910 = t2937 + t3285;
t2909 = t2937 + 0.2e1 * t3285;
t2908 = t2936 + t3289;
t2907 = t2936 + 0.2e1 * t3289;
t2906 = t2935 + t3293;
t2905 = t2935 + 0.2e1 * t3293;
t1 = [(t3237 + t3248 + t3259) * MDP(1) + (t3016 * t3258 + t3017 * t3247 + t3018 * t3236) * MDP(4) + (t3016 * t3167 + t3017 * t3157 + t3018 * t3147) * t3392 + (-t3047 * t3125 - t3050 * t3123 - t3053 * t3121) * t3299 + (-t3056 * t3125 - t3059 * t3123 - t3062 * t3121) * t3298 + (t2939 ^ 2 * t3029 + t2941 ^ 2 * t3033 + t2943 ^ 2 * t3037) * t3379 + (t3016 * t3256 + t3017 * t3245 + t3018 * t3234) * t3301 + (-t3016 * t3257 - t3017 * t3246 - t3018 * t3235) * t3300 + (t2983 * t3259 + t2984 * t3248 + t2985 * t3237) * MDP(11) + (t2974 * t3259 + t2975 * t3248 + t2976 * t3237) * t3391 + (-t2912 * t3182 - t2914 * t3179 - t2916 * t3176 + (-t2939 * t3104 - t2941 * t3102 - t2943 * t3100 + (-t2944 * t3104 - t2945 * t3102 - t2946 * t3100) * t3064) * t3065) * MDP(13) + (t2912 * t3191 + t2914 * t3188 + t2916 * t3185 + (t2939 * t3110 + t2941 * t3108 + t2943 * t3106 + (t2944 * t3110 + t2945 * t3108 + t2946 * t3106) * t3064) * t3065) * MDP(14) + (t2912 * t3376 + t2914 * t3374 + t2916 * t3372 + (t2912 * t3371 + t2914 * t3370 + t2916 * t3369) * t3064) * t3378 + (t2986 * t3131 + t2987 * t3129 + t2988 * t3127 + t2911 * t3292 + t2913 * t3288 + t2915 * t3284 + (t2939 * t3282 + t2941 * t3281 + t2943 * t3280) * t3302) * MDP(16) + (t2989 * t3131 + t2990 * t3129 + t2991 * t3127 - t2911 * t2939 - t2913 * t2941 - t2915 * t2943 + (-t2939 * t3371 - t2941 * t3370 - t2943 * t3369) * t3302) * MDP(17) + MDP(18); ((t2939 * t3105 + t2941 * t3103 + t2943 * t3101) * MDP(13) + (-t2939 * t3111 - t2941 * t3109 - t2943 * t3107) * MDP(14) + (t2906 * t3376 + t2908 * t3374 + t2910 * t3372) * MDP(15) + ((t2944 * t3105 + t2945 * t3103 + t2946 * t3101) * MDP(13) + (-t2944 * t3111 - t2945 * t3109 - t2946 * t3107) * MDP(14) + (t2906 * t3371 + t2908 * t3370 + t2910 * t3369) * MDP(15) + (t2938 * t3282 + t2940 * t3281 + t2942 * t3280) * MDP(16) + (-t2938 * t3371 - t2940 * t3370 - t2942 * t3369) * MDP(17)) * t3064) * t3065 + (t2905 * t3292 + t2907 * t3288 + t2909 * t3284 + t3210) * MDP(16) + (-t2905 * t2939 - t2907 * t2941 - t2909 * t2943 + t3209) * MDP(17) + (-t2906 * t3182 - t2908 * t3179 - t2910 * t3176) * MDP(13) + (t2906 * t3191 + t2908 * t3188 + t2910 * t3185) * MDP(14) + t3069; (t2956 * t3191 + t2957 * t3188 + t2958 * t3185 + (-t2939 * t3190 - t2941 * t3187 - t2943 * t3184 + (-t2944 * t3190 - t2945 * t3187 - t2946 * t3184) * t3064) * t3065) * MDP(14) + (-t2956 * t3182 - t2957 * t3179 - t2958 * t3176 + (t2939 * t3181 + t2941 * t3178 + t2943 * t3175 + (t2944 * t3181 + t2945 * t3178 + t2946 * t3175) * t3064) * t3065) * MDP(13) + (-t2939 * t2959 - t2941 * t2960 - t2943 * t2961 + (t2944 * t3225 + t2945 * t3220 + t2946 * t3215) * t3302 + t3205) * MDP(17) + (t2939 * t3276 + t2941 * t3275 + t2943 * t3274 + (t2944 * t3139 + t2945 * t3136 + t2946 * t3133) * t3302 + t3206) * MDP(16) + (t2939 * t3365 + t2941 * t3364 + t2943 * t3363 + (t2944 * t3365 + t2945 * t3364 + t2946 * t3363) * t3064) * t3378 + t3067; (t2912 * t3183 + t2914 * t3180 + t2916 * t3177) * MDP(13) + (-t2912 * t3192 - t2914 * t3189 - t2916 * t3186) * MDP(14) + ((-t2938 * t3104 - t2940 * t3102 - t2942 * t3100) * MDP(13) + (t2938 * t3110 + t2940 * t3108 + t2942 * t3106) * MDP(14) + (t2912 * t3377 + t2914 * t3375 + t2916 * t3373) * MDP(15) + ((-t2947 * t3104 - t2948 * t3102 - t2949 * t3100) * MDP(13) + (t2947 * t3110 + t2948 * t3108 + t2949 * t3106) * MDP(14) + (t2912 * t3368 + t2914 * t3367 + t2916 * t3366) * MDP(15) + (t2939 * t3279 + t2941 * t3278 + t2943 * t3277) * MDP(16) + (-t2939 * t3368 - t2941 * t3367 - t2943 * t3366) * MDP(17)) * t3064) * t3065 + (t2911 * t3294 + t2913 * t3290 + t2915 * t3286 + t3210) * MDP(16) + (-t2911 * t2938 - t2913 * t2940 - t2915 * t2942 + t3209) * MDP(17) + t3069; (t3238 + t3249 + t3260) * MDP(1) + (t3013 * t3258 + t3014 * t3247 + t3015 * t3236) * MDP(4) + (t3013 * t3167 + t3014 * t3157 + t3015 * t3147) * t3392 + (t3047 * t3126 + t3050 * t3124 + t3053 * t3122) * t3299 + (t3056 * t3126 + t3059 * t3124 + t3062 * t3122) * t3298 + (t2938 ^ 2 * t3029 + t2940 ^ 2 * t3033 + t2942 ^ 2 * t3037) * t3379 + (t3013 * t3256 + t3014 * t3245 + t3015 * t3234) * t3301 + (-t3013 * t3257 - t3014 * t3246 - t3015 * t3235) * t3300 + (t2983 * t3260 + t2984 * t3249 + t2985 * t3238) * MDP(11) + (t2974 * t3260 + t2975 * t3249 + t2976 * t3238) * t3391 + (t2906 * t3183 + t2908 * t3180 + t2910 * t3177 + (t2938 * t3105 + t2940 * t3103 + t2942 * t3101 + (t2947 * t3105 + t2948 * t3103 + t2949 * t3101) * t3064) * t3065) * MDP(13) + (-t2906 * t3192 - t2908 * t3189 - t2910 * t3186 + (-t2938 * t3111 - t2940 * t3109 - t2942 * t3107 + (-t2947 * t3111 - t2948 * t3109 - t2949 * t3107) * t3064) * t3065) * MDP(14) + (t2906 * t3377 + t2908 * t3375 + t2910 * t3373 + (t2906 * t3368 + t2908 * t3367 + t2910 * t3366) * t3064) * t3378 + (t2986 * t3132 + t2987 * t3130 + t2988 * t3128 + t2905 * t3294 + t2907 * t3290 + t2909 * t3286 + (t2938 * t3279 + t2940 * t3278 + t2942 * t3277) * t3302) * MDP(16) + (t2989 * t3132 + t2990 * t3130 + t2991 * t3128 - t2905 * t2938 - t2907 * t2940 - t2909 * t2942 + (-t2938 * t3368 - t2940 * t3367 - t2942 * t3366) * t3302) * MDP(17) + MDP(18); (-t2938 * t2959 - t2940 * t2960 - t2942 * t2961 + (t2947 * t3225 + t2948 * t3220 + t2949 * t3215) * t3302 + t3207) * MDP(17) + (t2938 * t3276 + t2940 * t3275 + t2942 * t3274 + (t2947 * t3139 + t2948 * t3136 + t2949 * t3133) * t3302 + t3208) * MDP(16) + (-t2956 * t3192 - t2957 * t3189 - t2958 * t3186 + (-t2938 * t3190 - t2940 * t3187 - t2942 * t3184 + (-t2947 * t3190 - t2948 * t3187 - t2949 * t3184) * t3064) * t3065) * MDP(14) + (t2956 * t3183 + t2957 * t3180 + t2958 * t3177 + (t2938 * t3181 + t2940 * t3178 + t2942 * t3175 + (t2947 * t3181 + t2948 * t3178 + t2949 * t3175) * t3064) * t3065) * MDP(13) + (t2938 * t3365 + t2940 * t3364 + t2942 * t3363 + (t2947 * t3365 + t2948 * t3364 + t2949 * t3363) * t3064) * t3378 + t3068; (t2915 * t3135 + t2913 * t3138 + t2911 * t3141 + (-t2939 * t3197 - t2941 * t3195 - t2943 * t3193) * t3302 + t3206) * MDP(16) + (-t2912 * t3270 - t2914 * t3269 - t2916 * t3268 + (t3024 * t2988 * t3088 + t3023 * t2987 * t3090 + t3022 * t2986 * t3092 + (-t2986 * t3119 - t2987 * t3116 - t2988 * t3113) * t3064) * t3065) * MDP(14) + (t2912 * t3267 + t2914 * t3266 + t2916 * t3265 + (t3089 * t3354 + t3091 * t3356 + t3093 * t3358 + (t2989 * t3119 + t2990 * t3116 + t2991 * t3113) * t3064) * t3065) * MDP(13) + (t2915 * t3386 + t2913 * t3388 + t2911 * t3390 + (t2939 * t3273 + t2941 * t3272 + t2943 * t3271) * t3302 + t3205) * MDP(17) + (t2916 * t3214 + t2914 * t3219 + t2912 * t3224 + (-t2912 * t3273 - t2914 * t3272 - t2916 * t3271) * t3064) * t3378 + t3067; (t2909 * t3135 + t2907 * t3138 + t2905 * t3141 + (-t2938 * t3197 - t2940 * t3195 - t2942 * t3193) * t3302 + t3208) * MDP(16) + (t2909 * t3386 + t2907 * t3388 + t2905 * t3390 + (t2938 * t3273 + t2940 * t3272 + t2942 * t3271) * t3302 + t3207) * MDP(17) + (t2906 * t3267 + t2908 * t3266 + t2910 * t3265 + (t3088 * t3355 + t3090 * t3357 + t3092 * t3359 + (-t2989 * t3120 - t2990 * t3117 - t2991 * t3114) * t3064) * t3065) * MDP(13) + (-t2906 * t3270 - t2908 * t3269 - t2910 * t3268 + (t3021 * t2988 * t3089 + t3020 * t2987 * t3091 + t3019 * t2986 * t3093 + (t2986 * t3120 + t2987 * t3117 + t2988 * t3114) * t3064) * t3065) * MDP(14) + (t2910 * t3214 + t2908 * t3219 + t2906 * t3224 + (-t2906 * t3273 - t2908 * t3272 - t2910 * t3271) * t3064) * t3378 + t3068; (t3339 + t3345 + t3351) * MDP(1) + (t3030 * t3351 + t3034 * t3345 + t3038 * t3339) * MDP(4) + (t3031 * t3255 + t3035 * t3244 + t3039 * t3233) * t3392 + (t3047 * t3174 + t3050 * t3164 + t3053 * t3154) * t3381 + (t3056 * t3174 + t3059 * t3164 + t3062 * t3154) * t3380 + (t3000 ^ 2 * t3037 / 0.4e1 + t2999 ^ 2 * t3033 / 0.4e1 + t2998 ^ 2 * t3029 / 0.4e1) * t3379 + (t3031 * t3348 + t3035 * t3342 + t3039 * t3336) * t3301 + (-t3031 * t3349 - t3035 * t3343 - t3039 * t3337) * t3300 + (t2983 * t3351 + t2984 * t3345 + t2985 * t3339) * MDP(11) + (t2974 * t3351 + t2975 * t3345 + t2976 * t3339) * t3391 + (t2956 * t3267 + t2957 * t3266 + t2958 * t3265 + (t2991 * t3154 / 0.2e1 + t2990 * t3164 / 0.2e1 + t2989 * t3174 / 0.2e1 + (-t2989 * t3118 - t2990 * t3115 - t2991 * t3112) * t3064) * t3065) * MDP(13) + (-t2956 * t3270 - t2957 * t3269 - t2958 * t3268 + (t3054 * t2988 * t3142 + t3051 * t2987 * t3143 + t3048 * t2986 * t3144 + (t2986 * t3118 + t2987 * t3115 + t2988 * t3112) * t3064) * t3065) * MDP(14) + (t2958 * t3214 + t2957 * t3219 + t2956 * t3224 + (-t2956 * t3273 - t2957 * t3272 - t2958 * t3271) * t3064) * t3378 + (t2988 * t3200 + t2961 * t3135 + t2987 * t3202 + t2960 * t3138 + t2986 * t3204 + t2959 * t3141 + (t3193 * t3386 + t3195 * t3388 + t3197 * t3390) * t3302) * MDP(16) + (t2991 * t3200 + t2961 * t3386 + t2990 * t3202 + t2960 * t3388 + t2989 * t3204 + t2959 * t3390 + (t2980 * t3140 + t2981 * t3137 + t2982 * t3134) * t3302) * MDP(17) + MDP(18);];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
