% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR1V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x18]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 03:36
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR1V1G2A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(4,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_regmin: pkin has to be [4x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR1V1G2A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 03:34:33
% EndTime: 2020-08-07 03:34:42
% DurationCPUTime: 9.20s
% Computational Cost: add. (5544->519), mult. (10218->1117), div. (2133->15), fcn. (11757->33), ass. (0->475)
t943 = cos(qJ(2,3));
t897 = t943 * pkin(2) + pkin(1);
t1274 = -0.2e1 * t897;
t1273 = 0.2e1 * t897;
t946 = cos(qJ(2,2));
t898 = t946 * pkin(2) + pkin(1);
t1272 = -0.2e1 * t898;
t1271 = 0.2e1 * t898;
t949 = cos(qJ(2,1));
t899 = t949 * pkin(2) + pkin(1);
t1270 = -0.2e1 * t899;
t1269 = 0.2e1 * t899;
t1268 = 0.2e1 * pkin(1);
t952 = 0.1e1 / pkin(2);
t1267 = 0.2e1 * t952;
t1182 = qJ(2,3) + qJ(3,3);
t885 = cos(qJ(1,3) - t1182) + cos(qJ(1,3) + t1182);
t1266 = -t885 / 0.2e1;
t1265 = t885 / 0.2e1;
t1183 = qJ(2,2) + qJ(3,2);
t886 = cos(qJ(1,2) - t1183) + cos(qJ(1,2) + t1183);
t1264 = -t886 / 0.2e1;
t1263 = t886 / 0.2e1;
t1184 = qJ(2,1) + qJ(3,1);
t887 = cos(qJ(1,1) - t1184) + cos(qJ(1,1) + t1184);
t1262 = -t887 / 0.2e1;
t1261 = t887 / 0.2e1;
t930 = legFrame(3,2);
t906 = sin(t930);
t935 = sin(qJ(1,3));
t1215 = t906 * t935;
t933 = sin(qJ(3,3));
t1193 = t933 * t943;
t934 = sin(qJ(2,3));
t942 = cos(qJ(3,3));
t876 = t934 * t942 + t1193;
t909 = cos(t930);
t1241 = t876 * t909;
t1194 = t933 * t934;
t873 = -t942 * t943 + t1194;
t825 = t873 * t1215 - t1241;
t915 = 0.1e1 / t933;
t1260 = t825 * t915;
t1212 = t909 * t935;
t1242 = t876 * t906;
t826 = -t873 * t1212 - t1242;
t1259 = t826 * t915;
t931 = legFrame(2,2);
t907 = sin(t931);
t938 = sin(qJ(1,2));
t1214 = t907 * t938;
t936 = sin(qJ(3,2));
t1190 = t936 * t946;
t937 = sin(qJ(2,2));
t945 = cos(qJ(3,2));
t877 = t937 * t945 + t1190;
t910 = cos(t931);
t1239 = t877 * t910;
t1191 = t936 * t937;
t874 = -t945 * t946 + t1191;
t827 = t874 * t1214 - t1239;
t919 = 0.1e1 / t936;
t1258 = t827 * t919;
t1210 = t910 * t938;
t1240 = t877 * t907;
t828 = -t874 * t1210 - t1240;
t1257 = t828 * t919;
t932 = legFrame(1,2);
t908 = sin(t932);
t941 = sin(qJ(1,1));
t1213 = t908 * t941;
t939 = sin(qJ(3,1));
t1187 = t939 * t949;
t940 = sin(qJ(2,1));
t948 = cos(qJ(3,1));
t878 = t940 * t948 + t1187;
t911 = cos(t932);
t1237 = t878 * t911;
t1188 = t939 * t940;
t875 = -t948 * t949 + t1188;
t829 = t875 * t1213 - t1237;
t923 = 0.1e1 / t939;
t1256 = t829 * t923;
t1208 = t911 * t941;
t1238 = t878 * t908;
t830 = -t875 * t1208 - t1238;
t1255 = t830 * t923;
t894 = pkin(3) * t942 + pkin(2);
t864 = pkin(3) * t1193 + t894 * t934;
t867 = -pkin(3) * t1194 + t894 * t943;
t831 = -t867 * t1212 + t864 * t906;
t1254 = t831 * t915;
t895 = pkin(3) * t945 + pkin(2);
t865 = pkin(3) * t1190 + t895 * t937;
t868 = -pkin(3) * t1191 + t895 * t946;
t832 = -t868 * t1210 + t865 * t907;
t1253 = t832 * t919;
t896 = pkin(3) * t948 + pkin(2);
t866 = pkin(3) * t1187 + t896 * t940;
t869 = -pkin(3) * t1188 + t896 * t949;
t833 = -t869 * t1208 + t866 * t908;
t1252 = t833 * t923;
t834 = t867 * t1215 + t864 * t909;
t1251 = t834 * t915;
t835 = t868 * t1214 + t865 * t910;
t1250 = t835 * t919;
t836 = t869 * t1213 + t866 * t911;
t1249 = t836 * t923;
t944 = cos(qJ(1,3));
t1245 = t867 * t944;
t951 = 0.1e1 / pkin(3);
t1112 = t951 * t1245;
t1204 = t915 * t952;
t843 = (t1265 - t1112) * t1204;
t1248 = t843 * t915;
t947 = cos(qJ(1,2));
t1244 = t868 * t947;
t1111 = t951 * t1244;
t1200 = t919 * t952;
t844 = (t1263 - t1111) * t1200;
t1247 = t844 * t919;
t950 = cos(qJ(1,1));
t1243 = t869 * t950;
t1110 = t951 * t1243;
t1196 = t923 * t952;
t845 = (t1261 - t1110) * t1196;
t1246 = t845 * t923;
t888 = pkin(3) * cos(t1182) + t897;
t879 = 0.1e1 / t888;
t1236 = t879 * t915;
t1235 = t879 * t935;
t880 = 0.1e1 / t888 ^ 2;
t918 = t935 ^ 2;
t1234 = t880 * t918;
t927 = t944 ^ 2;
t1233 = t880 * t927;
t1232 = t880 * t934;
t1231 = t880 * t943;
t889 = pkin(3) * cos(t1183) + t898;
t881 = 0.1e1 / t889;
t1230 = t881 * t919;
t1229 = t881 * t938;
t882 = 0.1e1 / t889 ^ 2;
t922 = t938 ^ 2;
t1228 = t882 * t922;
t928 = t947 ^ 2;
t1227 = t882 * t928;
t1226 = t882 * t937;
t1225 = t882 * t946;
t890 = pkin(3) * cos(t1184) + t899;
t883 = 0.1e1 / t890;
t1224 = t883 * t923;
t1223 = t883 * t941;
t884 = 0.1e1 / t890 ^ 2;
t926 = t941 ^ 2;
t1222 = t884 * t926;
t929 = t950 ^ 2;
t1221 = t884 * t929;
t1220 = t884 * t940;
t1219 = t884 * t949;
t1218 = t885 * t915;
t1217 = t886 * t919;
t1216 = t887 * t923;
t1211 = t909 * t944;
t1209 = t910 * t947;
t1207 = t911 * t950;
t1206 = t915 * t942;
t1205 = t915 * t944;
t916 = 0.1e1 / t933 ^ 2;
t1203 = t916 * t942;
t1202 = t919 * t945;
t1201 = t919 * t947;
t920 = 0.1e1 / t936 ^ 2;
t1199 = t920 * t945;
t1198 = t923 * t948;
t1197 = t923 * t950;
t924 = 0.1e1 / t939 ^ 2;
t1195 = t924 * t948;
t1192 = t934 * t943;
t1189 = t937 * t946;
t1186 = t940 * t949;
t1185 = t951 * t952;
t1181 = t880 * t1274;
t1180 = t882 * t1272;
t1179 = t884 * t1270;
t1178 = t825 * t1206;
t1177 = t825 * t1204;
t1176 = t826 * t1206;
t1175 = t826 * t1204;
t1174 = t827 * t1202;
t1173 = t827 * t1200;
t1172 = t828 * t1202;
t1171 = t828 * t1200;
t1170 = t829 * t1198;
t1169 = t829 * t1196;
t1168 = t830 * t1198;
t1167 = t830 * t1196;
t1166 = t831 * t1203;
t1165 = t832 * t1199;
t1164 = t833 * t1195;
t1163 = t834 * t1203;
t1162 = t835 * t1199;
t1161 = t836 * t1195;
t1160 = t867 * t1205;
t1159 = t868 * t1201;
t1158 = t869 * t1197;
t1157 = t873 * t1235;
t1156 = t874 * t1229;
t1155 = t875 * t1223;
t1154 = t876 * t1235;
t1153 = t877 * t1229;
t1152 = t878 * t1223;
t1151 = t879 * t906 * t944;
t1150 = t879 * t1211;
t1149 = t915 * t1235;
t1148 = t879 * t1205;
t900 = t906 ^ 2;
t1147 = t900 * t1233;
t903 = t909 ^ 2;
t1146 = t903 * t1233;
t917 = t934 ^ 2;
t1145 = t917 * t1233;
t1144 = t927 * t1232;
t1143 = t927 * t1231;
t1142 = t880 * t1192;
t1141 = t880 * t935 * t944;
t1140 = t881 * t907 * t947;
t1139 = t881 * t1209;
t1138 = t919 * t1229;
t1137 = t881 * t1201;
t901 = t907 ^ 2;
t1136 = t901 * t1227;
t904 = t910 ^ 2;
t1135 = t904 * t1227;
t921 = t937 ^ 2;
t1134 = t921 * t1227;
t1133 = t928 * t1226;
t1132 = t928 * t1225;
t1131 = t882 * t1189;
t1130 = t882 * t938 * t947;
t1129 = t883 * t908 * t950;
t1128 = t883 * t1207;
t1127 = t923 * t1223;
t1126 = t883 * t1197;
t902 = t908 ^ 2;
t1125 = t902 * t1221;
t905 = t911 ^ 2;
t1124 = t905 * t1221;
t925 = t940 ^ 2;
t1123 = t925 * t1221;
t1122 = t929 * t1220;
t1121 = t929 * t1219;
t1120 = t884 * t1186;
t1119 = t884 * t941 * t950;
t846 = (t885 - t1112) * t1204;
t1118 = t846 * t1206;
t1117 = t915 * t1185;
t847 = (t886 - t1111) * t1200;
t1116 = t847 * t1202;
t1115 = t919 * t1185;
t848 = (t887 - t1110) * t1196;
t1114 = t848 * t1198;
t1113 = t923 * t1185;
t1036 = t908 * t911 * t1221;
t965 = t1036 * t1269;
t1045 = t907 * t910 * t1227;
t968 = t1045 * t1271;
t1055 = t906 * t909 * t1233;
t971 = t1055 * t1273;
t1109 = t873 * t971 + t874 * t968 + t875 * t965;
t1108 = t876 * t971 + t877 * t968 + t878 * t965;
t1035 = t908 * t1119;
t964 = t1035 * t1270;
t1044 = t907 * t1130;
t967 = t1044 * t1272;
t1054 = t906 * t1141;
t970 = t1054 * t1274;
t1107 = t873 * t970 + t874 * t967 + t875 * t964;
t1106 = t876 * t970 + t877 * t967 + t878 * t964;
t1034 = t911 * t1119;
t963 = t1034 * t1269;
t1043 = t910 * t1130;
t966 = t1043 * t1271;
t1053 = t909 * t1141;
t969 = t1053 * t1273;
t1105 = t873 * t969 + t874 * t966 + t875 * t963;
t1104 = t876 * t969 + t877 * t966 + t878 * t963;
t1103 = -t1218 / 0.2e1;
t1102 = t1218 / 0.2e1;
t1101 = t916 * t1265;
t1100 = t942 * t1265;
t1099 = t944 * t1265;
t1098 = -t1217 / 0.2e1;
t1097 = t1217 / 0.2e1;
t1096 = t920 * t1263;
t1095 = t945 * t1263;
t1094 = t947 * t1263;
t1093 = -t1216 / 0.2e1;
t1092 = t1216 / 0.2e1;
t1091 = t924 * t1261;
t1090 = t948 * t1261;
t1089 = t950 * t1261;
t1088 = t918 * t1181;
t1087 = t927 * t1181;
t1086 = t922 * t1180;
t1085 = t928 * t1180;
t1084 = t926 * t1179;
t1083 = t929 * t1179;
t1082 = t867 * t927 * t1236;
t1081 = t1203 * t1245;
t1080 = t868 * t928 * t1230;
t1079 = t1199 * t1244;
t1078 = t869 * t929 * t1224;
t1077 = t1195 * t1243;
t1076 = t873 * t1151;
t1075 = t873 * t1150;
t1074 = t873 * t1149;
t1073 = t874 * t1140;
t1072 = t874 * t1139;
t1071 = t874 * t1138;
t1070 = t875 * t1129;
t1069 = t875 * t1128;
t1068 = t875 * t1127;
t1067 = t876 * t1151;
t1066 = t876 * t1150;
t1065 = t876 * t1149;
t1064 = t877 * t1140;
t1063 = t877 * t1139;
t1062 = t877 * t1138;
t1061 = t878 * t1129;
t1060 = t878 * t1128;
t1059 = t878 * t1127;
t1058 = t885 * t1149;
t1057 = t906 * t1148;
t1056 = t909 * t1148;
t1052 = t917 * t1141;
t1051 = t927 * t1142;
t1050 = t934 * t1141;
t1049 = t943 * t1141;
t1048 = t886 * t1138;
t1047 = t907 * t1137;
t1046 = t910 * t1137;
t1042 = t921 * t1130;
t1041 = t928 * t1131;
t1040 = t937 * t1130;
t1039 = t946 * t1130;
t1038 = t908 * t1126;
t1037 = t911 * t1126;
t1033 = t925 * t1119;
t1032 = t929 * t1120;
t1031 = t940 * t1119;
t1030 = t949 * t1119;
t1029 = t887 * t1127;
t1028 = t879 * t1103;
t1027 = t881 * t1098;
t1026 = t883 * t1093;
t1025 = t915 * t1100;
t1024 = t915 * t1099;
t1023 = t916 * t1100;
t1022 = t919 * t1095;
t1021 = t919 * t1094;
t1020 = t920 * t1095;
t1019 = t923 * t1090;
t1018 = t923 * t1089;
t1017 = t924 * t1090;
t1016 = t900 * t1087;
t1015 = t903 * t1087;
t1014 = t901 * t1085;
t1013 = t904 * t1085;
t1012 = t902 * t1083;
t1011 = t905 * t1083;
t1010 = t825 * t1057;
t1009 = t826 * t1056;
t1008 = t827 * t1047;
t1007 = t828 * t1046;
t1006 = t829 * t1038;
t1005 = t830 * t1037;
t1004 = t906 * t1082;
t1003 = t909 * t1082;
t1002 = t867 * t935 * t1148;
t1001 = t907 * t1080;
t1000 = t910 * t1080;
t999 = t868 * t938 * t1137;
t998 = t908 * t1078;
t997 = t911 * t1078;
t996 = t869 * t941 * t1126;
t995 = t873 * t1057;
t994 = t873 * t1056;
t993 = t874 * t1047;
t992 = t874 * t1046;
t991 = t875 * t1038;
t990 = t875 * t1037;
t989 = t876 * t1057;
t988 = t876 * t1056;
t987 = t877 * t1047;
t986 = t877 * t1046;
t985 = t878 * t1038;
t984 = t878 * t1037;
t983 = t943 * t1055;
t982 = t934 * t1049;
t981 = t946 * t1045;
t980 = t937 * t1039;
t979 = t949 * t1036;
t978 = t940 * t1030;
t977 = t944 * t1028;
t976 = t879 * t1024;
t975 = t947 * t1027;
t974 = t881 * t1021;
t973 = t950 * t1026;
t972 = t883 * t1018;
t962 = (-t825 * t909 + t826 * t906) * t1148;
t961 = (-t827 * t910 + t828 * t907) * t1137;
t960 = (-t829 * t911 + t830 * t908) * t1126;
t959 = (t906 * t1099 + t825 * t935) * t1236;
t958 = (t1211 * t1266 + t826 * t935) * t1236;
t957 = (t907 * t1094 + t827 * t938) * t1230;
t956 = (t1209 * t1264 + t828 * t938) * t1230;
t955 = (t908 * t1089 + t829 * t941) * t1224;
t954 = (t1207 * t1262 + t830 * t941) * t1224;
t953 = 0.1e1 / pkin(2) ^ 2;
t872 = t878 ^ 2;
t871 = t877 ^ 2;
t870 = t876 ^ 2;
t863 = (t948 ^ 2 - 0.1e1 / 0.2e1) * t1186 + (t949 ^ 2 - 0.1e1 / 0.2e1) * t948 * t939;
t862 = (t945 ^ 2 - 0.1e1 / 0.2e1) * t1189 + (t946 ^ 2 - 0.1e1 / 0.2e1) * t945 * t936;
t861 = (t942 ^ 2 - 0.1e1 / 0.2e1) * t1192 + (t943 ^ 2 - 0.1e1 / 0.2e1) * t942 * t933;
t824 = t836 * t1113;
t823 = t835 * t1115;
t822 = t834 * t1117;
t821 = t833 * t1113;
t820 = t832 * t1115;
t819 = t831 * t1117;
t818 = -t1034 - t1043 - t1053;
t817 = t1035 + t1044 + t1054;
t816 = -t1036 - t1045 - t1055;
t815 = -t911 * t1033 - t910 * t1042 - t909 * t1052;
t814 = t908 * t1033 + t907 * t1042 + t906 * t1052;
t813 = -t925 * t1036 - t921 * t1045 - t917 * t1055;
t812 = (-t911 * t1030 - t910 * t1039 - t909 * t1049) * t1268;
t811 = (t911 * t1031 + t910 * t1040 + t909 * t1050) * t1268;
t810 = (t908 * t1030 + t907 * t1039 + t906 * t1049) * t1268;
t809 = (-t908 * t1031 - t907 * t1040 - t906 * t1050) * t1268;
t808 = (-t979 - t981 - t983) * t1268;
t807 = (t940 * t1036 + t937 * t1045 + t934 * t1055) * t1268;
t806 = -0.2e1 * t909 * t982 - 0.2e1 * t910 * t980 - 0.2e1 * t911 * t978;
t805 = 0.2e1 * t906 * t982 + 0.2e1 * t907 * t980 + 0.2e1 * t908 * t978;
t804 = -0.2e1 * t934 * t983 - 0.2e1 * t937 * t981 - 0.2e1 * t940 * t979;
t803 = t821 + t1167;
t802 = t821 + 0.2e1 * t1167;
t801 = t820 + t1171;
t800 = t820 + 0.2e1 * t1171;
t799 = t819 + t1175;
t798 = t819 + 0.2e1 * t1175;
t797 = t824 + t1169;
t796 = t824 + 0.2e1 * t1169;
t795 = t823 + t1173;
t794 = t823 + 0.2e1 * t1173;
t793 = t822 + t1177;
t792 = t822 + 0.2e1 * t1177;
t791 = -t872 * t1034 - t871 * t1043 - t870 * t1053;
t790 = t872 * t1035 + t871 * t1044 + t870 * t1054;
t789 = -t872 * t1036 - t871 * t1045 - t870 * t1055;
t788 = -0.4e1 * t863 * t1034 - 0.4e1 * t862 * t1043 - 0.4e1 * t861 * t1053;
t787 = 0.4e1 * t863 * t1035 + 0.4e1 * t862 * t1044 + 0.4e1 * t861 * t1054;
t786 = -0.4e1 * t863 * t1036 - 0.4e1 * t862 * t1045 - 0.4e1 * t861 * t1055;
t785 = (t830 * t1091 + t828 * t1096 + t826 * t1101) * t953;
t784 = (t829 * t1091 + t827 * t1096 + t825 * t1101) * t953;
t783 = (t825 * t826 * t916 + t827 * t828 * t920 + t829 * t830 * t924) * t953;
t782 = (t943 * t958 + t946 * t956 + t949 * t954) * t952;
t781 = (t934 * t958 + t937 * t956 + t940 * t954) * t952;
t780 = (t943 * t959 + t946 * t957 + t949 * t955) * t952;
t779 = (t934 * t959 + t937 * t957 + t940 * t955) * t952;
t778 = (t943 * t962 + t946 * t961 + t949 * t960) * t952;
t777 = (t934 * t962 + t937 * t961 + t940 * t960) * t952;
t1 = [t1124 + t1135 + t1146, 0, 0, t905 * t1123 + t904 * t1134 + t903 * t1145, 0.2e1 * t1032 * t905 + 0.2e1 * t1041 * t904 + 0.2e1 * t1051 * t903, (-t1005 * t940 - t1007 * t937 - t1009 * t934) * t1267, (-t1005 * t949 - t1007 * t946 - t1009 * t943) * t1267, (t826 ^ 2 * t916 + t828 ^ 2 * t920 + t830 ^ 2 * t924) * t953, (t1121 * t905 + t1132 * t904 + t1143 * t903) * t1268, (-t1122 * t905 - t1133 * t904 - t1144 * t903) * t1268, t1124 * t872 + t1135 * t871 + t1146 * t870, 0.4e1 * t1124 * t863 + 0.4e1 * t1135 * t862 + 0.4e1 * t1146 * t861, -t799 * t1066 - t801 * t1063 - t803 * t1060 + (-t826 * t988 - t828 * t986 - t830 * t984 + (-t831 * t988 - t832 * t986 - t833 * t984) * t951) * t952, t799 * t1075 + t801 * t1072 + t803 * t1069 + (t826 * t994 + t828 * t992 + t830 * t990 + (t831 * t994 + t832 * t992 + t833 * t990) * t951) * t952, (t799 * t1259 + t801 * t1257 + t803 * t1255 + (t1252 * t803 + t1253 * t801 + t1254 * t799) * t951) * t952, t873 * t1015 + t874 * t1013 + t875 * t1011 + t798 * t1176 + t800 * t1172 + t802 * t1168 + (t1164 * t830 + t1165 * t828 + t1166 * t826) * t1185, t876 * t1015 + t877 * t1013 + t878 * t1011 - t798 * t826 - t800 * t828 - t802 * t830 + (-t1252 * t830 - t1253 * t828 - t1254 * t826) * t1185, 1; t816, 0, 0, t813, t804, t777, t778, t783, t808, t807, t789, t786, -t793 * t1066 - t795 * t1063 - t797 * t1060 + (t826 * t989 + t828 * t987 + t830 * t985 + (t831 * t989 + t832 * t987 + t833 * t985) * t951) * t952, t793 * t1075 + t795 * t1072 + t797 * t1069 + (-t826 * t995 - t828 * t993 - t830 * t991 + (-t831 * t995 - t832 * t993 - t833 * t991) * t951) * t952, (t793 * t1259 + t795 * t1257 + t797 * t1255 + (t1252 * t797 + t1253 * t795 + t1254 * t793) * t951) * t952, t792 * t1176 + t794 * t1172 + t796 * t1168 + (t1164 * t829 + t1165 * t827 + t1166 * t825) * t1185 + t1109, -t792 * t826 - t794 * t828 - t796 * t830 + (-t1252 * t829 - t1253 * t827 - t825 * t1254) * t1185 + t1108, 0; t818, 0, 0, t815, t806, t781, t782, t785, t812, t811, t791, t788, -t843 * t1066 - t844 * t1063 - t845 * t1060 + (t826 * t1065 + t828 * t1062 + t830 * t1059 + (t1059 * t833 + t1062 * t832 + t1065 * t831) * t951) * t952, t843 * t1075 + t844 * t1072 + t845 * t1069 + (-t826 * t1074 - t828 * t1071 - t830 * t1068 + (-t1068 * t833 - t1071 * t832 - t1074 * t831) * t951) * t952, (t826 * t1248 + t828 * t1247 + t830 * t1246 + (t1246 * t833 + t1247 * t832 + t1248 * t831) * t951) * t952, t826 * t1118 + t828 * t1116 + t830 * t1114 + (t1017 * t833 + t1020 * t832 + t1023 * t831) * t1185 + t1105, -t826 * t846 - t828 * t847 - t830 * t848 + (t1093 * t833 + t1098 * t832 + t1103 * t831) * t1185 + t1104, 0; t816, 0, 0, t813, t804, t777, t778, t783, t808, t807, t789, t786, t799 * t1067 + t801 * t1064 + t803 * t1061 + (-t825 * t988 - t827 * t986 - t829 * t984 + (-t834 * t988 - t835 * t986 - t836 * t984) * t951) * t952, -t799 * t1076 - t801 * t1073 - t803 * t1070 + (t825 * t994 + t827 * t992 + t829 * t990 + (t834 * t994 + t835 * t992 + t836 * t990) * t951) * t952, (t799 * t1260 + t801 * t1258 + t803 * t1256 + (t1249 * t803 + t1250 * t801 + t1251 * t799) * t951) * t952, t798 * t1178 + t800 * t1174 + t802 * t1170 + (t1161 * t830 + t1162 * t828 + t1163 * t826) * t1185 + t1109, -t798 * t825 - t800 * t827 - t802 * t829 + (-t1249 * t830 - t1250 * t828 - t1251 * t826) * t1185 + t1108, 0; t1125 + t1136 + t1147, 0, 0, t902 * t1123 + t901 * t1134 + t900 * t1145, 0.2e1 * t1032 * t902 + 0.2e1 * t1041 * t901 + 0.2e1 * t1051 * t900, (t1006 * t940 + t1008 * t937 + t1010 * t934) * t1267, (t1006 * t949 + t1008 * t946 + t1010 * t943) * t1267, (t825 ^ 2 * t916 + t827 ^ 2 * t920 + t829 ^ 2 * t924) * t953, (t1121 * t902 + t1132 * t901 + t1143 * t900) * t1268, (-t1122 * t902 - t1133 * t901 - t1144 * t900) * t1268, t1125 * t872 + t1136 * t871 + t1147 * t870, 0.4e1 * t1125 * t863 + 0.4e1 * t1136 * t862 + 0.4e1 * t1147 * t861, t793 * t1067 + t795 * t1064 + t797 * t1061 + (t825 * t989 + t827 * t987 + t829 * t985 + (t834 * t989 + t835 * t987 + t836 * t985) * t951) * t952, -t793 * t1076 - t795 * t1073 - t797 * t1070 + (-t825 * t995 - t827 * t993 - t829 * t991 + (-t834 * t995 - t835 * t993 - t836 * t991) * t951) * t952, (t793 * t1260 + t795 * t1258 + t797 * t1256 + (t1249 * t797 + t1250 * t795 + t1251 * t793) * t951) * t952, t873 * t1016 + t874 * t1014 + t875 * t1012 + t792 * t1178 + t794 * t1174 + t796 * t1170 + (t1161 * t829 + t1162 * t827 + t1163 * t825) * t1185, t876 * t1016 + t877 * t1014 + t878 * t1012 - t792 * t825 - t794 * t827 - t796 * t829 + (-t1249 * t829 - t1250 * t827 - t825 * t1251) * t1185, 1; t817, 0, 0, t814, t805, t779, t780, t784, t810, t809, t790, t787, t843 * t1067 + t844 * t1064 + t845 * t1061 + (t825 * t1065 + t827 * t1062 + t829 * t1059 + (t1059 * t836 + t1062 * t835 + t1065 * t834) * t951) * t952, -t843 * t1076 - t844 * t1073 - t845 * t1070 + (-t825 * t1074 - t827 * t1071 - t829 * t1068 + (-t1068 * t836 - t1071 * t835 - t1074 * t834) * t951) * t952, (t825 * t1248 + t827 * t1247 + t829 * t1246 + (t1246 * t836 + t1247 * t835 + t1248 * t834) * t951) * t952, t825 * t1118 + t827 * t1116 + t829 * t1114 + (t1017 * t836 + t1020 * t835 + t1023 * t834) * t1185 + t1107, -t825 * t846 - t827 * t847 - t829 * t848 + (t1093 * t836 + t1098 * t835 + t1103 * t834) * t1185 + t1106, 0; t818, 0, 0, t815, t806, t781, t782, t785, t812, t811, t791, t788, t799 * t1154 + t801 * t1153 + t803 * t1152 + (t973 * t1237 + t975 * t1239 + t977 * t1241 + (t1000 * t877 + t1003 * t876 + t878 * t997) * t951) * t952, -t799 * t1157 - t801 * t1156 - t803 * t1155 + (t911 * t875 * t972 + t910 * t874 * t974 + t909 * t873 * t976 + (-t1000 * t874 - t1003 * t873 - t875 * t997) * t951) * t952, (t803 * t1092 + t801 * t1097 + t799 * t1102 + (-t1158 * t803 - t1159 * t801 - t1160 * t799) * t951) * t952, t802 * t1019 + t800 * t1022 + t798 * t1025 + (-t1077 * t830 - t1079 * t828 - t1081 * t826) * t1185 + t1105, t802 * t1262 + t800 * t1264 + t798 * t1266 + (t1158 * t830 + t1159 * t828 + t1160 * t826) * t1185 + t1104, 0; t817, 0, 0, t814, t805, t779, t780, t784, t810, t809, t790, t787, t793 * t1154 + t795 * t1153 + t797 * t1152 + (t972 * t1238 + t974 * t1240 + t976 * t1242 + (-t1001 * t877 - t1004 * t876 - t878 * t998) * t951) * t952, -t793 * t1157 - t795 * t1156 - t797 * t1155 + (t908 * t875 * t973 + t907 * t874 * t975 + t906 * t873 * t977 + (t1001 * t874 + t1004 * t873 + t875 * t998) * t951) * t952, (t797 * t1092 + t795 * t1097 + t793 * t1102 + (-t1158 * t797 - t1159 * t795 - t1160 * t793) * t951) * t952, t796 * t1019 + t794 * t1022 + t792 * t1025 + (-t1077 * t829 - t1079 * t827 - t1081 * t825) * t1185 + t1107, t796 * t1262 + t794 * t1264 + t792 * t1266 + (t1158 * t829 + t1159 * t827 + t1160 * t825) * t1185 + t1106, 0; t1222 + t1228 + t1234, 0, 0, t925 * t1222 + t921 * t1228 + t917 * t1234, 0.2e1 * t1120 * t926 + 0.2e1 * t1131 * t922 + 0.2e1 * t1142 * t918, (t1029 * t940 + t1048 * t937 + t1058 * t934) * t952, (t1029 * t949 + t1048 * t946 + t1058 * t943) * t952, (t887 ^ 2 * t924 / 0.4e1 + t886 ^ 2 * t920 / 0.4e1 + t885 ^ 2 * t916 / 0.4e1) * t953, (t926 * t1219 + t922 * t1225 + t918 * t1231) * t1268, (-t1220 * t926 - t1226 * t922 - t1232 * t918) * t1268, t1222 * t872 + t1228 * t871 + t1234 * t870, 0.4e1 * t1222 * t863 + 0.4e1 * t1228 * t862 + 0.4e1 * t1234 * t861, t843 * t1154 + t844 * t1153 + t845 * t1152 + (t878 * t1029 / 0.2e1 + t877 * t1048 / 0.2e1 + t876 * t1058 / 0.2e1 + (-t1002 * t876 - t877 * t999 - t878 * t996) * t951) * t952, -t843 * t1157 - t844 * t1156 - t845 * t1155 + (t941 * t875 * t1026 + t938 * t874 * t1027 + t935 * t873 * t1028 + (t1002 * t873 + t874 * t999 + t875 * t996) * t951) * t952, (t845 * t1092 + t844 * t1097 + t843 * t1102 + (-t1158 * t845 - t1159 * t844 - t1160 * t843) * t951) * t952, t875 * t1084 + t848 * t1019 + t874 * t1086 + t847 * t1022 + t873 * t1088 + t846 * t1025 + (t1077 * t1262 + t1079 * t1264 + t1081 * t1266) * t1185, t878 * t1084 + t848 * t1262 + t877 * t1086 + t847 * t1264 + t876 * t1088 + t846 * t1266 + (t1018 * t869 + t1021 * t868 + t1024 * t867) * t1185, 1;];
tau_reg  = t1;
