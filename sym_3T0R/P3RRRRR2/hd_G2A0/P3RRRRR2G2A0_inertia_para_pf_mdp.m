% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:10
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR2G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G2A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G2A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G2A0_inertia_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G2A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G2A0_inertia_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:09:38
% EndTime: 2020-03-09 21:09:47
% DurationCPUTime: 9.96s
% Computational Cost: add. (5106->636), mult. (10079->1188), div. (3573->22), fcn. (12339->39), ass. (0->460)
t2810 = -2 * pkin(1);
t2809 = 2 * MDP(8);
t2464 = cos(qJ(3,3));
t2441 = 0.1e1 / t2464;
t2467 = cos(qJ(3,2));
t2445 = 0.1e1 / t2467;
t2470 = cos(qJ(3,1));
t2449 = 0.1e1 / t2470;
t2457 = sin(qJ(1,3));
t2808 = pkin(1) * t2457;
t2460 = sin(qJ(1,2));
t2807 = pkin(1) * t2460;
t2463 = sin(qJ(1,1));
t2806 = pkin(1) * t2463;
t2805 = qJ(2,1) - qJ(3,1);
t2804 = qJ(2,1) + qJ(3,1);
t2803 = qJ(2,2) - qJ(3,2);
t2802 = qJ(2,2) + qJ(3,2);
t2801 = qJ(2,3) - qJ(3,3);
t2800 = qJ(2,3) + qJ(3,3);
t2799 = MDP(1) / pkin(1) ^ 2;
t2475 = 1 / pkin(1);
t2798 = MDP(4) * t2475;
t2797 = MDP(7) * t2475;
t2473 = 0.1e1 / pkin(2);
t2796 = MDP(9) * t2473;
t2795 = MDP(10) * t2473;
t2474 = 1 / (pkin(2) ^ 2);
t2794 = MDP(11) * t2474;
t2452 = legFrame(3,2);
t2425 = sin(t2452);
t2428 = cos(t2452);
t2455 = sin(qJ(3,3));
t2767 = t2428 * t2455;
t2456 = sin(qJ(2,3));
t2465 = cos(qJ(2,3));
t2466 = cos(qJ(1,3));
t2413 = t2456 * t2466 + t2457 * t2465;
t2784 = t2413 * t2464;
t2404 = -t2425 * t2784 + t2767;
t2793 = t2404 * t2441;
t2776 = t2425 * t2455;
t2405 = t2428 * t2784 + t2776;
t2792 = t2405 * t2441;
t2453 = legFrame(2,2);
t2426 = sin(t2453);
t2429 = cos(t2453);
t2458 = sin(qJ(3,2));
t2764 = t2429 * t2458;
t2459 = sin(qJ(2,2));
t2468 = cos(qJ(2,2));
t2469 = cos(qJ(1,2));
t2414 = t2459 * t2469 + t2460 * t2468;
t2783 = t2414 * t2467;
t2406 = -t2426 * t2783 + t2764;
t2791 = t2406 * t2445;
t2773 = t2426 * t2458;
t2407 = t2429 * t2783 + t2773;
t2790 = t2407 * t2445;
t2454 = legFrame(1,2);
t2427 = sin(t2454);
t2430 = cos(t2454);
t2461 = sin(qJ(3,1));
t2761 = t2430 * t2461;
t2462 = sin(qJ(2,1));
t2471 = cos(qJ(2,1));
t2472 = cos(qJ(1,1));
t2415 = t2462 * t2472 + t2463 * t2471;
t2782 = t2415 * t2470;
t2408 = -t2427 * t2782 + t2761;
t2789 = t2408 * t2449;
t2770 = t2427 * t2461;
t2409 = t2430 * t2782 + t2770;
t2788 = t2409 * t2449;
t2787 = (t2466 * t2810 + (-cos(qJ(1,3) + t2801) - cos(qJ(1,3) + t2800)) * pkin(2)) / (sin(t2800) + sin(t2801));
t2786 = (t2469 * t2810 + (-cos(qJ(1,2) + t2803) - cos(qJ(1,2) + t2802)) * pkin(2)) / (sin(t2802) + sin(t2803));
t2785 = (t2472 * t2810 + (-cos(qJ(1,1) + t2805) - cos(qJ(1,1) + t2804)) * pkin(2)) / (sin(t2804) + sin(t2805));
t2422 = cos(qJ(1,3) + qJ(2,3));
t2432 = 0.1e1 / t2456;
t2781 = t2422 * t2432;
t2423 = cos(qJ(1,2) + qJ(2,2));
t2435 = 0.1e1 / t2459;
t2780 = t2423 * t2435;
t2424 = cos(qJ(1,1) + qJ(2,1));
t2438 = 0.1e1 / t2462;
t2779 = t2424 * t2438;
t2778 = t2425 * t2422;
t2777 = t2425 * t2441;
t2775 = t2426 * t2423;
t2774 = t2426 * t2445;
t2772 = t2427 * t2424;
t2771 = t2427 * t2449;
t2769 = t2428 * t2422;
t2768 = t2428 * t2441;
t2766 = t2429 * t2423;
t2765 = t2429 * t2445;
t2763 = t2430 * t2424;
t2762 = t2430 * t2449;
t2760 = t2432 * t2441;
t2442 = 0.1e1 / t2464 ^ 2;
t2759 = t2432 * t2442;
t2440 = t2464 ^ 2;
t2443 = t2441 / t2440;
t2758 = t2432 * t2443;
t2757 = t2432 * t2455;
t2756 = t2432 * t2465;
t2755 = t2432 * t2475;
t2433 = 0.1e1 / t2456 ^ 2;
t2754 = t2433 * t2442;
t2753 = t2433 * t2465;
t2752 = t2435 * t2445;
t2446 = 0.1e1 / t2467 ^ 2;
t2751 = t2435 * t2446;
t2444 = t2467 ^ 2;
t2447 = t2445 / t2444;
t2750 = t2435 * t2447;
t2749 = t2435 * t2458;
t2748 = t2435 * t2468;
t2747 = t2435 * t2475;
t2436 = 0.1e1 / t2459 ^ 2;
t2746 = t2436 * t2446;
t2745 = t2436 * t2468;
t2744 = t2438 * t2449;
t2450 = 0.1e1 / t2470 ^ 2;
t2743 = t2438 * t2450;
t2448 = t2470 ^ 2;
t2451 = t2449 / t2448;
t2742 = t2438 * t2451;
t2741 = t2438 * t2461;
t2740 = t2438 * t2471;
t2739 = t2438 * t2475;
t2439 = 0.1e1 / t2462 ^ 2;
t2738 = t2439 * t2450;
t2737 = t2439 * t2471;
t2736 = t2441 * t2455;
t2735 = t2442 * t2455;
t2734 = t2445 * t2458;
t2733 = t2446 * t2458;
t2732 = t2449 * t2461;
t2731 = t2450 * t2461;
t2730 = t2455 * t2465;
t2729 = t2456 * t2473;
t2728 = t2458 * t2468;
t2727 = t2459 * t2473;
t2726 = t2461 * t2471;
t2725 = t2462 * t2473;
t2724 = t2473 * t2475;
t2723 = t2474 * t2475;
t2722 = (t2404 * t2405 * t2754 + t2406 * t2407 * t2746 + t2408 * t2409 * t2738) * t2799 + (t2425 * t2428 * t2442 + t2426 * t2429 * t2446 + t2427 * t2430 * t2450) * t2794;
t2721 = 2 * MDP(13);
t2720 = t2475 * t2809;
t2719 = -0.2e1 * t2464 * t2465;
t2718 = -0.2e1 * t2467 * t2468;
t2717 = -0.2e1 * t2470 * t2471;
t2716 = pkin(1) * t2730;
t2715 = pkin(1) * t2728;
t2714 = pkin(1) * t2726;
t2713 = pkin(2) * t2413 * t2440;
t2712 = pkin(2) * t2414 * t2444;
t2711 = pkin(2) * t2415 * t2448;
t2379 = t2425 * t2713 + (-pkin(2) * t2767 + t2425 * t2808) * t2464 - t2428 * t2716;
t2710 = t2379 * t2759;
t2380 = -t2428 * t2713 + (-pkin(2) * t2776 - t2428 * t2808) * t2464 - t2425 * t2716;
t2709 = t2380 * t2759;
t2381 = t2426 * t2712 + (-pkin(2) * t2764 + t2426 * t2807) * t2467 - t2429 * t2715;
t2708 = t2381 * t2751;
t2382 = -t2429 * t2712 + (-pkin(2) * t2773 - t2429 * t2807) * t2467 - t2426 * t2715;
t2707 = t2382 * t2751;
t2383 = t2427 * t2711 + (-pkin(2) * t2761 + t2427 * t2806) * t2470 - t2430 * t2714;
t2706 = t2383 * t2743;
t2384 = -t2430 * t2711 + (-pkin(2) * t2770 - t2430 * t2806) * t2470 - t2427 * t2714;
t2705 = t2384 * t2743;
t2401 = t2724 * t2787;
t2419 = t2422 * t2755;
t2385 = t2419 + t2401 / 0.2e1;
t2704 = t2385 * t2756;
t2402 = t2724 * t2786;
t2420 = t2423 * t2747;
t2386 = t2420 + t2402 / 0.2e1;
t2703 = t2386 * t2748;
t2403 = t2724 * t2785;
t2421 = t2424 * t2739;
t2387 = t2421 + t2403 / 0.2e1;
t2702 = t2387 * t2740;
t2391 = t2419 + t2401;
t2701 = t2391 * t2759;
t2392 = t2420 + t2402;
t2700 = t2392 * t2751;
t2393 = t2421 + t2403;
t2699 = t2393 * t2743;
t2698 = t2404 * t2760;
t2697 = t2404 * t2758;
t2696 = t2404 * t2757;
t2695 = t2405 * t2760;
t2694 = t2405 * t2758;
t2693 = t2405 * t2757;
t2692 = t2406 * t2752;
t2691 = t2406 * t2750;
t2690 = t2406 * t2749;
t2689 = t2407 * t2752;
t2688 = t2407 * t2750;
t2687 = t2407 * t2749;
t2686 = t2408 * t2744;
t2685 = t2408 * t2742;
t2684 = t2408 * t2741;
t2683 = t2409 * t2744;
t2682 = t2409 * t2742;
t2681 = t2409 * t2741;
t2431 = t2455 ^ 2;
t2680 = t2431 * t2787;
t2679 = t2441 * t2787;
t2678 = t2455 * t2787;
t2434 = t2458 ^ 2;
t2677 = t2434 * t2786;
t2676 = t2445 * t2786;
t2675 = t2458 * t2786;
t2437 = t2461 ^ 2;
t2674 = t2437 * t2785;
t2673 = t2449 * t2785;
t2672 = t2461 * t2785;
t2671 = t2431 * t2781;
t2670 = t2422 * t2759;
t2669 = t2422 * t2756;
t2668 = t2422 * t2433 * t2441;
t2667 = t2434 * t2780;
t2666 = t2423 * t2751;
t2665 = t2423 * t2748;
t2664 = t2423 * t2436 * t2445;
t2663 = t2437 * t2779;
t2662 = t2424 * t2743;
t2661 = t2424 * t2740;
t2660 = t2424 * t2439 * t2449;
t2659 = t2425 * t2760;
t2658 = t2425 * t2759;
t2657 = t2425 * t2736;
t2656 = t2425 * t2735;
t2655 = t2426 * t2752;
t2654 = t2426 * t2751;
t2653 = t2426 * t2734;
t2652 = t2426 * t2733;
t2651 = t2427 * t2744;
t2650 = t2427 * t2743;
t2649 = t2427 * t2732;
t2648 = t2427 * t2731;
t2647 = t2428 * t2760;
t2646 = t2428 * t2759;
t2645 = t2428 * t2736;
t2644 = t2428 * t2735;
t2643 = t2429 * t2752;
t2642 = t2429 * t2751;
t2641 = t2429 * t2734;
t2640 = t2429 * t2733;
t2639 = t2430 * t2744;
t2638 = t2430 * t2743;
t2637 = t2430 * t2732;
t2636 = t2430 * t2731;
t2635 = t2431 * t2760;
t2634 = t2431 * t2759;
t2633 = t2432 * t2736;
t2632 = t2441 * t2756;
t2631 = t2441 * t2755;
t2630 = t2443 * t2757;
t2629 = t2442 * t2753;
t2628 = t2443 * t2753;
t2627 = t2434 * t2752;
t2626 = t2434 * t2751;
t2625 = t2435 * t2734;
t2624 = t2445 * t2748;
t2623 = t2445 * t2747;
t2622 = t2447 * t2749;
t2621 = t2446 * t2745;
t2620 = t2447 * t2745;
t2619 = t2437 * t2744;
t2618 = t2437 * t2743;
t2617 = t2438 * t2732;
t2616 = t2449 * t2740;
t2615 = t2449 * t2739;
t2614 = t2451 * t2741;
t2613 = t2450 * t2737;
t2612 = t2451 * t2737;
t2611 = t2729 / 0.2e1;
t2610 = t2727 / 0.2e1;
t2609 = t2725 / 0.2e1;
t2608 = 0.2e1 * t2704;
t2607 = 0.2e1 * t2703;
t2606 = 0.2e1 * t2702;
t2605 = -0.2e1 * t2698;
t2604 = -0.2e1 * t2695;
t2603 = -0.2e1 * t2692;
t2602 = -0.2e1 * t2689;
t2601 = -0.2e1 * t2686;
t2600 = -0.2e1 * t2683;
t2599 = t2379 * t2634;
t2598 = t2379 * t2633;
t2597 = t2380 * t2634;
t2596 = t2380 * t2633;
t2595 = t2381 * t2626;
t2594 = t2381 * t2625;
t2593 = t2382 * t2626;
t2592 = t2382 * t2625;
t2591 = t2383 * t2618;
t2590 = t2383 * t2617;
t2589 = t2384 * t2618;
t2588 = t2384 * t2617;
t2587 = t2455 * t2704;
t2586 = t2458 * t2703;
t2585 = t2461 * t2702;
t2584 = t2391 * t2634;
t2583 = t2391 * t2633;
t2582 = t2392 * t2626;
t2581 = t2392 * t2625;
t2580 = t2393 * t2618;
t2579 = t2393 * t2617;
t2578 = t2404 * t2635;
t2577 = t2404 * t2632;
t2576 = t2404 * t2629;
t2575 = t2404 * t2628;
t2574 = t2405 * t2635;
t2573 = t2405 * t2632;
t2572 = t2405 * t2629;
t2571 = t2405 * t2628;
t2570 = t2406 * t2627;
t2569 = t2406 * t2624;
t2568 = t2406 * t2621;
t2567 = t2406 * t2620;
t2566 = t2407 * t2627;
t2565 = t2407 * t2624;
t2564 = t2407 * t2621;
t2563 = t2407 * t2620;
t2562 = t2408 * t2619;
t2561 = t2408 * t2616;
t2560 = t2408 * t2613;
t2559 = t2408 * t2612;
t2558 = t2409 * t2619;
t2557 = t2409 * t2616;
t2556 = t2409 * t2613;
t2555 = t2409 * t2612;
t2554 = t2756 * t2787;
t2553 = t2441 * t2678;
t2552 = t2464 * t2678;
t2551 = t2748 * t2786;
t2550 = t2445 * t2675;
t2549 = t2467 * t2675;
t2548 = t2740 * t2785;
t2547 = t2449 * t2672;
t2546 = t2470 * t2672;
t2545 = t2422 * t2464 * t2757;
t2544 = t2465 * t2668;
t2543 = t2422 * t2629;
t2542 = t2423 * t2467 * t2749;
t2541 = t2468 * t2664;
t2540 = t2423 * t2621;
t2539 = t2424 * t2470 * t2741;
t2538 = t2471 * t2660;
t2537 = t2424 * t2613;
t2536 = t2425 * t2630;
t2535 = t2422 * t2657;
t2534 = t2404 * t2656;
t2533 = t2405 * t2656;
t2532 = t2426 * t2622;
t2531 = t2423 * t2653;
t2530 = t2406 * t2652;
t2529 = t2407 * t2652;
t2528 = t2427 * t2614;
t2527 = t2424 * t2649;
t2526 = t2408 * t2648;
t2525 = t2409 * t2648;
t2524 = t2428 * t2630;
t2523 = t2422 * t2645;
t2522 = t2404 * t2644;
t2521 = t2405 * t2644;
t2520 = t2429 * t2622;
t2519 = t2423 * t2641;
t2518 = t2406 * t2640;
t2517 = t2407 * t2640;
t2516 = t2430 * t2614;
t2515 = t2424 * t2637;
t2514 = t2408 * t2636;
t2513 = t2409 * t2636;
t2512 = t2724 * t2759;
t2511 = t2455 * t2628;
t2510 = t2724 * t2751;
t2509 = t2458 * t2620;
t2508 = t2724 * t2743;
t2507 = t2461 * t2612;
t2506 = t2729 * t2736;
t2505 = t2727 * t2734;
t2504 = t2725 * t2732;
t2503 = t2404 * t2511;
t2502 = t2405 * t2511;
t2501 = t2406 * t2509;
t2500 = t2407 * t2509;
t2499 = t2408 * t2507;
t2498 = t2409 * t2507;
t2497 = t2422 * t2554;
t2496 = t2441 * t2554;
t2495 = t2455 * t2554;
t2494 = t2423 * t2551;
t2493 = t2445 * t2551;
t2492 = t2458 * t2551;
t2491 = t2424 * t2548;
t2490 = t2449 * t2548;
t2489 = t2461 * t2548;
t2488 = t2455 * t2543;
t2487 = t2458 * t2540;
t2486 = t2461 * t2537;
t2485 = -0.2e1 * t2441 * t2587;
t2484 = -0.2e1 * t2445 * t2586;
t2483 = -0.2e1 * t2449 * t2585;
t2482 = t2441 * t2495;
t2481 = t2445 * t2492;
t2480 = t2449 * t2489;
t2400 = t2409 * t2615;
t2399 = t2408 * t2615;
t2398 = t2407 * t2623;
t2397 = t2406 * t2623;
t2396 = t2405 * t2631;
t2395 = t2404 * t2631;
t2390 = t2403 + 0.2e1 * t2421;
t2389 = t2402 + 0.2e1 * t2420;
t2388 = t2401 + 0.2e1 * t2419;
t2378 = t2384 * t2508;
t2377 = t2383 * t2508;
t2376 = t2382 * t2510;
t2375 = t2381 * t2510;
t2374 = t2380 * t2512;
t2373 = t2379 * t2512;
t2372 = t2400 + t2378;
t2371 = t2399 + t2377;
t2370 = t2398 + t2376;
t2369 = t2397 + t2375;
t2368 = t2396 + t2374;
t2367 = t2395 + t2373;
t2366 = t2378 + 0.2e1 * t2400;
t2365 = t2377 + 0.2e1 * t2399;
t2364 = t2376 + 0.2e1 * t2398;
t2363 = t2375 + 0.2e1 * t2397;
t2362 = t2374 + 0.2e1 * t2396;
t2361 = t2373 + 0.2e1 * t2395;
t2360 = t2400 + t2378 / 0.2e1;
t2359 = t2399 + t2377 / 0.2e1;
t2358 = t2398 + t2376 / 0.2e1;
t2357 = t2397 + t2375 / 0.2e1;
t2356 = t2396 + t2374 / 0.2e1;
t2355 = t2395 + t2373 / 0.2e1;
t2354 = t2360 * t2726 + t2427 * t2609;
t2353 = t2359 * t2726 + t2430 * t2609;
t2352 = t2358 * t2728 + t2426 * t2610;
t2351 = t2357 * t2728 + t2429 * t2610;
t2350 = t2356 * t2730 + t2425 * t2611;
t2349 = t2355 * t2730 + t2428 * t2611;
t2348 = t2356 * t2719 + t2425 * t2506;
t2347 = t2355 * t2719 + t2428 * t2506;
t2346 = t2360 * t2717 + t2427 * t2504;
t2345 = t2359 * t2717 + t2430 * t2504;
t2344 = t2358 * t2718 + t2426 * t2505;
t2343 = t2357 * t2718 + t2429 * t2505;
t2342 = (t2405 * t2668 + t2407 * t2664 + t2409 * t2660) * t2799;
t2341 = (t2404 * t2668 + t2406 * t2664 + t2408 * t2660) * t2799;
t1 = [(t2405 ^ 2 * t2754 + t2407 ^ 2 * t2746 + t2409 ^ 2 * t2738) * t2799 + (t2368 * t2695 + t2370 * t2689 + t2372 * t2683 + (t2368 * t2709 + t2370 * t2707 + t2372 * t2705) * t2473) * t2798 + (t2362 * t2573 + t2364 * t2565 + t2366 * t2557 + (t2380 * t2571 + t2382 * t2563 + t2384 * t2555) * t2724) * MDP(5) + (-t2362 * t2792 - t2364 * t2790 - t2366 * t2788 + (-t2380 * t2694 - t2382 * t2688 - t2384 * t2682) * t2724) * MDP(6) + (t2368 * t2574 + t2370 * t2566 + t2372 * t2558 + (t2368 * t2597 + t2370 * t2593 + t2372 * t2589) * t2473) * t2797 + (t2368 * t2693 + t2370 * t2687 + t2372 * t2681 + (t2368 * t2596 + t2370 * t2592 + t2372 * t2588) * t2473) * t2720 + ((t2380 * t2536 + t2382 * t2532 + t2384 * t2528) * t2723 + (t2368 * t2657 + t2370 * t2653 + t2372 * t2649 + (t2432 * t2533 + t2435 * t2529 + t2438 * t2525) * t2475) * t2473) * MDP(9) + ((t2380 * t2658 + t2382 * t2654 + t2384 * t2650) * t2723 + (t2368 * t2425 + t2370 * t2426 + t2372 * t2427 + (t2405 * t2659 + t2407 * t2655 + t2409 * t2651) * t2475) * t2473) * MDP(10) + (t2425 ^ 2 * t2442 + t2426 ^ 2 * t2446 + t2427 ^ 2 * t2450) * t2794 + (-t2344 * t2689 - t2346 * t2683 - t2348 * t2695 + (-t2533 - t2529 - t2525 + (t2380 * t2572 + t2382 * t2564 + t2384 * t2556) * t2475) * t2473) * MDP(12) + (t2350 * t2604 + t2352 * t2602 + t2354 * t2600 + (-t2405 * t2777 - t2407 * t2774 - t2409 * t2771 + (-t2380 * t2502 - t2382 * t2500 - t2384 * t2498) * t2475) * t2473) * MDP(13) + MDP(14); (t2367 * t2695 + t2369 * t2689 + t2371 * t2683 + (t2367 * t2709 + t2369 * t2707 + t2371 * t2705) * t2473) * t2798 + (t2361 * t2573 + t2363 * t2565 + t2365 * t2557 + (t2380 * t2575 + t2382 * t2567 + t2384 * t2559) * t2724) * MDP(5) + (-t2361 * t2792 - t2363 * t2790 - t2365 * t2788 + (-t2380 * t2697 - t2382 * t2691 - t2384 * t2685) * t2724) * MDP(6) + (t2367 * t2574 + t2369 * t2566 + t2371 * t2558 + (t2367 * t2597 + t2369 * t2593 + t2371 * t2589) * t2473) * t2797 + (t2367 * t2693 + t2369 * t2687 + t2371 * t2681 + (t2367 * t2596 + t2369 * t2592 + t2371 * t2588) * t2473) * t2720 + ((t2380 * t2524 + t2382 * t2520 + t2384 * t2516) * t2723 + (t2367 * t2657 + t2369 * t2653 + t2371 * t2649 + (t2432 * t2521 + t2435 * t2517 + t2438 * t2513) * t2475) * t2473) * MDP(9) + ((t2380 * t2646 + t2382 * t2642 + t2384 * t2638) * t2723 + (t2367 * t2425 + t2369 * t2426 + t2371 * t2427 + (t2405 * t2647 + t2407 * t2643 + t2409 * t2639) * t2475) * t2473) * MDP(10) + (-t2343 * t2689 - t2345 * t2683 - t2347 * t2695 + (-t2534 - t2530 - t2526 + (t2380 * t2576 + t2382 * t2568 + t2384 * t2560) * t2475) * t2473) * MDP(12) + (t2349 * t2604 + t2351 * t2602 + t2353 * t2600 + (-t2404 * t2777 - t2406 * t2774 - t2408 * t2771 + (-t2380 * t2503 - t2382 * t2501 - t2384 * t2499) * t2475) * t2473) * MDP(13) + t2722; t2342 + (t2391 * t2695 + t2392 * t2689 + t2393 * t2683 + (t2380 * t2701 + t2382 * t2700 + t2384 * t2699) * t2473) * t2798 + (t2388 * t2573 + t2389 * t2565 + t2390 * t2557 + (t2380 * t2543 + t2382 * t2540 + t2384 * t2537) * t2724) * MDP(5) + (-t2388 * t2792 - t2389 * t2790 - t2390 * t2788 + (-t2380 * t2670 - t2382 * t2666 - t2384 * t2662) * t2724) * MDP(6) + (t2391 * t2574 + t2392 * t2566 + t2393 * t2558 + (t2380 * t2584 + t2382 * t2582 + t2384 * t2580) * t2473) * t2797 + (t2391 * t2693 + t2392 * t2687 + t2393 * t2681 + (t2380 * t2583 + t2382 * t2581 + t2384 * t2579) * t2473) * t2720 + (t2391 * t2657 + t2392 * t2653 + t2393 * t2649) * t2796 + (t2391 * t2425 + t2392 * t2426 + t2393 * t2427) * t2795 + (t2405 * t2608 + t2407 * t2607 + t2409 * t2606 + (-t2535 - t2531 - t2527 + (t2380 * t2544 + t2382 * t2541 + t2384 * t2538) * t2475) * t2473) * MDP(12) + (t2405 * t2485 + t2407 * t2484 + t2409 * t2483 + (-t2778 - t2775 - t2772 + (-t2380 * t2488 - t2382 * t2487 - t2384 * t2486) * t2475) * t2473) * MDP(13); (t2368 * t2698 + t2370 * t2692 + t2372 * t2686 + (t2368 * t2710 + t2370 * t2708 + t2372 * t2706) * t2473) * t2798 + (t2362 * t2577 + t2364 * t2569 + t2366 * t2561 + (t2379 * t2571 + t2381 * t2563 + t2383 * t2555) * t2724) * MDP(5) + (-t2362 * t2793 - t2364 * t2791 - t2366 * t2789 + (-t2379 * t2694 - t2381 * t2688 - t2383 * t2682) * t2724) * MDP(6) + (t2368 * t2578 + t2370 * t2570 + t2372 * t2562 + (t2368 * t2599 + t2370 * t2595 + t2372 * t2591) * t2473) * t2797 + (t2368 * t2696 + t2370 * t2690 + t2372 * t2684 + (t2368 * t2598 + t2370 * t2594 + t2372 * t2590) * t2473) * t2720 + ((t2379 * t2536 + t2381 * t2532 + t2383 * t2528) * t2723 + (t2368 * t2645 + t2370 * t2641 + t2372 * t2637 + (t2432 * t2534 + t2435 * t2530 + t2438 * t2526) * t2475) * t2473) * MDP(9) + ((t2379 * t2658 + t2381 * t2654 + t2383 * t2650) * t2723 + (t2368 * t2428 + t2370 * t2429 + t2372 * t2430 + (t2404 * t2659 + t2406 * t2655 + t2408 * t2651) * t2475) * t2473) * MDP(10) + (-t2344 * t2692 - t2346 * t2686 - t2348 * t2698 + (-t2521 - t2517 - t2513 + (t2379 * t2572 + t2381 * t2564 + t2383 * t2556) * t2475) * t2473) * MDP(12) + (t2350 * t2605 + t2352 * t2603 + t2354 * t2601 + (-t2405 * t2768 - t2407 * t2765 - t2409 * t2762 + (-t2379 * t2502 - t2381 * t2500 - t2383 * t2498) * t2475) * t2473) * MDP(13) + t2722; (t2404 ^ 2 * t2754 + t2406 ^ 2 * t2746 + t2408 ^ 2 * t2738) * t2799 + (t2367 * t2698 + t2369 * t2692 + t2371 * t2686 + (t2367 * t2710 + t2369 * t2708 + t2371 * t2706) * t2473) * t2798 + (t2361 * t2577 + t2363 * t2569 + t2365 * t2561 + (t2379 * t2575 + t2381 * t2567 + t2383 * t2559) * t2724) * MDP(5) + (-t2361 * t2793 - t2363 * t2791 - t2365 * t2789 + (-t2379 * t2697 - t2381 * t2691 - t2383 * t2685) * t2724) * MDP(6) + (t2367 * t2578 + t2369 * t2570 + t2371 * t2562 + (t2367 * t2599 + t2369 * t2595 + t2371 * t2591) * t2473) * t2797 + (t2367 * t2696 + t2369 * t2690 + t2371 * t2684 + (t2367 * t2598 + t2369 * t2594 + t2371 * t2590) * t2473) * t2720 + ((t2379 * t2524 + t2381 * t2520 + t2383 * t2516) * t2723 + (t2367 * t2645 + t2369 * t2641 + t2371 * t2637 + (t2432 * t2522 + t2435 * t2518 + t2438 * t2514) * t2475) * t2473) * MDP(9) + ((t2379 * t2646 + t2381 * t2642 + t2383 * t2638) * t2723 + (t2367 * t2428 + t2369 * t2429 + t2371 * t2430 + (t2404 * t2647 + t2406 * t2643 + t2408 * t2639) * t2475) * t2473) * MDP(10) + (t2428 ^ 2 * t2442 + t2429 ^ 2 * t2446 + t2430 ^ 2 * t2450) * t2794 + (-t2343 * t2692 - t2345 * t2686 - t2347 * t2698 + (-t2522 - t2518 - t2514 + (t2379 * t2576 + t2381 * t2568 + t2383 * t2560) * t2475) * t2473) * MDP(12) + (t2349 * t2605 + t2351 * t2603 + t2353 * t2601 + (-t2404 * t2768 - t2406 * t2765 - t2408 * t2762 + (-t2379 * t2503 - t2381 * t2501 - t2383 * t2499) * t2475) * t2473) * MDP(13) + MDP(14); t2341 + (t2391 * t2698 + t2392 * t2692 + t2393 * t2686 + (t2379 * t2701 + t2381 * t2700 + t2383 * t2699) * t2473) * t2798 + (t2388 * t2577 + t2389 * t2569 + t2390 * t2561 + (t2379 * t2543 + t2381 * t2540 + t2383 * t2537) * t2724) * MDP(5) + (-t2388 * t2793 - t2389 * t2791 - t2390 * t2789 + (-t2379 * t2670 - t2381 * t2666 - t2383 * t2662) * t2724) * MDP(6) + (t2391 * t2578 + t2392 * t2570 + t2393 * t2562 + (t2379 * t2584 + t2381 * t2582 + t2383 * t2580) * t2473) * t2797 + (t2391 * t2696 + t2392 * t2690 + t2393 * t2684 + (t2379 * t2583 + t2381 * t2581 + t2383 * t2579) * t2473) * t2720 + (t2391 * t2645 + t2392 * t2641 + t2393 * t2637) * t2796 + (t2391 * t2428 + t2392 * t2429 + t2393 * t2430) * t2795 + (t2404 * t2608 + t2406 * t2607 + t2408 * t2606 + (-t2523 - t2519 - t2515 + (t2379 * t2544 + t2381 * t2541 + t2383 * t2538) * t2475) * t2473) * MDP(12) + (t2404 * t2485 + t2406 * t2484 + t2408 * t2483 + (-t2769 - t2766 - t2763 + (-t2379 * t2488 - t2381 * t2487 - t2383 * t2486) * t2475) * t2473) * MDP(13); t2342 + (t2362 * t2669 + t2364 * t2665 + t2366 * t2661) * MDP(5) + (-t2362 * t2422 - t2364 * t2423 - t2366 * t2424) * MDP(6) + (-t2344 * t2780 - t2346 * t2779 - t2348 * t2781) * MDP(12) + (-t2350 * t2781 - t2352 * t2780 - t2354 * t2779) * t2721 + ((t2368 * t2781 + t2370 * t2780 + t2372 * t2779) * MDP(4) + (t2368 * t2671 + t2370 * t2667 + t2372 * t2663) * MDP(7) + (t2368 * t2545 + t2370 * t2542 + t2372 * t2539) * t2809 + ((t2425 * t2553 + t2426 * t2550 + t2427 * t2547) * MDP(9) + (t2425 * t2787 + t2426 * t2786 + t2427 * t2785) * MDP(10)) * t2474 + ((t2368 * t2787 + t2370 * t2786 + t2372 * t2785) * MDP(4) + (t2405 * t2496 + t2407 * t2493 + t2409 * t2490) * MDP(5) + (-t2405 * t2679 - t2407 * t2676 - t2409 * t2673) * MDP(6) + (t2368 * t2680 + t2370 * t2677 + t2372 * t2674) * MDP(7) + (t2368 * t2552 + t2370 * t2549 + t2372 * t2546) * t2809 + (t2432 * t2535 + t2435 * t2531 + t2438 * t2527) * MDP(9) + (t2432 * t2778 + t2435 * t2775 + t2438 * t2772) * MDP(10) + (t2405 * t2554 + t2407 * t2551 + t2409 * t2548) * MDP(12) + (-t2405 * t2482 - t2407 * t2481 - t2409 * t2480) * MDP(13)) * t2473) * t2475; t2341 + (t2361 * t2669 + t2363 * t2665 + t2365 * t2661) * MDP(5) + (-t2361 * t2422 - t2363 * t2423 - t2365 * t2424) * MDP(6) + (-t2343 * t2780 - t2345 * t2779 - t2347 * t2781) * MDP(12) + (-t2349 * t2781 - t2351 * t2780 - t2353 * t2779) * t2721 + ((t2367 * t2781 + t2369 * t2780 + t2371 * t2779) * MDP(4) + (t2367 * t2671 + t2369 * t2667 + t2371 * t2663) * MDP(7) + (t2367 * t2545 + t2369 * t2542 + t2371 * t2539) * t2809 + ((t2428 * t2553 + t2429 * t2550 + t2430 * t2547) * MDP(9) + (t2428 * t2787 + t2429 * t2786 + t2430 * t2785) * MDP(10)) * t2474 + ((t2367 * t2787 + t2369 * t2786 + t2371 * t2785) * MDP(4) + (t2404 * t2496 + t2406 * t2493 + t2408 * t2490) * MDP(5) + (-t2404 * t2679 - t2406 * t2676 - t2408 * t2673) * MDP(6) + (t2367 * t2680 + t2369 * t2677 + t2371 * t2674) * MDP(7) + (t2367 * t2552 + t2369 * t2549 + t2371 * t2546) * t2809 + (t2432 * t2523 + t2435 * t2519 + t2438 * t2515) * MDP(9) + (t2432 * t2769 + t2435 * t2766 + t2438 * t2763) * MDP(10) + (t2404 * t2554 + t2406 * t2551 + t2408 * t2548) * MDP(12) + (-t2404 * t2482 - t2406 * t2481 - t2408 * t2480) * MDP(13)) * t2473) * t2475; (t2388 * t2669 + t2389 * t2665 + t2390 * t2661) * MDP(5) + (-t2388 * t2422 - t2389 * t2423 - t2390 * t2424) * MDP(6) + 0.2e1 * (t2385 * t2464 * t2669 + t2386 * t2467 * t2665 + t2387 * t2470 * t2661) * MDP(12) + (-t2422 * t2587 - t2423 * t2586 - t2424 * t2585) * t2721 + MDP(14) + (t2422 ^ 2 * t2433 + t2423 ^ 2 * t2436 + t2424 ^ 2 * t2439) * t2799 + ((t2391 * t2781 + t2392 * t2780 + t2393 * t2779) * MDP(4) + (t2391 * t2671 + t2392 * t2667 + t2393 * t2663) * MDP(7) + (t2391 * t2545 + t2392 * t2542 + t2393 * t2539) * t2809 + ((t2391 * t2787 + t2392 * t2786 + t2393 * t2785) * MDP(4) + (t2491 + t2494 + t2497) * MDP(5) + (-t2422 * t2787 - t2423 * t2786 - t2424 * t2785) * MDP(6) + (t2391 * t2680 + t2392 * t2677 + t2393 * t2674) * MDP(7) + (t2391 * t2552 + t2392 * t2549 + t2393 * t2546) * t2809 + (t2464 * t2497 + t2467 * t2494 + t2470 * t2491) * MDP(12) + (-t2422 * t2495 - t2423 * t2492 - t2424 * t2489) * MDP(13)) * t2473) * t2475;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
