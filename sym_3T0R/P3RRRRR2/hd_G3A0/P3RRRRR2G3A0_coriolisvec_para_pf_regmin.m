% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3x14]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:13
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR2G3A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G3A0_coriolisvec_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR2G3A0_coriolisvec_para_pf_regmin: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G3A0_coriolisvec_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G3A0_coriolisvec_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G3A0_coriolisvec_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G3A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:12:24
% EndTime: 2020-03-09 21:12:33
% DurationCPUTime: 9.30s
% Computational Cost: add. (29522->458), mult. (75753->1027), div. (11562->23), fcn. (70041->27), ass. (0->451)
t1153 = sin(qJ(1,3) + qJ(2,3));
t1204 = cos(qJ(3,3));
t1176 = 0.1e1 / t1204 ^ 2;
t1555 = t1153 * t1176;
t1154 = sin(qJ(1,2) + qJ(2,2));
t1207 = cos(qJ(3,2));
t1182 = 0.1e1 / t1207 ^ 2;
t1554 = t1154 * t1182;
t1155 = sin(qJ(1,1) + qJ(2,1));
t1210 = cos(qJ(3,1));
t1188 = 0.1e1 / t1210 ^ 2;
t1553 = t1155 * t1188;
t1195 = sin(qJ(3,3));
t1162 = t1195 ^ 2;
t1174 = t1204 ^ 2;
t1178 = 0.1e1 / t1174 ^ 2;
t1552 = t1162 * t1178;
t1196 = sin(qJ(2,3));
t1164 = 0.1e1 / t1196 ^ 2;
t1205 = cos(qJ(2,3));
t1551 = t1164 * t1205;
t1198 = sin(qJ(3,2));
t1166 = t1198 ^ 2;
t1180 = t1207 ^ 2;
t1184 = 0.1e1 / t1180 ^ 2;
t1550 = t1166 * t1184;
t1199 = sin(qJ(2,2));
t1168 = 0.1e1 / t1199 ^ 2;
t1208 = cos(qJ(2,2));
t1549 = t1168 * t1208;
t1201 = sin(qJ(3,1));
t1170 = t1201 ^ 2;
t1186 = t1210 ^ 2;
t1190 = 0.1e1 / t1186 ^ 2;
t1548 = t1170 * t1190;
t1202 = sin(qJ(2,1));
t1172 = 0.1e1 / t1202 ^ 2;
t1211 = cos(qJ(2,1));
t1547 = t1172 * t1211;
t1203 = sin(qJ(1,1));
t1212 = cos(qJ(1,1));
t1213 = xDP(3);
t1194 = legFrame(1,2);
t1158 = sin(t1194);
t1161 = cos(t1194);
t1214 = xDP(2);
t1215 = xDP(1);
t1250 = t1158 * t1214 - t1161 * t1215;
t1445 = t1203 * t1213;
t1137 = t1158 * t1215 + t1161 * t1214;
t1447 = t1201 * t1137;
t1113 = ((t1250 * t1203 - t1212 * t1213) * t1202 - t1211 * (t1250 * t1212 + t1445)) * t1210 + t1447;
t1142 = t1203 * t1202 - t1212 * t1211;
t1143 = t1212 * t1202 + t1203 * t1211;
t1424 = pkin(1) * t1201 * t1211;
t1529 = pkin(2) * t1215;
t1530 = pkin(2) * t1214;
t1534 = pkin(2) * t1186;
t1537 = pkin(1) * t1215;
t1538 = pkin(1) * t1214;
t1104 = (-t1250 * t1142 + t1143 * t1213) * t1534 + ((-t1201 * t1530 - t1212 * t1537) * t1161 + (-t1201 * t1529 + t1212 * t1538) * t1158 + pkin(1) * t1445) * t1210 - t1137 * t1424;
t1171 = 0.1e1 / t1202;
t1217 = 0.1e1 / pkin(2);
t1220 = 0.1e1 / pkin(1);
t1441 = t1217 * t1220;
t1356 = t1171 * t1441;
t1101 = t1104 * t1188 * t1356;
t1187 = 0.1e1 / t1210;
t1462 = t1171 * t1187;
t1107 = t1113 * t1220 * t1462;
t1098 = t1107 + t1101;
t1189 = t1187 / t1186;
t1289 = t1189 * t1356;
t1487 = t1137 * t1217;
t1364 = t1211 * t1487;
t1446 = t1201 * t1202;
t1238 = ((-pkin(1) * t1098 * t1446 + t1137 * t1187) * t1210 + pkin(1) * t1187 * t1364) * t1137 * t1289;
t1352 = t1187 * t1446;
t1442 = t1210 * t1211;
t1454 = t1189 * t1217;
t1502 = t1098 * t1186;
t1328 = (pkin(2) * t1502 + (t1098 * t1442 - t1352 * t1487) * pkin(1)) * t1104 * t1454;
t1216 = pkin(2) ^ 2;
t1543 = 0.2e1 * pkin(2);
t1397 = (t1216 * t1502 + ((t1107 + t1101 / 0.2e1) * t1442 * t1543 + (t1113 * t1171 - t1137 * t1446) * t1187) * pkin(1)) * t1217 * t1188;
t1221 = 0.1e1 / pkin(1) ^ 2;
t1460 = t1172 * t1221;
t1355 = t1187 * t1460;
t1083 = t1098 * t1104 * t1355;
t1134 = t1137 ^ 2;
t1128 = t1134 * t1289;
t1432 = t1083 + t1128;
t1461 = t1171 * t1211;
t1357 = t1187 * t1461;
t1531 = pkin(2) * t1210;
t1086 = -t1098 * t1531 - t1113 * t1357;
t1511 = t1086 * t1187;
t1056 = -t1238 / 0.2e1 + (-t1328 / 0.2e1 + (-t1511 - t1397 / 0.2e1) * t1113) * t1460 + t1432;
t1218 = 0.1e1 / pkin(2) ^ 2;
t1490 = t1134 * t1218;
t1283 = t1188 * t1490 / 0.2e1;
t1542 = t1218 / 0.2e1;
t1080 = t1283 + (t1190 * t1104 * t1542 + t1113 * t1454) * t1104 * t1460;
t1286 = t1098 * t1364;
t1546 = 0.2e1 * t1171 * ((t1056 * t1211 + t1202 * t1283) * t1201 - t1080 * t1446 + t1286);
t1200 = sin(qJ(1,2));
t1209 = cos(qJ(1,2));
t1193 = legFrame(2,2);
t1157 = sin(t1193);
t1160 = cos(t1193);
t1251 = t1157 * t1214 - t1160 * t1215;
t1448 = t1200 * t1213;
t1136 = t1157 * t1215 + t1160 * t1214;
t1450 = t1198 * t1136;
t1112 = ((t1251 * t1200 - t1209 * t1213) * t1199 - t1208 * (t1251 * t1209 + t1448)) * t1207 + t1450;
t1140 = t1200 * t1199 - t1209 * t1208;
t1141 = t1209 * t1199 + t1200 * t1208;
t1425 = pkin(1) * t1198 * t1208;
t1535 = pkin(2) * t1180;
t1103 = (-t1251 * t1140 + t1141 * t1213) * t1535 + ((-t1198 * t1530 - t1209 * t1537) * t1160 + (-t1198 * t1529 + t1209 * t1538) * t1157 + pkin(1) * t1448) * t1207 - t1136 * t1425;
t1167 = 0.1e1 / t1199;
t1359 = t1167 * t1441;
t1100 = t1103 * t1182 * t1359;
t1181 = 0.1e1 / t1207;
t1466 = t1167 * t1181;
t1106 = t1112 * t1220 * t1466;
t1097 = t1106 + t1100;
t1183 = t1181 / t1180;
t1290 = t1183 * t1359;
t1488 = t1136 * t1217;
t1365 = t1208 * t1488;
t1449 = t1198 * t1199;
t1239 = ((-pkin(1) * t1097 * t1449 + t1136 * t1181) * t1207 + pkin(1) * t1181 * t1365) * t1136 * t1290;
t1353 = t1181 * t1449;
t1443 = t1207 * t1208;
t1456 = t1183 * t1217;
t1504 = t1097 * t1180;
t1329 = (pkin(2) * t1504 + (t1097 * t1443 - t1353 * t1488) * pkin(1)) * t1103 * t1456;
t1398 = (t1216 * t1504 + ((t1106 + t1100 / 0.2e1) * t1443 * t1543 + (t1112 * t1167 - t1136 * t1449) * t1181) * pkin(1)) * t1217 * t1182;
t1464 = t1168 * t1221;
t1358 = t1181 * t1464;
t1082 = t1097 * t1103 * t1358;
t1133 = t1136 ^ 2;
t1127 = t1133 * t1290;
t1433 = t1082 + t1127;
t1465 = t1167 * t1208;
t1360 = t1181 * t1465;
t1532 = pkin(2) * t1207;
t1085 = -t1097 * t1532 - t1112 * t1360;
t1512 = t1085 * t1181;
t1055 = -t1239 / 0.2e1 + (-t1329 / 0.2e1 + (-t1512 - t1398 / 0.2e1) * t1112) * t1464 + t1433;
t1492 = t1133 * t1218;
t1284 = t1182 * t1492 / 0.2e1;
t1079 = t1284 + (t1184 * t1103 * t1542 + t1112 * t1456) * t1103 * t1464;
t1287 = t1097 * t1365;
t1545 = 0.2e1 * t1167 * ((t1055 * t1208 + t1199 * t1284) * t1198 - t1079 * t1449 + t1287);
t1197 = sin(qJ(1,3));
t1206 = cos(qJ(1,3));
t1192 = legFrame(3,2);
t1156 = sin(t1192);
t1159 = cos(t1192);
t1252 = t1156 * t1214 - t1159 * t1215;
t1451 = t1197 * t1213;
t1135 = t1156 * t1215 + t1159 * t1214;
t1453 = t1195 * t1135;
t1111 = ((t1252 * t1197 - t1206 * t1213) * t1196 - t1205 * (t1252 * t1206 + t1451)) * t1204 + t1453;
t1138 = t1197 * t1196 - t1206 * t1205;
t1139 = t1206 * t1196 + t1197 * t1205;
t1426 = pkin(1) * t1195 * t1205;
t1536 = pkin(2) * t1174;
t1102 = (-t1252 * t1138 + t1139 * t1213) * t1536 + ((-t1195 * t1530 - t1206 * t1537) * t1159 + (-t1195 * t1529 + t1206 * t1538) * t1156 + pkin(1) * t1451) * t1204 - t1135 * t1426;
t1163 = 0.1e1 / t1196;
t1362 = t1163 * t1441;
t1099 = t1102 * t1176 * t1362;
t1175 = 0.1e1 / t1204;
t1470 = t1163 * t1175;
t1105 = t1111 * t1220 * t1470;
t1096 = t1105 + t1099;
t1177 = t1175 / t1174;
t1291 = t1177 * t1362;
t1489 = t1135 * t1217;
t1366 = t1205 * t1489;
t1452 = t1195 * t1196;
t1240 = ((-pkin(1) * t1096 * t1452 + t1135 * t1175) * t1204 + pkin(1) * t1175 * t1366) * t1135 * t1291;
t1354 = t1175 * t1452;
t1444 = t1204 * t1205;
t1458 = t1177 * t1217;
t1506 = t1096 * t1174;
t1330 = (pkin(2) * t1506 + (t1096 * t1444 - t1354 * t1489) * pkin(1)) * t1102 * t1458;
t1399 = (t1216 * t1506 + ((t1105 + t1099 / 0.2e1) * t1444 * t1543 + (t1111 * t1163 - t1135 * t1452) * t1175) * pkin(1)) * t1217 * t1176;
t1468 = t1164 * t1221;
t1361 = t1175 * t1468;
t1081 = t1096 * t1102 * t1361;
t1132 = t1135 ^ 2;
t1126 = t1132 * t1291;
t1434 = t1081 + t1126;
t1469 = t1163 * t1205;
t1363 = t1175 * t1469;
t1533 = pkin(2) * t1204;
t1084 = -t1096 * t1533 - t1111 * t1363;
t1513 = t1084 * t1175;
t1054 = -t1240 / 0.2e1 + (-t1330 / 0.2e1 + (-t1513 - t1399 / 0.2e1) * t1111) * t1468 + t1434;
t1494 = t1132 * t1218;
t1285 = t1176 * t1494 / 0.2e1;
t1078 = t1285 + (t1178 * t1102 * t1542 + t1111 * t1458) * t1102 * t1468;
t1288 = t1096 * t1366;
t1544 = 0.2e1 * t1163 * ((t1054 * t1205 + t1196 * t1285) * t1195 - t1078 * t1452 + t1288);
t1541 = pkin(1) * t1206;
t1540 = pkin(1) * t1209;
t1539 = pkin(1) * t1212;
t1057 = -t1239 + 0.2e1 * t1082 + 0.2e1 * t1127 + (-t1329 + (-t1398 - 0.2e1 * t1512) * t1112) * t1464;
t1528 = t1057 * t1181;
t1058 = -t1240 + (-t1330 + (-t1399 - t1513) * t1111) * t1468 + t1434;
t1527 = t1058 * t1176;
t1526 = t1058 * t1195;
t1059 = -t1240 + 0.2e1 * t1081 + 0.2e1 * t1126 + (-t1330 + (-t1399 - 0.2e1 * t1513) * t1111) * t1468;
t1525 = t1059 * t1175;
t1060 = -t1239 + (-t1329 + (-t1398 - t1512) * t1112) * t1464 + t1433;
t1524 = t1060 * t1182;
t1523 = t1060 * t1198;
t1061 = -t1238 + (-t1328 + (-t1397 - t1511) * t1113) * t1460 + t1432;
t1522 = t1061 * t1188;
t1521 = t1061 * t1201;
t1062 = -t1238 + 0.2e1 * t1083 + 0.2e1 * t1128 + (-t1328 + (-t1397 - 0.2e1 * t1511) * t1113) * t1460;
t1520 = t1062 * t1187;
t1063 = -t1084 * t1111 * t1361 + t1434;
t1519 = t1063 * t1176;
t1518 = t1063 * t1196;
t1064 = -t1085 * t1112 * t1358 + t1433;
t1517 = t1064 * t1182;
t1516 = t1064 * t1199;
t1065 = -t1086 * t1113 * t1355 + t1432;
t1515 = t1065 * t1188;
t1514 = t1065 * t1202;
t1510 = (t1099 + 0.2e1 * t1105) * t1102;
t1509 = (t1100 + 0.2e1 * t1106) * t1103;
t1508 = (t1101 + 0.2e1 * t1107) * t1104;
t1507 = t1096 * t1135;
t1505 = t1097 * t1136;
t1503 = t1098 * t1137;
t1108 = t1111 ^ 2;
t1501 = t1108 * t1164;
t1109 = t1112 ^ 2;
t1500 = t1109 * t1168;
t1110 = t1113 ^ 2;
t1499 = t1110 * t1172;
t1129 = t1197 * pkin(1) + t1139 * t1533;
t1498 = t1129 * t1175;
t1130 = t1200 * pkin(1) + t1141 * t1532;
t1497 = t1130 * t1181;
t1131 = t1203 * pkin(1) + t1143 * t1531;
t1496 = t1131 * t1187;
t1495 = t1132 * t1163;
t1493 = t1133 * t1167;
t1491 = t1134 * t1171;
t1486 = t1138 * t1204;
t1485 = t1140 * t1207;
t1484 = t1142 * t1210;
t1483 = t1153 * t1059;
t1482 = t1153 * t1163;
t1481 = t1154 * t1057;
t1480 = t1154 * t1167;
t1479 = t1155 * t1062;
t1478 = t1155 * t1171;
t1477 = t1156 * t1195;
t1476 = t1157 * t1198;
t1475 = t1158 * t1201;
t1474 = t1159 * t1195;
t1473 = t1160 * t1198;
t1472 = t1161 * t1201;
t1471 = t1162 * t1177;
t1467 = t1166 * t1183;
t1463 = t1170 * t1189;
t1459 = t1175 * t1195;
t1457 = t1181 * t1198;
t1455 = t1187 * t1201;
t1437 = -0.2e1 * t1054 * t1444 + 0.2e1 * t1288 * t1459 + (0.2e1 * t1078 * t1204 + t1471 * t1494) * t1196;
t1436 = -0.2e1 * t1055 * t1443 + 0.2e1 * t1287 * t1457 + (0.2e1 * t1079 * t1207 + t1467 * t1492) * t1199;
t1435 = -0.2e1 * t1056 * t1442 + 0.2e1 * t1286 * t1455 + (0.2e1 * t1080 * t1210 + t1463 * t1490) * t1202;
t1428 = 0.2e1 * t1218;
t1427 = 0.4e1 * t1218;
t1423 = t1138 * t1536;
t1422 = t1140 * t1535;
t1421 = t1142 * t1534;
t1420 = t1058 * t1498;
t1419 = t1058 * t1482;
t1418 = t1162 * t1527;
t1417 = t1163 * t1527;
t1416 = t1163 * t1526;
t1415 = t1058 * t1459;
t1414 = t1060 * t1497;
t1413 = t1060 * t1480;
t1412 = t1166 * t1524;
t1411 = t1167 * t1524;
t1410 = t1167 * t1523;
t1409 = t1060 * t1457;
t1408 = t1061 * t1496;
t1407 = t1061 * t1478;
t1406 = t1170 * t1522;
t1405 = t1171 * t1522;
t1404 = t1171 * t1521;
t1403 = t1061 * t1455;
t1402 = t1063 * t1469;
t1401 = t1064 * t1465;
t1400 = t1065 * t1461;
t1090 = t1096 ^ 2;
t1396 = t1090 * (-0.2e1 * t1174 + 0.1e1) * t1175;
t1091 = t1097 ^ 2;
t1395 = t1091 * (-0.2e1 * t1180 + 0.1e1) * t1181;
t1092 = t1098 ^ 2;
t1394 = t1092 * (-0.2e1 * t1186 + 0.1e1) * t1187;
t1393 = t1163 * t1510;
t1392 = t1167 * t1509;
t1391 = t1171 * t1508;
t1390 = t1176 * t1507;
t1389 = t1182 * t1505;
t1388 = t1188 * t1503;
t1387 = t1176 * t1501;
t1386 = t1177 * t1501;
t1385 = t1178 * t1501;
t1384 = t1108 * t1163 * t1551;
t1383 = t1182 * t1500;
t1382 = t1183 * t1500;
t1381 = t1184 * t1500;
t1380 = t1109 * t1167 * t1549;
t1379 = t1188 * t1499;
t1378 = t1189 * t1499;
t1377 = t1190 * t1499;
t1376 = t1110 * t1171 * t1547;
t1120 = t1156 * t1486 + t1474;
t1375 = t1120 * t1470;
t1121 = -t1159 * t1486 + t1477;
t1374 = t1121 * t1470;
t1122 = t1157 * t1485 + t1473;
t1373 = t1122 * t1466;
t1123 = -t1160 * t1485 + t1476;
t1372 = t1123 * t1466;
t1124 = t1158 * t1484 + t1472;
t1371 = t1124 * t1462;
t1125 = -t1161 * t1484 + t1475;
t1370 = t1125 * t1462;
t1369 = t1132 * t1178 * t1195;
t1368 = t1133 * t1184 * t1198;
t1367 = t1134 * t1190 * t1201;
t1351 = 0.2e1 * t1416;
t1350 = 0.2e1 * t1415;
t1349 = 0.2e1 * t1410;
t1348 = 0.2e1 * t1409;
t1347 = 0.2e1 * t1404;
t1346 = 0.2e1 * t1403;
t1345 = -0.2e1 * t1153 * t1507;
t1344 = -0.2e1 * t1154 * t1505;
t1343 = -0.2e1 * t1155 * t1503;
t1342 = t1057 * t1360;
t1341 = t1059 * t1363;
t1340 = t1062 * t1357;
t1339 = t1063 * t1363;
t1338 = t1176 * t1402;
t1337 = t1063 * t1354;
t1336 = t1064 * t1360;
t1335 = t1182 * t1401;
t1334 = t1064 * t1353;
t1333 = t1065 * t1357;
t1332 = t1188 * t1400;
t1331 = t1065 * t1352;
t1327 = t1177 * t1393;
t1326 = t1510 * t1551;
t1325 = t1183 * t1392;
t1324 = t1509 * t1549;
t1323 = t1189 * t1391;
t1322 = t1508 * t1547;
t1321 = t1163 * t1390;
t1320 = t1096 * t1175 * t1453;
t1319 = t1167 * t1389;
t1318 = t1097 * t1181 * t1450;
t1317 = t1171 * t1388;
t1316 = t1098 * t1187 * t1447;
t1315 = t1205 * t1387;
t1314 = t1195 * t1386;
t1313 = t1178 * t1384;
t1312 = t1208 * t1383;
t1311 = t1198 * t1382;
t1310 = t1184 * t1380;
t1309 = t1211 * t1379;
t1308 = t1201 * t1378;
t1307 = t1190 * t1376;
t1114 = -t1156 * t1423 + (-pkin(2) * t1474 + t1156 * t1541) * t1204 - t1159 * t1426;
t1306 = t1114 * t1385;
t1115 = -t1157 * t1422 + (-pkin(2) * t1473 + t1157 * t1540) * t1207 - t1160 * t1425;
t1305 = t1115 * t1381;
t1116 = -t1158 * t1421 + (-pkin(2) * t1472 + t1158 * t1539) * t1210 - t1161 * t1424;
t1304 = t1116 * t1377;
t1117 = t1159 * t1423 + (-pkin(2) * t1477 - t1159 * t1541) * t1204 - t1156 * t1426;
t1303 = t1117 * t1385;
t1118 = t1160 * t1422 + (-pkin(2) * t1476 - t1160 * t1540) * t1207 - t1157 * t1425;
t1302 = t1118 * t1381;
t1119 = t1161 * t1421 + (-pkin(2) * t1475 - t1161 * t1539) * t1210 - t1158 * t1424;
t1301 = t1119 * t1377;
t1300 = t1058 * t1375;
t1299 = t1058 * t1374;
t1298 = t1060 * t1373;
t1297 = t1060 * t1372;
t1296 = t1061 * t1371;
t1295 = t1061 * t1370;
t1294 = t1129 * t1402;
t1293 = t1130 * t1401;
t1292 = t1131 * t1400;
t1282 = t1437 * t1470;
t1281 = t1436 * t1466;
t1280 = t1435 * t1462;
t1147 = t1174 - 0.1e1 / 0.2e1;
t1279 = 0.4e1 * t1147 * t1390;
t1278 = 0.2e1 * t1320;
t1148 = t1180 - 0.1e1 / 0.2e1;
t1277 = 0.4e1 * t1148 * t1389;
t1276 = 0.2e1 * t1318;
t1149 = t1186 - 0.1e1 / 0.2e1;
t1275 = 0.4e1 * t1149 * t1388;
t1274 = 0.2e1 * t1316;
t1273 = t1175 * t1294;
t1272 = t1181 * t1293;
t1271 = t1187 * t1292;
t1270 = t1177 * t1326;
t1269 = t1183 * t1324;
t1268 = t1189 * t1322;
t1267 = t1147 * t1163 * t1177 * t1507;
t1266 = t1195 * t1321;
t1265 = t1148 * t1167 * t1183 * t1505;
t1264 = t1198 * t1319;
t1263 = t1149 * t1171 * t1189 * t1503;
t1262 = t1201 * t1317;
t1261 = t1205 * t1314;
t1260 = t1208 * t1311;
t1259 = t1211 * t1308;
t1258 = t1114 * t1338;
t1257 = t1115 * t1335;
t1256 = t1116 * t1332;
t1255 = t1117 * t1338;
t1254 = t1118 * t1335;
t1253 = t1119 * t1332;
t1249 = t1175 * t1544;
t1248 = t1181 * t1545;
t1247 = t1187 * t1546;
t1246 = (t1176 + t1552) * t1495;
t1245 = (t1175 * t1552 + t1177) * t1495;
t1244 = (t1182 + t1550) * t1493;
t1243 = (t1181 * t1550 + t1183) * t1493;
t1242 = (t1188 + t1548) * t1491;
t1241 = (t1187 * t1548 + t1189) * t1491;
t1219 = t1217 / t1216;
t1 = [(t1063 * t1374 + t1064 * t1372 + t1065 * t1370) * t1220, 0, 0, (t1299 + t1297 + t1295 + (t1117 * t1417 + t1118 * t1411 + t1119 * t1405) * t1217) * t1220, t1123 * t1342 + t1121 * t1341 + t1125 * t1340 + (t1255 + t1254 + t1253 + (t1301 + t1302 + t1303) * t1221 + (-t1121 * t1327 - t1123 * t1325 - t1125 * t1323) * t1220) * t1217, -t1123 * t1528 - t1121 * t1525 - t1125 * t1520 + (-t1117 * t1519 - t1118 * t1517 - t1119 * t1515 + (t1117 * t1313 + t1118 * t1310 + t1119 * t1307) * t1221 + (-t1121 * t1270 - t1123 * t1269 - t1125 * t1268) * t1220) * t1217, (-t1090 * t1477 - t1091 * t1476 - t1092 * t1475) * t1217 + (t1162 * t1299 + t1166 * t1297 + t1170 * t1295 + (t1117 * t1266 + t1118 * t1264 + t1119 * t1262) * t1428 + ((t1119 * t1406 + t1125 * t1274) * t1171 + (t1118 * t1412 + t1123 * t1276) * t1167 + (t1117 * t1418 + t1121 * t1278) * t1163) * t1217) * t1220, (t1156 * t1396 + t1157 * t1395 + t1158 * t1394) * t1217 + (t1121 * t1351 + t1123 * t1349 + t1125 * t1347 + (t1117 * t1267 + t1118 * t1265 + t1119 * t1263) * t1427 + ((t1119 * t1346 + t1125 * t1275) * t1171 + (t1118 * t1348 + t1123 * t1277) * t1167 + (t1117 * t1350 + t1121 * t1279) * t1163) * t1217) * t1220, (t1156 * t1415 + t1157 * t1409 + t1158 * t1403) * t1217 + ((t1117 * t1245 + t1118 * t1243 + t1119 * t1241) * t1219 + (t1121 * t1246 + t1123 * t1244 + t1125 * t1242) * t1218) * t1220, (t1058 * t1156 + t1060 * t1157 + t1061 * t1158) * t1217, (t1156 * t1369 + t1157 * t1368 + t1158 * t1367) * t1219, -t1125 * t1280 - t1123 * t1281 - t1121 * t1282 + (t1117 * t1339 + t1118 * t1336 + t1119 * t1333 + (t1117 * t1386 + t1118 * t1382 + t1119 * t1378) * t1221 + (t1156 * t1261 + t1157 * t1260 + t1158 * t1259) * t1220 + (-t1156 * t1337 - t1157 * t1334 - t1158 * t1331) * pkin(1)) * t1217, -t1125 * t1247 - t1123 * t1248 - t1121 * t1249 + (-t1195 * t1255 - t1198 * t1254 - t1201 * t1253 + (-t1195 * t1303 - t1198 * t1302 - t1201 * t1301) * t1221 + (t1156 * t1315 + t1157 * t1312 + t1158 * t1309) * t1220 + (-t1156 * t1518 - t1157 * t1516 - t1158 * t1514) * pkin(1)) * t1217, 0; (t1063 * t1375 + t1064 * t1373 + t1065 * t1371) * t1220, 0, 0, (t1300 + t1298 + t1296 + (t1114 * t1417 + t1115 * t1411 + t1116 * t1405) * t1217) * t1220, t1122 * t1342 + t1120 * t1341 + t1124 * t1340 + (t1258 + t1257 + t1256 + (t1304 + t1305 + t1306) * t1221 + (-t1120 * t1327 - t1122 * t1325 - t1124 * t1323) * t1220) * t1217, -t1122 * t1528 - t1120 * t1525 - t1124 * t1520 + (-t1114 * t1519 - t1115 * t1517 - t1116 * t1515 + (t1114 * t1313 + t1115 * t1310 + t1116 * t1307) * t1221 + (-t1120 * t1270 - t1122 * t1269 - t1124 * t1268) * t1220) * t1217, (-t1090 * t1474 - t1091 * t1473 - t1092 * t1472) * t1217 + (t1162 * t1300 + t1166 * t1298 + t1170 * t1296 + (t1114 * t1266 + t1115 * t1264 + t1116 * t1262) * t1428 + ((t1116 * t1406 + t1124 * t1274) * t1171 + (t1115 * t1412 + t1122 * t1276) * t1167 + (t1114 * t1418 + t1120 * t1278) * t1163) * t1217) * t1220, (t1159 * t1396 + t1160 * t1395 + t1161 * t1394) * t1217 + (t1120 * t1351 + t1122 * t1349 + t1124 * t1347 + (t1114 * t1267 + t1115 * t1265 + t1116 * t1263) * t1427 + ((t1116 * t1346 + t1124 * t1275) * t1171 + (t1115 * t1348 + t1122 * t1277) * t1167 + (t1114 * t1350 + t1120 * t1279) * t1163) * t1217) * t1220, (t1159 * t1415 + t1160 * t1409 + t1161 * t1403) * t1217 + ((t1114 * t1245 + t1115 * t1243 + t1116 * t1241) * t1219 + (t1120 * t1246 + t1122 * t1244 + t1124 * t1242) * t1218) * t1220, (t1058 * t1159 + t1060 * t1160 + t1061 * t1161) * t1217, (t1159 * t1369 + t1160 * t1368 + t1161 * t1367) * t1219, -t1124 * t1280 - t1122 * t1281 - t1120 * t1282 + (t1114 * t1339 + t1115 * t1336 + t1116 * t1333 + (t1114 * t1386 + t1115 * t1382 + t1116 * t1378) * t1221 + (t1159 * t1261 + t1160 * t1260 + t1161 * t1259) * t1220 + (-t1159 * t1337 - t1160 * t1334 - t1161 * t1331) * pkin(1)) * t1217, -t1124 * t1247 - t1122 * t1248 - t1120 * t1249 + (-t1195 * t1258 - t1198 * t1257 - t1201 * t1256 + (-t1195 * t1306 - t1198 * t1305 - t1201 * t1304) * t1221 + (t1159 * t1315 + t1160 * t1312 + t1161 * t1309) * t1220 + (-t1159 * t1518 - t1160 * t1516 - t1161 * t1514) * pkin(1)) * t1217, 0; (-t1063 * t1482 - t1064 * t1480 - t1065 * t1478) * t1220, 0, 0, (-t1419 - t1413 - t1407 + (t1163 * t1420 + t1167 * t1414 + t1171 * t1408) * t1217) * t1220, -t1465 * t1481 - t1469 * t1483 - t1461 * t1479 + (t1273 + t1272 + t1271 + (t1129 * t1386 + t1130 * t1382 + t1131 * t1378) * t1221 + (t1391 * t1553 + t1392 * t1554 + t1393 * t1555) * t1220) * t1217, t1481 + t1483 + t1479 + (-t1063 * t1498 - t1064 * t1497 - t1065 * t1496 + (t1129 * t1177 * t1384 + t1130 * t1183 * t1380 + t1131 * t1189 * t1376) * t1221 + (t1322 * t1553 + t1324 * t1554 + t1326 * t1555) * t1220) * t1217, (-t1162 * t1419 - t1166 * t1413 - t1170 * t1407 + (t1129 * t1163 * t1320 + t1130 * t1167 * t1318 + t1131 * t1171 * t1316) * t1428 + ((t1170 * t1408 + t1201 * t1343) * t1171 + (t1166 * t1414 + t1198 * t1344) * t1167 + (t1162 * t1420 + t1195 * t1345) * t1163) * t1217) * t1220, 0.2e1 * (-t1153 * t1204 * t1416 - t1154 * t1207 * t1410 - t1155 * t1210 * t1404 + (t1129 * t1147 * t1321 + t1130 * t1148 * t1319 + t1131 * t1149 * t1317) * t1428 + ((t1149 * t1187 * t1343 + t1131 * t1521) * t1171 + (t1148 * t1181 * t1344 + t1130 * t1523) * t1167 + (t1147 * t1175 * t1345 + t1129 * t1526) * t1163) * t1217) * t1220, ((t1129 * t1246 + t1130 * t1244 + t1131 * t1242) * t1219 + ((-t1187 - t1463) * t1134 * t1478 + (-t1181 - t1467) * t1133 * t1480 + (-t1175 - t1471) * t1132 * t1482) * t1218) * t1220, 0, 0, t1435 * t1478 + t1436 * t1480 + t1437 * t1482 + (t1294 + t1293 + t1292 + (t1129 * t1387 + t1130 * t1383 + t1131 * t1379) * t1221) * t1217, t1155 * t1546 + t1154 * t1545 + t1153 * t1544 + (-t1195 * t1273 - t1198 * t1272 - t1201 * t1271 + (-t1129 * t1314 - t1130 * t1311 - t1131 * t1308) * t1221) * t1217, 0;];
tau_reg  = t1;
