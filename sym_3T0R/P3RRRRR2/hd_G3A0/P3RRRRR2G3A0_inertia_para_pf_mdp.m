% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [14x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR2G3A0_convert_par2_MPV_fixb.m

% Output:
% MMX [3x3]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:13
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P3RRRRR2G3A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1),zeros(14,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G3A0_inertia_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G3A0_inertia_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G3A0_inertia_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G3A0_inertia_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G3A0_inertia_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [14 1]), ...
  'P3RRRRR2G3A0_inertia_para_pf_mdp: MDP has to be [14x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:12:46
% EndTime: 2020-03-09 21:12:56
% DurationCPUTime: 10.30s
% Computational Cost: add. (3867->621), mult. (10295->1211), div. (3687->19), fcn. (12795->27), ass. (0->465)
t2791 = 2 * MDP(8);
t2440 = cos(qJ(3,3));
t2417 = 0.1e1 / t2440;
t2443 = cos(qJ(3,2));
t2421 = 0.1e1 / t2443;
t2446 = cos(qJ(3,1));
t2425 = 0.1e1 / t2446;
t2442 = cos(qJ(1,3));
t2790 = pkin(1) * t2442;
t2445 = cos(qJ(1,2));
t2789 = pkin(1) * t2445;
t2448 = cos(qJ(1,1));
t2788 = pkin(1) * t2448;
t2787 = MDP(1) / pkin(1) ^ 2;
t2451 = 0.1e1 / pkin(1);
t2786 = MDP(4) * t2451;
t2785 = MDP(7) * t2451;
t2449 = 0.1e1 / pkin(2);
t2784 = MDP(9) * t2449;
t2783 = MDP(10) * t2449;
t2450 = 0.1e1 / pkin(2) ^ 2;
t2782 = MDP(11) * t2450;
t2428 = legFrame(3,2);
t2401 = sin(t2428);
t2404 = cos(t2428);
t2431 = sin(qJ(3,3));
t2758 = t2404 * t2431;
t2432 = sin(qJ(2,3));
t2433 = sin(qJ(1,3));
t2441 = cos(qJ(2,3));
t2392 = t2432 * t2433 - t2442 * t2441;
t2775 = t2392 * t2440;
t2383 = t2401 * t2775 + t2758;
t2781 = t2383 * t2417;
t2767 = t2401 * t2431;
t2384 = -t2404 * t2775 + t2767;
t2780 = t2384 * t2417;
t2429 = legFrame(2,2);
t2402 = sin(t2429);
t2405 = cos(t2429);
t2434 = sin(qJ(3,2));
t2755 = t2405 * t2434;
t2435 = sin(qJ(2,2));
t2436 = sin(qJ(1,2));
t2444 = cos(qJ(2,2));
t2393 = t2435 * t2436 - t2445 * t2444;
t2774 = t2393 * t2443;
t2385 = t2402 * t2774 + t2755;
t2779 = t2385 * t2421;
t2764 = t2402 * t2434;
t2386 = -t2405 * t2774 + t2764;
t2778 = t2386 * t2421;
t2430 = legFrame(1,2);
t2403 = sin(t2430);
t2406 = cos(t2430);
t2437 = sin(qJ(3,1));
t2752 = t2406 * t2437;
t2438 = sin(qJ(2,1));
t2439 = sin(qJ(1,1));
t2447 = cos(qJ(2,1));
t2394 = t2438 * t2439 - t2448 * t2447;
t2773 = t2394 * t2446;
t2387 = t2403 * t2773 + t2752;
t2777 = t2387 * t2425;
t2761 = t2403 * t2437;
t2388 = -t2406 * t2773 + t2761;
t2776 = t2388 * t2425;
t2398 = sin(qJ(1,3) + qJ(2,3));
t2408 = 0.1e1 / t2432;
t2772 = t2398 * t2408;
t2399 = sin(qJ(1,2) + qJ(2,2));
t2411 = 0.1e1 / t2435;
t2771 = t2399 * t2411;
t2400 = sin(qJ(1,1) + qJ(2,1));
t2414 = 0.1e1 / t2438;
t2770 = t2400 * t2414;
t2769 = t2401 * t2398;
t2768 = t2401 * t2417;
t2766 = t2402 * t2399;
t2765 = t2402 * t2421;
t2763 = t2403 * t2400;
t2762 = t2403 * t2425;
t2760 = t2404 * t2398;
t2759 = t2404 * t2417;
t2757 = t2405 * t2399;
t2756 = t2405 * t2421;
t2754 = t2406 * t2400;
t2753 = t2406 * t2425;
t2751 = t2408 * t2417;
t2418 = 0.1e1 / t2440 ^ 2;
t2750 = t2408 * t2418;
t2416 = t2440 ^ 2;
t2419 = t2417 / t2416;
t2749 = t2408 * t2419;
t2748 = t2408 * t2431;
t2747 = t2408 * t2441;
t2746 = t2408 * t2451;
t2409 = 0.1e1 / t2432 ^ 2;
t2745 = t2409 * t2418;
t2744 = t2409 * t2441;
t2743 = t2411 * t2421;
t2422 = 0.1e1 / t2443 ^ 2;
t2742 = t2411 * t2422;
t2420 = t2443 ^ 2;
t2423 = t2421 / t2420;
t2741 = t2411 * t2423;
t2740 = t2411 * t2434;
t2739 = t2411 * t2444;
t2738 = t2411 * t2451;
t2412 = 0.1e1 / t2435 ^ 2;
t2737 = t2412 * t2422;
t2736 = t2412 * t2444;
t2735 = t2414 * t2425;
t2426 = 0.1e1 / t2446 ^ 2;
t2734 = t2414 * t2426;
t2424 = t2446 ^ 2;
t2427 = t2425 / t2424;
t2733 = t2414 * t2427;
t2732 = t2414 * t2437;
t2731 = t2414 * t2447;
t2730 = t2414 * t2451;
t2415 = 0.1e1 / t2438 ^ 2;
t2729 = t2415 * t2426;
t2728 = t2415 * t2447;
t2727 = t2417 * t2431;
t2726 = t2417 * t2441;
t2725 = t2418 * t2431;
t2724 = t2421 * t2434;
t2723 = t2421 * t2444;
t2722 = t2422 * t2434;
t2721 = t2425 * t2437;
t2720 = t2425 * t2447;
t2719 = t2426 * t2437;
t2718 = t2431 * t2441;
t2717 = t2432 * t2449;
t2716 = t2434 * t2444;
t2715 = t2435 * t2449;
t2714 = t2437 * t2447;
t2713 = t2438 * t2449;
t2712 = t2449 * t2451;
t2711 = t2450 * t2451;
t2710 = (t2383 * t2384 * t2745 + t2385 * t2386 * t2737 + t2387 * t2388 * t2729) * t2787 + (t2401 * t2404 * t2418 + t2402 * t2405 * t2422 + t2403 * t2406 * t2426) * t2782;
t2709 = 2 * MDP(13);
t2708 = t2451 * t2791;
t2707 = -0.2e1 * t2440 * t2441;
t2706 = -0.2e1 * t2443 * t2444;
t2705 = -0.2e1 * t2446 * t2447;
t2704 = pkin(1) * t2718;
t2703 = pkin(1) * t2716;
t2702 = pkin(1) * t2714;
t2701 = pkin(2) * t2392 * t2416;
t2700 = pkin(2) * t2393 * t2420;
t2699 = pkin(2) * t2394 * t2424;
t2358 = -t2401 * t2701 + (-pkin(2) * t2758 + t2401 * t2790) * t2440 - t2404 * t2704;
t2698 = t2358 * t2750;
t2359 = -t2402 * t2700 + (-pkin(2) * t2755 + t2402 * t2789) * t2443 - t2405 * t2703;
t2697 = t2359 * t2742;
t2360 = -t2403 * t2699 + (-pkin(2) * t2752 + t2403 * t2788) * t2446 - t2406 * t2702;
t2696 = t2360 * t2734;
t2361 = t2404 * t2701 + (-pkin(2) * t2767 - t2404 * t2790) * t2440 - t2401 * t2704;
t2695 = t2361 * t2750;
t2362 = t2405 * t2700 + (-pkin(2) * t2764 - t2405 * t2789) * t2443 - t2402 * t2703;
t2694 = t2362 * t2742;
t2363 = t2406 * t2699 + (-pkin(2) * t2761 - t2406 * t2788) * t2446 - t2403 * t2702;
t2693 = t2363 * t2734;
t2389 = pkin(2) * (t2432 * t2442 + t2433 * t2441) * t2440 + t2433 * pkin(1);
t2617 = t2408 * t2712;
t2380 = t2389 * t2417 * t2617;
t2590 = t2398 * t2746;
t2365 = -t2590 + t2380 / 0.2e1;
t2692 = t2365 * t2747;
t2390 = pkin(2) * (t2435 * t2445 + t2436 * t2444) * t2443 + t2436 * pkin(1);
t2606 = t2411 * t2712;
t2381 = t2390 * t2421 * t2606;
t2589 = t2399 * t2738;
t2366 = -t2589 + t2381 / 0.2e1;
t2691 = t2366 * t2739;
t2391 = pkin(2) * (t2438 * t2448 + t2439 * t2447) * t2446 + t2439 * pkin(1);
t2595 = t2414 * t2712;
t2382 = t2391 * t2425 * t2595;
t2588 = t2400 * t2730;
t2367 = -t2588 + t2382 / 0.2e1;
t2690 = t2367 * t2731;
t2369 = t2380 - t2590;
t2689 = t2369 * t2750;
t2371 = t2381 - t2589;
t2688 = t2371 * t2742;
t2372 = t2382 - t2588;
t2687 = t2372 * t2734;
t2686 = t2383 * t2751;
t2685 = t2383 * t2749;
t2684 = t2383 * t2748;
t2683 = t2384 * t2751;
t2682 = t2384 * t2749;
t2681 = t2384 * t2748;
t2680 = t2385 * t2743;
t2679 = t2385 * t2741;
t2678 = t2385 * t2740;
t2677 = t2386 * t2743;
t2676 = t2386 * t2741;
t2675 = t2386 * t2740;
t2674 = t2387 * t2735;
t2673 = t2387 * t2733;
t2672 = t2387 * t2732;
t2671 = t2388 * t2735;
t2670 = t2388 * t2733;
t2669 = t2388 * t2732;
t2668 = t2389 * t2751;
t2667 = t2389 * t2750;
t2666 = t2389 * t2748;
t2665 = t2390 * t2743;
t2664 = t2390 * t2742;
t2663 = t2390 * t2740;
t2662 = t2391 * t2735;
t2661 = t2391 * t2734;
t2660 = t2391 * t2732;
t2407 = t2431 ^ 2;
t2659 = t2407 * t2772;
t2658 = t2398 * t2750;
t2657 = t2398 * t2747;
t2656 = t2398 * t2409 * t2417;
t2410 = t2434 ^ 2;
t2655 = t2410 * t2771;
t2654 = t2399 * t2742;
t2653 = t2399 * t2739;
t2652 = t2399 * t2412 * t2421;
t2413 = t2437 ^ 2;
t2651 = t2413 * t2770;
t2650 = t2400 * t2734;
t2649 = t2400 * t2731;
t2648 = t2400 * t2415 * t2425;
t2647 = t2401 * t2751;
t2646 = t2401 * t2750;
t2645 = t2401 * t2727;
t2644 = t2401 * t2725;
t2643 = t2402 * t2743;
t2642 = t2402 * t2742;
t2641 = t2402 * t2724;
t2640 = t2402 * t2722;
t2639 = t2403 * t2735;
t2638 = t2403 * t2734;
t2637 = t2403 * t2721;
t2636 = t2403 * t2719;
t2635 = t2404 * t2751;
t2634 = t2404 * t2750;
t2633 = t2404 * t2727;
t2632 = t2404 * t2725;
t2631 = t2405 * t2743;
t2630 = t2405 * t2742;
t2629 = t2405 * t2724;
t2628 = t2405 * t2722;
t2627 = t2406 * t2735;
t2626 = t2406 * t2734;
t2625 = t2406 * t2721;
t2624 = t2406 * t2719;
t2623 = t2407 * t2751;
t2622 = t2407 * t2750;
t2621 = t2408 * t2727;
t2620 = t2408 * t2726;
t2619 = t2417 * t2746;
t2618 = t2419 * t2748;
t2616 = t2409 * t2726;
t2615 = t2418 * t2744;
t2614 = t2419 * t2744;
t2613 = t2409 * t2718;
t2612 = t2410 * t2743;
t2611 = t2410 * t2742;
t2610 = t2411 * t2724;
t2609 = t2411 * t2723;
t2608 = t2421 * t2738;
t2607 = t2423 * t2740;
t2605 = t2412 * t2723;
t2604 = t2422 * t2736;
t2603 = t2423 * t2736;
t2602 = t2412 * t2716;
t2601 = t2413 * t2735;
t2600 = t2413 * t2734;
t2599 = t2414 * t2721;
t2598 = t2414 * t2720;
t2597 = t2425 * t2730;
t2596 = t2427 * t2732;
t2594 = t2415 * t2720;
t2593 = t2426 * t2728;
t2592 = t2427 * t2728;
t2591 = t2415 * t2714;
t2587 = t2717 / 0.2e1;
t2586 = t2715 / 0.2e1;
t2585 = t2713 / 0.2e1;
t2584 = 0.2e1 * t2692;
t2583 = 0.2e1 * t2691;
t2582 = 0.2e1 * t2690;
t2581 = -0.2e1 * t2686;
t2580 = -0.2e1 * t2683;
t2579 = -0.2e1 * t2680;
t2578 = -0.2e1 * t2677;
t2577 = -0.2e1 * t2674;
t2576 = -0.2e1 * t2671;
t2575 = t2358 * t2622;
t2574 = t2358 * t2621;
t2573 = t2359 * t2611;
t2572 = t2359 * t2610;
t2571 = t2360 * t2600;
t2570 = t2360 * t2599;
t2569 = t2361 * t2622;
t2568 = t2361 * t2621;
t2567 = t2362 * t2611;
t2566 = t2362 * t2610;
t2565 = t2363 * t2600;
t2564 = t2363 * t2599;
t2563 = t2431 * t2692;
t2562 = t2434 * t2691;
t2561 = t2437 * t2690;
t2560 = t2369 * t2622;
t2559 = t2369 * t2621;
t2558 = t2371 * t2611;
t2557 = t2371 * t2610;
t2556 = t2372 * t2600;
t2555 = t2372 * t2599;
t2554 = t2383 * t2623;
t2553 = t2383 * t2620;
t2552 = t2383 * t2615;
t2551 = t2383 * t2614;
t2550 = t2384 * t2623;
t2549 = t2384 * t2620;
t2548 = t2384 * t2615;
t2547 = t2384 * t2614;
t2546 = t2385 * t2612;
t2545 = t2385 * t2609;
t2544 = t2385 * t2604;
t2543 = t2385 * t2603;
t2542 = t2386 * t2612;
t2541 = t2386 * t2609;
t2540 = t2386 * t2604;
t2539 = t2386 * t2603;
t2538 = t2387 * t2601;
t2537 = t2387 * t2598;
t2536 = t2387 * t2593;
t2535 = t2387 * t2592;
t2534 = t2388 * t2601;
t2533 = t2388 * t2598;
t2532 = t2388 * t2593;
t2531 = t2388 * t2592;
t2530 = t2389 * t2623;
t2529 = t2418 * t2666;
t2528 = t2389 * t2616;
t2527 = t2389 * t2615;
t2526 = t2390 * t2612;
t2525 = t2422 * t2663;
t2524 = t2390 * t2605;
t2523 = t2390 * t2604;
t2522 = t2391 * t2601;
t2521 = t2426 * t2660;
t2520 = t2391 * t2594;
t2519 = t2391 * t2593;
t2518 = t2398 * t2440 * t2748;
t2517 = t2398 * t2616;
t2516 = t2398 * t2615;
t2515 = t2399 * t2443 * t2740;
t2514 = t2399 * t2605;
t2513 = t2399 * t2604;
t2512 = t2400 * t2446 * t2732;
t2511 = t2400 * t2594;
t2510 = t2400 * t2593;
t2509 = t2401 * t2618;
t2508 = t2398 * t2645;
t2507 = t2383 * t2644;
t2506 = t2384 * t2644;
t2505 = t2402 * t2607;
t2504 = t2399 * t2641;
t2503 = t2385 * t2640;
t2502 = t2386 * t2640;
t2501 = t2403 * t2596;
t2500 = t2400 * t2637;
t2499 = t2387 * t2636;
t2498 = t2388 * t2636;
t2497 = t2404 * t2618;
t2496 = t2398 * t2633;
t2495 = t2383 * t2632;
t2494 = t2384 * t2632;
t2493 = t2405 * t2607;
t2492 = t2399 * t2629;
t2491 = t2385 * t2628;
t2490 = t2386 * t2628;
t2489 = t2406 * t2596;
t2488 = t2400 * t2625;
t2487 = t2387 * t2624;
t2486 = t2388 * t2624;
t2485 = t2418 * t2617;
t2484 = t2418 * t2613;
t2483 = t2419 * t2613;
t2482 = t2422 * t2606;
t2481 = t2422 * t2602;
t2480 = t2423 * t2602;
t2479 = t2426 * t2595;
t2478 = t2426 * t2591;
t2477 = t2427 * t2591;
t2476 = t2717 * t2727;
t2475 = t2715 * t2724;
t2474 = t2713 * t2721;
t2473 = t2383 * t2483;
t2472 = t2384 * t2483;
t2471 = t2385 * t2480;
t2470 = t2386 * t2480;
t2469 = t2387 * t2477;
t2468 = t2388 * t2477;
t2467 = t2389 * t2517;
t2466 = t2389 * t2484;
t2465 = t2390 * t2514;
t2464 = t2390 * t2481;
t2463 = t2391 * t2511;
t2462 = t2391 * t2478;
t2461 = t2398 * t2484;
t2460 = t2399 * t2481;
t2459 = t2400 * t2478;
t2458 = -0.2e1 * t2417 * t2563;
t2457 = -0.2e1 * t2421 * t2562;
t2456 = -0.2e1 * t2425 * t2561;
t2379 = t2388 * t2597;
t2378 = t2387 * t2597;
t2377 = t2386 * t2608;
t2376 = t2385 * t2608;
t2375 = t2384 * t2619;
t2374 = t2383 * t2619;
t2373 = t2382 - 0.2e1 * t2588;
t2370 = t2380 - 0.2e1 * t2590;
t2368 = t2381 - 0.2e1 * t2589;
t2357 = t2363 * t2479;
t2356 = t2362 * t2482;
t2355 = t2361 * t2485;
t2354 = t2360 * t2479;
t2353 = t2359 * t2482;
t2352 = t2358 * t2485;
t2351 = t2379 + t2357;
t2350 = 0.2e1 * t2379 + t2357;
t2349 = t2378 + t2354;
t2348 = 0.2e1 * t2378 + t2354;
t2347 = t2377 + t2356;
t2346 = t2376 + t2353;
t2345 = t2375 + t2355;
t2344 = 0.2e1 * t2375 + t2355;
t2343 = t2374 + t2352;
t2342 = 0.2e1 * t2374 + t2352;
t2341 = t2356 + 0.2e1 * t2377;
t2340 = t2353 + 0.2e1 * t2376;
t2339 = t2379 + t2357 / 0.2e1;
t2338 = t2378 + t2354 / 0.2e1;
t2337 = t2377 + t2356 / 0.2e1;
t2336 = t2376 + t2353 / 0.2e1;
t2335 = t2375 + t2355 / 0.2e1;
t2334 = t2374 + t2352 / 0.2e1;
t2333 = t2339 * t2714 + t2403 * t2585;
t2332 = t2338 * t2714 + t2406 * t2585;
t2331 = t2337 * t2716 + t2402 * t2586;
t2330 = t2336 * t2716 + t2405 * t2586;
t2329 = t2335 * t2718 + t2401 * t2587;
t2328 = t2334 * t2718 + t2404 * t2587;
t2327 = t2339 * t2705 + t2403 * t2474;
t2326 = t2338 * t2705 + t2406 * t2474;
t2325 = t2337 * t2706 + t2402 * t2475;
t2324 = t2336 * t2706 + t2405 * t2475;
t2323 = t2335 * t2707 + t2401 * t2476;
t2322 = t2334 * t2707 + t2404 * t2476;
t2321 = (-t2384 * t2656 - t2386 * t2652 - t2388 * t2648) * t2787;
t2320 = (-t2383 * t2656 - t2385 * t2652 - t2387 * t2648) * t2787;
t1 = [(t2384 ^ 2 * t2745 + t2386 ^ 2 * t2737 + t2388 ^ 2 * t2729) * t2787 + (t2345 * t2683 + t2347 * t2677 + t2351 * t2671 + (t2345 * t2695 + t2347 * t2694 + t2351 * t2693) * t2449) * t2786 + (t2341 * t2541 + t2344 * t2549 + t2350 * t2533 + (t2361 * t2547 + t2362 * t2539 + t2363 * t2531) * t2712) * MDP(5) + (-t2341 * t2778 - t2344 * t2780 - t2350 * t2776 + (-t2361 * t2682 - t2362 * t2676 - t2363 * t2670) * t2712) * MDP(6) + (t2345 * t2550 + t2347 * t2542 + t2351 * t2534 + (t2345 * t2569 + t2347 * t2567 + t2351 * t2565) * t2449) * t2785 + (t2345 * t2681 + t2347 * t2675 + t2351 * t2669 + (t2345 * t2568 + t2347 * t2566 + t2351 * t2564) * t2449) * t2708 + ((t2361 * t2509 + t2362 * t2505 + t2363 * t2501) * t2711 + (t2345 * t2645 + t2347 * t2641 + t2351 * t2637 + (t2408 * t2506 + t2411 * t2502 + t2414 * t2498) * t2451) * t2449) * MDP(9) + ((t2361 * t2646 + t2362 * t2642 + t2363 * t2638) * t2711 + (t2345 * t2401 + t2347 * t2402 + t2351 * t2403 + (t2384 * t2647 + t2386 * t2643 + t2388 * t2639) * t2451) * t2449) * MDP(10) + (t2401 ^ 2 * t2418 + t2402 ^ 2 * t2422 + t2403 ^ 2 * t2426) * t2782 + (-t2323 * t2683 - t2325 * t2677 - t2327 * t2671 + (-t2506 - t2502 - t2498 + (t2361 * t2548 + t2362 * t2540 + t2363 * t2532) * t2451) * t2449) * MDP(12) + (t2329 * t2580 + t2331 * t2578 + t2333 * t2576 + (-t2384 * t2768 - t2386 * t2765 - t2388 * t2762 + (-t2361 * t2472 - t2362 * t2470 - t2363 * t2468) * t2451) * t2449) * MDP(13) + MDP(14); (t2343 * t2683 + t2346 * t2677 + t2349 * t2671 + (t2343 * t2695 + t2346 * t2694 + t2349 * t2693) * t2449) * t2786 + (t2340 * t2541 + t2342 * t2549 + t2348 * t2533 + (t2361 * t2551 + t2362 * t2543 + t2363 * t2535) * t2712) * MDP(5) + (-t2340 * t2778 - t2342 * t2780 - t2348 * t2776 + (-t2361 * t2685 - t2362 * t2679 - t2363 * t2673) * t2712) * MDP(6) + (t2343 * t2550 + t2346 * t2542 + t2349 * t2534 + (t2343 * t2569 + t2346 * t2567 + t2349 * t2565) * t2449) * t2785 + (t2343 * t2681 + t2346 * t2675 + t2349 * t2669 + (t2343 * t2568 + t2346 * t2566 + t2349 * t2564) * t2449) * t2708 + ((t2361 * t2497 + t2362 * t2493 + t2363 * t2489) * t2711 + (t2343 * t2645 + t2346 * t2641 + t2349 * t2637 + (t2408 * t2494 + t2411 * t2490 + t2414 * t2486) * t2451) * t2449) * MDP(9) + ((t2361 * t2634 + t2362 * t2630 + t2363 * t2626) * t2711 + (t2343 * t2401 + t2346 * t2402 + t2349 * t2403 + (t2384 * t2635 + t2386 * t2631 + t2388 * t2627) * t2451) * t2449) * MDP(10) + (-t2322 * t2683 - t2324 * t2677 - t2326 * t2671 + (-t2507 - t2503 - t2499 + (t2361 * t2552 + t2362 * t2544 + t2363 * t2536) * t2451) * t2449) * MDP(12) + (t2328 * t2580 + t2330 * t2578 + t2332 * t2576 + (-t2383 * t2768 - t2385 * t2765 - t2387 * t2762 + (-t2361 * t2473 - t2362 * t2471 - t2363 * t2469) * t2451) * t2449) * MDP(13) + t2710; t2321 + (t2369 * t2683 + t2371 * t2677 + t2372 * t2671 + (t2361 * t2689 + t2362 * t2688 + t2363 * t2687) * t2449) * t2786 + (t2368 * t2541 + t2370 * t2549 + t2373 * t2533 + (-t2361 * t2516 - t2362 * t2513 - t2363 * t2510) * t2712) * MDP(5) + (-t2368 * t2778 - t2370 * t2780 - t2373 * t2776 + (t2361 * t2658 + t2362 * t2654 + t2363 * t2650) * t2712) * MDP(6) + (t2369 * t2550 + t2371 * t2542 + t2372 * t2534 + (t2361 * t2560 + t2362 * t2558 + t2363 * t2556) * t2449) * t2785 + (t2369 * t2681 + t2371 * t2675 + t2372 * t2669 + (t2361 * t2559 + t2362 * t2557 + t2363 * t2555) * t2449) * t2708 + (t2369 * t2645 + t2371 * t2641 + t2372 * t2637) * t2784 + (t2369 * t2401 + t2371 * t2402 + t2372 * t2403) * t2783 + (t2384 * t2584 + t2386 * t2583 + t2388 * t2582 + (t2508 + t2504 + t2500 + (-t2361 * t2517 - t2362 * t2514 - t2363 * t2511) * t2451) * t2449) * MDP(12) + (t2384 * t2458 + t2386 * t2457 + t2388 * t2456 + (t2769 + t2766 + t2763 + (t2361 * t2461 + t2362 * t2460 + t2363 * t2459) * t2451) * t2449) * MDP(13); (t2345 * t2686 + t2347 * t2680 + t2351 * t2674 + (t2345 * t2698 + t2347 * t2697 + t2351 * t2696) * t2449) * t2786 + (t2341 * t2545 + t2344 * t2553 + t2350 * t2537 + (t2358 * t2547 + t2359 * t2539 + t2360 * t2531) * t2712) * MDP(5) + (-t2341 * t2779 - t2344 * t2781 - t2350 * t2777 + (-t2358 * t2682 - t2359 * t2676 - t2360 * t2670) * t2712) * MDP(6) + (t2345 * t2554 + t2347 * t2546 + t2351 * t2538 + (t2345 * t2575 + t2347 * t2573 + t2351 * t2571) * t2449) * t2785 + (t2345 * t2684 + t2347 * t2678 + t2351 * t2672 + (t2345 * t2574 + t2347 * t2572 + t2351 * t2570) * t2449) * t2708 + ((t2358 * t2509 + t2359 * t2505 + t2360 * t2501) * t2711 + (t2345 * t2633 + t2347 * t2629 + t2351 * t2625 + (t2408 * t2507 + t2411 * t2503 + t2414 * t2499) * t2451) * t2449) * MDP(9) + ((t2358 * t2646 + t2359 * t2642 + t2360 * t2638) * t2711 + (t2345 * t2404 + t2347 * t2405 + t2351 * t2406 + (t2383 * t2647 + t2385 * t2643 + t2387 * t2639) * t2451) * t2449) * MDP(10) + (-t2323 * t2686 - t2325 * t2680 - t2327 * t2674 + (-t2494 - t2490 - t2486 + (t2358 * t2548 + t2359 * t2540 + t2360 * t2532) * t2451) * t2449) * MDP(12) + (t2329 * t2581 + t2331 * t2579 + t2333 * t2577 + (-t2384 * t2759 - t2386 * t2756 - t2388 * t2753 + (-t2358 * t2472 - t2359 * t2470 - t2360 * t2468) * t2451) * t2449) * MDP(13) + t2710; (t2383 ^ 2 * t2745 + t2385 ^ 2 * t2737 + t2387 ^ 2 * t2729) * t2787 + (t2343 * t2686 + t2346 * t2680 + t2349 * t2674 + (t2343 * t2698 + t2346 * t2697 + t2349 * t2696) * t2449) * t2786 + (t2340 * t2545 + t2342 * t2553 + t2348 * t2537 + (t2358 * t2551 + t2359 * t2543 + t2360 * t2535) * t2712) * MDP(5) + (-t2340 * t2779 - t2342 * t2781 - t2348 * t2777 + (-t2358 * t2685 - t2359 * t2679 - t2360 * t2673) * t2712) * MDP(6) + (t2343 * t2554 + t2346 * t2546 + t2349 * t2538 + (t2343 * t2575 + t2346 * t2573 + t2349 * t2571) * t2449) * t2785 + (t2343 * t2684 + t2346 * t2678 + t2349 * t2672 + (t2343 * t2574 + t2346 * t2572 + t2349 * t2570) * t2449) * t2708 + ((t2358 * t2497 + t2359 * t2493 + t2360 * t2489) * t2711 + (t2343 * t2633 + t2346 * t2629 + t2349 * t2625 + (t2408 * t2495 + t2411 * t2491 + t2414 * t2487) * t2451) * t2449) * MDP(9) + ((t2358 * t2634 + t2359 * t2630 + t2360 * t2626) * t2711 + (t2343 * t2404 + t2346 * t2405 + t2349 * t2406 + (t2383 * t2635 + t2385 * t2631 + t2387 * t2627) * t2451) * t2449) * MDP(10) + (t2404 ^ 2 * t2418 + t2405 ^ 2 * t2422 + t2406 ^ 2 * t2426) * t2782 + (-t2322 * t2686 - t2324 * t2680 - t2326 * t2674 + (-t2495 - t2491 - t2487 + (t2358 * t2552 + t2359 * t2544 + t2360 * t2536) * t2451) * t2449) * MDP(12) + (t2328 * t2581 + t2330 * t2579 + t2332 * t2577 + (-t2383 * t2759 - t2385 * t2756 - t2387 * t2753 + (-t2358 * t2473 - t2359 * t2471 - t2360 * t2469) * t2451) * t2449) * MDP(13) + MDP(14); t2320 + (t2369 * t2686 + t2371 * t2680 + t2372 * t2674 + (t2358 * t2689 + t2359 * t2688 + t2360 * t2687) * t2449) * t2786 + (t2368 * t2545 + t2370 * t2553 + t2373 * t2537 + (-t2358 * t2516 - t2359 * t2513 - t2360 * t2510) * t2712) * MDP(5) + (-t2368 * t2779 - t2370 * t2781 - t2373 * t2777 + (t2358 * t2658 + t2359 * t2654 + t2360 * t2650) * t2712) * MDP(6) + (t2369 * t2554 + t2371 * t2546 + t2372 * t2538 + (t2358 * t2560 + t2359 * t2558 + t2360 * t2556) * t2449) * t2785 + (t2369 * t2684 + t2371 * t2678 + t2372 * t2672 + (t2358 * t2559 + t2359 * t2557 + t2360 * t2555) * t2449) * t2708 + (t2369 * t2633 + t2371 * t2629 + t2372 * t2625) * t2784 + (t2369 * t2404 + t2371 * t2405 + t2372 * t2406) * t2783 + (t2383 * t2584 + t2385 * t2583 + t2387 * t2582 + (t2496 + t2492 + t2488 + (-t2358 * t2517 - t2359 * t2514 - t2360 * t2511) * t2451) * t2449) * MDP(12) + (t2383 * t2458 + t2385 * t2457 + t2387 * t2456 + (t2760 + t2757 + t2754 + (t2358 * t2461 + t2359 * t2460 + t2360 * t2459) * t2451) * t2449) * MDP(13); t2321 + (-t2341 * t2653 - t2344 * t2657 - t2350 * t2649) * MDP(5) + (t2341 * t2399 + t2344 * t2398 + t2350 * t2400) * MDP(6) + (t2323 * t2772 + t2325 * t2771 + t2327 * t2770) * MDP(12) + (t2329 * t2772 + t2331 * t2771 + t2333 * t2770) * t2709 + ((-t2345 * t2772 - t2347 * t2771 - t2351 * t2770) * MDP(4) + (-t2345 * t2659 - t2347 * t2655 - t2351 * t2651) * MDP(7) + (-t2345 * t2518 - t2347 * t2515 - t2351 * t2512) * t2791 + ((t2401 * t2529 + t2402 * t2525 + t2403 * t2521) * MDP(9) + (t2389 * t2647 + t2390 * t2643 + t2391 * t2639) * MDP(10)) * t2450 + ((t2345 * t2668 + t2347 * t2665 + t2351 * t2662) * MDP(4) + (t2384 * t2527 + t2386 * t2523 + t2388 * t2519) * MDP(5) + (-t2384 * t2667 - t2386 * t2664 - t2388 * t2661) * MDP(6) + (t2345 * t2530 + t2347 * t2526 + t2351 * t2522) * MDP(7) + (t2345 * t2666 + t2347 * t2663 + t2351 * t2660) * t2791 + (-t2408 * t2508 - t2411 * t2504 - t2414 * t2500) * MDP(9) + (-t2408 * t2769 - t2411 * t2766 - t2414 * t2763) * MDP(10) + (t2384 * t2528 + t2386 * t2524 + t2388 * t2520) * MDP(12) + (-t2384 * t2466 - t2386 * t2464 - t2388 * t2462) * MDP(13)) * t2449) * t2451; t2320 + (-t2340 * t2653 - t2342 * t2657 - t2348 * t2649) * MDP(5) + (t2340 * t2399 + t2342 * t2398 + t2348 * t2400) * MDP(6) + (t2322 * t2772 + t2324 * t2771 + t2326 * t2770) * MDP(12) + (t2328 * t2772 + t2330 * t2771 + t2332 * t2770) * t2709 + ((-t2343 * t2772 - t2346 * t2771 - t2349 * t2770) * MDP(4) + (-t2343 * t2659 - t2346 * t2655 - t2349 * t2651) * MDP(7) + (-t2343 * t2518 - t2346 * t2515 - t2349 * t2512) * t2791 + ((t2404 * t2529 + t2405 * t2525 + t2406 * t2521) * MDP(9) + (t2389 * t2635 + t2390 * t2631 + t2391 * t2627) * MDP(10)) * t2450 + ((t2343 * t2668 + t2346 * t2665 + t2349 * t2662) * MDP(4) + (t2383 * t2527 + t2385 * t2523 + t2387 * t2519) * MDP(5) + (-t2383 * t2667 - t2385 * t2664 - t2387 * t2661) * MDP(6) + (t2343 * t2530 + t2346 * t2526 + t2349 * t2522) * MDP(7) + (t2343 * t2666 + t2346 * t2663 + t2349 * t2660) * t2791 + (-t2408 * t2496 - t2411 * t2492 - t2414 * t2488) * MDP(9) + (-t2408 * t2760 - t2411 * t2757 - t2414 * t2754) * MDP(10) + (t2383 * t2528 + t2385 * t2524 + t2387 * t2520) * MDP(12) + (-t2383 * t2466 - t2385 * t2464 - t2387 * t2462) * MDP(13)) * t2449) * t2451; (-t2368 * t2653 - t2370 * t2657 - t2373 * t2649) * MDP(5) + (t2368 * t2399 + t2370 * t2398 + t2373 * t2400) * MDP(6) + 0.2e1 * (-t2365 * t2440 * t2657 - t2366 * t2443 * t2653 - t2367 * t2446 * t2649) * MDP(12) + (t2398 * t2563 + t2399 * t2562 + t2400 * t2561) * t2709 + MDP(14) + (t2398 ^ 2 * t2409 + t2399 ^ 2 * t2412 + t2400 ^ 2 * t2415) * t2787 + ((-t2369 * t2772 - t2371 * t2771 - t2372 * t2770) * MDP(4) + (-t2369 * t2659 - t2371 * t2655 - t2372 * t2651) * MDP(7) + (-t2369 * t2518 - t2371 * t2515 - t2372 * t2512) * t2791 + ((t2369 * t2668 + t2371 * t2665 + t2372 * t2662) * MDP(4) + (-t2463 - t2465 - t2467) * MDP(5) + (t2398 * t2668 + t2399 * t2665 + t2400 * t2662) * MDP(6) + (t2369 * t2530 + t2371 * t2526 + t2372 * t2522) * MDP(7) + (t2369 * t2666 + t2371 * t2663 + t2372 * t2660) * t2791 + (-t2389 * t2398 * t2744 - t2390 * t2399 * t2736 - t2391 * t2400 * t2728) * MDP(12) + (t2431 * t2467 + t2434 * t2465 + t2437 * t2463) * MDP(13)) * t2449) * t2451;];
%% Postprocessing: Reshape Output
% From vec2mat_3_matlab.m
res = [t1(1), t1(2), t1(3); t1(4), t1(5), t1(6); t1(7), t1(8), t1(9);];
MMX  = res;
