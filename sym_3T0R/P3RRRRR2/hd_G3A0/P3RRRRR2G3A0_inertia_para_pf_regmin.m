% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x14]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-09 21:13
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR2G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR2G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR2G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P3RRRRR2G3A0_inertia_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR2G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR2G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-09 21:12:15
% EndTime: 2020-03-09 21:12:24
% DurationCPUTime: 9.86s
% Computational Cost: add. (3781->536), mult. (10203->1164), div. (3687->19), fcn. (12795->27), ass. (0->465)
t699 = cos(qJ(3,3));
t1047 = -0.2e1 * t699;
t702 = cos(qJ(3,2));
t1046 = -0.2e1 * t702;
t705 = cos(qJ(3,1));
t1045 = -0.2e1 * t705;
t676 = 0.1e1 / t699;
t680 = 0.1e1 / t702;
t684 = 0.1e1 / t705;
t710 = 1 / pkin(1);
t1044 = 2 * t710;
t701 = cos(qJ(1,3));
t1043 = pkin(1) * t701;
t704 = cos(qJ(1,2));
t1042 = pkin(1) * t704;
t707 = cos(qJ(1,1));
t1041 = pkin(1) * t707;
t687 = legFrame(3,2);
t663 = cos(t687);
t690 = sin(qJ(3,3));
t1017 = t663 * t690;
t691 = sin(qJ(2,3));
t692 = sin(qJ(1,3));
t700 = cos(qJ(2,3));
t651 = t691 * t692 - t701 * t700;
t1034 = t651 * t699;
t660 = sin(t687);
t642 = t660 * t1034 + t1017;
t1040 = t642 * t676;
t1026 = t660 * t690;
t643 = -t663 * t1034 + t1026;
t1039 = t643 * t676;
t688 = legFrame(2,2);
t664 = cos(t688);
t693 = sin(qJ(3,2));
t1014 = t664 * t693;
t694 = sin(qJ(2,2));
t695 = sin(qJ(1,2));
t703 = cos(qJ(2,2));
t652 = t694 * t695 - t704 * t703;
t1033 = t652 * t702;
t661 = sin(t688);
t644 = t661 * t1033 + t1014;
t1038 = t644 * t680;
t1023 = t661 * t693;
t645 = -t664 * t1033 + t1023;
t1037 = t645 * t680;
t689 = legFrame(1,2);
t665 = cos(t689);
t696 = sin(qJ(3,1));
t1011 = t665 * t696;
t697 = sin(qJ(2,1));
t698 = sin(qJ(1,1));
t706 = cos(qJ(2,1));
t653 = t697 * t698 - t707 * t706;
t1032 = t653 * t705;
t662 = sin(t689);
t646 = t662 * t1032 + t1011;
t1036 = t646 * t684;
t1020 = t662 * t696;
t647 = -t665 * t1032 + t1020;
t1035 = t647 * t684;
t657 = sin(qJ(1,3) + qJ(2,3));
t667 = 0.1e1 / t691;
t1031 = t657 * t667;
t658 = sin(qJ(1,2) + qJ(2,2));
t670 = 0.1e1 / t694;
t1030 = t658 * t670;
t659 = sin(qJ(1,1) + qJ(2,1));
t673 = 0.1e1 / t697;
t1029 = t659 * t673;
t1028 = t660 * t657;
t1027 = t660 * t676;
t1025 = t661 * t658;
t1024 = t661 * t680;
t1022 = t662 * t659;
t1021 = t662 * t684;
t1019 = t663 * t657;
t1018 = t663 * t676;
t1016 = t664 * t658;
t1015 = t664 * t680;
t1013 = t665 * t659;
t1012 = t665 * t684;
t1010 = t667 * t676;
t677 = 0.1e1 / t699 ^ 2;
t1009 = t667 * t677;
t675 = t699 ^ 2;
t678 = t676 / t675;
t1008 = t667 * t678;
t1007 = t667 * t690;
t1006 = t667 * t700;
t1005 = t667 * t710;
t668 = 0.1e1 / t691 ^ 2;
t1004 = t668 * t677;
t1003 = t668 * t700;
t1002 = t670 * t680;
t681 = 0.1e1 / t702 ^ 2;
t1001 = t670 * t681;
t679 = t702 ^ 2;
t682 = t680 / t679;
t1000 = t670 * t682;
t999 = t670 * t693;
t998 = t670 * t703;
t997 = t670 * t710;
t671 = 0.1e1 / t694 ^ 2;
t996 = t671 * t681;
t995 = t671 * t703;
t994 = t673 * t684;
t685 = 0.1e1 / t705 ^ 2;
t993 = t673 * t685;
t683 = t705 ^ 2;
t686 = t684 / t683;
t992 = t673 * t686;
t991 = t673 * t696;
t990 = t673 * t706;
t989 = t673 * t710;
t674 = 0.1e1 / t697 ^ 2;
t988 = t674 * t685;
t987 = t674 * t706;
t986 = t676 * t690;
t985 = t676 * t700;
t984 = t677 * t690;
t983 = t680 * t693;
t982 = t680 * t703;
t981 = t681 * t693;
t980 = t684 * t696;
t979 = t684 * t706;
t978 = t685 * t696;
t977 = t690 * t700;
t708 = 0.1e1 / pkin(2);
t976 = t691 * t708;
t975 = t693 * t703;
t974 = t694 * t708;
t973 = t696 * t706;
t972 = t697 * t708;
t971 = t708 * t710;
t709 = 1 / (pkin(2) ^ 2);
t970 = t709 * t710;
t969 = 0.2e1 * t1031;
t968 = 0.2e1 * t1030;
t967 = 0.2e1 * t1029;
t966 = t700 * t1047;
t965 = t703 * t1046;
t964 = t706 * t1045;
t963 = pkin(1) * t977;
t962 = pkin(1) * t975;
t961 = pkin(1) * t973;
t960 = pkin(2) * t651 * t675;
t959 = pkin(2) * t652 * t679;
t958 = pkin(2) * t653 * t683;
t617 = -t660 * t960 + (-pkin(2) * t1017 + t660 * t1043) * t699 - t663 * t963;
t957 = t617 * t1009;
t618 = -t661 * t959 + (-pkin(2) * t1014 + t661 * t1042) * t702 - t664 * t962;
t956 = t618 * t1001;
t619 = -t662 * t958 + (-pkin(2) * t1011 + t662 * t1041) * t705 - t665 * t961;
t955 = t619 * t993;
t620 = t663 * t960 + (-pkin(2) * t1026 - t663 * t1043) * t699 - t660 * t963;
t954 = t620 * t1009;
t621 = t664 * t959 + (-pkin(2) * t1023 - t664 * t1042) * t702 - t661 * t962;
t953 = t621 * t1001;
t622 = t665 * t958 + (-pkin(2) * t1020 - t665 * t1041) * t705 - t662 * t961;
t952 = t622 * t993;
t648 = pkin(2) * (t691 * t701 + t692 * t700) * t699 + t692 * pkin(1);
t876 = t667 * t971;
t639 = t648 * t676 * t876;
t849 = t657 * t1005;
t623 = -t849 + t639 / 0.2e1;
t951 = t623 * t1006;
t649 = pkin(2) * (t694 * t704 + t695 * t703) * t702 + t695 * pkin(1);
t865 = t670 * t971;
t640 = t649 * t680 * t865;
t848 = t658 * t997;
t624 = -t848 + t640 / 0.2e1;
t950 = t624 * t998;
t650 = pkin(2) * (t697 * t707 + t698 * t706) * t705 + t698 * pkin(1);
t854 = t673 * t971;
t641 = t650 * t684 * t854;
t847 = t659 * t989;
t625 = -t847 + t641 / 0.2e1;
t949 = t625 * t990;
t627 = t639 - t849;
t948 = t627 * t1009;
t629 = t640 - t848;
t947 = t629 * t1001;
t630 = t641 - t847;
t946 = t630 * t993;
t945 = t642 * t1010;
t944 = t642 * t1008;
t943 = t642 * t1007;
t942 = t643 * t1010;
t941 = t643 * t1008;
t940 = t643 * t1007;
t939 = t644 * t1002;
t938 = t644 * t1000;
t937 = t644 * t999;
t936 = t645 * t1002;
t935 = t645 * t1000;
t934 = t645 * t999;
t933 = t646 * t994;
t932 = t646 * t992;
t931 = t646 * t991;
t930 = t647 * t994;
t929 = t647 * t992;
t928 = t647 * t991;
t927 = t648 * t1010;
t926 = t648 * t1009;
t925 = t648 * t1007;
t924 = t649 * t1002;
t923 = t649 * t1001;
t922 = t649 * t999;
t921 = t650 * t994;
t920 = t650 * t993;
t919 = t650 * t991;
t666 = t690 ^ 2;
t918 = t666 * t1031;
t917 = t657 * t1009;
t916 = t657 * t1006;
t915 = t657 * t668 * t676;
t669 = t693 ^ 2;
t914 = t669 * t1030;
t913 = t658 * t1001;
t912 = t658 * t998;
t911 = t658 * t671 * t680;
t672 = t696 ^ 2;
t910 = t672 * t1029;
t909 = t659 * t993;
t908 = t659 * t990;
t907 = t659 * t674 * t684;
t906 = t660 * t1010;
t905 = t660 * t1009;
t904 = t660 * t986;
t903 = t660 * t984;
t902 = t661 * t1002;
t901 = t661 * t1001;
t900 = t661 * t983;
t899 = t661 * t981;
t898 = t662 * t994;
t897 = t662 * t993;
t896 = t662 * t980;
t895 = t662 * t978;
t894 = t663 * t1010;
t893 = t663 * t1009;
t892 = t663 * t986;
t891 = t663 * t984;
t890 = t664 * t1002;
t889 = t664 * t1001;
t888 = t664 * t983;
t887 = t664 * t981;
t886 = t665 * t994;
t885 = t665 * t993;
t884 = t665 * t980;
t883 = t665 * t978;
t882 = t666 * t1010;
t881 = t666 * t1009;
t880 = t667 * t986;
t879 = t667 * t985;
t878 = t676 * t1005;
t877 = t678 * t1007;
t875 = t668 * t985;
t874 = t677 * t1003;
t873 = t678 * t1003;
t872 = t668 * t977;
t871 = t669 * t1002;
t870 = t669 * t1001;
t869 = t670 * t983;
t868 = t670 * t982;
t867 = t680 * t997;
t866 = t682 * t999;
t864 = t671 * t982;
t863 = t681 * t995;
t862 = t682 * t995;
t861 = t671 * t975;
t860 = t672 * t994;
t859 = t672 * t993;
t858 = t673 * t980;
t857 = t673 * t979;
t856 = t684 * t989;
t855 = t686 * t991;
t853 = t674 * t979;
t852 = t685 * t987;
t851 = t686 * t987;
t850 = t674 * t973;
t846 = t976 / 0.2e1;
t845 = t974 / 0.2e1;
t844 = t972 / 0.2e1;
t843 = 0.2e1 * t951;
t842 = 0.2e1 * t950;
t841 = 0.2e1 * t949;
t840 = -0.2e1 * t945;
t839 = -0.2e1 * t942;
t838 = -0.2e1 * t939;
t837 = -0.2e1 * t936;
t836 = -0.2e1 * t933;
t835 = -0.2e1 * t930;
t834 = t617 * t881;
t833 = t617 * t880;
t832 = t618 * t870;
t831 = t618 * t869;
t830 = t619 * t859;
t829 = t619 * t858;
t828 = t620 * t881;
t827 = t620 * t880;
t826 = t621 * t870;
t825 = t621 * t869;
t824 = t622 * t859;
t823 = t622 * t858;
t822 = t690 * t951;
t821 = t693 * t950;
t820 = t696 * t949;
t819 = t627 * t881;
t818 = t627 * t880;
t817 = t629 * t870;
t816 = t629 * t869;
t815 = t630 * t859;
t814 = t630 * t858;
t813 = t642 * t882;
t812 = t642 * t879;
t811 = t642 * t874;
t810 = t642 * t873;
t809 = t643 * t882;
t808 = t643 * t879;
t807 = t643 * t874;
t806 = t643 * t873;
t805 = t644 * t871;
t804 = t644 * t868;
t803 = t644 * t863;
t802 = t644 * t862;
t801 = t645 * t871;
t800 = t645 * t868;
t799 = t645 * t863;
t798 = t645 * t862;
t797 = t646 * t860;
t796 = t646 * t857;
t795 = t646 * t852;
t794 = t646 * t851;
t793 = t647 * t860;
t792 = t647 * t857;
t791 = t647 * t852;
t790 = t647 * t851;
t789 = t648 * t882;
t788 = t677 * t925;
t787 = t648 * t875;
t786 = t648 * t874;
t785 = t649 * t871;
t784 = t681 * t922;
t783 = t649 * t864;
t782 = t649 * t863;
t781 = t650 * t860;
t780 = t685 * t919;
t779 = t650 * t853;
t778 = t650 * t852;
t777 = t657 * t699 * t1007;
t776 = t657 * t875;
t775 = t657 * t874;
t774 = t658 * t702 * t999;
t773 = t658 * t864;
t772 = t658 * t863;
t771 = t659 * t705 * t991;
t770 = t659 * t853;
t769 = t659 * t852;
t768 = t660 * t877;
t767 = t657 * t904;
t766 = t642 * t903;
t765 = t643 * t903;
t764 = t661 * t866;
t763 = t658 * t900;
t762 = t644 * t899;
t761 = t645 * t899;
t760 = t662 * t855;
t759 = t659 * t896;
t758 = t646 * t895;
t757 = t647 * t895;
t756 = t663 * t877;
t755 = t657 * t892;
t754 = t642 * t891;
t753 = t643 * t891;
t752 = t664 * t866;
t751 = t658 * t888;
t750 = t644 * t887;
t749 = t645 * t887;
t748 = t665 * t855;
t747 = t659 * t884;
t746 = t646 * t883;
t745 = t647 * t883;
t744 = t677 * t876;
t743 = t677 * t872;
t742 = t678 * t872;
t741 = t681 * t865;
t740 = t681 * t861;
t739 = t682 * t861;
t738 = t685 * t854;
t737 = t685 * t850;
t736 = t686 * t850;
t735 = t976 * t986;
t734 = t974 * t983;
t733 = t972 * t980;
t732 = t642 * t742;
t731 = t643 * t742;
t730 = t644 * t739;
t729 = t645 * t739;
t728 = t646 * t736;
t727 = t647 * t736;
t726 = t648 * t776;
t725 = t648 * t743;
t724 = t649 * t773;
t723 = t649 * t740;
t722 = t650 * t770;
t721 = t650 * t737;
t720 = t657 * t743;
t719 = t658 * t740;
t718 = t659 * t737;
t717 = -0.2e1 * t676 * t822;
t716 = -0.2e1 * t680 * t821;
t715 = -0.2e1 * t684 * t820;
t711 = 0.1e1 / pkin(1) ^ 2;
t638 = t647 * t856;
t637 = t646 * t856;
t636 = t645 * t867;
t635 = t644 * t867;
t634 = t643 * t878;
t633 = t642 * t878;
t632 = (t660 * t663 * t677 + t661 * t664 * t681 + t662 * t665 * t685) * t709;
t631 = t641 - 0.2e1 * t847;
t628 = t639 - 0.2e1 * t849;
t626 = t640 - 0.2e1 * t848;
t616 = t622 * t738;
t615 = t621 * t741;
t614 = t620 * t744;
t613 = t619 * t738;
t612 = t618 * t741;
t611 = t617 * t744;
t610 = t638 + t616;
t609 = 0.2e1 * t638 + t616;
t608 = t637 + t613;
t607 = 0.2e1 * t637 + t613;
t606 = t636 + t615;
t605 = t635 + t612;
t604 = t634 + t614;
t603 = 0.2e1 * t634 + t614;
t602 = t633 + t611;
t601 = 0.2e1 * t633 + t611;
t600 = t615 + 0.2e1 * t636;
t599 = t612 + 0.2e1 * t635;
t598 = t638 + t616 / 0.2e1;
t597 = t637 + t613 / 0.2e1;
t596 = t636 + t615 / 0.2e1;
t595 = t635 + t612 / 0.2e1;
t594 = t634 + t614 / 0.2e1;
t593 = t633 + t611 / 0.2e1;
t592 = t598 * t973 + t662 * t844;
t591 = t597 * t973 + t665 * t844;
t590 = t596 * t975 + t661 * t845;
t589 = t595 * t975 + t664 * t845;
t588 = t594 * t977 + t660 * t846;
t587 = t593 * t977 + t663 * t846;
t586 = t598 * t964 + t662 * t733;
t585 = t597 * t964 + t665 * t733;
t584 = t596 * t965 + t661 * t734;
t583 = t595 * t965 + t664 * t734;
t582 = t594 * t966 + t660 * t735;
t581 = t593 * t966 + t663 * t735;
t580 = (-t643 * t915 - t645 * t911 - t647 * t907) * t711;
t579 = (-t642 * t915 - t644 * t911 - t646 * t907) * t711;
t578 = (t642 * t643 * t1004 + t644 * t645 * t996 + t646 * t647 * t988) * t711;
t1 = [(t643 ^ 2 * t1004 + t645 ^ 2 * t996 + t647 ^ 2 * t988) * t711, 0, 0, (t604 * t942 + t606 * t936 + t610 * t930 + (t604 * t954 + t606 * t953 + t610 * t952) * t708) * t710, t600 * t800 + t603 * t808 + t609 * t792 + (t620 * t806 + t621 * t798 + t622 * t790) * t971, -t600 * t1037 - t603 * t1039 - t609 * t1035 + (-t620 * t941 - t621 * t935 - t622 * t929) * t971, (t604 * t809 + t606 * t801 + t610 * t793 + (t604 * t828 + t606 * t826 + t610 * t824) * t708) * t710, (t604 * t940 + t606 * t934 + t610 * t928 + (t604 * t827 + t606 * t825 + t610 * t823) * t708) * t1044, (t620 * t768 + t621 * t764 + t622 * t760) * t970 + (t604 * t904 + t606 * t900 + t610 * t896 + (t667 * t765 + t670 * t761 + t673 * t757) * t710) * t708, (t620 * t905 + t621 * t901 + t622 * t897) * t970 + (t604 * t660 + t606 * t661 + t610 * t662 + (t643 * t906 + t645 * t902 + t647 * t898) * t710) * t708, (t660 ^ 2 * t677 + t661 ^ 2 * t681 + t662 ^ 2 * t685) * t709, -t582 * t942 - t584 * t936 - t586 * t930 + (-t765 - t761 - t757 + (t620 * t807 + t621 * t799 + t622 * t791) * t710) * t708, t588 * t839 + t590 * t837 + t592 * t835 + (-t643 * t1027 - t645 * t1024 - t647 * t1021 + (-t620 * t731 - t621 * t729 - t622 * t727) * t710) * t708, 1; t578, 0, 0, (t602 * t942 + t605 * t936 + t608 * t930 + (t602 * t954 + t605 * t953 + t608 * t952) * t708) * t710, t599 * t800 + t601 * t808 + t607 * t792 + (t620 * t810 + t621 * t802 + t622 * t794) * t971, -t599 * t1037 - t601 * t1039 - t607 * t1035 + (-t620 * t944 - t621 * t938 - t622 * t932) * t971, (t602 * t809 + t605 * t801 + t608 * t793 + (t602 * t828 + t605 * t826 + t608 * t824) * t708) * t710, (t602 * t940 + t605 * t934 + t608 * t928 + (t602 * t827 + t605 * t825 + t608 * t823) * t708) * t1044, (t620 * t756 + t621 * t752 + t622 * t748) * t970 + (t602 * t904 + t605 * t900 + t608 * t896 + (t667 * t753 + t670 * t749 + t673 * t745) * t710) * t708, (t620 * t893 + t621 * t889 + t622 * t885) * t970 + (t602 * t660 + t605 * t661 + t608 * t662 + (t643 * t894 + t645 * t890 + t647 * t886) * t710) * t708, t632, -t581 * t942 - t583 * t936 - t585 * t930 + (-t766 - t762 - t758 + (t620 * t811 + t621 * t803 + t622 * t795) * t710) * t708, t587 * t839 + t589 * t837 + t591 * t835 + (-t642 * t1027 - t644 * t1024 - t646 * t1021 + (-t620 * t732 - t621 * t730 - t622 * t728) * t710) * t708, 0; t580, 0, 0, (t627 * t942 + t629 * t936 + t630 * t930 + (t620 * t948 + t621 * t947 + t622 * t946) * t708) * t710, t626 * t800 + t628 * t808 + t631 * t792 + (-t620 * t775 - t621 * t772 - t622 * t769) * t971, -t626 * t1037 - t628 * t1039 - t631 * t1035 + (t620 * t917 + t621 * t913 + t622 * t909) * t971, (t627 * t809 + t629 * t801 + t630 * t793 + (t620 * t819 + t621 * t817 + t622 * t815) * t708) * t710, (t627 * t940 + t629 * t934 + t630 * t928 + (t620 * t818 + t621 * t816 + t622 * t814) * t708) * t1044, (t627 * t904 + t629 * t900 + t630 * t896) * t708, (t627 * t660 + t629 * t661 + t630 * t662) * t708, 0, t643 * t843 + t645 * t842 + t647 * t841 + (t767 + t763 + t759 + (-t620 * t776 - t621 * t773 - t622 * t770) * t710) * t708, t643 * t717 + t645 * t716 + t647 * t715 + (t1028 + t1025 + t1022 + (t620 * t720 + t621 * t719 + t622 * t718) * t710) * t708, 0; t578, 0, 0, (t604 * t945 + t606 * t939 + t610 * t933 + (t604 * t957 + t606 * t956 + t610 * t955) * t708) * t710, t600 * t804 + t603 * t812 + t609 * t796 + (t617 * t806 + t618 * t798 + t619 * t790) * t971, -t600 * t1038 - t603 * t1040 - t609 * t1036 + (-t617 * t941 - t618 * t935 - t619 * t929) * t971, (t604 * t813 + t606 * t805 + t610 * t797 + (t604 * t834 + t606 * t832 + t610 * t830) * t708) * t710, (t604 * t943 + t606 * t937 + t610 * t931 + (t604 * t833 + t606 * t831 + t610 * t829) * t708) * t1044, (t617 * t768 + t618 * t764 + t619 * t760) * t970 + (t604 * t892 + t606 * t888 + t610 * t884 + (t667 * t766 + t670 * t762 + t673 * t758) * t710) * t708, (t617 * t905 + t618 * t901 + t619 * t897) * t970 + (t604 * t663 + t606 * t664 + t610 * t665 + (t642 * t906 + t644 * t902 + t646 * t898) * t710) * t708, t632, -t582 * t945 - t584 * t939 - t586 * t933 + (-t753 - t749 - t745 + (t617 * t807 + t618 * t799 + t619 * t791) * t710) * t708, t588 * t840 + t590 * t838 + t592 * t836 + (-t643 * t1018 - t645 * t1015 - t647 * t1012 + (-t617 * t731 - t618 * t729 - t619 * t727) * t710) * t708, 0; (t642 ^ 2 * t1004 + t644 ^ 2 * t996 + t646 ^ 2 * t988) * t711, 0, 0, (t602 * t945 + t605 * t939 + t608 * t933 + (t602 * t957 + t605 * t956 + t608 * t955) * t708) * t710, t599 * t804 + t601 * t812 + t607 * t796 + (t617 * t810 + t618 * t802 + t619 * t794) * t971, -t599 * t1038 - t601 * t1040 - t607 * t1036 + (-t617 * t944 - t618 * t938 - t619 * t932) * t971, (t602 * t813 + t605 * t805 + t608 * t797 + (t602 * t834 + t605 * t832 + t608 * t830) * t708) * t710, (t602 * t943 + t605 * t937 + t608 * t931 + (t602 * t833 + t605 * t831 + t608 * t829) * t708) * t1044, (t617 * t756 + t618 * t752 + t619 * t748) * t970 + (t602 * t892 + t605 * t888 + t608 * t884 + (t667 * t754 + t670 * t750 + t673 * t746) * t710) * t708, (t617 * t893 + t618 * t889 + t619 * t885) * t970 + (t602 * t663 + t605 * t664 + t608 * t665 + (t642 * t894 + t644 * t890 + t646 * t886) * t710) * t708, (t663 ^ 2 * t677 + t664 ^ 2 * t681 + t665 ^ 2 * t685) * t709, -t581 * t945 - t583 * t939 - t585 * t933 + (-t754 - t750 - t746 + (t617 * t811 + t618 * t803 + t619 * t795) * t710) * t708, t587 * t840 + t589 * t838 + t591 * t836 + (-t642 * t1018 - t644 * t1015 - t646 * t1012 + (-t617 * t732 - t618 * t730 - t619 * t728) * t710) * t708, 1; t579, 0, 0, (t627 * t945 + t629 * t939 + t630 * t933 + (t617 * t948 + t618 * t947 + t619 * t946) * t708) * t710, t626 * t804 + t628 * t812 + t631 * t796 + (-t617 * t775 - t618 * t772 - t619 * t769) * t971, -t626 * t1038 - t628 * t1040 - t631 * t1036 + (t617 * t917 + t618 * t913 + t619 * t909) * t971, (t627 * t813 + t629 * t805 + t630 * t797 + (t617 * t819 + t618 * t817 + t619 * t815) * t708) * t710, (t627 * t943 + t629 * t937 + t630 * t931 + (t617 * t818 + t618 * t816 + t619 * t814) * t708) * t1044, (t627 * t892 + t629 * t888 + t630 * t884) * t708, (t627 * t663 + t629 * t664 + t630 * t665) * t708, 0, t642 * t843 + t644 * t842 + t646 * t841 + (t755 + t751 + t747 + (-t617 * t776 - t618 * t773 - t619 * t770) * t710) * t708, t642 * t717 + t644 * t716 + t646 * t715 + (t1019 + t1016 + t1013 + (t617 * t720 + t618 * t719 + t619 * t718) * t710) * t708, 0; t580, 0, 0, (-t604 * t1031 - t606 * t1030 - t610 * t1029 + (t604 * t927 + t606 * t924 + t610 * t921) * t708) * t710, -t600 * t912 - t603 * t916 - t609 * t908 + (t643 * t786 + t645 * t782 + t647 * t778) * t971, t658 * t600 + t657 * t603 + t659 * t609 + (-t643 * t926 - t645 * t923 - t647 * t920) * t971, (-t604 * t918 - t606 * t914 - t610 * t910 + (t604 * t789 + t606 * t785 + t610 * t781) * t708) * t710, (-t604 * t777 - t606 * t774 - t610 * t771 + (t604 * t925 + t606 * t922 + t610 * t919) * t708) * t1044, ((t660 * t788 + t661 * t784 + t662 * t780) * t709 + (-t667 * t767 - t670 * t763 - t673 * t759) * t708) * t710, ((t648 * t906 + t649 * t902 + t650 * t898) * t709 + (-t1022 * t673 - t1025 * t670 - t1028 * t667) * t708) * t710, 0, t582 * t1031 + t584 * t1030 + t586 * t1029 + (t643 * t787 + t645 * t783 + t647 * t779) * t971, t588 * t969 + t590 * t968 + t592 * t967 + (-t643 * t725 - t645 * t723 - t647 * t721) * t971, 0; t579, 0, 0, (-t602 * t1031 - t605 * t1030 - t608 * t1029 + (t602 * t927 + t605 * t924 + t608 * t921) * t708) * t710, -t599 * t912 - t601 * t916 - t607 * t908 + (t642 * t786 + t644 * t782 + t646 * t778) * t971, t658 * t599 + t657 * t601 + t659 * t607 + (-t642 * t926 - t644 * t923 - t646 * t920) * t971, (-t602 * t918 - t605 * t914 - t608 * t910 + (t602 * t789 + t605 * t785 + t608 * t781) * t708) * t710, (-t602 * t777 - t605 * t774 - t608 * t771 + (t602 * t925 + t605 * t922 + t608 * t919) * t708) * t1044, ((t663 * t788 + t664 * t784 + t665 * t780) * t709 + (-t667 * t755 - t670 * t751 - t673 * t747) * t708) * t710, ((t648 * t894 + t649 * t890 + t650 * t886) * t709 + (-t1013 * t673 - t1016 * t670 - t1019 * t667) * t708) * t710, 0, t581 * t1031 + t583 * t1030 + t585 * t1029 + (t642 * t787 + t644 * t783 + t646 * t779) * t971, t587 * t969 + t589 * t968 + t591 * t967 + (-t642 * t725 - t644 * t723 - t646 * t721) * t971, 0; (t657 ^ 2 * t668 + t658 ^ 2 * t671 + t659 ^ 2 * t674) * t711, 0, 0, (-t627 * t1031 - t629 * t1030 - t630 * t1029 + (t627 * t927 + t629 * t924 + t630 * t921) * t708) * t710, -t626 * t912 - t628 * t916 - t631 * t908 + (-t722 - t724 - t726) * t971, t658 * t626 + t657 * t628 + t659 * t631 + (t657 * t927 + t658 * t924 + t659 * t921) * t971, (-t627 * t918 - t629 * t914 - t630 * t910 + (t627 * t789 + t629 * t785 + t630 * t781) * t708) * t710, (-t627 * t777 - t629 * t774 - t630 * t771 + (t627 * t925 + t629 * t922 + t630 * t919) * t708) * t1044, 0, 0, 0, t623 * t916 * t1047 + t624 * t912 * t1046 + t625 * t908 * t1045 + (-t1003 * t648 * t657 - t649 * t658 * t995 - t650 * t659 * t987) * t971, 0.2e1 * t657 * t822 + 0.2e1 * t658 * t821 + 0.2e1 * t659 * t820 + (t690 * t726 + t693 * t724 + t696 * t722) * t971, 1;];
tau_reg  = t1;
