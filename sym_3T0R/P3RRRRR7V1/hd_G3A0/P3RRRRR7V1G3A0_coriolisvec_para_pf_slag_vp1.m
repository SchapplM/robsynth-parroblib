% Calculate vector of centrifugal and coriolis load on the joints for
% P3RRRRR7V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d1,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [3x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 09:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(5,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: pkin has to be [5x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V1G3A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 08:51:53
% EndTime: 2020-08-07 08:52:10
% DurationCPUTime: 18.66s
% Computational Cost: add. (131316->763), mult. (223941->1046), div. (24204->17), fcn. (167583->159), ass. (0->502)
t1658 = (-pkin(5) - pkin(4));
t1659 = pkin(1) * pkin(2);
t1534 = (t1658 * t1659);
t1692 = 4 * t1534;
t1691 = 2 * t1658;
t1355 = sin(qJ(1,3));
t1416 = 0.1e1 / pkin(1);
t1376 = xDP(3);
t1328 = qJ(2,3) + qJ(3,3);
t1231 = sin(t1328);
t1385 = 2 * qJ(3,3);
t1389 = 2 * qJ(2,3);
t1322 = t1385 + t1389;
t1323 = t1385 + qJ(2,3);
t1326 = t1389 + qJ(3,3);
t1329 = qJ(2,3) - qJ(3,3);
t1354 = sin(qJ(2,3));
t1386 = -2 * qJ(3,3);
t1632 = qJ(1,3) - (2 * qJ(2,3));
t1635 = qJ(3,3) + qJ(1,3);
t1636 = -qJ(3,3) + qJ(1,3);
t1625 = ((cos(qJ(2,3) - t1636) + cos(qJ(2,3) + t1635)) * t1691 + (sin(t1386 + t1632) + sin(qJ(1,3) + t1322) + 0.2e1 * t1355) * pkin(2) + (-sin(qJ(3,3) - t1632) + sin(qJ(1,3) + t1326) + sin(t1636) + sin(t1635)) * pkin(1)) / ((-sin(t1323) + t1354) * pkin(2) + (sin(t1329) - t1231) * pkin(1));
t1503 = t1376 * t1625;
t1446 = t1416 * t1503;
t1216 = t1355 * t1658;
t1362 = cos(qJ(3,3));
t1315 = t1362 ^ 2;
t1364 = cos(qJ(1,3));
t1353 = sin(qJ(3,3));
t1583 = t1353 * t1354;
t1164 = -t1216 * t1583 + (t1315 - 0.1e1) * t1364 * pkin(2);
t1350 = legFrame(3,2);
t1282 = sin(t1350);
t1285 = cos(t1350);
t1363 = cos(qJ(2,3));
t1316 = t1363 ^ 2;
t1488 = t1364 * t1583;
t1662 = 0.2e1 * pkin(2);
t1428 = pkin(1) * t1488 + (t1488 * t1662 + t1216) * t1362;
t1644 = pkin(2) * t1362;
t1521 = t1353 * t1644;
t1542 = 0.2e1 * t1644;
t1601 = (pkin(1) + t1542) * t1353;
t1291 = pkin(1) * t1362;
t1188 = t1315 * t1662 - pkin(2) + t1291;
t1606 = t1188 * t1364;
t1607 = t1188 * t1354;
t1113 = (-t1282 * t1606 + t1285 * t1601) * t1316 + (t1282 * t1428 + t1285 * t1607) * t1363 + t1164 * t1282 - t1285 * t1521;
t1377 = xDP(2);
t1211 = pkin(1) + t1644;
t1431 = pkin(2) * t1583 - t1211 * t1363;
t1170 = 0.1e1 / t1431;
t1312 = 0.1e1 / t1353;
t1589 = t1312 * t1416;
t1494 = t1170 * t1589;
t1107 = t1113 * t1377 * t1494;
t1114 = (t1282 * t1601 + t1285 * t1606) * t1316 + (t1282 * t1607 - t1285 * t1428) * t1363 - t1164 * t1285 - t1282 * t1521;
t1378 = xDP(1);
t1108 = t1114 * t1378 * t1494;
t1556 = -t1107 - t1108;
t1101 = t1446 / 0.2e1 + t1556;
t1413 = 0.1e1 / pkin(2);
t1570 = t1413 * t1416;
t1491 = t1312 * t1570;
t1155 = -t1355 * t1431 + t1364 * t1658;
t1613 = t1155 * t1376;
t1582 = t1353 * t1363;
t1520 = pkin(2) * t1582;
t1600 = t1211 * t1354;
t1173 = t1520 + t1600;
t1678 = t1364 * t1431 + t1216;
t1147 = -t1282 * t1173 + t1678 * t1285;
t1618 = t1147 * t1378;
t1146 = -t1285 * t1173 - t1678 * t1282;
t1619 = t1146 * t1377;
t1668 = (t1618 / 0.2e1 + t1619 / 0.2e1 + t1613 / 0.2e1) * t1491;
t1083 = t1101 + t1668;
t1421 = t1312 * t1413 * (t1613 + t1618 + t1619);
t1104 = t1416 * t1421;
t1092 = t1104 + t1101;
t1412 = pkin(2) ^ 2;
t1086 = t1412 * t1092;
t1415 = pkin(1) ^ 2;
t1095 = t1415 * t1101;
t1254 = cos(t1328);
t1183 = 0.1e1 / (pkin(1) * t1363 + pkin(2) * t1254);
t1143 = (-t1364 * t1376 + (t1282 * t1377 - t1285 * t1378) * t1355) * t1183;
t1384 = 3 * qJ(3,3);
t1321 = t1384 + t1389;
t1225 = sin(t1321);
t1226 = sin(t1322);
t1383 = 4 * qJ(3,3);
t1325 = t1389 + t1383;
t1228 = sin(t1325);
t1229 = sin(t1326);
t1388 = 3 * qJ(2,3);
t1246 = cos((t1384 + t1388));
t1247 = cos((t1384 + qJ(2,3)));
t1248 = cos(t1322);
t1249 = cos(t1323);
t1250 = cos((qJ(3,3) + t1388));
t1251 = cos((t1388 + t1383));
t1252 = cos((t1388 + t1385));
t1253 = cos(t1326);
t1255 = cos(t1329);
t1648 = -t1415 / 0.2e1;
t1279 = t1648 + t1412;
t1650 = -t1412 / 0.2e1;
t1280 = t1415 + t1650;
t1294 = t1412 + t1415;
t1298 = sin(t1385);
t1299 = sin(t1389);
t1307 = cos(t1389);
t1324 = t1386 + t1389;
t1327 = t1389 - qJ(3,3);
t1387 = 4 * qJ(2,3);
t1411 = pkin(2) * t1412;
t1414 = pkin(1) * t1415;
t1462 = t1412 * t1556;
t1622 = t1143 * t1658;
t1524 = pkin(1) * t1622;
t1471 = pkin(2) * t1524;
t1641 = pkin(2) * t1415;
t1475 = t1411 - 0.3e1 * t1641;
t1572 = (pkin(2) + pkin(1)) * (-pkin(2) + pkin(1));
t1663 = -0.2e1 * pkin(2);
t1476 = t1572 * t1663;
t1483 = 0.2e1 / 0.3e1 * t1570;
t1438 = t1378 * t1483;
t1439 = t1377 * t1483;
t1440 = t1376 * t1483;
t1482 = (t1146 * t1439 + t1147 * t1438 + t1155 * t1440) * t1312;
t1484 = t1572 / 0.2e1;
t1485 = t1658 * t1572;
t1504 = -4 * t1534;
t1505 = 2 * t1534;
t1509 = sin(t1384) * t1641;
t1566 = t1415 * sin(t1327);
t1515 = pkin(2) * t1566;
t1573 = t1658 * t1415;
t1525 = -0.2e1 * t1573;
t1574 = t1658 * t1412;
t1526 = 0.2e1 * t1574;
t1538 = t1416 * t1663;
t1539 = 0.3e1 * t1641;
t1348 = t1658 ^ 2;
t1224 = t1348 + t1412;
t1543 = 0.4e1 * pkin(2) * t1224;
t1552 = 0.2e1 / 0.3e1 * t1412 + t1415;
t1664 = -0.6e1 * pkin(2);
t1544 = (0.2e1 / 0.3e1 * t1348 + t1552) * t1664;
t1545 = -0.9e1 * pkin(2) * (0.8e1 / 0.9e1 * t1348 + t1552);
t1645 = pkin(1) * t1412;
t1546 = 0.5e1 * t1645;
t1547 = -0.3e1 * t1645;
t1553 = 0.4e1 / 0.3e1 * t1348 + t1415;
t1666 = -0.3e1 * pkin(1);
t1548 = (0.2e1 * t1412 + t1553) * t1666;
t1549 = (0.3e1 * t1412 + t1553) * t1666;
t1550 = 0.2e1 * pkin(1) * (0.9e1 / 0.2e1 * t1412 + t1415 + (2 * t1348));
t1559 = t1086 + t1095;
t1569 = t1414 * sin(t1324);
t1571 = t1412 * t1416;
t1646 = pkin(1) * (-0.3e1 * t1412 + t1415);
t1649 = t1412 / 0.2e1;
t1665 = -0.2e1 * pkin(1);
t1671 = 0.4e1 * t1571;
t1672 = 0.2e1 * t1571;
t1681 = t1363 + t1252;
t1682 = cos(t1388) + cos((qJ(2,3) + t1386));
t1687 = t1251 + t1249;
t1064 = (((-t1566 / 0.2e1 + t1225 * t1649 + t1229 * t1484 + t1294 * t1353 + (t1226 + t1298 - t1299) * t1659) * t1092 - ((-t1252 / 0.4e1 + t1251 / 0.4e1 + t1249 / 0.4e1 - t1363 / 0.4e1) * pkin(2) + (t1246 / 0.4e1 - t1250 / 0.4e1 + t1247 / 0.4e1 - t1254 / 0.4e1) * pkin(1)) * t1622) * t1104 * t1538 + ((t1104 * t1247 * t1505 + t1681 * (t1095 - t1086) * t1691 + t1687 * t1092 * t1526 + ((sin((t1387 + t1383)) + t1228) * t1547 + t1414 * sin(t1387) + t1475 * sin((t1387 + t1384)) - t1411 * sin((5 * qJ(3,3) + t1387)) + sin((qJ(3,3) + t1387)) * t1539 - sin((t1385 + t1387)) * t1646 + t1225 * t1544 + t1226 * t1548 + t1229 * t1543 + t1298 * t1549 + t1299 * t1550 + t1353 * t1545 - 0.3e1 * t1509 + 0.6e1 * t1515 + t1569) * t1143 + (t1255 * t1504 + t1682 * t1525) * t1101 + ((t1101 - t1668) * t1254 - (-t1246 + t1250) * t1083) * t1692) * t1143 / 0.4e1 + (-(t1421 * t1671 + t1503 * t1672 + t1095 + 0.4e1 * t1462) * pkin(1) * t1226 + t1559 * t1225 * t1663 + 0.4e1 * t1083 * t1515 - t1101 * t1228 * t1645 + t1101 * t1569 + t1092 * t1229 * t1476 + (0.3e1 * t1462 + t1095 + (0.3e1 / 0.2e1 * t1503 + 0.2e1 * t1421) * t1571) * t1298 * t1665 + ((0.4e1 / 0.5e1 * t1618 + 0.4e1 / 0.5e1 * t1619 + 0.4e1 / 0.5e1 * t1613) * t1491 + t1101) * t1299 * t1546 - 0.2e1 * t1101 * t1509 + t1353 * ((-0.2e1 / 0.3e1 * t1108 - 0.2e1 / 0.3e1 * t1107 + t1446 / 0.3e1 + t1482) * t1412 + t1415 * (t1482 + t1101)) * t1664 + 0.2e1 * (t1246 + t1254) * t1471 - 0.2e1 * (t1255 + t1250) * t1471 + (t1681 * t1485 - t1682 * t1573 + t1687 * t1574) * t1143) * t1101 / 0.2e1) * t1416) / (t1279 * t1248 + cos(t1325) * t1650 + cos(t1324) * t1648 + t1280 * t1307 - t1294 * cos(t1385) + (-cos(t1327) - cos(t1321) - cos(t1384) + 0.2e1 * t1253 + t1362) * t1659 + t1294);
t1512 = t1354 * pkin(1) * t1101;
t1551 = t1415 - t1412;
t1581 = t1354 * t1362;
t1586 = t1315 * t1412;
t1068 = (t1231 * t1622 + t1092 * (t1291 + pkin(2))) * t1104 * t1589 + ((t1354 * t1524 + (0.2e1 * t1083 * t1291 - (-t1581 - t1582) * t1622) * pkin(2) + t1559) * t1101 + (((pkin(1) * t1542 + t1551 + 0.2e1 * t1586) * t1316 - 0.2e1 * t1600 * t1520 - t1586 + t1224) * t1143 + (t1512 - (-pkin(2) * t1581 - t1520) * t1092) * t1658) * t1143) * t1491;
t1071 = (t1092 * t1231 * t1663 - 0.2e1 * t1512 - t1622) * t1143 * t1183;
t1098 = t1101 ^ 2;
t1371 = (rSges(3,3) + pkin(4));
t1647 = m(3) * t1371;
t1657 = m(2) * rSges(2,3);
t1187 = rSges(2,1) * t1657 + pkin(1) * t1647 - Icges(2,5);
t1203 = rSges(3,2) * t1647 - Icges(3,6);
t1204 = rSges(3,1) * t1647 - Icges(3,5);
t1221 = rSges(2,2) * t1657 - Icges(2,6);
t1128 = -(t1203 * t1353 - t1204 * t1362 - t1187) * t1354 + (t1203 * t1362 + t1204 * t1353 + t1221) * t1363;
t1158 = t1203 * t1254 + t1204 * t1231;
t1191 = rSges(3,1) * t1353 + rSges(3,2) * t1362;
t1407 = rSges(3,2) ^ 2;
t1409 = rSges(3,1) ^ 2;
t1194 = m(3) * (-t1407 + t1409) - Icges(3,1) + Icges(3,2);
t1656 = m(3) * rSges(3,2);
t1563 = pkin(1) * t1656;
t1206 = t1353 * t1563;
t1219 = rSges(3,1) * t1656 - Icges(3,4);
t1222 = m(2) * rSges(2,1) * rSges(2,2) - Icges(2,4);
t1288 = t1407 + t1409;
t1209 = t1415 + t1288;
t1408 = rSges(2,2) ^ 2;
t1410 = rSges(2,1) ^ 2;
t1290 = t1408 + t1410;
t1425 = -((2 * t1371 ^ 2) + t1209) * m(3) / 0.2e1 - ((2 * rSges(2,3) ^ 2) + t1290) * m(2) / 0.2e1 - (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) - Icges(3,2) / 0.2e1 - Icges(2,2) / 0.2e1 - Icges(3,1) / 0.2e1 - Icges(2,1) / 0.2e1 - Icges(1,3);
t1434 = rSges(3,1) * t1229 + rSges(3,2) * t1253;
t1592 = t1222 * t1307;
t1595 = t1219 * t1248;
t1186 = t1415 * m(3) + (-t1408 + t1410) * m(2) + Icges(2,2) - Icges(2,1);
t1610 = t1186 * t1299;
t1654 = -t1194 / 0.2e1;
t1655 = -t1186 / 0.2e1;
t1660 = pkin(1) * m(3);
t1675 = -0.2e1 * t1083;
t1468 = t1183 * (t1128 * t1064 + t1158 * t1068 + (t1226 * t1219 + t1248 * t1654 + t1299 * t1222 + t1307 * t1655 + t1206 + t1425 + (rSges(3,2) * t1229 + (-t1253 - t1362) * rSges(3,1)) * t1660) * t1071 + (-t1187 * t1363 + t1221 * t1354) * t1098 + (t1203 * t1231 - t1204 * t1254) * t1092 ^ 2 + ((-0.2e1 * t1592 - t1610) * t1101 + (-t1194 * t1226 - 0.2e1 * t1595) * t1092 + (-t1104 * t1191 + t1434 * t1675) * t1660) * t1143);
t1690 = t1355 * t1468;
t1358 = sin(qJ(1,2));
t1337 = qJ(2,2) + qJ(3,2);
t1238 = sin(t1337);
t1393 = 2 * qJ(3,2);
t1397 = 2 * qJ(2,2);
t1331 = t1393 + t1397;
t1332 = t1393 + qJ(2,2);
t1334 = t1397 + qJ(3,2);
t1338 = qJ(2,2) - qJ(3,2);
t1357 = sin(qJ(2,2));
t1394 = -2 * qJ(3,2);
t1633 = qJ(1,2) - (2 * qJ(2,2));
t1637 = qJ(3,2) + qJ(1,2);
t1638 = -qJ(3,2) + qJ(1,2);
t1624 = ((cos(qJ(2,2) - t1638) + cos(qJ(2,2) + t1637)) * t1691 + (sin(t1394 + t1633) + sin(qJ(1,2) + t1331) + 0.2e1 * t1358) * pkin(2) + (sin(t1638) + sin(t1637) - sin(qJ(3,2) - t1633) + sin(qJ(1,2) + t1334)) * pkin(1)) / ((-sin(t1332) + t1357) * pkin(2) + (sin(t1338) - t1238) * pkin(1));
t1502 = t1376 * t1624;
t1445 = t1416 * t1502;
t1217 = t1358 * t1658;
t1365 = cos(qJ(3,2));
t1317 = t1365 ^ 2;
t1367 = cos(qJ(1,2));
t1356 = sin(qJ(3,2));
t1580 = t1356 * t1357;
t1165 = -t1217 * t1580 + (t1317 - 0.1e1) * t1367 * pkin(2);
t1351 = legFrame(2,2);
t1283 = sin(t1351);
t1286 = cos(t1351);
t1366 = cos(qJ(2,2));
t1318 = t1366 ^ 2;
t1487 = t1367 * t1580;
t1427 = pkin(1) * t1487 + (t1487 * t1662 + t1217) * t1365;
t1643 = pkin(2) * t1365;
t1519 = t1356 * t1643;
t1541 = 0.2e1 * t1643;
t1599 = (pkin(1) + t1541) * t1356;
t1292 = pkin(1) * t1365;
t1189 = t1317 * t1662 - pkin(2) + t1292;
t1604 = t1189 * t1367;
t1605 = t1189 * t1357;
t1115 = (-t1283 * t1604 + t1286 * t1599) * t1318 + (t1283 * t1427 + t1286 * t1605) * t1366 + t1165 * t1283 - t1286 * t1519;
t1213 = pkin(1) + t1643;
t1430 = pkin(2) * t1580 - t1213 * t1366;
t1171 = 0.1e1 / t1430;
t1313 = 0.1e1 / t1356;
t1588 = t1313 * t1416;
t1493 = t1171 * t1588;
t1109 = t1115 * t1377 * t1493;
t1116 = (t1283 * t1599 + t1286 * t1604) * t1318 + (t1283 * t1605 - t1286 * t1427) * t1366 - t1165 * t1286 - t1283 * t1519;
t1110 = t1116 * t1378 * t1493;
t1555 = -t1109 - t1110;
t1102 = t1445 / 0.2e1 + t1555;
t1490 = t1313 * t1570;
t1156 = -t1358 * t1430 + t1367 * t1658;
t1612 = t1156 * t1376;
t1579 = t1356 * t1366;
t1518 = pkin(2) * t1579;
t1598 = t1213 * t1357;
t1174 = t1518 + t1598;
t1677 = t1367 * t1430 + t1217;
t1149 = -t1283 * t1174 + t1677 * t1286;
t1616 = t1149 * t1378;
t1148 = -t1286 * t1174 - t1677 * t1283;
t1617 = t1148 * t1377;
t1669 = (t1616 / 0.2e1 + t1617 / 0.2e1 + t1612 / 0.2e1) * t1490;
t1084 = t1102 + t1669;
t1420 = t1313 * t1413 * (t1612 + t1616 + t1617);
t1105 = t1416 * t1420;
t1093 = t1105 + t1102;
t1087 = t1412 * t1093;
t1096 = t1415 * t1102;
t1266 = cos(t1337);
t1184 = 0.1e1 / (pkin(1) * t1366 + pkin(2) * t1266);
t1144 = (-t1367 * t1376 + (t1283 * t1377 - t1286 * t1378) * t1358) * t1184;
t1391 = 4 * qJ(3,2);
t1330 = t1391 + t1397;
t1232 = sin(t1330);
t1233 = sin(t1331);
t1392 = 3 * qJ(3,2);
t1333 = t1397 + t1392;
t1234 = sin(t1333);
t1235 = sin(t1334);
t1257 = cos((t1392 + qJ(2,2)));
t1258 = cos(t1331);
t1259 = cos(t1332);
t1396 = 3 * qJ(2,2);
t1260 = cos((qJ(3,2) + t1396));
t1262 = cos((t1396 + t1391));
t1263 = cos((t1396 + t1392));
t1264 = cos((t1396 + t1393));
t1265 = cos(t1334);
t1267 = cos(t1338);
t1301 = sin(t1393);
t1302 = sin(t1397);
t1309 = cos(t1397);
t1335 = t1397 - qJ(3,2);
t1336 = t1397 + t1394;
t1395 = 4 * qJ(2,2);
t1461 = t1412 * t1555;
t1621 = t1144 * t1658;
t1523 = pkin(1) * t1621;
t1470 = pkin(2) * t1523;
t1481 = (t1148 * t1439 + t1149 * t1438 + t1156 * t1440) * t1313;
t1508 = sin(t1392) * t1641;
t1565 = t1415 * sin(t1335);
t1514 = pkin(2) * t1565;
t1558 = t1087 + t1096;
t1568 = t1414 * sin(t1336);
t1680 = t1366 + t1264;
t1685 = t1262 + t1259;
t1686 = cos((t1394 + qJ(2,2))) + cos(t1396);
t1062 = (((-t1565 / 0.2e1 + t1234 * t1649 + t1235 * t1484 + t1294 * t1356 + (t1233 + t1301 - t1302) * t1659) * t1093 - ((-t1264 / 0.4e1 + t1262 / 0.4e1 + t1259 / 0.4e1 - t1366 / 0.4e1) * pkin(2) + (t1263 / 0.4e1 - t1260 / 0.4e1 + t1257 / 0.4e1 - t1266 / 0.4e1) * pkin(1)) * t1621) * t1105 * t1538 + ((t1105 * t1257 * t1505 + t1680 * (t1096 - t1087) * t1691 + t1685 * t1093 * t1526 + ((sin((t1395 + t1391)) + t1232) * t1547 + t1414 * sin(t1395) + t1475 * sin((t1392 + t1395)) - t1411 * sin((5 * qJ(3,2) + t1395)) + sin((qJ(3,2) + t1395)) * t1539 - sin((t1395 + t1393)) * t1646 + t1233 * t1548 + t1234 * t1544 + t1235 * t1543 + t1301 * t1549 + t1302 * t1550 + t1356 * t1545 - 0.3e1 * t1508 + 0.6e1 * t1514 + t1568) * t1144 + (t1267 * t1504 + t1686 * t1525) * t1102 + ((t1102 - t1669) * t1266 - (t1260 - t1263) * t1084) * t1692) * t1144 / 0.4e1 + (t1558 * t1234 * t1663 - (t1420 * t1671 + t1502 * t1672 + t1096 + 0.4e1 * t1461) * pkin(1) * t1233 + 0.4e1 * t1084 * t1514 + t1102 * t1568 - t1102 * t1232 * t1645 + t1093 * t1235 * t1476 + (0.3e1 * t1461 + t1096 + (0.3e1 / 0.2e1 * t1502 + 0.2e1 * t1420) * t1571) * t1301 * t1665 + ((0.4e1 / 0.5e1 * t1616 + 0.4e1 / 0.5e1 * t1617 + 0.4e1 / 0.5e1 * t1612) * t1490 + t1102) * t1302 * t1546 - 0.2e1 * t1102 * t1508 + t1356 * ((-0.2e1 / 0.3e1 * t1110 - 0.2e1 / 0.3e1 * t1109 + t1445 / 0.3e1 + t1481) * t1412 + t1415 * (t1481 + t1102)) * t1664 + 0.2e1 * (t1263 + t1266) * t1470 - 0.2e1 * (t1267 + t1260) * t1470 + (t1680 * t1485 - t1686 * t1573 + t1685 * t1574) * t1144) * t1102 / 0.2e1) * t1416) / (t1279 * t1258 + cos(t1336) * t1648 + cos(t1330) * t1650 + t1280 * t1309 - t1294 * cos(t1393) + (-cos(t1335) - cos(t1333) - cos(t1392) + 0.2e1 * t1265 + t1365) * t1659 + t1294);
t1511 = t1357 * pkin(1) * t1102;
t1578 = t1357 * t1365;
t1585 = t1317 * t1412;
t1069 = (t1238 * t1621 + t1093 * (t1292 + pkin(2))) * t1105 * t1588 + ((t1357 * t1523 + (0.2e1 * t1084 * t1292 - (-t1578 - t1579) * t1621) * pkin(2) + t1558) * t1102 + (((pkin(1) * t1541 + t1551 + 0.2e1 * t1585) * t1318 - 0.2e1 * t1598 * t1518 - t1585 + t1224) * t1144 + (t1511 - (-pkin(2) * t1578 - t1518) * t1093) * t1658) * t1144) * t1490;
t1072 = (t1093 * t1238 * t1663 - 0.2e1 * t1511 - t1621) * t1144 * t1184;
t1099 = t1102 ^ 2;
t1129 = -(t1203 * t1356 - t1204 * t1365 - t1187) * t1357 + (t1203 * t1365 + t1204 * t1356 + t1221) * t1366;
t1159 = t1203 * t1266 + t1204 * t1238;
t1192 = rSges(3,1) * t1356 + rSges(3,2) * t1365;
t1207 = t1356 * t1563;
t1433 = rSges(3,1) * t1235 + rSges(3,2) * t1265;
t1591 = t1222 * t1309;
t1594 = t1219 * t1258;
t1609 = t1186 * t1302;
t1674 = -0.2e1 * t1084;
t1467 = t1184 * (t1129 * t1062 + t1159 * t1069 + (t1233 * t1219 + t1258 * t1654 + t1302 * t1222 + t1309 * t1655 + t1207 + t1425 + (rSges(3,2) * t1235 + (-t1265 - t1365) * rSges(3,1)) * t1660) * t1072 + (-t1187 * t1366 + t1221 * t1357) * t1099 + (t1203 * t1238 - t1204 * t1266) * t1093 ^ 2 + ((-0.2e1 * t1591 - t1609) * t1102 + (-t1194 * t1233 - 0.2e1 * t1594) * t1093 + (-t1105 * t1192 + t1433 * t1674) * t1660) * t1144);
t1689 = t1358 * t1467;
t1361 = sin(qJ(1,1));
t1346 = qJ(2,1) + qJ(3,1);
t1245 = sin(t1346);
t1401 = 2 * qJ(3,1);
t1405 = 2 * qJ(2,1);
t1340 = t1401 + t1405;
t1341 = t1401 + qJ(2,1);
t1344 = t1405 + qJ(3,1);
t1347 = qJ(2,1) - qJ(3,1);
t1360 = sin(qJ(2,1));
t1402 = -2 * qJ(3,1);
t1634 = qJ(1,1) - (2 * qJ(2,1));
t1639 = qJ(3,1) + qJ(1,1);
t1640 = -qJ(3,1) + qJ(1,1);
t1623 = ((cos(qJ(2,1) - t1640) + cos(qJ(2,1) + t1639)) * t1691 + (sin(t1402 + t1634) + sin(qJ(1,1) + t1340) + 0.2e1 * t1361) * pkin(2) + (-sin(qJ(3,1) - t1634) + sin(qJ(1,1) + t1344) + sin(t1640) + sin(t1639)) * pkin(1)) / ((-sin(t1341) + t1360) * pkin(2) + (sin(t1347) - t1245) * pkin(1));
t1501 = t1376 * t1623;
t1444 = t1416 * t1501;
t1218 = t1361 * t1658;
t1368 = cos(qJ(3,1));
t1319 = t1368 ^ 2;
t1370 = cos(qJ(1,1));
t1359 = sin(qJ(3,1));
t1577 = t1359 * t1360;
t1166 = -t1218 * t1577 + (t1319 - 0.1e1) * t1370 * pkin(2);
t1352 = legFrame(1,2);
t1284 = sin(t1352);
t1287 = cos(t1352);
t1369 = cos(qJ(2,1));
t1320 = t1369 ^ 2;
t1486 = t1370 * t1577;
t1426 = pkin(1) * t1486 + (t1486 * t1662 + t1218) * t1368;
t1642 = pkin(2) * t1368;
t1517 = t1359 * t1642;
t1540 = 0.2e1 * t1642;
t1597 = (pkin(1) + t1540) * t1359;
t1293 = pkin(1) * t1368;
t1190 = t1319 * t1662 - pkin(2) + t1293;
t1602 = t1190 * t1370;
t1603 = t1190 * t1360;
t1117 = (-t1284 * t1602 + t1287 * t1597) * t1320 + (t1284 * t1426 + t1287 * t1603) * t1369 + t1166 * t1284 - t1287 * t1517;
t1215 = pkin(1) + t1642;
t1429 = pkin(2) * t1577 - t1215 * t1369;
t1172 = 0.1e1 / t1429;
t1314 = 0.1e1 / t1359;
t1587 = t1314 * t1416;
t1492 = t1172 * t1587;
t1111 = t1117 * t1377 * t1492;
t1118 = (t1284 * t1597 + t1287 * t1602) * t1320 + (t1284 * t1603 - t1287 * t1426) * t1369 - t1166 * t1287 - t1284 * t1517;
t1112 = t1118 * t1378 * t1492;
t1554 = -t1111 - t1112;
t1103 = t1444 / 0.2e1 + t1554;
t1489 = t1314 * t1570;
t1157 = -t1361 * t1429 + t1370 * t1658;
t1611 = t1157 * t1376;
t1576 = t1359 * t1369;
t1516 = pkin(2) * t1576;
t1596 = t1215 * t1360;
t1175 = t1516 + t1596;
t1676 = t1370 * t1429 + t1218;
t1151 = -t1284 * t1175 + t1676 * t1287;
t1614 = t1151 * t1378;
t1150 = -t1287 * t1175 - t1676 * t1284;
t1615 = t1150 * t1377;
t1670 = (t1614 / 0.2e1 + t1615 / 0.2e1 + t1611 / 0.2e1) * t1489;
t1085 = t1103 + t1670;
t1419 = t1314 * t1413 * (t1611 + t1614 + t1615);
t1106 = t1416 * t1419;
t1094 = t1106 + t1103;
t1088 = t1412 * t1094;
t1097 = t1415 * t1103;
t1277 = cos(t1346);
t1185 = 0.1e1 / (pkin(1) * t1369 + pkin(2) * t1277);
t1145 = (-t1370 * t1376 + (t1284 * t1377 - t1287 * t1378) * t1361) * t1185;
t1400 = 3 * qJ(3,1);
t1339 = t1400 + t1405;
t1239 = sin(t1339);
t1240 = sin(t1340);
t1399 = 4 * qJ(3,1);
t1343 = t1405 + t1399;
t1242 = sin(t1343);
t1243 = sin(t1344);
t1404 = 3 * qJ(2,1);
t1268 = cos((t1400 + t1404));
t1269 = cos((t1400 + qJ(2,1)));
t1270 = cos(t1340);
t1271 = cos(t1341);
t1273 = cos((t1404 + t1399));
t1274 = cos((t1404 + t1401));
t1275 = cos((t1404 + qJ(3,1)));
t1276 = cos(t1344);
t1278 = cos(t1347);
t1304 = sin(t1401);
t1305 = sin(t1405);
t1311 = cos(t1405);
t1342 = t1402 + t1405;
t1345 = t1405 - qJ(3,1);
t1403 = 4 * qJ(2,1);
t1460 = t1412 * t1554;
t1620 = t1145 * t1658;
t1522 = pkin(1) * t1620;
t1469 = pkin(2) * t1522;
t1480 = (t1150 * t1439 + t1151 * t1438 + t1157 * t1440) * t1314;
t1507 = sin(t1400) * t1641;
t1564 = t1415 * sin(t1345);
t1513 = pkin(2) * t1564;
t1557 = t1088 + t1097;
t1567 = t1414 * sin(t1342);
t1679 = t1369 + t1274;
t1683 = t1273 + t1271;
t1684 = cos((t1402 + qJ(2,1))) + cos(t1404);
t1063 = (((-t1564 / 0.2e1 + t1239 * t1649 + t1243 * t1484 + t1294 * t1359 + (t1240 + t1304 - t1305) * t1659) * t1094 - ((-t1274 / 0.4e1 + t1273 / 0.4e1 + t1271 / 0.4e1 - t1369 / 0.4e1) * pkin(2) + (t1268 / 0.4e1 - t1275 / 0.4e1 + t1269 / 0.4e1 - t1277 / 0.4e1) * pkin(1)) * t1620) * t1106 * t1538 + ((t1106 * t1269 * t1505 + t1679 * (t1097 - t1088) * t1691 + t1683 * t1094 * t1526 + ((sin((t1403 + t1399)) + t1242) * t1547 + t1414 * sin(t1403) + t1475 * sin((t1403 + t1400)) - t1411 * sin((5 * qJ(3,1) + t1403)) + sin((t1403 + qJ(3,1))) * t1539 - sin((t1403 + t1401)) * t1646 + t1239 * t1544 + t1240 * t1548 + t1243 * t1543 + t1304 * t1549 + t1305 * t1550 + t1359 * t1545 - 0.3e1 * t1507 + 0.6e1 * t1513 + t1567) * t1145 + (t1278 * t1504 + t1684 * t1525) * t1103 + ((t1103 - t1670) * t1277 - (-t1268 + t1275) * t1085) * t1692) * t1145 / 0.4e1 + (-(t1419 * t1671 + t1501 * t1672 + t1097 + 0.4e1 * t1460) * pkin(1) * t1240 + t1557 * t1239 * t1663 + 0.4e1 * t1085 * t1513 - t1103 * t1242 * t1645 + t1103 * t1567 + t1094 * t1243 * t1476 + (0.3e1 * t1460 + t1097 + (0.3e1 / 0.2e1 * t1501 + 0.2e1 * t1419) * t1571) * t1304 * t1665 + ((0.4e1 / 0.5e1 * t1614 + 0.4e1 / 0.5e1 * t1615 + 0.4e1 / 0.5e1 * t1611) * t1489 + t1103) * t1305 * t1546 - 0.2e1 * t1103 * t1507 + t1359 * ((-0.2e1 / 0.3e1 * t1112 - 0.2e1 / 0.3e1 * t1111 + t1444 / 0.3e1 + t1480) * t1412 + t1415 * (t1480 + t1103)) * t1664 + 0.2e1 * (t1268 + t1277) * t1469 - 0.2e1 * (t1278 + t1275) * t1469 + (t1679 * t1485 - t1684 * t1573 + t1683 * t1574) * t1145) * t1103 / 0.2e1) * t1416) / (t1279 * t1270 + cos(t1343) * t1650 + cos(t1342) * t1648 + t1280 * t1311 - t1294 * cos(t1401) + (-cos(t1345) - cos(t1339) - cos(t1400) + 0.2e1 * t1276 + t1368) * t1659 + t1294);
t1510 = t1360 * pkin(1) * t1103;
t1575 = t1360 * t1368;
t1584 = t1319 * t1412;
t1070 = (t1245 * t1620 + t1094 * (t1293 + pkin(2))) * t1106 * t1587 + ((t1360 * t1522 + (0.2e1 * t1085 * t1293 - (-t1575 - t1576) * t1620) * pkin(2) + t1557) * t1103 + (((pkin(1) * t1540 + t1551 + 0.2e1 * t1584) * t1320 - 0.2e1 * t1596 * t1516 - t1584 + t1224) * t1145 + (t1510 - (-pkin(2) * t1575 - t1516) * t1094) * t1658) * t1145) * t1489;
t1073 = (t1094 * t1245 * t1663 - 0.2e1 * t1510 - t1620) * t1145 * t1185;
t1100 = t1103 ^ 2;
t1130 = -(t1203 * t1359 - t1204 * t1368 - t1187) * t1360 + (t1203 * t1368 + t1204 * t1359 + t1221) * t1369;
t1160 = t1203 * t1277 + t1204 * t1245;
t1193 = rSges(3,1) * t1359 + rSges(3,2) * t1368;
t1208 = t1359 * t1563;
t1432 = rSges(3,1) * t1243 + rSges(3,2) * t1276;
t1590 = t1222 * t1311;
t1593 = t1219 * t1270;
t1608 = t1186 * t1305;
t1673 = -0.2e1 * t1085;
t1466 = t1185 * (t1130 * t1063 + t1160 * t1070 + (t1240 * t1219 + t1270 * t1654 + t1305 * t1222 + t1311 * t1655 + t1208 + t1425 + (rSges(3,2) * t1243 + (-t1276 - t1368) * rSges(3,1)) * t1660) * t1073 + (-t1187 * t1369 + t1221 * t1360) * t1100 + (t1203 * t1245 - t1204 * t1277) * t1094 ^ 2 + ((-0.2e1 * t1590 - t1608) * t1103 + (-t1194 * t1240 - 0.2e1 * t1593) * t1094 + (-t1106 * t1193 + t1432 * t1673) * t1660) * t1145);
t1688 = t1361 * t1466;
t1653 = t1194 / 0.2e1;
t1537 = t1191 * t1660;
t1536 = t1192 * t1660;
t1535 = t1193 * t1660;
t1533 = t1660 / 0.2e1;
t1532 = rSges(3,1) * t1291;
t1531 = rSges(3,1) * t1292;
t1530 = rSges(3,1) * t1293;
t1140 = t1143 ^ 2;
t1125 = t1140 * t1226 * t1653;
t1167 = -Icges(3,3) + t1206 + (-t1288 - t1532) * m(3);
t1202 = -m(3) * t1288 - Icges(3,3);
t1465 = t1312 * (t1064 * t1167 + t1068 * t1202 + t1071 * t1158 + t1098 * t1537 + t1125 + (t1595 + (t1191 + t1434) * t1533) * t1140);
t1141 = t1144 ^ 2;
t1126 = t1141 * t1233 * t1653;
t1168 = -Icges(3,3) + t1207 + (-t1288 - t1531) * m(3);
t1464 = t1313 * (t1062 * t1168 + t1069 * t1202 + t1072 * t1159 + t1099 * t1536 + t1126 + (t1594 + (t1192 + t1433) * t1533) * t1141);
t1142 = t1145 ^ 2;
t1127 = t1142 * t1240 * t1653;
t1169 = -Icges(3,3) + t1208 + (-t1288 - t1530) * m(3);
t1463 = t1314 * (t1063 * t1169 + t1070 * t1202 + t1073 * t1160 + t1100 * t1535 + t1127 + (t1593 + (t1193 + t1432) * t1533) * t1142);
t1447 = -m(2) * t1290 - Icges(2,3) - Icges(3,3);
t1056 = t1128 * t1071 + (0.2e1 * t1206 + (-t1209 - 0.2e1 * t1532) * m(3) + t1447) * t1064 + t1167 * t1068;
t1074 = t1104 * t1537 * t1675 + t1125 + (t1595 + t1610 / 0.2e1 + t1592 + t1434 * t1660) * t1140;
t1437 = t1170 * t1312 * (t1056 + t1074);
t1057 = t1129 * t1072 + (0.2e1 * t1207 + (-t1209 - 0.2e1 * t1531) * m(3) + t1447) * t1062 + t1168 * t1069;
t1075 = t1105 * t1536 * t1674 + t1126 + (t1594 + t1609 / 0.2e1 + t1591 + t1433 * t1660) * t1141;
t1436 = t1171 * t1313 * (t1057 + t1075);
t1058 = t1130 * t1073 + (0.2e1 * t1208 + (-t1209 - 0.2e1 * t1530) * m(3) + t1447) * t1063 + t1169 * t1070;
t1076 = t1106 * t1535 * t1673 + t1127 + (t1593 + t1608 / 0.2e1 + t1590 + t1432 * t1660) * t1142;
t1435 = t1172 * t1314 * (t1058 + t1076);
t1 = [-t1287 * t1688 - t1286 * t1689 - t1285 * t1690 + (-t1118 * t1435 - t1116 * t1436 - t1114 * t1437 + (t1147 * t1465 + t1149 * t1464 + t1151 * t1463) * t1413) * t1416; t1284 * t1688 + t1283 * t1689 + t1282 * t1690 + (-t1117 * t1435 - t1115 * t1436 - t1113 * t1437 + (t1146 * t1465 + t1148 * t1464 + t1150 * t1463) * t1413) * t1416; -t1370 * t1466 - t1367 * t1467 - t1364 * t1468 + ((t1058 / 0.2e1 + t1076 / 0.2e1) * t1623 + (t1057 / 0.2e1 + t1075 / 0.2e1) * t1624 + (t1056 / 0.2e1 + t1074 / 0.2e1) * t1625 + (t1155 * t1465 + t1156 * t1464 + t1157 * t1463) * t1413) * t1416;];
taucX  = t1;
