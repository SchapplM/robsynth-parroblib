% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P3RRRRR7V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% xDP [3x1]
%   Generalized platform velocities
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [18x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P3RRRRR7V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [3x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 10:08
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1),zeros(18,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp: xP has to be [3x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [3 1]), ...
  'P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp: xDP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [3x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [18 1]), ...
  'P3RRRRR7V2G2A0_coriolisvec_para_pf_mdp: MDP has to be [18x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 10:03:38
% EndTime: 2020-08-07 10:08:54
% DurationCPUTime: 333.06s
% Computational Cost: add. (4691463->1842), mult. (10213758->3044), div. (74106->37), fcn. (5728686->186), ass. (0->1240)
t8264 = 2 * pkin(1);
t8263 = 4 * pkin(2);
t8194 = 2 * pkin(3);
t8262 = 2 * pkin(1);
t7355 = sin(qJ(3,3));
t7277 = 0.1e1 / t7355;
t7352 = legFrame(3,2);
t7221 = sin(t7352);
t7224 = cos(t7352);
t7374 = xDP(2);
t7375 = xDP(1);
t6978 = -t7221 * t7374 + t7224 * t7375;
t7376 = pkin(5) + pkin(6);
t7276 = pkin(7) + t7376;
t7357 = sin(qJ(1,3));
t7091 = t7357 * t7276;
t7366 = cos(qJ(1,3));
t7246 = pkin(1) * t7366;
t7373 = xDP(3);
t6986 = t7373 * (t7246 + t7091);
t7241 = pkin(1) * t7357;
t7942 = t7366 * t7276;
t6899 = t6986 / 0.2e1 + t6978 * (t7241 - t7942 / 0.2e1);
t6975 = t7221 * t7375 + t7224 * t7374;
t6969 = pkin(1) * t6975;
t7356 = sin(qJ(2,3));
t7967 = t7356 * t7357;
t7743 = t6978 * t7967;
t6900 = -pkin(2) * t7743 + t6969;
t7962 = t7357 * t7375;
t7963 = t7357 * t7374;
t7553 = -t7221 * t7963 + t7224 * t7962;
t6906 = t7553 * pkin(1) + t6986;
t7364 = cos(qJ(3,3));
t7231 = t7364 * pkin(3);
t7104 = t7231 + pkin(2);
t7227 = t7355 * pkin(1);
t7287 = t7364 ^ 2;
t8149 = t7287 - 0.1e1;
t7863 = pkin(3) * t8149;
t7365 = cos(qJ(2,3));
t7968 = t7355 * t7365;
t6918 = t7104 * t7968 + t7356 * t7863 + t7227;
t8028 = t6978 * t7357;
t6948 = pkin(2) * t8028;
t8035 = t6975 * t7356;
t6951 = pkin(2) * t8035;
t6954 = pkin(1) * t8035;
t7969 = t7355 * t7356;
t7830 = pkin(3) * t7969;
t7053 = pkin(1) - t7830;
t8006 = t7104 * t7365;
t6966 = t7053 + t8006;
t7027 = t7241 - t7942;
t7081 = pkin(1) * t7091;
t7414 = pkin(3) ^ 2;
t7347 = t7414 / 0.2e1;
t7421 = pkin(1) ^ 2;
t7214 = t7347 + t7421;
t7418 = pkin(2) ^ 2;
t7351 = t7418 / 0.2e1;
t7084 = t7351 + t7214;
t7128 = 0.2e1 / 0.3e1 * pkin(5) + 0.2e1 / 0.3e1 * pkin(6) + 0.2e1 / 0.3e1 * pkin(7);
t7348 = -t7414 / 0.2e1;
t7213 = t7348 + t7418;
t7237 = pkin(3) * t7287;
t7256 = t7414 + t7421;
t7386 = 0.2e1 * qJ(3,3);
t7258 = sin(t7386);
t7286 = t7364 * t7287;
t7289 = t7365 ^ 2;
t7288 = t7365 * t7289;
t7556 = t6978 * (t7241 - t7942 / 0.3e1);
t7926 = (pkin(2) + pkin(3)) * (pkin(2) - pkin(3));
t7866 = 2 * t7926;
t7559 = t7866 * t8028;
t7390 = 0.2e1 * qJ(2,3);
t7268 = cos(t7390);
t7932 = t7373 * t7366;
t7592 = t6918 * t7268 * t7932;
t7943 = t7364 * t7365;
t7594 = t7943 * t7969;
t7821 = pkin(2) * t7932;
t7669 = t7356 * t7821;
t8029 = t6978 * t7027;
t7688 = t6951 + t8029;
t7259 = sin(t7390);
t7726 = t7259 * t7932;
t7729 = t7027 * t7969;
t7742 = t7364 * t8028;
t7744 = t7355 * t8028;
t7240 = pkin(1) * t7356;
t8119 = pkin(3) * t7355;
t7050 = t7240 - t8119;
t8014 = t7050 * t7364;
t7747 = t6975 * t8014;
t8140 = pkin(2) * t6975;
t7889 = pkin(1) * t8140;
t7813 = 0.4e1 * t7889;
t8136 = pkin(2) * t7356;
t7831 = t6899 * t8136;
t7857 = pkin(1) * t7942;
t8185 = 0.2e1 * t7214;
t7875 = t6975 * t8185;
t7904 = -0.4e1 * t7286 + 0.5e1 * t7364;
t7944 = t7364 * t7355;
t7975 = t7287 * t7356;
t8034 = t6975 * t7364;
t8058 = (t7373 * (t7214 * t7366 + t7081) + t6978 * (t7214 * t7357 - t7857)) * t7356;
t8105 = t7365 * pkin(3);
t8106 = t7364 * pkin(2);
t7266 = cos(t7386);
t8125 = pkin(3) * t7266;
t8180 = 0.2e1 * t7287;
t8148 = t8180 - 0.1e1;
t8159 = pkin(2) * pkin(3);
t8165 = -pkin(2) / 0.2e1;
t8171 = 0.2e1 * t7373;
t8179 = 0.4e1 * t7287;
t8181 = -2 * t7256;
t8186 = -0.2e1 * t7213;
t8191 = -0.2e1 * t6975;
t8196 = -3 * pkin(3);
t8197 = -5 * pkin(3);
t8237 = (t7287 * t8191 + 0.2e1 * t7355 * t7742 + t6975) * pkin(3);
t8245 = 0.2e1 * t7289;
t6846 = -(-t7592 + ((-t7744 + t8034) * pkin(2) - t8237) * t7288 + (t6969 * t7364 - t7688 * t7355 + (-pkin(2) * t7742 + (t7944 * t8191 - t8028 * t8148) * pkin(3)) * t7356) * t7289 + ((-t7356 * t8029 - t8140) * t7364 + (-t6954 + t6948) * t7355 + t8237) * t7365 + t7743 * t7237 - t7053 * t8034 + (-pkin(3) * t7967 + t7027 * t7355) * t6978) * t8125 + (-t6918 * t7726 + t7365 * ((t6948 * t7364 + t7355 * t8140) * t7289 + (t6900 * t7355 + t7364 * t7688) * t7365 + t7747 - t6978 * t7729) + ((t7944 * t8245 + (-t7356 + 0.2e1 * t7975) * t7365) * t6975 + (t7289 * t8148 - 0.2e1 * t7594 - t8149) * t8028) * t8105) * pkin(3) * t7258 + t6966 * (t7364 + 0.1e1) * (t7364 - 0.1e1) * pkin(2) * t7726 + t7592 * t8106 + (t7559 * t7944 + 0.2e1 * (-t7287 * t7926 + t7213) * t6975 + ((t8179 - 0.3e1) * t7744 + t7904 * t6975) * t8159) * t7288 + ((t7356 * t7559 - 0.4e1 * t7889) * t7287 + (t6899 * t8263 + t7866 * t8035) * t7944 + t7743 * t8186 + t7813 + ((t6906 + t6951) * t7355 * t8179 - 0.3e1 * (t6951 + 0.2e1 / 0.3e1 * t6986 + t7556) * t7355 + t7904 * t6900) * pkin(3)) * t7289 + ((0.4e1 * (t6954 + (-t7932 / 0.2e1 + t7553) * t8165) * t8119 + 0.4e1 * t7831 + t6975 * t8181) * t7287 + ((t7356 * t7813 + (t7084 * t7366 + t7081) * t8171 + 0.2e1 * t6978 * (t7256 * t7357 - t7857)) * t7355 + ((0.4e1 / 0.5e1 * t6986 + t6978 * (t7241 - t7942 / 0.5e1)) * t7356 + 0.3e1 / 0.5e1 * t8140) * t8197) * t7364 - 0.3e1 * (t6954 - (t7932 / 0.3e1 + t7553) * pkin(2)) * t8119 - 0.4e1 * t7831 + t7875) * t7365 + (-t6906 * t8119 + t8058) * t8180 + ((pkin(1) * t7821 + t7356 * t7875) * t7355 + (t7669 / 0.3e1 + t6969) * t8196) * t7364 + 0.3e1 * (t7373 * (t7128 * t7357 + t7246) + t7556) * t8119 - 0.2e1 * t8058 + ((0.4e1 * t6906 * t7356 + 0.2e1 * t8140) * t7365 + t7669 + 0.2e1 * t6969) * pkin(3) * t7286;
t7130 = pkin(2) * t7231;
t8160 = pkin(1) * pkin(3);
t7886 = -0.3e1 / 0.2e1 * t8160;
t7965 = t7356 * t7365;
t7974 = t7289 * t7355;
t8118 = pkin(3) * t7356;
t8156 = t7258 / 0.2e1;
t8184 = 0.2e1 * t7227;
t6876 = (t7104 * t7965 + t7240 + (t7289 - 0.1e1) * t8119) * t8125 / 0.2e1 + t6966 * t8105 * t8156 + (t7130 + t7213) * t7974 + ((t7227 - t8118 / 0.2e1) * t7231 + (t8184 + (t7287 - 0.3e1 / 0.2e1) * t8118) * pkin(2)) * t7365 + t7975 * t8160 + t7214 * t7355 + t7356 * t7886;
t8067 = t6846 / t6876;
t7771 = t7277 * t8067;
t7585 = t7771 / 0.2e1;
t6837 = pkin(2) * t7585;
t7419 = 1 / pkin(2);
t6838 = t7419 * t7585;
t7720 = t7355 * t7967;
t7019 = t7276 * t7720;
t7897 = t7414 - t7418;
t7048 = t7897 * t7374;
t7049 = t7897 * t7375;
t7088 = pkin(1) * t7969;
t7059 = t7088 - pkin(3);
t7054 = pkin(1) - 0.2e1 * t7830;
t7490 = t7054 * t7357 - t7942;
t7230 = t7287 * t7414;
t7713 = (t7553 + t7932) * t7230;
t7717 = t7373 * t7926;
t7723 = t7356 * t7942;
t8095 = -2 * t8159;
t7809 = t7375 * t8095;
t7810 = t7374 * t8095;
t8111 = pkin(3) * t7375;
t7838 = t7355 * t8111;
t8112 = pkin(3) * t7374;
t7839 = t7355 * t8112;
t8129 = pkin(2) * t7375;
t7852 = t7356 * t8129;
t8130 = pkin(2) * t7374;
t7853 = t7356 * t8130;
t7872 = -0.2e1 * t7230;
t6960 = t7054 * t7366 + t7091;
t7935 = t7373 * t6960;
t8113 = pkin(3) * t7373;
t6855 = (-0.2e1 * t7713 - 0.2e1 * ((pkin(2) * t7962 + t7839) * t7224 + (-pkin(2) * t7963 + t7838) * t7221 + t7821) * t7231 + (t7049 * t7357 + t7355 * t7810) * t7224 + (-t7048 * t7357 + t7355 * t7809) * t7221 - t7366 * t7717) * t7289 + (t7872 * t8035 - ((t7375 * t7490 + 0.2e1 * t7853) * t7224 + (-t7374 * t7490 + 0.2e1 * t7852) * t7221 + t7935) * t7231 + (-pkin(1) * t7839 + t7048 * t7356 - t7490 * t8129) * t7224 + (-pkin(1) * t7838 + t7049 * t7356 + t7490 * t8130) * t7221 - pkin(2) * t7935) * t7365 + t7713 - pkin(3) * t7747 + (-pkin(1) * t7853 + (t7059 * t7962 + (-t7375 * t7723 + t8130) * t7355) * pkin(3)) * t7224 + (-pkin(1) * t7852 + (-t7059 * t7963 + (t7374 * t7723 + t8129) * t7355) * pkin(3)) * t7221 + (t7059 * t7366 + t7019) * t8113;
t7415 = 1 / pkin(3);
t6963 = 0.1e1 / t6966;
t7981 = t7277 * t7419;
t7750 = t6963 * t7981;
t7601 = t7415 * t7750;
t7523 = t6855 * t7601;
t6822 = t6838 + t7523;
t8073 = t6822 * t7414;
t6801 = t6837 - t8073;
t6804 = t6837 + t8073;
t6850 = t7523 / 0.2e1;
t6816 = t6838 + t6850;
t7385 = 0.3e1 * qJ(3,3);
t7299 = t7385 + qJ(2,3);
t7139 = sin(t7299);
t7301 = t7386 + t7390;
t7140 = sin(t7301);
t7302 = t7386 + qJ(2,3);
t7141 = sin(t7302);
t7303 = qJ(3,3) + t7390;
t7142 = sin(t7303);
t7387 = -0.2e1 * qJ(3,3);
t7305 = t7387 + t7390;
t7144 = sin(t7305);
t7384 = 0.4e1 * qJ(3,3);
t7308 = t7390 + t7384;
t7145 = sin(t7308);
t7309 = t7390 + t7385;
t7146 = sin(t7309);
t7310 = qJ(2,3) + qJ(3,3);
t7147 = sin(t7310);
t7311 = qJ(2,3) - qJ(3,3);
t7148 = sin(t7311);
t7312 = qJ(2,3) + t7387;
t7149 = sin(t7312);
t7389 = 0.3e1 * qJ(2,3);
t7298 = t7384 + t7389;
t7172 = cos(t7298);
t7173 = cos(t7299);
t7300 = t7386 + t7389;
t7174 = cos(t7300);
t7176 = cos(t7302);
t7177 = cos(t7303);
t7306 = t7389 + t7385;
t7178 = cos(t7306);
t7307 = t7389 + qJ(3,3);
t7179 = cos(t7307);
t7180 = cos(t7309);
t7181 = cos(t7310);
t7182 = cos(t7311);
t7255 = -3 * t7414 + t7418;
t7257 = sin(t7385);
t7388 = 0.4e1 * qJ(2,3);
t7413 = pkin(3) * t7414;
t7417 = pkin(2) * t7418;
t6930 = t6978 * t7366 - t7357 * t7373;
t8133 = pkin(2) * t7365;
t7016 = pkin(3) * t7181 + pkin(1) + t8133;
t7001 = 0.1e1 / t7016;
t8047 = t6930 * t7001;
t7610 = t7926 * t8047;
t7505 = t7276 * t7610;
t7759 = t7276 * t8047;
t7675 = pkin(3) * t7759;
t7575 = pkin(2) * t7675;
t7586 = -t7771 / 0.2e1;
t7631 = t7419 * t7771;
t7672 = pkin(2) * t7771;
t7683 = pkin(2) * t7759;
t8110 = pkin(3) * t7418;
t7894 = 3 * t8110;
t7696 = -t7413 + t7894;
t7697 = pkin(3) * t7866;
t7703 = (t7141 - t7356) * pkin(3);
t7707 = t7926 / 0.4e1;
t7757 = t7414 * t8047;
t7814 = 12 * t8159;
t7815 = t7180 * t8110;
t7304 = -qJ(3,3) + t7390;
t7923 = t7418 * sin(t7304);
t7818 = pkin(3) * t7923;
t8128 = pkin(3) * t7147;
t7845 = t6822 * t8128;
t7864 = -12 * pkin(1) * t8159;
t7865 = 6 * t7926;
t7876 = 6 * t7418;
t7878 = 3 * t7414;
t7251 = t7276 ^ 2;
t7905 = t7251 / 0.3e1 + t7421;
t7047 = t7414 / 0.3e1 + t7905;
t7883 = -0.12e2 * pkin(3) * t7047;
t7884 = 0.12e2 * pkin(3) * (t7351 + t7047);
t8152 = t7414 / 0.4e1;
t7885 = 0.24e2 * pkin(3) * (t8152 + 0.3e1 / 0.8e1 * t7418 + t7905);
t7895 = -3 * t8110;
t7896 = -5 * pkin(2) * t7414;
t7925 = t7414 * t7419;
t8040 = t6963 * t7415;
t8041 = t6963 * t7277;
t7350 = t7418 / 0.4e1;
t7706 = t7350 + t7905;
t8162 = 0.12e2 * t7347 + 0.12e2 * t7706;
t7345 = 0.3e1 / 0.4e1 * t7414;
t8163 = 0.12e2 * t7345 + 0.12e2 * t7706;
t7380 = -2 * t7418;
t8164 = -0.12e2 * t7345 + t7380 - 0.12e2 * t7905;
t8168 = 6 * t7414;
t7705 = t7251 + 0.9e1 / 0.4e1 * t7414 + t7421;
t8187 = (12 * t7418) + 0.8e1 * t7705;
t8188 = -(6 * t7418) - 0.8e1 * t7705;
t8195 = -2 * pkin(3);
t8199 = 2 * pkin(2);
t8203 = -2 * pkin(1);
t8205 = -8 * pkin(1);
t7183 = cos(t7312);
t8227 = -t7183 - cos(t7389);
t8228 = -t7177 + t7180;
t8229 = t7174 + t7365;
t8230 = t7172 + t7176;
t8161 = pkin(1) * pkin(2);
t8241 = 8 * t8161;
t8242 = 2 * t7414;
t8246 = 4 * pkin(1);
t7110 = -0.2e1 * t7130;
t7175 = cos(t7301);
t7379 = -2 * t7414;
t7704 = t7379 + t7380 - 4 * t7421;
t8094 = 2 * t8159;
t8096 = -4 * t8159;
t8097 = 4 * t8160;
t8098 = -8 * t8160;
t8099 = 4 * t8161;
t8100 = -8 * t8161;
t8215 = t7379 + t7418;
t8251 = 4 * t7421 + 2 * t7418 + t8242;
t8255 = t7380 + t7414;
t8250 = t7175 * t8215 + cos(t7305) * t7418 + cos(t7308) * t7414 + t7177 * t8096 + t7181 * t8098 + t7365 * t8100 + t7110 + t7704 + (t7176 + t7183) * t8099 + (t7173 + t7182) * t8097 + (cos(t7304) + cos(t7385)) * t8094 + t8255 * t7268 + t8251 * t7266;
t8258 = t7175 - t7268 - t7266;
t6765 = -((0.2e1 * t6855 * t7173 * t8041 + t8230 * t6822 * t8242 + 0.2e1 * t8229 * t6801 + (t8228 * t6822 * t8246 + ((t6838 - t7523 / 0.2e1) * t7181 + (t7178 - t7179) * t6816) * t8263) * pkin(3) + (t7182 * t8195 + t8227 * pkin(2) + (0.1e1 + t8258) * t8264) * t7771) * t7276 + (t7257 * t7894 - 0.6e1 * t7818 + t7355 * t7885 + t7142 * t7883 + t7146 * t7884 + sin(qJ(3,3) + t7388) * t7895 + t7696 * sin(t7385 + t7388) + t7413 * sin(0.5e1 * qJ(3,3) + t7388) + (-sin(t7388) - t7144) * t7417 + (t7255 * sin(t7386 + t7388) + t7259 * t8164 + t7258 * t8163 + t7140 * t8162 + (sin(t7384 + t7388) + t7145) * t7878) * pkin(2) + (sin(t7300) * t7865 + sin(t7298) * t8168 + t7356 * t8188 + t7141 * t8187 + (-sin(t7389) - t7149) * t7876 + (sin(t7306) - sin(t7307) + t7139 + t7147 - 0.2e1 * t7148) * t7814) * pkin(1)) * t8047) / (t8250 * t8199 + 0.4e1 * t7815) * t8047 + ((t7845 * t8241 + (t6837 + 0.4e1 * t8073) * pkin(2) * t7140 + pkin(3) * t7257 * t7672 + t6822 * t7142 * t7697 + 0.2e1 * t7139 * t7771 * t8160 + 0.8e1 * ((0.3e1 / 0.8e1 * t7631 + t6850) * t7418 + t6822 * t7214) * t8119 + t7414 * t7145 * t7585 + t7418 * t7144 * t7586 + (t6838 + 0.2e1 / 0.3e1 * t7523) * t7148 * t7864 - 0.4e1 * t6816 * t7818 + (t6838 + 0.4e1 / 0.5e1 * t7523) * t7259 * t7896 + (t7356 * t8073 - t7683 / 0.4e1) * t8205 + t6804 * t7146 * t8194 + (t7672 / 0.4e1 + (0.3e1 / 0.4e1 * t8067 + t6855 * t8040) * t7277 * t7925 + t7421 * t6838) * t7258 * t8263 + (t6837 + 0.2e1 * t8073) * t7141 * t8246 + t7149 * t7672 * t8203 + t8230 * t7276 * t7757 + t8227 * t7418 * t7759 + t8228 * t7675 * t8264 - 0.2e1 * (t7182 + t7179) * t7575 + 0.2e1 * (t7181 + t7178) * t7575 + t8229 * t7505 + t8258 * t7683 * t8262) * t7419 * t7586 - 0.8e1 * (((t7180 / 0.4e1 - t7177 / 0.4e1) * pkin(1) + (-t7174 / 0.8e1 + t7172 / 0.8e1 + t7176 / 0.8e1 - t7365 / 0.8e1) * pkin(3) + (t7178 / 0.8e1 + t7173 / 0.8e1 - t7179 / 0.8e1 - t7181 / 0.8e1) * pkin(2)) * t7759 + (t7146 * t8152 - t7923 / 0.4e1 + t7142 * t7707 + t7084 * t7355 + pkin(1) * t7703 + ((-t7148 + t7147) * pkin(1) + (t7140 / 0.2e1 - t7259 / 0.2e1 + t8156) * pkin(3)) * pkin(2)) * t6822) * t6855 * t7750) / (t8250 * pkin(2) + 0.2e1 * t7815);
t7408 = 0.2e1 * pkin(7);
t7899 = 0.2e1 * pkin(6) + t7408;
t7460 = pkin(7) ^ 2 + t7421 + (t7408 + pkin(6)) * pkin(6) + (t7899 + pkin(5)) * pkin(5);
t6985 = t7414 + t7460;
t6984 = t7878 + t7460;
t8204 = -4 * pkin(1);
t7538 = t7830 * t8204 + t6984;
t7758 = t7356 * t8047;
t7682 = pkin(2) * t7758;
t7860 = pkin(1) * t8047;
t7892 = 0.2e1 * t7231;
t7900 = -0.3e1 / 0.4e1 * t7414 + t7350;
t8137 = pkin(2) * t7276;
t8157 = 0.3e1 / 0.2e1 * t7418 + t7348;
t8170 = -3 * t7413;
t6781 = 0.4e1 * t7104 * (t7230 + t7130 / 0.2e1 + t7900) * t7288 * t8047 + (t7053 * t7757 * t8180 + (-(t6822 * t7276 + 0.3e1 * t7682) * t8119 / 0.2e1 + pkin(2) * t7860) * t7892 - (t6816 * t8137 + t7758 * t8157) * t8119 + pkin(1) * t7610) * t8245 + ((t6816 * t7110 + t6822 * t7872 - t6801) * t7356 * t7276 + (t7286 * t8170 + t7538 * t7231 + (t7538 - 0.3e1 * t7230) * pkin(2)) * t8047) * t7365 - ((-t6822 * t7231 + t7586) * t7355 * t7276 + (t6985 * t7969 + (-t7287 * t7830 + (t8180 - 0.2e1) * pkin(1)) * pkin(3)) * t8047) * pkin(3);
t6921 = t6930 ^ 2;
t7002 = 0.1e1 / t7016 ^ 2;
t6903 = t6921 * t7002;
t6849 = t7523 / 0.3e1;
t7613 = t7276 * t7758;
t7710 = -t8047 / 0.2e1;
t7871 = 0.2e1 * t7230;
t7278 = 0.1e1 / t7355 ^ 2;
t7420 = 1 / pkin(2) ^ 2;
t7980 = t7278 * t7420;
t8143 = pkin(2) * t6816;
t8240 = -0.2e1 / 0.3e1 * pkin(2);
t7535 = (-0.2e1 * t7104 * t7675 * t7974 + ((-t7613 + t8143) * t7871 + 0.3e1 * (t7613 * t8240 + (t7631 / 0.6e1 + t6849) * t7414 + t7418 * (t6838 + t6849)) * t7231 - t7356 * t7505 + t6804 * pkin(2)) * t7365 + (-(t6816 * t8136 + t7276 * t7710) * t8119 + pkin(1) * t8143) * t7892 - (t6804 * t7356 - t7683) * t8119 + pkin(1) * t6804) * t7980 * t8067;
t8046 = t6930 * t7002;
t8151 = t7419 / 0.2e1;
t6792 = (t7845 - t7759 + (t7147 * t6855 * t6963 * t7419 + (t7356 / 0.2e1 + (t8128 + t8136) * t8151) * t8067) * t7277) * t8046;
t7964 = t7356 * t7376;
t7791 = t6792 * t7964;
t6909 = 0.1e1 / (pkin(2) * (pkin(2) * t7147 + t7703 + t8184) - t7148 * t7418);
t7252 = t8242 + t7418;
t8093 = 3 * t8159;
t7798 = ((-pkin(3) * t7140 + (-t7142 - t7355) * pkin(2)) * t7759 + (t7418 * t7182 + t7176 * t8159 + t7252 * t7181 + t7365 * t8093 + (pkin(3) + t8106) * t8264) * t6822) * t6855 * t6909;
t8200 = -2 * pkin(2);
t8261 = t7791 + ((-t7535 / 0.4e1 + (t6781 * t7710 - t7798 / 0.2e1) * t7981) * t8040 + t6765) * t8200 - (pkin(1) + 0.2e1 * t8133) * t7356 * t6903;
t7358 = sin(qJ(3,2));
t7280 = 0.1e1 / t7358;
t7353 = legFrame(2,2);
t7222 = sin(t7353);
t7225 = cos(t7353);
t6979 = -t7222 * t7374 + t7225 * t7375;
t7360 = sin(qJ(1,2));
t7092 = t7360 * t7276;
t7369 = cos(qJ(1,2));
t7247 = pkin(1) * t7369;
t6987 = t7373 * (t7247 + t7092);
t7243 = pkin(1) * t7360;
t7939 = t7369 * t7276;
t6897 = t6987 / 0.2e1 + t6979 * (t7243 - t7939 / 0.2e1);
t6976 = t7222 * t7375 + t7225 * t7374;
t6970 = pkin(1) * t6976;
t7359 = sin(qJ(2,2));
t7959 = t7359 * t7360;
t7740 = t6979 * t7959;
t6901 = -pkin(2) * t7740 + t6970;
t7954 = t7360 * t7375;
t7955 = t7360 * t7374;
t7552 = -t7222 * t7955 + t7225 * t7954;
t6907 = t7552 * pkin(1) + t6987;
t7367 = cos(qJ(3,2));
t7233 = t7367 * pkin(3);
t7106 = t7233 + pkin(2);
t7228 = t7358 * pkin(1);
t7291 = t7367 ^ 2;
t8147 = t7291 - 0.1e1;
t7862 = pkin(3) * t8147;
t7368 = cos(qJ(2,2));
t7960 = t7358 * t7368;
t6919 = t7106 * t7960 + t7359 * t7862 + t7228;
t8026 = t6979 * t7360;
t6949 = pkin(2) * t8026;
t8033 = t6976 * t7359;
t6952 = pkin(2) * t8033;
t6955 = pkin(1) * t8033;
t7961 = t7358 * t7359;
t7828 = pkin(3) * t7961;
t7055 = pkin(1) - t7828;
t8003 = t7106 * t7368;
t6967 = t7055 + t8003;
t7028 = t7243 - t7939;
t7082 = pkin(1) * t7092;
t7238 = pkin(3) * t7291;
t7394 = 0.2e1 * qJ(3,2);
t7261 = sin(t7394);
t7290 = t7367 * t7291;
t7293 = t7368 ^ 2;
t7292 = t7368 * t7293;
t7555 = t6979 * (t7243 - t7939 / 0.3e1);
t7558 = t7866 * t8026;
t7398 = 0.2e1 * qJ(2,2);
t7271 = cos(t7398);
t7931 = t7373 * t7369;
t7591 = t6919 * t7271 * t7931;
t7940 = t7367 * t7368;
t7593 = t7940 * t7961;
t7820 = pkin(2) * t7931;
t7668 = t7359 * t7820;
t8027 = t6979 * t7028;
t7687 = t6952 + t8027;
t7262 = sin(t7398);
t7725 = t7262 * t7931;
t7728 = t7028 * t7961;
t7739 = t7367 * t8026;
t7741 = t7358 * t8026;
t7242 = pkin(1) * t7359;
t8117 = pkin(3) * t7358;
t7051 = t7242 - t8117;
t8013 = t7051 * t7367;
t7746 = t6976 * t8013;
t8139 = pkin(2) * t6976;
t7888 = pkin(1) * t8139;
t7812 = 0.4e1 * t7888;
t8135 = pkin(2) * t7359;
t7833 = t6897 * t8135;
t7856 = pkin(1) * t7939;
t7874 = t6976 * t8185;
t7903 = -0.4e1 * t7290 + 0.5e1 * t7367;
t7941 = t7367 * t7358;
t7973 = t7291 * t7359;
t8032 = t6976 * t7367;
t8057 = (t7373 * (t7214 * t7369 + t7082) + t6979 * (t7214 * t7360 - t7856)) * t7359;
t8103 = t7368 * pkin(3);
t8104 = t7367 * pkin(2);
t7269 = cos(t7394);
t8124 = pkin(3) * t7269;
t8177 = 0.2e1 * t7291;
t8146 = t8177 - 0.1e1;
t8176 = 0.4e1 * t7291;
t8190 = -0.2e1 * t6976;
t8238 = (t7291 * t8190 + 0.2e1 * t7358 * t7739 + t6976) * pkin(3);
t8244 = 0.2e1 * t7293;
t6847 = -(-t7591 + ((-t7741 + t8032) * pkin(2) - t8238) * t7292 + (t6970 * t7367 - t7687 * t7358 + (-pkin(2) * t7739 + (t7941 * t8190 - t8026 * t8146) * pkin(3)) * t7359) * t7293 + ((-t7359 * t8027 - t8139) * t7367 + (-t6955 + t6949) * t7358 + t8238) * t7368 + t7740 * t7238 - t7055 * t8032 + t6979 * (-pkin(3) * t7959 + t7028 * t7358)) * t8124 + (-t6919 * t7725 + t7368 * ((t6949 * t7367 + t7358 * t8139) * t7293 + (t6901 * t7358 + t7367 * t7687) * t7368 + t7746 - t6979 * t7728) + ((t7941 * t8244 + (-t7359 + 0.2e1 * t7973) * t7368) * t6976 + (t7293 * t8146 - 0.2e1 * t7593 - t8147) * t8026) * t8103) * pkin(3) * t7261 + t6967 * (t7367 + 0.1e1) * (t7367 - 0.1e1) * pkin(2) * t7725 + t7591 * t8104 + (t7558 * t7941 + 0.2e1 * (-t7291 * t7926 + t7213) * t6976 + ((t8176 - 0.3e1) * t7741 + t7903 * t6976) * t8159) * t7292 + ((t7359 * t7558 - 0.4e1 * t7888) * t7291 + (t6897 * t8263 + t7866 * t8033) * t7941 + t7740 * t8186 + t7812 + ((t6907 + t6952) * t7358 * t8176 - 0.3e1 * (t6952 + 0.2e1 / 0.3e1 * t6987 + t7555) * t7358 + t7903 * t6901) * pkin(3)) * t7293 + ((0.4e1 * (t6955 + (-t7931 / 0.2e1 + t7552) * t8165) * t8117 + 0.4e1 * t7833 + t6976 * t8181) * t7291 + ((t7359 * t7812 + (t7084 * t7369 + t7082) * t8171 + 0.2e1 * t6979 * (t7256 * t7360 - t7856)) * t7358 + ((0.4e1 / 0.5e1 * t6987 + t6979 * (t7243 - t7939 / 0.5e1)) * t7359 + 0.3e1 / 0.5e1 * t8139) * t8197) * t7367 - 0.3e1 * (t6955 - (t7931 / 0.3e1 + t7552) * pkin(2)) * t8117 - 0.4e1 * t7833 + t7874) * t7368 + (-t6907 * t8117 + t8057) * t8177 + ((pkin(1) * t7820 + t7359 * t7874) * t7358 + (t7668 / 0.3e1 + t6970) * t8196) * t7367 + 0.3e1 * (t7373 * (t7128 * t7360 + t7247) + t7555) * t8117 - 0.2e1 * t8057 + ((0.4e1 * t6907 * t7359 + 0.2e1 * t8139) * t7368 + t7668 + 0.2e1 * t6970) * pkin(3) * t7290;
t7131 = pkin(2) * t7233;
t7957 = t7359 * t7368;
t7972 = t7293 * t7358;
t8116 = pkin(3) * t7359;
t8155 = t7261 / 0.2e1;
t8183 = 0.2e1 * t7228;
t6877 = (t7106 * t7957 + t7242 + (t7293 - 0.1e1) * t8117) * t8124 / 0.2e1 + t6967 * t8103 * t8155 + (t7131 + t7213) * t7972 + ((t7228 - t8116 / 0.2e1) * t7233 + (t8183 + (t7291 - 0.3e1 / 0.2e1) * t8116) * pkin(2)) * t7368 + t7973 * t8160 + t7214 * t7358 + t7359 * t7886;
t8066 = t6847 / t6877;
t7770 = t7280 * t8066;
t7583 = t7770 / 0.2e1;
t6841 = pkin(2) * t7583;
t6839 = t7419 * t7583;
t7719 = t7358 * t7959;
t7020 = t7276 * t7719;
t7089 = pkin(1) * t7961;
t7060 = t7089 - pkin(3);
t7056 = pkin(1) - 0.2e1 * t7828;
t7489 = t7056 * t7360 - t7939;
t7232 = t7291 * t7414;
t7712 = (t7552 + t7931) * t7232;
t7722 = t7359 * t7939;
t7836 = t7358 * t8111;
t7837 = t7358 * t8112;
t7849 = t7359 * t8129;
t7850 = t7359 * t8130;
t7870 = -0.2e1 * t7232;
t6961 = t7056 * t7369 + t7092;
t7934 = t7373 * t6961;
t6856 = (-0.2e1 * t7712 - 0.2e1 * ((pkin(2) * t7954 + t7837) * t7225 + (-pkin(2) * t7955 + t7836) * t7222 + t7820) * t7233 + (t7049 * t7360 + t7358 * t7810) * t7225 + (-t7048 * t7360 + t7358 * t7809) * t7222 - t7369 * t7717) * t7293 + (t7870 * t8033 - ((t7375 * t7489 + 0.2e1 * t7850) * t7225 + (-t7374 * t7489 + 0.2e1 * t7849) * t7222 + t7934) * t7233 + (-pkin(1) * t7837 + t7048 * t7359 - t7489 * t8129) * t7225 + (-pkin(1) * t7836 + t7049 * t7359 + t7489 * t8130) * t7222 - pkin(2) * t7934) * t7368 + t7712 - pkin(3) * t7746 + (-pkin(1) * t7850 + (t7060 * t7954 + (-t7375 * t7722 + t8130) * t7358) * pkin(3)) * t7225 + (-pkin(1) * t7849 + (-t7060 * t7955 + (t7374 * t7722 + t8129) * t7358) * pkin(3)) * t7222 + (t7060 * t7369 + t7020) * t8113;
t6964 = 0.1e1 / t6967;
t7979 = t7280 * t7419;
t7749 = t6964 * t7979;
t7600 = t7415 * t7749;
t7522 = t6856 * t7600;
t6823 = t6839 + t7522;
t8072 = t6823 * t7414;
t6802 = t6841 - t8072;
t6805 = t6841 + t8072;
t6852 = t7522 / 0.2e1;
t6817 = t6839 + t6852;
t7392 = 0.4e1 * qJ(3,2);
t7313 = t7392 + t7398;
t7150 = sin(t7313);
t7316 = t7394 + t7398;
t7151 = sin(t7316);
t7317 = t7394 + qJ(2,2);
t7152 = sin(t7317);
t7318 = qJ(3,2) + t7398;
t7153 = sin(t7318);
t7393 = 0.3e1 * qJ(3,2);
t7322 = t7398 + t7393;
t7155 = sin(t7322);
t7395 = -0.2e1 * qJ(3,2);
t7323 = t7398 + t7395;
t7156 = sin(t7323);
t7324 = qJ(2,2) + t7393;
t7157 = sin(t7324);
t7325 = qJ(2,2) + qJ(3,2);
t7158 = sin(t7325);
t7326 = qJ(2,2) - qJ(3,2);
t7159 = sin(t7326);
t7327 = qJ(2,2) + t7395;
t7160 = sin(t7327);
t7397 = 0.3e1 * qJ(2,2);
t7314 = t7393 + t7397;
t7184 = cos(t7314);
t7315 = t7394 + t7397;
t7185 = cos(t7315);
t7187 = cos(t7317);
t7188 = cos(t7318);
t7319 = -qJ(3,2) + t7398;
t7189 = cos(t7319);
t7320 = t7397 + t7392;
t7190 = cos(t7320);
t7321 = t7397 + qJ(3,2);
t7191 = cos(t7321);
t7192 = cos(t7322);
t7193 = cos(t7323);
t7194 = cos(t7324);
t7195 = cos(t7325);
t7196 = cos(t7326);
t7260 = sin(t7393);
t7396 = 0.4e1 * qJ(2,2);
t6931 = t6979 * t7369 - t7360 * t7373;
t8132 = pkin(2) * t7368;
t7017 = pkin(3) * t7195 + pkin(1) + t8132;
t7003 = 0.1e1 / t7017;
t8045 = t6931 * t7003;
t7606 = t7926 * t8045;
t7504 = t7276 * t7606;
t7756 = t7276 * t8045;
t7674 = pkin(3) * t7756;
t7574 = pkin(2) * t7674;
t7584 = -t7770 / 0.2e1;
t7627 = t7419 * t7770;
t7677 = pkin(3) * t7770;
t7681 = pkin(2) * t7756;
t7685 = pkin(2) * t7770;
t7702 = (t7152 - t7359) * pkin(3);
t7754 = t7414 * t8045;
t7805 = 2 * t8110;
t7922 = t7418 * sin(t7319);
t7817 = pkin(3) * t7922;
t8127 = pkin(3) * t7158;
t7844 = t6823 * t8127;
t7893 = 4 * t8110;
t8038 = t6964 * t7415;
t8039 = t6964 * t7280;
t7197 = cos(t7327);
t8223 = -t7197 - cos(t7397);
t8224 = -t7188 + t7192;
t8225 = t7187 + t7190;
t8226 = t7185 + t7368;
t7112 = -0.2e1 * t7131;
t7186 = cos(t7316);
t8249 = t7186 * t8215 + cos(t7393) * t8094 + cos(t7313) * t7414 + t7188 * t8096 + t7195 * t8098 + t7368 * t8100 + t7112 + t7704 + (t7187 + t7197) * t8099 + (t7194 + t7196) * t8097 + t8255 * t7271 + t8251 * t7269;
t8257 = t7186 - t7271 - t7269;
t6766 = -((0.2e1 * t6856 * t7194 * t8039 + t8225 * t6823 * t8242 + 0.2e1 * t8226 * t6802 + (t8224 * t6823 * t8246 + ((t6839 - t7522 / 0.2e1) * t7195 + (t7184 - t7191) * t6817) * t8263) * pkin(3) + (t7196 * t8195 + t8223 * pkin(2) + (0.1e1 + t8257) * t8264) * t7770) * t7276 + (t7696 * sin(t7393 + t7396) + t7413 * sin(0.5e1 * qJ(3,2) + t7396) + sin(qJ(3,2) + t7396) * t7895 + t7260 * t7894 - 0.6e1 * t7817 + t7358 * t7885 + t7153 * t7883 + t7155 * t7884 + (-t7156 - sin(t7396)) * t7417 + (t7255 * sin(t7396 + t7394) + t7262 * t8164 + t7261 * t8163 + t7151 * t8162 + (sin(t7392 + t7396) + t7150) * t7878) * pkin(2) + (sin(t7315) * t7865 + sin(t7320) * t8168 + t7359 * t8188 + t7152 * t8187 + (-sin(t7397) - t7160) * t7876 + (sin(t7314) - sin(t7321) + t7157 + t7158 - 0.2e1 * t7159) * t7814) * pkin(1)) * t8045) / (t7192 * t7893 + (t7189 * t8094 + t7193 * t7418 + t8249) * t8199) * t8045 + ((0.8e1 * ((0.3e1 / 0.8e1 * t7627 + t6852) * t7418 + t6823 * t7214) * t8117 + t7844 * t8241 + t6823 * t7153 * t7697 + t7414 * t7150 * t7583 + t7418 * t7156 * t7584 + (t6839 + 0.2e1 / 0.3e1 * t7522) * t7159 * t7864 - 0.4e1 * t6817 * t7817 + (t6839 + 0.4e1 / 0.5e1 * t7522) * t7262 * t7896 + (t7359 * t8072 - t7681 / 0.4e1) * t8205 + t6805 * t7155 * t8194 + (t7685 / 0.4e1 + (0.3e1 / 0.4e1 * t8066 + t6856 * t8038) * t7280 * t7925 + t7421 * t6839) * t7261 * t8263 + (t6841 + 0.2e1 * t8072) * t7152 * t8246 + t7160 * t7685 * t8203 + t8225 * t7276 * t7754 + t8223 * t7418 * t7756 - 0.2e1 * (t7196 + t7191) * t7574 + 0.2e1 * (t7195 + t7184) * t7574 + t8226 * t7504 + ((t6841 + 0.4e1 * t8072) * t7151 + t7260 * t7677) * pkin(2) + t8257 * t7681 * t8262 + (t7157 * t7677 + t8224 * t7674) * t8264) * t7419 * t7584 - 0.8e1 * (((t7192 / 0.4e1 - t7188 / 0.4e1) * pkin(1) + (t7190 / 0.8e1 - t7185 / 0.8e1 + t7187 / 0.8e1 - t7368 / 0.8e1) * pkin(3) + (t7184 / 0.8e1 + t7194 / 0.8e1 - t7191 / 0.8e1 - t7195 / 0.8e1) * pkin(2)) * t7756 + (t7155 * t8152 - t7922 / 0.4e1 + t7153 * t7707 + t7084 * t7358 + pkin(1) * t7702 + ((-t7159 + t7158) * pkin(1) + (t7151 / 0.2e1 - t7262 / 0.2e1 + t8155) * pkin(3)) * pkin(2)) * t6823) * t6856 * t7749) / (t7417 * t7193 + (t7189 + t7192) * t7805 + t8249 * pkin(2));
t7537 = t7828 * t8204 + t6984;
t7755 = t7359 * t8045;
t7680 = pkin(2) * t7755;
t7859 = pkin(1) * t8045;
t7891 = 0.2e1 * t7233;
t6782 = 0.4e1 * t7106 * (t7232 + t7131 / 0.2e1 + t7900) * t7292 * t8045 + (t7055 * t7754 * t8177 + (-(t6823 * t7276 + 0.3e1 * t7680) * t8117 / 0.2e1 + pkin(2) * t7859) * t7891 - (t6817 * t8137 + t7755 * t8157) * t8117 + pkin(1) * t7606) * t8244 + ((t6817 * t7112 + t6823 * t7870 - t6802) * t7359 * t7276 + (t7290 * t8170 + t7537 * t7233 + (t7537 - 0.3e1 * t7232) * pkin(2)) * t8045) * t7368 - ((-t6823 * t7233 + t7584) * t7358 * t7276 + (t6985 * t7961 + (-t7291 * t7828 + (t8177 - 0.2e1) * pkin(1)) * pkin(3)) * t8045) * pkin(3);
t6922 = t6931 ^ 2;
t7004 = 0.1e1 / t7017 ^ 2;
t6904 = t6922 * t7004;
t6851 = t7522 / 0.3e1;
t7609 = t7276 * t7755;
t7709 = -t8045 / 0.2e1;
t7869 = 0.2e1 * t7232;
t7281 = 0.1e1 / t7358 ^ 2;
t7978 = t7281 * t7420;
t8142 = pkin(2) * t6817;
t7534 = (-0.2e1 * t7106 * t7674 * t7972 + ((-t7609 + t8142) * t7869 + 0.3e1 * (t7609 * t8240 + (t7627 / 0.6e1 + t6851) * t7414 + t7418 * (t6839 + t6851)) * t7233 - t7359 * t7504 + t6805 * pkin(2)) * t7368 + (-(t6817 * t8135 + t7276 * t7709) * t8117 + pkin(1) * t8142) * t7891 - (t6805 * t7359 - t7681) * t8117 + pkin(1) * t6805) * t7978 * t8066;
t8044 = t6931 * t7004;
t6793 = (t7844 - t7756 + (t7158 * t6856 * t6964 * t7419 + (t7359 / 0.2e1 + (t8127 + t8135) * t8151) * t8066) * t7280) * t8044;
t7956 = t7359 * t7376;
t7786 = t6793 * t7956;
t6911 = 0.1e1 / (pkin(2) * (pkin(2) * t7158 + t7702 + t8183) - t7159 * t7418);
t7797 = ((-pkin(3) * t7151 + (-t7153 - t7358) * pkin(2)) * t7756 + (t7418 * t7196 + t7187 * t8159 + t7252 * t7195 + t7368 * t8093 + (pkin(3) + t8104) * t8264) * t6823) * t6856 * t6911;
t8260 = t7786 + ((-t7534 / 0.4e1 + (t6782 * t7709 - t7797 / 0.2e1) * t7979) * t8038 + t6766) * t8200 - (pkin(1) + 0.2e1 * t8132) * t7359 * t6904;
t7361 = sin(qJ(3,1));
t7283 = 0.1e1 / t7361;
t7354 = legFrame(1,2);
t7223 = sin(t7354);
t7226 = cos(t7354);
t6980 = -t7223 * t7374 + t7226 * t7375;
t7363 = sin(qJ(1,1));
t7093 = t7363 * t7276;
t7372 = cos(qJ(1,1));
t7248 = pkin(1) * t7372;
t6988 = t7373 * (t7248 + t7093);
t7245 = pkin(1) * t7363;
t7936 = t7372 * t7276;
t6898 = t6988 / 0.2e1 + t6980 * (t7245 - t7936 / 0.2e1);
t6977 = t7223 * t7375 + t7226 * t7374;
t6971 = pkin(1) * t6977;
t7362 = sin(qJ(2,1));
t7950 = t7362 * t7363;
t7737 = t6980 * t7950;
t6902 = -pkin(2) * t7737 + t6971;
t7945 = t7363 * t7375;
t7946 = t7363 * t7374;
t7551 = -t7223 * t7946 + t7226 * t7945;
t6908 = t7551 * pkin(1) + t6988;
t7370 = cos(qJ(3,1));
t7235 = t7370 * pkin(3);
t7108 = t7235 + pkin(2);
t7229 = t7361 * pkin(1);
t7295 = t7370 ^ 2;
t8145 = t7295 - 0.1e1;
t7861 = pkin(3) * t8145;
t7371 = cos(qJ(2,1));
t7952 = t7361 * t7371;
t6920 = t7108 * t7952 + t7362 * t7861 + t7229;
t8024 = t6980 * t7363;
t6950 = pkin(2) * t8024;
t8031 = t6977 * t7362;
t6953 = pkin(2) * t8031;
t6956 = pkin(1) * t8031;
t7953 = t7361 * t7362;
t7826 = pkin(3) * t7953;
t7057 = pkin(1) - t7826;
t8000 = t7108 * t7371;
t6968 = t7057 + t8000;
t7029 = t7245 - t7936;
t7083 = pkin(1) * t7093;
t7239 = pkin(3) * t7295;
t7402 = 0.2e1 * qJ(3,1);
t7264 = sin(t7402);
t7294 = t7370 * t7295;
t7297 = t7371 ^ 2;
t7296 = t7371 * t7297;
t7554 = t6980 * (t7245 - t7936 / 0.3e1);
t7557 = t7866 * t8024;
t7406 = 0.2e1 * qJ(2,1);
t7274 = cos(t7406);
t7930 = t7373 * t7372;
t7590 = t6920 * t7274 * t7930;
t7937 = t7370 * t7371;
t7595 = t7937 * t7953;
t7819 = pkin(2) * t7930;
t7670 = t7362 * t7819;
t8025 = t6980 * t7029;
t7686 = t6953 + t8025;
t7265 = sin(t7406);
t7724 = t7265 * t7930;
t7727 = t7029 * t7953;
t7736 = t7370 * t8024;
t7738 = t7361 * t8024;
t7244 = pkin(1) * t7362;
t8115 = pkin(3) * t7361;
t7052 = t7244 - t8115;
t8012 = t7052 * t7370;
t7745 = t6977 * t8012;
t8138 = pkin(2) * t6977;
t7887 = pkin(1) * t8138;
t7811 = 0.4e1 * t7887;
t8134 = pkin(2) * t7362;
t7832 = t6898 * t8134;
t7855 = pkin(1) * t7936;
t7873 = t6977 * t8185;
t7902 = -0.4e1 * t7294 + 0.5e1 * t7370;
t7938 = t7370 * t7361;
t7951 = t7362 * (t7373 * (t7214 * t7372 + t7083) + t6980 * (t7214 * t7363 - t7855));
t7971 = t7295 * t7362;
t8030 = t6977 * t7370;
t8101 = t7371 * pkin(3);
t8102 = t7370 * pkin(2);
t7272 = cos(t7402);
t8123 = pkin(3) * t7272;
t8174 = 0.2e1 * t7295;
t8144 = t8174 - 0.1e1;
t8173 = 0.4e1 * t7295;
t8189 = -0.2e1 * t6977;
t8239 = (t7295 * t8189 + 0.2e1 * t7361 * t7736 + t6977) * pkin(3);
t8243 = 0.2e1 * t7297;
t6848 = -(-t7590 + ((-t7738 + t8030) * pkin(2) - t8239) * t7296 + (t6971 * t7370 - t7686 * t7361 + (-pkin(2) * t7736 + (t7938 * t8189 - t8024 * t8144) * pkin(3)) * t7362) * t7297 + ((-t7362 * t8025 - t8138) * t7370 + (-t6956 + t6950) * t7361 + t8239) * t7371 + t7737 * t7239 - t7057 * t8030 + t6980 * (-pkin(3) * t7950 + t7029 * t7361)) * t8123 + pkin(3) * (-t6920 * t7724 + t7371 * ((t6950 * t7370 + t7361 * t8138) * t7297 + (t6902 * t7361 + t7370 * t7686) * t7371 + t7745 - t6980 * t7727) + ((t7938 * t8243 + (-t7362 + 0.2e1 * t7971) * t7371) * t6977 + (t7297 * t8144 - 0.2e1 * t7595 - t8145) * t8024) * t8101) * t7264 + t6968 * (t7370 + 0.1e1) * pkin(2) * (t7370 - 0.1e1) * t7724 + t7590 * t8102 + (t7557 * t7938 + 0.2e1 * (-t7295 * t7926 + t7213) * t6977 + ((t8173 - 0.3e1) * t7738 + t7902 * t6977) * t8159) * t7296 + ((t7362 * t7557 - 0.4e1 * t7887) * t7295 + (t6898 * t8263 + t7866 * t8031) * t7938 + t7737 * t8186 + t7811 + ((t6908 + t6953) * t7361 * t8173 - 0.3e1 * (t6953 + 0.2e1 / 0.3e1 * t6988 + t7554) * t7361 + t7902 * t6902) * pkin(3)) * t7297 + ((0.4e1 * (t6956 + (-t7930 / 0.2e1 + t7551) * t8165) * t8115 + 0.4e1 * t7832 + t6977 * t8181) * t7295 + ((t7362 * t7811 + (t7084 * t7372 + t7083) * t8171 + 0.2e1 * t6980 * (t7256 * t7363 - t7855)) * t7361 + ((0.4e1 / 0.5e1 * t6988 + t6980 * (t7245 - t7936 / 0.5e1)) * t7362 + 0.3e1 / 0.5e1 * t8138) * t8197) * t7370 - 0.3e1 * (t6956 - (t7930 / 0.3e1 + t7551) * pkin(2)) * t8115 - 0.4e1 * t7832 + t7873) * t7371 + (-t6908 * t8115 + t7951) * t8174 + ((pkin(1) * t7819 + t7362 * t7873) * t7361 + (t7670 / 0.3e1 + t6971) * t8196) * t7370 + 0.3e1 * (t7373 * (t7128 * t7363 + t7248) + t7554) * t8115 - 0.2e1 * t7951 + ((0.4e1 * t6908 * t7362 + 0.2e1 * t8138) * t7371 + t7670 + 0.2e1 * t6971) * pkin(3) * t7294;
t7132 = pkin(2) * t7235;
t7948 = t7362 * t7371;
t7970 = t7297 * t7361;
t8114 = pkin(3) * t7362;
t8154 = t7264 / 0.2e1;
t8182 = 0.2e1 * t7229;
t6878 = (t7108 * t7948 + t7244 + (t7297 - 0.1e1) * t8115) * t8123 / 0.2e1 + t6968 * t8101 * t8154 + (t7132 + t7213) * t7970 + ((t7229 - t8114 / 0.2e1) * t7235 + (t8182 + (t7295 - 0.3e1 / 0.2e1) * t8114) * pkin(2)) * t7371 + t7971 * t8160 + t7214 * t7361 + t7362 * t7886;
t8065 = t6848 / t6878;
t7769 = t7283 * t8065;
t7581 = t7769 / 0.2e1;
t6842 = pkin(2) * t7581;
t6840 = t7419 * t7581;
t7718 = t7361 * t7950;
t7021 = t7276 * t7718;
t7090 = pkin(1) * t7953;
t7061 = t7090 - pkin(3);
t7058 = pkin(1) - 0.2e1 * t7826;
t7488 = t7058 * t7363 - t7936;
t7234 = t7295 * t7414;
t7711 = (t7551 + t7930) * t7234;
t7721 = t7362 * t7936;
t7834 = t7361 * t8111;
t7835 = t7361 * t8112;
t7846 = t7362 * t8129;
t7847 = t7362 * t8130;
t7868 = -0.2e1 * t7234;
t6962 = t7058 * t7372 + t7093;
t7933 = t7373 * t6962;
t6857 = (-0.2e1 * t7711 - 0.2e1 * ((pkin(2) * t7945 + t7835) * t7226 + (-pkin(2) * t7946 + t7834) * t7223 + t7819) * t7235 + (t7049 * t7363 + t7361 * t7810) * t7226 + (-t7048 * t7363 + t7361 * t7809) * t7223 - t7372 * t7717) * t7297 + (t7868 * t8031 - ((t7375 * t7488 + 0.2e1 * t7847) * t7226 + (-t7374 * t7488 + 0.2e1 * t7846) * t7223 + t7933) * t7235 + (-pkin(1) * t7835 + t7048 * t7362 - t7488 * t8129) * t7226 + (-pkin(1) * t7834 + t7049 * t7362 + t7488 * t8130) * t7223 - pkin(2) * t7933) * t7371 + t7711 - pkin(3) * t7745 + (-pkin(1) * t7847 + (t7061 * t7945 + (-t7375 * t7721 + t8130) * t7361) * pkin(3)) * t7226 + (-pkin(1) * t7846 + (-t7061 * t7946 + (t7374 * t7721 + t8129) * t7361) * pkin(3)) * t7223 + (t7061 * t7372 + t7021) * t8113;
t6965 = 0.1e1 / t6968;
t7977 = t7283 * t7419;
t7748 = t6965 * t7977;
t7599 = t7415 * t7748;
t7521 = t6857 * t7599;
t6824 = t6840 + t7521;
t8071 = t6824 * t7414;
t6803 = t6842 - t8071;
t6806 = t6842 + t8071;
t6854 = t7521 / 0.2e1;
t6818 = t6840 + t6854;
t7400 = 0.4e1 * qJ(3,1);
t7329 = t7400 + t7406;
t7161 = sin(t7329);
t7401 = 0.3e1 * qJ(3,1);
t7331 = t7401 + t7406;
t7162 = sin(t7331);
t7332 = t7401 + qJ(2,1);
t7163 = sin(t7332);
t7334 = t7402 + t7406;
t7164 = sin(t7334);
t7335 = t7402 + qJ(2,1);
t7165 = sin(t7335);
t7337 = qJ(3,1) + t7406;
t7166 = sin(t7337);
t7403 = -0.2e1 * qJ(3,1);
t7339 = t7403 + qJ(2,1);
t7168 = sin(t7339);
t7340 = t7406 + t7403;
t7169 = sin(t7340);
t7341 = qJ(2,1) + qJ(3,1);
t7170 = sin(t7341);
t7342 = qJ(2,1) - qJ(3,1);
t7171 = sin(t7342);
t7405 = 0.3e1 * qJ(2,1);
t7328 = t7400 + t7405;
t7198 = cos(t7328);
t7330 = t7401 + t7405;
t7199 = cos(t7330);
t7200 = cos(t7331);
t7201 = cos(t7332);
t7333 = t7402 + t7405;
t7202 = cos(t7333);
t7204 = cos(t7335);
t7336 = qJ(3,1) + t7405;
t7205 = cos(t7336);
t7206 = cos(t7337);
t7338 = -qJ(3,1) + t7406;
t7207 = cos(t7338);
t7209 = cos(t7340);
t7210 = cos(t7341);
t7211 = cos(t7342);
t7263 = sin(t7401);
t7404 = 0.4e1 * qJ(2,1);
t6932 = t6980 * t7372 - t7363 * t7373;
t8131 = pkin(2) * t7371;
t7018 = pkin(3) * t7210 + pkin(1) + t8131;
t7005 = 0.1e1 / t7018;
t8043 = t6932 * t7005;
t7602 = t7926 * t8043;
t7503 = t7276 * t7602;
t7753 = t7276 * t8043;
t7673 = pkin(3) * t7753;
t7573 = pkin(2) * t7673;
t7582 = -t7769 / 0.2e1;
t7623 = t7419 * t7769;
t7671 = pkin(1) * t7753;
t7676 = pkin(3) * t7769;
t7679 = pkin(2) * t7753;
t7684 = pkin(2) * t7769;
t7701 = (t7165 - t7362) * pkin(3);
t7751 = t7414 * t8043;
t7921 = t7418 * sin(t7338);
t7816 = pkin(3) * t7921;
t8126 = pkin(3) * t7170;
t7843 = t6824 * t8126;
t8036 = t6965 * t7415;
t8037 = t6965 * t7283;
t7208 = cos(t7339);
t8219 = -t7208 - cos(t7405);
t8220 = t7202 + t7371;
t8221 = t7200 - t7206;
t8222 = t7198 + t7204;
t7114 = -0.2e1 * t7132;
t7203 = cos(t7334);
t8248 = t7203 * t8215 + cos(t7401) * t8094 + cos(t7329) * t7414 + t7206 * t8096 + t7210 * t8098 + t7371 * t8100 + t7114 + t7704 + (t7204 + t7208) * t8099 + (t7201 + t7211) * t8097 + t8255 * t7274 + t8251 * t7272;
t8256 = t7203 - t7274 - t7272;
t6767 = -((0.2e1 * t6857 * t7201 * t8037 + t8222 * t6824 * t8242 + 0.2e1 * t8220 * t6803 + (t8221 * t6824 * t8246 + ((t6840 - t7521 / 0.2e1) * t7210 + (t7199 - t7205) * t6818) * t8263) * pkin(3) + (t7211 * t8195 + t8219 * pkin(2) + (0.1e1 + t8256) * t8264) * t7769) * t7276 + (t7696 * sin(t7401 + t7404) + t7413 * sin(0.5e1 * qJ(3,1) + t7404) + t7166 * t7883 + sin(qJ(3,1) + t7404) * t7895 + t7263 * t7894 - 0.6e1 * t7816 + t7361 * t7885 + t7162 * t7884 + (-t7169 - sin(t7404)) * t7417 + (t7255 * sin(t7404 + t7402) + t7265 * t8164 + t7264 * t8163 + t7164 * t8162 + (sin(t7404 + t7400) + t7161) * t7878) * pkin(2) + (sin(t7333) * t7865 + sin(t7328) * t8168 + t7362 * t8188 + t7165 * t8187 + (-sin(t7405) - t7168) * t7876 + (sin(t7330) - sin(t7336) + t7163 + t7170 - 0.2e1 * t7171) * t7814) * pkin(1)) * t8043) / (t7200 * t7893 + (t7207 * t8094 + t7209 * t7418 + t8248) * t8199) * t8043 + ((t7843 * t8241 + 0.8e1 * ((0.3e1 / 0.8e1 * t7623 + t6854) * t7418 + t6824 * t7214) * t8115 - 0.4e1 * t6818 * t7816 + t7414 * t7161 * t7581 + t6824 * t7166 * t7697 + t7418 * t7169 * t7582 + (t6840 + 0.2e1 / 0.3e1 * t7521) * t7171 * t7864 + (t6840 + 0.4e1 / 0.5e1 * t7521) * t7265 * t7896 + (t7362 * t8071 - t7679 / 0.4e1) * t8205 + (t7684 / 0.4e1 + (0.3e1 / 0.4e1 * t8065 + t6857 * t8036) * t7283 * t7925 + t7421 * t6840) * t7264 * t8263 + (t6842 + 0.2e1 * t8071) * t7165 * t8246 + t7163 * t7676 * t8264 + t7168 * t7684 * t8203 + t8222 * t7276 * t7751 + t8219 * t7418 * t7753 - 0.2e1 * (t7211 + t7205) * t7573 + 0.2e1 * (t7210 + t7199) * t7573 + t8220 * t7503 + (t6806 * t7162 + t8221 * t7671) * t8194 + ((t6842 + 0.4e1 * t8071) * t7164 + t7263 * t7676 + 0.2e1 * t8256 * t7671) * pkin(2)) * t7419 * t7582 - 0.8e1 * (((t7200 / 0.4e1 - t7206 / 0.4e1) * pkin(1) + (-t7202 / 0.8e1 + t7198 / 0.8e1 + t7204 / 0.8e1 - t7371 / 0.8e1) * pkin(3) + (t7199 / 0.8e1 + t7201 / 0.8e1 - t7205 / 0.8e1 - t7210 / 0.8e1) * pkin(2)) * t7753 + (-t7921 / 0.4e1 + t7162 * t8152 + t7166 * t7707 + t7084 * t7361 + pkin(1) * t7701 + ((-t7171 + t7170) * pkin(1) + (t7164 / 0.2e1 - t7265 / 0.2e1 + t8154) * pkin(3)) * pkin(2)) * t6824) * t6857 * t7748) / (t7417 * t7209 + (t7200 + t7207) * t7805 + t8248 * pkin(2));
t7536 = t7826 * t8204 + t6984;
t7752 = t7362 * t8043;
t7678 = pkin(2) * t7752;
t7858 = pkin(1) * t8043;
t7890 = 0.2e1 * t7235;
t6780 = 0.4e1 * (t7234 + t7132 / 0.2e1 + t7900) * t7108 * t7296 * t8043 + (t7057 * t7751 * t8174 + (-(t6824 * t7276 + 0.3e1 * t7678) * t8115 / 0.2e1 + pkin(2) * t7858) * t7890 - (t6818 * t8137 + t7752 * t8157) * t8115 + pkin(1) * t7602) * t8243 + ((t6818 * t7114 + t6824 * t7868 - t6803) * t7362 * t7276 + (t7294 * t8170 + t7536 * t7235 + (t7536 - 0.3e1 * t7234) * pkin(2)) * t8043) * t7371 - ((-t6824 * t7235 + t7582) * t7361 * t7276 + (t6985 * t7953 + (-t7295 * t7826 + (t8174 - 0.2e1) * pkin(1)) * pkin(3)) * t8043) * pkin(3);
t6923 = t6932 ^ 2;
t7006 = 0.1e1 / t7018 ^ 2;
t6905 = t6923 * t7006;
t6853 = t7521 / 0.3e1;
t7605 = t7276 * t7752;
t7708 = -t8043 / 0.2e1;
t7867 = 0.2e1 * t7234;
t7284 = 0.1e1 / t7361 ^ 2;
t7976 = t7284 * t7420;
t8141 = pkin(2) * t6818;
t7533 = (-0.2e1 * t7108 * t7673 * t7970 + ((-t7605 + t8141) * t7867 + 0.3e1 * (t7605 * t8240 + (t7623 / 0.6e1 + t6853) * t7414 + t7418 * (t6840 + t6853)) * t7235 - t7362 * t7503 + t6806 * pkin(2)) * t7371 + (-(t6818 * t8134 + t7276 * t7708) * t8115 + pkin(1) * t8141) * t7890 - (t6806 * t7362 - t7679) * t8115 + pkin(1) * t6806) * t7976 * t8065;
t8042 = t6932 * t7006;
t6794 = (t7843 - t7753 + (t7170 * t6857 * t6965 * t7419 + (t7362 / 0.2e1 + (t8126 + t8134) * t8151) * t8065) * t7283) * t8042;
t7947 = t7362 * t7376;
t7781 = t6794 * t7947;
t6913 = 0.1e1 / (pkin(2) * (pkin(2) * t7170 + t7701 + t8182) - t7171 * t7418);
t7796 = ((-pkin(3) * t7164 + (-t7166 - t7361) * pkin(2)) * t7753 + (t7418 * t7211 + t7204 * t8159 + t7252 * t7210 + t7371 * t8093 + (pkin(3) + t8102) * t8264) * t6824) * t6857 * t6913;
t8259 = t7781 + ((-t7533 / 0.4e1 + (t6780 * t7708 - t7796 / 0.2e1) * t7977) * t8036 + t6767) * t8200 - (pkin(1) + 0.2e1 * t8131) * t7362 * t6905;
t7949 = t7362 * t7370;
t7000 = t7949 + t7952;
t7958 = t7359 * t7367;
t6999 = t7958 + t7960;
t7966 = t7356 * t7364;
t6998 = t7966 + t7968;
t7908 = pkin(2) * t7966 + t7227;
t8254 = -pkin(1) * t7966 - pkin(2) * t7974 - t7365 * t7908;
t7907 = pkin(2) * t7958 + t7228;
t8253 = -pkin(1) * t7958 - pkin(2) * t7972 - t7368 * t7907;
t7906 = pkin(2) * t7949 + t7229;
t8252 = -pkin(1) * t7949 - pkin(2) * t7970 - t7371 * t7906;
t7901 = t7348 + t7351;
t6991 = t7234 + t7132 + t7901;
t6893 = -0.2e1 * t6991 * t7372 * t7297 - t6962 * t8000 + pkin(3) * ((t7239 + t7061) * t7372 + t7021);
t8091 = qJ(3,1) + qJ(1,1);
t7219 = qJ(2,1) + t8091;
t8092 = -qJ(3,1) + qJ(1,1);
t7220 = -qJ(2,1) + t8092;
t7275 = 0.2e1 * pkin(5) + t7899;
t8085 = qJ(1,1) - 0.2e1 * qJ(2,1);
t8059 = ((sin(t7220) + sin(t7219)) * t7275 + (cos(t7220) + cos(t7219)) * t8264 + (cos(t7403 + t8085) + cos(qJ(1,1) + t7334) + 0.2e1 * t7372) * pkin(3) + (cos(qJ(3,1) - t8085) + cos(qJ(1,1) + t7337) + cos(t8092) + cos(t8091)) * pkin(2)) * t6913 / 0.2e1;
t7445 = t6893 * t7599 + t8059;
t8234 = t6923 * t7445;
t8211 = 0.2e1 * t6792;
t8210 = 0.2e1 * t6793;
t8209 = 0.2e1 * t6794;
t8208 = t7365 * (pkin(1) * t7364 - pkin(2) * t7969) + t7289 * t8106;
t8207 = t7368 * (pkin(1) * t7367 - pkin(2) * t7961) + t7293 * t8104;
t8206 = t7371 * (pkin(1) * t7370 - pkin(2) * t7953) + t7297 * t8102;
t6927 = (t7287 - 0.1e1 / 0.2e1) * t7965 + (t7289 - 0.1e1 / 0.2e1) * t7944;
t8193 = 0.4e1 * t6927;
t6928 = (t7291 - 0.1e1 / 0.2e1) * t7957 + (t7293 - 0.1e1 / 0.2e1) * t7941;
t8192 = 0.4e1 * t6928;
t8172 = -0.4e1 * t7297;
t8153 = t7376 / 0.4e1;
t8150 = t7419 / 0.4e1;
t7138 = t8243 - 0.1e1;
t7136 = t8245 - 0.1e1;
t7137 = t8244 - 0.1e1;
t8109 = pkin(5) * t6765;
t8108 = pkin(5) * t6766;
t8107 = pkin(5) * t6767;
t8090 = -qJ(3,2) + qJ(1,2);
t8089 = qJ(3,2) + qJ(1,2);
t8088 = -qJ(3,3) + qJ(1,3);
t8087 = qJ(3,3) + qJ(1,3);
t8086 = MDP(8) * t7419;
t8084 = qJ(1,2) - 0.2e1 * qJ(2,2);
t8083 = -0.2e1 * qJ(2,3) + qJ(1,3);
t8082 = MDP(15) * t7419;
t8079 = t6792 * t7001;
t8078 = t6792 * t7365;
t8077 = t6793 * t7003;
t8076 = t6793 * t7368;
t8075 = t6794 * t7005;
t8074 = t6794 * t7371;
t8070 = t6846 ^ 2 / t6876 ^ 2;
t8069 = t6847 ^ 2 / t6877 ^ 2;
t8068 = t6848 ^ 2 / t6878 ^ 2;
t7762 = t7289 * t6903;
t6885 = t6903 - 0.2e1 * t7762;
t8064 = t6885 * t6963;
t7761 = t7293 * t6904;
t6886 = t6904 - 0.2e1 * t7761;
t8063 = t6886 * t6964;
t7760 = t7297 * t6905;
t6887 = t6905 - 0.2e1 * t7760;
t8062 = t6887 * t6965;
t7215 = qJ(2,3) + t8087;
t7216 = -qJ(2,3) + t8088;
t8061 = ((sin(t7216) + sin(t7215)) * t7275 + (cos(t7216) + cos(t7215)) * t8264 + (cos(t7387 + t8083) + cos(qJ(1,3) + t7301) + 0.2e1 * t7366) * pkin(3) + (cos(qJ(3,3) - t8083) + cos(qJ(1,3) + t7303) + cos(t8088) + cos(t8087)) * pkin(2)) * t6909 / 0.2e1;
t7217 = qJ(2,2) + t8089;
t7218 = -qJ(2,2) + t8090;
t8060 = ((sin(t7218) + sin(t7217)) * t7275 + (cos(t7218) + cos(t7217)) * t8264 + (cos(t7395 + t8084) + cos(qJ(1,2) + t7316) + 0.2e1 * t7369) * pkin(3) + (cos(qJ(3,2) - t8084) + cos(qJ(1,2) + t7318) + cos(t8090) + cos(t8089)) * pkin(2)) * t6911 / 0.2e1;
t6915 = t7357 * t7863 + t7729;
t8056 = t6915 * t7221;
t8055 = t6915 * t7224;
t6916 = t7360 * t7862 + t7728;
t8054 = t6916 * t7222;
t8053 = t6916 * t7225;
t6917 = t7363 * t7861 + t7727;
t8052 = t6917 * t7223;
t8051 = t6917 * t7226;
t8050 = t6921 * t6963;
t8049 = t6922 * t6964;
t8048 = t6923 * t6965;
t8023 = t7001 * t7357;
t8022 = t7001 * t7366;
t8021 = t7002 * t7277;
t8020 = t7003 * t7360;
t8019 = t7003 * t7369;
t8018 = t7004 * t7280;
t8017 = t7005 * t7363;
t8016 = t7005 * t7372;
t8015 = t7006 * t7283;
t7383 = pkin(2) / 0.2e1;
t8011 = (t7231 + t7383) * t7355;
t8010 = (t7233 + t7383) * t7358;
t8009 = (t7235 + t7383) * t7361;
t8008 = t7104 * t7221;
t8007 = t7104 * t7224;
t8005 = t7106 * t7222;
t8004 = t7106 * t7225;
t8002 = t7108 * t7223;
t8001 = t7108 * t7226;
t7999 = t7221 * t7357;
t7998 = t7221 * t7366;
t7996 = t7222 * t7360;
t7995 = t7222 * t7369;
t7993 = t7223 * t7363;
t7992 = t7223 * t7372;
t7990 = t7224 * t7357;
t7989 = t7224 * t7366;
t7987 = t7225 * t7360;
t7986 = t7225 * t7369;
t7984 = t7226 * t7363;
t7983 = t7226 * t7372;
t6747 = (-t7535 / 0.2e1 + (-t6781 * t8047 - t7798) * t7981) * t8040 + t6765;
t7929 = t7376 * t6747;
t6748 = (-t7534 / 0.2e1 + (-t6782 * t8045 - t7797) * t7979) * t8038 + t6766;
t7928 = t7376 * t6748;
t6749 = (-t7533 / 0.2e1 + (-t6780 * t8043 - t7796) * t7977) * t8036 + t6767;
t7927 = t7376 * t6749;
t7924 = t7415 * t7419;
t6819 = t6822 ^ 2;
t6795 = t6816 * t7682 + t6819 * t8153;
t7633 = t7001 * t7771;
t6798 = t6819 * t7964 + t6930 * t7633;
t7700 = -0.4e1 * t7289 * t8143;
t7808 = t6822 * t8264;
t7920 = -t6998 * t7929 + (-t7227 * t7356 + t8208) * t8211 - 0.4e1 * t6795 * t7943 + t6798 * t7355 + (-t6998 * t7808 + t7355 * t7700) * t8047;
t6820 = t6823 ^ 2;
t6796 = t6817 * t7680 + t6820 * t8153;
t7629 = t7003 * t7770;
t6799 = t6820 * t7956 + t6931 * t7629;
t7699 = -0.4e1 * t7293 * t8142;
t7807 = t6823 * t8264;
t7919 = -t6999 * t7928 + (-t7228 * t7359 + t8207) * t8210 - 0.4e1 * t6796 * t7940 + t6799 * t7358 + (-t6999 * t7807 + t7358 * t7699) * t8045;
t6821 = t6824 ^ 2;
t6797 = t6818 * t7678 + t6821 * t8153;
t7625 = t7005 * t7769;
t6800 = t6821 * t7947 + t6932 * t7625;
t7698 = t8141 * t8172;
t7806 = t6824 * t8264;
t7918 = -t7000 * t7927 + (-t7229 * t7362 + t8206) * t8209 - 0.4e1 * t6797 * t7937 + t6800 * t7361 + (-t7000 * t7806 + t7361 * t7698) * t8043;
t7487 = -t7943 + t7969;
t7917 = t7487 * t7929 + t8254 * t8211 + 0.4e1 * t6795 * t7968 + t6798 * t7364 + (t7364 * t7700 + t7487 * t7808) * t8047;
t7486 = -t7940 + t7961;
t7916 = t7486 * t7928 + t8253 * t8210 + 0.4e1 * t6796 * t7960 + t6799 * t7367 + (t7367 * t7699 + t7486 * t7807) * t8045;
t7485 = -t7937 + t7953;
t7915 = t7485 * t7927 + t8252 * t8209 + 0.4e1 * t6797 * t7952 + t6800 * t7370 + (t7370 * t7698 + t7485 * t7806) * t8043;
t7416 = 1 / pkin(3) ^ 2;
t6813 = t7762 * t8199 + pkin(1) * t7365 * t6903 - pkin(2) * (t6903 + (t8040 * t8067 + 0.1e1 / t6966 ^ 2 * t7416 * t6855) * t6855 * t7980);
t7792 = t7376 * t8078;
t7654 = t7364 * t7792;
t7914 = t6813 * t7364 + t8261 * t7355 - t7654;
t7655 = t7355 * t7792;
t7913 = t6813 * t7355 - t8261 * t7364 - t7655;
t6814 = t7761 * t8199 + pkin(1) * t7368 * t6904 - pkin(2) * (t6904 + (t8038 * t8066 + 0.1e1 / t6967 ^ 2 * t7416 * t6856) * t6856 * t7978);
t7787 = t7376 * t8076;
t7646 = t7367 * t7787;
t7912 = t6814 * t7367 + t8260 * t7358 - t7646;
t7647 = t7358 * t7787;
t7911 = t6814 * t7358 - t8260 * t7367 - t7647;
t6815 = t7760 * t8199 + pkin(1) * t7371 * t6905 - pkin(2) * (t6905 + (t8036 * t8065 + 0.1e1 / t6968 ^ 2 * t7416 * t6857) * t6857 * t7976);
t7782 = t7376 * t8074;
t7638 = t7370 * t7782;
t7910 = t6815 * t7370 + t8259 * t7361 - t7638;
t7639 = t7361 * t7782;
t7909 = t6815 * t7361 - t8259 * t7370 - t7639;
t7877 = 2 * t7415;
t7842 = t7104 * t8119;
t7841 = t7106 * t8117;
t7840 = t7108 * t8115;
t7804 = t6747 * t8041;
t7803 = t6748 * t8039;
t7802 = t6749 * t8037;
t7801 = t6765 * t8022;
t7800 = t6766 * t8019;
t7799 = t6767 * t8016;
t7795 = t6792 * t8061;
t7794 = t6792 * t8041;
t7793 = t6792 * t8023;
t7790 = t6793 * t8060;
t7789 = t6793 * t8039;
t7788 = t6793 * t8020;
t7785 = t6794 * t8059;
t7784 = t6794 * t8037;
t7783 = t6794 * t8017;
t7780 = t6819 * t8023;
t7779 = t6820 * t8020;
t7778 = t6821 * t8017;
t7777 = t6822 * t8046;
t7776 = t6822 * t6930 * t7357;
t7775 = t6823 * t8044;
t7774 = t6823 * t6931 * t7360;
t7773 = t6824 * t8042;
t7772 = t6824 * t6932 * t7363;
t6939 = t8118 * t8148 + t7908;
t7382 = -pkin(3) / 0.2e1;
t7033 = t7237 + t8106 / 0.2e1 + t7382;
t6945 = t7720 * t8194 - t7027;
t7459 = pkin(2) * t7720 + t6945 * t7364;
t6864 = (-t7033 * t7999 + t7224 * t8011) * t8245 + (t7224 * t6939 + t7221 * t7459) * t7365 + t8056 + t7224 * t8014;
t7768 = t6864 * t8041;
t6865 = (t7033 * t7990 + t7221 * t8011) * t8245 + (t7221 * t6939 - t7224 * t7459) * t7365 - t8055 + t7221 * t8014;
t7767 = t6865 * t8041;
t6940 = t8116 * t8146 + t7907;
t7034 = t7238 + t8104 / 0.2e1 + t7382;
t6946 = t7719 * t8194 - t7028;
t7458 = pkin(2) * t7719 + t6946 * t7367;
t6866 = (-t7034 * t7996 + t7225 * t8010) * t8244 + (t7225 * t6940 + t7222 * t7458) * t7368 + t8054 + t7225 * t8013;
t7766 = t6866 * t8039;
t6867 = (t7034 * t7987 + t7222 * t8010) * t8244 + (t7222 * t6940 - t7225 * t7458) * t7368 - t8053 + t7222 * t8013;
t7765 = t6867 * t8039;
t6941 = t8114 * t8144 + t7906;
t7035 = t7239 + t8102 / 0.2e1 + t7382;
t6947 = t7718 * t8194 - t7029;
t7457 = pkin(2) * t7718 + t6947 * t7370;
t6868 = (-t7035 * t7993 + t7226 * t8009) * t8243 + (t7226 * t6941 + t7223 * t7457) * t7371 + t8052 + t7226 * t8012;
t7764 = t6868 * t8037;
t6869 = (t7035 * t7984 + t7223 * t8009) * t8243 + (t7223 * t6941 - t7226 * t7457) * t7371 - t8051 + t7223 * t8012;
t7763 = t6869 * t8037;
t7735 = t7001 * t7998;
t7734 = t7001 * t7989;
t7733 = t7003 * t7995;
t7732 = t7003 * t7986;
t7731 = t7005 * t7992;
t7730 = t7005 * t7983;
t7695 = t7001 * t7920;
t7694 = t7001 * t7917;
t7693 = t7003 * t7919;
t7692 = t7003 * t7916;
t7691 = t7005 * t7918;
t7690 = t7005 * t7915;
t6929 = (t7295 - 0.1e1 / 0.2e1) * t7948 + (t7297 - 0.1e1 / 0.2e1) * t7938;
t7689 = -0.4e1 * t6929 * t8075;
t7667 = t7356 * t7801;
t7666 = t7365 * t7801;
t7665 = t7359 * t7800;
t7664 = t7368 * t7800;
t7663 = t7362 * t7799;
t7662 = t7371 * t7799;
t7661 = t7487 * t7794;
t7660 = t6998 * t7794;
t7659 = t7356 * t7794;
t7658 = t7365 * t7794;
t7279 = t7356 ^ 2;
t7657 = t6792 * t7279 * t8022;
t7656 = t7965 * t8079;
t7653 = t7486 * t7789;
t7652 = t6999 * t7789;
t7651 = t7359 * t7789;
t7650 = t7368 * t7789;
t7282 = t7359 ^ 2;
t7649 = t6793 * t7282 * t8019;
t7648 = t7957 * t8077;
t7645 = t7485 * t7784;
t7644 = t7000 * t7784;
t7643 = t7362 * t7784;
t7642 = t7371 * t7784;
t7285 = t7362 ^ 2;
t7641 = t6794 * t7285 * t8016;
t7640 = t7948 * t8075;
t7637 = t7001 * t7278 * t8070;
t7636 = t7003 * t7281 * t8069;
t7635 = t7005 * t7284 * t8068;
t7634 = t6930 * t7366 * t8067;
t7632 = t7357 * t7771;
t7630 = t6931 * t7369 * t8066;
t7628 = t7360 * t7770;
t7626 = t6932 * t7372 * t8065;
t7624 = t7363 * t7769;
t7622 = t6903 * t8061;
t7621 = t6904 * t8060;
t7620 = t6905 * t8059;
t7619 = t8021 * t8050;
t7617 = t8018 * t8049;
t7615 = t8015 * t8048;
t7598 = t7965 * t8021;
t7597 = t7957 * t8018;
t7596 = t7948 * t8015;
t7589 = t8070 * t8150;
t7588 = t8069 * t8150;
t7587 = t8068 * t8150;
t7571 = t7914 * t8041;
t7570 = t7913 * t8041;
t6762 = -pkin(2) * t6765 + t7791;
t7569 = (t6762 * t7355 + t7364 * t7278 * t7589 + (-t7088 + t8208) * t6903 - t7654) * t8041;
t7568 = (-t6762 * t7364 - t8254 * t6903 + t7277 * t7589 - t7655) * t8041;
t7567 = t7912 * t8039;
t7566 = t7911 * t8039;
t6763 = -pkin(2) * t6766 + t7786;
t7565 = (t6763 * t7358 + t7367 * t7281 * t7588 + (-t7089 + t8207) * t6904 - t7646) * t8039;
t7564 = (-t6763 * t7367 - t8253 * t6904 + t7280 * t7588 - t7647) * t8039;
t7563 = t7910 * t8037;
t7562 = t7909 * t8037;
t6764 = -pkin(2) * t6767 + t7781;
t7561 = (t6764 * t7361 + t7370 * t7284 * t7587 + (-t7090 + t8206) * t6905 - t7638) * t8037;
t7560 = (-t6764 * t7370 - t8252 * t6905 + t7283 * t7587 - t7639) * t8037;
t7550 = pkin(5) * t7631;
t7549 = pkin(5) * t7627;
t7548 = pkin(5) * t7623;
t7532 = t7366 * t7656;
t7531 = t7369 * t7648;
t7530 = t7372 * t7640;
t7529 = t7001 * t7632;
t7528 = t7366 * t7633;
t7527 = t7003 * t7628;
t7526 = t7369 * t7629;
t7525 = t7005 * t7624;
t7524 = t7372 * t7625;
t7520 = t7365 * t7622;
t7519 = t7368 * t7621;
t7518 = t7371 * t7620;
t7517 = t6927 * t7619;
t6937 = -0.4e1 * t7594 + (0.4e1 * t7289 - 0.2e1) * t7287 - t7136;
t7516 = t6937 * t7619;
t7515 = t7356 * t7619;
t7514 = t7365 * t7619;
t7513 = t6928 * t7617;
t6938 = -0.4e1 * t7593 + (0.4e1 * t7293 - 0.2e1) * t7291 - t7137;
t7512 = t6938 * t7617;
t7511 = t7359 * t7617;
t7510 = t7368 * t7617;
t7509 = t6929 * t7615;
t6936 = 0.4e1 * t7595 + (t8172 + 0.2e1) * t7295 + t7138;
t7508 = t6936 * t7615;
t7507 = t7362 * t7615;
t7506 = t7371 * t7615;
t7502 = -t7637 / 0.4e1;
t7501 = t7637 / 0.4e1;
t7500 = -t7636 / 0.4e1;
t7499 = t7636 / 0.4e1;
t7498 = -t7635 / 0.4e1;
t7497 = t7635 / 0.4e1;
t7496 = t6747 * t6998 - t6819 * t7487;
t7495 = -t6747 * t7487 - t6819 * t6998;
t7494 = t6748 * t6999 - t6820 * t7486;
t7493 = -t6748 * t7486 - t6820 * t6999;
t7492 = t6749 * t7000 - t6821 * t7485;
t7491 = -t6749 * t7485 - t6821 * t7000;
t7481 = -0.2e1 * t7517;
t7480 = -0.2e1 * t7513;
t7479 = -0.2e1 * t7509;
t7478 = t7002 * t7136 * t7634;
t7477 = t7632 * t8046;
t7476 = t7221 * t7528;
t7475 = t7224 * t7528;
t7474 = t7004 * t7137 * t7630;
t7473 = t7628 * t8044;
t7472 = t7222 * t7526;
t7471 = t7225 * t7526;
t7470 = t7006 * t7138 * t7626;
t7469 = t7624 * t8042;
t7468 = t7223 * t7524;
t7467 = t7226 * t7524;
t7466 = t7366 * t7502;
t7465 = t7366 * t7501;
t7464 = t7369 * t7500;
t7463 = t7369 * t7499;
t7462 = t7372 * t7498;
t7461 = t7372 * t7497;
t7456 = -t6765 * t8023 + t7795;
t7455 = -t6766 * t8020 + t7790;
t7454 = -t6767 * t8017 + t7785;
t7453 = 0.2e1 * t6937 * t7777 + t8079 * t8193;
t6992 = t6998 ^ 2;
t7452 = t6992 * t8079 + t7777 * t8193;
t7451 = 0.2e1 * t6938 * t7775 + t8077 * t8192;
t6993 = t6999 ^ 2;
t7450 = t6993 * t8077 + t7775 * t8192;
t7449 = 0.2e1 * t6936 * t7773 + t7689;
t6994 = t7000 ^ 2;
t7448 = 0.4e1 * t6929 * t7773 + t6994 * t8075;
t6989 = t7230 + t7130 + t7901;
t6891 = -0.2e1 * t6989 * t7366 * t7289 - t6960 * t8006 + pkin(3) * ((t7237 + t7059) * t7366 + t7019);
t7447 = t6891 * t7601 + t8061;
t6990 = t7232 + t7131 + t7901;
t6892 = -0.2e1 * t6990 * t7369 * t7293 - t6961 * t8003 + pkin(3) * ((t7238 + t7060) * t7369 + t7020);
t7446 = t6892 * t7600 + t8060;
t7441 = t7447 * t6921;
t7440 = t7446 * t6922;
t7439 = -t6747 * t8023 + t6792 * t7447;
t7438 = -t6748 * t8020 + t6793 * t7446;
t7437 = -t6749 * t8017 + t6794 * t7445;
t7436 = t6864 * t7659 + t6866 * t7651 + t6868 * t7643;
t7435 = t6864 * t7658 + t6866 * t7650 + t6868 * t7642;
t7434 = t6865 * t7659 + t6867 * t7651 + t6869 * t7643;
t7433 = t6865 * t7658 + t6867 * t7650 + t6869 * t7642;
t6926 = pkin(3) * t7229 + (-t7897 + t7867 + 0.2e1 * t7132) * t7362;
t6925 = pkin(3) * t7228 + (-t7897 + t7869 + 0.2e1 * t7131) * t7359;
t6924 = pkin(3) * t7227 + (-t7897 + t7871 + 0.2e1 * t7130) * t7356;
t6863 = (-t6991 * t7984 - t7223 * t7840) * t8243 + (-t6926 * t7223 + t6947 * t8001) * t7371 + pkin(3) * t8051 - t7052 * t8002;
t6862 = (t6991 * t7993 - t7226 * t7840) * t8243 + (-t6926 * t7226 - t6947 * t8002) * t7371 - pkin(3) * t8052 - t7052 * t8001;
t6861 = (-t6990 * t7987 - t7222 * t7841) * t8244 + (-t6925 * t7222 + t6946 * t8004) * t7368 + pkin(3) * t8053 - t7051 * t8005;
t6860 = (t6990 * t7996 - t7225 * t7841) * t8244 + (-t6925 * t7225 - t6946 * t8005) * t7368 - pkin(3) * t8054 - t7051 * t8004;
t6859 = (-t6989 * t7990 - t7221 * t7842) * t8245 + (-t6924 * t7221 + t6945 * t8007) * t7365 + pkin(3) * t8055 - t7050 * t8008;
t6858 = (t6989 * t7999 - t7224 * t7842) * t8245 + (-t6924 * t7224 - t6945 * t8008) * t7365 - pkin(3) * t8056 - t7050 * t8007;
t6836 = t7371 * t7858 - t7362 * t7548 / 0.4e1;
t6835 = t7368 * t7859 - t7359 * t7549 / 0.4e1;
t6834 = t7365 * t7860 - t7356 * t7550 / 0.4e1;
t6833 = pkin(1) * t7752 + t7371 * t7548 / 0.4e1;
t6832 = pkin(1) * t7755 + t7368 * t7549 / 0.4e1;
t6831 = pkin(1) * t7758 + t7365 * t7550 / 0.4e1;
t6761 = -0.2e1 * t6794 * t7244 - t7371 * t8107;
t6760 = -0.2e1 * t6793 * t7242 - t7368 * t8108;
t6759 = -0.2e1 * t6792 * t7240 - t7365 * t8109;
t6758 = -t7362 * t8107 + t8074 * t8264;
t6757 = -t7359 * t8108 + t8076 * t8264;
t6756 = -t7356 * t8109 + t8078 * t8264;
t1 = [(t6792 * t7734 + t6793 * t7732 + t6794 * t7730) * MDP(1) + (t7224 * t7657 + t7225 * t7649 + t7226 * t7641 + ((-t6869 * t8048 + t7226 * t7626) * t7596 + (-t6867 * t8049 + t7225 * t7630) * t7597 + (-t6865 * t8050 + t7224 * t7634) * t7598) * t7419) * MDP(4) + (0.2e1 * t7224 * t7532 + 0.2e1 * t7225 * t7531 + 0.2e1 * t7226 * t7530 + ((t6869 * t8062 + t7226 * t7470) * t7283 + (t6867 * t8063 + t7225 * t7474) * t7280 + (t6865 * t8064 + t7224 * t7478) * t7277) * t7419) * MDP(5) + (t7224 * t7667 + t7225 * t7665 + t7226 * t7663 + (t7224 * t7365 * t7465 + t7225 * t7368 * t7463 + t7226 * t7371 * t7461) * t7420 + t7434 * t7419) * MDP(6) + (t7224 * t7666 + t7225 * t7664 + t7226 * t7662 + (t7224 * t7356 * t7466 + t7225 * t7359 * t7464 + t7226 * t7362 * t7462) * t7420 + t7433 * t7419) * MDP(7) + (t6765 * t7767 + t6766 * t7765 + t6767 * t7763) * t8086 + (t6756 * t7734 + t6757 * t7732 + t6758 * t7730 + (-t6831 * t7475 - t6832 * t7471 - t6833 * t7467 - t7434 * pkin(5) + (t6865 * t7515 + t6867 * t7511 + t6869 * t7507) * pkin(1)) * t7419) * MDP(9) + (t6759 * t7734 + t6760 * t7732 + t6761 * t7730 + (-t6834 * t7475 - t6835 * t7471 - t6836 * t7467 - t7433 * pkin(5) + (t6865 * t7514 + t6867 * t7510 + t6869 * t7506) * pkin(1)) * t7419) * MDP(10) + (t7448 * t7983 + t7450 * t7986 + t7452 * t7989 + (t6865 * t7481 + t6867 * t7480 + t6869 * t7479 + (-t6859 * t7517 - t6861 * t7513 - t6863 * t7509) * t7877) * t7419) * MDP(11) + (-t7449 * t7983 + t7451 * t7986 + t7453 * t7989 + (-t6865 * t7516 - t6867 * t7512 + t6869 * t7508 + (-t6859 * t7516 - t6861 * t7512 + t6863 * t7508) * t7415) * t7419) * MDP(12) + (t7492 * t7730 + t7494 * t7732 + t7496 * t7734 + (t6865 * t7660 + t6867 * t7652 + t6869 * t7644 + (t6859 * t7660 + t6861 * t7652 + t6863 * t7644) * t7415) * t7419) * MDP(13) + (t7491 * t7730 + t7493 * t7732 + t7495 * t7734 + (-t6865 * t7661 - t6867 * t7653 - t6869 * t7645 + (-t6859 * t7661 - t6861 * t7653 - t6863 * t7645) * t7415) * t7419) * MDP(14) + (t6747 * t7767 + t6748 * t7765 + t6749 * t7763 + (t6859 * t7804 + t6861 * t7803 + t6863 * t7802) * t7415) * t8082 + (t7918 * t7730 + t7919 * t7732 + t7920 * t7734 + (t6869 * t7562 + t6867 * t7566 + t6865 * t7570 + (t6859 * t7568 + t6861 * t7564 + t6863 * t7560) * t7415) * t7419) * MDP(16) + (t7915 * t7730 + t7916 * t7732 + t7917 * t7734 + (t6869 * t7563 + t6867 * t7567 + t6865 * t7571 + (t6859 * t7569 + t6861 * t7565 + t6863 * t7561) * t7415) * t7419) * MDP(17); (-t6792 * t7735 - t6793 * t7733 - t6794 * t7731) * MDP(1) + (-t7221 * t7657 - t7222 * t7649 - t7223 * t7641 + ((-t6868 * t8048 - t7223 * t7626) * t7596 + (-t6866 * t8049 - t7222 * t7630) * t7597 + (-t6864 * t8050 - t7221 * t7634) * t7598) * t7419) * MDP(4) + (-0.2e1 * t7221 * t7532 - 0.2e1 * t7222 * t7531 - 0.2e1 * t7223 * t7530 + ((t6868 * t8062 - t7223 * t7470) * t7283 + (t6866 * t8063 - t7222 * t7474) * t7280 + (t6864 * t8064 - t7221 * t7478) * t7277) * t7419) * MDP(5) + (-t7221 * t7667 - t7222 * t7665 - t7223 * t7663 + (t7221 * t7365 * t7466 + t7222 * t7368 * t7464 + t7223 * t7371 * t7462) * t7420 + t7436 * t7419) * MDP(6) + (-t7221 * t7666 - t7222 * t7664 - t7223 * t7662 + (t7221 * t7356 * t7465 + t7222 * t7359 * t7463 + t7223 * t7362 * t7461) * t7420 + t7435 * t7419) * MDP(7) + (t6765 * t7768 + t6766 * t7766 + t6767 * t7764) * t8086 + (-t6756 * t7735 - t6757 * t7733 - t6758 * t7731 + (t6831 * t7476 + t6832 * t7472 + t6833 * t7468 - t7436 * pkin(5) + (t6864 * t7515 + t6866 * t7511 + t6868 * t7507) * pkin(1)) * t7419) * MDP(9) + (-t6759 * t7735 - t6760 * t7733 - t6761 * t7731 + (t6834 * t7476 + t6835 * t7472 + t6836 * t7468 - t7435 * pkin(5) + (t6864 * t7514 + t6866 * t7510 + t6868 * t7506) * pkin(1)) * t7419) * MDP(10) + (-t7448 * t7992 - t7450 * t7995 - t7452 * t7998 + (t6864 * t7481 + t6866 * t7480 + t6868 * t7479 + (-t6858 * t7517 - t6860 * t7513 - t6862 * t7509) * t7877) * t7419) * MDP(11) + (t7449 * t7992 - t7451 * t7995 - t7453 * t7998 + (-t6864 * t7516 - t6866 * t7512 + t6868 * t7508 + (-t6858 * t7516 - t6860 * t7512 + t6862 * t7508) * t7415) * t7419) * MDP(12) + (-t7492 * t7731 - t7494 * t7733 - t7496 * t7735 + (t6864 * t7660 + t6866 * t7652 + t6868 * t7644 + (t6858 * t7660 + t6860 * t7652 + t6862 * t7644) * t7415) * t7419) * MDP(13) + (-t7491 * t7731 - t7493 * t7733 - t7495 * t7735 + (-t6864 * t7661 - t6866 * t7653 - t6868 * t7645 + (-t6858 * t7661 - t6860 * t7653 - t6862 * t7645) * t7415) * t7419) * MDP(14) + (t6747 * t7768 + t6748 * t7766 + t6749 * t7764 + (t6858 * t7804 + t6860 * t7803 + t6862 * t7802) * t7415) * t8082 + (-t7691 * t7992 - t7693 * t7995 - t7695 * t7998 + (t6868 * t7562 + t6866 * t7566 + t6864 * t7570 + (t6858 * t7568 + t6860 * t7564 + t6862 * t7560) * t7415) * t7419) * MDP(16) + (-t7690 * t7992 - t7692 * t7995 - t7694 * t7998 + (t6868 * t7563 + t6866 * t7567 + t6864 * t7571 + (t6858 * t7569 + t6860 * t7565 + t6862 * t7561) * t7415) * t7419) * MDP(17); (-t7783 - t7788 - t7793) * MDP(1) + (-t7356 * t7520 - t7359 * t7519 - t7362 * t7518 - t7279 * t7793 - t7282 * t7788 - t7285 * t7783 + (-t7469 * t7948 - t7473 * t7957 - t7477 * t7965) * t7419) * MDP(4) + (-0.2e1 * t7357 * t7656 - 0.2e1 * t7360 * t7648 - 0.2e1 * t7363 * t7640 + t6885 * t8061 + t6886 * t8060 + t6887 * t8059 + (-t7136 * t7477 - t7137 * t7473 - t7138 * t7469) * t7419) * MDP(5) + (t7454 * t7362 + t7455 * t7359 + t7456 * t7356 + (t7357 * t7365 * t7502 + t7360 * t7368 * t7500 + t7363 * t7371 * t7498) * t7420) * MDP(6) + (t7454 * t7371 + t7455 * t7368 + t7456 * t7365 + (t7497 * t7950 + t7499 * t7959 + t7501 * t7967) * t7420) * MDP(7) + (t6765 * t8061 + t6766 * t8060 + t6767 * t8059) * MDP(8) + (-t6756 * t8023 - t6757 * t8020 - t6758 * t8017 + (t6831 * t7529 + t6832 * t7527 + t6833 * t7525) * t7419 + (-t7356 * t7795 - t7359 * t7790 - t7362 * t7785) * pkin(5) + (t7356 * t7622 + t7359 * t7621 + t7362 * t7620) * pkin(1)) * MDP(9) + (-t6759 * t8023 - t6760 * t8020 - t6761 * t8017 + (t6834 * t7529 + t6835 * t7527 + t6836 * t7525) * t7419 + (-t7365 * t7795 - t7368 * t7790 - t7371 * t7785) * pkin(5) + (t7518 + t7519 + t7520) * pkin(1)) * MDP(10) + (-t6992 * t7793 - t6993 * t7788 - t6994 * t7783 + (-0.4e1 * t7772 - 0.2e1 * t8234) * t7006 * t6929 + (-0.2e1 * t7440 - 0.4e1 * t7774) * t7004 * t6928 + (-0.2e1 * t7441 - 0.4e1 * t7776) * t7002 * t6927) * MDP(11) + (-0.4e1 * t6927 * t7793 - 0.4e1 * t6928 * t7788 + t7363 * t7689 + (-t7440 - 0.2e1 * t7774) * t7004 * t6938 + (-t7441 - 0.2e1 * t7776) * t7002 * t6937 + (0.2e1 * t7772 + t8234) * t7006 * t6936) * MDP(12) + (t6998 * t7439 + t6999 * t7438 + t7000 * t7437 + t7485 * t7778 + t7486 * t7779 + t7487 * t7780) * MDP(13) + (t6998 * t7780 + t6999 * t7779 + t7000 * t7778 - t7437 * t7485 - t7438 * t7486 - t7439 * t7487) * MDP(14) + (t6747 * t8061 + t6748 * t8060 + t6749 * t8059 + (t6891 * t7804 + t6892 * t7803 + t6893 * t7802) * t7924) * MDP(15) + (-t7363 * t7691 - t7360 * t7693 - t7357 * t7695 + t7909 * t8059 + t7911 * t8060 + t7913 * t8061 + (t6891 * t7568 + t6892 * t7564 + t6893 * t7560) * t7924) * MDP(16) + (-t7363 * t7690 - t7360 * t7692 - t7357 * t7694 + t7910 * t8059 + t7912 * t8060 + t7914 * t8061 + (t6891 * t7569 + t6892 * t7565 + t6893 * t7561) * t7924) * MDP(17);];
taucX  = t1;
