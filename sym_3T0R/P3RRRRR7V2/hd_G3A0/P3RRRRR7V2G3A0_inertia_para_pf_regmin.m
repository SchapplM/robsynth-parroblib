% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P3RRRRR7V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [3x1]
%   Generalized platform coordinates
% qJ [3x3]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [3x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% koppelP [3x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [3*3x18]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 10:47
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P3RRRRR7V2G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(3,1),zeros(3,3),zeros(3,3),zeros(3,3),zeros(7,1)}
assert(isreal(xP) && all(size(xP) == [3 1]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_regmin: xP has to be [3x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 3]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_regmin: qJ has to be [3x3] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_regmin: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [3 3]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_regmin: legFrame has to be [3x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [3 3]), ...
  'P3RRRRR7V2G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [3x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 10:30:12
% EndTime: 2020-08-07 10:30:40
% DurationCPUTime: 32.81s
% Computational Cost: add. (35910->865), mult. (62274->1580), div. (4239->27), fcn. (43746->66), ass. (0->680)
t2013 = legFrame(3,2);
t1970 = sin(t2013);
t2464 = 0.2e1 * t1970;
t2014 = legFrame(2,2);
t1971 = sin(t2014);
t2463 = 0.2e1 * t1971;
t2015 = legFrame(1,2);
t1972 = sin(t2015);
t2462 = 0.2e1 * t1972;
t1973 = cos(t2013);
t2461 = -0.2e1 * t1973;
t1974 = cos(t2014);
t2460 = -0.2e1 * t1974;
t1975 = cos(t2015);
t2459 = -0.2e1 * t1975;
t2428 = qJ(3,1) + qJ(1,1);
t1968 = qJ(2,1) + t2428;
t2429 = -qJ(3,1) + qJ(1,1);
t1969 = -qJ(2,1) + t2429;
t2024 = sin(qJ(1,1));
t2045 = 2 * qJ(3,1);
t2417 = 2 * pkin(1);
t2422 = qJ(1,1) - (2 * qJ(2,1));
t2423 = qJ(1,1) + (2 * qJ(2,1));
t2036 = pkin(5) + pkin(6);
t1986 = (pkin(7) + t2036);
t2448 = 2 * t1986;
t1867 = (-sin(t1969) - sin(t1968)) * t2417 + (cos(t1969) + cos(t1968)) * t2448 + (sin((2 * qJ(3,1)) - t2422) - sin(t2045 + t2423) - 0.2e1 * t2024) * pkin(3) + (sin(qJ(3,1) - t2422) - sin(qJ(3,1) + t2423) - sin(t2429) - sin(t2428)) * pkin(2);
t2010 = qJ(2,1) + qJ(3,1);
t2023 = sin(qJ(2,1));
t2050 = pkin(2) ^ 2;
t2022 = sin(qJ(3,1));
t2434 = t2022 * pkin(1);
t1882 = -t2050 * sin((qJ(2,1) - qJ(3,1))) + pkin(2) * (pkin(2) * sin(t2010) + 0.2e1 * t2434 + (sin((t2045 + qJ(2,1))) - t2023) * pkin(3));
t2414 = t1867 / t1882;
t1858 = t2414 / 0.2e1;
t2426 = qJ(3,2) + qJ(1,2);
t1966 = qJ(2,2) + t2426;
t2427 = -qJ(3,2) + qJ(1,2);
t1967 = -qJ(2,2) + t2427;
t2021 = sin(qJ(1,2));
t2042 = 2 * qJ(3,2);
t2420 = qJ(1,2) - (2 * qJ(2,2));
t2421 = qJ(1,2) + (2 * qJ(2,2));
t1866 = (-sin(t1967) - sin(t1966)) * t2417 + (cos(t1967) + cos(t1966)) * t2448 + (sin((2 * qJ(3,2)) - t2420) - sin(t2042 + t2421) - 0.2e1 * t2021) * pkin(3) + (sin(qJ(3,2) - t2420) - sin(qJ(3,2) + t2421) - sin(t2427) - sin(t2426)) * pkin(2);
t2009 = qJ(2,2) + qJ(3,2);
t2020 = sin(qJ(2,2));
t2019 = sin(qJ(3,2));
t2436 = t2019 * pkin(1);
t1881 = -t2050 * sin((qJ(2,2) - qJ(3,2))) + pkin(2) * (pkin(2) * sin(t2009) + 0.2e1 * t2436 + (sin((t2042 + qJ(2,2))) - t2020) * pkin(3));
t2415 = t1866 / t1881;
t1857 = t2415 / 0.2e1;
t2424 = qJ(3,3) + qJ(1,3);
t1964 = qJ(2,3) + t2424;
t2425 = -qJ(3,3) + qJ(1,3);
t1965 = -qJ(2,3) + t2425;
t2018 = sin(qJ(1,3));
t2039 = 2 * qJ(3,3);
t2418 = -(2 * qJ(2,3)) + qJ(1,3);
t2419 = qJ(1,3) + (2 * qJ(2,3));
t1865 = (-sin(t1965) - sin(t1964)) * t2417 + (cos(t1965) + cos(t1964)) * t2448 + (sin((2 * qJ(3,3)) - t2418) - sin(t2039 + t2419) - 0.2e1 * t2018) * pkin(3) + (sin(qJ(3,3) - t2418) - sin(qJ(3,3) + t2419) - sin(t2425) - sin(t2424)) * pkin(2);
t2008 = qJ(2,3) + qJ(3,3);
t2017 = sin(qJ(2,3));
t2016 = sin(qJ(3,3));
t2438 = t2016 * pkin(1);
t1880 = -t2050 * sin((qJ(2,3) - qJ(3,3))) + pkin(2) * (pkin(2) * sin(t2008) + 0.2e1 * t2438 + (sin((t2039 + qJ(2,3))) - t2017) * pkin(3));
t2416 = t1865 / t1880;
t1856 = t2416 / 0.2e1;
t2025 = cos(qJ(3,3));
t1976 = t2025 * pkin(3);
t2341 = pkin(2) * t1976;
t2048 = pkin(3) ^ 2;
t2342 = -t2048 / 0.2e1 + t2050 / 0.2e1;
t1999 = t2025 ^ 2;
t2365 = t1999 * t2048;
t1919 = t2341 + t2342 + t2365;
t1979 = pkin(3) * t1999;
t2027 = cos(qJ(1,3));
t2359 = t2016 * t2017;
t2273 = t2027 * t2359;
t2324 = pkin(3) * t2359;
t1955 = t1976 + pkin(2);
t2026 = cos(qJ(2,3));
t2384 = t1955 * t2026;
t2000 = t2026 ^ 2;
t2447 = 0.2e1 * t2000;
t1869 = t1919 * t2018 * t2447 + ((pkin(1) - 0.2e1 * t2324) * t2018 - t2027 * t1986) * t2384 - pkin(3) * ((pkin(1) * t2359 - pkin(3) + t1979) * t2018 - t1986 * t2273);
t2049 = 0.1e1 / pkin(3);
t2051 = 0.1e1 / pkin(2);
t1916 = pkin(1) - t2324 + t2384;
t2407 = 0.1e1 / t1916 / t2016;
t2302 = t2051 * t2407;
t2238 = t2049 * t2302;
t2458 = t1869 * t2238 + t1856;
t2028 = cos(qJ(3,2));
t1977 = t2028 * pkin(3);
t2340 = pkin(2) * t1977;
t2002 = t2028 ^ 2;
t2363 = t2002 * t2048;
t1920 = t2340 + t2342 + t2363;
t1980 = pkin(3) * t2002;
t2030 = cos(qJ(1,2));
t2356 = t2019 * t2020;
t2272 = t2030 * t2356;
t2323 = pkin(3) * t2356;
t1956 = t1977 + pkin(2);
t2029 = cos(qJ(2,2));
t2381 = t1956 * t2029;
t2003 = t2029 ^ 2;
t2446 = 0.2e1 * t2003;
t1870 = t1920 * t2021 * t2446 + ((pkin(1) - 0.2e1 * t2323) * t2021 - t2030 * t1986) * t2381 - pkin(3) * ((pkin(1) * t2356 - pkin(3) + t1980) * t2021 - t1986 * t2272);
t1917 = pkin(1) - t2323 + t2381;
t2405 = 0.1e1 / t1917 / t2019;
t2300 = t2051 * t2405;
t2235 = t2049 * t2300;
t2457 = t1870 * t2235 + t1857;
t2031 = cos(qJ(3,1));
t1978 = t2031 * pkin(3);
t2339 = pkin(2) * t1978;
t2005 = t2031 ^ 2;
t2361 = t2005 * t2048;
t1921 = t2339 + t2342 + t2361;
t1981 = pkin(3) * t2005;
t2033 = cos(qJ(1,1));
t2353 = t2022 * t2023;
t2271 = t2033 * t2353;
t2322 = pkin(3) * t2353;
t1957 = t1978 + pkin(2);
t2032 = cos(qJ(2,1));
t2378 = t1957 * t2032;
t2006 = t2032 ^ 2;
t2445 = 0.2e1 * t2006;
t1871 = t1921 * t2024 * t2445 + ((pkin(1) - 0.2e1 * t2322) * t2024 - t2033 * t1986) * t2378 - pkin(3) * ((pkin(1) * t2353 - pkin(3) + t1981) * t2024 - t1986 * t2271);
t1918 = pkin(1) - t2322 + t2378;
t2403 = 0.1e1 / t1918 / t2022;
t2298 = t2051 * t2403;
t2232 = t2049 * t2298;
t2456 = t1871 * t2232 + t1858;
t2348 = t2031 * t2023;
t2451 = -0.2e1 * pkin(2);
t2452 = -2 * pkin(1);
t2455 = -t2022 * t2006 * t2451 + 0.2e1 * (pkin(2) * t2348 + t2434) * t2032 - t2348 * t2452;
t2349 = t2028 * t2020;
t2454 = -t2019 * t2003 * t2451 + 0.2e1 * (pkin(2) * t2349 + t2436) * t2029 - t2349 * t2452;
t2350 = t2025 * t2017;
t2453 = -t2016 * t2000 * t2451 + 0.2e1 * (pkin(2) * t2350 + t2438) * t2026 - t2350 * t2452;
t2450 = 0.2e1 * pkin(2);
t2449 = 0.2e1 * pkin(3);
t2444 = -0.2e1 * t2017;
t2443 = -0.2e1 * t2020;
t2442 = -0.2e1 * t2023;
t2441 = t2036 / 0.2e1;
t2440 = pkin(5) / 0.2e1;
t2439 = pkin(5) * t2051;
t2437 = t2016 * pkin(3);
t2435 = t2019 * pkin(3);
t2433 = t2022 * pkin(3);
t2432 = t2025 * pkin(2);
t2431 = t2028 * pkin(2);
t2430 = t2031 * pkin(2);
t2345 = pkin(1) * t2027 + t2018 * t1986;
t1883 = t2345 * t2359 + (t1999 - 0.1e1) * t2027 * pkin(3);
t2413 = t1883 * t1970;
t2412 = t1883 * t1973;
t2344 = pkin(1) * t2030 + t2021 * t1986;
t1884 = t2344 * t2356 + (t2002 - 0.1e1) * t2030 * pkin(3);
t2411 = t1884 * t1971;
t2410 = t1884 * t1974;
t2343 = pkin(1) * t2033 + t2024 * t1986;
t1885 = t2343 * t2353 + (t2005 - 0.1e1) * t2033 * pkin(3);
t2409 = t1885 * t1972;
t2408 = t1885 * t1975;
t2406 = 0.1e1 / t1916 ^ 2 / t2016 ^ 2;
t2404 = 0.1e1 / t1917 ^ 2 / t2019 ^ 2;
t2402 = 0.1e1 / t1918 ^ 2 / t2022 ^ 2;
t1937 = pkin(3) * cos(t2008) + t2026 * pkin(2) + pkin(1);
t1931 = 0.1e1 / t1937;
t2401 = t1931 * t2027;
t2400 = t1931 * t2036;
t1932 = 0.1e1 / t1937 ^ 2;
t1990 = t2018 ^ 2;
t2399 = t1932 * t1990;
t1938 = pkin(3) * cos(t2009) + t2029 * pkin(2) + pkin(1);
t1933 = 0.1e1 / t1938;
t2398 = t1933 * t2030;
t2397 = t1933 * t2036;
t1934 = 0.1e1 / t1938 ^ 2;
t1994 = t2021 ^ 2;
t2396 = t1934 * t1994;
t1939 = pkin(3) * cos(t2010) + t2032 * pkin(2) + pkin(1);
t1935 = 0.1e1 / t1939;
t2395 = t1935 * t2033;
t2394 = t1935 * t2036;
t1936 = 0.1e1 / t1939 ^ 2;
t1998 = t2024 ^ 2;
t2393 = t1936 * t1998;
t1946 = pkin(1) * t2017 - t2437;
t2392 = t1946 * t2025;
t1947 = pkin(1) * t2020 - t2435;
t2391 = t1947 * t2028;
t1948 = pkin(1) * t2023 - t2433;
t2390 = t1948 * t2031;
t2038 = pkin(2) / 0.2e1;
t2389 = (t1976 + t2038) * t2016;
t2388 = (t1977 + t2038) * t2019;
t2387 = (t1978 + t2038) * t2022;
t2386 = t1955 * t1970;
t2385 = t1955 * t1973;
t2383 = t1956 * t1971;
t2382 = t1956 * t1974;
t2380 = t1957 * t1972;
t2379 = t1957 * t1975;
t2377 = t1970 * t2018;
t2376 = t1970 * t2027;
t2375 = t1971 * t2021;
t2374 = t1971 * t2030;
t2373 = t1972 * t2024;
t2372 = t1972 * t2033;
t2371 = t1973 * t2018;
t2370 = t1973 * t2027;
t2369 = t1974 * t2021;
t2368 = t1974 * t2030;
t2367 = t1975 * t2024;
t2366 = t1975 * t2033;
t2001 = t2027 ^ 2;
t2364 = t2001 * t1932;
t2004 = t2030 ^ 2;
t2362 = t2004 * t1934;
t2007 = t2033 ^ 2;
t2360 = t2007 * t1936;
t2358 = t2016 * t2036;
t2357 = t2017 * t2026;
t2355 = t2019 * t2036;
t2354 = t2020 * t2029;
t2352 = t2022 * t2036;
t2351 = t2023 * t2032;
t2347 = t2051 / 0.2e1;
t2346 = t2049 * t2051;
t2334 = 0.2e1 * t2051;
t2333 = pkin(1) * t1931 * t2018;
t2332 = pkin(1) * t2401;
t2331 = pkin(1) * t1933 * t2021;
t2330 = pkin(1) * t2398;
t2329 = pkin(1) * t1935 * t2024;
t2328 = pkin(1) * t2395;
t2327 = t1955 * t2437;
t2326 = t1956 * t2435;
t2325 = t1957 * t2433;
t1985 = -t2048 + t2050;
t1886 = pkin(1) * t2437 + (t1985 + 0.2e1 * t2341 + 0.2e1 * t2365) * t2017;
t1907 = t2273 * t2449 - t2345;
t1832 = (t1919 * t2376 - t1973 * t2327) * t2447 + (-t1973 * t1886 - t1907 * t2386) * t2026 - pkin(3) * t2413 - t1946 * t2385;
t2321 = t1832 * t2407;
t1833 = (-t1919 * t2370 - t1970 * t2327) * t2447 + (-t1970 * t1886 + t1907 * t2385) * t2026 + pkin(3) * t2412 - t1946 * t2386;
t2320 = t1833 * t2407;
t1887 = pkin(1) * t2435 + (t1985 + 0.2e1 * t2340 + 0.2e1 * t2363) * t2020;
t1908 = t2272 * t2449 - t2344;
t1834 = (t1920 * t2374 - t1974 * t2326) * t2446 + (-t1974 * t1887 - t1908 * t2383) * t2029 - pkin(3) * t2411 - t1947 * t2382;
t2319 = t1834 * t2405;
t1835 = (-t1920 * t2368 - t1971 * t2326) * t2446 + (-t1971 * t1887 + t1908 * t2382) * t2029 + pkin(3) * t2410 - t1947 * t2383;
t2318 = t1835 * t2405;
t1888 = pkin(1) * t2433 + (t1985 + 0.2e1 * t2339 + 0.2e1 * t2361) * t2023;
t1909 = t2271 * t2449 - t2343;
t1836 = (t1921 * t2372 - t1975 * t2325) * t2445 + (-t1975 * t1888 - t1909 * t2380) * t2032 - pkin(3) * t2409 - t1948 * t2379;
t2317 = t1836 * t2403;
t1837 = (-t1921 * t2366 - t1972 * t2325) * t2445 + (-t1972 * t1888 + t1909 * t2379) * t2032 + pkin(3) * t2408 - t1948 * t2380;
t2316 = t1837 * t2403;
t1904 = t2438 + (-pkin(3) + t2432 + 0.2e1 * t1979) * t2017;
t2037 = -pkin(3) / 0.2e1;
t1940 = t1979 + t2432 / 0.2e1 + t2037;
t2090 = pkin(2) * t2273 + t1907 * t2025;
t1838 = (-t1940 * t2376 + t1973 * t2389) * t2447 + (t1973 * t1904 + t2090 * t1970) * t2026 + t2413 + t1973 * t2392;
t2315 = t1838 * t2407;
t1839 = (t1940 * t2370 + t1970 * t2389) * t2447 + (t1970 * t1904 - t2090 * t1973) * t2026 - t2412 + t1970 * t2392;
t2314 = t1839 * t2407;
t1905 = t2436 + (-pkin(3) + t2431 + 0.2e1 * t1980) * t2020;
t1941 = t1980 + t2431 / 0.2e1 + t2037;
t2089 = pkin(2) * t2272 + t1908 * t2028;
t1840 = (-t1941 * t2374 + t1974 * t2388) * t2446 + (t1974 * t1905 + t2089 * t1971) * t2029 + t2411 + t1974 * t2391;
t2313 = t1840 * t2405;
t1841 = (t1941 * t2368 + t1971 * t2388) * t2446 + (t1971 * t1905 - t2089 * t1974) * t2029 - t2410 + t1971 * t2391;
t2312 = t1841 * t2405;
t1906 = t2434 + (-pkin(3) + t2430 + 0.2e1 * t1981) * t2023;
t1942 = t1981 + t2430 / 0.2e1 + t2037;
t2088 = pkin(2) * t2271 + t1909 * t2031;
t1842 = (-t1942 * t2372 + t1975 * t2387) * t2445 + (t1975 * t1906 + t2088 * t1972) * t2032 + t2409 + t1975 * t2390;
t2311 = t1842 * t2403;
t1843 = (t1942 * t2366 + t1972 * t2387) * t2445 + (t1972 * t1906 - t2088 * t1975) * t2032 - t2408 + t1972 * t2390;
t2310 = t1843 * t2403;
t2309 = t1931 * t2416;
t2308 = t1933 * t2415;
t2307 = t1935 * t2414;
t2306 = t1869 * t2407;
t2305 = t1870 * t2405;
t2304 = t1871 * t2403;
t2303 = t1931 * t2407;
t2301 = t1933 * t2405;
t2299 = t1935 * t2403;
t2297 = t1931 * t2377;
t2296 = t1931 * t2371;
t2295 = t2018 * t2400;
t2294 = t2027 * t2400;
t2293 = t1932 * t2357;
t2292 = t1932 * t2018 * t2027;
t2291 = t1933 * t2375;
t2290 = t1933 * t2369;
t2289 = t2021 * t2397;
t2288 = t2030 * t2397;
t2287 = t1934 * t2354;
t2286 = t1934 * t2021 * t2030;
t2285 = t1935 * t2373;
t2284 = t1935 * t2367;
t2283 = t2024 * t2394;
t2282 = t2033 * t2394;
t2281 = t1936 * t2351;
t2280 = t1936 * t2024 * t2033;
t1958 = t1970 ^ 2;
t2279 = t1958 * t2399;
t1959 = t1971 ^ 2;
t2278 = t1959 * t2396;
t1960 = t1972 ^ 2;
t2277 = t1960 * t2393;
t1961 = t1973 ^ 2;
t2276 = t1961 * t2399;
t1962 = t1974 ^ 2;
t2275 = t1962 * t2396;
t1963 = t1975 ^ 2;
t2274 = t1963 * t2393;
t2270 = t2025 * t2441;
t2269 = t2028 * t2441;
t2268 = t2031 * t2441;
t2267 = t2016 * t2333;
t2266 = t2017 * t2333;
t2265 = t2026 * t2333;
t2264 = t2019 * t2331;
t2263 = t2020 * t2331;
t2262 = t2029 * t2331;
t2261 = t2022 * t2329;
t2260 = t2023 * t2329;
t2259 = t2032 * t2329;
t2258 = t1931 * t2000 * t2432;
t2257 = t1933 * t2003 * t2431;
t2256 = t1935 * t2006 * t2430;
t2255 = pkin(5) * t1856;
t2254 = pkin(5) * t1857;
t2253 = pkin(5) * t1858;
t2252 = pkin(5) * t2302;
t2251 = pkin(5) * t2300;
t2250 = pkin(5) * t2298;
t2249 = t2407 * t2416;
t2248 = t2018 * t2309;
t2247 = t2027 * t2309;
t2246 = t2405 * t2415;
t2245 = t2021 * t2308;
t2244 = t2030 * t2308;
t2243 = t2403 * t2414;
t2242 = t2024 * t2307;
t2241 = t2033 * t2307;
t2240 = t2018 * t2303;
t2239 = t2027 * t2303;
t2237 = t2021 * t2301;
t2236 = t2030 * t2301;
t2234 = t2024 * t2299;
t2233 = t2033 * t2299;
t2135 = -t2025 * t2026 + t2359;
t2231 = t2135 * t2297;
t2230 = t2135 * t2296;
t2134 = -t2028 * t2029 + t2356;
t2229 = t2134 * t2291;
t2228 = t2134 * t2290;
t2133 = -t2031 * t2032 + t2353;
t2227 = t2133 * t2285;
t2226 = t2133 * t2284;
t1928 = t2016 * t2026 + t2350;
t2225 = t1928 * t2297;
t2224 = t1928 * t2296;
t1929 = t2019 * t2029 + t2349;
t2223 = t1929 * t2291;
t2222 = t1929 * t2290;
t1930 = t2022 * t2032 + t2348;
t2221 = t1930 * t2285;
t2220 = t1930 * t2284;
t2219 = t2017 * t2295;
t2218 = t2026 * t2295;
t2217 = t2026 * t2294;
t2216 = t1990 * t2293;
t2215 = t2020 * t2289;
t2214 = t2029 * t2289;
t2213 = t2029 * t2288;
t2212 = t1994 * t2287;
t2211 = t2023 * t2283;
t2210 = t2032 * t2283;
t2209 = t2032 * t2282;
t2208 = t1998 * t2281;
t2207 = t1970 * t2292;
t2206 = t1971 * t2286;
t2205 = t1972 * t2280;
t2204 = t1973 * t1970 * t2399;
t2203 = t1973 * t2292;
t2202 = t1974 * t1971 * t2396;
t2201 = t1974 * t2286;
t2200 = t1975 * t1972 * t2393;
t2199 = t1975 * t2280;
t2198 = t2017 * t2294;
t2197 = t2020 * t2288;
t2196 = t2023 * t2282;
t2195 = t2018 * t2258;
t2194 = t2021 * t2257;
t2193 = t2024 * t2256;
t2192 = t2017 * t2252;
t2191 = t2026 * t2252;
t2190 = t2020 * t2251;
t2189 = t2029 * t2251;
t2188 = t2023 * t2250;
t2187 = t2032 * t2250;
t2186 = t2017 * t2248;
t2185 = t2026 * t2248;
t2184 = t2020 * t2245;
t2183 = t2029 * t2245;
t2182 = t2023 * t2242;
t2181 = t2032 * t2242;
t2177 = t2135 * t2239;
t2176 = t1928 * t2239;
t2175 = t1970 * t2240;
t2174 = t1973 * t2240;
t2173 = t2017 * t2240;
t2172 = t2017 * t2239;
t2171 = t2026 * t2240;
t2170 = t2026 * t2239;
t2169 = t2134 * t2236;
t2168 = t1929 * t2236;
t2167 = t1971 * t2237;
t2166 = t1974 * t2237;
t2165 = t2020 * t2237;
t2164 = t2020 * t2236;
t2163 = t2029 * t2237;
t2162 = t2029 * t2236;
t2161 = t2133 * t2233;
t2160 = t1930 * t2233;
t2159 = t1972 * t2234;
t2158 = t1975 * t2234;
t2157 = t2023 * t2234;
t2156 = t2023 * t2233;
t2155 = t2032 * t2234;
t2154 = t2032 * t2233;
t2153 = t2016 * t2218;
t2152 = t2025 * t2218;
t2151 = t2292 * t2357;
t2150 = t2019 * t2214;
t2149 = t2028 * t2214;
t2148 = t2286 * t2354;
t2147 = t2022 * t2210;
t2146 = t2031 * t2210;
t2145 = t2280 * t2351;
t2144 = t1970 * t2219;
t2143 = t1971 * t2215;
t2142 = t1972 * t2211;
t2141 = t1973 * t2219;
t2140 = t1974 * t2215;
t2139 = t1975 * t2211;
t2138 = t2238 / 0.2e1;
t2137 = t2235 / 0.2e1;
t2136 = t2232 / 0.2e1;
t2131 = -pkin(1) * t2025 + pkin(2) * t2359;
t2129 = -pkin(1) * t2028 + pkin(2) * t2356;
t2127 = -pkin(1) * t2031 + pkin(2) * t2353;
t2126 = t2135 * t2175;
t2125 = t2135 * t2174;
t2124 = t1928 * t2175;
t2123 = t1928 * t2174;
t2122 = t1970 * t2173;
t2121 = t1970 * t2171;
t2120 = t1973 * t2173;
t2119 = t1973 * t2171;
t2118 = t2134 * t2167;
t2117 = t2134 * t2166;
t2116 = t1929 * t2167;
t2115 = t1929 * t2166;
t2114 = t1971 * t2165;
t2113 = t1971 * t2163;
t2112 = t1974 * t2165;
t2111 = t1974 * t2163;
t2110 = t2133 * t2159;
t2109 = t2133 * t2158;
t2108 = t1930 * t2159;
t2107 = t1930 * t2158;
t2106 = t1972 * t2157;
t2105 = t1972 * t2155;
t2104 = t1975 * t2157;
t2103 = t1975 * t2155;
t2102 = t1970 * t2153;
t2101 = t1971 * t2150;
t2100 = t1972 * t2147;
t2099 = t1970 * t2152;
t2098 = t1971 * t2149;
t2097 = t1972 * t2146;
t2093 = t2036 * t2135;
t2092 = t2036 * t2134;
t2091 = t2036 * t2133;
t2087 = 0.2e1 * t1931 * t2131;
t2086 = 0.2e1 * t1933 * t2129;
t2085 = 0.2e1 * t1935 * t2127;
t2081 = (-t1838 * t1973 + t1839 * t1970) * t2240;
t2080 = (-t1840 * t1974 + t1841 * t1971) * t2237;
t2079 = (-t1842 * t1975 + t1843 * t1972) * t2234;
t2078 = -0.2e1 * t2458 * t2401;
t2077 = -0.2e1 * t2457 * t2398;
t2076 = -0.2e1 * t2456 * t2395;
t1820 = t1838 * t2302;
t1772 = t1832 * t2238 + t1820;
t2075 = t1931 * (-t1772 * t2027 + t2377 * t2458);
t1821 = t1839 * t2302;
t1773 = t1833 * t2238 + t1821;
t2074 = t1931 * (-t1773 * t2027 - t2371 * t2458);
t1822 = t1840 * t2300;
t1774 = t1834 * t2235 + t1822;
t2073 = t1933 * (-t1774 * t2030 + t2375 * t2457);
t1823 = t1841 * t2300;
t1775 = t1835 * t2235 + t1823;
t2072 = t1933 * (-t1775 * t2030 - t2369 * t2457);
t1824 = t1842 * t2298;
t1776 = t1836 * t2232 + t1824;
t2071 = t1935 * (-t1776 * t2033 + t2373 * t2456);
t1825 = t1843 * t2298;
t1777 = t1837 * t2232 + t1825;
t2070 = t1935 * (-t1777 * t2033 - t2367 * t2456);
t2069 = t1931 * t2453;
t2068 = t1933 * t2454;
t2067 = t1935 * t2455;
t2066 = t2017 * t2247 + t2020 * t2244 + t2023 * t2241;
t2065 = t2026 * t2247 + t2029 * t2244 + t2032 * t2241;
t2064 = t1838 * t2172 + t1840 * t2164 + t1842 * t2156;
t2063 = t1838 * t2170 + t1840 * t2162 + t1842 * t2154;
t2062 = t1839 * t2172 + t1841 * t2164 + t1843 * t2156;
t2061 = t1839 * t2170 + t1841 * t2162 + t1843 * t2154;
t2060 = t1970 * t2186 + t1971 * t2184 + t1972 * t2182;
t2059 = t1970 * t2185 + t1971 * t2183 + t1972 * t2181;
t2058 = t1973 * t2186 + t1974 * t2184 + t1975 * t2182;
t2057 = t1973 * t2185 + t1974 * t2183 + t1975 * t2181;
t2056 = t1838 * t2122 + t1840 * t2114 + t1842 * t2106;
t2055 = t1838 * t2121 + t1840 * t2113 + t1842 * t2105;
t2054 = t1839 * t2120 + t1841 * t2112 + t1843 * t2104;
t2053 = t1839 * t2119 + t1841 * t2111 + t1843 * t2103;
t2052 = 0.1e1 / pkin(2) ^ 2;
t1997 = t2023 ^ 2;
t1993 = t2020 ^ 2;
t1989 = t2017 ^ 2;
t1924 = t1930 ^ 2;
t1923 = t1929 ^ 2;
t1922 = t1928 ^ 2;
t1903 = t2031 * t2209;
t1902 = t2028 * t2213;
t1901 = t2025 * t2217;
t1900 = t2022 * t2209;
t1899 = t2019 * t2213;
t1898 = t2016 * t2217;
t1897 = t1975 * t2146;
t1896 = t1974 * t2149;
t1895 = t1973 * t2152;
t1894 = t1975 * t2147;
t1893 = t1974 * t2150;
t1892 = t1973 * t2153;
t1891 = (t2005 - 0.1e1 / 0.2e1) * t2351 + (t2006 - 0.1e1 / 0.2e1) * t2031 * t2022;
t1890 = (t2002 - 0.1e1 / 0.2e1) * t2354 + (t2003 - 0.1e1 / 0.2e1) * t2028 * t2019;
t1889 = (t1999 - 0.1e1 / 0.2e1) * t2357 + (t2000 - 0.1e1 / 0.2e1) * t2025 * t2016;
t1876 = t2199 + t2201 + t2203;
t1875 = -t2205 - t2206 - t2207;
t1874 = -t2200 - t2202 - t2204;
t1873 = t1989 * t2203 + t1993 * t2201 + t1997 * t2199;
t1872 = -t1989 * t2207 - t1993 * t2206 - t1997 * t2205;
t1868 = -t1989 * t2204 - t1993 * t2202 - t1997 * t2200;
t1864 = 0.2e1 * t1973 * t2151 + 0.2e1 * t1974 * t2148 + 0.2e1 * t1975 * t2145;
t1863 = -0.2e1 * t1970 * t2151 - 0.2e1 * t1971 * t2148 - 0.2e1 * t1972 * t2145;
t1862 = -0.2e1 * t2200 * t2351 - 0.2e1 * t2202 * t2354 - 0.2e1 * t2204 * t2357;
t1861 = t1922 * t2203 + t1923 * t2201 + t1924 * t2199;
t1860 = -t1922 * t2207 - t1923 * t2206 - t1924 * t2205;
t1859 = -t1922 * t2204 - t1923 * t2202 - t1924 * t2200;
t1855 = pkin(2) * t1858 + t2196;
t1854 = pkin(2) * t1857 + t2197;
t1853 = pkin(2) * t1856 + t2198;
t1852 = 0.2e1 * t2023 * t2328 - t2032 * t2253;
t1851 = 0.2e1 * t2020 * t2330 - t2029 * t2254;
t1850 = 0.2e1 * t2017 * t2332 - t2026 * t2255;
t1849 = -t2023 * t2253 - 0.2e1 * t2032 * t2328;
t1848 = -t2020 * t2254 - 0.2e1 * t2029 * t2330;
t1847 = -t2017 * t2255 - 0.2e1 * t2026 * t2332;
t1846 = 0.4e1 * t1889 * t2203 + 0.4e1 * t1890 * t2201 + 0.4e1 * t1891 * t2199;
t1845 = -0.4e1 * t1889 * t2207 - 0.4e1 * t1890 * t2206 - 0.4e1 * t1891 * t2205;
t1844 = -0.4e1 * t1889 * t2204 - 0.4e1 * t1890 * t2202 - 0.4e1 * t1891 * t2200;
t1831 = -t1855 * t2022 + t1903;
t1830 = t1855 * t2031 + t1900;
t1829 = -t1854 * t2019 + t1902;
t1828 = t1854 * t2028 + t1899;
t1827 = -t1853 * t2016 + t1901;
t1826 = t1853 * t2025 + t1898;
t1819 = t2139 + t2310;
t1818 = t2140 + t2312;
t1817 = t2141 + t2314;
t1816 = t2142 - t2311;
t1815 = t2143 - t2313;
t1814 = t2144 - t2315;
t1813 = -t1843 * t2187 + 0.2e1 * t1975 * t2260;
t1812 = -t1842 * t2187 - 0.2e1 * t1972 * t2260;
t1811 = -t1841 * t2189 + 0.2e1 * t1974 * t2263;
t1810 = -t1840 * t2189 - 0.2e1 * t1971 * t2263;
t1809 = -t1839 * t2191 + 0.2e1 * t1973 * t2266;
t1808 = -t1838 * t2191 - 0.2e1 * t1970 * t2266;
t1807 = -t1843 * t2188 + t2259 * t2459;
t1806 = -t1842 * t2188 + t2259 * t2462;
t1805 = -t1841 * t2190 + t2262 * t2460;
t1804 = -t1840 * t2190 + t2262 * t2463;
t1803 = -t1839 * t2192 + t2265 * t2461;
t1802 = -t1838 * t2192 + t2265 * t2464;
t1798 = -t1819 * t2022 + t1897;
t1797 = t1819 * t2031 + t1894;
t1796 = -t1818 * t2019 + t1896;
t1795 = t1818 * t2028 + t1893;
t1794 = -t1817 * t2016 + t1895;
t1793 = t1817 * t2025 + t1892;
t1792 = -t1816 * t2031 - t2100;
t1791 = t1816 * t2022 - t2097;
t1790 = -t1815 * t2028 - t2101;
t1789 = t1815 * t2019 - t2098;
t1788 = -t1814 * t2025 - t2102;
t1787 = t1814 * t2016 - t2099;
t1786 = t2196 + (t1871 * t2136 + t1858) * t2450;
t1785 = t2197 + (t1870 * t2137 + t1857) * t2450;
t1784 = t2198 + (t1869 * t2138 + t1856) * t2450;
t1783 = -t1786 * t2022 + t1903;
t1782 = t1786 * t2031 + t1900;
t1781 = -t1785 * t2019 + t1902;
t1780 = t1785 * t2028 + t1899;
t1779 = -t1784 * t2016 + t1901;
t1778 = t1784 * t2025 + t1898;
t1771 = t2139 + (t1837 * t2136 + t1825) * t2450;
t1770 = t2140 + (t1835 * t2137 + t1823) * t2450;
t1769 = t2141 + (t1833 * t2138 + t1821) * t2450;
t1768 = t2142 + (t1836 * t2136 + t1824) * t2451;
t1767 = t2143 + (t1834 * t2137 + t1822) * t2451;
t1766 = t2144 + (t1832 * t2138 + t1820) * t2451;
t1765 = -t1771 * t2022 + t1897;
t1764 = t1771 * t2031 + t1894;
t1763 = -t1770 * t2019 + t1896;
t1762 = t1770 * t2028 + t1893;
t1761 = -t1769 * t2016 + t1895;
t1760 = t1769 * t2025 + t1892;
t1759 = -t1768 * t2031 - t2100;
t1758 = t1768 * t2022 - t2097;
t1757 = -t1767 * t2028 - t2101;
t1756 = t1767 * t2019 - t2098;
t1755 = -t1766 * t2025 - t2102;
t1754 = t1766 * t2016 - t2099;
t1753 = t2033 * t2067 + t2091 * t2456;
t1752 = t2030 * t2068 + t2092 * t2457;
t1751 = t2027 * t2069 + t2093 * t2458;
t1750 = -0.2e1 * t2033 * t2256 + (t2033 * t2085 - t2352 * t2456) * t2032 + (-t2022 * t2328 + t2268 * t2456) * t2442;
t1749 = -0.2e1 * t2030 * t2257 + (t2030 * t2086 - t2355 * t2457) * t2029 + (-t2019 * t2330 + t2269 * t2457) * t2443;
t1748 = -0.2e1 * t2027 * t2258 + (t2027 * t2087 - t2358 * t2458) * t2026 + (-t2016 * t2332 + t2270 * t2458) * t2444;
t1747 = t1777 * t2091 + t2067 * t2367;
t1746 = t1776 * t2091 - t2455 * t2285;
t1745 = t1775 * t2092 + t2068 * t2369;
t1744 = t1774 * t2092 - t2454 * t2291;
t1743 = t1773 * t2093 + t2069 * t2371;
t1742 = t1772 * t2093 - t2453 * t2297;
t1741 = t2193 * t2459 + (-t1777 * t2352 + t2085 * t2367) * t2032 + (t1777 * t2268 - t1975 * t2261) * t2442;
t1740 = t2193 * t2462 + (-t1776 * t2352 - 0.2e1 * t2127 * t2285) * t2032 + (t1776 * t2268 + t1972 * t2261) * t2442;
t1739 = t2194 * t2460 + (-t1775 * t2355 + t2086 * t2369) * t2029 + (t1775 * t2269 - t1974 * t2264) * t2443;
t1738 = t2194 * t2463 + (-t1774 * t2355 - 0.2e1 * t2129 * t2291) * t2029 + (t1774 * t2269 + t1971 * t2264) * t2443;
t1737 = t2195 * t2461 + (-t1773 * t2358 + t2087 * t2371) * t2026 + (t1773 * t2270 - t1973 * t2267) * t2444;
t1736 = t2195 * t2464 + (-t1772 * t2358 - 0.2e1 * t2131 * t2297) * t2026 + (t1772 * t2270 + t1970 * t2267) * t2444;
t1735 = (t1839 * t2249 + t1841 * t2246 + t1843 * t2243) * t2347;
t1734 = (t1838 * t2249 + t1840 * t2246 + t1842 * t2243) * t2347;
t1733 = -t2061 * t2051 - t2057 / 0.2e1;
t1732 = -t2062 * t2051 - t2058 / 0.2e1;
t1731 = -t2063 * t2051 + t2059 / 0.2e1;
t1730 = -t2064 * t2051 + t2060 / 0.2e1;
t1729 = (t1838 * t1839 * t2406 + t1840 * t1841 * t2404 + t1842 * t1843 * t2402) * t2052;
t1728 = (t2026 * t2081 + t2029 * t2080 + t2032 * t2079) * t2051;
t1727 = (t2017 * t2081 + t2020 * t2080 + t2023 * t2079) * t2051;
t1 = [t2274 + t2275 + t2276, 0, 0, t1989 * t2276 + t1993 * t2275 + t1997 * t2274, 0.2e1 * t1961 * t2216 + 0.2e1 * t1962 * t2212 + 0.2e1 * t1963 * t2208, -t2054 * t2334, -t2053 * t2334, (t1839 ^ 2 * t2406 + t1841 ^ 2 * t2404 + t1843 ^ 2 * t2402) * t2052, -t1803 * t2296 - t1805 * t2290 - t1807 * t2284 + t2054 * t2439, -t1809 * t2296 - t1811 * t2290 - t1813 * t2284 + t2053 * t2439, t1922 * t2276 + t1923 * t2275 + t1924 * t2274, 0.4e1 * t1889 * t2276 + 0.4e1 * t1890 * t2275 + 0.4e1 * t1891 * t2274, -t1773 * t2224 - t1775 * t2222 - t1777 * t2220 + (-t1839 * t2123 - t1841 * t2115 - t1843 * t2107 + (-t1833 * t2123 - t1835 * t2115 - t1837 * t2107) * t2049) * t2051, t1773 * t2230 + t1775 * t2228 + t1777 * t2226 + (t1839 * t2125 + t1841 * t2117 + t1843 * t2109 + (t1833 * t2125 + t1835 * t2117 + t1837 * t2109) * t2049) * t2051, (t1773 * t2314 + t1775 * t2312 + t1777 * t2310 + (t1773 * t2320 + t1775 * t2318 + t1777 * t2316) * t2049) * t2051, -t1737 * t2296 - t1739 * t2290 - t1741 * t2284 + (t1760 * t2314 + t1762 * t2312 + t1764 * t2310 + (t1793 * t2320 + t1795 * t2318 + t1797 * t2316) * t2049) * t2051, -t1743 * t2296 - t1745 * t2290 - t1747 * t2284 + (t1761 * t2314 + t1763 * t2312 + t1765 * t2310 + (t1794 * t2320 + t1796 * t2318 + t1798 * t2316) * t2049) * t2051, 1; t1874, 0, 0, t1868, t1862, t1727, t1728, t1729, -t1802 * t2296 - t1804 * t2290 - t1806 * t2284 + (-t1839 * t2122 - t1841 * t2114 - t1843 * t2106) * t2439, -t1808 * t2296 - t1810 * t2290 - t1812 * t2284 + (-t1839 * t2121 - t1841 * t2113 - t1843 * t2105) * t2439, t1859, t1844, -t1772 * t2224 - t1774 * t2222 - t1776 * t2220 + (t1839 * t2124 + t1841 * t2116 + t1843 * t2108 + (t1833 * t2124 + t1835 * t2116 + t1837 * t2108) * t2049) * t2051, t1772 * t2230 + t1774 * t2228 + t1776 * t2226 + (-t1839 * t2126 - t1841 * t2118 - t1843 * t2110 + (-t1833 * t2126 - t1835 * t2118 - t1837 * t2110) * t2049) * t2051, (t1772 * t2314 + t1774 * t2312 + t1776 * t2310 + (t1772 * t2320 + t1774 * t2318 + t1776 * t2316) * t2049) * t2051, -t1736 * t2296 - t1738 * t2290 - t1740 * t2284 + (t1755 * t2314 + t1757 * t2312 + t1759 * t2310 + (t1788 * t2320 + t1790 * t2318 + t1792 * t2316) * t2049) * t2051, -t1742 * t2296 - t1744 * t2290 - t1746 * t2284 + (t1754 * t2314 + t1756 * t2312 + t1758 * t2310 + (t1787 * t2320 + t1789 * t2318 + t1791 * t2316) * t2049) * t2051, 0; t1876, 0, 0, t1873, t1864, t1732, t1733, t1735, -t1847 * t2296 - t1848 * t2290 - t1849 * t2284 + t2062 * t2439, -t1850 * t2296 - t1851 * t2290 - t1852 * t2284 + t2061 * t2439, t1861, t1846, -t2458 * t2224 - t2457 * t2222 - t2456 * t2220 + (-t1839 * t2176 - t1841 * t2168 - t1843 * t2160 + (-t1833 * t2176 - t1835 * t2168 - t1837 * t2160) * t2049) * t2051, t2458 * t2230 + t2457 * t2228 + t2456 * t2226 + (t1839 * t2177 + t1841 * t2169 + t1843 * t2161 + (t1833 * t2177 + t1835 * t2169 + t1837 * t2161) * t2049) * t2051, (t2458 * t2314 + t2457 * t2312 + t2456 * t2310 + (t2316 * t2456 + t2318 * t2457 + t2320 * t2458) * t2049) * t2051, -t1748 * t2296 - t1749 * t2290 - t1750 * t2284 + (t1778 * t2314 + t1780 * t2312 + t1782 * t2310 + (t1826 * t2320 + t1828 * t2318 + t1830 * t2316) * t2049) * t2051, -t1751 * t2296 - t1752 * t2290 - t1753 * t2284 + (t1779 * t2314 + t1781 * t2312 + t1783 * t2310 + (t1827 * t2320 + t1829 * t2318 + t1831 * t2316) * t2049) * t2051, 0; t1874, 0, 0, t1868, t1862, t1727, t1728, t1729, t1803 * t2297 + t1805 * t2291 + t1807 * t2285 + (t1838 * t2120 + t1840 * t2112 + t1842 * t2104) * t2439, t1809 * t2297 + t1811 * t2291 + t1813 * t2285 + (t1838 * t2119 + t1840 * t2111 + t1842 * t2103) * t2439, t1859, t1844, t1773 * t2225 + t1775 * t2223 + t1777 * t2221 + (-t1838 * t2123 - t1840 * t2115 - t1842 * t2107 + (-t1832 * t2123 - t1834 * t2115 - t1836 * t2107) * t2049) * t2051, -t1773 * t2231 - t1775 * t2229 - t1777 * t2227 + (t1838 * t2125 + t1840 * t2117 + t1842 * t2109 + (t1832 * t2125 + t1834 * t2117 + t1836 * t2109) * t2049) * t2051, (t1773 * t2315 + t1775 * t2313 + t1777 * t2311 + (t1773 * t2321 + t1775 * t2319 + t1777 * t2317) * t2049) * t2051, t1737 * t2297 + t1739 * t2291 + t1741 * t2285 + (t1760 * t2315 + t1762 * t2313 + t1764 * t2311 + (t1793 * t2321 + t1795 * t2319 + t1797 * t2317) * t2049) * t2051, t1743 * t2297 + t1745 * t2291 + t1747 * t2285 + (t1761 * t2315 + t1763 * t2313 + t1765 * t2311 + (t1794 * t2321 + t1796 * t2319 + t1798 * t2317) * t2049) * t2051, 0; t2277 + t2278 + t2279, 0, 0, t1989 * t2279 + t1993 * t2278 + t1997 * t2277, 0.2e1 * t1958 * t2216 + 0.2e1 * t1959 * t2212 + 0.2e1 * t1960 * t2208, t2056 * t2334, t2055 * t2334, (t1838 ^ 2 * t2406 + t1840 ^ 2 * t2404 + t1842 ^ 2 * t2402) * t2052, t1802 * t2297 + t1804 * t2291 + t1806 * t2285 - t2056 * t2439, t1808 * t2297 + t1810 * t2291 + t1812 * t2285 - t2055 * t2439, t1922 * t2279 + t1923 * t2278 + t1924 * t2277, 0.4e1 * t1889 * t2279 + 0.4e1 * t1890 * t2278 + 0.4e1 * t1891 * t2277, t1772 * t2225 + t1774 * t2223 + t1776 * t2221 + (t1838 * t2124 + t1840 * t2116 + t1842 * t2108 + (t1832 * t2124 + t1834 * t2116 + t1836 * t2108) * t2049) * t2051, -t1772 * t2231 - t1774 * t2229 - t1776 * t2227 + (-t1838 * t2126 - t1840 * t2118 - t1842 * t2110 + (-t1832 * t2126 - t1834 * t2118 - t1836 * t2110) * t2049) * t2051, (t1772 * t2315 + t1774 * t2313 + t1776 * t2311 + (t1772 * t2321 + t1774 * t2319 + t1776 * t2317) * t2049) * t2051, t1736 * t2297 + t1738 * t2291 + t1740 * t2285 + (t1755 * t2315 + t1757 * t2313 + t1759 * t2311 + (t1788 * t2321 + t1790 * t2319 + t1792 * t2317) * t2049) * t2051, t1742 * t2297 + t1744 * t2291 + t1746 * t2285 + (t1754 * t2315 + t1756 * t2313 + t1758 * t2311 + (t1787 * t2321 + t1789 * t2319 + t1791 * t2317) * t2049) * t2051, 1; t1875, 0, 0, t1872, t1863, t1730, t1731, t1734, t1847 * t2297 + t1848 * t2291 + t1849 * t2285 + t2064 * t2439, t1850 * t2297 + t1851 * t2291 + t1852 * t2285 + t2063 * t2439, t1860, t1845, t2458 * t2225 + t2457 * t2223 + t2456 * t2221 + (-t1838 * t2176 - t1840 * t2168 - t1842 * t2160 + (-t1832 * t2176 - t1834 * t2168 - t1836 * t2160) * t2049) * t2051, -t2458 * t2231 - t2457 * t2229 - t2456 * t2227 + (t1838 * t2177 + t1840 * t2169 + t1842 * t2161 + (t1832 * t2177 + t1834 * t2169 + t1836 * t2161) * t2049) * t2051, (t2458 * t2315 + t2457 * t2313 + t2456 * t2311 + (t2317 * t2456 + t2319 * t2457 + t2321 * t2458) * t2049) * t2051, t1748 * t2297 + t1749 * t2291 + t1750 * t2285 + (t1778 * t2315 + t1780 * t2313 + t1782 * t2311 + (t1826 * t2321 + t1828 * t2319 + t1830 * t2317) * t2049) * t2051, t1751 * t2297 + t1752 * t2291 + t1753 * t2285 + (t1779 * t2315 + t1781 * t2313 + t1783 * t2311 + (t1827 * t2321 + t1829 * t2319 + t1831 * t2317) * t2049) * t2051, 0; t1876, 0, 0, t1873, t1864, t1732, t1733, t1735, -t1803 * t2401 - t1805 * t2398 - t1807 * t2395 + t2058 * t2440, -t1809 * t2401 - t1811 * t2398 - t1813 * t2395 + t2057 * t2440, t1861, t1846, t1928 * t2074 + t1929 * t2072 + t1930 * t2070, -t2070 * t2133 - t2072 * t2134 - t2074 * t2135, (t1773 * t2306 + t1775 * t2305 + t1777 * t2304) * t2346 + t1773 * t1856 + t1775 * t1857 + t1777 * t1858, -t1737 * t2401 - t1739 * t2398 - t1741 * t2395 + (t1793 * t2306 + t1795 * t2305 + t1797 * t2304) * t2346 + t1760 * t1856 + t1762 * t1857 + t1764 * t1858, -t1743 * t2401 - t1745 * t2398 - t1747 * t2395 + (t1794 * t2306 + t1796 * t2305 + t1798 * t2304) * t2346 + t1761 * t1856 + t1763 * t1857 + t1765 * t1858, 0; t1875, 0, 0, t1872, t1863, t1730, t1731, t1734, -t1802 * t2401 - t1804 * t2398 - t1806 * t2395 - t2060 * t2440, -t1808 * t2401 - t1810 * t2398 - t1812 * t2395 - t2059 * t2440, t1860, t1845, t1928 * t2075 + t1929 * t2073 + t1930 * t2071, -t2071 * t2133 - t2073 * t2134 - t2075 * t2135, (t1772 * t2306 + t1774 * t2305 + t1776 * t2304) * t2346 + t1772 * t1856 + t1774 * t1857 + t1776 * t1858, -t1736 * t2401 - t1738 * t2398 - t1740 * t2395 + (t1788 * t2306 + t1790 * t2305 + t1792 * t2304) * t2346 + t1755 * t1856 + t1757 * t1857 + t1759 * t1858, -t1742 * t2401 - t1744 * t2398 - t1746 * t2395 + (t1787 * t2306 + t1789 * t2305 + t1791 * t2304) * t2346 + t1754 * t1856 + t1756 * t1857 + t1758 * t1858, 0; t2360 + t2362 + t2364, 0, 0, t1989 * t2364 + t1993 * t2362 + t1997 * t2360, 0.2e1 * t2001 * t2293 + 0.2e1 * t2004 * t2287 + 0.2e1 * t2007 * t2281, -t2066, -t2065, t1867 ^ 2 / t1882 ^ 2 / 0.4e1 + t1866 ^ 2 / t1881 ^ 2 / 0.4e1 + t1865 ^ 2 / t1880 ^ 2 / 0.4e1, -t1847 * t2401 - t1848 * t2398 - t1849 * t2395 + t2066 * t2440, -t1850 * t2401 - t1851 * t2398 - t1852 * t2395 + t2065 * t2440, t1922 * t2364 + t1923 * t2362 + t1924 * t2360, 0.4e1 * t1889 * t2364 + 0.4e1 * t1890 * t2362 + 0.4e1 * t1891 * t2360, t1928 * t2078 + t1929 * t2077 + t1930 * t2076, -t2076 * t2133 - t2077 * t2134 - t2078 * t2135, (t2304 * t2456 + t2305 * t2457 + t2306 * t2458) * t2346 + t2458 * t1856 + t2457 * t1857 + t2456 * t1858, -t1748 * t2401 - t1749 * t2398 - t1750 * t2395 + (t1826 * t2306 + t1828 * t2305 + t1830 * t2304) * t2346 + t1778 * t1856 + t1780 * t1857 + t1782 * t1858, -t1751 * t2401 - t1752 * t2398 - t1753 * t2395 + (t1827 * t2306 + t1829 * t2305 + t1831 * t2304) * t2346 + t1779 * t1856 + t1781 * t1857 + t1783 * t1858, 1;];
tau_reg  = t1;
