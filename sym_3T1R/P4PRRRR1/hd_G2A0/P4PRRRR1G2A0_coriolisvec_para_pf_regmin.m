% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:00
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR1G2A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR1G2A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 10:59:16
% EndTime: 2020-08-07 10:59:23
% DurationCPUTime: 7.96s
% Computational Cost: add. (10632->419), mult. (27312->917), div. (5800->22), fcn. (20636->26), ass. (0->418)
t1145 = sin(qJ(3,4));
t1101 = t1145 ^ 2;
t1146 = sin(qJ(2,4));
t1102 = 0.1e1 / t1146;
t1148 = cos(qJ(2,4));
t1452 = t1102 * t1148;
t1355 = t1101 * t1452;
t1153 = sin(qJ(3,3));
t1112 = t1153 ^ 2;
t1154 = sin(qJ(2,3));
t1113 = 0.1e1 / t1154;
t1160 = cos(qJ(2,3));
t1444 = t1113 * t1160;
t1351 = t1112 * t1444;
t1155 = sin(qJ(3,2));
t1117 = t1155 ^ 2;
t1156 = sin(qJ(2,2));
t1118 = 0.1e1 / t1156;
t1162 = cos(qJ(2,2));
t1441 = t1118 * t1162;
t1348 = t1117 * t1441;
t1157 = sin(qJ(3,1));
t1122 = t1157 ^ 2;
t1158 = sin(qJ(2,1));
t1123 = 0.1e1 / t1158;
t1164 = cos(qJ(2,1));
t1438 = t1123 * t1164;
t1345 = t1122 * t1438;
t1169 = xP(4);
t1098 = sin(t1169);
t1099 = cos(t1169);
t1170 = koppelP(4,2);
t1174 = koppelP(4,1);
t1078 = t1098 * t1174 + t1099 * t1170;
t1082 = -t1098 * t1170 + t1099 * t1174;
t1149 = legFrame(4,2);
t1090 = sin(t1149);
t1094 = cos(t1149);
t1067 = t1078 * t1094 + t1090 * t1082;
t1165 = xDP(4);
t1167 = xDP(2);
t1168 = xDP(1);
t1062 = t1067 * t1165 + t1090 * t1167 - t1168 * t1094;
t1058 = t1062 ^ 2;
t1147 = cos(qJ(3,4));
t1416 = t1146 * t1147;
t1070 = t1090 * t1416 - t1094 * t1145;
t1071 = t1090 * t1145 + t1094 * t1416;
t1105 = 0.1e1 / t1147;
t1144 = t1165 ^ 2;
t1186 = t1147 ^ 2;
t1106 = 0.1e1 / t1186;
t1107 = t1105 * t1106;
t1178 = 0.1e1 / pkin(2);
t1447 = t1107 * t1178;
t1166 = xDP(3);
t1417 = t1145 * t1148;
t1054 = -t1062 * t1417 - t1147 * t1166;
t1050 = t1054 ^ 2;
t1103 = 0.1e1 / t1146 ^ 2;
t1104 = t1102 * t1103;
t1482 = t1050 * t1104;
t1026 = t1447 * t1482 + (t1058 * t1447 + (-t1070 * t1082 - t1071 * t1078) * t1144 * t1105) * t1102;
t1110 = t1148 ^ 2;
t1453 = t1102 * t1110;
t1354 = t1106 * t1453;
t1239 = t1026 * (t1101 * t1354 - t1146);
t1171 = koppelP(3,2);
t1175 = koppelP(3,1);
t1079 = t1098 * t1175 + t1099 * t1171;
t1083 = -t1098 * t1171 + t1099 * t1175;
t1150 = legFrame(3,2);
t1091 = sin(t1150);
t1095 = cos(t1150);
t1068 = t1079 * t1095 + t1091 * t1083;
t1063 = t1068 * t1165 + t1091 * t1167 - t1168 * t1095;
t1059 = t1063 ^ 2;
t1159 = cos(qJ(3,3));
t1410 = t1154 * t1159;
t1072 = t1091 * t1410 - t1095 * t1153;
t1075 = t1091 * t1153 + t1095 * t1410;
t1126 = 0.1e1 / t1159;
t1199 = t1159 ^ 2;
t1127 = 0.1e1 / t1199;
t1128 = t1126 * t1127;
t1433 = t1128 * t1178;
t1411 = t1153 * t1160;
t1055 = -t1063 * t1411 - t1159 * t1166;
t1051 = t1055 ^ 2;
t1114 = 0.1e1 / t1154 ^ 2;
t1115 = t1113 * t1114;
t1479 = t1051 * t1115;
t1027 = t1433 * t1479 + (t1059 * t1433 + (-t1072 * t1083 - t1075 * t1079) * t1144 * t1126) * t1113;
t1131 = t1160 ^ 2;
t1445 = t1113 * t1131;
t1350 = t1127 * t1445;
t1238 = t1027 * (t1112 * t1350 - t1154);
t1172 = koppelP(2,2);
t1176 = koppelP(2,1);
t1080 = t1098 * t1176 + t1099 * t1172;
t1084 = -t1098 * t1172 + t1099 * t1176;
t1151 = legFrame(2,2);
t1092 = sin(t1151);
t1096 = cos(t1151);
t1069 = t1080 * t1096 + t1092 * t1084;
t1064 = t1069 * t1165 + t1092 * t1167 - t1168 * t1096;
t1060 = t1064 ^ 2;
t1161 = cos(qJ(3,2));
t1405 = t1156 * t1161;
t1073 = t1092 * t1405 - t1096 * t1155;
t1076 = t1092 * t1155 + t1096 * t1405;
t1132 = 0.1e1 / t1161;
t1203 = t1161 ^ 2;
t1133 = 0.1e1 / t1203;
t1134 = t1132 * t1133;
t1428 = t1134 * t1178;
t1406 = t1155 * t1162;
t1056 = -t1064 * t1406 - t1161 * t1166;
t1052 = t1056 ^ 2;
t1119 = 0.1e1 / t1156 ^ 2;
t1120 = t1118 * t1119;
t1476 = t1052 * t1120;
t1028 = t1428 * t1476 + (t1060 * t1428 + (-t1073 * t1084 - t1076 * t1080) * t1144 * t1132) * t1118;
t1137 = t1162 ^ 2;
t1442 = t1118 * t1137;
t1347 = t1133 * t1442;
t1237 = t1028 * (t1117 * t1347 - t1156);
t1173 = koppelP(1,2);
t1177 = koppelP(1,1);
t1081 = t1098 * t1177 + t1099 * t1173;
t1085 = -t1098 * t1173 + t1099 * t1177;
t1152 = legFrame(1,2);
t1093 = sin(t1152);
t1097 = cos(t1152);
t1066 = t1081 * t1097 + t1093 * t1085;
t1065 = t1066 * t1165 + t1093 * t1167 - t1168 * t1097;
t1061 = t1065 ^ 2;
t1163 = cos(qJ(3,1));
t1400 = t1158 * t1163;
t1074 = t1093 * t1400 - t1097 * t1157;
t1077 = t1093 * t1157 + t1097 * t1400;
t1138 = 0.1e1 / t1163;
t1207 = t1163 ^ 2;
t1139 = 0.1e1 / t1207;
t1140 = t1138 * t1139;
t1423 = t1140 * t1178;
t1401 = t1157 * t1164;
t1057 = -t1065 * t1401 - t1163 * t1166;
t1053 = t1057 ^ 2;
t1124 = 0.1e1 / t1158 ^ 2;
t1125 = t1123 * t1124;
t1473 = t1053 * t1125;
t1029 = t1423 * t1473 + (t1061 * t1423 + (-t1074 * t1085 - t1077 * t1081) * t1144 * t1138) * t1123;
t1143 = t1164 ^ 2;
t1439 = t1123 * t1143;
t1344 = t1139 * t1439;
t1236 = t1029 * (t1122 * t1344 - t1158);
t1492 = t1106 * t1355;
t1491 = t1127 * t1351;
t1490 = t1133 * t1348;
t1489 = t1139 * t1345;
t1141 = 0.1e1 / t1207 ^ 2;
t1437 = t1124 * t1141;
t1460 = t1065 * t1164;
t1213 = (0.2e1 * t1057 * t1122 * t1460 + t1053 * t1157) * t1437;
t1135 = 0.1e1 / t1203 ^ 2;
t1440 = t1119 * t1135;
t1461 = t1064 * t1162;
t1214 = (0.2e1 * t1056 * t1117 * t1461 + t1052 * t1155) * t1440;
t1129 = 0.1e1 / t1199 ^ 2;
t1443 = t1114 * t1129;
t1462 = t1063 * t1160;
t1215 = (0.2e1 * t1055 * t1112 * t1462 + t1051 * t1153) * t1443;
t1108 = 0.1e1 / t1186 ^ 2;
t1451 = t1103 * t1108;
t1463 = t1062 * t1148;
t1212 = (0.2e1 * t1054 * t1101 * t1463 + t1050 * t1145) * t1451;
t1424 = t1138 * t1157;
t1228 = (t1158 + t1439) * t1029 * t1424;
t1429 = t1132 * t1155;
t1229 = (t1156 + t1442) * t1028 * t1429;
t1434 = t1126 * t1153;
t1230 = (t1154 + t1445) * t1027 * t1434;
t1448 = t1105 * t1145;
t1231 = (t1146 + t1453) * t1026 * t1448;
t1179 = 1 / (pkin(2) ^ 2);
t1488 = -2 * t1179;
t1259 = t1078 * t1090 - t1082 * t1094;
t1419 = t1145 * t1107;
t1359 = t1058 * t1419;
t1421 = t1144 * t1178;
t1038 = -t1259 * t1105 * t1421 + t1179 * t1359;
t1487 = t1038 * t1105;
t1258 = t1079 * t1091 - t1083 * t1095;
t1413 = t1153 * t1128;
t1358 = t1059 * t1413;
t1039 = -t1258 * t1126 * t1421 + t1179 * t1358;
t1486 = t1039 * t1126;
t1257 = t1080 * t1092 - t1084 * t1096;
t1408 = t1155 * t1134;
t1357 = t1060 * t1408;
t1040 = -t1257 * t1132 * t1421 + t1179 * t1357;
t1485 = t1040 * t1132;
t1256 = t1081 * t1093 - t1085 * t1097;
t1403 = t1157 * t1140;
t1356 = t1061 * t1403;
t1041 = -t1256 * t1138 * t1421 + t1179 * t1356;
t1484 = t1041 * t1138;
t1483 = t1050 * t1103;
t1481 = t1050 * t1108;
t1480 = t1051 * t1114;
t1478 = t1051 * t1129;
t1477 = t1052 * t1119;
t1475 = t1052 * t1135;
t1474 = t1053 * t1124;
t1472 = t1053 * t1141;
t1471 = t1054 * t1103;
t1470 = t1055 * t1114;
t1469 = t1056 * t1119;
t1468 = t1057 * t1124;
t1467 = t1058 * t1106;
t1466 = t1059 * t1127;
t1465 = t1060 * t1133;
t1464 = t1061 * t1139;
t1459 = t1094 * t1105;
t1458 = t1095 * t1126;
t1457 = t1096 * t1132;
t1456 = t1097 * t1138;
t1455 = t1098 * t1144;
t1454 = t1099 * t1144;
t1352 = t1106 * t1417;
t1295 = t1102 * t1352;
t1366 = t1054 * t1452;
t1418 = t1145 * t1146;
t1014 = (t1259 * t1144 * t1295 + (-(-t1062 * t1418 + t1366) * t1471 - (-t1054 * t1145 + t1463) * t1102 * t1062) * t1105 * t1447) * t1178;
t1450 = t1105 * t1014;
t1449 = t1105 * t1026;
t1109 = t1105 * t1108;
t1446 = t1109 * t1148;
t1342 = t1127 * t1411;
t1293 = t1113 * t1342;
t1364 = t1055 * t1444;
t1412 = t1153 * t1154;
t1015 = (t1258 * t1144 * t1293 + (-(-t1063 * t1412 + t1364) * t1470 - (-t1055 * t1153 + t1462) * t1113 * t1063) * t1126 * t1433) * t1178;
t1436 = t1126 * t1015;
t1435 = t1126 * t1027;
t1130 = t1126 * t1129;
t1432 = t1130 * t1160;
t1341 = t1133 * t1406;
t1292 = t1118 * t1341;
t1362 = t1056 * t1441;
t1407 = t1155 * t1156;
t1016 = (t1257 * t1144 * t1292 + (-(-t1064 * t1407 + t1362) * t1469 - (-t1056 * t1155 + t1461) * t1118 * t1064) * t1132 * t1428) * t1178;
t1431 = t1132 * t1016;
t1430 = t1132 * t1028;
t1136 = t1132 * t1135;
t1427 = t1136 * t1162;
t1340 = t1139 * t1401;
t1291 = t1123 * t1340;
t1360 = t1057 * t1438;
t1402 = t1157 * t1158;
t1017 = (t1256 * t1144 * t1291 + (-(-t1065 * t1402 + t1360) * t1468 - (-t1057 * t1157 + t1460) * t1123 * t1065) * t1138 * t1423) * t1178;
t1426 = t1138 * t1017;
t1425 = t1138 * t1029;
t1142 = t1138 * t1141;
t1422 = t1142 * t1164;
t1420 = t1145 * t1102;
t1415 = t1148 * t1014;
t1414 = t1153 * t1113;
t1409 = t1155 * t1118;
t1404 = t1157 * t1123;
t1399 = t1160 * t1015;
t1398 = t1162 * t1016;
t1397 = t1164 * t1017;
t1374 = t1179 * t1483;
t1046 = t1108 * t1374;
t1034 = t1179 * t1467 + t1046;
t1255 = t1062 * t1366 * t1488;
t1396 = -t1034 * t1416 - t1038 * t1418 + t1147 * t1415 + t1255 * t1419;
t1372 = t1179 * t1480;
t1047 = t1129 * t1372;
t1035 = t1179 * t1466 + t1047;
t1254 = t1063 * t1364 * t1488;
t1395 = -t1035 * t1410 - t1039 * t1412 + t1159 * t1399 + t1254 * t1413;
t1370 = t1179 * t1477;
t1048 = t1135 * t1370;
t1036 = t1179 * t1465 + t1048;
t1253 = t1064 * t1362 * t1488;
t1394 = -t1036 * t1405 - t1040 * t1407 + t1161 * t1398 + t1253 * t1408;
t1368 = t1179 * t1474;
t1049 = t1141 * t1368;
t1037 = t1179 * t1464 + t1049;
t1252 = t1065 * t1360 * t1488;
t1393 = -t1037 * t1400 - t1041 * t1402 + t1163 * t1397 + t1252 * t1403;
t1392 = t1034 * t1418 - t1038 * t1416 + t1106 * t1255 - t1145 * t1415;
t1391 = t1035 * t1412 - t1039 * t1410 + t1127 * t1254 - t1153 * t1399;
t1390 = t1036 * t1407 - t1040 * t1405 + t1133 * t1253 - t1155 * t1398;
t1389 = t1037 * t1402 - t1041 * t1400 + t1139 * t1252 - t1157 * t1397;
t1180 = t1178 * t1179;
t1388 = 0.2e1 * t1180;
t1387 = t1102 * t1450;
t1386 = t1113 * t1436;
t1385 = t1118 * t1431;
t1384 = t1123 * t1426;
t1383 = t1102 * t1449;
t1381 = t1113 * t1435;
t1379 = t1118 * t1430;
t1377 = t1123 * t1425;
t1375 = t1109 * t1483;
t1373 = t1130 * t1480;
t1371 = t1136 * t1477;
t1369 = t1142 * t1474;
t1367 = t1062 * t1471;
t1365 = t1063 * t1470;
t1363 = t1064 * t1469;
t1361 = t1065 * t1468;
t1339 = t1026 * t1452;
t1338 = t1027 * t1444;
t1337 = t1028 * t1441;
t1336 = t1029 * t1438;
t1335 = t1102 * t1396;
t1334 = t1102 * t1392;
t1333 = t1113 * t1395;
t1332 = t1113 * t1391;
t1331 = t1118 * t1394;
t1330 = t1118 * t1390;
t1329 = t1123 * t1393;
t1328 = t1123 * t1389;
t1323 = t1148 * t1387;
t1322 = t1160 * t1386;
t1321 = t1162 * t1385;
t1320 = t1164 * t1384;
t1319 = t1026 * t1352;
t1318 = t1027 * t1342;
t1317 = t1028 * t1341;
t1316 = t1029 * t1340;
t1315 = t1420 * t1487;
t1314 = t1414 * t1486;
t1313 = t1409 * t1485;
t1312 = t1404 * t1484;
t1311 = t1446 * t1482;
t1310 = t1050 * t1148 * t1451;
t1309 = t1432 * t1479;
t1308 = t1051 * t1160 * t1443;
t1307 = t1427 * t1476;
t1306 = t1052 * t1162 * t1440;
t1305 = t1422 * t1473;
t1304 = t1053 * t1164 * t1437;
t1303 = t1145 * t1367;
t1302 = t1153 * t1365;
t1301 = t1155 * t1363;
t1300 = t1157 * t1361;
t1299 = t1102 * t1359;
t1298 = t1113 * t1358;
t1297 = t1118 * t1357;
t1296 = t1123 * t1356;
t1294 = t1105 * t1339;
t1290 = t1126 * t1338;
t1289 = t1132 * t1337;
t1288 = t1138 * t1336;
t1287 = t1105 * t1335;
t1286 = t1126 * t1333;
t1285 = t1132 * t1331;
t1284 = t1138 * t1329;
t1283 = t1105 * t1334;
t1282 = t1126 * t1332;
t1281 = t1132 * t1330;
t1280 = t1138 * t1328;
t1279 = t1014 * t1145 * t1492;
t1278 = t1014 * t1295;
t1277 = t1015 * t1153 * t1491;
t1276 = t1015 * t1293;
t1275 = t1016 * t1155 * t1490;
t1274 = t1016 * t1292;
t1273 = t1017 * t1157 * t1489;
t1272 = t1017 * t1291;
t1271 = t1026 * t1145 * t1354;
t1270 = t1027 * t1153 * t1350;
t1269 = t1028 * t1155 * t1347;
t1268 = t1029 * t1157 * t1344;
t1267 = t1058 * t1108 * t1355;
t1266 = t1148 * t1299;
t1265 = t1059 * t1129 * t1351;
t1264 = t1160 * t1298;
t1263 = t1060 * t1135 * t1348;
t1262 = t1162 * t1297;
t1261 = t1061 * t1141 * t1345;
t1260 = t1164 * t1296;
t1251 = 0.2e1 * t1014 * t1355 + 0.2e1 * t1106 * t1374 - t1046;
t1250 = 0.2e1 * t1015 * t1351 + 0.2e1 * t1127 * t1372 - t1047;
t1249 = 0.2e1 * t1016 * t1348 + 0.2e1 * t1133 * t1370 - t1048;
t1248 = 0.2e1 * t1017 * t1345 + 0.2e1 * t1139 * t1368 - t1049;
t1243 = t1148 * t1315 - t1014;
t1242 = t1160 * t1314 - t1015;
t1241 = t1162 * t1313 - t1016;
t1240 = t1164 * t1312 - t1017;
t1235 = t1251 * t1105;
t1234 = t1250 * t1126;
t1233 = t1249 * t1132;
t1232 = t1248 * t1138;
t1086 = -0.1e1 + 0.2e1 * t1186;
t1227 = t1086 * t1303 * t1446;
t1087 = -0.1e1 + 0.2e1 * t1199;
t1226 = t1087 * t1302 * t1432;
t1088 = -0.1e1 + 0.2e1 * t1203;
t1225 = t1088 * t1301 * t1427;
t1089 = -0.1e1 + 0.2e1 * t1207;
t1224 = t1089 * t1300 * t1422;
t1219 = -t1014 * t1448 + t1038 * t1492;
t1218 = -t1015 * t1434 + t1039 * t1491;
t1217 = -t1016 * t1429 + t1040 * t1490;
t1216 = -t1017 * t1424 + t1041 * t1489;
t1211 = t1336 + t1337 + t1338 + t1339;
t1045 = (-t1074 * t1081 + t1077 * t1085) * t1138 * t1123;
t1044 = (-t1073 * t1080 + t1076 * t1084) * t1132 * t1118;
t1043 = (-t1072 * t1079 + t1075 * t1083) * t1126 * t1113;
t1042 = (-t1070 * t1078 + t1071 * t1082) * t1105 * t1102;
t1 = [t1070 * t1383 + t1072 * t1381 + t1073 * t1379 + t1074 * t1377, (t1094 * t1278 + t1095 * t1276 + t1096 * t1274 + t1097 * t1272) * t1178, t1070 * t1323 + t1072 * t1322 + t1073 * t1321 + t1074 * t1320 + (-t1070 * t1375 - t1072 * t1373 - t1073 * t1371 - t1074 * t1369) * t1179 + (t1094 * t1271 + t1095 * t1270 + t1096 * t1269 + t1097 * t1268) * t1178, -t1070 * t1450 - t1072 * t1436 - t1073 * t1431 - t1074 * t1426 + (-t1070 * t1311 - t1072 * t1309 - t1073 * t1307 - t1074 * t1305) * t1179 + (-t1094 * t1319 - t1095 * t1318 - t1096 * t1317 - t1097 * t1316) * t1178, (t1094 * t1279 + t1095 * t1277 + t1096 * t1275 + t1097 * t1273) * t1178 + (t1094 * t1212 + t1095 * t1215 + t1096 * t1214 + t1097 * t1213) * t1180, (t1094 * t1227 + t1095 * t1226 + t1096 * t1225 + t1097 * t1224) * t1388 + (t1248 * t1456 + t1249 * t1457 + t1250 * t1458 + t1251 * t1459) * t1178, (t1094 * t1266 + t1095 * t1264 + t1096 * t1262 + t1097 * t1260) * t1180 + (t1094 * t1219 + t1095 * t1218 + t1096 * t1217 + t1097 * t1216) * t1178, (-t1094 * t1267 - t1095 * t1265 - t1096 * t1263 - t1097 * t1261) * t1180 + (t1094 * t1243 + t1095 * t1242 + t1096 * t1241 + t1097 * t1240) * t1178, (-t1038 * t1459 - t1039 * t1458 - t1040 * t1457 - t1041 * t1456) * t1178, t1074 * t1284 + t1073 * t1285 + t1072 * t1286 + t1070 * t1287 + (t1094 * t1231 + t1095 * t1230 + t1096 * t1229 + t1097 * t1228) * t1178, t1074 * t1280 + t1073 * t1281 + t1072 * t1282 + t1070 * t1283 + (-t1094 * t1239 - t1095 * t1238 - t1096 * t1237 - t1097 * t1236) * t1178, 0, -t1454, t1455, 0; t1071 * t1383 + t1075 * t1381 + t1076 * t1379 + t1077 * t1377, (-t1090 * t1278 - t1091 * t1276 - t1092 * t1274 - t1093 * t1272) * t1178, t1071 * t1323 + t1075 * t1322 + t1076 * t1321 + t1077 * t1320 + (-t1071 * t1375 - t1075 * t1373 - t1076 * t1371 - t1077 * t1369) * t1179 + (-t1090 * t1271 - t1091 * t1270 - t1092 * t1269 - t1093 * t1268) * t1178, -t1071 * t1450 - t1075 * t1436 - t1076 * t1431 - t1077 * t1426 + (-t1071 * t1311 - t1075 * t1309 - t1076 * t1307 - t1077 * t1305) * t1179 + (t1090 * t1319 + t1091 * t1318 + t1092 * t1317 + t1093 * t1316) * t1178, (-t1090 * t1279 - t1091 * t1277 - t1092 * t1275 - t1093 * t1273) * t1178 + (-t1090 * t1212 - t1091 * t1215 - t1092 * t1214 - t1093 * t1213) * t1180, (-t1090 * t1227 - t1091 * t1226 - t1092 * t1225 - t1093 * t1224) * t1388 + (-t1090 * t1235 - t1091 * t1234 - t1092 * t1233 - t1093 * t1232) * t1178, (-t1090 * t1266 - t1091 * t1264 - t1092 * t1262 - t1093 * t1260) * t1180 + (-t1090 * t1219 - t1091 * t1218 - t1092 * t1217 - t1093 * t1216) * t1178, (t1090 * t1267 + t1091 * t1265 + t1092 * t1263 + t1093 * t1261) * t1180 + (-t1090 * t1243 - t1091 * t1242 - t1092 * t1241 - t1093 * t1240) * t1178, (t1090 * t1487 + t1091 * t1486 + t1092 * t1485 + t1093 * t1484) * t1178, t1077 * t1284 + t1076 * t1285 + t1075 * t1286 + t1071 * t1287 + (-t1090 * t1231 - t1091 * t1230 - t1092 * t1229 - t1093 * t1228) * t1178, t1077 * t1280 + t1076 * t1281 + t1075 * t1282 + t1071 * t1283 + (t1090 * t1239 + t1091 * t1238 + t1092 * t1237 + t1093 * t1236) * t1178, 0, -t1455, -t1454, 0; t1211, (-t1384 - t1385 - t1386 - t1387) * t1178, t1014 * t1453 + t1015 * t1445 + t1016 * t1442 + t1017 * t1439 + (-t1304 - t1306 - t1308 - t1310) * t1179 + (-t1288 - t1289 - t1290 - t1294) * t1178, -t1415 - t1399 - t1398 - t1397 + (-t1110 * t1104 * t1481 - t1131 * t1115 * t1478 - t1137 * t1120 * t1475 - t1143 * t1125 * t1472) * t1179 + (t1425 + t1430 + t1435 + t1449) * t1178, (-t1107 * t1303 - t1128 * t1302 - t1134 * t1301 - t1140 * t1300) * t1388 + (-t1101 * t1387 - t1112 * t1386 - t1117 * t1385 - t1122 * t1384) * t1178, 0.2e1 * (-t1086 * t1108 * t1367 - t1087 * t1129 * t1365 - t1088 * t1135 * t1363 - t1089 * t1141 * t1361) * t1180 + 0.2e1 * (-t1014 * t1420 - t1015 * t1414 - t1016 * t1409 - t1017 * t1404) * t1178, (-t1102 * t1467 - t1113 * t1466 - t1118 * t1465 - t1123 * t1464) * t1180 + (-t1312 - t1313 - t1314 - t1315) * t1178, (t1296 + t1297 + t1298 + t1299) * t1180 + (-t1038 * t1102 - t1039 * t1113 - t1040 * t1118 - t1041 * t1123) * t1178, 0, t1148 * t1335 + t1160 * t1333 + t1162 * t1331 + t1164 * t1329 - t1178 * t1211, t1164 * t1328 + t1162 * t1330 + t1160 * t1332 + t1148 * t1334 + (t1145 * t1294 + t1153 * t1290 + t1155 * t1289 + t1157 * t1288) * t1178, 0, 0, 0, 0; t1042 * t1026 + t1043 * t1027 + t1044 * t1028 + t1045 * t1029, (-t1066 * t1272 - t1067 * t1278 - t1068 * t1276 - t1069 * t1274) * t1178, t1042 * t1415 + t1043 * t1399 + t1044 * t1398 + t1045 * t1397 + (-t1042 * t1102 * t1481 - t1043 * t1113 * t1478 - t1044 * t1118 * t1475 - t1045 * t1123 * t1472) * t1179 + (-t1066 * t1268 - t1067 * t1271 - t1068 * t1270 - t1069 * t1269) * t1178, -t1042 * t1014 * t1146 - t1043 * t1015 * t1154 - t1044 * t1016 * t1156 - t1045 * t1017 * t1158 + (-t1042 * t1310 - t1043 * t1308 - t1044 * t1306 - t1045 * t1304) * t1179 + (t1066 * t1316 + t1067 * t1319 + t1068 * t1318 + t1069 * t1317) * t1178, (-t1066 * t1273 - t1067 * t1279 - t1068 * t1277 - t1069 * t1275) * t1178 + (-t1066 * t1213 - t1067 * t1212 - t1068 * t1215 - t1069 * t1214) * t1180, (-t1066 * t1224 - t1067 * t1227 - t1068 * t1226 - t1069 * t1225) * t1388 + (-t1066 * t1232 - t1067 * t1235 - t1068 * t1234 - t1069 * t1233) * t1178, (-t1066 * t1260 - t1067 * t1266 - t1068 * t1264 - t1069 * t1262) * t1180 + (-t1066 * t1216 - t1067 * t1219 - t1068 * t1218 - t1069 * t1217) * t1178, (t1066 * t1261 + t1067 * t1267 + t1068 * t1265 + t1069 * t1263) * t1180 + (-t1066 * t1240 - t1067 * t1243 - t1068 * t1242 - t1069 * t1241) * t1178, (t1066 * t1484 + t1067 * t1487 + t1068 * t1486 + t1069 * t1485) * t1178, t1393 * t1045 + t1394 * t1044 + t1395 * t1043 + t1396 * t1042 + (-t1066 * t1228 - t1067 * t1231 - t1068 * t1230 - t1069 * t1229) * t1178, t1389 * t1045 + t1390 * t1044 + t1391 * t1043 + t1392 * t1042 + (t1066 * t1236 + t1067 * t1239 + t1068 * t1238 + t1069 * t1237) * t1178, 0, 0, 0, 0;];
tau_reg  = t1;
