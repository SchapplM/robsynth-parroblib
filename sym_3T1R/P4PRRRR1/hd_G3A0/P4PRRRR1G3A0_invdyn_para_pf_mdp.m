% Calculate minimal parameter regressor of inverse dynamics forces for
% P4PRRRR1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR1G3A0_convert_par2_MPV_fixb.m

% Output:
% tauX [4x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-03-02 19:06
% Revision: 0f11fd83bca0a8cdff505979e09e2c4d81033460 (2020-02-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P4PRRRR1G3A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(2,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR1G3A0_invdyn_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-03-02 19:05:34
% EndTime: 2020-03-02 19:05:45
% DurationCPUTime: 11.30s
% Computational Cost: add. (7707->451), mult. (17483->814), div. (4732->22), fcn. (13960->26), ass. (0->300)
t1500 = xP(4);
t1440 = sin(t1500);
t1441 = cos(t1500);
t1501 = koppelP(4,2);
t1505 = koppelP(4,1);
t1418 = t1440 * t1505 + t1441 * t1501;
t1422 = -t1440 * t1501 + t1441 * t1505;
t1476 = legFrame(4,2);
t1432 = sin(t1476);
t1436 = cos(t1476);
t1382 = t1418 * t1436 + t1432 * t1422;
t1472 = sin(qJ(3,4));
t1474 = cos(qJ(3,4));
t1496 = xDP(4);
t1498 = xDP(2);
t1499 = xDP(1);
t1475 = cos(qJ(2,4));
t1497 = xDP(3);
t1592 = t1475 * t1497;
t1375 = (t1382 * t1496 + t1432 * t1498 - t1499 * t1436) * t1474 - t1472 * t1592;
t1370 = t1375 ^ 2;
t1473 = sin(qJ(2,4));
t1444 = 0.1e1 / t1473 ^ 2;
t1634 = t1370 * t1444;
t1502 = koppelP(3,2);
t1506 = koppelP(3,1);
t1419 = t1440 * t1506 + t1441 * t1502;
t1423 = -t1440 * t1502 + t1441 * t1506;
t1477 = legFrame(3,2);
t1433 = sin(t1477);
t1437 = cos(t1477);
t1383 = t1419 * t1437 + t1433 * t1423;
t1484 = sin(qJ(3,3));
t1490 = cos(qJ(3,3));
t1491 = cos(qJ(2,3));
t1590 = t1491 * t1497;
t1379 = (t1383 * t1496 + t1433 * t1498 - t1499 * t1437) * t1490 - t1484 * t1590;
t1372 = t1379 ^ 2;
t1485 = sin(qJ(2,3));
t1451 = 0.1e1 / t1485 ^ 2;
t1633 = t1372 * t1451;
t1503 = koppelP(2,2);
t1507 = koppelP(2,1);
t1420 = t1440 * t1507 + t1441 * t1503;
t1424 = -t1440 * t1503 + t1441 * t1507;
t1478 = legFrame(2,2);
t1434 = sin(t1478);
t1438 = cos(t1478);
t1384 = t1420 * t1438 + t1434 * t1424;
t1486 = sin(qJ(3,2));
t1492 = cos(qJ(3,2));
t1493 = cos(qJ(2,2));
t1589 = t1493 * t1497;
t1380 = (t1384 * t1496 + t1434 * t1498 - t1499 * t1438) * t1492 - t1486 * t1589;
t1373 = t1380 ^ 2;
t1487 = sin(qJ(2,2));
t1454 = 0.1e1 / t1487 ^ 2;
t1632 = t1373 * t1454;
t1504 = koppelP(1,2);
t1508 = koppelP(1,1);
t1421 = t1440 * t1508 + t1441 * t1504;
t1425 = -t1440 * t1504 + t1441 * t1508;
t1479 = legFrame(1,2);
t1435 = sin(t1479);
t1439 = cos(t1479);
t1385 = t1421 * t1439 + t1435 * t1425;
t1488 = sin(qJ(3,1));
t1494 = cos(qJ(3,1));
t1495 = cos(qJ(2,1));
t1588 = t1495 * t1497;
t1381 = (t1385 * t1496 + t1435 * t1498 - t1499 * t1439) * t1494 - t1488 * t1588;
t1374 = t1381 ^ 2;
t1489 = sin(qJ(2,1));
t1457 = 0.1e1 / t1489 ^ 2;
t1631 = t1374 * t1457;
t1509 = 0.1e1 / pkin(2);
t1643 = 2 * MDP(6);
t1443 = 0.1e1 / t1473;
t1445 = 0.1e1 / t1474;
t1450 = 0.1e1 / t1485;
t1453 = 0.1e1 / t1487;
t1456 = 0.1e1 / t1489;
t1458 = 0.1e1 / t1490;
t1462 = 0.1e1 / t1492;
t1466 = 0.1e1 / t1494;
t1510 = 0.1e1 / pkin(2) ^ 2;
t1516 = t1474 ^ 2;
t1446 = 0.1e1 / t1516;
t1525 = t1490 ^ 2;
t1459 = 0.1e1 / t1525;
t1528 = t1492 ^ 2;
t1463 = 0.1e1 / t1528;
t1531 = t1494 ^ 2;
t1467 = 0.1e1 / t1531;
t1470 = t1496 ^ 2;
t1480 = xDDP(4);
t1482 = xDDP(2);
t1386 = -t1418 * t1470 + t1422 * t1480 + t1482;
t1483 = xDDP(1);
t1390 = -t1418 * t1480 - t1422 * t1470 + t1483;
t1447 = t1445 * t1446;
t1481 = xDDP(3);
t1611 = t1446 * t1475;
t1566 = t1472 * t1611;
t1448 = 0.1e1 / t1516 ^ 2;
t1610 = t1448 * t1510;
t1567 = t1444 * t1610;
t1587 = t1497 * t1509;
t1613 = t1443 * t1475;
t1350 = -(-t1472 * t1473 * t1497 + t1375 * t1613) * t1375 * t1567 + (-t1481 * t1566 + (t1432 * t1386 - t1436 * t1390 - (-t1375 * t1472 + t1592) * t1447 * t1587) * t1445) * t1443 * t1509;
t1642 = t1350 * t1474;
t1387 = -t1419 * t1470 + t1423 * t1480 + t1482;
t1391 = -t1419 * t1480 - t1423 * t1470 + t1483;
t1460 = t1458 * t1459;
t1602 = t1459 * t1491;
t1556 = t1484 * t1602;
t1461 = 0.1e1 / t1525 ^ 2;
t1601 = t1461 * t1510;
t1563 = t1451 * t1601;
t1608 = t1450 * t1491;
t1351 = -(-t1484 * t1485 * t1497 + t1379 * t1608) * t1379 * t1563 + (-t1481 * t1556 + (t1433 * t1387 - t1437 * t1391 - (-t1379 * t1484 + t1590) * t1460 * t1587) * t1458) * t1450 * t1509;
t1641 = t1351 * t1490;
t1388 = -t1420 * t1470 + t1424 * t1480 + t1482;
t1392 = -t1420 * t1480 - t1424 * t1470 + t1483;
t1464 = t1462 * t1463;
t1599 = t1463 * t1493;
t1555 = t1486 * t1599;
t1465 = 0.1e1 / t1528 ^ 2;
t1598 = t1465 * t1510;
t1560 = t1454 * t1598;
t1606 = t1453 * t1493;
t1352 = -(-t1486 * t1487 * t1497 + t1380 * t1606) * t1380 * t1560 + (-t1481 * t1555 + (t1434 * t1388 - t1438 * t1392 - (-t1380 * t1486 + t1589) * t1464 * t1587) * t1462) * t1453 * t1509;
t1640 = t1352 * t1492;
t1389 = -t1421 * t1470 + t1425 * t1480 + t1482;
t1393 = -t1421 * t1480 - t1425 * t1470 + t1483;
t1468 = t1466 * t1467;
t1596 = t1467 * t1495;
t1554 = t1488 * t1596;
t1469 = 0.1e1 / t1531 ^ 2;
t1595 = t1469 * t1510;
t1557 = t1457 * t1595;
t1604 = t1456 * t1495;
t1353 = -(-t1488 * t1489 * t1497 + t1381 * t1604) * t1381 * t1557 + (-t1481 * t1554 + (t1435 * t1389 - t1439 * t1393 - (-t1381 * t1488 + t1588) * t1468 * t1587) * t1466) * t1456 * t1509;
t1639 = t1353 * t1494;
t1408 = -t1432 * t1475 + t1436 * t1473;
t1409 = t1432 * t1473 + t1436 * t1475;
t1471 = t1497 ^ 2;
t1594 = t1471 * t1509;
t1612 = t1445 * t1472;
t1362 = -t1432 * g(1) - t1436 * g(2) + (t1386 * t1408 + t1390 * t1409 + t1481 * t1612 + (t1509 * t1634 + t1594) * t1447) * t1443;
t1426 = g(1) * t1436 - g(2) * t1432;
t1354 = t1362 * t1475 + t1426 * t1473;
t1638 = t1354 * t1443;
t1410 = -t1433 * t1491 + t1437 * t1485;
t1411 = t1433 * t1485 + t1437 * t1491;
t1603 = t1458 * t1484;
t1363 = -t1433 * g(1) - t1437 * g(2) + (t1387 * t1410 + t1391 * t1411 + t1481 * t1603 + (t1509 * t1633 + t1594) * t1460) * t1450;
t1427 = g(1) * t1437 - g(2) * t1433;
t1356 = t1363 * t1491 + t1427 * t1485;
t1637 = t1356 * t1450;
t1412 = -t1434 * t1493 + t1438 * t1487;
t1413 = t1434 * t1487 + t1438 * t1493;
t1600 = t1462 * t1486;
t1364 = -t1434 * g(1) - t1438 * g(2) + (t1388 * t1412 + t1392 * t1413 + t1481 * t1600 + (t1509 * t1632 + t1594) * t1464) * t1453;
t1428 = g(1) * t1438 - g(2) * t1434;
t1357 = t1364 * t1493 + t1428 * t1487;
t1636 = t1357 * t1453;
t1414 = -t1435 * t1495 + t1439 * t1489;
t1415 = t1435 * t1489 + t1439 * t1495;
t1597 = t1466 * t1488;
t1365 = -t1435 * g(1) - t1439 * g(2) + (t1389 * t1414 + t1393 * t1415 + t1481 * t1597 + (t1509 * t1631 + t1594) * t1468) * t1456;
t1429 = g(1) * t1439 - g(2) * t1435;
t1358 = t1365 * t1495 + t1429 * t1489;
t1635 = t1358 * t1456;
t1593 = t1471 * t1510;
t1553 = t1472 * t1593;
t1591 = t1481 * t1509;
t1404 = t1445 * t1591 + t1447 * t1553;
t1630 = t1404 * t1472;
t1629 = t1404 * t1474;
t1552 = t1484 * t1593;
t1405 = t1458 * t1591 + t1460 * t1552;
t1628 = t1405 * t1484;
t1627 = t1405 * t1490;
t1551 = t1486 * t1593;
t1406 = t1462 * t1591 + t1464 * t1551;
t1626 = t1406 * t1486;
t1625 = t1406 * t1492;
t1550 = t1488 * t1593;
t1407 = t1466 * t1591 + t1468 * t1550;
t1624 = t1407 * t1488;
t1623 = t1407 * t1494;
t1622 = t1408 * t1443;
t1621 = t1409 * t1443;
t1620 = t1410 * t1450;
t1619 = t1411 * t1450;
t1618 = t1412 * t1453;
t1617 = t1413 * t1453;
t1616 = t1414 * t1456;
t1615 = t1415 * t1456;
t1614 = t1443 * t1445;
t1609 = t1450 * t1458;
t1607 = t1453 * t1462;
t1605 = t1456 * t1466;
t1586 = t1497 * t1510;
t1585 = t1448 * t1634;
t1584 = t1461 * t1633;
t1583 = t1465 * t1632;
t1582 = t1469 * t1631;
t1581 = t1382 * t1614;
t1580 = t1383 * t1609;
t1579 = t1384 * t1607;
t1578 = t1385 * t1605;
t1577 = t1432 * t1614;
t1576 = t1433 * t1609;
t1575 = t1434 * t1607;
t1574 = t1435 * t1605;
t1573 = t1436 * t1614;
t1572 = t1437 * t1609;
t1571 = t1438 * t1607;
t1570 = t1439 * t1605;
t1569 = t1443 * t1612;
t1568 = t1443 * t1611;
t1565 = t1450 * t1603;
t1564 = t1450 * t1602;
t1562 = t1453 * t1600;
t1561 = t1453 * t1599;
t1559 = t1456 * t1597;
t1558 = t1456 * t1596;
t1549 = t1375 * t1443 * t1586;
t1548 = t1379 * t1450 * t1586;
t1547 = t1380 * t1453 * t1586;
t1546 = t1381 * t1456 * t1586;
t1545 = t1443 * t1566;
t1544 = t1450 * t1556;
t1543 = t1453 * t1555;
t1542 = t1456 * t1554;
t1541 = t1354 * t1569;
t1540 = t1356 * t1565;
t1539 = t1357 * t1562;
t1538 = t1358 * t1559;
t1537 = 0.2e1 * t1446 * t1549;
t1536 = 0.2e1 * t1459 * t1548;
t1535 = 0.2e1 * t1463 * t1547;
t1534 = 0.2e1 * t1467 * t1546;
t1455 = t1488 ^ 2;
t1452 = t1486 ^ 2;
t1449 = t1484 ^ 2;
t1442 = t1472 ^ 2;
t1431 = t1483 - g(1);
t1430 = t1482 - g(2);
t1417 = -t1440 * t1480 - t1441 * t1470;
t1416 = -t1440 * t1470 + t1441 * t1480;
t1403 = t1430 * t1440 + t1431 * t1441;
t1402 = t1430 * t1441 - t1431 * t1440;
t1401 = t1466 * t1593 + t1624;
t1400 = t1462 * t1593 + t1626;
t1399 = t1458 * t1593 + t1628;
t1398 = t1445 * t1593 + t1630;
t1397 = -t1467 * t1550 + t1623;
t1396 = -t1463 * t1551 + t1625;
t1395 = -t1459 * t1552 + t1627;
t1394 = -t1446 * t1553 + t1629;
t1378 = (t1414 * t1425 - t1415 * t1421) * t1456;
t1377 = (t1412 * t1424 - t1413 * t1420) * t1453;
t1376 = (t1410 * t1423 - t1411 * t1419) * t1450;
t1371 = (t1408 * t1422 - t1409 * t1418) * t1443;
t1369 = (t1467 * t1471 + t1582) * t1510;
t1368 = (t1463 * t1471 + t1583) * t1510;
t1367 = (t1459 * t1471 + t1584) * t1510;
t1366 = (t1446 * t1471 + t1585) * t1510;
t1361 = -t1365 * t1489 + t1429 * t1495;
t1360 = -t1364 * t1487 + t1428 * t1493;
t1359 = -t1363 * t1485 + t1427 * t1491;
t1355 = -t1362 * t1473 + t1426 * t1475;
t1349 = -t1374 * t1456 * t1595 + t1353 * t1495;
t1348 = -t1373 * t1453 * t1598 + t1352 * t1493;
t1347 = -t1372 * t1450 * t1601 + t1351 * t1491;
t1346 = -t1374 * t1495 * t1557 - t1353 * t1489;
t1345 = -t1373 * t1493 * t1560 - t1352 * t1487;
t1344 = -t1372 * t1491 * t1563 - t1351 * t1485;
t1343 = t1353 * t1455 + t1488 * t1534;
t1342 = t1352 * t1452 + t1486 * t1535;
t1341 = t1351 * t1449 + t1484 * t1536;
t1340 = -t1370 * t1443 * t1610 + t1350 * t1475;
t1339 = -t1370 * t1475 * t1567 - t1350 * t1473;
t1338 = t1350 * t1442 + t1472 * t1537;
t1337 = t1488 * t1639 + (0.2e1 * t1466 - t1468) * t1546;
t1336 = t1486 * t1640 + (0.2e1 * t1462 - t1464) * t1547;
t1335 = t1484 * t1641 + (0.2e1 * t1458 - t1460) * t1548;
t1334 = t1472 * t1642 + (0.2e1 * t1445 - t1447) * t1549;
t1333 = (t1369 * t1488 - t1623) * t1489 - t1495 * (t1353 * t1488 + t1534);
t1332 = (t1368 * t1486 - t1625) * t1487 - t1493 * (t1352 * t1486 + t1535);
t1331 = (t1367 * t1484 - t1627) * t1485 - t1491 * (t1351 * t1484 + t1536);
t1330 = (-t1369 * t1494 - t1624) * t1489 + (-0.2e1 * t1468 * t1488 * t1546 + t1639) * t1495;
t1329 = (-t1368 * t1492 - t1626) * t1487 + (-0.2e1 * t1464 * t1486 * t1547 + t1640) * t1493;
t1328 = (-t1367 * t1490 - t1628) * t1485 + (-0.2e1 * t1460 * t1484 * t1548 + t1641) * t1491;
t1327 = (t1366 * t1472 - t1629) * t1473 - t1475 * (t1350 * t1472 + t1537);
t1326 = (-t1366 * t1474 - t1630) * t1473 + (-0.2e1 * t1447 * t1472 * t1549 + t1642) * t1475;
t1 = [(t1362 * t1621 + t1363 * t1619 + t1364 * t1617 + t1365 * t1615) * MDP(1) + (t1340 * t1621 + t1347 * t1619 + t1348 * t1617 + t1349 * t1615) * MDP(3) + (t1339 * t1621 + t1344 * t1619 + t1345 * t1617 + t1346 * t1615) * MDP(4) + (t1326 * t1621 + t1328 * t1619 + t1329 * t1617 + t1330 * t1615) * MDP(10) + (t1327 * t1621 + t1331 * t1619 + t1332 * t1617 + t1333 * t1615) * MDP(11) + t1417 * MDP(13) - t1416 * MDP(14) + (-t1402 * t1440 + t1403 * t1441) * MDP(15) + ((-t1350 * t1573 - t1351 * t1572 - t1352 * t1571 - t1353 * t1570) * MDP(2) + (-t1354 * t1573 - t1356 * t1572 - t1357 * t1571 - t1358 * t1570) * MDP(3) + (-t1355 * t1573 - t1359 * t1572 - t1360 * t1571 - t1361 * t1570) * MDP(4) + (-t1338 * t1573 - t1341 * t1572 - t1342 * t1571 - t1343 * t1570) * MDP(5) + (-t1398 * t1573 - t1399 * t1572 - t1400 * t1571 - t1401 * t1570) * MDP(7) + (-t1394 * t1573 - t1395 * t1572 - t1396 * t1571 - t1397 * t1570) * MDP(8) + (-t1436 * t1638 - t1437 * t1637 - t1438 * t1636 - t1439 * t1635) * MDP(10) + (t1436 * t1541 + t1437 * t1540 + t1438 * t1539 + t1439 * t1538) * MDP(11) + (-t1334 * t1573 - t1335 * t1572 - t1336 * t1571 - t1337 * t1570) * t1643) * t1509; (t1362 * t1622 + t1363 * t1620 + t1364 * t1618 + t1365 * t1616) * MDP(1) + (t1340 * t1622 + t1347 * t1620 + t1348 * t1618 + t1349 * t1616) * MDP(3) + (t1339 * t1622 + t1344 * t1620 + t1345 * t1618 + t1346 * t1616) * MDP(4) + (t1326 * t1622 + t1328 * t1620 + t1329 * t1618 + t1330 * t1616) * MDP(10) + (t1327 * t1622 + t1331 * t1620 + t1332 * t1618 + t1333 * t1616) * MDP(11) + t1416 * MDP(13) + t1417 * MDP(14) + (t1402 * t1441 + t1403 * t1440) * MDP(15) + ((t1350 * t1577 + t1351 * t1576 + t1352 * t1575 + t1353 * t1574) * MDP(2) + (t1354 * t1577 + t1356 * t1576 + t1357 * t1575 + t1358 * t1574) * MDP(3) + (t1355 * t1577 + t1359 * t1576 + t1360 * t1575 + t1361 * t1574) * MDP(4) + (t1338 * t1577 + t1341 * t1576 + t1342 * t1575 + t1343 * t1574) * MDP(5) + (t1398 * t1577 + t1399 * t1576 + t1400 * t1575 + t1401 * t1574) * MDP(7) + (t1394 * t1577 + t1395 * t1576 + t1396 * t1575 + t1397 * t1574) * MDP(8) + (t1432 * t1638 + t1433 * t1637 + t1434 * t1636 + t1435 * t1635) * MDP(10) + (-t1432 * t1541 - t1433 * t1540 - t1434 * t1539 - t1435 * t1538) * MDP(11) + (t1334 * t1577 + t1335 * t1576 + t1336 * t1575 + t1337 * t1574) * t1643) * t1509; (t1362 * t1569 + t1363 * t1565 + t1364 * t1562 + t1365 * t1559) * MDP(1) + (t1340 * t1569 + t1347 * t1565 + t1348 * t1562 + t1349 * t1559) * MDP(3) + (t1339 * t1569 + t1344 * t1565 + t1345 * t1562 + t1346 * t1559) * MDP(4) + (t1326 * t1569 + t1328 * t1565 + t1329 * t1562 + t1330 * t1559) * MDP(10) + (t1327 * t1569 + t1331 * t1565 + t1332 * t1562 + t1333 * t1559) * MDP(11) + (t1481 - g(3)) * MDP(15) + ((-t1350 * t1545 - t1351 * t1544 - t1352 * t1543 - t1353 * t1542) * MDP(2) + (-t1354 * t1545 - t1356 * t1544 - t1357 * t1543 - t1358 * t1542) * MDP(3) + (-t1355 * t1545 - t1359 * t1544 - t1360 * t1543 - t1361 * t1542) * MDP(4) + ((-t1472 * t1585 - t1484 * t1584 - t1486 * t1583 - t1488 * t1582) * t1510 - t1338 * t1545 - t1341 * t1544 - t1342 * t1543 - t1343 * t1542) * MDP(5) + (-0.2e1 * t1334 * t1545 - 0.2e1 * t1335 * t1544 - 0.2e1 * t1336 * t1543 - 0.2e1 * t1337 * t1542 + (t1466 * (-0.2e1 * t1467 + t1469) * t1631 + t1462 * (-0.2e1 * t1463 + t1465) * t1632 + t1458 * (-0.2e1 * t1459 + t1461) * t1633 + t1445 * (-0.2e1 * t1446 + t1448) * t1634) * t1510) * MDP(6) + ((t1353 * t1466 - t1401 * t1558) * t1488 + (t1352 * t1462 - t1400 * t1561) * t1486 + (t1351 * t1458 - t1399 * t1564) * t1484 + (t1350 * t1445 - t1398 * t1568) * t1472) * MDP(7) + (-t1394 * t1545 - t1395 * t1544 - t1396 * t1543 - t1397 * t1542 + t1350 + t1351 + t1352 + t1353) * MDP(8) + (t1404 * t1445 + t1405 * t1458 + t1406 * t1462 + t1407 * t1466) * MDP(9) + ((-g(3) * t1494 + (-t1358 * t1604 + t1361) * t1488) * t1466 + (-g(3) * t1492 + (-t1357 * t1606 + t1360) * t1486) * t1462 + (-g(3) * t1490 + (-t1356 * t1608 + t1359) * t1484) * t1458 + (-g(3) * t1474 + (-t1354 * t1613 + t1355) * t1472) * t1445) * MDP(10) + (t1455 * t1358 * t1558 + t1466 * (g(3) * t1488 + t1361 * t1494) + t1452 * t1357 * t1561 + t1462 * (g(3) * t1486 + t1360 * t1492) + t1449 * t1356 * t1564 + t1458 * (g(3) * t1484 + t1359 * t1490) + t1442 * t1354 * t1568 + t1445 * (g(3) * t1472 + t1355 * t1474)) * MDP(11)) * t1509; (t1362 * t1371 + t1363 * t1376 + t1364 * t1377 + t1365 * t1378) * MDP(1) + (t1340 * t1371 + t1347 * t1376 + t1348 * t1377 + t1349 * t1378) * MDP(3) + (t1339 * t1371 + t1344 * t1376 + t1345 * t1377 + t1346 * t1378) * MDP(4) + (t1326 * t1371 + t1328 * t1376 + t1329 * t1377 + t1330 * t1378) * MDP(10) + (t1327 * t1371 + t1331 * t1376 + t1332 * t1377 + t1333 * t1378) * MDP(11) + t1480 * MDP(12) + t1402 * MDP(13) - t1403 * MDP(14) + ((t1350 * t1581 + t1351 * t1580 + t1352 * t1579 + t1353 * t1578) * MDP(2) + (t1354 * t1581 + t1356 * t1580 + t1357 * t1579 + t1358 * t1578) * MDP(3) + (t1355 * t1581 + t1359 * t1580 + t1360 * t1579 + t1361 * t1578) * MDP(4) + (t1338 * t1581 + t1341 * t1580 + t1342 * t1579 + t1343 * t1578) * MDP(5) + (t1398 * t1581 + t1399 * t1580 + t1400 * t1579 + t1401 * t1578) * MDP(7) + (t1394 * t1581 + t1395 * t1580 + t1396 * t1579 + t1397 * t1578) * MDP(8) + (t1382 * t1638 + t1383 * t1637 + t1384 * t1636 + t1385 * t1635) * MDP(10) + (-t1382 * t1541 - t1383 * t1540 - t1384 * t1539 - t1385 * t1538) * MDP(11) + (t1334 * t1581 + t1335 * t1580 + t1336 * t1579 + t1337 * t1578) * t1643) * t1509;];
tauX  = t1;
