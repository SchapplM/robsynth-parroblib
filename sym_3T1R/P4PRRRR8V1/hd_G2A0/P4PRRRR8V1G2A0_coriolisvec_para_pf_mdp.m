% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [4x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V1G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:06:12
% EndTime: 2020-08-07 11:06:37
% DurationCPUTime: 26.38s
% Computational Cost: add. (106924->678), mult. (255280->1446), div. (10224->22), fcn. (198816->30), ass. (0->637)
t4725 = xP(4);
t4675 = sin(t4725);
t4676 = cos(t4725);
t4727 = koppelP(3,2);
t4731 = koppelP(3,1);
t4640 = t4675 * t4731 + t4676 * t4727;
t4644 = -t4675 * t4727 + t4676 * t4731;
t4706 = legFrame(3,2);
t4668 = sin(t4706);
t4672 = cos(t4706);
t4721 = xDP(4);
t4723 = xDP(2);
t4724 = xDP(1);
t4544 = (-t4640 * t4721 + t4724) * t4672 - (t4644 * t4721 + t4723) * t4668;
t4698 = sin(pkin(6));
t4722 = xDP(3);
t5068 = t4722 * t4698;
t5186 = cos(pkin(6));
t4536 = t4544 * t5186 - t5068;
t4662 = t4722 * t5186;
t4540 = t4544 * t4698 + t4662;
t4710 = sin(qJ(2,3));
t4716 = cos(qJ(2,3));
t4700 = cos(pkin(3));
t5081 = t4700 * t4716;
t5086 = t4700 * t4710;
t4715 = cos(qJ(3,3));
t5189 = pkin(2) * t4715;
t4506 = -(t4536 * t4710 + t4540 * t5081) * t5189 + pkin(5) * (t4536 * t4716 - t4540 * t5086);
t4686 = 0.1e1 / t4715;
t4734 = pkin(5) ^ 2;
t4735 = pkin(2) ^ 2;
t4709 = sin(qJ(3,3));
t5073 = t4710 * t4715;
t4649 = pkin(2) * t5073 - pkin(5) * t4716;
t4699 = sin(pkin(3));
t5087 = t4700 * t4709;
t4957 = pkin(2) * t5087 + t4649 * t4699;
t5210 = 0.1e1 / t4957;
t5124 = t5210 * t4709;
t4996 = t4686 * t5124;
t5078 = t4700 * t4722;
t5096 = t4699 * t4715;
t4522 = ((-t4544 * t5086 - t4716 * t4722) * t4698 + (t4544 * t4716 - t4710 * t5078) * t5186) * t4709 - t4540 * t5096;
t5135 = t4522 * t5210;
t4486 = -pkin(5) * t4506 * t4996 + (t4686 * t4734 + t4715 * t4735) * t5135;
t5057 = pkin(5) * t5135;
t4953 = t4709 * t5057;
t5151 = t4506 * t5210;
t4491 = (t4953 - t5151) * t4686;
t4652 = pkin(5) * t4710 + t4716 * t5189;
t4980 = t4699 * t5186;
t4950 = pkin(2) * t4980;
t4979 = t4700 * t5186;
t4547 = -t4649 * t4979 - t4698 * t4652 + t4709 * t4950;
t4527 = t4547 * t4668 + t4672 * t4957;
t4528 = -t4547 * t4672 + t4668 * t4957;
t4697 = t4721 ^ 2;
t5125 = t5210 * t4686;
t5211 = 0.1e1 / t4957 ^ 2;
t5150 = t4506 * t5211;
t4474 = -t4491 * t4686 * t5150 + (t4486 * t4522 * t5125 + (-t4527 * t4640 - t4528 * t4644) * t4697) * t5210;
t5164 = t4474 * t5210;
t4728 = koppelP(2,2);
t4732 = koppelP(2,1);
t4641 = t4675 * t4732 + t4676 * t4728;
t4645 = -t4675 * t4728 + t4676 * t4732;
t4707 = legFrame(2,2);
t4669 = sin(t4707);
t4673 = cos(t4707);
t4541 = (-t4641 * t4721 + t4724) * t4673 - (t4645 * t4721 + t4723) * t4669;
t4533 = t4541 * t5186 - t5068;
t4537 = t4541 * t4698 + t4662;
t4712 = sin(qJ(2,2));
t4718 = cos(qJ(2,2));
t5080 = t4700 * t4718;
t5084 = t4700 * t4712;
t4717 = cos(qJ(3,2));
t5188 = pkin(2) * t4717;
t4507 = -(t4533 * t4712 + t4537 * t5080) * t5188 + pkin(5) * (t4533 * t4718 - t4537 * t5084);
t4690 = 0.1e1 / t4717;
t4711 = sin(qJ(3,2));
t5071 = t4712 * t4717;
t4650 = pkin(2) * t5071 - pkin(5) * t4718;
t5085 = t4700 * t4711;
t4956 = pkin(2) * t5085 + t4650 * t4699;
t5212 = 0.1e1 / t4956;
t5121 = t5212 * t4711;
t4993 = t4690 * t5121;
t5094 = t4699 * t4717;
t4523 = ((-t4541 * t5084 - t4718 * t4722) * t4698 + (t4541 * t4718 - t4712 * t5078) * t5186) * t4711 - t4537 * t5094;
t5134 = t4523 * t5212;
t4487 = -pkin(5) * t4507 * t4993 + (t4690 * t4734 + t4717 * t4735) * t5134;
t5056 = pkin(5) * t5134;
t4952 = t4711 * t5056;
t5149 = t4507 * t5212;
t4492 = (t4952 - t5149) * t4690;
t4653 = pkin(5) * t4712 + t4718 * t5188;
t4548 = -t4650 * t4979 - t4698 * t4653 + t4711 * t4950;
t4529 = t4548 * t4669 + t4673 * t4956;
t4530 = -t4548 * t4673 + t4669 * t4956;
t5122 = t5212 * t4690;
t5213 = 0.1e1 / t4956 ^ 2;
t5148 = t4507 * t5213;
t4475 = -t4492 * t4690 * t5148 + (t4487 * t4523 * t5122 + (-t4529 * t4641 - t4530 * t4645) * t4697) * t5212;
t5163 = t4475 * t5212;
t4705 = legFrame(4,2);
t4667 = sin(t4705);
t4704 = cos(qJ(2,4));
t4702 = sin(qJ(2,4));
t4703 = cos(qJ(3,4));
t5075 = t4702 * t4703;
t4647 = pkin(2) * t5075 - pkin(5) * t4704;
t4701 = sin(qJ(3,4));
t5090 = t4700 * t4701;
t4958 = pkin(2) * t5090 + t4647 * t4699;
t5208 = 0.1e1 / t4958;
t5219 = t4667 * t5208;
t4708 = legFrame(1,2);
t4670 = sin(t4708);
t4720 = cos(qJ(2,1));
t4714 = sin(qJ(2,1));
t4719 = cos(qJ(3,1));
t5069 = t4714 * t4719;
t4651 = pkin(2) * t5069 - pkin(5) * t4720;
t4713 = sin(qJ(3,1));
t5083 = t4700 * t4713;
t4955 = pkin(2) * t5083 + t4651 * t4699;
t5214 = 0.1e1 / t4955;
t5218 = t4670 * t5214;
t5209 = 0.1e1 / t4958 ^ 2;
t5217 = t5209 * t5208;
t5215 = 0.1e1 / t4955 ^ 2;
t5216 = t5215 * t5214;
t4726 = koppelP(4,2);
t4730 = koppelP(4,1);
t4639 = t4675 * t4730 + t4676 * t4726;
t4643 = -t4675 * t4726 + t4676 * t4730;
t4671 = cos(t4705);
t4543 = (-t4639 * t4721 + t4724) * t4671 - (t4643 * t4721 + t4723) * t4667;
t4535 = t4543 * t5186 - t5068;
t4539 = t4543 * t4698 + t4662;
t5088 = t4700 * t4704;
t5089 = t4700 * t4702;
t5190 = pkin(2) * t4703;
t4502 = -(t4535 * t4702 + t4539 * t5088) * t5190 + pkin(5) * (t4535 * t4704 - t4539 * t5089);
t4679 = 0.1e1 / t4703;
t5104 = t4679 * t4701;
t4999 = t5208 * t5104;
t5098 = t4699 * t4703;
t4518 = ((-t4543 * t5089 - t4704 * t4722) * t4698 + (t4543 * t4704 - t4702 * t5078) * t5186) * t4701 - t4539 * t5098;
t5142 = t4518 * t5208;
t4485 = -pkin(5) * t4502 * t4999 + (t4679 * t4734 + t4703 * t4735) * t5142;
t5058 = pkin(5) * t5142;
t4954 = t4701 * t5058;
t5157 = t4502 * t5208;
t4489 = (t4954 - t5157) * t4679;
t4648 = pkin(5) * t4702 + t4704 * t5190;
t4545 = -t4647 * t4979 - t4698 * t4648 + t4701 * t4950;
t4525 = t4545 * t4667 + t4671 * t4958;
t4526 = -t4545 * t4671 + t4667 * t4958;
t5129 = t5208 * t4679;
t5156 = t4502 * t5209;
t4473 = -t4489 * t4679 * t5156 + (t4485 * t4518 * t5129 + (-t4525 * t4639 - t4526 * t4643) * t4697) * t5208;
t5207 = t4473 * t4702;
t4729 = koppelP(1,2);
t4733 = koppelP(1,1);
t4642 = t4675 * t4733 + t4676 * t4729;
t4646 = -t4675 * t4729 + t4676 * t4733;
t4674 = cos(t4708);
t4542 = (-t4642 * t4721 + t4724) * t4674 - (t4646 * t4721 + t4723) * t4670;
t4534 = t4542 * t5186 - t5068;
t4538 = t4542 * t4698 + t4662;
t5079 = t4700 * t4720;
t5082 = t4700 * t4714;
t5187 = pkin(2) * t4719;
t4508 = -(t4534 * t4714 + t4538 * t5079) * t5187 + pkin(5) * (t4534 * t4720 - t4538 * t5082);
t4694 = 0.1e1 / t4719;
t5100 = t4694 * t4713;
t4990 = t5214 * t5100;
t5092 = t4699 * t4719;
t4524 = ((-t4542 * t5082 - t4720 * t4722) * t4698 + (t4542 * t4720 - t4714 * t5078) * t5186) * t4713 - t4538 * t5092;
t5133 = t4524 * t5214;
t4488 = -pkin(5) * t4508 * t4990 + (t4694 * t4734 + t4719 * t4735) * t5133;
t5055 = pkin(5) * t5133;
t4951 = t4713 * t5055;
t5146 = t4508 * t5214;
t4493 = (t4951 - t5146) * t4694;
t4654 = pkin(5) * t4714 + t4720 * t5187;
t4549 = -t4651 * t4979 - t4698 * t4654 + t4713 * t4950;
t4531 = t4549 * t4670 + t4674 * t4955;
t4532 = -t4549 * t4674 + t4670 * t4955;
t5118 = t5214 * t4694;
t5145 = t4508 * t5215;
t4476 = -t4493 * t4694 * t5145 + (t4488 * t4524 * t5118 + (-t4531 * t4642 - t4532 * t4646) * t4697) * t5214;
t5206 = t4476 * t4714;
t5160 = t4502 ^ 2 * t5209;
t5205 = t4506 ^ 2 * t5211;
t5204 = t4507 ^ 2 * t5213;
t5153 = t4508 ^ 2 * t5215;
t4678 = t4703 ^ 2;
t4681 = t4679 / t4678;
t5203 = t4681 * t4701;
t4693 = t4719 ^ 2;
t4696 = t4694 / t4693;
t5202 = t4696 * t4713;
t4972 = t5186 * t4718;
t5072 = t4711 * t4712;
t4576 = -t4711 * t4972 + (t4700 * t5072 + t5094) * t4698;
t4870 = 0.2e1 * t5134 * t5148;
t4691 = 0.1e1 / t4717 ^ 2;
t5101 = t4691 * t4711;
t4975 = t5186 * t4712;
t4968 = -pkin(5) * (-t4698 * t5084 + t4972) + (t4698 * t5080 + t4975) * t5188;
t5131 = t4968 * t5212;
t4520 = t4523 ^ 2;
t5139 = t4520 * t5213;
t5201 = (t4576 * t4870 - t5131 * t5139) * t5101;
t4973 = t5186 * t4716;
t5074 = t4709 * t4710;
t4575 = -t4709 * t4973 + (t4700 * t5074 + t5096) * t4698;
t4871 = 0.2e1 * t5135 * t5150;
t4687 = 0.1e1 / t4715 ^ 2;
t5102 = t4687 * t4709;
t4976 = t5186 * t4710;
t4969 = -pkin(5) * (-t4698 * t5086 + t4973) + (t4698 * t5081 + t4976) * t5189;
t5132 = t4969 * t5210;
t4519 = t4522 ^ 2;
t5141 = t4519 * t5211;
t5200 = (t4575 * t4871 - t5132 * t5141) * t5102;
t4806 = t4642 * t4674 + t4646 * t4670;
t4971 = t5186 * t4720;
t4630 = t4698 * t5082 - t4971;
t4974 = t5186 * t4714;
t4967 = pkin(5) * t4630 + (t4698 * t5079 + t4974) * t5187;
t5199 = t4806 * t4967;
t4809 = t4639 * t4671 + t4643 * t4667;
t4977 = t5186 * t4704;
t4627 = -t4698 * t5089 + t4977;
t4978 = t5186 * t4702;
t4970 = -pkin(5) * t4627 + (t4698 * t5088 + t4978) * t5190;
t5198 = t4809 * t4970;
t5197 = t4697 * (-t4642 * t4670 + t4646 * t4674);
t5196 = t4697 * (-t4641 * t4669 + t4645 * t4673);
t5195 = t4697 * (-t4640 * t4668 + t4644 * t4672);
t5194 = t4697 * (-t4639 * t4667 + t4643 * t4671);
t4581 = -t4627 * t4701 + t4698 * t5098;
t5193 = 0.2e1 * t4581;
t4582 = t4630 * t4713 + t4698 * t5092;
t5192 = 0.2e1 * t4582;
t5191 = pkin(2) * t4699;
t5185 = MDP(3) * t4699;
t5184 = MDP(4) * t4699;
t4736 = 0.1e1 / pkin(2);
t5183 = MDP(9) * t4736;
t4680 = 0.1e1 / t4703 ^ 2;
t5127 = t5208 * t4736;
t4998 = t4679 * t5127;
t4833 = t4502 * t4699 * t4998;
t4987 = t4699 * t5075;
t5076 = t4701 * t4702;
t4988 = t4699 * t5076;
t4573 = -t4701 * t4977 + (t4700 * t5076 + t5098) * t4698;
t5006 = t4573 * t5129;
t5077 = t4700 * t4736;
t5097 = t4699 * t4704;
t5128 = t5208 * t4701;
t4465 = t5006 * t5194 + (-(t4700 * t4489 + (pkin(2) * (t5077 * t5157 + t5097 * t5142) * t4678 - (t4502 * t5128 - t5058) * t4987) * t4679) * t5208 * t5142 - (t4704 * t4833 + (-t4988 + (-t4679 + t4703) * t4700) * t5142) * t5156) * t4680;
t5182 = t4465 * t5208;
t5181 = t4465 * t4701;
t5180 = t4465 * t4702;
t5179 = t4465 * t4704;
t4685 = t4715 ^ 2;
t5123 = t5210 * t4736;
t4995 = t4686 * t5123;
t4828 = t4506 * t4699 * t4995;
t4985 = t4699 * t5073;
t4986 = t4699 * t5074;
t5005 = t4575 * t5125;
t5095 = t4699 * t4716;
t4466 = t5005 * t5195 + (-(t4700 * t4491 + (pkin(2) * (t5077 * t5151 + t5095 * t5135) * t4685 - (t4506 * t5124 - t5057) * t4985) * t4686) * t5210 * t5135 + (-t4716 * t4828 + (t4986 + (t4686 - t4715) * t4700) * t5135) * t5150) * t4687;
t5178 = t4466 * t4710;
t5177 = t4466 * t4716;
t4689 = t4717 ^ 2;
t5120 = t5212 * t4736;
t4992 = t4690 * t5120;
t4827 = t4507 * t4699 * t4992;
t4983 = t4699 * t5071;
t4984 = t4699 * t5072;
t5004 = t4576 * t5122;
t5093 = t4699 * t4718;
t4467 = t5004 * t5196 + (-(t4700 * t4492 + (pkin(2) * (t5077 * t5149 + t5093 * t5134) * t4689 - (t4507 * t5121 - t5056) * t4983) * t4690) * t5212 * t5134 + (-t4718 * t4827 + (t4984 + (t4690 - t4717) * t4700) * t5134) * t5148) * t4691;
t5176 = t4467 * t4712;
t5175 = t4467 * t4718;
t4695 = 0.1e1 / t4719 ^ 2;
t5116 = t5214 * t4736;
t4989 = t4694 * t5116;
t4826 = t4508 * t4699 * t4989;
t4981 = t4699 * t5069;
t5070 = t4713 * t4714;
t4982 = t4699 * t5070;
t4577 = -t4713 * t4971 + (t4700 * t5070 + t5092) * t4698;
t5003 = t4577 * t5118;
t5091 = t4699 * t4720;
t5117 = t5214 * t4713;
t4468 = t5003 * t5197 + (-(t4700 * t4493 + (pkin(2) * (t5077 * t5146 + t5091 * t5133) * t4693 - (t4508 * t5117 - t5055) * t4981) * t4694) * t5214 * t5133 + (-t4720 * t4826 + (t4982 + (t4694 - t4719) * t4700) * t5133) * t5145) * t4695;
t5174 = t4468 * t5214;
t5173 = t4468 * t4713;
t5172 = t4468 * t4714;
t5171 = t4468 * t4720;
t5000 = t5208 * t5127;
t4901 = t4518 * t5000;
t4469 = (-t4700 * t4485 * t4901 - (-t4701 * t4647 * t4833 + t4700 * (-t4679 * t4954 + t4703 * t5157)) * t4502 * t5000) * t4680 + t4970 * t4998 * t5194;
t5170 = t4469 * t5208;
t4997 = t5210 * t5123;
t4900 = t4522 * t4997;
t4470 = (-t4700 * t4486 * t4900 - (-t4709 * t4649 * t4828 + t4700 * (-t4686 * t4953 + t4715 * t5151)) * t4506 * t4997) * t4687 + t4969 * t4995 * t5195;
t5169 = t4470 * t5210;
t4994 = t5212 * t5120;
t4899 = t4523 * t4994;
t4471 = (-t4700 * t4487 * t4899 - (-t4711 * t4650 * t4827 + t4700 * (-t4690 * t4952 + t4717 * t5149)) * t4507 * t4994) * t4691 + t4968 * t4992 * t5196;
t5168 = t4471 * t5212;
t4991 = t5214 * t5116;
t4898 = t4524 * t4991;
t4472 = (-t4700 * t4488 * t4898 - (-t4713 * t4651 * t4826 + t4700 * (-t4694 * t4951 + t4719 * t5146)) * t4508 * t4991) * t4695 + t4967 * t4989 * t5197;
t5167 = t4472 * t5214;
t5166 = t4473 * t5208;
t5165 = t4473 * t4704;
t5162 = t4476 * t5214;
t5161 = t4476 * t4720;
t5159 = t5208 * t5160;
t5158 = t4502 * t4518;
t5155 = t5210 * t5205;
t5154 = t5212 * t5204;
t5152 = t5214 * t5153;
t5147 = t4508 * t4524;
t4517 = t4518 ^ 2;
t5144 = t4517 * t4970;
t5143 = t4517 * t4680;
t5140 = t4519 * t4687;
t5138 = t4520 * t4691;
t4521 = t4524 ^ 2;
t5137 = t4521 * t4967;
t5136 = t4521 * t4695;
t5106 = t4675 * t4697;
t5105 = t4676 * t4697;
t5103 = t4680 * t4701;
t5099 = t4695 * t4713;
t4461 = t4465 * t5097 + t4469 * t4700;
t4509 = t5209 * t5143;
t4737 = 0.1e1 / pkin(2) ^ 2;
t5034 = t4737 * t5160;
t4490 = t4680 * t5034 + t4509;
t4791 = -0.2e1 * t4502 * t4704 * t4901;
t4916 = t4700 * t5034;
t5067 = t4461 * t4703 - t4469 * t4988 + (-t4490 * t5075 + t4791 * t5103) * t4699 - t4916 * t5103;
t5066 = -t4461 * t4701 - t4469 * t4987 + (t4490 * t5076 + t4679 * t4791) * t4699 - t4679 * t4916;
t4462 = t4466 * t5095 + t4470 * t4700;
t4510 = t5211 * t5140;
t5032 = t4737 * t5205;
t4494 = t4687 * t5032 + t4510;
t4789 = -0.2e1 * t4506 * t4716 * t4900;
t4911 = t4700 * t5032;
t5065 = t4462 * t4715 - t4470 * t4986 + (-t4494 * t5073 + t4789 * t5102) * t4699 - t4911 * t5102;
t4463 = t4467 * t5093 + t4471 * t4700;
t4511 = t5213 * t5138;
t5030 = t4737 * t5204;
t4495 = t4691 * t5030 + t4511;
t4786 = -0.2e1 * t4507 * t4718 * t4899;
t4908 = t4700 * t5030;
t5064 = t4463 * t4717 - t4471 * t4984 + (-t4495 * t5071 + t4786 * t5101) * t4699 - t4908 * t5101;
t4464 = t4468 * t5091 + t4472 * t4700;
t4512 = t5215 * t5136;
t5028 = t4737 * t5153;
t4496 = t4695 * t5028 + t4512;
t4783 = -0.2e1 * t4508 * t4720 * t4898;
t4905 = t4700 * t5028;
t5063 = t4464 * t4719 - t4472 * t4982 + (-t4496 * t5069 + t4783 * t5099) * t4699 - t4905 * t5099;
t5062 = -t4462 * t4709 - t4470 * t4985 + (t4494 * t5074 + t4686 * t4789) * t4699 - t4686 * t4911;
t5061 = -t4463 * t4711 - t4471 * t4983 + (t4495 * t5072 + t4690 * t4786) * t4699 - t4690 * t4908;
t5060 = -t4464 * t4713 - t4472 * t4981 + (t4496 * t5070 + t4694 * t4783) * t4699 - t4694 * t4905;
t5059 = 2 * MDP(6);
t5054 = t4970 * t5182;
t5053 = t4465 * t5129;
t5052 = t4465 * t5128;
t5051 = t4466 * t5132;
t5050 = t4466 * t5125;
t5049 = t4466 * t5124;
t5048 = t4467 * t5131;
t5047 = t4467 * t5122;
t5046 = t4467 * t5121;
t5045 = t4967 * t5174;
t5044 = t4468 * t5118;
t5043 = t4468 * t5117;
t5042 = t4573 * t5170;
t5041 = t4575 * t5169;
t5040 = t4576 * t5168;
t5039 = t4577 * t5167;
t5038 = t5208 * t5165;
t5037 = t4716 * t5164;
t5036 = t4718 * t5163;
t5035 = t5214 * t5161;
t5033 = t4680 * t5159;
t5031 = t4687 * t5155;
t5029 = t4691 * t5154;
t5027 = t4695 * t5152;
t5026 = t4702 * t5143;
t5025 = t4704 * t5143;
t5024 = t4710 * t5140;
t5023 = t4716 * t5140;
t5022 = t4712 * t5138;
t5021 = t4718 * t5138;
t5020 = t4714 * t5136;
t5019 = t4720 * t5136;
t4779 = -t4698 * t4704 - t4700 * t4978;
t4557 = -(-t4698 * t4702 + t4700 * t4977) * t5190 + pkin(5) * t4779;
t5018 = t4557 * t5129;
t5017 = t4970 * t5129;
t5016 = t5208 * t5198;
t4778 = -t4698 * t4716 - t4700 * t4976;
t4560 = -(-t4698 * t4710 + t4700 * t4973) * t5189 + pkin(5) * t4778;
t5015 = t4560 * t5125;
t4777 = -t4698 * t4718 - t4700 * t4975;
t4561 = -(-t4698 * t4712 + t4700 * t4972) * t5188 + pkin(5) * t4777;
t5014 = t4561 * t5122;
t4776 = -t4698 * t4720 - t4700 * t4974;
t4562 = -(-t4698 * t4714 + t4700 * t4971) * t5187 + pkin(5) * t4776;
t5013 = t4562 * t5118;
t5012 = t4969 * t5125;
t4808 = t4640 * t4672 + t4644 * t4668;
t5011 = t4808 * t5132;
t5010 = t4968 * t5122;
t4807 = t4641 * t4673 + t4645 * t4669;
t5009 = t4807 * t5131;
t5008 = t4967 * t5118;
t5007 = t5214 * t5199;
t5002 = t4581 * t5219;
t5001 = t4582 * t5218;
t4966 = t5067 * t5208;
t4965 = t5066 * t5208;
t4964 = t5065 * t5210;
t4963 = t5064 * t5212;
t4962 = t5063 * t5214;
t4961 = t5062 * t5210;
t4960 = t5061 * t5212;
t4959 = t5060 * t5214;
t4949 = t4465 * t5006;
t4948 = t4573 * t5052;
t4677 = t4701 ^ 2;
t4947 = t4677 * t5053;
t4946 = t4465 * t4999;
t4945 = t4466 * t5005;
t4944 = t4575 * t5049;
t4943 = t4709 ^ 2 * t5050;
t4942 = t4466 * t4996;
t4941 = t4467 * t5004;
t4940 = t4576 * t5046;
t4939 = t4711 ^ 2 * t5047;
t4938 = t4467 * t4993;
t4937 = t4468 * t5003;
t4936 = t4577 * t5043;
t4684 = t4713 ^ 2;
t4935 = t4684 * t5044;
t4934 = t4468 * t4990;
t4933 = t4469 * t4999;
t4932 = t4470 * t4996;
t4931 = t4471 * t4993;
t4930 = t4472 * t4990;
t4929 = t4473 * t5018;
t4928 = t4573 * t5038;
t4927 = t5129 * t5207;
t4926 = t4474 * t5015;
t4925 = t4575 * t5037;
t4924 = t4474 * t4710 * t5125;
t4923 = t4475 * t5014;
t4922 = t4576 * t5036;
t4921 = t4475 * t4712 * t5122;
t4920 = t4476 * t5013;
t4919 = t4577 * t5035;
t4918 = t5118 * t5206;
t4917 = t4573 * t5033;
t4915 = t5159 * t5203;
t4914 = t5217 * t5158;
t4913 = (0.2e1 * t4678 - 0.1e1) * t4681 * t5158;
t4912 = t4575 * t5031;
t4688 = t4686 / t4685;
t4910 = t4688 * t4709 * t5155;
t4909 = t4576 * t5029;
t4692 = t4690 / t4689;
t4907 = t4692 * t4711 * t5154;
t4906 = t4577 * t5027;
t4904 = t5152 * t5202;
t4903 = t5216 * t5147;
t4902 = (0.2e1 * t4693 - 0.1e1) * t4696 * t5147;
t4897 = t4667 * t5017;
t4896 = t4671 * t5017;
t4895 = t4679 * t5016;
t4894 = t4668 * t5012;
t4893 = t4672 * t5012;
t4892 = t4686 * t5011;
t4891 = t4669 * t5010;
t4890 = t4673 * t5010;
t4889 = t4690 * t5009;
t4888 = t4670 * t5008;
t4887 = t4674 * t5008;
t4886 = t4694 * t5007;
t4574 = t4779 * t4701 - t4703 * t4980;
t4884 = t4574 * t5038;
t4578 = t4778 * t4709 - t4715 * t4980;
t4880 = t4578 * t5037;
t4579 = t4777 * t4711 - t4717 * t4980;
t4879 = t4579 * t5036;
t4580 = t4776 * t4713 - t4719 * t4980;
t4878 = t4580 * t5035;
t4877 = t4679 * t5002;
t4876 = t4694 * t5001;
t4875 = t5103 * t5217;
t4874 = t5099 * t5216;
t4873 = t4469 * t5002;
t4872 = t4472 * t5001;
t4869 = t4970 * t4946;
t4868 = t4573 * t4947;
t4867 = t4465 * t4877;
t4866 = t4969 * t4942;
t4865 = t4575 * t4943;
t4864 = t4968 * t4938;
t4863 = t4576 * t4939;
t4862 = t4967 * t4934;
t4861 = t4577 * t4935;
t4860 = t4468 * t4876;
t4859 = t4573 * t4933;
t4858 = t4575 * t4932;
t4857 = t4576 * t4931;
t4856 = t4577 * t4930;
t4855 = t4473 * t4897;
t4854 = t4473 * t4896;
t4853 = t4473 * t4895;
t4852 = t4671 * t4928;
t4851 = t4573 * t4927;
t4850 = t4474 * t4894;
t4849 = t4474 * t4893;
t4848 = t4474 * t4892;
t4847 = t4672 * t4925;
t4846 = t4575 * t4924;
t4845 = t4475 * t4891;
t4844 = t4475 * t4890;
t4843 = t4475 * t4889;
t4842 = t4673 * t4922;
t4841 = t4576 * t4921;
t4840 = t4476 * t4888;
t4839 = t4476 * t4887;
t4838 = t4476 * t4886;
t4837 = t4674 * t4919;
t4836 = t4577 * t4918;
t4835 = t4573 * t4915;
t4834 = t5002 * t5160;
t4832 = t4575 * t4910;
t4831 = t4576 * t4907;
t4830 = t4577 * t4904;
t4829 = t5001 * t5153;
t4825 = t4517 * t4875;
t4824 = t4510 * t5124;
t4823 = t4511 * t5121;
t4822 = t4521 * t4874;
t4821 = t4809 * t4928;
t4820 = t4679 * t4884;
t4819 = t4808 * t4925;
t4818 = t4807 * t4922;
t4817 = t4806 * t4919;
t4816 = t4686 * t4880;
t4815 = t4690 * t4879;
t4814 = t4694 * t4878;
t4813 = t5002 * t5165;
t4812 = t4668 * t4925;
t4811 = t4669 * t4922;
t4810 = t5001 * t5161;
t4805 = t4913 * t5217;
t4804 = t4902 * t5216;
t4803 = t4679 * t4821;
t4802 = t4686 * t4819;
t4801 = t4690 * t4818;
t4800 = t4694 * t4817;
t4799 = t4679 * t4813;
t4798 = t4686 * t4812;
t4797 = t4690 * t4811;
t4796 = t4694 * t4810;
t4795 = t4679 * t4852;
t4794 = t4686 * t4847;
t4793 = t4690 * t4842;
t4792 = t4694 * t4837;
t4790 = 0.2e1 * t4914 * t5103;
t4788 = (0.2e1 * t4685 - 0.1e1) * t4688 * t4871;
t4787 = t4871 * t5102;
t4785 = (0.2e1 * t4689 - 0.1e1) * t4692 * t4870;
t4784 = t4870 * t5101;
t4782 = 0.2e1 * t4903 * t5099;
t4781 = t4573 * t4805;
t4780 = t4577 * t4804;
t4775 = t4575 * t4788;
t4774 = t4576 * t4785;
t4773 = -t5025 * t5217 - t5180 * t5208;
t4772 = -t5026 * t5217 + t5179 * t5208;
t4605 = t5210 * t5211;
t4771 = -t4605 * t5023 - t5178 * t5210;
t4770 = -t4605 * t5024 + t5177 * t5210;
t4608 = t5212 * t5213;
t4769 = -t4608 * t5021 - t5176 * t5212;
t4768 = -t4608 * t5022 + t5175 * t5212;
t4767 = -t5019 * t5216 - t5172 * t5214;
t4766 = -t5020 * t5216 + t5171 * t5214;
t4763 = t4473 * MDP(1) + t5067 * MDP(10) + t5066 * MDP(11);
t4762 = t4474 * MDP(1) + t5065 * MDP(10) + t5062 * MDP(11);
t4761 = t4475 * MDP(1) + t5064 * MDP(10) + t5061 * MDP(11);
t4760 = t4476 * MDP(1) + t5063 * MDP(10) + t5060 * MDP(11);
t4498 = t4510 - 0.2e1 * t5141;
t4759 = t4498 * t5012 + t4775;
t4499 = t4511 - 0.2e1 * t5139;
t4758 = t4499 * t5010 + t4774;
t4638 = t4981 + t5083;
t4637 = t4700 * t4719 - t4982;
t4636 = t4983 + t5085;
t4635 = t4700 * t4717 - t4984;
t4634 = t4985 + t5087;
t4633 = t4700 * t4715 - t4986;
t4629 = t4987 + t5090;
t4628 = t4700 * t4703 - t4988;
t4552 = t5186 * t4654 + (-t4651 * t4700 + t4713 * t5191) * t4698;
t4551 = t5186 * t4653 + (-t4650 * t4700 + t4711 * t5191) * t4698;
t4550 = t5186 * t4652 + (-t4649 * t4700 + t4709 * t5191) * t4698;
t4546 = t5186 * t4648 + (-t4647 * t4700 + t4701 * t5191) * t4698;
t4516 = (t4531 * t4646 - t4532 * t4642) * t5214;
t4515 = (t4529 * t4645 - t4530 * t4641) * t5212;
t4514 = (t4527 * t4644 - t4528 * t4640) * t5210;
t4513 = (t4525 * t4643 - t4526 * t4639) * t5208;
t4500 = -0.2e1 * t4521 * t5215 + t4512;
t4497 = -0.2e1 * t4517 * t5209 + t4509;
t1 = [(t4526 * t5166 + t4528 * t5164 + t4530 * t5163 + t4532 * t5162) * MDP(1) + (-t4671 * t4949 - t4672 * t4945 - t4673 * t4941 - t4674 * t4937) * MDP(2) + (t4772 * t4526 + t4770 * t4528 + t4768 * t4530 + t4766 * t4532 - t4792 - t4793 - t4794 - t4795) * t5185 + (t4773 * t4526 + t4771 * t4528 + t4769 * t4530 + t4767 * t4532 + t4671 * t4851 + t4672 * t4846 + t4673 * t4841 + t4674 * t4836) * t5184 + (-t4671 * t4868 - t4672 * t4865 - t4673 * t4863 - t4674 * t4861 + ((-0.2e1 * t4577 * t4903 + t5137 * t5216) * t4674 * t5099 - t4673 * t5201 - t4672 * t5200 + (-0.2e1 * t4573 * t4914 + t5144 * t5217) * t4671 * t5103) * t4736) * MDP(5) + (-0.2e1 * t4671 * t4948 - 0.2e1 * t4672 * t4944 - 0.2e1 * t4673 * t4940 - 0.2e1 * t4674 * t4936 + ((-t4500 * t5008 - 0.2e1 * t4780) * t4674 - t4758 * t4673 - t4759 * t4672 + (-t4497 * t5017 - 0.2e1 * t4781) * t4671) * t4736) * MDP(6) + (-t4671 * t4859 - t4672 * t4858 - t4673 * t4857 - t4674 * t4856 + (-t4671 * t4917 - t4672 * t4912 - t4673 * t4909 - t4674 * t4906) * t4737 + (-t4671 * t4869 - t4672 * t4866 - t4673 * t4864 - t4674 * t4862) * t4736) * MDP(7) + (-t4671 * t5042 - t4672 * t5041 - t4673 * t5040 - t4674 * t5039 + (t4671 * t4835 + t4672 * t4832 + t4673 * t4831 + t4674 * t4830) * t4737 + (-t4671 * t5054 - t4672 * t5051 - t4673 * t5048 - t4674 * t5045) * t4736) * MDP(8) + (-t4469 * t4896 - t4470 * t4893 - t4471 * t4890 - t4472 * t4887) * t5183 + (t4532 * t4962 + t4530 * t4963 + t4528 * t4964 + t4526 * t4966 + (-t4628 * t4854 - t4633 * t4849 - t4635 * t4844 - t4637 * t4839) * t4736 + (-t4837 - t4842 - t4847 - t4852) * t4699) * MDP(10) + (t4532 * t4959 + t4530 * t4960 + t4528 * t4961 + t4526 * t4965 + (t4629 * t4854 + t4634 * t4849 + t4636 * t4844 + t4638 * t4839) * t4736 + (t4701 * t4795 + t4709 * t4794 + t4711 * t4793 + t4713 * t4792) * t4699) * MDP(11) - MDP(13) * t5105 + MDP(14) * t5106; (t4525 * t5166 + t4527 * t5164 + t4529 * t5163 + t4531 * t5162) * MDP(1) + (t4668 * t4945 + t4669 * t4941 + t4860 + t4867) * MDP(2) + (t4772 * t4525 + t4770 * t4527 + t4768 * t4529 + t4766 * t4531 + t4796 + t4797 + t4798 + t4799) * t5185 + (t4773 * t4525 + t4771 * t4527 + t4769 * t4529 + t4767 * t4531 - t4668 * t4846 - t4669 * t4841 - t4876 * t5206 - t4877 * t5207) * t5184 + (t4677 * t4867 + t4668 * t4865 + t4669 * t4863 + t4684 * t4860 + (t4669 * t5201 + t4668 * t5200 + (t5147 * t5192 - t5137) * t4670 * t4874 + (t5158 * t5193 - t5144) * t4667 * t4875) * t4736) * MDP(5) + (0.2e1 * t5002 * t5181 + 0.2e1 * t4668 * t4944 + 0.2e1 * t4669 * t4940 + 0.2e1 * t5001 * t5173 + (t4758 * t4669 + t4759 * t4668 + (t4500 * t4694 * t4967 + t4902 * t5192 * t5215) * t5218 + (t4497 * t4679 * t4970 + t4913 * t5193 * t5209) * t5219) * t4736) * MDP(6) + (t4873 * t5104 + t4668 * t4858 + t4669 * t4857 + t4872 * t5100 + (t4668 * t4912 + t4669 * t4909 + t4680 * t4834 + t4695 * t4829) * t4737 + (t4667 * t4869 + t4668 * t4866 + t4669 * t4864 + t4670 * t4862) * t4736) * MDP(7) + (t4873 + t4668 * t5041 + t4669 * t5040 + t4872 + (-t4668 * t4832 - t4669 * t4831 - t4829 * t5202 - t4834 * t5203) * t4737 + (t4667 * t5054 + t4668 * t5051 + t4669 * t5048 + t4670 * t5045) * t4736) * MDP(8) + (t4469 * t4897 + t4470 * t4894 + t4471 * t4891 + t4472 * t4888) * t5183 + (t4531 * t4962 + t4529 * t4963 + t4527 * t4964 + t4525 * t4966 + (t4628 * t4855 + t4633 * t4850 + t4635 * t4845 + t4637 * t4840) * t4736 + (t4810 + t4811 + t4812 + t4813) * t4699) * MDP(10) + (t4531 * t4959 + t4529 * t4960 + t4527 * t4961 + t4525 * t4965 + (-t4629 * t4855 - t4634 * t4850 - t4636 * t4845 - t4638 * t4840) * t4736 + (-t4701 * t4799 - t4709 * t4798 - t4711 * t4797 - t4713 * t4796) * t4699) * MDP(11) - MDP(13) * t5106 - MDP(14) * t5105; (t4574 * t5053 + t4578 * t5050 + t4579 * t5047 + t4580 * t5044) * MDP(2) + (t4574 * t4947 + t4578 * t4943 + t4579 * t4939 + t4580 * t4935) * MDP(5) + (t4574 * t5052 + t4578 * t5049 + t4579 * t5046 + t4580 * t5043) * t5059 + (t4574 * t4933 + t4578 * t4932 + t4579 * t4931 + t4580 * t4930) * MDP(7) + (t4574 * t5170 + t4578 * t5169 + t4579 * t5168 + t4580 * t5167) * MDP(8) + t4760 * t5214 * t4552 + t4761 * t5212 * t4551 + t4762 * t5210 * t4550 + t4763 * t5208 * t4546 + ((t4574 * t5033 + t4578 * t5031 + t4579 * t5029 + t4580 * t5027) * MDP(7) + (-t4574 * t4915 - t4578 * t4910 - t4579 * t4907 - t4580 * t4904) * MDP(8)) * t4737 + ((-t4557 * t4825 - t4560 * t4824 - t4561 * t4823 - t4562 * t4822 + t4574 * t4790 + t4578 * t4787 + t4579 * t4784 + t4580 * t4782) * MDP(5) + (t4497 * t5018 + t4498 * t5015 + t4499 * t5014 + t4500 * t5013 + 0.2e1 * t4574 * t4805 + t4578 * t4788 + t4579 * t4785 + 0.2e1 * t4580 * t4804) * MDP(6) + (t4557 * t4946 + t4560 * t4942 + t4561 * t4938 + t4562 * t4934) * MDP(7) + (t4466 * t4560 * t5210 + t4467 * t4561 * t5212 + t4557 * t5182 + t4562 * t5174) * MDP(8) + (t4469 * t5018 + t4470 * t5015 + t4471 * t5014 + t4472 * t5013) * MDP(9) + (t4628 * t4929 + t4633 * t4926 + t4635 * t4923 + t4637 * t4920) * MDP(10) + (-t4629 * t4929 - t4634 * t4926 - t4636 * t4923 - t4638 * t4920) * MDP(11)) * t4736 + ((t4814 + t4815 + t4816 + t4820) * MDP(3) + (-t4574 * t4927 - t4578 * t4924 - t4579 * t4921 - t4580 * t4918) * MDP(4) + (t4878 + t4879 + t4880 + t4884) * MDP(10) + (-t4701 * t4820 - t4709 * t4816 - t4711 * t4815 - t4713 * t4814) * MDP(11) + (t4766 * MDP(3) + t4767 * MDP(4)) * t4552 + (t4768 * MDP(3) + t4769 * MDP(4)) * t4551 + (t4770 * MDP(3) + t4771 * MDP(4)) * t4550 + (t4772 * MDP(3) + t4773 * MDP(4)) * t4546) * t4699; (t4806 * t4937 + t4807 * t4941 + t4808 * t4945 + t4809 * t4949) * MDP(2) + (t4806 * t4861 + t4807 * t4863 + t4808 * t4865 + t4809 * t4868) * MDP(5) + (t4806 * t4936 + t4807 * t4940 + t4808 * t4944 + t4809 * t4948) * t5059 + (t4806 * t4856 + t4807 * t4857 + t4808 * t4858 + t4809 * t4859) * MDP(7) + (t4806 * t5039 + t4807 * t5040 + t4808 * t5041 + t4809 * t5042) * MDP(8) + t4760 * t4516 + t4761 * t4515 + t4762 * t4514 + t4763 * t4513 + ((t4806 * t4906 + t4807 * t4909 + t4808 * t4912 + t4809 * t4917) * MDP(7) + (-t4806 * t4830 - t4807 * t4831 - t4808 * t4832 - t4809 * t4835) * MDP(8)) * t4737 + ((t4573 * t4790 * t4809 + t4577 * t4782 * t4806 - t4822 * t5199 - t4825 * t5198 + (t4575 * t4787 - t4824 * t4969) * t4808 + (t4576 * t4784 - t4823 * t4968) * t4807) * MDP(5) + (t4497 * t4895 + t4498 * t4892 + t4499 * t4889 + t4500 * t4886 + t4774 * t4807 + t4775 * t4808 + 0.2e1 * t4780 * t4806 + 0.2e1 * t4781 * t4809) * MDP(6) + (t4466 * t4709 * t4892 + t4467 * t4711 * t4889 + t4886 * t5173 + t4895 * t5181) * MDP(7) + (t4465 * t5016 + t4466 * t5011 + t4467 * t5009 + t4468 * t5007) * MDP(8) + (t4469 * t4895 + t4470 * t4892 + t4471 * t4889 + t4472 * t4886) * MDP(9) + (t4628 * t4853 + t4633 * t4848 + t4635 * t4843 + t4637 * t4838) * MDP(10) + (-t4629 * t4853 - t4634 * t4848 - t4636 * t4843 - t4638 * t4838) * MDP(11)) * t4736 + ((t4800 + t4801 + t4802 + t4803) * MDP(3) + (-t4806 * t4836 - t4807 * t4841 - t4808 * t4846 - t4809 * t4851) * MDP(4) + (t4817 + t4818 + t4819 + t4821) * MDP(10) + (-t4701 * t4803 - t4709 * t4802 - t4711 * t4801 - t4713 * t4800) * MDP(11) + ((-t5020 * t5215 + t5171) * MDP(3) + (-t5019 * t5215 - t5172) * MDP(4)) * t4516 + ((-t5022 * t5213 + t5175) * MDP(3) + (-t5021 * t5213 - t5176) * MDP(4)) * t4515 + ((-t5024 * t5211 + t5177) * MDP(3) + (-t5023 * t5211 - t5178) * MDP(4)) * t4514 + ((-t5026 * t5209 + t5179) * MDP(3) + (-t5025 * t5209 - t5180) * MDP(4)) * t4513) * t4699;];
taucX  = t1;
