% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR8V1G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V1G2A0_convert_par2_MPV_fixb.m

% Output:
% MMX [4x4]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:06
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P4PRRRR8V1G2A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G2A0_inertia_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G2A0_inertia_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G2A0_inertia_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G2A0_inertia_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G2A0_inertia_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V1G2A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:05:23
% EndTime: 2020-08-07 11:06:12
% DurationCPUTime: 52.96s
% Computational Cost: add. (19730->1138), mult. (61162->2263), div. (5058->18), fcn. (64822->30), ass. (0->915)
t3699 = xP(4);
t3662 = sin(t3699);
t3663 = cos(t3699);
t3703 = koppelP(1,2);
t3707 = koppelP(1,1);
t3624 = t3662 * t3707 + t3663 * t3703;
t3628 = -t3662 * t3703 + t3663 * t3707;
t3686 = legFrame(1,2);
t3657 = sin(t3686);
t3661 = cos(t3686);
t3869 = t3624 * t3661 + t3628 * t3657;
t3698 = cos(qJ(2,1));
t3692 = sin(qJ(2,1));
t3697 = cos(qJ(3,1));
t4268 = t3692 * t3697;
t3634 = pkin(2) * t4268 - pkin(5) * t3698;
t3677 = sin(pkin(3));
t3678 = cos(pkin(3));
t3691 = sin(qJ(3,1));
t4277 = t3678 * t3691;
t4132 = pkin(2) * t4277 + t3634 * t3677;
t4445 = 0.1e1 / t4132;
t4366 = t3869 * t4445;
t3700 = koppelP(4,2);
t3704 = koppelP(4,1);
t3621 = t3662 * t3704 + t3663 * t3700;
t3625 = -t3662 * t3700 + t3663 * t3704;
t3683 = legFrame(4,2);
t3654 = sin(t3683);
t3658 = cos(t3683);
t3872 = t3621 * t3658 + t3625 * t3654;
t3682 = cos(qJ(2,4));
t3680 = sin(qJ(2,4));
t3681 = cos(qJ(3,4));
t4274 = t3680 * t3681;
t3629 = pkin(2) * t4274 - pkin(5) * t3682;
t3679 = sin(qJ(3,4));
t4280 = t3678 * t3679;
t4135 = pkin(2) * t4280 + t3629 * t3677;
t4439 = 0.1e1 / t4135;
t4367 = t3872 * t4439;
t3694 = cos(qJ(2,3));
t3688 = sin(qJ(2,3));
t3693 = cos(qJ(3,3));
t4272 = t3688 * t3693;
t3632 = pkin(2) * t4272 - pkin(5) * t3694;
t3687 = sin(qJ(3,3));
t4279 = t3678 * t3687;
t4134 = pkin(2) * t4279 + t3632 * t3677;
t4441 = 0.1e1 / t4134;
t4329 = t4441 * t3694;
t3696 = cos(qJ(2,2));
t3690 = sin(qJ(2,2));
t3695 = cos(qJ(3,2));
t4270 = t3690 * t3695;
t3633 = pkin(2) * t4270 - pkin(5) * t3696;
t3689 = sin(qJ(3,2));
t4278 = t3678 * t3689;
t4133 = pkin(2) * t4278 + t3633 * t3677;
t4443 = 0.1e1 / t4133;
t4323 = t4443 * t3696;
t4400 = cos(pkin(6));
t4144 = t4400 * t3690;
t3676 = sin(pkin(6));
t4289 = t3676 * t3696;
t3750 = -t3678 * t4144 - t4289;
t4149 = t3677 * t4400;
t3577 = t3750 * t3689 - t3695 * t4149;
t4141 = t4400 * t3696;
t4292 = t3676 * t3690;
t4402 = pkin(2) * t3695;
t4137 = -pkin(5) * (-t3678 * t4292 + t4141) + (t3678 * t4289 + t4144) * t4402;
t3553 = -(t3678 * t4141 - t4292) * t4402 + pkin(5) * t3750;
t4271 = t3689 * t3690;
t3574 = -t3689 * t4141 + (t3677 * t3695 + t3678 * t4271) * t3676;
t4357 = t3553 * t3574;
t4452 = t4137 * t3577 + t4357;
t4145 = t4400 * t3688;
t4290 = t3676 * t3694;
t3751 = -t3678 * t4145 - t4290;
t3576 = t3751 * t3687 - t3693 * t4149;
t4142 = t4400 * t3694;
t4293 = t3676 * t3688;
t4403 = pkin(2) * t3693;
t4138 = -pkin(5) * (-t3678 * t4293 + t4142) + (t3678 * t4290 + t4145) * t4403;
t3552 = -(t3678 * t4142 - t4293) * t4403 + pkin(5) * t3751;
t4273 = t3687 * t3688;
t3573 = -t3687 * t4142 + (t3677 * t3693 + t3678 * t4273) * t3676;
t4358 = t3552 * t3573;
t4451 = t4138 * t3576 + t4358;
t4450 = 2 * MDP(3);
t4449 = 2 * MDP(4);
t4448 = 2 * MDP(7);
t4447 = 2 * MDP(8);
t4446 = 0.1e1 / t4132 ^ 2;
t4444 = 0.1e1 / t4133 ^ 2;
t4442 = 0.1e1 / t4134 ^ 2;
t4440 = 0.1e1 / t4135 ^ 2;
t3684 = legFrame(3,2);
t3655 = sin(t3684);
t3647 = t3655 ^ 2;
t4438 = 0.2e1 * t3647;
t3685 = legFrame(2,2);
t3656 = sin(t3685);
t3648 = t3656 ^ 2;
t4437 = 0.2e1 * t3648;
t4404 = pkin(2) * t3681;
t3630 = pkin(5) * t3680 + t3682 * t4404;
t4131 = pkin(2) * t4149;
t4148 = t3678 * t4400;
t3533 = -t3629 * t4148 - t3676 * t3630 + t3679 * t4131;
t3525 = t3533 * t3654 + t3658 * t4135;
t3526 = -t3533 * t3658 + t3654 * t4135;
t3439 = (t3525 * t3625 - t3526 * t3621) * t4439;
t4146 = t4400 * t3682;
t4275 = t3679 * t3680;
t4287 = t3677 * t3681;
t3566 = -t3679 * t4146 + (t3678 * t4275 + t4287) * t3676;
t3665 = 0.1e1 / t3681;
t4337 = t4439 * t3665;
t3748 = t3872 * t4337;
t3483 = t3566 * t3748;
t4239 = t3566 * t4367;
t4114 = t3665 * t4239;
t4436 = t3439 * (t3483 + t4114);
t3635 = pkin(5) * t3688 + t3694 * t4403;
t3535 = -t3632 * t4148 - t3676 * t3635 + t3687 * t4131;
t3659 = cos(t3684);
t3527 = t3535 * t3655 + t3659 * t4134;
t3528 = -t3535 * t3659 + t3655 * t4134;
t3701 = koppelP(3,2);
t3705 = koppelP(3,1);
t3622 = t3662 * t3705 + t3663 * t3701;
t3626 = -t3662 * t3701 + t3663 * t3705;
t3442 = (t3527 * t3626 - t3528 * t3622) * t4441;
t3871 = t3622 * t3659 + t3626 * t3655;
t3670 = 0.1e1 / t3693;
t4331 = t4441 * t3670;
t3746 = t3871 * t4331;
t3484 = t3573 * t3746;
t4346 = t3573 * t4441;
t4237 = t3871 * t4346;
t4109 = t3670 * t4237;
t4435 = t3442 * (t3484 + t4109);
t3636 = pkin(5) * t3690 + t3696 * t4402;
t3536 = -t3633 * t4148 - t3676 * t3636 + t3689 * t4131;
t3660 = cos(t3685);
t3529 = t3536 * t3656 + t3660 * t4133;
t3530 = -t3536 * t3660 + t3656 * t4133;
t3702 = koppelP(2,2);
t3706 = koppelP(2,1);
t3623 = t3662 * t3706 + t3663 * t3702;
t3627 = -t3662 * t3702 + t3663 * t3706;
t3443 = (t3529 * t3627 - t3530 * t3623) * t4443;
t3870 = t3623 * t3660 + t3627 * t3656;
t3672 = 0.1e1 / t3695;
t4325 = t4443 * t3672;
t3744 = t3870 * t4325;
t3485 = t3574 * t3744;
t4344 = t3574 * t4443;
t4236 = t3870 * t4344;
t4106 = t3672 * t4236;
t4434 = t3443 * (t3485 + t4106);
t4401 = pkin(2) * t3697;
t3637 = pkin(5) * t3692 + t3698 * t4401;
t3537 = -t3634 * t4148 - t3676 * t3637 + t3691 * t4131;
t3531 = t3537 * t3657 + t3661 * t4132;
t3532 = -t3537 * t3661 + t3657 * t4132;
t3444 = (t3531 * t3628 - t3532 * t3624) * t4445;
t4140 = t4400 * t3698;
t4269 = t3691 * t3692;
t4283 = t3677 * t3697;
t3575 = -t3691 * t4140 + (t3678 * t4269 + t4283) * t3676;
t3674 = 0.1e1 / t3697;
t4317 = t4445 * t3674;
t3742 = t3869 * t4317;
t3486 = t3575 * t3742;
t4238 = t3575 * t4366;
t4112 = t3674 * t4238;
t4433 = t3444 * (t3486 + t4112);
t4147 = t4400 * t3680;
t4294 = t3676 * t3682;
t3752 = -t3678 * t4147 - t4294;
t4295 = t3676 * t3680;
t3546 = -(t3678 * t4146 - t4295) * t4404 + pkin(5) * t3752;
t3567 = t3752 * t3679 - t3681 * t4149;
t4432 = t3546 * t3567;
t4431 = t3552 * t3576;
t4430 = t3553 * t3577;
t4143 = t4400 * t3692;
t4288 = t3676 * t3698;
t3749 = -t3678 * t4143 - t4288;
t4291 = t3676 * t3692;
t3554 = -(t3678 * t4140 - t4291) * t4401 + pkin(5) * t3749;
t3578 = t3749 * t3691 - t3697 * t4149;
t4429 = t3554 * t3578;
t4428 = t3566 * t3567;
t3609 = -t3678 * t4295 + t4146;
t4139 = -pkin(5) * t3609 + (t3678 * t4294 + t4147) * t4404;
t4359 = t4139 * t3872;
t4427 = 0.2e1 * t3566 * t4359;
t4426 = t3573 * t3576;
t4425 = t3573 * t4138;
t4424 = t3574 * t3577;
t4423 = t3574 * t4137;
t4422 = t3575 * t3578;
t3612 = t3678 * t4291 - t4140;
t4136 = pkin(5) * t3612 + (t3678 * t4288 + t4143) * t4401;
t4348 = t4136 * t3869;
t4421 = 0.2e1 * t3575 * t4348;
t3579 = -t3609 * t3679 + t3676 * t4287;
t4310 = t3654 * t3665;
t4202 = t3579 * t4310;
t4420 = t4439 * (t3439 * t4202 + t3483 * t3525);
t3580 = t3612 * t3691 + t3676 * t4283;
t4306 = t3657 * t3674;
t4196 = t3580 * t4306;
t4419 = t4445 * (t3444 * t4196 + t3486 * t3531);
t3650 = t3658 ^ 2;
t4418 = t3650 * t4139;
t3653 = t3661 ^ 2;
t4417 = t3653 * t4136;
t4416 = t3654 * t3872;
t4415 = t3657 * t3869;
t3671 = 0.1e1 / t3693 ^ 2;
t4414 = t3671 * t3687;
t3673 = 0.1e1 / t3695 ^ 2;
t4413 = t3673 * t3689;
t4319 = t4445 ^ 2;
t4412 = (t3575 * t4319 + t3580 * t4446) * t3531 * t4306;
t4199 = t3580 * t4319;
t4411 = (t3575 * t4446 + t4199) * t4136;
t4339 = t4439 ^ 2;
t4410 = (t3566 * t4339 + t3579 * t4440) * t3525 * t4310;
t4205 = t3579 * t4339;
t4409 = (t3566 * t4440 + t4205) * t4139;
t4351 = t4137 * t3870;
t4353 = t4138 * t3871;
t4408 = 2 * MDP(6);
t4407 = t3566 ^ 2;
t4406 = t3575 ^ 2;
t4405 = pkin(2) * t3677;
t4399 = MDP(3) * t3677;
t4398 = MDP(4) * t3677;
t3708 = 0.1e1 / pkin(2);
t4397 = MDP(7) * t3708;
t4396 = MDP(8) * t3708;
t4395 = MDP(9) * t3708;
t4394 = MDP(9) / pkin(2) ^ 2;
t4393 = t3439 * t4439;
t4392 = t3444 * t4445;
t4391 = t3483 * t3679;
t4390 = t3484 * t4441;
t4389 = t3485 * t4443;
t4388 = t3486 * t3691;
t4387 = t3525 * t3567;
t4386 = t3525 * t4439;
t4385 = t3526 * t4439;
t4384 = t3527 * t4441;
t4383 = t3528 * t4441;
t4382 = t3529 * t4443;
t4381 = t3530 * t4443;
t4380 = t3531 * t3578;
t4379 = t3531 * t4445;
t4378 = t3532 * t4445;
t3534 = t4400 * t3630 + (-t3629 * t3678 + t3679 * t4405) * t3676;
t4377 = t3534 * t3566;
t4376 = t3534 * t4439;
t4375 = t3534 * t4440;
t3538 = t4400 * t3635 + (-t3632 * t3678 + t3687 * t4405) * t3676;
t4374 = t3538 * t4441;
t4373 = t3538 * t4442;
t3539 = t4400 * t3636 + (-t3633 * t3678 + t3689 * t4405) * t3676;
t4372 = t3539 * t4443;
t4371 = t3539 * t4444;
t3540 = t4400 * t3637 + (-t3634 * t3678 + t3691 * t4405) * t3676;
t4370 = t3540 * t3575;
t4369 = t3540 * t4445;
t4368 = t3540 * t4446;
t4365 = t3871 * t4441;
t4364 = t3870 * t4443;
t4363 = t3546 * t3566;
t4362 = t3546 * t4439;
t4361 = t4139 * t3658;
t4360 = t4139 * t3708;
t4356 = t3554 * t3575;
t4355 = t3554 * t4445;
t4350 = t4136 * t3661;
t4349 = t4136 * t3708;
t4347 = t3566 * t3658;
t4345 = t3573 * t3655;
t4343 = t3574 * t3656;
t4342 = t3575 * t3661;
t4341 = t3579 * t3654;
t4340 = t3580 * t3657;
t4338 = t4439 * t3658;
t4336 = t4439 * t3682;
t4335 = t4440 * t3654;
t4334 = t4440 * t3658;
t4333 = t4440 * t3665;
t3666 = 0.1e1 / t3681 ^ 2;
t4332 = t4440 * t3666;
t4330 = t4441 * t3688;
t4328 = t4442 * t3659;
t4327 = t4442 * t3670;
t4326 = t4442 * t3671;
t4324 = t4443 * t3690;
t4322 = t4444 * t3660;
t4321 = t4444 * t3672;
t4320 = t4444 * t3673;
t4318 = t4445 * t3661;
t4316 = t4445 * t3698;
t4315 = t4446 * t3657;
t4314 = t4446 * t3661;
t4313 = t4446 * t3674;
t3675 = 0.1e1 / t3697 ^ 2;
t4312 = t4446 * t3675;
t4311 = t3654 * t3658;
t4309 = t3655 * t3708;
t4308 = t3656 * t3708;
t4307 = t3657 * t3661;
t4305 = t3665 * t3679;
t4304 = t3665 * t3680;
t4303 = t3665 * t3682;
t4302 = t3666 * t3679;
t4301 = t3670 * t3687;
t4300 = t3672 * t3689;
t4299 = t3674 * t3691;
t4298 = t3674 * t3692;
t4297 = t3674 * t3698;
t4296 = t3675 * t3691;
t4286 = t3677 * t3682;
t4285 = t3677 * t3694;
t4284 = t3677 * t3696;
t4282 = t3677 * t3698;
t4281 = t3677 * t3708;
t4276 = t3678 * t3708;
t3549 = t4138 ^ 2;
t3550 = t4137 ^ 2;
t4016 = t3656 * t3660 * t4320;
t4022 = t3655 * t3659 * t4326;
t4231 = t4136 ^ 2 * t4312;
t4235 = t4139 ^ 2 * t4332;
t4267 = (t3525 * t3526 * t4440 + t3527 * t3528 * t4442 + t3529 * t3530 * t4444 + t3531 * t3532 * t4446) * MDP(1) + (-t3549 * t4022 - t3550 * t4016 - t4231 * t4307 - t4235 * t4311) * t4394;
t4091 = t3554 * t4136 * t4312;
t4094 = t3553 * t4137 * t4320;
t4097 = t3552 * t4138 * t4326;
t4104 = t3546 * t4139 * t4332;
t4266 = (t3525 * t4375 + t3527 * t4373 + t3529 * t4371 + t3531 * t4368) * MDP(1) + (t3654 * t4104 + t3655 * t4097 + t3656 * t4094 + t3657 * t4091) * t4394;
t4171 = t3672 * t4323;
t4019 = t3677 * t4171;
t3814 = t4019 * t4343;
t4182 = t3670 * t4329;
t4025 = t3677 * t4182;
t3820 = t4025 * t4345;
t4265 = t3442 * t3820 + t3443 * t3814;
t4172 = t3672 * t4324;
t4050 = t3574 * t4172;
t3812 = t3660 * t3677 * t4050;
t4183 = t3670 * t4330;
t4057 = t3573 * t4183;
t3818 = t3659 * t3677 * t4057;
t4264 = t3442 * t3818 + t3443 * t3812;
t3760 = t4443 * t3812;
t3765 = t4441 * t3818;
t4263 = t3527 * t3765 + t3529 * t3760;
t3762 = t4443 * t3814;
t3767 = t4441 * t3820;
t4262 = t3528 * t3767 + t3530 * t3762;
t4168 = t4444 * t4308;
t3779 = -0.2e1 * t3660 * t4168 * t4423;
t4179 = t4442 * t4309;
t3780 = -0.2e1 * t3659 * t4179 * t4425;
t4261 = t3779 * t4413 + t3780 * t4414;
t4260 = t3670 * t3780 + t3672 * t3779;
t4166 = t4444 * t4300;
t3912 = t4166 * t4424;
t4177 = t4442 * t4301;
t3919 = t4177 * t4426;
t4259 = t3655 * t3919 + t3656 * t3912;
t4062 = t4326 * t4426;
t3523 = t3655 * t4062;
t4055 = t4320 * t4424;
t3524 = t3656 * t4055;
t3667 = t3687 ^ 2;
t3668 = t3689 ^ 2;
t4258 = t3667 * t3523 + t3668 * t3524;
t4257 = t3523 + t3524;
t4256 = 0.2e1 * t3708;
t3468 = t3708 * t4138 * t3746;
t4255 = t3468 * t4346;
t3469 = t3708 * t4137 * t3744;
t4254 = t3469 * t4344;
t4253 = t3483 * t4376;
t4252 = t4439 * t4391;
t4251 = t3484 * t4383;
t4250 = t4138 * t4390;
t4249 = t3687 * t4390;
t4248 = t3484 * t4329;
t4247 = t3485 * t4381;
t4246 = t4137 * t4389;
t4245 = t3689 * t4389;
t4244 = t3485 * t4323;
t4243 = t3486 * t4369;
t4242 = t4445 * t4388;
t4234 = t3546 * t4337;
t4233 = t4139 * t4439 * t3654;
t4232 = t4439 * t4359;
t4230 = t3552 * t4331;
t4229 = t3553 * t4325;
t4228 = t3554 * t4317;
t4227 = t4441 * t4353;
t4226 = t4443 * t4351;
t4225 = t4136 * t4445 * t3657;
t4224 = t4445 * t4348;
t3565 = t3567 ^ 2;
t4223 = t3565 * t4332;
t4222 = t3566 * t4338;
t4221 = t3566 * t4336;
t4220 = t3566 * t4333;
t4219 = t3567 * t4337;
t4218 = t3567 * t4336;
t3572 = t3578 ^ 2;
t4217 = t3572 * t4312;
t4216 = t3573 * t4329;
t4215 = t3574 * t4323;
t4214 = t3575 * t4318;
t4213 = t3575 * t4316;
t4212 = t3575 * t4313;
t4211 = t3576 * t4331;
t4210 = t3576 * t4329;
t4209 = t3577 * t4325;
t4208 = t3577 * t4323;
t4207 = t3578 * t4317;
t4206 = t3578 * t4316;
t4204 = t4439 * t4341;
t4203 = t4440 * t4341;
t4201 = t3679 * t4341;
t4200 = t3682 * t4341;
t4198 = t4445 * t4340;
t4197 = t4446 * t4340;
t4195 = t3691 * t4340;
t4194 = t3698 * t4340;
t4193 = t3658 * t4337;
t4192 = t4439 * t4305;
t4191 = t4439 * t4304;
t4190 = t4439 * t4303;
t4189 = t4440 * t4305;
t4188 = t4407 * t4332;
t4187 = t4440 * t4302;
t4186 = t3655 * t4331;
t4185 = t3659 * t4331;
t4184 = t4441 * t4301;
t4181 = t3647 * t4326;
t3651 = t3659 ^ 2;
t4180 = t3651 * t4326;
t4178 = t3667 * t4326;
t4176 = t3687 * t4326;
t4175 = t3656 * t4325;
t4174 = t3660 * t4325;
t4173 = t4443 * t4300;
t4170 = t3648 * t4320;
t3652 = t3660 ^ 2;
t4169 = t3652 * t4320;
t4167 = t3668 * t4320;
t4165 = t3689 * t4320;
t4164 = t3661 * t4317;
t4163 = t4445 * t4299;
t4162 = t4445 * t4298;
t4161 = t4445 * t4297;
t4160 = t4446 * t4299;
t4159 = t4406 * t4312;
t4158 = t4446 * t4296;
t4157 = t3677 * t4275;
t4156 = t3677 * t4274;
t4155 = t3677 * t4273;
t4154 = t3677 * t4272;
t4153 = t3677 * t4271;
t4152 = t3677 * t4270;
t4151 = t3677 * t4269;
t4150 = t3677 * t4268;
t3467 = t3748 * t4360;
t4130 = t3467 * t4192;
t4129 = t3468 * t4184;
t4128 = t3469 * t4173;
t3470 = t3742 * t4349;
t4127 = t3470 * t4163;
t4126 = t3566 * t4252;
t3664 = t3679 ^ 2;
t4125 = t3483 * t3664 * t4337;
t4124 = t3483 * t4192;
t4123 = t3573 * t4249;
t4122 = t3484 * t3667 * t4331;
t4121 = t3484 * t4184;
t4120 = t3574 * t4245;
t4119 = t3485 * t3668 * t4325;
t4118 = t3485 * t4173;
t4117 = t3575 * t4242;
t3669 = t3691 ^ 2;
t4116 = t3486 * t3669 * t4317;
t4115 = t3486 * t4163;
t4113 = t3872 * t4221;
t4111 = t3869 * t4213;
t3568 = t3573 ^ 2;
t4110 = t3871 * t3568 * t4326;
t4108 = t3871 * t4216;
t3569 = t3574 ^ 2;
t4107 = t3870 * t3569 * t4320;
t4105 = t3870 * t4215;
t3610 = t3678 * t3681 - t4157;
t4103 = t3610 * t4234;
t3611 = t4156 + t4280;
t4102 = t3611 * t4234;
t4101 = t3665 * t4233;
t4100 = t4139 * t4193;
t4099 = t3665 * t4232;
t4098 = t4332 * t4359;
t3615 = t3678 * t3693 - t4155;
t4096 = t3615 * t4230;
t3616 = t4154 + t4279;
t4095 = t3616 * t4230;
t3617 = t3678 * t3695 - t4153;
t4093 = t3617 * t4229;
t3618 = t4152 + t4278;
t4092 = t3618 * t4229;
t3619 = t3678 * t3697 - t4151;
t4090 = t3619 * t4228;
t3620 = t4150 + t4277;
t4089 = t3620 * t4228;
t4088 = t4327 * t4425;
t4087 = t4138 * t4186;
t4086 = t4138 * t4185;
t4085 = t3670 * t4227;
t4084 = t4326 * t4353;
t4083 = t4321 * t4423;
t4082 = t4137 * t4175;
t4081 = t4137 * t4174;
t4080 = t3672 * t4226;
t4079 = t4320 * t4351;
t4078 = t3674 * t4225;
t4077 = t4136 * t4164;
t4076 = t3674 * t4224;
t4075 = t4312 * t4348;
t4074 = t4332 * t4428;
t4073 = t3566 * t4193;
t4072 = t3658 * t4221;
t4071 = t3566 * t4191;
t4070 = t3566 * t4190;
t4069 = t3654 * t4220;
t4068 = t3566 * t4187;
t4067 = t4439 * t4218;
t4066 = t3568 * t4178;
t4065 = t3568 * t4177;
t4064 = t3569 * t4167;
t4063 = t3569 * t4166;
t4061 = t3573 * t4186;
t4060 = t3655 * t4216;
t4059 = t3573 * t4185;
t4058 = t3659 * t4216;
t4056 = t3573 * t4182;
t4054 = t3574 * t4175;
t4053 = t3656 * t4215;
t4052 = t3574 * t4174;
t4051 = t3660 * t4215;
t4049 = t3574 * t4171;
t4048 = t4312 * t4422;
t4047 = t3575 * t4164;
t4046 = t3661 * t4213;
t4045 = t3575 * t4162;
t4044 = t3575 * t4161;
t4043 = t3657 * t4212;
t4042 = t3575 * t4158;
t4041 = t4441 * t4210;
t4040 = t4443 * t4208;
t4039 = t4445 * t4206;
t4038 = t4439 * t4202;
t4037 = t4440 * t4200;
t4036 = t3665 * t4201;
t4035 = t4445 * t4196;
t4034 = t4446 * t4194;
t4033 = t3674 * t4195;
t4032 = t4439 * t4191;
t4031 = t3679 * t4190;
t4030 = t4439 * t3680 * t4281;
t4029 = t3658 * t4188;
t4028 = t3664 * t4188;
t4027 = t4407 * t4189;
t4026 = t4441 * t4183;
t4024 = t3687 * t4182;
t4023 = t4281 * t4330;
t4020 = t4443 * t4172;
t4018 = t3689 * t4171;
t4017 = t4281 * t4324;
t4014 = t4445 * t4162;
t4013 = t3691 * t4161;
t4012 = t4445 * t3692 * t4281;
t4011 = t3661 * t4159;
t4010 = t3669 * t4159;
t4009 = t4406 * t4160;
t3892 = t3578 * t3677 * t4161;
t3894 = t3577 * t4019;
t3897 = t3576 * t4025;
t3926 = t3567 * t3677 * t4190;
t4008 = t3439 * t3926 + t3442 * t3897 + t3443 * t3894 + t3444 * t3892;
t4007 = -t3662 * MDP(14) + (t3439 * t4386 + t3442 * t4384 + t3443 * t4382 + t3444 * t4379) * MDP(1) + t3663 * MDP(13);
t4006 = t3566 * t4130;
t4005 = t3573 * t4129;
t4004 = t3574 * t4128;
t4003 = t3575 * t4127;
t4002 = t4139 * t4124;
t4001 = t3566 * t4125;
t4000 = t3483 * t4038;
t3999 = t4138 * t4121;
t3998 = t3573 * t4122;
t3997 = t4137 * t4118;
t3996 = t3574 * t4119;
t3995 = t4136 * t4115;
t3994 = t3575 * t4116;
t3993 = t3486 * t4035;
t3992 = t3534 * t4067;
t3991 = t3534 * t4037;
t3990 = t3538 * t4041;
t3989 = t3539 * t4040;
t3988 = t3540 * t4039;
t3987 = t3540 * t4034;
t3986 = t4439 * t4113;
t3985 = t4188 * t4416;
t3984 = t4445 * t4111;
t3983 = t4159 * t4415;
t3982 = t3655 * t4110;
t3981 = t4441 * t4108;
t3980 = t3656 * t4107;
t3979 = t4443 * t4105;
t3978 = t4439 * t4103;
t3977 = t4439 * t4102;
t3976 = t4139 * t4098;
t3975 = t3567 * t4335 * t4360;
t3974 = t3610 * t4101;
t3973 = t3610 * t4100;
t3972 = t3611 * t4101;
t3971 = t3611 * t4100;
t3970 = t4139 * t4030;
t3969 = t3610 * t4099;
t3968 = t3611 * t4099;
t3967 = t4441 * t4096;
t3966 = t4441 * t4095;
t3965 = t4443 * t4093;
t3964 = t4443 * t4092;
t3963 = t4445 * t4090;
t3962 = t4445 * t4089;
t3961 = t4138 * t4084;
t3960 = t4176 * t4425;
t3959 = t3615 * t4087;
t3958 = t3615 * t4086;
t3957 = t3616 * t4087;
t3956 = t3616 * t4086;
t3955 = t4138 * t4023;
t3954 = t3615 * t4085;
t3953 = t3616 * t4085;
t3952 = t4137 * t4079;
t3951 = t4165 * t4423;
t3950 = t3617 * t4082;
t3949 = t3617 * t4081;
t3948 = t3618 * t4082;
t3947 = t3618 * t4081;
t3946 = t4137 * t4017;
t3945 = t3617 * t4080;
t3944 = t3618 * t4080;
t3943 = t4136 * t4075;
t3942 = t3578 * t4315 * t4349;
t3941 = t3619 * t4078;
t3940 = t3619 * t4077;
t3939 = t3620 * t4078;
t3938 = t3620 * t4077;
t3937 = t4136 * t4012;
t3936 = t3619 * t4076;
t3935 = t3620 * t4076;
t3934 = t3664 * t4074;
t3933 = t4189 * t4428;
t3646 = t3654 ^ 2;
t3932 = t3566 * t3646 * t4205;
t3931 = t4439 * t4072;
t3930 = t3566 * t4032;
t3929 = t4439 * t4070;
t3928 = t3566 * t4031;
t3927 = t3654 * t4068;
t3925 = t3567 * t4031;
t3924 = t3659 * t4066;
t3923 = t3659 * t4065;
t3922 = t3660 * t4064;
t3921 = t3660 * t4063;
t3920 = t3667 * t4062;
t3918 = t4441 * t4060;
t3917 = t4441 * t4058;
t3916 = t3573 * t4026;
t3915 = t4441 * t4056;
t3914 = t3573 * t4024;
t3913 = t3668 * t4055;
t3911 = t4443 * t4053;
t3910 = t4443 * t4051;
t3909 = t3574 * t4020;
t3908 = t4443 * t4049;
t3907 = t3574 * t4018;
t3906 = t3669 * t4048;
t3905 = t4160 * t4422;
t3649 = t3657 ^ 2;
t3904 = t3575 * t3649 * t4199;
t3903 = t4445 * t4046;
t3902 = t3575 * t4014;
t3901 = t4445 * t4044;
t3900 = t3575 * t4013;
t3899 = t3657 * t4042;
t3898 = t3576 * t4026;
t3896 = t3576 * t4024;
t3895 = t3577 * t4020;
t3893 = t3577 * t4018;
t3891 = t3578 * t4013;
t3890 = t4439 * t3666 * t4204;
t3889 = t4439 * t4036;
t3888 = t3682 * t4036;
t3887 = t4445 * t3675 * t4198;
t3886 = t4445 * t4033;
t3885 = t3698 * t4033;
t3884 = t3658 * t4028;
t3883 = t3658 * t4027;
t3880 = t3661 * t4010;
t3879 = t3661 * t4009;
t3878 = t3525 * t3658 - t3526 * t3654;
t3877 = t3531 * t3661 - t3532 * t3657;
t3874 = 0.2e1 * t4353;
t3873 = 0.2e1 * t4351;
t3864 = t3527 * t3918;
t3863 = t3528 * t3916;
t3862 = t3529 * t3911;
t3861 = t3530 * t3909;
t3860 = t3534 * t3929;
t3859 = t3540 * t3901;
t3858 = t3872 * t3928;
t3857 = t3869 * t3900;
t3856 = t3871 * t3915;
t3855 = t3871 * t3914;
t3854 = t3870 * t3908;
t3853 = t3870 * t3907;
t3852 = t4439 * t3974;
t3851 = t4439 * t3973;
t3850 = t4439 * t3972;
t3849 = t4439 * t3971;
t3848 = t4439 * t3969;
t3847 = t4439 * t3968;
t3846 = t4441 * t3959;
t3845 = t4441 * t3958;
t3844 = t4441 * t3957;
t3843 = t4441 * t3956;
t3842 = t4441 * t3954;
t3841 = t4441 * t3953;
t3840 = t4443 * t3950;
t3839 = t4443 * t3949;
t3838 = t4443 * t3948;
t3837 = t4443 * t3947;
t3836 = t4443 * t3945;
t3835 = t4443 * t3944;
t3834 = t4445 * t3941;
t3833 = t4445 * t3940;
t3832 = t4445 * t3939;
t3831 = t4445 * t3938;
t3830 = t4445 * t3936;
t3829 = t4445 * t3935;
t3828 = t3666 * t3932;
t3827 = t3658 * t3929;
t3826 = t3658 * t3928;
t3825 = t3567 * t3890;
t3824 = t4439 * t3926;
t3823 = t4439 * t3925;
t3822 = t3655 * t3916;
t3821 = t3659 * t3915;
t3819 = t3655 * t3914;
t3817 = t3659 * t3914;
t3816 = t3656 * t3909;
t3815 = t3660 * t3908;
t3813 = t3656 * t3907;
t3811 = t3660 * t3907;
t3810 = t3675 * t3904;
t3809 = t3661 * t3901;
t3808 = t3661 * t3900;
t3807 = t4441 * t3897;
t3806 = t4441 * t3896;
t3805 = t4443 * t3894;
t3804 = t4443 * t3893;
t3803 = t3578 * t3887;
t3802 = t4445 * t3892;
t3801 = t4445 * t3891;
t3800 = t4439 * t3889;
t3799 = t4440 * t3888;
t3798 = t4445 * t3886;
t3797 = t4446 * t3885;
t3796 = t4030 * t4305;
t3795 = t4023 * t4301;
t3794 = t4017 * t4300;
t3793 = t4012 * t4299;
t3792 = t3525 * t3824 + t3527 * t3807 + t3529 * t3805 + t3531 * t3802 + t3538 * t3767 + t3539 * t3762;
t3791 = t4452 * t4165 * t4308 + t4451 * t4176 * t4309 + t3942 * t4296 + t3975 * t4302;
t3790 = t4451 * t3670 * t4179 + t4452 * t3672 * t4168 + t3665 * t3975 + t3674 * t3942;
t3789 = t3439 * t3654 + t3525 * t4367;
t3788 = -t3439 * t3658 + t3526 * t4367;
t3787 = t3444 * t3657 + t3531 * t4366;
t3786 = -t3444 * t3661 + t3532 * t4366;
t3781 = -t3662 * MDP(13) - t3663 * MDP(14) + (t3439 * t4385 + t3442 * t4383 + t3443 * t4381 + t3444 * t4378) * MDP(1);
t3778 = t4439 * t3858;
t3777 = t4445 * t3857;
t3776 = t4441 * t3855;
t3775 = t4443 * t3853;
t3774 = t4139 * t3796;
t3773 = t4138 * t3795;
t3772 = t4137 * t3794;
t3771 = t4136 * t3793;
t3770 = t3890 * t4347;
t3769 = t4439 * t3826;
t3768 = t3527 * t3856;
t3766 = t4441 * t3819;
t3764 = t4441 * t3817;
t3763 = t3529 * t3854;
t3761 = t4443 * t3813;
t3759 = t4443 * t3811;
t3758 = t3887 * t4342;
t3757 = t4445 * t3808;
t3756 = t3527 * t3821;
t3755 = t3529 * t3815;
t3747 = (-t3567 * t4139 - t4363) * t4334;
t3745 = t4451 * t4328;
t3743 = t4452 * t4322;
t3741 = (-t3578 * t4136 - t4356) * t4314;
t3740 = t4440 * (t3567 * t4359 + t3872 * t4363);
t3739 = t4442 * (t3576 * t4353 + t3871 * t4358);
t3738 = t4444 * (t3577 * t4351 + t3870 * t4357);
t3737 = t4446 * (t3578 * t4348 + t3869 * t4356);
t3736 = t3646 * t4409;
t3735 = t3649 * t4411;
t3734 = t4335 * t4427;
t3733 = t4334 * t4427;
t3732 = t4442 * t3874 * t4345;
t3731 = t3573 * t3874 * t4328;
t3730 = t4444 * t3873 * t4343;
t3729 = t3574 * t3873 * t4322;
t3728 = t4315 * t4421;
t3727 = t4314 * t4421;
t3726 = t3439 * t4073 - t3483 * t4385;
t3725 = t3444 * t4047 - t3486 * t4378;
t3724 = (t3566 * t4286 + t4139 * t4276) * t4337;
t3723 = (t3573 * t4285 + t4138 * t4276) * t4331;
t3722 = (t3574 * t4284 + t4137 * t4276) * t4325;
t3721 = (t3575 * t4282 + t4136 * t4276) * t4317;
t3720 = t4311 * t4409;
t3719 = t4307 * t4411;
t3718 = -t3526 * t4203 + t4222 * t4386;
t3717 = -t3532 * t4197 + t4214 * t4379;
t3716 = -t3568 * t4022 - t3569 * t4016;
t3715 = -t3655 * t3924 - t3656 * t3922;
t3714 = -t3655 * t3923 - t3656 * t3921;
t3713 = -t3755 - t3756;
t3712 = -t3528 * t3822 - t3530 * t3816;
t3711 = (-t3527 * t3576 - t3538 * t4345) * t4026 + (-t3529 * t3577 - t3539 * t4343) * t4020;
t3710 = (t3526 * t4375 + t3528 * t4373 + t3530 * t4371 + t3532 * t4368) * MDP(1) + (-t3658 * t4104 - t3659 * t4097 - t3660 * t4094 - t3661 * t4091) * t4394 + (t3539 * t3760 + t3538 * t3765 + (-t3528 * t3898 - t3530 * t3895 + (-t3532 * t3578 + t3540 * t4342) * t4014 + (-t3526 * t3567 + t3534 * t4347) * t4032) * t3677) * MDP(4) + (t3532 * t3802 + t3530 * t3805 + t3528 * t3807 + t3526 * t3824 + (-t3534 * t3827 - t3538 * t3821 - t3539 * t3815 - t3540 * t3809) * t3677) * MDP(3) + (-t3658 * t4074 - t3659 * t4062 - t3660 * t4055 - t3661 * t4048) * MDP(2) + (-t3658 * t3934 - t3659 * t3920 - t3660 * t3913 - t3661 * t3906) * MDP(5) + (t3665 * t3747 - t3670 * t3745 - t3672 * t3743 + t3674 * t3741) * t4396 + (t3741 * t4296 - t3743 * t4413 - t3745 * t4414 + t3747 * t4302) * t4397 + (-t3658 * t3933 - t3659 * t3919 - t3660 * t3912 - t3661 * t3905) * t4408;
t3631 = (t3662 ^ 2 + t3663 ^ 2) * MDP(15);
t3571 = t3577 ^ 2;
t3570 = t3576 ^ 2;
t3502 = (t3554 * t4276 + t3578 * t4282) * t4317;
t3501 = (t3553 * t4276 + t3577 * t4284) * t4325;
t3500 = (t3552 * t4276 + t3576 * t4285) * t4331;
t3495 = (t3546 * t4276 + t3567 * t4286) * t4337;
t3494 = t3661 * t3721;
t3493 = t3657 * t3721;
t3492 = t3660 * t3722;
t3491 = t3656 * t3722;
t3490 = t3659 * t3723;
t3489 = t3655 * t3723;
t3488 = t3658 * t3724;
t3487 = t3654 * t3724;
t3466 = -t3502 * t3691 - t3554 * t4012;
t3465 = -t3501 * t3689 - t3553 * t4017;
t3464 = -t3500 * t3687 - t3552 * t4023;
t3463 = t3502 * t3697 - t3554 * t3793;
t3462 = t3501 * t3695 - t3553 * t3794;
t3461 = t3500 * t3693 - t3552 * t3795;
t3460 = -t3495 * t3679 - t3546 * t4030;
t3459 = t3495 * t3681 - t3546 * t3796;
t3458 = t3494 * t3691 + t3661 * t3937;
t3457 = -t3493 * t3691 - t3657 * t3937;
t3456 = t3492 * t3689 + t3660 * t3946;
t3455 = -t3491 * t3689 - t3656 * t3946;
t3454 = t3490 * t3687 + t3659 * t3955;
t3453 = -t3489 * t3687 - t3655 * t3955;
t3452 = -t3494 * t3697 + t3661 * t3771;
t3451 = t3493 * t3697 - t3657 * t3771;
t3450 = -t3492 * t3695 + t3660 * t3772;
t3449 = t3491 * t3695 - t3656 * t3772;
t3448 = -t3490 * t3693 + t3659 * t3773;
t3447 = t3489 * t3693 - t3655 * t3773;
t3446 = t3488 * t3679 + t3658 * t3970;
t3445 = -t3487 * t3679 - t3654 * t3970;
t3441 = -t3488 * t3681 + t3658 * t3774;
t3440 = t3487 * t3681 - t3654 * t3774;
t3429 = t3470 * t3678 + t3486 * t4282;
t3428 = t3469 * t3678 + t3485 * t4284;
t3427 = t3468 * t3678 + t3484 * t4285;
t3426 = t3467 * t3678 + t3483 * t4286;
t3423 = -t3429 * t3691 - t3470 * t4150;
t3422 = t3429 * t3697 - t3470 * t4151;
t3421 = -t3428 * t3689 - t3469 * t4152;
t3420 = t3428 * t3695 - t3469 * t4153;
t3419 = -t3427 * t3687 - t3468 * t4154;
t3418 = t3427 * t3693 - t3468 * t4155;
t3417 = -t3426 * t3679 - t3467 * t4156;
t3416 = t3426 * t3681 - t3467 * t4157;
t3412 = (t3439 * t4376 + t3442 * t4374 + t3443 * t4372 + t3444 * t4369) * MDP(1);
t1 = [(t3526 ^ 2 * t4440 + t3528 ^ 2 * t4442 + t3530 ^ 2 * t4444 + t3532 ^ 2 * t4446) * MDP(1) + (t3568 * t4180 + t3569 * t4169 + t3650 * t4188 + t3653 * t4159) * MDP(2) + (t3650 * t4028 + t3651 * t4066 + t3652 * t4064 + t3653 * t4010) * MDP(5) + (t3650 * t4027 + t3651 * t4065 + t3652 * t4063 + t3653 * t4009) * t4408 + (t3441 * t4385 + t3448 * t4383 + t3450 * t4381 + t3452 * t4378) * MDP(10) + (t3446 * t4385 + t3454 * t4383 + t3456 * t4381 + t3458 * t4378) * MDP(11) + t3631 + (t3549 * t4180 + t3550 * t4169 + t3650 * t4235 + t3653 * t4231) * t4394 + ((-t3526 * t3851 - t3528 * t3845 - t3530 * t3839 - t3532 * t3833) * MDP(10) + (t3526 * t3849 + t3528 * t3843 + t3530 * t3837 + t3532 * t3831) * MDP(11) + (t3651 * t3960 + t3652 * t3951 + t4042 * t4417 + t4068 * t4418) * t4448 + (t3651 * t4088 + t3652 * t4083 + t4212 * t4417 + t4220 * t4418) * t4447) * t3708 + ((-t3526 * t3931 - t3528 * t3917 - t3530 * t3910 - t3532 * t3903) * MDP(10) + (t3526 * t3769 + t3528 * t3764 + t3530 * t3759 + t3532 * t3757) * MDP(11) + (-t3526 * t3827 - t3528 * t3821 - t3530 * t3815 - t3532 * t3809) * t4450 + (t3526 * t3658 * t3930 + t3532 * t3661 * t3902 + t3659 * t3863 + t3660 * t3861) * t4449) * t3677; (-t3654 * t4029 - t3657 * t4011 + t3716) * MDP(2) + ((-t3877 * t3901 - t3878 * t3929 + t3713) * t3677 + t4262) * MDP(3) + ((t3877 * t3902 + t3878 * t3930 + t3712) * t3677 + t4263) * MDP(4) + (-t3654 * t3884 - t3657 * t3880 + t3715) * MDP(5) + (-t3654 * t3883 - t3657 * t3879 + t3714) * t4408 + ((-t3899 * t4350 - t3927 * t4361) * t4256 + t4261) * MDP(7) + ((-t4043 * t4350 - t4069 * t4361) * t4256 + t4260) * MDP(8) + (t3440 * t4385 + t3447 * t4383 + t3449 * t4381 + t3451 * t4378 + (-t3525 * t3851 - t3527 * t3845 - t3529 * t3839 - t3531 * t3833) * t3708 + (-t3525 * t3931 - t3527 * t3917 - t3529 * t3910 - t3531 * t3903) * t3677) * MDP(10) + (t3445 * t4385 + t3453 * t4383 + t3455 * t4381 + t3457 * t4378 + (t3525 * t3849 + t3527 * t3843 + t3529 * t3837 + t3531 * t3831) * t3708 + (t3525 * t3769 + t3531 * t3757 + t3687 * t3756 + t3689 * t3755) * t3677) * MDP(11) + t4267; (t3459 * t4385 + t3461 * t4383 + t3462 * t4381 + t3463 * t4378 + (-t3534 * t3851 - t3538 * t3845 - t3539 * t3839 - t3540 * t3833) * t3708 + (-t3534 * t3931 - t3538 * t3917 - t3539 * t3910 - t3540 * t3903) * t3677) * MDP(10) + (t3460 * t4385 + t3464 * t4383 + t3465 * t4381 + t3466 * t4378 + (t3534 * t3849 + t3538 * t3843 + t3539 * t3837 + t3540 * t3831) * t3708 + (t3534 * t3769 + t3538 * t3764 + t3539 * t3759 + t3540 * t3757) * t3677) * MDP(11) + t3710; (-t3483 * t4073 - t3484 * t4059 - t3485 * t4052 - t3486 * t4047) * MDP(2) + (-t3725 * t3698 + (-t3443 * t4052 + t4247) * t3696 + (-t3442 * t4059 + t4251) * t3694 - t3726 * t3682) * t4399 + ((t3680 * t3726 - t3688 * t4251 - t3690 * t4247 + t3692 * t3725) * t3677 + t4264) * MDP(4) + (-t3658 * t4001 - t3659 * t3998 - t3660 * t3996 - t3661 * t3994) * MDP(5) + (-t3658 * t4126 - t3659 * t4123 - t3660 * t4120 - t3661 * t4117) * t4408 + (-t3658 * t4006 - t3659 * t4005 - t3660 * t4004 - t3661 * t4003 + (-t3658 * t4002 - t3659 * t3999 - t3660 * t3997 - t3661 * t3995) * t3708) * MDP(7) + (-t3467 * t4222 - t3659 * t4255 - t3660 * t4254 - t3470 * t4214 + (-t3483 * t4139 * t4338 - t3486 * t4136 * t4318 - t3659 * t4250 - t3660 * t4246) * t3708) * MDP(8) + (-t3467 * t4100 - t3468 * t4086 - t3469 * t4081 - t3470 * t4077) * t4395 + (t3416 * t4385 + t3418 * t4383 + t3420 * t4381 + t3422 * t4378 + (-t3439 * t3973 - t3442 * t3958 - t3443 * t3949 - t3444 * t3940) * t3708 + (-t3439 * t4072 - t3442 * t4058 - t3443 * t4051 - t3444 * t4046) * t3677) * MDP(10) + (t3417 * t4385 + t3419 * t4383 + t3421 * t4381 + t3423 * t4378 + (t3439 * t3971 + t3442 * t3956 + t3443 * t3947 + t3444 * t3938) * t3708 + (t3439 * t3826 + t3442 * t3817 + t3443 * t3811 + t3444 * t3808) * t3677) * MDP(11) + t3781; (t3716 - t3758 - t3770) * MDP(2) + ((-t3717 * t4297 - t3718 * t4303 + t3713) * t3677 + t4262) * MDP(3) + ((t3717 * t4298 + t3718 * t4304 + t3712) * t3677 + t4263) * MDP(4) + (-t3664 * t3770 - t3669 * t3758 + t3715) * MDP(5) + (-t3798 * t4342 - t3800 * t4347 + t3714) * t4408 + ((-t3719 * t4296 - t3720 * t4302) * t3708 + t4261) * MDP(7) + ((-t3665 * t3720 - t3674 * t3719) * t3708 + t4260) * MDP(8) + (t3441 * t4386 + t3448 * t4384 + t3450 * t4382 + t3452 * t4379 + (t3526 * t3852 + t3528 * t3846 + t3530 * t3840 + t3532 * t3834) * t3708 + (t3526 * t4037 + t3528 * t3918 + t3530 * t3911 + t3532 * t4034) * t3677) * MDP(10) + (t3446 * t4386 + t3454 * t4384 + t3456 * t4382 + t3458 * t4379 + (-t3526 * t3850 - t3528 * t3844 - t3530 * t3838 - t3532 * t3832) * t3708 + (-t3526 * t3799 - t3528 * t3766 - t3530 * t3761 - t3532 * t3797) * t3677) * MDP(11) + t4267; (t3525 ^ 2 * t4440 + t3527 ^ 2 * t4442 + t3529 ^ 2 * t4444 + t3531 ^ 2 * t4446) * MDP(1) + (t3568 * t4181 + t3569 * t4170 + t3810 + t3828) * MDP(2) + (0.2e1 * t3670 * t3864 + 0.2e1 * t3672 * t3862 + t3682 * t4410 + t3698 * t4412) * t4399 + (-0.2e1 * t3527 * t3822 - 0.2e1 * t3529 * t3816 - t3680 * t4410 - t3692 * t4412) * t4398 + (t3647 * t4066 + t3648 * t4064 + t3664 * t3828 + t3669 * t3810) * MDP(5) + (t3647 * t4065 + t3648 * t4063 + t3904 * t4299 + t3932 * t4305) * t4408 + (t3735 * t4296 + t3736 * t4302 + t3951 * t4437 + t3960 * t4438) * t4397 + (t3665 * t3736 + t3674 * t3735 + t4083 * t4437 + t4088 * t4438) * t4396 + (t3549 * t4181 + t3550 * t4170 + t3646 * t4235 + t3649 * t4231) * t4394 + (t3440 * t4386 + t3447 * t4384 + t3449 * t4382 + t3451 * t4379 + (t3525 * t3852 + t3527 * t3846 + t3529 * t3840 + t3531 * t3834) * t3708 + (t3525 * t4037 + t3531 * t4034 + t3862 + t3864) * t3677) * MDP(10) + (t3445 * t4386 + t3453 * t4384 + t3455 * t4382 + t3457 * t4379 + (-t3525 * t3850 - t3527 * t3844 - t3529 * t3838 - t3531 * t3832) * t3708 + (-t3525 * t3799 - t3527 * t3766 - t3529 * t3761 - t3531 * t3797) * t3677) * MDP(11) + t3631; (t3803 + t3825 + t4257) * MDP(2) + ((t3665 * t3991 + t3674 * t3987) * t3677 + t3792) * MDP(3) + ((-t3540 * t4197 - t4319 * t4380) * t4298 + (-t3534 * t4203 - t4339 * t4387) * t4304 + t3711) * t4398 + (t3664 * t3825 + t3669 * t3803 + t4258) * MDP(5) + (t3567 * t3800 + t3578 * t3798 + t4259) * t4408 + ((t3546 * t3679 * t3890 + t3554 * t3691 * t3887) * t3708 + t3791) * MDP(7) + ((t4035 * t4355 + t4038 * t4362) * t3708 + t3790) * MDP(8) + (t3459 * t4386 + t3461 * t4384 + t3462 * t4382 + t3463 * t4379 + (t3534 * t3852 + t3538 * t3846 + t3539 * t3840 + t3540 * t3834) * t3708 + (t3538 * t3918 + t3539 * t3911 + t3987 + t3991) * t3677) * MDP(10) + (t3460 * t4386 + t3464 * t4384 + t3465 * t4382 + t3466 * t4379 + (-t3534 * t3850 - t3538 * t3844 - t3539 * t3838 - t3540 * t3832) * t3708 + (-t3534 * t3799 - t3538 * t3766 - t3539 * t3761 - t3540 * t3797) * t3677) * MDP(11) + t4266; (t3484 * t4061 + t3485 * t4054 + t3993 + t4000) * MDP(2) + ((t3527 * t4248 + t3529 * t4244 + t3682 * t4420 + t3698 * t4419) * t3677 + t4265) * MDP(3) + ((-t3443 * t4054 - t3485 * t4382) * t3690 + (-t3442 * t4061 - t3484 * t4384) * t3688 - t3692 * t4419 - t3680 * t4420) * t4398 + (t3655 * t3998 + t3656 * t3996 + t3664 * t4000 + t3669 * t3993) * MDP(5) + (t3483 * t4201 * t4439 + t3486 * t4195 * t4445 + t3655 * t4123 + t3656 * t4120) * t4408 + (t3467 * t3889 + t3655 * t4005 + t3656 * t4004 + t3470 * t3886 + (t3654 * t4002 + t3655 * t3999 + t3656 * t3997 + t3657 * t3995) * t3708) * MDP(7) + (t3467 * t4204 + t3655 * t4255 + t3656 * t4254 + t3470 * t4198 + (t3483 * t4233 + t3486 * t4225 + t3655 * t4250 + t3656 * t4246) * t3708) * MDP(8) + (t3467 * t4101 + t3468 * t4087 + t3469 * t4082 + t3470 * t4078) * t4395 + (t3416 * t4386 + t3418 * t4384 + t3420 * t4382 + t3422 * t4379 + (t3439 * t3974 + t3442 * t3959 + t3443 * t3950 + t3444 * t3941) * t3708 + (t3442 * t4060 + t3443 * t4053 + t4194 * t4392 + t4200 * t4393) * t3677) * MDP(10) + (t3417 * t4386 + t3419 * t4384 + t3421 * t4382 + t3423 * t4379 + (-t3439 * t3972 - t3442 * t3957 - t3443 * t3948 - t3444 * t3939) * t3708 + (-t3442 * t3819 - t3443 * t3813 - t3885 * t4392 - t3888 * t4393) * t3677) * MDP(11) + t4007; (t3441 * t4376 + t3448 * t4374 + t3450 * t4372 + t3452 * t4369 + (t3526 * t3978 + t3528 * t3967 + t3530 * t3965 + t3532 * t3963) * t3708 + (t3526 * t4067 + t3528 * t4041 + t3530 * t4040 + t3532 * t4039) * t3677) * MDP(10) + (t3446 * t4376 + t3454 * t4374 + t3456 * t4372 + t3458 * t4369 + (-t3526 * t3977 - t3528 * t3966 - t3530 * t3964 - t3532 * t3962) * t3708 + (-t3526 * t3823 - t3528 * t3806 - t3530 * t3804 - t3532 * t3801) * t3677) * MDP(11) + t3710; (t3654 * t4074 + t3657 * t4048 + t4257) * MDP(2) + ((t3654 * t3860 + t3657 * t3859) * t3677 + t3792) * MDP(3) + ((-t3657 * t4370 - t4380) * t4014 + (-t3654 * t4377 - t4387) * t4032 + t3711) * t4398 + (t3654 * t3934 + t3657 * t3906 + t4258) * MDP(5) + (t3654 * t3933 + t3657 * t3905 + t4259) * t4408 + ((t3546 * t3927 + t3554 * t3899) * t3708 + t3791) * MDP(7) + ((t3546 * t4069 + t3554 * t4043) * t3708 + t3790) * MDP(8) + (t3440 * t4376 + t3447 * t4374 + t3449 * t4372 + t3451 * t4369 + (t3525 * t3978 + t3527 * t3967 + t3529 * t3965 + t3531 * t3963) * t3708 + (t3525 * t4067 + t3527 * t4041 + t3529 * t4040 + t3531 * t4039) * t3677) * MDP(10) + (t3445 * t4376 + t3453 * t4374 + t3455 * t4372 + t3457 * t4369 + (-t3525 * t3977 - t3527 * t3966 - t3529 * t3964 - t3531 * t3962) * t3708 + (-t3525 * t3823 - t3527 * t3806 - t3529 * t3804 - t3531 * t3801) * t3677) * MDP(11) + t4266; (t3534 ^ 2 * t4440 + t3538 ^ 2 * t4442 + t3539 ^ 2 * t4444 + t3540 ^ 2 * t4446) * MDP(1) + (t3570 * t4326 + t3571 * t4320 + t4217 + t4223) * MDP(2) + (t3570 * t4178 + t3571 * t4167 + t3664 * t4223 + t3669 * t4217) * MDP(5) + (t3565 * t4189 + t3570 * t4177 + t3571 * t4166 + t3572 * t4160) * t4408 + (t3459 * t4376 + t3461 * t4374 + t3462 * t4372 + t3463 * t4369) * MDP(10) + (t3460 * t4376 + t3464 * t4374 + t3465 * t4372 + t3466 * t4369) * MDP(11) + MDP(15) + (t3546 ^ 2 * t4332 + t3552 ^ 2 * t4326 + t3553 ^ 2 * t4320 + t3554 ^ 2 * t4312) * t4394 + ((t3534 * t3978 + t3538 * t3967 + t3539 * t3965 + t3540 * t3963) * MDP(10) + (-t3534 * t3977 - t3538 * t3966 - t3539 * t3964 - t3540 * t3962) * MDP(11) + (t4158 * t4429 + t4165 * t4430 + t4176 * t4431 + t4187 * t4432) * t4448 + (t4313 * t4429 + t4321 * t4430 + t4327 * t4431 + t4333 * t4432) * t4447) * t3708 + ((t3988 + t3989 + t3990 + t3992) * MDP(10) + (-t3534 * t3823 - t3538 * t3806 - t3539 * t3804 - t3540 * t3801) * MDP(11) + (t3665 * t3992 + t3670 * t3990 + t3672 * t3989 + t3674 * t3988) * t4450 + (-t3534 * t3567 * t4032 - t3540 * t3578 * t4014 - t3538 * t3898 - t3539 * t3895) * t4449) * t3677; t3412 + (t3483 * t4219 + t3484 * t4211 + t3485 * t4209 + t3486 * t4207) * MDP(2) + ((t3538 * t4248 + t3539 * t4244 + t3682 * t4253 + t3698 * t4243) * t3677 + t4008) * MDP(3) + ((-t3444 * t4207 - t4243) * t3692 + (-t3443 * t4209 - t3485 * t4372) * t3690 + (-t3442 * t4211 - t3484 * t4374) * t3688 + (-t3439 * t4219 - t4253) * t3680) * t4398 + (t3567 * t4125 + t3576 * t4122 + t3577 * t4119 + t3578 * t4116) * MDP(5) + (t3567 * t4252 + t3576 * t4249 + t3577 * t4245 + t3578 * t4242) * t4408 + (t3567 * t4130 + t3576 * t4129 + t3577 * t4128 + t3578 * t4127 + (t3546 * t4124 + t3552 * t4121 + t3553 * t4118 + t3554 * t4115) * t3708) * MDP(7) + (t3467 * t3567 * t4439 + t3468 * t3576 * t4441 + t3469 * t3577 * t4443 + t3470 * t3578 * t4445 + (t3483 * t4362 + t3486 * t4355 + t3552 * t4390 + t3553 * t4389) * t3708) * MDP(8) + (t3467 * t4234 + t3468 * t4230 + t3469 * t4229 + t3470 * t4228) * t4395 + (t3416 * t4376 + t3418 * t4374 + t3420 * t4372 + t3422 * t4369 + (t3439 * t4103 + t3442 * t4096 + t3443 * t4093 + t3444 * t4090) * t3708 + (t3439 * t4218 + t3442 * t4210 + t3443 * t4208 + t3444 * t4206) * t3677) * MDP(10) + (t3417 * t4376 + t3419 * t4374 + t3421 * t4372 + t3423 * t4369 + (-t3439 * t4102 - t3442 * t4095 - t3443 * t4092 - t3444 * t4089) * t3708 + (-t3439 * t3925 - t3442 * t3896 - t3443 * t3893 - t3444 * t3891) * t3677) * MDP(11); (-t3659 * t4110 - t3660 * t4107 - t3869 * t4011 - t3872 * t4029) * MDP(2) + (t3786 * t4044 + (-t3443 * t3660 + t3530 * t4364) * t4049 + (-t3442 * t3659 + t3528 * t4365) * t4056 + t3788 * t4070) * t4399 + ((-t3786 * t4045 - t3788 * t4071 - t3861 * t3870 - t3863 * t3871) * t3677 + t4264) * MDP(4) + (-t3869 * t3880 - t3870 * t3922 - t3871 * t3924 - t3872 * t3884) * MDP(5) + (-t3869 * t3879 - t3870 * t3921 - t3871 * t3923 - t3872 * t3883) * t4408 + (-t3727 * t4296 - t3729 * t4413 - t3731 * t4414 - t3733 * t4302) * t4397 + (-t3665 * t3733 - t3670 * t3731 - t3672 * t3729 - t3674 * t3727) * t4396 + (-t3658 * t3976 - t3659 * t3961 - t3660 * t3952 - t3661 * t3943) * t4394 + (t3439 * t3441 + t3442 * t3448 + t3443 * t3450 + t3444 * t3452 + (t3526 * t3848 + t3528 * t3842 + t3530 * t3836 + t3532 * t3830) * t3708 + (t3526 * t3986 + t3528 * t3981 + t3530 * t3979 + t3532 * t3984) * t3677) * MDP(10) + (t3439 * t3446 + t3442 * t3454 + t3443 * t3456 + t3444 * t3458 + (-t3526 * t3847 - t3528 * t3841 - t3530 * t3835 - t3532 * t3829) * t3708 + (-t3526 * t3778 - t3528 * t3776 - t3530 * t3775 - t3532 * t3777) * t3677) * MDP(11) + t3781; (t3980 + t3982 + t3983 + t3985) * MDP(2) + ((t3787 * t4044 + t3789 * t4070 + t3763 + t3768) * t3677 + t4265) * MDP(3) + (-t3787 * t4045 + (-t3443 * t3656 - t3529 * t4364) * t4050 + (-t3442 * t3655 - t3527 * t4365) * t4057 - t3789 * t4071) * t4398 + (t3664 * t3985 + t3667 * t3982 + t3668 * t3980 + t3669 * t3983) * MDP(5) + (t3655 * t3871 * t4065 + t3656 * t3870 * t4063 + t4009 * t4415 + t4027 * t4416) * t4408 + (t3728 * t4296 + t3730 * t4413 + t3732 * t4414 + t3734 * t4302) * t4397 + (t3665 * t3734 + t3670 * t3732 + t3672 * t3730 + t3674 * t3728) * t4396 + (t3654 * t3976 + t3655 * t3961 + t3656 * t3952 + t3657 * t3943) * t4394 + (t3439 * t3440 + t3442 * t3447 + t3443 * t3449 + t3444 * t3451 + (t3525 * t3848 + t3527 * t3842 + t3529 * t3836 + t3531 * t3830) * t3708 + (t3525 * t3986 + t3527 * t3981 + t3529 * t3979 + t3531 * t3984) * t3677) * MDP(10) + (t3439 * t3445 + t3442 * t3453 + t3443 * t3455 + t3444 * t3457 + (-t3525 * t3847 - t3527 * t3841 - t3529 * t3835 - t3531 * t3829) * t3708 + (-t3525 * t3778 - t3531 * t3777 - t3687 * t3768 - t3689 * t3763) * t3677) * MDP(11) + t4007; t3412 + (t3869 * t4048 + t3870 * t4055 + t3871 * t4062 + t3872 * t4074) * MDP(2) + ((t3538 * t3856 + t3539 * t3854 + t3859 * t3869 + t3860 * t3872) * t3677 + t4008) * MDP(3) + ((-t3444 * t3578 - t4366 * t4370) * t4162 + (-t3539 * t3574 * t4364 - t3443 * t3577) * t4172 + (-t3538 * t3573 * t4365 - t3442 * t3576) * t4183 + (-t3439 * t3567 - t4367 * t4377) * t4191) * t4398 + (t3869 * t3906 + t3870 * t3913 + t3871 * t3920 + t3872 * t3934) * MDP(5) + (t3869 * t3905 + t3870 * t3912 + t3871 * t3919 + t3872 * t3933) * t4408 + (t3737 * t4296 + t3738 * t4413 + t3739 * t4414 + t3740 * t4302) * t4397 + (t3665 * t3740 + t3670 * t3739 + t3672 * t3738 + t3674 * t3737) * t4396 + (t3546 * t4098 + t3552 * t4084 + t3553 * t4079 + t3554 * t4075) * t4394 + (t3439 * t3459 + t3442 * t3461 + t3443 * t3462 + t3444 * t3463 + (t3534 * t3848 + t3538 * t3842 + t3539 * t3836 + t3540 * t3830) * t3708 + (t3534 * t3986 + t3538 * t3981 + t3539 * t3979 + t3540 * t3984) * t3677) * MDP(10) + (t3439 * t3460 + t3442 * t3464 + t3443 * t3465 + t3444 * t3466 + (-t3534 * t3847 - t3538 * t3841 - t3539 * t3835 - t3540 * t3829) * t3708 + (-t3534 * t3778 - t3538 * t3776 - t3539 * t3775 - t3540 * t3777) * t3677) * MDP(11); (t3439 ^ 2 + t3442 ^ 2 + t3443 ^ 2 + t3444 ^ 2) * MDP(1) + (t3483 * t4114 + t3484 * t4109 + t3485 * t4106 + t3486 * t4112) * MDP(2) + (t3682 * t4436 + t3694 * t4435 + t3696 * t4434 + t3698 * t4433) * t4399 + (-t3680 * t4436 - t3688 * t4435 - t3690 * t4434 - t3692 * t4433) * t4398 + (t3869 * t3994 + t3870 * t3996 + t3871 * t3998 + t3872 * t4001) * MDP(5) + (t3869 * t4117 + t3870 * t4120 + t3871 * t4123 + t3872 * t4126) * t4408 + (t3872 * t4006 + t3871 * t4005 + t3870 * t4004 + t3869 * t4003 + (t3484 * t3687 * t4085 + t3485 * t3689 * t4080 + t4076 * t4388 + t4099 * t4391) * t3708) * MDP(7) + (t3467 * t4239 + t3468 * t4237 + t3469 * t4236 + t3470 * t4238 + (t3483 * t4232 + t3484 * t4227 + t3485 * t4226 + t3486 * t4224) * t3708) * MDP(8) + (t3467 * t4099 + t3468 * t4085 + t3469 * t4080 + t3470 * t4076) * t4395 + (t3439 * t3416 + t3442 * t3418 + t3443 * t3420 + t3444 * t3422 + (t3439 * t3969 + t3442 * t3954 + t3443 * t3945 + t3444 * t3936) * t3708 + (t3439 * t4113 + t3442 * t4108 + t3443 * t4105 + t3444 * t4111) * t3677) * MDP(10) + (t3439 * t3417 + t3442 * t3419 + t3443 * t3421 + t3444 * t3423 + (-t3439 * t3968 - t3442 * t3953 - t3443 * t3944 - t3444 * t3935) * t3708 + (-t3439 * t3858 - t3442 * t3855 - t3443 * t3853 - t3444 * t3857) * t3677) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_4_matlab.m
res = [t1(1), t1(2), t1(3), t1(4); t1(5), t1(6), t1(7), t1(8); t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16);];
MMX  = res;
