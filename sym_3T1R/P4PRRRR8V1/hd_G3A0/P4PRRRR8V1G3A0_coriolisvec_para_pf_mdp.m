% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V1G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [4x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-09-20 23:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-09-20 23:03:06
% EndTime: 2020-09-20 23:03:37
% DurationCPUTime: 32.32s
% Computational Cost: add. (106916->671), mult. (255367->1401), div. (10220->22), fcn. (198857->30), ass. (0->601)
t4521 = xP(4);
t4470 = sin(t4521);
t4471 = cos(t4521);
t4523 = koppelP(3,2);
t4527 = koppelP(3,1);
t4438 = t4470 * t4527 + t4471 * t4523;
t4442 = -t4470 * t4523 + t4471 * t4527;
t4502 = legFrame(3,2);
t4463 = sin(t4502);
t4467 = cos(t4502);
t4517 = xDP(4);
t4519 = xDP(2);
t4520 = xDP(1);
t4348 = (-t4438 * t4517 + t4520) * t4467 - (t4442 * t4517 + t4519) * t4463;
t4495 = cos(pkin(6));
t4493 = sin(pkin(6));
t4518 = xDP(3);
t4886 = t4493 * t4518;
t4340 = t4348 * t4495 - t4886;
t4505 = sin(qJ(3,3));
t4506 = sin(qJ(2,3));
t4512 = cos(qJ(2,3));
t4496 = cos(pkin(3));
t4865 = t4496 * t4518;
t4873 = t4496 * t4506;
t4494 = sin(pkin(3));
t4511 = cos(qJ(3,3));
t4883 = t4494 * t4511;
t4328 = ((-t4348 * t4873 - t4512 * t4518) * t4495 - (t4348 * t4512 - t4506 * t4865) * t4493) * t4505 - t4340 * t4883;
t4325 = t4328 ^ 2;
t4482 = 0.1e1 / t4511 ^ 2;
t4921 = t4325 * t4482;
t4858 = t4506 * t4511;
t4447 = pkin(2) * t4858 - pkin(5) * t4512;
t4874 = t4496 * t4505;
t4754 = pkin(2) * t4874 + t4447 * t4494;
t4978 = 0.1e1 / t4754 ^ 2;
t4316 = t4978 * t4921;
t4922 = t4325 * t4978;
t4304 = t4316 - 0.2e1 * t4922;
t4868 = t4496 * t4512;
t4962 = pkin(2) * t4511;
t4369 = pkin(5) * (t4493 * t4512 + t4495 * t4873) + (-t4493 * t4506 + t4495 * t4868) * t4962;
t4481 = 0.1e1 / t4511;
t4977 = 0.1e1 / t4754;
t4909 = t4977 * t4481;
t4988 = t4369 * t4909;
t4994 = t4304 * t4988;
t4524 = koppelP(2,2);
t4528 = koppelP(2,1);
t4439 = t4470 * t4528 + t4471 * t4524;
t4443 = -t4470 * t4524 + t4471 * t4528;
t4503 = legFrame(2,2);
t4464 = sin(t4503);
t4468 = cos(t4503);
t4349 = (-t4439 * t4517 + t4520) * t4468 - (t4443 * t4517 + t4519) * t4464;
t4341 = t4349 * t4495 - t4886;
t4507 = sin(qJ(3,2));
t4508 = sin(qJ(2,2));
t4514 = cos(qJ(2,2));
t4871 = t4496 * t4508;
t4513 = cos(qJ(3,2));
t4881 = t4494 * t4513;
t4329 = ((-t4349 * t4871 - t4514 * t4518) * t4495 - (t4349 * t4514 - t4508 * t4865) * t4493) * t4507 - t4341 * t4881;
t4326 = t4329 ^ 2;
t4486 = 0.1e1 / t4513 ^ 2;
t4919 = t4326 * t4486;
t4855 = t4508 * t4513;
t4448 = pkin(2) * t4855 - pkin(5) * t4514;
t4872 = t4496 * t4507;
t4753 = pkin(2) * t4872 + t4448 * t4494;
t4980 = 0.1e1 / t4753 ^ 2;
t4317 = t4980 * t4919;
t4920 = t4326 * t4980;
t4305 = t4317 - 0.2e1 * t4920;
t4867 = t4496 * t4514;
t4961 = pkin(2) * t4513;
t4370 = pkin(5) * (t4493 * t4514 + t4495 * t4871) + (-t4493 * t4508 + t4495 * t4867) * t4961;
t4485 = 0.1e1 / t4513;
t4979 = 0.1e1 / t4753;
t4906 = t4979 * t4485;
t4987 = t4370 * t4906;
t4993 = t4305 * t4987;
t4525 = koppelP(1,2);
t4529 = koppelP(1,1);
t4440 = t4470 * t4529 + t4471 * t4525;
t4444 = -t4470 * t4525 + t4471 * t4529;
t4504 = legFrame(1,2);
t4465 = sin(t4504);
t4469 = cos(t4504);
t4350 = (-t4440 * t4517 + t4520) * t4469 - (t4444 * t4517 + t4519) * t4465;
t4342 = t4350 * t4495 - t4886;
t4509 = sin(qJ(3,1));
t4510 = sin(qJ(2,1));
t4516 = cos(qJ(2,1));
t4869 = t4496 * t4510;
t4515 = cos(qJ(3,1));
t4879 = t4494 * t4515;
t4330 = ((-t4350 * t4869 - t4516 * t4518) * t4495 - (t4350 * t4516 - t4510 * t4865) * t4493) * t4509 - t4342 * t4879;
t4327 = t4330 ^ 2;
t4490 = 0.1e1 / t4515 ^ 2;
t4917 = t4327 * t4490;
t4852 = t4510 * t4515;
t4449 = pkin(2) * t4852 - pkin(5) * t4516;
t4870 = t4496 * t4509;
t4752 = pkin(2) * t4870 + t4449 * t4494;
t4982 = 0.1e1 / t4752 ^ 2;
t4318 = t4982 * t4917;
t4918 = t4327 * t4982;
t4306 = t4318 - 0.2e1 * t4918;
t4866 = t4496 * t4516;
t4960 = pkin(2) * t4515;
t4371 = pkin(5) * (t4493 * t4516 + t4495 * t4869) + (-t4493 * t4510 + t4495 * t4866) * t4960;
t4489 = 0.1e1 / t4515;
t4981 = 0.1e1 / t4752;
t4903 = t4981 * t4489;
t4986 = t4371 * t4903;
t4992 = t4306 * t4986;
t4854 = t4509 * t4510;
t4584 = t4496 * t4854 + t4879;
t4853 = t4509 * t4516;
t4386 = t4493 * t4853 + t4584 * t4495;
t4914 = t4330 * t4981;
t4457 = t4518 * t4495;
t4346 = t4350 * t4493 + t4457;
t4314 = -(t4342 * t4866 - t4346 * t4510) * t4960 - (t4342 * t4869 + t4346 * t4516) * pkin(5);
t4926 = t4314 * t4982;
t4701 = t4914 * t4926;
t4887 = t4490 * t4509;
t4991 = t4887 * (t4371 * t4918 * t4981 - 0.2e1 * t4386 * t4701);
t4857 = t4507 * t4508;
t4585 = t4496 * t4857 + t4881;
t4856 = t4507 * t4514;
t4385 = t4493 * t4856 + t4585 * t4495;
t4915 = t4329 * t4979;
t4345 = t4349 * t4493 + t4457;
t4313 = -(t4341 * t4867 - t4345 * t4508) * t4961 - (t4341 * t4871 + t4345 * t4514) * pkin(5);
t4928 = t4313 * t4980;
t4702 = t4915 * t4928;
t4888 = t4486 * t4507;
t4990 = t4888 * (t4370 * t4920 * t4979 - 0.2e1 * t4385 * t4702);
t4860 = t4505 * t4506;
t4586 = t4496 * t4860 + t4883;
t4859 = t4505 * t4512;
t4384 = t4493 * t4859 + t4586 * t4495;
t4916 = t4328 * t4977;
t4344 = t4348 * t4493 + t4457;
t4312 = -(t4340 * t4868 - t4344 * t4506) * t4962 - (t4340 * t4873 + t4344 * t4512) * pkin(5);
t4930 = t4312 * t4978;
t4703 = t4916 * t4930;
t4889 = t4482 * t4505;
t4989 = t4889 * (t4369 * t4922 * t4977 - 0.2e1 * t4384 * t4703);
t4841 = pkin(5) * t4916;
t4750 = t4505 * t4841;
t4931 = t4312 * t4977;
t4297 = (t4750 - t4931) * t4481;
t4480 = t4511 ^ 2;
t4532 = 0.1e1 / pkin(2);
t4907 = t4977 * t4532;
t4778 = t4481 * t4907;
t4637 = t4312 * t4494 * t4778;
t4768 = t4494 * t4858;
t4769 = t4494 * t4860;
t4786 = t4384 * t4909;
t4864 = t4496 * t4532;
t4882 = t4494 * t4512;
t4908 = t4977 * t4505;
t4492 = t4517 ^ 2;
t4966 = t4492 * (-t4438 * t4463 + t4442 * t4467);
t4272 = t4786 * t4966 + (-(t4496 * t4297 + (pkin(2) * (t4864 * t4931 + t4882 * t4916) * t4480 - (t4312 * t4908 - t4841) * t4768) * t4481) * t4977 * t4916 + (-t4512 * t4637 + (t4769 + (t4481 - t4511) * t4496) * t4916) * t4930) * t4482;
t4954 = t4272 * t4977;
t4835 = t4369 * t4954;
t4840 = pkin(5) * t4915;
t4749 = t4507 * t4840;
t4929 = t4313 * t4979;
t4298 = (t4749 - t4929) * t4485;
t4484 = t4513 ^ 2;
t4904 = t4979 * t4532;
t4775 = t4485 * t4904;
t4635 = t4313 * t4494 * t4775;
t4766 = t4494 * t4855;
t4767 = t4494 * t4857;
t4785 = t4385 * t4906;
t4880 = t4494 * t4514;
t4905 = t4979 * t4507;
t4967 = t4492 * (-t4439 * t4464 + t4443 * t4468);
t4273 = t4785 * t4967 + (-(t4496 * t4298 + (pkin(2) * (t4864 * t4929 + t4880 * t4915) * t4484 - (t4313 * t4905 - t4840) * t4766) * t4485) * t4979 * t4915 + (-t4514 * t4635 + (t4767 + (t4485 - t4513) * t4496) * t4915) * t4928) * t4486;
t4951 = t4273 * t4979;
t4832 = t4370 * t4951;
t4839 = pkin(5) * t4914;
t4748 = t4509 * t4839;
t4927 = t4314 * t4981;
t4299 = (t4748 - t4927) * t4489;
t4488 = t4515 ^ 2;
t4901 = t4981 * t4532;
t4772 = t4489 * t4901;
t4633 = t4314 * t4494 * t4772;
t4764 = t4494 * t4852;
t4765 = t4494 * t4854;
t4784 = t4386 * t4903;
t4878 = t4494 * t4516;
t4902 = t4981 * t4509;
t4968 = t4492 * (-t4440 * t4465 + t4444 * t4469);
t4274 = t4784 * t4968 + (-(t4496 * t4299 + (pkin(2) * (t4864 * t4927 + t4878 * t4914) * t4488 - (t4314 * t4902 - t4839) * t4764) * t4489) * t4981 * t4914 + (-t4516 * t4633 + (t4765 + (t4489 - t4515) * t4496) * t4914) * t4926) * t4490;
t4948 = t4274 * t4981;
t4829 = t4371 * t4948;
t4522 = koppelP(4,2);
t4526 = koppelP(4,1);
t4437 = t4470 * t4526 + t4471 * t4522;
t4441 = -t4470 * t4522 + t4471 * t4526;
t4501 = legFrame(4,2);
t4462 = sin(t4501);
t4466 = cos(t4501);
t4347 = (-t4437 * t4517 + t4520) * t4466 - (t4441 * t4517 + t4519) * t4462;
t4339 = t4347 * t4495 - t4886;
t4343 = t4347 * t4493 + t4457;
t4498 = sin(qJ(2,4));
t4500 = cos(qJ(2,4));
t4875 = t4496 * t4500;
t4876 = t4496 * t4498;
t4499 = cos(qJ(3,4));
t4963 = pkin(2) * t4499;
t4308 = -(t4339 * t4875 - t4343 * t4498) * t4963 - pkin(5) * (t4339 * t4876 + t4343 * t4500);
t4474 = 0.1e1 / t4499;
t4530 = pkin(5) ^ 2;
t4531 = pkin(2) ^ 2;
t4497 = sin(qJ(3,4));
t4861 = t4498 * t4499;
t4445 = pkin(2) * t4861 - pkin(5) * t4500;
t4877 = t4496 * t4497;
t4755 = pkin(2) * t4877 + t4445 * t4494;
t4975 = 0.1e1 / t4755;
t4911 = t4975 * t4497;
t4782 = t4474 * t4911;
t4885 = t4494 * t4499;
t4324 = ((-t4347 * t4876 - t4500 * t4518) * t4495 - (t4347 * t4500 - t4498 * t4865) * t4493) * t4497 - t4339 * t4885;
t4923 = t4324 * t4975;
t4291 = -pkin(5) * t4308 * t4782 + (t4474 * t4530 + t4499 * t4531) * t4923;
t4842 = pkin(5) * t4923;
t4751 = t4497 * t4842;
t4936 = t4308 * t4975;
t4295 = (t4751 - t4936) * t4474;
t4446 = pkin(5) * t4498 + t4500 * t4963;
t4964 = pkin(2) * t4494;
t4612 = -t4445 * t4496 + t4497 * t4964;
t4351 = t4446 * t4495 + t4612 * t4493;
t4331 = t4351 * t4466 + t4462 * t4755;
t4332 = -t4351 * t4462 + t4466 * t4755;
t4912 = t4975 * t4474;
t4976 = 0.1e1 / t4755 ^ 2;
t4935 = t4308 * t4976;
t4279 = -t4295 * t4474 * t4935 + (t4291 * t4324 * t4912 + (-t4331 * t4441 - t4332 * t4437) * t4492) * t4975;
t4941 = t4279 * t4975;
t4779 = t4481 * t4908;
t4292 = -pkin(5) * t4312 * t4779 + (t4481 * t4530 + t4511 * t4531) * t4916;
t4450 = pkin(5) * t4506 + t4512 * t4962;
t4611 = -t4447 * t4496 + t4505 * t4964;
t4353 = t4450 * t4495 + t4611 * t4493;
t4333 = t4353 * t4467 + t4463 * t4754;
t4334 = -t4353 * t4463 + t4467 * t4754;
t4280 = -t4297 * t4481 * t4930 + (t4292 * t4328 * t4909 + (-t4333 * t4442 - t4334 * t4438) * t4492) * t4977;
t4940 = t4280 * t4977;
t4776 = t4485 * t4905;
t4293 = -pkin(5) * t4313 * t4776 + (t4485 * t4530 + t4513 * t4531) * t4915;
t4451 = pkin(5) * t4508 + t4514 * t4961;
t4610 = -t4448 * t4496 + t4507 * t4964;
t4354 = t4451 * t4495 + t4610 * t4493;
t4335 = t4354 * t4468 + t4464 * t4753;
t4336 = -t4354 * t4464 + t4468 * t4753;
t4281 = -t4298 * t4485 * t4928 + (t4293 * t4329 * t4906 + (-t4335 * t4443 - t4336 * t4439) * t4492) * t4979;
t4939 = t4281 * t4979;
t4773 = t4489 * t4902;
t4294 = -pkin(5) * t4314 * t4773 + (t4489 * t4530 + t4515 * t4531) * t4914;
t4452 = pkin(5) * t4510 + t4516 * t4960;
t4609 = -t4449 * t4496 + t4509 * t4964;
t4355 = t4452 * t4495 + t4609 * t4493;
t4337 = t4355 * t4469 + t4465 * t4752;
t4338 = -t4355 * t4465 + t4469 * t4752;
t4282 = -t4299 * t4489 * t4926 + (t4294 * t4330 * t4903 + (-t4337 * t4444 - t4338 * t4440) * t4492) * t4981;
t4938 = t4282 * t4981;
t4974 = t4308 ^ 2 * t4976;
t4973 = t4312 ^ 2 * t4978;
t4972 = t4313 ^ 2 * t4980;
t4971 = t4314 ^ 2 * t4982;
t4367 = -pkin(5) * (t4493 * t4500 + t4495 * t4876) + (t4493 * t4498 - t4495 * t4875) * t4963;
t4616 = t4437 * t4466 + t4441 * t4462;
t4970 = t4367 * t4616;
t4863 = t4497 * t4498;
t4587 = t4496 * t4863 + t4885;
t4862 = t4497 * t4500;
t4380 = t4493 * t4862 + t4587 * t4495;
t4676 = 0.2e1 * t4923 * t4935;
t4475 = 0.1e1 / t4499 ^ 2;
t4890 = t4475 * t4497;
t4913 = t4367 * t4975;
t4323 = t4324 ^ 2;
t4925 = t4323 * t4976;
t4969 = (t4380 * t4676 + t4913 * t4925) * t4890;
t4965 = t4492 * (-t4437 * t4462 + t4441 * t4466);
t4959 = MDP(3) * t4494;
t4958 = MDP(4) * t4494;
t4957 = MDP(9) * t4532;
t4473 = t4499 ^ 2;
t4910 = t4975 * t4532;
t4781 = t4474 * t4910;
t4642 = t4308 * t4494 * t4781;
t4770 = t4494 * t4861;
t4771 = t4494 * t4863;
t4787 = t4380 * t4912;
t4884 = t4494 * t4500;
t4271 = t4787 * t4965 + (-(t4496 * t4295 + (pkin(2) * (t4864 * t4936 + t4884 * t4923) * t4473 - (t4308 * t4911 - t4842) * t4770) * t4474) * t4975 * t4923 + (-t4500 * t4642 + (t4771 + (t4474 - t4499) * t4496) * t4923) * t4935) * t4475;
t4956 = t4271 * t4498;
t4955 = t4271 * t4500;
t4953 = t4272 * t4506;
t4952 = t4272 * t4512;
t4950 = t4273 * t4508;
t4949 = t4273 * t4514;
t4947 = t4274 * t4510;
t4946 = t4274 * t4516;
t4783 = t4975 * t4910;
t4700 = t4324 * t4783;
t4275 = (-t4496 * t4291 * t4700 - (-t4497 * t4445 * t4642 + t4496 * (-t4474 * t4751 + t4499 * t4936)) * t4308 * t4783) * t4475 - t4367 * t4781 * t4965;
t4945 = t4275 * t4975;
t4780 = t4977 * t4907;
t4699 = t4328 * t4780;
t4276 = (-t4496 * t4292 * t4699 - (-t4505 * t4447 * t4637 + t4496 * (-t4481 * t4750 + t4511 * t4931)) * t4312 * t4780) * t4482 + t4369 * t4778 * t4966;
t4944 = t4276 * t4977;
t4777 = t4979 * t4904;
t4698 = t4329 * t4777;
t4277 = (-t4496 * t4293 * t4698 - (-t4507 * t4448 * t4635 + t4496 * (-t4485 * t4749 + t4513 * t4929)) * t4313 * t4777) * t4486 + t4370 * t4775 * t4967;
t4943 = t4277 * t4979;
t4774 = t4981 * t4901;
t4697 = t4330 * t4774;
t4278 = (-t4496 * t4294 * t4697 - (-t4509 * t4449 * t4633 + t4496 * (-t4489 * t4748 + t4515 * t4927)) * t4314 * t4774) * t4490 + t4371 * t4772 * t4968;
t4942 = t4278 * t4981;
t4937 = t4975 * t4974;
t4934 = t4977 * t4973;
t4933 = t4979 * t4972;
t4932 = t4981 * t4971;
t4924 = t4323 * t4475;
t4892 = t4470 * t4492;
t4891 = t4471 * t4492;
t4267 = t4271 * t4884 + t4275 * t4496;
t4315 = t4976 * t4924;
t4533 = 0.1e1 / pkin(2) ^ 2;
t4818 = t4533 * t4974;
t4296 = t4475 * t4818 + t4315;
t4583 = -0.2e1 * t4308 * t4500 * t4700;
t4714 = t4496 * t4818;
t4851 = t4267 * t4499 - t4275 * t4771 + (-t4296 * t4861 + t4583 * t4890) * t4494 - t4714 * t4890;
t4850 = -t4267 * t4497 - t4275 * t4770 + (t4296 * t4863 + t4474 * t4583) * t4494 - t4474 * t4714;
t4268 = t4272 * t4882 + t4276 * t4496;
t4816 = t4533 * t4973;
t4300 = t4482 * t4816 + t4316;
t4580 = -0.2e1 * t4312 * t4512 * t4699;
t4711 = t4496 * t4816;
t4849 = t4268 * t4511 - t4276 * t4769 + (-t4300 * t4858 + t4580 * t4889) * t4494 - t4711 * t4889;
t4269 = t4273 * t4880 + t4277 * t4496;
t4814 = t4533 * t4972;
t4301 = t4486 * t4814 + t4317;
t4578 = -0.2e1 * t4313 * t4514 * t4698;
t4708 = t4496 * t4814;
t4848 = t4269 * t4513 - t4277 * t4767 + (-t4301 * t4855 + t4578 * t4888) * t4494 - t4708 * t4888;
t4270 = t4274 * t4878 + t4278 * t4496;
t4812 = t4533 * t4971;
t4302 = t4490 * t4812 + t4318;
t4576 = -0.2e1 * t4314 * t4516 * t4697;
t4705 = t4496 * t4812;
t4847 = t4270 * t4515 - t4278 * t4765 + (-t4302 * t4852 + t4576 * t4887) * t4494 - t4705 * t4887;
t4846 = -t4268 * t4505 - t4276 * t4768 + (t4300 * t4860 + t4481 * t4580) * t4494 - t4481 * t4711;
t4845 = -t4269 * t4507 - t4277 * t4766 + (t4301 * t4857 + t4485 * t4578) * t4494 - t4485 * t4708;
t4844 = -t4270 * t4509 - t4278 * t4764 + (t4302 * t4854 + t4489 * t4576) * t4494 - t4489 * t4705;
t4843 = 2 * MDP(6);
t4838 = t4271 * t4913;
t4837 = t4271 * t4912;
t4836 = t4271 * t4911;
t4834 = t4272 * t4909;
t4833 = t4272 * t4908;
t4831 = t4273 * t4906;
t4830 = t4273 * t4905;
t4828 = t4274 * t4903;
t4827 = t4274 * t4902;
t4826 = t4380 * t4945;
t4825 = t4384 * t4944;
t4824 = t4385 * t4943;
t4823 = t4386 * t4942;
t4822 = t4500 * t4941;
t4821 = t4512 * t4940;
t4820 = t4514 * t4939;
t4819 = t4516 * t4938;
t4817 = t4475 * t4937;
t4815 = t4482 * t4934;
t4813 = t4486 * t4933;
t4811 = t4490 * t4932;
t4810 = t4498 * t4924;
t4809 = t4500 * t4924;
t4807 = t4506 * t4921;
t4806 = t4512 * t4921;
t4804 = t4508 * t4919;
t4803 = t4514 * t4919;
t4801 = t4510 * t4917;
t4800 = t4516 * t4917;
t4796 = t4975 * t4970;
t4795 = t4367 * t4912;
t4368 = (t4493 * t4875 + t4495 * t4498) * t4963 + (t4493 * t4876 - t4495 * t4500) * pkin(5);
t4794 = t4368 * t4912;
t4372 = (t4493 * t4868 + t4495 * t4506) * t4962 + (t4493 * t4873 - t4495 * t4512) * pkin(5);
t4790 = t4372 * t4909;
t4373 = (t4493 * t4867 + t4495 * t4508) * t4961 + (t4493 * t4871 - t4495 * t4514) * pkin(5);
t4789 = t4373 * t4906;
t4374 = (t4493 * t4866 + t4495 * t4510) * t4960 + (t4493 * t4869 - t4495 * t4516) * pkin(5);
t4788 = t4374 * t4903;
t4763 = t4851 * t4975;
t4762 = t4850 * t4975;
t4761 = t4849 * t4977;
t4760 = t4848 * t4979;
t4759 = t4847 * t4981;
t4758 = t4846 * t4977;
t4757 = t4845 * t4979;
t4756 = t4844 * t4981;
t4747 = t4271 * t4787;
t4746 = t4380 * t4836;
t4745 = t4497 ^ 2 * t4837;
t4744 = t4271 * t4782;
t4743 = t4272 * t4786;
t4742 = t4384 * t4833;
t4741 = t4505 ^ 2 * t4834;
t4740 = t4272 * t4779;
t4739 = t4273 * t4785;
t4738 = t4385 * t4830;
t4737 = t4507 ^ 2 * t4831;
t4736 = t4273 * t4776;
t4735 = t4274 * t4784;
t4734 = t4386 * t4827;
t4733 = t4509 ^ 2 * t4828;
t4732 = t4274 * t4773;
t4731 = t4275 * t4782;
t4730 = t4276 * t4779;
t4729 = t4277 * t4776;
t4728 = t4278 * t4773;
t4727 = t4279 * t4794;
t4726 = t4380 * t4822;
t4725 = t4279 * t4498 * t4912;
t4724 = t4280 * t4790;
t4723 = t4384 * t4821;
t4722 = t4280 * t4506 * t4909;
t4721 = t4281 * t4789;
t4720 = t4385 * t4820;
t4719 = t4281 * t4508 * t4906;
t4718 = t4282 * t4788;
t4717 = t4386 * t4819;
t4716 = t4282 * t4510 * t4903;
t4715 = t4380 * t4817;
t4476 = t4474 / t4473;
t4713 = t4476 * t4497 * t4937;
t4712 = t4384 * t4815;
t4483 = t4481 / t4480;
t4710 = t4483 * t4505 * t4934;
t4709 = t4385 * t4813;
t4487 = t4485 / t4484;
t4707 = t4487 * t4507 * t4933;
t4706 = t4386 * t4811;
t4491 = t4489 / t4488;
t4704 = t4491 * t4509 * t4932;
t4696 = t4469 * t4986;
t4695 = t4467 * t4988;
t4694 = t4468 * t4987;
t4693 = t4474 * t4796;
t4692 = t4462 * t4795;
t4691 = t4466 * t4795;
t4615 = t4438 * t4467 + t4442 * t4463;
t4690 = t4615 * t4988;
t4689 = t4463 * t4988;
t4614 = t4439 * t4468 + t4443 * t4464;
t4688 = t4614 * t4987;
t4687 = t4464 * t4987;
t4613 = t4440 * t4469 + t4444 * t4465;
t4686 = t4613 * t4986;
t4685 = t4465 * t4986;
t4379 = t4587 * t4493 - t4495 * t4862;
t4684 = t4379 * t4822;
t4381 = t4586 * t4493 - t4495 * t4859;
t4682 = t4381 * t4821;
t4382 = t4585 * t4493 - t4495 * t4856;
t4681 = t4382 * t4820;
t4383 = t4584 * t4493 - t4495 * t4853;
t4680 = t4383 * t4819;
t4675 = t4367 * t4744;
t4674 = t4380 * t4745;
t4673 = t4369 * t4740;
t4672 = t4384 * t4741;
t4671 = t4370 * t4736;
t4670 = t4385 * t4737;
t4669 = t4371 * t4732;
t4668 = t4386 * t4733;
t4667 = t4380 * t4731;
t4666 = t4384 * t4730;
t4665 = t4385 * t4729;
t4664 = t4386 * t4728;
t4663 = t4279 * t4693;
t4662 = t4279 * t4692;
t4661 = t4279 * t4691;
t4660 = t4462 * t4726;
t4659 = t4380 * t4725;
t4658 = t4280 * t4695;
t4657 = t4280 * t4690;
t4656 = t4280 * t4689;
t4655 = t4463 * t4723;
t4654 = t4384 * t4722;
t4653 = t4281 * t4694;
t4652 = t4281 * t4688;
t4651 = t4281 * t4687;
t4650 = t4464 * t4720;
t4649 = t4385 * t4719;
t4648 = t4282 * t4696;
t4647 = t4282 * t4686;
t4646 = t4282 * t4685;
t4645 = t4465 * t4717;
t4644 = t4386 * t4716;
t4643 = t4380 * t4713;
t4641 = t4384 * t4710;
t4640 = t4385 * t4707;
t4639 = t4386 * t4704;
t4632 = t4315 * t4911;
t4631 = t4316 * t4908;
t4630 = t4317 * t4905;
t4629 = t4318 * t4902;
t4628 = t4474 * t4684;
t4627 = t4616 * t4726;
t4626 = t4481 * t4682;
t4625 = t4485 * t4681;
t4624 = t4489 * t4680;
t4623 = t4615 * t4723;
t4622 = t4614 * t4720;
t4621 = t4613 * t4717;
t4620 = t4466 * t4726;
t4619 = t4467 * t4723;
t4618 = t4468 * t4720;
t4617 = t4469 * t4717;
t4608 = (0.2e1 * t4480 - 0.1e1) * t4483 * t4703;
t4607 = (0.2e1 * t4484 - 0.1e1) * t4487 * t4702;
t4606 = (0.2e1 * t4488 - 0.1e1) * t4491 * t4701;
t4605 = t4474 * t4627;
t4604 = t4481 * t4623;
t4603 = t4485 * t4622;
t4602 = t4489 * t4621;
t4601 = t4474 * t4660;
t4600 = t4481 * t4655;
t4599 = t4485 * t4650;
t4598 = t4489 * t4645;
t4597 = t4474 * t4620;
t4596 = t4481 * t4619;
t4595 = t4485 * t4618;
t4594 = t4489 * t4617;
t4582 = (0.2e1 * t4473 - 0.1e1) * t4476 * t4676;
t4581 = t4676 * t4890;
t4579 = 0.2e1 * t4703 * t4889;
t4577 = 0.2e1 * t4702 * t4888;
t4575 = 0.2e1 * t4701 * t4887;
t4574 = t4384 * t4608;
t4573 = t4385 * t4607;
t4572 = t4386 * t4606;
t4571 = t4380 * t4582;
t4570 = 0.2e1 * t4574;
t4569 = 0.2e1 * t4573;
t4568 = 0.2e1 * t4572;
t4405 = t4975 * t4976;
t4567 = -t4405 * t4809 - t4956 * t4975;
t4566 = -t4405 * t4810 + t4955 * t4975;
t4409 = t4977 * t4978;
t4565 = -t4409 * t4806 - t4953 * t4977;
t4564 = -t4409 * t4807 + t4952 * t4977;
t4412 = t4979 * t4980;
t4563 = -t4412 * t4803 - t4950 * t4979;
t4562 = -t4412 * t4804 + t4949 * t4979;
t4415 = t4981 * t4982;
t4561 = -t4415 * t4800 - t4947 * t4981;
t4560 = -t4415 * t4801 + t4946 * t4981;
t4558 = t4279 * MDP(1) + t4851 * MDP(10) + t4850 * MDP(11);
t4557 = t4280 * MDP(1) + t4849 * MDP(10) + t4846 * MDP(11);
t4556 = t4281 * MDP(1) + t4848 * MDP(10) + t4845 * MDP(11);
t4555 = t4282 * MDP(1) + t4847 * MDP(10) + t4844 * MDP(11);
t4303 = t4315 - 0.2e1 * t4925;
t4554 = -t4303 * t4795 + t4571;
t4436 = t4764 + t4870;
t4435 = t4496 * t4515 - t4765;
t4434 = t4766 + t4872;
t4433 = t4496 * t4513 - t4767;
t4432 = t4768 + t4874;
t4431 = t4496 * t4511 - t4769;
t4430 = t4770 + t4877;
t4429 = t4496 * t4499 - t4771;
t4358 = -t4452 * t4493 + t4609 * t4495;
t4357 = -t4451 * t4493 + t4610 * t4495;
t4356 = -t4450 * t4493 + t4611 * t4495;
t4352 = -t4446 * t4493 + t4612 * t4495;
t4322 = (-t4337 * t4440 + t4338 * t4444) * t4981;
t4321 = (-t4335 * t4439 + t4336 * t4443) * t4979;
t4320 = (-t4333 * t4438 + t4334 * t4442) * t4977;
t4319 = (-t4331 * t4437 + t4332 * t4441) * t4975;
t1 = [(t4331 * t4941 + t4333 * t4940 + t4335 * t4939 + t4337 * t4938) * MDP(1) + (-t4466 * t4747 - t4467 * t4743 - t4468 * t4739 - t4469 * t4735) * MDP(2) + (t4566 * t4331 + t4564 * t4333 + t4562 * t4335 + t4560 * t4337 - t4594 - t4595 - t4596 - t4597) * t4959 + (t4567 * t4331 + t4565 * t4333 + t4563 * t4335 + t4561 * t4337 + t4466 * t4659 + t4467 * t4654 + t4468 * t4649 + t4469 * t4644) * t4958 + (-t4466 * t4674 - t4467 * t4672 - t4468 * t4670 - t4469 * t4668 + (-t4466 * t4969 + t4467 * t4989 + t4468 * t4990 + t4469 * t4991) * t4532) * MDP(5) + (-0.2e1 * t4466 * t4746 - 0.2e1 * t4467 * t4742 - 0.2e1 * t4468 * t4738 - 0.2e1 * t4469 * t4734 + ((-0.2e1 * t4572 - t4992) * t4469 + (-0.2e1 * t4573 - t4993) * t4468 + (-0.2e1 * t4574 - t4994) * t4467 - t4554 * t4466) * t4532) * MDP(6) + (-t4466 * t4667 - t4467 * t4666 - t4468 * t4665 - t4469 * t4664 + (-t4466 * t4715 - t4467 * t4712 - t4468 * t4709 - t4469 * t4706) * t4533 + (-t4272 * t4505 * t4695 - t4273 * t4507 * t4694 - t4274 * t4509 * t4696 + t4466 * t4675) * t4532) * MDP(7) + (-t4466 * t4826 - t4467 * t4825 - t4468 * t4824 - t4469 * t4823 + (t4466 * t4643 + t4467 * t4641 + t4468 * t4640 + t4469 * t4639) * t4533 + (t4466 * t4838 - t4467 * t4835 - t4468 * t4832 - t4469 * t4829) * t4532) * MDP(8) + (t4275 * t4691 - t4276 * t4695 - t4277 * t4694 - t4278 * t4696) * t4957 + (t4337 * t4759 + t4335 * t4760 + t4333 * t4761 + t4331 * t4763 + (t4429 * t4661 - t4431 * t4658 - t4433 * t4653 - t4435 * t4648) * t4532 + (-t4617 - t4618 - t4619 - t4620) * t4494) * MDP(10) + (t4337 * t4756 + t4335 * t4757 + t4333 * t4758 + t4331 * t4762 + (-t4430 * t4661 + t4432 * t4658 + t4434 * t4653 + t4436 * t4648) * t4532 + (t4497 * t4597 + t4505 * t4596 + t4507 * t4595 + t4509 * t4594) * t4494) * MDP(11) - MDP(13) * t4891 + MDP(14) * t4892; (t4332 * t4941 + t4334 * t4940 + t4336 * t4939 + t4338 * t4938) * MDP(1) + (t4462 * t4747 + t4463 * t4743 + t4464 * t4739 + t4465 * t4735) * MDP(2) + (t4332 * t4566 + t4334 * t4564 + t4336 * t4562 + t4338 * t4560 + t4598 + t4599 + t4600 + t4601) * t4959 + (t4332 * t4567 + t4334 * t4565 + t4336 * t4563 + t4338 * t4561 - t4462 * t4659 - t4463 * t4654 - t4464 * t4649 - t4465 * t4644) * t4958 + (t4462 * t4674 + t4463 * t4672 + t4464 * t4670 + t4465 * t4668 + (t4462 * t4969 - t4463 * t4989 - t4464 * t4990 - t4465 * t4991) * t4532) * MDP(5) + (0.2e1 * t4462 * t4746 + 0.2e1 * t4463 * t4742 + 0.2e1 * t4464 * t4738 + 0.2e1 * t4465 * t4734 + ((t4568 + t4992) * t4465 + (t4569 + t4993) * t4464 + (t4570 + t4994) * t4463 + t4554 * t4462) * t4532) * MDP(6) + (t4462 * t4667 + t4463 * t4666 + t4464 * t4665 + t4465 * t4664 + (t4462 * t4715 + t4463 * t4712 + t4464 * t4709 + t4465 * t4706) * t4533 + (-t4462 * t4675 + t4463 * t4673 + t4464 * t4671 + t4465 * t4669) * t4532) * MDP(7) + (t4462 * t4826 + t4463 * t4825 + t4464 * t4824 + t4465 * t4823 + (-t4462 * t4643 - t4463 * t4641 - t4464 * t4640 - t4465 * t4639) * t4533 + (-t4462 * t4838 + t4463 * t4835 + t4464 * t4832 + t4465 * t4829) * t4532) * MDP(8) + (-t4275 * t4692 + t4276 * t4689 + t4277 * t4687 + t4278 * t4685) * t4957 + (t4338 * t4759 + t4336 * t4760 + t4334 * t4761 + t4332 * t4763 + (-t4429 * t4662 + t4431 * t4656 + t4433 * t4651 + t4435 * t4646) * t4532 + (t4645 + t4650 + t4655 + t4660) * t4494) * MDP(10) + (t4338 * t4756 + t4336 * t4757 + t4334 * t4758 + t4332 * t4762 + (t4430 * t4662 - t4432 * t4656 - t4434 * t4651 - t4436 * t4646) * t4532 + (-t4497 * t4601 - t4505 * t4600 - t4507 * t4599 - t4509 * t4598) * t4494) * MDP(11) - MDP(13) * t4892 - MDP(14) * t4891; (t4379 * t4837 + t4381 * t4834 + t4382 * t4831 + t4383 * t4828) * MDP(2) + (t4379 * t4745 + t4381 * t4741 + t4382 * t4737 + t4383 * t4733) * MDP(5) + (t4379 * t4836 + t4381 * t4833 + t4382 * t4830 + t4383 * t4827) * t4843 + (t4379 * t4731 + t4381 * t4730 + t4382 * t4729 + t4383 * t4728) * MDP(7) + (t4379 * t4945 + t4381 * t4944 + t4382 * t4943 + t4383 * t4942) * MDP(8) + t4555 * t4981 * t4358 + t4556 * t4979 * t4357 + t4557 * t4977 * t4356 + t4558 * t4975 * t4352 + ((t4379 * t4817 + t4381 * t4815 + t4382 * t4813 + t4383 * t4811) * MDP(7) + (-t4379 * t4713 - t4381 * t4710 - t4382 * t4707 - t4383 * t4704) * MDP(8)) * t4533 + ((-t4368 * t4632 - t4372 * t4631 - t4373 * t4630 - t4374 * t4629 + t4379 * t4581 + t4381 * t4579 + t4382 * t4577 + t4383 * t4575) * MDP(5) + (t4303 * t4794 + t4304 * t4790 + t4305 * t4789 + t4306 * t4788 + t4379 * t4582 + 0.2e1 * t4381 * t4608 + 0.2e1 * t4382 * t4607 + 0.2e1 * t4383 * t4606) * MDP(6) + (t4368 * t4744 + t4372 * t4740 + t4373 * t4736 + t4374 * t4732) * MDP(7) + (t4271 * t4368 * t4975 + t4372 * t4954 + t4373 * t4951 + t4374 * t4948) * MDP(8) + (t4275 * t4794 + t4276 * t4790 + t4277 * t4789 + t4278 * t4788) * MDP(9) + (t4429 * t4727 + t4431 * t4724 + t4433 * t4721 + t4435 * t4718) * MDP(10) + (-t4430 * t4727 - t4432 * t4724 - t4434 * t4721 - t4436 * t4718) * MDP(11)) * t4532 + ((t4624 + t4625 + t4626 + t4628) * MDP(3) + (-t4379 * t4725 - t4381 * t4722 - t4382 * t4719 - t4383 * t4716) * MDP(4) + (t4680 + t4681 + t4682 + t4684) * MDP(10) + (-t4497 * t4628 - t4505 * t4626 - t4507 * t4625 - t4509 * t4624) * MDP(11) + (MDP(3) * t4560 + MDP(4) * t4561) * t4358 + (MDP(3) * t4562 + MDP(4) * t4563) * t4357 + (MDP(3) * t4564 + MDP(4) * t4565) * t4356 + (MDP(3) * t4566 + MDP(4) * t4567) * t4352) * t4494; (t4613 * t4735 + t4614 * t4739 + t4615 * t4743 + t4616 * t4747) * MDP(2) + (t4613 * t4668 + t4614 * t4670 + t4615 * t4672 + t4616 * t4674) * MDP(5) + (t4613 * t4734 + t4614 * t4738 + t4615 * t4742 + t4616 * t4746) * t4843 + (t4613 * t4664 + t4614 * t4665 + t4615 * t4666 + t4616 * t4667) * MDP(7) + (t4613 * t4823 + t4614 * t4824 + t4615 * t4825 + t4616 * t4826) * MDP(8) + t4555 * t4322 + t4556 * t4321 + t4557 * t4320 + t4558 * t4319 + ((t4613 * t4706 + t4614 * t4709 + t4615 * t4712 + t4616 * t4715) * MDP(7) + (-t4613 * t4639 - t4614 * t4640 - t4615 * t4641 - t4616 * t4643) * MDP(8)) * t4533 + ((t4380 * t4581 * t4616 + t4632 * t4970 + (-t4369 * t4631 + t4384 * t4579) * t4615 + (-t4370 * t4630 + t4385 * t4577) * t4614 + (-t4371 * t4629 + t4386 * t4575) * t4613) * MDP(5) + (-t4303 * t4693 + t4304 * t4690 + t4305 * t4688 + t4306 * t4686 + t4568 * t4613 + t4569 * t4614 + t4570 * t4615 + t4571 * t4616) * MDP(6) + (-t4271 * t4497 * t4693 + t4613 * t4669 + t4614 * t4671 + t4615 * t4673) * MDP(7) + (-t4271 * t4796 + t4613 * t4829 + t4614 * t4832 + t4615 * t4835) * MDP(8) + (-t4275 * t4693 + t4276 * t4690 + t4277 * t4688 + t4278 * t4686) * MDP(9) + (-t4429 * t4663 + t4431 * t4657 + t4433 * t4652 + t4435 * t4647) * MDP(10) + (t4430 * t4663 - t4432 * t4657 - t4434 * t4652 - t4436 * t4647) * MDP(11)) * t4532 + ((t4602 + t4603 + t4604 + t4605) * MDP(3) + (-t4613 * t4644 - t4614 * t4649 - t4615 * t4654 - t4616 * t4659) * MDP(4) + (t4621 + t4622 + t4623 + t4627) * MDP(10) + (-t4497 * t4605 - t4505 * t4604 - t4507 * t4603 - t4509 * t4602) * MDP(11) + ((-t4801 * t4982 + t4946) * MDP(3) + (-t4800 * t4982 - t4947) * MDP(4)) * t4322 + ((-t4804 * t4980 + t4949) * MDP(3) + (-t4803 * t4980 - t4950) * MDP(4)) * t4321 + ((-t4807 * t4978 + t4952) * MDP(3) + (-t4806 * t4978 - t4953) * MDP(4)) * t4320 + ((-t4810 * t4976 + t4955) * MDP(3) + (-t4809 * t4976 - t4956) * MDP(4)) * t4319) * t4494;];
taucX  = t1;
