% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR8V1G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d2,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x15]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-09-20 23:03
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V1G3A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V1G3A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-09-20 23:01:13
% EndTime: 2020-09-20 23:01:38
% DurationCPUTime: 26.17s
% Computational Cost: add. (106875->629), mult. (255319->1329), div. (10220->22), fcn. (198857->30), ass. (0->602)
t1823 = sin(pkin(6));
t1825 = cos(pkin(6));
t1840 = sin(qJ(2,1));
t1846 = cos(qJ(2,1));
t1826 = cos(pkin(3));
t2214 = t1826 * t1846;
t2217 = t1826 * t1840;
t1845 = cos(qJ(3,1));
t2297 = pkin(2) * t1845;
t1701 = pkin(5) * (t1823 * t1846 + t1825 * t2217) + (-t1823 * t1840 + t1825 * t2214) * t2297;
t1839 = sin(qJ(3,1));
t2198 = t1839 * t1840;
t1824 = sin(pkin(3));
t2226 = t1824 * t1845;
t1906 = t1826 * t2198 + t2226;
t2197 = t1839 * t1846;
t1716 = t1823 * t2197 + t1825 * t1906;
t1851 = xP(4);
t1800 = sin(t1851);
t1801 = cos(t1851);
t1855 = koppelP(1,2);
t1859 = koppelP(1,1);
t1770 = t1800 * t1859 + t1801 * t1855;
t1774 = -t1800 * t1855 + t1801 * t1859;
t1834 = legFrame(1,2);
t1795 = sin(t1834);
t1799 = cos(t1834);
t1847 = xDP(4);
t1849 = xDP(2);
t1850 = xDP(1);
t1680 = (-t1770 * t1847 + t1850) * t1799 - t1795 * (t1774 * t1847 + t1849);
t1848 = xDP(3);
t2230 = t1823 * t1848;
t1672 = t1680 * t1825 - t2230;
t2213 = t1826 * t1848;
t1660 = ((-t1680 * t2217 - t1846 * t1848) * t1825 - (t1680 * t1846 - t1840 * t2213) * t1823) * t1839 - t1672 * t2226;
t2195 = t1840 * t1845;
t1779 = pkin(2) * t2195 - t1846 * pkin(5);
t2218 = t1826 * t1839;
t2096 = pkin(2) * t2218 + t1779 * t1824;
t2320 = 0.1e1 / t2096;
t2261 = t1660 * t2320;
t1787 = t1848 * t1825;
t1676 = t1680 * t1823 + t1787;
t1644 = -(t1672 * t2214 - t1676 * t1840) * t2297 - (t1672 * t2217 + t1846 * t1676) * pkin(5);
t2321 = 0.1e1 / t2096 ^ 2;
t2273 = t1644 * t2321;
t2049 = t2261 * t2273;
t1657 = t1660 ^ 2;
t2265 = t1657 * t2321;
t2146 = t2320 * t2265;
t1820 = 0.1e1 / t1845 ^ 2;
t2231 = t1820 * t1839;
t2324 = (t1701 * t2146 - 0.2e1 * t1716 * t2049) * t2231;
t1838 = sin(qJ(2,2));
t1844 = cos(qJ(2,2));
t2215 = t1826 * t1844;
t2219 = t1826 * t1838;
t1843 = cos(qJ(3,2));
t2298 = pkin(2) * t1843;
t1700 = pkin(5) * (t1823 * t1844 + t1825 * t2219) + (-t1823 * t1838 + t1825 * t2215) * t2298;
t1837 = sin(qJ(3,2));
t2202 = t1837 * t1838;
t2227 = t1824 * t1843;
t1907 = t1826 * t2202 + t2227;
t2201 = t1837 * t1844;
t1715 = t1823 * t2201 + t1825 * t1907;
t1854 = koppelP(2,2);
t1858 = koppelP(2,1);
t1769 = t1800 * t1858 + t1801 * t1854;
t1773 = -t1800 * t1854 + t1801 * t1858;
t1833 = legFrame(2,2);
t1794 = sin(t1833);
t1798 = cos(t1833);
t1679 = (-t1769 * t1847 + t1850) * t1798 - t1794 * (t1773 * t1847 + t1849);
t1671 = t1679 * t1825 - t2230;
t1659 = ((-t1679 * t2219 - t1844 * t1848) * t1825 - (t1679 * t1844 - t1838 * t2213) * t1823) * t1837 - t1671 * t2227;
t2199 = t1838 * t1843;
t1778 = pkin(2) * t2199 - t1844 * pkin(5);
t2220 = t1826 * t1837;
t2097 = pkin(2) * t2220 + t1778 * t1824;
t2318 = 0.1e1 / t2097;
t2262 = t1659 * t2318;
t1675 = t1679 * t1823 + t1787;
t1643 = -(t1671 * t2215 - t1675 * t1838) * t2298 - (t1671 * t2219 + t1844 * t1675) * pkin(5);
t2319 = 0.1e1 / t2097 ^ 2;
t2275 = t1643 * t2319;
t2050 = t2262 * t2275;
t1656 = t1659 ^ 2;
t2267 = t1656 * t2319;
t2149 = t2318 * t2267;
t1816 = 0.1e1 / t1843 ^ 2;
t2233 = t1816 * t1837;
t2323 = (t1700 * t2149 - 0.2e1 * t1715 * t2050) * t2233;
t1836 = sin(qJ(2,3));
t1842 = cos(qJ(2,3));
t2216 = t1826 * t1842;
t2221 = t1826 * t1836;
t1841 = cos(qJ(3,3));
t2299 = pkin(2) * t1841;
t1699 = pkin(5) * (t1823 * t1842 + t1825 * t2221) + (-t1823 * t1836 + t1825 * t2216) * t2299;
t1835 = sin(qJ(3,3));
t2206 = t1835 * t1836;
t2228 = t1824 * t1841;
t1908 = t1826 * t2206 + t2228;
t2205 = t1835 * t1842;
t1714 = t1823 * t2205 + t1825 * t1908;
t1853 = koppelP(3,2);
t1857 = koppelP(3,1);
t1768 = t1800 * t1857 + t1801 * t1853;
t1772 = -t1800 * t1853 + t1801 * t1857;
t1832 = legFrame(3,2);
t1793 = sin(t1832);
t1797 = cos(t1832);
t1678 = (-t1768 * t1847 + t1850) * t1797 - t1793 * (t1772 * t1847 + t1849);
t1670 = t1678 * t1825 - t2230;
t1658 = ((-t1678 * t2221 - t1842 * t1848) * t1825 - (t1678 * t1842 - t1836 * t2213) * t1823) * t1835 - t1670 * t2228;
t2203 = t1836 * t1841;
t1777 = pkin(2) * t2203 - t1842 * pkin(5);
t2222 = t1826 * t1835;
t2098 = pkin(2) * t2222 + t1777 * t1824;
t2316 = 0.1e1 / t2098;
t2263 = t1658 * t2316;
t1674 = t1678 * t1823 + t1787;
t1642 = -(t1670 * t2216 - t1674 * t1836) * t2299 - (t1670 * t2221 + t1842 * t1674) * pkin(5);
t2317 = 0.1e1 / t2098 ^ 2;
t2277 = t1642 * t2317;
t2051 = t2263 * t2277;
t1655 = t1658 ^ 2;
t2269 = t1655 * t2317;
t2152 = t2316 * t2269;
t1812 = 0.1e1 / t1841 ^ 2;
t2235 = t1812 * t1835;
t2322 = (t1699 * t2152 - 0.2e1 * t1714 * t2051) * t2235;
t2268 = t1655 * t1812;
t1646 = t2317 * t2268;
t1634 = t1646 - 0.2e1 * t2269;
t1810 = t1841 ^ 2;
t1811 = 0.1e1 / t1841;
t1813 = t1811 / t1810;
t1930 = (0.2e1 * t1810 - 0.1e1) * t1813 * t2051;
t2257 = t2316 * t1811;
t2333 = t1699 * t2257;
t2325 = t1634 * t2333 + 0.2e1 * t1714 * t1930;
t2266 = t1656 * t1816;
t1647 = t2319 * t2266;
t1635 = t1647 - 0.2e1 * t2267;
t1814 = t1843 ^ 2;
t1815 = 0.1e1 / t1843;
t1817 = t1815 / t1814;
t1929 = (0.2e1 * t1814 - 0.1e1) * t1817 * t2050;
t2254 = t2318 * t1815;
t2332 = t1700 * t2254;
t2326 = t1635 * t2332 + 0.2e1 * t1715 * t1929;
t2264 = t1657 * t1820;
t1648 = t2321 * t2264;
t1636 = t1648 - 0.2e1 * t2265;
t1818 = t1845 ^ 2;
t1819 = 0.1e1 / t1845;
t1821 = t1819 / t1818;
t1928 = (0.2e1 * t1818 - 0.1e1) * t1821 * t2049;
t2251 = t2320 * t1819;
t2331 = t1701 * t2251;
t2327 = t1636 * t2331 + 0.2e1 * t1716 * t1928;
t2182 = pkin(5) * t2263;
t2094 = t1835 * t2182;
t2278 = t1642 * t2316;
t1627 = (t2094 - t2278) * t1811;
t1862 = 0.1e1 / pkin(2);
t2255 = t2316 * t1862;
t2122 = t1811 * t2255;
t1975 = t1642 * t1824 * t2122;
t2112 = t1824 * t2203;
t2113 = t1824 * t2206;
t2130 = t1714 * t2257;
t2212 = t1826 * t1862;
t2256 = t2316 * t1835;
t1822 = t1847 ^ 2;
t2306 = t1822 * (-t1768 * t1793 + t1772 * t1797);
t1602 = t2130 * t2306 + (-(t1826 * t1627 + (pkin(2) * (t1824 * t1842 * t2263 + t2212 * t2278) * t1810 - (t1642 * t2256 - t2182) * t2112) * t1811) * t2316 * t2263 + (-t1842 * t1975 + (t2113 + (t1811 - t1841) * t1826) * t2263) * t2277) * t1812;
t2295 = t1602 * t2316;
t2177 = t1699 * t2295;
t2181 = pkin(5) * t2262;
t2093 = t1837 * t2181;
t2276 = t1643 * t2318;
t1628 = (t2093 - t2276) * t1815;
t2252 = t2318 * t1862;
t2119 = t1815 * t2252;
t1973 = t1643 * t1824 * t2119;
t2110 = t1824 * t2199;
t2111 = t1824 * t2202;
t2129 = t1715 * t2254;
t2253 = t2318 * t1837;
t2307 = t1822 * (-t1769 * t1794 + t1773 * t1798);
t1603 = t2129 * t2307 + (-(t1826 * t1628 + (pkin(2) * (t1824 * t1844 * t2262 + t2212 * t2276) * t1814 - (t1643 * t2253 - t2181) * t2110) * t1815) * t2318 * t2262 + (-t1844 * t1973 + (t2111 + (t1815 - t1843) * t1826) * t2262) * t2275) * t1816;
t2294 = t1603 * t2318;
t2175 = t1700 * t2294;
t2180 = pkin(5) * t2261;
t2092 = t1839 * t2180;
t2274 = t1644 * t2320;
t1629 = (t2092 - t2274) * t1819;
t2249 = t2320 * t1862;
t2116 = t1819 * t2249;
t1971 = t1644 * t1824 * t2116;
t2108 = t1824 * t2195;
t2109 = t1824 * t2198;
t2128 = t1716 * t2251;
t2250 = t2320 * t1839;
t2308 = t1822 * (-t1770 * t1795 + t1774 * t1799);
t1604 = t2128 * t2308 + (-(t1826 * t1629 + (pkin(2) * (t1824 * t1846 * t2261 + t2212 * t2274) * t1818 - (t1644 * t2250 - t2180) * t2108) * t1819) * t2320 * t2261 + (-t1846 * t1971 + (t2109 + (t1819 - t1845) * t1826) * t2261) * t2273) * t1820;
t2293 = t1604 * t2320;
t2173 = t1701 * t2293;
t1852 = koppelP(4,2);
t1856 = koppelP(4,1);
t1767 = t1800 * t1856 + t1801 * t1852;
t1771 = -t1800 * t1852 + t1801 * t1856;
t1831 = legFrame(4,2);
t1792 = sin(t1831);
t1796 = cos(t1831);
t1677 = (-t1767 * t1847 + t1850) * t1796 - t1792 * (t1771 * t1847 + t1849);
t1669 = t1677 * t1825 - t2230;
t1673 = t1677 * t1823 + t1787;
t1828 = sin(qJ(2,4));
t1830 = cos(qJ(2,4));
t2223 = t1826 * t1830;
t2224 = t1826 * t1828;
t1829 = cos(qJ(3,4));
t2300 = pkin(2) * t1829;
t1638 = -(t1669 * t2223 - t1828 * t1673) * t2300 - pkin(5) * (t1669 * t2224 + t1673 * t1830);
t1804 = 0.1e1 / t1829;
t1860 = pkin(5) ^ 2;
t1861 = pkin(2) ^ 2;
t1827 = sin(qJ(3,4));
t2238 = t1804 * t1827;
t2208 = t1828 * t1829;
t1775 = pkin(2) * t2208 - t1830 * pkin(5);
t2225 = t1826 * t1827;
t2099 = pkin(2) * t2225 + t1775 * t1824;
t2314 = 0.1e1 / t2099;
t2126 = t2314 * t2238;
t2229 = t1824 * t1829;
t1654 = ((-t1677 * t2224 - t1830 * t1848) * t1825 - (t1677 * t1830 - t1828 * t2213) * t1823) * t1827 - t1669 * t2229;
t2270 = t1654 * t2314;
t1621 = -pkin(5) * t1638 * t2126 + (t1804 * t1860 + t1829 * t1861) * t2270;
t2183 = pkin(5) * t2270;
t2095 = t1827 * t2183;
t2283 = t1638 * t2314;
t1625 = (t2095 - t2283) * t1804;
t1776 = pkin(5) * t1828 + t1830 * t2300;
t2301 = pkin(2) * t1824;
t1934 = -t1775 * t1826 + t1827 * t2301;
t1681 = t1825 * t1776 + t1934 * t1823;
t1661 = t1681 * t1796 + t1792 * t2099;
t1662 = -t1681 * t1792 + t1796 * t2099;
t2260 = t2314 * t1804;
t2315 = 0.1e1 / t2099 ^ 2;
t2282 = t1638 * t2315;
t1609 = -t1625 * t1804 * t2282 + (t1621 * t1654 * t2260 + (-t1661 * t1771 - t1662 * t1767) * t1822) * t2314;
t2288 = t1609 * t2314;
t2236 = t1811 * t1835;
t2123 = t2316 * t2236;
t1622 = -pkin(5) * t1642 * t2123 + (t1811 * t1860 + t1841 * t1861) * t2263;
t1780 = pkin(5) * t1836 + t1842 * t2299;
t1933 = -t1777 * t1826 + t1835 * t2301;
t1683 = t1825 * t1780 + t1933 * t1823;
t1663 = t1683 * t1797 + t1793 * t2098;
t1664 = -t1683 * t1793 + t1797 * t2098;
t1610 = -t1627 * t1811 * t2277 + (t1622 * t1658 * t2257 + (-t1663 * t1772 - t1664 * t1768) * t1822) * t2316;
t2287 = t1610 * t2316;
t2234 = t1815 * t1837;
t2120 = t2318 * t2234;
t1623 = -pkin(5) * t1643 * t2120 + (t1815 * t1860 + t1843 * t1861) * t2262;
t1781 = pkin(5) * t1838 + t1844 * t2298;
t1932 = -t1778 * t1826 + t1837 * t2301;
t1684 = t1825 * t1781 + t1823 * t1932;
t1665 = t1684 * t1798 + t1794 * t2097;
t1666 = -t1684 * t1794 + t1798 * t2097;
t1611 = -t1628 * t1815 * t2275 + (t1623 * t1659 * t2254 + (-t1665 * t1773 - t1666 * t1769) * t1822) * t2318;
t2286 = t1611 * t2318;
t2232 = t1819 * t1839;
t2117 = t2320 * t2232;
t1624 = -pkin(5) * t1644 * t2117 + (t1819 * t1860 + t1845 * t1861) * t2261;
t1782 = pkin(5) * t1840 + t1846 * t2297;
t1931 = -t1779 * t1826 + t1839 * t2301;
t1685 = t1825 * t1782 + t1823 * t1931;
t1667 = t1685 * t1799 + t1795 * t2096;
t1668 = -t1685 * t1795 + t1799 * t2096;
t1612 = -t1629 * t1819 * t2273 + (t1624 * t1660 * t2251 + (-t1667 * t1774 - t1668 * t1770) * t1822) * t2320;
t2285 = t1612 * t2320;
t2313 = t1638 ^ 2 * t2315;
t2312 = t1642 ^ 2 * t2317;
t2311 = t1643 ^ 2 * t2319;
t2310 = t1644 ^ 2 * t2321;
t1697 = -pkin(5) * (t1823 * t1830 + t1825 * t2224) + (t1823 * t1828 - t1825 * t2223) * t2300;
t2211 = t1827 * t1828;
t1909 = t1826 * t2211 + t2229;
t2210 = t1827 * t1830;
t1710 = t1823 * t2210 + t1825 * t1909;
t2006 = 0.2e1 * t2270 * t2282;
t1938 = t1710 * t2006;
t1653 = t1654 ^ 2;
t2272 = t1653 * t2315;
t2155 = t2314 * t2272;
t1805 = 0.1e1 / t1829 ^ 2;
t2237 = t1805 * t1827;
t2309 = (t1697 * t2155 + t1938) * t2237;
t2305 = t1822 * (-t1767 * t1792 + t1771 * t1796);
t1711 = t1823 * t1908 - t1825 * t2205;
t2304 = 0.2e1 * t1711;
t1712 = t1823 * t1907 - t1825 * t2201;
t2303 = 0.2e1 * t1712;
t1713 = t1823 * t1906 - t1825 * t2197;
t2302 = 0.2e1 * t1713;
t1803 = t1829 ^ 2;
t2258 = t2314 * t1862;
t2125 = t1804 * t2258;
t1980 = t1638 * t1824 * t2125;
t2114 = t1824 * t2208;
t2115 = t1824 * t2211;
t2131 = t1710 * t2260;
t2259 = t2314 * t1827;
t1601 = t2131 * t2305 + (-(t1826 * t1625 + (pkin(2) * (t1824 * t1830 * t2270 + t2212 * t2283) * t1803 - (t1638 * t2259 - t2183) * t2114) * t1804) * t2314 * t2270 + (-t1830 * t1980 + (t2115 + (t1804 - t1829) * t1826) * t2270) * t2282) * t1805;
t2296 = t1601 * t2314;
t2127 = t2314 * t2258;
t2048 = t1654 * t2127;
t1605 = (-t1826 * t1621 * t2048 - (-t1827 * t1775 * t1980 + t1826 * (-t1804 * t2095 + t1829 * t2283)) * t1638 * t2127) * t1805 - t1697 * t2125 * t2305;
t2292 = t1605 * t2314;
t2124 = t2316 * t2255;
t2044 = t1658 * t2124;
t1606 = (-t1826 * t1622 * t2044 - (-t1835 * t1777 * t1975 + t1826 * (-t1811 * t2094 + t1841 * t2278)) * t1642 * t2124) * t1812 + t1699 * t2122 * t2306;
t2291 = t1606 * t2316;
t2121 = t2318 * t2252;
t2043 = t1659 * t2121;
t1607 = (-t1826 * t1623 * t2043 - (-t1837 * t1778 * t1973 + t1826 * (-t1815 * t2093 + t1843 * t2276)) * t1643 * t2121) * t1816 + t1700 * t2119 * t2307;
t2290 = t1607 * t2318;
t2118 = t2320 * t2249;
t2042 = t1660 * t2118;
t1608 = (-t1826 * t1624 * t2042 - (-t1839 * t1779 * t1971 + t1826 * (-t1819 * t2092 + t1845 * t2274)) * t1644 * t2118) * t1820 + t1701 * t2116 * t2308;
t2289 = t1608 * t2320;
t2284 = t2314 * t2313;
t2281 = t2316 * t2312;
t2280 = t2318 * t2311;
t2279 = t2320 * t2310;
t2271 = t1653 * t1805;
t2240 = t1800 * t1822;
t2239 = t1801 * t1822;
t2209 = t1828 * t1601;
t2207 = t1830 * t1601;
t2204 = t1836 * t1602;
t2200 = t1838 * t1603;
t2196 = t1840 * t1604;
t2194 = t1842 * t1602;
t2193 = t1844 * t1603;
t2192 = t1846 * t1604;
t1597 = t1826 * t1605 + t1824 * t2207;
t1645 = t2315 * t2271;
t1863 = 0.1e1 / pkin(2) ^ 2;
t2163 = t1863 * t2313;
t2061 = t1805 * t2163;
t1626 = t1645 + t2061;
t1905 = -0.2e1 * t1638 * t1830 * t2048;
t2191 = t1597 * t1829 - t1605 * t2115 + (-t1626 * t2208 + t1905 * t2237) * t1824 - t2061 * t2225;
t2190 = -t1597 * t1827 - t1605 * t2114 + (t1626 * t2211 + t1804 * t1905) * t1824 - t1804 * t1826 * t2163;
t1598 = t1826 * t1606 + t1824 * t2194;
t2161 = t1863 * t2312;
t2058 = t1812 * t2161;
t1630 = t1646 + t2058;
t1903 = -0.2e1 * t1642 * t1842 * t2044;
t2189 = t1598 * t1841 - t1606 * t2113 + (-t1630 * t2203 + t1903 * t2235) * t1824 - t2058 * t2222;
t1599 = t1826 * t1607 + t1824 * t2193;
t2159 = t1863 * t2311;
t2055 = t1816 * t2159;
t1631 = t1647 + t2055;
t1902 = -0.2e1 * t1643 * t1844 * t2043;
t2188 = t1599 * t1843 - t1607 * t2111 + (-t1631 * t2199 + t1902 * t2233) * t1824 - t2055 * t2220;
t1600 = t1826 * t1608 + t1824 * t2192;
t2157 = t1863 * t2310;
t2052 = t1820 * t2157;
t1632 = t1648 + t2052;
t1901 = -0.2e1 * t1644 * t1846 * t2042;
t2187 = t1600 * t1845 - t1608 * t2109 + (-t1632 * t2195 + t1901 * t2231) * t1824 - t2052 * t2218;
t2186 = -t1598 * t1835 - t1606 * t2112 + (t1630 * t2206 + t1811 * t1903) * t1824 - t1811 * t1826 * t2161;
t2185 = -t1599 * t1837 - t1607 * t2110 + (t1631 * t2202 + t1815 * t1902) * t1824 - t1815 * t1826 * t2159;
t2184 = -t1600 * t1839 - t1608 * t2108 + (t1632 * t2198 + t1819 * t1901) * t1824 - t1826 * t1819 * t2157;
t2179 = t1697 * t2296;
t2178 = t1601 * t2259;
t2176 = t1602 * t2256;
t2174 = t1603 * t2253;
t2172 = t1604 * t2250;
t2171 = t1710 * t2292;
t2170 = t1714 * t2291;
t2169 = t1715 * t2290;
t2168 = t1716 * t2289;
t2167 = t1830 * t2288;
t2166 = t1842 * t2287;
t2165 = t1844 * t2286;
t2164 = t1846 * t2285;
t2162 = t1805 * t2284;
t2160 = t1812 * t2281;
t2158 = t1816 * t2280;
t2156 = t1820 * t2279;
t2154 = t1828 * t2271;
t2153 = t1830 * t2271;
t2151 = t1836 * t2268;
t2150 = t1842 * t2268;
t2148 = t1838 * t2266;
t2147 = t1844 * t2266;
t2145 = t1840 * t2264;
t2144 = t1846 * t2264;
t1942 = t1767 * t1796 + t1792 * t1771;
t2140 = t1697 * t1942 * t2314;
t2139 = t1697 * t2260;
t1698 = (t1823 * t2223 + t1825 * t1828) * t2300 + (t1823 * t2224 - t1825 * t1830) * pkin(5);
t2138 = t1698 * t2260;
t1702 = (t1823 * t2216 + t1825 * t1836) * t2299 + (t1823 * t2221 - t1825 * t1842) * pkin(5);
t2134 = t1702 * t2257;
t1703 = (t1823 * t2215 + t1825 * t1838) * t2298 + (t1823 * t2219 - t1825 * t1844) * pkin(5);
t2133 = t1703 * t2254;
t1704 = (t1823 * t2214 + t1825 * t1840) * t2297 + (t1823 * t2217 - t1825 * t1846) * pkin(5);
t2132 = t1704 * t2251;
t2107 = t2314 * t2191;
t2106 = t2314 * t2190;
t2105 = t2318 * t2185;
t2104 = t2189 * t2316;
t2103 = t2188 * t2318;
t2102 = t2187 * t2320;
t2101 = t2186 * t2316;
t2100 = t2184 * t2320;
t2091 = t1601 * t2131;
t2090 = t1710 * t2178;
t2089 = t1601 * t2126;
t2088 = t1602 * t2130;
t2087 = t1714 * t2176;
t2086 = t1602 * t2123;
t2085 = t1603 * t2129;
t2084 = t1715 * t2174;
t2083 = t1603 * t2120;
t2082 = t1604 * t2128;
t2081 = t1716 * t2172;
t2080 = t1604 * t2117;
t2079 = t1605 * t2126;
t2078 = t1606 * t2123;
t2077 = t1607 * t2120;
t2076 = t1608 * t2117;
t2075 = t1609 * t2138;
t2074 = t1710 * t2167;
t2073 = t1609 * t1828 * t2260;
t2072 = t1610 * t2134;
t2071 = t1714 * t2166;
t2070 = t1610 * t1836 * t2257;
t2069 = t1611 * t2133;
t2068 = t1715 * t2165;
t2067 = t1611 * t1838 * t2254;
t2066 = t1612 * t2132;
t2065 = t1716 * t2164;
t2064 = t1612 * t1840 * t2251;
t2063 = t1710 * t2162;
t1806 = t1804 / t1803;
t2062 = t1806 * t1827 * t2284;
t2060 = t1714 * t2160;
t2059 = t1813 * t1835 * t2281;
t2057 = t1715 * t2158;
t2056 = t1817 * t1837 * t2280;
t2054 = t1716 * t2156;
t2053 = t1821 * t1839 * t2279;
t2041 = t1799 * t2331;
t2040 = t1797 * t2333;
t2039 = t1798 * t2332;
t2038 = t1804 * t2140;
t2037 = t1792 * t2139;
t2036 = t1796 * t2139;
t1941 = t1768 * t1797 + t1793 * t1772;
t2035 = t1941 * t2333;
t2034 = t1793 * t2333;
t1940 = t1769 * t1798 + t1794 * t1773;
t2032 = t1940 * t2332;
t2031 = t1794 * t2332;
t1939 = t1770 * t1799 + t1795 * t1774;
t2029 = t1939 * t2331;
t2028 = t1795 * t2331;
t2026 = t1601 * t2140;
t1709 = t1823 * t1909 - t1825 * t2210;
t2025 = t1709 * t2167;
t2024 = t1709 * t1601 * t2260;
t2022 = t1711 * t2166;
t2021 = t1711 * t1602 * t2257;
t2020 = t1712 * t2165;
t2019 = t1712 * t1603 * t2254;
t2018 = t1713 * t2164;
t2017 = t1713 * t1604 * t2251;
t2013 = t1797 * t2177;
t2012 = t1798 * t2175;
t2011 = t1799 * t2173;
t2010 = 0.2e1 * t2090;
t2009 = 0.2e1 * t2087;
t2008 = 0.2e1 * t2084;
t2007 = 0.2e1 * t2081;
t2005 = t1697 * t2089;
t2004 = t1699 * t2086;
t2003 = t1700 * t2083;
t2002 = t1701 * t2080;
t2001 = t1710 * t2079;
t2000 = t1714 * t2078;
t1999 = t1715 * t2077;
t1998 = t1716 * t2076;
t1997 = t1609 * t2038;
t1996 = t1609 * t2037;
t1995 = t1609 * t2036;
t1994 = t1710 * t2073;
t1993 = t1610 * t2040;
t1992 = t1610 * t2035;
t1991 = t1610 * t2034;
t1990 = t1714 * t2070;
t1989 = t1611 * t2039;
t1988 = t1611 * t2032;
t1987 = t1611 * t2031;
t1986 = t1715 * t2067;
t1985 = t1612 * t2041;
t1984 = t1612 * t2029;
t1983 = t1612 * t2028;
t1982 = t1716 * t2064;
t1981 = t1710 * t2062;
t1979 = t1714 * t2059;
t1978 = t1715 * t2056;
t1977 = t1716 * t2053;
t1970 = t1804 * t2025;
t1969 = t1942 * t2074;
t1968 = t1942 * t2091;
t1967 = t1811 * t2022;
t1966 = t1815 * t2020;
t1965 = t1819 * t2018;
t1964 = t1941 * t2071;
t1963 = t1941 * t2088;
t1962 = t1940 * t2068;
t1961 = t1940 * t2085;
t1960 = t1939 * t2065;
t1959 = t1939 * t2082;
t1958 = t1792 * t2074;
t1957 = t1792 * t2091;
t1956 = t1793 * t2071;
t1955 = t1793 * t2088;
t1954 = t1794 * t2068;
t1953 = t1794 * t2085;
t1952 = t1795 * t2065;
t1951 = t1795 * t2082;
t1950 = t1796 * t2074;
t1949 = t1796 * t2091;
t1948 = t1797 * t2071;
t1947 = t1797 * t2088;
t1946 = t1798 * t2068;
t1945 = t1798 * t2085;
t1944 = t1799 * t2065;
t1943 = t1799 * t2082;
t1927 = t1804 * t1969;
t1926 = t1811 * t1964;
t1925 = t1815 * t1962;
t1924 = t1819 * t1960;
t1923 = t1804 * t1958;
t1922 = t1811 * t1956;
t1921 = t1815 * t1954;
t1920 = t1819 * t1952;
t1919 = t1804 * t1950;
t1918 = t1811 * t1948;
t1917 = t1815 * t1946;
t1916 = t1819 * t1944;
t1904 = (0.2e1 * t1803 - 0.1e1) * t1806 * t2006;
t1897 = t1710 * t1904;
t1735 = t2314 * t2315;
t1893 = -t1735 * t2153 - t2209 * t2314;
t1892 = -t1735 * t2154 + t2207 * t2314;
t1739 = t2316 * t2317;
t1891 = -t1739 * t2150 - t2204 * t2316;
t1890 = -t1739 * t2151 + t2194 * t2316;
t1742 = t2318 * t2319;
t1889 = -t1742 * t2147 - t2200 * t2318;
t1888 = -t1742 * t2148 + t2193 * t2318;
t1745 = t2320 * t2321;
t1887 = -t1745 * t2144 - t2196 * t2320;
t1886 = -t1745 * t2145 + t2192 * t2320;
t1633 = t1645 - 0.2e1 * t2272;
t1884 = -t1633 * t2139 + t1897;
t1809 = t1839 ^ 2;
t1808 = t1837 ^ 2;
t1807 = t1835 ^ 2;
t1802 = t1827 ^ 2;
t1766 = t2108 + t2218;
t1765 = t1826 * t1845 - t2109;
t1764 = t2110 + t2220;
t1763 = t1843 * t1826 - t2111;
t1762 = t2112 + t2222;
t1761 = t1841 * t1826 - t2113;
t1760 = t2114 + t2225;
t1759 = t1829 * t1826 - t2115;
t1688 = -t1823 * t1782 + t1825 * t1931;
t1687 = -t1823 * t1781 + t1825 * t1932;
t1686 = -t1823 * t1780 + t1933 * t1825;
t1682 = -t1823 * t1776 + t1934 * t1825;
t1652 = (-t1667 * t1770 + t1668 * t1774) * t2320;
t1651 = (-t1665 * t1769 + t1666 * t1773) * t2318;
t1650 = (-t1663 * t1768 + t1664 * t1772) * t2316;
t1649 = (-t1661 * t1767 + t1662 * t1771) * t2314;
t1 = [t1661 * t2288 + t1663 * t2287 + t1665 * t2286 + t1667 * t2285, -t1943 - t1945 - t1947 - t1949, (t1661 * t1892 + t1663 * t1890 + t1665 * t1888 + t1667 * t1886 - t1916 - t1917 - t1918 - t1919) * t1824, (t1661 * t1893 + t1663 * t1891 + t1665 * t1889 + t1667 * t1887 + t1796 * t1994 + t1797 * t1990 + t1798 * t1986 + t1799 * t1982) * t1824, -t1802 * t1949 - t1807 * t1947 - t1808 * t1945 - t1809 * t1943 + (-t1796 * t2309 + t1797 * t2322 + t1798 * t2323 + t1799 * t2324) * t1862, -0.2e1 * t1796 * t2090 - 0.2e1 * t1797 * t2087 - 0.2e1 * t1798 * t2084 - 0.2e1 * t1799 * t2081 + (-t1884 * t1796 - t1797 * t2325 - t2326 * t1798 - t2327 * t1799) * t1862, -t1796 * t2001 - t1797 * t2000 - t1798 * t1999 - t1799 * t1998 + (-t1796 * t2063 - t1797 * t2060 - t1798 * t2057 - t1799 * t2054) * t1863 + (t1796 * t2005 - t2011 * t2232 - t2012 * t2234 - t2013 * t2236) * t1862, -t1796 * t2171 - t1797 * t2170 - t1798 * t2169 - t1799 * t2168 + (t1796 * t1981 + t1797 * t1979 + t1798 * t1978 + t1799 * t1977) * t1863 + (t1796 * t2179 - t2011 - t2012 - t2013) * t1862, (t1605 * t2036 - t1606 * t2040 - t1607 * t2039 - t1608 * t2041) * t1862, t1667 * t2102 + t1665 * t2103 + t1663 * t2104 + t1661 * t2107 + (t1759 * t1995 - t1761 * t1993 - t1763 * t1989 - t1765 * t1985) * t1862 + (-t1944 - t1946 - t1948 - t1950) * t1824, t1667 * t2100 + t1665 * t2105 + t1663 * t2101 + t1661 * t2106 + (-t1760 * t1995 + t1762 * t1993 + t1764 * t1989 + t1766 * t1985) * t1862 + (t1827 * t1919 + t1835 * t1918 + t1837 * t1917 + t1839 * t1916) * t1824, 0, -t2239, t2240, 0; t1662 * t2288 + t1664 * t2287 + t1666 * t2286 + t1668 * t2285, t1951 + t1953 + t1955 + t1957, (t1662 * t1892 + t1664 * t1890 + t1666 * t1888 + t1668 * t1886 + t1920 + t1921 + t1922 + t1923) * t1824, (t1662 * t1893 + t1664 * t1891 + t1666 * t1889 + t1668 * t1887 - t1792 * t1994 - t1793 * t1990 - t1794 * t1986 - t1795 * t1982) * t1824, t1802 * t1957 + t1807 * t1955 + t1808 * t1953 + t1809 * t1951 + (t1792 * t2309 - t1793 * t2322 - t1794 * t2323 - t1795 * t2324) * t1862, t1792 * t2010 + t1793 * t2009 + t1794 * t2008 + t1795 * t2007 + (t1884 * t1792 + t2325 * t1793 + t2326 * t1794 + t2327 * t1795) * t1862, t1792 * t2001 + t1793 * t2000 + t1794 * t1999 + t1795 * t1998 + (t1792 * t2063 + t1793 * t2060 + t1794 * t2057 + t1795 * t2054) * t1863 + (-t1792 * t2005 + t1793 * t2004 + t1794 * t2003 + t1795 * t2002) * t1862, t1792 * t2171 + t1793 * t2170 + t1794 * t2169 + t1795 * t2168 + (-t1792 * t1981 - t1793 * t1979 - t1794 * t1978 - t1795 * t1977) * t1863 + (-t1792 * t2179 + t1793 * t2177 + t1794 * t2175 + t1795 * t2173) * t1862, (-t1605 * t2037 + t1606 * t2034 + t1607 * t2031 + t1608 * t2028) * t1862, t1668 * t2102 + t1666 * t2103 + t1664 * t2104 + t1662 * t2107 + (-t1759 * t1996 + t1761 * t1991 + t1763 * t1987 + t1765 * t1983) * t1862 + (t1952 + t1954 + t1956 + t1958) * t1824, t1668 * t2100 + t1666 * t2105 + t1664 * t2101 + t1662 * t2106 + (t1760 * t1996 - t1762 * t1991 - t1764 * t1987 - t1766 * t1983) * t1862 + (-t1827 * t1923 - t1835 * t1922 - t1837 * t1921 - t1839 * t1920) * t1824, 0, -t2240, -t2239, 0; t1682 * t2288 + t1686 * t2287 + t1687 * t2286 + t1688 * t2285, t2017 + t2019 + t2021 + t2024, (t1682 * t1892 + t1686 * t1890 + t1687 * t1888 + t1688 * t1886 + t1965 + t1966 + t1967 + t1970) * t1824, (t1682 * t1893 + t1686 * t1891 + t1687 * t1889 + t1688 * t1887 - t1709 * t2073 - t1711 * t2070 - t1712 * t2067 - t1713 * t2064) * t1824, t1802 * t2024 + t1807 * t2021 + t1808 * t2019 + t1809 * t2017 + ((-t1704 * t2146 + t2049 * t2302) * t2231 + (-t1703 * t2149 + t2050 * t2303) * t2233 + (-t1702 * t2152 + t2051 * t2304) * t2235 + (-t1698 * t2155 + t1709 * t2006) * t2237) * t1862, 0.2e1 * t1709 * t2178 + t2176 * t2304 + t2174 * t2303 + t2172 * t2302 + (t1633 * t2138 + t1634 * t2134 + t1635 * t2133 + t1636 * t2132 + t1709 * t1904 + t1928 * t2302 + t1929 * t2303 + t1930 * t2304) * t1862, t1709 * t2079 + t1711 * t2078 + t1712 * t2077 + t1713 * t2076 + (t1709 * t2162 + t1711 * t2160 + t1712 * t2158 + t1713 * t2156) * t1863 + (t1698 * t2089 + t1702 * t2086 + t1703 * t2083 + t1704 * t2080) * t1862, t1709 * t2292 + t1711 * t2291 + t1712 * t2290 + t1713 * t2289 + (-t1709 * t2062 - t1711 * t2059 - t1712 * t2056 - t1713 * t2053) * t1863 + (t1698 * t2296 + t1702 * t2295 + t1703 * t2294 + t1704 * t2293) * t1862, (t1605 * t2138 + t1606 * t2134 + t1607 * t2133 + t1608 * t2132) * t1862, t1688 * t2102 + t1687 * t2103 + t1686 * t2104 + t1682 * t2107 + (t1759 * t2075 + t1761 * t2072 + t1763 * t2069 + t1765 * t2066) * t1862 + (t2018 + t2020 + t2022 + t2025) * t1824, t1688 * t2100 + t1687 * t2105 + t1686 * t2101 + t1682 * t2106 + (-t1760 * t2075 - t1762 * t2072 - t1764 * t2069 - t1766 * t2066) * t1862 + (-t1827 * t1970 - t1835 * t1967 - t1837 * t1966 - t1839 * t1965) * t1824, 0, 0, 0, 0; t1649 * t1609 + t1650 * t1610 + t1651 * t1611 + t1652 * t1612, t1959 + t1961 + t1963 + t1968, (t1927 + t1926 + t1925 + t1924 + (-t2145 * t2321 + t2192) * t1652 + (-t2148 * t2319 + t2193) * t1651 + (-t2151 * t2317 + t2194) * t1650 + (-t2154 * t2315 + t2207) * t1649) * t1824, (-t1942 * t1994 - t1941 * t1990 - t1940 * t1986 - t1939 * t1982 + (-t2144 * t2321 - t2196) * t1652 + (-t2147 * t2319 - t2200) * t1651 + (-t2150 * t2317 - t2204) * t1650 + (-t2153 * t2315 - t2209) * t1649) * t1824, t1802 * t1968 + t1807 * t1963 + t1808 * t1961 + t1809 * t1959 + ((t1938 * t1942 + t2140 * t2272) * t2237 - t1941 * t2322 - t1940 * t2323 - t1939 * t2324) * t1862, t1942 * t2010 + (-t1633 * t2038 + t1897 * t1942) * t1862 + (t2325 * t1862 + t2009) * t1941 + (t2326 * t1862 + t2008) * t1940 + (t2327 * t1862 + t2007) * t1939, t1942 * t2001 + t1941 * t2000 + t1940 * t1999 + t1939 * t1998 + (t1939 * t2054 + t1940 * t2057 + t1941 * t2060 + t1942 * t2063) * t1863 + (t1939 * t2002 + t1940 * t2003 + t1941 * t2004 - t2026 * t2238) * t1862, t1942 * t2171 + t1941 * t2170 + t1940 * t2169 + t1939 * t2168 + (-t1939 * t1977 - t1940 * t1978 - t1941 * t1979 - t1942 * t1981) * t1863 + (t1939 * t2173 + t1940 * t2175 + t1941 * t2177 - t2026) * t1862, (-t1605 * t2038 + t1606 * t2035 + t1607 * t2032 + t1608 * t2029) * t1862, t2187 * t1652 + t2188 * t1651 + t2189 * t1650 + t2191 * t1649 + (-t1759 * t1997 + t1761 * t1992 + t1763 * t1988 + t1765 * t1984) * t1862 + (t1960 + t1962 + t1964 + t1969) * t1824, t2184 * t1652 + t2185 * t1651 + t2186 * t1650 + t2190 * t1649 + (t1760 * t1997 - t1762 * t1992 - t1764 * t1988 - t1766 * t1984) * t1862 + (-t1827 * t1927 - t1835 * t1926 - t1837 * t1925 - t1839 * t1924) * t1824, 0, 0, 0, 0;];
tau_reg  = t1;
