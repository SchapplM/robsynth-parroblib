% Calculate vector of centrifugal and coriolis load on the joints for
% P4PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% taucX [4x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G1A0_coriolisvec_para_pf_slag_vp2: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:10:08
% EndTime: 2020-08-07 11:10:21
% DurationCPUTime: 13.00s
% Computational Cost: add. (56900->577), mult. (108284->1046), div. (5368->13), fcn. (110828->30), ass. (0->410)
t1193 = legFrame(1,3);
t1162 = sin(t1193);
t1166 = cos(t1193);
t1186 = sin(pkin(8));
t1188 = cos(pkin(8));
t1079 = -t1162 * t1186 + t1166 * t1188;
t1083 = t1162 * t1188 + t1166 * t1186;
t1209 = cos(qJ(3,1));
t1152 = pkin(3) * t1209 + pkin(2);
t1210 = cos(qJ(2,1));
t1216 = pkin(7) + pkin(6);
t1155 = t1210 * t1216;
t1204 = sin(qJ(2,1));
t1107 = t1152 * t1204 - t1155;
t1189 = cos(pkin(4));
t1294 = t1216 * t1204;
t1335 = (t1152 * t1210 + t1294) * t1189;
t1032 = -t1079 * t1335 + t1083 * t1107;
t1035 = -t1079 * t1107 - t1083 * t1335;
t1218 = xP(4);
t1177 = sin(t1218);
t1178 = cos(t1218);
t1224 = koppelP(1,2);
t1228 = koppelP(1,1);
t1115 = -t1177 * t1224 + t1178 * t1228;
t1213 = xDP(4);
t1214 = xDP(2);
t1067 = t1115 * t1213 + t1214;
t1111 = t1177 * t1228 + t1178 * t1224;
t1215 = xDP(1);
t1071 = -t1111 * t1213 + t1215;
t1203 = sin(qJ(3,1));
t1308 = t1189 * t1203;
t1119 = t1152 * t1308;
t1231 = 0.1e1 / pkin(3);
t1187 = sin(pkin(4));
t1316 = t1187 * t1209;
t1343 = 0.1e1 / (t1107 * t1316 + t1119) * t1231;
t1007 = (t1032 * t1071 + t1035 * t1067) * t1343;
t1184 = t1209 ^ 2;
t1198 = Ifges(3,1) - Ifges(3,2);
t1212 = mrSges(3,1) * pkin(2);
t1232 = pkin(2) ^ 2;
t1237 = Ifges(3,1) + Ifges(2,3) + (pkin(6) ^ 2 + t1232) * m(3) + 0.2e1 * pkin(6) * mrSges(3,3);
t1211 = pkin(2) * mrSges(3,2);
t1358 = -0.2e1 * t1211;
t1051 = -t1198 * t1184 + 0.2e1 * (Ifges(3,4) * t1203 + t1212) * t1209 + t1203 * t1358 + t1237;
t1167 = mrSges(3,2) * pkin(6) - Ifges(3,6);
t1168 = mrSges(3,1) * pkin(6) - Ifges(3,5);
t1096 = -t1167 * t1209 - t1203 * t1168;
t1157 = m(3) * pkin(6) - mrSges(2,2) + mrSges(3,3);
t1173 = m(3) * pkin(2) + mrSges(2,1);
t1250 = t1209 * mrSges(3,1) - mrSges(3,2) * t1203;
t1059 = (t1250 + t1173) * t1210 + t1204 * t1157;
t1339 = t1059 * t1187;
t1401 = t1168 / 0.2e1;
t1402 = -t1167 / 0.2e1;
t1403 = -0.2e1 * Ifges(3,4);
t1407 = Ifges(3,4) + t1184 * t1403 + (-t1198 * t1203 + t1211) * t1209;
t1428 = -0.2e1 * t1007;
t1124 = pkin(2) * t1204 - t1155;
t1321 = t1187 * t1204;
t1393 = pkin(3) * t1184;
t1039 = 0.1e1 / ((pkin(3) * t1308 + t1124 * t1187) * t1209 + pkin(2) * t1308 + t1321 * t1393);
t1397 = pkin(3) * t1007;
t1274 = t1203 * t1397;
t1298 = t1204 * t1209;
t1315 = t1187 * t1210;
t1322 = t1187 * t1203;
t1307 = t1189 * t1204;
t1024 = -t1079 * t1316 - (t1079 * t1307 + t1083 * t1210) * t1203;
t1027 = -t1083 * t1316 - (-t1079 * t1210 + t1083 * t1307) * t1203;
t995 = (t1024 * t1071 + t1027 * t1067) * t1039;
t1364 = t1216 * t995;
t1368 = t1210 * t995;
t1270 = t1203 * t1364;
t956 = t1270 - t1397;
t907 = (((t1007 * t1189 + t995 * t1315) * t1393 + ((-t1274 + t1364) * t1204 + pkin(2) * t1368) * t1316 + t1189 * t956) * t995 + (t1007 * t1315 + (t1184 * t1189 - t1298 * t1322 - t1189) * t995) * t1397) * t1039;
t1075 = pkin(3) * t1298 + t1124;
t1306 = t1189 * t1231;
t1156 = t1216 ^ 2 + t1232;
t1230 = pkin(3) ^ 2;
t1380 = 0.2e1 * pkin(2) * pkin(3);
t1381 = (-t1216 * t1274 + (t1184 * t1230 + t1209 * t1380 + t1156) * t995) * t995;
t915 = t1039 * t1306 * t1381 + (-t1189 * t1270 + (-t1075 * t1322 + t1189 * (pkin(2) * t1209 + t1393)) * t1007) / (t1075 * t1316 + t1119) * t1007;
t927 = (-t1209 * t1381 - (pkin(2) * t1007 - t1209 * t956) * t1397) * t1039;
t1439 = -t1051 * t907 - t1096 * t915 - t927 * t1339 + ((t1402 * t1203 + t1401 * t1209) * t1007 + (t1212 * t1203 + t1407) * t995) * t1428;
t1192 = legFrame(2,3);
t1161 = sin(t1192);
t1165 = cos(t1192);
t1078 = -t1161 * t1186 + t1165 * t1188;
t1082 = t1161 * t1188 + t1165 * t1186;
t1207 = cos(qJ(3,2));
t1151 = pkin(3) * t1207 + pkin(2);
t1208 = cos(qJ(2,2));
t1154 = t1208 * t1216;
t1202 = sin(qJ(2,2));
t1106 = t1151 * t1202 - t1154;
t1295 = t1216 * t1202;
t1336 = (t1151 * t1208 + t1295) * t1189;
t1031 = -t1078 * t1336 + t1082 * t1106;
t1034 = -t1078 * t1106 - t1082 * t1336;
t1223 = koppelP(2,2);
t1227 = koppelP(2,1);
t1114 = -t1177 * t1223 + t1178 * t1227;
t1066 = t1114 * t1213 + t1214;
t1110 = t1177 * t1227 + t1178 * t1223;
t1070 = -t1110 * t1213 + t1215;
t1201 = sin(qJ(3,2));
t1310 = t1189 * t1201;
t1118 = t1151 * t1310;
t1318 = t1187 * t1207;
t1344 = 0.1e1 / (t1106 * t1318 + t1118) * t1231;
t1006 = (t1031 * t1070 + t1034 * t1066) * t1344;
t1183 = t1207 ^ 2;
t1050 = -t1198 * t1183 + 0.2e1 * (Ifges(3,4) * t1201 + t1212) * t1207 + t1201 * t1358 + t1237;
t1095 = -t1167 * t1207 - t1201 * t1168;
t1251 = t1207 * mrSges(3,1) - mrSges(3,2) * t1201;
t1058 = (t1251 + t1173) * t1208 + t1202 * t1157;
t1340 = t1058 * t1187;
t1406 = Ifges(3,4) + t1183 * t1403 + (-t1198 * t1201 + t1211) * t1207;
t1429 = -0.2e1 * t1006;
t1123 = pkin(2) * t1202 - t1154;
t1323 = t1187 * t1202;
t1394 = pkin(3) * t1183;
t1038 = 0.1e1 / ((pkin(3) * t1310 + t1123 * t1187) * t1207 + pkin(2) * t1310 + t1323 * t1394);
t1398 = pkin(3) * t1006;
t1275 = t1201 * t1398;
t1299 = t1202 * t1207;
t1317 = t1187 * t1208;
t1324 = t1187 * t1201;
t1309 = t1189 * t1202;
t1023 = -t1078 * t1318 - (t1078 * t1309 + t1082 * t1208) * t1201;
t1026 = -t1082 * t1318 - (-t1078 * t1208 + t1082 * t1309) * t1201;
t994 = (t1023 * t1070 + t1026 * t1066) * t1038;
t1365 = t1216 * t994;
t1369 = t1208 * t994;
t1271 = t1201 * t1365;
t955 = t1271 - t1398;
t906 = (((t1006 * t1189 + t994 * t1317) * t1394 + ((-t1275 + t1365) * t1202 + pkin(2) * t1369) * t1318 + t1189 * t955) * t994 + (t1006 * t1317 + (t1183 * t1189 - t1299 * t1324 - t1189) * t994) * t1398) * t1038;
t1074 = pkin(3) * t1299 + t1123;
t1382 = (-t1216 * t1275 + (t1183 * t1230 + t1207 * t1380 + t1156) * t994) * t994;
t914 = t1038 * t1306 * t1382 + (-t1189 * t1271 + (-t1074 * t1324 + t1189 * (pkin(2) * t1207 + t1394)) * t1006) / (t1074 * t1318 + t1118) * t1006;
t926 = (-t1207 * t1382 - (pkin(2) * t1006 - t1207 * t955) * t1398) * t1038;
t1438 = -t1050 * t906 - t1095 * t914 - t926 * t1340 + ((t1402 * t1201 + t1401 * t1207) * t1006 + (t1212 * t1201 + t1406) * t994) * t1429;
t1191 = legFrame(3,3);
t1160 = sin(t1191);
t1164 = cos(t1191);
t1077 = -t1160 * t1186 + t1164 * t1188;
t1081 = t1160 * t1188 + t1164 * t1186;
t1205 = cos(qJ(3,3));
t1150 = pkin(3) * t1205 + pkin(2);
t1206 = cos(qJ(2,3));
t1153 = t1206 * t1216;
t1200 = sin(qJ(2,3));
t1105 = t1150 * t1200 - t1153;
t1296 = t1216 * t1200;
t1337 = (t1150 * t1206 + t1296) * t1189;
t1030 = -t1077 * t1337 + t1081 * t1105;
t1033 = -t1077 * t1105 - t1081 * t1337;
t1222 = koppelP(3,2);
t1226 = koppelP(3,1);
t1113 = -t1177 * t1222 + t1178 * t1226;
t1065 = t1113 * t1213 + t1214;
t1109 = t1177 * t1226 + t1178 * t1222;
t1069 = -t1109 * t1213 + t1215;
t1199 = sin(qJ(3,3));
t1312 = t1189 * t1199;
t1117 = t1150 * t1312;
t1320 = t1187 * t1205;
t1345 = 0.1e1 / (t1105 * t1320 + t1117) * t1231;
t1005 = (t1030 * t1069 + t1033 * t1065) * t1345;
t1182 = t1205 ^ 2;
t1049 = -t1198 * t1182 + 0.2e1 * (Ifges(3,4) * t1199 + t1212) * t1205 + t1199 * t1358 + t1237;
t1094 = -t1167 * t1205 - t1199 * t1168;
t1252 = t1205 * mrSges(3,1) - mrSges(3,2) * t1199;
t1057 = (t1252 + t1173) * t1206 + t1200 * t1157;
t1341 = t1057 * t1187;
t1405 = Ifges(3,4) + t1182 * t1403 + (-t1198 * t1199 + t1211) * t1205;
t1430 = -0.2e1 * t1005;
t1122 = pkin(2) * t1200 - t1153;
t1325 = t1187 * t1200;
t1395 = pkin(3) * t1182;
t1037 = 0.1e1 / ((pkin(3) * t1312 + t1122 * t1187) * t1205 + pkin(2) * t1312 + t1325 * t1395);
t1399 = pkin(3) * t1005;
t1276 = t1199 * t1399;
t1300 = t1200 * t1205;
t1319 = t1187 * t1206;
t1326 = t1187 * t1199;
t1311 = t1189 * t1200;
t1022 = -t1077 * t1320 - (t1077 * t1311 + t1081 * t1206) * t1199;
t1025 = -t1081 * t1320 - (-t1077 * t1206 + t1081 * t1311) * t1199;
t993 = (t1022 * t1069 + t1025 * t1065) * t1037;
t1366 = t1216 * t993;
t1370 = t1206 * t993;
t1272 = t1199 * t1366;
t954 = t1272 - t1399;
t905 = (((t1005 * t1189 + t993 * t1319) * t1395 + ((-t1276 + t1366) * t1200 + pkin(2) * t1370) * t1320 + t1189 * t954) * t993 + (t1005 * t1319 + (t1182 * t1189 - t1300 * t1326 - t1189) * t993) * t1399) * t1037;
t1073 = pkin(3) * t1300 + t1122;
t1383 = (-t1216 * t1276 + (t1182 * t1230 + t1205 * t1380 + t1156) * t993) * t993;
t913 = t1037 * t1306 * t1383 + (-t1189 * t1272 + (-t1073 * t1326 + t1189 * (pkin(2) * t1205 + t1395)) * t1005) / (t1073 * t1320 + t1117) * t1005;
t925 = (-t1205 * t1383 - (pkin(2) * t1005 - t1205 * t954) * t1399) * t1037;
t1437 = -t1049 * t905 - t1094 * t913 - t925 * t1341 + ((t1402 * t1199 + t1401 * t1205) * t1005 + (t1212 * t1199 + t1405) * t993) * t1430;
t1190 = legFrame(4,3);
t1159 = sin(t1190);
t1163 = cos(t1190);
t1076 = -t1159 * t1186 + t1163 * t1188;
t1080 = t1159 * t1188 + t1163 * t1186;
t1196 = cos(qJ(3,4));
t1148 = pkin(3) * t1196 + pkin(2);
t1197 = cos(qJ(2,4));
t1149 = t1197 * t1216;
t1195 = sin(qJ(2,4));
t1098 = t1148 * t1195 - t1149;
t1297 = t1216 * t1195;
t1338 = (t1148 * t1197 + t1297) * t1189;
t1028 = -t1076 * t1338 + t1080 * t1098;
t1029 = -t1076 * t1098 - t1080 * t1338;
t1221 = koppelP(4,2);
t1225 = koppelP(4,1);
t1112 = -t1177 * t1221 + t1178 * t1225;
t1064 = t1112 * t1213 + t1214;
t1108 = t1177 * t1225 + t1178 * t1221;
t1068 = -t1108 * t1213 + t1215;
t1194 = sin(qJ(3,4));
t1314 = t1189 * t1194;
t1116 = t1148 * t1314;
t1328 = t1187 * t1196;
t1346 = 0.1e1 / (t1098 * t1328 + t1116) * t1231;
t1001 = (t1028 * t1068 + t1029 * t1064) * t1346;
t1179 = t1196 ^ 2;
t1045 = -t1198 * t1179 + 0.2e1 * (Ifges(3,4) * t1194 + t1212) * t1196 + t1194 * t1358 + t1237;
t1086 = -t1167 * t1196 - t1194 * t1168;
t1253 = t1196 * mrSges(3,1) - mrSges(3,2) * t1194;
t1056 = (t1253 + t1173) * t1197 + t1195 * t1157;
t1342 = t1056 * t1187;
t1404 = Ifges(3,4) + t1179 * t1403 + (-t1198 * t1194 + t1211) * t1196;
t1431 = -0.2e1 * t1001;
t1120 = pkin(2) * t1195 - t1149;
t1329 = t1187 * t1195;
t1396 = pkin(3) * t1179;
t1036 = 0.1e1 / ((pkin(3) * t1314 + t1120 * t1187) * t1196 + pkin(2) * t1314 + t1329 * t1396);
t1400 = pkin(3) * t1001;
t1277 = t1194 * t1400;
t1305 = t1195 * t1196;
t1327 = t1187 * t1197;
t1330 = t1187 * t1194;
t1313 = t1189 * t1195;
t1020 = -t1076 * t1328 - (t1076 * t1313 + t1080 * t1197) * t1194;
t1021 = -t1080 * t1328 - (-t1076 * t1197 + t1080 * t1313) * t1194;
t989 = (t1020 * t1068 + t1021 * t1064) * t1036;
t1367 = t1216 * t989;
t1371 = t1197 * t989;
t1273 = t1194 * t1367;
t952 = t1273 - t1400;
t904 = (((t1001 * t1189 + t989 * t1327) * t1396 + ((-t1277 + t1367) * t1195 + pkin(2) * t1371) * t1328 + t952 * t1189) * t989 + (t1001 * t1327 + (t1179 * t1189 - t1305 * t1330 - t1189) * t989) * t1400) * t1036;
t1072 = pkin(3) * t1305 + t1120;
t1384 = (-t1216 * t1277 + (t1179 * t1230 + t1196 * t1380 + t1156) * t989) * t989;
t909 = t1036 * t1306 * t1384 + (-t1189 * t1273 + (-t1072 * t1330 + t1189 * (pkin(2) * t1196 + t1396)) * t1001) / (t1072 * t1328 + t1116) * t1001;
t921 = (-t1196 * t1384 - (pkin(2) * t1001 - t1196 * t952) * t1400) * t1036;
t1436 = -t1045 * t904 - t1086 * t909 - t921 * t1342 + ((t1402 * t1194 + t1401 * t1196) * t1001 + (t1212 * t1194 + t1404) * t989) * t1431;
t1004 = t1007 ^ 2;
t1389 = mrSges(3,1) * t1203;
t1135 = mrSges(3,2) * t1209 + t1389;
t1055 = -t1135 * t1321 + t1250 * t1189;
t1180 = m(1) + m(2) + m(3);
t992 = t995 ^ 2;
t1435 = -t1055 * t915 - t1180 * t927 + ((-t1173 * t992 - t1250 * (t992 + t1004)) * t1204 + (t1135 * t1428 + t1157 * t995) * t1368) * t1187;
t1003 = t1006 ^ 2;
t1390 = mrSges(3,1) * t1201;
t1134 = mrSges(3,2) * t1207 + t1390;
t1054 = -t1134 * t1323 + t1251 * t1189;
t991 = t994 ^ 2;
t1434 = -t1054 * t914 - t1180 * t926 + ((-t1173 * t991 - t1251 * (t991 + t1003)) * t1202 + (t1134 * t1429 + t1157 * t994) * t1369) * t1187;
t1002 = t1005 ^ 2;
t1391 = mrSges(3,1) * t1199;
t1133 = mrSges(3,2) * t1205 + t1391;
t1053 = -t1133 * t1325 + t1252 * t1189;
t990 = t993 ^ 2;
t1433 = -t1053 * t913 - t1180 * t925 + ((-t1173 * t990 - t1252 * (t990 + t1002)) * t1200 + (t1133 * t1430 + t1157 * t993) * t1370) * t1187;
t1392 = mrSges(3,1) * t1194;
t1129 = mrSges(3,2) * t1196 + t1392;
t1052 = -t1129 * t1329 + t1253 * t1189;
t988 = t989 ^ 2;
t997 = t1001 ^ 2;
t1432 = -t1052 * t909 - t1180 * t921 + ((-t1173 * t988 - t1253 * (t988 + t997)) * t1195 + (t1129 * t1431 + t1157 * t989) * t1371) * t1187;
t1359 = t997 * t1129;
t1427 = -t1189 * t1359 - t904 * t1342 + t1432;
t1357 = t1002 * t1133;
t1426 = -t1189 * t1357 - t905 * t1341 + t1433;
t1356 = t1003 * t1134;
t1425 = -t1189 * t1356 - t906 * t1340 + t1434;
t1355 = t1004 * t1135;
t1424 = -t1189 * t1355 - t907 * t1339 + t1435;
t1419 = t1439 * t1039;
t1418 = t1438 * t1038;
t1417 = t1437 * t1037;
t1416 = t1436 * t1036;
t1415 = t1036 * t1427;
t1414 = t1037 * t1426;
t1413 = t1038 * t1425;
t1412 = t1039 * t1424;
t1127 = pkin(2) * t1210 + t1294;
t1238 = pkin(3) * t1322 - t1124 * t1189;
t1411 = t1127 * t1188 + t1238 * t1186;
t1126 = pkin(2) * t1208 + t1295;
t1239 = pkin(3) * t1324 - t1123 * t1189;
t1410 = t1126 * t1188 + t1239 * t1186;
t1125 = pkin(2) * t1206 + t1296;
t1240 = pkin(3) * t1326 - t1122 * t1189;
t1409 = t1125 * t1188 + t1240 * t1186;
t1121 = pkin(2) * t1197 + t1297;
t1241 = pkin(3) * t1330 - t1120 * t1189;
t1408 = t1121 * t1188 + t1241 * t1186;
t1185 = t1213 ^ 2;
t1363 = t988 * (pkin(2) * t1392 + t1404);
t1362 = t990 * (pkin(2) * t1391 + t1405);
t1361 = t991 * (pkin(2) * t1390 + t1406);
t1360 = t992 * (pkin(2) * t1389 + t1407);
t1281 = pkin(2) * t1330;
t1280 = pkin(2) * t1326;
t1279 = pkin(2) * t1324;
t1278 = pkin(2) * t1322;
t1269 = t1028 * t1346;
t1268 = t1029 * t1346;
t1267 = t1030 * t1345;
t1266 = t1031 * t1344;
t1265 = t1032 * t1343;
t1264 = t1033 * t1345;
t1263 = t1034 * t1344;
t1262 = t1035 * t1343;
t1261 = t1052 * t1346;
t1260 = t1086 * t1346;
t1259 = t1053 * t1345;
t1258 = t1094 * t1345;
t1257 = t1054 * t1344;
t1256 = t1095 * t1344;
t1255 = t1055 * t1343;
t1254 = t1096 * t1343;
t1245 = t1346 * t1363;
t1244 = t1345 * t1362;
t1243 = t1344 * t1361;
t1242 = t1343 * t1360;
t1236 = (-t1028 * t1112 - t1029 * t1108) * t1346;
t1235 = (-t1030 * t1113 - t1033 * t1109) * t1345;
t1234 = (-t1031 * t1114 - t1034 * t1110) * t1344;
t1233 = (-t1032 * t1115 - t1035 * t1111) * t1343;
t1220 = mrSges(4,1);
t1219 = mrSges(4,2);
t1092 = t1186 * t1210 + t1188 * t1307;
t1091 = t1186 * t1208 + t1188 * t1309;
t1090 = t1186 * t1206 + t1188 * t1311;
t1089 = t1186 * t1307 - t1188 * t1210;
t1088 = t1186 * t1309 - t1188 * t1208;
t1087 = t1186 * t1311 - t1188 * t1206;
t1085 = t1186 * t1197 + t1188 * t1313;
t1084 = t1186 * t1313 - t1188 * t1197;
t1043 = t1127 * t1186 - t1238 * t1188;
t1042 = t1126 * t1186 - t1239 * t1188;
t1041 = t1125 * t1186 - t1240 * t1188;
t1040 = t1121 * t1186 - t1241 * t1188;
t1019 = (-t1089 * t1162 + t1092 * t1166) * t1393 + (t1043 * t1166 + t1411 * t1162) * t1209 - t1079 * t1278;
t1018 = (-t1088 * t1161 + t1091 * t1165) * t1394 + (t1042 * t1165 + t1410 * t1161) * t1207 - t1078 * t1279;
t1017 = (-t1087 * t1160 + t1090 * t1164) * t1395 + (t1041 * t1164 + t1409 * t1160) * t1205 - t1077 * t1280;
t1016 = -(t1089 * t1166 + t1092 * t1162) * t1393 + (-t1162 * t1043 + t1411 * t1166) * t1209 + t1083 * t1278;
t1015 = -(t1088 * t1165 + t1091 * t1161) * t1394 + (-t1161 * t1042 + t1410 * t1165) * t1207 + t1082 * t1279;
t1014 = -(t1087 * t1164 + t1090 * t1160) * t1395 + (-t1160 * t1041 + t1409 * t1164) * t1205 + t1081 * t1280;
t1013 = (-t1084 * t1159 + t1085 * t1163) * t1396 + (t1040 * t1163 + t1408 * t1159) * t1196 - t1076 * t1281;
t1012 = -(t1084 * t1163 + t1085 * t1159) * t1396 + (-t1159 * t1040 + t1408 * t1163) * t1196 + t1080 * t1281;
t1011 = (-t1032 * t1111 + t1035 * t1115) * t1343;
t1010 = (-t1031 * t1110 + t1034 * t1114) * t1344;
t1009 = (-t1030 * t1109 + t1033 * t1113) * t1345;
t1008 = (-t1028 * t1108 + t1029 * t1112) * t1346;
t1000 = (-t1024 * t1111 + t1027 * t1115) * t1039;
t999 = (-t1023 * t1110 + t1026 * t1114) * t1038;
t998 = (-t1022 * t1109 + t1025 * t1113) * t1037;
t996 = (-t1020 * t1108 + t1021 * t1112) * t1036;
t987 = (-t1016 * t1111 + t1019 * t1115) * t1039;
t986 = (-t1015 * t1110 + t1018 * t1114) * t1038;
t985 = (-t1014 * t1109 + t1017 * t1113) * t1037;
t984 = (-t1012 * t1108 + t1013 * t1112) * t1036;
t975 = t1035 * t1255 + (t1019 * t1180 + t1027 * t1339) * t1039;
t974 = t1034 * t1257 + (t1018 * t1180 + t1026 * t1340) * t1038;
t973 = t1033 * t1259 + (t1017 * t1180 + t1025 * t1341) * t1037;
t972 = t1032 * t1255 + (t1016 * t1180 + t1024 * t1339) * t1039;
t971 = t1031 * t1257 + (t1015 * t1180 + t1023 * t1340) * t1038;
t970 = t1030 * t1259 + (t1014 * t1180 + t1022 * t1341) * t1037;
t969 = t1029 * t1261 + (t1013 * t1180 + t1021 * t1342) * t1036;
t968 = t1028 * t1261 + (t1012 * t1180 + t1020 * t1342) * t1036;
t967 = t1035 * t1254 + (t1019 * t1339 + t1027 * t1051) * t1039;
t966 = t1034 * t1256 + (t1018 * t1340 + t1026 * t1050) * t1038;
t965 = t1033 * t1258 + (t1017 * t1341 + t1025 * t1049) * t1037;
t964 = t1032 * t1254 + (t1016 * t1339 + t1024 * t1051) * t1039;
t963 = t1031 * t1256 + (t1015 * t1340 + t1023 * t1050) * t1038;
t962 = t1030 * t1258 + (t1014 * t1341 + t1022 * t1049) * t1037;
t961 = t1029 * t1260 + (t1013 * t1342 + t1021 * t1045) * t1036;
t960 = t1028 * t1260 + (t1012 * t1342 + t1020 * t1045) * t1036;
t948 = t1000 * t1339 + t1011 * t1055 + t1180 * t987;
t947 = t1010 * t1054 + t1180 * t986 + t999 * t1340;
t946 = t1009 * t1053 + t1180 * t985 + t998 * t1341;
t944 = t1000 * t1051 + t1011 * t1096 + t987 * t1339;
t943 = t1010 * t1095 + t1050 * t999 + t986 * t1340;
t942 = t1009 * t1094 + t1049 * t998 + t985 * t1341;
t941 = t1008 * t1052 + t1180 * t984 + t996 * t1342;
t940 = t1008 * t1086 + t1045 * t996 + t984 * t1342;
t903 = -Ifges(3,3) * t915 - t1055 * t927 - t1096 * t907;
t902 = -Ifges(3,3) * t914 - t1054 * t926 - t1095 * t906;
t901 = -Ifges(3,3) * t913 - t1053 * t925 - t1094 * t905;
t894 = -Ifges(3,3) * t909 - t1052 * t921 - t1086 * t904;
t1 = [t1028 * t1245 + t1030 * t1244 + t1031 * t1243 + t1032 * t1242 + t903 * t1265 + t902 * t1266 + t901 * t1267 + t894 * t1269 + t1012 * t1415 + t1014 * t1414 + t1015 * t1413 + t1016 * t1412 + t1419 * t1024 + t1418 * t1023 + t1417 * t1022 + t1416 * t1020 + ((Ifges(3,3) * t1265 + (t1016 * t1055 + t1024 * t1096) * t1039) * t1233 + (-(t1016 * t972 + t1024 * t964) * t1115 - (t1019 * t972 + t1027 * t964) * t1111) * t1039 + (Ifges(3,3) * t1266 + (t1015 * t1054 + t1023 * t1095) * t1038) * t1234 + (-(t1015 * t971 + t1023 * t963) * t1114 - (t1018 * t971 + t1026 * t963) * t1110) * t1038 + (Ifges(3,3) * t1267 + (t1014 * t1053 + t1022 * t1094) * t1037) * t1235 + (-(t1014 * t970 + t1022 * t962) * t1113 - (t1017 * t970 + t1025 * t962) * t1109) * t1037 + (Ifges(3,3) * t1269 + (t1012 * t1052 + t1020 * t1086) * t1036) * t1236 + (-(t1012 * t968 + t1020 * t960) * t1112 - (t1013 * t968 + t1021 * t960) * t1108) * t1036 + t1177 * t1219 - t1178 * t1220) * t1185; t1029 * t1245 + t1033 * t1244 + t1034 * t1243 + t1035 * t1242 + t903 * t1262 + t902 * t1263 + t901 * t1264 + t894 * t1268 + t1013 * t1415 + t1017 * t1414 + t1018 * t1413 + t1019 * t1412 + t1419 * t1027 + t1418 * t1026 + t1417 * t1025 + t1416 * t1021 + ((Ifges(3,3) * t1262 + (t1019 * t1055 + t1027 * t1096) * t1039) * t1233 + (-(t1016 * t975 + t1024 * t967) * t1115 - (t1019 * t975 + t1027 * t967) * t1111) * t1039 + (Ifges(3,3) * t1263 + (t1018 * t1054 + t1026 * t1095) * t1038) * t1234 + (-(t1015 * t974 + t1023 * t966) * t1114 - (t1018 * t974 + t1026 * t966) * t1110) * t1038 + (Ifges(3,3) * t1264 + (t1017 * t1053 + t1025 * t1094) * t1037) * t1235 + (-(t1014 * t973 + t1022 * t965) * t1113 - (t1017 * t973 + t1025 * t965) * t1109) * t1037 + (Ifges(3,3) * t1268 + (t1013 * t1052 + t1021 * t1086) * t1036) * t1236 + (-(t1012 * t969 + t1020 * t961) * t1112 - (t1013 * t969 + t1021 * t961) * t1108) * t1036 - t1177 * t1220 - t1178 * t1219) * t1185; (-t1355 - t1356 - t1357 - t1359) * t1189 + (-t1056 * t904 - t1057 * t905 - t1058 * t906 - t1059 * t907) * t1187 + (-t1108 * t969 - t1109 * t973 - t1110 * t974 - t1111 * t975 - t1112 * t968 - t1113 * t970 - t1114 * t971 - t1115 * t972) * t1185 + t1432 + t1433 + t1434 + t1435; t1438 * t999 + t1437 * t998 + t1436 * t996 + t1424 * t987 + t1425 * t986 + t1426 * t985 + t1427 * t984 + (t1360 + t903) * t1011 + (t1361 + t902) * t1010 + (t1362 + t901) * t1009 + (t1363 + t894) * t1008 + t1439 * t1000 + ((Ifges(3,3) * t1011 + t1000 * t1096 + t1055 * t987) * t1233 + (-(t1016 * t948 + t1024 * t944) * t1115 - (t1019 * t948 + t1027 * t944) * t1111) * t1039 + (Ifges(3,3) * t1010 + t1054 * t986 + t1095 * t999) * t1234 + (-(t1015 * t947 + t1023 * t943) * t1114 - (t1018 * t947 + t1026 * t943) * t1110) * t1038 + (Ifges(3,3) * t1009 + t1053 * t985 + t1094 * t998) * t1235 + (-(t1014 * t946 + t1022 * t942) * t1113 - (t1017 * t946 + t1025 * t942) * t1109) * t1037 + (Ifges(3,3) * t1008 + t1052 * t984 + t1086 * t996) * t1236 + (-(t1012 * t941 + t1020 * t940) * t1112 - (t1013 * t941 + t1021 * t940) * t1108) * t1036) * t1185;];
taucX  = t1;
