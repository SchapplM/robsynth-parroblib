% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR8V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G1A0_convert_par2_MPV_fixb.m

% Output:
% MMX [4x4]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:13
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMX = P4PRRRR8V2G1A0_inertia_para_pf_mdp(xP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G1A0_inertia_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:12:12
% EndTime: 2020-08-07 11:12:36
% DurationCPUTime: 25.04s
% Computational Cost: add. (40595->1072), mult. (83524->1979), div. (2924->26), fcn. (88956->30), ass. (0->718)
t3610 = cos(qJ(2,4));
t3608 = sin(qJ(2,4));
t3623 = pkin(7) + pkin(6);
t3868 = t3608 * t3623;
t3561 = pkin(2) * t3610 + t3868;
t3599 = sin(pkin(8));
t3601 = cos(pkin(8));
t3570 = t3623 * t3610;
t3560 = pkin(2) * t3608 - t3570;
t3602 = cos(pkin(4));
t3600 = sin(pkin(4));
t3607 = sin(qJ(3,4));
t3902 = t3600 * t3607;
t3663 = pkin(3) * t3902 - t3560 * t3602;
t3460 = t3561 * t3599 - t3663 * t3601;
t3603 = legFrame(4,3);
t3577 = sin(t3603);
t3581 = cos(t3603);
t3503 = t3577 * t3601 + t3581 * t3599;
t3884 = t3602 * t3608;
t3507 = t3599 * t3884 - t3601 * t3610;
t3508 = t3599 * t3610 + t3601 * t3884;
t3609 = cos(qJ(3,4));
t3851 = pkin(2) * t3902;
t4012 = pkin(3) * t3609 ^ 2;
t4018 = t3561 * t3601 + t3663 * t3599;
t3411 = -(t3507 * t3581 + t3508 * t3577) * t4012 + (-t3577 * t3460 + t4018 * t3581) * t3609 + t3503 * t3851;
t3499 = -t3577 * t3599 + t3581 * t3601;
t3412 = (-t3507 * t3577 + t3508 * t3581) * t4012 + (t3460 * t3581 + t4018 * t3577) * t3609 - t3499 * t3851;
t3900 = t3600 * t3609;
t3429 = -t3499 * t3900 - (t3499 * t3884 + t3503 * t3610) * t3607;
t3430 = -t3503 * t3900 - (-t3499 * t3610 + t3503 * t3884) * t3607;
t3885 = t3602 * t3607;
t3901 = t3600 * t3608;
t3453 = t3901 * t4012 + (pkin(3) * t3885 + t3560 * t3600) * t3609 + pkin(2) * t3885;
t3452 = 0.1e1 / t3453 ^ 2;
t4025 = t3452 * (t3411 * t3430 + t3412 * t3429);
t3618 = cos(qJ(2,3));
t3612 = sin(qJ(2,3));
t3863 = t3612 * t3623;
t3565 = pkin(2) * t3618 + t3863;
t3574 = t3623 * t3618;
t3562 = pkin(2) * t3612 - t3574;
t3611 = sin(qJ(3,3));
t3898 = t3600 * t3611;
t3662 = pkin(3) * t3898 - t3562 * t3602;
t3464 = t3565 * t3599 - t3662 * t3601;
t3604 = legFrame(3,3);
t3578 = sin(t3604);
t3582 = cos(t3604);
t3504 = t3578 * t3601 + t3582 * t3599;
t3881 = t3602 * t3612;
t3511 = t3599 * t3881 - t3601 * t3618;
t3514 = t3599 * t3618 + t3601 * t3881;
t3617 = cos(qJ(3,3));
t3850 = pkin(2) * t3898;
t4011 = pkin(3) * t3617 ^ 2;
t4019 = t3565 * t3601 + t3662 * t3599;
t3414 = -(t3511 * t3582 + t3514 * t3578) * t4011 + (-t3578 * t3464 + t4019 * t3582) * t3617 + t3504 * t3850;
t3500 = -t3578 * t3599 + t3582 * t3601;
t3417 = (-t3511 * t3578 + t3514 * t3582) * t4011 + (t3464 * t3582 + t4019 * t3578) * t3617 - t3500 * t3850;
t3892 = t3600 * t3617;
t3437 = -t3500 * t3892 - (t3500 * t3881 + t3504 * t3618) * t3611;
t3440 = -t3504 * t3892 - (-t3500 * t3618 + t3504 * t3881) * t3611;
t3882 = t3602 * t3611;
t3897 = t3600 * t3612;
t3461 = t3897 * t4011 + (pkin(3) * t3882 + t3562 * t3600) * t3617 + pkin(2) * t3882;
t3455 = 0.1e1 / t3461 ^ 2;
t4024 = t3455 * (t3414 * t3440 + t3417 * t3437);
t3620 = cos(qJ(2,2));
t3614 = sin(qJ(2,2));
t3859 = t3614 * t3623;
t3566 = pkin(2) * t3620 + t3859;
t3575 = t3623 * t3620;
t3563 = pkin(2) * t3614 - t3575;
t3613 = sin(qJ(3,2));
t3896 = t3600 * t3613;
t3661 = pkin(3) * t3896 - t3563 * t3602;
t3465 = t3566 * t3599 - t3661 * t3601;
t3605 = legFrame(2,3);
t3579 = sin(t3605);
t3583 = cos(t3605);
t3505 = t3579 * t3601 + t3583 * t3599;
t3879 = t3602 * t3614;
t3512 = t3599 * t3879 - t3601 * t3620;
t3515 = t3599 * t3620 + t3601 * t3879;
t3619 = cos(qJ(3,2));
t3849 = pkin(2) * t3896;
t4010 = pkin(3) * t3619 ^ 2;
t4020 = t3566 * t3601 + t3661 * t3599;
t3415 = -(t3512 * t3583 + t3515 * t3579) * t4010 + (-t3579 * t3465 + t4020 * t3583) * t3619 + t3505 * t3849;
t3501 = -t3579 * t3599 + t3583 * t3601;
t3418 = (-t3512 * t3579 + t3515 * t3583) * t4010 + (t3465 * t3583 + t4020 * t3579) * t3619 - t3501 * t3849;
t3890 = t3600 * t3619;
t3438 = -t3501 * t3890 - (t3501 * t3879 + t3505 * t3620) * t3613;
t3441 = -t3505 * t3890 - (-t3501 * t3620 + t3505 * t3879) * t3613;
t3880 = t3602 * t3613;
t3895 = t3600 * t3614;
t3462 = t3895 * t4010 + (pkin(3) * t3880 + t3563 * t3600) * t3619 + pkin(2) * t3880;
t3457 = 0.1e1 / t3462 ^ 2;
t4023 = t3457 * (t3415 * t3441 + t3418 * t3438);
t3622 = cos(qJ(2,1));
t3616 = sin(qJ(2,1));
t3855 = t3616 * t3623;
t3567 = pkin(2) * t3622 + t3855;
t3576 = t3623 * t3622;
t3564 = pkin(2) * t3616 - t3576;
t3615 = sin(qJ(3,1));
t3894 = t3600 * t3615;
t3660 = pkin(3) * t3894 - t3564 * t3602;
t3466 = t3567 * t3599 - t3660 * t3601;
t3606 = legFrame(1,3);
t3580 = sin(t3606);
t3584 = cos(t3606);
t3506 = t3580 * t3601 + t3584 * t3599;
t3877 = t3602 * t3616;
t3513 = t3599 * t3877 - t3601 * t3622;
t3516 = t3599 * t3622 + t3601 * t3877;
t3621 = cos(qJ(3,1));
t3848 = pkin(2) * t3894;
t4009 = pkin(3) * t3621 ^ 2;
t4021 = t3567 * t3601 + t3660 * t3599;
t3416 = -(t3513 * t3584 + t3516 * t3580) * t4009 + (-t3580 * t3466 + t4021 * t3584) * t3621 + t3506 * t3848;
t3502 = -t3580 * t3599 + t3584 * t3601;
t3419 = (-t3513 * t3580 + t3516 * t3584) * t4009 + (t3466 * t3584 + t4021 * t3580) * t3621 - t3502 * t3848;
t3888 = t3600 * t3621;
t3439 = -t3502 * t3888 - (t3502 * t3877 + t3506 * t3622) * t3615;
t3442 = -t3506 * t3888 - (-t3502 * t3622 + t3506 * t3877) * t3615;
t3878 = t3602 * t3615;
t3893 = t3600 * t3616;
t3463 = t3893 * t4009 + (pkin(3) * t3878 + t3564 * t3600) * t3621 + pkin(2) * t3878;
t3459 = 0.1e1 / t3463 ^ 2;
t4022 = t3459 * (t3416 * t3442 + t3419 * t3439);
t4017 = 0.2e1 * pkin(2);
t4016 = 2 * MDP(6);
t4015 = 2 * MDP(7);
t4014 = 2 * MDP(8);
t4013 = 0.2e1 * t3600;
t4008 = MDP(3) * t3600;
t4007 = MDP(4) * t3600;
t3633 = 0.1e1 / pkin(3);
t4006 = MDP(7) * t3633;
t4005 = MDP(8) * t3633;
t4004 = MDP(9) * t3633;
t4003 = MDP(9) / pkin(3) ^ 2;
t3625 = koppelP(4,2);
t3629 = koppelP(4,1);
t3551 = t3599 * t3625 + t3601 * t3629;
t3552 = -t3599 * t3629 + t3601 * t3625;
t3624 = xP(4);
t3589 = sin(t3624);
t3590 = cos(t3624);
t3495 = t3551 * t3589 + t3552 * t3590;
t3679 = t3551 * t3590 - t3552 * t3589;
t3423 = t3495 * t3581 - t3679 * t3577;
t3531 = t3610 * t3625 - t3629 * t3884;
t3532 = t3610 * t3629 + t3625 * t3884;
t3471 = t3531 * t3601 - t3532 * t3599;
t3472 = t3531 * t3599 + t3532 * t3601;
t3568 = pkin(3) * t3609 + pkin(2);
t3547 = t3568 * t3885;
t3869 = t3608 * t3609;
t4002 = (((-t3471 * t3589 + t3472 * t3590) * t3581 + (t3471 * t3590 + t3472 * t3589) * t3577) * t3607 + t3423 * t3900) / (t3547 + (pkin(3) * t3869 + t3560) * t3900);
t3626 = koppelP(3,2);
t3630 = koppelP(3,1);
t3553 = t3599 * t3626 + t3601 * t3630;
t3554 = -t3599 * t3630 + t3601 * t3626;
t3496 = t3553 * t3589 + t3554 * t3590;
t3678 = t3553 * t3590 - t3554 * t3589;
t3424 = t3496 * t3582 - t3678 * t3578;
t3533 = t3618 * t3626 - t3630 * t3881;
t3536 = t3618 * t3630 + t3626 * t3881;
t3473 = t3533 * t3601 - t3536 * t3599;
t3476 = t3533 * t3599 + t3536 * t3601;
t3571 = pkin(3) * t3617 + pkin(2);
t3548 = t3571 * t3882;
t3864 = t3612 * t3617;
t4001 = (((-t3473 * t3589 + t3476 * t3590) * t3582 + (t3473 * t3590 + t3476 * t3589) * t3578) * t3611 + t3424 * t3892) / (t3548 + (pkin(3) * t3864 + t3562) * t3892);
t3627 = koppelP(2,2);
t3631 = koppelP(2,1);
t3555 = t3599 * t3627 + t3601 * t3631;
t3556 = -t3599 * t3631 + t3601 * t3627;
t3497 = t3555 * t3589 + t3556 * t3590;
t3677 = t3555 * t3590 - t3556 * t3589;
t3425 = t3497 * t3583 - t3677 * t3579;
t3534 = t3620 * t3627 - t3631 * t3879;
t3537 = t3620 * t3631 + t3627 * t3879;
t3474 = t3534 * t3601 - t3537 * t3599;
t3477 = t3534 * t3599 + t3537 * t3601;
t3572 = pkin(3) * t3619 + pkin(2);
t3549 = t3572 * t3880;
t3860 = t3614 * t3619;
t4000 = (((-t3474 * t3589 + t3477 * t3590) * t3583 + t3579 * (t3474 * t3590 + t3477 * t3589)) * t3613 + t3425 * t3890) / (t3549 + (pkin(3) * t3860 + t3563) * t3890);
t3628 = koppelP(1,2);
t3632 = koppelP(1,1);
t3557 = t3599 * t3628 + t3601 * t3632;
t3558 = -t3599 * t3632 + t3601 * t3628;
t3498 = t3557 * t3589 + t3558 * t3590;
t3676 = t3557 * t3590 - t3558 * t3589;
t3426 = t3498 * t3584 - t3580 * t3676;
t3535 = t3622 * t3628 - t3632 * t3877;
t3538 = t3622 * t3632 + t3628 * t3877;
t3475 = t3535 * t3601 - t3538 * t3599;
t3478 = t3535 * t3599 + t3538 * t3601;
t3573 = pkin(3) * t3621 + pkin(2);
t3550 = t3573 * t3878;
t3856 = t3616 * t3621;
t3999 = (((-t3475 * t3589 + t3478 * t3590) * t3584 + (t3475 * t3590 + t3478 * t3589) * t3580) * t3615 + t3426 * t3888) / (t3550 + (pkin(3) * t3856 + t3564) * t3888);
t3451 = 0.1e1 / t3453;
t3539 = t3589 * t3629 + t3590 * t3625;
t3543 = -t3589 * t3625 + t3590 * t3629;
t3363 = (-t3429 * t3539 + t3430 * t3543) * t3451;
t3998 = t3363 * t3451;
t3518 = t3568 * t3608 - t3570;
t3482 = t3518 * t3900 + t3547;
t3479 = 0.1e1 / t3482;
t3997 = t3363 * t3479;
t3454 = 0.1e1 / t3461;
t3540 = t3589 * t3630 + t3590 * t3626;
t3544 = -t3589 * t3626 + t3590 * t3630;
t3364 = (-t3437 * t3540 + t3440 * t3544) * t3454;
t3996 = t3364 * t3454;
t3528 = t3571 * t3612 - t3574;
t3492 = t3528 * t3892 + t3548;
t3483 = 0.1e1 / t3492;
t3995 = t3364 * t3483;
t3456 = 0.1e1 / t3462;
t3541 = t3589 * t3631 + t3590 * t3627;
t3545 = -t3589 * t3627 + t3590 * t3631;
t3365 = (-t3438 * t3541 + t3441 * t3545) * t3456;
t3994 = t3365 * t3456;
t3529 = t3572 * t3614 - t3575;
t3493 = t3529 * t3890 + t3549;
t3485 = 0.1e1 / t3493;
t3993 = t3365 * t3485;
t3458 = 0.1e1 / t3463;
t3542 = t3589 * t3632 + t3590 * t3628;
t3546 = -t3589 * t3628 + t3590 * t3632;
t3366 = (-t3439 * t3542 + t3442 * t3546) * t3458;
t3992 = t3366 * t3458;
t3530 = t3573 * t3616 - t3576;
t3494 = t3530 * t3888 + t3550;
t3487 = 0.1e1 / t3494;
t3991 = t3366 * t3487;
t3910 = (t3568 * t3610 + t3868) * t3602;
t3443 = -t3499 * t3910 + t3503 * t3518;
t3444 = -t3499 * t3518 - t3503 * t3910;
t3920 = t3479 * t3633;
t3367 = (-t3443 * t3539 + t3444 * t3543) * t3920;
t3990 = t3367 * t3607;
t3909 = (t3571 * t3618 + t3863) * t3602;
t3445 = -t3500 * t3909 + t3504 * t3528;
t3448 = -t3500 * t3528 - t3504 * t3909;
t3917 = t3483 * t3633;
t3368 = (-t3445 * t3540 + t3448 * t3544) * t3917;
t3989 = t3368 * t3611;
t3908 = (t3572 * t3620 + t3859) * t3602;
t3446 = -t3501 * t3908 + t3505 * t3529;
t3449 = -t3501 * t3529 - t3505 * t3908;
t3914 = t3485 * t3633;
t3369 = (-t3446 * t3541 + t3449 * t3545) * t3914;
t3988 = t3369 * t3613;
t3907 = (t3573 * t3622 + t3855) * t3602;
t3447 = -t3502 * t3907 + t3506 * t3530;
t3450 = -t3502 * t3530 - t3506 * t3907;
t3911 = t3487 * t3633;
t3370 = (-t3447 * t3542 + t3450 * t3546) * t3911;
t3987 = t3370 * t3615;
t3407 = t3423 * t3910 - t3518 * (t3495 * t3577 + t3679 * t3581);
t3986 = t3407 * t3479;
t3408 = t3424 * t3909 - t3528 * (t3496 * t3578 + t3678 * t3582);
t3985 = t3408 * t3483;
t3409 = t3425 * t3908 - (t3497 * t3579 + t3677 * t3583) * t3529;
t3984 = t3409 * t3485;
t3410 = t3426 * t3907 - (t3580 * t3498 + t3676 * t3584) * t3530;
t3983 = t3410 * t3487;
t3982 = t3411 * t3451;
t3981 = t3411 * t3452;
t3980 = t3412 * t3451;
t3979 = t3414 * t3454;
t3978 = t3414 * t3455;
t3977 = t3415 * t3456;
t3976 = t3415 * t3457;
t3975 = t3416 * t3458;
t3974 = t3416 * t3459;
t3973 = t3417 * t3454;
t3972 = t3418 * t3456;
t3971 = t3419 * t3458;
t3970 = t3429 * t3451;
t3969 = t3430 * t3451;
t3968 = t3430 * t3452;
t3967 = t3437 * t3454;
t3966 = t3438 * t3456;
t3965 = t3439 * t3458;
t3964 = t3440 * t3454;
t3963 = t3440 * t3455;
t3962 = t3441 * t3456;
t3961 = t3441 * t3457;
t3960 = t3442 * t3458;
t3959 = t3442 * t3459;
t3958 = t3443 * t3479;
t3957 = t3444 * t3479;
t3480 = 0.1e1 / t3482 ^ 2;
t3956 = t3444 * t3480;
t3955 = t3445 * t3483;
t3954 = t3446 * t3485;
t3953 = t3447 * t3487;
t3952 = t3448 * t3483;
t3484 = 0.1e1 / t3492 ^ 2;
t3951 = t3448 * t3484;
t3950 = t3449 * t3485;
t3486 = 0.1e1 / t3493 ^ 2;
t3949 = t3449 * t3486;
t3948 = t3450 * t3487;
t3488 = 0.1e1 / t3494 ^ 2;
t3947 = t3450 * t3488;
t3946 = t3451 * t3479;
t3945 = t3451 * t3607;
t3944 = t3451 * t3608;
t3943 = t3451 * t3609;
t3942 = t3451 * t3610;
t3591 = t3607 ^ 2;
t3941 = t3452 * t3591;
t3940 = t3454 * t3483;
t3939 = t3454 * t3611;
t3938 = t3454 * t3612;
t3937 = t3454 * t3617;
t3936 = t3454 * t3618;
t3593 = t3611 ^ 2;
t3935 = t3455 * t3593;
t3934 = t3456 * t3485;
t3933 = t3456 * t3613;
t3932 = t3456 * t3614;
t3931 = t3456 * t3619;
t3930 = t3456 * t3620;
t3594 = t3613 ^ 2;
t3929 = t3457 * t3594;
t3928 = t3458 * t3487;
t3927 = t3458 * t3615;
t3926 = t3458 * t3616;
t3925 = t3458 * t3621;
t3924 = t3458 * t3622;
t3595 = t3615 ^ 2;
t3923 = t3459 * t3595;
t3871 = t3607 * t3608;
t3755 = t3600 * t3871;
t3883 = t3602 * t3609;
t3922 = t3479 * (-t3755 + t3883);
t3754 = t3600 * t3869;
t3510 = t3754 + t3885;
t3921 = t3479 * t3510;
t3866 = t3611 * t3612;
t3753 = t3600 * t3866;
t3876 = t3602 * t3617;
t3919 = t3483 * (-t3753 + t3876);
t3752 = t3600 * t3864;
t3520 = t3752 + t3882;
t3918 = t3483 * t3520;
t3862 = t3613 * t3614;
t3751 = t3600 * t3862;
t3875 = t3602 * t3619;
t3916 = t3485 * (-t3751 + t3875);
t3750 = t3600 * t3860;
t3522 = t3750 + t3880;
t3915 = t3485 * t3522;
t3858 = t3615 * t3616;
t3749 = t3600 * t3858;
t3874 = t3602 * t3621;
t3913 = t3487 * (-t3749 + t3874);
t3748 = t3600 * t3856;
t3524 = t3748 + t3878;
t3912 = t3487 * t3524;
t3899 = t3600 * t3610;
t3891 = t3600 * t3618;
t3889 = t3600 * t3620;
t3887 = t3600 * t3622;
t3886 = t3600 * t3633;
t3873 = t3602 * t3623;
t3872 = t3602 * t3633;
t3870 = t3607 * t3609;
t3867 = t3609 * t3610;
t3865 = t3611 * t3617;
t3861 = t3613 * t3619;
t3857 = t3615 * t3621;
t3854 = t3617 * t3618;
t3853 = t3619 * t3620;
t3852 = t3621 * t3622;
t3311 = -t3539 * t3982 + t3543 * t3980;
t3316 = -t3540 * t3979 + t3544 * t3973;
t3317 = -t3541 * t3977 + t3545 * t3972;
t3318 = -t3542 * t3975 + t3546 * t3971;
t3847 = pkin(6) * t3920;
t3846 = pkin(6) * t3917;
t3845 = pkin(6) * t3914;
t3844 = pkin(6) * t3911;
t3843 = t3451 * t4002;
t3842 = t3591 * t4002;
t3841 = t3609 * t4002;
t3840 = t3610 * t4002;
t3839 = t3454 * t4001;
t3838 = t3593 * t4001;
t3837 = t3617 * t4001;
t3836 = t3618 * t4001;
t3835 = t3456 * t4000;
t3834 = t3594 * t4000;
t3833 = t3619 * t4000;
t3832 = t3620 * t4000;
t3831 = t3458 * t3999;
t3830 = t3595 * t3999;
t3829 = t3621 * t3999;
t3828 = t3622 * t3999;
t3827 = t3591 * t3998;
t3826 = t3607 * t3997;
t3825 = t3609 * t3997;
t3824 = t3593 * t3996;
t3823 = t3611 * t3995;
t3822 = t3617 * t3995;
t3821 = t3594 * t3994;
t3820 = t3613 * t3993;
t3819 = t3619 * t3993;
t3818 = t3595 * t3992;
t3817 = t3615 * t3991;
t3816 = t3621 * t3991;
t3815 = t3367 * t3945;
t3814 = t3367 * t3943;
t3813 = t3368 * t3939;
t3812 = t3368 * t3937;
t3811 = t3369 * t3933;
t3810 = t3369 * t3931;
t3809 = t3370 * t3927;
t3808 = t3370 * t3925;
t3807 = t3429 * t3981;
t3806 = t3412 * t3968;
t3805 = t3437 * t3978;
t3804 = t3438 * t3976;
t3803 = t3439 * t3974;
t3802 = t3417 * t3963;
t3801 = t3418 * t3961;
t3800 = t3419 * t3959;
t3799 = t3429 * t3968;
t3798 = t3437 * t3963;
t3797 = t3438 * t3961;
t3796 = t3439 * t3959;
t3795 = t3451 * t3899;
t3794 = t3451 * t3885;
t3793 = t3451 * t3883;
t3792 = t3607 * t3942;
t3791 = t3451 * t3867;
t3790 = t3452 * t3870;
t3789 = t3454 * t3891;
t3788 = t3454 * t3882;
t3787 = t3454 * t3876;
t3786 = t3611 * t3936;
t3785 = t3454 * t3854;
t3784 = t3455 * t3865;
t3783 = t3456 * t3889;
t3782 = t3456 * t3880;
t3781 = t3456 * t3875;
t3780 = t3613 * t3930;
t3779 = t3456 * t3853;
t3778 = t3457 * t3861;
t3777 = t3458 * t3887;
t3776 = t3458 * t3878;
t3775 = t3458 * t3874;
t3774 = t3615 * t3924;
t3773 = t3458 * t3852;
t3772 = t3459 * t3857;
t3771 = t3479 * t3872;
t3770 = t3479 * t3871;
t3769 = t3479 * t3869;
t3768 = t3483 * t3872;
t3767 = t3483 * t3866;
t3766 = t3483 * t3864;
t3765 = t3485 * t3872;
t3764 = t3485 * t3862;
t3763 = t3485 * t3860;
t3762 = t3487 * t3872;
t3761 = t3487 * t3858;
t3760 = t3487 * t3856;
t3759 = t3568 * t3902;
t3758 = t3571 * t3898;
t3757 = t3572 * t3896;
t3756 = t3573 * t3894;
t3747 = (t3975 + t3977 + t3979 + t3982) * MDP(1) + (t3429 * t3942 + t3437 * t3936 + t3438 * t3930 + t3439 * t3924) * t4008 + (-t3429 * t3944 - t3437 * t3938 - t3438 * t3932 - t3439 * t3926) * t4007;
t3746 = (t3971 + t3972 + t3973 + t3980) * MDP(1) + (t3430 * t3942 + t3440 * t3936 + t3441 * t3930 + t3442 * t3924) * t4008 + (-t3430 * t3944 - t3440 * t3938 - t3441 * t3932 - t3442 * t3926) * t4007;
t3745 = t3590 * MDP(13) - t3589 * MDP(14);
t3744 = t3607 * t3847;
t3743 = t3609 * t3847;
t3742 = t3611 * t3846;
t3741 = t3617 * t3846;
t3740 = t3613 * t3845;
t3739 = t3619 * t3845;
t3738 = t3615 * t3844;
t3737 = t3621 * t3844;
t3736 = t3451 * t3842;
t3735 = t3607 * t3841;
t3734 = t3454 * t3838;
t3733 = t3611 * t3837;
t3732 = t3456 * t3834;
t3731 = t3613 * t3833;
t3730 = t3458 * t3830;
t3729 = t3615 * t3829;
t3728 = t3870 * t3998;
t3727 = t3865 * t3996;
t3726 = t3861 * t3994;
t3725 = t3857 * t3992;
t3724 = t3429 * t3443 * t3946;
t3723 = t3430 * t3444 * t3946;
t3722 = t3437 * t3445 * t3940;
t3721 = t3438 * t3446 * t3934;
t3720 = t3439 * t3447 * t3928;
t3719 = t3440 * t3448 * t3940;
t3718 = t3441 * t3449 * t3934;
t3717 = t3442 * t3450 * t3928;
t3716 = t3479 * t3608 * t3886;
t3715 = t3483 * t3612 * t3886;
t3714 = t3485 * t3614 * t3886;
t3713 = t3487 * t3616 * t3886;
t3712 = t3568 * t3499;
t3711 = t3568 * t3503;
t3710 = t3571 * t3500;
t3709 = t3571 * t3504;
t3708 = t3572 * t3501;
t3707 = t3572 * t3505;
t3706 = t3573 * t3502;
t3705 = t3573 * t3506;
t3331 = (-((t3503 * t3873 + t3712) * t3867 - (-t3499 * t3623 + t3602 * t3711) * t3869 + t3503 * t3759) * t3539 + t3543 * ((-t3499 * t3873 + t3711) * t3867 + (t3503 * t3623 + t3602 * t3712) * t3869 - t3499 * t3759)) / (t3510 * t3568 - t3570 * t3900);
t3332 = (-((t3504 * t3873 + t3710) * t3854 - (-t3500 * t3623 + t3602 * t3709) * t3864 + t3504 * t3758) * t3540 + t3544 * ((-t3500 * t3873 + t3709) * t3854 + (t3504 * t3623 + t3602 * t3710) * t3864 - t3500 * t3758)) / (t3520 * t3571 - t3574 * t3892);
t3333 = (-((t3505 * t3873 + t3708) * t3853 - (-t3501 * t3623 + t3602 * t3707) * t3860 + t3505 * t3757) * t3541 + t3545 * ((-t3501 * t3873 + t3707) * t3853 + (t3505 * t3623 + t3602 * t3708) * t3860 - t3501 * t3757)) / (t3522 * t3572 - t3575 * t3890);
t3334 = (-((t3506 * t3873 + t3706) * t3852 - (-t3502 * t3623 + t3602 * t3705) * t3856 + t3506 * t3756) * t3542 + t3546 * ((-t3502 * t3873 + t3705) * t3852 + (t3506 * t3623 + t3602 * t3706) * t3856 - t3502 * t3756)) / (t3524 * t3573 - t3576 * t3888);
t3704 = t3451 * t3735;
t3703 = t3454 * t3733;
t3702 = t3456 * t3731;
t3701 = t3458 * t3729;
t3700 = t3607 * t3716;
t3699 = t3609 * t3716;
t3698 = t3611 * t3715;
t3697 = t3617 * t3715;
t3696 = t3613 * t3714;
t3695 = t3619 * t3714;
t3694 = t3615 * t3713;
t3693 = t3621 * t3713;
t3692 = -t3589 * MDP(13) - t3590 * MDP(14);
t3691 = t3311 * t3429 + t3363 * t3411;
t3690 = t3311 * t3430 + t3363 * t3412;
t3689 = t3316 * t3437 + t3364 * t3414;
t3688 = t3316 * t3440 + t3364 * t3417;
t3687 = t3317 * t3438 + t3365 * t3415;
t3686 = t3317 * t3441 + t3365 * t3418;
t3685 = t3318 * t3439 + t3366 * t3416;
t3684 = t3318 * t3442 + t3366 * t3419;
t3675 = t3311 * t3899 + t3363 * t4017;
t3674 = t3316 * t3891 + t3364 * t4017;
t3673 = t3317 * t3889 + t3365 * t4017;
t3672 = t3318 * t3887 + t3366 * t4017;
t3671 = t3411 * t3899 + t3429 * t4017;
t3670 = t3412 * t3899 + t3430 * t4017;
t3669 = t3414 * t3891 + t3437 * t4017;
t3668 = t3415 * t3889 + t3438 * t4017;
t3667 = t3416 * t3887 + t3439 * t4017;
t3666 = t3417 * t3891 + t3440 * t4017;
t3665 = t3418 * t3889 + t3441 * t4017;
t3664 = t3419 * t3887 + t3442 * t4017;
t3659 = t3311 * t4002 + t3331 * t3363;
t3658 = t3316 * t4001 + t3332 * t3364;
t3657 = t3317 * t4000 + t3333 * t3365;
t3656 = t3318 * t3999 + t3334 * t3366;
t3655 = t3331 * t3429 + t3411 * t4002;
t3654 = t3331 * t3430 + t3412 * t4002;
t3653 = t3332 * t3437 + t3414 * t4001;
t3652 = t3332 * t3440 + t3417 * t4001;
t3651 = t3333 * t3438 + t3415 * t4000;
t3650 = t3333 * t3441 + t3418 * t4000;
t3649 = t3334 * t3439 + t3416 * t3999;
t3648 = t3334 * t3442 + t3419 * t3999;
t3647 = (t3429 * t3444 + t3430 * t3443) * t3946;
t3646 = (t3437 * t3448 + t3440 * t3445) * t3940;
t3645 = (t3438 * t3449 + t3441 * t3446) * t3934;
t3644 = (t3439 * t3450 + t3442 * t3447) * t3928;
t3643 = t3479 * (t3407 * t3970 + t3443 * t4002);
t3642 = t3479 * (t3407 * t3969 + t3444 * t4002);
t3641 = t3483 * (t3408 * t3967 + t3445 * t4001);
t3640 = t3483 * (t3408 * t3964 + t3448 * t4001);
t3639 = t3485 * (t3409 * t3966 + t3446 * t4000);
t3638 = t3485 * (t3409 * t3962 + t3449 * t4000);
t3637 = t3487 * (t3410 * t3965 + t3447 * t3999);
t3636 = t3487 * (t3410 * t3960 + t3450 * t3999);
t3635 = (-t3608 * t4025 - t3612 * t4024 - t3614 * t4023 - t3616 * t4022) * t4007 + (t3610 * t4025 + t3618 * t4024 + t3620 * t4023 + t3622 * t4022) * t4008 + (t3607 * t3647 + t3611 * t3646 + t3613 * t3645 + t3615 * t3644) * t4006 + (t3609 * t3647 + t3617 * t3646 + t3619 * t3645 + t3621 * t3644) * t4005 + (t3412 * t3981 + t3417 * t3978 + t3418 * t3976 + t3419 * t3974) * MDP(1) + (t3429 * t3430 * t3790 + t3437 * t3440 * t3784 + t3438 * t3441 * t3778 + t3439 * t3442 * t3772) * t4016 + (t3591 * t3799 + t3593 * t3798 + t3594 * t3797 + t3595 * t3796) * MDP(5) + (t3796 + t3797 + t3798 + t3799) * MDP(2) + (t3443 * t3956 + t3445 * t3951 + t3446 * t3949 + t3447 * t3947) * t4003;
t3559 = (t3589 ^ 2 + t3590 ^ 2) * MDP(15);
t3436 = t3442 ^ 2;
t3435 = t3441 ^ 2;
t3434 = t3440 ^ 2;
t3433 = t3439 ^ 2;
t3432 = t3438 ^ 2;
t3431 = t3437 ^ 2;
t3428 = t3430 ^ 2;
t3427 = t3429 ^ 2;
t3396 = t3442 * t3777 + t3450 * t3762;
t3395 = t3439 * t3777 + t3447 * t3762;
t3394 = t3441 * t3783 + t3449 * t3765;
t3393 = t3438 * t3783 + t3446 * t3765;
t3392 = t3440 * t3789 + t3448 * t3768;
t3391 = t3437 * t3789 + t3445 * t3768;
t3388 = t3396 * t3615;
t3387 = t3396 * t3621;
t3386 = t3395 * t3615;
t3385 = t3395 * t3621;
t3384 = t3394 * t3613;
t3383 = t3394 * t3619;
t3382 = t3393 * t3613;
t3381 = t3393 * t3619;
t3380 = t3392 * t3611;
t3379 = t3392 * t3617;
t3378 = t3391 * t3611;
t3377 = t3391 * t3617;
t3376 = t3430 * t3795 + t3444 * t3771;
t3375 = t3429 * t3795 + t3443 * t3771;
t3374 = t3376 * t3607;
t3373 = t3376 * t3609;
t3372 = t3375 * t3607;
t3371 = t3375 * t3609;
t3358 = (pkin(6) * t3442 + t3419 * t3893) * t3458;
t3357 = (pkin(6) * t3439 + t3416 * t3893) * t3458;
t3356 = (pkin(6) * t3441 + t3418 * t3895) * t3456;
t3355 = (pkin(6) * t3438 + t3415 * t3895) * t3456;
t3354 = (pkin(6) * t3440 + t3417 * t3897) * t3454;
t3353 = (pkin(6) * t3437 + t3414 * t3897) * t3454;
t3352 = (pkin(6) * t3430 + t3412 * t3901) * t3451;
t3351 = (pkin(6) * t3429 + t3411 * t3901) * t3451;
t3350 = -t3450 * t3693 - t3388;
t3349 = -t3450 * t3694 + t3387;
t3348 = -t3447 * t3693 - t3386;
t3347 = -t3447 * t3694 + t3385;
t3346 = -t3449 * t3695 - t3384;
t3345 = -t3449 * t3696 + t3383;
t3344 = -t3446 * t3695 - t3382;
t3343 = -t3446 * t3696 + t3381;
t3342 = -t3448 * t3697 - t3380;
t3341 = -t3448 * t3698 + t3379;
t3340 = -t3445 * t3697 - t3378;
t3339 = -t3445 * t3698 + t3377;
t3338 = -t3444 * t3699 - t3374;
t3337 = -t3444 * t3700 + t3373;
t3336 = -t3443 * t3699 - t3372;
t3335 = -t3443 * t3700 + t3371;
t3330 = -t3450 * t3737 - t3664 * t3927;
t3329 = -t3447 * t3737 - t3667 * t3927;
t3328 = -t3450 * t3738 + t3664 * t3925;
t3327 = -t3447 * t3738 + t3667 * t3925;
t3326 = -t3448 * t3741 - t3666 * t3939;
t3325 = -t3445 * t3741 - t3669 * t3939;
t3324 = -t3448 * t3742 + t3666 * t3937;
t3323 = -t3445 * t3742 + t3669 * t3937;
t3322 = -t3449 * t3739 - t3665 * t3933;
t3321 = -t3446 * t3739 - t3668 * t3933;
t3320 = -t3449 * t3740 + t3665 * t3931;
t3319 = -t3446 * t3740 + t3668 * t3931;
t3315 = -t3444 * t3743 - t3670 * t3945;
t3314 = -t3443 * t3743 - t3671 * t3945;
t3313 = -t3444 * t3744 + t3670 * t3943;
t3312 = -t3443 * t3744 + t3671 * t3943;
t3306 = t3366 * t3887 + t3370 * t3602;
t3305 = t3365 * t3889 + t3369 * t3602;
t3304 = t3364 * t3891 + t3368 * t3602;
t3303 = t3306 * t3615;
t3302 = t3306 * t3621;
t3301 = t3305 * t3613;
t3300 = t3305 * t3619;
t3299 = t3304 * t3611;
t3298 = t3304 * t3617;
t3297 = t3363 * t3899 + t3367 * t3602;
t3296 = t3297 * t3607;
t3295 = t3297 * t3609;
t3294 = -t3358 * t3621 - t3419 * t3776;
t3293 = -t3357 * t3621 - t3416 * t3776;
t3292 = -t3356 * t3619 - t3418 * t3782;
t3291 = -t3355 * t3619 - t3415 * t3782;
t3290 = -t3354 * t3617 - t3417 * t3788;
t3289 = -t3353 * t3617 - t3414 * t3788;
t3288 = -t3358 * t3615 + t3419 * t3775;
t3287 = -t3357 * t3615 + t3416 * t3775;
t3286 = -t3356 * t3613 + t3418 * t3781;
t3285 = -t3355 * t3613 + t3415 * t3781;
t3284 = -t3354 * t3611 + t3417 * t3787;
t3283 = -t3353 * t3611 + t3414 * t3787;
t3282 = -t3352 * t3609 - t3412 * t3794;
t3281 = -t3351 * t3609 - t3411 * t3794;
t3280 = -t3352 * t3607 + t3412 * t3793;
t3279 = -t3351 * t3607 + t3411 * t3793;
t3277 = pkin(6) * t3366 + t3318 * t3893;
t3276 = pkin(6) * t3365 + t3317 * t3895;
t3275 = pkin(6) * t3364 + t3316 * t3897;
t3274 = pkin(6) * t3363 + t3311 * t3901;
t3271 = -t3370 * t3748 - t3303;
t3270 = -t3370 * t3749 + t3302;
t3269 = -t3369 * t3750 - t3301;
t3268 = -t3369 * t3751 + t3300;
t3267 = -t3368 * t3752 - t3299;
t3266 = -t3368 * t3753 + t3298;
t3264 = -t3367 * t3754 - t3296;
t3263 = -t3367 * t3755 + t3295;
t3260 = -pkin(6) * t3370 * t3621 - t3672 * t3615;
t3259 = -pkin(6) * t3987 + t3672 * t3621;
t3258 = -pkin(6) * t3368 * t3617 - t3674 * t3611;
t3257 = -pkin(6) * t3989 + t3674 * t3617;
t3256 = -pkin(6) * t3369 * t3619 - t3673 * t3613;
t3255 = -pkin(6) * t3988 + t3673 * t3619;
t3254 = -pkin(6) * t3367 * t3609 - t3675 * t3607;
t3253 = -pkin(6) * t3990 + t3675 * t3609;
t3252 = -t3277 * t3621 - t3318 * t3878;
t3251 = -t3276 * t3619 - t3317 * t3880;
t3250 = -t3275 * t3617 - t3316 * t3882;
t3249 = -t3277 * t3615 + t3318 * t3874;
t3248 = -t3276 * t3613 + t3317 * t3875;
t3247 = -t3275 * t3611 + t3316 * t3876;
t3246 = -t3274 * t3609 - t3311 * t3885;
t3245 = -t3274 * t3607 + t3311 * t3883;
t1 = [(t3411 ^ 2 * t3452 + t3414 ^ 2 * t3455 + t3415 ^ 2 * t3457 + t3416 ^ 2 * t3459) * MDP(1) + (t3427 * t3452 + t3431 * t3455 + t3432 * t3457 + t3433 * t3459) * MDP(2) + (t3427 * t3941 + t3431 * t3935 + t3432 * t3929 + t3433 * t3923) * MDP(5) + (t3427 * t3790 + t3431 * t3784 + t3432 * t3778 + t3433 * t3772) * t4016 + t3559 + ((t3327 * t3439 + t3347 * t3416) * MDP(10) + (t3329 * t3439 + t3348 * t3416) * MDP(11)) * t3458 + ((t3319 * t3438 + t3343 * t3415) * MDP(10) + (t3321 * t3438 + t3344 * t3415) * MDP(11)) * t3456 + ((t3323 * t3437 + t3339 * t3414) * MDP(10) + (t3325 * t3437 + t3340 * t3414) * MDP(11)) * t3454 + ((t3312 * t3429 + t3335 * t3411) * MDP(10) + (t3314 * t3429 + t3336 * t3411) * MDP(11)) * t3451 + (t3443 ^ 2 * t3480 + t3445 ^ 2 * t3484 + t3446 ^ 2 * t3486 + t3447 ^ 2 * t3488) * t4003 + ((t3610 * t3807 + t3618 * t3805 + t3620 * t3804 + t3622 * t3803) * MDP(3) + (-t3608 * t3807 - t3612 * t3805 - t3614 * t3804 - t3616 * t3803) * MDP(4)) * t4013 + ((t3279 * t3958 + t3283 * t3955 + t3285 * t3954 + t3287 * t3953) * MDP(10) + (t3281 * t3958 + t3289 * t3955 + t3291 * t3954 + t3293 * t3953) * MDP(11) + (t3607 * t3724 + t3611 * t3722 + t3613 * t3721 + t3615 * t3720) * t4015 + (t3609 * t3724 + t3617 * t3722 + t3619 * t3721 + t3621 * t3720) * t4014) * t3633; ((t3328 * t3439 + t3349 * t3416) * MDP(10) + (t3330 * t3439 + t3350 * t3416) * MDP(11)) * t3458 + ((t3320 * t3438 + t3345 * t3415) * MDP(10) + (t3322 * t3438 + t3346 * t3415) * MDP(11)) * t3456 + ((t3324 * t3437 + t3341 * t3414) * MDP(10) + (t3326 * t3437 + t3342 * t3414) * MDP(11)) * t3454 + ((t3313 * t3429 + t3337 * t3411) * MDP(10) + (t3315 * t3429 + t3338 * t3411) * MDP(11)) * t3451 + ((t3280 * t3958 + t3284 * t3955 + t3286 * t3954 + t3288 * t3953) * MDP(10) + (t3282 * t3958 + t3290 * t3955 + t3292 * t3954 + t3294 * t3953) * MDP(11)) * t3633 + t3635; ((t3443 * t3922 + t3445 * t3919 + t3446 * t3916 + t3447 * t3913) * MDP(10) + (-t3443 * t3921 - t3445 * t3918 - t3446 * t3915 - t3447 * t3912) * MDP(11)) * t3633 + ((t3429 * t3791 + t3437 * t3785 + t3438 * t3779 + t3439 * t3773) * MDP(10) + (-t3429 * t3792 - t3437 * t3786 - t3438 * t3780 - t3439 * t3774) * MDP(11)) * t3600 + t3747; (t3311 * t3982 + t3316 * t3979 + t3317 * t3977 + t3318 * t3975) * MDP(1) + (t3363 * t3970 + t3364 * t3967 + t3365 * t3966 + t3366 * t3965) * MDP(2) + (t3685 * t3924 + t3687 * t3930 + t3689 * t3936 + t3691 * t3942) * t4008 + (-t3685 * t3926 - t3687 * t3932 - t3689 * t3938 - t3691 * t3944) * t4007 + (t3429 * t3827 + t3437 * t3824 + t3438 * t3821 + t3439 * t3818) * MDP(5) + (t3429 * t3728 + t3437 * t3727 + t3438 * t3726 + t3439 * t3725) * t4016 + (t3429 * t3815 + t3437 * t3813 + t3438 * t3811 + t3439 * t3809 + (t3443 * t3826 + t3445 * t3823 + t3446 * t3820 + t3447 * t3817) * t3633) * MDP(7) + (t3429 * t3814 + t3437 * t3812 + t3438 * t3810 + t3439 * t3808 + (t3443 * t3825 + t3445 * t3822 + t3446 * t3819 + t3447 * t3816) * t3633) * MDP(8) + (t3367 * t3958 + t3368 * t3955 + t3369 * t3954 + t3370 * t3953) * t4004 + ((t3259 * t3439 + t3270 * t3416) * t3458 + (t3255 * t3438 + t3268 * t3415) * t3456 + (t3257 * t3437 + t3266 * t3414) * t3454 + (t3253 * t3429 + t3263 * t3411) * t3451 + (t3245 * t3958 + t3247 * t3955 + t3248 * t3954 + t3249 * t3953) * t3633) * MDP(10) + ((t3260 * t3439 + t3271 * t3416) * t3458 + (t3256 * t3438 + t3269 * t3415) * t3456 + (t3258 * t3437 + t3267 * t3414) * t3454 + (t3254 * t3429 + t3264 * t3411) * t3451 + (t3246 * t3958 + t3250 * t3955 + t3251 * t3954 + t3252 * t3953) * t3633) * MDP(11) + t3692; ((t3327 * t3442 + t3347 * t3419) * MDP(10) + (t3329 * t3442 + t3348 * t3419) * MDP(11)) * t3458 + ((t3319 * t3441 + t3343 * t3418) * MDP(10) + (t3321 * t3441 + t3344 * t3418) * MDP(11)) * t3456 + ((t3323 * t3440 + t3339 * t3417) * MDP(10) + (t3325 * t3440 + t3340 * t3417) * MDP(11)) * t3454 + ((t3312 * t3430 + t3335 * t3412) * MDP(10) + (t3314 * t3430 + t3336 * t3412) * MDP(11)) * t3451 + ((t3279 * t3957 + t3283 * t3952 + t3285 * t3950 + t3287 * t3948) * MDP(10) + (t3281 * t3957 + t3289 * t3952 + t3291 * t3950 + t3293 * t3948) * MDP(11)) * t3633 + t3635; (t3412 ^ 2 * t3452 + t3417 ^ 2 * t3455 + t3418 ^ 2 * t3457 + t3419 ^ 2 * t3459) * MDP(1) + (t3428 * t3452 + t3434 * t3455 + t3435 * t3457 + t3436 * t3459) * MDP(2) + (t3428 * t3941 + t3434 * t3935 + t3435 * t3929 + t3436 * t3923) * MDP(5) + (t3428 * t3790 + t3434 * t3784 + t3435 * t3778 + t3436 * t3772) * t4016 + t3559 + ((t3328 * t3442 + t3349 * t3419) * MDP(10) + (t3330 * t3442 + t3350 * t3419) * MDP(11)) * t3458 + ((t3320 * t3441 + t3345 * t3418) * MDP(10) + (t3322 * t3441 + t3346 * t3418) * MDP(11)) * t3456 + ((t3324 * t3440 + t3341 * t3417) * MDP(10) + (t3326 * t3440 + t3342 * t3417) * MDP(11)) * t3454 + ((t3313 * t3430 + t3337 * t3412) * MDP(10) + (t3315 * t3430 + t3338 * t3412) * MDP(11)) * t3451 + (t3444 ^ 2 * t3480 + t3448 ^ 2 * t3484 + t3449 ^ 2 * t3486 + t3450 ^ 2 * t3488) * t4003 + ((t3610 * t3806 + t3618 * t3802 + t3620 * t3801 + t3622 * t3800) * MDP(3) + (-t3608 * t3806 - t3612 * t3802 - t3614 * t3801 - t3616 * t3800) * MDP(4)) * t4013 + ((t3280 * t3957 + t3284 * t3952 + t3286 * t3950 + t3288 * t3948) * MDP(10) + (t3282 * t3957 + t3290 * t3952 + t3292 * t3950 + t3294 * t3948) * MDP(11) + (t3607 * t3723 + t3611 * t3719 + t3613 * t3718 + t3615 * t3717) * t4015 + (t3609 * t3723 + t3617 * t3719 + t3619 * t3718 + t3621 * t3717) * t4014) * t3633; ((t3444 * t3922 + t3448 * t3919 + t3449 * t3916 + t3450 * t3913) * MDP(10) + (-t3444 * t3921 - t3448 * t3918 - t3449 * t3915 - t3450 * t3912) * MDP(11)) * t3633 + ((t3430 * t3791 + t3440 * t3785 + t3441 * t3779 + t3442 * t3773) * MDP(10) + (-t3430 * t3792 - t3440 * t3786 - t3441 * t3780 - t3442 * t3774) * MDP(11)) * t3600 + t3746; (t3311 * t3980 + t3316 * t3973 + t3317 * t3972 + t3318 * t3971) * MDP(1) + (t3363 * t3969 + t3364 * t3964 + t3365 * t3962 + t3366 * t3960) * MDP(2) + (t3684 * t3924 + t3686 * t3930 + t3688 * t3936 + t3690 * t3942) * t4008 + (-t3684 * t3926 - t3686 * t3932 - t3688 * t3938 - t3690 * t3944) * t4007 + (t3430 * t3827 + t3440 * t3824 + t3441 * t3821 + t3442 * t3818) * MDP(5) + (t3430 * t3728 + t3440 * t3727 + t3441 * t3726 + t3442 * t3725) * t4016 + (t3430 * t3815 + t3440 * t3813 + t3441 * t3811 + t3442 * t3809 + (t3444 * t3826 + t3448 * t3823 + t3449 * t3820 + t3450 * t3817) * t3633) * MDP(7) + (t3430 * t3814 + t3440 * t3812 + t3441 * t3810 + t3442 * t3808 + (t3444 * t3825 + t3448 * t3822 + t3449 * t3819 + t3450 * t3816) * t3633) * MDP(8) + (t3367 * t3957 + t3368 * t3952 + t3369 * t3950 + t3370 * t3948) * t4004 + ((t3259 * t3442 + t3270 * t3419) * t3458 + (t3255 * t3441 + t3268 * t3418) * t3456 + (t3257 * t3440 + t3266 * t3417) * t3454 + (t3253 * t3430 + t3263 * t3412) * t3451 + (t3245 * t3957 + t3247 * t3952 + t3248 * t3950 + t3249 * t3948) * t3633) * MDP(10) + ((t3260 * t3442 + t3271 * t3419) * t3458 + (t3256 * t3441 + t3269 * t3418) * t3456 + (t3258 * t3440 + t3267 * t3417) * t3454 + (t3254 * t3430 + t3264 * t3412) * t3451 + (t3246 * t3957 + t3250 * t3952 + t3251 * t3950 + t3252 * t3948) * t3633) * MDP(11) + t3745; (t3371 + t3377 + t3381 + t3385) * MDP(10) + (-t3372 - t3378 - t3382 - t3386) * MDP(11) + ((-t3443 * t3770 - t3445 * t3767 - t3446 * t3764 - t3447 * t3761) * MDP(10) + (-t3443 * t3769 - t3445 * t3766 - t3446 * t3763 - t3447 * t3760) * MDP(11)) * t3886 + t3747; (t3373 + t3379 + t3383 + t3387) * MDP(10) + (-t3374 - t3380 - t3384 - t3388) * MDP(11) + ((-t3444 * t3770 - t3448 * t3767 - t3449 * t3764 - t3450 * t3761) * MDP(10) + (-t3444 * t3769 - t3448 * t3766 - t3449 * t3763 - t3450 * t3760) * MDP(11)) * t3886 + t3746; 0.4e1 * MDP(1) + MDP(15); (t3318 + t3317 + t3316 + t3311) * MDP(1) + (t3295 + t3298 + t3300 + t3302) * MDP(10) + (-t3296 - t3299 - t3301 - t3303) * MDP(11) + ((t3363 * t3610 + t3364 * t3618 + t3365 * t3620 + t3366 * t3622) * MDP(3) + (-t3363 * t3608 - t3364 * t3612 - t3365 * t3614 - t3366 * t3616) * MDP(4) + (-t3367 * t3871 - t3368 * t3866 - t3369 * t3862 - t3370 * t3858) * MDP(10) + (-t3367 * t3869 - t3368 * t3864 - t3369 * t3860 - t3370 * t3856) * MDP(11)) * t3600; (t3331 * t3982 + t3332 * t3979 + t3333 * t3977 + t3334 * t3975) * MDP(1) + (t3429 * t3843 + t3437 * t3839 + t3438 * t3835 + t3439 * t3831) * MDP(2) + (t3649 * t3924 + t3651 * t3930 + t3653 * t3936 + t3655 * t3942) * t4008 + (-t3649 * t3926 - t3651 * t3932 - t3653 * t3938 - t3655 * t3944) * t4007 + (t3429 * t3736 + t3437 * t3734 + t3438 * t3732 + t3439 * t3730) * MDP(5) + (t3429 * t3704 + t3437 * t3703 + t3438 * t3702 + t3439 * t3701) * t4016 + (t3607 * t3643 + t3611 * t3641 + t3613 * t3639 + t3615 * t3637) * t4006 + (t3609 * t3643 + t3617 * t3641 + t3619 * t3639 + t3621 * t3637) * t4005 + (t3407 * t3443 * t3480 + t3408 * t3445 * t3484 + t3409 * t3446 * t3486 + t3410 * t3447 * t3488) * t4003 + (t3312 * t4002 + t3319 * t4000 + t3323 * t4001 + t3327 * t3999 + t3331 * t3335 + t3332 * t3339 + t3333 * t3343 + t3334 * t3347 + (t3279 * t3986 + t3283 * t3985 + t3285 * t3984 + t3287 * t3983) * t3633) * MDP(10) + (t3314 * t4002 + t3321 * t4000 + t3325 * t4001 + t3329 * t3999 + t3331 * t3336 + t3332 * t3340 + t3333 * t3344 + t3334 * t3348 + (t3281 * t3986 + t3289 * t3985 + t3291 * t3984 + t3293 * t3983) * t3633) * MDP(11) + t3692; (t3331 * t3980 + t3332 * t3973 + t3333 * t3972 + t3334 * t3971) * MDP(1) + (t3430 * t3843 + t3440 * t3839 + t3441 * t3835 + t3442 * t3831) * MDP(2) + (t3648 * t3924 + t3650 * t3930 + t3652 * t3936 + t3654 * t3942) * t4008 + (-t3648 * t3926 - t3650 * t3932 - t3652 * t3938 - t3654 * t3944) * t4007 + (t3430 * t3736 + t3440 * t3734 + t3441 * t3732 + t3442 * t3730) * MDP(5) + (t3430 * t3704 + t3440 * t3703 + t3441 * t3702 + t3442 * t3701) * t4016 + (t3607 * t3642 + t3611 * t3640 + t3613 * t3638 + t3615 * t3636) * t4006 + (t3609 * t3642 + t3617 * t3640 + t3619 * t3638 + t3621 * t3636) * t4005 + (t3407 * t3956 + t3408 * t3951 + t3409 * t3949 + t3410 * t3947) * t4003 + (t3313 * t4002 + t3320 * t4000 + t3324 * t4001 + t3328 * t3999 + t3331 * t3337 + t3332 * t3341 + t3333 * t3345 + t3334 * t3349 + (t3280 * t3986 + t3284 * t3985 + t3286 * t3984 + t3288 * t3983) * t3633) * MDP(10) + (t3315 * t4002 + t3322 * t4000 + t3326 * t4001 + t3330 * t3999 + t3331 * t3338 + t3332 * t3342 + t3333 * t3346 + t3334 * t3350 + (t3282 * t3986 + t3290 * t3985 + t3292 * t3984 + t3294 * t3983) * t3633) * MDP(11) + t3745; (t3331 + t3332 + t3333 + t3334) * MDP(1) + ((t3407 * t3922 + t3408 * t3919 + t3409 * t3916 + t3410 * t3913) * MDP(10) + (-t3407 * t3921 - t3408 * t3918 - t3409 * t3915 - t3410 * t3912) * MDP(11)) * t3633 + ((t3828 + t3832 + t3836 + t3840) * MDP(3) + (-t3608 * t4002 - t3612 * t4001 - t3614 * t4000 - t3616 * t3999) * MDP(4) + (t3609 * t3840 + t3617 * t3836 + t3619 * t3832 + t3621 * t3828) * MDP(10) + (-t3607 * t3840 - t3611 * t3836 - t3613 * t3832 - t3615 * t3828) * MDP(11)) * t3600; (t3311 * t3331 + t3316 * t3332 + t3317 * t3333 + t3318 * t3334) * MDP(1) + (t3363 * t4002 + t3364 * t4001 + t3365 * t4000 + t3366 * t3999) * MDP(2) + (t3610 * t3659 + t3618 * t3658 + t3620 * t3657 + t3622 * t3656) * t4008 + (-t3608 * t3659 - t3612 * t3658 - t3614 * t3657 - t3616 * t3656) * t4007 + (t3363 * t3842 + t3364 * t3838 + t3365 * t3834 + t3366 * t3830) * MDP(5) + (t3363 * t3735 + t3364 * t3733 + t3365 * t3731 + t3366 * t3729) * t4016 + (t3990 * t4002 + t3989 * t4001 + t3988 * t4000 + t3987 * t3999 + (t3407 * t3826 + t3408 * t3823 + t3409 * t3820 + t3410 * t3817) * t3633) * MDP(7) + (t3367 * t3841 + t3368 * t3837 + t3369 * t3833 + t3370 * t3829 + (t3407 * t3825 + t3408 * t3822 + t3409 * t3819 + t3410 * t3816) * t3633) * MDP(8) + (t3367 * t3986 + t3368 * t3985 + t3369 * t3984 + t3370 * t3983) * t4004 + (t3253 * t4002 + t3255 * t4000 + t3257 * t4001 + t3259 * t3999 + t3331 * t3263 + t3332 * t3266 + t3333 * t3268 + t3334 * t3270 + (t3245 * t3986 + t3247 * t3985 + t3248 * t3984 + t3249 * t3983) * t3633) * MDP(10) + (t3254 * t4002 + t3256 * t4000 + t3258 * t4001 + t3260 * t3999 + t3331 * t3264 + t3332 * t3267 + t3333 * t3269 + t3334 * t3271 + (t3246 * t3986 + t3250 * t3985 + t3251 * t3984 + t3252 * t3983) * t3633) * MDP(11) + MDP(12);];
%% Postprocessing: Reshape Output
% From vec2mat_4_matlab.m
res = [t1(1), t1(2), t1(3), t1(4); t1(5), t1(6), t1(7), t1(8); t1(9), t1(10), t1(11), t1(12); t1(13), t1(14), t1(15), t1(16);];
MMX  = res;
