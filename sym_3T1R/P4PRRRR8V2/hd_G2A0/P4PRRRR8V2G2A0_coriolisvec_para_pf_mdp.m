% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taucX [4x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:22
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G2A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:21:18
% EndTime: 2020-08-07 11:21:54
% DurationCPUTime: 37.44s
% Computational Cost: add. (178132->820), mult. (365816->1647), div. (10244->22), fcn. (289976->30), ass. (0->629)
t4881 = sin(qJ(2,4));
t4882 = cos(qJ(3,4));
t5185 = t4881 * t4882;
t4883 = cos(qJ(2,4));
t4904 = pkin(7) + pkin(6);
t4838 = t4883 * t4904;
t5329 = pkin(2) * t4881 - t4838;
t4781 = pkin(3) * t5185 + t5329;
t5300 = pkin(3) * t4882;
t4836 = pkin(2) + t5300;
t4879 = cos(pkin(4));
t4880 = sin(qJ(3,4));
t5201 = t4879 * t4880;
t4807 = t4836 * t5201;
t4877 = sin(pkin(4));
t5222 = t4877 * t4882;
t4728 = t4781 * t5222 + t4807;
t4725 = 0.1e1 / t4728;
t4889 = sin(qJ(2,3));
t4894 = cos(qJ(3,3));
t5182 = t4889 * t4894;
t4895 = cos(qJ(2,3));
t4845 = t4895 * t4904;
t5328 = pkin(2) * t4889 - t4845;
t4782 = pkin(3) * t5182 + t5328;
t5299 = pkin(3) * t4894;
t4839 = pkin(2) + t5299;
t4888 = sin(qJ(3,3));
t5198 = t4879 * t4888;
t4808 = t4839 * t5198;
t5214 = t4877 * t4894;
t4742 = t4782 * t5214 + t4808;
t4733 = 0.1e1 / t4742;
t4891 = sin(qJ(2,2));
t4896 = cos(qJ(3,2));
t5179 = t4891 * t4896;
t4897 = cos(qJ(2,2));
t4846 = t4897 * t4904;
t5327 = pkin(2) * t4891 - t4846;
t4783 = pkin(3) * t5179 + t5327;
t5298 = pkin(3) * t4896;
t4840 = pkin(2) + t5298;
t4890 = sin(qJ(3,2));
t5196 = t4879 * t4890;
t4809 = t4840 * t5196;
t5212 = t4877 * t4896;
t4743 = t4783 * t5212 + t4809;
t4735 = 0.1e1 / t4743;
t4893 = sin(qJ(2,1));
t4898 = cos(qJ(3,1));
t5176 = t4893 * t4898;
t4899 = cos(qJ(2,1));
t4847 = t4899 * t4904;
t5326 = pkin(2) * t4893 - t4847;
t4784 = pkin(3) * t5176 + t5326;
t5297 = pkin(3) * t4898;
t4841 = pkin(2) + t5297;
t4892 = sin(qJ(3,1));
t5194 = t4879 * t4892;
t4810 = t4841 * t5194;
t5210 = t4877 * t4898;
t4744 = t4784 * t5210 + t4810;
t4737 = 0.1e1 / t4744;
t4772 = pkin(3) * t5194 + t4877 * t5326;
t4874 = t4898 ^ 2;
t5301 = pkin(3) * t4874;
t5160 = t4893 * t5301;
t4720 = 0.1e1 / (pkin(2) * t5194 + t4772 * t4898 + t4877 * t5160);
t4771 = pkin(3) * t5196 + t4877 * t5327;
t4873 = t4896 ^ 2;
t5302 = pkin(3) * t4873;
t5161 = t4891 * t5302;
t4719 = 0.1e1 / (pkin(2) * t5196 + t4771 * t4896 + t4877 * t5161);
t4770 = pkin(3) * t5198 + t4877 * t5328;
t4872 = t4894 ^ 2;
t5303 = pkin(3) * t4872;
t5162 = t4889 * t5303;
t4718 = 0.1e1 / (pkin(2) * t5198 + t4770 * t4894 + t4877 * t5162);
t4769 = pkin(3) * t5201 + t4877 * t5329;
t4868 = t4882 ^ 2;
t5304 = pkin(3) * t4868;
t5163 = t4881 * t5304;
t4717 = 0.1e1 / (pkin(2) * t5201 + t4769 * t4882 + t4877 * t5163);
t5348 = t4877 * (t4898 * t5326 + t5160);
t5347 = t4877 * (t4896 * t5327 + t5161);
t5346 = t4877 * (t4894 * t5328 + t5162);
t5345 = t4877 * (t4882 * t5329 + t5163);
t4915 = 0.1e1 / pkin(3);
t4905 = xP(4);
t4865 = sin(t4905);
t4866 = cos(t4905);
t4909 = koppelP(1,2);
t4913 = koppelP(1,1);
t4802 = t4865 * t4913 + t4866 * t4909;
t4887 = legFrame(1,2);
t4857 = sin(t4887);
t4861 = cos(t4887);
t4900 = xDP(4);
t4902 = xDP(2);
t4903 = xDP(1);
t4982 = t4865 * t4909 - t4866 * t4913;
t4710 = -(t4900 * t4982 - t4902) * t4857 + (t4802 * t4900 - t4903) * t4861;
t4876 = sin(pkin(8));
t4878 = cos(pkin(8));
t4901 = xDP(3);
t5202 = t4878 * t4901;
t4704 = t4710 * t4876 - t5202;
t4796 = t4841 * t4893 - t4847;
t4835 = t4901 * t4876;
t4844 = t4893 * t4904;
t4688 = (t4841 * t4899 + t4844) * t4704 * t4879 + (t4710 * t4878 + t4835) * t4796;
t4756 = t4796 * t5210 + t4810;
t5265 = t4688 / t4756;
t5107 = t4915 * t5265;
t5079 = pkin(6) * t5107;
t5189 = t4879 * t4901;
t5193 = t4879 * t4893;
t4680 = ((t4710 * t5193 - t4899 * t4901) * t4876 - (t4710 * t4899 + t4893 * t5189) * t4878) * t4892 + t4704 * t5210;
t5273 = t4680 * t4737;
t5306 = pkin(2) * t4892;
t4654 = t5273 * t5306 + t4898 * t5079 / 0.2e1;
t5122 = t4898 * t5273;
t4657 = pkin(2) * t5122 - t4892 * t5079 / 0.2e1;
t4852 = 0.2e1 * t4874 - 0.1e1;
t5177 = t4892 * t4898;
t5310 = -2 * MDP(11);
t5311 = -2 * MDP(10);
t5344 = t5265 * (0.2e1 * (MDP(5) * t5177 + MDP(6) * t4852) * t5273 + t4654 * t5311 + t4657 * t5310);
t4908 = koppelP(2,2);
t4912 = koppelP(2,1);
t4801 = t4865 * t4912 + t4866 * t4908;
t4886 = legFrame(2,2);
t4856 = sin(t4886);
t4860 = cos(t4886);
t4983 = t4865 * t4908 - t4866 * t4912;
t4709 = -(t4900 * t4983 - t4902) * t4856 + (t4801 * t4900 - t4903) * t4860;
t4703 = t4709 * t4876 - t5202;
t4795 = t4840 * t4891 - t4846;
t4843 = t4891 * t4904;
t4687 = (t4840 * t4897 + t4843) * t4703 * t4879 + (t4709 * t4878 + t4835) * t4795;
t4755 = t4795 * t5212 + t4809;
t5266 = t4687 / t4755;
t5109 = t4915 * t5266;
t5080 = pkin(6) * t5109;
t5195 = t4879 * t4891;
t4679 = ((t4709 * t5195 - t4897 * t4901) * t4876 - (t4709 * t4897 + t4891 * t5189) * t4878) * t4890 + t4703 * t5212;
t5274 = t4679 * t4735;
t5307 = pkin(2) * t4890;
t4653 = t5274 * t5307 + t4896 * t5080 / 0.2e1;
t5125 = t4896 * t5274;
t4656 = pkin(2) * t5125 - t4890 * t5080 / 0.2e1;
t4851 = 0.2e1 * t4873 - 0.1e1;
t5180 = t4890 * t4896;
t5343 = t5266 * (0.2e1 * (MDP(5) * t5180 + MDP(6) * t4851) * t5274 + t4653 * t5311 + t4656 * t5310);
t4907 = koppelP(3,2);
t4911 = koppelP(3,1);
t4800 = t4865 * t4911 + t4866 * t4907;
t4885 = legFrame(3,2);
t4855 = sin(t4885);
t4859 = cos(t4885);
t4984 = t4865 * t4907 - t4866 * t4911;
t4708 = -(t4900 * t4984 - t4902) * t4855 + (t4800 * t4900 - t4903) * t4859;
t4702 = t4708 * t4876 - t5202;
t4794 = t4839 * t4889 - t4845;
t4842 = t4889 * t4904;
t4686 = (t4839 * t4895 + t4842) * t4702 * t4879 + (t4708 * t4878 + t4835) * t4794;
t4754 = t4794 * t5214 + t4808;
t5267 = t4686 / t4754;
t5111 = t4915 * t5267;
t5081 = pkin(6) * t5111;
t5197 = t4879 * t4889;
t4678 = ((t4708 * t5197 - t4895 * t4901) * t4876 - (t4708 * t4895 + t4889 * t5189) * t4878) * t4888 + t4702 * t5214;
t5275 = t4678 * t4733;
t5308 = pkin(2) * t4888;
t4652 = t5275 * t5308 + t4894 * t5081 / 0.2e1;
t5128 = t4894 * t5275;
t4655 = pkin(2) * t5128 - t4888 * t5081 / 0.2e1;
t4850 = 0.2e1 * t4872 - 0.1e1;
t5183 = t4888 * t4894;
t5342 = t5267 * (0.2e1 * (MDP(5) * t5183 + MDP(6) * t4850) * t5275 + t4652 * t5311 + t4655 * t5310);
t5312 = 0.2e1 * MDP(6);
t4849 = 0.2e1 * t4868 - 0.1e1;
t5337 = t4836 * t4879;
t5336 = t4839 * t4879;
t5335 = t4840 * t4879;
t5334 = t4841 * t4879;
t4672 = t4680 ^ 2 / t4744 ^ 2;
t4818 = pkin(2) * t4899 + t4844;
t5190 = t4879 * t4899;
t5226 = t4876 * t4879;
t4716 = (t4876 * t5190 + t4878 * t4893) * t5297 + t4818 * t5226 + t5326 * t4878;
t4789 = t4876 * t5193 - t4878 * t4899;
t4764 = t4789 * t4892 + t4876 * t5210;
t5087 = 0.2e1 * t4764 * t5265;
t4974 = t5087 * t5273;
t5099 = t4720 * t5177;
t5333 = (-t4716 * t4672 + t4974) * t5099;
t4671 = t4679 ^ 2 / t4743 ^ 2;
t4817 = pkin(2) * t4897 + t4843;
t5191 = t4879 * t4897;
t4715 = (t4876 * t5191 + t4878 * t4891) * t5298 + t4817 * t5226 + t5327 * t4878;
t4788 = t4876 * t5195 - t4878 * t4897;
t4762 = t4788 * t4890 + t4876 * t5212;
t5088 = 0.2e1 * t4762 * t5266;
t4975 = t5088 * t5274;
t5101 = t4719 * t5180;
t5332 = (-t4715 * t4671 + t4975) * t5101;
t4670 = t4678 ^ 2 / t4742 ^ 2;
t4816 = pkin(2) * t4895 + t4842;
t5192 = t4879 * t4895;
t4714 = (t4876 * t5192 + t4878 * t4889) * t5299 + t4816 * t5226 + t5328 * t4878;
t4787 = t4876 * t5197 - t4878 * t4895;
t4760 = t4787 * t4888 + t4876 * t5214;
t5089 = 0.2e1 * t4760 * t5267;
t4976 = t5089 * t5275;
t5103 = t4718 * t5183;
t5331 = (-t4714 * t4670 + t4976) * t5103;
t4906 = koppelP(4,2);
t4910 = koppelP(4,1);
t4799 = t4865 * t4910 + t4866 * t4906;
t4884 = legFrame(4,2);
t4854 = sin(t4884);
t4858 = cos(t4884);
t4985 = t4865 * t4906 - t4866 * t4910;
t4707 = -(t4900 * t4985 - t4902) * t4854 + (t4799 * t4900 - t4903) * t4858;
t4701 = t4707 * t4876 - t5202;
t5200 = t4879 * t4881;
t4674 = ((t4707 * t5200 - t4883 * t4901) * t4876 - (t4707 * t4883 + t4881 * t5189) * t4878) * t4880 + t4701 * t5222;
t4669 = t4674 ^ 2 / t4728 ^ 2;
t4837 = t4881 * t4904;
t4812 = pkin(2) * t4883 + t4837;
t5199 = t4879 * t4883;
t4706 = (t4876 * t5199 + t4878 * t4881) * t5300 + t4812 * t5226 + t5329 * t4878;
t4785 = t4876 * t5200 - t4878 * t4883;
t4953 = t4785 * t4880 + t4876 * t5222;
t4793 = t4836 * t4881 - t4838;
t4682 = (t4836 * t4883 + t4837) * t4701 * t4879 + t4793 * (t4707 * t4878 + t4835);
t4747 = t4793 * t5222 + t4807;
t5271 = t4682 / t4747;
t5118 = t4953 * t5271;
t5090 = -0.2e1 * t5118;
t5276 = t4674 * t4725;
t4977 = t5090 * t5276;
t5186 = t4880 * t4882;
t5105 = t4717 * t5186;
t5330 = (t4706 * t4669 + t4977) * t5105;
t5325 = -t4802 * t4857 - t4861 * t4982;
t5324 = -t4801 * t4856 - t4860 * t4983;
t5323 = -t4800 * t4855 - t4859 * t4984;
t5322 = -t4799 * t4854 - t4858 * t4985;
t5116 = t4915 * t5271;
t5082 = pkin(6) * t5116;
t5309 = pkin(2) * t4880;
t4649 = t5276 * t5309 + t4882 * t5082 / 0.2e1;
t5134 = t4882 * t5276;
t4650 = pkin(2) * t5134 - t4880 * t5082 / 0.2e1;
t5314 = 0.2e1 * (MDP(5) * t5186 + MDP(6) * t4849) * t5276 + t4649 * t5311 + t4650 * t5310;
t5313 = 0.2e1 * pkin(2);
t5305 = pkin(2) * t4915;
t5296 = pkin(3) * t5313;
t5295 = MDP(3) * t4877;
t5294 = MDP(4) * t4877;
t5293 = MDP(9) * t4915;
t4848 = pkin(2) ^ 2 + t4904 ^ 2;
t4914 = pkin(3) ^ 2;
t5117 = t4880 * t5271;
t4641 = -t4904 * t5117 + (t4868 * t4914 + t4882 * t5296 + t4848) * t5276;
t5132 = t4904 * t5276;
t5049 = t4880 * t5132;
t5188 = t4879 * t4915;
t5208 = t4877 * t4915;
t4875 = t4900 ^ 2;
t5227 = t4875 * t4915;
t5264 = t4706 * t4717;
t4625 = -t4641 * t4717 * t5188 * t5276 - (-t4879 * t5049 + (-t4781 * t4880 * t5208 + (t4882 * t5305 + t4868) * t4879) * t5271) * t4725 * t5116 + t5322 * t5227 * t5264;
t5292 = t4625 * t4880;
t5291 = t4625 * t4882;
t5112 = t4888 * t5267;
t4642 = -t4904 * t5112 + (t4872 * t4914 + t4894 * t5296 + t4848) * t5275;
t5126 = t4904 * t5275;
t5042 = t4888 * t5126;
t5263 = t4714 * t4718;
t4626 = -t4642 * t4718 * t5188 * t5275 - (-t4879 * t5042 + (-t4782 * t4888 * t5208 + (t4894 * t5305 + t4872) * t4879) * t5267) * t4733 * t5111 + t5323 * t5227 * t5263;
t5290 = t4626 * t4888;
t5289 = t4626 * t4894;
t5110 = t4890 * t5266;
t4643 = -t4904 * t5110 + (t4873 * t4914 + t4896 * t5296 + t4848) * t5274;
t5123 = t4904 * t5274;
t5041 = t4890 * t5123;
t5262 = t4715 * t4719;
t4627 = -t4643 * t4719 * t5188 * t5274 - (-t4879 * t5041 + (-t4783 * t4890 * t5208 + (t4896 * t5305 + t4873) * t4879) * t5266) * t4735 * t5109 + t5324 * t5227 * t5262;
t5288 = t4627 * t4890;
t5287 = t4627 * t4896;
t5108 = t4892 * t5265;
t4644 = -t4904 * t5108 + (t4874 * t4914 + t4898 * t5296 + t4848) * t5273;
t5120 = t4904 * t5273;
t5040 = t4892 * t5120;
t5261 = t4716 * t4720;
t4628 = -t4644 * t4720 * t5188 * t5273 - (-t4879 * t5040 + (-t4784 * t4892 * t5208 + (t4898 * t5305 + t4874) * t4879) * t5265) * t4737 * t5107 + t5325 * t5227 * t5261;
t5286 = t4628 * t4892;
t5285 = t4628 * t4898;
t4651 = t5049 - t5271;
t5224 = t4877 * t4880;
t4969 = pkin(3) * t5224 - t4879 * t5329;
t4721 = -t4812 * t4876 + t4878 * t4969;
t4786 = t4876 * t4883 + t4878 * t5200;
t5223 = t4877 * t4881;
t5225 = t4877 * t4878;
t4689 = (t4786 * t4858 + t4854 * t5223) * t5304 + (-t4721 * t4858 + t4769 * t4854) * t4882 + (t4854 * t4879 - t4858 * t5225) * t5309;
t4690 = -(t4786 * t4854 - t4858 * t5223) * t5304 + (t4721 * t4854 + t4769 * t4858) * t4882 + (t4854 * t5225 + t4858 * t4879) * t5309;
t4629 = (t4641 * t5134 + (pkin(2) * t5116 - t4651 * t4882) * t5271 + (t4689 * t4985 - t4690 * t4799) * t4875) * t4717;
t5284 = t4629 * t4717;
t5283 = t4629 * t4953;
t4659 = t5042 - t5267;
t5220 = t4877 * t4888;
t4968 = pkin(3) * t5220 - t4879 * t5328;
t4722 = -t4816 * t4876 + t4878 * t4968;
t4790 = t4876 * t4895 + t4878 * t5197;
t5219 = t4877 * t4889;
t4691 = (t4790 * t4859 + t4855 * t5219) * t5303 + (-t4722 * t4859 + t4770 * t4855) * t4894 + (t4855 * t4879 - t4859 * t5225) * t5308;
t4694 = -(t4790 * t4855 - t4859 * t5219) * t5303 + (t4722 * t4855 + t4770 * t4859) * t4894 + (t4855 * t5225 + t4859 * t4879) * t5308;
t4630 = (t4642 * t5128 + (pkin(2) * t5111 - t4659 * t4894) * t5267 + (t4691 * t4984 - t4694 * t4800) * t4875) * t4718;
t5282 = t4630 * t4718;
t5281 = t4630 * t4760;
t4660 = t5041 - t5266;
t5218 = t4877 * t4890;
t4967 = pkin(3) * t5218 - t4879 * t5327;
t4723 = -t4817 * t4876 + t4878 * t4967;
t4791 = t4876 * t4897 + t4878 * t5195;
t5217 = t4877 * t4891;
t4692 = (t4791 * t4860 + t4856 * t5217) * t5302 + (-t4723 * t4860 + t4771 * t4856) * t4896 + (t4856 * t4879 - t4860 * t5225) * t5307;
t4695 = -(t4791 * t4856 - t4860 * t5217) * t5302 + (t4723 * t4856 + t4771 * t4860) * t4896 + (t4856 * t5225 + t4860 * t4879) * t5307;
t4631 = (t4643 * t5125 + (pkin(2) * t5109 - t4660 * t4896) * t5266 + (t4692 * t4983 - t4695 * t4801) * t4875) * t4719;
t5280 = t4631 * t4719;
t5279 = t4631 * t4762;
t4661 = t5040 - t5265;
t5216 = t4877 * t4892;
t4966 = pkin(3) * t5216 - t4879 * t5326;
t4724 = -t4818 * t4876 + t4878 * t4966;
t4792 = t4876 * t4899 + t4878 * t5193;
t5215 = t4877 * t4893;
t4693 = (t4792 * t4861 + t4857 * t5215) * t5301 + (-t4724 * t4861 + t4772 * t4857) * t4898 + (t4857 * t4879 - t4861 * t5225) * t5306;
t4696 = -(t4792 * t4857 - t4861 * t5215) * t5301 + (t4724 * t4857 + t4772 * t4861) * t4898 + (t4857 * t5225 + t4861 * t4879) * t5306;
t4632 = (t4644 * t5122 + (pkin(2) * t5107 - t4661 * t4898) * t5265 + (t4693 * t4982 - t4696 * t4802) * t4875) * t4720;
t5278 = t4632 * t4720;
t5277 = t4632 * t4764;
t5272 = t4682 ^ 2 / t4747 ^ 2;
t5270 = t4686 ^ 2 / t4754 ^ 2;
t5269 = t4687 ^ 2 / t4755 ^ 2;
t5268 = t4688 ^ 2 / t4756 ^ 2;
t5260 = t4717 * t4953;
t5259 = t4717 * t4854;
t5258 = t4717 * t4858;
t4730 = t4800 * t4859 - t4984 * t4855;
t5257 = t4718 * t4730;
t5256 = t4718 * t4760;
t5255 = t4718 * t4855;
t5254 = t4718 * t4859;
t4731 = t4801 * t4860 - t4983 * t4856;
t5253 = t4719 * t4731;
t5252 = t4719 * t4762;
t5251 = t4719 * t4856;
t5250 = t4719 * t4860;
t4732 = t4802 * t4861 - t4982 * t4857;
t5249 = t4720 * t4732;
t5248 = t4720 * t4764;
t5247 = t4720 * t4857;
t5246 = t4720 * t4861;
t5245 = t4953 * t4854;
t5244 = t4953 * t4858;
t5243 = t4760 * t4855;
t5242 = t4760 * t4859;
t5241 = t4762 * t4856;
t5240 = t4762 * t4860;
t5239 = t4764 * t4857;
t5238 = t4764 * t4861;
t5229 = t4865 * t4875;
t5228 = t4866 * t4875;
t5221 = t4877 * t4883;
t5213 = t4877 * t4895;
t5211 = t4877 * t4897;
t5209 = t4877 * t4899;
t5207 = t4878 * t4879;
t5206 = t4878 * t4882;
t5205 = t4878 * t4894;
t5204 = t4878 * t4896;
t5203 = t4878 * t4898;
t5187 = t4880 * t4881;
t5184 = t4888 * t4889;
t5181 = t4890 * t4891;
t5178 = t4892 * t4893;
t5036 = t4883 * t5116;
t5098 = t4877 * t5185;
t5133 = t4883 * t5276;
t4621 = (-((t4877 * t5133 + t4879 * t5116) * t5304 + ((-t5117 + t5132) * t4881 + pkin(2) * t5133) * t5222 + t4651 * t4879) * t5276 - (t4877 * t5036 + (t4868 * t4879 - t4880 * t5098 - t4879) * t5276) * t5271 + t5322 * t4875 * t4953) * t4717;
t4613 = t4621 * t5221 + t4625 * t4879;
t4916 = 0.1e1 / pkin(3) ^ 2;
t5119 = t4916 * t5272;
t4658 = t4669 + t5119;
t4952 = -0.2e1 * t5036 * t5276;
t5037 = t4882 * t5119;
t5175 = -t4613 * t4880 - t4625 * t5098 + (t4658 * t5187 + t4882 * t4952) * t4877 - t4879 * t5037;
t5038 = t4880 * t5119;
t5174 = t4613 * t4882 - t4879 * t5038 + (-t4625 * t5187 - t4658 * t5185 + t4880 * t4952) * t4877;
t5026 = t4895 * t5111;
t5097 = t4877 * t5182;
t5127 = t4895 * t5275;
t4622 = (-((t4877 * t5127 + t4879 * t5111) * t5303 + ((-t5112 + t5126) * t4889 + pkin(2) * t5127) * t5214 + t4659 * t4879) * t5275 - (t4877 * t5026 + (t4872 * t4879 - t4888 * t5097 - t4879) * t5275) * t5267 + t5323 * t4875 * t4760) * t4718;
t4615 = t4622 * t5213 + t4626 * t4879;
t5115 = t4916 * t5270;
t4662 = t4670 + t5115;
t4951 = -0.2e1 * t5026 * t5275;
t5033 = t4894 * t5115;
t5173 = -t4615 * t4888 - t4626 * t5097 + (t4662 * t5184 + t4894 * t4951) * t4877 - t4879 * t5033;
t5025 = t4897 * t5109;
t5096 = t4877 * t5179;
t5124 = t4897 * t5274;
t4623 = (-((t4877 * t5124 + t4879 * t5109) * t5302 + ((-t5110 + t5123) * t4891 + pkin(2) * t5124) * t5212 + t4660 * t4879) * t5274 - (t4877 * t5025 + (t4873 * t4879 - t4890 * t5096 - t4879) * t5274) * t5266 + t5324 * t4875 * t4762) * t4719;
t4616 = t4623 * t5211 + t4627 * t4879;
t5114 = t4916 * t5269;
t4663 = t4671 + t5114;
t4950 = -0.2e1 * t5025 * t5274;
t5030 = t4896 * t5114;
t5172 = -t4616 * t4890 - t4627 * t5096 + (t4663 * t5181 + t4896 * t4950) * t4877 - t4879 * t5030;
t5024 = t4899 * t5107;
t5095 = t4877 * t5176;
t5121 = t4899 * t5273;
t4624 = (-((t4877 * t5121 + t4879 * t5107) * t5301 + ((-t5108 + t5120) * t4893 + pkin(2) * t5121) * t5210 + t4661 * t4879) * t5273 - (t4877 * t5024 + (t4874 * t4879 - t4892 * t5095 - t4879) * t5273) * t5265 + t5325 * t4875 * t4764) * t4720;
t4617 = t4624 * t5209 + t4628 * t4879;
t5113 = t4916 * t5268;
t4664 = t4672 + t5113;
t4949 = -0.2e1 * t5024 * t5273;
t5027 = t4898 * t5113;
t5171 = -t4617 * t4892 - t4628 * t5095 + (t4664 * t5178 + t4898 * t4949) * t4877 - t4879 * t5027;
t5034 = t4888 * t5115;
t5170 = t4615 * t4894 - t4879 * t5034 + (-t4626 * t5184 - t4662 * t5182 + t4888 * t4951) * t4877;
t5031 = t4890 * t5114;
t5169 = t4616 * t4896 - t4879 * t5031 + (-t4627 * t5181 - t4663 * t5179 + t4890 * t4950) * t4877;
t5028 = t4892 * t5113;
t5168 = t4617 * t4898 - t4879 * t5028 + (-t4628 * t5178 - t4664 * t5176 + t4892 * t4949) * t4877;
t5159 = t4621 * t5264;
t5158 = t4621 * t5260;
t5157 = t4622 * t5263;
t5156 = t4622 * t5256;
t5155 = t4623 * t5262;
t5154 = t4623 * t5252;
t5153 = t4624 * t5261;
t5152 = t4624 * t5248;
t5151 = t4625 * t5264;
t5150 = t4625 * t5260;
t5149 = t4626 * t5263;
t5148 = t4626 * t5256;
t5147 = t4627 * t5262;
t5146 = t4627 * t5252;
t5145 = t4628 * t5261;
t5144 = t4628 * t5248;
t5143 = t4881 * t5283;
t5142 = t4883 * t5283;
t5141 = t4889 * t5281;
t5140 = t4895 * t5281;
t5139 = t4891 * t5279;
t5138 = t4897 * t5279;
t5137 = t4893 * t5277;
t5136 = t4899 * t5277;
t5135 = t4882 * t4669;
t5131 = t4894 * t4670;
t5130 = t4896 * t4671;
t5129 = t4898 * t4672;
t4729 = t4799 * t4858 - t4985 * t4854;
t5106 = t4729 * t5260;
t5104 = t4760 * t5257;
t5102 = t4762 * t5253;
t5100 = t4764 * t5249;
t5078 = t4880 * t5159;
t5077 = t4882 * t5159;
t4867 = t4880 ^ 2;
t5076 = t4867 * t5158;
t5075 = t4888 * t5157;
t5074 = t4894 * t5157;
t5073 = t4622 * t5104;
t4869 = t4888 ^ 2;
t5072 = t4869 * t5156;
t5071 = t4890 * t5155;
t5070 = t4896 * t5155;
t5069 = t4623 * t5102;
t4870 = t4890 ^ 2;
t5068 = t4870 * t5154;
t5067 = t4892 * t5153;
t5066 = t4898 * t5153;
t5065 = t4624 * t5100;
t4871 = t4892 ^ 2;
t5064 = t4871 * t5152;
t5063 = t4880 * t5150;
t5062 = t4882 * t5150;
t5061 = t4888 * t5148;
t5060 = t4894 * t5148;
t5059 = t4890 * t5146;
t5058 = t4896 * t5146;
t5057 = t4892 * t5144;
t5056 = t4898 * t5144;
t5055 = t4629 * t5106;
t5054 = t4630 * t5104;
t5053 = t4631 * t5102;
t5052 = t4632 * t5100;
t5051 = t4717 * t4880 * t4669;
t5050 = t4717 * t5135;
t5048 = t4718 * t4888 * t4670;
t5047 = t4718 * t5131;
t5046 = t4719 * t4890 * t4671;
t5045 = t4719 * t5130;
t5044 = t4720 * t4892 * t4672;
t5043 = t4720 * t5129;
t5039 = t5260 * t5272;
t5035 = t5256 * t5270;
t5032 = t5252 * t5269;
t5029 = t5248 * t5268;
t5019 = t4894 * t5104;
t5018 = t4896 * t5102;
t5017 = t4898 * t5100;
t5012 = t4621 * t4953 * t5105;
t5011 = t4622 * t4760 * t5103;
t5010 = t4623 * t4762 * t5101;
t5009 = t4624 * t4764 * t5099;
t5008 = t4706 * t5051;
t5007 = t4706 * t5050;
t5006 = t4714 * t5048;
t5005 = t4714 * t5047;
t5004 = t4715 * t5046;
t5003 = t4715 * t5045;
t5002 = t4716 * t5044;
t5001 = t4716 * t5043;
t5000 = t4880 * t5039;
t4999 = t4882 * t5039;
t4998 = t5104 * t5270;
t4997 = t4888 * t5035;
t4996 = t4894 * t5035;
t4995 = t5102 * t5269;
t4994 = t4890 * t5032;
t4993 = t4896 * t5032;
t4992 = t5100 * t5268;
t4991 = t4892 * t5029;
t4990 = t4898 * t5029;
t4981 = t4836 * t5225;
t4980 = t4839 * t5225;
t4979 = t4840 * t5225;
t4978 = t4841 * t5225;
t4973 = t4621 * t5313 + t4629 * t5221;
t4972 = t4622 * t5313 + t4630 * t5213;
t4971 = t4623 * t5313 + t4631 * t5211;
t4970 = t4624 * t5313 + t4632 * t5209;
t4961 = -t4621 * t4881 - t4883 * t4669;
t4960 = t4621 * t4883 - t4881 * t4669;
t4959 = -t4622 * t4889 - t4895 * t4670;
t4958 = t4622 * t4895 - t4889 * t4670;
t4957 = -t4623 * t4891 - t4897 * t4671;
t4956 = t4623 * t4897 - t4891 * t4671;
t4955 = -t4624 * t4893 - t4899 * t4672;
t4954 = t4624 * t4899 - t4893 * t4672;
t4614 = pkin(6) * t4621 + t4629 * t5223;
t4599 = t4629 * t4879 * t4882 - t4614 * t4880;
t4948 = t4599 * t4706 + t4649 * t5090;
t4600 = -t4614 * t4882 - t4629 * t5201;
t4947 = t4600 * t4706 + t4650 * t5090;
t4618 = pkin(6) * t4622 + t4630 * t5219;
t4607 = t4630 * t4879 * t4894 - t4618 * t4888;
t4946 = -t4607 * t4714 + t4652 * t5089;
t4619 = pkin(6) * t4623 + t4631 * t5217;
t4608 = t4631 * t4879 * t4896 - t4619 * t4890;
t4945 = -t4608 * t4715 + t4653 * t5088;
t4620 = pkin(6) * t4624 + t4632 * t5215;
t4609 = t4632 * t4879 * t4898 - t4620 * t4892;
t4944 = -t4609 * t4716 + t4654 * t5087;
t4610 = -t4618 * t4894 - t4630 * t5198;
t4943 = -t4610 * t4714 + t4655 * t5089;
t4611 = -t4619 * t4896 - t4631 * t5196;
t4942 = -t4611 * t4715 + t4656 * t5088;
t4612 = -t4620 * t4898 - t4632 * t5194;
t4941 = -t4612 * t4716 + t4657 * t5087;
t4645 = t4849 * t4669;
t4940 = t4645 * t4706 + t4849 * t4977;
t4646 = t4850 * t4670;
t4939 = -t4646 * t4714 + t4850 * t4976;
t4647 = t4851 * t4671;
t4938 = -t4647 * t4715 + t4851 * t4975;
t4648 = t4852 * t4672;
t4937 = -t4648 * t4716 + t4852 * t4974;
t4797 = pkin(2) * t4876 - t4904 * t5207;
t4798 = pkin(2) * t5207 + t4876 * t4904;
t4932 = t4786 * t5304 + (t4797 * t4883 + t4798 * t4881) * t4882;
t4931 = t4790 * t5303 + (t4797 * t4895 + t4798 * t4889) * t4894;
t4930 = t4791 * t5302 + (t4797 * t4897 + t4798 * t4891) * t4896;
t4929 = t4792 * t5301 + (t4797 * t4899 + t4798 * t4893) * t4898;
t4928 = t4629 * MDP(1) + MDP(10) * t5174 + MDP(11) * t5175;
t4927 = t4630 * MDP(1) + MDP(10) * t5170 + MDP(11) * t5173;
t4926 = t4631 * MDP(1) + MDP(10) * t5169 + MDP(11) * t5172;
t4925 = t4632 * MDP(1) + MDP(10) * t5168 + MDP(11) * t5171;
t4924 = MDP(3) * t4960 + MDP(4) * t4961;
t4923 = MDP(3) * t4958 + MDP(4) * t4959;
t4922 = MDP(3) * t4956 + MDP(4) * t4957;
t4921 = MDP(3) * t4954 + MDP(4) * t4955;
t4920 = -t4880 * MDP(5) * t5135 + t4599 * MDP(10) + t4600 * MDP(11) - t4645 * MDP(6) + t4625 * MDP(9) + (t4880 * MDP(7) + t4882 * MDP(8)) * t4621;
t4919 = -t4888 * MDP(5) * t5131 + t4607 * MDP(10) + t4610 * MDP(11) - t4646 * MDP(6) + t4626 * MDP(9) + (t4888 * MDP(7) + t4894 * MDP(8)) * t4622;
t4918 = -t4890 * MDP(5) * t5130 + t4608 * MDP(10) + t4611 * MDP(11) - t4647 * MDP(6) + t4627 * MDP(9) + (MDP(7) * t4890 + MDP(8) * t4896) * t4623;
t4917 = -t4892 * MDP(5) * t5129 + t4609 * MDP(10) + t4612 * MDP(11) - t4648 * MDP(6) + t4628 * MDP(9) + (t4892 * MDP(7) + t4898 * MDP(8)) * t4624;
t4768 = -t4792 * t4892 - t4877 * t5203;
t4767 = -t4791 * t4890 - t4877 * t5204;
t4766 = -t4790 * t4888 - t4877 * t5205;
t4759 = -t4786 * t4880 - t4877 * t5206;
t4713 = (t4876 * t4893 - t4878 * t5190) * t5297 - t4818 * t5207 + t5326 * t4876;
t4712 = (t4876 * t4891 - t4878 * t5191) * t5298 - t4817 * t5207 + t5327 * t4876;
t4711 = (t4876 * t4889 - t4878 * t5192) * t5299 - t4816 * t5207 + t5328 * t4876;
t4705 = (t4876 * t4881 - t4878 * t5199) * t5300 - t4812 * t5207 + t5329 * t4876;
t4700 = -t4789 * t5301 + t4818 * t5203 + (pkin(2) * t5216 + t4898 * t4966) * t4876;
t4699 = -t4788 * t5302 + t4817 * t5204 + (pkin(2) * t5218 + t4896 * t4967) * t4876;
t4698 = -t4787 * t5303 + t4816 * t5205 + (pkin(2) * t5220 + t4894 * t4968) * t4876;
t4697 = -t4785 * t5304 + t4812 * t5206 + (pkin(2) * t5224 + t4882 * t4969) * t4876;
t4668 = ((-t4802 * t4929 - t4982 * t5348 + (t4802 * t4978 - t4982 * t5334) * t4892) * t4861 + (-t4802 * t5348 + t4982 * t4929 + (-t4802 * t5334 - t4978 * t4982) * t4892) * t4857) * t4737;
t4667 = ((-t4930 * t4801 - t4983 * t5347 + (t4801 * t4979 - t4983 * t5335) * t4890) * t4860 + (-t4801 * t5347 + t4983 * t4930 + (-t4801 * t5335 - t4979 * t4983) * t4890) * t4856) * t4735;
t4666 = ((-t4931 * t4800 - t4984 * t5346 + (t4800 * t4980 - t4984 * t5336) * t4888) * t4859 + (-t4800 * t5346 + t4984 * t4931 + (-t4800 * t5336 - t4980 * t4984) * t4888) * t4855) * t4733;
t4665 = ((-t4932 * t4799 - t4985 * t5345 + (t4799 * t4981 - t4985 * t5337) * t4880) * t4858 + (-t4799 * t5345 + t4932 * t4985 + (-t4799 * t5337 - t4981 * t4985) * t4880) * t4854) * t4725;
t4606 = -pkin(6) * t5286 + t4898 * t4970;
t4605 = -pkin(6) * t5285 - t4892 * t4970;
t4604 = -pkin(6) * t5288 + t4896 * t4971;
t4603 = -pkin(6) * t5287 - t4890 * t4971;
t4602 = -pkin(6) * t5290 + t4894 * t4972;
t4601 = -pkin(6) * t5289 - t4888 * t4972;
t4592 = -pkin(6) * t5292 + t4882 * t4973;
t4591 = -pkin(6) * t5291 - t4880 * t4973;
t1 = [(t4689 * t5284 + t4691 * t5282 + t4692 * t5280 + t4693 * t5278) * MDP(1) + (-t4858 * t5158 - t4859 * t5156 - t4860 * t5154 - t4861 * t5152) * MDP(2) + ((t4693 * t4954 - t4861 * t5136) * t4720 + (t4692 * t4956 - t4860 * t5138) * t4719 + (t4691 * t4958 - t4859 * t5140) * t4718 + (t4689 * t4960 - t4858 * t5142) * t4717) * t5295 + ((t4693 * t4955 + t4861 * t5137) * t4720 + (t4692 * t4957 + t4860 * t5139) * t4719 + (t4691 * t4959 + t4859 * t5141) * t4718 + (t4689 * t4961 + t4858 * t5143) * t4717) * t5294 + (-t4858 * t5076 - t4859 * t5072 - t4860 * t5068 - t4861 * t5064 + (t4858 * t5330 - t4859 * t5331 - t4860 * t5332 - t4861 * t5333) * t4915) * MDP(5) + (-0.2e1 * t4858 * t5012 - 0.2e1 * t4859 * t5011 - 0.2e1 * t4860 * t5010 - 0.2e1 * t4861 * t5009 + (-t4937 * t5246 - t4938 * t5250 - t4939 * t5254 + t4940 * t5258) * t4915) * MDP(6) + (-t4858 * t5063 - t4859 * t5061 - t4860 * t5059 - t4861 * t5057 + (-t4858 * t4999 - t4859 * t4996 - t4860 * t4993 - t4861 * t4990) * t4916 + (-t4858 * t5078 - t4859 * t5075 - t4860 * t5071 - t4861 * t5067) * t4915) * MDP(7) + (-t4858 * t5062 - t4859 * t5060 - t4860 * t5058 - t4861 * t5056 + (t4858 * t5000 + t4859 * t4997 + t4860 * t4994 + t4861 * t4991) * t4916 + (-t4858 * t5077 - t4859 * t5074 - t4860 * t5070 - t4861 * t5066) * t4915) * MDP(8) + (-t4858 * t5151 - t4859 * t5149 - t4860 * t5147 - t4861 * t5145) * t5293 + ((-t4606 * t5238 + t4693 * t5168) * t4720 + (-t4604 * t5240 + t4692 * t5169) * t4719 + (-t4602 * t5242 + t4691 * t5170) * t4718 + (-t4592 * t5244 + t4689 * t5174) * t4717 + (t4944 * t5246 + t4945 * t5250 + t4946 * t5254 - t4948 * t5258 + (-t4858 * t5008 - t4859 * t5006 - t4860 * t5004 - t4861 * t5002) * pkin(2)) * t4915) * MDP(10) + ((-t4605 * t5238 + t4693 * t5171) * t4720 + (-t4603 * t5240 + t4692 * t5172) * t4719 + (-t4601 * t5242 + t4691 * t5173) * t4718 + (-t4591 * t5244 + t4689 * t5175) * t4717 + (t4941 * t5246 + t4942 * t5250 + t4943 * t5254 - t4947 * t5258 + (-t4858 * t5007 - t4859 * t5005 - t4860 * t5003 - t4861 * t5001) * pkin(2)) * t4915) * MDP(11) - MDP(13) * t5228 + MDP(14) * t5229; (t4690 * t5284 + t4694 * t5282 + t4695 * t5280 + t4696 * t5278) * MDP(1) + (t4854 * t5158 + t4855 * t5156 + t4856 * t5154 + t4857 * t5152) * MDP(2) + ((t4696 * t4954 + t4857 * t5136) * t4720 + (t4695 * t4956 + t4856 * t5138) * t4719 + (t4694 * t4958 + t4855 * t5140) * t4718 + (t4690 * t4960 + t4854 * t5142) * t4717) * t5295 + ((t4696 * t4955 - t4857 * t5137) * t4720 + (t4695 * t4957 - t4856 * t5139) * t4719 + (t4694 * t4959 - t4855 * t5141) * t4718 + (t4690 * t4961 - t4854 * t5143) * t4717) * t5294 + (t4854 * t5076 + t4855 * t5072 + t4856 * t5068 + t4857 * t5064 + (-t4854 * t5330 + t4855 * t5331 + t4856 * t5332 + t4857 * t5333) * t4915) * MDP(5) + (0.2e1 * t4854 * t5012 + 0.2e1 * t4855 * t5011 + 0.2e1 * t4856 * t5010 + 0.2e1 * t4857 * t5009 + (t4937 * t5247 + t4938 * t5251 + t4939 * t5255 - t4940 * t5259) * t4915) * MDP(6) + (t4854 * t5063 + t4855 * t5061 + t4856 * t5059 + t4857 * t5057 + (t4854 * t4999 + t4855 * t4996 + t4856 * t4993 + t4857 * t4990) * t4916 + (t4854 * t5078 + t4855 * t5075 + t4856 * t5071 + t4857 * t5067) * t4915) * MDP(7) + (t4854 * t5062 + t4855 * t5060 + t4856 * t5058 + t4857 * t5056 + (-t4854 * t5000 - t4855 * t4997 - t4856 * t4994 - t4857 * t4991) * t4916 + (t4854 * t5077 + t4855 * t5074 + t4856 * t5070 + t4857 * t5066) * t4915) * MDP(8) + (t4854 * t5151 + t4855 * t5149 + t4856 * t5147 + t4857 * t5145) * t5293 + ((t4606 * t5239 + t4696 * t5168) * t4720 + (t4604 * t5241 + t4695 * t5169) * t4719 + (t4602 * t5243 + t4694 * t5170) * t4718 + (t4592 * t5245 + t4690 * t5174) * t4717 + (-t4944 * t5247 - t4945 * t5251 - t4946 * t5255 + t4948 * t5259 + (t4854 * t5008 + t4855 * t5006 + t4856 * t5004 + t4857 * t5002) * pkin(2)) * t4915) * MDP(10) + ((t4605 * t5239 + t4696 * t5171) * t4720 + (t4603 * t5241 + t4695 * t5172) * t4719 + (t4601 * t5243 + t4694 * t5173) * t4718 + (t4591 * t5245 + t4690 * t5175) * t4717 + (-t4941 * t5247 - t4942 * t5251 - t4943 * t5255 + t4947 * t5259 + (t4854 * t5007 + t4855 * t5005 + t4856 * t5003 + t4857 * t5001) * pkin(2)) * t4915) * MDP(11) - MDP(13) * t5229 - MDP(14) * t5228; (t4925 * t4700 + ((t5027 + t5286) * MDP(7) + (-t5028 + t5285) * MDP(8) + t4606 * MDP(10) + t4605 * MDP(11) + (t4871 * MDP(5) + t5177 * t5312 + MDP(2)) * t4624) * t4768) * t4720 + (t4926 * t4699 + ((t5030 + t5288) * MDP(7) + (-t5031 + t5287) * MDP(8) + t4604 * MDP(10) + t4603 * MDP(11) + (MDP(5) * t4870 + t5180 * t5312 + MDP(2)) * t4623) * t4767) * t4719 + (t4927 * t4698 + ((t5033 + t5290) * MDP(7) + (-t5034 + t5289) * MDP(8) + t4602 * MDP(10) + t4601 * MDP(11) + (t4869 * MDP(5) + t5183 * t5312 + MDP(2)) * t4622) * t4766) * t4718 + (t4928 * t4697 + ((t5037 + t5292) * MDP(7) + (-t5038 + t5291) * MDP(8) + t4592 * MDP(10) + t4591 * MDP(11) + (t4867 * MDP(5) + t5186 * t5312 + MDP(2)) * t4621) * t4759) * t4717 + (((MDP(3) * t4899 - MDP(4) * t4893) * t4768 * t4632 + t4921 * t4700) * t4720 + ((MDP(3) * t4897 - MDP(4) * t4891) * t4767 * t4631 + t4922 * t4699) * t4719 + ((MDP(3) * t4895 - MDP(4) * t4889) * t4766 * t4630 + t4923 * t4698) * t4718 + ((MDP(3) * t4883 - MDP(4) * t4881) * t4759 * t4629 + t4924 * t4697) * t4717) * t4877 + ((t4917 * t4713 + t4768 * t5344) * t4720 + (t4918 * t4712 + t4767 * t5343) * t4719 + (t4919 * t4711 + t4766 * t5342) * t4718 + (t5314 * t4759 * t5271 + t4920 * t4705) * t4717 + ((t4705 * t5051 + t4711 * t5048 + t4712 * t5046 + t4713 * t5044) * MDP(10) + (t4705 * t5050 + t4711 * t5047 + t4712 * t5045 + t4713 * t5043) * MDP(11)) * pkin(2)) * t4915; (t4621 * t5106 + t5065 + t5069 + t5073) * MDP(2) + (t4729 * t5076 + t4869 * t5073 + t4870 * t5069 + t4871 * t5065) * MDP(5) + (t4622 * t4888 * t5019 + t4623 * t4890 * t5018 + t4624 * t4892 * t5017 + t4729 * t5012) * t5312 + (t4729 * t5063 + t5100 * t5286 + t5102 * t5288 + t5104 * t5290) * MDP(7) + (t4626 * t5019 + t4627 * t5018 + t4628 * t5017 + t4729 * t5062) * MDP(8) + (t4592 * t5106 + t4602 * t5104 + t4604 * t5102 + t4606 * t5100) * MDP(10) + (t4591 * t5106 + t4601 * t5104 + t4603 * t5102 + t4605 * t5100) * MDP(11) + t4925 * t4668 + t4926 * t4667 + t4927 * t4666 + t4928 * t4665 + ((t4729 * t4999 + t4894 * t4998 + t4896 * t4995 + t4898 * t4992) * MDP(7) + (-t4729 * t5000 - t4888 * t4998 - t4890 * t4995 - t4892 * t4992) * MDP(8)) * t4916 + ((t4883 * t5055 + t4895 * t5054 + t4897 * t5053 + t4899 * t5052) * MDP(3) + (-t4881 * t5055 - t4889 * t5054 - t4891 * t5053 - t4893 * t5052) * MDP(4) + t4921 * t4668 + t4922 * t4667 + t4923 * t4666 + t4924 * t4665) * t4877 + ((t4917 * t4716 + t4764 * t5344) * t5249 + (t4918 * t4715 + t4762 * t5343) * t5253 + (t4919 * t4714 + t4760 * t5342) * t5257 + (t4920 * t4706 + t5314 * t5118) * t4729 * t4717 + ((t4729 * t5008 + t4730 * t5006 + t4731 * t5004 + t4732 * t5002) * MDP(10) + (t4729 * t5007 + t4730 * t5005 + t4731 * t5003 + t4732 * t5001) * MDP(11)) * pkin(2)) * t4915;];
taucX  = t1;
