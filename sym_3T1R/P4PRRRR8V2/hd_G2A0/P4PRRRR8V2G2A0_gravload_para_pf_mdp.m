% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4PRRRR8V2G2A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G2A0_convert_par2_MPV_fixb.m

% Output:
% taugX [4x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:22
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4PRRRR8V2G2A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G2A0_gravload_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:21:54
% EndTime: 2020-08-07 11:22:01
% DurationCPUTime: 7.35s
% Computational Cost: add. (2133->394), mult. (4945->771), div. (148->9), fcn. (5124->30), ass. (0->304)
t5498 = sin(pkin(4));
t5519 = cos(qJ(3,1));
t5514 = sin(qJ(2,1));
t5686 = pkin(3) * t5519 ^ 2;
t5599 = t5514 * t5686;
t5520 = cos(qJ(2,1));
t5521 = pkin(7) + pkin(6);
t5698 = pkin(2) * t5514 - t5520 * t5521;
t5711 = (t5519 * t5698 + t5599) * t5498;
t5517 = cos(qJ(3,2));
t5512 = sin(qJ(2,2));
t5687 = pkin(3) * t5517 ^ 2;
t5600 = t5512 * t5687;
t5518 = cos(qJ(2,2));
t5699 = pkin(2) * t5512 - t5518 * t5521;
t5710 = (t5517 * t5699 + t5600) * t5498;
t5515 = cos(qJ(3,3));
t5510 = sin(qJ(2,3));
t5688 = pkin(3) * t5515 ^ 2;
t5601 = t5510 * t5688;
t5516 = cos(qJ(2,3));
t5700 = pkin(2) * t5510 - t5516 * t5521;
t5709 = (t5515 * t5700 + t5601) * t5498;
t5503 = cos(qJ(3,4));
t5502 = sin(qJ(2,4));
t5689 = pkin(3) * t5503 ^ 2;
t5602 = t5502 * t5689;
t5504 = cos(qJ(2,4));
t5701 = pkin(2) * t5502 - t5504 * t5521;
t5708 = (t5503 * t5701 + t5602) * t5498;
t5499 = cos(pkin(8));
t5500 = cos(pkin(4));
t5642 = t5499 * t5500;
t5452 = -t5498 * g(1) + g(2) * t5642;
t5453 = g(1) * t5642 + g(2) * t5498;
t5506 = legFrame(3,2);
t5481 = sin(t5506);
t5485 = cos(t5506);
t5459 = g(1) * t5485 - g(2) * t5481;
t5497 = sin(pkin(8));
t5656 = t5497 * t5500;
t5472 = g(3) * t5656;
t5478 = g(3) * t5499;
t5365 = (t5452 * t5481 - t5453 * t5485 + t5472) * t5516 + t5510 * (t5459 * t5497 + t5478);
t5707 = t5365 * t5515;
t5507 = legFrame(2,2);
t5482 = sin(t5507);
t5486 = cos(t5507);
t5460 = g(1) * t5486 - g(2) * t5482;
t5366 = (t5452 * t5482 - t5453 * t5486 + t5472) * t5518 + t5512 * (t5460 * t5497 + t5478);
t5706 = t5366 * t5517;
t5508 = legFrame(1,2);
t5483 = sin(t5508);
t5487 = cos(t5508);
t5461 = g(1) * t5487 - g(2) * t5483;
t5367 = (t5452 * t5483 - t5453 * t5487 + t5472) * t5520 + t5514 * (t5461 * t5497 + t5478);
t5705 = t5367 * t5519;
t5682 = pkin(3) * t5519;
t5595 = pkin(2) + t5682;
t5554 = t5500 * t5595;
t5509 = sin(qJ(3,3));
t5704 = t5509 * t5365;
t5511 = sin(qJ(3,2));
t5703 = t5511 * t5366;
t5513 = sin(qJ(3,1));
t5702 = t5513 * t5367;
t5683 = pkin(3) * t5517;
t5596 = pkin(2) + t5683;
t5551 = t5596 * t5500;
t5684 = pkin(3) * t5515;
t5597 = pkin(2) + t5684;
t5552 = t5597 * t5500;
t5685 = pkin(3) * t5503;
t5598 = pkin(2) + t5685;
t5553 = t5598 * t5500;
t5501 = sin(qJ(3,4));
t5693 = pkin(2) * t5501;
t5692 = pkin(2) * t5509;
t5691 = pkin(2) * t5511;
t5690 = pkin(2) * t5513;
t5629 = t5501 * t5500;
t5414 = pkin(3) * t5629 + t5498 * t5701;
t5384 = 0.1e1 / (pkin(2) * t5629 + t5414 * t5503 + t5498 * t5602);
t5505 = legFrame(4,2);
t5480 = sin(t5505);
t5484 = cos(t5505);
t5458 = g(1) * t5484 - g(2) * t5480;
t5681 = ((t5452 * t5480 - t5453 * t5484 + t5472) * t5504 + t5502 * (t5458 * t5497 + t5478)) * t5384;
t5636 = t5500 * t5504;
t5419 = t5497 * t5502 - t5499 * t5636;
t5465 = pkin(2) * t5504 + t5502 * t5521;
t5680 = (t5419 * t5685 - t5465 * t5642 + t5497 * t5701) * t5384;
t5623 = t5509 * t5500;
t5415 = pkin(3) * t5623 + t5498 * t5700;
t5385 = 0.1e1 / (pkin(2) * t5623 + t5415 * t5515 + t5498 * t5601);
t5632 = t5500 * t5516;
t5427 = t5497 * t5510 - t5499 * t5632;
t5469 = pkin(2) * t5516 + t5510 * t5521;
t5679 = (t5427 * t5684 - t5469 * t5642 + t5497 * t5700) * t5385;
t5618 = t5511 * t5500;
t5416 = pkin(3) * t5618 + t5498 * t5699;
t5386 = 0.1e1 / (pkin(2) * t5618 + t5416 * t5517 + t5498 * t5600);
t5631 = t5500 * t5518;
t5428 = t5497 * t5512 - t5499 * t5631;
t5470 = pkin(2) * t5518 + t5512 * t5521;
t5678 = (t5428 * t5683 - t5470 * t5642 + t5497 * t5699) * t5386;
t5613 = t5513 * t5500;
t5417 = pkin(3) * t5613 + t5498 * t5698;
t5387 = 0.1e1 / (pkin(2) * t5613 + t5417 * t5519 + t5498 * t5599);
t5630 = t5500 * t5520;
t5429 = t5497 * t5514 - t5499 * t5630;
t5471 = pkin(2) * t5520 + t5514 * t5521;
t5677 = (t5429 * t5682 - t5471 * t5642 + t5497 * t5698) * t5387;
t5522 = xP(4);
t5491 = sin(t5522);
t5492 = cos(t5522);
t5523 = koppelP(4,2);
t5527 = koppelP(4,1);
t5444 = t5491 * t5527 + t5492 * t5523;
t5448 = -t5491 * t5523 + t5492 * t5527;
t5393 = t5444 * t5484 + t5448 * t5480;
t5676 = t5384 * t5393;
t5637 = t5500 * t5502;
t5420 = t5497 * t5504 + t5499 * t5637;
t5641 = t5499 * t5503;
t5401 = -t5420 * t5501 - t5498 * t5641;
t5675 = t5384 * t5401;
t5454 = g(1) * t5480 + g(2) * t5484;
t5674 = t5384 * t5454;
t5673 = t5384 * t5480;
t5672 = t5384 * t5484;
t5524 = koppelP(3,2);
t5528 = koppelP(3,1);
t5445 = t5491 * t5528 + t5492 * t5524;
t5449 = -t5491 * t5524 + t5492 * t5528;
t5671 = t5385 * (t5445 * t5485 + t5449 * t5481);
t5635 = t5500 * t5510;
t5430 = t5497 * t5516 + t5499 * t5635;
t5640 = t5499 * t5515;
t5408 = -t5430 * t5509 - t5498 * t5640;
t5670 = t5385 * t5408;
t5455 = g(1) * t5481 + g(2) * t5485;
t5669 = t5385 * t5455;
t5668 = t5385 * t5481;
t5667 = t5385 * t5485;
t5525 = koppelP(2,2);
t5529 = koppelP(2,1);
t5446 = t5491 * t5529 + t5492 * t5525;
t5450 = -t5491 * t5525 + t5492 * t5529;
t5666 = t5386 * (t5446 * t5486 + t5450 * t5482);
t5634 = t5500 * t5512;
t5431 = t5497 * t5518 + t5499 * t5634;
t5639 = t5499 * t5517;
t5409 = -t5431 * t5511 - t5498 * t5639;
t5665 = t5386 * t5409;
t5456 = g(1) * t5482 + g(2) * t5486;
t5664 = t5386 * t5456;
t5663 = t5386 * t5482;
t5662 = t5386 * t5486;
t5526 = koppelP(1,2);
t5530 = koppelP(1,1);
t5447 = t5491 * t5530 + t5492 * t5526;
t5451 = -t5491 * t5526 + t5492 * t5530;
t5661 = t5387 * (t5447 * t5487 + t5451 * t5483);
t5633 = t5500 * t5514;
t5432 = t5497 * t5520 + t5499 * t5633;
t5638 = t5499 * t5519;
t5410 = -t5432 * t5513 - t5498 * t5638;
t5660 = t5387 * t5410;
t5457 = g(1) * t5483 + g(2) * t5487;
t5659 = t5387 * t5457;
t5658 = t5387 * t5483;
t5657 = t5387 * t5487;
t5655 = t5498 * t5499;
t5654 = t5498 * t5501;
t5653 = t5498 * t5502;
t5652 = t5498 * t5503;
t5651 = t5498 * t5509;
t5650 = t5498 * t5510;
t5649 = t5498 * t5511;
t5648 = t5498 * t5512;
t5647 = t5498 * t5513;
t5646 = t5498 * t5514;
t5645 = t5498 * t5515;
t5644 = t5498 * t5517;
t5643 = t5498 * t5519;
t5628 = t5501 * t5502;
t5627 = t5501 * t5504;
t5626 = t5502 * t5503;
t5625 = t5503 * t5504;
t5622 = t5509 * t5510;
t5621 = t5509 * t5516;
t5619 = t5510 * t5515;
t5617 = t5511 * t5512;
t5616 = t5511 * t5518;
t5614 = t5512 * t5517;
t5612 = t5513 * t5514;
t5611 = t5513 * t5520;
t5609 = t5514 * t5519;
t5608 = t5515 * t5516;
t5606 = t5517 * t5518;
t5604 = t5519 * t5520;
t5594 = t5501 * t5681;
t5593 = t5503 * t5681;
t5592 = t5385 * t5704;
t5591 = t5386 * t5703;
t5590 = t5387 * t5702;
t5589 = t5385 * t5707;
t5588 = t5386 * t5706;
t5587 = t5387 * t5705;
t5421 = t5497 * t5636 + t5499 * t5502;
t5377 = t5421 * t5685 + t5465 * t5656 + t5499 * t5701;
t5586 = t5377 * t5676;
t5585 = t5377 * t5673;
t5584 = t5377 * t5672;
t5433 = t5497 * t5632 + t5499 * t5510;
t5381 = t5433 * t5684 + t5469 * t5656 + t5499 * t5700;
t5583 = t5381 * t5671;
t5582 = t5381 * t5668;
t5581 = t5381 * t5667;
t5434 = t5497 * t5631 + t5499 * t5512;
t5382 = t5434 * t5683 + t5470 * t5656 + t5499 * t5699;
t5580 = t5382 * t5666;
t5579 = t5382 * t5663;
t5578 = t5382 * t5662;
t5435 = t5497 * t5630 + t5499 * t5514;
t5383 = t5435 * t5682 + t5471 * t5656 + t5499 * t5698;
t5577 = t5383 * t5661;
t5576 = t5383 * t5658;
t5575 = t5383 * t5657;
t5418 = t5497 * t5637 - t5499 * t5504;
t5400 = -t5418 * t5501 - t5497 * t5652;
t5574 = t5400 * t5676;
t5573 = t5400 * t5673;
t5572 = t5400 * t5672;
t5424 = t5497 * t5635 - t5499 * t5516;
t5402 = t5424 * t5509 + t5497 * t5645;
t5571 = t5402 * t5671;
t5570 = t5402 * t5668;
t5569 = t5402 * t5667;
t5425 = t5497 * t5634 - t5499 * t5518;
t5404 = t5425 * t5511 + t5497 * t5644;
t5568 = t5404 * t5666;
t5567 = t5404 * t5663;
t5566 = t5404 * t5662;
t5426 = t5497 * t5633 - t5499 * t5520;
t5406 = t5426 * t5513 + t5497 * t5643;
t5565 = t5406 * t5661;
t5564 = t5406 * t5658;
t5563 = t5406 * t5657;
t5562 = t5400 * t5594;
t5561 = t5400 * t5593;
t5560 = t5402 * t5592;
t5559 = t5404 * t5591;
t5558 = t5406 * t5590;
t5557 = t5402 * t5589;
t5556 = t5404 * t5588;
t5555 = t5406 * t5587;
t5546 = t5598 * t5655;
t5545 = t5597 * t5655;
t5544 = t5596 * t5655;
t5543 = t5595 * t5655;
t5542 = pkin(3) * t5654 - t5500 * t5701;
t5541 = pkin(3) * t5651 - t5500 * t5700;
t5540 = pkin(3) * t5649 - t5500 * t5699;
t5539 = pkin(3) * t5647 - t5500 * t5698;
t5442 = pkin(2) * t5497 - t5521 * t5642;
t5443 = pkin(2) * t5642 + t5497 * t5521;
t5535 = t5420 * t5689 + (t5442 * t5504 + t5443 * t5502) * t5503;
t5534 = t5430 * t5688 + (t5442 * t5516 + t5443 * t5510) * t5515;
t5533 = t5431 * t5687 + (t5442 * t5518 + t5443 * t5512) * t5517;
t5532 = t5432 * t5686 + (t5442 * t5520 + t5443 * t5514) * t5519;
t5531 = 0.1e1 / pkin(3);
t5463 = g(1) * t5492 + g(2) * t5491;
t5462 = g(1) * t5491 - g(2) * t5492;
t5441 = t5500 * t5609 - t5647;
t5440 = t5500 * t5614 - t5649;
t5439 = t5500 * t5619 - t5651;
t5438 = t5500 * t5612 + t5643;
t5437 = t5500 * t5617 + t5644;
t5436 = t5500 * t5622 + t5645;
t5423 = t5500 * t5626 - t5654;
t5422 = t5500 * t5628 + t5652;
t5391 = -t5471 * t5497 + t5539 * t5499;
t5390 = -t5470 * t5497 + t5540 * t5499;
t5389 = -t5469 * t5497 + t5541 * t5499;
t5388 = -t5465 * t5497 + t5542 * t5499;
t5375 = -g(3) * t5426 + t5432 * t5461 + t5457 * t5646;
t5374 = -g(3) * t5425 + t5431 * t5460 + t5456 * t5648;
t5373 = -g(3) * t5424 + t5430 * t5459 + t5455 * t5650;
t5372 = -t5457 * t5498 * t5520 + g(3) * t5435 + t5429 * t5461;
t5371 = -t5456 * t5498 * t5518 + g(3) * t5434 + t5428 * t5460;
t5370 = -t5455 * t5498 * t5516 + g(3) * t5433 + t5427 * t5459;
t5369 = -g(3) * t5418 + t5420 * t5458 + t5454 * t5653;
t5368 = -t5454 * t5498 * t5504 + g(3) * t5421 + t5419 * t5458;
t5360 = (-t5441 * t5497 + t5499 * t5604) * g(3) + t5461 * (t5441 * t5499 + t5497 * t5604) + t5457 * (t5498 * t5609 + t5613);
t5359 = (-t5440 * t5497 + t5499 * t5606) * g(3) + t5460 * (t5440 * t5499 + t5497 * t5606) + t5456 * (t5498 * t5614 + t5618);
t5358 = (-t5439 * t5497 + t5499 * t5608) * g(3) + t5459 * (t5439 * t5499 + t5497 * t5608) + t5455 * (t5498 * t5619 + t5623);
t5357 = (-t5438 * t5497 + t5499 * t5611) * g(3) + t5461 * (t5438 * t5499 + t5497 * t5611) - t5457 * (-t5498 * t5612 + t5500 * t5519);
t5356 = (-t5437 * t5497 + t5499 * t5616) * g(3) + t5460 * (t5437 * t5499 + t5497 * t5616) - t5456 * (-t5498 * t5617 + t5500 * t5517);
t5355 = (-t5436 * t5497 + t5499 * t5621) * g(3) + t5459 * (t5436 * t5499 + t5497 * t5621) - t5455 * (-t5498 * t5622 + t5500 * t5515);
t5354 = g(3) * (-t5423 * t5497 + t5499 * t5625) + t5458 * (t5423 * t5499 + t5497 * t5625) + t5454 * (t5498 * t5626 + t5629);
t5353 = g(3) * (-t5422 * t5497 + t5499 * t5627) + t5458 * (t5422 * t5499 + t5497 * t5627) - t5454 * (-t5498 * t5628 + t5500 * t5503);
t1 = [(-((t5432 * t5487 + t5483 * t5646) * t5686 + (-t5391 * t5487 + t5417 * t5483) * t5519 + (t5483 * t5500 - t5487 * t5655) * t5690) * t5659 - ((t5431 * t5486 + t5482 * t5648) * t5687 + (-t5390 * t5486 + t5416 * t5482) * t5517 + (t5482 * t5500 - t5486 * t5655) * t5691) * t5664 - ((t5430 * t5485 + t5481 * t5650) * t5688 + (-t5389 * t5485 + t5415 * t5481) * t5515 + (t5481 * t5500 - t5485 * t5655) * t5692) * t5669 - ((t5420 * t5484 + t5480 * t5653) * t5689 + (-t5388 * t5484 + t5414 * t5480) * t5503 + (t5480 * t5500 - t5484 * t5655) * t5693) * t5674) * MDP(1) + (t5368 * t5572 - t5370 * t5569 - t5371 * t5566 - t5372 * t5563) * MDP(3) + (t5369 * t5572 - t5373 * t5569 - t5374 * t5566 - t5375 * t5563) * MDP(4) + (t5484 * t5561 - t5485 * t5557 - t5486 * t5556 - t5487 * t5555) * MDP(10) + (-t5484 * t5562 + t5485 * t5560 + t5486 * t5559 + t5487 * t5558) * MDP(11) + (-t5462 * t5491 - t5463 * t5492) * MDP(15) + ((-t5353 * t5584 - t5355 * t5581 - t5356 * t5578 - t5357 * t5575) * MDP(10) + (-t5354 * t5584 - t5358 * t5581 - t5359 * t5578 - t5360 * t5575) * MDP(11)) * t5531; (-(-(t5432 * t5483 - t5487 * t5646) * t5686 + (t5391 * t5483 + t5417 * t5487) * t5519 + (t5483 * t5655 + t5487 * t5500) * t5690) * t5659 - (-(t5431 * t5482 - t5486 * t5648) * t5687 + (t5390 * t5482 + t5416 * t5486) * t5517 + (t5482 * t5655 + t5486 * t5500) * t5691) * t5664 - (-(t5430 * t5481 - t5485 * t5650) * t5688 + (t5389 * t5481 + t5415 * t5485) * t5515 + (t5481 * t5655 + t5485 * t5500) * t5692) * t5669 - (-(t5420 * t5480 - t5484 * t5653) * t5689 + (t5388 * t5480 + t5414 * t5484) * t5503 + (t5480 * t5655 + t5484 * t5500) * t5693) * t5674) * MDP(1) + (-t5368 * t5573 + t5370 * t5570 + t5371 * t5567 + t5372 * t5564) * MDP(3) + (-t5369 * t5573 + t5373 * t5570 + t5374 * t5567 + t5375 * t5564) * MDP(4) + (-t5480 * t5561 + t5481 * t5557 + t5482 * t5556 + t5483 * t5555) * MDP(10) + (t5480 * t5562 - t5481 * t5560 - t5482 * t5559 - t5483 * t5558) * MDP(11) + (t5462 * t5492 - t5463 * t5491) * MDP(15) + ((t5353 * t5585 + t5355 * t5582 + t5356 * t5579 + t5357 * t5576) * MDP(10) + (t5354 * t5585 + t5358 * t5582 + t5359 * t5579 + t5360 * t5576) * MDP(11)) * t5531; (-(-t5426 * t5686 + t5471 * t5638 + (pkin(2) * t5647 + t5519 * t5539) * t5497) * t5659 - (-t5425 * t5687 + t5470 * t5639 + (pkin(2) * t5649 + t5517 * t5540) * t5497) * t5664 - (-t5424 * t5688 + t5469 * t5640 + (pkin(2) * t5651 + t5515 * t5541) * t5497) * t5669 - (-t5418 * t5689 + t5465 * t5641 + (pkin(2) * t5654 + t5503 * t5542) * t5497) * t5674) * MDP(1) + (t5368 * t5675 + t5370 * t5670 + t5371 * t5665 + t5372 * t5660) * MDP(3) + (t5369 * t5675 + t5373 * t5670 + t5374 * t5665 + t5375 * t5660) * MDP(4) + (t5401 * t5593 + t5408 * t5589 + t5409 * t5588 + t5410 * t5587 + (t5353 * t5680 + t5355 * t5679 + t5356 * t5678 + t5357 * t5677) * t5531) * MDP(10) + (-t5401 * t5594 - t5408 * t5592 - t5409 * t5591 - t5410 * t5590 + (t5354 * t5680 + t5358 * t5679 + t5359 * t5678 + t5360 * t5677) * t5531) * MDP(11) - g(3) * MDP(15); (-((-t5447 * t5532 + t5451 * t5711 + (t5447 * t5543 + t5451 * t5554) * t5513) * t5487 + (-t5447 * t5711 - t5451 * t5532 + (-t5447 * t5554 + t5451 * t5543) * t5513) * t5483) / ((pkin(3) * t5609 + t5698) * t5643 + t5513 * t5554) * t5457 - ((-t5533 * t5446 + t5450 * t5710 + (t5446 * t5544 + t5450 * t5551) * t5511) * t5486 + (-t5446 * t5710 - t5450 * t5533 + (-t5446 * t5551 + t5450 * t5544) * t5511) * t5482) / ((pkin(3) * t5614 + t5699) * t5644 + t5511 * t5551) * t5456 - ((-t5534 * t5445 + t5449 * t5709 + (t5445 * t5545 + t5449 * t5552) * t5509) * t5485 + (-t5445 * t5709 - t5449 * t5534 + (-t5445 * t5552 + t5449 * t5545) * t5509) * t5481) / ((pkin(3) * t5619 + t5700) * t5645 + t5509 * t5552) * t5455 - ((-t5535 * t5444 + t5448 * t5708 + (t5444 * t5546 + t5448 * t5553) * t5501) * t5484 + (-t5444 * t5708 - t5535 * t5448 + (-t5444 * t5553 + t5448 * t5546) * t5501) * t5480) / ((pkin(3) * t5626 + t5701) * t5652 + t5501 * t5553) * t5454) * MDP(1) + (-t5368 * t5574 + t5370 * t5571 + t5371 * t5568 + t5372 * t5565) * MDP(3) + (-t5369 * t5574 + t5373 * t5571 + t5374 * t5568 + t5375 * t5565) * MDP(4) + (-t5393 * t5561 + t5571 * t5707 + t5568 * t5706 + t5565 * t5705 + (t5353 * t5586 + t5355 * t5583 + t5356 * t5580 + t5357 * t5577) * t5531) * MDP(10) + (t5393 * t5562 - t5571 * t5704 - t5568 * t5703 - t5565 * t5702 + (t5354 * t5586 + t5358 * t5583 + t5359 * t5580 + t5360 * t5577) * t5531) * MDP(11) + t5462 * MDP(13) + t5463 * MDP(14);];
taugX  = t1;
