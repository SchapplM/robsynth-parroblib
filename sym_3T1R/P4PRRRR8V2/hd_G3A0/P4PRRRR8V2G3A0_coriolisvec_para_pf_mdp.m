% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4PRRRR8V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [15x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4PRRRR8V2G3A0_convert_par2_MPV_fixb.m

% Output:
% taucX [4x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(15,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [15 1]), ...
  'P4PRRRR8V2G3A0_coriolisvec_para_pf_mdp: MDP has to be [15x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:30:03
% EndTime: 2020-08-07 11:30:38
% DurationCPUTime: 36.53s
% Computational Cost: add. (178132->820), mult. (365816->1643), div. (10244->22), fcn. (289976->30), ass. (0->618)
t4859 = sin(qJ(2,4));
t4860 = cos(qJ(3,4));
t5154 = t4859 * t4860;
t4861 = cos(qJ(2,4));
t4882 = pkin(7) + pkin(6);
t4816 = t4861 * t4882;
t5287 = pkin(2) * t4859 - t4816;
t4751 = pkin(3) * t5154 + t5287;
t5262 = pkin(3) * t4860;
t4814 = pkin(2) + t5262;
t4857 = cos(pkin(4));
t4858 = sin(qJ(3,4));
t5170 = t4857 * t4858;
t4781 = t4814 * t5170;
t4855 = sin(pkin(4));
t5187 = t4855 * t4860;
t4700 = t4751 * t5187 + t4781;
t4697 = 0.1e1 / t4700;
t4867 = sin(qJ(2,3));
t4872 = cos(qJ(3,3));
t5151 = t4867 * t4872;
t4873 = cos(qJ(2,3));
t4823 = t4873 * t4882;
t5286 = pkin(2) * t4867 - t4823;
t4752 = pkin(3) * t5151 + t5286;
t5261 = pkin(3) * t4872;
t4817 = pkin(2) + t5261;
t4866 = sin(qJ(3,3));
t5167 = t4857 * t4866;
t4782 = t4817 * t5167;
t5179 = t4855 * t4872;
t4714 = t4752 * t5179 + t4782;
t4705 = 0.1e1 / t4714;
t4869 = sin(qJ(2,2));
t4874 = cos(qJ(3,2));
t5148 = t4869 * t4874;
t4875 = cos(qJ(2,2));
t4824 = t4875 * t4882;
t5285 = pkin(2) * t4869 - t4824;
t4753 = pkin(3) * t5148 + t5285;
t5260 = pkin(3) * t4874;
t4818 = pkin(2) + t5260;
t4868 = sin(qJ(3,2));
t5165 = t4857 * t4868;
t4783 = t4818 * t5165;
t5177 = t4855 * t4874;
t4715 = t4753 * t5177 + t4783;
t4707 = 0.1e1 / t4715;
t4871 = sin(qJ(2,1));
t4876 = cos(qJ(3,1));
t5145 = t4871 * t4876;
t4877 = cos(qJ(2,1));
t4825 = t4877 * t4882;
t5284 = pkin(2) * t4871 - t4825;
t4754 = pkin(3) * t5145 + t5284;
t5259 = pkin(3) * t4876;
t4819 = pkin(2) + t5259;
t4870 = sin(qJ(3,1));
t5163 = t4857 * t4870;
t4784 = t4819 * t5163;
t5175 = t4855 * t4876;
t4716 = t4754 * t5175 + t4784;
t4709 = 0.1e1 / t4716;
t4742 = pkin(3) * t5163 + t4855 * t5284;
t4852 = t4876 ^ 2;
t5263 = pkin(3) * t4852;
t5127 = t4871 * t5263;
t4692 = 0.1e1 / (pkin(2) * t5163 + t4742 * t4876 + t4855 * t5127);
t4741 = pkin(3) * t5165 + t4855 * t5285;
t4851 = t4874 ^ 2;
t5264 = pkin(3) * t4851;
t5128 = t4869 * t5264;
t4691 = 0.1e1 / (pkin(2) * t5165 + t4741 * t4874 + t4855 * t5128);
t4740 = pkin(3) * t5167 + t4855 * t5286;
t4850 = t4872 ^ 2;
t5265 = pkin(3) * t4850;
t5129 = t4867 * t5265;
t4690 = 0.1e1 / (pkin(2) * t5167 + t4740 * t4872 + t4855 * t5129);
t4739 = pkin(3) * t5170 + t4855 * t5287;
t4846 = t4860 ^ 2;
t5266 = pkin(3) * t4846;
t5130 = t4859 * t5266;
t4689 = 0.1e1 / (pkin(2) * t5170 + t4739 * t4860 + t4855 * t5130);
t5303 = (t4876 * t5284 + t5127) * t4855;
t5302 = (t4874 * t5285 + t5128) * t4855;
t5301 = (t4872 * t5286 + t5129) * t4855;
t5300 = (t4860 * t5287 + t5130) * t4855;
t5274 = 2 * MDP(6);
t4827 = 0.2e1 * t4846 - 0.1e1;
t4828 = 0.2e1 * t4850 - 0.1e1;
t4829 = 0.2e1 * t4851 - 0.1e1;
t4830 = 0.2e1 * t4852 - 0.1e1;
t5295 = t4814 * t4857;
t5294 = t4817 * t4857;
t5293 = t4818 * t4857;
t5292 = t4819 * t4857;
t4883 = xP(4);
t4843 = sin(t4883);
t4844 = cos(t4883);
t4887 = koppelP(1,2);
t4891 = koppelP(1,1);
t4776 = t4843 * t4891 + t4844 * t4887;
t4865 = legFrame(1,2);
t4835 = sin(t4865);
t4839 = cos(t4865);
t4878 = xDP(4);
t4880 = xDP(2);
t4881 = xDP(1);
t4961 = t4843 * t4887 - t4844 * t4891;
t4679 = -(t4961 * t4878 - t4880) * t4835 + (t4776 * t4878 - t4881) * t4839;
t4854 = sin(pkin(8));
t4879 = xDP(3);
t4813 = t4879 * t4854;
t4856 = cos(pkin(8));
t4672 = t4679 * t4856 + t4813;
t5158 = t4857 * t4879;
t5162 = t4857 * t4871;
t4646 = ((t4679 * t5162 - t4877 * t4879) * t4856 + (t4679 * t4877 + t4871 * t5158) * t4854) * t4870 + t4672 * t5175;
t4638 = t4646 ^ 2 / t4716 ^ 2;
t4822 = t4871 * t4882;
t4792 = pkin(2) * t4877 + t4822;
t5159 = t4857 * t4877;
t5172 = t4856 * t4857;
t4684 = (t4854 * t4871 - t4856 * t5159) * t5259 + t5284 * t4854 - t4792 * t5172;
t4766 = t4854 * t4877 + t4856 * t5162;
t4736 = t4766 * t4870 + t4856 * t5175;
t4770 = t4819 * t4871 - t4825;
t5171 = t4856 * t4879;
t4654 = (t4819 * t4877 + t4822) * t4672 * t4857 - (t4679 * t4854 - t5171) * t4770;
t4728 = t4770 * t5175 + t4784;
t5227 = t4654 / t4728;
t5056 = 0.2e1 * t4736 * t5227;
t5235 = t4646 * t4709;
t4953 = t5056 * t5235;
t5146 = t4870 * t4876;
t5064 = t4692 * t5146;
t5291 = (t4684 * t4638 + t4953) * t5064;
t4886 = koppelP(2,2);
t4890 = koppelP(2,1);
t4775 = t4843 * t4890 + t4844 * t4886;
t4864 = legFrame(2,2);
t4834 = sin(t4864);
t4838 = cos(t4864);
t4962 = t4843 * t4886 - t4844 * t4890;
t4678 = -(t4962 * t4878 - t4880) * t4834 + (t4775 * t4878 - t4881) * t4838;
t4671 = t4678 * t4856 + t4813;
t5164 = t4857 * t4869;
t4645 = ((t4678 * t5164 - t4875 * t4879) * t4856 + (t4678 * t4875 + t4869 * t5158) * t4854) * t4868 + t4671 * t5177;
t4637 = t4645 ^ 2 / t4715 ^ 2;
t4821 = t4869 * t4882;
t4791 = pkin(2) * t4875 + t4821;
t5160 = t4857 * t4875;
t4682 = (t4854 * t4869 - t4856 * t5160) * t5260 + t5285 * t4854 - t4791 * t5172;
t4765 = t4854 * t4875 + t4856 * t5164;
t4735 = t4765 * t4868 + t4856 * t5177;
t4769 = t4818 * t4869 - t4824;
t4653 = (t4818 * t4875 + t4821) * t4671 * t4857 - (t4678 * t4854 - t5171) * t4769;
t4727 = t4769 * t5177 + t4783;
t5228 = t4653 / t4727;
t5057 = 0.2e1 * t4735 * t5228;
t5236 = t4645 * t4707;
t4954 = t5057 * t5236;
t5149 = t4868 * t4874;
t5066 = t4691 * t5149;
t5290 = (t4682 * t4637 + t4954) * t5066;
t4885 = koppelP(3,2);
t4889 = koppelP(3,1);
t4774 = t4843 * t4889 + t4844 * t4885;
t4863 = legFrame(3,2);
t4833 = sin(t4863);
t4837 = cos(t4863);
t4963 = t4843 * t4885 - t4844 * t4889;
t4677 = -(t4963 * t4878 - t4880) * t4833 + (t4774 * t4878 - t4881) * t4837;
t4670 = t4677 * t4856 + t4813;
t5166 = t4857 * t4867;
t4644 = ((t4677 * t5166 - t4873 * t4879) * t4856 + (t4677 * t4873 + t4867 * t5158) * t4854) * t4866 + t4670 * t5179;
t4636 = t4644 ^ 2 / t4714 ^ 2;
t4820 = t4867 * t4882;
t4790 = pkin(2) * t4873 + t4820;
t5161 = t4857 * t4873;
t4680 = (t4854 * t4867 - t4856 * t5161) * t5261 + t5286 * t4854 - t4790 * t5172;
t4764 = t4854 * t4873 + t4856 * t5166;
t4734 = t4764 * t4866 + t4856 * t5179;
t4768 = t4817 * t4867 - t4823;
t4652 = (t4817 * t4873 + t4820) * t4670 * t4857 - (t4677 * t4854 - t5171) * t4768;
t4726 = t4768 * t5179 + t4782;
t5229 = t4652 / t4726;
t5058 = 0.2e1 * t4734 * t5229;
t5237 = t4644 * t4705;
t4955 = t5058 * t5237;
t5152 = t4866 * t4872;
t5068 = t4690 * t5152;
t5289 = (t4680 * t4636 + t4955) * t5068;
t4884 = koppelP(4,2);
t4888 = koppelP(4,1);
t4773 = t4843 * t4888 + t4844 * t4884;
t4862 = legFrame(4,2);
t4832 = sin(t4862);
t4836 = cos(t4862);
t4964 = t4843 * t4884 - t4844 * t4888;
t4676 = -(t4964 * t4878 - t4880) * t4832 + (t4773 * t4878 - t4881) * t4836;
t4669 = t4676 * t4856 + t4813;
t5169 = t4857 * t4859;
t4640 = ((t4676 * t5169 - t4861 * t4879) * t4856 + (t4676 * t4861 + t4859 * t5158) * t4854) * t4858 + t4669 * t5187;
t4635 = t4640 ^ 2 / t4700 ^ 2;
t4815 = t4859 * t4882;
t4786 = pkin(2) * t4861 + t4815;
t5168 = t4857 * t4861;
t4673 = (t4854 * t4859 - t4856 * t5168) * t5262 + t5287 * t4854 - t4786 * t5172;
t4757 = t4854 * t4861 + t4856 * t5169;
t4730 = t4757 * t4858 + t4856 * t5187;
t4767 = t4814 * t4859 - t4816;
t4648 = t4669 * (t4814 * t4861 + t4815) * t4857 - (t4676 * t4854 - t5171) * t4767;
t4719 = t4767 * t5187 + t4781;
t5233 = t4648 / t4719;
t5059 = 0.2e1 * t4730 * t5233;
t5238 = t4640 * t4697;
t4956 = t5059 * t5238;
t5155 = t4858 * t4860;
t5070 = t4689 * t5155;
t5288 = (t4635 * t4673 + t4956) * t5070;
t5283 = t4776 * t4835 + t4839 * t4961;
t5282 = t4775 * t4834 + t4838 * t4962;
t5281 = t4774 * t4833 + t4837 * t4963;
t5280 = t4773 * t4832 + t4836 * t4964;
t5189 = t4855 * t4858;
t4948 = pkin(3) * t5189 - t4857 * t5287;
t4693 = t4786 * t4856 + t4948 * t4854;
t4755 = t4854 * t5169 - t4856 * t4861;
t5188 = t4855 * t4859;
t5191 = t4854 * t4855;
t5271 = pkin(2) * t4858;
t4655 = (-t4755 * t4836 + t4832 * t5188) * t5266 + (t4693 * t4836 + t4739 * t4832) * t4860 + (t4832 * t4857 + t4836 * t5191) * t5271;
t4656 = (t4755 * t4832 + t4836 * t5188) * t5266 + (-t4693 * t4832 + t4739 * t4836) * t4860 + (-t4832 * t5191 + t4836 * t4857) * t5271;
t5275 = 0.2e1 * pkin(2);
t5273 = -2 * MDP(10);
t5272 = -2 * MDP(11);
t5270 = pkin(2) * t4866;
t5269 = pkin(2) * t4868;
t5268 = pkin(2) * t4870;
t4893 = 0.1e1 / pkin(3);
t5267 = pkin(2) * t4893;
t5258 = pkin(3) * t5275;
t5257 = MDP(3) * t4855;
t5256 = MDP(4) * t4855;
t5255 = MDP(9) * t4893;
t4826 = pkin(2) ^ 2 + t4882 ^ 2;
t4892 = pkin(3) ^ 2;
t5082 = t4858 * t5233;
t4607 = -t4882 * t5082 + (t4846 * t4892 + t4860 * t5258 + t4826) * t5238;
t5099 = t4882 * t5238;
t5021 = t4858 * t5099;
t5081 = t4893 * t5233;
t5157 = t4857 * t4893;
t5173 = t4855 * t4893;
t4853 = t4878 ^ 2;
t5192 = t4853 * t4893;
t4591 = -(-t4857 * t5021 + (-t4751 * t4858 * t5173 + t4857 * (t4860 * t5267 + t4846)) * t5233) * t4697 * t5081 + (-t4607 * t5157 * t5238 + t5280 * t4673 * t5192) * t4689;
t5254 = t4591 * t4858;
t5253 = t4591 * t4860;
t5077 = t4866 * t5229;
t4608 = -t4882 * t5077 + (t4850 * t4892 + t4872 * t5258 + t4826) * t5237;
t5090 = t4882 * t5237;
t5014 = t4866 * t5090;
t5076 = t4893 * t5229;
t5225 = t4680 * t4690;
t4592 = -t4608 * t4690 * t5157 * t5237 - (-t4857 * t5014 + (-t4752 * t4866 * t5173 + t4857 * (t4872 * t5267 + t4850)) * t5229) * t4705 * t5076 + t5281 * t5192 * t5225;
t5252 = t4592 * t4866;
t5251 = t4592 * t4872;
t5075 = t4868 * t5228;
t4609 = -t4882 * t5075 + (t4851 * t4892 + t4874 * t5258 + t4826) * t5236;
t5087 = t4882 * t5236;
t5013 = t4868 * t5087;
t5074 = t4893 * t5228;
t5224 = t4682 * t4691;
t4593 = -t4609 * t4691 * t5157 * t5236 - (-t4857 * t5013 + (-t4753 * t4868 * t5173 + t4857 * (t4874 * t5267 + t4851)) * t5228) * t4707 * t5074 + t5282 * t5192 * t5224;
t5250 = t4593 * t4868;
t5249 = t4593 * t4874;
t5073 = t4870 * t5227;
t4610 = -t4882 * t5073 + (t4852 * t4892 + t4876 * t5258 + t4826) * t5235;
t5084 = t4882 * t5235;
t5012 = t4870 * t5084;
t5072 = t4893 * t5227;
t5223 = t4684 * t4692;
t4594 = -t4610 * t4692 * t5157 * t5235 - (-t4857 * t5012 + (-t4754 * t4870 * t5173 + t4857 * (t4876 * t5267 + t4852)) * t5227) * t4709 * t5072 + t5283 * t5192 * t5223;
t5248 = t4594 * t4870;
t5247 = t4594 * t4876;
t4617 = t5021 - t5233;
t5101 = t4860 * t5238;
t4595 = (t4607 * t5101 + (pkin(2) * t5081 - t4617 * t4860) * t5233 + (t4655 * t4964 - t4656 * t4773) * t4853) * t4689;
t5246 = t4595 * t4689;
t5245 = t4595 * t4730;
t4625 = t5014 - t5229;
t5185 = t4855 * t4866;
t4947 = pkin(3) * t5185 - t4857 * t5286;
t4694 = t4790 * t4856 + t4947 * t4854;
t4758 = t4854 * t5166 - t4856 * t4873;
t5184 = t4855 * t4867;
t4657 = (t4758 * t4833 + t4837 * t5184) * t5265 + (-t4694 * t4833 + t4740 * t4837) * t4872 + (-t4833 * t5191 + t4837 * t4857) * t5270;
t4658 = -(t4758 * t4837 - t4833 * t5184) * t5265 + (t4694 * t4837 + t4740 * t4833) * t4872 + (t4833 * t4857 + t4837 * t5191) * t5270;
t5092 = t4872 * t5237;
t4596 = (t4608 * t5092 + (pkin(2) * t5076 - t4625 * t4872) * t5229 + (-t4657 * t4774 + t4658 * t4963) * t4853) * t4690;
t5244 = t4596 * t4690;
t5243 = t4596 * t4734;
t4626 = t5013 - t5228;
t5183 = t4855 * t4868;
t4946 = pkin(3) * t5183 - t4857 * t5285;
t4695 = t4791 * t4856 + t4946 * t4854;
t4759 = t4854 * t5164 - t4856 * t4875;
t5182 = t4855 * t4869;
t4659 = (t4759 * t4834 + t4838 * t5182) * t5264 + (-t4695 * t4834 + t4741 * t4838) * t4874 + (-t4834 * t5191 + t4838 * t4857) * t5269;
t4660 = -(t4759 * t4838 - t4834 * t5182) * t5264 + (t4695 * t4838 + t4741 * t4834) * t4874 + (t4834 * t4857 + t4838 * t5191) * t5269;
t5089 = t4874 * t5236;
t4597 = (t4609 * t5089 + (pkin(2) * t5074 - t4626 * t4874) * t5228 + (-t4659 * t4775 + t4660 * t4962) * t4853) * t4691;
t5242 = t4597 * t4691;
t5241 = t4597 * t4735;
t4627 = t5012 - t5227;
t5181 = t4855 * t4870;
t4945 = pkin(3) * t5181 - t4857 * t5284;
t4696 = t4792 * t4856 + t4945 * t4854;
t4760 = t4854 * t5162 - t4856 * t4877;
t5180 = t4855 * t4871;
t4661 = (t4760 * t4835 + t4839 * t5180) * t5263 + (-t4696 * t4835 + t4742 * t4839) * t4876 + (-t4835 * t5191 + t4839 * t4857) * t5268;
t4662 = -(t4760 * t4839 - t4835 * t5180) * t5263 + (t4696 * t4839 + t4742 * t4835) * t4876 + (t4835 * t4857 + t4839 * t5191) * t5268;
t5086 = t4876 * t5235;
t4598 = (t4610 * t5086 + (pkin(2) * t5072 - t4627 * t4876) * t5227 + (-t4661 * t4776 + t4662 * t4961) * t4853) * t4692;
t5240 = t4598 * t4692;
t5239 = t4598 * t4736;
t5234 = t4648 ^ 2 / t4719 ^ 2;
t5232 = t4652 ^ 2 / t4726 ^ 2;
t5231 = t4653 ^ 2 / t4727 ^ 2;
t5230 = t4654 ^ 2 / t4728 ^ 2;
t5226 = t4673 * t4689;
t5222 = t4689 * t4730;
t5221 = t4689 * t4832;
t5220 = t4689 * t4836;
t5219 = t4690 * t4734;
t5218 = t4690 * t4833;
t5217 = t4690 * t4837;
t5216 = t4691 * t4735;
t5215 = t4691 * t4834;
t5214 = t4691 * t4838;
t5213 = t4692 * t4736;
t5212 = t4692 * t4835;
t5211 = t4692 * t4839;
t5210 = t4730 * t4832;
t5209 = t4730 * t4836;
t5208 = t4734 * t4833;
t5207 = t4734 * t4837;
t5206 = t4735 * t4834;
t5205 = t4735 * t4838;
t5204 = t4736 * t4835;
t5203 = t4736 * t4839;
t5194 = t4843 * t4853;
t5193 = t4844 * t4853;
t5190 = t4854 * t4857;
t5186 = t4855 * t4861;
t5178 = t4855 * t4873;
t5176 = t4855 * t4875;
t5174 = t4855 * t4877;
t5156 = t4858 * t4859;
t5153 = t4866 * t4867;
t5150 = t4868 * t4869;
t5147 = t4870 * t4871;
t5008 = t4861 * t5081;
t5063 = t4855 * t5154;
t5100 = t4861 * t5238;
t4587 = (-((t4855 * t5100 + t4857 * t5081) * t5266 + ((-t5082 + t5099) * t4859 + pkin(2) * t5100) * t5187 + t4617 * t4857) * t5238 - (t4855 * t5008 + (t4846 * t4857 - t4858 * t5063 - t4857) * t5238) * t5233 - t5280 * t4853 * t4730) * t4689;
t4579 = t4587 * t5186 + t4591 * t4857;
t4894 = 0.1e1 / pkin(3) ^ 2;
t5083 = t4894 * t5234;
t4624 = t4635 + t5083;
t4934 = -0.2e1 * t5008 * t5238;
t5009 = t4860 * t5083;
t5144 = -t4579 * t4858 - t4591 * t5063 + (t4624 * t5156 + t4860 * t4934) * t4855 - t4857 * t5009;
t5010 = t4858 * t5083;
t5143 = t4579 * t4860 - t4857 * t5010 + (-t4591 * t5156 - t4624 * t5154 + t4858 * t4934) * t4855;
t4998 = t4873 * t5076;
t5062 = t4855 * t5151;
t5091 = t4873 * t5237;
t4588 = (-((t4855 * t5091 + t4857 * t5076) * t5265 + ((-t5077 + t5090) * t4867 + pkin(2) * t5091) * t5179 + t4625 * t4857) * t5237 - (t4855 * t4998 + (t4850 * t4857 - t4866 * t5062 - t4857) * t5237) * t5229 - t5281 * t4853 * t4734) * t4690;
t4581 = t4588 * t5178 + t4592 * t4857;
t5080 = t4894 * t5232;
t4628 = t4636 + t5080;
t4933 = -0.2e1 * t4998 * t5237;
t5005 = t4872 * t5080;
t5142 = -t4581 * t4866 - t4592 * t5062 + (t4628 * t5153 + t4872 * t4933) * t4855 - t4857 * t5005;
t4997 = t4875 * t5074;
t5061 = t4855 * t5148;
t5088 = t4875 * t5236;
t4589 = (-((t4855 * t5088 + t4857 * t5074) * t5264 + ((-t5075 + t5087) * t4869 + pkin(2) * t5088) * t5177 + t4626 * t4857) * t5236 - (t4855 * t4997 + (t4851 * t4857 - t4868 * t5061 - t4857) * t5236) * t5228 - t5282 * t4853 * t4735) * t4691;
t4582 = t4589 * t5176 + t4593 * t4857;
t5079 = t4894 * t5231;
t4629 = t4637 + t5079;
t4932 = -0.2e1 * t4997 * t5236;
t5002 = t4874 * t5079;
t5141 = -t4582 * t4868 - t4593 * t5061 + (t4629 * t5150 + t4874 * t4932) * t4855 - t4857 * t5002;
t4996 = t4877 * t5072;
t5060 = t4855 * t5145;
t5085 = t4877 * t5235;
t4590 = (-((t4855 * t5085 + t4857 * t5072) * t5263 + ((-t5073 + t5084) * t4871 + pkin(2) * t5085) * t5175 + t4627 * t4857) * t5235 - (t4855 * t4996 + (t4852 * t4857 - t4870 * t5060 - t4857) * t5235) * t5227 - t5283 * t4853 * t4736) * t4692;
t4583 = t4590 * t5174 + t4594 * t4857;
t5078 = t4894 * t5230;
t4630 = t4638 + t5078;
t4931 = -0.2e1 * t4996 * t5235;
t4999 = t4876 * t5078;
t5140 = -t4583 * t4870 - t4594 * t5060 + (t4630 * t5147 + t4876 * t4931) * t4855 - t4857 * t4999;
t5006 = t4866 * t5080;
t5139 = t4581 * t4872 - t4857 * t5006 + (-t4592 * t5153 - t4628 * t5151 + t4866 * t4933) * t4855;
t5003 = t4868 * t5079;
t5138 = t4582 * t4874 - t4857 * t5003 + (-t4593 * t5150 - t4629 * t5148 + t4868 * t4932) * t4855;
t5000 = t4870 * t5078;
t5137 = t4583 * t4876 - t4857 * t5000 + (-t4594 * t5147 - t4630 * t5145 + t4870 * t4931) * t4855;
t5126 = t4587 * t5226;
t5125 = t4587 * t5222;
t5124 = t4588 * t5225;
t5123 = t4588 * t5219;
t5122 = t4589 * t5224;
t5121 = t4589 * t5216;
t5120 = t4590 * t5223;
t5119 = t4590 * t5213;
t5118 = t4591 * t5226;
t5117 = t4591 * t5222;
t5116 = t4592 * t5225;
t5115 = t4592 * t5219;
t5114 = t4593 * t5224;
t5113 = t4593 * t5216;
t5112 = t4594 * t5223;
t5111 = t4594 * t5213;
t5110 = t4859 * t5245;
t5109 = t4861 * t5245;
t5108 = t4867 * t5243;
t5107 = t4873 * t5243;
t5106 = t4869 * t5241;
t5105 = t4875 * t5241;
t5104 = t4871 * t5239;
t5103 = t4877 * t5239;
t5102 = t4860 * t4635;
t5098 = t4690 * t4636;
t5097 = t4872 * t4636;
t5096 = t4691 * t4637;
t5095 = t4874 * t4637;
t5094 = t4692 * t4638;
t5093 = t4876 * t4638;
t4701 = t4773 * t4836 - t4964 * t4832;
t5071 = t4701 * t5222;
t4702 = t4774 * t4837 - t4963 * t4833;
t5069 = t4702 * t5219;
t4703 = t4775 * t4838 - t4962 * t4834;
t5067 = t4703 * t5216;
t4704 = t4776 * t4839 - t4961 * t4835;
t5065 = t4704 * t5213;
t5051 = pkin(6) * t5081;
t5050 = pkin(6) * t5076;
t5049 = pkin(6) * t5074;
t5048 = pkin(6) * t5072;
t5047 = t4858 * t5126;
t5046 = t4860 * t5126;
t4845 = t4858 ^ 2;
t5045 = t4845 * t5125;
t5044 = t4866 * t5124;
t5043 = t4872 * t5124;
t4847 = t4866 ^ 2;
t5042 = t4847 * t5123;
t5041 = t4868 * t5122;
t5040 = t4874 * t5122;
t4848 = t4868 ^ 2;
t5039 = t4848 * t5121;
t5038 = t4870 * t5120;
t5037 = t4876 * t5120;
t4849 = t4870 ^ 2;
t5036 = t4849 * t5119;
t5035 = t4858 * t5117;
t5034 = t4860 * t5117;
t5033 = t4866 * t5115;
t5032 = t4872 * t5115;
t5031 = t4868 * t5113;
t5030 = t4874 * t5113;
t5029 = t4870 * t5111;
t5028 = t4876 * t5111;
t5027 = t4595 * t5071;
t5026 = t4596 * t5069;
t5025 = t4597 * t5067;
t5024 = t4598 * t5065;
t5023 = t4689 * t4858 * t4635;
t5022 = t4689 * t5102;
t5020 = t4866 * t5098;
t5019 = t4690 * t5097;
t5018 = t4868 * t5096;
t5017 = t4691 * t5095;
t5016 = t4870 * t5094;
t5015 = t4692 * t5093;
t5011 = t5222 * t5234;
t5007 = t5219 * t5232;
t5004 = t5216 * t5231;
t5001 = t5213 * t5230;
t4987 = t4587 * t4730 * t5070;
t4986 = t4588 * t4734 * t5068;
t4985 = t4589 * t4735 * t5066;
t4984 = t4590 * t4736 * t5064;
t4983 = t4673 * t5023;
t4982 = t4673 * t5022;
t4981 = t4680 * t5020;
t4980 = t4680 * t5019;
t4979 = t4680 * t4702 * t5098;
t4978 = t4682 * t5018;
t4977 = t4682 * t5017;
t4976 = t4682 * t4703 * t5096;
t4975 = t4684 * t5016;
t4974 = t4684 * t5015;
t4973 = t4684 * t4704 * t5094;
t4972 = t4858 * t5011;
t4971 = t4860 * t5011;
t4970 = t4866 * t5007;
t4969 = t4872 * t5007;
t4968 = t4868 * t5004;
t4967 = t4874 * t5004;
t4966 = t4870 * t5001;
t4965 = t4876 * t5001;
t4960 = t4814 * t5191;
t4959 = t4817 * t5191;
t4958 = t4818 * t5191;
t4957 = t4819 * t5191;
t4952 = t4587 * t5275 + t4595 * t5186;
t4951 = t4588 * t5275 + t4596 * t5178;
t4950 = t4589 * t5275 + t4597 * t5176;
t4949 = t4590 * t5275 + t4598 * t5174;
t4944 = -t4587 * t4859 - t4861 * t4635;
t4943 = t4587 * t4861 - t4859 * t4635;
t4942 = -t4588 * t4867 - t4873 * t4636;
t4941 = t4588 * t4873 - t4867 * t4636;
t4940 = -t4589 * t4869 - t4875 * t4637;
t4939 = t4589 * t4875 - t4869 * t4637;
t4938 = -t4590 * t4871 - t4877 * t4638;
t4937 = t4590 * t4877 - t4871 * t4638;
t4580 = pkin(6) * t4587 + t4595 * t5188;
t4565 = t4595 * t4857 * t4860 - t4580 * t4858;
t4615 = t5238 * t5271 + t4860 * t5051 / 0.2e1;
t4930 = t4565 * t4673 + t4615 * t5059;
t4566 = -t4580 * t4860 - t4595 * t5170;
t4616 = pkin(2) * t5101 - t4858 * t5051 / 0.2e1;
t4929 = t4566 * t4673 + t4616 * t5059;
t4584 = pkin(6) * t4588 + t4596 * t5184;
t4573 = t4596 * t4857 * t4872 - t4584 * t4866;
t4618 = t5237 * t5270 + t4872 * t5050 / 0.2e1;
t4928 = t4573 * t4680 + t4618 * t5058;
t4585 = pkin(6) * t4589 + t4597 * t5182;
t4574 = t4597 * t4857 * t4874 - t4585 * t4868;
t4619 = t5236 * t5269 + t4874 * t5049 / 0.2e1;
t4927 = t4574 * t4682 + t4619 * t5057;
t4586 = pkin(6) * t4590 + t4598 * t5180;
t4575 = t4598 * t4857 * t4876 - t4586 * t4870;
t4620 = t5235 * t5268 + t4876 * t5048 / 0.2e1;
t4926 = t4575 * t4684 + t4620 * t5056;
t4576 = -t4584 * t4872 - t4596 * t5167;
t4621 = pkin(2) * t5092 - t4866 * t5050 / 0.2e1;
t4925 = t4576 * t4680 + t4621 * t5058;
t4577 = -t4585 * t4874 - t4597 * t5165;
t4622 = pkin(2) * t5089 - t4868 * t5049 / 0.2e1;
t4924 = t4577 * t4682 + t4622 * t5057;
t4578 = -t4586 * t4876 - t4598 * t5163;
t4623 = pkin(2) * t5086 - t4870 * t5048 / 0.2e1;
t4923 = t4578 * t4684 + t4623 * t5056;
t4611 = t4827 * t4635;
t4922 = t4611 * t4673 + t4827 * t4956;
t4612 = t4828 * t4636;
t4921 = t4612 * t4680 + t4828 * t4955;
t4613 = t4829 * t4637;
t4920 = t4613 * t4682 + t4829 * t4954;
t4614 = t4830 * t4638;
t4919 = t4614 * t4684 + t4830 * t4953;
t4771 = pkin(2) * t4856 + t4882 * t5190;
t4772 = pkin(2) * t5190 - t4856 * t4882;
t4914 = t4755 * t5266 - (t4771 * t4861 - t4772 * t4859) * t4860;
t4913 = t4758 * t5265 - (t4771 * t4873 - t4772 * t4867) * t4872;
t4912 = t4759 * t5264 - (t4771 * t4875 - t4772 * t4869) * t4874;
t4911 = t4760 * t5263 - (t4771 * t4877 - t4772 * t4871) * t4876;
t4910 = t4595 * MDP(1) + t5143 * MDP(10) + t5144 * MDP(11);
t4909 = t4596 * MDP(1) + t5139 * MDP(10) + t5142 * MDP(11);
t4908 = t4597 * MDP(1) + t5138 * MDP(10) + t5141 * MDP(11);
t4907 = t4598 * MDP(1) + t5137 * MDP(10) + t5140 * MDP(11);
t4906 = t4943 * MDP(3) + t4944 * MDP(4);
t4905 = t4941 * MDP(3) + t4942 * MDP(4);
t4904 = t4939 * MDP(3) + t4940 * MDP(4);
t4903 = t4937 * MDP(3) + t4938 * MDP(4);
t4902 = (t4615 * t5273 + t4616 * t5272 + 0.2e1 * (MDP(5) * t5155 + MDP(6) * t4827) * t5238) * t5233;
t4901 = (t4618 * t5273 + t4621 * t5272 + 0.2e1 * (MDP(5) * t5152 + MDP(6) * t4828) * t5237) * t5229;
t4900 = (t4619 * t5273 + t4622 * t5272 + 0.2e1 * (MDP(5) * t5149 + MDP(6) * t4829) * t5236) * t5228;
t4899 = (t4620 * t5273 + t4623 * t5272 + 0.2e1 * (MDP(5) * t5146 + MDP(6) * t4830) * t5235) * t5227;
t4898 = -t4858 * MDP(5) * t5102 + t4565 * MDP(10) + t4566 * MDP(11) - t4611 * MDP(6) + t4591 * MDP(9) + (MDP(7) * t4858 + MDP(8) * t4860) * t4587;
t4897 = -t4866 * MDP(5) * t5097 + t4573 * MDP(10) + t4576 * MDP(11) - t4612 * MDP(6) + t4592 * MDP(9) + (MDP(7) * t4866 + MDP(8) * t4872) * t4588;
t4896 = -t4868 * MDP(5) * t5095 + t4574 * MDP(10) + t4577 * MDP(11) - t4613 * MDP(6) + t4593 * MDP(9) + (MDP(7) * t4868 + MDP(8) * t4874) * t4589;
t4895 = -t4870 * MDP(5) * t5093 + t4575 * MDP(10) + t4578 * MDP(11) - t4614 * MDP(6) + t4594 * MDP(9) + (MDP(7) * t4870 + MDP(8) * t4876) * t4590;
t4733 = t4759 * t4868 + t4854 * t5177;
t4732 = t4758 * t4866 + t4854 * t5179;
t4731 = t4760 * t4870 + t4854 * t5175;
t4729 = t4755 * t4858 + t4854 * t5187;
t4688 = (t4854 * t5159 + t4856 * t4871) * t5259 + t4792 * t5190 + t4856 * t5284;
t4687 = (t4854 * t5160 + t4856 * t4869) * t5260 + t4791 * t5190 + t4856 * t5285;
t4686 = (t4854 * t5161 + t4856 * t4867) * t5261 + t4790 * t5190 + t4856 * t5286;
t4675 = (t4854 * t5168 + t4856 * t4859) * t5262 + t4786 * t5190 + t4856 * t5287;
t4668 = -t4766 * t5263 - t4792 * t4854 * t4876 + (pkin(2) * t5181 + t4945 * t4876) * t4856;
t4667 = -t4765 * t5264 - t4791 * t4854 * t4874 + (pkin(2) * t5183 + t4946 * t4874) * t4856;
t4666 = -t4764 * t5265 - t4790 * t4854 * t4872 + (pkin(2) * t5185 + t4947 * t4872) * t4856;
t4665 = -t4757 * t5266 - t4786 * t4854 * t4860 + (pkin(2) * t5189 + t4948 * t4860) * t4856;
t4634 = ((t4776 * t4911 - t4961 * t5303 + (-t4776 * t4957 - t4961 * t5292) * t4870) * t4839 + (-t4776 * t5303 - t4911 * t4961 + (-t4776 * t5292 + t4957 * t4961) * t4870) * t4835) * t4709;
t4633 = ((t4775 * t4912 - t4962 * t5302 + (-t4775 * t4958 - t4962 * t5293) * t4868) * t4838 + (-t4775 * t5302 - t4912 * t4962 + (-t4775 * t5293 + t4958 * t4962) * t4868) * t4834) * t4707;
t4632 = ((t4774 * t4913 - t4963 * t5301 + (-t4774 * t4959 - t4963 * t5294) * t4866) * t4837 + (-t4774 * t5301 - t4913 * t4963 + (-t4774 * t5294 + t4959 * t4963) * t4866) * t4833) * t4705;
t4631 = ((t4914 * t4773 - t4964 * t5300 + (-t4773 * t4960 - t4964 * t5295) * t4858) * t4836 + (-t4773 * t5300 - t4964 * t4914 + (-t4773 * t5295 + t4960 * t4964) * t4858) * t4832) * t4697;
t4572 = -pkin(6) * t5248 + t4949 * t4876;
t4571 = -pkin(6) * t5247 - t4949 * t4870;
t4570 = -pkin(6) * t5250 + t4950 * t4874;
t4569 = -pkin(6) * t5249 - t4950 * t4868;
t4568 = -pkin(6) * t5252 + t4951 * t4872;
t4567 = -pkin(6) * t5251 - t4951 * t4866;
t4558 = -pkin(6) * t5254 + t4952 * t4860;
t4557 = -pkin(6) * t5253 - t4952 * t4858;
t1 = [(t4655 * t5246 + t4658 * t5244 + t4660 * t5242 + t4662 * t5240) * MDP(1) + (-t4836 * t5125 - t4837 * t5123 - t4838 * t5121 - t4839 * t5119) * MDP(2) + ((t4937 * t4662 - t4839 * t5103) * t4692 + (t4939 * t4660 - t4838 * t5105) * t4691 + (t4941 * t4658 - t4837 * t5107) * t4690 + (t4943 * t4655 - t4836 * t5109) * t4689) * t5257 + ((t4938 * t4662 + t4839 * t5104) * t4692 + (t4940 * t4660 + t4838 * t5106) * t4691 + (t4942 * t4658 + t4837 * t5108) * t4690 + (t4944 * t4655 + t4836 * t5110) * t4689) * t5256 + (-t4836 * t5045 - t4837 * t5042 - t4838 * t5039 - t4839 * t5036 + (-t4836 * t5288 - t4837 * t5289 - t4838 * t5290 - t4839 * t5291) * t4893) * MDP(5) + (-0.2e1 * t4836 * t4987 - 0.2e1 * t4837 * t4986 - 0.2e1 * t4838 * t4985 - 0.2e1 * t4839 * t4984 + (-t4919 * t5211 - t4920 * t5214 - t4921 * t5217 - t4922 * t5220) * t4893) * MDP(6) + (-t4836 * t5035 - t4837 * t5033 - t4838 * t5031 - t4839 * t5029 + (-t4836 * t4971 - t4837 * t4969 - t4838 * t4967 - t4839 * t4965) * t4894 + (t4836 * t5047 + t4837 * t5044 + t4838 * t5041 + t4839 * t5038) * t4893) * MDP(7) + (-t4836 * t5034 - t4837 * t5032 - t4838 * t5030 - t4839 * t5028 + (t4836 * t4972 + t4837 * t4970 + t4838 * t4968 + t4839 * t4966) * t4894 + (t4836 * t5046 + t4837 * t5043 + t4838 * t5040 + t4839 * t5037) * t4893) * MDP(8) + (t4836 * t5118 + t4837 * t5116 + t4838 * t5114 + t4839 * t5112) * t5255 + ((-t4572 * t5203 + t5137 * t4662) * t4692 + (-t4570 * t5205 + t5138 * t4660) * t4691 + (-t4568 * t5207 + t5139 * t4658) * t4690 + (-t4558 * t5209 + t5143 * t4655) * t4689 + (t4926 * t5211 + t4927 * t5214 + t4928 * t5217 + t4930 * t5220 + (t4836 * t4983 + t4837 * t4981 + t4838 * t4978 + t4839 * t4975) * pkin(2)) * t4893) * MDP(10) + ((-t4571 * t5203 + t5140 * t4662) * t4692 + (-t4569 * t5205 + t5141 * t4660) * t4691 + (-t4567 * t5207 + t5142 * t4658) * t4690 + (-t4557 * t5209 + t5144 * t4655) * t4689 + (t4923 * t5211 + t4924 * t5214 + t4925 * t5217 + t4929 * t5220 + (t4836 * t4982 + t4837 * t4980 + t4838 * t4977 + t4839 * t4974) * pkin(2)) * t4893) * MDP(11) - MDP(13) * t5193 + MDP(14) * t5194; (t4656 * t5246 + t4657 * t5244 + t4659 * t5242 + t4661 * t5240) * MDP(1) + (t4832 * t5125 + t4833 * t5123 + t4834 * t5121 + t4835 * t5119) * MDP(2) + ((t4937 * t4661 + t4835 * t5103) * t4692 + (t4939 * t4659 + t4834 * t5105) * t4691 + (t4941 * t4657 + t4833 * t5107) * t4690 + (t4943 * t4656 + t4832 * t5109) * t4689) * t5257 + ((t4938 * t4661 - t4835 * t5104) * t4692 + (t4940 * t4659 - t4834 * t5106) * t4691 + (t4942 * t4657 - t4833 * t5108) * t4690 + (t4944 * t4656 - t4832 * t5110) * t4689) * t5256 + (t4832 * t5045 + t4833 * t5042 + t4834 * t5039 + t4835 * t5036 + (t4832 * t5288 + t4833 * t5289 + t4834 * t5290 + t4835 * t5291) * t4893) * MDP(5) + (0.2e1 * t4832 * t4987 + 0.2e1 * t4833 * t4986 + 0.2e1 * t4834 * t4985 + 0.2e1 * t4835 * t4984 + (t4919 * t5212 + t4920 * t5215 + t4921 * t5218 + t4922 * t5221) * t4893) * MDP(6) + (t4832 * t5035 + t4833 * t5033 + t4834 * t5031 + t4835 * t5029 + (t4832 * t4971 + t4833 * t4969 + t4834 * t4967 + t4835 * t4965) * t4894 + (-t4832 * t5047 - t4833 * t5044 - t4834 * t5041 - t4835 * t5038) * t4893) * MDP(7) + (t4832 * t5034 + t4833 * t5032 + t4834 * t5030 + t4835 * t5028 + (-t4832 * t4972 - t4833 * t4970 - t4834 * t4968 - t4835 * t4966) * t4894 + (-t4832 * t5046 - t4833 * t5043 - t4834 * t5040 - t4835 * t5037) * t4893) * MDP(8) + (-t4832 * t5118 - t4833 * t5116 - t4834 * t5114 - t4835 * t5112) * t5255 + ((t4572 * t5204 + t5137 * t4661) * t4692 + (t4570 * t5206 + t5138 * t4659) * t4691 + (t4568 * t5208 + t5139 * t4657) * t4690 + (t4558 * t5210 + t5143 * t4656) * t4689 + (-t4926 * t5212 - t4927 * t5215 - t4928 * t5218 - t4930 * t5221 + (-t4832 * t4983 - t4833 * t4981 - t4834 * t4978 - t4835 * t4975) * pkin(2)) * t4893) * MDP(10) + ((t4571 * t5204 + t5140 * t4661) * t4692 + (t4569 * t5206 + t5141 * t4659) * t4691 + (t4567 * t5208 + t5142 * t4657) * t4690 + (t4557 * t5210 + t5144 * t4656) * t4689 + (-t4923 * t5212 - t4924 * t5215 - t4925 * t5218 - t4929 * t5221 + (-t4832 * t4982 - t4833 * t4980 - t4834 * t4977 - t4835 * t4974) * pkin(2)) * t4893) * MDP(11) - MDP(13) * t5194 - MDP(14) * t5193; (t4907 * t4668 + ((t4999 + t5248) * MDP(7) + (-t5000 + t5247) * MDP(8) + t4572 * MDP(10) + t4571 * MDP(11) + (MDP(5) * t4849 + t5146 * t5274 + MDP(2)) * t4590) * t4731) * t4692 + (t4908 * t4667 + ((t5002 + t5250) * MDP(7) + (-t5003 + t5249) * MDP(8) + t4570 * MDP(10) + t4569 * MDP(11) + (MDP(5) * t4848 + t5149 * t5274 + MDP(2)) * t4589) * t4733) * t4691 + (t4909 * t4666 + ((t5005 + t5252) * MDP(7) + (-t5006 + t5251) * MDP(8) + t4568 * MDP(10) + t4567 * MDP(11) + (MDP(5) * t4847 + t5152 * t5274 + MDP(2)) * t4588) * t4732) * t4690 + (t4910 * t4665 + ((t5009 + t5254) * MDP(7) + (-t5010 + t5253) * MDP(8) + t4558 * MDP(10) + t4557 * MDP(11) + (MDP(5) * t4845 + t5155 * t5274 + MDP(2)) * t4587) * t4729) * t4689 + (((MDP(3) * t4877 - MDP(4) * t4871) * t4731 * t4598 + t4903 * t4668) * t4692 + ((MDP(3) * t4875 - MDP(4) * t4869) * t4733 * t4597 + t4904 * t4667) * t4691 + ((MDP(3) * t4873 - MDP(4) * t4867) * t4732 * t4596 + t4905 * t4666) * t4690 + ((MDP(3) * t4861 - MDP(4) * t4859) * t4729 * t4595 + t4906 * t4665) * t4689) * t4855 + ((t4895 * t4688 + t4731 * t4899) * t4692 + (t4896 * t4687 + t4733 * t4900) * t4691 + (t4897 * t4686 + t4732 * t4901) * t4690 + (t4898 * t4675 + t4729 * t4902) * t4689 + ((t4675 * t5023 + t4686 * t5020 + t4687 * t5018 + t4688 * t5016) * MDP(10) + (t4675 * t5022 + t4686 * t5019 + t4687 * t5017 + t4688 * t5015) * MDP(11)) * pkin(2)) * t4893; (t4587 * t5071 + t4588 * t5069 + t4589 * t5067 + t4590 * t5065) * MDP(2) + (t4701 * t5045 + t4702 * t5042 + t4703 * t5039 + t4704 * t5036) * MDP(5) + (t4701 * t4987 + t4702 * t4986 + t4703 * t4985 + t4704 * t4984) * t5274 + (t4701 * t5035 + t4702 * t5033 + t4703 * t5031 + t4704 * t5029) * MDP(7) + (t4701 * t5034 + t4702 * t5032 + t4703 * t5030 + t4704 * t5028) * MDP(8) + (t4558 * t5071 + t4568 * t5069 + t4570 * t5067 + t4572 * t5065) * MDP(10) + (t4557 * t5071 + t4567 * t5069 + t4569 * t5067 + t4571 * t5065) * MDP(11) + t4907 * t4634 + t4908 * t4633 + t4909 * t4632 + t4910 * t4631 + ((t4701 * t4971 + t4702 * t4969 + t4703 * t4967 + t4704 * t4965) * MDP(7) + (-t4701 * t4972 - t4702 * t4970 - t4703 * t4968 - t4704 * t4966) * MDP(8)) * t4894 + ((t4861 * t5027 + t4873 * t5026 + t4875 * t5025 + t4877 * t5024) * MDP(3) + (-t4859 * t5027 - t4867 * t5026 - t4869 * t5025 - t4871 * t5024) * MDP(4) + t4903 * t4634 + t4904 * t4633 + t4905 * t4632 + t4906 * t4631) * t4855 + ((-t4684 * t4895 + t4736 * t4899) * t4704 * t4692 + (-t4682 * t4896 + t4735 * t4900) * t4703 * t4691 + (-t4680 * t4897 + t4734 * t4901) * t4702 * t4690 + (-t4673 * t4898 + t4730 * t4902) * t4701 * t4689 + ((-t4701 * t4983 - t4866 * t4979 - t4868 * t4976 - t4870 * t4973) * MDP(10) + (-t4701 * t4982 - t4872 * t4979 - t4874 * t4976 - t4876 * t4973) * MDP(11)) * pkin(2)) * t4893;];
taucX  = t1;
