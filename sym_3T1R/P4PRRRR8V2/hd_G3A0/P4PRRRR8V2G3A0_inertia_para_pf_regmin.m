% Calculate minimal parameter regressor of inertia matrix for parallel robot
% P4PRRRR8V2G3A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4*4x15]
%   minimal parameter regressor of inertia matrix for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 11:30
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4PRRRR8V2G3A0_inertia_para_pf_regmin(xP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_regmin: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4PRRRR8V2G3A0_inertia_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_MMreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:26:51
% EndTime: 2020-08-07 11:27:53
% DurationCPUTime: 68.82s
% Computational Cost: add. (44826->1143), mult. (103880->2445), div. (4096->14), fcn. (103752->30), ass. (0->847)
t1073 = sin(qJ(3,4));
t1081 = sin(qJ(3,3));
t1083 = sin(qJ(3,2));
t1085 = sin(qJ(3,1));
t1103 = 0.1e1 / pkin(3);
t1080 = legFrame(1,2);
t1055 = cos(t1080);
t1070 = sin(pkin(4));
t1072 = cos(pkin(4));
t1499 = t1072 * t1085;
t1086 = sin(qJ(2,1));
t1092 = cos(qJ(2,1));
t1093 = pkin(7) + pkin(6);
t1676 = pkin(2) * t1086 - t1092 * t1093;
t1003 = pkin(3) * t1499 + t1070 * t1676;
t1091 = cos(qJ(3,1));
t1652 = pkin(3) * t1091 ^ 2;
t1481 = t1086 * t1652;
t970 = pkin(2) * t1499 + t1003 * t1091 + t1070 * t1481;
t966 = 0.1e1 / t970 ^ 2;
t1562 = t1055 * t966;
t1033 = pkin(2) * t1092 + t1086 * t1093;
t1069 = sin(pkin(8));
t1071 = cos(pkin(8));
t1492 = t1072 * t1092;
t1506 = t1071 * t1072;
t1648 = pkin(3) * t1091;
t953 = (t1069 * t1086 - t1071 * t1492) * t1648 + t1676 * t1069 - t1033 * t1506;
t1416 = t953 * t1562;
t1498 = t1072 * t1086;
t1009 = t1069 * t1498 - t1071 * t1092;
t1509 = t1070 * t1091;
t992 = t1009 * t1085 + t1069 * t1509;
t1235 = t1103 * t992 * t1416;
t1079 = legFrame(2,2);
t1054 = cos(t1079);
t1501 = t1072 * t1083;
t1084 = sin(qJ(2,2));
t1090 = cos(qJ(2,2));
t1677 = pkin(2) * t1084 - t1090 * t1093;
t1002 = pkin(3) * t1501 + t1070 * t1677;
t1089 = cos(qJ(3,2));
t1653 = pkin(3) * t1089 ^ 2;
t1482 = t1084 * t1653;
t969 = pkin(2) * t1501 + t1002 * t1089 + t1070 * t1482;
t964 = 0.1e1 / t969 ^ 2;
t1565 = t1054 * t964;
t1032 = pkin(2) * t1090 + t1084 * t1093;
t1494 = t1072 * t1090;
t1649 = pkin(3) * t1089;
t951 = (t1069 * t1084 - t1071 * t1494) * t1649 + t1677 * t1069 - t1032 * t1506;
t1419 = t951 * t1565;
t1500 = t1072 * t1084;
t1008 = t1069 * t1500 - t1071 * t1090;
t1511 = t1070 * t1089;
t994 = t1008 * t1083 + t1069 * t1511;
t1236 = t1103 * t994 * t1419;
t1078 = legFrame(3,2);
t1053 = cos(t1078);
t1488 = t1081 * t1072;
t1082 = sin(qJ(2,3));
t1088 = cos(qJ(2,3));
t1678 = pkin(2) * t1082 - t1088 * t1093;
t1001 = pkin(3) * t1488 + t1070 * t1678;
t1087 = cos(qJ(3,3));
t1654 = pkin(3) * t1087 ^ 2;
t1483 = t1082 * t1654;
t968 = pkin(2) * t1488 + t1001 * t1087 + t1070 * t1483;
t962 = 0.1e1 / t968 ^ 2;
t1568 = t1053 * t962;
t1031 = pkin(2) * t1088 + t1082 * t1093;
t1496 = t1072 * t1088;
t1650 = pkin(3) * t1087;
t949 = (t1069 * t1082 - t1071 * t1496) * t1650 + t1678 * t1069 - t1031 * t1506;
t1422 = t949 * t1568;
t1502 = t1072 * t1082;
t1007 = t1069 * t1502 - t1071 * t1088;
t1513 = t1070 * t1087;
t993 = t1007 * t1081 + t1069 * t1513;
t1237 = t1103 * t993 * t1422;
t1015 = t1069 * t1092 + t1071 * t1498;
t997 = t1015 * t1085 + t1071 * t1509;
t1561 = t1055 * t997;
t1415 = t966 * t1561;
t1524 = t1069 * t1072;
t957 = (t1069 * t1492 + t1071 * t1086) * t1648 + t1033 * t1524 + t1071 * t1676;
t1319 = t957 * t1415;
t1014 = t1069 * t1090 + t1071 * t1500;
t996 = t1014 * t1083 + t1071 * t1511;
t1564 = t1054 * t996;
t1418 = t964 * t1564;
t956 = (t1069 * t1494 + t1071 * t1084) * t1649 + t1032 * t1524 + t1071 * t1677;
t1320 = t956 * t1418;
t1013 = t1069 * t1088 + t1071 * t1502;
t995 = t1013 * t1081 + t1071 * t1513;
t1567 = t1053 * t995;
t1421 = t962 * t1567;
t955 = (t1069 * t1496 + t1071 * t1082) * t1650 + t1031 * t1524 + t1071 * t1678;
t1321 = t955 * t1421;
t1077 = legFrame(4,2);
t1052 = cos(t1077);
t1490 = t1073 * t1072;
t1074 = sin(qJ(2,4));
t1076 = cos(qJ(2,4));
t1679 = pkin(2) * t1074 - t1076 * t1093;
t1000 = pkin(3) * t1490 + t1070 * t1679;
t1075 = cos(qJ(3,4));
t1655 = pkin(3) * t1075 ^ 2;
t1484 = t1074 * t1655;
t960 = pkin(2) * t1490 + t1000 * t1075 + t1070 * t1484;
t959 = 0.1e1 / t960 ^ 2;
t1571 = t1052 * t959;
t1027 = pkin(2) * t1076 + t1074 * t1093;
t1503 = t1072 * t1076;
t1651 = pkin(3) * t1075;
t943 = (t1069 * t1074 - t1071 * t1503) * t1651 + t1679 * t1069 - t1027 * t1506;
t945 = (t1069 * t1503 + t1071 * t1074) * t1651 + t1027 * t1524 + t1071 * t1679;
t1505 = t1072 * t1074;
t1004 = t1069 * t1505 - t1071 * t1076;
t1521 = t1070 * t1075;
t984 = t1004 * t1073 + t1069 * t1521;
t1006 = t1069 * t1076 + t1071 * t1505;
t985 = t1006 * t1073 + t1071 * t1521;
t1696 = t943 * t984 - t945 * t985;
t1708 = t1696 * t1571;
t1710 = (t1073 * t1708 - t1081 * t1321 - t1083 * t1320 - t1085 * t1319) * t1103 + t1081 * t1237 + t1083 * t1236 + t1085 * t1235;
t1709 = (t1075 * t1708 - t1087 * t1321 - t1089 * t1320 - t1091 * t1319) * t1103 + t1087 * t1237 + t1089 * t1236 + t1091 * t1235;
t1707 = t943 * t945;
t1094 = xP(4);
t1059 = sin(t1094);
t1060 = cos(t1094);
t1096 = koppelP(3,2);
t1100 = koppelP(3,1);
t1019 = t1059 * t1100 + t1060 * t1096;
t1023 = -t1059 * t1096 + t1060 * t1100;
t1049 = sin(t1078);
t976 = t1019 * t1053 + t1023 * t1049;
t1706 = t949 * t976;
t1097 = koppelP(2,2);
t1101 = koppelP(2,1);
t1020 = t1059 * t1101 + t1060 * t1097;
t1024 = -t1059 * t1097 + t1060 * t1101;
t1050 = sin(t1079);
t977 = t1020 * t1054 + t1024 * t1050;
t1705 = t951 * t977;
t1098 = koppelP(1,2);
t1102 = koppelP(1,1);
t1021 = t1059 * t1102 + t1060 * t1098;
t1025 = -t1059 * t1098 + t1060 * t1102;
t1051 = sin(t1080);
t978 = t1021 * t1055 + t1025 * t1051;
t1704 = t953 * t978;
t1048 = sin(t1077);
t1703 = t1048 * t943;
t1522 = t1070 * t1074;
t1525 = t1069 * t1070;
t1659 = pkin(2) * t1073;
t1523 = t1070 * t1073;
t1176 = pkin(3) * t1523 - t1072 * t1679;
t967 = t1027 * t1071 + t1069 * t1176;
t1670 = (t1004 * t1048 + t1052 * t1522) * t1655 + (t1000 * t1052 - t1048 * t967) * t1075 + (-t1048 * t1525 + t1052 * t1072) * t1659;
t1639 = t1670 * t959;
t1526 = t1092 * t997;
t1377 = t966 * t1526;
t1286 = t1051 * t1377;
t1220 = t1070 * t1286;
t1529 = t1090 * t996;
t1380 = t964 * t1529;
t1288 = t1050 * t1380;
t1221 = t1070 * t1288;
t1532 = t1088 * t995;
t1383 = t962 * t1532;
t1290 = t1049 * t1383;
t1222 = t1070 * t1290;
t1274 = t1055 * t1377;
t1277 = t1054 * t1380;
t1280 = t1053 * t1383;
t1547 = t1076 * t985;
t1398 = t959 * t1547;
t1671 = (-t1004 * t1052 + t1048 * t1522) * t1655 + (t1000 * t1048 + t1052 * t967) * t1075 + (t1048 * t1072 + t1052 * t1525) * t1659;
t1690 = t1048 * t1671 - t1052 * t1670;
t1518 = t1070 * t1082;
t1658 = pkin(2) * t1081;
t1519 = t1070 * t1081;
t1175 = pkin(3) * t1519 - t1072 * t1678;
t971 = t1031 * t1071 + t1069 * t1175;
t917 = (t1007 * t1049 + t1053 * t1518) * t1654 + (t1001 * t1053 - t1049 * t971) * t1087 + (-t1049 * t1525 + t1053 * t1072) * t1658;
t918 = -(t1007 * t1053 - t1049 * t1518) * t1654 + (t1001 * t1049 + t1053 * t971) * t1087 + (t1049 * t1072 + t1053 * t1525) * t1658;
t1516 = t1070 * t1084;
t1657 = pkin(2) * t1083;
t1517 = t1070 * t1083;
t1174 = pkin(3) * t1517 - t1072 * t1677;
t972 = t1032 * t1071 + t1069 * t1174;
t919 = (t1008 * t1050 + t1054 * t1516) * t1653 + (t1002 * t1054 - t1050 * t972) * t1089 + (-t1050 * t1525 + t1054 * t1072) * t1657;
t920 = -(t1008 * t1054 - t1050 * t1516) * t1653 + (t1002 * t1050 + t1054 * t972) * t1089 + (t1050 * t1072 + t1054 * t1525) * t1657;
t1514 = t1070 * t1086;
t1656 = pkin(2) * t1085;
t1515 = t1070 * t1085;
t1173 = pkin(3) * t1515 - t1072 * t1676;
t973 = t1033 * t1071 + t1069 * t1173;
t921 = (t1009 * t1051 + t1055 * t1514) * t1652 + (t1003 * t1055 - t1051 * t973) * t1091 + (-t1051 * t1525 + t1055 * t1072) * t1656;
t922 = -(t1009 * t1055 - t1051 * t1514) * t1652 + (t1003 * t1051 + t1055 * t973) * t1091 + (t1051 * t1072 + t1055 * t1525) * t1656;
t1702 = (-t1274 * t921 - t1277 * t919 - t1280 * t917 + t1398 * t1690) * t1070 + t922 * t1220 + t920 * t1221 + t918 * t1222;
t1535 = t1086 * t997;
t1386 = t966 * t1535;
t1275 = t1055 * t1386;
t1214 = t1070 * t1275;
t1539 = t1084 * t996;
t1390 = t964 * t1539;
t1278 = t1054 * t1390;
t1216 = t1070 * t1278;
t1543 = t1082 * t995;
t1394 = t962 * t1543;
t1281 = t1053 * t1394;
t1218 = t1070 * t1281;
t1287 = t1051 * t1386;
t1289 = t1050 * t1390;
t1291 = t1049 * t1394;
t1552 = t1074 * t985;
t1402 = t959 * t1552;
t1701 = (-t1287 * t922 - t1289 * t920 - t1291 * t918 - t1402 * t1690) * t1070 + t921 * t1214 + t919 * t1216 + t917 * t1218;
t958 = 0.1e1 / t960;
t1095 = koppelP(4,2);
t1099 = koppelP(4,1);
t1018 = t1059 * t1099 + t1060 * t1095;
t1022 = -t1059 * t1095 + t1060 * t1099;
t975 = t1018 * t1052 + t1022 * t1048;
t1467 = t943 * t958 * t975;
t961 = 0.1e1 / t968;
t1466 = t961 * t1706;
t963 = 0.1e1 / t969;
t1464 = t963 * t1705;
t965 = 0.1e1 / t970;
t1462 = t965 * t1704;
t1700 = t1070 * (t1091 * t1676 + t1481);
t1699 = t1070 * (t1089 * t1677 + t1482);
t1698 = t1070 * (t1087 * t1678 + t1483);
t1697 = t1070 * (t1075 * t1679 + t1484);
t1104 = 0.1e1 / pkin(3) ^ 2;
t1695 = (t1416 * t957 + t1419 * t956 + t1422 * t955 + t1571 * t1707) * t1104;
t1508 = t1070 * t1092;
t1362 = t992 * t1508;
t1270 = t966 * t1362;
t1510 = t1070 * t1090;
t1363 = t994 * t1510;
t1271 = t964 * t1363;
t1512 = t1070 * t1088;
t1364 = t993 * t1512;
t1272 = t962 * t1364;
t1292 = t1048 * t1398;
t1520 = t1070 * t1076;
t1368 = t984 * t1520;
t939 = -t1006 * t1655 - t1027 * t1069 * t1075 + (pkin(2) * t1523 + t1075 * t1176) * t1071;
t1556 = t1070 * t939;
t940 = -t1013 * t1654 - t1031 * t1069 * t1087 + (pkin(2) * t1519 + t1087 * t1175) * t1071;
t941 = -t1014 * t1653 - t1032 * t1069 * t1089 + (pkin(2) * t1517 + t1089 * t1174) * t1071;
t942 = -t1015 * t1652 - t1033 * t1069 * t1091 + (pkin(2) * t1515 + t1091 * t1173) * t1071;
t1694 = t942 * t1220 + t941 * t1221 + t940 * t1222 + t921 * t1270 + t919 * t1271 + t917 * t1272 + t1292 * t1556 + t1368 * t1639;
t1625 = t942 * t966;
t1627 = t941 * t964;
t1629 = t940 * t962;
t1631 = t939 * t959;
t1693 = t922 * t1625 + t920 * t1627 + t918 * t1629 + t1631 * t1671;
t1692 = t921 * t1625 + t919 * t1627 + t917 * t1629 + t1631 * t1670;
t1429 = t1051 * t953 * t966;
t1432 = t1050 * t951 * t964;
t1435 = t1049 * t949 * t962;
t1580 = t1048 * t959;
t1691 = (-t1429 * t957 - t1432 * t956 - t1435 * t955 - t1580 * t1707) * t1104;
t1573 = t1051 * t997;
t1428 = t966 * t1573;
t1238 = t1103 * t957 * t1428;
t1575 = t1050 * t996;
t1431 = t964 * t1575;
t1239 = t1103 * t956 * t1431;
t1577 = t1049 * t995;
t1434 = t962 * t1577;
t1240 = t1103 * t955 * t1434;
t1579 = t1048 * t985;
t1437 = t959 * t1579;
t1241 = t1103 * t945 * t1437;
t1324 = t992 * t1429;
t1326 = t994 * t1432;
t1328 = t993 * t1435;
t1550 = t1075 * t959;
t1399 = t984 * t1550;
t1689 = (-t1087 * t1328 - t1089 * t1326 - t1091 * t1324 - t1399 * t1703) * t1103 + t1075 * t1241 + t1087 * t1240 + t1089 * t1239 + t1091 * t1238;
t1404 = t1073 * t959 * t984;
t1688 = (-t1081 * t1328 - t1083 * t1326 - t1085 * t1324 - t1404 * t1703) * t1103 + t1073 * t1241 + t1081 * t1240 + t1083 * t1239 + t1085 * t1238;
t1284 = t1052 * t1402;
t1536 = t1086 * t966;
t1387 = t992 * t1536;
t1540 = t1084 * t964;
t1391 = t994 * t1540;
t1544 = t1082 * t962;
t1395 = t993 * t1544;
t1553 = t1074 * t959;
t1403 = t984 * t1553;
t1687 = (-t1387 * t922 - t1391 * t920 - t1395 * t918 - t1403 * t1671) * t1070 + t942 * t1214 + t941 * t1216 + t940 * t1218 + t1284 * t1556;
t1686 = ((-t939 * t1579 - t1670 * t984) * t1553 + (-t1573 * t942 - t921 * t992) * t1536 + (-t1575 * t941 - t919 * t994) * t1540 + (-t1577 * t940 - t917 * t993) * t1544) * t1070;
t1548 = t1076 * t959;
t1570 = t1052 * t985;
t1685 = ((-t939 * t1570 + t1671 * t984) * t1548 - t1274 * t942 - t1277 * t941 - t1280 * t940) * t1070 + t922 * t1270 + t920 * t1271 + t918 * t1272;
t1684 = t943 ^ 2;
t1683 = t1048 * t975;
t1682 = 0.2e1 * t1704;
t1681 = 0.2e1 * t1705;
t1680 = 0.2e1 * t1706;
t1373 = pkin(2) + t1648;
t1247 = t1072 * t1373;
t1374 = pkin(2) + t1649;
t1248 = t1072 * t1374;
t1375 = pkin(2) + t1650;
t1249 = t1072 * t1375;
t1376 = pkin(2) + t1651;
t1250 = t1072 * t1376;
t1669 = 0.2e1 * pkin(2);
t1668 = 0.2e1 * t995;
t1667 = 0.2e1 * t996;
t1666 = 0.2e1 * t997;
t1665 = 0.2e1 * t1070;
t1664 = 0.2e1 * t1103;
t866 = t1103 * t1467;
t1663 = pkin(6) * t866;
t867 = t1103 * t1466;
t1662 = pkin(6) * t867;
t868 = t1103 * t1464;
t1661 = pkin(6) * t868;
t869 = t1103 * t1462;
t1660 = pkin(6) * t869;
t1647 = pkin(6) * t1103;
t1016 = pkin(2) * t1071 + t1093 * t1524;
t1017 = pkin(2) * t1524 - t1071 * t1093;
t1118 = t1004 * t1655 - (t1016 * t1076 - t1017 * t1074) * t1075;
t1196 = t1376 * t1525;
t782 = ((t1118 * t1018 + t1022 * t1697 + (-t1018 * t1196 + t1022 * t1250) * t1073) * t1052 + (-t1018 * t1697 + t1022 * t1118 + (-t1018 * t1250 - t1022 * t1196) * t1073) * t1048) / ((t1074 * t1651 + t1679) * t1521 + t1073 * t1250);
t1646 = t782 * t958;
t786 = (-t1018 * t1671 + t1022 * t1670) * t958;
t1645 = t786 * t958;
t1599 = t975 * t985;
t894 = t958 * t1599;
t1644 = t894 * t958;
t1598 = t976 * t995;
t896 = t961 * t1598;
t1643 = t896 * t961;
t1597 = t977 * t996;
t897 = t963 * t1597;
t1642 = t897 * t963;
t1596 = t978 * t997;
t898 = t965 * t1596;
t1641 = t898 * t965;
t1640 = t1671 * t959;
t1638 = t917 * t961;
t1637 = t918 * t961;
t1636 = t919 * t963;
t1635 = t920 * t963;
t1634 = t921 * t965;
t1633 = t922 * t965;
t1632 = t939 * t958;
t1630 = t940 * t961;
t1628 = t941 * t963;
t1626 = t942 * t965;
t1624 = t945 * t958;
t1622 = t955 * t961;
t1621 = t956 * t963;
t1620 = t957 * t965;
t1618 = t958 * t984;
t1617 = t959 * t975;
t983 = t985 ^ 2;
t1616 = t959 * t983;
t1615 = t959 * t985;
t1613 = t961 * t993;
t1612 = t962 * t976;
t1611 = t962 * t993;
t1610 = t962 * t995;
t1608 = t963 * t994;
t1607 = t964 * t977;
t1606 = t964 * t994;
t1605 = t964 * t996;
t1603 = t965 * t992;
t1602 = t966 * t978;
t1601 = t966 * t992;
t1600 = t966 * t997;
t1595 = 0.2e1 * t1671;
t1594 = 0.2e1 * t1670;
t1591 = 0.2e1 * t943;
t1040 = t1049 ^ 2;
t1587 = t1040 * t962;
t1041 = t1050 ^ 2;
t1586 = t1041 * t964;
t1042 = t1051 ^ 2;
t1585 = t1042 * t966;
t1044 = t1053 ^ 2;
t1584 = t1044 * t962;
t1045 = t1054 ^ 2;
t1583 = t1045 * t964;
t1046 = t1055 ^ 2;
t1582 = t1046 * t966;
t1581 = t1048 * t958;
t1578 = t1049 * t961;
t1576 = t1050 * t963;
t1574 = t1051 * t965;
t1572 = t1052 * t958;
t1569 = t1053 * t961;
t1566 = t1054 * t963;
t1563 = t1055 * t965;
t1061 = t1073 ^ 2;
t1560 = t1061 * t959;
t1063 = t1081 ^ 2;
t1559 = t1063 * t962;
t1064 = t1083 ^ 2;
t1558 = t1064 * t964;
t1065 = t1085 ^ 2;
t1557 = t1065 * t966;
t1555 = t1073 * t958;
t1554 = t1074 * t958;
t1551 = t1075 * t958;
t1549 = t1076 * t958;
t1546 = t1081 * t961;
t1545 = t1082 * t961;
t1542 = t1083 * t963;
t1541 = t1084 * t963;
t1538 = t1085 * t965;
t1537 = t1086 * t965;
t1534 = t1087 * t961;
t1533 = t1088 * t961;
t1531 = t1089 * t963;
t1530 = t1090 * t963;
t1528 = t1091 * t965;
t1527 = t1092 * t965;
t1507 = t1070 * t1103;
t1504 = t1072 * t1075;
t1497 = t1072 * t1087;
t1495 = t1072 * t1089;
t1493 = t1072 * t1091;
t1491 = t1072 * t1103;
t1480 = t1073 * t1647;
t1479 = t1075 * t1647;
t1478 = t1081 * t1647;
t1477 = t1083 * t1647;
t1476 = t1085 * t1647;
t1475 = t1087 * t1647;
t1474 = t1089 * t1647;
t1473 = t1091 * t1647;
t1472 = t985 * t1644;
t1471 = t995 * t1643;
t1470 = t996 * t1642;
t1469 = t997 * t1641;
t1468 = t959 * t1684;
t1465 = t949 * t1612;
t1463 = t951 * t1607;
t1461 = t953 * t1602;
t1460 = t955 * t1611;
t1459 = t956 * t1606;
t1458 = t957 * t1601;
t1457 = t984 * t1615;
t989 = t995 ^ 2;
t1456 = t989 * t1612;
t1455 = t993 * t1610;
t990 = t996 ^ 2;
t1454 = t990 * t1607;
t1453 = t994 * t1605;
t991 = t997 ^ 2;
t1452 = t991 * t1602;
t1451 = t992 * t1600;
t1450 = t918 * t962 * t917 + t920 * t964 * t919 + t922 * t966 * t921;
t1440 = t943 * t1581;
t1438 = t975 * t1580;
t1436 = t949 * t1578;
t1433 = t951 * t1576;
t1430 = t953 * t1574;
t1426 = t943 * t1572;
t1425 = t983 * t1571;
t1424 = t959 * t1570;
t1423 = t949 * t1569;
t1420 = t951 * t1566;
t1417 = t953 * t1563;
t1414 = t1061 * t1644;
t1413 = t983 * t1560;
t1412 = t1063 * t1643;
t1411 = t989 * t1559;
t1410 = t1064 * t1642;
t1409 = t990 * t1558;
t1408 = t1065 * t1641;
t1407 = t991 * t1557;
t1406 = t866 * t1555;
t1405 = t894 * t1555;
t1401 = t866 * t1551;
t1400 = t894 * t1551;
t1397 = t867 * t1546;
t1396 = t896 * t1546;
t1393 = t868 * t1542;
t1392 = t897 * t1542;
t1389 = t869 * t1538;
t1388 = t898 * t1538;
t1385 = t867 * t1534;
t1384 = t896 * t1534;
t1382 = t868 * t1531;
t1381 = t897 * t1531;
t1379 = t869 * t1528;
t1378 = t898 * t1528;
t1372 = t1049 * t1568;
t1371 = t1050 * t1565;
t1370 = t1051 * t1562;
t1369 = t866 * t1522;
t1367 = t867 * t1518;
t1366 = t868 * t1516;
t1365 = t869 * t1514;
t1361 = t958 * t1490;
t1360 = t958 * t1504;
t1359 = t961 * t1488;
t1358 = t963 * t1501;
t1357 = t965 * t1499;
t1356 = t961 * t1497;
t1355 = t963 * t1495;
t1354 = t965 * t1493;
t1353 = t1073 * t1550;
t1352 = t1081 * t1087 * t962;
t1351 = t1083 * t1089 * t964;
t1350 = t1085 * t1091 * t966;
t1349 = t1073 * t1520;
t1348 = t1075 * t1520;
t1347 = t1081 * t1512;
t1346 = t1083 * t1510;
t1345 = t1085 * t1508;
t1344 = t1087 * t1512;
t1343 = t1089 * t1510;
t1342 = t1091 * t1508;
t1341 = -0.2e1 * t949 * t1610;
t1340 = -0.2e1 * t951 * t1605;
t1339 = -0.2e1 * t953 * t1600;
t1338 = t896 * t1466;
t1337 = t897 * t1464;
t1336 = t898 * t1462;
t1335 = t949 * t1465;
t1334 = t951 * t1463;
t1333 = t953 * t1461;
t1329 = t983 * t1438;
t1327 = t1049 * t1456;
t1325 = t1050 * t1454;
t1323 = t1051 * t1452;
t1322 = t1052 * t1468;
t1318 = t985 * t1414;
t1317 = t1061 * t1457;
t1316 = t995 * t1412;
t1315 = t1063 * t1455;
t1314 = t996 * t1410;
t1313 = t1064 * t1453;
t1312 = t997 * t1408;
t1311 = t1065 * t1451;
t1310 = t985 * t1406;
t1309 = t943 * t1405;
t1308 = t985 * t1401;
t1307 = t943 * t1400;
t1306 = t995 * t1397;
t1305 = t949 * t1396;
t1304 = t996 * t1393;
t1303 = t951 * t1392;
t1302 = t997 * t1389;
t1301 = t953 * t1388;
t1300 = t995 * t1385;
t1299 = t949 * t1384;
t1298 = t996 * t1382;
t1297 = t951 * t1381;
t1296 = t997 * t1379;
t1295 = t953 * t1378;
t1285 = t1052 * t1413;
t1282 = t1053 * t1411;
t1279 = t1054 * t1409;
t1276 = t1055 * t1407;
t1269 = t1073 * t1400;
t1268 = t983 * t1353;
t1267 = t1081 * t1384;
t1266 = t989 * t1352;
t1265 = t1083 * t1381;
t1264 = t990 * t1351;
t1263 = t1085 * t1378;
t1262 = t991 * t1350;
t1261 = t1507 * t1554;
t1260 = t1507 * t1545;
t1259 = t1507 * t1541;
t1258 = t1507 * t1537;
t1257 = t1591 * t1615;
t1256 = t1081 * t1341;
t1255 = t1083 * t1340;
t1254 = t1085 * t1339;
t1253 = t1087 * t1341;
t1252 = t1089 * t1340;
t1251 = t1091 * t1339;
t1246 = t786 * t984 + t894 * t939;
t787 = (-t1019 * t918 + t1023 * t917) * t961;
t1245 = t787 * t993 + t896 * t940;
t788 = (-t1020 * t920 + t1024 * t919) * t963;
t1244 = t788 * t994 + t897 * t941;
t789 = (-t1021 * t922 + t1025 * t921) * t965;
t1243 = t789 * t992 + t898 * t942;
t1234 = t985 * t1269;
t1233 = t984 * t985 * t1353;
t1232 = t995 * t1267;
t1231 = t993 * t995 * t1352;
t1230 = t996 * t1265;
t1229 = t994 * t996 * t1351;
t1228 = t997 * t1263;
t1227 = t992 * t997 * t1350;
t1219 = t1052 * t1268;
t1217 = t1053 * t1266;
t1215 = t1054 * t1264;
t1213 = t1055 * t1262;
t1210 = t1073 * t1261;
t1209 = t1075 * t1261;
t1208 = t1081 * t1260;
t1207 = t1087 * t1260;
t1206 = t1083 * t1259;
t1205 = t1089 * t1259;
t1204 = t1085 * t1258;
t1203 = t1091 * t1258;
t1202 = t1591 * t1424;
t1201 = t1073 * t1257;
t1200 = t1075 * t1257;
t1199 = t949 * t1372 * t1668;
t1198 = t951 * t1371 * t1667;
t1197 = t953 * t1370 * t1666;
t1195 = t1375 * t1525;
t1194 = t1374 * t1525;
t1193 = t1373 * t1525;
t1192 = t1520 * t786 + t1669 * t894;
t1191 = t1520 * t939 + t1669 * t984;
t1190 = t1512 * t787 + t1669 * t896;
t1189 = t1512 * t940 + t1669 * t993;
t1188 = t1510 * t788 + t1669 * t897;
t1187 = t1510 * t941 + t1669 * t994;
t1186 = t1508 * t789 + t1669 * t898;
t1185 = t1508 * t942 + t1669 * t992;
t1184 = t1579 * t786 + t1670 * t894;
t1183 = t1577 * t787 + t896 * t917;
t1182 = t1575 * t788 + t897 * t919;
t1181 = t1573 * t789 + t898 * t921;
t1180 = t1570 * t786 - t1671 * t894;
t1179 = t1567 * t787 - t896 * t918;
t1178 = t1564 * t788 - t897 * t920;
t1177 = t1561 * t789 - t898 * t922;
t1172 = t943 * t1210;
t1171 = t943 * t1209;
t1170 = t949 * t1208;
t1169 = t949 * t1207;
t1168 = t951 * t1206;
t1167 = t951 * t1205;
t1166 = t953 * t1204;
t1165 = t953 * t1203;
t1164 = t1257 * t1683;
t1163 = t1434 * t1680;
t1162 = t1431 * t1681;
t1161 = t1428 * t1682;
t1160 = t1421 * t1680;
t1159 = t1418 * t1681;
t1158 = t1415 * t1682;
t1157 = t1073 * t1202;
t1156 = t1075 * t1202;
t1152 = (t782 + t786) * t894;
t1117 = t1007 * t1654 - (t1016 * t1088 - t1017 * t1082) * t1087;
t783 = ((t1019 * t1117 + t1023 * t1698 + (-t1019 * t1195 + t1023 * t1249) * t1081) * t1053 + (-t1019 * t1698 + t1117 * t1023 + (-t1019 * t1249 - t1023 * t1195) * t1081) * t1049) / ((t1082 * t1650 + t1678) * t1513 + t1081 * t1249);
t1151 = (t783 + t787) * t896;
t1116 = t1008 * t1653 - (t1016 * t1090 - t1017 * t1084) * t1089;
t784 = ((t1020 * t1116 + t1024 * t1699 + (-t1020 * t1194 + t1024 * t1248) * t1083) * t1054 + (-t1020 * t1699 + t1116 * t1024 + (-t1020 * t1248 - t1024 * t1194) * t1083) * t1050) / ((t1084 * t1649 + t1677) * t1511 + t1083 * t1248);
t1150 = (t784 + t788) * t897;
t1115 = t1009 * t1652 - (t1016 * t1092 - t1017 * t1086) * t1091;
t785 = ((t1021 * t1115 + t1025 * t1700 + (-t1021 * t1193 + t1025 * t1247) * t1085) * t1055 + (-t1021 * t1700 + t1115 * t1025 + (-t1021 * t1247 - t1025 * t1193) * t1085) * t1051) / ((t1086 * t1648 + t1676) * t1509 + t1085 * t1247);
t1149 = (t785 + t789) * t898;
t1148 = t1581 * t782 + t1617 * t1670;
t1147 = t1578 * t783 + t1612 * t917;
t1146 = t1576 * t784 + t1607 * t919;
t1145 = t1574 * t785 + t1602 * t921;
t1144 = t1572 * t782 - t1617 * t1671;
t1143 = t1569 * t783 - t1612 * t918;
t1142 = t1566 * t784 - t1607 * t920;
t1141 = t1563 * t785 - t1602 * t922;
t1140 = t1696 * t1617;
t1139 = (-t949 * t993 + t955 * t995) * t1612;
t1138 = (-t951 * t994 + t956 * t996) * t1607;
t1137 = (-t953 * t992 + t957 * t997) * t1602;
t1134 = t1479 * t943 - 0.2e1 * t1659 * t985;
t1133 = t1075 * t1669 * t985 + t1480 * t943;
t1132 = t1475 * t949 - 0.2e1 * t1658 * t995;
t1131 = pkin(2) * t1087 * t1668 + t1478 * t949;
t1130 = t1474 * t951 - 0.2e1 * t1657 * t996;
t1129 = pkin(2) * t1089 * t1667 + t1477 * t951;
t1128 = t1473 * t953 - 0.2e1 * t1656 * t997;
t1127 = pkin(2) * t1091 * t1666 + t1476 * t953;
t1126 = t1599 * t1631 + t1618 * t782;
t1125 = t1598 * t1629 + t1613 * t783;
t1124 = t1597 * t1627 + t1608 * t784;
t1123 = t1596 * t1625 + t1603 * t785;
t1122 = t958 * (-t1491 * t943 + t1520 * t985);
t1121 = t961 * (-t1491 * t949 + t1512 * t995);
t1120 = t963 * (-t1491 * t951 + t1510 * t996);
t1119 = t965 * (-t1491 * t953 + t1508 * t997);
t1043 = t1052 ^ 2;
t1039 = t1048 ^ 2;
t1034 = t1059 ^ 2 + t1060 ^ 2;
t988 = t994 ^ 2;
t987 = t993 ^ 2;
t986 = t992 ^ 2;
t982 = t984 ^ 2;
t948 = t953 ^ 2;
t947 = t951 ^ 2;
t946 = t949 ^ 2;
t901 = (t1491 * t957 + t1362) * t965;
t900 = (t1491 * t956 + t1363) * t963;
t899 = (t1491 * t955 + t1364) * t961;
t895 = (t1491 * t945 + t1368) * t958;
t893 = t1055 * t1119;
t892 = t1051 * t1119;
t891 = t1054 * t1120;
t890 = t1050 * t1120;
t889 = t1053 * t1121;
t888 = t1049 * t1121;
t887 = t1052 * t1122;
t886 = t1048 * t1122;
t885 = (pkin(6) * t992 + t1514 * t942) * t965;
t884 = (pkin(6) * t994 + t1516 * t941) * t963;
t883 = (pkin(6) * t993 + t1518 * t940) * t961;
t882 = (pkin(6) * t984 + t1522 * t939) * t958;
t859 = (-pkin(6) * t1561 + t1514 * t922) * t965;
t858 = (pkin(6) * t1573 + t1514 * t921) * t965;
t857 = (-pkin(6) * t1564 + t1516 * t920) * t963;
t856 = (pkin(6) * t1575 + t1516 * t919) * t963;
t855 = (-pkin(6) * t1567 + t1518 * t918) * t961;
t854 = (pkin(6) * t1577 + t1518 * t917) * t961;
t853 = (-pkin(6) * t1570 + t1522 * t1671) * t958;
t852 = (pkin(6) * t1579 + t1522 * t1670) * t958;
t851 = -t1085 * t901 - t1203 * t957;
t850 = t1091 * t901 - t1204 * t957;
t849 = -t1083 * t900 - t1205 * t956;
t848 = t1089 * t900 - t1206 * t956;
t847 = -t1081 * t899 - t1207 * t955;
t846 = t1087 * t899 - t1208 * t955;
t845 = -t1073 * t895 - t1209 * t945;
t844 = t1075 * t895 - t1210 * t945;
t843 = -t1055 * t1166 - t1091 * t893;
t842 = -t1055 * t1165 + t1085 * t893;
t841 = t1051 * t1165 - t1085 * t892;
t840 = t1051 * t1166 + t1091 * t892;
t839 = -t1054 * t1168 - t1089 * t891;
t838 = -t1054 * t1167 + t1083 * t891;
t837 = t1050 * t1167 - t1083 * t890;
t836 = t1050 * t1168 + t1089 * t890;
t835 = -t1053 * t1170 - t1087 * t889;
t834 = -t1053 * t1169 + t1081 * t889;
t833 = t1049 * t1169 - t1081 * t888;
t832 = t1049 * t1170 + t1087 * t888;
t831 = (t1091 * t1185 - t1476 * t957) * t965;
t830 = (-t1085 * t1185 - t1473 * t957) * t965;
t829 = (t1089 * t1187 - t1477 * t956) * t963;
t828 = (-t1083 * t1187 - t1474 * t956) * t963;
t827 = (t1087 * t1189 - t1478 * t955) * t961;
t826 = (-t1081 * t1189 - t1475 * t955) * t961;
t825 = -t1052 * t1172 - t1075 * t887;
t824 = -t1052 * t1171 + t1073 * t887;
t823 = t1048 * t1171 - t1073 * t886;
t822 = t1048 * t1172 + t1075 * t886;
t821 = (t1075 * t1191 - t1480 * t945) * t958;
t820 = (-t1073 * t1191 - t1479 * t945) * t958;
t816 = -t1048 * t1425 - t1370 * t991 - t1371 * t990 - t1372 * t989;
t815 = -t1091 * t885 - t1357 * t942;
t814 = -t1089 * t884 - t1358 * t941;
t813 = -t1087 * t883 - t1359 * t940;
t812 = -t1085 * t885 + t1354 * t942;
t811 = -t1083 * t884 + t1355 * t941;
t810 = -t1081 * t883 + t1356 * t940;
t809 = -t1075 * t882 - t1361 * t939;
t808 = -t1073 * t882 + t1360 * t939;
t807 = -t1048 * t1285 - t1049 * t1282 - t1050 * t1279 - t1051 * t1276;
t806 = -0.2e1 * t1048 * t1219 - 0.2e1 * t1049 * t1217 - 0.2e1 * t1050 * t1215 - 0.2e1 * t1051 * t1213;
t805 = (-t1055 * t1127 + t1342 * t922) * t965;
t804 = (t1051 * t1127 + t1342 * t921) * t965;
t803 = (-t1055 * t1128 - t1345 * t922) * t965;
t802 = (t1051 * t1128 - t1345 * t921) * t965;
t801 = (-t1054 * t1129 + t1343 * t920) * t963;
t800 = (t1050 * t1129 + t1343 * t919) * t963;
t799 = (-t1054 * t1130 - t1346 * t920) * t963;
t798 = (t1050 * t1130 - t1346 * t919) * t963;
t797 = (-t1053 * t1131 + t1344 * t918) * t961;
t796 = (t1049 * t1131 + t1344 * t917) * t961;
t795 = (-t1053 * t1132 - t1347 * t918) * t961;
t794 = (t1049 * t1132 - t1347 * t917) * t961;
t793 = (-t1052 * t1133 + t1348 * t1671) * t958;
t792 = (t1048 * t1133 + t1348 * t1670) * t958;
t791 = (-t1052 * t1134 - t1349 * t1671) * t958;
t790 = (t1048 * t1134 - t1349 * t1670) * t958;
t781 = -t1072 * t869 + t1508 * t898;
t780 = -t1072 * t868 + t1510 * t897;
t779 = -t1072 * t867 + t1512 * t896;
t778 = -t1415 * t992 - t1418 * t994 - t1421 * t993 - t1424 * t984;
t777 = t1428 * t992 + t1431 * t994 + t1434 * t993 + t1437 * t984;
t776 = -t1072 * t866 + t1520 * t894;
t775 = -t1052 * t1317 - t1053 * t1315 - t1054 * t1313 - t1055 * t1311;
t774 = t1048 * t1317 + t1049 * t1315 + t1050 * t1313 + t1051 * t1311;
t773 = -0.2e1 * t1052 * t1233 - 0.2e1 * t1053 * t1231 - 0.2e1 * t1054 * t1229 - 0.2e1 * t1055 * t1227;
t772 = 0.2e1 * t1048 * t1233 + 0.2e1 * t1049 * t1231 + 0.2e1 * t1050 * t1229 + 0.2e1 * t1051 * t1227;
t771 = -t1091 * t859 - t1357 * t922;
t770 = -t1091 * t858 - t1357 * t921;
t769 = -t1089 * t857 - t1358 * t920;
t768 = -t1089 * t856 - t1358 * t919;
t767 = -t1087 * t855 - t1359 * t918;
t766 = -t1087 * t854 - t1359 * t917;
t765 = -t1085 * t859 + t1354 * t922;
t764 = -t1085 * t858 + t1354 * t921;
t763 = -t1083 * t857 + t1355 * t920;
t762 = -t1083 * t856 + t1355 * t919;
t761 = -t1081 * t855 + t1356 * t918;
t760 = -t1081 * t854 + t1356 * t917;
t759 = -t1075 * t853 - t1361 * t1671;
t758 = -t1075 * t852 - t1361 * t1670;
t757 = -t1073 * t853 + t1360 * t1671;
t756 = -t1073 * t852 + t1360 * t1670;
t755 = (-t1048 * t1322 - t1370 * t948 - t1371 * t947 - t1372 * t946) * t1104;
t754 = pkin(6) * t898 + t1514 * t789;
t753 = pkin(6) * t897 + t1516 * t788;
t752 = pkin(6) * t896 + t1518 * t787;
t751 = pkin(6) * t894 + t1522 * t786;
t750 = -t1085 * t781 + t1091 * t1365;
t749 = t1085 * t1365 + t1091 * t781;
t748 = -t1083 * t780 + t1089 * t1366;
t747 = t1083 * t1366 + t1089 * t780;
t746 = -t1081 * t779 + t1087 * t1367;
t745 = t1081 * t1367 + t1087 * t779;
t744 = -t1073 * t776 + t1075 * t1369;
t743 = t1073 * t1369 + t1075 * t776;
t742 = (t1048 * t1156 + t1087 * t1199 + t1089 * t1198 + t1091 * t1197) * t1103;
t741 = (t1048 * t1157 + t1081 * t1199 + t1083 * t1198 + t1085 * t1197) * t1103;
t740 = t1085 * t1660 + t1091 * t1186;
t739 = -t1085 * t1186 + t1091 * t1660;
t738 = t1083 * t1661 + t1089 * t1188;
t737 = -t1083 * t1188 + t1089 * t1661;
t736 = t1081 * t1662 + t1087 * t1190;
t735 = -t1081 * t1190 + t1087 * t1662;
t734 = t1073 * t1663 + t1075 * t1192;
t733 = -t1073 * t1192 + t1075 * t1663;
t732 = -t1091 * t754 - t1499 * t789;
t731 = -t1089 * t753 - t1501 * t788;
t730 = -t1087 * t752 - t1488 * t787;
t729 = -t1085 * t754 + t1493 * t789;
t728 = -t1083 * t753 + t1495 * t788;
t727 = -t1081 * t752 + t1497 * t787;
t726 = -t1075 * t751 - t1490 * t786;
t725 = -t1073 * t751 + t1504 * t786;
t1 = [t918 ^ 2 * t962 + t920 ^ 2 * t964 + t922 ^ 2 * t966 + t1640 * t1671, t1043 * t1616 + t1582 * t991 + t1583 * t990 + t1584 * t989, (-t1052 * t1398 * t1595 - 0.2e1 * t1274 * t922 - 0.2e1 * t1277 * t920 - 0.2e1 * t1280 * t918) * t1070, (0.2e1 * t1275 * t922 + 0.2e1 * t1278 * t920 + 0.2e1 * t1281 * t918 + t1284 * t1595) * t1070, t1043 * t1413 + t1044 * t1411 + t1045 * t1409 + t1046 * t1407, 0.2e1 * t1043 * t1268 + 0.2e1 * t1044 * t1266 + 0.2e1 * t1045 * t1264 + 0.2e1 * t1046 * t1262, (-t1043 * t1201 + t1044 * t1256 + t1045 * t1255 + t1046 * t1254) * t1103, (-t1043 * t1200 + t1044 * t1253 + t1045 * t1252 + t1046 * t1251) * t1103, (t1043 * t1468 + t1582 * t948 + t1583 * t947 + t1584 * t946) * t1104, (-t1561 * t805 + t922 * t843) * t965 + (-t1564 * t801 + t920 * t839) * t963 + (-t1567 * t797 + t918 * t835) * t961 + (-t1570 * t793 + t1671 * t825) * t958 + (t1417 * t765 + t1420 * t763 + t1423 * t761 + t1426 * t757) * t1103, (-t1561 * t803 + t922 * t842) * t965 + (-t1564 * t799 + t920 * t838) * t963 + (-t1567 * t795 + t918 * t834) * t961 + (-t1570 * t791 + t1671 * t824) * t958 + (t1417 * t771 + t1420 * t769 + t1423 * t767 + t1426 * t759) * t1103, 0, 0, 0, t1034; t1640 * t1670 + t1450, t816, t1702, t1701, t807, t806, t741, t742, t755, (-t1561 * t804 + t922 * t840) * t965 + (-t1564 * t800 + t920 * t836) * t963 + (-t1567 * t796 + t918 * t832) * t961 + (-t1570 * t792 + t1671 * t822) * t958 + (t1417 * t764 + t1420 * t762 + t1423 * t760 + t1426 * t756) * t1103, (-t1561 * t802 + t922 * t841) * t965 + (-t1564 * t798 + t920 * t837) * t963 + (-t1567 * t794 + t918 * t833) * t961 + (-t1570 * t790 + t1671 * t823) * t958 + (t1417 * t770 + t1420 * t768 + t1423 * t766 + t1426 * t758) * t1103, 0, 0, 0, 0; t1693, t778, t1685, t1687, t775, t773, t1710, t1709, t1695, (-t1561 * t831 + t922 * t850) * t965 + (-t1564 * t829 + t920 * t848) * t963 + (-t1567 * t827 + t918 * t846) * t961 + (-t1570 * t821 + t1671 * t844) * t958 + (t1417 * t812 + t1420 * t811 + t1423 * t810 + t1426 * t808) * t1103, (-t1561 * t830 + t922 * t851) * t965 + (-t1564 * t828 + t920 * t849) * t963 + (-t1567 * t826 + t918 * t847) * t961 + (-t1570 * t820 + t1671 * t845) * t958 + (t1417 * t815 + t1420 * t814 + t1423 * t813 + t1426 * t809) * t1103, 0, 0, 0, 0; t1633 * t789 + t1635 * t788 + t1637 * t787 + t1645 * t1671, -t1052 * t1472 - t1053 * t1471 - t1054 * t1470 - t1055 * t1469, (-t1177 * t1527 - t1178 * t1530 - t1179 * t1533 - t1180 * t1549) * t1070, (t1177 * t1537 + t1178 * t1541 + t1179 * t1545 + t1180 * t1554) * t1070, -t1052 * t1318 - t1053 * t1316 - t1054 * t1314 - t1055 * t1312, -0.2e1 * t1052 * t1234 - 0.2e1 * t1053 * t1232 - 0.2e1 * t1054 * t1230 - 0.2e1 * t1055 * t1228, t1052 * t1310 + t1053 * t1306 + t1054 * t1304 + t1055 * t1302 + (t1052 * t1309 + t1053 * t1305 + t1054 * t1303 + t1055 * t1301) * t1103, t1052 * t1308 + t1053 * t1300 + t1054 * t1298 + t1055 * t1296 + (t1052 * t1307 + t1053 * t1299 + t1054 * t1297 + t1055 * t1295) * t1103, (-t1417 * t869 - t1420 * t868 - t1423 * t867 - t1426 * t866) * t1103, (-t1561 * t740 + t922 * t749) * t965 + (-t1564 * t738 + t920 * t747) * t963 + (-t1567 * t736 + t918 * t745) * t961 + (-t1570 * t734 + t1671 * t743) * t958 + (t1417 * t729 + t1420 * t728 + t1423 * t727 + t1426 * t725) * t1103, (-t1561 * t739 + t922 * t750) * t965 + (-t1564 * t737 + t920 * t748) * t963 + (-t1567 * t735 + t918 * t746) * t961 + (-t1570 * t733 + t1671 * t744) * t958 + (t1417 * t732 + t1420 * t731 + t1423 * t730 + t1426 * t726) * t1103, 0, -t1059, -t1060, 0; t1639 * t1671 + t1450, t816, t1702, t1701, t807, t806, t741, t742, t755, (t1573 * t805 + t921 * t843) * t965 + (t1575 * t801 + t919 * t839) * t963 + (t1577 * t797 + t917 * t835) * t961 + (t1579 * t793 + t1670 * t825) * t958 + (-t1430 * t765 - t1433 * t763 - t1436 * t761 - t1440 * t757) * t1103, (t1573 * t803 + t921 * t842) * t965 + (t1575 * t799 + t919 * t838) * t963 + (t1577 * t795 + t917 * t834) * t961 + (t1579 * t791 + t1670 * t824) * t958 + (-t1430 * t771 - t1433 * t769 - t1436 * t767 - t1440 * t759) * t1103, 0, 0, 0, 0; t917 ^ 2 * t962 + t919 ^ 2 * t964 + t921 ^ 2 * t966 + t1639 * t1670, t1039 * t1616 + t1585 * t991 + t1586 * t990 + t1587 * t989, (0.2e1 * t1286 * t921 + 0.2e1 * t1288 * t919 + 0.2e1 * t1290 * t917 + t1292 * t1594) * t1070, (-t1048 * t1402 * t1594 - 0.2e1 * t1287 * t921 - 0.2e1 * t1289 * t919 - 0.2e1 * t1291 * t917) * t1070, t1039 * t1413 + t1040 * t1411 + t1041 * t1409 + t1042 * t1407, 0.2e1 * t1039 * t1268 + 0.2e1 * t1040 * t1266 + 0.2e1 * t1041 * t1264 + 0.2e1 * t1042 * t1262, (-t1039 * t1201 + t1040 * t1256 + t1041 * t1255 + t1042 * t1254) * t1103, (-t1039 * t1200 + t1040 * t1253 + t1041 * t1252 + t1042 * t1251) * t1103, (t1039 * t1468 + t1585 * t948 + t1586 * t947 + t1587 * t946) * t1104, (t1573 * t804 + t921 * t840) * t965 + (t1575 * t800 + t919 * t836) * t963 + (t1577 * t796 + t917 * t832) * t961 + (t1579 * t792 + t1670 * t822) * t958 + (-t1430 * t764 - t1433 * t762 - t1436 * t760 - t1440 * t756) * t1103, (t1573 * t802 + t921 * t841) * t965 + (t1575 * t798 + t919 * t837) * t963 + (t1577 * t794 + t917 * t833) * t961 + (t1579 * t790 + t1670 * t823) * t958 + (-t1430 * t770 - t1433 * t768 - t1436 * t766 - t1440 * t758) * t1103, 0, 0, 0, t1034; t1692, t777, t1694, t1686, t774, t772, t1688, t1689, t1691, (t1573 * t831 + t921 * t850) * t965 + (t1575 * t829 + t919 * t848) * t963 + (t1577 * t827 + t917 * t846) * t961 + (t1579 * t821 + t1670 * t844) * t958 + (-t1430 * t812 - t1433 * t811 - t1436 * t810 - t1440 * t808) * t1103, (t1573 * t830 + t921 * t851) * t965 + (t1575 * t828 + t919 * t849) * t963 + (t1577 * t826 + t917 * t847) * t961 + (t1579 * t820 + t1670 * t845) * t958 + (-t1430 * t815 - t1433 * t814 - t1436 * t813 - t1440 * t809) * t1103, 0, 0, 0, 0; t1634 * t789 + t1636 * t788 + t1638 * t787 + t1645 * t1670, t1048 * t1472 + t1049 * t1471 + t1050 * t1470 + t1051 * t1469, (t1181 * t1527 + t1182 * t1530 + t1183 * t1533 + t1184 * t1549) * t1070, (-t1181 * t1537 - t1182 * t1541 - t1183 * t1545 - t1184 * t1554) * t1070, t1048 * t1318 + t1049 * t1316 + t1050 * t1314 + t1051 * t1312, 0.2e1 * t1048 * t1234 + 0.2e1 * t1049 * t1232 + 0.2e1 * t1050 * t1230 + 0.2e1 * t1051 * t1228, -t1048 * t1310 - t1049 * t1306 - t1050 * t1304 - t1051 * t1302 + (-t1048 * t1309 - t1049 * t1305 - t1050 * t1303 - t1051 * t1301) * t1103, -t1048 * t1308 - t1049 * t1300 - t1050 * t1298 - t1051 * t1296 + (-t1048 * t1307 - t1049 * t1299 - t1050 * t1297 - t1051 * t1295) * t1103, (t1430 * t869 + t1433 * t868 + t1436 * t867 + t1440 * t866) * t1103, (t1573 * t740 + t921 * t749) * t965 + (t1575 * t738 + t919 * t747) * t963 + (t1577 * t736 + t917 * t745) * t961 + (t1579 * t734 + t1670 * t743) * t958 + (-t1430 * t729 - t1433 * t728 - t1436 * t727 - t1440 * t725) * t1103, (t1573 * t739 + t921 * t750) * t965 + (t1575 * t737 + t919 * t748) * t963 + (t1577 * t735 + t917 * t746) * t961 + (t1579 * t733 + t1670 * t744) * t958 + (-t1430 * t732 - t1433 * t731 - t1436 * t730 - t1440 * t726) * t1103, 0, t1060, -t1059, 0; t1693, t778, t1685, t1687, t775, t773, t1710, t1709, t1695, (t805 * t992 + t843 * t942) * t965 + (t801 * t994 + t839 * t941) * t963 + (t797 * t993 + t835 * t940) * t961 + (t793 * t984 + t825 * t939) * t958 + (t1620 * t765 + t1621 * t763 + t1622 * t761 + t1624 * t757) * t1103, (t803 * t992 + t842 * t942) * t965 + (t799 * t994 + t838 * t941) * t963 + (t795 * t993 + t834 * t940) * t961 + (t791 * t984 + t824 * t939) * t958 + (t1620 * t771 + t1621 * t769 + t1622 * t767 + t1624 * t759) * t1103, 0, 0, 0, 0; t1692, t777, t1694, t1686, t774, t772, t1688, t1689, t1691, (t804 * t992 + t840 * t942) * t965 + (t800 * t994 + t836 * t941) * t963 + (t796 * t993 + t832 * t940) * t961 + (t792 * t984 + t822 * t939) * t958 + (t1620 * t764 + t1621 * t762 + t1622 * t760 + t1624 * t756) * t1103, (t802 * t992 + t841 * t942) * t965 + (t798 * t994 + t837 * t941) * t963 + (t794 * t993 + t833 * t940) * t961 + (t790 * t984 + t823 * t939) * t958 + (t1620 * t770 + t1621 * t768 + t1622 * t766 + t1624 * t758) * t1103, 0, 0, 0, 0; t939 ^ 2 * t959 + t940 ^ 2 * t962 + t941 ^ 2 * t964 + t942 ^ 2 * t966, t959 * t982 + t962 * t987 + t964 * t988 + t966 * t986, (t1088 * t1611 * t940 + t1090 * t1606 * t941 + t1092 * t1601 * t942 + t1548 * t939 * t984) * t1665, (-t1387 * t942 - t1391 * t941 - t1395 * t940 - t1403 * t939) * t1665, t1557 * t986 + t1558 * t988 + t1559 * t987 + t1560 * t982, 0.2e1 * t1350 * t986 + 0.2e1 * t1351 * t988 + 0.2e1 * t1352 * t987 + 0.2e1 * t1353 * t982, (t1081 * t1460 + t1083 * t1459 + t1085 * t1458 + t1404 * t945) * t1664, (t1087 * t1460 + t1089 * t1459 + t1091 * t1458 + t1399 * t945) * t1664, (t945 ^ 2 * t959 + t955 ^ 2 * t962 + t956 ^ 2 * t964 + t957 ^ 2 * t966) * t1104, (t831 * t992 + t850 * t942) * t965 + (t829 * t994 + t848 * t941) * t963 + (t827 * t993 + t846 * t940) * t961 + (t821 * t984 + t844 * t939) * t958 + (t1620 * t812 + t1621 * t811 + t1622 * t810 + t1624 * t808) * t1103, (t830 * t992 + t851 * t942) * t965 + (t828 * t994 + t849 * t941) * t963 + (t826 * t993 + t847 * t940) * t961 + (t820 * t984 + t845 * t939) * t958 + (t1620 * t815 + t1621 * t814 + t1622 * t813 + t1624 * t809) * t1103, 0, 0, 0, 1; t1626 * t789 + t1628 * t788 + t1630 * t787 + t1632 * t786, t1603 * t898 + t1608 * t897 + t1613 * t896 + t1618 * t894, (t1243 * t1527 + t1244 * t1530 + t1245 * t1533 + t1246 * t1549) * t1070, (-t1243 * t1537 - t1244 * t1541 - t1245 * t1545 - t1246 * t1554) * t1070, t1408 * t992 + t1410 * t994 + t1412 * t993 + t1414 * t984, 0.2e1 * t1263 * t992 + 0.2e1 * t1265 * t994 + 0.2e1 * t1267 * t993 + 0.2e1 * t1269 * t984, -t984 * t1406 - t993 * t1397 - t994 * t1393 - t992 * t1389 + (t1388 * t957 + t1392 * t956 + t1396 * t955 + t1405 * t945) * t1103, -t984 * t1401 - t993 * t1385 - t994 * t1382 - t992 * t1379 + (t1378 * t957 + t1381 * t956 + t1384 * t955 + t1400 * t945) * t1103, (-t1620 * t869 - t1621 * t868 - t1622 * t867 - t1624 * t866) * t1103, (t740 * t992 + t749 * t942) * t965 + (t738 * t994 + t747 * t941) * t963 + (t736 * t993 + t745 * t940) * t961 + (t734 * t984 + t743 * t939) * t958 + (t1620 * t729 + t1621 * t728 + t1622 * t727 + t1624 * t725) * t1103, (t739 * t992 + t750 * t942) * t965 + (t737 * t994 + t748 * t941) * t963 + (t735 * t993 + t746 * t940) * t961 + (t733 * t984 + t744 * t939) * t958 + (t1620 * t732 + t1621 * t731 + t1622 * t730 + t1624 * t726) * t1103, 0, 0, 0, 0; t1633 * t785 + t1635 * t784 + t1637 * t783 + t1646 * t1671, -t1053 * t1456 - t1054 * t1454 - t1055 * t1452 - t1425 * t975, (-t1141 * t1526 - t1142 * t1529 - t1143 * t1532 - t1144 * t1547) * t1070, (t1141 * t1535 + t1142 * t1539 + t1143 * t1543 + t1144 * t1552) * t1070, -t1276 * t978 - t1279 * t977 - t1282 * t976 - t1285 * t975, -0.2e1 * t1213 * t978 - 0.2e1 * t1215 * t977 - 0.2e1 * t1217 * t976 - 0.2e1 * t1219 * t975, (t1081 * t1160 + t1083 * t1159 + t1085 * t1158 + t1157 * t975) * t1103, (t1087 * t1160 + t1089 * t1159 + t1091 * t1158 + t1156 * t975) * t1103, (-t1053 * t1335 - t1054 * t1334 - t1055 * t1333 - t1322 * t975) * t1104, t793 * t894 + t797 * t896 + t801 * t897 + t805 * t898 + t782 * t825 + t783 * t835 + t784 * t839 + t785 * t843 + (-t1462 * t765 - t1464 * t763 - t1466 * t761 - t1467 * t757) * t1103, t791 * t894 + t795 * t896 + t799 * t897 + t803 * t898 + t782 * t824 + t783 * t834 + t784 * t838 + t785 * t842 + (-t1462 * t771 - t1464 * t769 - t1466 * t767 - t1467 * t759) * t1103, 0, -t1059, -t1060, 0; t1634 * t785 + t1636 * t784 + t1638 * t783 + t1646 * t1670, t1323 + t1325 + t1327 + t1329, (t1145 * t1526 + t1146 * t1529 + t1147 * t1532 + t1148 * t1547) * t1070, (-t1145 * t1535 - t1146 * t1539 - t1147 * t1543 - t1148 * t1552) * t1070, t1061 * t1329 + t1063 * t1327 + t1064 * t1325 + t1065 * t1323, 0.2e1 * t1049 * t1266 * t976 + 0.2e1 * t1050 * t1264 * t977 + 0.2e1 * t1051 * t1262 * t978 + 0.2e1 * t1268 * t1683, (-t1073 * t1164 - t1081 * t1163 - t1083 * t1162 - t1085 * t1161) * t1103, (-t1075 * t1164 - t1087 * t1163 - t1089 * t1162 - t1091 * t1161) * t1103, (t1049 * t1335 + t1050 * t1334 + t1051 * t1333 + t1438 * t1684) * t1104, t792 * t894 + t796 * t896 + t800 * t897 + t804 * t898 + t782 * t822 + t783 * t832 + t784 * t836 + t785 * t840 + (-t1462 * t764 - t1464 * t762 - t1466 * t760 - t1467 * t756) * t1103, t790 * t894 + t794 * t896 + t798 * t897 + t802 * t898 + t782 * t823 + t783 * t833 + t784 * t837 + t785 * t841 + (-t1462 * t770 - t1464 * t768 - t1466 * t766 - t1467 * t758) * t1103, 0, t1060, -t1059, 0; t1626 * t785 + t1628 * t784 + t1630 * t783 + t1632 * t782, t1451 * t978 + t1453 * t977 + t1455 * t976 + t1457 * t975, (t1076 * t1126 + t1088 * t1125 + t1090 * t1124 + t1092 * t1123) * t1070, (-t1074 * t1126 - t1082 * t1125 - t1084 * t1124 - t1086 * t1123) * t1070, t1311 * t978 + t1313 * t977 + t1315 * t976 + t1317 * t975, 0.2e1 * t1227 * t978 + 0.2e1 * t1229 * t977 + 0.2e1 * t1231 * t976 + 0.2e1 * t1233 * t975, (-t1073 * t1140 + t1081 * t1139 + t1083 * t1138 + t1085 * t1137) * t1103, (-t1075 * t1140 + t1087 * t1139 + t1089 * t1138 + t1091 * t1137) * t1103, (-t1461 * t957 - t1463 * t956 - t1465 * t955 - t1617 * t1707) * t1104, t821 * t894 + t827 * t896 + t829 * t897 + t831 * t898 + t782 * t844 + t783 * t846 + t784 * t848 + t785 * t850 + (-t1462 * t812 - t1464 * t811 - t1466 * t810 - t1467 * t808) * t1103, t820 * t894 + t826 * t896 + t828 * t897 + t830 * t898 + t782 * t845 + t783 * t847 + t784 * t849 + t785 * t851 + (-t1462 * t815 - t1464 * t814 - t1466 * t813 - t1467 * t809) * t1103, 0, 0, 0, 0; t782 * t786 + t783 * t787 + t784 * t788 + t785 * t789, t894 ^ 2 + t896 ^ 2 + t897 ^ 2 + t898 ^ 2, (t1076 * t1152 + t1088 * t1151 + t1090 * t1150 + t1092 * t1149) * t1070, (-t1074 * t1152 - t1082 * t1151 - t1084 * t1150 - t1086 * t1149) * t1070, t1312 * t978 + t1314 * t977 + t1316 * t976 + t1318 * t975, 0.2e1 * t1228 * t978 + 0.2e1 * t1230 * t977 + 0.2e1 * t1232 * t976 + 0.2e1 * t1234 * t975, -t975 * t1310 - t976 * t1306 - t977 * t1304 - t978 * t1302 + (-t1081 * t1338 - t1083 * t1337 - t1085 * t1336 - t1309 * t975) * t1103, -t975 * t1308 - t976 * t1300 - t977 * t1298 - t978 * t1296 + (-t1087 * t1338 - t1089 * t1337 - t1091 * t1336 - t1307 * t975) * t1103, (t1462 * t869 + t1464 * t868 + t1466 * t867 + t1467 * t866) * t1103, t734 * t894 + t736 * t896 + t738 * t897 + t740 * t898 + t782 * t743 + t783 * t745 + t784 * t747 + t785 * t749 + (-t1462 * t729 - t1464 * t728 - t1466 * t727 - t1467 * t725) * t1103, t733 * t894 + t735 * t896 + t737 * t897 + t739 * t898 + t782 * t744 + t783 * t746 + t784 * t748 + t785 * t750 + (-t1462 * t732 - t1464 * t731 - t1466 * t730 - t1467 * t726) * t1103, 1, 0, 0, 0;];
tau_reg  = t1;
