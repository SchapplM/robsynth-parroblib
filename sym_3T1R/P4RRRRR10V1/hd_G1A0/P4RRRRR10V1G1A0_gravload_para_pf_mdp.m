% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [21x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4RRRRR10V1G1A0_convert_par2_MPV_fixb.m

% Output:
% taugX [4x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 13:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4RRRRR10V1G1A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1),zeros(21,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_mdp: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [21 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_mdp: MDP has to be [21x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 13:17:28
% EndTime: 2020-08-07 13:17:54
% DurationCPUTime: 25.55s
% Computational Cost: add. (6521->750), mult. (17153->1310), div. (388->21), fcn. (16064->36), ass. (0->557)
t13597 = cos(pkin(3));
t13583 = t13597 ^ 2;
t13905 = pkin(6) * t13583;
t13957 = -0.2e1 * pkin(6);
t13614 = sin(qJ(3,1));
t13567 = t13614 * pkin(2);
t13624 = cos(qJ(2,1));
t13595 = t13624 ^ 2;
t13494 = (t13595 - 0.2e1) * t13567 - pkin(5);
t13611 = sin(qJ(3,2));
t13565 = t13611 * pkin(2);
t13621 = cos(qJ(2,2));
t13592 = t13621 ^ 2;
t13493 = (t13592 - 0.2e1) * t13565 - pkin(5);
t13608 = sin(qJ(3,3));
t13563 = t13608 * pkin(2);
t13618 = cos(qJ(2,3));
t13589 = t13618 ^ 2;
t13492 = (t13589 - 0.2e1) * t13563 - pkin(5);
t13602 = sin(qJ(3,4));
t13557 = t13602 * pkin(2);
t13606 = cos(qJ(2,4));
t13586 = t13606 ^ 2;
t13491 = (t13586 - 0.2e1) * t13557 - pkin(5);
t13900 = pkin(6) * t13597;
t13541 = pkin(1) * t13900;
t13603 = sin(qJ(2,4));
t13605 = cos(qJ(3,4));
t13817 = t13603 * t13605;
t13718 = t13597 * t13817;
t13596 = sin(pkin(3));
t13851 = t13596 * t13605;
t13783 = pkin(2) * t13851;
t13542 = pkin(1) * t13557;
t13558 = t13603 * pkin(6);
t13787 = pkin(5) * t13558;
t13867 = (t13542 - t13787) * t13596;
t13914 = pkin(1) * pkin(2);
t13369 = 0.1e1 / ((pkin(5) * t13783 - t13541) * t13606 + t13718 * t13914 - t13867);
t13585 = 0.1e1 / t13605;
t13891 = t13369 * t13585;
t13609 = sin(qJ(2,3));
t13617 = cos(qJ(3,3));
t13809 = t13609 * t13617;
t13717 = t13597 * t13809;
t13842 = t13596 * t13617;
t13782 = pkin(2) * t13842;
t13543 = pkin(1) * t13563;
t13564 = t13609 * pkin(6);
t13786 = pkin(5) * t13564;
t13866 = (t13543 - t13786) * t13596;
t13372 = 0.1e1 / ((pkin(5) * t13782 - t13541) * t13618 + t13717 * t13914 - t13866);
t13588 = 0.1e1 / t13617;
t13889 = t13372 * t13588;
t13612 = sin(qJ(2,2));
t13620 = cos(qJ(3,2));
t13803 = t13612 * t13620;
t13716 = t13597 * t13803;
t13839 = t13596 * t13620;
t13781 = pkin(2) * t13839;
t13544 = pkin(1) * t13565;
t13566 = t13612 * pkin(6);
t13785 = pkin(5) * t13566;
t13865 = (t13544 - t13785) * t13596;
t13374 = 0.1e1 / ((pkin(5) * t13781 - t13541) * t13621 + t13716 * t13914 - t13865);
t13591 = 0.1e1 / t13620;
t13888 = t13374 * t13591;
t13615 = sin(qJ(2,1));
t13623 = cos(qJ(3,1));
t13797 = t13615 * t13623;
t13715 = t13597 * t13797;
t13836 = t13596 * t13623;
t13780 = pkin(2) * t13836;
t13545 = pkin(1) * t13567;
t13568 = t13615 * pkin(6);
t13784 = pkin(5) * t13568;
t13864 = (t13545 - t13784) * t13596;
t13376 = 0.1e1 / ((pkin(5) * t13780 - t13541) * t13624 + t13715 * t13914 - t13864);
t13594 = 0.1e1 / t13623;
t13887 = t13376 * t13594;
t13854 = t13596 * t13597;
t13601 = legFrame(1,3);
t13550 = sin(t13601);
t13554 = cos(t13601);
t13616 = sin(qJ(1,1));
t13625 = cos(qJ(1,1));
t13439 = t13550 * t13616 - t13625 * t13554;
t13442 = t13550 * t13625 + t13554 * t13616;
t13821 = t13597 * t13623;
t13776 = pkin(2) * t13821;
t13691 = t13442 * t13776;
t13636 = pkin(6) ^ 2;
t13593 = t13623 ^ 2;
t13637 = pkin(2) ^ 2;
t13855 = t13593 * t13637;
t13699 = -t13636 + t13855;
t13956 = (t13439 * t13699 + t13691 * t13957) * t13595;
t13600 = legFrame(2,3);
t13549 = sin(t13600);
t13553 = cos(t13600);
t13613 = sin(qJ(1,2));
t13622 = cos(qJ(1,2));
t13438 = t13549 * t13613 - t13622 * t13553;
t13441 = t13549 * t13622 + t13553 * t13613;
t13822 = t13597 * t13620;
t13777 = pkin(2) * t13822;
t13692 = t13441 * t13777;
t13590 = t13620 ^ 2;
t13856 = t13590 * t13637;
t13700 = -t13636 + t13856;
t13955 = (t13438 * t13700 + t13692 * t13957) * t13592;
t13599 = legFrame(3,3);
t13548 = sin(t13599);
t13552 = cos(t13599);
t13610 = sin(qJ(1,3));
t13619 = cos(qJ(1,3));
t13437 = t13548 * t13610 - t13619 * t13552;
t13440 = t13548 * t13619 + t13552 * t13610;
t13823 = t13597 * t13617;
t13778 = pkin(2) * t13823;
t13693 = t13440 * t13778;
t13587 = t13617 ^ 2;
t13857 = t13587 * t13637;
t13701 = -t13636 + t13857;
t13954 = (t13437 * t13701 + t13693 * t13957) * t13589;
t13598 = legFrame(4,3);
t13547 = sin(t13598);
t13551 = cos(t13598);
t13604 = sin(qJ(1,4));
t13607 = cos(qJ(1,4));
t13431 = t13547 * t13604 - t13607 * t13551;
t13432 = t13547 * t13607 + t13551 * t13604;
t13830 = t13597 * t13605;
t13779 = pkin(2) * t13830;
t13697 = t13432 * t13779;
t13584 = t13605 ^ 2;
t13858 = t13584 * t13637;
t13702 = -t13636 + t13858;
t13953 = (t13431 * t13702 + t13697 * t13957) * t13586;
t13799 = t13614 * t13624;
t13710 = t13615 * t13799;
t13844 = t13596 * t13614;
t13910 = pkin(2) * t13593;
t13944 = t13568 + pkin(1);
t13952 = t13597 * (t13623 * t13944 + t13624 * t13910) - t13710 * t13780 + pkin(6) * (t13624 - 0.1e1) * (t13624 + 0.1e1) * t13844;
t13805 = t13611 * t13621;
t13711 = t13612 * t13805;
t13846 = t13596 * t13611;
t13911 = pkin(2) * t13590;
t13945 = t13566 + pkin(1);
t13951 = t13597 * (t13620 * t13945 + t13621 * t13911) - t13711 * t13781 + pkin(6) * (t13621 - 0.1e1) * (t13621 + 0.1e1) * t13846;
t13811 = t13608 * t13618;
t13712 = t13609 * t13811;
t13848 = t13596 * t13608;
t13912 = pkin(2) * t13587;
t13946 = t13564 + pkin(1);
t13950 = t13597 * (t13617 * t13946 + t13618 * t13912) - t13712 * t13782 + pkin(6) * (t13618 - 0.1e1) * (t13618 + 0.1e1) * t13848;
t13819 = t13602 * t13606;
t13714 = t13603 * t13819;
t13853 = t13596 * t13602;
t13913 = pkin(2) * t13584;
t13947 = t13558 + pkin(1);
t13949 = t13597 * (t13605 * t13947 + t13606 * t13913) - t13714 * t13783 + pkin(6) * (t13606 - 0.1e1) * (t13606 + 0.1e1) * t13853;
t13948 = 0.2e1 * pkin(6);
t13790 = t13623 * t13624;
t13769 = pkin(2) * t13790;
t13896 = t13624 * pkin(6);
t13484 = pkin(2) * t13797 - t13896;
t13868 = t13484 * t13597;
t13385 = 0.1e1 / (pkin(1) * t13868 + (-t13545 + (t13769 + t13568) * pkin(5)) * t13596);
t13792 = t13620 * t13621;
t13771 = pkin(2) * t13792;
t13897 = t13621 * pkin(6);
t13483 = pkin(2) * t13803 - t13897;
t13869 = t13483 * t13597;
t13384 = 0.1e1 / (pkin(1) * t13869 + (-t13544 + (t13771 + t13566) * pkin(5)) * t13596);
t13794 = t13617 * t13618;
t13773 = pkin(2) * t13794;
t13898 = t13618 * pkin(6);
t13482 = pkin(2) * t13809 - t13898;
t13870 = t13482 * t13597;
t13383 = 0.1e1 / (pkin(1) * t13870 + (-t13543 + (t13773 + t13564) * pkin(5)) * t13596);
t13814 = t13605 * t13606;
t13775 = pkin(2) * t13814;
t13899 = t13606 * pkin(6);
t13481 = pkin(2) * t13817 - t13899;
t13871 = t13481 * t13597;
t13381 = 0.1e1 / (pkin(1) * t13871 + (-t13542 + (t13775 + t13558) * pkin(5)) * t13596);
t13560 = pkin(1) * t13603;
t13572 = pkin(1) * t13609;
t13573 = pkin(1) * t13612;
t13574 = pkin(1) * t13615;
t13517 = t13560 + pkin(6);
t13943 = -pkin(6) * t13586 + t13517;
t13537 = t13572 + pkin(6);
t13942 = -pkin(6) * t13589 + t13537;
t13538 = t13573 + pkin(6);
t13941 = -pkin(6) * t13592 + t13538;
t13539 = t13574 + pkin(6);
t13940 = -pkin(6) * t13595 + t13539;
t13513 = pkin(5) * t13602 + pkin(2);
t13706 = t13513 - 0.2e1 * t13913;
t13923 = (-pkin(6) * t13714 - t13491 * t13605) * t13854 + t13814 * t13905 + (t13706 * t13583 - t13513 + t13913) * t13603;
t13525 = pkin(5) * t13608 + pkin(2);
t13705 = t13525 - 0.2e1 * t13912;
t13922 = (-pkin(6) * t13712 - t13492 * t13617) * t13854 + t13794 * t13905 + (t13705 * t13583 - t13525 + t13912) * t13609;
t13529 = pkin(5) * t13611 + pkin(2);
t13704 = t13529 - 0.2e1 * t13911;
t13921 = (-pkin(6) * t13711 - t13493 * t13620) * t13854 + t13792 * t13905 + (t13704 * t13583 - t13529 + t13911) * t13612;
t13533 = pkin(5) * t13614 + pkin(2);
t13703 = t13533 - 0.2e1 * t13910;
t13920 = (-pkin(6) * t13710 - t13494 * t13623) * t13854 + t13790 * t13905 + (t13703 * t13583 - t13533 + t13910) * t13615;
t13919 = 0.2e1 * t13586;
t13918 = 0.2e1 * t13589;
t13917 = 0.2e1 * t13592;
t13916 = 0.2e1 * t13595;
t13909 = pkin(2) * t13605;
t13908 = pkin(2) * t13617;
t13907 = pkin(2) * t13620;
t13906 = pkin(2) * t13623;
t13495 = g(1) * t13604 - g(2) * t13607;
t13496 = g(1) * t13607 + g(2) * t13604;
t13546 = t13596 * g(3);
t13341 = (t13546 + (-t13495 * t13551 - t13496 * t13547) * t13597) * t13606 + (t13495 * t13547 - t13496 * t13551) * t13603;
t13895 = t13341 * t13602;
t13497 = g(1) * t13610 - g(2) * t13619;
t13498 = g(1) * t13619 + g(2) * t13610;
t13342 = (t13546 + (-t13497 * t13552 - t13498 * t13548) * t13597) * t13618 + t13609 * (t13497 * t13548 - t13498 * t13552);
t13894 = t13342 * t13608;
t13499 = g(1) * t13613 - g(2) * t13622;
t13500 = g(1) * t13622 + g(2) * t13613;
t13343 = (t13546 + (-t13499 * t13553 - t13500 * t13549) * t13597) * t13621 + (t13499 * t13549 - t13500 * t13553) * t13612;
t13893 = t13343 * t13611;
t13501 = g(1) * t13616 - g(2) * t13625;
t13502 = g(1) * t13625 + g(2) * t13616;
t13344 = (t13546 + (-t13501 * t13554 - t13502 * t13550) * t13597) * t13624 + t13615 * (t13501 * t13550 - t13502 * t13554);
t13892 = t13344 * t13614;
t13831 = t13597 * t13603;
t13850 = t13596 * t13606;
t13421 = (pkin(1) * t13831 + pkin(5) * t13850) * t13909;
t13507 = t13597 * t13899;
t13371 = 0.1e1 / (-pkin(1) * t13507 + t13421 - t13867);
t13890 = t13371 * t13585;
t13824 = t13597 * t13615;
t13835 = t13596 * t13624;
t13423 = (pkin(1) * t13824 + pkin(5) * t13835) * t13906;
t13510 = t13597 * t13896;
t13378 = 0.1e1 / (-pkin(1) * t13510 + t13423 - t13864);
t13886 = t13378 * t13594;
t13828 = t13597 * t13609;
t13841 = t13596 * t13618;
t13424 = (pkin(1) * t13828 + pkin(5) * t13841) * t13908;
t13508 = t13597 * t13898;
t13379 = 0.1e1 / (-pkin(1) * t13508 + t13424 - t13866);
t13885 = t13379 * t13588;
t13826 = t13597 * t13612;
t13838 = t13596 * t13621;
t13425 = (pkin(1) * t13826 + pkin(5) * t13838) * t13907;
t13509 = t13597 * t13897;
t13380 = 0.1e1 / (-pkin(1) * t13509 + t13425 - t13865);
t13884 = t13380 * t13591;
t13832 = t13597 * t13602;
t13883 = t13381 * (pkin(2) * t13832 + t13481 * t13596);
t13829 = t13597 * t13608;
t13882 = t13383 * (pkin(2) * t13829 + t13482 * t13596);
t13827 = t13597 * t13611;
t13881 = t13384 * (pkin(2) * t13827 + t13483 * t13596);
t13825 = t13597 * t13614;
t13880 = t13385 * (pkin(2) * t13825 + t13484 * t13596);
t13820 = t13602 * t13603;
t13429 = -t13596 * t13820 + t13830;
t13875 = t13429 * t13606;
t13812 = t13608 * t13609;
t13443 = -t13596 * t13812 + t13823;
t13874 = t13443 * t13618;
t13806 = t13611 * t13612;
t13444 = -t13596 * t13806 + t13822;
t13873 = t13444 * t13621;
t13800 = t13614 * t13615;
t13445 = -t13596 * t13800 + t13821;
t13872 = t13445 * t13624;
t13514 = t13557 + pkin(5);
t13863 = t13514 * t13596;
t13526 = t13563 + pkin(5);
t13862 = t13526 * t13596;
t13530 = t13565 + pkin(5);
t13861 = t13530 * t13596;
t13534 = t13567 + pkin(5);
t13860 = t13534 * t13596;
t13859 = (t13597 + 0.1e1) * (t13597 - 0.1e1);
t13852 = t13596 * t13603;
t13849 = t13596 * t13607;
t13847 = t13596 * t13609;
t13845 = t13596 * t13612;
t13843 = t13596 * t13615;
t13840 = t13596 * t13619;
t13837 = t13596 * t13622;
t13834 = t13596 * t13625;
t13638 = 0.1e1 / pkin(2);
t13833 = t13596 * t13638;
t13818 = t13603 * t13604;
t13816 = t13603 * t13607;
t13815 = t13604 * t13606;
t13813 = t13607 * t13606;
t13810 = t13609 * t13610;
t13808 = t13609 * t13619;
t13807 = t13610 * t13618;
t13804 = t13612 * t13613;
t13802 = t13612 * t13622;
t13801 = t13613 * t13621;
t13798 = t13615 * t13616;
t13796 = t13615 * t13625;
t13795 = t13616 * t13624;
t13793 = t13619 * t13618;
t13791 = t13622 * t13621;
t13789 = t13625 * t13624;
t13788 = 0.2e1 * pkin(2) * (t13583 - 0.1e1 / 0.2e1);
t13763 = pkin(6) - t13905;
t13430 = t13718 - t13853;
t13401 = -t13430 * t13604 + t13605 * t13813;
t13473 = g(1) * t13547 - t13551 * g(2);
t13477 = g(1) * t13551 + g(2) * t13547;
t13305 = t13477 * t13401 - (t13430 * t13607 + t13604 * t13814) * t13473 + g(3) * (t13596 * t13817 + t13832);
t13758 = t13305 * t13891;
t13433 = t13597 * t13818 - t13813;
t13666 = t13433 * t13602 + t13604 * t13851;
t13306 = -t13477 * t13666 - t13473 * ((t13597 * t13820 + t13851) * t13607 + t13602 * t13815) - g(3) * t13429;
t13757 = t13306 * t13891;
t13474 = g(1) * t13548 - t13552 * g(2);
t13478 = g(1) * t13552 + g(2) * t13548;
t13449 = t13597 * t13810 - t13793;
t13665 = t13449 * t13608 + t13610 * t13842;
t13307 = -t13478 * t13665 - ((t13597 * t13812 + t13842) * t13619 + t13608 * t13807) * t13474 - g(3) * t13443;
t13756 = t13307 * t13889;
t13446 = t13717 - t13848;
t13402 = -t13446 * t13610 + t13617 * t13793;
t13308 = t13402 * t13478 - (t13446 * t13619 + t13610 * t13794) * t13474 + g(3) * (t13596 * t13809 + t13829);
t13755 = t13308 * t13889;
t13447 = t13716 - t13846;
t13403 = -t13447 * t13613 + t13620 * t13791;
t13475 = g(1) * t13549 - t13553 * g(2);
t13479 = g(1) * t13553 + g(2) * t13549;
t13309 = t13403 * t13479 - t13475 * (t13447 * t13622 + t13613 * t13792) + g(3) * (t13596 * t13803 + t13827);
t13754 = t13309 * t13888;
t13448 = t13715 - t13844;
t13404 = -t13448 * t13616 + t13623 * t13789;
t13476 = g(1) * t13550 - t13554 * g(2);
t13480 = g(1) * t13554 + g(2) * t13550;
t13310 = t13404 * t13480 - t13476 * (t13448 * t13625 + t13616 * t13790) + g(3) * (t13596 * t13797 + t13825);
t13753 = t13310 * t13887;
t13450 = t13597 * t13804 - t13791;
t13664 = t13450 * t13611 + t13613 * t13839;
t13311 = -t13664 * t13479 - t13475 * ((t13597 * t13806 + t13839) * t13622 + t13611 * t13801) - g(3) * t13444;
t13752 = t13311 * t13888;
t13451 = t13597 * t13798 - t13789;
t13663 = t13451 * t13614 + t13616 * t13836;
t13312 = -t13663 * t13480 - t13476 * ((t13597 * t13800 + t13836) * t13625 + t13614 * t13795) - g(3) * t13445;
t13751 = t13312 * t13887;
t13512 = (t13583 - 0.1e1) * pkin(6);
t13713 = t13514 * t13850;
t13722 = t13606 * t13858;
t13734 = t13514 * t13852;
t13750 = (-t13603 * t13722 * t13859 + (t13512 * t13919 + t13597 * t13713 + t13560 + t13763) * t13909 - ((-t13583 * t13558 + t13947) * t13606 - t13597 * t13734) * pkin(6)) * t13890;
t13322 = (t13596 * t13507 + t13491 * t13583 + pkin(5) + (-t13586 + 0.1e1) * t13557) * t13605 - t13947 * t13819 + (t13706 * t13854 + t13819 * t13905) * t13603;
t13749 = t13322 * t13890;
t13709 = t13526 * t13841;
t13721 = t13618 * t13857;
t13731 = t13526 * t13847;
t13748 = (-t13609 * t13721 * t13859 + (t13512 * t13918 + t13597 * t13709 + t13572 + t13763) * t13908 - ((-t13583 * t13564 + t13946) * t13618 - t13597 * t13731) * pkin(6)) * t13885;
t13708 = t13530 * t13838;
t13720 = t13621 * t13856;
t13728 = t13530 * t13845;
t13747 = (-t13612 * t13720 * t13859 + (t13512 * t13917 + t13597 * t13708 + t13573 + t13763) * t13907 - ((-t13583 * t13566 + t13945) * t13621 - t13597 * t13728) * pkin(6)) * t13884;
t13707 = t13534 * t13835;
t13719 = t13624 * t13855;
t13725 = t13534 * t13843;
t13746 = (-t13615 * t13719 * t13859 + (t13512 * t13916 + t13597 * t13707 + t13574 + t13763) * t13906 - ((-t13583 * t13568 + t13944) * t13624 - t13597 * t13725) * pkin(6)) * t13886;
t13326 = (t13596 * t13508 + t13492 * t13583 + pkin(5) + (-t13589 + 0.1e1) * t13563) * t13617 - t13946 * t13811 + (t13705 * t13854 + t13811 * t13905) * t13609;
t13745 = t13326 * t13885;
t13327 = (t13596 * t13509 + t13493 * t13583 + pkin(5) + (-t13592 + 0.1e1) * t13565) * t13620 - t13945 * t13805 + (t13704 * t13854 + t13805 * t13905) * t13612;
t13744 = t13327 * t13884;
t13328 = (t13596 * t13510 + t13494 * t13583 + pkin(5) + (-t13595 + 0.1e1) * t13567) * t13623 - t13944 * t13799 + (t13703 * t13854 + t13799 * t13905) * t13615;
t13743 = t13328 * t13886;
t13742 = t13431 * t13853;
t13741 = t13432 * t13853;
t13740 = t13437 * t13848;
t13739 = t13438 * t13846;
t13738 = t13439 * t13844;
t13737 = t13440 * t13848;
t13736 = t13441 * t13846;
t13735 = t13442 * t13844;
t13733 = t13604 * t13863;
t13732 = t13514 * t13849;
t13730 = t13610 * t13862;
t13729 = t13526 * t13840;
t13727 = t13613 * t13861;
t13726 = t13530 * t13837;
t13724 = t13616 * t13860;
t13723 = t13534 * t13834;
t13698 = t13431 * t13779;
t13696 = t13437 * t13778;
t13695 = t13438 * t13777;
t13694 = t13439 * t13776;
t13682 = t13702 * t13432;
t13681 = t13701 * t13440;
t13680 = t13700 * t13441;
t13679 = t13699 * t13442;
t13670 = t13702 * t13831;
t13669 = t13701 * t13828;
t13668 = t13700 * t13826;
t13667 = t13699 * t13824;
t13515 = 0.2e1 * t13558 + pkin(1);
t13662 = t13515 * t13607 + t13733;
t13527 = 0.2e1 * t13564 + pkin(1);
t13661 = t13527 * t13619 + t13730;
t13531 = 0.2e1 * t13566 + pkin(1);
t13660 = t13531 * t13622 + t13727;
t13535 = 0.2e1 * t13568 + pkin(1);
t13659 = t13535 * t13625 + t13724;
t13658 = t13517 * t13607 + t13603 * t13733;
t13657 = t13537 * t13619 + t13609 * t13730;
t13656 = t13538 * t13622 + t13612 * t13727;
t13655 = t13539 * t13625 + t13615 * t13724;
t13434 = t13597 * t13813 - t13818;
t13436 = t13597 * t13815 + t13816;
t13345 = -g(3) * t13850 + t13434 * t13473 + t13436 * t13477;
t13435 = t13597 * t13816 + t13815;
t13346 = g(3) * t13852 - t13433 * t13477 - t13435 * t13473;
t13646 = -t13341 * MDP(16) + (t13346 * MDP(10) + MDP(17) * t13895 + t13345 * MDP(9)) * t13585;
t13452 = t13597 * t13793 - t13810;
t13458 = t13597 * t13807 + t13808;
t13347 = -g(3) * t13841 + t13452 * t13474 + t13458 * t13478;
t13453 = t13597 * t13808 + t13807;
t13348 = g(3) * t13847 - t13449 * t13478 - t13453 * t13474;
t13645 = -t13342 * MDP(16) + (t13348 * MDP(10) + MDP(17) * t13894 + t13347 * MDP(9)) * t13588;
t13454 = t13597 * t13791 - t13804;
t13459 = t13597 * t13801 + t13802;
t13349 = -g(3) * t13838 + t13454 * t13475 + t13459 * t13479;
t13455 = t13597 * t13802 + t13801;
t13350 = g(3) * t13845 - t13450 * t13479 - t13455 * t13475;
t13644 = -t13343 * MDP(16) + (t13350 * MDP(10) + MDP(17) * t13893 + t13349 * MDP(9)) * t13591;
t13456 = t13597 * t13789 - t13798;
t13460 = t13597 * t13795 + t13796;
t13351 = -g(3) * t13835 + t13456 * t13476 + t13460 * t13480;
t13457 = t13597 * t13796 + t13795;
t13352 = g(3) * t13843 - t13451 * t13480 - t13457 * t13476;
t13643 = -t13344 * MDP(16) + (t13352 * MDP(10) + MDP(17) * t13892 + t13351 * MDP(9)) * t13594;
t13330 = -t13477 * (t13435 * t13602 + t13605 * t13849) + t13473 * t13666;
t13331 = (t13435 * t13605 - t13602 * t13849) * t13477 + t13473 * t13401;
t13357 = t13434 * t13477 - t13436 * t13473;
t13358 = -t13433 * t13473 + t13435 * t13477;
t13390 = t13473 * t13607 + t13477 * t13604;
t13391 = -t13473 * t13604 + t13477 * t13607;
t13642 = t13357 * MDP(10) + t13331 * MDP(16) + t13330 * MDP(17) + t13390 * MDP(2) + t13391 * MDP(3) + t13358 * MDP(9);
t13335 = -t13478 * (t13453 * t13608 + t13617 * t13840) + t13474 * t13665;
t13336 = t13478 * (t13453 * t13617 - t13608 * t13840) + t13474 * t13402;
t13360 = t13452 * t13478 - t13458 * t13474;
t13361 = -t13449 * t13474 + t13453 * t13478;
t13392 = t13474 * t13619 + t13478 * t13610;
t13395 = -t13474 * t13610 + t13478 * t13619;
t13641 = t13360 * MDP(10) + t13336 * MDP(16) + t13335 * MDP(17) + t13392 * MDP(2) + t13395 * MDP(3) + t13361 * MDP(9);
t13337 = -t13479 * (t13455 * t13611 + t13620 * t13837) + t13475 * t13664;
t13338 = t13479 * (t13455 * t13620 - t13611 * t13837) + t13403 * t13475;
t13362 = t13454 * t13479 - t13459 * t13475;
t13363 = -t13450 * t13475 + t13455 * t13479;
t13393 = t13475 * t13622 + t13479 * t13613;
t13396 = -t13475 * t13613 + t13479 * t13622;
t13640 = t13362 * MDP(10) + t13338 * MDP(16) + t13337 * MDP(17) + t13393 * MDP(2) + t13396 * MDP(3) + t13363 * MDP(9);
t13339 = -t13480 * (t13457 * t13614 + t13623 * t13834) + t13476 * t13663;
t13340 = (t13457 * t13623 - t13614 * t13834) * t13480 + t13404 * t13476;
t13364 = t13456 * t13480 - t13460 * t13476;
t13365 = -t13451 * t13476 + t13457 * t13480;
t13394 = t13476 * t13625 + t13480 * t13616;
t13397 = -t13476 * t13616 + t13480 * t13625;
t13639 = t13364 * MDP(10) + t13340 * MDP(16) + t13339 * MDP(17) + t13394 * MDP(2) + t13397 * MDP(3) + t13365 * MDP(9);
t13635 = koppelP(1,1);
t13634 = koppelP(2,1);
t13633 = koppelP(3,1);
t13632 = koppelP(4,1);
t13631 = koppelP(1,2);
t13630 = koppelP(2,2);
t13629 = koppelP(3,2);
t13628 = koppelP(4,2);
t13626 = xP(4);
t13582 = cos(t13626);
t13581 = sin(t13626);
t13486 = g(1) * t13582 + g(2) * t13581;
t13485 = g(1) * t13581 - g(2) * t13582;
t13472 = -t13581 * t13631 + t13582 * t13635;
t13471 = -t13581 * t13630 + t13582 * t13634;
t13470 = -t13581 * t13629 + t13582 * t13633;
t13469 = -t13581 * t13628 + t13582 * t13632;
t13468 = t13581 * t13635 + t13582 * t13631;
t13467 = t13581 * t13634 + t13582 * t13630;
t13466 = t13581 * t13633 + t13582 * t13629;
t13465 = t13581 * t13632 + t13582 * t13628;
t13420 = t13535 * t13616 - t13723;
t13419 = t13531 * t13613 - t13726;
t13418 = t13527 * t13610 - t13729;
t13417 = t13515 * t13604 - t13732;
t13409 = t13539 * t13616 - t13615 * t13723;
t13408 = t13538 * t13613 - t13612 * t13726;
t13407 = t13537 * t13610 - t13609 * t13729;
t13405 = t13517 * t13604 - t13603 * t13732;
t13400 = pkin(6) * t13940 + t13535 * t13769 + t13595 * t13855;
t13399 = pkin(6) * t13941 + t13531 * t13771 + t13592 * t13856;
t13398 = pkin(6) * t13942 + t13527 * t13773 + t13589 * t13857;
t13389 = pkin(6) * t13943 + t13515 * t13775 + t13586 * t13858;
t13368 = (pkin(2) * t13872 + t13597 * t13944) * t13623 - t13940 * t13844;
t13367 = (pkin(2) * t13873 + t13597 * t13945) * t13620 - t13941 * t13846;
t13366 = (pkin(2) * t13874 + t13597 * t13946) * t13617 - t13942 * t13848;
t13359 = (pkin(2) * t13875 + t13597 * t13947) * t13605 - t13943 * t13853;
t13356 = -((t13916 - 0.1e1) * t13900 + t13707) * t13906 + (t13597 * t13719 - (t13510 + t13860) * pkin(6)) * t13615;
t13355 = -((t13917 - 0.1e1) * t13900 + t13708) * t13907 + (t13597 * t13720 - (t13509 + t13861) * pkin(6)) * t13612;
t13354 = -((t13918 - 0.1e1) * t13900 + t13709) * t13908 + (t13597 * t13721 - (t13508 + t13862) * pkin(6)) * t13609;
t13353 = -((t13919 - 0.1e1) * t13900 + t13713) * t13909 + (t13597 * t13722 - (t13507 + t13863) * pkin(6)) * t13603;
t13334 = (-t13533 * t13859 + t13593 * t13788) * t13615 + (-pkin(6) * t13872 + t13494 * t13836) * t13597;
t13333 = (-t13529 * t13859 + t13590 * t13788) * t13612 + (-pkin(6) * t13873 + t13493 * t13839) * t13597;
t13332 = (-t13525 * t13859 + t13587 * t13788) * t13609 + (-pkin(6) * t13874 + t13492 * t13842) * t13597;
t13329 = (-t13513 * t13859 + t13584 * t13788) * t13603 + (-pkin(6) * t13875 + t13491 * t13851) * t13597;
t13320 = t13439 * t13568 + t13442 * t13868 + (t13439 * t13790 - t13735) * pkin(2);
t13319 = t13438 * t13566 + t13441 * t13869 + (t13438 * t13792 - t13736) * pkin(2);
t13318 = t13437 * t13564 + t13440 * t13870 + (t13437 * t13794 - t13737) * pkin(2);
t13317 = -t13442 * t13568 + t13439 * t13868 + (-t13442 * t13790 - t13738) * pkin(2);
t13316 = -t13441 * t13566 + t13438 * t13869 + (-t13441 * t13792 - t13739) * pkin(2);
t13315 = -t13440 * t13564 + t13437 * t13870 + (-t13440 * t13794 - t13740) * pkin(2);
t13314 = t13431 * t13558 + t13432 * t13871 + (t13431 * t13814 - t13741) * pkin(2);
t13313 = -t13432 * t13558 + t13431 * t13871 + (-t13432 * t13814 - t13742) * pkin(2);
t13304 = -t13334 * t13616 + t13368 * t13625;
t13303 = -t13333 * t13613 + t13367 * t13622;
t13302 = -t13332 * t13610 + t13366 * t13619;
t13301 = t13334 * t13625 + t13368 * t13616;
t13300 = t13333 * t13622 + t13367 * t13613;
t13299 = t13332 * t13619 + t13366 * t13610;
t13298 = -t13329 * t13604 + t13359 * t13607;
t13297 = t13329 * t13607 + t13359 * t13604;
t13296 = (t13694 * t13948 + t13679) * t13595 + ((t13420 * t13554 + t13550 * t13659) * t13906 - t13439 * t13667) * t13624 + (t13409 * t13554 + t13550 * t13655 - t13694) * pkin(6);
t13295 = (t13695 * t13948 + t13680) * t13592 + ((t13419 * t13553 + t13549 * t13660) * t13907 - t13438 * t13668) * t13621 + (t13408 * t13553 + t13549 * t13656 - t13695) * pkin(6);
t13294 = (t13696 * t13948 + t13681) * t13589 + ((t13418 * t13552 + t13548 * t13661) * t13908 - t13437 * t13669) * t13618 + (t13407 * t13552 + t13548 * t13657 - t13696) * pkin(6);
t13293 = t13956 + ((t13550 * t13420 - t13554 * t13659) * t13906 + t13679 * t13824) * t13624 + (t13550 * t13409 - t13554 * t13655 + t13691) * pkin(6);
t13292 = t13955 + ((t13549 * t13419 - t13553 * t13660) * t13907 + t13680 * t13826) * t13621 + (t13549 * t13408 - t13553 * t13656 + t13692) * pkin(6);
t13291 = t13954 + ((t13548 * t13418 - t13552 * t13661) * t13908 + t13681 * t13828) * t13618 + (t13548 * t13407 - t13552 * t13657 + t13693) * pkin(6);
t13290 = (t13698 * t13948 + t13682) * t13586 + ((t13417 * t13551 + t13547 * t13662) * t13909 - t13431 * t13670) * t13606 + (t13405 * t13551 + t13547 * t13658 - t13698) * pkin(6);
t13289 = t13953 + ((t13547 * t13417 - t13551 * t13662) * t13909 + t13682 * t13831) * t13606 + (t13547 * t13405 - t13551 * t13658 + t13697) * pkin(6);
t13288 = (t13317 * t13472 - t13320 * t13468) * t13385;
t13287 = (t13316 * t13471 - t13319 * t13467) * t13384;
t13286 = (t13315 * t13470 - t13318 * t13466) * t13383;
t13279 = (t13313 * t13469 - t13314 * t13465) * t13381;
t13276 = (-t13467 * (-t13955 + ((-t13438 * t13531 + t13441 * t13861) * t13907 - t13441 * t13668) * t13621 + (-t13438 * t13538 + (t13728 - t13777) * t13441) * pkin(6)) * t13596 * t13374 + ((t13355 * t13622 + t13399 * t13613) * t13553 + (-t13355 * t13613 + t13399 * t13622) * t13549) * t13471 * t13596 / (t13425 + t13596 * t13785 - pkin(1) * (pkin(2) * t13846 + t13509))) * t13638 * t13591;
t13275 = (-(-t13956 + ((-t13439 * t13535 + t13442 * t13860) * t13906 - t13442 * t13667) * t13624 + (-t13439 * t13539 + (t13725 - t13776) * t13442) * pkin(6)) * t13468 * t13596 * t13376 + ((t13356 * t13625 + t13400 * t13616) * t13554 + t13550 * (-t13356 * t13616 + t13400 * t13625)) * t13472 * t13596 / (t13423 + t13596 * t13784 - pkin(1) * (pkin(2) * t13844 + t13510))) * t13638 * t13594;
t13274 = (-t13596 * (-t13954 + ((-t13437 * t13527 + t13440 * t13862) * t13908 - t13440 * t13669) * t13618 + (-t13437 * t13537 + (t13731 - t13778) * t13440) * pkin(6)) * t13466 * t13372 + t13470 * t13596 * ((t13354 * t13619 + t13398 * t13610) * t13552 + (-t13354 * t13610 + t13398 * t13619) * t13548) / (t13424 + t13596 * t13786 - pkin(1) * (pkin(2) * t13848 + t13508))) * t13638 * t13588;
t13273 = (-t13465 * t13596 * (-t13953 + ((-t13431 * t13515 + t13432 * t13863) * t13909 - t13432 * t13670) * t13606 + (-t13431 * t13517 + (t13734 - t13779) * t13432) * pkin(6)) * t13369 + ((t13353 * t13607 + t13389 * t13604) * t13551 + (-t13353 * t13604 + t13389 * t13607) * t13547) * t13596 * t13469 / (t13421 + t13596 * t13787 - pkin(1) * (pkin(2) * t13853 + t13507))) * t13638 * t13585;
t13272 = ((-t13299 * t13548 + t13302 * t13552) * t13466 - t13470 * (t13299 * t13552 + t13302 * t13548)) * t13889;
t13271 = (t13468 * (-t13301 * t13550 + t13304 * t13554) - (t13301 * t13554 + t13304 * t13550) * t13472) * t13887;
t13270 = (t13467 * (-t13300 * t13549 + t13303 * t13553) - t13471 * (t13300 * t13553 + t13303 * t13549)) * t13888;
t13269 = (t13465 * (-t13297 * t13547 + t13298 * t13551) - t13469 * (t13297 * t13551 + t13298 * t13547)) * t13891;
t1 = [(-t13485 * t13581 - t13582 * t13486) * MDP(21) - (t13643 * (-t13952 * t13439 + t13920 * t13442 + t13738 * t13574) + t13639 * t13320) * t13385 - (t13644 * (-t13951 * t13438 + t13921 * t13441 + t13739 * t13573) + t13640 * t13319) * t13384 - (t13645 * (-t13950 * t13437 + t13922 * t13440 + t13740 * t13572) + t13641 * t13318) * t13383 - (t13646 * (-t13949 * t13431 + t13923 * t13432 + t13742 * t13560) + t13642 * t13314) * t13381 + ((-t13289 * t13757 - t13291 * t13756 - t13292 * t13752 - t13293 * t13751) * MDP(16) + (-t13289 * t13758 - t13291 * t13755 - t13292 * t13754 - t13293 * t13753) * MDP(17)) * t13833; (t13485 * t13582 - t13486 * t13581) * MDP(21) - (t13643 * (t13920 * t13439 + t13442 * t13952 - t13735 * t13574) + t13639 * t13317) * t13385 - (t13644 * (t13921 * t13438 + t13441 * t13951 - t13736 * t13573) + t13640 * t13316) * t13384 - (t13645 * (t13922 * t13437 + t13440 * t13950 - t13737 * t13572) + t13641 * t13315) * t13383 - (t13646 * (t13923 * t13431 + t13432 * t13949 - t13741 * t13560) + t13642 * t13313) * t13381 + ((t13290 * t13757 + t13294 * t13756 + t13295 * t13752 + t13296 * t13751) * MDP(16) + (t13290 * t13758 + t13294 * t13755 + t13295 * t13754 + t13296 * t13753) * MDP(17)) * t13833; (t13390 * t13883 + t13392 * t13882 + t13393 * t13881 + t13394 * t13880) * MDP(2) + (t13391 * t13883 + t13395 * t13882 + t13396 * t13881 + t13397 * t13880) * MDP(3) + (t13345 * t13749 + t13347 * t13745 + t13349 * t13744 + t13351 * t13743 + t13358 * t13883 + t13361 * t13882 + t13363 * t13881 + t13365 * t13880) * MDP(9) + (t13346 * t13749 + t13348 * t13745 + t13350 * t13744 + t13352 * t13743 + t13357 * t13883 + t13360 * t13882 + t13362 * t13881 + t13364 * t13880) * MDP(10) + (-t13322 * t13371 * t13341 - t13326 * t13379 * t13342 - t13327 * t13380 * t13343 - t13328 * t13378 * t13344 + t13331 * t13883 + t13336 * t13882 + t13338 * t13881 + t13340 * t13880) * MDP(16) + (t13330 * t13883 + t13335 * t13882 + t13337 * t13881 + t13339 * t13880 + t13743 * t13892 + t13744 * t13893 + t13745 * t13894 + t13749 * t13895) * MDP(17) - g(3) * MDP(21) + ((t13306 * t13750 + t13307 * t13748 + t13311 * t13747 + t13312 * t13746) * MDP(16) + (t13305 * t13750 + t13308 * t13748 + t13309 * t13747 + t13310 * t13746) * MDP(17)) * t13638; (-t13279 * t13390 - t13286 * t13392 - t13287 * t13393 - t13288 * t13394) * MDP(2) + (-t13279 * t13391 - t13286 * t13395 - t13287 * t13396 - t13288 * t13397) * MDP(3) + (t13269 * t13345 + t13270 * t13349 + t13271 * t13351 + t13272 * t13347 - t13279 * t13358 - t13286 * t13361 - t13287 * t13363 - t13288 * t13365) * MDP(9) + (t13269 * t13346 + t13270 * t13350 + t13271 * t13352 + t13272 * t13348 - t13279 * t13357 - t13286 * t13360 - t13287 * t13362 - t13288 * t13364) * MDP(10) + (-t13269 * t13341 * t13605 - t13270 * t13343 * t13620 - t13271 * t13344 * t13623 - t13272 * t13342 * t13617 + t13273 * t13306 + t13274 * t13307 + t13275 * t13312 + t13276 * t13311 - t13279 * t13331 - t13286 * t13336 - t13287 * t13338 - t13288 * t13340) * MDP(16) + (t13269 * t13895 + t13270 * t13893 + t13271 * t13892 + t13272 * t13894 + t13273 * t13305 + t13274 * t13308 + t13275 * t13310 + t13276 * t13309 - t13279 * t13330 - t13286 * t13335 - t13287 * t13337 - t13288 * t13339) * MDP(17) + t13485 * MDP(19) + t13486 * MDP(20);];
taugX  = t1;
