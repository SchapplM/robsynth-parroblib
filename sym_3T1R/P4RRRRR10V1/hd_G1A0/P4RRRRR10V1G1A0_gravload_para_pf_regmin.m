% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P4RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x21]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 13:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4RRRRR10V1G1A0_gravload_para_pf_regmin(xP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_regmin: pkin has to be [6x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 12:31:19
% EndTime: 2020-08-07 12:31:39
% DurationCPUTime: 22.05s
% Computational Cost: add. (6497->758), mult. (17124->1352), div. (388->21), fcn. (16064->36), ass. (0->573)
t6613 = cos(pkin(3));
t6599 = t6613 ^ 2;
t6929 = pkin(6) * t6599;
t6981 = -0.2e1 * pkin(6);
t6630 = sin(qJ(3,1));
t6583 = t6630 * pkin(2);
t6640 = cos(qJ(2,1));
t6611 = t6640 ^ 2;
t6510 = (t6611 - 0.2e1) * t6583 - pkin(5);
t6627 = sin(qJ(3,2));
t6581 = t6627 * pkin(2);
t6637 = cos(qJ(2,2));
t6608 = t6637 ^ 2;
t6509 = (t6608 - 0.2e1) * t6581 - pkin(5);
t6624 = sin(qJ(3,3));
t6579 = t6624 * pkin(2);
t6634 = cos(qJ(2,3));
t6605 = t6634 ^ 2;
t6508 = (t6605 - 0.2e1) * t6579 - pkin(5);
t6618 = sin(qJ(3,4));
t6573 = t6618 * pkin(2);
t6622 = cos(qJ(2,4));
t6602 = t6622 ^ 2;
t6507 = (t6602 - 0.2e1) * t6573 - pkin(5);
t6924 = pkin(6) * t6613;
t6557 = pkin(1) * t6924;
t6619 = sin(qJ(2,4));
t6621 = cos(qJ(3,4));
t6832 = t6621 * t6613;
t6727 = t6619 * t6832;
t6612 = sin(pkin(3));
t6860 = t6612 * t6621;
t6789 = pkin(2) * t6860;
t6558 = pkin(1) * t6573;
t6574 = t6619 * pkin(6);
t6793 = pkin(5) * t6574;
t6871 = (t6558 - t6793) * t6612;
t6938 = pkin(1) * pkin(2);
t6385 = 0.1e1 / ((pkin(5) * t6789 - t6557) * t6622 + t6727 * t6938 - t6871);
t6601 = 0.1e1 / t6621;
t6903 = t6385 * t6601;
t6625 = sin(qJ(2,3));
t6633 = cos(qJ(3,3));
t6810 = t6633 * t6613;
t6723 = t6625 * t6810;
t6853 = t6612 * t6633;
t6788 = pkin(2) * t6853;
t6559 = pkin(1) * t6579;
t6580 = t6625 * pkin(6);
t6792 = pkin(5) * t6580;
t6870 = (t6559 - t6792) * t6612;
t6388 = 0.1e1 / ((pkin(5) * t6788 - t6557) * t6634 + t6723 * t6938 - t6870);
t6604 = 0.1e1 / t6633;
t6901 = t6388 * t6604;
t6628 = sin(qJ(2,2));
t6636 = cos(qJ(3,2));
t6806 = t6636 * t6613;
t6720 = t6628 * t6806;
t6851 = t6612 * t6636;
t6787 = pkin(2) * t6851;
t6560 = pkin(1) * t6581;
t6582 = t6628 * pkin(6);
t6791 = pkin(5) * t6582;
t6869 = (t6560 - t6791) * t6612;
t6390 = 0.1e1 / ((pkin(5) * t6787 - t6557) * t6637 + t6720 * t6938 - t6869);
t6607 = 0.1e1 / t6636;
t6900 = t6390 * t6607;
t6631 = sin(qJ(2,1));
t6639 = cos(qJ(3,1));
t6802 = t6639 * t6613;
t6718 = t6631 * t6802;
t6849 = t6612 * t6639;
t6786 = pkin(2) * t6849;
t6561 = pkin(1) * t6583;
t6584 = t6631 * pkin(6);
t6790 = pkin(5) * t6584;
t6868 = (t6561 - t6790) * t6612;
t6392 = 0.1e1 / ((pkin(5) * t6786 - t6557) * t6640 + t6718 * t6938 - t6868);
t6610 = 0.1e1 / t6639;
t6899 = t6392 * t6610;
t6862 = t6612 * t6613;
t6617 = legFrame(1,3);
t6566 = sin(t6617);
t6570 = cos(t6617);
t6632 = sin(qJ(1,1));
t6641 = cos(qJ(1,1));
t6455 = t6566 * t6632 - t6641 * t6570;
t6458 = t6566 * t6641 + t6570 * t6632;
t6782 = pkin(2) * t6802;
t6699 = t6458 * t6782;
t6652 = pkin(6) ^ 2;
t6609 = t6639 ^ 2;
t6653 = pkin(2) ^ 2;
t6795 = t6653 * t6609;
t6707 = -t6652 + t6795;
t6980 = (t6455 * t6707 + t6699 * t6981) * t6611;
t6616 = legFrame(2,3);
t6565 = sin(t6616);
t6569 = cos(t6616);
t6629 = sin(qJ(1,2));
t6638 = cos(qJ(1,2));
t6454 = t6565 * t6629 - t6638 * t6569;
t6457 = t6565 * t6638 + t6569 * t6629;
t6783 = pkin(2) * t6806;
t6700 = t6457 * t6783;
t6606 = t6636 ^ 2;
t6796 = t6653 * t6606;
t6708 = -t6652 + t6796;
t6979 = (t6454 * t6708 + t6700 * t6981) * t6608;
t6615 = legFrame(3,3);
t6564 = sin(t6615);
t6568 = cos(t6615);
t6626 = sin(qJ(1,3));
t6635 = cos(qJ(1,3));
t6453 = t6564 * t6626 - t6635 * t6568;
t6456 = t6564 * t6635 + t6568 * t6626;
t6784 = pkin(2) * t6810;
t6701 = t6456 * t6784;
t6603 = t6633 ^ 2;
t6797 = t6653 * t6603;
t6709 = -t6652 + t6797;
t6978 = (t6453 * t6709 + t6701 * t6981) * t6605;
t6614 = legFrame(4,3);
t6563 = sin(t6614);
t6567 = cos(t6614);
t6620 = sin(qJ(1,4));
t6623 = cos(qJ(1,4));
t6447 = t6563 * t6620 - t6623 * t6567;
t6448 = t6563 * t6623 + t6567 * t6620;
t6785 = pkin(2) * t6832;
t6705 = t6448 * t6785;
t6600 = t6621 ^ 2;
t6798 = t6653 * t6600;
t6710 = -t6652 + t6798;
t6977 = (t6447 * t6710 + t6705 * t6981) * t6602;
t6815 = t6630 * t6640;
t6719 = t6631 * t6815;
t6855 = t6612 * t6630;
t6934 = pkin(2) * t6609;
t6968 = t6584 + pkin(1);
t6976 = t6613 * (t6639 * t6968 + t6640 * t6934) - t6719 * t6786 + pkin(6) * (t6640 - 0.1e1) * (t6640 + 0.1e1) * t6855;
t6821 = t6627 * t6637;
t6722 = t6628 * t6821;
t6857 = t6612 * t6627;
t6935 = pkin(2) * t6606;
t6969 = t6582 + pkin(1);
t6975 = t6613 * (t6636 * t6969 + t6637 * t6935) - t6722 * t6787 + pkin(6) * (t6637 - 0.1e1) * (t6637 + 0.1e1) * t6857;
t6828 = t6624 * t6634;
t6725 = t6625 * t6828;
t6858 = t6612 * t6624;
t6936 = pkin(2) * t6603;
t6970 = t6580 + pkin(1);
t6974 = t6613 * (t6633 * t6970 + t6634 * t6936) - t6725 * t6788 + pkin(6) * (t6634 - 0.1e1) * (t6634 + 0.1e1) * t6858;
t6838 = t6618 * t6622;
t6729 = t6619 * t6838;
t6861 = t6612 * t6618;
t6937 = pkin(2) * t6600;
t6971 = t6574 + pkin(1);
t6973 = (t6621 * t6971 + t6622 * t6937) * t6613 - t6729 * t6789 + pkin(6) * (t6622 - 0.1e1) * (t6622 + 0.1e1) * t6861;
t6972 = 0.2e1 * pkin(6);
t6801 = t6639 * t6640;
t6775 = pkin(2) * t6801;
t6813 = t6631 * t6639;
t6920 = t6640 * pkin(6);
t6500 = pkin(2) * t6813 - t6920;
t6872 = t6500 * t6613;
t6401 = 0.1e1 / (pkin(1) * t6872 + (-t6561 + (t6775 + t6584) * pkin(5)) * t6612);
t6805 = t6636 * t6637;
t6777 = pkin(2) * t6805;
t6819 = t6628 * t6636;
t6921 = t6637 * pkin(6);
t6499 = pkin(2) * t6819 - t6921;
t6873 = t6499 * t6613;
t6400 = 0.1e1 / (pkin(1) * t6873 + (-t6560 + (t6777 + t6582) * pkin(5)) * t6612);
t6809 = t6633 * t6634;
t6779 = pkin(2) * t6809;
t6825 = t6625 * t6633;
t6922 = t6634 * pkin(6);
t6498 = pkin(2) * t6825 - t6922;
t6874 = t6498 * t6613;
t6399 = 0.1e1 / (pkin(1) * t6874 + (-t6559 + (t6779 + t6580) * pkin(5)) * t6612);
t6831 = t6621 * t6622;
t6781 = pkin(2) * t6831;
t6835 = t6619 * t6621;
t6923 = t6622 * pkin(6);
t6497 = pkin(2) * t6835 - t6923;
t6875 = t6497 * t6613;
t6397 = 0.1e1 / (pkin(1) * t6875 + (-t6558 + (t6781 + t6574) * pkin(5)) * t6612);
t6576 = pkin(1) * t6619;
t6588 = pkin(1) * t6625;
t6589 = pkin(1) * t6628;
t6590 = pkin(1) * t6631;
t6533 = t6576 + pkin(6);
t6967 = -pkin(6) * t6602 + t6533;
t6553 = t6588 + pkin(6);
t6966 = -pkin(6) * t6605 + t6553;
t6554 = t6589 + pkin(6);
t6965 = -pkin(6) * t6608 + t6554;
t6555 = t6590 + pkin(6);
t6964 = -pkin(6) * t6611 + t6555;
t6529 = pkin(5) * t6618 + pkin(2);
t6714 = t6529 - 0.2e1 * t6937;
t6947 = (-pkin(6) * t6729 - t6507 * t6621) * t6862 + t6831 * t6929 + (t6714 * t6599 - t6529 + t6937) * t6619;
t6541 = pkin(5) * t6624 + pkin(2);
t6713 = t6541 - 0.2e1 * t6936;
t6946 = (-pkin(6) * t6725 - t6508 * t6633) * t6862 + t6809 * t6929 + (t6713 * t6599 - t6541 + t6936) * t6625;
t6545 = pkin(5) * t6627 + pkin(2);
t6712 = t6545 - 0.2e1 * t6935;
t6945 = (-pkin(6) * t6722 - t6509 * t6636) * t6862 + t6805 * t6929 + (t6712 * t6599 - t6545 + t6935) * t6628;
t6549 = pkin(5) * t6630 + pkin(2);
t6711 = t6549 - 0.2e1 * t6934;
t6944 = (-pkin(6) * t6719 - t6510 * t6639) * t6862 + t6801 * t6929 + (t6711 * t6599 - t6549 + t6934) * t6631;
t6943 = 0.2e1 * t6602;
t6942 = 0.2e1 * t6605;
t6941 = 0.2e1 * t6608;
t6940 = 0.2e1 * t6611;
t6933 = pkin(2) * t6621;
t6932 = pkin(2) * t6633;
t6931 = pkin(2) * t6636;
t6930 = pkin(2) * t6639;
t6523 = t6613 * t6923;
t6338 = (t6612 * t6523 + t6507 * t6599 + pkin(5) + (-t6602 + 0.1e1) * t6573) * t6621 - t6971 * t6838 + (t6714 * t6862 + t6838 * t6929) * t6619;
t6830 = t6622 * t6612;
t6845 = t6613 * t6619;
t6437 = (pkin(1) * t6845 + pkin(5) * t6830) * t6933;
t6387 = 0.1e1 / (-pkin(1) * t6523 + t6437 - t6871);
t6919 = t6338 * t6387;
t6524 = t6613 * t6922;
t6342 = (t6612 * t6524 + t6508 * t6599 + pkin(5) + (-t6605 + 0.1e1) * t6579) * t6633 - t6970 * t6828 + (t6713 * t6862 + t6828 * t6929) * t6625;
t6808 = t6634 * t6612;
t6843 = t6613 * t6625;
t6440 = (pkin(1) * t6843 + pkin(5) * t6808) * t6932;
t6395 = 0.1e1 / (-pkin(1) * t6524 + t6440 - t6870);
t6918 = t6342 * t6395;
t6525 = t6613 * t6921;
t6343 = (t6612 * t6525 + t6509 * t6599 + pkin(5) + (-t6608 + 0.1e1) * t6581) * t6636 - t6969 * t6821 + (t6712 * t6862 + t6821 * t6929) * t6628;
t6804 = t6637 * t6612;
t6841 = t6613 * t6628;
t6441 = (pkin(1) * t6841 + pkin(5) * t6804) * t6931;
t6396 = 0.1e1 / (-pkin(1) * t6525 + t6441 - t6869);
t6917 = t6343 * t6396;
t6526 = t6613 * t6920;
t6344 = (t6612 * t6526 + t6510 * t6599 + pkin(5) + (-t6611 + 0.1e1) * t6583) * t6639 - t6968 * t6815 + (t6711 * t6862 + t6815 * t6929) * t6631;
t6800 = t6640 * t6612;
t6839 = t6613 * t6631;
t6439 = (pkin(1) * t6839 + pkin(5) * t6800) * t6930;
t6394 = 0.1e1 / (-pkin(1) * t6526 + t6439 - t6868);
t6916 = t6344 * t6394;
t6511 = g(1) * t6620 - g(2) * t6623;
t6512 = g(1) * t6623 + g(2) * t6620;
t6562 = t6612 * g(3);
t6357 = (t6562 + (-t6511 * t6567 - t6512 * t6563) * t6613) * t6622 + (t6511 * t6563 - t6512 * t6567) * t6619;
t6915 = t6357 * t6618;
t6513 = g(1) * t6626 - g(2) * t6635;
t6514 = g(1) * t6635 + g(2) * t6626;
t6358 = (t6562 + (-t6513 * t6568 - t6514 * t6564) * t6613) * t6634 + t6625 * (t6513 * t6564 - t6514 * t6568);
t6914 = t6358 * t6624;
t6515 = g(1) * t6629 - g(2) * t6638;
t6516 = g(1) * t6638 + g(2) * t6629;
t6359 = (t6562 + (-t6515 * t6569 - t6516 * t6565) * t6613) * t6637 + (t6515 * t6565 - t6516 * t6569) * t6628;
t6913 = t6359 * t6627;
t6517 = g(1) * t6632 - g(2) * t6641;
t6518 = g(1) * t6641 + g(2) * t6632;
t6360 = (t6562 + (-t6517 * t6570 - t6518 * t6566) * t6613) * t6640 + t6631 * (t6517 * t6566 - t6518 * t6570);
t6912 = t6360 * t6630;
t6829 = t6623 * t6622;
t6836 = t6619 * t6620;
t6450 = t6613 * t6829 - t6836;
t6833 = t6620 * t6622;
t6834 = t6619 * t6623;
t6452 = t6613 * t6833 + t6834;
t6489 = g(1) * t6563 - t6567 * g(2);
t6493 = g(1) * t6567 + g(2) * t6563;
t6361 = -g(3) * t6830 + t6450 * t6489 + t6452 * t6493;
t6911 = t6361 * t6601;
t6449 = t6613 * t6836 - t6829;
t6451 = t6613 * t6834 + t6833;
t6837 = t6619 * t6612;
t6362 = g(3) * t6837 - t6493 * t6449 - t6451 * t6489;
t6910 = t6362 * t6601;
t6807 = t6635 * t6634;
t6826 = t6625 * t6626;
t6468 = t6613 * t6807 - t6826;
t6823 = t6626 * t6634;
t6824 = t6625 * t6635;
t6474 = t6613 * t6823 + t6824;
t6490 = g(1) * t6564 - t6568 * g(2);
t6494 = g(1) * t6568 + g(2) * t6564;
t6363 = -g(3) * t6808 + t6468 * t6490 + t6474 * t6494;
t6909 = t6363 * t6604;
t6465 = t6613 * t6826 - t6807;
t6469 = t6613 * t6824 + t6823;
t6827 = t6625 * t6612;
t6364 = g(3) * t6827 - t6494 * t6465 - t6469 * t6490;
t6908 = t6364 * t6604;
t6803 = t6638 * t6637;
t6820 = t6628 * t6629;
t6470 = t6613 * t6803 - t6820;
t6817 = t6629 * t6637;
t6818 = t6628 * t6638;
t6475 = t6613 * t6817 + t6818;
t6491 = g(1) * t6565 - t6569 * g(2);
t6495 = g(1) * t6569 + g(2) * t6565;
t6365 = -g(3) * t6804 + t6470 * t6491 + t6475 * t6495;
t6907 = t6365 * t6607;
t6466 = t6613 * t6820 - t6803;
t6471 = t6613 * t6818 + t6817;
t6856 = t6612 * t6628;
t6366 = g(3) * t6856 - t6495 * t6466 - t6471 * t6491;
t6906 = t6366 * t6607;
t6799 = t6641 * t6640;
t6814 = t6631 * t6632;
t6472 = t6613 * t6799 - t6814;
t6811 = t6632 * t6640;
t6812 = t6631 * t6641;
t6476 = t6613 * t6811 + t6812;
t6492 = g(1) * t6566 - t6570 * g(2);
t6496 = g(1) * t6570 + g(2) * t6566;
t6367 = -g(3) * t6800 + t6472 * t6492 + t6476 * t6496;
t6905 = t6367 * t6610;
t6467 = t6613 * t6814 - t6799;
t6473 = t6613 * t6812 + t6811;
t6854 = t6612 * t6631;
t6368 = g(3) * t6854 - t6496 * t6467 - t6473 * t6492;
t6904 = t6368 * t6610;
t6902 = t6387 * t6601;
t6898 = t6394 * t6610;
t6897 = t6395 * t6604;
t6896 = t6396 * t6607;
t6406 = t6489 * t6623 + t6493 * t6620;
t6895 = t6397 * t6406;
t6407 = -t6489 * t6620 + t6493 * t6623;
t6894 = t6397 * t6407;
t6846 = t6613 * t6618;
t6893 = t6397 * (pkin(2) * t6846 + t6497 * t6612);
t6408 = t6490 * t6635 + t6494 * t6626;
t6892 = t6399 * t6408;
t6411 = -t6490 * t6626 + t6494 * t6635;
t6891 = t6399 * t6411;
t6409 = t6491 * t6638 + t6495 * t6629;
t6890 = t6400 * t6409;
t6412 = -t6491 * t6629 + t6495 * t6638;
t6889 = t6400 * t6412;
t6410 = t6492 * t6641 + t6496 * t6632;
t6888 = t6401 * t6410;
t6413 = -t6492 * t6632 + t6496 * t6641;
t6887 = t6401 * t6413;
t6844 = t6613 * t6624;
t6886 = t6399 * (pkin(2) * t6844 + t6498 * t6612);
t6842 = t6613 * t6627;
t6885 = t6400 * (pkin(2) * t6842 + t6499 * t6612);
t6840 = t6613 * t6630;
t6884 = t6401 * (pkin(2) * t6840 + t6500 * t6612);
t6445 = -t6618 * t6837 + t6832;
t6879 = t6445 * t6622;
t6459 = -t6624 * t6827 + t6810;
t6878 = t6459 * t6634;
t6822 = t6627 * t6628;
t6460 = -t6612 * t6822 + t6806;
t6877 = t6460 * t6637;
t6816 = t6630 * t6631;
t6461 = -t6612 * t6816 + t6802;
t6876 = t6461 * t6640;
t6530 = t6573 + pkin(5);
t6867 = t6530 * t6612;
t6542 = t6579 + pkin(5);
t6866 = t6542 * t6612;
t6546 = t6581 + pkin(5);
t6865 = t6546 * t6612;
t6550 = t6583 + pkin(5);
t6864 = t6550 * t6612;
t6863 = (t6613 + 0.1e1) * (t6613 - 0.1e1);
t6859 = t6612 * t6623;
t6852 = t6612 * t6635;
t6850 = t6612 * t6638;
t6848 = t6612 * t6641;
t6654 = 0.1e1 / pkin(2);
t6847 = t6612 * t6654;
t6794 = 0.2e1 * pkin(2) * (t6599 - 0.1e1 / 0.2e1);
t6769 = pkin(6) - t6929;
t6446 = t6727 - t6861;
t6417 = -t6446 * t6620 + t6621 * t6829;
t6321 = t6493 * t6417 - (t6446 * t6623 + t6620 * t6831) * t6489 + g(3) * (t6612 * t6835 + t6846);
t6764 = t6321 * t6903;
t6674 = t6449 * t6618 + t6620 * t6860;
t6322 = -t6493 * t6674 - t6489 * ((t6618 * t6845 + t6860) * t6623 + t6618 * t6833) - g(3) * t6445;
t6763 = t6322 * t6903;
t6673 = t6465 * t6624 + t6626 * t6853;
t6323 = -t6494 * t6673 - ((t6624 * t6843 + t6853) * t6635 + t6624 * t6823) * t6490 - g(3) * t6459;
t6762 = t6323 * t6901;
t6462 = t6723 - t6858;
t6418 = -t6462 * t6626 + t6633 * t6807;
t6324 = t6418 * t6494 - (t6462 * t6635 + t6626 * t6809) * t6490 + g(3) * (t6612 * t6825 + t6844);
t6761 = t6324 * t6901;
t6463 = t6720 - t6857;
t6419 = -t6463 * t6629 + t6636 * t6803;
t6325 = t6419 * t6495 - t6491 * (t6463 * t6638 + t6629 * t6805) + g(3) * (t6612 * t6819 + t6842);
t6760 = t6325 * t6900;
t6464 = t6718 - t6855;
t6420 = -t6464 * t6632 + t6639 * t6799;
t6326 = t6420 * t6496 - t6492 * (t6464 * t6641 + t6632 * t6801) + g(3) * (t6612 * t6813 + t6840);
t6759 = t6326 * t6899;
t6672 = t6466 * t6627 + t6629 * t6851;
t6327 = -t6672 * t6495 - t6491 * ((t6613 * t6822 + t6851) * t6638 + t6627 * t6817) - g(3) * t6460;
t6758 = t6327 * t6900;
t6671 = t6467 * t6630 + t6632 * t6849;
t6328 = -t6671 * t6496 - t6492 * ((t6613 * t6816 + t6849) * t6641 + t6630 * t6811) - g(3) * t6461;
t6757 = t6328 * t6899;
t6528 = (t6599 - 0.1e1) * pkin(6);
t6726 = t6530 * t6830;
t6728 = t6530 * t6837;
t6733 = t6622 * t6798;
t6756 = (-t6619 * t6733 * t6863 + (t6528 * t6943 + t6613 * t6726 + t6576 + t6769) * t6933 - ((-t6599 * t6574 + t6971) * t6622 - t6613 * t6728) * pkin(6)) * t6902;
t6755 = t6338 * t6902;
t6717 = t6542 * t6808;
t6724 = t6542 * t6827;
t6732 = t6634 * t6797;
t6754 = (-t6625 * t6732 * t6863 + (t6528 * t6942 + t6613 * t6717 + t6588 + t6769) * t6932 - ((-t6599 * t6580 + t6970) * t6634 - t6613 * t6724) * pkin(6)) * t6897;
t6716 = t6546 * t6804;
t6721 = t6546 * t6856;
t6731 = t6637 * t6796;
t6753 = (-t6628 * t6731 * t6863 + (t6528 * t6941 + t6613 * t6716 + t6589 + t6769) * t6931 - ((-t6599 * t6582 + t6969) * t6637 - t6613 * t6721) * pkin(6)) * t6896;
t6715 = t6550 * t6800;
t6730 = t6640 * t6795;
t6736 = t6550 * t6854;
t6752 = (-t6631 * t6730 * t6863 + (t6528 * t6940 + t6613 * t6715 + t6590 + t6769) * t6930 - ((-t6599 * t6584 + t6968) * t6640 - t6613 * t6736) * pkin(6)) * t6898;
t6751 = t6342 * t6897;
t6750 = t6343 * t6896;
t6749 = t6344 * t6898;
t6748 = t6601 * t6915;
t6747 = t6604 * t6914;
t6746 = t6607 * t6913;
t6745 = t6610 * t6912;
t6744 = t6447 * t6861;
t6743 = t6448 * t6861;
t6742 = t6453 * t6858;
t6741 = t6454 * t6857;
t6740 = t6455 * t6855;
t6739 = t6456 * t6858;
t6738 = t6457 * t6857;
t6737 = t6458 * t6855;
t6735 = t6632 * t6864;
t6734 = t6550 * t6848;
t6706 = t6447 * t6785;
t6704 = t6453 * t6784;
t6703 = t6454 * t6783;
t6702 = t6455 * t6782;
t6690 = t6710 * t6448;
t6689 = t6709 * t6456;
t6688 = t6708 * t6457;
t6687 = t6707 * t6458;
t6678 = t6710 * t6845;
t6677 = t6709 * t6843;
t6676 = t6708 * t6841;
t6675 = t6707 * t6839;
t6531 = 0.2e1 * t6574 + pkin(1);
t6670 = t6531 * t6623 + t6620 * t6867;
t6543 = 0.2e1 * t6580 + pkin(1);
t6669 = t6543 * t6635 + t6626 * t6866;
t6547 = 0.2e1 * t6582 + pkin(1);
t6668 = t6547 * t6638 + t6629 * t6865;
t6551 = 0.2e1 * t6584 + pkin(1);
t6667 = t6551 * t6641 + t6735;
t6666 = t6533 * t6623 + t6620 * t6728;
t6665 = t6553 * t6635 + t6626 * t6724;
t6664 = t6554 * t6638 + t6629 * t6721;
t6663 = t6555 * t6641 + t6631 * t6735;
t6651 = koppelP(1,1);
t6650 = koppelP(2,1);
t6649 = koppelP(3,1);
t6648 = koppelP(4,1);
t6647 = koppelP(1,2);
t6646 = koppelP(2,2);
t6645 = koppelP(3,2);
t6644 = koppelP(4,2);
t6642 = xP(4);
t6598 = cos(t6642);
t6597 = sin(t6642);
t6502 = g(1) * t6598 + g(2) * t6597;
t6501 = g(1) * t6597 - g(2) * t6598;
t6488 = -t6597 * t6647 + t6598 * t6651;
t6487 = -t6597 * t6646 + t6598 * t6650;
t6486 = -t6597 * t6645 + t6598 * t6649;
t6485 = -t6597 * t6644 + t6598 * t6648;
t6484 = t6597 * t6651 + t6598 * t6647;
t6483 = t6597 * t6650 + t6598 * t6646;
t6482 = t6597 * t6649 + t6598 * t6645;
t6481 = t6597 * t6648 + t6598 * t6644;
t6436 = t6551 * t6632 - t6734;
t6435 = -t6546 * t6850 + t6547 * t6629;
t6434 = -t6542 * t6852 + t6543 * t6626;
t6433 = -t6530 * t6859 + t6531 * t6620;
t6425 = t6555 * t6632 - t6631 * t6734;
t6424 = t6554 * t6629 - t6638 * t6721;
t6423 = t6553 * t6626 - t6635 * t6724;
t6421 = t6533 * t6620 - t6623 * t6728;
t6416 = pkin(6) * t6964 + t6551 * t6775 + t6611 * t6795;
t6415 = pkin(6) * t6965 + t6547 * t6777 + t6608 * t6796;
t6414 = pkin(6) * t6966 + t6543 * t6779 + t6605 * t6797;
t6405 = pkin(6) * t6967 + t6531 * t6781 + t6602 * t6798;
t6384 = (pkin(2) * t6876 + t6613 * t6968) * t6639 - t6964 * t6855;
t6383 = (pkin(2) * t6877 + t6613 * t6969) * t6636 - t6965 * t6857;
t6382 = (pkin(2) * t6878 + t6613 * t6970) * t6633 - t6966 * t6858;
t6381 = -t6467 * t6492 + t6473 * t6496;
t6380 = t6472 * t6496 - t6476 * t6492;
t6379 = -t6466 * t6491 + t6471 * t6495;
t6378 = t6470 * t6495 - t6475 * t6491;
t6377 = -t6465 * t6490 + t6469 * t6494;
t6376 = t6468 * t6494 - t6474 * t6490;
t6375 = (pkin(2) * t6879 + t6613 * t6971) * t6621 - t6967 * t6861;
t6374 = -t6449 * t6489 + t6451 * t6493;
t6373 = t6450 * t6493 - t6452 * t6489;
t6372 = -(t6715 + (t6940 - 0.1e1) * t6924) * t6930 + (t6613 * t6730 - (t6526 + t6864) * pkin(6)) * t6631;
t6371 = -(t6716 + (t6941 - 0.1e1) * t6924) * t6931 + (t6613 * t6731 - (t6525 + t6865) * pkin(6)) * t6628;
t6370 = -(t6717 + (t6942 - 0.1e1) * t6924) * t6932 + (t6613 * t6732 - (t6524 + t6866) * pkin(6)) * t6625;
t6369 = -(t6726 + (t6943 - 0.1e1) * t6924) * t6933 + (t6613 * t6733 - (t6523 + t6867) * pkin(6)) * t6619;
t6356 = (t6473 * t6639 - t6630 * t6848) * t6496 + t6420 * t6492;
t6355 = -t6496 * (t6473 * t6630 + t6639 * t6848) + t6492 * t6671;
t6354 = t6495 * (t6471 * t6636 - t6627 * t6850) + t6419 * t6491;
t6353 = -t6495 * (t6471 * t6627 + t6636 * t6850) + t6491 * t6672;
t6352 = t6494 * (t6469 * t6633 - t6624 * t6852) + t6490 * t6418;
t6351 = -t6494 * (t6469 * t6624 + t6633 * t6852) + t6490 * t6673;
t6350 = (-t6549 * t6863 + t6609 * t6794) * t6631 + (-pkin(6) * t6876 + t6510 * t6849) * t6613;
t6349 = (-t6545 * t6863 + t6606 * t6794) * t6628 + (-pkin(6) * t6877 + t6509 * t6851) * t6613;
t6348 = (-t6541 * t6863 + t6603 * t6794) * t6625 + (-pkin(6) * t6878 + t6508 * t6853) * t6613;
t6347 = (t6451 * t6621 - t6618 * t6859) * t6493 + t6489 * t6417;
t6346 = -t6493 * (t6451 * t6618 + t6621 * t6859) + t6489 * t6674;
t6345 = (-t6529 * t6863 + t6600 * t6794) * t6619 + (-pkin(6) * t6879 + t6507 * t6860) * t6613;
t6336 = t6455 * t6584 + t6458 * t6872 + (t6455 * t6801 - t6737) * pkin(2);
t6335 = t6454 * t6582 + t6457 * t6873 + (t6454 * t6805 - t6738) * pkin(2);
t6334 = t6453 * t6580 + t6456 * t6874 + (t6453 * t6809 - t6739) * pkin(2);
t6333 = -t6458 * t6584 + t6455 * t6872 + (-t6458 * t6801 - t6740) * pkin(2);
t6332 = -t6457 * t6582 + t6454 * t6873 + (-t6457 * t6805 - t6741) * pkin(2);
t6331 = -t6456 * t6580 + t6453 * t6874 + (-t6456 * t6809 - t6742) * pkin(2);
t6330 = t6447 * t6574 + t6448 * t6875 + (t6447 * t6831 - t6743) * pkin(2);
t6329 = -t6448 * t6574 + t6447 * t6875 + (-t6448 * t6831 - t6744) * pkin(2);
t6320 = -t6350 * t6632 + t6384 * t6641;
t6319 = -t6349 * t6629 + t6383 * t6638;
t6318 = -t6348 * t6626 + t6382 * t6635;
t6317 = t6350 * t6641 + t6384 * t6632;
t6316 = t6349 * t6638 + t6383 * t6629;
t6315 = t6348 * t6635 + t6382 * t6626;
t6314 = -t6345 * t6620 + t6375 * t6623;
t6313 = t6345 * t6623 + t6375 * t6620;
t6312 = (t6702 * t6972 + t6687) * t6611 + ((t6436 * t6570 + t6566 * t6667) * t6930 - t6455 * t6675) * t6640 + (t6425 * t6570 + t6566 * t6663 - t6702) * pkin(6);
t6311 = (t6703 * t6972 + t6688) * t6608 + ((t6435 * t6569 + t6565 * t6668) * t6931 - t6454 * t6676) * t6637 + (t6424 * t6569 + t6565 * t6664 - t6703) * pkin(6);
t6310 = (t6704 * t6972 + t6689) * t6605 + ((t6434 * t6568 + t6564 * t6669) * t6932 - t6453 * t6677) * t6634 + (t6423 * t6568 + t6564 * t6665 - t6704) * pkin(6);
t6309 = t6980 + ((t6566 * t6436 - t6570 * t6667) * t6930 + t6687 * t6839) * t6640 + (t6566 * t6425 - t6570 * t6663 + t6699) * pkin(6);
t6308 = t6979 + ((t6565 * t6435 - t6569 * t6668) * t6931 + t6688 * t6841) * t6637 + (t6565 * t6424 - t6569 * t6664 + t6700) * pkin(6);
t6307 = t6978 + ((t6564 * t6434 - t6568 * t6669) * t6932 + t6689 * t6843) * t6634 + (t6564 * t6423 - t6568 * t6665 + t6701) * pkin(6);
t6306 = (t6706 * t6972 + t6690) * t6602 + ((t6433 * t6567 + t6563 * t6670) * t6933 - t6447 * t6678) * t6622 + (t6421 * t6567 + t6563 * t6666 - t6706) * pkin(6);
t6305 = t6977 + ((t6563 * t6433 - t6567 * t6670) * t6933 + t6690 * t6845) * t6622 + (t6563 * t6421 - t6567 * t6666 + t6705) * pkin(6);
t6304 = (t6333 * t6488 - t6336 * t6484) * t6401;
t6303 = (t6332 * t6487 - t6335 * t6483) * t6400;
t6302 = (t6331 * t6486 - t6334 * t6482) * t6399;
t6301 = -t6976 * t6455 + t6944 * t6458 + t6740 * t6590;
t6300 = -t6975 * t6454 + t6945 * t6457 + t6741 * t6589;
t6299 = -t6974 * t6453 + t6946 * t6456 + t6742 * t6588;
t6298 = t6944 * t6455 + t6976 * t6458 - t6737 * t6590;
t6297 = t6945 * t6454 + t6975 * t6457 - t6738 * t6589;
t6296 = t6946 * t6453 + t6974 * t6456 - t6739 * t6588;
t6295 = (t6329 * t6485 - t6330 * t6481) * t6397;
t6294 = -t6973 * t6447 + t6947 * t6448 + t6744 * t6576;
t6293 = t6947 * t6447 + t6973 * t6448 - t6743 * t6576;
t6292 = (-t6483 * (-t6979 + ((-t6454 * t6547 + t6457 * t6865) * t6931 - t6457 * t6676) * t6637 + (-t6454 * t6554 + (t6721 - t6783) * t6457) * pkin(6)) * t6612 * t6390 + ((t6371 * t6638 + t6415 * t6629) * t6569 + (-t6371 * t6629 + t6415 * t6638) * t6565) * t6487 * t6612 / (t6441 + t6612 * t6791 - pkin(1) * (pkin(2) * t6857 + t6525))) * t6654 * t6607;
t6291 = (-(-t6980 + ((-t6455 * t6551 + t6458 * t6864) * t6930 - t6458 * t6675) * t6640 + (-t6455 * t6555 + (t6736 - t6782) * t6458) * pkin(6)) * t6484 * t6612 * t6392 + ((t6372 * t6641 + t6416 * t6632) * t6570 + t6566 * (-t6372 * t6632 + t6416 * t6641)) * t6488 * t6612 / (t6439 + t6612 * t6790 - pkin(1) * (pkin(2) * t6855 + t6526))) * t6654 * t6610;
t6290 = (-t6612 * (-t6978 + ((-t6453 * t6543 + t6456 * t6866) * t6932 - t6456 * t6677) * t6634 + (-t6453 * t6553 + (t6724 - t6784) * t6456) * pkin(6)) * t6482 * t6388 + t6486 * t6612 * ((t6370 * t6635 + t6414 * t6626) * t6568 + (-t6370 * t6626 + t6414 * t6635) * t6564) / (t6440 + t6612 * t6792 - pkin(1) * (pkin(2) * t6858 + t6524))) * t6654 * t6604;
t6289 = (-t6481 * t6612 * (-t6977 + ((-t6447 * t6531 + t6448 * t6867) * t6933 - t6448 * t6678) * t6622 + (-t6447 * t6533 + (t6728 - t6785) * t6448) * pkin(6)) * t6385 + ((t6369 * t6623 + t6405 * t6620) * t6567 + (-t6369 * t6620 + t6405 * t6623) * t6563) * t6612 * t6485 / (t6437 + t6612 * t6793 - pkin(1) * (pkin(2) * t6861 + t6523))) * t6654 * t6601;
t6288 = ((-t6315 * t6564 + t6318 * t6568) * t6482 - t6486 * (t6315 * t6568 + t6318 * t6564)) * t6901;
t6287 = (t6484 * (-t6317 * t6566 + t6320 * t6570) - (t6317 * t6570 + t6320 * t6566) * t6488) * t6899;
t6286 = (t6483 * (-t6316 * t6565 + t6319 * t6569) - t6487 * (t6316 * t6569 + t6319 * t6565)) * t6900;
t6285 = (t6481 * (-t6313 * t6563 + t6314 * t6567) - t6485 * (t6313 * t6567 + t6314 * t6563)) * t6903;
t1 = [0, -t6330 * t6895 - t6334 * t6892 - t6335 * t6890 - t6336 * t6888, -t6330 * t6894 - t6334 * t6891 - t6335 * t6889 - t6336 * t6887, 0, 0, 0, 0, 0, -(t6301 * t6905 + t6336 * t6381) * t6401 - (t6300 * t6907 + t6335 * t6379) * t6400 - (t6299 * t6909 + t6334 * t6377) * t6399 - (t6294 * t6911 + t6330 * t6374) * t6397, -(t6301 * t6904 + t6336 * t6380) * t6401 - (t6300 * t6906 + t6335 * t6378) * t6400 - (t6299 * t6908 + t6334 * t6376) * t6399 - (t6294 * t6910 + t6330 * t6373) * t6397, 0, 0, 0, 0, 0, -(-t6301 * t6360 + t6336 * t6356) * t6401 - (-t6300 * t6359 + t6335 * t6354) * t6400 - (-t6299 * t6358 + t6334 * t6352) * t6399 - (-t6294 * t6357 + t6330 * t6347) * t6397 + (-t6305 * t6763 - t6307 * t6762 - t6308 * t6758 - t6309 * t6757) * t6847, -(t6301 * t6745 + t6336 * t6355) * t6401 - (t6300 * t6746 + t6335 * t6353) * t6400 - (t6299 * t6747 + t6334 * t6351) * t6399 - (t6294 * t6748 + t6330 * t6346) * t6397 + (-t6305 * t6764 - t6307 * t6761 - t6308 * t6760 - t6309 * t6759) * t6847, 0, 0, 0, -t6501 * t6597 - t6502 * t6598; 0, -t6329 * t6895 - t6331 * t6892 - t6332 * t6890 - t6333 * t6888, -t6329 * t6894 - t6331 * t6891 - t6332 * t6889 - t6333 * t6887, 0, 0, 0, 0, 0, -(t6298 * t6905 + t6333 * t6381) * t6401 - (t6297 * t6907 + t6332 * t6379) * t6400 - (t6296 * t6909 + t6331 * t6377) * t6399 - (t6293 * t6911 + t6329 * t6374) * t6397, -(t6298 * t6904 + t6333 * t6380) * t6401 - (t6297 * t6906 + t6332 * t6378) * t6400 - (t6296 * t6908 + t6331 * t6376) * t6399 - (t6293 * t6910 + t6329 * t6373) * t6397, 0, 0, 0, 0, 0, -(-t6298 * t6360 + t6333 * t6356) * t6401 - (-t6297 * t6359 + t6332 * t6354) * t6400 - (-t6296 * t6358 + t6331 * t6352) * t6399 - (-t6293 * t6357 + t6329 * t6347) * t6397 + (t6306 * t6763 + t6310 * t6762 + t6311 * t6758 + t6312 * t6757) * t6847, -(t6298 * t6745 + t6333 * t6355) * t6401 - (t6297 * t6746 + t6332 * t6353) * t6400 - (t6296 * t6747 + t6331 * t6351) * t6399 - (t6293 * t6748 + t6329 * t6346) * t6397 + (t6306 * t6764 + t6310 * t6761 + t6311 * t6760 + t6312 * t6759) * t6847, 0, 0, 0, t6501 * t6598 - t6502 * t6597; 0, t6406 * t6893 + t6408 * t6886 + t6409 * t6885 + t6410 * t6884, t6407 * t6893 + t6411 * t6886 + t6412 * t6885 + t6413 * t6884, 0, 0, 0, 0, 0, t6361 * t6755 + t6363 * t6751 + t6365 * t6750 + t6367 * t6749 + t6374 * t6893 + t6377 * t6886 + t6379 * t6885 + t6381 * t6884, t6362 * t6755 + t6364 * t6751 + t6366 * t6750 + t6368 * t6749 + t6373 * t6893 + t6376 * t6886 + t6378 * t6885 + t6380 * t6884, 0, 0, 0, 0, 0, -t6357 * t6919 - t6358 * t6918 - t6359 * t6917 - t6360 * t6916 + t6347 * t6893 + t6352 * t6886 + t6354 * t6885 + t6356 * t6884 + (t6322 * t6756 + t6323 * t6754 + t6327 * t6753 + t6328 * t6752) * t6654, t6355 * t6884 + t6745 * t6916 + t6353 * t6885 + t6746 * t6917 + t6351 * t6886 + t6747 * t6918 + t6346 * t6893 + t6748 * t6919 + (t6321 * t6756 + t6324 * t6754 + t6325 * t6753 + t6326 * t6752) * t6654, 0, 0, 0, -g(3); 0, -t6295 * t6406 - t6302 * t6408 - t6303 * t6409 - t6304 * t6410, -t6295 * t6407 - t6302 * t6411 - t6303 * t6412 - t6304 * t6413, 0, 0, 0, 0, 0, t6285 * t6361 + t6286 * t6365 + t6287 * t6367 + t6288 * t6363 - t6295 * t6374 - t6302 * t6377 - t6303 * t6379 - t6304 * t6381, t6285 * t6362 + t6286 * t6366 + t6287 * t6368 + t6288 * t6364 - t6295 * t6373 - t6302 * t6376 - t6303 * t6378 - t6304 * t6380, 0, 0, 0, 0, 0, -t6285 * t6357 * t6621 - t6286 * t6359 * t6636 - t6287 * t6360 * t6639 - t6288 * t6358 * t6633 + t6289 * t6322 + t6290 * t6323 + t6291 * t6328 + t6292 * t6327 - t6295 * t6347 - t6302 * t6352 - t6303 * t6354 - t6304 * t6356, t6285 * t6915 + t6286 * t6913 + t6287 * t6912 + t6288 * t6914 + t6289 * t6321 + t6290 * t6324 + t6291 * t6326 + t6292 * t6325 - t6295 * t6346 - t6302 * t6351 - t6303 * t6353 - t6304 * t6355, 0, t6501, t6502, 0;];
tau_reg  = t1;
