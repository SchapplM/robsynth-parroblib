% Calculate Gravitation load for parallel robot
% P4RRRRR10V1G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4,alpha2,d1,d2,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [4x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 13:17
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(6,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: pkin has to be [6x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V1G1A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 11:48:26
% EndTime: 2020-08-07 11:48:34
% DurationCPUTime: 8.16s
% Computational Cost: add. (3143->486), mult. (6741->809), div. (120->17), fcn. (5742->36), ass. (0->366)
t3976 = cos(pkin(3));
t3962 = t3976 ^ 2;
t4201 = t3962 * pkin(6);
t4244 = m(2) + m(3);
t3975 = sin(pkin(3));
t4167 = t3975 * t3976;
t4003 = cos(qJ(3,1));
t4004 = cos(qJ(2,1));
t3994 = sin(qJ(3,1));
t3995 = sin(qJ(2,1));
t4144 = t3995 * t4004;
t4084 = t3994 * t4144;
t4204 = pkin(2) * t4003;
t4133 = t3975 * t4204;
t4162 = t3975 * t3994;
t3972 = t4003 ^ 2;
t4208 = pkin(2) * t3972;
t3950 = t3995 * pkin(6);
t4230 = t3950 + pkin(1);
t4243 = (t4003 * t4230 + t4004 * t4208) * t3976 - t4084 * t4133 + pkin(6) * (t4004 - 0.1e1) * (t4004 + 0.1e1) * t4162;
t4000 = cos(qJ(3,2));
t4001 = cos(qJ(2,2));
t3991 = sin(qJ(3,2));
t3992 = sin(qJ(2,2));
t4146 = t3992 * t4001;
t4086 = t3991 * t4146;
t4205 = pkin(2) * t4000;
t4134 = t3975 * t4205;
t4163 = t3975 * t3991;
t3969 = t4000 ^ 2;
t4209 = pkin(2) * t3969;
t3949 = t3992 * pkin(6);
t4231 = t3949 + pkin(1);
t4242 = (t4000 * t4231 + t4001 * t4209) * t3976 - t4086 * t4134 + pkin(6) * (t4001 - 0.1e1) * (t4001 + 0.1e1) * t4163;
t3997 = cos(qJ(3,3));
t3998 = cos(qJ(2,3));
t3988 = sin(qJ(3,3));
t3989 = sin(qJ(2,3));
t4148 = t3989 * t3998;
t4088 = t3988 * t4148;
t4206 = pkin(2) * t3997;
t4135 = t3975 * t4206;
t4164 = t3975 * t3988;
t3966 = t3997 ^ 2;
t4210 = pkin(2) * t3966;
t3948 = t3989 * pkin(6);
t4232 = t3948 + pkin(1);
t4241 = (t3997 * t4232 + t3998 * t4210) * t3976 - t4088 * t4135 + pkin(6) * (t3998 - 0.1e1) * (t3998 + 0.1e1) * t4164;
t3984 = cos(qJ(3,4));
t3985 = cos(qJ(2,4));
t3981 = sin(qJ(3,4));
t3982 = sin(qJ(2,4));
t4152 = t3982 * t3985;
t4090 = t3981 * t4152;
t4207 = pkin(2) * t3984;
t4136 = t3975 * t4207;
t4166 = t3975 * t3981;
t3963 = t3984 ^ 2;
t4211 = pkin(2) * t3963;
t3941 = t3982 * pkin(6);
t4233 = t3941 + pkin(1);
t4240 = (t3984 * t4233 + t3985 * t4211) * t3976 - t4090 * t4136 + pkin(6) * (t3985 - 0.1e1) * (t3985 + 0.1e1) * t4166;
t4239 = -0.2e1 * pkin(6);
t4238 = 0.2e1 * pkin(6);
t4197 = t3994 * pkin(2);
t3929 = pkin(1) * t4197;
t4139 = t4003 * t4004;
t4117 = t3995 * t4204;
t3893 = -t4004 * pkin(6) + t4117;
t4176 = t3893 * t3976;
t3833 = 0.1e1 / (pkin(1) * t4176 + (-t3929 + (pkin(2) * t4139 + t3950) * pkin(5)) * t3975);
t4198 = t3991 * pkin(2);
t3928 = pkin(1) * t4198;
t4141 = t4000 * t4001;
t4119 = t3992 * t4205;
t3892 = -t4001 * pkin(6) + t4119;
t4177 = t3892 * t3976;
t3832 = 0.1e1 / (pkin(1) * t4177 + (-t3928 + (pkin(2) * t4141 + t3949) * pkin(5)) * t3975);
t4199 = t3988 * pkin(2);
t3927 = pkin(1) * t4199;
t4143 = t3997 * t3998;
t4121 = t3989 * t4206;
t3891 = -t3998 * pkin(6) + t4121;
t4178 = t3891 * t3976;
t3831 = 0.1e1 / (pkin(1) * t4178 + (-t3927 + (pkin(2) * t4143 + t3948) * pkin(5)) * t3975);
t4200 = t3981 * pkin(2);
t3926 = pkin(1) * t4200;
t4151 = t3984 * t3985;
t4123 = t3982 * t4207;
t3890 = -t3985 * pkin(6) + t4123;
t4179 = t3890 * t3976;
t3830 = 0.1e1 / (pkin(1) * t4179 + (-t3926 + (pkin(2) * t4151 + t3941) * pkin(5)) * t3975);
t4237 = pkin(1) * t3982;
t4236 = pkin(1) * t3989;
t4235 = pkin(1) * t3992;
t4234 = pkin(1) * t3995;
t4202 = g(3) * t3976;
t3980 = legFrame(1,3);
t3934 = sin(t3980);
t3938 = cos(t3980);
t3996 = sin(qJ(1,1));
t4005 = cos(qJ(1,1));
t3866 = t3934 * t3996 - t4005 * t3938;
t4020 = pkin(6) ^ 2;
t4021 = pkin(2) ^ 2;
t4075 = t3972 * t4021 - t4020;
t4229 = t4075 * t3866;
t3979 = legFrame(2,3);
t3933 = sin(t3979);
t3937 = cos(t3979);
t3993 = sin(qJ(1,2));
t4002 = cos(qJ(1,2));
t3865 = t3933 * t3993 - t4002 * t3937;
t4076 = t3969 * t4021 - t4020;
t4228 = t4076 * t3865;
t3978 = legFrame(3,3);
t3932 = sin(t3978);
t3936 = cos(t3978);
t3990 = sin(qJ(1,3));
t3999 = cos(qJ(1,3));
t3864 = t3932 * t3990 - t3999 * t3936;
t4077 = t3966 * t4021 - t4020;
t4227 = t4077 * t3864;
t3977 = legFrame(4,3);
t3931 = sin(t3977);
t3935 = cos(t3977);
t3983 = sin(qJ(1,4));
t3986 = cos(qJ(1,4));
t3862 = t3931 * t3983 - t3986 * t3935;
t4078 = t3963 * t4021 - t4020;
t4226 = t4078 * t3862;
t3965 = t3985 ^ 2;
t3899 = (t3965 - 0.2e1) * t4200 - pkin(5);
t3909 = t3981 * pkin(5) + pkin(2);
t4082 = t3909 - 0.2e1 * t4211;
t4217 = (-pkin(6) * t4090 - t3899 * t3984) * t4167 + t4151 * t4201 + (t4082 * t3962 - t3909 + t4211) * t3982;
t3968 = t3998 ^ 2;
t3903 = (t3968 - 0.2e1) * t4199 - pkin(5);
t3913 = t3988 * pkin(5) + pkin(2);
t4081 = t3913 - 0.2e1 * t4210;
t4216 = (-pkin(6) * t4088 - t3903 * t3997) * t4167 + t4143 * t4201 + (t4081 * t3962 - t3913 + t4210) * t3989;
t3971 = t4001 ^ 2;
t3904 = (t3971 - 0.2e1) * t4198 - pkin(5);
t3916 = t3991 * pkin(5) + pkin(2);
t4080 = t3916 - 0.2e1 * t4209;
t4215 = (-pkin(6) * t4086 - t3904 * t4000) * t4167 + t4141 * t4201 + (t4080 * t3962 - t3916 + t4209) * t3992;
t3974 = t4004 ^ 2;
t3905 = (t3974 - 0.2e1) * t4197 - pkin(5);
t3919 = t3994 * pkin(5) + pkin(2);
t4079 = t3919 - 0.2e1 * t4208;
t4214 = (-pkin(6) * t4084 - t3905 * t4003) * t4167 + t4139 * t4201 + (t4079 * t3962 - t3919 + t4208) * t3995;
t4213 = (t3962 - 0.1e1) * t4238;
t4212 = pkin(1) * t3976;
t4203 = g(3) * t3975;
t4192 = mrSges(3,2) * t3975;
t3882 = -t3931 * g(1) + t3935 * g(2);
t3886 = t3935 * g(1) + t3931 * g(2);
t3834 = t3983 * t3882 + t3986 * t3886;
t3835 = t3882 * t3986 - t3983 * t3886;
t3895 = -t3984 * mrSges(3,1) + t3981 * mrSges(3,2) - mrSges(2,1);
t3987 = mrSges(3,3) - mrSges(2,2);
t3906 = t3987 * t4203;
t4062 = t3835 * t3976 + t4203;
t4150 = t3985 * t3834;
t4157 = t3976 * t3982;
t3810 = -t3982 * t3906 + (-t3835 * t4157 - t4150) * t3987 + (-t3982 * t3834 + t4062 * t3985) * t3895;
t3964 = 0.1e1 / t3984;
t4191 = t3810 * t3964;
t3883 = -t3932 * g(1) + t3936 * g(2);
t3887 = t3936 * g(1) + t3932 * g(2);
t3836 = t3990 * t3883 + t3999 * t3887;
t3839 = t3883 * t3999 - t3990 * t3887;
t3900 = -t3997 * mrSges(3,1) + t3988 * mrSges(3,2) - mrSges(2,1);
t4061 = t3839 * t3976 + t4203;
t4142 = t3998 * t3836;
t4156 = t3976 * t3989;
t3811 = -t3989 * t3906 + (-t3839 * t4156 - t4142) * t3987 + (-t3989 * t3836 + t4061 * t3998) * t3900;
t3967 = 0.1e1 / t3997;
t4190 = t3811 * t3967;
t3884 = -t3933 * g(1) + t3937 * g(2);
t3888 = t3937 * g(1) + t3933 * g(2);
t3837 = t3993 * t3884 + t4002 * t3888;
t3840 = t3884 * t4002 - t3993 * t3888;
t3901 = -t4000 * mrSges(3,1) + t3991 * mrSges(3,2) - mrSges(2,1);
t4060 = t3840 * t3976 + t4203;
t4140 = t4001 * t3837;
t4155 = t3976 * t3992;
t3812 = -t3992 * t3906 + (-t3840 * t4155 - t4140) * t3987 + (-t3992 * t3837 + t4060 * t4001) * t3901;
t3970 = 0.1e1 / t4000;
t4189 = t3812 * t3970;
t3885 = -t3934 * g(1) + t3938 * g(2);
t3889 = t3938 * g(1) + t3934 * g(2);
t3838 = t3996 * t3885 + t4005 * t3889;
t3841 = t3885 * t4005 - t3996 * t3889;
t3902 = -t4003 * mrSges(3,1) + t3994 * mrSges(3,2) - mrSges(2,1);
t4059 = t3841 * t3976 + t4203;
t4138 = t4004 * t3838;
t4154 = t3976 * t3995;
t3813 = -t3995 * t3906 + (-t3841 * t4154 - t4138) * t3987 + (-t3995 * t3838 + t4059 * t4004) * t3902;
t3973 = 0.1e1 / t4003;
t4188 = t3813 * t3973;
t3925 = pkin(6) * t4212;
t4165 = t3975 * t3985;
t4171 = t3975 * (-pkin(5) * t3941 + t3926);
t4187 = 0.1e1 / ((pkin(1) * t4157 + pkin(5) * t4165) * t4207 - t3985 * t3925 - t4171) * t3964;
t4161 = t3975 * t3998;
t4170 = t3975 * (-pkin(5) * t3948 + t3927);
t4186 = 0.1e1 / ((pkin(1) * t4156 + pkin(5) * t4161) * t4206 - t3998 * t3925 - t4170) * t3967;
t4160 = t3975 * t4001;
t4169 = t3975 * (-pkin(5) * t3949 + t3928);
t4185 = 0.1e1 / ((pkin(1) * t4155 + pkin(5) * t4160) * t4205 - t4001 * t3925 - t4169) * t3970;
t4159 = t3975 * t4004;
t4168 = t3975 * (-pkin(5) * t3950 + t3929);
t4184 = 0.1e1 / ((pkin(1) * t4154 + pkin(5) * t4159) * t4204 - t4004 * t3925 - t4168) * t3973;
t3910 = pkin(5) + t4200;
t4175 = t3910 * t3975;
t3914 = pkin(5) + t4199;
t4174 = t3914 * t3975;
t3917 = pkin(5) + t4198;
t4173 = t3917 * t3975;
t3920 = pkin(5) + t4197;
t4172 = t3920 * t3975;
t4022 = 0.1e1 / pkin(2);
t4158 = t3975 * t4022;
t4153 = t3981 * t3985;
t4149 = t3988 * t3998;
t4147 = t3991 * t4001;
t4145 = t3994 * t4004;
t4137 = mrSges(3,2) * t4202;
t4132 = t3976 * t4207;
t4131 = t3976 * t4206;
t4130 = t3976 * t4205;
t4129 = t3976 * t4204;
t4116 = t4244 * pkin(5) + mrSges(2,3);
t3912 = pkin(6) + t4237;
t3922 = pkin(6) + t4236;
t3923 = pkin(6) + t4235;
t3924 = pkin(6) + t4234;
t4026 = t4062 * t3982 + t4150;
t3800 = ((t3835 * t3975 - t4202) * mrSges(3,1) + t4026 * mrSges(3,2)) * t3984 + t3981 * (t4026 * mrSges(3,1) - t3835 * t4192 + t4137);
t4111 = t3800 / ((-pkin(5) * t4136 + t3925) * t3985 - t4123 * t4212 + t4171) * t3964;
t4025 = t4061 * t3989 + t4142;
t3807 = ((t3839 * t3975 - t4202) * mrSges(3,1) + t4025 * mrSges(3,2)) * t3997 + t3988 * (t4025 * mrSges(3,1) - t3839 * t4192 + t4137);
t4110 = t3807 / ((-pkin(5) * t4135 + t3925) * t3998 - t4121 * t4212 + t4170) * t3967;
t4024 = t4060 * t3992 + t4140;
t3808 = ((t3840 * t3975 - t4202) * mrSges(3,1) + t4024 * mrSges(3,2)) * t4000 + t3991 * (t4024 * mrSges(3,1) - t3840 * t4192 + t4137);
t4109 = t3808 / ((-pkin(5) * t4134 + t3925) * t4001 - t4119 * t4212 + t4169) * t3970;
t4023 = t4059 * t3995 + t4138;
t3809 = ((t3841 * t3975 - t4202) * mrSges(3,1) + t4023 * mrSges(3,2)) * t4003 + t3994 * (t4023 * mrSges(3,1) - t3841 * t4192 + t4137);
t4108 = t3809 / ((-pkin(5) * t4133 + t3925) * t4004 - t4117 * t4212 + t4168) * t3973;
t4107 = t3862 * t4166;
t3863 = t3931 * t3986 + t3983 * t3935;
t4106 = t3863 * t4166;
t4105 = t3864 * t4164;
t4104 = t3865 * t4163;
t4103 = t3866 * t4162;
t3867 = t3932 * t3999 + t3990 * t3936;
t4102 = t3867 * t4164;
t3868 = t3933 * t4002 + t3993 * t3937;
t4101 = t3868 * t4163;
t3869 = t3934 * t4005 + t3996 * t3938;
t4100 = t3869 * t4162;
t4099 = (t3976 + 0.1e1) * (t3976 - 0.1e1) * t4021;
t4098 = t3986 * t4175;
t4097 = t3999 * t4174;
t4096 = t4002 * t4173;
t4095 = t4005 * t4172;
t4094 = t3976 * t4165;
t4093 = t3976 * t4161;
t4092 = t3976 * t4160;
t4091 = t3976 * t4159;
t4089 = t3983 * t4175;
t4087 = t3990 * t4174;
t4085 = t3993 * t4173;
t4083 = t3996 * t4172;
t4074 = t3862 * t4132;
t4073 = t3863 * t4132;
t4072 = t3864 * t4131;
t4071 = t3865 * t4130;
t4070 = t3866 * t4129;
t4069 = t3867 * t4131;
t4068 = t3868 * t4130;
t4067 = t3869 * t4129;
t4058 = t4078 * t3863;
t4057 = t4077 * t3867;
t4056 = t4076 * t3868;
t4055 = t4075 * t3869;
t4046 = -(t3982 * t3895 + t3987 * t3985) * t3976 - (mrSges(3,1) * t3981 + mrSges(3,2) * t3984 + t4116) * t3975 + mrSges(1,2);
t4045 = -(t3989 * t3900 + t3987 * t3998) * t3976 - (mrSges(3,1) * t3988 + mrSges(3,2) * t3997 + t4116) * t3975 + mrSges(1,2);
t4044 = -(t3992 * t3901 + t3987 * t4001) * t3976 - (mrSges(3,1) * t3991 + mrSges(3,2) * t4000 + t4116) * t3975 + mrSges(1,2);
t4043 = -(t3995 * t3902 + t3987 * t4004) * t3976 - (mrSges(3,1) * t3994 + mrSges(3,2) * t4003 + t4116) * t3975 + mrSges(1,2);
t3911 = 0.2e1 * t3941 + pkin(1);
t4042 = t3911 * t3986 + t4089;
t3915 = 0.2e1 * t3948 + pkin(1);
t4041 = t3915 * t3999 + t4087;
t3918 = 0.2e1 * t3949 + pkin(1);
t4040 = t3918 * t4002 + t4085;
t3921 = 0.2e1 * t3950 + pkin(1);
t4039 = t3921 * t4005 + t4083;
t3907 = t4244 * pkin(1) + mrSges(1,1);
t4038 = t3895 * t3985 - t3982 * t3987 - t3907;
t4037 = t3900 * t3998 - t3987 * t3989 - t3907;
t4036 = t3901 * t4001 - t3987 * t3992 - t3907;
t4035 = t3902 * t4004 - t3987 * t3995 - t3907;
t4034 = t3912 * t3986 + t3982 * t4089;
t4033 = t3922 * t3999 + t3989 * t4087;
t4032 = t3923 * t4002 + t3992 * t4085;
t4031 = t3924 * t4005 + t3995 * t4083;
t4019 = koppelP(1,1);
t4018 = koppelP(2,1);
t4017 = koppelP(3,1);
t4016 = koppelP(4,1);
t4015 = koppelP(1,2);
t4014 = koppelP(2,2);
t4013 = koppelP(3,2);
t4012 = koppelP(4,2);
t4011 = mrSges(4,1);
t4010 = mrSges(4,2);
t4009 = xP(4);
t3961 = cos(t4009);
t3960 = sin(t4009);
t3881 = -t3960 * t4015 + t3961 * t4019;
t3880 = -t3960 * t4014 + t3961 * t4018;
t3879 = -t3960 * t4013 + t3961 * t4017;
t3878 = -t3960 * t4012 + t3961 * t4016;
t3877 = -t3960 * t4019 - t3961 * t4015;
t3876 = -t3960 * t4018 - t3961 * t4014;
t3875 = -t3960 * t4017 - t3961 * t4013;
t3874 = -t3960 * t4016 - t3961 * t4012;
t3853 = t3996 * t3921 - t4095;
t3852 = t3993 * t3918 - t4096;
t3851 = t3990 * t3915 - t4097;
t3850 = t3983 * t3911 - t4098;
t3846 = t3996 * t3924 - t3995 * t4095;
t3845 = t3993 * t3923 - t3992 * t4096;
t3844 = t3990 * t3922 - t3989 * t4097;
t3842 = t3983 * t3912 - t3982 * t4098;
t3821 = t3866 * t3950 + t3869 * t4176 + (t3866 * t4139 - t4100) * pkin(2);
t3820 = t3865 * t3949 + t3868 * t4177 + (t3865 * t4141 - t4101) * pkin(2);
t3819 = t3864 * t3948 + t3867 * t4178 + (t3864 * t4143 - t4102) * pkin(2);
t3818 = -t3869 * t3950 + t3866 * t4176 + (-t3869 * t4139 - t4103) * pkin(2);
t3817 = -t3868 * t3949 + t3865 * t4177 + (-t3868 * t4141 - t4104) * pkin(2);
t3816 = -t3867 * t3948 + t3864 * t4178 + (-t3867 * t4143 - t4105) * pkin(2);
t3815 = t3862 * t3941 + t3863 * t4179 + (t3862 * t4151 - t4106) * pkin(2);
t3814 = -t3863 * t3941 + t3862 * t4179 + (-t3863 * t4151 - t4107) * pkin(2);
t3806 = (t4070 * t4238 + t4055) * t3974 + ((t3853 * t3938 + t4039 * t3934) * t4204 - t4154 * t4229) * t4004 + (t3846 * t3938 + t3934 * t4031 - t4070) * pkin(6);
t3805 = (t4071 * t4238 + t4056) * t3971 + ((t3852 * t3937 + t4040 * t3933) * t4205 - t4155 * t4228) * t4001 + (t3845 * t3937 + t3933 * t4032 - t4071) * pkin(6);
t3804 = (t4072 * t4238 + t4057) * t3968 + ((t3851 * t3936 + t4041 * t3932) * t4206 - t4156 * t4227) * t3998 + (t3844 * t3936 + t3932 * t4033 - t4072) * pkin(6);
t3803 = (t4067 * t4239 + t4229) * t3974 + ((t3934 * t3853 - t4039 * t3938) * t4204 + t4055 * t4154) * t4004 + (t3934 * t3846 - t4031 * t3938 + t4067) * pkin(6);
t3802 = (t4068 * t4239 + t4228) * t3971 + ((t3933 * t3852 - t4040 * t3937) * t4205 + t4056 * t4155) * t4001 + (t3933 * t3845 - t4032 * t3937 + t4068) * pkin(6);
t3801 = (t4069 * t4239 + t4227) * t3968 + ((t3932 * t3851 - t4041 * t3936) * t4206 + t4057 * t4156) * t3998 + (t3932 * t3844 - t4033 * t3936 + t4069) * pkin(6);
t3799 = (t4074 * t4238 + t4058) * t3965 + ((t3850 * t3935 + t4042 * t3931) * t4207 - t4157 * t4226) * t3985 + (t3842 * t3935 + t3931 * t4034 - t4074) * pkin(6);
t3798 = (t4073 * t4239 + t4226) * t3965 + ((t3931 * t3850 - t4042 * t3935) * t4207 + t4058 * t4157) * t3985 + (t3931 * t3842 - t4034 * t3935 + t4073) * pkin(6);
t3797 = (-t4035 * t3996 + t4043 * t4005) * t3889 + (t4043 * t3996 + t4035 * t4005) * t3885;
t3796 = (-t4036 * t3993 + t4044 * t4002) * t3888 + (t4044 * t3993 + t4036 * t4002) * t3884;
t3795 = (-t4037 * t3990 + t4045 * t3999) * t3887 + (t4045 * t3990 + t4037 * t3999) * t3883;
t3794 = -t4243 * t3866 + t4214 * t3869 + t4103 * t4234;
t3793 = -t4242 * t3865 + t4215 * t3868 + t4104 * t4235;
t3792 = -t4241 * t3864 + t4216 * t3867 + t4105 * t4236;
t3791 = t4214 * t3866 + t4243 * t3869 - t4100 * t4234;
t3790 = t4215 * t3865 + t4242 * t3868 - t4101 * t4235;
t3789 = t4216 * t3864 + t4241 * t3867 - t4102 * t4236;
t3788 = (-t4038 * t3983 + t4046 * t3986) * t3886 + (t4046 * t3983 + t4038 * t3986) * t3882;
t3787 = -t4240 * t3862 + t4217 * t3863 + t4107 * t4237;
t3786 = t4217 * t3862 + t4240 * t3863 - t4106 * t4237;
t1 = [-g(1) * m(4) - (t3794 * t4188 + t3821 * t3797) * t3833 - (t3793 * t4189 + t3820 * t3796) * t3832 - (t3792 * t4190 + t3819 * t3795) * t3831 - (t3787 * t4191 + t3815 * t3788) * t3830 + (t3798 * t4111 + t3801 * t4110 + t3802 * t4109 + t3803 * t4108) * t4158; -g(2) * m(4) - (t3791 * t4188 + t3818 * t3797) * t3833 - (t3790 * t4189 + t3817 * t3796) * t3832 - (t3789 * t4190 + t3816 * t3795) * t3831 - (t3786 * t4191 + t3814 * t3788) * t3830 + (-t3799 * t4111 - t3804 * t4110 - t3805 * t4109 - t3806 * t4108) * t4158; (t3893 * t3975 + t3976 * t4197) * t3833 * t3797 + ((pkin(6) * t4091 + t3905 * t3962 + pkin(5) + (-t3974 + 0.1e1) * t4197) * t4003 - t4230 * t4145 + (t4079 * t4167 + t4145 * t4201) * t3995) * t3813 * t4184 + (t3892 * t3975 + t3976 * t4198) * t3832 * t3796 + ((pkin(6) * t4092 + t3904 * t3962 + pkin(5) + (-t3971 + 0.1e1) * t4198) * t4000 - t4231 * t4147 + (t4080 * t4167 + t4147 * t4201) * t3992) * t3812 * t4185 + (t3891 * t3975 + t3976 * t4199) * t3831 * t3795 + ((pkin(6) * t4093 + t3903 * t3962 + pkin(5) + (-t3968 + 0.1e1) * t4199) * t3997 - t4232 * t4149 + (t4081 * t4167 + t4149 * t4201) * t3989) * t3811 * t4186 + (t3890 * t3975 + t3976 * t4200) * t3830 * t3788 + ((pkin(6) * t4094 + t3899 * t3962 + pkin(5) + (-t3965 + 0.1e1) * t4200) * t3984 - t4233 * t4153 + (t4082 * t4167 + t4153 * t4201) * t3982) * t3810 * t4187 - g(3) * m(4) + ((-t3972 * t4099 * t4144 + (t3920 * t4091 + t3974 * t4213 + t3924 - t4201) * t4204 - ((-t3962 * t3950 + t4230) * t4004 - t4154 * t4172) * pkin(6)) * t3809 * t4184 + (-t3969 * t4099 * t4146 + (t3917 * t4092 + t3971 * t4213 + t3923 - t4201) * t4205 - ((-t3962 * t3949 + t4231) * t4001 - t4155 * t4173) * pkin(6)) * t3808 * t4185 + (-t3966 * t4099 * t4148 + (t3914 * t4093 + t3968 * t4213 + t3922 - t4201) * t4206 - ((-t3962 * t3948 + t4232) * t3998 - t4156 * t4174) * pkin(6)) * t3807 * t4186 + (-t3963 * t4099 * t4152 + (t3910 * t4094 + t3965 * t4213 + t3912 - t4201) * t4207 - ((-t3962 * t3941 + t4233) * t3985 - t4157 * t4175) * pkin(6)) * t3800 * t4187) * t4022; -(-g(1) * t4011 - g(2) * t4010) * t3960 + t3961 * (g(1) * t4010 - g(2) * t4011) - ((t3818 * t3881 + t3821 * t3877) * t3797 + (t3791 * t3881 + t3794 * t3877) * t4188) * t3833 - ((t3817 * t3880 + t3820 * t3876) * t3796 + (t3790 * t3880 + t3793 * t3876) * t4189) * t3832 - ((t3816 * t3879 + t3819 * t3875) * t3795 + (t3789 * t3879 + t3792 * t3875) * t4190) * t3831 - ((t3814 * t3878 + t3815 * t3874) * t3788 + (t3786 * t3878 + t3787 * t3874) * t4191) * t3830 + ((t3803 * t3877 - t3806 * t3881) * t4108 + (t3802 * t3876 - t3805 * t3880) * t4109 + (t3801 * t3875 - t3804 * t3879) * t4110 + (t3798 * t3874 - t3799 * t3878) * t4111) * t4158;];
taugX  = t1;
