% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [21x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4RRRRR10V2G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [4x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(21,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [21 1]), ...
  'P4RRRRR10V2G1A0_coriolisvec_para_pf_mdp: MDP has to be [21x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 16:32:28
% EndTime: 2020-08-07 17:14:06
% DurationCPUTime: 2624.64s
% Computational Cost: add. (31782016->3989), mult. (60986576->6223), div. (388588->58), fcn. (44969040->36), ass. (0->2314)
t16506 = -4 * pkin(2);
t14960 = cos(qJ(2,1));
t14867 = t14960 * pkin(2);
t14951 = sin(qJ(2,1));
t14965 = pkin(8) + pkin(7);
t16128 = t14965 * t14951;
t14662 = t16128 + t14867;
t14950 = sin(qJ(3,1));
t14855 = t14950 * pkin(3);
t16571 = t14867 + pkin(1);
t14531 = -pkin(6) * t14662 + t16571 * t14855;
t14925 = cos(pkin(4));
t16453 = pkin(1) * t14925;
t14800 = t14965 * t14960;
t16442 = pkin(2) * t14951;
t16545 = -t14800 + t16442;
t14594 = t16545 * t16453;
t14924 = sin(pkin(4));
t14959 = cos(qJ(3,1));
t14643 = pkin(1) + t14662;
t16443 = pkin(2) * t14950;
t14586 = t14643 * t16443;
t16212 = t14924 * t14960;
t15904 = pkin(6) * t16212;
t16193 = t14925 * t14951;
t15959 = pkin(1) * t16193;
t14604 = t15904 + t15959;
t14916 = t14959 ^ 2;
t16413 = t14916 * pkin(3);
t16022 = t14924 * t14586 - t14604 * t16413;
t14366 = 0.1e1 / ((-t14531 * t14924 + t14594) * t14959 - t16022);
t14957 = cos(qJ(2,2));
t14863 = t14957 * pkin(2);
t14948 = sin(qJ(2,2));
t16129 = t14965 * t14948;
t14661 = t16129 + t14863;
t14947 = sin(qJ(3,2));
t14854 = t14947 * pkin(3);
t16572 = t14863 + pkin(1);
t14530 = -pkin(6) * t14661 + t16572 * t14854;
t14799 = t14965 * t14957;
t16444 = pkin(2) * t14948;
t16546 = -t14799 + t16444;
t14593 = t16546 * t16453;
t14956 = cos(qJ(3,2));
t14642 = pkin(1) + t14661;
t16445 = pkin(2) * t14947;
t14585 = t14642 * t16445;
t16214 = t14924 * t14957;
t15905 = pkin(6) * t16214;
t16195 = t14925 * t14948;
t15960 = pkin(1) * t16195;
t14606 = t15905 + t15960;
t14912 = t14956 ^ 2;
t16414 = t14912 * pkin(3);
t16023 = t14924 * t14585 - t14606 * t16414;
t14368 = 0.1e1 / ((-t14530 * t14924 + t14593) * t14956 - t16023);
t14954 = cos(qJ(2,3));
t14859 = t14954 * pkin(2);
t14945 = sin(qJ(2,3));
t16130 = t14965 * t14945;
t14660 = t16130 + t14859;
t14944 = sin(qJ(3,3));
t14853 = t14944 * pkin(3);
t16573 = t14859 + pkin(1);
t14529 = -pkin(6) * t14660 + t16573 * t14853;
t14798 = t14965 * t14954;
t16446 = pkin(2) * t14945;
t16547 = -t14798 + t16446;
t14592 = t16547 * t16453;
t14953 = cos(qJ(3,3));
t14641 = pkin(1) + t14660;
t16447 = pkin(2) * t14944;
t14584 = t14641 * t16447;
t16216 = t14924 * t14954;
t15906 = pkin(6) * t16216;
t16197 = t14925 * t14945;
t15961 = pkin(1) * t16197;
t14605 = t15906 + t15961;
t14908 = t14953 ^ 2;
t16415 = t14908 * pkin(3);
t16024 = t14924 * t14584 - t14605 * t16415;
t14367 = 0.1e1 / ((-t14529 * t14924 + t14592) * t14953 - t16024);
t14942 = cos(qJ(2,4));
t14846 = t14942 * pkin(2);
t14939 = sin(qJ(2,4));
t16131 = t14965 * t14939;
t14656 = t16131 + t14846;
t14938 = sin(qJ(3,4));
t14842 = t14938 * pkin(3);
t16574 = t14846 + pkin(1);
t14527 = -pkin(6) * t14656 + t16574 * t14842;
t14762 = t14965 * t14942;
t16448 = pkin(2) * t14939;
t16551 = t14762 - t16448;
t14587 = t16551 * t16453;
t14941 = cos(qJ(3,4));
t14640 = pkin(1) + t14656;
t16449 = pkin(2) * t14938;
t14577 = t14640 * t16449;
t16224 = t14924 * t14942;
t15891 = pkin(6) * t16224;
t16201 = t14925 * t14939;
t15963 = pkin(1) * t16201;
t14591 = t15891 + t15963;
t14899 = t14941 ^ 2;
t16416 = t14899 * pkin(3);
t16025 = t14924 * t14577 - t14591 * t16416;
t14360 = 0.1e1 / ((t14527 * t14924 + t14587) * t14941 + t16025);
t16185 = t14925 * t14965;
t14731 = pkin(1) * t16185;
t15973 = pkin(2) * (t14855 - pkin(6));
t14566 = -t14924 * t15973 - t14731;
t16450 = pkin(2) * t14925;
t16007 = pkin(1) * t16450;
t16211 = t14924 * t14965;
t14632 = pkin(6) * t16211 + t16007;
t16219 = t14924 * t14950;
t15923 = pkin(3) * t16219;
t16607 = pkin(1) * t15923 - t14632 * t14951;
t16588 = t14959 * (t14566 * t14960 - t16607) - t16022;
t16655 = 0.1e1 / t16588;
t15974 = pkin(2) * (t14854 - pkin(6));
t14565 = -t14924 * t15974 - t14731;
t16221 = t14924 * t14947;
t15924 = pkin(3) * t16221;
t16608 = pkin(1) * t15924 - t14632 * t14948;
t16589 = t14956 * (t14565 * t14957 - t16608) - t16023;
t16654 = 0.1e1 / t16589;
t15975 = pkin(2) * (t14853 - pkin(6));
t14564 = -t14924 * t15975 - t14731;
t16223 = t14924 * t14944;
t15925 = pkin(3) * t16223;
t16609 = pkin(1) * t15925 - t14632 * t14945;
t16590 = t14953 * (t14564 * t14954 - t16609) - t16024;
t16653 = 0.1e1 / t16590;
t15976 = pkin(2) * (t14842 - pkin(6));
t14563 = -t14924 * t15976 - t14731;
t16226 = t14924 * t14938;
t15926 = pkin(3) * t16226;
t16610 = pkin(1) * t15926 - t14632 * t14939;
t16591 = t14941 * (t14563 * t14942 - t16610) - t16025;
t16652 = 0.1e1 / t16591;
t15159 = t16551 * t14924;
t16202 = t14925 * t14938;
t16651 = -pkin(3) * t16202 + t15159;
t14896 = t14925 ^ 2;
t16464 = t14896 - 0.1e1;
t14994 = 0.1e1 / pkin(3);
t14964 = xDP(1);
t14967 = xP(4);
t14888 = sin(t14967);
t14889 = cos(t14967);
t14976 = koppelP(4,2);
t14980 = koppelP(4,1);
t15268 = t14888 * t14980 + t14889 * t14976;
t16467 = xDP(4);
t14543 = t15268 * t16467 - t14964;
t14963 = xDP(2);
t15267 = t14888 * t14976 - t14889 * t14980;
t14544 = -t15267 * t16467 + t14963;
t14940 = sin(qJ(1,4));
t14943 = cos(qJ(1,4));
t14435 = t14543 * t14943 - t14544 * t14940;
t14436 = t14543 * t14940 + t14544 * t14943;
t14934 = legFrame(4,3);
t14832 = sin(t14934);
t14836 = cos(t14934);
t14315 = -t14435 * t14836 + t14832 * t14436;
t14966 = 0.2e1 * t14965;
t16167 = t14939 * t14966;
t14720 = pkin(1) + t16167;
t14848 = pkin(1) * t14939;
t14757 = t14848 + pkin(7);
t14732 = pkin(8) + t14757;
t14752 = t14842 + pkin(6);
t14844 = t14941 * pkin(3);
t14753 = t14844 + pkin(2);
t14901 = t14942 ^ 2;
t15288 = t14435 * t14832 + t14436 * t14836;
t15103 = t15288 * t14753;
t14962 = xDP(3);
t16243 = (t14925 + 0.1e1) * (t14925 - 0.1e1);
t15721 = t14965 * t16243;
t15357 = -0.2e1 * t14962 * t15721;
t15565 = t16464 * t14962;
t16186 = t14925 * t14962;
t15676 = t14924 * t16186;
t14902 = pkin(2) + t14965;
t14903 = pkin(2) - t14965;
t16278 = (t14844 + t14902) * (t14844 + t14903);
t15741 = t14939 * t16278;
t15984 = 0.2e1 * t16185;
t16168 = t14939 * t14962;
t16227 = t14924 * t14925;
t16233 = t14896 * t14965;
t14887 = pkin(1) * t14965;
t16238 = t14887 * t14962;
t16267 = t14753 * t14962;
t16630 = t14752 * t15288;
t14137 = ((-t14315 * t16278 + t15103 * t15984) * t14924 + t14753 * t15357) * t14901 + (t16238 + (-t15288 * t16227 + t15565) * t15741 + (-t14315 * t14720 * t14924 + (-t14896 * t15288 + t15288 - t15676) * t14752) * t14753) * t14942 - ((t14752 * t16168 + t15103) * t14925 + t14315 * t14732) * t16211 - (t14939 * t16630 - t16267) * t16233 - t14732 * t16267 + t16131 * t16630;
t16438 = pkin(6) * t14941;
t14685 = -t16438 + t16449;
t16170 = t14939 * t14941;
t15680 = t14925 * t16170;
t16269 = t14753 * t14924;
t15027 = (t14685 * t16269 + t14941 * t14731) * t14942 - pkin(1) * t14753 * t15680;
t16268 = t14753 * t14938;
t15968 = pkin(1) * t16268;
t14387 = (t14685 * t16131 + t15968) * t14924 + t15027;
t16367 = t14137 / t14387;
t15830 = t14994 * t16367;
t14097 = pkin(6) * t15830;
t14572 = t14832 * t14943 + t14836 * t14940;
t14573 = -t14832 * t14940 + t14836 * t14943;
t14458 = pkin(2) * t14573 + t14572 * t16185;
t14460 = t14572 * t16450 - t14573 * t14965;
t16172 = t14939 * t14460;
t15284 = t14458 * t14942 - t16172;
t16174 = t14938 * t14942;
t15695 = t14924 * t16174;
t15388 = t14939 * t15695;
t15345 = pkin(3) * t15388;
t15712 = t14460 * t16226;
t16412 = t14938 * pkin(6);
t14751 = pkin(3) + t16412;
t15737 = t14751 * t16243;
t15751 = t14573 * t16226;
t16199 = t14925 * t14942;
t14788 = t14896 - 0.1e1 / 0.2e1;
t16251 = t14788 * t14939;
t14974 = pkin(6) / 0.2e1;
t14741 = t14842 + t14974;
t16489 = -0.2e1 * t14741;
t16566 = t14924 * (t14842 * t14901 + t16489);
t14259 = t14543 * ((-0.2e1 * t14572 * t16251 + t14573 * t16199) * t16416 + (-t14573 * t15345 + (pkin(1) * t14573 - t14572 * t16566 + t15284) * t14925) * t14941 - t14901 * t15712 - t14458 * t15388 + (-pkin(1) * t15751 + t14572 * t15737) * t14939 + t15712) * t16652;
t16200 = t14925 * t14941;
t14523 = (t14753 * t14939 - t14762) * pkin(1) * t16200;
t14633 = -pkin(1) * t14842 + pkin(6) * t16131;
t14719 = t16131 + pkin(1);
t15186 = -t14633 * t14941 + t14719 * t16449;
t15725 = t14901 * t16243;
t15660 = t14962 * ((-t14941 * t14762 + t14939 * (pkin(2) * t14941 - t14751 + 0.2e1 * t16416)) * t16227 - t15725 * t16268 + (-t14939 * t15721 + pkin(1)) * t16174 + ((0.2e1 * t14842 + pkin(6)) * t14896 - t14752) * t14941 + t14896 * t16449) / ((-t14685 * t14753 * t14942 - t15186) * t14924 + t14523);
t14459 = -pkin(2) * t14572 + t14573 * t16185;
t14461 = t14572 * t14965 + t14573 * t16450;
t16171 = t14939 * t14461;
t15283 = -t14459 * t14942 + t16171;
t15697 = t14461 * t16226;
t15752 = t14572 * t16226;
t15753 = t14544 * ((t14572 * t16199 + 0.2e1 * t14573 * t16251) * t16416 + (-t14572 * t15345 + (pkin(1) * t14572 + t14573 * t16566 + t15283) * t14925) * t14941 + t14901 * t15697 + t14459 * t15388 + (-pkin(1) * t15752 - t14573 * t15737) * t14939 - t15697) * t16652;
t14159 = t14259 - t15660 - t15753;
t16357 = t14159 * t14965;
t16049 = -t16357 + t14097;
t16646 = t14939 * t16049;
t14977 = koppelP(3,2);
t14981 = koppelP(3,1);
t15266 = t14888 * t14981 + t14889 * t14977;
t14539 = t15266 * t16467 - t14964;
t15265 = t14888 * t14977 - t14889 * t14981;
t14541 = -t15265 * t16467 + t14963;
t14946 = sin(qJ(1,3));
t14955 = cos(qJ(1,3));
t14437 = t14539 * t14955 - t14541 * t14946;
t14439 = t14539 * t14946 + t14541 * t14955;
t14935 = legFrame(3,3);
t14833 = sin(t14935);
t14837 = cos(t14935);
t14316 = -t14437 * t14837 + t14833 * t14439;
t16156 = t14945 * t14966;
t14727 = pkin(1) + t16156;
t14872 = pkin(1) * t14945;
t14782 = t14872 + pkin(7);
t14737 = pkin(8) + t14782;
t14765 = t14853 + pkin(6);
t14857 = t14953 * pkin(3);
t14770 = t14857 + pkin(2);
t14910 = t14954 ^ 2;
t15287 = t14437 * t14833 + t14439 * t14837;
t15102 = t15287 * t14770;
t16277 = (t14857 + t14902) * (t14857 + t14903);
t15740 = t14945 * t16277;
t16157 = t14945 * t14962;
t16258 = t14770 * t14962;
t16265 = t14765 * t14945;
t14141 = ((-t14316 * t16277 + t15102 * t15984) * t14924 + t14770 * t15357) * t14910 + (t16238 + (-t15287 * t16227 + t15565) * t15740 + (-t14316 * t14727 * t14924 + (-t14896 * t15287 + t15287 - t15676) * t14765) * t14770) * t14954 - ((t14765 * t16157 + t15102) * t14925 + t14316 * t14737) * t16211 - (t15287 * t16265 - t16258) * t16233 - t14737 * t16258 + t15287 * t14765 * t16130;
t16437 = pkin(6) * t14953;
t14687 = -t16437 + t16447;
t16159 = t14945 * t14953;
t15679 = t14925 * t16159;
t16260 = t14770 * t14924;
t15026 = (t14687 * t16260 + t14953 * t14731) * t14954 - pkin(1) * t14770 * t15679;
t16259 = t14770 * t14944;
t15967 = pkin(1) * t16259;
t14400 = (t14687 * t16130 + t15967) * t14924 + t15026;
t16366 = t14141 / t14400;
t14131 = t14994 * t16366;
t14124 = pkin(6) * t14131;
t14578 = t14833 * t14955 + t14837 * t14946;
t14579 = -t14833 * t14946 + t14837 * t14955;
t14468 = pkin(2) * t14579 + t14578 * t16185;
t14474 = t14578 * t16450 - t14579 * t14965;
t16161 = t14945 * t14474;
t15282 = t14468 * t14954 - t16161;
t16163 = t14944 * t14954;
t15691 = t14924 * t16163;
t15386 = t14945 * t15691;
t15344 = pkin(3) * t15386;
t16411 = t14944 * pkin(6);
t14764 = pkin(3) + t16411;
t15734 = t14764 * t16243;
t15749 = t14579 * t16223;
t15755 = t14474 * t16223;
t16191 = t14925 * t14954;
t16250 = t14788 * t14945;
t14746 = t14853 + t14974;
t16567 = t14924 * (t14853 * t14910 - 0.2e1 * t14746);
t14261 = t14539 * ((-0.2e1 * t14578 * t16250 + t14579 * t16191) * t16415 + (-t14579 * t15344 + (pkin(1) * t14579 - t14578 * t16567 + t15282) * t14925) * t14953 - t14910 * t15755 - t14468 * t15386 + (-pkin(1) * t15749 + t14578 * t15734) * t14945 + t15755) * t16653;
t16192 = t14925 * t14953;
t14524 = (t14770 * t14945 - t14798) * pkin(1) * t16192;
t14637 = -pkin(1) * t14853 + pkin(6) * t16130;
t14724 = t16130 + pkin(1);
t15185 = -t14637 * t14953 + t14724 * t16447;
t15724 = t14910 * t16243;
t16116 = 0.2e1 * t16415;
t16236 = t14896 * t14944;
t15659 = t14962 * ((-t14953 * t14798 + t14945 * (pkin(2) * t14953 - t14764 + t16116)) * t16227 - t15724 * t16259 + (-t14945 * t15721 + pkin(1)) * t16163 + ((0.2e1 * t14853 + pkin(6)) * t14896 - t14765) * t14953 + pkin(2) * t16236) / ((-t14687 * t14770 * t14954 - t15185) * t14924 + t14524);
t14469 = -pkin(2) * t14578 + t14579 * t16185;
t14475 = t14578 * t14965 + t14579 * t16450;
t16160 = t14945 * t14475;
t15281 = -t14469 * t14954 + t16160;
t15693 = t14475 * t16223;
t15750 = t14578 * t16223;
t15759 = ((t14578 * t16191 + 0.2e1 * t14579 * t16250) * t16415 + (-t14578 * t15344 + (pkin(1) * t14578 + t14579 * t16567 + t15281) * t14925) * t14953 + t14910 * t15693 + t14469 * t15386 + (-pkin(1) * t15750 - t14579 * t15734) * t14945 - t15693) * t14541 * t16653;
t14209 = t14261 - t15659 - t15759;
t16344 = t14209 * t14965;
t16043 = -t16344 + t14124;
t16645 = t14945 * t16043;
t14978 = koppelP(2,2);
t14982 = koppelP(2,1);
t15264 = t14888 * t14982 + t14889 * t14978;
t14540 = t15264 * t16467 - t14964;
t15263 = t14888 * t14978 - t14889 * t14982;
t14542 = -t15263 * t16467 + t14963;
t14949 = sin(qJ(1,2));
t14958 = cos(qJ(1,2));
t14438 = t14540 * t14958 - t14542 * t14949;
t14440 = t14540 * t14949 + t14542 * t14958;
t14936 = legFrame(2,3);
t14834 = sin(t14936);
t14838 = cos(t14936);
t14317 = -t14438 * t14838 + t14834 * t14440;
t16146 = t14948 * t14966;
t14728 = pkin(1) + t16146;
t14873 = pkin(1) * t14948;
t14783 = t14873 + pkin(7);
t14738 = pkin(8) + t14783;
t14767 = t14854 + pkin(6);
t14861 = t14956 * pkin(3);
t14773 = t14861 + pkin(2);
t14914 = t14957 ^ 2;
t15286 = t14438 * t14834 + t14440 * t14838;
t15101 = t15286 * t14773;
t16276 = (t14861 + t14902) * (t14861 + t14903);
t15739 = t14948 * t16276;
t16147 = t14948 * t14962;
t16255 = t14773 * t14962;
t16263 = t14767 * t14948;
t14143 = ((-t14317 * t16276 + t15101 * t15984) * t14924 + t14773 * t15357) * t14914 + (t16238 + (-t15286 * t16227 + t15565) * t15739 + (-t14728 * t14317 * t14924 + (-t14896 * t15286 + t15286 - t15676) * t14767) * t14773) * t14957 - ((t14767 * t16147 + t15101) * t14925 + t14738 * t14317) * t16211 - (t15286 * t16263 - t16255) * t16233 - t14738 * t16255 + t15286 * t14767 * t16129;
t16436 = pkin(6) * t14956;
t14688 = -t16436 + t16445;
t16149 = t14948 * t14956;
t15678 = t14925 * t16149;
t16257 = t14773 * t14924;
t15025 = (t14688 * t16257 + t14956 * t14731) * t14957 - pkin(1) * t14773 * t15678;
t16256 = t14773 * t14947;
t15966 = pkin(1) * t16256;
t14401 = (t14688 * t16129 + t15966) * t14924 + t15025;
t16364 = t14143 / t14401;
t14135 = t14994 * t16364;
t14126 = pkin(6) * t14135;
t14580 = t14834 * t14958 + t14838 * t14949;
t14581 = -t14834 * t14949 + t14838 * t14958;
t14470 = pkin(2) * t14581 + t14580 * t16185;
t14476 = t14580 * t16450 - t14581 * t14965;
t16151 = t14948 * t14476;
t15280 = t14470 * t14957 - t16151;
t16153 = t14947 * t14957;
t15686 = t14924 * t16153;
t15384 = t14948 * t15686;
t15343 = pkin(3) * t15384;
t15689 = t14476 * t16221;
t16410 = t14947 * pkin(6);
t14766 = pkin(3) + t16410;
t15732 = t14766 * t16243;
t15747 = t14581 * t16221;
t16189 = t14925 * t14957;
t16249 = t14788 * t14948;
t14748 = t14854 + t14974;
t16568 = t14924 * (t14854 * t14914 - 0.2e1 * t14748);
t14260 = ((-0.2e1 * t14580 * t16249 + t14581 * t16189) * t16414 + (-t14581 * t15343 + (pkin(1) * t14581 - t14580 * t16568 + t15280) * t14925) * t14956 - t14914 * t15689 - t14470 * t15384 + (-pkin(1) * t15747 + t14580 * t15732) * t14948 + t15689) * t14540 * t16654;
t14471 = -pkin(2) * t14580 + t14581 * t16185;
t14477 = t14580 * t14965 + t14581 * t16450;
t16150 = t14948 * t14477;
t15279 = -t14471 * t14957 + t16150;
t15688 = t14477 * t16221;
t15748 = t14580 * t16221;
t15754 = t14542 * ((t14580 * t16189 + 0.2e1 * t14581 * t16249) * t16414 + (-t14580 * t15343 + (pkin(1) * t14580 + t14581 * t16568 + t15279) * t14925) * t14956 + t14914 * t15688 + t14471 * t15384 + (-pkin(1) * t15748 - t14581 * t15732) * t14948 - t15688) * t16654;
t16190 = t14925 * t14956;
t14525 = (t14773 * t14948 - t14799) * pkin(1) * t16190;
t14638 = -pkin(1) * t14854 + pkin(6) * t16129;
t14725 = t16129 + pkin(1);
t15184 = -t14638 * t14956 + t14725 * t16445;
t15723 = t14914 * t16243;
t16115 = 0.2e1 * t16414;
t16235 = t14896 * t14947;
t15757 = ((-t14956 * t14799 + t14948 * (pkin(2) * t14956 - t14766 + t16115)) * t16227 - t15723 * t16256 + (-t14948 * t15721 + pkin(1)) * t16153 + ((0.2e1 * t14854 + pkin(6)) * t14896 - t14767) * t14956 + pkin(2) * t16235) * t14962 / ((-t14688 * t14773 * t14957 - t15184) * t14924 + t14525);
t14208 = t14260 - t15754 - t15757;
t16351 = t14208 * t14965;
t16044 = -t16351 + t14126;
t16644 = t14948 * t16044;
t14979 = koppelP(1,2);
t14983 = koppelP(1,1);
t15262 = t14888 * t14983 + t14889 * t14979;
t14545 = t15262 * t16467 - t14964;
t15261 = t14888 * t14979 - t14889 * t14983;
t14546 = -t15261 * t16467 + t14963;
t14952 = sin(qJ(1,1));
t14961 = cos(qJ(1,1));
t14441 = t14545 * t14961 - t14546 * t14952;
t14442 = t14545 * t14952 + t14546 * t14961;
t14937 = legFrame(1,3);
t14835 = sin(t14937);
t14839 = cos(t14937);
t14318 = -t14441 * t14839 + t14835 * t14442;
t16136 = t14951 * t14966;
t14729 = pkin(1) + t16136;
t14874 = pkin(1) * t14951;
t14784 = t14874 + pkin(7);
t14739 = pkin(8) + t14784;
t14769 = t14855 + pkin(6);
t14865 = t14959 * pkin(3);
t14776 = t14865 + pkin(2);
t14918 = t14960 ^ 2;
t15285 = t14441 * t14835 + t14442 * t14839;
t15100 = t15285 * t14776;
t16275 = (t14865 + t14902) * (t14865 + t14903);
t15738 = t14951 * t16275;
t16137 = t14951 * t14962;
t16252 = t14776 * t14962;
t16261 = t14769 * t14951;
t14142 = ((-t14318 * t16275 + t15100 * t15984) * t14924 + t14776 * t15357) * t14918 + (t16238 + (-t15285 * t16227 + t15565) * t15738 + (-t14318 * t14729 * t14924 + (-t14896 * t15285 + t15285 - t15676) * t14769) * t14776) * t14960 - ((t14769 * t16137 + t15100) * t14925 + t14318 * t14739) * t16211 - (t15285 * t16261 - t16252) * t16233 - t14739 * t16252 + t15285 * t14769 * t16128;
t16435 = pkin(6) * t14959;
t14692 = t16435 - t16443;
t16139 = t14951 * t14959;
t15677 = t14925 * t16139;
t16254 = t14776 * t14924;
t15024 = (-t14692 * t16254 + t14959 * t14731) * t14960 - pkin(1) * t14776 * t15677;
t16253 = t14776 * t14950;
t15965 = pkin(1) * t16253;
t14402 = (-t14692 * t16128 + t15965) * t14924 + t15024;
t16365 = t14142 / t14402;
t14133 = t14994 * t16365;
t14125 = pkin(6) * t14133;
t14582 = t14835 * t14961 + t14839 * t14952;
t14583 = -t14835 * t14952 + t14839 * t14961;
t14472 = pkin(2) * t14583 + t14582 * t16185;
t14478 = t14582 * t16450 - t14583 * t14965;
t16141 = t14951 * t14478;
t15278 = t14472 * t14960 - t16141;
t16143 = t14950 * t14960;
t15683 = t14924 * t16143;
t15382 = t14951 * t15683;
t15342 = pkin(3) * t15382;
t15711 = t14478 * t16219;
t16409 = t14950 * pkin(6);
t14768 = pkin(3) + t16409;
t15730 = t14768 * t16243;
t15745 = t14583 * t16219;
t16187 = t14925 * t14960;
t16248 = t14788 * t14951;
t14750 = t14855 + t14974;
t16569 = t14924 * (t14855 * t14918 - 0.2e1 * t14750);
t14262 = t14545 * ((-0.2e1 * t14582 * t16248 + t14583 * t16187) * t16413 + (-t14583 * t15342 + (pkin(1) * t14583 - t14582 * t16569 + t15278) * t14925) * t14959 - t14918 * t15711 - t14472 * t15382 + (-pkin(1) * t15745 + t14582 * t15730) * t14951 + t15711) * t16655;
t16188 = t14925 * t14959;
t14526 = (t14776 * t14951 - t14800) * pkin(1) * t16188;
t14639 = -pkin(1) * t14855 + pkin(6) * t16128;
t14726 = t16128 + pkin(1);
t15183 = -t14639 * t14959 + t14726 * t16443;
t15722 = t14918 * t16243;
t16114 = 0.2e1 * t16413;
t16234 = t14896 * t14950;
t15756 = ((-t14959 * t14800 + t14951 * (pkin(2) * t14959 - t14768 + t16114)) * t16227 - t15722 * t16253 + (-t14951 * t15721 + pkin(1)) * t16143 + ((0.2e1 * t14855 + pkin(6)) * t14896 - t14769) * t14959 + pkin(2) * t16234) * t14962 / ((t14692 * t14776 * t14960 - t15183) * t14924 + t14526);
t14473 = -pkin(2) * t14582 + t14583 * t16185;
t14479 = t14582 * t14965 + t14583 * t16450;
t16140 = t14951 * t14479;
t15277 = -t14473 * t14960 + t16140;
t15710 = t14479 * t16219;
t15746 = t14582 * t16219;
t15758 = ((t14582 * t16187 + 0.2e1 * t14583 * t16248) * t16413 + (-t14582 * t15342 + (pkin(1) * t14582 + t14583 * t16569 + t15277) * t14925) * t14959 + t14918 * t15710 + t14473 * t15382 + (-pkin(1) * t15746 - t14583 * t15730) * t14951 - t15710) * t14546 * t16655;
t14210 = t14262 - t15756 - t15758;
t16338 = t14210 * t14965;
t16042 = -t16338 + t14125;
t16643 = t14951 * t16042;
t14989 = pkin(8) ^ 2;
t14990 = pkin(7) ^ 2;
t16010 = -t14990 - t14989;
t16468 = pkin(8) * pkin(7);
t16540 = 0.2e1 * t16468 - t16010;
t14098 = pkin(1) * t15830;
t16361 = t14159 * t14938;
t14145 = pkin(3) * t16361;
t14096 = pkin(7) * t15830;
t14094 = pkin(8) * t15830;
t14153 = t14159 * pkin(6);
t16046 = t14153 + t14094;
t15654 = -t14096 - t16046;
t16532 = t15654 - t14145;
t16638 = -t14939 * t16532 + t14098;
t14127 = pkin(1) * t14131;
t16347 = t14209 * t14944;
t14167 = pkin(3) * t16347;
t14122 = pkin(7) * t14131;
t14119 = pkin(8) * t14131;
t14191 = t14209 * pkin(6);
t16038 = t14191 + t14119;
t15652 = -t14122 - t16038;
t16534 = t15652 - t14167;
t16637 = -t14945 * t16534 + t14127;
t14128 = pkin(1) * t14133;
t16341 = t14210 * t14950;
t14168 = pkin(3) * t16341;
t14117 = pkin(7) * t14133;
t14116 = pkin(8) * t14133;
t14197 = t14210 * pkin(6);
t16036 = t14197 + t14116;
t15651 = -t14117 - t16036;
t16535 = t15651 - t14168;
t16636 = -t14951 * t16535 + t14128;
t14129 = pkin(1) * t14135;
t16354 = t14208 * t14947;
t14166 = pkin(3) * t16354;
t14123 = pkin(7) * t14135;
t14120 = pkin(8) * t14135;
t14186 = t14208 * pkin(6);
t16040 = t14186 + t14120;
t15653 = -t14123 - t16040;
t16533 = t15653 - t14166;
t16635 = -t14948 * t16533 + t14129;
t16585 = 0.2e1 * t14942;
t15990 = 0.2e1 * t14954;
t15989 = 0.2e1 * t14957;
t15988 = 0.2e1 * t14960;
t16462 = 0.2e1 * t14899 - 0.1e1;
t14304 = (pkin(2) * t14539 + t14541 * t16185) * t14954 + (t14539 * t14965 - t14541 * t16450) * t14945 + t14541 * t15925;
t14424 = t14539 * t16197 + t14541 * t14954;
t15051 = (-pkin(2) * t14541 + t14539 * t16185) * t14954 - (t14539 * t16450 + t14541 * t14965) * t14945 + t14539 * t15925;
t15142 = -t14539 * t14954 + t14541 * t16197;
t16198 = t14925 * t14944;
t16596 = -pkin(3) * t16198 - t14924 * t16547;
t14244 = -((t14424 * t14946 + t14955 * t15142) * t14837 + (t14424 * t14955 - t14946 * t15142) * t14833 + t14924 * t16157) * t16415 + ((t14304 * t14955 + t14946 * t15051) * t14837 + (-t14304 * t14946 + t14955 * t15051) * t14833 + t16596 * t14962) * t14953 + (t14924 * t15287 - t16186) * t16447;
t16337 = t14244 * t16653;
t15785 = t14945 * t16337;
t15423 = t14924 * t15785;
t16629 = t14765 * t15423;
t14305 = (pkin(2) * t14540 + t14542 * t16185) * t14957 + (t14540 * t14965 - t14542 * t16450) * t14948 + t14542 * t15924;
t14425 = t14540 * t16195 + t14542 * t14957;
t15050 = (-pkin(2) * t14542 + t14540 * t16185) * t14957 - (t14540 * t16450 + t14542 * t14965) * t14948 + t14540 * t15924;
t15141 = -t14540 * t14957 + t14542 * t16195;
t16196 = t14925 * t14947;
t16597 = -pkin(3) * t16196 - t14924 * t16546;
t14245 = -((t14425 * t14949 + t14958 * t15141) * t14838 + (t14425 * t14958 - t14949 * t15141) * t14834 + t14924 * t16147) * t16414 + ((t14305 * t14958 + t14949 * t15050) * t14838 + (-t14305 * t14949 + t14958 * t15050) * t14834 + t16597 * t14962) * t14956 + (t14924 * t15286 - t16186) * t16445;
t16336 = t14245 * t16654;
t15774 = t14948 * t16336;
t15413 = t14924 * t15774;
t16628 = t14767 * t15413;
t14306 = (pkin(2) * t14545 + t14546 * t16185) * t14960 + (t14545 * t14965 - t14546 * t16450) * t14951 + t14546 * t15923;
t14426 = t14545 * t16193 + t14546 * t14960;
t15048 = (-pkin(2) * t14546 + t14545 * t16185) * t14960 - (t14545 * t16450 + t14546 * t14965) * t14951 + t14545 * t15923;
t15139 = -t14545 * t14960 + t14546 * t16193;
t16194 = t14925 * t14950;
t16598 = -pkin(3) * t16194 - t14924 * t16545;
t14246 = -((t14426 * t14952 + t14961 * t15139) * t14839 + (t14426 * t14961 - t14952 * t15139) * t14835 + t14924 * t16137) * t16413 + ((t14306 * t14961 + t14952 * t15048) * t14839 + (-t14952 * t14306 + t14961 * t15048) * t14835 + t16598 * t14962) * t14959 + (t14924 * t15285 - t16186) * t16443;
t16335 = t14246 * t16655;
t15763 = t14951 * t16335;
t15403 = t14924 * t15763;
t16627 = t14769 * t15403;
t14303 = (pkin(2) * t14543 + t14544 * t16185) * t14942 + (t14543 * t14965 - t14544 * t16450) * t14939 + t14544 * t15926;
t14423 = t14543 * t16201 + t14544 * t14942;
t15049 = (-pkin(2) * t14544 + t14543 * t16185) * t14942 - (t14543 * t16450 + t14544 * t14965) * t14939 + t14543 * t15926;
t15140 = -t14543 * t14942 + t14544 * t16201;
t14240 = -((t14423 * t14940 + t14943 * t15140) * t14836 + (t14423 * t14943 - t14940 * t15140) * t14832 + t14924 * t16168) * t16416 + ((t14303 * t14943 + t14940 * t15049) * t14836 + (-t14303 * t14940 + t14943 * t15049) * t14832 + t16651 * t14962) * t14941 + (t14924 * t15288 - t16186) * t16449;
t14223 = t14240 * t16652;
t15238 = t15830 * t14223;
t14826 = t14901 - 0.2e1;
t16247 = t14826 * t14896;
t15536 = -t14901 + t16247;
t15500 = t15536 + 0.1e1;
t16626 = t15500 * t15238;
t15675 = t14938 * t16367;
t13988 = t16357 - t15675;
t14157 = pkin(1) * t14159;
t15801 = t14942 * t14223;
t14213 = t14924 * t15801;
t14219 = t14925 * t14223;
t14528 = t14942 * t15976 - t14633;
t14362 = 0.1e1 / ((t14528 * t14924 + t14587) * t14941 + t16025);
t14849 = pkin(1) * t14901;
t14850 = pkin(1) * t14942;
t14972 = -pkin(7) / 0.2e1;
t14892 = t14972 - pkin(8) / 0.2e1;
t14988 = -0.2e1 * pkin(1);
t16169 = t14939 * t14942;
t15799 = t14240 * t16169;
t15443 = t16652 * t15799;
t15234 = t14752 * t15443;
t15890 = pkin(2) * t16169;
t15912 = pkin(6) * t16243;
t16132 = t14965 * t14901;
t16358 = t14159 * t14942;
t16485 = -0.2e1 * t14896;
t13809 = (((-(-t14846 + t14849 + t14988 - t16167) * t14219 - t14159 * t14640) * t14924 - t15443 * t15912) * t14899 + ((t14213 * t14751 + t16367) * t14925 + (-((t14892 * t14901 + t14732) * t16485 - t16132 - t16464 * t15890 + t14732) * t14223 + (-t15891 + (-t14965 - t14848) * t14925) * t14159) * t14938) * t14941 + ((t14849 - t14719) * t14219 + pkin(2) * t16358 + (t13988 - t14097) * t14939 + t14157) * t14924 + t14896 * t15234 + (t14850 + pkin(2)) * t14925 * t15830 - t15234) * t14362 * t16367;
t14699 = t14939 * t14762;
t14845 = t14901 * pkin(2);
t16015 = t14699 + t14845;
t14608 = -pkin(2) + t16015;
t15892 = t14939 * t16416;
t16021 = t14941 * t16551 - 0.2e1 * t15892;
t16606 = -t14751 + t16416;
t15055 = ((t14826 * t14842 - pkin(6)) * t14941 + t14938 * t14608) * t16227 - (t14751 * t14939 + t16021) * t14896 - t16606 * t14939;
t16166 = t14941 * t14942;
t14730 = pkin(3) * t16166;
t15650 = t14730 + t14656;
t16242 = (t14942 + 0.1e1) * (t14942 - 0.1e1);
t15091 = -(-t14965 * t16242 + (t16574 + t14730) * t14939) * t16226 + (pkin(1) + t15650) * t16200;
t14288 = t14572 * t15091 + t14573 * t15055;
t15118 = t14288 * t15268;
t14287 = -t14572 * t15055 + t14573 * t15091;
t15119 = t14287 * t15267;
t13982 = t14096 + t14094;
t14147 = pkin(6) * t16357;
t15897 = pkin(3) * t16367;
t13991 = -t14147 + t15897;
t15803 = t14939 * t14223;
t15445 = t14924 * t15803;
t15237 = t14938 * t15445;
t14212 = pkin(3) * t15237;
t16421 = t14159 * pkin(2);
t15641 = -t14212 - t16421;
t14054 = t15641 * t14901;
t15327 = pkin(6) * t15445;
t14055 = -t15327 - t16421 / 0.2e1;
t15396 = t14924 * t15830;
t14089 = pkin(1) * t15396;
t15487 = t14939 * t15830;
t14090 = pkin(1) * t15487;
t16360 = t14159 * t14939;
t14146 = pkin(1) * t16360;
t14150 = t14153 / 0.2e1;
t14151 = pkin(2) * t14153;
t14993 = pkin(3) ^ 2;
t14154 = t14159 * t14993;
t15800 = t14965 * t14223;
t14214 = t14924 * t15800;
t15949 = pkin(2) * t14223;
t14220 = -0.2e1 * t15949;
t14221 = pkin(6) * t14223;
t14991 = pkin(6) ^ 2;
t16009 = pkin(1) ^ 2 + t14991;
t15195 = t16540 + t16009;
t14653 = 0.3e1 * t14993 + t15195;
t14654 = t14993 + t15195;
t16231 = t14902 * t14903;
t14669 = t14901 * t16231;
t14996 = pkin(2) ^ 2;
t16008 = t14996 - t14993;
t14805 = -t14991 + t16008;
t14810 = pkin(3) * t16412;
t14898 = t14941 * t14899;
t14900 = t14942 * t14901;
t15235 = t14900 * t14214;
t15133 = t14938 * t15235;
t16002 = pkin(6) * t16416;
t15323 = -t14942 * t16002 + t14577;
t16176 = t14938 * t14939;
t15696 = t14924 * t16176;
t15466 = t14159 * t15696;
t15332 = pkin(3) * t15466;
t15341 = pkin(2) * t15396;
t15805 = t14924 * t14223;
t16504 = -0.2e1 * pkin(6);
t15373 = t15805 * t16504;
t15531 = pkin(2) * t15805;
t15377 = -0.2e1 * t15531;
t15502 = -t15830 / 0.2e1;
t15515 = pkin(2) * t14699;
t14155 = t14159 * t14996;
t14923 = t14965 ^ 2;
t15544 = t14923 * t14159 + t14155;
t15574 = -0.2e1 * t15800;
t15632 = -0.2e1 * t14223;
t15633 = pkin(2) * t14221;
t15643 = t14991 / 0.3e1 - t14996 / 0.3e1 + t14993;
t15719 = t14939 * t16231;
t15806 = t14901 * t14223;
t16225 = t14924 * t14939;
t15822 = t14159 * t16225;
t16362 = t14159 * t14924;
t15954 = pkin(2) * t16362;
t15964 = pkin(1) * t16211;
t15972 = pkin(1) * t16357;
t15992 = 0.2e1 * t14941;
t14698 = -t16231 / 0.2e1;
t16016 = t14698 + t14993;
t16017 = t16231 / 0.3e1 - 0.2e1 / 0.3e1 * t14993;
t16056 = 0.2e1 * t13982;
t16057 = t14089 + t14220;
t16119 = -0.2e1 * t14887;
t16232 = t14898 * t14993;
t16363 = t14159 * t14901;
t16420 = t14159 * pkin(3);
t16374 = ((-pkin(2) * t15445 + t14150 + t14096 / 0.2e1 + t14094 / 0.2e1) * t14938 + t16420 / 0.2e1) * t14901;
t16441 = pkin(2) * t14965;
t14895 = t14925 * t14896;
t16486 = 0.3e1 * t14895;
t16488 = 0.2e1 * t14887;
t16505 = -2 * pkin(2);
t15496 = (-((t14901 - 0.4e1 / 0.3e1) * t16232 + ((-0.2e1 / 0.3e1 * t14810 + t16017) * t14901 + 0.2e1 / 0.3e1 * t15515 + 0.4e1 / 0.3e1 * t14810 + t15643) * t14941 + (0.4e1 / 0.3e1 * t16416 - 0.2e1 / 0.3e1 * t14751) * t14608) * t14223 * t16486 + (t14159 * t14826 * t16232 + ((-pkin(1) * t16421 - t14965 * t15373) * t14942 + (pkin(6) * t15377 - t15972) * t14939 + t14154 - t15544) * t14941 + (t13991 * t16169 - t14151 * t14901 + t14151 - ((t14805 - t14669) * t14939 + 0.2e1 * (t14900 - t14942) * t16441) * t15805) * t14938 + (-(t14054 + (t14157 + t16646) * t14942 + 0.4e1 * t14212 + 0.4e1 * t15327 + 0.3e1 * t16421) * t14899 + (-t15133 - t16374 - 0.2e1 * (-pkin(2) * t15487 / 0.4e1 - t14214) * t16174 + ((t14098 + t15377) * t14939 + t14150 + t13982) * t14938) * t15992 - pkin(2) * t16363 + t16049 * t16169 - 0.2e1 * t14055) * pkin(3)) * t14896 + (-(-0.3e1 * t14901 + 0.3e1) * t16232 * t14223 - 0.2e1 * ((t14089 / 0.2e1 + t14220) * t14901 + (-t15341 / 0.2e1 - (pkin(1) + 0.2e1 * t16131) * t14223) * t14942 - t15332 - (t14153 + t16056) * t16225 / 0.2e1 - t14089 + t15949) * t16416 + (-0.2e1 * (t14810 + t16016) * t15806 + (((t14146 + t16049) * t14842 + t13991) * t14924 - t14719 * pkin(2) * t15632) * t14942 - 0.4e1 * (-0.3e1 / 0.4e1 * pkin(2) * t15822 - t14221) * t14842 + (pkin(6) * t15954 - t14988 * t15800) * t14939 + t14653 * t14223) * t14941 + ((-t14159 * t15964 - 0.2e1 * t15633) * t14938 + pkin(3) * t16057) * t14901 + ((pkin(1) * t15954 + pkin(6) * t15574) * t14938 + pkin(3) * t15574) * t16169 + (0.2e1 * t15633 + (t14939 * t15544 + t15972) * t14924) * t14938 - (t13982 * t16225 + t16057) * pkin(3)) * t14925 + (-t14901 + 0.1e1) * t14154 * t14898 + (t14054 + (t16049 * t14942 - t15373) * t14939 - t15641) * t16416 + (-t14154 + (0.2e1 * t16374 + (0.2e1 * t15235 + ((-pkin(1) * t15805 + pkin(2) * t15502) * t14939 - t14214) * t16585 - t14090 + t15654) * t14938) * pkin(3)) * t14941 - t15133 * t16505 + ((t14151 - (t15719 + t16119) * t15805) * t14938 + pkin(2) * t16420) * t14901 + (((pkin(1) * t15377 - t13991) * t14939 + t14965 * t15377) * t14938 - pkin(3) * t16646) * t14942 + (-t14151 - (t14654 * t14939 + t16488) * t15805) * t14938 + 0.2e1 * t14055 * pkin(3)) / (-t14523 + (t14528 * t14941 + t15323) * t14924) * t14223;
t16173 = t14938 * t14965;
t13989 = t14159 * t16173 - t16367;
t14211 = t15445 * t16489;
t14987 = 2 * pkin(2);
t14758 = t14850 + t14987;
t14809 = t14923 + t14996;
t14986 = 3 * pkin(2);
t15809 = t14751 * t14223;
t15398 = t14608 * t15809;
t15804 = t14938 * t14223;
t15446 = t14924 * t15804;
t15485 = t14942 * t15830;
t15644 = t14923 + t16008;
t16205 = t14925 * t14159;
t15657 = (-t14223 * t15536 - t14223 - t16205) * t16232;
t15807 = t14896 * t14223;
t14973 = pkin(6) / 0.3e1;
t15945 = (t14842 + t14973) * t16448;
t15953 = pkin(2) * t16360;
t16434 = pkin(6) * t14965;
t14736 = pkin(1) * t16131;
t14813 = pkin(1) * t14846;
t16556 = -t14736 - t14813;
t15842 = (t15657 - ((t14159 * t14758 - t14211) * t14925 + (-pkin(2) * t15485 - t16638) * t14924 - ((-t14845 + (-t16131 + pkin(1)) * t14942 + t14986) * t14896 + t14608) * t14223) * t16416 + ((pkin(3) * t14751 * t14901 - t14810 + t15644 - t16556) * t15807 + (-(((t14848 - t14965) * t14842 - t16434) * t14942 + 0.3e1 * t15945) * t15805 + t14732 * t15675 + (-t14809 + t16556) * t14159) * t14925 + (-pkin(6) * t13988 * t14942 + t14752 * t15953) * t14924 - pkin(3) * t15809 * t16242) * t14941 + t14896 * t15398 + (-t14809 * t14939 - t14887 + (-t15890 + t16132) * pkin(1)) * t14925 * t15446 + t13989 * t14640 * t14924 - t15398) * t14362 * t14159;
t14376 = 0.1e1 / (-t14523 + t14924 * (t14527 * t14941 + t15323));
t16406 = t16467 ^ 2;
t15875 = t14376 * t16406;
t13760 = t15496 - t15842 + t13809 + (t15119 - t15118) * t15875;
t14030 = -t14213 - t15830;
t14060 = t14159 - t14219;
t14444 = t14572 * t14942 + t14573 * t16201;
t14295 = -t14444 * t16416 + (pkin(3) * t15751 - t15283) * t14941 + pkin(2) * t15751;
t14445 = -t14572 * t16201 + t14573 * t14942;
t14296 = -t14445 * t16416 + (-pkin(3) * t15752 - t15284) * t14941 - pkin(2) * t15752;
t14975 = -0.3e1 / 0.2e1 * pkin(2);
t15236 = t14939 * t14214;
t15831 = t14965 * t16367;
t15869 = t16464 * t14751;
t15934 = t13982 * t14842;
t16011 = t14923 + t14993;
t16117 = 0.2e1 * t16421;
t16440 = pkin(3) * t14924;
t16452 = pkin(2) * t14060;
t16560 = t14669 + t14810;
t13779 = ((-t15657 + ((-t14211 + t16117) * t14925 - (t14145 + t13982) * t16225 - ((t14975 + t16015) * t16485 + 0.2e1 * t14845 + t14720 * t14942 - pkin(2)) * t14223) * t16416 + ((0.2e1 * t15515 - t16008 + t16560) * t15807 + (-t15934 + t14159 * t14809 - (0.2e1 * t14741 * t14762 - 0.3e1 * t15945) * t15805) * t14925 + (t13989 * t16440 - t14720 * t15949) * t14942 + t15332 * t16505 - (t14736 + t16011 + t16560) * t14223) * t14941 + pkin(2) * ((t13989 * t14942 - t14938 * t15953) * t14924 - (t15159 * t16202 - t15869) * t14223)) * t14223 + (-t14295 * t15268 + t14296 * t15267) * t16406) * t14362 + (-(t14060 * t16232 - (-t14212 - 0.2e1 * t16452) * t16416 + (t14809 * t14060 + (-pkin(3) * (t14762 - 0.2e1 * t16448) * t15805 - t15831) * t14938) * t14941 - pkin(2) * t16551 * t15446) * t14159 + (-t14899 * t15236 + (-pkin(3) * t14213 + t14060 * t16173 - t16367) * t14941 + pkin(2) * t14030) * t16367) * t14360;
t14995 = 0.1e1 / pkin(3) ^ 2;
t14099 = t14137 ^ 2 / t14387 ^ 2 * t14995;
t14095 = pkin(7) * t14099;
t14337 = 0.1e1 / t16591 ^ 2;
t14222 = t14240 ^ 2 * t14337;
t15138 = t14924 * t15238;
t15083 = t15138 * t14987;
t15812 = t14939 * t14222;
t15910 = pkin(6) * t16225;
t16425 = pkin(7) * t14901;
t16484 = 0.2e1 * t14896;
t15708 = t14924 * t16199;
t16544 = pkin(6) * t15708 + t14848;
t16625 = t13760 * t16505 + (-t14758 * t14925 + t15910) * t13779 - t14222 * ((t14972 - t15890 + t16425) * t16484 + pkin(7) - 0.2e1 * t16425 + t16544) - (pkin(2) * t15812 - pkin(7) * t15138) * t16585 - t14939 * t15083 + t14095;
t14533 = t14954 * t15975 - t14637;
t14372 = 0.1e1 / ((t14533 * t14924 - t14592) * t14953 + t16024);
t14700 = t14945 * t14798;
t14858 = t14910 * pkin(2);
t16014 = t14700 + t14858;
t14615 = -pkin(2) + t16014;
t14827 = t14910 - 0.2e1;
t15889 = t14945 * t16415;
t16020 = -t14953 * t16547 - 0.2e1 * t15889;
t16605 = -t14764 + t16415;
t15054 = ((t14827 * t14853 - pkin(6)) * t14953 + t14944 * t14615) * t16227 - (t14764 * t14945 + t16020) * t14896 - t16605 * t14945;
t16135 = t14953 * t14954;
t14733 = pkin(3) * t16135;
t15649 = t14733 + t14660;
t16241 = (t14954 + 0.1e1) * (t14954 - 0.1e1);
t15090 = -(-t14965 * t16241 + (t16573 + t14733) * t14945) * t16223 + (pkin(1) + t15649) * t16192;
t14290 = t14578 * t15090 + t14579 * t15054;
t15116 = t14290 * t15266;
t14289 = -t14578 * t15054 + t14579 * t15090;
t15117 = t14289 * t15265;
t13984 = t14122 + t14119;
t14173 = pkin(6) * t16344;
t15896 = pkin(3) * t16366;
t14008 = -t14173 + t15896;
t15395 = t14924 * t14131;
t14100 = pkin(1) * t15395;
t15482 = t14945 * t14131;
t14103 = pkin(1) * t15482;
t16346 = t14209 * t14945;
t14170 = pkin(1) * t16346;
t14182 = pkin(2) * t14191;
t14192 = t14209 * t14993;
t14194 = t14209 * pkin(2);
t14204 = pkin(1) * t14209;
t14814 = pkin(3) * t16411;
t14907 = t14953 * t14908;
t14909 = t14954 * t14910;
t15782 = t14965 * t16337;
t15392 = t14924 * t15782;
t15189 = -0.2e1 * t14909 * t15392;
t15363 = 0.2e1 * t15423;
t15047 = pkin(3) * (pkin(6) * t15363 + t14194) + t15189 * t16447;
t15480 = t14954 * t14131;
t15252 = t14945 * t15480;
t16001 = pkin(6) * t16415;
t15322 = -t14954 * t16001 + t14584;
t15330 = pkin(2) * t15392;
t15338 = pkin(2) * t15480;
t15787 = t14924 * t16337;
t15530 = pkin(2) * t15787;
t15376 = -0.2e1 * t15530;
t15514 = pkin(2) * t14700;
t14193 = t14209 * t14996;
t15542 = t14923 * t14209 + t14193;
t15573 = -0.2e1 * t15782;
t15631 = -0.2e1 * t16337;
t15915 = pkin(6) * t16337;
t15636 = pkin(2) * t15915;
t15718 = t14945 * t16231;
t15788 = t14910 * t16337;
t16222 = t14924 * t14945;
t15817 = t14209 * t16222;
t15900 = pkin(3) * t16645;
t16349 = t14209 * t14924;
t15951 = pkin(2) * t16349;
t15970 = pkin(1) * t16344;
t16418 = t14209 * pkin(3);
t16004 = pkin(2) * t16418;
t16051 = 0.2e1 * t13984;
t15948 = pkin(2) * t16337;
t16055 = t14100 - 0.2e1 * t15948;
t16158 = t14945 * t14954;
t16230 = t14907 * t14993;
t15422 = t14944 * t15785;
t15215 = t14924 * t15422;
t15163 = pkin(3) * t15215;
t16370 = (-t14194 - t15163) * t14910;
t15362 = -0.2e1 * t15423;
t16373 = ((pkin(2) * t15362 - t15652) * t14944 + t16418) * t14910;
t16503 = 0.2e1 * pkin(6);
t16507 = 0.2e1 * pkin(1);
t16530 = t16051 + 0.2e1 * t14167;
t16581 = -t14910 + 0.1e1;
t16584 = 0.2e1 * t14945;
t15495 = (-((t14910 - 0.4e1 / 0.3e1) * t16230 + ((-0.2e1 / 0.3e1 * t14814 + t16017) * t14910 + 0.2e1 / 0.3e1 * t15514 + 0.4e1 / 0.3e1 * t14814 + t15643) * t14953 + (0.4e1 / 0.3e1 * t16415 - 0.2e1 / 0.3e1 * t14764) * t14615) * t16337 * t16486 + (t14209 * t14827 * t16230 - (t16370 + (t14204 + t16645) * t14954 + 0.3e1 * t14194 + 0.4e1 * t16629) * t16415 + ((-pkin(1) * t14194 - t15392 * t16504) * t14954 + (pkin(6) * t15376 - t15970) * t14945 + t14192 + (-t16373 + (t15189 + (pkin(2) * t15482 + 0.4e1 * t15392) * t14954 + (t14127 + t15376) * t16584 + t14191 + t16051) * t14944) * pkin(3) - t15542) * t14953 + ((t15423 * t16231 - t14182) * t14944 - t16004) * t14910 + ((t14008 * t14945 + 0.2e1 * t15330) * t14944 + t15900) * t14954 + (-t14805 * t15423 + t14182) * t14944 + t15047) * t14896 + (-(-0.3e1 * t14910 + 0.3e1) * t16230 * t16337 - (t14827 * t14100 + (-t15338 + (-t14191 - t16530) * t14945) * t14924 - ((t16507 + 0.4e1 * t16130) * t14954 + (0.4e1 * t14910 - 0.2e1) * pkin(2)) * t16337) * t16415 + (-0.2e1 * (t14814 + t16016) * t15788 + (((t14170 + t16043) * t14853 + t14008) * t14924 - t14724 * pkin(2) * t15631) * t14954 + (t14986 * t15817 + 0.4e1 * t15915) * t14853 + (pkin(6) * t15951 - t14988 * t15782) * t14945 + t14653 * t16337) * t14953 + ((-t14209 * t15964 - 0.2e1 * t15636) * t14944 + pkin(3) * t16055) * t14910 + ((pkin(1) * t15951 + pkin(6) * t15573) * t14944 + pkin(3) * t15573) * t16158 + (0.2e1 * t15636 + (t14945 * t15542 + t15970) * t14924) * t14944 - (t13984 * t16222 + t16055) * pkin(3)) * t14925 + t16581 * t14192 * t14907 - (-t16370 - t14194 + (-t16043 * t14954 - (t16503 + t14853) * t15787) * t14945) * t16415 + (-t14192 + (t16373 + (-pkin(2) * t15252 - t14103 + (-t14965 * t14909 + (t14965 + t14872) * t14954) * t14924 * t15631 + t15652) * t14944) * pkin(3)) * t14953 + ((t14182 - (t15718 + t16119) * t15787) * t14944 + t16004) * t14910 + (((pkin(1) * t15376 - t14008) * t14945 - 0.2e1 * t15330) * t14944 - t15900) * t14954 + (-t14182 - (t14654 * t14945 + t16488) * t15787) * t14944 - t15047) / (-t14524 + (t14533 * t14953 + t15322) * t14924) * t16337;
t16162 = t14944 * t14965;
t14003 = t14209 * t16162 - t16366;
t14875 = pkin(1) * t14910;
t14876 = pkin(1) * t14954;
t15885 = pkin(2) * t16158;
t15182 = t14910 * t14965 - t15885;
t15671 = t14944 * t16366;
t15701 = t14924 * t16191;
t16165 = t14944 * t14945;
t15816 = t14209 * t16165;
t16164 = t14944 * t14953;
t15841 = (((pkin(1) * t15816 + t14003) * t14953 - (t14876 + pkin(2)) * t14131) * t14925 + ((t15671 + t16043) * t14945 - t14204 + (t14641 * t14908 + (pkin(6) * t16164 - pkin(2)) * t14954) * t14209) * t14924 - ((-(-t14859 + t14875 + t14988 - t16156) * t16227 - t15912 * t16158) * t14908 + (t14764 * t15701 + 0.2e1 * (t14892 * t14910 + t15885 / 0.2e1 + t14737) * t16236 - (-t15182 + t14737) * t14944) * t14953 + (t14875 - t14724) * t16227 + t16464 * t14765 * t16158) * t16337) * t16366;
t14384 = 0.1e1 / (-t14524 + t14924 * (t14529 * t14953 + t15322));
t15874 = t14384 * t16406;
t13999 = t16344 - t15671;
t14215 = t14746 * t15363;
t14785 = t14876 + t14987;
t15791 = t14764 * t16337;
t15400 = t14615 * t15791;
t15786 = t14944 * t16337;
t15424 = t14924 * t15786;
t15789 = t14896 * t16337;
t16246 = t14827 * t14896;
t16348 = t14209 * t14925;
t15838 = (t16348 - (-t16246 - t16581) * t16337) * t16230;
t15937 = (t14853 + t14973) * t16446;
t14742 = pkin(1) * t16130;
t14823 = pkin(1) * t14859;
t16555 = -t14742 - t14823;
t16377 = (-t15838 - ((t14209 * t14785 + t14215) * t14925 + (-t15338 - t16637) * t14924 - ((-t14858 + (-t16130 + pkin(1)) * t14954 + t14986) * t14896 + t14615) * t16337) * t16415 + ((pkin(3) * t14764 * t14910 - t14814 + t15644 - t16555) * t15789 + (-(((t14872 - t14965) * t14853 - t16434) * t14954 + 0.3e1 * t15937) * t15787 + t14737 * t15671 + (-t14809 + t16555) * t14209) * t14925 + (-pkin(6) * t13999 * t14954 + t14194 * t16265) * t14924 - pkin(3) * t15791 * t16241) * t14953 + t14896 * t15400 + (pkin(1) * t15182 - t14809 * t14945 - t14887) * t14925 * t15424 + t14003 * t14641 * t14924 - t15400) * t14209;
t13761 = t15495 + (-t15841 - t16377) * t14372 + (t15117 - t15116) * t15874;
t15783 = t14954 * t16337;
t14224 = t14924 * t15783;
t14043 = -t14224 - t14131;
t14230 = t14925 * t16337;
t14078 = t14209 - t14230;
t14073 = t14078 * pkin(2);
t14449 = t14578 * t14954 + t14579 * t16197;
t14297 = -t14449 * t16415 + (pkin(3) * t15749 - t15281) * t14953 + pkin(2) * t15749;
t14450 = -t14578 * t16197 + t14579 * t14954;
t14298 = -t14450 * t16415 + (-pkin(3) * t15750 - t15282) * t14953 - pkin(2) * t15750;
t15214 = t14945 * t15392;
t15692 = t14924 * t16165;
t15460 = t14209 * t15692;
t15707 = t14924 * t16198;
t15828 = t14965 * t16366;
t15868 = t16464 * t14764;
t15932 = t13984 * t14853;
t16408 = pkin(3) * t16505;
t14678 = t14910 * t16231;
t16559 = t14678 + t14814;
t13775 = ((t15838 + ((t14215 + 0.2e1 * t14194) * t14925 - (t14167 + t13984) * t16222 - ((t14975 + t16014) * t16485 + 0.2e1 * t14858 + t14727 * t14954 - pkin(2)) * t16337) * t16415 + ((0.2e1 * t15514 - t16008 + t16559) * t15789 + (-t15932 + t14209 * t14809 - (0.2e1 * t14746 * t14798 - 0.3e1 * t15937) * t15787) * t14925 + (t14003 * t16440 - t14727 * t15948) * t14954 + t15460 * t16408 - (t14742 + t16011 + t16559) * t16337) * t14953 + pkin(2) * ((-pkin(2) * t15816 + t14003 * t14954) * t14924 - (-t15707 * t16547 - t15868) * t16337)) * t16337 + (-t14297 * t15266 + t14298 * t15265) * t16406) * t14372 - (-(t14078 * t16230 + (t15163 / 0.2e1 + t14073) * t16116 + (t14809 * t14078 + (-pkin(3) * (t14798 - 0.2e1 * t16446) * t15787 - t15828) * t14944) * t14953 + pkin(2) * t16547 * t15424) * t14209 + (-t14908 * t15214 + (-pkin(3) * t14224 + t14078 * t16162 - t16366) * t14953 + pkin(2) * t14043) * t16366) * t14367;
t14130 = t14141 ^ 2 / t14400 ^ 2 * t14995;
t14121 = pkin(7) * t14130;
t14352 = 0.1e1 / t16590 ^ 2;
t14236 = t14244 ^ 2 * t14352;
t15216 = t14131 * t16337;
t15137 = t14924 * t15216;
t15082 = t15137 * t14987;
t15798 = t14945 * t14236;
t15909 = pkin(6) * t16222;
t16424 = pkin(7) * t14910;
t16543 = pkin(6) * t15701 + t14872;
t16624 = t13761 * t16505 + (-t14785 * t14925 + t15909) * t13775 - t14236 * ((t14972 - t15885 + t16424) * t16484 + pkin(7) - 0.2e1 * t16424 + t16543) - (pkin(2) * t15798 - pkin(7) * t15137) * t15990 - t14945 * t15082 + t14121;
t14534 = t14957 * t15974 - t14638;
t14374 = 0.1e1 / ((t14534 * t14924 - t14593) * t14956 + t16023);
t14701 = t14948 * t14799;
t14862 = t14914 * pkin(2);
t16013 = t14701 + t14862;
t14616 = -pkin(2) + t16013;
t14828 = t14914 - 0.2e1;
t15888 = t14948 * t16414;
t16019 = -t14956 * t16546 - 0.2e1 * t15888;
t16604 = -t14766 + t16414;
t15053 = ((t14828 * t14854 - pkin(6)) * t14956 + t14947 * t14616) * t16227 - (t14766 * t14948 + t16019) * t14896 - t16604 * t14948;
t16134 = t14956 * t14957;
t14734 = pkin(3) * t16134;
t15648 = t14734 + t14661;
t16240 = (t14957 + 0.1e1) * (t14957 - 0.1e1);
t15089 = -(-t14965 * t16240 + (t16572 + t14734) * t14948) * t16221 + (pkin(1) + t15648) * t16190;
t14292 = t14580 * t15089 + t14581 * t15053;
t15114 = t14292 * t15264;
t14291 = -t14580 * t15053 + t14581 * t15089;
t15115 = t14291 * t15263;
t13985 = t14123 + t14120;
t14172 = pkin(6) * t16351;
t15894 = pkin(3) * t16364;
t14010 = -t14172 + t15894;
t15393 = t14924 * t14135;
t14102 = pkin(1) * t15393;
t15472 = t14948 * t14135;
t14105 = pkin(1) * t15472;
t16353 = t14208 * t14948;
t14169 = pkin(1) * t16353;
t14181 = pkin(2) * t14186;
t14188 = t14208 * pkin(2);
t14202 = t14993 * t14208;
t14203 = pkin(1) * t14208;
t14815 = pkin(3) * t16410;
t14913 = t14957 * t14914;
t15771 = t14965 * t16336;
t15391 = t14924 * t15771;
t15188 = -0.2e1 * t14913 * t15391;
t15361 = 0.2e1 * t15413;
t15046 = pkin(3) * (pkin(6) * t15361 + t14188) + t15188 * t16445;
t15470 = t14957 * t14135;
t15250 = t14948 * t15470;
t16000 = pkin(6) * t16414;
t15321 = -t14957 * t16000 + t14585;
t15329 = pkin(2) * t15391;
t15334 = pkin(2) * t15470;
t15776 = t14924 * t16336;
t15529 = pkin(2) * t15776;
t15375 = -0.2e1 * t15529;
t15513 = pkin(2) * t14701;
t14187 = t14208 * t14996;
t15543 = t14923 * t14208 + t14187;
t15572 = -0.2e1 * t15771;
t15630 = -0.2e1 * t16336;
t15914 = pkin(6) * t16336;
t15635 = pkin(2) * t15914;
t15717 = t14948 * t16231;
t15777 = t14914 * t16336;
t16220 = t14924 * t14948;
t15820 = t14208 * t16220;
t15898 = pkin(3) * t16644;
t16355 = t14208 * t14924;
t15952 = pkin(2) * t16355;
t15971 = pkin(1) * t16351;
t16419 = t14208 * pkin(3);
t16005 = pkin(2) * t16419;
t16050 = 0.2e1 * t13985;
t15947 = pkin(2) * t16336;
t16053 = t14102 - 0.2e1 * t15947;
t16148 = t14948 * t14957;
t14911 = t14956 * t14912;
t16229 = t14911 * t14993;
t15412 = t14947 * t15774;
t15207 = t14924 * t15412;
t15162 = pkin(3) * t15207;
t16369 = (-t14188 - t15162) * t14914;
t15360 = -0.2e1 * t15413;
t16372 = ((pkin(2) * t15360 - t15653) * t14947 + t16419) * t14914;
t16531 = t16050 + 0.2e1 * t14166;
t16570 = t14202 * t14911;
t16580 = -t14914 + 0.1e1;
t16583 = 0.2e1 * t14948;
t15494 = (-((-0.4e1 / 0.3e1 + t14914) * t16229 + ((-0.2e1 / 0.3e1 * t14815 + t16017) * t14914 + 0.2e1 / 0.3e1 * t15513 + 0.4e1 / 0.3e1 * t14815 + t15643) * t14956 + (0.4e1 / 0.3e1 * t16414 - 0.2e1 / 0.3e1 * t14766) * t14616) * t16336 * t16486 + (t14828 * t16570 - (t16369 + (t14203 + t16644) * t14957 + 0.3e1 * t14188 + 0.4e1 * t16628) * t16414 + ((-pkin(1) * t14188 - t15391 * t16504) * t14957 + (pkin(6) * t15375 - t15971) * t14948 + t14202 + (-t16372 + (t15188 + (pkin(2) * t15472 + 0.4e1 * t15391) * t14957 + (t14129 + t15375) * t16583 + t14186 + t16050) * t14947) * pkin(3) - t15543) * t14956 + ((t15413 * t16231 - t14181) * t14947 - t16005) * t14914 + ((t14010 * t14948 + 0.2e1 * t15329) * t14947 + t15898) * t14957 + (-t14805 * t15413 + t14181) * t14947 + t15046) * t14896 + (-(-0.3e1 * t14914 + 0.3e1) * t16229 * t16336 - (t14828 * t14102 + (-t15334 + (-t14186 - t16531) * t14948) * t14924 - ((t16507 + 0.4e1 * t16129) * t14957 + (0.4e1 * t14914 - 0.2e1) * pkin(2)) * t16336) * t16414 + (-0.2e1 * (t14815 + t16016) * t15777 + (((t14169 + t16044) * t14854 + t14010) * t14924 - t14725 * pkin(2) * t15630) * t14957 + (t15820 * t14986 + 0.4e1 * t15914) * t14854 + (pkin(6) * t15952 - t14988 * t15771) * t14948 + t14653 * t16336) * t14956 + ((-t14208 * t15964 - 0.2e1 * t15635) * t14947 + pkin(3) * t16053) * t14914 + ((pkin(1) * t15952 + pkin(6) * t15572) * t14947 + pkin(3) * t15572) * t16148 + (0.2e1 * t15635 + (t14948 * t15543 + t15971) * t14924) * t14947 - (t13985 * t16220 + t16053) * pkin(3)) * t14925 + t16580 * t16570 - (-t16369 - t14188 + (-t16044 * t14957 - (t16503 + t14854) * t15776) * t14948) * t16414 + (-t14202 + (t16372 + (-pkin(2) * t15250 - t14105 + (-t14965 * t14913 + (t14965 + t14873) * t14957) * t14924 * t15630 + t15653) * t14947) * pkin(3)) * t14956 + ((t14181 - (t15717 + t16119) * t15776) * t14947 + t16005) * t14914 + (((pkin(1) * t15375 - t14010) * t14948 - 0.2e1 * t15329) * t14947 - t15898) * t14957 + (-t14181 - (t14654 * t14948 + t16488) * t15776) * t14947 - t15046) / (-t14525 + (t14534 * t14956 + t15321) * t14924) * t16336;
t16152 = t14947 * t14965;
t14002 = t14208 * t16152 - t16364;
t14877 = pkin(1) * t14914;
t14878 = pkin(1) * t14957;
t15883 = pkin(2) * t16148;
t15181 = t14914 * t14965 - t15883;
t15668 = t14947 * t16364;
t15700 = t14924 * t16189;
t16155 = t14947 * t14948;
t15819 = t14208 * t16155;
t16154 = t14947 * t14956;
t15840 = (((pkin(1) * t15819 + t14002) * t14956 - (t14878 + pkin(2)) * t14135) * t14925 + ((t15668 + t16044) * t14948 - t14203 + (t14642 * t14912 + (pkin(6) * t16154 - pkin(2)) * t14957) * t14208) * t14924 - ((-(-t14863 + t14877 + t14988 - t16146) * t16227 - t15912 * t16148) * t14912 + (t14766 * t15700 + 0.2e1 * (t14892 * t14914 + t15883 / 0.2e1 + t14738) * t16235 - (-t15181 + t14738) * t14947) * t14956 + (t14877 - t14725) * t16227 + t16464 * t14767 * t16148) * t16336) * t16364;
t14385 = 0.1e1 / (-t14525 + t14924 * (t14530 * t14956 + t15321));
t15873 = t14385 * t16406;
t14000 = t16351 - t15668;
t14216 = t14748 * t15361;
t14786 = t14878 + t14987;
t15780 = t14766 * t16336;
t15399 = t14616 * t15780;
t15775 = t14947 * t16336;
t15414 = t14924 * t15775;
t15778 = t14896 * t16336;
t16204 = t14925 * t14208;
t16245 = t14828 * t14896;
t15837 = (t16204 - (-t16245 - t16580) * t16336) * t16229;
t15893 = (t14854 + t14973) * t16444;
t14743 = pkin(1) * t16129;
t14824 = pkin(1) * t14863;
t16554 = -t14743 - t14824;
t16376 = (-t15837 - ((t14208 * t14786 + t14216) * t14925 + (-t15334 - t16635) * t14924 - ((-t14862 + (-t16129 + pkin(1)) * t14957 + t14986) * t14896 + t14616) * t16336) * t16414 + ((pkin(3) * t14766 * t14914 - t14815 + t15644 - t16554) * t15778 + (-(((t14873 - t14965) * t14854 - t16434) * t14957 + 0.3e1 * t15893) * t15776 + t14738 * t15668 + (-t14809 + t16554) * t14208) * t14925 + (-pkin(6) * t14000 * t14957 + t14188 * t16263) * t14924 - pkin(3) * t15780 * t16240) * t14956 + t14896 * t15399 + (pkin(1) * t15181 - t14809 * t14948 - t14887) * t14925 * t15414 + t14002 * t14642 * t14924 - t15399) * t14208;
t13762 = t15494 + (-t15840 - t16376) * t14374 + (t15115 - t15114) * t15873;
t15772 = t14957 * t16336;
t14225 = t14924 * t15772;
t14045 = -t14225 - t14135;
t14231 = t14925 * t16336;
t14081 = t14208 - t14231;
t14074 = t14081 * pkin(2);
t14451 = t14580 * t14957 + t14581 * t16195;
t14299 = -t14451 * t16414 + (pkin(3) * t15747 - t15279) * t14956 + pkin(2) * t15747;
t14452 = -t14580 * t16195 + t14581 * t14957;
t14300 = -t14452 * t16414 + (-pkin(3) * t15748 - t15280) * t14956 - pkin(2) * t15748;
t15206 = t14948 * t15391;
t15687 = t14924 * t16155;
t15463 = t14208 * t15687;
t15705 = t14924 * t16196;
t15824 = t14965 * t16364;
t15867 = t16464 * t14766;
t15931 = t13985 * t14854;
t14679 = t14914 * t16231;
t16558 = t14679 + t14815;
t13776 = ((t15837 + ((t14216 + 0.2e1 * t14188) * t14925 - (t14166 + t13985) * t16220 - ((t14975 + t16013) * t16485 + 0.2e1 * t14862 + t14728 * t14957 - pkin(2)) * t16336) * t16414 + ((0.2e1 * t15513 - t16008 + t16558) * t15778 + (-t15931 + t14208 * t14809 - (0.2e1 * t14748 * t14799 - 0.3e1 * t15893) * t15776) * t14925 + (t14002 * t16440 - t14728 * t15947) * t14957 + t15463 * t16408 - (t14743 + t16011 + t16558) * t16336) * t14956 + pkin(2) * ((-pkin(2) * t15819 + t14002 * t14957) * t14924 - (-t15705 * t16546 - t15867) * t16336)) * t16336 + (-t14299 * t15264 + t14300 * t15263) * t16406) * t14374 - (-(t14081 * t16229 + (t15162 / 0.2e1 + t14074) * t16115 + (t14809 * t14081 + (-pkin(3) * (t14799 - 0.2e1 * t16444) * t15776 - t15824) * t14947) * t14956 + pkin(2) * t16546 * t15414) * t14208 + (-t14912 * t15206 + (-pkin(3) * t14225 + t14081 * t16152 - t16364) * t14956 + pkin(2) * t14045) * t16364) * t14368;
t14134 = t14143 ^ 2 / t14401 ^ 2 * t14995;
t14118 = pkin(7) * t14134;
t14355 = 0.1e1 / t16589 ^ 2;
t14237 = t14245 ^ 2 * t14355;
t15208 = t14135 * t16336;
t15135 = t14924 * t15208;
t15080 = t15135 * t14987;
t15796 = t14948 * t14237;
t15908 = pkin(6) * t16220;
t16423 = pkin(7) * t14914;
t16542 = pkin(6) * t15700 + t14873;
t16623 = t13762 * t16505 + (-t14786 * t14925 + t15908) * t13776 - t14237 * ((t14972 - t15883 + t16423) * t16484 + pkin(7) - 0.2e1 * t16423 + t16542) - (pkin(2) * t15796 - pkin(7) * t15135) * t15989 - t14948 * t15080 + t14118;
t14535 = t14960 * t15973 - t14639;
t14370 = 0.1e1 / ((t14535 * t14924 - t14594) * t14959 + t16022);
t14702 = t14951 * t14800;
t14866 = t14918 * pkin(2);
t16012 = t14702 + t14866;
t14617 = -pkin(2) + t16012;
t14829 = t14918 - 0.2e1;
t15887 = t14951 * t16413;
t16018 = -t14959 * t16545 - 0.2e1 * t15887;
t16603 = -t14768 + t16413;
t15052 = ((t14829 * t14855 - pkin(6)) * t14959 + t14950 * t14617) * t16227 - (t14768 * t14951 + t16018) * t14896 - t16603 * t14951;
t16133 = t14959 * t14960;
t14735 = pkin(3) * t16133;
t15647 = t14735 + t14662;
t16239 = (t14960 + 0.1e1) * (t14960 - 0.1e1);
t15088 = -(-t14965 * t16239 + (t16571 + t14735) * t14951) * t16219 + (pkin(1) + t15647) * t16188;
t14294 = t14582 * t15088 + t14583 * t15052;
t15112 = t14294 * t15262;
t14293 = -t14582 * t15052 + t14583 * t15088;
t15113 = t14293 * t15261;
t13983 = t14117 + t14116;
t14174 = pkin(6) * t16338;
t15895 = pkin(3) * t16365;
t14009 = -t14174 + t15895;
t15394 = t14924 * t14133;
t14101 = pkin(1) * t15394;
t15477 = t14951 * t14133;
t14104 = pkin(1) * t15477;
t16340 = t14210 * t14951;
t14171 = pkin(1) * t16340;
t14183 = pkin(2) * t14197;
t14198 = t14210 * t14993;
t14200 = t14210 * pkin(2);
t14201 = t14210 * pkin(1);
t14816 = pkin(3) * t16409;
t14915 = t14959 * t14916;
t14917 = t14960 * t14918;
t15760 = t14965 * t16335;
t15390 = t14924 * t15760;
t15187 = -0.2e1 * t14917 * t15390;
t15359 = 0.2e1 * t15403;
t15045 = pkin(3) * (pkin(6) * t15359 + t14200) + t15187 * t16443;
t15475 = t14960 * t14133;
t15251 = t14951 * t15475;
t15999 = pkin(6) * t16413;
t15320 = -t14960 * t15999 + t14586;
t15328 = pkin(2) * t15390;
t15336 = pkin(2) * t15475;
t15765 = t14924 * t16335;
t15528 = pkin(2) * t15765;
t15374 = -0.2e1 * t15528;
t15512 = pkin(2) * t14702;
t14199 = t14210 * t14996;
t15541 = t14923 * t14210 + t14199;
t15571 = -0.2e1 * t15760;
t15629 = -0.2e1 * t16335;
t15913 = pkin(6) * t16335;
t15634 = pkin(2) * t15913;
t15716 = t14951 * t16231;
t15766 = t14918 * t16335;
t16218 = t14924 * t14951;
t15814 = t14210 * t16218;
t15899 = pkin(3) * t16643;
t16342 = t14210 * t14924;
t15950 = pkin(2) * t16342;
t15969 = pkin(1) * t16338;
t16417 = t14210 * pkin(3);
t16003 = pkin(2) * t16417;
t16052 = 0.2e1 * t13983;
t15946 = pkin(2) * t16335;
t16054 = t14101 - 0.2e1 * t15946;
t16138 = t14951 * t14960;
t16228 = t14915 * t14993;
t15402 = t14950 * t15763;
t15199 = t14924 * t15402;
t15161 = pkin(3) * t15199;
t16368 = (-t14200 - t15161) * t14918;
t15358 = -0.2e1 * t15403;
t16371 = ((pkin(2) * t15358 - t15651) * t14950 + t16417) * t14918;
t16529 = t16052 + 0.2e1 * t14168;
t16579 = -t14918 + 0.1e1;
t16582 = 0.2e1 * t14951;
t15493 = (-((-0.4e1 / 0.3e1 + t14918) * t16228 + ((-0.2e1 / 0.3e1 * t14816 + t16017) * t14918 + 0.2e1 / 0.3e1 * t15512 + 0.4e1 / 0.3e1 * t14816 + t15643) * t14959 + (0.4e1 / 0.3e1 * t16413 - 0.2e1 / 0.3e1 * t14768) * t14617) * t16335 * t16486 + (t14210 * t14829 * t16228 - (t16368 + (t14201 + t16643) * t14960 + 0.3e1 * t14200 + 0.4e1 * t16627) * t16413 + ((-pkin(1) * t14200 - t15390 * t16504) * t14960 + (pkin(6) * t15374 - t15969) * t14951 + t14198 + (-t16371 + (t15187 + (pkin(2) * t15477 + 0.4e1 * t15390) * t14960 + (t14128 + t15374) * t16582 + t14197 + t16052) * t14950) * pkin(3) - t15541) * t14959 + ((t15403 * t16231 - t14183) * t14950 - t16003) * t14918 + ((t14009 * t14951 + 0.2e1 * t15328) * t14950 + t15899) * t14960 + (-t14805 * t15403 + t14183) * t14950 + t15045) * t14896 + (-(-0.3e1 * t14918 + 0.3e1) * t16228 * t16335 - (t14829 * t14101 + (-t15336 + (-t14197 - t16529) * t14951) * t14924 - ((t16507 + 0.4e1 * t16128) * t14960 + (0.4e1 * t14918 - 0.2e1) * pkin(2)) * t16335) * t16413 + (-0.2e1 * (t14816 + t16016) * t15766 + (((t14171 + t16042) * t14855 + t14009) * t14924 - t14726 * pkin(2) * t15629) * t14960 + (t15814 * t14986 + 0.4e1 * t15913) * t14855 + (pkin(6) * t15950 - t14988 * t15760) * t14951 + t14653 * t16335) * t14959 + ((-t14210 * t15964 - 0.2e1 * t15634) * t14950 + pkin(3) * t16054) * t14918 + ((pkin(1) * t15950 + pkin(6) * t15571) * t14950 + pkin(3) * t15571) * t16138 + (0.2e1 * t15634 + (t14951 * t15541 + t15969) * t14924) * t14950 - (t13983 * t16218 + t16054) * pkin(3)) * t14925 + t16579 * t14198 * t14915 - (-t16368 - t14200 + (-t16042 * t14960 - (t16503 + t14855) * t15765) * t14951) * t16413 + (-t14198 + (t16371 + (-pkin(2) * t15251 - t14104 + (-t14965 * t14917 + (t14965 + t14874) * t14960) * t14924 * t15629 + t15651) * t14950) * pkin(3)) * t14959 + ((t14183 - (t15716 + t16119) * t15765) * t14950 + t16003) * t14918 + (((pkin(1) * t15374 - t14009) * t14951 - 0.2e1 * t15328) * t14950 - t15899) * t14960 + (-t14183 - (t14654 * t14951 + t16488) * t15765) * t14950 - t15045) / (-t14526 + (t14535 * t14959 + t15320) * t14924) * t16335;
t16142 = t14950 * t14965;
t14004 = t14210 * t16142 - t16365;
t14879 = pkin(1) * t14918;
t14880 = pkin(1) * t14960;
t15881 = pkin(2) * t16138;
t15180 = t14918 * t14965 - t15881;
t15665 = t14950 * t16365;
t15699 = t14924 * t16187;
t16145 = t14950 * t14951;
t15813 = t14210 * t16145;
t16144 = t14950 * t14959;
t15839 = (((pkin(1) * t15813 + t14004) * t14959 - (t14880 + pkin(2)) * t14133) * t14925 + ((t15665 + t16042) * t14951 - t14201 + (t14643 * t14916 + (pkin(6) * t16144 - pkin(2)) * t14960) * t14210) * t14924 - ((-(-t14867 + t14879 + t14988 - t16136) * t16227 - t15912 * t16138) * t14916 + (t14768 * t15699 + 0.2e1 * (t14892 * t14918 + t15881 / 0.2e1 + t14739) * t16234 - (-t15180 + t14739) * t14950) * t14959 + (t14879 - t14726) * t16227 + t16464 * t14769 * t16138) * t16335) * t16365;
t14386 = 0.1e1 / (-t14526 + t14924 * (t14531 * t14959 + t15320));
t15872 = t14386 * t16406;
t14001 = t16338 - t15665;
t14217 = t14750 * t15359;
t14787 = t14880 + t14987;
t15769 = t14768 * t16335;
t15397 = t14617 * t15769;
t15764 = t14950 * t16335;
t15404 = t14924 * t15764;
t16203 = t14925 * t14210;
t16244 = t14829 * t14896;
t15658 = (t16203 - (-t16244 - t16579) * t16335) * t16228;
t15767 = t14896 * t16335;
t15936 = (t14855 + t14973) * t16442;
t14744 = pkin(1) * t16128;
t14825 = pkin(1) * t14867;
t16553 = -t14744 - t14825;
t16375 = (-t15658 - ((t14210 * t14787 + t14217) * t14925 + (-t15336 - t16636) * t14924 - ((-t14866 + (-t16128 + pkin(1)) * t14960 + t14986) * t14896 + t14617) * t16335) * t16413 + ((pkin(3) * t14768 * t14918 - t14816 + t15644 - t16553) * t15767 + (-(((t14874 - t14965) * t14855 - t16434) * t14960 + 0.3e1 * t15936) * t15765 + t14739 * t15665 + (-t14809 + t16553) * t14210) * t14925 + (-pkin(6) * t14001 * t14960 + t14200 * t16261) * t14924 - pkin(3) * t15769 * t16239) * t14959 + t14896 * t15397 + (pkin(1) * t15180 - t14809 * t14951 - t14887) * t14925 * t15404 + t14004 * t14643 * t14924 - t15397) * t14210;
t13763 = t15493 + (-t15839 - t16375) * t14370 + (t15113 - t15112) * t15872;
t15761 = t14960 * t16335;
t14226 = t14924 * t15761;
t14047 = -t14226 - t14133;
t14232 = t14925 * t16335;
t14084 = t14210 - t14232;
t14075 = t14084 * pkin(2);
t14453 = t14582 * t14960 + t14583 * t16193;
t14301 = -t14453 * t16413 + (pkin(3) * t15745 - t15277) * t14959 + pkin(2) * t15745;
t14454 = -t14582 * t16193 + t14583 * t14960;
t14302 = -t14454 * t16413 + (-pkin(3) * t15746 - t15278) * t14959 - pkin(2) * t15746;
t15198 = t14951 * t15390;
t15684 = t14924 * t16145;
t15457 = t14210 * t15684;
t15703 = t14924 * t16194;
t15826 = t14965 * t16365;
t15866 = t16464 * t14768;
t15933 = t13983 * t14855;
t14680 = t14918 * t16231;
t16557 = t14680 + t14816;
t13777 = ((t15658 + ((t14217 + 0.2e1 * t14200) * t14925 - (t14168 + t13983) * t16218 - ((t14975 + t16012) * t16485 + 0.2e1 * t14866 + t14729 * t14960 - pkin(2)) * t16335) * t16413 + ((0.2e1 * t15512 - t16008 + t16557) * t15767 + (-t15933 + t14210 * t14809 - (0.2e1 * t14750 * t14800 - 0.3e1 * t15936) * t15765) * t14925 + (t14004 * t16440 - t14729 * t15946) * t14960 + t15457 * t16408 - (t14744 + t16011 + t16557) * t16335) * t14959 + pkin(2) * ((-pkin(2) * t15813 + t14004 * t14960) * t14924 - (-t15703 * t16545 - t15866) * t16335)) * t16335 + (-t14301 * t15262 + t14302 * t15261) * t16406) * t14370 - (-(t14084 * t16228 + (t15161 / 0.2e1 + t14075) * t16114 + (t14809 * t14084 + (-pkin(3) * (t14800 - 0.2e1 * t16442) * t15765 - t15826) * t14950) * t14959 + pkin(2) * t16545 * t15404) * t14210 + (-t14916 * t15198 + (-pkin(3) * t14226 + t14084 * t16142 - t16365) * t14959 + pkin(2) * t14047) * t16365) * t14366;
t14132 = t14142 ^ 2 / t14402 ^ 2 * t14995;
t14115 = pkin(7) * t14132;
t14349 = 0.1e1 / t16588 ^ 2;
t14238 = t14246 ^ 2 * t14349;
t15200 = t14133 * t16335;
t15136 = t14924 * t15200;
t15081 = t15136 * t14987;
t15794 = t14951 * t14238;
t15907 = pkin(6) * t16218;
t16422 = pkin(7) * t14918;
t16541 = pkin(6) * t15699 + t14874;
t16622 = t13763 * t16505 + (-t14787 * t14925 + t15907) * t13777 - t14238 * ((t14972 - t15881 + t16422) * t16484 + pkin(7) - 0.2e1 * t16422 + t16541) - (pkin(2) * t15794 - pkin(7) * t15136) * t15988 - t14951 * t15081 + t14115;
t14152 = t14159 * pkin(7);
t14156 = pkin(8) * t14159;
t16047 = t14152 + t14156;
t16065 = (-t14097 / 0.2e1 + t16047) * t14842 - t15897 / 0.2e1;
t13905 = t14147 + t16065;
t13944 = -t14097 + t16047;
t14708 = t14996 + t16540;
t15484 = t14965 * t15675;
t15175 = t14159 * t14708 - t15484;
t13958 = -t14219 * t14708 + t15175;
t14026 = t14145 + t14153;
t14704 = pkin(1) * t16231;
t14652 = t14925 * t14704;
t14671 = -0.2e1 / 0.3e1 * t16468 - t14989 / 0.3e1 - t14990 / 0.3e1 + t14996;
t15938 = pkin(2) * t16185;
t14710 = pkin(1) * t15938;
t14811 = pkin(2) * t14844;
t14843 = t14899 * t14993;
t14890 = t14993 + t14996;
t14891 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t14992 = pkin(3) * t14993;
t15911 = pkin(6) * t16231;
t15036 = (t14159 * t15911 + (((t14097 - 0.2e1 * t14156) * pkin(7) + t14155 + pkin(6) * t14094 + t16010 * t14159) * t14938 + t15831) * pkin(3)) * t14939 + ((0.2e1 * t14145 + 0.2e1 * t14153 + t16056) * t14939 + t14098) * t14811 + t16638 * t14843;
t15193 = 0.2e1 * t14811 + t14843;
t15059 = t15193 + t16231;
t14457 = (-t14563 * t14941 + (t14938 * t14996 - t16002) * t14924) * t14942;
t16006 = pkin(3) * t16453;
t15640 = t14899 * t16006;
t15944 = pkin(2) * t16226;
t15095 = t14719 * t15944 - t14939 * t15640 + t14457;
t15110 = t14924 * t15267;
t15111 = t14924 * t15268;
t15642 = -t14991 / 0.2e1 - t14993 / 0.2e1 + t14996 / 0.2e1;
t15120 = t15642 - t16540;
t16524 = 0.3e1 * t16540;
t15121 = t14993 + t16009 + t16524;
t15808 = t14752 * t14223;
t15449 = t14753 * t15808;
t15233 = t14965 * t15449;
t15131 = t14895 * t15233;
t15132 = t15741 * t15808;
t15488 = t14994 * t15675;
t15167 = t15488 * t16453;
t15179 = -t14219 * t14732 + t13944;
t15194 = -t16540 + t14890;
t15232 = t14752 * t14214;
t15863 = t14989 / 0.2e1 + t14990 / 0.2e1;
t15356 = t15863 + t16468;
t15372 = t14996 - t16524;
t15447 = t16243 * t14223;
t15448 = t14753 * t15805;
t15501 = t14924 * t14698;
t15510 = t16464 * t14223;
t15832 = t14899 * t16367;
t15527 = pkin(3) * t15832;
t15698 = t14924 * t16185;
t15532 = pkin(1) * t15698;
t15940 = pkin(2) * t16211;
t15656 = 0.2e1 * t15940;
t14375 = 0.1e1 / (t14924 * t15186 + t15027);
t15810 = t14375 * t14223;
t15864 = 0.3e1 / 0.2e1 * t14671 * t14965;
t16466 = 0.3e1 / 0.2e1 * t14996 + t15356;
t15865 = t14925 * t16466;
t15160 = t14994 * (-t14996 / 0.2e1 + t15863);
t15903 = (pkin(7) * t16046 + pkin(8) * t14153 + t15160 * t16367 + t16065) * t14844;
t16210 = t14924 * t14994;
t15939 = pkin(2) * t16210;
t15955 = t14993 * t16453;
t15993 = 0.2e1 * t14925;
t16113 = 0.2e1 * t14844;
t16270 = t14752 * t14924;
t14483 = -t14752 * t16269 + t14925 * t15741;
t16274 = t14720 * t14753;
t14415 = -t14483 * t14940 + t14943 * t16274;
t14416 = t14483 * t14943 + t14940 * t16274;
t14532 = -t14752 * t16225 + t14753 * t14925;
t14487 = -t14532 * t14940 + t14732 * t14943;
t14488 = t14532 * t14943 + t14732 * t14940;
t15735 = t14753 * t16185;
t14503 = 0.2e1 * t14940 * t15735 + t14943 * t16278;
t15381 = t14943 * t15735;
t15673 = t14940 * t16278;
t14280 = ((-0.2e1 * t15381 + t15673) * t14836 + t14503 * t14832) * t14901 + (t14415 * t14832 + t14416 * t14836) * t14942 + t14965 * (t14487 * t14832 + t14488 * t14836);
t14331 = 0.1e1 / (t14457 + (-t14632 * t14941 + t14938 * t15940 - t15640) * t14939 + t14924 * t15968);
t16325 = t14280 * t14331;
t14279 = (t14503 * t14836 + 0.2e1 * (t15381 - t15673 / 0.2e1) * t14832) * t14901 + (t14415 * t14836 - t14416 * t14832) * t14942 + (t14487 * t14836 - t14488 * t14832) * t14965;
t16326 = t14279 * t14331;
t16451 = pkin(2) * t14924;
t16454 = pkin(1) * t14924;
t16487 = 0.2e1 * t14895;
t16528 = t14811 + t14843 - t14810;
t16552 = 0.2e1 * t14810 - t14843;
t16564 = t14060 * t16131 + t14157;
t16565 = t14994 * t16406;
t13756 = -t14994 * ((-(t14938 * t15532 + ((t14810 + t15194) * t14941 + (t14751 + t16416) * pkin(2)) * t16243) * t15806 + ((-t14719 * t15447 + t15341) * t16416 + ((-t14842 * t15179 + t14890 * t15830) * t14924 - pkin(2) * t14720 * t15447) * t14941 - (t14938 * t15179 - t16367) * t16451 - t14965 * (t15803 * t15869 + t15167)) * t14942 + t15832 * t16454 + (-t14965 * t14732 * t15510 + (t14719 * t15939 + t14938 * t15963) * t16367) * t14941 - (-t14939 * t16367 + (t13944 * t14939 - t14219 * t14719 + t14157) * t14938) * t16211 + t15167 * t16448) / ((-pkin(2) * t15963 - t14633 * t14924) * t14941 + t15095) * t16367 + (-(t14899 * t15955 + (t14752 * t16211 + t16007) * t16113 + t14752 * t15656 + t14652) * t15806 + (t14992 * t14060 * t14898 - (-t14752 * t15445 - 0.3e1 * t16452) * t14843 + (-t15484 / 0.2e1 + t14159 * t16466 - ((-pkin(2) * t16270 + t14731) * t14939 + t15865) * t14223) * t16113 - 0.2e1 * (t14752 * t15501 + t14710) * t15803 + pkin(2) * t13958) * t14942 + t16564 * t14843 + (t15232 / 0.2e1 + t16564 * pkin(2)) * t16113 + t13958 * t16131 + pkin(2) * t15232 + (-t14219 * t14923 + t15175) * pkin(1)) / (t14941 * t16610 + t15095) * t16362 - ((t15372 + t15193) * t14900 * t15447 * t16269 + (0.4e1 * t15131 + (0.3e1 * (t14671 + t15193) * t15236 - 0.2e1 * t15903 + (-0.2e1 * t13905 + t15527) * pkin(2)) * t14896 + ((t14159 * t15059 + t15484) * t16454 - 0.4e1 * t15233) * t14925 - 0.2e1 * (t14939 * t15864 + t14704 + t15193 * (t14891 * t14939 + pkin(1))) * t15805 - pkin(2) * t15527 + 0.2e1 * t15903 + t13905 * t14987) * t14901 + (-t15132 * t16487 + (-0.2e1 * (t15120 + t16528) * t15448 + t15036) * t14896 + (t15132 + ((-t15675 / 0.2e1 + t16357) * t14848 - t15934 / 0.2e1 + t14155 / 0.2e1 + (t14843 / 0.2e1 + t14811 + t15356) * t14159) * t16269) * t15993 - (0.4e1 * t14736 + t15121 + t16552) * t15448 - t15036) * t14942 - 0.2e1 * t15131 + (-0.2e1 * (t15642 + t16528) * t15445 + (t14090 - t16532) * t14844 + pkin(2) * t14026) * t16233 + (((t14155 - t15934) * t14939 + pkin(1) * t13988) * t14924 + 0.2e1 * t15449 + (t15193 + t16540) * t15822) * t16185 - (t16488 + (t14654 + t16552) * t14939) * t14214 - (t13982 * t14848 - t14965 * t16532) * t14844 - t14026 * t16441) * t15810) + (-t15110 * t16326 + t15111 * t16325) * t16565;
t13725 = t13779 * t16224 - t13756;
t15709 = t14924 * t16201;
t16621 = -t15709 * t14222 - t13725;
t15462 = t14209 * t14131;
t15347 = pkin(2) * t15462;
t14018 = -0.2e1 * t15347;
t14689 = pkin(7) * t14954 - t16446;
t16032 = -t14224 - 0.2e1 * t14131;
t16388 = t13775 * t14924;
t14189 = t14209 * pkin(8);
t14190 = t14209 * pkin(7);
t16063 = (t14190 + t14189 - t14124 / 0.2e1) * t14853 - t15896 / 0.2e1;
t13908 = t14173 + t16063;
t16039 = t14190 - t14124;
t13952 = t14189 + t16039;
t15479 = t14965 * t15671;
t15174 = t14209 * t14708 - t15479;
t13959 = -t14230 * t14708 + t15174;
t14034 = t14167 + t14191;
t14817 = pkin(2) * t14857;
t14856 = t14908 * t14993;
t15033 = (t14209 * t15911 + (((t14124 - 0.2e1 * t14189) * pkin(7) + t14193 + pkin(6) * t14119 + t16010 * t14209) * t14944 + t15828) * pkin(3)) * t14945 + ((0.2e1 * t14191 + t16530) * t14945 + t14127) * t14817 + t16637 * t14856;
t15192 = 0.2e1 * t14817 + t14856;
t15058 = t15192 + t16231;
t14480 = (-t14564 * t14953 + (t14944 * t14996 - t16001) * t14924) * t14954;
t15639 = t14908 * t16006;
t15943 = pkin(2) * t16223;
t15094 = t14724 * t15943 - t14945 * t15639 + t14480;
t15108 = t14924 * t15265;
t15109 = t14924 * t15266;
t15790 = t14765 * t16337;
t15124 = t15740 * t15790;
t15427 = t14770 * t15790;
t15213 = t14965 * t15427;
t15129 = t14895 * t15213;
t15483 = t14994 * t15671;
t15166 = t15483 * t16453;
t15178 = -t14230 * t14737 + t13952;
t15212 = t14765 * t15392;
t15425 = t16243 * t16337;
t15426 = t14770 * t15787;
t15509 = t16464 * t16337;
t15829 = t14908 * t16366;
t15526 = pkin(3) * t15829;
t14379 = 0.1e1 / (t14924 * t15185 + t15026);
t15792 = t14379 * t16337;
t15935 = (pkin(6) * t14189 + pkin(7) * t16038 + t15160 * t16366 + t16063) * t14857;
t16112 = 0.2e1 * t14857;
t16266 = t14765 * t14924;
t14484 = -t14765 * t16260 + t14925 * t15740;
t16273 = t14727 * t14770;
t14417 = -t14484 * t14946 + t14955 * t16273;
t14420 = t14484 * t14955 + t14946 * t16273;
t14536 = -t14765 * t16222 + t14770 * t14925;
t14491 = -t14536 * t14946 + t14737 * t14955;
t14494 = t14536 * t14955 + t14737 * t14946;
t15728 = t14770 * t16185;
t14504 = 0.2e1 * t14946 * t15728 + t14955 * t16277;
t15380 = t14955 * t15728;
t15669 = t14946 * t16277;
t14284 = ((-0.2e1 * t15380 + t15669) * t14837 + t14504 * t14833) * t14910 + (t14417 * t14833 + t14420 * t14837) * t14954 + t14965 * (t14491 * t14833 + t14494 * t14837);
t14332 = 0.1e1 / (t14480 + (-t14632 * t14953 + t14944 * t15940 - t15639) * t14945 + t14924 * t15967);
t16321 = t14284 * t14332;
t14281 = (t14504 * t14837 + 0.2e1 * (t15380 - t15669 / 0.2e1) * t14833) * t14910 + (t14417 * t14837 - t14420 * t14833) * t14954 + (t14491 * t14837 - t14494 * t14833) * t14965;
t16324 = t14281 * t14332;
t16527 = t14817 + t14856 - t14814;
t16550 = 0.2e1 * t14814 - t14856;
t16561 = t14078 * t16130 + t14204;
t13757 = -t14994 * ((-(t14944 * t15532 + ((t14814 + t15194) * t14953 + (t14764 + t16415) * pkin(2)) * t16243) * t15788 + ((pkin(2) * t15395 - t14724 * t15425) * t16415 + ((t14131 * t14890 - t14853 * t15178) * t14924 - pkin(2) * t14727 * t15425) * t14953 - (t14944 * t15178 - t16366) * t16451 - t14965 * (t15785 * t15868 + t15166)) * t14954 + t15829 * t16454 + (-t14965 * t14737 * t15509 + (t14724 * t15939 + t14944 * t15961) * t16366) * t14953 - (-t14945 * t16366 + (t13952 * t14945 - t14230 * t14724 + t14204) * t14944) * t16211 + t15166 * t16446) / ((-pkin(2) * t15961 - t14637 * t14924) * t14953 + t15094) * t16366 + (-(t14908 * t15955 + (t14765 * t16211 + t16007) * t16112 + t14765 * t15656 + t14652) * t15788 + (t14992 * t14078 * t14907 + (-t15479 / 0.2e1 + t14209 * t16466 - ((-pkin(2) * t16266 + t14731) * t14945 + t15865) * t16337) * t16112 - 0.2e1 * (t14765 * t15501 + t14710) * t15785 + pkin(2) * t13959) * t14954 + (t15212 / 0.2e1 + t16561 * pkin(2)) * t16112 + t13959 * t16130 + pkin(2) * t15212 + (-t14230 * t14923 + t15174) * pkin(1) + ((0.3e1 * t14073 + t16629) * t14954 + t16561) * t14856) / (t14953 * t16609 + t15094) * t16349 - ((t15372 + t15192) * t14909 * t15425 * t16260 + (0.4e1 * t15129 + (0.3e1 * (t14671 + t15192) * t15214 - 0.2e1 * t15935 + (-0.2e1 * t13908 + t15526) * pkin(2)) * t14896 + ((t14209 * t15058 + t15479) * t16454 - 0.4e1 * t15213) * t14925 - 0.2e1 * (t14945 * t15864 + t14704 + t15192 * (t14891 * t14945 + pkin(1))) * t15787 - pkin(2) * t15526 + 0.2e1 * t15935 + t13908 * t14987) * t14910 + (-t15124 * t16487 + (-0.2e1 * (t15120 + t16527) * t15426 + t15033) * t14896 + (t15124 + ((-t15671 / 0.2e1 + t16344) * t14872 - t15932 / 0.2e1 + t14193 / 0.2e1 + (t14856 / 0.2e1 + t14817 + t15356) * t14209) * t16260) * t15993 - (0.4e1 * t14742 + t15121 + t16550) * t15426 - t15033) * t14954 - 0.2e1 * t15129 + ((t15642 + t16527) * t15362 + (t14103 - t16534) * t14857 + pkin(2) * t14034) * t16233 + (((t14193 - t15932) * t14945 + t13999 * pkin(1)) * t14924 + 0.2e1 * t15427 + (t15192 + t16540) * t15817) * t16185 - (t16488 + (t14654 + t16550) * t14945) * t15392 - (t13984 * t14872 - t14965 * t16534) * t14857 - t14034 * t16441) * t15792) + (-t15108 * t16324 + t15109 * t16321) * t16565;
t16432 = pkin(7) * t13757;
t16620 = t14689 * t16388 - (pkin(2) * t16032 - pkin(7) * t15423) * t14230 + t14018 - t16432;
t15465 = t14208 * t14135;
t15331 = pkin(2) * t15465;
t14017 = -0.2e1 * t15331;
t14690 = pkin(7) * t14957 - t16444;
t16031 = -t14225 - 0.2e1 * t14135;
t16385 = t13776 * t14924;
t14184 = t14208 * pkin(8);
t14185 = t14208 * pkin(7);
t16064 = (t14185 + t14184 - t14126 / 0.2e1) * t14854 - t15894 / 0.2e1;
t13907 = t14172 + t16064;
t16041 = t14185 - t14126;
t13954 = t14184 + t16041;
t15469 = t14965 * t15668;
t15172 = t14208 * t14708 - t15469;
t13960 = -t14231 * t14708 + t15172;
t14033 = t14166 + t14186;
t14818 = pkin(2) * t14861;
t14860 = t14912 * t14993;
t15035 = (t14208 * t15911 + (((t14126 - 0.2e1 * t14184) * pkin(7) + t14187 + pkin(6) * t14120 + t16010 * t14208) * t14947 + t15824) * pkin(3)) * t14948 + ((0.2e1 * t14186 + t16531) * t14948 + t14129) * t14818 + t16635 * t14860;
t15191 = 0.2e1 * t14818 + t14860;
t15057 = t15191 + t16231;
t14481 = (-t14565 * t14956 + (t14947 * t14996 - t16000) * t14924) * t14957;
t15638 = t14912 * t16006;
t15942 = pkin(2) * t16221;
t15093 = t14725 * t15942 - t14948 * t15638 + t14481;
t15106 = t14924 * t15263;
t15107 = t14924 * t15264;
t15779 = t14767 * t16336;
t15123 = t15739 * t15779;
t15417 = t14773 * t15779;
t15205 = t14965 * t15417;
t15127 = t14895 * t15205;
t15473 = t14994 * t15668;
t15164 = t15473 * t16453;
t15176 = -t14231 * t14738 + t13954;
t15204 = t14767 * t15391;
t15415 = t16243 * t16336;
t15416 = t14773 * t15776;
t15508 = t16464 * t16336;
t15825 = t14912 * t16364;
t15524 = pkin(3) * t15825;
t14380 = 0.1e1 / (t14924 * t15184 + t15025);
t15781 = t14380 * t16336;
t15902 = (pkin(6) * t14184 + pkin(7) * t16040 + t15160 * t16364 + t16064) * t14861;
t16111 = 0.2e1 * t14861;
t16264 = t14767 * t14924;
t14485 = -t14767 * t16257 + t14925 * t15739;
t16272 = t14728 * t14773;
t14418 = -t14485 * t14949 + t14958 * t16272;
t14421 = t14485 * t14958 + t14949 * t16272;
t14537 = -t14767 * t16220 + t14773 * t14925;
t14492 = -t14537 * t14949 + t14738 * t14958;
t14495 = t14537 * t14958 + t14738 * t14949;
t15727 = t14773 * t16185;
t14505 = 0.2e1 * t14949 * t15727 + t14958 * t16276;
t15379 = t14958 * t15727;
t15666 = t14949 * t16276;
t14285 = ((-0.2e1 * t15379 + t15666) * t14838 + t14505 * t14834) * t14914 + (t14418 * t14834 + t14421 * t14838) * t14957 + t14965 * (t14492 * t14834 + t14495 * t14838);
t14333 = 0.1e1 / (t14481 + (-t14632 * t14956 + t14947 * t15940 - t15638) * t14948 + t14924 * t15966);
t16320 = t14285 * t14333;
t14282 = (t14505 * t14838 + 0.2e1 * (t15379 - t15666 / 0.2e1) * t14834) * t14914 + (t14418 * t14838 - t14421 * t14834) * t14957 + (t14492 * t14838 - t14495 * t14834) * t14965;
t16323 = t14282 * t14333;
t16526 = t14818 + t14860 - t14815;
t16549 = 0.2e1 * t14815 - t14860;
t16562 = t14081 * t16129 + t14203;
t13758 = -t14994 * ((-(t14947 * t15532 + ((t14815 + t15194) * t14956 + (t14766 + t16414) * pkin(2)) * t16243) * t15777 + ((pkin(2) * t15393 - t14725 * t15415) * t16414 + ((t14135 * t14890 - t14854 * t15176) * t14924 - pkin(2) * t14728 * t15415) * t14956 - (t14947 * t15176 - t16364) * t16451 - t14965 * (t15774 * t15867 + t15164)) * t14957 + t15825 * t16454 + (-t14965 * t14738 * t15508 + (t14725 * t15939 + t14947 * t15960) * t16364) * t14956 - (-t14948 * t16364 + (t13954 * t14948 - t14231 * t14725 + t14203) * t14947) * t16211 + t15164 * t16444) / ((-pkin(2) * t15960 - t14638 * t14924) * t14956 + t15093) * t16364 + (-(t14912 * t15955 + (t14767 * t16211 + t16007) * t16111 + t14767 * t15656 + t14652) * t15777 + (t14992 * t14081 * t14911 + (-t15469 / 0.2e1 + t14208 * t16466 - ((-pkin(2) * t16264 + t14731) * t14948 + t15865) * t16336) * t16111 - 0.2e1 * (t14767 * t15501 + t14710) * t15774 + pkin(2) * t13960) * t14957 + (t15204 / 0.2e1 + t16562 * pkin(2)) * t16111 + t13960 * t16129 + pkin(2) * t15204 + (-t14231 * t14923 + t15172) * pkin(1) + ((0.3e1 * t14074 + t16628) * t14957 + t16562) * t14860) / (t14956 * t16608 + t15093) * t16355 - ((t15372 + t15191) * t14913 * t15415 * t16257 + (0.4e1 * t15127 + (0.3e1 * (t14671 + t15191) * t15206 - 0.2e1 * t15902 + (-0.2e1 * t13907 + t15524) * pkin(2)) * t14896 + ((t14208 * t15057 + t15469) * t16454 - 0.4e1 * t15205) * t14925 - 0.2e1 * (t14948 * t15864 + t14704 + t15191 * (t14891 * t14948 + pkin(1))) * t15776 - pkin(2) * t15524 + 0.2e1 * t15902 + t13907 * t14987) * t14914 + (-t15123 * t16487 + (-0.2e1 * (t15120 + t16526) * t15416 + t15035) * t14896 + (t15123 + ((-t15668 / 0.2e1 + t16351) * t14873 - t15931 / 0.2e1 + t14187 / 0.2e1 + (t14860 / 0.2e1 + t14818 + t15356) * t14208) * t16257) * t15993 - (0.4e1 * t14743 + t15121 + t16549) * t15416 - t15035) * t14957 - 0.2e1 * t15127 + ((t15642 + t16526) * t15360 + (t14105 - t16533) * t14861 + pkin(2) * t14033) * t16233 + (((t14187 - t15931) * t14948 + pkin(1) * t14000) * t14924 + 0.2e1 * t15417 + (t15191 + t16540) * t15820) * t16185 - (t16488 + (t14654 + t16549) * t14948) * t15391 - (t13985 * t14873 - t14965 * t16533) * t14861 - t14033 * t16441) * t15781) + (-t15106 * t16323 + t15107 * t16320) * t16565;
t16431 = pkin(7) * t13758;
t16619 = t14690 * t16385 - (pkin(2) * t16031 - pkin(7) * t15413) * t14231 + t14017 - t16431;
t15459 = t14210 * t14133;
t15346 = pkin(2) * t15459;
t14019 = -0.2e1 * t15346;
t14691 = pkin(7) * t14960 - t16442;
t16030 = -t14226 - 0.2e1 * t14133;
t16382 = t13777 * t14924;
t14195 = t14210 * pkin(8);
t14196 = t14210 * pkin(7);
t16062 = (t14196 + t14195 - t14125 / 0.2e1) * t14855 - t15895 / 0.2e1;
t13909 = t14174 + t16062;
t16037 = t14196 - t14125;
t13953 = t14195 + t16037;
t15474 = t14965 * t15665;
t15173 = t14210 * t14708 - t15474;
t13961 = -t14232 * t14708 + t15173;
t14035 = t14168 + t14197;
t14819 = pkin(2) * t14865;
t14864 = t14916 * t14993;
t15034 = (t14210 * t15911 + (((t14125 - 0.2e1 * t14195) * pkin(7) + t14199 + pkin(6) * t14116 + t16010 * t14210) * t14950 + t15826) * pkin(3)) * t14951 + ((0.2e1 * t14197 + t16529) * t14951 + t14128) * t14819 + t16636 * t14864;
t15190 = 0.2e1 * t14819 + t14864;
t15056 = t15190 + t16231;
t14482 = (-t14566 * t14959 + (t14950 * t14996 - t15999) * t14924) * t14960;
t15637 = t14916 * t16006;
t15941 = pkin(2) * t16219;
t15092 = t14726 * t15941 - t14951 * t15637 + t14482;
t15104 = t14924 * t15261;
t15105 = t14924 * t15262;
t15768 = t14769 * t16335;
t15122 = t15738 * t15768;
t15407 = t14776 * t15768;
t15197 = t14965 * t15407;
t15125 = t14895 * t15197;
t15478 = t14994 * t15665;
t15165 = t15478 * t16453;
t15177 = -t14232 * t14739 + t13953;
t15196 = t14769 * t15390;
t15405 = t16243 * t16335;
t15406 = t14776 * t15765;
t15507 = t16464 * t16335;
t15827 = t14916 * t16365;
t15525 = pkin(3) * t15827;
t14381 = 0.1e1 / (t14924 * t15183 + t15024);
t15770 = t14381 * t16335;
t15901 = (pkin(6) * t14195 + pkin(7) * t16036 + t15160 * t16365 + t16062) * t14865;
t16110 = 0.2e1 * t14865;
t16262 = t14769 * t14924;
t14486 = -t14769 * t16254 + t14925 * t15738;
t16271 = t14729 * t14776;
t14419 = -t14486 * t14952 + t14961 * t16271;
t14422 = t14486 * t14961 + t14952 * t16271;
t14538 = -t14769 * t16218 + t14776 * t14925;
t14493 = -t14538 * t14952 + t14739 * t14961;
t14496 = t14538 * t14961 + t14739 * t14952;
t15726 = t14776 * t16185;
t14506 = 0.2e1 * t14952 * t15726 + t14961 * t16275;
t15378 = t14961 * t15726;
t15663 = t14952 * t16275;
t14286 = ((-0.2e1 * t15378 + t15663) * t14839 + t14506 * t14835) * t14918 + (t14419 * t14835 + t14422 * t14839) * t14960 + t14965 * (t14493 * t14835 + t14496 * t14839);
t14334 = 0.1e1 / (t14482 + (-t14632 * t14959 + t14950 * t15940 - t15637) * t14951 + t14924 * t15965);
t16319 = t14286 * t14334;
t14283 = (t14506 * t14839 + 0.2e1 * (t15378 - t15663 / 0.2e1) * t14835) * t14918 + (t14419 * t14839 - t14422 * t14835) * t14960 + (t14493 * t14839 - t14496 * t14835) * t14965;
t16322 = t14283 * t14334;
t16525 = t14819 + t14864 - t14816;
t16548 = 0.2e1 * t14816 - t14864;
t16563 = t14084 * t16128 + t14201;
t13759 = -t14994 * ((-(t14950 * t15532 + ((t14816 + t15194) * t14959 + (t14768 + t16413) * pkin(2)) * t16243) * t15766 + ((pkin(2) * t15394 - t14726 * t15405) * t16413 + ((t14133 * t14890 - t14855 * t15177) * t14924 - pkin(2) * t14729 * t15405) * t14959 - (t14950 * t15177 - t16365) * t16451 - t14965 * (t15763 * t15866 + t15165)) * t14960 + t15827 * t16454 + (-t14965 * t14739 * t15507 + (t14726 * t15939 + t14950 * t15959) * t16365) * t14959 - (-t14951 * t16365 + (t13953 * t14951 - t14232 * t14726 + t14201) * t14950) * t16211 + t15165 * t16442) / ((-pkin(2) * t15959 - t14639 * t14924) * t14959 + t15092) * t16365 + (-(t14916 * t15955 + (t14769 * t16211 + t16007) * t16110 + t14769 * t15656 + t14652) * t15766 + (t14992 * t14084 * t14915 + (-t15474 / 0.2e1 + t14210 * t16466 - ((-pkin(2) * t16262 + t14731) * t14951 + t15865) * t16335) * t16110 - 0.2e1 * (t14769 * t15501 + t14710) * t15763 + pkin(2) * t13961) * t14960 + (t15196 / 0.2e1 + t16563 * pkin(2)) * t16110 + t13961 * t16128 + pkin(2) * t15196 + (-t14232 * t14923 + t15173) * pkin(1) + ((0.3e1 * t14075 + t16627) * t14960 + t16563) * t14864) / (t14959 * t16607 + t15092) * t16342 - ((t15372 + t15190) * t14917 * t15405 * t16254 + (0.4e1 * t15125 + (0.3e1 * (t14671 + t15190) * t15198 - 0.2e1 * t15901 + (-0.2e1 * t13909 + t15525) * pkin(2)) * t14896 + ((t14210 * t15056 + t15474) * t16454 - 0.4e1 * t15197) * t14925 - 0.2e1 * (t14951 * t15864 + t14704 + t15190 * (t14891 * t14951 + pkin(1))) * t15765 - pkin(2) * t15525 + 0.2e1 * t15901 + t13909 * t14987) * t14918 + (-t15122 * t16487 + (-0.2e1 * (t15120 + t16525) * t15406 + t15034) * t14896 + (t15122 + ((-t15665 / 0.2e1 + t16338) * t14874 - t15933 / 0.2e1 + t14199 / 0.2e1 + (t14864 / 0.2e1 + t14819 + t15356) * t14210) * t16254) * t15993 - (0.4e1 * t14744 + t15121 + t16548) * t15406 - t15034) * t14960 - 0.2e1 * t15125 + ((t15642 + t16525) * t15358 + (t14104 - t16535) * t14865 + pkin(2) * t14035) * t16233 + (((t14199 - t15933) * t14951 + pkin(1) * t14001) * t14924 + 0.2e1 * t15407 + (t15190 + t16540) * t15814) * t16185 - (t16488 + (t14654 + t16548) * t14951) * t15390 - (t13983 * t14874 - t14965 * t16535) * t14865 - t14035 * t16441) * t15770) + (-t15104 * t16322 + t15105 * t16319) * t16565;
t16430 = pkin(7) * t13759;
t16618 = t14691 * t16382 - (pkin(2) * t16030 - pkin(7) * t15403) * t14232 + t14019 - t16430;
t13729 = t13775 * t16216 - t13757;
t15706 = t14924 * t16197;
t16617 = -t15706 * t14236 - t13729;
t13730 = t13776 * t16214 - t13758;
t15704 = t14924 * t16195;
t16616 = -t15704 * t14237 - t13730;
t13731 = t13777 * t16212 - t13759;
t15702 = t14924 * t16193;
t16615 = -t15702 * t14238 - t13731;
t13778 = t14925 * t13779;
t14756 = pkin(7) * t14939 + pkin(1);
t14158 = t14159 ^ 2;
t16493 = -0.2e1 * t14219;
t15171 = t14159 * t16493 + t14158;
t15523 = pkin(6) * t15709;
t16282 = (pkin(7) * t16169 - pkin(2) + t14845) * t14896;
t16429 = pkin(7) * t13760;
t16614 = -t13778 * t14757 + t15171 * pkin(2) + (t14756 * t14942 + t14845 - t15523 - t16282) * t14222 - t16429;
t13772 = t14925 * t13775;
t14779 = pkin(7) * t14945 + pkin(1);
t14206 = t14209 ^ 2;
t16492 = -0.2e1 * t14230;
t15169 = t14209 * t16492 + t14206;
t15521 = pkin(6) * t15706;
t16281 = (pkin(7) * t16158 - pkin(2) + t14858) * t14896;
t16428 = pkin(7) * t13761;
t16613 = -t13772 * t14782 + t15169 * pkin(2) + (t14779 * t14954 + t14858 - t15521 - t16281) * t14236 - t16428;
t13773 = t14925 * t13776;
t14780 = pkin(7) * t14948 + pkin(1);
t14205 = t14208 ^ 2;
t16491 = -0.2e1 * t14231;
t15170 = t14208 * t16491 + t14205;
t15520 = pkin(6) * t15704;
t16280 = (pkin(7) * t16148 - pkin(2) + t14862) * t14896;
t16427 = pkin(7) * t13762;
t16612 = -t13773 * t14783 + t15170 * pkin(2) + (t14780 * t14957 + t14862 - t15520 - t16280) * t14237 - t16427;
t13774 = t14925 * t13777;
t14781 = pkin(7) * t14951 + pkin(1);
t14207 = t14210 ^ 2;
t16490 = -0.2e1 * t14232;
t15168 = t14210 * t16490 + t14207;
t15519 = pkin(6) * t15702;
t16279 = (pkin(7) * t16138 - pkin(2) + t14866) * t14896;
t16426 = pkin(7) * t13763;
t16611 = -t13774 * t14784 + t15168 * pkin(2) + (t14781 * t14960 + t14866 - t15519 - t16279) * t14238 - t16426;
t14665 = t14846 + t14756;
t15995 = 0.2e1 * t13779;
t16433 = pkin(7) * t13756;
t16595 = -t14924 * (t13756 * t16574 + (pkin(6) * t13760 + t16433) * t14939) - (-t14665 * t14942 + t16282) * t15995 - (-t13760 * t14758 + t15910 * t15995) * t14925;
t14673 = t14859 + t14779;
t15998 = 0.2e1 * t13775;
t16594 = t14924 * (t13757 * t16573 + (pkin(6) * t13761 + t16432) * t14945) + (-t14673 * t14954 + t16281) * t15998 + (-t13761 * t14785 + t15909 * t15998) * t14925;
t14675 = t14863 + t14780;
t15997 = 0.2e1 * t13776;
t16593 = t14924 * (t13758 * t16572 + (pkin(6) * t13762 + t16431) * t14948) + (-t14675 * t14957 + t16280) * t15997 + (-t13762 * t14786 + t15908 * t15997) * t14925;
t14677 = t14867 + t14781;
t15996 = 0.2e1 * t13777;
t16592 = t14924 * (t13759 * t16571 + (pkin(6) * t13763 + t16430) * t14951) + (-t14677 * t14960 + t16279) * t15996 + (-t13763 * t14787 + t15907 * t15996) * t14925;
t16587 = 0.2e1 * t14159;
t16586 = 0.2e1 * t14924;
t16407 = t16464 * pkin(6);
t16352 = t14208 * t14956;
t16345 = t14209 * t14953;
t16339 = t14210 * t14959;
t14804 = t14901 - 0.1e1 / 0.2e1;
t15570 = t14804 * t15984;
t16515 = pkin(2) * t15570 + t14656 * t16270 + t14844 * (t14752 * t16224 + t15570) - t15719 * t16199;
t14806 = t14910 - 0.1e1 / 0.2e1;
t15655 = -0.2e1 * t15938;
t16514 = t14660 * t16266 - t14806 * t15655 + t14857 * (t14765 * t16216 + t14806 * t15984) - t15718 * t16191;
t14807 = t14914 - 0.1e1 / 0.2e1;
t16513 = t14661 * t16264 - t14807 * t15655 + t14861 * (t14767 * t16214 + t14807 * t15984) - t15717 * t16189;
t14808 = t14918 - 0.1e1 / 0.2e1;
t16512 = t14662 * t16262 - t14808 * t15655 + t14865 * (t14769 * t16212 + t14808 * t15984) - t15716 * t16187;
t16502 = 0.2e1 * pkin(7);
t16501 = 0.2e1 * t14213 - 0.2e1 * t15502;
t16500 = 0.2e1 * t14224 + t14131;
t16499 = 0.2e1 * t14225 + t14135;
t16498 = 0.2e1 * t14226 + t14133;
t16497 = -0.2e1 * t14159;
t16496 = -0.2e1 * t14208;
t16495 = -0.2e1 * t14209;
t16494 = -0.2e1 * t14210;
t16483 = -0.2e1 * t14910;
t16482 = -0.2e1 * t14914;
t16481 = -0.2e1 * t14918;
t16480 = -0.2e1 * t14924;
t16478 = -0.2e1 * t14925;
t16477 = -0.2e1 * t14938;
t16476 = -0.2e1 * t14941;
t16474 = -0.2e1 * t14944;
t16473 = -0.2e1 * t14947;
t16472 = -0.2e1 * t14950;
t16471 = -0.2e1 * t14953;
t16470 = -0.2e1 * t14956;
t16469 = -0.2e1 * t14959;
t16465 = -0.4e1 * t14896 + 0.4e1;
t16463 = t16484 - 0.2e1;
t16461 = 0.4e1 * t14899 - 0.2e1;
t16460 = 0.2e1 * t14908 - 0.1e1;
t16459 = 0.4e1 * t14908 - 0.2e1;
t16458 = 0.2e1 * t14912 - 0.1e1;
t16457 = 0.4e1 * t14912 - 0.2e1;
t16456 = 0.2e1 * t14916 - 0.1e1;
t16455 = 0.4e1 * t14916 - 0.2e1;
t16439 = pkin(6) * t14924;
t14894 = t14924 ^ 2;
t16405 = MDP(4) * t14894;
t16404 = MDP(5) * t14894;
t16403 = MDP(6) * t14924;
t16402 = MDP(7) * t14924;
t16397 = t13725 * t14942;
t16396 = t13729 * t14954;
t16395 = t13730 * t14957;
t16394 = t13731 * t14960;
t16389 = t13775 * t14945 ^ 2;
t16387 = t13775 * t14954;
t16386 = t13776 * t14948 ^ 2;
t16384 = t13776 * t14957;
t16383 = t13777 * t14951 ^ 2;
t16381 = t13777 * t14960;
t16380 = t13779 * t14939 ^ 2;
t16379 = t13779 * t14924;
t16378 = t13779 * t14942;
t16359 = t14159 * t14941;
t16356 = t14208 * t14245;
t16350 = t14209 * t14244;
t16343 = t14210 * t14246;
t14644 = t14940 * t14980 - t14943 * t14976;
t14645 = t14940 * t14976 + t14943 * t14980;
t14508 = t14644 * t14888 + t14645 * t14889;
t15272 = t14644 * t14889 - t14645 * t14888;
t14404 = t14508 * t14836 - t14832 * t15272;
t16334 = (t15091 * (t14508 * t14832 + t14836 * t15272) + (-t16021 * t14896 + ((t14826 * t14844 + t14608) * t14938 - t16438) * t16227 + (-t14751 * t14896 - t16606) * t14939) * t14404) / (-t14523 + t14924 * ((pkin(2) * t14640 + t14844 * t16574) * t14938 - t15650 * t16438));
t14648 = t14949 * t14982 - t14958 * t14978;
t14649 = t14949 * t14978 + t14958 * t14982;
t14510 = t14648 * t14888 + t14649 * t14889;
t15270 = t14648 * t14889 - t14649 * t14888;
t14409 = t14510 * t14838 - t14834 * t15270;
t16333 = (t15089 * (t14834 * t14510 + t14838 * t15270) + (-t16019 * t14896 + ((t14828 * t14861 + t14616) * t14947 - t16436) * t16227 + (-t14766 * t14896 - t16604) * t14948) * t14409) / (-t14525 + t14924 * ((pkin(2) * t14642 + t14861 * t16572) * t14947 - t15648 * t16436));
t14650 = t14952 * t14983 - t14961 * t14979;
t14651 = t14952 * t14979 + t14961 * t14983;
t14511 = t14650 * t14888 + t14651 * t14889;
t15269 = t14650 * t14889 - t14651 * t14888;
t14411 = t14511 * t14839 - t14835 * t15269;
t16332 = (t15088 * (t14835 * t14511 + t14839 * t15269) + (-t16018 * t14896 + ((t14829 * t14865 + t14617) * t14950 - t16435) * t16227 + (-t14768 * t14896 - t16603) * t14951) * t14411) / (-t14526 + ((pkin(2) * t14643 + t14865 * t16571) * t14950 - t15647 * t16435) * t14924);
t14646 = t14946 * t14981 - t14955 * t14977;
t14647 = t14946 * t14977 + t14955 * t14981;
t14509 = t14646 * t14888 + t14647 * t14889;
t15271 = t14646 * t14889 - t14647 * t14888;
t14407 = t14509 * t14837 - t14833 * t15271;
t16331 = (t15090 * (t14509 * t14833 + t14837 * t15271) + (-t16020 * t14896 + ((t14827 * t14857 + t14615) * t14944 - t16437) * t16227 + (-t14764 * t14896 - t16605) * t14945) * t14407) / (-t14524 + t14924 * ((pkin(2) * t14641 + t14857 * t16573) * t14944 - t15649 * t16437));
t16123 = t14965 * t14980;
t16127 = t14965 * t14976;
t16184 = t14925 * t14976;
t14455 = (pkin(2) * t14980 - t14925 * t16127) * t14942 + (pkin(2) * t16184 + t16123) * t14939 - t14976 * t15926;
t16180 = t14925 * t14980;
t14456 = (pkin(2) * t14976 + t14925 * t16123) * t14942 + (-pkin(2) * t16180 + t16127) * t14939 + t14980 * t15926;
t14338 = t14455 * t14943 + t14456 * t14940;
t14339 = -t14455 * t14940 + t14456 * t14943;
t14609 = t14939 * t16184 + t14942 * t14980;
t14610 = t14939 * t16180 - t14942 * t14976;
t14489 = t14609 * t14943 - t14610 * t14940;
t14490 = t14609 * t14940 + t14610 * t14943;
t14255 = -((-t14489 * t14888 + t14490 * t14889) * t14836 + (t14489 * t14889 + t14490 * t14888) * t14832) * t16416 + ((t14338 * t14888 + t14339 * t14889) * t14836 - (t14338 * t14889 - t14339 * t14888) * t14832) * t14941 + t14404 * t15944;
t16330 = t14255 * t16652;
t16122 = t14965 * t14981;
t16126 = t14965 * t14977;
t16183 = t14925 * t14977;
t14462 = (pkin(2) * t14981 - t14925 * t16126) * t14954 + (pkin(2) * t16183 + t16122) * t14945 - t14977 * t15925;
t16179 = t14925 * t14981;
t14465 = (pkin(2) * t14977 + t14925 * t16122) * t14954 + (-pkin(2) * t16179 + t16126) * t14945 + t14981 * t15925;
t14341 = t14462 * t14955 + t14465 * t14946;
t14344 = -t14462 * t14946 + t14465 * t14955;
t14618 = t14945 * t16183 + t14954 * t14981;
t14621 = t14945 * t16179 - t14954 * t14977;
t14497 = t14618 * t14955 - t14621 * t14946;
t14500 = t14618 * t14946 + t14621 * t14955;
t14256 = -((-t14497 * t14888 + t14500 * t14889) * t14837 + (t14497 * t14889 + t14500 * t14888) * t14833) * t16415 + ((t14341 * t14888 + t14344 * t14889) * t14837 - (t14341 * t14889 - t14344 * t14888) * t14833) * t14953 + t14407 * t15943;
t16329 = t14256 * t16653;
t16121 = t14965 * t14982;
t16125 = t14965 * t14978;
t16182 = t14925 * t14978;
t14463 = (pkin(2) * t14982 - t14925 * t16125) * t14957 + (pkin(2) * t16182 + t16121) * t14948 - t14978 * t15924;
t16178 = t14925 * t14982;
t14466 = (pkin(2) * t14978 + t14925 * t16121) * t14957 + (-pkin(2) * t16178 + t16125) * t14948 + t14982 * t15924;
t14342 = t14463 * t14958 + t14466 * t14949;
t14345 = -t14463 * t14949 + t14466 * t14958;
t14619 = t14948 * t16182 + t14957 * t14982;
t14622 = t14948 * t16178 - t14957 * t14978;
t14498 = t14619 * t14958 - t14622 * t14949;
t14501 = t14619 * t14949 + t14622 * t14958;
t14257 = -((-t14498 * t14888 + t14501 * t14889) * t14838 + (t14498 * t14889 + t14501 * t14888) * t14834) * t16414 + ((t14342 * t14888 + t14345 * t14889) * t14838 - (t14342 * t14889 - t14345 * t14888) * t14834) * t14956 + t14409 * t15942;
t16328 = t14257 * t16654;
t16120 = t14965 * t14983;
t16124 = t14965 * t14979;
t16181 = t14925 * t14979;
t14464 = (pkin(2) * t14983 - t14925 * t16124) * t14960 + (pkin(2) * t16181 + t16120) * t14951 - t14979 * t15923;
t16177 = t14925 * t14983;
t14467 = (pkin(2) * t14979 + t14925 * t16120) * t14960 + (-pkin(2) * t16177 + t16124) * t14951 + t14983 * t15923;
t14343 = t14464 * t14961 + t14467 * t14952;
t14346 = -t14464 * t14952 + t14467 * t14961;
t14620 = t14951 * t16181 + t14960 * t14983;
t14623 = t14951 * t16177 - t14960 * t14979;
t14499 = t14620 * t14961 - t14623 * t14952;
t14502 = t14620 * t14952 + t14623 * t14961;
t14258 = -((-t14499 * t14888 + t14502 * t14889) * t14839 + (t14499 * t14889 + t14502 * t14888) * t14835) * t16413 + ((t14343 * t14888 + t14346 * t14889) * t14839 - (t14343 * t14889 - t14346 * t14888) * t14835) * t14959 + t14411 * t15941;
t16327 = t14258 * t16655;
t16318 = t14287 * t14376;
t16317 = t14288 * t14376;
t16316 = t14289 * t14384;
t16315 = t14290 * t14384;
t16314 = t14291 * t14385;
t16313 = t14292 * t14385;
t16312 = t14293 * t14386;
t16311 = t14294 * t14386;
t16310 = t14295 * t14362;
t16309 = t14296 * t14362;
t16308 = t14297 * t14372;
t16307 = t14298 * t14372;
t16306 = t14299 * t14374;
t16305 = t14300 * t14374;
t16304 = t14301 * t14370;
t16303 = t14302 * t14370;
t14307 = t14887 * t14942 + (-t14752 * t15708 - t14732 + (t14896 - 0.2e1 * t15725) * t14965) * t14753 + ((t14896 * t16278 - t15059) * t14942 - t14752 * t15698) * t14939;
t16302 = t14307 * t14375;
t14308 = t14887 * t14954 + (-t14765 * t15701 - t14737 + (t14896 - 0.2e1 * t15724) * t14965) * t14770 + ((t14896 * t16277 - t15058) * t14954 - t14765 * t15698) * t14945;
t16301 = t14308 * t14379;
t14309 = t14887 * t14957 + (-t14767 * t15700 - t14738 + (t14896 - 0.2e1 * t15723) * t14965) * t14773 + ((t14896 * t16276 - t15057) * t14957 - t14767 * t15698) * t14948;
t16300 = t14309 * t14380;
t14310 = t14887 * t14960 + (-t14769 * t15699 - t14739 + (t14896 - 0.2e1 * t15722) * t14965) * t14776 + ((t14896 * t16275 - t15056) * t14960 - t14769 * t15698) * t14951;
t16299 = t14310 * t14381;
t15506 = t16462 * t16225;
t16175 = t14938 * t14941;
t16298 = ((-t16227 * t16551 + t16407) * t14941 + (-t14608 * t14896 + t14640 * t14942 - t15523) * t14938 + (t14925 * t15506 - t15500 * t16175) * pkin(3)) * t14360;
t15535 = -t14910 + t16246;
t15499 = t15535 + 0.1e1;
t15505 = t16460 * t16222;
t16297 = ((t16227 * t16547 + t16407) * t14953 + (-t14615 * t14896 + t14641 * t14954 - t15521) * t14944 + (t14925 * t15505 - t15499 * t16164) * pkin(3)) * t14367;
t15534 = -t14914 + t16245;
t15498 = t15534 + 0.1e1;
t15504 = t16458 * t16220;
t16296 = ((t16227 * t16546 + t16407) * t14956 + (-t14616 * t14896 + t14642 * t14957 - t15520) * t14947 + (t14925 * t15504 - t15498 * t16154) * pkin(3)) * t14368;
t15533 = -t14918 + t16244;
t15497 = t15533 + 0.1e1;
t15503 = t16456 * t16218;
t16295 = ((t16227 * t16545 + t16407) * t14959 + (-t14617 * t14896 + t14643 * t14960 - t15519) * t14950 + (t14925 * t15503 - t15497 * t16144) * pkin(3)) * t14366;
t14443 = -pkin(2) * t16202 - t14924 * t15892 + t16651 * t14941;
t16294 = t14362 * t14443;
t14448 = -pkin(2) * t16194 - t14924 * t15887 + t14959 * t16598;
t16293 = t14370 * t14448;
t14446 = -pkin(2) * t16198 - t14924 * t15889 + t14953 * t16596;
t16292 = t14372 * t14446;
t14447 = -pkin(2) * t16196 - t14924 * t15888 + t14956 * t16597;
t16291 = t14374 * t14447;
t16237 = t14894 * t14994;
t16217 = t14924 * t14953;
t16215 = t14924 * t14956;
t16213 = t14924 * t14959;
t16209 = t14925 * t13760;
t16208 = t14925 * t13761;
t16207 = t14925 * t13762;
t16206 = t14925 * t13763;
t14686 = pkin(7) * t14942 - t16448;
t15985 = -0.2e1 * t16227;
t15987 = t16463 * pkin(6);
t13656 = t13756 * t14757 * t14925 + ((pkin(6) * t13756 - t16429) * t14942 + t13760 * t16448) * t14924 + (t14686 * t15985 + t15987) * t13779;
t15468 = t14159 * t15830;
t13895 = (-pkin(7) * t14158 + t15468 * t16503 + t14095) * t14939 + pkin(1) * t14099;
t13994 = t14158 + t14099;
t13906 = t14095 + (pkin(1) * t13994 - t15083) * t14939;
t15467 = t14159 * t15803;
t13932 = t13994 * t16439 + t15467 * t16506;
t16048 = t14152 - t14097;
t13943 = t14146 + t16048;
t15486 = t14941 * t15830;
t15339 = pkin(2) * t15486;
t13987 = t16361 * t16502 + t15339;
t13993 = -t14153 + t14096;
t14032 = t14098 - t15531;
t15348 = pkin(2) * t15468;
t15032 = t15445 * t16048 - t15348;
t15134 = t14756 * t15238;
t15575 = 0.2e1 * t15806;
t15576 = -0.2e1 * t15807;
t16045 = t14158 - t14099;
t16109 = (t13987 * t14901 + (pkin(7) * t15486 + t16361 * t16505) * t16169 - t15339) * t15576 + ((t13993 * t15446 - t14032 * t16359) * t16585 + t15032 * t15992) * t14925 + t13987 * t15575 - 0.2e1 * t13943 * t15804 + (t13906 * t14925 + t13932 * t14942 - t15576 * t16048 - t16595) * t14938 + (-t13656 + (-t16045 * t16451 + 0.2e1 * t15134) * t14942 + t13895 * t14924) * t14941;
t15340 = pkin(2) * t15488;
t15986 = -0.2e1 * t16359;
t13986 = pkin(7) * t15986 + t15340;
t15802 = t14941 * t14223;
t16108 = t16595 * t14941 - t14938 * t13656 + (t13986 * t14901 + (pkin(7) * t15488 + t14941 * t16117) * t16169 + t16048 * t14941 - t15340) * t15576 + ((-t13993 * t14924 * t15802 - t14032 * t16361) * t16585 - t13906 * t14941 + 0.2e1 * t15032 * t14938) * t14925 + t13986 * t15575 + (-t13932 * t14941 + (-t15134 + (-t14099 / 0.2e1 + t14158 / 0.2e1) * t16451) * t16477) * t14942 + 0.2e1 * t13943 * t15802 + t13895 * t16226;
t15744 = t14689 * t16227;
t13657 = t13757 * t14782 * t14925 + ((pkin(6) * t13757 - t16428) * t14954 + t13761 * t16446) * t14924 + (-0.2e1 * t15744 + t15987) * t13775;
t13903 = (-pkin(7) * t14206 + t15462 * t16503 + t14121) * t14945 + pkin(1) * t14130;
t14021 = t14206 + t14130;
t13910 = t14121 + (pkin(1) * t14021 - t15082) * t14945;
t13950 = t14170 + t16039;
t15481 = t14953 * t14131;
t15337 = pkin(2) * t15481;
t13996 = t16347 * t16502 + t15337;
t14015 = t14191 - t14122;
t14051 = t14127 - t15530;
t15130 = t14779 * t15216;
t15260 = t16039 * t15423;
t15917 = t14021 * t16439;
t16034 = t14206 - t14130;
t16107 = t16594 * t14944 - t14953 * t13657 - 0.2e1 * (t13996 * t14910 + (pkin(7) * t15481 + t16347 * t16505) * t16158 - t15337 - t14944 * t16039) * t15789 + ((-t14015 * t15424 - t14051 * t16345) * t15990 + (t14018 + 0.2e1 * t15260) * t14953 + t13910 * t14944) * t14925 + 0.2e1 * t13996 * t15788 + (-t15130 * t16471 + t14944 * t15917 + (-0.4e1 * t14209 * t15422 - t16034 * t16217) * pkin(2)) * t14954 + t13903 * t16217 - 0.2e1 * t13950 * t15786;
t15291 = t15483 / 0.2e1;
t15326 = pkin(2) * t15483;
t15461 = t14209 * t15785;
t15784 = t14953 * t16337;
t15886 = pkin(7) * t16345;
t16106 = -t16594 * t14953 - t13657 * t14944 + 0.4e1 * ((t15886 - t15326 / 0.2e1) * t14910 - (pkin(2) * t16345 + pkin(7) * t15291) * t16158 + (t14124 / 0.2e1 - t14190 / 0.2e1) * t14953 + pkin(2) * t15291) * t15789 + ((t14015 * t14924 * t15784 - t14051 * t16347) * t15990 - t13910 * t14953 + 0.2e1 * (t15260 - t15347) * t14944) * t14925 - (-0.2e1 * t15326 + 0.4e1 * t15886) * t15788 + ((-t15461 * t16506 - t15917) * t14953 + ((t14206 / 0.2e1 - t14130 / 0.2e1) * t16451 - t15130) * t16474) * t14954 + 0.2e1 * t13950 * t15784 + t13903 * t16223;
t15743 = t14690 * t16227;
t13658 = t13758 * t14783 * t14925 + ((pkin(6) * t13758 - t16427) * t14957 + t13762 * t16444) * t14924 + (-0.2e1 * t15743 + t15987) * t13776;
t13902 = (-pkin(7) * t14205 + t15465 * t16503 + t14118) * t14948 + pkin(1) * t14134;
t14020 = t14205 + t14134;
t13912 = t14118 + (pkin(1) * t14020 - t15080) * t14948;
t13949 = t14169 + t16041;
t15471 = t14956 * t14135;
t15333 = pkin(2) * t15471;
t13998 = t16354 * t16502 + t15333;
t14014 = t14186 - t14123;
t14052 = t14129 - t15529;
t15128 = t14780 * t15208;
t15258 = t16041 * t15413;
t15918 = t14020 * t16439;
t16035 = t14205 - t14134;
t16105 = t16593 * t14947 - t13658 * t14956 - 0.2e1 * (t13998 * t14914 + (pkin(7) * t15471 + t16354 * t16505) * t16148 - t15333 - t14947 * t16041) * t15778 + ((-t14014 * t15414 - t14052 * t16352) * t15989 + (t14017 + 0.2e1 * t15258) * t14956 + t13912 * t14947) * t14925 + 0.2e1 * t13998 * t15777 + (-t15128 * t16470 + t14947 * t15918 + (-0.4e1 * t14208 * t15412 - t16035 * t16215) * pkin(2)) * t14957 + t13902 * t16215 - 0.2e1 * t13949 * t15775;
t15289 = t15473 / 0.2e1;
t15325 = pkin(2) * t15473;
t15464 = t14208 * t15774;
t15773 = t14956 * t16336;
t15884 = pkin(7) * t16352;
t16104 = -t16593 * t14956 - t13658 * t14947 + 0.4e1 * ((t15884 - t15325 / 0.2e1) * t14914 - (pkin(2) * t16352 + pkin(7) * t15289) * t16148 + (t14126 / 0.2e1 - t14185 / 0.2e1) * t14956 + pkin(2) * t15289) * t15778 + ((t14014 * t14924 * t15773 - t14052 * t16354) * t15989 - t13912 * t14956 + 0.2e1 * (t15258 - t15331) * t14947) * t14925 - (-0.2e1 * t15325 + 0.4e1 * t15884) * t15777 + ((-t15464 * t16506 - t15918) * t14956 + ((t14205 / 0.2e1 - t14134 / 0.2e1) * t16451 - t15128) * t16473) * t14957 + 0.2e1 * t13949 * t15773 + t13902 * t16221;
t15742 = t14691 * t16227;
t13659 = t13759 * t14784 * t14925 + ((pkin(6) * t13759 - t16426) * t14960 + t13763 * t16442) * t14924 + (-0.2e1 * t15742 + t15987) * t13777;
t13904 = (-pkin(7) * t14207 + t15459 * t16503 + t14115) * t14951 + pkin(1) * t14132;
t14022 = t14207 + t14132;
t13911 = t14115 + (pkin(1) * t14022 - t15081) * t14951;
t13951 = t14171 + t16037;
t15476 = t14959 * t14133;
t15335 = pkin(2) * t15476;
t13997 = t16341 * t16502 + t15335;
t14016 = t14197 - t14117;
t14053 = t14128 - t15528;
t15126 = t14781 * t15200;
t15259 = t16037 * t15403;
t15916 = t14022 * t16439;
t16033 = t14207 - t14132;
t16103 = t16592 * t14950 - t13659 * t14959 - 0.2e1 * (t13997 * t14918 + (pkin(7) * t15476 + t16341 * t16505) * t16138 - t15335 - t14950 * t16037) * t15767 + ((-t14016 * t15404 - t14053 * t16339) * t15988 + (t14019 + 0.2e1 * t15259) * t14959 + t13911 * t14950) * t14925 + 0.2e1 * t13997 * t15766 + (-t15126 * t16469 + t14950 * t15916 + (-0.4e1 * t14210 * t15402 - t16033 * t16213) * pkin(2)) * t14960 + t13904 * t16213 - 0.2e1 * t13951 * t15764;
t15290 = t15478 / 0.2e1;
t15324 = pkin(2) * t15478;
t15458 = t14210 * t15763;
t15762 = t14959 * t16335;
t15882 = pkin(7) * t16339;
t16102 = -t16592 * t14959 - t13659 * t14950 + 0.4e1 * ((t15882 - t15324 / 0.2e1) * t14918 - (pkin(2) * t16339 + pkin(7) * t15290) * t16138 + (t14125 / 0.2e1 - t14196 / 0.2e1) * t14959 + pkin(2) * t15290) * t15767 + ((t14016 * t14924 * t15762 - t14053 * t16341) * t15988 - t13911 * t14959 + 0.2e1 * (t15259 - t15346) * t14950) * t14925 - (-0.2e1 * t15324 + 0.4e1 * t15882) * t15766 + ((-t15458 * t16506 - t15916) * t14959 + ((t14207 / 0.2e1 - t14132 / 0.2e1) * t16451 - t15126) * t16472) * t14960 + 0.2e1 * t13951 * t15762 + t13904 * t16219;
t13697 = t13779 * t15536 + t13779 - t16209;
t15295 = t14942 * t15510;
t13881 = -t15138 * t16478 + (-t15295 - t15396) * t14159;
t15672 = t14158 * t16224;
t15674 = t14938 * t16170;
t15823 = (-t14213 + t15830) * t16205;
t13734 = t13778 + t15496 / 0.2e1 - t15842 / 0.2e1 + t13809 / 0.2e1 + (t15119 / 0.2e1 - t15118 / 0.2e1) * t15875;
t15862 = t13734 * t16225;
t15983 = -0.2e1 * t16175;
t16101 = t13697 * t15983 + t15862 * t16461 + (0.2e1 * t15672 + 0.4e1 * t15823) * t14899 + 0.4e1 * t13881 * t15674 - 0.2e1 * t15823 - t15672 + 0.2e1 * t16462 * t16626;
t13737 = t13778 + t13760;
t14056 = -t14219 + t14259 / 0.2e1 - t15753 / 0.2e1 - t15660 / 0.2e1;
t15389 = t14924 * t15674;
t16100 = t13697 * t14899 + 0.2e1 * t13734 * t15389 + t13737 * t14925 + (-t15823 - t15672 / 0.2e1 - t16626) * t15983 + 0.2e1 * (-t13881 * t14899 - t14056 * t15396) * t14939;
t13701 = t13775 * t15535 + t13775 - t16208;
t15294 = t14954 * t15509;
t13883 = -t15137 * t16478 + (-t15294 - t15395) * t14209;
t15662 = t14206 * t16216;
t15670 = t14944 * t16159;
t15818 = (-t14224 + t14131) * t16348;
t13744 = t13772 + t15495 / 0.2e1 + (-t16377 / 0.2e1 - t15841 / 0.2e1) * t14372 + (t15117 / 0.2e1 - t15116 / 0.2e1) * t15874;
t15861 = t13744 * t16222;
t15982 = -0.2e1 * t16164;
t16099 = t13701 * t15982 + t15861 * t16459 + (0.2e1 * t15662 + 0.4e1 * t15818) * t14908 + 0.4e1 * t13883 * t15670 - 0.2e1 * t15818 - t15662 - (-0.4e1 * t14908 * t15499 + 0.2e1 * t16246 + t16483 + 0.2e1) * t15216;
t13702 = t13776 * t15534 + t13776 - t16207;
t15293 = t14957 * t15508;
t13882 = -t15135 * t16478 + (-t15293 - t15393) * t14208;
t15661 = t14205 * t16214;
t15667 = t14947 * t16149;
t15821 = (-t14225 + t14135) * t16204;
t13745 = t13773 + t15494 / 0.2e1 + (-t16376 / 0.2e1 - t15840 / 0.2e1) * t14374 + (t15115 / 0.2e1 - t15114 / 0.2e1) * t15873;
t15860 = t13745 * t16220;
t15980 = -0.2e1 * t16154;
t16098 = t13702 * t15980 + t15860 * t16457 + (0.2e1 * t15661 + 0.4e1 * t15821) * t14912 + 0.4e1 * t13882 * t15667 - 0.2e1 * t15821 - t15661 - (-0.4e1 * t14912 * t15498 + 0.2e1 * t16245 + t16482 + 0.2e1) * t15208;
t13703 = t13777 * t15533 + t13777 - t16206;
t15292 = t14960 * t15507;
t13884 = -t15136 * t16478 + (-t15292 - t15394) * t14210;
t15664 = t14950 * t16139;
t15681 = t14207 * t16212;
t15815 = (-t14226 + t14133) * t16203;
t13746 = t13774 + t15493 / 0.2e1 + (-t16375 / 0.2e1 - t15839 / 0.2e1) * t14370 + (t15113 / 0.2e1 - t15112 / 0.2e1) * t15872;
t15859 = t13746 * t16218;
t15978 = -0.2e1 * t16144;
t16097 = t13703 * t15978 + t15859 * t16455 + (0.2e1 * t15681 + 0.4e1 * t15815) * t14916 + 0.4e1 * t13884 * t15664 - 0.2e1 * t15815 - t15681 - (-0.4e1 * t14916 * t15497 + 0.2e1 * t16244 + t16481 + 0.2e1) * t15200;
t13751 = t13772 + t13761;
t14067 = -t14230 + t14261 / 0.2e1 - t15759 / 0.2e1 - t15659 / 0.2e1;
t15387 = t14924 * t15670;
t16096 = t13701 * t14908 + 0.2e1 * t13744 * t15387 + t13751 * t14925 + (-t15818 - t15662 / 0.2e1 - t15499 * t15216) * t15982 + (-t13883 * t14908 - t14067 * t15395) * t16584;
t13753 = t13773 + t13762;
t14068 = -t14231 + t14260 / 0.2e1 - t15754 / 0.2e1 - t15757 / 0.2e1;
t15385 = t14924 * t15667;
t16095 = t13702 * t14912 + 0.2e1 * t13745 * t15385 + t13753 * t14925 + (-t15821 - t15661 / 0.2e1 - t15498 * t15208) * t15980 + (-t13882 * t14912 - t14068 * t15393) * t16583;
t13755 = t13774 + t13763;
t14069 = -t14232 + t14262 / 0.2e1 - t15758 / 0.2e1 - t15756 / 0.2e1;
t15383 = t14924 * t15664;
t16094 = t13703 * t14916 + 0.2e1 * t13746 * t15383 + t13755 * t14925 + (-t15815 - t15681 / 0.2e1 - t15497 * t15200) * t15978 + (-t13884 * t14916 - t14069 * t15394) * t16582;
t15099 = t15238 * t16585;
t13928 = t14924 * t16045 - t15099;
t13945 = -t14924 * t15099 - t14099;
t15253 = t14939 * t15485;
t16093 = -t14924 * t13760 * t16166 - t13756 * (t15696 - t16200) + (t14941 * t15985 - t16176 * t16463) * t16378 + t13928 * t16170 + t13945 * t16202 - (t14896 * t15253 * t16476 + (t14804 * t14938 * t16465 + t15680 * t16586) * t14159) * t14223;
t15694 = t14924 * t16170;
t16092 = -t13760 * t15695 + t13756 * (t15694 + t16202) + (t14938 * t15985 + t16170 * t16463) * t16378 + t13928 * t16176 - t13945 * t16200 + (-((t14159 - 0.2e1 * t16363) * t14941 + t14938 * t15253) * t14896 + t14925 * t15466 + t14804 * t15986) * t15632;
t13724 = -t14686 * t16379 + t16433;
t13889 = -(-t15445 * t14972 + (t14213 / 0.2e1 + t15830) * pkin(2)) * t14219 + t15348;
t16091 = -t13724 * t14941 + t13889 * t16476 + t14938 * t16625;
t16090 = -t13724 * t14938 + t13889 * t16477 - t14941 * t16625;
t15098 = t15216 * t15990;
t13929 = t14924 * t16034 - t15098;
t13955 = -t14924 * t15098 - t14130;
t16089 = -t14924 * t13761 * t16135 - t13757 * (t15692 - t16192) + (t14953 * t15985 - t16165 * t16463) * t16387 + t13929 * t16159 + t13955 * t16198 - (t14896 * t15252 * t16471 + (t14806 * t14944 * t16465 + t15679 * t16586) * t14209) * t16337;
t15097 = t15208 * t15989;
t13930 = t14924 * t16035 - t15097;
t13956 = -t14924 * t15097 - t14134;
t16088 = -t14924 * t13762 * t16134 - t13758 * (t15687 - t16190) + (t14956 * t15985 - t16155 * t16463) * t16384 + t13930 * t16149 + t13956 * t16196 - (t14896 * t15250 * t16470 + (t14807 * t14947 * t16465 + t15678 * t16586) * t14208) * t16336;
t15096 = t15200 * t15988;
t13931 = t14924 * t16033 - t15096;
t13957 = -t14924 * t15096 - t14132;
t16087 = -t14924 * t13763 * t16133 - t13759 * (t15684 - t16188) + (t14959 * t15985 - t16145 * t16463) * t16381 + t13931 * t16139 + t13957 * t16194 - (t14896 * t15251 * t16469 + (t14808 * t14950 * t16465 + t15677 * t16586) * t14210) * t16335;
t15690 = t14924 * t16159;
t16086 = -t13761 * t15691 + t13757 * (t15690 + t16198) + (t16159 * t16463 - 0.2e1 * t15707) * t16387 + t13929 * t16165 - t13955 * t16192 + (-((t16483 + 0.1e1) * t16345 + t14944 * t15252) * t14896 + t14925 * t15460 - 0.2e1 * t14806 * t16345) * t15631;
t15685 = t14924 * t16149;
t16085 = -t13762 * t15686 + t13758 * (t15685 + t16196) + (t16149 * t16463 - 0.2e1 * t15705) * t16384 + t13930 * t16155 - t13956 * t16190 + (-((t16482 + 0.1e1) * t16352 + t14947 * t15250) * t14896 + t14925 * t15463 - 0.2e1 * t14807 * t16352) * t15630;
t15682 = t14924 * t16139;
t16084 = -t13763 * t15683 + t13759 * (t15682 + t16194) + (t16139 * t16463 - 0.2e1 * t15703) * t16381 + t13931 * t16145 - t13957 * t16188 + (-((t16481 + 0.1e1) * t16339 + t14950 * t15251) * t14896 + t14925 * t15457 - 0.2e1 * t14808 * t16339) * t15629;
t16083 = t14944 * t16624 + t14953 * t16620;
t16082 = t14944 * t16620 - t14953 * t16624;
t16081 = t14947 * t16623 + t14956 * t16619;
t16080 = t14947 * t16619 - t14956 * t16623;
t16079 = t14950 * t16622 + t14959 * t16618;
t16078 = t14950 * t16618 - t14959 * t16622;
t13962 = -t15295 + 0.2e1 * t15396;
t15444 = t14939 * t15802;
t15811 = t14942 * t14222;
t16061 = -(-t14213 - 0.2e1 * t15830) * t14219 - 0.2e1 * t15468;
t16077 = 0.2e1 * t13737 * t16175 + t13779 * t15506 + ((t15811 * t16480 - 0.4e1 * t15238) * t14925 + 0.4e1 * t15468) * t14899 - t13962 * t15444 * t16477 + t16061;
t13967 = -t15292 + 0.2e1 * t15394;
t15401 = t14951 * t15762;
t15793 = t14960 * t14238;
t16058 = -t16030 * t14232 - 0.2e1 * t15459;
t16076 = 0.2e1 * t13755 * t16144 + t13777 * t15503 + ((t15793 * t16480 - 0.4e1 * t15200) * t14925 + 0.4e1 * t15459) * t14916 - t13967 * t15401 * t16472 + t16058;
t13965 = -t15294 + 0.2e1 * t15395;
t15421 = t14945 * t15784;
t15797 = t14954 * t14236;
t16060 = -t16032 * t14230 - 0.2e1 * t15462;
t16075 = 0.2e1 * t13751 * t16164 + t13775 * t15505 + ((t15797 * t16480 - 0.4e1 * t15216) * t14925 + 0.4e1 * t15462) * t14908 - t13965 * t15421 * t16474 + t16060;
t13966 = -t15293 + 0.2e1 * t15393;
t15411 = t14948 * t15773;
t15795 = t14957 * t14237;
t16059 = -t16031 * t14231 - 0.2e1 * t15465;
t16074 = 0.2e1 * t13753 * t16154 + t13776 * t15504 + ((t15795 * t16480 - 0.4e1 * t15208) * t14925 + 0.4e1 * t15465) * t14912 - t13966 * t15411 * t16473 + t16059;
t13917 = pkin(6) * t15807 - t14221 + (t16587 - t14219) * t14924 * t14686;
t16073 = t13917 * t15802 - (pkin(6) * t16174 + t14665 * t14941) * t16379 + t16614 * t14938;
t16072 = -t13917 * t15804 + (-pkin(6) * t16166 + t14665 * t14938) * t16379 + t16614 * t14941;
t13918 = t14689 * t14209 * t16586 - (t15744 - t16407) * t16337;
t16071 = t13918 * t15784 - (pkin(6) * t16163 + t14673 * t14953) * t16388 + t16613 * t14944;
t16070 = -t13918 * t15786 + (-pkin(6) * t16135 + t14673 * t14944) * t16388 + t16613 * t14953;
t13919 = t14690 * t14208 * t16586 - (t15743 - t16407) * t16336;
t16069 = t13919 * t15773 - (pkin(6) * t16153 + t14675 * t14956) * t16385 + t16612 * t14947;
t16068 = -t13919 * t15775 + (-pkin(6) * t16134 + t14675 * t14947) * t16385 + t16612 * t14956;
t13920 = t14691 * t14210 * t16586 - (t15742 - t16407) * t16335;
t16067 = t13920 * t15762 - (pkin(6) * t16143 + t14677 * t14959) * t16382 + t16611 * t14950;
t16066 = -t13920 * t15764 + (-pkin(6) * t16133 + t14677 * t14950) * t16382 + t16611 * t14959;
t15981 = 0.2e1 * t16158;
t15979 = 0.2e1 * t16148;
t15977 = 0.2e1 * t16138;
t15871 = t14888 * t16406;
t15870 = t14889 * t16406;
t15858 = t13775 * t16331;
t15857 = t13775 * t16297;
t15856 = t13775 * t14384 * t14945;
t15855 = t14384 * t16387;
t15854 = t13776 * t16333;
t15853 = t13776 * t16296;
t15852 = t13776 * t14385 * t14948;
t15851 = t14385 * t16384;
t15850 = t13777 * t16332;
t15849 = t13777 * t16295;
t15848 = t13777 * t14386 * t14951;
t15847 = t14386 * t16381;
t15846 = t13779 * t16334;
t15845 = t13779 * t16298;
t15844 = t13779 * t14376 * t14939;
t15843 = t14376 * t16378;
t15720 = t14901 * t14222;
t15715 = t14910 * t14236;
t15714 = t14914 * t14237;
t15713 = t14918 * t14238;
t15628 = t14331 * t16072;
t15627 = t14331 * t16073;
t15626 = t14332 * t16071;
t15625 = t14332 * t16070;
t15624 = t14333 * t16069;
t15623 = t14333 * t16068;
t15622 = t14334 * t16067;
t15621 = t14334 * t16066;
t15620 = t14362 * t16109;
t15619 = t14362 * t16108;
t15618 = t14362 * t16101;
t15617 = t14362 * t16100;
t15616 = t14362 * t16093;
t15615 = t14362 * t16092;
t15614 = t14370 * t16103;
t15613 = t14370 * t16102;
t15612 = t14370 * t16097;
t15611 = t14370 * t16094;
t15610 = t14370 * t16087;
t15609 = t14370 * t16084;
t15608 = t14372 * t16107;
t15607 = t14372 * t16106;
t15606 = t14372 * t16099;
t15605 = t14372 * t16096;
t15604 = t14372 * t16089;
t15603 = t14372 * t16086;
t15602 = t14374 * t16105;
t15601 = t14374 * t16104;
t15600 = t14374 * t16098;
t15599 = t14374 * t16095;
t15598 = t14374 * t16088;
t15597 = t14374 * t16085;
t15596 = t14376 * t16091;
t15595 = t14376 * t16090;
t15594 = t14376 * t16077;
t15593 = t14384 * t16083;
t15592 = t14384 * t16082;
t15591 = t14384 * t16075;
t15590 = t14385 * t16081;
t15589 = t14385 * t16080;
t15588 = t14385 * t16074;
t15587 = t14386 * t16079;
t15586 = t14386 * t16078;
t15585 = t14386 * t16076;
t15584 = t13775 * t15981;
t15583 = t13776 * t15979;
t15582 = t13777 * t15977;
t15581 = t16169 * t15995;
t15580 = 0.4e1 * t14159 * t14240 * t14804;
t15579 = 0.4e1 * t14807 * t16356;
t15578 = 0.4e1 * t14806 * t16350;
t15577 = 0.4e1 * t14808 * t16343;
t15569 = 0.2e1 * t15720;
t15568 = 0.2e1 * t15715;
t15567 = 0.2e1 * t15714;
t15566 = 0.2e1 * t15713;
t13735 = t16209 / 0.2e1 + t13779;
t14057 = t16205 / 0.2e1 - t14223;
t15564 = (t14056 * t15891 + t14057 * t14848) * t16497 + t15862 * t16504 + 0.2e1 * t13735 * t14850;
t15563 = (-t14056 * t15910 + t14057 * t14850) * t16497 - 0.2e1 * t13734 * t15891 - 0.2e1 * t13735 * t14848;
t13747 = t16208 / 0.2e1 + t13775;
t14072 = t16348 / 0.2e1 - t16337;
t15562 = (t14067 * t15906 + t14072 * t14872) * t16495 + t15861 * t16504 + 0.2e1 * t13747 * t14876;
t13748 = t16207 / 0.2e1 + t13776;
t14070 = t16204 / 0.2e1 - t16336;
t15561 = (t14068 * t15905 + t14070 * t14873) * t16496 + t15860 * t16504 + 0.2e1 * t13748 * t14878;
t15560 = (-t14067 * t15909 + t14072 * t14876) * t16495 - 0.2e1 * t13744 * t15906 - 0.2e1 * t13747 * t14872;
t15559 = (-t14068 * t15908 + t14070 * t14878) * t16496 - 0.2e1 * t13745 * t15905 - 0.2e1 * t13748 * t14873;
t13749 = t16206 / 0.2e1 + t13777;
t14071 = t16203 / 0.2e1 - t16335;
t15558 = (t14069 * t15904 + t14071 * t14874) * t16494 + t15859 * t16504 + 0.2e1 * t13749 * t14880;
t15557 = (-t14069 * t15907 + t14071 * t14880) * t16494 - 0.2e1 * t13746 * t15904 - 0.2e1 * t13749 * t14874;
t13708 = t13737 * t14938 + t13779 * t15694;
t15556 = t13708 * t14938 - t16061 * t16175 - (t13962 * t14899 - t15396) * t15803;
t13721 = t13751 * t14944 + t13775 * t15690;
t15555 = t13721 * t14944 - t16060 * t16164 - (t13965 * t14908 - t15395) * t15785;
t13722 = t13753 * t14947 + t13776 * t15685;
t15554 = t13722 * t14947 - t16059 * t16154 - (t13966 * t14912 - t15393) * t15774;
t13723 = t13755 * t14950 + t13777 * t15682;
t15553 = t13723 * t14950 - t16058 * t16144 - (t13967 * t14916 - t15394) * t15763;
t14218 = -0.2e1 * t15720;
t14085 = -t14222 + t15569;
t15019 = t14085 * t14896 + t13945 + t14222;
t15552 = (t14218 + t15019) * t14938 + t16621 * t14941;
t15551 = (-t15019 + t15569) * t14941 + t16621 * t14938;
t14227 = -0.2e1 * t15715;
t14086 = -t14236 + t15568;
t15018 = t14086 * t14896 + t13955 + t14236;
t15550 = (t14227 + t15018) * t14944 + t16617 * t14953;
t15549 = (-t15018 + t15568) * t14953 + t16617 * t14944;
t14228 = -0.2e1 * t15714;
t14087 = -t14237 + t15567;
t15017 = t14087 * t14896 + t13956 + t14237;
t15548 = (t14228 + t15017) * t14947 + t16616 * t14956;
t15547 = (-t15017 + t15567) * t14956 + t16616 * t14947;
t14229 = -0.2e1 * t15713;
t14088 = -t14238 + t15566;
t15016 = t14088 * t14896 + t13957 + t14238;
t15546 = (t14229 + t15016) * t14950 + t16615 * t14959;
t15545 = (-t15016 + t15566) * t14959 + t16615 * t14950;
t15492 = t14030 * t15803;
t15491 = t14043 * t15785;
t15490 = t14045 * t15774;
t15489 = t14047 * t15763;
t15456 = t16334 * t14222;
t15455 = t16298 * t14222;
t15454 = t14376 * t15812;
t15453 = t14376 * t15811;
t14754 = 0.2e1 * t14846 + pkin(1);
t15352 = t14754 * t16131 + t14669 + t14813 + t14923;
t14247 = (-(t15352 * t14573 + (t14445 * t14843 + (t14573 * t14754 - 0.2e1 * t16172) * t14844) * t14942 + t16515 * t14572) * t15111 - (t15352 * t14572 + (t14444 * t14843 + (t14572 * t14754 + 0.2e1 * t16171) * t14844) * t14942 - t16515 * t14573) * t15110) * t14994 * t14360;
t15452 = t14247 * t15801;
t15451 = t14307 * t15810;
t15450 = t14331 * t15801;
t15442 = t16331 * t14236;
t15441 = t16297 * t14236;
t15440 = t14384 * t15798;
t15439 = t14384 * t15797;
t15438 = t16333 * t14237;
t15437 = t16296 * t14237;
t15436 = t14385 * t15796;
t15435 = t14385 * t15795;
t15434 = t16332 * t14238;
t15433 = t16295 * t14238;
t15432 = t14386 * t15794;
t15431 = t14386 * t15793;
t14771 = 0.2e1 * t14859 + pkin(1);
t15351 = t14771 * t16130 + t14678 + t14823 + t14923;
t14248 = (-(t15351 * t14579 + (t14450 * t14856 + (t14579 * t14771 - 0.2e1 * t16161) * t14857) * t14954 + t16514 * t14578) * t15109 - (t15351 * t14578 + (t14449 * t14856 + (t14578 * t14771 + 0.2e1 * t16160) * t14857) * t14954 - t16514 * t14579) * t15108) * t14994 * t14367;
t15430 = t14248 * t15783;
t15429 = t14308 * t15792;
t15428 = t14332 * t15783;
t14774 = 0.2e1 * t14863 + pkin(1);
t15350 = t14774 * t16129 + t14679 + t14824 + t14923;
t14249 = (-(t15350 * t14581 + (t14452 * t14860 + (t14581 * t14774 - 0.2e1 * t16151) * t14861) * t14957 + t16513 * t14580) * t15107 - (t15350 * t14580 + (t14451 * t14860 + (t14580 * t14774 + 0.2e1 * t16150) * t14861) * t14957 - t16513 * t14581) * t15106) * t14994 * t14368;
t15420 = t14249 * t15772;
t15419 = t14309 * t15781;
t15418 = t14333 * t15772;
t14777 = 0.2e1 * t14867 + pkin(1);
t15349 = t14777 * t16128 + t14680 + t14825 + t14923;
t14250 = (-(t15349 * t14583 + (t14454 * t14864 + (t14583 * t14777 - 0.2e1 * t16141) * t14865) * t14960 + t16512 * t14582) * t15105 - (t15349 * t14582 + (t14453 * t14864 + (t14582 * t14777 + 0.2e1 * t16140) * t14865) * t14960 - t16512 * t14583) * t15104) * t14994 * t14366;
t15410 = t14250 * t15761;
t15409 = t14310 * t15770;
t15408 = t14334 * t15761;
t15367 = t15799 * t16587;
t15366 = t15979 * t16356;
t15365 = t15981 * t16350;
t15364 = t15977 * t16343;
t15319 = t14362 * t15564;
t15318 = t14362 * t15563;
t15317 = t14370 * t15558;
t15316 = t14370 * t15557;
t15315 = t14372 * t15562;
t15314 = t14372 * t15560;
t15313 = t14374 * t15561;
t15312 = t14374 * t15559;
t15311 = t14376 * t15556;
t15310 = t14376 * t15552;
t15309 = t14376 * t15551;
t15308 = t14384 * t15555;
t15307 = t14384 * t15550;
t15306 = t14384 * t15549;
t15305 = t14385 * t15554;
t15304 = t14385 * t15548;
t15303 = t14385 * t15547;
t15302 = t14386 * t15553;
t15301 = t14386 * t15546;
t15300 = t14386 * t15545;
t15257 = t14376 * t15492;
t15256 = t14384 * t15491;
t15255 = t14385 * t15490;
t15254 = t14386 * t15489;
t15249 = t14331 * t15467;
t15248 = t14333 * t15464;
t15247 = t14332 * t15461;
t15246 = t14334 * t15458;
t15245 = t14942 * t15456;
t15244 = t14942 * t15455;
t15243 = t14939 * t15453;
t15241 = t14279 * t15450;
t15240 = t14280 * t15450;
t15239 = t14942 * t15451;
t15231 = t14954 * t15442;
t15230 = t14954 * t15441;
t15229 = t14945 * t15439;
t15227 = t14957 * t15438;
t15226 = t14957 * t15437;
t15225 = t14948 * t15435;
t15223 = t14960 * t15434;
t15222 = t14960 * t15433;
t15221 = t14951 * t15431;
t15219 = t14281 * t15428;
t15218 = t14284 * t15428;
t15217 = t14954 * t15429;
t15211 = t14282 * t15418;
t15210 = t14285 * t15418;
t15209 = t14957 * t15419;
t15203 = t14283 * t15408;
t15202 = t14286 * t15408;
t15201 = t14960 * t15409;
t13736 = 0.2e1 * t13778 + t13760;
t14058 = t14159 + t16493;
t15158 = t13736 * t14939 + t14058 * t16358;
t15157 = t13736 * t14942 - t14058 * t16360;
t13750 = 0.2e1 * t13772 + t13761;
t14076 = t14209 + t16492;
t15156 = t14076 * t14209 * t14954 + t13750 * t14945;
t15155 = t13750 * t14954 - t14076 * t16346;
t13752 = 0.2e1 * t13773 + t13762;
t14079 = t14208 + t16491;
t15154 = t14079 * t14208 * t14957 + t13752 * t14948;
t15153 = t13752 * t14957 - t14079 * t16353;
t13754 = 0.2e1 * t13774 + t13763;
t14082 = t14210 + t16490;
t15152 = t14082 * t14210 * t14960 + t13754 * t14951;
t15151 = t13754 * t14960 - t14082 * t16340;
t15150 = -t13775 * t14605 + t14236 * (t14876 - t15521);
t15149 = t13775 * (pkin(1) * t16191 - t15909) + t14236 * t16543;
t15148 = -t13776 * t14606 + t14237 * (t14878 - t15520);
t15147 = t13776 * (pkin(1) * t16189 - t15908) + t14237 * t16542;
t15146 = -t13777 * t14604 + t14238 * (t14880 - t15519);
t15145 = t13777 * (pkin(1) * t16187 - t15907) + t14238 * t16541;
t15144 = -t13779 * t14591 + t14222 * (t14850 - t15523);
t15143 = t13779 * (pkin(1) * t16199 - t15910) + t14222 * t16544;
t15079 = t14362 * (t16360 * t16501 + t16397);
t15078 = t14362 * t15158;
t15077 = t14362 * t15157;
t15076 = t14370 * (t16340 * t16498 + t16394);
t15075 = t14370 * t15152;
t15074 = t14370 * t15151;
t15073 = t14372 * (t16346 * t16500 + t16396);
t15072 = t14372 * t15156;
t15071 = t14372 * t15155;
t15070 = t14374 * (t16353 * t16499 + t16395);
t15069 = t14374 * t15154;
t15068 = t14374 * t15153;
t15067 = t14376 * t15144;
t15066 = t14376 * t15143;
t15065 = t14384 * t15150;
t15064 = t14384 * t15149;
t15063 = t14385 * t15148;
t15062 = t14385 * t15147;
t15061 = t14386 * t15146;
t15060 = t14386 * t15145;
t15044 = t14362 * (-t15580 * t16652 + t15581);
t15043 = t14362 * (-t15367 * t16652 + t16380);
t15042 = t14370 * (-t15577 * t16655 + t15582);
t15041 = t14370 * (-t15364 * t16655 + t16383);
t15040 = t14372 * (-t15578 * t16653 + t15584);
t15039 = t14372 * (-t15365 * t16653 + t16389);
t15038 = t14374 * (-t15579 * t16654 + t15583);
t15037 = t14374 * (-t15366 * t16654 + t16386);
t14083 = -t14232 + 0.2e1 * t14262 - 0.2e1 * t15756 - 0.2e1 * t15758;
t14080 = -t14231 + 0.2e1 * t14260 - 0.2e1 * t15754 - 0.2e1 * t15757;
t14077 = -t14230 + 0.2e1 * t14261 - 0.2e1 * t15659 - 0.2e1 * t15759;
t14059 = -t14219 + 0.2e1 * t14259 - 0.2e1 * t15660 - 0.2e1 * t15753;
t13981 = t14083 * t14950 - t14924 * t15401;
t13980 = t14080 * t14947 - t14924 * t15411;
t13979 = t14077 * t14944 - t14924 * t15421;
t13978 = t14083 * t14959 + t15199;
t13977 = t14080 * t14956 + t15207;
t13976 = t14077 * t14953 + t15215;
t13975 = t14059 * t14938 - t14924 * t15444;
t13974 = t14059 * t14941 + t15237;
t13860 = (t14238 * t15533 + t14238 - t15168) * t16144 + t16456 * t14084 * t15403;
t13859 = (t14237 * t15534 + t14237 - t15170) * t16154 + t16458 * t14081 * t15413;
t13858 = (t14236 * t15535 + t14236 - t15169) * t16164 + t16460 * t14078 * t15423;
t13853 = (t14222 * t15536 + t14222 - t15171) * t16175 + t16462 * t14060 * t15445;
t13840 = (-0.2e1 * t14207 + t14229 + 0.2e1 * t14238) * t14916 - t14238 + t14207 - (0.4e1 * t14084 * t15383 - t16203 * t16455) * t16335 + (t16244 * t16456 + t14918) * t14238;
t13839 = (-0.2e1 * t14205 + t14228 + 0.2e1 * t14237) * t14912 - t14237 + t14205 - (0.4e1 * t14081 * t15385 - t16204 * t16457) * t16336 + (t16245 * t16458 + t14914) * t14237;
t13838 = (-0.2e1 * t14206 + t14227 + 0.2e1 * t14236) * t14908 - t14236 + t14206 - (0.4e1 * t14078 * t15387 - t16348 * t16459) * t16337 + (t16246 * t16460 + t14910) * t14236;
t13837 = (-0.2e1 * t14158 + t14218 + 0.2e1 * t14222) * t14899 - t14222 + t14158 - (0.4e1 * t14060 * t15389 - t16205 * t16461) * t14223 + (t16247 * t16462 + t14901) * t14222;
t13720 = t13755 * t14959 - t13777 * t15684;
t13719 = t13753 * t14956 - t13776 * t15687;
t13718 = t13751 * t14953 - t13775 * t15692;
t13707 = t13737 * t14941 - t13779 * t15696;
t1 = [(t13775 * t16307 + t13776 * t16305 + t13777 * t16303 + t13779 * t16309) * MDP(1) + (-t14287 * t15243 - t14289 * t15229 - t14291 * t15225 - t14293 * t15221 + t14296 * t15043 + t14298 * t15039 + t14300 * t15037 + t14302 * t15041) * t16405 + (-t14085 * t16318 - t14086 * t16316 - t14087 * t16314 - t14088 * t16312 + t14296 * t15044 + t14298 * t15040 + t14300 * t15038 + t14302 * t15042) * t16404 + (t14289 * t15856 + t14291 * t15852 + t14293 * t15848 + t14287 * t15844 + t14302 * t15075 + t14300 * t15069 + t14298 * t15072 + t14296 * t15078 + (-t14287 * t15453 - t14289 * t15439 - t14291 * t15435 - t14293 * t15431) * t14925) * t16403 + (t14289 * t15855 + t14291 * t15851 + t14293 * t15847 + t14287 * t15843 + t14302 * t15074 + t14300 * t15068 + t14298 * t15071 + t14296 * t15077 + (t14287 * t15454 + t14289 * t15440 + t14291 * t15436 + t14293 * t15432) * t14925) * t16402 + (t13737 * t16318 + t13751 * t16316 + t13753 * t16314 + t13755 * t16312 + (t13737 * t16309 + t13751 * t16307 + t13753 * t16305 + t13755 * t16303) * t14925) * MDP(8) + (t14287 * t15066 + t14289 * t15064 + t14291 * t15062 + t14293 * t15060 + t14296 * t15319 + t14298 * t15315 + t14300 * t15313 + t14302 * t15317) * MDP(9) + (t14287 * t15067 + t14289 * t15065 + t14291 * t15063 + t14293 * t15061 + t14296 * t15318 + t14298 * t15314 + t14300 * t15312 + t14302 * t15316) * MDP(10) + (t14302 * t15611 + t14300 * t15599 + t14298 * t15605 + t14296 * t15617 + t14293 * t15302 + t14291 * t15305 + t14289 * t15308 + t14287 * t15311 + (-t13853 * t16326 - t13858 * t16324 - t13859 * t16323 - t13860 * t16322) * t16210) * MDP(11) + (t14302 * t15612 + t14300 * t15600 + t14298 * t15606 + t14296 * t15618 + t14293 * t15585 + t14291 * t15588 + t14289 * t15591 + t14287 * t15594 + (-t13837 * t16326 - t13838 * t16324 - t13839 * t16323 - t13840 * t16322) * t16210) * MDP(12) + (t14302 * t15609 + t14300 * t15597 + t14298 * t15603 + t14296 * t15615 + t14293 * t15300 + t14291 * t15303 + t14289 * t15306 + t14287 * t15309 + ((-t13708 * t16326 - t13721 * t16324 - t13722 * t16323 - t13723 * t16322) * t14924 + (t13974 * t15241 + t13976 * t15219 + t13977 * t15211 + t13978 * t15203) * t14894) * t14994) * MDP(13) + (t14302 * t15610 + t14300 * t15598 + t14298 * t15604 + t14296 * t15616 + t14293 * t15301 + t14291 * t15304 + t14289 * t15307 + t14287 * t15310 + ((-t13707 * t16326 - t13718 * t16324 - t13719 * t16323 - t13720 * t16322) * t14924 + (-t13975 * t15241 - t13979 * t15219 - t13980 * t15211 - t13981 * t15203) * t14894) * t14994) * MDP(14) + ((t14279 * t15249 + t14281 * t15247 + t14282 * t15248 + t14283 * t15246) * t16237 + (-t14287 * t15257 - t14289 * t15256 - t14291 * t15255 - t14293 * t15254 + t14302 * t15076 + t14300 * t15070 + t14298 * t15073 + t14296 * t15079 + (t13725 * t16326 + t13729 * t16324 + t13730 * t16323 + t13731 * t16322) * t14994) * t14924) * MDP(15) + (t14302 * t15613 + t14300 * t15601 + t14298 * t15607 + t14296 * t15619 + t14293 * t15586 + t14291 * t15589 + t14289 * t15592 + t14287 * t15595 + (-t14279 * t15627 - t14281 * t15626 - t14282 * t15624 - t14283 * t15622) * t16210) * MDP(16) + (t14302 * t15614 + t14300 * t15602 + t14298 * t15608 + t14296 * t15620 + t14293 * t15587 + t14291 * t15590 + t14289 * t15593 + t14287 * t15596 + (-t14279 * t15628 - t14281 * t15625 - t14282 * t15623 - t14283 * t15621) * t16210) * MDP(17) - MDP(19) * t15870 + MDP(20) * t15871; (t13775 * t16308 + t13776 * t16306 + t13777 * t16304 + t13779 * t16310) * MDP(1) + (-t14288 * t15243 - t14290 * t15229 - t14292 * t15225 - t14294 * t15221 + t14295 * t15043 + t14297 * t15039 + t14299 * t15037 + t14301 * t15041) * t16405 + (-t14085 * t16317 - t14086 * t16315 - t14087 * t16313 - t14088 * t16311 + t14295 * t15044 + t14297 * t15040 + t14299 * t15038 + t14301 * t15042) * t16404 + (t14290 * t15856 + t14292 * t15852 + t14294 * t15848 + t14288 * t15844 + t14301 * t15075 + t14299 * t15069 + t14297 * t15072 + t14295 * t15078 + (-t14288 * t15453 - t14290 * t15439 - t14292 * t15435 - t14294 * t15431) * t14925) * t16403 + (t14290 * t15855 + t14292 * t15851 + t14294 * t15847 + t14288 * t15843 + t14301 * t15074 + t14299 * t15068 + t14297 * t15071 + t14295 * t15077 + (t14288 * t15454 + t14290 * t15440 + t14292 * t15436 + t14294 * t15432) * t14925) * t16402 + (t13737 * t16317 + t13751 * t16315 + t13753 * t16313 + t13755 * t16311 + (t13737 * t16310 + t13751 * t16308 + t13753 * t16306 + t13755 * t16304) * t14925) * MDP(8) + (t14288 * t15066 + t14290 * t15064 + t14292 * t15062 + t14294 * t15060 + t14295 * t15319 + t14297 * t15315 + t14299 * t15313 + t14301 * t15317) * MDP(9) + (t14288 * t15067 + t14290 * t15065 + t14292 * t15063 + t14294 * t15061 + t14295 * t15318 + t14297 * t15314 + t14299 * t15312 + t14301 * t15316) * MDP(10) + (t14301 * t15611 + t14299 * t15599 + t14297 * t15605 + t14295 * t15617 + t14294 * t15302 + t14292 * t15305 + t14290 * t15308 + t14288 * t15311 + (-t13853 * t16325 - t13858 * t16321 - t13859 * t16320 - t13860 * t16319) * t16210) * MDP(11) + (t14301 * t15612 + t14299 * t15600 + t14297 * t15606 + t14295 * t15618 + t14294 * t15585 + t14292 * t15588 + t14290 * t15591 + t14288 * t15594 + (-t13837 * t16325 - t13838 * t16321 - t13839 * t16320 - t13840 * t16319) * t16210) * MDP(12) + (t14301 * t15609 + t14299 * t15597 + t14297 * t15603 + t14295 * t15615 + t14294 * t15300 + t14292 * t15303 + t14290 * t15306 + t14288 * t15309 + ((-t13708 * t16325 - t13721 * t16321 - t13722 * t16320 - t13723 * t16319) * t14924 + (t13974 * t15240 + t13976 * t15218 + t13977 * t15210 + t13978 * t15202) * t14894) * t14994) * MDP(13) + (t14301 * t15610 + t14299 * t15598 + t14297 * t15604 + t14295 * t15616 + t14294 * t15301 + t14292 * t15304 + t14290 * t15307 + t14288 * t15310 + ((-t13707 * t16325 - t13718 * t16321 - t13719 * t16320 - t13720 * t16319) * t14924 + (-t13975 * t15240 - t13979 * t15218 - t13980 * t15210 - t13981 * t15202) * t14894) * t14994) * MDP(14) + ((t14280 * t15249 + t14284 * t15247 + t14285 * t15248 + t14286 * t15246) * t16237 + (-t14288 * t15257 - t14290 * t15256 - t14292 * t15255 - t14294 * t15254 + t14301 * t15076 + t14299 * t15070 + t14297 * t15073 + t14295 * t15079 + (t13725 * t16325 + t13729 * t16321 + t13730 * t16320 + t13731 * t16319) * t14994) * t14924) * MDP(15) + (t14301 * t15613 + t14299 * t15601 + t14297 * t15607 + t14295 * t15619 + t14294 * t15586 + t14292 * t15589 + t14290 * t15592 + t14288 * t15595 + (-t14280 * t15627 - t14284 * t15626 - t14285 * t15624 - t14286 * t15622) * t16210) * MDP(16) + (t14301 * t15614 + t14299 * t15602 + t14297 * t15608 + t14295 * t15620 + t14294 * t15587 + t14292 * t15590 + t14290 * t15593 + t14288 * t15596 + (-t14280 * t15628 - t14284 * t15625 - t14285 * t15623 - t14286 * t15621) * t16210) * MDP(17) - MDP(19) * t15871 - MDP(20) * t15870; (t13775 * t16292 + t13776 * t16291 + t13777 * t16293 + t13779 * t16294) * MDP(1) + (t14443 * t15043 + t14446 * t15039 + t14447 * t15037 + t14448 * t15041 - t14939 * t15244 + t14945 * t15230 + t14948 * t15226 + t14951 * t15222) * t16405 + (-t14085 * t16298 + t14086 * t16297 + t14087 * t16296 + t14088 * t16295 + t14443 * t15044 + t14446 * t15040 + t14447 * t15038 + t14448 * t15042) * t16404 + (-t14945 * t15857 - t14948 * t15853 - t14951 * t15849 + t14939 * t15845 + t14447 * t15069 + t14446 * t15072 + t14448 * t15075 + t14443 * t15078 + (t15222 + t15226 + t15230 - t15244) * t14925) * t16403 + (-t14954 * t15857 - t14957 * t15853 - t14960 * t15849 + t14942 * t15845 + t14447 * t15068 + t14446 * t15071 + t14448 * t15074 + t14443 * t15077 + (t14939 * t15455 - t14945 * t15441 - t14948 * t15437 - t14951 * t15433) * t14925) * t16402 + (t13737 * t16298 - t13751 * t16297 - t13753 * t16296 - t13755 * t16295 + (t13737 * t16294 + t13751 * t16292 + t13753 * t16291 + t13755 * t16293) * t14925) * MDP(8) + (t14443 * t15319 + t14446 * t15315 + t14447 * t15313 + t14448 * t15317 + t15143 * t16298 - t15145 * t16295 - t15147 * t16296 - t15149 * t16297) * MDP(9) + (t14443 * t15318 + t14446 * t15314 + t14447 * t15312 + t14448 * t15316 + t15144 * t16298 - t15146 * t16295 - t15148 * t16296 - t15150 * t16297) * MDP(10) + (t14447 * t15599 + t14446 * t15605 + t14448 * t15611 + t14443 * t15617 - t15553 * t16295 - t15554 * t16296 - t15555 * t16297 + t15556 * t16298 + (t13853 * t16302 + t13858 * t16301 + t13859 * t16300 + t13860 * t16299) * t14994) * MDP(11) + (t14447 * t15600 + t14446 * t15606 + t14448 * t15612 + t14443 * t15618 - t16076 * t16295 - t16074 * t16296 - t16075 * t16297 + t16077 * t16298 + (t13837 * t16302 + t13838 * t16301 + t13839 * t16300 + t13840 * t16299) * t14994) * MDP(12) + (t14447 * t15597 + t14446 * t15603 + t14448 * t15609 + t14443 * t15615 - t15545 * t16295 - t15547 * t16296 - t15549 * t16297 + t15551 * t16298 + (t13708 * t16302 + t13721 * t16301 + t13722 * t16300 + t13723 * t16299 + (-t13974 * t15239 - t13976 * t15217 - t13977 * t15209 - t13978 * t15201) * t14924) * t14994) * MDP(13) + (t14447 * t15598 + t14446 * t15604 + t14448 * t15610 + t14443 * t15616 - t15546 * t16295 - t15548 * t16296 - t15550 * t16297 + t15552 * t16298 + (t13707 * t16302 + t13718 * t16301 + t13719 * t16300 + t13720 * t16299 + (t13975 * t15239 + t13979 * t15217 + t13980 * t15209 + t13981 * t15201) * t14924) * t14994) * MDP(14) + ((-t13725 * t16302 - t13729 * t16301 - t13730 * t16300 - t13731 * t16299) * t14994 + (-t15492 * t16298 + t15491 * t16297 + t15490 * t16296 + t15489 * t16295 + t14447 * t15070 + t14446 * t15073 + t14448 * t15076 + t14443 * t15079 + (-t15409 * t16340 - t15419 * t16353 - t15429 * t16346 - t15451 * t16360) * t14994) * t14924) * MDP(15) + (t14447 * t15601 + t14446 * t15607 + t14448 * t15613 + t14443 * t15619 - t16078 * t16295 - t16080 * t16296 - t16082 * t16297 + t16090 * t16298 + (t16067 * t16299 + t16069 * t16300 + t16071 * t16301 + t16073 * t16302) * t14994) * MDP(16) + (t14447 * t15602 + t14446 * t15608 + t14448 * t15614 + t14443 * t15620 - t16079 * t16295 - t16081 * t16296 - t16083 * t16297 + t16091 * t16298 + (t16066 * t16299 + t16068 * t16300 + t16070 * t16301 + t16072 * t16302) * t14994) * MDP(17); (-t13775 * t16329 - t13776 * t16328 - t13777 * t16327 - t13779 * t16330) * MDP(1) + (-t14939 * t15245 - t14945 * t15231 - t14948 * t15227 - t14951 * t15223 + (t14349 * t15364 - t16383 * t16655) * t14258 + (t14355 * t15366 - t16386 * t16654) * t14257 + (t14352 * t15365 - t16389 * t16653) * t14256 + (t14337 * t15367 - t16380 * t16652) * t14255) * t16405 + (-t14085 * t16334 - t14086 * t16331 - t14087 * t16333 - t14088 * t16332 + (t14349 * t15577 - t15582 * t16655) * t14258 + (t14355 * t15579 - t15583 * t16654) * t14257 + (t14352 * t15578 - t15584 * t16653) * t14256 + (t14337 * t15580 - t15581 * t16652) * t14255) * t16404 + (t14945 * t15858 + t14948 * t15854 + t14951 * t15850 + t14939 * t15846 - t15152 * t16327 - t15154 * t16328 - t15156 * t16329 - t15158 * t16330 + (-t15223 - t15227 - t15231 - t15245) * t14925) * t16403 + (t14954 * t15858 + t14957 * t15854 + t14960 * t15850 + t14942 * t15846 - t15151 * t16327 - t15153 * t16328 - t15155 * t16329 - t15157 * t16330 + (t14939 * t15456 + t14945 * t15442 + t14948 * t15438 + t14951 * t15434) * t14925) * t16402 + (t13737 * t16334 + t13751 * t16331 + t13753 * t16333 + t13755 * t16332 + (-t13737 * t16330 - t13751 * t16329 - t13753 * t16328 - t13755 * t16327) * t14925) * MDP(8) + (t15143 * t16334 + t15145 * t16332 + t15147 * t16333 + t15149 * t16331 - t15558 * t16327 - t15561 * t16328 - t15562 * t16329 - t15564 * t16330) * MDP(9) + (t15144 * t16334 + t15146 * t16332 + t15148 * t16333 + t15150 * t16331 - t15557 * t16327 - t15559 * t16328 - t15560 * t16329 - t15563 * t16330) * MDP(10) + (-t14247 * t13853 + t14248 * t13858 + t14249 * t13859 + t14250 * t13860 + t15553 * t16332 + t15554 * t16333 + t15555 * t16331 + t15556 * t16334 - t16094 * t16327 - t16095 * t16328 - t16096 * t16329 - t16100 * t16330) * MDP(11) + (-t14247 * t13837 + t14248 * t13838 + t14249 * t13839 + t14250 * t13840 + t16074 * t16333 + t16075 * t16331 + t16076 * t16332 + t16077 * t16334 - t16097 * t16327 - t16098 * t16328 - t16099 * t16329 - t16101 * t16330) * MDP(12) + (-t14247 * t13708 + t14248 * t13721 + t14249 * t13722 + t14250 * t13723 - t16084 * t16327 - t16085 * t16328 - t16086 * t16329 - t16092 * t16330 + t15549 * t16331 + t15545 * t16332 + t15547 * t16333 + t15551 * t16334 + (t13974 * t15452 - t13976 * t15430 - t13977 * t15420 - t13978 * t15410) * t14924) * MDP(13) + (-t14247 * t13707 + t14248 * t13718 + t14249 * t13719 + t14250 * t13720 - t16087 * t16327 - t16088 * t16328 - t16089 * t16329 - t16093 * t16330 + t15550 * t16331 + t15546 * t16332 + t15548 * t16333 + t15552 * t16334 + (-t13975 * t15452 + t13979 * t15430 + t13980 * t15420 + t13981 * t15410) * t14924) * MDP(14) + (t14247 * t13725 - t14248 * t13729 - t14249 * t13730 - t14250 * t13731 + (-(t14257 * t16395 + (t14045 * t14245 * t16333 + (t14245 * t14249 + t14257 * t16499) * t14208) * t14948) * t16654 - (t14256 * t16396 + (t14043 * t14244 * t16331 + (t14244 * t14248 + t14256 * t16500) * t14209) * t14945) * t16653 - (t14258 * t16394 + (t14047 * t14246 * t16332 + (t14246 * t14250 + t14258 * t16498) * t14210) * t14951) * t16655 - (t14255 * t16397 + (t14030 * t14240 * t16334 + (-t14240 * t14247 + t14255 * t16501) * t14159) * t14939) * t16652) * t14924) * MDP(15) + (-t14247 * t16073 + t14248 * t16071 + t14249 * t16069 + t14250 * t16067 + t16078 * t16332 + t16080 * t16333 + t16082 * t16331 + t16090 * t16334 - t16102 * t16327 - t16104 * t16328 - t16106 * t16329 - t16108 * t16330) * MDP(16) + (-t14247 * t16072 + t14248 * t16070 + t14249 * t16068 + t14250 * t16066 + t16079 * t16332 + t16081 * t16333 + t16083 * t16331 + t16091 * t16334 - t16103 * t16327 - t16105 * t16328 - t16107 * t16329 - t16109 * t16330) * MDP(17);];
taucX  = t1;
