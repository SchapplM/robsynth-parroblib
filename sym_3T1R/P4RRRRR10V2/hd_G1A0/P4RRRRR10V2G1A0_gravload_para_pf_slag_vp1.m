% Calculate Gravitation load for parallel robot
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [4x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 13:41:43
% EndTime: 2020-08-07 13:41:54
% DurationCPUTime: 10.82s
% Computational Cost: add. (4835->637), mult. (8642->1044), div. (80->21), fcn. (6206->36), ass. (0->395)
t5282 = cos(qJ(3,4));
t5247 = t5282 * pkin(3);
t5204 = t5247 + pkin(2);
t5280 = sin(qJ(2,4));
t5489 = t5204 * t5280;
t5294 = cos(qJ(3,3));
t5252 = t5294 * pkin(3);
t5215 = t5252 + pkin(2);
t5286 = sin(qJ(2,3));
t5488 = t5215 * t5286;
t5297 = cos(qJ(3,2));
t5254 = t5297 * pkin(3);
t5217 = t5254 + pkin(2);
t5289 = sin(qJ(2,2));
t5487 = t5217 * t5289;
t5300 = cos(qJ(3,1));
t5256 = t5300 * pkin(3);
t5219 = t5256 + pkin(2);
t5292 = sin(qJ(2,1));
t5486 = t5219 * t5292;
t5274 = cos(pkin(4));
t5278 = legFrame(1,3);
t5239 = sin(t5278);
t5243 = cos(t5278);
t5162 = -g(1) * t5239 + g(2) * t5243;
t5166 = g(1) * t5243 + g(2) * t5239;
t5293 = sin(qJ(1,1));
t5302 = cos(qJ(1,1));
t5346 = t5162 * t5302 - t5166 * t5293;
t5273 = sin(pkin(4));
t5469 = g(3) * t5273;
t5485 = t5346 * t5274 + t5469;
t5277 = legFrame(2,3);
t5238 = sin(t5277);
t5242 = cos(t5277);
t5161 = -g(1) * t5238 + g(2) * t5242;
t5165 = g(1) * t5242 + g(2) * t5238;
t5290 = sin(qJ(1,2));
t5299 = cos(qJ(1,2));
t5347 = t5161 * t5299 - t5165 * t5290;
t5484 = t5347 * t5274 + t5469;
t5276 = legFrame(3,3);
t5237 = sin(t5276);
t5241 = cos(t5276);
t5160 = -g(1) * t5237 + g(2) * t5241;
t5164 = g(1) * t5241 + g(2) * t5237;
t5287 = sin(qJ(1,3));
t5296 = cos(qJ(1,3));
t5348 = t5160 * t5296 - t5164 * t5287;
t5483 = t5348 * t5274 + t5469;
t5275 = legFrame(4,3);
t5236 = sin(t5275);
t5240 = cos(t5275);
t5159 = -g(1) * t5236 + g(2) * t5240;
t5163 = g(1) * t5240 + g(2) * t5236;
t5281 = sin(qJ(1,4));
t5284 = cos(qJ(1,4));
t5349 = t5159 * t5284 - t5163 * t5281;
t5482 = t5349 * t5274 + t5469;
t5468 = g(3) * t5274;
t5305 = pkin(8) + pkin(7);
t5481 = m(1) * rSges(1,2);
t5480 = m(3) / pkin(3);
t5479 = pkin(1) * t5274;
t5478 = pkin(2) * t5274;
t5279 = sin(qJ(3,4));
t5477 = pkin(2) * t5279;
t5285 = sin(qJ(3,3));
t5476 = pkin(2) * t5285;
t5288 = sin(qJ(3,2));
t5475 = pkin(2) * t5288;
t5291 = sin(qJ(3,1));
t5474 = pkin(2) * t5291;
t5263 = t5282 ^ 2;
t5473 = pkin(3) * t5263;
t5267 = t5294 ^ 2;
t5472 = pkin(3) * t5267;
t5269 = t5297 ^ 2;
t5471 = pkin(3) * t5269;
t5271 = t5300 ^ 2;
t5470 = pkin(3) * t5271;
t5246 = t5279 * pkin(3);
t5283 = cos(qJ(2,4));
t5248 = t5283 * pkin(2);
t5249 = t5285 * pkin(3);
t5250 = t5288 * pkin(3);
t5251 = t5291 * pkin(3);
t5295 = cos(qJ(2,3));
t5253 = t5295 * pkin(2);
t5298 = cos(qJ(2,2));
t5255 = t5298 * pkin(2);
t5301 = cos(qJ(2,1));
t5257 = t5301 * pkin(2);
t5262 = t5274 ^ 2;
t5467 = (t5262 - 0.1e1) * pkin(6);
t5466 = rSges(3,2) * t5273;
t5465 = -0.2e1 * pkin(2) * pkin(3);
t5266 = pkin(2) - t5305;
t5265 = pkin(2) + t5305;
t5207 = t5305 * t5283;
t5173 = -pkin(2) * t5280 + t5207;
t5138 = t5173 * t5479;
t5203 = t5246 - pkin(6);
t5403 = m(2) * rSges(2,1) + pkin(2) * m(3);
t5126 = (rSges(3,1) * t5282 - rSges(3,2) * t5279) * m(3) + t5403;
t5196 = (-pkin(7) - rSges(3,3)) * m(3) + m(2) * rSges(2,2);
t5387 = m(1) * rSges(1,1) + (m(2) + m(3)) * pkin(1);
t5333 = t5126 * t5283 - t5196 * t5280 + t5387;
t5404 = m(2) * (rSges(2,3) + pkin(6)) + pkin(6) * m(3);
t5341 = (t5126 * t5280 + t5196 * t5283) * t5274 - ((rSges(3,1) * t5279 + rSges(3,2) * t5282) * m(3) + t5404) * t5273 + t5481;
t5206 = t5305 * t5280;
t5353 = pkin(1) * t5246 - pkin(6) * t5206;
t5172 = t5248 + t5206;
t5168 = pkin(1) + t5172;
t5391 = t5168 * t5477;
t5425 = t5274 * t5280;
t5436 = t5273 * t5283;
t5357 = -(pkin(1) * t5425 + pkin(6) * t5436) * t5473 + t5273 * t5391;
t5464 = ((t5333 * t5281 + t5341 * t5284) * t5163 + (t5341 * t5281 - t5333 * t5284) * t5159) / (((t5203 * t5248 + t5353) * t5273 + t5138) * t5282 + t5357);
t5224 = t5305 * t5295;
t5177 = -pkin(2) * t5286 + t5224;
t5140 = t5177 * t5479;
t5210 = t5249 - pkin(6);
t5129 = (rSges(3,1) * t5294 - rSges(3,2) * t5285) * m(3) + t5403;
t5332 = t5129 * t5295 - t5196 * t5286 + t5387;
t5340 = (t5129 * t5286 + t5196 * t5295) * t5274 - ((rSges(3,1) * t5285 + rSges(3,2) * t5294) * m(3) + t5404) * t5273 + t5481;
t5221 = t5305 * t5286;
t5352 = pkin(1) * t5249 - pkin(6) * t5221;
t5174 = t5253 + t5221;
t5169 = pkin(1) + t5174;
t5390 = t5169 * t5476;
t5422 = t5274 * t5286;
t5429 = t5273 * t5295;
t5356 = -(pkin(1) * t5422 + pkin(6) * t5429) * t5472 + t5273 * t5390;
t5463 = ((t5332 * t5287 + t5340 * t5296) * t5164 + (t5340 * t5287 - t5332 * t5296) * t5160) / (((t5210 * t5253 + t5352) * t5273 + t5140) * t5294 + t5356);
t5225 = t5305 * t5298;
t5178 = -pkin(2) * t5289 + t5225;
t5141 = t5178 * t5479;
t5212 = t5250 - pkin(6);
t5130 = (rSges(3,1) * t5297 - rSges(3,2) * t5288) * m(3) + t5403;
t5331 = t5130 * t5298 - t5196 * t5289 + t5387;
t5339 = (t5130 * t5289 + t5196 * t5298) * t5274 - ((rSges(3,1) * t5288 + rSges(3,2) * t5297) * m(3) + t5404) * t5273 + t5481;
t5222 = t5305 * t5289;
t5351 = pkin(1) * t5250 - pkin(6) * t5222;
t5175 = t5255 + t5222;
t5170 = pkin(1) + t5175;
t5389 = t5170 * t5475;
t5420 = t5274 * t5289;
t5428 = t5273 * t5298;
t5355 = -(pkin(1) * t5420 + pkin(6) * t5428) * t5471 + t5273 * t5389;
t5462 = ((t5331 * t5290 + t5339 * t5299) * t5165 + (t5339 * t5290 - t5331 * t5299) * t5161) / (((t5212 * t5255 + t5351) * t5273 + t5141) * t5297 + t5355);
t5226 = t5305 * t5301;
t5179 = -pkin(2) * t5292 + t5226;
t5142 = t5179 * t5479;
t5214 = t5251 - pkin(6);
t5131 = (rSges(3,1) * t5300 - rSges(3,2) * t5291) * m(3) + t5403;
t5330 = t5131 * t5301 - t5196 * t5292 + t5387;
t5338 = (t5131 * t5292 + t5196 * t5301) * t5274 - ((rSges(3,1) * t5291 + rSges(3,2) * t5300) * m(3) + t5404) * t5273 + t5481;
t5223 = t5305 * t5292;
t5350 = pkin(1) * t5251 - pkin(6) * t5223;
t5176 = t5257 + t5223;
t5171 = pkin(1) + t5176;
t5388 = t5171 * t5474;
t5418 = t5274 * t5292;
t5427 = t5273 * t5301;
t5354 = -(pkin(1) * t5418 + pkin(6) * t5427) * t5470 + t5273 * t5388;
t5461 = ((t5330 * t5293 + t5338 * t5302) * t5166 + (t5338 * t5293 - t5330 * t5302) * t5162) / (((t5214 * t5257 + t5350) * t5273 + t5142) * t5300 + t5354);
t5087 = t5159 * t5281 + t5163 * t5284;
t5412 = t5283 * t5087;
t5325 = t5482 * t5280 + t5412;
t5405 = rSges(3,2) * t5468;
t5026 = ((t5349 * t5273 - t5468) * rSges(3,1) + t5325 * rSges(3,2)) * t5282 + (t5325 * rSges(3,1) - t5349 * t5466 + t5405) * t5279;
t5158 = -pkin(6) * t5273 * t5305 - pkin(1) * t5478;
t5414 = t5274 * t5305;
t5197 = pkin(1) * t5414;
t5321 = pkin(2) ^ 2;
t5401 = pkin(6) * t5473;
t5402 = pkin(3) * t5479;
t5413 = t5282 * t5283;
t5460 = t5026 / (t5197 * t5413 + (t5158 * t5282 - t5263 * t5402) * t5280 + ((pkin(2) * t5203 * t5282 - t5401) * t5283 + (pkin(1) * t5204 + pkin(2) * t5206 + t5283 * t5321) * t5279) * t5273);
t5089 = t5160 * t5287 + t5164 * t5296;
t5410 = t5295 * t5089;
t5324 = t5483 * t5286 + t5410;
t5027 = ((t5348 * t5273 - t5468) * rSges(3,1) + t5324 * rSges(3,2)) * t5294 + (t5324 * rSges(3,1) - t5348 * t5466 + t5405) * t5285;
t5400 = pkin(6) * t5472;
t5411 = t5294 * t5295;
t5459 = t5027 / (t5197 * t5411 + (t5158 * t5294 - t5267 * t5402) * t5286 + ((pkin(2) * t5210 * t5294 - t5400) * t5295 + (pkin(1) * t5215 + pkin(2) * t5221 + t5295 * t5321) * t5285) * t5273);
t5090 = t5161 * t5290 + t5165 * t5299;
t5408 = t5298 * t5090;
t5323 = t5484 * t5289 + t5408;
t5028 = ((t5347 * t5273 - t5468) * rSges(3,1) + t5323 * rSges(3,2)) * t5297 + (t5323 * rSges(3,1) - t5347 * t5466 + t5405) * t5288;
t5399 = pkin(6) * t5471;
t5409 = t5297 * t5298;
t5458 = t5028 / (t5197 * t5409 + (t5158 * t5297 - t5269 * t5402) * t5289 + ((pkin(2) * t5212 * t5297 - t5399) * t5298 + (pkin(1) * t5217 + pkin(2) * t5222 + t5298 * t5321) * t5288) * t5273);
t5091 = t5162 * t5293 + t5166 * t5302;
t5406 = t5301 * t5091;
t5322 = t5485 * t5292 + t5406;
t5029 = ((t5346 * t5273 - t5468) * rSges(3,1) + t5322 * rSges(3,2)) * t5300 + (t5322 * rSges(3,1) - t5346 * t5466 + t5405) * t5291;
t5398 = pkin(6) * t5470;
t5407 = t5300 * t5301;
t5457 = t5029 / (t5197 * t5407 + (t5158 * t5300 - t5271 * t5402) * t5292 + ((pkin(2) * t5214 * t5300 - t5398) * t5301 + (pkin(1) * t5219 + pkin(2) * t5223 + t5301 * t5321) * t5291) * t5273);
t5167 = t5196 * t5469;
t5030 = t5167 * t5280 + (t5349 * t5425 + t5412) * t5196 + (t5087 * t5280 - t5482 * t5283) * t5126;
t5205 = t5248 + pkin(1);
t5345 = -pkin(6) * t5172 + t5205 * t5246;
t5424 = t5274 * t5282;
t5395 = pkin(1) * t5424;
t5456 = t5030 / ((t5207 - t5489) * t5395 + t5273 * (t5345 * t5282 - t5283 * t5401 + t5391));
t5031 = t5167 * t5286 + (t5348 * t5422 + t5410) * t5196 + (t5089 * t5286 - t5483 * t5295) * t5129;
t5216 = t5253 + pkin(1);
t5344 = -pkin(6) * t5174 + t5216 * t5249;
t5417 = t5274 * t5294;
t5394 = pkin(1) * t5417;
t5455 = t5031 / ((t5224 - t5488) * t5394 + t5273 * (t5344 * t5294 - t5295 * t5400 + t5390));
t5032 = t5167 * t5289 + (t5347 * t5420 + t5408) * t5196 + (t5090 * t5289 - t5484 * t5298) * t5130;
t5218 = t5255 + pkin(1);
t5343 = -pkin(6) * t5175 + t5218 * t5250;
t5416 = t5274 * t5297;
t5393 = pkin(1) * t5416;
t5454 = t5032 / ((t5225 - t5487) * t5393 + t5273 * (t5343 * t5297 - t5298 * t5399 + t5389));
t5033 = t5167 * t5292 + (t5346 * t5418 + t5406) * t5196 + (t5091 * t5292 - t5485 * t5301) * t5131;
t5220 = t5257 + pkin(1);
t5342 = -pkin(6) * t5176 + t5220 * t5251;
t5415 = t5274 * t5300;
t5392 = pkin(1) * t5415;
t5453 = t5033 / ((t5226 - t5486) * t5392 + t5273 * (t5342 * t5300 - t5301 * t5398 + t5388));
t5452 = (pkin(1) + 0.2e1 * t5206) * t5204;
t5451 = (pkin(1) + 0.2e1 * t5221) * t5215;
t5450 = (pkin(1) + 0.2e1 * t5222) * t5217;
t5449 = (pkin(1) + 0.2e1 * t5223) * t5219;
t5448 = (t5247 + t5265) * (t5247 + t5266);
t5447 = (t5252 + t5265) * (t5252 + t5266);
t5446 = (t5254 + t5265) * (t5254 + t5266);
t5445 = (t5256 + t5265) * (t5256 + t5266);
t5444 = t5204 * t5273;
t5443 = t5215 * t5273;
t5442 = t5217 * t5273;
t5441 = t5219 * t5273;
t5440 = t5265 * t5266;
t5439 = t5273 * t5274;
t5438 = t5273 * t5279;
t5437 = t5273 * t5280;
t5435 = t5273 * t5285;
t5434 = t5273 * t5286;
t5433 = t5273 * t5288;
t5432 = t5273 * t5289;
t5431 = t5273 * t5291;
t5430 = t5273 * t5292;
t5426 = t5274 * t5279;
t5423 = t5274 * t5285;
t5421 = t5274 * t5288;
t5419 = t5274 * t5291;
t5397 = -0.2e1 * (t5274 + 0.1e1) * (t5274 - 0.1e1);
t5396 = t5273 * t5480;
t5386 = t5279 * pkin(6) + pkin(3);
t5385 = pkin(6) * t5285 + pkin(3);
t5384 = pkin(6) * t5288 + pkin(3);
t5383 = pkin(6) * t5291 + pkin(3);
t5127 = t5236 * t5284 + t5240 * t5281;
t5382 = t5127 * t5438;
t5133 = -t5237 * t5287 + t5241 * t5296;
t5381 = t5133 * t5435;
t5136 = t5239 * t5302 + t5243 * t5293;
t5380 = t5136 * t5431;
t5379 = t5204 * t5414;
t5378 = t5215 * t5414;
t5377 = t5217 * t5414;
t5376 = t5219 * t5414;
t5375 = t5273 * t5414;
t5374 = t5273 * t5425;
t5373 = t5273 * t5422;
t5372 = t5273 * t5420;
t5371 = t5273 * t5418;
t5128 = -t5236 * t5281 + t5240 * t5284;
t5370 = t5128 * t5438;
t5369 = t5281 * t5448;
t5132 = t5237 * t5296 + t5241 * t5287;
t5368 = t5132 * t5435;
t5367 = t5287 * t5447;
t5134 = t5238 * t5299 + t5242 * t5290;
t5366 = t5134 * t5433;
t5135 = -t5238 * t5290 + t5242 * t5299;
t5365 = t5135 * t5433;
t5364 = t5290 * t5446;
t5137 = -t5239 * t5293 + t5243 * t5302;
t5363 = t5137 * t5431;
t5362 = t5293 * t5445;
t5361 = t5284 * t5379;
t5360 = t5296 * t5378;
t5359 = t5299 * t5377;
t5358 = t5302 * t5376;
t5337 = -(t5205 * t5280 + t5305 + (t5280 * t5247 - t5207) * t5283) * t5438 + (pkin(3) * t5413 + t5168) * t5424;
t5336 = -(t5216 * t5286 + t5305 + (t5286 * t5252 - t5224) * t5295) * t5435 + (pkin(3) * t5411 + t5169) * t5417;
t5335 = -(t5218 * t5289 + t5305 + (t5289 * t5254 - t5225) * t5298) * t5433 + (pkin(3) * t5409 + t5170) * t5416;
t5334 = -(t5220 * t5292 + t5305 + (t5292 * t5256 - t5226) * t5301) * t5431 + (pkin(3) * t5407 + t5171) * t5415;
t5264 = t5283 ^ 2;
t5146 = pkin(2) * t5264 + t5280 * t5207 - pkin(2);
t5231 = t5264 - 0.2e1;
t5329 = ((t5231 * t5246 - pkin(6)) * t5282 + t5279 * t5146) * t5439 - (t5173 * t5282 + (t5386 - 0.2e1 * t5473) * t5280) * t5262 - (-t5386 + t5473) * t5280;
t5268 = t5295 ^ 2;
t5147 = pkin(2) * t5268 + t5286 * t5224 - pkin(2);
t5232 = t5268 - 0.2e1;
t5328 = ((t5232 * t5249 - pkin(6)) * t5294 + t5285 * t5147) * t5439 - (t5177 * t5294 + (t5385 - 0.2e1 * t5472) * t5286) * t5262 - (-t5385 + t5472) * t5286;
t5270 = t5298 ^ 2;
t5148 = pkin(2) * t5270 + t5289 * t5225 - pkin(2);
t5233 = t5270 - 0.2e1;
t5327 = ((t5233 * t5250 - pkin(6)) * t5297 + t5288 * t5148) * t5439 - (t5178 * t5297 + (t5384 - 0.2e1 * t5471) * t5289) * t5262 - (-t5384 + t5471) * t5289;
t5272 = t5301 ^ 2;
t5149 = pkin(2) * t5272 + t5292 * t5226 - pkin(2);
t5234 = t5272 - 0.2e1;
t5326 = ((t5234 * t5251 - pkin(6)) * t5300 + t5291 * t5149) * t5439 - (t5179 * t5300 + (t5383 - 0.2e1 * t5470) * t5292) * t5262 - (-t5383 + t5470) * t5292;
t5319 = pkin(3) ^ 2;
t5318 = koppelP(1,1);
t5317 = koppelP(2,1);
t5316 = koppelP(3,1);
t5315 = koppelP(4,1);
t5314 = koppelP(1,2);
t5313 = koppelP(2,2);
t5312 = koppelP(3,2);
t5311 = koppelP(4,2);
t5310 = rSges(4,1);
t5309 = rSges(4,2);
t5308 = xP(4);
t5261 = cos(t5308);
t5260 = sin(t5308);
t5259 = pkin(1) * t5305;
t5213 = t5251 + pkin(6);
t5211 = t5250 + pkin(6);
t5209 = t5249 + pkin(6);
t5202 = t5246 + pkin(6);
t5201 = pkin(1) * t5292 + t5305;
t5200 = pkin(1) * t5289 + t5305;
t5199 = pkin(1) * t5286 + t5305;
t5198 = pkin(1) * t5280 + t5305;
t5157 = -t5260 * t5314 + t5261 * t5318;
t5156 = -t5260 * t5313 + t5261 * t5317;
t5155 = -t5260 * t5312 + t5261 * t5316;
t5154 = -t5260 * t5311 + t5261 * t5315;
t5153 = -t5260 * t5318 - t5261 * t5314;
t5152 = -t5260 * t5317 - t5261 * t5313;
t5151 = -t5260 * t5316 - t5261 * t5312;
t5150 = -t5260 * t5315 - t5261 * t5311;
t5113 = -t5213 * t5430 + t5219 * t5274;
t5112 = -t5211 * t5432 + t5217 * t5274;
t5111 = -t5209 * t5434 + t5215 * t5274;
t5110 = -t5202 * t5437 + t5204 * t5274;
t5085 = 0.2e1 * t5293 * t5376 + t5302 * t5445;
t5084 = 0.2e1 * t5290 * t5377 + t5299 * t5446;
t5083 = 0.2e1 * t5287 * t5378 + t5296 * t5447;
t5082 = 0.2e1 * t5281 * t5379 + t5284 * t5448;
t5081 = t5113 * t5302 + t5201 * t5293;
t5080 = t5112 * t5299 + t5200 * t5290;
t5079 = t5111 * t5296 + t5199 * t5287;
t5078 = -t5113 * t5293 + t5201 * t5302;
t5077 = -t5112 * t5290 + t5200 * t5299;
t5076 = -t5111 * t5287 + t5199 * t5296;
t5075 = t5110 * t5284 + t5198 * t5281;
t5074 = -t5110 * t5281 + t5198 * t5284;
t5073 = -t5213 * t5441 + t5418 * t5445;
t5072 = -t5211 * t5442 + t5420 * t5446;
t5071 = -t5209 * t5443 + t5422 * t5447;
t5070 = -t5202 * t5444 + t5425 * t5448;
t5069 = t5073 * t5302 + t5293 * t5449;
t5068 = t5072 * t5299 + t5290 * t5450;
t5067 = t5071 * t5296 + t5287 * t5451;
t5066 = -t5073 * t5293 + t5302 * t5449;
t5065 = -t5072 * t5290 + t5299 * t5450;
t5064 = -t5071 * t5287 + t5296 * t5451;
t5063 = t5070 * t5284 + t5281 * t5452;
t5062 = -t5070 * t5281 + t5284 * t5452;
t5049 = -(-t5136 * t5418 + t5137 * t5301) * t5470 + (-pkin(3) * t5380 + (-pkin(2) * t5137 - t5136 * t5414) * t5301 + t5292 * (t5136 * t5478 - t5137 * t5305)) * t5300 - pkin(2) * t5380;
t5048 = -(t5136 * t5301 + t5137 * t5418) * t5470 + (pkin(3) * t5363 + (-pkin(2) * t5136 + t5137 * t5414) * t5301 - t5292 * (t5136 * t5305 + t5137 * t5478)) * t5300 + pkin(2) * t5363;
t5047 = -(-t5134 * t5420 + t5135 * t5298) * t5471 + (-pkin(3) * t5366 + (-pkin(2) * t5135 - t5134 * t5414) * t5298 + t5289 * (t5134 * t5478 - t5135 * t5305)) * t5297 - pkin(2) * t5366;
t5046 = -(t5134 * t5298 + t5135 * t5420) * t5471 + (pkin(3) * t5365 + (-pkin(2) * t5134 + t5135 * t5414) * t5298 - t5289 * (t5134 * t5305 + t5135 * t5478)) * t5297 + pkin(2) * t5365;
t5045 = -(-t5132 * t5422 + t5133 * t5295) * t5472 + (-pkin(3) * t5368 + (-pkin(2) * t5133 - t5132 * t5414) * t5295 + t5286 * (t5132 * t5478 - t5133 * t5305)) * t5294 - pkin(2) * t5368;
t5044 = -(t5132 * t5295 + t5133 * t5422) * t5472 + (pkin(3) * t5381 + (-pkin(2) * t5132 + t5133 * t5414) * t5295 - t5286 * (t5132 * t5305 + t5133 * t5478)) * t5294 + pkin(2) * t5381;
t5043 = -(-t5127 * t5425 + t5128 * t5283) * t5473 + (-pkin(3) * t5382 + (-pkin(2) * t5128 - t5127 * t5414) * t5283 + t5280 * (t5127 * t5478 - t5128 * t5305)) * t5282 - pkin(2) * t5382;
t5042 = -(t5127 * t5283 + t5128 * t5425) * t5473 + (pkin(3) * t5370 + (-pkin(2) * t5127 + t5128 * t5414) * t5283 - t5280 * (t5127 * t5305 + t5128 * t5478)) * t5282 + pkin(2) * t5370;
t5041 = t5334 * t5136 + t5326 * t5137;
t5040 = -t5326 * t5136 + t5334 * t5137;
t5039 = t5335 * t5134 + t5327 * t5135;
t5038 = -t5327 * t5134 + t5335 * t5135;
t5037 = t5336 * t5132 + t5328 * t5133;
t5036 = -t5328 * t5132 + t5336 * t5133;
t5035 = t5337 * t5127 + t5329 * t5128;
t5034 = -t5329 * t5127 + t5337 * t5128;
t5025 = ((-0.2e1 * t5358 + t5362) * t5243 + t5085 * t5239) * t5272 + (t5066 * t5239 + t5069 * t5243) * t5301 + t5305 * (t5078 * t5239 + t5081 * t5243);
t5024 = ((-0.2e1 * t5359 + t5364) * t5242 + t5084 * t5238) * t5270 + (t5065 * t5238 + t5068 * t5242) * t5298 + t5305 * (t5077 * t5238 + t5080 * t5242);
t5023 = ((-0.2e1 * t5360 + t5367) * t5241 + t5083 * t5237) * t5268 + (t5064 * t5237 + t5067 * t5241) * t5295 + t5305 * (t5076 * t5237 + t5079 * t5241);
t5022 = (t5085 * t5243 + 0.2e1 * (t5358 - t5362 / 0.2e1) * t5239) * t5272 + (t5066 * t5243 - t5069 * t5239) * t5301 + (t5078 * t5243 - t5081 * t5239) * t5305;
t5021 = (t5084 * t5242 + 0.2e1 * (t5359 - t5364 / 0.2e1) * t5238) * t5270 + (t5065 * t5242 - t5068 * t5238) * t5298 + (t5077 * t5242 - t5080 * t5238) * t5305;
t5020 = (t5083 * t5241 + 0.2e1 * (t5360 - t5367 / 0.2e1) * t5237) * t5268 + (t5064 * t5241 - t5067 * t5237) * t5295 + (t5076 * t5241 - t5079 * t5237) * t5305;
t5019 = ((-0.2e1 * t5361 + t5369) * t5240 + t5082 * t5236) * t5264 + (t5062 * t5236 + t5063 * t5240) * t5283 + t5305 * (t5074 * t5236 + t5075 * t5240);
t5018 = (t5082 * t5240 + 0.2e1 * (t5361 - t5369 / 0.2e1) * t5236) * t5264 + (t5062 * t5240 - t5063 * t5236) * t5283 + (t5074 * t5240 - t5075 * t5236) * t5305;
t1 = [t5043 * t5464 + t5045 * t5463 + t5047 * t5462 + t5049 * t5461 + t5034 * t5456 + t5036 * t5455 + t5038 * t5454 + t5040 * t5453 - m(4) * g(1) + (-t5018 * t5460 - t5020 * t5459 - t5021 * t5458 - t5022 * t5457) * t5396; t5042 * t5464 + t5044 * t5463 + t5046 * t5462 + t5048 * t5461 + t5035 * t5456 + t5037 * t5455 + t5039 * t5454 + t5041 * t5453 - m(4) * g(2) + (-t5019 * t5460 - t5023 * t5459 - t5024 * t5458 - t5025 * t5457) * t5396; (-t5430 * t5470 + (-pkin(3) * t5419 + t5179 * t5273) * t5300 - pkin(2) * t5419) * t5461 + ((-t5179 * t5439 + t5467) * t5300 + (-pkin(6) * t5371 - t5149 * t5262 + t5301 * t5171) * t5291 + (-(t5234 * t5262 - t5272 + 0.1e1) * t5291 * t5300 + (0.2e1 * t5271 - 0.1e1) * t5371) * pkin(3)) / ((t5342 * t5273 + t5142) * t5300 + t5354) * t5033 + (-t5432 * t5471 + (-pkin(3) * t5421 + t5178 * t5273) * t5297 - pkin(2) * t5421) * t5462 + ((-t5178 * t5439 + t5467) * t5297 + (-pkin(6) * t5372 - t5148 * t5262 + t5298 * t5170) * t5288 + (-(t5233 * t5262 - t5270 + 0.1e1) * t5288 * t5297 + (0.2e1 * t5269 - 0.1e1) * t5372) * pkin(3)) / ((t5343 * t5273 + t5141) * t5297 + t5355) * t5032 + (-t5434 * t5472 + (-pkin(3) * t5423 + t5177 * t5273) * t5294 - pkin(2) * t5423) * t5463 + ((-t5177 * t5439 + t5467) * t5294 + (-pkin(6) * t5373 - t5147 * t5262 + t5169 * t5295) * t5285 + (-(t5232 * t5262 - t5268 + 0.1e1) * t5285 * t5294 + (0.2e1 * t5267 - 0.1e1) * t5373) * pkin(3)) / ((t5344 * t5273 + t5140) * t5294 + t5356) * t5031 + (-t5437 * t5473 + (-pkin(3) * t5426 + t5173 * t5273) * t5282 - pkin(2) * t5426) * t5464 + ((-t5173 * t5439 + t5467) * t5282 + (-pkin(6) * t5374 - t5146 * t5262 + t5283 * t5168) * t5279 + (-(t5231 * t5262 - t5264 + 0.1e1) * t5279 * t5282 + (0.2e1 * t5263 - 0.1e1) * t5374) * pkin(3)) / ((t5345 * t5273 + t5138) * t5282 + t5357) * t5030 - m(4) * g(3) + ((t5259 * t5301 + (-t5213 * t5274 * t5427 - t5201 + (t5272 * t5397 + t5262) * t5305) * t5219 + ((t5262 * t5445 - t5271 * t5319 + t5300 * t5465 - t5440) * t5301 - t5213 * t5375) * t5292) / ((t5300 * t5197 - (pkin(6) * t5300 - t5474) * t5441) * t5301 - t5392 * t5486 + t5273 * (t5350 * t5300 + (t5223 + pkin(1)) * t5474)) * t5029 + (t5259 * t5298 + (-t5211 * t5274 * t5428 - t5200 + (t5270 * t5397 + t5262) * t5305) * t5217 + ((t5262 * t5446 - t5269 * t5319 + t5297 * t5465 - t5440) * t5298 - t5211 * t5375) * t5289) / ((t5297 * t5197 - (pkin(6) * t5297 - t5475) * t5442) * t5298 - t5393 * t5487 + t5273 * (t5351 * t5297 + (t5222 + pkin(1)) * t5475)) * t5028 + (t5259 * t5295 + (-t5209 * t5274 * t5429 - t5199 + (t5268 * t5397 + t5262) * t5305) * t5215 + ((t5262 * t5447 - t5267 * t5319 + t5294 * t5465 - t5440) * t5295 - t5209 * t5375) * t5286) / ((t5294 * t5197 - (pkin(6) * t5294 - t5476) * t5443) * t5295 - t5394 * t5488 + t5273 * (t5352 * t5294 + (t5221 + pkin(1)) * t5476)) * t5027 + (t5259 * t5283 + (-t5202 * t5274 * t5436 - t5198 + (t5264 * t5397 + t5262) * t5305) * t5204 + ((t5262 * t5448 - t5263 * t5319 + t5282 * t5465 - t5440) * t5283 - t5202 * t5375) * t5280) / ((t5282 * t5197 - (pkin(6) * t5282 - t5477) * t5444) * t5283 - t5395 * t5489 + t5273 * (t5353 * t5282 + (t5206 + pkin(1)) * t5477)) * t5026) * t5480; m(4) * ((g(1) * t5310 + g(2) * t5309) * t5260 + (g(1) * t5309 - g(2) * t5310) * t5261) + (t5040 * t5153 + t5041 * t5157) * t5453 + (t5038 * t5152 + t5039 * t5156) * t5454 + (t5036 * t5151 + t5037 * t5155) * t5455 + (t5034 * t5150 + t5035 * t5154) * t5456 + (t5048 * t5157 + t5049 * t5153) * t5461 + (t5046 * t5156 + t5047 * t5152) * t5462 + (t5044 * t5155 + t5045 * t5151) * t5463 + (t5042 * t5154 + t5043 * t5150) * t5464 + ((-t5022 * t5153 - t5025 * t5157) * t5457 + (-t5021 * t5152 - t5024 * t5156) * t5458 + (-t5020 * t5151 - t5023 * t5155) * t5459 + (-t5018 * t5150 - t5019 * t5154) * t5460) * t5396;];
taugX  = t1;
