% Calculate inertia matrix for parallel robot
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% MX [4x4]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1(xP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp1: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 13:33:26
% EndTime: 2020-08-07 13:33:55
% DurationCPUTime: 27.73s
% Computational Cost: add. (65406->1022), mult. (105999->1550), div. (1280->21), fcn. (70216->36), ass. (0->601)
t2925 = -2 * pkin(2);
t2575 = (pkin(7) + rSges(3,3));
t2861 = (t2575 * m(3));
t2442 = rSges(3,2) * t2861 - Icges(3,6);
t2443 = rSges(3,1) * t2861 - Icges(3,5);
t2551 = sin(qJ(3,4));
t2554 = cos(qJ(3,4));
t2323 = -t2442 * t2554 - t2443 * t2551;
t2596 = (rSges(3,2) ^ 2);
t2598 = (rSges(3,1) ^ 2);
t2424 = (-t2596 + t2598) * m(3) - Icges(3,1) + Icges(3,2);
t2580 = rSges(3,2) * pkin(2);
t2885 = (rSges(3,1) * pkin(6));
t2441 = m(3) * (t2580 + t2885);
t2579 = rSges(3,2) * pkin(6);
t2886 = rSges(3,1) * pkin(2);
t2455 = -t2579 + t2886;
t2535 = t2554 ^ 2;
t2552 = sin(qJ(2,4));
t2555 = cos(qJ(2,4));
t2576 = rSges(2,3) + pkin(6);
t2883 = m(2) * t2576;
t2633 = -rSges(2,2) * t2883 + pkin(6) * t2861 + Icges(2,6);
t2882 = m(3) * t2551;
t2884 = rSges(3,1) * rSges(3,2);
t2487 = m(3) * t2884 - Icges(3,4);
t2889 = -2 * t2487;
t2904 = rSges(2,1) * t2883 + Icges(3,4) - Icges(2,5) - (-pkin(2) * pkin(6) + t2884) * m(3);
t2924 = (t2455 * t2882 - t2535 * t2889 + (t2424 * t2551 + t2441) * t2554 + t2904) * t2552 - (t2633 - t2323) * t2555;
t2557 = sin(qJ(3,3));
t2566 = cos(qJ(3,3));
t2324 = -t2442 * t2566 - t2443 * t2557;
t2539 = t2566 ^ 2;
t2558 = sin(qJ(2,3));
t2567 = cos(qJ(2,3));
t2881 = m(3) * t2557;
t2923 = (t2455 * t2881 - t2539 * t2889 + (t2424 * t2557 + t2441) * t2566 + t2904) * t2558 - (t2633 - t2324) * t2567;
t2560 = sin(qJ(3,2));
t2569 = cos(qJ(3,2));
t2325 = -t2442 * t2569 - t2443 * t2560;
t2541 = t2569 ^ 2;
t2561 = sin(qJ(2,2));
t2570 = cos(qJ(2,2));
t2880 = m(3) * t2560;
t2922 = (t2455 * t2880 - t2541 * t2889 + (t2424 * t2560 + t2441) * t2569 + t2904) * t2561 - (t2633 - t2325) * t2570;
t2563 = sin(qJ(3,1));
t2572 = cos(qJ(3,1));
t2326 = -t2442 * t2572 - t2443 * t2563;
t2543 = t2572 ^ 2;
t2564 = sin(qJ(2,1));
t2573 = cos(qJ(2,1));
t2879 = m(3) * t2563;
t2921 = (t2455 * t2879 - t2543 * t2889 + (t2424 * t2563 + t2441) * t2572 + t2904) * t2564 - (t2633 - t2326) * t2573;
t2378 = t2424 * t2543;
t2720 = rSges(3,2) * t2879;
t2920 = t2720 * t2925 + t2378;
t2377 = t2424 * t2541;
t2721 = rSges(3,2) * t2880;
t2919 = t2721 * t2925 + t2377;
t2376 = t2424 * t2539;
t2722 = rSges(3,2) * t2881;
t2918 = t2722 * t2925 + t2376;
t2372 = t2424 * t2535;
t2723 = rSges(3,2) * t2882;
t2917 = t2723 * t2925 + t2372;
t2739 = m(3) * t2886;
t2517 = 2 * t2739;
t2783 = t2487 * t2551;
t2719 = 0.2e1 * t2783;
t2908 = (-t2719 + t2517) * t2554 + t2917;
t2782 = t2487 * t2557;
t2718 = 0.2e1 * t2782;
t2907 = (-t2718 + t2517) * t2566 + t2918;
t2781 = t2487 * t2560;
t2717 = 0.2e1 * t2781;
t2906 = (-t2717 + t2517) * t2569 + t2919;
t2780 = t2487 * t2563;
t2716 = 0.2e1 * t2780;
t2905 = (-t2716 + t2517) * t2572 + t2920;
t2512 = t2554 * pkin(3);
t2460 = t2512 + pkin(2);
t2523 = t2566 * pkin(3);
t2470 = t2523 + pkin(2);
t2525 = t2569 * pkin(3);
t2472 = t2525 + pkin(2);
t2527 = t2572 * pkin(3);
t2474 = t2527 + pkin(2);
t2597 = rSges(2,2) ^ 2;
t2599 = rSges(2,1) ^ 2;
t2603 = pkin(2) ^ 2;
t2733 = t2596 + t2603;
t2857 = (Icges(3,1) + Icges(2,3));
t2659 = (t2575 ^ 2 + t2733) * m(3) + (t2597 + t2599) * m(2) + t2857;
t2283 = t2659 + t2908;
t2284 = t2659 + t2907;
t2285 = t2659 + t2906;
t2286 = t2659 + t2905;
t2888 = m(2) * rSges(2,2);
t2634 = -rSges(2,1) * t2888 + pkin(2) * t2861 + Icges(2,4);
t2858 = (Icges(2,1) + Icges(3,2));
t2627 = (t2596 - (pkin(2) + t2575) * (-pkin(2) + t2575)) * m(3) + (-t2597 + t2599) * m(2) + Icges(2,2) + Icges(3,3) - t2858;
t2891 = 2 * m(3);
t2890 = -2 * pkin(1);
t2582 = (pkin(8) + pkin(7));
t2887 = m(3) * rSges(3,1);
t2546 = cos(pkin(4));
t2878 = pkin(1) * t2546;
t2877 = pkin(1) * t2552;
t2876 = pkin(1) * t2558;
t2875 = pkin(1) * t2561;
t2874 = pkin(1) * t2564;
t2873 = pkin(2) * t2546;
t2869 = t2535 * pkin(3);
t2868 = t2539 * pkin(3);
t2867 = t2541 * pkin(3);
t2866 = t2543 * pkin(3);
t2865 = t2551 * pkin(2);
t2511 = t2551 * pkin(3);
t2513 = t2555 * pkin(2);
t2864 = t2557 * pkin(2);
t2520 = t2557 * pkin(3);
t2863 = t2560 * pkin(2);
t2521 = t2560 * pkin(3);
t2862 = t2563 * pkin(2);
t2522 = t2563 * pkin(3);
t2524 = t2567 * pkin(2);
t2526 = t2570 * pkin(2);
t2528 = t2573 * pkin(2);
t2534 = t2546 ^ 2;
t2860 = (t2534 - 0.1e1) * pkin(6);
t2859 = pkin(3) * t2925;
t2856 = 2 * t2887;
t2538 = pkin(2) - t2582;
t2537 = pkin(2) + t2582;
t2458 = t2511 + pkin(6);
t2763 = t2546 * t2552;
t2545 = sin(pkin(4));
t2787 = t2460 * t2545;
t2799 = (t2512 + t2537) * (t2512 + t2538);
t2291 = -t2458 * t2787 + t2763 * t2799;
t2553 = sin(qJ(1,4));
t2556 = cos(qJ(1,4));
t2462 = t2582 * t2552;
t2803 = (pkin(1) + 0.2e1 * t2462) * t2460;
t2275 = -t2291 * t2553 + t2556 * t2803;
t2276 = t2291 * t2556 + t2553 * t2803;
t2776 = t2545 * t2552;
t2319 = -t2458 * t2776 + t2546 * t2460;
t2446 = t2877 + t2582;
t2295 = -t2319 * t2553 + t2446 * t2556;
t2296 = t2319 * t2556 + t2553 * t2446;
t2752 = t2546 * t2582;
t2685 = t2460 * t2752;
t2303 = 0.2e1 * t2553 * t2685 + t2556 * t2799;
t2547 = legFrame(4,3);
t2500 = sin(t2547);
t2504 = cos(t2547);
t2536 = t2555 ^ 2;
t2646 = t2556 * t2685;
t2675 = t2553 * t2799;
t2215 = (t2303 * t2504 + 0.2e1 * (t2646 - t2675 / 0.2e1) * t2500) * t2536 + (t2275 * t2504 - t2500 * t2276) * t2555 + (t2295 * t2504 - t2500 * t2296) * t2582;
t2369 = -t2545 * pkin(6) * t2582 - pkin(1) * t2873;
t2445 = pkin(1) * t2752;
t2459 = t2511 - pkin(6);
t2727 = pkin(6) * t2869;
t2728 = pkin(3) * t2878;
t2751 = t2554 * t2555;
t2255 = 0.1e1 / (t2445 * t2751 + (t2369 * t2554 - t2535 * t2728) * t2552 + ((pkin(2) * t2459 * t2554 - t2727) * t2555 + (pkin(1) * t2460 + pkin(2) * t2462 + t2603 * t2555) * t2551) * t2545);
t2855 = t2215 * t2255;
t2216 = ((-0.2e1 * t2646 + t2675) * t2504 + t2303 * t2500) * t2536 + (t2275 * t2500 + t2276 * t2504) * t2555 + t2582 * (t2500 * t2295 + t2296 * t2504);
t2854 = t2216 * t2255;
t2464 = t2520 + pkin(6);
t2760 = t2546 * t2558;
t2786 = t2470 * t2545;
t2798 = (t2523 + t2537) * (t2523 + t2538);
t2292 = -t2464 * t2786 + t2760 * t2798;
t2559 = sin(qJ(1,3));
t2568 = cos(qJ(1,3));
t2481 = t2582 * t2558;
t2802 = (pkin(1) + 0.2e1 * t2481) * t2470;
t2277 = -t2292 * t2559 + t2568 * t2802;
t2280 = t2292 * t2568 + t2559 * t2802;
t2773 = t2545 * t2558;
t2320 = -t2464 * t2773 + t2546 * t2470;
t2450 = t2876 + t2582;
t2297 = -t2320 * t2559 + t2450 * t2568;
t2300 = t2320 * t2568 + t2559 * t2450;
t2684 = t2470 * t2752;
t2304 = 0.2e1 * t2559 * t2684 + t2568 * t2798;
t2548 = legFrame(3,3);
t2501 = sin(t2548);
t2505 = cos(t2548);
t2540 = t2567 ^ 2;
t2645 = t2568 * t2684;
t2673 = t2559 * t2798;
t2217 = (t2304 * t2505 + 0.2e1 * (t2645 - t2673 / 0.2e1) * t2501) * t2540 + (t2277 * t2505 - t2501 * t2280) * t2567 + (t2297 * t2505 - t2501 * t2300) * t2582;
t2465 = t2520 - pkin(6);
t2726 = pkin(6) * t2868;
t2750 = t2566 * t2567;
t2256 = 0.1e1 / (t2445 * t2750 + (t2369 * t2566 - t2539 * t2728) * t2558 + ((pkin(2) * t2465 * t2566 - t2726) * t2567 + (pkin(1) * t2470 + pkin(2) * t2481 + t2603 * t2567) * t2557) * t2545);
t2853 = t2217 * t2256;
t2466 = t2521 + pkin(6);
t2758 = t2546 * t2561;
t2785 = t2472 * t2545;
t2797 = (t2525 + t2537) * (t2525 + t2538);
t2293 = -t2466 * t2785 + t2758 * t2797;
t2562 = sin(qJ(1,2));
t2571 = cos(qJ(1,2));
t2482 = t2582 * t2561;
t2801 = (pkin(1) + 0.2e1 * t2482) * t2472;
t2278 = -t2293 * t2562 + t2571 * t2801;
t2281 = t2293 * t2571 + t2562 * t2801;
t2771 = t2545 * t2561;
t2321 = -t2466 * t2771 + t2546 * t2472;
t2451 = t2875 + t2582;
t2298 = -t2321 * t2562 + t2451 * t2571;
t2301 = t2321 * t2571 + t2562 * t2451;
t2683 = t2472 * t2752;
t2305 = 0.2e1 * t2562 * t2683 + t2571 * t2797;
t2549 = legFrame(2,3);
t2502 = sin(t2549);
t2506 = cos(t2549);
t2542 = t2570 ^ 2;
t2644 = t2571 * t2683;
t2672 = t2562 * t2797;
t2218 = (t2305 * t2506 + 0.2e1 * (t2644 - t2672 / 0.2e1) * t2502) * t2542 + (t2278 * t2506 - t2502 * t2281) * t2570 + (t2298 * t2506 - t2502 * t2301) * t2582;
t2467 = t2521 - pkin(6);
t2725 = pkin(6) * t2867;
t2749 = t2569 * t2570;
t2257 = 0.1e1 / (t2445 * t2749 + (t2369 * t2569 - t2541 * t2728) * t2561 + ((pkin(2) * t2467 * t2569 - t2725) * t2570 + (pkin(1) * t2472 + pkin(2) * t2482 + t2603 * t2570) * t2560) * t2545);
t2852 = t2218 * t2257;
t2468 = t2522 + pkin(6);
t2756 = t2546 * t2564;
t2784 = t2474 * t2545;
t2796 = (t2527 + t2537) * (t2527 + t2538);
t2294 = -t2468 * t2784 + t2756 * t2796;
t2565 = sin(qJ(1,1));
t2574 = cos(qJ(1,1));
t2483 = t2582 * t2564;
t2800 = (pkin(1) + 0.2e1 * t2483) * t2474;
t2279 = -t2294 * t2565 + t2574 * t2800;
t2282 = t2294 * t2574 + t2565 * t2800;
t2769 = t2545 * t2564;
t2322 = -t2468 * t2769 + t2546 * t2474;
t2452 = t2874 + t2582;
t2299 = -t2322 * t2565 + t2452 * t2574;
t2302 = t2322 * t2574 + t2565 * t2452;
t2682 = t2474 * t2752;
t2306 = 0.2e1 * t2565 * t2682 + t2574 * t2796;
t2550 = legFrame(1,3);
t2503 = sin(t2550);
t2507 = cos(t2550);
t2544 = t2573 ^ 2;
t2643 = t2574 * t2682;
t2670 = t2565 * t2796;
t2219 = (t2306 * t2507 + 0.2e1 * (t2643 - t2670 / 0.2e1) * t2503) * t2544 + (t2279 * t2507 - t2503 * t2282) * t2573 + (t2299 * t2507 - t2503 * t2302) * t2582;
t2469 = t2522 - pkin(6);
t2724 = pkin(6) * t2866;
t2748 = t2572 * t2573;
t2258 = 0.1e1 / (t2445 * t2748 + (t2369 * t2572 - t2543 * t2728) * t2564 + ((pkin(2) * t2469 * t2572 - t2724) * t2573 + (pkin(1) * t2474 + pkin(2) * t2483 + t2603 * t2573) * t2563) * t2545);
t2851 = t2219 * t2258;
t2220 = ((-0.2e1 * t2645 + t2673) * t2505 + t2304 * t2501) * t2540 + (t2277 * t2501 + t2280 * t2505) * t2567 + t2582 * (t2501 * t2297 + t2300 * t2505);
t2850 = t2220 * t2256;
t2221 = ((-0.2e1 * t2644 + t2672) * t2506 + t2305 * t2502) * t2542 + (t2278 * t2502 + t2281 * t2506) * t2570 + t2582 * (t2502 * t2298 + t2301 * t2506);
t2849 = t2221 * t2257;
t2222 = ((-0.2e1 * t2643 + t2670) * t2507 + t2306 * t2503) * t2544 + (t2279 * t2503 + t2282 * t2507) * t2573 + t2582 * (t2503 * t2299 + t2302 * t2507);
t2848 = t2222 * t2258;
t2339 = t2556 * t2500 + t2504 * t2553;
t2340 = -t2500 * t2553 + t2556 * t2504;
t2463 = t2582 * t2555;
t2357 = t2536 * pkin(2) + t2463 * t2552 - pkin(2);
t2391 = -t2552 * pkin(2) + t2463;
t2495 = t2536 - 0.2e1;
t2703 = t2551 * pkin(6) + pkin(3);
t2778 = t2545 * t2546;
t2608 = ((t2495 * t2511 - pkin(6)) * t2554 + t2551 * t2357) * t2778 - (t2391 * t2554 + (t2703 - 0.2e1 * t2869) * t2552) * t2534 - t2552 * (-t2703 + t2869);
t2390 = t2513 + t2462;
t2379 = pkin(1) + t2390;
t2461 = t2513 + pkin(1);
t2762 = t2546 * t2554;
t2777 = t2545 * t2551;
t2617 = -(t2461 * t2552 + t2582 + (t2552 * t2512 - t2463) * t2555) * t2777 + (pkin(3) * t2751 + t2379) * t2762;
t2223 = -t2339 * t2608 + t2340 * t2617;
t2632 = -t2390 * pkin(6) + t2461 * t2511;
t2708 = t2379 * t2865;
t2268 = 0.1e1 / (pkin(1) * (-t2460 * t2552 + t2463) * t2762 + t2545 * (t2554 * t2632 - t2555 * t2727 + t2708));
t2847 = t2223 * t2268;
t2224 = t2339 * t2617 + t2340 * t2608;
t2846 = t2224 * t2268;
t2341 = t2568 * t2501 + t2505 * t2559;
t2342 = -t2501 * t2559 + t2568 * t2505;
t2484 = t2582 * t2567;
t2358 = t2540 * pkin(2) + t2484 * t2558 - pkin(2);
t2404 = -t2558 * pkin(2) + t2484;
t2496 = t2540 - 0.2e1;
t2702 = t2557 * pkin(6) + pkin(3);
t2607 = ((t2496 * t2520 - pkin(6)) * t2566 + t2557 * t2358) * t2778 - (t2404 * t2566 + (t2702 - 0.2e1 * t2868) * t2558) * t2534 - t2558 * (-t2702 + t2868);
t2401 = t2524 + t2481;
t2382 = pkin(1) + t2401;
t2471 = t2524 + pkin(1);
t2755 = t2546 * t2566;
t2774 = t2545 * t2557;
t2616 = -(t2471 * t2558 + t2582 + (t2558 * t2523 - t2484) * t2567) * t2774 + (pkin(3) * t2750 + t2382) * t2755;
t2225 = -t2341 * t2607 + t2342 * t2616;
t2631 = -t2401 * pkin(6) + t2471 * t2520;
t2707 = t2382 * t2864;
t2272 = 0.1e1 / (pkin(1) * (-t2470 * t2558 + t2484) * t2755 + t2545 * (t2566 * t2631 - t2567 * t2726 + t2707));
t2845 = t2225 * t2272;
t2226 = t2341 * t2616 + t2342 * t2607;
t2844 = t2226 * t2272;
t2343 = t2571 * t2502 + t2506 * t2562;
t2344 = -t2502 * t2562 + t2571 * t2506;
t2485 = t2582 * t2570;
t2359 = t2542 * pkin(2) + t2485 * t2561 - pkin(2);
t2405 = -t2561 * pkin(2) + t2485;
t2497 = t2542 - 0.2e1;
t2701 = t2560 * pkin(6) + pkin(3);
t2606 = ((t2497 * t2521 - pkin(6)) * t2569 + t2560 * t2359) * t2778 - (t2405 * t2569 + (t2701 - 0.2e1 * t2867) * t2561) * t2534 - t2561 * (-t2701 + t2867);
t2402 = t2526 + t2482;
t2383 = pkin(1) + t2402;
t2473 = t2526 + pkin(1);
t2754 = t2546 * t2569;
t2772 = t2545 * t2560;
t2615 = -(t2473 * t2561 + t2582 + (t2561 * t2525 - t2485) * t2570) * t2772 + (pkin(3) * t2749 + t2383) * t2754;
t2227 = -t2343 * t2606 + t2344 * t2615;
t2630 = -t2402 * pkin(6) + t2473 * t2521;
t2706 = t2383 * t2863;
t2273 = 0.1e1 / (pkin(1) * (-t2472 * t2561 + t2485) * t2754 + t2545 * (t2569 * t2630 - t2570 * t2725 + t2706));
t2843 = t2227 * t2273;
t2228 = t2343 * t2615 + t2344 * t2606;
t2842 = t2228 * t2273;
t2345 = t2574 * t2503 + t2507 * t2565;
t2346 = -t2503 * t2565 + t2574 * t2507;
t2486 = t2582 * t2573;
t2360 = t2544 * pkin(2) + t2486 * t2564 - pkin(2);
t2406 = -t2564 * pkin(2) + t2486;
t2498 = t2544 - 0.2e1;
t2700 = t2563 * pkin(6) + pkin(3);
t2605 = ((t2498 * t2522 - pkin(6)) * t2572 + t2563 * t2360) * t2778 - (t2406 * t2572 + (t2700 - 0.2e1 * t2866) * t2564) * t2534 - t2564 * (-t2700 + t2866);
t2403 = t2528 + t2483;
t2384 = pkin(1) + t2403;
t2475 = t2528 + pkin(1);
t2753 = t2546 * t2572;
t2770 = t2545 * t2563;
t2614 = -(t2475 * t2564 + t2582 + (t2564 * t2527 - t2486) * t2573) * t2770 + (pkin(3) * t2748 + t2384) * t2753;
t2229 = -t2345 * t2605 + t2346 * t2614;
t2629 = -t2403 * pkin(6) + t2475 * t2522;
t2705 = t2384 * t2862;
t2274 = 0.1e1 / (pkin(1) * (-t2474 * t2564 + t2486) * t2753 + t2545 * (t2572 * t2629 - t2573 * t2724 + t2705));
t2841 = t2229 * t2274;
t2230 = t2345 * t2614 + t2346 * t2605;
t2840 = t2230 * t2274;
t2734 = -m(2) * rSges(2,1) - pkin(2) * m(3);
t2386 = t2723 + t2734;
t2438 = -t2861 + t2888;
t2231 = -t2924 * t2545 + ((-t2438 * t2552 + (t2554 * t2887 - t2386) * t2555) * pkin(1) + t2283) * t2546;
t2839 = t2231 * t2268;
t2387 = t2722 + t2734;
t2232 = -t2923 * t2545 + ((-t2438 * t2558 + (t2566 * t2887 - t2387) * t2567) * pkin(1) + t2284) * t2546;
t2838 = t2232 * t2272;
t2388 = t2721 + t2734;
t2233 = -t2922 * t2545 + ((-t2438 * t2561 + (t2569 * t2887 - t2388) * t2570) * pkin(1) + t2285) * t2546;
t2837 = t2233 * t2273;
t2389 = t2720 + t2734;
t2234 = -t2921 * t2545 + ((-t2438 * t2564 + (t2572 * t2887 - t2389) * t2573) * pkin(1) + t2286) * t2546;
t2836 = t2234 * t2274;
t2676 = t2340 * t2777;
t2746 = t2582 * t2340;
t2747 = t2582 * t2339;
t2235 = -(t2339 * t2555 + t2340 * t2763) * t2869 + (pkin(3) * t2676 + (-pkin(2) * t2339 + t2546 * t2746) * t2555 - t2552 * (t2340 * t2873 + t2747)) * t2554 + pkin(2) * t2676;
t2349 = t2391 * t2878;
t2638 = pkin(1) * t2511 - pkin(6) * t2462;
t2712 = pkin(1) * t2763;
t2775 = t2545 * t2555;
t2642 = -(pkin(6) * t2775 + t2712) * t2869 + t2545 * t2708;
t2260 = 0.1e1 / (((t2459 * t2513 + t2638) * t2545 + t2349) * t2554 + t2642);
t2835 = t2235 * t2260;
t2691 = t2339 * t2777;
t2236 = -(-t2339 * t2763 + t2340 * t2555) * t2869 + (-pkin(3) * t2691 + (-pkin(2) * t2340 - t2546 * t2747) * t2555 + t2552 * (t2339 * t2873 - t2746)) * t2554 - pkin(2) * t2691;
t2834 = t2236 * t2260;
t2674 = t2342 * t2774;
t2744 = t2582 * t2342;
t2745 = t2582 * t2341;
t2237 = -(t2341 * t2567 + t2342 * t2760) * t2868 + (pkin(3) * t2674 + (-pkin(2) * t2341 + t2546 * t2744) * t2567 - t2558 * (t2342 * t2873 + t2745)) * t2566 + pkin(2) * t2674;
t2351 = t2404 * t2878;
t2637 = pkin(1) * t2520 - pkin(6) * t2481;
t2711 = pkin(1) * t2760;
t2768 = t2545 * t2567;
t2641 = -(pkin(6) * t2768 + t2711) * t2868 + t2545 * t2707;
t2264 = 0.1e1 / (((t2465 * t2524 + t2637) * t2545 + t2351) * t2566 + t2641);
t2833 = t2237 * t2264;
t2690 = t2341 * t2774;
t2238 = -(-t2341 * t2760 + t2342 * t2567) * t2868 + (-pkin(3) * t2690 + (-pkin(2) * t2342 - t2546 * t2745) * t2567 + t2558 * (t2341 * t2873 - t2744)) * t2566 - pkin(2) * t2690;
t2832 = t2238 * t2264;
t2688 = t2344 * t2772;
t2742 = t2582 * t2344;
t2743 = t2582 * t2343;
t2239 = -(t2343 * t2570 + t2344 * t2758) * t2867 + (pkin(3) * t2688 + (-pkin(2) * t2343 + t2546 * t2742) * t2570 - t2561 * (t2344 * t2873 + t2743)) * t2569 + pkin(2) * t2688;
t2352 = t2405 * t2878;
t2636 = pkin(1) * t2521 - pkin(6) * t2482;
t2710 = pkin(1) * t2758;
t2767 = t2545 * t2570;
t2640 = -(pkin(6) * t2767 + t2710) * t2867 + t2545 * t2706;
t2265 = 0.1e1 / (((t2467 * t2526 + t2636) * t2545 + t2352) * t2569 + t2640);
t2831 = t2239 * t2265;
t2689 = t2343 * t2772;
t2240 = -(-t2343 * t2758 + t2344 * t2570) * t2867 + (-pkin(3) * t2689 + (-pkin(2) * t2344 - t2546 * t2743) * t2570 + t2561 * (t2343 * t2873 - t2742)) * t2569 - pkin(2) * t2689;
t2830 = t2240 * t2265;
t2671 = t2346 * t2770;
t2740 = t2582 * t2346;
t2741 = t2582 * t2345;
t2241 = -(t2345 * t2573 + t2346 * t2756) * t2866 + (pkin(3) * t2671 + (-pkin(2) * t2345 + t2546 * t2740) * t2573 - t2564 * (t2346 * t2873 + t2741)) * t2572 + pkin(2) * t2671;
t2353 = t2406 * t2878;
t2635 = pkin(1) * t2522 - pkin(6) * t2483;
t2709 = pkin(1) * t2756;
t2766 = t2545 * t2573;
t2639 = -(pkin(6) * t2766 + t2709) * t2866 + t2545 * t2705;
t2266 = 0.1e1 / (((t2469 * t2528 + t2635) * t2545 + t2353) * t2572 + t2639);
t2829 = t2241 * t2266;
t2687 = t2345 * t2770;
t2242 = -(-t2345 * t2756 + t2346 * t2573) * t2866 + (-pkin(3) * t2687 + (-pkin(2) * t2346 - t2546 * t2741) * t2573 + t2564 * (t2345 * t2873 - t2740)) * t2572 - pkin(2) * t2687;
t2828 = t2242 * t2266;
t2529 = pkin(1) * t2582;
t2601 = pkin(3) ^ 2;
t2681 = t2545 * t2752;
t2715 = -0.2e1 * (t2546 + 0.1e1) * (t2546 - 0.1e1);
t2779 = t2537 * t2538;
t2827 = (t2529 * t2555 + (-t2458 * t2546 * t2775 - t2446 + (t2536 * t2715 + t2534) * t2582) * t2460 + ((t2534 * t2799 - t2535 * t2601 + t2554 * t2859 - t2779) * t2555 - t2458 * t2681) * t2552) / ((t2445 * t2554 - (pkin(6) * t2554 - t2865) * t2787) * t2555 - t2554 * t2460 * t2712 + t2545 * (t2638 * t2554 + (t2462 + pkin(1)) * t2865));
t2826 = (t2529 * t2567 + (-t2464 * t2546 * t2768 - t2450 + (t2540 * t2715 + t2534) * t2582) * t2470 + ((t2534 * t2798 - t2539 * t2601 + t2566 * t2859 - t2779) * t2567 - t2464 * t2681) * t2558) / ((t2445 * t2566 - (pkin(6) * t2566 - t2864) * t2786) * t2567 - t2566 * t2470 * t2711 + t2545 * (t2637 * t2566 + (t2481 + pkin(1)) * t2864));
t2825 = (t2529 * t2570 + (-t2466 * t2546 * t2767 - t2451 + (t2542 * t2715 + t2534) * t2582) * t2472 + ((t2534 * t2797 - t2541 * t2601 + t2569 * t2859 - t2779) * t2570 - t2466 * t2681) * t2561) / ((t2445 * t2569 - (pkin(6) * t2569 - t2863) * t2785) * t2570 - t2569 * t2472 * t2710 + t2545 * (t2636 * t2569 + (t2482 + pkin(1)) * t2863));
t2824 = (t2529 * t2573 + (-t2468 * t2546 * t2766 - t2452 + (t2544 * t2715 + t2534) * t2582) * t2474 + ((t2534 * t2796 - t2543 * t2601 + t2572 * t2859 - t2779) * t2573 - t2468 * t2681) * t2564) / ((t2572 * t2445 - (pkin(6) * t2572 - t2862) * t2784) * t2573 - t2572 * t2474 * t2709 + t2545 * (t2635 * t2572 + (t2483 + pkin(1)) * t2862));
t2680 = t2545 * t2763;
t2823 = ((-t2391 * t2778 + t2860) * t2554 + (-pkin(6) * t2680 - t2357 * t2534 + t2555 * t2379) * t2551 + (-(t2495 * t2534 - t2536 + 0.1e1) * t2551 * t2554 + (0.2e1 * t2535 - 0.1e1) * t2680) * pkin(3)) / ((t2545 * t2632 + t2349) * t2554 + t2642);
t2679 = t2545 * t2760;
t2822 = ((-t2404 * t2778 + t2860) * t2566 + (-pkin(6) * t2679 - t2358 * t2534 + t2567 * t2382) * t2557 + (-(t2496 * t2534 - t2540 + 0.1e1) * t2557 * t2566 + (0.2e1 * t2539 - 0.1e1) * t2679) * pkin(3)) / ((t2545 * t2631 + t2351) * t2566 + t2641);
t2678 = t2545 * t2758;
t2821 = ((-t2405 * t2778 + t2860) * t2569 + (-pkin(6) * t2678 - t2359 * t2534 + t2570 * t2383) * t2560 + (-(t2497 * t2534 - t2542 + 0.1e1) * t2560 * t2569 + (0.2e1 * t2541 - 0.1e1) * t2678) * pkin(3)) / ((t2545 * t2630 + t2352) * t2569 + t2640);
t2677 = t2545 * t2756;
t2820 = ((-t2406 * t2778 + t2860) * t2572 + (-pkin(6) * t2677 - t2360 * t2534 + t2573 * t2384) * t2563 + (-(t2498 * t2534 - t2544 + 0.1e1) * t2563 * t2572 + (0.2e1 * t2543 - 0.1e1) * t2677) * pkin(3)) / ((t2545 * t2629 + t2353) * t2572 + t2639);
t2431 = (t2596 + t2598) * m(3) + Icges(3,3);
t2454 = t2579 + t2886;
t2457 = t2580 - t2885;
t2577 = pkin(1) * rSges(3,2);
t2578 = pkin(1) * rSges(3,1);
t2791 = t2443 * t2552;
t2251 = ((-t2791 - m(3) * (t2454 * t2555 + t2578)) * t2554 + (t2442 * t2552 + (t2457 * t2555 + t2577) * m(3)) * t2551 - t2555 * t2431) * t2545 - (-t2551 * Icges(3,5) - Icges(3,6) * t2554 + (rSges(3,1) * t2551 + rSges(3,2) * t2554) * m(3) * (t2575 + t2877)) * t2546;
t2819 = t2251 * t2260;
t2790 = t2443 * t2558;
t2252 = ((-t2790 - m(3) * (t2454 * t2567 + t2578)) * t2566 + (t2442 * t2558 + (t2457 * t2567 + t2577) * m(3)) * t2557 - t2567 * t2431) * t2545 - (-t2557 * Icges(3,5) - Icges(3,6) * t2566 + (rSges(3,1) * t2557 + rSges(3,2) * t2566) * m(3) * (t2575 + t2876)) * t2546;
t2818 = t2252 * t2264;
t2789 = t2443 * t2561;
t2253 = ((-t2789 - m(3) * (t2454 * t2570 + t2578)) * t2569 + (t2442 * t2561 + (t2457 * t2570 + t2577) * m(3)) * t2560 - t2570 * t2431) * t2545 - (-t2560 * Icges(3,5) - Icges(3,6) * t2569 + (rSges(3,1) * t2560 + rSges(3,2) * t2569) * m(3) * (t2575 + t2875)) * t2546;
t2817 = t2253 * t2265;
t2788 = t2443 * t2564;
t2254 = ((-t2788 - m(3) * (t2454 * t2573 + t2578)) * t2572 + (t2442 * t2564 + (t2457 * t2573 + t2577) * m(3)) * t2563 - t2573 * t2431) * t2545 - (-t2563 * Icges(3,5) - Icges(3,6) * t2572 + (rSges(3,1) * t2563 + rSges(3,2) * t2572) * m(3) * (t2575 + t2874)) * t2546;
t2816 = t2254 * t2266;
t2764 = t2546 * t2551;
t2815 = t2260 * (-t2776 * t2869 + (-pkin(3) * t2764 + t2545 * t2391) * t2554 - pkin(2) * t2764);
t2761 = t2546 * t2557;
t2814 = t2264 * (-t2773 * t2868 + (-pkin(3) * t2761 + t2545 * t2404) * t2566 - pkin(2) * t2761);
t2759 = t2546 * t2560;
t2813 = t2265 * (-t2771 * t2867 + (-pkin(3) * t2759 + t2545 * t2405) * t2569 - pkin(2) * t2759);
t2757 = t2546 * t2563;
t2812 = t2266 * (-t2769 * t2866 + (-pkin(3) * t2757 + t2545 * t2406) * t2572 - pkin(2) * t2757);
t2811 = t2268 * t2283;
t2810 = t2268 * t2323;
t2809 = t2272 * t2284;
t2808 = t2272 * t2324;
t2807 = t2273 * t2285;
t2806 = t2273 * t2325;
t2805 = t2274 * t2286;
t2804 = t2274 * t2326;
t2795 = t2442 * t2551;
t2794 = t2442 * t2557;
t2793 = t2442 * t2560;
t2792 = t2442 * t2563;
t2602 = 0.1e1 / pkin(3);
t2765 = t2545 * t2602;
t2600 = pkin(6) ^ 2;
t2732 = pkin(1) ^ 2 + t2600;
t2730 = -2 * t2441;
t2729 = t2438 * t2890;
t2714 = -0.2e1 * t2778;
t2713 = pkin(6) * t2856;
t2699 = t2602 * t2827;
t2698 = t2602 * t2826;
t2697 = t2602 * t2825;
t2696 = t2602 * t2824;
t2695 = t2255 * t2765;
t2694 = t2256 * t2765;
t2693 = t2257 * t2765;
t2692 = t2258 * t2765;
t2686 = t2431 * t2765;
t2665 = 2 * t2634;
t2658 = t2251 * t2695;
t2657 = t2252 * t2694;
t2656 = t2253 * t2693;
t2655 = t2254 * t2692;
t2654 = t2323 * t2695;
t2653 = t2255 * t2686;
t2652 = t2324 * t2694;
t2651 = t2256 * t2686;
t2650 = t2325 * t2693;
t2649 = t2257 * t2686;
t2648 = t2326 * t2692;
t2647 = t2258 * t2686;
t2626 = Icges(1,3) + (pkin(7) ^ 2 + t2598 + (2 * pkin(7) + rSges(3,3)) * rSges(3,3) + t2732) * m(3) + (t2597 + (2 * pkin(6) + rSges(2,3)) * rSges(2,3) + t2732) * m(2) + (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) + t2858;
t2613 = -(rSges(2,1) + t2576) * (-rSges(2,1) + t2576) * m(2) + (-t2598 - t2600 + t2733) * m(3) + t2857 - t2858;
t2595 = koppelP(1,1);
t2594 = koppelP(2,1);
t2593 = koppelP(3,1);
t2592 = koppelP(4,1);
t2591 = koppelP(1,2);
t2590 = koppelP(2,2);
t2589 = koppelP(3,2);
t2588 = koppelP(4,2);
t2586 = rSges(4,1);
t2585 = rSges(4,2);
t2584 = xP(4);
t2531 = cos(t2584);
t2530 = sin(t2584);
t2519 = pkin(1) * t2856;
t2518 = -2 * t2739;
t2516 = t2579 * t2891;
t2428 = t2455 * t2891;
t2394 = 0.2e1 * t2424;
t2368 = -t2530 * t2591 + t2531 * t2595;
t2367 = -t2530 * t2590 + t2531 * t2594;
t2366 = -t2530 * t2589 + t2531 * t2593;
t2365 = -t2530 * t2588 + t2531 * t2592;
t2364 = -t2530 * t2595 - t2531 * t2591;
t2363 = -t2530 * t2594 - t2531 * t2590;
t2362 = -t2530 * t2593 - t2531 * t2589;
t2361 = -t2530 * t2592 - t2531 * t2588;
t2348 = m(4) * (-t2530 * t2585 + t2531 * t2586);
t2347 = m(4) * (-t2530 * t2586 - t2531 * t2585);
t2214 = (((t2716 + t2518) * t2572 - t2627 - t2920) * t2544 - 0.2e1 * (t2443 * t2572 + t2634 - t2792) * t2564 * t2573 + t2394 * t2543 + (t2428 - 0.4e1 * t2780) * t2572 + t2563 * t2730 + t2613) * t2534 + t2921 * t2714 + (t2627 + t2905) * t2544 + ((t2519 + 0.2e1 * t2788) * t2572 + (t2665 - 0.2e1 * t2792) * t2564 + t2389 * t2890) * t2573 - t2378 + (t2716 + t2516) * t2572 + t2564 * t2729 + t2563 * t2713 + t2626;
t2213 = (((t2717 + t2518) * t2569 - t2627 - t2919) * t2542 - 0.2e1 * (t2443 * t2569 + t2634 - t2793) * t2561 * t2570 + t2394 * t2541 + (t2428 - 0.4e1 * t2781) * t2569 + t2560 * t2730 + t2613) * t2534 + t2922 * t2714 + (t2627 + t2906) * t2542 + ((t2519 + 0.2e1 * t2789) * t2569 + (t2665 - 0.2e1 * t2793) * t2561 + t2388 * t2890) * t2570 - t2377 + (t2717 + t2516) * t2569 + t2561 * t2729 + t2560 * t2713 + t2626;
t2212 = (((t2718 + t2518) * t2566 - t2627 - t2918) * t2540 - 0.2e1 * (t2443 * t2566 + t2634 - t2794) * t2558 * t2567 + t2394 * t2539 + (t2428 - 0.4e1 * t2782) * t2566 + t2557 * t2730 + t2613) * t2534 + t2923 * t2714 + (t2627 + t2907) * t2540 + ((t2519 + 0.2e1 * t2790) * t2566 + (t2665 - 0.2e1 * t2794) * t2558 + t2387 * t2890) * t2567 - t2376 + (t2718 + t2516) * t2566 + t2558 * t2729 + t2557 * t2713 + t2626;
t2211 = (((t2719 + t2518) * t2554 - t2627 - t2917) * t2536 - 0.2e1 * (t2443 * t2554 + t2634 - t2795) * t2552 * t2555 + t2394 * t2535 + (t2428 - 0.4e1 * t2783) * t2554 + t2551 * t2730 + t2613) * t2534 + t2924 * t2714 + (t2627 + t2908) * t2536 + ((t2519 + 0.2e1 * t2791) * t2554 + (t2665 - 0.2e1 * t2795) * t2552 + t2386 * t2890) * t2555 - t2372 + (t2719 + t2516) * t2554 + t2552 * t2729 + t2551 * t2713 + t2626;
t2210 = (t2241 * t2368 + t2242 * t2364) * t2266;
t2209 = (t2239 * t2367 + t2240 * t2363) * t2265;
t2208 = (t2237 * t2366 + t2238 * t2362) * t2264;
t2207 = (t2235 * t2365 + t2236 * t2361) * t2260;
t2206 = (t2229 * t2364 + t2230 * t2368) * t2274;
t2205 = (t2227 * t2363 + t2228 * t2367) * t2273;
t2204 = (t2225 * t2362 + t2226 * t2366) * t2272;
t2203 = (t2223 * t2361 + t2224 * t2365) * t2268;
t2202 = t2254 * t2812 + t2326 * t2820 + t2431 * t2696;
t2201 = t2253 * t2813 + t2325 * t2821 + t2431 * t2697;
t2200 = t2252 * t2814 + t2324 * t2822 + t2431 * t2698;
t2199 = t2251 * t2815 + t2323 * t2823 + t2431 * t2699;
t2198 = t2234 * t2812 + t2286 * t2820 + t2326 * t2696;
t2197 = t2233 * t2813 + t2285 * t2821 + t2325 * t2697;
t2196 = t2232 * t2814 + t2284 * t2822 + t2324 * t2698;
t2195 = (-t2219 * t2364 - t2222 * t2368) * t2692;
t2194 = (-t2218 * t2363 - t2221 * t2367) * t2693;
t2193 = (-t2217 * t2362 - t2220 * t2366) * t2694;
t2192 = t2231 * t2815 + t2283 * t2823 + t2323 * t2699;
t2191 = (-t2215 * t2361 - t2216 * t2365) * t2695;
t2190 = -t2222 * t2647 + t2230 * t2804 + t2241 * t2816;
t2189 = -t2221 * t2649 + t2228 * t2806 + t2239 * t2817;
t2188 = -t2220 * t2651 + t2226 * t2808 + t2237 * t2818;
t2187 = -t2219 * t2647 + t2229 * t2804 + t2242 * t2816;
t2186 = -t2218 * t2649 + t2227 * t2806 + t2240 * t2817;
t2185 = -t2217 * t2651 + t2225 * t2808 + t2238 * t2818;
t2184 = -t2216 * t2653 + t2224 * t2810 + t2235 * t2819;
t2183 = -t2215 * t2653 + t2223 * t2810 + t2236 * t2819;
t2182 = -t2222 * t2648 + t2230 * t2805 + t2234 * t2829;
t2181 = -t2221 * t2650 + t2228 * t2807 + t2233 * t2831;
t2180 = -t2220 * t2652 + t2226 * t2809 + t2232 * t2833;
t2179 = -t2219 * t2648 + t2229 * t2805 + t2234 * t2828;
t2178 = -t2218 * t2650 + t2227 * t2807 + t2233 * t2830;
t2177 = -t2217 * t2652 + t2225 * t2809 + t2232 * t2832;
t2176 = -t2216 * t2654 + t2224 * t2811 + t2231 * t2835;
t2175 = -t2215 * t2654 + t2223 * t2811 + t2231 * t2834;
t2174 = t2214 * t2812 + t2234 * t2820 + t2254 * t2696;
t2173 = t2213 * t2813 + t2233 * t2821 + t2253 * t2697;
t2172 = t2212 * t2814 + t2232 * t2822 + t2252 * t2698;
t2171 = t2211 * t2815 + t2231 * t2823 + t2251 * t2699;
t2170 = t2214 * t2829 - t2222 * t2655 + t2230 * t2836;
t2169 = t2213 * t2831 - t2221 * t2656 + t2228 * t2837;
t2168 = t2212 * t2833 - t2220 * t2657 + t2226 * t2838;
t2167 = t2214 * t2828 - t2219 * t2655 + t2229 * t2836;
t2166 = t2213 * t2830 - t2218 * t2656 + t2227 * t2837;
t2165 = t2212 * t2832 - t2217 * t2657 + t2225 * t2838;
t2164 = t2211 * t2835 - t2216 * t2658 + t2224 * t2839;
t2163 = t2211 * t2834 - t2215 * t2658 + t2223 * t2839;
t2162 = t2195 * t2431 + t2206 * t2326 + t2210 * t2254;
t2161 = t2194 * t2431 + t2205 * t2325 + t2209 * t2253;
t2160 = t2193 * t2431 + t2204 * t2324 + t2208 * t2252;
t2159 = t2191 * t2431 + t2203 * t2323 + t2207 * t2251;
t2158 = t2195 * t2326 + t2206 * t2286 + t2210 * t2234;
t2157 = t2194 * t2325 + t2205 * t2285 + t2209 * t2233;
t2156 = t2193 * t2324 + t2204 * t2284 + t2208 * t2232;
t2155 = t2191 * t2323 + t2203 * t2283 + t2207 * t2231;
t2154 = t2195 * t2254 + t2206 * t2234 + t2210 * t2214;
t2153 = t2194 * t2253 + t2205 * t2233 + t2209 * t2213;
t2152 = t2193 * t2252 + t2204 * t2232 + t2208 * t2212;
t2151 = t2191 * t2251 + t2203 * t2231 + t2207 * t2211;
t1 = [t2163 * t2834 + t2165 * t2832 + t2166 * t2830 + t2167 * t2828 + t2175 * t2847 + t2177 * t2845 + t2178 * t2843 + t2179 * t2841 + m(4) + (-t2183 * t2855 - t2185 * t2853 - t2186 * t2852 - t2187 * t2851) * t2765, t2163 * t2835 + t2165 * t2833 + t2166 * t2831 + t2167 * t2829 + t2175 * t2846 + t2177 * t2844 + t2178 * t2842 + t2179 * t2840 + (-t2183 * t2854 - t2185 * t2850 - t2186 * t2849 - t2187 * t2848) * t2765, t2163 * t2815 + t2165 * t2814 + t2166 * t2813 + t2167 * t2812 + t2175 * t2823 + t2177 * t2822 + t2178 * t2821 + t2179 * t2820 + (t2183 * t2827 + t2185 * t2826 + t2186 * t2825 + t2187 * t2824) * t2602, t2163 * t2207 + t2165 * t2208 + t2166 * t2209 + t2167 * t2210 + t2175 * t2203 + t2177 * t2204 + t2178 * t2205 + t2179 * t2206 + t2183 * t2191 + t2185 * t2193 + t2186 * t2194 + t2187 * t2195 + t2347; t2164 * t2834 + t2168 * t2832 + t2169 * t2830 + t2170 * t2828 + t2176 * t2847 + t2180 * t2845 + t2181 * t2843 + t2182 * t2841 + (-t2184 * t2855 - t2188 * t2853 - t2189 * t2852 - t2190 * t2851) * t2765, t2164 * t2835 + t2168 * t2833 + t2169 * t2831 + t2170 * t2829 + t2176 * t2846 + t2180 * t2844 + t2181 * t2842 + t2182 * t2840 + m(4) + (-t2184 * t2854 - t2188 * t2850 - t2189 * t2849 - t2190 * t2848) * t2765, t2164 * t2815 + t2168 * t2814 + t2169 * t2813 + t2170 * t2812 + t2176 * t2823 + t2180 * t2822 + t2181 * t2821 + t2182 * t2820 + (t2184 * t2827 + t2188 * t2826 + t2189 * t2825 + t2190 * t2824) * t2602, t2164 * t2207 + t2168 * t2208 + t2169 * t2209 + t2170 * t2210 + t2176 * t2203 + t2180 * t2204 + t2181 * t2205 + t2182 * t2206 + t2184 * t2191 + t2188 * t2193 + t2189 * t2194 + t2190 * t2195 + t2348; t2171 * t2834 + t2172 * t2832 + t2173 * t2830 + t2174 * t2828 + t2192 * t2847 + t2196 * t2845 + t2197 * t2843 + t2198 * t2841 + (-t2199 * t2855 - t2200 * t2853 - t2201 * t2852 - t2202 * t2851) * t2765, t2171 * t2835 + t2172 * t2833 + t2173 * t2831 + t2174 * t2829 + t2192 * t2846 + t2196 * t2844 + t2197 * t2842 + t2198 * t2840 + (-t2199 * t2854 - t2200 * t2850 - t2201 * t2849 - t2202 * t2848) * t2765, t2171 * t2815 + t2172 * t2814 + t2173 * t2813 + t2174 * t2812 + t2192 * t2823 + t2196 * t2822 + t2197 * t2821 + t2198 * t2820 + m(4) + (t2199 * t2827 + t2200 * t2826 + t2201 * t2825 + t2202 * t2824) * t2602, t2171 * t2207 + t2172 * t2208 + t2173 * t2209 + t2174 * t2210 + t2199 * t2191 + t2192 * t2203 + t2200 * t2193 + t2201 * t2194 + t2202 * t2195 + t2196 * t2204 + t2197 * t2205 + t2198 * t2206; t2151 * t2834 + t2152 * t2832 + t2153 * t2830 + t2154 * t2828 + t2155 * t2847 + t2156 * t2845 + t2157 * t2843 + t2158 * t2841 + t2347 + (-t2159 * t2855 - t2160 * t2853 - t2161 * t2852 - t2162 * t2851) * t2765, t2151 * t2835 + t2152 * t2833 + t2153 * t2831 + t2154 * t2829 + t2155 * t2846 + t2156 * t2844 + t2157 * t2842 + t2158 * t2840 + t2348 + (-t2159 * t2854 - t2160 * t2850 - t2161 * t2849 - t2162 * t2848) * t2765, t2151 * t2815 + t2152 * t2814 + t2153 * t2813 + t2154 * t2812 + t2155 * t2823 + t2156 * t2822 + t2157 * t2821 + t2158 * t2820 + (t2159 * t2827 + t2160 * t2826 + t2161 * t2825 + t2162 * t2824) * t2602, t2154 * t2210 + t2158 * t2206 + t2162 * t2195 + t2153 * t2209 + t2157 * t2205 + t2161 * t2194 + t2152 * t2208 + t2156 * t2204 + t2160 * t2193 + t2151 * t2207 + t2155 * t2203 + t2159 * t2191 + Icges(4,3) + m(4) * (t2585 ^ 2 + t2586 ^ 2);];
MX  = t1;
