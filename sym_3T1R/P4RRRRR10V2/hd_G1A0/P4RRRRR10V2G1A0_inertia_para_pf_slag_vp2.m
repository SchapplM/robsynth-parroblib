% Calculate inertia matrix for parallel robot
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% MX [4x4]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2(xP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(8,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: xP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_inertia_para_pf_slag_vp2: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 13:50:21
% EndTime: 2020-08-07 13:50:45
% DurationCPUTime: 23.08s
% Computational Cost: add. (59068->986), mult. (95688->1488), div. (1280->21), fcn. (69960->36), ass. (0->587)
t2760 = 2 * pkin(2);
t2759 = m(2) + m(3);
t2703 = m(3) * pkin(2) + mrSges(2,1);
t2417 = cos(qJ(3,4));
t2374 = t2417 * pkin(3);
t2325 = t2374 + pkin(2);
t2415 = sin(qJ(2,4));
t2758 = t2325 * t2415;
t2430 = cos(qJ(3,3));
t2380 = t2430 * pkin(3);
t2338 = t2380 + pkin(2);
t2422 = sin(qJ(2,3));
t2757 = t2338 * t2422;
t2433 = cos(qJ(3,2));
t2382 = t2433 * pkin(3);
t2340 = t2382 + pkin(2);
t2425 = sin(qJ(2,2));
t2756 = t2340 * t2425;
t2436 = cos(qJ(3,1));
t2384 = t2436 * pkin(3);
t2342 = t2384 + pkin(2);
t2428 = sin(qJ(2,1));
t2755 = t2342 * t2428;
t2406 = t2436 ^ 2;
t2420 = Ifges(3,2) - Ifges(3,1);
t2591 = t2420 * t2406;
t2427 = sin(qJ(3,1));
t2709 = mrSges(3,2) * t2427;
t2754 = t2709 * t2760 - t2591;
t2404 = t2433 ^ 2;
t2592 = t2420 * t2404;
t2424 = sin(qJ(3,2));
t2710 = mrSges(3,2) * t2424;
t2753 = t2710 * t2760 - t2592;
t2402 = t2430 ^ 2;
t2593 = t2420 * t2402;
t2421 = sin(qJ(3,3));
t2711 = mrSges(3,2) * t2421;
t2752 = t2711 * t2760 - t2593;
t2392 = t2417 ^ 2;
t2594 = t2420 * t2392;
t2414 = sin(qJ(3,4));
t2712 = mrSges(3,2) * t2414;
t2751 = t2712 * t2760 - t2594;
t2369 = mrSges(3,2) * pkin(7) - Ifges(3,6);
t2370 = pkin(7) * mrSges(3,1) - Ifges(3,5);
t2235 = -t2369 * t2417 - t2370 * t2414;
t2439 = pkin(6) * mrSges(3,2);
t2725 = pkin(2) * mrSges(3,1);
t2319 = -t2439 + t2725;
t2418 = cos(qJ(2,4));
t2525 = -t2703 * pkin(6) - Ifges(3,4) + Ifges(2,5);
t2440 = pkin(6) * mrSges(3,1);
t2442 = pkin(2) * mrSges(3,2);
t2584 = t2440 + t2442;
t2376 = pkin(7) * m(3) + mrSges(3,3);
t2351 = -mrSges(2,2) + t2376;
t2701 = t2351 * pkin(6) + Ifges(2,6);
t2734 = -0.2e1 * Ifges(3,4);
t2750 = -t2415 * (t2319 * t2414 + t2392 * t2734 + t2417 * (t2414 * t2420 + t2584) - t2525) + t2418 * (-t2235 + t2701);
t2242 = -t2369 * t2430 - t2370 * t2421;
t2431 = cos(qJ(2,3));
t2749 = -t2422 * (t2319 * t2421 + t2402 * t2734 + t2430 * (t2420 * t2421 + t2584) - t2525) + t2431 * (-t2242 + t2701);
t2243 = -t2369 * t2433 - t2370 * t2424;
t2434 = cos(qJ(2,2));
t2748 = -t2425 * (t2319 * t2424 + t2404 * t2734 + t2433 * (t2420 * t2424 + t2584) - t2525) + t2434 * (-t2243 + t2701);
t2244 = -t2369 * t2436 - t2370 * t2427;
t2437 = cos(qJ(2,1));
t2747 = -t2428 * (t2319 * t2427 + t2406 * t2734 + t2436 * (t2420 * t2427 + t2584) - t2525) + t2437 * (-t2244 + t2701);
t2746 = Ifges(3,1) + Ifges(2,3);
t2745 = t2376 * pkin(2) + Ifges(2,4);
t2744 = (-t2759 * pkin(6) - (2 * mrSges(2,3))) * pkin(6);
t2708 = Ifges(3,4) * t2414;
t2290 = t2708 + t2725;
t2732 = 0.2e1 * t2417;
t2743 = t2290 * t2732 - t2751;
t2707 = Ifges(3,4) * t2421;
t2293 = t2707 + t2725;
t2731 = 0.2e1 * t2430;
t2742 = t2293 * t2731 - t2752;
t2706 = Ifges(3,4) * t2424;
t2294 = t2706 + t2725;
t2730 = 0.2e1 * t2433;
t2741 = t2294 * t2730 - t2753;
t2705 = Ifges(3,4) * t2427;
t2295 = t2705 + t2725;
t2729 = 0.2e1 * t2436;
t2740 = t2295 * t2729 - t2754;
t2735 = -2 * pkin(1);
t2733 = -0.2e1 * t2584;
t2444 = pkin(8) + pkin(7);
t2727 = mrSges(3,3) * pkin(7);
t2726 = pkin(1) * mrSges(3,1);
t2724 = (-Ifges(2,1) - Ifges(3,2));
t2409 = cos(pkin(4));
t2723 = pkin(1) * t2409;
t2722 = pkin(2) * t2409;
t2721 = pkin(2) * t2414;
t2720 = pkin(2) * t2421;
t2719 = pkin(2) * t2424;
t2718 = pkin(2) * t2427;
t2717 = pkin(3) * t2392;
t2716 = pkin(3) * t2402;
t2715 = pkin(3) * t2404;
t2714 = pkin(3) * t2406;
t2373 = t2414 * pkin(3);
t2375 = t2418 * pkin(2);
t2377 = t2421 * pkin(3);
t2378 = t2424 * pkin(3);
t2379 = t2427 * pkin(3);
t2381 = t2431 * pkin(2);
t2383 = t2434 * pkin(2);
t2385 = t2437 * pkin(2);
t2391 = t2409 ^ 2;
t2713 = (t2391 - 0.1e1) * pkin(6);
t2704 = -0.2e1 * pkin(2) * pkin(3);
t2700 = 0.2e1 * t2440;
t2395 = pkin(2) - t2444;
t2394 = pkin(2) + t2444;
t2323 = t2373 + pkin(6);
t2607 = t2409 * t2415;
t2408 = sin(pkin(4));
t2635 = t2325 * t2408;
t2639 = (t2374 + t2394) * (t2374 + t2395);
t2185 = -t2323 * t2635 + t2607 * t2639;
t2416 = sin(qJ(1,4));
t2419 = cos(qJ(1,4));
t2330 = t2444 * t2415;
t2643 = (pkin(1) + 0.2e1 * t2330) * t2325;
t2173 = -t2185 * t2416 + t2419 * t2643;
t2174 = t2185 * t2419 + t2416 * t2643;
t2620 = t2408 * t2415;
t2221 = -t2323 * t2620 + t2325 * t2409;
t2562 = pkin(1) * t2415 + pkin(7);
t2304 = pkin(8) + t2562;
t2189 = -t2221 * t2416 + t2304 * t2419;
t2190 = t2221 * t2419 + t2304 * t2416;
t2596 = t2409 * t2444;
t2540 = t2325 * t2596;
t2201 = 0.2e1 * t2416 * t2540 + t2419 * t2639;
t2410 = legFrame(4,3);
t2361 = sin(t2410);
t2365 = cos(t2410);
t2393 = t2418 ^ 2;
t2511 = t2419 * t2540;
t2531 = t2416 * t2639;
t2113 = (t2201 * t2365 + 0.2e1 * (t2511 - t2531 / 0.2e1) * t2361) * t2393 + (t2173 * t2365 - t2174 * t2361) * t2418 + (t2189 * t2365 - t2190 * t2361) * t2444;
t2266 = -pkin(6) * t2408 * t2444 - pkin(1) * t2722;
t2303 = pkin(1) * t2596;
t2324 = t2373 - pkin(6);
t2467 = pkin(2) ^ 2;
t2581 = pkin(6) * t2717;
t2582 = pkin(3) * t2723;
t2595 = t2417 * t2418;
t2149 = 0.1e1 / (t2303 * t2595 + (t2266 * t2417 - t2392 * t2582) * t2415 + ((pkin(2) * t2324 * t2417 - t2581) * t2418 + (pkin(1) * t2325 + pkin(2) * t2330 + t2418 * t2467) * t2414) * t2408);
t2699 = t2113 * t2149;
t2114 = ((-0.2e1 * t2511 + t2531) * t2365 + t2201 * t2361) * t2393 + (t2173 * t2361 + t2174 * t2365) * t2418 + t2444 * (t2189 * t2361 + t2190 * t2365);
t2698 = t2114 * t2149;
t2332 = t2377 + pkin(6);
t2604 = t2409 * t2422;
t2634 = t2338 * t2408;
t2638 = (t2380 + t2394) * (t2380 + t2395);
t2186 = -t2332 * t2634 + t2604 * t2638;
t2423 = sin(qJ(1,3));
t2432 = cos(qJ(1,3));
t2345 = t2444 * t2422;
t2642 = (pkin(1) + 0.2e1 * t2345) * t2338;
t2175 = -t2186 * t2423 + t2432 * t2642;
t2178 = t2186 * t2432 + t2423 * t2642;
t2617 = t2408 * t2422;
t2222 = -t2332 * t2617 + t2338 * t2409;
t2561 = pkin(1) * t2422 + pkin(7);
t2307 = pkin(8) + t2561;
t2191 = -t2222 * t2423 + t2307 * t2432;
t2194 = t2222 * t2432 + t2307 * t2423;
t2539 = t2338 * t2596;
t2202 = 0.2e1 * t2423 * t2539 + t2432 * t2638;
t2411 = legFrame(3,3);
t2362 = sin(t2411);
t2366 = cos(t2411);
t2403 = t2431 ^ 2;
t2510 = t2432 * t2539;
t2530 = t2423 * t2638;
t2115 = (t2202 * t2366 + 0.2e1 * (t2510 - t2530 / 0.2e1) * t2362) * t2403 + (t2175 * t2366 - t2178 * t2362) * t2431 + (t2191 * t2366 - t2194 * t2362) * t2444;
t2333 = t2377 - pkin(6);
t2580 = pkin(6) * t2716;
t2590 = t2430 * t2431;
t2150 = 0.1e1 / (t2303 * t2590 + (t2266 * t2430 - t2402 * t2582) * t2422 + ((pkin(2) * t2333 * t2430 - t2580) * t2431 + (pkin(1) * t2338 + pkin(2) * t2345 + t2431 * t2467) * t2421) * t2408);
t2697 = t2115 * t2150;
t2334 = t2378 + pkin(6);
t2602 = t2409 * t2425;
t2633 = t2340 * t2408;
t2637 = (t2382 + t2394) * (t2382 + t2395);
t2187 = -t2334 * t2633 + t2602 * t2637;
t2426 = sin(qJ(1,2));
t2435 = cos(qJ(1,2));
t2346 = t2444 * t2425;
t2641 = (pkin(1) + 0.2e1 * t2346) * t2340;
t2176 = -t2187 * t2426 + t2435 * t2641;
t2179 = t2187 * t2435 + t2426 * t2641;
t2615 = t2408 * t2425;
t2223 = -t2334 * t2615 + t2340 * t2409;
t2560 = pkin(1) * t2425 + pkin(7);
t2308 = pkin(8) + t2560;
t2192 = -t2223 * t2426 + t2308 * t2435;
t2195 = t2223 * t2435 + t2308 * t2426;
t2538 = t2340 * t2596;
t2203 = 0.2e1 * t2426 * t2538 + t2435 * t2637;
t2412 = legFrame(2,3);
t2363 = sin(t2412);
t2367 = cos(t2412);
t2405 = t2434 ^ 2;
t2509 = t2435 * t2538;
t2528 = t2426 * t2637;
t2116 = (t2203 * t2367 + 0.2e1 * (t2509 - t2528 / 0.2e1) * t2363) * t2405 + (t2176 * t2367 - t2179 * t2363) * t2434 + (t2192 * t2367 - t2195 * t2363) * t2444;
t2335 = t2378 - pkin(6);
t2579 = pkin(6) * t2715;
t2589 = t2433 * t2434;
t2151 = 0.1e1 / (t2303 * t2589 + (t2266 * t2433 - t2404 * t2582) * t2425 + ((pkin(2) * t2335 * t2433 - t2579) * t2434 + (pkin(1) * t2340 + pkin(2) * t2346 + t2434 * t2467) * t2424) * t2408);
t2696 = t2116 * t2151;
t2336 = t2379 + pkin(6);
t2600 = t2409 * t2428;
t2632 = t2342 * t2408;
t2636 = (t2384 + t2394) * (t2384 + t2395);
t2188 = -t2336 * t2632 + t2600 * t2636;
t2429 = sin(qJ(1,1));
t2438 = cos(qJ(1,1));
t2347 = t2444 * t2428;
t2640 = (pkin(1) + 0.2e1 * t2347) * t2342;
t2177 = -t2188 * t2429 + t2438 * t2640;
t2180 = t2188 * t2438 + t2429 * t2640;
t2613 = t2408 * t2428;
t2224 = -t2336 * t2613 + t2342 * t2409;
t2559 = pkin(1) * t2428 + pkin(7);
t2309 = pkin(8) + t2559;
t2193 = -t2224 * t2429 + t2309 * t2438;
t2196 = t2224 * t2438 + t2309 * t2429;
t2537 = t2342 * t2596;
t2204 = 0.2e1 * t2429 * t2537 + t2438 * t2636;
t2413 = legFrame(1,3);
t2364 = sin(t2413);
t2368 = cos(t2413);
t2407 = t2437 ^ 2;
t2508 = t2438 * t2537;
t2526 = t2429 * t2636;
t2117 = (t2204 * t2368 + 0.2e1 * (t2508 - t2526 / 0.2e1) * t2364) * t2407 + (t2177 * t2368 - t2180 * t2364) * t2437 + (t2193 * t2368 - t2196 * t2364) * t2444;
t2337 = t2379 - pkin(6);
t2578 = pkin(6) * t2714;
t2588 = t2436 * t2437;
t2152 = 0.1e1 / (t2303 * t2588 + (t2266 * t2436 - t2406 * t2582) * t2428 + ((pkin(2) * t2337 * t2436 - t2578) * t2437 + (pkin(1) * t2342 + pkin(2) * t2347 + t2437 * t2467) * t2427) * t2408);
t2695 = t2117 * t2152;
t2118 = ((-0.2e1 * t2510 + t2530) * t2366 + t2202 * t2362) * t2403 + (t2175 * t2362 + t2178 * t2366) * t2431 + t2444 * (t2191 * t2362 + t2194 * t2366);
t2694 = t2118 * t2150;
t2119 = ((-0.2e1 * t2509 + t2528) * t2367 + t2203 * t2363) * t2405 + (t2176 * t2363 + t2179 * t2367) * t2434 + t2444 * (t2192 * t2363 + t2195 * t2367);
t2693 = t2119 * t2151;
t2120 = ((-0.2e1 * t2508 + t2526) * t2368 + t2204 * t2364) * t2407 + (t2177 * t2364 + t2180 * t2368) * t2437 + t2444 * (t2193 * t2364 + t2196 * t2368);
t2692 = t2120 * t2152;
t2233 = t2361 * t2419 + t2365 * t2416;
t2234 = -t2361 * t2416 + t2365 * t2419;
t2331 = t2444 * t2418;
t2253 = pkin(2) * t2393 + t2415 * t2331 - pkin(2);
t2275 = -pkin(2) * t2415 + t2331;
t2356 = t2393 - 0.2e1;
t2558 = pkin(6) * t2414 + pkin(3);
t2622 = t2408 * t2409;
t2472 = ((t2356 * t2373 - pkin(6)) * t2417 + t2414 * t2253) * t2622 - (t2275 * t2417 + (t2558 - 0.2e1 * t2717) * t2415) * t2391 - (-t2558 + t2717) * t2415;
t2274 = t2375 + t2330;
t2270 = pkin(1) + t2274;
t2326 = t2375 + pkin(1);
t2606 = t2409 * t2417;
t2621 = t2408 * t2414;
t2481 = -(t2326 * t2415 + t2444 + (t2415 * t2374 - t2331) * t2418) * t2621 + (pkin(3) * t2595 + t2270) * t2606;
t2121 = -t2233 * t2472 + t2234 * t2481;
t2488 = -pkin(6) * t2274 + t2326 * t2373;
t2566 = t2270 * t2721;
t2570 = pkin(1) * t2606;
t2166 = 0.1e1 / ((t2331 - t2758) * t2570 + t2408 * (t2417 * t2488 - t2418 * t2581 + t2566));
t2691 = t2121 * t2166;
t2122 = t2233 * t2481 + t2234 * t2472;
t2690 = t2122 * t2166;
t2236 = t2362 * t2432 + t2366 * t2423;
t2237 = -t2362 * t2423 + t2366 * t2432;
t2348 = t2444 * t2431;
t2254 = pkin(2) * t2403 + t2422 * t2348 - pkin(2);
t2279 = -pkin(2) * t2422 + t2348;
t2357 = t2403 - 0.2e1;
t2557 = t2421 * pkin(6) + pkin(3);
t2471 = ((t2357 * t2377 - pkin(6)) * t2430 + t2421 * t2254) * t2622 - (t2279 * t2430 + (t2557 - 0.2e1 * t2716) * t2422) * t2391 - (-t2557 + t2716) * t2422;
t2276 = t2381 + t2345;
t2271 = pkin(1) + t2276;
t2339 = t2381 + pkin(1);
t2599 = t2409 * t2430;
t2618 = t2408 * t2421;
t2480 = -(t2339 * t2422 + t2444 + (t2422 * t2380 - t2348) * t2431) * t2618 + (pkin(3) * t2590 + t2271) * t2599;
t2123 = -t2236 * t2471 + t2237 * t2480;
t2487 = -pkin(6) * t2276 + t2339 * t2377;
t2565 = t2271 * t2720;
t2569 = pkin(1) * t2599;
t2170 = 0.1e1 / ((t2348 - t2757) * t2569 + t2408 * (t2430 * t2487 - t2431 * t2580 + t2565));
t2689 = t2123 * t2170;
t2124 = t2236 * t2480 + t2237 * t2471;
t2688 = t2124 * t2170;
t2238 = t2363 * t2435 + t2367 * t2426;
t2239 = -t2363 * t2426 + t2367 * t2435;
t2349 = t2444 * t2434;
t2255 = pkin(2) * t2405 + t2425 * t2349 - pkin(2);
t2280 = -pkin(2) * t2425 + t2349;
t2358 = t2405 - 0.2e1;
t2556 = t2424 * pkin(6) + pkin(3);
t2470 = ((t2358 * t2378 - pkin(6)) * t2433 + t2424 * t2255) * t2622 - (t2280 * t2433 + (t2556 - 0.2e1 * t2715) * t2425) * t2391 - (-t2556 + t2715) * t2425;
t2277 = t2383 + t2346;
t2272 = pkin(1) + t2277;
t2341 = t2383 + pkin(1);
t2598 = t2409 * t2433;
t2616 = t2408 * t2424;
t2479 = -(t2341 * t2425 + t2444 + (t2425 * t2382 - t2349) * t2434) * t2616 + (pkin(3) * t2589 + t2272) * t2598;
t2125 = -t2238 * t2470 + t2239 * t2479;
t2486 = -pkin(6) * t2277 + t2341 * t2378;
t2564 = t2272 * t2719;
t2568 = pkin(1) * t2598;
t2171 = 0.1e1 / ((t2349 - t2756) * t2568 + t2408 * (t2433 * t2486 - t2434 * t2579 + t2564));
t2687 = t2125 * t2171;
t2126 = t2238 * t2479 + t2239 * t2470;
t2686 = t2126 * t2171;
t2240 = t2364 * t2438 + t2368 * t2429;
t2241 = -t2364 * t2429 + t2368 * t2438;
t2350 = t2444 * t2437;
t2256 = pkin(2) * t2407 + t2428 * t2350 - pkin(2);
t2281 = -pkin(2) * t2428 + t2350;
t2359 = t2407 - 0.2e1;
t2555 = t2427 * pkin(6) + pkin(3);
t2469 = ((t2359 * t2379 - pkin(6)) * t2436 + t2427 * t2256) * t2622 - (t2281 * t2436 + (t2555 - 0.2e1 * t2714) * t2428) * t2391 - (-t2555 + t2714) * t2428;
t2278 = t2385 + t2347;
t2273 = pkin(1) + t2278;
t2343 = t2385 + pkin(1);
t2597 = t2409 * t2436;
t2614 = t2408 * t2427;
t2478 = -(t2343 * t2428 + t2444 + (t2428 * t2384 - t2350) * t2437) * t2614 + (pkin(3) * t2588 + t2273) * t2597;
t2127 = -t2240 * t2469 + t2241 * t2478;
t2485 = -pkin(6) * t2278 + t2343 * t2379;
t2563 = t2273 * t2718;
t2567 = pkin(1) * t2597;
t2172 = 0.1e1 / ((t2350 - t2755) * t2567 + t2408 * (t2436 * t2485 - t2437 * t2578 + t2563));
t2685 = t2127 * t2172;
t2128 = t2240 * t2478 + t2241 * t2469;
t2684 = t2128 * t2172;
t2545 = t2234 * t2621;
t2129 = -(t2233 * t2418 + t2234 * t2607) * t2717 + (pkin(3) * t2545 + (-pkin(2) * t2233 + t2234 * t2596) * t2418 - t2415 * (t2233 * t2444 + t2234 * t2722)) * t2417 + pkin(2) * t2545;
t2245 = t2275 * t2723;
t2499 = pkin(1) * t2373 - pkin(6) * t2330;
t2619 = t2408 * t2418;
t2503 = -(pkin(1) * t2607 + pkin(6) * t2619) * t2717 + t2408 * t2566;
t2158 = 0.1e1 / (((t2324 * t2375 + t2499) * t2408 + t2245) * t2417 + t2503);
t2683 = t2129 * t2158;
t2546 = t2233 * t2621;
t2130 = -(-t2233 * t2607 + t2234 * t2418) * t2717 + (-pkin(3) * t2546 + (-pkin(2) * t2234 - t2233 * t2596) * t2418 + t2415 * (t2233 * t2722 - t2234 * t2444)) * t2417 - pkin(2) * t2546;
t2682 = t2130 * t2158;
t2543 = t2237 * t2618;
t2131 = -(t2236 * t2431 + t2237 * t2604) * t2716 + (pkin(3) * t2543 + (-pkin(2) * t2236 + t2237 * t2596) * t2431 - t2422 * (t2236 * t2444 + t2237 * t2722)) * t2430 + pkin(2) * t2543;
t2247 = t2279 * t2723;
t2498 = pkin(1) * t2377 - pkin(6) * t2345;
t2612 = t2408 * t2431;
t2502 = -(pkin(1) * t2604 + pkin(6) * t2612) * t2716 + t2408 * t2565;
t2162 = 0.1e1 / (((t2333 * t2381 + t2498) * t2408 + t2247) * t2430 + t2502);
t2681 = t2131 * t2162;
t2544 = t2236 * t2618;
t2132 = -(-t2236 * t2604 + t2237 * t2431) * t2716 + (-pkin(3) * t2544 + (-pkin(2) * t2237 - t2236 * t2596) * t2431 + t2422 * (t2236 * t2722 - t2237 * t2444)) * t2430 - pkin(2) * t2544;
t2680 = t2132 * t2162;
t2529 = t2239 * t2616;
t2133 = -(t2238 * t2434 + t2239 * t2602) * t2715 + (pkin(3) * t2529 + (-pkin(2) * t2238 + t2239 * t2596) * t2434 - t2425 * (t2238 * t2444 + t2239 * t2722)) * t2433 + pkin(2) * t2529;
t2248 = t2280 * t2723;
t2497 = pkin(1) * t2378 - pkin(6) * t2346;
t2611 = t2408 * t2434;
t2501 = -(pkin(1) * t2602 + pkin(6) * t2611) * t2715 + t2408 * t2564;
t2163 = 0.1e1 / (((t2335 * t2383 + t2497) * t2408 + t2248) * t2433 + t2501);
t2679 = t2133 * t2163;
t2542 = t2238 * t2616;
t2134 = -(-t2238 * t2602 + t2239 * t2434) * t2715 + (-pkin(3) * t2542 + (-pkin(2) * t2239 - t2238 * t2596) * t2434 + t2425 * (t2238 * t2722 - t2239 * t2444)) * t2433 - pkin(2) * t2542;
t2678 = t2134 * t2163;
t2527 = t2241 * t2614;
t2135 = -(t2240 * t2437 + t2241 * t2600) * t2714 + (pkin(3) * t2527 + (-pkin(2) * t2240 + t2241 * t2596) * t2437 - t2428 * (t2240 * t2444 + t2241 * t2722)) * t2436 + pkin(2) * t2527;
t2249 = t2281 * t2723;
t2496 = pkin(1) * t2379 - pkin(6) * t2347;
t2610 = t2408 * t2437;
t2500 = -(pkin(1) * t2600 + pkin(6) * t2610) * t2714 + t2408 * t2563;
t2164 = 0.1e1 / (((t2337 * t2385 + t2496) * t2408 + t2249) * t2436 + t2500);
t2677 = t2135 * t2164;
t2541 = t2240 * t2614;
t2136 = -(-t2240 * t2600 + t2241 * t2437) * t2714 + (-pkin(3) * t2541 + (-pkin(2) * t2241 - t2240 * t2596) * t2437 + t2428 * (t2240 * t2722 - t2241 * t2444)) * t2436 - pkin(2) * t2541;
t2676 = t2136 * t2164;
t2447 = m(3) * t2467;
t2397 = 0.2e1 * t2727;
t2446 = m(3) * pkin(7) ^ 2;
t2585 = t2397 + t2446;
t2495 = t2447 + t2585 + t2746;
t2197 = t2495 + t2743;
t2507 = -t2703 + t2712;
t2137 = t2750 * t2408 + t2409 * ((t2351 * t2415 + (mrSges(3,1) * t2417 - t2507) * t2418) * pkin(1) + t2197);
t2675 = t2137 * t2158;
t2674 = t2137 * t2166;
t2388 = pkin(1) * t2444;
t2465 = pkin(3) ^ 2;
t2536 = t2408 * t2596;
t2573 = -0.2e1 * (t2409 + 0.1e1) * (t2409 - 0.1e1);
t2623 = t2394 * t2395;
t2673 = (t2388 * t2418 + (-t2323 * t2409 * t2619 - t2304 + (t2393 * t2573 + t2391) * t2444) * t2325 + ((t2391 * t2639 - t2392 * t2465 + t2417 * t2704 - t2623) * t2418 - t2323 * t2536) * t2415) / ((t2417 * t2303 - (pkin(6) * t2417 - t2721) * t2635) * t2418 - t2570 * t2758 + t2408 * (t2499 * t2417 + (t2330 + pkin(1)) * t2721));
t2198 = t2495 + t2742;
t2506 = -t2703 + t2711;
t2139 = t2749 * t2408 + t2409 * ((t2351 * t2422 + (mrSges(3,1) * t2430 - t2506) * t2431) * pkin(1) + t2198);
t2672 = t2139 * t2162;
t2671 = t2139 * t2170;
t2199 = t2495 + t2741;
t2505 = -t2703 + t2710;
t2140 = t2748 * t2408 + t2409 * ((t2351 * t2425 + (mrSges(3,1) * t2433 - t2505) * t2434) * pkin(1) + t2199);
t2670 = t2140 * t2163;
t2669 = t2140 * t2171;
t2200 = t2495 + t2740;
t2504 = -t2703 + t2709;
t2141 = t2747 * t2408 + t2409 * ((t2351 * t2428 + (mrSges(3,1) * t2436 - t2504) * t2437) * pkin(1) + t2200);
t2668 = t2141 * t2164;
t2667 = t2141 * t2172;
t2666 = (t2388 * t2431 + (-t2332 * t2409 * t2612 - t2307 + (t2403 * t2573 + t2391) * t2444) * t2338 + ((t2391 * t2638 - t2402 * t2465 + t2430 * t2704 - t2623) * t2431 - t2332 * t2536) * t2422) / ((t2430 * t2303 - (pkin(6) * t2430 - t2720) * t2634) * t2431 - t2569 * t2757 + t2408 * (t2498 * t2430 + (t2345 + pkin(1)) * t2720));
t2665 = (t2388 * t2434 + (-t2334 * t2409 * t2611 - t2308 + (t2405 * t2573 + t2391) * t2444) * t2340 + ((t2391 * t2637 - t2404 * t2465 + t2433 * t2704 - t2623) * t2434 - t2334 * t2536) * t2425) / ((t2433 * t2303 - (pkin(6) * t2433 - t2719) * t2633) * t2434 - t2568 * t2756 + t2408 * (t2497 * t2433 + (t2346 + pkin(1)) * t2719));
t2664 = (t2388 * t2437 + (-t2336 * t2409 * t2610 - t2309 + (t2407 * t2573 + t2391) * t2444) * t2342 + ((t2391 * t2636 - t2406 * t2465 + t2436 * t2704 - t2623) * t2437 - t2336 * t2536) * t2428) / ((t2436 * t2303 - (pkin(6) * t2436 - t2718) * t2632) * t2437 - t2567 * t2755 + t2408 * (t2496 * t2436 + (t2347 + pkin(1)) * t2718));
t2535 = t2408 * t2607;
t2663 = ((-t2275 * t2622 + t2713) * t2417 + (-pkin(6) * t2535 - t2253 * t2391 + t2418 * t2270) * t2414 + (-(t2356 * t2391 - t2393 + 0.1e1) * t2414 * t2417 + (0.2e1 * t2392 - 0.1e1) * t2535) * pkin(3)) / ((t2408 * t2488 + t2245) * t2417 + t2503);
t2534 = t2408 * t2604;
t2662 = ((-t2279 * t2622 + t2713) * t2430 + (-pkin(6) * t2534 - t2254 * t2391 + t2271 * t2431) * t2421 + (-(t2357 * t2391 - t2403 + 0.1e1) * t2421 * t2430 + (0.2e1 * t2402 - 0.1e1) * t2534) * pkin(3)) / ((t2408 * t2487 + t2247) * t2430 + t2502);
t2533 = t2408 * t2602;
t2661 = ((-t2280 * t2622 + t2713) * t2433 + (-pkin(6) * t2533 - t2255 * t2391 + t2434 * t2272) * t2424 + (-(t2358 * t2391 - t2405 + 0.1e1) * t2424 * t2433 + (0.2e1 * t2404 - 0.1e1) * t2533) * pkin(3)) / ((t2408 * t2486 + t2248) * t2433 + t2501);
t2532 = t2408 * t2600;
t2660 = ((-t2281 * t2622 + t2713) * t2436 + (-pkin(6) * t2532 - t2256 * t2391 + t2437 * t2273) * t2427 + (-(t2359 * t2391 - t2407 + 0.1e1) * t2427 * t2436 + (0.2e1 * t2406 - 0.1e1) * t2532) * pkin(3)) / ((t2408 * t2485 + t2249) * t2436 + t2500);
t2320 = -t2439 - t2725;
t2321 = -t2440 + t2442;
t2443 = pkin(1) * mrSges(3,2);
t2627 = t2370 * t2415;
t2154 = ((t2320 * t2418 - t2627 - t2726) * t2417 + (t2321 * t2418 + t2369 * t2415 + t2443) * t2414 - Ifges(3,3) * t2418) * t2408 - ((mrSges(3,2) * t2562 - Ifges(3,6)) * t2417 + t2414 * (mrSges(3,1) * t2562 - Ifges(3,5))) * t2409;
t2659 = t2154 * t2158;
t2626 = t2370 * t2422;
t2155 = ((t2320 * t2431 - t2626 - t2726) * t2430 + (t2321 * t2431 + t2369 * t2422 + t2443) * t2421 - Ifges(3,3) * t2431) * t2408 - ((mrSges(3,2) * t2561 - Ifges(3,6)) * t2430 + t2421 * (mrSges(3,1) * t2561 - Ifges(3,5))) * t2409;
t2658 = t2155 * t2162;
t2625 = t2370 * t2425;
t2156 = ((t2320 * t2434 - t2625 - t2726) * t2433 + (t2321 * t2434 + t2369 * t2425 + t2443) * t2424 - Ifges(3,3) * t2434) * t2408 - ((mrSges(3,2) * t2560 - Ifges(3,6)) * t2433 + t2424 * (mrSges(3,1) * t2560 - Ifges(3,5))) * t2409;
t2657 = t2156 * t2163;
t2624 = t2370 * t2428;
t2157 = ((t2320 * t2437 - t2624 - t2726) * t2436 + (t2321 * t2437 + t2369 * t2428 + t2443) * t2427 - Ifges(3,3) * t2437) * t2408 - ((mrSges(3,2) * t2559 - Ifges(3,6)) * t2436 + t2427 * (mrSges(3,1) * t2559 - Ifges(3,5))) * t2409;
t2656 = t2157 * t2164;
t2608 = t2409 * t2414;
t2655 = t2158 * (-t2620 * t2717 + (-pkin(3) * t2608 + t2275 * t2408) * t2417 - pkin(2) * t2608);
t2605 = t2409 * t2421;
t2654 = t2162 * (-t2617 * t2716 + (-pkin(3) * t2605 + t2279 * t2408) * t2430 - pkin(2) * t2605);
t2603 = t2409 * t2424;
t2653 = t2163 * (-t2615 * t2715 + (-pkin(3) * t2603 + t2280 * t2408) * t2433 - pkin(2) * t2603);
t2601 = t2409 * t2427;
t2652 = t2164 * (-t2613 * t2714 + (-pkin(3) * t2601 + t2281 * t2408) * t2436 - pkin(2) * t2601);
t2651 = t2166 * t2197;
t2650 = t2166 * t2235;
t2649 = t2170 * t2198;
t2648 = t2170 * t2242;
t2647 = t2171 * t2199;
t2646 = t2171 * t2243;
t2645 = t2172 * t2200;
t2644 = t2172 * t2244;
t2631 = t2369 * t2414;
t2630 = t2369 * t2421;
t2629 = t2369 * t2424;
t2628 = t2369 * t2427;
t2466 = 0.1e1 / pkin(3);
t2609 = t2408 * t2466;
t2586 = 0.2e1 * t2745;
t2583 = 0.2e1 * pkin(1) * t2351;
t2572 = 0.2e1 * t2622;
t2571 = t2447 + t2724;
t2554 = t2466 * t2673;
t2553 = t2466 * t2666;
t2552 = t2466 * t2665;
t2551 = t2466 * t2664;
t2550 = t2149 * t2609;
t2549 = t2150 * t2609;
t2548 = t2151 * t2609;
t2547 = t2152 * t2609;
t2451 = xP(4);
t2389 = sin(t2451);
t2390 = cos(t2451);
t2452 = mrSges(4,2);
t2453 = mrSges(4,1);
t2524 = -t2389 * t2452 + t2390 * t2453;
t2523 = Ifges(3,3) * t2550;
t2522 = Ifges(3,3) * t2549;
t2521 = Ifges(3,3) * t2548;
t2520 = Ifges(3,3) * t2547;
t2519 = t2154 * t2550;
t2518 = t2235 * t2550;
t2517 = t2155 * t2549;
t2516 = t2242 * t2549;
t2515 = t2156 * t2548;
t2514 = t2243 * t2548;
t2513 = t2157 * t2547;
t2512 = t2244 * t2547;
t2490 = Ifges(2,2) + Ifges(3,3) - t2446 + t2571;
t2489 = -t2389 * t2453 - t2390 * t2452;
t2484 = t2397 - t2490;
t2483 = t2571 + t2744 + t2746;
t2482 = -0.2e1 * t2727 + t2490;
t2477 = t2759 * (pkin(1) ^ 2) + Ifges(1,3) + t2585 - t2724 - t2744;
t2461 = koppelP(1,1);
t2460 = koppelP(2,1);
t2459 = koppelP(3,1);
t2458 = koppelP(4,1);
t2457 = koppelP(1,2);
t2456 = koppelP(2,2);
t2455 = koppelP(3,2);
t2454 = koppelP(4,2);
t2396 = 0.2e1 * t2726;
t2264 = -t2389 * t2457 + t2390 * t2461;
t2263 = -t2389 * t2456 + t2390 * t2460;
t2262 = -t2389 * t2455 + t2390 * t2459;
t2261 = -t2389 * t2454 + t2390 * t2458;
t2260 = -t2389 * t2461 - t2390 * t2457;
t2259 = -t2389 * t2460 - t2390 * t2456;
t2258 = -t2389 * t2459 - t2390 * t2455;
t2257 = -t2389 * t2458 - t2390 * t2454;
t2112 = t2477 + (t2482 + t2740) * t2407 + t2747 * t2572 + t2427 * t2700 + t2428 * t2583 + ((t2484 + t2754) * t2407 + 0.2e1 * (-t2370 * t2436 + t2628 - t2745) * t2428 * t2437 + t2427 * t2733 + 0.2e1 * t2591 + (-t2295 * t2407 + t2319 + 0.2e1 * t2705) * t2729 + t2483) * t2391 + ((t2396 + 0.2e1 * t2624) * t2436 + (t2586 - 0.2e1 * t2628) * t2428 + t2504 * t2735) * t2437 - t2591 + (t2439 - t2705) * t2729;
t2111 = (t2439 - t2706) * t2730 + t2477 + (t2482 + t2741) * t2405 + ((t2484 + t2753) * t2405 + 0.2e1 * (-t2370 * t2433 + t2629 - t2745) * t2425 * t2434 + t2424 * t2733 + 0.2e1 * t2592 + (-t2294 * t2405 + t2319 + 0.2e1 * t2706) * t2730 + t2483) * t2391 + ((t2396 + 0.2e1 * t2625) * t2433 + (t2586 - 0.2e1 * t2629) * t2425 + t2505 * t2735) * t2434 + t2425 * t2583 - t2592 + t2424 * t2700 + t2748 * t2572;
t2110 = t2477 + t2749 * t2572 + (t2482 + t2742) * t2403 + (t2439 - t2707) * t2731 + t2421 * t2700 + ((t2484 + t2752) * t2403 + 0.2e1 * (-t2370 * t2430 + t2630 - t2745) * t2422 * t2431 + t2421 * t2733 + 0.2e1 * t2593 + (-t2293 * t2403 + t2319 + 0.2e1 * t2707) * t2731 + t2483) * t2391 + ((t2396 + 0.2e1 * t2626) * t2430 + (t2586 - 0.2e1 * t2630) * t2422 + t2506 * t2735) * t2431 + t2422 * t2583 - t2593;
t2109 = t2477 - t2594 + (t2482 + t2743) * t2393 + t2414 * t2700 + t2415 * t2583 + ((t2484 + t2751) * t2393 + 0.2e1 * (-t2370 * t2417 + t2631 - t2745) * t2415 * t2418 + t2414 * t2733 + 0.2e1 * t2594 + (-t2290 * t2393 + t2319 + 0.2e1 * t2708) * t2732 + t2483) * t2391 + ((t2396 + 0.2e1 * t2627) * t2417 + (t2586 - 0.2e1 * t2631) * t2415 + t2507 * t2735) * t2418 + (t2439 - t2708) * t2732 + t2750 * t2572;
t2108 = (t2135 * t2264 + t2136 * t2260) * t2164;
t2107 = (t2133 * t2263 + t2134 * t2259) * t2163;
t2106 = (t2131 * t2262 + t2132 * t2258) * t2162;
t2105 = (t2129 * t2261 + t2130 * t2257) * t2158;
t2104 = (t2127 * t2260 + t2128 * t2264) * t2172;
t2103 = (t2125 * t2259 + t2126 * t2263) * t2171;
t2102 = (t2123 * t2258 + t2124 * t2262) * t2170;
t2101 = Ifges(3,3) * t2551 + t2157 * t2652 + t2244 * t2660;
t2100 = Ifges(3,3) * t2552 + t2156 * t2653 + t2243 * t2661;
t2099 = Ifges(3,3) * t2553 + t2155 * t2654 + t2242 * t2662;
t2098 = (t2121 * t2257 + t2122 * t2261) * t2166;
t2097 = Ifges(3,3) * t2554 + t2154 * t2655 + t2235 * t2663;
t2096 = t2141 * t2652 + t2200 * t2660 + t2244 * t2551;
t2095 = t2140 * t2653 + t2199 * t2661 + t2243 * t2552;
t2094 = t2139 * t2654 + t2198 * t2662 + t2242 * t2553;
t2093 = t2137 * t2655 + t2197 * t2663 + t2235 * t2554;
t2092 = (-t2117 * t2260 - t2120 * t2264) * t2547;
t2091 = (-t2116 * t2259 - t2119 * t2263) * t2548;
t2090 = (-t2115 * t2258 - t2118 * t2262) * t2549;
t2089 = (-t2113 * t2257 - t2114 * t2261) * t2550;
t2088 = -t2120 * t2520 + t2128 * t2644 + t2135 * t2656;
t2087 = -t2119 * t2521 + t2126 * t2646 + t2133 * t2657;
t2086 = -t2118 * t2522 + t2124 * t2648 + t2131 * t2658;
t2085 = -t2117 * t2520 + t2127 * t2644 + t2136 * t2656;
t2084 = -t2116 * t2521 + t2125 * t2646 + t2134 * t2657;
t2083 = -t2115 * t2522 + t2123 * t2648 + t2132 * t2658;
t2082 = -t2114 * t2523 + t2122 * t2650 + t2129 * t2659;
t2081 = -t2113 * t2523 + t2121 * t2650 + t2130 * t2659;
t2080 = t2112 * t2652 + t2141 * t2660 + t2157 * t2551;
t2079 = t2111 * t2653 + t2140 * t2661 + t2156 * t2552;
t2078 = t2110 * t2654 + t2139 * t2662 + t2155 * t2553;
t2077 = t2109 * t2655 + t2137 * t2663 + t2154 * t2554;
t2076 = -t2120 * t2512 + t2128 * t2645 + t2135 * t2668;
t2075 = -t2119 * t2514 + t2126 * t2647 + t2133 * t2670;
t2074 = -t2118 * t2516 + t2124 * t2649 + t2131 * t2672;
t2073 = -t2117 * t2512 + t2127 * t2645 + t2136 * t2668;
t2072 = -t2116 * t2514 + t2125 * t2647 + t2134 * t2670;
t2071 = -t2115 * t2516 + t2123 * t2649 + t2132 * t2672;
t2070 = -t2114 * t2518 + t2122 * t2651 + t2129 * t2675;
t2069 = -t2113 * t2518 + t2121 * t2651 + t2130 * t2675;
t2068 = t2112 * t2677 - t2120 * t2513 + t2128 * t2667;
t2067 = t2111 * t2679 - t2119 * t2515 + t2126 * t2669;
t2066 = t2110 * t2681 - t2118 * t2517 + t2124 * t2671;
t2065 = t2112 * t2676 - t2117 * t2513 + t2127 * t2667;
t2064 = t2111 * t2678 - t2116 * t2515 + t2125 * t2669;
t2063 = t2110 * t2680 - t2115 * t2517 + t2123 * t2671;
t2062 = t2109 * t2683 - t2114 * t2519 + t2122 * t2674;
t2061 = t2109 * t2682 - t2113 * t2519 + t2121 * t2674;
t2060 = Ifges(3,3) * t2092 + t2104 * t2244 + t2108 * t2157;
t2059 = Ifges(3,3) * t2091 + t2103 * t2243 + t2107 * t2156;
t2058 = Ifges(3,3) * t2090 + t2102 * t2242 + t2106 * t2155;
t2057 = Ifges(3,3) * t2089 + t2098 * t2235 + t2105 * t2154;
t2056 = t2092 * t2244 + t2104 * t2200 + t2108 * t2141;
t2055 = t2091 * t2243 + t2103 * t2199 + t2107 * t2140;
t2054 = t2090 * t2242 + t2102 * t2198 + t2106 * t2139;
t2053 = t2089 * t2235 + t2098 * t2197 + t2105 * t2137;
t2052 = t2092 * t2157 + t2104 * t2141 + t2108 * t2112;
t2051 = t2091 * t2156 + t2103 * t2140 + t2107 * t2111;
t2050 = t2090 * t2155 + t2102 * t2139 + t2106 * t2110;
t2049 = t2089 * t2154 + t2098 * t2137 + t2105 * t2109;
t1 = [t2061 * t2682 + t2063 * t2680 + t2064 * t2678 + t2065 * t2676 + t2069 * t2691 + t2071 * t2689 + t2072 * t2687 + t2073 * t2685 + m(4) + (-t2081 * t2699 - t2083 * t2697 - t2084 * t2696 - t2085 * t2695) * t2609, t2061 * t2683 + t2063 * t2681 + t2064 * t2679 + t2065 * t2677 + t2069 * t2690 + t2071 * t2688 + t2072 * t2686 + t2073 * t2684 + (-t2081 * t2698 - t2083 * t2694 - t2084 * t2693 - t2085 * t2692) * t2609, t2061 * t2655 + t2063 * t2654 + t2064 * t2653 + t2065 * t2652 + t2069 * t2663 + t2071 * t2662 + t2072 * t2661 + t2073 * t2660 + (t2081 * t2673 + t2083 * t2666 + t2084 * t2665 + t2085 * t2664) * t2466, t2061 * t2105 + t2063 * t2106 + t2064 * t2107 + t2065 * t2108 + t2069 * t2098 + t2071 * t2102 + t2072 * t2103 + t2073 * t2104 + t2081 * t2089 + t2083 * t2090 + t2084 * t2091 + t2085 * t2092 + t2489; t2062 * t2682 + t2066 * t2680 + t2067 * t2678 + t2068 * t2676 + t2070 * t2691 + t2074 * t2689 + t2075 * t2687 + t2076 * t2685 + (-t2082 * t2699 - t2086 * t2697 - t2087 * t2696 - t2088 * t2695) * t2609, t2062 * t2683 + t2066 * t2681 + t2067 * t2679 + t2068 * t2677 + t2070 * t2690 + t2074 * t2688 + t2075 * t2686 + t2076 * t2684 + m(4) + (-t2082 * t2698 - t2086 * t2694 - t2087 * t2693 - t2088 * t2692) * t2609, t2062 * t2655 + t2066 * t2654 + t2067 * t2653 + t2068 * t2652 + t2070 * t2663 + t2074 * t2662 + t2075 * t2661 + t2076 * t2660 + (t2082 * t2673 + t2086 * t2666 + t2087 * t2665 + t2088 * t2664) * t2466, t2062 * t2105 + t2066 * t2106 + t2067 * t2107 + t2068 * t2108 + t2070 * t2098 + t2074 * t2102 + t2075 * t2103 + t2076 * t2104 + t2082 * t2089 + t2086 * t2090 + t2087 * t2091 + t2088 * t2092 + t2524; t2077 * t2682 + t2078 * t2680 + t2079 * t2678 + t2080 * t2676 + t2093 * t2691 + t2094 * t2689 + t2095 * t2687 + t2096 * t2685 + (-t2097 * t2699 - t2099 * t2697 - t2100 * t2696 - t2101 * t2695) * t2609, t2077 * t2683 + t2078 * t2681 + t2079 * t2679 + t2080 * t2677 + t2093 * t2690 + t2094 * t2688 + t2095 * t2686 + t2096 * t2684 + (-t2097 * t2698 - t2099 * t2694 - t2100 * t2693 - t2101 * t2692) * t2609, t2077 * t2655 + t2078 * t2654 + t2079 * t2653 + t2080 * t2652 + t2093 * t2663 + t2094 * t2662 + t2095 * t2661 + t2096 * t2660 + m(4) + (t2097 * t2673 + t2099 * t2666 + t2100 * t2665 + t2101 * t2664) * t2466, t2077 * t2105 + t2078 * t2106 + t2079 * t2107 + t2080 * t2108 + t2089 * t2097 + t2090 * t2099 + t2091 * t2100 + t2092 * t2101 + t2093 * t2098 + t2094 * t2102 + t2095 * t2103 + t2096 * t2104; t2049 * t2682 + t2050 * t2680 + t2051 * t2678 + t2052 * t2676 + t2053 * t2691 + t2054 * t2689 + t2055 * t2687 + t2056 * t2685 + (-t2057 * t2699 - t2058 * t2697 - t2059 * t2696 - t2060 * t2695) * t2609 + t2489, t2049 * t2683 + t2050 * t2681 + t2051 * t2679 + t2052 * t2677 + t2053 * t2690 + t2054 * t2688 + t2055 * t2686 + t2056 * t2684 + (-t2057 * t2698 - t2058 * t2694 - t2059 * t2693 - t2060 * t2692) * t2609 + t2524, t2049 * t2655 + t2050 * t2654 + t2051 * t2653 + t2052 * t2652 + t2053 * t2663 + t2054 * t2662 + t2055 * t2661 + t2056 * t2660 + (t2057 * t2673 + t2058 * t2666 + t2059 * t2665 + t2060 * t2664) * t2466, t2049 * t2105 + t2050 * t2106 + t2051 * t2107 + t2052 * t2108 + t2053 * t2098 + t2054 * t2102 + t2055 * t2103 + t2056 * t2104 + t2057 * t2089 + t2058 * t2090 + t2059 * t2091 + t2060 * t2092 + Ifges(4,3);];
MX  = t1;
