% Calculate minimal parameter regressor of inverse dynamics forces for
% P4RRRRR10V2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [21x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4RRRRR10V2G1A0_convert_par2_MPV_fixb.m

% Output:
% tauX [4x1]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:14
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX = P4RRRRR10V2G1A0_invdyn_para_pf_mdp(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(8,1),zeros(21,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: pkin has to be [8x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [21 1]), ...
  'P4RRRRR10V2G1A0_invdyn_para_pf_mdp: MDP has to be [21x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 15:40:25
% EndTime: 2020-08-07 16:26:19
% DurationCPUTime: 2867.56s
% Computational Cost: add. (38579995->4178), mult. (74042274->6261), div. (471352->58), fcn. (54486996->36), ass. (0->2285)
t10162 = sin(pkin(4));
t11536 = -0.2e1 * t10162;
t10175 = legFrame(1,3);
t10076 = sin(t10175);
t10080 = cos(t10175);
t10194 = sin(qJ(1,1));
t10201 = cos(qJ(3,1));
t10203 = cos(qJ(1,1));
t10205 = xDP(3);
t10193 = sin(qJ(2,1));
t10202 = cos(qJ(2,1));
t10208 = pkin(8) + pkin(7);
t10192 = sin(qJ(3,1));
t11149 = t10162 * t10192;
t10934 = pkin(3) * t11149;
t10163 = cos(pkin(4));
t11122 = t10163 * t10208;
t11491 = pkin(2) * t10163;
t10204 = xDP(4);
t10207 = xDP(1);
t10210 = xP(4);
t10129 = sin(t10210);
t10130 = cos(t10210);
t10222 = koppelP(1,2);
t10226 = koppelP(1,1);
t9866 = t10129 * t10226 + t10130 * t10222;
t9759 = t10204 * t9866 - t10207;
t10206 = xDP(2);
t9870 = -t10129 * t10222 + t10130 * t10226;
t9760 = t10204 * t9870 + t10206;
t10270 = -t10193 * (t10208 * t9760 + t11491 * t9759) + t10202 * (-pkin(2) * t9760 + t11122 * t9759) + t10934 * t9759;
t11130 = t10163 * t10193;
t10342 = -t10202 * t9759 + t11130 * t9760;
t10423 = t10194 * t9760 - t10203 * t9759;
t9640 = t10194 * t9759 + t10203 * t9760;
t10443 = -t10076 * t10423 + t10080 * t9640;
t11090 = t10193 * t10205;
t11123 = t10163 * t10205;
t10153 = t10201 ^ 2;
t11464 = t10153 * pkin(3);
t11484 = pkin(2) * t10192;
t11131 = t10163 * t10192;
t10040 = t10208 * t10202;
t11483 = pkin(2) * t10193;
t11586 = -t10040 + t11483;
t11650 = -pkin(3) * t11131 - t10162 * t11586;
t9500 = (pkin(2) * t9759 + t11122 * t9760) * t10202 + (t10208 * t9759 - t11491 * t9760) * t10193 + t9760 * t10934;
t9624 = t10202 * t9760 + t11130 * t9759;
t9412 = -((t9624 * t10194 + t10203 * t10342) * t10080 + (-t10194 * t10342 + t9624 * t10203) * t10076 + t10162 * t11090) * t11464 + ((t10194 * t10270 + t9500 * t10203) * t10080 + (-t10194 * t9500 + t10203 * t10270) * t10076 + t11650 * t10205) * t10201 + (t10162 * t10443 - t11123) * t11484;
t10945 = pkin(2) * t11149;
t10956 = pkin(1) * t11130;
t11142 = t10162 * t10202;
t10110 = t10202 * pkin(2);
t11084 = t10208 * t10193;
t9908 = t11084 + t10110;
t9887 = pkin(1) + t9908;
t11328 = t9887 * t10945 - (pkin(6) * t11142 + t10956) * t11464;
t11058 = pkin(1) * t11491;
t11141 = t10162 * t10208;
t9871 = pkin(6) * t11141 + t11058;
t11674 = pkin(1) * t10934 - t9871 * t10193;
t10098 = t10192 * pkin(3);
t10966 = pkin(2) * (t10098 - pkin(6));
t9983 = pkin(1) * t11122;
t9780 = -t10162 * t10966 - t9983;
t9555 = t10201 * (-t10202 * t9780 + t11674) + t11328;
t9546 = 0.1e1 / t9555;
t11432 = t9412 * t9546;
t10700 = 0.2e1 * t11432;
t10174 = legFrame(2,3);
t10075 = sin(t10174);
t10079 = cos(t10174);
t10191 = sin(qJ(1,2));
t10198 = cos(qJ(3,2));
t10200 = cos(qJ(1,2));
t10190 = sin(qJ(2,2));
t10199 = cos(qJ(2,2));
t10189 = sin(qJ(3,2));
t11151 = t10162 * t10189;
t10935 = pkin(3) * t11151;
t10221 = koppelP(2,2);
t10225 = koppelP(2,1);
t9865 = t10129 * t10225 + t10130 * t10221;
t9754 = t10204 * t9865 - t10207;
t9869 = -t10129 * t10221 + t10130 * t10225;
t9756 = t10204 * t9869 + t10206;
t10271 = -t10190 * (t10208 * t9756 + t11491 * t9754) + t10199 * (-pkin(2) * t9756 + t11122 * t9754) + t10935 * t9754;
t11132 = t10163 * t10190;
t10343 = -t10199 * t9754 + t11132 * t9756;
t10426 = t10191 * t9756 - t10200 * t9754;
t9638 = t10191 * t9754 + t10200 * t9756;
t10444 = -t10075 * t10426 + t10079 * t9638;
t11096 = t10190 * t10205;
t10149 = t10198 ^ 2;
t11465 = t10149 * pkin(3);
t11486 = pkin(2) * t10189;
t11133 = t10163 * t10189;
t10039 = t10208 * t10199;
t11485 = pkin(2) * t10190;
t11587 = -t10039 + t11485;
t11649 = -pkin(3) * t11133 - t10162 * t11587;
t9499 = (pkin(2) * t9754 + t11122 * t9756) * t10199 + (t10208 * t9754 - t11491 * t9756) * t10190 + t9756 * t10935;
t9623 = t10199 * t9756 + t11132 * t9754;
t9411 = -((t9623 * t10191 + t10200 * t10343) * t10079 + (-t10191 * t10343 + t9623 * t10200) * t10075 + t10162 * t11096) * t11465 + ((t10191 * t10271 + t9499 * t10200) * t10079 + (-t9499 * t10191 + t10200 * t10271) * t10075 + t11649 * t10205) * t10198 + (t10162 * t10444 - t11123) * t11486;
t10946 = pkin(2) * t11151;
t10957 = pkin(1) * t11132;
t11144 = t10162 * t10199;
t10106 = t10199 * pkin(2);
t11085 = t10208 * t10190;
t9907 = t11085 + t10106;
t9886 = pkin(1) + t9907;
t11329 = t9886 * t10946 - (pkin(6) * t11144 + t10957) * t11465;
t11675 = pkin(1) * t10935 - t9871 * t10190;
t10096 = t10189 * pkin(3);
t10967 = pkin(2) * (t10096 - pkin(6));
t9779 = -t10162 * t10967 - t9983;
t9557 = t10198 * (-t10199 * t9779 + t11675) + t11329;
t9552 = 0.1e1 / t9557;
t11433 = t9411 * t9552;
t10701 = 0.2e1 * t11433;
t10173 = legFrame(3,3);
t10074 = sin(t10173);
t10078 = cos(t10173);
t10188 = sin(qJ(1,3));
t10195 = cos(qJ(3,3));
t10197 = cos(qJ(1,3));
t10187 = sin(qJ(2,3));
t10196 = cos(qJ(2,3));
t10186 = sin(qJ(3,3));
t11153 = t10162 * t10186;
t10936 = pkin(3) * t11153;
t10220 = koppelP(3,2);
t10224 = koppelP(3,1);
t9864 = t10129 * t10224 + t10130 * t10220;
t9753 = t10204 * t9864 - t10207;
t9868 = -t10129 * t10220 + t10130 * t10224;
t9755 = t10204 * t9868 + t10206;
t10272 = -t10187 * (t10208 * t9755 + t11491 * t9753) + t10196 * (-pkin(2) * t9755 + t11122 * t9753) + t10936 * t9753;
t11134 = t10163 * t10187;
t10344 = -t10196 * t9753 + t11134 * t9755;
t10429 = t10188 * t9755 - t10197 * t9753;
t9637 = t10188 * t9753 + t10197 * t9755;
t10445 = -t10074 * t10429 + t10078 * t9637;
t11102 = t10187 * t10205;
t10145 = t10195 ^ 2;
t11466 = t10145 * pkin(3);
t11488 = pkin(2) * t10186;
t11135 = t10163 * t10186;
t10038 = t10208 * t10196;
t11487 = pkin(2) * t10187;
t11588 = -t10038 + t11487;
t11648 = -pkin(3) * t11135 - t10162 * t11588;
t9498 = (pkin(2) * t9753 + t11122 * t9755) * t10196 + (t10208 * t9753 - t11491 * t9755) * t10187 + t9755 * t10936;
t9622 = t10196 * t9755 + t11134 * t9753;
t9410 = -((t9622 * t10188 + t10197 * t10344) * t10078 + (-t10188 * t10344 + t9622 * t10197) * t10074 + t10162 * t11102) * t11466 + ((t10188 * t10272 + t9498 * t10197) * t10078 + (-t9498 * t10188 + t10197 * t10272) * t10074 + t11648 * t10205) * t10195 + (t10162 * t10445 - t11123) * t11488;
t10947 = pkin(2) * t11153;
t10958 = pkin(1) * t11134;
t11146 = t10162 * t10196;
t10102 = t10196 * pkin(2);
t11086 = t10208 * t10187;
t9906 = t11086 + t10102;
t9885 = pkin(1) + t9906;
t11330 = t9885 * t10947 - (pkin(6) * t11146 + t10958) * t11466;
t11676 = pkin(1) * t10936 - t9871 * t10187;
t10094 = t10186 * pkin(3);
t10968 = pkin(2) * (t10094 - pkin(6));
t9778 = -t10162 * t10968 - t9983;
t9556 = t10195 * (-t10196 * t9778 + t11676) + t11330;
t9549 = 0.1e1 / t9556;
t11434 = t9410 * t9549;
t10702 = 0.2e1 * t11434;
t10177 = sin(qJ(2,4));
t10180 = cos(qJ(2,4));
t10215 = -g(3) / 0.2e1;
t10237 = 0.1e1 / pkin(3);
t10176 = sin(qJ(3,4));
t10083 = t10176 * pkin(3);
t10004 = t10083 + pkin(6);
t10137 = t10163 ^ 2;
t10141 = t10180 ^ 2;
t10172 = legFrame(4,3);
t10073 = sin(t10172);
t10077 = cos(t10172);
t10178 = sin(qJ(1,4));
t10181 = cos(qJ(1,4));
t10219 = koppelP(4,2);
t10223 = koppelP(4,1);
t9863 = t10129 * t10223 + t10130 * t10219;
t9757 = t10204 * t9863 - t10207;
t9867 = -t10129 * t10219 + t10130 * t10223;
t9758 = t10204 * t9867 + t10206;
t10432 = t10178 * t9758 - t10181 * t9757;
t9634 = t10178 * t9757 + t10181 * t9758;
t10446 = -t10073 * t10432 + t10077 * t9634;
t10179 = cos(qJ(3,4));
t10086 = t10179 * pkin(3);
t11631 = t10086 + pkin(2);
t10329 = t10446 * t11631;
t11174 = (t10163 + 0.1e1) * (t10163 - 0.1e1);
t10725 = t10208 * t11174;
t10484 = -0.2e1 * t10205 * t10725;
t11505 = t10137 - 0.1e1;
t10642 = t11505 * t10205;
t10703 = t10162 * t11123;
t10142 = pkin(2) + t10208;
t10143 = pkin(2) - t10208;
t11371 = (t10086 + t10142) * (t10086 + t10143);
t10843 = t10177 * t11371;
t10970 = 0.2e1 * t11122;
t11087 = t10208 * t10177;
t11109 = t10177 * t10205;
t11158 = t10162 * t10163;
t11164 = t10137 * t10208;
t10128 = pkin(1) * t10208;
t11169 = t10128 * t10205;
t11202 = t11631 * t10205;
t10089 = pkin(1) * t10177;
t11584 = -t10208 - t10089;
t11665 = t10004 * t10446;
t9513 = t10073 * t9634 + t10077 * t10432;
t10209 = 0.2e1 * t10208;
t11108 = t10177 * t10209;
t9972 = pkin(1) + t11108;
t9296 = ((t10329 * t10970 - t11371 * t9513) * t10162 + t11631 * t10484) * t10141 + (t11169 + (-t10446 * t11158 + t10642) * t10843 + (-t9513 * t9972 * t10162 + (-t10137 * t10446 + t10446 - t10703) * t10004) * t11631) * t10180 - ((t10004 * t11109 + t10329) * t10163 - t9513 * t11584) * t11141 - (t10177 * t11665 - t11202) * t11164 + t11584 * t11202 + t11087 * t11665;
t11137 = t10163 * t10179;
t10959 = pkin(1) * t11137;
t11203 = t11631 * t10177;
t11205 = t11631 * t10162;
t11479 = pkin(6) * t10179;
t11490 = pkin(2) * t10176;
t9933 = -t11479 + t11490;
t10262 = (t10179 * t9983 + t11205 * t9933) * t10180 - t10959 * t11203;
t11204 = t11631 * t10176;
t10965 = pkin(1) * t11204;
t9585 = (t11087 * t9933 + t10965) * t10162 + t10262;
t11439 = t9296 / t9585;
t10809 = t10237 * t11439;
t11157 = t10162 * t10176;
t10937 = pkin(3) * t11157;
t10273 = -t10177 * (t10208 * t9758 + t11491 * t9757) + t10180 * (-pkin(2) * t9758 + t11122 * t9757) + t10937 * t9757;
t11138 = t10163 * t10177;
t10345 = -t10180 * t9757 + t11138 * t9758;
t10139 = t10179 ^ 2;
t11467 = t10139 * pkin(3);
t10011 = t10208 * t10180;
t11489 = pkin(2) * t10177;
t10482 = t10011 - t11489;
t11139 = t10163 * t10176;
t11678 = -pkin(3) * t11139 + t10162 * t10482;
t9497 = (pkin(2) * t9757 + t11122 * t9758) * t10180 + (t10208 * t9757 - t11491 * t9758) * t10177 + t9758 * t10937;
t9621 = t10180 * t9758 + t11138 * t9757;
t9406 = -((t9621 * t10178 + t10181 * t10345) * t10077 + (-t10178 * t10345 + t9621 * t10181) * t10073 + t10162 * t11109) * t11467 + ((t10178 * t10273 + t9497 * t10181) * t10077 + (-t9497 * t10178 + t10181 * t10273) * t10073 + t11678 * t10205) * t10179 + (t10162 * t10446 - t11123) * t11490;
t11154 = t10162 * t10180;
t10923 = pkin(6) * t11154;
t10948 = pkin(2) * t11157;
t10960 = pkin(1) * t11138;
t10088 = t10180 * pkin(2);
t9900 = t11087 + t10088;
t9884 = pkin(1) + t9900;
t11331 = t9884 * t10948 - (t10923 + t10960) * t11467;
t11677 = pkin(1) * t10937 - t9871 * t10177;
t10969 = pkin(2) * (t10083 - pkin(6));
t9777 = -t10162 * t10969 - t9983;
t9538 = t10179 * (-t10180 * t9777 + t11677) + t11331;
t9534 = 0.1e1 / t9538;
t11435 = t9406 * t9534;
t10462 = t10809 * t11435;
t9383 = t9406 ^ 2 / t9538 ^ 2;
t10866 = t10141 * t9383;
t10084 = t10178 * g(1);
t11460 = t10181 * g(2);
t9934 = -t10084 + t11460;
t11461 = t10181 * g(1);
t11462 = t10178 * g(2);
t9935 = t11461 + t11462;
t11327 = t9934 * t10073 + t9935 * t10077;
t10883 = pkin(1) * t9383 + t11327;
t11541 = 0.2e1 * t10137;
t11504 = t11541 - 0.2e1;
t11004 = pkin(7) * t11504;
t11070 = -0.2e1 * t11491;
t10854 = t10162 * t9383;
t11326 = -t9935 * t10073 + t9934 * t10077;
t10161 = t10208 ^ 2;
t10239 = pkin(2) ^ 2;
t10049 = t10161 + t10239;
t10087 = t10141 * pkin(2);
t10218 = -0.3e1 / 0.2e1 * pkin(2);
t11463 = t10176 * pkin(6);
t10003 = pkin(3) + t11463;
t10803 = t10003 * t11435;
t10454 = t11505 * t10803;
t11156 = t10162 * t10177;
t10711 = t10176 * t11156;
t9872 = -pkin(1) * t10083 + pkin(6) * t11087;
t9971 = t11087 + pkin(1);
t10379 = -t10179 * t9872 + t11490 * t9971;
t10729 = t10141 * t11174;
t11112 = t10176 * t10180;
t9737 = (t10011 - t11203) * t10959;
t10815 = t10205 * ((-t10179 * t10011 + t10177 * (pkin(2) * t10179 - t10003 + 0.2e1 * t11467)) * t11158 - t10729 * t11204 + (-t10177 * t10725 + pkin(1)) * t11112 + ((0.2e1 * t10083 + pkin(6)) * t10137 - t10004) * t10179 + t10137 * t11490) / ((-t10180 * t11631 * t9933 - t10379) * t10162 - t9737);
t9786 = t10073 * t10181 + t10077 * t10178;
t9787 = -t10073 * t10178 + t10077 * t10181;
t9659 = t10208 * t9786 + t11491 * t9787;
t11275 = t10177 * t9659;
t9657 = -pkin(2) * t9786 + t11122 * t9787;
t10433 = -t9657 * t10180 + t11275;
t10526 = t10180 * t10711;
t10470 = pkin(3) * t10526;
t10741 = t10003 * t11174;
t10778 = t9786 * t11157;
t11136 = t10163 * t10180;
t10028 = t10137 - 0.1e1 / 0.2e1;
t11182 = t10028 * t10177;
t11707 = t10141 - 0.1e1;
t11576 = t11707 * t11157;
t10217 = pkin(6) / 0.2e1;
t9993 = t10083 + t10217;
t11546 = -0.2e1 * t9993;
t11597 = t10162 * (t10083 * t10141 + t11546);
t10892 = t9758 * ((t11136 * t9786 + 0.2e1 * t11182 * t9787) * t11467 + (-t9786 * t10470 + (pkin(1) * t9786 + t11597 * t9787 + t10433) * t10163) * t10179 + t9657 * t10526 + (-pkin(1) * t10778 - t10741 * t9787) * t10177 + t11576 * t9659) * t9534;
t9658 = -t10208 * t9787 + t11491 * t9786;
t11276 = t10177 * t9658;
t9656 = pkin(2) * t9787 + t11122 * t9786;
t10434 = t9656 * t10180 - t11276;
t10777 = t9787 * t11157;
t9425 = t9757 * ((t11136 * t9787 - 0.2e1 * t11182 * t9786) * t11467 + (-t9787 * t10470 + (pkin(1) * t9787 - t9786 * t11597 + t10434) * t10163) * t10179 - t9656 * t10526 + (-pkin(1) * t10777 + t10741 * t9786) * t10177 - t11576 * t9658) * t9534;
t9318 = -t10815 - t9425 + t10892;
t11509 = t9318 * pkin(3);
t10485 = t10711 * t11509;
t9951 = t10177 * t10011;
t10636 = pkin(2) * t9951;
t10066 = t10141 - 0.2e1;
t11178 = t10066 * t10137;
t10641 = -t10141 + t11178;
t10534 = t10641 + 0.1e1;
t10138 = t10179 * t10139;
t10236 = pkin(3) ^ 2;
t11163 = t10138 * t10236;
t11282 = t10163 * t9318;
t10756 = (t10534 * t11435 - t11282) * t11163;
t10853 = t10162 * t11435;
t10874 = t10137 * t11435;
t11278 = t10177 * t9318;
t10976 = pkin(2) * t11278;
t9253 = pkin(8) * t10809;
t9255 = pkin(7) * t10809;
t9137 = t9255 + t9253;
t10990 = t9137 * t10083;
t10216 = pkin(6) / 0.3e1;
t10992 = (t10083 + t10216) * t11489;
t11021 = pkin(2) * t11435;
t11059 = t10239 - t10236;
t11062 = t10161 + t10236;
t11212 = t10087 + t9951;
t11481 = pkin(3) * t10162;
t11510 = t9318 * pkin(2);
t11542 = -0.2e1 * t10137;
t11553 = -0.2e1 * pkin(2);
t10050 = pkin(3) * t11463;
t11162 = t10142 * t10143;
t9920 = t10141 * t11162;
t11623 = t10050 + t9920;
t11111 = t10176 * t10208;
t9142 = t11111 * t9318 - t11439;
t9304 = t9318 * t10083;
t11277 = t10177 * t9406;
t10844 = t9534 * t11277;
t10586 = t10162 * t10844;
t9370 = t10586 * t11546;
t9379 = t10163 * t11435;
t9742 = t10180 * t10969 - t9872;
t11493 = pkin(1) * t10163;
t9801 = t10482 * t11493;
t9560 = 0.1e1 / ((t10162 * t9742 + t9801) * t10179 + t11331);
t9988 = pkin(1) * t11087;
t10625 = (-t10756 + ((t9370 + 0.2e1 * t11510) * t10163 - (t9304 + t9137) * t11156 + ((t10218 + t11212) * t11542 + 0.2e1 * t10087 + t9972 * t10180 - pkin(2)) * t11435) * t11467 + (-(0.2e1 * t10636 - t11059 + t11623) * t10874 + (-t10990 + t10049 * t9318 + (0.2e1 * t10011 * t9993 - 0.3e1 * t10992) * t10853) * t10163 + (t11021 * t9972 + t11481 * t9142) * t10180 + t10485 * t11553 + (t9988 + t11062 + t11623) * t11435) * t10179 + pkin(2) * (-t10454 + (t9142 * t10180 + (t10482 * t9379 - t10976) * t10176) * t10162)) * t9560 * t11435;
t10813 = t10208 * t11435;
t9374 = t10162 * t10813;
t10414 = t10177 * t9374;
t10840 = t10180 * t11435;
t9373 = t10162 * t10840;
t9182 = t9373 - t10809;
t9210 = t9318 + t9379;
t10007 = t10088 + pkin(1);
t9741 = -pkin(6) * t9900 + t10007 * t10083;
t9558 = 0.1e1 / (t10179 * (t10162 * t9741 + t9801) + t11331);
t9089 = (t10139 * t10414 + (pkin(3) * t9373 + t11111 * t9210 - t11439) * t10179 + pkin(2) * t9182) * t9558 * t11439;
t9642 = t10180 * t9786 + t11138 * t9787;
t9489 = -t9642 * t11467 + (pkin(3) * t10777 - t10433) * t10179 + pkin(2) * t10777;
t11399 = t9489 * t9560;
t10156 = t10204 ^ 2;
t10182 = xDDP(4);
t10184 = xDDP(2);
t9682 = -t10156 * t9863 + t10182 * t9867 + t10184;
t9453 = t9682 * t11399;
t9643 = t10180 * t9787 - t11138 * t9786;
t9490 = -t9643 * t11467 + (-pkin(3) * t10778 - t10434) * t10179 - pkin(2) * t10778;
t11398 = t9490 * t9560;
t10185 = xDDP(1);
t9686 = -t10156 * t9867 - t10182 * t9863 + t10185;
t9454 = t9686 * t11398;
t10183 = xDDP(3);
t10924 = t10177 * t11467;
t9641 = -pkin(2) * t11139 - t10162 * t10924 + t10179 * t11678;
t11383 = t9560 * t9641;
t9505 = t10183 * t11383;
t10286 = t9089 + t9453 + t9454 + t9505 - t10625;
t10587 = t10176 * t10853;
t10807 = t10208 * t11439;
t11520 = pkin(2) * t9210;
t9371 = t10586 * t10083;
t11443 = (t9210 * t11163 - (t9371 - 0.2e1 * t11520) * t11467 + (t10049 * t9210 + (pkin(3) * (t10011 - 0.2e1 * t11489) * t10853 - t10807) * t10176) * t10179 + pkin(2) * t10482 * t10587) * t9558;
t10907 = t9318 * t11443;
t9032 = t10286 - t10907;
t9031 = pkin(1) * t9032;
t11724 = t9031 - t11326;
t10310 = -pkin(6) * t10854 - t11724;
t8993 = t10310 * t10163;
t9029 = pkin(6) * t9032;
t9188 = pkin(2) * t10462;
t10238 = 0.1e1 / pkin(3) ^ 2;
t9258 = t9296 ^ 2 / t9585 ^ 2 * t10238;
t9254 = pkin(7) * t9258;
t11743 = -(t8993 + (pkin(7) * t10462 + t10215) * t11536) * t10180 + (-t10162 * (0.2e1 * t9188 + t9029) + t10883) * t10177 + t10866 * t11004 - t11070 * t9032 - t9254;
t10014 = t10094 + pkin(6);
t10147 = t10196 ^ 2;
t10100 = t10195 * pkin(3);
t11630 = t10100 + pkin(2);
t10328 = t10445 * t11630;
t11370 = (t10100 + t10142) * (t10100 + t10143);
t10835 = t10187 * t11370;
t11194 = t11630 * t10205;
t11664 = t10014 * t10445;
t9514 = t10074 * t9637 + t10078 * t10429;
t11101 = t10187 * t10209;
t9979 = pkin(1) + t11101;
t10113 = pkin(1) * t10187;
t9989 = t10208 + t10113;
t9300 = ((t10328 * t10970 - t11370 * t9514) * t10162 + t11630 * t10484) * t10147 + (t11169 + (-t10445 * t11158 + t10642) * t10835 + (-t9514 * t9979 * t10162 + (-t10137 * t10445 + t10445 - t10703) * t10014) * t11630) * t10196 - ((t10014 * t11102 + t10328) * t10163 + t9514 * t9989) * t11141 - (t10187 * t11664 - t11194) * t11164 - t9989 * t11194 + t11086 * t11664;
t11129 = t10163 * t10195;
t10955 = pkin(1) * t11129;
t11195 = t11630 * t10187;
t11197 = t11630 * t10162;
t11477 = pkin(6) * t10195;
t9936 = -t11477 + t11488;
t10261 = (t10195 * t9983 + t11197 * t9936) * t10196 - t10955 * t11195;
t11196 = t11630 * t10186;
t10964 = pkin(1) * t11196;
t9598 = (t11086 * t9936 + t10964) * t10162 + t10261;
t11438 = t9300 / t9598;
t9290 = t10237 * t11438;
t10461 = t9290 * t11434;
t9402 = t9410 ^ 2 / t9556 ^ 2;
t10863 = t10147 * t9402;
t10095 = t10188 * g(1);
t11453 = t10197 * g(2);
t9938 = -t10095 + t11453;
t11454 = t10197 * g(1);
t11458 = t10188 * g(2);
t9939 = t11454 + t11458;
t11322 = t9938 * t10074 + t9939 * t10078;
t10882 = pkin(1) * t9402 + t11322;
t10852 = t10162 * t9402;
t11321 = -t9939 * t10074 + t9938 * t10078;
t10101 = t10147 * pkin(2);
t11459 = t10186 * pkin(6);
t10013 = pkin(3) + t11459;
t10802 = t10013 * t11434;
t10452 = t11505 * t10802;
t9952 = t10187 * t10038;
t10635 = pkin(2) * t9952;
t11152 = t10162 * t10187;
t9881 = -pkin(1) * t10094 + pkin(6) * t11086;
t9976 = t11086 + pkin(1);
t10378 = -t10195 * t9881 + t11488 * t9976;
t10728 = t10147 * t11174;
t11069 = 0.2e1 * t11466;
t9738 = (t10038 - t11195) * t10955;
t10814 = t10205 * ((-t10195 * t10038 + t10187 * (pkin(2) * t10195 - t10013 + t11069)) * t11158 - t10728 * t11196 + t10186 * (-t10187 * t10725 + pkin(1)) * t10196 + ((0.2e1 * t10094 + pkin(6)) * t10137 - t10014) * t10195 + t10137 * t11488) / ((-t10196 * t11630 * t9936 - t10378) * t10162 - t9738);
t9792 = t10074 * t10197 + t10078 * t10188;
t9793 = -t10074 * t10188 + t10078 * t10197;
t9673 = t10208 * t9792 + t11491 * t9793;
t11266 = t10187 * t9673;
t9667 = -pkin(2) * t9792 + t11122 * t9793;
t10430 = -t9667 * t10196 + t11266;
t11106 = t10186 * t10187;
t10709 = t10162 * t11106;
t10525 = t10196 * t10709;
t10469 = pkin(3) * t10525;
t10738 = t10013 * t11174;
t10774 = t9792 * t11153;
t11128 = t10163 * t10196;
t11181 = t10028 * t10187;
t11706 = t10147 - 0.1e1;
t11577 = t11706 * t11153;
t9998 = t10094 + t10217;
t11598 = t10162 * (t10094 * t10147 - 0.2e1 * t9998);
t10895 = ((t11128 * t9792 + 0.2e1 * t11181 * t9793) * t11466 + (-t9792 * t10469 + (pkin(1) * t9792 + t11598 * t9793 + t10430) * t10163) * t10195 + t9667 * t10525 + (-pkin(1) * t10774 - t10738 * t9793) * t10187 + t11577 * t9673) * t9755 * t9549;
t9672 = -t10208 * t9793 + t11491 * t9792;
t11267 = t10187 * t9672;
t9666 = pkin(2) * t9793 + t11122 * t9792;
t10431 = t9666 * t10196 - t11267;
t10773 = t9793 * t11153;
t9427 = t9753 * ((t11128 * t9793 - 0.2e1 * t11181 * t9792) * t11466 + (-t9793 * t10469 + (pkin(1) * t9793 - t11598 * t9792 + t10431) * t10163) * t10195 - t9666 * t10525 + (-pkin(1) * t10773 + t10738 * t9792) * t10187 - t11577 * t9672) * t9549;
t9368 = -t10814 - t9427 + t10895;
t10771 = t9368 * t11152;
t10645 = pkin(2) * t10771;
t10144 = t10195 * t10145;
t11161 = t10144 * t10236;
t10067 = t10147 - 0.2e1;
t11177 = t10067 * t10137;
t11231 = t9368 * t10163;
t10752 = (t11231 + (-t11177 + t11706) * t11434) * t11161;
t10849 = t10162 * t11434;
t10870 = t10137 * t11434;
t11269 = t10187 * t9368;
t10974 = pkin(2) * t11269;
t9278 = pkin(8) * t9290;
t9281 = pkin(7) * t9290;
t9139 = t9281 + t9278;
t10988 = t9139 * t10094;
t10993 = (t10094 + t10216) * t11487;
t11020 = pkin(2) * t11434;
t11211 = t10101 + t9952;
t10054 = pkin(3) * t11459;
t9926 = t10147 * t11162;
t11621 = t10054 + t9926;
t11104 = t10186 * t10208;
t9155 = t9368 * t11104 - t11438;
t11271 = t10186 * t9368;
t9326 = pkin(3) * t11271;
t9353 = t9368 * pkin(2);
t11268 = t10187 * t9410;
t10836 = t9549 * t11268;
t10583 = t10162 * t10836;
t10507 = -0.2e1 * t10583;
t9375 = t9998 * t10507;
t9390 = t10163 * t11434;
t9747 = t10196 * t10968 - t9881;
t9805 = t11588 * t11493;
t9570 = 0.1e1 / ((t10162 * t9747 - t9805) * t10195 + t11330);
t9994 = pkin(1) * t11086;
t10628 = (t10752 + ((t9375 + 0.2e1 * t9353) * t10163 - (t9326 + t9139) * t11152 + ((t10218 + t11211) * t11542 + 0.2e1 * t10101 + t9979 * t10196 - pkin(2)) * t11434) * t11466 + (-(0.2e1 * t10635 - t11059 + t11621) * t10870 + (-t10988 + t10049 * t9368 + (0.2e1 * t10038 * t9998 - 0.3e1 * t10993) * t10849) * t10163 + (t9979 * t11020 + t11481 * t9155) * t10196 - 0.2e1 * t10645 * t10094 + (t9994 + t11062 + t11621) * t11434) * t10195 + pkin(2) * (-t10452 + (t9155 * t10196 + (-t11588 * t9390 - t10974) * t10186) * t10162)) * t9570 * t11434;
t10812 = t10208 * t11434;
t10568 = t10162 * t10812;
t10413 = t10187 * t10568;
t10820 = t10196 * t11434;
t10569 = t10162 * t10820;
t9190 = -t9290 + t10569;
t9228 = t9368 + t9390;
t10021 = t10102 + pkin(1);
t9743 = -pkin(6) * t9906 + t10021 * t10094;
t9565 = 0.1e1 / (t10195 * (-t10162 * t9743 + t9805) - t11330);
t9090 = (t10145 * t10413 + (pkin(3) * t10569 + t11104 * t9228 - t11438) * t10195 + pkin(2) * t9190) * t9565 * t11438;
t9647 = t10196 * t9792 + t11134 * t9793;
t9491 = -t9647 * t11466 + (pkin(3) * t10773 - t10430) * t10195 + pkin(2) * t10773;
t11397 = t9491 * t9570;
t9683 = -t10156 * t9864 + t10182 * t9868 + t10184;
t9455 = t9683 * t11397;
t9648 = t10196 * t9793 - t11134 * t9792;
t9492 = -t9648 * t11466 + (-pkin(3) * t10774 - t10431) * t10195 - pkin(2) * t10774;
t11396 = t9492 * t9570;
t9687 = -t10156 * t9868 - t10182 * t9864 + t10185;
t9456 = t9687 * t11396;
t10921 = t10187 * t11466;
t9644 = -pkin(2) * t11135 - t10162 * t10921 + t10195 * t11648;
t11377 = t9570 * t9644;
t9506 = t10183 * t11377;
t10289 = -t9090 + t9455 + t9456 + t9506 - t10628;
t10371 = t10583 * t10094;
t10838 = t10186 * t11434;
t10584 = t10162 * t10838;
t10806 = t10208 * t11438;
t9224 = t9228 * pkin(2);
t11442 = (t9228 * t11161 + (-t10371 / 0.2e1 + t9224) * t11069 + (t10049 * t9228 + (pkin(3) * (t10038 - 0.2e1 * t11487) * t10849 - t10806) * t10186) * t10195 - pkin(2) * t11588 * t10584) * t9565;
t10906 = t9368 * t11442;
t9021 = t10289 + t10906;
t9018 = pkin(1) * t9021;
t11727 = t9018 - t11321;
t10313 = -pkin(6) * t10852 - t11727;
t8978 = t10313 * t10163;
t9014 = pkin(6) * t9021;
t9200 = pkin(2) * t10461;
t9289 = t9300 ^ 2 / t9598 ^ 2 * t10238;
t9280 = pkin(7) * t9289;
t11742 = -(t8978 + (pkin(7) * t10461 + t10215) * t11536) * t10196 + (-t10162 * (0.2e1 * t9200 + t9014) + t10882) * t10187 + t10863 * t11004 - t11070 * t9021 - t9280;
t10016 = t10096 + pkin(6);
t10151 = t10199 ^ 2;
t10104 = t10198 * pkin(3);
t11629 = t10104 + pkin(2);
t10327 = t10444 * t11629;
t11369 = (t10104 + t10142) * (t10104 + t10143);
t10829 = t10190 * t11369;
t11189 = t11629 * t10205;
t11662 = t10016 * t10444;
t9515 = t10075 * t9638 + t10079 * t10426;
t11095 = t10190 * t10209;
t9980 = pkin(1) + t11095;
t10114 = pkin(1) * t10190;
t9990 = t10208 + t10114;
t9302 = ((t10327 * t10970 - t11369 * t9515) * t10162 + t11629 * t10484) * t10151 + (t11169 + (-t10444 * t11158 + t10642) * t10829 + (-t9980 * t9515 * t10162 + (-t10137 * t10444 + t10444 - t10703) * t10016) * t11629) * t10199 - ((t10016 * t11096 + t10327) * t10163 + t9990 * t9515) * t11141 - (t10190 * t11662 - t11189) * t11164 - t9990 * t11189 + t11085 * t11662;
t11127 = t10163 * t10198;
t10954 = pkin(1) * t11127;
t11190 = t11629 * t10190;
t11192 = t11629 * t10162;
t11475 = pkin(6) * t10198;
t9937 = -t11475 + t11486;
t10260 = (t10198 * t9983 + t11192 * t9937) * t10199 - t10954 * t11190;
t11191 = t11629 * t10189;
t10963 = pkin(1) * t11191;
t9599 = (t11085 * t9937 + t10963) * t10162 + t10260;
t11436 = t9302 / t9599;
t9294 = t10237 * t11436;
t10460 = t9294 * t11433;
t9403 = t9411 ^ 2 / t9557 ^ 2;
t10861 = t10151 * t9403;
t10097 = t10191 * g(1);
t11451 = t10200 * g(2);
t9940 = -t10097 + t11451;
t11452 = t10200 * g(1);
t11456 = t10191 * g(2);
t9941 = t11452 + t11456;
t11318 = t9940 * t10075 + t9941 * t10079;
t10881 = pkin(1) * t9403 + t11318;
t10851 = t10162 * t9403;
t11317 = -t9941 * t10075 + t9940 * t10079;
t10000 = t10096 + t10217;
t10105 = t10151 * pkin(2);
t11457 = t10189 * pkin(6);
t10015 = pkin(3) + t11457;
t10800 = t10015 * t11433;
t10451 = t11505 * t10800;
t9953 = t10190 * t10039;
t10634 = pkin(2) * t9953;
t11150 = t10162 * t10190;
t9882 = -pkin(1) * t10096 + pkin(6) * t11085;
t9977 = t11085 + pkin(1);
t10377 = -t10198 * t9882 + t11486 * t9977;
t10727 = t10151 * t11174;
t11068 = 0.2e1 * t11465;
t9739 = (t10039 - t11190) * t10954;
t10796 = ((-t10198 * t10039 + t10190 * (pkin(2) * t10198 - t10015 + t11068)) * t11158 - t10727 * t11191 + t10189 * (-t10190 * t10725 + pkin(1)) * t10199 + ((0.2e1 * t10096 + pkin(6)) * t10137 - t10016) * t10198 + t10137 * t11486) * t10205 / ((-t10199 * t11629 * t9937 - t10377) * t10162 - t9739);
t9794 = t10075 * t10200 + t10079 * t10191;
t9795 = -t10075 * t10191 + t10079 * t10200;
t9675 = t10208 * t9794 + t11491 * t9795;
t11260 = t10190 * t9675;
t9669 = -pkin(2) * t9794 + t11122 * t9795;
t10427 = -t9669 * t10199 + t11260;
t11100 = t10189 * t10190;
t10707 = t10162 * t11100;
t10524 = t10199 * t10707;
t10468 = pkin(3) * t10524;
t10736 = t10015 * t11174;
t10770 = t9794 * t11151;
t11126 = t10163 * t10199;
t11180 = t10028 * t10190;
t11705 = t10151 - 0.1e1;
t11578 = t11705 * t11151;
t11599 = t10162 * (t10096 * t10151 - 0.2e1 * t10000);
t10893 = t9756 * ((t11126 * t9794 + 0.2e1 * t11180 * t9795) * t11465 + (-t9794 * t10468 + (pkin(1) * t9794 + t11599 * t9795 + t10427) * t10163) * t10198 + t9669 * t10524 + (-pkin(1) * t10770 - t10736 * t9795) * t10190 + t11578 * t9675) * t9552;
t9674 = -t10208 * t9795 + t11491 * t9794;
t11261 = t10190 * t9674;
t9668 = pkin(2) * t9795 + t11122 * t9794;
t10428 = t9668 * t10199 - t11261;
t10769 = t9795 * t11151;
t9426 = ((t11126 * t9795 - 0.2e1 * t11180 * t9794) * t11465 + (-t9795 * t10468 + (pkin(1) * t9795 - t11599 * t9794 + t10428) * t10163) * t10198 - t9668 * t10524 + (-pkin(1) * t10769 + t10736 * t9794) * t10190 - t11578 * t9674) * t9754 * t9552;
t9367 = -t10796 - t9426 + t10893;
t10767 = t9367 * t11150;
t10643 = pkin(2) * t10767;
t10148 = t10198 * t10149;
t11160 = t10148 * t10236;
t10068 = t10151 - 0.2e1;
t11176 = t10068 * t10137;
t11281 = t10163 * t9367;
t10751 = (t11281 + (-t11176 + t11705) * t11433) * t11160;
t10848 = t10162 * t11433;
t10869 = t10137 * t11433;
t10972 = (t10096 + t10216) * t11485;
t11263 = t10190 * t9367;
t10975 = pkin(2) * t11263;
t9279 = pkin(8) * t9294;
t9282 = pkin(7) * t9294;
t9140 = t9282 + t9279;
t10987 = t9140 * t10096;
t11019 = pkin(2) * t11433;
t11210 = t10105 + t9953;
t10055 = pkin(3) * t11457;
t9927 = t10151 * t11162;
t11620 = t10055 + t9927;
t11098 = t10189 * t10208;
t9154 = t9367 * t11098 - t11436;
t11265 = t10189 * t9367;
t9325 = pkin(3) * t11265;
t9347 = t9367 * pkin(2);
t11262 = t10190 * t9411;
t10830 = t9552 * t11262;
t10581 = t10162 * t10830;
t10505 = -0.2e1 * t10581;
t9376 = t10000 * t10505;
t9391 = t10163 * t11433;
t9748 = t10199 * t10967 - t9882;
t9806 = t11587 * t11493;
t9572 = 0.1e1 / ((t10162 * t9748 - t9806) * t10198 + t11329);
t9995 = pkin(1) * t11085;
t10627 = (t10751 + ((t9376 + 0.2e1 * t9347) * t10163 - (t9325 + t9140) * t11150 + ((t10218 + t11210) * t11542 + 0.2e1 * t10105 + t9980 * t10199 - pkin(2)) * t11433) * t11465 + (-(0.2e1 * t10634 - t11059 + t11620) * t10869 + (-t10987 + t10049 * t9367 + (0.2e1 * t10000 * t10039 - 0.3e1 * t10972) * t10848) * t10163 + (t9980 * t11019 + t11481 * t9154) * t10199 - 0.2e1 * t10643 * t10096 + (t9995 + t11062 + t11620) * t11433) * t10198 + pkin(2) * (-t10451 + (t9154 * t10199 + (-t11587 * t9391 - t10975) * t10189) * t10162)) * t9572 * t11433;
t10811 = t10208 * t11433;
t10567 = t10162 * t10811;
t10412 = t10190 * t10567;
t10818 = t10199 * t11433;
t10576 = t10162 * t10818;
t9191 = -t9294 + t10576;
t9230 = t9367 + t9391;
t10024 = t10106 + pkin(1);
t9744 = -pkin(6) * t9907 + t10024 * t10096;
t9566 = 0.1e1 / (t10198 * (-t10162 * t9744 + t9806) - t11329);
t9091 = (t10149 * t10412 + (pkin(3) * t10576 + t11098 * t9230 - t11436) * t10198 + pkin(2) * t9191) * t9566 * t11436;
t9649 = t10199 * t9794 + t11132 * t9795;
t9493 = -t9649 * t11465 + (pkin(3) * t10769 - t10427) * t10198 + pkin(2) * t10769;
t11395 = t9493 * t9572;
t9684 = -t10156 * t9865 + t10182 * t9869 + t10184;
t9457 = t9684 * t11395;
t9650 = t10199 * t9795 - t11132 * t9794;
t9494 = -t9650 * t11465 + (-pkin(3) * t10770 - t10428) * t10198 - pkin(2) * t10770;
t11394 = t9494 * t9572;
t9688 = -t10156 * t9869 - t10182 * t9865 + t10185;
t9458 = t9688 * t11394;
t10920 = t10190 * t11465;
t9645 = -pkin(2) * t11133 - t10162 * t10920 + t10198 * t11649;
t11374 = t9572 * t9645;
t9507 = t10183 * t11374;
t10288 = -t9091 + t9457 + t9458 + t9507 - t10627;
t10370 = t10581 * t10096;
t10832 = t10189 * t11433;
t10582 = t10162 * t10832;
t10804 = t10208 * t11436;
t9225 = t9230 * pkin(2);
t11441 = (t9230 * t11160 + (-t10370 / 0.2e1 + t9225) * t11068 + (t10049 * t9230 + (pkin(3) * (t10039 - 0.2e1 * t11485) * t10848 - t10804) * t10189) * t10198 - pkin(2) * t11587 * t10582) * t9566;
t10905 = t9367 * t11441;
t9022 = t10288 + t10905;
t9019 = pkin(1) * t9022;
t11726 = t9019 - t11317;
t10312 = -pkin(6) * t10851 - t11726;
t8980 = t10312 * t10163;
t9009 = t9022 * pkin(6);
t9199 = pkin(2) * t10460;
t9293 = t9302 ^ 2 / t9599 ^ 2 * t10238;
t9277 = pkin(7) * t9293;
t11741 = -(t8980 + (pkin(7) * t10460 + t10215) * t11536) * t10199 + (-t10162 * (0.2e1 * t9199 + t9009) + t10881) * t10190 + t10861 * t11004 - t11070 * t9022 - t9277;
t10018 = t10098 + pkin(6);
t10155 = t10202 ^ 2;
t10108 = t10201 * pkin(3);
t11628 = t10108 + pkin(2);
t10326 = t10443 * t11628;
t11368 = (t10108 + t10142) * (t10108 + t10143);
t10823 = t10193 * t11368;
t11184 = t11628 * t10205;
t11660 = t10018 * t10443;
t9516 = t10076 * t9640 + t10080 * t10423;
t11089 = t10193 * t10209;
t9981 = pkin(1) + t11089;
t10115 = pkin(1) * t10193;
t9991 = t10208 + t10115;
t9301 = ((t10326 * t10970 - t11368 * t9516) * t10162 + t11628 * t10484) * t10155 + (t11169 + (-t10443 * t11158 + t10642) * t10823 + (-t9516 * t9981 * t10162 + (-t10137 * t10443 + t10443 - t10703) * t10018) * t11628) * t10202 - ((t10018 * t11090 + t10326) * t10163 + t9516 * t9991) * t11141 - (t10193 * t11660 - t11184) * t11164 - t9991 * t11184 + t11084 * t11660;
t11125 = t10163 * t10201;
t10953 = pkin(1) * t11125;
t11185 = t11628 * t10193;
t11187 = t11628 * t10162;
t11473 = pkin(6) * t10201;
t9944 = t11473 - t11484;
t10259 = (t10201 * t9983 - t11187 * t9944) * t10202 - t10953 * t11185;
t11186 = t11628 * t10192;
t10962 = pkin(1) * t11186;
t9600 = (-t11084 * t9944 + t10962) * t10162 + t10259;
t11437 = t9301 / t9600;
t9292 = t10237 * t11437;
t10459 = t9292 * t11432;
t9404 = t9412 ^ 2 / t9555 ^ 2;
t10859 = t10155 * t9404;
t10111 = g(1) * t10194;
t11468 = g(2) * t10203;
t9942 = -t10111 + t11468;
t11469 = g(2) * t10194;
t11470 = g(1) * t10203;
t9943 = t11469 + t11470;
t11314 = t9942 * t10076 + t9943 * t10080;
t10880 = pkin(1) * t9404 + t11314;
t10850 = t10162 * t9404;
t11313 = -t9943 * t10076 + t9942 * t10080;
t10002 = t10098 + t10217;
t10109 = t10155 * pkin(2);
t11455 = t10192 * pkin(6);
t10017 = pkin(3) + t11455;
t10798 = t10017 * t11432;
t10453 = t11505 * t10798;
t9954 = t10193 * t10040;
t10633 = pkin(2) * t9954;
t11148 = t10162 * t10193;
t9883 = -pkin(1) * t10098 + pkin(6) * t11084;
t9978 = t11084 + pkin(1);
t10376 = -t10201 * t9883 + t11484 * t9978;
t10726 = t10155 * t11174;
t11067 = 0.2e1 * t11464;
t9740 = (t10040 - t11185) * t10953;
t10795 = ((-t10201 * t10040 + t10193 * (pkin(2) * t10201 - t10017 + t11067)) * t11158 - t10726 * t11186 + (-t10193 * t10725 + pkin(1)) * t10192 * t10202 + ((0.2e1 * t10098 + pkin(6)) * t10137 - t10018) * t10201 + t10137 * t11484) * t10205 / ((t10202 * t11628 * t9944 - t10376) * t10162 - t9740);
t9796 = t10076 * t10203 + t10080 * t10194;
t9797 = -t10076 * t10194 + t10080 * t10203;
t9677 = t10208 * t9796 + t11491 * t9797;
t11254 = t10193 * t9677;
t9671 = -pkin(2) * t9796 + t11122 * t9797;
t10424 = -t9671 * t10202 + t11254;
t11094 = t10192 * t10193;
t10705 = t10162 * t11094;
t10523 = t10202 * t10705;
t10467 = pkin(3) * t10523;
t10734 = t10017 * t11174;
t10766 = t9796 * t11149;
t11124 = t10163 * t10202;
t11179 = t10028 * t10193;
t11704 = t10155 - 0.1e1;
t11579 = t11704 * t11149;
t11600 = t10162 * (t10098 * t10155 - 0.2e1 * t10002);
t10894 = ((t11124 * t9796 + 0.2e1 * t11179 * t9797) * t11464 + (-t9796 * t10467 + (pkin(1) * t9796 + t11600 * t9797 + t10424) * t10163) * t10201 + t9671 * t10523 + (-pkin(1) * t10766 - t10734 * t9797) * t10193 + t11579 * t9677) * t9760 * t9546;
t9676 = -t10208 * t9797 + t11491 * t9796;
t11255 = t10193 * t9676;
t9670 = pkin(2) * t9797 + t11122 * t9796;
t10425 = t9670 * t10202 - t11255;
t10765 = t9797 * t11149;
t9428 = t9759 * ((t11124 * t9797 - 0.2e1 * t11179 * t9796) * t11464 + (-t9797 * t10467 + (pkin(1) * t9797 - t11600 * t9796 + t10425) * t10163) * t10201 - t9670 * t10523 + (-pkin(1) * t10765 + t10734 * t9796) * t10193 - t11579 * t9676) * t9546;
t9369 = -t10795 - t9428 + t10894;
t10763 = t9369 * t11148;
t10644 = pkin(2) * t10763;
t10152 = t10201 * t10153;
t11159 = t10152 * t10236;
t10069 = t10155 - 0.2e1;
t11175 = t10069 * t10137;
t11280 = t10163 * t9369;
t10757 = (t11280 + (-t11175 + t11704) * t11432) * t11159;
t10847 = t10162 * t11432;
t10868 = t10137 * t11432;
t10942 = (t10098 + t10216) * t11483;
t11257 = t10193 * t9369;
t10973 = pkin(2) * t11257;
t9275 = pkin(8) * t9292;
t9276 = pkin(7) * t9292;
t9138 = t9276 + t9275;
t10989 = t9138 * t10098;
t11018 = pkin(2) * t11432;
t11209 = t10109 + t9954;
t10056 = pkin(3) * t11455;
t9928 = t10155 * t11162;
t11619 = t10056 + t9928;
t11092 = t10192 * t10208;
t9156 = t9369 * t11092 - t11437;
t11259 = t10192 * t9369;
t9327 = pkin(3) * t11259;
t9359 = t9369 * pkin(2);
t11256 = t10193 * t9412;
t10824 = t9546 * t11256;
t10579 = t10162 * t10824;
t10503 = -0.2e1 * t10579;
t9377 = t10002 * t10503;
t9392 = t10163 * t11432;
t9749 = t10202 * t10966 - t9883;
t9807 = t11586 * t11493;
t9568 = 0.1e1 / ((t10162 * t9749 - t9807) * t10201 + t11328);
t9996 = pkin(1) * t11084;
t10626 = (t10757 + ((t9377 + 0.2e1 * t9359) * t10163 - (t9327 + t9138) * t11148 + ((t10218 + t11209) * t11542 + 0.2e1 * t10109 + t9981 * t10202 - pkin(2)) * t11432) * t11464 + (-(0.2e1 * t10633 - t11059 + t11619) * t10868 + (-t10989 + t10049 * t9369 + (0.2e1 * t10002 * t10040 - 0.3e1 * t10942) * t10847) * t10163 + (t9981 * t11018 + t11481 * t9156) * t10202 - 0.2e1 * t10644 * t10098 + (t9996 + t11062 + t11619) * t11432) * t10201 + pkin(2) * (-t10453 + (t9156 * t10202 + (-t11586 * t9392 - t10973) * t10192) * t10162)) * t9568 * t11432;
t10810 = t10208 * t11432;
t10566 = t10162 * t10810;
t10411 = t10193 * t10566;
t10816 = t10202 * t11432;
t10574 = t10162 * t10816;
t9192 = -t9292 + t10574;
t9232 = t9369 + t9392;
t10027 = t10110 + pkin(1);
t9745 = -pkin(6) * t9908 + t10027 * t10098;
t9564 = 0.1e1 / (t10201 * (-t10162 * t9745 + t9807) - t11328);
t9092 = (t10153 * t10411 + (pkin(3) * t10574 + t11092 * t9232 - t11437) * t10201 + pkin(2) * t9192) * t9564 * t11437;
t9651 = t10202 * t9796 + t11130 * t9797;
t9495 = -t9651 * t11464 + (pkin(3) * t10765 - t10424) * t10201 + pkin(2) * t10765;
t11393 = t9495 * t9568;
t9685 = -t10156 * t9866 + t10182 * t9870 + t10184;
t9459 = t9685 * t11393;
t9652 = t10202 * t9797 - t11130 * t9796;
t9496 = -t9652 * t11464 + (-pkin(3) * t10766 - t10425) * t10201 - pkin(2) * t10766;
t11392 = t9496 * t9568;
t9689 = -t10156 * t9870 - t10182 * t9866 + t10185;
t9460 = t9689 * t11392;
t10919 = t10193 * t11464;
t9646 = -pkin(2) * t11131 - t10162 * t10919 + t10201 * t11650;
t11380 = t9568 * t9646;
t9508 = t10183 * t11380;
t10287 = -t9092 + t9459 + t9460 + t9508 - t10626;
t10369 = t10579 * t10098;
t10826 = t10192 * t11432;
t10580 = t10162 * t10826;
t10805 = t10208 * t11437;
t9226 = t9232 * pkin(2);
t11440 = (t9232 * t11159 + (-t10369 / 0.2e1 + t9226) * t11067 + (t10049 * t9232 + (pkin(3) * (t10040 - 0.2e1 * t11483) * t10847 - t10805) * t10192) * t10201 - pkin(2) * t11586 * t10580) * t9564;
t10904 = t9369 * t11440;
t9023 = t10287 + t10904;
t9020 = pkin(1) * t9023;
t11725 = t9020 - t11313;
t10311 = -pkin(6) * t10850 - t11725;
t8982 = t10311 * t10163;
t9015 = pkin(6) * t9023;
t9201 = pkin(2) * t10459;
t9291 = t9301 ^ 2 / t9600 ^ 2 * t10238;
t9274 = pkin(7) * t9291;
t11740 = -(t8982 + (pkin(7) * t10459 + t10215) * t11536) * t10202 + (-t10162 * (0.2e1 * t9201 + t9015) + t10880) * t10193 + t10859 * t11004 - t11070 * t9023 - t9274;
t10071 = t10162 * g(3);
t11739 = t8978 + t10071;
t11737 = t8980 + t10071;
t11735 = t8982 + t10071;
t11733 = t8993 + t10071;
t10888 = 0.2e1 * t9031 - t11326;
t11110 = t10177 * t10180;
t10903 = t9318 * t11435;
t10681 = pkin(7) * t10903;
t9030 = pkin(2) * t9032;
t11242 = (0.2e1 * t9030 + 0.4e1 * t10681) * t10141;
t9256 = pkin(6) * t10809;
t9311 = t9318 * pkin(7);
t11357 = t9256 - t9311;
t10131 = t10236 + t10239;
t11057 = pkin(3) * t11493;
t10693 = t10139 * t11057;
t11056 = pkin(6) * t11467;
t9655 = (-t10179 * t9777 + (t10176 * t10239 - t11056) * t10162) * t10180;
t10321 = -t10177 * t10693 + t9971 * t10948 + t9655;
t10565 = t10163 * t10809;
t10375 = pkin(1) * t10176 * t10565;
t9315 = pkin(8) * t9318;
t11346 = t9311 + t9315;
t9123 = -t9256 + t11346;
t10390 = -t11584 * t9379 + t9123;
t10232 = pkin(8) ^ 2;
t10233 = pkin(7) ^ 2;
t11061 = -t10233 - t10232;
t11533 = pkin(8) * pkin(7);
t11585 = 0.2e1 * t11533 - t11061;
t10395 = -t11585 + t10131;
t10573 = t10162 * t10809;
t10489 = pkin(2) * t10573;
t10591 = t11174 * t11435;
t10712 = t10162 * t11122;
t10637 = pkin(1) * t10712;
t10783 = t10208 * t11505;
t10808 = t10177 * t11439;
t10865 = t10141 * t11435;
t10867 = t10139 * t11439;
t11140 = t10162 * t10237;
t10943 = pkin(2) * t11140;
t11492 = pkin(2) * t10162;
t11494 = pkin(1) * t10162;
t9316 = pkin(1) * t9318;
t10624 = ((t10176 * t10637 + ((t10050 + t10395) * t10179 + (t10003 + t11467) * pkin(2)) * t11174) * t10865 + ((t10591 * t9971 + t10489) * t11467 + ((-t10083 * t10390 + t10131 * t10809) * t10162 + pkin(2) * t9972 * t10591) * t10179 - (t10176 * t10390 - t11439) * t11492 - t10208 * (-t10177 * t10454 + t10375)) * t10180 + t10867 * t11494 + ((t10176 * t10960 + t10943 * t9971) * t11439 - t11584 * t10783 * t11435) * t10179 - (-t10808 + (t10177 * t9123 + t9379 * t9971 + t9316) * t10176) * t11141 + t10375 * t11489) / ((-pkin(2) * t10960 - t10162 * t9872) * t10179 + t10321) * t11439;
t10051 = pkin(2) * t10086;
t10085 = t10139 * t10236;
t10132 = 0.3e1 / 0.2e1 * pkin(7) + 0.3e1 / 0.2e1 * pkin(8);
t10140 = t10180 * t10141;
t10230 = 0.2e1 * pkin(2);
t10929 = pkin(6) * t11162;
t11358 = 0.2e1 * t9137;
t9312 = t9318 * pkin(6);
t11345 = t9312 + t9253;
t10887 = -t9255 - t11345;
t9113 = t9304 - t10887;
t9257 = pkin(1) * t10809;
t11669 = t10177 * t9113 + t9257;
t9314 = t9318 * t10239;
t10266 = t10051 * ((0.2e1 * t9304 + 0.2e1 * t9312 + t11358) * t10177 + t9257) + t10085 * t11669 + (t9318 * t10929 + (((t9256 - 0.2e1 * t9315) * pkin(7) + t9314 + pkin(6) * t9253 + t11061 * t9318) * t10176 + t10807) * pkin(3)) * t10177;
t10394 = 0.2e1 * t10051 + t10085;
t10293 = t10394 + t11162;
t10234 = pkin(6) ^ 2;
t10694 = -t10234 / 0.2e1 - t10236 / 0.2e1 + t10239 / 0.2e1;
t10330 = t10694 - t11585;
t11060 = pkin(1) ^ 2 + t10234;
t11567 = 0.3e1 * t11585;
t10331 = t10236 + t11060 + t11567;
t10136 = t10163 * t10137;
t10879 = t10004 * t11435;
t10549 = t11631 * t10879;
t10408 = t10208 * t10549;
t10339 = t10136 * t10408;
t10350 = t10843 * t10879;
t10746 = t10232 / 0.2e1 + t10233 / 0.2e1;
t10483 = t10746 + t11533;
t10518 = t10239 - t11567;
t10553 = t10176 * t10807;
t10595 = t11631 * t10853;
t10651 = pkin(3) * t10867;
t10677 = 0.2e1 * t10853;
t10775 = t9318 * t11156;
t9922 = -0.2e1 / 0.3e1 * t11533 - t10232 / 0.3e1 - t10233 / 0.3e1 + t10239;
t10790 = 0.3e1 / 0.2e1 * t10208 * t9922;
t10846 = t10176 * t11439;
t10341 = t10237 * (-t10239 / 0.2e1 + t10746);
t11013 = pkin(3) * t11439;
t11367 = (-t9256 / 0.2e1 + t11346) * t10083 - t11013 / 0.2e1;
t10982 = (pkin(7) * t11345 + pkin(8) * t9312 + t10341 * t11439 + t11367) * t10086;
t11234 = t9318 * t10208;
t11482 = pkin(2) * t10208;
t11544 = 0.2e1 * t10136;
t11545 = 0.2e1 * t10128;
t11571 = t10051 + t10085 - t10050;
t11592 = 0.2e1 * t10050 - t10085;
t11643 = 0.2e1 * t10163;
t9306 = pkin(6) * t11234;
t9105 = t9306 + t11367;
t9141 = t11234 - t10846;
t9181 = t9304 + t9312;
t10561 = t10237 * t10808;
t9249 = pkin(1) * t10561;
t9573 = 0.1e1 / (t10162 * t10379 + t10262);
t10396 = t11585 + t11060;
t9898 = t10236 + t10396;
t9956 = pkin(1) * t11162;
t10632 = (-(t10518 + t10394) * t10140 * t10591 * t11205 + (-0.4e1 * t10339 + (-0.3e1 * (t9922 + t10394) * t10414 - 0.2e1 * t10982 + (-0.2e1 * t9105 + t10651) * pkin(2)) * t10137 + ((t10293 * t9318 + t10553) * t11494 + 0.4e1 * t10408) * t10163 + (t10177 * t10790 + t9956 + t10394 * (t10132 * t10177 + pkin(1))) * t10677 - pkin(2) * t10651 + 0.2e1 * t10982 + t9105 * t10230) * t10141 + (t10350 * t11544 + (0.2e1 * (t10330 + t11571) * t10595 + t10266) * t10137 + (-t10350 + ((-t10846 / 0.2e1 + t11234) * t10089 - t10990 / 0.2e1 + t9314 / 0.2e1 + (t10085 / 0.2e1 + t10051 + t10483) * t9318) * t11205) * t11643 + (0.4e1 * t9988 + t10331 + t11592) * t10595 - t10266) * t10180 + 0.2e1 * t10339 + (0.2e1 * (t10694 + t11571) * t10586 + (t9249 + t9113) * t10086 + pkin(2) * t9181) * t11164 + (((t9314 - t10990) * t10177 + pkin(1) * t9141) * t10162 - 0.2e1 * t10549 + (t10394 + t11585) * t10775) * t11122 + (t11545 + (t9898 + t11592) * t10177) * t9374 - (t10089 * t9137 + t10208 * t9113) * t10086 - t9181 * t11482) * t9573 * t11435;
t10285 = t10624 + t10632;
t10235 = pkin(3) * t10236;
t9960 = t10239 + t11585;
t10386 = t9318 * t9960 - t10553;
t10407 = t10004 * t9374;
t9950 = -t11162 / 0.2e1;
t10537 = t10162 * t9950;
t10944 = pkin(2) * t11141;
t10699 = 0.2e1 * t10944;
t11528 = 0.3e1 / 0.2e1 * t10239 + t10483;
t10789 = t10163 * t11528;
t10952 = t10236 * t11493;
t11066 = 0.2e1 * t10086;
t11206 = t10004 * t10162;
t11609 = t9210 * t11087 + t9316;
t9133 = t9379 * t9960 + t10386;
t9896 = t10163 * t9956;
t9962 = pkin(2) * t9983;
t10911 = ((t10139 * t10952 + (t10004 * t11141 + t11058) * t11066 + t10004 * t10699 + t9896) * t10865 + (t10235 * t9210 * t10138 - (t10004 * t10586 - 0.3e1 * t11520) * t10085 + (-t10553 / 0.2e1 + t9318 * t11528 + ((-pkin(2) * t11206 + t9983) * t10177 + t10789) * t11435) * t11066 + 0.2e1 * (t10004 * t10537 + t9962) * t10844 + pkin(2) * t9133) * t10180 + t11609 * t10085 + (-t10407 / 0.2e1 + t11609 * pkin(2)) * t11066 + t9133 * t11087 - pkin(2) * t10407 + (t10161 * t9379 + t10386) * pkin(1)) / (t11677 * t10179 + t10321) * t9318;
t10739 = t11631 * t11122;
t10522 = t10181 * t10739;
t10842 = t10178 * t11371;
t11306 = t11631 * t9972;
t9681 = -t10004 * t11205 + t10163 * t10843;
t9613 = -t10178 * t9681 + t10181 * t11306;
t9614 = t10178 * t11306 + t10181 * t9681;
t9746 = -t10004 * t11156 + t10163 * t11631;
t9693 = -t10178 * t9746 - t10181 * t11584;
t9694 = -t10178 * t11584 + t10181 * t9746;
t9709 = 0.2e1 * t10178 * t10739 + t10181 * t11371;
t9462 = ((-0.2e1 * t10522 + t10842) * t10077 + t9709 * t10073) * t10141 + (t10073 * t9613 + t10077 * t9614) * t10180 + t10208 * (t10073 * t9693 + t10077 * t9694);
t11420 = t9462 * t9682;
t9461 = (t9709 * t10077 + 0.2e1 * (t10522 - t10842 / 0.2e1) * t10073) * t10141 + (-t10073 * t9614 + t10077 * t9613) * t10180 + (-t10073 * t9694 + t10077 * t9693) * t10208;
t11422 = t9461 * t9686;
t9529 = 0.1e1 / (t9655 + (t10176 * t10944 - t10179 * t9871 - t10693) * t10177 + t10162 * t10965);
t11563 = (t11420 + t11422) * t9529 + t10911;
t11107 = t10183 * t10237;
t11391 = (t10128 * t10180 + (-t11136 * t11206 + t11584 + (t10137 - 0.2e1 * t10729) * t10208) * t11631 + ((t10137 * t11371 - t10293) * t10180 - t10004 * t10712) * t10177) * t9573;
t9477 = t11107 * t11391;
t8864 = t9477 + (-t10162 * t11563 - t10285) * t10237;
t11519 = pkin(7) * t8864;
t11527 = pkin(1) * t8864;
t11559 = -t11357 * t11435 + t9030;
t10045 = -t10234 + t11059;
t10231 = -0.2e1 * pkin(1);
t10410 = t10140 * t9374;
t10340 = t10176 * t10410;
t10474 = -t10180 * t11056 + t9884 * t11490;
t10490 = pkin(6) * t10586;
t11552 = -0.2e1 * pkin(6);
t10541 = t10853 * t11552;
t10545 = pkin(2) * t10677;
t10653 = pkin(2) * t10809;
t10669 = t10161 * t9318 + t9314;
t10673 = 0.2e1 * t10813;
t10695 = t10234 / 0.3e1 - t10239 / 0.3e1 + t10236;
t10723 = t10177 * t11162;
t11017 = pkin(6) * t11435;
t10747 = pkin(2) * t11017;
t10788 = t9371 - t11510;
t10961 = pkin(1) * t11141;
t10997 = t9318 * t11492;
t11001 = pkin(1) * t11234;
t11072 = -0.2e1 * t10128;
t11207 = t9950 + t10236;
t11208 = -0.2e1 / 0.3e1 * t10236 + t11162 / 0.3e1;
t9309 = t9312 / 0.2e1;
t11241 = ((pkin(2) * t10586 + t9309 + t9255 / 0.2e1 + t9253 / 0.2e1) * t10176 + t11509 / 0.2e1) * t10141;
t9248 = pkin(1) * t10573;
t9380 = 0.2e1 * t11021;
t11359 = t9248 + t9380;
t11534 = 0.2e1 * t10180;
t11543 = 0.3e1 * t10136;
t9143 = -t9256 + t11234;
t11702 = t9143 * t10177;
t9144 = -t9306 + t11013;
t9205 = t10788 * t10141;
t9206 = t10490 - t11510 / 0.2e1;
t9305 = pkin(1) * t11278;
t9310 = pkin(2) * t9312;
t9313 = t9318 * t10236;
t9812 = -pkin(2) + t11212;
t9897 = 0.3e1 * t10236 + t10396;
t8914 = (((t10141 - 0.4e1 / 0.3e1) * t11163 + ((-0.2e1 / 0.3e1 * t10050 + t11208) * t10141 + 0.2e1 / 0.3e1 * t10636 + 0.4e1 / 0.3e1 * t10050 + t10695) * t10179 + (0.4e1 / 0.3e1 * t11467 - 0.2e1 / 0.3e1 * t10003) * t9812) * t11435 * t11543 + (t9318 * t10066 * t11163 + ((-pkin(1) * t11510 + t10208 * t10541) * t10180 + (pkin(6) * t10545 - t11001) * t10177 + t9313 - t10669) * t10179 + (t9144 * t11110 - t9310 * t10141 + t9310 + ((t10045 - t9920) * t10177 + 0.2e1 * (t10140 - t10180) * t11482) * t10853) * t10176 + (-(t9205 + (t9316 - t11702) * t10180 - 0.4e1 * t9371 - 0.4e1 * t10490 + 0.3e1 * t11510) * t10139 + 0.2e1 * (t10340 - t11241 - 0.2e1 * (-pkin(2) * t10561 / 0.4e1 + t9374) * t11112 + ((t9257 + t10545) * t10177 + t9309 + t9137) * t10176) * t10179 - t9318 * t10087 - t9143 * t11110 - 0.2e1 * t9206) * pkin(3)) * t10137 + ((-0.3e1 * t10141 + 0.3e1) * t11163 * t11435 - 0.2e1 * ((t9248 / 0.2e1 + t9380) * t10141 + (-t10489 / 0.2e1 + (pkin(1) + 0.2e1 * t11087) * t11435) * t10180 - t10485 - (t9312 + t11358) * t11156 / 0.2e1 - t9248 - t11021) * t11467 + (0.2e1 * (t10050 + t11207) * t10865 + (((t9305 - t9143) * t10083 + t9144) * t10162 - 0.2e1 * t9971 * t11021) * t10180 - 0.4e1 * (-0.3e1 / 0.4e1 * pkin(2) * t10775 + t11017) * t10083 + (pkin(6) * t10997 + t10231 * t10813) * t10177 - t9897 * t11435) * t10179 + ((-t10961 * t9318 + 0.2e1 * t10747) * t10176 + pkin(3) * t11359) * t10141 + ((pkin(1) * t10997 + pkin(6) * t10673) * t10176 + pkin(3) * t10673) * t11110 + (-0.2e1 * t10747 + (t10177 * t10669 + t11001) * t10162) * t10176 - (t11156 * t9137 + t11359) * pkin(3)) * t10163 - t11707 * t9313 * t10138 + (t9205 + (-t9143 * t10180 + t10541) * t10177 - t10788) * t11467 + (-t9313 + (0.2e1 * t11241 + (-0.2e1 * t10410 + ((pkin(1) * t10853 - t10653 / 0.2e1) * t10177 + t9374) * t11534 - t9249 + t10887) * t10176) * pkin(3)) * t10179 + t10340 * t11553 + ((t9310 + (t10723 + t11072) * t10853) * t10176 + pkin(2) * t11509) * t10141 + (((pkin(1) * t10545 - t9144) * t10177 + t10208 * t10545) * t10176 + pkin(3) * t11702) * t10180 + (-t9310 + (t10177 * t9898 + t11545) * t10853) * t10176 + 0.2e1 * t9206 * pkin(3)) / (t9737 + (t10179 * t9742 + t10474) * t10162) * t11435;
t10091 = pkin(1) * t10180;
t10229 = 0.3e1 * pkin(2);
t10619 = t9812 * t10803;
t10696 = t10161 + t11059;
t10922 = pkin(2) * t11110;
t11088 = t10208 * t10141;
t11173 = (t10180 + 0.1e1) * (t10180 - 0.1e1);
t11471 = pkin(6) * t10208;
t11478 = pkin(6) * t10180;
t10053 = pkin(1) * t10088;
t11622 = -t10053 - t9988;
t9048 = (t10756 - ((t9370 + t9318 * (t10091 + t10230)) * t10163 + (-t10180 * t10653 - t11669) * t10162 + ((-t10087 + (-t11087 + pkin(1)) * t10180 + t10229) * t10137 + t9812) * t11435) * t11467 + (-(pkin(3) * t10003 * t10141 - t10050 + t10696 - t11622) * t10874 + ((((t10089 - t10208) * t10083 - t11471) * t10180 + 0.3e1 * t10992) * t10853 - t11584 * t10846 + (-t10049 + t11622) * t9318) * t10163 + (t10004 * t10976 - t11478 * t9141) * t10162 + pkin(3) * t10803 * t11173) * t10179 - t10137 * t10619 - (-t10049 * t10177 - t10128 + (-t10922 + t11088) * pkin(1)) * t10163 * t10587 + t9142 * t9884 * t10162 + t10619) * t9560 * t9318;
t10090 = pkin(1) * t10141;
t10133 = -pkin(7) / 0.2e1 - pkin(8) / 0.2e1;
t10560 = t10177 * t10840;
t10409 = t10004 * t10560;
t10418 = t10177 * t10591;
t11272 = t10180 * t9318;
t9058 = ((((-t10088 + t10090 + t10231 - t11108) * t9379 - t9318 * t9884) * t10162 + t10418 * t11478) * t10139 + ((-t10003 * t9373 + t11439) * t10163 + (((t10133 * t10141 - t11584) * t11542 - t11088 - t11505 * t10922 - t11584) * t11435 + (t10163 * t11584 - t10923) * t9318) * t10176) * t10179 + (-(t10090 - t9971) * t9379 + pkin(2) * t11272 + (t9141 - t9256) * t10177 + t9316) * t10162 - t10137 * t10409 + (t10091 + pkin(2)) * t10565 + t10409) * t9560 * t11439;
t11323 = t10179 * t10482 - 0.2e1 * t10924;
t11658 = -t10003 + t11467;
t10281 = -t10137 * (t10003 * t10177 + t11323) - t10177 * t11658 + t11158 * ((t10066 * t10083 - pkin(6)) * t10179 + t10176 * t9812);
t9982 = t10180 * t10086;
t10745 = t9982 + t9900;
t10301 = t11137 * (pkin(1) + t10745) - t11157 * (-t10208 * t11173 + (t10007 + t9982) * t10177);
t9469 = -t10281 * t9786 + t10301 * t9787;
t9574 = 0.1e1 / (t9737 + t10162 * (t10179 * t9741 + t10474));
t11407 = t9469 * t9574;
t9439 = t9686 * t11407;
t9470 = t10281 * t9787 + t10301 * t9786;
t11406 = t9470 * t9574;
t9440 = t9682 * t11406;
t10716 = t10162 * t11138;
t11113 = t10176 * t10179;
t11502 = 0.2e1 * t10139 - 0.1e1;
t11703 = pkin(6) * t11505;
t11387 = ((-t10482 * t11158 + t11703) * t10179 + (-pkin(6) * t10716 - t10137 * t9812 + t10180 * t9884) * t10176 + (-t10534 * t11113 + t10716 * t11502) * pkin(3)) * t9558;
t9482 = t10183 * t11387;
t8892 = t9439 + t9440 + t9482 - t8914 - t9048 + t9058;
t9028 = pkin(7) * t9032;
t9317 = t9318 ^ 2;
t9146 = t9317 + t9258;
t9211 = pkin(2) * t10903;
t11731 = -(-t10162 * (pkin(2) * t8864 + pkin(6) * t9146) - t10177 * (0.4e1 * t9211 - 0.2e1 * t9028) + t10888) * t10180 + (-0.4e1 * t11110 * (t9211 - t9028 / 0.2e1) - 0.2e1 * t11559 + t11242) * t10137 + (t10177 * (pkin(6) * t8892 + t11519) + t11527) * t10162 + 0.2e1 * (t9305 - t11357) * t11435 - t11242;
t10891 = 0.2e1 * t9018 - t11321;
t11103 = t10187 * t10196;
t10901 = t9368 * t11434;
t10679 = pkin(7) * t10901;
t9016 = pkin(2) * t9021;
t11245 = (0.2e1 * t9016 + 0.4e1 * t10679) * t10147;
t9283 = pkin(6) * t9290;
t9349 = t9368 * pkin(7);
t11350 = t9283 - t9349;
t10692 = t10145 * t11057;
t11055 = pkin(6) * t11466;
t9678 = (-t10195 * t9778 + (t10186 * t10239 - t11055) * t10162) * t10196;
t10320 = -t10187 * t10692 + t9976 * t10947 + t9678;
t10564 = t10163 * t9290;
t10374 = pkin(1) * t10186 * t10564;
t9348 = t9368 * pkin(8);
t11339 = t9348 + t9349;
t9130 = -t9283 + t11339;
t10389 = t9390 * t9989 + t9130;
t10572 = t10162 * t9290;
t10590 = t11174 * t11434;
t10801 = t10147 * t11434;
t10864 = t10145 * t11438;
t10951 = pkin(1) * t11106;
t9363 = pkin(1) * t9368;
t10623 = ((t10186 * t10637 + ((t10054 + t10395) * t10195 + (t10013 + t11466) * pkin(2)) * t11174) * t10801 + ((pkin(2) * t10572 + t10590 * t9976) * t11466 + ((-t10094 * t10389 + t10131 * t9290) * t10162 + pkin(2) * t9979 * t10590) * t10195 - (t10186 * t10389 - t11438) * t11492 - t10208 * (-t10187 * t10452 + t10374)) * t10196 + t10864 * t11494 + ((t10163 * t10951 + t10943 * t9976) * t11438 + t9989 * t10783 * t11434) * t10195 - (-t10187 * t11438 + (t10187 * t9130 + t9390 * t9976 + t9363) * t10186) * t11141 + t10374 * t11487) / ((-pkin(2) * t10958 - t10162 * t9881) * t10195 + t10320) * t11438;
t10057 = pkin(2) * t10100;
t10099 = t10145 * t10236;
t10146 = t10196 * t10147;
t11352 = 0.2e1 * t9139;
t11611 = t11352 + 0.2e1 * t9326;
t9350 = t9368 * pkin(6);
t11338 = t9350 + t9278;
t10885 = -t9281 - t11338;
t9115 = t9326 - t10885;
t9286 = pkin(1) * t9290;
t11668 = t10187 * t9115 + t9286;
t9352 = t9368 * t10239;
t10265 = t10057 * ((0.2e1 * t9350 + t11611) * t10187 + t9286) + t10099 * t11668 + (t9368 * t10929 + (((t9283 - 0.2e1 * t9348) * pkin(7) + t9352 + pkin(6) * t9278 + t11061 * t9368) * t10186 + t10806) * pkin(3)) * t10187;
t10393 = 0.2e1 * t10057 + t10099;
t10292 = t10393 + t11162;
t10878 = t10014 * t11434;
t10548 = t11630 * t10878;
t10406 = t10208 * t10548;
t10338 = t10136 * t10406;
t10355 = t10835 * t10878;
t10506 = 0.2e1 * t10583;
t10552 = t10186 * t10806;
t10594 = t11630 * t10849;
t10650 = pkin(3) * t10864;
t10676 = 0.2e1 * t10849;
t10839 = t10186 * t11438;
t11012 = pkin(3) * t11438;
t11365 = (-t9283 / 0.2e1 + t11339) * t10094 - t11012 / 0.2e1;
t10991 = (pkin(6) * t9348 + pkin(7) * t11338 + t10341 * t11438 + t11365) * t10100;
t11230 = t9368 * t10208;
t11570 = t10057 + t10099 - t10054;
t11591 = 0.2e1 * t10054 - t10099;
t9332 = pkin(6) * t11230;
t9107 = t9332 + t11365;
t9151 = t11230 - t10839;
t9185 = t9326 + t9350;
t10559 = t10187 * t9290;
t9262 = pkin(1) * t10559;
t9577 = 0.1e1 / (t10162 * t10378 + t10261);
t10631 = (-(t10518 + t10393) * t10146 * t10590 * t11197 + (-0.4e1 * t10338 + (-0.3e1 * (t9922 + t10393) * t10413 - 0.2e1 * t10991 + (-0.2e1 * t9107 + t10650) * pkin(2)) * t10137 + ((t10292 * t9368 + t10552) * t11494 + 0.4e1 * t10406) * t10163 + (t10187 * t10790 + t9956 + t10393 * (t10132 * t10187 + pkin(1))) * t10676 - pkin(2) * t10650 + 0.2e1 * t10991 + t9107 * t10230) * t10147 + (t10355 * t11544 + (0.2e1 * (t10330 + t11570) * t10594 + t10265) * t10137 + (-t10355 + ((-t10839 / 0.2e1 + t11230) * t10113 - t10988 / 0.2e1 + t9352 / 0.2e1 + (t10099 / 0.2e1 + t10057 + t10483) * t9368) * t11197) * t11643 + (0.4e1 * t9994 + t10331 + t11591) * t10594 - t10265) * t10196 + 0.2e1 * t10338 + ((t10694 + t11570) * t10506 + (t9262 + t9115) * t10100 + pkin(2) * t9185) * t11164 + (((t9352 - t10988) * t10187 + t9151 * pkin(1)) * t10162 - 0.2e1 * t10548 + (t10393 + t11585) * t10771) * t11122 + (t11545 + (t9898 + t11591) * t10187) * t10568 - (t10113 * t9139 + t10208 * t9115) * t10100 - t9185 * t11482) * t9577 * t11434;
t10284 = t10623 + t10631;
t10385 = t9368 * t9960 - t10552;
t10405 = t10014 * t10568;
t11065 = 0.2e1 * t10100;
t11200 = t10014 * t10162;
t11606 = t9228 * t11086 + t9363;
t11663 = t10014 * t10583;
t9134 = t9390 * t9960 + t10385;
t10910 = ((t10145 * t10952 + (t10014 * t11141 + t11058) * t11065 + t10014 * t10699 + t9896) * t10801 + (t10235 * t9228 * t10144 + (-t10552 / 0.2e1 + t9368 * t11528 + ((-pkin(2) * t11200 + t9983) * t10187 + t10789) * t11434) * t11065 + 0.2e1 * (t10014 * t10537 + t9962) * t10836 + pkin(2) * t9134) * t10196 + (-t10405 / 0.2e1 + t11606 * pkin(2)) * t11065 + t9134 * t11086 - pkin(2) * t10405 + (t10161 * t9390 + t10385) * pkin(1) + ((0.3e1 * t9224 - t11663) * t10196 + t11606) * t10099) / (t11676 * t10195 + t10320) * t9368;
t10732 = t11630 * t11122;
t10521 = t10197 * t10732;
t10834 = t10188 * t11370;
t11305 = t11630 * t9979;
t9690 = -t10014 * t11197 + t10163 * t10835;
t9615 = -t10188 * t9690 + t10197 * t11305;
t9618 = t10188 * t11305 + t10197 * t9690;
t9750 = -t10014 * t11152 + t10163 * t11630;
t9697 = -t10188 * t9750 + t10197 * t9989;
t9700 = t10188 * t9989 + t10197 * t9750;
t9710 = 0.2e1 * t10188 * t10732 + t10197 * t11370;
t9466 = ((-0.2e1 * t10521 + t10834) * t10078 + t9710 * t10074) * t10147 + (t10074 * t9615 + t10078 * t9618) * t10196 + t10208 * (t10074 * t9697 + t10078 * t9700);
t11412 = t9466 * t9683;
t9463 = (t9710 * t10078 + 0.2e1 * (t10521 - t10834 / 0.2e1) * t10074) * t10147 + (-t10074 * t9618 + t10078 * t9615) * t10196 + (-t10074 * t9700 + t10078 * t9697) * t10208;
t11418 = t9463 * t9687;
t9530 = 0.1e1 / (t9678 + (t10186 * t10944 - t10195 * t9871 - t10692) * t10187 + t10162 * t10964);
t11564 = (t11412 + t11418) * t9530 + t10910;
t11390 = (t10128 * t10196 + (-t11128 * t11200 - t9989 + (t10137 - 0.2e1 * t10728) * t10208) * t11630 + ((t10137 * t11370 - t10292) * t10196 - t10014 * t10712) * t10187) * t9577;
t9478 = t11107 * t11390;
t8874 = t9478 + (-t10162 * t11564 - t10284) * t10237;
t11518 = pkin(7) * t8874;
t11526 = pkin(1) * t8874;
t11560 = -t11350 * t11434 + t9016;
t10382 = 0.2e1 * t10146 * t10568;
t10269 = pkin(3) * (pkin(6) * t10507 + t9353) + t10382 * t11488;
t10473 = -t10196 * t11055 + t9885 * t11488;
t10652 = pkin(2) * t9290;
t10488 = t10196 * t10652;
t10493 = pkin(2) * t10568;
t10540 = t10849 * t11552;
t10544 = pkin(2) * t10676;
t10667 = t10161 * t9368 + t9352;
t10672 = 0.2e1 * t10812;
t10722 = t10187 * t11162;
t11016 = pkin(6) * t11434;
t10750 = pkin(2) * t11016;
t9157 = -t9283 + t11230;
t11701 = t9157 * t10187;
t10979 = pkin(3) * t11701;
t10995 = t9368 * t11492;
t10999 = pkin(1) * t11230;
t11507 = t9368 * pkin(3);
t11074 = pkin(2) * t11507;
t11237 = (-t9353 + t10371) * t10147;
t11240 = ((pkin(2) * t10506 - t10885) * t10186 + t11507) * t10147;
t9259 = pkin(1) * t10572;
t11356 = t9259 + 0.2e1 * t11020;
t11539 = 0.4e1 * t10147;
t11499 = t11539 - 0.2e1;
t11551 = 0.2e1 * pkin(6);
t11554 = 0.2e1 * pkin(1);
t9160 = -t9332 + t11012;
t9329 = pkin(1) * t11269;
t9341 = pkin(2) * t9350;
t9351 = t9368 * t10236;
t9827 = -pkin(2) + t11211;
t8919 = (((t10147 - 0.4e1 / 0.3e1) * t11161 + ((-0.2e1 / 0.3e1 * t10054 + t11208) * t10147 + 0.2e1 / 0.3e1 * t10635 + 0.4e1 / 0.3e1 * t10054 + t10695) * t10195 + (0.4e1 / 0.3e1 * t11466 - 0.2e1 / 0.3e1 * t10013) * t9827) * t11434 * t11543 + (t9368 * t10067 * t11161 - (t11237 + (t9363 - t11701) * t10196 + 0.3e1 * t9353 - 0.4e1 * t11663) * t11466 + ((-pkin(1) * t9353 + t10208 * t10540) * t10196 + (pkin(6) * t10544 - t10999) * t10187 + t9351 + (-t11240 + (t10382 + (pkin(2) * t10559 - 0.4e1 * t10568) * t10196 + 0.2e1 * (t9286 + t10544) * t10187 + t9350 + t11352) * t10186) * pkin(3) - t10667) * t10195 + ((-t10583 * t11162 - t9341) * t10186 - t11074) * t10147 + ((t10187 * t9160 - 0.2e1 * t10493) * t10186 - t10979) * t10196 + (t10045 * t10583 + t9341) * t10186 + t10269) * t10137 + ((-0.3e1 * t10147 + 0.3e1) * t11161 * t11434 - (t10067 * t9259 + ((t11554 + 0.4e1 * t11086) * t10196 + t11499 * pkin(2)) * t11434 + (-t10488 + (-t9350 - t11611) * t10187) * t10162) * t11466 + (0.2e1 * (t10054 + t11207) * t10801 + (((t9329 - t9157) * t10094 + t9160) * t10162 - t9976 * pkin(2) * t10702) * t10196 + (0.3e1 * t10645 - 0.4e1 * t11016) * t10094 + (pkin(6) * t10995 + t10231 * t10812) * t10187 - t9897 * t11434) * t10195 + ((-t10961 * t9368 + 0.2e1 * t10750) * t10186 + pkin(3) * t11356) * t10147 + ((pkin(1) * t10995 + pkin(6) * t10672) * t10186 + pkin(3) * t10672) * t11103 + (-0.2e1 * t10750 + (t10187 * t10667 + t10999) * t10162) * t10186 - (t11152 * t9139 + t11356) * pkin(3)) * t10163 - t11706 * t9351 * t10144 - (-t11237 - t9353 + (t10196 * t9157 + (t11551 + t10094) * t10849) * t10187) * t11466 + (-t9351 + (t11240 + (-t10187 * t10488 - t9262 + (-t10208 * t10146 + t10196 * t9989) * t10162 * t10702 + t10885) * t10186) * pkin(3)) * t10195 + ((t9341 + (t10722 + t11072) * t10849) * t10186 + t11074) * t10147 + (((pkin(1) * t10544 - t9160) * t10187 + 0.2e1 * t10493) * t10186 + t10979) * t10196 + (-t9341 + (t10187 * t9898 + t11545) * t10849) * t10186 - t10269) / (t9738 + (t10195 * t9747 + t10473) * t10162) * t11434;
t10117 = pkin(1) * t10196;
t10918 = pkin(2) * t11103;
t10364 = t10147 * t10208 - t10918;
t10601 = t9827 * t10802;
t11172 = (t10196 + 0.1e1) * (t10196 - 0.1e1);
t11476 = pkin(6) * t10196;
t10063 = pkin(1) * t10102;
t11618 = -t10063 - t9994;
t9044 = (-t10752 - ((t9375 + t9368 * (t10117 + t10230)) * t10163 + (-t10488 - t11668) * t10162 + ((-t10101 + (-t11086 + pkin(1)) * t10196 + t10229) * t10137 + t9827) * t11434) * t11466 + (-(pkin(3) * t10013 * t10147 - t10054 + t10696 - t11618) * t10870 + ((((t10113 - t10208) * t10094 - t11471) * t10196 + 0.3e1 * t10993) * t10849 + t9989 * t10839 + (-t10049 + t11618) * t9368) * t10163 + (t10014 * t10974 - t11476 * t9151) * t10162 + pkin(3) * t10802 * t11172) * t10195 - t10137 * t10601 - (pkin(1) * t10364 - t10049 * t10187 - t10128) * t10163 * t10584 + t9155 * t9885 * t10162 + t10601) * t9570 * t9368;
t10116 = pkin(1) * t10147;
t10417 = t10187 * t10590;
t10555 = t10187 * t10820;
t11251 = t10196 * t9368;
t9062 = (((-(-t10102 + t10116 + t10231 - t11101) * t9390 + t9368 * t9885) * t10162 - t10417 * t11476) * t10145 + ((pkin(6) * t11271 + t10163 * t10802) * t11146 + (t10951 * t9368 + t9155) * t10163 + ((t10133 * t10147 + t10918 / 0.2e1 + t9989) * t11541 + t10364 - t9989) * t10838) * t10195 + ((t10116 - t9976) * t9390 - pkin(2) * t11251 + (t10839 - t9157) * t10187 - t9363) * t10162 - (t10117 + pkin(2)) * t10564 + t11505 * t10014 * t10555) * t9570 * t11438;
t11310 = -t10195 * t11588 - 0.2e1 * t10921;
t11657 = -t10013 + t11466;
t10280 = -t10137 * (t10013 * t10187 + t11310) - t10187 * t11657 + t11158 * ((t10067 * t10094 - pkin(6)) * t10195 + t10186 * t9827);
t9985 = t10196 * t10100;
t10744 = t9985 + t9906;
t10300 = t11129 * (pkin(1) + t10744) - t11153 * (-t10208 * t11172 + (t10021 + t9985) * t10187);
t9471 = -t10280 * t9792 + t10300 * t9793;
t9582 = 0.1e1 / (t9738 + t10162 * (t10195 * t9743 + t10473));
t11405 = t9471 * t9582;
t9447 = t9687 * t11405;
t9472 = t10280 * t9793 + t10300 * t9792;
t11404 = t9472 * t9582;
t9448 = t9683 * t11404;
t10640 = -t10147 + t11177;
t10533 = t10640 + 0.1e1;
t10715 = t10162 * t11134;
t11105 = t10186 * t10195;
t11500 = 0.2e1 * t10145 - 0.1e1;
t11386 = ((t11158 * t11588 + t11703) * t10195 + (-pkin(6) * t10715 - t10137 * t9827 + t10196 * t9885) * t10186 + (-t10533 * t11105 + t10715 * t11500) * pkin(3)) * t9565;
t9486 = t10183 * t11386;
t8902 = t9447 + t9448 - t9486 - t8919 - t9044 - t9062;
t9011 = pkin(7) * t9021;
t9365 = t9368 ^ 2;
t9167 = t9365 + t9289;
t9233 = pkin(2) * t10901;
t11730 = -(-t10162 * (pkin(2) * t8874 + pkin(6) * t9167) - t10187 * (0.4e1 * t9233 - 0.2e1 * t9011) + t10891) * t10196 + (-0.4e1 * t11103 * (t9233 - t9011 / 0.2e1) - 0.2e1 * t11560 + t11245) * t10137 + (t10187 * (pkin(6) * t8902 + t11518) + t11526) * t10162 + (t9329 - t11350) * t10702 - t11245;
t10890 = 0.2e1 * t9019 - t11317;
t11097 = t10190 * t10199;
t10902 = t9367 * t11433;
t10680 = pkin(7) * t10902;
t9010 = t9022 * pkin(2);
t11244 = (0.2e1 * t9010 + 0.4e1 * t10680) * t10151;
t9285 = pkin(6) * t9294;
t9344 = t9367 * pkin(7);
t11348 = t9285 - t9344;
t10691 = t10149 * t11057;
t11054 = pkin(6) * t11465;
t9679 = (-t10198 * t9779 + (t10189 * t10239 - t11054) * t10162) * t10199;
t10319 = -t10190 * t10691 + t9977 * t10946 + t9679;
t10562 = t10163 * t9294;
t10373 = pkin(1) * t10189 * t10562;
t9343 = t9367 * pkin(8);
t11341 = t9343 + t9344;
t9132 = -t9285 + t11341;
t10387 = t9391 * t9990 + t9132;
t10570 = t10162 * t9294;
t10589 = t11174 * t11433;
t10799 = t10151 * t11433;
t10862 = t10149 * t11436;
t10950 = pkin(1) * t11100;
t9362 = pkin(1) * t9367;
t10622 = ((t10189 * t10637 + ((t10055 + t10395) * t10198 + (t10015 + t11465) * pkin(2)) * t11174) * t10799 + ((pkin(2) * t10570 + t10589 * t9977) * t11465 + ((-t10096 * t10387 + t10131 * t9294) * t10162 + pkin(2) * t9980 * t10589) * t10198 - (t10189 * t10387 - t11436) * t11492 - t10208 * (-t10190 * t10451 + t10373)) * t10199 + t10862 * t11494 + ((t10163 * t10950 + t10943 * t9977) * t11436 + t9990 * t10783 * t11433) * t10198 - (-t10190 * t11436 + (t10190 * t9132 + t9391 * t9977 + t9362) * t10189) * t11141 + t10373 * t11485) / ((-pkin(2) * t10957 - t10162 * t9882) * t10198 + t10319) * t11436;
t10058 = pkin(2) * t10104;
t10103 = t10149 * t10236;
t10150 = t10199 * t10151;
t11351 = 0.2e1 * t9140;
t11612 = t11351 + 0.2e1 * t9325;
t9345 = t9367 * pkin(6);
t11340 = t9345 + t9279;
t10886 = -t9282 - t11340;
t9114 = t9325 - t10886;
t9288 = pkin(1) * t9294;
t11666 = t10190 * t9114 + t9288;
t9346 = t9367 * t10239;
t10264 = t10058 * ((0.2e1 * t9345 + t11612) * t10190 + t9288) + t10103 * t11666 + (t9367 * t10929 + (((t9285 - 0.2e1 * t9343) * pkin(7) + t9346 + pkin(6) * t9279 + t11061 * t9367) * t10189 + t10804) * pkin(3)) * t10190;
t10392 = 0.2e1 * t10058 + t10103;
t10291 = t10392 + t11162;
t10877 = t10016 * t11433;
t10547 = t11629 * t10877;
t10404 = t10208 * t10547;
t10337 = t10136 * t10404;
t10353 = t10829 * t10877;
t10504 = 0.2e1 * t10581;
t10550 = t10189 * t10804;
t10593 = t11629 * t10848;
t10649 = pkin(3) * t10862;
t10675 = 0.2e1 * t10848;
t10833 = t10189 * t11436;
t11010 = pkin(3) * t11436;
t11366 = (-t9285 / 0.2e1 + t11341) * t10096 - t11010 / 0.2e1;
t10981 = (pkin(6) * t9343 + pkin(7) * t11340 + t10341 * t11436 + t11366) * t10104;
t11232 = t9367 * t10208;
t11569 = t10058 + t10103 - t10055;
t11590 = 0.2e1 * t10055 - t10103;
t9331 = pkin(6) * t11232;
t9106 = t9331 + t11366;
t9152 = t11232 - t10833;
t9184 = t9325 + t9345;
t10558 = t10190 * t9294;
t9264 = pkin(1) * t10558;
t9578 = 0.1e1 / (t10162 * t10377 + t10260);
t10630 = (-(t10518 + t10392) * t10150 * t10589 * t11192 + (-0.4e1 * t10337 + (-0.3e1 * (t9922 + t10392) * t10412 - 0.2e1 * t10981 + (-0.2e1 * t9106 + t10649) * pkin(2)) * t10137 + ((t10291 * t9367 + t10550) * t11494 + 0.4e1 * t10404) * t10163 + (t10190 * t10790 + t9956 + t10392 * (t10132 * t10190 + pkin(1))) * t10675 - pkin(2) * t10649 + 0.2e1 * t10981 + t9106 * t10230) * t10151 + (t10353 * t11544 + (0.2e1 * (t10330 + t11569) * t10593 + t10264) * t10137 + (-t10353 + ((-t10833 / 0.2e1 + t11232) * t10114 - t10987 / 0.2e1 + t9346 / 0.2e1 + (t10103 / 0.2e1 + t10058 + t10483) * t9367) * t11192) * t11643 + (0.4e1 * t9995 + t10331 + t11590) * t10593 - t10264) * t10199 + 0.2e1 * t10337 + ((t10694 + t11569) * t10504 + (t9264 + t9114) * t10104 + pkin(2) * t9184) * t11164 + (((t9346 - t10987) * t10190 + pkin(1) * t9152) * t10162 - 0.2e1 * t10547 + (t10392 + t11585) * t10767) * t11122 + (t11545 + (t9898 + t11590) * t10190) * t10567 - (t10114 * t9140 + t10208 * t9114) * t10104 - t9184 * t11482) * t9578 * t11433;
t10283 = t10622 + t10630;
t10384 = t9367 * t9960 - t10550;
t10403 = t10016 * t10567;
t11064 = 0.2e1 * t10104;
t11199 = t10016 * t10162;
t11607 = t9230 * t11085 + t9362;
t11661 = t10016 * t10581;
t9135 = t9391 * t9960 + t10384;
t10909 = ((t10149 * t10952 + (t10016 * t11141 + t11058) * t11064 + t10016 * t10699 + t9896) * t10799 + (t10235 * t9230 * t10148 + (-t10550 / 0.2e1 + t9367 * t11528 + ((-pkin(2) * t11199 + t9983) * t10190 + t10789) * t11433) * t11064 + 0.2e1 * (t10016 * t10537 + t9962) * t10830 + pkin(2) * t9135) * t10199 + (-t10403 / 0.2e1 + t11607 * pkin(2)) * t11064 + t9135 * t11085 - pkin(2) * t10403 + (t10161 * t9391 + t10384) * pkin(1) + ((0.3e1 * t9225 - t11661) * t10199 + t11607) * t10103) / (t11675 * t10198 + t10319) * t9367;
t10731 = t11629 * t11122;
t10520 = t10200 * t10731;
t10828 = t10191 * t11369;
t11304 = t11629 * t9980;
t9691 = -t10016 * t11192 + t10163 * t10829;
t9616 = -t10191 * t9691 + t10200 * t11304;
t9619 = t10191 * t11304 + t10200 * t9691;
t9751 = -t10016 * t11150 + t10163 * t11629;
t9698 = -t10191 * t9751 + t10200 * t9990;
t9701 = t10191 * t9990 + t10200 * t9751;
t9711 = 0.2e1 * t10191 * t10731 + t10200 * t11369;
t9467 = ((-0.2e1 * t10520 + t10828) * t10079 + t9711 * t10075) * t10151 + (t10075 * t9616 + t10079 * t9619) * t10199 + t10208 * (t10075 * t9698 + t10079 * t9701);
t11410 = t9467 * t9684;
t9464 = (t9711 * t10079 + 0.2e1 * (t10520 - t10828 / 0.2e1) * t10075) * t10151 + (-t10075 * t9619 + t10079 * t9616) * t10199 + (-t10075 * t9701 + t10079 * t9698) * t10208;
t11416 = t9464 * t9688;
t9531 = 0.1e1 / (t9679 + (t10189 * t10944 - t10198 * t9871 - t10691) * t10190 + t10162 * t10963);
t11565 = (t11410 + t11416) * t9531 + t10909;
t11389 = (t10128 * t10199 + (-t11126 * t11199 - t9990 + (t10137 - 0.2e1 * t10727) * t10208) * t11629 + ((t10137 * t11369 - t10291) * t10199 - t10016 * t10712) * t10190) * t9578;
t9479 = t11107 * t11389;
t8875 = t9479 + (-t10162 * t11565 - t10283) * t10237;
t11513 = t8875 * pkin(7);
t11525 = pkin(1) * t8875;
t11562 = -t11348 * t11433 + t9010;
t10381 = 0.2e1 * t10150 * t10567;
t10268 = pkin(3) * (pkin(6) * t10505 + t9347) + t10381 * t11486;
t10472 = -t10199 * t11054 + t9886 * t11486;
t10646 = pkin(2) * t9294;
t10486 = t10199 * t10646;
t10492 = pkin(2) * t10567;
t10539 = t10848 * t11552;
t10543 = pkin(2) * t10675;
t10668 = t10161 * t9367 + t9346;
t10671 = 0.2e1 * t10811;
t10721 = t10190 * t11162;
t11015 = pkin(6) * t11433;
t10749 = pkin(2) * t11015;
t9159 = -t9285 + t11232;
t11699 = t9159 * t10190;
t10977 = pkin(3) * t11699;
t10996 = t9367 * t11492;
t11000 = pkin(1) * t11232;
t11508 = t9367 * pkin(3);
t11075 = pkin(2) * t11508;
t11236 = (-t9347 + t10370) * t10151;
t11239 = ((pkin(2) * t10504 - t10886) * t10189 + t11508) * t10151;
t9261 = pkin(1) * t10570;
t11354 = t9261 + 0.2e1 * t11019;
t11538 = 0.4e1 * t10151;
t11497 = t11538 - 0.2e1;
t9162 = -t9331 + t11010;
t9328 = pkin(1) * t11263;
t9340 = pkin(2) * t9345;
t9361 = t10236 * t9367;
t9828 = -pkin(2) + t11210;
t8920 = (((-0.4e1 / 0.3e1 + t10151) * t11160 + ((-0.2e1 / 0.3e1 * t10055 + t11208) * t10151 + 0.2e1 / 0.3e1 * t10634 + 0.4e1 / 0.3e1 * t10055 + t10695) * t10198 + (0.4e1 / 0.3e1 * t11465 - 0.2e1 / 0.3e1 * t10015) * t9828) * t11433 * t11543 + (t9367 * t10068 * t11160 - (t11236 + (t9362 - t11699) * t10199 + 0.3e1 * t9347 - 0.4e1 * t11661) * t11465 + ((-pkin(1) * t9347 + t10208 * t10539) * t10199 + (pkin(6) * t10543 - t11000) * t10190 + t9361 + (-t11239 + (t10381 + (pkin(2) * t10558 - 0.4e1 * t10567) * t10199 + 0.2e1 * (t9288 + t10543) * t10190 + t9345 + t11351) * t10189) * pkin(3) - t10668) * t10198 + ((-t10581 * t11162 - t9340) * t10189 - t11075) * t10151 + ((t10190 * t9162 - 0.2e1 * t10492) * t10189 - t10977) * t10199 + (t10045 * t10581 + t9340) * t10189 + t10268) * t10137 + ((-0.3e1 * t10151 + 0.3e1) * t11160 * t11433 - (t10068 * t9261 + ((t11554 + 0.4e1 * t11085) * t10199 + t11497 * pkin(2)) * t11433 + (-t10486 + (-t9345 - t11612) * t10190) * t10162) * t11465 + (0.2e1 * (t10055 + t11207) * t10799 + (((t9328 - t9159) * t10096 + t9162) * t10162 - t9977 * pkin(2) * t10701) * t10199 + (0.3e1 * t10643 - 0.4e1 * t11015) * t10096 + (pkin(6) * t10996 + t10231 * t10811) * t10190 - t9897 * t11433) * t10198 + ((-t10961 * t9367 + 0.2e1 * t10749) * t10189 + pkin(3) * t11354) * t10151 + ((pkin(1) * t10996 + pkin(6) * t10671) * t10189 + pkin(3) * t10671) * t11097 + (-0.2e1 * t10749 + (t10190 * t10668 + t11000) * t10162) * t10189 - (t11150 * t9140 + t11354) * pkin(3)) * t10163 - t11705 * t9361 * t10148 - (-t11236 - t9347 + (t9159 * t10199 + (t11551 + t10096) * t10848) * t10190) * t11465 + (-t9361 + (t11239 + (-t10190 * t10486 - t9264 + (-t10208 * t10150 + t10199 * t9990) * t10162 * t10701 + t10886) * t10189) * pkin(3)) * t10198 + ((t9340 + (t10721 + t11072) * t10848) * t10189 + t11075) * t10151 + (((pkin(1) * t10543 - t9162) * t10190 + 0.2e1 * t10492) * t10189 + t10977) * t10199 + (-t9340 + (t10190 * t9898 + t11545) * t10848) * t10189 - t10268) / (t9739 + (t10198 * t9748 + t10472) * t10162) * t11433;
t10119 = pkin(1) * t10199;
t10917 = pkin(2) * t11097;
t10363 = t10151 * t10208 - t10917;
t10600 = t9828 * t10800;
t11171 = (t10199 + 0.1e1) * (t10199 - 0.1e1);
t11474 = pkin(6) * t10199;
t10064 = pkin(1) * t10106;
t11605 = -t9995 - t10064;
t9045 = (-t10751 - ((t9376 + t9367 * (t10119 + t10230)) * t10163 + (-t10486 - t11666) * t10162 + ((-t10105 + (-t11085 + pkin(1)) * t10199 + t10229) * t10137 + t9828) * t11433) * t11465 + (-(pkin(3) * t10015 * t10151 - t10055 + t10696 - t11605) * t10869 + ((((t10114 - t10208) * t10096 - t11471) * t10199 + 0.3e1 * t10972) * t10848 + t9990 * t10833 + (-t10049 + t11605) * t9367) * t10163 + (t10016 * t10975 - t11474 * t9152) * t10162 + pkin(3) * t10800 * t11171) * t10198 - t10137 * t10600 - (pkin(1) * t10363 - t10049 * t10190 - t10128) * t10163 * t10582 + t9154 * t9886 * t10162 + t10600) * t9572 * t9367;
t10118 = pkin(1) * t10151;
t10416 = t10190 * t10589;
t10557 = t10190 * t10818;
t11249 = t10199 * t9367;
t9063 = (((-(-t10106 + t10118 + t10231 - t11095) * t9391 + t9367 * t9886) * t10162 - t10416 * t11474) * t10149 + ((pkin(6) * t11265 + t10163 * t10800) * t11144 + (t10950 * t9367 + t9154) * t10163 + ((t10133 * t10151 + t10917 / 0.2e1 + t9990) * t11541 + t10363 - t9990) * t10832) * t10198 + ((t10118 - t9977) * t9391 - pkin(2) * t11249 + (t10833 - t9159) * t10190 - t9362) * t10162 - (t10119 + pkin(2)) * t10562 + t11505 * t10016 * t10557) * t9572 * t11436;
t11309 = -t10198 * t11587 - 0.2e1 * t10920;
t11656 = -t10015 + t11465;
t10279 = -t10137 * (t10015 * t10190 + t11309) - t10190 * t11656 + t11158 * ((t10068 * t10096 - pkin(6)) * t10198 + t10189 * t9828);
t9986 = t10199 * t10104;
t10743 = t9986 + t9907;
t10299 = t11127 * (pkin(1) + t10743) - t11151 * (-t10208 * t11171 + (t10024 + t9986) * t10190);
t9473 = -t10279 * t9794 + t10299 * t9795;
t9583 = 0.1e1 / (t9739 + t10162 * (t10198 * t9744 + t10472));
t11403 = t9473 * t9583;
t9449 = t9688 * t11403;
t9474 = t10279 * t9795 + t10299 * t9794;
t11402 = t9474 * t9583;
t9450 = t9684 * t11402;
t10639 = -t10151 + t11176;
t10532 = t10639 + 0.1e1;
t10714 = t10162 * t11132;
t11099 = t10189 * t10198;
t11498 = 0.2e1 * t10149 - 0.1e1;
t11385 = ((t11158 * t11587 + t11703) * t10198 + (-pkin(6) * t10714 - t10137 * t9828 + t10199 * t9886) * t10189 + (-t10532 * t11099 + t10714 * t11498) * pkin(3)) * t9566;
t9487 = t10183 * t11385;
t8903 = t9449 + t9450 - t9487 - t8920 - t9045 - t9063;
t9012 = pkin(7) * t9022;
t9364 = t9367 ^ 2;
t9166 = t9364 + t9293;
t9234 = pkin(2) * t10902;
t11729 = -(-t10162 * (pkin(2) * t8875 + pkin(6) * t9166) - t10190 * (0.4e1 * t9234 - 0.2e1 * t9012) + t10890) * t10199 + (-0.4e1 * t11097 * (t9234 - t9012 / 0.2e1) - 0.2e1 * t11562 + t11244) * t10137 + (t10190 * (pkin(6) * t8903 + t11513) + t11525) * t10162 + (t9328 - t11348) * t10701 - t11244;
t10889 = 0.2e1 * t9020 - t11313;
t11091 = t10193 * t10202;
t10900 = t9369 * t11432;
t10678 = pkin(7) * t10900;
t9017 = pkin(2) * t9023;
t11243 = (0.2e1 * t9017 + 0.4e1 * t10678) * t10155;
t9284 = pkin(6) * t9292;
t9355 = t9369 * pkin(7);
t11349 = t9284 - t9355;
t10690 = t10153 * t11057;
t11053 = pkin(6) * t11464;
t9680 = (-t10201 * t9780 + (t10192 * t10239 - t11053) * t10162) * t10202;
t10318 = -t10193 * t10690 + t9978 * t10945 + t9680;
t10563 = t10163 * t9292;
t10372 = pkin(1) * t10192 * t10563;
t9354 = t9369 * pkin(8);
t11337 = t9354 + t9355;
t9131 = -t9284 + t11337;
t10388 = t9392 * t9991 + t9131;
t10571 = t10162 * t9292;
t10588 = t11174 * t11432;
t10797 = t10155 * t11432;
t10860 = t10153 * t11437;
t10949 = pkin(1) * t11094;
t9360 = t9369 * pkin(1);
t10621 = ((t10192 * t10637 + ((t10056 + t10395) * t10201 + (t10017 + t11464) * pkin(2)) * t11174) * t10797 + ((pkin(2) * t10571 + t10588 * t9978) * t11464 + ((-t10098 * t10388 + t10131 * t9292) * t10162 + pkin(2) * t9981 * t10588) * t10201 - (t10192 * t10388 - t11437) * t11492 - t10208 * (-t10193 * t10453 + t10372)) * t10202 + t10860 * t11494 + ((t10163 * t10949 + t10943 * t9978) * t11437 + t9991 * t10783 * t11432) * t10201 - (-t10193 * t11437 + (t10193 * t9131 + t9392 * t9978 + t9360) * t10192) * t11141 + t10372 * t11483) / ((-pkin(2) * t10956 - t10162 * t9883) * t10201 + t10318) * t11437;
t10059 = pkin(2) * t10108;
t10107 = t10153 * t10236;
t10154 = t10202 * t10155;
t11353 = 0.2e1 * t9138;
t11610 = t11353 + 0.2e1 * t9327;
t9356 = t9369 * pkin(6);
t11336 = t9356 + t9275;
t10884 = -t9276 - t11336;
t9116 = t9327 - t10884;
t9287 = pkin(1) * t9292;
t11667 = t10193 * t9116 + t9287;
t9358 = t9369 * t10239;
t10263 = t10059 * ((0.2e1 * t9356 + t11610) * t10193 + t9287) + t10107 * t11667 + (t9369 * t10929 + (((t9284 - 0.2e1 * t9354) * pkin(7) + t9358 + pkin(6) * t9275 + t11061 * t9369) * t10192 + t10805) * pkin(3)) * t10193;
t10391 = 0.2e1 * t10059 + t10107;
t10290 = t10391 + t11162;
t10876 = t10018 * t11432;
t10546 = t11628 * t10876;
t10402 = t10208 * t10546;
t10336 = t10136 * t10402;
t10351 = t10823 * t10876;
t10502 = 0.2e1 * t10579;
t10551 = t10192 * t10805;
t10592 = t11628 * t10847;
t10648 = pkin(3) * t10860;
t10674 = 0.2e1 * t10847;
t10827 = t10192 * t11437;
t11011 = pkin(3) * t11437;
t11364 = (-t9284 / 0.2e1 + t11337) * t10098 - t11011 / 0.2e1;
t10980 = (pkin(6) * t9354 + pkin(7) * t11336 + t10341 * t11437 + t11364) * t10108;
t11229 = t9369 * t10208;
t11568 = t10059 + t10107 - t10056;
t11589 = 0.2e1 * t10056 - t10107;
t9333 = pkin(6) * t11229;
t9108 = t9333 + t11364;
t9153 = t11229 - t10827;
t9186 = t9327 + t9356;
t10556 = t10193 * t9292;
t9263 = pkin(1) * t10556;
t9579 = 0.1e1 / (t10162 * t10376 + t10259);
t10629 = (-(t10518 + t10391) * t10154 * t10588 * t11187 + (-0.4e1 * t10336 + (-0.3e1 * (t9922 + t10391) * t10411 - 0.2e1 * t10980 + (-0.2e1 * t9108 + t10648) * pkin(2)) * t10137 + ((t10290 * t9369 + t10551) * t11494 + 0.4e1 * t10402) * t10163 + (t10193 * t10790 + t9956 + t10391 * (t10132 * t10193 + pkin(1))) * t10674 - pkin(2) * t10648 + 0.2e1 * t10980 + t9108 * t10230) * t10155 + (t10351 * t11544 + (0.2e1 * (t10330 + t11568) * t10592 + t10263) * t10137 + (-t10351 + ((-t10827 / 0.2e1 + t11229) * t10115 - t10989 / 0.2e1 + t9358 / 0.2e1 + (t10107 / 0.2e1 + t10059 + t10483) * t9369) * t11187) * t11643 + (0.4e1 * t9996 + t10331 + t11589) * t10592 - t10263) * t10202 + 0.2e1 * t10336 + ((t10694 + t11568) * t10502 + (t9263 + t9116) * t10108 + pkin(2) * t9186) * t11164 + (((t9358 - t10989) * t10193 + pkin(1) * t9153) * t10162 - 0.2e1 * t10546 + (t10391 + t11585) * t10763) * t11122 + (t11545 + (t9898 + t11589) * t10193) * t10566 - (t10115 * t9138 + t10208 * t9116) * t10108 - t9186 * t11482) * t9579 * t11432;
t10282 = t10621 + t10629;
t10383 = t9369 * t9960 - t10551;
t10401 = t10018 * t10566;
t11063 = 0.2e1 * t10108;
t11198 = t10018 * t10162;
t11608 = t9232 * t11084 + t9360;
t11659 = t10018 * t10579;
t9136 = t9392 * t9960 + t10383;
t10908 = ((t10153 * t10952 + (t10018 * t11141 + t11058) * t11063 + t10018 * t10699 + t9896) * t10797 + (t10235 * t9232 * t10152 + (-t10551 / 0.2e1 + t9369 * t11528 + ((-pkin(2) * t11198 + t9983) * t10193 + t10789) * t11432) * t11063 + 0.2e1 * (t10018 * t10537 + t9962) * t10824 + pkin(2) * t9136) * t10202 + (-t10401 / 0.2e1 + t11608 * pkin(2)) * t11063 + t9136 * t11084 - pkin(2) * t10401 + (t10161 * t9392 + t10383) * pkin(1) + ((0.3e1 * t9226 - t11659) * t10202 + t11608) * t10107) / (t11674 * t10201 + t10318) * t9369;
t10730 = t11628 * t11122;
t10519 = t10203 * t10730;
t10822 = t10194 * t11368;
t11303 = t11628 * t9981;
t9692 = -t10018 * t11187 + t10163 * t10823;
t9617 = -t10194 * t9692 + t10203 * t11303;
t9620 = t10194 * t11303 + t10203 * t9692;
t9752 = -t10018 * t11148 + t10163 * t11628;
t9699 = -t10194 * t9752 + t10203 * t9991;
t9702 = t10194 * t9991 + t10203 * t9752;
t9712 = 0.2e1 * t10194 * t10730 + t10203 * t11368;
t9468 = ((-0.2e1 * t10519 + t10822) * t10080 + t9712 * t10076) * t10155 + (t10076 * t9617 + t10080 * t9620) * t10202 + t10208 * (t10076 * t9699 + t10080 * t9702);
t11408 = t9468 * t9685;
t9465 = (t9712 * t10080 + 0.2e1 * (t10519 - t10822 / 0.2e1) * t10076) * t10155 + (-t10076 * t9620 + t10080 * t9617) * t10202 + (-t10076 * t9702 + t10080 * t9699) * t10208;
t11414 = t9465 * t9689;
t9532 = 0.1e1 / (t9680 + (t10192 * t10944 - t10201 * t9871 - t10690) * t10193 + t10162 * t10962);
t11566 = (t11408 + t11414) * t9532 + t10908;
t11388 = (t10128 * t10202 + (-t11124 * t11198 - t9991 + (t10137 - 0.2e1 * t10726) * t10208) * t11628 + ((t10137 * t11368 - t10290) * t10202 - t10018 * t10712) * t10193) * t9579;
t9480 = t11107 * t11388;
t8876 = t9480 + (-t10162 * t11566 - t10282) * t10237;
t11512 = t8876 * pkin(7);
t11524 = pkin(1) * t8876;
t11561 = -t11349 * t11432 + t9017;
t10380 = 0.2e1 * t10154 * t10566;
t10267 = pkin(3) * (pkin(6) * t10503 + t9359) + t10380 * t11484;
t10471 = -t10202 * t11053 + t9887 * t11484;
t10647 = pkin(2) * t9292;
t10487 = t10202 * t10647;
t10491 = pkin(2) * t10566;
t10538 = t10847 * t11552;
t10542 = pkin(2) * t10674;
t10666 = t10161 * t9369 + t9358;
t10670 = 0.2e1 * t10810;
t10720 = t10193 * t11162;
t11014 = pkin(6) * t11432;
t10748 = pkin(2) * t11014;
t9158 = -t9284 + t11229;
t11700 = t9158 * t10193;
t10978 = pkin(3) * t11700;
t10994 = t9369 * t11492;
t10998 = pkin(1) * t11229;
t11506 = t9369 * pkin(3);
t11073 = pkin(2) * t11506;
t11235 = (-t9359 + t10369) * t10155;
t11238 = ((pkin(2) * t10502 - t10884) * t10192 + t11506) * t10155;
t9260 = pkin(1) * t10571;
t11355 = t9260 + 0.2e1 * t11018;
t11537 = 0.4e1 * t10155;
t11495 = t11537 - 0.2e1;
t9161 = -t9333 + t11011;
t9330 = pkin(1) * t11257;
t9342 = pkin(2) * t9356;
t9357 = t9369 * t10236;
t9829 = -pkin(2) + t11209;
t8921 = (((-0.4e1 / 0.3e1 + t10155) * t11159 + ((-0.2e1 / 0.3e1 * t10056 + t11208) * t10155 + 0.2e1 / 0.3e1 * t10633 + 0.4e1 / 0.3e1 * t10056 + t10695) * t10201 + (0.4e1 / 0.3e1 * t11464 - 0.2e1 / 0.3e1 * t10017) * t9829) * t11432 * t11543 + (t9369 * t10069 * t11159 - (t11235 + (t9360 - t11700) * t10202 + 0.3e1 * t9359 - 0.4e1 * t11659) * t11464 + ((-pkin(1) * t9359 + t10208 * t10538) * t10202 + (pkin(6) * t10542 - t10998) * t10193 + t9357 + (-t11238 + (t10380 + (pkin(2) * t10556 - 0.4e1 * t10566) * t10202 + 0.2e1 * (t9287 + t10542) * t10193 + t9356 + t11353) * t10192) * pkin(3) - t10666) * t10201 + ((-t10579 * t11162 - t9342) * t10192 - t11073) * t10155 + ((t10193 * t9161 - 0.2e1 * t10491) * t10192 - t10978) * t10202 + (t10045 * t10579 + t9342) * t10192 + t10267) * t10137 + ((-0.3e1 * t10155 + 0.3e1) * t11159 * t11432 - (t10069 * t9260 + ((t11554 + 0.4e1 * t11084) * t10202 + t11495 * pkin(2)) * t11432 + (-t10487 + (-t9356 - t11610) * t10193) * t10162) * t11464 + (0.2e1 * (t10056 + t11207) * t10797 + (((t9330 - t9158) * t10098 + t9161) * t10162 - t9978 * pkin(2) * t10700) * t10202 + (0.3e1 * t10644 - 0.4e1 * t11014) * t10098 + (pkin(6) * t10994 + t10231 * t10810) * t10193 - t9897 * t11432) * t10201 + ((-t10961 * t9369 + 0.2e1 * t10748) * t10192 + pkin(3) * t11355) * t10155 + ((pkin(1) * t10994 + pkin(6) * t10670) * t10192 + pkin(3) * t10670) * t11091 + (-0.2e1 * t10748 + (t10193 * t10666 + t10998) * t10162) * t10192 - (t11148 * t9138 + t11355) * pkin(3)) * t10163 - t11704 * t9357 * t10152 - (-t11235 - t9359 + (t10202 * t9158 + (t11551 + t10098) * t10847) * t10193) * t11464 + (-t9357 + (t11238 + (-t10193 * t10487 - t9263 + (-t10208 * t10154 + t10202 * t9991) * t10162 * t10700 + t10884) * t10192) * pkin(3)) * t10201 + ((t9342 + (t10720 + t11072) * t10847) * t10192 + t11073) * t10155 + (((pkin(1) * t10542 - t9161) * t10193 + 0.2e1 * t10491) * t10192 + t10978) * t10202 + (-t9342 + (t10193 * t9898 + t11545) * t10847) * t10192 - t10267) / (t9740 + (t10201 * t9749 + t10471) * t10162) * t11432;
t10121 = pkin(1) * t10202;
t10916 = pkin(2) * t11091;
t10362 = t10155 * t10208 - t10916;
t10618 = t9829 * t10798;
t11170 = (t10202 + 0.1e1) * (t10202 - 0.1e1);
t11472 = pkin(6) * t10202;
t10065 = pkin(1) * t10110;
t11617 = -t10065 - t9996;
t9046 = (-t10757 - ((t9377 + t9369 * (t10121 + t10230)) * t10163 + (-t10487 - t11667) * t10162 + ((-t10109 + (-t11084 + pkin(1)) * t10202 + t10229) * t10137 + t9829) * t11432) * t11464 + (-(pkin(3) * t10017 * t10155 - t10056 + t10696 - t11617) * t10868 + ((((t10115 - t10208) * t10098 - t11471) * t10202 + 0.3e1 * t10942) * t10847 + t9991 * t10827 + (-t10049 + t11617) * t9369) * t10163 + (t10018 * t10973 - t11472 * t9153) * t10162 + pkin(3) * t10798 * t11170) * t10201 - t10137 * t10618 - (pkin(1) * t10362 - t10049 * t10193 - t10128) * t10163 * t10580 + t9156 * t9887 * t10162 + t10618) * t9568 * t9369;
t10120 = pkin(1) * t10155;
t10415 = t10193 * t10588;
t10554 = t10193 * t10816;
t11246 = t10202 * t9369;
t9064 = (((-(-t10110 + t10120 + t10231 - t11089) * t9392 + t9369 * t9887) * t10162 - t10415 * t11472) * t10153 + ((pkin(6) * t11259 + t10163 * t10798) * t11142 + (t10949 * t9369 + t9156) * t10163 + ((t10133 * t10155 + t10916 / 0.2e1 + t9991) * t11541 + t10362 - t9991) * t10826) * t10201 + ((t10120 - t9978) * t9392 - pkin(2) * t11246 + (t10827 - t9158) * t10193 - t9360) * t10162 - (t10121 + pkin(2)) * t10563 + t11505 * t10018 * t10554) * t9568 * t11437;
t11308 = -t10201 * t11586 - 0.2e1 * t10919;
t11655 = -t10017 + t11464;
t10278 = -t10137 * (t10017 * t10193 + t11308) - t10193 * t11655 + t11158 * ((t10069 * t10098 - pkin(6)) * t10201 + t10192 * t9829);
t9987 = t10202 * t10108;
t10742 = t9987 + t9908;
t10298 = t11125 * (pkin(1) + t10742) - t11149 * (-t10208 * t11170 + (t10027 + t9987) * t10193);
t9475 = -t10278 * t9796 + t10298 * t9797;
t9584 = 0.1e1 / (t9740 + t10162 * (t10201 * t9745 + t10471));
t11401 = t9475 * t9584;
t9451 = t9689 * t11401;
t9476 = t10278 * t9797 + t10298 * t9796;
t11400 = t9476 * t9584;
t9452 = t9685 * t11400;
t10638 = -t10155 + t11175;
t10531 = t10638 + 0.1e1;
t10713 = t10162 * t11130;
t11093 = t10192 * t10201;
t11496 = 0.2e1 * t10153 - 0.1e1;
t11384 = ((t11158 * t11586 + t11703) * t10201 + (-pkin(6) * t10713 - t10137 * t9829 + t10202 * t9887) * t10192 + (-t10531 * t11093 + t10713 * t11496) * pkin(3)) * t9564;
t9488 = t10183 * t11384;
t8904 = t9451 + t9452 - t9488 - t8921 - t9046 - t9064;
t9013 = pkin(7) * t9023;
t9366 = t9369 ^ 2;
t9168 = t9366 + t9291;
t9235 = pkin(2) * t10900;
t11728 = -(-t10162 * (pkin(2) * t8876 + pkin(6) * t9168) - t10193 * (0.4e1 * t9235 - 0.2e1 * t9013) + t10889) * t10202 + (-0.4e1 * t11091 * (t9235 - t9013 / 0.2e1) - 0.2e1 * t11561 + t11243) * t10137 + (t10193 * (pkin(6) * t8904 + t11512) + t11524) * t10162 + (t9330 - t11349) * t10700 - t11243;
t8891 = pkin(1) * t8892;
t8970 = t9188 + t9029;
t11718 = t10177 * (-pkin(1) * t9146 + t11536 * t8970 + t11327) - ((t9312 - t9255) * t10677 - t8891) * t10180 - t9254;
t8899 = pkin(1) * t8902;
t8946 = t9200 + t9014;
t11715 = t10187 * (-pkin(1) * t9167 + t11536 * t8946 + t11322) - ((t9350 - t9281) * t10676 - t8899) * t10196 - t9280;
t8900 = pkin(1) * t8903;
t8944 = t9199 + t9009;
t11713 = t10190 * (-pkin(1) * t9166 + t11536 * t8944 + t11318) - ((t9345 - t9282) * t10675 - t8900) * t10199 - t9277;
t8901 = pkin(1) * t8904;
t8948 = t9201 + t9015;
t11711 = t10193 * (-pkin(1) * t9168 + t11536 * t8948 + t11314) - ((t9356 - t9276) * t10674 - t8901) * t10202 - t9274;
t11480 = pkin(6) * t10162;
t10983 = t9032 * t11480;
t11690 = -pkin(1) * t9317 - 0.2e1 * t10983 + t11327;
t10984 = t9023 * t11480;
t11689 = -pkin(1) * t9366 - 0.2e1 * t10984 + t11314;
t10985 = t9022 * t11480;
t11688 = -pkin(1) * t9364 - 0.2e1 * t10985 + t11318;
t10986 = t9021 * t11480;
t11687 = -pkin(1) * t9365 - 0.2e1 * t10986 + t11322;
t11647 = 0.2e1 * t10141;
t11646 = 0.2e1 * t10147;
t11645 = 0.2e1 * t10151;
t11644 = 0.2e1 * t10155;
t11642 = 0.2e1 * t10196;
t11641 = 0.2e1 * t10199;
t11640 = 0.2e1 * t10202;
t10686 = -0.2e1 * t10900;
t10687 = -0.2e1 * t10901;
t10688 = -0.2e1 * t10902;
t10689 = -0.2e1 * t10903;
t11632 = t11505 * pkin(7);
t10609 = t9367 * t10818;
t9000 = t10190 * t9022;
t10315 = t9000 + t10609;
t10611 = t9368 * t10820;
t9001 = t9021 * t10187;
t10316 = t9001 + t10611;
t10607 = t9369 * t10816;
t9002 = t9023 * t10193;
t10314 = t9002 + t10607;
t10616 = t9318 * t10840;
t9025 = t9032 * t10177;
t10317 = t9025 + t10616;
t11604 = t10137 * t11495;
t11603 = t10137 * t11497;
t11602 = t10137 * t11499;
t11540 = 0.4e1 * t10141;
t11601 = t10137 * (t11540 - 0.2e1);
t11596 = (t10155 - 0.1e1 / 0.2e1) * t11643 * t11628;
t11595 = (t10151 - 0.1e1 / 0.2e1) * t11643 * t11629;
t11594 = (t10147 - 0.1e1 / 0.2e1) * t11643 * t11630;
t11593 = (t10141 - 0.1e1 / 0.2e1) * t11643 * t11631;
t11575 = -pkin(7) * t11091 - t10109;
t11574 = -pkin(7) * t11097 - t10105;
t11573 = -pkin(7) * t11103 - t10101;
t11572 = -pkin(7) * t11110 - t10087;
t10361 = t10141 * t10462;
t10605 = t9318 * t10809;
t10511 = pkin(2) * t10605;
t10599 = -t9258 / 0.2e1;
t11517 = pkin(7) * t8892;
t11523 = pkin(2) * t8892;
t11532 = t9317 / 0.2e1;
t9901 = t11460 / 0.2e1 - t10084 / 0.2e1;
t9902 = t11461 / 0.2e1 + t11462 / 0.2e1;
t11550 = -0.2e1 * (t10462 * t11572 + t8970) * t10137 - 0.2e1 * (((t9211 - t9028) * t10162 + pkin(1) * t10605) * t10180 + t11519 / 0.2e1 + t10511 + (t11559 * t10162 + t11527 / 0.2e1) * t10177) * t10163 - 0.2e1 * pkin(2) * t10361 - 0.2e1 * ((-t11517 / 0.2e1 + t8864 * t10217 + (t11532 + t10599) * pkin(2)) * t10162 + (pkin(7) * t10177 + pkin(1)) * t10462) * t10180 - 0.2e1 * ((pkin(7) * t11532 - t9254 / 0.2e1 + t11523 / 0.2e1 - pkin(6) * t10605) * t10177 + t9902 * t10077 + t9901 * t10073 + pkin(1) * t10599) * t10162 + 0.2e1 * t9029;
t10360 = t10147 * t10461;
t10603 = t9368 * t9290;
t10510 = pkin(2) * t10603;
t10598 = -t9289 / 0.2e1;
t11516 = pkin(7) * t8902;
t11522 = pkin(2) * t8902;
t11530 = t9365 / 0.2e1;
t9909 = t11453 / 0.2e1 - t10095 / 0.2e1;
t9910 = t11454 / 0.2e1 + t11458 / 0.2e1;
t11549 = -0.2e1 * (t10461 * t11573 + t8946) * t10137 - 0.2e1 * (((t9233 - t9011) * t10162 + pkin(1) * t10603) * t10196 + t11518 / 0.2e1 + t10510 + (t11560 * t10162 + t11526 / 0.2e1) * t10187) * t10163 - 0.2e1 * pkin(2) * t10360 - 0.2e1 * ((t8874 * t10217 - t11516 / 0.2e1 + (t11530 + t10598) * pkin(2)) * t10162 + (pkin(7) * t10187 + pkin(1)) * t10461) * t10196 - 0.2e1 * ((t11522 / 0.2e1 - pkin(6) * t10603 + pkin(7) * t11530 - t9280 / 0.2e1) * t10187 + t9910 * t10078 + t9909 * t10074 + pkin(1) * t10598) * t10162 + 0.2e1 * t9014;
t10359 = t10151 * t10460;
t10604 = t9367 * t9294;
t10508 = pkin(2) * t10604;
t10596 = -t9293 / 0.2e1;
t11511 = t8903 * pkin(2);
t11515 = pkin(7) * t8903;
t11531 = t9364 / 0.2e1;
t9911 = t11451 / 0.2e1 - t10097 / 0.2e1;
t9912 = t11452 / 0.2e1 + t11456 / 0.2e1;
t11548 = -0.2e1 * (t10460 * t11574 + t8944) * t10137 - 0.2e1 * (((t9234 - t9012) * t10162 + pkin(1) * t10604) * t10199 + t10508 + t11513 / 0.2e1 + (t11562 * t10162 + t11525 / 0.2e1) * t10190) * t10163 - 0.2e1 * pkin(2) * t10359 - 0.2e1 * ((-t11515 / 0.2e1 + t8875 * t10217 + (t10596 + t11531) * pkin(2)) * t10162 + (pkin(7) * t10190 + pkin(1)) * t10460) * t10199 - 0.2e1 * ((-pkin(6) * t10604 + pkin(7) * t11531 - t9277 / 0.2e1 + t11511 / 0.2e1) * t10190 + t9912 * t10079 + t9911 * t10075 + pkin(1) * t10596) * t10162 + 0.2e1 * t9009;
t10358 = t10155 * t10459;
t10602 = t9369 * t9292;
t10509 = pkin(2) * t10602;
t10597 = -t9291 / 0.2e1;
t11514 = pkin(7) * t8904;
t11521 = pkin(2) * t8904;
t11529 = t9366 / 0.2e1;
t9913 = t11468 / 0.2e1 - t10111 / 0.2e1;
t9914 = t11470 / 0.2e1 + t11469 / 0.2e1;
t11547 = -0.2e1 * (t10459 * t11575 + t8948) * t10137 - 0.2e1 * (((t9235 - t9013) * t10162 + pkin(1) * t10602) * t10202 + t10509 + t11512 / 0.2e1 + (t11561 * t10162 + t11524 / 0.2e1) * t10193) * t10163 - 0.2e1 * pkin(2) * t10358 - 0.2e1 * ((-t11514 / 0.2e1 + t8876 * t10217 + (t11529 + t10597) * pkin(2)) * t10162 + (pkin(7) * t10193 + pkin(1)) * t10459) * t10202 - 0.2e1 * ((-pkin(6) * t10602 + pkin(7) * t11529 - t9274 / 0.2e1 + t11521 / 0.2e1) * t10193 + t9914 * t10080 + t9913 * t10076 + pkin(1) * t10597) * t10162 + 0.2e1 * t9015;
t11503 = t11541 - 0.1e1;
t11449 = t10184 - g(2);
t11448 = t10185 - g(1);
t10135 = t10162 ^ 2;
t11447 = MDP(4) * t10135;
t11446 = MDP(5) * t10135;
t11445 = MDP(6) * t10162;
t11444 = MDP(7) * t10162;
t9888 = t10178 * t10223 - t10181 * t10219;
t9889 = t10178 * t10219 + t10181 * t10223;
t10442 = t10129 * t9889 - t10130 * t9888;
t9716 = t10129 * t9888 + t10130 * t9889;
t9602 = t10073 * t10442 + t9716 * t10077;
t11431 = (t10301 * (t9716 * t10073 - t10077 * t10442) + (-t11323 * t10137 + ((t10066 * t10086 + t9812) * t10176 - t11479) * t11158 + (-t10003 * t10137 - t11658) * t10177) * t9602) / (t9737 + t10162 * ((pkin(2) * t9884 + t10007 * t10086) * t10176 - t10745 * t11479));
t9892 = t10191 * t10225 - t10200 * t10221;
t9893 = t10191 * t10221 + t10200 * t10225;
t10440 = t10129 * t9893 - t10130 * t9892;
t9724 = t10129 * t9892 + t10130 * t9893;
t9607 = t10075 * t10440 + t9724 * t10079;
t11430 = (t10299 * (t10075 * t9724 - t10079 * t10440) + (-t11309 * t10137 + ((t10068 * t10104 + t9828) * t10189 - t11475) * t11158 + (-t10015 * t10137 - t11656) * t10190) * t9607) / (t9739 + t10162 * ((pkin(2) * t9886 + t10024 * t10104) * t10189 - t10743 * t11475));
t9894 = t10194 * t10226 - t10203 * t10222;
t9895 = t10194 * t10222 + t10203 * t10226;
t10439 = t10129 * t9895 - t10130 * t9894;
t9725 = t10129 * t9894 + t10130 * t9895;
t9609 = t10076 * t10439 + t9725 * t10080;
t11429 = (t10298 * (t10076 * t9725 - t10080 * t10439) + (-t11308 * t10137 + ((t10069 * t10108 + t9829) * t10192 - t11473) * t11158 + (-t10017 * t10137 - t11655) * t10193) * t9609) / (t9740 + ((pkin(2) * t9887 + t10027 * t10108) * t10192 - t10742 * t11473) * t10162);
t9890 = t10188 * t10224 - t10197 * t10220;
t9891 = t10188 * t10220 + t10197 * t10224;
t10441 = t10129 * t9891 - t10130 * t9890;
t9723 = t10129 * t9890 + t10130 * t9891;
t9605 = t10074 * t10441 + t9723 * t10078;
t11428 = (t10300 * (t9723 * t10074 - t10078 * t10441) + (-t11310 * t10137 + ((t10067 * t10100 + t9827) * t10186 - t11477) * t11158 + (-t10013 * t10137 - t11657) * t10187) * t9605) / (t9738 + t10162 * ((pkin(2) * t9885 + t10021 * t10100) * t10186 - t10744 * t11477));
t11079 = t10208 * t10223;
t11083 = t10208 * t10219;
t11121 = t10163 * t10219;
t9653 = (pkin(2) * t10223 - t10163 * t11083) * t10180 + (pkin(2) * t11121 + t11079) * t10177 - t10219 * t10937;
t11117 = t10163 * t10223;
t9654 = (pkin(2) * t10219 + t10163 * t11079) * t10180 + (-pkin(2) * t11117 + t11083) * t10177 + t10223 * t10937;
t9536 = t10178 * t9654 + t10181 * t9653;
t9537 = -t10178 * t9653 + t10181 * t9654;
t9813 = t10177 * t11121 + t10180 * t10223;
t9814 = t10177 * t11117 - t10180 * t10219;
t9695 = -t10178 * t9814 + t10181 * t9813;
t9696 = t10178 * t9813 + t10181 * t9814;
t9421 = -((-t10129 * t9695 + t10130 * t9696) * t10077 + (t10129 * t9696 + t10130 * t9695) * t10073) * t11467 + ((t10129 * t9536 + t10130 * t9537) * t10077 - (-t10129 * t9537 + t10130 * t9536) * t10073) * t10179 + t9602 * t10948;
t11427 = t9421 * t9534;
t11078 = t10208 * t10224;
t11082 = t10208 * t10220;
t11120 = t10163 * t10220;
t9660 = (pkin(2) * t10224 - t10163 * t11082) * t10196 + (pkin(2) * t11120 + t11078) * t10187 - t10220 * t10936;
t11116 = t10163 * t10224;
t9663 = (pkin(2) * t10220 + t10163 * t11078) * t10196 + (-pkin(2) * t11116 + t11082) * t10187 + t10224 * t10936;
t9539 = t10188 * t9663 + t10197 * t9660;
t9542 = -t10188 * t9660 + t10197 * t9663;
t9830 = t10187 * t11120 + t10196 * t10224;
t9833 = t10187 * t11116 - t10196 * t10220;
t9703 = -t10188 * t9833 + t10197 * t9830;
t9706 = t10188 * t9830 + t10197 * t9833;
t9422 = -((-t10129 * t9703 + t10130 * t9706) * t10078 + (t10129 * t9706 + t10130 * t9703) * t10074) * t11466 + ((t10129 * t9539 + t10130 * t9542) * t10078 - (-t10129 * t9542 + t10130 * t9539) * t10074) * t10195 + t9605 * t10947;
t11426 = t9422 * t9549;
t11077 = t10208 * t10225;
t11081 = t10208 * t10221;
t11119 = t10163 * t10221;
t9661 = (pkin(2) * t10225 - t10163 * t11081) * t10199 + (pkin(2) * t11119 + t11077) * t10190 - t10221 * t10935;
t11115 = t10163 * t10225;
t9664 = (pkin(2) * t10221 + t10163 * t11077) * t10199 + (-pkin(2) * t11115 + t11081) * t10190 + t10225 * t10935;
t9540 = t10191 * t9664 + t10200 * t9661;
t9543 = -t10191 * t9661 + t10200 * t9664;
t9831 = t10190 * t11119 + t10199 * t10225;
t9834 = t10190 * t11115 - t10199 * t10221;
t9704 = -t10191 * t9834 + t10200 * t9831;
t9707 = t10191 * t9831 + t10200 * t9834;
t9423 = -((-t10129 * t9704 + t10130 * t9707) * t10079 + (t10129 * t9707 + t10130 * t9704) * t10075) * t11465 + ((t10129 * t9540 + t10130 * t9543) * t10079 - (-t10129 * t9543 + t10130 * t9540) * t10075) * t10198 + t9607 * t10946;
t11425 = t9423 * t9552;
t11076 = t10208 * t10226;
t11080 = t10208 * t10222;
t11118 = t10163 * t10222;
t9662 = (pkin(2) * t10226 - t10163 * t11080) * t10202 + (pkin(2) * t11118 + t11076) * t10193 - t10222 * t10934;
t11114 = t10163 * t10226;
t9665 = (pkin(2) * t10222 + t10163 * t11076) * t10202 + (-pkin(2) * t11114 + t11080) * t10193 + t10226 * t10934;
t9541 = t10194 * t9665 + t10203 * t9662;
t9544 = -t10194 * t9662 + t10203 * t9665;
t9832 = t10193 * t11118 + t10202 * t10226;
t9835 = t10193 * t11114 - t10202 * t10222;
t9705 = -t10194 * t9835 + t10203 * t9832;
t9708 = t10194 * t9832 + t10203 * t9835;
t9424 = -((-t10129 * t9705 + t10130 * t9708) * t10080 + (t10129 * t9708 + t10130 * t9705) * t10076) * t11464 + ((t10129 * t9541 + t10130 * t9544) * t10080 - (-t10129 * t9544 + t10130 * t9541) * t10076) * t10201 + t9609 * t10945;
t11424 = t9424 * t9546;
t11423 = t9461 * t9529;
t11421 = t9462 * t9529;
t11419 = t9463 * t9530;
t11417 = t9464 * t9531;
t11415 = t9465 * t9532;
t11413 = t9466 * t9530;
t11411 = t9467 * t9531;
t11409 = t9468 * t9532;
t9873 = g(1) * t10073 - g(2) * t10077;
t9877 = g(1) * t10077 + g(2) * t10073;
t9714 = t10178 * t9877 + t10181 * t9873;
t11382 = t9560 * t9714;
t9715 = -t10178 * t9873 + t10181 * t9877;
t11381 = t9560 * t9715;
t9876 = g(1) * t10076 - g(2) * t10080;
t9880 = g(1) * t10080 + g(2) * t10076;
t9719 = t10194 * t9880 + t10203 * t9876;
t11379 = t9568 * t9719;
t9722 = -t10194 * t9876 + t10203 * t9880;
t11378 = t9568 * t9722;
t9874 = g(1) * t10074 - g(2) * t10078;
t9878 = g(1) * t10078 + g(2) * t10074;
t9717 = t10188 * t9878 + t10197 * t9874;
t11376 = t9570 * t9717;
t9720 = -t10188 * t9874 + t10197 * t9878;
t11375 = t9570 * t9720;
t9875 = g(1) * t10075 - g(2) * t10079;
t9879 = g(1) * t10079 + g(2) * t10075;
t9718 = t10191 * t9879 + t10200 * t9875;
t11373 = t9572 * t9718;
t9721 = -t10191 * t9875 + t10200 * t9879;
t11372 = t9572 * t9721;
t11363 = -0.2e1 * t9211 + t9028;
t11362 = -0.2e1 * t9233 + t9011;
t11361 = -0.2e1 * t9234 + t9012;
t11360 = -0.2e1 * t9235 + t9013;
t11335 = t9383 - t9317;
t11334 = t9402 - t9365;
t11333 = t9403 - t9364;
t11332 = t9404 - t9366;
t11307 = MDP(15) * t10162;
t11294 = t10141 * t9032;
t11293 = t10147 * t9021;
t11292 = t10151 * t9022;
t11291 = t10155 * t9023;
t11290 = t10162 * t8892;
t11289 = t10162 * t8902;
t11288 = t10162 * t8903;
t11287 = t10162 * t8904;
t11279 = t10177 * t8892;
t11274 = t10180 * t9032;
t11273 = t10180 * t9317;
t11270 = t10187 * t8902;
t11264 = t10190 * t8903;
t11258 = t10193 * t8904;
t11253 = t10196 * t9021;
t11252 = t10196 * t9365;
t11250 = t10199 * t9022;
t11248 = t10202 * t9023;
t11247 = t10202 * t9366;
t11233 = t9364 * t10199;
t10006 = 0.2e1 * t10088 + pkin(1);
t11201 = t10006 * t10177;
t10020 = 0.2e1 * t10102 + pkin(1);
t11193 = t10020 * t10187;
t10023 = 0.2e1 * t10106 + pkin(1);
t11188 = t10023 * t10190;
t10026 = 0.2e1 * t10110 + pkin(1);
t11183 = t10026 * t10193;
t11168 = t10137 * t10177;
t11167 = t10137 * t10187;
t11166 = t10137 * t10190;
t11165 = t10137 * t10193;
t11155 = t10162 * t10179;
t11147 = t10162 * t10195;
t11145 = t10162 * t10198;
t11143 = t10162 * t10201;
t11052 = 0.2e1 * t10162;
t11050 = 0.4e1 * t10163;
t11049 = 0.2e1 * t11427;
t11048 = 0.2e1 * t11426;
t11047 = 0.2e1 * t11425;
t11046 = 0.2e1 * t11424;
t11045 = -0.2e1 * t11399;
t11044 = 0.2e1 * t11399;
t11043 = -0.2e1 * t11398;
t11042 = 0.2e1 * t11398;
t11041 = -0.2e1 * t11397;
t11040 = 0.2e1 * t11397;
t11039 = -0.2e1 * t11396;
t11038 = 0.2e1 * t11396;
t11037 = -0.2e1 * t11395;
t11036 = 0.2e1 * t11395;
t11035 = -0.2e1 * t11394;
t11034 = 0.2e1 * t11394;
t11033 = -0.2e1 * t11393;
t11032 = 0.2e1 * t11393;
t11031 = -0.2e1 * t11392;
t11030 = 0.2e1 * t11392;
t11029 = -0.2e1 * t11383;
t11028 = 0.2e1 * t11383;
t11027 = -0.2e1 * t11380;
t11026 = 0.2e1 * t11380;
t11025 = -0.2e1 * t11377;
t11024 = 0.2e1 * t11377;
t11023 = -0.2e1 * t11374;
t11022 = 0.2e1 * t11374;
t10357 = t10177 * t10462;
t11009 = (t10357 - t11290 / 0.2e1) * t11534;
t10356 = t10187 * t10461;
t11008 = (t10356 - t11289 / 0.2e1) * t11642;
t10354 = t10190 * t10460;
t11007 = (t10354 - t11288 / 0.2e1) * t11641;
t10352 = t10193 * t10459;
t11006 = (t10352 - t11287 / 0.2e1) * t11640;
t10971 = -t11480 / 0.2e1;
t10875 = t10137 * t9383;
t10873 = t10137 * t9402;
t10872 = t10137 * t9403;
t10871 = t10137 * t9404;
t10858 = t10162 * (t9318 + t10809) * (t9318 - t10809);
t10857 = t10162 * (t9294 + t9367) * (-t9294 + t9367);
t10856 = t10162 * (t9290 + t9368) * (-t9290 + t9368);
t10855 = t10162 * (t9292 + t9369) * (-t9292 + t9369);
t10845 = t10177 * t9383;
t10841 = t10180 * t9383;
t10837 = t10187 * t9402;
t10831 = t10190 * t9403;
t10825 = t10193 * t9404;
t10821 = t10196 * t9402;
t10819 = t10199 * t9403;
t10817 = t10202 * t9404;
t10794 = -t11294 / 0.2e1;
t10793 = -t11293 / 0.2e1;
t10792 = -t11292 / 0.2e1;
t10791 = -t11291 / 0.2e1;
t10787 = t10180 * t11504;
t10786 = t10196 * t11504;
t10785 = t10199 * t11504;
t10784 = t10202 * t11504;
t10782 = t9900 * t11206;
t10781 = t9906 * t11200;
t10780 = t9907 * t11199;
t10779 = t9908 * t11198;
t10776 = t9032 * t11156;
t10772 = t9021 * t11152;
t10768 = t9022 * t11150;
t10764 = t9023 * t11148;
t10759 = t9022 * t11097;
t10755 = t9021 * t11103;
t10754 = t9023 * t11091;
t10753 = t9032 * t11110;
t10710 = t10177 * t11155;
t10708 = t10187 * t11147;
t10706 = t10190 * t11145;
t10704 = t10193 * t11143;
t10617 = t9182 * t10844;
t10615 = t9574 * t10841;
t10614 = t9190 * t10836;
t10613 = t9191 * t10830;
t10612 = t9192 * t10824;
t10610 = t9582 * t10821;
t10608 = t9583 * t10819;
t10606 = t9584 * t10817;
t10585 = t10162 * t10841;
t10578 = t10162 * t10821;
t10577 = t10162 * t10819;
t10575 = t10162 * t10817;
t10530 = t10163 * t10723;
t10529 = t10163 * t10722;
t10528 = t10163 * t10721;
t10527 = t10163 * t10720;
t10515 = -t9383 + t10875;
t10514 = -t9402 + t10873;
t10513 = -t9403 + t10872;
t10512 = -t9404 + t10871;
t10466 = t9574 * t10617;
t10465 = t9582 * t10614;
t10464 = t9583 * t10613;
t10463 = t9584 * t10612;
t10450 = t9318 * t10561;
t10449 = t9368 * t10559;
t10448 = t9367 * t10558;
t10447 = t9369 * t10556;
t9189 = 0.2e1 * t10462;
t9202 = 0.2e1 * t10461;
t9203 = 0.2e1 * t10460;
t9204 = 0.2e1 * t10459;
t10368 = -t8914 / 0.2e1 - t9048 / 0.2e1 + t9058 / 0.2e1 + t9439 / 0.2e1 + t9440 / 0.2e1 + t9482 / 0.2e1;
t10367 = -t8919 / 0.2e1 - t9044 / 0.2e1 - t9062 / 0.2e1 + t9447 / 0.2e1 + t9448 / 0.2e1 - t9486 / 0.2e1;
t10366 = -t8920 / 0.2e1 - t9045 / 0.2e1 - t9063 / 0.2e1 + t9449 / 0.2e1 + t9450 / 0.2e1 - t9487 / 0.2e1;
t10365 = -t8921 / 0.2e1 - t9046 / 0.2e1 - t9064 / 0.2e1 + t9451 / 0.2e1 + t9452 / 0.2e1 - t9488 / 0.2e1;
t10349 = t10162 * t10447;
t10348 = t10162 * t10450;
t10347 = t10162 * t10449;
t10346 = t10162 * t10448;
t10335 = t10162 * t9189;
t10334 = t10162 * t9202;
t10333 = t10162 * t9204;
t10332 = t10162 * t9203;
t8997 = t10163 * t9021;
t8858 = t8997 + t8902;
t8998 = t10163 * t9022;
t8859 = t8998 + t8903;
t8999 = t10163 * t9023;
t8860 = t8999 + t8904;
t9024 = t10163 * t9032;
t8854 = t9024 + t8892;
t10309 = t10162 * t10352;
t10308 = t10162 * t10357;
t10307 = t10162 * t10356;
t10306 = t10162 * t10354;
t8995 = t10163 * t10845 + t11274;
t8986 = t10163 * t10837 + t11253;
t8987 = t10163 * t10831 + t11250;
t8990 = t10163 * t10825 + t11248;
t10305 = pkin(1) * t10689 - pkin(6) * t11290;
t10304 = pkin(1) * t10687 - pkin(6) * t11289;
t10303 = pkin(1) * t10688 - pkin(6) * t11288;
t10302 = pkin(1) * t10686 - pkin(6) * t11287;
t10277 = -t10163 * t9258 - t11156 * t8864 + t10689 + 0.2e1 * t10753;
t10276 = -t10163 * t9289 - t11152 * t8874 + t10687 + 0.2e1 * t10755;
t10275 = -t10163 * t9293 - t11150 * t8875 + t10688 + 0.2e1 * t10759;
t10274 = -t10163 * t9291 - t11148 * t8876 + t10686 + 0.2e1 * t10754;
t10258 = t10180 * t10335 + t10515 * t11647 - t10515 - t9258;
t10257 = t10196 * t10334 + t10514 * t11646 - t10514 - t9289;
t10256 = t10199 * t10332 + t10513 * t11645 - t10513 - t9293;
t10255 = t10202 * t10333 + t10512 * t11644 - t10512 - t9291;
t10254 = t10841 * t11168 + (t10335 - t10841) * t10177 - t8854;
t10253 = t10821 * t11167 + (t10334 - t10821) * t10187 - t8858;
t10252 = t10819 * t11166 + (t10332 - t10819) * t10190 - t8859;
t10251 = t10817 * t11165 + (t10333 - t10817) * t10193 - t8860;
t9804 = -t10129 * t10182 - t10130 * t10156;
t9803 = -t10129 * t10156 + t10130 * t10182;
t9770 = t9928 + t10065 + t10161;
t9769 = t9927 + t10064 + t10161;
t9768 = t9926 + t10063 + t10161;
t9762 = t9920 + t10053 + t10161;
t9416 = (-t9866 * (t9796 * t10779 + t9770 * t9797 + (t11183 * t9797 + t11596 * t9796) * t10208 + (t9652 * t10107 + (t10026 * t9797 + t11198 * t9796 - 0.2e1 * t11255) * t10108 - t9796 * t10527) * t10202) + (-t9797 * t10779 + t9770 * t9796 + (t11183 * t9796 - t11596 * t9797) * t10208 + (t9651 * t10107 + (t10026 * t9796 - t11198 * t9797 + 0.2e1 * t11254) * t10108 + t9797 * t10527) * t10202) * t9870) * t9564 * t11140;
t9415 = (-t9865 * (t9794 * t10780 + t9769 * t9795 + (t11188 * t9795 + t11595 * t9794) * t10208 + (t9650 * t10103 + (t10023 * t9795 + t11199 * t9794 - 0.2e1 * t11261) * t10104 - t9794 * t10528) * t10199) + (-t9795 * t10780 + t9769 * t9794 + (t11188 * t9794 - t11595 * t9795) * t10208 + (t9649 * t10103 + (t10023 * t9794 - t11199 * t9795 + 0.2e1 * t11260) * t10104 + t9795 * t10528) * t10199) * t9869) * t9566 * t11140;
t9414 = (-(t9792 * t10781 + t9793 * t9768 + (t11193 * t9793 + t11594 * t9792) * t10208 + (t9648 * t10099 + (t10020 * t9793 + t11200 * t9792 - 0.2e1 * t11267) * t10100 - t9792 * t10529) * t10196) * t9864 + (-t9793 * t10781 + t9792 * t9768 + (t11193 * t9792 - t11594 * t9793) * t10208 + (t9647 * t10099 + (t10020 * t9792 - t11200 * t9793 + 0.2e1 * t11266) * t10100 + t9793 * t10529) * t10196) * t9868) * t9565 * t11140;
t9413 = (-t9863 * (t9786 * t10782 + t9787 * t9762 + (t11201 * t9787 + t11593 * t9786) * t10208 + (t9643 * t10085 + (t10006 * t9787 + t11206 * t9786 - 0.2e1 * t11276) * t10086 - t9786 * t10530) * t10180) + t9867 * (-t9787 * t10782 + t9786 * t9762 + (t11201 * t9786 - t11593 * t9787) * t10208 + (t9642 * t10085 + (t10006 * t9786 - t11206 * t9787 + 0.2e1 * t11275) * t10086 + t9787 * t10530) * t10180)) * t9558 * t11140;
t9389 = -0.2e1 * t10859;
t9388 = -0.2e1 * t10861;
t9387 = -0.2e1 * t10863;
t9378 = -0.2e1 * t10866;
t9247 = t9389 + t9404;
t9246 = t9388 + t9403;
t9245 = t9387 + t9402;
t9238 = t9378 + t9383;
t9231 = -0.2e1 * t10795 + t9392 - 0.2e1 * t9428 + 0.2e1 * t10894;
t9229 = -0.2e1 * t10796 + t9391 - 0.2e1 * t9426 + 0.2e1 * t10893;
t9227 = -0.2e1 * t10814 + t9390 - 0.2e1 * t9427 + 0.2e1 * t10895;
t9223 = t9392 - t9428 / 0.2e1 + t10894 / 0.2e1 - t10795 / 0.2e1;
t9222 = t9391 - t9426 / 0.2e1 + t10893 / 0.2e1 - t10796 / 0.2e1;
t9221 = t9390 - t9427 / 0.2e1 + t10895 / 0.2e1 - t10814 / 0.2e1;
t9220 = t9369 * t10579;
t9219 = t9368 * t10583;
t9218 = t9367 * t10581;
t9209 = -0.2e1 * t10815 + t9379 - 0.2e1 * t9425 + 0.2e1 * t10892;
t9208 = t9379 - t9425 / 0.2e1 + t10892 / 0.2e1 - t10815 / 0.2e1;
t9207 = t9318 * t10586;
t9195 = -0.2e1 * t10309;
t9194 = -0.2e1 * t10306;
t9193 = -0.2e1 * t10307;
t9183 = -0.2e1 * t10308;
t9174 = -0.2e1 * t10602;
t9173 = 0.4e1 * t10602;
t9172 = -0.2e1 * t10603;
t9171 = 0.4e1 * t10603;
t9170 = -0.2e1 * t10604;
t9169 = 0.4e1 * t10604;
t9148 = -0.2e1 * t10605;
t9147 = 0.4e1 * t10605;
t9080 = (t10163 * t10686 + t10638 * t9404 + t11332) * t11093 - t11496 * t9232 * t10579;
t9079 = (t10163 * t10688 + t10639 * t9403 + t11333) * t11099 - t11498 * t9230 * t10581;
t9078 = (t10163 * t10687 + t10640 * t9402 + t11334) * t11105 - t11500 * t9228 * t10583;
t9077 = (t10163 * t10689 + t10641 * t9383 + t11335) * t11113 - t11502 * t9210 * t10586;
t9072 = (-0.2e1 * t9366 + t9389 + 0.2e1 * t9404) * t10153 + (0.4e1 * t10192 * t9232 * t10704 + (-0.4e1 * t10153 + 0.2e1) * t11280) * t11432 + (t11175 * t11496 + t10155) * t9404 - t11332;
t9071 = (-0.2e1 * t9364 + t9388 + 0.2e1 * t9403) * t10149 + (0.4e1 * t10189 * t9230 * t10706 + (-0.4e1 * t10149 + 0.2e1) * t11281) * t11433 + (t11176 * t11498 + t10151) * t9403 - t11333;
t9070 = (-0.2e1 * t9365 + t9387 + 0.2e1 * t9402) * t10145 + (0.4e1 * t10186 * t9228 * t10708 + (-0.4e1 * t10145 + 0.2e1) * t11231) * t11434 + (t11177 * t11500 + t10147) * t9402 - t11334;
t9069 = (-0.2e1 * t9317 + t9378 + 0.2e1 * t9383) * t10139 + (0.4e1 * t10176 * t9210 * t10710 + (-0.4e1 * t10139 + 0.2e1) * t11282) * t11435 + (t11178 * t11502 + t10141) * t9383 - t11335;
t8996 = t10163 * t10841 - t9025;
t8994 = t10883 - t10983;
t8991 = t10163 * t10817 - t9002;
t8989 = t10163 * t10819 - t9000;
t8988 = t10163 * t10821 - t9001;
t8985 = t10880 - t10984;
t8984 = t10881 - t10985;
t8983 = t10882 - t10986;
t8971 = t9025 + 0.2e1 * t10616;
t8968 = -t10176 * t10462 + t10179 * t9032;
t8967 = t10176 * t9032 + t10179 * t10462;
t8951 = t9002 + 0.2e1 * t10607;
t8950 = t9001 + 0.2e1 * t10611;
t8949 = t9000 + 0.2e1 * t10609;
t8942 = -t10192 * t10459 + t10201 * t9023;
t8941 = -t10189 * t10460 + t10198 * t9022;
t8940 = -t10186 * t10461 + t10195 * t9021;
t8939 = t10192 * t9023 + t10201 * t10459;
t8938 = t10189 * t9022 + t10198 * t10460;
t8937 = t10186 * t9021 + t10195 * t10461;
t8936 = t10753 + (t11647 - 0.1e1) * t10903;
t8935 = t10754 + (t11644 - 0.1e1) * t10900;
t8934 = t10759 + (t11645 - 0.1e1) * t10902;
t8933 = t10755 + (t11646 - 0.1e1) * t10901;
t8932 = t11733 * t10177 + t8994 * t10180;
t8931 = t8994 * t10177 - t11733 * t10180;
t8930 = t11735 * t10193 + t8985 * t10202;
t8929 = t8985 * t10193 - t11735 * t10202;
t8928 = t11737 * t10190 + t8984 * t10199;
t8927 = t8984 * t10190 - t11737 * t10199;
t8926 = t11739 * t10187 + t8983 * t10196;
t8925 = t8983 * t10187 - t11739 * t10196;
t8908 = ((pkin(7) * t10180 - t11489) * t10854 + g(3)) * t10163 + ((t9030 + 0.2e1 * t10681) * t10180 + t11363 * t10177 + t11724) * t10162 - t11703 * t9383;
t8907 = ((pkin(7) * t10202 - t11483) * t10850 + g(3)) * t10163 + ((t9017 + 0.2e1 * t10678) * t10202 + t11360 * t10193 + t11725) * t10162 - t11703 * t9404;
t8906 = ((pkin(7) * t10199 - t11485) * t10851 + g(3)) * t10163 + ((t9010 + 0.2e1 * t10680) * t10199 + t11361 * t10190 + t11726) * t10162 - t11703 * t9403;
t8905 = ((pkin(7) * t10196 - t11487) * t10852 + g(3)) * t10163 + ((t9016 + 0.2e1 * t10679) * t10196 + t11362 * t10187 + t11727) * t10162 - t11703 * t9402;
t8898 = -0.2e1 * t11521;
t8897 = 0.2e1 * t11521;
t8896 = -0.2e1 * t11522;
t8895 = 0.2e1 * t11522;
t8894 = -0.2e1 * t11511;
t8893 = 0.2e1 * t11511;
t8890 = -0.2e1 * t11523;
t8889 = 0.2e1 * t11523;
t8888 = t10538 * t9369 + t8901;
t8887 = t10539 * t9367 + t8900;
t8886 = t10540 * t9368 + t8899;
t8879 = t10541 * t9318 + t8891;
t8870 = t9220 + t9480 / 0.2e1 + (-t10629 / 0.2e1 - t10621 / 0.2e1 + (-t10908 / 0.2e1 + (-t11414 / 0.2e1 - t11408 / 0.2e1) * t9532) * t10162) * t10237;
t8869 = t9219 + t9478 / 0.2e1 + (-t10631 / 0.2e1 - t10623 / 0.2e1 + (-t10910 / 0.2e1 + (-t11418 / 0.2e1 - t11412 / 0.2e1) * t9530) * t10162) * t10237;
t8868 = t9218 + t9479 / 0.2e1 + (-t10630 / 0.2e1 - t10622 / 0.2e1 + (-t10909 / 0.2e1 + (-t11416 / 0.2e1 - t11410 / 0.2e1) * t9531) * t10162) * t10237;
t8862 = t9207 + t9477 / 0.2e1 + (-t10632 / 0.2e1 - t10624 / 0.2e1 + (-t10911 / 0.2e1 + (-t11422 / 0.2e1 - t11420 / 0.2e1) * t9529) * t10162) * t10237;
t8857 = t8999 + t10365;
t8856 = t8998 + t10366;
t8855 = t8997 + t10367;
t8853 = t9024 + t10368;
t8852 = t10193 * t8857 + t11246 * t9223;
t8851 = -t10202 * t8857 + t11257 * t9223;
t8850 = t10187 * t8855 + t11251 * t9221;
t8849 = -t10196 * t8855 + t11269 * t9221;
t8848 = t10190 * t8856 + t11249 * t9222;
t8847 = -t10199 * t8856 + t11263 * t9222;
t8846 = t10177 * t8853 + t11272 * t9208;
t8845 = -t10180 * t8853 + t11278 * t9208;
t8844 = -t9480 + t10282 * t10237 + (t10237 * t11566 + t8990) * t10162;
t8843 = -t9479 + t10283 * t10237 + (t10237 * t11565 + t8987) * t10162;
t8842 = -t9478 + t10284 * t10237 + (t10237 * t11564 + t8986) * t10162;
t8841 = -t11142 * t9023 + t8876 + t9220;
t8840 = -t11146 * t9021 + t8874 + t9219;
t8839 = -t11144 * t9022 + t8875 + t9218;
t8838 = -t9477 + t10285 * t10237 + (t10237 * t11563 + t8995) * t10162;
t8837 = t10162 * t10792 + t8868 * t10199 - t10448 / 0.2e1;
t8836 = t10162 * t10793 + t8869 * t10196 - t10449 / 0.2e1;
t8835 = t10162 * t10791 + t8870 * t10202 - t10447 / 0.2e1;
t8834 = -t11154 * t9032 + t8864 + t9207;
t8833 = t10162 * t10794 + t8862 * t10180 - t10450 / 0.2e1;
t8832 = -t10192 * t8844 - t10201 * t10255;
t8831 = t10192 * t10255 - t10201 * t8844;
t8830 = -t10189 * t8843 - t10198 * t10256;
t8829 = t10189 * t10256 - t10198 * t8843;
t8828 = -t10186 * t8842 - t10195 * t10257;
t8827 = t10186 * t10257 - t10195 * t8842;
t8826 = -t10176 * t8838 - t10179 * t10258;
t8825 = t10176 * t10258 - t10179 * t8838;
t8824 = (t10198 * t10416 - t11151 * t9229) * t10818 + t10198 * t8859 - t9022 * t10707;
t8823 = (t10201 * t10415 - t11149 * t9231) * t10816 + t10201 * t8860 - t9023 * t10705;
t8822 = (t10192 * t10415 + t11143 * t9231) * t10816 + t10192 * t8860 + t9023 * t10704;
t8821 = (t10189 * t10416 + t11145 * t9229) * t10818 + t10189 * t8859 + t9022 * t10706;
t8820 = (t10195 * t10417 - t11153 * t9227) * t10820 + t10195 * t8858 - t9021 * t10709;
t8819 = (t10186 * t10417 + t11147 * t9227) * t10820 + t10186 * t8858 + t9021 * t10708;
t8818 = (t10179 * t10418 - t11157 * t9209) * t10840 + t10179 * t8854 - t9032 * t10711;
t8817 = (t10176 * t10418 + t11155 * t9209) * t10840 + t10176 * t8854 + t9032 * t10710;
t8816 = (t11491 * t9404 + t9013) * t11142 + (pkin(7) * t10579 - 0.2e1 * t10647) * t9392 - pkin(2) * t10764 - 0.2e1 * t10509 - t11512;
t8815 = (t11491 * t9403 + t9012) * t11144 + (pkin(7) * t10581 - 0.2e1 * t10646) * t9391 - pkin(2) * t10768 - 0.2e1 * t10508 - t11513;
t8814 = (t11491 * t9402 + t9011) * t11146 + (pkin(7) * t10583 - 0.2e1 * t10652) * t9390 - pkin(2) * t10772 - 0.2e1 * t10510 - t11518;
t8813 = (t11491 * t9383 + t9028) * t11154 + (pkin(7) * t10586 - 0.2e1 * t10653) * t9379 - pkin(2) * t10776 - 0.2e1 * t10511 - t11519;
t8812 = t11575 * t10871 + (t10193 * t10311 - t11360) * t10163 + (-pkin(6) * t11248 + g(3) * t10193) * t10162 + (pkin(7) * t10825 + t10880) * t10202 - t11514 + (t10871 + t10859 + t9366) * pkin(2);
t8811 = t11574 * t10872 + (t10190 * t10312 - t11361) * t10163 + (-pkin(6) * t11250 + g(3) * t10190) * t10162 + (pkin(7) * t10831 + t10881) * t10199 - t11515 + (t10872 + t10861 + t9364) * pkin(2);
t8810 = t11573 * t10873 + (t10187 * t10313 - t11362) * t10163 + (-pkin(6) * t11253 + g(3) * t10187) * t10162 + (pkin(7) * t10837 + t10882) * t10196 - t11516 + (t10873 + t10863 + t9365) * pkin(2);
t8809 = t11572 * t10875 + (t10177 * t10310 - t11363) * t10163 + (-pkin(6) * t11274 + g(3) * t10177) * t10162 + (pkin(7) * t10845 + t10883) * t10180 - t11517 + (t10875 + t10866 + t9317) * pkin(2);
t8808 = ((0.4e1 * t10459 - 0.2e1 * t10575) * t10163 + 0.2e1 * t10764 + t9173) * t10153 - 0.2e1 * t10251 * t11093 + (-0.2e1 * t9292 + t10574) * t9392 - t10764 + t9174;
t8807 = ((0.4e1 * t10460 - 0.2e1 * t10577) * t10163 + 0.2e1 * t10768 + t9169) * t10149 - 0.2e1 * t10252 * t11099 + (-0.2e1 * t9294 + t10576) * t9391 - t10768 + t9170;
t8806 = ((0.4e1 * t10461 - 0.2e1 * t10578) * t10163 + 0.2e1 * t10772 + t9171) * t10145 - 0.2e1 * t10253 * t11105 + (-0.2e1 * t9290 + t10569) * t9390 - t10772 + t9172;
t8805 = ((0.4e1 * t10462 - 0.2e1 * t10585) * t10163 + 0.2e1 * t10776 + t9147) * t10139 - 0.2e1 * t10254 * t11113 + (t9373 - 0.2e1 * t10809) * t9379 - t10776 + t9148;
t8800 = (t10163 * t8888 - t11480 * t9366 + t10889) * t10202 + (t10163 * t11689 + t10302) * t10193;
t8799 = (t10163 * t8887 - t11480 * t9364 + t10890) * t10199 + (t10163 * t11688 + t10303) * t10190;
t8798 = (t10163 * t8886 - t11480 * t9365 + t10891) * t10196 + (t10163 * t11687 + t10304) * t10187;
t8797 = (-t10193 * t8888 + t10202 * t11689) * t10163 + t10302 * t10202 - 0.2e1 * t10193 * (t9914 * t10076 - t9913 * t10080 + t10971 * t9366 + t9020);
t8796 = (-t10190 * t8887 + t10199 * t11688) * t10163 + t10303 * t10199 - 0.2e1 * (t9912 * t10075 - t9911 * t10079 + t10971 * t9364 + t9019) * t10190;
t8795 = (-t10187 * t8886 + t10196 * t11687) * t10163 + t10304 * t10196 - 0.2e1 * (t9910 * t10074 - t9909 * t10078 + t10971 * t9365 + t9018) * t10187;
t8794 = (t10163 * t8879 - t11480 * t9317 + t10888) * t10180 + (t10163 * t11690 + t10305) * t10177;
t8793 = (-t10177 * t8879 + t10180 * t11690) * t10163 + t10305 * t10180 - 0.2e1 * (t9902 * t10073 - t9901 * t10077 + t10971 * t9317 + t9031) * t10177;
t8792 = t10192 * t8907 + t10201 * t8812;
t8791 = t10192 * t8812 - t10201 * t8907;
t8790 = t10189 * t8906 + t10198 * t8811;
t8789 = t10189 * t8811 - t10198 * t8906;
t8788 = t10186 * t8905 + t10195 * t8810;
t8787 = t10186 * t8810 - t10195 * t8905;
t8786 = t10176 * t8908 + t10179 * t8809;
t8785 = t10176 * t8809 - t10179 * t8908;
t8784 = t10251 * t10153 + (t10764 + (t9204 - t10575) * t10163 + 0.2e1 * t10602) * t11093 - t10309 + t8860;
t8783 = t10252 * t10149 + (t10768 + (t9203 - t10577) * t10163 + 0.2e1 * t10604) * t11099 - t10306 + t8859;
t8782 = t10253 * t10145 + (t10772 + (t9202 - t10578) * t10163 + 0.2e1 * t10603) * t11105 - t10307 + t8858;
t8781 = t10254 * t10139 + (t10776 + (t9189 - t10585) * t10163 + 0.2e1 * t10605) * t11113 - t10308 + t8854;
t8780 = t10201 * t8816 + (t8898 + (t10916 * t11504 + t11632) * t9404 - t11740) * t10192;
t8779 = t8816 * t10192 + (t8897 + (-t10784 * t11483 - t11632) * t9404 + t11740) * t10201;
t8778 = t10198 * t8815 + (t8894 + (t10917 * t11504 + t11632) * t9403 - t11741) * t10189;
t8777 = t8815 * t10189 + (t8893 + (-t10785 * t11485 - t11632) * t9403 + t11741) * t10198;
t8776 = t10195 * t8814 + (t8896 + (t10918 * t11504 + t11632) * t9402 - t11742) * t10186;
t8775 = t8814 * t10186 + (t8895 + (-t10786 * t11487 - t11632) * t9402 + t11742) * t10195;
t8774 = t10179 * t8813 + (t8890 + (t10922 * t11504 + t11632) * t9383 - t11743) * t10176;
t8773 = t8813 * t10176 + (t8889 + (-t10787 * t11489 - t11632) * t9383 + t11743) * t10179;
t8772 = (t10201 * t8870 - t11142 * t8942) * t11643 + t10201 * t11006 + (t10202 * t11542 * t8939 + t10201 * t10855) * t10193 + ((t11537 - t11604) * t10900 + t10274) * t10192;
t8771 = (-t11158 * t8939 + t11165 * t8942) * t11640 + (t10193 * t10855 + t11643 * t8870 + t11006) * t10192 + ((-0.4e1 * t10155 + t11604) * t10900 - t10274) * t10201;
t8770 = (t10198 * t8868 - t11144 * t8941) * t11643 + t10198 * t11007 + (t10199 * t11542 * t8938 + t10198 * t10857) * t10190 + ((t11538 - t11603) * t10902 + t10275) * t10189;
t8769 = (-t11158 * t8938 + t11166 * t8941) * t11641 + (t10190 * t10857 + t11643 * t8868 + t11007) * t10189 + ((-0.4e1 * t10151 + t11603) * t10902 - t10275) * t10198;
t8768 = (t10195 * t8869 - t11146 * t8940) * t11643 + t10195 * t11008 + (t10196 * t11542 * t8937 + t10195 * t10856) * t10187 + ((t11539 - t11602) * t10901 + t10276) * t10186;
t8767 = (-t11158 * t8937 + t11167 * t8940) * t11642 + (t10187 * t10856 + t11643 * t8869 + t11008) * t10186 + ((-0.4e1 * t10147 + t11602) * t10901 - t10276) * t10195;
t8766 = (t10179 * t8862 - t11154 * t8968) * t11643 + t10179 * t11009 + (t10180 * t11542 * t8967 + t10179 * t10858) * t10177 + ((t11540 - t11601) * t10903 + t10277) * t10176;
t8765 = (-t11158 * t8967 + t11168 * t8968) * t11534 + (t10177 * t10858 + t11643 * t8862 + t11009) * t10176 + ((-0.4e1 * t10141 + t11601) * t10903 - t10277) * t10179;
t8764 = ((0.2e1 * t10626 + 0.2e1 * t9092 - 0.2e1 * t9459 - 0.2e1 * t9460 - 0.2e1 * t9508 + t11291) * t10137 + (0.4e1 * t10309 - t8904) * t10163 - t11291 + (-t11503 * t11440 + (-t10784 * t11432 + 0.2e1 * t10571) * t10193) * t9369 + t10287) * t10153 + 0.2e1 * ((t10314 * t10163 + t11247 / 0.2e1 + t11258 / 0.2e1) * t10162 + (t11280 + (t11170 - t11175) * t11432) * t9292) * t11093 + t10137 * t9023 + (t9195 + t8904) * t10163 - t10349;
t8763 = ((0.2e1 * t10628 + 0.2e1 * t9090 - 0.2e1 * t9455 - 0.2e1 * t9456 - 0.2e1 * t9506 + t11293) * t10137 + (0.4e1 * t10307 - t8902) * t10163 - t11293 + (-t11503 * t11442 + (-t10786 * t11434 + 0.2e1 * t10572) * t10187) * t9368 + t10289) * t10145 + 0.2e1 * ((t10316 * t10163 + t11252 / 0.2e1 + t11270 / 0.2e1) * t10162 + (t11231 + (t11172 - t11177) * t11434) * t9290) * t11105 + t10137 * t9021 + (t9193 + t8902) * t10163 - t10347;
t8762 = ((0.2e1 * t10627 + 0.2e1 * t9091 - 0.2e1 * t9457 - 0.2e1 * t9458 - 0.2e1 * t9507 + t11292) * t10137 + (0.4e1 * t10306 - t8903) * t10163 - t11292 + (-t11503 * t11441 + (-t10785 * t11433 + 0.2e1 * t10570) * t10190) * t9367 + t10288) * t10149 + 0.2e1 * ((t10315 * t10163 + t11233 / 0.2e1 + t11264 / 0.2e1) * t10162 + (t11281 + (t11171 - t11176) * t11433) * t9294) * t11099 + t10137 * t9022 + (t9194 + t8903) * t10163 - t10346;
t8761 = ((0.2e1 * t10625 - 0.2e1 * t9089 - 0.2e1 * t9453 - 0.2e1 * t9454 - 0.2e1 * t9505 + t11294) * t10137 + (0.4e1 * t10308 - t8892) * t10163 - t11294 + (t11503 * t11443 + (-t10787 * t11435 + 0.2e1 * t10573) * t10177) * t9318 + t10286) * t10139 + 0.2e1 * ((t10317 * t10163 + t11273 / 0.2e1 + t11279 / 0.2e1) * t10162 + (t11282 + (t11173 - t11178) * t11435) * t10809) * t11113 + t10137 * t9032 + (t9183 + t8892) * t10163 - t10348;
t8760 = (t9173 * t10163 - 0.4e1 * t10531 * t10459 + (t10314 * t11050 + 0.2e1 * t11247 + 0.2e1 * t11258) * t10162) * t10153 + 0.4e1 * ((t10791 + (t10554 + t11440) * t9369 + t10287) * t10137 + (t9195 + t10365) * t10163 - t9369 * t10554 - t10349 + t11291 / 0.2e1 - t9460 / 0.2e1 - t9459 / 0.2e1 - t9508 / 0.2e1 + t10626 / 0.2e1 - t10904 / 0.2e1 + t9092 / 0.2e1) * t11093 + t9204 * t11175 + (-t10314 * t11052 + t9174) * t10163 - t9366 * t11142 - 0.2e1 * t10358 - t8904 * t11148 + t9204;
t8759 = (t9169 * t10163 - 0.4e1 * t10532 * t10460 + (t10315 * t11050 + 0.2e1 * t11233 + 0.2e1 * t11264) * t10162) * t10149 + 0.4e1 * ((t10792 + (t10557 + t11441) * t9367 + t10288) * t10137 + (t9194 + t10366) * t10163 - t9367 * t10557 - t10346 + t11292 / 0.2e1 - t9458 / 0.2e1 - t9457 / 0.2e1 - t9507 / 0.2e1 + t10627 / 0.2e1 - t10905 / 0.2e1 + t9091 / 0.2e1) * t11099 + t9203 * t11176 + (-t10315 * t11052 + t9170) * t10163 - t9364 * t11144 - 0.2e1 * t10359 - t8903 * t11150 + t9203;
t8758 = (t9171 * t10163 - 0.4e1 * t10533 * t10461 + (t10316 * t11050 + 0.2e1 * t11252 + 0.2e1 * t11270) * t10162) * t10145 + 0.4e1 * ((t10793 + (t10555 + t11442) * t9368 + t10289) * t10137 + (t9193 + t10367) * t10163 - t9368 * t10555 - t10347 + t11293 / 0.2e1 - t9456 / 0.2e1 - t9455 / 0.2e1 - t9506 / 0.2e1 + t10628 / 0.2e1 - t10906 / 0.2e1 + t9090 / 0.2e1) * t11105 + t9202 * t11177 + (-t10316 * t11052 + t9172) * t10163 - t9365 * t11146 - 0.2e1 * t10360 - t8902 * t11152 + t9202;
t8757 = (t9147 * t10163 - 0.4e1 * t10534 * t10462 + (t10317 * t11050 + 0.2e1 * t11273 + 0.2e1 * t11279) * t10162) * t10139 + 0.4e1 * ((t10794 + (t10560 - t11443) * t9318 + t10286) * t10137 + (t9183 + t10368) * t10163 - t9318 * t10560 - t10348 + t11294 / 0.2e1 - t9454 / 0.2e1 - t9453 / 0.2e1 - t9505 / 0.2e1 + t10625 / 0.2e1 + t10907 / 0.2e1 - t9089 / 0.2e1) * t11113 + t9189 * t11178 + (-t10317 * t11052 + t9148) * t10163 - t9317 * t11154 - 0.2e1 * t10361 - t8892 * t11156 + t9189;
t8752 = ((t11711 + t8897) * t10163 - t11728) * t10201 + t10192 * t11547;
t8751 = ((-t11711 + t8898) * t10163 + t11728) * t10192 + t10201 * t11547;
t8750 = ((t11713 + t8893) * t10163 - t11729) * t10198 + t10189 * t11548;
t8749 = ((-t11713 + t8894) * t10163 + t11729) * t10189 + t10198 * t11548;
t8748 = ((t11715 + t8895) * t10163 - t11730) * t10195 + t10186 * t11549;
t8747 = ((-t11715 + t8896) * t10163 + t11730) * t10186 + t10195 * t11549;
t8746 = ((t11718 + t8889) * t10163 - t11731) * t10179 + t10176 * t11550;
t8745 = ((-t11718 + t8890) * t10163 + t11731) * t10176 + t10179 * t11550;
t1 = [(t11392 * t9023 + t11394 * t9022 + t11396 * t9021 + t11398 * t9032) * MDP(1) + (t11373 * t9494 + t11376 * t9492 + t11379 * t9496 + t11382 * t9490) * MDP(2) + (t11372 * t9494 + t11375 * t9492 + t11378 * t9496 + t11381 * t9490) * MDP(3) + ((-t10606 * t9475 + t11392 * t8951) * t10193 + (-t10608 * t9473 + t11394 * t8949) * t10190 + (-t10610 * t9471 + t11396 * t8950) * t10187 + (-t10615 * t9469 + t11398 * t8971) * t10177) * t11447 + (t11030 * t8935 + t11034 * t8934 + t11038 * t8933 + t11042 * t8936 + t11401 * t9247 + t11403 * t9246 + t11405 * t9245 + t11407 * t9238) * t11446 + (t11030 * t8852 + t11034 * t8848 + t11038 * t8850 + t11042 * t8846 - t11401 * t8991 - t11403 * t8989 - t11405 * t8988 - t11407 * t8996) * t11445 + (t11031 * t8851 + t11035 * t8847 + t11039 * t8849 + t11043 * t8845 + t11401 * t8990 + t11403 * t8987 + t11405 * t8986 + t11407 * t8995) * t11444 + (t8854 * t11407 + t8858 * t11405 + t8859 * t11403 + t8860 * t11401 + (t11392 * t8860 + t11394 * t8859 + t11396 * t8858 + t11398 * t8854) * t10163) * MDP(8) + (t11392 * t8800 + t11394 * t8799 + t11396 * t8798 + t11398 * t8794 + t11401 * t8929 + t11403 * t8927 + t11405 * t8925 + t11407 * t8931) * MDP(9) + (t11392 * t8797 + t11394 * t8796 + t11396 * t8795 + t11398 * t8793 + t11401 * t8930 + t11403 * t8928 + t11405 * t8926 + t11407 * t8932) * MDP(10) + (t8761 * t11398 + t8762 * t11394 + t8763 * t11396 + t8764 * t11392 + t8781 * t11407 + t8782 * t11405 + t8783 * t11403 + t8784 * t11401 + (-t11415 * t9080 - t11417 * t9079 - t11419 * t9078 - t11423 * t9077) * t11140) * MDP(11) + (t8757 * t11398 + t8758 * t11396 + t8759 * t11394 + t8760 * t11392 + t8805 * t11407 + t8806 * t11405 + t8807 * t11403 + t8808 * t11401 + (-t11415 * t9072 - t11417 * t9071 - t11419 * t9070 - t11423 * t9069) * t11140) * MDP(12) + (t8765 * t11398 + t8767 * t11396 + t8769 * t11394 + t8771 * t11392 + t8826 * t11407 + t8828 * t11405 + t8830 * t11403 + t8832 * t11401 + (-t11415 * t8822 - t11417 * t8821 - t11419 * t8819 - t11423 * t8817) * t11140) * MDP(13) + (t8766 * t11398 + t8768 * t11396 + t8770 * t11394 + t8772 * t11392 + t8825 * t11407 + t8827 * t11405 + t8829 * t11403 + t8831 * t11401 + (-t11415 * t8823 - t11417 * t8824 - t11419 * t8820 - t11423 * t8818) * t11140) * MDP(14) + (t8835 * t11031 + t9475 * t10463 + t8837 * t11035 + t9473 * t10464 + t8836 * t11039 + t9471 * t10465 + t8833 * t11043 + t9469 * t10466 + (-t11415 * t8841 - t11417 * t8839 - t11419 * t8840 - t11423 * t8834) * t10237) * t11307 + (t8746 * t11398 + t8748 * t11396 + t8750 * t11394 + t8752 * t11392 + t8773 * t11407 + t8775 * t11405 + t8777 * t11403 + t8779 * t11401 + (-t11415 * t8791 - t11417 * t8789 - t11419 * t8787 - t11423 * t8785) * t11140) * MDP(16) + (t8745 * t11398 + t8747 * t11396 + t8749 * t11394 + t8751 * t11392 + t8774 * t11407 + t8776 * t11405 + t8778 * t11403 + t8780 * t11401 + (-t11415 * t8792 - t11417 * t8790 - t11419 * t8788 - t11423 * t8786) * t11140) * MDP(17) + t9804 * MDP(19) - t9803 * MDP(20) + t11448 * MDP(21); (t11393 * t9023 + t11395 * t9022 + t11397 * t9021 + t11399 * t9032) * MDP(1) + (t11373 * t9493 + t11376 * t9491 + t11379 * t9495 + t11382 * t9489) * MDP(2) + (t11372 * t9493 + t11375 * t9491 + t11378 * t9495 + t11381 * t9489) * MDP(3) + ((-t10606 * t9476 + t11393 * t8951) * t10193 + (-t10608 * t9474 + t11395 * t8949) * t10190 + (-t10610 * t9472 + t11397 * t8950) * t10187 + (-t10615 * t9470 + t11399 * t8971) * t10177) * t11447 + (t11032 * t8935 + t11036 * t8934 + t11040 * t8933 + t11044 * t8936 + t11400 * t9247 + t11402 * t9246 + t11404 * t9245 + t11406 * t9238) * t11446 + (t11032 * t8852 + t11036 * t8848 + t11040 * t8850 + t11044 * t8846 - t11400 * t8991 - t11402 * t8989 - t11404 * t8988 - t11406 * t8996) * t11445 + (t11033 * t8851 + t11037 * t8847 + t11041 * t8849 + t11045 * t8845 + t11400 * t8990 + t11402 * t8987 + t11404 * t8986 + t11406 * t8995) * t11444 + (t8854 * t11406 + t8858 * t11404 + t8859 * t11402 + t8860 * t11400 + (t11393 * t8860 + t11395 * t8859 + t11397 * t8858 + t11399 * t8854) * t10163) * MDP(8) + (t11393 * t8800 + t11395 * t8799 + t11397 * t8798 + t11399 * t8794 + t11400 * t8929 + t11402 * t8927 + t11404 * t8925 + t11406 * t8931) * MDP(9) + (t11393 * t8797 + t11395 * t8796 + t11397 * t8795 + t11399 * t8793 + t11400 * t8930 + t11402 * t8928 + t11404 * t8926 + t11406 * t8932) * MDP(10) + (t8761 * t11399 + t8762 * t11395 + t8763 * t11397 + t8764 * t11393 + t8781 * t11406 + t8782 * t11404 + t8783 * t11402 + t8784 * t11400 + (-t11409 * t9080 - t11411 * t9079 - t11413 * t9078 - t11421 * t9077) * t11140) * MDP(11) + (t8757 * t11399 + t8758 * t11397 + t8759 * t11395 + t8760 * t11393 + t8805 * t11406 + t8806 * t11404 + t8807 * t11402 + t8808 * t11400 + (-t11409 * t9072 - t11411 * t9071 - t11413 * t9070 - t11421 * t9069) * t11140) * MDP(12) + (t8765 * t11399 + t8767 * t11397 + t8769 * t11395 + t8771 * t11393 + t8826 * t11406 + t8828 * t11404 + t8830 * t11402 + t8832 * t11400 + (-t11409 * t8822 - t11411 * t8821 - t11413 * t8819 - t11421 * t8817) * t11140) * MDP(13) + (t8766 * t11399 + t8768 * t11397 + t8770 * t11395 + t8772 * t11393 + t8825 * t11406 + t8827 * t11404 + t8829 * t11402 + t8831 * t11400 + (-t11409 * t8823 - t11411 * t8824 - t11413 * t8820 - t11421 * t8818) * t11140) * MDP(14) + (t8835 * t11033 + t9476 * t10463 + t8837 * t11037 + t9474 * t10464 + t8836 * t11041 + t9472 * t10465 + t8833 * t11045 + t9470 * t10466 + (-t11409 * t8841 - t11411 * t8839 - t11413 * t8840 - t11421 * t8834) * t10237) * t11307 + (t8746 * t11399 + t8748 * t11397 + t8750 * t11395 + t8752 * t11393 + t8773 * t11406 + t8775 * t11404 + t8777 * t11402 + t8779 * t11400 + (-t11409 * t8791 - t11411 * t8789 - t11413 * t8787 - t11421 * t8785) * t11140) * MDP(16) + (t8745 * t11399 + t8747 * t11397 + t8749 * t11395 + t8751 * t11393 + t8774 * t11406 + t8776 * t11404 + t8778 * t11402 + t8780 * t11400 + (-t11409 * t8792 - t11411 * t8790 - t11413 * t8788 - t11421 * t8786) * t11140) * MDP(17) + t9803 * MDP(19) + t9804 * MDP(20) + t11449 * MDP(21); (t11374 * t9022 + t11377 * t9021 + t11380 * t9023 + t11383 * t9032) * MDP(1) + (t11373 * t9645 + t11376 * t9644 + t11379 * t9646 + t11382 * t9641) * MDP(2) + (t11372 * t9645 + t11375 * t9644 + t11378 * t9646 + t11381 * t9641) * MDP(3) + ((t10817 * t11384 + t11380 * t8951) * t10193 + (t10819 * t11385 + t11374 * t8949) * t10190 + (t10821 * t11386 + t11377 * t8950) * t10187 + (-t10841 * t11387 + t11383 * t8971) * t10177) * t11447 + (t11022 * t8934 + t11024 * t8933 + t11026 * t8935 + t11028 * t8936 - t11384 * t9247 - t11385 * t9246 - t11386 * t9245 + t11387 * t9238) * t11446 + (t11022 * t8848 + t11024 * t8850 + t11026 * t8852 + t11028 * t8846 + t11384 * t8991 + t11385 * t8989 + t11386 * t8988 - t11387 * t8996) * t11445 + (t11023 * t8847 + t11025 * t8849 + t11027 * t8851 + t11029 * t8845 - t11384 * t8990 - t11385 * t8987 - t11386 * t8986 + t11387 * t8995) * t11444 + (t8854 * t11387 - t8858 * t11386 - t8859 * t11385 - t8860 * t11384 + (t11374 * t8859 + t11377 * t8858 + t11380 * t8860 + t11383 * t8854) * t10163) * MDP(8) + (t11374 * t8799 + t11377 * t8798 + t11380 * t8800 + t11383 * t8794 - t11384 * t8929 - t11385 * t8927 - t11386 * t8925 + t11387 * t8931) * MDP(9) + (t11374 * t8796 + t11377 * t8795 + t11380 * t8797 + t11383 * t8793 - t11384 * t8930 - t11385 * t8928 - t11386 * t8926 + t11387 * t8932) * MDP(10) + (t8761 * t11383 + t8762 * t11374 + t8763 * t11377 + t8764 * t11380 + t8781 * t11387 - t8782 * t11386 - t8783 * t11385 - t8784 * t11384 + (t11388 * t9080 + t11389 * t9079 + t11390 * t9078 + t11391 * t9077) * t10237) * MDP(11) + (t8757 * t11383 + t8758 * t11377 + t8759 * t11374 + t8760 * t11380 + t8805 * t11387 - t8806 * t11386 - t8807 * t11385 - t8808 * t11384 + (t11388 * t9072 + t11389 * t9071 + t11390 * t9070 + t11391 * t9069) * t10237) * MDP(12) + (t8765 * t11383 + t8767 * t11377 + t8769 * t11374 + t8771 * t11380 + t8826 * t11387 - t8828 * t11386 - t8830 * t11385 - t8832 * t11384 + (t11388 * t8822 + t11389 * t8821 + t11390 * t8819 + t11391 * t8817) * t10237) * MDP(13) + (t8766 * t11383 + t8768 * t11377 + t8770 * t11374 + t8772 * t11380 + t8825 * t11387 - t8827 * t11386 - t8829 * t11385 - t8831 * t11384 + (t11388 * t8823 + t11389 * t8824 + t11390 * t8820 + t11391 * t8818) * t10237) * MDP(14) + ((t11388 * t8841 + t11389 * t8839 + t11390 * t8840 + t11391 * t8834) * t10237 + (-t10612 * t11384 - t10613 * t11385 - t10614 * t11386 + t10617 * t11387 + t11023 * t8837 + t11025 * t8836 + t11027 * t8835 + t11029 * t8833) * t10162) * MDP(15) + (t8746 * t11383 + t8748 * t11377 + t8750 * t11374 + t8752 * t11380 + t8773 * t11387 - t8775 * t11386 - t8777 * t11385 - t8779 * t11384 + (t11388 * t8791 + t11389 * t8789 + t11390 * t8787 + t11391 * t8785) * t10237) * MDP(16) + (t8745 * t11383 + t8747 * t11377 + t8749 * t11374 + t8751 * t11380 + t8774 * t11387 - t8776 * t11386 - t8778 * t11385 - t8780 * t11384 + (t11388 * t8792 + t11389 * t8790 + t11390 * t8788 + t11391 * t8786) * t10237) * MDP(17) + (t10183 - g(3)) * MDP(21); (t11424 * t9023 + t11425 * t9022 + t11426 * t9021 + t11427 * t9032) * MDP(1) + (t11424 * t9719 + t11425 * t9718 + t11426 * t9717 + t11427 * t9714) * MDP(2) + (t11424 * t9722 + t11425 * t9721 + t11426 * t9720 + t11427 * t9715) * MDP(3) + ((-t10817 * t11429 + t11424 * t8951) * t10193 + (-t10819 * t11430 + t11425 * t8949) * t10190 + (-t10821 * t11428 + t11426 * t8950) * t10187 + (-t10841 * t11431 + t11427 * t8971) * t10177) * t11447 + (t11046 * t8935 + t11047 * t8934 + t11048 * t8933 + t11049 * t8936 + t11428 * t9245 + t11429 * t9247 + t11430 * t9246 + t11431 * t9238) * t11446 + (t11046 * t8852 + t11047 * t8848 + t11048 * t8850 + t11049 * t8846 - t11428 * t8988 - t11429 * t8991 - t11430 * t8989 - t11431 * t8996) * t11445 + (-0.2e1 * t11424 * t8851 - 0.2e1 * t11425 * t8847 - 0.2e1 * t11426 * t8849 - 0.2e1 * t11427 * t8845 + t11428 * t8986 + t11429 * t8990 + t11430 * t8987 + t11431 * t8995) * t11444 + (t8854 * t11431 + t8858 * t11428 + t8859 * t11430 + t8860 * t11429 + (t11424 * t8860 + t11425 * t8859 + t11426 * t8858 + t11427 * t8854) * t10163) * MDP(8) + (t11424 * t8800 + t11425 * t8799 + t11426 * t8798 + t11427 * t8794 + t11428 * t8925 + t11429 * t8929 + t11430 * t8927 + t11431 * t8931) * MDP(9) + (t11424 * t8797 + t11425 * t8796 + t11426 * t8795 + t11427 * t8793 + t11428 * t8926 + t11429 * t8930 + t11430 * t8928 + t11431 * t8932) * MDP(10) + (t11424 * t8764 + t11425 * t8762 + t11426 * t8763 + t11427 * t8761 + t11428 * t8782 + t11429 * t8784 + t11430 * t8783 + t11431 * t8781 - t9413 * t9077 + t9414 * t9078 + t9415 * t9079 + t9416 * t9080) * MDP(11) + (t11424 * t8760 + t11425 * t8759 + t11426 * t8758 + t11427 * t8757 + t11428 * t8806 + t11429 * t8808 + t11430 * t8807 + t11431 * t8805 - t9413 * t9069 + t9414 * t9070 + t9415 * t9071 + t9416 * t9072) * MDP(12) + (t11424 * t8771 + t11425 * t8769 + t11426 * t8767 + t11427 * t8765 + t11428 * t8828 + t11429 * t8832 + t11430 * t8830 + t11431 * t8826 - t9413 * t8817 + t9414 * t8819 + t9415 * t8821 + t9416 * t8822) * MDP(13) + (t11424 * t8772 + t11425 * t8770 + t11426 * t8768 + t11427 * t8766 + t11428 * t8827 + t11429 * t8831 + t11430 * t8829 + t11431 * t8825 - t9413 * t8818 + t9414 * t8820 + t9416 * t8823 + t9415 * t8824) * MDP(14) + (-t9413 * t8834 + t9415 * t8839 + t9414 * t8840 + t9416 * t8841 + ((t11262 * t11430 * t9191 - 0.2e1 * t8837 * t9423) * t9552 + (t11268 * t11428 * t9190 - 0.2e1 * t8836 * t9422) * t9549 + (t11256 * t11429 * t9192 - 0.2e1 * t8835 * t9424) * t9546 + (t11277 * t11431 * t9182 - 0.2e1 * t8833 * t9421) * t9534) * t10162) * MDP(15) + (t11424 * t8752 + t11425 * t8750 + t11426 * t8748 + t11427 * t8746 + t11428 * t8775 + t11429 * t8779 + t11430 * t8777 + t11431 * t8773 - t9413 * t8785 + t9414 * t8787 + t9415 * t8789 + t9416 * t8791) * MDP(16) + (t11424 * t8751 + t11425 * t8749 + t11426 * t8747 + t11427 * t8745 + t11428 * t8776 + t11429 * t8780 + t11430 * t8778 + t11431 * t8774 - t9413 * t8786 + t9414 * t8788 + t9415 * t8790 + t9416 * t8792) * MDP(17) + t10182 * MDP(18) + (-t10129 * t11448 + t10130 * t11449) * MDP(19) + (-t10129 * t11449 - t10130 * t11448) * MDP(20);];
tauX  = t1;
