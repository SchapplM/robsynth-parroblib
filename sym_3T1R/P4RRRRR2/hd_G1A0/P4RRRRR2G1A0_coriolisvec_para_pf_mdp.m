% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [17x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P4RRRRR2G1A0_convert_par2_MPV_fixb.m

% Output:
% taucX [4x1]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:26
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4RRRRR2G1A0_coriolisvec_para_pf_mdp(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1),zeros(17,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_mdp: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_mdp: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_mdp: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_mdp: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_mdp: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_mdp: Koppelpunkt has to be [4x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [17 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_mdp: MDP has to be [17x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 17:26:35
% EndTime: 2020-08-07 17:26:53
% DurationCPUTime: 19.28s
% Computational Cost: add. (86656->688), mult. (142006->1262), div. (32316->33), fcn. (108688->66), ass. (0->528)
t3973 = xP(4);
t3913 = sin(t3973);
t3914 = cos(t3973);
t3974 = koppelP(4,2);
t3978 = koppelP(4,1);
t3849 = -t3913 * t3974 + t3914 * t3978;
t3969 = xDP(4);
t3971 = xDP(2);
t3829 = t3849 * t3969 + t3971;
t4114 = qJ(1,4) + legFrame(4,3);
t3901 = sin(t4114);
t3954 = sin(qJ(2,4));
t3956 = cos(qJ(2,4));
t4054 = cos(t4114);
t3917 = 0.1e1 / t3954;
t3987 = 0.1e1 / pkin(1);
t4240 = t3917 * t3987;
t3805 = (t3956 * t3901 + t3954 * t4054) * t3829 * t4240;
t3845 = t3913 * t3978 + t3914 * t3974;
t3972 = xDP(1);
t4113 = -t3845 * t3969 + t3972;
t3809 = (-t3954 * t3901 + t3956 * t4054) * t4113 * t4240;
t3955 = cos(qJ(3,4));
t3920 = 0.1e1 / t3955;
t3953 = sin(qJ(3,4));
t4239 = t3920 * t3953;
t4134 = t3917 * t4239;
t3970 = xDP(3);
t4194 = t3970 * t3987;
t3853 = t4134 * t4194;
t3798 = t3809 + t3805 + t3853;
t3902 = qJ(2,4) + t4114;
t3885 = sin(t3902);
t3886 = cos(t3902);
t3951 = t3969 ^ 2;
t4025 = (-t3845 * t3885 - t3849 * t3886) * t3951;
t4299 = pkin(2) * t3955;
t3865 = t3956 * pkin(1) + t4299;
t4210 = t3953 * t3970;
t3789 = -t3865 * t4210 + ((-(t3829 * t3954 + t3956 * t4113) * t4299 - pkin(1) * t4113) * t4054 - ((t3829 * t3956 - t3954 * t4113) * t4299 + pkin(1) * t3829) * t3901) * t3955;
t3918 = 0.1e1 / t3954 ^ 2;
t3988 = 0.1e1 / pkin(1) ^ 2;
t4147 = t3789 * t3918 * t3988;
t3983 = 0.1e1 / pkin(2);
t4193 = t3983 * t3987;
t3921 = 0.1e1 / t3955 ^ 2;
t4242 = t3917 * t3921;
t4069 = t4193 * t4242;
t3785 = t3789 * t4069;
t3772 = t3785 + t3798;
t4277 = t3772 * t3920;
t3757 = t4147 * t4277;
t3919 = t3955 ^ 2;
t3991 = t3955 * t3919;
t3922 = 0.1e1 / t3991;
t3952 = t3970 ^ 2;
t4127 = t3952 * t4193;
t3858 = t3922 * t3917 * t4127;
t4192 = t3757 + t3858;
t4209 = t3955 * t3956;
t4303 = pkin(2) * t3919;
t4282 = (-pkin(1) * t3798 * t4209 - t3772 * t4303) * t3920;
t3733 = (-t3798 * t4282 + t4025) * t4240 + t4192;
t3797 = t3798 ^ 2;
t4324 = (MDP(12) * t3955 - MDP(13) * t3953 + MDP(5)) * (t3733 * t3956 + t3797 * t3954);
t3975 = koppelP(3,2);
t3979 = koppelP(3,1);
t3850 = -t3913 * t3975 + t3914 * t3979;
t3830 = t3850 * t3969 + t3971;
t4115 = qJ(1,3) + legFrame(3,3);
t3903 = sin(t4115);
t3958 = sin(qJ(2,3));
t3964 = cos(qJ(2,3));
t4055 = cos(t4115);
t3926 = 0.1e1 / t3958;
t4232 = t3926 * t3987;
t3806 = (t3964 * t3903 + t3958 * t4055) * t3830 * t4232;
t3846 = t3913 * t3979 + t3914 * t3975;
t4112 = -t3846 * t3969 + t3972;
t3811 = (-t3958 * t3903 + t3964 * t4055) * t4112 * t4232;
t3963 = cos(qJ(3,3));
t3937 = 0.1e1 / t3963;
t3957 = sin(qJ(3,3));
t4217 = t3937 * t3957;
t4132 = t3926 * t4217;
t3854 = t4132 * t4194;
t3803 = t3811 + t3806 + t3854;
t3906 = qJ(2,3) + t4115;
t3889 = sin(t3906);
t3892 = cos(t3906);
t4024 = (-t3846 * t3889 - t3850 * t3892) * t3951;
t4298 = pkin(2) * t3963;
t3868 = t3964 * pkin(1) + t4298;
t4206 = t3957 * t3970;
t3790 = -t3868 * t4206 + ((-(t3830 * t3958 + t3964 * t4112) * t4298 - pkin(1) * t4112) * t4055 - ((t3830 * t3964 - t3958 * t4112) * t4298 + pkin(1) * t3830) * t3903) * t3963;
t3927 = 0.1e1 / t3958 ^ 2;
t4146 = t3790 * t3927 * t3988;
t3938 = 0.1e1 / t3963 ^ 2;
t4234 = t3926 * t3938;
t4067 = t4193 * t4234;
t3786 = t3790 * t4067;
t3782 = t3786 + t3803;
t4271 = t3782 * t3937;
t3759 = t4146 * t4271;
t3936 = t3963 ^ 2;
t3997 = t3963 * t3936;
t3939 = 0.1e1 / t3997;
t3862 = t3939 * t3926 * t4127;
t4190 = t3759 + t3862;
t4199 = t3963 * t3964;
t4302 = pkin(2) * t3936;
t4280 = (-pkin(1) * t3803 * t4199 - t3782 * t4302) * t3937;
t3734 = (-t3803 * t4280 + t4024) * t4232 + t4190;
t3800 = t3803 ^ 2;
t4323 = (MDP(12) * t3963 - MDP(13) * t3957 + MDP(5)) * (t3734 * t3964 + t3800 * t3958);
t3976 = koppelP(2,2);
t3980 = koppelP(2,1);
t3851 = -t3913 * t3976 + t3914 * t3980;
t3831 = t3851 * t3969 + t3971;
t4116 = qJ(1,2) + legFrame(2,3);
t3904 = sin(t4116);
t3960 = sin(qJ(2,2));
t3966 = cos(qJ(2,2));
t4056 = cos(t4116);
t3930 = 0.1e1 / t3960;
t4225 = t3930 * t3987;
t3807 = (t3966 * t3904 + t3960 * t4056) * t3831 * t4225;
t3847 = t3913 * t3980 + t3914 * t3976;
t4111 = -t3847 * t3969 + t3972;
t3812 = (-t3960 * t3904 + t3966 * t4056) * t4111 * t4225;
t3965 = cos(qJ(3,2));
t3942 = 0.1e1 / t3965;
t3959 = sin(qJ(3,2));
t4216 = t3942 * t3959;
t4130 = t3930 * t4216;
t3855 = t4130 * t4194;
t3804 = t3812 + t3807 + t3855;
t3907 = qJ(2,2) + t4116;
t3890 = sin(t3907);
t3893 = cos(t3907);
t4023 = (-t3847 * t3890 - t3851 * t3893) * t3951;
t4297 = pkin(2) * t3965;
t3869 = t3966 * pkin(1) + t4297;
t4203 = t3959 * t3970;
t3791 = -t3869 * t4203 + ((-(t3831 * t3960 + t3966 * t4111) * t4297 - pkin(1) * t4111) * t4056 - ((t3831 * t3966 - t3960 * t4111) * t4297 + pkin(1) * t3831) * t3904) * t3965;
t3931 = 0.1e1 / t3960 ^ 2;
t4145 = t3791 * t3931 * t3988;
t3943 = 0.1e1 / t3965 ^ 2;
t4227 = t3930 * t3943;
t4066 = t4193 * t4227;
t3787 = t3791 * t4066;
t3784 = t3787 + t3804;
t4268 = t3784 * t3942;
t3760 = t4145 * t4268;
t3941 = t3965 ^ 2;
t4000 = t3965 * t3941;
t3944 = 0.1e1 / t4000;
t3863 = t3944 * t3930 * t4127;
t4189 = t3760 + t3863;
t4198 = t3965 * t3966;
t4301 = pkin(2) * t3941;
t4279 = (-pkin(1) * t3804 * t4198 - t3784 * t4301) * t3942;
t3735 = (-t3804 * t4279 + t4023) * t4225 + t4189;
t3801 = t3804 ^ 2;
t4322 = (MDP(12) * t3965 - MDP(13) * t3959 + MDP(5)) * (t3735 * t3966 + t3801 * t3960);
t3977 = koppelP(1,2);
t3981 = koppelP(1,1);
t3852 = -t3913 * t3977 + t3914 * t3981;
t3832 = t3852 * t3969 + t3971;
t4117 = qJ(1,1) + legFrame(1,3);
t3905 = sin(t4117);
t3962 = sin(qJ(2,1));
t3968 = cos(qJ(2,1));
t4057 = cos(t4117);
t3934 = 0.1e1 / t3962;
t4218 = t3934 * t3987;
t3808 = (t3968 * t3905 + t4057 * t3962) * t3832 * t4218;
t3848 = t3913 * t3981 + t3914 * t3977;
t4110 = -t3848 * t3969 + t3972;
t3810 = (-t3962 * t3905 + t4057 * t3968) * t4110 * t4218;
t3967 = cos(qJ(3,1));
t3947 = 0.1e1 / t3967;
t3961 = sin(qJ(3,1));
t4215 = t3947 * t3961;
t4128 = t3934 * t4215;
t3856 = t4128 * t4194;
t3802 = t3810 + t3808 + t3856;
t3908 = qJ(2,1) + t4117;
t3891 = sin(t3908);
t3894 = cos(t3908);
t4022 = (-t3848 * t3891 - t3852 * t3894) * t3951;
t4296 = pkin(2) * t3967;
t3870 = t3968 * pkin(1) + t4296;
t4200 = t3961 * t3970;
t3792 = -t3870 * t4200 + ((-(t3832 * t3962 + t3968 * t4110) * t4296 - pkin(1) * t4110) * t4057 - ((t3832 * t3968 - t3962 * t4110) * t4296 + pkin(1) * t3832) * t3905) * t3967;
t3935 = 0.1e1 / t3962 ^ 2;
t4144 = t3792 * t3935 * t3988;
t3948 = 0.1e1 / t3967 ^ 2;
t4220 = t3934 * t3948;
t4065 = t4193 * t4220;
t3788 = t3792 * t4065;
t3780 = t3788 + t3802;
t4274 = t3780 * t3947;
t3758 = t4144 * t4274;
t3946 = t3967 ^ 2;
t4003 = t3967 * t3946;
t3949 = 0.1e1 / t4003;
t3864 = t3949 * t3934 * t4127;
t4191 = t3758 + t3864;
t4197 = t3967 * t3968;
t4300 = pkin(2) * t3946;
t4281 = (-pkin(1) * t3802 * t4197 - t3780 * t4300) * t3947;
t3736 = (-t3802 * t4281 + t4022) * t4218 + t4191;
t3799 = t3802 ^ 2;
t4321 = (MDP(12) * t3967 - MDP(13) * t3961 + MDP(5)) * (t3736 * t3968 + t3799 * t3962);
t3916 = t3953 ^ 2;
t3915 = t3953 * t3916;
t3923 = 0.1e1 / t3919 ^ 2;
t4320 = t3915 * t3923;
t4319 = t3918 * t3956;
t3925 = t3957 ^ 2;
t3924 = t3957 * t3925;
t3940 = 0.1e1 / t3936 ^ 2;
t4318 = t3924 * t3940;
t4317 = t3927 * t3964;
t3929 = t3959 ^ 2;
t3928 = t3959 * t3929;
t3945 = 0.1e1 / t3941 ^ 2;
t4316 = t3928 * t3945;
t4315 = t3931 * t3966;
t3933 = t3961 ^ 2;
t3932 = t3961 * t3933;
t3950 = 0.1e1 / t3946 ^ 2;
t4314 = t3932 * t3950;
t4313 = t3935 * t3968;
t4308 = 0.2e1 * pkin(1);
t4307 = pkin(1) * t3901;
t4306 = pkin(1) * t3903;
t4305 = pkin(1) * t3904;
t4304 = pkin(1) * t3905;
t4295 = MDP(9) * t3952;
t4286 = t3733 * t3917;
t4285 = t3734 * t3926;
t4284 = t3735 * t3930;
t4283 = t3736 * t3934;
t4278 = (0.2e1 * t3809 + 0.2e1 * t3805 + 0.2e1 * t3853 + t3785) * t3789;
t4276 = t3772 * t3953;
t4275 = (0.2e1 * t3810 + 0.2e1 * t3808 + 0.2e1 * t3856 + t3788) * t3792;
t4273 = t3780 * t3961;
t4272 = (0.2e1 * t3811 + 0.2e1 * t3806 + 0.2e1 * t3854 + t3786) * t3790;
t4270 = t3782 * t3957;
t4269 = (0.2e1 * t3812 + 0.2e1 * t3807 + 0.2e1 * t3855 + t3787) * t3791;
t4267 = t3784 * t3959;
t4266 = t3797 * t3956;
t4265 = t3799 * t3968;
t4264 = t3800 * t3964;
t4263 = t3801 * t3966;
t3887 = qJ(3,4) + t3902;
t3866 = sin(t3887);
t3888 = -qJ(3,4) + t3902;
t3867 = sin(t3888);
t3813 = -0.2e1 * t4307 + (-t3866 - t3867) * pkin(2);
t4262 = t3813 * t3845;
t3857 = 0.1e1 / (sin(qJ(2,4) + qJ(3,4)) + sin(qJ(2,4) - qJ(3,4)));
t4261 = t3813 * t3857;
t3814 = t4054 * t4308 + (cos(t3887) + cos(t3888)) * pkin(2);
t4260 = t3814 * t3849;
t4259 = t3814 * t3857;
t3895 = qJ(3,3) + t3906;
t3872 = sin(t3895);
t3896 = -qJ(3,3) + t3906;
t3873 = sin(t3896);
t3815 = -0.2e1 * t4306 + (-t3872 - t3873) * pkin(2);
t4258 = t3815 * t3846;
t3859 = 0.1e1 / (sin(qJ(2,3) + qJ(3,3)) + sin(qJ(2,3) - qJ(3,3)));
t4257 = t3815 * t3859;
t3897 = qJ(3,2) + t3907;
t3874 = sin(t3897);
t3898 = -qJ(3,2) + t3907;
t3875 = sin(t3898);
t3816 = -0.2e1 * t4305 + (-t3874 - t3875) * pkin(2);
t4256 = t3816 * t3847;
t3860 = 0.1e1 / (sin(qJ(2,2) + qJ(3,2)) + sin(qJ(2,2) - qJ(3,2)));
t4255 = t3816 * t3860;
t3899 = qJ(3,1) + t3908;
t3876 = sin(t3899);
t3900 = -qJ(3,1) + t3908;
t3877 = sin(t3900);
t3817 = -0.2e1 * t4304 + (-t3876 - t3877) * pkin(2);
t4254 = t3817 * t3848;
t3861 = 0.1e1 / (sin(qJ(2,1) + qJ(3,1)) + sin(qJ(2,1) - qJ(3,1)));
t4253 = t3817 * t3861;
t3818 = t4055 * t4308 + (cos(t3895) + cos(t3896)) * pkin(2);
t4252 = t3818 * t3850;
t4251 = t3818 * t3859;
t3819 = t4056 * t4308 + (cos(t3897) + cos(t3898)) * pkin(2);
t4250 = t3819 * t3851;
t4249 = t3819 * t3860;
t3820 = t4057 * t4308 + (cos(t3899) + cos(t3900)) * pkin(2);
t4248 = t3820 * t3852;
t4247 = t3820 * t3861;
t4214 = t3951 * t3983;
t4143 = t3857 * t4214;
t4021 = (t4260 - t4262) * t4143;
t3982 = pkin(2) ^ 2;
t3769 = t3982 * t3772 * t3991;
t3984 = 0.1e1 / pkin(2) ^ 2;
t4041 = t3984 * t3923 * t4147;
t4126 = t3954 * t4210;
t4184 = t3956 * t4303;
t4029 = (t3769 + (t3772 * t4184 - t4126) * pkin(1)) * t4041;
t4196 = t3970 * t3983;
t4125 = t3956 * t4196;
t4068 = t3920 * t4125;
t4211 = t3953 * t3954;
t4093 = ((-pkin(1) * t3772 * t4211 + t3920 * t3970) * t3955 + pkin(1) * t4068) * t3922 * t4196;
t3986 = pkin(1) ^ 2;
t4171 = (t3769 + (t3785 / 0.2e1 + t3798) * t4184 * t4308 + (-pkin(1) * t3920 * t4126 + t3798 * t3986) * t3955) * t3983 * t3921;
t3716 = -t4029 + (t4021 + (-t4093 + t4025 + (-t4171 - t4282) * t3798) * t3917) * t3987 + t4192;
t4246 = t3916 * t3716;
t4245 = t3916 * t3922;
t4244 = t3917 * t3716;
t4243 = t3917 * t3920;
t4241 = t3917 * t3956;
t4142 = t3859 * t4214;
t4020 = (t4252 - t4258) * t4142;
t3774 = t3982 * t3782 * t3997;
t4040 = t3984 * t3940 * t4146;
t4124 = t3958 * t4206;
t4183 = t3964 * t4302;
t4027 = (t3774 + (t3782 * t4183 - t4124) * pkin(1)) * t4040;
t4121 = t3964 * t4196;
t4064 = t3937 * t4121;
t4207 = t3957 * t3958;
t4092 = ((-pkin(1) * t3782 * t4207 + t3937 * t3970) * t3963 + pkin(1) * t4064) * t3939 * t4196;
t4169 = (t3774 + (t3786 / 0.2e1 + t3803) * t4183 * t4308 + (-pkin(1) * t3937 * t4124 + t3803 * t3986) * t3963) * t3983 * t3938;
t3727 = -t4027 + (t4020 + (-t4092 + t4024 + (-t4169 - t4280) * t3803) * t3926) * t3987 + t4190;
t4238 = t3925 * t3727;
t4237 = t3925 * t3939;
t4236 = t3926 * t3727;
t4235 = t3926 * t3937;
t4233 = t3926 * t3964;
t4141 = t3860 * t4214;
t4019 = (t4250 - t4256) * t4141;
t3775 = t3982 * t3784 * t4000;
t4039 = t3984 * t3945 * t4145;
t4123 = t3960 * t4203;
t4182 = t3966 * t4301;
t4026 = (t3775 + (t3784 * t4182 - t4123) * pkin(1)) * t4039;
t4120 = t3966 * t4196;
t4063 = t3942 * t4120;
t4204 = t3959 * t3960;
t4091 = ((-pkin(1) * t3784 * t4204 + t3942 * t3970) * t3965 + pkin(1) * t4063) * t3944 * t4196;
t4168 = (t3775 + (t3787 / 0.2e1 + t3804) * t4182 * t4308 + (-pkin(1) * t3942 * t4123 + t3804 * t3986) * t3965) * t3983 * t3943;
t3729 = -t4026 + (t4019 + (-t4091 + t4023 + (-t4168 - t4279) * t3804) * t3930) * t3987 + t4189;
t4231 = t3929 * t3729;
t4230 = t3929 * t3944;
t4229 = t3930 * t3729;
t4228 = t3930 * t3942;
t4226 = t3930 * t3966;
t4140 = t3861 * t4214;
t4018 = (t4248 - t4254) * t4140;
t3773 = t3982 * t3780 * t4003;
t4038 = t3984 * t3950 * t4144;
t4122 = t3962 * t4200;
t4181 = t3968 * t4300;
t4028 = (t3773 + (t3780 * t4181 - t4122) * pkin(1)) * t4038;
t4119 = t3968 * t4196;
t4062 = t3947 * t4119;
t4201 = t3961 * t3962;
t4090 = ((-pkin(1) * t3780 * t4201 + t3947 * t3970) * t3967 + pkin(1) * t4062) * t3949 * t4196;
t4170 = (t3773 + (t3788 / 0.2e1 + t3802) * t4181 * t4308 + (-pkin(1) * t3947 * t4122 + t3802 * t3986) * t3967) * t3983 * t3948;
t3731 = -t4028 + (t4018 + (-t4090 + t4022 + (-t4170 - t4281) * t3802) * t3934) * t3987 + t4191;
t4224 = t3933 * t3731;
t4223 = t3933 * t3949;
t4222 = t3934 * t3731;
t4221 = t3934 * t3947;
t4219 = t3934 * t3968;
t4213 = t3952 * t3984;
t4212 = t3953 * t3922;
t4208 = t3957 * t3939;
t4205 = t3959 * t3944;
t4202 = t3961 * t3949;
t4195 = t3970 * t3984;
t4188 = 2 * MDP(7);
t4187 = 2 * MDP(8);
t4186 = 4 * MDP(8);
t4185 = 0.2e1 * MDP(13);
t4180 = MDP(9) * t4213;
t4179 = t3857 * t4246;
t4178 = t3716 * t3953 * t3955;
t4177 = t3859 * t4238;
t4176 = t3727 * t3957 * t3963;
t4175 = t3860 * t4231;
t4174 = t3729 * t3959 * t3965;
t4173 = t3861 * t4224;
t4172 = t3731 * t3961 * t3967;
t4167 = t3921 * t4278;
t4166 = t3857 * t4276;
t3909 = t3919 - 0.1e1 / 0.2e1;
t4165 = t3909 * t4277;
t4164 = t3772 * t4243;
t4163 = t3917 * t4276;
t4162 = t3948 * t4275;
t4161 = t3861 * t4273;
t3912 = t3946 - 0.1e1 / 0.2e1;
t4160 = t3912 * t4274;
t4159 = t3780 * t4221;
t4158 = t3934 * t4273;
t4157 = t3938 * t4272;
t4156 = t3859 * t4270;
t3910 = t3936 - 0.1e1 / 0.2e1;
t4155 = t3910 * t4271;
t4154 = t3782 * t4235;
t4153 = t3926 * t4270;
t4152 = t3943 * t4269;
t4151 = t3860 * t4267;
t3911 = t3941 - 0.1e1 / 0.2e1;
t4150 = t3911 * t4268;
t4149 = t3784 * t4228;
t4148 = t3930 * t4267;
t4139 = t3865 * t4242;
t4138 = t3868 * t4234;
t4137 = t3869 * t4227;
t4136 = t3870 * t4220;
t4135 = t3916 * t4244;
t4133 = t3925 * t4236;
t4131 = t3929 * t4229;
t4129 = t3933 * t4222;
t4118 = t4213 / 0.2e1;
t4109 = t3920 + t4245;
t4108 = t3937 + t4237;
t4107 = t3942 + t4230;
t4106 = t3947 + t4223;
t4105 = t3857 * t4178;
t4104 = t3716 * t4139;
t4103 = t3917 * t4178;
t4102 = t3859 * t4176;
t4101 = t3727 * t4138;
t4100 = t3926 * t4176;
t4099 = t3860 * t4174;
t4098 = t3729 * t4137;
t4097 = t3930 * t4174;
t4096 = t3861 * t4172;
t4095 = t3731 * t4136;
t4094 = t3934 * t4172;
t4089 = t3917 * t4167;
t4088 = t4212 * t4278;
t4087 = t3857 * t4165;
t4086 = t3909 * t4164;
t4085 = t3909 * t4163;
t4084 = t3934 * t4162;
t4083 = t4202 * t4275;
t4082 = t3861 * t4160;
t4081 = t3912 * t4159;
t4080 = t3912 * t4158;
t4079 = t3926 * t4157;
t4078 = t4208 * t4272;
t4077 = t3859 * t4155;
t4076 = t3910 * t4154;
t4075 = t3910 * t4153;
t4074 = t3930 * t4152;
t4073 = t4205 * t4269;
t4072 = t3860 * t4150;
t4071 = t3911 * t4149;
t4070 = t3911 * t4148;
t4061 = t3921 * t4118;
t4060 = t3938 * t4118;
t4059 = t3943 * t4118;
t4058 = t3948 * t4118;
t4053 = t3733 * t4241 + t3797;
t4052 = t3734 * t4233 + t3800;
t4051 = t3735 * t4226 + t3801;
t4050 = t3736 * t4219 + t3799;
t4049 = t4109 * t3917;
t4048 = t4108 * t3926;
t4047 = t4107 * t3930;
t4046 = t4106 * t3934;
t4045 = t4167 * t4319;
t4044 = t4162 * t4313;
t4043 = t4157 * t4317;
t4042 = t4152 * t4315;
t4036 = t3733 * t3954 - t4266;
t4034 = t3734 * t3958 - t4264;
t4032 = t3735 * t3960 - t4263;
t4030 = t3736 * t3962 - t4265;
t3715 = -t4029 / 0.2e1 + ((t4260 / 0.2e1 - t4262 / 0.2e1) * t4143 + (-t4093 / 0.2e1 + t4025 + (-t4282 - t4171 / 0.2e1) * t3798) * t3917) * t3987 + t4192;
t3717 = -t4029 + 0.2e1 * t3757 + 0.2e1 * t3858 + (t4021 + (-t4093 + 0.2e1 * t4025 + (-t4171 - 0.2e1 * t4282) * t3798) * t3917) * t3987;
t3753 = t4061 + (t3798 * t4069 + t4041 / 0.2e1) * t3789;
t4017 = (t3956 * t3717 * MDP(5) + (0.2e1 * t3715 * t4209 - 0.2e1 * t4068 * t4276 + (-0.2e1 * t3753 * t3955 - t4213 * t4245) * t3954) * MDP(12) + (-(t3715 * t3956 + t3954 * t4061) * t3953 + t3753 * t4211 - t3772 * t4125) * t4185) * t3917;
t3724 = -t4027 / 0.2e1 + ((t4252 / 0.2e1 - t4258 / 0.2e1) * t4142 + (-t4092 / 0.2e1 + t4024 + (-t4280 - t4169 / 0.2e1) * t3803) * t3926) * t3987 + t4190;
t3728 = -t4027 + 0.2e1 * t3759 + 0.2e1 * t3862 + (t4020 + (-t4092 + 0.2e1 * t4024 + (-t4169 - 0.2e1 * t4280) * t3803) * t3926) * t3987;
t3756 = t4060 + (t3803 * t4067 + t4040 / 0.2e1) * t3790;
t4016 = (t3964 * t3728 * MDP(5) + (0.2e1 * t3724 * t4199 - 0.2e1 * t4064 * t4270 + (-0.2e1 * t3756 * t3963 - t4213 * t4237) * t3958) * MDP(12) + (-(t3724 * t3964 + t3958 * t4060) * t3957 + t3756 * t4207 - t3782 * t4121) * t4185) * t3926;
t3725 = -t4026 / 0.2e1 + ((t4250 / 0.2e1 - t4256 / 0.2e1) * t4141 + (-t4091 / 0.2e1 + t4023 + (-t4279 - t4168 / 0.2e1) * t3804) * t3930) * t3987 + t4189;
t3730 = -t4026 + 0.2e1 * t3760 + 0.2e1 * t3863 + (t4019 + (-t4091 + 0.2e1 * t4023 + (-t4168 - 0.2e1 * t4279) * t3804) * t3930) * t3987;
t3755 = t4059 + (t3804 * t4066 + t4039 / 0.2e1) * t3791;
t4015 = (t3966 * t3730 * MDP(5) + (0.2e1 * t3725 * t4198 - 0.2e1 * t4063 * t4267 + (-0.2e1 * t3755 * t3965 - t4213 * t4230) * t3960) * MDP(12) + (-(t3725 * t3966 + t3960 * t4059) * t3959 + t3755 * t4204 - t3784 * t4120) * t4185) * t3930;
t3726 = -t4028 / 0.2e1 + ((t4248 / 0.2e1 - t4254 / 0.2e1) * t4140 + (-t4090 / 0.2e1 + t4022 + (-t4281 - t4170 / 0.2e1) * t3802) * t3934) * t3987 + t4191;
t3732 = -t4028 + 0.2e1 * t3758 + 0.2e1 * t3864 + (t4018 + (-t4090 + 0.2e1 * t4022 + (-t4170 - 0.2e1 * t4281) * t3802) * t3934) * t3987;
t3754 = t4058 + (t3802 * t4065 + t4038 / 0.2e1) * t3792;
t4014 = (t3968 * t3732 * MDP(5) + (0.2e1 * t3726 * t4197 - 0.2e1 * t4062 * t4273 + (-0.2e1 * t3754 * t3967 - t4213 * t4223) * t3962) * MDP(12) + (-(t3726 * t3968 + t3962 * t4058) * t3961 + t3754 * t4201 - t3780 * t4119) * t4185) * t3934;
t4013 = -t3717 * MDP(6) + t4017;
t4012 = -t3728 * MDP(6) + t4016;
t4011 = -t3730 * MDP(6) + t4015;
t4010 = -t3732 * MDP(6) + t4014;
t4009 = -t4036 * MDP(6) + t4324;
t4008 = -t4034 * MDP(6) + t4323;
t4007 = -t4032 * MDP(6) + t4322;
t4006 = -t4030 * MDP(6) + t4321;
t3985 = t3983 / t3982;
t3881 = -t3973 + t3908;
t3880 = -t3973 + t3907;
t3879 = -t3973 + t3906;
t3871 = -t3973 + t3902;
t3824 = -t3977 * cos(t3881) + t3981 * sin(t3881);
t3823 = -t3976 * cos(t3880) + t3980 * sin(t3880);
t3822 = -t3975 * cos(t3879) + t3979 * sin(t3879);
t3821 = -t3974 * cos(t3871) + t3978 * sin(t3871);
t3796 = (t3848 * t3820 - 0.2e1 * t3852 * (t4304 + (t3877 / 0.2e1 + t3876 / 0.2e1) * pkin(2))) * t3861 * t4193;
t3795 = (t3847 * t3819 - 0.2e1 * t3851 * (t4305 + (t3875 / 0.2e1 + t3874 / 0.2e1) * pkin(2))) * t3860 * t4193;
t3794 = (t3846 * t3818 - 0.2e1 * t3850 * (t4306 + (t3873 / 0.2e1 + t3872 / 0.2e1) * pkin(2))) * t3859 * t4193;
t3793 = (t3845 * t3814 - 0.2e1 * t3849 * (t4307 + (t3867 / 0.2e1 + t3866 / 0.2e1) * pkin(2))) * t3857 * t4193;
t3778 = t3784 ^ 2;
t3777 = t3782 ^ 2;
t3776 = t3780 ^ 2;
t3770 = t3772 ^ 2;
t1 = [(-MDP(15) * t3914 + MDP(16) * t3913) * t3951 + t4010 * t3894 + t4011 * t3893 + t4012 * t3892 + t4013 * t3886 + (-t4259 * t4324 - t4251 * t4323 + (t4030 * t4247 + t4032 * t4249 + t4034 * t4251 + t4036 * t4259) * MDP(6) - t4249 * t4322 - t4247 * t4321) * t3983 + ((t3886 * t4286 + t3892 * t4285 + t3893 * t4284 + t3894 * t4283) * MDP(1) + (t3886 * t4244 + t3892 * t4236 + t3893 * t4229 + t3894 * t4222) * MDP(4) + (t3886 * t4135 + t3892 * t4133 + t3893 * t4131 + t3894 * t4129) * MDP(7) + (t3886 * t4103 + t3892 * t4100 + t3893 * t4097 + t3894 * t4094) * t4187 + ((-t3814 * t4166 - t3818 * t4156 - t3819 * t4151 - t3820 * t4161) * t4188 + (-t3814 * t4087 - t3818 * t4077 - t3819 * t4072 - t3820 * t4082) * t4186) * t4195 + ((-t4106 * t4247 - t4107 * t4249 - t4108 * t4251 - t4109 * t4259) * t3985 + (t3886 * t4049 + t3892 * t4048 + t3893 * t4047 + t3894 * t4046) * t3984) * t4295 + ((-t3716 * t4259 - t3727 * t4251 - t3729 * t4249 - t3731 * t4247) * MDP(4) + (-t3886 * t4089 - t3892 * t4079 - t3893 * t4074 - t3894 * t4084) * MDP(5) + (-t3886 * t4045 - t3892 * t4043 - t3893 * t4042 - t3894 * t4044) * MDP(6) + (-t3814 * t4179 - t3818 * t4177 - t3819 * t4175 - t3820 * t4173) * MDP(7) + (-t3814 * t4105 - t3818 * t4102 - t3819 * t4099 - t3820 * t4096) * t4187 + ((t3886 * t4163 + t3892 * t4153 + t3893 * t4148 + t3894 * t4158) * t4188 + (t3886 * t4086 + t3892 * t4076 + t3893 * t4071 + t3894 * t4081) * t4186) * t3970) * t3983) * t3987; (-MDP(15) * t3913 - MDP(16) * t3914) * t3951 + t4010 * t3891 + t4011 * t3890 + t4012 * t3889 + t4013 * t3885 + (t4006 * t4253 + t4007 * t4255 + t4008 * t4257 + t4009 * t4261) * t3983 + ((t3885 * t4286 + t3889 * t4285 + t3890 * t4284 + t3891 * t4283) * MDP(1) + (t3885 * t4244 + t3889 * t4236 + t3890 * t4229 + t3891 * t4222) * MDP(4) + (t3885 * t4135 + t3889 * t4133 + t3890 * t4131 + t3891 * t4129) * MDP(7) + (t3885 * t4103 + t3889 * t4100 + t3890 * t4097 + t3891 * t4094) * t4187 + ((t3813 * t4166 + t3815 * t4156 + t3816 * t4151 + t3817 * t4161) * t4188 + (t3813 * t4087 + t3815 * t4077 + t3816 * t4072 + t3817 * t4082) * t4186) * t4195 + ((t4106 * t4253 + t4107 * t4255 + t4108 * t4257 + t4109 * t4261) * t3985 + (t3885 * t4049 + t3889 * t4048 + t3890 * t4047 + t3891 * t4046) * t3984) * t4295 + ((t3716 * t4261 + t3727 * t4257 + t3729 * t4255 + t3731 * t4253) * MDP(4) + (-t3885 * t4089 - t3889 * t4079 - t3890 * t4074 - t3891 * t4084) * MDP(5) + (-t3885 * t4045 - t3889 * t4043 - t3890 * t4042 - t3891 * t4044) * MDP(6) + (t3813 * t4179 + t3815 * t4177 + t3816 * t4175 + t3817 * t4173) * MDP(7) + (t3813 * t4105 + t3815 * t4102 + t3816 * t4099 + t3817 * t4096) * t4187 + ((t3885 * t4163 + t3889 * t4153 + t3890 * t4148 + t3891 * t4158) * t4188 + (t3885 * t4086 + t3889 * t4076 + t3890 * t4071 + t3891 * t4081) * t4186) * t3970) * t3983) * t3987; (-t3717 * t4239 - t3728 * t4217 - t3730 * t4216 - t3732 * t4215) * MDP(6) + t4014 * t4215 + t4015 * t4216 + t4016 * t4217 + t4017 * t4239 + (t3923 * t3953 + t3940 * t3957 + t3945 * t3959 + t3950 * t3961) * t3985 * MDP(11) * t3952 + ((t3733 * t4134 + t3734 * t4132 + t3735 * t4130 + t3736 * t4128) * MDP(1) + (t3716 * t4134 + t3727 * t4132 + t3729 * t4130 + t3731 * t4128) * MDP(4) + (t3915 * t3716 * t4243 + t3924 * t3727 * t4235 + t3928 * t3729 * t4228 + t3932 * t3731 * t4221) * MDP(7) + (t4129 + t4131 + t4133 + t4135) * t4187 + ((-t3772 * t3916 * t4139 - t3780 * t3933 * t4136 - t3782 * t3925 * t4138 - t3784 * t3929 * t4137) * t4188 + (-t3865 * t3922 * t4085 - t3868 * t3939 * t4075 - t3869 * t3944 * t4070 - t3870 * t3949 * t4080) * t4186) * t4195 + (((-t3947 * t4314 - t4202) * t3934 * t3870 + (-t3942 * t4316 - t4205) * t3930 * t3869 + (-t3937 * t4318 - t4208) * t3926 * t3868 + (-t3920 * t4320 - t4212) * t3917 * t3865) * t3985 + ((t3948 * t3961 + t4314) * t3934 + (t3943 * t3959 + t4316) * t3930 + (t3938 * t3957 + t4318) * t3926 + (t3921 * t3953 + t4320) * t3917) * t3984) * t4295) * t3987 + ((-t3953 * t3770 - t3961 * t3776 - t3957 * t3777 - t3959 * t3778) * MDP(7) + (t3947 * t3776 * (-0.2e1 * t3946 + 0.1e1) + t3942 * t3778 * (-0.2e1 * t3941 + 0.1e1) + t3937 * t3777 * (-0.2e1 * t3936 + 0.1e1) + t3920 * t3770 * (-0.2e1 * t3919 + 0.1e1)) * MDP(8) + (t3716 * t4239 + t3727 * t4217 + t3729 * t4216 + t3731 * t4215) * MDP(9) + (t3716 + t3727 + t3729 + t3731) * MDP(10) + (-t4050 * MDP(12) * t4215 + (t4050 * MDP(13) * t3933 + (-t4050 * MDP(5) + (-t3799 * t4219 + t3736) * MDP(6)) * t3961) * t3948) * t3870 + (-t4051 * MDP(12) * t4216 + (t4051 * MDP(13) * t3929 + (-t4051 * MDP(5) + (-t3801 * t4226 + t3735) * MDP(6)) * t3959) * t3943) * t3869 + (-t4052 * MDP(12) * t4217 + (t4052 * MDP(13) * t3925 + (-t4052 * MDP(5) + (-t3800 * t4233 + t3734) * MDP(6)) * t3957) * t3938) * t3868 + (-t4053 * MDP(12) * t4239 + (t4053 * MDP(13) * t3916 + (-t4053 * MDP(5) + (-t3797 * t4241 + t3733) * MDP(6)) * t3953) * t3921) * t3865 + ((-t3920 * t3733 * t4211 - t3937 * t3734 * t4207 - t3942 * t3735 * t4204 - t3947 * t3736 * t4201 + t4215 * t4265 + t4216 * t4263 + t4217 * t4264 + t4239 * t4266) * MDP(12) + (-t4030 - t4032 - t4034 - t4036) * MDP(13)) * pkin(1) + ((-t3953 * t4104 - t3957 * t4101 - t3959 * t4098 - t3961 * t4095) * MDP(4) + (-t3917 * t4088 - t3926 * t4078 - t3930 * t4073 - t3934 * t4083) * MDP(5) + (-t4073 * t4315 - t4078 * t4317 - t4083 * t4313 - t4088 * t4319) * MDP(6) + (-t3915 * t4104 - t3924 * t4101 - t3928 * t4098 - t3932 * t4095) * MDP(7) + (-t3865 * t3920 * t4135 - t3868 * t3937 * t4133 - t3869 * t3942 * t4131 - t3870 * t3947 * t4129) * t4187 + ((t3916 * t4164 + t3925 * t4154 + t3929 * t4149 + t3933 * t4159) * t4188 + (t3921 * t4085 + t3938 * t4075 + t3943 * t4070 + t3948 * t4080) * t4186) * t3970) * t3987) * t3983; (t3716 * t3793 + t3727 * t3794 + t3729 * t3795 + t3731 * t3796) * MDP(4) + (t3793 * t4246 + t3794 * t4238 + t3795 * t4231 + t3796 * t4224) * MDP(7) + (t3793 * t4178 + t3794 * t4176 + t3795 * t4174 + t3796 * t4172) * t4187 + t4010 * t3824 + t4011 * t3823 + t4012 * t3822 + t4013 * t3821 + ((t3793 * t4276 + t3794 * t4270 + t3795 * t4267 + t3796 * t4273) * t4188 + (t3793 * t4165 + t3794 * t4155 + t3795 * t4150 + t3796 * t4160) * t4186) * t4196 + (t4109 * t3793 + t4108 * t3794 + t4107 * t3795 + t4106 * t3796) * t4180 + (t4009 * t3793 + t4008 * t3794 + t4007 * t3795 + t4006 * t3796) * pkin(1) + ((t3821 * t4286 + t3822 * t4285 + t3823 * t4284 + t3824 * t4283) * MDP(1) + (t3821 * t4244 + t3822 * t4236 + t3823 * t4229 + t3824 * t4222) * MDP(4) + (t3821 * t4135 + t3822 * t4133 + t3823 * t4131 + t3824 * t4129) * MDP(7) + (t3821 * t4103 + t3822 * t4100 + t3823 * t4097 + t3824 * t4094) * t4187 + (t3821 * t4049 + t3822 * t4048 + t3823 * t4047 + t3824 * t4046) * t4180 + ((-t3821 * t4089 - t3822 * t4079 - t3823 * t4074 - t3824 * t4084) * MDP(5) + (-t3821 * t4045 - t3822 * t4043 - t3823 * t4042 - t3824 * t4044) * MDP(6) + ((t3821 * t4163 + t3822 * t4153 + t3823 * t4148 + t3824 * t4158) * t4188 + (t3821 * t4086 + t3822 * t4076 + t3823 * t4071 + t3824 * t4081) * t4186) * t3970) * t3983) * t3987;];
taucX  = t1;
