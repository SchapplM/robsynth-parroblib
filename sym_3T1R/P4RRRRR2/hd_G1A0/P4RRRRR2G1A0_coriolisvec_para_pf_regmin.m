% Calculate minimal parameter regressor of vector of centrifugal and coriolis load for parallel robot
% P4RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tau_reg [4x17]
%   minimal parameter regressor of vector of coriolis and centrifugal joint torques
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:26
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = P4RRRRR2G1A0_coriolisvec_para_pf_regmin(xP, xDP, qJ, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_tauCreg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 17:25:30
% EndTime: 2020-08-07 17:25:45
% DurationCPUTime: 15.73s
% Computational Cost: add. (86621->701), mult. (141964->1317), div. (32316->33), fcn. (108688->66), ass. (0->565)
t1840 = qJ(1,4) + legFrame(4,3);
t1604 = qJ(2,4) + t1840;
t1589 = qJ(3,4) + t1604;
t1590 = -qJ(3,4) + t1604;
t1776 = cos(t1840);
t2035 = 2 * pkin(1);
t1516 = t1776 * t2035 + (cos(t1589) + cos(t1590)) * pkin(2);
t1675 = xP(4);
t1615 = sin(t1675);
t1616 = cos(t1675);
t1676 = koppelP(4,2);
t1680 = koppelP(4,1);
t1547 = t1615 * t1680 + t1616 * t1676;
t1551 = -t1615 * t1676 + t1616 * t1680;
t1559 = 0.1e1 / (sin(qJ(2,4) + qJ(3,4)) + sin(qJ(2,4) - qJ(3,4)));
t1568 = sin(t1589);
t1569 = sin(t1590);
t1685 = 0.1e1 / pkin(2);
t1689 = 1 / pkin(1);
t1927 = t1685 * t1689;
t1603 = sin(t1840);
t2034 = pkin(1) * t1603;
t1495 = (t1547 * t1516 - 0.2e1 * t1551 * (t2034 + (t1569 / 0.2e1 + t1568 / 0.2e1) * pkin(2))) * t1559 * t1927;
t2051 = 0.2e1 * t1495;
t1841 = qJ(1,3) + legFrame(3,3);
t1608 = qJ(2,3) + t1841;
t1597 = qJ(3,3) + t1608;
t1598 = -qJ(3,3) + t1608;
t1777 = cos(t1841);
t1520 = t1777 * t2035 + (cos(t1597) + cos(t1598)) * pkin(2);
t1677 = koppelP(3,2);
t1681 = koppelP(3,1);
t1548 = t1615 * t1681 + t1616 * t1677;
t1552 = -t1615 * t1677 + t1616 * t1681;
t1561 = 0.1e1 / (sin(qJ(2,3) + qJ(3,3)) + sin(qJ(2,3) - qJ(3,3)));
t1574 = sin(t1597);
t1575 = sin(t1598);
t1605 = sin(t1841);
t2033 = pkin(1) * t1605;
t1496 = (t1548 * t1520 - 0.2e1 * t1552 * (t2033 + (t1575 / 0.2e1 + t1574 / 0.2e1) * pkin(2))) * t1561 * t1927;
t2050 = 0.2e1 * t1496;
t1842 = qJ(1,2) + legFrame(2,3);
t1609 = qJ(2,2) + t1842;
t1599 = qJ(3,2) + t1609;
t1600 = -qJ(3,2) + t1609;
t1778 = cos(t1842);
t1521 = t1778 * t2035 + (cos(t1599) + cos(t1600)) * pkin(2);
t1678 = koppelP(2,2);
t1682 = koppelP(2,1);
t1549 = t1615 * t1682 + t1616 * t1678;
t1553 = -t1615 * t1678 + t1616 * t1682;
t1562 = 0.1e1 / (sin(qJ(2,2) + qJ(3,2)) + sin(qJ(2,2) - qJ(3,2)));
t1576 = sin(t1599);
t1577 = sin(t1600);
t1606 = sin(t1842);
t2032 = pkin(1) * t1606;
t1497 = (t1549 * t1521 - 0.2e1 * t1553 * (t2032 + (t1577 / 0.2e1 + t1576 / 0.2e1) * pkin(2))) * t1562 * t1927;
t2049 = 0.2e1 * t1497;
t1843 = qJ(1,1) + legFrame(1,3);
t1610 = qJ(2,1) + t1843;
t1601 = qJ(3,1) + t1610;
t1602 = -qJ(3,1) + t1610;
t1779 = cos(t1843);
t1522 = t1779 * t2035 + (cos(t1601) + cos(t1602)) * pkin(2);
t1679 = koppelP(1,2);
t1683 = koppelP(1,1);
t1550 = t1615 * t1683 + t1616 * t1679;
t1554 = -t1615 * t1679 + t1616 * t1683;
t1563 = 0.1e1 / (sin(qJ(2,1) + qJ(3,1)) + sin(qJ(2,1) - qJ(3,1)));
t1578 = sin(t1601);
t1579 = sin(t1602);
t1607 = sin(t1843);
t2031 = pkin(1) * t1607;
t1498 = (t1550 * t1522 - 0.2e1 * t1554 * (t2031 + (t1579 / 0.2e1 + t1578 / 0.2e1) * pkin(2))) * t1563 * t1927;
t2048 = 0.2e1 * t1498;
t1671 = xDP(4);
t1673 = xDP(2);
t1531 = t1551 * t1671 + t1673;
t1656 = sin(qJ(2,4));
t1658 = cos(qJ(2,4));
t1619 = 0.1e1 / t1656;
t1978 = t1619 * t1689;
t1507 = (t1658 * t1603 + t1656 * t1776) * t1531 * t1978;
t1674 = xDP(1);
t1835 = -t1547 * t1671 + t1674;
t1511 = (-t1656 * t1603 + t1658 * t1776) * t1835 * t1978;
t1657 = cos(qJ(3,4));
t1622 = 0.1e1 / t1657;
t1655 = sin(qJ(3,4));
t1977 = t1622 * t1655;
t1867 = t1619 * t1977;
t1672 = xDP(3);
t1928 = t1672 * t1689;
t1555 = t1867 * t1928;
t1500 = t1511 + t1507 + t1555;
t1587 = sin(t1604);
t1588 = cos(t1604);
t1653 = t1671 ^ 2;
t1727 = (-t1547 * t1587 - t1551 * t1588) * t1653;
t2026 = pkin(2) * t1657;
t1567 = t1658 * pkin(1) + t2026;
t1943 = t1655 * t1672;
t1491 = -t1567 * t1943 + ((-(t1531 * t1656 + t1658 * t1835) * t2026 - pkin(1) * t1835) * t1776 - ((t1531 * t1658 - t1656 * t1835) * t2026 + pkin(1) * t1531) * t1603) * t1657;
t1620 = 0.1e1 / t1656 ^ 2;
t1690 = 1 / pkin(1) ^ 2;
t1881 = t1491 * t1620 * t1690;
t1623 = 0.1e1 / t1657 ^ 2;
t1980 = t1619 * t1623;
t1791 = t1927 * t1980;
t1487 = t1491 * t1791;
t1474 = t1487 + t1500;
t2013 = t1474 * t1622;
t1459 = t1881 * t2013;
t1621 = t1657 ^ 2;
t1693 = t1657 * t1621;
t1624 = 0.1e1 / t1693;
t1654 = t1672 ^ 2;
t1857 = t1654 * t1927;
t1560 = t1624 * t1619 * t1857;
t1926 = t1459 + t1560;
t1942 = t1657 * t1658;
t2030 = pkin(2) * t1621;
t2018 = (-pkin(1) * t1500 * t1942 - t1474 * t2030) * t1622;
t1435 = (-t1500 * t2018 + t1727) * t1978 + t1926;
t1499 = t1500 ^ 2;
t1979 = t1619 * t1658;
t2047 = t1567 * (t1435 * t1979 + t1499);
t1532 = t1552 * t1671 + t1673;
t1660 = sin(qJ(2,3));
t1666 = cos(qJ(2,3));
t1628 = 0.1e1 / t1660;
t1969 = t1628 * t1689;
t1508 = (t1666 * t1605 + t1660 * t1777) * t1532 * t1969;
t1834 = -t1548 * t1671 + t1674;
t1513 = (-t1660 * t1605 + t1666 * t1777) * t1834 * t1969;
t1665 = cos(qJ(3,3));
t1639 = 0.1e1 / t1665;
t1659 = sin(qJ(3,3));
t1954 = t1639 * t1659;
t1864 = t1628 * t1954;
t1556 = t1864 * t1928;
t1505 = t1513 + t1508 + t1556;
t1591 = sin(t1608);
t1594 = cos(t1608);
t1726 = (-t1548 * t1591 - t1552 * t1594) * t1653;
t2025 = pkin(2) * t1665;
t1570 = t1666 * pkin(1) + t2025;
t1939 = t1659 * t1672;
t1492 = -t1570 * t1939 + ((-(t1532 * t1660 + t1666 * t1834) * t2025 - pkin(1) * t1834) * t1777 - ((t1532 * t1666 - t1660 * t1834) * t2025 + pkin(1) * t1532) * t1605) * t1665;
t1629 = 0.1e1 / t1660 ^ 2;
t1880 = t1492 * t1629 * t1690;
t1640 = 0.1e1 / t1665 ^ 2;
t1971 = t1628 * t1640;
t1789 = t1927 * t1971;
t1488 = t1492 * t1789;
t1484 = t1488 + t1505;
t2007 = t1484 * t1639;
t1461 = t1880 * t2007;
t1638 = t1665 ^ 2;
t1699 = t1665 * t1638;
t1641 = 0.1e1 / t1699;
t1564 = t1641 * t1628 * t1857;
t1924 = t1461 + t1564;
t1932 = t1665 * t1666;
t2029 = pkin(2) * t1638;
t2016 = (-pkin(1) * t1505 * t1932 - t1484 * t2029) * t1639;
t1436 = (-t1505 * t2016 + t1726) * t1969 + t1924;
t1502 = t1505 ^ 2;
t1970 = t1628 * t1666;
t2046 = t1570 * (t1436 * t1970 + t1502);
t1533 = t1553 * t1671 + t1673;
t1662 = sin(qJ(2,2));
t1668 = cos(qJ(2,2));
t1632 = 0.1e1 / t1662;
t1962 = t1632 * t1689;
t1509 = (t1668 * t1606 + t1662 * t1778) * t1533 * t1962;
t1833 = -t1549 * t1671 + t1674;
t1514 = (-t1662 * t1606 + t1668 * t1778) * t1833 * t1962;
t1667 = cos(qJ(3,2));
t1644 = 0.1e1 / t1667;
t1661 = sin(qJ(3,2));
t1952 = t1644 * t1661;
t1861 = t1632 * t1952;
t1557 = t1861 * t1928;
t1506 = t1514 + t1509 + t1557;
t1592 = sin(t1609);
t1595 = cos(t1609);
t1725 = (-t1549 * t1592 - t1553 * t1595) * t1653;
t2024 = pkin(2) * t1667;
t1571 = t1668 * pkin(1) + t2024;
t1936 = t1661 * t1672;
t1493 = -t1571 * t1936 + ((-(t1533 * t1662 + t1668 * t1833) * t2024 - pkin(1) * t1833) * t1778 - ((t1533 * t1668 - t1662 * t1833) * t2024 + pkin(1) * t1533) * t1606) * t1667;
t1633 = 0.1e1 / t1662 ^ 2;
t1879 = t1493 * t1633 * t1690;
t1645 = 0.1e1 / t1667 ^ 2;
t1964 = t1632 * t1645;
t1788 = t1927 * t1964;
t1489 = t1493 * t1788;
t1486 = t1489 + t1506;
t2004 = t1486 * t1644;
t1462 = t1879 * t2004;
t1643 = t1667 ^ 2;
t1702 = t1667 * t1643;
t1646 = 0.1e1 / t1702;
t1565 = t1646 * t1632 * t1857;
t1923 = t1462 + t1565;
t1931 = t1667 * t1668;
t2028 = pkin(2) * t1643;
t2015 = (-pkin(1) * t1506 * t1931 - t1486 * t2028) * t1644;
t1437 = (-t1506 * t2015 + t1725) * t1962 + t1923;
t1503 = t1506 ^ 2;
t1963 = t1632 * t1668;
t2045 = t1571 * (t1437 * t1963 + t1503);
t1534 = t1554 * t1671 + t1673;
t1664 = sin(qJ(2,1));
t1670 = cos(qJ(2,1));
t1636 = 0.1e1 / t1664;
t1955 = t1636 * t1689;
t1510 = (t1670 * t1607 + t1664 * t1779) * t1534 * t1955;
t1832 = -t1550 * t1671 + t1674;
t1512 = (-t1664 * t1607 + t1670 * t1779) * t1832 * t1955;
t1669 = cos(qJ(3,1));
t1649 = 0.1e1 / t1669;
t1663 = sin(qJ(3,1));
t1950 = t1649 * t1663;
t1858 = t1636 * t1950;
t1558 = t1858 * t1928;
t1504 = t1512 + t1510 + t1558;
t1593 = sin(t1610);
t1596 = cos(t1610);
t1724 = (-t1550 * t1593 - t1554 * t1596) * t1653;
t2023 = pkin(2) * t1669;
t1572 = t1670 * pkin(1) + t2023;
t1933 = t1663 * t1672;
t1494 = -t1572 * t1933 + ((-(t1534 * t1664 + t1670 * t1832) * t2023 - pkin(1) * t1832) * t1779 - ((t1534 * t1670 - t1664 * t1832) * t2023 + pkin(1) * t1534) * t1607) * t1669;
t1637 = 0.1e1 / t1664 ^ 2;
t1878 = t1494 * t1637 * t1690;
t1650 = 0.1e1 / t1669 ^ 2;
t1957 = t1636 * t1650;
t1787 = t1927 * t1957;
t1490 = t1494 * t1787;
t1482 = t1490 + t1504;
t2010 = t1482 * t1649;
t1460 = t1878 * t2010;
t1648 = t1669 ^ 2;
t1705 = t1669 * t1648;
t1651 = 0.1e1 / t1705;
t1566 = t1651 * t1636 * t1857;
t1925 = t1460 + t1566;
t1930 = t1669 * t1670;
t2027 = pkin(2) * t1648;
t2017 = (-pkin(1) * t1504 * t1930 - t1482 * t2027) * t1649;
t1438 = (-t1504 * t2017 + t1724) * t1955 + t1925;
t1501 = t1504 ^ 2;
t1956 = t1636 * t1670;
t2044 = t1572 * (t1438 * t1956 + t1501);
t1618 = t1655 ^ 2;
t1617 = t1655 * t1618;
t1625 = 0.1e1 / t1621 ^ 2;
t2043 = t1617 * t1625;
t2042 = t1620 * t1658;
t1627 = t1659 ^ 2;
t1626 = t1659 * t1627;
t1642 = 0.1e1 / t1638 ^ 2;
t2041 = t1626 * t1642;
t2040 = t1629 * t1666;
t1631 = t1661 ^ 2;
t1630 = t1661 * t1631;
t1647 = 0.1e1 / t1643 ^ 2;
t2039 = t1630 * t1647;
t2038 = t1633 * t1668;
t1635 = t1663 ^ 2;
t1634 = t1663 * t1635;
t1652 = 0.1e1 / t1648 ^ 2;
t2037 = t1634 * t1652;
t2036 = t1637 * t1670;
t2022 = t1435 * t1619;
t2021 = t1436 * t1628;
t2020 = t1437 * t1632;
t2019 = t1438 * t1636;
t2014 = (0.2e1 * t1511 + 0.2e1 * t1507 + 0.2e1 * t1555 + t1487) * t1491;
t2012 = t1474 * t1655;
t2011 = (0.2e1 * t1512 + 0.2e1 * t1510 + 0.2e1 * t1558 + t1490) * t1494;
t2009 = t1482 * t1663;
t2008 = (0.2e1 * t1513 + 0.2e1 * t1508 + 0.2e1 * t1556 + t1488) * t1492;
t2006 = t1484 * t1659;
t2005 = (0.2e1 * t1514 + 0.2e1 * t1509 + 0.2e1 * t1557 + t1489) * t1493;
t2003 = t1486 * t1661;
t1515 = -0.2e1 * t2034 + (-t1568 - t1569) * pkin(2);
t2002 = t1515 * t1547;
t2001 = t1515 * t1559;
t2000 = t1516 * t1551;
t1999 = t1516 * t1559;
t1517 = -0.2e1 * t2033 + (-t1574 - t1575) * pkin(2);
t1998 = t1517 * t1548;
t1997 = t1517 * t1561;
t1518 = -0.2e1 * t2032 + (-t1576 - t1577) * pkin(2);
t1996 = t1518 * t1549;
t1995 = t1518 * t1562;
t1519 = -0.2e1 * t2031 + (-t1578 - t1579) * pkin(2);
t1994 = t1519 * t1550;
t1993 = t1519 * t1563;
t1992 = t1520 * t1552;
t1991 = t1520 * t1561;
t1990 = t1521 * t1553;
t1989 = t1521 * t1562;
t1988 = t1522 * t1554;
t1987 = t1522 * t1563;
t1986 = t1615 * t1653;
t1985 = t1616 * t1653;
t1948 = t1653 * t1685;
t1877 = t1559 * t1948;
t1711 = (t2000 - t2002) * t1877;
t1684 = pkin(2) ^ 2;
t1471 = t1684 * t1474 * t1693;
t1686 = 0.1e1 / pkin(2) ^ 2;
t1755 = t1686 * t1625 * t1881;
t1855 = t1656 * t1943;
t1917 = t1658 * t2030;
t1743 = (t1471 + (t1474 * t1917 - t1855) * pkin(1)) * t1755;
t1929 = t1672 * t1685;
t1854 = t1658 * t1929;
t1790 = t1622 * t1854;
t1944 = t1655 * t1656;
t1815 = ((-pkin(1) * t1474 * t1944 + t1622 * t1672) * t1657 + pkin(1) * t1790) * t1624 * t1929;
t1688 = pkin(1) ^ 2;
t1901 = (t1471 + (t1487 / 0.2e1 + t1500) * t1917 * t2035 + (-pkin(1) * t1622 * t1855 + t1500 * t1688) * t1657) * t1685 * t1623;
t1418 = -t1743 + (t1711 + (-t1815 + t1727 + (-t1901 - t2018) * t1500) * t1619) * t1689 + t1926;
t1984 = t1618 * t1418;
t1983 = t1618 * t1624;
t1982 = t1619 * t1418;
t1981 = t1619 * t1622;
t1976 = t1623 * t1655;
t1876 = t1561 * t1948;
t1710 = (t1992 - t1998) * t1876;
t1476 = t1684 * t1484 * t1699;
t1754 = t1686 * t1642 * t1880;
t1852 = t1660 * t1939;
t1916 = t1666 * t2029;
t1741 = (t1476 + (t1484 * t1916 - t1852) * pkin(1)) * t1754;
t1847 = t1666 * t1929;
t1786 = t1639 * t1847;
t1940 = t1659 * t1660;
t1814 = ((-pkin(1) * t1484 * t1940 + t1639 * t1672) * t1665 + pkin(1) * t1786) * t1641 * t1929;
t1899 = (t1476 + (t1488 / 0.2e1 + t1505) * t1916 * t2035 + (-pkin(1) * t1639 * t1852 + t1505 * t1688) * t1665) * t1685 * t1640;
t1429 = -t1741 + (t1710 + (-t1814 + t1726 + (-t1899 - t2016) * t1505) * t1628) * t1689 + t1924;
t1975 = t1627 * t1429;
t1974 = t1627 * t1641;
t1973 = t1628 * t1429;
t1972 = t1628 * t1639;
t1875 = t1562 * t1948;
t1709 = (t1990 - t1996) * t1875;
t1477 = t1684 * t1486 * t1702;
t1753 = t1686 * t1647 * t1879;
t1850 = t1662 * t1936;
t1915 = t1668 * t2028;
t1740 = (t1477 + (t1486 * t1915 - t1850) * pkin(1)) * t1753;
t1846 = t1668 * t1929;
t1785 = t1644 * t1846;
t1937 = t1661 * t1662;
t1813 = ((-pkin(1) * t1486 * t1937 + t1644 * t1672) * t1667 + pkin(1) * t1785) * t1646 * t1929;
t1898 = (t1477 + (t1489 / 0.2e1 + t1506) * t1915 * t2035 + (-pkin(1) * t1644 * t1850 + t1506 * t1688) * t1667) * t1685 * t1645;
t1431 = -t1740 + (t1709 + (-t1813 + t1725 + (-t1898 - t2015) * t1506) * t1632) * t1689 + t1923;
t1968 = t1631 * t1431;
t1967 = t1631 * t1646;
t1966 = t1632 * t1431;
t1965 = t1632 * t1644;
t1874 = t1563 * t1948;
t1708 = (t1988 - t1994) * t1874;
t1475 = t1684 * t1482 * t1705;
t1752 = t1686 * t1652 * t1878;
t1848 = t1664 * t1933;
t1914 = t1670 * t2027;
t1742 = (t1475 + (t1482 * t1914 - t1848) * pkin(1)) * t1752;
t1845 = t1670 * t1929;
t1784 = t1649 * t1845;
t1934 = t1663 * t1664;
t1812 = ((-pkin(1) * t1482 * t1934 + t1649 * t1672) * t1669 + pkin(1) * t1784) * t1651 * t1929;
t1900 = (t1475 + (t1490 / 0.2e1 + t1504) * t1914 * t2035 + (-pkin(1) * t1649 * t1848 + t1504 * t1688) * t1669) * t1685 * t1650;
t1433 = -t1742 + (t1708 + (-t1812 + t1724 + (-t1900 - t2017) * t1504) * t1636) * t1689 + t1925;
t1961 = t1635 * t1433;
t1960 = t1635 * t1651;
t1959 = t1636 * t1433;
t1958 = t1636 * t1649;
t1953 = t1640 * t1659;
t1951 = t1645 * t1661;
t1949 = t1650 * t1663;
t1947 = t1654 * t1686;
t1946 = t1654 * t1689;
t1945 = t1655 * t1624;
t1941 = t1659 * t1641;
t1938 = t1661 * t1646;
t1935 = t1663 * t1651;
t1922 = 0.2e1 * t1685;
t1921 = 0.4e1 * t1685;
t1920 = 0.2e1 * t1686;
t1919 = 0.4e1 * t1686;
t1918 = 2 * t1689;
t1913 = t1559 * t1984;
t1912 = t1418 * t1655 * t1657;
t1419 = -t1743 + 0.2e1 * t1459 + 0.2e1 * t1560 + (t1711 + (-t1815 + 0.2e1 * t1727 + (-t1901 - 0.2e1 * t2018) * t1500) * t1619) * t1689;
t1911 = t1419 * t1979;
t1910 = t1561 * t1975;
t1909 = t1429 * t1659 * t1665;
t1430 = -t1741 + 0.2e1 * t1461 + 0.2e1 * t1564 + (t1710 + (-t1814 + 0.2e1 * t1726 + (-t1899 - 0.2e1 * t2016) * t1505) * t1628) * t1689;
t1908 = t1430 * t1970;
t1907 = t1562 * t1968;
t1906 = t1431 * t1661 * t1667;
t1432 = -t1740 + 0.2e1 * t1462 + 0.2e1 * t1565 + (t1709 + (-t1813 + 0.2e1 * t1725 + (-t1898 - 0.2e1 * t2015) * t1506) * t1632) * t1689;
t1905 = t1432 * t1963;
t1904 = t1563 * t1961;
t1903 = t1433 * t1663 * t1669;
t1434 = -t1742 + 0.2e1 * t1460 + 0.2e1 * t1566 + (t1708 + (-t1812 + 0.2e1 * t1724 + (-t1900 - 0.2e1 * t2017) * t1504) * t1636) * t1689;
t1902 = t1434 * t1956;
t1897 = t1623 * t2014;
t1896 = t1559 * t2012;
t1611 = t1621 - 0.1e1 / 0.2e1;
t1895 = t1611 * t2013;
t1894 = t1619 * t2012;
t1893 = t1650 * t2011;
t1892 = t1563 * t2009;
t1614 = t1648 - 0.1e1 / 0.2e1;
t1891 = t1614 * t2010;
t1890 = t1636 * t2009;
t1889 = t1640 * t2008;
t1888 = t1561 * t2006;
t1612 = t1638 - 0.1e1 / 0.2e1;
t1887 = t1612 * t2007;
t1886 = t1628 * t2006;
t1885 = t1645 * t2005;
t1884 = t1562 * t2003;
t1613 = t1643 - 0.1e1 / 0.2e1;
t1883 = t1613 * t2004;
t1882 = t1632 * t2003;
t1873 = t1567 * t1980;
t1872 = t1570 * t1971;
t1871 = t1571 * t1964;
t1870 = t1572 * t1957;
t1869 = t1618 * t1982;
t1868 = t1618 * t1981;
t1866 = t1627 * t1973;
t1865 = t1627 * t1972;
t1863 = t1631 * t1966;
t1862 = t1631 * t1965;
t1860 = t1635 * t1959;
t1859 = t1635 * t1958;
t1856 = t1419 * t1977;
t1853 = t1430 * t1954;
t1851 = t1432 * t1952;
t1849 = t1434 * t1950;
t1844 = t1947 / 0.2e1;
t1417 = -t1743 / 0.2e1 + ((t2000 / 0.2e1 - t2002 / 0.2e1) * t1877 + (-t1815 / 0.2e1 + t1727 + (-t2018 - t1901 / 0.2e1) * t1500) * t1619) * t1689 + t1926;
t1783 = t1623 * t1844;
t1455 = t1783 + (t1500 * t1791 + t1755 / 0.2e1) * t1491;
t1839 = t1619 * (0.2e1 * t1417 * t1942 - 0.2e1 * t1790 * t2012 + (-0.2e1 * t1455 * t1657 - t1947 * t1983) * t1656);
t1426 = -t1741 / 0.2e1 + ((t1992 / 0.2e1 - t1998 / 0.2e1) * t1876 + (-t1814 / 0.2e1 + t1726 + (-t2016 - t1899 / 0.2e1) * t1505) * t1628) * t1689 + t1924;
t1782 = t1640 * t1844;
t1458 = t1782 + (t1505 * t1789 + t1754 / 0.2e1) * t1492;
t1838 = t1628 * (0.2e1 * t1426 * t1932 - 0.2e1 * t1786 * t2006 + (-0.2e1 * t1458 * t1665 - t1947 * t1974) * t1660);
t1427 = -t1740 / 0.2e1 + ((t1990 / 0.2e1 - t1996 / 0.2e1) * t1875 + (-t1813 / 0.2e1 + t1725 + (-t2015 - t1898 / 0.2e1) * t1506) * t1632) * t1689 + t1923;
t1781 = t1645 * t1844;
t1457 = t1781 + (t1506 * t1788 + t1753 / 0.2e1) * t1493;
t1837 = t1632 * (0.2e1 * t1427 * t1931 - 0.2e1 * t1785 * t2003 + (-0.2e1 * t1457 * t1667 - t1947 * t1967) * t1662);
t1428 = -t1742 / 0.2e1 + ((t1988 / 0.2e1 - t1994 / 0.2e1) * t1874 + (-t1812 / 0.2e1 + t1724 + (-t2017 - t1900 / 0.2e1) * t1504) * t1636) * t1689 + t1925;
t1780 = t1650 * t1844;
t1456 = t1780 + (t1504 * t1787 + t1752 / 0.2e1) * t1494;
t1836 = t1636 * (0.2e1 * t1428 * t1930 - 0.2e1 * t1784 * t2009 + (-0.2e1 * t1456 * t1669 - t1947 * t1960) * t1664);
t1831 = t1622 + t1983;
t1830 = t1639 + t1974;
t1829 = t1644 + t1967;
t1828 = t1649 + t1960;
t1827 = t1559 * t1912;
t1826 = t1418 * t1873;
t1825 = t1619 * t1912;
t1824 = t1561 * t1909;
t1823 = t1429 * t1872;
t1822 = t1628 * t1909;
t1821 = t1562 * t1906;
t1820 = t1431 * t1871;
t1819 = t1632 * t1906;
t1818 = t1563 * t1903;
t1817 = t1433 * t1870;
t1816 = t1636 * t1903;
t1811 = t1619 * t1897;
t1810 = t1945 * t2014;
t1809 = t1559 * t1895;
t1808 = t1619 * t1895;
t1807 = t1611 * t1894;
t1806 = t1636 * t1893;
t1805 = t1935 * t2011;
t1804 = t1563 * t1891;
t1803 = t1636 * t1891;
t1802 = t1614 * t1890;
t1801 = t1628 * t1889;
t1800 = t1941 * t2008;
t1799 = t1561 * t1887;
t1798 = t1628 * t1887;
t1797 = t1612 * t1886;
t1796 = t1632 * t1885;
t1795 = t1938 * t2005;
t1794 = t1562 * t1883;
t1793 = t1632 * t1883;
t1792 = t1613 * t1882;
t1775 = 0.2e1 * t1825;
t1774 = 0.2e1 * t1822;
t1773 = 0.2e1 * t1819;
t1772 = 0.2e1 * t1816;
t1767 = 0.2e1 * t1619 * (-(t1417 * t1658 + t1656 * t1783) * t1655 + t1455 * t1944 - t1474 * t1854);
t1766 = 0.2e1 * t1628 * (-(t1426 * t1666 + t1660 * t1782) * t1659 + t1458 * t1940 - t1484 * t1847);
t1765 = 0.2e1 * t1632 * (-(t1427 * t1668 + t1662 * t1781) * t1661 + t1457 * t1937 - t1486 * t1846);
t1764 = 0.2e1 * t1636 * (-(t1428 * t1670 + t1664 * t1780) * t1663 + t1456 * t1934 - t1482 * t1845);
t1763 = t1831 * t1619;
t1762 = t1830 * t1628;
t1761 = t1829 * t1632;
t1760 = t1828 * t1636;
t1759 = t1897 * t2042;
t1758 = t1893 * t2036;
t1757 = t1889 * t2040;
t1756 = t1885 * t2038;
t1751 = t1435 * t1658 + t1499 * t1656;
t1750 = t1435 * t1656 - t1499 * t1658;
t1749 = t1436 * t1666 + t1502 * t1660;
t1748 = t1436 * t1660 - t1502 * t1666;
t1747 = t1437 * t1668 + t1503 * t1662;
t1746 = t1437 * t1662 - t1503 * t1668;
t1745 = t1438 * t1670 + t1501 * t1664;
t1744 = t1438 * t1664 - t1501 * t1670;
t1739 = t1559 * t1751;
t1738 = t1561 * t1749;
t1737 = t1563 * t1745;
t1736 = t1655 * t1751;
t1735 = t1659 * t1749;
t1734 = t1661 * t1747;
t1733 = t1663 * t1745;
t1732 = t1751 * t1495;
t1731 = t1749 * t1496;
t1730 = t1747 * t1497;
t1729 = t1747 * t1562;
t1728 = t1745 * t1498;
t1723 = t1655 * t2047;
t1722 = t1659 * t2046;
t1721 = t1661 * t2045;
t1720 = t1663 * t2044;
t1719 = t1751 * t1999;
t1718 = t1515 * t1739;
t1717 = t1749 * t1991;
t1716 = t1517 * t1738;
t1715 = t1747 * t1989;
t1714 = t1518 * t1729;
t1713 = t1745 * t1987;
t1712 = t1519 * t1737;
t1687 = t1685 / t1684;
t1583 = -t1675 + t1610;
t1582 = -t1675 + t1609;
t1581 = -t1675 + t1608;
t1573 = -t1675 + t1604;
t1526 = -t1679 * cos(t1583) + t1683 * sin(t1583);
t1525 = -t1678 * cos(t1582) + t1682 * sin(t1582);
t1524 = -t1677 * cos(t1581) + t1681 * sin(t1581);
t1523 = -t1676 * cos(t1573) + t1680 * sin(t1573);
t1480 = t1486 ^ 2;
t1479 = t1484 ^ 2;
t1478 = t1482 ^ 2;
t1472 = t1474 ^ 2;
t1 = [(t1588 * t2022 + t1594 * t2021 + t1595 * t2020 + t1596 * t2019) * t1689, 0, 0, (t1588 * t1982 + t1594 * t1973 + t1595 * t1966 + t1596 * t1959 + (-t1418 * t1999 - t1429 * t1991 - t1431 * t1989 - t1433 * t1987) * t1685) * t1689, t1588 * t1911 + t1594 * t1908 + t1595 * t1905 + t1596 * t1902 + (-t1713 - t1715 - t1717 - t1719 + (-t1588 * t1811 - t1594 * t1801 - t1595 * t1796 - t1596 * t1806) * t1689) * t1685, -t1588 * t1419 - t1594 * t1430 - t1595 * t1432 - t1596 * t1434 + (t1744 * t1987 + t1746 * t1989 + t1748 * t1991 + t1750 * t1999 + (-t1588 * t1759 - t1594 * t1757 - t1595 * t1756 - t1596 * t1758) * t1689) * t1685, (t1588 * t1869 + t1594 * t1866 + t1595 * t1863 + t1596 * t1860 + (-t1516 * t1913 - t1520 * t1910 - t1521 * t1907 - t1522 * t1904) * t1685 + ((-t1516 * t1896 - t1520 * t1888 - t1521 * t1884 - t1522 * t1892) * t1920 + (t1588 * t1894 + t1594 * t1886 + t1595 * t1882 + t1596 * t1890) * t1922) * t1672) * t1689, (t1588 * t1775 + t1594 * t1774 + t1595 * t1773 + t1596 * t1772 + (-t1516 * t1827 - t1520 * t1824 - t1521 * t1821 - t1522 * t1818) * t1922 + ((-t1516 * t1809 - t1520 * t1799 - t1521 * t1794 - t1522 * t1804) * t1919 + (t1588 * t1808 + t1594 * t1798 + t1595 * t1793 + t1596 * t1803) * t1921) * t1672) * t1689, ((-t1828 * t1987 - t1829 * t1989 - t1830 * t1991 - t1831 * t1999) * t1687 + (t1588 * t1763 + t1594 * t1762 + t1595 * t1761 + t1596 * t1760) * t1686) * t1946, 0, 0, t1596 * t1836 + t1595 * t1837 + t1594 * t1838 + t1588 * t1839 + (-t1657 * t1719 - t1665 * t1717 - t1667 * t1715 - t1669 * t1713) * t1685, t1596 * t1764 + t1595 * t1765 + t1594 * t1766 + t1588 * t1767 + (t1516 * t1655 * t1739 + t1520 * t1659 * t1738 + t1521 * t1661 * t1729 + t1522 * t1663 * t1737) * t1685, 0, -t1985, t1986, 0; (t1587 * t2022 + t1591 * t2021 + t1592 * t2020 + t1593 * t2019) * t1689, 0, 0, (t1587 * t1982 + t1591 * t1973 + t1592 * t1966 + t1593 * t1959 + (t1418 * t2001 + t1429 * t1997 + t1431 * t1995 + t1433 * t1993) * t1685) * t1689, t1587 * t1911 + t1591 * t1908 + t1592 * t1905 + t1593 * t1902 + (t1712 + t1714 + t1716 + t1718 + (-t1587 * t1811 - t1591 * t1801 - t1592 * t1796 - t1593 * t1806) * t1689) * t1685, -t1587 * t1419 - t1591 * t1430 - t1592 * t1432 - t1593 * t1434 + (-t1744 * t1993 - t1746 * t1995 - t1748 * t1997 - t1750 * t2001 + (-t1587 * t1759 - t1591 * t1757 - t1592 * t1756 - t1593 * t1758) * t1689) * t1685, (t1587 * t1869 + t1591 * t1866 + t1592 * t1863 + t1593 * t1860 + (t1515 * t1913 + t1517 * t1910 + t1518 * t1907 + t1519 * t1904) * t1685 + ((t1515 * t1896 + t1517 * t1888 + t1518 * t1884 + t1519 * t1892) * t1920 + (t1587 * t1894 + t1591 * t1886 + t1592 * t1882 + t1593 * t1890) * t1922) * t1672) * t1689, (t1587 * t1775 + t1591 * t1774 + t1592 * t1773 + t1593 * t1772 + (t1515 * t1827 + t1517 * t1824 + t1518 * t1821 + t1519 * t1818) * t1922 + ((t1515 * t1809 + t1517 * t1799 + t1518 * t1794 + t1519 * t1804) * t1919 + (t1587 * t1808 + t1591 * t1798 + t1592 * t1793 + t1593 * t1803) * t1921) * t1672) * t1689, ((t1828 * t1993 + t1829 * t1995 + t1830 * t1997 + t1831 * t2001) * t1687 + (t1587 * t1763 + t1591 * t1762 + t1592 * t1761 + t1593 * t1760) * t1686) * t1946, 0, 0, t1593 * t1836 + t1592 * t1837 + t1591 * t1838 + t1587 * t1839 + (t1657 * t1718 + t1665 * t1716 + t1667 * t1714 + t1669 * t1712) * t1685, t1593 * t1764 + t1592 * t1765 + t1591 * t1766 + t1587 * t1767 + (-t1733 * t1993 - t1734 * t1995 - t1735 * t1997 - t1736 * t2001) * t1685, 0, -t1986, -t1985, 0; (t1435 * t1867 + t1436 * t1864 + t1437 * t1861 + t1438 * t1858) * t1689, 0, 0, (t1418 * t1867 + t1429 * t1864 + t1431 * t1861 + t1433 * t1858 + (-t1655 * t1826 - t1659 * t1823 - t1661 * t1820 - t1663 * t1817) * t1685) * t1689, t1856 * t1979 + t1853 * t1970 + t1851 * t1963 + t1849 * t1956 + (-t1650 * t1720 - t1645 * t1721 - t1640 * t1722 - t1623 * t1723 + (-t1619 * t1810 - t1628 * t1800 - t1632 * t1795 - t1636 * t1805) * t1689) * t1685, -t1856 - t1853 - t1851 - t1849 + ((-t1501 * t1956 + t1438) * t1572 * t1949 + (-t1503 * t1963 + t1437) * t1571 * t1951 + (-t1502 * t1970 + t1436) * t1570 * t1953 + (-t1499 * t1979 + t1435) * t1567 * t1976 + (-t1795 * t2038 - t1800 * t2040 - t1805 * t2036 - t1810 * t2042) * t1689) * t1685, (-t1655 * t1472 - t1663 * t1478 - t1659 * t1479 - t1661 * t1480) * t1685 + (t1617 * t1418 * t1981 + t1626 * t1429 * t1972 + t1630 * t1431 * t1965 + t1634 * t1433 * t1958 + (-t1617 * t1826 - t1626 * t1823 - t1630 * t1820 - t1634 * t1817) * t1685 + ((-t1474 * t1618 * t1873 - t1482 * t1635 * t1870 - t1484 * t1627 * t1872 - t1486 * t1631 * t1871) * t1920 + (t1474 * t1868 + t1482 * t1859 + t1484 * t1865 + t1486 * t1862) * t1922) * t1672) * t1689, (t1649 * t1478 * (-0.2e1 * t1648 + 0.1e1) + t1644 * t1480 * (-0.2e1 * t1643 + 0.1e1) + t1639 * t1479 * (-0.2e1 * t1638 + 0.1e1) + t1622 * t1472 * (-0.2e1 * t1621 + 0.1e1)) * t1685 + (0.2e1 * t1869 + 0.2e1 * t1866 + 0.2e1 * t1863 + 0.2e1 * t1860 + (-t1418 * t1567 * t1868 - t1429 * t1570 * t1865 - t1431 * t1571 * t1862 - t1433 * t1572 * t1859) * t1922 + ((-t1567 * t1624 * t1807 - t1570 * t1641 * t1797 - t1571 * t1646 * t1792 - t1572 * t1651 * t1802) * t1919 + (t1623 * t1807 + t1640 * t1797 + t1645 * t1792 + t1650 * t1802) * t1921) * t1672) * t1689, (t1418 * t1977 + t1429 * t1954 + t1431 * t1952 + t1433 * t1950) * t1685 + (((-t1649 * t2037 - t1935) * t1636 * t1572 + (-t1644 * t2039 - t1938) * t1632 * t1571 + (-t1639 * t2041 - t1941) * t1628 * t1570 + (-t1622 * t2043 - t1945) * t1619 * t1567) * t1687 + ((t1949 + t2037) * t1636 + (t1951 + t2039) * t1632 + (t1953 + t2041) * t1628 + (t1976 + t2043) * t1619) * t1686) * t1946, (t1418 + t1429 + t1431 + t1433) * t1685, (t1625 * t1655 + t1642 * t1659 + t1647 * t1661 + t1652 * t1663) * t1687 * t1654, t1836 * t1950 + t1837 * t1952 + t1838 * t1954 + t1839 * t1977 + (-t1649 * t1720 - t1644 * t1721 - t1639 * t1722 - t1622 * t1723 + (-t1744 * t1950 - t1746 * t1952 - t1748 * t1954 - t1750 * t1977) * pkin(1)) * t1685, t1764 * t1950 + t1765 * t1952 + t1766 * t1954 + t1767 * t1977 + (t1650 * t1635 * t2044 + t1645 * t1631 * t2045 + t1640 * t1627 * t2046 + t1623 * t1618 * t2047 + (-t1744 - t1746 - t1748 - t1750) * pkin(1)) * t1685, 0, 0, 0, 0; (t1523 * t2022 + t1524 * t2021 + t1525 * t2020 + t1526 * t2019) * t1689, 0, 0, t1418 * t1495 + t1429 * t1496 + t1431 * t1497 + t1433 * t1498 + (t1523 * t1982 + t1524 * t1973 + t1525 * t1966 + t1526 * t1959) * t1689, t1523 * t1911 + t1524 * t1908 + t1525 * t1905 + t1526 * t1902 + (-t1523 * t1811 - t1524 * t1801 - t1525 * t1796 - t1526 * t1806) * t1927 + (t1728 + t1730 + t1731 + t1732) * pkin(1), -t1523 * t1419 - t1524 * t1430 - t1525 * t1432 - t1526 * t1434 + (-t1523 * t1759 - t1524 * t1757 - t1525 * t1756 - t1526 * t1758) * t1927 + (-t1495 * t1750 - t1496 * t1748 - t1497 * t1746 - t1498 * t1744) * pkin(1), t1495 * t1984 + t1496 * t1975 + t1497 * t1968 + t1498 * t1961 + (t1523 * t1869 + t1524 * t1866 + t1525 * t1863 + t1526 * t1860) * t1689 + (t2012 * t2051 + t2009 * t2048 + t2006 * t2050 + t2003 * t2049 + (t1523 * t1894 + t1524 * t1886 + t1525 * t1882 + t1526 * t1890) * t1918) * t1929, t1912 * t2051 + t1909 * t2050 + t1906 * t2049 + t1903 * t2048 + (t1523 * t1825 + t1524 * t1822 + t1525 * t1819 + t1526 * t1816) * t1918 + 0.4e1 * (t1495 * t1895 + t1498 * t1891 + t1496 * t1887 + t1497 * t1883 + (t1523 * t1808 + t1524 * t1798 + t1525 * t1793 + t1526 * t1803) * t1689) * t1929, (t1828 * t1498 + t1829 * t1497 + t1830 * t1496 + t1831 * t1495 + (t1523 * t1763 + t1524 * t1762 + t1525 * t1761 + t1526 * t1760) * t1689) * t1947, 0, 0, t1526 * t1836 + t1525 * t1837 + t1524 * t1838 + t1523 * t1839 + (t1657 * t1732 + t1665 * t1731 + t1667 * t1730 + t1669 * t1728) * pkin(1), t1526 * t1764 + t1525 * t1765 + t1524 * t1766 + t1523 * t1767 + (-t1495 * t1736 - t1496 * t1735 - t1497 * t1734 - t1498 * t1733) * pkin(1), 0, 0, 0, 0;];
tau_reg  = t1;
