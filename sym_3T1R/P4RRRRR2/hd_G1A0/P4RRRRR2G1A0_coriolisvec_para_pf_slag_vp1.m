% Calculate vector of centrifugal and coriolis load on the joints for
% P4RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [4x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:26
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(3,4),zeros(4,3),zeros(4,3),zeros(2,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: xDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x4] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: pkin has to be [2x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR2G1A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 17:24:17
% EndTime: 2020-08-07 17:24:24
% DurationCPUTime: 8.05s
% Computational Cost: add. (32140->492), mult. (32314->921), div. (12764->23), fcn. (22716->74), ass. (0->441)
t1430 = 2 * pkin(1);
t1276 = pkin(1) ^ 2;
t1469 = (rSges(3,2) ^ 2);
t1470 = (rSges(3,1) ^ 2);
t1376 = (t1469 + t1470);
t1283 = Icges(2,3) + (rSges(2,1) ^ 2 + rSges(2,2) ^ 2) * m(2) + Icges(3,1) / 0.2e1 + Icges(3,2) / 0.2e1 + ((2 * rSges(3,3) ^ 2 + t1376) * m(3)) / 0.2e1;
t1282 = Icges(1,3) + (m(3) + m(2)) * t1276 + (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) + t1283;
t1465 = m(3) * rSges(3,3);
t1166 = m(2) * rSges(2,2) - t1465;
t1234 = sin(qJ(3,4));
t1235 = sin(qJ(2,4));
t1236 = cos(qJ(3,4));
t1237 = cos(qJ(2,4));
t1253 = m(2) * rSges(2,1);
t1472 = -t1166 * t1235 - (-t1253 + (-rSges(3,1) * t1236 + rSges(3,2) * t1234) * m(3)) * t1237;
t1466 = m(3) * rSges(3,2);
t1169 = rSges(3,1) * t1466 - Icges(3,4);
t1261 = 0.2e1 * qJ(3,4);
t1192 = sin(t1261);
t1193 = cos(t1261);
t1140 = ((-t1469 + t1470) * m(3)) - Icges(3,1) + Icges(3,2);
t1464 = t1140 / 0.2e1;
t1476 = -t1169 * t1192 + t1193 * t1464;
t1032 = t1430 * t1472 + t1282 + t1476;
t1060 = t1283 + t1476;
t1038 = pkin(1) * t1472 + t1060;
t1370 = pkin(1) * t1235 + rSges(3,3);
t1467 = m(3) * rSges(3,1);
t1072 = (-t1370 * t1466 + Icges(3,6)) * t1236 - t1234 * (t1370 * t1467 - Icges(3,5));
t1198 = 0.1e1 / t1236;
t1199 = 0.1e1 / t1236 ^ 2;
t1295 = -t1166 * t1237 - t1235 * t1253;
t1167 = -rSges(3,2) * t1465 + Icges(3,6);
t1255 = xDP(3);
t1223 = (t1255 ^ 2);
t1384 = t1223 / pkin(2) ^ 2;
t1333 = t1234 * t1384;
t1296 = t1199 * t1167 * t1333;
t1274 = 1 / pkin(2);
t1379 = t1255 * t1274;
t1337 = t1198 * t1379;
t1311 = t1237 * t1337;
t1258 = xP(4);
t1190 = sin(t1258);
t1191 = cos(t1258);
t1265 = koppelP(4,2);
t1269 = koppelP(4,1);
t1112 = -t1190 * t1265 + t1191 * t1269;
t1254 = xDP(4);
t1256 = xDP(2);
t1084 = t1112 * t1254 + t1256;
t1170 = qJ(1,4) + legFrame(4,3);
t1162 = qJ(2,4) + t1170;
t1147 = qJ(3,4) + t1162;
t1148 = -qJ(3,4) + t1162;
t1471 = -2 * pkin(1);
t1076 = sin(t1170) * t1471 + (-sin(t1148) - sin(t1147)) * pkin(2);
t1194 = qJ(2,4) + qJ(3,4);
t1171 = sin(t1194);
t1195 = qJ(2,4) - qJ(3,4);
t1172 = sin(t1195);
t1124 = 0.1e1 / (t1171 + t1172);
t1277 = 1 / pkin(1);
t1378 = t1274 * t1277;
t1355 = t1124 * t1378;
t1320 = t1076 * t1355;
t1048 = t1084 * t1320;
t1108 = t1190 * t1269 + t1191 * t1265;
t1257 = xDP(1);
t1088 = -t1108 * t1254 + t1257;
t1077 = cos(t1170) * t1471 + (-cos(t1147) - cos(t1148)) * pkin(2);
t1319 = t1077 * t1355;
t1049 = t1088 * t1319;
t1196 = 0.1e1 / t1235;
t1397 = t1196 * t1277;
t1338 = t1234 * t1397;
t1395 = t1199 * t1274;
t1443 = pkin(2) * t1236;
t1451 = pkin(1) * t1237;
t1351 = (t1443 + t1451) * t1395;
t1291 = t1338 * t1351;
t1287 = t1255 * t1291;
t1024 = t1048 + t1049 - t1287;
t1312 = t1198 * t1338;
t1146 = cos(t1162);
t1346 = t1146 * t1397;
t1145 = sin(t1162);
t1347 = t1145 * t1397;
t1037 = t1084 * t1347 + t1088 * t1346 + t1255 * t1312;
t991 = t1024 + t1037;
t1300 = t991 * t1311;
t1197 = t1236 ^ 2;
t1278 = t1236 * t1197;
t1200 = 0.1e1 / t1278;
t1310 = t1200 * t1333;
t1168 = rSges(3,1) * t1465 - Icges(3,5);
t1339 = t1168 * t1384;
t1371 = t991 * t1379;
t1321 = t1384 / 0.2e1;
t989 = t1049 / 0.2e1 + t1048 / 0.2e1 - t1287 / 0.2e1 + t1037;
t1438 = t1024 * t989;
t1434 = t1235 * (t1199 * t1321 + t1438);
t1468 = -0.2e1 * t1140;
t1383 = t1234 * t1235;
t1329 = t1255 * t1383;
t1447 = pkin(2) * t1197;
t1375 = t1237 * t1447;
t1273 = pkin(2) ^ 2;
t985 = t1273 * t991 * t1278;
t960 = (((-pkin(1) * t1383 * t991 + t1198 * t1255) * t1236 + pkin(1) * t1311) * t1200 * t1379 + ((t985 + t989 * t1375 * t1430 + (-pkin(1) * t1198 * t1329 + t1037 * t1276) * t1236) * t1037 + (t985 + (t1375 * t991 - t1329) * pkin(1)) * t1024) * t1395) * t1397;
t1385 = t1223 * t1274;
t968 = ((-t1037 * t1236 * t1451 - t1447 * t991) * t1198 * t1037 - t991 * t1024 * t1443 - t1200 * t1385) * t1397;
t1487 = -t1032 * t968 - t1038 * t960 + t1072 * t1310 + (t1234 * t1337 * t991 * t1468 - t1199 * t1339) * t1236 - t1296 + (0.2e1 * t1198 - 0.4e1 * t1236) * t1169 * t1371 + (t1295 * t1438 + ((-rSges(3,1) * t1434 - rSges(3,2) * t1300) * t1236 + (-rSges(3,1) * t1300 + rSges(3,2) * t1434) * t1234) * m(3)) * t1430;
t1092 = t1167 * t1236 - t1168 * t1234;
t1174 = cos(t1195);
t1404 = t1169 * t1193;
t1421 = t1140 * t1192;
t1455 = pkin(1) * t1037 ^ 2;
t1462 = cos(t1194) / 0.2e1;
t1463 = t1171 / 0.2e1;
t1486 = -t1038 * t968 - t1060 * t960 + t1092 * t1310 - t1296 + (-t1339 + (-0.2e1 * t1404 - t1421) * t1371) * t1198 + (((-t1174 / 0.2e1 + t1462) * rSges(3,2) + (t1172 / 0.2e1 + t1463) * rSges(3,1)) * m(3) - t1295) * t1455;
t1238 = sin(qJ(3,3));
t1239 = sin(qJ(2,3));
t1244 = cos(qJ(3,3));
t1245 = cos(qJ(2,3));
t1473 = -t1166 * t1239 - (-t1253 + (-rSges(3,1) * t1244 + rSges(3,2) * t1238) * m(3)) * t1245;
t1262 = 0.2e1 * qJ(3,3);
t1201 = sin(t1262);
t1204 = cos(t1262);
t1477 = -t1169 * t1201 + t1204 * t1464;
t1033 = t1430 * t1473 + t1282 + t1477;
t1061 = t1283 + t1477;
t1045 = pkin(1) * t1473 + t1061;
t1369 = pkin(1) * t1239 + rSges(3,3);
t1073 = (-t1369 * t1466 + Icges(3,6)) * t1244 - t1238 * (t1369 * t1467 - Icges(3,5));
t1211 = 0.1e1 / t1244;
t1212 = 0.1e1 / t1244 ^ 2;
t1294 = -t1166 * t1245 - t1239 * t1253;
t1266 = koppelP(3,2);
t1270 = koppelP(3,1);
t1113 = -t1190 * t1266 + t1191 * t1270;
t1085 = t1113 * t1254 + t1256;
t1175 = qJ(1,3) + legFrame(3,3);
t1163 = qJ(2,3) + t1175;
t1156 = qJ(3,3) + t1163;
t1157 = -qJ(3,3) + t1163;
t1078 = sin(t1175) * t1471 + (-sin(t1157) - sin(t1156)) * pkin(2);
t1224 = qJ(2,3) + qJ(3,3);
t1178 = sin(t1224);
t1225 = qJ(2,3) - qJ(3,3);
t1179 = sin(t1225);
t1126 = 0.1e1 / (t1178 + t1179);
t1354 = t1126 * t1378;
t1318 = t1078 * t1354;
t1050 = t1085 * t1318;
t1109 = t1190 * t1270 + t1191 * t1266;
t1089 = -t1109 * t1254 + t1257;
t1081 = cos(t1175) * t1471 + (-cos(t1156) - cos(t1157)) * pkin(2);
t1315 = t1081 * t1354;
t1053 = t1089 * t1315;
t1207 = 0.1e1 / t1239;
t1394 = t1207 * t1277;
t1336 = t1238 * t1394;
t1390 = t1212 * t1274;
t1442 = pkin(2) * t1244;
t1450 = pkin(1) * t1245;
t1350 = (t1442 + t1450) * t1390;
t1290 = t1336 * t1350;
t1286 = t1255 * t1290;
t1025 = t1050 + t1053 - t1286;
t1309 = t1211 * t1336;
t1153 = cos(t1163);
t1342 = t1153 * t1394;
t1150 = sin(t1163);
t1345 = t1150 * t1394;
t1042 = t1085 * t1345 + t1089 * t1342 + t1255 * t1309;
t1003 = t1025 + t1042;
t1306 = t1211 * t1245 * t1379;
t1299 = t1003 * t1306;
t1210 = t1244 ^ 2;
t1279 = t1244 * t1210;
t1213 = 0.1e1 / t1279;
t1332 = t1238 * t1384;
t1305 = t1213 * t1332;
t1366 = t1003 * t1379;
t997 = t1053 / 0.2e1 + t1050 / 0.2e1 - t1286 / 0.2e1 + t1042;
t1437 = t1025 * t997;
t1433 = t1239 * (t1212 * t1321 + t1437);
t1382 = t1238 * t1239;
t1328 = t1255 * t1382;
t1446 = pkin(2) * t1210;
t1374 = t1245 * t1446;
t992 = t1273 * t1003 * t1279;
t961 = (((-pkin(1) * t1003 * t1382 + t1211 * t1255) * t1244 + pkin(1) * t1306) * t1213 * t1379 + ((t992 + t997 * t1374 * t1430 + (-pkin(1) * t1211 * t1328 + t1042 * t1276) * t1244) * t1042 + (t992 + (t1003 * t1374 - t1328) * pkin(1)) * t1025) * t1390) * t1394;
t969 = ((-t1042 * t1244 * t1450 - t1003 * t1446) * t1211 * t1042 - t1003 * t1025 * t1442 - t1213 * t1385) * t1394;
t1485 = -t1033 * t969 - t1045 * t961 + t1073 * t1305 + (-t1167 * t1238 - t1168 * t1244) * t1212 * t1384 + (t1211 * t1238 * t1244 * t1468 + (0.2e1 * t1211 - 0.4e1 * t1244) * t1169) * t1366 + (t1294 * t1437 + ((-rSges(3,1) * t1433 - rSges(3,2) * t1299) * t1244 + (-rSges(3,1) * t1299 + rSges(3,2) * t1433) * t1238) * m(3)) * t1430;
t1240 = sin(qJ(3,2));
t1241 = sin(qJ(2,2));
t1246 = cos(qJ(3,2));
t1247 = cos(qJ(2,2));
t1474 = -t1166 * t1241 - (-t1253 + (-rSges(3,1) * t1246 + rSges(3,2) * t1240) * m(3)) * t1247;
t1263 = 0.2e1 * qJ(3,2);
t1202 = sin(t1263);
t1205 = cos(t1263);
t1478 = -t1169 * t1202 + t1205 * t1464;
t1034 = t1430 * t1474 + t1282 + t1478;
t1062 = t1283 + t1478;
t1046 = pkin(1) * t1474 + t1062;
t1368 = pkin(1) * t1241 + rSges(3,3);
t1074 = (-t1368 * t1466 + Icges(3,6)) * t1246 - t1240 * (t1368 * t1467 - Icges(3,5));
t1215 = 0.1e1 / t1246;
t1216 = 0.1e1 / t1246 ^ 2;
t1293 = -t1166 * t1247 - t1241 * t1253;
t1267 = koppelP(2,2);
t1271 = koppelP(2,1);
t1114 = -t1190 * t1267 + t1191 * t1271;
t1086 = t1114 * t1254 + t1256;
t1176 = qJ(1,2) + legFrame(2,3);
t1164 = qJ(2,2) + t1176;
t1158 = qJ(3,2) + t1164;
t1159 = -qJ(3,2) + t1164;
t1079 = sin(t1176) * t1471 + (-sin(t1159) - sin(t1158)) * pkin(2);
t1226 = qJ(2,2) + qJ(3,2);
t1180 = sin(t1226);
t1227 = qJ(2,2) - qJ(3,2);
t1181 = sin(t1227);
t1127 = 0.1e1 / (t1180 + t1181);
t1353 = t1127 * t1378;
t1317 = t1079 * t1353;
t1051 = t1086 * t1317;
t1110 = t1190 * t1271 + t1191 * t1267;
t1090 = -t1110 * t1254 + t1257;
t1082 = cos(t1176) * t1471 + (-cos(t1158) - cos(t1159)) * pkin(2);
t1314 = t1082 * t1353;
t1054 = t1090 * t1314;
t1208 = 0.1e1 / t1241;
t1393 = t1208 * t1277;
t1335 = t1240 * t1393;
t1388 = t1216 * t1274;
t1441 = pkin(2) * t1246;
t1449 = pkin(1) * t1247;
t1349 = (t1441 + t1449) * t1388;
t1289 = t1335 * t1349;
t1285 = t1255 * t1289;
t1026 = t1051 + t1054 - t1285;
t1308 = t1215 * t1335;
t1154 = cos(t1164);
t1341 = t1154 * t1393;
t1151 = sin(t1164);
t1344 = t1151 * t1393;
t1043 = t1086 * t1344 + t1090 * t1341 + t1255 * t1308;
t1004 = t1026 + t1043;
t1304 = t1215 * t1247 * t1379;
t1298 = t1004 * t1304;
t1214 = t1246 ^ 2;
t1280 = t1246 * t1214;
t1217 = 0.1e1 / t1280;
t1331 = t1240 * t1384;
t1303 = t1217 * t1331;
t1365 = t1004 * t1379;
t998 = t1054 / 0.2e1 + t1051 / 0.2e1 - t1285 / 0.2e1 + t1043;
t1436 = t1026 * t998;
t1432 = t1241 * (t1216 * t1321 + t1436);
t1381 = t1240 * t1241;
t1327 = t1255 * t1381;
t1445 = pkin(2) * t1214;
t1373 = t1247 * t1445;
t993 = t1273 * t1004 * t1280;
t962 = (((-pkin(1) * t1004 * t1381 + t1215 * t1255) * t1246 + pkin(1) * t1304) * t1217 * t1379 + ((t993 + t998 * t1373 * t1430 + (-pkin(1) * t1215 * t1327 + t1043 * t1276) * t1246) * t1043 + (t993 + (t1004 * t1373 - t1327) * pkin(1)) * t1026) * t1388) * t1393;
t970 = ((-t1043 * t1246 * t1449 - t1004 * t1445) * t1215 * t1043 - t1004 * t1026 * t1441 - t1217 * t1385) * t1393;
t1484 = -t1034 * t970 - t1046 * t962 + t1074 * t1303 + (-t1167 * t1240 - t1168 * t1246) * t1216 * t1384 + (t1215 * t1240 * t1246 * t1468 + (0.2e1 * t1215 - 0.4e1 * t1246) * t1169) * t1365 + (t1293 * t1436 + ((-rSges(3,1) * t1432 - rSges(3,2) * t1298) * t1246 + (-rSges(3,1) * t1298 + rSges(3,2) * t1432) * t1240) * m(3)) * t1430;
t1242 = sin(qJ(3,1));
t1243 = sin(qJ(2,1));
t1248 = cos(qJ(3,1));
t1249 = cos(qJ(2,1));
t1475 = -t1166 * t1243 - (-t1253 + (-rSges(3,1) * t1248 + rSges(3,2) * t1242) * m(3)) * t1249;
t1264 = 0.2e1 * qJ(3,1);
t1203 = sin(t1264);
t1206 = cos(t1264);
t1479 = -t1169 * t1203 + t1206 * t1464;
t1035 = t1430 * t1475 + t1282 + t1479;
t1063 = t1283 + t1479;
t1047 = pkin(1) * t1475 + t1063;
t1367 = pkin(1) * t1243 + rSges(3,3);
t1075 = (-t1367 * t1466 + Icges(3,6)) * t1248 - t1242 * (t1367 * t1467 - Icges(3,5));
t1219 = 0.1e1 / t1248;
t1220 = 0.1e1 / t1248 ^ 2;
t1292 = -t1166 * t1249 - t1243 * t1253;
t1268 = koppelP(1,2);
t1272 = koppelP(1,1);
t1115 = -t1190 * t1268 + t1191 * t1272;
t1087 = t1115 * t1254 + t1256;
t1177 = qJ(1,1) + legFrame(1,3);
t1165 = qJ(2,1) + t1177;
t1160 = qJ(3,1) + t1165;
t1161 = -qJ(3,1) + t1165;
t1080 = sin(t1177) * t1471 + (-sin(t1161) - sin(t1160)) * pkin(2);
t1228 = qJ(2,1) + qJ(3,1);
t1182 = sin(t1228);
t1229 = qJ(2,1) - qJ(3,1);
t1183 = sin(t1229);
t1128 = 0.1e1 / (t1182 + t1183);
t1352 = t1128 * t1378;
t1316 = t1080 * t1352;
t1052 = t1087 * t1316;
t1111 = t1190 * t1272 + t1191 * t1268;
t1091 = -t1111 * t1254 + t1257;
t1083 = cos(t1177) * t1471 + (-cos(t1160) - cos(t1161)) * pkin(2);
t1313 = t1083 * t1352;
t1055 = t1091 * t1313;
t1209 = 0.1e1 / t1243;
t1392 = t1209 * t1277;
t1334 = t1242 * t1392;
t1386 = t1220 * t1274;
t1440 = pkin(2) * t1248;
t1448 = pkin(1) * t1249;
t1348 = (t1440 + t1448) * t1386;
t1288 = t1334 * t1348;
t1284 = t1255 * t1288;
t1027 = t1052 + t1055 - t1284;
t1307 = t1219 * t1334;
t1155 = cos(t1165);
t1340 = t1155 * t1392;
t1152 = sin(t1165);
t1343 = t1152 * t1392;
t1044 = t1087 * t1343 + t1091 * t1340 + t1255 * t1307;
t1005 = t1027 + t1044;
t1302 = t1219 * t1249 * t1379;
t1297 = t1005 * t1302;
t1218 = t1248 ^ 2;
t1281 = t1248 * t1218;
t1221 = 0.1e1 / t1281;
t1330 = t1242 * t1384;
t1301 = t1221 * t1330;
t1364 = t1005 * t1379;
t999 = t1055 / 0.2e1 + t1052 / 0.2e1 - t1284 / 0.2e1 + t1044;
t1435 = t1027 * t999;
t1431 = t1243 * (t1220 * t1321 + t1435);
t1380 = t1242 * t1243;
t1326 = t1255 * t1380;
t1444 = pkin(2) * t1218;
t1372 = t1249 * t1444;
t994 = t1273 * t1005 * t1281;
t963 = (((-pkin(1) * t1005 * t1380 + t1219 * t1255) * t1248 + pkin(1) * t1302) * t1221 * t1379 + ((t994 + t999 * t1372 * t1430 + (-pkin(1) * t1219 * t1326 + t1044 * t1276) * t1248) * t1044 + (t994 + (t1005 * t1372 - t1326) * pkin(1)) * t1027) * t1386) * t1392;
t971 = ((-t1044 * t1248 * t1448 - t1005 * t1444) * t1219 * t1044 - t1005 * t1027 * t1440 - t1221 * t1385) * t1392;
t1483 = -t1035 * t971 - t1047 * t963 + t1075 * t1301 + (-t1167 * t1242 - t1168 * t1248) * t1220 * t1384 + (t1219 * t1242 * t1248 * t1468 + (0.2e1 * t1219 - 0.4e1 * t1248) * t1169) * t1364 + (t1292 * t1435 + ((-rSges(3,1) * t1431 - rSges(3,2) * t1297) * t1248 + (-rSges(3,1) * t1297 + rSges(3,2) * t1431) * t1242) * m(3)) * t1430;
t1093 = t1167 * t1244 - t1168 * t1238;
t1185 = cos(t1225);
t1400 = t1169 * t1204;
t1420 = t1140 * t1201;
t1454 = pkin(1) * t1042 ^ 2;
t1458 = cos(t1224) / 0.2e1;
t1461 = t1178 / 0.2e1;
t1482 = -t1045 * t969 - t1061 * t961 + t1093 * t1305 - t1212 * t1167 * t1332 + (-t1339 + (-0.2e1 * t1400 - t1420) * t1366) * t1211 + (((-t1185 / 0.2e1 + t1458) * rSges(3,2) + (t1179 / 0.2e1 + t1461) * rSges(3,1)) * m(3) - t1294) * t1454;
t1094 = t1167 * t1246 - t1168 * t1240;
t1187 = cos(t1227);
t1399 = t1169 * t1205;
t1419 = t1140 * t1202;
t1453 = pkin(1) * t1043 ^ 2;
t1457 = cos(t1226) / 0.2e1;
t1460 = t1180 / 0.2e1;
t1481 = -t1046 * t970 - t1062 * t962 + t1094 * t1303 - t1216 * t1167 * t1331 + (-t1339 + (-0.2e1 * t1399 - t1419) * t1365) * t1215 + (((-t1187 / 0.2e1 + t1457) * rSges(3,2) + (t1181 / 0.2e1 + t1460) * rSges(3,1)) * m(3) - t1293) * t1453;
t1095 = t1167 * t1248 - t1168 * t1242;
t1189 = cos(t1229);
t1398 = t1169 * t1206;
t1418 = t1140 * t1203;
t1452 = pkin(1) * t1044 ^ 2;
t1456 = cos(t1228) / 0.2e1;
t1459 = t1182 / 0.2e1;
t1480 = -t1047 * t971 - t1063 * t963 + t1095 * t1301 - t1220 * t1167 * t1330 + (-t1339 + (-0.2e1 * t1398 - t1418) * t1364) * t1219 + (((-t1189 / 0.2e1 + t1456) * rSges(3,2) + (t1183 / 0.2e1 + t1459) * rSges(3,1)) * m(3) - t1292) * t1452;
t1222 = t1254 ^ 2;
t1439 = m(4) * t1222;
t1425 = t1124 * t1274;
t1424 = t1126 * t1274;
t1423 = t1127 * t1274;
t1422 = t1128 * t1274;
t1417 = t1145 * t1196;
t1416 = t1146 * t1196;
t1415 = t1150 * t1207;
t1414 = t1151 * t1208;
t1413 = t1152 * t1209;
t1412 = t1153 * t1207;
t1411 = t1154 * t1208;
t1410 = t1155 * t1209;
t1396 = t1198 * t1274;
t1391 = t1211 * t1274;
t1389 = t1215 * t1274;
t1387 = t1219 * t1274;
t1377 = t1277 * t1222;
t1363 = t1076 * t1425;
t1362 = t1077 * t1425;
t1361 = t1078 * t1424;
t1360 = t1079 * t1423;
t1359 = t1080 * t1422;
t1358 = t1081 * t1424;
t1357 = t1082 * t1423;
t1356 = t1083 * t1422;
t1260 = rSges(4,1);
t1259 = rSges(4,2);
t1149 = -t1376 * m(3) - Icges(3,3);
t1059 = (-t1111 * t1155 + t1115 * t1152) * t1392;
t1058 = (-t1110 * t1154 + t1114 * t1151) * t1393;
t1057 = (-t1109 * t1153 + t1113 * t1150) * t1394;
t1056 = (-t1108 * t1146 + t1112 * t1145) * t1397;
t1031 = (t1080 * t1115 - t1083 * t1111) * t1352;
t1030 = (t1079 * t1114 - t1082 * t1110) * t1353;
t1029 = (t1078 * t1113 - t1081 * t1109) * t1354;
t1028 = (t1076 * t1112 - t1077 * t1108) * t1355;
t1023 = t1095 * t1387 + (t1047 * t1219 - t1063 * t1348) * t1334;
t1022 = t1094 * t1389 + (t1046 * t1215 - t1062 * t1349) * t1335;
t1021 = t1093 * t1391 + (t1045 * t1211 - t1061 * t1350) * t1336;
t1020 = (t1047 * t1410 + t1063 * t1356) * t1277;
t1019 = (t1046 * t1411 + t1062 * t1357) * t1277;
t1018 = (t1045 * t1412 + t1061 * t1358) * t1277;
t1017 = (t1047 * t1413 + t1063 * t1359) * t1277;
t1016 = (t1046 * t1414 + t1062 * t1360) * t1277;
t1015 = (t1045 * t1415 + t1061 * t1361) * t1277;
t1014 = t1092 * t1396 + (t1038 * t1198 - t1060 * t1351) * t1338;
t1013 = (t1038 * t1416 + t1060 * t1362) * t1277;
t1012 = (t1038 * t1417 + t1060 * t1363) * t1277;
t1011 = (t1035 * t1410 + t1047 * t1356) * t1277;
t1010 = (t1034 * t1411 + t1046 * t1357) * t1277;
t1009 = (t1033 * t1412 + t1045 * t1358) * t1277;
t1008 = (t1035 * t1413 + t1047 * t1359) * t1277;
t1007 = (t1034 * t1414 + t1046 * t1360) * t1277;
t1006 = (t1033 * t1415 + t1045 * t1361) * t1277;
t996 = (t1032 * t1416 + t1038 * t1362) * t1277;
t995 = (t1032 * t1417 + t1038 * t1363) * t1277;
t988 = t1075 * t1387 + (t1035 * t1219 - t1047 * t1348) * t1334;
t987 = t1074 * t1389 + (t1034 * t1215 - t1046 * t1349) * t1335;
t986 = t1073 * t1391 + (t1033 * t1211 - t1045 * t1350) * t1336;
t984 = t1072 * t1396 + (t1032 * t1198 - t1038 * t1351) * t1338;
t983 = t1031 * t1063 + t1047 * t1059;
t982 = t1030 * t1062 + t1046 * t1058;
t981 = t1029 * t1061 + t1045 * t1057;
t980 = t1028 * t1060 + t1038 * t1056;
t979 = t1031 * t1047 + t1035 * t1059;
t978 = t1030 * t1046 + t1034 * t1058;
t977 = t1029 * t1045 + t1033 * t1057;
t976 = t1028 * t1038 + t1032 * t1056;
t1 = [(t1190 * t1259 - t1191 * t1260) * t1439 + t1487 * t1346 + t1485 * t1342 + t1484 * t1341 + t1483 * t1340 + t1486 * t1319 + t1482 * t1315 + t1481 * t1314 + t1480 * t1313 + (-(t1011 * t1410 + t1020 * t1356) * t1115 - (t1011 * t1413 + t1020 * t1359) * t1111 - (t1010 * t1411 + t1019 * t1357) * t1114 - (t1010 * t1414 + t1019 * t1360) * t1110 - (t1009 * t1412 + t1018 * t1358) * t1113 - (t1009 * t1415 + t1018 * t1361) * t1109 - (t1013 * t1362 + t1416 * t996) * t1112 - (t1013 * t1363 + t1417 * t996) * t1108) * t1377; -(t1190 * t1260 + t1191 * t1259) * t1439 + t1487 * t1347 + t1485 * t1345 + t1484 * t1344 + t1483 * t1343 + t1486 * t1320 + t1482 * t1318 + t1481 * t1317 + t1480 * t1316 + (-(t1008 * t1410 + t1017 * t1356) * t1115 - (t1008 * t1413 + t1017 * t1359) * t1111 - (t1007 * t1411 + t1016 * t1357) * t1114 - (t1007 * t1414 + t1016 * t1360) * t1110 - (t1006 * t1412 + t1015 * t1358) * t1113 - (t1006 * t1415 + t1015 * t1361) * t1109 - (t1012 * t1362 + t1416 * t995) * t1112 - (t1012 * t1363 + t1417 * t995) * t1108) * t1377; ((t1421 / 0.2e1 + t1404) * t991 ^ 2 + ((t1174 / 0.2e1 + t1462) * rSges(3,2) + (-t1172 / 0.2e1 + t1463) * rSges(3,1)) * m(3) * t1455 - t1072 * t968 - t1092 * t960 - t1149 * t1310) * t1396 + (-t1073 * t969 - t1093 * t961 - t1149 * t1305 + (t1420 / 0.2e1 + t1400) * t1003 ^ 2 + ((t1185 / 0.2e1 + t1458) * rSges(3,2) + (-t1179 / 0.2e1 + t1461) * rSges(3,1)) * m(3) * t1454) * t1391 + (-t1074 * t970 - t1094 * t962 - t1149 * t1303 + (t1419 / 0.2e1 + t1399) * t1004 ^ 2 + ((t1187 / 0.2e1 + t1457) * rSges(3,2) + (-t1181 / 0.2e1 + t1460) * rSges(3,1)) * m(3) * t1453) * t1389 + (-t1075 * t971 - t1095 * t963 - t1149 * t1301 + (t1418 / 0.2e1 + t1398) * t1005 ^ 2 + ((t1189 / 0.2e1 + t1456) * rSges(3,2) + (-t1183 / 0.2e1 + t1459) * rSges(3,1)) * m(3) * t1452) * t1387 + t1487 * t1312 + t1485 * t1309 + t1484 * t1308 + t1483 * t1307 - t1486 * t1291 - t1482 * t1290 - t1481 * t1289 - t1480 * t1288 + (-(t1023 * t1356 + t1410 * t988) * t1115 - (t1023 * t1359 + t1413 * t988) * t1111 - (t1022 * t1357 + t1411 * t987) * t1114 - (t1022 * t1360 + t1414 * t987) * t1110 - (t1021 * t1358 + t1412 * t986) * t1113 - (t1021 * t1361 + t1415 * t986) * t1109 - (t1014 * t1362 + t1416 * t984) * t1112 - (t1014 * t1363 + t1417 * t984) * t1108) * t1377; t1483 * t1059 + t1484 * t1058 + t1485 * t1057 + t1487 * t1056 + t1480 * t1031 + t1481 * t1030 + t1482 * t1029 + t1486 * t1028 + (-(t1356 * t983 + t1410 * t979) * t1115 - (t1359 * t983 + t1413 * t979) * t1111 - (t1357 * t982 + t1411 * t978) * t1114 - (t1360 * t982 + t1414 * t978) * t1110 - (t1358 * t981 + t1412 * t977) * t1113 - (t1361 * t981 + t1415 * t977) * t1109 - (t1362 * t980 + t1416 * t976) * t1112 - (t1363 * t980 + t1417 * t976) * t1108) * t1377;];
taucX  = t1;
