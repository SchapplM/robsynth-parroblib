% Calculate minimal parameter regressor of inverse dynamics forces for
% P4RRRRR2G1A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [4x1]
%   Generalized platform coordinates
% xDP [4x1]
%   Generalized platform velocities
% xDDP [4x1]
%   Generalized platform accelerations
% qJ [3x4]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% legFrame [4x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% koppelP [4x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates

% Output:
% tauX_reg [4x17]
%   minimal parameter regressor of inverse dynamics force vector
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2020-08-07 17:26
% Revision: 8f4ff0ee124033641e65b154ac60823cef59ef1f (2020-07-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauX_reg = P4RRRRR2G1A0_invdyn_para_pf_regmin(xP, xDP, xDDP, qJ, g, legFrame, ...
  koppelP, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,4),zeros(3,1),zeros(4,3),zeros(4,3),zeros(2,1)}
assert(isreal(xP) && all(size(xP) == [4 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: xP has to be [4x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [4 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: xDP has to be [4x1] (double)');
assert(isreal(xDDP) && all(size(xDDP) == [4 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: xDDP has to be [4x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 4]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: qJ has to be [3x4] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: pkin has to be [2x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [4 3]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: legFrame has to be [4x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [4 3]), ...
  'P4RRRRR2G1A0_invdyn_para_pf_regmin: Koppelpunkt has to be [4x3] (double)');

%% Symbolic Calculation
% From invdyn_para_plfcoord_reg_matlab.m
% OptimizationMode: 2
% StartTime: 2020-08-07 17:24:51
% EndTime: 2020-08-07 17:25:06
% DurationCPUTime: 16.62s
% Computational Cost: add. (96960->827), mult. (157868->1441), div. (36712->32), fcn. (121416->90), ass. (0->619)
t398 = xDDP(3);
t734 = -t398 / 0.2e1;
t423 = xP(4);
t347 = sin(t423);
t348 = cos(t423);
t424 = koppelP(4,2);
t428 = koppelP(4,1);
t203 = t347 * t428 + t348 * t424;
t207 = -t347 * t424 + t348 * t428;
t419 = xDP(4);
t383 = t419 ^ 2;
t397 = xDDP(4);
t399 = xDDP(2);
t149 = -t383 * t203 + t207 * t397 + t399;
t654 = legFrame(4,3);
t519 = qJ(1,4) + t654;
t316 = qJ(2,4) + t519;
t299 = sin(t316);
t392 = sin(qJ(2,4));
t352 = 0.1e1 / t392;
t436 = 0.1e1 / pkin(1);
t616 = t352 * t436;
t133 = t299 * t149 * t616;
t400 = xDDP(1);
t153 = -t203 * t397 - t383 * t207 + t400;
t300 = cos(t316);
t134 = t300 * t153 * t616;
t394 = cos(qJ(3,4));
t355 = 0.1e1 / t394;
t391 = sin(qJ(3,4));
t615 = t355 * t391;
t553 = t352 * t615;
t506 = t436 * t553;
t211 = t398 * t506;
t420 = xDP(3);
t384 = t420 ^ 2;
t433 = 0.1e1 / pkin(2);
t595 = t433 * t436;
t540 = t384 * t595;
t354 = t394 ^ 2;
t438 = t394 * t354;
t357 = 0.1e1 / t438;
t729 = t352 * t357;
t244 = t540 * t729;
t356 = 0.1e1 / t394 ^ 2;
t551 = t356 * t595;
t505 = t352 * t551;
t395 = cos(qJ(2,4));
t674 = t395 * pkin(1);
t675 = t394 * pkin(2);
t251 = t674 + t675;
t629 = t251 * t391;
t453 = t505 * t629;
t434 = 0.1e1 / pkin(2) ^ 2;
t421 = xDP(2);
t193 = t207 * t419 + t421;
t315 = sin(t519);
t490 = cos(t519);
t422 = xDP(1);
t518 = -t203 * t419 + t422;
t601 = t391 * t420;
t109 = -t251 * t601 + ((-(t392 * t193 + t395 * t518) * t675 - pkin(1) * t518) * t490 - ((t193 * t395 - t392 * t518) * t675 + pkin(1) * t193) * t315) * t394;
t437 = 0.1e1 / pkin(1) ^ 2;
t561 = t109 / t392 ^ 2 * t437;
t473 = t434 / t354 ^ 2 * t561;
t539 = t392 * t601;
t687 = pkin(2) * t354;
t575 = t395 * t687;
t432 = pkin(2) ^ 2;
t118 = t420 * t506 + ((-t392 * t315 + t395 * t490) * t518 + (t395 * t315 + t392 * t490) * t193) * t616;
t481 = t109 * t505;
t96 = t481 + t118;
t93 = t432 * t96 * t438;
t457 = (t93 + (t575 * t96 - t539) * pkin(1)) * t473;
t477 = t118 * t505;
t533 = -t595 / 0.2e1;
t494 = t420 * t533;
t532 = t595 / 0.2e1;
t435 = pkin(1) ^ 2;
t720 = 0.2e1 * pkin(1);
t94 = t481 / 0.2e1 + t118;
t61 = t93 + t94 * t575 * t720 + (-pkin(1) * t355 * t539 + t435 * t118) * t394;
t301 = qJ(3,4) + t316;
t259 = cos(t301);
t302 = -qJ(3,4) + t316;
t260 = cos(t302);
t170 = t490 * t720 + (t259 + t260) * pkin(2);
t349 = qJ(2,4) + qJ(3,4);
t323 = sin(t349);
t350 = qJ(2,4) - qJ(3,4);
t324 = sin(t350);
t581 = t323 + t324;
t243 = 0.1e1 / t581;
t644 = t170 * t243;
t257 = sin(t301);
t258 = sin(t302);
t695 = pkin(1) * t315;
t169 = -0.2e1 * t695 + (-t257 - t258) * pkin(2);
t645 = t169 * t243;
t596 = t420 * t433;
t552 = t355 * t596;
t504 = t395 * t552;
t691 = pkin(1) * t391;
t86 = (-t392 * t691 * t96 + t355 * t420) * t394 + pkin(1) * t504;
t469 = t149 * t532 * t645 + t153 * t533 * t644 + t453 * t734 - t61 * t477 / 0.2e1 - t457 / 0.2e1 + t86 * t494 * t729;
t617 = t352 * t355;
t514 = t118 * (-t118 * t394 * t674 - t687 * t96) * t617;
t489 = t436 * t514;
t563 = t96 * t596;
t73 = t96 * t355 * t561;
t21 = (t134 / 0.2e1 + t133 / 0.2e1 + t211 / 0.2e1 - t489 / 0.2e1 + t73 / 0.2e1 + t244 / 0.2e1 + t469) * t391 + t563;
t733 = t21 * t391 ^ 2;
t425 = koppelP(3,2);
t429 = koppelP(3,1);
t204 = t347 * t429 + t348 * t425;
t208 = -t347 * t425 + t348 * t429;
t150 = -t383 * t204 + t208 * t397 + t399;
t655 = legFrame(3,3);
t520 = qJ(1,3) + t655;
t320 = qJ(2,3) + t520;
t303 = sin(t320);
t402 = sin(qJ(2,3));
t360 = 0.1e1 / t402;
t612 = t360 * t436;
t135 = t303 * t150 * t612;
t154 = -t204 * t397 - t383 * t208 + t400;
t306 = cos(t320);
t138 = t306 * t154 * t612;
t410 = cos(qJ(3,3));
t369 = 0.1e1 / t410;
t401 = sin(qJ(3,3));
t607 = t369 * t401;
t550 = t360 * t607;
t503 = t436 * t550;
t225 = t398 * t503;
t368 = t410 ^ 2;
t440 = t410 * t368;
t371 = 0.1e1 / t440;
t728 = t360 * t371;
t248 = t540 * t728;
t370 = 0.1e1 / t410 ^ 2;
t547 = t370 * t595;
t502 = t360 * t547;
t411 = cos(qJ(2,3));
t668 = t411 * pkin(1);
t669 = t410 * pkin(2);
t261 = t668 + t669;
t628 = t261 * t401;
t452 = t502 * t628;
t194 = t208 * t419 + t421;
t317 = sin(t520);
t491 = cos(t520);
t517 = -t204 * t419 + t422;
t123 = t420 * t503 + ((-t402 * t317 + t411 * t491) * t517 + (t411 * t317 + t402 * t491) * t194) * t612;
t599 = t401 * t420;
t110 = -t261 * t599 + ((-(t402 * t194 + t411 * t517) * t669 - pkin(1) * t517) * t491 - ((t194 * t411 - t402 * t517) * t669 + pkin(1) * t194) * t317) * t410;
t480 = t110 * t502;
t107 = t480 + t123;
t560 = t110 / t402 ^ 2 * t437;
t472 = t434 / t368 ^ 2 * t560;
t538 = t402 * t599;
t686 = pkin(2) * t368;
t574 = t411 * t686;
t98 = t432 * t107 * t440;
t455 = (t98 + (t107 * t574 - t538) * pkin(1)) * t472;
t474 = t123 * t502;
t101 = t480 / 0.2e1 + t123;
t63 = t98 + t101 * t574 * t720 + (-pkin(1) * t369 * t538 + t435 * t123) * t410;
t309 = qJ(3,3) + t320;
t286 = cos(t309);
t310 = -qJ(3,3) + t320;
t287 = cos(t310);
t174 = t491 * t720 + (t286 + t287) * pkin(2);
t385 = qJ(2,3) + qJ(3,3);
t327 = sin(t385);
t386 = qJ(2,3) - qJ(3,3);
t328 = sin(t386);
t580 = t327 + t328;
t245 = 0.1e1 / t580;
t640 = t174 * t245;
t280 = sin(t309);
t281 = sin(t310);
t694 = pkin(1) * t317;
t171 = -0.2e1 * t694 + (-t280 - t281) * pkin(2);
t643 = t171 * t245;
t497 = t369 * t411 * t596;
t690 = pkin(1) * t401;
t90 = (-t107 * t402 * t690 + t369 * t420) * t410 + pkin(1) * t497;
t468 = t150 * t532 * t643 + t154 * t533 * t640 + t452 * t734 - t63 * t474 / 0.2e1 - t455 / 0.2e1 + t90 * t494 * t728;
t613 = t360 * t369;
t512 = t123 * (-t123 * t410 * t668 - t107 * t686) * t613;
t487 = t436 * t512;
t535 = t107 * t596;
t75 = t107 * t369 * t560;
t22 = (t138 / 0.2e1 + t135 / 0.2e1 + t225 / 0.2e1 - t487 / 0.2e1 + t75 / 0.2e1 + t248 / 0.2e1 + t468) * t401 + t535;
t732 = t22 * t401 ^ 2;
t426 = koppelP(2,2);
t430 = koppelP(2,1);
t205 = t347 * t430 + t348 * t426;
t209 = -t347 * t426 + t348 * t430;
t151 = -t383 * t205 + t209 * t397 + t399;
t656 = legFrame(2,3);
t521 = qJ(1,2) + t656;
t321 = qJ(2,2) + t521;
t304 = sin(t321);
t405 = sin(qJ(2,2));
t363 = 0.1e1 / t405;
t610 = t363 * t436;
t136 = t304 * t151 * t610;
t155 = -t205 * t397 - t383 * t209 + t400;
t307 = cos(t321);
t139 = t307 * t155 * t610;
t413 = cos(qJ(3,2));
t374 = 0.1e1 / t413;
t404 = sin(qJ(3,2));
t605 = t374 * t404;
t549 = t363 * t605;
t501 = t436 * t549;
t226 = t398 * t501;
t373 = t413 ^ 2;
t442 = t413 * t373;
t376 = 0.1e1 / t442;
t727 = t363 * t376;
t249 = t540 * t727;
t375 = 0.1e1 / t413 ^ 2;
t546 = t375 * t595;
t500 = t363 * t546;
t414 = cos(qJ(2,2));
t664 = t414 * pkin(1);
t665 = t413 * pkin(2);
t264 = t664 + t665;
t627 = t264 * t404;
t451 = t500 * t627;
t195 = t209 * t419 + t421;
t318 = sin(t521);
t492 = cos(t521);
t516 = -t205 * t419 + t422;
t124 = t420 * t501 + ((-t405 * t318 + t414 * t492) * t516 + (t414 * t318 + t405 * t492) * t195) * t610;
t598 = t404 * t420;
t111 = -t264 * t598 + ((-(t405 * t195 + t414 * t516) * t665 - pkin(1) * t516) * t492 - ((t195 * t414 - t405 * t516) * t665 + pkin(1) * t195) * t318) * t413;
t479 = t111 * t500;
t108 = t479 + t124;
t559 = t111 / t405 ^ 2 * t437;
t471 = t434 / t373 ^ 2 * t559;
t537 = t405 * t598;
t685 = pkin(2) * t373;
t573 = t414 * t685;
t99 = t432 * t108 * t442;
t454 = (t99 + (t108 * t573 - t537) * pkin(1)) * t471;
t475 = t124 * t500;
t311 = qJ(3,2) + t321;
t288 = cos(t311);
t312 = -qJ(3,2) + t321;
t289 = cos(t312);
t175 = t492 * t720 + (t288 + t289) * pkin(2);
t387 = qJ(2,2) + qJ(3,2);
t329 = sin(t387);
t388 = qJ(2,2) - qJ(3,2);
t330 = sin(t388);
t579 = t329 + t330;
t246 = 0.1e1 / t579;
t639 = t175 * t246;
t102 = t479 / 0.2e1 + t124;
t64 = t99 + t102 * t573 * t720 + (-pkin(1) * t374 * t537 + t435 * t124) * t413;
t282 = sin(t311);
t283 = sin(t312);
t693 = pkin(1) * t318;
t172 = -0.2e1 * t693 + (-t282 - t283) * pkin(2);
t642 = t172 * t246;
t496 = t374 * t414 * t596;
t689 = pkin(1) * t404;
t91 = (-t108 * t405 * t689 + t374 * t420) * t413 + pkin(1) * t496;
t467 = t151 * t532 * t642 + t155 * t533 * t639 + t451 * t734 - t64 * t475 / 0.2e1 - t454 / 0.2e1 + t91 * t494 * t727;
t611 = t363 * t374;
t511 = t124 * (-t124 * t413 * t664 - t108 * t685) * t611;
t486 = t436 * t511;
t534 = t108 * t596;
t76 = t108 * t374 * t559;
t23 = (t139 / 0.2e1 + t136 / 0.2e1 + t226 / 0.2e1 - t486 / 0.2e1 + t76 / 0.2e1 + t249 / 0.2e1 + t467) * t404 + t534;
t731 = t23 * t404 ^ 2;
t427 = koppelP(1,2);
t431 = koppelP(1,1);
t206 = t347 * t431 + t348 * t427;
t210 = -t347 * t427 + t348 * t431;
t152 = -t383 * t206 + t210 * t397 + t399;
t657 = legFrame(1,3);
t522 = qJ(1,1) + t657;
t322 = qJ(2,1) + t522;
t305 = sin(t322);
t408 = sin(qJ(2,1));
t366 = 0.1e1 / t408;
t608 = t366 * t436;
t137 = t305 * t152 * t608;
t156 = -t206 * t397 - t383 * t210 + t400;
t308 = cos(t322);
t140 = t308 * t156 * t608;
t416 = cos(qJ(3,1));
t379 = 0.1e1 / t416;
t407 = sin(qJ(3,1));
t603 = t379 * t407;
t548 = t366 * t603;
t499 = t436 * t548;
t227 = t398 * t499;
t378 = t416 ^ 2;
t444 = t416 * t378;
t381 = 0.1e1 / t444;
t726 = t366 * t381;
t250 = t540 * t726;
t380 = 0.1e1 / t416 ^ 2;
t545 = t380 * t595;
t498 = t366 * t545;
t417 = cos(qJ(2,1));
t660 = t417 * pkin(1);
t661 = t416 * pkin(2);
t267 = t660 + t661;
t626 = t267 * t407;
t450 = t498 * t626;
t196 = t210 * t419 + t421;
t319 = sin(t522);
t493 = cos(t522);
t515 = -t206 * t419 + t422;
t122 = t420 * t499 + ((-t408 * t319 + t417 * t493) * t515 + (t417 * t319 + t408 * t493) * t196) * t608;
t597 = t407 * t420;
t112 = -t267 * t597 + ((-(t408 * t196 + t417 * t515) * t661 - pkin(1) * t515) * t493 - ((t196 * t417 - t408 * t515) * t661 + pkin(1) * t196) * t319) * t416;
t478 = t112 * t498;
t106 = t478 + t122;
t558 = t112 / t408 ^ 2 * t437;
t470 = t434 / t378 ^ 2 * t558;
t536 = t408 * t597;
t684 = pkin(2) * t378;
t572 = t417 * t684;
t97 = t432 * t106 * t444;
t456 = (t97 + (t106 * t572 - t536) * pkin(1)) * t470;
t476 = t122 * t498;
t100 = t478 / 0.2e1 + t122;
t62 = t97 + t100 * t572 * t720 + (-pkin(1) * t379 * t536 + t435 * t122) * t416;
t313 = qJ(3,1) + t322;
t290 = cos(t313);
t314 = -qJ(3,1) + t322;
t291 = cos(t314);
t176 = t493 * t720 + (t290 + t291) * pkin(2);
t389 = qJ(2,1) + qJ(3,1);
t331 = sin(t389);
t390 = qJ(2,1) - qJ(3,1);
t332 = sin(t390);
t578 = t331 + t332;
t247 = 0.1e1 / t578;
t638 = t176 * t247;
t284 = sin(t313);
t285 = sin(t314);
t692 = pkin(1) * t319;
t173 = -0.2e1 * t692 + (-t284 - t285) * pkin(2);
t641 = t173 * t247;
t495 = t379 * t417 * t596;
t688 = pkin(1) * t407;
t92 = (-t106 * t408 * t688 + t379 * t420) * t416 + pkin(1) * t495;
t466 = t152 * t532 * t641 + t156 * t533 * t638 + t450 * t734 - t62 * t476 / 0.2e1 - t456 / 0.2e1 + t92 * t494 * t726;
t609 = t366 * t379;
t513 = t122 * (-t122 * t416 * t660 - t106 * t684) * t609;
t488 = t436 * t513;
t562 = t106 * t596;
t74 = t106 * t379 * t558;
t24 = (t140 / 0.2e1 + t137 / 0.2e1 + t227 / 0.2e1 - t488 / 0.2e1 + t74 / 0.2e1 + t250 / 0.2e1 + t466) * t407 + t562;
t730 = t24 * t407 ^ 2;
t485 = t133 + t134 + t211 + t244 + t73;
t49 = t485 - t489;
t25 = t49 + t469;
t339 = sin(t654);
t343 = cos(t654);
t594 = t434 * t384;
t531 = t594 / 0.2e1;
t396 = cos(qJ(1,4));
t672 = t396 * g(2);
t673 = t396 * g(1);
t393 = sin(qJ(1,4));
t676 = t393 * g(2);
t683 = g(1) * t393;
t725 = t395 * (t25 * t720 - (t672 - t683) * t343 + (t673 + t676) * t339) - 0.2e1 * ((-t673 / 0.2e1 - t676 / 0.2e1) * t343 + (-t672 / 0.2e1 + t683 / 0.2e1) * t339 + pkin(1) * (t356 * t531 + (t477 + t473 / 0.2e1) * t109)) * t392;
t484 = t135 + t138 + t225 + t248 + t75;
t50 = t484 - t487;
t27 = t50 + t468;
t340 = sin(t655);
t344 = cos(t655);
t412 = cos(qJ(1,3));
t666 = t412 * g(2);
t667 = t412 * g(1);
t403 = sin(qJ(1,3));
t671 = t403 * g(2);
t682 = g(1) * t403;
t724 = t411 * (-(t666 - t682) * t344 + (t667 + t671) * t340 + t27 * t720) - 0.2e1 * ((-t667 / 0.2e1 - t671 / 0.2e1) * t344 + (-t666 / 0.2e1 + t682 / 0.2e1) * t340 + pkin(1) * (t370 * t531 + (t474 + t472 / 0.2e1) * t110)) * t402;
t483 = t136 + t139 + t226 + t249 + t76;
t51 = t483 - t486;
t28 = t51 + t467;
t341 = sin(t656);
t345 = cos(t656);
t415 = cos(qJ(1,2));
t662 = t415 * g(2);
t663 = t415 * g(1);
t406 = sin(qJ(1,2));
t670 = t406 * g(2);
t681 = g(1) * t406;
t723 = t414 * (-(t662 - t681) * t345 + (t663 + t670) * t341 + t28 * t720) - 0.2e1 * ((-t663 / 0.2e1 - t670 / 0.2e1) * t345 + (-t662 / 0.2e1 + t681 / 0.2e1) * t341 + pkin(1) * (t375 * t531 + (t475 + t471 / 0.2e1) * t111)) * t405;
t482 = t137 + t140 + t227 + t250 + t74;
t52 = t482 - t488;
t29 = t52 + t466;
t342 = sin(t657);
t346 = cos(t657);
t418 = cos(qJ(1,1));
t677 = g(2) * t418;
t409 = sin(qJ(1,1));
t678 = g(2) * t409;
t679 = g(1) * t418;
t680 = g(1) * t409;
t722 = t417 * (-(t677 - t680) * t346 + (t678 + t679) * t342 + t29 * t720) - 0.2e1 * ((-t679 / 0.2e1 - t678 / 0.2e1) * t346 + (-t677 / 0.2e1 + t680 / 0.2e1) * t342 + pkin(1) * (t380 * t531 + (t476 + t470 / 0.2e1) * t112)) * t408;
t721 = -0.2e1 * pkin(1);
t719 = -pkin(1) / 0.2e1;
t718 = pkin(1) / 0.2e1;
t717 = g(1) / 0.2e1;
t716 = -g(2) / 0.2e1;
t715 = t257 / 0.2e1;
t714 = t258 / 0.2e1;
t713 = -t260 / 0.2e1;
t712 = t280 / 0.2e1;
t711 = t281 / 0.2e1;
t710 = t282 / 0.2e1;
t709 = t283 / 0.2e1;
t708 = t284 / 0.2e1;
t707 = t285 / 0.2e1;
t706 = -t287 / 0.2e1;
t705 = -t289 / 0.2e1;
t704 = -t291 / 0.2e1;
t703 = -t324 / 0.2e1;
t325 = cos(t349);
t702 = t325 / 0.2e1;
t701 = -t328 / 0.2e1;
t700 = -t330 / 0.2e1;
t699 = -t332 / 0.2e1;
t333 = cos(t385);
t698 = t333 / 0.2e1;
t335 = cos(t387);
t697 = t335 / 0.2e1;
t337 = cos(t389);
t696 = t337 / 0.2e1;
t659 = t399 - g(2);
t658 = t400 - g(1);
t653 = t21 * t391;
t652 = t22 * t401;
t651 = t23 * t404;
t650 = t24 * t407;
t544 = t391 * t594;
t600 = t398 * t433;
t197 = t355 * t600 + t357 * t544;
t177 = t197 * t391 + t355 * t594;
t637 = t177 * t243;
t543 = t401 * t594;
t198 = t369 * t600 + t371 * t543;
t178 = t198 * t401 + t369 * t594;
t636 = t178 * t245;
t542 = t404 * t594;
t199 = t374 * t600 + t376 * t542;
t179 = t199 * t404 + t374 * t594;
t635 = t179 * t246;
t541 = t407 * t594;
t200 = t379 * t600 + t381 * t541;
t180 = t200 * t407 + t379 * t594;
t634 = t180 * t247;
t279 = -t423 + t316;
t181 = -t424 * cos(t279) + t428 * sin(t279);
t633 = t181 * t352;
t293 = -t423 + t320;
t182 = -t425 * cos(t293) + t429 * sin(t293);
t632 = t182 * t360;
t294 = -t423 + t321;
t183 = -t426 * cos(t294) + t430 * sin(t294);
t631 = t183 * t363;
t295 = -t423 + t322;
t184 = -t427 * cos(t295) + t431 * sin(t295);
t630 = t184 * t366;
t625 = t299 * t352;
t624 = t300 * t352;
t623 = t303 * t360;
t622 = t304 * t363;
t621 = t305 * t366;
t620 = t306 * t360;
t619 = t307 * t363;
t618 = t308 * t366;
t614 = t355 * t433;
t606 = t369 * t433;
t604 = t374 * t433;
t602 = t379 * t433;
t593 = g(2) * t715 + t259 * t717;
t592 = g(1) * t715 + t259 * t716;
t591 = g(2) * t712 + t286 * t717;
t590 = g(2) * t710 + t288 * t717;
t589 = g(2) * t708 + t290 * t717;
t588 = g(1) * t712 + t286 * t716;
t587 = g(1) * t710 + t288 * t716;
t586 = g(1) * t708 + t290 * t716;
t585 = g(1) * t300 + g(2) * t299;
t584 = g(1) * t306 + g(2) * t303;
t583 = g(1) * t307 + g(2) * t304;
t582 = g(1) * t308 + g(2) * t305;
t577 = 0.2e1 * t433;
t576 = 0.2e1 * t436;
t571 = t243 * t653;
t570 = t352 * t653;
t569 = t245 * t652;
t568 = t360 * t652;
t567 = t246 * t651;
t566 = t363 * t651;
t565 = t247 * t650;
t564 = t366 * t650;
t557 = t251 * t352 * t356;
t556 = t261 * t360 * t370;
t555 = t264 * t363 * t375;
t554 = t267 * t366 * t380;
t530 = g(1) * t299 - g(2) * t300;
t529 = g(1) * t303 - g(2) * t306;
t528 = g(1) * t304 - g(2) * t307;
t527 = g(1) * t305 - g(2) * t308;
t526 = 0.2e1 * t570;
t525 = 0.2e1 * t568;
t524 = 0.2e1 * t566;
t523 = 0.2e1 * t564;
t510 = t391 * t557;
t509 = t401 * t556;
t508 = t404 * t555;
t507 = t407 * t554;
t465 = g(1) * t714 + g(2) * t713;
t464 = g(1) * t713 + t258 * t716;
t463 = g(1) * t711 + g(2) * t706;
t462 = g(1) * t709 + g(2) * t705;
t461 = g(1) * t707 + g(2) * t704;
t460 = g(1) * t706 + t281 * t716;
t459 = g(1) * t705 + t283 * t716;
t458 = g(1) * t704 + t285 * t716;
t338 = cos(t390);
t336 = cos(t388);
t334 = cos(t386);
t326 = cos(t350);
t219 = t346 * g(1) + t342 * g(2);
t218 = t345 * g(1) + t341 * g(2);
t217 = t344 * g(1) + t340 * g(2);
t216 = t343 * g(1) + t339 * g(2);
t215 = t342 * g(1) - t346 * g(2);
t214 = t341 * g(1) - t345 * g(2);
t213 = t340 * g(1) - t344 * g(2);
t212 = t339 * g(1) - t343 * g(2);
t202 = -t347 * t397 - t348 * t383;
t201 = -t347 * t383 + t348 * t397;
t168 = t200 * t416 - t380 * t541;
t167 = t199 * t413 - t375 * t542;
t166 = t198 * t410 - t370 * t543;
t165 = t197 * t394 - t356 * t544;
t164 = -t215 * t409 + t219 * t418;
t163 = -t214 * t406 + t218 * t415;
t162 = -t213 * t403 + t217 * t412;
t161 = t215 * t418 + t219 * t409;
t160 = t214 * t415 + t218 * t406;
t159 = t213 * t412 + t217 * t403;
t158 = -t212 * t393 + t216 * t396;
t157 = t212 * t396 + t216 * t393;
t121 = t124 ^ 2;
t120 = t123 ^ 2;
t119 = t122 ^ 2;
t117 = t118 ^ 2;
t116 = (t206 * t176 - 0.2e1 * t210 * (t692 + (t707 + t708) * pkin(2))) * t247 * t595;
t115 = (t205 * t175 - 0.2e1 * t209 * (t693 + (t709 + t710) * pkin(2))) * t246 * t595;
t114 = (t204 * t174 - 0.2e1 * t208 * (t694 + (t711 + t712) * pkin(2))) * t245 * t595;
t113 = (t203 * t170 - 0.2e1 * t207 * (t695 + (t714 + t715) * pkin(2))) * t243 * t595;
t105 = t108 ^ 2;
t104 = t107 ^ 2;
t103 = t106 ^ 2;
t95 = t96 ^ 2;
t89 = 0.2e1 * t106 * t495 + t408 * t200;
t88 = 0.2e1 * t108 * t496 + t199 * t405;
t87 = 0.2e1 * t107 * t497 + t198 * t402;
t85 = t392 * t197 + 0.2e1 * t504 * t96;
t48 = (t120 * t411 - t402 * t50) * pkin(1) + t584;
t47 = (t119 * t408 + t417 * t52) * pkin(1) + t527;
t46 = (t121 * t405 + t414 * t51) * pkin(1) + t528;
t45 = (t119 * t417 - t408 * t52) * pkin(1) + t582;
t44 = (t121 * t414 - t405 * t51) * pkin(1) + t583;
t43 = (t120 * t402 + t411 * t50) * pkin(1) + t529;
t42 = (t117 * t395 - t392 * t49) * pkin(1) + t585;
t41 = (t117 * t392 + t395 * t49) * pkin(1) + t530;
t40 = ((t331 - t332) * t52 + (-t337 + t338) * t119) * t719 + t458 + t589;
t39 = ((t329 - t330) * t51 + (-t335 + t336) * t121) * t719 + t459 + t590;
t38 = ((t327 - t328) * t50 + (-t333 + t334) * t120) * t719 + t460 + t591;
t37 = ((t337 + t338) * t52 + t578 * t119) * t718 + t461 + t586;
t36 = ((t335 + t336) * t51 + t579 * t121) * t718 + t462 + t587;
t35 = ((t333 + t334) * t50 + t580 * t120) * t718 + t463 + t588;
t34 = ((t323 - t324) * t49 + (-t325 + t326) * t117) * t719 + t464 + t593;
t33 = ((t325 + t326) * t49 + t581 * t117) * t718 + t465 + t592;
t32 = -t456 + (-t513 + ((t152 * t173 - t156 * t176) * t247 + (-t381 * t420 * t92 + (-t122 * t62 - t398 * t626) * t380) * t366) * t433) * t436 + t482;
t31 = -t454 + (-t511 + ((t151 * t172 - t155 * t175) * t246 + (-t376 * t420 * t91 + (-t124 * t64 - t398 * t627) * t375) * t363) * t433) * t436 + t483;
t30 = -t455 + (-t512 + ((t150 * t171 - t154 * t174) * t245 + (-t371 * t420 * t90 + (-t123 * t63 - t398 * t628) * t370) * t360) * t433) * t436 + t484;
t26 = -t457 + (-t514 + ((t149 * t169 - t153 * t170) * t243 + (-t357 * t420 * t86 + (-t118 * t61 - t398 * t629) * t356) * t352) * t433) * t436 + t485;
t20 = (-t100 * t112 * t545 + t29 * t417) * t720 + t527;
t19 = (-t102 * t111 * t546 + t28 * t414) * t720 + t528;
t18 = (-t101 * t110 * t547 + t27 * t411) * t720 + t529;
t17 = (t100 * t417 * t478 + t408 * t29) * t721 + t582;
t16 = (t102 * t414 * t479 + t405 * t28) * t721 + t583;
t15 = (t101 * t411 * t480 + t402 * t27) * t721 + t584;
t14 = (-t109 * t551 * t94 + t25 * t395) * t720 + t530;
t13 = (t395 * t481 * t94 + t392 * t25) * t721 + t585;
t12 = 0.2e1 * t407 * t32 * t416 + (-0.2e1 * t379 + 0.4e1 * t416) * t562;
t11 = 0.2e1 * t404 * t31 * t413 + (-0.2e1 * t374 + 0.4e1 * t413) * t534;
t10 = 0.2e1 * t401 * t30 * t410 + (-0.2e1 * t369 + 0.4e1 * t410) * t535;
t9 = -0.2e1 * t96 * t552 + (0.2e1 * t26 * t391 + 0.4e1 * t563) * t394;
t8 = t722 * t416 - t89 * t688;
t7 = -pkin(1) * t89 * t416 - t722 * t407;
t6 = t723 * t413 - t88 * t689;
t5 = -pkin(1) * t88 * t413 - t723 * t404;
t4 = t724 * t410 - t87 * t690;
t3 = -pkin(1) * t87 * t410 - t724 * t401;
t2 = t725 * t394 - t85 * t691;
t1 = -pkin(1) * t85 * t394 - t725 * t391;
t53 = [(t49 * t624 + t50 * t620 + t51 * t619 + t52 * t618) * t436, (t157 * t624 + t159 * t620 + t160 * t619 + t161 * t618) * t436, (t158 * t624 + t162 * t620 + t163 * t619 + t164 * t618) * t436, (t26 * t624 + t30 * t620 + t31 * t619 + t32 * t618 + (-t26 * t644 - t30 * t640 - t31 * t639 - t32 * t638) * t433) * t436, (t14 * t624 + t18 * t620 + t19 * t619 + t20 * t618 + (-t41 * t644 - t43 * t640 - t46 * t639 - t47 * t638) * t433) * t436, (t13 * t624 + t15 * t620 + t16 * t619 + t17 * t618 + (-t42 * t644 - t44 * t639 - t45 * t638 - t48 * t640) * t433) * t436, (t300 * t526 + t306 * t525 + t307 * t524 + t308 * t523 + (-t170 * t571 - t174 * t569 - t175 * t567 - t176 * t565) * t577) * t436, (t10 * t620 + t11 * t619 + t12 * t618 + t9 * t624 + (-t10 * t640 - t11 * t639 - t12 * t638 - t644 * t9) * t433) * t436, (t177 * t624 + t178 * t620 + t179 * t619 + t180 * t618 + (-t170 * t637 - t174 * t636 - t175 * t635 - t176 * t634) * t433) * t436, (t165 * t624 + t166 * t620 + t167 * t619 + t168 * t618 + (-t165 * t644 - t166 * t640 - t167 * t639 - t168 * t638) * t433) * t436, 0, (t2 * t624 + t4 * t620 + t6 * t619 + t8 * t618 + (-t33 * t644 - t35 * t640 - t36 * t639 - t37 * t638) * t433) * t436, (t1 * t624 + t3 * t620 + t5 * t619 + t7 * t618 + (-t34 * t644 - t38 * t640 - t39 * t639 - t40 * t638) * t433) * t436, 0, t202, -t201, t658; (t49 * t625 + t50 * t623 + t51 * t622 + t52 * t621) * t436, (t157 * t625 + t159 * t623 + t160 * t622 + t161 * t621) * t436, (t158 * t625 + t162 * t623 + t163 * t622 + t164 * t621) * t436, (t26 * t625 + t30 * t623 + t31 * t622 + t32 * t621 + (t26 * t645 + t30 * t643 + t31 * t642 + t32 * t641) * t433) * t436, (t14 * t625 + t18 * t623 + t19 * t622 + t20 * t621 + (t41 * t645 + t43 * t643 + t46 * t642 + t47 * t641) * t433) * t436, (t13 * t625 + t15 * t623 + t16 * t622 + t17 * t621 + (t42 * t645 + t44 * t642 + t45 * t641 + t48 * t643) * t433) * t436, (t299 * t526 + t303 * t525 + t304 * t524 + t305 * t523 + (t169 * t571 + t171 * t569 + t172 * t567 + t173 * t565) * t577) * t436, (t10 * t623 + t11 * t622 + t12 * t621 + t9 * t625 + (t10 * t643 + t11 * t642 + t12 * t641 + t645 * t9) * t433) * t436, (t177 * t625 + t178 * t623 + t179 * t622 + t180 * t621 + (t169 * t637 + t171 * t636 + t172 * t635 + t173 * t634) * t433) * t436, (t165 * t625 + t166 * t623 + t167 * t622 + t168 * t621 + (t165 * t645 + t166 * t643 + t167 * t642 + t168 * t641) * t433) * t436, 0, (t2 * t625 + t4 * t623 + t6 * t622 + t8 * t621 + (t33 * t645 + t35 * t643 + t36 * t642 + t37 * t641) * t433) * t436, (t1 * t625 + t3 * t623 + t5 * t622 + t7 * t621 + (t34 * t645 + t38 * t643 + t39 * t642 + t40 * t641) * t433) * t436, 0, t201, t202, t659; (t49 * t553 + t50 * t550 + t51 * t549 + t52 * t548) * t436, (t157 * t553 + t159 * t550 + t160 * t549 + t161 * t548) * t436, (t158 * t553 + t162 * t550 + t163 * t549 + t164 * t548) * t436, (t26 * t553 + t30 * t550 + t31 * t549 + t32 * t548 + (-t26 * t510 - t30 * t509 - t31 * t508 - t32 * t507) * t433) * t436, (t14 * t553 + t18 * t550 + t19 * t549 + t20 * t548 + (-t41 * t510 - t43 * t509 - t46 * t508 - t47 * t507) * t433) * t436, (t13 * t553 + t15 * t550 + t16 * t549 + t17 * t548 + (-t42 * t510 - t44 * t508 - t45 * t507 - t48 * t509) * t433) * t436, (t609 * t730 + t611 * t731 + t613 * t732 + t617 * t733) * t576 + (-t407 * t103 - t401 * t104 - t404 * t105 - t391 * t95 + (-t554 * t730 - t555 * t731 - t556 * t732 - t557 * t733) * t576) * t433, (t10 * t550 + t11 * t549 + t12 * t548 + t553 * t9) * t436 + (t379 * t103 * (-0.2e1 * t378 + 0.1e1) + t374 * t105 * (-0.2e1 * t373 + 0.1e1) + t369 * t104 * (-0.2e1 * t368 + 0.1e1) + t355 * t95 * (-0.2e1 * t354 + 0.1e1) + (-t10 * t509 - t11 * t508 - t12 * t507 - t510 * t9) * t436) * t433, (t177 * t553 + t178 * t550 + t179 * t549 + t180 * t548) * t436 + (t26 * t615 + t30 * t607 + t31 * t605 + t32 * t603 + (-t177 * t510 - t178 * t509 - t179 * t508 - t180 * t507) * t436) * t433, (t165 * t553 + t166 * t550 + t167 * t549 + t168 * t548) * t436 + (t26 + t30 + t31 + t32 + (-t165 * t510 - t166 * t509 - t167 * t508 - t168 * t507) * t436) * t433, (t197 * t355 + t198 * t369 + t199 * t374 + t200 * t379) * t433, t8 * t499 - t37 * t450 + (-g(3) * t416 + ((-t338 / 0.2e1 + t696) * t52 + (t331 / 0.2e1 + t699) * t119) * pkin(1) - t461 + t586) * t602 + t6 * t501 - t36 * t451 + (-g(3) * t413 + ((-t336 / 0.2e1 + t697) * t51 + (t329 / 0.2e1 + t700) * t121) * pkin(1) - t462 + t587) * t604 + t4 * t503 - t35 * t452 + (-g(3) * t410 + ((-t334 / 0.2e1 + t698) * t50 + (t327 / 0.2e1 + t701) * t120) * pkin(1) - t463 + t588) * t606 + t2 * t506 - t33 * t453 + (-g(3) * t394 + ((-t326 / 0.2e1 + t702) * t49 + (t323 / 0.2e1 + t703) * t117) * pkin(1) - t465 + t592) * t614, t7 * t499 - t40 * t450 + (g(3) * t407 + ((-t331 / 0.2e1 + t699) * t52 + (t338 / 0.2e1 + t696) * t119) * pkin(1) - t458 + t589) * t602 + t5 * t501 - t39 * t451 + (g(3) * t404 + ((-t329 / 0.2e1 + t700) * t51 + (t336 / 0.2e1 + t697) * t121) * pkin(1) - t459 + t590) * t604 + t3 * t503 - t38 * t452 + (g(3) * t401 + ((-t327 / 0.2e1 + t701) * t50 + (t334 / 0.2e1 + t698) * t120) * pkin(1) - t460 + t591) * t606 + t1 * t506 - t34 * t453 + (g(3) * t391 + ((-t323 / 0.2e1 + t703) * t49 + (t326 / 0.2e1 + t702) * t117) * pkin(1) - t464 + t593) * t614, 0, 0, 0, t398 - g(3); (t49 * t633 + t50 * t632 + t51 * t631 + t52 * t630) * t436, (t157 * t633 + t159 * t632 + t160 * t631 + t161 * t630) * t436, (t158 * t633 + t162 * t632 + t163 * t631 + t164 * t630) * t436, t113 * t26 + t114 * t30 + t115 * t31 + t116 * t32 + (t26 * t633 + t30 * t632 + t31 * t631 + t32 * t630) * t436, t113 * t41 + t114 * t43 + t115 * t46 + t116 * t47 + (t14 * t633 + t18 * t632 + t19 * t631 + t20 * t630) * t436, t113 * t42 + t114 * t48 + t115 * t44 + t116 * t45 + (t13 * t633 + t15 * t632 + t16 * t631 + t17 * t630) * t436, 0.2e1 * t113 * t653 + 0.2e1 * t114 * t652 + 0.2e1 * t115 * t651 + 0.2e1 * t116 * t650 + (t181 * t570 + t182 * t568 + t183 * t566 + t184 * t564) * t576, t114 * t10 + t115 * t11 + t113 * t9 + t116 * t12 + (t10 * t632 + t11 * t631 + t12 * t630 + t633 * t9) * t436, t113 * t177 + t114 * t178 + t115 * t179 + t116 * t180 + (t177 * t633 + t178 * t632 + t179 * t631 + t180 * t630) * t436, t113 * t165 + t114 * t166 + t115 * t167 + t116 * t168 + (t165 * t633 + t166 * t632 + t167 * t631 + t168 * t630) * t436, 0, t113 * t33 + t114 * t35 + t115 * t36 + t116 * t37 + (t2 * t633 + t4 * t632 + t6 * t631 + t630 * t8) * t436, t113 * t34 + t114 * t38 + t115 * t39 + t116 * t40 + (t1 * t633 + t3 * t632 + t5 * t631 + t630 * t7) * t436, t397, -t347 * t658 + t348 * t659, -t347 * t659 - t348 * t658, 0;];
tauX_reg  = t53;
