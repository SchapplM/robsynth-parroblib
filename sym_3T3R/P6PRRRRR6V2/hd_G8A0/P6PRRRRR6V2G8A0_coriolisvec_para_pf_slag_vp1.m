% Calculate vector of centrifugal and coriolis load on the joints for
% P6PRRRRR6V2G8A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% xDP [6x1]
%   Generalized platform velocities
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,alpha3,alpha4,d2,d3,d4,theta1]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% taucX [6x1]
%   forces required to compensate Coriolis and centrifugal joint torques
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-18 12:11
% Revision: 36f6366a01c4a552c0708fcd8ed3e0fb9da693e2 (2019-05-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taucX = P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1(xP, xDP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(10,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(xDP) && all(size(xDP) == [6 1]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: xDP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: pkin has to be [10x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6PRRRRR6V2G8A0_coriolisvec_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From coriolisvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-18 04:23:48
% EndTime: 2019-05-18 04:35:13
% DurationCPUTime: 782.16s
% Computational Cost: add. (3236523->3642), mult. (8164143->5913), div. (41148->60), fcn. (7442520->74), ass. (0->2123)
t5767 = xP(4);
t5683 = sin(t5767);
t5686 = cos(t5767);
t6448 = t5683 * t5686;
t6945 = 0.2e1 * t6448;
t5770 = rSges(4,2);
t5771 = rSges(4,1);
t6732 = m(4) * t5771;
t5996 = (t5770 * t6732 - Icges(4,4));
t6928 = 2 * t5996;
t5766 = xP(5);
t5682 = sin(t5766);
t5685 = cos(t5766);
t6812 = koppelP(6,3);
t5765 = xP(6);
t5681 = sin(t5765);
t5684 = cos(t5765);
t6818 = koppelP(6,2);
t6824 = koppelP(6,1);
t6861 = -t5681 * t6818 + t5684 * t6824;
t5297 = t5682 * t6812 + t5685 * t6861;
t5759 = xDP(5);
t6439 = t5686 * t5759;
t5760 = xDP(4);
t5474 = t5681 * t6824 + t5684 * t6818;
t6839 = -t5682 * t6861 + t5685 * t6812;
t6895 = t5474 * t5686 - t5683 * t6839;
t6563 = t6895 * t5760;
t6944 = t5297 * t6439 - t6563;
t6447 = t5683 * t5759;
t6455 = t5683 * t5474;
t5105 = t5686 * t6839 + t6455;
t6557 = t5105 * t5760;
t6943 = -t5297 * t6447 + t6557;
t6813 = koppelP(5,3);
t6819 = koppelP(5,2);
t6825 = koppelP(5,1);
t6860 = -t5681 * t6819 + t5684 * t6825;
t5298 = t5682 * t6813 + t5685 * t6860;
t5475 = t5681 * t6825 + t5684 * t6819;
t6838 = -t5682 * t6860 + t5685 * t6813;
t6896 = t5475 * t5686 - t5683 * t6838;
t6562 = t6896 * t5760;
t6942 = t5298 * t6439 - t6562;
t6454 = t5683 * t5475;
t5108 = t5686 * t6838 + t6454;
t6556 = t5108 * t5760;
t6941 = -t5298 * t6447 + t6556;
t6814 = koppelP(4,3);
t6820 = koppelP(4,2);
t6826 = koppelP(4,1);
t6859 = -t5681 * t6820 + t5684 * t6826;
t5299 = t5682 * t6814 + t5685 * t6859;
t5476 = t5681 * t6826 + t5684 * t6820;
t6837 = -t5682 * t6859 + t5685 * t6814;
t6897 = t5476 * t5686 - t5683 * t6837;
t6561 = t6897 * t5760;
t6940 = t5299 * t6439 - t6561;
t6453 = t5683 * t5476;
t5111 = t5686 * t6837 + t6453;
t6555 = t5111 * t5760;
t6939 = -t5299 * t6447 + t6555;
t6815 = koppelP(3,3);
t6821 = koppelP(3,2);
t6827 = koppelP(3,1);
t6858 = -t5681 * t6821 + t5684 * t6827;
t5300 = t5682 * t6815 + t5685 * t6858;
t5477 = t5681 * t6827 + t5684 * t6821;
t6836 = -t5682 * t6858 + t5685 * t6815;
t6898 = t5477 * t5686 - t5683 * t6836;
t6560 = t6898 * t5760;
t6938 = t5300 * t6439 - t6560;
t6452 = t5683 * t5477;
t5114 = t5686 * t6836 + t6452;
t6554 = t5114 * t5760;
t6937 = -t5300 * t6447 + t6554;
t6816 = koppelP(2,3);
t6822 = koppelP(2,2);
t6828 = koppelP(2,1);
t6857 = -t5681 * t6822 + t5684 * t6828;
t5301 = t5682 * t6816 + t5685 * t6857;
t5478 = t5681 * t6828 + t5684 * t6822;
t6835 = -t5682 * t6857 + t5685 * t6816;
t6899 = t5478 * t5686 - t5683 * t6835;
t6559 = t6899 * t5760;
t6936 = t5301 * t6439 - t6559;
t6451 = t5683 * t5478;
t5117 = t5686 * t6835 + t6451;
t6553 = t5117 * t5760;
t6935 = -t5301 * t6447 + t6553;
t6817 = koppelP(1,3);
t6823 = koppelP(1,2);
t6829 = koppelP(1,1);
t6856 = -t5681 * t6823 + t5684 * t6829;
t5302 = t5682 * t6817 + t5685 * t6856;
t5479 = t5681 * t6829 + t5684 * t6823;
t6834 = -t5682 * t6856 + t5685 * t6817;
t6900 = t5479 * t5686 - t5683 * t6834;
t6558 = t6900 * t5760;
t6934 = t5302 * t6439 - t6558;
t6450 = t5683 * t5479;
t5120 = t5686 * t6834 + t6450;
t6552 = t5120 * t5760;
t6933 = -t5302 * t6447 + t6552;
t5769 = rSges(4,3);
t5581 = t5769 * t6732 - Icges(4,5);
t6498 = t5581 * t5685;
t5449 = t5681 * t6498;
t5628 = t5684 ^ 2;
t6800 = 0.2e1 * t5628;
t6256 = t5996 * t6800;
t6460 = t5682 * t5996;
t5580 = m(4) * t5769 * t5770 - Icges(4,6);
t6500 = t5580 * t5685;
t5711 = t5770 ^ 2;
t5712 = t5771 ^ 2;
t6854 = (-t5711 + t5712) * m(4) + Icges(4,2) - Icges(4,1);
t6517 = t6854 * t5681;
t6908 = t5684 * (-t5682 * t6517 + t6500);
t4989 = -t5682 * t6256 + t5449 + t6460 + t6908;
t5630 = t5686 ^ 2;
t5629 = t5685 ^ 2;
t6257 = 0.2e1 * t6498;
t6058 = t5682 * t6257;
t6497 = t5996 * t5681;
t6518 = t6854 * t5628;
t6799 = 0.2e1 * t5629;
t6790 = t6799 - 0.4e1;
t6502 = t5580 * t5681;
t5710 = t5769 ^ 2;
t6881 = (-t5710 + t5711) * m(4) + Icges(4,3) - Icges(4,2);
t6458 = t5682 * t5685;
t6931 = -0.2e1 * t6458;
t6888 = t6881 * t5629 + t6502 * t6931;
t6929 = (-t6497 * t6790 + t6058) * t5684 + (t5629 - 0.2e1) * t6518 + t6854 + t6888;
t6932 = t4989 * t6945 - t5630 * t6929;
t6465 = t5681 * t5684;
t5830 = t6465 * t6928 - t6518;
t5706 = cos(pkin(5));
t5691 = t5706 ^ 2;
t6789 = t5691 - 0.1e1;
t5608 = t5682 * t5760;
t5758 = xDP(6);
t6874 = t5608 + t5758;
t6891 = t5681 * t6874;
t5845 = t6854 * t6891;
t6349 = t5759 * t5581;
t6464 = t5681 * t5758;
t5277 = -t6464 * t6854 + 0.2e1 * t6349;
t6036 = t5277 * t5629 - t6349;
t6930 = 0.2e1 * t5845 + t6036;
t5690 = t5706 * t5691;
t6797 = 0.2e1 * t5706;
t6315 = -0.2e1 * t5690 + t6797;
t6461 = t5681 * t5771;
t5472 = t5684 * t5770 + t6461;
t6445 = t5684 * t5771;
t5471 = t5681 * t5770 - t6445;
t6441 = t5685 * t5769;
t6846 = t5471 * t5682 + t6441;
t5022 = -t5472 * t5686 + t5683 * t6846;
t5707 = cos(pkin(4));
t5701 = sin(pkin(6));
t5627 = t5701 * pkin(9);
t6466 = (t5706 + 0.1e1) * (t5706 - 0.1e1);
t6229 = pkin(3) * t6466;
t5937 = t6229 * t5627;
t5885 = t5707 * t5937;
t5389 = 0.2e1 * t5885;
t5731 = cos(qJ(3,6));
t5692 = t5731 ^ 2;
t5732 = cos(qJ(2,6));
t6391 = t5706 * t5732;
t6125 = t5701 * t6391;
t6015 = pkin(9) * t6125;
t5777 = pkin(3) ^ 2;
t5775 = pkin(9) ^ 2;
t5705 = cos(pkin(6));
t5689 = t5705 ^ 2;
t6437 = t5689 * t5775;
t6056 = -t5775 + t6437;
t5565 = t5777 + t6056;
t5726 = sin(qJ(2,6));
t6363 = t5726 * t5565;
t5702 = sin(pkin(5));
t5703 = sin(pkin(4));
t6422 = t5702 * t5703;
t6176 = (pkin(3) * t6015 - t6363 / 0.2e1) * t6422;
t5046 = (t5389 - 0.2e1 * t6176) * t5692;
t6736 = pkin(9) * t5689;
t6209 = pkin(9) - t6736;
t5725 = sin(qJ(3,6));
t6434 = t5701 * t5725;
t5481 = pkin(2) * t6434 + t6209;
t6419 = t5702 * t5726;
t5358 = t5481 * t6419;
t6421 = t5702 * t5706;
t5585 = pkin(3) * t6421;
t6733 = pkin(9) * t5705;
t5614 = pkin(8) + t6733;
t6206 = t5725 * t6789;
t5265 = t5614 * t6206 + t5585;
t5798 = t5265 * t5732;
t6220 = t5691 * t5627;
t6077 = pkin(3) * t6220;
t6435 = t5701 * t5706;
t6218 = pkin(9) * t6435;
t6016 = t5702 * t6218;
t5920 = t5614 * t6016;
t5365 = t5725 * t5920;
t5659 = pkin(2) * t5725;
t5539 = t5659 + t5627;
t6324 = pkin(3) * t5539 + t5365;
t6734 = pkin(9) * t5703;
t6099 = (t5701 * t5798 + t5358) * t6734 + t5046 + (-t6077 + t6324) * t5707;
t5733 = cos(qJ(3,5));
t5693 = t5733 ^ 2;
t5734 = cos(qJ(2,5));
t6390 = t5706 * t5734;
t6124 = t5701 * t6390;
t6014 = pkin(9) * t6124;
t5728 = sin(qJ(2,5));
t6361 = t5728 * t5565;
t6175 = (pkin(3) * t6014 - t6361 / 0.2e1) * t6422;
t5047 = (t5389 - 0.2e1 * t6175) * t5693;
t5727 = sin(qJ(3,5));
t6432 = t5701 * t5727;
t5482 = pkin(2) * t6432 + t6209;
t6418 = t5702 * t5728;
t5359 = t5482 * t6418;
t6205 = t5727 * t6789;
t5266 = t5614 * t6205 + t5585;
t5797 = t5266 * t5734;
t5366 = t5727 * t5920;
t5660 = pkin(2) * t5727;
t5540 = t5660 + t5627;
t6323 = pkin(3) * t5540 + t5366;
t6098 = (t5701 * t5797 + t5359) * t6734 + t5047 + (-t6077 + t6323) * t5707;
t5735 = cos(qJ(3,4));
t5694 = t5735 ^ 2;
t5736 = cos(qJ(2,4));
t6389 = t5706 * t5736;
t6123 = t5701 * t6389;
t6013 = pkin(9) * t6123;
t5730 = sin(qJ(2,4));
t6359 = t5730 * t5565;
t6174 = (pkin(3) * t6013 - t6359 / 0.2e1) * t6422;
t5048 = (t5389 - 0.2e1 * t6174) * t5694;
t5729 = sin(qJ(3,4));
t6430 = t5701 * t5729;
t5483 = pkin(2) * t6430 + t6209;
t6417 = t5702 * t5730;
t5360 = t5483 * t6417;
t6201 = t6789 * t5729;
t5267 = t5614 * t6201 + t5585;
t5796 = t5267 * t5736;
t5367 = t5729 * t5920;
t5661 = pkin(2) * t5729;
t5541 = t5661 + t5627;
t6322 = pkin(3) * t5541 + t5367;
t6097 = (t5701 * t5796 + t5360) * t6734 + t5048 + (-t6077 + t6322) * t5707;
t5749 = cos(qJ(3,3));
t5696 = t5749 ^ 2;
t5750 = cos(qJ(2,3));
t6385 = t5706 * t5750;
t6122 = t5701 * t6385;
t6012 = pkin(9) * t6122;
t5744 = sin(qJ(2,3));
t6357 = t5744 * t5565;
t6173 = (pkin(3) * t6012 - t6357 / 0.2e1) * t6422;
t5053 = (t5389 - 0.2e1 * t6173) * t5696;
t5743 = sin(qJ(3,3));
t6428 = t5701 * t5743;
t5487 = pkin(2) * t6428 + t6209;
t6416 = t5702 * t5744;
t5362 = t5487 * t6416;
t6204 = t5743 * t6789;
t5268 = t5614 * t6204 + t5585;
t5795 = t5268 * t5750;
t5368 = t5743 * t5920;
t5678 = pkin(2) * t5743;
t5545 = t5678 + t5627;
t6321 = pkin(3) * t5545 + t5368;
t6096 = (t5701 * t5795 + t5362) * t6734 + t5053 + (-t6077 + t6321) * t5707;
t5751 = cos(qJ(3,2));
t5697 = t5751 ^ 2;
t5752 = cos(qJ(2,2));
t6384 = t5706 * t5752;
t6121 = t5701 * t6384;
t6011 = pkin(9) * t6121;
t5746 = sin(qJ(2,2));
t6355 = t5746 * t5565;
t6172 = (pkin(3) * t6011 - t6355 / 0.2e1) * t6422;
t5054 = (t5389 - 0.2e1 * t6172) * t5697;
t5745 = sin(qJ(3,2));
t6426 = t5701 * t5745;
t5488 = pkin(2) * t6426 + t6209;
t6415 = t5702 * t5746;
t5363 = t5488 * t6415;
t6203 = t5745 * t6789;
t5269 = t5614 * t6203 + t5585;
t5794 = t5269 * t5752;
t5369 = t5745 * t5920;
t5679 = pkin(2) * t5745;
t5546 = t5679 + t5627;
t6320 = pkin(3) * t5546 + t5369;
t6095 = (t5701 * t5794 + t5363) * t6734 + t5054 + (-t6077 + t6320) * t5707;
t5753 = cos(qJ(3,1));
t5698 = t5753 ^ 2;
t5754 = cos(qJ(2,1));
t6383 = t5706 * t5754;
t6120 = t5701 * t6383;
t6010 = pkin(9) * t6120;
t5748 = sin(qJ(2,1));
t6353 = t5748 * t5565;
t6171 = (pkin(3) * t6010 - t6353 / 0.2e1) * t6422;
t5055 = (t5389 - 0.2e1 * t6171) * t5698;
t5747 = sin(qJ(3,1));
t6424 = t5701 * t5747;
t5489 = pkin(2) * t6424 + t6209;
t6414 = t5702 * t5748;
t5364 = t5489 * t6414;
t6202 = t5747 * t6789;
t5270 = t5614 * t6202 + t5585;
t5793 = t5270 * t5754;
t5370 = t5747 * t5920;
t5680 = pkin(2) * t5747;
t5547 = t5680 + t5627;
t6319 = pkin(3) * t5547 + t5370;
t6094 = (t5701 * t5793 + t5364) * t6734 + t5055 + (-t6077 + t6319) * t5707;
t6352 = t5758 * t5996;
t6927 = -0.2e1 * t6352;
t6443 = t5685 * t5758;
t5072 = t5474 * t6443 - t5759 * t6839;
t6926 = t5072 * t5683;
t6925 = t5072 * t5686;
t5073 = t5475 * t6443 - t5759 * t6838;
t6924 = t5073 * t5683;
t6923 = t5073 * t5686;
t5074 = t5476 * t6443 - t5759 * t6837;
t6922 = t5074 * t5683;
t6921 = t5074 * t5686;
t5075 = t5477 * t6443 - t5759 * t6836;
t6920 = t5075 * t5683;
t6919 = t5075 * t5686;
t5076 = t5478 * t6443 - t5759 * t6835;
t6918 = t5076 * t5683;
t6917 = t5076 * t5686;
t5077 = t5479 * t6443 - t5759 * t6834;
t6916 = t5077 * t5683;
t6915 = t5077 * t5686;
t5772 = rSges(3,2) ^ 2;
t5773 = rSges(3,1) ^ 2;
t5550 = m(3) * (-t5772 + t5773) - Icges(3,1) + Icges(3,2);
t6914 = t5550 * t5692;
t6913 = t5550 * t5693;
t6912 = t5550 * t5694;
t6911 = t5550 * t5696;
t6910 = t5550 * t5697;
t6909 = t5550 * t5698;
t6788 = 0.2e1 * t5691 - 0.2e1;
t6890 = t6788 * t5627;
t6907 = t5725 * t6890;
t6906 = t5727 * t6890;
t6905 = t5729 * t6890;
t6904 = t5743 * t6890;
t6903 = t5745 * t6890;
t6902 = t5747 * t6890;
t6463 = t5681 * t5759;
t5464 = t5580 * t6463;
t6801 = 0.2e1 * t5464;
t5314 = t6801 - t6352;
t6901 = -t5314 * t5629 + t5464;
t5718 = legFrame(1,3);
t5636 = sin(t5718);
t5648 = cos(t5718);
t5700 = sin(pkin(10));
t5704 = cos(pkin(10));
t5410 = t5636 * t5704 + t5648 * t5700;
t5416 = -t5636 * t5700 + t5648 * t5704;
t5724 = legFrame(1,1);
t5642 = sin(t5724);
t5654 = cos(t5724);
t5742 = legFrame(1,2);
t5667 = sin(t5742);
t6468 = t5654 * t5667;
t5133 = t5410 * t6468 + t5416 * t5642;
t5134 = -t5410 * t5642 + t5416 * t6468;
t6365 = t5707 * t5754;
t4851 = (-t5133 * t5748 + t5134 * t6365) * t5706 - t5134 * t6422;
t6368 = t5707 * t5748;
t4966 = t5133 * t5754 + t5134 * t6368;
t4704 = (-pkin(3) * t4851 - t4966 * t5627) * t5753 - t5747 * (-pkin(3) * t4966 + t4851 * t5627);
t6474 = t5642 * t5667;
t5143 = t5410 * t5654 + t5416 * t6474;
t5149 = t5410 * t6474 - t5416 * t5654;
t4852 = (t5143 * t6365 - t5149 * t5748) * t5706 - t5143 * t6422;
t4969 = t5143 * t6368 + t5149 * t5754;
t4707 = (pkin(3) * t4852 + t4969 * t5627) * t5753 + t5747 * (-pkin(3) * t4969 + t4852 * t5627);
t6145 = t5614 * t6421;
t5452 = t5707 * t6145;
t5606 = pkin(2) * t6414;
t6207 = t5614 * t6789;
t5975 = t5754 * t6207;
t5039 = t5452 + (t5606 + t5975) * t5703;
t6055 = t6789 * t5707;
t6114 = t5702 * t6383;
t5350 = t5703 * t6114 - t6055;
t6156 = t5565 * t6422;
t5401 = t5748 * t6156;
t6219 = t5703 * t5627;
t6757 = pkin(3) * t5702;
t5904 = 0.2e1 * t6219 * t6757;
t5467 = t5748 * t5904;
t6755 = pkin(3) * t5707;
t5622 = pkin(2) * t6755;
t6467 = (t5705 + 0.1e1) * (t5705 - 0.1e1);
t6221 = pkin(9) * t6467;
t6023 = t5702 * t6221;
t5914 = t5748 * t6023;
t5867 = t5703 * t5914;
t5623 = pkin(2) * t5627;
t6078 = t5707 * t5623;
t6305 = pkin(3) * t5627;
t6210 = -0.2e1 * t6305;
t6758 = pkin(3) * t5701;
t4764 = 0.1e1 / ((t5350 * t6210 + t5401) * t5698 + ((t5350 * t5565 + t5467) * t5747 - t6078 + pkin(3) * t5039) * t5753 + (t5039 * t5627 + t5622) * t5747 + (t5350 * t6758 - t5867) * pkin(9));
t5763 = xDP(1);
t4789 = t5763 + (t5120 * t5686 - t5683 * t6900) * t5759 + (-t5120 * t5683 - t5686 * t6900) * t6443;
t5761 = xDP(3);
t6449 = t5683 * t5685;
t4828 = t5761 + (t5302 * t6449 + t5682 * t6900) * t5758 - t6934;
t5762 = xDP(2);
t6444 = t5685 * t5686;
t4834 = t5762 + (-t5120 * t5682 + t5302 * t6444) * t5758 - t6933;
t5673 = cos(t5742);
t5913 = t5703 * t6016;
t5858 = -0.2e1 * pkin(3) * t5913;
t5586 = t5701 * t6755;
t5567 = pkin(9) * t5586;
t6026 = t5691 * t5586;
t6830 = 0.2e1 * pkin(9);
t6318 = t6026 * t6830 - 0.2e1 * t5567;
t5028 = (t5754 * t5858 + t5401 + t6318) * t5698;
t5195 = t5410 * t5754 + t5416 * t6368;
t5829 = (t5586 - t6026) * pkin(9);
t5838 = (-t5410 * t5748 + t5416 * t6365) * t5706 - t5416 * t6422;
t6149 = t5565 * t6383;
t5968 = t5747 * t6149;
t5889 = t5702 * t5968;
t5903 = pkin(3) * t5452 - t6078;
t5494 = t5707 * t5565;
t5924 = t6789 * t5494;
t6483 = t5614 * t5754;
t6875 = t5606 - t6483;
t5925 = t5691 * t6483 + t6875;
t6325 = t5707 * t5920 + t5622;
t6649 = 0.1e1 / (t5028 + ((t5467 - t5924) * t5747 + t5903) * t5753 + t6325 * t5747 + t5829 + ((pkin(3) * t5925 + t5889) * t5753 + (-t5914 + (pkin(3) * t6114 + t5747 * t5925) * t5701) * pkin(9)) * t5703) * ((pkin(3) * t5838 + t5195 * t5627) * t5753 + t5747 * (-pkin(3) * t5195 + t5627 * t5838));
t6195 = t5673 * t6649;
t4577 = t4789 * t6195 + (t4704 * t4828 + t4707 * t4834) * t4764;
t5372 = t5686 * t6443 + t6447;
t5373 = -t5683 * t6443 + t6439;
t4873 = t5120 * t5373 - t5372 * t6900 + t5763;
t6350 = t5758 * t5682;
t5522 = t5760 + t6350;
t4951 = -t5302 * t5373 + t5522 * t6900 + t5761;
t4957 = -t5120 * t5522 + t5302 * t5372 + t5762;
t4601 = t4873 * t6195 + (t4704 * t4951 + t4707 * t4957) * t4764;
t6222 = t5614 * t5627;
t6025 = t5702 * t6222;
t4595 = t4601 * t6025;
t6208 = t5565 * t6789;
t5987 = t5747 * t6208;
t5480 = pkin(3) * t6145;
t6316 = t5623 - t5480;
t5170 = -t5987 - t6316;
t6759 = pkin(3) * t5614;
t6087 = t6789 * t6759;
t6155 = t5565 * t6421;
t5239 = t5747 * t6155 + t6087;
t5602 = pkin(9) * t6424;
t5562 = 0.2e1 * t5602 + pkin(2);
t6088 = -0.2e1 * t5585;
t6132 = t5698 * t6466;
t6510 = t5565 * t5698;
t6737 = pkin(9) * t5489;
t6743 = pkin(3) * t5753;
t4779 = 0.1e1 / ((t5170 * t5753 + (-t5691 + 0.2e1 * t6132) * t6305 + t6319) * t5707 + ((t5239 * t5753 + (t5698 * t6088 + t5270) * t5627) * t5754 + (t5562 * t6743 + t6510 + t6737) * t6414) * t5703);
t6386 = t5706 * t5747;
t6495 = t5614 * t5702;
t5395 = pkin(3) * t6386 - t6495;
t5296 = t5753 * t6218 - t5395;
t5563 = t5602 + pkin(2);
t5492 = t5563 + t6743;
t5152 = -t5296 * t5754 + t5492 * t5748;
t6549 = (t5296 * t5748 + t5492 * t5754) * t5707;
t4802 = -t5133 * t5152 + t5134 * t6549;
t4805 = -t5143 * t6549 + t5149 * t5152;
t5083 = t5170 * t5707;
t6163 = t5562 * t6414;
t6423 = t5701 * t5748;
t6212 = pkin(9) * t6423;
t6526 = t5416 * t5707;
t6746 = pkin(3) * t5748;
t6613 = 0.1e1 / ((t5083 + t5703 * (pkin(3) * t6163 + t5239 * t5754)) * t5753 + t6094) * (((pkin(3) * t5754 + t5706 * t6212) * t6526 + t5410 * (t6010 - t6746)) * t5753 + (-t5395 * t5748 + t5563 * t5754) * t6526 - t5410 * (t5395 * t5754 + t5563 * t5748));
t6177 = t5673 * t6613;
t4631 = -t4789 * t6177 + (t4802 * t4828 + t4805 * t4834) * t4779;
t4655 = -t4873 * t6177 + (t4802 * t4951 + t4805 * t4957) * t4779;
t5009 = t5703 * (t5889 + (t5975 + t6163) * pkin(3));
t5137 = -t5885 + t6171;
t5566 = -t5777 + t6056;
t5579 = pkin(2) * t5602;
t6231 = pkin(3) * t6495;
t5799 = ((-t5566 + t5579) * t5706 - t5747 * t6231) * t4601;
t6138 = t5775 * t6467;
t5815 = t5707 * (t5691 * t6138 - t5777);
t5828 = -t5691 * t6056 + t5777;
t5938 = t5627 - t6220;
t5955 = t5706 * t6138;
t6146 = t5614 * t6466;
t5956 = t5754 * t6146;
t5959 = t5748 * t6146;
t5974 = t5494 * t6466;
t6067 = pkin(3) * t6212;
t5997 = 0.2e1 * t6067;
t6017 = t5754 * t6221;
t6028 = 0.2e1 * t6305;
t6232 = t5562 * t6746;
t6250 = 0.2e1 * t5747 * t5753;
t6772 = pkin(3) * t4601;
t6310 = pkin(2) * t6772;
t6354 = t5747 * t5754;
t5502 = t5747 * t5565;
t6882 = t6789 * t5502;
t6377 = t5707 * (t6316 + t6882);
t6395 = t5706 * t5707;
t6396 = t5703 * t5754;
t6504 = t5565 * t5754;
t6570 = (-t5974 + (t5997 + t6149) * t6422) * t5698;
t6673 = t4655 * t5706;
t6674 = t4655 * t5566;
t6694 = t4601 * t5706;
t4319 = ((((t4601 * t5997 + t4655 * t6504) * t5706 + t4655 * t5997 + t4601 * t6504) * t6422 - t4655 * t5974) * t5698 + (((t5754 * t6310 + ((-t4655 - t6694) * t6353 + (t4601 + t6673) * t5754 * t6028) * t5747) * t5702 - t5959 * t6772) * t5703 - t5707 * (t4595 + pkin(3) * (pkin(2) * t6694 + t4655 * t6902))) * t5753 + ((-pkin(3) * t6423 - t5706 * t6017) * t5702 * t4655 + (-t5702 * t6017 + ((pkin(2) * t6354 - t5706 * t6746) * t5702 - t5747 * t5959) * t5701) * t4601) * t6734 - t5707 * (t4655 * t5828 + t5799)) / (t5055 + (((t5968 + t6232) * t5702 + pkin(3) * t5956) * t5703 - t6377) * t5753 + ((pkin(3) * t6120 + t5489 * t5748) * t5702 + t5956 * t6424) * t6734 + t5707 * (t5370 + pkin(3) * (t5680 + t5938))) * t4577 + ((-t5702 * t6396 + t6395) * t6674 + (t6570 + t5137 * t6250 - (t5754 * t5955 + t6067) * t6422 + t5815) * t4601) / ((t5009 - t6377) * t5753 + t6094) * t4631;
t5514 = t5614 * t6755;
t6108 = t5703 * t6354;
t5286 = t5565 * t6108 + t5514;
t5246 = t5286 * t6421;
t5470 = t5707 * t5502;
t6223 = pkin(3) * t6396;
t6004 = t5614 * t6223;
t5254 = (-t5470 + t6004) * t5691;
t5846 = t5254 + t5470 - t6078;
t5860 = t5701 * (-pkin(8) * pkin(9) - t5705 * t5775);
t5305 = (t5614 * t6108 - t6755) * t6220;
t6486 = t5614 * t5747;
t5357 = t5707 * t6486 + t6223;
t5873 = t5357 * t6016 + t5622 * t5747 + t5028 + t5305;
t4737 = 0.1e1 / ((t5246 + t5846) * t5753 + t5567 + (pkin(9) * t5364 + t5860 * t6354 + (t6163 - t6483) * t6743) * t5703 + t5873);
t5214 = pkin(2) * t6155 - t6759 * t6890;
t5504 = pkin(2) * t6221;
t5312 = t5566 * t6424 + t5504;
t6091 = -t6437 / 0.2e1 + t5775 / 0.2e1 + t5777 / 0.2e1;
t5379 = t5579 + t6091;
t5887 = 0.3e1 * (t5777 / 0.3e1 + t6056) * t5702 * t6229;
t6304 = pkin(8) * t6733;
t5776 = pkin(8) ^ 2;
t6314 = pkin(2) ^ 2 + t5776;
t6092 = 0.2e1 * t6304 + t6314;
t5888 = -0.2e1 * t6437 + 0.3e1 * t5775 + t6092;
t5511 = t5775 + t6092;
t6147 = (pkin(3) + t5614) * (-pkin(3) + t5614) * t5691;
t5923 = -t5511 + t6147;
t5995 = 0.4e1 * t5690 - 0.4e1 * t5706;
t6027 = (-0.2e1 * t6304 - t5776 + t5777 + (t5689 - 0.2e1) * t5775) * t5691 * t6757;
t6057 = t6789 * (0.3e1 * t5777 + t6056);
t6832 = -0.2e1 * pkin(2);
t6258 = t5565 * t5702 * t6832;
t6317 = pkin(2) * t6830 + t6736 * t6832;
t6503 = t5566 * t5702;
t6643 = t4737 * t5702;
t6871 = t6315 * t5565 * t5614;
t4325 = (((-pkin(2) * t6510 + pkin(9) * t5312 - 0.2e1 * t5379 * t6743) * t6421 + (-t5753 * t5987 + (t5698 * t6788 - t6789) * t6305) * t5614) * t4577 + t5492 * t4631 * t6503) * t4737 * t4655 + ((((-t6027 - (0.4e1 * t5579 + t5888) * t6757 + t6871 * t5747) * t5753 + (t5753 * t5887 + t6258) * t5698) * t4577 + (-t5214 * t5698 + (t5379 * t6088 - t5614 * t6882) * t5753) * t4631) * t4737 + ((t5312 * t5706 * t4631 - t4577 * t6317) * t6643 + ((t5698 * t6057 + t5923) * t5747 * t4577 * t6643 + ((t5698 * t5995 + t6315) * t4577 - t6789 * t4631) * t4737 * t6759) * t5701) * pkin(9)) * t4601;
t4649 = t4655 * t6025;
t5879 = -t5502 + t5623;
t5886 = 0.2e1 * t5913;
t5921 = t6207 * t5627;
t6756 = pkin(3) * t5703;
t6309 = pkin(2) * t6756;
t6086 = t5702 * t6309;
t6089 = -0.2e1 * t6220;
t6090 = -0.2e1 * t6231;
t6211 = 0.2e1 * t5623;
t6400 = t5703 * t5747;
t6436 = t5691 * t5777;
t6778 = pkin(2) * t5707;
t6831 = 0.2e1 * pkin(2);
t4331 = t5707 * (-t4601 * t5565 * t6132 + (t4595 * t6797 + t4649 + (pkin(2) * t6673 + (t6831 - t6902) * t4601) * pkin(3)) * t5753 - t4601 * t6147 + ((t4601 * t6090 + t4655 * t5623) * t5747 - t6674) * t5706 + (t4601 * t6211 - t4655 * t6231) * t5747 + t4601 * t5511) / ((t5254 + t5246 + (t5467 + t5494) * t5747 + t5748 * t6086 - t6004) * t5753 + (-t5867 + t5586 + (-t5753 * t6778 + t6400 * t6875) * t5701) * pkin(9) + t5873) * t4577 + ((((t4649 + t6310) * t5706 + t4595) * t5753 + t5799) * t5707 + (t6570 + ((t5754 * t5921 + t5879 * t6414) * t5703 + ((t5747 * t6089 + t5562) * t5707 + t5886 * t6354) * pkin(3)) * t5753 + (-t5480 * t5747 + t6436 + t6737) * t5707 - (t5547 * t6414 + t5793) * t6756) * t4655) / ((t5083 + t5009) * t5753 + t6094) * t4631;
t4598 = t4601 ^ 2;
t5674 = t5772 + t5773;
t5755 = pkin(8) + rSges(3,3);
t6780 = m(3) * t5755;
t5596 = rSges(3,2) * t6780 - Icges(3,6);
t5597 = rSges(3,1) * t6780 - Icges(3,5);
t5895 = (-t5596 * t5753 - t5597 * t5747) * t5702;
t5931 = rSges(3,1) * t5753 - rSges(3,2) * t5747;
t6704 = t5706 * Icges(3,3);
t6781 = m(3) * t5706;
t5086 = t5895 + t6704 + (pkin(2) * t5931 + t5674) * t6781;
t5584 = m(3) * t5674 + Icges(3,3);
t6794 = m(3) * rSges(3,2);
t6278 = -t6794 / 0.2e1;
t5814 = -t5597 * t6421 / 0.2e1 + pkin(2) * t6278;
t6791 = t5691 / 0.2e1;
t5945 = t5550 * t6791 + (-t5773 / 0.2e1 + t5772 / 0.2e1) * m(3) - Icges(3,2) / 0.2e1 + Icges(3,1) / 0.2e1;
t6313 = rSges(3,1) * t6794;
t5620 = -Icges(3,4) + t6313;
t5949 = t5620 * t6132;
t6093 = (rSges(3,1) * t6278 + Icges(3,4) / 0.2e1) * t5691 + t6313 / 0.2e1 - Icges(3,4) / 0.2e1;
t6420 = t5702 * t5707;
t6782 = m(3) * (((-rSges(3,1) * t6383 + rSges(3,2) * t5748) * t5753 + t5747 * (rSges(3,1) * t5748 + rSges(3,2) * t6383)) * t5703 - t5931 * t6420);
t5764 = m(3) * pkin(2);
t6345 = rSges(3,1) * t5764;
t6100 = -t6345 / 0.2e1;
t6872 = t5596 * t6421 / 0.2e1 + t6100;
t6867 = -t4319 * t5086 + t4325 * t6782 - t4331 * t5584 - 0.2e1 * t4598 * (t5814 * t5753 + t5949 + t6093 + (t5753 * t5945 + t6872) * t5747);
t5717 = legFrame(2,3);
t5635 = sin(t5717);
t5647 = cos(t5717);
t5409 = t5635 * t5704 + t5647 * t5700;
t5415 = -t5635 * t5700 + t5647 * t5704;
t5723 = legFrame(2,1);
t5641 = sin(t5723);
t5653 = cos(t5723);
t5741 = legFrame(2,2);
t5666 = sin(t5741);
t6469 = t5653 * t5666;
t5131 = t5409 * t6469 + t5415 * t5641;
t5132 = -t5409 * t5641 + t5415 * t6469;
t6366 = t5707 * t5752;
t4849 = (-t5131 * t5746 + t5132 * t6366) * t5706 - t5132 * t6422;
t6369 = t5707 * t5746;
t4965 = t5131 * t5752 + t5132 * t6369;
t4703 = (-pkin(3) * t4849 - t4965 * t5627) * t5751 - t5745 * (-pkin(3) * t4965 + t4849 * t5627);
t6475 = t5641 * t5666;
t5142 = t5409 * t5653 + t5415 * t6475;
t5148 = t5409 * t6475 - t5415 * t5653;
t4850 = (t5142 * t6366 - t5148 * t5746) * t5706 - t5142 * t6422;
t4968 = t5142 * t6369 + t5148 * t5752;
t4706 = (pkin(3) * t4850 + t4968 * t5627) * t5751 + t5745 * (-pkin(3) * t4968 + t4850 * t5627);
t5605 = pkin(2) * t6415;
t5976 = t5752 * t6207;
t5038 = t5452 + (t5605 + t5976) * t5703;
t6115 = t5702 * t6384;
t5349 = t5703 * t6115 - t6055;
t5400 = t5746 * t6156;
t5466 = t5746 * t5904;
t5915 = t5746 * t6023;
t5868 = t5703 * t5915;
t4763 = 0.1e1 / ((t5349 * t6210 + t5400) * t5697 + ((t5349 * t5565 + t5466) * t5745 - t6078 + pkin(3) * t5038) * t5751 + (t5038 * t5627 + t5622) * t5745 + (t5349 * t6758 - t5868) * pkin(9));
t4788 = t5763 + (t5117 * t5686 - t5683 * t6899) * t5759 + (-t5117 * t5683 - t5686 * t6899) * t6443;
t4827 = t5761 + (t5301 * t6449 + t5682 * t6899) * t5758 - t6936;
t4833 = t5762 + (-t5117 * t5682 + t5301 * t6444) * t5758 - t6935;
t5672 = cos(t5741);
t5027 = (t5752 * t5858 + t5400 + t6318) * t5697;
t5193 = t5409 * t5752 + t5415 * t6369;
t5839 = (-t5409 * t5746 + t5415 * t6366) * t5706 - t5415 * t6422;
t6150 = t5565 * t6384;
t5969 = t5745 * t6150;
t5890 = t5702 * t5969;
t6484 = t5614 * t5752;
t6876 = t5605 - t6484;
t5926 = t5691 * t6484 + t6876;
t6650 = 0.1e1 / (t5027 + ((t5466 - t5924) * t5745 + t5903) * t5751 + t6325 * t5745 + t5829 + ((pkin(3) * t5926 + t5890) * t5751 + (-t5915 + (pkin(3) * t6115 + t5745 * t5926) * t5701) * pkin(9)) * t5703) * ((pkin(3) * t5839 + t5193 * t5627) * t5751 + t5745 * (-pkin(3) * t5193 + t5627 * t5839));
t6196 = t5672 * t6650;
t4576 = t4788 * t6196 + (t4703 * t4827 + t4706 * t4833) * t4763;
t4872 = t5117 * t5373 - t5372 * t6899 + t5763;
t4950 = -t5301 * t5373 + t5522 * t6899 + t5761;
t4956 = -t5117 * t5522 + t5301 * t5372 + t5762;
t4600 = t4872 * t6196 + (t4703 * t4950 + t4706 * t4956) * t4763;
t4594 = t4600 * t6025;
t5988 = t5745 * t6208;
t5168 = -t5988 - t6316;
t5238 = t5745 * t6155 + t6087;
t5600 = pkin(9) * t6426;
t5560 = 0.2e1 * t5600 + pkin(2);
t6133 = t5697 * t6466;
t6511 = t5565 * t5697;
t6738 = pkin(9) * t5488;
t6744 = pkin(3) * t5751;
t4778 = 0.1e1 / ((t5168 * t5751 + (-t5691 + 0.2e1 * t6133) * t6305 + t6320) * t5707 + ((t5238 * t5751 + (t5697 * t6088 + t5269) * t5627) * t5752 + (t5560 * t6744 + t6511 + t6738) * t6415) * t5703);
t6387 = t5706 * t5745;
t5394 = pkin(3) * t6387 - t6495;
t5295 = t5751 * t6218 - t5394;
t5561 = t5600 + pkin(2);
t5491 = t5561 + t6744;
t5151 = -t5295 * t5752 + t5491 * t5746;
t6550 = (t5295 * t5746 + t5491 * t5752) * t5707;
t4801 = -t5131 * t5151 + t5132 * t6550;
t4804 = -t5142 * t6550 + t5148 * t5151;
t5082 = t5168 * t5707;
t6164 = t5560 * t6415;
t6425 = t5701 * t5746;
t6213 = pkin(9) * t6425;
t6528 = t5415 * t5707;
t6747 = pkin(3) * t5746;
t6614 = 0.1e1 / ((t5082 + t5703 * (pkin(3) * t6164 + t5238 * t5752)) * t5751 + t6095) * (((pkin(3) * t5752 + t5706 * t6213) * t6528 + t5409 * (t6011 - t6747)) * t5751 + (-t5394 * t5746 + t5561 * t5752) * t6528 - t5409 * (t5394 * t5752 + t5561 * t5746));
t6178 = t5672 * t6614;
t4630 = -t4788 * t6178 + (t4801 * t4827 + t4804 * t4833) * t4778;
t4654 = -t4872 * t6178 + (t4801 * t4950 + t4804 * t4956) * t4778;
t5008 = t5703 * (t5890 + (t5976 + t6164) * pkin(3));
t5136 = -t5885 + t6172;
t5578 = pkin(2) * t5600;
t5800 = ((-t5566 + t5578) * t5706 - t5745 * t6231) * t4600;
t5957 = t5752 * t6146;
t5960 = t5746 * t6146;
t6068 = pkin(3) * t6213;
t5998 = 0.2e1 * t6068;
t6018 = t5752 * t6221;
t6233 = t5560 * t6747;
t6251 = 0.2e1 * t5745 * t5751;
t6773 = pkin(3) * t4600;
t6311 = pkin(2) * t6773;
t6356 = t5745 * t5752;
t5501 = t5745 * t5565;
t6883 = t6789 * t5501;
t6378 = t5707 * (t6316 + t6883);
t6397 = t5703 * t5752;
t6505 = t5565 * t5752;
t6571 = (-t5974 + (t5998 + t6150) * t6422) * t5697;
t6675 = t4654 * t5706;
t6676 = t4654 * t5566;
t6695 = t4600 * t5706;
t4318 = ((((t4600 * t5998 + t4654 * t6505) * t5706 + t4654 * t5998 + t4600 * t6505) * t6422 - t4654 * t5974) * t5697 + (((t5752 * t6311 + ((-t4654 - t6695) * t6355 + (t4600 + t6675) * t5752 * t6028) * t5745) * t5702 - t5960 * t6773) * t5703 - t5707 * (t4594 + pkin(3) * (pkin(2) * t6695 + t4654 * t6903))) * t5751 + ((-pkin(3) * t6425 - t5706 * t6018) * t5702 * t4654 + (-t5702 * t6018 + ((pkin(2) * t6356 - t5706 * t6747) * t5702 - t5745 * t5960) * t5701) * t4600) * t6734 - t5707 * (t4654 * t5828 + t5800)) / (t5054 + (((t5969 + t6233) * t5702 + pkin(3) * t5957) * t5703 - t6378) * t5751 + ((pkin(3) * t6121 + t5488 * t5746) * t5702 + t5957 * t6426) * t6734 + t5707 * (t5369 + pkin(3) * (t5679 + t5938))) * t4576 + ((-t5702 * t6397 + t6395) * t6676 + (t6571 + t5136 * t6251 - (t5752 * t5955 + t6068) * t6422 + t5815) * t4600) / ((t5008 - t6378) * t5751 + t6095) * t4630;
t6109 = t5703 * t6356;
t5285 = t5565 * t6109 + t5514;
t5245 = t5285 * t6421;
t5469 = t5707 * t5501;
t6224 = pkin(3) * t6397;
t6005 = t5614 * t6224;
t5253 = (-t5469 + t6005) * t5691;
t5847 = t5253 + t5469 - t6078;
t5304 = (t5614 * t6109 - t6755) * t6220;
t6487 = t5614 * t5745;
t5356 = t5707 * t6487 + t6224;
t5874 = t5356 * t6016 + t5622 * t5745 + t5027 + t5304;
t4736 = 0.1e1 / ((t5245 + t5847) * t5751 + t5567 + (pkin(9) * t5363 + t5860 * t6356 + (t6164 - t6484) * t6744) * t5703 + t5874);
t5311 = t5566 * t6426 + t5504;
t5378 = t5578 + t6091;
t6644 = t4736 * t5702;
t4324 = (((-pkin(2) * t6511 + pkin(9) * t5311 - 0.2e1 * t5378 * t6744) * t6421 + (-t5751 * t5988 + (t5697 * t6788 - t6789) * t6305) * t5614) * t4576 + t5491 * t4630 * t6503) * t4736 * t4654 + ((((-t6027 - (0.4e1 * t5578 + t5888) * t6757 + t6871 * t5745) * t5751 + (t5751 * t5887 + t6258) * t5697) * t4576 + (-t5214 * t5697 + (t5378 * t6088 - t5614 * t6883) * t5751) * t4630) * t4736 + ((t5311 * t5706 * t4630 - t4576 * t6317) * t6644 + ((t5697 * t6057 + t5923) * t5745 * t4576 * t6644 + ((t5697 * t5995 + t6315) * t4576 - t6789 * t4630) * t4736 * t6759) * t5701) * pkin(9)) * t4600;
t4648 = t4654 * t6025;
t5880 = -t5501 + t5623;
t6402 = t5703 * t5745;
t4330 = t5707 * (-t4600 * t5565 * t6133 + (t4594 * t6797 + t4648 + (pkin(2) * t6675 + (t6831 - t6903) * t4600) * pkin(3)) * t5751 - t4600 * t6147 + ((t4600 * t6090 + t4654 * t5623) * t5745 - t6676) * t5706 + (t4600 * t6211 - t4654 * t6231) * t5745 + t4600 * t5511) / ((t5253 + t5245 + (t5466 + t5494) * t5745 + t5746 * t6086 - t6005) * t5751 + (-t5868 + t5586 + (-t5751 * t6778 + t6402 * t6876) * t5701) * pkin(9) + t5874) * t4576 + ((((t4648 + t6311) * t5706 + t4594) * t5751 + t5800) * t5707 + (t6571 + ((t5752 * t5921 + t5880 * t6415) * t5703 + ((t5745 * t6089 + t5560) * t5707 + t5886 * t6356) * pkin(3)) * t5751 + (-t5480 * t5745 + t6436 + t6738) * t5707 - (t5546 * t6415 + t5794) * t6756) * t4654) / ((t5082 + t5008) * t5751 + t6095) * t4630;
t4597 = t4600 ^ 2;
t5896 = (-t5596 * t5751 - t5597 * t5745) * t5702;
t5932 = rSges(3,1) * t5751 - rSges(3,2) * t5745;
t5085 = t5896 + t6704 + (pkin(2) * t5932 + t5674) * t6781;
t5950 = t5620 * t6133;
t6783 = m(3) * (((-rSges(3,1) * t6384 + rSges(3,2) * t5746) * t5751 + t5745 * (rSges(3,1) * t5746 + rSges(3,2) * t6384)) * t5703 - t5932 * t6420);
t6866 = -t4318 * t5085 + t4324 * t6783 - t4330 * t5584 - 0.2e1 * t4597 * (t5814 * t5751 + t5950 + t6093 + (t5751 * t5945 + t6872) * t5745);
t5716 = legFrame(3,3);
t5634 = sin(t5716);
t5646 = cos(t5716);
t5408 = t5634 * t5704 + t5646 * t5700;
t5414 = -t5634 * t5700 + t5646 * t5704;
t5722 = legFrame(3,1);
t5640 = sin(t5722);
t5652 = cos(t5722);
t5740 = legFrame(3,2);
t5665 = sin(t5740);
t6470 = t5652 * t5665;
t5129 = t5408 * t6470 + t5414 * t5640;
t5130 = -t5408 * t5640 + t5414 * t6470;
t6367 = t5707 * t5750;
t4847 = (-t5129 * t5744 + t5130 * t6367) * t5706 - t5130 * t6422;
t6370 = t5707 * t5744;
t4964 = t5129 * t5750 + t5130 * t6370;
t4702 = (-pkin(3) * t4847 - t4964 * t5627) * t5749 - t5743 * (-pkin(3) * t4964 + t4847 * t5627);
t6476 = t5640 * t5665;
t5141 = t5408 * t5652 + t5414 * t6476;
t5147 = t5408 * t6476 - t5414 * t5652;
t4848 = (t5141 * t6367 - t5147 * t5744) * t5706 - t5141 * t6422;
t4967 = t5141 * t6370 + t5147 * t5750;
t4705 = (pkin(3) * t4848 + t4967 * t5627) * t5749 + t5743 * (-pkin(3) * t4967 + t4848 * t5627);
t5604 = pkin(2) * t6416;
t5977 = t5750 * t6207;
t5037 = t5452 + (t5604 + t5977) * t5703;
t6116 = t5702 * t6385;
t5348 = t5703 * t6116 - t6055;
t5399 = t5744 * t6156;
t5465 = t5744 * t5904;
t5916 = t5744 * t6023;
t5869 = t5703 * t5916;
t4762 = 0.1e1 / ((t5348 * t6210 + t5399) * t5696 + ((t5348 * t5565 + t5465) * t5743 - t6078 + pkin(3) * t5037) * t5749 + (t5037 * t5627 + t5622) * t5743 + (t5348 * t6758 - t5869) * pkin(9));
t4787 = t5763 + (t5114 * t5686 - t5683 * t6898) * t5759 + (-t5114 * t5683 - t5686 * t6898) * t6443;
t4826 = t5761 + (t5300 * t6449 + t5682 * t6898) * t5758 - t6938;
t4832 = t5762 + (-t5114 * t5682 + t5300 * t6444) * t5758 - t6937;
t5671 = cos(t5740);
t5026 = (t5750 * t5858 + t5399 + t6318) * t5696;
t5191 = t5408 * t5750 + t5414 * t6370;
t5840 = (-t5408 * t5744 + t5414 * t6367) * t5706 - t5414 * t6422;
t6151 = t5565 * t6385;
t5970 = t5743 * t6151;
t5891 = t5702 * t5970;
t6485 = t5614 * t5750;
t6877 = t5604 - t6485;
t5927 = t5691 * t6485 + t6877;
t6651 = 0.1e1 / (t5026 + ((t5465 - t5924) * t5743 + t5903) * t5749 + t6325 * t5743 + t5829 + ((pkin(3) * t5927 + t5891) * t5749 + (-t5916 + (pkin(3) * t6116 + t5743 * t5927) * t5701) * pkin(9)) * t5703) * ((pkin(3) * t5840 + t5191 * t5627) * t5749 + t5743 * (-pkin(3) * t5191 + t5627 * t5840));
t6197 = t5671 * t6651;
t4575 = t4787 * t6197 + (t4702 * t4826 + t4705 * t4832) * t4762;
t4871 = t5114 * t5373 - t5372 * t6898 + t5763;
t4949 = -t5300 * t5373 + t5522 * t6898 + t5761;
t4955 = -t5114 * t5522 + t5300 * t5372 + t5762;
t4599 = t4871 * t6197 + (t4702 * t4949 + t4705 * t4955) * t4762;
t4593 = t4599 * t6025;
t5989 = t5743 * t6208;
t5166 = -t5989 - t6316;
t5237 = t5743 * t6155 + t6087;
t5598 = pkin(9) * t6428;
t5558 = 0.2e1 * t5598 + pkin(2);
t6134 = t5696 * t6466;
t6512 = t5565 * t5696;
t6739 = pkin(9) * t5487;
t6745 = pkin(3) * t5749;
t4777 = 0.1e1 / ((t5166 * t5749 + (-t5691 + 0.2e1 * t6134) * t6305 + t6321) * t5707 + ((t5237 * t5749 + (t5696 * t6088 + t5268) * t5627) * t5750 + (t5558 * t6745 + t6512 + t6739) * t6416) * t5703);
t6388 = t5706 * t5743;
t5393 = pkin(3) * t6388 - t6495;
t5294 = t5749 * t6218 - t5393;
t5559 = t5598 + pkin(2);
t5490 = t5559 + t6745;
t5150 = -t5294 * t5750 + t5490 * t5744;
t6551 = (t5294 * t5744 + t5490 * t5750) * t5707;
t4800 = -t5129 * t5150 + t5130 * t6551;
t4803 = -t5141 * t6551 + t5147 * t5150;
t5081 = t5166 * t5707;
t6165 = t5558 * t6416;
t6427 = t5701 * t5744;
t6214 = pkin(9) * t6427;
t6530 = t5414 * t5707;
t6748 = pkin(3) * t5744;
t6615 = 0.1e1 / ((t5081 + t5703 * (pkin(3) * t6165 + t5237 * t5750)) * t5749 + t6096) * (((pkin(3) * t5750 + t5706 * t6214) * t6530 + t5408 * (t6012 - t6748)) * t5749 + (-t5393 * t5744 + t5559 * t5750) * t6530 - t5408 * (t5393 * t5750 + t5559 * t5744));
t6179 = t5671 * t6615;
t4629 = -t4787 * t6179 + (t4800 * t4826 + t4803 * t4832) * t4777;
t4653 = -t4871 * t6179 + (t4800 * t4949 + t4803 * t4955) * t4777;
t5007 = t5703 * (t5891 + (t5977 + t6165) * pkin(3));
t5135 = -t5885 + t6173;
t5577 = pkin(2) * t5598;
t5801 = ((-t5566 + t5577) * t5706 - t5743 * t6231) * t4599;
t5958 = t5750 * t6146;
t5961 = t5744 * t6146;
t6069 = pkin(3) * t6214;
t5999 = 0.2e1 * t6069;
t6019 = t5750 * t6221;
t6234 = t5558 * t6748;
t6252 = 0.2e1 * t5743 * t5749;
t6774 = pkin(3) * t4599;
t6312 = pkin(2) * t6774;
t6358 = t5743 * t5750;
t5500 = t5743 * t5565;
t6884 = t6789 * t5500;
t6379 = t5707 * (t6316 + t6884);
t6398 = t5703 * t5750;
t6506 = t5565 * t5750;
t6572 = (-t5974 + (t5999 + t6151) * t6422) * t5696;
t6677 = t4653 * t5706;
t6678 = t4653 * t5566;
t6696 = t4599 * t5706;
t4317 = ((((t4599 * t5999 + t4653 * t6506) * t5706 + t4653 * t5999 + t4599 * t6506) * t6422 - t4653 * t5974) * t5696 + (((t5750 * t6312 + ((-t4653 - t6696) * t6357 + (t4599 + t6677) * t5750 * t6028) * t5743) * t5702 - t5961 * t6774) * t5703 - t5707 * (t4593 + pkin(3) * (pkin(2) * t6696 + t4653 * t6904))) * t5749 + ((-pkin(3) * t6427 - t5706 * t6019) * t5702 * t4653 + (-t5702 * t6019 + ((pkin(2) * t6358 - t5706 * t6748) * t5702 - t5743 * t5961) * t5701) * t4599) * t6734 - t5707 * (t4653 * t5828 + t5801)) / (t5053 + (((t5970 + t6234) * t5702 + pkin(3) * t5958) * t5703 - t6379) * t5749 + ((pkin(3) * t6122 + t5487 * t5744) * t5702 + t5958 * t6428) * t6734 + t5707 * (t5368 + pkin(3) * (t5678 + t5938))) * t4575 + ((-t5702 * t6398 + t6395) * t6678 + (t6572 + t5135 * t6252 - (t5750 * t5955 + t6069) * t6422 + t5815) * t4599) / ((t5007 - t6379) * t5749 + t6096) * t4629;
t6110 = t5703 * t6358;
t5284 = t5565 * t6110 + t5514;
t5244 = t5284 * t6421;
t5468 = t5707 * t5500;
t6225 = pkin(3) * t6398;
t6006 = t5614 * t6225;
t5252 = (-t5468 + t6006) * t5691;
t5848 = t5252 + t5468 - t6078;
t5303 = (t5614 * t6110 - t6755) * t6220;
t6488 = t5614 * t5743;
t5355 = t5707 * t6488 + t6225;
t5875 = t5355 * t6016 + t5622 * t5743 + t5026 + t5303;
t4735 = 0.1e1 / ((t5244 + t5848) * t5749 + t5567 + (pkin(9) * t5362 + t5860 * t6358 + (t6165 - t6485) * t6745) * t5703 + t5875);
t5310 = t5566 * t6428 + t5504;
t5377 = t5577 + t6091;
t6645 = t4735 * t5702;
t4323 = (((-pkin(2) * t6512 + pkin(9) * t5310 - 0.2e1 * t5377 * t6745) * t6421 + (-t5749 * t5989 + (t5696 * t6788 - t6789) * t6305) * t5614) * t4575 + t5490 * t4629 * t6503) * t4735 * t4653 + ((((-t6027 - (0.4e1 * t5577 + t5888) * t6757 + t6871 * t5743) * t5749 + (t5749 * t5887 + t6258) * t5696) * t4575 + (-t5214 * t5696 + (t5377 * t6088 - t5614 * t6884) * t5749) * t4629) * t4735 + ((t5310 * t5706 * t4629 - t4575 * t6317) * t6645 + ((t5696 * t6057 + t5923) * t5743 * t4575 * t6645 + ((t5696 * t5995 + t6315) * t4575 - t6789 * t4629) * t4735 * t6759) * t5701) * pkin(9)) * t4599;
t4647 = t4653 * t6025;
t5881 = -t5500 + t5623;
t6404 = t5703 * t5743;
t4329 = t5707 * (-t4599 * t5565 * t6134 + (t4593 * t6797 + t4647 + (pkin(2) * t6677 + (t6831 - t6904) * t4599) * pkin(3)) * t5749 - t4599 * t6147 + ((t4599 * t6090 + t4653 * t5623) * t5743 - t6678) * t5706 + (t4599 * t6211 - t4653 * t6231) * t5743 + t4599 * t5511) / ((t5252 + t5244 + (t5465 + t5494) * t5743 + t5744 * t6086 - t6006) * t5749 + (-t5869 + t5586 + (-t5749 * t6778 + t6404 * t6877) * t5701) * pkin(9) + t5875) * t4575 + ((((t4647 + t6312) * t5706 + t4593) * t5749 + t5801) * t5707 + (t6572 + ((t5750 * t5921 + t5881 * t6416) * t5703 + ((t5743 * t6089 + t5558) * t5707 + t5886 * t6358) * pkin(3)) * t5749 + (-t5480 * t5743 + t6436 + t6739) * t5707 - (t5545 * t6416 + t5795) * t6756) * t4653) / ((t5081 + t5007) * t5749 + t6096) * t4629;
t4596 = t4599 ^ 2;
t5897 = (-t5596 * t5749 - t5597 * t5743) * t5702;
t5933 = rSges(3,1) * t5749 - rSges(3,2) * t5743;
t5084 = t5897 + t6704 + (pkin(2) * t5933 + t5674) * t6781;
t5951 = t5620 * t6134;
t6784 = m(3) * (((-rSges(3,1) * t6385 + rSges(3,2) * t5744) * t5749 + t5743 * (rSges(3,1) * t5744 + rSges(3,2) * t6385)) * t5703 - t5933 * t6420);
t6865 = -t4317 * t5084 + t4323 * t6784 - t4329 * t5584 - 0.2e1 * t4596 * (t5814 * t5749 + t5951 + t6093 + (t5749 * t5945 + t6872) * t5743);
t5715 = legFrame(4,3);
t5633 = sin(t5715);
t5645 = cos(t5715);
t5407 = t5633 * t5704 + t5645 * t5700;
t5413 = -t5633 * t5700 + t5645 * t5704;
t5721 = legFrame(4,1);
t5639 = sin(t5721);
t5651 = cos(t5721);
t5739 = legFrame(4,2);
t5664 = sin(t5739);
t6471 = t5651 * t5664;
t5127 = t5407 * t6471 + t5413 * t5639;
t5128 = -t5407 * t5639 + t5413 * t6471;
t6371 = t5707 * t5736;
t4845 = (-t5127 * t5730 + t5128 * t6371) * t5706 - t5128 * t6422;
t6374 = t5707 * t5730;
t4960 = t5127 * t5736 + t5128 * t6374;
t4698 = (-pkin(3) * t4845 - t4960 * t5627) * t5735 - t5729 * (-pkin(3) * t4960 + t4845 * t5627);
t6477 = t5639 * t5664;
t5140 = t5407 * t5651 + t5413 * t6477;
t5146 = t5407 * t6477 - t5413 * t5651;
t4846 = (t5140 * t6371 - t5146 * t5730) * t5706 - t5140 * t6422;
t4963 = t5140 * t6374 + t5146 * t5736;
t4701 = (pkin(3) * t4846 + t4963 * t5627) * t5735 + t5729 * (-pkin(3) * t4963 + t4846 * t5627);
t5595 = pkin(2) * t6417;
t5981 = t5736 * t6207;
t5035 = t5452 + (t5595 + t5981) * t5703;
t6117 = t5702 * t6389;
t5345 = t5703 * t6117 - t6055;
t5392 = t5730 * t6156;
t5460 = t5730 * t5904;
t5917 = t5730 * t6023;
t5870 = t5703 * t5917;
t4761 = 0.1e1 / ((t5345 * t6210 + t5392) * t5694 + ((t5345 * t5565 + t5460) * t5729 - t6078 + pkin(3) * t5035) * t5735 + (t5035 * t5627 + t5622) * t5729 + (t5345 * t6758 - t5870) * pkin(9));
t4786 = t5763 + (t5111 * t5686 - t5683 * t6897) * t5759 + (-t5111 * t5683 - t5686 * t6897) * t6443;
t4825 = t5761 + (t5299 * t6449 + t5682 * t6897) * t5758 - t6940;
t4831 = t5762 + (-t5111 * t5682 + t5299 * t6444) * t5758 - t6939;
t5670 = cos(t5739);
t5025 = (t5736 * t5858 + t5392 + t6318) * t5694;
t5177 = t5407 * t5736 + t5413 * t6374;
t5841 = (-t5407 * t5730 + t5413 * t6371) * t5706 - t5413 * t6422;
t6152 = t5565 * t6389;
t5971 = t5729 * t6152;
t5892 = t5702 * t5971;
t6489 = t5614 * t5736;
t6878 = t5595 - t6489;
t5928 = t5691 * t6489 + t6878;
t6652 = 0.1e1 / (t5025 + ((t5460 - t5924) * t5729 + t5903) * t5735 + t6325 * t5729 + t5829 + ((pkin(3) * t5928 + t5892) * t5735 + (-t5917 + (pkin(3) * t6117 + t5729 * t5928) * t5701) * pkin(9)) * t5703) * ((pkin(3) * t5841 + t5177 * t5627) * t5735 + t5729 * (-pkin(3) * t5177 + t5627 * t5841));
t6198 = t5670 * t6652;
t4574 = t4786 * t6198 + (t4698 * t4825 + t4701 * t4831) * t4761;
t4870 = t5111 * t5373 - t5372 * t6897 + t5763;
t4948 = -t5299 * t5373 + t5522 * t6897 + t5761;
t4954 = -t5111 * t5522 + t5299 * t5372 + t5762;
t4592 = t4870 * t6198 + (t4698 * t4948 + t4701 * t4954) * t4761;
t4586 = t4592 * t6025;
t5990 = t5729 * t6208;
t5164 = -t5990 - t6316;
t5236 = t5729 * t6155 + t6087;
t5591 = pkin(9) * t6430;
t5556 = 0.2e1 * t5591 + pkin(2);
t6135 = t5694 * t6466;
t6513 = t5565 * t5694;
t6740 = pkin(9) * t5483;
t6749 = pkin(3) * t5735;
t4773 = 0.1e1 / ((t5164 * t5735 + (-t5691 + 0.2e1 * t6135) * t6305 + t6322) * t5707 + ((t5236 * t5735 + (t5694 * t6088 + t5267) * t5627) * t5736 + (t5556 * t6749 + t6513 + t6740) * t6417) * t5703);
t6392 = t5706 * t5729;
t5388 = pkin(3) * t6392 - t6495;
t5290 = t5735 * t6218 - t5388;
t5557 = t5591 + pkin(2);
t5486 = t5557 + t6749;
t5089 = -t5290 * t5736 + t5486 * t5730;
t6567 = (t5290 * t5730 + t5486 * t5736) * t5707;
t4793 = -t5089 * t5127 + t5128 * t6567;
t4796 = t5089 * t5146 - t5140 * t6567;
t5080 = t5164 * t5707;
t6166 = t5556 * t6417;
t6429 = t5701 * t5730;
t6215 = pkin(9) * t6429;
t6532 = t5413 * t5707;
t6752 = pkin(3) * t5730;
t6616 = 0.1e1 / ((t5080 + t5703 * (pkin(3) * t6166 + t5236 * t5736)) * t5735 + t6097) * (((pkin(3) * t5736 + t5706 * t6215) * t6532 + t5407 * (t6013 - t6752)) * t5735 + (-t5388 * t5730 + t5557 * t5736) * t6532 - t5407 * (t5388 * t5736 + t5557 * t5730));
t6180 = t5670 * t6616;
t4628 = -t4786 * t6180 + (t4793 * t4825 + t4796 * t4831) * t4773;
t4646 = -t4870 * t6180 + (t4793 * t4948 + t4796 * t4954) * t4773;
t5006 = t5703 * (t5892 + (t5981 + t6166) * pkin(3));
t5098 = -t5885 + t6174;
t5570 = pkin(2) * t5591;
t5802 = ((-t5566 + t5570) * t5706 - t5729 * t6231) * t4592;
t5962 = t5736 * t6146;
t5965 = t5730 * t6146;
t6073 = pkin(3) * t6215;
t6000 = 0.2e1 * t6073;
t6020 = t5736 * t6221;
t6070 = t5736 * t6305;
t6235 = t5556 * t6752;
t6253 = 0.2e1 * t5729 * t5735;
t6775 = pkin(3) * t4592;
t6306 = pkin(2) * t6775;
t6360 = t5729 * t5736;
t5497 = t5729 * t5565;
t6885 = t6789 * t5497;
t6380 = t5707 * (t6316 + t6885);
t6405 = t5703 * t5736;
t6507 = t5565 * t5736;
t6574 = (-t5974 + (t6000 + t6152) * t6422) * t5694;
t6679 = t4646 * t5566;
t6779 = pkin(2) * t5706;
t6809 = 0.2e1 * t4592;
t4316 = ((((t4592 * t6000 + t4646 * t6507) * t5706 + t4646 * t6000 + t4592 * t6507) * t6422 - t4646 * t5974) * t5694 + (((t5736 * t6306 + (-(t4592 * t6359 - 0.2e1 * t4646 * t6070) * t5706 + t6070 * t6809 - t4646 * t6359) * t5729) * t5702 - t5965 * t6775) * t5703 - t5707 * (t4586 + pkin(3) * (t4592 * t6779 + t4646 * t6905))) * t5735 + ((-pkin(3) * t6429 - t5706 * t6020) * t5702 * t4646 + (-t5702 * t6020 + ((pkin(2) * t6360 - t5706 * t6752) * t5702 - t5729 * t5965) * t5701) * t4592) * t6734 - (t4646 * t5828 + t5802) * t5707) / (t5048 + (((t5971 + t6235) * t5702 + pkin(3) * t5962) * t5703 - t6380) * t5735 + ((pkin(3) * t6123 + t5483 * t5730) * t5702 + t5962 * t6430) * t6734 + t5707 * (t5367 + pkin(3) * (t5661 + t5938))) * t4574 + ((-t5702 * t6405 + t6395) * t6679 + (t6574 + t5098 * t6253 - (t5736 * t5955 + t6073) * t6422 + t5815) * t4592) / ((t5006 - t6380) * t5735 + t6097) * t4628;
t6111 = t5703 * t6360;
t5281 = t5565 * t6111 + t5514;
t5243 = t5281 * t6421;
t5463 = t5707 * t5497;
t6226 = pkin(3) * t6405;
t6007 = t5614 * t6226;
t5251 = (-t5463 + t6007) * t5691;
t5849 = t5251 + t5463 - t6078;
t5293 = (t5614 * t6111 - t6755) * t6220;
t6492 = t5614 * t5729;
t5353 = t5707 * t6492 + t6226;
t5876 = t5353 * t6016 + t5622 * t5729 + t5025 + t5293;
t4734 = 0.1e1 / ((t5243 + t5849) * t5735 + t5567 + (pkin(9) * t5360 + t5860 * t6360 + (t6166 - t6489) * t6749) * t5703 + t5876);
t5309 = t5566 * t6430 + t5504;
t5376 = t5570 + t6091;
t6646 = t4734 * t5702;
t4322 = (((-pkin(2) * t6513 + pkin(9) * t5309 - 0.2e1 * t5376 * t6749) * t6421 + (-t5735 * t5990 + (t5694 * t6788 - t6789) * t6305) * t5614) * t4574 + t5486 * t4628 * t6503) * t4734 * t4646 + ((((-t6027 - (0.4e1 * t5570 + t5888) * t6757 + t6871 * t5729) * t5735 + (t5735 * t5887 + t6258) * t5694) * t4574 + (-t5214 * t5694 + (t5376 * t6088 - t5614 * t6885) * t5735) * t4628) * t4734 + ((t5309 * t5706 * t4628 - t4574 * t6317) * t6646 + ((t5694 * t6057 + t5923) * t5729 * t4574 * t6646 + ((t5694 * t5995 + t6315) * t4574 - t6789 * t4628) * t4734 * t6759) * t5701) * pkin(9)) * t4592;
t4640 = t4646 * t6025;
t5882 = -t5497 + t5623;
t6409 = t5703 * t5729;
t4328 = t5707 * (-t4592 * t5565 * t6135 + (t4586 * t6797 + t4640 + (t4646 * t6779 + (t6831 - t6905) * t4592) * pkin(3)) * t5735 - t4592 * t6147 + ((t4592 * t6090 + t4646 * t5623) * t5729 - t6679) * t5706 + (t4592 * t6211 - t4646 * t6231) * t5729 + t4592 * t5511) / ((t5251 + t5243 + (t5460 + t5494) * t5729 + t5730 * t6086 - t6007) * t5735 + (-t5870 + t5586 + (-t5735 * t6778 + t6409 * t6878) * t5701) * pkin(9) + t5876) * t4574 + ((((t4640 + t6306) * t5706 + t4586) * t5735 + t5802) * t5707 + (t6574 + ((t5736 * t5921 + t5882 * t6417) * t5703 + ((t5729 * t6089 + t5556) * t5707 + t5886 * t6360) * pkin(3)) * t5735 + (-t5480 * t5729 + t6436 + t6740) * t5707 - (t5541 * t6417 + t5796) * t6756) * t4646) / ((t5080 + t5006) * t5735 + t6097) * t4628;
t4589 = t4592 ^ 2;
t5898 = (-t5596 * t5735 - t5597 * t5729) * t5702;
t5934 = rSges(3,1) * t5735 - rSges(3,2) * t5729;
t5064 = t5898 + t6704 + (pkin(2) * t5934 + t5674) * t6781;
t5952 = t5620 * t6135;
t6785 = m(3) * (((-rSges(3,1) * t6389 + rSges(3,2) * t5730) * t5735 + t5729 * (rSges(3,1) * t5730 + rSges(3,2) * t6389)) * t5703 - t5934 * t6420);
t6864 = -t4316 * t5064 + t4322 * t6785 - t4328 * t5584 - 0.2e1 * t4589 * (t5814 * t5735 + t5952 + t6093 + (t5735 * t5945 + t6872) * t5729);
t5714 = legFrame(5,3);
t5632 = sin(t5714);
t5644 = cos(t5714);
t5406 = t5632 * t5704 + t5644 * t5700;
t5412 = -t5632 * t5700 + t5644 * t5704;
t5720 = legFrame(5,1);
t5638 = sin(t5720);
t5650 = cos(t5720);
t5738 = legFrame(5,2);
t5663 = sin(t5738);
t6472 = t5650 * t5663;
t5125 = t5406 * t6472 + t5412 * t5638;
t5126 = -t5406 * t5638 + t5412 * t6472;
t6372 = t5707 * t5734;
t4843 = (-t5125 * t5728 + t5126 * t6372) * t5706 - t5126 * t6422;
t6375 = t5707 * t5728;
t4959 = t5125 * t5734 + t5126 * t6375;
t4697 = (-pkin(3) * t4843 - t4959 * t5627) * t5733 - t5727 * (-pkin(3) * t4959 + t4843 * t5627);
t6478 = t5638 * t5663;
t5139 = t5406 * t5650 + t5412 * t6478;
t5145 = t5406 * t6478 - t5412 * t5650;
t4844 = (t5139 * t6372 - t5145 * t5728) * t5706 - t5139 * t6422;
t4962 = t5139 * t6375 + t5145 * t5734;
t4700 = (pkin(3) * t4844 + t4962 * t5627) * t5733 + t5727 * (-pkin(3) * t4962 + t4844 * t5627);
t5594 = pkin(2) * t6418;
t5982 = t5734 * t6207;
t5034 = t5452 + (t5594 + t5982) * t5703;
t6118 = t5702 * t6390;
t5344 = t5703 * t6118 - t6055;
t5391 = t5728 * t6156;
t5459 = t5728 * t5904;
t5918 = t5728 * t6023;
t5871 = t5703 * t5918;
t4760 = 0.1e1 / ((t5344 * t6210 + t5391) * t5693 + ((t5344 * t5565 + t5459) * t5727 - t6078 + pkin(3) * t5034) * t5733 + (t5034 * t5627 + t5622) * t5727 + (t5344 * t6758 - t5871) * pkin(9));
t4785 = t5763 + (t5108 * t5686 - t5683 * t6896) * t5759 + (-t5108 * t5683 - t5686 * t6896) * t6443;
t4824 = t5761 + (t5298 * t6449 + t5682 * t6896) * t5758 - t6942;
t4830 = t5762 + (-t5108 * t5682 + t5298 * t6444) * t5758 - t6941;
t5669 = cos(t5738);
t5024 = (t5734 * t5858 + t5391 + t6318) * t5693;
t5175 = t5406 * t5734 + t5412 * t6375;
t5842 = (-t5406 * t5728 + t5412 * t6372) * t5706 - t5412 * t6422;
t6153 = t5565 * t6390;
t5972 = t5727 * t6153;
t5893 = t5702 * t5972;
t6490 = t5614 * t5734;
t6879 = t5594 - t6490;
t5929 = t5691 * t6490 + t6879;
t6653 = 0.1e1 / (t5024 + ((t5459 - t5924) * t5727 + t5903) * t5733 + t6325 * t5727 + t5829 + ((pkin(3) * t5929 + t5893) * t5733 + (-t5918 + (pkin(3) * t6118 + t5727 * t5929) * t5701) * pkin(9)) * t5703) * ((pkin(3) * t5842 + t5175 * t5627) * t5733 + t5727 * (-pkin(3) * t5175 + t5627 * t5842));
t6199 = t5669 * t6653;
t4573 = t4785 * t6199 + (t4697 * t4824 + t4700 * t4830) * t4760;
t4869 = t5108 * t5373 - t5372 * t6896 + t5763;
t4947 = -t5298 * t5373 + t5522 * t6896 + t5761;
t4953 = -t5108 * t5522 + t5298 * t5372 + t5762;
t4591 = t4869 * t6199 + (t4697 * t4947 + t4700 * t4953) * t4760;
t4585 = t4591 * t6025;
t5991 = t5727 * t6208;
t5162 = -t5991 - t6316;
t5235 = t5727 * t6155 + t6087;
t5589 = pkin(9) * t6432;
t5554 = 0.2e1 * t5589 + pkin(2);
t6136 = t5693 * t6466;
t6514 = t5565 * t5693;
t6741 = pkin(9) * t5482;
t6750 = pkin(3) * t5733;
t4772 = 0.1e1 / ((t5162 * t5733 + (-t5691 + 0.2e1 * t6136) * t6305 + t6323) * t5707 + ((t5235 * t5733 + (t5693 * t6088 + t5266) * t5627) * t5734 + (t5554 * t6750 + t6514 + t6741) * t6418) * t5703);
t6393 = t5706 * t5727;
t5387 = pkin(3) * t6393 - t6495;
t5289 = t5733 * t6218 - t5387;
t5555 = t5589 + pkin(2);
t5485 = t5555 + t6750;
t5088 = -t5289 * t5734 + t5485 * t5728;
t6568 = (t5289 * t5728 + t5485 * t5734) * t5707;
t4792 = -t5088 * t5125 + t5126 * t6568;
t4795 = t5088 * t5145 - t5139 * t6568;
t5079 = t5162 * t5707;
t6167 = t5554 * t6418;
t6431 = t5701 * t5728;
t6216 = pkin(9) * t6431;
t6534 = t5412 * t5707;
t6753 = pkin(3) * t5728;
t6617 = 0.1e1 / ((t5079 + t5703 * (pkin(3) * t6167 + t5235 * t5734)) * t5733 + t6098) * (((pkin(3) * t5734 + t5706 * t6216) * t6534 + t5406 * (t6014 - t6753)) * t5733 + (-t5387 * t5728 + t5555 * t5734) * t6534 - t5406 * (t5387 * t5734 + t5555 * t5728));
t6181 = t5669 * t6617;
t4627 = -t4785 * t6181 + (t4792 * t4824 + t4795 * t4830) * t4772;
t4645 = -t4869 * t6181 + (t4792 * t4947 + t4795 * t4953) * t4772;
t5005 = t5703 * (t5893 + (t5982 + t6167) * pkin(3));
t5097 = -t5885 + t6175;
t5569 = pkin(2) * t5589;
t5803 = ((-t5566 + t5569) * t5706 - t5727 * t6231) * t4591;
t5963 = t5734 * t6146;
t5966 = t5728 * t6146;
t6074 = pkin(3) * t6216;
t6001 = 0.2e1 * t6074;
t6021 = t5734 * t6221;
t6071 = t5734 * t6305;
t6236 = t5554 * t6753;
t6254 = 0.2e1 * t5727 * t5733;
t6776 = pkin(3) * t4591;
t6307 = pkin(2) * t6776;
t6362 = t5727 * t5734;
t5496 = t5727 * t5565;
t6886 = t6789 * t5496;
t6381 = t5707 * (t6316 + t6886);
t6406 = t5703 * t5734;
t6508 = t5565 * t5734;
t6575 = (-t5974 + (t6001 + t6153) * t6422) * t5693;
t6680 = t4645 * t5566;
t6810 = 0.2e1 * t4591;
t4315 = ((((t4591 * t6001 + t4645 * t6508) * t5706 + t4645 * t6001 + t4591 * t6508) * t6422 - t4645 * t5974) * t5693 + (((t5734 * t6307 + (-(t4591 * t6361 - 0.2e1 * t4645 * t6071) * t5706 + t6071 * t6810 - t4645 * t6361) * t5727) * t5702 - t5966 * t6776) * t5703 - t5707 * (t4585 + pkin(3) * (t4591 * t6779 + t4645 * t6906))) * t5733 + ((-pkin(3) * t6431 - t5706 * t6021) * t5702 * t4645 + (-t5702 * t6021 + ((pkin(2) * t6362 - t5706 * t6753) * t5702 - t5727 * t5966) * t5701) * t4591) * t6734 - (t4645 * t5828 + t5803) * t5707) / (t5047 + (((t5972 + t6236) * t5702 + pkin(3) * t5963) * t5703 - t6381) * t5733 + ((pkin(3) * t6124 + t5482 * t5728) * t5702 + t5963 * t6432) * t6734 + t5707 * (t5366 + pkin(3) * (t5660 + t5938))) * t4573 + ((-t5702 * t6406 + t6395) * t6680 + (t6575 + t5097 * t6254 - (t5734 * t5955 + t6074) * t6422 + t5815) * t4591) / ((t5005 - t6381) * t5733 + t6098) * t4627;
t6112 = t5703 * t6362;
t5280 = t5565 * t6112 + t5514;
t5242 = t5280 * t6421;
t5462 = t5707 * t5496;
t6227 = pkin(3) * t6406;
t6008 = t5614 * t6227;
t5250 = (-t5462 + t6008) * t5691;
t5850 = t5250 + t5462 - t6078;
t5292 = (t5614 * t6112 - t6755) * t6220;
t6493 = t5614 * t5727;
t5352 = t5707 * t6493 + t6227;
t5877 = t5352 * t6016 + t5622 * t5727 + t5024 + t5292;
t4733 = 0.1e1 / ((t5242 + t5850) * t5733 + t5567 + (pkin(9) * t5359 + t5860 * t6362 + (t6167 - t6490) * t6750) * t5703 + t5877);
t5308 = t5566 * t6432 + t5504;
t5375 = t5569 + t6091;
t6647 = t4733 * t5702;
t4321 = (((-pkin(2) * t6514 + pkin(9) * t5308 - 0.2e1 * t5375 * t6750) * t6421 + (-t5733 * t5991 + (t5693 * t6788 - t6789) * t6305) * t5614) * t4573 + t5485 * t4627 * t6503) * t4733 * t4645 + ((((-t6027 - (0.4e1 * t5569 + t5888) * t6757 + t6871 * t5727) * t5733 + (t5733 * t5887 + t6258) * t5693) * t4573 + (-t5214 * t5693 + (t5375 * t6088 - t5614 * t6886) * t5733) * t4627) * t4733 + ((t5308 * t5706 * t4627 - t4573 * t6317) * t6647 + ((t5693 * t6057 + t5923) * t5727 * t4573 * t6647 + ((t5693 * t5995 + t6315) * t4573 - t6789 * t4627) * t4733 * t6759) * t5701) * pkin(9)) * t4591;
t4639 = t4645 * t6025;
t5883 = -t5496 + t5623;
t6411 = t5703 * t5727;
t4327 = t5707 * (-t4591 * t5565 * t6136 + (t4585 * t6797 + t4639 + (t4645 * t6779 + (t6831 - t6906) * t4591) * pkin(3)) * t5733 - t4591 * t6147 + ((t4591 * t6090 + t4645 * t5623) * t5727 - t6680) * t5706 + (t4591 * t6211 - t4645 * t6231) * t5727 + t4591 * t5511) / ((t5250 + t5242 + (t5459 + t5494) * t5727 + t5728 * t6086 - t6008) * t5733 + (-t5871 + t5586 + (-t5733 * t6778 + t6411 * t6879) * t5701) * pkin(9) + t5877) * t4573 + ((((t4639 + t6307) * t5706 + t4585) * t5733 + t5803) * t5707 + (t6575 + ((t5734 * t5921 + t5883 * t6418) * t5703 + ((t5727 * t6089 + t5554) * t5707 + t5886 * t6362) * pkin(3)) * t5733 + (-t5480 * t5727 + t6436 + t6741) * t5707 - (t5540 * t6418 + t5797) * t6756) * t4645) / ((t5079 + t5005) * t5733 + t6098) * t4627;
t4588 = t4591 ^ 2;
t5899 = (-t5596 * t5733 - t5597 * t5727) * t5702;
t5935 = rSges(3,1) * t5733 - rSges(3,2) * t5727;
t5063 = t5899 + t6704 + (pkin(2) * t5935 + t5674) * t6781;
t5953 = t5620 * t6136;
t6786 = m(3) * (((-rSges(3,1) * t6390 + rSges(3,2) * t5728) * t5733 + t5727 * (rSges(3,1) * t5728 + rSges(3,2) * t6390)) * t5703 - t5935 * t6420);
t6863 = -t4315 * t5063 + t4321 * t6786 - t4327 * t5584 - 0.2e1 * t4588 * (t5814 * t5733 + t5953 + t6093 + (t5733 * t5945 + t6872) * t5727);
t5713 = legFrame(6,3);
t5631 = sin(t5713);
t5643 = cos(t5713);
t5405 = t5631 * t5704 + t5643 * t5700;
t5411 = -t5631 * t5700 + t5643 * t5704;
t5719 = legFrame(6,1);
t5637 = sin(t5719);
t5649 = cos(t5719);
t5737 = legFrame(6,2);
t5662 = sin(t5737);
t6473 = t5649 * t5662;
t5123 = t5405 * t6473 + t5411 * t5637;
t5124 = -t5405 * t5637 + t5411 * t6473;
t6373 = t5707 * t5732;
t4841 = (-t5123 * t5726 + t5124 * t6373) * t5706 - t5124 * t6422;
t6376 = t5707 * t5726;
t4958 = t5123 * t5732 + t5124 * t6376;
t4696 = (-pkin(3) * t4841 - t4958 * t5627) * t5731 - t5725 * (-pkin(3) * t4958 + t4841 * t5627);
t6479 = t5637 * t5662;
t5138 = t5405 * t5649 + t5411 * t6479;
t5144 = t5405 * t6479 - t5411 * t5649;
t4842 = (t5138 * t6373 - t5144 * t5726) * t5706 - t5138 * t6422;
t4961 = t5138 * t6376 + t5144 * t5732;
t4699 = (pkin(3) * t4842 + t4961 * t5627) * t5731 + t5725 * (-pkin(3) * t4961 + t4842 * t5627);
t5593 = pkin(2) * t6419;
t5983 = t5732 * t6207;
t5033 = t5452 + (t5593 + t5983) * t5703;
t6119 = t5702 * t6391;
t5343 = t5703 * t6119 - t6055;
t5390 = t5726 * t6156;
t5458 = t5726 * t5904;
t5919 = t5726 * t6023;
t5872 = t5703 * t5919;
t4759 = 0.1e1 / ((t5343 * t6210 + t5390) * t5692 + ((t5343 * t5565 + t5458) * t5725 - t6078 + pkin(3) * t5033) * t5731 + (t5033 * t5627 + t5622) * t5725 + (t5343 * t6758 - t5872) * pkin(9));
t4784 = t5763 + (t5105 * t5686 - t5683 * t6895) * t5759 + (-t5105 * t5683 - t5686 * t6895) * t6443;
t4823 = t5761 + (t5297 * t6449 + t5682 * t6895) * t5758 - t6944;
t4829 = t5762 + (-t5105 * t5682 + t5297 * t6444) * t5758 - t6943;
t5668 = cos(t5737);
t5023 = (t5732 * t5858 + t5390 + t6318) * t5692;
t5173 = t5405 * t5732 + t5411 * t6376;
t5843 = (-t5405 * t5726 + t5411 * t6373) * t5706 - t5411 * t6422;
t6154 = t5565 * t6391;
t5973 = t5725 * t6154;
t5894 = t5702 * t5973;
t6491 = t5614 * t5732;
t6880 = t5593 - t6491;
t5930 = t5691 * t6491 + t6880;
t6654 = 0.1e1 / (t5023 + ((t5458 - t5924) * t5725 + t5903) * t5731 + t6325 * t5725 + t5829 + ((pkin(3) * t5930 + t5894) * t5731 + (-t5919 + (pkin(3) * t6119 + t5725 * t5930) * t5701) * pkin(9)) * t5703) * ((pkin(3) * t5843 + t5173 * t5627) * t5731 + t5725 * (-pkin(3) * t5173 + t5627 * t5843));
t6200 = t5668 * t6654;
t4572 = t4784 * t6200 + (t4696 * t4823 + t4699 * t4829) * t4759;
t4868 = t5105 * t5373 - t5372 * t6895 + t5763;
t4946 = -t5297 * t5373 + t5522 * t6895 + t5761;
t4952 = -t5105 * t5522 + t5297 * t5372 + t5762;
t4590 = t4868 * t6200 + (t4696 * t4946 + t4699 * t4952) * t4759;
t4584 = t4590 * t6025;
t5992 = t5725 * t6208;
t5160 = -t5992 - t6316;
t5234 = t5725 * t6155 + t6087;
t5587 = pkin(9) * t6434;
t5552 = 0.2e1 * t5587 + pkin(2);
t6137 = t5692 * t6466;
t6515 = t5565 * t5692;
t6742 = pkin(9) * t5481;
t6751 = pkin(3) * t5731;
t4771 = 0.1e1 / ((t5160 * t5731 + (-t5691 + 0.2e1 * t6137) * t6305 + t6324) * t5707 + ((t5234 * t5731 + (t5692 * t6088 + t5265) * t5627) * t5732 + (t5552 * t6751 + t6515 + t6742) * t6419) * t5703);
t6394 = t5706 * t5725;
t5386 = pkin(3) * t6394 - t6495;
t5288 = t5731 * t6218 - t5386;
t5553 = t5587 + pkin(2);
t5484 = t5553 + t6751;
t5087 = -t5288 * t5732 + t5484 * t5726;
t6569 = (t5288 * t5726 + t5484 * t5732) * t5707;
t4791 = -t5087 * t5123 + t5124 * t6569;
t4794 = t5087 * t5144 - t5138 * t6569;
t5078 = t5160 * t5707;
t6168 = t5552 * t6419;
t6433 = t5701 * t5726;
t6217 = pkin(9) * t6433;
t6536 = t5411 * t5707;
t6754 = pkin(3) * t5726;
t6618 = 0.1e1 / ((t5078 + t5703 * (pkin(3) * t6168 + t5234 * t5732)) * t5731 + t6099) * (((pkin(3) * t5732 + t5706 * t6217) * t6536 + t5405 * (t6015 - t6754)) * t5731 + (-t5386 * t5726 + t5553 * t5732) * t6536 - t5405 * (t5386 * t5732 + t5553 * t5726));
t6182 = t5668 * t6618;
t4626 = -t4784 * t6182 + (t4791 * t4823 + t4794 * t4829) * t4771;
t4644 = -t4868 * t6182 + (t4791 * t4946 + t4794 * t4952) * t4771;
t5004 = t5703 * (t5894 + (t5983 + t6168) * pkin(3));
t5096 = -t5885 + t6176;
t5568 = pkin(2) * t5587;
t5804 = ((-t5566 + t5568) * t5706 - t5725 * t6231) * t4590;
t5964 = t5732 * t6146;
t5967 = t5726 * t6146;
t6075 = pkin(3) * t6217;
t6002 = 0.2e1 * t6075;
t6022 = t5732 * t6221;
t6072 = t5732 * t6305;
t6237 = t5552 * t6754;
t6255 = 0.2e1 * t5725 * t5731;
t6777 = pkin(3) * t4590;
t6308 = pkin(2) * t6777;
t6364 = t5725 * t5732;
t5495 = t5725 * t5565;
t6887 = t6789 * t5495;
t6382 = t5707 * (t6316 + t6887);
t6407 = t5703 * t5732;
t6509 = t5565 * t5732;
t6576 = (-t5974 + (t6002 + t6154) * t6422) * t5692;
t6681 = t4644 * t5566;
t6811 = 0.2e1 * t4590;
t4314 = ((((t4590 * t6002 + t4644 * t6509) * t5706 + t4644 * t6002 + t4590 * t6509) * t6422 - t4644 * t5974) * t5692 + (((t5732 * t6308 + (-(t4590 * t6363 - 0.2e1 * t4644 * t6072) * t5706 + t6072 * t6811 - t4644 * t6363) * t5725) * t5702 - t5967 * t6777) * t5703 - t5707 * (t4584 + pkin(3) * (t4590 * t6779 + t4644 * t6907))) * t5731 + ((-pkin(3) * t6433 - t5706 * t6022) * t5702 * t4644 + (-t5702 * t6022 + ((pkin(2) * t6364 - t5706 * t6754) * t5702 - t5725 * t5967) * t5701) * t4590) * t6734 - (t4644 * t5828 + t5804) * t5707) / (t5046 + (((t5973 + t6237) * t5702 + pkin(3) * t5964) * t5703 - t6382) * t5731 + ((pkin(3) * t6125 + t5481 * t5726) * t5702 + t5964 * t6434) * t6734 + t5707 * (t5365 + pkin(3) * (t5659 + t5938))) * t4572 + ((-t5702 * t6407 + t6395) * t6681 + (t6576 + t5096 * t6255 - (t5732 * t5955 + t6075) * t6422 + t5815) * t4590) / ((t5004 - t6382) * t5731 + t6099) * t4626;
t6113 = t5703 * t6364;
t5279 = t5565 * t6113 + t5514;
t5241 = t5279 * t6421;
t5461 = t5707 * t5495;
t6228 = pkin(3) * t6407;
t6009 = t5614 * t6228;
t5249 = (-t5461 + t6009) * t5691;
t5851 = t5249 + t5461 - t6078;
t5291 = (t5614 * t6113 - t6755) * t6220;
t6494 = t5614 * t5725;
t5351 = t5707 * t6494 + t6228;
t5878 = t5351 * t6016 + t5622 * t5725 + t5023 + t5291;
t4732 = 0.1e1 / ((t5241 + t5851) * t5731 + t5567 + (pkin(9) * t5358 + t5860 * t6364 + (t6168 - t6491) * t6751) * t5703 + t5878);
t5307 = t5566 * t6434 + t5504;
t5374 = t5568 + t6091;
t6648 = t4732 * t5702;
t4320 = (((-pkin(2) * t6515 + pkin(9) * t5307 - 0.2e1 * t5374 * t6751) * t6421 + (-t5731 * t5992 + (t5692 * t6788 - t6789) * t6305) * t5614) * t4572 + t5484 * t4626 * t6503) * t4732 * t4644 + ((((-t6027 - (0.4e1 * t5568 + t5888) * t6757 + t6871 * t5725) * t5731 + (t5731 * t5887 + t6258) * t5692) * t4572 + (-t5214 * t5692 + (t5374 * t6088 - t5614 * t6887) * t5731) * t4626) * t4732 + ((t5307 * t5706 * t4626 - t4572 * t6317) * t6648 + ((t5692 * t6057 + t5923) * t5725 * t4572 * t6648 + ((t5692 * t5995 + t6315) * t4572 - t6789 * t4626) * t4732 * t6759) * t5701) * pkin(9)) * t4590;
t4638 = t4644 * t6025;
t5884 = -t5495 + t5623;
t6413 = t5703 * t5725;
t4326 = t5707 * (-t4590 * t5565 * t6137 + (t4584 * t6797 + t4638 + (t4644 * t6779 + (t6831 - t6907) * t4590) * pkin(3)) * t5731 - t4590 * t6147 + ((t4590 * t6090 + t4644 * t5623) * t5725 - t6681) * t5706 + (t4590 * t6211 - t4644 * t6231) * t5725 + t4590 * t5511) / ((t5249 + t5241 + (t5458 + t5494) * t5725 + t5726 * t6086 - t6009) * t5731 + (-t5872 + t5586 + (-t5731 * t6778 + t6413 * t6880) * t5701) * pkin(9) + t5878) * t4572 + ((((t4638 + t6308) * t5706 + t4584) * t5731 + t5804) * t5707 + (t6576 + ((t5732 * t5921 + t5884 * t6419) * t5703 + ((t5725 * t6089 + t5552) * t5707 + t5886 * t6364) * pkin(3)) * t5731 + (-t5480 * t5725 + t6436 + t6742) * t5707 - (t5539 * t6419 + t5798) * t6756) * t4644) / ((t5078 + t5004) * t5731 + t6099) * t4626;
t4587 = t4590 ^ 2;
t5900 = (-t5596 * t5731 - t5597 * t5725) * t5702;
t5936 = rSges(3,1) * t5731 - rSges(3,2) * t5725;
t5062 = t5900 + t6704 + (pkin(2) * t5936 + t5674) * t6781;
t5954 = t5620 * t6137;
t6787 = m(3) * (((-rSges(3,1) * t6391 + rSges(3,2) * t5726) * t5731 + t5725 * (rSges(3,1) * t5726 + rSges(3,2) * t6391)) * t5703 - t5936 * t6420);
t6862 = -t4314 * t5062 + t4320 * t6787 - t4326 * t5584 - 0.2e1 * t4587 * (t5814 * t5731 + t5954 + t6093 + (t5731 * t5945 + t6872) * t5725);
t6894 = t6100 / 0.2e1;
t6496 = t5596 * t5702;
t6893 = t6496 / 0.2e1;
t5473 = t5759 * t6881;
t6107 = t5581 * t6464;
t5278 = t5473 + t6107;
t6106 = t5996 * t6463;
t6499 = t5580 * t5758;
t5315 = -0.2e1 * t6106 + t6499;
t4990 = -t5315 * t5684 - t5759 * t6518 - t5278;
t6892 = t4990 * t5686;
t5621 = 0.2e1 * t5620;
t5677 = 0.2e1 * t6345;
t5922 = -(rSges(3,1) + t5755) * (-rSges(3,1) + t5755) * t5691 + t5772 + (0.2e1 * pkin(8) + rSges(3,3)) * rSges(3,3) + t6314;
t5994 = (rSges(2,1) ^ 2 + rSges(2,2) ^ 2) * m(2) + Icges(3,1) + Icges(2,3);
t6703 = rSges(3,2) * t6832;
t6705 = Icges(3,3) - Icges(3,1);
t4903 = (t5620 * t6255 + t6705 - t6914) * t5691 + t5900 * t6797 + t6914 + (-t5621 * t5725 + t5677) * t5731 + (t5725 * t6703 + t5922) * m(3) + t5994;
t5813 = -t6779 * t6794 / 0.4e1 - t5597 * t5702 / 0.4e1;
t5993 = t5550 * (t6791 - 0.1e1 / 0.2e1);
t6102 = t6496 / 0.4e1;
t5520 = m(2) * rSges(2,2) - t5702 * t6780;
t5534 = rSges(3,1) * t5725 + rSges(3,2) * t5731;
t5619 = m(2) * rSges(2,1) + t5764;
t6566 = ((-t5534 * t6781 - t5520) * t5726 + (m(3) * t5936 + t5619) * t5732) * t5703;
t6870 = (-t5691 / 0.2e1 + 0.1e1 / 0.2e1) * t5620;
t6054 = -t4314 * t4903 - t4320 * t6566 - t4326 * t5062 + 0.4e1 * ((t6102 * t5725 + t5813 * t5731 + t6394 * t6894) * t4644 + (t5954 + (t5725 * t5993 + t5814) * t5731 + t6394 * t6893 + t5725 * t6100 + t6870) * t4590) * t4644;
t4904 = (t5620 * t6254 + t6705 - t6913) * t5691 + t5899 * t6797 + t6913 + (-t5621 * t5727 + t5677) * t5733 + (t5727 * t6703 + t5922) * m(3) + t5994;
t5535 = rSges(3,1) * t5727 + rSges(3,2) * t5733;
t6565 = ((-t5535 * t6781 - t5520) * t5728 + (m(3) * t5935 + t5619) * t5734) * t5703;
t6053 = -t4315 * t4904 - t4321 * t6565 - t4327 * t5063 + 0.4e1 * ((t6102 * t5727 + t5813 * t5733 + t6393 * t6894) * t4645 + (t5953 + (t5727 * t5993 + t5814) * t5733 + t6393 * t6893 + t5727 * t6100 + t6870) * t4591) * t4645;
t4905 = (t5620 * t6253 + t6705 - t6912) * t5691 + t5898 * t6797 + t6912 + (-t5621 * t5729 + t5677) * t5735 + (t5729 * t6703 + t5922) * m(3) + t5994;
t5536 = rSges(3,1) * t5729 + rSges(3,2) * t5735;
t6564 = ((-t5536 * t6781 - t5520) * t5730 + (m(3) * t5934 + t5619) * t5736) * t5703;
t6052 = -t4316 * t4905 - t4322 * t6564 - t4328 * t5064 + 0.4e1 * ((t6102 * t5729 + t5813 * t5735 + t6392 * t6894) * t4646 + (t5952 + (t5729 * t5993 + t5814) * t5735 + t6392 * t6893 + t5729 * t6100 + t6870) * t4592) * t4646;
t4641 = t4644 ^ 2;
t5695 = m(1) + m(2) + m(3);
t6268 = t4644 * t6811;
t6338 = t4587 + t4641;
t6344 = -t4314 * t6566 - t4320 * t5695 + t4326 * t6787 + (-t5520 * t5732 - t5619 * t5726) * t5703 * t4587 + ((-t5936 * t5726 * (t5706 * t6268 + t6338) - t5534 * t5732 * (t5706 * t6338 + t6268)) * t5703 - t4641 * t5534 * t6420) * m(3);
t4642 = t4645 ^ 2;
t6267 = t4645 * t6810;
t6337 = t4588 + t4642;
t6343 = -t4315 * t6565 - t4321 * t5695 + t4327 * t6786 + (-t5520 * t5734 - t5619 * t5728) * t5703 * t4588 + ((-t5935 * t5728 * (t5706 * t6267 + t6337) - t5535 * t5734 * (t5706 * t6337 + t6267)) * t5703 - t4642 * t5535 * t6420) * m(3);
t4643 = t4646 ^ 2;
t6266 = t4646 * t6809;
t6336 = t4589 + t4643;
t6342 = -t4316 * t6564 - t4322 * t5695 + t4328 * t6785 + (-t5520 * t5736 - t5619 * t5730) * t5703 * t4589 + ((-t5934 * t5730 * (t5706 * t6266 + t6336) - t5536 * t5736 * (t5706 * t6336 + t6266)) * t5703 - t4643 * t5536 * t6420) * m(3);
t4909 = (t5620 * t6252 + t6705 - t6911) * t5691 + t5897 * t6797 + t6911 + (-t5621 * t5743 + t5677) * t5749 + (t5743 * t6703 + t5922) * m(3) + t5994;
t5542 = rSges(3,1) * t5743 + rSges(3,2) * t5749;
t6548 = ((-t5542 * t6781 - t5520) * t5744 + (m(3) * t5933 + t5619) * t5750) * t5703;
t6048 = -t4317 * t4909 - t4323 * t6548 - t4329 * t5084 + 0.4e1 * ((t6102 * t5743 + t5813 * t5749 + t6388 * t6894) * t4653 + (t5951 + (t5743 * t5993 + t5814) * t5749 + t6388 * t6893 + t5743 * t6100 + t6870) * t4599) * t4653;
t4910 = (t5620 * t6251 + t6705 - t6910) * t5691 + t5896 * t6797 + t6910 + (-t5621 * t5745 + t5677) * t5751 + (t5745 * t6703 + t5922) * m(3) + t5994;
t5543 = rSges(3,1) * t5745 + rSges(3,2) * t5751;
t6547 = ((-t5543 * t6781 - t5520) * t5746 + (m(3) * t5932 + t5619) * t5752) * t5703;
t6047 = -t4318 * t4910 - t4324 * t6547 - t4330 * t5085 + 0.4e1 * ((t6102 * t5745 + t5813 * t5751 + t6387 * t6894) * t4654 + (t5950 + (t5745 * t5993 + t5814) * t5751 + t6387 * t6893 + t5745 * t6100 + t6870) * t4600) * t4654;
t4911 = (t5620 * t6250 + t6705 - t6909) * t5691 + t5895 * t6797 + t6909 + (-t5621 * t5747 + t5677) * t5753 + (t5747 * t6703 + t5922) * m(3) + t5994;
t5544 = rSges(3,1) * t5747 + rSges(3,2) * t5753;
t6546 = ((-t5544 * t6781 - t5520) * t5748 + (m(3) * t5931 + t5619) * t5754) * t5703;
t6046 = -t4319 * t4911 - t4325 * t6546 - t4331 * t5086 + 0.4e1 * ((t6102 * t5747 + t5813 * t5753 + t6386 * t6894) * t4655 + (t5949 + (t5747 * t5993 + t5814) * t5753 + t6386 * t6893 + t5747 * t6100 + t6870) * t4601) * t4655;
t4650 = t4653 ^ 2;
t6262 = 0.2e1 * t4599 * t4653;
t6335 = t4596 + t4650;
t6341 = -t4317 * t6548 - t4323 * t5695 + t4329 * t6784 + (-t5520 * t5750 - t5619 * t5744) * t5703 * t4596 + ((-t5933 * t5744 * (t5706 * t6262 + t6335) - t5542 * t5750 * (t5706 * t6335 + t6262)) * t5703 - t4650 * t5542 * t6420) * m(3);
t4651 = t4654 ^ 2;
t6261 = 0.2e1 * t4600 * t4654;
t6334 = t4597 + t4651;
t6340 = -t4318 * t6547 - t4324 * t5695 + t4330 * t6783 + (-t5520 * t5752 - t5619 * t5746) * t5703 * t4597 + ((-t5932 * t5746 * (t5706 * t6261 + t6334) - t5543 * t5752 * (t5706 * t6334 + t6261)) * t5703 - t4651 * t5543 * t6420) * m(3);
t4652 = t4655 ^ 2;
t6260 = 0.2e1 * t4601 * t4655;
t6333 = t4598 + t4652;
t6339 = -t4319 * t6546 - t4325 * t5695 + t4331 * t6782 + (-t5520 * t5754 - t5619 * t5748) * t5703 * t4598 + ((-t5931 * t5748 * (t5706 * t6260 + t6333) - t5544 * t5754 * (t5706 * t6333 + t6260)) * t5703 - t4652 * t5544 * t6420) * m(3);
t6442 = t5685 * t5759;
t6169 = t6854 * t6442;
t5947 = t5682 * t6169;
t6346 = t5760 * t5996;
t6104 = t5682 * t6346;
t6351 = t5758 * t5629;
t6889 = (-t5947 - (-0.4e1 * t6874 + 0.2e1 * t6351) * t5996) * t5628 - 0.2e1 * t6104 + t6927 + t6901;
t6457 = t5682 * t5686;
t4896 = -(t5479 * t6457 + t5683 * t6856) * t5758 + t6934;
t4894 = -(t5478 * t6457 + t5683 * t6857) * t5758 + t6936;
t4892 = -(t5477 * t6457 + t5683 * t6858) * t5758 + t6938;
t4890 = -(t5476 * t6457 + t5683 * t6859) * t5758 + t6940;
t4888 = -(t5475 * t6457 + t5683 * t6860) * t5758 + t6942;
t4886 = -(t5474 * t6457 + t5683 * t6861) * t5758 + t6944;
t5248 = t5278 * t5682;
t6462 = t5681 * t5760;
t6103 = t5581 * t6462;
t6869 = 0.2e1 * t6103 + t5248;
t5261 = t5315 * t5682;
t6347 = t5760 * t5580;
t6855 = 0.2e1 * t6347 + t5261;
t6853 = t5627 * t6789;
t5421 = t5700 * t6373 + t5704 * t5726;
t5424 = -t5700 * t5726 + t5704 * t6373;
t5010 = t5668 * t6407 + (t5421 * t5643 + t5424 * t5631) * t5662;
t4997 = t5010 * t6759;
t6543 = t5405 * t5703;
t5228 = -t5662 * t6543 + t5668 * t5707;
t6852 = t5228 * t5884 + (t5228 * t5495 - t4997) * t5691 + t4997;
t5422 = t5700 * t6372 + t5704 * t5728;
t5425 = -t5700 * t5728 + t5704 * t6372;
t5012 = t5669 * t6406 + (t5422 * t5644 + t5425 * t5632) * t5663;
t4998 = t5012 * t6759;
t6542 = t5406 * t5703;
t5229 = -t5663 * t6542 + t5669 * t5707;
t6851 = t5229 * t5883 + (t5229 * t5496 - t4998) * t5691 + t4998;
t5423 = t5700 * t6371 + t5704 * t5730;
t5426 = -t5700 * t5730 + t5704 * t6371;
t5014 = t5670 * t6405 + (t5423 * t5645 + t5426 * t5633) * t5664;
t4999 = t5014 * t6759;
t6541 = t5407 * t5703;
t5230 = -t5664 * t6541 + t5670 * t5707;
t6850 = t5230 * t5882 + (t5230 * t5497 - t4999) * t5691 + t4999;
t5437 = t5700 * t6367 + t5704 * t5744;
t5440 = -t5700 * t5744 + t5704 * t6367;
t5016 = t5671 * t6398 + (t5437 * t5646 + t5440 * t5634) * t5665;
t5001 = t5016 * t6759;
t6540 = t5408 * t5703;
t5231 = -t5665 * t6540 + t5671 * t5707;
t6849 = t5231 * t5881 + (t5231 * t5500 - t5001) * t5691 + t5001;
t5438 = t5700 * t6366 + t5704 * t5746;
t5441 = -t5700 * t5746 + t5704 * t6366;
t5018 = t5672 * t6397 + (t5438 * t5647 + t5441 * t5635) * t5666;
t5002 = t5018 * t6759;
t6539 = t5409 * t5703;
t5232 = -t5666 * t6539 + t5672 * t5707;
t6848 = t5232 * t5880 + (t5232 * t5501 - t5002) * t5691 + t5002;
t5439 = t5700 * t6365 + t5704 * t5748;
t5442 = -t5700 * t5748 + t5704 * t6365;
t5020 = t5673 * t6396 + (t5439 * t5648 + t5442 * t5636) * t5667;
t5003 = t5020 * t6759;
t6538 = t5410 * t5703;
t5233 = -t5667 * t6538 + t5673 * t5707;
t6847 = t5233 * t5879 + (t5233 * t5502 - t5003) * t5691 + t5003;
t6766 = pkin(3) * t5233;
t6845 = t5627 * ((t5020 * t6486 - t6766) * t5691 + t6766) - (-pkin(2) * t6766 + t5020 * t6222) * t5747;
t6767 = pkin(3) * t5232;
t6844 = t5627 * ((t5018 * t6487 - t6767) * t5691 + t6767) - (-pkin(2) * t6767 + t5018 * t6222) * t5745;
t6768 = pkin(3) * t5231;
t6843 = t5627 * ((t5016 * t6488 - t6768) * t5691 + t6768) - (-pkin(2) * t6768 + t5016 * t6222) * t5743;
t6769 = pkin(3) * t5230;
t6842 = t5627 * ((t5014 * t6492 - t6769) * t5691 + t6769) - (-pkin(2) * t6769 + t5014 * t6222) * t5729;
t6770 = pkin(3) * t5229;
t6841 = t5627 * ((t5012 * t6493 - t6770) * t5691 + t6770) - (-pkin(2) * t6770 + t5012 * t6222) * t5727;
t6771 = pkin(3) * t5228;
t6840 = t5627 * ((t5010 * t6494 - t6771) * t5691 + t6771) - (-pkin(2) * t6771 + t5010 * t6222) * t5725;
t6833 = t5996 * (t5522 * t6800 - t5760) - t5684 * (t5277 * t5682 - t6462 * t6854) + t5314 * t5682;
t5184 = -t5421 * t5631 + t5424 * t5643;
t5427 = t5700 * t5732 + t5704 * t6376;
t5430 = -t5700 * t6376 + t5704 * t5732;
t5187 = t5427 * t5643 + t5430 * t5631;
t6076 = pkin(3) * t6218;
t6793 = -t5565 / 0.2e1;
t6808 = -0.2e1 * t5184 * t6076 - 0.2e1 * t5187 * t6793;
t5185 = -t5422 * t5632 + t5425 * t5644;
t5428 = t5700 * t5734 + t5704 * t6375;
t5431 = -t5700 * t6375 + t5704 * t5734;
t5188 = t5428 * t5644 + t5431 * t5632;
t6807 = -0.2e1 * t5185 * t6076 - 0.2e1 * t5188 * t6793;
t5186 = -t5423 * t5633 + t5426 * t5645;
t5429 = t5700 * t5736 + t5704 * t6374;
t5432 = -t5700 * t6374 + t5704 * t5736;
t5189 = t5429 * t5645 + t5432 * t5633;
t6806 = -0.2e1 * t5186 * t6076 - 0.2e1 * t5189 * t6793;
t5202 = -t5437 * t5634 + t5440 * t5646;
t5443 = t5700 * t5750 + t5704 * t6370;
t5446 = -t5700 * t6370 + t5704 * t5750;
t5205 = t5443 * t5646 + t5446 * t5634;
t6805 = -0.2e1 * t5202 * t6076 - 0.2e1 * t5205 * t6793;
t5203 = -t5438 * t5635 + t5441 * t5647;
t5444 = t5700 * t5752 + t5704 * t6369;
t5447 = -t5700 * t6369 + t5704 * t5752;
t5206 = t5444 * t5647 + t5447 * t5635;
t6804 = -0.2e1 * t5203 * t6076 - 0.2e1 * t5206 * t6793;
t5204 = -t5439 * t5636 + t5442 * t5648;
t5445 = t5700 * t5754 + t5704 * t6368;
t5448 = -t5700 * t6368 + t5704 * t5754;
t5207 = t5445 * t5648 + t5448 * t5636;
t6803 = -0.2e1 * t5204 * t6076 - 0.2e1 * t5207 * t6793;
t5336 = t5581 * t5684 - t6502;
t6802 = 0.2e1 * t5336;
t6765 = pkin(3) * t5552;
t6764 = pkin(3) * t5554;
t6763 = pkin(3) * t5556;
t6762 = pkin(3) * t5558;
t6761 = pkin(3) * t5560;
t6760 = pkin(3) * t5562;
t6735 = pkin(9) * t5702;
t5538 = Icges(4,2) + m(4) * (t5710 + t5712);
t5537 = m(4) * (t5710 + t5711) + Icges(4,1);
t6730 = m(4) * (t5711 + t5712) + Icges(4,3);
t6412 = t5703 * t5726;
t5011 = -t5668 * t6412 + (-t5427 * t5631 + t5430 * t5643) * t5662;
t4797 = -(pkin(3) * t5010 + t5228 * t6494) * t6435 + t5011 * t5481;
t6031 = pkin(3) * t6207;
t6537 = t5411 * t5703;
t4806 = t5184 * t6031 + (t5565 * t6206 + t5623) * t6537;
t6085 = t5725 * t6309;
t4817 = t5411 * t6085 - (pkin(3) * t6537 + t5184 * t6494) * t6853;
t6003 = 0.2e1 * t6076;
t4853 = t5010 * t6003 + t5011 * t5565;
t6230 = t5614 * t6756;
t4856 = (t5184 * t5495 - t5411 * t6230) * t5706 + t5187 * t6765;
t6144 = t5614 * t6413;
t4862 = (pkin(3) * t5184 - t5411 * t6144) * t6435 + t5187 * t5481;
t5866 = -(t5010 * t5495 + t5228 * t6759) * t5706 + t5011 * t6765;
t5906 = -0.2e1 * t5937;
t4614 = ((t4853 * t5637 + t5649 * t6808) * t5702 + (t5228 * t5637 + t5649 * t6537) * t5906) * t5692 + ((t5649 * t4856 + t5637 * t5866) * t5702 + t6852 * t5637 + t4806 * t5649) * t5731 + (t4797 * t5637 + t4862 * t5649) * t6735 - t6840 * t5637 - t4817 * t5649;
t4906 = (t5279 * t5706 + t5703 * t6237) * t5702 - t6009 + t5851;
t6024 = t5614 * t6219;
t5944 = (t5351 * t6435 + t5481 * t6412) * t6735 + t5291 + (-t5732 * t6024 + t5622) * t5725 + t5567;
t4751 = 0.1e1 / (t4906 * t5731 + t5046 + t5944);
t6693 = t4614 * t4751;
t5905 = 0.2e1 * t5937;
t4615 = ((-t4853 * t5649 + t5637 * t6808) * t5702 + (t5228 * t5649 - t5637 * t6537) * t5905) * t5692 + ((t5637 * t4856 - t5649 * t5866) * t5702 - t6852 * t5649 + t5637 * t4806) * t5731 - (t4797 * t5649 - t4862 * t5637) * t6735 + t6840 * t5649 - t5637 * t4817;
t6692 = t4615 * t4751;
t6410 = t5703 * t5728;
t5013 = -t5669 * t6410 + (-t5428 * t5632 + t5431 * t5644) * t5663;
t4798 = -(pkin(3) * t5012 + t5229 * t6493) * t6435 + t5013 * t5482;
t6535 = t5412 * t5703;
t4807 = t5185 * t6031 + (t5565 * t6205 + t5623) * t6535;
t6084 = t5727 * t6309;
t4818 = t5412 * t6084 - (pkin(3) * t6535 + t5185 * t6493) * t6853;
t4854 = t5012 * t6003 + t5013 * t5565;
t4857 = (t5185 * t5496 - t5412 * t6230) * t5706 + t5188 * t6764;
t6143 = t5614 * t6411;
t4863 = (pkin(3) * t5185 - t5412 * t6143) * t6435 + t5188 * t5482;
t5865 = -(t5012 * t5496 + t5229 * t6759) * t5706 + t5013 * t6764;
t4616 = ((t4854 * t5638 + t5650 * t6807) * t5702 + (t5229 * t5638 + t5650 * t6535) * t5906) * t5693 + ((t5650 * t4857 + t5638 * t5865) * t5702 + t6851 * t5638 + t4807 * t5650) * t5733 + (t4798 * t5638 + t4863 * t5650) * t6735 - t6841 * t5638 - t4818 * t5650;
t4907 = (t5280 * t5706 + t5703 * t6236) * t5702 - t6008 + t5850;
t5943 = (t5352 * t6435 + t5482 * t6410) * t6735 + t5292 + (-t5734 * t6024 + t5622) * t5727 + t5567;
t4752 = 0.1e1 / (t4907 * t5733 + t5047 + t5943);
t6691 = t4616 * t4752;
t4617 = ((-t4854 * t5650 + t5638 * t6807) * t5702 + (t5229 * t5650 - t5638 * t6535) * t5905) * t5693 + ((t5638 * t4857 - t5650 * t5865) * t5702 - t6851 * t5650 + t5638 * t4807) * t5733 - (t4798 * t5650 - t4863 * t5638) * t6735 + t6841 * t5650 - t5638 * t4818;
t6690 = t4617 * t4752;
t6408 = t5703 * t5730;
t5015 = -t5670 * t6408 + (-t5429 * t5633 + t5432 * t5645) * t5664;
t4799 = -(pkin(3) * t5014 + t5230 * t6492) * t6435 + t5015 * t5483;
t6533 = t5413 * t5703;
t4808 = t5186 * t6031 + (t5565 * t6201 + t5623) * t6533;
t6083 = t5729 * t6309;
t4819 = t5413 * t6083 - (pkin(3) * t6533 + t5186 * t6492) * t6853;
t4855 = t5014 * t6003 + t5015 * t5565;
t4858 = (t5186 * t5497 - t5413 * t6230) * t5706 + t5189 * t6763;
t6142 = t5614 * t6409;
t4864 = (pkin(3) * t5186 - t5413 * t6142) * t6435 + t5189 * t5483;
t5864 = -(t5014 * t5497 + t5230 * t6759) * t5706 + t5015 * t6763;
t4618 = ((t4855 * t5639 + t5651 * t6806) * t5702 + (t5230 * t5639 + t5651 * t6533) * t5906) * t5694 + ((t5651 * t4858 + t5639 * t5864) * t5702 + t6850 * t5639 + t4808 * t5651) * t5735 + (t4799 * t5639 + t4864 * t5651) * t6735 - t6842 * t5639 - t4819 * t5651;
t4908 = (t5281 * t5706 + t5703 * t6235) * t5702 - t6007 + t5849;
t5942 = (t5353 * t6435 + t5483 * t6408) * t6735 + t5293 + (-t5736 * t6024 + t5622) * t5729 + t5567;
t4753 = 0.1e1 / (t4908 * t5735 + t5048 + t5942);
t6689 = t4618 * t4753;
t4619 = ((-t4855 * t5651 + t5639 * t6806) * t5702 + (t5230 * t5651 - t5639 * t6533) * t5905) * t5694 + ((t5639 * t4858 - t5651 * t5864) * t5702 - t6850 * t5651 + t5639 * t4808) * t5735 - (t4799 * t5651 - t4864 * t5639) * t6735 + t6842 * t5651 - t5639 * t4819;
t6688 = t4619 * t4753;
t6403 = t5703 * t5744;
t5017 = -t5671 * t6403 + (-t5443 * t5634 + t5446 * t5646) * t5665;
t4810 = -(pkin(3) * t5016 + t5231 * t6488) * t6435 + t5017 * t5487;
t6531 = t5414 * t5703;
t4814 = t5202 * t6031 + (t5565 * t6204 + t5623) * t6531;
t6082 = t5743 * t6309;
t4820 = t5414 * t6082 - (pkin(3) * t6531 + t5202 * t6488) * t6853;
t4859 = t5016 * t6003 + t5017 * t5565;
t4865 = (t5202 * t5500 - t5414 * t6230) * t5706 + t5205 * t6762;
t6141 = t5614 * t6404;
t4874 = (pkin(3) * t5202 - t5414 * t6141) * t6435 + t5205 * t5487;
t5863 = -(t5016 * t5500 + t5231 * t6759) * t5706 + t5017 * t6762;
t4620 = ((t4859 * t5640 + t5652 * t6805) * t5702 + (t5231 * t5640 + t5652 * t6531) * t5906) * t5696 + ((t5652 * t4865 + t5640 * t5863) * t5702 + t6849 * t5640 + t4814 * t5652) * t5749 + (t4810 * t5640 + t4874 * t5652) * t6735 - t6843 * t5640 - t4820 * t5652;
t4918 = (t5284 * t5706 + t5703 * t6234) * t5702 - t6006 + t5848;
t5941 = (t5355 * t6435 + t5487 * t6403) * t6735 + t5303 + (-t5750 * t6024 + t5622) * t5743 + t5567;
t4756 = 0.1e1 / (t4918 * t5749 + t5053 + t5941);
t6687 = t4620 * t4756;
t4621 = ((-t4859 * t5652 + t5640 * t6805) * t5702 + (t5231 * t5652 - t5640 * t6531) * t5905) * t5696 + ((t5640 * t4865 - t5652 * t5863) * t5702 - t6849 * t5652 + t5640 * t4814) * t5749 - (t4810 * t5652 - t4874 * t5640) * t6735 + t6843 * t5652 - t5640 * t4820;
t6686 = t4621 * t4756;
t6401 = t5703 * t5746;
t5019 = -t5672 * t6401 + (-t5444 * t5635 + t5447 * t5647) * t5666;
t4811 = -(pkin(3) * t5018 + t5232 * t6487) * t6435 + t5019 * t5488;
t6529 = t5415 * t5703;
t4815 = t5203 * t6031 + (t5565 * t6203 + t5623) * t6529;
t6081 = t5745 * t6309;
t4821 = t5415 * t6081 - (pkin(3) * t6529 + t5203 * t6487) * t6853;
t4860 = t5018 * t6003 + t5019 * t5565;
t4866 = (t5203 * t5501 - t5415 * t6230) * t5706 + t5206 * t6761;
t6140 = t5614 * t6402;
t4875 = (pkin(3) * t5203 - t5415 * t6140) * t6435 + t5206 * t5488;
t5862 = -(t5018 * t5501 + t5232 * t6759) * t5706 + t5019 * t6761;
t4622 = ((t4860 * t5641 + t5653 * t6804) * t5702 + (t5232 * t5641 + t5653 * t6529) * t5906) * t5697 + ((t5653 * t4866 + t5641 * t5862) * t5702 + t6848 * t5641 + t4815 * t5653) * t5751 + (t4811 * t5641 + t4875 * t5653) * t6735 - t6844 * t5641 - t4821 * t5653;
t4919 = (t5285 * t5706 + t5703 * t6233) * t5702 - t6005 + t5847;
t5940 = (t5356 * t6435 + t5488 * t6401) * t6735 + t5304 + (-t5752 * t6024 + t5622) * t5745 + t5567;
t4757 = 0.1e1 / (t4919 * t5751 + t5054 + t5940);
t6685 = t4622 * t4757;
t4623 = ((-t4860 * t5653 + t5641 * t6804) * t5702 + (t5232 * t5653 - t5641 * t6529) * t5905) * t5697 + ((t5641 * t4866 - t5653 * t5862) * t5702 - t6848 * t5653 + t5641 * t4815) * t5751 - (t4811 * t5653 - t4875 * t5641) * t6735 + t6844 * t5653 - t5641 * t4821;
t6684 = t4623 * t4757;
t6399 = t5703 * t5748;
t5021 = -t5673 * t6399 + (-t5445 * t5636 + t5448 * t5648) * t5667;
t4812 = -(pkin(3) * t5020 + t5233 * t6486) * t6435 + t5021 * t5489;
t6527 = t5416 * t5703;
t4816 = t5204 * t6031 + (t5565 * t6202 + t5623) * t6527;
t6080 = t5747 * t6309;
t4822 = t5416 * t6080 - (pkin(3) * t6527 + t5204 * t6486) * t6853;
t4861 = t5020 * t6003 + t5021 * t5565;
t4867 = (t5204 * t5502 - t5416 * t6230) * t5706 + t5207 * t6760;
t6139 = t5614 * t6400;
t4876 = (pkin(3) * t5204 - t5416 * t6139) * t6435 + t5207 * t5489;
t5861 = -(t5020 * t5502 + t5233 * t6759) * t5706 + t5021 * t6760;
t4624 = ((t4861 * t5642 + t5654 * t6803) * t5702 + (t5233 * t5642 + t5654 * t6527) * t5906) * t5698 + ((t5654 * t4867 + t5642 * t5861) * t5702 + t6847 * t5642 + t4816 * t5654) * t5753 + (t4812 * t5642 + t4876 * t5654) * t6735 - t6845 * t5642 - t4822 * t5654;
t4920 = (t5286 * t5706 + t5703 * t6232) * t5702 - t6004 + t5846;
t5939 = (t5357 * t6435 + t5489 * t6399) * t6735 + t5305 + (-t5754 * t6024 + t5622) * t5747 + t5567;
t4758 = 0.1e1 / (t4920 * t5753 + t5055 + t5939);
t6683 = t4624 * t4758;
t4625 = ((-t4861 * t5654 + t5642 * t6803) * t5702 + (t5233 * t5654 - t5642 * t6527) * t5905) * t5698 + ((t5642 * t4867 - t5654 * t5861) * t5702 - t6847 * t5654 + t5642 * t4816) * t5753 - (t4812 * t5654 - t4876 * t5642) * t6735 + t6845 * t5654 - t5642 * t4822;
t6682 = t4625 * t4758;
t5172 = -t5405 * t6376 + t5411 * t5732;
t5178 = t5405 * t6373 + t5411 * t5726;
t5810 = -t5178 * t6759 - t5495 * t6543;
t5827 = pkin(3) * t6543 + t5178 * t6494;
t5859 = t5703 * t5905;
t6079 = pkin(2) * t6219;
t4668 = (((t5172 * t5565 + t5178 * t6003) * t5702 + t5405 * t5859) * t5668 - 0.2e1 * t5096 * t5662) * t5692 + ((((-t5178 * t5495 + t5405 * t6230) * t5706 + t5172 * t6765) * t5702 + t5810 * t5691 - t5405 * t6079 - t5810) * t5668 + t4906 * t5662) * t5731 + (t5405 * t6085 + (t5172 * t5481 * t5702 + (-(pkin(3) * t5178 - t5405 * t6144) * t6421 - t5827 * t5691 + t5827) * t5701) * pkin(9)) * t5668 + t5662 * t5944;
t6672 = t4668 * t4751;
t5174 = -t5406 * t6375 + t5412 * t5734;
t5180 = t5406 * t6372 + t5412 * t5728;
t5809 = -t5180 * t6759 - t5496 * t6542;
t5826 = pkin(3) * t6542 + t5180 * t6493;
t4669 = (((t5174 * t5565 + t5180 * t6003) * t5702 + t5406 * t5859) * t5669 - 0.2e1 * t5097 * t5663) * t5693 + ((((-t5180 * t5496 + t5406 * t6230) * t5706 + t5174 * t6764) * t5702 + t5809 * t5691 - t5406 * t6079 - t5809) * t5669 + t4907 * t5663) * t5733 + (t5406 * t6084 + (t5174 * t5482 * t5702 + (-(pkin(3) * t5180 - t5406 * t6143) * t6421 - t5826 * t5691 + t5826) * t5701) * pkin(9)) * t5669 + t5663 * t5943;
t6671 = t4669 * t4752;
t5176 = -t5407 * t6374 + t5413 * t5736;
t5182 = t5407 * t6371 + t5413 * t5730;
t5808 = -t5182 * t6759 - t5497 * t6541;
t5825 = pkin(3) * t6541 + t5182 * t6492;
t4670 = (((t5176 * t5565 + t5182 * t6003) * t5702 + t5407 * t5859) * t5670 - 0.2e1 * t5098 * t5664) * t5694 + ((((-t5182 * t5497 + t5407 * t6230) * t5706 + t5176 * t6763) * t5702 + t5808 * t5691 - t5407 * t6079 - t5808) * t5670 + t4908 * t5664) * t5735 + (t5407 * t6083 + (t5176 * t5483 * t5702 + (-(pkin(3) * t5182 - t5407 * t6142) * t6421 - t5825 * t5691 + t5825) * t5701) * pkin(9)) * t5670 + t5664 * t5942;
t6670 = t4670 * t4753;
t5190 = -t5408 * t6370 + t5414 * t5750;
t5196 = t5408 * t6367 + t5414 * t5744;
t5807 = -t5196 * t6759 - t5500 * t6540;
t5821 = pkin(3) * t6540 + t5196 * t6488;
t4671 = (((t5190 * t5565 + t5196 * t6003) * t5702 + t5408 * t5859) * t5671 - 0.2e1 * t5135 * t5665) * t5696 + ((((-t5196 * t5500 + t5408 * t6230) * t5706 + t5190 * t6762) * t5702 + t5807 * t5691 - t5408 * t6079 - t5807) * t5671 + t4918 * t5665) * t5749 + (t5408 * t6082 + (t5190 * t5487 * t5702 + (-(pkin(3) * t5196 - t5408 * t6141) * t6421 - t5821 * t5691 + t5821) * t5701) * pkin(9)) * t5671 + t5665 * t5941;
t6669 = t4671 * t4756;
t5192 = -t5409 * t6369 + t5415 * t5752;
t5198 = t5409 * t6366 + t5415 * t5746;
t5806 = -t5198 * t6759 - t5501 * t6539;
t5820 = pkin(3) * t6539 + t5198 * t6487;
t4672 = (((t5192 * t5565 + t5198 * t6003) * t5702 + t5409 * t5859) * t5672 - 0.2e1 * t5136 * t5666) * t5697 + ((((-t5198 * t5501 + t5409 * t6230) * t5706 + t5192 * t6761) * t5702 + t5806 * t5691 - t5409 * t6079 - t5806) * t5672 + t4919 * t5666) * t5751 + (t5409 * t6081 + (t5192 * t5488 * t5702 + (-(pkin(3) * t5198 - t5409 * t6140) * t6421 - t5820 * t5691 + t5820) * t5701) * pkin(9)) * t5672 + t5666 * t5940;
t6668 = t4672 * t4757;
t5194 = -t5410 * t6368 + t5416 * t5754;
t5200 = t5410 * t6365 + t5416 * t5748;
t5805 = -t5200 * t6759 - t5502 * t6538;
t5819 = pkin(3) * t6538 + t5200 * t6486;
t4673 = (((t5194 * t5565 + t5200 * t6003) * t5702 + t5410 * t5859) * t5673 - 0.2e1 * t5137 * t5667) * t5698 + ((((-t5200 * t5502 + t5410 * t6230) * t5706 + t5194 * t6760) * t5702 + t5805 * t5691 - t5410 * t6079 - t5805) * t5673 + t4920 * t5667) * t5753 + (t5410 * t6080 + (t5194 * t5489 * t5702 + (-(pkin(3) * t5200 - t5410 * t6139) * t6421 - t5819 * t5691 + t5819) * t5701) * pkin(9)) * t5673 + t5667 * t5939;
t6667 = t4673 * t4758;
t6666 = t4696 * t4759;
t6665 = t4697 * t4760;
t6664 = t4698 * t4761;
t6663 = t4699 * t4759;
t6662 = t4700 * t4760;
t6661 = t4701 * t4761;
t6660 = t4702 * t4762;
t6659 = t4703 * t4763;
t6658 = t4704 * t4764;
t6657 = t4705 * t4762;
t6656 = t4706 * t4763;
t6655 = t4707 * t4764;
t6642 = t4751 * t5695;
t6641 = t4752 * t5695;
t6640 = t4753 * t5695;
t6639 = t4756 * t5695;
t6638 = t4757 * t5695;
t6637 = t4758 * t5695;
t6636 = t4759 * t4903;
t6635 = t4759 * t5062;
t6634 = t4759 * t5297;
t6633 = t4760 * t4904;
t6632 = t4760 * t5063;
t6631 = t4760 * t5298;
t6630 = t4761 * t4905;
t6629 = t4761 * t5064;
t6628 = t4761 * t5299;
t6627 = t4762 * t4909;
t6626 = t4762 * t5084;
t6625 = t4762 * t5300;
t6624 = t4763 * t4910;
t6623 = t4763 * t5085;
t6622 = t4763 * t5301;
t6621 = t4764 * t4911;
t6620 = t4764 * t5086;
t6619 = t4764 * t5302;
t6612 = t4771 * t4791;
t6611 = t4771 * t4794;
t6610 = t4771 * t5062;
t6609 = t4771 * t5297;
t6608 = t4771 * t5584;
t6607 = t4772 * t4792;
t6606 = t4772 * t4795;
t6605 = t4772 * t5063;
t6604 = t4772 * t5298;
t6603 = t4772 * t5584;
t6602 = t4773 * t4793;
t6601 = t4773 * t4796;
t6600 = t4773 * t5064;
t6599 = t4773 * t5299;
t6598 = t4773 * t5584;
t6597 = t4777 * t4800;
t6596 = t4777 * t4803;
t6595 = t4777 * t5084;
t6594 = t4777 * t5300;
t6593 = t4777 * t5584;
t6592 = t4778 * t4801;
t6591 = t4778 * t4804;
t6590 = t4778 * t5085;
t6589 = t4778 * t5301;
t6588 = t4778 * t5584;
t6587 = t4779 * t4802;
t6586 = t4779 * t4805;
t6585 = t4779 * t5086;
t6584 = t4779 * t5302;
t6583 = t4779 * t5584;
t6348 = t5759 * t5769;
t6456 = t5682 * t5759;
t5052 = (t5472 * t5758 - t6348) * t5685 - t5471 * t6456;
t6573 = t5052 * t5683;
t6544 = t5336 * t5686;
t6501 = t5580 * t5684;
t6482 = t5628 * t5758;
t6481 = t5629 * t5683;
t6480 = t5629 * t5760;
t6459 = t5682 * t5683;
t6446 = t5683 * t5760;
t6440 = t5686 * t5996;
t6438 = t5686 * t5760;
t6032 = t5758 + 0.2e1 * t5608;
t6105 = t5996 * t6442;
t6148 = t5681 * t6349;
t6170 = t6881 * t6480;
t4754 = (0.2e1 * t6105 - (-0.2e1 * t5522 + t6480) * t6854) * t5628 + ((-t5581 * t6032 + t6463 * t6854) * t5685 + t5580 * t6456 - (-t5760 * t6790 + 0.4e1 * t6350) * t6497) * t5684 - t6170 + (-t5759 * t5996 + t6032 * t6502) * t5685 + (-t5758 * t6854 + t6148) * t5682 - t6854 * t5760;
t5306 = t5464 - t6352 / 0.2e1;
t5844 = t6104 + t6352;
t6332 = ((t5947 / 0.2e1 - (0.2e1 * t6874 - t6351) * t5996) * t5628 + (((-t6106 + t6499 / 0.2e1) * t5682 + t6347) * t5685 + (-t5629 + 0.1e1 / 0.2e1) * t6349 - (-t6351 / 0.2e1 + t6874) * t6517) * t5684 + t5306 * t5629 + ((t6107 / 0.2e1 + t5473 / 0.2e1) * t5682 + t6103) * t5685 - t5464 / 0.2e1 + t5844) * t6945 + t4754 * t5630;
t6259 = t5760 * t6802;
t6249 = t4751 * t6787;
t6248 = t4752 * t6786;
t6247 = t4753 * t6785;
t6246 = t4756 * t6784;
t6245 = t4757 * t6783;
t6244 = t4758 * t6782;
t6243 = t4771 * t6787;
t6242 = t4772 * t6786;
t6241 = t4773 * t6785;
t6240 = t4777 * t6784;
t6239 = t4778 * t6783;
t6238 = t4779 * t6782;
t6194 = t4751 * t6566;
t6193 = t4752 * t6565;
t6192 = t4753 * t6564;
t6191 = t4756 * t6548;
t6190 = t4757 * t6547;
t6189 = t4758 * t6546;
t6188 = t4759 * t6566;
t6187 = t4760 * t6565;
t6186 = t4761 * t6564;
t6185 = t4762 * t6548;
t6184 = t4763 * t6547;
t6183 = t4764 * t6546;
t6129 = t5996 * t6459;
t6128 = t5682 * t6440;
t6127 = t4754 * t6448;
t6066 = t4751 * t6344;
t6065 = t4752 * t6343;
t6064 = t4753 * t6342;
t6063 = t4756 * t6341;
t6062 = t4757 * t6340;
t6061 = t4758 * t6339;
t6034 = -t5522 + t6480;
t5316 = t5471 * t5685 - t5682 * t5769;
t5811 = (t5522 * t5770 - t5771 * t6442) * t5684 + (t5758 * t6461 - t6348) * t5682 + (t5760 * t5771 + t5770 * t6442) * t5681;
t4897 = (t5682 * t6455 - t5686 * t6861) * t5758 + t6943;
t4898 = (t5682 * t6454 - t5686 * t6860) * t5758 + t6941;
t4899 = (t5682 * t6453 - t5686 * t6859) * t5758 + t6939;
t4900 = (t5682 * t6452 - t5686 * t6858) * t5758 + t6937;
t4901 = (t5682 * t6451 - t5686 * t6857) * t5758 + t6935;
t4902 = (t5682 * t6450 - t5686 * t6856) * t5758 + t6933;
t5503 = t5608 + t5758 / 0.2e1;
t5371 = t6854 * t6459;
t5347 = t5682 * t6447 - t5685 * t6438;
t5346 = -t5682 * t6439 - t5685 * t6446;
t5313 = t5580 * t5759 + t5681 * t6927;
t5287 = t5537 * t5758 + t6148;
t5256 = -t5683 * t6854 - 0.2e1 * t6128;
t5255 = -t5686 * t6854 + 0.2e1 * t6129;
t5215 = t5830 - t6881;
t5065 = -t5760 * t6441 - t5770 * t6891 + t6445 * t6874;
t5036 = t5472 * t5683 + t5686 * t6846;
t5000 = t5581 * t6891 + t5759 * t6730 + t6501 * t6874;
t4988 = t5538 * t5758 - t5608 * t6881 + t5830 * t6874;
t4987 = t5302 * t6446 + t6915;
t4986 = t5302 * t6438 - t6916;
t4985 = t5301 * t6446 + t6917;
t4984 = t5301 * t6438 - t6918;
t4983 = t5300 * t6446 + t6919;
t4982 = t5300 * t6438 - t6920;
t4981 = t5299 * t6446 + t6921;
t4980 = t5299 * t6438 - t6922;
t4979 = t5298 * t6446 + t6923;
t4978 = t5298 * t6438 - t6924;
t4977 = t5297 * t6446 + t6925;
t4976 = t5297 * t6438 - t6926;
t4878 = t5686 * t5065 - t5683 * t5811;
t4877 = t5065 * t5683 + t5686 * t5811;
t4813 = (-t5277 * t5684 + t6801 - (-0.2e1 * t5628 + 0.1e1) * t6352) * t5629 - t4990 * t6458 + t5336 * t5759;
t4809 = (-t5215 * t6457 + t5683 * (-t5628 * t6928 - t6465 * t6854 + t5996)) * t5685 - (t5581 * t5681 + t6501) * t6459 + (-0.2e1 * t5629 + 0.1e1) * t6544;
t4790 = t6481 * t6802 + ((-t5371 - 0.2e1 * t6440) * t5628 + t5255 * t6465 - t6881 * t6459 + t6440) * t5685 + (-t5580 * t6457 - t5581 * t5683) * t5684 - t5681 * (-t5580 * t5683 + t5581 * t6457);
t4783 = t5537 - t5830 - t6932;
t4755 = (-0.2e1 * t6908 - 0.2e1 * t5449 - (-0.4e1 * t5628 + 0.2e1) * t6460) * t5630 - t6929 * t6448 + t4989;
t4749 = t4896 * t5682 + t5302 * t5346 + (-t5120 * t5759 - t6915) * t5685;
t4748 = -t4902 * t5682 - t5302 * t5347 + (t5759 * t6900 - t6916) * t5685;
t4747 = t4894 * t5682 + t5301 * t5346 + (-t5117 * t5759 - t6917) * t5685;
t4746 = -t4901 * t5682 - t5301 * t5347 + (t5759 * t6899 - t6918) * t5685;
t4745 = t4892 * t5682 + t5300 * t5346 + (-t5114 * t5759 - t6919) * t5685;
t4744 = -t4900 * t5682 - t5300 * t5347 + (t5759 * t6898 - t6920) * t5685;
t4743 = t4890 * t5682 + t5299 * t5346 + (-t5111 * t5759 - t6921) * t5685;
t4742 = -t4899 * t5682 - t5299 * t5347 + (t5759 * t6897 - t6922) * t5685;
t4741 = t4888 * t5682 + t5298 * t5346 + (-t5108 * t5759 - t6923) * t5685;
t4740 = -t4898 * t5682 - t5298 * t5347 + (t5759 * t6896 - t6924) * t5685;
t4739 = t4886 * t5682 + t5297 * t5346 + (-t5105 * t5759 - t6925) * t5685;
t4738 = -t4897 * t5682 - t5297 * t5347 + (t5759 * t6895 - t6926) * t5685;
t4725 = -t6518 + (t6058 - (t6799 - 0.2e1) * t6497) * t5684 + t5538 + t6518 * t5629 + t6888 + t6932;
t4723 = (-t4896 - t6558) * t5686 + (t4902 - t6552) * t5683;
t4722 = (-t4894 - t6559) * t5686 + (t4901 - t6553) * t5683;
t4721 = (-t4892 - t6560) * t5686 + (t4900 - t6554) * t5683;
t4720 = (-t4890 - t6561) * t5686 + (t4899 - t6555) * t5683;
t4719 = (-t4888 - t6562) * t5686 + (t4898 - t6556) * t5683;
t4718 = (-t4886 - t6563) * t5686 + (t4897 - t6557) * t5683;
t4717 = -t5629 * t6892 + (t5256 * t6482 + (t5277 * t6457 - t5313 * t5683) * t5684 - 0.2e1 * t5306 * t6457 - t5683 * t5287) * t5685 + (t5255 * t5628 - (-t5686 * t6928 - t5371) * t6465 + t5538 * t5686 - t6129) * t5759;
t4716 = t4990 * t6481 + (t5255 * t6482 + (-t5277 * t6459 - t5313 * t5686) * t5684 + 0.2e1 * t5306 * t6459 - t5287 * t5686) * t5685 - (t5256 * t5628 + (t5683 * t6928 - t6457 * t6854) * t6465 + t5538 * t5683 + t6128) * t5759;
t4715 = -t6900 * t5346 + t5120 * t5347 + (t4896 * t5683 + t4902 * t5686) * t5685;
t4714 = -t6899 * t5346 + t5117 * t5347 + (t4894 * t5683 + t4901 * t5686) * t5685;
t4713 = -t6898 * t5346 + t5114 * t5347 + (t4892 * t5683 + t4900 * t5686) * t5685;
t4712 = -t6897 * t5346 + t5111 * t5347 + (t4890 * t5683 + t4899 * t5686) * t5685;
t4711 = -t6896 * t5346 + t5108 * t5347 + (t4888 * t5683 + t4898 * t5686) * t5685;
t4710 = -t6895 * t5346 + t5105 * t5347 + (t4886 * t5683 + t4897 * t5686) * t5685;
t4709 = (t5683 * t6259 - t6892) * t5629 + (t5683 * t4988 - t5686 * t6833) * t5685 - t5000 * t5686 - t5683 * t5522 * t5336;
t4708 = (t4990 * t5683 + t5686 * t6259) * t5629 + (t4988 * t5686 + t5683 * t6833) * t5685 + t5000 * t5683 - t5522 * t6544;
t4695 = (t5684 * t6930 + t6889) * t5630 + t6127 + ((-t5684 * t6855 - t6869) * t5630 + t6347 * t5684 + t6103) * t5685 + (-t6517 * t5684 + t5996 - t6256) * t6874;
t4694 = t6034 * t6518 + t5503 * t5684 * t6257 + t6170 + t5538 * t5522 + (-t5684 * t6034 * t6928 - 0.2e1 * t5503 * t6500) * t5681 + t6332;
t4693 = (-t5522 * t6854 - 0.2e1 * t6105) * t5628 + (-t5313 * t5682 + (-t6169 + 0.2e1 * t6346) * t5681) * t5684 + t6105 - t5287 * t5682 - t5537 * t5760 + t6332;
t4692 = ((t5685 * t6855 - t6930) * t5684 + t6869 * t5685 - t6889) * t5630 - t6127 + (-t5947 - (-t6874 + t6351) * t6928) * t5628 + ((-t5261 - t6347) * t5685 + t5845 + t6036) * t5684 + (-t5248 - t6103) * t5685 - t5844 + t6901;
t4691 = -t4802 * t6584 - t5120 * t6177;
t4690 = t4805 * t6584 + t6177 * t6900;
t4689 = -t4801 * t6589 - t5117 * t6178;
t4688 = t4804 * t6589 + t6178 * t6899;
t4687 = -t4800 * t6594 - t5114 * t6179;
t4686 = t4803 * t6594 + t6179 * t6898;
t4685 = -t4793 * t6599 - t5111 * t6180;
t4684 = t4796 * t6599 + t6180 * t6897;
t4683 = -t4792 * t6604 - t5108 * t6181;
t4682 = t4795 * t6604 + t6181 * t6896;
t4681 = -t4791 * t6609 - t5105 * t6182;
t4680 = t4794 * t6609 + t6182 * t6895;
t4679 = (t4802 * t6900 - t4805 * t5120) * t4779;
t4678 = (t4801 * t6899 - t4804 * t5117) * t4778;
t4677 = (t4800 * t6898 - t4803 * t5114) * t4777;
t4676 = (t4793 * t6897 - t4796 * t5111) * t4773;
t4675 = (t4792 * t6896 - t4795 * t5108) * t4772;
t4674 = (t4791 * t6895 - t4794 * t5105) * t4771;
t4667 = -t4704 * t6619 + t5120 * t6195;
t4666 = t4707 * t6619 - t6195 * t6900;
t4665 = -t4703 * t6622 + t5117 * t6196;
t4664 = t4706 * t6622 - t6196 * t6899;
t4663 = -t4702 * t6625 + t5114 * t6197;
t4662 = t4705 * t6625 - t6197 * t6898;
t4661 = -t4698 * t6628 + t5111 * t6198;
t4660 = t4701 * t6628 - t6198 * t6897;
t4659 = -t4697 * t6631 + t5108 * t6199;
t4658 = t4700 * t6631 - t6199 * t6896;
t4657 = -t4696 * t6634 + t5105 * t6200;
t4656 = t4699 * t6634 - t6200 * t6895;
t4637 = (t4704 * t6900 - t4707 * t5120) * t4764;
t4636 = (t4703 * t6899 - t4706 * t5117) * t4763;
t4635 = (t4702 * t6898 - t4705 * t5114) * t4762;
t4634 = (t4698 * t6897 - t4701 * t5111) * t4761;
t4633 = (t4697 * t6896 - t4700 * t5108) * t4760;
t4632 = (t4696 * t6895 - t4699 * t5105) * t4759;
t4613 = t4673 * t6637 + (t6546 * t6649 + t6613 * t6782) * t5673;
t4612 = t4672 * t6638 + (t6547 * t6650 + t6614 * t6783) * t5672;
t4611 = t4671 * t6639 + (t6548 * t6651 + t6615 * t6784) * t5671;
t4610 = -t4673 * t6244 + (t5086 * t6649 - t5584 * t6613) * t5673;
t4609 = -t4672 * t6245 + (t5085 * t6650 - t5584 * t6614) * t5672;
t4608 = -t4671 * t6246 + (t5084 * t6651 - t5584 * t6615) * t5671;
t4607 = t4670 * t6640 + (t6564 * t6652 + t6616 * t6785) * t5670;
t4606 = t4669 * t6641 + (t6565 * t6653 + t6617 * t6786) * t5669;
t4605 = t4668 * t6642 + (t6566 * t6654 + t6618 * t6787) * t5668;
t4604 = -t4670 * t6247 + (t5064 * t6652 - t5584 * t6616) * t5670;
t4603 = -t4669 * t6248 + (t5063 * t6653 - t5584 * t6617) * t5669;
t4602 = -t4668 * t6249 + (t5062 * t6654 - t5584 * t6618) * t5668;
t4583 = t4673 * t6189 + (t4911 * t6649 - t5086 * t6613) * t5673;
t4582 = t4672 * t6190 + (t4910 * t6650 - t5085 * t6614) * t5672;
t4581 = t4671 * t6191 + (t4909 * t6651 - t5084 * t6615) * t5671;
t4580 = t4670 * t6192 + (t4905 * t6652 - t5064 * t6616) * t5670;
t4579 = t4669 * t6193 + (t4904 * t6653 - t5063 * t6617) * t5669;
t4578 = t4668 * t6194 + (t4903 * t6654 - t5062 * t6618) * t5668;
t4571 = t4625 * t6637 + t4704 * t6183 - t4802 * t6238;
t4570 = t4624 * t6637 + t4707 * t6183 - t4805 * t6238;
t4569 = t4623 * t6638 + t4703 * t6184 - t4801 * t6239;
t4568 = t4622 * t6638 + t4706 * t6184 - t4804 * t6239;
t4567 = t4621 * t6639 + t4702 * t6185 - t4800 * t6240;
t4566 = t4620 * t6639 + t4705 * t6185 - t4803 * t6240;
t4565 = -t4625 * t6244 + t4704 * t6620 + t4802 * t6583;
t4564 = -t4624 * t6244 + t4707 * t6620 + t4805 * t6583;
t4563 = -t4623 * t6245 + t4703 * t6623 + t4801 * t6588;
t4562 = -t4622 * t6245 + t4706 * t6623 + t4804 * t6588;
t4561 = -t4621 * t6246 + t4702 * t6626 + t4800 * t6593;
t4560 = -t4620 * t6246 + t4705 * t6626 + t4803 * t6593;
t4559 = t4619 * t6640 + t4698 * t6186 - t4793 * t6241;
t4558 = t4618 * t6640 + t4701 * t6186 - t4796 * t6241;
t4557 = t4617 * t6641 + t4697 * t6187 - t4792 * t6242;
t4556 = t4616 * t6641 + t4700 * t6187 - t4795 * t6242;
t4555 = t4615 * t6642 + t4696 * t6188 - t4791 * t6243;
t4554 = t4614 * t6642 + t4699 * t6188 - t4794 * t6243;
t4553 = -t4619 * t6247 + t4698 * t6629 + t4793 * t6598;
t4552 = -t4618 * t6247 + t4701 * t6629 + t4796 * t6598;
t4551 = -t4617 * t6248 + t4697 * t6632 + t4792 * t6603;
t4550 = -t4616 * t6248 + t4700 * t6632 + t4795 * t6603;
t4549 = -t4615 * t6249 + t4696 * t6635 + t4791 * t6608;
t4548 = -t4614 * t6249 + t4699 * t6635 + t4794 * t6608;
t4547 = (-t4625 * t5302 + t4673 * t5120) * t4758;
t4546 = (t4624 * t5302 - t4673 * t6900) * t4758;
t4545 = (-t4623 * t5301 + t4672 * t5117) * t4757;
t4544 = (t4622 * t5301 - t4672 * t6899) * t4757;
t4543 = (-t4621 * t5300 + t4671 * t5114) * t4756;
t4542 = (t4620 * t5300 - t4671 * t6898) * t4756;
t4541 = t4625 * t6189 + t4704 * t6621 + t4802 * t6585;
t4540 = t4624 * t6189 + t4707 * t6621 + t4805 * t6585;
t4539 = t4623 * t6190 + t4703 * t6624 + t4801 * t6590;
t4538 = t4622 * t6190 + t4706 * t6624 + t4804 * t6590;
t4537 = t4621 * t6191 + t4702 * t6627 + t4800 * t6595;
t4536 = t4620 * t6191 + t4705 * t6627 + t4803 * t6595;
t4535 = (-t4619 * t5299 + t4670 * t5111) * t4753;
t4534 = (t4618 * t5299 - t4670 * t6897) * t4753;
t4533 = (-t4617 * t5298 + t4669 * t5108) * t4752;
t4532 = (t4616 * t5298 - t4669 * t6896) * t4752;
t4531 = (-t4615 * t5297 + t4668 * t5105) * t4751;
t4530 = (t4614 * t5297 - t4668 * t6895) * t4751;
t4529 = t4619 * t6192 + t4698 * t6630 + t4793 * t6600;
t4528 = t4618 * t6192 + t4701 * t6630 + t4796 * t6600;
t4527 = t4617 * t6193 + t4697 * t6633 + t4792 * t6605;
t4526 = t4616 * t6193 + t4700 * t6633 + t4795 * t6605;
t4525 = t4615 * t6194 + t4696 * t6636 + t4791 * t6610;
t4524 = t4614 * t6194 + t4699 * t6636 + t4794 * t6610;
t4523 = (-t4624 * t5120 + t4625 * t6900) * t4758;
t4522 = (-t4622 * t5117 + t4623 * t6899) * t4757;
t4521 = (-t4620 * t5114 + t4621 * t6898) * t4756;
t4520 = (-t4618 * t5111 + t4619 * t6897) * t4753;
t4519 = (-t4616 * t5108 + t4617 * t6896) * t4752;
t4518 = (-t4614 * t5105 + t4615 * t6895) * t4751;
t4517 = t4547 * t5695 + t4667 * t6546 - t4691 * t6782;
t4516 = t4546 * t5695 + t4666 * t6546 - t4690 * t6782;
t4515 = t4545 * t5695 + t4665 * t6547 - t4689 * t6783;
t4514 = t4544 * t5695 + t4664 * t6547 - t4688 * t6783;
t4513 = t4543 * t5695 + t4663 * t6548 - t4687 * t6784;
t4512 = t4542 * t5695 + t4662 * t6548 - t4686 * t6784;
t4511 = -t4547 * t6782 + t4667 * t5086 + t4691 * t5584;
t4510 = -t4546 * t6782 + t4666 * t5086 + t4690 * t5584;
t4509 = -t4545 * t6783 + t4665 * t5085 + t4689 * t5584;
t4508 = -t4544 * t6783 + t4664 * t5085 + t4688 * t5584;
t4507 = -t4543 * t6784 + t4663 * t5084 + t4687 * t5584;
t4506 = -t4542 * t6784 + t4662 * t5084 + t4686 * t5584;
t4505 = t4535 * t5695 + t4661 * t6564 - t4685 * t6785;
t4504 = t4534 * t5695 + t4660 * t6564 - t4684 * t6785;
t4503 = t4533 * t5695 + t4659 * t6565 - t4683 * t6786;
t4502 = t4532 * t5695 + t4658 * t6565 - t4682 * t6786;
t4501 = t4531 * t5695 + t4657 * t6566 - t4681 * t6787;
t4500 = t4530 * t5695 + t4656 * t6566 - t4680 * t6787;
t4499 = -t4535 * t6785 + t4661 * t5064 + t4685 * t5584;
t4498 = -t4534 * t6785 + t4660 * t5064 + t4684 * t5584;
t4497 = -t4533 * t6786 + t4659 * t5063 + t4683 * t5584;
t4496 = -t4532 * t6786 + t4658 * t5063 + t4682 * t5584;
t4495 = -t4531 * t6787 + t4657 * t5062 + t4681 * t5584;
t4494 = -t4530 * t6787 + t4656 * t5062 + t4680 * t5584;
t4493 = t4547 * t6546 + t4667 * t4911 + t4691 * t5086;
t4492 = t4546 * t6546 + t4666 * t4911 + t4690 * t5086;
t4491 = t4545 * t6547 + t4665 * t4910 + t4689 * t5085;
t4490 = t4544 * t6547 + t4664 * t4910 + t4688 * t5085;
t4489 = t4543 * t6548 + t4663 * t4909 + t4687 * t5084;
t4488 = t4542 * t6548 + t4662 * t4909 + t4686 * t5084;
t4487 = t4535 * t6564 + t4661 * t4905 + t4685 * t5064;
t4486 = t4534 * t6564 + t4660 * t4905 + t4684 * t5064;
t4485 = t4533 * t6565 + t4659 * t4904 + t4683 * t5063;
t4484 = t4532 * t6565 + t4658 * t4904 + t4682 * t5063;
t4483 = t4531 * t6566 + t4657 * t4903 + t4681 * t5062;
t4482 = t4530 * t6566 + t4656 * t4903 + t4680 * t5062;
t4481 = t4523 * t5695 + t4637 * t6546 - t4679 * t6782;
t4480 = t4522 * t5695 + t4636 * t6547 - t4678 * t6783;
t4479 = t4521 * t5695 + t4635 * t6548 - t4677 * t6784;
t4478 = -t4523 * t6782 + t4637 * t5086 + t4679 * t5584;
t4477 = -t4522 * t6783 + t4636 * t5085 + t4678 * t5584;
t4476 = -t4521 * t6784 + t4635 * t5084 + t4677 * t5584;
t4475 = t4520 * t5695 + t4634 * t6564 - t4676 * t6785;
t4474 = t4519 * t5695 + t4633 * t6565 - t4675 * t6786;
t4473 = t4518 * t5695 + t4632 * t6566 - t4674 * t6787;
t4472 = -t4520 * t6785 + t4634 * t5064 + t4676 * t5584;
t4471 = -t4519 * t6786 + t4633 * t5063 + t4675 * t5584;
t4470 = -t4518 * t6787 + t4632 * t5062 + t4674 * t5584;
t4469 = t4523 * t6546 + t4637 * t4911 + t4679 * t5086;
t4468 = t4522 * t6547 + t4636 * t4910 + t4678 * t5085;
t4467 = t4521 * t6548 + t4635 * t4909 + t4677 * t5084;
t4466 = t4520 * t6564 + t4634 * t4905 + t4676 * t5064;
t4465 = t4519 * t6565 + t4633 * t4904 + t4675 * t5063;
t4464 = t4518 * t6566 + t4632 * t4903 + t4674 * t5062;
t4451 = t4613 * t6667 + (t4583 * t6649 - t4610 * t6613) * t5673;
t4450 = t4612 * t6668 + (t4582 * t6650 - t4609 * t6614) * t5672;
t4449 = t4611 * t6669 + (t4581 * t6651 - t4608 * t6615) * t5671;
t4448 = t4607 * t6670 + (t4580 * t6652 - t4604 * t6616) * t5670;
t4447 = t4606 * t6671 + (t4579 * t6653 - t4603 * t6617) * t5669;
t4446 = t4605 * t6672 + (t4578 * t6654 - t4602 * t6618) * t5668;
t4445 = t4583 * t6658 + t4610 * t6587 + t4613 * t6682;
t4444 = t4583 * t6655 + t4610 * t6586 + t4613 * t6683;
t4443 = t4582 * t6659 + t4609 * t6592 + t4612 * t6684;
t4442 = t4582 * t6656 + t4609 * t6591 + t4612 * t6685;
t4441 = t4581 * t6660 + t4608 * t6597 + t4611 * t6686;
t4440 = t4581 * t6657 + t4608 * t6596 + t4611 * t6687;
t4439 = t4580 * t6664 + t4604 * t6602 + t4607 * t6688;
t4438 = t4580 * t6661 + t4604 * t6601 + t4607 * t6689;
t4437 = t4579 * t6665 + t4603 * t6607 + t4606 * t6690;
t4436 = t4579 * t6662 + t4603 * t6606 + t4606 * t6691;
t4435 = t4578 * t6666 + t4602 * t6612 + t4605 * t6692;
t4434 = t4578 * t6663 + t4602 * t6611 + t4605 * t6693;
t4433 = t4571 * t6667 + (t4541 * t6649 - t4565 * t6613) * t5673;
t4432 = t4570 * t6667 + (t4540 * t6649 - t4564 * t6613) * t5673;
t4431 = t4569 * t6668 + (t4539 * t6650 - t4563 * t6614) * t5672;
t4430 = t4568 * t6668 + (t4538 * t6650 - t4562 * t6614) * t5672;
t4429 = t4567 * t6669 + (t4537 * t6651 - t4561 * t6615) * t5671;
t4428 = t4566 * t6669 + (t4536 * t6651 - t4560 * t6615) * t5671;
t4427 = t4559 * t6670 + (t4529 * t6652 - t4553 * t6616) * t5670;
t4426 = t4558 * t6670 + (t4528 * t6652 - t4552 * t6616) * t5670;
t4425 = t4557 * t6671 + (t4527 * t6653 - t4551 * t6617) * t5669;
t4424 = t4556 * t6671 + (t4526 * t6653 - t4550 * t6617) * t5669;
t4423 = t4555 * t6672 + (t4525 * t6654 - t4549 * t6618) * t5668;
t4422 = t4554 * t6672 + (t4524 * t6654 - t4548 * t6618) * t5668;
t4421 = t4541 * t6658 + t4565 * t6587 + t4571 * t6682;
t4420 = t4541 * t6655 + t4565 * t6586 + t4571 * t6683;
t4419 = t4540 * t6658 + t4564 * t6587 + t4570 * t6682;
t4418 = t4540 * t6655 + t4564 * t6586 + t4570 * t6683;
t4417 = t4539 * t6659 + t4563 * t6592 + t4569 * t6684;
t4416 = t4539 * t6656 + t4563 * t6591 + t4569 * t6685;
t4415 = t4538 * t6659 + t4562 * t6592 + t4568 * t6684;
t4414 = t4538 * t6656 + t4562 * t6591 + t4568 * t6685;
t4413 = t4537 * t6660 + t4561 * t6597 + t4567 * t6686;
t4412 = t4537 * t6657 + t4561 * t6596 + t4567 * t6687;
t4411 = t4536 * t6660 + t4560 * t6597 + t4566 * t6686;
t4410 = t4536 * t6657 + t4560 * t6596 + t4566 * t6687;
t4409 = t4529 * t6664 + t4553 * t6602 + t4559 * t6688;
t4408 = t4529 * t6661 + t4553 * t6601 + t4559 * t6689;
t4407 = t4528 * t6664 + t4552 * t6602 + t4558 * t6688;
t4406 = t4528 * t6661 + t4552 * t6601 + t4558 * t6689;
t4405 = t4527 * t6665 + t4551 * t6607 + t4557 * t6690;
t4404 = t4527 * t6662 + t4551 * t6606 + t4557 * t6691;
t4403 = t4526 * t6665 + t4550 * t6607 + t4556 * t6690;
t4402 = t4526 * t6662 + t4550 * t6606 + t4556 * t6691;
t4401 = t4525 * t6666 + t4549 * t6612 + t4555 * t6692;
t4400 = t4525 * t6663 + t4549 * t6611 + t4555 * t6693;
t4399 = t4524 * t6666 + t4548 * t6612 + t4554 * t6692;
t4398 = t4524 * t6663 + t4548 * t6611 + t4554 * t6693;
t4397 = t4517 * t6667 + (t4493 * t6649 - t4511 * t6613) * t5673;
t4396 = t4516 * t6667 + (t4492 * t6649 - t4510 * t6613) * t5673;
t4395 = t4515 * t6668 + (t4491 * t6650 - t4509 * t6614) * t5672;
t4394 = t4514 * t6668 + (t4490 * t6650 - t4508 * t6614) * t5672;
t4393 = t4513 * t6669 + (t4489 * t6651 - t4507 * t6615) * t5671;
t4392 = t4512 * t6669 + (t4488 * t6651 - t4506 * t6615) * t5671;
t4391 = t4505 * t6670 + (t4487 * t6652 - t4499 * t6616) * t5670;
t4390 = t4504 * t6670 + (t4486 * t6652 - t4498 * t6616) * t5670;
t4389 = t4503 * t6671 + (t4485 * t6653 - t4497 * t6617) * t5669;
t4388 = t4502 * t6671 + (t4484 * t6653 - t4496 * t6617) * t5669;
t4387 = t4501 * t6672 + (t4483 * t6654 - t4495 * t6618) * t5668;
t4386 = t4500 * t6672 + (t4482 * t6654 - t4494 * t6618) * t5668;
t4385 = t4493 * t6658 + t4511 * t6587 + t4517 * t6682;
t4384 = t4493 * t6655 + t4511 * t6586 + t4517 * t6683;
t4383 = t4492 * t6658 + t4510 * t6587 + t4516 * t6682;
t4382 = t4492 * t6655 + t4510 * t6586 + t4516 * t6683;
t4381 = t4491 * t6659 + t4509 * t6592 + t4515 * t6684;
t4380 = t4491 * t6656 + t4509 * t6591 + t4515 * t6685;
t4379 = t4490 * t6659 + t4508 * t6592 + t4514 * t6684;
t4378 = t4490 * t6656 + t4508 * t6591 + t4514 * t6685;
t4377 = t4489 * t6660 + t4507 * t6597 + t4513 * t6686;
t4376 = t4489 * t6657 + t4507 * t6596 + t4513 * t6687;
t4375 = t4488 * t6660 + t4506 * t6597 + t4512 * t6686;
t4374 = t4488 * t6657 + t4506 * t6596 + t4512 * t6687;
t4373 = t4487 * t6664 + t4499 * t6602 + t4505 * t6688;
t4372 = t4487 * t6661 + t4499 * t6601 + t4505 * t6689;
t4371 = t4486 * t6664 + t4498 * t6602 + t4504 * t6688;
t4370 = t4486 * t6661 + t4498 * t6601 + t4504 * t6689;
t4369 = t4485 * t6665 + t4497 * t6607 + t4503 * t6690;
t4368 = t4485 * t6662 + t4497 * t6606 + t4503 * t6691;
t4367 = t4484 * t6665 + t4496 * t6607 + t4502 * t6690;
t4366 = t4484 * t6662 + t4496 * t6606 + t4502 * t6691;
t4365 = t4483 * t6666 + t4495 * t6612 + t4501 * t6692;
t4364 = t4483 * t6663 + t4495 * t6611 + t4501 * t6693;
t4363 = t4482 * t6666 + t4494 * t6612 + t4500 * t6692;
t4362 = t4482 * t6663 + t4494 * t6611 + t4500 * t6693;
t4361 = t4481 * t6667 + (t4469 * t6649 - t4478 * t6613) * t5673;
t4360 = t4480 * t6668 + (t4468 * t6650 - t4477 * t6614) * t5672;
t4359 = t4479 * t6669 + (t4467 * t6651 - t4476 * t6615) * t5671;
t4358 = t4475 * t6670 + (t4466 * t6652 - t4472 * t6616) * t5670;
t4357 = t4474 * t6671 + (t4465 * t6653 - t4471 * t6617) * t5669;
t4356 = t4473 * t6672 + (t4464 * t6654 - t4470 * t6618) * t5668;
t4355 = t4469 * t6658 + t4478 * t6587 + t4481 * t6682;
t4354 = t4469 * t6655 + t4478 * t6586 + t4481 * t6683;
t4353 = t4468 * t6659 + t4477 * t6592 + t4480 * t6684;
t4352 = t4468 * t6656 + t4477 * t6591 + t4480 * t6685;
t4351 = t4467 * t6660 + t4476 * t6597 + t4479 * t6686;
t4350 = t4467 * t6657 + t4476 * t6596 + t4479 * t6687;
t4349 = t4466 * t6664 + t4472 * t6602 + t4475 * t6688;
t4348 = t4466 * t6661 + t4472 * t6601 + t4475 * t6689;
t4347 = t4465 * t6665 + t4471 * t6607 + t4474 * t6690;
t4346 = t4465 * t6662 + t4471 * t6606 + t4474 * t6691;
t4345 = t4464 * t6666 + t4470 * t6612 + t4473 * t6692;
t4344 = t4464 * t6663 + t4470 * t6611 + t4473 * t6693;
t1 = [t4673 * t6061 + t4672 * t6062 + t4671 * t6063 + t4670 * t6064 + t4669 * t6065 + t4668 * t6066 + (t6046 * t6649 - t6613 * t6867) * t5673 + (t6047 * t6650 - t6614 * t6866) * t5672 + (t6048 * t6651 - t6615 * t6865) * t5671 + (t6052 * t6652 - t6616 * t6864) * t5670 + (t6053 * t6653 - t6617 * t6863) * t5669 + (t6054 * t6654 - t6618 * t6862) * t5668 + (t4434 * t4886 - t4435 * t4897 + t4436 * t4888 - t4437 * t4898 + t4438 * t4890 - t4439 * t4899 + t4440 * t4892 - t4441 * t4900 + t4442 * t4894 - t4443 * t4901 + t4444 * t4896 - t4445 * t4902) * t5760 + (t4442 * t4984 + t4443 * t4985 + t4450 * t4722 + t4444 * t4986 + t4445 * t4987 + t4451 * t4723 + t4434 * t4976 + t4435 * t4977 + t4446 * t4718 + t4436 * t4978 + t4437 * t4979 + t4447 * t4719 + t4438 * t4980 + t4439 * t4981 + t4448 * t4720 + t4440 * t4982 + t4441 * t4983 + t4449 * t4721) * t5759 + (t4444 * t4749 + t4445 * t4748 + t4451 * t4715 + t4438 * t4743 + t4439 * t4742 + t4448 * t4712 + t4440 * t4745 + t4441 * t4744 + t4449 * t4713 + t4442 * t4747 + t4443 * t4746 + t4450 * t4714 + t4434 * t4739 + t4435 * t4738 + t4446 * t4710 + t4436 * t4741 + t4437 * t4740 + t4447 * t4711) * t5758 + ((t4877 * t5686 - t4878 * t5683 + t5022 * t6438 - t5036 * t6446) * t5759 + (-t4877 * t6449 - t4878 * t6444 + t5022 * t5346 + t5036 * t5347) * t5758) * m(4); t6867 * t6586 + t6866 * t6591 + t6865 * t6596 + t6864 * t6601 + t6863 * t6606 + t6862 * t6611 + t6046 * t6655 + t6047 * t6656 + t6048 * t6657 + t6052 * t6661 + t6053 * t6662 + t6054 * t6663 + t4624 * t6061 + t4622 * t6062 + t4620 * t6063 + t4618 * t6064 + t4616 * t6065 + t4614 * t6066 + (t4398 * t4886 - t4399 * t4897 + t4402 * t4888 - t4403 * t4898 + t4406 * t4890 - t4407 * t4899 + t4410 * t4892 - t4411 * t4900 + t4414 * t4894 - t4415 * t4901 + t4418 * t4896 - t4419 * t4902) * t5760 + (t4414 * t4984 + t4415 * t4985 + t4430 * t4722 + t4418 * t4986 + t4419 * t4987 + t4432 * t4723 + t4398 * t4976 + t4399 * t4977 + t4422 * t4718 + t4402 * t4978 + t4403 * t4979 + t4424 * t4719 + t4406 * t4980 + t4407 * t4981 + t4426 * t4720 + t4410 * t4982 + t4411 * t4983 + t4428 * t4721) * t5759 + (t4418 * t4749 + t4419 * t4748 + t4432 * t4715 + t4406 * t4743 + t4407 * t4742 + t4426 * t4712 + t4410 * t4745 + t4411 * t4744 + t4428 * t4713 + t4414 * t4747 + t4415 * t4746 + t4430 * t4714 + t4398 * t4739 + t4399 * t4738 + t4422 * t4710 + t4402 * t4741 + t4403 * t4740 + t4424 * t4711) * t5758 + ((-t4877 * t5682 - t5036 * t6442 - t5052 * t6444 - t5316 * t5346) * t5758 + (-t5316 * t6438 - t6573) * t5759 - t4877 * t5760) * m(4); t6344 * t6692 + t6343 * t6690 + t6342 * t6688 + t6341 * t6686 + t6340 * t6684 + t6339 * t6682 + t6054 * t6666 + t6053 * t6665 + t6052 * t6664 + t6048 * t6660 + t6047 * t6659 + t6046 * t6658 + t6862 * t6612 + t6863 * t6607 + t6864 * t6602 + t6865 * t6597 + t6866 * t6592 + t6867 * t6587 + (m(4) * t4878 + t4400 * t4886 - t4401 * t4897 + t4404 * t4888 - t4405 * t4898 + t4408 * t4890 - t4409 * t4899 + t4412 * t4892 - t4413 * t4900 + t4416 * t4894 - t4417 * t4901 + t4420 * t4896 - t4421 * t4902) * t5760 + ((t5052 * t5686 - t5316 * t6446) * m(4) + t4416 * t4984 + t4417 * t4985 + t4431 * t4722 + t4420 * t4986 + t4421 * t4987 + t4433 * t4723 + t4400 * t4976 + t4401 * t4977 + t4423 * t4718 + t4404 * t4978 + t4405 * t4979 + t4425 * t4719 + t4408 * t4980 + t4409 * t4981 + t4427 * t4720 + t4412 * t4982 + t4413 * t4983 + t4429 * t4721) * t5759 + ((t4878 * t5682 + t5316 * t5347 + (-t5022 * t5759 - t6573) * t5685) * m(4) + t4420 * t4749 + t4421 * t4748 + t4433 * t4715 + t4408 * t4743 + t4409 * t4742 + t4427 * t4712 + t4412 * t4745 + t4413 * t4744 + t4429 * t4713 + t4416 * t4747 + t4417 * t4746 + t4431 * t4714 + t4400 * t4739 + t4401 * t4738 + t4423 * t4710 + t4404 * t4741 + t4405 * t4740 + t4425 * t4711) * t5758; t6867 * t4679 + t6866 * t4678 + t6865 * t4677 + t6864 * t4676 + t6863 * t4675 + t6862 * t4674 + t6046 * t4637 + t6047 * t4636 + t6048 * t4635 + t6052 * t4634 + t6053 * t4633 + t6054 * t4632 + t6339 * t4523 + t6340 * t4522 + t6341 * t4521 + t6342 * t4520 + t6343 * t4519 + t6344 * t4518 + (t4344 * t4886 - t4345 * t4897 + t4346 * t4888 - t4347 * t4898 + t4348 * t4890 - t4349 * t4899 + t4350 * t4892 - t4351 * t4900 + t4352 * t4894 - t4353 * t4901 + t4354 * t4896 - t4355 * t4902 + t4813) * t5760 + (t4352 * t4984 + t4353 * t4985 + t4360 * t4722 + t4354 * t4986 + t4355 * t4987 + t4361 * t4723 + t4344 * t4976 + t4345 * t4977 + t4356 * t4718 + t4346 * t4978 + t4347 * t4979 + t4357 * t4719 + t4348 * t4980 + t4349 * t4981 + t4358 * t4720 + t4350 * t4982 + t4351 * t4983 + t4359 * t4721 + (t4809 * t5760 + t4716) * t5686 + (-t4790 * t5760 + t4717) * t5683) * t5759 + (t4354 * t4749 + t4355 * t4748 + t4361 * t4715 + t4348 * t4743 + t4349 * t4742 + t4358 * t4712 + t4350 * t4745 + t4351 * t4744 + t4359 * t4713 + t4352 * t4747 + t4353 * t4746 + t4360 * t4714 + t4344 * t4739 + t4345 * t4738 + t4356 * t4710 + t4346 * t4741 + t4347 * t4740 + t4357 * t4711 + t4790 * t5347 + t4809 * t5346 + t4813 * t5682 + (-t4716 * t5683 + t4717 * t5686 + (t5215 * t5629 + t5336 * t6931 + t6730) * t5759) * t5685) * t5758; t6867 * t4691 + t6866 * t4689 + t6865 * t4687 + t6864 * t4685 + t6863 * t4683 + t6862 * t4681 + t6046 * t4667 + t6047 * t4665 + t6048 * t4663 + t6052 * t4661 + t6053 * t4659 + t6054 * t4657 + t6339 * t4547 + t6340 * t4545 + t6341 * t4543 + t6342 * t4535 + t6343 * t4533 + t6344 * t4531 + (t4380 * t4984 + t4381 * t4985 + t4395 * t4722 + t4384 * t4986 + t4385 * t4987 + t4397 * t4723 + t4364 * t4976 + t4365 * t4977 + t4387 * t4718 + t4368 * t4978 + t4369 * t4979 + t4389 * t4719 + t4372 * t4980 + t4373 * t4981 + t4391 * t4720 + t4376 * t4982 + t4377 * t4983 + t4393 * t4721 + t4692 * t5686 + t4693 * t5683) * t5759 + (t4708 * t5682 + t4725 * t5347 + t4755 * t5346 + t4384 * t4749 + t4385 * t4748 + t4397 * t4715 + t4376 * t4745 + t4377 * t4744 + t4393 * t4713 + t4380 * t4747 + t4381 * t4746 + t4395 * t4714 + t4364 * t4739 + t4365 * t4738 + t4387 * t4710 + t4368 * t4741 + t4369 * t4740 + t4389 * t4711 + t4372 * t4743 + t4373 * t4742 + t4391 * t4712 + (-t4692 * t5683 + t4693 * t5686 + t4790 * t5759) * t5685) * t5758 + ((-t4725 * t5683 + t4755 * t5686) * t5759 + t4380 * t4894 - t4381 * t4901 + t4384 * t4896 - t4385 * t4902 + t4372 * t4890 - t4373 * t4899 + t4376 * t4892 - t4377 * t4900 + t4364 * t4886 - t4365 * t4897 + t4368 * t4888 - t4369 * t4898 + t4708) * t5760; t6867 * t4690 + t6866 * t4688 + t6865 * t4686 + t6864 * t4684 + t6863 * t4682 + t6862 * t4680 + t6046 * t4666 + t6047 * t4664 + t6048 * t4662 + t6052 * t4660 + t6053 * t4658 + t6054 * t4656 + t6339 * t4546 + t6340 * t4544 + t6341 * t4542 + t6342 * t4534 + t6343 * t4532 + t6344 * t4530 + (t4694 * t5686 + t4695 * t5683 + t4378 * t4984 + t4379 * t4985 + t4394 * t4722 + t4382 * t4986 + t4383 * t4987 + t4396 * t4723 + t4362 * t4976 + t4363 * t4977 + t4386 * t4718 + t4366 * t4978 + t4367 * t4979 + t4388 * t4719 + t4370 * t4980 + t4371 * t4981 + t4390 * t4720 + t4374 * t4982 + t4375 * t4983 + t4392 * t4721) * t5759 + (t4709 * t5682 + t4755 * t5347 + t4783 * t5346 + t4382 * t4749 + t4383 * t4748 + t4396 * t4715 + t4374 * t4745 + t4375 * t4744 + t4392 * t4713 + t4378 * t4747 + t4379 * t4746 + t4394 * t4714 + t4362 * t4739 + t4363 * t4738 + t4386 * t4710 + t4366 * t4741 + t4367 * t4740 + t4388 * t4711 + t4370 * t4743 + t4371 * t4742 + t4390 * t4712 + (-t4694 * t5683 + t4695 * t5686 + t4809 * t5759) * t5685) * t5758 + ((-t4755 * t5683 + t4783 * t5686) * t5759 + t4378 * t4894 - t4379 * t4901 + t4382 * t4896 - t4383 * t4902 + t4370 * t4890 - t4371 * t4899 + t4374 * t4892 - t4375 * t4900 + t4362 * t4886 - t4363 * t4897 + t4366 * t4888 - t4367 * t4898 + t4709) * t5760;];
taucX  = t1;
