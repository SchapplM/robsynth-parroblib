% Calculate minimal parameter regressor of Gravitation load for parallel robot
% P6RRPRRR14V4G7A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,alpha3,alpha4,d1,d4,theta3]';
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% MDP [24x1]
%   Minimal dynamic parameter vector for parallel robot(fixed base model)
%   see P6RRPRRR14V4G7A0_convert_par2_MPV_fixb.m

% Output:
% taugX [6x1]
%   minimal parameter regressor of Gravitation load for parallel robot
%   in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 05:41
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6RRPRRR14V4G7A0_gravload_para_pf_mdp(xP, qJ, g, legFrame, ...
  koppelP, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(7,1),zeros(24,1)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_mdp: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_mdp: qJ has to be [3x6] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_mdp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_mdp: pkin has to be [7x1] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_mdp: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_mdp: Koppelpunkt has to be [6x3] (double)');
assert(isreal(MDP) && all(size(MDP) == [24 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_mdp: MDP has to be [24x1] (double)'); 

%% Symbolic Calculation
% From invdyn_para_plfcoord_taugreg_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-04 05:39:57
% EndTime: 2022-11-04 05:41:29
% DurationCPUTime: 102.33s
% Computational Cost: add. (30975->1446), mult. (69516->2507), div. (1422->18), fcn. (65814->48), ass. (0->905)
t24718 = cos(pkin(4));
t24675 = t24718 * pkin(6);
t24668 = t24675 + qJ(3,6);
t24719 = cos(pkin(3));
t24707 = t24719 ^ 2;
t24637 = t24668 * t24707;
t24714 = sin(pkin(7));
t24717 = cos(pkin(7));
t24715 = sin(pkin(4));
t25295 = pkin(6) * t24715;
t24603 = -t24714 * pkin(2) + t24717 * t25295;
t24716 = sin(pkin(3));
t25083 = t24716 * t24719;
t24521 = t24603 * t25083;
t24870 = -t24521 - t24675;
t24373 = -qJ(3,6) + t24637 + t24870;
t24732 = legFrame(6,2);
t24682 = sin(t24732);
t24688 = cos(t24732);
t24726 = cos(qJ(2,6));
t24708 = t24726 ^ 2;
t24721 = sin(qJ(1,6));
t24640 = t24721 * t24668;
t24720 = sin(qJ(2,6));
t24727 = cos(qJ(1,6));
t25038 = t24720 * t24727;
t24415 = t24603 * t25038 + t24640;
t24569 = t24721 * t24603;
t24643 = t24727 * t24668;
t25315 = t24720 * t24643 - t24569;
t24797 = t24415 * t25083 - t24707 * t25315 + t25315;
t24581 = pkin(2) * t24717 + t24714 * t25295 + pkin(1);
t25075 = t24716 * t24727;
t24961 = t24581 * t25075;
t25082 = t24716 * t24720;
t24964 = t24581 * t25082;
t25166 = t24688 * t24668;
t24174 = (t24373 * t24688 - t24682 * t24961) * t24708 + (-t24682 * t24797 + t24688 * t24964) * t24726 + t25166;
t24662 = 0.1e1 / t24668;
t24750 = xP(6);
t24700 = sin(t24750);
t24703 = cos(t24750);
t24759 = koppelP(6,2);
t24765 = koppelP(6,1);
t24582 = -t24700 * t24759 + t24703 * t24765;
t24751 = xP(5);
t24701 = sin(t24751);
t24704 = cos(t24751);
t24753 = koppelP(6,3);
t25101 = t24704 * t24753;
t24451 = t24582 * t24701 - t25101;
t24588 = t24700 * t24765 + t24703 * t24759;
t24752 = xP(4);
t24702 = sin(t24752);
t24705 = cos(t24752);
t24308 = t24451 * t24702 + t24705 * t24588;
t25199 = t24603 * t24719;
t24460 = -t24668 * t24716 - t25199;
t24552 = t24726 * t24581;
t25321 = -t24460 * t24720 + t24552;
t25379 = 0.1e1 / t25321;
t25269 = t24308 * t25379;
t24445 = t24582 * t24704 + t24701 * t24753;
t24597 = t24726 * pkin(1) + qJ(3,6) * t25082;
t25057 = t24719 * t24720;
t24839 = -t24714 * t25057 + t24717 * t24726;
t25275 = 0.1e1 / (t24839 * pkin(2) + (t24718 * t25082 + (t24714 * t24726 + t24717 * t25057) * t24715) * pkin(6) + t24597) * t24445;
t25391 = (t24682 * t24964 + t24688 * t24797) * t24726 + t24682 * t24668 + (t24373 * t24682 + t24688 * t24961) * t24708;
t24138 = (t24174 * t25275 - t25391 * t25269) * t24662;
t24669 = t24675 + qJ(3,5);
t24638 = t24669 * t24707;
t24374 = -qJ(3,5) + t24638 + t24870;
t24733 = legFrame(5,2);
t24683 = sin(t24733);
t24689 = cos(t24733);
t24728 = cos(qJ(2,5));
t24709 = t24728 ^ 2;
t24723 = sin(qJ(1,5));
t24641 = t24723 * t24669;
t24722 = sin(qJ(2,5));
t24729 = cos(qJ(1,5));
t25032 = t24722 * t24729;
t24419 = t24603 * t25032 + t24641;
t24570 = t24723 * t24603;
t24644 = t24729 * t24669;
t25314 = t24722 * t24644 - t24570;
t24796 = t24419 * t25083 - t24707 * t25314 + t25314;
t25073 = t24716 * t24729;
t24960 = t24581 * t25073;
t25080 = t24716 * t24722;
t24963 = t24581 * t25080;
t25163 = t24689 * t24669;
t24176 = (t24374 * t24689 - t24683 * t24960) * t24709 + (-t24683 * t24796 + t24689 * t24963) * t24728 + t25163;
t24663 = 0.1e1 / t24669;
t24760 = koppelP(5,2);
t24766 = koppelP(5,1);
t24583 = -t24700 * t24760 + t24703 * t24766;
t24754 = koppelP(5,3);
t25100 = t24704 * t24754;
t24452 = t24583 * t24701 - t25100;
t24589 = t24700 * t24766 + t24703 * t24760;
t24310 = t24452 * t24702 + t24705 * t24589;
t24461 = -t24669 * t24716 - t25199;
t24553 = t24728 * t24581;
t25320 = -t24461 * t24722 + t24553;
t25380 = 0.1e1 / t25320;
t25268 = t24310 * t25380;
t24446 = t24583 * t24704 + t24701 * t24754;
t24598 = t24728 * pkin(1) + qJ(3,5) * t25080;
t25055 = t24719 * t24722;
t24838 = -t24714 * t25055 + t24717 * t24728;
t25274 = 0.1e1 / (t24838 * pkin(2) + (t24718 * t25080 + (t24714 * t24728 + t24717 * t25055) * t24715) * pkin(6) + t24598) * t24446;
t25392 = (t24683 * t24963 + t24689 * t24796) * t24728 + t24683 * t24669 + (t24374 * t24683 + t24689 * t24960) * t24709;
t24139 = (t24176 * t25274 - t25392 * t25268) * t24663;
t24670 = t24675 + qJ(3,4);
t24639 = t24670 * t24707;
t24375 = -qJ(3,4) + t24639 + t24870;
t24734 = legFrame(4,2);
t24684 = sin(t24734);
t24690 = cos(t24734);
t24730 = cos(qJ(2,4));
t24710 = t24730 ^ 2;
t24725 = sin(qJ(1,4));
t24642 = t24725 * t24670;
t24724 = sin(qJ(2,4));
t24731 = cos(qJ(1,4));
t25026 = t24724 * t24731;
t24423 = t24603 * t25026 + t24642;
t24571 = t24725 * t24603;
t24645 = t24731 * t24670;
t25313 = t24724 * t24645 - t24571;
t24795 = t24423 * t25083 - t24707 * t25313 + t25313;
t25071 = t24716 * t24731;
t24959 = t24581 * t25071;
t25078 = t24716 * t24724;
t24962 = t24581 * t25078;
t25160 = t24690 * t24670;
t24178 = (t24375 * t24690 - t24684 * t24959) * t24710 + (-t24684 * t24795 + t24690 * t24962) * t24730 + t25160;
t24664 = 0.1e1 / t24670;
t24761 = koppelP(4,2);
t24767 = koppelP(4,1);
t24584 = -t24700 * t24761 + t24703 * t24767;
t24755 = koppelP(4,3);
t25099 = t24704 * t24755;
t24453 = t24584 * t24701 - t25099;
t24590 = t24700 * t24767 + t24703 * t24761;
t24312 = t24453 * t24702 + t24705 * t24590;
t24462 = -t24670 * t24716 - t25199;
t24554 = t24730 * t24581;
t25319 = -t24462 * t24724 + t24554;
t25381 = 0.1e1 / t25319;
t25267 = t24312 * t25381;
t24447 = t24584 * t24704 + t24701 * t24755;
t24599 = t24730 * pkin(1) + qJ(3,4) * t25078;
t25053 = t24719 * t24724;
t24837 = -t24714 * t25053 + t24717 * t24730;
t25273 = 0.1e1 / (t24837 * pkin(2) + (t24718 * t25078 + (t24714 * t24730 + t24717 * t25053) * t24715) * pkin(6) + t24599) * t24447;
t25393 = (t24684 * t24962 + t24690 * t24795) * t24730 + t24684 * t24670 + (t24375 * t24684 + t24690 * t24959) * t24710;
t24140 = (t24178 * t25273 - t25393 * t25267) * t24664;
t24673 = t24675 + qJ(3,1);
t24648 = t24673 * t24707;
t24378 = -qJ(3,1) + t24648 + t24870;
t24737 = legFrame(1,2);
t24687 = sin(t24737);
t24693 = cos(t24737);
t24748 = cos(qJ(2,1));
t24713 = t24748 ^ 2;
t24743 = sin(qJ(1,1));
t24651 = t24743 * t24673;
t24742 = sin(qJ(2,1));
t24749 = cos(qJ(1,1));
t25005 = t24742 * t24749;
t24441 = t24603 * t25005 + t24651;
t24574 = t24743 * t24603;
t24654 = t24749 * t24673;
t25310 = t24742 * t24654 - t24574;
t24792 = t24441 * t25083 - t24707 * t25310 + t25310;
t25059 = t24716 * t24749;
t24953 = t24581 * t25059;
t25066 = t24716 * t24742;
t24956 = t24581 * t25066;
t25151 = t24693 * t24673;
t24184 = (t24378 * t24693 - t24687 * t24953) * t24713 + (-t24687 * t24792 + t24693 * t24956) * t24748 + t25151;
t24667 = 0.1e1 / t24673;
t24764 = koppelP(1,2);
t24770 = koppelP(1,1);
t24587 = -t24700 * t24764 + t24703 * t24770;
t24758 = koppelP(1,3);
t25098 = t24704 * t24758;
t24456 = t24587 * t24701 - t25098;
t24593 = t24700 * t24770 + t24764 * t24703;
t24318 = t24456 * t24702 + t24705 * t24593;
t24471 = -t24673 * t24716 - t25199;
t24560 = t24748 * t24581;
t25316 = -t24471 * t24742 + t24560;
t25384 = 0.1e1 / t25316;
t25264 = t24318 * t25384;
t24450 = t24587 * t24704 + t24701 * t24758;
t24609 = t24748 * pkin(1) + qJ(3,1) * t25066;
t25044 = t24719 * t24742;
t24834 = -t24714 * t25044 + t24717 * t24748;
t25271 = 0.1e1 / (t24834 * pkin(2) + (t24718 * t25066 + (t24714 * t24748 + t24717 * t25044) * t24715) * pkin(6) + t24609) * t24450;
t25396 = (t24687 * t24956 + t24693 * t24792) * t24748 + t24687 * t24673 + (t24378 * t24687 + t24693 * t24953) * t24713;
t24141 = (t24184 * t25271 - t25396 * t25264) * t24667;
t24671 = t24675 + qJ(3,3);
t24646 = t24671 * t24707;
t24376 = -qJ(3,3) + t24646 + t24870;
t24735 = legFrame(3,2);
t24685 = sin(t24735);
t24691 = cos(t24735);
t24744 = cos(qJ(2,3));
t24711 = t24744 ^ 2;
t24739 = sin(qJ(1,3));
t24649 = t24739 * t24671;
t24738 = sin(qJ(2,3));
t24745 = cos(qJ(1,3));
t25017 = t24738 * t24745;
t24433 = t24603 * t25017 + t24649;
t24572 = t24739 * t24603;
t24652 = t24745 * t24671;
t25312 = t24738 * t24652 - t24572;
t24794 = t24433 * t25083 - t24707 * t25312 + t25312;
t25063 = t24716 * t24745;
t24955 = t24581 * t25063;
t25070 = t24716 * t24738;
t24958 = t24581 * t25070;
t25157 = t24691 * t24671;
t24180 = (t24376 * t24691 - t24685 * t24955) * t24711 + (-t24685 * t24794 + t24691 * t24958) * t24744 + t25157;
t24665 = 0.1e1 / t24671;
t24762 = koppelP(3,2);
t24768 = koppelP(3,1);
t24585 = -t24700 * t24762 + t24703 * t24768;
t24756 = koppelP(3,3);
t24997 = t24756 * t24704;
t24454 = t24585 * t24701 - t24997;
t24591 = t24700 * t24768 + t24703 * t24762;
t24314 = t24454 * t24702 + t24705 * t24591;
t24469 = -t24671 * t24716 - t25199;
t24558 = t24744 * t24581;
t25318 = -t24469 * t24738 + t24558;
t25382 = 0.1e1 / t25318;
t25266 = t24314 * t25382;
t24448 = t24585 * t24704 + t24701 * t24756;
t24607 = t24744 * pkin(1) + qJ(3,3) * t25070;
t25048 = t24719 * t24738;
t24836 = -t24714 * t25048 + t24717 * t24744;
t25270 = 0.1e1 / (t24836 * pkin(2) + (t24718 * t25070 + (t24714 * t24744 + t24717 * t25048) * t24715) * pkin(6) + t24607) * t24448;
t25394 = (t24685 * t24958 + t24691 * t24794) * t24744 + t24685 * t24671 + (t24376 * t24685 + t24691 * t24955) * t24711;
t24142 = (t24180 * t25270 - t25394 * t25266) * t24665;
t24672 = t24675 + qJ(3,2);
t24647 = t24672 * t24707;
t24377 = -qJ(3,2) + t24647 + t24870;
t24736 = legFrame(2,2);
t24686 = sin(t24736);
t24692 = cos(t24736);
t24746 = cos(qJ(2,2));
t24712 = t24746 ^ 2;
t24741 = sin(qJ(1,2));
t24650 = t24741 * t24672;
t24740 = sin(qJ(2,2));
t24747 = cos(qJ(1,2));
t25011 = t24740 * t24747;
t24437 = t24603 * t25011 + t24650;
t24573 = t24741 * t24603;
t24653 = t24747 * t24672;
t25311 = t24740 * t24653 - t24573;
t24793 = t24437 * t25083 - t24707 * t25311 + t25311;
t25061 = t24716 * t24747;
t24954 = t24581 * t25061;
t25068 = t24716 * t24740;
t24957 = t24581 * t25068;
t25154 = t24692 * t24672;
t24182 = (t24377 * t24692 - t24686 * t24954) * t24712 + (-t24686 * t24793 + t24692 * t24957) * t24746 + t25154;
t24666 = 0.1e1 / t24672;
t24763 = koppelP(2,2);
t24769 = koppelP(2,1);
t24586 = -t24700 * t24763 + t24703 * t24769;
t24757 = koppelP(2,3);
t24996 = t24757 * t24704;
t24455 = t24586 * t24701 - t24996;
t24592 = t24700 * t24769 + t24763 * t24703;
t24316 = t24455 * t24702 + t24705 * t24592;
t24470 = -t24672 * t24716 - t25199;
t24559 = t24746 * t24581;
t25317 = -t24470 * t24740 + t24559;
t25383 = 0.1e1 / t25317;
t25265 = t24316 * t25383;
t24449 = t24586 * t24704 + t24701 * t24757;
t24608 = t24746 * pkin(1) + qJ(3,2) * t25068;
t25046 = t24719 * t24740;
t24835 = -t24714 * t25046 + t24717 * t24746;
t25272 = 0.1e1 / (t24835 * pkin(2) + (t24718 * t25068 + (t24714 * t24746 + t24717 * t25046) * t24715) * pkin(6) + t24608) * t24449;
t25395 = (t24686 * t24957 + t24692 * t24793) * t24746 + t24686 * t24672 + (t24377 * t24686 + t24692 * t24954) * t24712;
t24143 = (t24182 * t25272 - t25395 * t25265) * t24666;
t24619 = g(1) * t24688 - g(2) * t24682;
t24495 = -g(3) * t24721 + t24619 * t24727;
t24613 = g(1) * t24682 + g(2) * t24688;
t24359 = t24495 * t24726 + t24613 * t24720;
t24620 = g(1) * t24689 - g(2) * t24683;
t24497 = -g(3) * t24723 + t24620 * t24729;
t24614 = g(1) * t24683 + g(2) * t24689;
t24361 = t24497 * t24728 + t24614 * t24722;
t24621 = g(1) * t24690 - g(2) * t24684;
t24498 = -g(3) * t24725 + t24621 * t24731;
t24615 = g(1) * t24684 + g(2) * t24690;
t24363 = t24498 * t24730 + t24615 * t24724;
t24622 = g(1) * t24691 - g(2) * t24685;
t24502 = -g(3) * t24739 + t24622 * t24745;
t24616 = g(1) * t24685 + g(2) * t24691;
t24365 = t24502 * t24744 + t24616 * t24738;
t24623 = g(1) * t24692 - g(2) * t24686;
t24503 = -g(3) * t24741 + t24623 * t24747;
t24617 = g(1) * t24686 + g(2) * t24692;
t24367 = t24503 * t24746 + t24617 * t24740;
t24624 = g(1) * t24693 - g(2) * t24687;
t24504 = -g(3) * t24743 + t24624 * t24749;
t24618 = g(1) * t24687 + g(2) * t24693;
t24369 = t24504 * t24748 + t24618 * t24742;
t25404 = -t24138 * t24359 - t24139 * t24361 - t24140 * t24363 - t24141 * t24369 - t24142 * t24365 - t24143 * t24367;
t25200 = t24603 * t24716;
t24858 = -t24673 * t24719 + t25200;
t25349 = t24743 * t25316 + t24749 * t24858;
t25397 = t25384 * t24667;
t24877 = t25349 * t24748 * t25397;
t24859 = -t24672 * t24719 + t25200;
t25350 = t24741 * t25317 + t24747 * t24859;
t25398 = t25383 * t24666;
t24878 = t25350 * t24746 * t25398;
t24860 = -t24671 * t24719 + t25200;
t25351 = t24739 * t25318 + t24745 * t24860;
t25399 = t25382 * t24665;
t24879 = t25351 * t24744 * t25399;
t24861 = -t24670 * t24719 + t25200;
t25352 = t24725 * t25319 + t24731 * t24861;
t25400 = t25381 * t24664;
t24880 = t25352 * t24730 * t25400;
t24862 = -t24669 * t24719 + t25200;
t25353 = t24723 * t25320 + t24729 * t24862;
t25401 = t25380 * t24663;
t24881 = t25353 * t24728 * t25401;
t24863 = -t24668 * t24719 + t25200;
t25354 = t24721 * t25321 + t24727 * t24863;
t25402 = t25379 * t24662;
t24882 = t25354 * t24726 * t25402;
t25403 = t24359 * t24882 + t24361 * t24881 + t24363 * t24880 + t24365 * t24879 + t24367 * t24878 + t24369 * t24877;
t25304 = -t24451 * t24705 + t24588 * t24702;
t24827 = t25304 * t24688;
t25305 = -t24452 * t24705 + t24589 * t24702;
t24826 = t25305 * t24689;
t25306 = -t24453 * t24705 + t24590 * t24702;
t24825 = t25306 * t24690;
t25307 = -t24454 * t24705 + t24591 * t24702;
t24824 = t25307 * t24691;
t25308 = -t24455 * t24705 + t24592 * t24702;
t24823 = t25308 * t24692;
t25309 = -t24456 * t24705 + t24593 * t24702;
t24822 = t25309 * t24693;
t25149 = t24693 * t24748;
t25390 = t24687 * t24651 - (t24441 * t24687 + t24603 * t25149) * t24707;
t25152 = t24692 * t24746;
t25389 = t24686 * t24650 - (t24437 * t24686 + t24603 * t25152) * t24707;
t25155 = t24691 * t24744;
t25388 = t24685 * t24649 - (t24433 * t24685 + t24603 * t25155) * t24707;
t25158 = t24690 * t24730;
t25387 = t24684 * t24642 - (t24423 * t24684 + t24603 * t25158) * t24707;
t25161 = t24689 * t24728;
t25386 = t24683 * t24641 - (t24419 * t24683 + t24603 * t25161) * t24707;
t25164 = t24688 * t24726;
t25385 = t24682 * t24640 - (t24415 * t24682 + t24603 * t25164) * t24707;
t25372 = -t24721 * t24863 + t24727 * t25321;
t25371 = -t24723 * t24862 + t24729 * t25320;
t25370 = -t24725 * t24861 + t24731 * t25319;
t25369 = -t24739 * t24860 + t24745 * t25318;
t25368 = -t24741 * t24859 + t24747 * t25317;
t25367 = -t24743 * t24858 + t24749 * t25316;
t25184 = t24682 * t24726;
t25348 = (t24415 * t24688 - t24603 * t25184) * t24707 - t24688 * t24640;
t25181 = t24683 * t24728;
t25347 = (t24419 * t24689 - t24603 * t25181) * t24707 - t24689 * t24641;
t25178 = t24684 * t24730;
t25346 = (t24423 * t24690 - t24603 * t25178) * t24707 - t24690 * t24642;
t25175 = t24685 * t24744;
t25345 = (t24433 * t24691 - t24603 * t25175) * t24707 - t24691 * t24649;
t25172 = t24686 * t24746;
t25344 = (t24437 * t24692 - t24603 * t25172) * t24707 - t24692 * t24650;
t25169 = t24687 * t24748;
t25343 = (t24441 * t24693 - t24603 * t25169) * t24707 - t24693 * t24651;
t25342 = t24707 - 0.1e1;
t24889 = g(3) * t24749 + t24624 * t24743;
t24432 = -t24603 * t24749 - t24742 * t24651;
t24431 = -t24742 * t24574 + t24654;
t25303 = -t24431 * t24707 + t24654;
t24209 = (t24432 * t24716 - t24743 * t24560) * t24719 - t25303;
t24980 = t24209 * t25397;
t24883 = t24889 * t24980;
t24890 = g(3) * t24747 + t24623 * t24741;
t24430 = -t24603 * t24747 - t24740 * t24650;
t24429 = -t24740 * t24573 + t24653;
t25302 = -t24429 * t24707 + t24653;
t24208 = (t24430 * t24716 - t24741 * t24559) * t24719 - t25302;
t24981 = t24208 * t25398;
t24884 = t24890 * t24981;
t24891 = g(3) * t24745 + t24622 * t24739;
t24428 = -t24603 * t24745 - t24738 * t24649;
t24427 = -t24738 * t24572 + t24652;
t25301 = -t24427 * t24707 + t24652;
t24207 = (t24428 * t24716 - t24739 * t24558) * t24719 - t25301;
t24982 = t24207 * t25399;
t24885 = t24891 * t24982;
t24892 = g(3) * t24731 + t24621 * t24725;
t24414 = -t24603 * t24731 - t24724 * t24642;
t24413 = -t24724 * t24571 + t24645;
t25300 = -t24413 * t24707 + t24645;
t24206 = (t24414 * t24716 - t24725 * t24554) * t24719 - t25300;
t24983 = t24206 * t25400;
t24886 = t24892 * t24983;
t24893 = g(3) * t24729 + t24620 * t24723;
t24412 = -t24603 * t24729 - t24722 * t24641;
t24411 = -t24722 * t24570 + t24644;
t25299 = -t24411 * t24707 + t24644;
t24205 = (t24412 * t24716 - t24723 * t24553) * t24719 - t25299;
t24984 = t24205 * t25401;
t24887 = t24893 * t24984;
t24894 = g(3) * t24727 + t24619 * t24721;
t24410 = -t24603 * t24727 - t24720 * t24640;
t24409 = -t24720 * t24569 + t24643;
t25298 = -t24409 * t24707 + t24643;
t24204 = (t24410 * t24716 - t24721 * t24552) * t24719 - t25298;
t24985 = t24204 * t25402;
t24888 = t24894 * t24985;
t25297 = t24702 * t25342;
t25296 = t24705 * t25342;
t25288 = MDP(13) * t24716;
t25056 = t24719 * t24721;
t24833 = t24716 * t25038 + t25056;
t25039 = t24720 * t24721;
t25051 = t24719 * t24727;
t25076 = t24716 * t24726;
t24264 = -t24619 * t24833 + g(3) * (t24716 * t25039 - t25051) + t24613 * t25076;
t25287 = MDP(14) * t24264;
t25054 = t24719 * t24723;
t24832 = t24716 * t25032 + t25054;
t25033 = t24722 * t24723;
t25050 = t24719 * t24729;
t25074 = t24716 * t24728;
t24265 = -t24620 * t24832 + g(3) * (t24716 * t25033 - t25050) + t24614 * t25074;
t25286 = MDP(14) * t24265;
t25052 = t24719 * t24725;
t24831 = t24716 * t25026 + t25052;
t25027 = t24724 * t24725;
t25049 = t24719 * t24731;
t25072 = t24716 * t24730;
t24266 = -t24621 * t24831 + g(3) * (t24716 * t25027 - t25049) + t24615 * t25072;
t25285 = MDP(14) * t24266;
t25047 = t24719 * t24739;
t24830 = t24716 * t25017 + t25047;
t25018 = t24738 * t24739;
t25042 = t24719 * t24745;
t25064 = t24716 * t24744;
t24270 = -t24622 * t24830 + g(3) * (t24716 * t25018 - t25042) + t24616 * t25064;
t25284 = MDP(14) * t24270;
t25045 = t24719 * t24741;
t24829 = t24716 * t25011 + t25045;
t25012 = t24740 * t24741;
t25041 = t24719 * t24747;
t25062 = t24716 * t24746;
t24271 = -t24623 * t24829 + g(3) * (t24716 * t25012 - t25041) + t24617 * t25062;
t25283 = MDP(14) * t24271;
t25043 = t24719 * t24743;
t24828 = t24716 * t25005 + t25043;
t25006 = t24742 * t24743;
t25040 = t24719 * t24749;
t25060 = t24716 * t24748;
t24272 = -t24624 * t24828 + g(3) * (t24716 * t25006 - t25040) + t24618 * t25060;
t25282 = MDP(14) * t24272;
t25281 = t24264 * t24662;
t25280 = t24265 * t24663;
t25279 = t24266 * t24664;
t25278 = t24270 * t24665;
t25277 = t24271 * t24666;
t25276 = t24272 * t24667;
t24555 = t24581 * t24720;
t24400 = -t24668 * t25076 + t24555;
t25251 = t24400 * t24688;
t24556 = t24581 * t24722;
t24401 = -t24669 * t25074 + t24556;
t25250 = t24401 * t24689;
t24557 = t24581 * t24724;
t24402 = -t24670 * t25072 + t24557;
t25249 = t24402 * t24690;
t24561 = t24581 * t24738;
t24406 = -t24671 * t25064 + t24561;
t25248 = t24406 * t24691;
t24562 = t24581 * t24740;
t24407 = -t24672 * t25062 + t24562;
t25247 = t24407 * t24692;
t24563 = t24581 * t24742;
t24408 = -t24673 * t25060 + t24563;
t25246 = t24408 * t24693;
t25244 = t24409 * t24765;
t25243 = t24410 * t24445;
t25240 = t24413 * t24767;
t25237 = t24430 * t24449;
t25235 = t24432 * t24450;
t25234 = t24446 * t24412;
t25233 = t24447 * t24414;
t25232 = t24448 * t24428;
t25219 = t24892 * t24724;
t25218 = t24892 * t24730;
t25217 = t24894 * t24720;
t25216 = t24894 * t24726;
t25215 = t24893 * t24722;
t25214 = t24893 * t24728;
t25213 = t24890 * t24740;
t25212 = t24890 * t24746;
t25211 = t24889 * t24742;
t25210 = t24889 * t24748;
t25209 = t24891 * t24738;
t25208 = t24891 * t24744;
t25207 = t24581 * t24716;
t25183 = t24682 * t24759;
t25182 = t24682 * t24765;
t25180 = t24683 * t24760;
t25179 = t24683 * t24766;
t25177 = t24684 * t24761;
t25176 = t24684 * t24767;
t25174 = t24685 * t24762;
t25173 = t24685 * t24768;
t25171 = t24686 * t24763;
t25170 = t24686 * t24769;
t25168 = t24687 * t24764;
t25167 = t24687 * t24770;
t25165 = t24688 * t24720;
t25162 = t24689 * t24722;
t25159 = t24690 * t24724;
t25156 = t24691 * t24738;
t25153 = t24692 * t24740;
t25150 = t24693 * t24742;
t25148 = t24700 * t24702;
t25147 = t24700 * t24704;
t25146 = t24700 * t24705;
t25133 = t24701 * t24759;
t25132 = t24701 * t24760;
t25131 = t24701 * t24761;
t25130 = t24701 * t24762;
t25129 = t24701 * t24763;
t25128 = t24701 * t24764;
t25127 = t24701 * t24766;
t25126 = t24701 * t24768;
t25125 = t24701 * t24769;
t25124 = t24701 * t24770;
t25123 = t24702 * t24703;
t25122 = t24702 * t24704;
t25121 = t24702 * t24759;
t25120 = t24702 * t24760;
t25119 = t24702 * t24761;
t25118 = t24702 * t24762;
t25117 = t24702 * t24763;
t25116 = t24702 * t24764;
t25115 = t24702 * t24765;
t25114 = t24702 * t24766;
t25113 = t24702 * t24767;
t25112 = t24702 * t24768;
t25111 = t24702 * t24769;
t25110 = t24702 * t24770;
t25109 = t24703 * t24704;
t25102 = t24704 * t24705;
t25097 = t24705 * t24703;
t25096 = t24705 * t24759;
t25095 = t24705 * t24760;
t25094 = t24705 * t24761;
t25093 = t24705 * t24762;
t25092 = t24705 * t24763;
t25091 = t24705 * t24764;
t25090 = t24705 * t24765;
t25089 = t24705 * t24766;
t25088 = t24705 * t24767;
t25087 = t24705 * t24768;
t25086 = t24705 * t24769;
t25085 = t24705 * t24770;
t25084 = t24714 * t24719;
t25081 = t24716 * t24721;
t25079 = t24716 * t24723;
t25077 = t24716 * t24725;
t25069 = t24716 * t24739;
t25067 = t24716 * t24741;
t25065 = t24716 * t24743;
t25058 = t24717 * t24719;
t25036 = t24721 * t24726;
t25035 = t24721 * t24759;
t25034 = t24721 * t24765;
t25030 = t24723 * t24728;
t25029 = t24723 * t24760;
t25028 = t24723 * t24766;
t25024 = t24725 * t24730;
t25023 = t24725 * t24761;
t25022 = t24725 * t24767;
t25021 = t24726 * t24727;
t25020 = t24728 * t24729;
t25019 = t24730 * t24731;
t25015 = t24739 * t24744;
t25014 = t24739 * t24762;
t25013 = t24739 * t24768;
t25009 = t24741 * t24746;
t25008 = t24741 * t24763;
t25007 = t24741 * t24769;
t25003 = t24743 * t24748;
t25002 = t24743 * t24764;
t25001 = t24743 * t24770;
t25000 = t24744 * t24745;
t24999 = t24746 * t24747;
t24998 = t24748 * t24749;
t24995 = t24765 * t24410;
t24994 = t24766 * t24412;
t24993 = t24767 * t24414;
t24992 = t24768 * t24428;
t24803 = t24521 + t24668 - t24637;
t24940 = t24682 * t25133;
t24814 = -t24940 * t25315 - t24995;
t24936 = t25315 * t25182;
t24815 = -t24410 * t25133 + t24936;
t24937 = t24727 * t25182;
t24938 = t24727 * t25183;
t24939 = t24682 * t25101;
t24970 = t24581 * t25165;
t24973 = t24415 * t25182;
t24126 = ((-((t24701 * t24937 + t25035) * t24703 - t24727 * t24939) * t24705 + ((-t24701 * t25034 + t24938) * t24703 + t24721 * t25101) * t24702 + (-(-t24701 * t24938 + t25034) * t24705 + (t24701 * t25035 + t24937) * t24702) * t24700) * t25207 + t24803 * t24827) * t24708 + (-((t24701 * t24995 + t25183 * t25315) * t24703 - t24410 * t25101) * t25297 + ((((t24409 * t24759 - t24701 * t24973) * t24703 + t24415 * t24939) * t24719 + t24451 * t24970) * t24705 - (((-t24415 * t25183 - t24701 * t25244) * t24703 + t24409 * t25101) * t24719 + t24588 * t24970) * t24702) * t24716 + ((t24814 * t24707 + (t24415 * t24940 + t25244) * t25083 - t24814) * t24705 - (t24815 * t24707 + (t24409 * t25133 - t24973) * t25083 - t24815) * t24702) * t24700 + ((-t24410 * t24759 + t24701 * t24936) * t24703 - t25315 * t24939) * t25296) * t24726 - t25304 * t25166;
t24991 = t24126 * t25402;
t24802 = t24521 + t24669 - t24638;
t24935 = t24683 * t25132;
t24812 = -t24935 * t25314 - t24994;
t24813 = -t24412 * t25132 + t25179 * t25314;
t24931 = t24729 * t25179;
t24932 = t24729 * t25180;
t24933 = t24683 * t25100;
t24934 = t24683 * t25127;
t24969 = t24581 * t25162;
t24127 = ((-((t24701 * t24931 + t25029) * t24703 - t24729 * t24933) * t24705 + t24702 * ((-t24701 * t25028 + t24932) * t24703 + t24723 * t25100) + (-(-t24701 * t24932 + t25028) * t24705 + t24702 * (t24701 * t25029 + t24931)) * t24700) * t25207 + t24802 * t24826) * t24709 + (-((t24701 * t24994 + t25180 * t25314) * t24703 - t24412 * t25100) * t25297 + ((((t24411 * t24760 - t24419 * t24934) * t24703 + t24419 * t24933) * t24719 + t24452 * t24969) * t24705 - (((-t24411 * t25127 - t24419 * t25180) * t24703 + t24411 * t25100) * t24719 + t24589 * t24969) * t24702) * t24716 + ((t24812 * t24707 + (t24411 * t24766 + t24419 * t24935) * t25083 - t24812) * t24705 - (t24813 * t24707 + (t24411 * t25132 - t24419 * t25179) * t25083 - t24813) * t24702) * t24700 + ((-t24412 * t24760 + t24934 * t25314) * t24703 - t25314 * t24933) * t25296) * t24728 - t25305 * t25163;
t24990 = t24127 * t25401;
t24801 = t24521 + t24670 - t24639;
t24930 = t24684 * t25131;
t24810 = -t24930 * t25313 - t24993;
t24926 = t25313 * t25176;
t24811 = -t24414 * t25131 + t24926;
t24927 = t24731 * t25176;
t24928 = t24731 * t25177;
t24929 = t24684 * t25099;
t24968 = t24581 * t25159;
t24972 = t24423 * t25176;
t24128 = ((-((t24701 * t24927 + t25023) * t24703 - t24731 * t24929) * t24705 + t24702 * ((-t24701 * t25022 + t24928) * t24703 + t24725 * t25099) + (-(-t24701 * t24928 + t25022) * t24705 + t24702 * (t24701 * t25023 + t24927)) * t24700) * t25207 + t24801 * t24825) * t24710 + (-((t24701 * t24993 + t25177 * t25313) * t24703 - t24414 * t25099) * t25297 + ((((t24413 * t24761 - t24701 * t24972) * t24703 + t24423 * t24929) * t24719 + t24453 * t24968) * t24705 - t24702 * (((-t24423 * t25177 - t24701 * t25240) * t24703 + t24413 * t25099) * t24719 + t24590 * t24968)) * t24716 + ((t24810 * t24707 + (t24423 * t24930 + t25240) * t25083 - t24810) * t24705 - t24702 * (t24811 * t24707 + (t24413 * t25131 - t24972) * t25083 - t24811)) * t24700 + ((-t24414 * t24761 + t24701 * t24926) * t24703 - t25313 * t24929) * t25296) * t24730 - t25306 * t25160;
t24989 = t24128 * t25400;
t24800 = t24521 + t24671 - t24646;
t24925 = t24685 * t25130;
t24808 = -t24925 * t25312 - t24992;
t24809 = -t24428 * t25130 + t25173 * t25312;
t24900 = t24685 * t24997;
t24922 = t24745 * t25173;
t24923 = t24745 * t25174;
t24924 = t24685 * t25126;
t24967 = t24581 * t25156;
t24129 = ((-((t24701 * t24922 + t25014) * t24703 - t24745 * t24900) * t24705 + t24702 * ((-t24701 * t25013 + t24923) * t24703 + t24739 * t24997) + (-(-t24701 * t24923 + t25013) * t24705 + t24702 * (t24701 * t25014 + t24922)) * t24700) * t25207 + t24800 * t24824) * t24711 + (-((t24701 * t24992 + t25174 * t25312) * t24703 - t24428 * t24997) * t25297 + ((((t24427 * t24762 - t24433 * t24924) * t24703 + t24433 * t24900) * t24719 + t24454 * t24967) * t24705 - (((-t24427 * t25126 - t24433 * t25174) * t24703 + t24427 * t24997) * t24719 + t24591 * t24967) * t24702) * t24716 + ((t24808 * t24707 + (t24427 * t24768 + t24433 * t24925) * t25083 - t24808) * t24705 - (t24809 * t24707 + (t24427 * t25130 - t24433 * t25173) * t25083 - t24809) * t24702) * t24700 + ((-t24428 * t24762 + t24924 * t25312) * t24703 - t25312 * t24900) * t25296) * t24744 - t25307 * t25157;
t24988 = t24129 * t25399;
t24799 = t24521 + t24672 - t24647;
t24921 = t24686 * t25129;
t24806 = -t24430 * t24769 - t24921 * t25311;
t24899 = t25311 * t25170;
t24807 = -t24430 * t25129 + t24899;
t24918 = t24747 * t25170;
t24919 = t24747 * t25171;
t24920 = t24686 * t24996;
t24966 = t24581 * t25153;
t24971 = t24437 * t25170;
t24130 = ((-((t24701 * t24918 + t25008) * t24703 - t24747 * t24920) * t24705 + ((-t24701 * t25007 + t24919) * t24703 + t24741 * t24996) * t24702 + (-(-t24701 * t24919 + t25007) * t24705 + (t24701 * t25008 + t24918) * t24702) * t24700) * t25207 + t24799 * t24823) * t24712 + (-((t24430 * t25125 + t25171 * t25311) * t24703 - t24430 * t24996) * t25297 + ((((t24429 * t24763 - t24701 * t24971) * t24703 + t24437 * t24920) * t24719 + t24455 * t24966) * t24705 - (((-t24429 * t25125 - t24437 * t25171) * t24703 + t24429 * t24996) * t24719 + t24592 * t24966) * t24702) * t24716 + ((t24806 * t24707 + (t24429 * t24769 + t24437 * t24921) * t25083 - t24806) * t24705 - (t24807 * t24707 + (t24429 * t25129 - t24971) * t25083 - t24807) * t24702) * t24700 + ((-t24430 * t24763 + t24701 * t24899) * t24703 - t25311 * t24920) * t25296) * t24746 - t25308 * t25154;
t24987 = t24130 * t25398;
t24798 = t24521 + t24673 - t24648;
t24917 = t24687 * t25128;
t24804 = -t24432 * t24770 - t24917 * t25310;
t24805 = -t24432 * t25128 + t25167 * t25310;
t24913 = t24749 * t25167;
t24914 = t24749 * t25168;
t24915 = t24687 * t25098;
t24916 = t24687 * t25124;
t24965 = t24581 * t25150;
t24131 = ((-((t24701 * t24913 + t25002) * t24703 - t24749 * t24915) * t24705 + ((-t24701 * t25001 + t24914) * t24703 + t24743 * t25098) * t24702 + (-(-t24701 * t24914 + t25001) * t24705 + (t24701 * t25002 + t24913) * t24702) * t24700) * t25207 + t24798 * t24822) * t24713 + (-((t24432 * t25124 + t25168 * t25310) * t24703 - t24432 * t25098) * t25297 + ((((t24431 * t24764 - t24441 * t24916) * t24703 + t24441 * t24915) * t24719 + t24456 * t24965) * t24705 - (((-t24431 * t25124 - t24441 * t25168) * t24703 + t24431 * t25098) * t24719 + t24593 * t24965) * t24702) * t24716 + ((t24804 * t24707 + (t24431 * t24770 + t24441 * t24917) * t25083 - t24804) * t24705 - (t24805 * t24707 + (t24431 * t25128 - t24441 * t25167) * t25083 - t24805) * t24702) * t24700 + ((-t24432 * t24764 + t24916 * t25310) * t24703 - t25310 * t24915) * t25296) * t24748 - t25309 * t25151;
t24986 = t24131 * t25397;
t24979 = t24359 * t25402;
t24978 = t24361 * t25401;
t24977 = t24363 * t25400;
t24976 = t24365 * t25399;
t24975 = t24367 * t25398;
t24974 = t24369 * t25397;
t24898 = MDP(10) - t25288;
t24897 = t24502 * t24738 - t24616 * t24744;
t24896 = t24503 * t24740 - t24617 * t24746;
t24895 = t24504 * t24742 - t24618 * t24748;
t24522 = t24682 * t25038 + t25164;
t24851 = t24522 * t24716 + t24682 * t25056;
t24523 = t24683 * t25032 + t25161;
t24850 = t24523 * t24716 + t24683 * t25054;
t24524 = t24684 * t25026 + t25158;
t24849 = t24524 * t24716 + t24684 * t25052;
t24525 = t24688 * t25038 - t25184;
t24848 = t24525 * t24716 + t24688 * t25056;
t24526 = t24689 * t25032 - t25181;
t24847 = t24526 * t24716 + t24689 * t25054;
t24527 = t24690 * t25026 - t25178;
t24846 = t24527 * t24716 + t24690 * t25052;
t24534 = t24685 * t25017 + t25155;
t24845 = t24534 * t24716 + t24685 * t25047;
t24535 = t24686 * t25011 + t25152;
t24844 = t24535 * t24716 + t24686 * t25045;
t24536 = t24687 * t25005 + t25149;
t24843 = t24536 * t24716 + t24687 * t25043;
t24538 = t24691 * t25017 - t25175;
t24842 = t24538 * t24716 + t24691 * t25047;
t24539 = t24692 * t25011 - t25172;
t24841 = t24539 * t24716 + t24692 * t25045;
t24540 = t24693 * t25005 - t25169;
t24840 = t24540 * t24716 + t24693 * t25043;
t24358 = t24495 * t24720 - t24613 * t24726;
t24210 = -t24358 * t24714 + t24359 * t25058;
t24213 = t24358 * t24717 + t24359 * t25084;
t24252 = -t24597 * t24613 + t24495 * (pkin(1) * t24720 - qJ(3,6) * t25076);
t24791 = MDP(11) * t24213 + MDP(12) * t24210 + MDP(14) * t24252 + MDP(9) * t24358;
t24360 = t24497 * t24722 - t24614 * t24728;
t24211 = -t24360 * t24714 + t24361 * t25058;
t24214 = t24360 * t24717 + t24361 * t25084;
t24253 = -t24598 * t24614 + t24497 * (pkin(1) * t24722 - qJ(3,5) * t25074);
t24790 = MDP(11) * t24214 + MDP(12) * t24211 + MDP(14) * t24253 + MDP(9) * t24360;
t24217 = t24367 * t25058 - t24714 * t24896;
t24220 = t24367 * t25084 + t24717 * t24896;
t24262 = -t24608 * t24617 + t24503 * (pkin(1) * t24740 - qJ(3,2) * t25062);
t24789 = MDP(11) * t24220 + MDP(12) * t24217 + MDP(14) * t24262 + MDP(9) * t24896;
t24218 = t24369 * t25058 - t24714 * t24895;
t24221 = t24369 * t25084 + t24717 * t24895;
t24263 = -t24609 * t24618 + t24504 * (pkin(1) * t24742 - qJ(3,1) * t25060);
t24788 = MDP(11) * t24221 + MDP(12) * t24218 + MDP(14) * t24263 + MDP(9) * t24895;
t24362 = t24498 * t24724 - t24615 * t24730;
t24212 = -t24362 * t24714 + t24363 * t25058;
t24215 = t24362 * t24717 + t24363 * t25084;
t24254 = -t24599 * t24615 + t24498 * (pkin(1) * t24724 - qJ(3,4) * t25072);
t24786 = MDP(10) * t24363 + MDP(11) * t24215 + MDP(12) * t24212 + MDP(14) * t24254 + MDP(9) * t24362;
t24216 = t24365 * t25058 - t24714 * t24897;
t24219 = t24365 * t25084 + t24717 * t24897;
t24261 = -t24607 * t24616 + t24502 * (pkin(1) * t24738 - qJ(3,3) * t25064);
t24785 = MDP(10) * t24365 + MDP(11) * t24219 + MDP(12) * t24216 + MDP(14) * t24261 + MDP(9) * t24897;
t24784 = t25379 * (t24898 * t24359 + t24791);
t24783 = t25380 * (t24898 * t24361 + t24790);
t24782 = t25383 * (t24898 * t24367 + t24789);
t24781 = t25384 * (t24898 * t24369 + t24788);
t24780 = t25381 * (-t24363 * t25288 + t24786);
t24779 = t25382 * (-t24365 * t25288 + t24785);
t24778 = t24126 * t24979 + t24127 * t24978 + t24130 * t24975 + t24131 * t24974;
t24564 = t24719 * t25039 + t25075;
t24234 = -t24619 * (t24564 * t24714 - t24717 * t25036) + g(3) * (t24714 * t25081 + t24727 * t24839);
t24237 = -t24619 * (t24564 * t24717 + t24714 * t25036) - ((t24719 * t25038 - t25081) * t24717 + t24714 * t25021) * g(3);
t24267 = (-qJ(3,6) * t25051 + t24597 * t24721) * t24619 + g(3) * (pkin(1) * t25021 + qJ(3,6) * t24833);
t24302 = -t24495 * t24719 + t24894 * t25082;
t24777 = t25379 * (MDP(11) * t24234 + MDP(12) * t24237 + MDP(13) * t24302 + MDP(14) * t24267 + MDP(3) * t24495 + (-MDP(10) * t24720 + MDP(9) * t24726 + MDP(2)) * t24894);
t24565 = t24719 * t25033 + t25073;
t24235 = -t24620 * (t24565 * t24714 - t24717 * t25030) + g(3) * (t24714 * t25079 + t24729 * t24838);
t24238 = -t24620 * (t24565 * t24717 + t24714 * t25030) - ((t24719 * t25032 - t25079) * t24717 + t24714 * t25020) * g(3);
t24268 = (-qJ(3,5) * t25050 + t24598 * t24723) * t24620 + g(3) * (pkin(1) * t25020 + qJ(3,5) * t24832);
t24303 = -t24497 * t24719 + t24893 * t25080;
t24776 = t25380 * (MDP(11) * t24235 + MDP(12) * t24238 + MDP(13) * t24303 + MDP(14) * t24268 + MDP(3) * t24497 + (-MDP(10) * t24722 + MDP(9) * t24728 + MDP(2)) * t24893);
t24566 = t24719 * t25027 + t25071;
t24236 = -t24621 * (t24566 * t24714 - t24717 * t25024) + g(3) * (t24714 * t25077 + t24731 * t24837);
t24239 = -t24621 * (t24566 * t24717 + t24714 * t25024) - ((t24719 * t25026 - t25077) * t24717 + t24714 * t25019) * g(3);
t24269 = (-qJ(3,4) * t25049 + t24599 * t24725) * t24621 + g(3) * (pkin(1) * t25019 + qJ(3,4) * t24831);
t24304 = -t24498 * t24719 + t24892 * t25078;
t24775 = t25381 * (MDP(11) * t24236 + MDP(12) * t24239 + MDP(13) * t24304 + MDP(14) * t24269 + MDP(3) * t24498 + (-MDP(10) * t24724 + MDP(9) * t24730 + MDP(2)) * t24892);
t24575 = t24719 * t25018 + t25063;
t24242 = -(t24575 * t24714 - t24717 * t25015) * t24622 + g(3) * (t24714 * t25069 + t24745 * t24836);
t24251 = -(t24575 * t24717 + t24714 * t25015) * t24622 - ((t24719 * t25017 - t25069) * t24717 + t24714 * t25000) * g(3);
t24278 = (-qJ(3,3) * t25042 + t24607 * t24739) * t24622 + g(3) * (pkin(1) * t25000 + qJ(3,3) * t24830);
t24305 = -t24502 * t24719 + t24891 * t25070;
t24774 = t25382 * (MDP(11) * t24242 + MDP(12) * t24251 + MDP(13) * t24305 + MDP(14) * t24278 + MDP(3) * t24502 + (-MDP(10) * t24738 + MDP(9) * t24744 + MDP(2)) * t24891);
t24576 = t24719 * t25012 + t25061;
t24240 = -t24623 * (t24576 * t24714 - t24717 * t25009) + g(3) * (t24714 * t25067 + t24747 * t24835);
t24249 = -t24623 * (t24576 * t24717 + t24714 * t25009) - ((t24719 * t25011 - t25067) * t24717 + t24714 * t24999) * g(3);
t24276 = t24623 * (-qJ(3,2) * t25041 + t24608 * t24741) + g(3) * (pkin(1) * t24999 + qJ(3,2) * t24829);
t24306 = -t24503 * t24719 + t24890 * t25068;
t24773 = t25383 * (MDP(11) * t24240 + MDP(12) * t24249 + MDP(13) * t24306 + MDP(14) * t24276 + MDP(3) * t24503 + (-MDP(10) * t24740 + MDP(9) * t24746 + MDP(2)) * t24890);
t24577 = t24719 * t25006 + t25059;
t24241 = -t24624 * (t24577 * t24714 - t24717 * t25003) + g(3) * (t24714 * t25065 + t24749 * t24834);
t24250 = -t24624 * (t24577 * t24717 + t24714 * t25003) - ((t24719 * t25005 - t25065) * t24717 + t24714 * t24998) * g(3);
t24277 = t24624 * (-qJ(3,1) * t25040 + t24609 * t24743) + g(3) * (pkin(1) * t24998 + qJ(3,1) * t24828);
t24307 = -t24504 * t24719 + t24889 * t25066;
t24772 = t25384 * (MDP(11) * t24241 + MDP(12) * t24250 + MDP(13) * t24307 + MDP(14) * t24277 + MDP(3) * t24504 + (-MDP(10) * t24742 + MDP(9) * t24748 + MDP(2)) * t24889);
t24545 = t24686 * t24999 - t25153;
t24544 = t24686 * t24740 + t24692 * t24999;
t24543 = t24685 * t24738 + t24691 * t25000;
t24542 = t24685 * t25000 - t25156;
t24541 = t24687 * t24742 + t24693 * t24998;
t24537 = t24687 * t24998 - t25150;
t24533 = t24684 * t24724 + t24690 * t25019;
t24532 = t24684 * t25019 - t25159;
t24531 = t24683 * t24722 + t24689 * t25020;
t24530 = t24683 * t25020 - t25162;
t24529 = t24682 * t24720 + t24688 * t25021;
t24528 = t24682 * t25021 - t25165;
t24508 = -t24701 * t25097 + t25148;
t24507 = t24701 * t25146 + t25123;
t24506 = t24701 * t25123 + t25146;
t24505 = -t24701 * t25148 + t25097;
t24478 = g(1) * t24701 - g(2) * t25122 + g(3) * t25102;
t24405 = t24673 * t25066 + t24560;
t24404 = t24672 * t25068 + t24559;
t24403 = t24671 * t25070 + t24558;
t24399 = t24670 * t25078 + t24554;
t24398 = t24669 * t25080 + t24553;
t24397 = t24668 * t25082 + t24552;
t24396 = t24540 * t24719 - t24693 * t25065;
t24395 = t24539 * t24719 - t24692 * t25067;
t24394 = t24538 * t24719 - t24691 * t25069;
t24393 = t24536 * t24719 - t24687 * t25065;
t24392 = t24535 * t24719 - t24686 * t25067;
t24391 = t24534 * t24719 - t24685 * t25069;
t24390 = t24527 * t24719 - t24690 * t25077;
t24389 = t24526 * t24719 - t24689 * t25079;
t24388 = t24525 * t24719 - t24688 * t25081;
t24387 = t24524 * t24719 - t24684 * t25077;
t24386 = t24523 * t24719 - t24683 * t25079;
t24385 = t24522 * t24719 - t24682 * t25081;
t24384 = t24687 * t24408;
t24383 = t24686 * t24407;
t24382 = t24685 * t24406;
t24381 = t24684 * t24402;
t24380 = t24683 * t24401;
t24379 = t24682 * t24400;
t24355 = t24471 * t24748 + t24563;
t24354 = t24470 * t24746 + t24562;
t24353 = t24469 * t24744 + t24561;
t24349 = t24462 * t24730 + t24557;
t24348 = t24461 * t24728 + t24556;
t24347 = t24460 * t24726 + t24555;
t24301 = t24405 * t24749 - t24716 * t24574;
t24300 = t24404 * t24747 - t24716 * t24573;
t24299 = t24403 * t24745 - t24716 * t24572;
t24298 = t24399 * t24731 - t24716 * t24571;
t24297 = t24398 * t24729 - t24716 * t24570;
t24296 = t24397 * t24727 - t24716 * t24569;
t24295 = t24581 * t24998 + t25310 * t24716;
t24294 = t24581 * t24999 + t25311 * t24716;
t24293 = t24581 * t25000 + t25312 * t24716;
t24292 = (t24701 * t25085 - t25116) * t24703 + (-t24701 * t25091 - t25110) * t24700 - t24705 * t25098;
t24291 = (t24701 * t25086 - t25117) * t24703 + (-t24701 * t25092 - t25111) * t24700 - t24705 * t24996;
t24290 = (t24701 * t25087 - t25118) * t24703 + (-t24701 * t25093 - t25112) * t24700 - t24705 * t24997;
t24289 = (t24701 * t25088 - t25119) * t24703 + (-t24701 * t25094 - t25113) * t24700 - t24705 * t25099;
t24288 = (t24701 * t25089 - t25120) * t24703 + (-t24701 * t25095 - t25114) * t24700 - t24705 * t25100;
t24287 = (t24701 * t25090 - t25121) * t24703 + (-t24701 * t25096 - t25115) * t24700 - t24705 * t25101;
t24286 = g(1) * t25109 + g(2) * t24506 + g(3) * t24508;
t24285 = g(1) * t25147 - t24505 * g(2) - t24507 * g(3);
t24284 = t24581 * t25019 + t25313 * t24716;
t24283 = t24581 * t25020 + t25314 * t24716;
t24282 = t24581 * t25021 + t25315 * t24716;
t24203 = (t24301 * t24693 + t24384) * t24719 + t25343;
t24202 = (t24300 * t24692 + t24383) * t24719 + t25344;
t24201 = (t24299 * t24691 + t24382) * t24719 + t25345;
t24200 = (-t24295 * t24687 + t25246) * t24719 + t25390;
t24198 = (-t24294 * t24686 + t25247) * t24719 + t25389;
t24196 = (-t24293 * t24685 + t25248) * t24719 + t25388;
t24194 = (t24298 * t24690 + t24381) * t24719 + t25346;
t24193 = (t24297 * t24689 + t24380) * t24719 + t25347;
t24192 = (t24296 * t24688 + t24379) * t24719 + t25348;
t24191 = (-t24284 * t24684 + t25249) * t24719 + t25387;
t24189 = (-t24283 * t24683 + t25250) * t24719 + t25386;
t24187 = (-t24282 * t24682 + t25251) * t24719 + t25385;
t24173 = pkin(1) * t24541 + t24840 * qJ(3,1) + (-t24396 * t24714 + t24541 * t24717) * pkin(2) + (t24840 * t24718 + (t24396 * t24717 + t24541 * t24714) * t24715) * pkin(6);
t24172 = pkin(1) * t24544 + t24841 * qJ(3,2) + (-t24395 * t24714 + t24544 * t24717) * pkin(2) + (t24841 * t24718 + (t24395 * t24717 + t24544 * t24714) * t24715) * pkin(6);
t24171 = pkin(1) * t24543 + t24842 * qJ(3,3) + (-t24394 * t24714 + t24543 * t24717) * pkin(2) + (t24842 * t24718 + (t24394 * t24717 + t24543 * t24714) * t24715) * pkin(6);
t24170 = pkin(1) * t24537 + t24843 * qJ(3,1) + (-t24393 * t24714 + t24537 * t24717) * pkin(2) + (t24843 * t24718 + (t24393 * t24717 + t24537 * t24714) * t24715) * pkin(6);
t24169 = pkin(1) * t24545 + t24844 * qJ(3,2) + (-t24392 * t24714 + t24545 * t24717) * pkin(2) + (t24844 * t24718 + (t24392 * t24717 + t24545 * t24714) * t24715) * pkin(6);
t24168 = pkin(1) * t24542 + t24845 * qJ(3,3) + (-t24391 * t24714 + t24542 * t24717) * pkin(2) + (t24845 * t24718 + (t24391 * t24717 + t24542 * t24714) * t24715) * pkin(6);
t24167 = pkin(1) * t24532 + t24849 * qJ(3,4) + (-t24387 * t24714 + t24532 * t24717) * pkin(2) + (t24849 * t24718 + (t24387 * t24717 + t24532 * t24714) * t24715) * pkin(6);
t24166 = pkin(1) * t24530 + t24850 * qJ(3,5) + (-t24386 * t24714 + t24530 * t24717) * pkin(2) + (t24850 * t24718 + (t24386 * t24717 + t24530 * t24714) * t24715) * pkin(6);
t24165 = pkin(1) * t24528 + t24851 * qJ(3,6) + (-t24385 * t24714 + t24528 * t24717) * pkin(2) + (t24851 * t24718 + (t24385 * t24717 + t24528 * t24714) * t24715) * pkin(6);
t24164 = pkin(1) * t24533 + t24846 * qJ(3,4) + (-t24390 * t24714 + t24533 * t24717) * pkin(2) + (t24846 * t24718 + (t24390 * t24717 + t24533 * t24714) * t24715) * pkin(6);
t24163 = pkin(1) * t24531 + t24847 * qJ(3,5) + (-t24389 * t24714 + t24531 * t24717) * pkin(2) + (t24847 * t24718 + (t24389 * t24717 + t24531 * t24714) * t24715) * pkin(6);
t24162 = pkin(1) * t24529 + t24848 * qJ(3,6) + (-t24388 * t24714 + t24529 * t24717) * pkin(2) + (t24848 * t24718 + (t24388 * t24717 + t24529 * t24714) * t24715) * pkin(6);
t24161 = (t24203 * t25309 * t25384 - t24209 * t25271) * t24667;
t24160 = (t24202 * t25308 * t25383 - t24208 * t25272) * t24666;
t24159 = (t24201 * t25307 * t25382 - t24207 * t25270) * t24665;
t24158 = (t24193 * t25305 * t25380 - t24205 * t25274) * t24663;
t24157 = (t24192 * t25304 * t25379 - t24204 * t25275) * t24662;
t24156 = (t24194 * t25306 * t25381 - t24206 * t25273) * t24664;
t24155 = (t25309 * ((t24301 * t24687 - t25246) * t24719 - t25390) - ((t24405 * t24743 + t24603 * t25059) * t24719 + t25303) * t24318) * t25397;
t24154 = (((t24300 * t24686 - t25247) * t24719 - t25389) * t25308 - ((t24404 * t24741 + t24603 * t25061) * t24719 + t25302) * t24316) * t25398;
t24153 = (((t24299 * t24685 - t25248) * t24719 - t25388) * t25307 - ((t24403 * t24739 + t24603 * t25063) * t24719 + t25301) * t24314) * t25399;
t24152 = (t25306 * ((t24298 * t24684 - t25249) * t24719 - t25387) - t24312 * ((t24399 * t24725 + t24603 * t25071) * t24719 + t25300)) * t25400;
t24151 = (t25304 * ((t24296 * t24682 - t25251) * t24719 - t25385) - ((t24397 * t24721 + t24603 * t25075) * t24719 + t25298) * t24308) * t25402;
t24150 = (((t24297 * t24683 - t25250) * t24719 - t25386) * t25305 - ((t24398 * t24723 + t24603 * t25073) * t24719 + t25299) * t24310) * t25401;
t24149 = (t24200 * t25271 - t24203 * t25264) * t24667;
t24148 = (t24198 * t25272 - t24202 * t25265) * t24666;
t24147 = (t24196 * t25270 - t24201 * t25266) * t24665;
t24146 = (t24187 * t25275 - t24192 * t25269) * t24662;
t24145 = (t24191 * t25273 - t24194 * t25267) * t24664;
t24144 = (t24189 * t25274 - t24193 * t25268) * t24663;
t24137 = -(-t24450 * t24743 - t24749 * t24822) * t24713 * t25207 + (t24707 * t25235 + (-t24431 * t24450 + t24441 * t24822) * t25083 - t25235) * t24748 - (t25342 * t25310 * t25149 + (t24713 * t24798 - t24748 * t24956 - t24673) * t24687) * t25309;
t24136 = -(-t24449 * t24741 - t24747 * t24823) * t24712 * t25207 + (t24707 * t25237 + (-t24429 * t24449 + t24437 * t24823) * t25083 - t25237) * t24746 - (t25342 * t25311 * t25152 + (t24712 * t24799 - t24746 * t24957 - t24672) * t24686) * t25308;
t24135 = -(-t24448 * t24739 - t24745 * t24824) * t24711 * t25207 + (t24707 * t25232 + (-t24427 * t24448 + t24433 * t24824) * t25083 - t25232) * t24744 - (t25342 * t25312 * t25155 + (t24711 * t24800 - t24744 * t24958 - t24671) * t24685) * t25307;
t24134 = -(-t24447 * t24725 - t24731 * t24825) * t24710 * t25207 + (t24707 * t25233 + (-t24413 * t24447 + t24423 * t24825) * t25083 - t25233) * t24730 - (t25342 * t25313 * t25158 + (t24710 * t24801 - t24730 * t24962 - t24670) * t24684) * t25306;
t24133 = -(-t24446 * t24723 - t24729 * t24826) * t24709 * t25207 + (t24707 * t25234 + (-t24411 * t24446 + t24419 * t24826) * t25083 - t25234) * t24728 - (t25342 * t25314 * t25161 + (t24709 * t24802 - t24728 * t24963 - t24669) * t24683) * t25305;
t24132 = -(-t24445 * t24721 - t24727 * t24827) * t24708 * t25207 + (t24707 * t25243 + (-t24409 * t24445 + t24415 * t24827) * t25083 - t25243) * t24726 - (t25342 * t25315 * t25164 + (t24708 * t24803 - t24726 * t24964 - t24668) * t24682) * t25304;
t1 = [(-t24478 * t24701 + (-t24285 * t24700 - t24286 * t24703) * t24704) * MDP(24) + ((t24687 * t24355 + t24693 * t25367) * t25282 + t25396 * t24781 + ((t24295 * t24693 + t24384) * t24719 + t25343) * t24772) * t24667 + ((t24686 * t24354 + t24692 * t25368) * t25283 + t25395 * t24782 + ((t24294 * t24692 + t24383) * t24719 + t25344) * t24773) * t24666 + ((t24685 * t24353 + t24691 * t25369) * t25284 + t25394 * t24779 + ((t24293 * t24691 + t24382) * t24719 + t25345) * t24774) * t24665 + ((t24684 * t24349 + t24690 * t25370) * t25285 + t25393 * t24780 + ((t24284 * t24690 + t24381) * t24719 + t25346) * t24775) * t24664 + ((t24683 * t24348 + t24689 * t25371) * t25286 + t25392 * t24783 + ((t24283 * t24689 + t24380) * t24719 + t25347) * t24776) * t24663 + ((t24682 * t24347 + t24688 * t25372) * t25287 + t25391 * t24784 + ((t24282 * t24688 + t24379) * t24719 + t25348) * t24777) * t24662; (t24285 * t24505 - t24286 * t24506 + t24478 * t25122) * MDP(24) + ((t24693 * t24355 - t24687 * t25367) * t25282 + t24184 * t24781 + t24200 * t24772) * t24667 + ((t24692 * t24354 - t24686 * t25368) * t25283 + t24182 * t24782 + t24198 * t24773) * t24666 + ((t24691 * t24353 - t24685 * t25369) * t25284 + t24180 * t24779 + t24196 * t24774) * t24665 + ((t24690 * t24349 - t24684 * t25370) * t25285 + t24178 * t24780 + t24191 * t24775) * t24664 + ((t24689 * t24348 - t24683 * t25371) * t25286 + t24176 * t24783 + t24189 * t24776) * t24663 + ((t24688 * t24347 - t24682 * t25372) * t25287 + t24174 * t24784 + t24187 * t24777) * t24662; (t24884 + t24885 + t24886 + t24887 + t24888 + t24883) * MDP(2) + (t24495 * t24985 + t24497 * t24984 + t24498 * t24983 + t24502 * t24982 + t24503 * t24981 + t24504 * t24980) * MDP(3) + (t24726 * t24888 + t24728 * t24887 + t24730 * t24886 + t24744 * t24885 + t24746 * t24884 + t24748 * t24883) * MDP(9) + (-t24720 * t24888 - t24722 * t24887 - t24724 * t24886 - t24738 * t24885 - t24740 * t24884 - t24742 * t24883) * MDP(10) + (t24234 * t24985 + t24235 * t24984 + t24236 * t24983 + t24240 * t24981 + t24241 * t24980 + t24242 * t24982) * MDP(11) + (t24237 * t24985 + t24238 * t24984 + t24239 * t24983 + t24249 * t24981 + t24250 * t24980 + t24251 * t24982) * MDP(12) + (t24267 * t24985 + t24268 * t24984 + t24269 * t24983 + t24276 * t24981 + t24277 * t24980 + t24278 * t24982 - t25276 * t25349 - t25277 * t25350 - t25278 * t25351 - t25279 * t25352 - t25280 * t25353 - t25281 * t25354) * MDP(14) + (t24285 * t24507 - t24286 * t24508 - t24478 * t25102) * MDP(24) + ((-t24358 * t24882 - t24360 * t24881 - t24362 * t24880 - t24877 * t24895 - t24878 * t24896 - t24879 * t24897) * MDP(9) - t25403 * MDP(10) + (-t24213 * t24882 - t24214 * t24881 - t24215 * t24880 - t24219 * t24879 - t24220 * t24878 - t24221 * t24877) * MDP(11) + (-t24210 * t24882 - t24211 * t24881 - t24212 * t24880 - t24216 * t24879 - t24217 * t24878 - t24218 * t24877) * MDP(12) + (-t24252 * t24882 - t24253 * t24881 - t24254 * t24880 - t24261 * t24879 - t24262 * t24878 - t24263 * t24877) * MDP(14)) * t24716 + (t25403 * t24716 ^ 2 + t24302 * t24985 + t24303 * t24984 + t24304 * t24983 + t24305 * t24982 + t24306 * t24981 + t24307 * t24980) * MDP(13); (t24150 * t24893 + t24151 * t24894 + t24152 * t24892 + t24153 * t24891 + t24154 * t24890 + t24155 * t24889) * MDP(2) + (t24150 * t24497 + t24151 * t24495 + t24152 * t24498 + t24153 * t24502 + t24154 * t24503 + t24155 * t24504) * MDP(3) + (t24150 * t25214 + t24151 * t25216 + t24152 * t25218 + t24153 * t25208 + t24154 * t25212 + t24155 * t25210 + t24358 * t24991 + t24360 * t24990 + t24362 * t24989 + t24895 * t24986 + t24896 * t24987 + t24897 * t24988) * MDP(9) + (-t24150 * t25215 - t24151 * t25217 - t24152 * t25219 - t24153 * t25209 - t24154 * t25213 - t24155 * t25211 + t24363 * t24989 + t24365 * t24988 + t24778) * MDP(10) + (t24150 * t24235 + t24151 * t24234 + t24152 * t24236 + t24153 * t24242 + t24154 * t24240 + t24155 * t24241 + t24213 * t24991 + t24214 * t24990 + t24215 * t24989 + t24219 * t24988 + t24220 * t24987 + t24221 * t24986) * MDP(11) + (t24150 * t24238 + t24151 * t24237 + t24152 * t24239 + t24153 * t24251 + t24154 * t24249 + t24155 * t24250 + t24210 * t24991 + t24211 * t24990 + t24212 * t24989 + t24216 * t24988 + t24217 * t24987 + t24218 * t24986) * MDP(12) + (t24150 * t24303 + t24151 * t24302 + t24152 * t24304 + t24153 * t24305 + t24154 * t24306 + t24155 * t24307 + (-t24128 * t24977 - t24129 * t24976 - t24778) * t24716) * MDP(13) + (t24155 * t24277 + t24263 * t24986 + (-t24170 * t24292 - t24318 * t25349) * t25276 + t24154 * t24276 + t24262 * t24987 + (-t24169 * t24291 - t24316 * t25350) * t25277 + t24153 * t24278 + t24261 * t24988 + (-t24168 * t24290 - t24314 * t25351) * t25278 + t24152 * t24269 + t24254 * t24989 + (-t24289 * t24167 - t24312 * t25352) * t25279 + t24150 * t24268 + t24253 * t24990 + (-t24288 * t24166 - t24310 * t25353) * t25280 + t24151 * t24267 + t24252 * t24991 + (-t24287 * t24165 - t24308 * t25354) * t25281) * MDP(14) + (t24285 * t24701 - t24478 * t25147) * MDP(21) + (t24286 * t24701 - t24478 * t25109) * MDP(22) + (-t24285 * t24703 + t24286 * t24700) * t24704 * MDP(23); (t24156 * t24892 + t24157 * t24894 + t24158 * t24893 + t24159 * t24891 + t24160 * t24890 + t24161 * t24889) * MDP(2) + (t24156 * t24498 + t24157 * t24495 + t24158 * t24497 + t24159 * t24502 + t24160 * t24503 + t24161 * t24504) * MDP(3) + (t24156 * t25218 + t24157 * t25216 + t24158 * t25214 + t24159 * t25208 + t24160 * t25212 + t24161 * t25210) * MDP(9) + (-t24156 * t25219 - t24157 * t25217 - t24158 * t25215 - t24159 * t25209 - t24160 * t25213 - t24161 * t25211) * MDP(10) + (t24156 * t24236 + t24157 * t24234 + t24158 * t24235 + t24159 * t24242 + t24160 * t24240 + t24161 * t24241) * MDP(11) + (t24156 * t24239 + t24157 * t24237 + t24158 * t24238 + t24159 * t24251 + t24160 * t24249 + t24161 * t24250) * MDP(12) + (t24156 * t24304 + t24157 * t24302 + t24158 * t24303 + t24159 * t24305 + t24160 * t24306 + t24161 * t24307) * MDP(13) + (t24156 * t24269 + t24157 * t24267 + t24158 * t24268 + t24159 * t24278 + t24160 * t24276 + t24161 * t24277) * MDP(14) + (-t24285 * t25122 + t24478 * t24505) * MDP(21) + (-t24286 * t25122 - t24478 * t24506) * MDP(22) + (-t24285 * t24506 - t24286 * t24505) * MDP(23) + ((-t24173 * t24292 + t24450 * t25349) * t25282 + (MDP(10) * t24369 + t24788) * t25384 * t24137) * t24667 + ((-t24172 * t24291 + t24449 * t25350) * t25283 + (MDP(10) * t24367 + t24789) * t25383 * t24136) * t24666 + ((-t24171 * t24290 + t24448 * t25351) * t25284 + t24785 * t25382 * t24135) * t24665 + ((-t24164 * t24289 + t24447 * t25352) * t25285 + t24786 * t25381 * t24134) * t24664 + ((-t24163 * t24288 + t24446 * t25353) * t25286 + (MDP(10) * t24361 + t24790) * t25380 * t24133) * t24663 + ((-t24162 * t24287 + t24445 * t25354) * t25287 + (MDP(10) * t24359 + t24791) * t25379 * t24132) * t24662 + (-t24132 * t24979 - t24133 * t24978 - t24134 * t24977 - t24135 * t24976 - t24136 * t24975 - t24137 * t24974) * t25288; (t24144 * t24893 + t24145 * t24892 + t24146 * t24894 + t24147 * t24891 + t24148 * t24890 + t24149 * t24889) * MDP(2) + (t24144 * t24497 + t24145 * t24498 + t24146 * t24495 + t24147 * t24502 + t24148 * t24503 + t24149 * t24504) * MDP(3) + (t24138 * t24358 + t24139 * t24360 + t24140 * t24362 + t24141 * t24895 + t24142 * t24897 + t24143 * t24896 + t24144 * t25214 + t24145 * t25218 + t24146 * t25216 + t24147 * t25208 + t24148 * t25212 + t24149 * t25210) * MDP(9) + (-t24144 * t25215 - t24145 * t25219 - t24146 * t25217 - t24147 * t25209 - t24148 * t25213 - t24149 * t25211 - t25404) * MDP(10) + (t24138 * t24213 + t24139 * t24214 + t24140 * t24215 + t24141 * t24221 + t24142 * t24219 + t24143 * t24220 + t24144 * t24235 + t24145 * t24236 + t24146 * t24234 + t24147 * t24242 + t24148 * t24240 + t24149 * t24241) * MDP(11) + (t24138 * t24210 + t24139 * t24211 + t24140 * t24212 + t24141 * t24218 + t24142 * t24216 + t24143 * t24217 + t24144 * t24238 + t24145 * t24239 + t24146 * t24237 + t24147 * t24251 + t24148 * t24249 + t24149 * t24250) * MDP(12) + (t24144 * t24303 + t24145 * t24304 + t24146 * t24302 + t24147 * t24305 + t24148 * t24306 + t24149 * t24307 + t25404 * t24716) * MDP(13) + (t24149 * t24277 + t24141 * t24263 + (-t24173 * (-t24702 * t25098 + (t24701 * t25110 + t25091) * t24703 + t24700 * (-t24701 * t25116 + t25085)) - t24170 * t24450) * t25276 + t24148 * t24276 + t24143 * t24262 + (-t24172 * (-t24702 * t24996 + (t24701 * t25111 + t25092) * t24703 + t24700 * (-t24701 * t25117 + t25086)) - t24169 * t24449) * t25277 + t24147 * t24278 + t24142 * t24261 + (-t24171 * (-t24702 * t24997 + (t24701 * t25112 + t25093) * t24703 + t24700 * (-t24701 * t25118 + t25087)) - t24168 * t24448) * t25278 + t24145 * t24269 + t24140 * t24254 + (-t24164 * (-t24702 * t25099 + (t24701 * t25113 + t25094) * t24703 + t24700 * (-t24701 * t25119 + t25088)) - t24167 * t24447) * t25279 + t24144 * t24268 + t24139 * t24253 + (-t24163 * (-t24702 * t25100 + (t24701 * t25114 + t25095) * t24703 + t24700 * (-t24701 * t25120 + t25089)) - t24166 * t24446) * t25280 + t24146 * t24267 + t24138 * t24252 + (-t24162 * (-t24702 * t25101 + (t24701 * t25115 + t25096) * t24703 + t24700 * (-t24701 * t25121 + t25090)) - t24165 * t24445) * t25281) * MDP(14) + (t24285 * t25102 + t24478 * t24507) * MDP(21) + (t24286 * t25102 - t24478 * t24508) * MDP(22) + (-t24285 * t24508 - t24286 * t24507) * MDP(23);];
taugX  = t1;
