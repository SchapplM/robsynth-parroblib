% Calculate Gravitation load for parallel robot
% P6RRPRRR14V4G7A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,alpha3,alpha4,d1,d4,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 05:41
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, rSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(7,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: pkin has to be [7x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: g has to be [3x1] (double)');
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-03 23:12:55
% EndTime: 2022-11-03 23:13:07
% DurationCPUTime: 11.78s
% Computational Cost: add. (6791->576), mult. (13623->1004), div. (270->12), fcn. (10913->48), ass. (0->437)
t6134 = sin(qJ(2,6));
t6126 = sin(pkin(7));
t6376 = cos(pkin(7));
t6377 = sin(pkin(4)) * pkin(6);
t6049 = t6376 * pkin(2) + t6126 * t6377 + pkin(1);
t6140 = cos(qJ(2,6));
t6357 = t6049 * t6140;
t6096 = cos(pkin(4)) * pkin(6);
t6088 = t6096 + qJ(3,6);
t6128 = sin(pkin(3));
t6062 = -t6126 * pkin(2) + t6376 * t6377;
t6130 = cos(pkin(3));
t6332 = t6062 * t6130;
t6396 = -t6088 * t6128 - t6332;
t6390 = -t6396 * t6134 + t6357;
t6414 = 0.1e1 / t6390;
t6136 = sin(qJ(2,5));
t6142 = cos(qJ(2,5));
t6355 = t6049 * t6142;
t6089 = t6096 + qJ(3,5);
t6397 = -t6089 * t6128 - t6332;
t6391 = -t6397 * t6136 + t6355;
t6413 = 0.1e1 / t6391;
t6138 = sin(qJ(2,4));
t6144 = cos(qJ(2,4));
t6353 = t6049 * t6144;
t6090 = t6096 + qJ(3,4);
t6398 = -t6090 * t6128 - t6332;
t6392 = -t6398 * t6138 + t6353;
t6412 = 0.1e1 / t6392;
t6152 = sin(qJ(2,3));
t6158 = cos(qJ(2,3));
t6351 = t6049 * t6158;
t6091 = t6096 + qJ(3,3);
t6399 = -t6091 * t6128 - t6332;
t6393 = -t6399 * t6152 + t6351;
t6411 = 0.1e1 / t6393;
t6154 = sin(qJ(2,2));
t6160 = cos(qJ(2,2));
t6349 = t6049 * t6160;
t6092 = t6096 + qJ(3,2);
t6400 = -t6092 * t6128 - t6332;
t6394 = -t6400 * t6154 + t6349;
t6410 = 0.1e1 / t6394;
t6156 = sin(qJ(2,1));
t6162 = cos(qJ(2,1));
t6347 = t6049 * t6162;
t6093 = t6096 + qJ(3,1);
t6401 = -t6093 * t6128 - t6332;
t6395 = -t6401 * t6156 + t6347;
t6409 = 0.1e1 / t6395;
t6168 = xP(5);
t6110 = sin(t6168);
t6113 = cos(t6168);
t6173 = koppelP(6,3);
t6167 = xP(6);
t6109 = sin(t6167);
t6112 = cos(t6167);
t6179 = koppelP(6,1);
t6384 = koppelP(6,2);
t6407 = t6109 * t6384 - t6112 * t6179;
t6019 = t6407 * t6110 + t6113 * t6173;
t6056 = t6109 * t6179 + t6112 * t6384;
t6169 = xP(4);
t6111 = sin(t6169);
t6114 = cos(t6169);
t5936 = t6019 * t6111 - t6056 * t6114;
t5935 = t6019 * t6114 + t6056 * t6111;
t6174 = koppelP(5,3);
t6180 = koppelP(5,1);
t6385 = koppelP(5,2);
t6406 = t6109 * t6385 - t6112 * t6180;
t6021 = t6406 * t6110 + t6113 * t6174;
t6057 = t6109 * t6180 + t6112 * t6385;
t5945 = t6021 * t6111 - t6057 * t6114;
t5946 = t6021 * t6114 + t6057 * t6111;
t6175 = koppelP(4,3);
t6181 = koppelP(4,1);
t6386 = koppelP(4,2);
t6405 = t6109 * t6386 - t6112 * t6181;
t6023 = t6405 * t6110 + t6113 * t6175;
t6058 = t6109 * t6181 + t6112 * t6386;
t5949 = t6023 * t6111 - t6058 * t6114;
t5950 = t6023 * t6114 + t6058 * t6111;
t6176 = koppelP(3,3);
t6182 = koppelP(3,1);
t6387 = koppelP(3,2);
t6404 = t6109 * t6387 - t6112 * t6182;
t6025 = t6404 * t6110 + t6113 * t6176;
t6059 = t6109 * t6182 + t6112 * t6387;
t5953 = t6025 * t6111 - t6059 * t6114;
t5954 = t6025 * t6114 + t6059 * t6111;
t6177 = koppelP(2,3);
t6183 = koppelP(2,1);
t6388 = koppelP(2,2);
t6403 = t6109 * t6388 - t6112 * t6183;
t6027 = t6403 * t6110 + t6113 * t6177;
t6060 = t6109 * t6183 + t6112 * t6388;
t5957 = t6027 * t6111 - t6060 * t6114;
t5958 = t6027 * t6114 + t6060 * t6111;
t6178 = koppelP(1,3);
t6184 = koppelP(1,1);
t6389 = koppelP(1,2);
t6402 = t6109 * t6389 - t6112 * t6184;
t6029 = t6402 * t6110 + t6113 * t6178;
t6061 = t6109 * t6184 + t6112 * t6389;
t5961 = t6029 * t6111 - t6061 * t6114;
t5962 = t6029 * t6114 + t6061 * t6111;
t6170 = rSges(4,3);
t6171 = rSges(4,2);
t6172 = rSges(4,1);
t6191 = t6109 * t6171 - t6112 * t6172;
t6408 = -t6110 * t6170 + t6113 * t6191;
t6135 = sin(qJ(1,6));
t6141 = cos(qJ(1,6));
t6333 = t6062 * t6128;
t6197 = -t6088 * t6130 + t6333;
t5893 = t6135 * t6390 + t6197 * t6141;
t6137 = sin(qJ(1,5));
t6143 = cos(qJ(1,5));
t6196 = -t6089 * t6130 + t6333;
t5894 = t6137 * t6391 + t6196 * t6143;
t6139 = sin(qJ(1,4));
t6145 = cos(qJ(1,4));
t6195 = -t6090 * t6130 + t6333;
t5895 = t6139 * t6392 + t6195 * t6145;
t6153 = sin(qJ(1,3));
t6159 = cos(qJ(1,3));
t6194 = -t6091 * t6130 + t6333;
t5896 = t6153 * t6393 + t6194 * t6159;
t6155 = sin(qJ(1,2));
t6161 = cos(qJ(1,2));
t6193 = -t6092 * t6130 + t6333;
t5897 = t6155 * t6394 + t6193 * t6161;
t6157 = sin(qJ(1,1));
t6163 = cos(qJ(1,1));
t6192 = -t6093 * t6130 + t6333;
t5898 = t6157 * t6395 + t6192 * t6163;
t6040 = t6135 * t6062;
t6278 = t6141 * t6088;
t5984 = t6134 * t6278 - t6040;
t6041 = t6137 * t6062;
t6277 = t6143 * t6089;
t5986 = t6136 * t6277 - t6041;
t6042 = t6139 * t6062;
t6276 = t6145 * t6090;
t5988 = t6138 * t6276 - t6042;
t6043 = t6153 * t6062;
t6275 = t6159 * t6091;
t5990 = t6152 * t6275 - t6043;
t6044 = t6155 * t6062;
t6274 = t6161 * t6092;
t5992 = t6154 * t6274 - t6044;
t6045 = t6157 * t6062;
t6273 = t6163 * t6093;
t5994 = t6156 * t6273 - t6045;
t6383 = m(1) * rSges(1,1);
t6382 = m(3) * t6128;
t6381 = m(3) * t6130;
t6380 = m(3) * (qJ(3,3) + rSges(3,3));
t6379 = m(3) * (qJ(3,2) + rSges(3,3));
t6378 = m(3) * (qJ(3,1) + rSges(3,3));
t6081 = t6126 * rSges(3,1) + t6376 * rSges(3,2);
t6259 = t6081 * t6382;
t6046 = g(3) * t6259;
t6146 = legFrame(6,2);
t6097 = sin(t6146);
t6103 = cos(t6146);
t6069 = g(1) * t6103 - g(2) * t6097;
t6116 = g(3) * t6383;
t6123 = qJ(3,6) + rSges(3,3);
t6272 = m(2) * rSges(2,2) + t6081 * t6381;
t6013 = -t6123 * t6382 + t6272;
t6034 = -m(2) * rSges(2,1) + (-rSges(3,1) * t6376 + rSges(3,2) * t6126 - pkin(1)) * m(3);
t6203 = -t6013 * t6134 - t6034 * t6140;
t6094 = m(1) * rSges(1,2) - m(2) * rSges(2,3);
t6222 = t6123 * t6381 - t6094;
t6375 = (t6046 * t6135 + t6116 * t6141 + (t6222 * t6135 + t6203 * t6141) * g(3) + ((-t6222 - t6259) * t6141 + (t6203 + t6383) * t6135) * t6069) * t6414;
t6147 = legFrame(5,2);
t6098 = sin(t6147);
t6104 = cos(t6147);
t6070 = g(1) * t6104 - g(2) * t6098;
t6124 = qJ(3,5) + rSges(3,3);
t6014 = -t6124 * t6382 + t6272;
t6202 = -t6014 * t6136 - t6034 * t6142;
t6221 = t6124 * t6381 - t6094;
t6374 = (t6046 * t6137 + t6116 * t6143 + (t6221 * t6137 + t6202 * t6143) * g(3) + ((-t6221 - t6259) * t6143 + (t6202 + t6383) * t6137) * t6070) * t6413;
t6148 = legFrame(4,2);
t6099 = sin(t6148);
t6105 = cos(t6148);
t6071 = g(1) * t6105 - g(2) * t6099;
t6125 = qJ(3,4) + rSges(3,3);
t6015 = -t6125 * t6382 + t6272;
t6201 = -t6015 * t6138 - t6034 * t6144;
t6220 = t6125 * t6381 - t6094;
t6373 = (t6046 * t6139 + t6116 * t6145 + (t6220 * t6139 + t6201 * t6145) * g(3) + ((-t6220 - t6259) * t6145 + (t6201 + t6383) * t6139) * t6071) * t6412;
t6149 = legFrame(3,2);
t6100 = sin(t6149);
t6106 = cos(t6149);
t6072 = g(1) * t6106 - g(2) * t6100;
t6016 = -t6128 * t6380 + t6272;
t6200 = -t6016 * t6152 - t6034 * t6158;
t6219 = t6130 * t6380 - t6094;
t6372 = (t6046 * t6153 + t6116 * t6159 + (t6219 * t6153 + t6200 * t6159) * g(3) + ((-t6219 - t6259) * t6159 + (t6200 + t6383) * t6153) * t6072) * t6411;
t6150 = legFrame(2,2);
t6101 = sin(t6150);
t6107 = cos(t6150);
t6073 = g(1) * t6107 - g(2) * t6101;
t6017 = -t6128 * t6379 + t6272;
t6199 = -t6017 * t6154 - t6034 * t6160;
t6218 = t6130 * t6379 - t6094;
t6371 = (t6046 * t6155 + t6116 * t6161 + (t6218 * t6155 + t6199 * t6161) * g(3) + ((-t6218 - t6259) * t6161 + (t6199 + t6383) * t6155) * t6073) * t6410;
t6151 = legFrame(1,2);
t6102 = sin(t6151);
t6108 = cos(t6151);
t6074 = g(1) * t6108 - g(2) * t6102;
t6018 = -t6128 * t6378 + t6272;
t6198 = -t6018 * t6156 - t6034 * t6162;
t6217 = t6130 * t6378 - t6094;
t6370 = (t6046 * t6157 + t6116 * t6163 + (t6217 * t6157 + t6198 * t6163) * g(3) + ((-t6217 - t6259) * t6163 + (t6198 + t6383) * t6157) * t6074) * t6409;
t6063 = g(1) * t6097 + g(2) * t6103;
t6215 = g(3) * t6135 - t6069 * t6141;
t6369 = ((-t6215 * t6013 + t6034 * t6063) * t6140 + (t6013 * t6063 + t6215 * t6034) * t6134) * t6414;
t6064 = g(1) * t6098 + g(2) * t6104;
t6214 = g(3) * t6137 - t6070 * t6143;
t6368 = ((-t6214 * t6014 + t6034 * t6064) * t6142 + (t6014 * t6064 + t6214 * t6034) * t6136) * t6413;
t6065 = g(1) * t6099 + g(2) * t6105;
t6213 = g(3) * t6139 - t6071 * t6145;
t6367 = ((-t6213 * t6015 + t6034 * t6065) * t6144 + (t6015 * t6065 + t6213 * t6034) * t6138) * t6412;
t6066 = g(1) * t6100 + g(2) * t6106;
t6212 = g(3) * t6153 - t6072 * t6159;
t6366 = ((-t6212 * t6016 + t6034 * t6066) * t6158 + (t6016 * t6066 + t6212 * t6034) * t6152) * t6411;
t6067 = g(1) * t6101 + g(2) * t6107;
t6211 = g(3) * t6155 - t6073 * t6161;
t6365 = ((-t6211 * t6017 + t6034 * t6067) * t6160 + (t6017 * t6067 + t6211 * t6034) * t6154) * t6410;
t6068 = g(1) * t6102 + g(2) * t6108;
t6210 = g(3) * t6157 - t6074 * t6163;
t6364 = ((-t6210 * t6018 + t6034 * t6068) * t6162 + (t6018 * t6068 + t6210 * t6034) * t6156) * t6409;
t6082 = 0.1e1 / t6088;
t6363 = ((-t6063 * t6140 - t6215 * t6134) * t6128 + t6130 * (g(3) * t6141 + t6069 * t6135)) * t6082;
t6083 = 0.1e1 / t6089;
t6362 = ((-t6064 * t6142 - t6214 * t6136) * t6128 + t6130 * (g(3) * t6143 + t6070 * t6137)) * t6083;
t6084 = 0.1e1 / t6090;
t6361 = ((-t6065 * t6144 - t6213 * t6138) * t6128 + t6130 * (g(3) * t6145 + t6071 * t6139)) * t6084;
t6085 = 0.1e1 / t6091;
t6360 = ((-t6066 * t6158 - t6212 * t6152) * t6128 + t6130 * (g(3) * t6159 + t6072 * t6153)) * t6085;
t6086 = 0.1e1 / t6092;
t6359 = ((-t6067 * t6160 - t6211 * t6154) * t6128 + t6130 * (g(3) * t6161 + t6073 * t6155)) * t6086;
t6087 = 0.1e1 / t6093;
t6358 = ((-t6068 * t6162 - t6210 * t6156) * t6128 + t6130 * (g(3) * t6163 + t6074 * t6157)) * t6087;
t6031 = t6049 * t6134;
t6032 = t6049 * t6136;
t6033 = t6049 * t6138;
t6356 = t6049 * t6141;
t6354 = t6049 * t6143;
t6352 = t6049 * t6145;
t6035 = t6049 * t6152;
t6036 = t6049 * t6154;
t6037 = t6049 * t6156;
t6350 = t6049 * t6159;
t6348 = t6049 * t6161;
t6346 = t6049 * t6163;
t6331 = t6062 * t6140;
t6330 = t6062 * t6141;
t6329 = t6062 * t6142;
t6328 = t6062 * t6143;
t6327 = t6062 * t6144;
t6326 = t6062 * t6145;
t6325 = t6062 * t6158;
t6324 = t6062 * t6159;
t6323 = t6062 * t6160;
t6322 = t6062 * t6161;
t6321 = t6062 * t6162;
t6320 = t6062 * t6163;
t6318 = t6088 * t6135;
t6316 = t6089 * t6137;
t6314 = t6090 * t6139;
t6312 = t6091 * t6153;
t6310 = t6092 * t6155;
t6308 = t6093 * t6157;
t6307 = t6097 * t6088;
t6306 = t6098 * t6089;
t6305 = t6099 * t6090;
t6304 = t6100 * t6091;
t6303 = t6101 * t6092;
t6302 = t6102 * t6093;
t6301 = t6103 * t6088;
t6300 = t6104 * t6089;
t6299 = t6105 * t6090;
t6298 = t6106 * t6091;
t6297 = t6107 * t6092;
t6296 = t6108 * t6093;
t6294 = t6110 * t6171;
t6293 = t6110 * t6172;
t6286 = t6113 * t6170;
t6285 = t6128 * t6130;
t6284 = t6128 * t6140;
t6283 = t6128 * t6142;
t6282 = t6128 * t6144;
t6281 = t6128 * t6158;
t6280 = t6128 * t6160;
t6279 = t6128 * t6162;
t6265 = m(3) * t6363;
t6264 = m(3) * t6362;
t6263 = m(3) * t6361;
t6262 = m(3) * t6360;
t6261 = m(3) * t6359;
t6260 = m(3) * t6358;
t6258 = t6082 * t6375;
t6257 = t6083 * t6374;
t6256 = t6084 * t6373;
t6255 = t6085 * t6372;
t6254 = t6086 * t6371;
t6253 = t6087 * t6370;
t6252 = t6082 * t6369;
t6251 = t6083 * t6368;
t6250 = t6084 * t6367;
t6249 = t6085 * t6366;
t6248 = t6086 * t6365;
t6247 = t6087 * t6364;
t6246 = t5893 * t6284;
t6245 = t5894 * t6283;
t6244 = t5895 * t6282;
t6243 = t5896 * t6281;
t6242 = t5897 * t6280;
t6241 = t5898 * t6279;
t6240 = t6128 * t6031;
t6239 = t6128 * t6032;
t6238 = t6128 * t6033;
t6237 = t6128 * t6356;
t6236 = t6128 * t6354;
t6235 = t6128 * t6352;
t6234 = t6128 * t6035;
t6233 = t6128 * t6036;
t6232 = t6128 * t6037;
t6231 = t6128 * t6350;
t6230 = t6128 * t6348;
t6229 = t6128 * t6346;
t6216 = -t6062 * t6285 - t6096;
t6209 = -t6135 * t6197 + t6141 * t6390;
t6208 = -t6137 * t6196 + t6143 * t6391;
t6207 = -t6139 * t6195 + t6145 * t6392;
t6206 = -t6153 * t6194 + t6159 * t6393;
t6205 = -t6155 * t6193 + t6161 * t6394;
t6204 = -t6157 * t6192 + t6163 * t6395;
t5983 = t6134 * t6330 + t6318;
t6115 = t6130 ^ 2;
t6190 = t5983 * t6285 - t5984 * t6115 + t5984;
t5985 = t6136 * t6328 + t6316;
t6189 = t5985 * t6285 - t5986 * t6115 + t5986;
t5987 = t6138 * t6326 + t6314;
t6188 = t5987 * t6285 - t5988 * t6115 + t5988;
t5989 = t6152 * t6324 + t6312;
t6187 = t5989 * t6285 - t5990 * t6115 + t5990;
t5991 = t6154 * t6322 + t6310;
t6186 = t5991 * t6285 - t5992 * t6115 + t5992;
t5993 = t6156 * t6320 + t6308;
t6185 = t5993 * t6285 - t5994 * t6115 + t5994;
t6122 = t6162 ^ 2;
t6121 = t6160 ^ 2;
t6120 = t6158 ^ 2;
t6119 = t6144 ^ 2;
t6118 = t6142 ^ 2;
t6117 = t6140 ^ 2;
t6000 = t6110 * t6178 - t6402 * t6113;
t5999 = t6110 * t6177 - t6403 * t6113;
t5998 = t6110 * t6176 - t6404 * t6113;
t5997 = t6110 * t6175 - t6405 * t6113;
t5996 = t6110 * t6174 - t6406 * t6113;
t5995 = t6110 * t6173 - t6407 * t6113;
t5982 = -t6093 * t6279 + t6037;
t5981 = -t6092 * t6280 + t6036;
t5980 = -t6091 * t6281 + t6035;
t5979 = -t6090 * t6282 + t6033;
t5978 = -t6089 * t6283 + t6032;
t5977 = -t6088 * t6284 + t6031;
t5976 = t6093 * t6115 - qJ(3,1) + t6216;
t5975 = t6092 * t6115 - qJ(3,2) + t6216;
t5974 = t6091 * t6115 - qJ(3,3) + t6216;
t5973 = t6090 * t6115 - qJ(3,4) + t6216;
t5972 = t6089 * t6115 - qJ(3,5) + t6216;
t5971 = t6088 * t6115 - qJ(3,6) + t6216;
t5970 = t6401 * t6162 + t6037;
t5969 = t6400 * t6160 + t6036;
t5968 = t6399 * t6158 + t6035;
t5942 = t6398 * t6144 + t6033;
t5941 = t6397 * t6142 + t6032;
t5940 = t6396 * t6140 + t6031;
t5916 = t5994 * t6128 + t6162 * t6346;
t5915 = t5992 * t6128 + t6160 * t6348;
t5914 = t5990 * t6128 + t6158 * t6350;
t5913 = t5988 * t6128 + t6144 * t6352;
t5912 = t5986 * t6128 + t6142 * t6354;
t5911 = t5984 * t6128 + t6140 * t6356;
t5892 = (-t6156 * t6045 + t6273) * t6115 + (-t6157 * t6347 + (-t6156 * t6308 - t6320) * t6128) * t6130 - t6273;
t5891 = (-t6154 * t6044 + t6274) * t6115 + (-t6155 * t6349 + (-t6154 * t6310 - t6322) * t6128) * t6130 - t6274;
t5890 = (-t6152 * t6043 + t6275) * t6115 + (-t6153 * t6351 + (-t6152 * t6312 - t6324) * t6128) * t6130 - t6275;
t5889 = (-t6138 * t6042 + t6276) * t6115 + (-t6139 * t6353 + (-t6138 * t6314 - t6326) * t6128) * t6130 - t6276;
t5888 = (-t6136 * t6041 + t6277) * t6115 + (-t6137 * t6355 + (-t6136 * t6316 - t6328) * t6128) * t6130 - t6277;
t5887 = (-t6134 * t6040 + t6278) * t6115 + (-t6135 * t6357 + (-t6134 * t6318 - t6330) * t6128) * t6130 - t6278;
t5886 = t6102 * t5970 + t6204 * t6108;
t5885 = t6101 * t5969 + t6205 * t6107;
t5884 = t6100 * t5968 + t6206 * t6106;
t5883 = t6108 * t5970 - t6204 * t6102;
t5882 = t6107 * t5969 - t6205 * t6101;
t5881 = t6106 * t5968 - t6206 * t6100;
t5880 = t6099 * t5942 + t6207 * t6105;
t5879 = t6098 * t5941 + t6208 * t6104;
t5878 = t6097 * t5940 + t6209 * t6103;
t5877 = t6105 * t5942 - t6207 * t6099;
t5876 = t6104 * t5941 - t6208 * t6098;
t5875 = t6103 * t5940 - t6209 * t6097;
t5874 = (-t5993 * t6102 - t6108 * t6321) * t6115 + (-t5916 * t6102 + t5982 * t6108) * t6130 + t6157 * t6302;
t5873 = (t5993 * t6108 - t6102 * t6321) * t6115 + (t5916 * t6108 + t5982 * t6102) * t6130 - t6157 * t6296;
t5872 = (-t5991 * t6101 - t6107 * t6323) * t6115 + (-t5915 * t6101 + t5981 * t6107) * t6130 + t6155 * t6303;
t5871 = (t5991 * t6107 - t6101 * t6323) * t6115 + (t5915 * t6107 + t5981 * t6101) * t6130 - t6155 * t6297;
t5870 = (-t5989 * t6100 - t6106 * t6325) * t6115 + (-t5914 * t6100 + t5980 * t6106) * t6130 + t6153 * t6304;
t5869 = (t5989 * t6106 - t6100 * t6325) * t6115 + (t5914 * t6106 + t5980 * t6100) * t6130 - t6153 * t6298;
t5868 = (-t5987 * t6099 - t6105 * t6327) * t6115 + (-t5913 * t6099 + t5979 * t6105) * t6130 + t6139 * t6305;
t5867 = (t5987 * t6105 - t6099 * t6327) * t6115 + (t5913 * t6105 + t5979 * t6099) * t6130 - t6139 * t6299;
t5866 = (-t5985 * t6098 - t6104 * t6329) * t6115 + (-t5912 * t6098 + t5978 * t6104) * t6130 + t6137 * t6306;
t5865 = (t5985 * t6104 - t6098 * t6329) * t6115 + (t5912 * t6104 + t5978 * t6098) * t6130 - t6137 * t6300;
t5864 = (-t5983 * t6097 - t6103 * t6331) * t6115 + (-t5911 * t6097 + t5977 * t6103) * t6130 + t6135 * t6307;
t5863 = (t5983 * t6103 - t6097 * t6331) * t6115 + (t5911 * t6103 + t5977 * t6097) * t6130 - t6135 * t6301;
t5856 = (t5976 * t6102 + t6108 * t6229) * t6122 + (t6102 * t6232 + t6185 * t6108) * t6162 + t6302;
t5855 = (t5976 * t6108 - t6102 * t6229) * t6122 + (-t6185 * t6102 + t6108 * t6232) * t6162 + t6296;
t5854 = (t5975 * t6101 + t6107 * t6230) * t6121 + (t6101 * t6233 + t6186 * t6107) * t6160 + t6303;
t5853 = (t5975 * t6107 - t6101 * t6230) * t6121 + (-t6186 * t6101 + t6107 * t6233) * t6160 + t6297;
t5852 = (t5974 * t6100 + t6106 * t6231) * t6120 + (t6100 * t6234 + t6187 * t6106) * t6158 + t6304;
t5851 = (t5974 * t6106 - t6100 * t6231) * t6120 + (-t6187 * t6100 + t6106 * t6234) * t6158 + t6298;
t5850 = (t5973 * t6099 + t6105 * t6235) * t6119 + (t6099 * t6238 + t6188 * t6105) * t6144 + t6305;
t5849 = (t5973 * t6105 - t6099 * t6235) * t6119 + (-t6188 * t6099 + t6105 * t6238) * t6144 + t6299;
t5848 = (t5972 * t6098 + t6104 * t6236) * t6118 + (t6098 * t6239 + t6189 * t6104) * t6142 + t6306;
t5847 = (t5972 * t6104 - t6098 * t6236) * t6118 + (-t6189 * t6098 + t6104 * t6239) * t6142 + t6300;
t5846 = (t5971 * t6097 + t6103 * t6237) * t6117 + (t6097 * t6240 + t6190 * t6103) * t6140 + t6307;
t5845 = (t5971 * t6103 - t6097 * t6237) * t6117 + (-t6190 * t6097 + t6103 * t6240) * t6140 + t6301;
t1 = [-m(4) * g(1) + (t5856 * t6364 + t5873 * t6370) * t6087 + (t5854 * t6365 + t5871 * t6371) * t6086 + (t5852 * t6366 + t5869 * t6372) * t6085 + (t5850 * t6367 + t5867 * t6373) * t6084 + (t5848 * t6368 + t5865 * t6374) * t6083 + (t5846 * t6369 + t5863 * t6375) * t6082 + (-t5878 * t6363 - t5879 * t6362 - t5880 * t6361 - t5884 * t6360 - t5885 * t6359 - t5886 * t6358) * m(3); -m(4) * g(2) + (t5855 * t6364 + t5874 * t6370) * t6087 + (t5853 * t6365 + t5872 * t6371) * t6086 + (t5851 * t6366 + t5870 * t6372) * t6085 + (t5849 * t6367 + t5868 * t6373) * t6084 + (t5847 * t6368 + t5866 * t6374) * t6083 + (t5845 * t6369 + t5864 * t6375) * t6082 + (-t5875 * t6363 - t5876 * t6362 - t5877 * t6361 - t5881 * t6360 - t5882 * t6359 - t5883 * t6358) * m(3); t5887 * t6258 + t5888 * t6257 + t5889 * t6256 + t5890 * t6255 + t5891 * t6254 + t5892 * t6253 - m(4) * g(3) + (-t6140 * t5893 * t6252 - t6142 * t5894 * t6251 - t6144 * t5895 * t6250 - t6158 * t5896 * t6249 - t6160 * t5897 * t6248 - t6162 * t5898 * t6247) * t6128 + (t5893 * t6363 + t5894 * t6362 + t5895 * t6361 + t5896 * t6360 + t5897 * t6359 + t5898 * t6358) * m(3); (-t5874 * t5962 - t5892 * t5961) * t6253 + (-t5855 * t5962 + t5961 * t6241) * t6247 - (-t5883 * t5962 + t5898 * t5961) * t6260 + (-t5872 * t5958 - t5891 * t5957) * t6254 + (-t5853 * t5958 + t5957 * t6242) * t6248 - (-t5882 * t5958 + t5897 * t5957) * t6261 + (-t5870 * t5954 - t5890 * t5953) * t6255 + (-t5851 * t5954 + t5953 * t6243) * t6249 - (-t5881 * t5954 + t5896 * t5953) * t6262 + (-t5868 * t5950 - t5889 * t5949) * t6256 + (-t5849 * t5950 + t5949 * t6244) * t6250 - (-t5877 * t5950 + t5895 * t5949) * t6263 + (-t5866 * t5946 - t5888 * t5945) * t6257 + (-t5847 * t5946 + t5945 * t6245) * t6251 - (-t5876 * t5946 + t5894 * t5945) * t6264 + (-t5864 * t5935 - t5887 * t5936) * t6258 + (-t5845 * t5935 + t5936 * t6246) * t6252 - (-t5875 * t5935 + t5893 * t5936) * t6265 + m(4) * (((-g(2) * t6293 - g(3) * t6171) * t6112 + g(2) * t6286) * t6114 + ((g(2) * t6171 - g(3) * t6293) * t6112 + g(3) * t6286) * t6111 + ((g(2) * t6294 - g(3) * t6172) * t6114 + (g(2) * t6172 + g(3) * t6294) * t6111) * t6109); (t5873 * t5962 - t5892 * t6000) * t6253 + (t5856 * t5962 + t6000 * t6241) * t6247 - (t5886 * t5962 + t5898 * t6000) * t6260 + (t5871 * t5958 - t5891 * t5999) * t6254 + (t5854 * t5958 + t5999 * t6242) * t6248 - (t5885 * t5958 + t5897 * t5999) * t6261 + (t5869 * t5954 - t5890 * t5998) * t6255 + (t5852 * t5954 + t5998 * t6243) * t6249 - (t5884 * t5954 + t5896 * t5998) * t6262 + (t5867 * t5950 - t5889 * t5997) * t6256 + (t5850 * t5950 + t5997 * t6244) * t6250 - (t5880 * t5950 + t5895 * t5997) * t6263 + (t5865 * t5946 - t5888 * t5996) * t6257 + (t5848 * t5946 + t5996 * t6245) * t6251 - (t5879 * t5946 + t5894 * t5996) * t6264 + (t5863 * t5935 - t5887 * t5995) * t6258 + (t5846 * t5935 + t5995 * t6246) * t6252 - (t5878 * t5935 + t5893 * t5995) * t6265 - m(4) * (t6408 * g(3) + ((t6110 * t6191 + t6286) * t6114 + (t6109 * t6172 + t6171 * t6112) * t6111) * g(1)); (t5873 * t5961 + t5874 * t6000) * t6253 + (t5855 * t6000 + t5856 * t5961) * t6247 - (t5883 * t6000 + t5886 * t5961) * t6260 + (t5871 * t5957 + t5872 * t5999) * t6254 + (t5853 * t5999 + t5854 * t5957) * t6248 - (t5882 * t5999 + t5885 * t5957) * t6261 + (t5869 * t5953 + t5870 * t5998) * t6255 + (t5851 * t5998 + t5852 * t5953) * t6249 - (t5881 * t5998 + t5884 * t5953) * t6262 + (t5867 * t5949 + t5868 * t5997) * t6256 + (t5849 * t5997 + t5850 * t5949) * t6250 - (t5877 * t5997 + t5880 * t5949) * t6263 + (t5865 * t5945 + t5866 * t5996) * t6257 + (t5847 * t5996 + t5848 * t5945) * t6251 - (t5876 * t5996 + t5879 * t5945) * t6264 + (t5863 * t5936 + t5864 * t5995) * t6258 + (t5845 * t5995 + t5846 * t5936) * t6252 - (t5875 * t5995 + t5878 * t5936) * t6265 + m(4) * (t6408 * g(2) + (-t6111 * t6286 + (t6111 * t6293 + t6114 * t6171) * t6112 + (-t6111 * t6294 + t6114 * t6172) * t6109) * g(1));];
taugX  = t1;
