% Calculate Gravitation load for parallel robot
% P6RRPRRR14V4G7A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,alpha3,alpha4,d1,d4,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
%
% Output:
% taugX [6x1]
%   forces required to compensate gravitation load
%   in platform coordinates

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 05:41
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function taugX = P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2(xP, qJ, g, legFrame, ...
  koppelP, pkin, m, mrSges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(3,1),zeros(6,3),zeros(6,3),zeros(7,1),zeros(3+1,1),zeros(3+1,3)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: pkin has to be [7x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(g) && all(size(g) == [3 1]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: g has to be [3x1] (double)');
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V4G7A0_gravload_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From gravvec_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-03 23:29:31
% EndTime: 2022-11-03 23:29:42
% DurationCPUTime: 11.16s
% Computational Cost: add. (6791->570), mult. (12432->994), div. (270->12), fcn. (10913->48), ass. (0->429)
t6090 = sin(qJ(2,6));
t6084 = sin(pkin(7));
t6087 = cos(pkin(7));
t6325 = sin(pkin(4)) * pkin(6);
t6007 = pkin(2) * t6087 + t6084 * t6325 + pkin(1);
t6096 = cos(qJ(2,6));
t6305 = t6007 * t6096;
t6058 = cos(pkin(4)) * pkin(6);
t6046 = t6058 + qJ(3,6);
t6086 = sin(pkin(3));
t6020 = -pkin(2) * t6084 + t6087 * t6325;
t6089 = cos(pkin(3));
t6280 = t6020 * t6089;
t6339 = -t6046 * t6086 - t6280;
t6332 = -t6339 * t6090 + t6305;
t6357 = 0.1e1 / t6332;
t6092 = sin(qJ(2,5));
t6098 = cos(qJ(2,5));
t6303 = t6007 * t6098;
t6047 = t6058 + qJ(3,5);
t6340 = -t6047 * t6086 - t6280;
t6333 = -t6340 * t6092 + t6303;
t6356 = 0.1e1 / t6333;
t6094 = sin(qJ(2,4));
t6100 = cos(qJ(2,4));
t6301 = t6007 * t6100;
t6048 = t6058 + qJ(3,4);
t6341 = -t6048 * t6086 - t6280;
t6334 = -t6341 * t6094 + t6301;
t6355 = 0.1e1 / t6334;
t6109 = sin(qJ(2,3));
t6115 = cos(qJ(2,3));
t6299 = t6007 * t6115;
t6049 = t6058 + qJ(3,3);
t6342 = -t6049 * t6086 - t6280;
t6335 = -t6342 * t6109 + t6299;
t6354 = 0.1e1 / t6335;
t6111 = sin(qJ(2,2));
t6117 = cos(qJ(2,2));
t6297 = t6007 * t6117;
t6050 = t6058 + qJ(3,2);
t6343 = -t6050 * t6086 - t6280;
t6336 = -t6343 * t6111 + t6297;
t6353 = 0.1e1 / t6336;
t6113 = sin(qJ(2,1));
t6119 = cos(qJ(2,1));
t6295 = t6007 * t6119;
t6051 = t6058 + qJ(3,1);
t6344 = -t6051 * t6086 - t6280;
t6337 = -t6344 * t6113 + t6295;
t6352 = 0.1e1 / t6337;
t6123 = xP(5);
t6072 = sin(t6123);
t6075 = cos(t6123);
t6128 = koppelP(6,3);
t6122 = xP(6);
t6071 = sin(t6122);
t6074 = cos(t6122);
t6134 = koppelP(6,1);
t6326 = koppelP(6,2);
t6350 = t6071 * t6326 - t6074 * t6134;
t5971 = t6350 * t6072 + t6075 * t6128;
t6014 = t6071 * t6134 + t6074 * t6326;
t6124 = xP(4);
t6073 = sin(t6124);
t6076 = cos(t6124);
t5894 = t5971 * t6073 - t6014 * t6076;
t5893 = t5971 * t6076 + t6014 * t6073;
t6129 = koppelP(5,3);
t6135 = koppelP(5,1);
t6327 = koppelP(5,2);
t6349 = t6071 * t6327 - t6074 * t6135;
t5973 = t6349 * t6072 + t6075 * t6129;
t6015 = t6071 * t6135 + t6074 * t6327;
t5903 = t5973 * t6073 - t6015 * t6076;
t5904 = t5973 * t6076 + t6015 * t6073;
t6130 = koppelP(4,3);
t6136 = koppelP(4,1);
t6328 = koppelP(4,2);
t6348 = t6071 * t6328 - t6074 * t6136;
t5975 = t6348 * t6072 + t6075 * t6130;
t6016 = t6071 * t6136 + t6074 * t6328;
t5907 = t5975 * t6073 - t6016 * t6076;
t5908 = t5975 * t6076 + t6016 * t6073;
t6131 = koppelP(3,3);
t6137 = koppelP(3,1);
t6329 = koppelP(3,2);
t6347 = t6071 * t6329 - t6074 * t6137;
t5977 = t6347 * t6072 + t6075 * t6131;
t6017 = t6071 * t6137 + t6074 * t6329;
t5911 = t5977 * t6073 - t6017 * t6076;
t5912 = t5977 * t6076 + t6017 * t6073;
t6132 = koppelP(2,3);
t6138 = koppelP(2,1);
t6330 = koppelP(2,2);
t6346 = t6071 * t6330 - t6074 * t6138;
t5979 = t6346 * t6072 + t6075 * t6132;
t6018 = t6071 * t6138 + t6074 * t6330;
t5915 = t5979 * t6073 - t6018 * t6076;
t5916 = t5979 * t6076 + t6018 * t6073;
t6133 = koppelP(1,3);
t6139 = koppelP(1,1);
t6331 = koppelP(1,2);
t6345 = t6071 * t6331 - t6074 * t6139;
t5981 = t6345 * t6072 + t6075 * t6133;
t6019 = t6071 * t6139 + t6074 * t6331;
t5919 = t5981 * t6073 - t6019 * t6076;
t5920 = t5981 * t6076 + t6019 * t6073;
t6126 = mrSges(4,2);
t6127 = mrSges(4,1);
t6146 = t6071 * t6126 - t6074 * t6127;
t6125 = mrSges(4,3);
t6234 = t6075 * t6125;
t6338 = t6146 * t6072 + t6234;
t6351 = -t6072 * t6125 + t6146 * t6075;
t6091 = sin(qJ(1,6));
t6097 = cos(qJ(1,6));
t6281 = t6020 * t6086;
t6153 = -t6046 * t6089 + t6281;
t5851 = t6091 * t6332 + t6153 * t6097;
t6093 = sin(qJ(1,5));
t6099 = cos(qJ(1,5));
t6152 = -t6047 * t6089 + t6281;
t5852 = t6093 * t6333 + t6152 * t6099;
t6095 = sin(qJ(1,4));
t6101 = cos(qJ(1,4));
t6151 = -t6048 * t6089 + t6281;
t5853 = t6095 * t6334 + t6151 * t6101;
t6110 = sin(qJ(1,3));
t6116 = cos(qJ(1,3));
t6150 = -t6049 * t6089 + t6281;
t5854 = t6110 * t6335 + t6150 * t6116;
t6112 = sin(qJ(1,2));
t6118 = cos(qJ(1,2));
t6149 = -t6050 * t6089 + t6281;
t5855 = t6112 * t6336 + t6149 * t6118;
t6114 = sin(qJ(1,1));
t6120 = cos(qJ(1,1));
t6148 = -t6051 * t6089 + t6281;
t5856 = t6114 * t6337 + t6148 * t6120;
t5997 = t6091 * t6020;
t6226 = t6097 * t6046;
t5942 = t6090 * t6226 - t5997;
t5998 = t6093 * t6020;
t6225 = t6099 * t6047;
t5944 = t6092 * t6225 - t5998;
t5999 = t6095 * t6020;
t6224 = t6101 * t6048;
t5946 = t6094 * t6224 - t5999;
t6000 = t6110 * t6020;
t6223 = t6116 * t6049;
t5948 = t6109 * t6223 - t6000;
t6001 = t6112 * t6020;
t6222 = t6118 * t6050;
t5950 = t6111 * t6222 - t6001;
t6002 = t6114 * t6020;
t6221 = t6120 * t6051;
t5952 = t6113 * t6221 - t6002;
t6039 = mrSges(3,1) * t6084 + mrSges(3,2) * t6087;
t6324 = -t6039 * t6089 - mrSges(2,2);
t6267 = t6039 * t6086;
t6003 = g(3) * t6267;
t6103 = legFrame(6,2);
t6059 = sin(t6103);
t6065 = cos(t6103);
t6027 = g(1) * t6065 - g(2) * t6059;
t6121 = mrSges(1,1) * g(3);
t6052 = m(3) * qJ(3,6) + mrSges(3,3);
t5983 = t6052 * t6086 + t6324;
t6006 = m(3) * pkin(1) + mrSges(3,1) * t6087 - mrSges(3,2) * t6084 + mrSges(2,1);
t6159 = t5983 * t6090 + t6006 * t6096;
t6102 = mrSges(1,2) - mrSges(2,3);
t6178 = t6052 * t6089 - t6102;
t6323 = (t6003 * t6091 + t6121 * t6097 + (t6178 * t6091 + t6159 * t6097) * g(3) + ((-t6178 - t6267) * t6097 + (mrSges(1,1) + t6159) * t6091) * t6027) * t6357;
t6104 = legFrame(5,2);
t6060 = sin(t6104);
t6066 = cos(t6104);
t6028 = g(1) * t6066 - g(2) * t6060;
t6053 = m(3) * qJ(3,5) + mrSges(3,3);
t5984 = t6053 * t6086 + t6324;
t6158 = t5984 * t6092 + t6006 * t6098;
t6177 = t6053 * t6089 - t6102;
t6322 = (t6003 * t6093 + t6121 * t6099 + (t6177 * t6093 + t6158 * t6099) * g(3) + ((-t6177 - t6267) * t6099 + (mrSges(1,1) + t6158) * t6093) * t6028) * t6356;
t6105 = legFrame(4,2);
t6061 = sin(t6105);
t6067 = cos(t6105);
t6029 = g(1) * t6067 - g(2) * t6061;
t6054 = m(3) * qJ(3,4) + mrSges(3,3);
t5985 = t6054 * t6086 + t6324;
t6157 = t5985 * t6094 + t6006 * t6100;
t6176 = t6054 * t6089 - t6102;
t6321 = (t6003 * t6095 + t6121 * t6101 + (t6176 * t6095 + t6157 * t6101) * g(3) + ((-t6176 - t6267) * t6101 + (mrSges(1,1) + t6157) * t6095) * t6029) * t6355;
t6106 = legFrame(3,2);
t6062 = sin(t6106);
t6068 = cos(t6106);
t6030 = g(1) * t6068 - g(2) * t6062;
t6055 = m(3) * qJ(3,3) + mrSges(3,3);
t5986 = t6055 * t6086 + t6324;
t6156 = t5986 * t6109 + t6006 * t6115;
t6175 = t6055 * t6089 - t6102;
t6320 = (t6003 * t6110 + t6121 * t6116 + (t6175 * t6110 + t6156 * t6116) * g(3) + ((-t6175 - t6267) * t6116 + (mrSges(1,1) + t6156) * t6110) * t6030) * t6354;
t6107 = legFrame(2,2);
t6063 = sin(t6107);
t6069 = cos(t6107);
t6031 = g(1) * t6069 - g(2) * t6063;
t6056 = m(3) * qJ(3,2) + mrSges(3,3);
t5987 = t6056 * t6086 + t6324;
t6155 = t5987 * t6111 + t6006 * t6117;
t6174 = t6056 * t6089 - t6102;
t6319 = (t6003 * t6112 + t6121 * t6118 + (t6174 * t6112 + t6155 * t6118) * g(3) + ((-t6174 - t6267) * t6118 + (mrSges(1,1) + t6155) * t6112) * t6031) * t6353;
t6108 = legFrame(1,2);
t6064 = sin(t6108);
t6070 = cos(t6108);
t6032 = g(1) * t6070 - g(2) * t6064;
t6057 = qJ(3,1) * m(3) + mrSges(3,3);
t5988 = t6057 * t6086 + t6324;
t6154 = t5988 * t6113 + t6006 * t6119;
t6173 = t6057 * t6089 - t6102;
t6318 = (t6003 * t6114 + t6121 * t6120 + (t6173 * t6114 + t6154 * t6120) * g(3) + ((-t6173 - t6267) * t6120 + (mrSges(1,1) + t6154) * t6114) * t6032) * t6352;
t6021 = g(1) * t6059 + g(2) * t6065;
t6171 = g(3) * t6091 - t6027 * t6097;
t6317 = ((t6171 * t5983 - t6006 * t6021) * t6096 - t6090 * (t5983 * t6021 + t6171 * t6006)) * t6357;
t6022 = g(1) * t6060 + g(2) * t6066;
t6170 = g(3) * t6093 - t6028 * t6099;
t6316 = ((t6170 * t5984 - t6006 * t6022) * t6098 - t6092 * (t5984 * t6022 + t6170 * t6006)) * t6356;
t6023 = g(1) * t6061 + g(2) * t6067;
t6169 = g(3) * t6095 - t6029 * t6101;
t6315 = ((t6169 * t5985 - t6006 * t6023) * t6100 - t6094 * (t5985 * t6023 + t6169 * t6006)) * t6355;
t6024 = g(1) * t6062 + g(2) * t6068;
t6168 = g(3) * t6110 - t6030 * t6116;
t6314 = ((t6168 * t5986 - t6006 * t6024) * t6115 - t6109 * (t5986 * t6024 + t6168 * t6006)) * t6354;
t6025 = g(1) * t6063 + g(2) * t6069;
t6167 = g(3) * t6112 - t6031 * t6118;
t6313 = ((t6167 * t5987 - t6006 * t6025) * t6117 - t6111 * (t5987 * t6025 + t6167 * t6006)) * t6353;
t6026 = g(1) * t6064 + g(2) * t6070;
t6166 = g(3) * t6114 - t6032 * t6120;
t6312 = ((t6166 * t5988 - t6006 * t6026) * t6119 - t6113 * (t5988 * t6026 + t6166 * t6006)) * t6352;
t6040 = 0.1e1 / t6046;
t6311 = ((-t6021 * t6096 - t6171 * t6090) * t6086 + t6089 * (g(3) * t6097 + t6027 * t6091)) * t6040;
t6041 = 0.1e1 / t6047;
t6310 = ((-t6022 * t6098 - t6170 * t6092) * t6086 + t6089 * (g(3) * t6099 + t6028 * t6093)) * t6041;
t6042 = 0.1e1 / t6048;
t6309 = ((-t6023 * t6100 - t6169 * t6094) * t6086 + t6089 * (g(3) * t6101 + t6029 * t6095)) * t6042;
t6043 = 0.1e1 / t6049;
t6308 = ((-t6024 * t6115 - t6168 * t6109) * t6086 + t6089 * (g(3) * t6116 + t6030 * t6110)) * t6043;
t6044 = 0.1e1 / t6050;
t6307 = ((-t6025 * t6117 - t6167 * t6111) * t6086 + t6089 * (g(3) * t6118 + t6031 * t6112)) * t6044;
t6045 = 0.1e1 / t6051;
t6306 = ((-t6026 * t6119 - t6166 * t6113) * t6086 + t6089 * (g(3) * t6120 + t6032 * t6114)) * t6045;
t5989 = t6007 * t6090;
t5990 = t6007 * t6092;
t5991 = t6007 * t6094;
t6304 = t6007 * t6097;
t6302 = t6007 * t6099;
t6300 = t6007 * t6101;
t5992 = t6007 * t6109;
t5993 = t6007 * t6111;
t5994 = t6007 * t6113;
t6298 = t6007 * t6116;
t6296 = t6007 * t6118;
t6294 = t6007 * t6120;
t6279 = t6020 * t6096;
t6278 = t6020 * t6097;
t6277 = t6020 * t6098;
t6276 = t6020 * t6099;
t6275 = t6020 * t6100;
t6274 = t6020 * t6101;
t6273 = t6020 * t6115;
t6272 = t6020 * t6116;
t6271 = t6020 * t6117;
t6270 = t6020 * t6118;
t6269 = t6020 * t6119;
t6268 = t6020 * t6120;
t6265 = t6046 * t6091;
t6263 = t6047 * t6093;
t6261 = t6048 * t6095;
t6259 = t6049 * t6110;
t6257 = t6050 * t6112;
t6255 = t6051 * t6114;
t6254 = t6059 * t6046;
t6253 = t6060 * t6047;
t6252 = t6061 * t6048;
t6251 = t6062 * t6049;
t6250 = t6063 * t6050;
t6249 = t6064 * t6051;
t6248 = t6065 * t6046;
t6247 = t6066 * t6047;
t6246 = t6067 * t6048;
t6245 = t6068 * t6049;
t6244 = t6069 * t6050;
t6243 = t6070 * t6051;
t6242 = t6072 * t6073;
t6233 = t6086 * t6089;
t6232 = t6086 * t6096;
t6231 = t6086 * t6098;
t6230 = t6086 * t6100;
t6229 = t6086 * t6115;
t6228 = t6086 * t6117;
t6227 = t6086 * t6119;
t6214 = t6040 * t6323;
t6213 = t6041 * t6322;
t6212 = t6042 * t6321;
t6211 = t6043 * t6320;
t6210 = t6044 * t6319;
t6209 = t6045 * t6318;
t6208 = t6040 * t6317;
t6207 = t6041 * t6316;
t6206 = t6042 * t6315;
t6205 = t6043 * t6314;
t6204 = t6044 * t6313;
t6203 = t6045 * t6312;
t6202 = t5851 * t6232;
t6201 = t5852 * t6231;
t6200 = t5853 * t6230;
t6199 = t5854 * t6229;
t6198 = t5855 * t6228;
t6197 = t5856 * t6227;
t6196 = t6086 * t5989;
t6195 = t6086 * t5990;
t6194 = t6086 * t5991;
t6193 = t6086 * t6304;
t6192 = t6086 * t6302;
t6191 = t6086 * t6300;
t6190 = t6086 * t5992;
t6189 = t6086 * t5993;
t6188 = t6086 * t5994;
t6187 = t6086 * t6298;
t6186 = t6086 * t6296;
t6185 = t6086 * t6294;
t6172 = -t6020 * t6233 - t6058;
t6165 = -t6091 * t6153 + t6097 * t6332;
t6164 = -t6093 * t6152 + t6099 * t6333;
t6163 = -t6095 * t6151 + t6101 * t6334;
t6162 = -t6110 * t6150 + t6116 * t6335;
t6161 = -t6112 * t6149 + t6118 * t6336;
t6160 = -t6114 * t6148 + t6120 * t6337;
t6147 = t6071 * t6127 + t6126 * t6074;
t5941 = t6090 * t6278 + t6265;
t6077 = t6089 ^ 2;
t6145 = t5941 * t6233 - t5942 * t6077 + t5942;
t5943 = t6092 * t6276 + t6263;
t6144 = t5943 * t6233 - t5944 * t6077 + t5944;
t5945 = t6094 * t6274 + t6261;
t6143 = t5945 * t6233 - t5946 * t6077 + t5946;
t5947 = t6109 * t6272 + t6259;
t6142 = t5947 * t6233 - t5948 * t6077 + t5948;
t5949 = t6111 * t6270 + t6257;
t6141 = t5949 * t6233 - t5950 * t6077 + t5950;
t5951 = t6113 * t6268 + t6255;
t6140 = t5951 * t6233 - t5952 * t6077 + t5952;
t6083 = t6119 ^ 2;
t6082 = t6117 ^ 2;
t6081 = t6115 ^ 2;
t6080 = t6100 ^ 2;
t6079 = t6098 ^ 2;
t6078 = t6096 ^ 2;
t5958 = t6072 * t6133 - t6345 * t6075;
t5957 = t6072 * t6132 - t6346 * t6075;
t5956 = t6072 * t6131 - t6347 * t6075;
t5955 = t6072 * t6130 - t6348 * t6075;
t5954 = t6072 * t6129 - t6349 * t6075;
t5953 = t6072 * t6128 - t6350 * t6075;
t5940 = -t6051 * t6227 + t5994;
t5939 = -t6050 * t6228 + t5993;
t5938 = -t6049 * t6229 + t5992;
t5937 = -t6048 * t6230 + t5991;
t5936 = -t6047 * t6231 + t5990;
t5935 = -t6046 * t6232 + t5989;
t5934 = t6051 * t6077 - qJ(3,1) + t6172;
t5933 = t6050 * t6077 - qJ(3,2) + t6172;
t5932 = t6049 * t6077 - qJ(3,3) + t6172;
t5931 = t6048 * t6077 - qJ(3,4) + t6172;
t5930 = t6047 * t6077 - qJ(3,5) + t6172;
t5929 = t6046 * t6077 - qJ(3,6) + t6172;
t5928 = t6344 * t6119 + t5994;
t5927 = t6343 * t6117 + t5993;
t5926 = t6342 * t6115 + t5992;
t5900 = t6341 * t6100 + t5991;
t5899 = t6340 * t6098 + t5990;
t5898 = t6339 * t6096 + t5989;
t5874 = t5952 * t6086 + t6119 * t6294;
t5873 = t5950 * t6086 + t6117 * t6296;
t5872 = t5948 * t6086 + t6115 * t6298;
t5871 = t5946 * t6086 + t6100 * t6300;
t5870 = t5944 * t6086 + t6098 * t6302;
t5869 = t5942 * t6086 + t6096 * t6304;
t5850 = (-t6113 * t6002 + t6221) * t6077 + (-t6114 * t6295 + (-t6113 * t6255 - t6268) * t6086) * t6089 - t6221;
t5849 = (-t6111 * t6001 + t6222) * t6077 + (-t6112 * t6297 + (-t6111 * t6257 - t6270) * t6086) * t6089 - t6222;
t5848 = (-t6109 * t6000 + t6223) * t6077 + (-t6110 * t6299 + (-t6109 * t6259 - t6272) * t6086) * t6089 - t6223;
t5847 = (-t6094 * t5999 + t6224) * t6077 + (-t6095 * t6301 + (-t6094 * t6261 - t6274) * t6086) * t6089 - t6224;
t5846 = (-t6092 * t5998 + t6225) * t6077 + (-t6093 * t6303 + (-t6092 * t6263 - t6276) * t6086) * t6089 - t6225;
t5845 = (-t6090 * t5997 + t6226) * t6077 + (-t6091 * t6305 + (-t6090 * t6265 - t6278) * t6086) * t6089 - t6226;
t5844 = t6064 * t5928 + t6160 * t6070;
t5843 = t6063 * t5927 + t6161 * t6069;
t5842 = t6062 * t5926 + t6162 * t6068;
t5841 = t6070 * t5928 - t6160 * t6064;
t5840 = t6069 * t5927 - t6161 * t6063;
t5839 = t6068 * t5926 - t6162 * t6062;
t5838 = t6061 * t5900 + t6163 * t6067;
t5837 = t6060 * t5899 + t6164 * t6066;
t5836 = t6059 * t5898 + t6165 * t6065;
t5835 = t6067 * t5900 - t6163 * t6061;
t5834 = t6066 * t5899 - t6164 * t6060;
t5833 = t6065 * t5898 - t6165 * t6059;
t5832 = (-t5951 * t6064 - t6070 * t6269) * t6077 + (-t5874 * t6064 + t5940 * t6070) * t6089 + t6114 * t6249;
t5831 = (t5951 * t6070 - t6064 * t6269) * t6077 + (t5874 * t6070 + t5940 * t6064) * t6089 - t6114 * t6243;
t5830 = (-t5949 * t6063 - t6069 * t6271) * t6077 + (-t5873 * t6063 + t5939 * t6069) * t6089 + t6112 * t6250;
t5829 = (t5949 * t6069 - t6063 * t6271) * t6077 + (t5873 * t6069 + t5939 * t6063) * t6089 - t6112 * t6244;
t5828 = (-t5947 * t6062 - t6068 * t6273) * t6077 + (-t5872 * t6062 + t5938 * t6068) * t6089 + t6110 * t6251;
t5827 = (t5947 * t6068 - t6062 * t6273) * t6077 + (t5872 * t6068 + t5938 * t6062) * t6089 - t6110 * t6245;
t5826 = (-t5945 * t6061 - t6067 * t6275) * t6077 + (-t5871 * t6061 + t5937 * t6067) * t6089 + t6095 * t6252;
t5825 = (t5945 * t6067 - t6061 * t6275) * t6077 + (t5871 * t6067 + t5937 * t6061) * t6089 - t6095 * t6246;
t5824 = (-t5943 * t6060 - t6066 * t6277) * t6077 + (-t5870 * t6060 + t5936 * t6066) * t6089 + t6093 * t6253;
t5823 = (t5943 * t6066 - t6060 * t6277) * t6077 + (t5870 * t6066 + t5936 * t6060) * t6089 - t6093 * t6247;
t5822 = (-t5941 * t6059 - t6065 * t6279) * t6077 + (-t5869 * t6059 + t5935 * t6065) * t6089 + t6091 * t6254;
t5821 = (t5941 * t6065 - t6059 * t6279) * t6077 + (t5869 * t6065 + t5935 * t6059) * t6089 - t6091 * t6248;
t5814 = (t5934 * t6064 + t6070 * t6185) * t6083 + (t6064 * t6188 + t6140 * t6070) * t6119 + t6249;
t5813 = (t5934 * t6070 - t6064 * t6185) * t6083 + (-t6140 * t6064 + t6070 * t6188) * t6119 + t6243;
t5812 = (t5933 * t6063 + t6069 * t6186) * t6082 + (t6063 * t6189 + t6141 * t6069) * t6117 + t6250;
t5811 = (t5933 * t6069 - t6063 * t6186) * t6082 + (-t6141 * t6063 + t6069 * t6189) * t6117 + t6244;
t5810 = (t5932 * t6062 + t6068 * t6187) * t6081 + (t6062 * t6190 + t6142 * t6068) * t6115 + t6251;
t5809 = (t5932 * t6068 - t6062 * t6187) * t6081 + (-t6142 * t6062 + t6068 * t6190) * t6115 + t6245;
t5808 = (t5931 * t6061 + t6067 * t6191) * t6080 + (t6061 * t6194 + t6143 * t6067) * t6100 + t6252;
t5807 = (t5931 * t6067 - t6061 * t6191) * t6080 + (-t6143 * t6061 + t6067 * t6194) * t6100 + t6246;
t5806 = (t5930 * t6060 + t6066 * t6192) * t6079 + (t6060 * t6195 + t6144 * t6066) * t6098 + t6253;
t5805 = (t5930 * t6066 - t6060 * t6192) * t6079 + (-t6144 * t6060 + t6066 * t6195) * t6098 + t6247;
t5804 = (t5929 * t6059 + t6065 * t6193) * t6078 + (t6059 * t6196 + t6145 * t6065) * t6096 + t6254;
t5803 = (t5929 * t6065 - t6059 * t6193) * t6078 + (-t6145 * t6059 + t6065 * t6196) * t6096 + t6248;
t1 = [-g(1) * m(4) + (t5814 * t6312 + t5831 * t6318) * t6045 + (t5812 * t6313 + t5829 * t6319) * t6044 + (t5810 * t6314 + t5827 * t6320) * t6043 + (t5808 * t6315 + t5825 * t6321) * t6042 + (t5806 * t6316 + t5823 * t6322) * t6041 + (t5804 * t6317 + t5821 * t6323) * t6040 + (-t5836 * t6311 - t5837 * t6310 - t5838 * t6309 - t5842 * t6308 - t5843 * t6307 - t5844 * t6306) * m(3); -g(2) * m(4) + (t5813 * t6312 + t5832 * t6318) * t6045 + (t5811 * t6313 + t5830 * t6319) * t6044 + (t5809 * t6314 + t5828 * t6320) * t6043 + (t5807 * t6315 + t5826 * t6321) * t6042 + (t5805 * t6316 + t5824 * t6322) * t6041 + (t5803 * t6317 + t5822 * t6323) * t6040 + (-t5833 * t6311 - t5834 * t6310 - t5835 * t6309 - t5839 * t6308 - t5840 * t6307 - t5841 * t6306) * m(3); t5845 * t6214 + t5846 * t6213 + t5847 * t6212 + t5848 * t6211 + t5849 * t6210 + t5850 * t6209 - g(3) * m(4) + (-t5851 * t6096 * t6208 - t5852 * t6098 * t6207 - t5853 * t6100 * t6206 - t5854 * t6115 * t6205 - t5855 * t6117 * t6204 - t5856 * t6119 * t6203) * t6086 + (t5851 * t6311 + t5852 * t6310 + t5853 * t6309 + t5854 * t6308 + t5855 * t6307 + t5856 * t6306) * m(3); (-t5832 * t5920 - t5850 * t5919) * t6209 + (-t5813 * t5920 + t5919 * t6197) * t6203 + (-t5830 * t5916 - t5849 * t5915) * t6210 + (-t5811 * t5916 + t5915 * t6198) * t6204 + (-t5828 * t5912 - t5848 * t5911) * t6211 + (-t5809 * t5912 + t5911 * t6199) * t6205 + (-t5826 * t5908 - t5847 * t5907) * t6212 + (-t5807 * t5908 + t5907 * t6200) * t6206 + (-t5824 * t5904 - t5846 * t5903) * t6213 + (-t5805 * t5904 + t5903 * t6201) * t6207 + (-t5822 * t5893 - t5845 * t5894) * t6214 + (-t5803 * t5893 + t5894 * t6202) * t6208 - (-t6338 * g(2) + t6147 * g(3)) * t6076 + (t6147 * g(2) + t6338 * g(3)) * t6073 + (-(-t5841 * t5920 + t5856 * t5919) * t6306 - (-t5840 * t5916 + t5855 * t5915) * t6307 - (-t5839 * t5912 + t5854 * t5911) * t6308 - (-t5835 * t5908 + t5853 * t5907) * t6309 - (-t5834 * t5904 + t5852 * t5903) * t6310 - (-t5833 * t5893 + t5851 * t5894) * t6311) * m(3); -t6351 * g(3) + (-t6147 * t6073 - t6338 * t6076) * g(1) + ((t5814 * t5920 + t5958 * t6197) * t6312 + (t5831 * t5920 - t5850 * t5958) * t6318) * t6045 + ((t5812 * t5916 + t5957 * t6198) * t6313 + (t5829 * t5916 - t5849 * t5957) * t6319) * t6044 + ((t5810 * t5912 + t5956 * t6199) * t6314 + (t5827 * t5912 - t5848 * t5956) * t6320) * t6043 + ((t5808 * t5908 + t5955 * t6200) * t6315 + (t5825 * t5908 - t5847 * t5955) * t6321) * t6042 + ((t5806 * t5904 + t5954 * t6201) * t6316 + (t5823 * t5904 - t5846 * t5954) * t6322) * t6041 + ((t5804 * t5893 + t5953 * t6202) * t6317 + (t5821 * t5893 - t5845 * t5953) * t6323) * t6040 + (-(t5844 * t5920 + t5856 * t5958) * t6306 - (t5843 * t5916 + t5855 * t5957) * t6307 - (t5842 * t5912 + t5854 * t5956) * t6308 - (t5838 * t5908 + t5853 * t5955) * t6309 - (t5837 * t5904 + t5852 * t5954) * t6310 - (t5836 * t5893 + t5851 * t5953) * t6311) * m(3); t6351 * g(2) + (-t6073 * t6234 + (t6076 * t6126 + t6127 * t6242) * t6074 + (t6127 * t6076 - t6126 * t6242) * t6071) * g(1) + ((t5813 * t5958 + t5814 * t5919) * t6312 + (t5831 * t5919 + t5832 * t5958) * t6318) * t6045 + ((t5811 * t5957 + t5812 * t5915) * t6313 + (t5829 * t5915 + t5830 * t5957) * t6319) * t6044 + ((t5809 * t5956 + t5810 * t5911) * t6314 + (t5827 * t5911 + t5828 * t5956) * t6320) * t6043 + ((t5807 * t5955 + t5808 * t5907) * t6315 + (t5825 * t5907 + t5826 * t5955) * t6321) * t6042 + ((t5805 * t5954 + t5806 * t5903) * t6316 + (t5823 * t5903 + t5824 * t5954) * t6322) * t6041 + ((t5803 * t5953 + t5804 * t5894) * t6317 + (t5821 * t5894 + t5822 * t5953) * t6323) * t6040 + (-(t5841 * t5958 + t5844 * t5919) * t6306 - (t5840 * t5957 + t5843 * t5915) * t6307 - (t5839 * t5956 + t5842 * t5911) * t6308 - (t5835 * t5955 + t5838 * t5907) * t6309 - (t5834 * t5954 + t5837 * t5903) * t6310 - (t5833 * t5953 + t5836 * t5894) * t6311) * m(3);];
taugX  = t1;
