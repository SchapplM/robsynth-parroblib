% Calculate inertia matrix for parallel robot
% P6RRPRRR14V4G7A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,alpha3,alpha4,d1,d4,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% rSges [4x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Icges [4x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
%
% Output:
% MX [6x6]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 05:41
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1(xP, qJ, legFrame, ...
  koppelP, pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(7,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: pkin has to be [7x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: m has to be [4x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [4,3]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: rSges has to be [4x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [4 6]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: Icges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp1: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-03 23:04:47
% EndTime: 2022-11-03 23:05:31
% DurationCPUTime: 47.03s
% Computational Cost: add. (219818->1498), mult. (405738->2245), div. (9990->12), fcn. (326604->48), ass. (0->741)
t2990 = cos(pkin(4)) * pkin(6);
t2983 = t2990 + qJ(3,1);
t2976 = 0.1e1 / t2983;
t3071 = sin(qJ(2,1));
t3037 = sin(pkin(7));
t3040 = cos(pkin(7));
t3365 = sin(pkin(4)) * pkin(6);
t2919 = t3040 * pkin(2) + t3037 * t3365 + pkin(1);
t3077 = cos(qJ(2,1));
t3222 = t3077 * t2919;
t3039 = sin(pkin(3));
t2936 = -t3037 * pkin(2) + t3040 * t3365;
t3042 = cos(pkin(3));
t3296 = t2936 * t3042;
t3407 = -t3039 * t2983 - t3296;
t3401 = -t3407 * t3071 + t3222;
t3422 = 0.1e1 / t3401;
t3433 = t3422 * t2976;
t2982 = t2990 + qJ(3,2);
t2975 = 0.1e1 / t2982;
t3069 = sin(qJ(2,2));
t3075 = cos(qJ(2,2));
t3224 = t3075 * t2919;
t3406 = -t3039 * t2982 - t3296;
t3400 = -t3406 * t3069 + t3224;
t3423 = 0.1e1 / t3400;
t3432 = t3423 * t2975;
t2981 = t2990 + qJ(3,3);
t2974 = 0.1e1 / t2981;
t3067 = sin(qJ(2,3));
t3073 = cos(qJ(2,3));
t3226 = t3073 * t2919;
t3405 = -t3039 * t2981 - t3296;
t3399 = -t3405 * t3067 + t3226;
t3424 = 0.1e1 / t3399;
t3431 = t3424 * t2974;
t2980 = t2990 + qJ(3,4);
t2972 = 0.1e1 / t2980;
t3053 = sin(qJ(2,4));
t3059 = cos(qJ(2,4));
t3231 = t3059 * t2919;
t3404 = -t3039 * t2980 - t3296;
t3398 = -t3404 * t3053 + t3231;
t3425 = 0.1e1 / t3398;
t3430 = t3425 * t2972;
t2979 = t2990 + qJ(3,5);
t2971 = 0.1e1 / t2979;
t3051 = sin(qJ(2,5));
t3057 = cos(qJ(2,5));
t3233 = t3057 * t2919;
t3403 = -t3039 * t2979 - t3296;
t3397 = -t3403 * t3051 + t3233;
t3426 = 0.1e1 / t3397;
t3429 = t3426 * t2971;
t2978 = t2990 + qJ(3,6);
t2970 = 0.1e1 / t2978;
t3049 = sin(qJ(2,6));
t3055 = cos(qJ(2,6));
t3235 = t3055 * t2919;
t3402 = -t3039 * t2978 - t3296;
t3396 = -t3402 * t3049 + t3235;
t3427 = 0.1e1 / t3396;
t3428 = t3427 * t2970;
t3080 = xP(5);
t3020 = sin(t3080);
t3082 = rSges(4,3);
t3083 = rSges(4,2);
t2955 = m(4) * t3082 * t3083 - Icges(4,6);
t3084 = rSges(4,1);
t3362 = m(4) * t3084;
t2956 = t3082 * t3362 - Icges(4,5);
t3079 = xP(6);
t3019 = sin(t3079);
t3022 = cos(t3079);
t3139 = t3019 * t2955 - t2956 * t3022;
t3421 = t3139 * t3020;
t3026 = t3040 ^ 2;
t3098 = rSges(3,2) ^ 2;
t3100 = rSges(3,1) ^ 2;
t3166 = (-t3098 + t3100) * m(3) - Icges(3,1) + Icges(3,2);
t2938 = t3166 * t3026;
t3385 = m(3) * rSges(3,2);
t2988 = rSges(3,1) * t3385 - Icges(3,4);
t3220 = pkin(1) * t3385;
t3386 = m(3) * rSges(3,1);
t3420 = Icges(3,4) + (pkin(1) * t3037 - rSges(3,2)) * t3386 + 0.2e1 * t2988 * t3026 - (-t3037 * t3166 - t3220) * t3040;
t3023 = cos(t3080);
t3085 = koppelP(6,3);
t3091 = koppelP(6,1);
t3389 = koppelP(6,2);
t3413 = t3019 * t3389 - t3022 * t3091;
t2879 = t3413 * t3020 + t3023 * t3085;
t2926 = t3019 * t3091 + t3022 * t3389;
t3081 = xP(4);
t3021 = sin(t3081);
t3024 = cos(t3081);
t2782 = t3021 * t2879 - t3024 * t2926;
t2781 = t2879 * t3024 + t3021 * t2926;
t3086 = koppelP(5,3);
t3092 = koppelP(5,1);
t3390 = koppelP(5,2);
t3412 = t3019 * t3390 - t3022 * t3092;
t2881 = t3412 * t3020 + t3023 * t3086;
t2927 = t3019 * t3092 + t3022 * t3390;
t2791 = t2881 * t3021 - t3024 * t2927;
t2792 = t2881 * t3024 + t3021 * t2927;
t3087 = koppelP(4,3);
t3093 = koppelP(4,1);
t3391 = koppelP(4,2);
t3411 = t3019 * t3391 - t3022 * t3093;
t2883 = t3411 * t3020 + t3023 * t3087;
t2928 = t3019 * t3093 + t3022 * t3391;
t2795 = t2883 * t3021 - t3024 * t2928;
t2796 = t2883 * t3024 + t3021 * t2928;
t3088 = koppelP(3,3);
t3094 = koppelP(3,1);
t3392 = koppelP(3,2);
t3410 = t3019 * t3392 - t3022 * t3094;
t2885 = t3410 * t3020 + t3023 * t3088;
t2929 = t3019 * t3094 + t3022 * t3392;
t2799 = t2885 * t3021 - t3024 * t2929;
t2800 = t2885 * t3024 + t3021 * t2929;
t3089 = koppelP(2,3);
t3095 = koppelP(2,1);
t3393 = koppelP(2,2);
t3409 = t3019 * t3393 - t3022 * t3095;
t2887 = t3409 * t3020 + t3023 * t3089;
t2930 = t3019 * t3095 + t3022 * t3393;
t2803 = t2887 * t3021 - t3024 * t2930;
t2804 = t2887 * t3024 + t3021 * t2930;
t3090 = koppelP(1,3);
t3096 = koppelP(1,1);
t3394 = koppelP(1,2);
t3408 = t3019 * t3394 - t3022 * t3096;
t2889 = t3408 * t3020 + t3023 * t3090;
t2931 = t3019 * t3096 + t3022 * t3394;
t2807 = t2889 * t3021 - t3024 * t2931;
t2808 = t2889 * t3024 + t3021 * t2931;
t3050 = sin(qJ(1,6));
t3056 = cos(qJ(1,6));
t3252 = t3039 * t2936;
t3146 = -t2978 * t3042 + t3252;
t2741 = t3050 * t3396 + t3146 * t3056;
t3052 = sin(qJ(1,5));
t3058 = cos(qJ(1,5));
t3145 = -t2979 * t3042 + t3252;
t2742 = t3052 * t3397 + t3145 * t3058;
t3054 = sin(qJ(1,4));
t3060 = cos(qJ(1,4));
t3144 = -t2980 * t3042 + t3252;
t2743 = t3054 * t3398 + t3144 * t3060;
t3068 = sin(qJ(1,3));
t3074 = cos(qJ(1,3));
t3143 = -t2981 * t3042 + t3252;
t2744 = t3068 * t3399 + t3143 * t3074;
t3070 = sin(qJ(1,2));
t3076 = cos(qJ(1,2));
t3142 = -t2982 * t3042 + t3252;
t2745 = t3070 * t3400 + t3142 * t3076;
t3072 = sin(qJ(1,1));
t3078 = cos(qJ(1,1));
t3141 = -t2983 * t3042 + t3252;
t2746 = t3072 * t3401 + t3141 * t3078;
t2957 = (t3083 * t3362 - Icges(4,4));
t3419 = -2 * t2957;
t2992 = t3023 ^ 2;
t3418 = -0.2e1 * t2992;
t2917 = t3019 * t3083 - t3022 * t3084;
t3417 = (t2917 * t3023 - t3020 * t3082) * m(4);
t2910 = t3050 * t2936;
t3234 = t3056 * t2978;
t2847 = t3049 * t3234 - t2910;
t2911 = t3052 * t2936;
t3232 = t3058 * t2979;
t2849 = t3051 * t3232 - t2911;
t2912 = t3054 * t2936;
t3230 = t3060 * t2980;
t2851 = t3053 * t3230 - t2912;
t2913 = t3068 * t2936;
t3225 = t3074 * t2981;
t2853 = t3067 * t3225 - t2913;
t2914 = t3070 * t2936;
t3223 = t3076 * t2982;
t2855 = t3069 * t3223 - t2914;
t2915 = t3072 * t2936;
t3221 = t3078 * t2983;
t2857 = t3071 * t3221 - t2915;
t3278 = t2988 * t3037;
t3415 = 0.2e1 * t3040 * t3278 - t2938;
t3027 = t3042 ^ 2;
t3245 = t3039 * t3042;
t3159 = -t2936 * t3245 - t2990;
t2826 = t2978 * t3027 - qJ(3,6) + t3159;
t3061 = legFrame(6,2);
t2993 = sin(t3061);
t2999 = cos(t3061);
t3028 = t3055 ^ 2;
t3238 = t3050 * t2978;
t3294 = t2936 * t3056;
t2846 = t3049 * t3294 + t3238;
t3114 = t2846 * t3245 - t2847 * t3027 + t2847;
t3297 = t2919 * t3039;
t3188 = t3056 * t3297;
t2900 = t2919 * t3049;
t3191 = t3039 * t2900;
t2687 = (t2826 * t2999 - t2993 * t3188) * t3028 + (-t3114 * t2993 + t2999 * t3191) * t3055 + t2999 * t2978;
t3244 = t3039 * t3055;
t3208 = t2741 * t3244;
t2633 = (-t2687 * t2781 + t2782 * t3208) * t3428;
t2754 = t2847 * t3039 + t3056 * t3235;
t2840 = -t2978 * t3244 + t2900;
t3295 = t2936 * t3055;
t2706 = (-t2846 * t2993 - t2999 * t3295) * t3027 + (-t2754 * t2993 + t2999 * t2840) * t3042 + t2993 * t3238;
t2735 = (-t3049 * t2910 + t3234) * t3027 + (-t3050 * t3235 + (-t3049 * t3238 - t3294) * t3039) * t3042 - t3234;
t2642 = (-t2706 * t2781 - t2735 * t2782) * t3428;
t2786 = t3402 * t3055 + t2900;
t3152 = -t3050 * t3146 + t3056 * t3396;
t2717 = t2999 * t2786 - t3152 * t2993;
t2669 = (-t2717 * t2781 + t2741 * t2782) * t2970;
t3034 = qJ(3,6) + rSges(3,3);
t3371 = m(3) * t3034;
t2958 = rSges(3,2) * t3371 - Icges(3,6);
t2961 = rSges(3,1) * t3371 - Icges(3,5);
t2973 = -0.2e1 * t3037 * t3220;
t3099 = rSges(2,2) ^ 2;
t3101 = rSges(2,1) ^ 2;
t3359 = Icges(2,1) + Icges(3,2);
t3115 = (t3027 + 0.1e1) * t2938 + Icges(2,2) + Icges(3,3) + t2973 + (-t3099 + t3101) * m(2) - t3359;
t3116 = -m(2) * rSges(2,1) * rSges(2,2) - t3420 * t3042 + Icges(2,4);
t3122 = pkin(1) * t3371 - t2958 * t3037 + t2961 * t3040;
t3123 = Icges(1,3) + (rSges(2,3) ^ 2 + t3099) * m(2) + (rSges(1,1) ^ 2 + rSges(1,2) ^ 2) * m(1) + t3359 + t3415;
t3358 = Icges(3,1) - Icges(3,3);
t3158 = (rSges(3,1) + t3034) * (-rSges(3,1) + t3034) * m(3) + t3358;
t3211 = 0.2e1 * t3245;
t3169 = t3037 * t3211;
t3219 = 0.2e1 * pkin(1) * t3386 - 0.2e1 * t3278;
t3172 = -0.2e1 * t3027 * t3278 + t3219;
t2681 = ((t2958 * t3211 + t3172) * t3040 + t3158 * t3027 + t2961 * t3169 + (t3098 - (pkin(1) + t3034) * (-pkin(1) + t3034)) * m(3) + t3115) * t3028 + 0.2e1 * t3049 * (t3122 * t3039 + t3116) * t3055 + (t3034 ^ 2 + t3100) * m(3) + t3123;
t3387 = m(2) * rSges(2,3);
t2753 = rSges(2,1) * t3387 + t3420 * t3039 - Icges(2,5);
t2820 = -t3158 + t3415;
t2893 = -t2958 * t3040 - t2961 * t3037;
t3167 = -rSges(2,2) * t3387 + Icges(2,6);
t3388 = 0.2e1 * t3027;
t2699 = (-t3122 * t3042 - t2753) * t3049 + (-t2820 * t3245 + t2893 * t3388 - t2893 + t3167) * t3055;
t2948 = t3037 * rSges(3,1) + t3040 * rSges(3,2);
t2940 = t3040 * rSges(3,1) - t3037 * rSges(3,2) + pkin(1);
t3281 = t2940 * t3042;
t2834 = -t3049 * t2948 + t3055 * t3281;
t3384 = m(3) * t2834;
t2465 = t2633 * t2699 + t2642 * t2681 - t2669 * t3384;
t2827 = t2979 * t3027 - qJ(3,5) + t3159;
t3062 = legFrame(5,2);
t2994 = sin(t3062);
t3000 = cos(t3062);
t3029 = t3057 ^ 2;
t3237 = t3052 * t2979;
t3292 = t2936 * t3058;
t2848 = t3051 * t3292 + t3237;
t3113 = t2848 * t3245 - t2849 * t3027 + t2849;
t3187 = t3058 * t3297;
t2901 = t2919 * t3051;
t3190 = t3039 * t2901;
t2689 = (t2827 * t3000 - t2994 * t3187) * t3029 + (-t3113 * t2994 + t3000 * t3190) * t3057 + t3000 * t2979;
t3243 = t3039 * t3057;
t3206 = t2742 * t3243;
t2634 = (-t2689 * t2792 + t2791 * t3206) * t3429;
t2755 = t2849 * t3039 + t3058 * t3233;
t2841 = -t2979 * t3243 + t2901;
t3293 = t2936 * t3057;
t2708 = (-t2848 * t2994 - t3000 * t3293) * t3027 + (-t2755 * t2994 + t3000 * t2841) * t3042 + t2994 * t3237;
t2736 = (-t3051 * t2911 + t3232) * t3027 + (-t3052 * t3233 + (-t3051 * t3237 - t3292) * t3039) * t3042 - t3232;
t2643 = (-t2708 * t2792 - t2736 * t2791) * t3429;
t2787 = t3403 * t3057 + t2901;
t3151 = -t3052 * t3145 + t3058 * t3397;
t2718 = t3000 * t2787 - t3151 * t2994;
t2670 = (-t2718 * t2792 + t2742 * t2791) * t2971;
t3035 = qJ(3,5) + rSges(3,3);
t3370 = m(3) * t3035;
t2959 = rSges(3,2) * t3370 - Icges(3,6);
t2962 = rSges(3,1) * t3370 - Icges(3,5);
t3121 = pkin(1) * t3370 - t2959 * t3037 + t2962 * t3040;
t3157 = (rSges(3,1) + t3035) * (-rSges(3,1) + t3035) * m(3) + t3358;
t2682 = ((t2959 * t3211 + t3172) * t3040 + t3157 * t3027 + t2962 * t3169 + (t3098 - (pkin(1) + t3035) * (-pkin(1) + t3035)) * m(3) + t3115) * t3029 + 0.2e1 * t3051 * (t3121 * t3039 + t3116) * t3057 + (t3035 ^ 2 + t3100) * m(3) + t3123;
t2821 = -t3157 + t3415;
t2894 = -t2959 * t3040 - t2962 * t3037;
t2700 = (-t3121 * t3042 - t2753) * t3051 + (-t2821 * t3245 + t2894 * t3388 - t2894 + t3167) * t3057;
t2835 = -t3051 * t2948 + t3057 * t3281;
t3383 = m(3) * t2835;
t2466 = t2634 * t2700 + t2643 * t2682 - t2670 * t3383;
t2828 = t2980 * t3027 - qJ(3,4) + t3159;
t3063 = legFrame(4,2);
t2995 = sin(t3063);
t3001 = cos(t3063);
t3030 = t3059 ^ 2;
t3236 = t3054 * t2980;
t3290 = t2936 * t3060;
t2850 = t3053 * t3290 + t3236;
t3112 = t2850 * t3245 - t2851 * t3027 + t2851;
t3186 = t3060 * t3297;
t2902 = t2919 * t3053;
t3189 = t3039 * t2902;
t2691 = (t2828 * t3001 - t2995 * t3186) * t3030 + (-t3112 * t2995 + t3001 * t3189) * t3059 + t3001 * t2980;
t3242 = t3039 * t3059;
t3204 = t2743 * t3242;
t2635 = (-t2691 * t2796 + t2795 * t3204) * t3430;
t2756 = t2851 * t3039 + t3060 * t3231;
t2842 = -t2980 * t3242 + t2902;
t3291 = t2936 * t3059;
t2710 = (-t2850 * t2995 - t3001 * t3291) * t3027 + (-t2756 * t2995 + t3001 * t2842) * t3042 + t2995 * t3236;
t2737 = (-t3053 * t2912 + t3230) * t3027 + (-t3054 * t3231 + (-t3053 * t3236 - t3290) * t3039) * t3042 - t3230;
t2644 = (-t2710 * t2796 - t2737 * t2795) * t3430;
t2788 = t3404 * t3059 + t2902;
t3150 = -t3054 * t3144 + t3060 * t3398;
t2719 = t3001 * t2788 - t3150 * t2995;
t2671 = (-t2719 * t2796 + t2743 * t2795) * t2972;
t3036 = qJ(3,4) + rSges(3,3);
t3369 = m(3) * t3036;
t2960 = rSges(3,2) * t3369 - Icges(3,6);
t2963 = rSges(3,1) * t3369 - Icges(3,5);
t3120 = pkin(1) * t3369 - t2960 * t3037 + t2963 * t3040;
t3156 = (rSges(3,1) + t3036) * (-rSges(3,1) + t3036) * m(3) + t3358;
t2683 = ((t2960 * t3211 + t3172) * t3040 + t3156 * t3027 + t2963 * t3169 + (t3098 - (pkin(1) + t3036) * (-pkin(1) + t3036)) * m(3) + t3115) * t3030 + 0.2e1 * t3053 * (t3120 * t3039 + t3116) * t3059 + (t3036 ^ 2 + t3100) * m(3) + t3123;
t2822 = -t3156 + t3415;
t2895 = -t2960 * t3040 - t2963 * t3037;
t2701 = (-t3120 * t3042 - t2753) * t3053 + (-t2822 * t3245 + t2895 * t3388 - t2895 + t3167) * t3059;
t2836 = -t3053 * t2948 + t3059 * t3281;
t3382 = m(3) * t2836;
t2467 = t2635 * t2701 + t2644 * t2683 - t2671 * t3382;
t2829 = t2981 * t3027 - qJ(3,3) + t3159;
t3064 = legFrame(3,2);
t2996 = sin(t3064);
t3002 = cos(t3064);
t3031 = t3073 ^ 2;
t3229 = t3068 * t2981;
t3288 = t2936 * t3074;
t2852 = t3067 * t3288 + t3229;
t3111 = t2852 * t3245 - t2853 * t3027 + t2853;
t3182 = t3074 * t3297;
t2904 = t2919 * t3067;
t3185 = t3039 * t2904;
t2693 = (t2829 * t3002 - t2996 * t3182) * t3031 + (-t3111 * t2996 + t3002 * t3185) * t3073 + t3002 * t2981;
t3241 = t3039 * t3073;
t3202 = t2744 * t3241;
t2636 = (-t2693 * t2800 + t2799 * t3202) * t3431;
t2757 = t2853 * t3039 + t3074 * t3226;
t2843 = -t2981 * t3241 + t2904;
t3289 = t2936 * t3073;
t2712 = (-t2852 * t2996 - t3002 * t3289) * t3027 + (-t2757 * t2996 + t3002 * t2843) * t3042 + t2996 * t3229;
t2738 = (-t3067 * t2913 + t3225) * t3027 + (-t3068 * t3226 + (-t3067 * t3229 - t3288) * t3039) * t3042 - t3225;
t2648 = (-t2712 * t2800 - t2738 * t2799) * t3431;
t2814 = t3405 * t3073 + t2904;
t3149 = -t3068 * t3143 + t3074 * t3399;
t2723 = t3002 * t2814 - t3149 * t2996;
t2672 = (-t2723 * t2800 + t2744 * t2799) * t2974;
t3043 = qJ(3,3) + rSges(3,3);
t3368 = m(3) * t3043;
t2964 = rSges(3,2) * t3368 - Icges(3,6);
t2967 = rSges(3,1) * t3368 - Icges(3,5);
t3119 = pkin(1) * t3368 - t2964 * t3037 + t2967 * t3040;
t3155 = (rSges(3,1) + t3043) * (-rSges(3,1) + t3043) * m(3) + t3358;
t2684 = ((t2964 * t3211 + t3172) * t3040 + t3155 * t3027 + t2967 * t3169 + (t3098 - (pkin(1) + t3043) * (-pkin(1) + t3043)) * m(3) + t3115) * t3031 + 0.2e1 * t3067 * (t3119 * t3039 + t3116) * t3073 + (t3043 ^ 2 + t3100) * m(3) + t3123;
t2823 = -t3155 + t3415;
t2896 = -t2964 * t3040 - t2967 * t3037;
t2702 = (-t3119 * t3042 - t2753) * t3067 + (-t2823 * t3245 + t2896 * t3388 - t2896 + t3167) * t3073;
t2837 = -t3067 * t2948 + t3073 * t3281;
t3381 = m(3) * t2837;
t2468 = t2636 * t2702 + t2648 * t2684 - t2672 * t3381;
t2830 = t2982 * t3027 - qJ(3,2) + t3159;
t3065 = legFrame(2,2);
t2997 = sin(t3065);
t3003 = cos(t3065);
t3032 = t3075 ^ 2;
t3228 = t3070 * t2982;
t3286 = t2936 * t3076;
t2854 = t3069 * t3286 + t3228;
t3110 = t2854 * t3245 - t2855 * t3027 + t2855;
t3181 = t3076 * t3297;
t2905 = t2919 * t3069;
t3184 = t3039 * t2905;
t2695 = (t2830 * t3003 - t2997 * t3181) * t3032 + (-t3110 * t2997 + t3003 * t3184) * t3075 + t3003 * t2982;
t3240 = t3039 * t3075;
t3200 = t2745 * t3240;
t2637 = (-t2695 * t2804 + t2803 * t3200) * t3432;
t2758 = t2855 * t3039 + t3076 * t3224;
t2844 = -t2982 * t3240 + t2905;
t3287 = t2936 * t3075;
t2714 = (-t2854 * t2997 - t3003 * t3287) * t3027 + (-t2758 * t2997 + t3003 * t2844) * t3042 + t2997 * t3228;
t2739 = (-t3069 * t2914 + t3223) * t3027 + (-t3070 * t3224 + (-t3069 * t3228 - t3286) * t3039) * t3042 - t3223;
t2649 = (-t2714 * t2804 - t2739 * t2803) * t3432;
t2815 = t3406 * t3075 + t2905;
t3148 = -t3070 * t3142 + t3076 * t3400;
t2724 = t3003 * t2815 - t3148 * t2997;
t2673 = (-t2724 * t2804 + t2745 * t2803) * t2975;
t3044 = qJ(3,2) + rSges(3,3);
t3367 = m(3) * t3044;
t2965 = rSges(3,2) * t3367 - Icges(3,6);
t2968 = rSges(3,1) * t3367 - Icges(3,5);
t3118 = pkin(1) * t3367 - t2965 * t3037 + t2968 * t3040;
t3154 = (rSges(3,1) + t3044) * (-rSges(3,1) + t3044) * m(3) + t3358;
t2685 = ((t2965 * t3211 + t3172) * t3040 + t3154 * t3027 + t2968 * t3169 + (t3098 - (pkin(1) + t3044) * (-pkin(1) + t3044)) * m(3) + t3115) * t3032 + 0.2e1 * t3069 * (t3118 * t3039 + t3116) * t3075 + (t3044 ^ 2 + t3100) * m(3) + t3123;
t2824 = -t3154 + t3415;
t2897 = -t2965 * t3040 - t2968 * t3037;
t2703 = (-t3118 * t3042 - t2753) * t3069 + (-t2824 * t3245 + t2897 * t3388 - t2897 + t3167) * t3075;
t2838 = -t3069 * t2948 + t3075 * t3281;
t3380 = m(3) * t2838;
t2469 = t2637 * t2703 + t2649 * t2685 - t2673 * t3380;
t2831 = t2983 * t3027 - qJ(3,1) + t3159;
t3066 = legFrame(1,2);
t2998 = sin(t3066);
t3004 = cos(t3066);
t3033 = t3077 ^ 2;
t3227 = t3072 * t2983;
t3284 = t2936 * t3078;
t2856 = t3071 * t3284 + t3227;
t3109 = t2856 * t3245 - t2857 * t3027 + t2857;
t3180 = t3078 * t3297;
t2906 = t2919 * t3071;
t3183 = t3039 * t2906;
t2697 = (t2831 * t3004 - t2998 * t3180) * t3033 + (-t3109 * t2998 + t3004 * t3183) * t3077 + t3004 * t2983;
t3239 = t3039 * t3077;
t3198 = t2746 * t3239;
t2638 = (-t2697 * t2808 + t2807 * t3198) * t3433;
t2759 = t2857 * t3039 + t3078 * t3222;
t2845 = -t2983 * t3239 + t2906;
t3285 = t2936 * t3077;
t2716 = (-t2856 * t2998 - t3004 * t3285) * t3027 + (-t2759 * t2998 + t3004 * t2845) * t3042 + t2998 * t3227;
t2740 = (-t3071 * t2915 + t3221) * t3027 + (-t3072 * t3222 + (-t3071 * t3227 - t3284) * t3039) * t3042 - t3221;
t2650 = (-t2716 * t2808 - t2740 * t2807) * t3433;
t2816 = t3407 * t3077 + t2906;
t3147 = -t3072 * t3141 + t3078 * t3401;
t2725 = t3004 * t2816 - t3147 * t2998;
t2674 = (-t2725 * t2808 + t2746 * t2807) * t2976;
t3045 = qJ(3,1) + rSges(3,3);
t3366 = m(3) * t3045;
t2966 = rSges(3,2) * t3366 - Icges(3,6);
t2969 = rSges(3,1) * t3366 - Icges(3,5);
t3117 = pkin(1) * t3366 - t2966 * t3037 + t2969 * t3040;
t3153 = (rSges(3,1) + t3045) * (-rSges(3,1) + t3045) * m(3) + t3358;
t2686 = ((t2966 * t3211 + t3172) * t3040 + t3153 * t3027 + t2969 * t3169 + (t3098 - (pkin(1) + t3045) * (-pkin(1) + t3045)) * m(3) + t3115) * t3033 + 0.2e1 * t3071 * (t3117 * t3039 + t3116) * t3077 + (t3045 ^ 2 + t3100) * m(3) + t3123;
t2825 = -t3153 + t3415;
t2898 = -t2966 * t3040 - t2969 * t3037;
t2704 = (-t3117 * t3042 - t2753) * t3071 + (-t2825 * t3245 + t2898 * t3388 - t2898 + t3167) * t3077;
t2839 = -t3071 * t2948 + t3077 * t3281;
t3379 = m(3) * t2839;
t2470 = t2638 * t2704 + t2650 * t2686 - t2674 * t3379;
t3138 = t2938 + t3219 * t3040 + Icges(3,1) + Icges(2,3) + t2973 + (t3099 + t3101) * m(2);
t3171 = rSges(3,3) ^ 2 + pkin(1) ^ 2 + t3098;
t3395 = 0.2e1 * rSges(3,3);
t2729 = t2820 * t3027 + t2893 * t3211 + ((t3395 + qJ(3,6)) * qJ(3,6) + t3171) * m(3) + t3138;
t3282 = t2940 * t3039;
t3210 = m(3) * t3282;
t2483 = t2633 * t2729 + t2642 * t2699 - t2669 * t3210;
t2730 = t2821 * t3027 + t2894 * t3211 + ((t3395 + qJ(3,5)) * qJ(3,5) + t3171) * m(3) + t3138;
t2484 = t2634 * t2730 + t2643 * t2700 - t2670 * t3210;
t2731 = t2822 * t3027 + t2895 * t3211 + ((t3395 + qJ(3,4)) * qJ(3,4) + t3171) * m(3) + t3138;
t2485 = t2635 * t2731 + t2644 * t2701 - t2671 * t3210;
t2732 = t2823 * t3027 + t2896 * t3211 + ((t3395 + qJ(3,3)) * qJ(3,3) + t3171) * m(3) + t3138;
t2486 = t2636 * t2732 + t2648 * t2702 - t2672 * t3210;
t2733 = t2824 * t3027 + t2897 * t3211 + ((t3395 + qJ(3,2)) * qJ(3,2) + t3171) * m(3) + t3138;
t2487 = t2637 * t2733 + t2649 * t2703 - t2673 * t3210;
t2734 = t2825 * t3027 + t2898 * t3211 + ((t3395 + qJ(3,1)) * qJ(3,1) + t3171) * m(3) + t3138;
t2488 = t2638 * t2734 + t2650 * t2704 - t2674 * t3210;
t2534 = (-t2633 * t3282 - t2642 * t2834 + t2669) * m(3);
t2535 = (-t2634 * t3282 - t2643 * t2835 + t2670) * m(3);
t2536 = (-t2635 * t3282 - t2644 * t2836 + t2671) * m(3);
t2540 = (-t2636 * t3282 - t2648 * t2837 + t2672) * m(3);
t2541 = (-t2637 * t3282 - t2649 * t2838 + t2673) * m(3);
t2542 = (-t2638 * t3282 - t2650 * t2839 + t2674) * m(3);
t3047 = t3083 ^ 2;
t3048 = t3084 ^ 2;
t2949 = Icges(4,3) + m(4) * (t3047 + t3048);
t3414 = t2465 * t2642 + t2466 * t2643 + t2467 * t2644 + t2468 * t2648 + t2469 * t2649 + t2470 * t2650 + t2483 * t2633 + t2484 * t2634 + t2485 * t2635 + t2486 * t2636 + t2487 * t2637 + t2488 * t2638 + t2534 * t2669 + t2535 * t2670 + t2536 * t2671 + t2540 * t2672 + t2541 * t2673 + t2542 * t2674 + t2949;
t3378 = m(3) * t2940;
t3377 = m(3) * t2970;
t3376 = m(3) * t2971;
t3375 = m(3) * t2972;
t3374 = m(3) * t2974;
t3373 = m(3) * t2975;
t3372 = m(3) * t2976;
t3363 = m(4) * t2917;
t3168 = t2917 * t3020 + t3023 * t3082;
t2918 = t3019 * t3084 + t3022 * t3083;
t3273 = t3021 * t2918;
t3361 = (t3024 * t3168 + t3273) * m(4);
t3357 = t2687 * t3427;
t2688 = (t2993 * t2826 + t2999 * t3188) * t3028 + (t2993 * t3191 + t3114 * t2999) * t3055 + t2993 * t2978;
t3356 = t2688 * t3427;
t3355 = t2689 * t3426;
t2690 = (t2994 * t2827 + t3000 * t3187) * t3029 + (t2994 * t3190 + t3113 * t3000) * t3057 + t2994 * t2979;
t3354 = t2690 * t3426;
t3353 = t2691 * t3425;
t2692 = (t2995 * t2828 + t3001 * t3186) * t3030 + (t2995 * t3189 + t3112 * t3001) * t3059 + t2995 * t2980;
t3352 = t2692 * t3425;
t3351 = t2693 * t3424;
t2694 = (t2996 * t2829 + t3002 * t3182) * t3031 + (t2996 * t3185 + t3111 * t3002) * t3073 + t2996 * t2981;
t3350 = t2694 * t3424;
t3349 = t2695 * t3423;
t2696 = (t2997 * t2830 + t3003 * t3181) * t3032 + (t2997 * t3184 + t3110 * t3003) * t3075 + t2997 * t2982;
t3348 = t2696 * t3423;
t3347 = t2697 * t3422;
t2698 = (t2998 * t2831 + t3004 * t3180) * t3033 + (t2998 * t3183 + t3109 * t3004) * t3077 + t2998 * t2983;
t3346 = t2698 * t3422;
t3345 = t2699 * t3427;
t3344 = t2700 * t3426;
t3343 = t2701 * t3425;
t3342 = t2702 * t3424;
t3341 = t2703 * t3423;
t3340 = t2704 * t3422;
t2705 = (t2846 * t2999 - t2993 * t3295) * t3027 + (t2754 * t2999 + t2993 * t2840) * t3042 - t2999 * t3238;
t3339 = t2705 * t3427;
t3338 = t2706 * t3427;
t2707 = (t2848 * t3000 - t2994 * t3293) * t3027 + (t2755 * t3000 + t2994 * t2841) * t3042 - t3000 * t3237;
t3337 = t2707 * t3426;
t3336 = t2708 * t3426;
t2709 = (t2850 * t3001 - t2995 * t3291) * t3027 + (t2756 * t3001 + t2995 * t2842) * t3042 - t3001 * t3236;
t3335 = t2709 * t3425;
t3334 = t2710 * t3425;
t2711 = (t2852 * t3002 - t2996 * t3289) * t3027 + (t2757 * t3002 + t2996 * t2843) * t3042 - t3002 * t3229;
t3333 = t2711 * t3424;
t3332 = t2712 * t3424;
t2713 = (t2854 * t3003 - t2997 * t3287) * t3027 + (t2758 * t3003 + t2997 * t2844) * t3042 - t3003 * t3228;
t3331 = t2713 * t3423;
t3330 = t2714 * t3423;
t2715 = (t2856 * t3004 - t2998 * t3285) * t3027 + (t2759 * t3004 + t2998 * t2845) * t3042 - t3004 * t3227;
t3329 = t2715 * t3422;
t3328 = t2716 * t3422;
t3327 = t2729 * t3427;
t3326 = t2730 * t3426;
t3325 = t2731 * t3425;
t3324 = t2732 * t3424;
t3323 = t2733 * t3423;
t3322 = t2734 * t3422;
t3321 = t2735 * t3427;
t3320 = t2736 * t3426;
t3319 = t2737 * t3425;
t3318 = t2738 * t3424;
t3317 = t2739 * t3423;
t3316 = t2740 * t3422;
t3315 = t3427 * t2834;
t3313 = t3426 * t2835;
t3311 = t3425 * t2836;
t3309 = t3424 * t2837;
t3307 = t3423 * t2838;
t3305 = t3422 * t2839;
t3283 = t2940 * t3039 ^ 2;
t3280 = t2957 * t3020;
t3277 = t3019 * t2956;
t3276 = t3019 * t3022;
t3275 = t3020 * t3021;
t3274 = t3020 * t3024;
t3260 = t3024 * t2918;
t3253 = t3024 * t2957;
t3046 = t3082 ^ 2;
t3218 = (t3046 - t3047) * m(4) + Icges(4,2) - Icges(4,3);
t3209 = t2741 * t3427 * t3055;
t3207 = t2742 * t3426 * t3057;
t3205 = t2743 * t3425 * t3059;
t3203 = t2744 * t3424 * t3073;
t3201 = t2745 * t3423 * t3075;
t3199 = t2746 * t3422 * t3077;
t3197 = t3427 * t3282;
t3196 = t3426 * t3282;
t3195 = t3425 * t3282;
t3194 = t3424 * t3282;
t3193 = t3423 * t3282;
t3192 = t3422 * t3282;
t3179 = t2957 * t3276;
t3165 = t2970 * t3209;
t3164 = t2971 * t3207;
t3163 = t2972 * t3205;
t3162 = t2974 * t3203;
t3161 = t2975 * t3201;
t3160 = t2976 * t3199;
t3140 = t2955 * t3022 + t3277;
t2860 = t3020 * t3085 - t3413 * t3023;
t2621 = (t2687 * t2860 + t2688 * t2782) * t3428;
t2627 = (t2705 * t2782 + t2706 * t2860) * t3428;
t2720 = t2993 * t2786 + t3152 * t2999;
t2663 = (t2717 * t2860 + t2720 * t2782) * t2970;
t2447 = t2621 * t2699 + t2627 * t2681 - t2663 * t3384;
t2861 = t3020 * t3086 - t3412 * t3023;
t2622 = (t2689 * t2861 + t2690 * t2791) * t3429;
t2628 = (t2707 * t2791 + t2708 * t2861) * t3429;
t2721 = t2994 * t2787 + t3151 * t3000;
t2664 = (t2718 * t2861 + t2721 * t2791) * t2971;
t2448 = t2622 * t2700 + t2628 * t2682 - t2664 * t3383;
t2862 = t3020 * t3087 - t3411 * t3023;
t2623 = (t2691 * t2862 + t2692 * t2795) * t3430;
t2629 = (t2709 * t2795 + t2710 * t2862) * t3430;
t2722 = t2995 * t2788 + t3150 * t3001;
t2665 = (t2719 * t2862 + t2722 * t2795) * t2972;
t2449 = t2623 * t2701 + t2629 * t2683 - t2665 * t3382;
t2863 = t3020 * t3088 - t3410 * t3023;
t2624 = (t2693 * t2863 + t2694 * t2799) * t3431;
t2630 = (t2711 * t2799 + t2712 * t2863) * t3431;
t2726 = t2996 * t2814 + t3149 * t3002;
t2666 = (t2723 * t2863 + t2726 * t2799) * t2974;
t2450 = t2624 * t2702 + t2630 * t2684 - t2666 * t3381;
t2864 = t3020 * t3089 - t3409 * t3023;
t2625 = (t2695 * t2864 + t2696 * t2803) * t3432;
t2631 = (t2713 * t2803 + t2714 * t2864) * t3432;
t2727 = t2997 * t2815 + t3148 * t3003;
t2667 = (t2724 * t2864 + t2727 * t2803) * t2975;
t2451 = t2625 * t2703 + t2631 * t2685 - t2667 * t3380;
t2865 = t3020 * t3090 - t3408 * t3023;
t2626 = (t2697 * t2865 + t2698 * t2807) * t3433;
t2632 = (t2715 * t2807 + t2716 * t2865) * t3433;
t2728 = t2998 * t2816 + t3147 * t3004;
t2668 = (t2725 * t2865 + t2728 * t2807) * t2976;
t2452 = t2626 * t2704 + t2632 * t2686 - t2668 * t3379;
t2459 = t2621 * t2729 + t2627 * t2699 - t2663 * t3210;
t2460 = t2622 * t2730 + t2628 * t2700 - t2664 * t3210;
t2461 = t2623 * t2731 + t2629 * t2701 - t2665 * t3210;
t2462 = t2624 * t2732 + t2630 * t2702 - t2666 * t3210;
t2463 = t2625 * t2733 + t2631 * t2703 - t2667 * t3210;
t2464 = t2626 * t2734 + t2632 * t2704 - t2668 * t3210;
t2513 = (-t2621 * t3282 - t2627 * t2834 + t2663) * m(3);
t2514 = (-t2622 * t3282 - t2628 * t2835 + t2664) * m(3);
t2515 = (-t2623 * t3282 - t2629 * t2836 + t2665) * m(3);
t2516 = (-t2624 * t3282 - t2630 * t2837 + t2666) * m(3);
t2517 = (-t2625 * t3282 - t2631 * t2838 + t2667) * m(3);
t2518 = (-t2626 * t3282 - t2632 * t2839 + t2668) * m(3);
t3137 = t2447 * t2627 + t2448 * t2628 + t2449 * t2629 + t2450 * t2630 + t2451 * t2631 + t2459 * t2621 + t2460 * t2622 + t2461 * t2623 + t2462 * t2624 + t2463 * t2625 + t2513 * t2663 + t2514 * t2664 + t2515 * t2665 + t2516 * t2666 + t2517 * t2667 + t2452 * t2632 + t2464 * t2626 + t2518 * t2668;
t2639 = (t2688 * t2781 + t2860 * t3208) * t3428;
t2640 = (t2690 * t2792 + t2861 * t3206) * t3429;
t2641 = (t2692 * t2796 + t2862 * t3204) * t3430;
t2645 = (t2694 * t2800 + t2863 * t3202) * t3431;
t2646 = (t2696 * t2804 + t2864 * t3200) * t3432;
t2647 = (t2698 * t2808 + t2865 * t3198) * t3433;
t2651 = (t2705 * t2781 - t2735 * t2860) * t3428;
t2652 = (t2707 * t2792 - t2736 * t2861) * t3429;
t2653 = (t2709 * t2796 - t2737 * t2862) * t3430;
t2654 = (t2711 * t2800 - t2738 * t2863) * t3431;
t2655 = (t2713 * t2804 - t2739 * t2864) * t3432;
t2656 = (t2715 * t2808 - t2740 * t2865) * t3433;
t2675 = (t2720 * t2781 + t2741 * t2860) * t2970;
t2676 = (t2721 * t2792 + t2742 * t2861) * t2971;
t2677 = (t2722 * t2796 + t2743 * t2862) * t2972;
t2678 = (t2726 * t2800 + t2744 * t2863) * t2974;
t2679 = (t2727 * t2804 + t2745 * t2864) * t2975;
t2680 = (t2728 * t2808 + t2746 * t2865) * t2976;
t3136 = -t2447 * t2651 - t2448 * t2652 - t2449 * t2653 - t2450 * t2654 - t2451 * t2655 - t2459 * t2639 - t2460 * t2640 - t2461 * t2641 - t2462 * t2645 - t2463 * t2646 - t2513 * t2675 - t2514 * t2676 - t2515 * t2677 - t2516 * t2678 - t2517 * t2679 - t2452 * t2656 - t2464 * t2647 - t2518 * t2680;
t3135 = t2465 * t2627 + t2466 * t2628 + t2467 * t2629 + t2468 * t2630 + t2469 * t2631 + t2483 * t2621 + t2484 * t2622 + t2485 * t2623 + t2486 * t2624 + t2487 * t2625 + t2534 * t2663 + t2535 * t2664 + t2536 * t2665 + t2540 * t2666 + t2541 * t2667 + t2470 * t2632 + t2488 * t2626 + t2542 * t2668;
t2471 = t2639 * t2699 + t2651 * t2681 - t2675 * t3384;
t2472 = t2640 * t2700 + t2652 * t2682 - t2676 * t3383;
t2473 = t2641 * t2701 + t2653 * t2683 - t2677 * t3382;
t2474 = t2645 * t2702 + t2654 * t2684 - t2678 * t3381;
t2475 = t2646 * t2703 + t2655 * t2685 - t2679 * t3380;
t2476 = t2647 * t2704 + t2656 * t2686 - t2680 * t3379;
t2507 = t2639 * t2729 + t2651 * t2699 - t2675 * t3210;
t2508 = t2640 * t2730 + t2652 * t2700 - t2676 * t3210;
t2509 = t2641 * t2731 + t2653 * t2701 - t2677 * t3210;
t2510 = t2645 * t2732 + t2654 * t2702 - t2678 * t3210;
t2511 = t2646 * t2733 + t2655 * t2703 - t2679 * t3210;
t2512 = t2647 * t2734 + t2656 * t2704 - t2680 * t3210;
t2543 = (-t2639 * t3282 - t2651 * t2834 + t2675) * m(3);
t2544 = (-t2640 * t3282 - t2652 * t2835 + t2676) * m(3);
t2545 = (-t2641 * t3282 - t2653 * t2836 + t2677) * m(3);
t2546 = (-t2645 * t3282 - t2654 * t2837 + t2678) * m(3);
t2547 = (-t2646 * t3282 - t2655 * t2838 + t2679) * m(3);
t2548 = (-t2647 * t3282 - t2656 * t2839 + t2680) * m(3);
t3134 = t2471 * t2627 + t2472 * t2628 + t2473 * t2629 + t2474 * t2630 + t2475 * t2631 + t2507 * t2621 + t2508 * t2622 + t2509 * t2623 + t2510 * t2624 + t2511 * t2625 + t2543 * t2663 + t2544 * t2664 + t2545 * t2665 + t2546 * t2666 + t2547 * t2667 + t2476 * t2632 + t2512 * t2626 + t2548 * t2668;
t3133 = t2465 * t2651 + t2466 * t2652 + t2467 * t2653 + t2468 * t2654 + t2469 * t2655 + t2483 * t2639 + t2484 * t2640 + t2485 * t2641 + t2486 * t2645 + t2487 * t2646 + t2534 * t2675 + t2535 * t2676 + t2536 * t2677 + t2540 * t2678 + t2541 * t2679 + t2470 * t2656 + t2488 * t2647 + t2542 * t2680;
t3132 = -t2471 * t2651 - t2472 * t2652 - t2473 * t2653 - t2474 * t2654 - t2475 * t2655 - t2507 * t2639 - t2508 * t2640 - t2509 * t2641 - t2510 * t2645 - t2511 * t2646 - t2543 * t2675 - t2544 * t2676 - t2545 * t2677 - t2546 * t2678 - t2547 * t2679 - t2476 * t2656 - t2512 * t2647 - t2548 * t2680;
t2556 = (t2681 * t3338 + t2687 * t3345 - t2717 * t3384) * t2970;
t2558 = (t2682 * t3336 + t2689 * t3344 - t2718 * t3383) * t2971;
t2560 = (t2683 * t3334 + t2691 * t3343 - t2719 * t3382) * t2972;
t2562 = (t2684 * t3332 + t2693 * t3342 - t2723 * t3381) * t2974;
t2564 = (t2685 * t3330 + t2695 * t3341 - t2724 * t3380) * t2975;
t2566 = (t2686 * t3328 + t2697 * t3340 - t2725 * t3379) * t2976;
t2580 = (t2687 * t3327 + t2699 * t3338 - t2717 * t3210) * t2970;
t2582 = (t2689 * t3326 + t2700 * t3336 - t2718 * t3210) * t2971;
t2584 = (t2691 * t3325 + t2701 * t3334 - t2719 * t3210) * t2972;
t2586 = (t2693 * t3324 + t2702 * t3332 - t2723 * t3210) * t2974;
t2588 = (t2695 * t3323 + t2703 * t3330 - t2724 * t3210) * t2975;
t2590 = (t2697 * t3322 + t2704 * t3328 - t2725 * t3210) * t2976;
t2610 = (-t2687 * t3197 - t2706 * t3315 + t2717) * t3377;
t2612 = (-t2689 * t3196 - t2708 * t3313 + t2718) * t3376;
t2614 = (-t2691 * t3195 - t2710 * t3311 + t2719) * t3375;
t2616 = (-t2693 * t3194 - t2712 * t3309 + t2723) * t3374;
t2618 = (-t2695 * t3193 - t2714 * t3307 + t2724) * t3373;
t2620 = (-t2697 * t3192 - t2716 * t3305 + t2725) * t3372;
t3131 = t2556 * t2627 + t2558 * t2628 + t2560 * t2629 + t2562 * t2630 + t2564 * t2631 + t2580 * t2621 + t2582 * t2622 + t2584 * t2623 + t2586 * t2624 + t2588 * t2625 + t2610 * t2663 + t2612 * t2664 + t2614 * t2665 + t2616 * t2666 + t2618 * t2667 + t2566 * t2632 + t2590 * t2626 + t2620 * t2668;
t2555 = (t2681 * t3339 + t2688 * t3345 - t2720 * t3384) * t2970;
t2557 = (t2682 * t3337 + t2690 * t3344 - t2721 * t3383) * t2971;
t2559 = (t2683 * t3335 + t2692 * t3343 - t2722 * t3382) * t2972;
t2561 = (t2684 * t3333 + t2694 * t3342 - t2726 * t3381) * t2974;
t2563 = (t2685 * t3331 + t2696 * t3341 - t2727 * t3380) * t2975;
t2565 = (t2686 * t3329 + t2698 * t3340 - t2728 * t3379) * t2976;
t2579 = (t2688 * t3327 + t2699 * t3339 - t2720 * t3210) * t2970;
t2581 = (t2690 * t3326 + t2700 * t3337 - t2721 * t3210) * t2971;
t2583 = (t2692 * t3325 + t2701 * t3335 - t2722 * t3210) * t2972;
t2585 = (t2694 * t3324 + t2702 * t3333 - t2726 * t3210) * t2974;
t2587 = (t2696 * t3323 + t2703 * t3331 - t2727 * t3210) * t2975;
t2589 = (t2698 * t3322 + t2704 * t3329 - t2728 * t3210) * t2976;
t2609 = (-t2688 * t3197 - t2705 * t3315 + t2720) * t3377;
t2611 = (-t2690 * t3196 - t2707 * t3313 + t2721) * t3376;
t2613 = (-t2692 * t3195 - t2709 * t3311 + t2722) * t3375;
t2615 = (-t2694 * t3194 - t2711 * t3309 + t2726) * t3374;
t2617 = (-t2696 * t3193 - t2713 * t3307 + t2727) * t3373;
t2619 = (-t2698 * t3192 - t2715 * t3305 + t2728) * t3372;
t3130 = t2555 * t2627 + t2557 * t2628 + t2559 * t2629 + t2561 * t2630 + t2563 * t2631 + t2579 * t2621 + t2581 * t2622 + t2583 * t2623 + t2585 * t2624 + t2587 * t2625 + t2609 * t2663 + t2611 * t2664 + t2613 * t2665 + t2615 * t2666 + t2617 * t2667 + t2565 * t2632 + t2589 * t2626 + t2619 * t2668;
t3129 = t2556 * t2651 + t2558 * t2652 + t2560 * t2653 + t2562 * t2654 + t2564 * t2655 + t2580 * t2639 + t2582 * t2640 + t2584 * t2641 + t2586 * t2645 + t2588 * t2646 + t2610 * t2675 + t2612 * t2676 + t2614 * t2677 + t2616 * t2678 + t2618 * t2679 + t2566 * t2656 + t2590 * t2647 + t2620 * t2680;
t3128 = t2555 * t2651 + t2557 * t2652 + t2559 * t2653 + t2561 * t2654 + t2563 * t2655 + t2579 * t2639 + t2581 * t2640 + t2583 * t2641 + t2585 * t2645 + t2587 * t2646 + t2609 * t2675 + t2611 * t2676 + t2613 * t2677 + t2615 * t2678 + t2617 * t2679 + t2565 * t2656 + t2589 * t2647 + t2619 * t2680;
t2591 = (t2681 * t3321 + t2741 * t3384 - t3208 * t3345) * t2970;
t2592 = (t2682 * t3320 + t2742 * t3383 - t3206 * t3344) * t2971;
t2593 = (t2683 * t3319 + t2743 * t3382 - t3204 * t3343) * t2972;
t2594 = (t2684 * t3318 + t2744 * t3381 - t3202 * t3342) * t2974;
t2595 = (t2685 * t3317 + t2745 * t3380 - t3200 * t3341) * t2975;
t2596 = (t2686 * t3316 + t2746 * t3379 - t3198 * t3340) * t2976;
t2603 = (t2699 * t3321 + (-t2729 * t3209 + t2741 * t3378) * t3039) * t2970;
t2604 = (t2700 * t3320 + (-t2730 * t3207 + t2742 * t3378) * t3039) * t2971;
t2605 = (t2701 * t3319 + (-t2731 * t3205 + t2743 * t3378) * t3039) * t2972;
t2606 = (t2702 * t3318 + (-t2732 * t3203 + t2744 * t3378) * t3039) * t2974;
t2607 = (t2703 * t3317 + (-t2733 * t3201 + t2745 * t3378) * t3039) * t2975;
t2608 = (t2704 * t3316 + (-t2734 * t3199 + t2746 * t3378) * t3039) * t2976;
t2657 = (-t2735 * t3315 + t3209 * t3283 - t2741) * t3377;
t2658 = (-t2736 * t3313 + t3207 * t3283 - t2742) * t3376;
t2659 = (-t2737 * t3311 + t3205 * t3283 - t2743) * t3375;
t2660 = (-t2738 * t3309 + t3203 * t3283 - t2744) * t3374;
t2661 = (-t2739 * t3307 + t3201 * t3283 - t2745) * t3373;
t2662 = (-t2740 * t3305 + t3199 * t3283 - t2746) * t3372;
t3127 = t2591 * t2627 + t2592 * t2628 + t2593 * t2629 + t2594 * t2630 + t2595 * t2631 + t2603 * t2621 + t2604 * t2622 + t2605 * t2623 + t2606 * t2624 + t2607 * t2625 + t2657 * t2663 + t2658 * t2664 + t2659 * t2665 + t2660 * t2666 + t2661 * t2667 + t2596 * t2632 + t2608 * t2626 + t2662 * t2668;
t3126 = -t2591 * t2651 - t2592 * t2652 - t2593 * t2653 - t2594 * t2654 - t2595 * t2655 - t2603 * t2639 - t2604 * t2640 - t2605 * t2641 - t2606 * t2645 - t2607 * t2646 - t2657 * t2675 - t2658 * t2676 - t2659 * t2677 - t2660 * t2678 - t2661 * t2679 - t2596 * t2656 - t2608 * t2647 - t2662 * t2680;
t2941 = (t3047 - t3048) * m(4) + Icges(4,1) - Icges(4,2);
t3125 = -(t3020 * t3019 * t2941 + t3023 * t2955) * t3022 - t3023 * t3277;
t2991 = t3022 ^ 2;
t3124 = t2941 * t2991 + 0.2e1 * t3179;
t3108 = t2447 * t2642 + t2448 * t2643 + t2449 * t2644 + t2450 * t2648 + t2451 * t2649 + t2452 * t2650 + t2459 * t2633 + t2460 * t2634 + t2461 * t2635 + t2462 * t2636 + t2463 * t2637 + t2464 * t2638 + t2513 * t2669 + t2514 * t2670 + t2515 * t2671 + t2516 * t2672 + t2517 * t2673 + t2518 * t2674;
t3106 = t2471 * t2642 + t2472 * t2643 + t2473 * t2644 + t2474 * t2648 + t2475 * t2649 + t2476 * t2650 + t2507 * t2633 + t2508 * t2634 + t2509 * t2635 + t2510 * t2636 + t2511 * t2637 + t2512 * t2638 + t2543 * t2669 + t2544 * t2670 + t2545 * t2671 + t2546 * t2672 + t2547 * t2673 + t2548 * t2674;
t3105 = t2556 * t2642 + t2558 * t2643 + t2560 * t2644 + t2562 * t2648 + t2564 * t2649 + t2566 * t2650 + t2580 * t2633 + t2582 * t2634 + t2584 * t2635 + t2586 * t2636 + t2588 * t2637 + t2590 * t2638 + t2610 * t2669 + t2612 * t2670 + t2614 * t2671 + t2616 * t2672 + t2618 * t2673 + t2620 * t2674;
t3104 = t2555 * t2642 + t2557 * t2643 + t2559 * t2644 + t2561 * t2648 + t2563 * t2649 + t2565 * t2650 + t2579 * t2633 + t2581 * t2634 + t2583 * t2635 + t2585 * t2636 + t2587 * t2637 + t2589 * t2638 + t2609 * t2669 + t2611 * t2670 + t2613 * t2671 + t2615 * t2672 + t2617 * t2673 + t2619 * t2674;
t3103 = t2591 * t2642 + t2592 * t2643 + t2593 * t2644 + t2594 * t2648 + t2595 * t2649 + t2596 * t2650 + t2603 * t2633 + t2604 * t2634 + t2605 * t2635 + t2606 * t2636 + t2607 * t2637 + t2608 * t2638 + t2657 * t2669 + t2658 * t2670 + t2659 * t2671 + t2660 * t2672 + t2661 * t2673 + t2662 * t2674;
t2950 = Icges(4,1) + m(4) * (t3046 + t3047);
t2833 = -t3024 * t2941 + t3275 * t3419;
t2819 = t2941 * t3276 + t2991 * t3419 + t2957;
t2818 = t3124 + t3218;
t2817 = -t2949 * t3023 + t3421;
t2760 = m(4) * (-t3021 * t3168 + t3260);
t1 = [m(4) + (t2565 * t3329 + t2589 * t3346 + t2619 * t2728) * t2976 + (t2563 * t3331 + t2587 * t3348 + t2617 * t2727) * t2975 + (t2561 * t3333 + t2585 * t3350 + t2615 * t2726) * t2974 + (t2559 * t3335 + t2583 * t3352 + t2613 * t2722) * t2972 + (t2557 * t3337 + t2581 * t3354 + t2611 * t2721) * t2971 + (t2555 * t3339 + t2579 * t3356 + t2609 * t2720) * t2970, (t2565 * t3328 + t2589 * t3347 + t2619 * t2725) * t2976 + (t2563 * t3330 + t2587 * t3349 + t2617 * t2724) * t2975 + (t2561 * t3332 + t2585 * t3351 + t2615 * t2723) * t2974 + (t2559 * t3334 + t2583 * t3353 + t2613 * t2719) * t2972 + (t2557 * t3336 + t2581 * t3355 + t2611 * t2718) * t2971 + (t2555 * t3338 + t2579 * t3357 + t2609 * t2717) * t2970, (t2565 * t3316 - t2619 * t2746) * t2976 + (t2563 * t3317 - t2617 * t2745) * t2975 + (t2561 * t3318 - t2615 * t2744) * t2974 + (t2559 * t3319 - t2613 * t2743) * t2972 + (t2557 * t3320 - t2611 * t2742) * t2971 + (t2555 * t3321 - t2609 * t2741) * t2970 + (-t2579 * t3165 - t2581 * t3164 - t2583 * t3163 - t2585 * t3162 - t2587 * t3161 - t2589 * t3160) * t3039, t3104, m(4) * t3168 + t3130 * t3021 + t3128 * t3024, t3104 * t3020 + (-t2918 * m(4) - t3128 * t3021 + t3130 * t3024) * t3023; (t2566 * t3329 + t2590 * t3346 + t2620 * t2728) * t2976 + (t2564 * t3331 + t2588 * t3348 + t2618 * t2727) * t2975 + (t2562 * t3333 + t2586 * t3350 + t2616 * t2726) * t2974 + (t2560 * t3335 + t2584 * t3352 + t2614 * t2722) * t2972 + (t2558 * t3337 + t2582 * t3354 + t2612 * t2721) * t2971 + (t2556 * t3339 + t2580 * t3356 + t2610 * t2720) * t2970, m(4) + (t2566 * t3328 + t2590 * t3347 + t2620 * t2725) * t2976 + (t2564 * t3330 + t2588 * t3349 + t2618 * t2724) * t2975 + (t2562 * t3332 + t2586 * t3351 + t2616 * t2723) * t2974 + (t2560 * t3334 + t2584 * t3353 + t2614 * t2719) * t2972 + (t2558 * t3336 + t2582 * t3355 + t2612 * t2718) * t2971 + (t2556 * t3338 + t2580 * t3357 + t2610 * t2717) * t2970, (t2566 * t3316 - t2620 * t2746) * t2976 + (t2564 * t3317 - t2618 * t2745) * t2975 + (t2562 * t3318 - t2616 * t2744) * t2974 + (t2560 * t3319 - t2614 * t2743) * t2972 + (t2558 * t3320 - t2612 * t2742) * t2971 + (t2556 * t3321 - t2610 * t2741) * t2970 + (-t2580 * t3165 - t2582 * t3164 - t2584 * t3163 - t2586 * t3162 - t2588 * t3161 - t2590 * t3160) * t3039, t3105 - t3361, t3129 * t3024 + (t3131 - t3417) * t3021, -t3024 * t3363 + (-m(4) * t3273 + t3105) * t3020 + (-t3129 * t3021 + t3131 * t3024) * t3023; (t2596 * t3329 + t2608 * t3346 + t2662 * t2728) * t2976 + (t2595 * t3331 + t2607 * t3348 + t2661 * t2727) * t2975 + (t2594 * t3333 + t2606 * t3350 + t2660 * t2726) * t2974 + (t2593 * t3335 + t2605 * t3352 + t2659 * t2722) * t2972 + (t2592 * t3337 + t2604 * t3354 + t2658 * t2721) * t2971 + (t2591 * t3339 + t2603 * t3356 + t2657 * t2720) * t2970, (t2596 * t3328 + t2608 * t3347 + t2662 * t2725) * t2976 + (t2595 * t3330 + t2607 * t3349 + t2661 * t2724) * t2975 + (t2594 * t3332 + t2606 * t3351 + t2660 * t2723) * t2974 + (t2593 * t3334 + t2605 * t3353 + t2659 * t2719) * t2972 + (t2592 * t3336 + t2604 * t3355 + t2658 * t2718) * t2971 + (t2591 * t3338 + t2603 * t3357 + t2657 * t2717) * t2970, m(4) + (t2596 * t3316 - t2662 * t2746) * t2976 + (t2595 * t3317 - t2661 * t2745) * t2975 + (t2594 * t3318 - t2660 * t2744) * t2974 + (t2593 * t3319 - t2659 * t2743) * t2972 + (t2592 * t3320 - t2658 * t2742) * t2971 + (t2591 * t3321 - t2657 * t2741) * t2970 + (-t2603 * t3165 - t2604 * t3164 - t2605 * t3163 - t2606 * t3162 - t2607 * t3161 - t2608 * t3160) * t3039, t3103 + t2760, t3127 * t3021 + (-t3126 + t3417) * t3024, -t3021 * t3363 + (m(4) * t3260 + t3103) * t3020 + (t3126 * t3021 + t3127 * t3024) * t3023; (t2470 * t3329 + t2488 * t3346 + t2542 * t2728) * t2976 + (t2469 * t3331 + t2487 * t3348 + t2541 * t2727) * t2975 + (t2468 * t3333 + t2486 * t3350 + t2540 * t2726) * t2974 + (t2467 * t3335 + t2485 * t3352 + t2536 * t2722) * t2972 + (t2466 * t3337 + t2484 * t3354 + t2535 * t2721) * t2971 + (t2465 * t3339 + t2483 * t3356 + t2534 * t2720) * t2970, -t3361 + (t2470 * t3328 + t2488 * t3347 + t2542 * t2725) * t2976 + (t2469 * t3330 + t2487 * t3349 + t2541 * t2724) * t2975 + (t2468 * t3332 + t2486 * t3351 + t2540 * t2723) * t2974 + (t2467 * t3334 + t2485 * t3353 + t2536 * t2719) * t2972 + (t2466 * t3336 + t2484 * t3355 + t2535 * t2718) * t2971 + (t2465 * t3338 + t2483 * t3357 + t2534 * t2717) * t2970, t2760 + (t2470 * t3316 - t2542 * t2746) * t2976 + (t2469 * t3317 - t2541 * t2745) * t2975 + (t2468 * t3318 - t2540 * t2744) * t2974 + (t2467 * t3319 - t2536 * t2743) * t2972 + (t2466 * t3320 - t2535 * t2742) * t2971 + (t2465 * t3321 - t2534 * t2741) * t2970 + (-t2483 * t3165 - t2484 * t3164 - t2485 * t3163 - t2486 * t3162 - t2487 * t3161 - t2488 * t3160) * t3039, t2818 * t2992 + 0.2e1 * t3023 * t3421 + t3414, t2819 * t3023 - t3020 * t3140 + t3135 * t3021 + t3133 * t3024, t3414 * t3020 + (-t3133 * t3021 + t3135 * t3024 + t3139) * t3023; t3361 + (t2476 * t3329 + t2512 * t3346 + t2548 * t2728) * t2976 + (t2475 * t3331 + t2511 * t3348 + t2547 * t2727) * t2975 + (t2474 * t3333 + t2510 * t3350 + t2546 * t2726) * t2974 + (t2473 * t3335 + t2509 * t3352 + t2545 * t2722) * t2972 + (t2472 * t3337 + t2508 * t3354 + t2544 * t2721) * t2971 + (t2471 * t3339 + t2507 * t3356 + t2543 * t2720) * t2970, (t2476 * t3328 + t2512 * t3347 + t2548 * t2725) * t2976 + (t2475 * t3330 + t2511 * t3349 + t2547 * t2724) * t2975 + (t2474 * t3332 + t2510 * t3351 + t2546 * t2723) * t2974 + (t2473 * t3334 + t2509 * t3353 + t2545 * t2719) * t2972 + (t2472 * t3336 + t2508 * t3355 + t2544 * t2718) * t2971 + (t2471 * t3338 + t2507 * t3357 + t2543 * t2717) * t2970, t3417 + (t2476 * t3316 - t2548 * t2746) * t2976 + (t2475 * t3317 - t2547 * t2745) * t2975 + (t2474 * t3318 - t2546 * t2744) * t2974 + (t2473 * t3319 - t2545 * t2743) * t2972 + (t2472 * t3320 - t2544 * t2742) * t2971 + (t2471 * t3321 - t2543 * t2741) * t2970 + (-t2507 * t3165 - t2508 * t3164 - t2509 * t3163 - t2510 * t3162 - t2511 * t3161 - t2512 * t3160) * t3039, t3021 * t3139 * t3418 + t3106 + ((t2941 * t3275 - 0.2e1 * t3253) * t2991 - t2833 * t3276 + t3218 * t3275 + t3253) * t3023 + (-t2955 * t3274 - t2956 * t3021) * t3022 - (-t2955 * t3021 + t2956 * t3274) * t3019, t2833 * t2991 + (t2950 - t3132 - 0.2e1 * t3179) * t3024 + (-t3125 + t3134 + t3280) * t3021, t2817 * t3021 - t3024 * t3140 + t3106 * t3020 + (t3132 * t3021 + t3134 * t3024) * t3023; -t2760 + (t2452 * t3329 + t2464 * t3346 + t2518 * t2728) * t2976 + (t2451 * t3331 + t2463 * t3348 + t2517 * t2727) * t2975 + (t2450 * t3333 + t2462 * t3350 + t2516 * t2726) * t2974 + (t2449 * t3335 + t2461 * t3352 + t2515 * t2722) * t2972 + (t2448 * t3337 + t2460 * t3354 + t2514 * t2721) * t2971 + (t2447 * t3339 + t2459 * t3356 + t2513 * t2720) * t2970, -t3417 + (t2452 * t3328 + t2464 * t3347 + t2518 * t2725) * t2976 + (t2451 * t3330 + t2463 * t3349 + t2517 * t2724) * t2975 + (t2450 * t3332 + t2462 * t3351 + t2516 * t2723) * t2974 + (t2449 * t3334 + t2461 * t3353 + t2515 * t2719) * t2972 + (t2448 * t3336 + t2460 * t3355 + t2514 * t2718) * t2971 + (t2447 * t3338 + t2459 * t3357 + t2513 * t2717) * t2970, (t2452 * t3316 - t2518 * t2746) * t2976 + (t2451 * t3317 - t2517 * t2745) * t2975 + (t2450 * t3318 - t2516 * t2744) * t2974 + (t2449 * t3319 - t2515 * t2743) * t2972 + (t2448 * t3320 - t2514 * t2742) * t2971 + (t2447 * t3321 - t2513 * t2741) * t2970 + (-t2459 * t3165 - t2460 * t3164 - t2461 * t3163 - t2462 * t3162 - t2463 * t3161 - t2464 * t3160) * t3039, -t3140 * t3275 - (t3418 + 0.1e1) * t3024 * t3139 + (-t2818 * t3274 + t3021 * t2819) * t3023 + t3108, ((0.2e1 * t2991 - 0.1e1) * t3280 + t3125 - t3136) * t3024 + (t2950 - t3124 + t3137) * t3021, -t2817 * t3024 - t3021 * t3140 + t3108 * t3020 + (t3136 * t3021 + t3137 * t3024) * t3023;];
MX  = t1;
