% Calculate inertia matrix for parallel robot
% P6RRPRRR14V4G7A0
% Use Code from Maple symbolic Code Generation
%
% Input:
% xP [6x1]
%   Generalized platform coordinates
% qJ [3x6]
%   Generalized joint coordinates (joint angles)
%   rows: links of the robot
%   columns: number of leg
% legFrame [6x3]
%   base frame orientation for each leg
%   row: number of leg
%   column: Euler angles for the orientation.
%   Euler angle convention from robot definition ("leg_frame")
% koppelP [6x3]
%   coordinates of the platform coupling joints
%   (joints that link the end of legs with platform)
%   in platform coordinates
%   rows: number of leg
%   columns: x-, y-, z-coordinates
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,alpha3,alpha4,d1,d4,theta3]';
% m [4x1]
%   mass of all robot links (leg links until cut joint, platform)
% mrSges [4x3]
%   first moment of all robot links (mass times center of mass in body frames)
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: x-, y-, z-coordinates
% Ifges [4x6]
%   inertia of all robot links about their respective body frame origins, in body frames
%   rows: links of the robot (leg links until cut joint, platform)
%   columns: xx, yy, zz, xy, xz, yz (see inertial_parameters_convert_par1_par2.m)
%
% Output:
% MX [6x6]
%   inertia matrix in task space

% Quelle: HybrDyn-Toolbox
% Datum: 2022-11-04 05:41
% Revision: e482436b586c4f286726c907c195760c5ac72455 (2022-11-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MX = P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2(xP, qJ, legFrame, ...
  koppelP, pkin, m, mrSges, Ifges)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(3,6),zeros(6,3),zeros(6,3),zeros(7,1),zeros(3+1,1),zeros(3+1,3),zeros(3+1,6)}
assert(isreal(xP) && all(size(xP) == [6 1]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: xP has to be [6x1] (double)');
assert(isreal(qJ) && all(size(qJ) == [3 6]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: qJ has to be [3x6] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: pkin has to be [7x1] (double)');
assert(isreal(m) && all(size(m) == [4 1]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: m has to be [4x1] (double)'); 
assert(isreal(mrSges) && all(size(mrSges) == [4,3]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: mrSges has to be [4x3] (double)');
assert(isreal(Ifges) && all(size(Ifges) == [4 6]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: Ifges has to be [4x6] (double)'); 
assert(isreal(legFrame) && all(size(legFrame) == [6 3]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: legFrame has to be [6x1] (double)');
assert(isreal(koppelP) && all(size(koppelP) == [6 3]), ...
  'P6RRPRRR14V4G7A0_inertia_para_pf_slag_vp2: Koppelpunkt has to be [6x3] (double)');

%% Symbolic Calculation
% From inertia_para_plfcoord_par2_matlab.m
% OptimizationMode: 2
% StartTime: 2022-11-03 23:20:45
% EndTime: 2022-11-03 23:21:28
% DurationCPUTime: 45.51s
% Computational Cost: add. (193815->1436), mult. (375123->2172), div. (9990->12), fcn. (326608->48), ass. (0->721)
t3395 = (m(3) * qJ(3,2));
t3394 = (m(3) * qJ(3,3));
t3393 = (qJ(3,1) * m(3));
t3392 = (m(3) * qJ(3,4));
t3391 = (m(3) * qJ(3,5));
t3390 = (m(3) * qJ(3,6));
t3389 = 2 * mrSges(3,3);
t2976 = sin(pkin(3));
t2977 = cos(pkin(7));
t2964 = t2977 ^ 2;
t2974 = sin(pkin(7));
t2995 = Ifges(3,2) - Ifges(3,1);
t3327 = mrSges(3,1) * t2974;
t3369 = -0.2e1 * Ifges(3,4) * t2964 + pkin(1) * t3327 + Ifges(3,4) + t2977 * (pkin(1) * mrSges(3,2) + t2974 * t2995);
t2766 = t3369 * t2976 - Ifges(2,5);
t2912 = mrSges(3,2) * qJ(3,6) - Ifges(3,6);
t2915 = mrSges(3,1) * qJ(3,6) - Ifges(3,5);
t2837 = -t2912 * t2977 - t2974 * t2915;
t2979 = cos(pkin(3));
t2983 = sin(qJ(2,6));
t2989 = cos(qJ(2,6));
t3059 = pkin(1) * (mrSges(3,3) + t3390) - t2912 * t2974 + t2915 * t2977;
t3321 = t2974 * Ifges(3,4);
t3139 = t2977 * t3321;
t3160 = t2995 * t2964;
t3320 = Ifges(3,1) + t3160;
t3099 = 0.2e1 * t3139 - Ifges(3,3) + t3320;
t3152 = (t3389 + t3390) * qJ(3,6);
t3170 = t2976 * t2979;
t2965 = t2979 ^ 2;
t3334 = 0.2e1 * t2965;
t2664 = (-t2979 * t3059 - t2766) * t2983 + (t2837 * t3334 + (t3099 + t3152) * t3170 + Ifges(2,6) - t2837) * t2989;
t3328 = sin(pkin(4)) * pkin(6);
t2860 = pkin(2) * t2977 + t2974 * t3328 + pkin(1);
t3249 = t2860 * t2989;
t2930 = cos(pkin(4)) * pkin(6);
t2902 = t2930 + qJ(3,6);
t2874 = -pkin(2) * t2974 + t2977 * t3328;
t3224 = t2874 * t2979;
t3348 = -t2902 * t2976 - t3224;
t3342 = -t2983 * t3348 + t3249;
t3376 = 0.1e1 / t3342;
t3388 = t2664 * t3376;
t2913 = mrSges(3,2) * qJ(3,5) - Ifges(3,6);
t2916 = mrSges(3,1) * qJ(3,5) - Ifges(3,5);
t2838 = -t2913 * t2977 - t2974 * t2916;
t2985 = sin(qJ(2,5));
t2991 = cos(qJ(2,5));
t3058 = pkin(1) * (mrSges(3,3) + t3391) - t2913 * t2974 + t2916 * t2977;
t3151 = (t3389 + t3391) * qJ(3,5);
t2665 = (-t2979 * t3058 - t2766) * t2985 + (t2838 * t3334 + (t3099 + t3151) * t3170 + Ifges(2,6) - t2838) * t2991;
t3247 = t2860 * t2991;
t2903 = t2930 + qJ(3,5);
t3349 = -t2903 * t2976 - t3224;
t3343 = -t2985 * t3349 + t3247;
t3375 = 0.1e1 / t3343;
t3387 = t2665 * t3375;
t2914 = mrSges(3,2) * qJ(3,4) - Ifges(3,6);
t2917 = mrSges(3,1) * qJ(3,4) - Ifges(3,5);
t2839 = -t2914 * t2977 - t2974 * t2917;
t2987 = sin(qJ(2,4));
t2993 = cos(qJ(2,4));
t3057 = pkin(1) * (mrSges(3,3) + t3392) - t2914 * t2974 + t2917 * t2977;
t3150 = (t3389 + t3392) * qJ(3,4);
t2666 = (-t2979 * t3057 - t2766) * t2987 + (t2839 * t3334 + (t3099 + t3150) * t3170 + Ifges(2,6) - t2839) * t2993;
t3245 = t2860 * t2993;
t2904 = t2930 + qJ(3,4);
t3350 = -t2904 * t2976 - t3224;
t3344 = -t2987 * t3350 + t3245;
t3374 = 0.1e1 / t3344;
t3386 = t2666 * t3374;
t2918 = mrSges(3,2) * qJ(3,3) - Ifges(3,6);
t2921 = mrSges(3,1) * qJ(3,3) - Ifges(3,5);
t2840 = -t2918 * t2977 - t2974 * t2921;
t3005 = sin(qJ(2,3));
t3011 = cos(qJ(2,3));
t3056 = pkin(1) * (mrSges(3,3) + t3394) - t2918 * t2974 + t2921 * t2977;
t3149 = (t3389 + t3394) * qJ(3,3);
t2667 = (-t2979 * t3056 - t2766) * t3005 + (t2840 * t3334 + (t3099 + t3149) * t3170 + Ifges(2,6) - t2840) * t3011;
t3243 = t2860 * t3011;
t2905 = t2930 + qJ(3,3);
t3351 = -t2905 * t2976 - t3224;
t3345 = -t3005 * t3351 + t3243;
t3373 = 0.1e1 / t3345;
t3385 = t2667 * t3373;
t2919 = mrSges(3,2) * qJ(3,2) - Ifges(3,6);
t2922 = mrSges(3,1) * qJ(3,2) - Ifges(3,5);
t2841 = -t2919 * t2977 - t2974 * t2922;
t3007 = sin(qJ(2,2));
t3013 = cos(qJ(2,2));
t3055 = pkin(1) * (mrSges(3,3) + t3395) - t2919 * t2974 + t2922 * t2977;
t3148 = (t3389 + t3395) * qJ(3,2);
t2668 = (-t2979 * t3055 - t2766) * t3007 + (t2841 * t3334 + (t3099 + t3148) * t3170 + Ifges(2,6) - t2841) * t3013;
t3241 = t2860 * t3013;
t2906 = t2930 + qJ(3,2);
t3352 = -t2906 * t2976 - t3224;
t3346 = -t3007 * t3352 + t3241;
t3372 = 0.1e1 / t3346;
t3384 = t2668 * t3372;
t2920 = mrSges(3,2) * qJ(3,1) - Ifges(3,6);
t2923 = mrSges(3,1) * qJ(3,1) - Ifges(3,5);
t2842 = -t2920 * t2977 - t2974 * t2923;
t3009 = sin(qJ(2,1));
t3015 = cos(qJ(2,1));
t3054 = pkin(1) * (mrSges(3,3) + t3393) - t2920 * t2974 + t2923 * t2977;
t3147 = (t3389 + t3393) * qJ(3,1);
t2669 = (-t2979 * t3054 - t2766) * t3009 + (t2842 * t3334 + (t3099 + t3147) * t3170 + Ifges(2,6) - t2842) * t3015;
t3239 = t2860 * t3015;
t2907 = t2930 + qJ(3,1);
t3353 = -t2907 * t2976 - t3224;
t3347 = -t3009 * t3353 + t3239;
t3371 = 0.1e1 / t3347;
t3383 = t2669 * t3371;
t2900 = 0.1e1 / t2907;
t3382 = t3371 * t2900;
t2899 = 0.1e1 / t2906;
t3381 = t3372 * t2899;
t2898 = 0.1e1 / t2905;
t3380 = t3373 * t2898;
t2897 = 0.1e1 / t2904;
t3379 = t3374 * t2897;
t2896 = 0.1e1 / t2903;
t3378 = t3375 * t2896;
t2895 = 0.1e1 / t2902;
t3377 = t3376 * t2895;
t3370 = m(3) * pkin(1);
t3018 = xP(6);
t2945 = sin(t3018);
t2948 = cos(t3018);
t3022 = mrSges(4,2);
t3023 = mrSges(4,1);
t2858 = -t2945 * t3022 + t2948 * t3023;
t3019 = xP(5);
t2946 = sin(t3019);
t2949 = cos(t3019);
t3030 = koppelP(6,3);
t3036 = koppelP(6,1);
t3336 = koppelP(6,2);
t3360 = t2945 * t3336 - t2948 * t3036;
t2820 = t3360 * t2946 + t2949 * t3030;
t2867 = t2945 * t3036 + t2948 * t3336;
t3020 = xP(4);
t2947 = sin(t3020);
t2950 = cos(t3020);
t2731 = t2820 * t2947 - t2867 * t2950;
t2730 = t2820 * t2950 + t2867 * t2947;
t3031 = koppelP(5,3);
t3037 = koppelP(5,1);
t3337 = koppelP(5,2);
t3359 = t2945 * t3337 - t2948 * t3037;
t2822 = t3359 * t2946 + t2949 * t3031;
t2868 = t2945 * t3037 + t2948 * t3337;
t2740 = t2822 * t2947 - t2868 * t2950;
t2741 = t2822 * t2950 + t2868 * t2947;
t3032 = koppelP(4,3);
t3038 = koppelP(4,1);
t3338 = koppelP(4,2);
t3358 = t2945 * t3338 - t2948 * t3038;
t2824 = t3358 * t2946 + t2949 * t3032;
t2869 = t2945 * t3038 + t2948 * t3338;
t2744 = t2824 * t2947 - t2869 * t2950;
t2745 = t2824 * t2950 + t2869 * t2947;
t3033 = koppelP(3,3);
t3039 = koppelP(3,1);
t3339 = koppelP(3,2);
t3357 = t2945 * t3339 - t2948 * t3039;
t2826 = t3357 * t2946 + t2949 * t3033;
t2870 = t2945 * t3039 + t2948 * t3339;
t2748 = t2826 * t2947 - t2870 * t2950;
t2749 = t2826 * t2950 + t2870 * t2947;
t3034 = koppelP(2,3);
t3040 = koppelP(2,1);
t3340 = koppelP(2,2);
t3356 = t2945 * t3340 - t2948 * t3040;
t2828 = t3356 * t2946 + t2949 * t3034;
t2871 = t2945 * t3040 + t2948 * t3340;
t2752 = t2828 * t2947 - t2871 * t2950;
t2753 = t2828 * t2950 + t2871 * t2947;
t3035 = koppelP(1,3);
t3041 = koppelP(1,1);
t3341 = koppelP(1,2);
t3355 = t2945 * t3341 - t2948 * t3041;
t2830 = t2946 * t3355 + t2949 * t3035;
t2872 = t2945 * t3041 + t2948 * t3341;
t2756 = t2830 * t2947 - t2872 * t2950;
t2757 = t2830 * t2950 + t2872 * t2947;
t2984 = sin(qJ(1,6));
t2990 = cos(qJ(1,6));
t3225 = t2874 * t2976;
t3081 = -t2902 * t2979 + t3225;
t2688 = t2984 * t3342 + t2990 * t3081;
t2986 = sin(qJ(1,5));
t2992 = cos(qJ(1,5));
t3080 = -t2903 * t2979 + t3225;
t2689 = t2986 * t3343 + t2992 * t3080;
t2988 = sin(qJ(1,4));
t2994 = cos(qJ(1,4));
t3079 = -t2904 * t2979 + t3225;
t2690 = t2988 * t3344 + t2994 * t3079;
t3006 = sin(qJ(1,3));
t3012 = cos(qJ(1,3));
t3078 = -t2905 * t2979 + t3225;
t2697 = t3006 * t3345 + t3012 * t3078;
t3008 = sin(qJ(1,2));
t3014 = cos(qJ(1,2));
t3077 = -t2906 * t2979 + t3225;
t2698 = t3008 * t3346 + t3014 * t3077;
t3010 = sin(qJ(1,1));
t3016 = cos(qJ(1,1));
t3076 = -t2907 * t2979 + t3225;
t2699 = t3010 * t3347 + t3016 * t3076;
t2877 = t2948 * Ifges(4,5) - t2945 * Ifges(4,6);
t3368 = t2877 * t2946;
t3021 = mrSges(4,3);
t2799 = t2858 * t2946 - t2949 * t3021;
t2859 = t2945 * t3023 + t2948 * t3022;
t2834 = t2950 * t2859;
t3156 = t2799 * t2947 + t2834;
t2851 = t2984 * t2874;
t3163 = t2990 * t2902;
t2788 = t2983 * t3163 - t2851;
t2852 = t2986 * t2874;
t3162 = t2992 * t2903;
t2790 = t2985 * t3162 - t2852;
t2853 = t2988 * t2874;
t3161 = t2994 * t2904;
t2792 = t2987 * t3161 - t2853;
t2855 = t3006 * t2874;
t3159 = t3012 * t2905;
t2794 = t3005 * t3159 - t2855;
t2856 = t3008 * t2874;
t3158 = t3014 * t2906;
t2796 = t3007 * t3158 - t2856;
t2857 = t3010 * t2874;
t3157 = t3016 * t2907;
t2798 = t3009 * t3157 - t2857;
t2777 = t2799 * t2950;
t3179 = t2947 * t2859;
t3354 = t3179 - t2777;
t3335 = 2 * Ifges(4,4);
t3333 = Ifges(2,1) + Ifges(3,2);
t3332 = Ifges(3,3) - Ifges(3,1);
t3326 = mrSges(3,2) * t2974;
t3319 = Ifges(4,2) - Ifges(4,3);
t3318 = Ifges(4,4) * t2946;
t3317 = Ifges(4,5) * t2945;
t3316 = t2950 * Ifges(4,4);
t3088 = -t2874 * t3170 - t2930;
t2767 = t2902 * t2965 - qJ(3,6) + t3088;
t2999 = legFrame(6,2);
t2933 = sin(t2999);
t2939 = cos(t2999);
t2966 = t2989 ^ 2;
t3207 = t2902 * t2984;
t3222 = t2874 * t2990;
t2787 = t2983 * t3222 + t3207;
t3053 = t2787 * t3170 - t2788 * t2965 + t2788;
t3248 = t2860 * t2990;
t3116 = t2976 * t3248;
t2843 = t2860 * t2983;
t3119 = t2976 * t2843;
t3190 = t2939 * t2902;
t2634 = (t2767 * t2939 - t2933 * t3116) * t2966 + (-t2933 * t3053 + t2939 * t3119) * t2989 + t3190;
t3315 = t2634 * t3376;
t3196 = t2933 * t2902;
t2635 = (t2767 * t2933 + t2939 * t3116) * t2966 + (t2933 * t3119 + t2939 * t3053) * t2989 + t3196;
t3314 = t2635 * t3376;
t2768 = t2903 * t2965 - qJ(3,5) + t3088;
t3000 = legFrame(5,2);
t2934 = sin(t3000);
t2940 = cos(t3000);
t2967 = t2991 ^ 2;
t3205 = t2903 * t2986;
t3220 = t2874 * t2992;
t2789 = t2985 * t3220 + t3205;
t3052 = t2789 * t3170 - t2790 * t2965 + t2790;
t3246 = t2860 * t2992;
t3115 = t2976 * t3246;
t2844 = t2860 * t2985;
t3118 = t2976 * t2844;
t3189 = t2940 * t2903;
t2636 = (t2768 * t2940 - t2934 * t3115) * t2967 + (-t2934 * t3052 + t2940 * t3118) * t2991 + t3189;
t3313 = t2636 * t3375;
t3195 = t2934 * t2903;
t2637 = (t2768 * t2934 + t2940 * t3115) * t2967 + (t2934 * t3118 + t2940 * t3052) * t2991 + t3195;
t3312 = t2637 * t3375;
t2769 = t2904 * t2965 - qJ(3,4) + t3088;
t3001 = legFrame(4,2);
t2935 = sin(t3001);
t2941 = cos(t3001);
t2968 = t2993 ^ 2;
t3203 = t2904 * t2988;
t3218 = t2874 * t2994;
t2791 = t2987 * t3218 + t3203;
t3051 = t2791 * t3170 - t2792 * t2965 + t2792;
t3244 = t2860 * t2994;
t3114 = t2976 * t3244;
t2845 = t2860 * t2987;
t3117 = t2976 * t2845;
t3188 = t2941 * t2904;
t2638 = (t2769 * t2941 - t2935 * t3114) * t2968 + (-t2935 * t3051 + t2941 * t3117) * t2993 + t3188;
t3311 = t2638 * t3374;
t3194 = t2935 * t2904;
t2639 = (t2769 * t2935 + t2941 * t3114) * t2968 + (t2935 * t3117 + t2941 * t3051) * t2993 + t3194;
t3310 = t2639 * t3374;
t2770 = t2905 * t2965 - qJ(3,3) + t3088;
t3002 = legFrame(3,2);
t2936 = sin(t3002);
t2942 = cos(t3002);
t2970 = t3011 ^ 2;
t3201 = t2905 * t3006;
t3216 = t2874 * t3012;
t2793 = t3005 * t3216 + t3201;
t3050 = t2793 * t3170 - t2794 * t2965 + t2794;
t3242 = t2860 * t3012;
t3110 = t2976 * t3242;
t2846 = t2860 * t3005;
t3113 = t2976 * t2846;
t3187 = t2942 * t2905;
t2640 = (t2770 * t2942 - t2936 * t3110) * t2970 + (-t2936 * t3050 + t2942 * t3113) * t3011 + t3187;
t3309 = t2640 * t3373;
t3193 = t2936 * t2905;
t2641 = (t2770 * t2936 + t2942 * t3110) * t2970 + (t2936 * t3113 + t2942 * t3050) * t3011 + t3193;
t3308 = t2641 * t3373;
t2771 = t2906 * t2965 - qJ(3,2) + t3088;
t3003 = legFrame(2,2);
t2937 = sin(t3003);
t2943 = cos(t3003);
t2971 = t3013 ^ 2;
t3199 = t2906 * t3008;
t3214 = t2874 * t3014;
t2795 = t3007 * t3214 + t3199;
t3049 = t2795 * t3170 - t2796 * t2965 + t2796;
t3240 = t2860 * t3014;
t3109 = t2976 * t3240;
t2847 = t2860 * t3007;
t3112 = t2976 * t2847;
t3186 = t2943 * t2906;
t2642 = (t2771 * t2943 - t2937 * t3109) * t2971 + (-t2937 * t3049 + t2943 * t3112) * t3013 + t3186;
t3307 = t2642 * t3372;
t3192 = t2937 * t2906;
t2643 = (t2771 * t2937 + t2943 * t3109) * t2971 + (t2937 * t3112 + t2943 * t3049) * t3013 + t3192;
t3306 = t2643 * t3372;
t2772 = t2907 * t2965 - qJ(3,1) + t3088;
t3004 = legFrame(1,2);
t2938 = sin(t3004);
t2944 = cos(t3004);
t2972 = t3015 ^ 2;
t3197 = t2907 * t3010;
t3212 = t2874 * t3016;
t2797 = t3009 * t3212 + t3197;
t3048 = t2797 * t3170 - t2798 * t2965 + t2798;
t3238 = t2860 * t3016;
t3108 = t2976 * t3238;
t2848 = t2860 * t3009;
t3111 = t2976 * t2848;
t3185 = t2944 * t2907;
t2644 = (t2772 * t2944 - t2938 * t3108) * t2972 + (-t2938 * t3048 + t2944 * t3111) * t3015 + t3185;
t3305 = t2644 * t3371;
t3191 = t2938 * t2907;
t2645 = (t2772 * t2938 + t2944 * t3108) * t2972 + (t2938 * t3111 + t2944 * t3048) * t3015 + t3191;
t3304 = t2645 * t3371;
t2706 = t2788 * t2976 + t2989 * t3248;
t3169 = t2976 * t2989;
t2781 = -t2902 * t3169 + t2843;
t3223 = t2874 * t2989;
t2652 = (t2787 * t2939 - t2933 * t3223) * t2965 + (t2706 * t2939 + t2781 * t2933) * t2979 - t2984 * t3190;
t3303 = t2652 * t3376;
t2653 = (-t2787 * t2933 - t2939 * t3223) * t2965 + (-t2706 * t2933 + t2781 * t2939) * t2979 + t2984 * t3196;
t3302 = t2653 * t3376;
t2707 = t2790 * t2976 + t2991 * t3246;
t3168 = t2976 * t2991;
t2782 = -t2903 * t3168 + t2844;
t3221 = t2874 * t2991;
t2654 = (t2789 * t2940 - t2934 * t3221) * t2965 + (t2707 * t2940 + t2782 * t2934) * t2979 - t2986 * t3189;
t3301 = t2654 * t3375;
t2655 = (-t2789 * t2934 - t2940 * t3221) * t2965 + (-t2707 * t2934 + t2782 * t2940) * t2979 + t2986 * t3195;
t3300 = t2655 * t3375;
t2708 = t2792 * t2976 + t2993 * t3244;
t3167 = t2976 * t2993;
t2783 = -t2904 * t3167 + t2845;
t3219 = t2874 * t2993;
t2656 = (t2791 * t2941 - t2935 * t3219) * t2965 + (t2708 * t2941 + t2783 * t2935) * t2979 - t2988 * t3188;
t3299 = t2656 * t3374;
t2657 = (-t2791 * t2935 - t2941 * t3219) * t2965 + (-t2708 * t2935 + t2783 * t2941) * t2979 + t2988 * t3194;
t3298 = t2657 * t3374;
t2709 = t2794 * t2976 + t3011 * t3242;
t3166 = t2976 * t3011;
t2784 = -t2905 * t3166 + t2846;
t3217 = t2874 * t3011;
t2658 = (t2793 * t2942 - t2936 * t3217) * t2965 + (t2709 * t2942 + t2784 * t2936) * t2979 - t3006 * t3187;
t3297 = t2658 * t3373;
t2659 = (-t2793 * t2936 - t2942 * t3217) * t2965 + (-t2709 * t2936 + t2784 * t2942) * t2979 + t3006 * t3193;
t3296 = t2659 * t3373;
t2710 = t2796 * t2976 + t3013 * t3240;
t3165 = t2976 * t3013;
t2785 = -t2906 * t3165 + t2847;
t3215 = t2874 * t3013;
t2660 = (t2795 * t2943 - t2937 * t3215) * t2965 + (t2710 * t2943 + t2785 * t2937) * t2979 - t3008 * t3186;
t3295 = t2660 * t3372;
t2661 = (-t2795 * t2937 - t2943 * t3215) * t2965 + (-t2710 * t2937 + t2785 * t2943) * t2979 + t3008 * t3192;
t3294 = t2661 * t3372;
t2711 = t2798 * t2976 + t3015 * t3238;
t3164 = t2976 * t3015;
t2786 = -t2907 * t3164 + t2848;
t3213 = t2874 * t3015;
t2662 = (t2797 * t2944 - t2938 * t3213) * t2965 + (t2711 * t2944 + t2786 * t2938) * t2979 - t3010 * t3185;
t3293 = t2662 * t3371;
t2663 = (-t2797 * t2938 - t2944 * t3213) * t2965 + (-t2711 * t2938 + t2786 * t2944) * t2979 + t3010 * t3191;
t3292 = t2663 * t3371;
t2682 = (-t2851 * t2983 + t3163) * t2965 + (-t2984 * t3249 + (-t2983 * t3207 - t3222) * t2976) * t2979 - t3163;
t3279 = t2682 * t3376;
t2683 = (-t2852 * t2985 + t3162) * t2965 + (-t2986 * t3247 + (-t2985 * t3205 - t3220) * t2976) * t2979 - t3162;
t3278 = t2683 * t3375;
t2684 = (-t2853 * t2987 + t3161) * t2965 + (-t2988 * t3245 + (-t2987 * t3203 - t3218) * t2976) * t2979 - t3161;
t3277 = t2684 * t3374;
t2685 = (-t2855 * t3005 + t3159) * t2965 + (-t3006 * t3243 + (-t3005 * t3201 - t3216) * t2976) * t2979 - t3159;
t3276 = t2685 * t3373;
t2686 = (-t2856 * t3007 + t3158) * t2965 + (-t3008 * t3241 + (-t3007 * t3199 - t3214) * t2976) * t2979 - t3158;
t3275 = t2686 * t3372;
t2687 = (-t2857 * t3009 + t3157) * t2965 + (-t3010 * t3239 + (-t3009 * t3197 - t3212) * t2976) * t2979 - t3157;
t3274 = t2687 * t3371;
t2911 = 0.2e1 * t3321;
t3153 = 0.2e1 * pkin(1) * mrSges(3,1) + t2911;
t3154 = (-0.2e1 * t3326 + t3370) * pkin(1);
t3074 = t3153 * t2977 + Ifges(2,3) + t3154 + t3320;
t3155 = -0.2e1 * t3139 - t3160;
t3098 = t3155 + t3332;
t3140 = 0.2e1 * t3170;
t2691 = (t3098 - t3152) * t2965 + t2837 * t3140 + t3074 + t3152;
t3273 = t2691 * t3376;
t2692 = (t3098 - t3151) * t2965 + t2838 * t3140 + t3074 + t3151;
t3272 = t2692 * t3375;
t2693 = (t3098 - t3150) * t2965 + t2839 * t3140 + t3074 + t3150;
t3271 = t2693 * t3374;
t2694 = (t3098 - t3149) * t2965 + t2840 * t3140 + t3074 + t3149;
t3270 = t2694 * t3373;
t2695 = (t3098 - t3148) * t2965 + t2841 * t3140 + t3074 + t3148;
t3269 = t2695 * t3372;
t2696 = (t3098 - t3147) * t2965 + t2842 * t3140 + t3074 + t3147;
t3268 = t2696 * t3371;
t2889 = mrSges(3,2) * t2977 + t3327;
t2875 = mrSges(3,1) * t2977 - t3326 + t3370;
t3209 = t2875 * t2979;
t2773 = t2889 * t2983 - t2989 * t3209;
t3267 = t3376 * t2773;
t2774 = t2889 * t2985 - t2991 * t3209;
t3265 = t3375 * t2774;
t2775 = t2889 * t2987 - t2993 * t3209;
t3263 = t3374 * t2775;
t2778 = t2889 * t3005 - t3011 * t3209;
t3261 = t3373 * t2778;
t2779 = t2889 * t3007 - t3013 * t3209;
t3259 = t3372 * t2779;
t2780 = t2889 * t3009 - t3015 * t3209;
t3257 = t3371 * t2780;
t3211 = t2875 * t2976 ^ 2;
t3210 = t2875 * t2976;
t3184 = t2945 * t2948;
t3182 = t2946 * t2947;
t3181 = t2946 * t2950;
t2973 = Ifges(4,1) - Ifges(4,2);
t3180 = t2946 * t2973;
t2876 = Ifges(4,6) * t2948 + t3317;
t3178 = t2947 * t2876;
t3138 = Ifges(4,4) * t3184;
t3137 = t2688 * t3376 * t2989;
t3136 = t2688 * t3169;
t3135 = t2689 * t3375 * t2991;
t3134 = t2689 * t3168;
t3133 = t2690 * t3374 * t2993;
t3132 = t2690 * t3167;
t3131 = t2697 * t3373 * t3011;
t3130 = t2697 * t3166;
t3129 = t2698 * t3372 * t3013;
t3128 = t2698 * t3165;
t3127 = t2699 * t3371 * t3015;
t3126 = t2699 * t3164;
t3125 = t3376 * t3210;
t3124 = t3375 * t3210;
t3123 = t3374 * t3210;
t3122 = t3373 * t3210;
t3121 = t3372 * t3210;
t3120 = t3371 * t3210;
t3101 = t2965 * t2911 + t3153;
t3100 = t2974 * t3140;
t3097 = -(Ifges(4,6) * t2949 - t2945 * t3180) * t2948 - t2949 * t3317 - t3318;
t3096 = t2895 * t3137;
t3095 = t2896 * t3135;
t3094 = t2897 * t3133;
t3093 = t2898 * t3131;
t3092 = t2899 * t3129;
t3091 = t2900 * t3127;
t3090 = Ifges(1,3) + t3155 + t3333;
t3087 = -t2984 * t3081 + t2990 * t3342;
t3086 = -t2986 * t3080 + t2992 * t3343;
t3085 = -t2988 * t3079 + t2994 * t3344;
t3084 = -t3006 * t3078 + t3012 * t3345;
t3083 = -t3008 * t3077 + t3014 * t3346;
t3082 = -t3010 * t3076 + t3016 * t3347;
t3075 = -t3369 * t2979 + Ifges(2,4);
t2931 = t2948 ^ 2;
t3073 = t2931 * t2973 - 0.2e1 * t3138;
t2801 = t2946 * t3030 - t3360 * t2949;
t2574 = (t2634 * t2801 + t2635 * t2731) * t3377;
t2580 = (t2652 * t2731 + t2653 * t2801) * t3377;
t2735 = t2989 * t3348 + t2843;
t2670 = t2939 * t2735 - t2933 * t3087;
t2673 = t2933 * t2735 + t2939 * t3087;
t2616 = (t2670 * t2801 + t2673 * t2731) * t2895;
t3060 = Ifges(2,2) + Ifges(3,3) + (t2965 + 0.1e1) * t3160 + t3154 - t3333;
t2646 = ((t2912 * t3140 + t3101) * t2977 + (t3152 - t3332) * t2965 + t2915 * t3100 + t3060 - t3152) * t2966 + 0.2e1 * (t2976 * t3059 + t3075) * t2983 * t2989 + t3090 + t3152;
t2403 = t2574 * t2664 + t2580 * t2646 + t2616 * t2773;
t2802 = t2946 * t3031 - t3359 * t2949;
t2575 = (t2636 * t2802 + t2637 * t2740) * t3378;
t2581 = (t2654 * t2740 + t2655 * t2802) * t3378;
t2736 = t2991 * t3349 + t2844;
t2671 = t2940 * t2736 - t2934 * t3086;
t2674 = t2934 * t2736 + t2940 * t3086;
t2617 = (t2671 * t2802 + t2674 * t2740) * t2896;
t2647 = ((t2913 * t3140 + t3101) * t2977 + (t3151 - t3332) * t2965 + t2916 * t3100 + t3060 - t3151) * t2967 + 0.2e1 * (t2976 * t3058 + t3075) * t2985 * t2991 + t3090 + t3151;
t2404 = t2575 * t2665 + t2581 * t2647 + t2617 * t2774;
t2803 = t2946 * t3032 - t3358 * t2949;
t2576 = (t2638 * t2803 + t2639 * t2744) * t3379;
t2582 = (t2656 * t2744 + t2657 * t2803) * t3379;
t2737 = t2993 * t3350 + t2845;
t2672 = t2941 * t2737 - t2935 * t3085;
t2675 = t2935 * t2737 + t2941 * t3085;
t2618 = (t2672 * t2803 + t2675 * t2744) * t2897;
t2648 = ((t2914 * t3140 + t3101) * t2977 + (t3150 - t3332) * t2965 + t2917 * t3100 + t3060 - t3150) * t2968 + 0.2e1 * (t2976 * t3057 + t3075) * t2987 * t2993 + t3090 + t3150;
t2405 = t2576 * t2666 + t2582 * t2648 + t2618 * t2775;
t2804 = t2946 * t3033 - t3357 * t2949;
t2577 = (t2640 * t2804 + t2641 * t2748) * t3380;
t2583 = (t2658 * t2748 + t2659 * t2804) * t3380;
t2763 = t3011 * t3351 + t2846;
t2676 = t2942 * t2763 - t2936 * t3084;
t2679 = t2936 * t2763 + t2942 * t3084;
t2619 = (t2676 * t2804 + t2679 * t2748) * t2898;
t2649 = ((t2918 * t3140 + t3101) * t2977 + (t3149 - t3332) * t2965 + t2921 * t3100 + t3060 - t3149) * t2970 + 0.2e1 * (t2976 * t3056 + t3075) * t3005 * t3011 + t3090 + t3149;
t2409 = t2577 * t2667 + t2583 * t2649 + t2619 * t2778;
t2805 = t2946 * t3034 - t3356 * t2949;
t2578 = (t2642 * t2805 + t2643 * t2752) * t3381;
t2584 = (t2660 * t2752 + t2661 * t2805) * t3381;
t2764 = t3013 * t3352 + t2847;
t2677 = t2943 * t2764 - t2937 * t3083;
t2680 = t2937 * t2764 + t2943 * t3083;
t2620 = (t2677 * t2805 + t2680 * t2752) * t2899;
t2650 = ((t2919 * t3140 + t3101) * t2977 + (t3148 - t3332) * t2965 + t2922 * t3100 + t3060 - t3148) * t2971 + 0.2e1 * (t2976 * t3055 + t3075) * t3007 * t3013 + t3090 + t3148;
t2410 = t2578 * t2668 + t2584 * t2650 + t2620 * t2779;
t2806 = t2946 * t3035 - t3355 * t2949;
t2579 = (t2644 * t2806 + t2645 * t2756) * t3382;
t2585 = (t2662 * t2756 + t2663 * t2806) * t3382;
t2765 = t3015 * t3353 + t2848;
t2678 = t2944 * t2765 - t2938 * t3082;
t2681 = t2938 * t2765 + t2944 * t3082;
t2621 = (t2678 * t2806 + t2681 * t2756) * t2900;
t2651 = ((t2920 * t3140 + t3101) * t2977 + (t3147 - t3332) * t2965 + t2923 * t3100 + t3060 - t3147) * t2972 + 0.2e1 * (t2976 * t3054 + t3075) * t3009 * t3015 + t3090 + t3147;
t2411 = t2579 * t2669 + t2585 * t2651 + t2621 * t2780;
t2412 = t2574 * t2691 + t2580 * t2664 - t2616 * t3210;
t2413 = t2575 * t2692 + t2581 * t2665 - t2617 * t3210;
t2414 = t2576 * t2693 + t2582 * t2666 - t2618 * t3210;
t2415 = t2577 * t2694 + t2583 * t2667 - t2619 * t3210;
t2416 = t2578 * t2695 + t2584 * t2668 - t2620 * t3210;
t2417 = t2579 * t2696 + t2585 * t2669 - t2621 * t3210;
t2445 = m(3) * t2616 - t2574 * t3210 + t2580 * t2773;
t2446 = m(3) * t2617 - t2575 * t3210 + t2581 * t2774;
t2447 = m(3) * t2618 - t2576 * t3210 + t2582 * t2775;
t2451 = m(3) * t2619 - t2577 * t3210 + t2583 * t2778;
t2452 = m(3) * t2620 - t2578 * t3210 + t2584 * t2779;
t2453 = m(3) * t2621 - t2579 * t3210 + t2585 * t2780;
t3072 = t2403 * t2580 + t2404 * t2581 + t2405 * t2582 + t2409 * t2583 + t2410 * t2584 + t2412 * t2574 + t2413 * t2575 + t2414 * t2576 + t2415 * t2577 + t2416 * t2578 + t2445 * t2616 + t2446 * t2617 + t2447 * t2618 + t2451 * t2619 + t2452 * t2620 + t2411 * t2585 + t2417 * t2579 + t2453 * t2621;
t2592 = (t2635 * t2730 + t2801 * t3136) * t3377;
t2593 = (t2637 * t2741 + t2802 * t3134) * t3378;
t2594 = (t2639 * t2745 + t2803 * t3132) * t3379;
t2598 = (t2641 * t2749 + t2804 * t3130) * t3380;
t2599 = (t2643 * t2753 + t2805 * t3128) * t3381;
t2600 = (t2645 * t2757 + t2806 * t3126) * t3382;
t2604 = (t2652 * t2730 - t2682 * t2801) * t3377;
t2605 = (t2654 * t2741 - t2683 * t2802) * t3378;
t2606 = (t2656 * t2745 - t2684 * t2803) * t3379;
t2607 = (t2658 * t2749 - t2685 * t2804) * t3380;
t2608 = (t2660 * t2753 - t2686 * t2805) * t3381;
t2609 = (t2662 * t2757 - t2687 * t2806) * t3382;
t2628 = (t2673 * t2730 + t2688 * t2801) * t2895;
t2629 = (t2674 * t2741 + t2689 * t2802) * t2896;
t2630 = (t2675 * t2745 + t2690 * t2803) * t2897;
t2631 = (t2679 * t2749 + t2697 * t2804) * t2898;
t2632 = (t2680 * t2753 + t2698 * t2805) * t2899;
t2633 = (t2681 * t2757 + t2699 * t2806) * t2900;
t3071 = -t2403 * t2604 - t2404 * t2605 - t2405 * t2606 - t2409 * t2607 - t2410 * t2608 - t2412 * t2592 - t2413 * t2593 - t2414 * t2594 - t2415 * t2598 - t2416 * t2599 - t2445 * t2628 - t2446 * t2629 - t2447 * t2630 - t2451 * t2631 - t2452 * t2632 - t2411 * t2609 - t2417 * t2600 - t2453 * t2633;
t2586 = (-t2634 * t2730 + t2731 * t3136) * t3377;
t2595 = (-t2653 * t2730 - t2682 * t2731) * t3377;
t2622 = (-t2670 * t2730 + t2688 * t2731) * t2895;
t2421 = t2586 * t2664 + t2595 * t2646 + t2622 * t2773;
t2587 = (-t2636 * t2741 + t2740 * t3134) * t3378;
t2596 = (-t2655 * t2741 - t2683 * t2740) * t3378;
t2623 = (-t2671 * t2741 + t2689 * t2740) * t2896;
t2422 = t2587 * t2665 + t2596 * t2647 + t2623 * t2774;
t2588 = (-t2638 * t2745 + t2744 * t3132) * t3379;
t2597 = (-t2657 * t2745 - t2684 * t2744) * t3379;
t2624 = (-t2672 * t2745 + t2690 * t2744) * t2897;
t2423 = t2588 * t2666 + t2597 * t2648 + t2624 * t2775;
t2589 = (-t2640 * t2749 + t2748 * t3130) * t3380;
t2601 = (-t2659 * t2749 - t2685 * t2748) * t3380;
t2625 = (-t2676 * t2749 + t2697 * t2748) * t2898;
t2427 = t2589 * t2667 + t2601 * t2649 + t2625 * t2778;
t2590 = (-t2642 * t2753 + t2752 * t3128) * t3381;
t2602 = (-t2661 * t2753 - t2686 * t2752) * t3381;
t2626 = (-t2677 * t2753 + t2698 * t2752) * t2899;
t2428 = t2590 * t2668 + t2602 * t2650 + t2626 * t2779;
t2591 = (-t2644 * t2757 + t2756 * t3126) * t3382;
t2603 = (-t2663 * t2757 - t2687 * t2756) * t3382;
t2627 = (-t2678 * t2757 + t2699 * t2756) * t2900;
t2429 = t2591 * t2669 + t2603 * t2651 + t2627 * t2780;
t2442 = t2586 * t2691 + t2595 * t2664 - t2622 * t3210;
t2443 = t2587 * t2692 + t2596 * t2665 - t2623 * t3210;
t2444 = t2588 * t2693 + t2597 * t2666 - t2624 * t3210;
t2448 = t2589 * t2694 + t2601 * t2667 - t2625 * t3210;
t2449 = t2590 * t2695 + t2602 * t2668 - t2626 * t3210;
t2450 = t2591 * t2696 + t2603 * t2669 - t2627 * t3210;
t2484 = m(3) * t2622 - t2586 * t3210 + t2595 * t2773;
t2485 = m(3) * t2623 - t2587 * t3210 + t2596 * t2774;
t2486 = m(3) * t2624 - t2588 * t3210 + t2597 * t2775;
t2487 = m(3) * t2625 - t2589 * t3210 + t2601 * t2778;
t2488 = m(3) * t2626 - t2590 * t3210 + t2602 * t2779;
t2489 = m(3) * t2627 - t2591 * t3210 + t2603 * t2780;
t3070 = t2421 * t2580 + t2422 * t2581 + t2423 * t2582 + t2427 * t2583 + t2428 * t2584 + t2442 * t2574 + t2443 * t2575 + t2444 * t2576 + t2448 * t2577 + t2449 * t2578 + t2484 * t2616 + t2485 * t2617 + t2486 * t2618 + t2487 * t2619 + t2488 * t2620 + t2429 * t2585 + t2450 * t2579 + t2489 * t2621;
t2433 = t2592 * t2664 + t2604 * t2646 + t2628 * t2773;
t2434 = t2593 * t2665 + t2605 * t2647 + t2629 * t2774;
t2435 = t2594 * t2666 + t2606 * t2648 + t2630 * t2775;
t2439 = t2598 * t2667 + t2607 * t2649 + t2631 * t2778;
t2440 = t2599 * t2668 + t2608 * t2650 + t2632 * t2779;
t2441 = t2600 * t2669 + t2609 * t2651 + t2633 * t2780;
t2454 = t2592 * t2691 + t2604 * t2664 - t2628 * t3210;
t2455 = t2593 * t2692 + t2605 * t2665 - t2629 * t3210;
t2456 = t2594 * t2693 + t2606 * t2666 - t2630 * t3210;
t2457 = t2598 * t2694 + t2607 * t2667 - t2631 * t3210;
t2458 = t2599 * t2695 + t2608 * t2668 - t2632 * t3210;
t2459 = t2600 * t2696 + t2609 * t2669 - t2633 * t3210;
t2490 = m(3) * t2628 - t2592 * t3210 + t2604 * t2773;
t2491 = m(3) * t2629 - t2593 * t3210 + t2605 * t2774;
t2492 = m(3) * t2630 - t2594 * t3210 + t2606 * t2775;
t2493 = m(3) * t2631 - t2598 * t3210 + t2607 * t2778;
t2494 = m(3) * t2632 - t2599 * t3210 + t2608 * t2779;
t2495 = m(3) * t2633 - t2600 * t3210 + t2609 * t2780;
t3069 = t2433 * t2580 + t2434 * t2581 + t2435 * t2582 + t2439 * t2583 + t2440 * t2584 + t2454 * t2574 + t2455 * t2575 + t2456 * t2576 + t2457 * t2577 + t2458 * t2578 + t2490 * t2616 + t2491 * t2617 + t2492 * t2618 + t2493 * t2619 + t2494 * t2620 + t2441 * t2585 + t2459 * t2579 + t2495 * t2621;
t3068 = t2421 * t2604 + t2422 * t2605 + t2423 * t2606 + t2427 * t2607 + t2428 * t2608 + t2442 * t2592 + t2443 * t2593 + t2444 * t2594 + t2448 * t2598 + t2449 * t2599 + t2484 * t2628 + t2485 * t2629 + t2486 * t2630 + t2487 * t2631 + t2488 * t2632 + t2429 * t2609 + t2450 * t2600 + t2489 * t2633;
t3067 = -t2433 * t2604 - t2434 * t2605 - t2435 * t2606 - t2439 * t2607 - t2440 * t2608 - t2454 * t2592 - t2455 * t2593 - t2456 * t2594 - t2457 * t2598 - t2458 * t2599 - t2490 * t2628 - t2491 * t2629 - t2492 * t2630 - t2493 * t2631 - t2494 * t2632 - t2441 * t2609 - t2459 * t2600 - t2495 * t2633;
t2520 = (t2635 * t3388 + t2646 * t3303 + t2673 * t2773) * t2895;
t2522 = (t2637 * t3387 + t2647 * t3301 + t2674 * t2774) * t2896;
t2524 = (t2639 * t3386 + t2648 * t3299 + t2675 * t2775) * t2897;
t2526 = (t2641 * t3385 + t2649 * t3297 + t2679 * t2778) * t2898;
t2528 = (t2643 * t3384 + t2650 * t3295 + t2680 * t2779) * t2899;
t2530 = (t2645 * t3383 + t2651 * t3293 + t2681 * t2780) * t2900;
t2532 = (t2635 * t3273 + t2652 * t3388 - t2673 * t3210) * t2895;
t2534 = (t2637 * t3272 + t2654 * t3387 - t2674 * t3210) * t2896;
t2536 = (t2639 * t3271 + t2656 * t3386 - t2675 * t3210) * t2897;
t2538 = (t2641 * t3270 + t2658 * t3385 - t2679 * t3210) * t2898;
t2540 = (t2643 * t3269 + t2660 * t3384 - t2680 * t3210) * t2899;
t2542 = (t2645 * t3268 + t2662 * t3383 - t2681 * t3210) * t2900;
t2556 = (m(3) * t2673 - t2635 * t3125 + t2652 * t3267) * t2895;
t2558 = (m(3) * t2674 - t2637 * t3124 + t2654 * t3265) * t2896;
t2560 = (m(3) * t2675 - t2639 * t3123 + t2656 * t3263) * t2897;
t2562 = (m(3) * t2679 - t2641 * t3122 + t2658 * t3261) * t2898;
t2564 = (m(3) * t2680 - t2643 * t3121 + t2660 * t3259) * t2899;
t2566 = (m(3) * t2681 - t2645 * t3120 + t2662 * t3257) * t2900;
t3066 = t2520 * t2580 + t2522 * t2581 + t2524 * t2582 + t2526 * t2583 + t2528 * t2584 + t2532 * t2574 + t2534 * t2575 + t2536 * t2576 + t2538 * t2577 + t2540 * t2578 + t2556 * t2616 + t2558 * t2617 + t2560 * t2618 + t2562 * t2619 + t2564 * t2620 + t2530 * t2585 + t2542 * t2579 + t2566 * t2621;
t2521 = (t2634 * t3388 + t2646 * t3302 + t2670 * t2773) * t2895;
t2523 = (t2636 * t3387 + t2647 * t3300 + t2671 * t2774) * t2896;
t2525 = (t2638 * t3386 + t2648 * t3298 + t2672 * t2775) * t2897;
t2527 = (t2640 * t3385 + t2649 * t3296 + t2676 * t2778) * t2898;
t2529 = (t2642 * t3384 + t2650 * t3294 + t2677 * t2779) * t2899;
t2531 = (t2644 * t3383 + t2651 * t3292 + t2678 * t2780) * t2900;
t2533 = (t2634 * t3273 + t2653 * t3388 - t2670 * t3210) * t2895;
t2535 = (t2636 * t3272 + t2655 * t3387 - t2671 * t3210) * t2896;
t2537 = (t2638 * t3271 + t2657 * t3386 - t2672 * t3210) * t2897;
t2539 = (t2640 * t3270 + t2659 * t3385 - t2676 * t3210) * t2898;
t2541 = (t2642 * t3269 + t2661 * t3384 - t2677 * t3210) * t2899;
t2543 = (t2644 * t3268 + t2663 * t3383 - t2678 * t3210) * t2900;
t2557 = (m(3) * t2670 - t2634 * t3125 + t2653 * t3267) * t2895;
t2559 = (m(3) * t2671 - t2636 * t3124 + t2655 * t3265) * t2896;
t2561 = (m(3) * t2672 - t2638 * t3123 + t2657 * t3263) * t2897;
t2563 = (m(3) * t2676 - t2640 * t3122 + t2659 * t3261) * t2898;
t2565 = (m(3) * t2677 - t2642 * t3121 + t2661 * t3259) * t2899;
t2567 = (m(3) * t2678 - t2644 * t3120 + t2663 * t3257) * t2900;
t3065 = t2521 * t2580 + t2523 * t2581 + t2525 * t2582 + t2527 * t2583 + t2529 * t2584 + t2533 * t2574 + t2535 * t2575 + t2537 * t2576 + t2539 * t2577 + t2541 * t2578 + t2557 * t2616 + t2559 * t2617 + t2561 * t2618 + t2563 * t2619 + t2565 * t2620 + t2531 * t2585 + t2543 * t2579 + t2567 * t2621;
t3064 = t2520 * t2604 + t2522 * t2605 + t2524 * t2606 + t2526 * t2607 + t2528 * t2608 + t2532 * t2592 + t2534 * t2593 + t2536 * t2594 + t2538 * t2598 + t2540 * t2599 + t2556 * t2628 + t2558 * t2629 + t2560 * t2630 + t2562 * t2631 + t2564 * t2632 + t2530 * t2609 + t2542 * t2600 + t2566 * t2633;
t3063 = t2521 * t2604 + t2523 * t2605 + t2525 * t2606 + t2527 * t2607 + t2529 * t2608 + t2533 * t2592 + t2535 * t2593 + t2537 * t2594 + t2539 * t2598 + t2541 * t2599 + t2557 * t2628 + t2559 * t2629 + t2561 * t2630 + t2563 * t2631 + t2565 * t2632 + t2531 * t2609 + t2543 * t2600 + t2567 * t2633;
t2550 = (t2646 * t3279 - t2688 * t2773 - t3136 * t3388) * t2895;
t2551 = (t2647 * t3278 - t2689 * t2774 - t3134 * t3387) * t2896;
t2552 = (t2648 * t3277 - t2690 * t2775 - t3132 * t3386) * t2897;
t2553 = (t2649 * t3276 - t2697 * t2778 - t3130 * t3385) * t2898;
t2554 = (t2650 * t3275 - t2698 * t2779 - t3128 * t3384) * t2899;
t2555 = (t2651 * t3274 - t2699 * t2780 - t3126 * t3383) * t2900;
t2568 = (t2664 * t3279 + (t2688 * t2875 - t2691 * t3137) * t2976) * t2895;
t2569 = (t2665 * t3278 + (t2689 * t2875 - t2692 * t3135) * t2976) * t2896;
t2570 = (t2666 * t3277 + (t2690 * t2875 - t2693 * t3133) * t2976) * t2897;
t2571 = (t2667 * t3276 + (-t2694 * t3131 + t2697 * t2875) * t2976) * t2898;
t2572 = (t2668 * t3275 + (-t2695 * t3129 + t2698 * t2875) * t2976) * t2899;
t2573 = (t2669 * t3274 + (-t2696 * t3127 + t2699 * t2875) * t2976) * t2900;
t2610 = (-m(3) * t2688 + t2682 * t3267 + t3137 * t3211) * t2895;
t2611 = (-m(3) * t2689 + t2683 * t3265 + t3135 * t3211) * t2896;
t2612 = (-m(3) * t2690 + t2684 * t3263 + t3133 * t3211) * t2897;
t2613 = (-m(3) * t2697 + t2685 * t3261 + t3131 * t3211) * t2898;
t2614 = (-m(3) * t2698 + t2686 * t3259 + t3129 * t3211) * t2899;
t2615 = (-m(3) * t2699 + t2687 * t3257 + t3127 * t3211) * t2900;
t3062 = t2550 * t2580 + t2551 * t2581 + t2552 * t2582 + t2553 * t2583 + t2554 * t2584 + t2568 * t2574 + t2569 * t2575 + t2570 * t2576 + t2571 * t2577 + t2572 * t2578 + t2610 * t2616 + t2611 * t2617 + t2612 * t2618 + t2613 * t2619 + t2614 * t2620 + t2555 * t2585 + t2573 * t2579 + t2615 * t2621;
t3061 = -t2550 * t2604 - t2551 * t2605 - t2552 * t2606 - t2553 * t2607 - t2554 * t2608 - t2568 * t2592 - t2569 * t2593 - t2570 * t2594 - t2571 * t2598 - t2572 * t2599 - t2610 * t2628 - t2611 * t2629 - t2612 * t2630 - t2613 * t2631 - t2614 * t2632 - t2555 * t2609 - t2573 * t2600 - t2615 * t2633;
t2800 = t2858 * t2949 + t2946 * t3021;
t3047 = t2403 * t2595 + t2404 * t2596 + t2405 * t2597 + t2409 * t2601 + t2410 * t2602 + t2411 * t2603 + t2412 * t2586 + t2413 * t2587 + t2414 * t2588 + t2415 * t2589 + t2416 * t2590 + t2417 * t2591 + t2445 * t2622 + t2446 * t2623 + t2447 * t2624 + t2451 * t2625 + t2452 * t2626 + t2453 * t2627;
t3046 = t2433 * t2595 + t2434 * t2596 + t2435 * t2597 + t2439 * t2601 + t2440 * t2602 + t2441 * t2603 + t2454 * t2586 + t2455 * t2587 + t2456 * t2588 + t2457 * t2589 + t2458 * t2590 + t2459 * t2591 + t2490 * t2622 + t2491 * t2623 + t2492 * t2624 + t2493 * t2625 + t2494 * t2626 + t2495 * t2627;
t3045 = t2520 * t2595 + t2522 * t2596 + t2524 * t2597 + t2526 * t2601 + t2528 * t2602 + t2530 * t2603 + t2532 * t2586 + t2534 * t2587 + t2536 * t2588 + t2538 * t2589 + t2540 * t2590 + t2542 * t2591 + t2556 * t2622 + t2558 * t2623 + t2560 * t2624 + t2562 * t2625 + t2564 * t2626 + t2566 * t2627;
t3044 = t2550 * t2595 + t2551 * t2596 + t2552 * t2597 + t2553 * t2601 + t2554 * t2602 + t2555 * t2603 + t2568 * t2586 + t2569 * t2587 + t2570 * t2588 + t2571 * t2589 + t2572 * t2590 + t2573 * t2591 + t2610 * t2622 + t2611 * t2623 + t2612 * t2624 + t2613 * t2625 + t2614 * t2626 + t2615 * t2627;
t3043 = t2421 * t2595 + t2422 * t2596 + t2423 * t2597 + t2427 * t2601 + t2428 * t2602 + t2429 * t2603 + t2442 * t2586 + t2443 * t2587 + t2444 * t2588 + t2448 * t2589 + t2449 * t2590 + t2450 * t2591 + Ifges(4,3) + t2484 * t2622 + t2485 * t2623 + t2486 * t2624 + t2487 * t2625 + t2488 * t2626 + t2489 * t2627;
t3042 = t2521 * t2595 + t2523 * t2596 + t2525 * t2597 + t2527 * t2601 + t2529 * t2602 + t2531 * t2603 + t2533 * t2586 + t2535 * t2587 + t2537 * t2588 + t2539 * t2589 + t2541 * t2590 + t2543 * t2591 + t2557 * t2622 + t2559 * t2623 + t2561 * t2624 + t2563 * t2625 + t2565 * t2626 + t2567 * t2627 - t3179;
t2932 = t2949 ^ 2;
t2836 = -t2950 * t2973 + t3182 * t3335;
t2833 = t2931 * t3335 + t2973 * t3184 - Ifges(4,4);
t2832 = t3073 + t3319;
t2819 = -Ifges(4,3) * t2949 + t3368;
t1 = [m(4) + (t2530 * t3293 + t2542 * t3304 + t2566 * t2681) * t2900 + (t2528 * t3295 + t2540 * t3306 + t2564 * t2680) * t2899 + (t2526 * t3297 + t2538 * t3308 + t2562 * t2679) * t2898 + (t2524 * t3299 + t2536 * t3310 + t2560 * t2675) * t2897 + (t2522 * t3301 + t2534 * t3312 + t2558 * t2674) * t2896 + (t2520 * t3303 + t2532 * t3314 + t2556 * t2673) * t2895, (t2530 * t3292 + t2542 * t3305 + t2566 * t2678) * t2900 + (t2528 * t3294 + t2540 * t3307 + t2564 * t2677) * t2899 + (t2526 * t3296 + t2538 * t3309 + t2562 * t2676) * t2898 + (t2524 * t3298 + t2536 * t3311 + t2560 * t2672) * t2897 + (t2522 * t3300 + t2534 * t3313 + t2558 * t2671) * t2896 + (t2520 * t3302 + t2532 * t3315 + t2556 * t2670) * t2895, (t2530 * t3274 - t2566 * t2699) * t2900 + (t2528 * t3275 - t2564 * t2698) * t2899 + (t2526 * t3276 - t2562 * t2697) * t2898 + (t2524 * t3277 - t2560 * t2690) * t2897 + (t2522 * t3278 - t2558 * t2689) * t2896 + (t2520 * t3279 - t2556 * t2688) * t2895 + (-t2532 * t3096 - t2534 * t3095 - t2536 * t3094 - t2538 * t3093 - t2540 * t3092 - t2542 * t3091) * t2976, t3045, t2947 * t3066 + t2950 * t3064 - t2799, t3045 * t2946 + (-t2947 * t3064 + t2950 * t3066 - t2859) * t2949; (t2531 * t3293 + t2543 * t3304 + t2567 * t2681) * t2900 + (t2529 * t3295 + t2541 * t3306 + t2565 * t2680) * t2899 + (t2527 * t3297 + t2539 * t3308 + t2563 * t2679) * t2898 + (t2525 * t3299 + t2537 * t3310 + t2561 * t2675) * t2897 + (t2523 * t3301 + t2535 * t3312 + t2559 * t2674) * t2896 + (t2521 * t3303 + t2533 * t3314 + t2557 * t2673) * t2895, m(4) + (t2531 * t3292 + t2543 * t3305 + t2567 * t2678) * t2900 + (t2529 * t3294 + t2541 * t3307 + t2565 * t2677) * t2899 + (t2527 * t3296 + t2539 * t3309 + t2563 * t2676) * t2898 + (t2525 * t3298 + t2537 * t3311 + t2561 * t2672) * t2897 + (t2523 * t3300 + t2535 * t3313 + t2559 * t2671) * t2896 + (t2521 * t3302 + t2533 * t3315 + t2557 * t2670) * t2895, (t2531 * t3274 - t2567 * t2699) * t2900 + (t2529 * t3275 - t2565 * t2698) * t2899 + (t2527 * t3276 - t2563 * t2697) * t2898 + (t2525 * t3277 - t2561 * t2690) * t2897 + (t2523 * t3278 - t2559 * t2689) * t2896 + (t2521 * t3279 - t2557 * t2688) * t2895 + (-t2533 * t3096 - t2535 * t3095 - t2537 * t3094 - t2539 * t3093 - t2541 * t3092 - t2543 * t3091) * t2976, t2777 + t3042, t3063 * t2950 + (t2800 + t3065) * t2947, t2858 * t2950 + t3042 * t2946 + (-t2947 * t3063 + t2950 * t3065) * t2949; (t2555 * t3293 + t2573 * t3304 + t2615 * t2681) * t2900 + (t2554 * t3295 + t2572 * t3306 + t2614 * t2680) * t2899 + (t2553 * t3297 + t2571 * t3308 + t2613 * t2679) * t2898 + (t2552 * t3299 + t2570 * t3310 + t2612 * t2675) * t2897 + (t2551 * t3301 + t2569 * t3312 + t2611 * t2674) * t2896 + (t2550 * t3303 + t2568 * t3314 + t2610 * t2673) * t2895, (t2555 * t3292 + t2573 * t3305 + t2615 * t2678) * t2900 + (t2554 * t3294 + t2572 * t3307 + t2614 * t2677) * t2899 + (t2553 * t3296 + t2571 * t3309 + t2613 * t2676) * t2898 + (t2552 * t3298 + t2570 * t3311 + t2612 * t2672) * t2897 + (t2551 * t3300 + t2569 * t3313 + t2611 * t2671) * t2896 + (t2550 * t3302 + t2568 * t3315 + t2610 * t2670) * t2895, m(4) + (t2555 * t3274 - t2615 * t2699) * t2900 + (t2554 * t3275 - t2614 * t2698) * t2899 + (t2553 * t3276 - t2613 * t2697) * t2898 + (t2552 * t3277 - t2612 * t2690) * t2897 + (t2551 * t3278 - t2611 * t2689) * t2896 + (t2550 * t3279 - t2610 * t2688) * t2895 + (-t2568 * t3096 - t2569 * t3095 - t2570 * t3094 - t2571 * t3093 - t2572 * t3092 - t2573 * t3091) * t2976, t3044 + t3156, t3062 * t2947 + (-t2800 - t3061) * t2950, t2947 * t2858 + (t3044 + t2834) * t2946 + (t2947 * t3061 + t2950 * t3062) * t2949; (t2429 * t3293 + t2450 * t3304 + t2489 * t2681) * t2900 + (t2428 * t3295 + t2449 * t3306 + t2488 * t2680) * t2899 + (t2427 * t3297 + t2448 * t3308 + t2487 * t2679) * t2898 + (t2423 * t3299 + t2444 * t3310 + t2486 * t2675) * t2897 + (t2422 * t3301 + t2443 * t3312 + t2485 * t2674) * t2896 + (t2421 * t3303 + t2442 * t3314 + t2484 * t2673) * t2895, (t2429 * t3292 + t2450 * t3305 + t2489 * t2678) * t2900 + (t2428 * t3294 + t2449 * t3307 + t2488 * t2677) * t2899 + (t2427 * t3296 + t2448 * t3309 + t2487 * t2676) * t2898 + (t2423 * t3298 + t2444 * t3311 + t2486 * t2672) * t2897 + (t2422 * t3300 + t2443 * t3313 + t2485 * t2671) * t2896 + (t2421 * t3302 + t2442 * t3315 + t2484 * t2670) * t2895 - t3354, (t2429 * t3274 - t2489 * t2699) * t2900 + (t2428 * t3275 - t2488 * t2698) * t2899 + (t2427 * t3276 - t2487 * t2697) * t2898 + (t2423 * t3277 - t2486 * t2690) * t2897 + (t2422 * t3278 - t2485 * t2689) * t2896 + (t2421 * t3279 - t2484 * t2688) * t2895 + (-t2442 * t3096 - t2443 * t3095 - t2444 * t3094 - t2448 * t3093 - t2449 * t3092 - t2450 * t3091) * t2976 + t3156, t2832 * t2932 + 0.2e1 * t2949 * t3368 + t3043, t2833 * t2949 + t2876 * t2946 + t2947 * t3070 + t2950 * t3068, t3043 * t2946 + (-t2947 * t3068 + t2950 * t3070 + t2877) * t2949; (t2441 * t3293 + t2459 * t3304 + t2495 * t2681) * t2900 + (t2440 * t3295 + t2458 * t3306 + t2494 * t2680) * t2899 + (t2439 * t3297 + t2457 * t3308 + t2493 * t2679) * t2898 + (t2435 * t3299 + t2456 * t3310 + t2492 * t2675) * t2897 + (t2434 * t3301 + t2455 * t3312 + t2491 * t2674) * t2896 + (t2433 * t3303 + t2454 * t3314 + t2490 * t2673) * t2895 + t3354, (t2441 * t3292 + t2459 * t3305 + t2495 * t2678) * t2900 + (t2440 * t3294 + t2458 * t3307 + t2494 * t2677) * t2899 + (t2439 * t3296 + t2457 * t3309 + t2493 * t2676) * t2898 + (t2435 * t3298 + t2456 * t3311 + t2492 * t2672) * t2897 + (t2434 * t3300 + t2455 * t3313 + t2491 * t2671) * t2896 + (t2433 * t3302 + t2454 * t3315 + t2490 * t2670) * t2895, (t2441 * t3274 - t2495 * t2699) * t2900 + (t2440 * t3275 - t2494 * t2698) * t2899 + (t2439 * t3276 - t2493 * t2697) * t2898 + (t2435 * t3277 - t2492 * t2690) * t2897 + (t2434 * t3278 - t2491 * t2689) * t2896 + (t2433 * t3279 - t2490 * t2688) * t2895 + (-t2454 * t3096 - t2455 * t3095 - t2456 * t3094 - t2457 * t3093 - t2458 * t3092 - t2459 * t3091) * t2976 - t2800, (Ifges(4,5) * t2947 + Ifges(4,6) * t3181) * t2948 + t2945 * (Ifges(4,5) * t3181 - Ifges(4,6) * t2947) + ((t2947 * t3180 + 0.2e1 * t3316) * t2931 - t2836 * t3184 + t3319 * t3182 - t3316) * t2949 + t3046 - 0.2e1 * t2947 * t2877 * t2932, t2836 * t2931 + (Ifges(4,1) - t3067 + 0.2e1 * t3138) * t2950 + (t3069 + t3097) * t2947, t2819 * t2947 + t2950 * t2876 + t3046 * t2946 + (t2947 * t3067 + t2950 * t3069) * t2949; (t2411 * t3293 + t2417 * t3304 + t2453 * t2681) * t2900 + (t2410 * t3295 + t2416 * t3306 + t2452 * t2680) * t2899 + (t2409 * t3297 + t2415 * t3308 + t2451 * t2679) * t2898 + (t2405 * t3299 + t2414 * t3310 + t2447 * t2675) * t2897 + (t2404 * t3301 + t2413 * t3312 + t2446 * t2674) * t2896 + (t2403 * t3303 + t2412 * t3314 + t2445 * t2673) * t2895 - t3156, (t2411 * t3292 + t2417 * t3305 + t2453 * t2678) * t2900 + (t2410 * t3294 + t2416 * t3307 + t2452 * t2677) * t2899 + (t2409 * t3296 + t2415 * t3309 + t2451 * t2676) * t2898 + (t2405 * t3298 + t2414 * t3311 + t2447 * t2672) * t2897 + (t2404 * t3300 + t2413 * t3313 + t2446 * t2671) * t2896 + (t2403 * t3302 + t2412 * t3315 + t2445 * t2670) * t2895 + t2800, (t2411 * t3274 - t2453 * t2699) * t2900 + (t2410 * t3275 - t2452 * t2698) * t2899 + (t2409 * t3276 - t2451 * t2697) * t2898 + (t2405 * t3277 - t2447 * t2690) * t2897 + (t2404 * t3278 - t2446 * t2689) * t2896 + (t2403 * t3279 - t2445 * t2688) * t2895 + (-t2412 * t3096 - t2413 * t3095 - t2414 * t3094 - t2415 * t3093 - t2416 * t3092 - t2417 * t3091) * t2976, (-t2832 * t3181 + t2833 * t2947) * t2949 + (0.2e1 * t2932 - 0.1e1) * t2950 * t2877 + t3047 + t2946 * t3178, (-0.2e1 * t2931 * t3318 - t3071 - t3097) * t2950 + (Ifges(4,1) + t3072 - t3073) * t2947, -t2819 * t2950 + t3178 + t3047 * t2946 + (t2947 * t3071 + t2950 * t3072) * t2949;];
MX  = t1;
